<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>622810</id><snippet>mkdir /home/masi/.local

cd Python-2.6.1
make clean
./configure --prefix=/home/masi/.local
make
make install
</snippet></ROW><ROW><id>622810</id><snippet>/home/masi/.local/bin/python
</snippet></ROW><ROW><id>622810</id><snippet>#!/home/masi/.local/bin/python
</snippet></ROW><ROW><id>622810</id><snippet>./configure --prefix=/home/masi/.local --with-python=/home/masi/.local
</snippet></ROW><ROW><id>622810</id><snippet>/home/masi/.local/bin/python setup.py install
</snippet></ROW><ROW><id>623531</id><snippet>__slots__</snippet></ROW><ROW><id>623860</id><snippet>from django.db.models import F
...
MyModel.objects.filter(id=...).update(hit_count=F('hit_count')+1)
</snippet></ROW><ROW><id>624013</id><snippet>from django.utils.functional import curry

ServiceFormSet = formset_factory(curry(ServiceForm, affiliate=request.affiliate), extra=3)
</snippet></ROW><ROW><id>624013</id><snippet>from django.utils.functional import curry, wraps

ServiceFormSet = formset_factory(wraps(ServiceForm)(curry(ServiceForm, affiliate=request.affiliate)), extra=3)
</snippet></ROW><ROW><id>624013</id><snippet>ServiceFormSet = formset_factory(ServiceForm, extra=3)
ServiceFormSet.form = staticmethod(curry(ServiceForm, affiliate=request.affiliate))
</snippet></ROW><ROW><id>624068</id><snippet>url(r'^login/$', 'django.contrib.auth.views.login', {'template_name': 'quiz/quiz_login.html'})
</snippet></ROW><ROW><id>624068</id><snippet>url(r'^login$', 'django.contrib.auth.views.login', {'template_name': 'quiz/quiz_login.html'})
</snippet></ROW><ROW><id>624361</id><snippet>form = MyModelForm (initial={'gender':'M'})
</snippet></ROW><ROW><id>624361</id><snippet>class MyModelForm (forms.ModelForm):
    gender = forms.ChoiceField (choices=..., initial='M', ...)
    class Meta:
        model=MyModel
</snippet></ROW><ROW><id>624361</id><snippet>form = MyModelForm (instance=someinst)
</snippet></ROW><ROW><id>624532</id><snippet>
formatter = HtmlFormatter(style=MyStyle)
formatter.noclasses = True
print highlight(content,PythonLexer(),formatter)
</snippet></ROW><ROW><id>624939</id><snippet>hasattr(obj, '__call__')
</snippet></ROW><ROW><id>624939</id><snippet>callable()</snippet></ROW><ROW><id>624998</id><snippet>/home/masi/.local/bin/python setup.py install
</snippet></ROW><ROW><id>625499</id><snippet>l = threading.RLock()

def fn(arg):
    if arg == arg_that_needs_lock:
        l.acquire()
        try:
            # do stuff
        finally:
            l.release()
    else:
        # do other stuff
</snippet></ROW><ROW><id>625499</id><snippet>import threading

dict_lock = threading.RLock()
locks = {}

def fn_dict(arg):
    dict_lock.acquire()
    try:
        if arg not in dict:
            locks[arg] = threading.RLock()
        l = locks[arg]
    finally:
        dict_lock.release()
    l.acquire()
    try:
        # do stuff
    finally:
        l.release()
</snippet></ROW><ROW><id>625499</id><snippet>set_condition = threading.Condition()
current_args = set()

def fn_set(arg):
    set_condition.acquire()
    try:
        while arg in current_args:
            set_condition.wait()
        current_args.add(arg)
    finally:
        set_condition.release()
    # do stuff
    set_condition.acquire()
    try:
        current_args.remove(arg)
        set_condition.notifyAll()
    finally:
        set_condition.release()
</snippet></ROW><ROW><id>625806</id><snippet>ret_val = func(args)
</snippet></ROW><ROW><id>625806</id><snippet>ret_val = func(*args)
</snippet></ROW><ROW><id>625806</id><snippet>&gt;&gt;&gt; class Test2:
...     @trace
...     def test3(self, a, b):
...        pass
... 
&gt;&gt;&gt; t = Test2()
&gt;&gt;&gt; t.test3(1,2)
entering test3 with args (&lt;__main__.Test2 instance at 0x7ff2b42c&gt;, 1, 2)
return value None
exiting test3
&gt;&gt;&gt;
</snippet></ROW><ROW><id>625806</id><snippet>**</snippet></ROW><ROW><id>625851</id><snippet>self.Bind(wx.aui.EVT_AUINOTEBOOK_PAGE_CLOSED, self.close, self.nb)
</snippet></ROW><ROW><id>625851</id><snippet>self.Bind(wx.aui.EVT_AUINOTEBOOK_TAB_RIGHT_DOWN, self.right, self.nb)
</snippet></ROW><ROW><id>625851</id><snippet>EVT_AUINOTEBOOK_PAGE_CLOSE
EVT_AUINOTEBOOK_PAGE_CLOSED
EVT_AUINOTEBOOK_PAGE_CHANGED
EVT_AUINOTEBOOK_PAGE_CHANGING
EVT_AUINOTEBOOK_BUTTON
EVT_AUINOTEBOOK_BEGIN_DRAG
EVT_AUINOTEBOOK_END_DRAG
EVT_AUINOTEBOOK_DRAG_MOTION
EVT_AUINOTEBOOK_ALLOW_DND
EVT_AUINOTEBOOK_DRAG_DONE
EVT_AUINOTEBOOK_BG_DCLICK
EVT_AUINOTEBOOK_TAB_MIDDLE_DOWN
EVT_AUINOTEBOOK_TAB_MIDDLE_UP
EVT_AUINOTEBOOK_TAB_RIGHT_DOWN
EVT_AUINOTEBOOK_TAB_RIGHT_UP
</snippet></ROW><ROW><id>626130</id><snippet>None</snippet></ROW><ROW><id>626130</id><snippet>or</snippet></ROW><ROW><id>626130</id><snippet>my_model.width = form.cleaned_data['width'] or None
</snippet></ROW><ROW><id>626180</id><snippet>sys.path</snippet></ROW><ROW><id>626180</id><snippet>sys.path</snippet></ROW><ROW><id>626666</id><snippet>.svn</snippet></ROW><ROW><id>626666</id><snippet>.svn/text-base</snippet></ROW><ROW><id>626666</id><snippet>.svn-base</snippet></ROW><ROW><id>626790</id><snippet>s.isalpha()
</snippet></ROW><ROW><id>626871</id><snippet>my_location = (42, 11)  # page number, line number
</snippet></ROW><ROW><id>626927</id><snippet>ALLUSERSPROFILE</snippet></ROW><ROW><id>626927</id><snippet>C:\&gt; python -c "import os; print os.environ['ALLUSERSPROFILE']"
C:\Documents and Settings\All Users
</snippet></ROW><ROW><id>626927</id><snippet>import ctypes
from ctypes import wintypes, windll

CSIDL_COMMON_APPDATA = 35

_SHGetFolderPath = windll.shell32.SHGetFolderPathW
_SHGetFolderPath.argtypes = [wintypes.HWND,
                            ctypes.c_int,
                            wintypes.HANDLE,
                            wintypes.DWORD, wintypes.LPCWSTR]


path_buf = wintypes.create_unicode_buffer(wintypes.MAX_PATH)
result = _SHGetFolderPath(0, CSIDL_COMMON_APPDATA, 0, 0, path_buf)
print path_buf.value
</snippet></ROW><ROW><id>626927</id><snippet>C:\&gt; python get_common_appdata.py
C:\Documents and Settings\All Users\Application Data
</snippet></ROW><ROW><id>626939</id><snippet>Objects/frameobject.c</snippet></ROW><ROW><id>626939</id><snippet>static PyMemberDef frame_memberlist[] = {
    {"f_back",      T_OBJECT,       OFF(f_back),    RO},
    {"f_code",      T_OBJECT,       OFF(f_code),    RO},
    {"f_builtins",  T_OBJECT,       OFF(f_builtins),RO},
    {"f_globals",   T_OBJECT,       OFF(f_globals), RO},
    {"f_lasti",     T_INT,          OFF(f_lasti),   RO},
    {"f_exc_type",  T_OBJECT,       OFF(f_exc_type)},
    {"f_exc_value", T_OBJECT,       OFF(f_exc_value)},
    {"f_exc_traceback", T_OBJECT,   OFF(f_exc_traceback)},
    {NULL}    /* Sentinel */
};
...
static PyGetSetDef frame_getsetlist[] = {
    {"f_locals",    (getter)frame_getlocals, NULL, NULL},
    {"f_lineno",    (getter)frame_getlineno,
                    (setter)frame_setlineno, NULL},
    {"f_trace",     (getter)frame_gettrace, (setter)frame_settrace, NULL},
    {"f_restricted",(getter)frame_getrestricted,NULL, NULL},
    {0}
};
</snippet></ROW><ROW><id>626939</id><snippet>PyMemberDef</snippet></ROW><ROW><id>626939</id><snippet>RO</snippet></ROW><ROW><id>626939</id><snippet>READONLY</snippet></ROW><ROW><id>626939</id><snippet>PyGetSetDef</snippet></ROW><ROW><id>626939</id><snippet>f_exc_type</snippet></ROW><ROW><id>626939</id><snippet>f_exc_value</snippet></ROW><ROW><id>626939</id><snippet>f_exc_traceback</snippet></ROW><ROW><id>626939</id><snippet>f_trace</snippet></ROW><ROW><id>626939</id><snippet>&gt;&gt;&gt; f = sys._getframe()
&gt;&gt;&gt; f.f_locals['foo'] = 3
&gt;&gt;&gt; foo
3
&gt;&gt;&gt;
</snippet></ROW><ROW><id>626939</id><snippet>f_fastlocals</snippet></ROW><ROW><id>626939</id><snippet>f_locals</snippet></ROW><ROW><id>626939</id><snippet>&gt;&gt;&gt; def foo():
...   x = 3
...   f = sys._getframe()
...   print f.f_locals['x']
...   x = 4
...   print f.f_locals['x']
...   d = f.f_locals
...   x = 5
...   print d['x']
...   f.f_locals
...   print d['x']
...
&gt;&gt;&gt; foo()
3
4
4
5
&gt;&gt;&gt;
</snippet></ROW><ROW><id>626939</id><snippet>f_local</snippet></ROW><ROW><id>626939</id><snippet>f_globals</snippet></ROW><ROW><id>626939</id><snippet>f_globals</snippet></ROW><ROW><id>627453</id><snippet>del</snippet></ROW><ROW><id>627453</id><snippet>In [9]: a = range(10)
In [10]: a
Out[10]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
In [11]: del a[-1]
In [12]: a
Out[12]: [0, 1, 2, 3, 4, 5, 6, 7, 8]
</snippet></ROW><ROW><id>627519</id><snippet>from functools import wraps

def intercept(target,**trigger):
    def decorator(func):
        names = getattr(func,'_names',None)
        if names is None:
            code = func.func_code
            names = code.co_varnames[:code.co_argcount]
        @wraps(func)
        def decorated(*args,**kwargs):
            all_args = kwargs.copy()
            for n,v in zip(names,args):
                all_args[n] = v
            for k,v in trigger.iteritems():
                if k in all_args and all_args[k] != v:
                    break
            else:
                return target(all_args)
            return func(*args,**kwargs)
        decorated._names = names
        return decorated
    return decorator
</snippet></ROW><ROW><id>627519</id><snippet>def interceptor1(kwargs):
    print 'Intercepted by #1!'

def interceptor2(kwargs):
    print 'Intercepted by #2!'

def interceptor3(kwargs):
    print 'Intercepted by #3!'

@intercept(interceptor1,arg1=20,arg2=5) # if arg1 == 20 and arg2 == 5
@intercept(interceptor2,arg1=20)        # elif arg1 == 20
@intercept(interceptor3,arg2=5)         # elif arg2 == 5
def foo(arg1,arg2):
    return arg1+arg2

&gt;&gt;&gt; foo(3,4)
7
&gt;&gt;&gt; foo(20,4)
Intercepted by #2!
&gt;&gt;&gt; foo(3,5)
Intercepted by #3!
&gt;&gt;&gt; foo(20,5)
Intercepted by #1!
&gt;&gt;&gt;
</snippet></ROW><ROW><id>627519</id><snippet>functools.wraps</snippet></ROW><ROW><id>627519</id><snippet>__doc__</snippet></ROW><ROW><id>627519</id><snippet>__name__</snippet></ROW><ROW><id>627619</id><snippet>Win32_PerfFormattedData*</snippet></ROW><ROW><id>628159</id><snippet>a = [f(x) for x in bar]
</snippet></ROW><ROW><id>628159</id><snippet>def foo(x):
    return lambda f: f*x
</snippet></ROW><ROW><id>628159</id><snippet>&gt;&gt;&gt; def foo (x):
...     return lambda f: f*x
... 
&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; fn_foo = foo(5)
&gt;&gt;&gt; [fn_foo (y) for y in a]
[5, 10, 15]
</snippet></ROW><ROW><id>628159</id><snippet>&gt;&gt;&gt; y=5
&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; [x*y for x in a]
[5, 10, 15]
</snippet></ROW><ROW><id>628257</id><snippet>def factorial( *args ):
    def fact( n ):
        if n == 0: return 1
        return n*fact(n-1)
    return [ fact(a) for a in args ]
</snippet></ROW><ROW><id>628257</id><snippet>&gt;&gt;&gt; factorial(5)
[120]
&gt;&gt;&gt; factorial( 5, 6, 7 )
[120, 720, 5040]
&gt;&gt;&gt; factorial( *[5, 6, 7] )
[120, 720, 5040]
</snippet></ROW><ROW><id>628382</id><snippet>The Children of HÃºrin</snippet></ROW><ROW><id>628382</id><snippet>unicode(title_field.find('fact').string).encode("latin1").decode("utf-8")
</snippet></ROW><ROW><id>628470</id><snippet>   registration = Registration (**cleaned_data)
</snippet></ROW><ROW><id>628470</id><snippet>registration = Registration ({'key':'value', ...})
</snippet></ROW><ROW><id>628470</id><snippet>registration = Registration (key='value', ...)
</snippet></ROW><ROW><id>628470</id><snippet>registration = Registration (**{'key':'value', ...})
</snippet></ROW><ROW><id>628470</id><snippet>registration = Registration (
    x=cleaned_data['x'],
    y=cleaned_data['y'],
    z=cleaned_data['z'],
    ...
)
</snippet></ROW><ROW><id>628634</id><snippet>{id:'name',label:'Name',type:'string'}
</snippet></ROW><ROW><id>628634</id><snippet>{'id':'name','label':'Name','type':'string'}
</snippet></ROW><ROW><id>628634</id><snippet>easy_install demjson
</snippet></ROW><ROW><id>628859</id><snippet>Edit</snippet></ROW><ROW><id>628859</id><snippet># input = list of (start, stop, symbol) tuples
points = [] # list of (offset, plus/minus, symbol) tuples
for start,stop,symbol in input:
    points.append((start,'+',symbol))
    points.append((stop,'-',symbol))
points.sort()

ranges = [] # output list of (start, stop, symbol_set) tuples
current_set = set()
last_start = None
for offset,pm,symbol in points:
    if pm == '+':
         if last_start is not None:
             #TODO avoid outputting empty or trivial ranges
             ranges.append((last_start,offset-1,current_set))
         current_set.add(symbol)
         last_start = offset
    elif pm == '-':
         # Getting a minus without a last_start is unpossible here, so not handled
         ranges.append((last_start,offset-1,current_set))
         current_set.remove(symbol)
         last_start = offset

# Finish off
if last_start is not None:
    ranges.append((last_start,offset-1,current_set))
</snippet></ROW><ROW><id>629715</id><snippet>GOOGLE_ANALYTICS_KEY</snippet></ROW><ROW><id>629715</id><snippet>GOOGLE_ANALYTICS_KEY</snippet></ROW><ROW><id>629715</id><snippet>{% if settings.GOOGLE_ANALYTICS_KEY %}
&lt;script&gt; blah blah {{settings.GOOGLE_ANALYTICS_KEY}} blah blah &lt;/script&gt;
{% endif %}
</snippet></ROW><ROW><id>629930</id><snippet>mod_wsgi</snippet></ROW><ROW><id>629930</id><snippet>mod_python</snippet></ROW><ROW><id>629930</id><snippet>mod_proxy</snippet></ROW><ROW><id>630099</id><snippet>import urllib
html = urllib.urlopen('http://www.coopamerica.org/programs/responsibleshopper/company.cfm?id=271').read()
h = html.decode('iso-8859-1')
soup = BeautifulSoup(h)
</snippet></ROW><ROW><id>630099</id><snippet>curl -i http://www.coopamerica.org/programs/responsibleshopper/company.cfm?id=271
HTTP/1.1 200 OK
Connection: close
Date: Tue, 10 Mar 2009 13:14:29 GMT
Server: Microsoft-IIS/6.0
X-Powered-By: ASP.NET
Set-Cookie: COMPANYID=271;path=/
Content-Language: en-US
Content-Type: text/html; charset=UTF-8
</snippet></ROW><ROW><id>630099</id><snippet>import urllib
html = urllib.urlopen('http://www.coopamerica.org/programs/responsibleshopper/company.cfm?id=271').read()
h = html.decode('utf-8')
soup = BeautifulSoup(h)
ps = soup.body("p")
p = ps[52]
print p
</snippet></ROW><ROW><id>630258</id><snippet>read()</snippet></ROW><ROW><id>630974</id><snippet>lookup()</snippet></ROW><ROW><id>630974</id><snippet>codecs</snippet></ROW><ROW><id>630974</id><snippet>import codecs
def exists_encoding(enc):
    try:
        codecs.lookup(enc)
    except LookupError:
        return False
    return True
exists_encoding('latin1')
</snippet></ROW><ROW><id>631514</id><snippet>easy_install ipython</snippet></ROW><ROW><id>631514</id><snippet>?</snippet></ROW><ROW><id>631514</id><snippet>dir</snippet></ROW><ROW><id>631514</id><snippet>In [2]: dir {}
------&gt; dir({})

Out[2]: 
['__class__',
 ...
 'keys',
 'pop',
 'popitem',
 'setdefault',
 'update',
 'values']

In [3]: {}.update?
Type:   	dict
Base Class: &lt;type 'dict'&gt;
String Form:    {}
Namespace:  Interactive
Length: 	0
Docstring:
    dict() -&gt; new empty dictionary.
    dict(mapping) -&gt; new dictionary initialized from a mapping object's
        (key, value) pairs.
    dict(seq) -&gt; new dictionary initialized as if via:
        d = {}
        for k, v in seq:
            d[k] = v
    dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs
        in the keyword argument list.  For example:  dict(one=1, two=2)
</snippet></ROW><ROW><id>631514</id><snippet>set</snippet></ROW><ROW><id>631514</id><snippet>common_keys = [k for k in dict1 if k in dict2]
</snippet></ROW><ROW><id>631514</id><snippet>k</snippet></ROW><ROW><id>631514</id><snippet>setdefault</snippet></ROW><ROW><id>631514</id><snippet>new = {}
for (k, v) in dict1.items():
    new.setdefault(k, []).append(v)
for (k, v) in dict2.items():
    new.setdefault(k, []).append(v)
</snippet></ROW><ROW><id>631899</id><snippet>open("icon.png", "rb")
</snippet></ROW><ROW><id>631985</id><snippet>__init__.py</snippet></ROW><ROW><id>631985</id><snippet>&gt; ./packageTest
&gt;   ./packageTest/__init__.py
&gt;   ./packageTest/setup.py
</snippet></ROW><ROW><id>631985</id><snippet>__init__.py</snippet></ROW><ROW><id>631985</id><snippet># package directory __init__.py
__version__ = 1.0
</snippet></ROW><ROW><id>631985</id><snippet># setup.py
from packageTest import __version__
...
</snippet></ROW><ROW><id>631985</id><snippet>from packageTest import setup
print 'Setup.py version:', setup.__version__  
# prints Setup.py version: 1.0
</snippet></ROW><ROW><id>632314</id><snippet>pkg_resources</snippet></ROW><ROW><id>632314</id><snippet>dist = pkg_resources.get_distribution('your-app')
if dist.precedence == pkg_resources.DEVELOP_DIST:
    # package is in development mode
    ...
</snippet></ROW><ROW><id>632594</id><snippet>.pth</snippet></ROW><ROW><id>632594</id><snippet>.pth</snippet></ROW><ROW><id>632594</id><snippet>.pth</snippet></ROW><ROW><id>632732</id><snippet>&lt;%
for match in matches:
  #begin
%&gt;&lt;tr&gt;
&lt;%
for i in range(1, len(match.groups())+1):
  #begin
%&gt;
  &lt;td style="border-style:solid;border-width:1px;border-spacing:0px;text-align:center;"&gt;&lt;%= match.group(i) %&gt;&lt;/td&gt;
&lt;%
  #end
# end
%&gt;
</snippet></ROW><ROW><id>632732</id><snippet>matches</snippet></ROW><ROW><id>632732</id><snippet>range(...)</snippet></ROW><ROW><id>632732</id><snippet>&lt;%
for match in matches:
    # begin
%&gt;&lt;tr&gt;&lt;%
    for group in match.groups():
        # begin
%&gt;&lt;td style="border-style:solid;border-width:1px;border-spacing:0px;text-align:center;"&gt;&lt;%= group %&gt;&lt;/td&gt;&lt;%
    # end
%&gt;&lt;/tr&gt;&lt;%
# end
%&gt;
</snippet></ROW><ROW><id>632732</id><snippet>&lt;px:for item="match" in="matches"&gt;&lt;tr&gt;
    &lt;px:for item="group" in="match.groups()"&gt;
        &lt;td style="border-style:solid;border-width:1px;border-spacing:0px;text-align:center;"&gt;
            &lt;?_ group ?&gt;
        &lt;/td&gt;
    &lt;/px:for&gt;
&lt;/tr&gt;&lt;/px:for&gt;
</snippet></ROW><ROW><id>632823</id><snippet>3.907985046680551e-14</snippet></ROW><ROW><id>632869</id><snippet>getattr(f, field)</snippet></ROW><ROW><id>632869</id><snippet>field = "foo"</snippet></ROW><ROW><id>632869</id><snippet>f.foo</snippet></ROW><ROW><id>632869</id><snippet>eval()</snippet></ROW><ROW><id>632869</id><snippet>eval()</snippet></ROW><ROW><id>634086</id><snippet>outfile = open("out.txt", "w")</snippet></ROW><ROW><id>634233</id><snippet>join(None)</snippet></ROW><ROW><id>634233</id><snippet>join(2**31)</snippet></ROW><ROW><id>634233</id><snippet>isAlive</snippet></ROW><ROW><id>634233</id><snippet>servth.join(100)</snippet></ROW><ROW><id>634233</id><snippet>servth.join()</snippet></ROW><ROW><id>634233</id><snippet>select(0, NULL, NULL, NULL, {0, 1000})  = 0 (Timeout)
select(0, NULL, NULL, NULL, {0, 2000})  = 0 (Timeout)
select(0, NULL, NULL, NULL, {0, 4000})  = 0 (Timeout)
select(0, NULL, NULL, NULL, {0, 8000})  = 0 (Timeout)
select(0, NULL, NULL, NULL, {0, 16000}) = 0 (Timeout)
select(0, NULL, NULL, NULL, {0, 32000}) = 0 (Timeout)
select(0, NULL, NULL, NULL, {0, 50000}) = 0 (Timeout)
select(0, NULL, NULL, NULL, {0, 50000}) = 0 (Timeout)
select(0, NULL, NULL, NULL, {0, 50000}) = 0 (Timeout)
--- Skipped 15 equal lines ---
select(0, NULL, NULL, NULL, {0, 50000}Killing
</snippet></ROW><ROW><id>634237</id><snippet>asyncore</snippet></ROW><ROW><id>634237</id><snippet>select</snippet></ROW><ROW><id>634237</id><snippet>poll</snippet></ROW><ROW><id>634885</id><snippet>nzb_data = File.get_nzb_data(nzb_absolute)
</snippet></ROW><ROW><id>634885</id><snippet>get_nzb_data</snippet></ROW><ROW><id>634885</id><snippet>@classmethod</snippet></ROW><ROW><id>634885</id><snippet>temp_f= File(...)</snippet></ROW><ROW><id>634885</id><snippet>temp_f.get_dnb_data</snippet></ROW><ROW><id>635559</id><snippet>my_form = MyFormClass(request.POST, request.FILES)
</snippet></ROW><ROW><id>635559</id><snippet>if my_form.is_valid():
    data = request.FILES['myfile'].read()
</snippet></ROW><ROW><id>635559</id><snippet>clean</snippet></ROW><ROW><id>635559</id><snippet>cleaned_data.get('xml_file')</snippet></ROW><ROW><id>635559</id><snippet>__str__</snippet></ROW><ROW><id>635559</id><snippet>xml_file = myform.cleaned_data.get('xml_file')
print xml_file.read()
</snippet></ROW><ROW><id>635716</id><snippet>import unicodedata
if unicodedata.combining(u'a'):
    print "is combining character"
else:
    print "is not combining"
</snippet></ROW><ROW><id>636160</id><snippet>FieldsetMixin</snippet></ROW><ROW><id>636160</id><snippet>from django.forms import Form
from formfieldset.forms import FieldsetMixin


class MyForm(Form, FieldsetMixin):
    fieldsets = (
        (u'', {'fields': ['name', 'company']}),
        (u'Interested in', {'fields': ['foo', 'bar', 'baz']}),
    )

    # rest of the form
</snippet></ROW><ROW><id>636564</id><snippet># Sierra Wireless AirCard 880 U
BUS=="usb", KERNEL=="ttyUSB2*", ACTION=="add", \
   PRODUCT=="1199/6855/0", DEVNAME=="/dev/tts/USB2", \
   OWNER="root", GROUP="dialout", \
   SYMLINK+="bpw", RUN="/usr/sbin/bpw"
</snippet></ROW><ROW><id>636570</id><snippet>from subprocess import Popen
p = Popen(['watch', 'ls']) # something long running
# ... do other stuff while subprocess is running
p.terminate()
</snippet></ROW><ROW><id>636570</id><snippet>poll()</snippet></ROW><ROW><id>636570</id><snippet>communicate()</snippet></ROW><ROW><id>636842</id><snippet>Repository</snippet></ROW><ROW><id>636842</id><snippet>git</snippet></ROW><ROW><id>636960</id><snippet>awk '{ gsub(/\. +/, ".\n"); print }'

$ echo "abc. 123. xyz." | awk '{ gsub(/\. +/, ".\n"); print }'
abc.
123.
xyz.
</snippet></ROW><ROW><id>636997</id><snippet>' '.join(set(foo.split()))
</snippet></ROW><ROW><id>636997</id><snippet>' '.join(set(foo.split(' ')))
</snippet></ROW><ROW><id>637020</id><snippet>def __init__(self, *args, **kwargs):
    super(RegistrationFormTOS, self).__init__(*args, **kwargs)
    self.fields['email'].label = "New Email Label"
</snippet></ROW><ROW><id>637423</id><snippet>python</snippet></ROW><ROW><id>637423</id><snippet>python-mode</snippet></ROW><ROW><id>637423</id><snippet>idle</snippet></ROW><ROW><id>637423</id><snippet>python</snippet></ROW><ROW><id>637561</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>637561</id><snippet>def</snippet></ROW><ROW><id>637561</id><snippet># program.py file

def foo():
    """ analogous to a main().  do something here """
    pass

# ... fill in rest of function def's here ...

# here is where the code execution and control flow will
# actually originate for your code, when program.py is
# invoked as a program.  a very common Pythonism...
if __name__ == '__main__':
    foo()
</snippet></ROW><ROW><id>637561</id><snippet>python</snippet></ROW><ROW><id>637561</id><snippet>python</snippet></ROW><ROW><id>637561</id><snippet>cProfile</snippet></ROW><ROW><id>637561</id><snippet>foo()</snippet></ROW><ROW><id>637747</id><snippet>os.environ['DJANGO_SETTINGS_MODULE'] = ‘myproject.settings’
                                       ^                  ^
</snippet></ROW><ROW><id>638055</id><snippet>sum([pair[0] for pair in list_of_pairs])
</snippet></ROW><ROW><id>638409</id><snippet>dict((x, set(y) &amp; set(d1.get(x, ()))) for (x, y) in d2.iteritems())
</snippet></ROW><ROW><id>638409</id><snippet>&gt;&gt;&gt; d3 = {k: list(set(d1.get(k,[])).intersection(v)) for k, v in d2.items()}
{0: ['11', '25', '38'], 1: ['38'], 2: ['11', '18'], 3: ['11', '25']}
</snippet></ROW><ROW><id>638409</id><snippet>&gt;&gt;&gt; d3 = {k: v for k, v in d3.items() if v}
</snippet></ROW><ROW><id>638409</id><snippet>d3 = {}
for k, v in d2.items():
    # find common elements for d1 &amp; d2
    v3 = set(d1.get(k,[])).intersection(v)
    if v3: # whether there are common elements
       d3[k] = list(v3)
</snippet></ROW><ROW><id>638816</id><snippet>#In your model
head = models.BooleanField(default=True)

#As a signal plugin:
def check_head(sender, **kwargs):
    message = kwargs['instance']
    if hasattr(message,'no_check_head') and message.no_check_head:
        return
    previous_message = Message.objects.filter(time__lt=message.time).order_by('-time')[0]
    if message.source == previous_message.source:
        message.head = False
    next_message = Message.objects.filter(time__gt=message.time).order_by('time')[0]
    if message.source == next_message.source:
        next_message.head = False
        next_message.no_check_head
        next_message.save()
</snippet></ROW><ROW><id>638816</id><snippet>messages = Message.objects.filter(head=True).order_by('time')[0:15]
</snippet></ROW><ROW><id>638816</id><snippet>Lock</snippet></ROW><ROW><id>638816</id><snippet>import thread
lock = thread.allocate_lock()
def check_head(sender, **kwargs):
    # This check must come outside the safe zone
    # Otherwise, your code will screech to a hault
    message = kwargs['instance']
    if hasattr(message,'no_check_head') and message.no_check_head:
        return
    # define safe zone
    lock.acquire()
    # see code above
    ....
    lock.release()
</snippet></ROW><ROW><id>638823</id><snippet>#!/usr/bin/env python
import codecs, sys

class NullWriter:
    def write(self, *args, **kwargs):
        pass

if len(sys.argv) == 2:
   if sys.argv[1] == '1':
      sys.stderr = NullWriter()
   elif sys.argv[1] == '2':
      #NOTE: sys.stderr.encoding is *read-only* 
      #      therefore the whole stderr should be replaced
      # encode all output using 'utf8'
      sys.stderr = codecs.getwriter('utf8')(sys.stderr)

print &gt;&gt;sys.stderr, u"\u20AC" # euro sign
print "ok"
</snippet></ROW><ROW><id>638823</id><snippet>$ python silence_stderr.py
Traceback (most recent call last):
  File "silence_stderr.py", line 11, in &lt;module&gt;
    print &gt;&gt;sys.stderr, u"\u20AC"
UnicodeEncodeError: 'ascii' codec can't encode character u'\u20ac' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>638823</id><snippet>$ python silence_stderr.py 1
ok
</snippet></ROW><ROW><id>638823</id><snippet>$ python silence_stderr.py 2
€
ok
</snippet></ROW><ROW><id>638823</id><snippet>$ python ... 2&gt;out.txt
$ cat out.txt
</snippet></ROW><ROW><id>638823</id><snippet>chcp 65001</snippet></ROW><ROW><id>638823</id><snippet>Lucida Console</snippet></ROW><ROW><id>638823</id><snippet>C:\&gt; python silence_stderr.py 2
Traceback (most recent call last):
  File "silence_stderr.py", line 14, in &lt;module&gt;
    print &gt;&gt;sys.stderr, u"\u20AC" # euro sign
  File "C:\pythonxy\python\lib\codecs.py", line 304, in write
    self.stream.write(data)
IOError: [Errno 13] Permission denied
</snippet></ROW><ROW><id>638823</id><snippet>C:\&gt; perl  -E"say qq(\x{20ac})"
Wide character in print at -e line 1.
€
</snippet></ROW><ROW><id>638823</id><snippet>C:\&gt;python silence_stderr.py 2 2&gt;tmp.log
ok
C:\&gt;cat tmp.log
€
cat: write error: Permission denied
</snippet></ROW><ROW><id>638823</id><snippet>codecs.getwriter</snippet></ROW><ROW><id>638823</id><snippet>LookupError</snippet></ROW><ROW><id>638823</id><snippet>class UTF8StreamWriter:
    def __init__(self, writer):
        self.writer = writer
    def write(self, s):
        self.writer.write(s.encode('utf-8'))

sys.stderr = UTF8StreamWriter(sys.stderr)
</snippet></ROW><ROW><id>638843</id><snippet>&gt;&gt;&gt; import stackless
&gt;&gt;&gt; ch1 = stackless.channel()
&gt;&gt;&gt; def a():
...  ch2 = stackless.channel()
...  ch1.send(ch2)
...  ch2.send("Hello")
...
&gt;&gt;&gt; def b():
...  ch3 = ch1.receive()
...  print ch3.receive()
...
&gt;&gt;&gt; stackless.tasklet(a)()
&lt;stackless.tasklet object at 0x01C6FCB0&gt;
&gt;&gt;&gt; stackless.tasklet(b)()
&lt;stackless.tasklet object at 0x01C6FAB0&gt;
&gt;&gt;&gt; stackless.run()
Hello
</snippet></ROW><ROW><id>639209</id><snippet>inspect.getmro</snippet></ROW><ROW><id>639223</id><snippet>    rs = client.CreateObject("ADODB.Recordset")
</snippet></ROW><ROW><id>639223</id><snippet>    rs = client.CreateObject("ADODB.Recordset", dynamic=True)
</snippet></ROW><ROW><id>639325</id><snippet>import string, re, timeit

# Precomputed values (for str_join_set and translate)

letter_set = frozenset(string.ascii_lowercase + string.ascii_uppercase)
tab = string.maketrans(string.ascii_lowercase + string.ascii_uppercase,
                       string.ascii_lowercase * 2)
deletions = ''.join(ch for ch in map(chr,range(256)) if ch not in letter_set)

s="A235th@#$&amp;( er Ra{}|?&gt;ndom"

# From unwind's filter approach
def test_filter(s):
    return filter(lambda x: x in string.ascii_lowercase, s.lower())

# using set instead (and contains)
def test_filter_set(s):
    return filter(letter_set.__contains__, s).lower()

# Tomalak's solution
def test_regex(s):
    return re.sub('[^a-z]', '', s.lower())

# Dana's
def test_str_join(s):
    return ''.join(c for c in s.lower() if c in string.ascii_lowercase)

# Modified to use a set.
def test_str_join_set(s):
    return ''.join(c for c in s.lower() if c in letter_set)

# Translate approach.
def test_translate(s):
    return string.translate(s, tab, deletions)


for test in sorted(globals()):
    if test.startswith("test_"):
        assert globals()[test](s)=='atherrandom'
        print "%30s : %s" % (test, timeit.Timer("f(s)", 
              "from __main__ import %s as f, s" % test).timeit(200000))
</snippet></ROW><ROW><id>639325</id><snippet>               test_filter : 2.57138351271
           test_filter_set : 0.981806765698
                test_regex : 3.10069885233
             test_str_join : 2.87172979743
         test_str_join_set : 2.43197956381
            test_translate : 0.335367566218
</snippet></ROW><ROW><id>639325</id><snippet>set.__contains__</snippet></ROW><ROW><id>639446</id><snippet>printf '%s\n' *|awk -F7 NF==4
</snippet></ROW><ROW><id>639993</id><snippet>self.doc.build(pdf)
</snippet></ROW><ROW><id>639993</id><snippet>self.doc.build(pdf, canvasmaker=NumberedCanvas)
</snippet></ROW><ROW><id>640016</id><snippet>s/\([^)]*\)//
</snippet></ROW><ROW><id>640016</id><snippet>re.sub(r'\([^)]*\)', '', filename)
</snippet></ROW><ROW><id>640036</id><snippet>import dateutil.parser
d= dateutil.parser.parse('1/2/2003')
d.strftime('%d-%b-%y')
</snippet></ROW><ROW><id>640078</id><snippet>namelist()</snippet></ROW><ROW><id>640078</id><snippet>import os, zipfile

z = zipfile.ZipFile('myfile.zip')
for f in z.namelist():
    if f.endswith('/'):
        os.makedirs(f)
</snippet></ROW><ROW><id>640318</id><snippet>from django.views.generic.create_update import get_model_and_form_class
def form_user_default(request):
    if request.method == 'GET':
        model, custom_form = get_model_and_form_class(Post,None)
        custom_form.author = request.user
        return {'form':custom_form}
    else: return {}
</snippet></ROW><ROW><id>640318</id><snippet>url(r'pattern_to_match', 'django.views.generic.create_update.create_object', kwargs={'context_processors':form_user_default})
</snippet></ROW><ROW><id>640431</id><snippet>import os
os.environ['PYTHONINSPECT'] = '1'
</snippet></ROW><ROW><id>640431</id><snippet>import os
from ctypes import POINTER, c_int, cast, pythonapi

def in_interactive_inspect_mode():
    """Whether '-i' option is present or PYTHONINSPECT is not empty."""
    if os.environ.get('PYTHONINSPECT'): return True
    iflag_ptr = cast(pythonapi.Py_InteractiveFlag, POINTER(c_int))
    #NOTE: in Python 2.6+ ctypes.pythonapi.Py_InspectFlag &gt; 0
    #      when PYTHONINSPECT set or '-i' is present 
    return iflag_ptr.contents.value != 0
</snippet></ROW><ROW><id>640472</id><snippet>runtests.py</snippet></ROW><ROW><id>640472</id><snippet>import os
os.environ['PYTHONPATH'] = '/path/to/site-packages'

import nose
nose.run()
</snippet></ROW><ROW><id>640472</id><snippet>runtests.py</snippet></ROW><ROW><id>640472</id><snippet>maya.standalone</snippet></ROW><ROW><id>640472</id><snippet>import maya.standalone
maya.standalone.initialize(name='python')
</snippet></ROW><ROW><id>640682</id><snippet>inspect</snippet></ROW><ROW><id>640682</id><snippet>findsource</snippet></ROW><ROW><id>640682</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; inspect.findsource(StringIO.StringIO)[1]
41
&gt;&gt;&gt;
</snippet></ROW><ROW><id>640682</id><snippet>findsource</snippet></ROW><ROW><id>640682</id><snippet>co_firstlineno</snippet></ROW><ROW><id>640776</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>640776</id><snippet>&lt;pre&gt;
This text     will

be formatted correctly
&lt;/pre&gt;
</snippet></ROW><ROW><id>641187</id><snippet>def get_jobrecord_cost(self):
    return sum((activity.get_cost() or 0 for activity in activity_set.all()) or 0)
</snippet></ROW><ROW><id>641193</id><snippet>import serial

ser = serial.Serial(0)  # open first serial port with 9600,8,N,1
print ser.portstr       # check which port was really used
ser.write('hello')
ser.close()
</snippet></ROW><ROW><id>641485</id><snippet>dispatch = {
  'check': do_check,
  'search': do_search,
}
cmd, _, arg = input.partition(' ')
if cmd in dispatch:
    dispatch[cmd](arg)
else:
    do_default(cmd, arg)
</snippet></ROW><ROW><id>641488</id><snippet>select</snippet></ROW><ROW><id>642004</id><snippet>import glob, os
for filename in glob.glob(os.path.join(yourPath, "*&amp;*")):
   os.rename(filename, filename.replace('&amp;','+'))
</snippet></ROW><ROW><id>642169</id><snippet>int()</snippet></ROW><ROW><id>642169</id><snippet>print int("1") + 1
</snippet></ROW><ROW><id>642169</id><snippet>2</snippet></ROW><ROW><id>642169</id><snippet>T2 = [map(int, x) for x in T1]
</snippet></ROW><ROW><id>642895</id><snippet>c1 = [1, 6, 7, 10, 13, 28, 32, 41, 58, 63]
c2 = [[13, 17, 18, 21, 32], [7, 11, 13, 14, 28], [1, 5, 6, 8, 15, 16]]
c3 = [[13, 32], [7, 13, 28], [1,6]]
</snippet></ROW><ROW><id>642895</id><snippet>c3 = [filter(lambda x: x in c1, sublist) for sublist in c2]
</snippet></ROW><ROW><id>643089</id><snippet>#!/usr/bin/env python

class PrintCallInfo:
    def __init__(self,f):
        self.f = f
    def __call__(self,*args,**kwargs):
        print "--&gt;",self.f.__name__,args,kwargs
        r = self.f(*args,**kwargs)
        print "&lt;--",self.f.__name__,"returned: ",r
        return r

# the condition to modify the function...
some_condition=True

def my_decorator(f):
    if (some_condition): # modify the function
        return PrintCallInfo(f)
    else: # leave it as it is
        return f

@my_decorator
def foo():
    print "foo"

@my_decorator
def bar(s):
    print "hello",s
    return s

@my_decorator
def foobar(x=1,y=2):
    print x,y
    return x + y

foo()
bar("world")
foobar(y=5)
</snippet></ROW><ROW><id>643830</id><snippet>y = ["{0:0&gt;2}".format(v) for v in x]
</snippet></ROW><ROW><id>643830</id><snippet>y = ["%02d" % v for v in x]
</snippet></ROW><ROW><id>643960</id><snippet>get(key, default)</snippet></ROW><ROW><id>643960</id><snippet>&gt;&gt;&gt; dict().get("blah", "default")
'default'
</snippet></ROW><ROW><id>644001</id><snippet>x = 1 if foo else 2
</snippet></ROW><ROW><id>644043</id><snippet>MyClass.objects.filter( aField__contains=var1, secondField__exact=var2 )
</snippet></ROW><ROW><id>644043</id><snippet>stmt= "select... afield like '%%%s%%' and secondfield = '%s'..." % ( var1, var2 )
print stmt
cursor.execute( stmt )
</snippet></ROW><ROW><id>644072</id><snippet>message = "%s was a match"%(matches[key],) if key in matches else "There was no match."
</snippet></ROW><ROW><id>644314</id><snippet>name_map = {'oldcol1': 'newcol1', 'oldcol2': 'newcol2', 'oldcol3': 'newcol3'...}

for row in rows:
    # Each row is a dict of the form: {'oldcol1': '...', 'oldcol2': '...'}
    row = dict([(name_map[name], val) for name, val in row.iteritems()])
    ...
</snippet></ROW><ROW><id>644314</id><snippet>for row in rows:
    row = {name_map[name]: val for name, val in row.items()}
</snippet></ROW><ROW><id>644407</id><snippet>item = getattr(foo, 'bar', None)
if item is None:
    ....
else:
    ....
</snippet></ROW><ROW><id>644844</id><snippet>dirFoo\
    test.py
    dirBar\
        Foo.py
        Bar.py
</snippet></ROW><ROW><id>644844</id><snippet>from dirBar import *
import unittest

if __name__ == "__main__":

    unittest.main()
</snippet></ROW><ROW><id>644844</id><snippet>$ python test.py
...........
----------------------------------------------------------------------
Ran 11 tests in 2.305s

OK
</snippet></ROW><ROW><id>645318</id><snippet>import urllib2
urllib2.urlopen("http://example.com/foo/bar").read()
</snippet></ROW><ROW><id>645318</id><snippet>import urllib.request
urllib.request.urlopen("http://example.com/foo/bar").read()
</snippet></ROW><ROW><id>645819</id><snippet>class IRSensor:
    def read(self): return {'ir_amplitude': 12}

class UltrasonicSensor:
    def read(self): return {'ultrasonic_amplitude': 63}

class SickLaserSensor:
    def read(self): return {'laser_amplitude': 55}

class CompositeSensor:
    """Wrap multiple component sensors, coalesce the results, and return
    the composite readout.
    """
    component_sensors = []

    def __init__(self, component_sensors=None):
        component_sensors = component_sensors or self.component_sensors
        self.sensors = [cls() for cls in component_sensors]

    def read(self):
        measurements = {}
        for sensor in self.sensors:
            measurements.update(sensor.read())
        return measurements

class MyCompositeSensor(CompositeSensor):
    component_sensors = [UltrasonicSensor, IRSensor]


composite_sensor = MyCompositeSensor()
measurement_map = composite_sensor.read()
assert measurement_map['ultrasonic_amplitude'] == 63
assert measurement_map['ir_amplitude'] == 12
</snippet></ROW><ROW><id>645819</id><snippet>__getattr__</snippet></ROW><ROW><id>645819</id><snippet>class MovementActuator:
    def __init__(self, x=0, y=0):
        self.x, self.y = (x, y)

    def move(self, x, y):
        print 'Moving to', x, y
        self.x, self.y = (x, y)

    def get_position(self):
        return (self.x, self.y)

class CommunicationActuator:
    def communicate(self):
        return 'Hey you out there!'

class CompositeActuator:
    component_actuators = []

    def __init__(self, component_actuators=None):
        component_actuators = component_actuators \
            or self.component_actuators
        self.actuators = [cls() for cls in component_actuators]

    def __getattr__(self, attr_name):
        """Look for value in component sensors."""
        for actuator in self.actuators:
            if hasattr(actuator, attr_name):
                return getattr(actuator, attr_name)
        raise AttributeError(attr_name)


class MyCompositeActuator(CompositeActuator):
    component_actuators = [MovementActuator, CommunicationActuator]

composite_actuator = MyCompositeActuator()
assert composite_actuator.get_position() == (0, 0)
assert composite_actuator.communicate() == 'Hey you out there!'
</snippet></ROW><ROW><id>645819</id><snippet>from sensors import *
from actuators import *

class AbstractNode:
    sensors = [] # Set of classes.
    actuators = [] # Set of classes.
    def __init__(self):
        self.composite_sensor = CompositeSensor(self.sensors)
        self.composite_actuator = CompositeActuator(self.actuators)

class MyNode(AbstractNode):
    sensors = [UltrasonicSensor, SickLaserSensor]
    actuators = [MovementActuator, CommunicationActuator]

    def think(self):
        measurement_map = self.composite_sensor.read()
        while self.composite_actuator.get_position()[1] &gt;= 0:
            self.composite_actuator.move(100, -100)

my_node = MyNode()
my_node.think()
</snippet></ROW><ROW><id>645819</id><snippet>SensorInterface</snippet></ROW><ROW><id>645819</id><snippet>isinstance(sensor, PositionSensor)</snippet></ROW><ROW><id>645819</id><snippet>def get_position(sensor):
    try:
        return sensor.geolocate()
    except AttributeError:
        return None
</snippet></ROW><ROW><id>645819</id><snippet> import inspect
 import types

 from sensors import Sensor

 def is_class(obj):
     return type(obj) in (types.ClassType, types.TypeType)

 def instrumented_init(self, *args, **kwargs):
     Sensor.__init__(self, *args, **kwargs)

 for module in plugin_modules: # Get this from somewhere...
     classes = inspect.getmembers(module, predicate=is_class)
     for name, cls in classes:
         if hasattr(cls, '__init__'):
             # User specified own init, may be deriving from something else.
             continue 
         if cls.__bases__ != tuple([Sensor]):
             continue # Class doesn't singly inherit from sensor.
         cls.__init__ = instrumented_init
</snippet></ROW><ROW><id>646103</id><snippet># Obviously, this should be more interesting..
import sys
print "cd", sys.argv[1]
</snippet></ROW><ROW><id>646103</id><snippet>@echo off
python xdir.py %* &gt;%TEMP%\__xdir.cmd
call %TEMP%\__xdir.cmd
</snippet></ROW><ROW><id>646103</id><snippet>doskey x=xdir.cmd $*
</snippet></ROW><ROW><id>646103</id><snippet>$ x subdir
</snippet></ROW><ROW><id>646297</id><snippet>import StringIO

output = StringIO.StringIO()
image.save(output)
contents = output.getvalue()
output.close()
</snippet></ROW><ROW><id>646297</id><snippet>KeyError</snippet></ROW><ROW><id>646297</id><snippet>image.save(output, format="GIF")
</snippet></ROW><ROW><id>646654</id><snippet>&gt;&gt;&gt; a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
&gt;&gt;&gt; a
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
&gt;&gt;&gt; a[-9:]
[4, 5, 6, 7, 8, 9, 10, 11, 12]
</snippet></ROW><ROW><id>646654</id><snippet>a[-9:]</snippet></ROW><ROW><id>647121</id><snippet>import gtk 
import webkit 

view = webkit.WebView() 

sw = gtk.ScrolledWindow() 
sw.add(view) 

win = gtk.Window(gtk.WINDOW_TOPLEVEL) 
win.add(sw) 
win.show_all() 

view.open("http://w3.org/") 
gtk.main()
</snippet></ROW><ROW><id>647244</id><snippet>In [99]: %cpaste
Pasting code; enter '--' alone on the line to stop.
:&gt;&gt;&gt; class eg(object):
:...     def __init__(self, name):
:...             self.name = name
:...     def hi(self):
:...             print "Hi %s" % (self.name)
:...
:&gt;&gt;&gt; greeter = eg("Bob")
:&gt;&gt;&gt; greeter.hi()
:--
Hi Bob
</snippet></ROW><ROW><id>647244</id><snippet>C-x r k</snippet></ROW><ROW><id>647244</id><snippet>documentation.txt</snippet></ROW><ROW><id>647244</id><snippet>$ python -c "import doctest; doctest.testfile('documentation.txt')" -v
</snippet></ROW><ROW><id>647244</id><snippet>Trying:
    class eg(object):
        def __init__(self, name):
                self.name = name
        def hi(self):
                print "Hi %s" % (self.name)
Expecting nothing
ok
Trying:
    greeter = eg("Bob")
Expecting nothing
ok
Trying:
    greeter.hi()
Expecting:
    Hi Bob
ok
1 items passed all tests:
   3 tests in doctest.txt
3 tests in 1 items.
3 passed and 0 failed.
Test passed.
</snippet></ROW><ROW><id>647244</id><snippet>if __name__=="__main__":
   import doctest; doctest.testmod()
</snippet></ROW><ROW><id>647244</id><snippet>QED</snippet></ROW><ROW><id>647312</id><snippet>sys.gettotalrefcount</snippet></ROW><ROW><id>647312</id><snippet># ...
if hasattr(sys, 'gettotalrefcount'):
   plat_specifier += '-pydebug'
</snippet></ROW><ROW><id>647312</id><snippet>*_d.exe</snippet></ROW><ROW><id>647312</id><snippet>_d.pyd</snippet></ROW><ROW><id>647667</id><snippet>(\s)</snippet></ROW><ROW><id>647667</id><snippet>(\W)</snippet></ROW><ROW><id>647667</id><snippet>l = re.compile("(\s)").split(s)
</snippet></ROW><ROW><id>647667</id><snippet>l = re.compile("\s").split(s)
</snippet></ROW><ROW><id>647712</id><snippet>x=arange(10)
y1=sin(x)
y2=10*cos(x)

rect=[0.1,0.1,0.8,0.8]
a1=axes(rect)
a1.yaxis.tick_left()
plot(x,y1)
ylabel('axis 1')
xlabel('x')

a2=axes(rect,frameon=False)
a2.yaxis.tick_right()
plot(x,y2)
a2.yaxis.set_label_position('right')
ylabel('axis 2')
a2.set_xticks([])
</snippet></ROW><ROW><id>647787</id><snippet>r"\""</snippet></ROW><ROW><id>647787</id><snippet>r"\"</snippet></ROW><ROW><id>647798</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; import sys
&gt;&gt;&gt; os.path.dirname(sys.executable)
'C:\\Python25'
</snippet></ROW><ROW><id>647811</id><snippet>except Exception, e: print repr(e)</snippet></ROW><ROW><id>647811</id><snippet>Exception</snippet></ROW><ROW><id>647811</id><snippet>dir(e)</snippet></ROW><ROW><id>647811</id><snippet>e.__class__.__name__</snippet></ROW><ROW><id>647811</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>647949</id><snippet>doStuff()
self.assert_(True)
</snippet></ROW><ROW><id>648050</id><snippet>django.core.files.base</snippet></ROW><ROW><id>648050</id><snippet>ContentFile</snippet></ROW><ROW><id>648050</id><snippet>File</snippet></ROW><ROW><id>648050</id><snippet>from django.core.files.base import ContentFile
def save_item(request, uname, data):
    item = Item()
    myFile = ContentFile(base64.b64decode(data))
    item.preview.save('fakename.jpg', myFile, save=False)
</snippet></ROW><ROW><id>648287</id><snippet>[f.group(0) for f in current_f]
</snippet></ROW><ROW><id>648645</id><snippet>function s:buffers_list()
    let result = []

    for buffer_number in range(1, bufnr('$'))
        if !buflisted(buffer_number)
            continue
        endif

        call add(result, buffer_number)
    endfor

    return result
endfunction
</snippet></ROW><ROW><id>648689</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getargspec(func)
(['a', 'b', 'c'], None, None, None)
</snippet></ROW><ROW><id>648886</id><snippet>for</snippet></ROW><ROW><id>649358</id><snippet>my_var</snippet></ROW><ROW><id>649358</id><snippet>class MyClass:
    my_var = []

    @my_decorator(my_var, 'sometext')
    def my_func()
        # do some super cool thing
</snippet></ROW><ROW><id>649358</id><snippet>my_var</snippet></ROW><ROW><id>649556</id><snippet>self.nb.AddPage(pnl, nm, select=True)
</snippet></ROW><ROW><id>649556</id><snippet>self.nb.SetSelection(self.nb.GetPageCount()-1)
</snippet></ROW><ROW><id>649556</id><snippet>def new_panel(self, nm):
        pnl = wx.Panel(self)
        pnl.identifierTag = nm
        self.nb.AddPage(pnl, nm, select=True) 
        self.sizer = wx.BoxSizer()
        self.sizer.Add(self.nb, 1, wx.EXPAND)
        self.SetSizer(self.sizer)
        #self.nb.SetSelection(self.nb.GetPageCount()-1)
        pnl.SetFocus() # Have focused the last panel.
        print self.nb.GetSelection()
</snippet></ROW><ROW><id>650350</id><snippet>index()</snippet></ROW><ROW><id>650350</id><snippet>def getIndexOrMinusOne(a, x):
  try:
    return a.index(x)
  except ValueError:
    return -1
</snippet></ROW><ROW><id>650692</id><snippet>Iterator2 = xrange(2,5)
</snippet></ROW><ROW><id>650692</id><snippet>def Iterator3():
    i = 1
    while i &lt; 5:
        i += 1
        yield i
</snippet></ROW><ROW><id>650692</id><snippet>import itertools
Iterator4 = itertools.takewhile( 
                        lambda y : y &lt; 5, 
                        itertools.count(2) )
</snippet></ROW><ROW><id>650692</id><snippet>Iterator5 = ( x for x in [2, 3, 4] )
</snippet></ROW><ROW><id>650956</id><snippet>\g&lt;1&gt;0
</snippet></ROW><ROW><id>650994</id><snippet>for ln in f:
    # work on line in ln
</snippet></ROW><ROW><id>650994</id><snippet>stdout</snippet></ROW><ROW><id>650994</id><snippet>from subprocess import Popen, PIPE
pp = Popen('dir', shell=True, stdout=PIPE)

for ln in pp.stdout:
    print '#',ln
</snippet></ROW><ROW><id>651086</id><snippet>reactor.connectSSL</snippet></ROW><ROW><id>651086</id><snippet>reactor.connectTCP</snippet></ROW><ROW><id>651089</id><snippet>import pygame
import math
import random
pygame.init()

screen=pygame.display.set_mode((300,300))
screen.fill((255,255,255))

pos1=random.randrange(300), random.randrange(300)
pos2=random.randrange(300), random.randrange(300)

pygame.draw.line(screen, (0,0,0), pos1, pos2)

arrow=pygame.Surface((50,50))
arrow.fill((255,255,255))
pygame.draw.line(arrow, (0,0,0), (0,0), (25,25))
pygame.draw.line(arrow, (0,0,0), (0,50), (25,25))
arrow.set_colorkey((255,255,255))

angle=math.atan2(-(pos1[1]-pos2[1]), pos1[0]-pos2[0])
##Note that in pygame y=0 represents the top of the screen
##So it is necessary to invert the y coordinate when using math
angle=math.degrees(angle)

def drawAng(angle, pos):
    nar=pygame.transform.rotate(arrow,angle)
    nrect=nar.get_rect(center=pos)
    screen.blit(nar, nrect)

drawAng(angle, pos1)
angle+=180
drawAng(angle, pos2)
pygame.display.flip()
</snippet></ROW><ROW><id>651457</id><snippet>def bimodal( low1, high1, mode1, low2, high2, mode2 ):
    toss = random.choice( (1, 2) )
    if toss == 1:
        return random.triangular( low1, high1, mode1 ) 
    else:
        return random.triangular( low2, high2, mode2 )
</snippet></ROW><ROW><id>651879</id><snippet>class AutoVivification(dict):
    """Implementation of perl's autovivification feature."""
    def __getitem__(self, item):
        try:
            return dict.__getitem__(self, item)
        except KeyError:
            value = self[item] = type(self)()
            return value
</snippet></ROW><ROW><id>651879</id><snippet>a = AutoVivification()

a[1][2][3] = 4
a[1][3][3] = 5
a[1][2]['test'] = 6

print a
</snippet></ROW><ROW><id>651879</id><snippet>{1: {2: {'test': 6, 3: 4}, 3: {3: 5}}}
</snippet></ROW><ROW><id>652026</id><snippet>File</snippet></ROW><ROW><id>652026</id><snippet>def create_with_pk(self):
    instance = self.create()
    instance.save()     # probably this line is unneeded
    return instance
</snippet></ROW><ROW><id>652026</id><snippet>create_with_pk</snippet></ROW><ROW><id>652026</id><snippet>self</snippet></ROW><ROW><id>652200</id><snippet>&gt;&gt;&gt; a = ['1', '2', '3', '4']
&gt;&gt;&gt; a
['1', '2', '3', '4']
&gt;&gt;&gt; i = a.index('2') + 1  # after the item '2'
&gt;&gt;&gt; a[i:i] = ['2.4', '2.6']
&gt;&gt;&gt; a
['1', '2', '2.4', '2.6', '3', '4']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>652284</id><snippet>class AutoVivification(dict):
    """Implementation of perl's autovivification feature."""
    def __getitem__(self, item):
        try:
            return dict.__getitem__(self, item)
        except KeyError:
            value = self[item] = type(self)()
            return value
</snippet></ROW><ROW><id>652284</id><snippet>a = AutoVivification()

a[1][2][3] = 4
a[1][3][3] = 5
a[1][2]['test'] = 6

print a
</snippet></ROW><ROW><id>652284</id><snippet>{1: {2: {'test': 6, 3: 4}, 3: {3: 5}}}
</snippet></ROW><ROW><id>652347</id><snippet>list.sort(key=lambda item:item['date'], reverse=True)
</snippet></ROW><ROW><id>652417</id><snippet>&gt;&gt;&gt; class MicroMock(object):
&gt;&gt;&gt;     def __init__(self, **kwargs):
&gt;&gt;&gt;         self.__dict__.update(kwargs)
&gt;&gt;&gt;
&gt;&gt;&gt; def print_foo(x):
&gt;&gt;&gt;     print x.foo
&gt;&gt;&gt;
&gt;&gt;&gt; print_foo(MicroMock(foo=3))
3
</snippet></ROW><ROW><id>652445</id><snippet>animals = {'dog':set(['bite']),
           'cat':set(['bite', 'scratch'])}
</snippet></ROW><ROW><id>652445</id><snippet>animals.setdefault('dog', set()).add('bite')
</snippet></ROW><ROW><id>652458</id><snippet>import models
</snippet></ROW><ROW><id>652565</id><snippet>myfile.write(c_uncompData_p[:c_uncompSize])
</snippet></ROW><ROW><id>653312</id><snippet>re.split('[\s|!\?\.;:"]', text)
</snippet></ROW><ROW><id>653312</id><snippet>import re
def getwords(text, splitchars=' \t|!?.;:"'):
  words_iter = re.finditer(
    "([%s]+)" % "".join([("^" + c) for c in splitchars]),
    text)
  for word in words_iter:
    yield word.group()

# a quick test
s = "a:b cc? def...a||"
words = [x for x in getwords(s)]
assert ["a", "b", "cc", "def", "a"] == words, words
</snippet></ROW><ROW><id>653517</id><snippet>return</snippet></ROW><ROW><id>653767</id><snippet>form = JobRecordForm( {'supervisor':request.user} )
</snippet></ROW><ROW><id>653829</id><snippet>&gt;&gt;&gt; indices = [index for index, i in enumerate(m) if i == 4]
&gt;&gt;&gt; h = [d[i][0] for i in indices]
</snippet></ROW><ROW><id>654633</id><snippet>print "frozen_f=", dict( (i,f(i)) for i in range(100) )
</snippet></ROW><ROW><id>654689</id><snippet>results = dict.fromkeys(inputs, [])
</snippet></ROW><ROW><id>654689</id><snippet>runs = 10
inputs = (1, 2, 3, 5, 8, 13, 21, 34, 55)
results = {}

for run in range(runs):
    for i in inputs:
        results.setdefault(i,[]).append(benchmark(i))
</snippet></ROW><ROW><id>654689</id><snippet>runs = 10
inputs = (1, 2, 3, 5, 8, 13, 21, 34, 55)
results = dict([(i,[]) for i in inputs])

for run in range(runs):
    for i in inputs:
        results[i].append(benchmark(i))
</snippet></ROW><ROW><id>655239</id><snippet>mainMsg.Body = RTFTEMPLATE % (subject,body)
</snippet></ROW><ROW><id>655239</id><snippet>mainMsg.HTMLBody = RTFTEMPLATE % (subject,body)
</snippet></ROW><ROW><id>655544</id><snippet>def __init__(self, *args, **kwargs):
    super(MyForm, self).__init__(*args, **kwargs)

    instance = kwargs.get('instance')
    if instance:
        self.fields['pay_tourns'].initial = [ o.id for o in instance.tournaments.all().active().pay_tourns()]
        self.fields['rep_tourns'].initial = [ o.id for o in instance.tournaments.all().active().rep_tourns()]
</snippet></ROW><ROW><id>656289</id><snippet>s = mode;
while (*s) {
    switch (*s++) {
    case 'r':
        if (rwa) {
        bad_mode:
            PyErr_SetString(PyExc_ValueError,
                    "Must have exactly one of read/write/append mode");
            goto error;
        }
        rwa = 1;
        self-&gt;readable = 1;
        break;
    case 'w':
        if (rwa)
            goto bad_mode;
        rwa = 1;
        self-&gt;writable = 1;
        flags |= O_CREAT | O_TRUNC;
        break;
    case 'a':
        if (rwa)
            goto bad_mode;
        rwa = 1;
        self-&gt;writable = 1;
        flags |= O_CREAT;
        append = 1;
        break;
    case 'b':
        break;
    case '+':
        if (plus)
            goto bad_mode;
        self-&gt;readable = self-&gt;writable = 1;
        plus = 1;
        break;
    default:
        PyErr_Format(PyExc_ValueError,
                 "invalid mode: %.200s", mode);
        goto error;
    }
}

if (!rwa)
    goto bad_mode;
</snippet></ROW><ROW><id>656289</id><snippet>"rwab+"</snippet></ROW><ROW><id>656289</id><snippet>"rwa"</snippet></ROW><ROW><id>656289</id><snippet>'+'</snippet></ROW><ROW><id>656289</id><snippet>'b'</snippet></ROW><ROW><id>656394</id><snippet>datetime.combine(date.today(), time()) + timedelta(hours=1)
</snippet></ROW><ROW><id>656394</id><snippet>from datetime import date, datetime, time, timedelta

dt = datetime.combine(date.today(), time(23, 55)) + timedelta(minutes=30)
print dt.time()
</snippet></ROW><ROW><id>656394</id><snippet>00:25:00
</snippet></ROW><ROW><id>657199</id><snippet>import sys

sys.stdout.write ('some stuff')
</snippet></ROW><ROW><id>657883</id><snippet>__all__</snippet></ROW><ROW><id>657883</id><snippet>from x import *</snippet></ROW><ROW><id>657883</id><snippet>__all__</snippet></ROW><ROW><id>658495</id><snippet>void App::exec() {
    for(;;) {
        vector&lt;Waitable&gt; waitables;
        waitables.push_back(m_networkSocket);
        waitables.push_back(m_xConnection);
        waitables.push_back(m_globalTimer);
        Waitable* whatHappened = System::waitOnAll(waitables);
        switch(whatHappened) {
            case &amp;m_networkSocket: readAndDispatchNetworkEvent(); break;
            case &amp;m_xConnection: readAndDispatchGuiEvent(); break;
            case &amp;m_globalTimer: readAndDispatchTimerEvent(); break;
        }
    }
}
</snippet></ROW><ROW><id>658495</id><snippet>vector&lt;Waitable&gt;</snippet></ROW><ROW><id>658495</id><snippet>::fd_set</snippet></ROW><ROW><id>658495</id><snippet>FD_ISSET</snippet></ROW><ROW><id>658495</id><snippet>m_xConnection</snippet></ROW><ROW><id>658591</id><snippet>def foo():
    pass
</snippet></ROW><ROW><id>658591</id><snippet>&gt;&gt;&gt; from test import foo
&gt;&gt;&gt; foo.func_globals['__file__']
'test.py'
</snippet></ROW><ROW><id>658591</id><snippet>__</snippet></ROW><ROW><id>658591</id><snippet>__</snippet></ROW><ROW><id>658777</id><snippet>'%f' % (x/y)
</snippet></ROW><ROW><id>658777</id><snippet>'%f' % (1/10**8)
</snippet></ROW><ROW><id>659016</id><snippet>$ pygmentize -O full -O style=native -o test.html test.py
</snippet></ROW><ROW><id>659016</id><snippet>$ easy_install Pygments
</snippet></ROW><ROW><id>659016</id><snippet>from pygments import highlight
from pygments.lexers import guess_lexer
from pygments.formatters import HtmlFormatter

code = '#!/usr/bin/python\nprint "Hello World!"'
lexer = guess_lexer(code) # or just pygments.lexers.PythonLexer()
formatter = HtmlFormatter(noclasses=True, nowrap=True, lineseparator="&lt;br&gt;\n")
print highlight(code, lexer, formatter)
</snippet></ROW><ROW><id>659016</id><snippet>&lt;span style="color: #408080; font-style: italic"&gt;#!/usr/bin/python&lt;/span&gt;&lt;br&gt;
&lt;span style="color: #008000; font-weight: bold"&gt;print&lt;/span&gt; 
&lt;span style="color: #BA2121"&gt;"Hello World!"&lt;/span&gt;&lt;br&gt;
</snippet></ROW><ROW><id>659335</id><snippet>(okay,value) = get_some_input(blah);
if (okay): print value
</snippet></ROW><ROW><id>659439</id><snippet>weightss</snippet></ROW><ROW><id>659439</id><snippet>weights = [44, 66, 88]
weight_groups = [[44, 66, 88], ...]
</snippet></ROW><ROW><id>660190</id><snippet>import os
directory = "C:/"
extension = ".tga"
list_of_files = [file for file in os.listdir(directory) if file.lower().endswith(extension)]
</snippet></ROW><ROW><id>660223</id><snippet>win32file.GetFileAttributes(i)
</snippet></ROW><ROW><id>660223</id><snippet>fattrs &amp; win32con.FILE_ATTRIBUTE_ARCHIVE
</snippet></ROW><ROW><id>660223</id><snippet>fattrs = win32file.GetFileAttributes(os.path.join(root, i))
</snippet></ROW><ROW><id>660223</id><snippet>os.path.splitext(path)</snippet></ROW><ROW><id>660751</id><snippet>def decorator(f):
  def decorated(*args,**kwargs):
      cache = Cache(cachepath)
      if cache.iscached(*args,**kwargs):
    	  ...
      else:
    	  res = f(*args,**kwargs)
    	  cache.store((*args,**kwargs), res)
    	  return res
  return decorated
</snippet></ROW><ROW><id>660751</id><snippet>def cache(filepath)
    def decorator(f):
      def decorated(*args,**kwargs):
    	  cache = Cache(cachepath)
    	  if cache.iscached(*args,**kwargs):
    		  ...
    	  else:
    		  res = f(*args,**kwargs)
    		  cache.store((*args,**kwargs), res)
    		  return res
      return decorated
    return decorator
</snippet></ROW><ROW><id>660779</id><snippet>query = self.project.jobrecord_set.filter(
        date__lte=date,
        date__gte=self.start_date)
values= ( jobrecord.get_cost() or 0 for jobrecord in query or 0 )
return sum( values )
</snippet></ROW><ROW><id>660779</id><snippet>values= ( jobrecord.get_cost() or 0 for jobrecord in query or 0 )</snippet></ROW><ROW><id>660779</id><snippet>jobrecord.get_cost() or 0 for jobrecord in 0</snippet></ROW><ROW><id>660974</id><snippet> def myfunc(arg1, arg2):
     print 'In thread'
     print 'args are', arg1, arg2

 thread = Thread(target=myfunc, args=(destination_name, destination_config))
 thread.start()
</snippet></ROW><ROW><id>661044</id><snippet>pdb.runcall( object.method )
</snippet></ROW><ROW><id>661300</id><snippet>errno</snippet></ROW><ROW><id>661300</id><snippet>python setup.py install</snippet></ROW><ROW><id>661300</id><snippet>easy_install</snippet></ROW><ROW><id>661300</id><snippet>if not hasattr(ctypes, 'get_errno'):
    # Python 2.5 or older
    if sys.platform == 'win32':
        standard_c_lib._errno.restype = ctypes.POINTER(ctypes.c_int)
        def _where_is_errno():
            return standard_c_lib._errno()

    elif sys.platform in ('linux2', 'freebsd6'):
        standard_c_lib.__errno_location.restype = ctypes.POINTER(ctypes.c_int)
        def _where_is_errno():
            return standard_c_lib.__errno_location()

    elif sys.platform in ('darwin', 'freebsd7'):
        standard_c_lib.__error.restype = ctypes.POINTER(ctypes.c_int)
        def _where_is_errno():
            return standard_c_lib.__error()
    ctypes.get_errno = lambda: _where_is_errno().contents.value
</snippet></ROW><ROW><id>661300</id><snippet>standard_c_lib</snippet></ROW><ROW><id>661300</id><snippet>def get_libc_name():
    if sys.platform == 'win32':
        # Parses sys.version and deduces the version of the compiler
        import distutils.msvccompiler
        version = distutils.msvccompiler.get_build_version()
        if version is None:
            # This logic works with official builds of Python.
            if sys.version_info &lt; (2, 4):
                clibname = 'msvcrt'
            else:
                clibname = 'msvcr71'
        else:
            if version &lt;= 6:
                clibname = 'msvcrt'
            else:
                clibname = 'msvcr%d' % (version * 10)

        # If python was built with in debug mode
        import imp
        if imp.get_suffixes()[0][0] == '_d.pyd':
            clibname += 'd'

        return clibname+'.dll'
    else:
        return ctypes.util.find_library('c')

# Make sure the name is determined during import, not at runtime
libc_name = get_libc_name() 
standard_c_lib = ctypes.cdll.LoadLibrary(get_libc_name())
</snippet></ROW><ROW><id>662694</id><snippet>im.transform(size, QUAD, data) =&gt; image
im.transform(size, QUAD, data, filter) =&gt; image
</snippet></ROW><ROW><id>663128</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; h= HTMLParser.HTMLParser()
&gt;&gt;&gt; h.unescape('alpha &lt; &amp;beta;')
u'alpha &lt; \u03b2'
</snippet></ROW><ROW><id>663175</id><snippet>&gt;&gt;&gt; x = "Hello World!"
&gt;&gt;&gt; x[2:]
'llo World!'
&gt;&gt;&gt; x[:2]
'He'
&gt;&gt;&gt; x[:-2]
'Hello Worl'
&gt;&gt;&gt; x[-2:]
'd!'
&gt;&gt;&gt; x[2:-2]
'llo Worl'
</snippet></ROW><ROW><id>663424</id><snippet>[{&lt;Type1&gt;: 16,
  &lt;Type2&gt;: 10,
  &lt;Type3&gt;: 12,
  &lt;Type4&gt;: 7,
  &lt;Type5&gt;: 0,
  'assemblage': &lt;Assemblage1&gt;},
 {&lt;Type1&gt;: 85,
  &lt;Type2&gt;: 18,
  &lt;Type3&gt;: 21,
  &lt;Type4&gt;: 12,
  &lt;Type5&gt;: 2,
  'assemblage': &lt;Assemblage2&gt;},
 ...]
</snippet></ROW><ROW><id>663424</id><snippet>from collections import defaultdict
titles = []
cells = defaultdict(list)
for x,col in enumerate(table):
    titles.append( col['assemblage'] )
    for rk in col:
        if rk == 'assemblage': continue # skip the title
        cells[rk][x]= col[rk]
</snippet></ROW><ROW><id>663424</id><snippet>final= []
for name in sorted( cells.keys() ):
    final.append( cells[name] )
</snippet></ROW><ROW><id>663424</id><snippet>titles</snippet></ROW><ROW><id>663424</id><snippet>final</snippet></ROW><ROW><id>663424</id><snippet>&lt;table&gt;
  &lt;tr&gt;
    {% for t in titles %}&lt;th&gt;{{t}}&lt;/th&gt;{% endfor %}
  &lt;/tr&gt;
  {% for row in final %}
  &lt;tr&gt;
      {% for cell in row %}&lt;td&gt;{{cell}}&lt;/td&gt;{% endfor %}
  &lt;/tr&gt;
  {% endfor %}
&lt;/table&gt;
</snippet></ROW><ROW><id>664143</id><snippet>&gt;&gt;&gt; def f():
...     return {'a' : 1, 'b' : 2}
... 
&gt;&gt;&gt; def g():
...     return dict(a=1, b=2)
... 
&gt;&gt;&gt; g()
{'a': 1, 'b': 2}
&gt;&gt;&gt; f()
{'a': 1, 'b': 2}
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(f)
  2           0 BUILD_MAP                0
              3 DUP_TOP             
              4 LOAD_CONST               1 ('a')
              7 LOAD_CONST               2 (1)
             10 ROT_THREE           
             11 STORE_SUBSCR        
             12 DUP_TOP             
             13 LOAD_CONST               3 ('b')
             16 LOAD_CONST               4 (2)
             19 ROT_THREE           
             20 STORE_SUBSCR        
             21 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(g)
  2           0 LOAD_GLOBAL              0 (dict)
              3 LOAD_CONST               1 ('a')
              6 LOAD_CONST               2 (1)
              9 LOAD_CONST               3 ('b')
             12 LOAD_CONST               4 (2)
             15 CALL_FUNCTION          512
             18 RETURN_VALUE
</snippet></ROW><ROW><id>664222</id><snippet>NameError</snippet></ROW><ROW><id>664222</id><snippet>&gt;&gt;&gt; val
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'val' is not defined
</snippet></ROW><ROW><id>664222</id><snippet>'val' in dir()</snippet></ROW><ROW><id>664222</id><snippet>try:
    val
except NameError:
    print("val not set")
</snippet></ROW><ROW><id>664222</id><snippet>if 'val' in dir():
    print('val set')
else:
    print('val not set')
</snippet></ROW><ROW><id>664297</id><snippet>var = None
</snippet></ROW><ROW><id>664297</id><snippet>None</snippet></ROW><ROW><id>664499</id><snippet>tagdata[start:end].decode('iso-8859-1')
</snippet></ROW><ROW><id>664614</id><snippet>#!/usr/bin/env python
from optparse import OptionParser, Option, IndentedHelpFormatter

class PosOptionParser(OptionParser):
    def format_help(self, formatter=None):
        class Positional(object):
            def __init__(self, args):
                self.option_groups = []
                self.option_list = args

        positional = Positional(self.positional)
        formatter = IndentedHelpFormatter()
        formatter.store_option_strings(positional)
        output = ['\n', formatter.format_heading("Positional Arguments")]
        formatter.indent()
        pos_help = [formatter.format_option(opt) for opt in self.positional]
        pos_help = [line.replace('--','') for line in pos_help]
        output += pos_help
        return OptionParser.format_help(self, formatter) + ''.join(output)

    def add_positional_argument(self, option):
        try:
            args = self.positional
        except AttributeError:
            args = []
        args.append(option)
        self.positional = args

    def set_out(self, out):
        self.out = out
def main():
    usage = "usage: %prog [options] bar baz"
    parser = PosOptionParser(usage)
    parser.add_option('-f', '--foo', dest='foo',
                      help='Enable foo')
    parser.add_positional_argument(Option('--bar', action='store_true',
                                   help='The bar positional argument'))
    parser.add_positional_argument(Option('--baz', action='store_true',
                                   help='The baz positional argument'))
    (options, args) = parser.parse_args()
    if len(args) != 2:
        parser.error("incorrect number of arguments")
    pass

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>664614</id><snippet>Usage: test.py [options] bar baz

  Options:
    -h, --help         show this help message and exit
    -f FOO, --foo=FOO  Enable foo

Positional Arguments:
  bar  The bar positional argument
  baz  The baz positional argument
</snippet></ROW><ROW><id>665153</id><snippet>pk = None
try: pk = User.objects.filter(username=username)[0].pk
except: pass
</snippet></ROW><ROW><id>665153</id><snippet>try:
    user = User.objects.get(username=username)
except User.DoesNotExist:
    user = None
</snippet></ROW><ROW><id>665153</id><snippet>{{ user.id }}</snippet></ROW><ROW><id>665153</id><snippet>{{ pk }}</snippet></ROW><ROW><id>665153</id><snippet>authenticate()</snippet></ROW><ROW><id>665153</id><snippet>User.DoesNotExist</snippet></ROW><ROW><id>665153</id><snippet>try</snippet></ROW><ROW><id>665153</id><snippet>try:
    ... a line of code that can generate exceptions to be handled ...
except SomeException:
    ... handle this particular exception ...
else:
    ... the rest of the code to execute if there were no exceptions ...
</snippet></ROW><ROW><id>665236</id><snippet>NOW()</snippet></ROW><ROW><id>665236</id><snippet>statement_timestamp()</snippet></ROW><ROW><id>665236</id><snippet>CURRENT_DATE</snippet></ROW><ROW><id>665236</id><snippet>CURRENT_TIME</snippet></ROW><ROW><id>665236</id><snippet>CURRENT_TIMESTAMP</snippet></ROW><ROW><id>665236</id><snippet>CURRENT_TIME(precision)</snippet></ROW><ROW><id>665236</id><snippet>CURRENT_TIMESTAMP(precision)</snippet></ROW><ROW><id>665236</id><snippet>LOCALTIME</snippet></ROW><ROW><id>665236</id><snippet>LOCALTIMESTAMP</snippet></ROW><ROW><id>665236</id><snippet>LOCALTIME(precision)</snippet></ROW><ROW><id>665236</id><snippet>LOCALTIMESTAMP(precision)</snippet></ROW><ROW><id>665236</id><snippet>CURRENT_TIME</snippet></ROW><ROW><id>665236</id><snippet>CURRENT_TIMESTAMP</snippet></ROW><ROW><id>665236</id><snippet>LOCALTIME</snippet></ROW><ROW><id>665236</id><snippet>LOCALTIMESTAMP</snippet></ROW><ROW><id>665236</id><snippet>CURRENT_TIME</snippet></ROW><ROW><id>665236</id><snippet>CURRENT_TIMESTAMP</snippet></ROW><ROW><id>665236</id><snippet>LOCALTIME</snippet></ROW><ROW><id>665236</id><snippet>LOCALTIMESTAMP</snippet></ROW><ROW><id>665236</id><snippet>now()</snippet></ROW><ROW><id>665236</id><snippet>transaction_timestamp()</snippet></ROW><ROW><id>665236</id><snippet>statement_timestamp()</snippet></ROW><ROW><id>665236</id><snippet>clock_timestamp()</snippet></ROW><ROW><id>665236</id><snippet>timeofday()</snippet></ROW><ROW><id>665236</id><snippet>now()</snippet></ROW><ROW><id>665236</id><snippet>CURRENT_TIMESTAMP</snippet></ROW><ROW><id>665236</id><snippet>transaction_timestamp()</snippet></ROW><ROW><id>665236</id><snippet>CURRENT_TIMESTAMP</snippet></ROW><ROW><id>665236</id><snippet>statement_timestamp()</snippet></ROW><ROW><id>665236</id><snippet>statement_timestamp()</snippet></ROW><ROW><id>665236</id><snippet>transaction_timestamp()</snippet></ROW><ROW><id>665236</id><snippet>clock_timestamp()</snippet></ROW><ROW><id>665236</id><snippet>timeofday()</snippet></ROW><ROW><id>665236</id><snippet>clock_timestamp()</snippet></ROW><ROW><id>665283</id><snippet>&gt;&gt;&gt; marshal.dumps(defaultdict(list))
'{0'
&gt;&gt;&gt; marshal.dumps(dict())
'{0'
</snippet></ROW><ROW><id>665548</id><snippet>class Node( object ):
    def __init__( self, myData, children=None )
        self.myData= myData
        self.children= children if children is not None else []
    def visit( self, aVisitor ):
        aVisitor.at( self )
        aVisitor.down()
        for c in self.children:
            aVisitor.at( c )
        aVisitor.up()

class Visitor( object ):
    def __init__( self ):
        self.depth= 0
    def down( self ):
        self.depth += 1
    def up( self ):
        self.depth -= 1
</snippet></ROW><ROW><id>665548</id><snippet>os</snippet></ROW><ROW><id>665598</id><snippet>from tkinter import *
import subprocess as sub
p = sub.Popen('./script',stdout=sub.PIPE,stderr=sub.PIPE)
output, errors = p.communicate()

root = Tk()
text = Text(root)
text.pack()
text.insert(END, output)
root.mainloop()
</snippet></ROW><ROW><id>665662</id><snippet>first = [x for (x,y) in data]
second = [y for (x,y) in data]
</snippet></ROW><ROW><id>666075</id><snippet>request = urllib2.Request('http://www.example.com', postBackData, { 'User-Agent' : 'My User Agent' })

try: 
    response = urllib2.urlopen(request)
except urllib2.HTTPError, e:
    checksLogger.error('HTTPError = ' + str(e.code))
except urllib2.URLError, e:
    checksLogger.error('URLError = ' + str(e.reason))
except httplib.HTTPException, e:
    checksLogger.error('HTTPException')
except Exception:
    import traceback
    checksLogger.error('generic exception: ' + traceback.format_exc())
</snippet></ROW><ROW><id>666230</id><snippet>class NullDecl (object):
   def __init__ (self, func):
      self.func = func
      for name in set(dir(func)) - set(dir(self)):
        setattr(self, name, getattr(func, name))

   def __call__ (self, *args):
      return self.func (*args)
</snippet></ROW><ROW><id>666230</id><snippet>@NullDecl
def myFunc (x,y,z):
   return (x+y)/z
</snippet></ROW><ROW><id>666764</id><snippet>from xml.dom.minidom import parse, parseString
tree = parseString("&lt;div id='asd'&gt;&lt;pre&gt;skdsk&lt;/pre&gt;&lt;/div&gt;")
root = tree.firstChild
node = root.childNodes[0]
print node.toxml()
</snippet></ROW><ROW><id>666789</id><snippet>&gt;&gt;&gt; 'w\xc3\xb6rner'.decode('utf-8')
u'w\xf6rner'
</snippet></ROW><ROW><id>666789</id><snippet>&gt;&gt;&gt; file.write('Name: %s - %s\n' %(Name, type(Name)))
UnicodeEncodeError: 'ascii' codec can't encode character u'\xf6' in position 7: ordinal not in range(128)
</snippet></ROW><ROW><id>666789</id><snippet>name= 'w\xc3\xb6rner'.decode('utf-8')
file.write('Name: %r\n' % name)

Name: u'w\xf6rner'
</snippet></ROW><ROW><id>667195</id><snippet>class MakeSlots(type):

    def __new__(cls, name, bases, attrs):
        attrs['__slots__'] = attrs.keys()

        return super(MakeSlots, cls).__new__(cls, name, bases, attrs)

class A(object):
    one = 1
    two = 2

    __metaclass__ = MakeSlots
</snippet></ROW><ROW><id>667488</id><snippet>&lt;foo&gt; bar &lt;/foo&gt;</snippet></ROW><ROW><id>667488</id><snippet>&lt;foo&gt;bar&lt;/foo&gt;</snippet></ROW><ROW><id>667488</id><snippet>import BeautifulSoup

s = """
&lt;node1&gt;
    &lt;node2&gt;
        &lt;node3&gt;foo&lt;/node3&gt;
    &lt;/node2&gt;
    &lt;node3&gt;
      &lt;!-- I'm a comment! Leave me be! --&gt;
    &lt;/node3&gt;
    &lt;node4&gt;
    &lt;![CDATA[
      I'm CDATA!  Changing me would be bad!
    ]]&gt;
    &lt;/node4&gt;
&lt;/node1&gt;
"""

soup = BeautifulSoup.BeautifulStoneSoup(s)

for t in soup.findAll(text=True):
   if type(t) is BeautifulSoup.NavigableString: # Ignores comments and CDATA
      t.replaceWith(t.strip())

print soup
</snippet></ROW><ROW><id>668327</id><snippet>rate = 5.0; // unit: messages
per  = 8.0; // unit: seconds
allowance = rate; // unit: messages
last_check = now(); // floating-point, e.g. usec accuracy. Unit: seconds

when (message_received):
  current = now();
  time_passed = current - last_check;
  last_check = current;
  allowance += time_passed * (rate / per);
  if (allowance &gt; rate):
    allowance = rate; // throttle
  if (allowance &lt; 1.0):
    discard_message();
  else:
    forward_message();
    allowance -= 1.0;
</snippet></ROW><ROW><id>668867</id><snippet>&lt;img name="myImageXYZ00618" id="myImageXYZ00618" src='http://www2.lib.myschool.edu:7017/INS01/icon_eng/v-add_favorite.png' alt='Add to My Sets' title='Add to My Sets' border="0"title="Add to clipboard PAIS International (CSA)" alt="Add to clipboard PAIS International (CSA)"&gt;
</snippet></ROW><ROW><id>668867</id><snippet>border="0"</snippet></ROW><ROW><id>668872</id><snippet>curl -d "Email=youremail" -d "Passwd=yourpassword" -d "service=blogger" "https://www.google.com/accounts/ClientLogin"
</snippet></ROW><ROW><id>668974</id><snippet>c:\python30</snippet></ROW><ROW><id>668974</id><snippet>c:\Python24\libs\python30</snippet></ROW><ROW><id>668974</id><snippet>Py_InitModule</snippet></ROW><ROW><id>668974</id><snippet>PyModule_Create</snippet></ROW><ROW><id>669033</id><snippet>[widget][widget][widget][widget]
</snippet></ROW><ROW><id>669033</id><snippet>[widget]
[widget]
[widget]
[widget]
</snippet></ROW><ROW><id>669033</id><snippet>import gtk
box = gtk.HBox()
b1 = gtk.Button('button1')
b2 = gtk.Button('button2')
box.pack_start(b1)
box.pack_start(b2)
</snippet></ROW><ROW><id>669033</id><snippet>expand=True</snippet></ROW><ROW><id>669033</id><snippet>[[    widget    ][    widget    ]]
</snippet></ROW><ROW><id>669033</id><snippet>box.pack_start(b1, expand=False)
</snippet></ROW><ROW><id>669033</id><snippet>[[widget][        widget        ]]
</snippet></ROW><ROW><id>669033</id><snippet>pack_start</snippet></ROW><ROW><id>669033</id><snippet>expand=False</snippet></ROW><ROW><id>669033</id><snippet>fill</snippet></ROW><ROW><id>669033</id><snippet>set_size_request</snippet></ROW><ROW><id>669033</id><snippet>set_size_request</snippet></ROW><ROW><id>669426</id><snippet>menuitem = gtk.MenuItem('This is the label')
</snippet></ROW><ROW><id>669426</id><snippet>label = menuitem.child
</snippet></ROW><ROW><id>669426</id><snippet>label.set_text('This is the new label')
</snippet></ROW><ROW><id>669704</id><snippet>   class Page(db.Model): 
      title = db.StringProperty(required=True) 
      // string property now
      uri = db.StringProperty(required=True) 
      created = db.DateTimeProperty(auto_now_add=True) 
      modified = db.DateTimeProperty(auto_now=True) 
      content = db.TextProperty()
</snippet></ROW><ROW><id>669941</id><snippet>class MyObject( object ):
    def __init__( self, args ):
        pass # Something Expensive

class MyObjectFactory( object ):
    def __init__( self ):
        self.pool = {}
    def makeMyObject( self, args ):
        if args not in self.pool:
            self.pool[args] = MyObject( args )
        return self.pool[args]
</snippet></ROW><ROW><id>670283</id><snippet>find</snippet></ROW><ROW><id>670283</id><snippet>find /some/path -perm 0777
</snippet></ROW><ROW><id>670341</id><snippet>{   scopeName = 'source.whitespace';
    patterns = (
        {  name = 'source.invalid.trailing-whitespace';
            match = '(\s+)$';
            captures = { 1 = { name = 'invalid.trailing-whitespace'; }; };
         },
    );
}
</snippet></ROW><ROW><id>670341</id><snippet>{  name = 'comment.line.number-sign.python';
   match = '(#).*$\n?';
   captures = { 1 = { name = 'punctuation.definition.comment.python'; }; };
},
</snippet></ROW><ROW><id>670341</id><snippet>{  name = 'comment.line.number-sign.python';
   match = '(#).*?(\s*)$\n?';
   captures = { 
     1 = { name = 'punctuation.definition.comment.python'; }; 
     2 = { name = 'invalid.trailing-whitespace';  }; 
   };
},
</snippet></ROW><ROW><id>670341</id><snippet>:
patterns = (
 {    name = 'comment.line.number-sign.python';
:
</snippet></ROW><ROW><id>670341</id><snippet>:
patterns = (
 {  include = 'source.whitespace'; },
 {    name = 'comment.line.number-sign.python';
:
</snippet></ROW><ROW><id>671373</id><snippet>getpixel

im.getpixel(xy) =&gt; value or tuple

Returns the pixel at the given position. If the image is a multi-layer image, this method returns a tuple.
</snippet></ROW><ROW><id>671378</id><snippet>{% extends "base.html" %}</snippet></ROW><ROW><id>671378</id><snippet>{% extends "section1/base.html" %}</snippet></ROW><ROW><id>671553</id><snippet>flickerObject</snippet></ROW><ROW><id>671553</id><snippet>connect</snippet></ROW><ROW><id>671553</id><snippet>ObjectPath</snippet></ROW><ROW><id>671553</id><snippet>NameOwnerChanged</snippet></ROW><ROW><id>672198</id><snippet>bars</snippet></ROW><ROW><id>672198</id><snippet>maptest</snippet></ROW><ROW><id>672198</id><snippet>foos = [1.0,2.0,3.0,4.0,5.0]
bars = [1,2,3]

def maptest(foo):
    print foo, bars

map(maptest, foos)
</snippet></ROW><ROW><id>672198</id><snippet>maptest</snippet></ROW><ROW><id>672198</id><snippet>map</snippet></ROW><ROW><id>672198</id><snippet>map((lambda foo: maptest(foo, bars)), foos)
</snippet></ROW><ROW><id>672508</id><snippet>from sgmllib import SGMLParser

class URLLister(SGMLParser):
    def reset(self):                              
        SGMLParser.reset(self)
        self.urls = []

    def start_a(self, attrs):                     
        href = [v for k, v in attrs if k=='href']  
        if href:
            self.urls.extend(href)

import urllib, urllister
usock = urllib.urlopen("http://diveintopython.net/")
parser = urllister.URLLister()
parser.feed(usock.read())         
usock.close()      
parser.close()                    
for url in parser.urls: print url
</snippet></ROW><ROW><id>672665</id><snippet>use Builder;
my $builder = Builder-&gt;new;
my $h = $builder-&gt;block( 'Builder::XML' );

$h-&gt;table( { border =&gt; 0, cellpadding =&gt; 4 }, sub {
   for ( my $i = 1; $i &lt; 25; $i += 5 ) {
       $h-&gt;tr( { align =&gt; 'right' }, sub {
           for my $j (0..4) {
               $h-&gt;td( { color =&gt; $j % 2 ? 'pink' : 'green' }, $i + $j );
           }
       });
   } 
});

say $builder-&gt;render;
</snippet></ROW><ROW><id>672665</id><snippet>use HTML::AsSubs;

my $td = sub {
    my $i = shift;
    return map { 
        td( { color =&gt; $_ % 2 ? 'pink' : 'green' }, $i + $_ )
    } 0..4;
};

say table( { border =&gt; 0, cellpadding =&gt; 4 },
    map { 
        &amp;tr( { align =&gt; 'right' }, $td-&gt;( $_ ) ) 
    } loop( below =&gt; 25, by =&gt; 5 )
)-&gt;as_HTML;
</snippet></ROW><ROW><id>672665</id><snippet>use HTML::Tiny;
my $h = HTML::Tiny-&gt;new;

my $td = sub {
    my $i = shift;
    return map { 
        $h-&gt;td( { 'color' =&gt; $_ % 2 ? 'pink' : 'green' }, $i + $_ )
    } 0..4;
};

say $h-&gt;table(
    { border =&gt; 0, cellpadding =&gt; 4 },
    [
        map { 
            $h-&gt;tr( { align =&gt; 'right' }, [ $td-&gt;( $_ ) ] )  
        } loop( below =&gt; 25, by =&gt; 5 )    
    ]
);
</snippet></ROW><ROW><id>672665</id><snippet>use Markapl;

template 'MyTable' =&gt; sub {
    table ( border =&gt; 0, cellpadding =&gt; 4 ) {
       for ( my $i = 1; $i &lt; 25; $i += 5 ) {
           row ( align =&gt; 'right' ) {
               for my $j ( 0.. 4 ) {
                   td ( color =&gt; $j % 2 ? 'pink' : 'green' ) { $i + $j }
               }
           }
       } 
    }
};

print main-&gt;render( 'MyTable' );
</snippet></ROW><ROW><id>672665</id><snippet>package MyTemplates;
use Template::Declare::Tags;
use base 'Template::Declare';

template 'MyTable' =&gt; sub {
    table {
        attr { border =&gt; 0, cellpadding =&gt; 4 };
        for ( my $i = 1; $i &lt; 25; $i += 5 ) {
            row  {
                attr { align =&gt; 'right' };
                    for my $j ( 0..4 ) {
                        cell {
                            attr { color =&gt; $j % 2 ? 'pink' : 'green' } 
                            outs $i + $j;
                        }
                    }
            }
        } 
    }
};

package main;
use Template::Declare;
Template::Declare-&gt;init( roots =&gt; ['MyTemplates'] );
print Template::Declare-&gt;show( 'MyTable' );
</snippet></ROW><ROW><id>672665</id><snippet>use XML::Generator;
my $x = XML::Generator-&gt;new( pretty =&gt; 2 );

my $td = sub {
    my $i = shift;
    return map { 
        $x-&gt;td( { 'color' =&gt; $_ % 2 ? 'pink' : 'green' }, $i + $_ )
    } 0..4;
};

say $x-&gt;table(
    { border =&gt; 0, cellpadding =&gt; 4 },
    map { 
        $x-&gt;tr( { align =&gt; 'right' }, $td-&gt;( $_ ) )  
    } loop( below =&gt; 25, by =&gt; 5 )    
);
</snippet></ROW><ROW><id>672665</id><snippet>sub loop {
    my ( %p ) = @_;
    my @list;

    for ( my $i = $p{start} || 1; $i &lt; $p{below}; $i += $p{by} ) {
        push @list, $i;
    }

    return @list;
}
</snippet></ROW><ROW><id>672755</id><snippet>sudo easy_install http://ipython.scipy.org/dist/readline-2.5.1-py2.5-macosx-10.5-i386.egg
</snippet></ROW><ROW><id>673309</id><snippet>Tkinter</snippet></ROW><ROW><id>673309</id><snippet>tkinter</snippet></ROW><ROW><id>673309</id><snippet>Tkinter</snippet></ROW><ROW><id>673309</id><snippet>tkinter</snippet></ROW><ROW><id>673309</id><snippet>tkMessageBox</snippet></ROW><ROW><id>673309</id><snippet>tkinter.messagebox</snippet></ROW><ROW><id>673309</id><snippet>tkColorChooser</snippet></ROW><ROW><id>673309</id><snippet>tkinter.colorchooser</snippet></ROW><ROW><id>673309</id><snippet>tkFileDialog</snippet></ROW><ROW><id>673309</id><snippet>tkinter.filedialog</snippet></ROW><ROW><id>673309</id><snippet>tkCommonDialog</snippet></ROW><ROW><id>673309</id><snippet>tkinter.commondialog</snippet></ROW><ROW><id>673309</id><snippet>tkSimpleDialog</snippet></ROW><ROW><id>673309</id><snippet>tkinter.simpledialog</snippet></ROW><ROW><id>673309</id><snippet>tkFont</snippet></ROW><ROW><id>673309</id><snippet>tkinter.font</snippet></ROW><ROW><id>673309</id><snippet>Tkdnd</snippet></ROW><ROW><id>673309</id><snippet>tkinter.dnd</snippet></ROW><ROW><id>673309</id><snippet>ScrolledText</snippet></ROW><ROW><id>673309</id><snippet>tkinter.scrolledtext</snippet></ROW><ROW><id>673309</id><snippet>Tix</snippet></ROW><ROW><id>673309</id><snippet>tkinter.tix</snippet></ROW><ROW><id>673309</id><snippet>ttk</snippet></ROW><ROW><id>673309</id><snippet>tkinter.ttk</snippet></ROW><ROW><id>673309</id><snippet>dir</snippet></ROW><ROW><id>673643</id><snippet>&lt;a href="http://library.gnome.org/devel/gtk/stable/GtkTextBuffer.html" rel="nofollow"&gt;GtkTextBuffer&lt;/a&gt;</snippet></ROW><ROW><id>673910</id><snippet>&gt;&gt;&gt; {'a': 1, 'b': 2}
{'a': 1, 'b': 2}
&gt;&gt;&gt; {'a': 1, 'b': 2}.items()
[('a', 1), ('b', 2)]
</snippet></ROW><ROW><id>673910</id><snippet>sorted(somedict.items(), key=lambda x: {'carrot': 2, 'banana': 1, 'apple':3}[x[0]])
</snippet></ROW><ROW><id>674149</id><snippet>import logging
LOG_FILENAME = '/tmp/logging_example.out'
logging.basicConfig(filename=LOG_FILENAME,level=logging.DEBUG,)

...

try:
    # code
except:
    logging.debug('Something bad happened', exc_info=True)
    # display message box
    # raise (if necessary)
</snippet></ROW><ROW><id>674250</id><snippet>-1</snippet></ROW><ROW><id>674250</id><snippet>None</snippet></ROW><ROW><id>674250</id><snippet>-1</snippet></ROW><ROW><id>674250</id><snippet>str.find()</snippet></ROW><ROW><id>674508</id><snippet>import os, fcntl
fcntl.fcntl(thePipe, fcntl.F_SETFL, os.O_NONBLOCK)
</snippet></ROW><ROW><id>674508</id><snippet>thePipe.read()</snippet></ROW><ROW><id>674522</id><snippet>sorted(dictionary.items(), key=lambda x: x[1])
</snippet></ROW><ROW><id>674522</id><snippet>import operator
sorted(dictionary.items(), key=operator.itemgetter(1))
</snippet></ROW><ROW><id>674522</id><snippet>operator</snippet></ROW><ROW><id>674531</id><snippet>&gt;&gt;&gt; d = { 'a': 1, 'b': 2, 'c': 3 }
&gt;&gt;&gt; d.items()
[('a', 1), ('c', 3), ('b', 2)]
&gt;&gt;&gt; [(v, k) for k, v in d.iteritems()]
[(1, 'a'), (3, 'c'), (2, 'b')]
</snippet></ROW><ROW><id>674531</id><snippet>iteritems</snippet></ROW><ROW><id>674531</id><snippet>items</snippet></ROW><ROW><id>674775</id><snippet>str.index</snippet></ROW><ROW><id>674775</id><snippet>&gt;&gt;&gt; 'sdfasdf'.index('cc')
Traceback (most recent call last):
  File "&lt;pyshell#144&gt;", line 1, in &lt;module&gt;
    'sdfasdf'.index('cc')
ValueError: substring not found
&gt;&gt;&gt; 'sdfasdf'.index('df')
1
</snippet></ROW><ROW><id>675448</id><snippet>#</snippet></ROW><ROW><id>675765</id><snippet>python</snippet></ROW><ROW><id>675765</id><snippet>python -tt</snippet></ROW><ROW><id>675981</id><snippet>PythonPath "['D:/therap', 'D:/therap/therap'] + sys.path"
</snippet></ROW><ROW><id>676302</id><snippet>def autocorr(x):
    result = numpy.correlate(x, x, mode='full')
    return result[result.size/2:]
</snippet></ROW><ROW><id>676773</id><snippet>os.name</snippet></ROW><ROW><id>676773</id><snippet>/dev/input/</snippet></ROW><ROW><id>676773</id><snippet>/dev/input/by-path/</snippet></ROW><ROW><id>676773</id><snippet>"kbd"</snippet></ROW><ROW><id>676773</id><snippet>"keyboard"</snippet></ROW><ROW><id>676872</id><snippet>Firstclass.rect = &lt;...&gt;</snippet></ROW><ROW><id>676872</id><snippet>__setattr__</snippet></ROW><ROW><id>676872</id><snippet>Firstclass.rect.bottom = 3</snippet></ROW><ROW><id>676872</id><snippet>__setattr__</snippet></ROW><ROW><id>676872</id><snippet>__setattr__</snippet></ROW><ROW><id>677120</id><snippet>import Queue
# maxsize of 0 means that we can put an unlimited number of events
# on the queue
q = Queue.Queue(maxsize=0)

def network_thread():
    while True:
        e = get_network_event()
        q.put(e)

def logic_thread():
    while True:
        # This will wait until there are events to process
        e = q.get()
        process_event(e)
</snippet></ROW><ROW><id>677199</id><snippet>verbose_name_plural</snippet></ROW><ROW><id>677345</id><snippet>python 2.6</snippet></ROW><ROW><id>677545</id><snippet>extrema</snippet></ROW><ROW><id>677681</id><snippet>tee</snippet></ROW><ROW><id>677685</id><snippet>[o.my_attr for o in my_list]
</snippet></ROW><ROW><id>677685</id><snippet>from operator import attrgetter
map(attrgetter('my_attr'), my_list)
</snippet></ROW><ROW><id>678050</id><snippet>&gt;&gt;&gt; get_session('Mmusc20090126', False, True) #doctest: +ELLIPSIS
&lt;sqlalchemy.orm.session.Session object at 0x...&gt;
</snippet></ROW><ROW><id>678242</id><snippet>import os
print os.path.splitext("path_to_file")[0]
</snippet></ROW><ROW><id>678242</id><snippet>from os.path import basename

# now you can call it directly with basename
print basename("/a/b/c.txt")
</snippet></ROW><ROW><id>678421</id><snippet>for x in range(750, 765) + [769, 770, 774]: print x
</snippet></ROW><ROW><id>678441</id><snippet>infodict = {
    'queryset': Post.objects.all(),
    'date_field': 'date',
    'template_name': 'index.html',
    'template_object_name': 'latest_post_list',
}

urlpatterns = patterns('django.views.generic.date_based',
    url(r'^gindex/$', 'archive_index', dict(infodict, template_name='gindex.html')),
    url(r'^hindex/$', 'archive_index', dict(infodict, template_name='hindex.html')),
)
</snippet></ROW><ROW><id>678527</id><snippet>cherrypy.quickstart(Root(), "/")
</snippet></ROW><ROW><id>678632</id><snippet>for m in OldModel.objects.all():
    aDict = { 'col1':m.col1, 'old_at_fk':m.fktoanothertable.id, 'old_id':id }
    csvwriter.writerow( aDict )
</snippet></ROW><ROW><id>678632</id><snippet># Pass 1 - raw load

for row in csv.reader:
    new= NewModel.create( **row )

# Pass 2 - resolve FK's

for nm in NewModel.objects.all():
    ref1= OtherModel.objects.get( old_id=nm.old_at_fk )
    nm.properfk = ref1
    nm.save()
</snippet></ROW><ROW><id>679035</id><snippet>myargs = ['-vv', '-m', '-a', '-f', '//filesrver/eggs http://webserver1/python_eggs http://webserver2/python_eggs, 'myproject==trunk-99']

setuptools.command.easy_install.main( myargs )
</snippet></ROW><ROW><id>679035</id><snippet>'myproject==trunk-99'</snippet></ROW><ROW><id>679035</id><snippet>myproject==</snippet></ROW><ROW><id>679035</id><snippet>-v</snippet></ROW><ROW><id>679035</id><snippet>-vv</snippet></ROW><ROW><id>679035</id><snippet>myargs = ['-v', '-m', '-a', '-f', '"//filesrver/eggs/" "http://webserver1/python_eggs/" "http://webserver2/python_eggs/"', 'trunk-99']
setuptools.command.easy_install.main( myargs )
</snippet></ROW><ROW><id>679105</id><snippet>Posts.objects.filter(draft=False).dates('post_date','month',order='DESC')
</snippet></ROW><ROW><id>679464</id><snippet>import urllib

url_handle = urllib.urlopen( "http://www.webservicex.net/whois.asmx/GetWhoIS?HostName=%s" \
                             % ("www.google.com") )
print url_handle.read()
</snippet></ROW><ROW><id>679742</id><snippet>def gen_wrapper(cmp):
    class Wrapper(object):
        def __init__(self, value): self.value = value
        def __cmp__(self, obj): return cmp(self.value, obj.value)
    return Wrapper
</snippet></ROW><ROW><id>680832</id><snippet>class IndexHandler(webapp.RequestHandler):
    """Your site"""
    def get(self):
        self.response.out.write("hi")

if __name__ == '__main__':
    application = webapp.WSGIApplication([
        ('.*', IndexHandler),
    ], debug=True)

    # Start fake-request/profiling bit
    urls = [
        "/",
        "/blog/view/hello",
        "/admin/post/edit/hello",
        "/makeanerror404",
        "/makeanerror500"
    ]

    def fake_wsgi_callback(response, headers):
        """Prints heads to stdout"""
        print("\n".join(["%s: %s" % (n, v) for n, v in headers]))
        print("\n")

    for request_url in urls:
        html = application({
        'REQUEST_METHOD': 'GET',
        'PATH_INFO': request_url},
        fake_wsgi_callback
        )
        print html
</snippet></ROW><ROW><id>680832</id><snippet>main()</snippet></ROW><ROW><id>680832</id><snippet>real_main()</snippet></ROW><ROW><id>680832</id><snippet>profile_main()</snippet></ROW><ROW><id>680832</id><snippet>def profile_main():
    # This is the main function for profiling 
    # We've renamed our original main() above to real_main()
    import cProfile, pstats
    prof = cProfile.Profile()
    prof = prof.runctx("real_main()", globals(), locals())
    print "&lt;pre&gt;"
    stats = pstats.Stats(prof)
    stats.sort_stats("time")  # Or cumulative
    stats.print_stats(80)  # 80 = how many to print
    # The rest is optional.
    # stats.print_callees()
    # stats.print_callers()
    print "&lt;/pre&gt;"
</snippet></ROW><ROW><id>680832</id><snippet>main = profile_main</snippet></ROW><ROW><id>680832</id><snippet>main = real_main</snippet></ROW><ROW><id>680967</id><snippet>switch</snippet></ROW><ROW><id>680967</id><snippet>if/elif</snippet></ROW><ROW><id>680967</id><snippet>funcs = {
    'CONNECT': connect,
    'RAWFEED': rawfeed,
    'RAWCONFIG' : rawconfig,
    'TESTFEED': testfeed
}
funcs[status](*args, **kwargs)
</snippet></ROW><ROW><id>681614</id><snippet>ON DELETE CASCADE</snippet></ROW><ROW><id>681614</id><snippet>Message</snippet></ROW><ROW><id>681614</id><snippet>User</snippet></ROW><ROW><id>681614</id><snippet>_collect_sub_objects()</snippet></ROW><ROW><id>681614</id><snippet>delete()</snippet></ROW><ROW><id>681614</id><snippet>django.db.base</snippet></ROW><ROW><id>681614</id><snippet>delete()</snippet></ROW><ROW><id>681614</id><snippet>_collect_sub_objects</snippet></ROW><ROW><id>681614</id><snippet>from django.db.models.query import CollectedObjects
u = User.objects.get(id=1)


instances_to_be_deleted = CollectedObjects()
u._collect_sub_objects(instances_to_be_deleted)

for k in instances_to_be_deleted.ordered_keys():
    inst_dict = instances_to_be_deleted.data[k]
    for i in inst_dict.values():
        i.sender = None  # You will need a more generic way for this
        i.save()

u.delete()
</snippet></ROW><ROW><id>681949</id><snippet>slice(*[{True: lambda n: None, False: int}[x == ''](x) for x in (mystring.split(':') + ['', '', ''])[:3]])
</snippet></ROW><ROW><id>682052</id><snippet>__new__</snippet></ROW><ROW><id>682052</id><snippet>def substitute_init(self, id, *args, **kwargs):
    pass

class FooMeta(type):

    def __new__(cls, name, bases, attrs):
        attrs['__init__'] = substitute_init
        return super(FooMeta, cls).__new__(cls, name, bases, attrs)

class Foo(object):

    __metaclass__ = FooMeta

    def __init__(self, value1):
        pass
</snippet></ROW><ROW><id>682464</id><snippet>split</snippet></ROW><ROW><id>682464</id><snippet>ps = subprocess.Popen(['ps', 'aux'], stdout=subprocess.PIPE).communicate()[0]
processes = ps.split('\n')
# this specifies the number of splits, so the splitted lines
# will have (nfields+1) elements
nfields = len(processes[0].split()) - 1
for row in processes[1:]:
    print row.split(None, nfields)
</snippet></ROW><ROW><id>682513</id><snippet>None</snippet></ROW><ROW><id>682513</id><snippet>class Cheese():
    def __init__(self, num_holes = None):
        if(num_holes is None):
            ...
</snippet></ROW><ROW><id>682513</id><snippet>class Cheese():
    def __init__(self, *args, **kwargs):
        #args -- tuple of anonymous arguments
        #kwargs -- dictionary of named arguments
        self.num_holes = kwargs.get('num_holes',random_holes())
</snippet></ROW><ROW><id>682513</id><snippet>*args</snippet></ROW><ROW><id>682513</id><snippet>**kwargs</snippet></ROW><ROW><id>682513</id><snippet>def f(*args, **kwargs):
   print 'args: ', args, ' kwargs: ', kwargs

&gt;&gt;&gt; f('a')
args:  ('a',)  kwargs:  {}
&gt;&gt;&gt; f(ar='a')
args:  ()  kwargs:  {'ar': 'a'}
&gt;&gt;&gt; f(1,2,param=3)
args:  (1, 2)  kwargs:  {'param': 3}
</snippet></ROW><ROW><id>682877</id><snippet>[]</snippet></ROW><ROW><id>682877</id><snippet>class A(dict):  
    def __init__(self):
        self['a'] = 'success'

    def __getitem__(self, name):
        print 'getitem!'
        return dict.__getitem__(self, name)

class B(object):
    def __init__(self):
        self._a = A()
        B.__getitem__ = self._a.__getitem__

b = B()
c = b['a']
</snippet></ROW><ROW><id>682978</id><snippet>def text_return(self, event):
    self.st.Clear()
    self.st.Append('3')
    self.st.Append('4')
</snippet></ROW><ROW><id>683505</id><snippet>doc.toprettyxml</snippet></ROW><ROW><id>683505</id><snippet>f = open("output.xml", "w")
try:
    f.write(doc.toprettyxml(indent="  "))
finally:
    f.close()
</snippet></ROW><ROW><id>683505</id><snippet>with</snippet></ROW><ROW><id>683505</id><snippet>with open("output.xml", "w") as f:
    f.write(doc.toprettyxml(indent="  "))
</snippet></ROW><ROW><id>683505</id><snippet>from __future__ import with_statement
</snippet></ROW><ROW><id>683611</id><snippet>def DestinationThread( a ) :
  while True :
    items = q.get()
    func = items[0]
    args = items[1:]
    func(*args)
</snippet></ROW><ROW><id>684134</id><snippet>for_stmt: 'for' exprlist 'in' exprlist ':' suite ['else' ':' suite] 
</snippet></ROW><ROW><id>684430</id><snippet>True</snippet></ROW><ROW><id>684797</id><snippet>&gt;&gt;&gt; help(Levenshtein.ratio)

ratio(...)
    Compute similarity of two strings.

    ratio(string1, string2)

    The similarity is a number between 0 and 1, it's usually equal or
    somewhat higher than difflib.SequenceMatcher.ratio(), becuase it's
    based on real minimal edit distance.

    Examples:
    &gt;&gt;&gt; ratio('Hello world!', 'Holly grail!')
    0.58333333333333337
    &gt;&gt;&gt; ratio('Brian', 'Jesus')
    0.0

&gt;&gt;&gt; help(Levenshtein.distance)

distance(...)
    Compute absolute Levenshtein distance of two strings.

    distance(string1, string2)

    Examples (it's hard to spell Levenshtein correctly):
    &gt;&gt;&gt; distance('Levenshtein', 'Lenvinsten')
    4
    &gt;&gt;&gt; distance('Levenshtein', 'Levensthein')
    2
    &gt;&gt;&gt; distance('Levenshtein', 'Levenshten')
    1
    &gt;&gt;&gt; distance('Levenshtein', 'Levenshtein')
    0
</snippet></ROW><ROW><id>685157</id><snippet>close()</snippet></ROW><ROW><id>685157</id><snippet>GeneratorExit</snippet></ROW><ROW><id>685157</id><snippet>GeneratorExit</snippet></ROW><ROW><id>685157</id><snippet>StopIteration</snippet></ROW><ROW><id>685157</id><snippet>close()</snippet></ROW><ROW><id>685157</id><snippet>try...finally</snippet></ROW><ROW><id>685157</id><snippet>finally</snippet></ROW><ROW><id>685157</id><snippet>try...finally</snippet></ROW><ROW><id>685157</id><snippet>with</snippet></ROW><ROW><id>685157</id><snippet>with</snippet></ROW><ROW><id>685157</id><snippet>__exit__</snippet></ROW><ROW><id>685157</id><snippet>with</snippet></ROW><ROW><id>685157</id><snippet>def coroutine():
    lock.acquire()
    yield 'spam'
    yield 'eggs'
    lock.release()

generator = coroutine()
generator.next()
lock.acquire() # whoops!
</snippet></ROW><ROW><id>685503</id><snippet>TestCase</snippet></ROW><ROW><id>685503</id><snippet>TestSuite</snippet></ROW><ROW><id>685503</id><snippet>run()</snippet></ROW><ROW><id>685503</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>685503</id><snippet>run()</snippet></ROW><ROW><id>685503</id><snippet>def run(self, result=None):
    if result is None: result = self.defaultTestResult()
    result.startTest(self)
    testMethod = getattr(self, self._testMethodName)
    try:
        try:
            self.setUp()
        except KeyboardInterrupt:
            raise
        except:
            result.addError(self, self._exc_info())
            return

        ok = False
        try:
            testMethod()
            ok = True
        except self.failureException:
            result.addFailure(self, self._exc_info())
            result.stop()
        except KeyboardInterrupt:
            raise
        except:
            result.addError(self, self._exc_info())
            result.stop()

        try:
            self.tearDown()
        except KeyboardInterrupt:
            raise
        except:
            result.addError(self, self._exc_info())
            ok = False
        if ok: result.addSuccess(self)
    finally:
        result.stopTest(self)
</snippet></ROW><ROW><id>685503</id><snippet>result.stop()</snippet></ROW><ROW><id>685503</id><snippet>run</snippet></ROW><ROW><id>685503</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>685694</id><snippet>duplicates = set()
found = set()
for item in source:
    if item in found:
        duplicates.add(item)
    else:
        found.add(item)
</snippet></ROW><ROW><id>685726</id><snippet>__new__()</snippet></ROW><ROW><id>685726</id><snippet>__init__()</snippet></ROW><ROW><id>685726</id><snippet>__new__()</snippet></ROW><ROW><id>685726</id><snippet>cls</snippet></ROW><ROW><id>685726</id><snippet>klass</snippet></ROW><ROW><id>685726</id><snippet>__init__()</snippet></ROW><ROW><id>685726</id><snippet>self</snippet></ROW><ROW><id>685726</id><snippet>__new__</snippet></ROW><ROW><id>685753</id><snippet>./configure
make
</snippet></ROW><ROW><id>686045</id><snippet>threading.Thread</snippet></ROW><ROW><id>686045</id><snippet>Thread(target=callable).start()</snippet></ROW><ROW><id>686045</id><snippet>gtk.main_iteration</snippet></ROW><ROW><id>686045</id><snippet>block</snippet></ROW><ROW><id>686045</id><snippet>True</snippet></ROW><ROW><id>686045</id><snippet>gtk.main_iteration</snippet></ROW><ROW><id>686045</id><snippet>gtk.main_iteration(block=False)
</snippet></ROW><ROW><id>686045</id><snippet>gtk.gdk.threads_init</snippet></ROW><ROW><id>686145</id><snippet>    for i in range(0, info['size'] - csize + 1, info['align']):
        if layout[i:i+csize] == [None] * csize:
            layout_addfield(layout, i, ctype, '_alignment')
            break
    else:
        raise AssertionError("unenforceable alignment %d" % (
            info['align'],))
</snippet></ROW><ROW><id>686145</id><snippet>if cell.is_constant():
    return Constant(cell.const)
else:
    for v in known_variables:
        if self.bindings[v] is cell:
            return v
    else:
        raise CannotSimplify
</snippet></ROW><ROW><id>686145</id><snippet>def is_((pbc1, pbc2)):
    thistype = pairtype(SomePBC, SomePBC)
    s = super(thistype, pair(pbc1, pbc2)).is_()
    if not s.is_constant():
        if not pbc1.can_be_None or not pbc2.can_be_None:
            for desc in pbc1.descriptions:
                if desc in pbc2.descriptions:
                    break
            else:
                s.const = False    # no common desc in the two sets
    return s
</snippet></ROW><ROW><id>686145</id><snippet>def add_source_for_attribute(self, attr, source):
    """Adds information about a constant source for an attribute.
    """
    for cdef in self.getmro():
        if attr in cdef.attrs:
            # the Attribute() exists already for this class (or a parent)
            attrdef = cdef.attrs[attr]
            s_prev_value = attrdef.s_value
            attrdef.add_constant_source(self, source)
            # we should reflow from all the reader's position,
            # but as an optimization we try to see if the attribute
            # has really been generalized
            if attrdef.s_value != s_prev_value:
                attrdef.mutated(cdef) # reflow from all read positions
            return
    else:
        # remember the source in self.attr_sources
        sources = self.attr_sources.setdefault(attr, [])
        sources.append(source)
        # register the source in any Attribute found in subclasses,
        # to restore invariant (III)
        # NB. add_constant_source() may discover new subdefs but the
        #     right thing will happen to them because self.attr_sources
        #     was already updated
        if not source.instance_level:
            for subdef in self.getallsubdefs():
                if attr in subdef.attrs:
                    attrdef = subdef.attrs[attr]
                    s_prev_value = attrdef.s_value
                    attrdef.add_constant_source(self, source)
                    if attrdef.s_value != s_prev_value:
                        attrdef.mutated(subdef) # reflow from all read positions
</snippet></ROW><ROW><id>686145</id><snippet>def generalize_attr(self, attr, s_value=None):
    # if the attribute exists in a superclass, generalize there,
    # as imposed by invariant (I)
    for clsdef in self.getmro():
        if attr in clsdef.attrs:
            clsdef._generalize_attr(attr, s_value)
            break
    else:
        self._generalize_attr(attr, s_value)
</snippet></ROW><ROW><id>686728</id><snippet>tup = (2009, 3, 23, 13, 6, 34, 0, 82, 0)
import datetime 
d = datetime.datetime(*(tup[0:6]))
#two equivalent ways to format it:
dStr = d.isoformat(' ')
#or
dStr = d.strftime('%Y-%m-%d %H:%M:%S')
</snippet></ROW><ROW><id>686763</id><snippet>def create_querytable2():
    constring = "OLEDB;Provider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\path\to\db.mdb;"
    SQL = "Select * from tblName;"
    excel = client.CreateObject("Excel.Application", dynamic=True)
    excel.Visible = True
    ws = excel.Workbooks.Add().Worksheets(1)
    ws.QueryTables.Add(constring, ws.Range["A1"], SQL).Refresh()
</snippet></ROW><ROW><id>686880</id><snippet>import pygame</snippet></ROW><ROW><id>686880</id><snippet>MyDll</snippet></ROW><ROW><id>686961</id><snippet>__getitem__</snippet></ROW><ROW><id>686961</id><snippet>class A(dict):                  
    def __getitem__(self, name):
        return dict.__getitem__(self, name)

class B(object):
    def __init__(self):
        self.a = A()

    def __getitem__(self, item):
        return self.a[item]

b1 = B()
b1.a['a'] = 5
b2 = B()
b2.a['b'] = 10

c = b1['a']
d = b2['b']
</snippet></ROW><ROW><id>686961</id><snippet>__init__</snippet></ROW><ROW><id>686961</id><snippet>def __init__(self):
    self.a = A()
    def mygetitem(self, item):
        return self.a[item]
    B.__getitem__ = types.MethodType(mygetitem, None, B)
</snippet></ROW><ROW><id>687252</id><snippet>dir()</snippet></ROW><ROW><id>687252</id><snippet>&gt;&gt;&gt; li = []
&gt;&gt;&gt; dir(li)      
['append', 'count', 'extend', 'index', 'insert',
'pop', 'remove', 'reverse', 'sort']
</snippet></ROW><ROW><id>687252</id><snippet>li</snippet></ROW><ROW><id>687252</id><snippet>dir(li)</snippet></ROW><ROW><id>687252</id><snippet>class Foo:
    def foo(): pass

class Bar(Foo):
    def bar(): pass
</snippet></ROW><ROW><id>687252</id><snippet>&gt;&gt;&gt; from test import Foo, Bar
&gt;&gt;&gt; dir(Foo)
['__doc__', '__module__', 'foo']
&gt;&gt;&gt; dir(Bar)
['__doc__', '__module__', 'bar', 'foo']
</snippet></ROW><ROW><id>687252</id><snippet>dir()</snippet></ROW><ROW><id>687252</id><snippet>vars()</snippet></ROW><ROW><id>687252</id><snippet>Vars()</snippet></ROW><ROW><id>687252</id><snippet>dir()</snippet></ROW><ROW><id>687252</id><snippet>help()</snippet></ROW><ROW><id>687871</id><snippet>os.path</snippet></ROW><ROW><id>687871</id><snippet>from os import path
path.dirname("C:\\a\\b\\c\\d\\")
</snippet></ROW><ROW><id>688193</id><snippet># test_client.py
from poster.encode import multipart_encode
from poster.streaminghttp import register_openers
import urllib2

# Register the streaming http handlers with urllib2
register_openers()

# Start the multipart/form-data encoding of the file "DSC0001.jpg"
# "image1" is the name of the parameter, which is normally set
# via the "name" parameter of the HTML &lt;input&gt; tag.

# headers contains the necessary Content-Type and Content-Length
# datagen is a generator object that yields the encoded parameters
datagen, headers = multipart_encode({"image1": open("DSC0001.jpg")})

# Create the Request object
request = urllib2.Request("http://localhost:5000/upload_image", datagen, headers)
# Actually do the request, and get the response
print urllib2.urlopen(request).read()
</snippet></ROW><ROW><id>688492</id><snippet>itertools.groupby(biglist, operator.itemgetter(2))
</snippet></ROW><ROW><id>689901</id><snippet>update tblName set date_field = dateadd("hh", 2, data_field)
</snippet></ROW><ROW><id>690128</id><snippet>file</snippet></ROW><ROW><id>690128</id><snippet>file file.jpg</snippet></ROW><ROW><id>690625</id><snippet>if x == 0:
  pass
else:
  print "x not equal 0"
</snippet></ROW><ROW><id>690625</id><snippet>def f():
  pass
</snippet></ROW><ROW><id>690625</id><snippet>class c:
  pass
</snippet></ROW><ROW><id>691057</id><snippet>iptype()</snippet></ROW><ROW><id>691057</id><snippet>&gt;&gt;&gt; from IPy import IP
&gt;&gt;&gt; ip = IP('127.0.0.0/30')
&gt;&gt;&gt; ip.iptype()
'PRIVATE'
</snippet></ROW><ROW><id>691252</id><snippet>DEBUG_PROPAGATE_EXCEPTIONS</snippet></ROW><ROW><id>691252</id><snippet>&gt;&gt;&gt; def log_error(func):
...     def _call_func(*args, **argd):
...         try:
...             func(*args, **argd)
...         except:
...             print "error" #substitute your own error handling
...     return _call_func
...
&gt;&gt;&gt; @log_error
... def foo(a):
...     raise AttributeError
...
&gt;&gt;&gt; foo(1)
error
</snippet></ROW><ROW><id>691252</id><snippet>_</snippet></ROW><ROW><id>691252</id><snippet>_</snippet></ROW><ROW><id>691274</id><snippet>printa(*cord())
</snippet></ROW><ROW><id>691274</id><snippet>*</snippet></ROW><ROW><id>691274</id><snippet>*</snippet></ROW><ROW><id>691274</id><snippet>def fn(*args):
    # args is now a tuple of the non-keyworded arguments
    print args

fn(1, 2, 3, 4, 5)
</snippet></ROW><ROW><id>691274</id><snippet>(1, 2, 3, 4, 5)</snippet></ROW><ROW><id>691274</id><snippet>fn(*[1, 2, 3, 4, 5])
</snippet></ROW><ROW><id>691365</id><snippet>import struct

data = self.socket.recv(4)
print "data is ", data
print "repr(data) is ", repr(data)
myint = struct.unpack("!i", data)[0]
</snippet></ROW><ROW><id>691748</id><snippet>&gt;&gt;&gt; 'a_b_c_d'.rsplit('_', 1)
['a_b_c', 'd']
</snippet></ROW><ROW><id>691748</id><snippet>S.rsplit([sep [,maxsplit]])</snippet></ROW><ROW><id>692388</id><snippet>class C(object):
    @staticmethod
    def f(x):
       return x + x
</snippet></ROW><ROW><id>692388</id><snippet>c = C()
c.f(2)
</snippet></ROW><ROW><id>692388</id><snippet>C.f(2)
</snippet></ROW><ROW><id>692458</id><snippet>lst = [0] * 3
</snippet></ROW><ROW><id>692458</id><snippet>&gt;&gt;&gt; lst_2d = [[0] * 3] * 3
&gt;&gt;&gt; lst_2d
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
&gt;&gt;&gt; lst_2d[0][0] = 5
&gt;&gt;&gt; lst_2d
[[5, 0, 0], [5, 0, 0], [5, 0, 0]]
</snippet></ROW><ROW><id>692458</id><snippet>&gt;&gt;&gt; lst_2d = [[0] * 3 for i in xrange(3)]
&gt;&gt;&gt; lst_2d
[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
&gt;&gt;&gt; lst_2d[0][0] = 5
&gt;&gt;&gt; lst_2d
[[5, 0, 0], [0, 0, 0], [0, 0, 0]]
</snippet></ROW><ROW><id>693876</id><snippet>def alter_elements(lst, func):
  for i, item in enumerate(lst):
    if isinstance(item, list):
      alter_elements(item, func)
    else:
      lst[i] = func(item)
</snippet></ROW><ROW><id>693876</id><snippet>&gt;&gt;&gt; sample = [[1,2,3],[4,5,6],[7,8,9]]
&gt;&gt;&gt; alter_elements(sample, lambda x: -x)
&gt;&gt;&gt; print sample
&gt;&gt;&gt; [[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]
</snippet></ROW><ROW><id>694022</id><snippet>d6 = Die() #create die 1 with the default side of 6
d4 = Die(4) #create die 2 with 4 sides
d12 = Die(12) #create die 3 with 12 sides

roll1 = d6.roll_die()
roll2 = d4.roll_die()
roll3 = d12.roll_die()

print "%d\n%d\n%d\nsum = %d" % (roll1, roll2, roll3, roll1 + roll2 + roll3)
</snippet></ROW><ROW><id>694369</id><snippet>//pseudocode:
var urlsToVisit = new Queue(); // Could be a queue (BFS) or stack(DFS). (probably with a database backing or something).
var visitedUrls = new Set(); // List of visited URLs.

// initialization:
urlsToVisit.Add( rootUrl );

while(urlsToVisit.Count &gt; 0) {
  var nextUrl = urlsToVisit.FetchAndRemoveNextUrl();
  var page = FetchPage(nextUrl);
  ProcessPage(page);
  visitedUrls.Add(nextUrl);
  var links = ParseLinks(page);
  foreach (var link in links)
     if (!visitedUrls.Contains(link))
        urlsToVisit.Add(link); 
}
</snippet></ROW><ROW><id>694714</id><snippet>easy_install Unipath</snippet></ROW><ROW><id>694803</id><snippet>def testDecorator(f):
    def _testDecorator():
        a = someTestFunction()
        if a is None:
            return f()
        else: return a
    return _testDecorator

@testDecorator
def SomeCallingFunction():
    ... normal execution
</snippet></ROW><ROW><id>694803</id><snippet>testDecorator</snippet></ROW><ROW><id>694803</id><snippet>SomeCallingFunction</snippet></ROW><ROW><id>694803</id><snippet>SomeCallingFunction</snippet></ROW><ROW><id>694803</id><snippet>SomeCallingFunction</snippet></ROW><ROW><id>694803</id><snippet>a</snippet></ROW><ROW><id>694803</id><snippet>SomeCallingFunction</snippet></ROW><ROW><id>694953</id><snippet>def _(message):
    return my_gettext(__name__, message)
</snippet></ROW><ROW><id>695152</id><snippet>curtime = time.strftime("%H")
...
for hour in range(int(s), int(f)):
    nrt.append(hour)
# this is an inefficient synonym for
# nrt = range(int(s), int(f))

if curtime in nrt:
    ...
</snippet></ROW><ROW><id>695152</id><snippet>'4' == 4 # False
'4' in [3, 4, 5] # False
</snippet></ROW><ROW><id>695152</id><snippet>cur_hour = time.localtime().tm_hour
if int(s) &lt;= cur_hour &lt; int(f):
    # You can "chain" comparison operators in Python
    # so that a op1 b op2 c is equivalent to a op1 b and b op2c
    ...
</snippet></ROW><ROW><id>695464</id><snippet>class RssFooFeedGenerator(Rss201rev2Feed):
    def add_root_elements(self, handler):
        super(RssFooFeedGenerator, self).add_root_elements(handler)
        handler.addQuickElement(u"image", '',
            {
                 'url': u"http://www.example.com/images/logo.jpg",
                 'title': u"Some title",
                 'link': u"http://www.example.com/", 
             })     

class RssFooFeed(Feed):
    feed_type = RssFooFeedGenerator
    title = u"Foo items"
    link = u"http://www.example.com/"
    description = u"Some description"
</snippet></ROW><ROW><id>695553</id><snippet>import re
RE_kv = re.compile("\[%(.*)%\].*?\n?\s*{\s*(.*)")
matches = re.findall(RE_kv, test, re.M)
for k, v in matches:
    print k, v
</snippet></ROW><ROW><id>695553</id><snippet>price $54.99
model WRT54G
brand LINKSYS
</snippet></ROW><ROW><id>695711</id><snippet>p.sort_stats('time', 'cum').print_stats(.5, 'init|get')
</snippet></ROW><ROW><id>695858</id><snippet>pickle.dumps()</snippet></ROW><ROW><id>696285</id><snippet>get_info(__init__)</snippet></ROW><ROW><id>696285</id><snippet>__init__</snippet></ROW><ROW><id>696285</id><snippet>get_info(__init__)</snippet></ROW><ROW><id>696285</id><snippet>get_info</snippet></ROW><ROW><id>696285</id><snippet>__init__</snippet></ROW><ROW><id>697000</id><snippet>&gt;&gt;&gt; tuples = [(1,1), (0,1), (1,0), (0,0), (2,1)]
&gt;&gt;&gt; l = {}
&gt;&gt;&gt; for t in tuples:
...    l[t] = "something"
&gt;&gt;&gt; sorted(l) # equivalent to sorted(l.keys())
[(0, 0), (0, 1), (1, 0), (1, 1), (2, 1)]
&gt;&gt;&gt; sorted(l.items()) # make a list of (key, value) tuples, and sort by key
[((0, 0), 'something'), ((0, 1), 'something'), ((1, 0), 'something'), ((1, 1), 'something'), ((2, 1), 'something')]
</snippet></ROW><ROW><id>697000</id><snippet>something</snippet></ROW><ROW><id>697146</id><snippet>In [1]: import hmac, hashlib
In [2]: hmac.new('key', 'msg').hexdigest()
Out[2]: '18e3548c59ad40dd03907b7aeee71d67'
In [3]: hmac.new('key2', 'msg').hexdigest()
Out[3]: 'a4bde113179bc2a7c6ac9ad7309ea073'
In [4]: hmac.new('key', 'msg', hashlib.sha256).hexdigest()
Out[4]: '2d93cbc1be167bcb1637a4a23cbff01a7878f0c50ee833954ea5221bb1b8c628'
</snippet></ROW><ROW><id>697146</id><snippet>hmac.new(CryptoKey, '^'.join([login, seq, time, amo]), hashlib.md5).hexdigest()
</snippet></ROW><ROW><id>697395</id><snippet>import inspect
inspect.getfile(C.__class__)
</snippet></ROW><ROW><id>697794</id><snippet>__init__</snippet></ROW><ROW><id>698279</id><snippet>%f</snippet></ROW><ROW><id>698279</id><snippet>time.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')
</snippet></ROW><ROW><id>698279</id><snippet>time</snippet></ROW><ROW><id>698279</id><snippet>datetime</snippet></ROW><ROW><id>698279</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; a = datetime.strptime('30/03/09 16:31:32.123', '%d/%m/%y %H:%M:%S.%f')
&gt;&gt;&gt; a.microsecond
123000
</snippet></ROW><ROW><id>698697</id><snippet>import win32api
import win32pdhutil
import win32con

def killProcName(procname):
    """Kill a running process by name.  Kills first process with the given name."""
    try:
        win32pdhutil.GetPerformanceAttributes("Process", "ID Process", procname)
    except:
        pass

    pids = win32pdhutil.FindPerformanceAttributesByName(procname)

    # If _my_ pid in there, remove it!
    try:
        pids.remove(win32api.GetCurrentProcessId())
    except ValueError:
        pass

    handle = win32api.OpenProcess(win32con.PROCESS_TERMINATE, 0, pids[0])
    win32api.TerminateProcess(handle, 0)
    win32api.CloseHandle(handle)
</snippet></ROW><ROW><id>699069</id><snippet>w.update_idletasks()</snippet></ROW><ROW><id>699191</id><snippet>len()</snippet></ROW><ROW><id>699218</id><snippet>easy_install QLCLI
</snippet></ROW><ROW><id>699218</id><snippet>print qllib.AudioFile('foo.mp3')['artist']
</snippet></ROW><ROW><id>699218</id><snippet>[u'The First Artist', u'The Second Artist']
</snippet></ROW><ROW><id>699218</id><snippet>import os.path
import qllib  # this is the module that comes with QLCLI

def update_tags(mp3_fn, flac_fn):
    mp3 = qllib.AudioFile(mp3_fn)
    flac = qllib.AudioFile(flac_fn)
    # you can iterate over the tag names
    # they will be the same for all file types
    for tag_name in mp3:
        flac[tag_name] = mp3[tag_name]
    flac.write()

mp3_filenames = ['foo.mp3', 'bar.mp3', 'baz.mp3']

for mp3_fn in mp3_filenames:
    flac_fn = os.path.splitext(mp3_fn)[0] + '.flac'
    if os.path.getmtime(mp3_fn) != os.path.getmtime(flac_fn):
        update_tags(mp3_fn, flac_fn)
</snippet></ROW><ROW><id>699251</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; params = urllib.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
&gt;&gt;&gt; f = urllib.urlopen("http://www.musi-cal.com/cgi-bin/query", params)
&gt;&gt;&gt; print f.read()
</snippet></ROW><ROW><id>699365</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; s = subprocess.Popen(['cowsay', 'hello'], \
      stderr=subprocess.STDOUT, stdout=subprocess.PIPE).communicate()[0]
&gt;&gt;&gt; print s
 _______ 
&lt; hello &gt;
 ------- 
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
</snippet></ROW><ROW><id>699446</id><snippet>$ python -c 'import sys; print sys.stdin.isatty()'
True
$ echo | python -c 'import sys; print sys.stdin.isatty()'
False
</snippet></ROW><ROW><id>699472</id><snippet>flat=True</snippet></ROW><ROW><id>699472</id><snippet>&gt;&gt;&gt; Entry.objects.values_list('id', flat=True).order_by('id')
[1, 2, 3, ...]
</snippet></ROW><ROW><id>699483</id><snippet>from BeautifulSoup import BeautifulSoup

VALID_TAGS = ['strong', 'em', 'p', 'ul', 'li', 'br']

def sanitize_html(value):

    soup = BeautifulSoup(value)

    for tag in soup.findAll(True):
        if tag.name not in VALID_TAGS:
            tag.hidden = True

    return soup.renderContents()
</snippet></ROW><ROW><id>699483</id><snippet>tag.extract()</snippet></ROW><ROW><id>699483</id><snippet>tag.hidden</snippet></ROW><ROW><id>699527</id><snippet>__getattr__</snippet></ROW><ROW><id>699527</id><snippet>class CustomVal(object):
    def __init__(self, value):
        self.value = value

    def __getattr__(self, attr):
        return getattr(self.value, attr)
</snippet></ROW><ROW><id>699527</id><snippet>&gt;&gt;&gt; obj = CustomVal(wrapped_obj)
&gt;&gt;&gt; obj.SomeAttributeOfWrappedObj
</snippet></ROW><ROW><id>699527</id><snippet>__setattr__</snippet></ROW><ROW><id>699527</id><snippet>__delattr__</snippet></ROW><ROW><id>699549</id><snippet>method</snippet></ROW><ROW><id>699549</id><snippet>method(child, *args, **kwargs)
</snippet></ROW><ROW><id>699549</id><snippet>map_children(method)(child, *args, **kwargs)
</snippet></ROW><ROW><id>699631</id><snippet>datetime.combine</snippet></ROW><ROW><id>699631</id><snippet>datetime.time</snippet></ROW><ROW><id>699631</id><snippet>datetime.time</snippet></ROW><ROW><id>699631</id><snippet>datetime.strptime</snippet></ROW><ROW><id>699631</id><snippet>t = datetime.strptime(self.start, "%H:%M:%S").time()
start = datetime.combine(self.job_record.date, t)
</snippet></ROW><ROW><id>699637</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; path = "F:/dir/"
&gt;&gt;&gt;
&gt;&gt;&gt; clean_path = os.path.normpath(path)
&gt;&gt;&gt; clean_path
'F:\\dir'
&gt;&gt;&gt; drive, directory = os.path.splitdrive(clean_path)
&gt;&gt;&gt; drive
'F:'
&gt;&gt;&gt; directory
'\\dir'
</snippet></ROW><ROW><id>699891</id><snippet>&gt;&gt;&gt; "{0:b}".format(10)
'1010'
</snippet></ROW><ROW><id>700032</id><snippet>&gt;&gt;&gt; "%10d" % 5
'         5'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>700032</id><snippet>*</snippet></ROW><ROW><id>700032</id><snippet>&gt;&gt;&gt; "%*d" % (10,5)
'         5'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>700876</id><snippet>&lt;Location&gt;</snippet></ROW><ROW><id>700876</id><snippet>&lt;Directory&gt;</snippet></ROW><ROW><id>700876</id><snippet>&lt;Directory /usr/www/myhost/private&gt;
    # other config ere
    # mod_authn_dbd SQL query to authenticate a user
    AuthDBDUserPWQuery \
         "SELECT password FROM authn WHERE user = %s"
 &lt;/Directory&gt;
</snippet></ROW><ROW><id>701430</id><snippet>import os, random
random.choice(os.listdir("C:\\")) #change dir name to whatever
</snippet></ROW><ROW><id>701430</id><snippet>dircache</snippet></ROW><ROW><id>701430</id><snippet>dircache</snippet></ROW><ROW><id>701542</id><snippet>def call_attrs(obj, attrs_list, *args):
    for attr in attrs_list:
        if hasattr(obj, attr):
            bound_method = getattr(obj, attr)
            return bound_method(*args)

    raise AttributeError
</snippet></ROW><ROW><id>701542</id><snippet>call_attrs(a, ['method1', 'method2', 'method3'])
</snippet></ROW><ROW><id>701542</id><snippet>call_attrs(a, ['method1', 'method2', 'method3'], arg1, arg2)
</snippet></ROW><ROW><id>701722</id><snippet>from BeautifulSoup import BeautifulStoneSoup
import cgi

def HTMLEntitiesToUnicode(text):
    """Converts HTML entities to unicode.  For example '&amp;' becomes '&amp;'."""
    text = unicode(BeautifulStoneSoup(text, convertEntities=BeautifulStoneSoup.ALL_ENTITIES))
    return text

def unicodeToHTMLEntities(text):
    """Converts unicode to HTML entities.  For example '&amp;' becomes '&amp;'."""
    text = cgi.escape(text).encode('ascii', 'xmlcharrefreplace')
    return text

text = "&amp;, ®, &lt;, &gt;, ¢, £, ¥, &amp;euro;, §, ©"

uni = HTMLEntitiesToUnicode(text)
htmlent = unicodeToHTMLEntities(uni)

print uni
print htmlent
# &amp;, ®, &lt;, &gt;, ¢, £, ¥, €, §, ©
# &amp;, ®, &lt;, &gt;, ¢, £, ¥, €, §, ©
</snippet></ROW><ROW><id>701810</id><snippet>import sys
import StringIO

# create file-like string to capture output
codeOut = StringIO.StringIO()
codeErr = StringIO.StringIO()

code = """
def f(x):
    x = x + 1
    return x

print 'This is my output.'
"""

# capture output and errors
sys.stdout = codeOut
sys.stderr = codeErr

exec code

# restore stdout and stderr
sys.stdout = sys.__stdout__
sys.stderr = sys.__stderr__

print f(4)

s = codeErr.getvalue()

print "error:\n%s\n" % s

s = codeOut.getvalue()

print "output:\n%s" % s

codeOut.close()
codeErr.close()
</snippet></ROW><ROW><id>701889</id><snippet>file.readlines()</snippet></ROW><ROW><id>701889</id><snippet>for x in range(10): print x
</snippet></ROW><ROW><id>701889</id><snippet>x = range(20)
</snippet></ROW><ROW><id>701889</id><snippet>x = list(range(20))
</snippet></ROW><ROW><id>702398</id><snippet>ResultProxy</snippet></ROW><ROW><id>702398</id><snippet>rowcount</snippet></ROW><ROW><id>702630</id><snippet>save()</snippet></ROW><ROW><id>702807</id><snippet>doc = 'a b c d e f'
words = doc.split(None)
max = 3          


for index in xrange(len(words)):    
    for n in xrange(max):
        if index + n &lt; len(words):           
            print ' '.join(words[index:index+n+1])
</snippet></ROW><ROW><id>702807</id><snippet>def find_terms(words, max_words_per_term):       
    if len(words) == 0: return []
    return [" ".join(words[:i+1]) for i in xrange(min(len(words), max_words_per_term))] + find_terms(words[1:], max_words_per_term)


doc = 'a b c d e f'
words = doc.split(None) 
for term in find_terms(words, 3):
    print term
</snippet></ROW><ROW><id>702807</id><snippet>def find_terms(words, max_words_per_term):   

    # If there are no words, you've reached the end. Stop.    
    if len(words) == 0:
        return []      

    # What's the max term length you could generate from the remaining 
    # words? It's the lesser of max_words_per_term and how many words 
    # you have left.                                                         
    max_term_len = min(len(words), max_words_per_term)       

    # Find all the terms that start with the first word.
    initial_terms = [" ".join(words[:i+1]) for i in xrange(max_term_len)]

    # Here's the recursion. Find all of the terms in the list 
    # of all but the first word.
    other_terms = find_terms(words[1:], max_words_per_term)

    # Now put the two lists of terms together to get the answer.
    return initial_terms + other_terms
</snippet></ROW><ROW><id>702888</id><snippet>os.system()</snippet></ROW><ROW><id>702888</id><snippet>subprocess</snippet></ROW><ROW><id>702903</id><snippet>class Materials:
    Shaded, Shiny, Transparent, Matte = range(4)

&gt;&gt;&gt; print Materials.Matte
3
</snippet></ROW><ROW><id>703002</id><snippet>urllib.quote</snippet></ROW><ROW><id>703280</id><snippet>if hasattr(sys, 'frozen'): # this means we're installed using py2exe/pyinstaller
    INSTDIR = os.path.dirname(sys.executable)
else:
    ...
</snippet></ROW><ROW><id>703479</id><snippet>message_parts</snippet></ROW><ROW><id>703479</id><snippet>fetch()</snippet></ROW><ROW><id>703479</id><snippet>import imaplib
from email.parser import HeaderParser

conn = imaplib.IMAP4('my.host.com')
conn.login('my@username.com', 'mypassword')
conn.select()
conn.search(None, 'ALL') # returns a nice list of messages...
                         # let's say I pick #1 from this

data = conn.fetch(1, '(BODY[HEADER])')

# gloss over data structure of return... I assume you know these
# gives something like:
# ('OK', [(1 (BODY[HEADER] {1662', 'Received: etc....')])
header_data = data[1][0][1]

parser = HeaderParser()
msg = parser.parsestr(header_data)
&lt;email.message.Message instance at 0x2a&gt;

print msg.keys()
['Received', 'Received', 'Received', 'Cc', 'Message-Id', 'From', 'To',
'In-Reply-To', 'Content-Type', 'Content-Transfer-Encoding', 'Mime-Version',
'Subject', 'Date', 'References', 'X-Mailer', 
'X-yoursite-MailScanner-Information',
'X-yoursite-MailScanner', 'X-yoursite-MailScanner-From', 'Return-Path',
'X-OriginalArrivalTime']
</snippet></ROW><ROW><id>703479</id><snippet>fetch</snippet></ROW><ROW><id>703534</id><snippet>odd_integers_up_to_length(el).next()</snippet></ROW><ROW><id>703534</id><snippet>&gt;&gt;&gt; odd_integers_up_to_length('a').next()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</snippet></ROW><ROW><id>703912</id><snippet>datetime</snippet></ROW><ROW><id>703912</id><snippet>date</snippet></ROW><ROW><id>703912</id><snippet>start_date = datetime.datetime.now() + datetime.timedelta(-30)
</snippet></ROW><ROW><id>703912</id><snippet>date</snippet></ROW><ROW><id>703912</id><snippet>time</snippet></ROW><ROW><id>703912</id><snippet>datetime</snippet></ROW><ROW><id>704160</id><snippet>chr()</snippet></ROW><ROW><id>704160</id><snippet>ord()</snippet></ROW><ROW><id>704160</id><snippet>&gt;&gt;&gt; chr(97)
'a'
&gt;&gt;&gt; ord('a')
97
</snippet></ROW><ROW><id>704273</id><snippet>while true ; do
    run_proc &amp;
    PID=$!
    sleep 3600
    kill $PID
    sleep 30
done
</snippet></ROW><ROW><id>704273</id><snippet>$!</snippet></ROW><ROW><id>704273</id><snippet>sleep</snippet></ROW><ROW><id>704273</id><snippet>kill</snippet></ROW><ROW><id>704273</id><snippet>while</snippet></ROW><ROW><id>704576</id><snippet># do this once, outside the loop
alphabet=set(string.ascii_lowercase)
# inside the loop, just 1 line:
missingletter=(alphabet-set(yourlist)).pop()
</snippet></ROW><ROW><id>704576</id><snippet>frompos, topos = 0, len(str)
for i in range(1,100):  #never say forever with bisection...
    trypos = (frompos+topos+1)/2
    print "try:",frompos,trypos,topos
    if alphabet[trypos] != str[trypos]:
        topos = trypos
    else:
        frompos = trypos
    if topos-frompos==1:
        if alphabet[topos] != str[topos]:
            print alphabet[frompos]
        else:
            print alphabet[topos]
        break
</snippet></ROW><ROW><id>704576</id><snippet>if</snippet></ROW><ROW><id>704576</id><snippet>set</snippet></ROW><ROW><id>704797</id><snippet>function! s:transpose()
    let maxcol = 0
    let lines = getline(1, line('$'))

    for line in lines
        let len = len(line)
        if len &gt; maxcol 
            let maxcol = len
        endif
    endfor

    let newlines = []
    for col in range(0, maxcol - 1)
        let newline = ''
        for line in lines
            let line_with_extra_spaces = printf('%-'.maxcol.'s', line)
            let newline .= line_with_extra_spaces[col]
        endfor
        call add(newlines, newline)
    endfor

    1,$"_d
    call setline(1, newlines)
endfunction

command! TransposeBuffer call s:transpose()
</snippet></ROW><ROW><id>704797</id><snippet>:TransposeBuffer</snippet></ROW><ROW><id>704874</id><snippet>def my_func():
    # do useful stuff
    pass
</snippet></ROW><ROW><id>704874</id><snippet>import eg2
while True:
    eg2.my_func()
</snippet></ROW><ROW><id>704952</id><snippet>buffer_size = 720 * 288 * ctypes.sizeof(ctypes.c_float)
rgb_buffer = ctypes.create_string_buffer(buffer_size) 
ctypes.memmove(rgb_buffer, getRgbBuffer(), buffer_size)
</snippet></ROW><ROW><id>704952</id><snippet>ctypes.memmove()</snippet></ROW><ROW><id>704952</id><snippet>memmove(dst, src, count)</snippet></ROW><ROW><id>704952</id><snippet>count</snippet></ROW><ROW><id>704952</id><snippet>src</snippet></ROW><ROW><id>704952</id><snippet>dst</snippet></ROW><ROW><id>704952</id><snippet>dst</snippet></ROW><ROW><id>704952</id><snippet>src</snippet></ROW><ROW><id>704952</id><snippet>rgb_buffer.value</snippet></ROW><ROW><id>704952</id><snippet>'\0'</snippet></ROW><ROW><id>704952</id><snippet>buffer_contents = rgb_buffer[:]</snippet></ROW><ROW><id>705088</id><snippet>import os
import stat
import sys

MODE = "775"

def mode_matches(mode, file):
    """Return True if 'file' matches 'mode'.

    'mode' should be an integer representing an octal mode (eg
    int("755", 8) -&gt; 493).
    """
    # Extract the permissions bits from the file's (or
    # directory's) stat info.
    filemode = stat.S_IMODE(os.stat(file).st_mode)

    return filemode == mode

try:
    top = sys.argv[1]
except IndexError:
    top = '.'

try:
    mode = int(sys.argv[2], 8)
except IndexError:
    mode = MODE

# Convert mode to octal.
mode = int(mode, 8)

for dirpath, dirnames, filenames in os.walk(top):
    dirs = [os.path.join(dirpath, x) for x in dirnames]
    for dirname in dirs:
        if mode_matches(mode, dirname):
            print dirname
</snippet></ROW><ROW><id>705447</id><snippet>&gt;&gt;&gt; ord("£")
156
</snippet></ROW><ROW><id>705848</id><snippet>state = 1
for sLine in oFile:
   if state == 1:
      if ... some logic ... :
         state = 2
   elif state == 2:
      if ... some logic ... :
         state = 1
</snippet></ROW><ROW><id>706353</id><snippet>try:
    import simplejson as json
except ImportError:
    import json
</snippet></ROW><ROW><id>706506</id><snippet>xmldoc = minidom.parse('your.xml')
matchingNodes = [node for node in xmldoc.getElementsByTagName("id") if node.nodeValue == '345754']
</snippet></ROW><ROW><id>706531</id><snippet>soup.findAll(lambda tag: tag.name == 'a' and \
tag.findParent('strong', 'sans') and \
tag.findParent('strong', 'sans').findParent('td', attrs={'width':'50%'}))
</snippet></ROW><ROW><id>706531</id><snippet>findParent('strong', 'sans')</snippet></ROW><ROW><id>706531</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>706531</id><snippet>strong</snippet></ROW><ROW><id>706601</id><snippet>import a_ridiculously_long_module_name as short_name
</snippet></ROW><ROW><id>706601</id><snippet>import module.submodule.subsubmodule as short_name
</snippet></ROW><ROW><id>706735</id><snippet>call</snippet></ROW><ROW><id>706735</id><snippet>__call__</snippet></ROW><ROW><id>706735</id><snippet>def method1():
    return 'hello world'

def method2(methodToRun):
    result = methodToRun()
    return result

method2(method1)
</snippet></ROW><ROW><id>706770</id><snippet>newID = db.insert_id()
</snippet></ROW><ROW><id>706770</id><snippet>conn = MySQLdb(host...)

c = conn.cursor()
c.execute("INSERT INTO...")
newID = c.lastrowid
</snippet></ROW><ROW><id>706876</id><snippet>def method1(name):
    def wrapper():
        return 'Hello ' + name
    return wrapper

def method2(method, question):
    output = method()
    return output + ', ' + question

method2(method1(name = 'Sam'), 'How are you?')
</snippet></ROW><ROW><id>706876</id><snippet>def method1(name):
    def wrapper(greeting):
        return greeting + name
    return wrapper

def method2(method, question):
    output = method(greeting = 'Hello ')
    return output + ', ' + question

method2(method1(name = 'Sam'), 'How are you?')
</snippet></ROW><ROW><id>706986</id><snippet>from django.core.cache import cache
key = 'some-key'
data = cache.get(key)
if data is None:
    # soupify the page and what not
    cache.set(data, key, 60*60*8)
    return render_to_response ...
return render_to_response
</snippet></ROW><ROW><id>707001</id><snippet>import os
from subprocess import Popen, PIPE

process = Popen(["ls", "-la", "."], stdout=PIPE)
(output, err) = process.communicate()
exit_code = process.wait()
</snippet></ROW><ROW><id>707034</id><snippet>unless (caller) {
  print "This is the script being executed\n";
}
</snippet></ROW><ROW><id>707034</id><snippet>undef</snippet></ROW><ROW><id>707048</id><snippet>python manage.py runserver 192.168.x.x:8000
</snippet></ROW><ROW><id>707048</id><snippet>python manage.py runserver 0.0.0.0:8000
</snippet></ROW><ROW><id>707166</id><snippet>/bin/sh</snippet></ROW><ROW><id>707166</id><snippet>#!/bin/sh
</snippet></ROW><ROW><id>707166</id><snippet>/usr/bin/env</snippet></ROW><ROW><id>707166</id><snippet>$PATH</snippet></ROW><ROW><id>707166</id><snippet>which python</snippet></ROW><ROW><id>707166</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>707166</id><snippet>$ python script.py
</snippet></ROW><ROW><id>707166</id><snippet>chmod +x script.py</snippet></ROW><ROW><id>707166</id><snippet>$ ./script.py
</snippet></ROW><ROW><id>707166</id><snippet>cp yourCmd.py /usr/local/bin/yourCmd
chmod a+rx /usr/local/bin/yourCmd
</snippet></ROW><ROW><id>707166</id><snippet>yourCmd
</snippet></ROW><ROW><id>707274</id><snippet>setup.py</snippet></ROW><ROW><id>707274</id><snippet>distutils.core.setup(
      windows=[
            {'script': 'yourmodule.py',
             'icon_resources': [(1, 'moduleicon.ico')]
            }
      ],
      zipfile=None,
      options={'py2exe':{
                         'includes': ['tkinter'],
                         'bundle_files': 1
                        }
      }
  )
</snippet></ROW><ROW><id>707389</id><snippet>bar</snippet></ROW><ROW><id>707389</id><snippet>self.bar</snippet></ROW><ROW><id>707389</id><snippet>Foo.bar</snippet></ROW><ROW><id>707389</id><snippet>Foo.bar</snippet></ROW><ROW><id>707389</id><snippet>self.bar</snippet></ROW><ROW><id>707685</id><snippet>isinstance()
</snippet></ROW><ROW><id>707685</id><snippet>isinstance("this is a string", str)</snippet></ROW><ROW><id>707685</id><snippet>True</snippet></ROW><ROW><id>708537</id><snippet>&amp;</snippet></ROW><ROW><id>708537</id><snippet>&amp;lt
</snippet></ROW><ROW><id>708537</id><snippet>&amp;lt
</snippet></ROW><ROW><id>709132</id><snippet>'iterator' if obj is iter(obj) else 'iterable'
</snippet></ROW><ROW><id>709389</id><snippet>sys.stdout</snippet></ROW><ROW><id>709389</id><snippet>write</snippet></ROW><ROW><id>709389</id><snippet>class DevNull(object):
    def write(self, arg):
        pass

import sys    
sys.stdout = DevNull()
print "this goes to nirvana!"
</snippet></ROW><ROW><id>709389</id><snippet>sys.stdout</snippet></ROW><ROW><id>709442</id><snippet>size = min(image.Size)

originX = image.Size[0] / 2 - size / 2
originY = image.Size[1] / 2 - size / 2

cropBox = (originX, originY, originX + size, originY + size)
</snippet></ROW><ROW><id>709992</id><snippet>samples/contacts/contacts_example.py</snippet></ROW><ROW><id>710146</id><snippet>{% for field in form %}
    {% ifnotequal field.label title %}
        {{ field }}
    {% endifnotequal %}
{% endfor %}
</snippet></ROW><ROW><id>710146</id><snippet>ifequal</snippet></ROW><ROW><id>710146</id><snippet>ifnotequal</snippet></ROW><ROW><id>710274</id><snippet>ak.sort(key=lambda x:x[0].lower())
</snippet></ROW><ROW><id>710274</id><snippet>cmp</snippet></ROW><ROW><id>710274</id><snippet>cmp</snippet></ROW><ROW><id>710274</id><snippet>lower</snippet></ROW><ROW><id>710274</id><snippet>cmp(x[0].lower(), y[0].lower())</snippet></ROW><ROW><id>710274</id><snippet>cmp(x[0].lower, y[0].lower)</snippet></ROW><ROW><id>710305</id><snippet>import win32com.client
object = win32com.client.Dispatch("Outlook.Application")
</snippet></ROW><ROW><id>710500</id><snippet>SimpleCookie</snippet></ROW><ROW><id>710500</id><snippet>BaseCookie.output()</snippet></ROW><ROW><id>710500</id><snippet>print cookie
</snippet></ROW><ROW><id>710500</id><snippet>BaseCookie.output()</snippet></ROW><ROW><id>710500</id><snippet>output()</snippet></ROW><ROW><id>710500</id><snippet>&gt;&gt;&gt; c1=Cookie.SimpleCookie()
&gt;&gt;&gt; c1['name']='A:0'
&gt;&gt;&gt; print c1
Set-Cookie: name="A:0"
&gt;&gt;&gt; c1['name']=r'"A:0"'
&gt;&gt;&gt; print c1
Set-Cookie: name="\"A:0\""
&gt;&gt;&gt; c1['name']=r'"\"A:0\""'
&gt;&gt;&gt; print c1
Set-Cookie: name="\"\\\"A:0\\\"\""
&gt;&gt;&gt;
</snippet></ROW><ROW><id>710603</id><snippet>import module</snippet></ROW><ROW><id>710603</id><snippet>from module import foo</snippet></ROW><ROW><id>710603</id><snippet>import module</snippet></ROW><ROW><id>710603</id><snippet>import</snippet></ROW><ROW><id>710603</id><snippet>module.foo</snippet></ROW><ROW><id>710603</id><snippet>import module as mo</snippet></ROW><ROW><id>710603</id><snippet>mo.foo</snippet></ROW><ROW><id>710603</id><snippet>from module import foo</snippet></ROW><ROW><id>710603</id><snippet>foo</snippet></ROW><ROW><id>710603</id><snippet>import</snippet></ROW><ROW><id>710603</id><snippet>foo</snippet></ROW><ROW><id>710603</id><snippet>ceil()</snippet></ROW><ROW><id>710603</id><snippet>math.ceil()</snippet></ROW><ROW><id>710603</id><snippet>from module import *</snippet></ROW><ROW><id>710603</id><snippet>import *</snippet></ROW><ROW><id>710603</id><snippet>import</snippet></ROW><ROW><id>711380</id><snippet>import</snippet></ROW><ROW><id>711380</id><snippet>folder_on_path/
    com/
        __init__.py
        domain1/
            module.py
            __init__.py


other_folder_on_path/
    com/
        __init__.py
        domain2/
            module.py
            __init__.py
</snippet></ROW><ROW><id>711380</id><snippet>from com.domain1 import module
from com.domain2 import module
</snippet></ROW><ROW><id>711380</id><snippet>folder_on_path</snippet></ROW><ROW><id>711380</id><snippet>other_folder_on_path</snippet></ROW><ROW><id>711380</id><snippet>from com.</snippet></ROW><ROW><id>711380</id><snippet>com</snippet></ROW><ROW><id>711380</id><snippet>domain1</snippet></ROW><ROW><id>711380</id><snippet>import</snippet></ROW><ROW><id>711380</id><snippet>ImportError</snippet></ROW><ROW><id>711380</id><snippet>import</snippet></ROW><ROW><id>711380</id><snippet>com</snippet></ROW><ROW><id>711380</id><snippet>com</snippet></ROW><ROW><id>711380</id><snippet>from com import domain1
from com.domain1 import module
from com.domain1.module import variable
</snippet></ROW><ROW><id>711380</id><snippet>com</snippet></ROW><ROW><id>711380</id><snippet>com</snippet></ROW><ROW><id>711380</id><snippet>variable</snippet></ROW><ROW><id>711380</id><snippet>import</snippet></ROW><ROW><id>711380</id><snippet>com</snippet></ROW><ROW><id>711380</id><snippet>domain</snippet></ROW><ROW><id>711405</id><snippet>replaceWith</snippet></ROW><ROW><id>711405</id><snippet>make.contents[0].replaceWith('Top of the world Ma!')
</snippet></ROW><ROW><id>712033</id><snippet>--keyword=_pl:1,2</snippet></ROW><ROW><id>712252</id><snippet>for key in dict:
    if check_condition(dict[key]):
       del dict[key]
</snippet></ROW><ROW><id>712252</id><snippet>for key in list(dict.keys()):
    if key in dict and check_condition(dict[key]):
        del dict[key]
</snippet></ROW><ROW><id>712252</id><snippet>list(dict.keys())</snippet></ROW><ROW><id>712483</id><snippet>#! /usr/local/bin/python
import sys
import os

# return a set of selected values when a string in the form:
# 1-4,6
# would return:
# 1,2,3,4,6
# as expected...

def parseIntSet(nputstr=""):
    selection = set()
    invalid = set()
    # tokens are comma seperated values
    tokens = [x.strip() for x in nputstr.split(',')]
    for i in tokens:
        if len(i) &gt; 0:
            if i[:1] == "&lt;":
                i = "1-%s"%(i[1:])
        try:
            # typically tokens are plain old integers
            selection.add(int(i))
        except:
            # if not, then it might be a range
            try:
                token = [int(k.strip()) for k in i.split('-')]
                if len(token) &gt; 1:
                    token.sort()
                    # we have items seperated by a dash
                    # try to build a valid range
                    first = token[0]
                    last = token[len(token)-1]
                    for x in range(first, last+1):
                        selection.add(x)
            except:
                # not an int and not a range...
                invalid.add(i)
    # Report invalid tokens before returning valid selection
    if len(invalid) &gt; 0:
        print "Invalid set: " + str(invalid)
    return selection
# end parseIntSet

print 'Generate a list of selected items!'
nputstr = raw_input('Enter a list of items: ')

selection = parseIntSet(nputstr)
print 'Your selection is: '
print str(selection)
</snippet></ROW><ROW><id>712483</id><snippet>$ python qq.py
Generate a list of selected items!
Enter a list of items: &lt;3, 45, 46, 48-51, 77
Your selection is:
set([1, 2, 3, 45, 46, 77, 48, 49, 50, 51])
</snippet></ROW><ROW><id>712799</id><snippet>json</snippet></ROW><ROW><id>712799</id><snippet>simplejson</snippet></ROW><ROW><id>712799</id><snippet>json</snippet></ROW><ROW><id>712799</id><snippet>simplejson</snippet></ROW><ROW><id>712799</id><snippet>simplejson</snippet></ROW><ROW><id>712799</id><snippet>simplejson</snippet></ROW><ROW><id>712799</id><snippet>try: import simplejson as json
except ImportError: import json
</snippet></ROW><ROW><id>713022</id><snippet>import matplotlib.pyplot as plt
import matplotlib.font_manager as fm

fontsize2use = 10

fig = plt.figure(figsize=(10,5))
plt.xticks(fontsize=fontsize2use)  
plt.yticks(fontsize=fontsize2use)    
fontprop = fm.FontProperties(size=fontsize2use)
ax = fig.add_subplot(111)
ax.set_xlabel('XaxisLabel')
ax.set_ylabel('YaxisLabel')
.
&lt;main plotting code&gt;
.
ax.legend(loc=0, prop=fontprop)
</snippet></ROW><ROW><id>713143</id><snippet>help(my_func)
</snippet></ROW><ROW><id>713143</id><snippet>my_func.__doc__
</snippet></ROW><ROW><id>713814</id><snippet>from __future__ import with_statement

try:
    with open( "a.txt" ) as f :
        print f.readlines()
except EnvironmentError: # parent of IOError, OSError *and* WindowsError where available
    print 'oops'
</snippet></ROW><ROW><id>713814</id><snippet>try:
    f = open('foo.txt')
except IOError:
    print('error')
else:
    with f:
        print f.readlines()
</snippet></ROW><ROW><id>713932</id><snippet>bool</snippet></ROW><ROW><id>713932</id><snippet>Boolean</snippet></ROW><ROW><id>713932</id><snippet>ArrayList</snippet></ROW><ROW><id>713932</id><snippet>bool</snippet></ROW><ROW><id>713932</id><snippet>True</snippet></ROW><ROW><id>713932</id><snippet>Boolean</snippet></ROW><ROW><id>713932</id><snippet>&gt;&gt;&gt; from java.lang import Boolean
&gt;&gt;&gt; b = Boolean('True')
&gt;&gt;&gt; b      
true
&gt;&gt;&gt; from java.util import ArrayList
&gt;&gt;&gt; l = ArrayList()
&gt;&gt;&gt; l.add(b)
True
&gt;&gt;&gt; l
[true]
&gt;&gt;&gt; l.add(True)
True
&gt;&gt;&gt; l
[true, true]
&gt;&gt;&gt; list(l) 
[True, True]
</snippet></ROW><ROW><id>713932</id><snippet>Boolean</snippet></ROW><ROW><id>713932</id><snippet>bool</snippet></ROW><ROW><id>713932</id><snippet>Boolean.TRUE</snippet></ROW><ROW><id>713932</id><snippet>True</snippet></ROW><ROW><id>714070</id><snippet>import ptdraft.nib</snippet></ROW><ROW><id>714070</id><snippet>ptdraft</snippet></ROW><ROW><id>714070</id><snippet>import nib</snippet></ROW><ROW><id>714070</id><snippet>ptdraft</snippet></ROW><ROW><id>714397</id><snippet>p = subprocess.Popen( args=["script.sh", "-p", p_opt, "-v", v_opt, arg1, arg2] )
</snippet></ROW><ROW><id>714397</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>714518</id><snippet>&gt;&gt;&gt; fstr = 'def f(%s): pass'%(', '.join(['arg%d'%i for i in range(5000)]))
&gt;&gt;&gt; exec(fstr)
&gt;&gt;&gt; f
&lt;function f at 0x829bae4&gt;
</snippet></ROW><ROW><id>714518</id><snippet>&gt;&gt;&gt; exec 'f(' + ','.join(str(i) for i in range(5000)) + ')'

Traceback (most recent call last):
  File "&lt;pyshell#63&gt;", line 1, in &lt;module&gt;
    exec 'f(' + ','.join(str(i) for i in range(5000)) + ')'
  File "&lt;string&gt;", line 1
SyntaxError: more than 255 arguments (&lt;string&gt;, line 1)
</snippet></ROW><ROW><id>714518</id><snippet>&gt;&gt;&gt; f(*range(5000))
&gt;&gt;&gt;
</snippet></ROW><ROW><id>714735</id><snippet>ctypes.c_char_Array_829400</snippet></ROW><ROW><id>714735</id><snippet>.raw</snippet></ROW><ROW><id>714735</id><snippet>.value</snippet></ROW><ROW><id>714735</id><snippet>self.rgb_buffer_ptr</snippet></ROW><ROW><id>714735</id><snippet>ctypes.string_at(self.rgb_buffer_ptr, self.buffer_size)</snippet></ROW><ROW><id>714890</id><snippet>import Math
</snippet></ROW><ROW><id>714890</id><snippet>Calculate</snippet></ROW><ROW><id>714890</id><snippet>from Math import Calculate
</snippet></ROW><ROW><id>714890</id><snippet>from Math import *
</snippet></ROW><ROW><id>715282</id><snippet>import fileinput
for line in fileinput.input():
    process(line)
</snippet></ROW><ROW><id>715314</id><snippet>class ObservableDict( dict ):
    def __init__( self, *args, **kw ):
        self.observers= []
        super( ObservableDict, self ).__init__( *args, **kw )
    def observe( self, observer ):
        self.observers.append( observer )
    def __setitem__( self, key, value ):
        for o in self.observers:
            o.notify( self, key, self[key], value )
        super( ObservableDict, self ).__setitem__( key, value )
    def update( self, anotherDict ):
        for k in anotherDict:
            self[k]= anotherDict[k]

class Watcher( object ):
    def notify( self, observable, key, old, new ):
        print "Change to ", observable, "at", key

w= Watcher()
a= ObservableDict( {'a':'hamburger', 'b':'fries', 'c':'coke'} )
a.observe( w )
b = {'b':'fries', 'c':'pepsi'}
a.update( b )
</snippet></ROW><ROW><id>715455</id><snippet>s == 'True'
</snippet></ROW><ROW><id>715455</id><snippet>s in ['true', '1', 't', 'y', 'yes', 'yeah', 'yup', 'certainly', 'uh-huh']
</snippet></ROW><ROW><id>715455</id><snippet>&gt;&gt;&gt; bool("foo")
True
&gt;&gt;&gt; bool("")
False
</snippet></ROW><ROW><id>715455</id><snippet>False</snippet></ROW><ROW><id>715455</id><snippet>True</snippet></ROW><ROW><id>715601</id><snippet>{"[1,2]": [(2,3),(1,7)]}
</snippet></ROW><ROW><id>715601</id><snippet>var myjson = $.evalJSON('{"[1,2]": [[2,3],[1,7]]}');
$.each(myjson, function(keystr,val){
    var key = $.evalJSON(keystr);
    // do something with key and val
});
</snippet></ROW><ROW><id>715601</id><snippet>{1: {2: [(2,3),(1,7)]}}
</snippet></ROW><ROW><id>715601</id><snippet>myjson[1,2] // doesn't work
</snippet></ROW><ROW><id>715601</id><snippet>myjson[1][2] // returns [[2,3],[1,7]]
</snippet></ROW><ROW><id>715610</id><snippet>import urllib, urllib2
import time
import sys

query = ' '.join(sys.argv)   

# encode params as a list of 2-tuples
params = ( ('from','ACC'), ('to', 'P_REFSEQ_AC'), ('format','tab'), ('query', query))
# url encode them
data = urllib.urlencode(params)    
url = 'http://www.uniprot.org/mapping/'

# fetch the data
try:
    foo = urllib2.urlopen(url, data)
except urllib2.HttpError, e:
    if e.code == 503:
        # blah blah get the value of the header...
        wait_time = int(e.hdrs.get('Retry-after', 0))
        print 'Sleeping %i seconds...' % (wait_time,)
        time.sleep(wait_time)
        foo = urllib2.urlopen(url, data)


# foo is a file-like object, do with it what you will.
foo.read()
</snippet></ROW><ROW><id>715859</id><snippet>outputString.replace("&lt;","&lt;")</snippet></ROW><ROW><id>716031</id><snippet>&lt;a href="/comment/5/"&gt;Comment on me&lt;/a&gt;
</snippet></ROW><ROW><id>716031</id><snippet>initial</snippet></ROW><ROW><id>716031</id><snippet>def show_comment_form(request, item_id):
    form = MyCommentForm(initial={'item_drop_down':item_id})
</snippet></ROW><ROW><id>716031</id><snippet>item_id</snippet></ROW><ROW><id>716031</id><snippet>choices = ( (1, 'Item 1'),
            (2, 'Item 2') )
</snippet></ROW><ROW><id>716031</id><snippet>item_id</snippet></ROW><ROW><id>716031</id><snippet>&lt;select&gt;</snippet></ROW><ROW><id>716031</id><snippet>&lt;option value="1"&gt;Item 1&lt;/option&gt;</snippet></ROW><ROW><id>716046</id><snippet>export VAR="foo"
</snippet></ROW><ROW><id>716046</id><snippet>cat .data
</snippet></ROW><ROW><id>716046</id><snippet>export DATA=`cat .data`
</snippet></ROW><ROW><id>716046</id><snippet>alias set-data="export DATA=`cat .data`"
</snippet></ROW><ROW><id>716090</id><snippet>disable_interspersed_args()</snippet></ROW><ROW><id>716090</id><snippet>#!/usr/bin/env python
from optparse import OptionParser

parser = OptionParser()
parser.disable_interspersed_args()
parser.add_option("-v", action="store_true", dest="verbose")
(options, args) = parser.parse_args()

print "Options: %s args: %s" % (options, args)
</snippet></ROW><ROW><id>716292</id><snippet>dtype</snippet></ROW><ROW><id>716292</id><snippet>object</snippet></ROW><ROW><id>716292</id><snippet>In [1]: m = numpy.matrix([[1, 2, 3], [4, '5', 6]], dtype=numpy.object)
In [2]: m
Out[2]: 
matrix([[1, 2, 3],
        [4, 5, 6]], dtype=object)
In [3]: m[1, 1]
Out[3]: '5'
In [4]: m[1, 2]
Out[4]: 6
</snippet></ROW><ROW><id>716309</id><snippet>:</snippet></ROW><ROW><id>716309</id><snippet>if options.verbose:
  print ""
</snippet></ROW><ROW><id>716309</id><snippet>if options.verbose : print ""
</snippet></ROW><ROW><id>716309</id><snippet>if len(threadlist) &gt; 0 : 
  for server in threadlist :
    ...
</snippet></ROW><ROW><id>716309</id><snippet>for server in threadlist:
  ...
</snippet></ROW><ROW><id>716309</id><snippet>server = []
for i in grouplist : servers+=getServers(i)
</snippet></ROW><ROW><id>716309</id><snippet>server = [getServers(i) for i in grouplist]
</snippet></ROW><ROW><id>716482</id><snippet>import itertools
a = [["a","b"], ["c"]]
print list(itertools.chain(*a))
</snippet></ROW><ROW><id>716829</id><snippet>import sys
def get_caller(ext=False):
    """ Get the caller of the caller of this function. If the optional ext parameter is given, returns the line's text as well. """
    f=sys._getframe(2)
    s=(f.f_code.co_filename, f.f_lineno)
    del f
    if ext:
    	import linecache
    	s=(s[0], s[1], linecache.getline(s[0], s[1]))

    return s

def post_event(e):
    caller=get_caller(True)
    print "Event %r posted from %r"%(e, caller)

## Testing the functions.

def q():
    post_event("baz")

post_event("foo")
print "Hello!"
q()
</snippet></ROW><ROW><id>716829</id><snippet>Event 'foo' posted from ('getcaller.py', 20, 'post_event("foo")\n')
Hello!
Event 'baz' posted from ('getcaller.py', 17, '\tpost_event("baz")\n')
</snippet></ROW><ROW><id>716917</id><snippet>copyWithZone</snippet></ROW><ROW><id>716917</id><snippet>copyWithZone</snippet></ROW><ROW><id>716917</id><snippet>__copy__</snippet></ROW><ROW><id>716917</id><snippet>copyWithZone</snippet></ROW><ROW><id>716917</id><snippet>SceneView.py</snippet></ROW><ROW><id>716917</id><snippet>MainMenu.xib</snippet></ROW><ROW><id>716917</id><snippet>SceneView</snippet></ROW><ROW><id>716917</id><snippet>import SceneView</snippet></ROW><ROW><id>716917</id><snippet>main.py</snippet></ROW><ROW><id>716917</id><snippet>awakeFromNib</snippet></ROW><ROW><id>716917</id><snippet>SceneView.py</snippet></ROW><ROW><id>716917</id><snippet>self.renderer</snippet></ROW><ROW><id>716917</id><snippet>__init__</snippet></ROW><ROW><id>716917</id><snippet>initWithFrame</snippet></ROW><ROW><id>716917</id><snippet>__dict__</snippet></ROW><ROW><id>716917</id><snippet>drawRect_</snippet></ROW><ROW><id>716917</id><snippet>def awakeFromNib(self):
    print "Awake from nib"
    self.renderer = gv.CoreRenderer()
</snippet></ROW><ROW><id>717261</id><snippet>Queue.Queue</snippet></ROW><ROW><id>717261</id><snippet>collections.deque</snippet></ROW><ROW><id>717261</id><snippet>collections.deque</snippet></ROW><ROW><id>717261</id><snippet>Queue.Queue</snippet></ROW><ROW><id>717261</id><snippet>put_nowait()</snippet></ROW><ROW><id>717261</id><snippet>get_nowait()</snippet></ROW><ROW><id>717261</id><snippet>join()</snippet></ROW><ROW><id>717261</id><snippet>collections.deque</snippet></ROW><ROW><id>717261</id><snippet>Queue.Queue</snippet></ROW><ROW><id>717261</id><snippet>in</snippet></ROW><ROW><id>717261</id><snippet>Queue.Queue</snippet></ROW><ROW><id>717261</id><snippet>collections.deque</snippet></ROW><ROW><id>717261</id><snippet>Queue.Queue</snippet></ROW><ROW><id>717829</id><snippet>__init__.py</snippet></ROW><ROW><id>717829</id><snippet>cachekey = defrag_uri
cached_value = self.cache.get(cachekey)
</snippet></ROW><ROW><id>717829</id><snippet>urlnorm</snippet></ROW><ROW><id>717847</id><snippet>try: ... except: ...</snippet></ROW><ROW><id>717847</id><snippet>run</snippet></ROW><ROW><id>717847</id><snippet>try/except</snippet></ROW><ROW><id>717847</id><snippet>while</snippet></ROW><ROW><id>718062</id><snippet>// Java
Person p = new Person();
</snippet></ROW><ROW><id>718062</id><snippet># Python
p = Person()
</snippet></ROW><ROW><id>718073</id><snippet>easy_install simplejson
</snippet></ROW><ROW><id>718073</id><snippet>C:\Python25\Scripts</snippet></ROW><ROW><id>718086</id><snippet>print "platform.name="+ "Jython " + version
</snippet></ROW><ROW><id>718086</id><snippet>print("platform.name="+ "Jython " + version)
</snippet></ROW><ROW><id>718199</id><snippet>import xmlrpclib
svc = xmlrpclib.ServerProxy('http://ws.audioscrobbler.com/2.0/')
print svc.system.listMethods()
</snippet></ROW><ROW><id>718199</id><snippet>ServerProxy</snippet></ROW><ROW><id>718199</id><snippet>system.listMethods</snippet></ROW><ROW><id>718199</id><snippet>user.getTopTags</snippet></ROW><ROW><id>718199</id><snippet>print svc.user.getTopTags({'user': 'foo', 'api_key': 'bar'})
</snippet></ROW><ROW><id>718569</id><snippet>print_all</snippet></ROW><ROW><id>718569</id><snippet>#!/usr/bin/env python

import subprocess
import sys

phrase = "bar"
if len(sys.argv) &gt; 1 and sys.argv[1] == 'print_all':
    tee_args = ['tee', '/dev/tty']
else:
    tee_args = ['tee']

p1 = subprocess.Popen(["./program"], stderr=subprocess.STDOUT, stdout=subprocess.PIPE, shell=False)
p2 = subprocess.Popen(tee_args, stdin=p1.stdout, stdout=subprocess.PIPE, shell=False)
p3 = subprocess.Popen(["grep", phrase], stdin=p2.stdout, stdout=subprocess.PIPE, shell=False)
p1.wait()
p2.wait()
p3.wait()
p = str(p3.stdout.readlines())
print 'p is ', p
</snippet></ROW><ROW><id>718569</id><snippet>program</snippet></ROW><ROW><id>718569</id><snippet>#!/bin/sh

echo foo
echo bar
echo baz
</snippet></ROW><ROW><id>718584</id><snippet>def setVenueIntroText(text):
  query = db.GqlQuery("SELECT * FROM Venue")
  for result in query:
    result.intro_text = text
    db.put(result)
</snippet></ROW><ROW><id>719132</id><snippet>for</snippet></ROW><ROW><id>719132</id><snippet>forloop.counter</snippet></ROW><ROW><id>719464</id><snippet>pickle.py</snippet></ROW><ROW><id>719464</id><snippet>pickle</snippet></ROW><ROW><id>719464</id><snippet>pickle.py</snippet></ROW><ROW><id>719464</id><snippet>Pickle::Parse</snippet></ROW><ROW><id>719464</id><snippet>Python::Serialise::Pickle</snippet></ROW><ROW><id>719464</id><snippet>Pickle::Parse</snippet></ROW><ROW><id>719464</id><snippet>feeds.dat</snippet></ROW><ROW><id>719464</id><snippet>pickle.py</snippet></ROW><ROW><id>719464</id><snippet>Can't use string ("sxOYAAuyzSx0WqN3BVPjE+6pgPU") as a subroutine
ref while "strict refs" in use at lib/Pickle/Parse.pm line 489,
&lt;STDIN&gt; line 187102.
</snippet></ROW><ROW><id>719464</id><snippet>g7724
((I2009
I3
I19
I1
I19
I31
I3
I78
I0
t(dtRp62457
</snippet></ROW><ROW><id>719464</id><snippet>"sxOYAAuyzSx0WqN3BVPjE+6pgPU"</snippet></ROW><ROW><id>719464</id><snippet>time.struct_time</snippet></ROW><ROW><id>719464</id><snippet>rss2email</snippet></ROW><ROW><id>719464</id><snippet>pickle.py</snippet></ROW><ROW><id>719464</id><snippet>pickle.py</snippet></ROW><ROW><id>719475</id><snippet>&lt;div id="answer_595" class="answer"&gt;
  &lt;img src="vote_up.png" class="vote up"&gt;
  &lt;div class="score"&gt;0&lt;/div&gt;
  &lt;img src="vote_down.png" class="vote down"&gt;
  Blah blah blah this is my answer.
&lt;/div&gt;

&lt;div id="answer_596" class="answer"&gt;
  &lt;img src="vote_up.png" class="vote up"&gt;
  &lt;div class="score"&gt;0&lt;/div&gt;
  &lt;img src="vote_down.png" class="vote down"&gt;
  Blah blah blah this is my other answer.
&lt;/div&gt;
</snippet></ROW><ROW><id>719475</id><snippet>$(function() {
    $('div.answer img.vote').click(function() {
        var id = $(this).parents('div.answer').attr('id').split('_')[1];
        var vote_type = $(this).hasClass('up') ? 'up' : 'down';
        if($(this).hasClass('selected')) {
            $.post('/vote/', {id: id, type: vote_type}, function(json) {
                if(json.success == 'success') {
                    $('#answer_' + id)
                     .find('img.' + vote_type);
                     .attr('src', 'vote_' + vote_type + '_selected.png')
                     .addClass('selected');
                    $('div.score', '#answer_' + id).html(json.score);
                }
            });
        } else {
            $.post('/remove_vote/', {id: id, type: vote_type}, function(json) {
                if(json.success == 'success') {
                    $('#answer_' + id)
                     .find('img.' + vote_type);
                     .attr('src', 'vote_' + vote_type + '.png')
                     .removeClass('selected');
                    $('div.score', '#answer_' + id).html(json.score);
                }
            });                
        }
    });
});
</snippet></ROW><ROW><id>719475</id><snippet>def vote(request):
    if request.method == 'POST':
        try:
            answer = Answer.objects.get(pk=request.POST['id'])
        except Answer.DoesNotExist:
            return HttpResponse("{'success': 'false'}")

        try:
            vote = Vote.objects.get(answer=answer, user=request.user)
        except Vote.DoesNotExist:
            pass
        else:
            return HttpResponse("{'success': 'false'}")

        if request.POST['type'] == 'up':
            answer.score = answer.score + 1
        else:
            answer.score = answer.score - 1

        answer.save()

        Vote.objects.create(answer=answer,
                            user=request.user,
                            type=request.POST['type'])

        return HttpResponse("{'success':'true', 'score':" + answer.score + "}")
    else:
        raise Http404('What are you doing here?')

def remove_vote(request):
    if request.method == 'POST':
        try:
            answer = Answer.objects.get(pk=request.POST['id'])
        except Answer.DoesNotExist:
            return HttpResponse("{'success': 'false'}")

        try:
            vote = Vote.objects.get(answer=answer, user=request.user)
        except Vote.DoesNotExist:
            return HttpResponse("{'success': 'false'}")
        else:
            vote.delete()

        if request.POST['type'] == 'up':
            answer.score = answer.score - 1
        else:
            answer.score = answer.score + 1

        answer.save()

        return HttpResponse("{'success':'true', 'score':" + answer.score + "}")
    else:
        raise Http404('What are you doing here?')
</snippet></ROW><ROW><id>719821</id><snippet>&lt;VirtualHost *:80&gt;
    ServerName www.mydomain.com
    ServerAlias mydomain.com
    ServerAlias forum.mydomain.com
    ... other directives as needed ...
&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>719821</id><snippet>server {
    listen 80;
    server_name   www.mydomain.com   mydomain.com   forum.mydomain.com;
    ... other directives as needed ...
}
</snippet></ROW><ROW><id>719902</id><snippet>import types

def comp(source, *args, **kwargs):
    """Compile the source string; takes the same arguments as builtin compile().
    Modifies the resulting code object so that the original source can be
    recovered with decomp()."""
    c = compile(source, *args, **kwargs)
    return types.CodeType(c.co_argcount, c.co_nlocals, c.co_stacksize, 
        c.co_flags, c.co_code, c.co_consts + (source,), c.co_names, 
        c.co_varnames, c.co_filename, c.co_name, c.co_firstlineno, 
        c.co_lnotab, c.co_freevars, c.co_cellvars)

def decomp(code_object):
    return code_object.co_consts[-1]
</snippet></ROW><ROW><id>719902</id><snippet>&gt;&gt;&gt; a = comp('2 * (3 + x)', '', 'eval')
&gt;&gt;&gt; eval(a, dict(x=3))
12
&gt;&gt;&gt; decomp(a)
'2 * (3 + x)'
</snippet></ROW><ROW><id>720137</id><snippet>import re

myString = "This is my tweet check it out http://tinyurl.com/blah"

r = re.compile(r"(http://[^ ]+)")
print r.sub(r'&lt;a href="\1"&gt;\1&lt;/a&gt;', myString)
</snippet></ROW><ROW><id>720137</id><snippet>This is my tweet check it out &lt;a href="http://tinyurl.com/blah"&gt;http://tinyurl.com/blah&lt;/a&gt;
</snippet></ROW><ROW><id>720187</id><snippet>User.objects.filter(....).order_by('username')</snippet></ROW><ROW><id>720187</id><snippet>User</snippet></ROW><ROW><id>720187</id><snippet>from django.contrib.auth.models import User
User.Meta.ordering = ['username']
</snippet></ROW><ROW><id>720632</id><snippet>class A :
    def m1(self, name,age,address) :
        print('Name --&gt;',name)
        print('Age --&gt;',age)
        print('Address --&gt;',address)
</snippet></ROW><ROW><id>720632</id><snippet>class A :
    @staticmethod
    def m1(name,age,address) :
        print('Name --&gt;',name)
        print('Age --&gt;',age)
        print('Address --&gt;',address)
</snippet></ROW><ROW><id>720880</id><snippet>password_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()
top_level_url = "http://example.com/"
password_mgr.add_password(None, top_level_url, 'user', 'password')
handler = urllib2.HTTPBasicAuthHandler(password_mgr)
opener = urllib2.build_opener(urllib2.HTTPHandler, handler)
request = urllib2.Request(url)
</snippet></ROW><ROW><id>720880</id><snippet>top_level_url</snippet></ROW><ROW><id>720942</id><snippet>import urllib

BASE_URL = 'http://foobar.com/?%s'
print BASE_URL % urllib.urlencode({
   'foo': 'bar',   
})
</snippet></ROW><ROW><id>720942</id><snippet>lst = ['foo', 'bar', 'foo bar']
lst2 = []

for l in lst:
    if ' ' in l:
        lst2.append(repr(l))
</snippet></ROW><ROW><id>722266</id><snippet> </snippet></ROW><ROW><id>722266</id><snippet>{{ "hey there  world"|spacify }}
</snippet></ROW><ROW><id>722266</id><snippet>hey there  world</snippet></ROW><ROW><id>722266</id><snippet>from django.template import Library
from django.template.defaultfilters import stringfilter
from django.utils.html import conditional_escape
from django.utils.safestring import mark_safe
import re

register = Library()

@stringfilter
def spacify(value, autoescape=None):
    if autoescape:
	esc = conditional_escape
    else:
	esc = lambda x: x
    return mark_safe(re.sub('\s', '&amp;'+'nbsp;', esc(value)))
spacify.needs_autoescape = True
register.filter(spacify)
</snippet></ROW><ROW><id>722702</id><snippet>from collections import defaultdict
fq= defaultdict( int )
for w in words:
    fq[w] += 1
</snippet></ROW><ROW><id>722786</id><snippet>class CItem(list):
    def __eq__(self, other):
        return list.__eq__(self, other) and self.__dict__ == other.__dict__
</snippet></ROW><ROW><id>722871</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.expandvars('%APPDATA%\\MyApp')
'C:\\Documents and Settings\\Administrator\\Application Data\\MyApp'
</snippet></ROW><ROW><id>722878</id><snippet>import wx, wx.grid

class GridData(wx.grid.PyGridTableBase):
    _cols = "This is a long column name,b,c".split(",")
    _data = [
        "1 2 3".split(),
        "4,5,And here is a long cell value".split(","),
        "7 8 9".split()
    ]

    def GetColLabelValue(self, col):
        return self._cols[col]

    def GetNumberRows(self):
        return len(self._data)

    def GetNumberCols(self):
        return len(self._cols)

    def GetValue(self, row, col):
        return self._data[row][col]


class Test(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        grid = wx.grid.Grid(self)
        grid.SetTable(GridData())
        grid.EnableEditing(False)
        grid.SetSelectionMode(wx.grid.Grid.SelectRows)
        grid.SetRowLabelSize(0)
        grid.AutoSizeColumns()


app = wx.PySimpleApp()
app.TopWindow = Test()
app.TopWindow.Show()
app.MainLoop()
</snippet></ROW><ROW><id>722880</id><snippet>select_data = {"d": """strftime('%%m/%%d/%%Y', time_stamp)"""}

data = My_Model.objects.extra(select=select_data).values('d').annotate(Sum("numbers_data")).order_by()
</snippet></ROW><ROW><id>723053</id><snippet>create_socket()</snippet></ROW><ROW><id>723053</id><snippet>create_socket()</snippet></ROW><ROW><id>723053</id><snippet>packet_socket()</snippet></ROW><ROW><id>723053</id><snippet>ETH_P_ALL</snippet></ROW><ROW><id>723053</id><snippet>

#!/usr/bin/python

import asyncore, socket, IN, struct

proto=3
s = socket.socket(socket.AF_PACKET, socket.SOCK_RAW, socket.htons(3))
s.bind(("eth0",proto))

class packet_socket(asyncore.dispatcher):

    def __init__(self,sock):
        asyncore.dispatcher.__init__(self,sock)
        #self.create_socket(socket.AF_PACKET, socket.SOCK_RAW,socket.htons(3))
        self.buffer = '0180C20034350012545900040060078910'
        self.socket.setsockopt(socket.SOL_SOCKET,IN.SO_BINDTODEVICE,struct.pack("%ds" % (len("eth0")+1,), "eth0"))

    def handle_close(self):
        self.close()

    def handle_connect(self):
        pass

    def handle_read(self):
        print "handle_read() called" 
    data,addr=self.recvfrom(1024)
        print data
        print addr

    def readable(self):
        print "Checking read flag" 
    return True

    def writable(self):
        return (len(self.buffer) &gt; 0)

    def handle_write(self):
        print "Writing buffer data to the socket" 
    sent = self.sendto(self.buffer,("eth0",0xFFFF))
        self.buffer = self.buffer[sent:]

c = packet_socket(s)

asyncore.loop()


</snippet></ROW><ROW><id>723372</id><snippet> class PPIterator(BaseRequestHandler):
  def get(self):
    query = Model.gql('ORDER BY __key__')
    last_key_str = self.request.get('last')
    if last_key_str:
      last_key = db.Key(last_key_str)
      query = Model.gql('WHERE __key__ &gt; :1 ORDER BY __key__', last_key)
    entities = query.fetch(11)
    new_last_key_str = None
    if len(entities) == 11:
      new_last_key_str = str(entities[9].key())
    for e in entities:
      e.put()
    if new_last_key_str:
      self.response.out.write(json.write(new_last_key_str))
    else:
      self.response.out.write(json.write('done'))
</snippet></ROW><ROW><id>723372</id><snippet>require 'net/http'
require 'json'
last=nil
while last != 'done'
  url = 'your_url'
  path = '/your_path'
  path += "?/last=#{last}" if last
  last = Net::HTTP.get(url,path)
  puts last
end
</snippet></ROW><ROW><id>723586</id><snippet>save_instance()</snippet></ROW><ROW><id>723586</id><snippet>forms.models</snippet></ROW><ROW><id>723586</id><snippet>save_m2m</snippet></ROW><ROW><id>723586</id><snippet>commit=False</snippet></ROW><ROW><id>723724</id><snippet>from win32com.client import Dispatch

auto = Dispatch("AutoItX3.Control")
auto.WinActivate("The window's title", "")
auto.WinWaitActive("The window's title", "", 10)

auto.Send("The input")
</snippet></ROW><ROW><id>724665</id><snippet>from modules import controller
ctrl = controller
</snippet></ROW><ROW><id>724665</id><snippet>from modules import controller
ctrl = controller()
</snippet></ROW><ROW><id>724881</id><snippet>[main_list[x] for x in indexes]
</snippet></ROW><ROW><id>725271</id><snippet>reload(module)</snippet></ROW><ROW><id>725271</id><snippet>reload</snippet></ROW><ROW><id>725382</id><snippet>l = list(str)
l[i] = 'e'
str = ''.join(l)
</snippet></ROW><ROW><id>725462</id><snippet>class BuildProcess(wx.Process):

    def __init__(self, cmd, notify=None):
        wx.Process.__init__(self, notify)
        self.Redirect()
        self.cmd = cmd
        self.pid = None
        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.on_timer)

    def start(self):
        wx.PostEvent(self, BuildEvent(EVT_BUILD_STARTED, self))
        self.pid = wx.Execute(self.cmd, wx.EXEC_ASYNC, self)
        self.timer.Start(100)

    def on_timer(self, evt):
        stream = self.GetInputStream()
        if stream.CanRead():
            text = stream.read()
            wx.PostEvent(self, BuildEvent(EVT_BUILD_UPDATE, self, data=text))


    def OnTerminate(self, *args, **kwargs):
        print "terminating..."
        stream = self.GetInputStream()
        if stream.CanRead():
            text = stream.read()
            wx.PostEvent(self, BuildEvent(EVT_BUILD_UPDATE, self, data=text))
        if self.timer:
            self.timer.Stop()
        wx.PostEvent(self, BuildEvent(EVT_BUILD_FINISHED, self))
</snippet></ROW><ROW><id>725882</id><snippet>Python 3.0 (r30:67507, Dec  3 2008, 20:14:27) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.Timer('s.append("something")', 's = []').timeit()
0.20177424499999999
&gt;&gt;&gt; timeit.Timer('s += ["something"]', 's = []').timeit()
0.41192320500000079

Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.Timer('s.append("something")', 's = []').timeit()
0.23079359499999999
&gt;&gt;&gt; timeit.Timer('s += ["something"]', 's = []').timeit()
0.44208112500000141
</snippet></ROW><ROW><id>725882</id><snippet>append</snippet></ROW><ROW><id>725882</id><snippet>+=</snippet></ROW><ROW><id>725882</id><snippet>append</snippet></ROW><ROW><id>725882</id><snippet>LOAD_ATTR</snippet></ROW><ROW><id>725882</id><snippet>CALL_FUNCTION</snippet></ROW><ROW><id>725882</id><snippet>BUILD_LIST</snippet></ROW><ROW><id>725882</id><snippet>BUILD_LIST</snippet></ROW><ROW><id>725882</id><snippet>LOAD_ATTR</snippet></ROW><ROW><id>725882</id><snippet>CALL_FUNCTION</snippet></ROW><ROW><id>725882</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(compile("s = []; s.append('spam')", '', 'exec'))
  1           0 BUILD_LIST               0
              3 STORE_NAME               0 (s)
              6 LOAD_NAME                0 (s)
              9 LOAD_ATTR                1 (append)
             12 LOAD_CONST               0 ('spam')
             15 CALL_FUNCTION            1
             18 POP_TOP
             19 LOAD_CONST               1 (None)
             22 RETURN_VALUE
&gt;&gt;&gt; dis.dis(compile("s = []; s += ['spam']", '', 'exec'))
  1           0 BUILD_LIST               0
              3 STORE_NAME               0 (s)
              6 LOAD_NAME                0 (s)
              9 LOAD_CONST               0 ('spam')
             12 BUILD_LIST               1
             15 INPLACE_ADD
             16 STORE_NAME               0 (s)
             19 LOAD_CONST               1 (None)
             22 RETURN_VALUE
</snippet></ROW><ROW><id>725882</id><snippet>LOAD_ATTR</snippet></ROW><ROW><id>725882</id><snippet>&gt;&gt;&gt; timeit.Timer('a("something")', 's = []; a = s.append').timeit()
0.15924410999923566
</snippet></ROW><ROW><id>726259</id><snippet>class A(object):
    def method(self):
        return "foo"

try:
    import c_ext
    import types
    A.method = types.MethodType(c_ext.optimized_method, None, A)
except ImportError:
    pass
</snippet></ROW><ROW><id>727122</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup
&gt;&gt;&gt; doc = """
... &lt;html&gt;
... &lt;body&gt;
... &lt;img src="test.jpg"&gt;
... &lt;img src="yay.jpg"&gt;
... &lt;!-- &lt;img src="ohnoes.jpg"&gt; --&gt;
... &lt;img src="hurrah.jpg"&gt;
... &lt;/body&gt;
... &lt;/html&gt;
... """
&gt;&gt;&gt; soup = BeautifulSoup(doc)
&gt;&gt;&gt; soup.findAll('img')
[&lt;img src="test.jpg" /&gt;, &lt;img src="hurrah.jpg" /&gt;]
</snippet></ROW><ROW><id>727438</id><snippet>logging.debug("value of my var is %s", str(var))
</snippet></ROW><ROW><id>727517</id><snippet> &gt;&gt;&gt; print u'exámple'.upper()
 EXÁMPLE
</snippet></ROW><ROW><id>727779</id><snippet>__repr__</snippet></ROW><ROW><id>727779</id><snippet>__str__</snippet></ROW><ROW><id>727779</id><snippet>__repr__</snippet></ROW><ROW><id>727779</id><snippet>def __str__(self):
    ...
def __repr__(self):
    return self.__str__()
</snippet></ROW><ROW><id>727808</id><snippet>_winreg.ExpandEnvironmentStrings</snippet></ROW><ROW><id>727808</id><snippet>os.path.expandvars</snippet></ROW><ROW><id>727808</id><snippet>import re, os

def expandEnvironmentStrings(s):
    r= re.compile('%([^%]+)%')
    return r.sub(lambda m: os.environ.get(m.group(1), m.group(0)), s)
</snippet></ROW><ROW><id>728237</id><snippet>del password</snippet></ROW><ROW><id>728237</id><snippet>mail.login</snippet></ROW><ROW><id>728237</id><snippet>password</snippet></ROW><ROW><id>728376</id><snippet>__iadd__</snippet></ROW><ROW><id>728376</id><snippet>add</snippet></ROW><ROW><id>728445</id><snippet>items = ["stack", "over", "flow"]
map = { }

for item in items:
    def new_command():
        print(item)

    map[item] = new_command

map["stack"]()
map["over"]()
map["flow"]()
</snippet></ROW><ROW><id>728445</id><snippet>flow
flow
flow
</snippet></ROW><ROW><id>728445</id><snippet>for</snippet></ROW><ROW><id>728445</id><snippet>item</snippet></ROW><ROW><id>728445</id><snippet>item</snippet></ROW><ROW><id>728445</id><snippet>new_command()</snippet></ROW><ROW><id>728445</id><snippet>item</snippet></ROW><ROW><id>728445</id><snippet>for item in items:
    def item_command(name):
        def new_command():
            print(name)
        return new_command

    map[item] = item_command(item)
</snippet></ROW><ROW><id>728445</id><snippet>stack
over
flow
</snippet></ROW><ROW><id>728560</id><snippet>try:

    from itertools import combinations

except ImportError:

    def combinations(l, n):
        if n != 2: raise Exception('This placeholder only good for n=2')
        for i in range(len(l)):
            for j in range(i+1, len(l)):
                yield l[i], l[j]


coords_list = [(0,0), (3,4), (6,8)]

def distance(p1, p2):
    return ( ( p2[0]-p1[0] ) ** 2 + ( p2[1]-p1[1] )**2 ) ** 0.5

largest_distance, (p1, p2) = max([
     (distance(p1,p2), (p1, p2)) for (p1,p2) in combinations(coords_list, 2)
     ])


print largest_distance, p1, p2
</snippet></ROW><ROW><id>728719</id><snippet>python setup.py bdist_msi
</snippet></ROW><ROW><id>729016</id><snippet>coding[=:]\s*([-\w.]+)</snippet></ROW><ROW><id>729016</id><snippet># -*- coding: &lt;encoding-name&gt; -*-
</snippet></ROW><ROW><id>729016</id><snippet># vim:fileencoding=&lt;encoding-name&gt;
</snippet></ROW><ROW><id>729251</id><snippet>test_variable = None

def my_func():
    print test_variable
</snippet></ROW><ROW><id>729251</id><snippet>&gt;&gt;&gt; import my_test
&gt;&gt;&gt; eval('my_test.my_func()')
None
&gt;&gt;&gt; my_test.test_variable = 'hello'
&gt;&gt;&gt; my_test.test_variable
'hello'
&gt;&gt;&gt; eval('my_test.my_func()')
hello
</snippet></ROW><ROW><id>729586</id><snippet>instanceof</snippet></ROW><ROW><id>729586</id><snippet>if (v['content'] instanceof java.util.map)
</snippet></ROW><ROW><id>730235</id><snippet>class ValidationRule(models.Model):
    other = models.ForeignKey(OtherModel)
    other_field = models.CharField(max_length=256)
</snippet></ROW><ROW><id>730235</id><snippet>v = ValidationRule.objects.get(id=1)
field = getattr(v, v.other_field)
</snippet></ROW><ROW><id>730303</id><snippet>env.Command ('document.tex', '', 'python table_generator.py')
env.PDF ('document.pdf', 'document.tex')
</snippet></ROW><ROW><id>730330</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; pars = HTMLParser.HTMLParser()
&gt;&gt;&gt; pars.unescape('© &amp;euro;')
u'\xa9 \u20ac'
&gt;&gt;&gt; print _
© €
</snippet></ROW><ROW><id>730432</id><snippet>C:\Python30\python.exe -u "%" "%"
</snippet></ROW><ROW><id>730432</id><snippet>"C:\Python30\python.exe" -u "%s"
</snippet></ROW><ROW><id>730452</id><snippet>(-1,100)</snippet></ROW><ROW><id>730452</id><snippet>100</snippet></ROW><ROW><id>730452</id><snippet>-1</snippet></ROW><ROW><id>730452</id><snippet>self.sizer.Add(self.timeline,0,wx.EXPAND)</snippet></ROW><ROW><id>730778</id><snippet>try:
  doSomething()
except: 
  pass
</snippet></ROW><ROW><id>730778</id><snippet>try:
  doSomething()
except Exception: 
  pass
</snippet></ROW><ROW><id>730778</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>730778</id><snippet>SystemExit</snippet></ROW><ROW><id>730778</id><snippet>exceptions.BaseException</snippet></ROW><ROW><id>730778</id><snippet>exceptions.Exception</snippet></ROW><ROW><id>731083</id><snippet>destination = Vector2(*event.pos) – Vector2(*sprite.get_size())/2.
</snippet></ROW><ROW><id>731083</id><snippet>–</snippet></ROW><ROW><id>731083</id><snippet>-</snippet></ROW><ROW><id>731083</id><snippet>-</snippet></ROW><ROW><id>731083</id><snippet>destination = Vector2(*event.pos) - Vector2(*sprite.get_size())/2.
</snippet></ROW><ROW><id>731515</id><snippet>poplib</snippet></ROW><ROW><id>731515</id><snippet>imaplib</snippet></ROW><ROW><id>731515</id><snippet>def process_mail(mb):
    print "Processing: %s" % q
    if mb.email_box_type == 'pop3':
        if mb.email_box_ssl:
            if not mb.email_box_port: mb.email_box_port = 995
            server = poplib.POP3_SSL(mb.email_box_host, int(mb.email_box_port))
        else:
            if not mb.email_box_port: mb.email_box_port = 110
            server = poplib.POP3(mb.email_box_host, int(mb.email_box_port))
        server.getwelcome()
        server.user(mb.email_box_user)
        server.pass_(mb.email_box_pass)

        messagesInfo = server.list()[1]

        for msg in messagesInfo:
            msgNum = msg.split(" ")[0]
            msgSize = msg.split(" ")[1]
            full_message = "\n".join(server.retr(msgNum)[1])

            # Do something with the message

            server.dele(msgNum)
        server.quit()

    elif mb.email_box_type == 'imap':
        if mb.email_box_ssl:
            if not mb.email_box_port: mb.email_box_port = 993
            server = imaplib.IMAP4_SSL(mb.email_box_host, int(mb.email_box_port))
        else:
            if not mb.email_box_port: mb.email_box_port = 143
            server = imaplib.IMAP4(mb.email_box_host, int(mb.email_box_port))
        server.login(mb.email_box_user, mb.email_box_pass)
        server.select(mb.email_box_imap_folder)
        status, data = server.search(None, 'ALL')
        for num in data[0].split():
            status, data = server.fetch(num, '(RFC822)')
            full_message = data[0][1]

            # Do something with the message

            server.store(num, '+FLAGS', '\\Deleted')
        server.expunge()
        server.close()
        server.logout()
</snippet></ROW><ROW><id>731515</id><snippet>mb</snippet></ROW><ROW><id>731515</id><snippet>poplib</snippet></ROW><ROW><id>731515</id><snippet>imaplib</snippet></ROW><ROW><id>731653</id><snippet>def listfiles(directory):
    return [f for f in os.listdir(directory) 
              if os.path.isdir(os.path.join(directory, f))]
</snippet></ROW><ROW><id>732117</id><snippet>import wx, wx.lib.newevent, threading
import win32event, win32pipe, win32file, pywintypes, winerror


NewMessage, EVT_NEW_MESSAGE = wx.lib.newevent.NewEvent()
class MessageNotifier(threading.Thread):
    pipe_name = r"\\.\pipe\named_pipe_demo"

    def __init__(self, frame):
        threading.Thread.__init__(self)
        self.frame = frame

    def run(self):
        open_mode = win32pipe.PIPE_ACCESS_DUPLEX | win32file.FILE_FLAG_OVERLAPPED
        pipe_mode = win32pipe.PIPE_TYPE_MESSAGE

        sa = pywintypes.SECURITY_ATTRIBUTES()
        sa.SetSecurityDescriptorDacl(1, None, 0)

        pipe_handle = win32pipe.CreateNamedPipe(
            self.pipe_name, open_mode, pipe_mode,
            win32pipe.PIPE_UNLIMITED_INSTANCES,
            0, 0, 6000, sa
        )

        overlapped = pywintypes.OVERLAPPED()
        overlapped.hEvent = win32event.CreateEvent(None, 0, 0, None)

        while 1:
            try:
                hr = win32pipe.ConnectNamedPipe(pipe_handle, overlapped)
            except:
                # Error connecting pipe
                pipe_handle.Close()
                break

            if hr == winerror.ERROR_PIPE_CONNECTED:
                # Client is fast, and already connected - signal event
                win32event.SetEvent(overlapped.hEvent)

            rc = win32event.WaitForSingleObject(
                overlapped.hEvent, win32event.INFINITE
            )

            if rc == win32event.WAIT_OBJECT_0:
                try:
                    hr, data = win32file.ReadFile(pipe_handle, 64)
                    win32file.WriteFile(pipe_handle, "ok")
                    win32pipe.DisconnectNamedPipe(pipe_handle)
                    wx.PostEvent(self.frame, NewMessage(data=data))
                except win32file.error:
                    continue


class Messages(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        self.messages = wx.TextCtrl(self, style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.Bind(EVT_NEW_MESSAGE, self.On_Update)

    def On_Update(self, event):
        self.messages.Value += "\n" + event.data


app = wx.PySimpleApp()
app.TopWindow = Messages()
app.TopWindow.Show()
MessageNotifier(app.TopWindow).start()
app.MainLoop()
</snippet></ROW><ROW><id>732117</id><snippet>import win32pipe

print win32pipe.CallNamedPipe(r"\\.\pipe\named_pipe_demo", "Hello", 64, 0)
</snippet></ROW><ROW><id>732683</id><snippet>def __unicode__(self):
    return self.user.username
</snippet></ROW><ROW><id>732683</id><snippet>User.__unicode__()</snippet></ROW><ROW><id>732683</id><snippet>str(self.user.username)
</snippet></ROW><ROW><id>732973</id><snippet>def contact_create(request):
    if request.method == 'POST':
        form = ContactForm(request.POST)
        if form.is_valid():
            new_contact = form.save()
            return HttpResponseRedirect(reverse(contact_details, args=(new_contact.pk,)))
    else:
        form = ContactForm()
</snippet></ROW><ROW><id>733548</id><snippet>def print_names(names):
    """Takes a space-delimited string or an iterable"""
    try:
        for name in names.split(): # string case
            print name
    except AttributeError:
        for name in names:
            print name
</snippet></ROW><ROW><id>733548</id><snippet>print_names("Ryan Billy")
print_names(("Ryan", "Billy"))
</snippet></ROW><ROW><id>733582</id><snippet>&gt;&gt;&gt; x = [('a_key', 'a value'), ('another_key', 'another value')]
&gt;&gt;&gt; y = dict(x)
&gt;&gt;&gt; y['a_key']
'a value'
&gt;&gt;&gt; y['another_key']
'another value'
</snippet></ROW><ROW><id>734139</id><snippet>for a in range(10):
  time.sleep(1)
  barra.setValue(a)
</snippet></ROW><ROW><id>734139</id><snippet>barra.hide()
</snippet></ROW><ROW><id>734321</id><snippet>Project: StackOverflowProject
    App: Web Version
        Site: StackOverflow.com
        Site: RackOverflow.com
    App: XML API Version
        Site: StackOverflow.com
        Site: RackOverflow.com
    Common non-app settings, libraries, auth, etc
</snippet></ROW><ROW><id>734321</id><snippet>Project: StackOverflowProject
    App: Stackoverflow
        (No specific use of the sites feature... it's just one site)
    App: Plug-in TinyMCE editor with image upload
        (No specific use of the sites feature)
</snippet></ROW><ROW><id>734772</id><snippet>import pygame

quit = False
pygame.init()
display = pygame.display.set_mode((640,480))
sprite_sheet = pygame.image.load('sprite.bmp').convert()

# by default, display the first sprite
image_number = 0

while quit == False:
    event = pygame.event.poll()
    no_more_events = True if event == pygame.NOEVENT else False

    # handle events (update game state)
    while no_more_events == False:
        if event.type == pygame.QUIT:
            quit = True
            break
        elif event.type == pygame.NOEVENT:
            no_more_events = True
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT:
                image_number = 0
            elif event.key == pygame.K_RIGHT:
                image_number = 1

        event = pygame.event.poll()

    if quit == False:
        # redraw the screen
        display.fill(pygame.Color('white'))
        area = pygame.Rect(image_number * 100, 0, 100, 150)
        display.blit(sprite_sheet, (0,0), area)
        pygame.display.flip()
</snippet></ROW><ROW><id>734772</id><snippet>update()</snippet></ROW><ROW><id>734772</id><snippet>draw()</snippet></ROW><ROW><id>734910</id><snippet>*sigh*</snippet></ROW><ROW><id>734910</id><snippet>Node</snippet></ROW><ROW><id>734910</id><snippet>Node</snippet></ROW><ROW><id>734910</id><snippet>Node</snippet></ROW><ROW><id>734910</id><snippet>Node</snippet></ROW><ROW><id>734910</id><snippet>myfunction(Node(some_string))
</snippet></ROW><ROW><id>734910</id><snippet>Node</snippet></ROW><ROW><id>734910</id><snippet>myfunction_str</snippet></ROW><ROW><id>734910</id><snippet>Node</snippet></ROW><ROW><id>734910</id><snippet>myfunction_node</snippet></ROW><ROW><id>734910</id><snippet>Node</snippet></ROW><ROW><id>734910</id><snippet>__str__</snippet></ROW><ROW><id>734910</id><snippet>str()</snippet></ROW><ROW><id>735014</id><snippet>class X(object): pass
</snippet></ROW><ROW><id>735014</id><snippet>classobj= globals()[self.__class__.__name__]
print classobj.var
</snippet></ROW><ROW><id>735014</id><snippet>locals()</snippet></ROW><ROW><id>735014</id><snippet>eval()</snippet></ROW><ROW><id>735014</id><snippet>self.__class__</snippet></ROW><ROW><id>735014</id><snippet>classobj</snippet></ROW><ROW><id>735014</id><snippet>self.__class__.var</snippet></ROW><ROW><id>735014</id><snippet>print self.var
</snippet></ROW><ROW><id>735810</id><snippet>socket.gethostbyname()</snippet></ROW><ROW><id>735810</id><snippet>def is_valid_host(hostname):
    try:
        addr = socket.gethostbyname(hostname)
    except socket.gaierror, ex:
        return False
    return True

hosts = ['abc', 'yahoo.com', 'google.com', 'nosuchagency.gov']
filter(is_valid_host, hosts)
</snippet></ROW><ROW><id>735889</id><snippet>*</snippet></ROW><ROW><id>735889</id><snippet>opt1 = OptionMenu(root, var1, *optionlist)
</snippet></ROW><ROW><id>735978</id><snippet>class MyClass(object):
    @staticmethod
    def the_static_method(x):
        print x

MyClass.the_static_method(2) # outputs 2
</snippet></ROW><ROW><id>735978</id><snippet>staticmethod</snippet></ROW><ROW><id>735978</id><snippet>class MyClass(object):
    def the_static_method(x):
        print x
    the_static_method = staticmethod(the_static_method)

MyClass.the_static_method(2) # outputs 2
</snippet></ROW><ROW><id>735978</id><snippet>@staticmethod</snippet></ROW><ROW><id>735978</id><snippet>staticmethod</snippet></ROW><ROW><id>735978</id><snippet>class C:
    @staticmethod
    def f(arg1, arg2, ...): ...
</snippet></ROW><ROW><id>735978</id><snippet>C.f()</snippet></ROW><ROW><id>735978</id><snippet>C().f()</snippet></ROW><ROW><id>736050</id><snippet>try:
    float(element)
except ValueError:
    print "Not a float"
</snippet></ROW><ROW><id>736050</id><snippet>import re
if re.match("^\d+?\.\d+?$", element) is None:
    print "Not float"
</snippet></ROW><ROW><id>736359</id><snippet>&gt;&gt;&gt; import __builtin__
&gt;&gt;&gt; __builtin__.rubbish= 3
&gt;&gt;&gt; rubbish
3
</snippet></ROW><ROW><id>736359</id><snippet>from mypackage.constants import *
</snippet></ROW><ROW><id>736617</id><snippet>signals</snippet></ROW><ROW><id>736617</id><snippet>import xmlrpclib
from django.db.models.signals import post_save
from app.models import MyModel

def ping_handler(sender, instance=None, **kwargs):
    if instance is None:
        return
    rpc = xmlrpclib.Server('http://ping.feedburner.google.com/')
    rpc.weblogUpdates.ping(instance.title, instance.get_absolute_url())

post_save.connect(ping_handler, sender=MyModel)
</snippet></ROW><ROW><id>736738</id><snippet> lambda :logging.debug(name)
</snippet></ROW><ROW><id>736738</id><snippet> lambda name=name: logging.debug(name)
</snippet></ROW><ROW><id>737379</id><snippet>frame_count = 0
animation_frames = 4
while quit == False:
    # ...
    # snip
    # ...
    area = pygame.Rect(
        image_number * 100,
        (frame_count % animation_frames) * 150,
        100,
        150
    )
    display.blit(sprite, sprite_pos, area)
    pygame.display.flip()
    frame_count += 1
</snippet></ROW><ROW><id>737379</id><snippet>    area = pygame.Rect(
        image_number * 100,
        ((frame_count - action_start_frame) % animation_frames) * 150,
        100,
        150
    )
</snippet></ROW><ROW><id>737493</id><snippet>zipsafe</snippet></ROW><ROW><id>737493</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>737564</id><snippet>class DescDict(dict):
    def __init__(self, *args, **kwargs):
        self.descs = {}
        dict.__init__(self)

    def __getitem__(self, name):
        return dict.__getitem__(self, name)

    def __setitem__(self, name, tup):
        value, description = tup
        self.descs[name] = description
        dict.__setitem__(self, name, value)

    def get_desc(self, name):
        return self.descs[name]
</snippet></ROW><ROW><id>737564</id><snippet>my_dict = DescDict()
my_dict["foo"] = (0.5, "A foo var")  # just use a tuple if you only have 2 vals
print my_dict["foo"] + 15            # prints 15.5
print my_dict.get_desc("foo")        # prints 'A foo var'
</snippet></ROW><ROW><id>738082</id><snippet>scoped_session</snippet></ROW><ROW><id>738082</id><snippet>filter_by</snippet></ROW><ROW><id>738463</id><snippet>self.fields['author'].queryset = choices
</snippet></ROW><ROW><id>738552</id><snippet>class C(object):
    my_var = 'a'

    @classmethod
    def t(cls):
        print cls.my_var

C.t()
</snippet></ROW><ROW><id>739266</id><snippet>if 4 &lt;= day &lt;= 20 or 24 &lt;= day &lt;= 30:
    suffix = "th"
else:
    suffix = ["st", "nd", "rd"][day % 10 - 1]
</snippet></ROW><ROW><id>739291</id><snippet>EMAIL_PORT</snippet></ROW><ROW><id>739291</id><snippet>EMAIL_USE_TLS</snippet></ROW><ROW><id>739291</id><snippet>EMAIL_PORT = 25
EMAIL_USE_TLS = False
</snippet></ROW><ROW><id>739332</id><snippet>path = str(self.pathBox.displayText()) 
xmlFile = str(self.xmlFileBox.displayText()) 
outFileName = str(self.outfileNameBox.displayText())
</snippet></ROW><ROW><id>739332</id><snippet>displayText : const QString 
text : QString
</snippet></ROW><ROW><id>739347</id><snippet>import signal
signal.signal(signal.SIGINT, signal.SIG_IGN)

import subprocess
cat = subprocess.Popen(['cat'])
subprocess.call(['gdb', '--pid=%d' % cat.pid])
</snippet></ROW><ROW><id>739347</id><snippet>import subprocess
cat = subprocess.Popen(['cat'])

import signal, os
signal.signal(signal.SIGINT,
              lambda signum, frame: os.kill(cat.pid, signum))

subprocess.call(['gdb', '--pid=%d' % cat.pid])
</snippet></ROW><ROW><id>739657</id><snippet>(?P&lt;name&gt;...)</snippet></ROW><ROW><id>739657</id><snippet>MatchOjbect.lastgroup</snippet></ROW><ROW><id>739665</id><snippet>def makebold(fn):
    def wrapped():
        return "&lt;b&gt;" + fn() + "&lt;/b&gt;"
    return wrapped

def makeitalic(fn):
    def wrapped():
        return "&lt;i&gt;" + fn() + "&lt;/i&gt;"
    return wrapped

@makebold
@makeitalic
def hello():
    return "hello world"

print hello() ## returns &lt;b&gt;&lt;i&gt;hello world&lt;/i&gt;&lt;/b&gt;
</snippet></ROW><ROW><id>739873</id><snippet>def __init__(self, **kwargs):
    self.__dict__.update( kwargs )
</snippet></ROW><ROW><id>739954</id><snippet>class IterRegistry(type):
    def __iter__(cls):
        return iter(cls._registry)

class Person(object):
    __metaclass__ = IterRegistry
    _registry = []

    def __init__(self, name):
        self._registry.append(self)
        self.name = name
</snippet></ROW><ROW><id>739954</id><snippet>__registry</snippet></ROW><ROW><id>739954</id><snippet>_registry</snippet></ROW><ROW><id>739954</id><snippet>&gt;&gt;&gt; p = Person('John')
&gt;&gt;&gt; p2 = Person('Mary')
&gt;&gt;&gt; for personobject in Person:
...     print personobject
...
&lt;person.Person object at 0x70410&gt;
&lt;person.Person object at 0x70250&gt;
</snippet></ROW><ROW><id>740011</id><snippet>class ThingForm(models.ModelForm):
  class Meta:
    model = Thing

  def __init__(self, *args, **kwargs):
    super(ThingForm, self).__init__(*args, **kwargs)
    self.fields['verb'].empty_label = None
</snippet></ROW><ROW><id>740011</id><snippet>class ThingForm(models.ModelForm):
  verb = ModelChoiceField(Verb.objects.all(), empty_label=None)

  class Meta:
    model = Thing
</snippet></ROW><ROW><id>740018</id><snippet>help('modules')
</snippet></ROW><ROW><id>740294</id><snippet>&gt;&gt;&gt; L1 = [2,3,4]
&gt;&gt;&gt; L2 = [1,2]
&gt;&gt;&gt; [i for i in L1 if i in L2]
[2]


&gt;&gt;&gt; S1 = set(L1)
&gt;&gt;&gt; S2 = set(L2)
&gt;&gt;&gt; S1.intersection(S2)
set([2])
</snippet></ROW><ROW><id>740312</id><snippet>import myapplication

a= myapplication.Application()
</snippet></ROW><ROW><id>740312</id><snippet>a= myapplication.Application(basedir= '/opt/myapp', site= 'www.example.com', debug= False)
</snippet></ROW><ROW><id>740312</id><snippet># myapplication/__init__.py

class Application(object):
    def __init__(self, dbfactory, debug):
        # ...
        self.mailer= self.Mailer(self)
        self.webservice= self.Webservice(self)
        # ...

import myapplication.mailer, myapplication.webservice


# myapplication/mailer.py

import myapplication

class Mailer(object):
    def __init__(self, owner):
        self.owner= owner

    def send(self, message, recipients):
        # ...

myapplication.Application.Mailer= Mailer
</snippet></ROW><ROW><id>740312</id><snippet>import myapplication

class MockApplication(myapplication.Application):
    class Mailer(myapplication.Application.Mailer):
        def send(self, message, recipients):
            self.owner.log('Mail send called (not actually sent)')
            return True
</snippet></ROW><ROW><id>740839</id><snippet>import tarfile
import StringIO

tar = tarfile.TarFile("test.tar","w")

string = StringIO.StringIO()
string.write("hello")
string.seek(0)
info = tarfile.TarInfo(name="foo")
info.size=len(string.buf)
tar.addfile(tarinfo=info, fileobj=string)

tar.close()
</snippet></ROW><ROW><id>741444</id><snippet>def since_date_created(self):
    '''Compute the time since creation time based on self.date_created.'''
</snippet></ROW><ROW><id>741444</id><snippet>{% for msg in messagesSQL %}
    {{ msg.since_date_created }}
{% endfor %}
</snippet></ROW><ROW><id>741884</id><snippet>figure</snippet></ROW><ROW><id>741884</id><snippet>close</snippet></ROW><ROW><id>742383</id><snippet>for i in x[:]:
    x.remove(i)
</snippet></ROW><ROW><id>742383</id><snippet>[:]</snippet></ROW><ROW><id>742383</id><snippet>x</snippet></ROW><ROW><id>742383</id><snippet>x</snippet></ROW><ROW><id>742405</id><snippet>class HandlerCase1(object):
    def handle_stuff(self, *args, **kwargs):
        print "Handling case 1"


class HandlerCase2(object):
    def handle_stuff(self, *args, **kwargs):
        print "Handling case 2"


if __name__ == "__main__":
    handlers = []
    handlers.append(HandlerCase1())
    handlers.append(HandlerCase2())
    for h in handlers:
        h.handle_stuff()
</snippet></ROW><ROW><id>742405</id><snippet>class Handler(object):
    def common_function(self):
        print "Common function"


class HandlerCase1(Handler):
    def handle_stuff(self, *args, **kwargs):
        print "Handling case 1"


class HandlerCase2(Handler):
    def handle_stuff(self, *args, **kwargs):
        print "Handling case 2"


if __name__ == "__main__":
    handlers = []
    handlers.append(HandlerCase1())
    handlers.append(HandlerCase2())
    for h in handlers:
        h.handle_stuff()
        h.common_function()
</snippet></ROW><ROW><id>742509</id><snippet>ab = ac = [None, None]
</snippet></ROW><ROW><id>742509</id><snippet>ab = [None, None]
ac = [None, None]
</snippet></ROW><ROW><id>742724</id><snippet>import inspect

def methods(c):
    return (m for m in (getattr(c, d) for d in dir(c))
            if inspect.ismethoddescriptor(m) or inspect.ismethod(m))
</snippet></ROW><ROW><id>742724</id><snippet>class C:
    def f(self): pass

&gt;&gt;&gt; list(methods(C))
[&lt;unbound method C.f&gt;]
</snippet></ROW><ROW><id>742825</id><snippet>while (current_time &lt; total_simulation_time)
      handle_next_event
      generate_subsequent_events
      accumulate_statistics
      update_current_time
endwhile

Display "Average wait time: " accumulated_wait_time / number_of_customers_served
</snippet></ROW><ROW><id>742899</id><snippet>__setitem__</snippet></ROW><ROW><id>742899</id><snippet>__setslice__</snippet></ROW><ROW><id>743104</id><snippet>import multiprocessing, Queue

class Worker(multiprocessing.Process):
    def process(self, x): 
        for i in range(15):
            x += (float(i) / 2.6)
        return x

    def __init__(self, input, output):
        self.input = input
        self.output = output
        super(Worker, self).__init__()

    def run(self):
        try:
            while True:
                self.output.put(self.process(self.input.get_nowait()))
        except Queue.Empty:
            pass


if name == 'main':
    dataset = range(10)
    processes = multiprocessing.cpu_count()
    input = multiprocessing.Queue()
    output = multiprocessing.Queue()

    for obj in dataset:
        input.put(obj)
    for i in range(processes):
        Worker(input, output).start()

    for i in range(len(dataset)):
        print output.get()
</snippet></ROW><ROW><id>743186</id><snippet>while True:
  stuff()
  if fail_condition:
    break
</snippet></ROW><ROW><id>743186</id><snippet>stuff()
while not fail_condition:
  stuff()
</snippet></ROW><ROW><id>743186</id><snippet>for i in l:
  print i
print "done"
</snippet></ROW><ROW><id>743186</id><snippet>for s in l: 
  while True: 
    stuff() 
    # use a "break" instead of s = i.next()
</snippet></ROW><ROW><id>743186</id><snippet>for s in some_list:
  while True :
    if state is STATE_CODE :
      if "//" in s :
        tokens.add( TOKEN_COMMENT, s.split( "//" )[1] )
        state = STATE_COMMENT
      else :
        tokens.add( TOKEN_CODE, s )
    if state is STATE_COMMENT :
      if "//" in s :
        tokens.append( TOKEN_COMMENT, s.split( "//" )[1] )
        break # get next s
      else
        state = STATE_CODE
        # re-evaluate same line
        # continues automatically
</snippet></ROW><ROW><id>743217</id><snippet>tiny_impdef.exe</snippet></ROW><ROW><id>743217</id><snippet>.def</snippet></ROW><ROW><id>743268</id><snippet>english2german = open("english2german.txt")
englist = []
gerlist = []

for line in english2german:
    (e, g) = line.split()
    englist.append(e)
    gerlist.append(g)
</snippet></ROW><ROW><id>743268</id><snippet>englist[i:]</snippet></ROW><ROW><id>743268</id><snippet>gerlist[0:] = "alfa"</snippet></ROW><ROW><id>743268</id><snippet>gerlist = ['a', 'l', 'f', 'a']</snippet></ROW><ROW><id>743823</id><snippet>words.append(word)</snippet></ROW><ROW><id>743823</id><snippet>word.append(words)</snippet></ROW><ROW><id>744191</id><snippet>export | grep your.mistery.domain
</snippet></ROW><ROW><id>744407</id><snippet>import</snippet></ROW><ROW><id>744407</id><snippet>bar.py</snippet></ROW><ROW><id>744407</id><snippet>i</snippet></ROW><ROW><id>744407</id><snippet>bar.py</snippet></ROW><ROW><id>744407</id><snippet>i</snippet></ROW><ROW><id>744407</id><snippet>foo.py</snippet></ROW><ROW><id>744407</id><snippet>bar.i</snippet></ROW><ROW><id>744407</id><snippet>foo.i</snippet></ROW><ROW><id>744407</id><snippet>10</snippet></ROW><ROW><id>744407</id><snippet>foo.i</snippet></ROW><ROW><id>744407</id><snippet>foo.fi()</snippet></ROW><ROW><id>744407</id><snippet>i</snippet></ROW><ROW><id>744407</id><snippet>foo</snippet></ROW><ROW><id>744407</id><snippet>i</snippet></ROW><ROW><id>744407</id><snippet>i</snippet></ROW><ROW><id>744454</id><snippet>dictionary.values()</snippet></ROW><ROW><id>744454</id><snippet>Q</snippet></ROW><ROW><id>744454</id><snippet>Q</snippet></ROW><ROW><id>744632</id><snippet>functions_to_call = ["func_1", "func_2", "func_3"]

for f in functions_to_call:
    eval(f+'()')
</snippet></ROW><ROW><id>744895</id><snippet>(?iLmsux)</snippet></ROW><ROW><id>744895</id><snippet>re.I</snippet></ROW><ROW><id>744895</id><snippet>re.L</snippet></ROW><ROW><id>744895</id><snippet>re.M</snippet></ROW><ROW><id>744895</id><snippet>re.S</snippet></ROW><ROW><id>744895</id><snippet>re.U</snippet></ROW><ROW><id>744895</id><snippet>re.X</snippet></ROW><ROW><id>744895</id><snippet>compile()</snippet></ROW><ROW><id>744895</id><snippet>(?x)</snippet></ROW><ROW><id>744936</id><snippet>class TABLE(models.Model):
    id = models.AutoField(primary_key=True)
    parent = models.ForeignKey('self')
</snippet></ROW><ROW><id>745575</id><snippet>DELIMITER</snippet></ROW><ROW><id>745575</id><snippet>DELIMITER</snippet></ROW><ROW><id>745575</id><snippet>DELIMITER</snippet></ROW><ROW><id>745575</id><snippet>CREATE FUNCTION</snippet></ROW><ROW><id>745575</id><snippet>CREATE FUNCTION trivial_func (radius float) 
    RETURNS FLOAT

    BEGIN
    IF radius &gt; 1 THEN
        RETURN 0.0; &lt;-- does this semicolon terminate RETURN or CREATE FUNCTION?
    ELSE
        RETURN 1.0;
    END IF;
END
</snippet></ROW><ROW><id>745575</id><snippet>CREATE FUNCTION</snippet></ROW><ROW><id>745575</id><snippet>DELIMITER</snippet></ROW><ROW><id>745599</id><snippet>class PermissionList(models.Model):
    setter = models.ManyToManyField(User)
    email = models.EmailField(unique=True) #don't want conflicting results
    permission = models.BooleanField()
</snippet></ROW><ROW><id>745599</id><snippet># whitelist
PermissionList.objects.filter(permission=True)
# blacklist
PermissionList.objects.filter(permission=False)
</snippet></ROW><ROW><id>745599</id><snippet>class PermissionList(...):
    ...
    @classmethod
    def is_on_whitelist(email):
        return PermissionList.objects.filter(email=email, permission=True).count() &gt; 0

    @classmethod
    def is_on_blacklist(email):
        return PermissionList.objects.filter(email=email, permission=False).count() &gt; 0

    @classmethod
    def has_permission(email):
        if PermissionList.is_on_whitelist(email):
            return True
        if PermissionList.is_on_blacklist(email):
            return False
        return None
</snippet></ROW><ROW><id>746978</id><snippet>entity_two.__setattr(some_variable, some_value) #where some_variable is populated by user at runtime :)
</snippet></ROW><ROW><id>747260</id><snippet>&gt;&gt;&gt; from xml.dom import minidom
&gt;&gt;&gt; document= minidom.parseString('&lt;a/&gt;')
&gt;&gt;&gt; document.documentElement.setAttribute('a', 'a\r\nb')
&gt;&gt;&gt; document.toxml()
u'&lt;?xml version="1.0" ?&gt;&lt;a a="a\r\nb"/&gt;'
</snippet></ROW><ROW><id>747260</id><snippet>&gt;&gt;&gt; import pxdom
&gt;&gt;&gt; document= pxdom.parseString('&lt;a/&gt;')
&gt;&gt;&gt; document.documentElement.setAttribute('a', 'a\r\nb')
&gt;&gt;&gt; document.pxdomContent
u'&lt;?xml version="1.0" ?&gt;&lt;a a="a&#13;
b"/&gt;'
</snippet></ROW><ROW><id>747392</id><snippet>import random
#Create a funtion to randomize a given string
def makerandom(seq):
    return ''.join(random.sample(seq, len(seq)))
def randomDNA(n, probA=0.25, probC=0.25, probG=0.25, probT=0.25):
    notrandom=''
    A=int(n*probA)
    C=int(n*probC)
    T=int(n*probT)
    G=int(n*probG)

#The remainder part here is used to make sure all n are used, as one cannot
#have half an A for example.
    remainder=''
    for i in range(0, n-(A+G+C+T)):
        ramainder+=random.choice("ATGC")
    notrandom=notrandom+ 'A'*A+ 'C'*C+ 'G'*G+ 'T'*T + remainder
    return makerandom(notrandom)
</snippet></ROW><ROW><id>747855</id><snippet>py</snippet></ROW><ROW><id>747855</id><snippet>import functiondoc</snippet></ROW><ROW><id>747855</id><snippet>autoparts</snippet></ROW><ROW><id>747855</id><snippet>for line in list_of_parts:
    k, v = line.split()
    list1.append(k)
    list2.append(v)

# k and v are now the last line split up, *not* the list you've been constructing.
# The following incorrect line:
dictionary = dict(zip(k, v))
# ...should be:
dictionary = dict(zip(list1, list2))
# ..although you shouldn't use zip for this:
</snippet></ROW><ROW><id>747855</id><snippet>zip</snippet></ROW><ROW><id>747855</id><snippet>for line in list_of_parts:
    ...
dictionary = dict(zip(k, v))
</snippet></ROW><ROW><id>747855</id><snippet>def autoparts():
    # open() returns a file object, not the contents of the file,
    # you need to use .read() or .readlines() to get the actual text
    input_file = open('list_of_parts.txt', 'r')
    all_lines = input_file.read_lines() # reads files as a list (one index per line)

    mydict = {} # initialise a empty dictionary

    for line in list_of_parts:
        k, v = line.split()
        mydict[k] = v

    return mydict # you have to explicitly return stuff, or it returns None
</snippet></ROW><ROW><id>747888</id><snippet>self.__myvalue = ""</snippet></ROW><ROW><id>747888</id><snippet>__init__</snippet></ROW><ROW><id>747888</id><snippet>myvalue</snippet></ROW><ROW><id>747888</id><snippet>conf = Config()
conf.myvalue("Hello")
print conf.myvalue()  # prints Hello
conf2 = Config()
print conf.myvalue()  # prints nothing
print conf2.myvalue() # prints nothing
</snippet></ROW><ROW><id>747888</id><snippet>self.__myvalue</snippet></ROW><ROW><id>747888</id><snippet>myvalue()</snippet></ROW><ROW><id>747888</id><snippet>__init__</snippet></ROW><ROW><id>747888</id><snippet>myvalue</snippet></ROW><ROW><id>747888</id><snippet>class Config(object):
    """
    Borg singleton config object
    """
    _we_are_one = {}

    def __init__(self):
        #implement the borg pattern (we are one)
        self.__dict__ = self._we_are_one

    def set_myvalue(self, val):
        self._myvalue = val

    def get_myvalue(self):
        return getattr(self, '_myvalue', None)

    myvalue = property(get_myvalue, set_myvalue)

c = Config()
print c.myvalue # prints None
c.myvalue = 5
print c.myvalue # prints 5
c2 = Config()
print c2.myvalue #prints 5
</snippet></ROW><ROW><id>748058</id><snippet>output</snippet></ROW><ROW><id>748058</id><snippet>output = subprocess.Popen(["mycmd", "myarg"], stdout=PIPE).communicate()[0]
</snippet></ROW><ROW><id>748058</id><snippet>cmd</snippet></ROW><ROW><id>748058</id><snippet>&gt;&gt;&gt; p1 = subprocess.Popen(["cmd", "/C", "date"],stdout=subprocess.PIPE)
&gt;&gt;&gt; p1.communicate()[0]
'The current date is: Tue 04/14/2009 \r\nEnter the new date: (mm-dd-yy) '
&gt;&gt;&gt;
</snippet></ROW><ROW><id>748340</id><snippet>urllib2</snippet></ROW><ROW><id>748340</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; fp = urllib2.urlopen('http://bit.ly/rgCbf')
&gt;&gt;&gt; fp.geturl()
'http://webdesignledger.com/freebies/the-best-social-media-icons-all-in-one-place'
</snippet></ROW><ROW><id>748340</id><snippet>httplib</snippet></ROW><ROW><id>748340</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection('bit.ly')
&gt;&gt;&gt; conn.request('HEAD', '/rgCbf')
&gt;&gt;&gt; response = conn.getresponse()
&gt;&gt;&gt; response.getheader('location')
'http://webdesignledger.com/freebies/the-best-social-media-icons-all-in-one-place'
</snippet></ROW><ROW><id>748340</id><snippet>PycURL</snippet></ROW><ROW><id>748340</id><snippet>&gt;&gt;&gt; import pycurl
&gt;&gt;&gt; conn = pycurl.Curl()
&gt;&gt;&gt; conn.setopt(pycurl.URL, "http://bit.ly/rgCbf")
&gt;&gt;&gt; conn.setopt(pycurl.FOLLOWLOCATION, 1)
&gt;&gt;&gt; conn.setopt(pycurl.CUSTOMREQUEST, 'HEAD')
&gt;&gt;&gt; conn.setopt(pycurl.NOBODY, True)
&gt;&gt;&gt; conn.perform()
&gt;&gt;&gt; conn.getinfo(pycurl.EFFECTIVE_URL)
'http://webdesignledger.com/freebies/the-best-social-media-icons-all-in-one-place'
</snippet></ROW><ROW><id>748484</id><snippet>y, x = 35, 570
for line in attText.splitlines():
    draw.text( (x,y), line, ... )
    y = y + attSpacing
</snippet></ROW><ROW><id>748534</id><snippet>datetime.datetime.fromtimestamp(ms/1000.0)
</snippet></ROW><ROW><id>748543</id><snippet>#. Translators:
# Blah blah blah
_("String")
</snippet></ROW><ROW><id>748543</id><snippet>xgettext --language=Python --keyword=_ --add-comments=. --output=test.pot *.py
</snippet></ROW><ROW><id>749012</id><snippet>class Jean(db.Model):
    sex = db.StringProperty(required=True, choices=set(["male", "female"]), default="male")
</snippet></ROW><ROW><id>749019</id><snippet>topics = forms.ModelMultipleChoiceField(queryset=BlogTopic.objects.all())
</snippet></ROW><ROW><id>749101</id><snippet># this will result in a="length" and b="25"
a, b = "length=25".partition("=")[::2]

# this will result in a="DEFAULT_LENGTH" and b=""
a, b = "DEFAULT_LENGTH".partition("=")[::2]
</snippet></ROW><ROW><id>749382</id><snippet>Paragraph</snippet></ROW><ROW><id>749382</id><snippet>&lt;para&gt;</snippet></ROW><ROW><id>749382</id><snippet>story.append(Paragraph(text, TEXT_STYLE, bulletText='-'))
</snippet></ROW><ROW><id>749382</id><snippet>&lt;bullet&gt;</snippet></ROW><ROW><id>749382</id><snippet>Paragraph</snippet></ROW><ROW><id>749382</id><snippet>story.append(Paragraph('&lt;bullet&gt;The rain in spain&lt;/bullet&gt;', TEXT_STYLE))
</snippet></ROW><ROW><id>749418</id><snippet>def check_data(data):
    s = "\n".join(data);
    for k in keywords:
        if k in s:
            return True

    return False
</snippet></ROW><ROW><id>749518</id><snippet>gtk.Builder</snippet></ROW><ROW><id>749518</id><snippet>self.uifile = "sdm.ui"
self.wTree = gtk.Builder()
self.wTree.add_from_file(self.uifile)
</snippet></ROW><ROW><id>749518</id><snippet>get_widget</snippet></ROW><ROW><id>749518</id><snippet>get_object</snippet></ROW><ROW><id>749518</id><snippet>self.window = self.wTree.get_object("MainWindow")
if self.window:
    self.window.connect("destroy", gtk.main_quit)
</snippet></ROW><ROW><id>749518</id><snippet>connect_signals</snippet></ROW><ROW><id>749518</id><snippet>dic = { "on_button1_clicked" : self.button1_clicked, 
    "on_MainWindow_destroy" : gtk.main_quit}
self.wTree.connect_signals(dic)
</snippet></ROW><ROW><id>749518</id><snippet>connect_signals</snippet></ROW><ROW><id>749648</id><snippet>&gt;&gt;&gt; from guppy import hpy
&gt;&gt;&gt; hp = hpy()
&gt;&gt;&gt; hp.setrelheap() # ignore all existing objects
&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d['key'] = [ (1131, 3.11e18), (9813, 2.48e19), (4991, 9.11e18) ]
&gt;&gt;&gt; hp.heap()
 Partition of a set of 24 objects. Total size = 1464 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0      2   8      676  46       676  46 types.FrameType
     1      6  25      220  15       896  61 str
     2      6  25      184  13      1080  74 tuple
 ...
</snippet></ROW><ROW><id>749769</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print sys.executable
/usr/bin/python
</snippet></ROW><ROW><id>750148</id><snippet>def autoparts():
  parts_dict={}
  list_of_parts = open('list_of_parts.txt', 'r')
  for line in list_of_parts:
        k, v = line.split()
        parts_dict[k] = v
  return parts_dict
</snippet></ROW><ROW><id>750148</id><snippet>my_auto_parts=autoparts() 
print my_auto_parts['engine']
</snippet></ROW><ROW><id>750318</id><snippet>print myObject.myVar if hasattr(myObject, 'myVar') else 'not defined'
</snippet></ROW><ROW><id>750318</id><snippet>hasattr()</snippet></ROW><ROW><id>750318</id><snippet>x in y.__dict__</snippet></ROW><ROW><id>750318</id><snippet>hasattr()</snippet></ROW><ROW><id>750318</id><snippet>__getattr__</snippet></ROW><ROW><id>750318</id><snippet>y.__dict__</snippet></ROW><ROW><id>750318</id><snippet>y</snippet></ROW><ROW><id>751497</id><snippet>set.remove</snippet></ROW><ROW><id>751497</id><snippet>set.remove</snippet></ROW><ROW><id>751497</id><snippet>mi_set</snippet></ROW><ROW><id>751712</id><snippet>os.path.join()</snippet></ROW><ROW><id>751712</id><snippet>sys.path.insert(0, os.path.abspath(os.path.join(__file__, 'modules')))
</snippet></ROW><ROW><id>751712</id><snippet>import modules.commands.CommandSomething
</snippet></ROW><ROW><id>751712</id><snippet>import CommandSomething
</snippet></ROW><ROW><id>751712</id><snippet>__all__= ['ThisCommand', 'ThatCommand', 'TheOtherCommand']
</snippet></ROW><ROW><id>752330</id><snippet>A = [1,2,3,4,5,6]
B = A[:len(A)/2]
C = A[len(A)/2:]
</snippet></ROW><ROW><id>752330</id><snippet>def split_list(a_list):
    half = len(a_list)/2
    return a_list[:half], a_list[half:]

A = [1,2,3,4,5,6]
B, C = split_list(A)
</snippet></ROW><ROW><id>752390</id><snippet>IF exists(variable) AND variable.doSomething()
    THEN ...
</snippet></ROW><ROW><id>752895</id><snippet>&gt;&gt;&gt; class TestGetitem(object):
...   def __getitem__(self, item):
...     print type(item), item
... 
&gt;&gt;&gt; t = TestGetitem()
</snippet></ROW><ROW><id>752895</id><snippet>&gt;&gt;&gt; t[1]
&lt;type 'int'&gt; 1
&gt;&gt;&gt; t[3-2]
&lt;type 'int'&gt; 1
&gt;&gt;&gt; t['test']
&lt;type 'str'&gt; test
&gt;&gt;&gt; t[t]
&lt;class '__main__.TestGetitem'&gt; &lt;__main__.TestGetitem object at 0xb7e9bc4c&gt;
</snippet></ROW><ROW><id>752895</id><snippet>&gt;&gt;&gt; t[1:2]
&lt;type 'slice'&gt; slice(1, 2, None)
&gt;&gt;&gt; t[1:'this':t]
&lt;type 'slice'&gt; slice(1, 'this', &lt;__main__.TestGetitem object at 0xb7e9bc4c&gt;)
</snippet></ROW><ROW><id>752895</id><snippet>&gt;&gt;&gt; t[...]
&lt;type 'ellipsis'&gt; Ellipsis
</snippet></ROW><ROW><id>752895</id><snippet>&gt;&gt;&gt; t[...,1:]
&lt;type 'tuple'&gt; (Ellipsis, slice(1, None, None))
</snippet></ROW><ROW><id>753044</id><snippet>s=unicodestring.replace(u'\xa0',u'')
</snippet></ROW><ROW><id>753657</id><snippet>class FileInfo(dict):
    """store file metadata"""
    def __init__(self, filename=None):
        super( FileInfo, self ).__init__()
        self["name"] = filename
</snippet></ROW><ROW><id>753657</id><snippet>dict</snippet></ROW><ROW><id>753657</id><snippet>list</snippet></ROW><ROW><id>753657</id><snippet>tuple</snippet></ROW><ROW><id>753657</id><snippet>super</snippet></ROW><ROW><id>754024</id><snippet>&gt;&gt;&gt; l = [ 1, 2, 3, 4 ]
&gt;&gt;&gt; dict( ( v, v**2 ) for v in l )
{1: 1, 2: 4, 3: 9, 4: 16}
</snippet></ROW><ROW><id>754024</id><snippet>{ v : v**2 for v in l }
</snippet></ROW><ROW><id>754066</id><snippet>__metaclass__</snippet></ROW><ROW><id>754066</id><snippet>returns</snippet></ROW><ROW><id>754066</id><snippet>class CheckedReturnType(object):
    def __init__(self, meth, rtype):
        self.meth = meth
        self.rtype = rtype

def returns(rtype):
    def _inner(f):
        return CheckedReturnType(f, rtype)
    return _inner

class BaseInspector(type):
    def __new__(mcs, name, bases, dct):
        for obj_name, obj in dct.iteritems():
            if isinstance(CheckedReturnType, obj):
                # do your wrapping &amp; checking here, base classes are in bases
                # reassign to dct
        return type.__new__(mcs, name, bases, dct)

class A(object):
    __metaclass__ = BaseInspector
    @returns(int)
    def compute(self, value):
        return value * 3
</snippet></ROW><ROW><id>754175</id><snippet>import urllib
content = urllib.urlopen('http://www.google.com/').read()
</snippet></ROW><ROW><id>754215</id><snippet>for file in os.listdir(dir):
    f = open(dir+'\\'+file,'r')
    y = f.readlines()
    for line in y:
        pass
    f.close()
</snippet></ROW><ROW><id>754215</id><snippet>for file in os.listdir(dir):
    y = open(dir+'\\'+file,'r')
    for line in y:
        pass
    y.close()
</snippet></ROW><ROW><id>754215</id><snippet>for file in os.listdir(dir):
    with open(dir+'\\'+file,'r') as y:
        for line in y:
            pass
</snippet></ROW><ROW><id>754215</id><snippet>with</snippet></ROW><ROW><id>754215</id><snippet>os.path</snippet></ROW><ROW><id>754246</id><snippet># -*- Mode: Python -*-
# vi:si:et:sw=4:sts=4:ts=4

p = "Plural-Forms: nplurals=3; plural=n%10==1 &amp;&amp; n%100!=11 ? 0 : n%10&gt;=2 &amp;&amp; n%10&lt;=4 &amp;&amp; (n%100&lt;10 || n%100&gt;=20) ? 1 : 2;\n"

# extract rule
import re
matcher = re.compile('plural=(.*);')
match = matcher.search(p)
rule = match.expand("\\1")

# convert rule to python syntax
oldrule = None
while oldrule != rule:
    oldrule = rule
    rule = re.sub('(.*)\?(.*):(.*)', r'(\1) and (\2) or (\3)', oldrule)

rule = re.sub('&amp;&amp;', 'and', rule)
rule = re.sub('\|\|', 'or', rule)

for n in range(40):
    code = "n = %d" % n
    print n, eval(rule)
</snippet></ROW><ROW><id>754428</id><snippet>connnection_info = LIVE_CONNECTION</snippet></ROW><ROW><id>754503</id><snippet>chr(0xe2) . chr(0x80) . chr(0x98)
</snippet></ROW><ROW><id>754503</id><snippet>'\xe2\x80\x98'
</snippet></ROW><ROW><id>754503</id><snippet>def defang(string):
    return string.decode('utf-8').encode('ascii', 'xmlcharrefreplace')
</snippet></ROW><ROW><id>754503</id><snippet>‘</snippet></ROW><ROW><id>754503</id><snippet>“</snippet></ROW><ROW><id>754503</id><snippet>import re
from htmlentitydefs import codepoint2name

def convert_match_to_named(match):
    num = int(match.group(1))
    if num in codepoint2name:
        return "&amp;%s;" % codepoint2name[num]
    else:
        return match.group(0)

def defang_named(string):
    return re.sub('&amp;#(\d+);', convert_match_to_named, defang(string))
</snippet></ROW><ROW><id>754503</id><snippet>&gt;&gt;&gt; defang_named('\xe2\x80\x9cHello, world!\xe2\x80\x9d')
'&amp;ldquo;Hello, world!&amp;rdquo;'
</snippet></ROW><ROW><id>754503</id><snippet># in Python, it's common to operate a line at a time on a file instead of
# reading the entire thing into memory

my_file = open("test100.html")
for line in my_file:
    print defang_named(line)
my_file.close()
</snippet></ROW><ROW><id>755378</id><snippet>d*</snippet></ROW><ROW><id>755378</id><snippet>([ef]d\*b|d\*)*&lt;/pre&gt;&lt;/code&gt; and &lt;code&gt;&lt;pre&gt;([ef]|([gh]d\*(ad\*[gh]d)\*b))d\*b
</snippet></ROW><ROW><id>755378</id><snippet>|</snippet></ROW><ROW><id>755740</id><snippet>reload(three)
</snippet></ROW><ROW><id>755863</id><snippet>editable</snippet></ROW><ROW><id>755863</id><snippet>False</snippet></ROW><ROW><id>755863</id><snippet>default</snippet></ROW><ROW><id>755863</id><snippet>b = models.CharField(max_length=7, default='0000000', editable=False)
</snippet></ROW><ROW><id>755863</id><snippet>id</snippet></ROW><ROW><id>755976</id><snippet>cron:
- description: job that runs every minute
  url: /cronjobs/job1
  schedule: every minute
</snippet></ROW><ROW><id>756132</id><snippet>class Dated(models.Model):
  ...
  created = models.DateTimeField(default=datetime.now)

  class Meta:
    ordering = ('created',)

  def __cmp__(self, other):
    try:
      return cmp(self.created, other.created)
    except AttributeError:
      return cmp(self.created, other)
</snippet></ROW><ROW><id>756308</id><snippet>static IEnumerable&lt;T[]&gt; Permute&lt;T&gt;(this T[] xs, params T[] pre) {
    if (xs.Length == 0) yield return pre;
    for (int i = 0; i &lt; xs.Length; i++) {
        foreach (T[] y in Permute(xs.Take(i).Union(xs.Skip(i+1)).ToArray(), pre.Union(new[] { xs[i] }).ToArray())) {
            yield return y;
        }
    }
}
</snippet></ROW><ROW><id>756308</id><snippet>int[] values = {1,2,3};
foreach(int[] perm in values.Permute()) {
   WriteArray(perm);
}

void WriteArray&lt;T&gt;(T[] values) {
    StringBuilder sb = new StringBuilder();
    foreach(T value in values) {
        sb.Append(value).Append(", ");
    }
    Console.WriteLine(sb);
}
</snippet></ROW><ROW><id>756308</id><snippet>yield return</snippet></ROW><ROW><id>756308</id><snippet>+</snippet></ROW><ROW><id>756602</id><snippet>zip()</snippet></ROW><ROW><id>756602</id><snippet>t = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')
zip(t[::2], t[1::2])
</snippet></ROW><ROW><id>756705</id><snippet>binary=00001111
DECIMAL=$(python -c "print int('$BINARY', 2)")
echo $decimal
</snippet></ROW><ROW><id>756705</id><snippet>seek</snippet></ROW><ROW><id>756705</id><snippet>2*(15-1)</snippet></ROW><ROW><id>756875</id><snippet>exportselection</snippet></ROW><ROW><id>756875</id><snippet>b1 = Listbox(exportselection=0)
for item in families:
    b1.insert(END, item)
b2 = Listbox(exportselection=0)
for item in fonts:
    b2.insert(END, item)
b3 = Listbox(exportselection=0)
for item in styles:
    b3.insert(END, item)
</snippet></ROW><ROW><id>756875</id><snippet>exportselection</snippet></ROW><ROW><id>756914</id><snippet>.</snippet></ROW><ROW><id>756914</id><snippet>re.DOTALL</snippet></ROW><ROW><id>756914</id><snippet>re.search('&lt;!-- begin staff --&gt;.*&lt;!-- end staff --&gt;', text, re.DOTALL)
</snippet></ROW><ROW><id>756914</id><snippet>re.search('&lt;!-- begin staff --&gt;.*?&lt;!-- end staff --&gt;', text, re.DOTALL)
</snippet></ROW><ROW><id>757521</id><snippet>re.findall</snippet></ROW><ROW><id>757521</id><snippet>findall(pattern, string, flags=0)
    Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result.
</snippet></ROW><ROW><id>757521</id><snippet>(tickets\.)</snippet></ROW><ROW><id>757521</id><snippet>findall</snippet></ROW><ROW><id>757521</id><snippet>r'(\w+@(tickets\.)?company\.com)'
r'\w+@(?:tickets\.)?company\.com'
</snippet></ROW><ROW><id>757521</id><snippet>findall</snippet></ROW><ROW><id>757582</id><snippet>def build_tree(nodes):
    # create empty tree to fill
    tree = {}

    # fill in tree starting with roots (those with no parent)
    build_tree_recursive(tree, None, nodes)

    return tree

def build_tree_recursive(tree, parent, nodes):
    # find children
    children  = [n for n in nodes if n.parent == parent]

    # build a subtree for each child
    for child in children:
    	# start new subtree
    	tree[child.name] = {}

    	# call recursively to build a subtree for current node
    	build_tree_recursive(tree[child.name], child, nodes)
</snippet></ROW><ROW><id>757820</id><snippet>  'payment_form_cls': 'payment_form_cls',  # form class to use for payment
</snippet></ROW><ROW><id>757820</id><snippet>   'payment_form_cls': MyValidationForm,  # form class to use for payment
</snippet></ROW><ROW><id>757982</id><snippet>re.search(r"{(?:\\fad|fade)\((\d{1,4}),(\d{1,4})\)}", text).groups()</snippet></ROW><ROW><id>757982</id><snippet>{}</snippet></ROW><ROW><id>758101</id><snippet>sed '/regexp/i\

$H
x'
</snippet></ROW><ROW><id>758195</id><snippet>import sys
sys.path.append('/home/myuser/lib/python')
</snippet></ROW><ROW><id>758803</id><snippet>visits.iteritems()</snippet></ROW><ROW><id>758803</id><snippet>sorted</snippet></ROW><ROW><id>759908</id><snippet>from packagename import Session</snippet></ROW><ROW><id>760115</id><snippet>import os
import cherrypy

PATH = os.path.abspath(os.path.dirname(__file__))
class Root(object): pass

cherrypy.tree.mount(Root(), '/', config={
        '/': {
                'tools.staticdir.on': True,
                'tools.staticdir.dir': PATH,
                'tools.staticdir.index': 'index.html',
            },
    })

cherrypy.quickstart()
</snippet></ROW><ROW><id>760118</id><snippet>.all()</snippet></ROW><ROW><id>760276</id><snippet>def posix_sysctl_long(name):
    _mem = c_uint64(0)
    _def = sysctl_names[name]
    _arr = c_int * len(_def)
    _name = _arr()
    for i, v in enumerate(_def):
        _name[i] = c_int(v)
    _sz = c_size_t(sizeof(_mem))
    result = libc.sysctl(_name, len(_def), byref(_mem), byref(_sz), None, c_size_t(0))
    if result != 0:
        raise Exception('sysctl returned with error %s' % result)
    return _mem.value
</snippet></ROW><ROW><id>760709</id><snippet>thumbs</snippet></ROW><ROW><id>760709</id><snippet>.</snippet></ROW><ROW><id>760709</id><snippet>class ThumbnailGenerator( object ):
</snippet></ROW><ROW><id>760709</id><snippet>__</snippet></ROW><ROW><id>760709</id><snippet>"%s%s%s" % (self.image_path, os.sep, thumb_path)</snippet></ROW><ROW><id>760709</id><snippet>os.path.join</snippet></ROW><ROW><id>760829</id><snippet>for y in range(0, len(x), 2):
    print "%s%s" % (x[y], x[y+1])
</snippet></ROW><ROW><id>760829</id><snippet>len(x) % 2 == 0;</snippet></ROW><ROW><id>760930</id><snippet>breakindent</snippet></ROW><ROW><id>761449</id><snippet>import csv
r = csv.reader(...)
lines = [line for line in r]
print len(lines) #number of lines
for odd in r[1::2]: print odd # print ever other line
</snippet></ROW><ROW><id>761459</id><snippet>u''</snippet></ROW><ROW><id>761459</id><snippet>u</snippet></ROW><ROW><id>761459</id><snippet>unicode.__repr__</snippet></ROW><ROW><id>761459</id><snippet>&gt;&gt;&gt; print repr(unicode('a'))
u'a'
&gt;&gt;&gt; unicode('a')
u'a'
</snippet></ROW><ROW><id>761459</id><snippet>&gt;&gt;&gt; print unicode('a')
a
</snippet></ROW><ROW><id>761459</id><snippet>unicode()</snippet></ROW><ROW><id>761459</id><snippet>&gt;&gt;&gt; class unicode(unicode):
...     def __repr__(self):
...             return __builtins__.unicode.__repr__(self).lstrip("u")
... 
&gt;&gt;&gt; unicode('a')
a
</snippet></ROW><ROW><id>761605</id><snippet>__nonzero__()</snippet></ROW><ROW><id>761605</id><snippet>__bool__()</snippet></ROW><ROW><id>761798</id><snippet>beginPosit = tempans.index('007 A000000 Y')
endPosit = min([i for i, item in enumerate(tempans) if '008 ' in item])
</snippet></ROW><ROW><id>761798</id><snippet>for line in tempans[beginPosit:endPosit]:
    process each line
</snippet></ROW><ROW><id>761798</id><snippet>from itertools import takewhile
beginPosit = tempans.index('007 A000000 Y')
new=takewhile(lambda x: '007 ' in x, tempans[beginPosit:])
</snippet></ROW><ROW><id>761825</id><snippet>.strip()</snippet></ROW><ROW><id>761825</id><snippet>&gt;&gt;&gt; ' Hello '.strip()
'Hello'
&gt;&gt;&gt; ' Hello'.strip()
'Hello'
&gt;&gt;&gt; 'Bob has a cat'.strip()
'Bob has a cat'
&gt;&gt;&gt; '          Hello        '.strip()  # ALL spaces at ends removed
'Hello'
</snippet></ROW><ROW><id>761825</id><snippet>def strip_one_space(s):
    if s.endswith(" "): s = s[:-1]
    if s.startswith(" "): s = s[1:]
    return s

&gt;&gt;&gt; strip_one_space("   Hello ")
'  Hello'
</snippet></ROW><ROW><id>761825</id><snippet>str.strip()</snippet></ROW><ROW><id>761825</id><snippet>strip</snippet></ROW><ROW><id>761825</id><snippet>&gt;&gt;&gt; "  Hello\n".strip(" ")
'Hello\n'
</snippet></ROW><ROW><id>761847</id><snippet>from BeautifulSoup import BeautifulSoup
from markdown import markdown

html = markdown(some_html_string)
text = ''.join(BeautifulSoup(html).findAll(text=True))
</snippet></ROW><ROW><id>762007</id><snippet>addheaders()</snippet></ROW><ROW><id>762007</id><snippet>opener</snippet></ROW><ROW><id>762007</id><snippet>opener.addheaders = [('User-agent', 'Mozilla/5.0')]
</snippet></ROW><ROW><id>762125</id><snippet>sys.path.extend(map(os.path.abspath, ['other1/', 'other2/', 'yourlib/']))
</snippet></ROW><ROW><id>762134</id><snippet>{% if error_messages %}
    &lt;div class="error"&gt;
        {% ifequal error_messages|length 1 %}
            error_messages[0]
        {% else %}
            Please fix the following errors:
            &lt;div class="erroritem"&gt;
            {% for key, value in error_messages.items %}
                &lt;br&gt;{{ value }}
            {% endfor %}
            &lt;/div&gt;
        {% endifequal %}
    &lt;/div&gt;
{% endif %}
</snippet></ROW><ROW><id>762463</id><snippet>doSkip</snippet></ROW><ROW><id>762463</id><snippet>.skip()</snippet></ROW><ROW><id>762463</id><snippet>.work()</snippet></ROW><ROW><id>762463</id><snippet>doSkip</snippet></ROW><ROW><id>762463</id><snippet>doSkip</snippet></ROW><ROW><id>762463</id><snippet>doSkip</snippet></ROW><ROW><id>762559</id><snippet>findall</snippet></ROW><ROW><id>762559</id><snippet>search</snippet></ROW><ROW><id>762559</id><snippet>reg = re.compile("&lt;tr&gt;&lt;td width=60 bgcolor='#ffffcc'&gt;&lt;b&gt;([^&lt;]*)&lt;/b&gt;&lt;/td&gt;&lt;td align=center width=80&gt;")
value = reg.findall(htmlbody)
print 'Found %i match(es)' % len(value)
</snippet></ROW><ROW><id>762957</id><snippet>ft2build.h</snippet></ROW><ROW><id>762957</id><snippet>-I</snippet></ROW><ROW><id>763387</id><snippet>def map_params(func):
    def decorated(request):
        return func(request, **request.GET)
    return decorated

@map_params
def some_view(request, param1, param2):
    ...
</snippet></ROW><ROW><id>763426</id><snippet>$EDITOR</snippet></ROW><ROW><id>763571</id><snippet>def items(self):
    for i, obj in enumerate(Blog.objects.order_by('-pubDate')):
       obj.priority = i &lt; 3 and 1 or 0.5
       yield obj

def priority(self, obj):
    return obj.priority
</snippet></ROW><ROW><id>763688</id><snippet>JSON</snippet></ROW><ROW><id>763688</id><snippet>&gt;&gt;&gt; string = "{ \"Dimensions\" : \" 12.0\\\" x 9.6\\\" \" }"
&gt;&gt;&gt; print string
{ "Dimensions" : " 12.0\" x 9.6\" " }
</snippet></ROW><ROW><id>763688</id><snippet>from json import JSONEncoder
encoder = JSONEncoder()
string = encoder.encode({ "Dimensions":" 12.0\" x 9.6\" " })

&gt;&gt;&gt; print string
{"Dimensions": " 12.0\" x 9.6\" "}
</snippet></ROW><ROW><id>763951</id><snippet>alternatives = ("// @in ", "// @out ", "// @ret ")
if any(a in sTxT for a in alternatives):
    print "found"

if all(a in sTxT for a in alternatives):
   print "found all"
</snippet></ROW><ROW><id>763951</id><snippet>any()</snippet></ROW><ROW><id>763951</id><snippet>all()</snippet></ROW><ROW><id>763975</id><snippet>hasattr()</snippet></ROW><ROW><id>763975</id><snippet>if hasattr(socket, 'fromfd'):
    pass
else:
    pass
</snippet></ROW><ROW><id>764198</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>764198</id><snippet>datetime.time</snippet></ROW><ROW><id>764198</id><snippet>datetime.time</snippet></ROW><ROW><id>764198</id><snippet>value = datetime.timedelta(0, 64800)
(datetime.datetime.min + value).time()
</snippet></ROW><ROW><id>764198</id><snippet>datetime.datetime.min</snippet></ROW><ROW><id>764198</id><snippet>datetime.time()</snippet></ROW><ROW><id>764198</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>764198</id><snippet>datetime.datetime</snippet></ROW><ROW><id>764198</id><snippet>datetime.datetime</snippet></ROW><ROW><id>764198</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>764198</id><snippet>datetime.datetime</snippet></ROW><ROW><id>764198</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>764198</id><snippet>datetime.datetime</snippet></ROW><ROW><id>764244</id><snippet>dict((k.lower(), v.lower()) for k,v in {'My Key':'My Value'}.iteritems())
</snippet></ROW><ROW><id>764244</id><snippet>dict((k.lower(), v) for k,v in {'My Key':'My Value'}.iteritems())
</snippet></ROW><ROW><id>764332</id><snippet>choices</snippet></ROW><ROW><id>764349</id><snippet>sys.path</snippet></ROW><ROW><id>764349</id><snippet>.htaccess</snippet></ROW><ROW><id>764349</id><snippet>.htaccess</snippet></ROW><ROW><id>764374</id><snippet>mapping = { 'A':'1', 'B':'2', 'C':'3', 'D':'4', 'E':'5'}
for k, v in mapping.iteritems():
    my_string = my_string.replace(k, v)
</snippet></ROW><ROW><id>764374</id><snippet>mapping = [ ('A', '1'), ('B', '2'), ('C', '3'), ('D', '4'), ('E', '5') ]
for k, v in mapping:
    my_string = my_string.replace(k, v)
</snippet></ROW><ROW><id>764683</id><snippet>import site
site.addsitedir('/media/server/www/webroot/')
</snippet></ROW><ROW><id>765044</id><snippet>/usr/sbin/sendmail</snippet></ROW><ROW><id>765044</id><snippet>sendmail</snippet></ROW><ROW><id>765044</id><snippet>sendmail</snippet></ROW><ROW><id>765044</id><snippet>sendmail</snippet></ROW><ROW><id>765044</id><snippet>subprocess</snippet></ROW><ROW><id>765044</id><snippet>smtplib</snippet></ROW><ROW><id>765436</id><snippet>try:
    urllib.urlopen(
        "http://example.com",
        proxies={'http':'http://example.com:8080'}
    )
except IOError:
    print "Connection error! (Check proxy)"
else:
    print "All was fine"
</snippet></ROW><ROW><id>765436</id><snippet>import urllib2
import socket

def is_bad_proxy(pip):    
    try:
        proxy_handler = urllib2.ProxyHandler({'http': pip})
        opener = urllib2.build_opener(proxy_handler)
        opener.addheaders = [('User-agent', 'Mozilla/5.0')]
        urllib2.install_opener(opener)
        req=urllib2.Request('http://www.example.com')  # change the URL to test here
        sock=urllib2.urlopen(req)
    except urllib2.HTTPError, e:
        print 'Error code: ', e.code
        return e.code
    except Exception, detail:
        print "ERROR:", detail
        return True
    return False

def main():
    socket.setdefaulttimeout(120)

    # two sample proxy IPs
    proxyList = ['125.76.226.9:80', '213.55.87.162:6588']

    for currentProxy in proxyList:
        if is_bad_proxy(currentProxy):
            print "Bad Proxy %s" % (currentProxy)
        else:
            print "%s is working" % (currentProxy)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>765774</id><snippet>(255, 255, 255, 0)</snippet></ROW><ROW><id>765774</id><snippet>[255, 255, 255, 0]</snippet></ROW><ROW><id>765774</id><snippet>img.putdata(newData)</snippet></ROW><ROW><id>765774</id><snippet>from PIL import Image

img = Image.open('img.png')
img = img.convert("RGBA")
datas = img.getdata()

newData = []
for item in datas:
    if item[0] == 255 and item[1] == 255 and item[2] == 255:
        newData.append((255, 255, 255, 0))
    else:
        newData.append(item)

img.putdata(newData)
img.save("img2.png", "PNG")
</snippet></ROW><ROW><id>765990</id><snippet>timedelta</snippet></ROW><ROW><id>765990</id><snippet>dateutil.relativedelta</snippet></ROW><ROW><id>765990</id><snippet>datetime</snippet></ROW><ROW><id>765990</id><snippet>n</snippet></ROW><ROW><id>765990</id><snippet>from dateutil.relativedelta import relativedelta

def yearsago(years, from_date=None):
    if from_date is None:
        from_date = datetime.now()
    return from_date - relativedelta(years=years)
</snippet></ROW><ROW><id>765990</id><snippet>from datetime import datetime
def yearsago(years, from_date=None):
    if from_date is None:
        from_date = datetime.now()
    try:
        return from_date.replace(year=from_date.year - years)
    except:
        # Must be 2/29!
        assert from_date.month == 2 and from_date.day == 29 # can be removed
        return from_date.replace(month=2, day=28,
                                 year=from_date.year-years)
</snippet></ROW><ROW><id>765990</id><snippet>return</snippet></ROW><ROW><id>765990</id><snippet>    return from_date.replace(month=3, day=1,
                             year=from_date.year-years)
</snippet></ROW><ROW><id>765990</id><snippet>yearsago</snippet></ROW><ROW><id>765990</id><snippet>def num_years(begin, end=None):
    if end is None:
        end = datetime.now()
    num_years = int((end - begin).days / 365.25)
    if begin &gt; yearsago(num_years, end):
        return num_years - 1
    else:
        return num_years
</snippet></ROW><ROW><id>766112</id><snippet>def is_expired(self, check_date=None):
    _check_date = check_date or datetime.utcnow()
    return self.create_date + timedelta(days=15) &lt; _check_date
</snippet></ROW><ROW><id>766163</id><snippet>[::]</snippet></ROW><ROW><id>766163</id><snippet>l = [1,2,3]
</snippet></ROW><ROW><id>766163</id><snippet>l[-1]</snippet></ROW><ROW><id>766163</id><snippet>l[-2]</snippet></ROW><ROW><id>766163</id><snippet>l[-3]</snippet></ROW><ROW><id>766163</id><snippet>step</snippet></ROW><ROW><id>766163</id><snippet>l = [1,2,3,4,5,6,7,8,9,10]
</snippet></ROW><ROW><id>766163</id><snippet>l[::-1]</snippet></ROW><ROW><id>766163</id><snippet>[10,9,8,7,6,5,4,3,2,1]</snippet></ROW><ROW><id>766163</id><snippet>a[::-1]</snippet></ROW><ROW><id>766382</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>766382</id><snippet>&gt;&gt;&gt; a = datetime.datetime.now()
&gt;&gt;&gt; b = datetime.datetime.now()
&gt;&gt;&gt; c = b - a

&gt;&gt;&gt; c
datetime.timedelta(0, 4, 316543)
&gt;&gt;&gt; c.days
0
&gt;&gt;&gt; c.seconds
4
&gt;&gt;&gt; c.microseconds
316543
</snippet></ROW><ROW><id>766382</id><snippet>&gt;&gt;&gt; c / 10
datetime.timedelta(0, 0, 431654)
</snippet></ROW><ROW><id>767268</id><snippet>super(D, self).__init__(*args,**kwargs)
</snippet></ROW><ROW><id>767268</id><snippet>super(A...
</snippet></ROW><ROW><id>767268</id><snippet>super(A, self).__init__</snippet></ROW><ROW><id>767268</id><snippet>A</snippet></ROW><ROW><id>767268</id><snippet>object</snippet></ROW><ROW><id>767268</id><snippet>D</snippet></ROW><ROW><id>767268</id><snippet>A</snippet></ROW><ROW><id>767299</id><snippet>LazyUser</snippet></ROW><ROW><id>767299</id><snippet>a.x</snippet></ROW><ROW><id>767299</id><snippet>a.__dict__['x']</snippet></ROW><ROW><id>767299</id><snippet>type(a).__dict__['x']</snippet></ROW><ROW><id>767299</id><snippet>type(a)</snippet></ROW><ROW><id>767442</id><snippet>nosetests --with-xunit</snippet></ROW><ROW><id>767442</id><snippet>nostests.xml</snippet></ROW><ROW><id>767529</id><snippet>def add(x, y):
    return x + y

a = add          # bind
b = a(34, 1)     # call
</snippet></ROW><ROW><id>767706</id><snippet>subdir</snippet></ROW><ROW><id>767706</id><snippet>__init__.py</snippet></ROW><ROW><id>767706</id><snippet>from subdir import sub1</snippet></ROW><ROW><id>768190</id><snippet>a = x if x is not None else y
</snippet></ROW><ROW><id>768190</id><snippet>false</snippet></ROW><ROW><id>768190</id><snippet>0</snippet></ROW><ROW><id>768190</id><snippet>a = x if x else y
</snippet></ROW><ROW><id>768190</id><snippet>a = x or y
</snippet></ROW><ROW><id>768190</id><snippet>try:
  a = x 
except NameError:
  a = y
</snippet></ROW><ROW><id>768190</id><snippet>a = vars().get('x',y)
</snippet></ROW><ROW><id>768597</id><snippet>__import__()</snippet></ROW><ROW><id>768597</id><snippet>for module in modules:
    try:
        __import__(module)
    except ImportError:
        do_something()
</snippet></ROW><ROW><id>768597</id><snippet>imp.find_module</snippet></ROW><ROW><id>768597</id><snippet>import imp
for module in modules:
    try:
        imp.find_module(module)
    except ImportError:
        do_something()
</snippet></ROW><ROW><id>768597</id><snippet>eval()</snippet></ROW><ROW><id>768597</id><snippet>import</snippet></ROW><ROW><id>768597</id><snippet>exec</snippet></ROW><ROW><id>768597</id><snippet>for module in modules:
    try:
        exec 'import ' + module
    except ImportError:
        do_something()
</snippet></ROW><ROW><id>768720</id><snippet>subprocess</snippet></ROW><ROW><id>768720</id><snippet>shell=False</snippet></ROW><ROW><id>768720</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>768720</id><snippet>os.system()</snippet></ROW><ROW><id>769610</id><snippet>__import__('structures.index')</snippet></ROW><ROW><id>769610</id><snippet>structures = __import__('structures.index')
structures.index.SomeClass(...)
</snippet></ROW><ROW><id>769610</id><snippet>__import__</snippet></ROW><ROW><id>769610</id><snippet>neoform.structures.index</snippet></ROW><ROW><id>769610</id><snippet>index</snippet></ROW><ROW><id>769610</id><snippet>structures = __import__('neoform.structures.index', 
                        fromlist=['does not in fact matter what goes here!'])
</snippet></ROW><ROW><id>769610</id><snippet>packages</snippet></ROW><ROW><id>769610</id><snippet>index</snippet></ROW><ROW><id>769610</id><snippet>MyClass</snippet></ROW><ROW><id>769610</id><snippet>modules = [ __import__('neoform.%s.index' % pkg, fromlist=['a']) 
            for pkg in packages ]
objects = [ m.MyClass() for m in modules ]
</snippet></ROW><ROW><id>769799</id><snippet>procmail</snippet></ROW><ROW><id>769849</id><snippet>mymodel.objects.filter(first_name__icontains="Foo", first_name__icontains="Bar")
</snippet></ROW><ROW><id>770247</id><snippet>setup.py</snippet></ROW><ROW><id>770247</id><snippet>setup.py</snippet></ROW><ROW><id>770247</id><snippet>setup()</snippet></ROW><ROW><id>770247</id><snippet>setup.py</snippet></ROW><ROW><id>770247</id><snippet>setup()</snippet></ROW><ROW><id>770247</id><snippet>import sys
if len(sys.args) &gt; 1 and sys.args[1] == 'script':
    setup(name='tvnamer', ...)
else:
    setup(name='tvdb_api', ...)
</snippet></ROW><ROW><id>770875</id><snippet>class MyClass(object):
...     def my_method(self): pass
...
&gt;&gt;&gt; MyClass.my_method
&lt;function my_method at 0x661c38&gt;
</snippet></ROW><ROW><id>770875</id><snippet>&gt;&gt;&gt; MyClass().my_method
&lt;bound method MyClass.my_method of &lt;__main__.myClass object at 0x6e2498&gt;&gt;
</snippet></ROW><ROW><id>770875</id><snippet>MyClass.my_method(MyClass())</snippet></ROW><ROW><id>770875</id><snippet>sorted()</snippet></ROW><ROW><id>770875</id><snippet>getX</snippet></ROW><ROW><id>770875</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>770875</id><snippet>operator.methodcaller</snippet></ROW><ROW><id>770898</id><snippet>$ python ./manage.py startapp foo
</snippet></ROW><ROW><id>770898</id><snippet>INSTALLED_APPS += ('foo',)
</snippet></ROW><ROW><id>770898</id><snippet>./djangoproject
    __init__.py
    settings.py
    urls.py
    etc..
    foo/
        __init__.py
        templatetags/
            __init__.py
            range_template.py
</snippet></ROW><ROW><id>771165</id><snippet>sys.path</snippet></ROW><ROW><id>771165</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>771165</id><snippet>C:\Python25\Lib\site-packages\gaeutilities-1.2.1</snippet></ROW><ROW><id>771165</id><snippet>sys.path</snippet></ROW><ROW><id>771165</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>771165</id><snippet>*.pyc</snippet></ROW><ROW><id>771165</id><snippet>appengines_utilities</snippet></ROW><ROW><id>771356</id><snippet>fastcgi.server = (
".php" =&gt; ((
"bin-path" =&gt; "/usr/bin/php5-cgi",
"socket" =&gt; "/tmp/php.socket"
)),
"django.fcgi" =&gt; (
"main" =&gt; (
"host" =&gt; "127.0.0.1",
"port" =&gt; 9090, #set the port numbers to what-eva you want
),
),
"admin.fcgi" =&gt; (
"admin" =&gt; (
"host" =&gt; "127.0.0.1",
"port" =&gt; 9091,
)
)
)
</snippet></ROW><ROW><id>771371</id><snippet>locals()</snippet></ROW><ROW><id>771371</id><snippet>greeting = "Hello World"

# Use this in versions prior to 2.6:
print("My first programm; %(greeting)s" % locals())

# Since Python 2.6, the recommended example is:
print("My first program; {greeting}".format(**locals()))

# Works in 2.x and 3.x:
from string import Template
print(Template("My first programm; $greeting").substitute(locals()))
</snippet></ROW><ROW><id>772180</id><snippet>import pygame
import random
import sys

class Ball:
    def __init__(self,X,Y):
    	self.velocity = [1,1]
    	self.ball_image = pygame.image.load ('Beachball.jpg'). convert()
    	self.ball_boundary = self.ball_image.get_rect (center=(X,Y))
    	self.sound = pygame.mixer.Sound ('Thump.wav')

if __name__ =='__main__':
    width = 800
    height = 600
    background_colour = 0,0,0
    pygame.init()
    frame = pygame.display.set_mode((width, height))
    pygame.display.set_caption("Bouncing Ball animation")
    num_balls = 1000
    ball_list = []
    for i in range(num_balls):
    	ball_list.append( Ball(random.randint(0, width),random.randint(0, height)) )
    while True:
    	for event in pygame.event.get():
    		print event 
    		if event.type == pygame.QUIT:
    			sys.exit(0)
    	frame.fill (background_colour)
    	for ball in ball_list:
    		if ball.ball_boundary.left &lt; 0 or ball.ball_boundary.right &gt; width:
    			ball.sound.play()
    			ball.velocity[0] = -1 * ball.velocity[0]
    		if ball.ball_boundary.top &lt; 0 or ball.ball_boundary.bottom &gt; height:
    			ball.sound.play()
    			ball.velocity[1] = -1 * ball.velocity[1]

    		ball.ball_boundary = ball.ball_boundary.move (ball.velocity)
    		frame.blit (ball.ball_image, ball.ball_boundary)
    	pygame.display.flip()
</snippet></ROW><ROW><id>772644</id><snippet># Solve square puzzle
import operator

class Node:
# Here is how the squares are defined
    def __init__(self, ID, base):
        self.posx = ID % base
        self.posy = ID / base
        self.base = base
    def isValidNode(self, posx, posy):
        return (0&lt;=posx&lt;self.base and 0&lt;=posy&lt;self.base)

    def getNeighbors(self):
        neighbors = []
        if self.isValidNode(self.posx + 3, self.posy): neighbors.append(self.posx + 3 + self.posy*self.base)
        if self.isValidNode(self.posx + 2, self.posy + 2): neighbors.append(self.posx + 2 + (self.posy+2)*self.base)
        if self.isValidNode(self.posx, self.posy + 3): neighbors.append(self.posx + (self.posy+3)*self.base)
        if self.isValidNode(self.posx - 2, self.posy + 2): neighbors.append(self.posx - 2 + (self.posy+2)*self.base)
        if self.isValidNode(self.posx - 3, self.posy): neighbors.append(self.posx - 3 + self.posy*self.base)
        if self.isValidNode(self.posx - 2, self.posy - 2): neighbors.append(self.posx - 2 + (self.posy-2)*self.base)
        if self.isValidNode(self.posx, self.posy - 3): neighbors.append(self.posx + (self.posy-3)*self.base)
        if self.isValidNode(self.posx + 2, self.posy - 2): neighbors.append(self.posx + 2 + (self.posy-2)*self.base)
        return neighbors


# the nodes go like this:
# 0 =&gt; bottom left
# (base-1) =&gt; bottom right
# base*(base-1) =&gt; top left
# base**2 -1 =&gt; top right
def solve(start_nodeID, base):
    all_nodes = []
    #Traverse list is the list to keep track of which moves are made (the id numbers of nodes in a list)
    traverse_list = [start_nodeID]
    for i in range(0, base**2): all_nodes.append(Node(i, base))
    togo = dict()
    #Togo is a dictionary with (nodeID:[list of neighbors]) tuples
    togo[start_nodeID] = all_nodes[start_nodeID].getNeighbors()
    solution_count = 0


    while(True):
        # The search is exhausted
        if not traverse_list:
            print "Somehow, the search tree is exhausted and you have reached the divine salvation."
            print "Number of solutions:" + str(solution_count)
            break

        # Get the next node to hop
        try:
            current_node_ID = togo[traverse_list[-1]].pop(0)
        except IndexError:
            del togo[traverse_list.pop()]
            continue

        # end condition check
        traverse_list.append(current_node_ID)
        if(len(traverse_list) == base**2):
            #OMG, a solution is found
            #print traverse_list
            solution_count += 1
            #Print solution count at a steady rate
            if(solution_count%100 == 0): 
                print solution_count
                # The solution list can be returned (to visualize the solution in a simple GUI)
                #return traverse_list


        # get valid neighbors
        valid_neighbor_IDs = []
        candidate_neighbor_IDs = all_nodes[current_node_ID].getNeighbors()
        valid_neighbor_IDs = filter(lambda id: not id in traverse_list, candidate_neighbor_IDs)

        # if no valid neighbors, take a step back
        if not valid_neighbor_IDs:
            traverse_list.pop()
            continue

        # if there exists a neighbor which is accessible only through the current node (island)
        # and it is not the last one to go, the situation is not promising; so just eliminate that
        stuck_check = True
        if len(traverse_list) != base**2-1 and any(not filter(lambda id: not id in traverse_list, all_nodes[n].getNeighbors()) for n in valid_neighbor_IDs): stuck_check = False

        # if stuck
        if not stuck_check:
            traverse_list.pop()
            continue

        # sort the neighbors according to accessibility (the least accessible first)
        neighbors_ncount = []
        for neighbor in valid_neighbor_IDs:
            candidate_nn = all_nodes[neighbor].getNeighbors()
            valid_nn = [id for id in candidate_nn if not id in traverse_list]
            neighbors_ncount.append(len(valid_nn))
        n_dic = dict(zip(valid_neighbor_IDs, neighbors_ncount))
        sorted_ndic = sorted(n_dic.items(), key=operator.itemgetter(1))

        sorted_valid_neighbor_IDs = []
        for (node, ncount) in sorted_ndic: sorted_valid_neighbor_IDs.append(node)



        # if current node does have valid neighbors, add them to the front of togo list
        # in a sorted way
        togo[current_node_ID] = sorted_valid_neighbor_IDs


# To display a solution simply
def drawGUI(size, solution):
    # GUI Code (If you can call it a GUI, though)
    import Tkinter
    root = Tkinter.Tk()
    canvas = Tkinter.Canvas(root, width=size*20, height=size*20)
    #canvas.create_rectangle(0, 0, size*20, size*20)
    canvas.pack()

    for x in range(0, size*20, 20):
        canvas.create_line(x, 0, x, size*20)
        canvas.create_line(0, x, size*20, x)

    cnt = 1
    for el in solution:
        canvas.create_text((el % size)*20 + 4,(el / size)*20 + 4,text=str(cnt), anchor=Tkinter.NW)
        cnt += 1
    root.mainloop()


print('Start of run')

# it is the moment
solve(0, 10)

#Optional, to draw a returned solution
#drawGUI(10, solve(0, 10))

raw_input('End of Run...')
</snippet></ROW><ROW><id>772929</id><snippet>#4</snippet></ROW><ROW><id>772929</id><snippet>import re
startwith = "MOON"
endwith = "GOLF"
cklength = re.compile('.{' + str(len(startwith)) + '}(\n)?$', re.I)
filename = "C:/dict.txt"
words = set(x.strip().upper() for x in open(filename) if x.match(cklength))
</snippet></ROW><ROW><id>773472</id><snippet>myList[1:2, ..., 0]
</snippet></ROW><ROW><id>773472</id><snippet>__getitem__</snippet></ROW><ROW><id>773472</id><snippet>Ellipsis</snippet></ROW><ROW><id>773472</id><snippet>[:2,:2]</snippet></ROW><ROW><id>773472</id><snippet>&gt;&gt;&gt; a
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12],
       [13, 14, 15, 16]])

&gt;&gt;&gt; a[:2,:2]  # top left
array([[1, 2],
       [5, 6]])
</snippet></ROW><ROW><id>773472</id><snippet>[:]</snippet></ROW><ROW><id>773472</id><snippet>a[...,0]</snippet></ROW><ROW><id>773472</id><snippet>a[:,:,0]</snippet></ROW><ROW><id>773472</id><snippet>a[:,:,:,0]</snippet></ROW><ROW><id>773472</id><snippet>a[0,...,0]</snippet></ROW><ROW><id>773472</id><snippet>a[0,:,:,0]</snippet></ROW><ROW><id>773472</id><snippet>...</snippet></ROW><ROW><id>773472</id><snippet>&gt;&gt;&gt; ...
Ellipsis
</snippet></ROW><ROW><id>773603</id><snippet>locals()</snippet></ROW><ROW><id>773603</id><snippet>&gt;&gt;&gt; print apple
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
NameError: name 'apple' is not defined
&gt;&gt;&gt; print banana
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
NameError: name 'banana' is not defined

&gt;&gt;&gt; variables = {"apple" : "a rigid, juicy fruit", "banana" : "a soft, fleshy fruit"}
&gt;&gt;&gt; for variable,value in variables.iteritems():
...  locals()[variable] = value
... 
&gt;&gt;&gt; print apple
a rigid, juicy fruit
&gt;&gt;&gt; print banana
a soft, fleshy fruit
</snippet></ROW><ROW><id>773846</id><snippet>def user_updater(self):
    self.user_updater_id = self.user_label.after(1000, self.user_updater)
    lines = []
    for user in self.server.Users:
        lines.append(user)
    self.user_label["text"] = "\n".join(lines)

def stop_user_updater(self):
    self.user_label.after_cancel(self.user_updater_id)
</snippet></ROW><ROW><id>773949</id><snippet>import Tkinter

class Monitor(object):

  def __init__(self):
    self.mw = Tkinter.Tk()
    self.mw.title("Messages by NeuronSimulation")
    self.text = Tkinter.Text(self.mw, width = 80, height = 30)
    self.text.pack()
    self.mw.protocol(name="WM_DELETE_WINDOW", func=self.handler)
    self.is_mw = True

  def write(self, s):
    if self.is_mw:
      self.text.insert(Tkinter.END, str(s) + "\n")
    else:
      print str(s)

  def handler(self):
    self.is_mw = False
    self.mw.quit()
    self.mw.destroy()

monitor = Monitor()
</snippet></ROW><ROW><id>773949</id><snippet>from monitor import monitor
monitor.write("Foo")
</snippet></ROW><ROW><id>774547</id><snippet>from ID3 import ID3

mp3_filepath = r'/music/song.mp3'
id3_data = ID3(mp3_filepath)
print 'Artist:', id3_data['ARTIST']
print 'Title:', id3_data['TITLE']
</snippet></ROW><ROW><id>774547</id><snippet>os</snippet></ROW><ROW><id>774547</id><snippet>import os

def mp3_files(root):
  # this is a generator that will return mp3 file paths within given dir
  for f in os.listdir(root):
      fullpath = os.path.join(root,f)
      if os.path.isdir(fullpath) and not os.path.islink(fullpath):
          for x in mp3_files(fullpath):  # recurse into subdir
              yield x
      else:
          if fullpath[len(fullpath)-3:] == 'mp3':
            yield fullpath

for p in mp3_files(root_dir):
  id3_data = ID3(p)
  print 'Artist:', id3_data['ARTIST']
  print 'Title:', id3_data['TITLE']
</snippet></ROW><ROW><id>774792</id><snippet>++</snippet></ROW><ROW><id>774792</id><snippet>+=</snippet></ROW><ROW><id>774987</id><snippet>def total_and_item(sequence):
    total = 0
    for i in sequence:
        total += i
        yield (total, i)

list2 = list(total_and_item(list1))
</snippet></ROW><ROW><id>775095</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; str(datetime.timedelta(seconds=666))
'0:11:06'
</snippet></ROW><ROW><id>775249</id><snippet>for file in DirectoryWalker(os.path.abspath('.')):
    print file
</snippet></ROW><ROW><id>775249</id><snippet>os.path.normpath
</snippet></ROW><ROW><id>775249</id><snippet>os.path.join
</snippet></ROW><ROW><id>775344</id><snippet>some_dictionary_with_the_data = {
    'name': 'awesome song',
    'artist': 'some band',
    etc...
}
cursor.execute ("""
            INSERT INTO Songs (SongName, SongArtist, SongAlbum, SongGenre, SongLength, SongLocation)
            VALUES
                (%(name)s, %(artist)s, %(album)s, %(genre)s, %(length)s, %(location)s)

        """, some_dictionary_with_the_data)
</snippet></ROW><ROW><id>775360</id><snippet>import os
for p in os.environ["PATH"].split(os.pathsep):
    print os.path.exists(os.path.join(p, 'notepad.exe'))
</snippet></ROW><ROW><id>775360</id><snippet>if not any([os.path.exists(os.path.join(p, executable) for p in os.environ["PATH"].split(os.pathsep)]):
    print "can't find %s" % executable
</snippet></ROW><ROW><id>775515</id><snippet>CLIENT: "UPLOAD acbd18db4cc2f85cedef654fccc4a4d8 253521"
SERVER: "OK"
(server splits the text line to get the command, checksum, and size)
CLIENT: "010101101010101100010101010etc..." (up to 253521 bytes)
(server reasembles all received data into a file, then checksums it to make sure it matches the original)
SERVER: "YEP GOT IT"
CLIENT: "COOL CYA"
</snippet></ROW><ROW><id>775598</id><snippet>u[1,2]</snippet></ROW><ROW><id>775598</id><snippet>u[1,2]</snippet></ROW><ROW><id>775698</id><snippet>def app(environ, start_response):
    path    = environ['PATH_INFO']
    method  = environ['REQUEST_METHOD']
    if method == 'POST':
        if path.startswith('/test'):
            try:
                request_body_size = int(environ['CONTENT_LENGTH'])
                request_body = environ['wsgi.input'].read(request_body_size)
            except (TypeError, ValueError):
                request_body = "0"
            try:
                response_body = str(request_body)
            except:
                response_body = "error"
            status = '200 OK'
            headers = [('Content-type', 'text/plain')]
            start_response(status, headers)
            return [response_body]
    else:
        response_body = open('test.html').read()
        status = '200 OK'
        headers = [('Content-type', 'text/html'),
                    ('Content-Length', str(len(response_body)))]
        start_response(status, headers)
        return [response_body]
</snippet></ROW><ROW><id>775792</id><snippet>&gt;&gt;&gt; import mimetypes
&gt;&gt;&gt; mimetypes.init()
&gt;&gt;&gt; mimetypes.knownfiles
['/etc/mime.types', '/etc/httpd/mime.types', ... ]
&gt;&gt;&gt; mimetypes.suffix_map['.tgz']
'.tar.gz'
&gt;&gt;&gt; mimetypes.encodings_map['.gz']
'gzip'
&gt;&gt;&gt; mimetypes.types_map['.tgz']
'application/x-tar-gz'
</snippet></ROW><ROW><id>776425</id><snippet>sphinx-build</snippet></ROW><ROW><id>776425</id><snippet>from pkg_resources import load_entry_point

load_entry_point('Sphinx==0.5.1', 'console_scripts', 'sphinx-build')()
</snippet></ROW><ROW><id>776425</id><snippet>entry-points.txt</snippet></ROW><ROW><id>776425</id><snippet>sphinx.main</snippet></ROW><ROW><id>776425</id><snippet>__init__.py</snippet></ROW><ROW><id>776425</id><snippet>sphinx-build</snippet></ROW><ROW><id>776425</id><snippet>build</snippet></ROW><ROW><id>776425</id><snippet>Sphinx</snippet></ROW><ROW><id>776425</id><snippet>from sphinx.application import Sphinx
s = Sphinx(...)
s.build(...)
</snippet></ROW><ROW><id>776425</id><snippet>Sphinx.__init__()</snippet></ROW><ROW><id>776425</id><snippet>Sphinx.build()</snippet></ROW><ROW><id>776891</id><snippet>import cherrypy

class HelloWorld(object):
    def index(self):
        return "Hello World!"
    index.exposed = True

cherrypy.quickstart(HelloWorld())
</snippet></ROW><ROW><id>776891</id><snippet>localhost</snippet></ROW><ROW><id>776891</id><snippet>8080</snippet></ROW><ROW><id>777528</id><snippet>from django.utils.safestring import mark_safe

currencies = ((mark_safe('$'), mark_safe('$')), 
              (mark_safe('£'), mark_safe('£')), 
              (mark_safe('&amp;euro;'), mark_safe('&amp;euro;')))
</snippet></ROW><ROW><id>777528</id><snippet># coding=utf-8
</snippet></ROW><ROW><id>777528</id><snippet>currencies = (('$', '$'), 
              ('£', '£'), 
              ('€', '€'))
</snippet></ROW><ROW><id>778059</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>778059</id><snippet>proc = []
proc.append(Popen(['svn', 'blame', shellquote(filename)], stdout=PIPE))
proc.append(Popen(['tr', '-s', r"'\040'"], stdin=proc[-1]), stdout=PIPE)
</snippet></ROW><ROW><id>778059</id><snippet>proc[-1]</snippet></ROW><ROW><id>778059</id><snippet>proc.append(Popen(['tr', '-s', r"'\040'"], stdin=proc[-1].stdout, stdout=PIPE))
</snippet></ROW><ROW><id>778059</id><snippet>tr</snippet></ROW><ROW><id>778059</id><snippet>cut</snippet></ROW><ROW><id>778059</id><snippet>tr</snippet></ROW><ROW><id>778059</id><snippet>cut</snippet></ROW><ROW><id>778654</id><snippet>{
string $cons[] = `ls -type "constraint"`;
for ( $con in $cons ){
	string $targetAttrString = ( $con+ ".target" );
	string $connections[] = `listConnections $targetAttrString`;
	string $connectionsFlattened[] = stringArrayRemoveDuplicates($connections);
	for ( $f in $connectionsFlattened )
		if ( $f != $con )
			print ( $f+ " is a target\n" );
}
</snippet></ROW><ROW><id>779552</id><snippet>__file__</snippet></ROW><ROW><id>779552</id><snippet>import os
this_dir, this_filename = os.path.split(__file__)
DATA_PATH = os.path.join(this_dir, "data", "data.txt")
print open(DATA_PATH).read()
</snippet></ROW><ROW><id>779669</id><snippet>import gtk.gdk
import pynotify

n = pynotify.Notification("This is my title", "This is my description")
n.set_hint('x', gtk.gdk.screen_width()/2.)
n.set_hint('y', gtk.gdk.screen_height()/2.)
n.show()
</snippet></ROW><ROW><id>779693</id><snippet>C:\WINDOWS\system32\cmd.exe /K &lt;command&gt;
</snippet></ROW><ROW><id>779790</id><snippet>include *.jpg
</snippet></ROW><ROW><id>780075</id><snippet>rangeList = range(0,21)
lastNumber = rangeList[len(rangeList)-1:][0]
</snippet></ROW><ROW><id>780075</id><snippet>lastNumber = rangeList[-1]
</snippet></ROW><ROW><id>780344</id><snippet>unquote</snippet></ROW><ROW><id>780344</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.unquote("myemail%40gmail.com")
'myemail@gmail.com'
</snippet></ROW><ROW><id>780344</id><snippet>unquote_plus</snippet></ROW><ROW><id>780409</id><snippet>a = 123456
b = str(a)
c = []

for digit in b:
    c.append (int(digit))

print c
</snippet></ROW><ROW><id>780728</id><snippet>str(A())</snippet></ROW><ROW><id>780728</id><snippet>__str__</snippet></ROW><ROW><id>780728</id><snippet>dict.__str__()</snippet></ROW><ROW><id>780728</id><snippet>dict.__str__()</snippet></ROW><ROW><id>781404</id><snippet>ROOT_URLCONF</snippet></ROW><ROW><id>781749</id><snippet>from multiprocessing import Process
import time

class Starter(object):
    def __init__(self):
        self.state = False

x = Starter()

class EdgeRenderer(Process):
    def __init__(self,starter,*args,**kwargs):
        Process.__init__(self,*args,**kwargs)
        self.starter=starter
    def run(self):
        self.starter.state = "HAM SANDWICH"
        time.sleep(1)
        print self.starter.state

a = EdgeRenderer(x)
a.start()
x.state = True
a.join()
print x.state
</snippet></ROW><ROW><id>781749</id><snippet>HAM SANDWICH
True
</snippet></ROW><ROW><id>782462</id><snippet>w-&gt;setContextMenuPolicy(Qt::CustomContextMenu);
</snippet></ROW><ROW><id>782462</id><snippet>connect(w, SIGNAL(customContextMenuRequested(const QPoint &amp;)), this, SLOT(ctxMenu(const QPoint &amp;)));
</snippet></ROW><ROW><id>782462</id><snippet>void A::ctxMenu(const QPoint &amp;pos) {
    QMenu *menu = new QMenu;
    menu-&gt;addAction(tr("Test Item"), this, SLOT(test_slot()));
    menu-&gt;exec(w-&gt;mapToGlobal(pos));
}
</snippet></ROW><ROW><id>782462</id><snippet>self.w = QWhatever();
self.w.setContextMenuPolicy(Qt.CustomContextMenu)
self.connect(self.w,SIGNAL('customContextMenuRequested(QPoint)'), self.ctxMenu)
</snippet></ROW><ROW><id>782609</id><snippet>&gt;&gt;&gt; def caller(func, *args, **kwargs):
...     return func(*args, **kwargs)
...
&gt;&gt;&gt; def hello(a, b, c):
...     print a, b, c
...
&gt;&gt;&gt; caller(hello, 1, b=5, c=7)
1 5 7
</snippet></ROW><ROW><id>782676</id><snippet>rlcompleter.Completer</snippet></ROW><ROW><id>782676</id><snippet>readline</snippet></ROW><ROW><id>782676</id><snippet>import rlcompleter
import readline
class MyCompleter(rlcompleter.Completer):
    def global_matches(self, text):
        ....
    def attr_matches(self, text):
        ....

import readline
readline.set_completer(MyCompleter().complete)
</snippet></ROW><ROW><id>782984</id><snippet>$ cursive --help
usage: cursive ...
</snippet></ROW><ROW><id>782984</id><snippet>def cursive_command():
    args = sys.argv[1:]
    if len(args) &lt; 1:
        print "usage: ..."
</snippet></ROW><ROW><id>783386</id><snippet>...

def On_Idle(self, event):
    if not self.queued_batch:
        wx.CallLater(1000, self.Do_Batch)
        self.queued_batch = True

def Do_Batch(self):
    # &lt;- insert your stuff here
    self.queued_batch = False

...
</snippet></ROW><ROW><id>783515</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>783843</id><snippet>f.seek(f.tell())
</snippet></ROW><ROW><id>783867</id><snippet>import inspect

def compact(*names):
    caller = inspect.stack()[1][0] # caller of compact()
    vars = {}
    for n in names:
        if n in caller.f_locals:
            vars[n] = caller.f_locals[n]
        elif n in caller.f_globals:
            vars[n] = caller.f_globals[n]
    return vars

def extract(vars):
    caller = inspect.stack()[1][0] # caller of extract()
    for n, v in vars.items():
        caller.f_locals[n] = v   # NEVER DO THIS ;-)
</snippet></ROW><ROW><id>783927</id><snippet>def trunc(f, n):
    '''Truncates/pads a float f to n decimal places without rounding'''
    slen = len('%.*f' % (n, f))
    return str(f)[:slen]
</snippet></ROW><ROW><id>783927</id><snippet>def trunc(f, n):
    '''Truncates/pads a float f to n decimal places without rounding'''
    return ('%.*f' % (n + 1, f))[:-1]
</snippet></ROW><ROW><id>784095</id><snippet>from sqlalchemy import Column, Integer, String, Table, create_engine
from sqlalchemy import orm, MetaData, Column, ForeignKey
from sqlalchemy.orm import relation, mapper, sessionmaker
from sqlalchemy.orm.collections import column_mapped_collection
from sqlalchemy.ext.associationproxy import association_proxy
</snippet></ROW><ROW><id>784095</id><snippet>engine = create_engine('sqlite:///:memory:', echo=True)
meta = MetaData(bind=engine)
</snippet></ROW><ROW><id>784095</id><snippet>tb_items = Table('items', meta, 
        Column('id', Integer, primary_key=True), 
        Column('name', String(20)),
        Column('description', String(100)),
    )
tb_notes = Table('notes', meta, 
        Column('id_item', Integer, ForeignKey('items.id'), primary_key=True),
        Column('name', String(20), primary_key=True),
        Column('value', String(100)),
    )
meta.create_all()
</snippet></ROW><ROW><id>784095</id><snippet>association_proxy</snippet></ROW><ROW><id>784095</id><snippet>class Note(object):
    def __init__(self, name, value):
        self.name = name
        self.value = value
class Item(object):
    def __init__(self, name, description=''):
        self.name = name
        self.description = description
    notes = association_proxy('_notesdict', 'value', creator=Note)
</snippet></ROW><ROW><id>784095</id><snippet>mapper(Note, tb_notes)
mapper(Item, tb_items, properties={
        '_notesdict': relation(Note, 
             collection_class=column_mapped_collection(tb_notes.c.name)),
    })
</snippet></ROW><ROW><id>784095</id><snippet>Session = sessionmaker(bind=engine)
s = Session()

i = Item('ball', 'A round full ball')
i.notes['color'] = 'orange'
i.notes['size'] = 'big'
i.notes['data'] = 'none'

s.add(i)
s.commit()
print i.notes
</snippet></ROW><ROW><id>784095</id><snippet>{u'color': u'orange', u'data': u'none', u'size': u'big'}
</snippet></ROW><ROW><id>784095</id><snippet>&gt;&gt;&gt; print list(tb_notes.select().execute())
[(1, u'color', u'orange'), (1, u'data', u'none'), (1, u'size', u'big')]
</snippet></ROW><ROW><id>784145</id><snippet>i</snippet></ROW><ROW><id>784145</id><snippet>&lt;div id="right_pod"&gt;
{% for i in c %}
    &lt;div class="user_pod"&gt;
        {{ i.0.from_user }}
    &lt;/div&gt;
{% endfor %}
</snippet></ROW><ROW><id>784154</id><snippet>myvars</snippet></ROW><ROW><id>784154</id><snippet>myvars</snippet></ROW><ROW><id>784154</id><snippet>c1</snippet></ROW><ROW><id>784154</id><snippet>testClass</snippet></ROW><ROW><id>784154</id><snippet>c1</snippet></ROW><ROW><id>784154</id><snippet>c2</snippet></ROW><ROW><id>784154</id><snippet>class testClass:
    def __init__(self):
        self.myvars = dict()

    def __getattr__(self, k):
        if self.myvars.has_key(k):
            return self.myvars[k]

    def __setattr__(self, k, v):
        self.myvars[k] = v

    def __str__(self):
        l = []
        for k, v in self.myvars.iteritems():
            l.append(str(k) + ":" + str(v))
        return " - ".join(l)
</snippet></ROW><ROW><id>784337</id><snippet>Foo.hello.im_func(bar)
</snippet></ROW><ROW><id>785086</id><snippet>import os
random_string = os.urandom(string_length)
</snippet></ROW><ROW><id>785149</id><snippet>subprocess</snippet></ROW><ROW><id>785149</id><snippet>os.system</snippet></ROW><ROW><id>785149</id><snippet>os.popen</snippet></ROW><ROW><id>785149</id><snippet>import subprocess
resultMD5 = subprocess.Popen(["md5sum","myFile"],stdout=subprocess.PIPE).communicate()[0]
</snippet></ROW><ROW><id>785149</id><snippet>hashlib</snippet></ROW><ROW><id>785149</id><snippet>import hashlib
resultMD5 = hashlib.md5(open("myFile").read()).hexdigest()
</snippet></ROW><ROW><id>786081</id><snippet>import win32gui
GetPixel(GetDC(WindowFromPoint( (XPos,YPos) )), XPos , YPos )
</snippet></ROW><ROW><id>786249</id><snippet>context_instance</snippet></ROW><ROW><id>786249</id><snippet>RequestContext</snippet></ROW><ROW><id>786249</id><snippet>views.py</snippet></ROW><ROW><id>786249</id><snippet>from django.template import RequestContext
</snippet></ROW><ROW><id>786249</id><snippet>def someview(request, ...)
    ...
    return render_to_response('viewtemplate.html', someContext, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>786249</id><snippet>settings.py</snippet></ROW><ROW><id>786249</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = (
    'django.core.context_processors.auth',
    ...
    'myproj.app.context_processors.dynamic',
    'myproj.app.context_processors.sidebar',
    'myproj.app.context_processors.etc',
)
</snippet></ROW><ROW><id>786249</id><snippet>context_processors</snippet></ROW><ROW><id>786249</id><snippet>request</snippet></ROW><ROW><id>786249</id><snippet>context_processors.py</snippet></ROW><ROW><id>786249</id><snippet>context_processors.py</snippet></ROW><ROW><id>786249</id><snippet>def sidebar(request):
    recent_entry_list = Entry.objects...
    recent_comment_list = Comment.objects...
    return {'recent_entry_list': recent_entry_list, 'recent_comment_list': recent_comment_list}
</snippet></ROW><ROW><id>786369</id><snippet>poll_id</snippet></ROW><ROW><id>786369</id><snippet>url(r'^json/polls/(?P&lt;poll_id&gt;\d+)/choices/$', json_choice_resource, {'is_entry':False}),
</snippet></ROW><ROW><id>786369</id><snippet>json_choice_resource</snippet></ROW><ROW><id>786369</id><snippet>django_restapi.model_resource.Collection</snippet></ROW><ROW><id>786369</id><snippet>read()</snippet></ROW><ROW><id>786369</id><snippet>Collection</snippet></ROW><ROW><id>786386</id><snippet>my $psTable = Process-&gt;new();

# Get list of process owned by 'root'
for my $pid ( $psTable-&gt;getbyuser("root") ) {

    $psDetail = $psList-&gt;getdetail( $pid );
    # Do something with the psDetail..

}
</snippet></ROW><ROW><id>786893</id><snippet>In [1]: from Scientific.Geometry import Vector
In [2]: v1 = Vector(1, 2, 3)
In [3]: v2 = Vector(0, 8, 2)               
In [4]: v1.cross(v2)
Out[4]: Vector(-20.000000,-2.000000,8.000000)
In [5]: v1.normal()
Out[5]: Vector(0.267261,0.534522,0.801784)
In [6]: v2.cross(v1)
Out[6]: Vector(20.000000,2.000000,-8.000000)
In [7]: v1*v2 # dot product
Out[7]: 22.0
</snippet></ROW><ROW><id>786902</id><snippet>re.sub(pattern, repl, string[, count])</snippet></ROW><ROW><id>786902</id><snippet>&gt;&gt;&gt; y = re.sub(r, 'blue', x)
&gt;&gt;&gt; y
'The sky is blue'
</snippet></ROW><ROW><id>786902</id><snippet>RegexObject.sub(repl, string[, count=0])</snippet></ROW><ROW><id>786902</id><snippet>&gt;&gt;&gt; z = r.sub('blue', x)
&gt;&gt;&gt; z
'The sky is blue'
</snippet></ROW><ROW><id>787282</id><snippet>qs.filter( **{ 'attitudes__%s'%arg:True } )
</snippet></ROW><ROW><id>787300</id><snippet>from mechanize import Browser

b = Browser()
b.open("http://utahcritseries.com/RawResults.aspx")
b.select_form(nr=0)

year = b.form.find_control(type='select')
year.get(label='2005').selected = True

src = b.submit().read()
print src
</snippet></ROW><ROW><id>787300</id><snippet>easy_install mechanize</snippet></ROW><ROW><id>787583</id><snippet>from datetime import datetime, timedelta
x = datetime.now() + timedelta(seconds=3)
x += timedelta(seconds=3)
</snippet></ROW><ROW><id>787646</id><snippet>import rsvg
from gtk import gdk
h = rsvg.Handle('svg-file.svg')
pixbuf = h.get_pixbuf()
pixbuf.save('foobar.png', 'png')
</snippet></ROW><ROW><id>787646</id><snippet>from gtk import gdk</snippet></ROW><ROW><id>787646</id><snippet>save</snippet></ROW><ROW><id>787721</id><snippet>PyAPI_FUNC(int) PyObject_IsTrue(PyObject *);
</snippet></ROW><ROW><id>787791</id><snippet>import email, re
data = file('testmessage.txt').read()
data = re.sub(r'\r(?!\n)', '\r\n', data)  # Bare \r becomes \r\n
msg  = email.message_from_string( data )
payload = msg.get_payload(decode=True)
print payload
</snippet></ROW><ROW><id>787832</id><snippet>f_frsize</snippet></ROW><ROW><id>787832</id><snippet>f_bsize</snippet></ROW><ROW><id>787832</id><snippet>&gt;&gt;&gt; s = os.statvfs('/')
&gt;&gt;&gt; (s.f_bavail * s.f_frsize) / 1024
23836592L
&gt;&gt;&gt; os.system('df -k /')
Filesystem   1024-blocks     Used Available Capacity  Mounted on
/dev/disk0s2   116884912 92792320  23836592    80%    /
</snippet></ROW><ROW><id>787862</id><snippet>python3</snippet></ROW><ROW><id>787862</id><snippet>python3</snippet></ROW><ROW><id>787881</id><snippet>matcher = re.compile(myExpression, re.IGNORECASE)
</snippet></ROW><ROW><id>788055</id><snippet>params = urllib.urlencode(dict([k, v.encode('utf-8')] for k, v in params.items()))
</snippet></ROW><ROW><id>788055</id><snippet>params['foo'] = my_raw_input.decode('iso-8859-1')
params = urllib.urlencode(dict([k, v.encode('utf-8')] for k, v in params.items()))
</snippet></ROW><ROW><id>788242</id><snippet>publisher = Publisher.objects.get(...)
authors = Author.objects.filter(book__publisher=publisher).distinct()
</snippet></ROW><ROW><id>788780</id><snippet>import difflib
def show_diff(seqm):
    """Unify operations between two compared strings
seqm is a difflib.SequenceMatcher instance whose a &amp; b are strings"""
    output= []
    for opcode, a0, a1, b0, b1 in seqm.get_opcodes():
        if opcode == 'equal':
            output.append(seqm.a[a0:a1])
        elif opcode == 'insert':
            output.append("&lt;ins&gt;" + seqm.b[b0:b1] + "&lt;/ins&gt;")
        elif opcode == 'delete':
            output.append("&lt;del&gt;" + seqm.a[a0:a1] + "&lt;/del&gt;")
        elif opcode == 'replace':
            raise NotImplementedError, "what to do with 'replace' opcode?"
        else:
            raise RuntimeError, "unexpected opcode"
    return ''.join(output)

&gt;&gt;&gt; sm= difflib.SequenceMatcher(None, "lorem ipsum dolor sit amet", "lorem foo ipsum dolor amet")
&gt;&gt;&gt; show_diff(sm)
'lorem&lt;ins&gt; foo&lt;/ins&gt; ipsum dolor &lt;del&gt;sit &lt;/del&gt;amet'
</snippet></ROW><ROW><id>789383</id><snippet>#/usr/bin/env python

import os
import sys

pid = str(os.getpid())
pidfile = "/tmp/mydaemon.pid"

if os.path.isfile(pidfile):
    print "%s already exists, exiting" % pidfile
    sys.exit()
else:
    file(pidfile, 'w').write(pid)

# Do some actual work here

os.unlink(pidfile)
</snippet></ROW><ROW><id>789383</id><snippet>ps up `cat /tmp/mydaemon.pid ` &gt;/dev/null &amp;&amp; echo "Running" || echo "Not running"
</snippet></ROW><ROW><id>789983</id><snippet>
import os

from PyQt4.QtCore import QCoreApplication, QSocketNotifier, SIGNAL


def readAllData(fd):
        bufferSize = 1024
        while True:
                data = os.read(fd, bufferSize)
                if not data:
                        break
                print 'data read:'
                print repr(data)


a = QCoreApplication([])

fd = os.open('foo.txt', os.O_RDONLY)
notifier = QSocketNotifier(fd, QSocketNotifier.Read)
a.connect(notifier, SIGNAL('activated(int)'), readAllData)

a.exec_()

</snippet></ROW><ROW><id>790011</id><snippet>http.client.HTTPConnection.debuglevel = 1</snippet></ROW><ROW><id>790011</id><snippet>urllib.request</snippet></ROW><ROW><id>790011</id><snippet>http.client</snippet></ROW><ROW><id>790011</id><snippet>urllib.request.HTTPHandler(debuglevel=1)</snippet></ROW><ROW><id>790033</id><snippet>Content-type</snippet></ROW><ROW><id>790033</id><snippet>response.headers['Content-type'] = 'text/csv'</snippet></ROW><ROW><id>790246</id><snippet>time.sleep(0)</snippet></ROW><ROW><id>790246</id><snippet>time.sleep(0)</snippet></ROW><ROW><id>790588</id><snippet>&gt;&gt;&gt; t = test()
&gt;&gt;&gt; t.__dict__["foo"] = "bla"
&gt;&gt;&gt; t.foo
'bla'
</snippet></ROW><ROW><id>790588</id><snippet>&gt;&gt;&gt; object.__dict__["test"] = "test"
TypeError: 'dictproxy' object does not support item assignment
</snippet></ROW><ROW><id>791077</id><snippet>print urllib.urlopen("http://google.com").read()
</snippet></ROW><ROW><id>791077</id><snippet>External Frameworks..</snippet></ROW><ROW><id>791077</id><snippet>Add &gt; Existing Frameworks</snippet></ROW><ROW><id>791077</id><snippet>/System/Library/Frameworks/</snippet></ROW><ROW><id>791077</id><snippet>/System/Library/Frameworks/Python.framework/Headers</snippet></ROW><ROW><id>791077</id><snippet>Project &gt; Edit Project Settings</snippet></ROW><ROW><id>791077</id><snippet>#include &lt;Python.h&gt;

int main(){
    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];
    Py_Initialize();

    // import urllib
    PyObject *mymodule = PyImport_Import(PyString_FromString("urllib"));
    // thefunc = urllib.urlopen
    PyObject *thefunc = PyObject_GetAttrString(mymodule, "urlopen");

    // if callable(thefunc):
    if(thefunc &amp;&amp; PyCallable_Check(thefunc)){
        // theargs = ()
        PyObject *theargs = PyTuple_New(1);

        // theargs[0] = "http://google.com"
        PyTuple_SetItem(theargs, 0, PyString_FromString("http://google.com"));

        // f = thefunc.__call__(*theargs)
        PyObject *f = PyObject_CallObject(thefunc, theargs);

        // read = f.read
        PyObject *read = PyObject_GetAttrString(f, "read");

        // result = read.__call__()
        PyObject *result = PyObject_CallObject(read, NULL);


        if(result != NULL){
            // print result
            printf("Result of call: %s", PyString_AsString(result));
        }
    }
    [pool release];
}
</snippet></ROW><ROW><id>791116</id><snippet>globals()['do_on_' + platform]</snippet></ROW><ROW><id>791116</id><snippet>getattr</snippet></ROW><ROW><id>791290</id><snippet>class Foo</snippet></ROW><ROW><id>791290</id><snippet>dir(Foo)</snippet></ROW><ROW><id>791290</id><snippet>getattr(Foo, thename)</snippet></ROW><ROW><id>791290</id><snippet>type(theattr)</snippet></ROW><ROW><id>791290</id><snippet>isinstance</snippet></ROW><ROW><id>791290</id><snippet>'Bar'</snippet></ROW><ROW><id>791290</id><snippet>Relationship</snippet></ROW><ROW><id>791290</id><snippet>OneToMany</snippet></ROW><ROW><id>791290</id><snippet>ManyToMany</snippet></ROW><ROW><id>791290</id><snippet>r.of_kind</snippet></ROW><ROW><id>791290</id><snippet>inspect</snippet></ROW><ROW><id>791722</id><snippet>{an_object.name : an_object for an_object in object_list}
</snippet></ROW><ROW><id>791722</id><snippet>dict([(an_object.name, an_object) for an_object in object_list])
</snippet></ROW><ROW><id>792139</id><snippet>u'\xe4\xf6\xfc'
</snippet></ROW><ROW><id>792139</id><snippet>&gt;&gt;&gt; u'\xe4\xf6\xfc'.encode('utf-8')
'\xc3\xa4\xc3\xb6\xc3\xbc'
</snippet></ROW><ROW><id>792139</id><snippet>decode(...)</snippet></ROW><ROW><id>792139</id><snippet>u'\xe4\xf6\xfc'</snippet></ROW><ROW><id>792139</id><snippet>'\xe4\xf6\xfc'</snippet></ROW><ROW><id>792139</id><snippet>decode('latin1')</snippet></ROW><ROW><id>792139</id><snippet>&gt;&gt;&gt; '\xe4\xf6\xfc'.decode('latin1')
u'\xe4\xf6\xfc'
</snippet></ROW><ROW><id>792163</id><snippet>try:
    frobnicate()
except KeyError as exc:
    raise ValueError("Bad grape") from exc
</snippet></ROW><ROW><id>792324</id><snippet>for result in messages:
    times.append(result.group('time'))
</snippet></ROW><ROW><id>792324</id><snippet>times = [result.group('time') for result in messages]
</snippet></ROW><ROW><id>792959</id><snippet>-gthread -tk</snippet></ROW><ROW><id>792959</id><snippet>ipython --help</snippet></ROW><ROW><id>793383</id><snippet>objects= Session.objects.aggregate(Max('date'), Min('date'))
print [ type[o] for o in objects ]
result =  serializers.serialize("json", objects, ensure_ascii=False)
</snippet></ROW><ROW><id>793488</id><snippet>&gt;&gt;&gt; wx.SystemSettings.GetMetric(wx.SYS_HSCROLL_Y)
16
&gt;&gt;&gt; wx.SystemSettings.GetMetric(wx.SYS_VSCROLL_X)
16
</snippet></ROW><ROW><id>793830</id><snippet>awk</snippet></ROW><ROW><id>793830</id><snippet>awk 'NF &gt; 2' input_file &gt; output_file
</snippet></ROW><ROW><id>794189</id><snippet>form.fields['emails'].choices</snippet></ROW><ROW><id>794189</id><snippet>form.cleaned_data['emails']</snippet></ROW><ROW><id>794213</id><snippet>data1 = {'id':1, 'name':'somehackers.jpg',
     'img':psycopg2.Binary(open('somehackers.jpg').read())}

curs.execute("""INSERT INTO test_binary
              VALUES (%(id)s, %(name)s, %(img)s)""", data1)
</snippet></ROW><ROW><id>794286</id><snippet>extent</snippet></ROW><ROW><id>794286</id><snippet>envelope</snippet></ROW><ROW><id>794286</id><snippet>Polygon</snippet></ROW><ROW><id>794812</id><snippet>max(a)</snippet></ROW><ROW><id>794812</id><snippet>&gt;&gt;&gt; from numpy import *
&gt;&gt;&gt; a = array(1)
&gt;&gt;&gt; b = int_(1)
&gt;&gt;&gt; a.ndim
0
&gt;&gt;&gt; b.ndim
0
&gt;&gt;&gt; a[...]
array(1)
&gt;&gt;&gt; a[()]
1
&gt;&gt;&gt; b[...]
array(1)
&gt;&gt;&gt; b[()]
array(1)
</snippet></ROW><ROW><id>794812</id><snippet>a[...]</snippet></ROW><ROW><id>794812</id><snippet>a[()]</snippet></ROW><ROW><id>794812</id><snippet>newaxis</snippet></ROW><ROW><id>794812</id><snippet>&gt;&gt;&gt; b[0,1,2,3] = 1
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'numpy.int32' object does not support item assignment
&gt;&gt;&gt; b[newaxis]
array([1])
</snippet></ROW><ROW><id>794812</id><snippet>a = array(a)</snippet></ROW><ROW><id>794871</id><snippet>map</snippet></ROW><ROW><id>794871</id><snippet>filter</snippet></ROW><ROW><id>794898</id><snippet>activated(int index)</snippet></ROW><ROW><id>795000</id><snippet>{{ item.date|date:"Y M d" }}
</snippet></ROW><ROW><id>795213</id><snippet>class Subclass1(BaseClass):
    def __init__(self):
        super( Subclass1, self ).__init__()
        self.specific()
        super( Subclass1, self ).finalizeInitialization()
</snippet></ROW><ROW><id>795213</id><snippet>class BaseClass:
    def __init__(self):
        print 'base __init__'
        self.common1()
        self.specific()
        self.finalizeInitialization()

    def common1(self):
        print 'common 1'

    def finalizeInitialization(self):
        print 'finalizeInitialization [common2]'

    def specific( self ):
        # two choices:
        # if this is "abstract": raise an exception
        # if this is "concrete": pass
</snippet></ROW><ROW><id>795322</id><snippet>players = Player.objects.filter(batting__gt=F('bowling'))
</snippet></ROW><ROW><id>796019</id><snippet>naive = dt.replace(tzinfo=None)
</snippet></ROW><ROW><id>796392</id><snippet>mutableString = NSMutableString.alloc().initWithString_("abc")
</snippet></ROW><ROW><id>796567</id><snippet>&lt;script charset="utf-8" type="text/javascript"&gt;
  $(function(){
    $("select#id_category").change(function(){
      $.getJSON("/items/",{id: $(this).val(), view: 'json'}, function(j) {
        var options = '&lt;option value=""&gt;-------- &lt;/option&gt;';
        for (var i = 0; i &lt; j.length; i++) {
          options += '&lt;option value="' + j[i].optionValue + '"&gt;' + j[i].optionDisplay + '&lt;/option&gt;';
        }
        $("#id_item").html(options);
        $("#id_item option:first").attr('selected', 'selected');
      })
      $("#id_category").attr('selected', 'selected');
    })
  })
&lt;/script&gt;
</snippet></ROW><ROW><id>796810</id><snippet>+1 points for every 100 words
+1 points for every child element that has &gt; 100 words
-1 points if the section name contains the word 'nav'
-2 points if the section name contains the word 'advert'
</snippet></ROW><ROW><id>797013</id><snippet>ParentModel.objects.filter(childmodel__in=ChildModel.objects.all()).distinct()
</snippet></ROW><ROW><id>797167</id><snippet>&gt;&gt;&gt; t = 'a' 'bcd'
&gt;&gt;&gt; t
'abcd'
</snippet></ROW><ROW><id>797167</id><snippet>&gt;&gt;&gt; print '%5s' % ':%2s' % ':'
</snippet></ROW><ROW><id>797167</id><snippet>&gt;&gt;&gt; print ('%5s' % ':%2s') % ':'
</snippet></ROW><ROW><id>797167</id><snippet>&gt;&gt;&gt; print ' :%2s' % ':'
 : :
</snippet></ROW><ROW><id>797290</id><snippet>snipplets</snippet></ROW><ROW><id>797290</id><snippet>sys.path</snippet></ROW><ROW><id>797290</id><snippet>sys.path</snippet></ROW><ROW><id>797290</id><snippet>site.path</snippet></ROW><ROW><id>797290</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>797882</id><snippet>*/5 * * * * /path/to/project/refresh_cache.py
</snippet></ROW><ROW><id>797882</id><snippet>cron.yaml</snippet></ROW><ROW><id>797882</id><snippet>refresh_cache.py</snippet></ROW><ROW><id>797939</id><snippet>In [8]: x
Out[8]: 
array([[ 0. ,  0. ,  0. ],
       [-1. ,  0. , -1. ],
       [-2. ,  0. , -2. ],
       [-3. ,  0. , -3. ],
       [-4. ,  0.1, -4. ]])
In [9]: y
Out[9]: 
array([[0. , 0. ],
       [1. , 0. ],
       [2. , 0. ],
       [3. , 0. ],
       [4. , 0.1]])

In [10]: import scipy.stats

In [27]: (scipy.stats.cov(y,x)
          /(numpy.sqrt(scipy.stats.var(y,axis=0)[:,numpy.newaxis]))
          /(numpy.sqrt(scipy.stats.var(x,axis=0))))
Out[27]: 
array([[-1.        ,  0.70710678, -1.        ],
       [-0.70710678,  1.        , -0.70710678]])
</snippet></ROW><ROW><id>797939</id><snippet>In [40]: numpy.corrcoef(x.T,y.T)[numpy.arange(x.shape[1])[numpy.newaxis,:]
                                 ,numpy.arange(y.shape[1])[:,numpy.newaxis]]
Out[40]: 
array([[-1.        ,  0.70710678, -1.        ],
       [-0.70710678,  1.        , -0.70710678]])
</snippet></ROW><ROW><id>798893</id><snippet>itertools.product</snippet></ROW><ROW><id>798893</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; a = [[1,2,3],[4,5,6],[7,8,9,10]]
&gt;&gt;&gt; list(itertools.product(*a))
[(1, 4, 7), (1, 4, 8), (1, 4, 9), (1, 4, 10), (1, 5, 7), (1, 5, 8), (1, 5, 9), (1, 5, 10), (1, 6, 7), (1, 6, 8), (1, 6, 9), (1, 6, 10), (2, 4, 7), (2, 4, 8), (2, 4, 9), (2, 4, 10), (2, 5, 7), (2, 5, 8), (2, 5, 9), (2, 5, 10), (2, 6, 7), (2, 6, 8), (2, 6, 9), (2, 6, 10), (3, 4, 7), (3, 4, 8), (3, 4, 9), (3, 4, 10), (3, 5, 7), (3, 5, 8), (3, 5, 9), (3, 5, 10), (3, 6, 7), (3, 6, 8), (3, 6, 9), (3, 6, 10)]
</snippet></ROW><ROW><id>799315</id><snippet>success = False
try:
    foo()
    success = True
except(A):
    bar()
except(B):
    baz()
except(C):
    bay()
finally:
    if not success:
        foobar()
</snippet></ROW><ROW><id>799447</id><snippet>&gt;&gt;&gt; i = 1240832864000L
&gt;&gt;&gt; i
1240832864000L
&gt;&gt;&gt; print i
1240832864000
&gt;&gt;&gt; 
&gt;&gt;&gt; '&lt;script type="text/javascript"&gt; var num = %s; &lt;/script&gt;' % i
'&lt;script type="text/javascript"&gt; var num = 1240832864000; &lt;/script&gt;'
</snippet></ROW><ROW><id>799447</id><snippet>__repr__</snippet></ROW><ROW><id>799586</id><snippet>f.write("""&lt;html&gt;
&lt;title&gt;python newb's twitter search&lt;/title&gt;
&lt;head&gt;&lt;meta http-equiv='refresh' content='60'&gt;&lt;/head&gt;
&lt;body&gt;
&lt;h1 style='font-size:150%'&gt;Python Newb's Twitter Search&lt;/h1&gt;
&lt;h2 style='font-size:125%'&gt;Searching Twitter for: %s&lt;/h2&gt;
&lt;h2 style='font-size:125%'&gt;%s (updates every 60 seconds)&lt;/h2&gt;""" % (query, time.ctime()))

for datum in reversed(data):
    f.write("&lt;p style='font-size:90%'&gt;%s&lt;/p&gt;" % (datum))

f.write("&lt;/body&gt;&lt;/html&gt;")
</snippet></ROW><ROW><id>799586</id><snippet>import mako
</snippet></ROW><ROW><id>799586</id><snippet>f = file("outw.html", "w")
data = reversed(data)
t = Template(filename='/path/to/mytmpl.txt').render({"query":query, "time":time.ctime(), "data":data})
f.write(t)
</snippet></ROW><ROW><id>799586</id><snippet>&lt;html&gt;
&lt;title&gt;python newb's twitter search&lt;/title&gt;
&lt;head&gt;&lt;meta http-equiv='refresh' content='60'&gt;&lt;/head&gt;
&lt;body&gt;
&lt;h1 style='font-size:150%'&gt;Python Newb's Twitter Search&lt;/h1&gt;
&lt;h2 style='font-size:125%'&gt;Searching Twitter for: ${query}&lt;/h2&gt;
&lt;h2 style='font-size:125%'&gt;${time} (updates every 60 seconds)&lt;/h2&gt;

% for datum in data:
    &lt;p style'font-size:90%'&gt;${datum}&lt;/p&gt;
% endfor

&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>799799</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; import socket
&gt;&gt;&gt; import os
&gt;&gt;&gt; platform.node()
'DARK-TOWER'
&gt;&gt;&gt; socket.gethostname()
'DARK-TOWER'
&gt;&gt;&gt; os.environ['COMPUTERNAME']
'DARK-TOWER'
</snippet></ROW><ROW><id>799967</id><snippet>redirectUrl = "/view/key/%s/" % item.key()
self.redirect(redirectUrl)
</snippet></ROW><ROW><id>800201</id><snippet>import os
def get_immediate_subdirectories(dir):
    return [name for name in os.listdir(dir)
            if os.path.isdir(os.path.join(dir, name))]
</snippet></ROW><ROW><id>800329</id><snippet>*</snippet></ROW><ROW><id>800329</id><snippet>import re

def parse_float(str):
  re_float = re.compile(r'(-?)(\d+)\.(\d+)')
  grps = re_float.search(str)
  sign, decimal, fraction = grps.groups()
  float_val = float('%s%s.%s' % (sign, decimal, fraction))
  total_len = len(grps.group(0))
  print '%*.*f'  % (total_len, len(fraction), float_val)

parse_float('1.2345678')
parse_float('1.234')
parse_float('1.2340000')
</snippet></ROW><ROW><id>800329</id><snippet>1.2345678
1.234
1.2340000
</snippet></ROW><ROW><id>801457</id><snippet>import scipy.stats

def LogNormDist(prob, mean=0, stddev=1):
    return scipy.stats.lognorm.cdf(prob,stddev,mean)
</snippet></ROW><ROW><id>801457</id><snippet>scipy.stats.lognormal</snippet></ROW><ROW><id>801457</id><snippet>return scipy.stats.lognorm.cdf(prob,stddev,scipy.exp(mean))
</snippet></ROW><ROW><id>801457</id><snippet>import scipy.stats

def LogNormDist(prob, mean=0, stddev=1):
    return scipy.stats.lognorm.cdf(prob,stddev,scale=scipy.exp(mean))
</snippet></ROW><ROW><id>801491</id><snippet>get()</snippet></ROW><ROW><id>801491</id><snippet>post()</snippet></ROW><ROW><id>801491</id><snippet>post()</snippet></ROW><ROW><id>801491</id><snippet>memcache</snippet></ROW><ROW><id>801934</id><snippet>from mechanize import Browser
year="2005"

br=Browser()
br.open("http://utahcritseries.com/RawResults.aspx")
br.select_form(name="aspnetForm")
control=br.form.find_control("ctl00$ContentPlaceHolder1$ddlSeries")
control.set_value_by_label((year,))
response2=br.submit()

print response2.read()
</snippet></ROW><ROW><id>801963</id><snippet>timedelta.days+timedelta.seconds/86400
</snippet></ROW><ROW><id>801963</id><snippet>&gt;&gt;&gt; datetime.timedelta(2.5)
datetime.timedelta(2, 43200)
</snippet></ROW><ROW><id>801963</id><snippet>timedelta.days*86400+timedelta.seconds
</snippet></ROW><ROW><id>801963</id><snippet>datetime.timedelta( someSeconds/86400 )
</snippet></ROW><ROW><id>802053</id><snippet>QueryDict.getlist(key)</snippet></ROW><ROW><id>802053</id><snippet>&lt;form action='/my/path/' method='POST'&gt;
&lt;input type='text' name='hi' value='heya1'&gt;
&lt;input type='text' name='hi' value='heya2'&gt;
&lt;input type='submit' value='Go'&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>802053</id><snippet>def mypath(request):
    if request.method == 'POST':
        greetings = request.POST.getlist('hi') # will be ['heya1','heya2']
</snippet></ROW><ROW><id>802146</id><snippet>add_header()</snippet></ROW><ROW><id>802146</id><snippet>User-Agent</snippet></ROW><ROW><id>802146</id><snippet>"Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11"</snippet></ROW><ROW><id>802146</id><snippet>urllib2</snippet></ROW><ROW><id>802146</id><snippet>"Python-urllib/2.6"</snippet></ROW><ROW><id>802450</id><snippet>originalTime = None

def doSomething():
  if originalTime:
    print "originalTime is not None and does not evaluate to False"
  else:
    print "originalTime is None or evaluates to False"

def doSomethingElse():
  originalTime = True

def doSomethingCompletelyDifferent()
  global originalTime
  originalTime = True

doSomething()
doSomethingElse()
doSomething()
doSomethingCompletelyDifferent()
doSomething()
</snippet></ROW><ROW><id>802450</id><snippet>originalTime is None or evaluates to False
originalTime is None or evaluates to False
originalTime is not None and does not evaluate to False
</snippet></ROW><ROW><id>802513</id><snippet>HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Uninstall
</snippet></ROW><ROW><id>802632</id><snippet>time.sleep()</snippet></ROW><ROW><id>802632</id><snippet>time.sleep()</snippet></ROW><ROW><id>802632</id><snippet>twisted.internet.defer.inlineCallbacks</snippet></ROW><ROW><id>802632</id><snippet>#!/usr/bin/env python

import time

from twisted.web import http
from twisted.internet import protocol
from twisted.internet import reactor
from twisted.internet import defer

def wait(seconds, result=None):
    """Returns a deferred that will be fired later"""
    d = defer.Deferred()
    reactor.callLater(seconds, d.callback, result)
    return d

class StreamHandler(http.Request):
    BOUNDARY = 'BOUNDARY'

    def writeBoundary(self):
        self.write("--%s\n" % (self.BOUNDARY))

    def writeStop(self):
        self.write("--%s--\n" % (self.BOUNDARY))

    @defer.inlineCallbacks
    def process(self):
        self.setHeader('Connection', 'Keep-Alive')
        self.setHeader('Content-Type', "multipart/x-mixed-replace;boundary=%s" % (self.BOUNDARY))

        self.writeBoundary()

        self.write("Content-Type: text/html\n")
        s = "&lt;html&gt;foo&lt;/html&gt;\n"
        self.write("Content-Length: %s\n\n" % (len(s)))
        self.write(s)
        self.writeBoundary()


        yield wait(2)

        self.write("Content-Type: text/html\n")
        s = "&lt;html&gt;bar&lt;/html&gt;\n"
        self.write("Content-Length: %s\n\n" % (len(s)))
        self.write(s)
        self.writeBoundary()

        yield wait(2)

        self.write("Content-Type: text/html\n")
        s = "&lt;html&gt;baz&lt;/html&gt;\n"
        self.write("Content-Length: %s\n\n" % (len(s)))
        self.write(s)

        self.writeStop()

        self.finish()


class StreamProtocol(http.HTTPChannel):
    requestFactory = StreamHandler

class StreamFactory(http.HTTPFactory):
    protocol = StreamProtocol


if __name__ == '__main__':   
    reactor.listenTCP(8800, StreamFactory())
    reactor.run()
</snippet></ROW><ROW><id>802642</id><snippet>final</snippet></ROW><ROW><id>802642</id><snippet>public final List&lt;String&gt; messages = new LinkedList&lt;String&gt;();

public void addMessage()
{
    messages.add("Hello World!");  // this mutates the messages list
}
</snippet></ROW><ROW><id>802642</id><snippet>public final List&lt;String&gt; messages = new LinkedList&lt;String&gt;();

public void changeMessages()
{
    messages = new ArrayList&lt;String&gt;();  // can't change a final variable
}
</snippet></ROW><ROW><id>802642</id><snippet>final</snippet></ROW><ROW><id>802642</id><snippet>list</snippet></ROW><ROW><id>802642</id><snippet>tuple</snippet></ROW><ROW><id>802642</id><snippet>set</snippet></ROW><ROW><id>802642</id><snippet>frozenset</snippet></ROW><ROW><id>802826</id><snippet>except:</snippet></ROW><ROW><id>802826</id><snippet>grep</snippet></ROW><ROW><id>803421</id><snippet>for line in p.stdout:
  ...
</snippet></ROW><ROW><id>803421</id><snippet>while True:
  line = p.stdout.readline()
  if not line: break
  ...
</snippet></ROW><ROW><id>803561</id><snippet>dict_a = dict(list_a)
dict_x = dict(list_x)

shared_keys = set(dict_a).intersection(set(dict_x))

result = dict((k, (dict_a[k], dict_x[k])) for k in shared_keys)
</snippet></ROW><ROW><id>803632</id><snippet>def perform( fun, *args ):
    fun( *args )

def action1( args ):
    something

def action2( args ):
    something

perform( action1 )
perform( action2, p )
perform( action3, p, r )
</snippet></ROW><ROW><id>804295</id><snippet>class Hello(db.Model):
  name = db.StringProperty()
  when = db.DateTimeProperty()

class MainHandler(webapp.RequestHandler):

  def get(self):
    self.response.out.write('Hello world!')
    one = Hello(name='Uno', when=datetime.datetime.now())
    two = Hello(name='Due', when=datetime.datetime.now())
    both = [one, two]
    db.put(both)
</snippet></ROW><ROW><id>804295</id><snippet>def main():
  application = webapp.WSGIApplication([('/', MainHandler)],
                                       debug=True)
  wsgiref.handlers.CGIHandler().run(application)


if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>804380</id><snippet>import urlparse, urllib

def fixurl(url):
    # turn string into unicode
    if not isinstance(url,unicode):
        url = url.decode('utf8')

    # parse it
    parsed = urlparse.urlsplit(url)

    # divide the netloc further
    userpass,at,hostport = parsed.netloc.rpartition('@')
    user,colon1,pass_ = userpass.partition(':')
    host,colon2,port = hostport.partition(':')

    # encode each component
    scheme = parsed.scheme.encode('utf8')
    user = urllib.quote(user.encode('utf8'))
    colon1 = colon1.encode('utf8')
    pass_ = urllib.quote(pass_.encode('utf8'))
    at = at.encode('utf8')
    host = host.encode('idna')
    colon2 = colon2.encode('utf8')
    port = port.encode('utf8')
    path = '/'.join(  # could be encoded slashes!
        urllib.quote(urllib.unquote(pce).encode('utf8'),'')
        for pce in parsed.path.split('/')
    )
    query = urllib.quote(urllib.unquote(parsed.query).encode('utf8'),'=&amp;?/')
    fragment = urllib.quote(urllib.unquote(parsed.fragment).encode('utf8'))

    # put it back together
    netloc = ''.join((user,colon1,pass_,at,host,colon2,port))
    return urlparse.urlunsplit((scheme,netloc,path,query,fragment))

print fixurl('http://\xe2\x9e\xa1.ws/\xe2\x99\xa5')
print fixurl('http://\xe2\x9e\xa1.ws/\xe2\x99\xa5/%2F')
print fixurl(u'http://Åsa:abc123@➡.ws:81/admin')
print fixurl(u'http://➡.ws/admin')
</snippet></ROW><ROW><id>804380</id><snippet>http://xn--hgi.ws/%E2%99%A5</snippet></ROW><ROW><id>804380</id><snippet>http://xn--hgi.ws/%E2%99%A5/%2F</snippet></ROW><ROW><id>804380</id><snippet>http://%C3%85sa:abc123@xn--hgi.ws:81/admin</snippet></ROW><ROW><id>804380</id><snippet>http://xn--hgi.ws/admin</snippet></ROW><ROW><id>804380</id><snippet>urlparse</snippet></ROW><ROW><id>804380</id><snippet>urlunparse</snippet></ROW><ROW><id>804380</id><snippet>urlsplit</snippet></ROW><ROW><id>804380</id><snippet>urlunsplit</snippet></ROW><ROW><id>804901</id><snippet>def application(environ, start_response):
    status = '200 OK'
    output = 'Hello World!'

    response_headers = [('Content-type', 'text/plain'),
                    ('Content-Length', str(len(output)))]
    start_response(status, response_headers)

    yield output
</snippet></ROW><ROW><id>804901</id><snippet>for part in mylist:
    yield part
</snippet></ROW><ROW><id>804901</id><snippet>return mylist
</snippet></ROW><ROW><id>804973</id><snippet>class Fooset(set):
    def __init__(self, s=(), foo=None):
        super(Fooset,self).__init__(s)
        if foo is None and hasattr(s, 'foo'):
            foo = s.foo
        self.foo = foo



    @classmethod
    def _wrap_methods(cls, names):
        def wrap_method_closure(name):
            def inner(self, *args):
                result = getattr(super(cls, self), name)(*args)
                if isinstance(result, set) and not hasattr(result, 'foo'):
                    result = cls(result, foo=self.foo)
                return result
            inner.fn_name = name
            setattr(cls, name, inner)
        for name in names:
            wrap_method_closure(name)

Fooset._wrap_methods(['__ror__', 'difference_update', '__isub__', 
    'symmetric_difference', '__rsub__', '__and__', '__rand__', 'intersection',
    'difference', '__iand__', 'union', '__ixor__', 
    'symmetric_difference_update', '__or__', 'copy', '__rxor__',
    'intersection_update', '__xor__', '__ior__', '__sub__',
])
</snippet></ROW><ROW><id>804998</id><snippet># Try to use the C implementation first, falling back to python
try:
    from xml.etree import cElementTree as ElementTree
except ImportError, e:
    from xml.etree import ElementTree
</snippet></ROW><ROW><id>804998</id><snippet>def find(*args, **kwargs):
    """Find a book in the collection specified"""

    search_args = [('access_key', api_key),]
    if not is_valid_collection(kwargs['collection']):
        return None
    kwargs.pop('collection')
    for key in kwargs:
        # Only the first keword is honored
        if kwargs[key]:
            search_args.append(('index1', key))
            search_args.append(('value1', kwargs[key]))
            break

    url = urllib.basejoin(api_url, '%s.xml' % 'books')
    data = urllib.urlencode(search_args)
    req = urllib2.urlopen(url, data)
    rdata = []
    chunk = 'xx'
    while chunk:
        chunk = req.read()
        if chunk:
            rdata.append(chunk)
    tree = ElementTree.fromstring(''.join(rdata))
    results = []
    for i, elem in enumerate(tree.getiterator('BookData')):
        results.append(
               {'isbn': elem.get('isbn'),
                'isbn13': elem.get('isbn13'),
                'title': elem.find('Title').text,
                'author': elem.find('AuthorsText').text,
                'publisher': elem.find('PublisherText').text,}
             )
    return results
</snippet></ROW><ROW><id>805081</id><snippet>super()</snippet></ROW><ROW><id>805081</id><snippet>class Foo(Bar):
    def baz(self, arg):
        return super(Foo, self).baz(arg)
</snippet></ROW><ROW><id>806004</id><snippet>std::string</snippet></ROW><ROW><id>806004</id><snippet>char*</snippet></ROW><ROW><id>806422</id><snippet>url</snippet></ROW><ROW><id>807190</id><snippet>import fileinput

for line in fileinput.input(): ...
</snippet></ROW><ROW><id>807988</id><snippet>from mailer import Mailer
from mailer import Message

message = Message(From="me@example.com",
                  To=["you@example.com", "him@example.com"])
message.Subject = "Kitty with dynamite"
message.Body = """Kitty go boom!"""
message.attach("kitty.jpg")

sender = Mailer('smtp.example.com')
sender.login("username", "password")
sender.send(message)
</snippet></ROW><ROW><id>807988</id><snippet>from mailer import Mailer
from mailer import Message

message = Message(From="me@example.com",
                  To="you@example.com",
                  charset="utf-8")
message.Subject = "An HTML Email"
message.Html = """This email uses &lt;strong&gt;HTML&lt;/strong&gt;!"""
message.Body = """This is alternate text."""

sender = Mailer('smtp.example.com')
sender.send(message)
</snippet></ROW><ROW><id>808139</id><snippet>from array import array
output_file = open('file', 'wb')
float_array = array('d', [3.14, 2.7, 0.0, -1.0, 1.1])
float_array.tofile(output_file)
output_file.close()
</snippet></ROW><ROW><id>808139</id><snippet>input_file = open('file', 'r')
float_array = array('d')
float_array.fromstring(input_file.read())
</snippet></ROW><ROW><id>808139</id><snippet>array.array</snippet></ROW><ROW><id>808139</id><snippet>.fromfile</snippet></ROW><ROW><id>808603</id><snippet>cgi.escape</snippet></ROW><ROW><id>808603</id><snippet>'&amp;'</snippet></ROW><ROW><id>808603</id><snippet>'&lt;'</snippet></ROW><ROW><id>808603</id><snippet>'&gt;'</snippet></ROW><ROW><id>808603</id><snippet>&gt;&gt;&gt; cgi.escape('&lt;tag&gt;')
'&lt;tag&gt;
</snippet></ROW><ROW><id>808820</id><snippet>import Queue

# Initialise queue as:
queue = Queue.Queue()
Finished = object()   # Unique marker the producer will put in the queue when finished

# Consumer:
try:
    while True:
        next_item = self.queue.get(timeout=15)
        if next_item is Finished: break
        yield next_item

except Queue.Empty:
    print "Timeout exceeded"
</snippet></ROW><ROW><id>808820</id><snippet>queue.put(item)</snippet></ROW><ROW><id>809858</id><snippet>import re

pattern = re.compile(r"\[\[([\w \|]+)\]\]")
text = "blah blah [[Alexander of Paris|poet named Alexander]] bldfkas"
results = pattern.findall(text)

output = []
for link in results:
    output.append(link.split("|")[0])

# outputs ['Alexander of Paris']
</snippet></ROW><ROW><id>809858</id><snippet>import re

pattern = re.compile(r"\[\[([\w ]+)(\|[\w ]+)?\]\]")
text = "[[a|b]] fdkjf [[c|d]] fjdsj [[efg]]"
results = pattern.findall(text)

# outputs [('a', '|b'), ('c', '|d'), ('efg', '')]

print [link[0] for link in results]

# outputs ['a', 'c', 'efg']
</snippet></ROW><ROW><id>809858</id><snippet>pattern = re.compile(r"\[\[([\w ]+)(?:\|[\w ]+)?\]\]")
text = "[[a|b]] fdkjf [[c|d]] fjdsj [[efg]]"
results = pattern.findall(text)

# outputs ['a', 'c', 'efg']
</snippet></ROW><ROW><id>810893</id><snippet>import locale
lang, encoding = locale.getdefaultlocale()
mystring = u"blabla"
print mystring.encode(encoding)
</snippet></ROW><ROW><id>811008</id><snippet>class SomeClass:
  def SomeFunction(self):
     try:
        self.something = 5
     except:
        print 'error'
     print self.something

some_object = SomeClass()
some_object.SomeFunction()   # Prints 5
</snippet></ROW><ROW><id>811288</id><snippet>model_instance.image_field.save('filename.jpeg', fd.read(), True)
</snippet></ROW><ROW><id>811321</id><snippet>htmlentities($var, ENT_QUOTES, 'UTF-8');
</snippet></ROW><ROW><id>811637</id><snippet>def dict_factory(cursor, row):
    d = {}
    for idx,col in enumerate(cursor.description):
        d[col[0]] = row[idx]
    return d
</snippet></ROW><ROW><id>811637</id><snippet>from pysqlite2 import dbapi2 as sqlite
conn = sqlite.connect(...)
conn.row_factory = dict_factory
</snippet></ROW><ROW><id>811708</id><snippet>cls.text.see(Tkinter.END)</snippet></ROW><ROW><id>811748</id><snippet>import socket
socket.setdefaulttimeout(5.0)
   ...
try:
   ...
except socket.timeout:
   (it timed out, retry)
</snippet></ROW><ROW><id>812161</id><snippet>-W ignore</snippet></ROW><ROW><id>812161</id><snippet>*</snippet></ROW><ROW><id>812161</id><snippet>*</snippet></ROW><ROW><id>812513</id><snippet>from django.forms import extras
...
    DOB = forms.DateField(widget=extras.SelectDateWidget)
</snippet></ROW><ROW><id>812617</id><snippet>import logging
import types

class ExtendedLogRecord(logging.LogRecord):

    def getMessage(self):
        """
        Return the message for this LogRecord.

        Return the message for this LogRecord after merging any user-supplied
        arguments with the message.
        """
        if not hasattr(types, "UnicodeType"): #if no unicode support...
            msg = str(self.msg)
        else:
            try:
                msg = str(self.msg)
            except UnicodeError:
                msg = self.msg      #Defer encoding till later
        if self.args:
            msg +=' '+' '.join(map(str,self.args))
        return msg

#Patch the logging default logging class
logging.RootLogger.makeRecord=lambda self,*args: ExtendedLogRecord(*args)

some_dict={'foo':14,'bar':15}
logging.error('text',15,'some dictionary',some_dict)
</snippet></ROW><ROW><id>812617</id><snippet>ERROR:root:text 15 some dictionary {'foo': 14, 'bar': 15}
</snippet></ROW><ROW><id>812712</id><snippet>urllib2.urlopen(base_url)
</snippet></ROW><ROW><id>812712</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.uname() 
('Darwin', 'skom.local', '9.6.0', 'Darwin Kernel Version 9.6.0: Mon Nov 24 17:37:00 PST 2008; root:xnu-1228.9.59~1/RELEASE_I386', 'i386')
</snippet></ROW><ROW><id>812714</id><snippet>class callcounted(object):
    """Decorator to determine number of calls for a method"""

    def __init__(self,method):
        self.method=method
        self.counter=0

    def __call__(self,*args,**kwargs):
        self.counter+=1
        return self.method(*args,**kwargs)


import logging
logging.error=callcounted(logging.error)
logging.error('one')
logging.error('two')
print logging.error.counter
</snippet></ROW><ROW><id>812714</id><snippet>ERROR:root:one
ERROR:root:two
2
</snippet></ROW><ROW><id>813179</id><snippet>some_string.tr('a-zA-Z', 'c-zabC-ZAB')</snippet></ROW><ROW><id>813938</id><snippet>import inspect, dis, opcode

def check_status():

    try:
        frame = inspect.currentframe().f_back
        next_opcode = opcode.opname[ord(frame.f_code.co_code[frame.f_lasti+3])]
        if next_opcode == "POP_TOP": 
            # or next_opcode == "RETURN_VALUE":
            # include the above line in the if statement if you consider "return check_status()" to be assignment
            print "I was not assigned"
            print "Pretty printer status check 0.02v"
            print "NOTE: This is so totally not written for giant robots"
            return
    finally:
        del frame    

    # do normal routine

    info = {'cond_op': 1, 't_canoncharge': 1342, 'stage_booster': 5}

    return info

# no assignment    
def test1():
    check_status()

# assignment
def test2():
    a = check_status()

# could be assignment (check above for options)
def test3():
    return check_status()

# assignment
def test4():
    a = []
    a.append(check_status())
    return a
</snippet></ROW><ROW><id>813938</id><snippet>import inspect

def check_status():
    frame = inspect.currentframe()
    try:
        if frame.f_back.f_code.co_name == "&lt;module&gt;" and frame.f_back.f_code.co_filename == "&lt;stdin&gt;":
            print "Pretty printer status check 0.02v"
            print "NOTE: This is so totally not written for giant robots"
    finally:
        del frame

    # do regular stuff   
    return {'cond_op': 1, 't_canoncharge': 1342, 'stage_booster': 5}

def test():
    check_status()


&gt;&gt;&gt; check_status()
Pretty printer status check 0.02v
NOTE: This is so totally not written for giant robots
{'cond_op': 1, 't_canoncharge': 1342, 'stage_booster': 5}

&gt;&gt;&gt; a=check_status()
Pretty printer status check 0.02v
NOTE: This is so totally not written for giant robots

&gt;&gt;&gt; a
{'cond_op': 1, 't_canoncharge': 1342, 'stage_booster': 5}

test()
&gt;&gt;&gt;
</snippet></ROW><ROW><id>814170</id><snippet>import shutil
shutil.rmtree("dir-you-want-to-remove")
</snippet></ROW><ROW><id>814418</id><snippet>app = wx.App(redirect=True) 
app = wx.App(redirect=True,filename="mylogfile.txt")
</snippet></ROW><ROW><id>814797</id><snippet>&gt;&gt;&gt; print re.findall(r'(\w+)="(.*?)"', string)
[('n', 'Foo Bar'), ('t', '5'), ('s', '10'), ('l', '25')]
</snippet></ROW><ROW><id>814797</id><snippet>re.findall</snippet></ROW><ROW><id>814797</id><snippet>re.split</snippet></ROW><ROW><id>814817</id><snippet>spyder</snippet></ROW><ROW><id>814817</id><snippet>import wx.py.crust
...
...
# then call

crustFrame = wx.py.crust.CrustFrame(parent = self)
crustFrame.Show()
</snippet></ROW><ROW><id>814817</id><snippet>self</snippet></ROW><ROW><id>814817</id><snippet>wx.Frame</snippet></ROW><ROW><id>814817</id><snippet>self</snippet></ROW><ROW><id>814950</id><snippet>*</snippet></ROW><ROW><id>814950</id><snippet>ur'^(\d+)\s?[x*\u00d7]\s?(\d+)(\w{2,4})$'
</snippet></ROW><ROW><id>815320</id><snippet>raise ValueError('invalid gender %r' % gender)
</snippet></ROW><ROW><id>815374</id><snippet>class SomeModel:
    def some_method(self):
        from myapp.factories import SomeFactory
        SomeFactory().do_something()
</snippet></ROW><ROW><id>815681</id><snippet>feedparser._HTMLSanitizer.acceptable_elements</snippet></ROW><ROW><id>815681</id><snippet>feedparser.parse</snippet></ROW><ROW><id>816721</id><snippet>page = 1
while page &lt; num_pages + 1:
    # do stuff that possibly updates num_pages here
    page += 1
</snippet></ROW><ROW><id>817095</id><snippet>import wx, wx.calendar


class FoldableWindowContainer(wx.Panel):
    def __init__(self, parent, left, right):
        wx.Panel.__init__(self, parent)

        sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.SetSizer(sizer)
        self.splitter = wx.SplitterWindow(self, style=wx.SP_LIVE_UPDATE)
        left.Reparent(self.splitter)
        right.Reparent(self.splitter)
        self.left = left
        self.right = right
        self.splitter.SplitVertically(self.left, self.right)
        self.splitter.SetMinimumPaneSize(50)
        self.sash_pos = self.splitter.SashPosition
        sizer.Add(self.splitter, 1, wx.EXPAND)

        fold_button = wx.Button(self, size=(10, -1))
        fold_button.Bind(wx.EVT_BUTTON, self.On_FoldToggle)
        sizer.Add(fold_button, 0, wx.EXPAND)

    def On_FoldToggle(self, event):
        if self.splitter.IsSplit():
            self.sash_pos = self.splitter.SashPosition
            self.splitter.Unsplit()
        else:
            self.splitter.SplitVertically(self.left, self.right, self.sash_pos)


class FoldTest(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)

        left = wx.Panel(self, style=wx.BORDER_SUNKEN)
        right = wx.Panel(self, style=wx.BORDER_SUNKEN)

        left_sizer = wx.BoxSizer(wx.VERTICAL)
        left.SetSizer(left_sizer)
        left_sizer.Add(wx.calendar.CalendarCtrl(left), 1, wx.EXPAND | wx.ALL, 5)
        left_sizer.Add(wx.Button(left, label="Act"), 0, wx.EXPAND | wx.ALL, 5)

        right_sizer = wx.BoxSizer(wx.VERTICAL)
        right.SetSizer(right_sizer)
        right_sizer.Add(
            wx.StaticText(right, label="Fold panel", style=wx.BORDER_RAISED),
            1, wx.EXPAND | wx.ALL, 5
        )

        FoldableWindowContainer(self, left, right)


app = wx.PySimpleApp()
app.TopWindow = FoldTest()
app.TopWindow.Show()
app.MainLoop()
</snippet></ROW><ROW><id>817140</id><snippet>&gt;&gt;&gt; s = "This must not b3 delet3d, but the number at the end yes 134411"
&gt;&gt;&gt; s = re.sub(" \d+", " ", s)
&gt;&gt;&gt; s
'This must not b3 delet3d, but the number at the end yes '
</snippet></ROW><ROW><id>817140</id><snippet>s = re.sub("^\d+\s|\s\d+\s|\s\d+$", " ", s)
</snippet></ROW><ROW><id>817296</id><snippet>def wrapper(func, *args):
</snippet></ROW><ROW><id>817296</id><snippet>args</snippet></ROW><ROW><id>817296</id><snippet>args</snippet></ROW><ROW><id>817296</id><snippet>    func(*args)
</snippet></ROW><ROW><id>817296</id><snippet>args</snippet></ROW><ROW><id>817296</id><snippet>def wrapper1(func, *args): # with star
    func(*args)

def wrapper2(func, args): # without star
    func(*args)

def func2(x, y, z):
    print x+y+z

wrapper1(func2, 1, 2, 3)
wrapper2(func2, [1, 2, 3])
</snippet></ROW><ROW><id>817296</id><snippet>wrapper2</snippet></ROW><ROW><id>817296</id><snippet>args</snippet></ROW><ROW><id>817296</id><snippet>[1,2,3]</snippet></ROW><ROW><id>817443</id><snippet>import facebook
fb = facebook.Facebook('YOUR_API_KEY', 'YOUR_SECRET_KEY')
fb.auth.createToken()
fb.login()
fb.auth.getSession()
fb.set_status('Checking out StackOverFlow.com')
</snippet></ROW><ROW><id>817731</id><snippet>hash("some string")</snippet></ROW><ROW><id>817742</id><snippet>if a is None:
    try:
        a = long(_hexlify(_urandom(16)), 16)
    except NotImplementedError:
        import time
        a = long(time.time() * 256) # use fractional seconds
</snippet></ROW><ROW><id>817742</id><snippet>random = self.random
u = random()
while u &lt;= 1e-7:
    u = random()
return -_log(u)/lambd
</snippet></ROW><ROW><id>817815</id><snippet>InstanceMethodWrapper</snippet></ROW><ROW><id>817815</id><snippet>__get__</snippet></ROW><ROW><id>817815</id><snippet>return self</snippet></ROW><ROW><id>817893</id><snippet>&gt;&gt;&gt; class MyClass(dict):
...     def __init__(self, *args, **kwargs):
...             self['mykey'] = 'myvalue'
...             self['mykey2'] = 'myvalue2'
...
&gt;&gt;&gt; x = MyClass()
&gt;&gt;&gt; x['mykey']
'myvalue'
&gt;&gt;&gt; x
{'mykey2': 'myvalue2', 'mykey': 'myvalue'}
</snippet></ROW><ROW><id>818502</id><snippet>class ClassMeta(metaclass=M):
  pass
</snippet></ROW><ROW><id>818502</id><snippet>__metaclass__</snippet></ROW><ROW><id>818737</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; myString = "HI there. You should higher that person for the job. Hi hi."
&gt;&gt;&gt; keyword = "hi"
&gt;&gt;&gt; search = re.compile(r'\b(%s)\b' % keyword, re.I)
&gt;&gt;&gt; search.sub('&lt;b&gt;\\1&lt;/b&gt;', myString)
'&lt;b&gt;HI&lt;/b&gt; there. You should higher that person for the job. &lt;b&gt;Hi&lt;/b&gt; &lt;b&gt;hi&lt;/b&gt;.'
</snippet></ROW><ROW><id>818757</id><snippet>readlines()</snippet></ROW><ROW><id>818757</id><snippet>str.strip()</snippet></ROW><ROW><id>818757</id><snippet>lstrip()</snippet></ROW><ROW><id>818757</id><snippet>rstrip()</snippet></ROW><ROW><id>818757</id><snippet>file</snippet></ROW><ROW><id>818757</id><snippet>file</snippet></ROW><ROW><id>818757</id><snippet>lines = []
f = open(filename)
for line in f:
    if not line.startswith('com'):
        lines.append(line.strip())
</snippet></ROW><ROW><id>818757</id><snippet>lines = []
f = open(filename)
for line in f:
    if line.strip() and not line.startswith('com'):
        lines.append(line.strip())
</snippet></ROW><ROW><id>818757</id><snippet>lines = [line.strip() for line in open(filename) if line.strip() and not line.startswith('com')]
</snippet></ROW><ROW><id>818836</id><snippet>def loop(f,n):
    for i in xrange(n): f()

loop(lambda: &lt;insert expression here&gt;, 5)
</snippet></ROW><ROW><id>818836</id><snippet>i</snippet></ROW><ROW><id>818836</id><snippet>_</snippet></ROW><ROW><id>818836</id><snippet>for _ in range(n):
    do_something()
</snippet></ROW><ROW><id>818836</id><snippet>_</snippet></ROW><ROW><id>818836</id><snippet>&gt;&gt;&gt; 1+2
3
&gt;&gt;&gt; _
3
</snippet></ROW><ROW><id>818836</id><snippet>&gt;&gt;&gt; for _ in xrange(10): pass
...
&gt;&gt;&gt; _
9
&gt;&gt;&gt; 1+2
3
&gt;&gt;&gt; _
9
</snippet></ROW><ROW><id>818956</id><snippet>changed_list = [int(f) if f.isdigit() else f for f in original_list]
</snippet></ROW><ROW><id>819240</id><snippet>import os
if os.environ.has_key('REQUEST_METHOD'):
    # You're being run as a CGI script.
else:
    # You're being run from the command line.
</snippet></ROW><ROW><id>819420</id><snippet>socket</snippet></ROW><ROW><id>819420</id><snippet>struct</snippet></ROW><ROW><id>819420</id><snippet>import socket,struct

def makeMask(n):
    "return a mask of n bits as a long integer"
    return (2L&lt;&lt;n-1) - 1

def dottedQuadToNum(ip):
    "convert decimal dotted quad string to long integer"
    return struct.unpack('L',socket.inet_aton(ip))[0]

def networkMask(ip,bits):
    "Convert a network address to a long integer" 
    return dottedQuadToNum(ip) &amp; makeMask(bits)

def addressInNetwork(ip,net):
   "Is an address in a network"
   return ip &amp; net == net

address = dottedQuadToNum("192.168.1.1")
networka = networkMask("10.0.0.0",24)
networkb = networkMask("192.168.0.0",24)
print (address,networka,networkb)
print addressInNetwork(address,networka)
print addressInNetwork(address,networkb)
</snippet></ROW><ROW><id>819420</id><snippet>False
True
</snippet></ROW><ROW><id>819420</id><snippet>import socket,struct

def addressInNetwork(ip,net):
   "Is an address in a network"
   ipaddr = struct.unpack('L',socket.inet_aton(ip))[0]
   netaddr,bits = net.split('/')
   netmask = struct.unpack('L',socket.inet_aton(netaddr))[0] &amp; ((2L&lt;&lt;int(bits)-1) - 1)
   return ipaddr &amp; netmask == netmask
</snippet></ROW><ROW><id>819582</id><snippet>QString</snippet></ROW><ROW><id>819582</id><snippet>chardet</snippet></ROW><ROW><id>819582</id><snippet>chardet.detect(self.ui.TextFrom.toPlainText())
</snippet></ROW><ROW><id>819582</id><snippet>chardet.detect(str(self.ui.TextFrom.toPlainText()))
</snippet></ROW><ROW><id>820121</id><snippet>while True:
    sleep(1)
</snippet></ROW><ROW><id>820121</id><snippet>stopped</snippet></ROW><ROW><id>820121</id><snippet>stopped = Event()
def worker():
    while not stopped.is_set():
        try:
            item = q.get_nowait()
            do_work(item)
        except Empty:      # import the Empty exception from the Queue module
            stopped.wait(1)
</snippet></ROW><ROW><id>820121</id><snippet>stopped</snippet></ROW><ROW><id>820121</id><snippet>False</snippet></ROW><ROW><id>820121</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>820121</id><snippet>try:
    while not stopped.is_set():
        stopped.wait(1)
except KeyboardInterrupt:
    stopped.set()
</snippet></ROW><ROW><id>820121</id><snippet>q.join()</snippet></ROW><ROW><id>820121</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>820121</id><snippet>from signal import signal, SIGINT
def stop(signum, frame):
    stopped.set()
signal(SIGINT, stop)
</snippet></ROW><ROW><id>820121</id><snippet>q.join()</snippet></ROW><ROW><id>820130</id><snippet>    def make_instance(instance, values):
    '''
    Copied from eviscape.com

    generates an instance for dict data coming from an sp

    expects:
        instance - empty instance of the model to generate
        values - dictionary from a stored procedure with keys that are named like the
            model's attributes
    use like:
        evis = InstanceGenerator(Evis(), evis_dict_from_SP)

    &gt;&gt;&gt; make_instance(Evis(), {'evi_id': '007', 'evi_subject': 'J. Bond, Architect'})
    &lt;Evis: J. Bond, Architect&gt;

    '''
    attributes = filter(lambda x: not x.startswith('_'), instance.__dict__.keys())

    for a in attributes:
        try:
            # field names from oracle sp are UPPER CASE
            # we want to put PIC_ID in pic_id etc.
            setattr(instance, a, values[a.upper()])
            del values[a.upper()]
        except:
            pass

    #add any values that are not in the model as well
    for v in values.keys():
        setattr(instance, v, values[v])
        #print 'setting %s to %s' % (v, values[v])

    return instance
</snippet></ROW><ROW><id>820130</id><snippet>pictures = [make_instance(Pictures(), item) for item in picture_dict]
</snippet></ROW><ROW><id>820130</id><snippet>def call_an_sp(self, var):
    cursor = connection.cursor()
    cursor.callproc("fn_sp_name", (var,))
    return self.fn_generic(cursor)


def fn_generic(self, cursor):
    msg = cursor.fetchone()[0]
    cursor.execute('FETCH ALL IN "%s"' % msg)
    thing = create_dict_from_cursor(cursor)
    cursor.close()
    return thing

def create_dict_from_cursor(cursor):
    rows = cursor.fetchall()
    # DEBUG settings (used to) affect what gets returned. 
    if DEBUG:
        desc = [item[0] for item in cursor.cursor.description]
    else:
        desc = [item[0] for item in cursor.description]
    return [dict(zip(desc, item)) for item in rows]    
</snippet></ROW><ROW><id>820730</id><snippet>__slots__</snippet></ROW><ROW><id>820730</id><snippet>m</snippet></ROW><ROW><id>820730</id><snippet>  m = None # my attribute
</snippet></ROW><ROW><id>820730</id><snippet>m</snippet></ROW><ROW><id>820730</id><snippet>m</snippet></ROW><ROW><id>820730</id><snippet>__init__</snippet></ROW><ROW><id>820730</id><snippet>class MyClass(object):
  __slots__ = ("m",)
  def __init__(self):
    self.m = None

a = MyClass()
a.m = "?"
</snippet></ROW><ROW><id>820730</id><snippet>__slots__</snippet></ROW><ROW><id>820730</id><snippet>1</snippet></ROW><ROW><id>820730</id><snippet>(1,)</snippet></ROW><ROW><id>820730</id><snippet>1,</snippet></ROW><ROW><id>820730</id><snippet>(1)</snippet></ROW><ROW><id>820799</id><snippet>def myview(request):
    try:
        try:
            [...]
        except MyExceptionClass, e:
            [...]
    finally:
        render_to_response(
            'template.html', {}, context_instance = RequestContext(request)
        )
</snippet></ROW><ROW><id>820849</id><snippet>&gt;&gt;&gt; class A(str):
...    def __new__(cls, color, *args, **kwargs):
...        newobj = str.__new__(cls, *args, **kwargs)
...        newobj.color = color
...        return newobj
&gt;&gt;&gt; a = A("#fff", "horse")
&gt;&gt;&gt; a.color
'#fff'
&gt;&gt;&gt; a
'horse'
&gt;&gt;&gt; a.startswith("h")
True
</snippet></ROW><ROW><id>821238</id><snippet>from BeautifulSoup import BeautifulSoup

soup = BeautifulSoup('''
&lt;html&gt;
   &lt;head&gt;&lt;title&gt;Testing&lt;/title&gt;&lt;/head&gt;
   &lt;body&gt;
     &lt;a href="http://foo.com/"&gt;foo&lt;/a&gt;
     &lt;a href="http://bar.com/bar"&gt;Bar&lt;/a&gt;
   &lt;/body&gt;
&lt;/html&gt;''')

for link in soup.findAll('a'): # find all links
    link['href'] = link['href'] + '?foo'

print soup
</snippet></ROW><ROW><id>821238</id><snippet>&lt;html&gt;
&lt;head&gt;&lt;title&gt;Testing&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;a href="http://foo.com/?foo"&gt;foo&lt;/a&gt;
&lt;a href="http://bar.com/bar?foo"&gt;Bar&lt;/a&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>821464</id><snippet>import bisect

float_list = [line[-1] for line in foo]
index = bisect.bisect(float_list, random.random())
if index &lt; len(float_list)
    result = foo[index]
else:
    result = None # None exists
</snippet></ROW><ROW><id>822057</id><snippet>recv()</snippet></ROW><ROW><id>822057</id><snippet>recv()</snippet></ROW><ROW><id>822057</id><snippet>file.readline()</snippet></ROW><ROW><id>822057</id><snippet>read()</snippet></ROW><ROW><id>822057</id><snippet>recv()</snippet></ROW><ROW><id>822057</id><snippet>select()</snippet></ROW><ROW><id>822057</id><snippet>s.setblocking(False)</snippet></ROW><ROW><id>822416</id><snippet>import lxml.html

tree = lxml.html.fromstring(htmlcode)
for link in tree.findall(".//a"):
    url = link.get("href")
    if url.endswith(".mp3"):
        print url
</snippet></ROW><ROW><id>822462</id><snippet>symbolList=[]
for line in open('datafile.txt','r'):
if '.o' in line:
	tempname=line.split()[-1][0:-2]
            pass

if 'FUNC' not in line:
	pass

else:
	symbolList.append((tempname,line.split('|')[0]))
</snippet></ROW><ROW><id>822462</id><snippet>fullDict={}
for line in open('datafile.txt','r'):
    if '.o' in line:
        tempname=line.split()[-1][0:-2]
    if '|' not in line:
        pass
    else:
        tempDict={}
            dataList=[dataItem.strip() for dataItem in line.strip().split('|')]
            name=dataList[0].strip()
            tempDict['Value']=dataList[1]
            tempDict['Class']=dataList[2]
            tempDict['Type']=dataList[3]
            tempDict['Size']=dataList[4]
            tempDict['Line']=dataList[5]
            tempDict['Section']=dataList[6]
            tempDict['o.name']=tempname
            fullDict[name]=tempDict
            tempDict={}
</snippet></ROW><ROW><id>822462</id><snippet>funcDict={}
for record in fullDict:
    if fullDict[record]['Type']=='FUNC':
        funcDict[record]=fullDict[record]
</snippet></ROW><ROW><id>822601</id><snippet>from BeautifulSoup import BeautifulSoup
page = BeautifulSoup('&lt;foo bar="asdf" blah="123"&gt;xyz&lt;/foo&gt;')
for attr, value in page.find('foo').attrs:
    print attr, "=", value

# Prints:
# bar = asdf
# blah = 123
</snippet></ROW><ROW><id>823077</id><snippet>newDict = eval(repr(myDict).lower())
</snippet></ROW><ROW><id>823077</id><snippet>newDict = dict((k1.lower(),
                dict((k2.lower(),
                      [s.lower() for s in v2]) for k2, v2 in v1.iteritems()))
               for k1, v1 in myDict.iteritems())
</snippet></ROW><ROW><id>823111</id><snippet>import pdb
def test():
    print 1
    pdb.set_trace() # you will enter an interpreter here
    print 2
</snippet></ROW><ROW><id>823149</id><snippet>return getnormal(self)
</snippet></ROW><ROW><id>823149</id><snippet>getnormal(self)
</snippet></ROW><ROW><id>823149</id><snippet>def getNormal(self):
    normal = 0
    while normal &lt; 1:
        normal = normalvariate(40,20)
    return normal
</snippet></ROW><ROW><id>823395</id><snippet>(defadvice pabbrev-expand-maybe (around pabbrev-expand-maybe-when-not-after-whitespace activate)
  "prevent expansion when only whitespace between point and beginning of line"
  (if (save-match-data
        (save-excursion
          (let ((p (point)))
            (string-match "^\\s-*$" (buffer-substring-no-properties (progn (beginning-of-line) (point)) p)))))
      (let ((last-command (if (eq last-command this-command) (pabbrev-get-previous-binding) last-command))
            (this-command (pabbrev-get-previous-binding)))
        (pabbrev-call-previous-tab-binding))
    ad-do-it))
</snippet></ROW><ROW><id>824475</id><snippet>from setuptools import setup

APP = ['MyApp.py']
DATA_FILES = []
OPTIONS = {'argv_emulation': True, 
    'iconfile': 'MyAppIcon.icns' }

setup(
    app=APP,
    data_files=DATA_FILES,
    options={'py2app': OPTIONS},
    setup_requires=['py2app'],
)
</snippet></ROW><ROW><id>824943</id><snippet>class A(object):
    def __init__(self, var=None):
        if var is None:
            var = []
        self._var = var
</snippet></ROW><ROW><id>825064</id><snippet>paramstyle</snippet></ROW><ROW><id>825064</id><snippet>paramstyle</snippet></ROW><ROW><id>825064</id><snippet>paramstyle</snippet></ROW><ROW><id>825064</id><snippet>paramstyles</snippet></ROW><ROW><id>825343</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    formfield_overrides = {
        models.DateField: {'widget': forms.TextInput},
    }
</snippet></ROW><ROW><id>826099</id><snippet>pwd</snippet></ROW><ROW><id>826099</id><snippet>grp</snippet></ROW><ROW><id>826099</id><snippet>from pwd import getpwnam  

print getpwnam('someuser')[2]
# or
print getpwnam('someuser').pw_uid
</snippet></ROW><ROW><id>826118</id><snippet>foo</snippet></ROW><ROW><id>826118</id><snippet>bar_for_foo_mixin</snippet></ROW><ROW><id>826118</id><snippet>class myfoo(bar_for_foo_mixin, foo)</snippet></ROW><ROW><id>826118</id><snippet>bar</snippet></ROW><ROW><id>826118</id><snippet>foo.register(myfoo)</snippet></ROW><ROW><id>826126</id><snippet>class MyArticleAdminForm(forms.ModelForm):
    class Meta:
        model = Article
    def clean_name(self):
        return self.cleaned_data["name"].upper()
</snippet></ROW><ROW><id>826126</id><snippet>class Blog(models.Model):
    name = models.CharField(max_length=100)
    def save(self, force_insert=False, force_update=False):
        self.name = self.name.upper()
        super(Blog, self).save(force_insert, force_update)
</snippet></ROW><ROW><id>826277</id><snippet>import codecs

data       = "Let's just pretend that this is binary data, ok?"
uuencode   = codecs.getencoder("uu")
data_uu, n = uuencode(data)
uudecode   = codecs.getdecoder("uu")
decoded, m = uudecode(data_uu)

print """* The initial input:
%(data)s
* Encoding these %(n)d bytes produces:
%(data_uu)s
* When we decode these %(m)d bytes, we get the original data back:
%(decoded)s""" % globals()
</snippet></ROW><ROW><id>826430</id><snippet>newlist = [s for s in a_list if not any(r(s) for r in regex_list)]
</snippet></ROW><ROW><id>826430</id><snippet>a_list</snippet></ROW><ROW><id>826615</id><snippet>for line in original:</snippet></ROW><ROW><id>826615</id><snippet>original.readline()</snippet></ROW><ROW><id>826615</id><snippet>for line in original:
    ...
</snippet></ROW><ROW><id>826615</id><snippet>while True:
    line = original.readline()
    if not line: break
    ...
</snippet></ROW><ROW><id>826957</id><snippet>print("Hello World")
</snippet></ROW><ROW><id>827397</id><snippet>import win32api

drives = win32api.GetLogicalDriveStrings()
drives = drives.split('\000')[:-1]
print drives
</snippet></ROW><ROW><id>827429</id><snippet>u''</snippet></ROW><ROW><id>827429</id><snippet>2to3</snippet></ROW><ROW><id>827429</id><snippet>u</snippet></ROW><ROW><id>827449</id><snippet># encoding: utf-8
name = 'helló wörld from two'
</snippet></ROW><ROW><id>827449</id><snippet># encoding: utf-8
from __future__ import unicode_literals
import two
name = 'helló wörld from one'
print name + two.name
</snippet></ROW><ROW><id>827449</id><snippet>Traceback (most recent call last):
  File "one.py", line 5, in &lt;module&gt;
    print name + two.name
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 4: ordinal not in range(128)
</snippet></ROW><ROW><id>827449</id><snippet>print name + two.name.decode('utf-8')</snippet></ROW><ROW><id>827449</id><snippet># encoding: utf-8
html = '&lt;html&gt;&lt;body&gt;helló wörld&lt;/body&gt;&lt;/html&gt;'
if isinstance(html, unicode):
    html = html.encode('utf-8')
print 'DEBUG: %s' % html
</snippet></ROW><ROW><id>827449</id><snippet>DEBUG: &lt;html&gt;&lt;body&gt;helló wörld&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>827449</id><snippet># encoding: utf-8
from __future__ import unicode_literals
html = '&lt;html&gt;&lt;body&gt;helló wörld&lt;/body&gt;&lt;/html&gt;'
if isinstance(html, unicode):
    html = html.encode('utf-8')
print 'DEBUG: %s' % html
</snippet></ROW><ROW><id>827449</id><snippet>Traceback (most recent call last):
  File "test.py", line 6, in &lt;module&gt;
    print 'DEBUG: %s' % html
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 16: ordinal not in range(128)
</snippet></ROW><ROW><id>827449</id><snippet>print str('DEBUG: %s') % html</snippet></ROW><ROW><id>827449</id><snippet>print 'DEBUG: %s' % html.decode('utf-8')</snippet></ROW><ROW><id>827621</id><snippet>:::::</snippet></ROW><ROW><id>827621</id><snippet>":::::"</snippet></ROW><ROW><id>827621</id><snippet>/////</snippet></ROW><ROW><id>827621</id><snippet>""</snippet></ROW><ROW><id>827621</id><snippet>"///"</snippet></ROW><ROW><id>827621</id><snippet>"///"</snippet></ROW><ROW><id>827621</id><snippet>"bad://///worse/////"</snippet></ROW><ROW><id>828154</id><snippet>null_ptr = POINTER(c_float)()
pa_stream_peek(stream, null_ptr, ctypes.c_ulong(length))
null_ptr[0]
null_ptr[5] # etc
</snippet></ROW><ROW><id>829495</id><snippet>FindMachine("kubuntu")</snippet></ROW><ROW><id>829495</id><snippet>IDispatch interface</snippet></ROW><ROW><id>829495</id><snippet>comtypes</snippet></ROW><ROW><id>829495</id><snippet>Python 2.5.4 (r254:67916, Dec 23 2008, 15:10:54) [MSC v.1310 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from comtypes.client import CreateObject
&gt;&gt;&gt; box = CreateObject("VirtualBox.VirtualBox")
&gt;&gt;&gt; m = box.FindMachine("Fedora")
&gt;&gt;&gt; print m.State
4
&gt;&gt;&gt; print m.CpuCount
1
&gt;&gt;&gt; print m.Name
Fedora
&gt;&gt;&gt;
</snippet></ROW><ROW><id>829495</id><snippet>Index: automation.py
===================================================================
--- automation.py   (revision 507)
+++ automation.py   (working copy)
@@ -753,6 +753,8 @@
     c_float: VT_R4,
     c_double: VT_R8,

+    c_ulonglong: VT_I8,
+
     VARIANT_BOOL: VT_BOOL,

     BSTR: VT_BSTR,
</snippet></ROW><ROW><id>829687</id><snippet>print 'there are {0:&lt;10} students and {1:&lt;10} teachers'.format(scnt, tcnt)
</snippet></ROW><ROW><id>829687</id><snippet>%</snippet></ROW><ROW><id>829687</id><snippet>-</snippet></ROW><ROW><id>829687</id><snippet>format</snippet></ROW><ROW><id>829687</id><snippet>&lt;</snippet></ROW><ROW><id>829687</id><snippet>&gt;</snippet></ROW><ROW><id>830449</id><snippet>output</snippet></ROW><ROW><id>830626</id><snippet>for element in selector:
    print element.text_content()
</snippet></ROW><ROW><id>831449</id><snippet>$ spawn --factory=spawning.django_factory.config_factory mysite.settings
</snippet></ROW><ROW><id>831544</id><snippet>test_html</snippet></ROW><ROW><id>831544</id><snippet>&lt;html&gt;
&lt;head&gt;&lt;title&gt;Test title&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Some paragraph&lt;/p&gt;
Useless Text
&lt;a href="http://stackoverflow.com"&gt;Some link&lt;/a&gt;not a link
&lt;a href="http://python.org"&gt;Another link&lt;/a&gt;
&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>831544</id><snippet>from BeautifulSoup import BeautifulSoup

test_html = load_html_from_above()
soup = BeautifulSoup(test_html)

for t in soup.findAll(text=True):
    text = unicode(t)
    for vowel in u'aeiou':
        text = text.replace(vowel, u'') 
    t.replaceWith(text)

print soup
</snippet></ROW><ROW><id>831544</id><snippet>&lt;html&gt;
&lt;head&gt;&lt;title&gt;Tst ttl&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Sm prgrph&lt;/p&gt;
Uslss Txt
&lt;a href="http://stackoverflow.com"&gt;Sm lnk&lt;/a&gt;nt  lnk
&lt;a href="http://python.org"&gt;Anthr lnk&lt;/a&gt;
&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>832040</id><snippet>def get_subpackages(module):
    dir = os.path.dirname(module.__file__)
    def is_package(d):
        d = os.path.join(dir, d)
        return os.path.isdir(d) and glob.glob(os.path.join(d, '__init__.py*'))

    return filter(is_package, os.listdir(dir))
</snippet></ROW><ROW><id>832338</id><snippet>import webbrowser
webbrowser.open('http://www.google.com')
</snippet></ROW><ROW><id>832338</id><snippet>webbrowser.get('firefox').open_new_tab('http://www.google.com')
</snippet></ROW><ROW><id>833327</id><snippet>func_code.co_varnames[:func_code.co_argcount]</snippet></ROW><ROW><id>833327</id><snippet>import inspect
argnames, varargs, kwargs, defaults = inspect.getargspec(func)
</snippet></ROW><ROW><id>833327</id><snippet>**kwargs</snippet></ROW><ROW><id>833327</id><snippet>*args</snippet></ROW><ROW><id>833327</id><snippet>getargspec</snippet></ROW><ROW><id>833728</id><snippet>print "Status:301\nLocation: http://www.google.com"
</snippet></ROW><ROW><id>833865</id><snippet>from django.contrib.auth.models import User
from django.contrib.auth import authenticate, login
</snippet></ROW><ROW><id>833865</id><snippet>staff_member_required</snippet></ROW><ROW><id>833865</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>834578</id><snippet>.===.   .===.   .===.   .===.
| a |---| b |---| c |---| d |
'==='   '==='   '---'   '==='
</snippet></ROW><ROW><id>834578</id><snippet>a-b-c-d
</snippet></ROW><ROW><id>835231</id><snippet>work_instance.variants = [&lt;some iterable of variants&gt;]
</snippet></ROW><ROW><id>835231</id><snippet>work</snippet></ROW><ROW><id>835231</id><snippet>variant</snippet></ROW><ROW><id>835231</id><snippet>variant</snippet></ROW><ROW><id>835231</id><snippet>work</snippet></ROW><ROW><id>835430</id><snippet>items()</snippet></ROW><ROW><id>835430</id><snippet>keys()</snippet></ROW><ROW><id>835430</id><snippet>values()</snippet></ROW><ROW><id>835430</id><snippet>iteritems()</snippet></ROW><ROW><id>835430</id><snippet>iterkeys()</snippet></ROW><ROW><id>835430</id><snippet>itervalues()</snippet></ROW><ROW><id>835586</id><snippet>[index for index,line in enumerate(open('myfile.txt')) if 'mystring' in line]
</snippet></ROW><ROW><id>835859</id><snippet>__getattribute__</snippet></ROW><ROW><id>835859</id><snippet>functools.partial</snippet></ROW><ROW><id>835859</id><snippet>from functools import partial

class DerivedClass(str):

    def __new__(cls, string):
        ob = super(DerivedClass, cls).__new__(cls, string)
        return ob

    def upper(self):
        #overridden, new functionality. Return ob of type DerivedClass. Great.
        caps = super(DerivedClass, self).upper()
        return DerivedClass(caps + '123')

    def __getattribute__(self, name):
        func = str.__getattribute__(self, name)
        if name == 'upper':
            return func

        if not callable(func):
            return func

        def call_me_later(*args, **kwargs):
            result = func(*args, **kwargs)
            # Some str functions return lists, ints, etc
            if isinstance(result, basestring:
                return DerivedClass(result)
            return result

        return partial(call_me_later)
</snippet></ROW><ROW><id>836406</id><snippet>def func( *files ):
    for f in files:
         doSomethingWithFile( f )

func( *['file1','file2','file3'] ) #Is treated like func('file1','file2','file3')
func( 'file1' )
</snippet></ROW><ROW><id>836948</id><snippet>sudo updatedb</snippet></ROW><ROW><id>836948</id><snippet>locate libigraph.so.0</snippet></ROW><ROW><id>836948</id><snippet>echo $LD_LIBRARY_PATH</snippet></ROW><ROW><id>836948</id><snippet>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/yourdirhere</snippet></ROW><ROW><id>836948</id><snippet>ldconfig -n /yourdirhere</snippet></ROW><ROW><id>837840</id><snippet>import os
def oldest_file_in_tree(rootfolder, extension=".avi"):
    return min(
        (os.path.join(dirname, filename)
        for dirname, dirnames, filenames in os.walk(rootfolder)
        for filename in filenames
        if filename.endswith(extension)),
        key=lambda fn: os.stat(fn).st_mtime)
</snippet></ROW><ROW><id>837840</id><snippet>n</snippet></ROW><ROW><id>837840</id><snippet>import os, heapq
def oldest_files_in_tree(rootfolder, count=1, extension=".avi"):
    return heapq.nsmallest(count,
        (os.path.join(dirname, filename)
        for dirname, dirnames, filenames in os.walk(rootfolder)
        for filename in filenames
        if filename.endswith(extension)),
        key=lambda fn: os.stat(fn).st_mtime)
</snippet></ROW><ROW><id>837840</id><snippet>.endswith</snippet></ROW><ROW><id>837840</id><snippet>oldest_files_in_tree("/home/user", 20, (".avi", ".mov"))
</snippet></ROW><ROW><id>837840</id><snippet>import os
def files_to_delete(rootfolder, extension=".avi"):
    return sorted(
        (os.path.join(dirname, filename)
         for dirname, dirnames, filenames in os.walk(rootfolder)
         for filename in filenames
         if filename.endswith(extension)),
        key=lambda fn: os.stat(fn).st_mtime),
        reverse=True)
</snippet></ROW><ROW><id>837840</id><snippet>reverse=True</snippet></ROW><ROW><id>837840</id><snippet>file_list.pop()</snippet></ROW><ROW><id>837840</id><snippet>os.statvfs</snippet></ROW><ROW><id>837840</id><snippet>import os
def free_space_up_to(free_bytes_required, rootfolder, extension=".avi"):
    file_list= files_to_delete(rootfolder, extension)
    while file_list:
        statv= os.statvfs(rootfolder)
        if statv.f_bfree*statv.f_bsize &gt;= free_bytes_required:
            break
        os.remove(file_list.pop())
</snippet></ROW><ROW><id>837840</id><snippet>statvfs.f_bfree</snippet></ROW><ROW><id>837840</id><snippet>statvfs.f_bsize</snippet></ROW><ROW><id>837840</id><snippet>rootfolder</snippet></ROW><ROW><id>838135</id><snippet>random.py</snippet></ROW><ROW><id>838135</id><snippet>randomchoice.py</snippet></ROW><ROW><id>838135</id><snippet>random.py</snippet></ROW><ROW><id>838135</id><snippet>random.pyc</snippet></ROW><ROW><id>838135</id><snippet>import random</snippet></ROW><ROW><id>838726</id><snippet>applications = {
  'product.example.com': webapp.WSGIApplication([
    ('/', IndexHandler),
    ('/(.*)', ProductHandler)]),
  'user.example.com': webapp.WSGIApplication([
    ('/', IndexHandler),
    ('/(.*)', UserHandler)]),
}

def main():
  run_wsgi_app(applications[os.environ['HTTP_HOST']])

if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>838867</id><snippet>    /* Example calculates the sum of the prime factors of the first 32 Fibonacci numbers */
#include &lt;stdio.h&gt;

typedef enum{false=0, true=1}bool;

/* the following line is the only time I have ever required "auto" */
#define FOR(i,iterator) auto bool lambda(i); yield_init = (void *)&amp;lambda; iterator; bool lambda(i)
#define DO {
#define     YIELD(x) if(!yield(x))return
#define     BREAK return false
#define     CONTINUE return true
#define OD CONTINUE; }
/* Warning: _Most_ FOR(,){ } loops _must_ have a CONTINUE as the last statement. 
 *  *   Otherwise the lambda will return random value from stack, and may terminate early */

typedef void iterator; /* hint at procedure purpose */
static volatile void *yield_init;
#define YIELDS(type) bool (*yield)(type) = yield_init

iterator fibonacci(int n){
   YIELDS(int);
   int i;
   int pair[2] = {0,1};
   YIELD(0); YIELD(1);
   for(i=2; i&lt;n; i++){
      pair[i%2] = pair[0] + pair[1];
      YIELD(pair[i%2]);
   }
}

iterator factors(int n){
  YIELDS(int); 
  int i;
  for(i=2; i*i&lt;=n; i++){
    while(n%i == 0 ){
      YIELD(i);
      n/=i;
    }
  }
  YIELD(n);
}

main(){
    FOR(int i, fibonacci(32)){
        printf("%d:", i);
        int sum = 0;
        FOR(int factor, factors(i)){
            sum += factor;
            printf(" %d",factor);
            CONTINUE;
        }
        printf(" - sum of factors: %d\n", sum);
        CONTINUE;
    }
}
</snippet></ROW><ROW><id>839009</id><snippet>#!C:/Python25/python.exe
</snippet></ROW><ROW><id>839009</id><snippet>#!C:/Python25/python.exe -u
</snippet></ROW><ROW><id>839009</id><snippet>msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)
</snippet></ROW><ROW><id>839009</id><snippet>stdin</snippet></ROW><ROW><id>839419</id><snippet>SELECT</snippet></ROW><ROW><id>839419</id><snippet>SELECT</snippet></ROW><ROW><id>839419</id><snippet>rowcount</snippet></ROW><ROW><id>839419</id><snippet>rowcount</snippet></ROW><ROW><id>839419</id><snippet>fetchall()</snippet></ROW><ROW><id>839662</id><snippet>raise "SomeNameOfAnExceptionClass"
</snippet></ROW><ROW><id>840110</id><snippet>import re

myString = "This is my tweet check it out http://tinyurl.com/blah"

print re.search("(?P&lt;url&gt;https?://[^\s]+)", myString).group("url")
</snippet></ROW><ROW><id>840977</id><snippet>C = MyReallyBigClassNameWhichIHateToType
</snippet></ROW><ROW><id>841110</id><snippet>bar.a1.a2.a3.an</snippet></ROW><ROW><id>841110</id><snippet>foo.py</snippet></ROW><ROW><id>841110</id><snippet>bar.a1.a2.a3.an</snippet></ROW><ROW><id>841110</id><snippet>foo.py</snippet></ROW><ROW><id>841110</id><snippet>foo.py</snippet></ROW><ROW><id>841110</id><snippet>class _barclass(object):
    def __init__(self, parent, name):
        if parent and name:
            self.path = parent.path + '/' + name
            setattr(parent, name, self)
        else:
            self.path = ''
    def __getattr__(self, name):
        return _barclass(self, name)
    def __call__(self):
        # do your processing here
        # url path is contained in self.path

bar = _barclass(None, None)
</snippet></ROW><ROW><id>841588</id><snippet>lambda</snippet></ROW><ROW><id>841588</id><snippet>i</snippet></ROW><ROW><id>841588</id><snippet>9</snippet></ROW><ROW><id>841588</id><snippet>functools.partial()</snippet></ROW><ROW><id>841588</id><snippet>def test():
    def makefunc(i):
        return lambda x: p(i, x)
    a = []
    for i in range(10):
        a.append(makefunc(i))
    return a
</snippet></ROW><ROW><id>841589</id><snippet>range(1, 600851475143)</snippet></ROW><ROW><id>841589</id><snippet>xrange</snippet></ROW><ROW><id>841589</id><snippet>range</snippet></ROW><ROW><id>841589</id><snippet>xrange</snippet></ROW><ROW><id>841589</id><snippet>for i in xrange(1, 600851475143):
  print i
</snippet></ROW><ROW><id>841589</id><snippet>range</snippet></ROW><ROW><id>841589</id><snippet>x = 1 &lt;&lt; 200
print list(xrange(x, x + 3))
</snippet></ROW><ROW><id>841589</id><snippet>[1606938044258990275541962092341162602522202993782792835301376L, 1606938044258990275541962092341162602522202993782792835301377L, 1606938044258990275541962092341162602522202993782792835301378L]
</snippet></ROW><ROW><id>841589</id><snippet>def bigrange(a, b = None):
  if b is None:
    b = a
    a = 0
  while a &lt; b:
    yield a
    a += 1

for i in bigrange(1, 600851475143):
  print i
</snippet></ROW><ROW><id>841589</id><snippet>continue</snippet></ROW><ROW><id>841589</id><snippet>i = 1 - 1
while i &lt; 600851475143 - 1:
  i += 1
  print i
</snippet></ROW><ROW><id>841895</id><snippet>$ python setup.py build
DBG&gt; include = ['/usr/include', '/usr/include/python2.6', '/usr/include/SDL']
running build
running build_ext
building 'surfutils' extension
creating build
creating build/temp.linux-i686-2.6
creating build/temp.linux-i686-2.6/src
gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -I/usr/include -I/usr/include/python2.6 -I/usr/include/SDL -I/usr/include/python2.6 -c src/surfutils.c -o build/temp.linux-i686-2.6/src/surfutils.o
In file included from src/surfutils.c:1:
/usr/include/python2.6/pygame/pygame.h:68:17: error: SDL.h: Arquivo ou diretório inexistente
In file included from src/surfutils.c:1:
/usr/include/python2.6/pygame/pygame.h:312: error: expected specifier-qualifier-list before ‘SDL_VideoInfo’
/usr/include/python2.6/pygame/pygame.h:350: error: expected specifier-qualifier-list before ‘SDL_Surface’
src/surfutils.c:5: error: expected ‘)’ before ‘*’ token
src/surfutils.c: In function ‘PyCollisionPoint’:
src/surfutils.c:74: error: ‘SDL_Surface’ undeclared (first use in this function)
src/surfutils.c:74: error: (Each undeclared identifier is reported only once
src/surfutils.c:74: error: for each function it appears in.)
src/surfutils.c:74: error: ‘surf1’ undeclared (first use in this function)
src/surfutils.c:74: error: ‘surf2’ undeclared (first use in this function)
src/surfutils.c:74: warning: left-hand operand of comma expression has no effect
src/surfutils.c:92: error: ‘PySurfaceObject’ has no member named ‘surf’
src/surfutils.c:97: error: ‘SDL_SRCALPHA’ undeclared (first use in this function)
src/surfutils.c:111: error: ‘PySurfaceObject’ has no member named ‘surf’
src/surfutils.c:161: warning: implicit declaration of function ‘collisionPoint’
error: command 'gcc' failed with exit status 1
</snippet></ROW><ROW><id>841895</id><snippet>surfutils</snippet></ROW><ROW><id>841895</id><snippet>libsdl1.2-dev</snippet></ROW><ROW><id>841895</id><snippet>#!/usr/bin/env python2.3

from distutils.core       import setup, Extension
from distutils.sysconfig  import get_config_vars

includes = []
includes.extend(get_config_vars('INCLUDEDIR'))
includes.extend(get_config_vars('INCLUDEPY'))
includes.append('/usr/include/SDL')

print 'DBG&gt; include =', includes

setup(name='surfutils',
      version='1.0',
      ext_modules=[Extension(
                    'surfutils', 
                    ['src/surfutils.c'], 
                    include_dirs=includes,
                  )],
     )
</snippet></ROW><ROW><id>841895</id><snippet>includes.append('/usr/include/SDL')
</snippet></ROW><ROW><id>841895</id><snippet>includes.append(r'C:\mydevelopmentheaders\SDL')
</snippet></ROW><ROW><id>841995</id><snippet>csvn</snippet></ROW><ROW><id>842023</id><snippet>try:
    do_something_crazy
except AttributeError:
    print 'there was an AttributeError'
except NameError:
    print 'there was a NameError'
except:
print 'something else failed miserably'
</snippet></ROW><ROW><id>842023</id><snippet># No idea if this is the right import, but they should be somewhere in that module
import dbi

try:
    cursor.execute("delete from TABLE")
except dbi.internal-error:
    print 'internal-error'
except dbi.program-error:
    print 'program-error'
</snippet></ROW><ROW><id>842096</id><snippet>&gt;&gt;&gt; import getpass
&gt;&gt;&gt; getpass.getuser()
'kostya'
</snippet></ROW><ROW><id>842248</id><snippet>error</snippet></ROW><ROW><id>842248</id><snippet>&lt;/p&gt;

&lt;p&gt;line: goodline | badline ;&lt;/p&gt;

&lt;p&gt;badline : error '\n' /* Error-handling action, if needed */&lt;/p&gt;

&lt;p&gt;goodline : equation '\n' ;
</snippet></ROW><ROW><id>842248</id><snippet>equation</snippet></ROW><ROW><id>842248</id><snippet>badline</snippet></ROW><ROW><id>842248</id><snippet>yyerrok</snippet></ROW><ROW><id>842358</id><snippet>&gt;&gt;&gt; (8885558**0.5)**2
8885557.9999999981
&gt;&gt;&gt; sqrt(8885558)**2
8885558.0000000019

&gt;&gt;&gt; 2**1023.99999999999
1.7976931348498497e+308

&gt;&gt;&gt; (sqrt(2**1023.99999999999))**2
1.7976931348498495e+308
&gt;&gt;&gt; ((2**1023.99999999999)**0.5)**2
1.7976931348498499e+308

&gt;&gt;&gt; ((2**1023.99999999999)**0.5)**2 - 2**1023.99999999999
1.9958403095347198e+292
&gt;&gt;&gt; (sqrt(2**1023.99999999999))**2 - 2**1023.99999999999
-1.9958403095347198e+292
</snippet></ROW><ROW><id>842358</id><snippet>math.pow()</snippet></ROW><ROW><id>842358</id><snippet>pow()</snippet></ROW><ROW><id>842358</id><snippet>__builtin__.pow()</snippet></ROW><ROW><id>842358</id><snippet>**</snippet></ROW><ROW><id>842358</id><snippet>pow()</snippet></ROW><ROW><id>842358</id><snippet>math.sqrt</snippet></ROW><ROW><id>842358</id><snippet>pow</snippet></ROW><ROW><id>842567</id><snippet>import time
from threading import Thread

def noInterrupt():
    for i in xrange(4):
        print i
        time.sleep(1)

a = Thread(target=noInterrupt)
a.start()
a.join()
print "done"


0
1
2
3
Traceback (most recent call last):
  File "C:\Users\Admin\Desktop\test.py", line 11, in &lt;module&gt;
    a.join()
  File "C:\Python26\lib\threading.py", line 634, in join
    self.__block.wait()
  File "C:\Python26\lib\threading.py", line 237, in wait
    waiter.acquire()
KeyboardInterrupt
</snippet></ROW><ROW><id>842567</id><snippet>import time
from threading import Thread

def noInterrupt(path, obj):
    try:
        file = open(path, 'w')
        dump(obj, file)
    finally:
        file.close()

a = Thread(target=noInterrupt, args=(path,obj))
a.start()
a.join()
</snippet></ROW><ROW><id>842577</id><snippet>os.path</snippet></ROW><ROW><id>842577</id><snippet>os.path.join(os.path.abspath(os.path.dirname(__file__)), 'logs')
</snippet></ROW><ROW><id>842577</id><snippet>os.path.sep
</snippet></ROW><ROW><id>842646</id><snippet>os.walk</snippet></ROW><ROW><id>842646</id><snippet>results = []
if regex_search:
    p = re.compile(__searchtext__)
for dir, subdirs, subfiles in os.walk('c:/docs/2009'):
    for name in fnmatch.filter(subfiles, '*.txt'):
        fn = os.path.join(dir, name)
        with open(fn, 'r') as f:
            if regex_search:
                results += [(fn,lineno) for lineno, line in enumerate(f) if p.search(line)]
            else:
                results += [(fn,lineno) for lineno, line in enumerate(f) if line.find(__searchtext__) &gt;= 0]
</snippet></ROW><ROW><id>842871</id><snippet>import re

def work():
  to_find = re.compile("cat|fish|dog")
  search_str = "blah fish cat dog haha"
  match_obj = to_find.search(search_str)
  the_index = match_obj.start()  # produces 5, the index of fish
  which_word_matched = match_obj.group()  # "fish"
  # Note, if no match, match_obj is None
</snippet></ROW><ROW><id>842871</id><snippet>def wordlist_to_regex(words):
    escaped = map(re.escape, words)
    combined = '|'.join(sorted(escaped, key=len, reverse=True))
    return re.compile(combined)

&gt;&gt;&gt; r.search('smash atomic particles').span()
(6, 10)
&gt;&gt;&gt; r.search('visit usenet:comp.lang.python today').span()
(13, 29)
&gt;&gt;&gt; r.search('a north\south division').span()
(2, 13)
&gt;&gt;&gt; r.search('012cat').span()
(3, 6)
&gt;&gt;&gt; r.search('0123dog789cat').span()
(4, 7)
</snippet></ROW><ROW><id>842871</id><snippet>import random
import re
import string
import sys

def main(args):
    words = []
    letters_and_digits = "%s%s" % (string.letters, string.digits)
    for i in range(2000):
        chars = []
        for j in range(10):
            chars.append(random.choice(letters_and_digits))
        words.append(("%s"*10) % tuple(chars))
    search_for = re.compile("|".join(words))
    first, middle, last = words[0], words[len(words) / 2], words[-1]
    search_string = "%s, %s, %s" % (last, middle, first)
    match_obj = search_for.search(search_string)
    if match_obj is None:
        print "Ahhhg"
        return
    index = match_obj.start()
    which = match_obj.group()
    if index != 0:
        print "ahhhg"
        return
    if words[-1] != which:
        print "ahhg"
        return

    print "success!!! Generated 2000 random words, compiled re, and was able to perform matches."

if __name__ == "__main__":
    main(sys.argv)
</snippet></ROW><ROW><id>842871</id><snippet>&gt;&gt;&gt; search_str = "01catdog"
&gt;&gt;&gt; test1 = re.compile("cat|catdog")
&gt;&gt;&gt; match1 = test1.search(search_str)
&gt;&gt;&gt; match1.group()
'cat'
&gt;&gt;&gt; match1.start()
2
&gt;&gt;&gt; test2 = re.compile("catdog|cat")  # reverse order
&gt;&gt;&gt; match2 = test2.search(search_str)
&gt;&gt;&gt; match2.group()
'catdog'
&gt;&gt;&gt; match2.start()
2
</snippet></ROW><ROW><id>842876</id><snippet>Player.objects.values('player_type').order_by().annotate(Count('player_type'))
</snippet></ROW><ROW><id>842876</id><snippet>values('player_type')</snippet></ROW><ROW><id>842876</id><snippet>player_type</snippet></ROW><ROW><id>842876</id><snippet>GROUP BY</snippet></ROW><ROW><id>842876</id><snippet>order_by()</snippet></ROW><ROW><id>842876</id><snippet>SELECT</snippet></ROW><ROW><id>842876</id><snippet>GROUP BY</snippet></ROW><ROW><id>843046</id><snippet>s1 = u"%s"%a # works</snippet></ROW><ROW><id>843046</id><snippet>u"%s" % repr([a]).decode('utf-8')</snippet></ROW><ROW><id>843046</id><snippet>'[%s]' % u','.join(unicode(x) for x in [a,a])</snippet></ROW><ROW><id>843239</id><snippet>unicode(content)
</snippet></ROW><ROW><id>843239</id><snippet>content</snippet></ROW><ROW><id>843239</id><snippet>content.renderContents()
</snippet></ROW><ROW><id>843293</id><snippet>if 'myVar' in locals():
  # myVar exists.
</snippet></ROW><ROW><id>843293</id><snippet>if 'myVar' in globals():
  # myVar exists.
</snippet></ROW><ROW><id>843293</id><snippet>if hasattr(obj, 'attr_name'):
  # obj.attr_name exists.
</snippet></ROW><ROW><id>843298</id><snippet>import ctypes
ctypes.windll.user32.LockWorkStation ()
</snippet></ROW><ROW><id>843489</id><snippet>'some string'</snippet></ROW><ROW><id>843489</id><snippet>a = 'hi mom'
a = 'next value'
</snippet></ROW><ROW><id>843489</id><snippet>'hi mom'</snippet></ROW><ROW><id>843489</id><snippet>'hi mom'</snippet></ROW><ROW><id>843690</id><snippet>python -m cProfile --sort cumulative myScript.py
</snippet></ROW><ROW><id>843690</id><snippet>import inspect
print inspect.getframeinfo(inspect.currentframe().f_back)[2]
</snippet></ROW><ROW><id>843690</id><snippet>record = {}

caller = inspect.getframeinfo(inspect.currentframe().f_back)[2]
record[caller] = record.get(caller, 0) + 1
</snippet></ROW><ROW><id>843690</id><snippet>print sorted(record.items(), key=lambda a: a[1])
</snippet></ROW><ROW><id>843740</id><snippet>p = User(name="Fred", email="fred@example.com")
</snippet></ROW><ROW><id>843740</id><snippet># In User class declaration
@classmethod
def create(cls, name, email):
  return cls(name=name, email=email)

# Use it
p = User.create("Fred", "fred@example.com")
</snippet></ROW><ROW><id>843899</id><snippet>def number_of_ones(n):
    sum = 0
    while n != 0:
        sum += lookup_table[n &amp; 0xff]
        n &gt;&gt;= 8
    return sum
</snippet></ROW><ROW><id>843984</id><snippet>import datetime
ist_time = datetime.utcnow() + datetime.timedelta(hours=5, minutes = 30)
# Turn this into a time object (no day information).
ist_time = ist_time.time()
if datetime.time(9, 55) &lt;= ist_time &lt;= datetime.time(16, 1):
   ...
</snippet></ROW><ROW><id>844721</id><snippet>comment_re = re.compile(
    r'(^)?[^\S\n]*/(?:\*(.*?)\*/[^\S\n]*|/[^\n]*)($)?',
    re.DOTALL | re.MULTILINE
)

def comment_replacer(match):
    start,mid,end = match.group(1,2,3)
    if mid is None:
        # single line comment
        return ''
    elif start is not None or end is not None:
        # multi line comment at start or end of a line
        return ''
    elif '\n' in mid:
        # multi line comment with line break
        return '\n'
    else:
        # multi line comment without line break
        return ' '

def remove_comments(text):
    return comment_re.sub(comment_replacer, text)
</snippet></ROW><ROW><id>844721</id><snippet>(^)?</snippet></ROW><ROW><id>844721</id><snippet>MULTILINE</snippet></ROW><ROW><id>844721</id><snippet>[^\S\n]</snippet></ROW><ROW><id>844721</id><snippet>/\*(.*?)\*/</snippet></ROW><ROW><id>844721</id><snippet>DOTALL</snippet></ROW><ROW><id>844721</id><snippet>.</snippet></ROW><ROW><id>844721</id><snippet>//[^\n]</snippet></ROW><ROW><id>844721</id><snippet>.</snippet></ROW><ROW><id>844721</id><snippet>DOTALL</snippet></ROW><ROW><id>844721</id><snippet>($)?</snippet></ROW><ROW><id>844721</id><snippet>MULTILINE</snippet></ROW><ROW><id>844721</id><snippet>&gt;&gt;&gt; s = ("qwe /* 123\n"
         "456\n"
         "789 */ asd /* 123 */ zxc\n"
         "rty // fgh\n")
&gt;&gt;&gt; print '"' + '"\n"'.join(
...     remove_comments(s).splitlines()
... ) + '"'
"qwe"
"asd zxc"
"rty"
&gt;&gt;&gt; comments_test = ("hello // comment\n"
...                  "line 2 /* a comment */\n"
...                  "line 3 /* a comment*/ /*comment*/\n"
...                  "line 4 /* a comment\n"
...                  "continuation of a comment*/ line 5\n"
...                  "/* comment */line 6\n"
...                  "line 7 /*********\n"
...                  "********************\n"
...                  "**************/\n"
...                  "line ?? /*********\n"
...                  "********************\n"
...                  "********************\n"
...                  "********************\n"
...                  "********************\n"
...                  "**************/\n")
&gt;&gt;&gt; print '"' + '"\n"'.join(
...     remove_comments(comments_test).splitlines()
... ) + '"'
"hello"
"line 2"
"line 3 "
"line 4"
"line 5"
"line 6"
"line 7"
"line ??"
"line ??"
</snippet></ROW><ROW><id>845014</id><snippet>comment_date</snippet></ROW><ROW><id>845014</id><snippet>'8 hours'</snippet></ROW><ROW><id>845014</id><snippet>{{ comment_date|timesince }}
</snippet></ROW><ROW><id>845014</id><snippet>question_date</snippet></ROW><ROW><id>845014</id><snippet>comment_date</snippet></ROW><ROW><id>845014</id><snippet>{{ comment_date|timesince:question_date }}
</snippet></ROW><ROW><id>845041</id><snippet>string.strip(" Hello ")</snippet></ROW><ROW><id>845041</id><snippet>" Hello ".strip()</snippet></ROW><ROW><id>845041</id><snippet>class O(object):
    c = str.capitalize
    r = str.replace
    s = str.strip

def process_line(line, *ops):
    i = iter(ops)
    while True:
        try:
            op = i.next()
            args = i.next()
        except StopIteration:
            break
        line = op(line, *args)
    return line
</snippet></ROW><ROW><id>845041</id><snippet>O</snippet></ROW><ROW><id>845041</id><snippet>O</snippet></ROW><ROW><id>845041</id><snippet>process_line</snippet></ROW><ROW><id>845041</id><snippet>process_line</snippet></ROW><ROW><id>845041</id><snippet>process_line</snippet></ROW><ROW><id>845041</id><snippet>f = open("parrot_sketch.txt")
for line in f:
    p = process_line(
        line,
        O.r, ["He's resting...", "This is an ex-parrot!"],
        O.c, [],
        O.s, []
    )
    print p
</snippet></ROW><ROW><id>845041</id><snippet>O.f1</snippet></ROW><ROW><id>845041</id><snippet>O.f2</snippet></ROW><ROW><id>845041</id><snippet>O.f3</snippet></ROW><ROW><id>845081</id><snippet>\n</snippet></ROW><ROW><id>845167</id><snippet>&gt;&gt;&gt; print date.fromtimestamp(1241711346274/1000.0)
2009-05-07
</snippet></ROW><ROW><id>845424</id><snippet>if urlparse.urlparse(url_file_stream_or_string)[0] in ('http', 'https', 'ftp'):
    # do something with the url
else:
    # This is a file path
    return open(url_file_stream_or_string)
</snippet></ROW><ROW><id>845424</id><snippet>import urlparse, urllib

def opener(fun):
    def wrapper(url):
        if urlparse.urlparse(url)[0] in ('http', 'https', 'ftp'):
            return fun(urllib.urlopen(url))
        return fun(open(url))
    return wrapper

@opener
def read(stream):
   return stream.read()

read('myfile')
read('http://www.wikipedia.org')
</snippet></ROW><ROW><id>845432</id><snippet>def _unidiff_output(expected, actual):
    """
    Helper function. Returns a string containing the unified diff of two multiline strings.
    """

    import difflib
    expected=expected.splitlines(1)
    actual=actual.splitlines(1)

    diff=difflib.unified_diff(expected, actual)

    return ''.join(diff)
</snippet></ROW><ROW><id>845659</id><snippet>clear</snippet></ROW><ROW><id>845659</id><snippet>tab = {1: (100, None), {'acs': (20, None)}),
       20: ((30, 'hst_ota'), {'ota': (30, 'hst_ota'), 'noota': (30, None)}),
       30: ((None, None), {'acs': (10000,None), 'cos':(11000,None)}),
       etc etc
</snippet></ROW><ROW><id>845659</id><snippet>def f(icss):
  kws = set(icss.split(','))
  N = 1
  while N in tab:
    stuff, others = tab[N]
    found = kws &amp; set(others)
    if found:
      # maybe error if len(found) &gt; 1 ?
      stuff = others[found.pop()]
    N, word_to_add = stuff
    if word_to_add is not None:
      print word_to_add
</snippet></ROW><ROW><id>845691</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>845691</id><snippet>__copy__</snippet></ROW><ROW><id>845691</id><snippet>__deepcopy__</snippet></ROW><ROW><id>845691</id><snippet>clone()</snippet></ROW><ROW><id>845800</id><snippet>print(sum(decimal.Decimal(1) / i for i in range(1, 31)))
</snippet></ROW><ROW><id>845800</id><snippet>Decimal</snippet></ROW><ROW><id>845800</id><snippet>sum</snippet></ROW><ROW><id>845800</id><snippet>var</snippet></ROW><ROW><id>845800</id><snippet>var = lambda i: decimal.Decimal(str(1.0 / i))
</snippet></ROW><ROW><id>845800</id><snippet>str</snippet></ROW><ROW><id>845800</id><snippet>Decimal</snippet></ROW><ROW><id>845800</id><snippet>sum</snippet></ROW><ROW><id>845800</id><snippet>sum</snippet></ROW><ROW><id>845800</id><snippet>print(sum(var(i) for i in range(1,31)))
print(sum(map(var, range(1, 31))))
</snippet></ROW><ROW><id>845800</id><snippet>one = decimal.Decimal(1)
unitFractions = (one / i for i in itertools.count(1))
print(sum(itertools.islice(unitFractions, 30)))
</snippet></ROW><ROW><id>845800</id><snippet>&gt;&gt;&gt; unitFractions = (fractions.Fraction(1, i) for i in itertools.count(1))
&gt;&gt;&gt; print(sum(itertools.islice(unitFractions, 30)))
9304682830147/2329089562800
</snippet></ROW><ROW><id>846274</id><snippet>In [1]: a = [1,2,3]

In [2]: b = [2,3,4]

In [3]: map(sum, zip(a,b))
Out[3]: [3, 5, 7]
</snippet></ROW><ROW><id>846274</id><snippet>In [5]: from itertools import izip

In [6]: map(sum, izip(a,b))
Out[6]: [3, 5, 7]
</snippet></ROW><ROW><id>846403</id><snippet>pg_config</snippet></ROW><ROW><id>846403</id><snippet>/usr/local/pgsql/bin/</snippet></ROW><ROW><id>846403</id><snippet>setup.cfg</snippet></ROW><ROW><id>846403</id><snippet>pg_config</snippet></ROW><ROW><id>846403</id><snippet>pg_config=</snippet></ROW><ROW><id>846403</id><snippet>pg_config=/usr/local/pgsql/bin/pg_config</snippet></ROW><ROW><id>846858</id><snippet>blank=True, null=True</snippet></ROW><ROW><id>846858</id><snippet>parent</snippet></ROW><ROW><id>846870</id><snippet>class Round(models.Model):        
    number = models.IntegerField()
    round_type = models.CharField(max_length=1, default="n", choices=CHOICES)
    tournament = models.ForeignKey(Tournament)
    players = models.ManyToManyField(Player, related_name="rounds")
    winner = models.ForeignKey(Player, null=True, related_name="round_winner")
</snippet></ROW><ROW><id>846870</id><snippet># grab a player 
p = Player.objects.get(name='Tom')

# see what rounds this player played in
rounds_played = p.rounds.all()

# who did this player play against?
[r.players for r in rounds_played]

# to see all rounds this player won
p.round_winner.all()
</snippet></ROW><ROW><id>846886</id><snippet>"string"</snippet></ROW><ROW><id>846886</id><snippet>"""</snippet></ROW><ROW><id>846886</id><snippet>'''</snippet></ROW><ROW><id>846886</id><snippet>import re
sanitized = re.sub(r'(#.*)|\'(?:[^\'\\]+|\\.)*\'|"(?:[^"\\]+|\\.)*"',
    lambda match: match.group(1) or '"string"', source_code)
</snippet></ROW><ROW><id>846886</id><snippet>\"</snippet></ROW><ROW><id>846886</id><snippet>\\</snippet></ROW><ROW><id>846886</id><snippet>\n</snippet></ROW><ROW><id>846886</id><snippet>\\</snippet></ROW><ROW><id>846886</id><snippet>\\"</snippet></ROW><ROW><id>846886</id><snippet>\\\"</snippet></ROW><ROW><id>846931</id><snippet>GetCommandLineArgvW </snippet></ROW><ROW><id>846931</id><snippet>win32_unicode_argv.py</snippet></ROW><ROW><id>846931</id><snippet>"""
win32_unicode_argv.py

Importing this will replace sys.argv with a full Unicode form.
Windows only.

From this site, with adaptations:
      http://code.activestate.com/recipes/572200/

Usage: simply import this module into a script. sys.argv is changed to
be a list of Unicode strings.
"""


import sys

def win32_unicode_argv():
    """Uses shell32.GetCommandLineArgvW to get sys.argv as a list of Unicode
    strings.

    Versions 2.x of Python don't support Unicode in sys.argv on
    Windows, with the underlying Windows API instead replacing multi-byte
    characters with '?'.
    """

    from ctypes import POINTER, byref, cdll, c_int, windll
    from ctypes.wintypes import LPCWSTR, LPWSTR

    GetCommandLineW = cdll.kernel32.GetCommandLineW
    GetCommandLineW.argtypes = []
    GetCommandLineW.restype = LPCWSTR

    CommandLineToArgvW = windll.shell32.CommandLineToArgvW
    CommandLineToArgvW.argtypes = [LPCWSTR, POINTER(c_int)]
    CommandLineToArgvW.restype = POINTER(LPWSTR)

    cmd = GetCommandLineW()
    argc = c_int(0)
    argv = CommandLineToArgvW(cmd, byref(argc))
    if argc.value &gt; 0:
        # Remove Python executable and commands if present
        start = argc.value - len(sys.argv)
        return [argv[i] for i in
                xrange(start, argc.value)]

sys.argv = win32_unicode_argv()
</snippet></ROW><ROW><id>846931</id><snippet>import sys
import win32_unicode_argv
</snippet></ROW><ROW><id>846931</id><snippet>sys.argv</snippet></ROW><ROW><id>846931</id><snippet>optparse</snippet></ROW><ROW><id>847566</id><snippet>from math import *</snippet></ROW><ROW><id>847566</id><snippet>def userFunc( col1, col2, col3, ... ):
   result1= {{ their code goes here }}
   return result1
</snippet></ROW><ROW><id>847566</id><snippet>exec</snippet></ROW><ROW><id>847566</id><snippet>exec</snippet></ROW><ROW><id>847576</id><snippet>$ cat /tmp/test
#!/usr/bin/env escript
main(_) -&gt;
io:format("Hello World!\n").
$ chmod +x /tmp/test
$ /tmp/test
Hello World!
</snippet></ROW><ROW><id>847866</id><snippet>import tempfile

print tempfile.gettempdir() # prints the current temporary directory

f = tempfile.TemporaryFile()
f.write('something on temporaryfile')
f.seek(0) # return to beginning of file
print f.read() # reads data back from the file
f.close() # temporary file is automatically deleted here
</snippet></ROW><ROW><id>847866</id><snippet>TMPDIR</snippet></ROW><ROW><id>847866</id><snippet>TEMP</snippet></ROW><ROW><id>847866</id><snippet>TMP</snippet></ROW><ROW><id>847866</id><snippet>Wimp$ScrapDir</snippet></ROW><ROW><id>847866</id><snippet>C:\TEMP</snippet></ROW><ROW><id>847866</id><snippet>C:\TMP</snippet></ROW><ROW><id>847866</id><snippet>\TEMP</snippet></ROW><ROW><id>847866</id><snippet>\TMP</snippet></ROW><ROW><id>847866</id><snippet>/tmp</snippet></ROW><ROW><id>847866</id><snippet>/var/tmp</snippet></ROW><ROW><id>847866</id><snippet>/usr/tmp</snippet></ROW><ROW><id>847952</id><snippet>import inspect
inspect.getargspec(someMethod)
</snippet></ROW><ROW><id>848661</id><snippet>% formatting</snippet></ROW><ROW><id>848661</id><snippet>&gt;&gt;&gt; fmt="%4s%10s%10s"
&gt;&gt;&gt; fmt % (1,"ONE",2)
'   1       ONE         2'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>848661</id><snippet>&gt;&gt;&gt; fmt2 = "%*s%*s%*s"
&gt;&gt;&gt; fmt2 % (4,1, 10,"ONE", 10,2)
'   1       ONE         2'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>848661</id><snippet>zip()</snippet></ROW><ROW><id>848661</id><snippet>str.join()</snippet></ROW><ROW><id>848661</id><snippet>&gt;&gt;&gt; widths=(4,10,10)
&gt;&gt;&gt; items=(1,"ONE",2)
&gt;&gt;&gt; "".join("%*s" % i for i in zip(widths, items))
'   1       ONE         2'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>849388</id><snippet>letters = [('a', 'A'), ('b', 'B')]
for i, (lowercase, uppercase) in enumerate(letters):
    print "Letter #%d is %s/%s" % (i, lowercase, uppercase)
</snippet></ROW><ROW><id>849426</id><snippet>from django.db import models

class IntegerRangeField(models.IntegerField):
    def __init__(self, verbose_name=None, name=None, min_value=None, max_value=None, **kwargs):
        self.min_value, self.max_value = min_value, max_value
        models.IntegerField.__init__(self, verbose_name, name, **kwargs)
    def formfield(self, **kwargs):
        defaults = {'min_value': self.min_value, 'max_value':self.max_value}
        defaults.update(kwargs)
        return super(IntegerRangeField, self).formfield(**defaults)
</snippet></ROW><ROW><id>849426</id><snippet>size = fields.IntegerRangeField(min_value=1, max_value=50)
</snippet></ROW><ROW><id>849426</id><snippet>size = fields.IntegerRangeField(min_value=-100, max_value=100)
</snippet></ROW><ROW><id>849426</id><snippet>size = fields.IntegerRangeField(range(1, 50))
</snippet></ROW><ROW><id>849574</id><snippet>include</snippet></ROW><ROW><id>849574</id><snippet>Base</snippet></ROW><ROW><id>849574</id><snippet>Story_*</snippet></ROW><ROW><id>849574</id><snippet>Story_*</snippet></ROW><ROW><id>849574</id><snippet>Story_base</snippet></ROW><ROW><id>849574</id><snippet>Story_list</snippet></ROW><ROW><id>849574</id><snippet>Base</snippet></ROW><ROW><id>849574</id><snippet>{% extends "Base" %}</snippet></ROW><ROW><id>849574</id><snippet>Story_list</snippet></ROW><ROW><id>849574</id><snippet>Base</snippet></ROW><ROW><id>849574</id><snippet>Story_list</snippet></ROW><ROW><id>849574</id><snippet>Base</snippet></ROW><ROW><id>849574</id><snippet>include</snippet></ROW><ROW><id>849574</id><snippet>include</snippet></ROW><ROW><id>849574</id><snippet>Base</snippet></ROW><ROW><id>849574</id><snippet>Story_base</snippet></ROW><ROW><id>849574</id><snippet>Story_*</snippet></ROW><ROW><id>849849</id><snippet>mydict = default.copy()
</snippet></ROW><ROW><id>849950</id><snippet>from BeautifulSoup import BeautifulSoup

html = \
"""
&lt;div id=hotlinklist&gt;
  &lt;a href="foo1.com"&gt;Foo1&lt;/a&gt;
  &lt;div id=hotlink&gt;
    &lt;a href="/"&gt;Home&lt;/a&gt;
  &lt;/div&gt;
  &lt;div id=hotlink&gt;
    &lt;a href="/extract"&gt;Extract&lt;/a&gt;
  &lt;/div&gt;
  &lt;div id=hotlink&gt;
    &lt;a href="/sitemap"&gt;Sitemap&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;"""

soup = BeautifulSoup(html)
soup.findAll("div",id="hotlink")[2].a

# &lt;a href="/sitemap"&gt;Sitemap&lt;/a&gt;
</snippet></ROW><ROW><id>850091</id><snippet>from PIL import Image
img1 = Image.open('image1.jpg')
img2 = Image.open('image2.jpg')
</snippet></ROW><ROW><id>850091</id><snippet># Color matrix for Lab
colorMatrix = (
    x1, y1, z1, 0,
    x2, y2, z2, 0,
    x3, y3, z3, 0
)
img1 = img1.convert("RGB", colorMatrix)
img2 = img2.convert("RGB", colorMatrix)
</snippet></ROW><ROW><id>850091</id><snippet>l1, a1, b1 = img1.split()
l2, a2, b2 = img2.split()
img1.putdata(zip(l1.getdata(), a2.getdata(), b2.getdata()))
</snippet></ROW><ROW><id>850091</id><snippet># Color matrix for RGB
RGBcolorMatrix = (
    x1, y1, z1, 0,
    x2, y2, z2, 0,
    x3, y3, z3, 0
)
img1 = img1.convert("RGB", RGBcolorMatrix)
</snippet></ROW><ROW><id>850091</id><snippet>img1.save('new_image.jpg')
</snippet></ROW><ROW><id>850129</id><snippet>data = '\n'.join(','.join('"%s"' % field for field in row) for row in data)
f= open('data.txt', 'w')
f.write(data)
f.close()
</snippet></ROW><ROW><id>850129</id><snippet>LOAD DATA INFILE 'data.txt' INTO TABLE db2.my_table;
</snippet></ROW><ROW><id>850440</id><snippet>python myfile.py
</snippet></ROW><ROW><id>850440</id><snippet>print 'Sleeping for ' + wait + ' seconds'
</snippet></ROW><ROW><id>850440</id><snippet>print 'Sleeping for %d seconds' % (wait,)
</snippet></ROW><ROW><id>850611</id><snippet>import sys
sys.modules

&gt;&gt;&gt; pprint.pprint(sys.modules)
{'UserDict': &lt;module 'UserDict' from 'C:\python26\lib\UserDict.pyc'&gt;,
 '__builtin__': &lt;module '__builtin__' (built-in)&gt;,
 '__main__': &lt;module '__main__' (built-in)&gt;,
 '_abcoll': &lt;module '_abcoll' from 'C:\python26\lib\_abcoll.pyc'&gt;,
# the rest omitted for brevity
</snippet></ROW><ROW><id>850611</id><snippet>&lt;importheaders.py&gt;
from django.utils import simplejson
from google.appengine.ext import webapp
from google.appengine.ext.webapp import template
from google.appengine.ext import db


&lt;mycontroller.py&gt;
from importheaders import *
</snippet></ROW><ROW><id>850733</id><snippet>&gt;&gt;&gt; g = testGen([1,2],4)
&gt;&gt;&gt; g.next()
('yield', [10, 2])   # note brackets in print statement because I'm on python 2.5
[10, 2]
&gt;&gt;&gt; g.next()
('yield', [10, 4])
[10, 4]
&gt;&gt;&gt; g.next()
('yield', [10, 7])
[10, 7]
&gt;&gt;&gt; g.next()
('yield', [12, 11])
[12, 11]
&gt;&gt;&gt; g.next()
('yield', [12, 13])
[12, 13]
</snippet></ROW><ROW><id>850829</id><snippet>import re

infile  = open('C:/infile.txt')
outfile = open('C:/outfile.txt', 'w')

pattern = re.compile('^(cow\w*)')

for line in infile:
    found = pattern.match(line)
    if found:
        text = "%s\n" % (found.group(0))
        outfile.write(text)

outfile.close()
infile.close()
</snippet></ROW><ROW><id>850831</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a = []
&gt;&gt;&gt; print a
[]
&gt;&gt;&gt; print b
[1, 2, 3]
</snippet></ROW><ROW><id>850831</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; del a[0:len(a)]
&gt;&gt;&gt; print a
[]
&gt;&gt;&gt; print b
[]
&gt;&gt;&gt; a is b
True
</snippet></ROW><ROW><id>850831</id><snippet>&gt;&gt;&gt; a[:] = []
</snippet></ROW><ROW><id>850882</id><snippet>a = [1,9,12]
print sum(a)
</snippet></ROW><ROW><id>850929</id><snippet>@classmethod</snippet></ROW><ROW><id>850929</id><snippet>@staticmethod</snippet></ROW><ROW><id>851037</id><snippet># Assume both Bob and Fred are derived from Exception
&gt;&gt;&gt; class Bob(Bob, Fred):
...     pass
... 
&gt;&gt;&gt; try:
...     raise Bob()
... except Fred:
...     print 'blah'
blah
</snippet></ROW><ROW><id>851037</id><snippet>... except (Bob, Fred):
</snippet></ROW><ROW><id>851513</id><snippet>inkscape --export-png=...</snippet></ROW><ROW><id>851799</id><snippet>\n</snippet></ROW><ROW><id>851799</id><snippet>copy(i.strip(), r"C:\opencascade")
</snippet></ROW><ROW><id>851888</id><snippet>__metaclass__</snippet></ROW><ROW><id>852022</id><snippet>name</snippet></ROW><ROW><id>852022</id><snippet>photo</snippet></ROW><ROW><id>852022</id><snippet>Student.objects.exclude(photo__isnull=True)
</snippet></ROW><ROW><id>852022</id><snippet>isnull</snippet></ROW><ROW><id>852022</id><snippet>None</snippet></ROW><ROW><id>852022</id><snippet>Student.objects.exclude(photo='')
</snippet></ROW><ROW><id>852455</id><snippet>&gt;&gt;&gt; def g(x):
...   g.r = 4
...
&gt;&gt;&gt; g
&lt;function g at 0x0100AD68&gt;
&gt;&gt;&gt; g(3)
&gt;&gt;&gt; g.r
4
</snippet></ROW><ROW><id>852481</id><snippet>values = [1,2,3]

# Turn list of values into list of Q objects
queries = [Q(pk=value) for value in values]

# Take one Q object from the list
query = queries.pop()

# Or the Q object with the ones remaining in the list
for item in queries:
    query |= item

# Query the model
Article.objects.filter(query)
</snippet></ROW><ROW><id>852581</id><snippet>*</snippet></ROW><ROW><id>854077</id><snippet>Poll.objects.filter(category='foo').fetch_reverse_relations('choices_set')
</snippet></ROW><ROW><id>854162</id><snippet>def newFunct(key,testDict['key']):
</snippet></ROW><ROW><id>854162</id><snippet>def newFunct(key, val):
</snippet></ROW><ROW><id>854162</id><snippet>newvalue=key+str(testDict[key])
</snippet></ROW><ROW><id>854162</id><snippet>newvalue=key+str(val)
</snippet></ROW><ROW><id>854162</id><snippet>newValue=newFunct(key,testDict[key])
</snippet></ROW><ROW><id>854162</id><snippet>def newFunct(key, testDict):
</snippet></ROW><ROW><id>854162</id><snippet>newvalue=key+str(testDict[key])
</snippet></ROW><ROW><id>854162</id><snippet>newValue=newFunct(key,testDict)
</snippet></ROW><ROW><id>854346</id><snippet>conn</snippet></ROW><ROW><id>854346</id><snippet>conn.adoConn</snippet></ROW><ROW><id>854346</id><snippet>conn.adoConn.CommitTrans()
cursor.execute('CREATE DATABASE ...')
conn.adoConn.BeginTrans()
</snippet></ROW><ROW><id>854442</id><snippet>import SendKeys

SendKeys.SendKeys("""
{CAPSLOCK}
{SCROLLOCK}
{NUMLOCK}
""")
</snippet></ROW><ROW><id>854910</id><snippet>db.GqlQuery("SELECT * FROM Schedule WHERE station = $1", foo.key())
</snippet></ROW><ROW><id>854910</id><snippet>Schedule.all().filter("station =", foo.key())
</snippet></ROW><ROW><id>855159</id><snippet>wx.GCDC</snippet></ROW><ROW><id>855159</id><snippet>wx.DC</snippet></ROW><ROW><id>855172</id><snippet>--cover-package=foo --cover-package=bar
</snippet></ROW><ROW><id>855172</id><snippet>    if options.cover_packages:
        for pkgs in [tolist(x) for x in options.cover_packages]:
</snippet></ROW><ROW><id>855284</id><snippet>def my_view(request):
    context = {}
    context['items'] = Item.objects.all()
    context['anothervalue'] = context['items'][2].name
    return render_to_response('template.html', context)
</snippet></ROW><ROW><id>855455</id><snippet>PY_SSIZE_T_MAX/sizeof(PyObject*)</snippet></ROW><ROW><id>855455</id><snippet>PY_SSIZE_T_MAX</snippet></ROW><ROW><id>855455</id><snippet>((size_t) -1)&gt;&gt;1</snippet></ROW><ROW><id>855474</id><snippet>from BeautifulSoup import BeautifulSoup

string = \
"""&lt;h1&gt;foo&lt;/h1&gt;
&lt;h2&gt;&lt;hr/&gt;bar&lt;/h2&gt;"""

soup = BeautifulSoup(string)

bad_tags = soup.findAll('hr');
[tag.extract() for tag in bad_tags] 

for i in soup.findAll(['h1', 'h2']):
    print i, i.next

# &lt;h1&gt;foo&lt;/h1&gt; foo
# &lt;h2&gt;bar&lt;/h2&gt; bar
</snippet></ROW><ROW><id>855511</id><snippet>#!/usr/bin/python

total

def checkTotal():
    global total
    total = 0
</snippet></ROW><ROW><id>855511</id><snippet>#!/usr/bin/env python

total = 0

def doA():
    # not accessing global total
    total = 10

def doB():
    global total
    total = total + 1

def checkTotal():
    # global total - not required as global is required
    # only for assignment - thanks for comment Greg
    print total

def main():
    doA()
    doB()
    checkTotal()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>855521</id><snippet>newDict['bubba']</snippet></ROW><ROW><id>855521</id><snippet>funcdef ::= 
             [decorators] "def" funcname "(" [parameter_list] ")"
              ":" suite

parameter_list ::= 
                 (defparameter ",")*
                (~~"*" identifier [, "**" identifier]
                 | "**" identifier
                 | defparameter [","] )

defparameter ::= 
             parameter ["=" expression]

identifier ::= 
             (letter|"_") (letter | digit | "_")*
</snippet></ROW><ROW><id>855521</id><snippet>subscription ::= 
             primary "[" expression_list "]"
</snippet></ROW><ROW><id>855573</id><snippet>.htaccess</snippet></ROW><ROW><id>855573</id><snippet>httpd.conf</snippet></ROW><ROW><id>855573</id><snippet>mod_wsgi</snippet></ROW><ROW><id>855573</id><snippet>mod_python</snippet></ROW><ROW><id>855573</id><snippet>fastcgi</snippet></ROW><ROW><id>855573</id><snippet>/etc/apache2/httpd.conf</snippet></ROW><ROW><id>855573</id><snippet>/usr/local/apache2/conf/httpd.conf</snippet></ROW><ROW><id>855764</id><snippet>else</snippet></ROW><ROW><id>855764</id><snippet>try</snippet></ROW><ROW><id>855764</id><snippet>IOError</snippet></ROW><ROW><id>855764</id><snippet>    try:
        operation_that_can_throw_ioerror()
    except IOError:
        handle_the_exception_somehow()
    else:
         # we don't want to catch the IOError if it's raised
        another_operation_that_can_throw_ioerror()
    finally:
        something_we_always_need_to_do()
</snippet></ROW><ROW><id>855764</id><snippet>another_operation_that_can_throw_ioerror()</snippet></ROW><ROW><id>855764</id><snippet>operation_that_can_throw_ioerror</snippet></ROW><ROW><id>855764</id><snippet>except</snippet></ROW><ROW><id>855764</id><snippet>try</snippet></ROW><ROW><id>855764</id><snippet>finally</snippet></ROW><ROW><id>855764</id><snippet>else</snippet></ROW><ROW><id>855764</id><snippet>finally</snippet></ROW><ROW><id>855764</id><snippet>IOError</snippet></ROW><ROW><id>855961</id><snippet> _members_ = {'T_UNDEF':0, 'T_NAME':1, 'T_NUMBER':2, 'T_STRING':3, 'T_OPERATOR':4, 'T_VARIABLE':5, 'T_FUNCTION':6}

globals()[key] = value
</snippet></ROW><ROW><id>855961</id><snippet>def __init__(self, value):
    for k,v in self._members_.items():
        if v == value:
            self.name = k
            break
</snippet></ROW><ROW><id>855961</id><snippet>c_uint.__init__(self, value)
</snippet></ROW><ROW><id>856035</id><snippet>#!/usr/bin/perl

use strict;
use warnings;

use Parallel::ForkManager;

my @data = (0 .. 19);

my $pm = Parallel::ForkManager-&gt;new(4);

for my $n ( @data ) {
    my $pid = $pm-&gt;start and next;
    warn sprintf "%d^3 = %d\n", $n, slow_cube($n);
    $pm-&gt;finish;
}

sub slow_cube {
    my ($n) = @_;

    sleep 1;
    return $n * $n * $n;
}

__END__
</snippet></ROW><ROW><id>856035</id><snippet>#!/usr/bin/perl

use strict;
use warnings;

use threads;

my @data = (0 .. 19);
my @threads = map { 
    threads-&gt;new( {context =&gt; 'list' }, \&amp;slow_cube, $_ )
} @data;

for my $thr ( @threads ) {
    my ( $n, $ncubed ) = $thr-&gt;join;
    print "$n^3 = $ncubed\n";
}

sub slow_cube {
    my ($n) = @_;

    sleep 1;
    return $n, $n * $n * $n;
}

__END__
</snippet></ROW><ROW><id>856035</id><snippet>TimeThis :  Command Line :  t.pl
TimeThis :  Elapsed Time :  00:00:01.281
</snippet></ROW><ROW><id>856287</id><snippet>dlopen()</snippet></ROW><ROW><id>857139</id><snippet>class A(object):
    def __init__( self, arg1, arg2 ):
         etc.

class B(object):
    def __init__( self, arg1, arg2 ):
         etc.

thing_to_make = A
argList= ( some, pair )
thing_to_make( *argList )

thing_to_make = B
argList- ( another, pair )
thing_to_make( *argList )

def doSomething( class_, arg1, arg2 ):
    thing= class_( arg1, arg2 )
    thing.method()
    print thing
</snippet></ROW><ROW><id>857654</id><snippet>def test(filename):
    parser = xml.sax.make_parser()
    parser.parse(open(filename))
</snippet></ROW><ROW><id>858554</id><snippet>$ python manage.py sql appname
</snippet></ROW><ROW><id>858576</id><snippet>__init__</snippet></ROW><ROW><id>858628</id><snippet>import os, sys
os.isatty(sys.stdout.fileno())
</snippet></ROW><ROW><id>858628</id><snippet>sys.stdout.isatty()
</snippet></ROW><ROW><id>858928</id><snippet>#!/sw/bin/python2.5

import warnings, sys

def customwarn(message, category, filename, lineno, file=None, line=None):
    sys.stdout.write(warnings.formatwarning(message, category, filename, lineno))

warnings.showwarning = customwarn
warnings.warn("test warning")
</snippet></ROW><ROW><id>858949</id><snippet>from string import Template
import optparse

def main():
    usage = "usage: %prog options outputname"
    p = optparse.OptionParser(usage)
    p.add_option('--optiona', '-a', default="")
    p.add_option('--optionb', '-b', default="")
    options, arguments = p.parse_args()
    t = Template('Option a is ${optiona} option b is ${optionb}')
    print t.substitute(vars(options)) #I'm assuming the uppercase S was a typo.
</snippet></ROW><ROW><id>859611</id><snippet>sys.path</snippet></ROW><ROW><id>859611</id><snippet>My Computer ‣ Properties ‣ Advanced ‣ Environment Variables
</snippet></ROW><ROW><id>860174</id><snippet>SELECT org, ROUND(time/604800) - week_offset, COUNT(*)
FROM table
GROUP BY org, ROUND(time/604800) - week_offset
</snippet></ROW><ROW><id>860174</id><snippet>SELECT org, TO_CHAR(time, 'YYYY-IW'), COUNT(*)
FROM table
GROUP BY org, TO_CHAR(time, 'YYYY-IW')
</snippet></ROW><ROW><id>860260</id><snippet>Template.render</snippet></ROW><ROW><id>860260</id><snippet>django.test.utils.instrumented_test_render</snippet></ROW><ROW><id>860260</id><snippet>django.test.signals.template_rendered</snippet></ROW><ROW><id>860260</id><snippet>TEMPLATE_DEBUG</snippet></ROW><ROW><id>860260</id><snippet>if settings.DEBUG and settings.TEMPLATE_DEBUG

    from django.test.utils import instrumented_test_render
    from django.test.signals import template_rendered


    def add_template_name_to_context(self, sender, **kwargs)
        template = kwargs['template']
        if template.origin and template.origin.name
            kwargs['context']['template_name'] = template.origin.name

    Template.render = instrumented_test_render

    template_rendered.connect(add_template_name_to_context)
</snippet></ROW><ROW><id>860389</id><snippet>gtk.gdk.Screen</snippet></ROW><ROW><id>860569</id><snippet>__all__</snippet></ROW><ROW><id>860569</id><snippet>(defun python-add-to-all ()
  "take the symbol under the point and add to the __all__ routine"
  (interactive)
  (save-excursion
    (let ((thing (thing-at-point 'word))
          p)
      (if (progn (goto-char (point-min))
                 (re-search-forward "^__all__ = \\[" nil t))
          (insert (format "\"%s\", " thing))
        (goto-char (point-min))
        (insert (format "__all__ = [\"%s\"]\n" thing))))))
</snippet></ROW><ROW><id>860614</id><snippet>from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, scoped_session

engine = create_engine('sqlite:///:memory:', echo=True)
Base = declarative_base(bind=engine)
Session = scoped_session(sessionmaker(engine))

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True)
    name = Column(String)
    fullname = Column(String)
    password = Column(String)

Base.metadata.create_all()
</snippet></ROW><ROW><id>860614</id><snippet>users_table</snippet></ROW><ROW><id>860614</id><snippet>User(name="foo")</snippet></ROW><ROW><id>860614</id><snippet>Session</snippet></ROW><ROW><id>860721</id><snippet>MyCompany/MyProject/ -&gt; import MyCompany.MyProject
</snippet></ROW><ROW><id>860852</id><snippet>__init__</snippet></ROW><ROW><id>860852</id><snippet>__setattr__</snippet></ROW><ROW><id>860852</id><snippet>__dict__</snippet></ROW><ROW><id>860852</id><snippet>from ConfigParser import  SafeConfigParser

class Section:
    def __init__(self, name, parser):
        self.__dict__['name'] = name
        self.__dict__['parser'] = parser

    def __setattr__(self, attr, value):
        self.__dict__[attr] = str(value)
        self.parser.set(self.name, attr, str(value))

class Configuration(object):
    def __init__(self, fileName):
        self.__parser = SafeConfigParser()
        self.__parser.read(fileName)
        self.fileName = fileName
        for section in self.__parser.sections():
            setattr(self, section, Section(section, self.__parser))
            for option in self.__parser.options(section):
                setattr(getattr(self, section), option,
                        self.__parser.get(section, option))

    def __getattr__(self, attr):
        self.__parser.add_section(attr)
        setattr(self, attr, Section(attr, self.__parser))
        return getattr(self, attr)

    def save(self):
        f = open(self.fileName, 'w')
        self.__parser.write(f)
        f.close()

c = Configuration('config.ini')

print dir(c) -&gt; will print all sections
print dir(c.UserOptions) -&gt; will print all user options
print c.UserOptions.sampledate

c.new.value = 10
c.save()
</snippet></ROW><ROW><id>860997</id><snippet>class Product(models.Model):
    name = models.CharField(max_length=50)
    product_rank = models.OneToOneField('ProductRank')

class ProductRank(models.Model):
    rank = models.IntegerField(default=0)
</snippet></ROW><ROW><id>860997</id><snippet>Product.objects.filter([...]).select_related()
</snippet></ROW><ROW><id>860997</id><snippet>SELECT "example_product"."id", "example_product"."name", "example_product"."product_rank_id", "example_productrank"."id", "example_productrank"."rank" FROM "example_product" INNER JOIN "example_productrank" ON ("example_product"."product_rank_id" = "example_productrank"."id")
</snippet></ROW><ROW><id>861004</id><snippet>posix_fadvise(2)</snippet></ROW><ROW><id>861004</id><snippet>POSIX_FADV_SEQUENTIAL</snippet></ROW><ROW><id>861070</id><snippet>1</snippet></ROW><ROW><id>861070</id><snippet>1</snippet></ROW><ROW><id>861070</id><snippet>2</snippet></ROW><ROW><id>861109</id><snippet>from types import *

class Foo(object):
    def __init__(self):
        self.bar = methodize(bar, self)
        self.baz = 999

    @classmethod
    def bar(cls, baz):
        return 2 * baz


def methodize(func, instance):
    return MethodType(func, instance, instance.__class__)

def bar(self):
    return 4*self.baz


&gt;&gt;&gt; Foo.bar(5)
10
&gt;&gt;&gt; a=Foo()
&gt;&gt;&gt; a.bar()
3996
</snippet></ROW><ROW><id>861238</id><snippet>mylist.sort(key=lambda d: (d['weight'], d['factor']))
</snippet></ROW><ROW><id>861238</id><snippet>import operator
mylist.sort(key=operator.itemgetter('weight', 'factor'))
</snippet></ROW><ROW><id>862191</id><snippet>min(points, key=lambda x: dist(pointToCompare2, x))
</snippet></ROW><ROW><id>862198</id><snippet>Content-Disposition: attachment; filename="the filename.ext"
</snippet></ROW><ROW><id>862198</id><snippet>Content-Disposition</snippet></ROW><ROW><id>862198</id><snippet>remotefile = urllib2.urlopen('http://example.com/somefile.zip')
remotefile.info()['Content-Disposition']
</snippet></ROW><ROW><id>862498</id><snippet>def</snippet></ROW><ROW><id>862498</id><snippet>def second_lowest(l):
    l.sort()
    return l[1]

map(second_lowest, lst)
</snippet></ROW><ROW><id>862498</id><snippet>sorted()</snippet></ROW><ROW><id>862498</id><snippet>sorted(l)[1]</snippet></ROW><ROW><id>862498</id><snippet>&gt;&gt;&gt; import  heapq
&gt;&gt;&gt; l = [5,2,6,8,3,5]
&gt;&gt;&gt; heapq.nsmallest(l, 2)
[2, 3]
</snippet></ROW><ROW><id>862498</id><snippet>map(lambda x: heapq.nsmallest(x,2)[1],  list_of_lists)
</snippet></ROW><ROW><id>862498</id><snippet>[heapq.nsmallest(x,2)[1] for x in list_of_lists]
</snippet></ROW><ROW><id>862622</id><snippet>find</snippet></ROW><ROW><id>862622</id><snippet>-prune</snippet></ROW><ROW><id>862622</id><snippet>icecream/cupcake/</snippet></ROW><ROW><id>862622</id><snippet>cupcake/</snippet></ROW><ROW><id>862622</id><snippet>cpio</snippet></ROW><ROW><id>862622</id><snippet>find test -path 'test/icecream/cupcake/*' -o -path 'test/mtndew/livewire/*' | cpio -padluv test-keep
rm -rf test
</snippet></ROW><ROW><id>862714</id><snippet>&gt;&gt;&gt; a = 1
&gt;&gt;&gt; b = a
&gt;&gt;&gt; a = 2
&gt;&gt;&gt; print b
1
</snippet></ROW><ROW><id>862714</id><snippet>child</snippet></ROW><ROW><id>862714</id><snippet>def neu(self, sortByValue, secondValue):
    def child(node):
        if(node is None):
            return MyTree(sortByValue, secondValue)
        else:
            child.neu(sortByValue, secondValue)
            return node

    if(sortByValue.lower() &lt; self.value[0].lower()):
        self.left = child(self.left)
    else:
        self.right = child(self.right)
</snippet></ROW><ROW><id>862899</id><snippet>import sys

@sys.settrace
def trace_debug(frame, event, arg):
    if event == 'call':
        print ("calling %r on line %d, vars: %r" % 
                (frame.f_code.co_name, 
                 frame.f_lineno,
                 frame.f_locals))
        return trace_debug
    elif event == "return":
        print "returning", arg

def fun1(a, b):
    return a + b

print fun1(1, 2)
</snippet></ROW><ROW><id>862899</id><snippet>calling 'fun1' on line 14, vars: {'a': 1, 'b': 2}
returning 3
3
</snippet></ROW><ROW><id>863324</id><snippet>__import__</snippet></ROW><ROW><id>863324</id><snippet>import imp
import os

def module_from_path(path):
    filename = os.path.basename(path)
    modulename = os.path.splitext(filename)[0]

    with open(path) as f:
        return imp.load_module(modulename, f, path, ('py', 'U', imp.PY_SOURCE))
</snippet></ROW><ROW><id>863494</id><snippet>list(d.items()) == list(zip(d.keys(),
  d.values()))</snippet></ROW><ROW><id>863834</id><snippet>&gt;&gt;&gt; NS = 'http://www.w3.org/2001/XMLSchema-instance'
</snippet></ROW><ROW><id>863834</id><snippet>noNameSpaceSchemaLocation</snippet></ROW><ROW><id>863834</id><snippet>TreeInventory</snippet></ROW><ROW><id>863834</id><snippet>&gt;&gt;&gt; location_attribute = '{%s}noNameSpaceSchemaLocation' % NS
&gt;&gt;&gt; elem = etree.Element('TreeInventory', attrib={location_attribute: 'Trees.xsd'})
&gt;&gt;&gt; etree.tostring(elem, pretty_print=True)
'&lt;TreeInventory xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Trees.xsd"/&gt;\n'
</snippet></ROW><ROW><id>863834</id><snippet>&gt;&gt;&gt; elem = etree.Element('TreeInventory')
&gt;&gt;&gt; elem.set(location_attribute, 'Trees.xsd')
</snippet></ROW><ROW><id>863834</id><snippet>nsmap</snippet></ROW><ROW><id>864911</id><snippet>derived_type</snippet></ROW><ROW><id>864911</id><snippet>get_derived</snippet></ROW><ROW><id>864911</id><snippet>derived_type</snippet></ROW><ROW><id>864916</id><snippet>m = [[1.1, 2.1, 3.1], [4.1, 5.1, 6.1], [7.1, 8.1, 9.1]]
file.write(str(m))
</snippet></ROW><ROW><id>864916</id><snippet>def format(value):
    return "%.3f" % value

formatted = [[format(v) for v in r] for r in m]
file.write(str(formatted))
</snippet></ROW><ROW><id>864967</id><snippet>myenv/bin/python /usr/bin/nosetests</snippet></ROW><ROW><id>865272</id><snippet>  def __enter__(self)
  def __exit__(self, type, value, traceback)
</snippet></ROW><ROW><id>865272</id><snippet>class Package:
    def __init__(self):
        self.files = []

    def __enter__(self):
        return self

    # ...

    def __exit__(self, type, value, traceback):
        for file in self.files:
            os.unlink(file)
</snippet></ROW><ROW><id>865272</id><snippet>with Package() as package_obj:
    # use package_obj
</snippet></ROW><ROW><id>865272</id><snippet>class PackageResource:
    def __enter__(self):
        class Package:
            ...
        self.package_obj = Package()
        return self.package_obj

    def __exit__(self, type, value, traceback):
        self.package_obj.cleanup()
</snippet></ROW><ROW><id>865272</id><snippet>with PackageResource() as package_obj:
    # use package_obj
</snippet></ROW><ROW><id>865414</id><snippet>__class__.__name__
</snippet></ROW><ROW><id>865523</id><snippet>&gt;&gt;&gt; import os, types
&gt;&gt;&gt; isinstance(os, types.ModuleType)
True
</snippet></ROW><ROW><id>865523</id><snippet>os</snippet></ROW><ROW><id>865639</id><snippet>timedelta.__div__</snippet></ROW><ROW><id>865639</id><snippet>divtdi = datetime.timedelta.__div__
def divtd(td1, td2):
    if isinstance(td2, (int, long)):
        return divtdi(td1, td2)
    us1 = td1.microseconds + 1000000 * (td1.seconds + 86400 * td1.days)
    us2 = td2.microseconds + 1000000 * (td2.seconds + 86400 * td2.days)
    return us1 / us2 # this does integer division, use float(us1) / us2 for fp division
</snippet></ROW><ROW><id>865639</id><snippet>class MyTimeDelta:
    __div__ = divtd
</snippet></ROW><ROW><id>865639</id><snippet>&gt;&gt;&gt; divtd(datetime.timedelta(hours = 12), datetime.timedelta(hours = 2))
6
&gt;&gt;&gt; divtd(datetime.timedelta(hours = 12), 2)
datetime.timedelta(0, 21600)
&gt;&gt;&gt; MyTimeDelta(hours = 12) / MyTimeDelta(hours = 2)
6
</snippet></ROW><ROW><id>865639</id><snippet>timedelta</snippet></ROW><ROW><id>865639</id><snippet>timedelta</snippet></ROW><ROW><id>865932</id><snippet>class FooForm(forms.ModelForm):
    class Meta:
        model = Foo

    def __init__(self, *args, **kwargs):
        super(FooForm, self).__init__(*args, **kwargs)
        current_state = self.instance.state
        ...construct available_choices based on current state...
        self.fields['state'].choices = available_choices
</snippet></ROW><ROW><id>865932</id><snippet>class FooAdmin(admin.ModelAdmin):
    form = FooForm
</snippet></ROW><ROW><id>865963</id><snippet>__doc__</snippet></ROW><ROW><id>866007</id><snippet>a = open("blah.txt", "w", 2 ** 31 - 1)
for i in xrange(10000): 
    a.write("a")
</snippet></ROW><ROW><id>866050</id><snippet>from BeautifulSoup import BeautifulSoup
import re

html_text = """
&lt;h2&gt;this is cool #12345678901&lt;/h2&gt;
&lt;h2&gt;this is nothing&lt;/h2&gt;
&lt;h1&gt;foo #126666678901&lt;/h1&gt;
&lt;h2&gt;this is interesting #126666678901&lt;/h2&gt;
&lt;h2&gt;this is blah #124445678901&lt;/h2&gt;
"""

soup = BeautifulSoup(html_text)


for elem in soup(text=re.compile(r' #\S{11}')):
    print elem.parent
</snippet></ROW><ROW><id>866050</id><snippet>&lt;h2&gt;this is cool #12345678901&lt;/h2&gt;
&lt;h2&gt;this is interesting #126666678901&lt;/h2&gt;
&lt;h2&gt;this is blah #124445678901&lt;/h2&gt;
</snippet></ROW><ROW><id>866369</id><snippet>convert input.png gradient.png -fx "v.p{0,u*v.h}" output.png

v is the second image (gradient.png)
u is the first image (input.png)
v.p will get a pixel value
v.p{0, 0} -&gt; first pixel in the image
v.h -&gt; the hight of the second image
v.p{0, u * v.h} -&gt; will read the Nth pixel where N = u * v.h
</snippet></ROW><ROW><id>866369</id><snippet>import Image

# open the input image
input_img = Image.open('input.png')

# open gradient image and resize to 256px height
gradient_img = Image.open('gradient.png')
gradient_img = gradient_img.resize( (gradient_img.size[0], 256,) )

# get pixel access object (significantly quicker than getpixel method)
gradient_pix = gradient_img.load()

data = input_img.getdata()
input_img.putdata([gradient_pix[0, r] for (r, g, b, a) in data])
input_img.save('output.png')
</snippet></ROW><ROW><id>866393</id><snippet>from elixir import Entity, has_field, setup_all, ManyToOne, OneToMany, Field, Unicode, using_options, using_table_options, GenericProperty
from sqlalchemy.orm import relation
from sqlalchemy import ForeignKeyConstraint

class Company(Entity):
    using_options(tablename='company')

    company_id = Field(Unicode(32), primary_key=True)
    display_name = Field(Unicode(255))
    pages = OneToMany('Page')

class Page(Entity):
    using_options(tablename='page')

    company = ManyToOne('Company', colname='company_id', primary_key=True)
    url = Field(Unicode(255), primary_key=True)
    attrs = OneToMany('Attr')

class Attr(Entity):
    using_options(tablename='attr')

    page = ManyToOne('Page', colname=['company_id', 'url'], primary_key=True)
    attr_key = Field(Unicode(255), primary_key=True)

    using_table_options(ForeignKeyConstraint(['company_id'], ['company.company_id']))
    company = GenericProperty(relation(Company))
</snippet></ROW><ROW><id>866412</id><snippet>xmlns</snippet></ROW><ROW><id>866566</id><snippet>impl</snippet></ROW><ROW><id>866566</id><snippet>sqlalchemy.types.Integer</snippet></ROW><ROW><id>866566</id><snippet>DateTime</snippet></ROW><ROW><id>866566</id><snippet>
import datetime, time
from sqlalchemy.types import TypeDecorator, DateTime, Integer

class IntegerDateTime(TypeDecorator):
    """a type that decorates DateTime, converts to unix time on
    the way in and to datetime.datetime objects on the way out."""
    impl = Integer # In schema, you want these datetimes to
                   # be stored as integers.
    def process_bind_param(self, value, _):
        """Assumes a datetime.datetime"""
        if value is None:
            return None # support nullability
        elif isinstance(value, datetime.datetime):
            return int(time.mktime(value.timetuple()))
        raise ValueError("Can operate only on datetime values. "
                         "Offending value type: {0}".format(type(value).__name__))
    def process_result_value(self, value, _):
        if value is not None: # support nullability
            return datetime.datetime.fromtimestamp(float(value))
</snippet></ROW><ROW><id>866662</id><snippet>__init__</snippet></ROW><ROW><id>866662</id><snippet>__init__</snippet></ROW><ROW><id>866662</id><snippet>save</snippet></ROW><ROW><id>866805</id><snippet>mkfifo /tmp/display_data
myapp &gt;&gt; /tmp/display_data
</snippet></ROW><ROW><id>866805</id><snippet>tail -f /tmp/display_data
</snippet></ROW><ROW><id>867124</id><snippet>def foo(self, blah=None):
    if blah is None: # faster than blah == None - thanks to kcwu
        blah = self.instance_var
</snippet></ROW><ROW><id>867226</id><snippet>__init__</snippet></ROW><ROW><id>867226</id><snippet>self</snippet></ROW><ROW><id>867226</id><snippet>__init__</snippet></ROW><ROW><id>867457</id><snippet>&gt;&gt;&gt; print '3' &lt; 4
False
</snippet></ROW><ROW><id>867880</id><snippet>&lt;a href="http://docs.python.org/library/functions.html#unichr"&gt;unichr()&lt;/a&gt;</snippet></ROW><ROW><id>867880</id><snippet>&gt;&gt;&gt; unichr(int('fd9b', 16)).encode('utf-8')
'\xef\xb6\x9b'
</snippet></ROW><ROW><id>867880</id><snippet>c</snippet></ROW><ROW><id>867880</id><snippet>hex(ord(c))</snippet></ROW><ROW><id>868244</id><snippet>import sys
try:
     raise "a string exception"
except:
     e, t, tb = sys.exc_info()
     if not isinstance(e, str):
          raise    
     print "caught", e
</snippet></ROW><ROW><id>868356</id><snippet>return</snippet></ROW><ROW><id>868356</id><snippet>def func(input):
    # do calculation on input
    return result

s = "hello goodbye"
res = func(s)       # res now a result dictionary
</snippet></ROW><ROW><id>868356</id><snippet>result</snippet></ROW><ROW><id>868356</id><snippet>def func(input):
    # do work
    return length, something_else         # one might be an integer another string, etc.

s = "hello goodbye"
length, something = func(s)
</snippet></ROW><ROW><id>868443</id><snippet>import cPickle

#
# Load if neccesary
#
def loadfile(variable, filename, namespace=None):
    if module is None:
        import __main__ as namespace
    setattr(namespace, variable, cPickle.load(file(filename,'r')))

# From the main script just do:
loadfile('myvar','myfilename')

# To set the variable in module 'mymodule':
import mymodule
...
loadfile('myvar', 'myfilename', mymodule)
</snippet></ROW><ROW><id>868731</id><snippet>"""
client module for memcached (memory cache daemon)

Overview
========

See U{the MemCached homepage&lt;http://www.danga.com/memcached&gt;} for more about memcached.

Usage summary
=============

This should give you a feel for how this module operates::

    import memcache
    mc = memcache.Client(['127.0.0.1:11211'], debug=0)

    mc.set("some_key", "Some value")
    value = mc.get("some_key")

    mc.set("another_key", 3)
    mc.delete("another_key")

    mc.set("key", "1")   # note that the key used for incr/decr must be a string.
    mc.incr("key")
    mc.decr("key")

The standard way to use memcache with a database is like this::

    key = derive_key(obj)
    obj = mc.get(key)
    if not obj:
        obj = backend_api.get(...)
        mc.set(key, obj)

    # we now have obj, and future passes through this code
    # will use the object from the cache.

Detailed Documentation
======================

More detailed documentation is available in the L{Client} class.
"""
</snippet></ROW><ROW><id>869024</id><snippet>aString = 'abcd'
newString =''
colors= [0.0, 1.0, 0.5, 1.0]
for i in aString:
    newString = newString + '&lt;span style="background-color: rgb(0,%s,0)"&gt;%s&lt;/span&gt;'%(colors.pop(0)*255,i)



response = HttpResponse(newString)
</snippet></ROW><ROW><id>869347</id><snippet>1           0 LOAD_CONST               0 (0)
            3 STORE_NAME               0 (i)

2           6 SETUP_LOOP              28 (to 37)
      &gt;&gt;    9 LOAD_NAME                0 (i)              # &lt;-
           12 LOAD_CONST               1 (100000000)      # &lt;-
           15 COMPARE_OP               0 (&lt;)              # &lt;-
           18 JUMP_IF_FALSE           14 (to 35)          # &lt;-
           21 POP_TOP                                     # &lt;-

3          22 LOAD_NAME                0 (i)              # &lt;-
           25 LOAD_CONST               2 (1)              # &lt;-
           28 INPLACE_ADD                                 # &lt;-
           29 STORE_NAME               0 (i)              # &lt;-
           32 JUMP_ABSOLUTE            9                  # &lt;-
      &gt;&gt;   35 POP_TOP
           36 POP_BLOCK
</snippet></ROW><ROW><id>869347</id><snippet>1           0 SETUP_LOOP              23 (to 26)
            3 LOAD_NAME                0 (range)
            6 LOAD_CONST               0 (0)
            9 LOAD_CONST               1 (100000000)
           12 CALL_FUNCTION            2
           15 GET_ITER
      &gt;&gt;   16 FOR_ITER                 6 (to 25)        # &lt;-
           19 STORE_NAME               1 (n)            # &lt;-

2          22 JUMP_ABSOLUTE           16                # &lt;-
      &gt;&gt;   25 POP_BLOCK
      &gt;&gt;   26 LOAD_CONST               2 (None)
           29 RETURN_VALUE
</snippet></ROW><ROW><id>869600</id><snippet>def myfunc(alist):
    return len(alist)

&gt;&gt;&gt; dis.dis(myfunc)
  2           0 LOAD_GLOBAL              0 (len)
              3 LOAD_FAST                0 (alist)
              6 CALL_FUNCTION            1
              9 RETURN_VALUE
</snippet></ROW><ROW><id>869703</id><snippet>myfile = open('myfile.tar', 'wb')
shutil.copyfileobj(response.fp, myfile)
myfile.close()
</snippet></ROW><ROW><id>869703</id><snippet>response.fp</snippet></ROW><ROW><id>869703</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>869770</id><snippet>def finish():
    unittest.main(module=__name__)
</snippet></ROW><ROW><id>869818</id><snippet>0</snippet></ROW><ROW><id>869818</id><snippet>None</snippet></ROW><ROW><id>869818</id><snippet>myList = [None] * 100  # Create list of 100 'None's
myList[12] = 'a'  # etc.
</snippet></ROW><ROW><id>869902</id><snippet>range(100,-1,-1)</snippet></ROW><ROW><id>870039</id><snippet>objc.loadBundle</snippet></ROW><ROW><id>870039</id><snippet>NSClassFromString</snippet></ROW><ROW><id>870343</id><snippet>gdata.alt.appengine.run_on_appengine(client)
gdata.alt.appengine.run_on_appengine(client._GetDocsClient())
gdata.alt.appengine.run_on_appengine(client._GetSpreadsheetsClient()) here
</snippet></ROW><ROW><id>870343</id><snippet>auth_url = client._GetDocsClient().GenerateAuthSubURL(
      next_url,scope='http://spreadsheets.google.com/feeds/ http://docs.google.com/feeds/documents/', secure=False, session=True)
</snippet></ROW><ROW><id>870482</id><snippet>d = {'user':'amarillion', 'pass':'*****' }
server.login(**d)
</snippet></ROW><ROW><id>870677</id><snippet>zip(t[::2], t[1::2])
</snippet></ROW><ROW><id>870677</id><snippet>&gt;&gt;&gt; s = ','.join(str(i) for i in range(10))
&gt;&gt;&gt; s
'0,1,2,3,4,5,6,7,8,9'
&gt;&gt;&gt; t = [int(i) for i in s.split(',')]
&gt;&gt;&gt; t
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; p = zip(t[::2], t[1::2])
&gt;&gt;&gt; p
[(0, 1), (2, 3), (4, 5), (6, 7), (8, 9)]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>871082</id><snippet>self.fields</snippet></ROW><ROW><id>871082</id><snippet>class TicketForm(forms.Form):

  Type = Type.GetTicketTypeField()

  def __init__(self, ticket, *args, **kwargs):
    super(TicketForm, self).__init__(*args, **kwargs)
    self.fields['state'] = State.GetTicketStateField(ticket.Type)
</snippet></ROW><ROW><id>871197</id><snippet>s = '&lt;p&gt;Hello!&lt;/p&gt;'</snippet></ROW><ROW><id>871222</id><snippet>.</snippet></ROW><ROW><id>871222</id><snippet>..</snippet></ROW><ROW><id>871222</id><snippet>parent::</snippet></ROW><ROW><id>871222</id><snippet>parent::*[@b]
</snippet></ROW><ROW><id>871736</id><snippet>for table in soup.findAll('table'):
    rows=[]
    for row in table.findAll('tr'):
        columns=0
        for column in row.findAll('td'):
            columns+=1
            rows.append(columns)
        if max(rows)&gt;3:
          table.delete()
</snippet></ROW><ROW><id>871906</id><snippet>a = """\
def rec(n):
    if n &gt; 10:
        return
    print n
    return rec(n+1)

rec(5)"""

exec(a)
5
6
7
8
9
10
</snippet></ROW><ROW><id>871906</id><snippet>def fn1():
    glob = {}
    a = """\
def rec(n):
    if n &gt; 10:
        return
    print n
    return rec(n+1)

rec(5)"""
    exec(a, glob)

fn1()
</snippet></ROW><ROW><id>872125</id><snippet>in</snippet></ROW><ROW><id>872190</id><snippet>mylist.sort()
print mylist
</snippet></ROW><ROW><id>872269</id><snippet>sh()</snippet></ROW><ROW><id>872633</id><snippet>num_chars = 5
num_rows = 8
empty = ['.' * num_chars]
full = ['*' * num_chars]
print '\n'.join(
    '|'.join(empty * (i + 1) + (num_rows - i - 1) * full)
    for i in xrange(num_rows)
)

.....|*****|*****|*****|*****|*****|*****|*****
.....|.....|*****|*****|*****|*****|*****|*****
.....|.....|.....|*****|*****|*****|*****|*****
.....|.....|.....|.....|*****|*****|*****|*****
.....|.....|.....|.....|.....|*****|*****|*****
.....|.....|.....|.....|.....|.....|*****|*****
.....|.....|.....|.....|.....|.....|.....|*****
.....|.....|.....|.....|.....|.....|.....|.....
</snippet></ROW><ROW><id>872633</id><snippet>rows = 5
cols = 6
char = '#'
empty = '.'
bitmap = [[ (i + j)%2 == 0 for i in xrange(cols)] for j in xrange(rows)]
print '\n'.join(
    '|'.join(bitmap[j][i] * char or empty for i in xrange(cols))
    for j in xrange(rows)
)
</snippet></ROW><ROW><id>872637</id><snippet>for line in f</snippet></ROW><ROW><id>872637</id><snippet>for line in r:</snippet></ROW><ROW><id>872637</id><snippet>import os, sys, time

r,w=os.pipe()
r,w=os.fdopen(r,'r',0), os.fdopen(w,'w',0)

pid = os.fork()
if pid:          # Parent
    w.close()
    while 1:
        data=r.readline()
        if not data: break
        print "parent read: " + data.strip()
else:           # Child
    r.close()
    for i in range(10):
        print &gt;&gt;w, "line %s" % i
        w.flush()
        time.sleep(1)
</snippet></ROW><ROW><id>872698</id><snippet>while True</snippet></ROW><ROW><id>872698</id><snippet>break</snippet></ROW><ROW><id>872698</id><snippet>f.close()</snippet></ROW><ROW><id>872698</id><snippet>currentmoney = float(f.readline())</snippet></ROW><ROW><id>872698</id><snippet>f</snippet></ROW><ROW><id>872876</id><snippet>&gt;&gt;&gt; import pycurl
&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; b = StringIO.StringIO()
&gt;&gt;&gt; conn = pycurl.Curl()
&gt;&gt;&gt; conn.setopt(pycurl.URL, 'http://www.example.org')
&gt;&gt;&gt; conn.setopt(pycurl.WRITEFUNCTION, b.write)
&gt;&gt;&gt; conn.perform()
&gt;&gt;&gt; print b.getvalue()
&lt;HTML&gt;
&lt;HEAD&gt;
  &lt;TITLE&gt;Example Web Page&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;body&gt;
&lt;p&gt;You have reached this web page by typing "example.com",
"example.net",
  or "example.org" into your web browser.&lt;/p&gt;
&lt;p&gt;These domain names are reserved for use in documentation and are not availabl
e
  for registration. See &lt;a href="http://www.rfc-editor.org/rfc/rfc2606.txt"&gt;RFC

  2606&lt;/a&gt;, Section 3.&lt;/p&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;
</snippet></ROW><ROW><id>872989</id><snippet>data_member</snippet></ROW><ROW><id>872989</id><snippet>coo</snippet></ROW><ROW><id>872989</id><snippet>def generate_data():
    print "Generating"
    return [1,2,3]

class coo:
    data_member = generate_data()
    def modify(self):
        self.data_member.append(4)

    def display(self):
        print self.data_member

x = coo()
y = coo()
y.modify()
x.display()

# Output:
# Generating
# [1, 2, 3, 4]
</snippet></ROW><ROW><id>873333</id><snippet>max</snippet></ROW><ROW><id>873333</id><snippet>&gt;&gt;&gt; mylist = ['123','123456','1234']
&gt;&gt;&gt; print max(mylist, key=len)
123456
</snippet></ROW><ROW><id>873475</id><snippet>&gt;&gt;&gt; orig # Byte string, encoded in cp1252
'Fabulous home on one of Decatur\x92s most' 

&gt;&gt;&gt; uni = orig.decode('cp1252')
&gt;&gt;&gt; uni # Unicode string
u'Fabulous home on one of Decatur\u2019s most'

&gt;&gt;&gt; s = uni.encode('utf8')  
&gt;&gt;&gt; s # Correct byte string encoded in utf-8
'Fabulous home on one of Decatur\xe2\x80\x99s most'
</snippet></ROW><ROW><id>873592</id><snippet>python setup.py install</snippet></ROW><ROW><id>873737</id><snippet>&gt;&gt;&gt; indices = ['one','two','three','four','five','six']
&gt;&gt;&gt; i = 2
&gt;&gt;&gt; indices[i:] = indices[i+1:] + indices[i:i+1]
&gt;&gt;&gt; indices
['one', 'two', 'four', 'five', 'six', 'three']
</snippet></ROW><ROW><id>873737</id><snippet>indices = indices.concat( indices.splice( i, 1 ) );
</snippet></ROW><ROW><id>873737</id><snippet>&gt;&gt;&gt; var indices = ['one','two','three','four','five','six'];
&gt;&gt;&gt; var i = 2;
&gt;&gt;&gt; indices = indices.concat( indices.splice( i, 1 ) );
&gt;&gt;&gt; indices
["one", "two", "four", "five", "six", "three"]
</snippet></ROW><ROW><id>873800</id><snippet>values = ["this", "is", "your", "array"]
result = " ".join(values)
</snippet></ROW><ROW><id>873896</id><snippet>import git
import os, os.path
g = git.Git(os.path.expanduser("~/git/GitPython"))
result = g.execute(["git", "commit", "-m", "'message'"])
</snippet></ROW><ROW><id>874025</id><snippet>set(line.strip() for line in open('filename.txt'))
</snippet></ROW><ROW><id>874131</id><snippet>__init__</snippet></ROW><ROW><id>874131</id><snippet>from random import randrange
class Poly:
    points = [0]*8

    def __init__(self, width=100, height=100):
        for i in range(0, 8, 2):
            self.points[i] = randrange(width)
            self.points[i+1] = randrange(height)
        return

p1 = Poly()
print "p1:", p1.points
p2 = Poly()
print "p2:", p2.points
print "p1:", p1.points
</snippet></ROW><ROW><id>874131</id><snippet>[C:\Temp] test.py
p1: [19, 5, 1, 46, 93, 18, 18, 57]
p2: [92, 71, 42, 84, 54, 29, 27, 71]
p1: [92, 71, 42, 84, 54, 29, 27, 71]
</snippet></ROW><ROW><id>874131</id><snippet>from random import randrange
class Poly:
    def __init__(self, width=100, height=100):
        self.points = [0]*8
        for i in range(0, 8, 2):
            self.points[i] = randrange(width)
            self.points[i+1] = randrange(height)
        return
</snippet></ROW><ROW><id>874320</id><snippet>def my_callback(a, p, frame, p1, p2)
    pass
</snippet></ROW><ROW><id>874320</id><snippet>callback = write_callback_prototype(my_callback)
</snippet></ROW><ROW><id>874475</id><snippet>import pygtk
import gtk
import gobject

def window_delete_event(*args):
	return False

def window_destroy(*args):
	gtk.main_quit()

if __name__ == '__main__':
	win = gtk.Window()

	# combo's model
	model = gtk.ListStore(gobject.TYPE_STRING)
	for n in xrange(100):
		model.append([str(n)])

	# combo
	combo = gtk.ComboBoxEntry(model)
	win.add(combo)

	# combo's style
	style = gtk.rc_parse_string('''
		style "my-style" { GtkComboBox::appears-as-list = 1 }
		widget "*.mycombo" style "my-style"
	''')
	combo.set_name('mycombo')
	combo.set_style(style)

	win.show_all()
	win.connect('delete-event', window_delete_event)
	win.connect('destroy', window_destroy)
	gtk.main()
</snippet></ROW><ROW><id>874485</id><snippet>os.getuid() == 0 and "root" or "not root"
</snippet></ROW><ROW><id>874488</id><snippet>import scipy.io
mat = scipy.io.loadmat('file.mat')
</snippet></ROW><ROW><id>874539</id><snippet>/usr/bin</snippet></ROW><ROW><id>874539</id><snippet>setup.py</snippet></ROW><ROW><id>874539</id><snippet>yourprojectdir/
    setup.py
    scripts/
        myscript.sh
</snippet></ROW><ROW><id>874539</id><snippet>setup.py</snippet></ROW><ROW><id>874539</id><snippet>from setuptools import setup
# you may need setuptools instead of distutils

setup(
    # basic stuff here
    scripts = [
        'scripts/myscript.sh'
    ]
)
</snippet></ROW><ROW><id>874539</id><snippet>python setup.py install
</snippet></ROW><ROW><id>874539</id><snippet>/usr/bin</snippet></ROW><ROW><id>874539</id><snippet>python setup.py install --help
</snippet></ROW><ROW><id>874539</id><snippet>--install-scripts</snippet></ROW><ROW><id>874644</id><snippet>os.chdir("location to images folder")
</snippet></ROW><ROW><id>874644</id><snippet>def getProgramFolder():
    moduleFile = __file__
    moduleDir = os.path.split(os.path.abspath(moduleFile))[0]
    programFolder = os.path.abspath(moduleDir)
    return programFolder

bmpFilePath = os.path.join(getProgramFolder(), "images\\new.png")
</snippet></ROW><ROW><id>875062</id><snippet>import struct
# read 2 bytes from hardware as a string
s = hardware.readbytes(2)
# h means signed short
# &lt; means "little-endian, standard size (16 bit)"
# &gt; means "big-endian, standard size (16 bit)"
value = struct.unpack("&lt;h", s) # hardware returns little-endian
value = struct.unpack("&gt;h", s) # hardware returns big-endian
</snippet></ROW><ROW><id>875077</id><snippet>__repr__</snippet></ROW><ROW><id>875077</id><snippet>&gt;&gt;&gt; class Foo:
...     def __str__(self):
...             return '__str__'
...     def __repr__(self):
...             return '__repr__'
...
&gt;&gt;&gt; bar = Foo()
&gt;&gt;&gt; bar 
__repr__
&gt;&gt;&gt; print bar 
__str__
&gt;&gt;&gt; repr(bar)
'__repr__'
&gt;&gt;&gt; str(bar)
'__str__'
</snippet></ROW><ROW><id>875077</id><snippet>__str__</snippet></ROW><ROW><id>875077</id><snippet>__repr__</snippet></ROW><ROW><id>875077</id><snippet>&gt;&gt;&gt; class Foo:
...     def __repr__(self):
...             return '__repr__'
...
&gt;&gt;&gt; bar = Foo()
&gt;&gt;&gt; bar
__repr__
&gt;&gt;&gt; print bar
__repr__
</snippet></ROW><ROW><id>875077</id><snippet>__repr__</snippet></ROW><ROW><id>875077</id><snippet>repr</snippet></ROW><ROW><id>875344</id><snippet>map</snippet></ROW><ROW><id>875344</id><snippet>for</snippet></ROW><ROW><id>875344</id><snippet>item.my_func()</snippet></ROW><ROW><id>875344</id><snippet>map</snippet></ROW><ROW><id>875344</id><snippet>map</snippet></ROW><ROW><id>875344</id><snippet>map</snippet></ROW><ROW><id>875344</id><snippet>list</snippet></ROW><ROW><id>875344</id><snippet>map</snippet></ROW><ROW><id>875344</id><snippet>map</snippet></ROW><ROW><id>875344</id><snippet>f</snippet></ROW><ROW><id>875344</id><snippet>f</snippet></ROW><ROW><id>875344</id><snippet>map(g, map(f, l))</snippet></ROW><ROW><id>875344</id><snippet>map(lambda x: g(f(x)), l)</snippet></ROW><ROW><id>875344</id><snippet>f</snippet></ROW><ROW><id>875344</id><snippet>g</snippet></ROW><ROW><id>875344</id><snippet>map</snippet></ROW><ROW><id>875344</id><snippet>f</snippet></ROW><ROW><id>875344</id><snippet>g</snippet></ROW><ROW><id>875344</id><snippet>map(g, map(f, l))</snippet></ROW><ROW><id>875344</id><snippet>g</snippet></ROW><ROW><id>875344</id><snippet>map(f, l)</snippet></ROW><ROW><id>875344</id><snippet>map(f, l)</snippet></ROW><ROW><id>875344</id><snippet>f</snippet></ROW><ROW><id>875344</id><snippet>l</snippet></ROW><ROW><id>875344</id><snippet>map</snippet></ROW><ROW><id>875344</id><snippet>map</snippet></ROW><ROW><id>875344</id><snippet>map(f, l)</snippet></ROW><ROW><id>875344</id><snippet>itertools.tee</snippet></ROW><ROW><id>875344</id><snippet>map</snippet></ROW><ROW><id>875344</id><snippet>map</snippet></ROW><ROW><id>875344</id><snippet>map</snippet></ROW><ROW><id>875344</id><snippet>map</snippet></ROW><ROW><id>875628</id><snippet>html-mode</snippet></ROW><ROW><id>875628</id><snippet>(defun django-highlight-comments ()
  (interactive "p")
  (highlight-regexp "{%.*?%}" 'hi-orange))
(add-hook 'html-mode-hook 'django-highlight-comments)
</snippet></ROW><ROW><id>875628</id><snippet>.emacs</snippet></ROW><ROW><id>875628</id><snippet>init.el</snippet></ROW><ROW><id>875777</id><snippet>import base64
import sys

encoded = base64.b64encode(sys.stdin.read())
print encoded

decoded = base64.b64decode(encoded)
print decoded
</snippet></ROW><ROW><id>875827</id><snippet>select</snippet></ROW><ROW><id>875827</id><snippet>readable, writable = select(output_fds, input_fds, [], 0.1)[0:2]
</snippet></ROW><ROW><id>875978</id><snippet>&gt;&gt;&gt; s = "how much for the maple syrup? $20.99? That's ricidulous!!!"
&gt;&gt;&gt; re.sub(r'[^\w]', ' ', s)
'how much for the maple syrup   20 99  That s ricidulous   '
</snippet></ROW><ROW><id>875978</id><snippet>\w</snippet></ROW><ROW><id>875978</id><snippet>[^\w]</snippet></ROW><ROW><id>876151</id><snippet>QApplication</snippet></ROW><ROW><id>876151</id><snippet>QApplication.processEvents()</snippet></ROW><ROW><id>876872</id><snippet>import colorsys
N = 5
HSV_tuples = [(x*1.0/N, 0.5, 0.5) for x in range(N)]
RGB_tuples = map(lambda x: colorsys.hsv_to_rgb(*x), HSV_tuples)
</snippet></ROW><ROW><id>877485</id><snippet>with</snippet></ROW><ROW><id>877564</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; p = np.array([[1,2],[3,4]])

&gt;&gt;&gt; p = np.append(p, [[5,6]], 0)
&gt;&gt;&gt; p = np.append(p, [[7],[8],[9]],1)

&gt;&gt;&gt; p
array([[1, 2, 7],
   [3, 4, 8],
   [5, 6, 9]])
</snippet></ROW><ROW><id>877564</id><snippet>    p = np.array(range(20))
&gt;&gt;&gt; p.shape = (4,5)
&gt;&gt;&gt; p
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])
&gt;&gt;&gt; n = 2
&gt;&gt;&gt; p = np.append(p[:n],p[n+1:],0)
&gt;&gt;&gt; p = np.append(p[...,:n],p[...,n+1:],1)
&gt;&gt;&gt; p
array([[ 0,  1,  3,  4],
       [ 5,  6,  8,  9],
       [15, 16, 18, 19]])
</snippet></ROW><ROW><id>877747</id><snippet>__enter__</snippet></ROW><ROW><id>877747</id><snippet>__exit__</snippet></ROW><ROW><id>878719</id><snippet>from base64 import binascii

f = VCFile(head = binascii.b2a_base64('blahblah'.encode('zlib')))
</snippet></ROW><ROW><id>878790</id><snippet>PyImport_Import</snippet></ROW><ROW><id>878790</id><snippet>PyRun_SimpleString</snippet></ROW><ROW><id>878790</id><snippet>PyRun_SimpleString</snippet></ROW><ROW><id>878790</id><snippet>__main__</snippet></ROW><ROW><id>878790</id><snippet>PyObject *main = PyImport_AddModule("__main__");  
PyObject *obj = PyString_FromString("Pootle");
PyObject *pootle = PyImport_Import(obj);  
PyObject_SetAttrString(main, "Pootle", pootle);  

Py_DECREF(obj);
Py_XDECREF(pootle);
</snippet></ROW><ROW><id>879005</id><snippet>__lt__()</snippet></ROW><ROW><id>879005</id><snippet>NotImplemented</snippet></ROW><ROW><id>879005</id><snippet>NotImplemented</snippet></ROW><ROW><id>879005</id><snippet>a == b</snippet></ROW><ROW><id>879005</id><snippet>a.__eq__(b)</snippet></ROW><ROW><id>879005</id><snippet>NotImplemented</snippet></ROW><ROW><id>879005</id><snippet>b.__eq__(a)</snippet></ROW><ROW><id>879005</id><snippet>b</snippet></ROW><ROW><id>879005</id><snippet>True</snippet></ROW><ROW><id>879005</id><snippet>False</snippet></ROW><ROW><id>879005</id><snippet>==</snippet></ROW><ROW><id>879005</id><snippet>!=</snippet></ROW><ROW><id>879008</id><snippet>select column_name, is_nullable, data_type, character_maximum_length as maxlen 
from information_schema.columns 
where table_name = 'Products'
</snippet></ROW><ROW><id>879008</id><snippet>[CatalogName].dbo.sysobjects</snippet></ROW><ROW><id>879008</id><snippet>[CatalogName].dbo.sysolumns</snippet></ROW><ROW><id>879008</id><snippet>select * from [CatalogName].dbo.syscolumns 
where id = 
    (Select id from [CatalogName].dbo.sysobjects where name = 'Products')
</snippet></ROW><ROW><id>879008</id><snippet>select column_name, data_type, data_length, data_precision, data_scale
from ALL_TAB_COLUMNS
where table_name = 'EMP';
</snippet></ROW><ROW><id>879208</id><snippet> #!/usr/bin/env python -W ignore::DeprecationWarning
</snippet></ROW><ROW><id>879208</id><snippet>-W ignore::DeprecationWarning</snippet></ROW><ROW><id>879937</id><snippet>logging.Filter</snippet></ROW><ROW><id>879937</id><snippet>filter(record)</snippet></ROW><ROW><id>879937</id><snippet>Logger</snippet></ROW><ROW><id>879937</id><snippet>Handler</snippet></ROW><ROW><id>879937</id><snippet>addFilter(filter)</snippet></ROW><ROW><id>879937</id><snippet>class NoParsingFilter(logging.Filter):
    def filter(self, record):
        return not record.getMessage().startswith('parsing')

logger.addFilter(NoParsingFilter())
</snippet></ROW><ROW><id>880066</id><snippet>def _Render(self):</snippet></ROW><ROW><id>880066</id><snippet>get</snippet></ROW><ROW><id>880066</id><snippet>post</snippet></ROW><ROW><id>880066</id><snippet>self.Render()</snippet></ROW><ROW><id>880238</id><snippet>from django.utils.html import strip_tags

strip_tags(string_value)
</snippet></ROW><ROW><id>880240</id><snippet>print hasattr(d1,each)</snippet></ROW><ROW><id>880240</id><snippet>print each, type(getattr(d1,each))</snippet></ROW><ROW><id>880240</id><snippet>dir()</snippet></ROW><ROW><id>880240</id><snippet>help()</snippet></ROW><ROW><id>880995</id><snippet>partCount = len(pathParts) - 1

path = "/"
for i in range(2, partCount):
    path += pathParts[i] + "/"
</snippet></ROW><ROW><id>880995</id><snippet>path = '/'.join(pathParts[2:-1])
</snippet></ROW><ROW><id>881171</id><snippet>urlfetch.fetch()</snippet></ROW><ROW><id>881171</id><snippet>import urllib

form_fields = {
  "first_name": "Albert",
  "last_name": "Johnson",
  "email_address": "Albert.Johnson@example.com"
}
form_data = urllib.urlencode(form_fields)
headers = {'Content-Type': 'application/x-www-form-urlencoded'}
result = urlfetch.fetch(url=url,
                        payload=form_data,
                        method=urlfetch.POST,
                        headers=headers)
</snippet></ROW><ROW><id>881182</id><snippet> p = Popen([vmrun_cmd, list_arg], stdout=PIPE).communicate()[0]
 for line in p.splitlines():
 if line.strip():
     print line
</snippet></ROW><ROW><id>881434</id><snippet># Fork a second child and exit immediately to prevent zombies.  This
# causes the second child process to be orphaned, making the init
# process responsible for its cleanup.  And, since the first child is
# a session leader without a controlling terminal, it's possible for
# it to acquire one by opening a terminal in the future (System V-
# based systems).  This second fork guarantees that the child is no
# longer a session leader, preventing the daemon from ever acquiring
# a controlling terminal.
</snippet></ROW><ROW><id>881576</id><snippet>print "a"
print """a"""
</snippet></ROW><ROW><id>881686</id><snippet>import subprocess
with open('output.txt', 'w') as output_f:
    p = subprocess.Popen('Text/to/execute with-arg',
                         stdout=output_f,
                         stderr=output_f)
</snippet></ROW><ROW><id>881689</id><snippet>&gt;&gt;&gt; class test(object):pass
...
&gt;&gt;&gt; issubclass(test,object)
True
</snippet></ROW><ROW><id>881874</id><snippet>from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic


class Photo(models.Model):
    picture = models.ImageField(null=True, upload_to='./images/')
    caption = models.CharField(_("Optional caption"),max_length=100,null=True, blank=True)

    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = generic.GenericForeignKey('content_type', 'object_id')

class Article(models.Model):
    ....
    images     = generic.GenericRelation(Photo)
</snippet></ROW><ROW><id>881874</id><snippet>    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = generic.GenericForeignKey('content_type', 'object_id')
</snippet></ROW><ROW><id>882060</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; import sys
&gt;&gt;&gt; unbuffered = os.fdopen(sys.stdout.fileno(), 'w', 0)
&gt;&gt;&gt; unbuffered.write('test')
test&gt;&gt;&gt; 
&gt;&gt;&gt; sys.stdout = unbuffered
&gt;&gt;&gt; print 'test'
test
</snippet></ROW><ROW><id>882060</id><snippet>sys.stdout = open('???', 'w', 0)
</snippet></ROW><ROW><id>882664</id><snippet>WSGIScriptAlias /myapp /usr/local/www/wsgi-scripts/myapp.py
</snippet></ROW><ROW><id>882664</id><snippet>http://myserver.domain/myapp</snippet></ROW><ROW><id>882664</id><snippet>application</snippet></ROW><ROW><id>882664</id><snippet>http://myserver.domain/myapp/something/here</snippet></ROW><ROW><id>882664</id><snippet>myapp.py</snippet></ROW><ROW><id>882664</id><snippet>def application(environ, start_response):
    start_response('200 OK', [('Content-type', 'text/plain')])
    return ['Hello World!']
</snippet></ROW><ROW><id>882770</id><snippet>#! /usr/bin/python

import smtplib

from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# me == my email address
# you == recipient's email address
me = "my@email.com"
you = "your@email.com"

# Create message container - the correct MIME type is multipart/alternative.
msg = MIMEMultipart('alternative')
msg['Subject'] = "Link"
msg['From'] = me
msg['To'] = you

# Create the body of the message (a plain-text and an HTML version).
text = "Hi!\nHow are you?\nHere is the link you wanted:\nhttp://www.python.org"
html = """\
&lt;html&gt;
  &lt;head&gt;&lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;Hi!&lt;br&gt;
       How are you?&lt;br&gt;
       Here is the &lt;a href="http://www.python.org"&gt;link&lt;/a&gt; you wanted.
    &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
"""

# Record the MIME types of both parts - text/plain and text/html.
part1 = MIMEText(text, 'plain')
part2 = MIMEText(html, 'html')

# Attach parts into message container.
# According to RFC 2046, the last part of a multipart message, in this case
# the HTML message, is best and preferred.
msg.attach(part1)
msg.attach(part2)

# Send the message via local SMTP server.
s = smtplib.SMTP('localhost')
# sendmail function takes 3 arguments: sender's address, recipient's address
# and message to send - here it is sent as one string.
s.sendmail(me, you, msg.as_string())
s.quit()
</snippet></ROW><ROW><id>883204</id><snippet>select</snippet></ROW><ROW><id>883204</id><snippet>select.select([p.stdout.fileno()], [], [], 0)</snippet></ROW><ROW><id>883351</id><snippet>save(filename_or_stream)</snippet></ROW><ROW><id>883351</id><snippet>xls.save(response)</snippet></ROW><ROW><id>883351</id><snippet>def xls_to_response(xls, fname):
    response = HttpResponse(mimetype="application/ms-excel")
    response['Content-Disposition'] = 'attachment; filename=%s' % fname
    xls.save(response)
    return response
</snippet></ROW><ROW><id>883351</id><snippet>xls</snippet></ROW><ROW><id>883351</id><snippet>return xls_to_response(xls,'foo.xls')
</snippet></ROW><ROW><id>883401</id><snippet>&gt;&gt;&gt; try:
...     raise UnrecognizedAirportError("func","arg1","arg2")
... except UnrecognizedAirportError, e:
...     print e.args
...
('func', 'arg1', 'arg2')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>883401</id><snippet>args</snippet></ROW><ROW><id>883401</id><snippet>Exception</snippet></ROW><ROW><id>883401</id><snippet>class TestSomeException( unittest.TestCase ):
    def testRaiseWithArgs( self ):
        try:
            ... Something that raises the exception ...
            self.fail( "Didn't raise the exception" )
        except UnrecognizedAirportError, e:
            self.assertEquals( "func", e.args[0] )
            self.assertEquals( "arg1", e.args[1] )
        except Exception, e:
            self.fail( "Raised the wrong exception" )
</snippet></ROW><ROW><id>883500</id><snippet>sys.exit()</snippet></ROW><ROW><id>883500</id><snippet>while True:</snippet></ROW><ROW><id>883500</id><snippet>while keep_processing:</snippet></ROW><ROW><id>883500</id><snippet>keep_processing</snippet></ROW><ROW><id>884073</id><snippet>def func(n):
    x, y = n
    ...
</snippet></ROW><ROW><id>884339</id><snippet>     ........
	&lt;div id="results"&gt;			
		{% block results %}
			{% for el in items %}
		           &lt;li&gt;{{el|capfirst}}&lt;/li&gt;
			{% endfor %}
		{% endblock %}		
	&lt;/div&gt;&lt;br /&gt;
     ........
</snippet></ROW><ROW><id>884339</id><snippet>from django.template import loader
# downloaded from djangosnippets.com[942]
from my_project.snippets.template import render_block_to_string

def ajax_view(request):
    # some random context
    context = Context({'items': range(100)})
    # passing the template_name + block_name + context
    return_str = render_block_to_string('standard/subtemplate.html', 'results', context)
    return HttpResponse(return_str)
</snippet></ROW><ROW><id>884425</id><snippet>None</snippet></ROW><ROW><id>884425</id><snippet>decorator</snippet></ROW><ROW><id>884425</id><snippet>join()</snippet></ROW><ROW><id>884425</id><snippet>None</snippet></ROW><ROW><id>884425</id><snippet>join()</snippet></ROW><ROW><id>884425</id><snippet>import threading

# Callable that stores the result of calling the given callable f.
class ResultCatcher:
    def __init__(self, f):
        self.f = f
        self.val = None

    def __call__(self, *args, **kwargs):
        self.val = self.f(*args, **kwargs)

def threaded(f):
    def decorator(*args,**kargs):
        # Encapsulate f so that the return value can be extracted.
        retVal = ResultCatcher(f)

        th = threading.Thread(target=retVal, args=args)
        th.start()
        th.join()

        # Extract and return the result of executing f.
        return retVal.val

    decorator.__name__ = f.__name__
    return decorator

@threaded
def add_item(a, b):
    return a + b

print(add_item(2, 2))
</snippet></ROW><ROW><id>884606</id><snippet>from optparse import OptionParser, Option

# Complete hack.
Option.ALWAYS_TYPED_ACTIONS += ('callback',)

def dostuff(*a):
    pass

parser = OptionParser()
parser.add_option("-c",
                  "--callback",
                  dest="filename",
                  action="callback",
                  callback=dostuff,
                  metavar='LIST',
                  help='do stuff',
                  )

(options, args) = parser.parse_args()
</snippet></ROW><ROW><id>884606</id><snippet>Usage: opt.py [options]

Options:
  -h, --help            show this help message and exit
  -c LIST, --callback=LIST
                        do stuff
</snippet></ROW><ROW><id>884634</id><snippet>theobj = object.__getattribute__(self, "theObject")
</snippet></ROW><ROW><id>884846</id><snippet>import multiprocessing
import subprocess

def work(cmd):
    return subprocess.call(cmd, shell=False)

if __name__ == '__main__':
    count = multiprocessing.cpu_count()
    pool = multiprocessing.Pool(processes=count)
    print pool.map(work, ['ls'] * count)
</snippet></ROW><ROW><id>884846</id><snippet>import multiprocessing
import subprocess

def calculate(value):
    return value * 10

if __name__ == '__main__':
    pool = multiprocessing.Pool(None)
    tasks = range(10000)
    results = []
    r = pool.map_async(calculate, tasks, callback=results.append)
    r.wait() # Wait on the results
    print results
</snippet></ROW><ROW><id>885203</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>885203</id><snippet>manage.py sqlall</snippet></ROW><ROW><id>885203</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>885222</id><snippet>delete()</snippet></ROW><ROW><id>885282</id><snippet>ones = relation('O1', order_by=lambda:[O1.value])
</snippet></ROW><ROW><id>885282</id><snippet>ones = relation('O1', order_by='O1.value, O1.something_else')
</snippet></ROW><ROW><id>885584</id><snippet>from itertools import groupby
group = groupby([1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1])
print max(group, key=lambda k: len(list(k[1])))
</snippet></ROW><ROW><id>885584</id><snippet>&gt;&gt;&gt; group = groupby([1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1])
&gt;&gt;&gt; print max(group, key=lambda k: len(list(k[1])))
(2, &lt;itertools._grouper object at 0xb779f1cc&gt;)
&gt;&gt;&gt; group = groupby([1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 3, 3, 3, 3, 3])
&gt;&gt;&gt; print max(group, key=lambda k: len(list(k[1])))
(3, &lt;itertools._grouper object at 0xb7df95ec&gt;)
</snippet></ROW><ROW><id>885584</id><snippet># [k for k, g in groupby('AAAABBBCCDAABBB')] --&gt; A B C D A B
# [list(g) for k, g in groupby('AAAABBBCCD')] --&gt; AAAA BBB CC D
</snippet></ROW><ROW><id>885584</id><snippet>group = groupby([1, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 3, 3, 3, 3, 3])
result = []
index = 0
for k, g in group:
   length = len(list(g))
   result.append((k, length, index))
   index += length

print max(result, key=lambda a:a[1])
</snippet></ROW><ROW><id>885654</id><snippet>getCode()</snippet></ROW><ROW><id>885654</id><snippet>getCode()</snippet></ROW><ROW><id>885684</id><snippet>shelve</snippet></ROW><ROW><id>885684</id><snippet>&gt;&gt;&gt; import shelve
&gt;&gt;&gt; d = shelve.open('mydb')
&gt;&gt;&gt; d['key1'] = 12345
&gt;&gt;&gt; d['key2'] = value2
&gt;&gt;&gt; print d['key1']
12345
&gt;&gt;&gt; d.close()
</snippet></ROW><ROW><id>885716</id><snippet>manage.py startmigration app --initial
</snippet></ROW><ROW><id>886171</id><snippet>dns.resolver</snippet></ROW><ROW><id>886171</id><snippet>rdata</snippet></ROW><ROW><id>886171</id><snippet>dns.resolver.query()</snippet></ROW><ROW><id>886171</id><snippet>MX</snippet></ROW><ROW><id>886171</id><snippet>exchange</snippet></ROW><ROW><id>886171</id><snippet>preference</snippet></ROW><ROW><id>886171</id><snippet>dns.resolver</snippet></ROW><ROW><id>886171</id><snippet>__getattr__</snippet></ROW><ROW><id>886171</id><snippet>dir()</snippet></ROW><ROW><id>886274</id><snippet>a</snippet></ROW><ROW><id>886274</id><snippet>wua</snippet></ROW><ROW><id>886274</id><snippet>wu</snippet></ROW><ROW><id>886274</id><snippet>w</snippet></ROW><ROW><id>886274</id><snippet>auw</snippet></ROW><ROW><id>886274</id><snippet>au</snippet></ROW><ROW><id>886274</id><snippet>&gt;&gt;&gt; f = open('test.txt', 'r')
&gt;&gt;&gt; f.read()
'Initial contents\n'
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; f = open('test.txt', 'wua')
&gt;&gt;&gt; print &gt;&gt; f, 'writing'
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; f = open('test.txt', 'r')
&gt;&gt;&gt; f.read()
'writing\n'
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; f = open('test.txt', 'auw')
&gt;&gt;&gt; print &gt;&gt; f, 'appending'
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; f = open('test.txt', 'r')
&gt;&gt;&gt; f.read()
'writing\nappending\n'
&gt;&gt;&gt; f.close()
</snippet></ROW><ROW><id>886274</id><snippet>a</snippet></ROW><ROW><id>886274</id><snippet>w</snippet></ROW><ROW><id>886400</id><snippet>str()</snippet></ROW><ROW><id>886400</id><snippet>cleaned_html</snippet></ROW><ROW><id>886581</id><snippet>mod_python</snippet></ROW><ROW><id>886581</id><snippet>mod_wsgi</snippet></ROW><ROW><id>886891</id><snippet>in</snippet></ROW><ROW><id>886891</id><snippet>Team.objects.filter(team_members=request.user)
</snippet></ROW><ROW><id>886891</id><snippet>request.user.team_set.all()
</snippet></ROW><ROW><id>887402</id><snippet>select([foo], foo.c.bar.in_([1, 2, 3]))
</snippet></ROW><ROW><id>887402</id><snippet>.in_()</snippet></ROW><ROW><id>888141</id><snippet>width</snippet></ROW><ROW><id>888141</id><snippet>bar(x, y, width=30)
</snippet></ROW><ROW><id>888141</id><snippet>bar(x, y, width=[(x[j+1]-x[j]).days for j in range(len(x)-1)] + [30])
</snippet></ROW><ROW><id>888464</id><snippet>$ LANG="en_US.UTF8" python -c "import sys; print sys.stdout.encoding"
UTF-8
$ LANG="en_US" python -c "import sys; print sys.stdout.encoding"  
ANSI_X3.4-1968
</snippet></ROW><ROW><id>888464</id><snippet>(setenv "LANG" "en_US.UTF8")
</snippet></ROW><ROW><id>888551</id><snippet>from setuptools import setup

DATA_FILES = []
OPTIONS = {'argv_emulation': True,
           'packages' : ['lxml'],
           'frameworks' : ['/usr/local/libxml2-2.7.2/lib/libxml2.2.7.2.dylib']
          }

setup(app=MyApp.py,
      data_files=DATA_FILES,
      options={'py2app' : OPTIONS},
      setup_requires=['py2app'])
</snippet></ROW><ROW><id>888591</id><snippet>ManyToOne</snippet></ROW><ROW><id>888591</id><snippet>ForeignKey</snippet></ROW><ROW><id>888591</id><snippet>User</snippet></ROW><ROW><id>888591</id><snippet>Groups</snippet></ROW><ROW><id>888591</id><snippet>class Group(models.Model):
    name = models.CharField(max_length=64)

class User(models.Model):
    name = models.CharField(max_length=64)
    group = models.ForeignKey(Group)

g = Group.objects.get(id=1)
print g.user_set.all()  # prints list of all users in the group
</snippet></ROW><ROW><id>888591</id><snippet>ManyToOne</snippet></ROW><ROW><id>888952</id><snippet>def isReal(txt):
    try:
        float(txt)
        return True
    except ValueError:
        return False
</snippet></ROW><ROW><id>889103</id><snippet>regex1 = re.compile('\{.*\}')
regex2 = re.compile('\{\{.*\}\}')

def replace(match):
    match = match.group(0)
    if regex2.match(match):
        return match
    return 'replacement'


regex1.sub(replace, data)
</snippet></ROW><ROW><id>889145</id><snippet>def f(*args):
    pass
</snippet></ROW><ROW><id>889145</id><snippet>f</snippet></ROW><ROW><id>889145</id><snippet>*args</snippet></ROW><ROW><id>889145</id><snippet>**kwargs</snippet></ROW><ROW><id>889145</id><snippet>verbose</snippet></ROW><ROW><id>889145</id><snippet>import time

def timed(f):
    def dec(*args, **kwargs):
        verbose = kwargs.pop('verbose', False)
        t = time.clock()

        ret = f(*args, **kwargs)

        if verbose:
            print("%s executed in %ds" % (f.__name__, time.clock() - t))

        return ret

    return dec

@timed
def add(a, b):
    return a + b

print(add(2, 2, verbose=True))
</snippet></ROW><ROW><id>889145</id><snippet>kwargs.pop</snippet></ROW><ROW><id>889188</id><snippet>r'^(\#{1}([0-7])\#{2})'
</snippet></ROW><ROW><id>889188</id><snippet>###7######
########1###
</snippet></ROW><ROW><id>889550</id><snippet>output = response.read()
</snippet></ROW><ROW><id>889733</id><snippet>if i / 3 == True
</snippet></ROW><ROW><id>889733</id><snippet>if i / 3 == 1
</snippet></ROW><ROW><id>889733</id><snippet>if i % 3 == 0
</snippet></ROW><ROW><id>889733</id><snippet>[x for x in range(20) if x % 3 == 0]
</snippet></ROW><ROW><id>889916</id><snippet>profile</snippet></ROW><ROW><id>889916</id><snippet>cProfile</snippet></ROW><ROW><id>890114</id><snippet>from PIL import Image, ImageOps

mask = Image.open('mask.png').convert('L')
im = Image.open('image.png')
output = ImageOps.fit(im, mask.size, centering=(0.5, 0.5))
output.putalpha(mask)
output.save('output.png')
</snippet></ROW><ROW><id>890114</id><snippet>from PIL import Image, ImageOps, ImageDraw

size = (128, 128)
mask = Image.new('L', size, 0)
draw = ImageDraw.Draw(mask) 
draw.ellipse((0, 0) + size, fill=255)
im = Image.open('image.jpg')
output = ImageOps.fit(im, mask.size, centering=(0.5, 0.5))
output.putalpha(mask)
output.save('output.png')
</snippet></ROW><ROW><id>890114</id><snippet>from PIL import Image, ImageOps, ImageDraw

size = (128, 128)
mask = Image.new('L', size, 255)
draw = ImageDraw.Draw(mask)
draw.ellipse((0, 0) + size, fill=0)
im = Image.open('image.jpg')
output = ImageOps.fit(im, mask.size, centering=(0.5, 0.5))
output.paste(0, mask=mask)
output.convert('P', palette=Image.ADAPTIVE)
output.save('output.gif', transparency=0)
</snippet></ROW><ROW><id>890188</id><snippet>f = lambda x: x**2 + 2*x - 5
</snippet></ROW><ROW><id>890188</id><snippet>mult3 = filter(lambda x: x % 3 == 0, [1, 2, 3, 4, 5, 6, 7, 8, 9])
</snippet></ROW><ROW><id>890188</id><snippet>mult3</snippet></ROW><ROW><id>890188</id><snippet>[3, 6, 9]</snippet></ROW><ROW><id>890188</id><snippet>def filterfunc(x):
    return x % 3 == 0
mult3 = filter(filterfunc, [1, 2, 3, 4, 5, 6, 7, 8, 9])
</snippet></ROW><ROW><id>890188</id><snippet>mult3 = [x for x in [1, 2, 3, 4, 5, 6, 7, 8, 9] if x % 3 == 0]
</snippet></ROW><ROW><id>890188</id><snippet>range(3,10,3)</snippet></ROW><ROW><id>890188</id><snippet>def transform(n):
    return lambda x: x + n
f = transform(3)
f(4) # is 7
</snippet></ROW><ROW><id>890300</id><snippet>from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from SocketServer import ThreadingMixIn

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
  """Handle requests in a separate thread."""

server = ThreadedHTTPServer((config['HTTPServer']['listen'],config['HTTPServer']['port']), HTTPHandler)
server.serve_forever()
</snippet></ROW><ROW><id>890500</id><snippet>def team(t):
    iterations = range(2, len(t)/2+1)

    totalscore = sum(t)
    halftotalscore = totalscore/2.0

    oldmoves = {}

    for p in t:
        people_left = t[:]
        people_left.remove(p)
        oldmoves[p] = people_left

    if iterations == []:
        solution = min(map(lambda i: (abs(float(i)-halftotalscore), i), oldmoves.keys()))
        return (solution[1], sum(oldmoves[solution[1]]), oldmoves[solution[1]])

    for n in iterations:
        newmoves = {}
        for total, roster in oldmoves.iteritems():
            for p in roster:
                people_left = roster[:]
                people_left.remove(p)
                newtotal = total+p
                if newtotal &gt; halftotalscore: continue
                newmoves[newtotal] = people_left
        oldmoves = newmoves

    solution = min(map(lambda i: (abs(float(i)-halftotalscore), i), oldmoves.keys()))
    return (solution[1], sum(oldmoves[solution[1]]), oldmoves[solution[1]])

print team([90,200,100])
print team([2,3,10,5,8,9,7,3,5,2])
print team([1,1,1,1,1,1,1,1,1,9])
print team([87,100,28,67,68,41,67,1])
print team([1, 1, 50, 50, 50, 1000])

#output
#(200, 190, [90, 100])
#(27, 27, [3, 9, 7, 3, 5])
#(5, 13, [1, 1, 1, 1, 9])
#(229, 230, [28, 67, 68, 67])
#(150, 1002, [1, 1, 1000])
</snippet></ROW><ROW><id>890955</id><snippet>port install python23</snippet></ROW><ROW><id>890955</id><snippet>./configure --prefix /home/(your homedir)/software MACOSX_DEPLOYMENT_TARGET=10.5</snippet></ROW><ROW><id>890955</id><snippet>make</snippet></ROW><ROW><id>890955</id><snippet>make install</snippet></ROW><ROW><id>891462</id><snippet>getattr(soup.find('link', id=1), sometag)</snippet></ROW><ROW><id>891462</id><snippet>soup.find('link', id=1).mode</snippet></ROW><ROW><id>891462</id><snippet>getattr</snippet></ROW><ROW><id>892306</id><snippet>email</snippet></ROW><ROW><id>892306</id><snippet>smtplib</snippet></ROW><ROW><id>892306</id><snippet>imaplib</snippet></ROW><ROW><id>892306</id><snippet>IMAP4</snippet></ROW><ROW><id>892306</id><snippet>IMAP</snippet></ROW><ROW><id>892306</id><snippet>gmail</snippet></ROW><ROW><id>892306</id><snippet>imaplib</snippet></ROW></DATA>