<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>18083138</id><snippet>None</snippet></ROW><ROW><id>18083138</id><snippet>None</snippet></ROW><ROW><id>18083138</id><snippet>repr()</snippet></ROW><ROW><id>18083138</id><snippet>str()</snippet></ROW><ROW><id>18083138</id><snippet>str()</snippet></ROW><ROW><id>18083138</id><snippet>&gt;&gt;&gt; y = None
&gt;&gt;&gt; repr(y)
'None'
&gt;&gt;&gt; str(y)
'None'
&gt;&gt;&gt; print repr(y)
None
&gt;&gt;&gt; print y
None
</snippet></ROW><ROW><id>18083138</id><snippet>print repr()</snippet></ROW><ROW><id>18083138</id><snippet>None</snippet></ROW><ROW><id>18083138</id><snippet>sys.displayhook()</snippet></ROW><ROW><id>18083138</id><snippet>None</snippet></ROW><ROW><id>18083138</id><snippet>None</snippet></ROW><ROW><id>18083138</id><snippet>import sys

_chained_hook = sys.displayhook
def my_displayhook(res):
    _chained_hook(res)
    if res is None:
        sys.stdout.write('None\n')

sys.displayhook = my_displayhook
</snippet></ROW><ROW><id>18083343</id><snippet>concat</snippet></ROW><ROW><id>18083343</id><snippet>In [11]: s1
Out[11]:
id
1      3
3     19
4     15
5      5
6      2
Name: count_1, dtype: int64

In [12]: s2
Out[12]:
id
1     3
3     1
4     1
5     2
6     1
Name: count_2, dtype: int64

In [13]: pd.concat([s1, s2], axis=1)
Out[13]:
    count_1  count_2
id
1         3        3
3        19        1
4        15        1
5         5        2
6         2        1
</snippet></ROW><ROW><id>18083343</id><snippet>merge</snippet></ROW><ROW><id>18083343</id><snippet>In [21]: df1 = s1.reset_index()

In [22]: s1.reset_index()
Out[22]:
   id  count_1
0   1        3
1   3       19
2   4       15
3   5        5
4   6        2

In [23]: df2 = s2.reset_index()

In [24]: df1.merge(df2)
Out[24]:
   id  count_1  count_2
0   1        3        3
1   3       19        1
2   4       15        1
3   5        5        2
4   6        2        1
</snippet></ROW><ROW><id>18083380</id><snippet>save</snippet></ROW><ROW><id>18083380</id><snippet>def save(self, *args, **kwargs):
    if not self.pk and self.confirmed:
        self.po_number = self.validPONumber()
    super(PurchaseOrder, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>18083380</id><snippet>confirmed == True</snippet></ROW><ROW><id>18083380</id><snippet>save</snippet></ROW><ROW><id>18083380</id><snippet>def save(self, *args, **kwargs):
    if self.confirmed:
        self.po_number = self.validPONumber()
    super(PurchaseOrder, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>18083792</id><snippet>requests</snippet></ROW><ROW><id>18084099</id><snippet>most_viewed_videos = Video.objects.filter(
        videowatch__created__month=today.month,
        viewing__status="D"
    ).annotate(
        count=Count("videowatch"),
        viewing_count=Sum("viewing")
    .extra(
        select={'total': 'COUNT(videowatch)+SUM(viewing)'}
    )
    ).values("count", "viewing_count").order_by(
        "-viewing_count",
        "-count"
)
</snippet></ROW><ROW><id>18084201</id><snippet>init</snippet></ROW><ROW><id>18084201</id><snippet>animate</snippet></ROW><ROW><id>18084201</id><snippet>PLOT</snippet></ROW><ROW><id>18084201</id><snippet>time_text</snippet></ROW><ROW><id>18084201</id><snippet>PLOT, = sub.plot([],[])</snippet></ROW><ROW><id>18084201</id><snippet>sub.plot</snippet></ROW><ROW><id>18084201</id><snippet>matplotlib.lines.Line2D</snippet></ROW><ROW><id>18084201</id><snippet>PLOT,</snippet></ROW><ROW><id>18084201</id><snippet>PLOT = sub.plot([],[])[0]
</snippet></ROW><ROW><id>18084201</id><snippet>time_text</snippet></ROW><ROW><id>18084201</id><snippet>time_text = sub.text(1,1,"",transform = sub.transAxes, ha="right")
</snippet></ROW><ROW><id>18084201</id><snippet>time_text = sub.text(1,0,"",transform = sub.transAxes, ha="right")
</snippet></ROW><ROW><id>18084201</id><snippet>0.5, 0.5</snippet></ROW><ROW><id>18084314</id><snippet>len(mylist) == 2 and mylist[1] == "comment"
</snippet></ROW><ROW><id>18084314</id><snippet>&gt;&gt;&gt; mylist = ["important", "comment"]
&gt;&gt;&gt; c = len(mylist) == 2 and mylist[1] == "comment"
&gt;&gt;&gt; c
True
&gt;&gt;&gt;
&gt;&gt;&gt; mylist = ["important"]
&gt;&gt;&gt; c = len(mylist) == 2 and mylist[1] == "comment"
&gt;&gt;&gt; c
False
</snippet></ROW><ROW><id>18084492</id><snippet>unittest.TestCase()</snippet></ROW><ROW><id>18084492</id><snippet>__init__</snippet></ROW><ROW><id>18084492</id><snippet>tc = unittest.TestCase('__init__')
tc.assertIsNotNone(a)
</snippet></ROW><ROW><id>18084492</id><snippet>mock</snippet></ROW><ROW><id>18084907</id><snippet>def add(self, second_number):
    difference = self.substract()
    return difference + second_number
</snippet></ROW><ROW><id>18084974</id><snippet>StopIteration</snippet></ROW><ROW><id>18084974</id><snippet>os.walk(dir).next()[1]</snippet></ROW><ROW><id>18084974</id><snippet>for root, dirs, files in os.walk(mydir):
    #dirs here should be equivalent to dirList
</snippet></ROW><ROW><id>18084974</id><snippet>os.walk</snippet></ROW><ROW><id>18085192</id><snippet>&lt;select name id class="form-control" style="width: 200px;"&gt;</snippet></ROW><ROW><id>18085192</id><snippet>&lt;select&gt;&lt;/select&gt;</snippet></ROW><ROW><id>18085192</id><snippet>&lt;select name="myUser" class="form-control" style="width: 200px;"&gt;
</snippet></ROW><ROW><id>18085436</id><snippet>ver = context.xpath('//fvdl:FVDL/@version',
          namespaces={"fvdl": "xmlns://www.fortifysoftware.com/schema/fvdl"})
</snippet></ROW><ROW><id>18085436</id><snippet>version</snippet></ROW><ROW><id>18085436</id><snippet>ver = context.xpath('/*/@version')
</snippet></ROW><ROW><id>18085436</id><snippet>['1.9']</snippet></ROW><ROW><id>18085856</id><snippet>%s</snippet></ROW><ROW><id>18085856</id><snippet>?</snippet></ROW><ROW><id>18085856</id><snippet>import sqlite as sql
conn = sql.connect('test.db')
c = conn.cursor()
c.execute('''create table test(item text)''')
list = ['apple', 'orange', 'banana']
c.executemany('''insert into test values(%s)''', list)
</snippet></ROW><ROW><id>18085961</id><snippet>import memcache
mc = memcache.Client(['127.0.0.1:11211'], debug=0)
try:
    print mc.get('gfdsgf')
except (mc.MemcachedKeyTypeError, mc.MemcachedKeyNoneError,
                    TypeError, mc.MemcachedKeyCharacterError,
                    mc.MemcachedKeyError, mc.MemcachedKeyLengthError,
                    mc.MemcachedStringEncodingError):
   print 'error'
</snippet></ROW><ROW><id>18086040</id><snippet>&gt;&gt;&gt; test_list = [['Biking', '10'], ['Biking|Gym', '14'], ['Biking|Gym|Hiking', '9'], ['Biking|Gym|Hiking|Running', '27']]
</snippet></ROW><ROW><id>18086040</id><snippet>defaultdict</snippet></ROW><ROW><id>18086040</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; final_dict = defaultdict(int)
&gt;&gt;&gt; for keys, values in test_list:
        for elem in keys.split('|'):
            final_dict[elem] += int(values)


&gt;&gt;&gt; final_dict
defaultdict(&lt;type 'int'&gt;, {'Gym': 50, 'Biking': 60, 'Running': 27, 'Hiking': 36})
</snippet></ROW><ROW><id>18086040</id><snippet>&gt;&gt;&gt; final_sum = float(sum(final_dict.values()))
&gt;&gt;&gt; [(elem, num, str(num/final_sum)+'%') for elem, num in final_dict.items()]
[('Gym', 50, '0.28901734104%'), ('Biking', 60, '0.346820809249%'), ('Running', 27, '0.156069364162%'), ('Hiking', 36, '0.208092485549%')]
</snippet></ROW><ROW><id>18086040</id><snippet>&gt;&gt;&gt; [(elem, num, '{:.1%}'.format(num/final_sum)) for elem, num in final_dict.items()]
[('Gym', 50, '28.9%'), ('Biking', 60, '34.7%'), ('Running', 27, '15.6%'), ('Hiking', 36, '20.8%')]
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; sorted([(elem, num, '{:.1%}'.format(num/final_sum)) for elem, num in final_dict.items()], key = itemgetter(1), reverse=True)
[('Biking', 60, '34.7%'), ('Gym', 50, '28.9%'), ('Hiking', 36, '20.8%'), ('Running', 27, '15.6%')]
</snippet></ROW><ROW><id>18086366</id><snippet>l1 = set(s for x in list1 for s in x)
l2 = set(s for x in list2 for s in x)
</snippet></ROW><ROW><id>18086366</id><snippet>common = l1.intersection(l2)  # common will give common elements
print len(common) # this will give you the number of elements in common.
</snippet></ROW><ROW><id>18086366</id><snippet>&gt;&gt;&gt; print common
set(['3123', '3115', '3107', '3126'])
&gt;&gt;&gt; len(common)
4
</snippet></ROW><ROW><id>18086464</id><snippet>body.append(paragraph([('This is italic text', 'i')]))
</snippet></ROW><ROW><id>18086539</id><snippet>byte[] buffer = ...;
ByteBuffer bb = ByteBuffer.wrap(buffer); // don't need to put()
int val = (int)bb.getChar(0);
</snippet></ROW><ROW><id>18086539</id><snippet>short b0 = (buffer[0] &amp; 255); // trick converts to unsigned
short b1 = (buffer[1] &amp; 255);
int val = b0 | (b1 &lt;&lt; 8);

// or just put it all inline:
int val = (buffer[0]&amp;255) | ((buffer[1]&amp;255) &lt;&lt; 8);
</snippet></ROW><ROW><id>18086570</id><snippet>from __future__ import division, absolute_import \
        unicode_literals, print_function
</snippet></ROW><ROW><id>18086570</id><snippet>six</snippet></ROW><ROW><id>18086570</id><snippet>str/unicode</snippet></ROW><ROW><id>18086570</id><snippet>str</snippet></ROW><ROW><id>18086570</id><snippet>bytes</snippet></ROW><ROW><id>18086570</id><snippet>str</snippet></ROW><ROW><id>18086708</id><snippet>for key in docs_A_rec:
    for word, (number_1,number_2)  in list_1:
       if word in buffer:
           docs_A_rec[key]['idf'][word] = templist[word][number_1]
</snippet></ROW><ROW><id>18086893</id><snippet>conn.commit</snippet></ROW><ROW><id>18086893</id><snippet>conn = sqlite3.connect('tarefas.db')
c = conn.cursor()
c.execute("UPDATE tarefas SET concluido = 1")
conn.commit()
conn.close()
</snippet></ROW><ROW><id>18086991</id><snippet>r"&lt;([A-Za-z0-9_]+)&gt;"</snippet></ROW><ROW><id>18086991</id><snippet>&lt; &gt;</snippet></ROW><ROW><id>18086991</id><snippet>re.search(r"&lt; ([A-Za-z0-9_.,\"' ]+) &gt;", txt)
</snippet></ROW><ROW><id>18086991</id><snippet>','</snippet></ROW><ROW><id>18086991</id><snippet>'</snippet></ROW><ROW><id>18086991</id><snippet>"</snippet></ROW><ROW><id>18086991</id><snippet>re.match</snippet></ROW><ROW><id>18086991</id><snippet>re.findall()</snippet></ROW><ROW><id>18086991</id><snippet>.</snippet></ROW><ROW><id>18086991</id><snippet>re</snippet></ROW><ROW><id>18086991</id><snippet>re.DOTALL</snippet></ROW><ROW><id>18086991</id><snippet>'.'</snippet></ROW><ROW><id>18086991</id><snippet>'.'</snippet></ROW><ROW><id>18086991</id><snippet>re.DOTALL</snippet></ROW><ROW><id>18086991</id><snippet>OR</snippet></ROW><ROW><id>18086991</id><snippet>re.compile(pattern, flags=re.DOTALL)
</snippet></ROW><ROW><id>18086991</id><snippet>PREFIX</snippet></ROW><ROW><id>18086991</id><snippet>.*?([A-Z\.]*)...</snippet></ROW><ROW><id>18086991</id><snippet>?</snippet></ROW><ROW><id>18086991</id><snippet>PREFIX.FOO</snippet></ROW><ROW><id>18086991</id><snippet>([A-Z\.]*)</snippet></ROW><ROW><id>18086991</id><snippet>.</snippet></ROW><ROW><id>18086991</id><snippet>import re

TEST_VALUES = [
    """ORTH.FOO &lt; "cali.ber,kl", 'calf' , "done" &gt;,\nLKEYS.KEYREL.PRED "_calf_n_1_rel",""",
    """calf_n1 := n_-_c_le &amp; n_-_pn_le &amp;\n [ ORTH.FOO &lt; "cali.ber,kl", 'calf' , "done" &gt;,\nLKEYS.KEYREL.PRED "_calf_n_1_rel","""
]

EXPECTED = ('ORTH.FOO', ['cali.ber,kl','calf','done'])


pattern = re.compile(r'.*?([A-Z\.]*) &lt; (.*) &gt;.*', flags=re.DOTALL)


for value in TEST_VALUES:
    prefix, names_str = pattern.match(value).groups()
    names = re.findall('[\'"](.*?)["\']', names_str)

    result = prefix, names
    assert(result == EXPECTED)

print result
</snippet></ROW><ROW><id>18087025</id><snippet>from operator import add, sub, mul, div

lookup = {'+': add, '-': sub, '*': mul, '/': div}

print lookup[third](int(first), int(second))
</snippet></ROW><ROW><id>18087025</id><snippet>operator</snippet></ROW><ROW><id>18087025</id><snippet>third</snippet></ROW><ROW><id>18087025</id><snippet>third in lookup</snippet></ROW><ROW><id>18087060</id><snippet>hasattr</snippet></ROW><ROW><id>18087060</id><snippet>getattr</snippet></ROW><ROW><id>18087060</id><snippet>hasattr(foo, 'bar')
</snippet></ROW><ROW><id>18087060</id><snippet>True</snippet></ROW><ROW><id>18087060</id><snippet>foo</snippet></ROW><ROW><id>18087060</id><snippet>bar</snippet></ROW><ROW><id>18087060</id><snippet>False</snippet></ROW><ROW><id>18087060</id><snippet>getattr(foo, 'bar', 'quux')
</snippet></ROW><ROW><id>18087060</id><snippet>foo.bar</snippet></ROW><ROW><id>18087060</id><snippet>quux</snippet></ROW><ROW><id>18087551</id><snippet>zip(...)</snippet></ROW><ROW><id>18087551</id><snippet>&gt;&gt;&gt; for elem in zip(*l):
        for a in elem:
            print(a)


1
a
x
2
b
y
3
c
z
</snippet></ROW><ROW><id>18087551</id><snippet>zip_longest(...)</snippet></ROW><ROW><id>18087551</id><snippet>izip_longest</snippet></ROW><ROW><id>18087551</id><snippet>&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; l=[[1,2,3],["a","b","c"],["x","y"]]
&gt;&gt;&gt; for elem in zip_longest(*l, fillvalue='Empty'):
        print(elem)


(1, 'a', 'x')
(2, 'b', 'y')
(3, 'c', 'Empty')
</snippet></ROW><ROW><id>18087588</id><snippet>map</snippet></ROW><ROW><id>18087588</id><snippet>print(list(squares))
</snippet></ROW><ROW><id>18087588</id><snippet>squares = [x**2 for x in range(10)]
</snippet></ROW><ROW><id>18087588</id><snippet>map</snippet></ROW><ROW><id>18087588</id><snippet>map()</snippet></ROW><ROW><id>18087588</id><snippet>filter()</snippet></ROW><ROW><id>18087588</id><snippet>list(map(...))</snippet></ROW><ROW><id>18087588</id><snippet>lambda</snippet></ROW><ROW><id>18087588</id><snippet>map()</snippet></ROW><ROW><id>18087588</id><snippet>for</snippet></ROW><ROW><id>18087628</id><snippet>&gt;&gt;&gt; a=[True, True, False, False]
&gt;&gt;&gt; b=[False, False, False, False]
&gt;&gt;&gt; c=[False, False, False, True]
&gt;&gt;&gt; map(sum, zip(a,b,c))
[1, 1, 0, 1]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18087653</id><snippet>SELECT GROUP_CONCAT(ITEM_CODE) 
FROM table1
GROUP BY ID 
ORDER BY ID;
</snippet></ROW><ROW><id>18087653</id><snippet>1AB,22S,1AB
67R,225
YYF,1AB,UUS,F67,F67,225
</snippet></ROW><ROW><id>18087653</id><snippet>cursor.fetchall()</snippet></ROW><ROW><id>18087653</id><snippet>result = [ split(row, ',') for row in cursor.fetchall()]
</snippet></ROW><ROW><id>18087715</id><snippet>import threading

class Encrypt(threading.Thread):
    def __init__(self, threadNum, asset, window):
        threading.Thread.__init__(self)
        self.threadNum = threadNum
        self.window = window
        self.signal = True

    def run(self):
        while self.signal:
            do_stuff_that_is_cpu_intensive
            for self.path in self.paths: #etc..
</snippet></ROW><ROW><id>18087715</id><snippet>class Frame(wx.Frame):
def __init__(self, *args, **kwargs):
    super(Frame, self).__init__(*args, **kwargs)

    self.InitUI()
    self.Show()
    self.count = 0 # simple thread counter. 
    self.threads = [] # this lets you iterate over your threads if you ever need to

def OnEncrypt(self):
    self.count += 1
    thread = Encrypt(self.count, asset, self)
    self.threads.append(thread)
    thread.start()
</snippet></ROW><ROW><id>18087738</id><snippet>HasResponded</snippet></ROW><ROW><id>18087738</id><snippet>if instance.HasResponded:
    return render(request, 'already-responded.html',)
else:
    instance.HasResponded = True;
    instance.Bool = response
    instance.save()
    return render(request, 'template.html',)
</snippet></ROW><ROW><id>18087847</id><snippet>logging.basicConfig(filename='test.log', format='[%(levelname)s] %(message)s', level=logging.DEBUG)
</snippet></ROW><ROW><id>18087938</id><snippet>HEALTH</snippet></ROW><ROW><id>18087938</id><snippet>health =HEALTH(health)
</snippet></ROW><ROW><id>18087938</id><snippet>HEALTH</snippet></ROW><ROW><id>18087938</id><snippet>health</snippet></ROW><ROW><id>18087938</id><snippet>def HEALTH(health_level):
    health=['''...''']]
    return health[health_level]

print(HEALTH(0))
</snippet></ROW><ROW><id>18087938</id><snippet>def get_health(health_level):
    health=['''...''']
    return health[health_level]
</snippet></ROW><ROW><id>18088159</id><snippet>'application/json'</snippet></ROW><ROW><id>18088159</id><snippet>import json

data = {'start': 13388, 'end': 133885, 'name': 'marcus0.5'}
r = requests.post(url=url, auth=auth, data=json.dumps(data),
                  headers={'content-type': 'application/json'})
</snippet></ROW><ROW><id>18088159</id><snippet>dict</snippet></ROW><ROW><id>18088159</id><snippet>json.dumps</snippet></ROW><ROW><id>18088159</id><snippet>dict</snippet></ROW><ROW><id>18088259</id><snippet>itertools.islice</snippet></ROW><ROW><id>18088259</id><snippet>import re
from itertools import islice
groups = (4, 2, 2, 3, 3, 1)
def FormatPID(in_pid):
    pid_format = re.compile('\d{4}-\d{2}-\d{2}-\d{3}-\d{3}-\d{1}')
    in_pid = in_pid.zfill(15)
    if not pid_format.match(in_pid):
        it = iter(in_pid)
        return '-'.join(''.join(islice(it, i)) for i in groups)
    return in_pid

print FormatPID('1005191000060')
print FormatPID('001005191000060')
print FormatPID('0010-05-19-100-006-0')
</snippet></ROW><ROW><id>18088259</id><snippet>0010-05-19-100-006-0
0010-05-19-100-006-0
0010-05-19-100-006-0
</snippet></ROW><ROW><id>18088275</id><snippet>import json
import os

def append_record(record):
    with open('my_file', 'a') as f:
        json.dump(record, f)
        f.write(os.linesep)

# demonstrate a program writing multiple records
for i in range(10):
    my_dict = {'number':i}
    append_record(my_dict)
</snippet></ROW><ROW><id>18088275</id><snippet>with open('my_file') as f:
    my_list = [json.loads(line) for line in f]
</snippet></ROW><ROW><id>18088275</id><snippet>{"number": 0}
{"number": 1}
{"number": 2}
{"number": 3}
{"number": 4}
{"number": 5}
{"number": 6}
{"number": 7}
{"number": 8}
{"number": 9}
</snippet></ROW><ROW><id>18088310</id><snippet>if somethingBoolean: return True
else: return False
</snippet></ROW><ROW><id>18088310</id><snippet>return somethingBoolean
</snippet></ROW><ROW><id>18088310</id><snippet>def isVowel(x): return x in vowels
</snippet></ROW><ROW><id>18088310</id><snippet>def countvowel(b):
    count = 0
    for a in b:
        if isVowel(a): count += 1
    return count
</snippet></ROW><ROW><id>18088369</id><snippet>fname = 'sample4.txt'
search_phrase = '100'

with open(fname) as fid:
    for linenum, line in enumerate(fid):
        if search_phrase in line:
            break #if the n-th line is interesting, line_num = n-1

#reopen file
with open(fname) as fid:
    for i in xrange(linenum):
        fid.readline() #throw away uninteresting lines
    data = np.loadtxt(fid) #pass file handle

print(data[:3,1].sum()) #interesting stuff is now in first row
</snippet></ROW><ROW><id>18088369</id><snippet>#get linenum as before
data = np.loadtxt(fname, skiprows = linenum)
print(data[:3,1].sum()) #interesting stuff is now in first row
</snippet></ROW><ROW><id>18088518</id><snippet>getcontext</snippet></ROW><ROW><id>18088518</id><snippet>settings.py</snippet></ROW><ROW><id>18088659</id><snippet>regex</snippet></ROW><ROW><id>18088659</id><snippet>str.translate</snippet></ROW><ROW><id>18088659</id><snippet>str.split</snippet></ROW><ROW><id>18088659</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; from string import whitespace
&gt;&gt;&gt; strs = re.search(r'List:(.*)(\s\S*\w+):', ph, re.DOTALL).group(1)
&gt;&gt;&gt; strs.translate(None, ':'+whitespace).split(',')
['username1', 'username2', 'username3', 'username4', 'username5']
</snippet></ROW><ROW><id>18088659</id><snippet>def func(lis):
    return ''.join(lis).translate(None, ':'+whitespace)

lis = [x.split() for x in re.split(r'(?&lt;=\w):',ph.strip(), re.DOTALL)]
dic = {}
for x, y in zip(lis[:-1], lis[1:-1]):
    dic[x[-1]] = func(y[:-1]).split(',')
dic[lis[-2][-1]] = func(lis[-1]).split(',')

print dic['List']
print dic['Members']
print dic['alias']
</snippet></ROW><ROW><id>18088659</id><snippet>['username1', 'username2', 'username3', 'username4', 'username5']
['User1', 'User2', 'User3', 'User4', 'User5']
['tech.sw.host']
</snippet></ROW><ROW><id>18089012</id><snippet>self.assertIn('Edit your profile admin', rv.data, msg=rv.data)
</snippet></ROW><ROW><id>18089012</id><snippet>assertWhatever</snippet></ROW><ROW><id>18089012</id><snippet>assert</snippet></ROW><ROW><id>18089012</id><snippet>unittest</snippet></ROW><ROW><id>18089012</id><snippet>assert</snippet></ROW><ROW><id>18089012</id><snippet>assert</snippet></ROW><ROW><id>18089012</id><snippet>assert 'Edit your profile admin' in rv.data, rv.data
</snippet></ROW><ROW><id>18089089</id><snippet>import wx.lib.inspection
wx.lib.inspection.InspectionTool().Show()
</snippet></ROW><ROW><id>18089313</id><snippet>O(1)</snippet></ROW><ROW><id>18089313</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>18089313</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; total =[['a', 'b', 1.7], ['d', 'e', 6.2], ['a', 'b', 2.0], ['d', 'e', 10.0], ['a', 'b', 3.0], ['d', 'e',7.0]]
&gt;&gt;&gt; dic = defaultdict(list)
&gt;&gt;&gt; for item in total:
        key = tuple(item[:2])  #tuples can be used as dictionary keys
        val = item[2]
        dic[key].append(val)
...     
&gt;&gt;&gt; dic
defaultdict(&lt;type 'list'&gt;,
{('a', 'b'): [1.7, 2.0, 3.0],
 ('d', 'e'): [6.2, 10.0, 7.0]})
</snippet></ROW><ROW><id>18089313</id><snippet>dict</snippet></ROW><ROW><id>18089313</id><snippet>&gt;&gt;&gt; dic = {}
&gt;&gt;&gt; for item in total:
        key = tuple(item[:2])  #tuples can be used as dictionary keys
        val = item[2]
        dic.setdefault(key, []).append(val)
...     
&gt;&gt;&gt; dic
{('a', 'b'): [1.7, 2.0, 3.0], ('d', 'e'): [6.2, 10.0, 7.0]}
</snippet></ROW><ROW><id>18089332</id><snippet>"ph %s return all".split(' ') % (qgroup)
</snippet></ROW><ROW><id>18089332</id><snippet>split()</snippet></ROW><ROW><id>18089332</id><snippet>%</snippet></ROW><ROW><id>18089332</id><snippet>("ph %s return all" % (qgroup)).split(' ') 
</snippet></ROW><ROW><id>18089433</id><snippet>file = client.files().list(q="title='YOUR TITLE'").execute()
</snippet></ROW><ROW><id>18089472</id><snippet>'regionExists': false,
'regionInfo': {
    'country': "A country",
    'sum_information': "Summary information"
}
</snippet></ROW><ROW><id>18089472</id><snippet>result.country</snippet></ROW><ROW><id>18089472</id><snippet>result.regionInfo['country']</snippet></ROW><ROW><id>18090117</id><snippet>df[(1.5 &lt;= df.two) &amp; (df.two &lt;= 3.5)]
</snippet></ROW><ROW><id>18090144</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; urllib.quote("08/15/2013 14:23", safe='')
'08%2F15%2F2013%2014%3A23'
</snippet></ROW><ROW><id>18090433</id><snippet>class MyAdmin(admin.ModelAdmin):
    def save_model(self, request, obj, form, change):
        form.save()
        obj.answer = remote_upload(obj.file.path)
        obj.save()
</snippet></ROW><ROW><id>18090537</id><snippet>import re

def get_path(dct, path):
    for i, p in re.findall(r'(\d+)|(\w+)', path):
        dct = dct[p or int(i)]
    return dct
</snippet></ROW><ROW><id>18090537</id><snippet>value = get_path(data, "xyzzy_rbody.api.items[0].params.bicycle")
</snippet></ROW><ROW><id>18090560</id><snippet>Binary</snippet></ROW><ROW><id>18090560</id><snippet>&gt;&gt;&gt; from pymongo import MongoClient
&gt;&gt;&gt; client = MongoClient('localhost', 27017)
&gt;&gt;&gt; db = client['test-database']
&gt;&gt;&gt; coll = db.test_collection    
&gt;&gt;&gt; # the collection is ready now 
&gt;&gt;&gt; from bson.binary import Binary
&gt;&gt;&gt; import pickle
&gt;&gt;&gt; # create a sample object
&gt;&gt;&gt; myObj = {}
&gt;&gt;&gt; myObj['demo'] = 'Some demo data'
&gt;&gt;&gt; # convert it to the raw bytes
&gt;&gt;&gt; thebytes = pickle.dump(myObj)
&gt;&gt;&gt; coll.insert({'bin-data': Binary(thebytes)})
</snippet></ROW><ROW><id>18090621</id><snippet>for _ in range(_):
    print name1
    print name2
    print value1
    print value2
</snippet></ROW><ROW><id>18090621</id><snippet>values = []
for _ in range(_):
    values.append([name1, name2, value1, value2])
</snippet></ROW><ROW><id>18090621</id><snippet>values = []
for _ in range(_):
    if value2 &gt; value1:
        values.append([name1, name2, value2 - value1])
</snippet></ROW><ROW><id>18090699</id><snippet>open()</snippet></ROW><ROW><id>18090699</id><snippet>fp.read()</snippet></ROW><ROW><id>18090699</id><snippet>socket.socket()</snippet></ROW><ROW><id>18090699</id><snippet>proxysock.connect()</snippet></ROW><ROW><id>18090699</id><snippet>SOCK_STREAM</snippet></ROW><ROW><id>18090699</id><snippet>proxysock.sendall()</snippet></ROW><ROW><id>18090699</id><snippet>proxysock.recv()</snippet></ROW><ROW><id>18090699</id><snippet>proxysock.close()</snippet></ROW><ROW><id>18090699</id><snippet>socket.socket()</snippet></ROW><ROW><id>18090699</id><snippet>proxyserversock.bind()</snippet></ROW><ROW><id>18090699</id><snippet>proxyserversock.listen()</snippet></ROW><ROW><id>18090699</id><snippet>proxyserversock.accept()</snippet></ROW><ROW><id>18090699</id><snippet>clientsock.recv()</snippet></ROW><ROW><id>18090699</id><snippet>open()</snippet></ROW><ROW><id>18090699</id><snippet>fp.write()</snippet></ROW><ROW><id>18090699</id><snippet>socket.socket()</snippet></ROW><ROW><id>18090699</id><snippet>serversock.connect()</snippet></ROW><ROW><id>18090699</id><snippet>SOCK_STREAM</snippet></ROW><ROW><id>18090699</id><snippet>serversock.sendall()</snippet></ROW><ROW><id>18090699</id><snippet>serversock.recv()</snippet></ROW><ROW><id>18090699</id><snippet>clientsock.sendall()</snippet></ROW><ROW><id>18090699</id><snippet>serversock.close()</snippet></ROW><ROW><id>18090699</id><snippet>clientsock.close()</snippet></ROW><ROW><id>18090699</id><snippet>socket.socket()</snippet></ROW><ROW><id>18090699</id><snippet>serversock.bind()</snippet></ROW><ROW><id>18090699</id><snippet>serversock.listen()</snippet></ROW><ROW><id>18090699</id><snippet>serversock.accept()</snippet></ROW><ROW><id>18090699</id><snippet>proxyclientsock.recv()</snippet></ROW><ROW><id>18090699</id><snippet>open()</snippet></ROW><ROW><id>18090699</id><snippet>fp.write()</snippet></ROW><ROW><id>18090699</id><snippet>proxyclientsock.sendall()</snippet></ROW><ROW><id>18090699</id><snippet>proxyclientsock.close()</snippet></ROW><ROW><id>18090840</id><snippet>:</snippet></ROW><ROW><id>18090840</id><snippet>if item.has_responded == True</snippet></ROW><ROW><id>18090840</id><snippet>if item.has_responded == True:
</snippet></ROW><ROW><id>18090840</id><snippet>item.has_responded = False</snippet></ROW><ROW><id>18090840</id><snippet>return</snippet></ROW><ROW><id>18090840</id><snippet>HttpResponse</snippet></ROW><ROW><id>18090840</id><snippet>item.has_responded = False</snippet></ROW><ROW><id>18091102</id><snippet># construct a python dictionary to serialize to JSON later
item = { "name": "Marcus0.1", "start": 500000, "end": 1361640526000 }

resp = requests.post("https://this.is.an.external.domain", 
              data=json.dumps(item),  # serialize the dictionary from above into json
              headers={
                       "Content-Type":"application/json",
                       "Accept": "application/json"
                      })

print resp.status_code
print resp.content
</snippet></ROW><ROW><id>18091151</id><snippet>self</snippet></ROW><ROW><id>18091151</id><snippet>.__get__()</snippet></ROW><ROW><id>18091151</id><snippet>def hello1(self):
    print(self.name,"says hi")

def hello2(self):
    print(self.name,"says hello")

class A:
    def __init__(self, name, opt=0):
        if opt == 1:
            setattr(self, 'hello', hello1.__get__(self, type(self))
        else:
            setattr(self, 'hello', hello2.__get__(self, type(self)))
</snippet></ROW><ROW><id>18091151</id><snippet>.__get__()</snippet></ROW><ROW><id>18091306</id><snippet>python manage.py runserver 0.0.0.0:$PORT collectstatic --noinput</snippet></ROW><ROW><id>18091306</id><snippet>python manage.py runserver 0.0.0.0:$PORT</snippet></ROW><ROW><id>18091306</id><snippet>python manage.py collectstatic --noinput</snippet></ROW><ROW><id>18091306</id><snippet>runserver</snippet></ROW><ROW><id>18091306</id><snippet>collectstatic</snippet></ROW><ROW><id>18091313</id><snippet>ConfigParser</snippet></ROW><ROW><id>18091313</id><snippet>files = ['test1.ini', 'test2.ini']
dataset = config.read('test.ini')
if len(dataset) != len(files):
    raise ValueError, "Failed to open/find all files"
</snippet></ROW><ROW><id>18091356</id><snippet>textbox</snippet></ROW><ROW><id>18091356</id><snippet>Tkinter</snippet></ROW><ROW><id>18091356</id><snippet>comp.lang.python</snippet></ROW><ROW><id>18091356</id><snippet>stderr</snippet></ROW><ROW><id>18091356</id><snippet>stderr</snippet></ROW><ROW><id>18091356</id><snippet>errorwindow</snippet></ROW><ROW><id>18091356</id><snippet>stderr</snippet></ROW><ROW><id>18091356</id><snippet>stdout</snippet></ROW><ROW><id>18091356</id><snippet>stdout</snippet></ROW><ROW><id>18091356</id><snippet>OutputPipe</snippet></ROW><ROW><id>18091356</id><snippet>import</snippet></ROW><ROW><id>18091356</id><snippet>sys.stdout</snippet></ROW><ROW><id>18091356</id><snippet>sys.stderr</snippet></ROW><ROW><id>18091356</id><snippet>None</snippet></ROW><ROW><id>18091356</id><snippet>.pyw</snippet></ROW><ROW><id>18091356</id><snippet>stdin</snippet></ROW><ROW><id>18091356</id><snippet>stdout</snippet></ROW><ROW><id>18091356</id><snippet>stderr</snippet></ROW><ROW><id>18091356</id><snippet>textbox</snippet></ROW><ROW><id>18091356</id><snippet># references:
#   https://groups.google.com/d/msg/comp.lang.python/HWPhLhXKUos/TpFeWxEE9nsJ
#   https://groups.google.com/d/msg/comp.lang.python/HWPhLhXKUos/eEHYAl4dH9YJ
#
#   Here's a module to show stderr output from console-less Python
#   apps, and stay out of the way otherwise. I plan to make a ASPN
#   recipe of it, but I thought I'd run it by this group first.
#
#   To use it, import the module. That's it. Upon import it will
#   assign sys.stderr.
#
#   In the normal case, your code is perfect so nothing ever gets
#   written to stderr, and the module won't do much of anything.
#   Upon the first write to stderr, if any, the module will launch a
#   new process, and that process will show the stderr output in a
#   window. The window will live until dismissed; I hate, hate, hate
#   those vanishing-consoles-with-critical-information.
#
#   The code shows some arguably-cool tricks. To fit everthing in
#   one file, the module runs the Python interpreter on itself; it
#   uses the "if __name__ == '__main__'" idiom to behave radically
#   differently upon import versus direct execution. It uses TkInter
#   for the window, but that's in a new process; it does not import
#   TkInter into your application.
#
#   To try it out, save it to a file -- I call it "errorwindow.py" -
#   - and import it into some subsequently-incorrect code. For
#   example:
#
#        import errorwindow
#
#        a = 3 + 1 + nonesuchdefined
#
#   should cause a window to appear, showing the traceback of a
#   Python NameError.
#
#   --
#   --Bryan
#   ----------------------------------------------------------------
#
#   martineau - Modified to use subprocess.Popen instead of the os.popen
#               which has been deprecated since Py 2.6. Changed so it
#               redirects both stdout and stderr. Added numerous
#               comments, and also inserted double quotes around paths
#               in case they have embedded space characters in them, as
#               they did on my Windows system.

"""
    Import this module into graphical Python apps to provide a
    sys.stderr. No functions to call, just import it. It uses
    only facilities in the Python standard distribution.

    If nothing is ever written to stderr, then the module just
    sits there and stays out of your face. Upon write to stderr,
    it launches a new process, piping it error stream. The new
    process throws up a window showing the error messages.
"""
import subprocess
import sys
import thread
import os

if __name__ == '__main__':  # when spawned as separate process
    # create window in which to display output
    # then copy stdin to the window until EOF
    # will happen when output is sent to each OutputPipe created
    from Tkinter import BOTH, END, Frame, Text, TOP, YES
    import tkFont
    import Queue

    queue = Queue.Queue(100)

    def read_stdin(app, bufsize=4096):
        fd = sys.stdin.fileno()  # gets file descriptor
        read = os.read
        put = queue.put
        while True:
            put(read(fd, bufsize))

    class Application(Frame):
        def __init__(self, master=None, font_size=8, text_color='#0000AA', rows=25, cols=100):
            Frame.__init__(self, master)
            # argv[0]: name of this script (not used)
            # argv[1]: name of script that imported this module
            # argv[2]: name of redirected stream (optional)
            if len(sys.argv) &lt; 3:
                title = "Output Stream from %s" % (sys.argv[1],)
            else:
                title = "Output Stream '%s' from %s" % (sys.argv[2], sys.argv[1])
            self.master.title(title)
            self.pack(fill=BOTH, expand=YES)
            font = tkFont.Font(family='Courier', size=font_size)
            width = font.measure(' '*(cols+1))
            height = font.metrics('linespace')*(rows+1)
            self.configure(width=width, height=height)
            self.pack_propagate(0)  # force frame to be configured size
            self.logwidget = Text(self, font=font)
            self.logwidget.pack(side=TOP, fill=BOTH, expand=YES)
            # Disallow key entry, but allow copy with &lt;Control-c&gt;
            self.logwidget.bind('&lt;Key&gt;', lambda x: 'break')
            self.logwidget.bind('&lt;Control-c&gt;', lambda x: None)
            self.logwidget.configure(foreground=text_color)
            #self.logwidget.insert(END, '==== Start of Output Stream ====\n\n')
            #self.logwidget.see(END)
            self.after(200, self.start_thread, ())

        def start_thread(self, _):
            thread.start_new_thread(read_stdin, (self,))
            self.after(200, self.check_q, ())

        def check_q(self, _):
            log = self.logwidget
            log_insert = log.insert
            log_see = log.see
            queue_get_nowait = queue.get_nowait
            go = True
            while go:
                try:
                    data = queue_get_nowait()
                    if not data:
                        data = '[EOF]'
                        go = False
                    log_insert(END, data)
                    log_see(END)
                except Queue.Empty:
                    self.after(200, self.check_q, ())
                    go = False

    app = Application()
    app.mainloop()

else: # when module is first imported
    import traceback
    class OutputPipe(object):
        def __init__(self, name=''):
            self.lock = thread.allocate_lock()
            self.name = name

        def __getattr__(self, attr):
            if attr == 'pipe':  # pipe attribute hasn't been created yet
                # launch this module as a separate process to display any output
                # it receives.
                # Note: It's important to put double quotes around everything in case
                # they have embedded space characters.
                command = '"%s" "%s" "%s" "%s"' % (sys.executable,                # command
                                                   __file__,                      # argv[0]
                                                   os.path.basename(sys.argv[0]), # argv[1]
                                                   self.name)                     # argv[2]

                # sample command and arg values on receiving end:
                #   E:\Program Files\Python\python[w].exe                         # command
                #   H:\PythonLib\TestScripts\PyRemindWrk\errorwindow.py           # argv[0]
                #   errorwindow.py                                                # argv[1]
                #   stderr                                                        # argv[2]

                # execute this script as __main__ with a stdin PIPE for sending output to it
                try:
                    # had to make stdout and stderr PIPEs too, to make it work with pythonw.exe
                    self.pipe = subprocess.Popen(command, bufsize=0,
                                                 stdin=subprocess.PIPE,
                                                 stdout=subprocess.PIPE,
                                                 stderr=subprocess.PIPE).stdin
                except Exception:
                    # output exception info to a file since this module isn't working
                    exc_type, exc_value, exc_traceback = sys.exc_info()
                    msg = ('%r exception in %s\n' %
                            (exc_type.__name__, os.path.basename(__file__)))
                    with open('exc_info.txt', 'wt') as info:
                        info.write('msg:' + msg)
                        traceback.print_exc(file=info)
                    sys.exit('fatal error occurred spawning output process')

            return super(OutputPipe, self).__getattribute__(attr)

        def write(self, data):
            with self.lock:
                self.pipe.write(data)  # 1st reference to pipe attr will cause it to be created

    # redirect standard output streams in the process importing the module
    sys.stderr = OutputPipe('stderr')
    sys.stdout = OutputPipe('stdout')
</snippet></ROW><ROW><id>18091375</id><snippet>from xml.etree import ElementTree as et
t1 = et.parse('test1.xml')
t2 = et.parse('test2.xml')
t2.find('your/element').append(t1.getroot())
t2.write('test3.xml')
</snippet></ROW><ROW><id>18091375</id><snippet>In [1]: from xml.etree import ElementTree as et
In [2]: !cat test1.xml
&lt;el1&gt;
  &lt;el2&gt;&lt;/el2&gt;
&lt;/el1&gt;
In [3]: !cat test2.xml
&lt;foo&gt;
  &lt;bar&gt;
  &lt;/bar&gt;
&lt;/foo&gt;
In [4]: t1 = et.parse('test1.xml')
In [5]: t2 = et.parse('test2.xml')
In [6]: t2.find('bar').append(t1.getroot())
In [7]: t2.write('test3.xml')    
In [8]: !cat test3.xml
&lt;foo&gt;
  &lt;bar&gt;
  &lt;el1&gt;
  &lt;el2 /&gt;
&lt;/el1&gt;&lt;/bar&gt;
&lt;/foo&gt;
</snippet></ROW><ROW><id>18091784</id><snippet>Class SECHeader(object):
    def __init__(self,header_path):
        self.header_path = header_path # Instantiate a variable for class object
        self.header = open(header_path).read()

    def parsed_name(self):
        return self.header_path.split('-')[-1] # Call the associated variable
</snippet></ROW><ROW><id>18091784</id><snippet>for banana in header_paths:
    header = SECHeader(banana)
    print header.parsed_name()

Class SECHeader(object):
    def __init__(self,header_path): # header_path takes value of banana
                                    # and ends scope in __init__
        self.header = open(header_path).read()

    def parsed_name(self):
        return banana.split('-')[-1] # banana was passed to class and is known
</snippet></ROW><ROW><id>18091850</id><snippet>loadtxt</snippet></ROW><ROW><id>18091850</id><snippet>str</snippet></ROW><ROW><id>18091850</id><snippet>unicode</snippet></ROW><ROW><id>18091850</id><snippet>filenames = map(str, filenames)
</snippet></ROW><ROW><id>18091850</id><snippet>filenames = map(lambda f: f.encode('utf-8'), filenames)
</snippet></ROW><ROW><id>18091850</id><snippet>def safe_str(s):
    if isinstance(s, unicode):
        return s.encode('utf-8')
    return s
filenames = map(safe_str, filenames)
</snippet></ROW><ROW><id>18092030</id><snippet>import math, random

def updatebins(bins, binsize, x):
    i = math.floor(x / binsize)
    if i in bins:
        bins[i] += 1
    else:
        bins[i] = 1

def finalizebins(bins, binsize):
    imin = min(bins.keys())
    imax = max(bins.keys())
    a = [0] * (imax - imin + 1)
    b = [binsize * k for k in range(imin, imax + 1)]
    for i in range(imin, imax + 1):
        if i in bins:
            a[i - imin] = bins[i]
    return a, b

# A test with a mixture of gaussian distributions

def check(n):
    bins = {}
    binsize = 5.0
    for i in range(n):
        if random.random() &gt; 0.5:
            x = random.gauss(100, 50)
        else:
            x = random.gauss(-200, 150)
        updatebins(bins, binsize, x)
    return finalizebins(bins, binsize)

a, b = check(10000)

# This must be 10000
sum(a)

# Plot the data
from matplotlib.pyplot import *
bar(b,a)
show()
</snippet></ROW><ROW><id>18092080</id><snippet>b = pexpect.spawn("bash -c 'whoami;users'")
</snippet></ROW><ROW><id>18092080</id><snippet>b.expect('root\r\nroot user2')
</snippet></ROW><ROW><id>18092597</id><snippet>collections</snippet></ROW><ROW><id>18092597</id><snippet>Counter</snippet></ROW><ROW><id>18092597</id><snippet>from collections import Counter
common = Counter(yourList).most_common()
min = common[0][1]
print "Minimum Occurrence Number: {0}".format(min)
print "Codes that Occur this much:"
for item in common:
    if item[1] != min:
        break
    print item[0]
max = common[-1][1]
print "Maximum Occurrence Number: {0}".format(max)
print "Codes that Occur this much:"
for item in reversed(common):
    if item[1] != max:
        break
    print item[0]
</snippet></ROW><ROW><id>18092898</id><snippet>re</snippet></ROW><ROW><id>18092898</id><snippet>def get_variable_and_sizes(var_string):
    result = re.search(r'(.*?)((?:\[\d*])*)$', var_string)
    var_name = result.group(1)
    numbers = re.findall(r'\[(\d+)]', result.group(2))
    return [var_name] + numbers
</snippet></ROW><ROW><id>18092898</id><snippet>findall</snippet></ROW><ROW><id>18093019</id><snippet>&gt;&gt;&gt; alist = ['username1,username2', 'username3','username4,username5']
&gt;&gt;&gt; ','.join(alist).split(',')
['username1', 'username2', 'username3', 'username4', 'username5']
</snippet></ROW><ROW><id>18093019</id><snippet>list</snippet></ROW><ROW><id>18093217</id><snippet>re.sub</snippet></ROW><ROW><id>18093217</id><snippet>$</snippet></ROW><ROW><id>18093217</id><snippet>target = '''
LINCOLN STREET
CHESTNUT ST
CHISHOLM TR
LAKE TRAIL
CHISHOLM TRAIL
COVERED WAGON TRL
'''

import re
print re.sub('\s+(STREET|ST|TRAIL|TRL|TR)\s*$', '', target, flags=re.M)
</snippet></ROW><ROW><id>18093220</id><snippet>&gt;&gt;&gt; a=np.ones(1000,dtype=np.float128)+1E-14 
&gt;&gt;&gt; (a*a).sum()  
1000.0000000000199948
&gt;&gt;&gt; np.dot(a,a)
1000.0000000000199948
</snippet></ROW><ROW><id>18093220</id><snippet>&gt;&gt;&gt; a=np.ones(1000,dtype=np.float64)+1E-14
&gt;&gt;&gt; np.dot(a,a)
1000.0000000000176  #off by 2.3948e-12
&gt;&gt;&gt; (a*a).sum()
1000.0000000000059  #off by 1.40948e-11
</snippet></ROW><ROW><id>18093220</id><snippet>np.dot(a, a)</snippet></ROW><ROW><id>18093220</id><snippet>(a*a).sum()</snippet></ROW><ROW><id>18093220</id><snippet>rn</snippet></ROW><ROW><id>18093220</id><snippet>x = 1.0008
x2 = 1.00160064                    #    true value
rn(x2 − 1) = 1.6006 × 10−4         #    fused multiply-add
rn(rn(x2) − 1) = 1.6000 × 10−4     #    multiply, then add
</snippet></ROW><ROW><id>18093220</id><snippet>np.dot(a,a)</snippet></ROW><ROW><id>18093220</id><snippet>out=0
for x in a:
    out=rn(x*x+out)   #Fused multiply add
</snippet></ROW><ROW><id>18093220</id><snippet>(a*a).sum()</snippet></ROW><ROW><id>18093220</id><snippet>arr=np.zeros(a.shape[0])   
for x in range(len(arr)):
    arr[x]=rn(a[x]*a[x])

out=0
for x in arr:
    out=rn(x+out)
</snippet></ROW><ROW><id>18093220</id><snippet>(a*a).sum()</snippet></ROW><ROW><id>18093220</id><snippet>np.dot(a,a)</snippet></ROW><ROW><id>18093257</id><snippet>    import csv
    file = open('Path_to_file','rb')
    for record in csv.DictReader(file):
        print record['Column_Name']
</snippet></ROW><ROW><id>18093280</id><snippet>s='N=1,E=4,S=7'
dict(t.split('=') for t in s.split(','))
</snippet></ROW><ROW><id>18093280</id><snippet>ints</snippet></ROW><ROW><id>18093280</id><snippet>dict((a,int(b)) for a,b in (t.split('=') for t in s.split(',')))
</snippet></ROW><ROW><id>18093369</id><snippet>&gt;&gt;&gt; Decimal(0.1)
Decimal('0.1000000000000000055511151231257827021181583404541015625')
&gt;&gt;&gt; Decimal(0.2)
Decimal('0.200000000000000011102230246251565404236316680908203125')
&gt;&gt;&gt; Decimal(0.3)
Decimal('0.299999999999999988897769753748434595763683319091796875')
&gt;&gt;&gt; Decimal(0.4)
Decimal('0.40000000000000002220446049250313080847263336181640625')
&gt;&gt;&gt; Decimal(0.5)
Decimal('0.5')
</snippet></ROW><ROW><id>18093369</id><snippet>decimal</snippet></ROW><ROW><id>18093369</id><snippet>from decimal import Decimal

def plus(n):
    return n + Decimal('10') ** n.as_tuple().exponent
</snippet></ROW><ROW><id>18093369</id><snippet>&gt;&gt;&gt; n = Decimal('0.1239')
&gt;&gt;&gt; plus(n)
Decimal('0.1240')
</snippet></ROW><ROW><id>18093369</id><snippet>Decimal</snippet></ROW><ROW><id>18093369</id><snippet>plus</snippet></ROW><ROW><id>18093541</id><snippet>print trip_cost('Tampa', 10)
</snippet></ROW><ROW><id>18093541</id><snippet>print</snippet></ROW><ROW><id>18093541</id><snippet>raw_input</snippet></ROW><ROW><id>18093541</id><snippet>plane_ride_cost(city)</snippet></ROW><ROW><id>18093541</id><snippet>0</snippet></ROW><ROW><id>18094316</id><snippet>import boto
print boto.__file__
</snippet></ROW><ROW><id>18094316</id><snippet>/usr/lib/python2.7/dist-packages/boto/__init__.pyc</snippet></ROW><ROW><id>18094316</id><snippet>import boto
print boto.__version__
</snippet></ROW><ROW><id>18094383</id><snippet>'break'</snippet></ROW><ROW><id>18094383</id><snippet>&lt;Return&gt;</snippet></ROW><ROW><id>18094383</id><snippet>def getCommand(*args):
    global text
    x_pos = text.xview()[0]
    y_pos = text.yview()[0]
    command = text.get('insert linestart', 'insert').replace('command&gt;', '', 1)
    print command
    text.insert(END, "\n")
    text.insert(END, "command&gt;")
    return 'break'
</snippet></ROW><ROW><id>18094405</id><snippet>csv</snippet></ROW><ROW><id>18094405</id><snippet>with open("C:\\blahblah5.csv", "w", newline="") as fout:
</snippet></ROW><ROW><id>18094405</id><snippet>False,False,False,False,False,False
False,False,False,False,False,True
False,False,False,False,True,False
[etc.]
</snippet></ROW><ROW><id>18094409</id><snippet>&gt;&gt;&gt; words = ['hello,','i','am','ROB','ALSOD']
&gt;&gt;&gt; [word[:1].upper() + word[1:] for word in words]
['Hello,', 'I', 'Am', 'ROB', 'ALSOD']
</snippet></ROW><ROW><id>18094409</id><snippet>word[:1]</snippet></ROW><ROW><id>18094409</id><snippet>word[0]</snippet></ROW><ROW><id>18094409</id><snippet>''</snippet></ROW><ROW><id>18094437</id><snippet>numpy.poly1d</snippet></ROW><ROW><id>18094437</id><snippet>numpy.polymul</snippet></ROW><ROW><id>18094437</id><snippet>a0*x2 + a1*x + a2</snippet></ROW><ROW><id>18094437</id><snippet>3*x**2 + 2*x + 1</snippet></ROW><ROW><id>18094437</id><snippet>p1 = numpy.poly1d([3,2,1])
</snippet></ROW><ROW><id>18094437</id><snippet>poly1d</snippet></ROW><ROW><id>18094437</id><snippet>*</snippet></ROW><ROW><id>18094437</id><snippet>/</snippet></ROW><ROW><id>18094437</id><snippet>print p1*p1
#   4      3      2
#9 x + 12 x + 10 x + 4 x + 1
</snippet></ROW><ROW><id>18094437</id><snippet>a0 + a1*x + a2*x**2 + ...</snippet></ROW><ROW><id>18094437</id><snippet>def eval_polynomial(p,x):
    return sum((a*x**i for i,a in enumerate(p)))

def multiply_by_one_term(p, a, k):
    return [0]*k + [a*i for i in p]
</snippet></ROW><ROW><id>18094565</id><snippet>collections</snippet></ROW><ROW><id>18094565</id><snippet>Counter</snippet></ROW><ROW><id>18094565</id><snippet>from collections import Counter
common = Counter(yourList).items()
average = [(a, float(b) / len(common)) for (a,b) in common]
</snippet></ROW><ROW><id>18094565</id><snippet>&gt;&gt;&gt; average
[('AA11', 0.5), ('AA33', 0.25), ('AA22', 0.25), ('AA44', 0.5)]
</snippet></ROW><ROW><id>18094775</id><snippet>raw_input</snippet></ROW><ROW><id>18094775</id><snippet>int()</snippet></ROW><ROW><id>18094775</id><snippet>a = int(raw_input("please enter number: "))
</snippet></ROW><ROW><id>18094775</id><snippet>&gt;&gt;&gt; "12"*10             # This is what your code is doing
'12121212121212121212'

&gt;&gt;&gt; int("12")*10        # Expected output
120
</snippet></ROW><ROW><id>18094876</id><snippet>top = Tk()
E1 = Entry(top, bd =5)
E1.insert(0, "User Name")
E1.pack(side = RIGHT)
top.mainloop()
</snippet></ROW><ROW><id>18094953</id><snippet>def trend(self):
    range_start = self.time_measured.minute - timedelta(minute=10)
    data = Data.objects.filter(time_measured__minute__gt=range_start)
return float(data_operation(data))
</snippet></ROW><ROW><id>18094994</id><snippet>an_item</snippet></ROW><ROW><id>18094994</id><snippet>table_all.where("letters == an_item")</snippet></ROW><ROW><id>18094994</id><snippet>table_all.where("letters == %s" % an_item)</snippet></ROW><ROW><id>18094994</id><snippet>row_selected = [ table_all.readWhere("(letters == %s) &amp; (numbers == %s)" % (l, n) ) for l in my_list1 for n in my_list2 ]</snippet></ROW><ROW><id>18095011</id><snippet>points = ( (0,0,0), (0,1,0), (0,2,0), (0,3,0) ) # ... etc.  
cmds.curve(p = points, d = 1)
</snippet></ROW><ROW><id>18095011</id><snippet>a = ( (0,0,0), (0,1,0), (0,2,0) ) 
b = ( (1,0,1), (1,0, 2), (1,0,3))
c = [] 
for idx in range (0, 3):
    c.append(a[idx])
    c.append(b[idx])
cmds.curve(p = c, d= 1) 
</snippet></ROW><ROW><id>18095085</id><snippet>id</snippet></ROW><ROW><id>18095085</id><snippet>url(r'^articles/(?P&lt;id&gt;\d+)/edit/$', 'views.article_edit', name = 'article_edit'),
</snippet></ROW><ROW><id>18095085</id><snippet>id</snippet></ROW><ROW><id>18095085</id><snippet>def article_edit(request, id):
    if request.method == 'POST': # If the form has been submitted...
        article = get_object_or_404(Article, pk=id)
</snippet></ROW><ROW><id>18095388</id><snippet>    #Update and redraw methods for both
    theship.clear(window, background)
    theship.update(window)
    theship.draw(window)
    pointer.clear(window, background)
    pointer.update()
    pointer.draw(window)
    pygame.display.flip()
</snippet></ROW><ROW><id>18095388</id><snippet>    #Update and redraw methods for both
    theship.clear(window, background)
    pointer.clear(window, background)
    theship.update(window)
    pointer.update()
    theship.draw(window)
    pointer.draw(window)
    pygame.display.flip()
</snippet></ROW><ROW><id>18096060</id><snippet>line_buffer</snippet></ROW><ROW><id>18096060</id><snippet>import sys
coll_file = open(sys.argv[1]).readlines()
old_pattern = ''
line_buffer = []
pattern_count = 0

for lines in coll_file:
    lines = lines.rstrip('\n')
    split_line = lines.split(' ')
    pattern = split_line[0]
    if pattern == old_pattern:
        pattern_count = pattern_count + 1
        line_buffer.append(lines)
    elif pattern != old_pattern:
        old_pattern = pattern
        if pattern_count &gt;= 5:
            print '\n'.join(line_buffer)
        line_buffer = []
        pattern_count = 1
if pattern_count &gt;= 5:
    print '\n'.join(line_buffer)
</snippet></ROW><ROW><id>18096745</id><snippet>import ctypes
ctypes.windll.user32.LockWorkStation()
</snippet></ROW><ROW><id>18096947</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>18096947</id><snippet>import ast
filecontent = ast.literal_eval(filename.read().strip())
</snippet></ROW><ROW><id>18096947</id><snippet>name, weeks_worked, weekly_payment = filecontent
</snippet></ROW><ROW><id>18097181</id><snippet>str.replace</snippet></ROW><ROW><id>18097181</id><snippet>&gt;&gt;&gt; s = 'suppose_name_1'
&gt;&gt;&gt; index = s.rfind('_')  # Last index of '_'
&gt;&gt;&gt; s.replace(s[index+1:], str(int(s[index+1:]) + 1))
'suppose_name_2'
</snippet></ROW><ROW><id>18097181</id><snippet>str.isdigit()</snippet></ROW><ROW><id>18097181</id><snippet>&gt;&gt;&gt; s = 'suppose_name'
&gt;&gt;&gt; 
&gt;&gt;&gt; index = s.rfind('_')
&gt;&gt;&gt; if s[index+1:].isdigit():
        s = s.replace(s[index+1:], str(int(s[index+1:]) + 1))


&gt;&gt;&gt; s
'suppose_name'
</snippet></ROW><ROW><id>18097514</id><snippet>&gt;&gt;&gt; res = re.findall('"(\w+)"', s)
&gt;&gt;&gt; i = iter(res)
&gt;&gt;&gt; dict(zip(*[i]*2))
{'status': 'Active', 'companyname': 'test', 'validdomain': 'test', 'md5hash': '501yd361fe10644ea1184412c3e89dce', 'regdate': 'registeredname', 'TestName': 'serviceid', 'email': 'productid', 'billingcycle': 'OneTime', 'validip': 'validdirectory', '8': 'nextduedate', 'productname': 'SomeProduct', 'checkdate': '20130807'}
</snippet></ROW><ROW><id>18097514</id><snippet>&gt;&gt;&gt; res = re.findall('"(\w+)"(?:.*?)"(\w+)"', s)
&gt;&gt;&gt; res
[('status', 'Active'), ('checkdate', '20130807'), ('companyname', 'test'), ('validdomain', 'test'), ('md5hash', '501yd361fe10644ea1184412c3e89dce'), ('regdate', 'registeredname'), ('TestName', 'serviceid'), ('8', 'nextduedate'), ('billingcycle', 'OneTime'), ('validip', 'validdirectory'), ('productname', 'SomeProduct'), ('email', 'productid')]
&gt;&gt;&gt; dict(res)
{'status': 'Active', 'companyname': 'test', 'validdomain': 'test', 'md5hash': '501yd361fe10644ea1184412c3e89dce', 'regdate': 'registeredname', 'TestName': 'serviceid', 'email': 'productid', 'billingcycle': 'OneTime', 'validip': 'validdirectory', '8': 'nextduedate', 'productname': 'SomeProduct', 'checkdate': '20130807'}
</snippet></ROW><ROW><id>18097645</id><snippet>MSG</snippet></ROW><ROW><id>18097645</id><snippet>MSG = {'fromEMAIL': uEmail, 'toCHANNELID': channelID, 'timeSENT': uTime}
try:
    MSG['profilePIC'] = instaINFO['data']['user']['profile_picture']
except TypeError:
    MSG['profilePIC'] = ""
try:
    MSG['userNAME'] = instaINFO['data']['user']['username']
except TypeError:
    MSG['userNAME'] = ""
try:
    MSG['msgBODY'] = instaINFO['data']['caption']['text']
except TypeError:
    MSG['msgBODY'] = ""
</snippet></ROW><ROW><id>18097645</id><snippet>MSG = {'fromEMAIL': uEmail, 'toCHANNELID': channelID, 'timeSENT': uTime}
for mkey, subdict, ikey in (('profilePIC', 'user', 'profile_picture'), 
                            ('userNAME', 'user', 'username'),
                            ('msgBODY', 'cpation', 'text')):
    try:
        MSG[msgkey] = instaINFO['data'][subdict][instakey]
    except TypeError:
        MSG[msgkey] = ""
</snippet></ROW><ROW><id>18098130</id><snippet>import random
num = random.randint(0, 4)
context['showItem'] = True if num &lt;= 1 else False
</snippet></ROW><ROW><id>18098130</id><snippet>random</snippet></ROW><ROW><id>18098130</id><snippet>randint</snippet></ROW><ROW><id>18098131</id><snippet>&gt;&gt;&gt; range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; range(5, 10)
&gt;[5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>18098131</id><snippet>for i in range(0,4):
    for j in range(6,9):
         totalSum+=matrix[i][j]
</snippet></ROW><ROW><id>18098148</id><snippet>root.findall('.//probe[@kind="condition"][@event="full"]')
</snippet></ROW><ROW><id>18098148</id><snippet>&gt;&gt;&gt; s
'&lt;src name="BdsBoot.c"&gt;\n        &lt;fn name="XXXXX" fn_cov="0" fn_total="1" cd_cov="0" cd_total="4"&gt;\n           &lt;probe line="113" kind="condition" event="full"/&gt;\n           &lt;probe line="122" column="10" kind="condition" event="none" /&gt;\n           &lt;probe line="124" column="9" kind="condition" event="full" /&gt;\n        &lt;/fn&gt;\n   &lt;/src&gt;'
&gt;&gt;&gt; root = ET.fromstring(s)
&gt;&gt;&gt; root.findall('.//probe[@kind="condition"]')
[&lt;Element 'probe' at 0x7f8a5146ce10&gt;, &lt;Element 'probe' at 0x7f8a5146ce50&gt;, &lt;Element 'probe' at 0x7f8a5146ce90&gt;]
&gt;&gt;&gt; root.findall('.//probe[@kind="condition"][@event="full"]')
[&lt;Element 'probe' at 0x7f8a5146ce10&gt;, &lt;Element 'probe' at 0x7f8a5146ce90&gt;]
</snippet></ROW><ROW><id>18098201</id><snippet>unittest.skipIf</snippet></ROW><ROW><id>18098201</id><snippet>unittest.skipUnless</snippet></ROW><ROW><id>18098201</id><snippet>import os

@unittest.skipUnless(os.getuid() == 0)  # Root has an uid of 0
def test_bla_as_root(self):
    ...
</snippet></ROW><ROW><id>18098201</id><snippet>@unittest.skipIf(os.getuid())
</snippet></ROW><ROW><id>18098373</id><snippet>globals()</snippet></ROW><ROW><id>18098373</id><snippet>locals()</snippet></ROW><ROW><id>18098373</id><snippet>&gt;&gt;&gt; g = globals()
&gt;&gt;&gt; for i in range(1, 5):
...     g['depth_{0}'.format(i)] = []
... 
&gt;&gt;&gt; depth_1
[]
&gt;&gt;&gt; depth_2
[]
&gt;&gt;&gt; depth_3
[]
&gt;&gt;&gt; depth_4
[]
&gt;&gt;&gt; depth_5
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'depth_5' is not defined
</snippet></ROW><ROW><id>18098373</id><snippet>&gt;&gt;&gt; depths = [[] for i in range(4)]
&gt;&gt;&gt; depths
[[], [], [], []]
</snippet></ROW><ROW><id>18098715</id><snippet>csv</snippet></ROW><ROW><id>18098715</id><snippet>import csv

with open(A, 'rb') as file_a:
    selected = {tuple(row[:2]) for row in csv.reader(file_a)}

with open(B, 'rb') as file_b, open(C, 'wb') as file_c:
    reader = csv.reader(file_b)
    writer = csv.writer(file_c)
    writer.writerows(row for row in reader if tuple(row[:2]) in selected)
</snippet></ROW><ROW><id>18098721</id><snippet>obj</snippet></ROW><ROW><id>18098927</id><snippet>date.strftime()</snippet></ROW><ROW><id>18098927</id><snippet>difference.strftime('%Y%m%d')
</snippet></ROW><ROW><id>18098927</id><snippet>&gt;&gt;&gt; from datetime import date
&gt;&gt;&gt; difference = date.today()
&gt;&gt;&gt; difference.strftime('%Y%m%d')
'20130807'
</snippet></ROW><ROW><id>18098927</id><snippet>date</snippet></ROW><ROW><id>18098927</id><snippet>%02d</snippet></ROW><ROW><id>18098927</id><snippet>localexpiry = '%04d%02d%02d' % (difference.year, difference.month, difference.day)
</snippet></ROW><ROW><id>18098927</id><snippet>date.strftime()</snippet></ROW><ROW><id>18099067</id><snippet>while True:
    parent_thread.join(interval)
    if not parent_thread.is_alive():
        break
    do_something()
</snippet></ROW><ROW><id>18099248</id><snippet>now = datetime.datetime(2013,08,07)
str_now = now.date().isoformat()
</snippet></ROW><ROW><id>18099496</id><snippet>from bs4 import BeautifulSoup
import paramiko

ssh = paramiko.SSHClient()
ssh.load_system_host_keys()
ssh.connect('example.com', username='Oli', look_for_keys=True, timeout=5)

stdin, stdout, stderr = ssh.exec_command('/usr/bin/wget -qO- "%s"' % url)
soup = BeautifulSoup(stdout)

ssh.close()
</snippet></ROW><ROW><id>18099593</id><snippet>    void Foo_bar(Foo* foo){ foo-&gt;bar(int number); }
</snippet></ROW><ROW><id>18099593</id><snippet>int number</snippet></ROW><ROW><id>18099593</id><snippet>Foo_bar</snippet></ROW><ROW><id>18099593</id><snippet>    void Foo_bar(Foo* foo, int number){ foo-&gt;bar(number); }
</snippet></ROW><ROW><id>18099593</id><snippet>def bar(self, number):
    lib.Foo_bar(self.obj, number)
</snippet></ROW><ROW><id>18099627</id><snippet>from sets import Set

class MySet(Set):

    def __init__(self, iter, klass=None):
        if klass is not None:
            for item in iter:
                if not isinstance(item, klass):
                    raise Exception("Error")
        super(MySet, self).__init__(iter) 


if __name__ == '__main__':

    set1 = MySet([1,2,3], int)
    set2 = MySet([2,3,4], int)

    print set2.intersection(set1)
</snippet></ROW><ROW><id>18099627</id><snippet>intersection</snippet></ROW><ROW><id>18099627</id><snippet>self.__class__(common)</snippet></ROW><ROW><id>18099749</id><snippet>b = []
if float(i.split()[0]) &lt; float(b[0]):
                              #^ b is an empty list, b[0] will raise that error
</snippet></ROW><ROW><id>18099749</id><snippet>&gt;&gt;&gt; max(x.split(","), key=lambda x: float(x.split()[0]))
' 83.0 (BMOAD_4832)'
</snippet></ROW><ROW><id>18099788</id><snippet>class TextTestResult(result.TestResult):
    """A test result class that can print formatted text results to a stream.

    Used by TextTestRunner.
    """
    separator1 = '=' * 70
    separator2 = '-' * 70

    def __init__(self, stream, descriptions, verbosity):
        super(TextTestResult, self).__init__()
        self.stream = stream
        self.showAll = verbosity &gt; 1
        self.dots = verbosity == 1
        self.descriptions = descriptions
</snippet></ROW><ROW><id>18099788</id><snippet>descriptions</snippet></ROW><ROW><id>18099788</id><snippet>verbosity</snippet></ROW><ROW><id>18099804</id><snippet>from suds.client import Client
hello_client = Client('http://localhost:7789/HelloWorldService?wsdl')

hello_client.options.cache.clear() #make this line

result = hello_client.service.say_hello2(...) # parameters inside 
</snippet></ROW><ROW><id>18100049</id><snippet>.//select</snippet></ROW><ROW><id>18100049</id><snippet>//select</snippet></ROW><ROW><id>18100049</id><snippet>select</snippet></ROW><ROW><id>18100069</id><snippet>f = open('file.txt', 'r')

employee_dict = {}

for line in f:
    if line.startswith("af") or line.startswith("apn"):
        emprecords = line.split() #assuming the default separator is a space character
        #assuming that all your records follow a common format, you can then create an employee dict
    employee = {}
     #the first element after the split is employee id
    employee_id = int(emprecords[0])
    #enter name-value pairs within the employee object - for e.g. let's say the second element after the split is the emp name, the third the age
   employee['name'] = emprecords[1]
   employee['age'] = emprecords[2]
   #store this in the global employee_dict
   employee_dict[employee_id] =  employee
</snippet></ROW><ROW><id>18100069</id><snippet>print employee_dict[1]['name']
</snippet></ROW><ROW><id>18100148</id><snippet>&lt;span&gt;</snippet></ROW><ROW><id>18100148</id><snippet>&lt;span&gt;</snippet></ROW><ROW><id>18100148</id><snippet>&lt;span&gt;</snippet></ROW><ROW><id>18100148</id><snippet>&lt;span&gt;</snippet></ROW><ROW><id>18100243</id><snippet>def OnCheckBox2Checkbox(self, event):
    #event.Skip()
    if self.checkBox2.GetValue() == 'False':
        self.radioBox1.Enable(False)
        print self.checkBox2.IsChecked()
</snippet></ROW><ROW><id>18100243</id><snippet>def OnCheckBox2Checkbox(self, event):
    self.radioBox1.Enable(self.checkBox2.IsChecked())
    print self.checkBox2.IsChecked()
</snippet></ROW><ROW><id>18100259</id><snippet>fields.reference</snippet></ROW><ROW><id>18100259</id><snippet>many2one</snippet></ROW><ROW><id>18100259</id><snippet>many2one</snippet></ROW><ROW><id>18100259</id><snippet>fields.property</snippet></ROW><ROW><id>18100259</id><snippet>fields.reference</snippet></ROW><ROW><id>18100259</id><snippet>'doc': fields.reference('Field Label', selection, size)
</snippet></ROW><ROW><id>18100259</id><snippet>selection</snippet></ROW><ROW><id>18100259</id><snippet>fields.selection</snippet></ROW><ROW><id>18100259</id><snippet>'res.partner'</snippet></ROW><ROW><id>18100259</id><snippet>size</snippet></ROW><ROW><id>18100259</id><snippet>None</snippet></ROW><ROW><id>18100259</id><snippet>fields.reference</snippet></ROW><ROW><id>18100259</id><snippet>model.name,id</snippet></ROW><ROW><id>18100259</id><snippet>many2one</snippet></ROW><ROW><id>18100259</id><snippet>read()</snippet></ROW><ROW><id>18100259</id><snippet>','</snippet></ROW><ROW><id>18100259</id><snippet>write()</snippet></ROW><ROW><id>18100259</id><snippet>'model.name,id'</snippet></ROW><ROW><id>18100259</id><snippet>search()</snippet></ROW><ROW><id>18100259</id><snippet>'model.name,id'</snippet></ROW><ROW><id>18100259</id><snippet>browse()</snippet></ROW><ROW><id>18100259</id><snippet>many2one</snippet></ROW><ROW><id>18100350</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[0,0,0,2,3,0],[3,2,4,0,0,1]])
&gt;&gt;&gt; a[:,2:5]
array([[0, 2, 3],
       [4, 0, 0]])
</snippet></ROW><ROW><id>18100364</id><snippet>crawler.crawl()</snippet></ROW><ROW><id>18100364</id><snippet>from testspiders.spiders.spider_a import MySpider

spider = MySpider()
crawler.crawl(spider)
</snippet></ROW><ROW><id>18100769</id><snippet>_p_resolveConflict()</snippet></ROW><ROW><id>18100769</id><snippet>class Counter(Persistent):
    def __init__(self, start=0):
        self._count = start

    def increment(self):
        self._count += 1
        return self._count

    def _p_resolveConflict(self, old, saved, new):
        # default __getstate__ returns a dictionary of instance attributes
        saved['_count'] += new['_count'] - old['_count']
        return saved
</snippet></ROW><ROW><id>18100769</id><snippet>max_retries = 10
retry = 0

conn = db_test.open()
root = conn.root()

while retry &lt; max_retries:
    val = root.get(key,0)    
    time.sleep(0.1)
    root[key] = val + 1

    try:
        transaction.commit()
        return '%s = %g' % (key, val)
    except ConflictError:
        retry += 1

raise CustomExceptionIndicatingTooManyRetries
</snippet></ROW><ROW><id>18101301</id><snippet>context</snippet></ROW><ROW><id>18101301</id><snippet>Context</snippet></ROW><ROW><id>18101301</id><snippet>def my_tag(context):
    context.write("hello world")
    return ''
</snippet></ROW><ROW><id>18101301</id><snippet>&lt;%namespace name="hw" module="some.module"/&gt;

${hw.my_tag()}
</snippet></ROW><ROW><id>18101301</id><snippet>&lt;%mynamespace:somefunction arg1="some argument" args="x, y"&gt;
    Some record: ${x}, ${y}
&lt;/%mynamespace:somefunction&gt;
</snippet></ROW><ROW><id>18101965</id><snippet> $('table tbody tr').filter(':last').css('background-color', '#FF0000')
</snippet></ROW><ROW><id>18101965</id><snippet>dataframe</snippet></ROW><ROW><id>18101965</id><snippet> $('table.dataframe tbody tr').filter(':last').css('background-color', '#FF0000')
</snippet></ROW><ROW><id>18101965</id><snippet>df.to_html(classes='my_class')
</snippet></ROW><ROW><id>18101965</id><snippet>df.to_html(classes=['my_class', 'my_other_class'])
</snippet></ROW><ROW><id>18101965</id><snippet>In [1]: import numpy as np
        import pandas as pd
        from IPython.display import HTML, Javascript
In [2]: df = pd.DataFrame({'a': np.arange(10), 'b': np.random.randn(10)})
In [3]: HTML(df.to_html(classes='my_class'))
In [4]: Javascript('''$('.my_class tbody tr').filter(':last')
                                             .css('background-color', '#FF0000');
                   ''')
</snippet></ROW><ROW><id>18101965</id><snippet>In [5]: HTML('''
        &lt;style&gt;
            .df tbody tr:last-child { background-color: #FF0000; }
        &lt;/style&gt;
        ''' + df.to_html(classes='df'))
</snippet></ROW><ROW><id>18101965</id><snippet>import numpy as np
import pandas as pd

HEADER = '''
&lt;html&gt;
    &lt;head&gt;
        &lt;style&gt;
            .df tbody tr:last-child { background-color: #FF0000; }
        &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
'''
FOOTER = '''
    &lt;/body&gt;
&lt;/html&gt;
'''

df = pd.DataFrame({'a': np.arange(10), 'b': np.random.randn(10)})
with open('test.html', 'w') as f:
    f.write(HEADER)
    f.write(df.to_html(classes='df'))
    f.write(FOOTER)
</snippet></ROW><ROW><id>18102000</id><snippet>tuple</snippet></ROW><ROW><id>18102000</id><snippet>except ..</snippet></ROW><ROW><id>18102000</id><snippet>from functools import wraps

def retry(*exceptions, **params):
    if not exceptions:
        exceptions = (Exception,)
    tries = params.get('tries', 10)

    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kw):
            for i in range(tries):
                try:
                    return func(*args, **kw)
                except exceptions:
                    pass
        return wrapper
    return decorator
</snippet></ROW><ROW><id>18102000</id><snippet>*exceptions</snippet></ROW><ROW><id>18102000</id><snippet>tries</snippet></ROW><ROW><id>18102000</id><snippet>@retry(ValueError, TypeError, tries=20)
def foo():
    pass
</snippet></ROW><ROW><id>18102000</id><snippet>&gt;&gt;&gt; @retry(NameError, tries=3)
... def foo():
...     print 'Futzing the foo!'
...     bar
... 
&gt;&gt;&gt; foo()
Futzing the foo!
Futzing the foo!
Futzing the foo!
</snippet></ROW><ROW><id>18102073</id><snippet>apt-get install xautomation</snippet></ROW><ROW><id>18102073</id><snippet>from subprocess import Popen, PIPE

control_f4_sequence = '''keydown Control_L
key F4
keyup Control_L
'''

shift_a_sequence = '''keydown Shift_L
key A
keyup Shift_L
'''

def keypress(sequence):
    p = Popen(['xte'], stdin=PIPE)
    p.communicate(input=sequence)

keypress(shift_a_sequence)
keypress(control_f4_sequence)
</snippet></ROW><ROW><id>18102271</id><snippet>import os
import time

os.system("...../abc.bat")

while True:
    try:
        o = open("test.txt", "r")
        break
    except:
        print "waiting the bat.."
        time.sleep(15) # Modify (seconds) to se sufficient with your bat to be ready
        continue
</snippet></ROW><ROW><id>18102279</id><snippet>&gt;&gt;&gt; x = '3.4-10.4 (BDB),,0.1-15.2 (BDB),0.2-17 (BDB)'
&gt;&gt;&gt; x.split(',')
['3.4-10.4 (BDB)', '', '0.1-15.2 (BDB)', '0.2-17 (BDB)']
</snippet></ROW><ROW><id>18102279</id><snippet>&gt;&gt;&gt; x.split(',')[1].split()
[]
</snippet></ROW><ROW><id>18102279</id><snippet>[0]</snippet></ROW><ROW><id>18102279</id><snippet>filter(None, ..)</snippet></ROW><ROW><id>18102279</id><snippet>xx = min(filter(None, x.split(",")), key=lambda x: re.findall("\d+.\d+", x.split()[0]))
</snippet></ROW><ROW><id>18102279</id><snippet>&gt;&gt;&gt; min(filter(None, x.split(",")), key=lambda x: re.findall("\d+.\d+", x.split()[0]))
'0.1-15.2 (BDB)'
</snippet></ROW><ROW><id>18102308</id><snippet>&gt;&gt;&gt; l1 = [(166L,), (155L,)]
&gt;&gt;&gt; l2 = [0.74, 0.25]
&gt;&gt;&gt; zip([x for x, in l1], l2)
[(166L, 0.74), (155L, 0.25)]
&gt;&gt;&gt; map(list, zip([x for x, in l1], l2))
[[166L, 0.74], [155L, 0.25]]
</snippet></ROW><ROW><id>18102503</id><snippet>intersect = s1.symmetric_difference(s2)
result = dict([(i, ("s1" if i in s1 else "s2")) for i in intersect])
</snippet></ROW><ROW><id>18102575</id><snippet>open()</snippet></ROW><ROW><id>18102575</id><snippet>&gt;&gt;&gt; path = '\$'
&gt;&gt;&gt; path
'\\$'
&gt;&gt;&gt; print path
\$
</snippet></ROW><ROW><id>18102575</id><snippet>\</snippet></ROW><ROW><id>18102575</id><snippet>$</snippet></ROW><ROW><id>18102575</id><snippet>$</snippet></ROW><ROW><id>18102575</id><snippet>&gt;&gt;&gt; os.listdir('/tmp/$somedir$')
['test']
&gt;&gt;&gt; open('/tmp/$somedir$/test')
&lt;open file '/tmp/$somedir$/test', mode 'r' at 0x105579390&gt;
</snippet></ROW><ROW><id>18102848</id><snippet>propname.expression</snippet></ROW><ROW><id>18102848</id><snippet>TIMEDIFF</snippet></ROW><ROW><id>18102848</id><snippet>EXTRACT(EPOCH FROM ... ) / 3600</snippet></ROW><ROW><id>18102848</id><snippet>timedelta</snippet></ROW><ROW><id>18102848</id><snippet>from sqlalchemy import select, func


class Interval(Base):
    ...

    @hybrid_property
    def time_spent(self):
        return (self.end or datetime.now()) - self.start

    @time_spent.expression
    def time_spent(cls):
        return func.coalesce(cls.end, func.current_timestamp()) - cls.start


class Task(Base):
    ...

    @hybrid_property
    def time_spent(self):
        return sum((i.time_spent for i in self.intervals), timedelta(0))

    @time_spent.expression
    def hours_spent(cls):
        return (select([func.sum(Interval.time_spent)])
            .where(cls.id==Interval.task_id)
            .label('time_spent'))
</snippet></ROW><ROW><id>18102848</id><snippet>session.query(Task).filter(Task.time_spent &gt; timedelta(hours=3)).all()
</snippet></ROW><ROW><id>18102848</id><snippet>SELECT task.id AS task_id, task.title AS task_title 
FROM task 
WHERE (SELECT sum(coalesce(interval."end", CURRENT_TIMESTAMP) - interval.start) AS sum_1 
FROM interval 
WHERE task.id = interval.task_id) &gt; %(param_1)s
</snippet></ROW><ROW><id>18102853</id><snippet>{% for i, j, k in full_name %}
    &lt;form action="mydomain.com/mysubmiturl/" method="POST"&gt;&lt;!-- Leave action empty to submit to this very same html --&gt;
        {% csrf_token %} &lt;!-- Django server only accept POST requests with a CSRF token --&gt;
        {{ i }} {{ j }} 
        &lt;input type="text" name="follow_id" value="{{ k }}" /&gt;
        &lt;input type="submit" value="Follow"&gt;&lt;br /&gt; &lt;br /&gt;
    &lt;/form&gt;
{% endfor %}
</snippet></ROW><ROW><id>18103667</id><snippet>json</snippet></ROW><ROW><id>18103667</id><snippet>for row in bbb:
   if row[0]:
      data = json.loads(row[0])
      print data['sth2']
</snippet></ROW><ROW><id>18103819</id><snippet>in</snippet></ROW><ROW><id>18103819</id><snippet>if "c" in test:
   ...
</snippet></ROW><ROW><id>18103822</id><snippet>while 1:
    print('hey')
</snippet></ROW><ROW><id>18103822</id><snippet>if</snippet></ROW><ROW><id>18103822</id><snippet>target</snippet></ROW><ROW><id>18103822</id><snippet>import time
import winsound
from multiprocessing import Process
def pr1():
    while 1:
        winsound.MessageBeep()
        print('its working') 
        time.sleep(0.5)
if __name__ == '__main__':
    print('correct')
    p = Process(target=pr1, args=())
    p.start()
    p.join()

    while 1:
        print('hey')
</snippet></ROW><ROW><id>18103866</id><snippet>hardware</snippet></ROW><ROW><id>18103866</id><snippet>hardware/__init__.py</snippet></ROW><ROW><id>18103866</id><snippet>hardware.py</snippet></ROW><ROW><id>18103866</id><snippet>__init__.py</snippet></ROW><ROW><id>18103866</id><snippet>highestSerial</snippet></ROW><ROW><id>18103866</id><snippet>hardware</snippet></ROW><ROW><id>18103866</id><snippet>__init__.py</snippet></ROW><ROW><id>18103866</id><snippet>hardware.py</snippet></ROW><ROW><id>18103866</id><snippet>hardware.py</snippet></ROW><ROW><id>18103942</id><snippet>+</snippet></ROW><ROW><id>18103942</id><snippet>personname = {'id':member.id,
              'name': member.firstname  + " " + member.lastname}
</snippet></ROW><ROW><id>18103942</id><snippet>personname = {'id':member.id,
              'name': '%s %s' % (member.firstname, member.lastname)}
</snippet></ROW><ROW><id>18103942</id><snippet>format</snippet></ROW><ROW><id>18103942</id><snippet>personname = {'id':member.id,
              'name': '{0} {1}'.format(member.firstname, member.lastname)}
</snippet></ROW><ROW><id>18103968</id><snippet>pack</snippet></ROW><ROW><id>18103968</id><snippet>place</snippet></ROW><ROW><id>18103968</id><snippet>grid</snippet></ROW><ROW><id>18103968</id><snippet>grid_rowconfigure</snippet></ROW><ROW><id>18103968</id><snippet>grid_columnconfigure</snippet></ROW><ROW><id>18103968</id><snippet>uniform</snippet></ROW><ROW><id>18103968</id><snippet>uniform</snippet></ROW><ROW><id>18103968</id><snippet>minsize</snippet></ROW><ROW><id>18104201</id><snippet>import pyHook
import pythoncom
import win32com.client
shell = win32com.client.Dispatch("WScript.Shell")
hm = pyHook.HookManager()
def OnKeyboardEvent(event):
    if event.KeyID == 48:
        #cheat set 1
        shell.SendKeys("chttychttybangbang")
    if event.KeyID == 49:
        #cheat set 2
        shell.SendKeys("hesoyamuzumymwfullclip")
    if event.KeyID == 50:
        #cheat set 3
        shell.SendKeys("hesoyaprofessionalskitfullclip")
    if event.KeyID == 51:
        #cheat set 4
        shell.SendKeys("hesoyalxgiwylfullclip")
    if event.KeyID == 52:
        #cheat set 5
        shell.SendKeys("zeiivgylteiczflyingfisheveryoneisrichspeedfreak")
    if event.KeyID == 53:
        #cheat set 6
        shell.SendKeys("aiwprton")
    if event.KeyID == 54:
        #cheat set 7
        shell.SendKeys("oldspeeddemon")
    if event.KeyID == 55:
        #cheat set 8
        shell.SendKeys("itsallbull")
    if event.KeyID == 56:
        #cheat set 9
        shell.SendKeys("monstermash")
    if event.KeyID == 57:
        #cheat set 10
        shell.SendKeys("jumpjetkgggdkpaiypwzqpohdudeflyingtostunt")
    # return True to pass the event to other handlers
    return True
hm.KeyDown = OnKeyboardEvent
hm.HookKeyboard()
pythoncom.PumpMessages()
</snippet></ROW><ROW><id>18104561</id><snippet>&gt;&gt;&gt; s = '08:04:10 Current Track Playing = AB034214 Skinny Genes - Eliza Doolittle'
&gt;&gt;&gt; s_clean = s[:33] + s[42:]
&gt;&gt;&gt; s_clean
'08:04:10 Current Track Playing = Skinny Genes - Eliza Doolittle'
</snippet></ROW><ROW><id>18104561</id><snippet>open('log','w').writelines([
    (line[:33]+line[42:])
    for line in open(fl) if "Current Track Playing" in line])
</snippet></ROW><ROW><id>18104633</id><snippet>__init__</snippet></ROW><ROW><id>18104633</id><snippet>class SpeechEventModule(ALModule):
def __init__(self, name, ext_memory):
    ALModule.__init__(self, name)
    memory = ALProxy("ALMemory")
    leds = ALProxy("ALLeds")
</snippet></ROW><ROW><id>18104633</id><snippet>try:
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    print
    print "Interrupted by user, shutting down"
    myBroker.shutdown()
    sys.exit(0)
</snippet></ROW><ROW><id>18104649</id><snippet>import multiprocessing as mp
import time


def multby4_wq(x):
    print "Starting!"
    time.sleep(5.0/x)
    a = x*4
    return a

if __name__ == '__main__':
    pool = mp.Pool(4)
    for result in pool.map(multby4_wq, range(1, 5)):
        print result
</snippet></ROW><ROW><id>18104649</id><snippet>add</snippet></ROW><ROW><id>18104649</id><snippet>add</snippet></ROW><ROW><id>18104649</id><snippet>add_wrapper</snippet></ROW><ROW><id>18104649</id><snippet>import multiprocessing as mp
import time


def add(x, y):
    time.sleep(1)
    return x + y

def add_wrapper(args):
    return add(*args)

if __name__ == '__main__':
    pool = mp.Pool(4)
    for result in pool.map(add_wrapper, [(1,2), (3,4), (5,6), (7,8)]):
        print result
</snippet></ROW><ROW><id>18104992</id><snippet>mymatrix[:,883].sum()
</snippet></ROW><ROW><id>18104992</id><snippet>csc_matrix</snippet></ROW><ROW><id>18104992</id><snippet>r = np.random.random((1000,1000))

a = csr_matrix(r)
b = csc_matrix(r)

In [20]: timeit a[:,88].sum()
1000 loops, best of 3: 1.88 ms per loop

In [21]: timeit b[:,88].sum()
10000 loops, best of 3: 129 us per loop
</snippet></ROW><ROW><id>18104992</id><snippet>csr_matrix</snippet></ROW><ROW><id>18105096</id><snippet>db.auth_user.insert(username=username, password=password, email=email)
</snippet></ROW><ROW><id>18105096</id><snippet>db.auth_user.password</snippet></ROW><ROW><id>18105096</id><snippet>CRYPT()</snippet></ROW><ROW><id>18105096</id><snippet>CRYPT</snippet></ROW><ROW><id>18105096</id><snippet>db.auth_user.validate_and_insert(username=username, password=password,
                                 email=email)
</snippet></ROW><ROW><id>18105470</id><snippet>def do_stuff(api_func, get_data_func):
    cursor = ''
    while True:
        data = api_func(id, cursor)
        #more code
        for i in data['data']:
            ids_likes += get_data_func(i) + ', '
        #more code
</snippet></ROW><ROW><id>18105470</id><snippet>do_stuff(API_like_query, lambda i: i['id'])
</snippet></ROW><ROW><id>18105470</id><snippet>do_stuff(API_come_query, lambda i: i['from']['id'])
</snippet></ROW><ROW><id>18105501</id><snippet>nunique</snippet></ROW><ROW><id>18105501</id><snippet>GroupBy</snippet></ROW><ROW><id>18105501</id><snippet>In [63]: df = DataFrame({'a': randn(1000, 1)})

In [64]: df['user_id'] = randint(100, 1000, size=len(df))

In [65]: df['article_id'] = randint(100, size=len(df))

In [66]: gb = df.article_id.groupby(df.user_id)

In [67]: gb.nunique()
Out[67]:
user_id
100        2
101        1
102        1
104        2
105        1
106        2
107        1
110        1
111        4
112        2
113        1
114        2
115        1
116        1
118        1
...
976        3
980        1
982        1
983        1
986        1
987        1
988        1
989        2
990        1
993        1
994        2
996        1
997        1
998        1
999        1
Length: 617, dtype: int64
</snippet></ROW><ROW><id>18105831</id><snippet>&lt;</snippet></ROW><ROW><id>18105831</id><snippet>lt</snippet></ROW><ROW><id>18105831</id><snippet>lt</snippet></ROW><ROW><id>18105831</id><snippet>if len(sys.argv) &lt; 2:
    print "Usage: avgNReduce.py "
    sys.exit(0)
</snippet></ROW><ROW><id>18106087</id><snippet>work = [('January', 2, [('curly', 30, 5), ('larry',10, 5), ('moe',20, 10)])]

workers = dict()
month = ""
section = ""
for w in work:
    month = w[0]
    section = w[1]
    for worker, time, overtime in w[2]:
        workers[worker] = (time, overtime)
    print "Month: {0}\nSection: {1}".format(month, section)
    print "".join("%s has worked %s hours, overtime %s\n" % (worker, time[0], time[1]) for worker, time in workers.items())
</snippet></ROW><ROW><id>18106253</id><snippet>%</snippet></ROW><ROW><id>18106253</id><snippet>%</snippet></ROW><ROW><id>18106253</id><snippet>%</snippet></ROW><ROW><id>18106253</id><snippet>%</snippet></ROW><ROW><id>18106294</id><snippet>if neg:
</snippet></ROW><ROW><id>18106294</id><snippet>if options["neg"]:
</snippet></ROW><ROW><id>18106294</id><snippet>*values</snippet></ROW><ROW><id>18106294</id><snippet>**options</snippet></ROW><ROW><id>18106313</id><snippet>from Tkinter import *
from string import ascii_lowercase

class app(Frame):
    def __init__(self, master = None):
        Frame.__init__(self, master)
        self.grid()
        self.create_widgets()

    def create_widgets(self):
        self.entries = {}
        self.tableheight = 9
        self.tablewidth = 9
        counter = 0
        for row in xrange(self.tableheight):
            for column in xrange(self.tablewidth):
                self.entries[counter] = Entry(self, width=5)
                self.entries[counter].grid(row=row, column=column)
                counter += 1

prog = app()
prog.master.title('Sudoku')
prog.mainloop()
</snippet></ROW><ROW><id>18106313</id><snippet>self.entries[15].insert(0, '15') 
</snippet></ROW><ROW><id>18107037</id><snippet>if abs(a - b) &lt; 1e-10
</snippet></ROW><ROW><id>18107037</id><snippet>float</snippet></ROW><ROW><id>18107037</id><snippet>float64</snippet></ROW><ROW><id>18107212</id><snippet>= 1</snippet></ROW><ROW><id>18107212</id><snippet>sentimentDict = {}

def loadSentiment():
    with open('Sentiment/positive_words.txt', 'r') as f:
        sentimentDict['positive'] = {line.strip() for line in f}

    with open('Sentiment/negative_words.txt', 'r') as f:
        sentimentDict['negative'] = {line.strip() for line in f}
</snippet></ROW><ROW><id>18107212</id><snippet>1</snippet></ROW><ROW><id>18107212</id><snippet>dict.fromkeys()</snippet></ROW><ROW><id>18107212</id><snippet>sentimentDict = {}

def loadSentiment():
    with open('Sentiment/positive_words.txt', 'r') as f:
        sentimentDict['positive'] = dict.fromkeys((line.strip() for line in f), 1)

    with open('Sentiment/negative_words.txt', 'r') as f:
        sentimentDict['negative'] = dict.fromkeys((line.strip() for line in f), 1)
</snippet></ROW><ROW><id>18107514</id><snippet>import collections
</snippet></ROW><ROW><id>18107514</id><snippet>Pythoness-410:auth gfleche$ python
&gt;&gt;&gt; import collections
</snippet></ROW><ROW><id>18107544</id><snippet>print main1.__file__</snippet></ROW><ROW><id>18107559</id><snippet>__doc__</snippet></ROW><ROW><id>18107559</id><snippet>description</snippet></ROW><ROW><id>18107559</id><snippet>"My python script

Script to process a file
"

p = argparse.ArgumentParser(description=__doc__,
                            formatter_class=argparse.RawDescriptionHelpFormatter)
p.add_argument('foo', help="Name of file to process")
p.parse_args()
</snippet></ROW><ROW><id>18107559</id><snippet>$ python tmp.py --help
usage: tmp.py [-h] foo

My python script

Script to process a file

positional arguments:
  foo         Name of file to process

optional arguments:
  -h, --help  show this help message and exit
</snippet></ROW><ROW><id>18107559</id><snippet>epilog</snippet></ROW><ROW><id>18107559</id><snippet>description</snippet></ROW><ROW><id>18107766</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>18107766</id><snippet>from urllib2 import urlopen
from bs4 import BeautifulSoup as bs

source = urlopen(url).read()
soup = bs(source)
</snippet></ROW><ROW><id>18107766</id><snippet>css_table = soup.find('table', class_='reference')
for row in css_table.find_all('tr'):
    cells = row.find_all('td')
    if cells:
        print cells[0].a.text, cells[1].a.text
</snippet></ROW><ROW><id>18107791</id><snippet>app.yaml</snippet></ROW><ROW><id>18107823</id><snippet>def faces(n):
    def iter_faces():
        f = [0] * n
        for i in range(n):
            for x in (-1, 1):
                f[i] = x
                yield tuple(f)
            f[i] = 0
    return list(iter_faces())
</snippet></ROW><ROW><id>18107823</id><snippet>&gt;&gt;&gt; faces(1)
[(-1,), (1,)]
&gt;&gt;&gt; faces(2)
[(-1, 0), (1, 0), (0, -1), (0, 1)]
&gt;&gt;&gt; faces(3)
[(-1, 0, 0), (1, 0, 0), (0, -1, 0), (0, 1, 0), (0, 0, -1), (0, 0, 1)]
</snippet></ROW><ROW><id>18108152</id><snippet>proxy_support = urllib2.ProxyHandler({"http":"http://&lt;proxy&gt;:&lt;port&gt;"})
opener = urllib2.build_opener(proxy_support)
urllib2.install_opener(opener)

html = urllib2.urlopen(url).read()
print html
</snippet></ROW><ROW><id>18108185</id><snippet>write(1, "Hello.\n", 7)                  = 7
ioctl(0, SNDCTL_TMR_TIMEBASE or TCGETS, {B38400 opost isig icanon echo ...}) = 0
ioctl(1, SNDCTL_TMR_TIMEBASE or TCGETS, {B38400 opost isig icanon echo ...}) = 0
ioctl(0, SNDCTL_TMR_TIMEBASE or TCGETS, {B38400 opost isig icanon echo ...}) = 0
ioctl(1, SNDCTL_TMR_TIMEBASE or TCGETS, {B38400 opost isig icanon echo ...}) = 0
write(2, "Type your name: ", 16)         = 16
fstat(0, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 3), ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7fb114059000
read(0, "abc\n", 1024)                   = 4
write(1, "Nice to meet you, abc!\n", 23) = 23
</snippet></ROW><ROW><id>18108185</id><snippet>ioctl(0, SNDCTL_TMR_TIMEBASE or TCGETS, {B38400 opost isig icanon echo ...}) = 0
ioctl(1, SNDCTL_TMR_TIMEBASE or TCGETS, 0x7fff8d9d3410) = -1 ENOTTY (Inappropriate ioctl for device)
# oops, python noticed that stdout is NOTTY.
fstat(0, {st_mode=S_IFCHR|0600, st_rdev=makedev(136, 3), ...}) = 0
mmap(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f29895f0000
read(0, "abc\n", 1024)                     = 4
rt_sigaction(SIGINT, {SIG_DFL, [], SA_RESTORER, 0x7f29891c4bd0}, {0x451f62, [], SA_RESTORER, 0x7f29891c4bd0}, 8) = 0
write(1, "Hello.\nType your name: Nice to m"..., 46) = 46
# squeeze all output at the same time into stdout... pfft.
</snippet></ROW><ROW><id>18108185</id><snippet>import os
import tty
import pty

program = "python"

# command name in argv[0]
argv = [ "python", "foo.py" ]

pid, master_fd = pty.fork()

# we are in the child process
if pid == pty.CHILD:
    # execute the program
    os.execlp(program, *argv)

# else we are still in the parent, and pty.fork returned the pid of 
# the child. Now you can read, write in master_fd, or use select:
# rfds, wfds, xfds = select.select([master_fd], [], [], timeout)
</snippet></ROW><ROW><id>18108215</id><snippet>master</snippet></ROW><ROW><id>18108215</id><snippet>parent</snippet></ROW><ROW><id>18108215</id><snippet>parent.children</snippet></ROW><ROW><id>18108215</id><snippet>pw1.children</snippet></ROW><ROW><id>18108215</id><snippet>master</snippet></ROW><ROW><id>18108215</id><snippet>pw1.add()</snippet></ROW><ROW><id>18108215</id><snippet>print pw1.children
#{}
</snippet></ROW><ROW><id>18108215</id><snippet>pw1.add()</snippet></ROW><ROW><id>18108215</id><snippet>pw1.children</snippet></ROW><ROW><id>18108215</id><snippet>master</snippet></ROW><ROW><id>18108316</id><snippet>a, f = f, f + 1
</snippet></ROW><ROW><id>18108316</id><snippet>f</snippet></ROW><ROW><id>18108316</id><snippet>a = f
f += 1
</snippet></ROW><ROW><id>18108316</id><snippet>++</snippet></ROW><ROW><id>18108378</id><snippet>for</snippet></ROW><ROW><id>18108378</id><snippet>i</snippet></ROW><ROW><id>18108378</id><snippet>range(16)</snippet></ROW><ROW><id>18108378</id><snippet>i</snippet></ROW><ROW><id>18108378</id><snippet>for</snippet></ROW><ROW><id>18108378</id><snippet>loop_iterable = iter(range(16))
for i in loop_iterable:
    if i == 0:
        for j in range(8):
            print 'i is (if) ' + str(i)
            i = next(loop_iterable)
    else:
        print 'i is (else)' + str(i)
</snippet></ROW><ROW><id>18108378</id><snippet>range(10)</snippet></ROW><ROW><id>18108378</id><snippet>iter()</snippet></ROW><ROW><id>18108378</id><snippet>for</snippet></ROW><ROW><id>18108378</id><snippet>next()</snippet></ROW><ROW><id>18108378</id><snippet>for</snippet></ROW><ROW><id>18108378</id><snippet>while</snippet></ROW><ROW><id>18108378</id><snippet>i = 0
while i &lt; 16:
    if i == 0:
        for j in range(8):
            print 'i is (if) ' + str(i)
            i = next(loop_iterable)
    else:
        print 'i is (else)' + str(i)
    i += 1
</snippet></ROW><ROW><id>18108378</id><snippet>for</snippet></ROW><ROW><id>18108378</id><snippet>for</snippet></ROW><ROW><id>18108378</id><snippet>range()</snippet></ROW><ROW><id>18108378</id><snippet>for</snippet></ROW><ROW><id>18108378</id><snippet>i = 0</snippet></ROW><ROW><id>18108378</id><snippet>i &lt; 16)</snippet></ROW><ROW><id>18108378</id><snippet>i += 1</snippet></ROW><ROW><id>18108527</id><snippet>PyFuzz-0.1.0.tar.gz
</snippet></ROW><ROW><id>18108527</id><snippet>pip install https://pypi.python.org/packages/source/P/PyFuzz/PyFuzz-0.1.1.tar.gz
</snippet></ROW><ROW><id>18108533</id><snippet>all(elem[2] in ('', None) for elem in test.values())
</snippet></ROW><ROW><id>18108533</id><snippet>&gt;&gt;&gt; test = {'a': (1, 2, None), 'b':(2, 3, '')}
&gt;&gt;&gt; all(elem[2] in ('', None) for elem in test.values())
True
&gt;&gt;&gt; test['c'] = (1, 2, 3)
&gt;&gt;&gt; all(elem[2] in ('', None) for elem in test.values())
False
</snippet></ROW><ROW><id>18108586</id><snippet>list_display</snippet></ROW><ROW><id>18108586</id><snippet>class PurchaseOrderAdmin(admin.ModelAdmin):
    fields = ['product', 'dollar_amount']
    list_display = ('get_products', 'vendor')

    def get_products(self, obj):
        return "\n".join([p.products for p in obj.product.all()])
</snippet></ROW><ROW><id>18108586</id><snippet>class PurchaseOrder(models.Model):
    product = models.ManyToManyField('Product')
    vendor = models.ForeignKey('VendorProfile')
    dollar_amount = models.FloatField(verbose_name='Price')

    def get_products(self):
        return "\n".join([p.products for p in self.product.all()])
</snippet></ROW><ROW><id>18108586</id><snippet>list_display</snippet></ROW><ROW><id>18108586</id><snippet>list_display = ('get_products', 'vendor')
</snippet></ROW><ROW><id>18108634</id><snippet>Exception.__init__</snippet></ROW><ROW><id>18108634</id><snippet>__init__()</snippet></ROW><ROW><id>18108634</id><snippet>def __init__(self, message, **kwargs):
    self.__dict__.update(kwargs)
    Exception.__init__(self, message)
</snippet></ROW><ROW><id>18108644</id><snippet>import urllib
import re
gdoc = urllib.urlopen('http://google.com').read()
scriptlis = re.findall('(?si)&lt;script&gt;(.*?)&lt;/script&gt;', gdoc)
print scriptlis
</snippet></ROW><ROW><id>18108644</id><snippet>(?si)</snippet></ROW><ROW><id>18108644</id><snippet>re.DOTALL</snippet></ROW><ROW><id>18108644</id><snippet>(.*?)</snippet></ROW><ROW><id>18108644</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>18108644</id><snippet>&lt;SCRIPT&gt;...&lt;/SCRIPT&gt;</snippet></ROW><ROW><id>18108793</id><snippet>import os, fnmatch

def find_files(directory, pattern):
    for root, dirs, files in os.walk(directory):
        for basename in files:
            if fnmatch.fnmatch(basename, pattern):
                filename = os.path.join(root, basename)

                yield filename

def find_files_to_list(directory, pattern):
    file_list = []
    for root, dirs, files in os.walk(directory):
        for basename in files:
            if fnmatch.fnmatch(basename, pattern):
                filename = os.path.join(root, basename)
                file_list.append(filename)

    return file_list
</snippet></ROW><ROW><id>18108793</id><snippet>wanted_files = find_files_to_list('/original_project/', '*.html')
for filename in find_files('/copy_project/', '*'):
    if filename not in wanted_files:
        os.remove(filename)
</snippet></ROW><ROW><id>18108800</id><snippet>defaultdict(lambda: [0, 0])
</snippet></ROW><ROW><id>18108800</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; lambda_default = lambda: [0, 0]
&gt;&gt;&gt; iter_default = itertools.repeat([0, 0]).next
&gt;&gt;&gt; lambda_default() is lambda_default()
False
&gt;&gt;&gt; iter_default() is iter_default()
True
</snippet></ROW><ROW><id>18108877</id><snippet>from .[module]
  import name</snippet></ROW><ROW><id>18108877</id><snippet>.</snippet></ROW><ROW><id>18108946</id><snippet>Counter</snippet></ROW><ROW><id>18108946</id><snippet>from collections import Counter

with open('bandfile.txt') as f:
   counts = Counter(line.split('-')[0].strip() for line in f if line)

for band, count in counts.most_common():
    print("{0}:{1}".format(band, count))
</snippet></ROW><ROW><id>18108946</id><snippet>line.split('-')[0].strip() for line in f</snippet></ROW><ROW><id>18108946</id><snippet>if line</snippet></ROW><ROW><id>18108946</id><snippet>temp_list = []
for line in f:
    if line: # this makes sure to skip blank lines
      bits = line.split('-')
      temp_list.add(bits[0].strip())

counts = Counter(temp_list)
</snippet></ROW><ROW><id>18108946</id><snippet>Counter</snippet></ROW><ROW><id>18109050</id><snippet>&gt;&gt;&gt; from lxml.html import parse
&gt;&gt;&gt; parse("index.html")
&lt;lxml.etree._ElementTree object at 0x108a72f38&gt;
&gt;&gt;&gt; pq(parse("index.html").getroot())
</snippet></ROW><ROW><id>18109050</id><snippet>&gt;&gt;&gt; f = open('index.html')
&gt;&gt;&gt; d = PyQuery(f.read())
</snippet></ROW><ROW><id>18109240</id><snippet>variables = []

with open('filename.txt') as input:
    colour = mass = ''
    for line in input:
        fields = line.split()
        if len(fields)&gt;6:
            value = fields[6]
            if 'The colour' in line:
                colour = value
            elif 'The mass' in line:
                mass = value
        elif line.startswith('Object'):
            variables.append((colour, mass))
            colour = mass = '' # may not be needed.
del(variables[0])
</snippet></ROW><ROW><id>18109302</id><snippet>def aggregate(stats):
    aggregated = {}
    for stat in stats:
        key = stat.pop(0)
        stat = map(float, stat)
        if key not in aggregated:
            vals = {"avg": []}
            aggregated[key] = vals
        aggregated[key]['min'] = min(stat[0], aggregated[key].setdefault('min', stat[0]))
        aggregated[key]['max'] = max(stat[1], aggregated[key].setdefault('max', stat[1]))
        aggregated[key]['avg'].append(stat[2])
    return aggregated

def print_stats(aggregated):
    for k, v in aggregated.items():
        print k, 
        for k1, v1 in v.items():
            if k1 == 'avg':
                print "%s: %s" % (k1, sum(v1) / len(v1)),
            else:
                print "%s: %s" % (k1, v1),
        print

 stats = [
        ['findProductByPartNumber', '336.0', '336.0', '336.0'],
        ['findProductByPartNumber', '336.0', '339.0', '337.5'],
        ['findProductByPartNumber', '336.0', '339.0', '338.0'],
        ['findProductByPartNumber', '336.0', '341.0', '338.75'],
        ['findProductByPartNumber', '336.0', '353.0', '341.6'],
        ['findProductById', '841.0', '841.0', '841.0'],
        ['findProductByPartNumber', '336.0', '920.0', '438.0'],
        ['findProductByPartNumber', '336.0', '944.0', '510.29'],
        ['findProductByPartNumber', '336.0', '952.0', '565.5'],
        ['findProductByPartNumber', '336.0', '975.0', '611.0'],
        ['findProductsByCategory', '113.0', '113.0', '113.0'],
        ['findProductById', '161.0', '841.0', '501.0'],
        ['findProductByPartNumber', '255.0', '975.0', '575.4']
        ]   

print_stats(aggregate(stats))
</snippet></ROW><ROW><id>18109302</id><snippet>findProductsByCategory max: 113.0 avg: 113.0 min: 113.0
findProductById max: 841.0 avg: 671.0 min: 161.0
findProductByPartNumber max: 975.0 avg: 439.204 min: 255.0
</snippet></ROW><ROW><id>18109317</id><snippet>somelist</snippet></ROW><ROW><id>18109317</id><snippet>set</snippet></ROW><ROW><id>18109317</id><snippet>list</snippet></ROW><ROW><id>18109317</id><snippet>def mplist(somelist):
    someset = set(somelist)
    with open(up) as U:
        return [line for line in U if line.split(None, 1)[0] in someset]
</snippet></ROW><ROW><id>18109317</id><snippet>&gt;&gt;&gt; up = '/tmp/database.txt'
&gt;&gt;&gt; open(up, 'w').write('''\
... P61981  1433G_HUMAN
... P61982  1433G_MOUSE
... Q5RC20  1433G_PONAB
... P61983  1433G_RAT
... P68253  1433G_SHEEP
... ''')
&gt;&gt;&gt; def mplist(somelist):
...     someset = set(somelist)
...     with open(up) as U:
...         return [line for line in U if line.split(None, 1)[0] in someset]
... 
&gt;&gt;&gt; mplist(['P61981', 'Q5RC20'])
['P61981  1433G_HUMAN\n', 'Q5RC20  1433G_PONAB\n']
</snippet></ROW><ROW><id>18109317</id><snippet>def mplist(somelist):
    someset = set(somelist)
    with open(up) as U:
        return (line for line in U if line.split(None, 1)[0] in someset)
</snippet></ROW><ROW><id>18109317</id><snippet>for match in mplist(somelist):
    # do something with match
</snippet></ROW><ROW><id>18109464</id><snippet>item</snippet></ROW><ROW><id>18109464</id><snippet>state</snippet></ROW><ROW><id>18109464</id><snippet>configure</snippet></ROW><ROW><id>18109464</id><snippet>normal</snippet></ROW><ROW><id>18109464</id><snippet>disabled</snippet></ROW><ROW><id>18109464</id><snippet>hidden</snippet></ROW><ROW><id>18109464</id><snippet>enabled</snippet></ROW><ROW><id>18109464</id><snippet>for i, item in enumerate(tabs): 
    notebook.tab(item, state='normal') # Does work
</snippet></ROW><ROW><id>18109808</id><snippet>csr_matrix</snippet></ROW><ROW><id>18109808</id><snippet>sort()</snippet></ROW><ROW><id>18109808</id><snippet>a = m[i,:].toarray().flatten()
</snippet></ROW><ROW><id>18109808</id><snippet>argsa = a.argsort()
</snippet></ROW><ROW><id>18109808</id><snippet>argsa</snippet></ROW><ROW><id>18109808</id><snippet>argsa[-2:]
</snippet></ROW><ROW><id>18109808</id><snippet>column, value</snippet></ROW><ROW><id>18109808</id><snippet>argsa[-2:], a[ argsa[-2:] ]
</snippet></ROW><ROW><id>18109808</id><snippet>dict( zip( argsa[-2:], a[ argsa[-2:] ] ) )
</snippet></ROW><ROW><id>18109808</id><snippet>def get_from_m(m, i, numc=2):
    a = m[i,:].toarray().flatten()
    argsa = a.argsort()
    return dict( zip( argsa[-numc:], a[ argsa[-numc:] ] ) )
</snippet></ROW><ROW><id>18110160</id><snippet>class Test1():
    def test_p1(self):
        print("This is part 1 of Test1")

def Test2():
    return Test1().test_p1()
</snippet></ROW><ROW><id>18110160</id><snippet>class Test1():
    @classmethod
    def test_p1(cls):
        print("This is part 1 of Test1")

def Test2():
    return Test1.test_p1()
</snippet></ROW><ROW><id>18110160</id><snippet>class Test1():
    @staticmethod
    def test_p1():
        print("This is part 1 of Test1")

def Test2():
    return Test1.test_p1()
</snippet></ROW><ROW><id>18110160</id><snippet>Test1</snippet></ROW><ROW><id>18110160</id><snippet>class Test1():
    def test_p1(self):
        print("This is part 1 of Test1")

class SomeOtherClass(Test1):
    def test2(self):
        return super(SomeOtherClass, self).test_p1()
</snippet></ROW><ROW><id>18110160</id><snippet>my_instance = SomeOtherClass()
result = my_instance.test2()
</snippet></ROW><ROW><id>18110160</id><snippet>def test_p1():
    print("This is part 1 of Test1")

def Test2():
    return test_p1()
</snippet></ROW><ROW><id>18110160</id><snippet>all_lower_case</snippet></ROW><ROW><id>18110160</id><snippet>all_lower_case</snippet></ROW><ROW><id>18110160</id><snippet>CamelCase</snippet></ROW><ROW><id>18110160</id><snippet>ALL_UPPER_CASE</snippet></ROW><ROW><id>18110160</id><snippet>all_lower_case</snippet></ROW><ROW><id>18110236</id><snippet>query.one()</snippet></ROW><ROW><id>18110236</id><snippet>from sqlalchemy.orm.exc import NoResultFound
from sqlalchemy.orm.exc import MultipleResultsFound

try:
    user = session.query(User).one()
except MultipleResultsFound, e:
    print e
    # Deal with it
except NoResultFound, e:
    print e
    # Deal with that as well
</snippet></ROW><ROW><id>18110236</id><snippet>query.first()</snippet></ROW><ROW><id>18110236</id><snippet>query.one()</snippet></ROW><ROW><id>18110456</id><snippet>import re
input_dirs = """dir/file  10  
dir/dir2/file2  20  
dir/dir2/file3  10
dir/file  10  
dir3/file4  10  
dir3/file5  10
dir/dir2/dir4/file2 10"""

def create_file_tree(input_string):
    dir_dict = {}
    for file_path in input_string.split('\n'):
        path_list = re.sub('/',' ',file_path).split()
        path_list[-1] = int(path_list[-1])
        path_dict = dir_dict
        final_item = ""
        for item in path_list[:-1]:
            parent_dict = path_dict
            last_item = item
            path_dict = path_dict.setdefault(item,{})
        parent_dict[last_item] = path_list[-1]
    return dir_dict

def pretty_file_tree(file_tree):
    def traverse(sub_dict,indent=0, total=0):
        string_out = ""
        indent += 1
        for key in sorted(sub_dict.keys()):
            if type(sub_dict[key]) == dict:
                sub_total = traverse(sub_dict[key],indent,0)
                total += sub_total[0]
                string_out += '  '*indent + key + ' ' + '**' + str(sub_total[0]) + '**' + '\n' + sub_total[1]
            else:
                string_out += '  '*indent + key  + '\n'
                total += sub_dict[key]

        return total, string_out

    output_string = traverse(file_tree)
    print(output_string[1])

pretty_file_tree(create_file_tree(input_dirs))
</snippet></ROW><ROW><id>18110508</id><snippet>return HttpResponse</snippet></ROW><ROW><id>18110508</id><snippet>HttpResponse</snippet></ROW><ROW><id>18110533</id><snippet>(-4)**2</snippet></ROW><ROW><id>18110533</id><snippet>-4**2</snippet></ROW><ROW><id>18110533</id><snippet>-(4**2)</snippet></ROW><ROW><id>18110533</id><snippet>-</snippet></ROW><ROW><id>18110533</id><snippet>**</snippet></ROW><ROW><id>18110655</id><snippet>fp.close
</snippet></ROW><ROW><id>18110655</id><snippet>close</snippet></ROW><ROW><id>18110655</id><snippet>fp.close()
</snippet></ROW><ROW><id>18110655</id><snippet>with</snippet></ROW><ROW><id>18110655</id><snippet>close</snippet></ROW><ROW><id>18110655</id><snippet>with open(os.path.join(filePath, filename), 'wb') as fp:
    wr = csv.writer(fp, quoting=csv.QUOTE_ALL)
    for rownum in xrange(sheet.nrows):
        wr.writerow(sheet.row_values(rownum))
</snippet></ROW><ROW><id>18111181</id><snippet>&gt;&gt;&gt; lst = [ 'foo-yes-bar', 'hello foo fine bar']
&gt;&gt;&gt; strings_to_match = ['foo', 'bar', 'hello']
&gt;&gt;&gt; [x for x in lst if all(s in x for s in strings_to_match)]
['hello foo fine bar']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18111181</id><snippet>[x for x in lst if all(re.search(s, x) for s in strings_to_match)]
</snippet></ROW><ROW><id>18111181</id><snippet>[x for x in lst if re.search(".*".join(map(re.escape, strings_to_match)), x)]
</snippet></ROW><ROW><id>18111238</id><snippet>readonly</snippet></ROW><ROW><id>18111238</id><snippet>&lt;input type="text" value="sample" readonly&gt;
</snippet></ROW><ROW><id>18111302</id><snippet>import pickle
some_dict = {'this':1,'is':2,'an':3,'example':4}

with open('saved_dict.pkl','w') as pickle_out:
    pickle.dump(some_dict,pickle_out)
</snippet></ROW><ROW><id>18111302</id><snippet>with open('saved_dict.pkl.'r') as pickle_in:
    that_dict_again = pickle.load(pickle_in)
</snippet></ROW><ROW><id>18111475</id><snippet>class PurchaseOrder(models.Model):
    product = models.ManyToManyField('Product', null =True)

    def get_products(self):
        return "&lt;br /&gt;".join([p.products for p in self.product.all()])
    get_products.allow_tags = True
</snippet></ROW><ROW><id>18111524</id><snippet>bin()</snippet></ROW><ROW><id>18111524</id><snippet>&gt;&gt;&gt; bin(5)
'0b101'
</snippet></ROW><ROW><id>18111524</id><snippet>str.format</snippet></ROW><ROW><id>18111524</id><snippet>&gt;&gt;&gt; '{0:04b}'.format(5)
'0101'
</snippet></ROW><ROW><id>18111537</id><snippet>with open('abc') as f, open('out.txt', 'w') as f1:
    for line in f:
        line = line.split()
        for i in range(0,3):
            line[i+3] = float(line[i+3])+(int(line[i])*10)
        f1.write(' '.join([str(value) for value in line[3:]]) + '\n')
</snippet></ROW><ROW><id>18111537</id><snippet>10.2 15.82 4.82
18.21 -4.26 3.62
5.33 18.66 15.47
</snippet></ROW><ROW><id>18111908</id><snippet>staff[name] = hours, bonus
</snippet></ROW><ROW><id>18111908</id><snippet>&gt;&gt;&gt; staff = {}
&gt;&gt;&gt; hours = 40
&gt;&gt;&gt; bonus = 10
&gt;&gt;&gt; name = 'john'
&gt;&gt;&gt; staff[name] = hours,bonus
&gt;&gt;&gt; staff[name]
(40, 10)
</snippet></ROW><ROW><id>18111908</id><snippet>staff.items()</snippet></ROW><ROW><id>18111908</id><snippet>[('john', (40, 10))]</snippet></ROW><ROW><id>18111908</id><snippet>print(''.join('{0} has worked {1} hours with {2} bonus'.format(x, *y) for x,y in staff.items()))
</snippet></ROW><ROW><id>18111908</id><snippet>*y</snippet></ROW><ROW><id>18112186</id><snippet>__enter__</snippet></ROW><ROW><id>18112186</id><snippet>__exit__</snippet></ROW><ROW><id>18112186</id><snippet>__enter__()</snippet></ROW><ROW><id>18112186</id><snippet>__exit__()</snippet></ROW><ROW><id>18112243</id><snippet>PyModule_Create2TraceRefs</snippet></ROW><ROW><id>18112243</id><snippet>-DPy_TRACE_REFS</snippet></ROW><ROW><id>18112243</id><snippet>EXTRA_CFLAGS</snippet></ROW><ROW><id>18112243</id><snippet>make</snippet></ROW><ROW><id>18112243</id><snippet>python3.3-config --cflags</snippet></ROW><ROW><id>18112243</id><snippet>python3.3-config --ldflags</snippet></ROW><ROW><id>18112259</id><snippet>any_results = False
for x in g:
    any_results = True
    print x
if not any_results:
    print 'Done'
</snippet></ROW><ROW><id>18112414</id><snippet>l1 + l2</snippet></ROW><ROW><id>18112414</id><snippet>&gt;&gt;&gt; l1 = [1, 2, 3]
&gt;&gt;&gt; l2 = [4, 5, 6]
&gt;&gt;&gt; 
&gt;&gt;&gt; for e in l1 + l2:
...     print e
</snippet></ROW><ROW><id>18112465</id><snippet>def expand():
    for l,v in zip(field,val):
        yield l
        yield v if l &gt; 0 else ''
</snippet></ROW><ROW><id>18112465</id><snippet>def expand():
    for l,v in zip(field,val):
        yield l
        if l &gt; 0:
            yield v
        else:
            yield ''
</snippet></ROW><ROW><id>18112835</id><snippet>dia</snippet></ROW><ROW><id>18112835</id><snippet>offsets</snippet></ROW><ROW><id>18112835</id><snippet>data</snippet></ROW><ROW><id>18112835</id><snippet>import scipy.sparse as sparse
import numpy as np

def make_sparse_array():
    A = np.arange(ncol*nrow).reshape(nrow, ncol)
    row, col = zip(*np.ndindex(nrow, ncol))
    val = A.ravel()

    A = sparse.coo_matrix(
        (val, (row, col)), shape=(nrow, ncol), dtype='float')
    A = A.todia()
    # A = sparse.diags(np.ones(5), 1)
    # A = sparse.diags([np.ones(4),np.ones(3)*2,], [2,3])
    print(A.toarray())
    return A

nrow, ncol = 10, 5
A = make_sparse_array()
diags = {offset:(diag[offset:nrow+offset] if 0&lt;=offset&lt;=ncol else
                 diag if offset+nrow-ncol&gt;=0 else
                 diag[:offset+nrow-ncol])
         for offset, diag in zip(A.offsets, A.data)}


for offset, diag in sorted(diags.iteritems()):
    print('{o}: {d}'.format(o=offset, d=diag))
</snippet></ROW><ROW><id>18112835</id><snippet>[[  0.   1.   2.   3.   4.]
 [  5.   6.   7.   8.   9.]
 [ 10.  11.  12.  13.  14.]
 [ 15.  16.  17.  18.  19.]
 [ 20.  21.  22.  23.  24.]
 [ 25.  26.  27.  28.  29.]
 [ 30.  31.  32.  33.  34.]
 [ 35.  36.  37.  38.  39.]
 [ 40.  41.  42.  43.  44.]
 [ 45.  46.  47.  48.  49.]]
</snippet></ROW><ROW><id>18112835</id><snippet>-9: [ 45.]
-8: [ 40.  46.]
-7: [ 35.  41.  47.]
-6: [ 30.  36.  42.  48.]
-5: [ 25.  31.  37.  43.  49.]
-4: [ 20.  26.  32.  38.  44.]
-3: [ 15.  21.  27.  33.  39.]
-2: [ 10.  16.  22.  28.  34.]
-1: [  5.  11.  17.  23.  29.]
0: [  0.   6.  12.  18.  24.]
1: [  1.   7.  13.  19.]
2: [  2.   8.  14.]
3: [ 3.  9.]
4: [ 4.]
</snippet></ROW><ROW><id>18112854</id><snippet>LANG=C sort -k3,3 -k4,4n file
</snippet></ROW><ROW><id>18112854</id><snippet>info coreutils 'sort invocation'</snippet></ROW><ROW><id>18112854</id><snippet>`-k POS1[,POS2]'
`--key=POS1[,POS2]'
     Specify a sort field that consists of the part of the line between
     POS1 and POS2 (or the end of the line, if POS2 is omitted),
     _inclusive_.

     Each POS has the form `F[.C][OPTS]', where F is the number of the
     field to use, and C is the number of the first character from the
     beginning of the field.  Fields and character positions are
     numbered starting with 1; a character position of zero in POS2
     indicates the field's last character.  If `.C' is omitted from
     POS1, it defaults to 1 (the beginning of the field); if omitted
     from POS2, it defaults to 0 (the end of the field).  OPTS are
     ordering options, allowing individual keys to be sorted according
     to different rules; see below for details.  Keys can span multiple
     fields.

     Example:  To sort on the second field, use `--key=2,2' (`-k 2,2').
     See below for more notes on keys and more examples.  See also the
     `--debug' option to help determine the part of the line being used
     in the sort.
</snippet></ROW><ROW><id>18112854</id><snippet>LANG=C</snippet></ROW><ROW><id>18112854</id><snippet>   (1) If you use a non-POSIX locale (e.g., by setting `LC_ALL' to
`en_US'), then `sort' may produce output that is sorted differently
than you're accustomed to.  In that case, set the `LC_ALL' environment
variable to `C'.  Note that setting only `LC_COLLATE' has two problems.
First, it is ineffective if `LC_ALL' is also set.  Second, it has
undefined behavior if `LC_CTYPE' (or `LANG', if `LC_CTYPE' is unset) is
set to an incompatible value.  For example, you get undefined behavior
if `LC_CTYPE' is `ja_JP.PCK' but `LC_COLLATE' is `en_US.UTF-8'.
</snippet></ROW><ROW><id>18112885</id><snippet>json.dumps(value)</snippet></ROW><ROW><id>18112885</id><snippet>json.loads(db_value)</snippet></ROW><ROW><id>18112885</id><snippet>import jsonpickle
import sqlalchemy.types as types

class JsonType(types.MutableType, types.TypeDecorator):    
    impl = types.Unicode

    def process_bind_param(self, value, engine):
        return unicode(jsonpickle.encode(value))

    def process_result_value(self, value, engine):
        if value:
            return jsonpickle.decode(value)
        else:
            # default can also be a list
            return {}
</snippet></ROW><ROW><id>18112927</id><snippet>Tk</snippet></ROW><ROW><id>18112927</id><snippet>Thread</snippet></ROW><ROW><id>18112927</id><snippet>from threading import Thread

class hardwareTasks(Thread):

    def hardwareSpecificFunction(self):
        """
        Example hardware specific task
        """
        #do something useful
        return

    def run(self):
        """
        Loop running hardware tasks
        """
        while True:
            #do something
            hardwareSpecificTask()


class eventListen(Thread):

    def eventHandlingSpecificFunction(self):
        """
        Example event handling specific task
        """
        #do something useful
        return

    def run(self):
        """
        Loop treating events
        """
        while True:
            #do something
            eventHandlingSpecificFunction()


if __name__ == '__main__':

    # Instantiate specific classes
    hw_tasks = hardwareTasks()
    event_tasks = eventListen()

    # This will start each specific loop in the background (the 'run' method)
    hw_tasks.start()
    event_tasks.start()

    while True:
        #do something (main loop)
</snippet></ROW><ROW><id>18112927</id><snippet>threading</snippet></ROW><ROW><id>18113040</id><snippet>def clean_email(self):
    email = self.cleaned_data["email"]
    try:
        User.objects.get(email=email)
    except User.DoesNotExist:
        return email
    raise forms.ValidationError('duplicate_email')
</snippet></ROW><ROW><id>18113156</id><snippet>Dim eqCell As Cell

For Each eqCell In ActiveDocument.Tables(1).Range.Cells

If eqCell.Range.OMaths.Count &gt; 0 Then

    'if there is any equation this if statement will return true
    'so, this cell should be bypassed
    '**EDIT** how to get row and column number of this cell:

    Dim rowNo As Long
    Dim colNo As Long

    rowNo = eqCell.Range.Information(wdEndOfRangeRowNumber)
    colNo = eqCell.Range.Information(wdEndOfRangeColumnNumber)

    Debug.Print rowNo, colNo

    '**END OF EDIT**
End If
Next
</snippet></ROW><ROW><id>18113156</id><snippet>If oText.Range.Tables(1).Range.OMath.Count &gt; 0 Then ... '&gt;&gt;here is
</snippet></ROW><ROW><id>18113156</id><snippet>If oText.Range.Tables(1).Cell(r,c).Range.OMath.Count &gt; 0 Then ... '&gt;&gt;here is
</snippet></ROW><ROW><id>18113227</id><snippet>simrecno1inds19 = nonzero(datasim19[:,1]==no1)[0]
simrecno2inds19 = nonzero(datasim19[:,1]==no2)[0]
simrecno3inds19 = nonzero(datasim19[:,1]==no3)[0]
simrecno4inds19 = nonzero(datasim19[:,1]==no4)[0]
simrecno5inds19 = nonzero(datasim19[:,1]==no5)[0]

simrecno7inds19 = nonzero(datasim19[:,1]==no7)[0]
simrecno8inds19 = nonzero(datasim19[:,1]==no8)[0]
simrecno9inds19 = nonzero(datasim19[:,1]==no9)[0]
simrecno10inds19 = nonzero(datasim19[:,1]==no10)[0]
</snippet></ROW><ROW><id>18113227</id><snippet>simrecinds19 = [nonzero(datasim19[:,1] == i)[0] for i in range(1, 11)]
</snippet></ROW><ROW><id>18113227</id><snippet>simrecinds19[0]</snippet></ROW><ROW><id>18113227</id><snippet>simrecno1inds19</snippet></ROW><ROW><id>18113334</id><snippet>isin</snippet></ROW><ROW><id>18113334</id><snippet>In [11]: te['item'].isin(tr['item']) &amp; te['user'].isin(tr['user'])
Out[11]:
0    False
1     True
2    False
3     True
4    False
5     True
dtype: bool

In [12]: te[te['item'].isin(tr['item']) &amp; te['user'].isin(tr['user'])]
Out[12]:
   item  user
1    12     2
3    15     1
5    12     1
</snippet></ROW><ROW><id>18113334</id><snippet>isin</snippet></ROW><ROW><id>18113334</id><snippet>In [21]: te[te.isin(tr.to_dict(outtype='list')).all(1)]
Out[21]:
   item  user
1    12     2
3    15     1
5    12     1
</snippet></ROW><ROW><id>18113334</id><snippet>te[te.isin(tr).all(1)]
</snippet></ROW><ROW><id>18113541</id><snippet>#####################
from Tkinter import *
#####################
string = ''

time_calc = Tk()
time_calc.geometry('500x400')
time_calc.title("Calculate A Time")
time_calc_frame= Frame(time_calc).grid(row=0, column=0)

jul_box = Entry(time_calc)
jul_box.insert(0, "Julian Date")
jul_box.pack(side = TOP)
jul_box.bind('&lt;Return&gt;')

def jd2gd(jd):
  global string
  jd=jd+0.5
  Z=int(jd)
  F=jd-Z
  alpha=int((Z-1867216.25)/36524.25)
  A=Z + 1 + alpha - int(alpha/4)

  B = A + 1524
  C = int( (B-122.1)/365.25)
  D = int( 365.25*C )
  E = int( (B-D)/30.6001 )

  dd = B - D - int(30.6001*E) + F

  if E&lt;13.5:
            mm=E-1

  if E&gt;13.5:
            mm=E-13

  if mm&gt;2.5:
            yyyy=C-4716

  if mm&lt;2.5:
            yyyy=C-4715

  months=["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
  daylist=[31,28,31,30,31,30,31,31,30,31,30,31]
  daylist2=[31,29,31,30,31,30,31,31,30,31,30,31]

  h=int((dd-int(dd))*24)
  min =int((((dd-int(dd))*24)-h)*60)
  sec=86400*(dd-int(dd))-h*3600-min*60

  # Now calculate the fractional year. Do we have a leap year?
  if (yyyy%4 != 0):
            days=daylist2
  elif (yyyy%400 == 0):
            days=daylist2
  elif (yyyy%100 == 0):
            days=daylist
  else:
            days=daylist2

  hh = 24.0*(dd % 1.0)
  min = 60.0*(hh % 1.0)
  sec = 60.0*(min % 1.0)

  dd =  dd-(dd%1.0)
  hh =  hh-(hh%1.0)
  min =  min-(min%1.0)

  if hh &lt; 10:
    hh = '0%s'%str(int(hh))
  else:
      hh = int(hh)
  if min &lt; 10:
    min = '0%s'%str(int(min))
  else:
      min = int(min)
  if sec &lt; 10:
    sec = '0%s'%str(int(sec))
  else:
      sec = int(sec)

  string = "%s/%s/%s  %s:%s:%s UTC" % (str(int(mm)), str(int(dd)), str(yyyy), str(hh),               str(min), str(sec))
  print string
  ##############
  return string
  ##############


def j2ghandler():
  jul = float(jul_box.get())

  #####################
  var.set(jd2gd(jul))
  #####################

j2g_button = Button(time_calc, text='Convert Julian\n to Gregorian', command = j2ghandler, width= 25, pady=5).pack(side=TOP)

#Draw Time String on Canvas
var = StringVar()
var.set(string)
label = Label(time_calc, textvariable=var)
label.pack(side=TOP)

##############################
time_calc.mainloop()
##############################
</snippet></ROW><ROW><id>18113541</id><snippet>jd2gd</snippet></ROW><ROW><id>18113541</id><snippet>string</snippet></ROW><ROW><id>18113550</id><snippet>products</snippet></ROW><ROW><id>18113550</id><snippet>price_for_each_item</snippet></ROW><ROW><id>18113550</id><snippet>def get_products(self):
    return "&lt;br /&gt;".join("%s %s" % (p.products, p.price_for_each_item) for p in self.product.all())
</snippet></ROW><ROW><id>18113550</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>18113550</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>18113550</id><snippet>&lt;br&gt; &lt;/br&gt;</snippet></ROW><ROW><id>18113550</id><snippet>null=True</snippet></ROW><ROW><id>18113550</id><snippet>ManyToManyField</snippet></ROW><ROW><id>18113550</id><snippet>null=True</snippet></ROW><ROW><id>18113550</id><snippet>NOT NULL</snippet></ROW><ROW><id>18113573</id><snippet>&gt;&gt;&gt; characters = {}
&gt;&gt;&gt; characters['warrior'] = {}
&gt;&gt;&gt; characters['warrior']['orc'] = {}
&gt;&gt;&gt; characters['warrior']['orc']['strength'] = 5
&gt;&gt;&gt; characters['warrior']['orc']['intelligence'] = 2
&gt;&gt;&gt; characters
{'warrior': {'orc': {'intelligence': 2, 'strength': 5}}}
&gt;&gt;&gt; characters['warrior']['orc']['strength'] += 3
&gt;&gt;&gt; characters
{'warrior': {'orc': {'intelligence': 2, 'strength': 8}}}
</snippet></ROW><ROW><id>18113573</id><snippet>class Character(object):
     def __init__(name, type, category, strength, intelligence):
         self.strength = strength
         self.intelligence = intelligence
         self.name = name
         self.type = type
         self.category = category

     def make_smart_or_dumb(self, intelligence):
         self.intelligence += intelligence

     def make_strong_or_weak(self, strength):
         self.strength += strength

     def is_dead(self):
         return self.strength &lt; 0

gunar_the_orc = Character('Gunar','Orc', 'Warrior', 10, 5)
smith_the_human = Character('Smith','Human','Warrior', 5, 10)

game_characters = [gunar_the_orc, smith_the_human]
</snippet></ROW><ROW><id>18113573</id><snippet>gunar_the_orc.make_strong_or_weak(3)
</snippet></ROW><ROW><id>18113573</id><snippet>gunar_the_orc.make_strong_or_weak(-2)
</snippet></ROW><ROW><id>18113573</id><snippet>is_dead()</snippet></ROW><ROW><id>18113573</id><snippet>while not gunar_the_orc.is_dead() or smith_the_human.is_dead():
     # Gunar attacks Smith!
     smith_the_human.make_strong_or_weak(-1)

     # Smith drinks some potions:
     smith_the_human.make_strong_or_weak(3)

     # Smith attacks!
     gunar_the_orc.make_strong_or_weak(-10)

if gunar_the_orc.is_dead():
   print("Smith won!")
else:
   print("Gunar won!")
</snippet></ROW><ROW><id>18113669</id><snippet>FS</snippet></ROW><ROW><id>18113669</id><snippet>if FS == '0\n':
</snippet></ROW><ROW><id>18113669</id><snippet>FS</snippet></ROW><ROW><id>18113669</id><snippet>if float(FS) == 0:
</snippet></ROW><ROW><id>18113669</id><snippet>line</snippet></ROW><ROW><id>18113669</id><snippet>line = line.strip().split(';')
</snippet></ROW><ROW><id>18113669</id><snippet>lines</snippet></ROW><ROW><id>18113669</id><snippet>range()</snippet></ROW><ROW><id>18113669</id><snippet>for line in lines:
    line = line.strip()
    # do something with `line`
</snippet></ROW><ROW><id>18113669</id><snippet>enumerate()</snippet></ROW><ROW><id>18113669</id><snippet>for i, line in enumerate(lines):
    line = line.strip()
    # do something with `line` and `i`.
</snippet></ROW><ROW><id>18113669</id><snippet>csv</snippet></ROW><ROW><id>18113669</id><snippet>import csv

with open(somefile, 'rb') as inputfile:
    reader = csv.reader(inputfile, delimiter=';')
    for row in reader:
        leansz, FW, FS = map(float, (row[9], row[34], row[35]))
        if not FS: continue
        LnSzRa = leansz / (FS / 2)
</snippet></ROW><ROW><id>18113774</id><snippet>'http://my-cdn-path.com/' + '/'.join(i.split('/')[-4:]))
</snippet></ROW><ROW><id>18113774</id><snippet>'http://my-cdn-path.com/' + '/'.join(os.path.abspath(i).split(os.sep)[-4:])
</snippet></ROW><ROW><id>18113804</id><snippet>decoded = [[json.loads(value) for value in inner_list] for inner_list in outer_list]
</snippet></ROW><ROW><id>18113804</id><snippet>encoded = json.dumps(decoded)
</snippet></ROW><ROW><id>18113804</id><snippet>"count":[[2011, 6], [2012, 0], [2013, 11]]}
</snippet></ROW><ROW><id>18113804</id><snippet>rejoined = ''.join(''.join(inner_list) for inner_list in outer_list)
decoded = json.loads(rejoined)
</snippet></ROW><ROW><id>18113804</id><snippet>[{'count': [[2011, 6], [2012, 0], [2013, 11]],
  'level': 'k',
  'name': 'david',
  'xaxis': [[]],
  'yaxis': [[]]},
 {'count': [[2008, 130],
            [2009, 53],
            [2010, 10],
            [2011, 17],
            [2012, 0],
            [2013, 142]],
  'level': 'n',
  'name': 'marshall',
  'xaxis': [[]],
  'yaxis': [[]]}]
</snippet></ROW><ROW><id>18113804</id><snippet>rejoined</snippet></ROW><ROW><id>18113804</id><snippet>json.dumps</snippet></ROW><ROW><id>18113804</id><snippet>encode</snippet></ROW><ROW><id>18113804</id><snippet>encode</snippet></ROW><ROW><id>18113804</id><snippet>encode</snippet></ROW><ROW><id>18113804</id><snippet>str</snippet></ROW><ROW><id>18113804</id><snippet>unicode</snippet></ROW><ROW><id>18113804</id><snippet>json.dumps</snippet></ROW><ROW><id>18113804</id><snippet>unicode</snippet></ROW><ROW><id>18113804</id><snippet>compiler.ast.flatten</snippet></ROW><ROW><id>18113804</id><snippet>map</snippet></ROW><ROW><id>18113804</id><snippet>None</snippet></ROW><ROW><id>18113804</id><snippet>completed = []

for name, calculation in zip(names, calculations):
    completed.append({'name': name, 
                      'level': random.choice('abcdefghijklmnopqrstuvwxyz'),
                      'xaxis': [[]],
                      'yaxis': [[]],
                      'count': calculation})

result = json.dumps(completed)
</snippet></ROW><ROW><id>18113804</id><snippet>completed</snippet></ROW><ROW><id>18113804</id><snippet>result</snippet></ROW><ROW><id>18113804</id><snippet>result</snippet></ROW><ROW><id>18113843</id><snippet>for rownum in xrange(sheet.nrows):
      wr.writerow([unicode(val).encode('utf8') for val in sheet.row_values(rownum)])
</snippet></ROW><ROW><id>18113990</id><snippet>Scrapy</snippet></ROW><ROW><id>18114078</id><snippet>def dedup(lst):
    seen = set()
    result = []
    for item in lst:
        fs = frozenset(item)
        if fs not in seen:
            result.append(item)
            seen.add(fs)
    return result
</snippet></ROW><ROW><id>18114078</id><snippet>&gt;&gt;&gt; A = [
...      (('X','Y','Z',2,3,4), ('A','B','C',5,10,11)),
...      (('A','B','C',5,10,11), ('X','Y','Z',2,3,4)),
...      (('T','F','J',0,1,0), ('H','G','K',2,8,7)),
...     ]
&gt;&gt;&gt; pprint.pprint(dedup(A))
[(('X', 'Y', 'Z', 2, 3, 4), ('A', 'B', 'C', 5, 10, 11)),
 (('T', 'F', 'J', 0, 1, 0), ('H', 'G', 'K', 2, 8, 7))]
&gt;&gt;&gt; B = [
...      (('X','Y','Z',0,0,0), ('A','B','C',3,3,2)),
...      (('A','B','C',3,3,2), ('X','Y','Z',0,0,0)),
...      (('J','K','L',5,4,3), ('V','T','D',5,10,12)),
...     ]
&gt;&gt;&gt; pprint.pprint(dedup(B))
[(('X', 'Y', 'Z', 0, 0, 0), ('A', 'B', 'C', 3, 3, 2)),
 (('J', 'K', 'L', 5, 4, 3), ('V', 'T', 'D', 5, 10, 12))]
</snippet></ROW><ROW><id>18114207</id><snippet>ssl.RAND_bytes</snippet></ROW><ROW><id>18114207</id><snippet>ssl.RAND_bytes</snippet></ROW><ROW><id>18114207</id><snippet>os.urandom</snippet></ROW><ROW><id>18114207</id><snippet>`ssl.RAND_bytes</snippet></ROW><ROW><id>18114207</id><snippet>os.urandom</snippet></ROW><ROW><id>18114207</id><snippet>os.urandom</snippet></ROW><ROW><id>18114207</id><snippet>ssl.RAND_bytes</snippet></ROW><ROW><id>18114207</id><snippet>ssl.RAND_bytes</snippet></ROW><ROW><id>18114207</id><snippet>os.urandom</snippet></ROW><ROW><id>18114207</id><snippet>os.urandom</snippet></ROW><ROW><id>18114240</id><snippet>self</snippet></ROW><ROW><id>18114240</id><snippet>Field</snippet></ROW><ROW><id>18114240</id><snippet>field.data</snippet></ROW><ROW><id>18114294</id><snippet>&gt;&gt;&gt; from sklearn.feature_extraction.text import TfidfVectorizer

&gt;&gt;&gt; vect = TfidfVectorizer(min_df=1)
&gt;&gt;&gt; tfidf = vect.fit_transform(["I'd like an apple",
...                             "An apple a day keeps the doctor away",
...                             "Never compare an apple to an orange",
...                             "I prefer scikit-learn to Orange"])
&gt;&gt;&gt; (tfidf * tfidf.T).A
array([[ 1.        ,  0.25082859,  0.39482963,  0.        ],
       [ 0.25082859,  1.        ,  0.22057609,  0.        ],
       [ 0.39482963,  0.22057609,  1.        ,  0.26264139],
       [ 0.        ,  0.        ,  0.26264139,  1.        ]])
</snippet></ROW><ROW><id>18114311</id><snippet>httplib</snippet></ROW><ROW><id>18114311</id><snippet>setsockoption</snippet></ROW><ROW><id>18114311</id><snippet>SO_SNDBUF</snippet></ROW><ROW><id>18114311</id><snippet>socket.send()</snippet></ROW><ROW><id>18114381</id><snippet>cmd.exe</snippet></ROW><ROW><id>18114381</id><snippet>ffmpeg</snippet></ROW><ROW><id>18114381</id><snippet>ffmpeg</snippet></ROW><ROW><id>18114381</id><snippet>images = os.path.abspath('.\\images')
cmd = "ffmpeg -f image2 -r 20 -i {}\\image%01d.png -c:v libx264 -r 20 {}\\output.mp4".format(images, images)
</snippet></ROW><ROW><id>18114381</id><snippet>cd</snippet></ROW><ROW><id>18114381</id><snippet>system</snippet></ROW><ROW><id>18114381</id><snippet>curpath = os.path.abspath(os.getcwd())
cmd = "cd {} &amp;&amp; ffmpeg -f image2 -r 20 -i .\\images\\image%01d.png -c:v libx264 -r 20 .\\images\\output.mp4".format(curpath)
</snippet></ROW><ROW><id>18114381</id><snippet>system</snippet></ROW><ROW><id>18114381</id><snippet>system</snippet></ROW><ROW><id>18114381</id><snippet>cmd = "ffmpeg -f image2 -r 20 -i .\\images\\image%01d.png -c:v libx264 -r 20 .\\images\\output.mp4"
subprocess.check_call(cmd)
</snippet></ROW><ROW><id>18114381</id><snippet>subprocess</snippet></ROW><ROW><id>18114381</id><snippet>shell=True</snippet></ROW><ROW><id>18114381</id><snippet>subprocess</snippet></ROW><ROW><id>18114381</id><snippet>CreateProcess</snippet></ROW><ROW><id>18114720</id><snippet>maximum recursion depth exceeded</snippet></ROW><ROW><id>18114720</id><snippet>n</snippet></ROW><ROW><id>18114720</id><snippet>1000</snippet></ROW><ROW><id>18114720</id><snippet>def storing_numbers(n):
    if n &gt; 1:
        return [n] + storing_numbers(n-1)
    else:
        return [1]
</snippet></ROW><ROW><id>18114720</id><snippet>def storing_numbers(n):
    return [] if n &lt;= 0 else [n] + storing_numbers(n-1)
</snippet></ROW><ROW><id>18114720</id><snippet>numbers = storing_numbers(10)
numbers
=&gt; [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
</snippet></ROW><ROW><id>18114720</id><snippet>list(range(10, 0, -1))
=&gt; [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
</snippet></ROW><ROW><id>18114720</id><snippet>[x for x in range(10, 0, -1) if x % 2 == 0]
=&gt; [10, 8, 6, 4, 2]
</snippet></ROW><ROW><id>18114721</id><snippet>pip install -e git+git://github.com/jschrewe/django-genericadmin.git</snippet></ROW><ROW><id>18114721</id><snippet>bower install bootstrap</snippet></ROW><ROW><id>18114862</id><snippet>gold += 200</snippet></ROW><ROW><id>18114862</id><snippet>gold =+ 200</snippet></ROW><ROW><id>18114862</id><snippet>gold</snippet></ROW><ROW><id>18114862</id><snippet>gold</snippet></ROW><ROW><id>18114862</id><snippet>level1()</snippet></ROW><ROW><id>18114862</id><snippet>level2</snippet></ROW><ROW><id>18114862</id><snippet>def level1(gold) :
  # do your stuff here
  level2(gold)

def level2(gold) :
  # do your stuff here

# entry point of your application
if __name__ == "__main__" :
  # initialize `gold` here
  gold = 500
  level1(gold)
</snippet></ROW><ROW><id>18114862</id><snippet># global variable 
gold = 500

def level1() :
  # specify that you want to use the global instance of gold
  global gold
  # do your stuff here

def level2() :
  global gold
  # do your stuff here
</snippet></ROW><ROW><id>18114882</id><snippet>concurrent.futures</snippet></ROW><ROW><id>18114882</id><snippet>with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:
    executor.submit(job, argument)
    executor.map(some_function, collection_of_independent_things)
    # ...
</snippet></ROW><ROW><id>18114882</id><snippet>Future</snippet></ROW><ROW><id>18114882</id><snippet>with concurrent.futures.ProcessPoolExecutor(max_workers=4) as executor:
</snippet></ROW><ROW><id>18114882</id><snippet>threading.Thread</snippet></ROW><ROW><id>18114882</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>18114882</id><snippet>queue.Queue</snippet></ROW><ROW><id>18114882</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>18114882</id><snippet>ctypes</snippet></ROW><ROW><id>18114882</id><snippet>threading</snippet></ROW><ROW><id>18114882</id><snippet>multiprocessing</snippet></ROW><ROW><id>18114882</id><snippet>multiprocessing.dummy</snippet></ROW><ROW><id>18114882</id><snippet>concurrent.futures</snippet></ROW><ROW><id>18115123</id><snippet>quoting=csv.QUOTE_NONNUMERIC</snippet></ROW><ROW><id>18115123</id><snippet>"ID"</snippet></ROW><ROW><id>18115123</id><snippet>ID</snippet></ROW><ROW><id>18115126</id><snippet>-i infile.txt</snippet></ROW><ROW><id>18115126</id><snippet>-i</snippet></ROW><ROW><id>18115126</id><snippet>infile.txt</snippet></ROW><ROW><id>18115126</id><snippet>-o outfile.txt</snippet></ROW><ROW><id>18115126</id><snippet>String[] cmdArray = new String[] { python.toString(), script.toString(), "-i infile.txt", "-o outfile.txt" };
</snippet></ROW><ROW><id>18115126</id><snippet>String[] cmdArray = new String[] { python.toString(), script.toString(), "-i", "infile.txt", "-o", "outfile.txt" };
</snippet></ROW><ROW><id>18115126</id><snippet>-i</snippet></ROW><ROW><id>18115126</id><snippet>infile.txt</snippet></ROW><ROW><id>18115126</id><snippet>-o</snippet></ROW><ROW><id>18115126</id><snippet>-outfile.txt</snippet></ROW><ROW><id>18115360</id><snippet>[{'a':v, 'b':v, 'c':c} 
    for (l, c) in zip((l_Y, l_Z), ('Y', 'Z')) 
        for v in l]
</snippet></ROW><ROW><id>18115513</id><snippet>read_csv</snippet></ROW><ROW><id>18115513</id><snippet>pd.read_csv('test.csv',
            parse_dates={'timestamp': ['date','time']},
            index_col='timestamp',
            usecols=['date', 'time', 'o', 'c'])
</snippet></ROW><ROW><id>18115513</id><snippet>parse_dates</snippet></ROW><ROW><id>18115513</id><snippet>read_csv</snippet></ROW><ROW><id>18115513</id><snippet>date</snippet></ROW><ROW><id>18115513</id><snippet>time</snippet></ROW><ROW><id>18115513</id><snippet>timestamp</snippet></ROW><ROW><id>18115513</id><snippet>index_col</snippet></ROW><ROW><id>18115513</id><snippet>timestamp</snippet></ROW><ROW><id>18115513</id><snippet>usecols</snippet></ROW><ROW><id>18115513</id><snippet>read_csv</snippet></ROW><ROW><id>18115802</id><snippet>Child</snippet></ROW><ROW><id>18115802</id><snippet>on_start_main</snippet></ROW><ROW><id>18115802</id><snippet>on_end_main</snippet></ROW><ROW><id>18115802</id><snippet>on_start_main</snippet></ROW><ROW><id>18115802</id><snippet>Parent</snippet></ROW><ROW><id>18115802</id><snippet>on_end_main</snippet></ROW><ROW><id>18115802</id><snippet>Parent</snippet></ROW><ROW><id>18115802</id><snippet>main</snippet></ROW><ROW><id>18115802</id><snippet>Parent</snippet></ROW><ROW><id>18115908</id><snippet>browser.download.dir</snippet></ROW><ROW><id>18115908</id><snippet>some_list = ["item1", "item2", "item3"] # over 300 items on the actual code
for item in some_list:
    download_folder = "/Users/myusername/Desktop/" + item
    some_way_magically_do_the_downloading(download_folder)
</snippet></ROW><ROW><id>18116096</id><snippet>abc</snippet></ROW><ROW><id>18116096</id><snippet>__iter__</snippet></ROW><ROW><id>18116135</id><snippet>new_string = re.search(r'\$(\d*[.]\d+)', description) # can match "$1.001"
</snippet></ROW><ROW><id>18116135</id><snippet>new_string = re.search(r'\$(\d*(?:[.]\d+)?)', description) # can match "$2"
</snippet></ROW><ROW><id>18116135</id><snippet>\.</snippet></ROW><ROW><id>18116135</id><snippet>[.]</snippet></ROW><ROW><id>18116180</id><snippet>__future__</snippet></ROW><ROW><id>18116180</id><snippet>from __future__ import division
from future.modified_builtins import round
</snippet></ROW><ROW><id>18116213</id><snippet>item</snippet></ROW><ROW><id>18116213</id><snippet>item = {'Name':Name, 'Start':Start, 'End':End}
Schedule.append(item)
</snippet></ROW><ROW><id>18116401</id><snippet>final_coeffs[ind1 + ind2] += coef1 * coef2</snippet></ROW><ROW><id>18116401</id><snippet>def multiply(p1, p2):
    final_coeffs = [0] * (len(p2.coeffs)+len(p1.coeffs)-1)
    for ind1, coef1 in enumerate(p1.coeffs):
        for ind2, coef2 in enumerate(p2.coeffs):
            final_coeffs[ind1 + ind2] += coef1 * coef2
    return Polynomial(final_coeffs)
</snippet></ROW><ROW><id>18116408</id><snippet>import re 
url_regex = re.compile('http:[^\']+')
urls = re.findall(url_regex, html_text)
</snippet></ROW><ROW><id>18116408</id><snippet>output</snippet></ROW><ROW><id>18116408</id><snippet>output</snippet></ROW><ROW><id>18116408</id><snippet>html_text</snippet></ROW><ROW><id>18116408</id><snippet>re.findall()</snippet></ROW><ROW><id>18116408</id><snippet>urls</snippet></ROW><ROW><id>18116474</id><snippet>grid</snippet></ROW><ROW><id>18116474</id><snippet>def changeButtonPostion():
    button2.grid_remove() #gets rid of the widget in the top left corner
    button.grid(row=0, column=1) #the top left corner of your 4x4 grid
</snippet></ROW><ROW><id>18116474</id><snippet>pack_forget</snippet></ROW><ROW><id>18116474</id><snippet>pack</snippet></ROW><ROW><id>18116665</id><snippet>\x80</snippet></ROW><ROW><id>18116665</id><snippet>obj = json.loads(content[3:], 'cp1252')
</snippet></ROW><ROW><id>18116752</id><snippet>&lt;urlset&gt;
   &lt;url&gt;
      &lt;loc&gt;http://www.10why.net/20130321/bb-nuan/&lt;/loc&gt;
      &lt;lastmod&gt;2013-03-21T01:51:31+00:00&lt;/lastmod&gt;
      &lt;changefreq&gt;monthly&lt;/changefreq&gt;
      &lt;priority&gt;0.2&lt;/priority&gt;
   &lt;/url&gt;
&lt;/urlset&gt;
</snippet></ROW><ROW><id>18116752</id><snippet>//urlset/url/loc
</snippet></ROW><ROW><id>18116762</id><snippet>except BaseException as e</snippet></ROW><ROW><id>18116762</id><snippet>sys.exc_info()</snippet></ROW><ROW><id>18116762</id><snippet>except BaseException as e</snippet></ROW><ROW><id>18116820</id><snippet>read_csv</snippet></ROW><ROW><id>18116820</id><snippet>read_sql</snippet></ROW><ROW><id>18116820</id><snippet>sqlite</snippet></ROW><ROW><id>18116820</id><snippet>index</snippet></ROW><ROW><id>18116820</id><snippet>read_csv</snippet></ROW><ROW><id>18116820</id><snippet>MultiIndex</snippet></ROW><ROW><id>18116820</id><snippet>HDF5</snippet></ROW><ROW><id>18116820</id><snippet>sqlite</snippet></ROW><ROW><id>18116820</id><snippet>sqlite</snippet></ROW><ROW><id>18116871</id><snippet>if self.radioButton1.GetValue() == True:
</snippet></ROW><ROW><id>18116871</id><snippet>if self.radioButton1.GetValue() == 'True':
</snippet></ROW><ROW><id>18116871</id><snippet>if self.radioButton1.GetValue():
</snippet></ROW><ROW><id>18116950</id><snippet>else</snippet></ROW><ROW><id>18116950</id><snippet>for</snippet></ROW><ROW><id>18116950</id><snippet>while</snippet></ROW><ROW><id>18116950</id><snippet>break</snippet></ROW><ROW><id>18116950</id><snippet>for i in range(20):
  print i
  if i == 3:
    break
else:
  print 'HAHA!'
</snippet></ROW><ROW><id>18116950</id><snippet>else</snippet></ROW><ROW><id>18116950</id><snippet>try</snippet></ROW><ROW><id>18116950</id><snippet>try:
  a = 1 / 2
except ZeroDivisionError:
  do_something()
else:
  print '/golfclap'
</snippet></ROW><ROW><id>18117118</id><snippet>def FindSubstringMatch(target, key):
    PositionList = 0
    result = []
    while PositionList &lt; len(target):
        PositionList = target.find(key, PositionList)
        if PositionList == -1:
            break
        result.append(PositionList)
        PositionList += 2
    return tuple(result)
</snippet></ROW><ROW><id>18117118</id><snippet>from re import finditer

def findSubstringMatch(target, key):
    return tuple(m.start() for m in finditer(key, target))
</snippet></ROW><ROW><id>18117118</id><snippet>findSubstringMatch("atgacatgcacaagtatgcat", "atgc")
=&gt; (5, 15)
</snippet></ROW><ROW><id>18117142</id><snippet>import argparse

class OneOrThree(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if len(values) == 1:
            setattr(namespace, self.dest, values)
            setattr(namespace, 'result', decimal_to_dms(*values))
        elif len(values) == 3:
            setattr(namespace, self.dest, values)
            setattr(namespace, 'result', dms_to_decimal(*values))
        else:
            raise parser.error('Expected 1 or 3 arguments')

def dms_to_decimal(deg,minute,sec):
    assert float(minute) &lt; 60.0, 'Mintue value: %s must be less than 60' % float(minute)
    assert float(sec) &lt; 60.0, 'Second value: %s must be less than 60' % float(sec)
    return float(deg)+float(minute)/60.0+float(sec)/(60.0*60.0)

def decimal_to_dms(deg):
    minute = 60.0*(deg-int(deg))
    sec = 60.0*(minute-int(minute))
    return int(deg),int(minute),sec

parser = argparse.ArgumentParser(
    usage='%(prog)s deg [minute, sec]',)
parser.add_argument('dms_args', nargs='+',
                    type=float,
                    action=OneOrThree,
                    metavar='deg [minute, sec]',
                    help='Given one arg, returns dms. Given three args, returns deg')
args = parser.parse_args()
print(args.result)
</snippet></ROW><ROW><id>18117142</id><snippet>% test.py 12.5
(12, 30, 0.0)

% test.py 12 30 0.0
12.5
</snippet></ROW><ROW><id>18117142</id><snippet>% test.py 12 30
usage: test.py [-h] dms_args [dms_args ...]
test.py: error: Expected 1 or 3 arguments
</snippet></ROW><ROW><id>18117142</id><snippet>% test.py -h

usage: test.py deg [minute, sec]

positional arguments:
  deg [minute, sec]  Given one arg, returns dms. Given three args, returns deg

optional arguments:
  -h, --help         show this help message and exit
</snippet></ROW><ROW><id>18117192</id><snippet>line=(raw_input("Paste text here: ")).lower()
</snippet></ROW><ROW><id>18117192</id><snippet>eval(raw_input(prompt))
</snippet></ROW><ROW><id>18117192</id><snippet>eval</snippet></ROW><ROW><id>18117192</id><snippet>input</snippet></ROW><ROW><id>18117192</id><snippet>input</snippet></ROW><ROW><id>18117192</id><snippet>raw_input</snippet></ROW><ROW><id>18117192</id><snippet>filename = raw_input("Text filename: ")
with open(filename, 'r') as f:
    line = f.read()
</snippet></ROW><ROW><id>18117192</id><snippet>r</snippet></ROW><ROW><id>18117192</id><snippet>bytes</snippet></ROW><ROW><id>18117192</id><snippet>str</snippet></ROW><ROW><id>18117192</id><snippet>locale.getpreferredencoding(False)</snippet></ROW><ROW><id>18117192</id><snippet>encoding</snippet></ROW><ROW><id>18117192</id><snippet>open(filename, 'r', encoding=...)
</snippet></ROW><ROW><id>18117192</id><snippet>open(filename, 'r', errors='ignore')
</snippet></ROW><ROW><id>18117192</id><snippet>open(filename, 'rb')
</snippet></ROW><ROW><id>18117192</id><snippet>\x9d</snippet></ROW><ROW><id>18117192</id><snippet>·</snippet></ROW><ROW><id>18117192</id><snippet>with open(filename, 'rb') as f:
    contents = f.read()
    print(repr(contents))
</snippet></ROW><ROW><id>18117253</id><snippet>time.sleep()</snippet></ROW><ROW><id>18117265</id><snippet>class Topping(models.Model):
    # ...

class Pizza(models.Model):
    # ...

class PizzaToppings(models.Model):
    # '+' disables the reverse relationship
    pizza = models.ForeignKey(Pizza, related_name='+') 
    topping = models.ForeignKey(Topping, related_name='+')
</snippet></ROW><ROW><id>18117383</id><snippet>BREW_PREFIX = subprocess.check_output(['brew', '--prefix']).strip()</snippet></ROW><ROW><id>18117514</id><snippet>from cookielib import CookieJar

cj = CookieJar()
login_data = urllib.urlencode({'j_username' : username, 'j_password' : password})
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
opener.open("http://www.torn.com/authenticate.php", login_data)
</snippet></ROW><ROW><id>18117514</id><snippet>opener.open()</snippet></ROW><ROW><id>18117514</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>18117514</id><snippet>urllib2.Request()</snippet></ROW><ROW><id>18117530</id><snippet>(r'^login/$', 'portal.views.login'),
</snippet></ROW><ROW><id>18117530</id><snippet>login_user</snippet></ROW><ROW><id>18117530</id><snippet>(r'^login/$', 'portal.views.login_user'),
</snippet></ROW><ROW><id>18117530</id><snippet>/login/</snippet></ROW><ROW><id>18117530</id><snippet>django.auth.login</snippet></ROW><ROW><id>18117684</id><snippet>__init__</snippet></ROW><ROW><id>18117684</id><snippet>&gt;&gt;&gt; class abc:
...     i = 10
...     j = 11
...     def __init__(self, x):
...             self.i = x
</snippet></ROW><ROW><id>18117684</id><snippet>&gt;&gt;&gt; a = abc(30)
&gt;&gt;&gt; a.i
30
&gt;&gt;&gt; a.j
11
</snippet></ROW><ROW><id>18117684</id><snippet>&gt;&gt;&gt; class abc:
...     i = []
...     def __init__(self, x):
...             self.i = [x]
...             abc.i.append(x)
... 
&gt;&gt;&gt; a = abc(30)
&gt;&gt;&gt; b = abc(40)
&gt;&gt;&gt; a.i
[30]
&gt;&gt;&gt; b.i
[40]
&gt;&gt;&gt; abc.i
[30, 40]
</snippet></ROW><ROW><id>18117764</id><snippet>./manage.py syncdb --all</snippet></ROW><ROW><id>18117948</id><snippet>sys.path</snippet></ROW><ROW><id>18117948</id><snippet>monkeyrunner</snippet></ROW><ROW><id>18117948</id><snippet>screenshots.py</snippet></ROW><ROW><id>18117948</id><snippet>utils.py</snippet></ROW><ROW><id>18117948</id><snippet>functional-tests</snippet></ROW><ROW><id>18117948</id><snippet>sys.path</snippet></ROW><ROW><id>18117948</id><snippet>import sys
print sys.path
import util
</snippet></ROW><ROW><id>18117948</id><snippet>screenshots.py</snippet></ROW><ROW><id>18117948</id><snippet>c:\</snippet></ROW><ROW><id>18117961</id><snippet>from getpass import getpass
from time import sleep
Database = open("C:\\Users\Dark Ariel7\\Desktop\\USB BAckup\\Scripts\\Database.txt", encoding='utf-8')
# These next two lines aren't necessary - these variables are never used; you may want to read up about namespaces:  http://bytebaker.com/2008/07/30/python-namespaces/
#Username = ("")
#Password = ()
def LogIn():
    Database = open("C:\\Users\Dark Ariel7\\Desktop\\USB BAckup\\Scripts\\Database.txt", encoding='utf-8')
#   Removed the parentheses; they have no effect here.  Putting parens around lone statements doesn't have any effect in python.
    Data = Database.read()
#   These next two lines are pointless, because you subsequently overwrite the values you give these variables.  It looks like you're trying to "declare" variables, as you would in Java, but this isn't necessary in python.
#   Username = ("")
#   Password = ()
#   Changed this from "input" to "raw_input" because input does something else that you don't want.
    Username = raw_input("Username: ")
    Password = getpass(str("Password: "))
    LogIn= ",".join((Username,Password))
    if LogIn in Data:
        print("Welcome, " + Username)
#   Not sure why you want the script to sleep, but I assume you have your reasons?
        sleep(3)
#   no need to pass
#       pass
    else:
        print("Failed, Sucker!")
        sleep(5)
#   exit() isn't necessary - the function will end by itself.
#       exit()

LogIn()
</snippet></ROW><ROW><id>18117967</id><snippet>logging.getLogger(__name__)</snippet></ROW><ROW><id>18117967</id><snippet>import logging, logging.handlers
from logging.handlers import TimedRotatingFileHandler

class Logger(object):
    def __init__(self, log_filename, name):
        logging.basicConfig(format='%(asctime)s %(message)s')
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        loghandler = TimedRotatingFileHandler(
            log_filename, when="midnight", backupCount=50
        )
        loghandler.setFormatter(formatter)
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.INFO)
        self.logger.addHandler(loghandler)

    def getLogger(self):
        return self.logger


class ClassA(object):
    def __init__(self):
        log = Logger(log_filename='class_logger.log', name="Class")
        self.logger = log.getLogger()
        self.logger.info('Started ClassA')

    def run(self):
        self.logger.info('Into method run')


A = ClassA()
log = Logger(log_filename='script_logger.log', name="Script")
logger = log.getLogger()
logger.info('Initiated Script')

for x in range(5):
    logger.info('Looping')
    A.run()
</snippet></ROW><ROW><id>18118020</id><snippet>decimal</snippet></ROW><ROW><id>18118060</id><snippet>is_palindrome()</snippet></ROW><ROW><id>18118060</id><snippet>def is_palindrome(word):
    # handle the base case
    if len(word) &lt;= 1:
        return True
    elif first(word) != last(word):
        return False
    else:
        word = middle(word)
        return is_palindrome(word)
</snippet></ROW><ROW><id>18118060</id><snippet>x = raw_input("please enter a word:\n")
L = len(x)

if L &lt;= 2:
    print 'enter a word with at least three letters'
elif is_plaindrome(word):
    print 'This word is a palindrome'
else:
    print 'This word is not a palindrome'
</snippet></ROW><ROW><id>18118060</id><snippet>y</snippet></ROW><ROW><id>18118060</id><snippet>oo</snippet></ROW><ROW><id>18118060</id><snippet>first()</snippet></ROW><ROW><id>18118060</id><snippet>last()</snippet></ROW><ROW><id>18118060</id><snippet>middle()</snippet></ROW><ROW><id>18118187</id><snippet>(\([^()]+?, [0-9]{4}\))</snippet></ROW><ROW><id>18118195</id><snippet>heapq</snippet></ROW><ROW><id>18118195</id><snippet>heap[k] &lt;= heap[2*k+1]</snippet></ROW><ROW><id>18118195</id><snippet>heap[k] &lt;= heap[2*k+2]</snippet></ROW><ROW><id>18118195</id><snippet>heap[0]</snippet></ROW><ROW><id>18118195</id><snippet>pop()</snippet></ROW><ROW><id>18118195</id><snippet>heappop()</snippet></ROW><ROW><id>18118558</id><snippet>with open('test.csv', 'w', newline='') as csv_file:
    writer = csv.writer(csv_file, quotechar='"', quoting=csv.QUOTE_ALL)
    for record in my_dict.values():
        final = [",".join(index) for index in record]
        writer.writerow(final)
</snippet></ROW><ROW><id>18118700</id><snippet>points = ((1, 2), (3, 4), (5, 6), (9, 10))
G = nx.Graph()
prev_point = None

for i, cur_point in enumerate(points):
    assert(len(cur_point) == 2)
    if i != 0:
        a = length(cur_point, prev_point)
        G.add_edge(i, i-1, weight = a)
    prev_point = cur_point
G.add_edge(0, len(points)-1, weight = length(points[0], points[-1]))

p = TSP(G, objective = 'weight', start = 0)
r = p.solve('sa')
r.nodes.pop(len(r.nodes)-1)

distance = r.ff
path = r.nodes

print distance # 22.627416998
print path # [0, 3, 2, 1]
</snippet></ROW><ROW><id>18118762</id><snippet>leastsq</snippet></ROW><ROW><id>18118762</id><snippet>fmin</snippet></ROW><ROW><id>18118762</id><snippet>import numpy as np
from scipy.optimize import fmin
</snippet></ROW><ROW><id>18118762</id><snippet>def prob(a, b):
    return (1 + np.exp(b - a))**-1
</snippet></ROW><ROW><id>18118762</id><snippet>true_ = np.random.normal(size = 100) #parameters we're trying to recover
b = np.random.normal(size = 20)

exp_ = prob(true_[:, None], b) #expected
a_s, b_s = true_.shape[0], b.shape[0]
noise = np.random.uniform(size = (a_s, b_s))
response = (noise &gt; (1 - exp_)).astype(int)
</snippet></ROW><ROW><id>18118762</id><snippet>lambda</snippet></ROW><ROW><id>18118762</id><snippet># sum of the squared residuals
err_func = lambda a : ((prob(a[:, None], b) - response) ** 2).sum()
result = fmin(err_func, np.zeros_like(true_)) #solve
</snippet></ROW><ROW><id>18118762</id><snippet>.sum()</snippet></ROW><ROW><id>18118886</id><snippet>def isprime(n):
    if n == 2: return True
    if n == 3: return True
    if n % 2 == 0: return False
    if n % 3 == 0: return False
</snippet></ROW><ROW><id>18118886</id><snippet>n</snippet></ROW><ROW><id>18118886</id><snippet>True</snippet></ROW><ROW><id>18118886</id><snippet>n</snippet></ROW><ROW><id>18118886</id><snippet>n</snippet></ROW><ROW><id>18118886</id><snippet>False</snippet></ROW><ROW><id>18118886</id><snippet>i = 5
w = 2
while i * i &lt;= n:
    if n % i == 0:
        return False

    i += w
    w = 6 - w

return True
</snippet></ROW><ROW><id>18118886</id><snippet>i</snippet></ROW><ROW><id>18118886</id><snippet>n % 2</snippet></ROW><ROW><id>18118886</id><snippet>w</snippet></ROW><ROW><id>18118886</id><snippet>w</snippet></ROW><ROW><id>18118886</id><snippet>n % 2</snippet></ROW><ROW><id>18118886</id><snippet>while</snippet></ROW><ROW><id>18118886</id><snippet>i * i &lt;= n</snippet></ROW><ROW><id>18118886</id><snippet>while</snippet></ROW><ROW><id>18118886</id><snippet>n</snippet></ROW><ROW><id>18118886</id><snippet>i</snippet></ROW><ROW><id>18118886</id><snippet>False</snippet></ROW><ROW><id>18118886</id><snippet>i</snippet></ROW><ROW><id>18118886</id><snippet>w</snippet></ROW><ROW><id>18118886</id><snippet>w = 6 - w</snippet></ROW><ROW><id>18118886</id><snippet>w</snippet></ROW><ROW><id>18118886</id><snippet>w</snippet></ROW><ROW><id>18118886</id><snippet>True</snippet></ROW><ROW><id>18118886</id><snippet>n</snippet></ROW><ROW><id>18119307</id><snippet>Returns a ValuesQuerySet — a QuerySet subclass that returns dictionaries when used as an iterable, rather than model-instance objects.</snippet></ROW><ROW><id>18119307</id><snippet>post.category_set.all</snippet></ROW><ROW><id>18119307</id><snippet>blog_post_category__name</snippet></ROW><ROW><id>18119606</id><snippet>strip([chars])</snippet></ROW><ROW><id>18119606</id><snippet>"</snippet></ROW><ROW><id>18119606</id><snippet>dat: "13/08/08</snippet></ROW><ROW><id>18119606</id><snippet>tim: 12:05:51+22"</snippet></ROW><ROW><id>18119606</id><snippet>"</snippet></ROW><ROW><id>18119606</id><snippet>&gt;&gt;&gt; dat = 'dat: "13/08/08'
&gt;&gt;&gt; tim = 'tim: 12:05:51+22"'
&gt;&gt;&gt; dat.strip('"')
'dat: "13/08/08'
&gt;&gt;&gt; tim.strip('"')
'tim: 12:05:51+22'
</snippet></ROW><ROW><id>18119606</id><snippet>&gt;&gt;&gt; dat.replace('"', '')
'dat: 13/08/08'
&gt;&gt;&gt; tim.replace('"', '')
'tim: 12:05:51+22'
</snippet></ROW><ROW><id>18120012</id><snippet>def __init__(self, name, age):
</snippet></ROW><ROW><id>18120012</id><snippet>def __init__(self, name, age):
    self.name = name
    self.age = age
    employees.emp_count += 1
</snippet></ROW><ROW><id>18120243</id><snippet>l = [v for v in dictionary.values() if  ":" in str(v)]
d = defaultdict(list)
for subdict in l:
    for k, v in subdict.items():
</snippet></ROW><ROW><id>18120243</id><snippet>def flatten(dictionary):
    for key, value in dictionary.iteritems():
        if isinstance(value, dict):
            # recurse
            for res in flatten(value):
                yield res
        else:
            yield key, value
</snippet></ROW><ROW><id>18120243</id><snippet>def GetKeyFromDictByValue(self, dictionary, value_to_find):
    for key, value in flatten(dictionary):
        if value == value_to_find:
            return key
</snippet></ROW><ROW><id>18120243</id><snippet>&gt;&gt;&gt; sample = {'a': {'a1': 'a2'}, "aa": "aa1", 'aaa': {'aaa1': 'aaa2'}}
&gt;&gt;&gt; GetKeyFromDictByValue(None, sample, "a2")
'a1'
</snippet></ROW><ROW><id>18121270</id><snippet>func1</snippet></ROW><ROW><id>18121270</id><snippet>func2</snippet></ROW><ROW><id>18121270</id><snippet>self</snippet></ROW><ROW><id>18121270</id><snippet>this</snippet></ROW><ROW><id>18121476</id><snippet>def is_even(number):
    return number % 2 == 0

def even_count(numbers_list):
    count = 0

    for number in numbers_list:
        if is_even(number): count += 1

    return count

raw_numbers = input("Please enter more than one number: ")
numbers_list = [int(i) for i in raw_numbers.split()]

count = even_count(numbers_list)
print(count)
</snippet></ROW><ROW><id>18121486</id><snippet>test_mock_play.Calc</snippet></ROW><ROW><id>18121486</id><snippet>__main__.Calc</snippet></ROW><ROW><id>18121486</id><snippet>test_mock_play.py</snippet></ROW><ROW><id>18121486</id><snippet>test_mock_play.py</snippet></ROW><ROW><id>18121486</id><snippet>calc.py</snippet></ROW><ROW><id>18121486</id><snippet>calc</snippet></ROW><ROW><id>18121486</id><snippet>Calc</snippet></ROW><ROW><id>18121486</id><snippet>Client</snippet></ROW><ROW><id>18121486</id><snippet>calc.Calc</snippet></ROW><ROW><id>18121486</id><snippet>calc.Client</snippet></ROW><ROW><id>18121486</id><snippet>calc.Calc</snippet></ROW><ROW><id>18121486</id><snippet>test_mock_play.Calc</snippet></ROW><ROW><id>18121486</id><snippet>class Calc:
    def __init__(self):
        print self.__class__
    def add(self,a,b):
        return a + b

class Client:
    def __init__(self):
        self.calc = Calc()
    def add(self,a,b):
        return self.calc.add(a,b)
</snippet></ROW><ROW><id>18121486</id><snippet>import unittest
import mock
import calc

SEVEN = 7

class MockCalc:
    def __init__(self):
        print self.__class__
    def add(self,a,b):
        return SEVEN


class TestIt(unittest.TestCase):

    def setUp(self):
        self.mock_calc = mock.patch('calc.Calc',create=True, new=MockCalc)
        self.mock_calc.start()

    def tearDown(self):
        self.mock_calc.stop()

    def test_patch_class(self):
        '''Mocking the Calc and replace it with MockCalc.'''
        print " \npatch class "
        # client should be created with 'MockCalc'
        client = calc.Client()
        # result should be 7
        result = client.add(4,8)
        print "1)" + str(result)
        self.assertEqual(result,SEVEN)

if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>18121687</id><snippet>[a[max(i-3,0):i] for i in range(len(a), 0, -3)][::-1]
</snippet></ROW><ROW><id>18121687</id><snippet>[a[max(0,i):i+3] for i in range((len(a)-1)%3-2, len(a), 3)]
</snippet></ROW><ROW><id>18121713</id><snippet>def _get_timestamp(self):
    """Return the timestamp of a user's most recently uploaded avatar."""
    path = settings.USER_AVATAR_DIRECTORY + self._get_dir()
    filenames = [filename for filename in os.listdir(path)
                 if filename.partition('_')[0] == str(self.user_id)]
    filenames.sort(reverse=True)
    return (filenames[0].rpartition('_')[2].partition('.')[0]
            if filenames else None)
</snippet></ROW><ROW><id>18121836</id><snippet>In [11]: g = df.groupby("type")

In [12]: g.mean()
Out[12]:
      value
type
X        10
Y        30
</snippet></ROW><ROW><id>18121877</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(lambda: 'MyDefault', {'a':1, 'b':2})
&gt;&gt;&gt; d['c']
'MyDefault'
&gt;&gt;&gt; map(d.get, ['a', 'c'])
[1, None]
&gt;&gt;&gt; map(d.__getitem__, ['a', 'c'])
[1, 'MyDefault']
</snippet></ROW><ROW><id>18121996</id><snippet>cd</snippet></ROW><ROW><id>18121996</id><snippet>pwd</snippet></ROW><ROW><id>18121996</id><snippet>PATH</snippet></ROW><ROW><id>18122097</id><snippet>water = (float(x1[count]) * (val_dict.get(filename[1]))
</snippet></ROW><ROW><id>18122097</id><snippet>water = (float(x1[count]) * (val_dict.get(filename)[1]))
</snippet></ROW><ROW><id>18122224</id><snippet>print</snippet></ROW><ROW><id>18122224</id><snippet>print</snippet></ROW><ROW><id>18122224</id><snippet>f.write()</snippet></ROW><ROW><id>18122224</id><snippet>f.write('{} P 1 {}'.format(stnm, tt))
</snippet></ROW><ROW><id>18122224</id><snippet>str.format()</snippet></ROW><ROW><id>18122224</id><snippet>tt</snippet></ROW><ROW><id>18122299</id><snippet>dosomething if test else dosomethingelse
</snippet></ROW><ROW><id>18122299</id><snippet>dosomething</snippet></ROW><ROW><id>18122299</id><snippet>dosomethingelse</snippet></ROW><ROW><id>18122299</id><snippet>test</snippet></ROW><ROW><id>18122299</id><snippet>x if C else y</snippet></ROW><ROW><id>18122299</id><snippet>d["doChoice"]["exp"] = "return (dosomething if argE &gt; 0 else dosomethingElse) + argF"
</snippet></ROW><ROW><id>18122342</id><snippet>&gt; 10</snippet></ROW><ROW><id>18122342</id><snippet>to_json = {"accountId":accountId,
    "emailSubject":customData.emailSubject,
    "emailBlurb":customData.emailBlurb,
    "customFields":customFields,
    "status":customData.status,
    "messageLock":customData.messageLock}

if james is not None:
  to_json['james'] = james

requestBody = json.dumps(to_json)
</snippet></ROW><ROW><id>18122637</id><snippet>thee</snippet></ROW><ROW><id>18122637</id><snippet>self.three(value)</snippet></ROW><ROW><id>18122637</id><snippet>def one(self, event):
    self.three(1)

def two(self, event):
    self.three(2)

def three(self, s):
    print s
</snippet></ROW><ROW><id>18122695</id><snippet>syntax/doxygen.vim</snippet></ROW><ROW><id>18122695</id><snippet>cpp, c, idl, doxygen and php
</snippet></ROW><ROW><id>18122695</id><snippet>doxygen.vim</snippet></ROW><ROW><id>18122695</id><snippet>syn region</snippet></ROW><ROW><id>18122695</id><snippet>syntax/python.vim</snippet></ROW><ROW><id>18122695</id><snippet>syn region pythonString start=+[uU]\=\z('''\|"""\)+ end="\z1" keepend
</snippet></ROW><ROW><id>18122695</id><snippet>doxygen.vim</snippet></ROW><ROW><id>18122695</id><snippet>"delete the following line if you don't want to have enhanced colors
let g:doxygen_enhanced_color=1
runtime! syntax/doxygen.vim
syn region doxygenComment matchgroup=pythonString start=+[uU]\=\z('''\|"""\)+ end="\z1" contains=doxygenSyncStart,doxygenStart,doxygenTODO keepend fold containedin=pythonString
</snippet></ROW><ROW><id>18122695</id><snippet>~/.vim/after/syntax/python.vim</snippet></ROW><ROW><id>18122695</id><snippet>fold</snippet></ROW><ROW><id>18122695</id><snippet>syn</snippet></ROW><ROW><id>18122695</id><snippet>foldmethod</snippet></ROW><ROW><id>18122695</id><snippet>syntax</snippet></ROW><ROW><id>18122695</id><snippet>g:doxygen_enhanced_color == 1</snippet></ROW><ROW><id>18122726</id><snippet>[section]
key = value
key2 = value2
key3 = value3
</snippet></ROW><ROW><id>18122726</id><snippet>&gt;&gt; config = ConfigParser.RawConfigParser()
&gt;&gt; config.read('configs.ini')
&gt;&gt; items = config.items('section')
&gt;&gt; items
[('key', 'value'), ('key2', 'value2'), ('key3', 'value3')]
</snippet></ROW><ROW><id>18122726</id><snippet>[section]
couples = [("somekey1", "somevalue1"), ("somekey2", "somevalue2"), ("somekey3", "somevalue3")]
</snippet></ROW><ROW><id>18122726</id><snippet>class MyConfigParser(ConfigParser.RawConfigParser):

    def get_list_of_tups(self, section, option):
        value = self.get(section, option)
        import re
        couples = re.finditer('\("([a-z0-9]*)", "([a-z0-9]*)"\)', value)
        return [(c.group(1), c.group(2)) for c in couples]
</snippet></ROW><ROW><id>18122726</id><snippet>&gt;&gt; my_config = MyConfigParser()
&gt;&gt; my_config.read('example.cfg')
&gt;&gt; couples = my_config.get_list_of_tups('section', 'couples')
&gt;&gt; couples
[('somekey1', 'somevalue1'), ('somekey2', 'somevalue2'), ('somekey3', 'somevalue3')]
</snippet></ROW><ROW><id>18123120</id><snippet>return backend(app=self, url=url)</snippet></ROW><ROW><id>18123120</id><snippet>backend</snippet></ROW><ROW><id>18123120</id><snippet>celery/app/base.py</snippet></ROW><ROW><id>18123120</id><snippet>try:
    backend(app=self, url=url)
except:
    import pdb; pdb.set_trace(),
</snippet></ROW><ROW><id>18123120</id><snippet>backend</snippet></ROW><ROW><id>18123120</id><snippet>u</snippet></ROW><ROW><id>18123120</id><snippet>d</snippet></ROW><ROW><id>18123120</id><snippet>w</snippet></ROW><ROW><id>18123120</id><snippet>from celery import task

@task
def add(x, y):
    return x + y
</snippet></ROW><ROW><id>18123514</id><snippet>with open("/root/scriptss/test.sh") as inputfile:
    teststr = zlib.compress(inputfile.read()).encode('base64')
    print teststr
</snippet></ROW><ROW><id>18123514</id><snippet>zlib.compress()</snippet></ROW><ROW><id>18123593</id><snippet>res = [ "{}\t{}\n".format(x,y) 
          for (x,y) in zip(datacolumn[0::2], datacolumn[1::2])]
</snippet></ROW><ROW><id>18123727</id><snippet>reduce()</snippet></ROW><ROW><id>18123727</id><snippet>operator.or_()</snippet></ROW><ROW><id>18123727</id><snippet>import operator

final_qs = reduce(operator.or_, qs_list)
</snippet></ROW><ROW><id>18123727</id><snippet>reduce()</snippet></ROW><ROW><id>18123727</id><snippet>qs_list</snippet></ROW><ROW><id>18123727</id><snippet>operator.or_</snippet></ROW><ROW><id>18123727</id><snippet>qs_list[0] | qs_list[1]</snippet></ROW><ROW><id>18123727</id><snippet>qs_list</snippet></ROW><ROW><id>18123727</id><snippet>qs_list</snippet></ROW><ROW><id>18123727</id><snippet>qs_list</snippet></ROW><ROW><id>18123727</id><snippet>or_(or_(or_(qs_list[0], qs_list[1]), qs_list[2]), qs_list[3])
</snippet></ROW><ROW><id>18123727</id><snippet>qs_list[0] | qs_list[1] | qs_list[2] | qs_list[3]
</snippet></ROW><ROW><id>18123727</id><snippet>qs_list</snippet></ROW><ROW><id>18123727</id><snippet>if final_qs not in locals()</snippet></ROW><ROW><id>18123727</id><snippet>final_qs</snippet></ROW><ROW><id>18123727</id><snippet>qs_list[0]</snippet></ROW><ROW><id>18123727</id><snippet>final_qs = qs_list[0]
for qs in qs_list[1:]:
    final_qs |= qs
</snippet></ROW><ROW><id>18124013</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>18124013</id><snippet>INSTALLED_APPS += ("djsupervisor",)
</snippet></ROW><ROW><id>18124055</id><snippet>from twisted.internet.protocol import Factory, Protocol
from twisted.internet import reactor

class IphoneChat(Protocol):
    def connectionMade(self):
        self.factory.clients.append(self)
        print "clients are ", self.factory.clients

    def connectionLost(self, reason):
        self.factory.clients.remove(self)

    def dataReceived(self, data):
        a = data.split(':')
        print a
        if len(a) &gt; 1:
           command = a[0]
           content = a[1]

           msg = ""
           if command == "msg":
               msg = content
               self.message(msg)
               print msg

    def message(self, message):
        for c in self.factory.clients:
            c.transport.write(message + '\n')

factory = Factory()
factory.protocol = IphoneChat
factory.clients = []
reactor.listenTCP(650, factory)
print "Iphone Chat server started"
reactor.run()
</snippet></ROW><ROW><id>18124151</id><snippet>True</snippet></ROW><ROW><id>18124151</id><snippet>False</snippet></ROW><ROW><id>18124151</id><snippet>&gt;&gt;&gt; timeit.timeit('test1()',setup="from __main__ import test1", number=10000000)
2.806439919999889
&gt;&gt;&gt; timeit.timeit('test2()',setup="from __main__ import test2", number=10000000)
2.801301520000038
&gt;&gt;&gt; timeit.timeit('test3()',setup="from __main__ import test3", number=10000000)
2.7952816800000164
&gt;&gt;&gt; timeit.timeit('test4()',setup="from __main__ import test4", number=10000000)
2.7862537199999906
</snippet></ROW><ROW><id>18124335</id><snippet>People</snippet></ROW><ROW><id>18124335</id><snippet>Robots</snippet></ROW><ROW><id>18124335</id><snippet>&gt;&gt;&gt; re.findall('([A-Z][a-z]+)', 'PeopleRobots')
['People', 'Robots']
</snippet></ROW><ROW><id>18124335</id><snippet>&gt;&gt;&gt; re.findall('[A-Z][a-z]+', 'PeopleRobots')
['People', 'Robots']
</snippet></ROW><ROW><id>18124368</id><snippet>safe</snippet></ROW><ROW><id>18124368</id><snippet>values[0]</snippet></ROW><ROW><id>18124368</id><snippet>double-quote " and ampersand</snippet></ROW><ROW><id>18124368</id><snippet>function test() {
    var nameField=document.getElementById("thing");
    nameField.value="double-quote " and ampersand"; //trailing and ampersand causing error
}
</snippet></ROW><ROW><id>18124368</id><snippet>"{{ values[0] }}"</snippet></ROW><ROW><id>18124368</id><snippet>'{{ values[0] }}'</snippet></ROW><ROW><id>18124368</id><snippet>%22</snippet></ROW><ROW><id>18124368</id><snippet>\"</snippet></ROW><ROW><id>18124368</id><snippet>values[0]</snippet></ROW><ROW><id>18124368</id><snippet>id</snippet></ROW><ROW><id>18124368</id><snippet>option</snippet></ROW><ROW><id>18124368</id><snippet>select</snippet></ROW><ROW><id>18124368</id><snippet>id</snippet></ROW><ROW><id>18124368</id><snippet>`&lt;div style="diplay:none;" id="value0"&gt;{{ value[0] }}&lt;/div&gt;`  
</snippet></ROW><ROW><id>18124368</id><snippet>.js</snippet></ROW><ROW><id>18124865</id><snippet>secondary</snippet></ROW><ROW><id>18124865</id><snippet>relationship</snippet></ROW><ROW><id>18124865</id><snippet>primaryjoin</snippet></ROW><ROW><id>18124865</id><snippet>profile_roles = Table('profilerole', Base.metadata,
    Column('role_id', Integer, ForeignKey('role.id'), primary_key=True),
    Column('profile_id', Integer, ForeignKey('profile.id')), primary_key=True)


class Profile(Base):
    ...
    roles = relationship('Role', secondary=profile_roles, backref='profiles')
</snippet></ROW><ROW><id>18124865</id><snippet>&lt;modelclass&gt;.__table__</snippet></ROW><ROW><id>18124865</id><snippet>secondary</snippet></ROW><ROW><id>18124865</id><snippet>metadata.create_all</snippet></ROW><ROW><id>18125590</id><snippet>def fun(arg):
    import pdb; pdb.set_trace()
    print arg
</snippet></ROW><ROW><id>18125590</id><snippet>    &gt;&gt;&gt; import my_module
    &gt;&gt;&gt; my_module.fun(1)
    &gt; /Users/lukasgraf/src/stackoverflow/my_module.py(3)fun()
    -&gt; print arg
    (Pdb) import sys
    (Pdb) sys._getframe(0)
    &lt;frame object at 0x1032ab290&gt;
    # this is the current frame

    (Pdb) sys._getframe(0).f_globals['__name__']
    'my_module'

    # Next outer frame
    (Pdb) sys._getframe(1).f_globals['__name__']
    'pdb'

    # etc...

    # In this example, frame 10 happens to be
    # the one from the outer interpreter
    (Pdb) sys._getframe(10).f_globals['__name__']
    '__main__'
</snippet></ROW><ROW><id>18125590</id><snippet>'__name__'</snippet></ROW><ROW><id>18125590</id><snippet>'__main__'</snippet></ROW><ROW><id>18125590</id><snippet>import sys

# Be safe and define a maximum of frames we're trying to walk up
MAX_FRAMES = 20

def save_to_interactive(dct):
    n = 0
    # Walk up the stack looking for '__name__'
    # with a value of '__main__' in frame globals
    for n in range(MAX_FRAMES):
        cur_frame = sys._getframe(n)
        name = cur_frame.f_globals.get('__name__')
        if name == '__main__':
            # Yay - we're in the stack frame of the interactive interpreter!
            # So we update its frame globals with the dict containing our data
            cur_frame.f_globals.update(dct)
            break
</snippet></ROW><ROW><id>18125590</id><snippet>&gt;&gt;&gt; import my_module
&gt;&gt;&gt; my_module.fun('foo')
&gt; /Users/lukasgraf/src/stackoverflow/my_module.py(3)fun()
-&gt; print arg
(Pdb) import debughelper
(Pdb) debughelper.save_to_interactive({'mykey': 42})
(Pdb) c
foo
# We continued PDB, so we're in the outer interpreter again
&gt;&gt;&gt; print mykey
42
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18125622</id><snippet>SIGINT</snippet></ROW><ROW><id>18125622</id><snippet>Ctrl+C</snippet></ROW><ROW><id>18125622</id><snippet>SIGKILL</snippet></ROW><ROW><id>18125622</id><snippet>subprocess.call</snippet></ROW><ROW><id>18125622</id><snippet>proc = subprocess.Popen(['/bin/bash', scriptfile.name])
try:
    proc.wait()
except:
    proc.kill()
    raise
</snippet></ROW><ROW><id>18125821</id><snippet>os.path.join()</snippet></ROW><ROW><id>18125821</id><snippet>/</snippet></ROW><ROW><id>18125821</id><snippet>/tmp</snippet></ROW><ROW><id>18125821</id><snippet>os.path.join(*(elem.lstrip(os.sep) for elem in elements))
</snippet></ROW><ROW><id>18125915</id><snippet>import os
import pandas as pd
import glob
os.chdir("E:/") # change this to the directory where your csv files are stored
csv_files = {} # we store the dataframes in a dictionary
for file in glob.glob("*.csv"): 
    csv_files[file] = pd.read_csv(file)

for dataframe in csv_files.values():
    print dataframe
</snippet></ROW><ROW><id>18126283</id><snippet>collections.OrderedDict()</snippet></ROW><ROW><id>18126283</id><snippet>rows = {}

with open(inputfilename, 'rb') as inputfile:
    reader = csv.reader(inputfile)
    headers = next(reader)  # collect first row as headers for the output
    for row in reader:
        key = (row[0], row[1][:5])
        if key not in rows:
            rows[key] = row + [0,]
        rows[key][-1] += 1  # count

with open('myfilewithoutduplicates.csv', 'wb') as outputfile:
    writer = csv.writer(outputfile)
    writer.writerow(headers + ['Count'])
    writer.writerows(rows.itervalues())
</snippet></ROW><ROW><id>18126442</id><snippet>\</snippet></ROW><ROW><id>18126442</id><snippet>\\</snippet></ROW><ROW><id>18126442</id><snippet>r'test String'</snippet></ROW><ROW><id>18126442</id><snippet>open(r'C:\Programming Test Folder\test_file.py')
</snippet></ROW><ROW><id>18126442</id><snippet>g=open(r'C:\Users\Tor\Desktop\Python files\retning\retning{}.txt'.format(sector), 'a')
</snippet></ROW><ROW><id>18126442</id><snippet>/</snippet></ROW><ROW><id>18126442</id><snippet>g=open('C:/Users/Tor/Desktop/Python files/retning/retning'+sector+'.txt', 'a')
</snippet></ROW><ROW><id>18126678</id><snippet>type</snippet></ROW><ROW><id>18126678</id><snippet>Foo</snippet></ROW><ROW><id>18126678</id><snippet>foo = Foo(...)</snippet></ROW><ROW><id>18126678</id><snippet>type</snippet></ROW><ROW><id>18126678</id><snippet>myclass = type(name, bases, clsdict)</snippet></ROW><ROW><id>18126678</id><snippet>type</snippet></ROW><ROW><id>18126678</id><snippet>type</snippet></ROW><ROW><id>18126678</id><snippet>class SuperClass:
    __metaclass__ = Watcher
</snippet></ROW><ROW><id>18126678</id><snippet>Watcher</snippet></ROW><ROW><id>18126678</id><snippet>type</snippet></ROW><ROW><id>18126678</id><snippet>class SuperClass(metaclass=Watcher)
</snippet></ROW><ROW><id>18126678</id><snippet>Superclass = Watcher(name, bases, clsdict)
</snippet></ROW><ROW><id>18126678</id><snippet>name</snippet></ROW><ROW><id>18126678</id><snippet>'Superclass'</snippet></ROW><ROW><id>18126678</id><snippet>bases</snippet></ROW><ROW><id>18126678</id><snippet>(object, )</snippet></ROW><ROW><id>18126678</id><snippet>clsdict</snippet></ROW><ROW><id>18126678</id><snippet>myclass = type(name, bases, clsdict)</snippet></ROW><ROW><id>18126678</id><snippet>__init__</snippet></ROW><ROW><id>18126678</id><snippet>__init__</snippet></ROW><ROW><id>18126678</id><snippet>class Watcher(type):
    def __init__(cls, name, bases, clsdict):
        if len(cls.mro()) &gt; 2:
            print("was subclassed by " + name)
        super(Watcher, cls).__init__(name, bases, clsdict)

class SuperClass:
    __metaclass__ = Watcher


print("foo")

class SubClass0(SuperClass):
  pass

print("bar")

class SubClass1(SuperClass):
  print("test")
</snippet></ROW><ROW><id>18126678</id><snippet>foo
was subclassed by SubClass0
bar
test
was subclassed by SubClass1
</snippet></ROW><ROW><id>18127260</id><snippet>outer</snippet></ROW><ROW><id>18127260</id><snippet>inner</snippet></ROW><ROW><id>18127260</id><snippet>func</snippet></ROW><ROW><id>18127260</id><snippet>outer</snippet></ROW><ROW><id>18127260</id><snippet>inner</snippet></ROW><ROW><id>18127260</id><snippet>func</snippet></ROW><ROW><id>18127260</id><snippet>outer</snippet></ROW><ROW><id>18127260</id><snippet>inner</snippet></ROW><ROW><id>18127260</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(outer)
  2           0 LOAD_CLOSURE             0 (func)
              3 BUILD_TUPLE              1
              6 LOAD_CONST               1 (&lt;code object inner at 0x1079a5ab0, file "&lt;stdin&gt;", line 2&gt;)
              9 MAKE_CLOSURE             0
             12 STORE_FAST               1 (inner)

  4          15 LOAD_FAST                1 (inner)
             18 RETURN_VALUE        
&gt;&gt;&gt; inner = outer(lambda a, b: None)
&gt;&gt;&gt; dis.dis(inner)
  3           0 LOAD_DEREF               0 (func)
              3 LOAD_GLOBAL              0 (arg_inner)
              6 LOAD_FAST                0 (foo)
              9 CALL_FUNCTION            2
             12 POP_TOP             
             13 LOAD_CONST               0 (None)
             16 RETURN_VALUE        
</snippet></ROW><ROW><id>18127260</id><snippet>LOAD_CLOSURE</snippet></ROW><ROW><id>18127260</id><snippet>func</snippet></ROW><ROW><id>18127260</id><snippet>inner</snippet></ROW><ROW><id>18127260</id><snippet>MAKE_CLOSURE</snippet></ROW><ROW><id>18127260</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>18127260</id><snippet>inner</snippet></ROW><ROW><id>18127260</id><snippet>LOAD_DEREF</snippet></ROW><ROW><id>18127260</id><snippet>func</snippet></ROW><ROW><id>18127260</id><snippet>inner</snippet></ROW><ROW><id>18127260</id><snippet>&gt;&gt;&gt; inner.func_closure
(&lt;cell at 0x107a25a28: function object at 0x107a28b18&gt;,)
&gt;&gt;&gt; inner.func_code.co_freevars
('func',)
&gt;&gt;&gt; inner.func_closure[0].cell_contents
&lt;function &lt;lambda&gt; at 0x107a28b18&gt;
</snippet></ROW><ROW><id>18127260</id><snippet>inner</snippet></ROW><ROW><id>18127294</id><snippet>fillna</snippet></ROW><ROW><id>18127294</id><snippet>df.mean()</snippet></ROW><ROW><id>18127294</id><snippet>In [11]: df = pd.DataFrame([[1, np.nan], [np.nan, 4], [5, 6]])

In [12]: df
Out[12]:
    0   1
0   1 NaN
1 NaN   4
2   5   6

In [13]: df.fillna(df.mean())
Out[13]:
   0  1
0  1  5
1  3  4
2  5  6
</snippet></ROW><ROW><id>18127294</id><snippet>df.mean()</snippet></ROW><ROW><id>18127294</id><snippet>In [14]: df.mean()
Out[14]:
0    3
1    5
dtype: float64
</snippet></ROW><ROW><id>18127294</id><snippet>df.mean()</snippet></ROW><ROW><id>18127294</id><snippet>fillna</snippet></ROW><ROW><id>18127294</id><snippet>df.mean().fillna(0)
df.fillna(df.mean().fillna(0))
</snippet></ROW><ROW><id>18127372</id><snippet>X</snippet></ROW><ROW><id>18127372</id><snippet>D = [{11998: 0.27257158100079237, 12114: 0.27024630707640002}, 
     {10085: 0.23909781233007368, 9105: 0.57533007741289421}, 
     {6577: 0.45085059256989168, 6491: 0.5895717192325539}, 
     {5286: 0.4482789582819417, 6178: 0.32295433881928487}]
</snippet></ROW><ROW><id>18127372</id><snippet>for i, d in enumerate(D):
    for j in d:
        d[j] = X[i, j]
</snippet></ROW><ROW><id>18127372</id><snippet>&gt;&gt;&gt; D
[{12114: 4.0, 11998: 2.0}, {9105: 8.0, 10085: 1.0}, {6577: 2.0, 6491: 4.0}, {6178: 8.0, 5286: 1.0}]
</snippet></ROW><ROW><id>18127544</id><snippet>\</snippet></ROW><ROW><id>18127544</id><snippet>\c</snippet></ROW><ROW><id>18127544</id><snippet>\c</snippet></ROW><ROW><id>18127544</id><snippet>"\copy"</snippet></ROW><ROW><id>18127544</id><snippet>\copy</snippet></ROW><ROW><id>18127544</id><snippet>&gt;&gt;&gt; print "\c"
\c
</snippet></ROW><ROW><id>18127544</id><snippet>\copy</snippet></ROW><ROW><id>18127544</id><snippet>psql</snippet></ROW><ROW><id>18127544</id><snippet>psql</snippet></ROW><ROW><id>18127544</id><snippet>psycopg2</snippet></ROW><ROW><id>18127544</id><snippet>COPY</snippet></ROW><ROW><id>18127705</id><snippet>def create_gs_key(filename, rpc=None):
  """Create an encoded key for a Google Storage file.

  The created blob key will include short lived access token using the
  application's service account for authorization.

  This blob key should not be stored permanently as the access token will
  expire.

  Args:
    filename: The filename of the google storage object to create the key for.
    rpc: Optional UserRPC object.

  Returns:
    An encrypted blob key object that also contains a short term access token
      that represents the application's service account.
  """
  rpc = create_gs_key_async(filename, rpc)
  return rpc.get_result()
</snippet></ROW><ROW><id>18127705</id><snippet>create_gs_key</snippet></ROW><ROW><id>18127705</id><snippet>BlobKey</snippet></ROW><ROW><id>18127705</id><snippet>get</snippet></ROW><ROW><id>18127705</id><snippet>delete</snippet></ROW><ROW><id>18127738</id><snippet>&gt;&gt;&gt; a = unicode('bla, blee, bla, blue')
&gt;&gt;&gt; a
u'bla, blee, bla, blue'
&gt;&gt;&gt; a.split(', ')
[u'bla', u'blee', u'bla', u'blue']
&gt;&gt;&gt; set(a.split(', '))
set([u'blee', u'blue', u'bla'])
</snippet></ROW><ROW><id>18127914</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; plaintext = u"MyPassword"
&gt;&gt;&gt; utf_text = plaintext.encode('UTF-16LE')
&gt;&gt;&gt; hashlib.sha1(utf_text).digest().encode('base64')
'QEy4TXy9dNgleLq+IEcjsQDYm0A=\n'
</snippet></ROW><ROW><id>18127914</id><snippet>u</snippet></ROW><ROW><id>18128198</id><snippet>from re import sub

html = '&lt;p align="JUSTIFY"&gt;I &lt;/p&gt;\
&lt;p align="JUSTIFY"&gt; have a question &lt;/p&gt;\
&lt;p align="JUSTIFY"&gt; &lt;/p&gt;\
&lt;p align="JUSTIFY"&gt;The &lt;/p&gt;\
&lt;p align="JUSTIFY"&gt;answer is&lt;/p&gt;\
&lt;p align="JUSTIFY"&gt;not there&lt;/p&gt;\
&lt;p align="JUSTIFY"&gt; &lt;/p&gt;\
&lt;p align="JUSTIFY"&gt;Please&lt;/p&gt;\
&lt;p align="JUSTIFY"&gt;Help&lt;/p&gt;'

print [sub("\s+", " ", x).strip() for x in sub("&lt;.*?&gt;", " ", html).split(" ")]
</snippet></ROW><ROW><id>18128198</id><snippet>['I have a question', 'The answer is not there', 'Please Help']
</snippet></ROW><ROW><id>18128290</id><snippet>data = pd.read_csv('file1.csv', error_bad_lines=False)
</snippet></ROW><ROW><id>18128334</id><snippet>&gt;&gt;&gt; s = 'a\nb\nc\n'  # &lt;-- notice the \n at the end
&gt;&gt;&gt;
&gt;&gt;&gt; s.split('\n')
['a', 'b', 'c', '']
&gt;&gt;&gt;
&gt;&gt;&gt; s.splitlines()
['a', 'b', 'c']
</snippet></ROW><ROW><id>18128334</id><snippet>split()</snippet></ROW><ROW><id>18128334</id><snippet>splitlines()</snippet></ROW><ROW><id>18128334</id><snippet>str</snippet></ROW><ROW><id>18128440</id><snippet>from Tkinter import Toplevel,Message,Button,mainloop

class Demo(Toplevel):
    def __init__(self,title,message,master=None):
        Toplevel.__init__(self,master)
        self.title = title
        msg = Message(self,text=message)
        msg.pack()
        # Use "self.destroy", not "self.distroy"
        button = Button(self, text="Dismiss", command=self.destroy)
        button.pack()

if __name__ == '__main__':
    t1 = Demo("First Toplevel", "some random message text... goes on and on and on...")
    t2 = Demo("No, I don't know!", "I have no idea where the root window came from...")

    mainloop()
</snippet></ROW><ROW><id>18128458</id><snippet>argparse</snippet></ROW><ROW><id>18128458</id><snippet>ConfigParser</snippet></ROW><ROW><id>18128458</id><snippet>%</snippet></ROW><ROW><id>18128458</id><snippet>str.format()</snippet></ROW><ROW><id>18128458</id><snippet>format()</snippet></ROW><ROW><id>18128458</id><snippet>argparse</snippet></ROW><ROW><id>18128458</id><snippet>%</snippet></ROW><ROW><id>18128458</id><snippet>{}</snippet></ROW><ROW><id>18128458</id><snippet>%</snippet></ROW><ROW><id>18128458</id><snippet>str.format()</snippet></ROW><ROW><id>18128458</id><snippet>%</snippet></ROW><ROW><id>18128572</id><snippet>handler.addQuickElement("guid", item['unique_id'])
</snippet></ROW><ROW><id>18128572</id><snippet>handler.addQuickElement('guid isPermaLink="false"', item['unique_id'])
</snippet></ROW><ROW><id>18128572</id><snippet>link</snippet></ROW><ROW><id>18128572</id><snippet>feedgenerator</snippet></ROW><ROW><id>18128572</id><snippet>unique_id</snippet></ROW><ROW><id>18128580</id><snippet>node</snippet></ROW><ROW><id>18128580</id><snippet>['rootrank', 'Root']</snippet></ROW><ROW><id>18128580</id><snippet>rootnode = Node(None, 'rootrank', 'Root')
for match in matches:
    node = rootnode
    for branch in match:
        category, name = branch
        node = Node(node, category, name)
        print [n.ID() for n in node.fullPath()]
</snippet></ROW><ROW><id>18128580</id><snippet>matches</snippet></ROW><ROW><id>18128961</id><snippet>pip</snippet></ROW><ROW><id>18128961</id><snippet>setuptools</snippet></ROW><ROW><id>18128961</id><snippet>python-setuptools</snippet></ROW><ROW><id>18128961</id><snippet>pip</snippet></ROW><ROW><id>18128961</id><snippet>pip</snippet></ROW><ROW><id>18128961</id><snippet>setuptools</snippet></ROW><ROW><id>18128961</id><snippet>pip</snippet></ROW><ROW><id>18128961</id><snippet>setuptools</snippet></ROW><ROW><id>18128961</id><snippet>pip</snippet></ROW><ROW><id>18128961</id><snippet>setuptools</snippet></ROW><ROW><id>18128961</id><snippet>python-pip</snippet></ROW><ROW><id>18128961</id><snippet>python-setuptools</snippet></ROW><ROW><id>18128961</id><snippet>python-setuptools</snippet></ROW><ROW><id>18128961</id><snippet>python-pip</snippet></ROW><ROW><id>18128961</id><snippet>ca-certificates</snippet></ROW><ROW><id>18128961</id><snippet>build-essential</snippet></ROW><ROW><id>18129070</id><snippet>test_</snippet></ROW><ROW><id>18129070</id><snippet>.py</snippet></ROW><ROW><id>18129070</id><snippet>test_</snippet></ROW><ROW><id>18129070</id><snippet>.py</snippet></ROW><ROW><id>18129070</id><snippet>^</snippet></ROW><ROW><id>18129070</id><snippet>$</snippet></ROW><ROW><id>18129070</id><snippet>.</snippet></ROW><ROW><id>18129070</id><snippet>(?&lt;=^test_).+(?=\.py$)
</snippet></ROW><ROW><id>18129245</id><snippet>order.total_price = order.number_of_products.all().aggregate(Sum('price_for_each_item')). 
</snippet></ROW><ROW><id>18129245</id><snippet>def save(self):
        super(Person, self).save()
        self.total_price = self.number_of_products.all().aggregate(Sum('price_for_each_item')). 
        self.save(commit=True)
</snippet></ROW><ROW><id>18129602</id><snippet>get_or_create_path</snippet></ROW><ROW><id>18129622</id><snippet>argmax</snippet></ROW><ROW><id>18129622</id><snippet>In [1]: import numpy as np
In [2]: x = np.random.randn(100)
In [3]: x.max()
Out[3]: 2.6054091710887723 
In [4]: x.argmax()
Out[4]: 27
In [5]: x[27]
Out[5]: 2.6054091710887723
In [6]: x[27] == x.max()
Out[6]: True
</snippet></ROW><ROW><id>18129868</id><snippet>message = input("Type word: ")

print("Capital Letters: %d" % sum(x.isupper() for x in message))
</snippet></ROW><ROW><id>18129868</id><snippet>message = input("Type word: ")

print("Capital Letters: %d" % sum(1 for x in message if x.isupper())
</snippet></ROW><ROW><id>18130052</id><snippet>self.clientSock</snippet></ROW><ROW><id>18130052</id><snippet>None</snippet></ROW><ROW><id>18130052</id><snippet>self.clientSock.send</snippet></ROW><ROW><id>18130052</id><snippet>__init__</snippet></ROW><ROW><id>18130052</id><snippet>Server(...)</snippet></ROW><ROW><id>18130052</id><snippet>run</snippet></ROW><ROW><id>18130052</id><snippet>self.clientSock</snippet></ROW><ROW><id>18130052</id><snippet>Server(...)</snippet></ROW><ROW><id>18130052</id><snippet>__new__</snippet></ROW><ROW><id>18130052</id><snippet>__init__</snippet></ROW><ROW><id>18130052</id><snippet>self.clientSock</snippet></ROW><ROW><id>18130052</id><snippet>None</snippet></ROW><ROW><id>18130052</id><snippet>self.clientSock.send</snippet></ROW><ROW><id>18130052</id><snippet>__new__</snippet></ROW><ROW><id>18130144</id><snippet>os.walk</snippet></ROW><ROW><id>18130144</id><snippet>import os

for root, dirs, files in os.walk(os.join(os.getcwd(), "html_dir"):
    for file in files:
        # do something with the directories
    for dir in dirs:
        # do something with the directories
</snippet></ROW><ROW><id>18130144</id><snippet>with open('file', 'r') as target_file:
    replacement_text = target_file.read()
</snippet></ROW><ROW><id>18130144</id><snippet>import re 

new_html = re.sub(r'&lt;nav id="mainNav"&gt;.*?&lt;/nav&gt;', replacement_text, original_text)
</snippet></ROW><ROW><id>18130309</id><snippet>InterfaceClass</snippet></ROW><ROW><id>18130309</id><snippet>fields = {}
for name, attr in IMember.namesAndDescriptions():
    if isinstance(attr, schema.Field):
        fields['visible_' + name] = schema.Bool(title=u'Display: ' + attr.title)
</snippet></ROW><ROW><id>18130309</id><snippet>from zope.interface.interface import InterfaceClass

IMemberExtended = InterfaceClass('IMemberExtended', (IMember,), fields)
</snippet></ROW><ROW><id>18130309</id><snippet>from zope.interface.interface import InterfaceClass
from zope import schema

def add_visibility_fields(iface):            
    fields = {}
    for name, attr in iface.namesAndDescriptions():
        if isinstance(attr, schema.Field):
            fields['visible_' + name] = schema.Bool(title=u'Display: ' + attr.title)

    return InterfaceClass(iface.__name__, (iface,), fields)
</snippet></ROW><ROW><id>18130309</id><snippet>@add_visibility_fields
class IMember(Interface):
    first_name = schema.TextLine(title=u'first name')
    last_name = schema.TextLine(title=u'last name')
</snippet></ROW><ROW><id>18130309</id><snippet>def add_visibility_fields(iface):            
    fields = {}
    for name, attr in iface.namesAndDescriptions():
        fields[name] = attr
        if isinstance(attr, schema.Field):
            fields['visible_' + name] = schema.Bool(title=u'Display: ' + attr.title)

    return InterfaceClass(iface.__name__, iface.__bases__, fields)
</snippet></ROW><ROW><id>18130309</id><snippet>&gt;&gt;&gt; @add_visibility_fields
... class IMember(Interface):
...     first_name = schema.TextLine(title=u'first name')
...     last_name = schema.TextLine(title=u'last name')
... 
&gt;&gt;&gt; IMember.names()
['visible_last_name', 'first_name', 'last_name', 'visible_first_name']
</snippet></ROW><ROW><id>18130396</id><snippet>if 0 &lt; value &lt; 10:</snippet></ROW><ROW><id>18130396</id><snippet>break</snippet></ROW><ROW><id>18130396</id><snippet>import random

while True:
    value = int(input("Enter the amount of questions would you like to answer: "))
    if 0 &lt; value &lt; 10:
        for i in range(value):
            numb1 = random.randint(0, 12)
            numb2 = random.randint(0, 12)
            answer = numb1 * numb2

            problem = input("What is {0} * {1}? ".format(numb1, numb2))

            if int(problem) == answer:
                print("You are Correct! Great Job!")
            elif int(problem) &gt; answer:
                print("Incorrect, Your answer is too high!")
            elif int(problem) &lt; answer:
                print("Incorrect, your answer is too low!")
        break

    print("Error, please type a number from 1 to 10: ")
</snippet></ROW><ROW><id>18130430</id><snippet>datetime</snippet></ROW><ROW><id>18130430</id><snippet>p.plot(x, y)</snippet></ROW><ROW><id>18130430</id><snippet>ax.plot_date(x, y, 'r-x')</snippet></ROW><ROW><id>18130537</id><snippet>NextURLNo = 0
MaxProcesses = 20
MaxUrls = 100000  # Note this would be better to be len(urllist)
Processes = []

def StartNew():
   """ Start a new subprocess if there is work to do """
   global NextURLNo
   global Processes

   if NextURLNo &lt; MaxUrls:
      proc = subprocess.Popen(['python', 'script.py', urllist[NextURLNo], OnExit])
      print ("Started to Process %s", urllist[NextURLNo])
      NextURLNo += 1
      Processes.append(proc)

def CheckRunning():
   """ Check any running processes and start new ones if there are spare slots."""
   global Processes
   global NextURLNo

   for p in range(len(Processes):0:-1): # Check the processes in reverse order
      if Processes[p].poll(): # If the process hasn't finished will return None
         del Processes[p] # Remove from list - this is why we needed reverse order

   while (len(Processes) &lt; MaxProcesses) and (NextURLNo &lt; MaxUrls): # More to do and some spare slots
      StartNew()

if __name__ == "__main__":
   CheckRunning() # This will start the max processes running
   while (len(Processes) &gt; 0): # Some thing still going on.
      time.sleep(0.1) # You may wish to change the time for this
      CheckRunning()

   print ("Done!")
</snippet></ROW><ROW><id>18130565</id><snippet>\</snippet></ROW><ROW><id>18130565</id><snippet>"C:\\temp\\hello2.py"
</snippet></ROW><ROW><id>18130565</id><snippet>r"C:\temp\hello2.py"
</snippet></ROW><ROW><id>18130565</id><snippet>&gt;&gt;&gt; print "C:\temp\hello2.py"
C:      emp\hello2.py
&gt;&gt;&gt; print "C:\\temp\\hello2.py"
C:\temp\hello2.py
&gt;&gt;&gt; print r"C:\temp\hello2.py"
C:\temp\hello2.py
</snippet></ROW><ROW><id>18131001</id><snippet>izip_longest</snippet></ROW><ROW><id>18131001</id><snippet>from itertools import izip_longest

seen = set()
with open('seen.txt', 'r') as seen_file:
    for lines in izip_longest(*[seen_file]*4):
        name = lines[1].strip()
        seen.add(name)

members = set()
with open('members.txt', 'r') as members_file:
    for lines in izip_longest(*[members_file]*4):
        name = lines[0].strip()
        members.add(name)
</snippet></ROW><ROW><id>18131001</id><snippet>not_seen = members - seen
for member in not_seen: print member
</snippet></ROW><ROW><id>18131048</id><snippet>first_list = []
second_list = []


class MyClass:
    def change_values(self):
        first_list.append('cat')
        second_list[:] = ['cat']

test = MyClass()
test.change_values()
print(first_list)
print(second_list)
</snippet></ROW><ROW><id>18131048</id><snippet>first_list = []
second_list = []


class MyClass:
    def change_values(self):
        first_list.append('cat')
        global second_list
        second_list = ['cat']

test = MyClass()
test.change_values()
print(first_list)
print(second_list)
</snippet></ROW><ROW><id>18131209</id><snippet>import numpy

size = int(input("Enter number of numbers you would like to enter"))
numbers = []
for i in range(size):
    numbers.append(int(input("Please type in number %d" % i)))

median = numpy.median(numbers)  

print(median) 
</snippet></ROW><ROW><id>18131305</id><snippet>^</snippet></ROW><ROW><id>18131305</id><snippet>&gt;&gt;&gt; strs = ".foo bar (foo) bar foo-bar foo_bar foo'bar bar-foo bar, foo."
&gt;&gt;&gt; re.findall('[^\w+]foo[^\w+]', strs)
['.foo ', '(foo)', ' foo-', " foo'", '-foo ', ' foo.']
</snippet></ROW><ROW><id>18131349</id><snippet>&amp;</snippet></ROW><ROW><id>18131349</id><snippet>if flags &amp; os.O_APPEND:
</snippet></ROW><ROW><id>18131349</id><snippet>|</snippet></ROW><ROW><id>18131349</id><snippet>&amp;</snippet></ROW><ROW><id>18131349</id><snippet>if flags | os.O_APPEND</snippet></ROW><ROW><id>18131349</id><snippet>xmp.py</snippet></ROW><ROW><id>18131349</id><snippet>True</snippet></ROW><ROW><id>18131349</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; 0 &amp; os.O_APPEND
0
&gt;&gt;&gt; os.O_APPEND &amp; os.O_APPEND
8
&gt;&gt;&gt; (os.O_RDWR | os.O_CREAT) &amp; os.O_APPEND
0
&gt;&gt;&gt; (os.O_RDWR | os.O_CREAT | os.O_APPEND) &amp; os.O_APPEND
8
</snippet></ROW><ROW><id>18131349</id><snippet>8</snippet></ROW><ROW><id>18131349</id><snippet>os.O_RDONLY</snippet></ROW><ROW><id>18131349</id><snippet>0</snippet></ROW><ROW><id>18131349</id><snippet>if not flags</snippet></ROW><ROW><id>18131349</id><snippet>if flags == os.O_RDONLY</snippet></ROW><ROW><id>18131400</id><snippet>[ x for x in l if x[1] == 1 ]
</snippet></ROW><ROW><id>18131400</id><snippet>for tup in ( x for x in l if x[1] == 1 ):
    ...
</snippet></ROW><ROW><id>18131629</id><snippet>findall()</snippet></ROW><ROW><id>18131629</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>18131629</id><snippet>from collections import defaultdict
import re

regex = re.compile(r'label\("([^"]*)",\s*"([^"]*)"\)')
results = defaultdict(list)

for id_, tag in regex.findall(s):
    results[id_].append(tag)

print results.items()
</snippet></ROW><ROW><id>18131629</id><snippet>list</snippet></ROW><ROW><id>18131629</id><snippet>set</snippet></ROW><ROW><id>18131629</id><snippet>append()</snippet></ROW><ROW><id>18131629</id><snippet>add()</snippet></ROW><ROW><id>18131629</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'label("id1","A") label("id1","B") label("id2", "C") label("id2","A") label("id2","D") label("id3","A")'
&gt;&gt;&gt; regex = re.compile(r'label\("([^"]*)",\s*"([^"]*)"\)')
&gt;&gt;&gt; results = defaultdict(list)
&gt;&gt;&gt; for id_, tag in regex.findall(s):
...     results[id_].append(tag)
... 
&gt;&gt;&gt; results.items()
[('id2', ['C', 'A', 'D']), ('id3', ['A']), ('id1', ['A', 'B'])]
</snippet></ROW><ROW><id>18131824</id><snippet>repr()</snippet></ROW><ROW><id>18131824</id><snippet>.status_code</snippet></ROW><ROW><id>18131824</id><snippet>if r.status_code == 200:
    break
</snippet></ROW><ROW><id>18131851</id><snippet>sorted_list = sorted(my_list)
return sorted_list == range(sorted_list[0],sorted_list[-1]+1)
</snippet></ROW><ROW><id>18131851</id><snippet>return my_list == range(my_list[0],my_list[-1]+1)
</snippet></ROW><ROW><id>18131851</id><snippet>list(range(...))</snippet></ROW><ROW><id>18132205</id><snippet>Proces(..).start()</snippet></ROW><ROW><id>18132205</id><snippet>s</snippet></ROW><ROW><id>18132205</id><snippet>c</snippet></ROW><ROW><id>18132205</id><snippet>''</snippet></ROW><ROW><id>18132205</id><snippet>if __name__ == "__main__":
    req_pipe, rep_pipe = Pipe()
    addr = "tcp://127.0.0.1:1235"
    s = Process(target=server,args=(addr,))
    s.start()
    c = Process(target=client,args=(addr,rep_pipe))
    c.start()
    for i in range(10):
        req_pipe.send(i)
    req_pipe.send('') # End of data.

    c.join()
    s.join()
</snippet></ROW><ROW><id>18132353</id><snippet>"a"</snippet></ROW><ROW><id>18132353</id><snippet>"w"</snippet></ROW><ROW><id>18132353</id><snippet>Database = open("C:\\Users\Dark Ariel7\\Desktop\\USB BAckup\\Scripts\\Database.txt", "a", encoding='utf-8')
</snippet></ROW><ROW><id>18132353</id><snippet>\</snippet></ROW><ROW><id>18132353</id><snippet>with</snippet></ROW><ROW><id>18132749</id><snippet>target -= expression</snippet></ROW><ROW><id>18132749</id><snippet>target = target.__isub__(expression)</snippet></ROW><ROW><id>18132749</id><snippet>__i...__</snippet></ROW><ROW><id>18132749</id><snippet>+</snippet></ROW><ROW><id>18132749</id><snippet>*</snippet></ROW><ROW><id>18132749</id><snippet>-</snippet></ROW><ROW><id>18132749</id><snippet>x -= 1
y -= 2
</snippet></ROW><ROW><id>18132749</id><snippet>operator</snippet></ROW><ROW><id>18132749</id><snippet>zip()</snippet></ROW><ROW><id>18132749</id><snippet>operator.isub</snippet></ROW><ROW><id>18132749</id><snippet>itertools.starmap()</snippet></ROW><ROW><id>18132749</id><snippet>from operator import sub
from itertools import starmap

x, y = starmap(operator.isub, zip((x, y), (1, 2)))
</snippet></ROW><ROW><id>18132749</id><snippet>isub</snippet></ROW><ROW><id>18132749</id><snippet>x, y = (val - delta for val, delta in zip((x, y), (1, 2)))
</snippet></ROW><ROW><id>18132811</id><snippet>pytz</snippet></ROW><ROW><id>18132811</id><snippet>tzinfo</snippet></ROW><ROW><id>18132811</id><snippet>tzone._utc_transition_times</snippet></ROW><ROW><id>18132811</id><snippet>tzone._transition_info</snippet></ROW><ROW><id>18132811</id><snippet>pytz</snippet></ROW><ROW><id>18132811</id><snippet>std_date.strftime('%z')</snippet></ROW><ROW><id>18132811</id><snippet>import pytz
import datetime as DT

NOW = DT.datetime.now()
ZERO = DT.timedelta(0)

for tname in pytz.common_timezones:
    tzone = pytz.timezone(tname)
    std_date = None
    try:
        for utcdate, info in zip(
                tzone._utc_transition_times, tzone._transition_info):
            utcoffset, dstoffset, tzname = info
            if dstoffset == ZERO:
                std_date = utcdate
            if utcdate &gt; NOW:
                break
    except AttributeError:
        std_date = NOW
    std_date = tzone.localize(std_date)    
    print('{n} UTC{z}'.format(n=tname, z=std_date.strftime('%z')))
</snippet></ROW><ROW><id>18132811</id><snippet>Africa/Abidjan UTC+0000
Africa/Accra UTC+0000
Africa/Addis_Ababa UTC+0235
Africa/Algiers UTC+0000
Africa/Asmara UTC+0235
Africa/Bamako UTC+0000
Africa/Bangui UTC+0114
Africa/Banjul UTC+0000
...
</snippet></ROW><ROW><id>18132924</id><snippet>in</snippet></ROW><ROW><id>18132924</id><snippet>if first in letter:</snippet></ROW><ROW><id>18132924</id><snippet>&gt;&gt;&gt; letter = ["a", "b", "c"]
&gt;&gt;&gt; word = raw_input('Enter a word:')
Enter a word:ant
&gt;&gt;&gt; first = word[0]
&gt;&gt;&gt; first in letter
True
</snippet></ROW><ROW><id>18132924</id><snippet>&gt;&gt;&gt; word = raw_input('Enter a word:')
Enter a word:python
&gt;&gt;&gt; first = word[0]
&gt;&gt;&gt; first in letter
False
</snippet></ROW><ROW><id>18133011</id><snippet>num % 2</snippet></ROW><ROW><id>18133011</id><snippet>True</snippet></ROW><ROW><id>18133011</id><snippet>False</snippet></ROW><ROW><id>18133011</id><snippet>True</snippet></ROW><ROW><id>18133011</id><snippet>return True</snippet></ROW><ROW><id>18133011</id><snippet>return False</snippet></ROW><ROW><id>18133011</id><snippet>def is_prime(x):
    if x &lt; 2:
        print ('Please enter a number &gt;= 2.')
    else:
        if x == 2 or x == 3 or x == 5:
            return True
        if x == 4:
            return False
        for num in range (2, int(x/2)):
            if x % num == 0:
                return False
        return True


&gt;&gt;&gt; is_prime(11)
True
&gt;&gt;&gt; is_prime(9)
False
</snippet></ROW><ROW><id>18133011</id><snippet>break</snippet></ROW><ROW><id>18133011</id><snippet>return</snippet></ROW><ROW><id>18133218</id><snippet>def missingint(i,j):
    return 3-i-j
</snippet></ROW><ROW><id>18133218</id><snippet>missingint(0,1) == 2
missingint(1,0) == 2
missingint(0,2) == 1
missingint(2,0) == 1
missingint(1,2) == 0
missingint(2,1) == 0
</snippet></ROW><ROW><id>18133218</id><snippet>def missingint(whole_list , other_values):
    return sum( whole_list ) - sum( other_values )
</snippet></ROW><ROW><id>18133218</id><snippet>def missingint(i,j,k):
    return 40-i-j-k
</snippet></ROW><ROW><id>18133335</id><snippet>csv</snippet></ROW><ROW><id>18133335</id><snippet>import random
import csv
import os

os.remove("train_select.csv")

file_size=700
f=open("train.csv",'r')
o=open("train_select.csv", 'w')

f.seek(0)
random_line=f.readline()
o.write(random_line)

for i in range(0,20):
    offset=random.randrange(file_size)
    f.seek(offset)
    f.readline()
    random_line=f.readline()
    o.write(random_line)


f.close()
o.close()
</snippet></ROW><ROW><id>18133444</id><snippet>pygame.event</snippet></ROW><ROW><id>18133444</id><snippet>NOEVENT</snippet></ROW><ROW><id>18133444</id><snippet>NUMEVENTS</snippet></ROW><ROW><id>18133444</id><snippet>USEREVENT</snippet></ROW><ROW><id>18133444</id><snippet>NUMEVENTS</snippet></ROW><ROW><id>18133444</id><snippet>USEREVENT</snippet></ROW><ROW><id>18133444</id><snippet>ADDINPUTCOMPONENT = USEREVENT + 15
</snippet></ROW><ROW><id>18133444</id><snippet>USEREVENT + 1</snippet></ROW><ROW><id>18133725</id><snippet>[np.all((x[i], y[i])) for i in range(1000)]
</snippet></ROW><ROW><id>18133725</id><snippet>x = []
for i in range(1000):
    x.append(numpy.all((x[i],y[i])))
</snippet></ROW><ROW><id>18133725</id><snippet>timeit.timeit('all(x)','x = numpy.arange(1,100000)',number=1)
#~.0175
timeit.timeit('numpy.all(x)','x = numpy.arange(1,100000)',number=1)
#~.00043
</snippet></ROW><ROW><id>18133761</id><snippet>0</snippet></ROW><ROW><id>18133761</id><snippet>image.width</snippet></ROW><ROW><id>18133761</id><snippet>0</snippet></ROW><ROW><id>18133761</id><snippet>image.height</snippet></ROW><ROW><id>18133761</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# Create a random image 200x360
image = np.random.randn(200, 360)


# Create a sin function from x = 0 - 360, y = -100 - 100
x = np.arange(0, 360, 0.01)
y = 100 * np.sin(np.pi * x / 180)

figure = plt.figure(dpi=70)
subplot = figure.add_subplot(111)
subplot.set_xlim(0, 360)
subplot.set_ylim(-100, 100)
subplot.imshow(image, extent=[min(x), max(x), min(y), max(y)])
subplot.plot(x, y)

figure.show()
</snippet></ROW><ROW><id>18133834</id><snippet>PurchaseOrder</snippet></ROW><ROW><id>18133834</id><snippet>Product</snippet></ROW><ROW><id>18133834</id><snippet>dollar_amount</snippet></ROW><ROW><id>18133834</id><snippet>save</snippet></ROW><ROW><id>18133834</id><snippet>from decimal import Decimal

class PurchaseOrder(models.Model):
    # Always use a `DecimalField` when you're dealing with currency!!! `FloatField` and the underlying `float` datatype has it's rounding issues, and currency calculations have to be exact. 
    _dollar_amount = models.DecimalField(verbose_name='Total price')

    @property
    def dollar_amount(self):
        if self._dollar_amount is None:
            if self.pk is None:
                # Has never been saved, so we can't do anything to calculate the price here.
                return Decimal(0.0)
            self._dollar_amount = sum(p.price_for_each_item for p in self.product.all())
            self.save(update_fields=['_dollar_amount']) # Or self.save() in Django &lt; v1.5
        return self._dollar_amount
</snippet></ROW><ROW><id>18133834</id><snippet>dollar_amount</snippet></ROW><ROW><id>18133834</id><snippet>add()</snippet></ROW><ROW><id>18133834</id><snippet>delete()</snippet></ROW><ROW><id>18133834</id><snippet>through</snippet></ROW><ROW><id>18133834</id><snippet>from django.db.models import F

class PurchaseOrder(models.Model):
    product = models.ManyToManyField('Product', through='OrderItem')
    dollar_amount = models.DecimalField(verbose_name='Total Price')

class OrderItem(models.Model):
    current_price = models.DecimalField()
    product = models.ForeignKey(Product)
    order = models.ForeignKey(PurchaseOrder)

    def save(self, *args, **kwargs):
        if self.pk is None:
            # new item
            self.current_price = self.product.price_for_each_item
            self.order.dollar_amount = F('dollar_amount') + self.current_price
            self.order.save(update_fields=['dollar_amount']) # Or self.save() in Django &lt; v1.5
        super(OrderItem, self).save(*args, **kwargs)

    def delete(self, *args, **kwargs):
        self.order.dollar_amount = F('dollar_amount') - self.current_price
        self.order.save(update_fields=['dollar_amount']) # Or self.save() in Django &lt; v1.5
        super(OrderItem, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>18133834</id><snippet>self.product.add()</snippet></ROW><ROW><id>18133834</id><snippet>self.product.delete()</snippet></ROW><ROW><id>18133834</id><snippet>OrderItem</snippet></ROW><ROW><id>18133904</id><snippet>datetime.strptime</snippet></ROW><ROW><id>18133904</id><snippet>from dateutil import parser

# sort ascending
print sorted(yourlist, key=lambda k: parser.parse(k['modified']))

# sort descending
print sorted(yourlist, key=lambda k: parser.parse(k['modified']), reverse=True)
</snippet></ROW><ROW><id>18134107</id><snippet>Process</snippet></ROW><ROW><id>18134230</id><snippet>def __init__ (queueFTP):
    # code here should be indented
</snippet></ROW><ROW><id>18134230</id><snippet>__init__</snippet></ROW><ROW><id>18134230</id><snippet>def __init__(queueFTP):
    pass
</snippet></ROW><ROW><id>18134479</id><snippet>input = raw_input("Please enter your numbers separated by commas: ")
inputList = input.split(',')              # creates a list from comma delimeters
intList = [int(i) for i in inputList]     # converts to int list
uniqueList = set(intList)                 # removes duplicates
sortedList = sorted(uniqueList)           # converts to ints and sorts
</snippet></ROW><ROW><id>18134479</id><snippet>input = raw_input("Please enter your words separated by commas: ")
inputList = input.split(',')              # creates a list from comma delimeters
uniqueList = set(inputList)               # removes duplicates
sortedList = sorted(uniqueList)           # converts to ints and sorts
</snippet></ROW><ROW><id>18134666</id><snippet>all</snippet></ROW><ROW><id>18134666</id><snippet>x % num</snippet></ROW><ROW><id>18134666</id><snippet>def factorall(x):
    return all(not x % num for num in nums)
</snippet></ROW><ROW><id>18134666</id><snippet>return all(x % num == 0 for num in nums)
</snippet></ROW><ROW><id>18134795</id><snippet>place</snippet></ROW><ROW><id>18134795</id><snippet>define</snippet></ROW><ROW><id>18134795</id><snippet>name = somewidget()</snippet></ROW><ROW><id>18134795</id><snippet>mGui.mbutton = (mbutton.forget())</snippet></ROW><ROW><id>18134795</id><snippet>command={function name}</snippet></ROW><ROW><id>18134795</id><snippet>.forget()</snippet></ROW><ROW><id>18134795</id><snippet>import sys
import tkinter
from tkinter import *


def next_screen():
    mLabel1.place_forget()
    mbutton.place_forget()

mGui = tkinter.Tk()
mGui.geometry("600x600+545+170")
mGui.title("MyMathDictionary")

mLabel1 = tkinter.Label(text="Welcome to MyMathDictionary. Press Next to continue.",
                        fg="blue", bg="white")
mLabel1.place(x=150, y=200)

mbutton = tkinter.Button(text="Next", command=next_screen)
mbutton.place(x=275, y=230)
</snippet></ROW><ROW><id>18134795</id><snippet>.pack()</snippet></ROW><ROW><id>18134795</id><snippet>.place()</snippet></ROW><ROW><id>18134795</id><snippet>nonetype</snippet></ROW><ROW><id>18134795</id><snippet>widget.place()</snippet></ROW><ROW><id>18134795</id><snippet>mbutton = tkinter.Button(text="Next", command=forget_page1)
mbutton.place(x=275, y=230)

def next_screen(names):
    for widget in names:
        widget.place_forget()   

def forget_page1():
    widgets = [mLabel1, mbutton]
    next_screen(widgets)
    # Code for the creation of page2 widgets

# You could probably make a function for every page, but I'm sure
# someone could come up with a better answer, instead of repeat
# making functions.
def forget_page2():
    widgets = [page2label, page2button, image]
    next_screen(widgets)
    # Code for the creation of the widgets on page3?
</snippet></ROW><ROW><id>18134827</id><snippet>sudo apt-get install libsasl2-dev python-dev libldap2-dev libssl-dev
</snippet></ROW><ROW><id>18134949</id><snippet>python manage.py runserver 8080
</snippet></ROW><ROW><id>18134949</id><snippet>find the process</snippet></ROW><ROW><id>18134949</id><snippet>sudo netstat -tulpn | grep :8000
</snippet></ROW><ROW><id>18134949</id><snippet>kill the process</snippet></ROW><ROW><id>18134949</id><snippet>kill -9 &lt;pid-of-process&gt;
</snippet></ROW><ROW><id>18135015</id><snippet>from bs4 import BeautifulSoup
import urllib

page3 = urllib.urlopen("https://angel.co/uber").read()
soup3 = BeautifulSoup(page3)

desc = soup3.findAll(attrs={"name":"description"}) 
print desc[0]['content'].encode('utf-8')
</snippet></ROW><ROW><id>18135015</id><snippet>Learn about Uber's product, founders, investors and team. Everyone's Private Dri
ver - Request a car from any mobile phoneΓÇötext message, iPhone and Android app
s. Within minutes, a professional driver in a sleek black car will arrive curbsi
de. Automatically charged to your credit card on file, tip included.
</snippet></ROW><ROW><id>18135033</id><snippet>f = open('file')
with f:
    print &gt;&gt; f, "Open"

print f.closed  # True
</snippet></ROW><ROW><id>18135033</id><snippet>file.__enter__</snippet></ROW><ROW><id>18135033</id><snippet>f = open('file')

with f:
    print &gt;&gt; f, "Open"
    with f:
        print &gt;&gt; f, "Open"
    print &gt;&gt; f, "This errors, as the file is already closed"
</snippet></ROW><ROW><id>18135090</id><snippet>min</snippet></ROW><ROW><id>18135090</id><snippet>In [1]: import pandas as pd 
In [2]: df = pd.read_csv('test.cvs', parse_dates=['d1', 'd2', 'd3'])
In [3]: df.ix[2, 'd1'] = None
In [4]: df.ix[1, 'd2'] = None
In [5]: df.ix[4, 'd3'] = None
In [6]: df
Out[6]:
                   d1                  d2                  d3
0 2013-02-07 00:00:00 2013-03-08 00:00:00 2013-05-21 00:00:00
1 2013-02-07 00:00:00                 NaT 2013-05-21 00:00:00
2                 NaT 2013-03-02 00:00:00 2013-05-21 00:00:00
3 2013-02-04 00:00:00 2013-03-08 00:00:00 2013-01-04 00:00:00
4 2013-02-01 00:00:00 2013-03-06 00:00:00                 NaT
In [7]: df.min(axis=1)
Out[7]:
0   2013-02-07 00:00:00
1   2013-02-07 00:00:00
2   2013-03-02 00:00:00
3   2013-01-04 00:00:00
4   2013-02-01 00:00:00
dtype: datetime64[ns]
</snippet></ROW><ROW><id>18135138</id><snippet>data = {'code':'this is the code', 'some':'other', 'stuff':'here'}
</snippet></ROW><ROW><id>18135138</id><snippet>data = ['this is the code', {'some':'other', 'stuff':'here'}]
</snippet></ROW><ROW><id>18135279</id><snippet>def main():
    infile=open("putNamesHere.txt","r")
    outfile=open("getFromHere.txt","w")
    for line in infile:
        line=line.upper()
        mystring=('*'+line.rstrip()+'*\n')
        outfile.write(mystring)
</snippet></ROW><ROW><id>18135435</id><snippet>cost = opts["weightcost_pretrain"].dot(net["weights"][ix1][ix2])
weight = lrate * (CD / nCases - cost)
net["weights"][ix1][ix2] += weight
</snippet></ROW><ROW><id>18135515</id><snippet>&gt;&gt;&gt; %timeit MonteCarlo(df, 5, 1000)
10000 loops, best of 3: 48 us per loop

&gt;&gt;&gt; %timeit MonteCarlo_cy(df, 5, 1000)
100000 loops, best of 3: 3.67 us per loop
</snippet></ROW><ROW><id>18135515</id><snippet>MonteCarlo_cy</snippet></ROW><ROW><id>18135515</id><snippet>%load_ext cythonmagic</snippet></ROW><ROW><id>18135515</id><snippet>%%cython
import numpy as np
cimport numpy as np

def MonteCarlo_cy(double[:, ::1] df, double head, double span):
    # Pick initial truck
    cdef long n = df.shape[0]
    cdef long rnd_truck = np.random.randint(0, n)
    cdef double full_weight = df[rnd_truck, 1]
    cdef double full_length = df[rnd_truck, 2]

    # Loop using other random truck until the bridge is full
    while True:
        rnd_truck = np.random.randint(0, n)
        full_length += head + df[rnd_truck, 2]
        if full_length &gt; span:
            break
        else:
            full_weight += df[rnd_truck, 1]

    # Return average weight per feet on the bridge
    return full_weight / span
</snippet></ROW><ROW><id>18135870</id><snippet>player</snippet></ROW><ROW><id>18135870</id><snippet>__init__()</snippet></ROW><ROW><id>18135870</id><snippet>player</snippet></ROW><ROW><id>18135870</id><snippet>soldier</snippet></ROW><ROW><id>18135870</id><snippet>__init__()</snippet></ROW><ROW><id>18135870</id><snippet>soldier</snippet></ROW><ROW><id>18135870</id><snippet>class Soldier(Player):
    def __init__(self, username, age, weight, height, gender):
        # call parent class to set up the standard player attributes
        Player.__init__(self, username, age, weight, height, gender)
        # now also define a soldier-specific attribute
        self.strength = weight*height*2
</snippet></ROW><ROW><id>18135870</id><snippet>Soldier</snippet></ROW><ROW><id>18135870</id><snippet>Player</snippet></ROW><ROW><id>18135870</id><snippet>character_obj = Soldier(player_username, player_age, player_weight, player_height, player_gender)
print character_obj.strength
</snippet></ROW><ROW><id>18135870</id><snippet>class Soldier(Player):
</snippet></ROW><ROW><id>18135870</id><snippet>Player</snippet></ROW><ROW><id>18135870</id><snippet>Soldier</snippet></ROW><ROW><id>18135870</id><snippet>Soldier</snippet></ROW><ROW><id>18135870</id><snippet>Player</snippet></ROW><ROW><id>18135870</id><snippet>Player</snippet></ROW><ROW><id>18135870</id><snippet>Soldier</snippet></ROW><ROW><id>18135870</id><snippet>Player</snippet></ROW><ROW><id>18135870</id><snippet>Player</snippet></ROW><ROW><id>18135870</id><snippet>Soldier</snippet></ROW><ROW><id>18135876</id><snippet>RetVal = Shell("&lt;full path to python.exe&gt; " &amp; "&lt;full path to your python script&gt;")
</snippet></ROW><ROW><id>18135876</id><snippet>RetVal = Shell("&lt;full path to python.exe&gt; " &amp; "ActiveWorkBook.Path &amp; \&lt;python script name&gt;")
</snippet></ROW><ROW><id>18136112</id><snippet>os.walk</snippet></ROW><ROW><id>18136112</id><snippet>walk</snippet></ROW><ROW><id>18136112</id><snippet>stat</snippet></ROW><ROW><id>18136112</id><snippet>ctypes</snippet></ROW><ROW><id>18136112</id><snippet>scandir</snippet></ROW><ROW><id>18136180</id><snippet>from collections import Counter

counts = Counter()

for d in bunch_of_dicts:
    counts.update(d)
</snippet></ROW><ROW><id>18136377</id><snippet>values = ('{0}'.format(root.iter(item)) for item in some_list)
for i, value in enumerate(values):
    # ...
</snippet></ROW><ROW><id>18136377</id><snippet>'{0}'.format(foo)</snippet></ROW><ROW><id>18136377</id><snippet>str(foo)</snippet></ROW><ROW><id>18136377</id><snippet>values = (root.iter(item) for item in some_list)
for i, value in enumerate(values):
    # ...
</snippet></ROW><ROW><id>18136377</id><snippet>map(root.iter, some_list)</snippet></ROW><ROW><id>18136377</id><snippet>some_list</snippet></ROW><ROW><id>18136446</id><snippet>sys.stdout</snippet></ROW><ROW><id>18136446</id><snippet>StringIO.StringIO()</snippet></ROW><ROW><id>18136446</id><snippet>stdout</snippet></ROW><ROW><id>18136446</id><snippet>import sys
from StringIO import StringIO

sys.stdout = StringIO()
</snippet></ROW><ROW><id>18136446</id><snippet>sys.stdout.getvalue()</snippet></ROW><ROW><id>18136446</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; sys.stdout = StringIO()
&gt;&gt;&gt; print 'Hello world!'
&gt;&gt;&gt; output = sys.stdout.getvalue()
&gt;&gt;&gt; sys.stdout = sys.__stdout__
&gt;&gt;&gt; output
'Hello world!\n'
</snippet></ROW><ROW><id>18136446</id><snippet>sys.stdout</snippet></ROW><ROW><id>18136446</id><snippet>sys.__stdout__</snippet></ROW><ROW><id>18136446</id><snippet>sys.stdout</snippet></ROW><ROW><id>18136446</id><snippet>sys.stdout</snippet></ROW><ROW><id>18136478</id><snippet>isinstance</snippet></ROW><ROW><id>18136478</id><snippet>if isinstance(v, dict):</snippet></ROW><ROW><id>18136478</id><snippet>m</snippet></ROW><ROW><id>18136478</id><snippet>def recurse(yaml_data, m):
    for k,v in yaml_data.iteritems():
        if isinstance(v, dict):
            # m = m + "." + k
            recurse(v, m + "." + k)
        else:
            m = m + "." + k
            print str(m)+ " " +str(v)

# In [4]: recurse(yaml_data, 'system')
# system.treeroot.branch2.branch2-1.name 4
# system.treeroot.branch2.name 3
# system.treeroot.branch1.branch1-1.name 2
# system.treeroot.branch1.name 1
</snippet></ROW><ROW><id>18136579</id><snippet>if filename.endswith(('.txt','.doc')):
    os.remove(filename)
</snippet></ROW><ROW><id>18136579</id><snippet>if not filename.endswith('.html'):
    os.remove(filename)
</snippet></ROW><ROW><id>18136579</id><snippet>.endswith</snippet></ROW><ROW><id>18136579</id><snippet>True</snippet></ROW><ROW><id>18136579</id><snippet>if not filename.endswith(('.html','.txt')):
    os.remove(filename)
</snippet></ROW><ROW><id>18136625</id><snippet>tail -n 10 -f /var/log/httpd/error_log
</snippet></ROW><ROW><id>18136716</id><snippet>proc = subprocess.Popen("ls -z", shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
out, err = proc.communicate()
assert proc.returncode == 0, 'i am sad'
print out
print err
</snippet></ROW><ROW><id>18136871</id><snippet>&gt;&gt;&gt; #Initialize test list with 2 numpy float64 values
&gt;&gt;&gt; test = [numpy.float64(456),numpy.float64(456)]
&gt;&gt;&gt; #Attempting to insert a list containing only numpy data types will error
&gt;&gt;&gt; ws.Range(ws.Cells(1,1),ws.Cells(1,2)).value = test
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
  File "C:\Python32\lib\site-packages\win32com\client\dynamic.py", line 570, in __setattr__
    self._oleobj_.Invoke(entry.dispid, 0, invoke_type, 0, value)
MemoryError: CreatingSafeArray
&gt;&gt;&gt; #Changing one of the values to any other standard python data type will allow the list to be inserted
&gt;&gt;&gt; test[1] = 'test'
&gt;&gt;&gt; ws.Range(ws.Cells(1,1),ws.Cells(1,2)).value = test
# A list with multiple numpy data types will error upon insertion
&gt;&gt;&gt; test.append(numpy.int64(456))
&gt;&gt;&gt; ws.Range(ws.Cells(1,1),ws.Cells(1,3)).value = test
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
  File "C:\Python32\lib\site-packages\win32com\client\dynamic.py", line 570, in __setattr__
    self._oleobj_.Invoke(entry.dispid, 0, invoke_type, 0, value)
MemoryError: CreatingSafeArray
&gt;&gt;&gt; """ Conclusion: A list can be inserted only if all of the numpy data types are the same and there is a built-in data type in the list as well """
&gt;&gt;&gt; test[2] = numpy.float64(test[2])
&gt;&gt;&gt; ws.Range(ws.Cells(1,1),ws.Cells(1,3)).value = test
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18136922</id><snippet>- avoid Python `for` loops
- create a function that can deal with vectorized inputs
</snippet></ROW><ROW><id>18136922</id><snippet>def f(xs, ys)
    return x**2 + y**2 + x*y
</snippet></ROW><ROW><id>18136922</id><snippet>xs</snippet></ROW><ROW><id>18136922</id><snippet>ys</snippet></ROW><ROW><id>18136922</id><snippet>xs = np.random.random((100,200))
ys = np.random.random((100,200))

f(xs,ys) 
</snippet></ROW><ROW><id>18136922</id><snippet>numpy</snippet></ROW><ROW><id>18136974</id><snippet>try:
    __import__(sys.argv[1])
except Exception as e:
    my_traceback = sys.exc_info()[2]
</snippet></ROW><ROW><id>18136984</id><snippet>min</snippet></ROW><ROW><id>18136984</id><snippet>var</snippet></ROW><ROW><id>18136984</id><snippet>var = min(var, 1.0)
</snippet></ROW><ROW><id>18137079</id><snippet>scrapy</snippet></ROW><ROW><id>18137194</id><snippet>os.path.getsize</snippet></ROW><ROW><id>18137194</id><snippet>&gt;&gt;&gt; with open('name with spaces', 'w') as f:
...     f.write('abc\n')
&gt;&gt;&gt; os.path.getsize('name with spaces')
4
</snippet></ROW><ROW><id>18137194</id><snippet>os.system</snippet></ROW><ROW><id>18137194</id><snippet>subprocess.foo</snippet></ROW><ROW><id>18137194</id><snippet>logfile.txt</snippet></ROW><ROW><id>18137194</id><snippet>/Volumes/My Drive/My Scans/Batch 1/foo bar.tif
/Volumes/My Drive/My Scans/Batch 1/spam eggs.tif
/Volumes/My Drive/My Scans/Batch 2/another long name.tif
</snippet></ROW><ROW><id>18137194</id><snippet>with open('logfile.txt') as logf:
    for line in logf:
        with open(line.rstrip()) as f:
            do_something_with_tiff_file(f)
</snippet></ROW><ROW><id>18137194</id><snippet>*</snippet></ROW><ROW><id>18137194</id><snippet>with open('logfile.txt') as logf:
    for line in logf:
        for path in glob.glob(line.rstrip()):
            with open(path) as f:
                do_something_with_tiff_file(f)
</snippet></ROW><ROW><id>18137194</id><snippet>decode('string_escape')</snippet></ROW><ROW><id>18137250</id><snippet>(\s*[\wśą-]+)+
</snippet></ROW><ROW><id>18137250</id><snippet>[\s\wśą-]+
</snippet></ROW><ROW><id>18137250</id><snippet>(</snippet></ROW><ROW><id>18137412</id><snippet>p1.stdin.write('this is a good idea\n')
</snippet></ROW><ROW><id>18137412</id><snippet>p1.stdin.flush()</snippet></ROW><ROW><id>18137429</id><snippet>re.search(
    re.compile(
        ''.format('|'.join(map(re.escape, kand))), 
        corpus.raw(fileid)))
</snippet></ROW><ROW><id>18137429</id><snippet>corpus.raw(fileid)</snippet></ROW><ROW><id>18137429</id><snippet>re.compile</snippet></ROW><ROW><id>18137429</id><snippet>re.search</snippet></ROW><ROW><id>18137429</id><snippet>flags</snippet></ROW><ROW><id>18137429</id><snippet>re.compile</snippet></ROW><ROW><id>18137429</id><snippet>&amp;</snippet></ROW><ROW><id>18137429</id><snippet>TypeError</snippet></ROW><ROW><id>18137429</id><snippet>re.search</snippet></ROW><ROW><id>18137429</id><snippet>TypeError</snippet></ROW><ROW><id>18137429</id><snippet>escaped_kand = map(re.escape, kand)
alternation = '|'.join(escaped_kand)
whatever_this_was_supposed_to_do = ''.format(alternation)
regexpr = re.compile(whatever_this_was_supposed_to_do, corpus.raw(fileid))
re.search(regexpr)
</snippet></ROW><ROW><id>18137429</id><snippet>re.search</snippet></ROW><ROW><id>18137429</id><snippet>re.compile</snippet></ROW><ROW><id>18137429</id><snippet>match()</snippet></ROW><ROW><id>18137429</id><snippet>search()</snippet></ROW><ROW><id>18137429</id><snippet>search</snippet></ROW><ROW><id>18137429</id><snippet>re.search</snippet></ROW><ROW><id>18137429</id><snippet>''.format(anything)</snippet></ROW><ROW><id>18137429</id><snippet>''</snippet></ROW><ROW><id>18137592</id><snippet>np.log2</snippet></ROW><ROW><id>18137592</id><snippet>lambda</snippet></ROW><ROW><id>18137592</id><snippet>df.groupby('type').apply(lambda x: np.mean(np.log2(x['v'])))
</snippet></ROW><ROW><id>18137592</id><snippet>df['w'] = [5, 6, 7,8]

def foo(x):
     return x._get_numeric_data().apply(axis=0, func=np.log2).mean()

df.groupby('type').apply(foo)

#              v         w
# type                    
# X     0.000000  2.321928
# Y     1.528321  2.797439
</snippet></ROW><ROW><id>18137650</id><snippet>class LargeThing(object):
    def __init__(self):
        self.x = 6
    def large_func(self):
        self.small_func_that_will_increment_x()
        self.small_func()
        # ...
    def small_func_that_will_increment_x(self):
        self.x += 1
</snippet></ROW><ROW><id>18137650</id><snippet>self.x = 6</snippet></ROW><ROW><id>18137650</id><snippet>__init__</snippet></ROW><ROW><id>18137650</id><snippet>large_func</snippet></ROW><ROW><id>18137669</id><snippet>curses</snippet></ROW><ROW><id>18137669</id><snippet>conio</snippet></ROW><ROW><id>18137669</id><snippet>msvcrt</snippet></ROW><ROW><id>18137669</id><snippet>tty</snippet></ROW><ROW><id>18137669</id><snippet>select</snippet></ROW><ROW><id>18137669</id><snippet>stdin</snippet></ROW><ROW><id>18137669</id><snippet>cursor = itertools.repeat(r'|/-\')
while True:
    if msvcrt.khbit():
        return msvcrt.getwch()
    msvcrt.putwch('\008')
    msvcrt.putwch(next(cursor))
    time.sleep(0.1)
</snippet></ROW><ROW><id>18137683</id><snippet>main.py</snippet></ROW><ROW><id>18137683</id><snippet>main.py</snippet></ROW><ROW><id>18137683</id><snippet>from first '''Python File Name''' import *
from Tkinter import *
import tkMessageBox

root = Tk()
def helloCallBack():
      tkMessageBox.showinfo(hi_function('Joe'))

B = Button(root, text ="Click Me", command = helloCallBack)

B.pack()
root.mainloop()
</snippet></ROW><ROW><id>18137683</id><snippet>first.py</snippet></ROW><ROW><id>18137683</id><snippet>def hi_function(name):
   return 'Hello %s'%(name)
</snippet></ROW><ROW><id>18137683</id><snippet>first.py</snippet></ROW><ROW><id>18137683</id><snippet>main.py</snippet></ROW><ROW><id>18137801</id><snippet>import other_file
other_file.treats = 12
</snippet></ROW><ROW><id>18137801</id><snippet>treats</snippet></ROW><ROW><id>18137801</id><snippet>Pet</snippet></ROW><ROW><id>18137801</id><snippet>other_file</snippet></ROW><ROW><id>18137801</id><snippet>Pet</snippet></ROW><ROW><id>18137801</id><snippet>eat</snippet></ROW><ROW><id>18137801</id><snippet>self.treats</snippet></ROW><ROW><id>18137979</id><snippet>('mainCONTENT','images', 'standard_resolution',)
</snippet></ROW><ROW><id>18137979</id><snippet>('mainCONTENT','images', 'standard_resolution'),
</snippet></ROW><ROW><id>18137979</id><snippet>'tuple' object is not callable</snippet></ROW><ROW><id>18137979</id><snippet>('any','tuple')('arguments')</snippet></ROW><ROW><id>18138009</id><snippet>import csv
import glob
import os

fns = glob.glob('*.csv')

for fn in fns:
    reader=csv.reader(open(fn,"rb"))


    with open (os.path.join('out', fn), 'wb') as f:
        w = csv.writer(f)
        for row in reader:
            if not 'DIF' in row:
                w.writerow(row)
</snippet></ROW><ROW><id>18138058</id><snippet>MinValueValidator</snippet></ROW><ROW><id>18138058</id><snippet>MaxValueValidator</snippet></ROW><ROW><id>18138058</id><snippet>django.core.validators</snippet></ROW><ROW><id>18138058</id><snippet>class ExclusiveMinValueValidator(BaseValidator):
    compare = lambda self, a, b: a &lt;= b
    message = _(u'Ensure this value is greater than %(limit_value)s.')
    code = 'min_value'
</snippet></ROW><ROW><id>18138058</id><snippet>clean</snippet></ROW><ROW><id>18138102</id><snippet>(?P&lt;group_name&gt;...)</snippet></ROW><ROW><id>18138102</id><snippet>(?P&lt;month&gt;\d{1,2})\/(?P&lt;day&gt;\d{1,2})\/(?P&lt;year&gt;\d{4})
</snippet></ROW><ROW><id>18138214</id><snippet>import scipy as sp

a = sp.matrix([1, 2, 3])
b = sp.matrix([4, 5, 6])

In [13]: a.dot(b.transpose())
Out[13]: matrix([[32]])
</snippet></ROW><ROW><id>18138214</id><snippet>In [14]: a.transpose().dot(b)
Out[14]: 
matrix([[ 4,  5,  6],
        [ 8, 10, 12],
        [12, 15, 18]])
</snippet></ROW><ROW><id>18138250</id><snippet>import sys         # top-level

3 + 4              # top-level

x = 0              # top-level

def f():           # top-level
    import os      # not top-level!
    return 3       # not top-level

if x:              # top-level
    print 3        # not top-level
else:
    print 4        # not top-level, but executes as part of an if statement
                   # that is top-level

class TopLevel(object): # top-level
    x = 3          # not top-level, but executes as part of the class statement
    def foo(self): # not top-level, but executes as part of the class statement
        print 5    # not top-level
</snippet></ROW><ROW><id>18138264</id><snippet>';'</snippet></ROW><ROW><id>18138264</id><snippet>&gt;&gt;&gt; "hello;".endswith(('.', ',', ':', '-', ';' '?', '!'))
                                         #    ^
                                         # comma missing
False
</snippet></ROW><ROW><id>18138264</id><snippet>;</snippet></ROW><ROW><id>18138264</id><snippet>?</snippet></ROW><ROW><id>18138264</id><snippet>;?</snippet></ROW><ROW><id>18138264</id><snippet>True</snippet></ROW><ROW><id>18138264</id><snippet>&gt;&gt;&gt; "hello;?".endswith(('.', ',', ':', '-', ';' '?', '!'))
True
</snippet></ROW><ROW><id>18138264</id><snippet>&gt;&gt;&gt; "hello;".endswith(('.', ',', ':', '-', ';', '?', '!'))
True
</snippet></ROW><ROW><id>18138267</id><snippet>Pyramid</snippet></ROW><ROW><id>18138267</id><snippet>events</snippet></ROW><ROW><id>18138267</id><snippet>@subscriber('pyramid.events.NewRequest')
def newrequest(event):
    request = event.request
    if request.remote_addr.startswith('66.'):
        raise SomeException('my custom message')

@view_config(context=SomeException, renderer='string')
def exc_view(exc, request):
    return exc.message
</snippet></ROW><ROW><id>18138550</id><snippet>class Mammal(object):
    def __init__(self, name, feet):
        self.name = name
        self.feet = feet
</snippet></ROW><ROW><id>18138550</id><snippet>me.feet</snippet></ROW><ROW><id>18138550</id><snippet>__init__</snippet></ROW><ROW><id>18138550</id><snippet>__init__</snippet></ROW><ROW><id>18138550</id><snippet>me = Human('Joe', 2)</snippet></ROW><ROW><id>18138550</id><snippet>__init__</snippet></ROW><ROW><id>18138550</id><snippet>class Human(Mammal):
    def __init__(self, name):
        super(Human, self).__init__(name, 2)
</snippet></ROW><ROW><id>18138550</id><snippet>__init__</snippet></ROW><ROW><id>18138640</id><snippet>os.path</snippet></ROW><ROW><id>18138640</id><snippet>os.path</snippet></ROW><ROW><id>18138640</id><snippet>posixpath</snippet></ROW><ROW><id>18138640</id><snippet>os.path.normpath</snippet></ROW><ROW><id>18138682</id><snippet>json.loads</snippet></ROW><ROW><id>18138682</id><snippet>isinstance</snippet></ROW><ROW><id>18138682</id><snippet>if isinstance(dict_or_list, collections.abc.Mapping):
    return [dict_or_list]
else:
    return dict_or_list
</snippet></ROW><ROW><id>18138682</id><snippet>json.loads</snippet></ROW><ROW><id>18138682</id><snippet>Mapping</snippet></ROW><ROW><id>18138682</id><snippet>dict</snippet></ROW><ROW><id>18138682</id><snippet>keys</snippet></ROW><ROW><id>18138687</id><snippet>(&lt;type_1&gt;, &lt;type_2&gt;, &lt;type_3&gt;, e t.c.)</snippet></ROW><ROW><id>18138687</id><snippet>"""
:rtype: (string, int, int)
"""
</snippet></ROW><ROW><id>18138728</id><snippet>count = 1</snippet></ROW><ROW><id>18138728</id><snippet>count</snippet></ROW><ROW><id>18138728</id><snippet>fizz</snippet></ROW><ROW><id>18138728</id><snippet>fizz</snippet></ROW><ROW><id>18138728</id><snippet>fizz</snippet></ROW><ROW><id>18138728</id><snippet>fizz</snippet></ROW><ROW><id>18138728</id><snippet>if</snippet></ROW><ROW><id>18138728</id><snippet>sum()</snippet></ROW><ROW><id>18138728</id><snippet>def fizz_count(x):
    return sum(1 for item in x if item == "fizz")
</snippet></ROW><ROW><id>18138728</id><snippet>list.count(item)</snippet></ROW><ROW><id>18138728</id><snippet>def fizz_count(x):
    return x.count("fizz")
</snippet></ROW><ROW><id>18138754</id><snippet>df.groupby('team').apply(lambda x: ','.join(x.user))
</snippet></ROW><ROW><id>18138754</id><snippet>Series</snippet></ROW><ROW><id>18138754</id><snippet>df.groupby('team').apply(lambda x: list(x.user))
</snippet></ROW><ROW><id>18138754</id><snippet>Series</snippet></ROW><ROW><id>18138754</id><snippet>list</snippet></ROW><ROW><id>18138754</id><snippet>In [33]: df.groupby('team').apply(lambda x: ', '.join(x.user))
Out[33]:
team
a       elmer, daffy, bugs, foghorn, goofy, marvin
b                               dawg, speedy, pepe
c                                   petunia, porky
dtype: object

In [34]: df.groupby('team').apply(lambda x: list(x.user))
Out[34]:
team
a       [elmer, daffy, bugs, foghorn, goofy, marvin]
b                               [dawg, speedy, pepe]
c                                   [petunia, porky]
dtype: object
</snippet></ROW><ROW><id>18138754</id><snippet>Series</snippet></ROW><ROW><id>18138754</id><snippet>list</snippet></ROW><ROW><id>18138754</id><snippet>Series</snippet></ROW><ROW><id>18138807</id><snippet>def swizzle(cls, sel, func):
    oldimp = cls.instanceMethodForSelector_(sel)
    def wrapper(self, *args, **kwargs):
        return func(self, oldimp, *args, **kwargs)
    newmethod = objc.selector(wrapper, 
                              selector=oldimp.selector, signature=oldimp.signature)
    objc.classAddMethod(cls, sel, newmethod)
    return wrapper
</snippet></ROW><ROW><id>18138837</id><snippet>import re
text = "Link(base_url=u'http://www.bing.com/search?q=site%3Asomesite.com', url='http://www.somesite.com/prof.php?pID=478', text='SomeSite -  Professor Rating of Louis Scerbo', tag='a', attrs=[('href', 'http://www.somesite.com/prof.php?pID=478'), ('h', 'ID=SERP,5105.1')])Link(base_url=u'http://www.bing.com/search?q=site%3Asomesite.com', url='http://www.somesite.com/prof.php?pID=527', text='SomeSite -  Professor Rating of Jahan \xe2\x80\xa6', tag='a', attrs=[('href', 'http://www.somesite.com/prof.php?pID=527'), ('h', 'ID=SERP,5118.1')])Link(base_url=u'http://www.bing.com/search?q=site%3Asomesite.com', url='http://www.somesite.com/prof.php?pID=645', text='SomeSite -  Professor Rating of David Kutzik', tag='a', attrs=[('href', 'http://www.somesite.com/prof.php?pID=645'), ('h', 'ID=SERP,5131.1')])"

# Create the regexp object to match the value of 'url'
r = re.compile(" url='(.*?)',", )

# Print all matches
print r.findall(text)

&gt;&gt;&gt;['http://www.somesite.com/prof.php?pID=478', 'http://www.somesite.com/prof.php?pID=527', 'http://www.somesite.com/prof.php?pID=645']
</snippet></ROW><ROW><id>18138909</id><snippet>pick_country</snippet></ROW><ROW><id>18138909</id><snippet>france1()</snippet></ROW><ROW><id>18138909</id><snippet>pick_country()</snippet></ROW><ROW><id>18138909</id><snippet>france1()</snippet></ROW><ROW><id>18138909</id><snippet>pick_country()</snippet></ROW><ROW><id>18138909</id><snippet>return</snippet></ROW><ROW><id>18138909</id><snippet>pick_country</snippet></ROW><ROW><id>18139110</id><snippet>vars()</snippet></ROW><ROW><id>18139110</id><snippet>a = False
b = ""
c = "test"
d = {}
e = []
f = ["Test", "Test"]
g = ("One", "1", "Two", "2")
for k, v in vars().items():
    if not (k.startswith('__') and k.endswith('__')):
        print k,'--',v
</snippet></ROW><ROW><id>18139110</id><snippet>a -- False
c -- test
b -- 
e -- []
d -- {}
g -- ('One', '1', 'Two', '2')
f -- ['Test', 'Test']
</snippet></ROW><ROW><id>18139110</id><snippet>vars</snippet></ROW><ROW><id>18139110</id><snippet>&gt;&gt;&gt; print vars.__doc__
vars([object]) -&gt; dictionary

Without arguments, equivalent to locals().
With an argument, equivalent to object.__dict__.
</snippet></ROW><ROW><id>18139214</id><snippet>import requests, base64

usrPass = "userid:password"
b64Val = base64.b64encode(usrPass)
r=requests.post(api_URL, 
                headers={"Authorization":b64Val},
                data=payload)
</snippet></ROW><ROW><id>18139440</id><snippet>import re

with open('input.txt') as source, open('output.txt', 'w') as target:

    newline = ''
    for line in source:
        match = re.search(r'Stuff', line)
        if match:
            target.write(newline + match.group())
            newline = '\n'
</snippet></ROW><ROW><id>18139440</id><snippet>else: continue</snippet></ROW><ROW><id>18139440</id><snippet>with</snippet></ROW><ROW><id>18139538</id><snippet>verify</snippet></ROW><ROW><id>18139538</id><snippet>False</snippet></ROW><ROW><id>18139538</id><snippet>jira = JIRA(options={'server': 'https://bugs.company.com',
                     'verify': False})
</snippet></ROW><ROW><id>18139924</id><snippet>import re, os, shutil
#directory you wish to copy all the files to.
dst = "c:\path\to\dir"
src = "c:\path\to\src\dir"


with open("file.cproj", 'r') as fread:

    for line in fread:
        match = re.search(r'Include',line)
        if match:
            loc = line.split('"')
            #concatenates destination and source path with subdirectory path and copies file over.
            dst_file_path = "%s\%s" % (dst,loc[1])
            (root,file_name) = os.path.splitext(dst_file_path)


            # Creates directory if one doesn't exist

            if not os.path.isdir(root):
                     os.makedirs(root)

            src_file_path = os.path.normcase("%s/%s" % (src,loc[1]))
            shutil.copyfile(src_file_path,dst_file_path)
            print dst + loc[1]
</snippet></ROW><ROW><id>18139945</id><snippet>#!/usr/bin/env python

from flask import Flask, session

app = Flask(__name__)

@app.route('/')
def run():
    session['tmp'] = 43
    return '43'

if __name__ == '__main__':
    app.secret_key = 'A0Zr98j/3yX R~XHH!jmN]LWX/,?RT'
    app.run()
</snippet></ROW><ROW><id>18140779</id><snippet>unique_with (Default: None)
    A field name (or list of field names) that when taken together 
    with this field, will not have two documents in the collection
    with the same value.
</snippet></ROW><ROW><id>18140779</id><snippet>unique_with</snippet></ROW><ROW><id>18140779</id><snippet>basestring</snippet></ROW><ROW><id>18140779</id><snippet>list</snippet></ROW><ROW><id>18140779</id><snippet>basestring</snippet></ROW><ROW><id>18140779</id><snippet>class WorkoutSchedule(database.Document):
    """ Defines a workout schedule """
    user = database.ReferenceField(User)
    title = database.StringField(
        required=True,
        min_length=3,
        max_length=30,
        unique_with=['user'])
</snippet></ROW><ROW><id>18140967</id><snippet>EXPORT</snippet></ROW><ROW><id>18140967</id><snippet>SYSPROC.ADMIN_CMD()</snippet></ROW><ROW><id>18140967</id><snippet>SYSPROC.ADMIN_CMD()</snippet></ROW><ROW><id>18140967</id><snippet>db2 export ...</snippet></ROW><ROW><id>18140974</id><snippet>length</snippet></ROW><ROW><id>18140974</id><snippet>x = Inversions(numbers[:length // 2], length // 2)
</snippet></ROW><ROW><id>18141051</id><snippet>def cp_files_tmp(src, dest):
    src_files = os.listdir(src)
    for file_name in src_files:
        full_file_name = os.path.join(src, file_name)
        full_destination=os.path.join(dest,file_name)
        if (os.path.isfile(full_file_name)):
            while os.path.exists(full_destination):
                full_destination += ".duplicate"
            shutil.copy(full_file_name, full_destination)

dest = 'C:/temp/'
src_A= 'C:/sil/in/'     
src_B= 'C:/olw/in/'

cp_files_tmp(src_A, dest) # cp files
cp_files_tmp(src_B, dest) # cp files
</snippet></ROW><ROW><id>18141236</id><snippet>cherrypy.config.update(conf)</snippet></ROW><ROW><id>18141236</id><snippet>quickstart</snippet></ROW><ROW><id>18141363</id><snippet>paste -d ',' a.csv b.csv c.csv ... &gt; result.csv
</snippet></ROW><ROW><id>18141368</id><snippet>import subprocess as sp
def hasPHP():
    try:
        sp.check_call(['php', '-v'])
        return True
    except:
        return False
</snippet></ROW><ROW><id>18141368</id><snippet>hasPHP()</snippet></ROW><ROW><id>18141368</id><snippet>True</snippet></ROW><ROW><id>18141368</id><snippet>False</snippet></ROW><ROW><id>18141368</id><snippet>as</snippet></ROW><ROW><id>18141368</id><snippet>import subprocess as sp
</snippet></ROW><ROW><id>18141368</id><snippet>import subprocess
sp = subprocess
del subprocess
</snippet></ROW><ROW><id>18141695</id><snippet>def test_func( newList, myList=None ):
    myList = [] if myList is None else myList     
</snippet></ROW><ROW><id>18141781</id><snippet>return render_to_response('uc/portal/index.html', {'state':state, 'username':username}, context_instance=RequestContext(request))</snippet></ROW><ROW><id>18141781</id><snippet> url(r'^portal/$', 'portal.views.portal'), 
</snippet></ROW><ROW><id>18141781</id><snippet>uc/portal/index.html</snippet></ROW><ROW><id>18141781</id><snippet>url(r'^portal/$', 'portal.views.portal'),</snippet></ROW><ROW><id>18141839</id><snippet>def getSolarFlowtemperature():
    #Open the temperature sensor, read it and process the result
    tfile = open("/sys/bus/w1/devices/28-000003086819/w1_slave")
    text = tfile.read()
    tfile.close()
    temperature_data = text.split()[-1]
    temperature = float(temperature_data[2:])
    temperature = temperature / 1000

    #This while function checks for the error temperatures, and tries to read the sensor again to get a proper value. After 10 tries it stops
    count = 0
    while temperature == -0.062 or temperature == -0.125:
            time.sleep(2)
            count = count + 1
            print 'Temperature error on 28-000003086819, retrying'
            tfile = open("/sys/bus/w1/devices/28-000003086819/w1_slave")
            text = tfile.read()
            tfile.close()
            temperature_data = text.split()[-1]
            temperature = float(temperature_data[2:])
            temperature = temperature / 1000
            if count &gt; 10:
                 break
            else:
                 return(temperature)
</snippet></ROW><ROW><id>18142074</id><snippet>import os
import random

for filepath in ['a.txt', 'b.txt', 'c.txt', 'd.txt', 'e.txt']:
    with open(filepath) as f:
        lines = [line.strip() for line in f]
    print os.path.splitext(os.path.basename(filepath))[0], ':', random.choice(lines)
</snippet></ROW><ROW><id>18142109</id><snippet>&gt;&gt;&gt; li = [["user1", 100], ["user2", 234], ["user3", 131]]
&gt;&gt;&gt; 
&gt;&gt;&gt; import operator
&gt;&gt;&gt; 
&gt;&gt;&gt; sorted(li, key=operator.itemgetter(1))   # Ascending order
[['user1', 100], ['user3', 131], ['user2', 234]]

&gt;&gt;&gt; sorted(li, key=operator.itemgetter(1), reverse=True)  # Reverse Sort
[['user2', 234], ['user3', 131], ['user1', 100]]
</snippet></ROW><ROW><id>18142139</id><snippet>from mechanize import Browser

br = Browser()    
r = br.open("http://www.example.com/")

if r.code == 200:
    for link in br.links():
        print link
else:
    print "Error loading page"
</snippet></ROW><ROW><id>18142139</id><snippet>from BeautifulSoup import BeautifulSoup
import urllib2

html_page = urllib2.urlopen("http://www.example.com")
if html_page.getcode() == 200:
    soup = BeautifulSoup(html_page)
    for link in soup.findAll('a'):
        print link.get('href')
else:
    print "Error loading page"
</snippet></ROW><ROW><id>18142139</id><snippet>urlsearch</snippet></ROW><ROW><id>18142139</id><snippet>@app.route('/search', methods=['POST', 'GET'])
def search():
    error = True
    if request.method == 'POST':
        return request.form['urlsearch']
    else:    
        br = Browser()    
        r = br.open(request.args.get('urlsearch'))

        if r.code == 200:
            return br.links()
        else:
            return "Error loading page"
</snippet></ROW><ROW><id>18142172</id><snippet>def key_length_match(x):
    # only number of values is important
    xs = x.split()
    return len(xs)

def key_unorderd_match(x):
    # only the occurence of values is important
    xs = x.split()
    return (len(xs), set(xs[1:]))

def key_exact_match(x):
    # exact ordering of values is important
    xs = x.split()
    return (len(xs), xs[1:])

lines = (l.strip() for l in open('input.txt', 'r'))
lines = sorted(lines, key=key_unorderd_match, reverse=True)
for l in lines:
    print l
</snippet></ROW><ROW><id>18142414</id><snippet>1 1
2 2
1 3
3 4
1 5
5 6
</snippet></ROW><ROW><id>18142414</id><snippet>In [1]: df = pd.read_table('largefile.txt', header=None, index_col=0)
In [2]: df.loc[2]
Out[2]:
1    2
Name: 2, dtype: int64

In [3]: df.loc[1]
Out[3]:
   1
0
1  1
1  3
1  5
</snippet></ROW><ROW><id>18142414</id><snippet>In [64]: df = pd.read_table('largefile.txt', header=None).groupby(0)
In [65]: df.sum()
Out[65]:
   1
0
1  9
2  2
3  4
5  6
In [66]: df.mean()
Out[66]:
   1
0
1  3
2  2
3  4
5  6    
In [67]: df[0].count()
Out[67]:
0
1    3
2    1
3    1
5    1
dtype: int64
</snippet></ROW><ROW><id>18142414</id><snippet>import sys
d = {}
with open(sys.argv[1]) as fin:
    for line in fin:
        parts = line.split(None, 1)
        d[parts[0]] = d.get(parts[0], []) + [parts[1]]
</snippet></ROW><ROW><id>18142414</id><snippet>import sys
import pandas as pd
df = pd.read_table(sys.argv[1], header=None, index_col=0)
</snippet></ROW><ROW><id>18142414</id><snippet>$ time python test_dict.py largefile.txt
real    1m13.794s
user    1m10.148s
sys     0m3.075s

$ time python test_pandas.py largefile.txt
real    0m10.937s
user    0m9.819s
sys     0m0.504s
</snippet></ROW><ROW><id>18142414</id><snippet>In [1]: import pandas as pd
In [2]: df = pd.read_table('largefile.txt', header=None,
                           sep=' ', index_col=0).sort_index()
In [3]: df.index
Out[3]: Int64Index([0, 1, 1, ..., 9999998, 9999999, 9999999], dtype=int64)
In [4]: df[1][0]
Out[4]: 6301
In [5]: df[1][1].values
Out[5]: array([8936, 5983])
</snippet></ROW><ROW><id>18142448</id><snippet>json.loads()</snippet></ROW><ROW><id>18142448</id><snippet>'content'</snippet></ROW><ROW><id>18142448</id><snippet>&gt;&gt;&gt; test = json.dumps('{"content":{"search_highlight":{},"message_exchanged":{"messagesOnlyToViewee":true,"messagesOnlyToViewer":true},"Certifications":{"certsMpr":{},"empty":{}},"lix_treasury_callout":"B","network_overview":{"lix_deferLoad":"B","lix_showDetail":"control","distance":3,"lix_deferOnload":"B","allow_pivot_search":false,"i18n_S_NETWORK":"xyz\'s Network","facets":{"skill_explicit":{"data":[{"count":5,"name":"Equity Research","value":"2112"},{"count":5,"name":"Equities","value":"462"},{"count":5,"name":"Portfolio Management","value":"480"},{"count":4,"name":"Financial Markets","value":"1371"},{"count":4,"name":"Derivatives","value":"814"},{"count":3,"name":"Mutual Funds","value":"1043"},{"count":3,"name":"Financial Modeling","value":"1245"},{"count":3,"name":"MIS","value":"1303"},{"count":3,"name":"Negotiation","value":"256"},{"count":3,"name":"Trading","value":"283"}],"i18n_skill_explicit":"Skills"},"geo_region":{"data":[{"count":39,"name":"India","value":"in:0"},{"count":30,"name":"Mumbai Area, India","value":"in:7150"},{"count":1,"name":"Hyderabad Area, India","value":"in:6508"},{"count":1,"name":"Chandigarh Area, India","value":"in:6879"},{"count":1,"name":"Kolkata Area, India","value":"in:7003"},{"count":1,"name":"Moradabad Area, India","value":"in:7046"},{"count":1,"name":"Lucknow Area, India","value":"in:7093"},{"count":1,"name":"Bengaluru Area, India","value":"in:7127"},{"count":1,"name":"New Delhi Area, India","value":"in:7151"},{"count":1,"name":"Jaipur Area, India","value":"in:7287"}],"i18n_geo_region":"Location"},"current_company":{"data":[{"count":5,"name":"L&amp;T Mutual Fund","value":"919608"},{"count":2,"name":"IDFC","value":"21175"},{"count":1,"name":"Indiabulls","value":"10359"},{"count":1,"name":"Innodata Inc.","value":"10827"},{"count":1,"name":"Tangoe","value":"11341"},{"count":1,"name":"Philippine National Bank","value":"17277"},{"count":1,"name":"bc","value":"164575"},{"count":1,"name":"Metropolis Health Services (I) Ltd","value":"236316"},{"count":1,"name":"India Infoline Ltd","value":"239538"},{"count":1,"name":"Wadhwa Group","value":"312891"}],"i18n_current_company":"Company"},"education":{"i18n_education":"School","data":[{"count":8,"name":"University of Mumbai","value":"13663"},{"count":1,"name":"Anna University","value":"13412"},{"count":1,"name":"Jawaharlal Nehru Technological University","value":"13520"},{"count":1,"name":"Karnataka State Open University","value":"13530"},{"count":1,"name":"University of Allahabad","value":"13652"},{"count":1,"name":"University of Lucknow","value":"13661"},{"count":1,"name":"West Bengal University of Technology","value":"13686"},{"count":1,"name":"University of Calcutta","value":"20302"},{"count":1,"name":"Welingkar Institute of Management","value":"21296"},{"count":1,"name":"The Institute of Chartered Accountants of India","value":"22460"}]},"industry":{"data":[{"count":22,"name":"Financial Services","value":"43"},{"count":4,"name":"Human Resources","value":"137"},{"count":2,"name":"Real Estate","value":"44"},{"count":2,"name":"Information Technology and Services","value":"96"},{"count":2,"name":"Capital Markets","value":"129"},{"count":1,"name":"Telecommunications","value":"8"},{"count":1,"name":"Hospital &amp; Health Care","value":"14"},{"count":1,"name":"Banking","value":"41"},{"count":1,"name":"Investment Management","value":"46"},{"count":1,"name":"Education Management","value":"69"}],"i18n_industry":"Industry"}},"i18n_not_allow_conn_browse":"xyz does not allow connection browsing.","link__overview_detail":"/profile/profile\\u002dv2\\u002dnetwork\\u002doverview\\u002ddetail?id=131506997&amp;srchFacet=search_facet_param&amp;srchFacetValue=search_facet_value_param&amp;facetResultCount=search_facet_count_param","i18n_count_string":"500+"}}}')
&gt;&gt;&gt; test1 = json.dumps(test)
&gt;&gt;&gt; test2 = json.loads(test1)
&gt;&gt;&gt; test3 = json.loads(test2)
&gt;&gt;&gt; test4 = json.loads(test3)
&gt;&gt;&gt; test4['content']
{u'message_exchanged': {u'messagesOnlyToViewee': True, u'messagesOnlyToViewer': True}, u'search_highlight': {}, u'lix_treasury_callout': u'B', u'Certifications': {u'certsMpr': {}, u'empty': {}}, u'network_overview': {u'lix_showDetail': u'control', u'distance': 3, u'link__overview_detail': u'/profile/profile-v2-network-overview-detail?id=131506997&amp;srchFacet=search_facet_param&amp;srchFacetValue=search_facet_value_param&amp;facetResultCount=search_facet_count_param', u'allow_pivot_search': False, u'facets': {u'current_company': {u'i18n_current_company': u'Company', u'data': [{u'count': 5, u'name': u'L&amp;T Mutual Fund', u'value': u'919608'}, {u'count': 2, u'name': u'IDFC', u'value': u'21175'}, {u'count': 1, u'name': u'Indiabulls', u'value': u'10359'}, {u'count': 1, u'name': u'Innodata Inc.', u'value': u'10827'}, {u'count': 1, u'name': u'Tangoe', u'value': u'11341'}, {u'count': 1, u'name': u'Philippine National Bank', u'value': u'17277'}, {u'count': 1, u'name': u'bc', u'value': u'164575'}, {u'count': 1, u'name': u'Metropolis Health Services (I) Ltd', u'value': u'236316'}, {u'count': 1, u'name': u'India Infoline Ltd', u'value': u'239538'}, {u'count': 1, u'name': u'Wadhwa Group', u'value': u'312891'}]}, u'geo_region': {u'data': [{u'count': 39, u'name': u'India', u'value': u'in:0'}, {u'count': 30, u'name': u'Mumbai Area, India', u'value': u'in:7150'}, {u'count': 1, u'name': u'Hyderabad Area, India', u'value': u'in:6508'}, {u'count': 1, u'name': u'Chandigarh Area, India', u'value': u'in:6879'}, {u'count': 1, u'name': u'Kolkata Area, India', u'value': u'in:7003'}, {u'count': 1, u'name': u'Moradabad Area, India', u'value': u'in:7046'}, {u'count': 1, u'name': u'Lucknow Area, India', u'value': u'in:7093'}, {u'count': 1, u'name': u'Bengaluru Area, India', u'value': u'in:7127'}, {u'count': 1, u'name': u'New Delhi Area, India', u'value': u'in:7151'}, {u'count': 1, u'name': u'Jaipur Area, India', u'value': u'in:7287'}], u'i18n_geo_region': u'Location'}, u'industry': {u'i18n_industry': u'Industry', u'data': [{u'count': 22, u'name': u'Financial Services', u'value': u'43'}, {u'count': 4, u'name': u'Human Resources', u'value': u'137'}, {u'count': 2, u'name': u'Real Estate', u'value': u'44'}, {u'count': 2, u'name': u'Information Technology and Services', u'value': u'96'}, {u'count': 2, u'name': u'Capital Markets', u'value': u'129'}, {u'count': 1, u'name': u'Telecommunications', u'value': u'8'}, {u'count': 1, u'name': u'Hospital &amp; Health Care', u'value': u'14'}, {u'count': 1, u'name': u'Banking', u'value': u'41'}, {u'count': 1, u'name': u'Investment Management', u'value': u'46'}, {u'count': 1, u'name': u'Education Management', u'value': u'69'}]}, u'education': {u'data': [{u'count': 8, u'name': u'University of Mumbai', u'value': u'13663'}, {u'count': 1, u'name': u'Anna University', u'value': u'13412'}, {u'count': 1, u'name': u'Jawaharlal Nehru Technological University', u'value': u'13520'}, {u'count': 1, u'name': u'Karnataka State Open University', u'value': u'13530'}, {u'count': 1, u'name': u'University of Allahabad', u'value': u'13652'}, {u'count': 1, u'name': u'University of Lucknow', u'value': u'13661'}, {u'count': 1, u'name': u'West Bengal University of Technology', u'value': u'13686'}, {u'count': 1, u'name': u'University of Calcutta', u'value': u'20302'}, {u'count': 1, u'name': u'Welingkar Institute of Management', u'value': u'21296'}, {u'count': 1, u'name': u'The Institute of Chartered Accountants of India', u'value': u'22460'}], u'i18n_education': u'School'}, u'skill_explicit': {u'data': [{u'count': 5, u'name': u'Equity Research', u'value': u'2112'}, {u'count': 5, u'name': u'Equities', u'value': u'462'}, {u'count': 5, u'name': u'Portfolio Management', u'value': u'480'}, {u'count': 4, u'name': u'Financial Markets', u'value': u'1371'}, {u'count': 4, u'name': u'Derivatives', u'value': u'814'}, {u'count': 3, u'name': u'Mutual Funds', u'value': u'1043'}, {u'count': 3, u'name': u'Financial Modeling', u'value': u'1245'}, {u'count': 3, u'name': u'MIS', u'value': u'1303'}, {u'count': 3, u'name': u'Negotiation', u'value': u'256'}, {u'count': 3, u'name': u'Trading', u'value': u'283'}], u'i18n_skill_explicit': u'Skills'}}, u'i18n_not_allow_conn_browse': u'xyz does not allow connection browsing.', u'lix_deferLoad': u'B', u'i18n_count_string': u'500+', u'lix_deferOnload': u'B', u'i18n_S_NETWORK': u"xyz's Network"}}
</snippet></ROW><ROW><id>18142448</id><snippet>&gt;&gt;&gt; test = json.loads('{"content":{"search_highlight":{},"message_exchanged":{"messagesOnlyToViewee":true,"messagesOnlyToViewer":true},"Certifications":{"certsMpr":{},"empty":{}},"lix_treasury_callout":"B","network_overview":{"lix_deferLoad":"B","lix_showDetail":"control","distance":3,"lix_deferOnload":"B","allow_pivot_search":false,"i18n_S_NETWORK":"xyz\'s Network","facets":{"skill_explicit":{"data":[{"count":5,"name":"Equity Research","value":"2112"},{"count":5,"name":"Equities","value":"462"},{"count":5,"name":"Portfolio Management","value":"480"},{"count":4,"name":"Financial Markets","value":"1371"},{"count":4,"name":"Derivatives","value":"814"},{"count":3,"name":"Mutual Funds","value":"1043"},{"count":3,"name":"Financial Modeling","value":"1245"},{"count":3,"name":"MIS","value":"1303"},{"count":3,"name":"Negotiation","value":"256"},{"count":3,"name":"Trading","value":"283"}],"i18n_skill_explicit":"Skills"},"geo_region":{"data":[{"count":39,"name":"India","value":"in:0"},{"count":30,"name":"Mumbai Area, India","value":"in:7150"},{"count":1,"name":"Hyderabad Area, India","value":"in:6508"},{"count":1,"name":"Chandigarh Area, India","value":"in:6879"},{"count":1,"name":"Kolkata Area, India","value":"in:7003"},{"count":1,"name":"Moradabad Area, India","value":"in:7046"},{"count":1,"name":"Lucknow Area, India","value":"in:7093"},{"count":1,"name":"Bengaluru Area, India","value":"in:7127"},{"count":1,"name":"New Delhi Area, India","value":"in:7151"},{"count":1,"name":"Jaipur Area, India","value":"in:7287"}],"i18n_geo_region":"Location"},"current_company":{"data":[{"count":5,"name":"L&amp;T Mutual Fund","value":"919608"},{"count":2,"name":"IDFC","value":"21175"},{"count":1,"name":"Indiabulls","value":"10359"},{"count":1,"name":"Innodata Inc.","value":"10827"},{"count":1,"name":"Tangoe","value":"11341"},{"count":1,"name":"Philippine National Bank","value":"17277"},{"count":1,"name":"bc","value":"164575"},{"count":1,"name":"Metropolis Health Services (I) Ltd","value":"236316"},{"count":1,"name":"India Infoline Ltd","value":"239538"},{"count":1,"name":"Wadhwa Group","value":"312891"}],"i18n_current_company":"Company"},"education":{"i18n_education":"School","data":[{"count":8,"name":"University of Mumbai","value":"13663"},{"count":1,"name":"Anna University","value":"13412"},{"count":1,"name":"Jawaharlal Nehru Technological University","value":"13520"},{"count":1,"name":"Karnataka State Open University","value":"13530"},{"count":1,"name":"University of Allahabad","value":"13652"},{"count":1,"name":"University of Lucknow","value":"13661"},{"count":1,"name":"West Bengal University of Technology","value":"13686"},{"count":1,"name":"University of Calcutta","value":"20302"},{"count":1,"name":"Welingkar Institute of Management","value":"21296"},{"count":1,"name":"The Institute of Chartered Accountants of India","value":"22460"}]},"industry":{"data":[{"count":22,"name":"Financial Services","value":"43"},{"count":4,"name":"Human Resources","value":"137"},{"count":2,"name":"Real Estate","value":"44"},{"count":2,"name":"Information Technology and Services","value":"96"},{"count":2,"name":"Capital Markets","value":"129"},{"count":1,"name":"Telecommunications","value":"8"},{"count":1,"name":"Hospital &amp; Health Care","value":"14"},{"count":1,"name":"Banking","value":"41"},{"count":1,"name":"Investment Management","value":"46"},{"count":1,"name":"Education Management","value":"69"}],"i18n_industry":"Industry"}},"i18n_not_allow_conn_browse":"xyz does not allow connection browsing.","link__overview_detail":"/profile/profile\\u002dv2\\u002dnetwork\\u002doverview\\u002ddetail?id=131506997&amp;srchFacet=search_facet_param&amp;srchFacetValue=search_facet_value_param&amp;facetResultCount=search_facet_count_param","i18n_count_string":"500+"}}}')
&gt;&gt;&gt; test['content']
{u'message_exchanged': {u'messagesOnlyToViewee': True, u'messagesOnlyToViewer': True}, u'search_highlight': {}, u'lix_treasury_callout': u'B', u'Certifications': {u'certsMpr': {}, u'empty': {}}, u'network_overview': {u'lix_showDetail': u'control', u'distance': 3, u'link__overview_detail': u'/profile/profile-v2-network-overview-detail?id=131506997&amp;srchFacet=search_facet_param&amp;srchFacetValue=search_facet_value_param&amp;facetResultCount=search_facet_count_param', u'allow_pivot_search': False, u'facets': {u'current_company': {u'i18n_current_company': u'Company', u'data': [{u'count': 5, u'name': u'L&amp;T Mutual Fund', u'value': u'919608'}, {u'count': 2, u'name': u'IDFC', u'value': u'21175'}, {u'count': 1, u'name': u'Indiabulls', u'value': u'10359'}, {u'count': 1, u'name': u'Innodata Inc.', u'value': u'10827'}, {u'count': 1, u'name': u'Tangoe', u'value': u'11341'}, {u'count': 1, u'name': u'Philippine National Bank', u'value': u'17277'}, {u'count': 1, u'name': u'bc', u'value': u'164575'}, {u'count': 1, u'name': u'Metropolis Health Services (I) Ltd', u'value': u'236316'}, {u'count': 1, u'name': u'India Infoline Ltd', u'value': u'239538'}, {u'count': 1, u'name': u'Wadhwa Group', u'value': u'312891'}]}, u'geo_region': {u'data': [{u'count': 39, u'name': u'India', u'value': u'in:0'}, {u'count': 30, u'name': u'Mumbai Area, India', u'value': u'in:7150'}, {u'count': 1, u'name': u'Hyderabad Area, India', u'value': u'in:6508'}, {u'count': 1, u'name': u'Chandigarh Area, India', u'value': u'in:6879'}, {u'count': 1, u'name': u'Kolkata Area, India', u'value': u'in:7003'}, {u'count': 1, u'name': u'Moradabad Area, India', u'value': u'in:7046'}, {u'count': 1, u'name': u'Lucknow Area, India', u'value': u'in:7093'}, {u'count': 1, u'name': u'Bengaluru Area, India', u'value': u'in:7127'}, {u'count': 1, u'name': u'New Delhi Area, India', u'value': u'in:7151'}, {u'count': 1, u'name': u'Jaipur Area, India', u'value': u'in:7287'}], u'i18n_geo_region': u'Location'}, u'industry': {u'i18n_industry': u'Industry', u'data': [{u'count': 22, u'name': u'Financial Services', u'value': u'43'}, {u'count': 4, u'name': u'Human Resources', u'value': u'137'}, {u'count': 2, u'name': u'Real Estate', u'value': u'44'}, {u'count': 2, u'name': u'Information Technology and Services', u'value': u'96'}, {u'count': 2, u'name': u'Capital Markets', u'value': u'129'}, {u'count': 1, u'name': u'Telecommunications', u'value': u'8'}, {u'count': 1, u'name': u'Hospital &amp; Health Care', u'value': u'14'}, {u'count': 1, u'name': u'Banking', u'value': u'41'}, {u'count': 1, u'name': u'Investment Management', u'value': u'46'}, {u'count': 1, u'name': u'Education Management', u'value': u'69'}]}, u'education': {u'data': [{u'count': 8, u'name': u'University of Mumbai', u'value': u'13663'}, {u'count': 1, u'name': u'Anna University', u'value': u'13412'}, {u'count': 1, u'name': u'Jawaharlal Nehru Technological University', u'value': u'13520'}, {u'count': 1, u'name': u'Karnataka State Open University', u'value': u'13530'}, {u'count': 1, u'name': u'University of Allahabad', u'value': u'13652'}, {u'count': 1, u'name': u'University of Lucknow', u'value': u'13661'}, {u'count': 1, u'name': u'West Bengal University of Technology', u'value': u'13686'}, {u'count': 1, u'name': u'University of Calcutta', u'value': u'20302'}, {u'count': 1, u'name': u'Welingkar Institute of Management', u'value': u'21296'}, {u'count': 1, u'name': u'The Institute of Chartered Accountants of India', u'value': u'22460'}], u'i18n_education': u'School'}, u'skill_explicit': {u'data': [{u'count': 5, u'name': u'Equity Research', u'value': u'2112'}, {u'count': 5, u'name': u'Equities', u'value': u'462'}, {u'count': 5, u'name': u'Portfolio Management', u'value': u'480'}, {u'count': 4, u'name': u'Financial Markets', u'value': u'1371'}, {u'count': 4, u'name': u'Derivatives', u'value': u'814'}, {u'count': 3, u'name': u'Mutual Funds', u'value': u'1043'}, {u'count': 3, u'name': u'Financial Modeling', u'value': u'1245'}, {u'count': 3, u'name': u'MIS', u'value': u'1303'}, {u'count': 3, u'name': u'Negotiation', u'value': u'256'}, {u'count': 3, u'name': u'Trading', u'value': u'283'}], u'i18n_skill_explicit': u'Skills'}}, u'i18n_not_allow_conn_browse': u'xyz does not allow connection browsing.', u'lix_deferLoad': u'B', u'i18n_count_string': u'500+', u'lix_deferOnload': u'B', u'i18n_S_NETWORK': u"xyz's Network"}}
</snippet></ROW><ROW><id>18142463</id><snippet>import string
from Crypto.Cipher import AES
from Crypto import Random
from Crypto.Random import random

def gen_cipher():
    # generates 32 letter long key
    key = ''.join(random.sample(string.ascii_letters, 32))
    iv = Random.new().read(AES.block_size)
    cipher = AES.new(key, AES.MODE_CFB, iv)
    return cipher, iv

def write_data(data, rfile, cipher, iv):
    with open(rfile, 'w') as f:
        msg = iv + cipher.encrypt(b'Users cant edit this')
        f.write(msg)

def read_data(rfile, cipher):
    with open(rfile, 'r') as f:
        data = f.read()
        # first 16 bytes are IV
        return cipher.decrypt(data)[16:]

def encrypt_existing_file(infile, outfile, cipher, iv):
    with open(infile, 'r') as if:
        data = if.read()
        write_data(data, outfile, cipher, iv)

def decrypt_existing_file(infile, outfile, cipher, iv):
    with open(outfile, 'r') as of:
        data = read_data(infile)
        of.write(data)

if __name__ == '__main__':
    cipher, iv = gen_cipher()
    write_data(b"You didn't see anything...", 'file.txt', cipher, iv)
    # ...
    # outputs: You didn't see anything...
    print (read_data('file.txt', cipher))
</snippet></ROW><ROW><id>18142592</id><snippet>dict</snippet></ROW><ROW><id>18142592</id><snippet>False</snippet></ROW><ROW><id>18142592</id><snippet>some_var = 2</snippet></ROW><ROW><id>18142592</id><snippet>some_var</snippet></ROW><ROW><id>18142592</id><snippet>2</snippet></ROW><ROW><id>18142592</id><snippet>dict</snippet></ROW><ROW><id>18142592</id><snippet>list</snippet></ROW><ROW><id>18142592</id><snippet>&gt;&gt;&gt; some_dict = {}
&gt;&gt;&gt; some_dict[[0]] = 42   #the key is a list [0], unhashable
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</snippet></ROW><ROW><id>18142819</id><snippet>chmod +x /path/to/script.py</snippet></ROW><ROW><id>18142819</id><snippet>python /path/to/script.py</snippet></ROW><ROW><id>18142819</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>18142819</id><snippet>/path/to/script.py</snippet></ROW><ROW><id>18142819</id><snippet>./script.py</snippet></ROW><ROW><id>18142819</id><snippet>echo $PATH</snippet></ROW><ROW><id>18142819</id><snippet>script.py</snippet></ROW><ROW><id>18142819</id><snippet>script</snippet></ROW><ROW><id>18143060</id><snippet>&gt;&gt;&gt; weights = [(1,2), (2,0), (3, 1)]
&gt;&gt;&gt; numNonZero = (k for k, w in weights if w &gt; 0)
&gt;&gt;&gt; next(numNonZero)
1
&gt;&gt;&gt; next(numNonZero)
3
&gt;&gt;&gt; next(numNonZero)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt; next(numNonZero, -1)
-1
</snippet></ROW><ROW><id>18143060</id><snippet>&gt;&gt;&gt; numNonZero = (k for k, w in weights if w &gt; 0)
&gt;&gt;&gt; for k in numNonZero:
...     print(k)
... 
1
3
</snippet></ROW><ROW><id>18143193</id><snippet>&amp;</snippet></ROW><ROW><id>18143222</id><snippet>9.95000000e-05</snippet></ROW><ROW><id>18143222</id><snippet>9.9500000000000006e-05</snippet></ROW><ROW><id>18143222</id><snippet>9.9499999999999979e-05</snippet></ROW><ROW><id>18143222</id><snippet>In [53]: round(data,7)
Out[53]: array([  9.95000000e-05,   9.95000000e-05,   9.95000000e-05,
         ... 
         ...
         ])
</snippet></ROW><ROW><id>18143222</id><snippet>In [54]: plot(round(data,7))
</snippet></ROW><ROW><id>18143851</id><snippet>/usr/local/bin/uwsgi --http :9090 --wsgi-file restserver.fcgi --callable app
</snippet></ROW><ROW><id>18143851</id><snippet>restserver.fcgi</snippet></ROW><ROW><id>18143851</id><snippet>#!/usr/bin/python
from flup.server.fcgi import WSGIServer
from api import app as application

if __name__ == '__main__':
    WSGIServer(application, bindAddress='/var/run/fcgi.sock').run()
</snippet></ROW><ROW><id>18143851</id><snippet>app</snippet></ROW><ROW><id>18144073</id><snippet>pd_sql.uquery("DELETE FROM mytable", conn)
pd_sql.write_frame(d, 'mytable', conn, if_exists='append')
</snippet></ROW><ROW><id>18144075</id><snippet>t.start()</snippet></ROW><ROW><id>18144075</id><snippet>t.run()</snippet></ROW><ROW><id>18144075</id><snippet>run</snippet></ROW><ROW><id>18144075</id><snippet>a</snippet></ROW><ROW><id>18144403</id><snippet>current = Configuration.query().get() or Configuration()
current.displayName = self.request.get('newDisplayName')
current.starting = self.request.get('newStartingDate')
current.put()
</snippet></ROW><ROW><id>18144403</id><snippet>id = self.request.get('id') or 'default'
config = Configuration.get_by_id(id) or Configuration(id = id)
config.displayName = self.request.get('newDisplayName')
config.starting = self.request.get('newStartingDate')
config.put()
</snippet></ROW><ROW><id>18144415</id><snippet> {{ render_field_with_errors(login_form.password(placeholder="Password", class="span10")) }}
</snippet></ROW><ROW><id>18144415</id><snippet>{{ field(class="span10",placeholder="Password",**kwargs)|safe }}
</snippet></ROW><ROW><id>18144415</id><snippet>&lt;div class=span10&gt; {{render_field_with_errors(loginForm.password) }} &lt;/div&gt;
</snippet></ROW><ROW><id>18144415</id><snippet>{{ render_field_with_errors(login_form.password,placeholder="Password", class="span10") }}
</snippet></ROW><ROW><id>18144537</id><snippet>MANIFEST.in</snippet></ROW><ROW><id>18144537</id><snippet>package_data</snippet></ROW><ROW><id>18144537</id><snippet>MANIFEST.in</snippet></ROW><ROW><id>18144770</id><snippet>fooInitial()</snippet></ROW><ROW><id>18144770</id><snippet>fooInitial()</snippet></ROW><ROW><id>18144770</id><snippet>def barInitial():
    first_name, last_name = 'Bob', 'Jones'
    return first_name, last_name

def fooInitial():
    return barInitial()[0]
</snippet></ROW><ROW><id>18144770</id><snippet>first_name, last_name = barInitial()
</snippet></ROW><ROW><id>18144772</id><snippet>np.savetxt</snippet></ROW><ROW><id>18144772</id><snippet>reshape</snippet></ROW><ROW><id>18144772</id><snippet>np.savetxt('output.txt', a.reshape(a.shape[0]*a.shape[1]*a.shape[2]),
            delimiter=' ', newline='\n')
</snippet></ROW><ROW><id>18144850</id><snippet>test = RubyPython.import("#{Rails.root}/lib/colorific/setup.py")
</snippet></ROW><ROW><id>18144850</id><snippet>$ python setup.py install
</snippet></ROW><ROW><id>18144850</id><snippet>import colorific
</snippet></ROW><ROW><id>18144850</id><snippet>import importlib
importlib.import_module('colorific')
</snippet></ROW><ROW><id>18144850</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>18144850</id><snippet>$ python setup.py install --home=/Users/YourUserName/colorific
</snippet></ROW><ROW><id>18144850</id><snippet>RubyPython.start # start the Python interpreter

sys = RubyPython.import("sys")
sys.path.append("#{Rails.root}/lib")

colorific = RubyPython.import('colorific')


RubyPython.stop
</snippet></ROW><ROW><id>18144850</id><snippet>$ python setup.py install --home=/Users/YourUserName/colorific
</snippet></ROW><ROW><id>18144850</id><snippet>error: bad install directory or PYTHONPATH
</snippet></ROW><ROW><id>18144850</id><snippet>$ python setup.py install 
</snippet></ROW><ROW><id>18144850</id><snippet>colorific-0.2.1-py2.7.egg/
</snippet></ROW><ROW><id>18144850</id><snippet>$ mv /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/colorific-0.2.1-py2.7.egg /Users/7stud/rails_projects/my_app/lib
</snippet></ROW><ROW><id>18144850</id><snippet>RubyPython.start # start the Python interpreter

logger.debug "hello " + "world"

sys = RubyPython.import('sys')
logger.debug sys.path
sys.path.append("#{Rails.root}/lib/colorific-0.2.1-py2.7.egg/")

colorific = RubyPython.import('colorific')
logger.debug colorific.hex_to_rgb("#ffffff")

RubyPython.stop
</snippet></ROW><ROW><id>18144850</id><snippet>hello world
[&lt;Lots of paths here&gt;, '/Users/7stud/rails_projects/test_postgres/lib/colorific-0.2.1-py2.7.egg/']
(255, 255, 255)
</snippet></ROW><ROW><id>18144850</id><snippet>$ rails server</snippet></ROW><ROW><id>18144850</id><snippet>/Users/7stud/.rvm/gems/ruby-2.0.0-p247@railstutorial_rails_4_0/gems/rubypython-0.6.3/lib/rubypython.rb:106: [BUG] Segmentation fault
ruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-darwin10.8.0]

-- Crash Report log information --------------------------------------------
   See Crash Report log file under the one of following:
     * ~/Library/Logs/CrashReporter
     * /Library/Logs/CrashReporter
     * ~/Library/Logs/DiagnosticReports
     * /Library/Logs/DiagnosticReports
   the more detail of.


&lt;1000+ lines of traceback omitted&gt;
</snippet></ROW><ROW><id>18144850</id><snippet>logger.debug "hello " + "world"
</snippet></ROW><ROW><id>18144850</id><snippet>logger.debug "******" + colorific.hex_to_rgb("#ffffff")
</snippet></ROW><ROW><id>18144850</id><snippet>logger.debug "*********" + colorific.hex_to_rgb("#ffffff").rubify
</snippet></ROW><ROW><id>18144865</id><snippet>import problem1
problem1 = reload(problem1)
%timeit problem1.normal_method(10)
</snippet></ROW><ROW><id>18144865</id><snippet>python test.py
</snippet></ROW><ROW><id>18144865</id><snippet>test.py</snippet></ROW><ROW><id>18144865</id><snippet>import numpy as np
from problem1 import normal_method
%timeit normal_method(100)
</snippet></ROW><ROW><id>18144891</id><snippet>Not_An_SMS</snippet></ROW><ROW><id>18144891</id><snippet>notAnSms</snippet></ROW><ROW><id>18144891</id><snippet>word.title()</snippet></ROW><ROW><id>18144891</id><snippet>SMS_status</snippet></ROW><ROW><id>18144891</id><snippet>sMSStatus</snippet></ROW><ROW><id>18144968</id><snippet>In [1]: rng = pd.date_range('2013', freq='D', periods=10)

In [2]: df = pd.DataFrame(np.random.randn(10), rng)

In [3]: df.index.week
Out[3]: array([32, 32, 32, 33, 33, 33, 33, 33, 33, 33], dtype=int32)

In [4]: df.groupby(df.index.week).sum()
Out[4]:
           0
32  3.600673
33  0.791545
</snippet></ROW><ROW><id>18144968</id><snippet>In [5]: df.groupby(df.index.dayofweek).sum()
Out[5]:
          0
0  1.268307
1  0.387322
2  1.416948
3 -0.380844
4  1.464068
5  0.030965
6  0.205453
</snippet></ROW><ROW><id>18144968</id><snippet>apply</snippet></ROW><ROW><id>18145160</id><snippet>newlist</snippet></ROW><ROW><id>18145160</id><snippet>urls</snippet></ROW><ROW><id>18145160</id><snippet>urls = []
for row in rows:
    for key in row.custom:
        urls.append(row.custom[key].text)
</snippet></ROW><ROW><id>18145160</id><snippet>urls</snippet></ROW><ROW><id>18145655</id><snippet>import pandas as pd
from pandas import Series

startdate = Series(pd.date_range('2013-01-01', '2013-01-03'))
enddate = Series(pd.date_range('2013-03-01', '2013-03-03'))

s1 = enddate - startdate
s2 = Series([2, 3, 4])

event_freq = Series(s1.values / s2)
</snippet></ROW><ROW><id>18145655</id><snippet>&gt;&gt;&gt; s1
0   59 days, 00:00:00
1   59 days, 00:00:00
2   59 days, 00:00:00
dtype: timedelta64[ns]

&gt;&gt;&gt; s2
0    2
1    3
2    4
dtype: int64

&gt;&gt;&gt; event_freq
0   29 days, 12:00:00
1   19 days, 16:00:00
2   14 days, 18:00:00
dtype: timedelta64[ns]
</snippet></ROW><ROW><id>18145817</id><snippet>self.fig.canvas.mpl_connect('key_press_event', self.on_key_press)
self.fig.canvas.mpl_connect('key_release_event', self.on_key_release)

...

def on_key_press(self, event):
   if event.key == 'shift':
       self.shift_is_held = True

def on_key_release(self, event):
   if event.key == 'shift':
       self.shift_is_held = False
</snippet></ROW><ROW><id>18145817</id><snippet>onClick</snippet></ROW><ROW><id>18145817</id><snippet>self.shift_is_held</snippet></ROW><ROW><id>18145817</id><snippet>if event.button == 3:
    if self.shift_is_held:
        do_something()
    else:
        do_something_else()
</snippet></ROW><ROW><id>18145825</id><snippet>char a[]</snippet></ROW><ROW><id>18145825</id><snippet>char *a</snippet></ROW><ROW><id>18145825</id><snippet># for a length n array
PciAgentIndex = (c_uint32 * n).in_dll(api, "PciAgentIndex")
</snippet></ROW><ROW><id>18145825</id><snippet>PciAgentIndex = cast(api.PciAgentIndex, POINTER(c_uint32))
</snippet></ROW><ROW><id>18145825</id><snippet>in_dll</snippet></ROW><ROW><id>18145873</id><snippet>buffer()</snippet></ROW><ROW><id>18145873</id><snippet>mmap()</snippet></ROW><ROW><id>18146184</id><snippet>python -m cProfile ./mypythonprogram.py
</snippet></ROW><ROW><id>18146184</id><snippet>gprof</snippet></ROW><ROW><id>18146184</id><snippet>timeit</snippet></ROW><ROW><id>18146184</id><snippet>timeit</snippet></ROW><ROW><id>18146184</id><snippet>cProfile</snippet></ROW><ROW><id>18146184</id><snippet>def foo ():
    for i in range (10):
        i = i * i

from timeit import Timer
max_iter = 10000
t = Timer ("foo()", "from __main__ import foo")
print ("foo(%i): %f seconds" %(max_iter, t.timeit(max_iter)))
</snippet></ROW><ROW><id>18146184</id><snippet>$&gt; python2.7 timeit_example.py
foo(10000): 0.012774 seconds
$&gt; python3.2 timeit_example.py
foo(10000): 0.014030 seconds
</snippet></ROW><ROW><id>18146191</id><snippet>formatter</snippet></ROW><ROW><id>18146191</id><snippet>sp.set_printoptions(formatter={"float": lambda x: '{:.20f}'.format(x)})
</snippet></ROW><ROW><id>18146191</id><snippet>9.71369349e+02</snippet></ROW><ROW><id>18146191</id><snippet>971.36934900000005654874</snippet></ROW><ROW><id>18146307</id><snippet>obj</snippet></ROW><ROW><id>18146307</id><snippet>obj.itervalues()</snippet></ROW><ROW><id>18146307</id><snippet>obj.values()</snippet></ROW><ROW><id>18146307</id><snippet>for value in obj.itervalues():
   store.append(value)
</snippet></ROW><ROW><id>18146307</id><snippet>for key in sorted(obj):
    store.append(obj[key])
</snippet></ROW><ROW><id>18146549</id><snippet>translate</snippet></ROW><ROW><id>18146549</id><snippet>rotate</snippet></ROW><ROW><id>18146549</id><snippet>object</snippet></ROW><ROW><id>18146646</id><snippet>import HTMLParser

tweets = []
for (text, sentiment) in pos_tweets.items() + neg_tweets.items():
    text = HTMLParser.HTMLParser().unescape(text)
    shortenedText = [e.lower() and e.translate(string.maketrans("",""), string.punctuation) for e in text.split() if len(e) &gt;= 3 and not e.startswith('http')]
print shortenedText
</snippet></ROW><ROW><id>18146646</id><snippet>unescape</snippet></ROW><ROW><id>18146646</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; HTMLParser.HTMLParser().unescape(""The truth is out there")
u'"The truth is out there'
</snippet></ROW><ROW><id>18146646</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>18146646</id><snippet>text.decode('utf8')</snippet></ROW><ROW><id>18146694</id><snippet>Django
South==0.7.6
</snippet></ROW><ROW><id>18146960</id><snippet>possible_strings = set()
for row in mydata:
   for item in row:
       possible_string.add(item[0])
</snippet></ROW><ROW><id>18146960</id><snippet>my_new_data = []
for row in mydata:
    row_strings = set(item[0] for item in row)
    missing_strings = possible_strings - row_strings
    for item in list(missing_strings):
         new_item = []
         new_item.append(item)
         new_item.append(0)
         row.append(new_item)
     row.sort()
     my_new_data.append(row)
</snippet></ROW><ROW><id>18146960</id><snippet>newrow*************
['destination_ip:10.32.0.100 destination_service:http destination_port:80 protocol:TCP syslog_priority:Info', '39.7769']
['destination_ip:10.32.0.100 destination_service:http destination_port:80 protocol:TCP', '39.7769']
['destination_ip:10.32.0.100 destination_service:http destination_port:80 syslog_priority:Info', '39.7769']
['destination_ip:10.32.0.100 destination_service:http destination_port:80', '39.7769']
['destination_ip:10.32.0.100 destination_service:http protocol:TCP syslog_priority:Info', '39.7769']
['destination_ip:10.32.0.100 syslog_priority:Info destination_service:http destination_port:80', 0]
['destination_ip:10.32.0.100 syslog_priority:Info destination_service:http', 0]
['destination_ip:10.32.0.100 destination_port:80 syslog_priority:Info protocol:TCP', 0]
['destination_ip:10.32.0.100 destination_port:80 destination_service:http syslog_priority:Info protocol:TCP', 0]
['destination_ip:10.32.0.100 destination_port:80 destination_service:http syslog_priority:Info', 0]
['destination_ip:10.32.0.100 syslog_priority:Info destination_service:http destination_port:80 protocol:TCP', 0]
['syslog_priority:Info', 0]
['destination_ip:10.32.0.100 syslog_priority:Info destination_service:http protocol:TCP', 0]
['destination_ip:10.32.0.100 destination_port:80 destination_service:http protocol:TCP', 0]
['destination_ip:10.32.0.100 destination_port:80 destination_service:http', 0]
newrow*************
['syslog_priority:Info', '100']
['destination_ip:10.32.0.100 syslog_priority:Info destination_service:http destination_port:80 protocol:TCP', '43.8362']
['destination_ip:10.32.0.100 syslog_priority:Info destination_service:http destination_port:80', '43.8362']
['destination_ip:10.32.0.100 syslog_priority:Info destination_service:http protocol:TCP', '43.8362']
['destination_ip:10.32.0.100 syslog_priority:Info destination_service:http', '43.8362']
['destination_ip:10.32.0.100 destination_port:80 syslog_priority:Info protocol:TCP', 0]
['destination_ip:10.32.0.100 destination_service:http destination_port:80 protocol:TCP', 0]
['destination_ip:10.32.0.100 destination_service:http destination_port:80', 0]
['destination_ip:10.32.0.100 destination_port:80 destination_service:http syslog_priority:Info', 0]
['destination_ip:10.32.0.100 destination_service:http destination_port:80 protocol:TCP syslog_priority:Info', 0]
['destination_ip:10.32.0.100 destination_service:http protocol:TCP syslog_priority:Info', 0]
['destination_ip:10.32.0.100 destination_port:80 destination_service:http syslog_priority:Info protocol:TCP', 0]
['destination_ip:10.32.0.100 destination_port:80 destination_service:http protocol:TCP', 0]
['destination_ip:10.32.0.100 destination_port:80 destination_service:http', 0]
['destination_ip:10.32.0.100 destination_service:http destination_port:80 syslog_priority:Info', 0]
newrow*************
['destination_ip:10.32.0.100 destination_port:80 destination_service:http syslog_priority:Info protocol:TCP', '43.9506']
['destination_ip:10.32.0.100 destination_port:80 destination_service:http syslog_priority:Info', '43.9506']
['destination_ip:10.32.0.100 destination_port:80 destination_service:http protocol:TCP', '43.9506']
['destination_ip:10.32.0.100 destination_port:80 destination_service:http', '43.9506']
['destination_ip:10.32.0.100 destination_port:80 syslog_priority:Info protocol:TCP', '43.9506']
['destination_ip:10.32.0.100 syslog_priority:Info destination_service:http destination_port:80', 0]
['destination_ip:10.32.0.100 syslog_priority:Info destination_service:http', 0]
['destination_ip:10.32.0.100 destination_service:http destination_port:80 protocol:TCP', 0]
['destination_ip:10.32.0.100 destination_service:http destination_port:80', 0]
['destination_ip:10.32.0.100 destination_service:http destination_port:80 protocol:TCP syslog_priority:Info', 0]
['destination_ip:10.32.0.100 syslog_priority:Info destination_service:http destination_port:80 protocol:TCP', 0]
['destination_ip:10.32.0.100 destination_service:http protocol:TCP syslog_priority:Info', 0]
['syslog_priority:Info', 0]
['destination_ip:10.32.0.100 syslog_priority:Info destination_service:http protocol:TCP', 0]
['destination_ip:10.32.0.100 destination_service:http destination_port:80 syslog_priority:Info', 0]
</snippet></ROW><ROW><id>18147112</id><snippet># No need for select_related in this case
Event.objects.values('name', 'date', 'place__name', 'place__address')

[{
   "name": "event1",
   "date": "date1",
   "place__name": "place1",
   "place__address": "address1",
},{
   "name": "event2",
   "date": "date2",
   "place__name": "place2",
   "place__address": "address2",
}]
</snippet></ROW><ROW><id>18147134</id><snippet>lower()</snippet></ROW><ROW><id>18147134</id><snippet>print('Would that be all?')
answer = input()
if answer.lower().startswith('y'):
    return
</snippet></ROW><ROW><id>18147358</id><snippet>psutil</snippet></ROW><ROW><id>18147358</id><snippet>psutil</snippet></ROW><ROW><id>18147358</id><snippet>import psutil
for process in psutil.get_process_list():
    try:
        print('Process: %s, PID: %s, Owner: %s' % (process.name, process.pid,
                                                   process.username))
    except psutil.AccessDenied:
        print('Access denied!')
</snippet></ROW><ROW><id>18147358</id><snippet>except</snippet></ROW><ROW><id>18147358</id><snippet>except psutil.AccessDenied:
    print('Process: %s, PID: %s, Owner: DENIED' % (process.name, process.pid)
</snippet></ROW><ROW><id>18147358</id><snippet>import wmi
for i in wmi.WMI().Win32_Process():
    print('%s, %s, %s' % (i.Name, i.ProcessId, i.GetOwner()[2]))
</snippet></ROW><ROW><id>18147612</id><snippet>float_format</snippet></ROW><ROW><id>18147612</id><snippet>import pandas as pd
import io

content = '''\
1    2    3    4   mean 
NaN  NaN  NaN  NaN      NaN  
5.9  5.4  2.4  3.2    4.225  
0.6  0.7  0.7  0.7    0.675  
2.5  1.6  1.5  1.2    1.700  
0.4  0.4  0.4  0.4    0.400'''

df = pd.read_table(io.BytesIO(content), sep='\s+')
df.to_csv('/tmp/test.csv', float_format='%g', index=False)
</snippet></ROW><ROW><id>18147612</id><snippet>1,2,3,4,mean
,,,,
5.9,5.4,2.4,3.2,4.225
0.6,0.7,0.7,0.7,0.675
2.5,1.6,1.5,1.2,1.7
0.4,0.4,0.4,0.4,0.4
</snippet></ROW><ROW><id>18147670</id><snippet>__init__</snippet></ROW><ROW><id>18147670</id><snippet>__init__</snippet></ROW><ROW><id>18147670</id><snippet>__init__</snippet></ROW><ROW><id>18147670</id><snippet>def __init__(self, *args, **kwargs):
    super(FormClass, self).__init__(*args, **kwargs)
    if self.object: # in case of ModelForm
        self.fields['extra_field'] = forms.CharField(required=False)
        self.fields['other_field'].required = True
        del(self.fields['non_editable_field'])
</snippet></ROW><ROW><id>18147825</id><snippet>jsonpickle</snippet></ROW><ROW><id>18147825</id><snippet>pickle</snippet></ROW><ROW><id>18147825</id><snippet>__getstate__</snippet></ROW><ROW><id>18147825</id><snippet>__setstate__</snippet></ROW><ROW><id>18147825</id><snippet>jsonpickle</snippet></ROW><ROW><id>18147825</id><snippet>__getstate__</snippet></ROW><ROW><id>18147825</id><snippet>jsonpickle</snippet></ROW><ROW><id>18147825</id><snippet>__dict__</snippet></ROW><ROW><id>18147825</id><snippet>_sa_instance_state</snippet></ROW><ROW><id>18147825</id><snippet>def __getstate__(self):
    state = self.__dict__.copy()
    del state['_sa_instance_state']
    return state

def __setstate__(self, state):
    self.__dict__.update(state)
</snippet></ROW><ROW><id>18147825</id><snippet>__getstate__</snippet></ROW><ROW><id>18147825</id><snippet>__getstate__</snippet></ROW><ROW><id>18147825</id><snippet>__setstate__</snippet></ROW><ROW><id>18147825</id><snippet>__getstate__</snippet></ROW><ROW><id>18147982</id><snippet>\A</snippet></ROW><ROW><id>18147982</id><snippet>\b</snippet></ROW><ROW><id>18147982</id><snippet>^</snippet></ROW><ROW><id>18147982</id><snippet>$</snippet></ROW><ROW><id>18147982</id><snippet>(?=...)</snippet></ROW><ROW><id>18147982</id><snippet>(?!...)</snippet></ROW><ROW><id>18147982</id><snippet>[abc]</snippet></ROW><ROW><id>18147982</id><snippet>a</snippet></ROW><ROW><id>18147982</id><snippet>b</snippet></ROW><ROW><id>18147982</id><snippet>c</snippet></ROW><ROW><id>18148374</id><snippet>#!/usr/bin/env python

"""Page views."""

from flask import render_template, request
from flask import Flask

from celerytest import add

from time import sleep


app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def run():
    if request.method == 'GET':
        return render_template("template.html")
    else:
        form = request.form
        n1 = str(form.get("n1"))
        n2 = str(form.get("n2"))
        aysnc_res = add.delay(n1,n2)
        session['TASK_ID'] = async_res.id
        return render_template("loading.html")

@app.route('/loading')
def check_if_complete():
    aysnc_res = session['TASK_ID']
    if async_res.ready() == True:
        return render_template("template2.html", val=async_res.get())
    else:
        sleep(5)
        return render_template("loading.html")


if __name__ == '__main__':
    app.run()
</snippet></ROW><ROW><id>18149026</id><snippet>cleanedText = [e.translate(remove_punctuation_map).lower() for e in text.split() if not e.startswith(('http', '@')) ]
shortenedText = [e for e in cleanedText if len(e) &gt;= 3]
</snippet></ROW><ROW><id>18149395</id><snippet>conn.cursor().execute("{call sp_rename(?,?,?)}",('xro_zips_import.CityAliasName', 'City', 'COLUMN'))
conn.commit()
</snippet></ROW><ROW><id>18149445</id><snippet>[round(float(i), 2) for i in mylist]</snippet></ROW><ROW><id>18149445</id><snippet>"Hello, {}! What is your favourite {}?".format("Jim", "colour")</snippet></ROW><ROW><id>18149530</id><snippet>myfile_list = open(file).readlines()
newList = []
for line in myfile_list:
  .
  .

  newList.append(line)   # this is the line after you have made your changes
outref = open(myfile,'w')
 outref.writelines(newList)
outref.close()
</snippet></ROW><ROW><id>18149762</id><snippet>__builtins__</snippet></ROW><ROW><id>18149762</id><snippet>__builtin__</snippet></ROW><ROW><id>18149762</id><snippet>__builtins__</snippet></ROW><ROW><id>18149762</id><snippet>__builtins__</snippet></ROW><ROW><id>18149762</id><snippet>str</snippet></ROW><ROW><id>18149768</id><snippet>mapper</snippet></ROW><ROW><id>18149916</id><snippet>for line in fileinput.input(self.view.file_name(), inplace=1):
  sys.stdout.write(self.makeReplacements(line))
</snippet></ROW><ROW><id>18149921</id><snippet>try:
    targ = raw_input("Please enter target: ")
    print targ
except KeyboardInterrupt:
    print "Cancelled"
</snippet></ROW><ROW><id>18150051</id><snippet>str</snippet></ROW><ROW><id>18150051</id><snippet>print repr(a)</snippet></ROW><ROW><id>18150071</id><snippet>ws</snippet></ROW><ROW><id>18150071</id><snippet>calculate_dimension()</snippet></ROW><ROW><id>18150071</id><snippet>get_highest_row()</snippet></ROW><ROW><id>18150140</id><snippet>import matplotlib.pylab as plt
import numpy as np

x = np.linspace(0, 10 ,100)
y = np.sin(x)

plt.plot(x, y , "ro")
plt.annotate(s=" some string", xy=(x[25], y[25]))
</snippet></ROW><ROW><id>18150274</id><snippet>def KeyUp(event):
    Drive = 'forward'
    drivelabel.set(Drive)
    labeldown.grid_remove()
    labelup.grid(row=2, column=2)
    transmit()
</snippet></ROW><ROW><id>18150274</id><snippet>Drive = tk.StringVar()
Drive.set('idle')
Drive.trace('w', transmit)
</snippet></ROW><ROW><id>18150274</id><snippet>trace</snippet></ROW><ROW><id>18150274</id><snippet>transmit</snippet></ROW><ROW><id>18150274</id><snippet>Drive = 'forward'
</snippet></ROW><ROW><id>18150274</id><snippet>Drive</snippet></ROW><ROW><id>18150274</id><snippet>Drive</snippet></ROW><ROW><id>18150274</id><snippet>Drive</snippet></ROW><ROW><id>18150274</id><snippet>transmit</snippet></ROW><ROW><id>18150274</id><snippet>transmit</snippet></ROW><ROW><id>18150274</id><snippet>DriveSend = drivelabel.get
SteeringSend = steeringlabel.get
</snippet></ROW><ROW><id>18150274</id><snippet>DriveSend = drivelabel.get()
SteeringSend = steeringlabel.get()
</snippet></ROW><ROW><id>18150274</id><snippet>transmit</snippet></ROW><ROW><id>18150274</id><snippet>Drive</snippet></ROW><ROW><id>18150274</id><snippet>Steering</snippet></ROW><ROW><id>18150274</id><snippet>DriveSend</snippet></ROW><ROW><id>18150274</id><snippet>SteeringSend</snippet></ROW><ROW><id>18150274</id><snippet>Drive</snippet></ROW><ROW><id>18150274</id><snippet>Steering</snippet></ROW><ROW><id>18150274</id><snippet>StringVars</snippet></ROW><ROW><id>18150274</id><snippet>and</snippet></ROW><ROW><id>18150274</id><snippet>def KeyUp(event):
#    Drive = 'forward'   (this doesn't actually do any harm, but to avoid confusion I'd just get rid of the Drive variables altogether)
    drivelabel.set('forward')
    labeldown.grid_remove()
    labelup.grid(row=2, column=2)
</snippet></ROW><ROW><id>18150274</id><snippet>def transmit():
    HOST, PORT = "192.168.2.12", 9999
    DriveSend = drivelabel.get()        # Note the ()
    SteeringSend = steeringlabel.get()

    # Create a socket (SOCK_STREAM means a TCP socket)
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    try:
        # Connect to server and send data
        sock.connect((HOST, PORT))
        sock.sendall(bytes(DriveSend + "\n", "utf-8"))    # Note Drive ==&gt; DriveSend
        sock.sendall(bytes(SteeringSend + "\n", "utf-8")) # Note Steering ==&gt; SteeringSend

        # Receive data from the server and shut down
        received = str(sock.recv(1024), "utf-8")
    finally:
        sock.close()

    print("Sent:     {}".format(SteeringSend))   # Note Steering ==&gt; SteeringSend
    print("Sent:     {}".format(DriveSend))      # Note Drive ==&gt; DriveSend
    print("Received: {}".format(received))
</snippet></ROW><ROW><id>18150274</id><snippet>def KeyUp(event):
    if drivelabel.get() == "forward":
        pass
    else:
        drivelabel.set("forward")
        labeldown.grid_remove()
        labelup.grid(row=2, column=2)
        transmit()
        print (drivelabel.get())
</snippet></ROW><ROW><id>18150325</id><snippet>location = (element.location['x'] + element.size['width'] / 2, element.location['y'] + element.size['height'] / 2)

#Switching to the n-1 th frame, frames is an array of frames' name
frames = page.frame

browser.switch_to_default_content()
for frameName in frames[:len(frames) - 1]:
    browser.switch_to_frame(frameName)

#Handle to the n th frame
frame = browser.find_element_by_tag_name(name="iframe")
action = ActionChains(context.browser)
action.move_to_element_with_offset(frame, location[0], location[1]).double_click()
action.perform()
</snippet></ROW><ROW><id>18150373</id><snippet>&gt;&gt;&gt; d = [
...     {
...         'sentence': 'I am currently working',
...         'variable1': 1,
...         'variable2': 10
...     },
...     {
...         'sentence': 'How are you today?',
...         'variable1': 2,
...         'variable2': 20
...     },
... ]
&gt;&gt;&gt;
&gt;&gt;&gt; "\n".join(x['sentence'] for x in d)
'I am currently working\nHow are you today?'
&gt;&gt;&gt; print "\n".join(x['sentence'] for x in d)
I am currently working
How are you today?
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18150451</id><snippet>zmq</snippet></ROW><ROW><id>18150451</id><snippet>zmq</snippet></ROW><ROW><id>18150466</id><snippet>step.followupsteps</snippet></ROW><ROW><id>18150466</id><snippet>'followupsteps': [] if not step.followupsteps else [{
    'id': stepid,
} for stepid in step.followupsteps.split(',')]
</snippet></ROW><ROW><id>18150466</id><snippet>not None</snippet></ROW><ROW><id>18150466</id><snippet>&gt;&gt;&gt; bool(not None)
True
</snippet></ROW><ROW><id>18150466</id><snippet>not step.followupsteps</snippet></ROW><ROW><id>18150466</id><snippet>None</snippet></ROW><ROW><id>18150466</id><snippet>if step.followupsteps is None</snippet></ROW><ROW><id>18150466</id><snippet>'followupsteps': [{
    'id': stepid,
} for stepid in (step.followupsteps.split(',') if step.followupsteps else [])]
</snippet></ROW><ROW><id>18150545</id><snippet>scipy.signal.welch</snippet></ROW><ROW><id>18150603</id><snippet>./manage.py migrate reversion</snippet></ROW><ROW><id>18150834</id><snippet>&gt;&gt;&gt; from beautifulsoup4 import BeautifulSoup
&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.get('http://exporter.nih.gov/ExPORTER_Catalog.aspx?index=0')
&gt;&gt;&gt; for parser in ('html.parser', 'lxml', 'html5lib'):
...     print repr(str(BeautifulSoup(r.text, parser))[-60:])
... 
';\r\npageTracker._trackPageview();\r\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n'
'();\r\npageTracker._trackPageview();\r\n&lt;/script&gt;\n&lt;/body&gt;&lt;/html&gt;'
'();\npageTracker._trackPageview();\n&lt;/script&gt;\n\n\n&lt;/body&gt;&lt;/html&gt;'
</snippet></ROW><ROW><id>18150834</id><snippet>BeautifulSoup4</snippet></ROW><ROW><id>18151227</id><snippet>ifconfig</snippet></ROW><ROW><id>18151227</id><snippet>ipconfig</snippet></ROW><ROW><id>18151227</id><snippet>10.10.10.10</snippet></ROW><ROW><id>18151227</id><snippet>ipython kernel --ip=* --IPKernelApp.connection_file=/tmp/kernel.json
</snippet></ROW><ROW><id>18151227</id><snippet>/tmp/kernel.json</snippet></ROW><ROW><id>18151227</id><snippet>$ cat /tmp/kernel.json
{
  "stdin_port": 59836,
  "ip": "*",
  "hb_port": 50806,
  "key": "11c2f53e-ad38-4d1d-b038-2f4bd04c4d49",
  "shell_port": 49904,
  "iopub_port": 55081
}
</snippet></ROW><ROW><id>18151227</id><snippet>/path/to/your/kernel.json</snippet></ROW><ROW><id>18151227</id><snippet>*</snippet></ROW><ROW><id>18151227</id><snippet>{
  "stdin_port": 59836,
  "ip": "10.10.10.10",
  "hb_port": 50806,
  "key": "11c2f53e-ad38-4d1d-b038-2f4bd04c4d49",
  "shell_port": 49904,
  "iopub_port": 55081
}
</snippet></ROW><ROW><id>18151227</id><snippet>qtconsole</snippet></ROW><ROW><id>18151227</id><snippet>ipython qtconsole --existing /path/to/your/kernel.json
</snippet></ROW><ROW><id>18151227</id><snippet>qtconsoles</snippet></ROW><ROW><id>18151227</id><snippet>exit()</snippet></ROW><ROW><id>18151227</id><snippet>qtconsole</snippet></ROW><ROW><id>18151398</id><snippet>__init__</snippet></ROW><ROW><id>18151398</id><snippet>def _declarative_constructor(self, **kwargs):
    """A simple constructor that allows initialization from kwargs.

    Sets attributes on the constructed instance using the names and
    values in ``kwargs``.

    Only keys that are present as
    attributes of the instance's class are allowed. These could be,
    for example, any mapped columns or relationships.
    """
    cls_ = type(self)
    for k in kwargs:
        if not hasattr(cls_, k):
            raise TypeError(
                "%r is an invalid keyword argument for %s" %
                (k, cls_.__name__))
        setattr(self, k, kwargs[k])
</snippet></ROW><ROW><id>18151398</id><snippet>setattr()</snippet></ROW><ROW><id>18151398</id><snippet>__init__</snippet></ROW><ROW><id>18151398</id><snippet>__init__</snippet></ROW><ROW><id>18151398</id><snippet>class Example(Declarative):
    id = Column(Integer, primary_key=True)
    datum = Column(String(65))
    __order__ = ('id', 'datum')

    def __init__(self, *args, **kwargs):
        cls_ = type(self)
        kwargs.update(zip(cls_.__order__, args))
        for k in kwargs:
            if not hasattr(cls_, k):
                raise TypeError(
                    "%r is an invalid keyword argument for %s" %
                    (k, cls_.__name__))
            setattr(self, k, kwargs[k])
</snippet></ROW><ROW><id>18151398</id><snippet>kwargs</snippet></ROW><ROW><id>18151398</id><snippet>__order__</snippet></ROW><ROW><id>18151407</id><snippet>Link</snippet></ROW><ROW><id>18151407</id><snippet>Link</snippet></ROW><ROW><id>18151407</id><snippet>urls = [el.url for el in list_of_objects]
</snippet></ROW><ROW><id>18151407</id><snippet>Link_object.url</snippet></ROW><ROW><id>18151719</id><snippet>x1 = x
</snippet></ROW><ROW><id>18151719</id><snippet>x</snippet></ROW><ROW><id>18151719</id><snippet>x</snippet></ROW><ROW><id>18151719</id><snippet>x</snippet></ROW><ROW><id>18151719</id><snippet>x.append(5)
</snippet></ROW><ROW><id>18151719</id><snippet>x</snippet></ROW><ROW><id>18151719</id><snippet>x1</snippet></ROW><ROW><id>18151719</id><snippet>x1</snippet></ROW><ROW><id>18151719</id><snippet>[1, 2, 3, 5]</snippet></ROW><ROW><id>18151719</id><snippet>y1</snippet></ROW><ROW><id>18151719</id><snippet>y = y + [5]
</snippet></ROW><ROW><id>18151719</id><snippet>y</snippet></ROW><ROW><id>18151719</id><snippet>y</snippet></ROW><ROW><id>18151719</id><snippet>[1, 2, 3, 5]</snippet></ROW><ROW><id>18151719</id><snippet>y</snippet></ROW><ROW><id>18151719</id><snippet>y1</snippet></ROW><ROW><id>18151719</id><snippet>y1</snippet></ROW><ROW><id>18151719</id><snippet>y</snippet></ROW><ROW><id>18151719</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>18151719</id><snippet>id</snippet></ROW><ROW><id>18151719</id><snippet>&gt;&gt;&gt; def my_function(x, y):
...     x.append(5)
...     y = y + [5]
...     return x, y   
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; x1 = x
&gt;&gt;&gt; y = [1, 2, 3]
&gt;&gt;&gt; y1 = y
&gt;&gt;&gt; 
&gt;&gt;&gt; x2, y2 = my_function(x, y)
&gt;&gt;&gt; 
&gt;&gt;&gt; id(x2) == id(x)   
True
&gt;&gt;&gt; id(y2) == id(y)
False
</snippet></ROW><ROW><id>18151719</id><snippet>id</snippet></ROW><ROW><id>18151719</id><snippet>x</snippet></ROW><ROW><id>18151719</id><snippet>id</snippet></ROW><ROW><id>18151719</id><snippet>y</snippet></ROW><ROW><id>18151719</id><snippet>y</snippet></ROW><ROW><id>18151851</id><snippet>import os
import posixpath

maya_path = posixpath.join('a','b','c')
local_path = os.path.realpath(maya_path)
</snippet></ROW><ROW><id>18151947</id><snippet>char *a, b;
</snippet></ROW><ROW><id>18151947</id><snippet>a</snippet></ROW><ROW><id>18151947</id><snippet>char *</snippet></ROW><ROW><id>18151947</id><snippet>b</snippet></ROW><ROW><id>18151947</id><snippet>char</snippet></ROW><ROW><id>18151947</id><snippet>char *a, *b;
</snippet></ROW><ROW><id>18152024</id><snippet>procstep</snippet></ROW><ROW><id>18152024</id><snippet>lineage</snippet></ROW><ROW><id>18152024</id><snippet>lineage = root.find('.//lineage')
last_procstep = lineage.find('./procstep[last()]')
lineage.remove(last_procstep)
</snippet></ROW><ROW><id>18152024</id><snippet>getparent()</snippet></ROW><ROW><id>18152024</id><snippet>last_procstep = root.find('.//lineage/procstep[last()]')
last_procstep.getparent().remove(last_procstep)
</snippet></ROW><ROW><id>18152024</id><snippet>lineage = root.find('.//lineage')
for procstep in tuple(lineage.iterfind('./procstep'))[1:]:
    lineage.remove(procstep)
</snippet></ROW><ROW><id>18152071</id><snippet>sorted(dct, key=dct.get)
</snippet></ROW><ROW><id>18152193</id><snippet>import random
keys, values = [[1,2,3,4], ['a','b','c','d']]
random.shuffle(values)
result =  [{k:v} for k, v in zip(keys, values)]
</snippet></ROW><ROW><id>18152193</id><snippet>In [7]: result
Out[7]: [{1: 'd'}, {2: 'b'}, {3: 'c'}, {4: 'a'}]
</snippet></ROW><ROW><id>18152193</id><snippet>import itertools as IT
result = ({k:v} for k, v in IT.izip(keys, values))
</snippet></ROW><ROW><id>18152193</id><snippet>result = IT.izip(keys, values)
</snippet></ROW><ROW><id>18152322</id><snippet>'all'</snippet></ROW><ROW><id>18152322</id><snippet>select_sql = """  SELECT * FROM table
                  WHERE ((? = 'all' OR gender = ?) AND (? = 'all' OR hand = ?))
             """

cursor.execute(select_sql, (gender_var, gender_var, hand_var, hand_var))
</snippet></ROW><ROW><id>18152322</id><snippet>gender_var</snippet></ROW><ROW><id>18152322</id><snippet>hand_var</snippet></ROW><ROW><id>18152322</id><snippet>'all'</snippet></ROW><ROW><id>18152322</id><snippet>OR</snippet></ROW><ROW><id>18152322</id><snippet>AND</snippet></ROW><ROW><id>18152549</id><snippet>#Inputs
k = 2
a = np.matrix([[.8,.2,.6,.4],[.9,.3,.8,.6],[.2,.6,.8,.4],[.3,.3,.1,.8]])
b = np.matrix([[1,0,0,1],[1,0,1,1],[1,1,1,0],[1,0,0,1]])
print "a:\n", a
print "b:\n", b

# Return values of interest
s = argsort(a.view(np.ndarray), axis=1)[:,::-1]
s2 = s + (arange(s.shape[0])*s.shape[1])[:,None]
out = take(b,s2).view(np.ndarray)[::,:k].sum(axis=1)
print out
</snippet></ROW><ROW><id>18152549</id><snippet>a:
[[ 0.8  0.2  0.6  0.4]
 [ 0.9  0.3  0.8  0.6]
 [ 0.2  0.6  0.8  0.4]
 [ 0.3  0.3  0.1  0.8]]
b:
[[1 0 0 1]
 [1 0 1 1]
 [1 1 1 0]
 [1 0 0 1]]
Out:
[1 2 2 1]
</snippet></ROW><ROW><id>18152550</id><snippet>ctypes</snippet></ROW><ROW><id>18152550</id><snippet>ctypes.c_int</snippet></ROW><ROW><id>18152550</id><snippet>value</snippet></ROW><ROW><id>18152550</id><snippet>ctypes</snippet></ROW><ROW><id>18152550</id><snippet>def by_ref_using_list(x):
    x[0] += 1
value = [10]
by_ref_using_list(value)
print(value[0])

def by_ref_using_dict(x):
    x['value'] += 1
value = {'value': 10}
by_ref_using_list(value)
print(value['value'])

class ValueHolder(object):
    def __init__(self, value):
        self.value = value
def by_ref_using_int_holder(x):
    x.value += 1
value = ValueHolder(10)
by_ref_using_list(value)
print(value.value)
</snippet></ROW><ROW><id>18152550</id><snippet>c_int</snippet></ROW><ROW><id>18152550</id><snippet>ctypes</snippet></ROW><ROW><id>18152550</id><snippet>byref</snippet></ROW><ROW><id>18152550</id><snippet>void by_ref_in_c(int *x) {
    *x += 1;
}
</snippet></ROW><ROW><id>18152550</id><snippet>c_int</snippet></ROW><ROW><id>18152550</id><snippet>c_int</snippet></ROW><ROW><id>18152550</id><snippet>POINTER(c_int)</snippet></ROW><ROW><id>18152550</id><snippet>c_int</snippet></ROW><ROW><id>18152550</id><snippet>x = c_int(10)
xp = pointer(x)
by_ref_in_c(xp)
print(x)
</snippet></ROW><ROW><id>18152550</id><snippet>ctypes</snippet></ROW><ROW><id>18152550</id><snippet>xp</snippet></ROW><ROW><id>18152550</id><snippet>byref</snippet></ROW><ROW><id>18152550</id><snippet>x = c_int(10)
by_ref_in_c(byref(x))
print(x)
</snippet></ROW><ROW><id>18152550</id><snippet>byRefExample(byref(test))
</snippet></ROW><ROW><id>18152550</id><snippet>test</snippet></ROW><ROW><id>18152550</id><snippet>byRefExample</snippet></ROW><ROW><id>18152550</id><snippet>byRefExample</snippet></ROW><ROW><id>18152550</id><snippet>c_int</snippet></ROW><ROW><id>18152550</id><snippet>c_int</snippet></ROW><ROW><id>18152550</id><snippet>value</snippet></ROW><ROW><id>18152550</id><snippet>POINTER</snippet></ROW><ROW><id>18152550</id><snippet>value</snippet></ROW><ROW><id>18152550</id><snippet>contents</snippet></ROW><ROW><id>18152550</id><snippet>AttributeError</snippet></ROW><ROW><id>18152550</id><snippet>x.value</snippet></ROW><ROW><id>18152550</id><snippet>byValueExample(t)</snippet></ROW><ROW><id>18152550</id><snippet>67</snippet></ROW><ROW><id>18152550</id><snippet>67</snippet></ROW><ROW><id>18152550</id><snippet>t</snippet></ROW><ROW><id>18152550</id><snippet>67</snippet></ROW><ROW><id>18152550</id><snippet>lvalue</snippet></ROW><ROW><id>18152550</id><snippet>x</snippet></ROW><ROW><id>18152550</id><snippet>=</snippet></ROW><ROW><id>18152550</id><snippet>x = x + 1</snippet></ROW><ROW><id>18152550</id><snippet>x + 1</snippet></ROW><ROW><id>18152550</id><snippet>x</snippet></ROW><ROW><id>18152550</id><snippet>x = x + 1</snippet></ROW><ROW><id>18152550</id><snippet>x</snippet></ROW><ROW><id>18152550</id><snippet>x + 1</snippet></ROW><ROW><id>18152550</id><snippet>x</snippet></ROW><ROW><id>18152550</id><snippet>x</snippet></ROW><ROW><id>18152550</id><snippet>byRefExample</snippet></ROW><ROW><id>18152550</id><snippet>globals()['x'] = x + 2</snippet></ROW><ROW><id>18152550</id><snippet>x</snippet></ROW><ROW><id>18152612</id><snippet>for _ in range(2):
    try:
        response = requests.post(full_url, json.dumps(data))
        break
    except RequestException:
        pass
else:
    raise # both tries failed
</snippet></ROW><ROW><id>18152612</id><snippet>def multiple_tries(func, times, exceptions):
    for _ in range(times):
        try:
            return func()
        except Exception as e:
            if not isinstance(e, exceptions):
                raise # reraises unexpected exceptions 
    raise # reraises if attempts are unsuccessful
</snippet></ROW><ROW><id>18152612</id><snippet>func = lambda:requests.post(full_url, json.dumps(data))
response = multiple_tries(func, 2, RequestException)
</snippet></ROW><ROW><id>18152668</id><snippet>*args</snippet></ROW><ROW><id>18152668</id><snippet>lambda *outer: lambda *inner: tuple(a + b for a, b in zip(outer, inner))
</snippet></ROW><ROW><id>18152668</id><snippet>lambda *outer: lambda *inner: tuple(map(sum, zip(outer, inner)))
</snippet></ROW><ROW><id>18152668</id><snippet>tuple()</snippet></ROW><ROW><id>18152668</id><snippet>[a + b for ...]</snippet></ROW><ROW><id>18152668</id><snippet>list()</snippet></ROW><ROW><id>18152668</id><snippet>&gt;&gt;&gt; outer = lambda *outer: lambda *inner: tuple(a + b for a, b in zip(outer, inner))
&gt;&gt;&gt; inner = func(1, 2, 3)
&gt;&gt;&gt; inner(2, 3, 4)
(3, 5, 7)
&gt;&gt;&gt; inner = outer(1, 2, 3, 4)
&gt;&gt;&gt; inner(4, 5, 6, 7)
(5, 7, 9, 11)
</snippet></ROW><ROW><id>18152711</id><snippet>import shared</snippet></ROW><ROW><id>18152711</id><snippet>from shared.models import FOO</snippet></ROW><ROW><id>18152711</id><snippet>import shared</snippet></ROW><ROW><id>18152711</id><snippet>shared/__init__.py:
    import models

import shared
print shared.models.FOO
</snippet></ROW><ROW><id>18152711</id><snippet>import shared
import shared.models
print shared.models.FOO
</snippet></ROW><ROW><id>18152724</id><snippet>functools.wraps</snippet></ROW><ROW><id>18152724</id><snippet>wrapper</snippet></ROW><ROW><id>18152724</id><snippet>def passmein(func):
    def wrapper(*args, **kwargs):
        return func(*args, **kwargs)
    wrapper.__doc__ = func.__doc__
    return wrapper

@passmein
def testfunc(me):
    """This is a test function"""

if __name__ == '__main__':
    print testfunc.__doc__
</snippet></ROW><ROW><id>18152763</id><snippet>Requests</snippet></ROW><ROW><id>18152763</id><snippet>import nltk
from requests import session

payload = {
    'user': '&lt;Username&gt;',
    'password': '&lt;Password&gt;',
    'logon': 'username',
    'submit': 'Log In'
}

headers = {
    'Referer': 'https://www.myebill.com/index.asp?startnam',
    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36'
    }

with session() as c:
    c.post('https://www.myebill.com/index.asp?startnam', data=payload, headers=headers)
    request = c.get('https://www.myebill.com/index.asp')
    print request.headers
    print( nltk.clean_html( request.text ) )
</snippet></ROW><ROW><id>18152763</id><snippet>urllib</snippet></ROW><ROW><id>18152763</id><snippet>urllib2</snippet></ROW><ROW><id>18152763</id><snippet>Requests</snippet></ROW><ROW><id>18153203</id><snippet>&gt;&gt;&gt; objectListDataFloats = [[0] * len(objectListData[0].split(', '))] * len(objectListData)

&gt;&gt;&gt; objectListDataFloats
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
&gt;&gt;&gt; id(objectListDataFloats[0]) == id(objectListDataFloats[1])
True
</snippet></ROW><ROW><id>18153203</id><snippet>0</snippet></ROW><ROW><id>18153203</id><snippet>for count in range(len(objectListData)):
    for ii in range(len(objectListData[count].split(', '))):
        objectListDataFloats[count][ii] = float(objectListData[count].split(', ')[ii])


&gt;&gt;&gt; objectListDataFloats
[[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 0.0, 0.0, 7.0], [5.0, 4.0, 3.0, 2.0], [2.0, 3.0, 3.0, 3.0], [2.0, 2.0, 3.0, 3.0]]
</snippet></ROW><ROW><id>18153203</id><snippet>&gt;&gt;&gt; objectListDataFloats = []
&gt;&gt;&gt; for elem in objectListData:
        test_list = []
        for val in elem.split(','):
            test_list.append(float(val))
        objectListDataFloats.append(test_list)


&gt;&gt;&gt; objectListDataFloats
[[1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0], [9.0, 0.0, 0.0, 7.0], [5.0, 4.0, 3.0, 2.0], [2.0, 3.0, 3.0, 3.0], [2.0, 2.0, 3.0, 3.0]]
</snippet></ROW><ROW><id>18153203</id><snippet>int</snippet></ROW><ROW><id>18153203</id><snippet>float</snippet></ROW><ROW><id>18153203</id><snippet>&gt;&gt;&gt; objectListData = ["1, 2, 3, 4", "5, 6, 7, 8", "9, 0, 0, 7", "5, 4, 3, 2", "2, 3, 3, 3", "2, 2, 3, 3"]
&gt;&gt;&gt; [map(int, elem.split(',')) for elem in objectListData]
[[1, 2, 3, 4], [5, 6, 7, 8], [9, 0, 0, 7], [5, 4, 3, 2], [2, 3, 3, 3], [2, 2, 3, 3]]
</snippet></ROW><ROW><id>18153218</id><snippet>p1.stdin.close()</snippet></ROW><ROW><id>18153218</id><snippet>...
p1.stdin.write('This is good idea\n')
p1.stdin.write('This is good idea\n')

p1.stdin.close()

for i in p1.stdout:
    print i
</snippet></ROW><ROW><id>18153218</id><snippet>stdout-iteration</snippet></ROW><ROW><id>18153218</id><snippet>-u</snippet></ROW><ROW><id>18153218</id><snippet>p1.stdin.flush()

while True:
    line = p1.stdout.readline()
    if not line:
        break
    print line
</snippet></ROW><ROW><id>18153218</id><snippet>close()</snippet></ROW><ROW><id>18153218</id><snippet>close()</snippet></ROW><ROW><id>18153454</id><snippet>gtk+</snippet></ROW><ROW><id>18153454</id><snippet>GUI</snippet></ROW><ROW><id>18153454</id><snippet>Buttons</snippet></ROW><ROW><id>18153454</id><snippet>Lister</snippet></ROW><ROW><id>18153454</id><snippet>Buttons</snippet></ROW><ROW><id>18153454</id><snippet>Lister</snippet></ROW><ROW><id>18153454</id><snippet>glade</snippet></ROW><ROW><id>18153454</id><snippet>import gtk

class GUI(object):

    OPEN_IMAGE = gtk.image_new_from_stock(gtk.STOCK_ADD, gtk.ICON_SIZE_BUTTON)
    CLOSED_IMAGE = gtk.image_new_from_stock(gtk.STOCK_REFRESH, gtk.ICON_SIZE_BUTTON)
    toggled = True

    def __init__(self):
        self.window = gtk.Window()
        self.window.set_size_request(100, 150)
        self.window.connect("delete_event", gtk.main_quit)

        vbox = gtk.VBox()

        self.button = gtk.Button() # THIS is the button to modify
        self.button.set_image(self.OPEN_IMAGE)

        liststore = gtk.ListStore(str)
        liststore.append(["foo"])
        liststore.append(["bar"])
        self.treeview = gtk.TreeView(liststore)
        cell = gtk.CellRendererText()
        col = gtk.TreeViewColumn("Column 1")
        col.pack_start(cell, True)
        col.set_attributes(cell,text=0)
        self.treeview.append_column(col)

        vbox.pack_start(self.button, False, False, 1)
        vbox.pack_start(self.treeview, False, False, 1)

        self.treeview.connect('row-activated', self.the_method_wrapper, "plop")
        self.button.connect('clicked', self.the_method, "plop")

        self.window.add(vbox)
        self.window.show_all()
        return

    def the_method_wrapper(self, button, *args):
        self.the_method(self, "foo")

    def the_method(self, button, filename):
        print filename
        print vars(self)

        if self.toggled:
            self.button.set_image(self.CLOSED_IMAGE)
            self.toggled = False
        else:
            self.button.set_image(self.OPEN_IMAGE)
            self.toggled = True


def main():
    gtk.main()

if __name__ == "__main__":
    GUI()
    main()
</snippet></ROW><ROW><id>18153623</id><snippet>avnum2 = int(input("Enter the number to have it's absolute value found: ")
                                                                          ^
</snippet></ROW><ROW><id>18153623</id><snippet>)</snippet></ROW><ROW><id>18153651</id><snippet>[x for z in range(3) for y in range(z) for x in range(3)]
</snippet></ROW><ROW><id>18154052</id><snippet>alter table</snippet></ROW><ROW><id>18154052</id><snippet>merge</snippet></ROW><ROW><id>18154052</id><snippet>Connection.commit()
</snippet></ROW><ROW><id>18154052</id><snippet>merge</snippet></ROW><ROW><id>18154156</id><snippet>from matplotlib import mlab
import matplotlib.pyplot as plt
import numpy as np

d = np.sort(np.random.randint(0,1000,1000)).cumsum()

# Percentile values
p = np.array([0.0, 25.0, 50.0, 75.0, 100.0])

perc = mlab.prctile(d, p=p)

plt.plot(d)
# Place red dots on the percentiles
plt.plot((len(d)-1) * p/100., perc, 'ro')

# Set tick locations and labels
plt.xticks((len(d)-1) * p/100., map(str, p))

plt.show()
</snippet></ROW><ROW><id>18154362</id><snippet>import cloudstorage as gcs
from google.appengine.ext import blobstore

class ImageModel(ndb.Model):
    image_filename = ndb.StringProeprty(indexed=False)

    @property
    def imagetoserve(self):
        return blobstore.create_gs_key(self.image_filename)

BUCKET = "bucket_to_store_image\\"

with gcs.open(BUCKET + blob_info.filename, 'w', content_type='image/png') as f:
    f.write(imgtmp.execute_transforms())

img = ImageModel()
img.image_filename = BUCKET + blob_info.filename
img.put()
</snippet></ROW><ROW><id>18154508</id><snippet>', '</snippet></ROW><ROW><id>18154508</id><snippet>&gt;&gt;&gt; ['dogs, cats'][0].split(', ')
['dogs', 'cats']
&gt;&gt;&gt;
&gt;&gt;&gt; ['x, y, z'][0].split(', ')
['x', 'y', 'z'] 
</snippet></ROW><ROW><id>18154508</id><snippet>&gt;&gt;&gt; li = ['x, y, z', 'dogs, cats']
&gt;&gt;&gt; 
&gt;&gt;&gt; li2 = [elem.split(', ') for elem in li]
&gt;&gt;&gt; [v for val in li2 for v in val]
['x', 'y', 'z', 'dogs', 'cats']
</snippet></ROW><ROW><id>18154508</id><snippet>sum()</snippet></ROW><ROW><id>18154508</id><snippet>&gt;&gt;&gt; li = ['x, y, z', 'dogs, cats']
&gt;&gt;&gt;
&gt;&gt;&gt; sum([elem.split(', ') for elem in li], [])
['x', 'y', 'z', 'dogs', 'cats']
</snippet></ROW><ROW><id>18154508</id><snippet>&gt;&gt;&gt; list(itertools.chain.from_iterable(elem.split(', ') for elem in li))
['x', 'y', 'z', 'dogs', 'cats']
</snippet></ROW><ROW><id>18154655</id><snippet>reactor.listenUNIXDatagram(console_path, console_protocol)</snippet></ROW><ROW><id>18154778</id><snippet>rectangle.pyx</snippet></ROW><ROW><id>18154778</id><snippet>rect.pyx</snippet></ROW><ROW><id>18154778</id><snippet># distutils: language = c++
# distutils: sources = Rectangle.cpp
</snippet></ROW><ROW><id>18155012</id><snippet>import collections
inlist = [
   ['bien', 'NP00000'],
   ['gracia', 'NCFP000'],
   ['estar', 'VAIP1S0'],
   ['bien', 'RG'],
   ['huevo', 'NCMS000'],
   ['calcio', 'NCMS000'],
   ['leche', 'NCFS000'],
   ['proteina', 'NCFS000'],
   ['francisco', 'NP00000'],
   ['ya', 'RG'],
   ['ser', 'VSIS3S0'],
   ['cosa', 'NCFS000']
]
[(a,b,v) for (a,b),v in collections.Counter(map(tuple,inlist)).iteritems()]
#=&gt;[('proteina', 'NCFS000', 1), ('francisco', 'NP00000', 1), ('ser', 'VSIS3S0', 1), ('bien', 'NP00000', 1), ('calcio', 'NCMS000', 1), ('estar', 'VAIP1S0', 1), ('huevo', 'NCMS000', 1), ('gracia', 'NCFP000', 1), ('bien', 'RG', 1), ('cosa', 'NCFS000', 1), ('ya', 'RG', 1), ('leche', 'NCFS000', 1)]
</snippet></ROW><ROW><id>18155012</id><snippet>counter</snippet></ROW><ROW><id>18155041</id><snippet>?</snippet></ROW><ROW><id>18155041</id><snippet>*</snippet></ROW><ROW><id>18155041</id><snippet>re.search("\t_e\t(.*?)\t_", string).group(1)
                    ^
</snippet></ROW><ROW><id>18155041</id><snippet>.*</snippet></ROW><ROW><id>18155041</id><snippet>\t</snippet></ROW><ROW><id>18155041</id><snippet>.</snippet></ROW><ROW><id>18155041</id><snippet>\t</snippet></ROW><ROW><id>18155061</id><snippet>example</snippet></ROW><ROW><id>18155061</id><snippet>def foo(x):
    print(x)
</snippet></ROW><ROW><id>18155061</id><snippet>import mymodule    
example = raw_input(' this is an example ')
mymodule.foo(example)
</snippet></ROW><ROW><id>18155089</id><snippet>from itertools import combinations, permutations
t = ('a', 'b', 'c', 'd', 'e')
slicer = [x for x in combinations(range(1, len(t)), 2)]
result = [(x[0:i], x[i:j], x[j:]) for i, j in slicer for x in permutations(t, len(t))]
</snippet></ROW><ROW><id>18155089</id><snippet>from itertools import combinations, permutations
t = ("a", "b", "c")
n = 2
slicer = [x for x in combinations(range(1, len(t)), n - 1)]
slicer = [(0,) + x + (len(t),) for x in slicer]
perm = list(permutations(t, len(t)))
result = [tuple(p[s[i]:s[i + 1]] for i in range(len(s) - 1)) for s in slicer for p in perm]

[
   (('a',), ('b', 'c')),
   (('a',), ('c', 'b')),
   (('b',), ('a', 'c')),
   (('b',), ('c', 'a')),
   (('c',), ('a', 'b')),
   (('c',), ('b', 'a')),
   (('a', 'b'), ('c',)),
   (('a', 'c'), ('b',)),
   (('b', 'a'), ('c',)),
   (('b', 'c'), ('a',)),
   (('c', 'a'), ('b',)),
   (('c', 'b'), ('a',))
]
</snippet></ROW><ROW><id>18155098</id><snippet>for key, value in mydict.iteritems():
    if key == 'skipthis':
        continue
</snippet></ROW><ROW><id>18155098</id><snippet>break</snippet></ROW><ROW><id>18155098</id><snippet>continue</snippet></ROW><ROW><id>18155293</id><snippet>csc /nologo (etc...)</snippet></ROW><ROW><id>18155299</id><snippet>import zipfile
try:
    import zlib
    mode= zipfile.ZIP_DEFLATED
except:
    mode= zipfile.ZIP_STORED

zip= zipfile.ZipFile('zipfilename', 'w', mode)
zip.write(item)
zip.close()
</snippet></ROW><ROW><id>18155430</id><snippet>def controlla_voto(voto_lett):
flag=1
while flag:
    for y in voto_lett:
        if (ord(y) in range(48,58))==0:
            voto_lett=raw_input("Invalid charachters, try again: ")
            flag=1
            break
        else: flag=0
voto=int(voto_lett)
print voto   # POINT A
while (voto in range(32))==0:
    print voto #POINT B
    voto_lett=raw_input("Invalid number, try again: ")
    return controlla_voto(voto_lett)
return voto
</snippet></ROW><ROW><id>18155430</id><snippet>voto = controlla_voto(voto_lett)
</snippet></ROW><ROW><id>18155661</id><snippet>import re

str = 'ABCDX PPP [ATT:A01AD05 B01AC06 N02BA01]'
matched = re.search('([\S\s]+?)\s\[.*?(ATT:\S+)\s*(\S+)\s*(\S+)', str)
if matched:
    tokens = matched.groups()
    print tokens
</snippet></ROW><ROW><id>18155661</id><snippet>import re

str = 'ABCDX PPP [ATT:A01AD05 B01AC06 N02BA01]'
matched = re.search('([\S\s]+?)\s\[.*?(ATT:[^\]]+)', str)
if matched:
    first = matched.group(1)
    result = matched.group(2).split(' ')
    result[0:0] = [first]
    print result
</snippet></ROW><ROW><id>18155677</id><snippet>Money</snippet></ROW><ROW><id>18155677</id><snippet>Decimal</snippet></ROW><ROW><id>18155677</id><snippet>NewDecimal(1) + NewDecimal(2)</snippet></ROW><ROW><id>18155677</id><snippet>NewDecimal(3)</snippet></ROW><ROW><id>18155677</id><snippet>__add__</snippet></ROW><ROW><id>18155677</id><snippet>def __add__(self, rhs):
    return NewDecimal(super().__add__(rhs))
</snippet></ROW><ROW><id>18155677</id><snippet>__iadd__</snippet></ROW><ROW><id>18155677</id><snippet>mul</snippet></ROW><ROW><id>18155677</id><snippet>Decimal(2) + NewDecimal(3)</snippet></ROW><ROW><id>18155677</id><snippet>NewDecimal.__radd__</snippet></ROW><ROW><id>18155677</id><snippet>NewDecimal.__radd__</snippet></ROW><ROW><id>18155677</id><snippet>Decimal.__add__</snippet></ROW><ROW><id>18155677</id><snippet>numbers</snippet></ROW><ROW><id>18155677</id><snippet>fractions.Fraction</snippet></ROW><ROW><id>18155677</id><snippet>Fraction</snippet></ROW><ROW><id>18155677</id><snippet>Decimal</snippet></ROW><ROW><id>18155677</id><snippet>NewDecimal</snippet></ROW><ROW><id>18155677</id><snippet>Decimal</snippet></ROW><ROW><id>18155697</id><snippet>self.snowDir</snippet></ROW><ROW><id>18155697</id><snippet>def OnDownload(self, e):
    modisPathFile = 'MODIS_data_directory_path.txt'
    dlg = wx.DirDialog(self, "Choose a directory:",
                       style=wx.DD_DEFAULT_STYLE
                       #| wx.DD_DIR_MUST_EXIST
                       #| wx.DD_CHANGE_DIR
                       )

    if dlg.ShowModal() == wx.ID_OK:
        print "You chose %s" % dlg.GetPath()
        self.snowDIR = dlg.GetPath()
        print 'snowDIR : ', self.snowDIR
        dlg.Destroy()
</snippet></ROW><ROW><id>18155697</id><snippet>def OnDoitClick(self, event):
    """ Do the action that uses snowDir """
    self.MOD01_dir = os.path.join(self.snowDIR,'MOD01')
    ....
</snippet></ROW><ROW><id>18155697</id><snippet>MyFrameClass</snippet></ROW><ROW><id>18155697</id><snippet>TheFrame = MyFrameClass(...)</snippet></ROW><ROW><id>18155697</id><snippet>if hasattr(TheFrame, snowDIR):
   print 'snowDIR', TheFrame.snowDIR
else:
   print 'User did not set snowDIR'
</snippet></ROW><ROW><id>18155754</id><snippet>bmp.readTemperature()</snippet></ROW><ROW><id>18155754</id><snippet>bmp.readPressure()</snippet></ROW><ROW><id>18155754</id><snippet>tps.__init__</snippet></ROW><ROW><id>18155754</id><snippet>class tps():
    def __init__(self):
        #temperature/pressure sensor setup
        self.bmp = BMP085(0x77)
        self.temp = None
        self.pressure = None
#       If you want to initialize your tps object with sensor data, you can call your updater method here.
        self.updateTempAndPressure()

#   Here's a function that you can call whenever you want updated data from the sensor
    def updateTempAndPressure(self):
        self.temp = self.bmp.readTemperature()*1.8+32
        self.pressure = self.bmp.readPressure()*0.0002953

class data():
    def __init__(self):
        self.tp = tps()
        self.savedata()

    def savedata(self):
#       Call the method that gets updated data from the sensor
        self.tp.updateTempAndPressure()
        print self.tp.temp, self.tp.pressure
        sleep(4)
#       Call the update method again
        self.tp.updateTempAndPressure()
        print self.tp.temp, self.tp.pressure

data()
</snippet></ROW><ROW><id>18155797</id><snippet>arr</snippet></ROW><ROW><id>18155797</id><snippet>(200, 600, 20)</snippet></ROW><ROW><id>18155797</id><snippet>arr_x = arr[:, :, np.newaxis, np.newaxis, :] # shape (200, 600, 1, 1, 20)
arr_y = arr[np.newaxis, np.newaxis, :, :, :] # shape (1, 1, 200, 600, 20)
</snippet></ROW><ROW><id>18155797</id><snippet>arr_x = [:, :, None, None]
arr_y = arr
</snippet></ROW><ROW><id>18155797</id><snippet>f</snippet></ROW><ROW><id>18155797</id><snippet>out = f(arr[:, :, None, None], arr)
</snippet></ROW><ROW><id>18155797</id><snippet>out</snippet></ROW><ROW><id>18155797</id><snippet>(200, 600, 200, 600)</snippet></ROW><ROW><id>18155797</id><snippet>out[i, j, k, l]</snippet></ROW><ROW><id>18155797</id><snippet>f(arr[i, j], arr[k, l])</snippet></ROW><ROW><id>18155797</id><snippet>from numpy.core.umath_tests import inner1d

out = inner1d(arr[:, :, None, None], arr)
</snippet></ROW><ROW><id>18155797</id><snippet>scipy.stats.kendalltau</snippet></ROW><ROW><id>18155797</id><snippet>itertools</snippet></ROW><ROW><id>18155797</id><snippet>np.vectorize</snippet></ROW><ROW><id>18155797</id><snippet>f(a, b) == f(b, a)</snippet></ROW><ROW><id>18155897</id><snippet>Username.extend(File[0::2])
</snippet></ROW><ROW><id>18155897</id><snippet>2</snippet></ROW><ROW><id>18155897</id><snippet>0</snippet></ROW><ROW><id>18155897</id><snippet>Username</snippet></ROW><ROW><id>18155897</id><snippet>range()</snippet></ROW><ROW><id>18155897</id><snippet>range()</snippet></ROW><ROW><id>18155897</id><snippet>for i in range(0, len(File), 2):
    Username.append(File[i])
</snippet></ROW><ROW><id>18155897</id><snippet>range()</snippet></ROW><ROW><id>18155945</id><snippet>LIKE</snippet></ROW><ROW><id>18155945</id><snippet>forwards</snippet></ROW><ROW><id>18155945</id><snippet>backwards</snippet></ROW><ROW><id>18155945</id><snippet>def forwards(self, orm):
    db.execute("CREATE TABLE new_table LIKE old_table")
    db.execute("INSERT new_table SELECT * old_table")

def backwards(self, orm):
    db.drop_table('new_table')
</snippet></ROW><ROW><id>18155963</id><snippet>if user.is_active:
    login(request, user)            
    state = "You're successfully logged in!"
    return render_to_response('ucproject/portal/index.html', 
           {'state':state, 'username':username}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>18155963</id><snippet>urls.py
url(r'^portal/$', 'portal.views.portal', name='home'),
url(r'^portal/index.html$', 'portal.views.portal', name='home_index'),
</snippet></ROW><ROW><id>18155963</id><snippet>if user.is_active:
    login(request, user)
    return redirect('home')
</snippet></ROW><ROW><id>18155963</id><snippet>redirect</snippet></ROW><ROW><id>18155963</id><snippet>HttpResponseRedirect</snippet></ROW><ROW><id>18155974</id><snippet>&gt;&gt;&gt; li = [['a','b'], ['c','d']]

&gt;&gt;&gt; [[v.decode("UTF-8") for v in elem] for elem in li]
[[u'a', u'b'], [u'c', u'd']]
</snippet></ROW><ROW><id>18156037</id><snippet>import sys

from Foundation import NSString, NSAutoreleasePool

def fs_normalize(path):
    _pool = NSAutoreleasePool.alloc().init()
    normalized_path = NSString.fileSystemRepresentation(path)
    upath = unicode(normalized_path, sys.getfilesystemencoding() or 'utf8')
    return upath

if __name__ == '__main__':
    e = u'\xe9'
    j = u'\ufa1b'
    e_expected = u'e\u0301'

    assert fs_normalize(e) == e_expected
    assert fs_normalize(j) == j
</snippet></ROW><ROW><id>18156054</id><snippet>src = input('Enter Path to src: ')</snippet></ROW><ROW><id>18156054</id><snippet>import sys
src = sys.argv[1]
</snippet></ROW><ROW><id>18156054</id><snippet>#! /usr/bin/python
import argparse
import shutil

parser = argparse.ArgumentParser(description="Copy a file")
parser.add_argument('src', metavar="SOURCE", help="Source filename")
parser.add_argument('dst', metavar="DESTINATION", help="Destination filename")
args = parser.parse_args()

shutil.copyfile(args.src, args.dst)
</snippet></ROW><ROW><id>18156054</id><snippet>-h</snippet></ROW><ROW><id>18156099</id><snippet>&gt;&gt;&gt; a=np.arange(5)
&gt;&gt;&gt; b=a
&gt;&gt;&gt; b
array([0, 1, 2, 3, 4])

&gt;&gt;&gt; b+=5
&gt;&gt;&gt; a
array([5, 6, 7, 8, 9])
&gt;&gt;&gt; b
array([5, 6, 7, 8, 9])

&gt;&gt;&gt; b=b+5
&gt;&gt;&gt; b
array([10, 11, 12, 13, 14])
&gt;&gt;&gt; a
array([5, 6, 7, 8, 9])
</snippet></ROW><ROW><id>18156099</id><snippet>b+=x</snippet></ROW><ROW><id>18156099</id><snippet>__iadd__</snippet></ROW><ROW><id>18156099</id><snippet>b</snippet></ROW><ROW><id>18156099</id><snippet>a</snippet></ROW><ROW><id>18156099</id><snippet>b=b+x</snippet></ROW><ROW><id>18156099</id><snippet>__add__</snippet></ROW><ROW><id>18156099</id><snippet>b</snippet></ROW><ROW><id>18156099</id><snippet>a[i] +=b</snippet></ROW><ROW><id>18156099</id><snippet>a.__setitem__(i, a.__getitem__(i).__iadd__(b))
</snippet></ROW><ROW><id>18156315</id><snippet>gtk.FileFilter</snippet></ROW><ROW><id>18156315</id><snippet>FileFilter.add_custom</snippet></ROW><ROW><id>18156315</id><snippet>FileFilter.add_pattern</snippet></ROW><ROW><id>18156315</id><snippet>import os

def executable_filter(filter_info, data):
    path = filter_info[0]
#   Note that this only checks if the current effective user may execute the file.  If you need to know if owner/group/other can execute it, you'll probably want something from the os.stat module.
    return os.access(path, os.X_OK)

filter_file.add_custom((gtk.FILE_FILTER_FILENAME, None, None, None), executable_filter, None)
</snippet></ROW><ROW><id>18156596</id><snippet>Tkinter.Canvas</snippet></ROW><ROW><id>18156596</id><snippet>Canvas.coords</snippet></ROW><ROW><id>18156596</id><snippet>self.canvas.coords(tagOrID, x0, y0, x1, y1)
</snippet></ROW><ROW><id>18156605</id><snippet>import imaplib
mail = imaplib.IMAP4_SSL('imap.gmail.com')
mail.login('myusername@gmail.com', 'mypassword')
mail.list()
# Out: list of "folders" aka labels in gmail.
mail.select("inbox") # connect to inbox.

result, data = mail.search(None, "ALL")

ids = data[0] # data is a list.
id_list = ids.split() # ids is a space separated string
latest_email_id = id_list[-1] # get the latest

result, data = mail.fetch(latest_email_id, "(RFC822)") # fetch the email body (RFC822) for the given ID

raw_email = data[0][1] # here's the body, which is raw text of the whole email
# including headers and alternate payloads
</snippet></ROW><ROW><id>18156621</id><snippet>foo = [[bar() for _ in xrange(num)] for _ in xrange(num)]
</snippet></ROW><ROW><id>18156621</id><snippet>bar()</snippet></ROW><ROW><id>18156634</id><snippet>print</snippet></ROW><ROW><id>18156634</id><snippet>from a.m_a import A</snippet></ROW><ROW><id>18156634</id><snippet>import b.m_b</snippet></ROW><ROW><id>18156634</id><snippet>import a.m_a</snippet></ROW><ROW><id>18156634</id><snippet>print a.m_a</snippet></ROW><ROW><id>18156634</id><snippet>a.m_a</snippet></ROW><ROW><id>18156634</id><snippet>a.m_a</snippet></ROW><ROW><id>18156634</id><snippet>sys.modules</snippet></ROW><ROW><id>18156634</id><snippet>a</snippet></ROW><ROW><id>18156634</id><snippet>a.m_a</snippet></ROW><ROW><id>18156634</id><snippet>dir(a)</snippet></ROW><ROW><id>18156634</id><snippet>m_a</snippet></ROW><ROW><id>18156634</id><snippet>m_a</snippet></ROW><ROW><id>18156634</id><snippet>a</snippet></ROW><ROW><id>18156634</id><snippet>m_a.py</snippet></ROW><ROW><id>18156634</id><snippet>import foo</snippet></ROW><ROW><id>18156634</id><snippet>from foo import bar</snippet></ROW><ROW><id>18156634</id><snippet>a.m_a</snippet></ROW><ROW><id>18156634</id><snippet>b.m_b</snippet></ROW><ROW><id>18156634</id><snippet>a.m_a</snippet></ROW><ROW><id>18156634</id><snippet>m_a</snippet></ROW><ROW><id>18156634</id><snippet>m_b</snippet></ROW><ROW><id>18156634</id><snippet>m_a</snippet></ROW><ROW><id>18156634</id><snippet>m_b</snippet></ROW><ROW><id>18156634</id><snippet>m_a</snippet></ROW><ROW><id>18156634</id><snippet>m_b</snippet></ROW><ROW><id>18156634</id><snippet>import main</snippet></ROW><ROW><id>18156634</id><snippet>utils</snippet></ROW><ROW><id>18156634</id><snippet>main</snippet></ROW><ROW><id>18156634</id><snippet>m_b</snippet></ROW><ROW><id>18156634</id><snippet>m_a</snippet></ROW><ROW><id>18156634</id><snippet>m_b</snippet></ROW><ROW><id>18156634</id><snippet>m_b</snippet></ROW><ROW><id>18156634</id><snippet>m_a</snippet></ROW><ROW><id>18156649</id><snippet>reportlab.platypus.flowables</snippet></ROW><ROW><id>18156649</id><snippet>Flowable</snippet></ROW><ROW><id>18156649</id><snippet>Image</snippet></ROW><ROW><id>18156649</id><snippet>drawOn(self, canvas, x, y, _sW=0)</snippet></ROW><ROW><id>18156649</id><snippet>ClickableImage</snippet></ROW><ROW><id>18156649</id><snippet>from reportlab.platypus import Image

class ClickableImage(Image, object):

    # The only variable I added to __init__() is hyperlink. I default it to None for the if statement I use later.
    def __init__(self, filename, hyperlink=None, width=None, height=None, kind='direct', mask='auto', lazy=1):
        super(ClickableImage, self).__init__(filename, width, height, kind, mask, lazy)
        self.hyperlink = hyperlink

    def drawOn(self, canvas, x, y, _sW=0):
        if self.hyperlink: # If a hyperlink is given, create a canvas.linkURL()
            x1 = self.hAlignAdjust(x, _sW) # This is basically adjusting the x coordinate according to the alignment given to the flowable (RIGHT, LEFT, CENTER)
            y1 = y
            x2 = x1 + self._width
            y2 = y1 + self._height
            canvas.linkURL(url=self.hyperlink, rect=(x1, y1, x2, y2), thickness=0, relative=1)
        super(ClickableImage, self).drawOn(canvas, x, y, _sW)
</snippet></ROW><ROW><id>18156876</id><snippet>import argparse, sys

parser = argparse.ArgumentParser(description='Process src to dst')
parser.add_argument('src', type=argparse.FileType('r'),
                    default=sys.stdin)
parser.add_argument('dst', type=argparse.FileType('w'),
                    default=sys.stdout)
options = parser.parse_args()
</snippet></ROW><ROW><id>18156876</id><snippet>options.src</snippet></ROW><ROW><id>18156876</id><snippet>options.dst</snippet></ROW><ROW><id>18156876</id><snippet>--help</snippet></ROW><ROW><id>18156876</id><snippet>usage: somescript.py [-h] src dst

Process src to dst

positional arguments:
  src
  dst

optional arguments:
  -h, --help  show this help message and exit
</snippet></ROW><ROW><id>18156903</id><snippet>&gt;&gt;&gt; A = "{user_id:34dd833,category:secondary,items:camera,vcr,dvd,type:sg_ser}"
&gt;&gt;&gt; A[1:-1].split(':')
['user_id', '34dd833,category', 'secondary,items', 'camera,vcr,dvd,type', 'sg_ser']
</snippet></ROW><ROW><id>18156903</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; entries = A[1:-1].split(':')
&gt;&gt;&gt; for i in range(len(entries)-1):
...     key = entries[i].rpartition(',')[-1]
...     value = entries[i+1].rpartition(',')[0]
...     d[key] = value
</snippet></ROW><ROW><id>18156903</id><snippet>&gt;&gt;&gt; d
{'category': 'secondary', 'items': 'camera,vcr,dvd', 'type': '', 'user_id': '34dd833'}
</snippet></ROW><ROW><id>18156903</id><snippet>rpartition(',')</snippet></ROW><ROW><id>18156903</id><snippet>,</snippet></ROW><ROW><id>18156903</id><snippet>entries = (A[1:-1] + ',').split(':')</snippet></ROW><ROW><id>18156903</id><snippet>rsplit</snippet></ROW><ROW><id>18156903</id><snippet>rpartition</snippet></ROW><ROW><id>18156903</id><snippet>[0]</snippet></ROW><ROW><id>18156903</id><snippet>entries</snippet></ROW><ROW><id>18156903</id><snippet>(n, nplus1)</snippet></ROW><ROW><id>18156903</id><snippet>n.rpartition(',')[-1]</snippet></ROW><ROW><id>18156903</id><snippet>nplus1.rsplit(',', 1)[0]</snippet></ROW><ROW><id>18156903</id><snippet>&gt;&gt;&gt; A = "{user_id:34dd833,category:secondary,items:camera,vcr,dvd,type:sg_ser}"
&gt;&gt;&gt; entries = A[1:-1].split(':')
&gt;&gt;&gt; adjpairs = zip(entries, entries[1:])
&gt;&gt;&gt; d = {k.rpartition(',')[-1]: v.rsplit(',', 1)[0] for k, v in adjpairs}
</snippet></ROW><ROW><id>18156904</id><snippet>minval = [float('+inf')]
min(A[x] + min([b for a, b in G[x] if a not in X] + minval) for x in X)
=&gt; 40
</snippet></ROW><ROW><id>18156904</id><snippet>min()</snippet></ROW><ROW><id>18156904</id><snippet>min()</snippet></ROW><ROW><id>18156904</id><snippet>inf</snippet></ROW><ROW><id>18157006</id><snippet>itertools.product</snippet></ROW><ROW><id>18157006</id><snippet>from itertools import product

def foo(nums):
    return list(product(*((x, -x) for x in nums)))
</snippet></ROW><ROW><id>18157006</id><snippet>&gt;&gt;&gt; foo([-4])
[(4,), (-4,)]
&gt;&gt;&gt; foo([-1, 3])
[(1, 3), (1, -3), (-1, 3), (-1, -3)]
&gt;&gt;&gt; foo([1, 3])
[(1, 3), (1, -3), (-1, 3), (-1, -3)]
&gt;&gt;&gt; foo([1, -3, 4])
[(1, 3, 4), (1, 3, -4), (1, -3, 4), (1, -3, -4), (-1, 3, 4), (-1, 3, -4), (-1, -3, 4), (-1, -3, -4)]
</snippet></ROW><ROW><id>18157135</id><snippet>-tt</snippet></ROW><ROW><id>18157182</id><snippet>class BinaryField(GF2Polynomial):
    def __init__(self, string, mod):
        modded = GF2Polynomial(string) % mod
        super(BinaryField, self).__init__(modded.string)


&gt;&gt;&gt; p = GF2Polynomial("x**2+x**1+x**0")
&gt;&gt;&gt; a = BinaryField("x**1+x**0", p)
&gt;&gt;&gt; print a
x + 1
</snippet></ROW><ROW><id>18157182</id><snippet>BinaryField</snippet></ROW><ROW><id>18157182</id><snippet>def BinaryField(string, mod):
    return GF2Polynomial(string) % mod
</snippet></ROW><ROW><id>18157213</id><snippet>In [26]: s = Series(date_range('1/1/2001', '1/1/2002'))

In [27]: def try_convert_date(obj):
    ...:     try:
    ...:         return obj.date()
    ...:     except AttributeError:
    ...:         return obj
    ...:     

In [28]: s.describe().map(try_convert_date)
Out[28]: 
count            366
unique           366
first     2001-01-01
last      2002-01-01
top       2001-01-01
freq               1
dtype: object
</snippet></ROW><ROW><id>18157377</id><snippet>-d "C:\SMTHNG\Name with spaces\MORE\file.csv"
</snippet></ROW><ROW><id>18157399</id><snippet>while True: pass</snippet></ROW><ROW><id>18157399</id><snippet>callback</snippet></ROW><ROW><id>18157399</id><snippet>sleep</snippet></ROW><ROW><id>18157399</id><snippet>sleep</snippet></ROW><ROW><id>18157399</id><snippet>select</snippet></ROW><ROW><id>18157399</id><snippet>join</snippet></ROW><ROW><id>18157399</id><snippet>wait_for_edge</snippet></ROW><ROW><id>18157399</id><snippet>GPIO.wait_for_edge</snippet></ROW><ROW><id>18157399</id><snippet>select</snippet></ROW><ROW><id>18157399</id><snippet>select</snippet></ROW><ROW><id>18157399</id><snippet>wait_for_edge</snippet></ROW><ROW><id>18157478</id><snippet>make_lottery_set_type</snippet></ROW><ROW><id>18157478</id><snippet>class</snippet></ROW><ROW><id>18157478</id><snippet>LotteryGameType</snippet></ROW><ROW><id>18157478</id><snippet>def make_lottery_set_type(name:str, size:int, minmax:tuple):
    if minmax[0] &gt; minmax[1]:
        raise LotterySetError('Illegal range for tuple')
    else:
        class NewLotteryGameType(LotteryGameType):
            def __init__(self, numbers):
                super().__init__(name, size, minmax[0], minmax[1])
                self.numbers = numbers
        return NewLotteryGameType
</snippet></ROW><ROW><id>18157478</id><snippet>def make_lottery_set_type(name:str, size:int, minmax:tuple):
    if minmax[0] &gt; minmax[1]:
        raise LotterySetError('Illegal range for tuple')
    else:
        class NewLotteryGameType(LotteryGameType):
            def __init__(self, numbers):
                super().__init__(name, size, minmax[0], minmax[1])
                self.numbers = numbers
            def __eq__(self, rhs):
                return set(self.numbers) == set(rhs.numbers)
        return NewLotteryGameType
</snippet></ROW><ROW><id>18157478</id><snippet>&gt;&gt;&gt; SuperLotto = make_lottery_set_type('SuperLotto', 6, (1,50))
&gt;&gt;&gt; super1 = SuperLotto([1,2,3,4,5,6])
&gt;&gt;&gt; super2 = SuperLotto([6,5,4,3,2,1])
&gt;&gt;&gt; super3 = SuperLotto([7,8,9,10,11,12])
&gt;&gt;&gt; super1 == super2
True
&gt;&gt;&gt; super1 == super3
False
</snippet></ROW><ROW><id>18157478</id><snippet>__eq__</snippet></ROW><ROW><id>18157478</id><snippet>SuperLotto</snippet></ROW><ROW><id>18157478</id><snippet>NewLotteryGameType</snippet></ROW><ROW><id>18157478</id><snippet>&gt;&gt;&gt; super1
&lt;__main__.NewLotteryGameType at 0x10259e490&gt;
&gt;&gt;&gt; SuperLotto.__name__
'NewLotteryGameType'
</snippet></ROW><ROW><id>18157478</id><snippet>NewLotteryGameType.__name__ = name</snippet></ROW><ROW><id>18157478</id><snippet>functools.update_wrapper</snippet></ROW><ROW><id>18157478</id><snippet>inspect</snippet></ROW><ROW><id>18157478</id><snippet>LotteryGameType</snippet></ROW><ROW><id>18157478</id><snippet>&gt;&gt;&gt; super1.set_size
6
</snippet></ROW><ROW><id>18157478</id><snippet>set_size</snippet></ROW><ROW><id>18157478</id><snippet>LotteryGameType</snippet></ROW><ROW><id>18157478</id><snippet>class LotteryGameType:
    def __init__(self, min_set_number, max_set_number):
        self.min_set_number = min_set_number
        self.max_set_number = max_set_number

def make_lottery_set_type(lottery_name:str, size:int, minmax:tuple):
    if minmax[0] &gt; minmax[1]:
        raise LotterySetError('Illegal range for tuple')
    else:
        class NewLotteryGameType(LotteryGameType):
            name = lottery_name
            set_size = size
            def __init__(self, numbers):
                super().__init__(minmax[0], minmax[1])
                self.numbers = numbers
            def __eq__(self, rhs):
                return set(self.numbers) == set(rhs.numbers)
        return NewLotteryGameType
</snippet></ROW><ROW><id>18157478</id><snippet>make_</snippet></ROW><ROW><id>18157478</id><snippet>lottery_name</snippet></ROW><ROW><id>18157478</id><snippet>name</snippet></ROW><ROW><id>18157478</id><snippet>name</snippet></ROW><ROW><id>18157478</id><snippet>set_size</snippet></ROW><ROW><id>18157478</id><snippet>LotteryGameType</snippet></ROW><ROW><id>18157478</id><snippet>NewLotteryGameType</snippet></ROW><ROW><id>18157478</id><snippet>&gt;&gt;&gt; SuperLotto = make_lottery_set_type('SuperLotto', 6, (1,50))
&gt;&gt;&gt; SuperDuperLotto = make_lottery_set_type('SuperDuperLotto', 8, (1,100))
&gt;&gt;&gt; SuperLotto.set_size
6
&gt;&gt;&gt; SuperDuperLotto.set_size
8
</snippet></ROW><ROW><id>18157478</id><snippet>LotteryGameType.__init__</snippet></ROW><ROW><id>18157478</id><snippet>&gt;&gt;&gt; super1 = SuperLotto([1,2,3,4,5,6])
&gt;&gt;&gt; super1.set_size
6
&gt;&gt;&gt; duper1 = SuperDuperLotto([1,2,3,4,5,6,7,8])
&gt;&gt;&gt; duper1.set_size
8
</snippet></ROW><ROW><id>18157478</id><snippet>LotteryGameType</snippet></ROW><ROW><id>18157478</id><snippet>LotteryGameType</snippet></ROW><ROW><id>18157478</id><snippet>LotteryGameMetaclass</snippet></ROW><ROW><id>18157478</id><snippet>enum</snippet></ROW><ROW><id>18157478</id><snippet>flufl.enum</snippet></ROW><ROW><id>18157634</id><snippet>Python.sublime-build</snippet></ROW><ROW><id>18157684</id><snippet>right_counter =+ 1
</snippet></ROW><ROW><id>18157684</id><snippet>right_counter = 1
</snippet></ROW><ROW><id>18157684</id><snippet>right_counter += 1
</snippet></ROW><ROW><id>18157684</id><snippet>right_counter</snippet></ROW><ROW><id>18157728</id><snippet>set</snippet></ROW><ROW><id>18157728</id><snippet>&gt;&gt;&gt; lis = [['welcome','a1'],['welcome','a1'],['hello','a2'],['hello','a3']] 
&gt;&gt;&gt; [list(x) + [1] for x in set(map(tuple, lis))]
&gt;&gt;&gt; [['welcome', 'a1', 1], ['hello', 'a3', 1], ['hello', 'a2', 1]]
</snippet></ROW><ROW><id>18157728</id><snippet>&gt;&gt;&gt; lis = [['welcome','a1'],['welcome','a1'],['hello','a2'],['hello','a3']] 
&gt;&gt;&gt; s = set()
&gt;&gt;&gt; for item in lis:
...     tup = tuple(item)  #covert to tuple
...     s.add(tup)
&gt;&gt;&gt; s
set([('welcome', 'a1'), ('hello', 'a3'), ('hello', 'a2')])
</snippet></ROW><ROW><id>18157728</id><snippet>&gt;&gt;&gt; [list(item) + [1] for item in s]
[['welcome', 'a1', 1], ['hello', 'a3', 1], ['hello', 'a2', 1]]
</snippet></ROW><ROW><id>18157728</id><snippet>sets</snippet></ROW><ROW><id>18157728</id><snippet>&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; ans = []
&gt;&gt;&gt; for item in lis:
...     tup = tuple(item)
...     if tup not in seen:
...         ans.append(item + [1])
...         seen.add(tup)
...         
&gt;&gt;&gt; ans
[['welcome', 'a1', 1], ['hello', 'a2', 1], ['hello', 'a3', 1]]
</snippet></ROW><ROW><id>18157728</id><snippet>1</snippet></ROW><ROW><id>18157888</id><snippet>dict</snippet></ROW><ROW><id>18157888</id><snippet>csv</snippet></ROW><ROW><id>18157888</id><snippet>import csv
with open('1.txt', 'rt') as f:
  reader = csv.reader(f, delimiter=' ', skipinitialspace=True)

  lineData = list()

  cols = next(reader)
  print(cols)

  for col in cols:
    # Create a list in lineData for each column of data.
    lineData.append(list())


  for line in reader:
    for i in xrange(0, len(lineData)):
      # Copy the data from the line into the correct columns.
      lineData[i].append(line[i])

  data = dict()

  for i in xrange(0, len(cols)):
    # Create each key in the dict with the data in its column.
    data[cols[i]] = lineData[i]

print(data)
</snippet></ROW><ROW><id>18157888</id><snippet>data</snippet></ROW><ROW><id>18157888</id><snippet>data['varname']</snippet></ROW><ROW><id>18157888</id><snippet>data['a']</snippet></ROW><ROW><id>18157888</id><snippet>['1', '2', '3', '4']</snippet></ROW><ROW><id>18158012</id><snippet>s1 = set("chocolate")
s2 = set("cockroach")

"".join(s1 &amp; s2)
=&gt; "ahco"
</snippet></ROW><ROW><id>18158140</id><snippet>def merge_dicts(list_of_dicts):
    lookup = {}
    results = []
    for d in list_of_dicts:
        key = (d['type'], d['obj_id'])
        try: # it's easier to ask forgiveness than permission
            lookup[key]['actor'].append(d['actor'])
        except KeyError:
            val = {'type': d['type'],
                   'obj_id': d['obj_id'],
                   'actor': [d['actor']], # note, extra [] around value to make it a list
                   'extra_fields': d['extra_fields']}
            lookup[key] = val
            results.append(val)

    return results
</snippet></ROW><ROW><id>18158140</id><snippet>lookup</snippet></ROW><ROW><id>18158140</id><snippet>actor</snippet></ROW><ROW><id>18158140</id><snippet>type, obj_id</snippet></ROW><ROW><id>18158140</id><snippet>actors, extra_fields</snippet></ROW><ROW><id>18158140</id><snippet>def merge_dicts2(list_of_dicts):
    results = {}
    for d in list_of_dicts:
        key = (d['type'], d['obj_id'])
        try:
            results[key][0].append(d['actor'])
        except KeyError:
            results[key] = ([d['actor']], d['extra_fields'])

    return results
</snippet></ROW><ROW><id>18158140</id><snippet>combined_dict = merge_dicts(list_of_dicts)

for (type, obj_id), (actors, extra_fields) in combined_dict.items():
    # do stuff with type, obj_id, actors, extra_fields
</snippet></ROW><ROW><id>18158197</id><snippet>POST</snippet></ROW><ROW><id>18158197</id><snippet>exportType:CSV
tabNumber:
CSV_CH:1
PRN_CH:0
GridView$DXFREditorcol0:
GridView$DXFREditorcol1:
GridView$DXFREditorcol2:
GridView$DXFREditorcol3:
GridView$DXFREditorcol4:
GridView$DXFREditorcol5:
GridView$DXFREditorcol6:
GridView$DXFREditorcol7:
GridView$DXFREditorcol8:
GridView$DXFREditorcol9:
GridView$DXFREditorcol10:
GridView$DXFREditorcol11:
GridView$DXFREditorcol12:
GridView$DXFREditorcol13:
GridView$DXFREditorcol14:
GridView$DXFREditorcol15:
GridView$DXFREditorcol16:
GridView$DXFREditorcol17:
GridView$DXFREditorcol18:
GridView$DXFREditorcol19:
GridView$DXFREditorcol20:
GridView$DXFREditorcol21:
GridView$DXFREditorcol22:
GridView$DXFREditorcol23:
GridView$DXFREditorcol24:
GridView$DXFREditorcol25:
GridView$DXFREditorcol26:
GridView_custwindowWS:0:0:-1:-10000:-10000:0:1px:-10000:1:0:0:0
GridView_DXHFPWS:0:0:-1:-10000:-10000:0:180px:100px:1:0:0:0
GridView_DXPagerBottom_PSPSI:2
GridView$DXSelInput:
GridView$DXKVInput:[]
GridView$CallbackState:BwMHAQIFU3RhdGUGEAEHGwcAAgEHAQIBBwICAQcDAgEHBAIBBwUCAQcGAgEHBwIBBwgCAQcJAgEHCgIBBwsCAQcMAgEHDQIBBw4CAQcPAgEHEAIBBxECAQcSAgEHEwIBBxQCAQcVAgEHFgIBBxcCAQcYAgEHGQIBBxoCAQcABxsHAAcABwEHAAcCBwAHAwcABwQHAAcFBwAHBgcABwcHAAcIBwAHCQcABwoHAAcLBwAHDAcABw0HAAcOBwAHDwcABxAHAAcRBwAHEgcABxMHAAcUBwAHFQcABxYHAAcXBwAHGAcABxkHAAcaBwAHAAcAAgAFAAAAgAkCCUVudGl0eUtleQkCAAIAAwcEAgAHAAIBBTaVAAAHAAIBBwAHAAIQRmlsdGVyRXhwcmVzc2lvbgcCAAIIUGFnZVNpemUDBzI=
GridView$DXSyncInput:
GridView_DXFilterRowMenuCI:
DXScript:1_142,1_80,1_135,1_91,14_0,1_90,1_113,14_23,14_10,1_98,1_105,1_77,1_128,1_126,1_124,1_133,1_119,1_127,1_104,1_101,1_84,1_109,1_92,14_1,1_94,1_97,1_95,1_96,1_106,14_4,1_100,1_117,1_103,14_12,14_13,1_102,1_129,1_107,1_137,1_114,14_16,10_2,10_1,10_3,10_4,14_3
DXMVCEditorsValues:{"GridView_DXFREditorcol0":null,"GridView_DXFREditorcol1":null,"GridView_DXFREditorcol2":null,"GridView_DXFREditorcol3":null,"GridView_DXFREditorcol4":null,"GridView_DXFREditorcol5":null,"GridView_DXFREditorcol6":null,"GridView_DXFREditorcol7":null,"GridView_DXFREditorcol8":null,"GridView_DXFREditorcol9":null,"GridView_DXFREditorcol10":null,"GridView_DXFREditorcol11":null,"GridView_DXFREditorcol12":null,"GridView_DXFREditorcol13":null,"GridView_DXFREditorcol14":null,"GridView_DXFREditorcol15":null,"GridView_DXFREditorcol16":null,"GridView_DXFREditorcol17":null,"GridView_DXFREditorcol18":null,"GridView_DXFREditorcol19":null,"GridView_DXFREditorcol20":null,"GridView_DXFREditorcol21":null,"GridView_DXFREditorcol22":null,"GridView_DXFREditorcol23":null,"GridView_DXFREditorcol24":null,"GridView_DXFREditorcol25":null,"GridView_DXFREditorcol26":null}
</snippet></ROW><ROW><id>18158197</id><snippet>stream=True</snippet></ROW><ROW><id>18158197</id><snippet>iter_content</snippet></ROW><ROW><id>18158197</id><snippet>payload = {
# Form contents
}
r = requests.post(url, data=payload, stream=True)
with open(filename, 'wb') as output:
    for chunk in r.iter_content():
        output.write(chunk)
</snippet></ROW><ROW><id>18158259</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; d = datetime.fromtimestamp(1358294533)
&gt;&gt;&gt; d.isoformat()
'2013-01-15T19:02:13'
</snippet></ROW><ROW><id>18158358</id><snippet>df.groupby(['place', 'user', 'date']).place.count().groupby(level='place').count()
</snippet></ROW><ROW><id>18158358</id><snippet>place
Houston          1
New York         1
San Francisco    2
dtype: int64
</snippet></ROW><ROW><id>18158459</id><snippet>def differ(df):
    delta = df.sample_date.diff().abs()  # only care about magnitude
    cond = delta.notnull() &amp; (delta &lt; np.timedelta64(8, 'W'))
    return df[cond].max()

delta = df.groupby(['dob', 'name']).apply(differ)
</snippet></ROW><ROW><id>18158459</id><snippet>delta.dropna(how='all')</snippet></ROW><ROW><id>18158459</id><snippet>numpy &gt;= 1.7</snippet></ROW><ROW><id>18158459</id><snippet>timedelta64</snippet></ROW><ROW><id>18158459</id><snippet>timedelta64</snippet></ROW><ROW><id>18158459</id><snippet>datetime64</snippet></ROW><ROW><id>18158459</id><snippet>numpy &lt; 1.7</snippet></ROW><ROW><id>18158480</id><snippet>import math   

for a in range(1, 10):
    x = 3.0
    while True:
        y = (x + a/x) / 2
        if y == x:
            break
        x = y  
    sq = math.sqrt(a)
    print '{:&gt;5} {:&gt;5.10f} {:&gt;5.10f} {:&gt;5.10f}'.format(float(a), sq, x, abs(sq - x))
</snippet></ROW><ROW><id>18158480</id><snippet>  1.0 1.0000000000 1.0000000000 0.0000000000
  2.0 1.4142135624 1.4142135624 0.0000000000
  3.0 1.7320508076 1.7320508076 0.0000000000
  4.0 2.0000000000 2.0000000000 0.0000000000
  5.0 2.2360679775 2.2360679775 0.0000000000
  6.0 2.4494897428 2.4494897428 0.0000000000
  7.0 2.6457513111 2.6457513111 0.0000000000
  8.0 2.8284271247 2.8284271247 0.0000000000
  9.0 3.0000000000 3.0000000000 0.0000000000
</snippet></ROW><ROW><id>18158503</id><snippet>id</snippet></ROW><ROW><id>18158626</id><snippet>cost = input("What is the cost in dollars? ")
money = input("Money given: ")
change = int(round(money - cost) * 100)

if change &lt; 0:
    print("You didn't pay enough!")
    exit()

dollars = change / 100
change %= 100

quarters = change / 25
change %= 25

dimes = change / 10
change %= 10

nickels = change / 5
change %= 5

pennies = change

print("""Your change is:
    %i dollars
    %i quarters
    %i dimes
    %i nickels
    %i pennies
""" % (dollars, quarters, dimes, nickels, pennies))
</snippet></ROW><ROW><id>18158661</id><snippet>__init__</snippet></ROW><ROW><id>18158661</id><snippet>def __init__(self, parent, title, *args, **kwargs):
        super(Action, self).__init__(parent, title=title, size=(200, 200))
        self.InitUI()    
        self.Centre()
        self.Show()
</snippet></ROW><ROW><id>18158704</id><snippet>def ignore_list(path, files):
   ret = []
   for fname in files:
        fullFileName = os.path.normpath(path) + os.sep + fname
   if not os.path.isdir(fullFileName) \
        and not fname.endswith('zdt'):
        ret.append(fname)
   return ret
</snippet></ROW><ROW><id>18158704</id><snippet>shutil.copytree(src,dst,ignore=ignore_list)</snippet></ROW><ROW><id>18158956</id><snippet>bar</snippet></ROW><ROW><id>18158956</id><snippet>baz</snippet></ROW><ROW><id>18158956</id><snippet>requests.get</snippet></ROW><ROW><id>18158956</id><snippet>__init__</snippet></ROW><ROW><id>18158956</id><snippet>test.bar()</snippet></ROW><ROW><id>18158956</id><snippet>__init__</snippet></ROW><ROW><id>18158956</id><snippet>Foo</snippet></ROW><ROW><id>18158994</id><snippet>datetime.strftime</snippet></ROW><ROW><id>18158994</id><snippet>&gt;&gt;&gt; d = datetime.fromtimestamp(1372058963)
&gt;&gt;&gt; datetime.strftime(d, '%m/%d/%Y')
'06/24/2013'
&gt;&gt;&gt; datetime.strftime(d, '%m/%d/%Y %H:%M:%S')
'06/24/2013 12:59:23'
</snippet></ROW><ROW><id>18159168</id><snippet>    message = myClass.myMethod()
    self.txtBox.insert(1.0, message)
</snippet></ROW><ROW><id>18159168</id><snippet>myClass</snippet></ROW><ROW><id>18159168</id><snippet>class myClass(object):
    def myMethod():
        return "Hello World!"
</snippet></ROW><ROW><id>18159276</id><snippet>angular.module( '[your module name]',
    ... [some dependencies] ...
    'ngCookies',
    ... [other dependencies] ...
)
.run( function run( $http, $cookies ){

    // For CSRF token compatibility with Django
    $http.defaults.headers.post['X-CSRFToken'] = $cookies['csrftoken'];
})
</snippet></ROW><ROW><id>18159348</id><snippet>with open(in_file1,"r") as f1, open(in_file2,"r") as f2:
    for (line1, line2) in izip(f1, f2):
        compare(line1, line2)
</snippet></ROW><ROW><id>18159367</id><snippet>self.table = 'table'
b = 'value'

c.execute('INSERT INTO {} ({}) VALUES (?)'.format(self.table, a), (b,))
</snippet></ROW><ROW><id>18159677</id><snippet>sum([len(x["users"]) for x in d["work"]])
</snippet></ROW><ROW><id>18159677</id><snippet>f = open("test.yaml")
d = yaml.safe_load(f)

# d is now a dict - {'host': 'example.com', 'work': [{'processes': 1, 'users': [{'username': 'me'}, {'username': 'notme'}]}], 'timeout': 60}

def yaml_count(d, s):
    c = 0
    if isinstance(d, dict):
        for k, v in d.iteritems():
            if k == s: c += 1
            c += yaml_count(v, s)
    elif isinstance(d, list):
        for l in d:
            c += yaml_count(l, s) 
    return c

yaml_count(d, "username") # returns 2
</snippet></ROW><ROW><id>18159862</id><snippet>setup.py</snippet></ROW><ROW><id>18159862</id><snippet>pyinstaller</snippet></ROW><ROW><id>18159862</id><snippet>pyinstaller your_main.py</snippet></ROW><ROW><id>18160076</id><snippet>&gt;&gt;&gt; df.groupby('group').transform(pd.rolling_mean, 2, min_periods=2)
           a         b
0        NaN       NaN
1   0.574971  0.291654
2   0.370050  0.560735
3   0.194388  0.816950
4   0.050686  0.610903
5   0.111486  0.500340
6   0.304626  0.462046
7   0.505010  0.265961
8        NaN       NaN
9   0.294457  0.434566
10  0.433582  0.313119
11  0.300344  0.233727
12  0.362409  0.240011
</snippet></ROW><ROW><id>18160164</id><snippet>from lxml import etree, objectify

metadata = '/Users/user1/Desktop/Python/metadata.xml'
parser = etree.XMLParser(remove_blank_text=True)
tree = etree.parse(metadata, parser)
root = tree.getroot()

####    
for elem in root.getiterator():
    i = elem.tag.find('}')
    if i &gt;= 0:
        elem.tag = elem.tag[i+1:]
objectify.deannotate(root, cleanup_namespaces=True)
####

tree.write('/Users/user1/Desktop/Python/done.xml',
           pretty_print=True, xml_declaration=True, encoding='UTF-8')
</snippet></ROW><ROW><id>18160239</id><snippet>tests/unit/__init__.py</snippet></ROW><ROW><id>18160239</id><snippet>nosetests tests.unit
</snippet></ROW><ROW><id>18160239</id><snippet>unit/__init__.py</snippet></ROW><ROW><id>18160239</id><snippet>unit/</snippet></ROW><ROW><id>18160239</id><snippet>__init__.py</snippet></ROW><ROW><id>18160239</id><snippet>__init__.py</snippet></ROW><ROW><id>18160239</id><snippet>__init__.py</snippet></ROW><ROW><id>18160239</id><snippet>__init__.py</snippet></ROW><ROW><id>18160239</id><snippet>from tests.unit.tests import *
</snippet></ROW><ROW><id>18160239</id><snippet>__init__.py</snippet></ROW><ROW><id>18160684</id><snippet>Location</snippet></ROW><ROW><id>18160684</id><snippet>l1</snippet></ROW><ROW><id>18160684</id><snippet>l2</snippet></ROW><ROW><id>18160684</id><snippet>l1</snippet></ROW><ROW><id>18160684</id><snippet>Rate</snippet></ROW><ROW><id>18160684</id><snippet>r1</snippet></ROW><ROW><id>18160684</id><snippet>r3</snippet></ROW><ROW><id>18160684</id><snippet>r1.rate = 1</snippet></ROW><ROW><id>18160684</id><snippet>r3.rate = 3</snippet></ROW><ROW><id>18160684</id><snippet>l2</snippet></ROW><ROW><id>18160684</id><snippet>r2</snippet></ROW><ROW><id>18160684</id><snippet>r2.rate = 2</snippet></ROW><ROW><id>18160684</id><snippet>l1</snippet></ROW><ROW><id>18160684</id><snippet>l2</snippet></ROW><ROW><id>18160684</id><snippet>l2</snippet></ROW><ROW><id>18160684</id><snippet>l1</snippet></ROW><ROW><id>18160684</id><snippet>l1</snippet></ROW><ROW><id>18160684</id><snippet>l2</snippet></ROW><ROW><id>18160684</id><snippet>l2</snippet></ROW><ROW><id>18160713</id><snippet>getbox</snippet></ROW><ROW><id>18160713</id><snippet>playerbox = player.getbox</snippet></ROW><ROW><id>18160713</id><snippet>playerbox = player.getbox()</snippet></ROW><ROW><id>18160713</id><snippet>pack_start</snippet></ROW><ROW><id>18160713</id><snippet>instancemethod</snippet></ROW><ROW><id>18160883</id><snippet>month</snippet></ROW><ROW><id>18160883</id><snippet>7</snippet></ROW><ROW><id>18160883</id><snippet>Date.UTC()</snippet></ROW><ROW><id>18160883</id><snippet>var utc = Date.UTC(2013, 7, 10) / 1000;
// 1376092800
</snippet></ROW><ROW><id>18160883</id><snippet>getTime()</snippet></ROW><ROW><id>18160883</id><snippet>Date</snippet></ROW><ROW><id>18160883</id><snippet>var curdate = new Date(2013, 7, 10);
var utc = curdate.getTime() / 1000;
</snippet></ROW><ROW><id>18161115</id><snippet> def parse_args(args):
     parser = argparse.ArgumentParser(...)
     parser.add_argument...
     # create your parser as you like
     return parser.parse_args(args)
</snippet></ROW><ROW><id>18161115</id><snippet>main</snippet></ROW><ROW><id>18161115</id><snippet>parser = parse_args(sys.argv)
</snippet></ROW><ROW><id>18161115</id><snippet>def test_parser(self):
    parser = parse_args(['-l', '-m'])
    self.assertTrue(parser.long)
    # Or whatever you have
</snippet></ROW><ROW><id>18161115</id><snippet>def create_parser():
    parser = argparse.ArgumentParser(...)
    parser.add_argument...
    # create your parser as you like
    return parser
</snippet></ROW><ROW><id>18161115</id><snippet>class ParserTest(unittest.TestCase):
    def setUp(self):
        self.parser = create_parser()

    def test_something(self):
        parsed = self.parser.parse_args(['--something', 'test'])
        self.assertEqual(parsed.something, 'test')
</snippet></ROW><ROW><id>18161224</id><snippet>shows = {}

# some loop producing entries
    if title not in shows:
        show = shows[title] = {'episodes': []}  # new show dictionary
    else:
        show = shows[title]

    # now you have `show` dictionary to work with
    # add episodes directly to `show['episodes']`
</snippet></ROW><ROW><id>18161224</id><snippet>shows.values()</snippet></ROW><ROW><id>18161386</id><snippet>@patch('builtins.input', lambda: 'y')
</snippet></ROW><ROW><id>18161438</id><snippet>def change_freq(freq_set, freq_set_val, freq, i1, i2):
    change = "echo "+ str(freq_set[freq_set_val][freq][i1]) +"&gt; /sys/devices/system/cpu/cpu"+ str(sets[freq_set_val][i2]) + "/cpufreq/scaling_setspeed"
    # os.system(change)

for freq_set_val in range(0, len(freq_set)):
    for freq in range(0, len(freq_set[freq_set_val])):       
        for i in range(0, (freq_set_val+1)*2): 
            change_freq(freq_set, freq_set_val, freq, i/2, i)

        if freq_set_val == 0:
            print "dosomething"
        if freq_set_val == 1:
            print "dosomething"
        if freq_set_val == 2:
            print "dosomething"
        if freq_set_val == 3:
            print "dosomething"
</snippet></ROW><ROW><id>18161521</id><snippet>people</snippet></ROW><ROW><id>18161521</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.randrange(0, 0)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mj/Development/Libraries/buildout.python/parts/opt/lib/python2.7/random.py", line 217, in randrange
    raise ValueError, "empty range for randrange() (%d,%d, %d)" % (istart, istop, width)
ValueError: empty range for randrange() (0,0, 0)
</snippet></ROW><ROW><id>18161521</id><snippet>people</snippet></ROW><ROW><id>18161521</id><snippet>people</snippet></ROW><ROW><id>18161521</id><snippet>group</snippet></ROW><ROW><id>18161521</id><snippet>import random

people = 'Alice Elise Jack Jill Ricardo David Jane Sacha Thomas'.split()
random.shuffle(people)
group.extend(people[:6])
people = people[6:]  # remainder, so the 6 picks have been removed
</snippet></ROW><ROW><id>18161521</id><snippet>random.sample()</snippet></ROW><ROW><id>18161521</id><snippet>people = 'Alice Elise Jack Jill Ricardo David Jane Sacha Thomas'.split()
group.extend(random.sample(people, 6))
</snippet></ROW><ROW><id>18161521</id><snippet>people</snippet></ROW><ROW><id>18162021</id><snippet>import pandas

sample={'user1': {'item1': 2.5, 'item2': 3.5, 'item3': 3.0, 'item4': 3.5, 'item5': 2.5, 'item6': 3.0},
        'user2': {'item1': 2.5, 'item2': 3.0, 'item3': 3.5, 'item4': 4.0},
        'user3': {'item2':4.5,'item5':1.0,'item6':4.0}}

df = pandas.DataFrame([
    [col1,col2,col3] for col1, d in sample.items() for col2, col3 in d.items()
])
</snippet></ROW><ROW><id>18162121</id><snippet>In [69]: df = DataFrame(dict(time = x))

In [70]: df
Out[70]: 
                 time
0 2013-01-01 09:01:00
1 2013-01-01 09:01:00
2 2013-01-01 09:01:01
3 2013-01-01 09:01:01
4 2013-01-01 09:01:02
5 2013-01-01 09:01:02
6 2013-01-01 09:01:03
7 2013-01-01 09:01:03
8 2013-01-01 09:01:04
9 2013-01-01 09:01:04
</snippet></ROW><ROW><id>18162121</id><snippet>In [71]: mask = (df.time-df.time.shift()) == np.timedelta64(0,'s')

In [72]: mask
Out[72]: 
0    False
1     True
2    False
3     True
4    False
5     True
6    False
7     True
8    False
9     True
Name: time, dtype: bool
</snippet></ROW><ROW><id>18162121</id><snippet>df.loc[mask,'time'] += pd.offsets.Milli(5)</snippet></ROW><ROW><id>18162121</id><snippet>In [73]: df.loc[mask,'time'] = df.time[mask].apply(lambda x: x+pd.offsets.Milli(5))

In [74]: df
Out[74]: 
                        time
0        2013-01-01 09:01:00
1 2013-01-01 09:01:00.005000
2        2013-01-01 09:01:01
3 2013-01-01 09:01:01.005000
4        2013-01-01 09:01:02
5 2013-01-01 09:01:02.005000
6        2013-01-01 09:01:03
7 2013-01-01 09:01:03.005000
8        2013-01-01 09:01:04
9 2013-01-01 09:01:04.005000
</snippet></ROW><ROW><id>18162170</id><snippet>for i in arr</snippet></ROW><ROW><id>18162170</id><snippet>i</snippet></ROW><ROW><id>18162170</id><snippet>arr[i]</snippet></ROW><ROW><id>18162170</id><snippet>i</snippet></ROW><ROW><id>18162620</id><snippet>mount -t cifs</snippet></ROW><ROW><id>18162883</id><snippet>SyntaxError</snippet></ROW><ROW><id>18162883</id><snippet>chars = ["√", "∞", "²","³", "≤", "≥", "±", "≠"]
for c in chars:
    print(c)
</snippet></ROW><ROW><id>18162883</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>18162883</id><snippet># -*- coding: utf-8 -*-

chars = ["√", "∞", "²","³", "≤", "≥", "±", "≠"]
for c in chars:
    print(c)
</snippet></ROW><ROW><id>18162883</id><snippet>√
∞
²
³
≤
≥
±
≠
</snippet></ROW><ROW><id>18163063</id><snippet>utf-8</snippet></ROW><ROW><id>18163063</id><snippet>coding</snippet></ROW><ROW><id>18163063</id><snippet># -*- coding: utf-8 -*-

import urllib

s = u'î'
print urllib.quote(s.encode('utf-8'))
</snippet></ROW><ROW><id>18163063</id><snippet>%C3%AE
</snippet></ROW><ROW><id>18163254</id><snippet>unwrap()</snippet></ROW><ROW><id>18163254</id><snippet>unwrap()</snippet></ROW><ROW><id>18163254</id><snippet>replace_with()</snippet></ROW><ROW><id>18163254</id><snippet>unwrap()</snippet></ROW><ROW><id>18163254</id><snippet>img</snippet></ROW><ROW><id>18163254</id><snippet>unwrap()</snippet></ROW><ROW><id>18163254</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>18163254</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; html = '''&lt;div&gt; &lt;a href="http://somelink"&gt;&lt;img src="http://imgsrc.jpg" /&gt;&lt;/a&gt; &lt;a href="http://somelink2"&gt;&lt;img src="http://imgsrc2.jpg /&gt;&lt;/a&gt;"  '''
&gt;&gt;&gt; soup = BeautifulSoup(html)
&gt;&gt;&gt; for img in soup.find_all('img'):
...     img.parent.unwrap()
...     print img.parent
... 
&lt;a href="http://somelink"&gt;&lt;/a&gt;
&lt;div&gt; &lt;img src="http://imgsrc.jpg"/&gt; &lt;a href="http://somelink2"&gt;&lt;img src="http://imgsrc2.jpg /&gt;&lt;/a&gt;"/&gt;&lt;/a&gt;&lt;/div&gt;
&lt;a href="http://somelink2"&gt;&lt;/a&gt;
&lt;div&gt; &lt;img src="http://imgsrc.jpg"/&gt; &lt;img src="http://imgsrc2.jpg /&gt;&lt;/a&gt;"/&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>18163254</id><snippet>img.parent.unwrap()</snippet></ROW><ROW><id>18163254</id><snippet>print</snippet></ROW><ROW><id>18163254</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>18163254</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>18163254</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>18163254</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>18163332</id><snippet>if not letter.isalpha():
    continue
</snippet></ROW><ROW><id>18163332</id><snippet>str.isalpha()</snippet></ROW><ROW><id>18163332</id><snippet>True</snippet></ROW><ROW><id>18163549</id><snippet>#!/usr/bin/env python
import socket
s=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
s.sendto('\xff'*6+'\x00\x11\x22\x33\x44\x55'*16, ('192.168.0.255', 9))
print "Attempted to wake host"
</snippet></ROW><ROW><id>18163549</id><snippet>\x00\x11</snippet></ROW><ROW><id>18163549</id><snippet>192.168.0.255</snippet></ROW><ROW><id>18163730</id><snippet>&gt;&gt;&gt; np.arange(10)[:, np.newaxis]
array([[0],
       [1],
       [2],
       [3],
       [4],
       [5],
       [6],
       [7],
       [8],
       [9]])
</snippet></ROW><ROW><id>18163730</id><snippet>np.newaxis</snippet></ROW><ROW><id>18163730</id><snippet>None</snippet></ROW><ROW><id>18163730</id><snippet>numpy</snippet></ROW><ROW><id>18163730</id><snippet>np.arange(10)[:, None]</snippet></ROW><ROW><id>18163759</id><snippet>__del__</snippet></ROW><ROW><id>18163759</id><snippet>TypeError</snippet></ROW><ROW><id>18163759</id><snippet>__del__</snippet></ROW><ROW><id>18163759</id><snippet>None</snippet></ROW><ROW><id>18163759</id><snippet>a.close()</snippet></ROW><ROW><id>18163759</id><snippet>GeneratorExit</snippet></ROW><ROW><id>18163759</id><snippet>except MyException:</snippet></ROW><ROW><id>18163759</id><snippet>MyException</snippet></ROW><ROW><id>18163759</id><snippet>except None:</snippet></ROW><ROW><id>18163759</id><snippet>TypeError</snippet></ROW><ROW><id>18163759</id><snippet>MyException = None
del a
</snippet></ROW><ROW><id>18163759</id><snippet>list(a)</snippet></ROW><ROW><id>18163759</id><snippet>a.close()</snippet></ROW><ROW><id>18163759</id><snippet>MyException</snippet></ROW><ROW><id>18163759</id><snippet>GeneratorExit</snippet></ROW><ROW><id>18163759</id><snippet>def gen():
  for i in range(3):
    try:
      yield i
    except GeneratorExit:
      return
    except MyException:
      print("MyException!")
</snippet></ROW><ROW><id>18163759</id><snippet>except</snippet></ROW><ROW><id>18163759</id><snippet>.__del__()</snippet></ROW><ROW><id>18163759</id><snippet>.__del__()</snippet></ROW><ROW><id>18163759</id><snippet>__del__()</snippet></ROW><ROW><id>18163759</id><snippet>sys.stderr</snippet></ROW><ROW><id>18163759</id><snippet>__del__()</snippet></ROW><ROW><id>18163759</id><snippet>__del__()</snippet></ROW><ROW><id>18163759</id><snippet>__del__()</snippet></ROW><ROW><id>18163759</id><snippet>__del__()</snippet></ROW><ROW><id>18163761</id><snippet>html_post_start = re.search('&lt;div class="articleline2"&gt;&lt;/div&gt;', html)
</snippet></ROW><ROW><id>18163761</id><snippet>html_post_start = re.search('&lt;div class="excerpt"&gt;&lt;/div&gt;', html)
</snippet></ROW><ROW><id>18163761</id><snippet>None</snippet></ROW><ROW><id>18163796</id><snippet>0</snippet></ROW><ROW><id>18163796</id><snippet>import numpy as np

def mirrored(maxval, inc=1):
    x = np.arange(inc, maxval, inc)
    if x[-1] != maxval:
        x = np.r_[x, maxval]
    return np.r_[-x[::-1], 0, x]

print mirrored(1, 0.3)
</snippet></ROW><ROW><id>18163796</id><snippet>[-1.  -0.9 -0.6 -0.3  0.   0.3  0.6  0.9  1. ]
</snippet></ROW><ROW><id>18163796</id><snippet>import numpy as np

def mirrored2(maxval, inc=1):
    return np.linspace(-maxval, maxval, 2*maxval // inc)

print mirrored2(1, 0.3)
</snippet></ROW><ROW><id>18163796</id><snippet>[-1.  -0.6 -0.2  0.2  0.6  1. ]
</snippet></ROW><ROW><id>18163999</id><snippet>numpy.newaxis</snippet></ROW><ROW><id>18163999</id><snippet>None</snippet></ROW><ROW><id>18163999</id><snippet>None</snippet></ROW><ROW><id>18163999</id><snippet>newaxis</snippet></ROW><ROW><id>18164176</id><snippet>unique=True</snippet></ROW><ROW><id>18164176</id><snippet>Property</snippet></ROW><ROW><id>18164176</id><snippet>email = models.EmailProperty(indexed=True, unique=True)
</snippet></ROW><ROW><id>18164245</id><snippet>nlst</snippet></ROW><ROW><id>18164245</id><snippet>dlst = [Myclass(0)]*nlst
</snippet></ROW><ROW><id>18164245</id><snippet>nlist</snippet></ROW><ROW><id>18164245</id><snippet>Myclass(0)</snippet></ROW><ROW><id>18164245</id><snippet>nlst</snippet></ROW><ROW><id>18164245</id><snippet>dlst = [Myclass(0) for _ in range(nlst)]
</snippet></ROW><ROW><id>18164296</id><snippet>items.append(item)
</snippet></ROW><ROW><id>18164296</id><snippet>item</snippet></ROW><ROW><id>18164296</id><snippet>for-loop</snippet></ROW><ROW><id>18164296</id><snippet>for stat in stats:

    item = MlbrefItem()

    items .append(item)
    count +=1
</snippet></ROW><ROW><id>18164296</id><snippet>stats = hxs.select('//div[@class="table_container"]')</snippet></ROW><ROW><id>18164296</id><snippet>count += 1</snippet></ROW><ROW><id>18164296</id><snippet>count</snippet></ROW><ROW><id>18164296</id><snippet>stats = hxs.select('//div[@class="table_container"]')
        count = 0
        items = []

        for stat in stats:

            item = MlbrefItem()

            item['rank'] = stat.select('//table[@id="team_batting"]/tbody/tr/td[1]//text()').extract()
             item ['position'] = stat.select('//table[@id="team_batting"]/tbody/tr/td[2]//text()').extract()

            items .append(item)
            count +=1 #PrahaladDeshpande - This count variable is incremented only 5 times since it is within the for loop

        return items
</snippet></ROW><ROW><id>18164296</id><snippet>count</snippet></ROW><ROW><id>18164296</id><snippet>stats = hxs.select('//div[@class="table_container"]')
for stat in stats:
        rank_list = stat.select('//table[@id="team_batting"]/tbody/tr/td[1]//text()').extract()
        position_list = stat.select('//table[@id="team_batting"]/tbody/tr/td[2]//text()').extract()

         //TODO : verify that the length of the rank_list and position_list are the same. Else throw an error
         for i in range(0, len(rank_list)):
             item = MlbrefItem()
             item['rank'] = rank_list[i]
             item['position'] = position_list[i]
             items.append(item)
</snippet></ROW><ROW><id>18164296</id><snippet>items</snippet></ROW><ROW><id>18164428</id><snippet>*</snippet></ROW><ROW><id>18164428</id><snippet>?</snippet></ROW><ROW><id>18164428</id><snippet>match = re.match(r'(.*?)=(.*)', line)
</snippet></ROW><ROW><id>18164428</id><snippet>&gt;&gt;&gt; line = '#Init3 = AT+CPIN="0000"'
&gt;&gt;&gt; re.match(r'(.*?)=(.*)', line).group()
'#Init3 = AT+CPIN="0000"'
</snippet></ROW><ROW><id>18164496</id><snippet>line 2</snippet></ROW><ROW><id>18164817</id><snippet>import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind(('',2232))
s.listen(1)
while 1:
   conn, addr = s.accept()
   conn.close()
   #do something here
   print "Someone connected"
</snippet></ROW><ROW><id>18164838</id><snippet>&gt;&gt;&gt; re.sub('(\d+)', 'sub\g&lt;1&gt;', "C7H19N3")
'Csub7Hsub19Nsub3'
</snippet></ROW><ROW><id>18164838</id><snippet>(\d+)</snippet></ROW><ROW><id>18164838</id><snippet>\g&lt;1&gt;</snippet></ROW><ROW><id>18164970</id><snippet>x='My Father is an American, and he is handsome. My Mother is from North America and she is nice'

y = x.split()[1:]
for (i,j) in enumerate(y):
    if j.startswith('America'):
        print y[i-1]

an
North
</snippet></ROW><ROW><id>18165121</id><snippet>from collections import Counter

def count_letters(in_filename, out_filename):
    counts = Counter()
    with open(in_filename, "r") as in_file:
        for chunk in iter(lambda: in_file.read(8196), ''):
            counts.update(chunk)
    with open(out_filename, "w") as out_file:
        for letter, count in counts.iteritems():
            out_file.write('{}:{}\n'.format(letter, count)
</snippet></ROW><ROW><id>18165121</id><snippet>.most_common()</snippet></ROW><ROW><id>18165121</id><snippet>.iteritems()</snippet></ROW><ROW><id>18165196</id><snippet>initUI</snippet></ROW><ROW><id>18165196</id><snippet>newFile</snippet></ROW><ROW><id>18165196</id><snippet>openFile</snippet></ROW><ROW><id>18165196</id><snippet>tab_widget</snippet></ROW><ROW><id>18165196</id><snippet>tab_wiget</snippet></ROW><ROW><id>18165196</id><snippet>initUI</snippet></ROW><ROW><id>18165196</id><snippet>def openFile(self):
    filename = QtGui.QFileDialog.getOpenFileName(self, 'Open File', os.getenv('HOME'))[0]
    with open(filename, 'r') as f:
        filedata = f.read()
        text_widget = QtGui.QTextEdit(self.tab_widget)
        text_widget.setText(filedata)
        self.tab_widget.addTab(text_widget, os.path.basename(filename))
</snippet></ROW><ROW><id>18165248</id><snippet>s1=input() #type s as input
s1!='s' # so it is 's\r'
</snippet></ROW><ROW><id>18165271</id><snippet>MessageBoxA</snippet></ROW><ROW><id>18165271</id><snippet>MessageBoxW</snippet></ROW><ROW><id>18165271</id><snippet>ctypes</snippet></ROW><ROW><id>18165271</id><snippet>MessageBoxA</snippet></ROW><ROW><id>18165271</id><snippet>locale.getpreferredencoding()</snippet></ROW><ROW><id>18165271</id><snippet>from ctypes import c_int, WINFUNCTYPE, windll
from ctypes.wintypes import HWND, LPCSTR, UINT
import locale
preferred_encoding = locale.getpreferredencoding(False)
prototype = WINFUNCTYPE(c_int, HWND, LPCSTR, LPCSTR, UINT)
paramflags = ((1, "hwnd", 0), (1, "text", "Hi".encode(preferred_encoding)),
                (1, "caption", None), (1, "flags", 0))
MessageBox = prototype(("MessageBoxA", windll.user32), paramflags)

MessageBox()
MessageBox(text="Spam, spam, spam".encode(preferred_encoding))
MessageBox(flags=2, text="foo bar".encode(preferred_encoding))
</snippet></ROW><ROW><id>18165271</id><snippet>MessageBoxW</snippet></ROW><ROW><id>18165271</id><snippet>LPCWSTR</snippet></ROW><ROW><id>18165271</id><snippet>LPCSTR</snippet></ROW><ROW><id>18165271</id><snippet>from ctypes import c_int, WINFUNCTYPE, windll
from ctypes.wintypes import HWND, LPCWSTR, UINT
import win32con  # contains Win32 constants pulled from the C header files
INPUT_PARM, OUTPUT_PARAM, INPUT_PARM_DEFAULT_ZERO = 1, 2, 4
prototype = WINFUNCTYPE(c_int, HWND, LPCWSTR, LPCWSTR, UINT)
paramflags = ((INPUT_PARM, "hwnd", 0),
              (INPUT_PARM, "text", "Hi"),
              (INPUT_PARM, "caption", None),
              (INPUT_PARM, "flags", win32con.MB_HELP))
MessageBox = prototype(("MessageBoxW", windll.user32), paramflags)

MessageBox()
MessageBox(text="Spam, spam, spam")
MessageBox(flags=win32con.MB_ABORTRETRYIGNORE, text="foo bar")
</snippet></ROW><ROW><id>18165341</id><snippet>__init__</snippet></ROW><ROW><id>18165341</id><snippet>clean_are_you_cool</snippet></ROW><ROW><id>18165341</id><snippet>Yes</snippet></ROW><ROW><id>18165341</id><snippet>how_cool</snippet></ROW><ROW><id>18165341</id><snippet>def clean_are_you_cool(self):
    if self.cleaned_data.get('are_you_cool', None) == 'Yes':
        if self.cleaned_data.get('how_cool', None) is not None:
           #  Actions for cool user. 
           pass
    #  Or if user not cool.
</snippet></ROW><ROW><id>18165413</id><snippet>x, y = a, b
</snippet></ROW><ROW><id>18165413</id><snippet>x = a
y = b
</snippet></ROW><ROW><id>18165413</id><snippet>start, stop = 0, start</snippet></ROW><ROW><id>18165413</id><snippet>stop = start
start = 0
</snippet></ROW><ROW><id>18165413</id><snippet>temp = start
start = 0
stop = temp 
</snippet></ROW><ROW><id>18165484</id><snippet>from twisted.python.log import err
from twisted.internet.protocol import Protocol

class YourProtocol(Protocol):
    ...
    def messageReceived(self, message):
        d = lookupWebService(message)
        d.addCallback(queryDatabase)
        d.addCallback(saveResults)
        d.addErrback(err, "Servicing %r failed" % (message,))
</snippet></ROW><ROW><id>18165484</id><snippet>twisted.web.client</snippet></ROW><ROW><id>18165484</id><snippet>twisted.enterprise.adbapi</snippet></ROW><ROW><id>18165564</id><snippet>import re
import json
for line in logs:
    for t in re.finditer(r"\{.*\}", line):
        try:
            json.loads(t.group())
        except ValueError:
            pass
</snippet></ROW><ROW><id>18165736</id><snippet>import re
s = 'D08838  Acotiamide hydrochloride hydrate (JAN/BBC); Acotiamide hydrochloride (USAN) Antagonist'
print re.sub('(\s*\(.*?\))', '', s)
#D08838  Acotiamide hydrochloride hydrate; Acotiamide hydrochloride Antagonist
</snippet></ROW><ROW><id>18165798</id><snippet>0.10.0</snippet></ROW><ROW><id>18165798</id><snippet>pip install django-tastypie==0.9.16</snippet></ROW><ROW><id>18166071</id><snippet>systemctl daemon-reload</snippet></ROW><ROW><id>18166071</id><snippet>notify</snippet></ROW><ROW><id>18166071</id><snippet>forking</snippet></ROW><ROW><id>18166071</id><snippet>PIDfile</snippet></ROW><ROW><id>18166100</id><snippet>myusername   ALL=(ALL:ALL) NOPASSWD:/home/pi/simplesi_scratch_handler/scratch_gpio_handler2.py
</snippet></ROW><ROW><id>18166100</id><snippet>os.system('sudo python /home/pi/simplesi_scratch_handler/scratch_gpio_handler2.py '+ str(repr(wherefrom[0])) + " &amp;")
</snippet></ROW><ROW><id>18166180</id><snippet>.bashrc</snippet></ROW><ROW><id>18166180</id><snippet>export PYTHONPATH=$PYTHONPATH:/usr/local/lib/python2.7/site-packages
</snippet></ROW><ROW><id>18166180</id><snippet>.bashrc</snippet></ROW><ROW><id>18166180</id><snippet>manage.py</snippet></ROW><ROW><id>18166190</id><snippet>startup.name</snippet></ROW><ROW><id>18166191</id><snippet>TubeFilter</snippet></ROW><ROW><id>18166390</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>18166390</id><snippet>from operator import itemgetter
callme(*itemgetter(0, 1, 4)(alist))
</snippet></ROW><ROW><id>18166557</id><snippet>get_selected_rows</snippet></ROW><ROW><id>18166557</id><snippet>gtk.TreeSelection</snippet></ROW><ROW><id>18166557</id><snippet>my_other_callback</snippet></ROW><ROW><id>18166557</id><snippet>self.treeview</snippet></ROW><ROW><id>18166557</id><snippet>connect</snippet></ROW><ROW><id>18166557</id><snippet>tree_selection.connect('changed', self.my_other_callback, self.treeview)
</snippet></ROW><ROW><id>18166557</id><snippet>tree_selection.connect('changed', lambda *args: self.my_other_callback(self.treeview))
</snippet></ROW><ROW><id>18166557</id><snippet>*args</snippet></ROW><ROW><id>18166579</id><snippet>from folder import mainprogram</snippet></ROW><ROW><id>18166579</id><snippet>mainprogram</snippet></ROW><ROW><id>18166579</id><snippet>folder.py</snippet></ROW><ROW><id>18166579</id><snippet>python.exe mainprogram.py</snippet></ROW><ROW><id>18166579</id><snippet>import mainprogram</snippet></ROW><ROW><id>18166579</id><snippet>if</snippet></ROW><ROW><id>18166579</id><snippet>if __name__ == "__main__":
    # this code will not be run on import
</snippet></ROW><ROW><id>18166612</id><snippet>&gt;&gt;&gt; books = ls[0]
&gt;&gt;&gt; for book, details in books.iteritems():
        print book,'--&gt;', details['cover']
...     
Mummy (14) --&gt; V:\Books\Anne Rice\Mummy (14)\cover.jpg
The Wolf Gift (13) --&gt; V:\Books\Anne Rice\The Wolf Gift (13)\cover.jpg
</snippet></ROW><ROW><id>18166884</id><snippet>if</snippet></ROW><ROW><id>18166884</id><snippet>%module test

%typemap(in) void* pParameter (int res=0, void *other_struct=NULL) %{
  int len;
  res = SWIG_ConvertPtr($input, &amp;other_struct, $descriptor(struct ANOTHER_STRUCT*), 0);
  if (SWIG_IsOK(res)) {
    fprintf(stderr, "struct\n");
    $1 = reinterpret_cast&lt; ANOTHER_STRUCT * &gt;(argp1);
    len = sizeof(ANOTHER_STRUCT);
  }
  else if (PyString_Check($input)) {
    $1 = PyString_AsString($input);
    len = strlen((const char*)$1);
    fprintf(stderr, "string\n");
  }
  //else if (...) {
  //}
  else {
    SWIG_exception_fail(SWIG_TypeError, "some more details, see special typemap variables docs for ideas");
  }
%}

%typemap(memberin) void* pParameter %{
  $1 = $input; //fobar $self
  $self-&gt;pLen = len;
%}

%inline %{
typedef struct MY_STRUCT {
  void*       pParameter;
  unsigned long pLen;
} MY_STRUCT;

typedef struct ANOTHER_STRUCT {
} ANOTHER_STRUCT;
%}

%extend MY_STRUCT
{
    MY_STRUCT()
    {
        MY_STRUCT *m= new MY_STRUCT;
        m-&gt;pParameter = NULL;
        m-&gt;pLen = 0;
        return m;
    }
}
</snippet></ROW><ROW><id>18166884</id><snippet>in</snippet></ROW><ROW><id>18166884</id><snippet>memberin</snippet></ROW><ROW><id>18166884</id><snippet>void*</snippet></ROW><ROW><id>18166884</id><snippet>pLen</snippet></ROW><ROW><id>18166884</id><snippet>%immutable</snippet></ROW><ROW><id>18166900</id><snippet>import re

# key : value regexp
KV_RE = re.compile(r'^\s*(?P&lt;key&gt;[^\s]+)\s+:\s+(?P&lt;value&gt;.+?)\s*$')
# dict start regexp
DS_RE = re.compile(r'^\s*(?P&lt;key&gt;[^\s]+)\s+{\s*$')
# dict end regexp
DE_RE = re.compile(r'^\s*}\s*$')


def parse(s):
    current = {}
    stack = []
    for line in s.strip().splitlines():
        match = KV_RE.match(line)
        if match:
            gd = match.groupdict()
            current[gd['key']] = gd['value']
            continue
        match = DS_RE.match(line)
        if match:
            stack.append(current)
            current = current.setdefault(match.groupdict()['key'], {})
            continue
        match = DE_RE.match(line)
        if match:
            current = stack.pop()
            continue
        # Error occured
        print('Error: %s' % line)
        return {}
    return current
</snippet></ROW><ROW><id>18167181</id><snippet>readlines</snippet></ROW><ROW><id>18167181</id><snippet>len(t2)</snippet></ROW><ROW><id>18167181</id><snippet>with open('your_file', 'rb') as f:
    data = f.read()
print(len(data))
</snippet></ROW><ROW><id>18167181</id><snippet>rt</snippet></ROW><ROW><id>18167181</id><snippet>import io
with io.open('your_file', 'r', encoding='your_file_encoding') as f:
    lines = f.readlines()
</snippet></ROW><ROW><id>18167181</id><snippet>import io
with io.open('d:\\DRA_ACTORDEF_T0.x', 'r', encoding='your_encoding') as f:
    for line in f:
        print line
</snippet></ROW><ROW><id>18167181</id><snippet>readline</snippet></ROW><ROW><id>18167181</id><snippet>import io
filename = 'd:\\DRA_ACTORDEF_T0.x'
size = os.stat(filename).st_size
with io.open(filename, 'r', encoding='your_encoding') as f:
    while f.tell() &lt; size:
         # Do what you want
         line = f.readline()
</snippet></ROW><ROW><id>18167278</id><snippet>&gt;&gt;&gt; list1 = [0,0,3,3,0,1,1,1,3,3,0,2,0,2,0,0,2,2]
&gt;&gt;&gt; list2 = [18,23,56,34,23,67,89,43,12,22,34,21,54,23,67,12,45,67]
&gt;&gt;&gt; import collections
&gt;&gt;&gt; result = collections.defaultdict(list)
&gt;&gt;&gt; for i, j in zip(list1, list2):
...     result[i].append(j)
...
&gt;&gt;&gt; result
defaultdict(&lt;type 'list'&gt;, {0: [18, 23, 23, 34, 54, 67, 12], 1: [67, 89, 43], 2: [21, 23, 45, 67], 3: [56, 34, 12, 22]})
&gt;&gt;&gt; result[0]
[18, 23, 23, 34, 54, 67, 12]
&gt;&gt;&gt; result[1]
[67, 89, 43]
</snippet></ROW><ROW><id>18167278</id><snippet>&gt;&gt;&gt; for key, values in result.items():
...     result[str(key)] = ','.join(str(v) for v in values)
</snippet></ROW><ROW><id>18167413</id><snippet>cd xxx</snippet></ROW><ROW><id>18167650</id><snippet>import matplotlib.pyplot as plt
import numpy as np
import copy

my_cmap = copy.copy(plt.cm.get_cmap('gray')) # get a copy of the gray color map
my_cmap.set_bad(alpha=0) # set how the colormap handles 'bad' values
lattice = plt.imread('path')
im = plt.imshow(data[0,:,:],vmin=v_min,vmax=v_max,extent=(0,32,0,32),interpolation='nearest',cmap='jet')

lattice[lattice&lt; thresh] = np.nan # insert 'bad' values into your lattice (the white)

im2 = plt.imshow(lattice,extent=(0,32,0,32),cmap=my_cmap)
</snippet></ROW><ROW><id>18167650</id><snippet>imshow</snippet></ROW><ROW><id>18167650</id><snippet>np.array</snippet></ROW><ROW><id>18167650</id><snippet>im2 = np.zeros(lattice.shape + (4,))
im2[:, :, 3] = lattice # assuming lattice is already a bool array

imshow(im2)
</snippet></ROW><ROW><id>18167772</id><snippet>[]</snippet></ROW><ROW><id>18167772</id><snippet>[Inedthis ]</snippet></ROW><ROW><id>18167772</id><snippet>\[I ... \]</snippet></ROW><ROW><id>18167779</id><snippet>MAIL = root
HOME = /
</snippet></ROW><ROW><id>18167779</id><snippet>*/1 * * * * /home/user/tester.py
</snippet></ROW><ROW><id>18167801</id><snippet>player_name = "Robert"

player_stats = {
    "health": 200,
    "mana": 150,
    "has_sword": True,
    "has_arrows": False,
    "has_shovel": True,
    "dungeon1_complete": True
}
</snippet></ROW><ROW><id>18167801</id><snippet># If these can be greater than 255, they must be stored across multiple bytes - extra work
byte_attribs = ["health", "mana"]

bit_attribs = ["has_sword", "has_arrows", "has_shovel", "dungeon1_complete"]

player_name_max_length = 7
byte_attrib_offset = player_name_max_length
bit_attrib_offset = byte_attrib_offset + len(byte_attribs)

secret_storage = bytearray(bit_attrib_offset + len(bit_attribs))

assert(len(player_name) &lt;= player_name_max_length)
</snippet></ROW><ROW><id>18167801</id><snippet># Serialize Player Name
secret_storage[:player_name_max_length] = player_name.rjust(player_name_max_length)

# Serialize attributes:
for idx, attrib in enumerate(byte_attribs):
    secret_storage[byte_attrib_offset + idx] = player_stats[attrib]

for idx, attrib in enumerate(bit_attribs):
    byte_offset = idx // 8  # attribs 0-7 go in byte 0, etc.
    bit_offset = idx % 8

    # Bit manipulation examples: http://wiki.python.org/moin/BitManipulation
    current_byte = bit_attrib_offset + byte_offset
    if player_stats[attrib]:
        mask = 1 &lt;&lt; bit_offset
        secret_storage[current_byte] = secret_storage[current_byte] | mask
    else:
        mask = ~(1 &lt;&lt; bit_offset)
        secret_storage[current_byte] = secret_storage[current_byte] &amp; mask
</snippet></ROW><ROW><id>18167801</id><snippet>print "Storage array encoded as ascii:", secret_storage

# Access name:
print "Name:", secret_storage[:player_name_max_length].lstrip()
# &gt;&gt;&gt; Name: Robert

# Access byte values:
attrib_idx = byte_attribs.index("mana")
print "Mana level:", secret_storage[byte_attrib_offset + attrib_idx]
# &gt;&gt;&gt; Mana level: 150

# Access bit flags:
attrib_idx = bit_attribs.index("dungeon1_complete")
print "Completed Dungeon 1:", bool(secret_storage[bit_attrib_offset + (attrib_idx // 8)] &amp; (1 &lt;&lt; attrib_idx % 8))
# &gt;&gt;&gt; Completed Dungeon 1: True
</snippet></ROW><ROW><id>18167953</id><snippet>plot()</snippet></ROW><ROW><id>18167953</id><snippet>import numpy, pylab, random

data = [ random.gauss(1, 0.2) for x in range(1000) ]

fig = pylab.figure()
weights = numpy.ones_like(data)/float(len(data))
n, bins, patches =pylab.hist(data, bins=20, histtype='bar', 
                         weights=weights)
pylab.xlim(min(bins), max(bins))
pylab.ylim(0, 1)
pylab.show()
</snippet></ROW><ROW><id>18168075</id><snippet>fun! GetRange()
python &lt;&lt; EOF

import vim

buf = vim.current.buffer
(lnum1, col1) = buf.mark('&lt;')
(lnum2, col2) = buf.mark('&gt;')
lines = vim.eval('getline({}, {})'.format(lnum1, lnum2))
lines[0] = lines[0][col1:]
lines[-1] = lines[-1][:col2]
print "\n".join(lines)

EOF
endfun
</snippet></ROW><ROW><id>18168075</id><snippet>vim.eval</snippet></ROW><ROW><id>18168152</id><snippet>%load</snippet></ROW><ROW><id>18168191</id><snippet>y</snippet></ROW><ROW><id>18168191</id><snippet>x</snippet></ROW><ROW><id>18168191</id><snippet>import numpy as np

N = 100

# x coordinates of the data
xmin = -10
xmax = 10
x = np.linspace(xmin, xmax, N, endpoint=False)

# Generate data in y.
n = 35
y = np.zeros(N)
y[:n] = 1 - np.cos(np.linspace(0, 2*np.pi, n))
y[:n] /= 0.7 + 0.3*np.random.rand(n)
m = 10
y = np.r_[y[m:], y[:m]]

# Compute coefficent 1 of the discrete Fourier transform.
w = np.exp(-2j*np.pi*np.arange(N) / N)
F1 = y.dot(w)
print "F1 =", F1

# Get the angle of F1 (in the interval [0,2*pi]).
angle = np.angle(F1.conj())
if angle &lt; 0:
    angle += 2*np.pi

center_x = xmin + (xmax - xmin) * angle / (2*np.pi)
print "center_x = ", center_x

# Create the first sinusoidal mode for the plot.
mode1 = (F1.real * np.cos(2*np.pi*np.arange(N)/N) -
         F1.imag*np.sin(2*np.pi*np.arange(N)/N))/np.abs(F1)


import matplotlib.pyplot as plt

plt.clf()
plt.plot(x, y)
plt.plot(x, mode1)
plt.axvline(center_x, color='r', linewidth=1)
plt.show()
</snippet></ROW><ROW><id>18168191</id><snippet>F1.conj()</snippet></ROW><ROW><id>18168191</id><snippet>F1</snippet></ROW><ROW><id>18168191</id><snippet>w = np.exp(-2j*np.pi*np.arange(N) / N)</snippet></ROW><ROW><id>18168191</id><snippet>w</snippet></ROW><ROW><id>18168191</id><snippet>w = np.exp(-2j*np.pi*np.arange(N) / N)
  = cos(-2*pi*arange(N)/N) + 1j*sin(-2*pi*arange(N)/N)
  = cos(2*pi*arange(N)/N) - 1j*sin(2*pi*arange(N)/N)
</snippet></ROW><ROW><id>18168191</id><snippet>y.dot(w)</snippet></ROW><ROW><id>18168191</id><snippet>y</snippet></ROW><ROW><id>18168191</id><snippet>cos(2*pi*arange(N)/N)</snippet></ROW><ROW><id>18168191</id><snippet>F1</snippet></ROW><ROW><id>18168191</id><snippet>-sin(2*pi*arange(N)/N)</snippet></ROW><ROW><id>18168191</id><snippet>F1</snippet></ROW><ROW><id>18168191</id><snippet>w = np.exp(2j*np.pi*np.arange(N) / N)</snippet></ROW><ROW><id>18168191</id><snippet>F1</snippet></ROW><ROW><id>18168197</id><snippet>?:</snippet></ROW><ROW><id>18168197</id><snippet>'(?:\d\s)?\w+\s\d+:?\d*'
 ^^^    ^
</snippet></ROW><ROW><id>18168197</id><snippet>&gt;&gt;&gt; s = 'testing testing John 3:16 adsfbaf John 2 1 Kings 4 Romans 4'
&gt;&gt;&gt; re.findall(r'(?:\d\s)?\w+\s\d+:?\d*', s)
['John 3:16', 'John 2', '1 Kings 4', 'Romans 4']
</snippet></ROW><ROW><id>18168338</id><snippet>&gt;&gt;&gt; uuid.uuid4()
UUID('b80d8ad2-c0a5-4689-b39a-2c9869e906af')
&gt;&gt;&gt; uuid.uuid4()
UUID('35895e08-8d72-4bda-9e6c-2a3dd4c2197c')
&gt;&gt;&gt; uuid.uuid4()
UUID('fc3fb627-77e6-4598-9bf8-ac699b16d07a')
&gt;&gt;&gt; uuid.uuid4()
UUID('f6b3fe86-429a-4acd-a509-aa687705bfca')
</snippet></ROW><ROW><id>18168357</id><snippet>alarm = sound
off = sleeping
</snippet></ROW><ROW><id>18168357</id><snippet>alarm</snippet></ROW><ROW><id>18168357</id><snippet>sound</snippet></ROW><ROW><id>18168357</id><snippet>sound</snippet></ROW><ROW><id>18168357</id><snippet>NameError</snippet></ROW><ROW><id>18168357</id><snippet>alarm = 'sound'
off = 'sleeping'
</snippet></ROW><ROW><id>18168357</id><snippet>alarm = "sound"
off = "sleeping"
</snippet></ROW><ROW><id>18168357</id><snippet>if alarm = off</snippet></ROW><ROW><id>18168357</id><snippet>==</snippet></ROW><ROW><id>18168357</id><snippet>=</snippet></ROW><ROW><id>18168357</id><snippet>if alarm == off: # &lt;--- colon here
    print "I'm late for work" # Notice the indentation
</snippet></ROW><ROW><id>18168440</id><snippet>bubble</snippet></ROW><ROW><id>18168440</id><snippet>quick sort</snippet></ROW><ROW><id>18168440</id><snippet>def main():
    my_list = [1,2,3,4,5,6,3,4,63,3]
    sort(my_list)

def sort(my_list):
    size = len(my_list)
    for i in range(size):
        for j in range(size-i-1):
            if(my_list[j] &gt; my_list[j+1]):
                tmp = my_list[j]
                my_list[j] = my_list[j+1]
                my_list[j+1] = tmp
    print my_list

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18168489</id><snippet>public class Thing {
    public int count = 0;
    public void doSomething() { count++; }
    public int getHowManyTimesDone() { return count; }
}
</snippet></ROW><ROW><id>18168489</id><snippet>count</snippet></ROW><ROW><id>18168489</id><snippet>Thing x = new Thing();
x.doSomething();
x.doSomething();
x.count = 0;
System.out.println(x.getHowManyTimesDone());
</snippet></ROW><ROW><id>18168489</id><snippet>2</snippet></ROW><ROW><id>18168489</id><snippet>0</snippet></ROW><ROW><id>18168489</id><snippet>count</snippet></ROW><ROW><id>18168489</id><snippet>count</snippet></ROW><ROW><id>18168489</id><snippet>private</snippet></ROW><ROW><id>18168489</id><snippet>protected</snippet></ROW><ROW><id>18168489</id><snippet>private</snippet></ROW><ROW><id>18168489</id><snippet>private</snippet></ROW><ROW><id>18168490</id><snippet>str.endswith()</snippet></ROW><ROW><id>18168490</id><snippet>if raw_input('Enter a word: ').endswith('s'):
    do_stuff()
</snippet></ROW><ROW><id>18168490</id><snippet>if raw_input('Enter a word: ')[-1:] == 's': # Or you can use [-1]
    do_stuff()
</snippet></ROW><ROW><id>18168699</id><snippet>re.match</snippet></ROW><ROW><id>18168699</id><snippet>&gt;&gt;&gt; print re.match('&gt;.*&lt;', line)
None
&gt;&gt;&gt; print re.search('&gt;.*&lt;', line)
&lt;_sre.SRE_Match object at 0x10f666238&gt;
&gt;&gt;&gt; print re.search('&gt;.*&lt;', line).group(0)
&gt;PLAINSBORO, NJ 08536-1906&lt;
</snippet></ROW><ROW><id>18168699</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>18168699</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup as BS
&gt;&gt;&gt; line='&lt;City_State&gt;PLAINSBORO, NJ 08536-1906&lt;/City_State&gt;'
&gt;&gt;&gt; soup = BS(line)
&gt;&gt;&gt; print soup.find('city_state').text
PLAINSBORO, NJ 08536-1906
</snippet></ROW><ROW><id>18169130</id><snippet># ...
def category_formset(request):
    if is_admin_user(request):
        CategoryFormSet = modelformset_factory(Category, exclude="slug", extra=0)

        if request.POST:
            formset = CategoryFormSet(request.POST)
            if formset.is_valid():
                formset.save()
                return redirect('/categories/')
        else:
            formset = CategoryFormSet(initial=Category.objects.values())
        return render_to_response("pages/category_formset.html",
                                  {"formset": formset, 'is_logged_in': is_logged_in(request)},
                                  context_instance=RequestContext(request))
    else:
        return redirect('/', False)
</snippet></ROW><ROW><id>18169130</id><snippet>&lt;form action="/category/edit/" method="post"  enctype="multipart/form-data"&gt;
    {% csrf_token %}
    {{ formset.management_form }}
    {{ formset.errors }}
    &lt;table&gt;
        &lt;tr&gt;
            &lt;td&gt;Language&lt;/td&gt;
            &lt;td&gt;Name&lt;/td&gt;
            &lt;td&gt;Parent&lt;/td&gt;
            &lt;td&gt;Allow Replies&lt;/td&gt;
            &lt;td&gt;Order&lt;/td&gt;
        &lt;/tr&gt;
        {% for form in formset %}
        &lt;tr&gt;
            {% for item in form %}
                &lt;td&gt;{{ item }}&lt;/td&gt;
            {% endfor %}
        &lt;/tr&gt;
        {% endfor %}
    &lt;/table&gt;

    &lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>18169183</id><snippet>import urllib2
f = open("url_file.txt","a+")
urlhere = "http://www.google.com"   
print "for url: " + urlhere + ":"  

try: 
    fileHandle = urllib2.urlopen(urlhere)
    data = fileHandle.read()
    fileHandle.close()
    f.write(urlhere + "\n")
    f.close()
    print "It exists"

except urllib2.URLError, e:
    print 'PAGE 404: It Doesnt Exist', e
</snippet></ROW><ROW><id>18169183</id><snippet>python python_script.py "http://url_here.com"</snippet></ROW><ROW><id>18169183</id><snippet>import urllib2,sys
f = open("url_file.txt","a+")
urlhere = sys.argv[1]   
print "for url: " + urlhere + ":"  

try: 
    fileHandle = urllib2.urlopen(urlhere)
    data = fileHandle.read()
    fileHandle.close()
    f.write(urlhere+ "\n")
    f.close()
    print "It exists"

except urllib2.URLError, e:
    print 'PAGE 404: It Doesnt Exist', e
</snippet></ROW><ROW><id>18169183</id><snippet>python python_script http://url1.com,http://url2.com</snippet></ROW><ROW><id>18169183</id><snippet>import urllib2,sys
f = open("url_file.txt","a+")
urlhere_list = sys.argv[1].split(",")   

for urls in urlhere_list:
    print "for url: " + urls + ":" 
    try: 
        fileHandle = urllib2.urlopen(urls)
        data = fileHandle.read()
        fileHandle.close()
        f.write(urls+ "\n")

        print "It exists"

    except urllib2.URLError, e:
        print 'PAGE 404: It Doesnt Exist', e
    except:
        print "invalid url"
f.close()
</snippet></ROW><ROW><id>18169183</id><snippet>sys.argv[1].split()</snippet></ROW><ROW><id>18169691</id><snippet>random.sample(set(fd_list1 + fd_list2 + fd_list3), 10)
</snippet></ROW><ROW><id>18170010</id><snippet>multiprocessing</snippet></ROW><ROW><id>18170010</id><snippet>Process()</snippet></ROW><ROW><id>18170010</id><snippet>fork</snippet></ROW><ROW><id>18170010</id><snippet>fork</snippet></ROW><ROW><id>18170010</id><snippet>target=</snippet></ROW><ROW><id>18170010</id><snippet>p.start()</snippet></ROW><ROW><id>18170010</id><snippet>Process</snippet></ROW><ROW><id>18170010</id><snippet>p</snippet></ROW><ROW><id>18170010</id><snippet>multiprocessing</snippet></ROW><ROW><id>18170010</id><snippet>pickle</snippet></ROW><ROW><id>18170010</id><snippet>pickle.dump</snippet></ROW><ROW><id>18170010</id><snippet>target=</snippet></ROW><ROW><id>18170010</id><snippet>p.join()</snippet></ROW><ROW><id>18170010</id><snippet>exit</snippet></ROW><ROW><id>18170010</id><snippet>hello</snippet></ROW><ROW><id>18170010</id><snippet>f</snippet></ROW><ROW><id>18170010</id><snippet>Process</snippet></ROW><ROW><id>18170010</id><snippet>p2</snippet></ROW><ROW><id>18170010</id><snippet>g</snippet></ROW><ROW><id>18170010</id><snippet>p.join()</snippet></ROW><ROW><id>18170010</id><snippet>p2.join()</snippet></ROW><ROW><id>18170138</id><snippet>objects</snippet></ROW><ROW><id>18170138</id><snippet>query = {}

if 'name' in request.args:
    query['name'] = request.args['name']

if 'phone' in request.args:
    query['phone'] = request.args['phone']

if 'email' in request.args:
    query['email'] = request.args['email']

user = User.objects(**query)
</snippet></ROW><ROW><id>18170430</id><snippet>int (e1.get())   # This is actually doing nothing.
int (e2.get())
entryx = e1.get()
entryy = e2.get()
</snippet></ROW><ROW><id>18170430</id><snippet>entryx</snippet></ROW><ROW><id>18170430</id><snippet>entryy</snippet></ROW><ROW><id>18170430</id><snippet>entryx = int (e1.get())
entryy = int (e2.get())
</snippet></ROW><ROW><id>18170481</id><snippet>&gt;&gt;&gt; list1 = [('a', 1), ('c', 3)]
&gt;&gt;&gt; list2 = [('a', 1)]
&gt;&gt;&gt; set(list2).issubset(list1)
True
</snippet></ROW><ROW><id>18170481</id><snippet>set(L[0].f.items()).issubset(set(a3.f.items()))
</snippet></ROW><ROW><id>18170720</id><snippet>setup.py</snippet></ROW><ROW><id>18170720</id><snippet>setup.py</snippet></ROW><ROW><id>18170720</id><snippet>from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

ext_modules = [Extension("_conecyl", ["_conecyl.pyx"])]

setup(
  name = '_conecyl',
  cmdclass = {'build_ext': build_ext},
  ext_modules = ext_modules
)
</snippet></ROW><ROW><id>18170720</id><snippet>setenv /x64 / release
set INCLUDE=%INCLUDE%;C:\Python27\include;C:\Python27\Lib\site-packages\numpy\core\include
set LIB=%LIB%;C:\Python27\libs
set DISTUTILS_USE_SDK=1
python setup.py install
</snippet></ROW><ROW><id>18170721</id><snippet>hsum</snippet></ROW><ROW><id>18170721</id><snippet>s</snippet></ROW><ROW><id>18170721</id><snippet>0</snippet></ROW><ROW><id>18170721</id><snippet>min(P)</snippet></ROW><ROW><id>18170721</id><snippet>(p, hsum(p))</snippet></ROW><ROW><id>18170721</id><snippet>key</snippet></ROW><ROW><id>18170747</id><snippet>a</snippet></ROW><ROW><id>18170747</id><snippet>b</snippet></ROW><ROW><id>18170747</id><snippet>a = db.col.find()
bjects = []
for object in a:
       objects.append(object)


for i in objects:
    for q in objects:
        if i['_id'] &lt;&gt;  q['_id'] and i['user_id'] == q['user_id']:
            edges.insert({'source':i['id'],'target': q['id']})
</snippet></ROW><ROW><id>18170834</id><snippet>prev</snippet></ROW><ROW><id>18170834</id><snippet>hash</snippet></ROW><ROW><id>18170834</id><snippet>pq</snippet></ROW><ROW><id>18170834</id><snippet>prev</snippet></ROW><ROW><id>18170834</id><snippet>hash</snippet></ROW><ROW><id>18170834</id><snippet>prev</snippet></ROW><ROW><id>18170834</id><snippet>i-1</snippet></ROW><ROW><id>18170834</id><snippet>hash</snippet></ROW><ROW><id>18170834</id><snippet>pq</snippet></ROW><ROW><id>18170834</id><snippet>pq</snippet></ROW><ROW><id>18170834</id><snippet>hash</snippet></ROW><ROW><id>18170834</id><snippet>prev</snippet></ROW><ROW><id>18170834</id><snippet>hash</snippet></ROW><ROW><id>18170834</id><snippet>pq</snippet></ROW><ROW><id>18170834</id><snippet>hash</snippet></ROW><ROW><id>18170834</id><snippet>pq</snippet></ROW><ROW><id>18170834</id><snippet>prev</snippet></ROW><ROW><id>18170834</id><snippet>pq</snippet></ROW><ROW><id>18170834</id><snippet>pq</snippet></ROW><ROW><id>18170834</id><snippet>def findLESS(A):
  Aset = set(A)
  lmax = 2
  d = 1
  minStep = 0

  while (lmax - 1) * minStep &lt;= A[-1] - A[0]:
    minStep = A[-1] - A[0] + 1
    for j, b in enumerate(A):
      if j+d &lt; len(A):
        a = A[j+d]
        step = a - b
        minStep = min(minStep, step)
        if a + step in Aset and b - step not in Aset:
          c = a + step
          count = 3
          while c + step in Aset:
            c += step
            count += 1
          if count &gt; lmax:
            lmax = count
    d += 1

  return lmax

print(findLESS([1, 4, 5, 7, 8, 12]))
</snippet></ROW><ROW><id>18170834</id><snippet>def findLESS(src):
  r = [False for i in range(src[-1]+1)]
  for x in src:
    r[x] = True

  d = 1
  best = 1

  while best * d &lt; len(r):
    for s in range(d):
      l = 0

      for i in range(s, len(r), d):
        if r[i]:
          l += 1
          best = max(best, l)
        else:
          l = 0

    d += 1

  return best


print(findLESS([1, 4, 5, 7, 8, 12]))
</snippet></ROW><ROW><id>18170834</id><snippet>def findLESS(src):
  r = 0
  for x in src:
    r |= 1 &lt;&lt; x

  d = 1
  best = 1

  while best * d &lt; src[-1] + 1:
    c = best
    rr = r

    while c &amp; (c-1):
      cc = c &amp; -c
      rr &amp;= rr &gt;&gt; (cc * d)
      c &amp;= c-1

    while c != 1:
      c = c &gt;&gt; 1
      rr &amp;= rr &gt;&gt; (c * d)

    rr &amp;= rr &gt;&gt; d

    while rr:
      rr &amp;= rr &gt;&gt; d
      best += 1

    d += 1

  return best
</snippet></ROW><ROW><id>18170834</id><snippet>random.seed(42)
s = sorted(list(set([random.randint(0,200000) for r in xrange(140000)])))
</snippet></ROW><ROW><id>18170834</id><snippet>s = sorted(list(set([random.randint(0,2000000) for r in xrange(1400000)])))
</snippet></ROW><ROW><id>18170834</id><snippet>Size:                         100000   1000000
Second answer by Armin Rigo:     634         ?
By Armin Rigo, optimized:         64     &gt;5000
O(M^2) algorithm:                 53      2940
O(M^2*L) algorithm:                7       711
</snippet></ROW><ROW><id>18170963</id><snippet>readline</snippet></ROW><ROW><id>18170963</id><snippet>"\n"</snippet></ROW><ROW><id>18170963</id><snippet>configure.txt</snippet></ROW><ROW><id>18170963</id><snippet>test.txt</snippet></ROW><ROW><id>18170963</id><snippet>"test.txt\n"</snippet></ROW><ROW><id>18170963</id><snippet>testCamp = testCamp.rstrip()
</snippet></ROW><ROW><id>18170963</id><snippet>testCamp = text_file.readline().rstrip()
</snippet></ROW><ROW><id>18170963</id><snippet>write</snippet></ROW><ROW><id>18170963</id><snippet>"test.txt"</snippet></ROW><ROW><id>18170963</id><snippet>"test.txt\n"</snippet></ROW><ROW><id>18170963</id><snippet>flush</snippet></ROW><ROW><id>18170963</id><snippet>with</snippet></ROW><ROW><id>18171332</id><snippet>if</snippet></ROW><ROW><id>18171332</id><snippet>for</snippet></ROW><ROW><id>18171332</id><snippet>list1 = []
for x in range(100):
    if (x % 5) == 0:
        list1.append(x)
return list1
</snippet></ROW><ROW><id>18171332</id><snippet>for</snippet></ROW><ROW><id>18171332</id><snippet>if</snippet></ROW><ROW><id>18171332</id><snippet>return list1</snippet></ROW><ROW><id>18171334</id><snippet>sentence = 'AASFG BBBSDC FEKGG SDFGF KETGG'

def neighborhood(iterable):
    iterator = iter(iterable)
    prev = None
    item = iterator.next()  # throws StopIteration if empty.
    for next in iterator:
        yield (prev,item,next)
        prev = item
        item = next
    yield (prev,item,None)

matches = [word for word in sentence.split() if word.endswith("GG")]
results = []

for prev, item, next in neighborhood(sentence.split()):
    for match in matches:
        if match == item:
            results.append((prev, item, next))
</snippet></ROW><ROW><id>18171334</id><snippet>[('BBBSDC', 'FEKGG', 'SDFGF'), ('SDFGF', 'KETGG', None)]
</snippet></ROW><ROW><id>18171335</id><snippet>In [38]: from data import character_data as character_data

In [39]: character_type = "CHARACTER_A"

In [40]: character_id = 1

In [41]: getattr(character_data, character_type)[character_id]["name"]
Out[41]: 'Ann'
</snippet></ROW><ROW><id>18171341</id><snippet>Tkinter</snippet></ROW><ROW><id>18171341</id><snippet>super()</snippet></ROW><ROW><id>18171377</id><snippet>Location</snippet></ROW><ROW><id>18171377</id><snippet>Rate</snippet></ROW><ROW><id>18171377</id><snippet>Rate</snippet></ROW><ROW><id>18171377</id><snippet>romantic</snippet></ROW><ROW><id>18171377</id><snippet>Location</snippet></ROW><ROW><id>18171377</id><snippet>Location</snippet></ROW><ROW><id>18171377</id><snippet>Rate</snippet></ROW><ROW><id>18171377</id><snippet>location = Rate.objects.filter(romantic=something).latest('datum').von_location
</snippet></ROW><ROW><id>18171577</id><snippet>=</snippet></ROW><ROW><id>18171577</id><snippet>            end = _w(s, end + 1).end()
</snippet></ROW><ROW><id>18171655</id><snippet>matrix = numpy.asarray(cv.LoadImageM('Untitled.png', 1)).tolist()
</snippet></ROW><ROW><id>18171655</id><snippet>0</snippet></ROW><ROW><id>18171655</id><snippet>255</snippet></ROW><ROW><id>18171655</id><snippet>True</snippet></ROW><ROW><id>18171655</id><snippet>False</snippet></ROW><ROW><id>18171698</id><snippet>self</snippet></ROW><ROW><id>18171698</id><snippet>name</snippet></ROW><ROW><id>18171698</id><snippet>post_id</snippet></ROW><ROW><id>18171698</id><snippet>party=None</snippet></ROW><ROW><id>18171698</id><snippet>chamber=None</snippet></ROW><ROW><id>18171698</id><snippet>**kwargs</snippet></ROW><ROW><id>18171698</id><snippet>&lt;Legislator instance&gt;</snippet></ROW><ROW><id>18171698</id><snippet>name=name</snippet></ROW><ROW><id>18171698</id><snippet>district=district</snippet></ROW><ROW><id>18171698</id><snippet>post_id</snippet></ROW><ROW><id>18171853</id><snippet>('', '')
</snippet></ROW><ROW><id>18171853</id><snippet>test</snippet></ROW><ROW><id>18171853</id><snippet>p = subprocess.Popen(["./test"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
#                      ^^
p.communicate()
</snippet></ROW><ROW><id>18171853</id><snippet>('Hello world\n', '')
</snippet></ROW><ROW><id>18171853</id><snippet>$PATH</snippet></ROW><ROW><id>18171853</id><snippet>./test</snippet></ROW><ROW><id>18171853</id><snippet>$PATH</snippet></ROW><ROW><id>18171853</id><snippet>p = subprocess.Popen(["C:\\gcc\\bin\\g++.exe", "-Wall", "-o", "test.exe", 'test.cpp'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
p.communicate()
p = subprocess.Popen(["test.exe"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
#                    
p.communicate()
</snippet></ROW><ROW><id>18171984</id><snippet>import Tkinter as TK
import tkMessageBox

# [Credit goes to @NadiaAlramli](http://stackoverflow.com/a/1625023/1460057) for the grouping code
def group(seq, groupSize):
    return zip(*(iter(seq),) * groupSize)

Network_Tag, Vertex_Tag, Line_Tag = "network", "vertex", "line"

class Shape:
    def __init__(self, canvas, vertexCoords, vertexDiam):
        self.vertexIDs = []
        self.perimeterID = None
        self.vertexCoords = vertexCoords
        self.vertexRadius = vertexDiam/2
        self.canvas = canvas

    def deleteVertices(self):
        for ID in self.vertexIDs:
            self.canvas.delete(ID)
        self.vertexIDs = []

    def bindClickToVertices(self):
        coordsGrouped = group(self.vertexCoords, 2)
        num = len(coordsGrouped)
        for k in range(len(self.vertexIDs)):
            others = [coordsGrouped[(k-1)%num], coordsGrouped[(k+1)%num]]
            self.canvas.tag_bind(self.vertexIDs[k], '&lt;Button-1&gt;',
                    lambda *args:tkMessageBox.showinfo("Vertex Click", "Neighboring vertices: "+str(others)))

    def drawVertices(self):
        for x, y in group(self.vertexCoords, 2):
            self.vertexIDs.append(self.canvas.create_oval(x-self.vertexRadius, y-self.vertexRadius, x+self.vertexRadius, y+self.vertexRadius, fill='black', tags=(Network_Tag, Vertex_Tag)))
        self.bindClickToVertices()

    def updateVertices(self):
        self.deleteVertices()
        self.drawVertices()

    def deletePerimeter(self):
        if self.perimeterID is not None:
            self.canvas.delete(self.perimeterID)
        self.perimeterID = None

    def drawPerimeter(self):
        print "creating line:", (self.vertexCoords + self.vertexCoords[0:2])
        self.perimeterID = self.canvas.create_line(*(self.vertexCoords + self.vertexCoords[0:2]), fill='black', tags=(Network_Tag, Line_Tag))

    def updatePerimeter(self):
        self.deletePerimeter()
        self.drawPerimeter()

    def deleteShape(self):
        self.deleteVertices()
        self.deletePerimeter()

    def updateShape(self):
        self.updateVertices()
        self.updatePerimeter()
</snippet></ROW><ROW><id>18171984</id><snippet>root = TK.Tk()

frame = TK.Frame(root)
canvas = TK.Canvas(frame, width=1000, height=1000)
frame.grid()
canvas.grid()

# create a bunch of isoceles triangles in different places:
shapes = []
for dx, dy in zip(range(0,1000, 30), range(0,1000, 30)):
    shapes.append(Shape(canvas, [0+dx, 0+dy, 10+dx, 10+dy, 20+dx, 0+dy], 5))

# draw (or redraw) the shapes:
for shape in shapes:
    shape.updateShape()

# move one of the shapes and change it to a square
shapes[10].vertexCoords = [50, 10, 60, 10, 60, 20, 50, 20]
shapes[10].updateShape()

# delete all the odd-numbered shapes, just for fun:
for k in range(len(shapes)):
    if k%2 == 1:
        shape.deleteShape()

root.mainloop()
</snippet></ROW><ROW><id>18172218</id><snippet>RectBivariateSpline</snippet></ROW><ROW><id>18172218</id><snippet>[i,j]</snippet></ROW><ROW><id>18172218</id><snippet>x[i]</snippet></ROW><ROW><id>18172218</id><snippet>y[j]</snippet></ROW><ROW><id>18172218</id><snippet>import scipy
from scipy.interpolate import spline
xnew = scipy.linspace(0, 10, 1000)
ys1 = spline(xs, ys1, xnew, order=3)
ys2 = spline(xs, ys2, xnew, order=3)
ys3 = spline(xs, ys3, xnew, order=3)
</snippet></ROW><ROW><id>18172218</id><snippet>ys = np.vstack((ys1,ys2,ys3)).mean(axis=0)
</snippet></ROW><ROW><id>18172249</id><snippet>read_csv</snippet></ROW><ROW><id>18172249</id><snippet>encoding</snippet></ROW><ROW><id>18172249</id><snippet>`read_csv('file', encoding = "ISO-8859-1")</snippet></ROW><ROW><id>18172249</id><snippet>encoding = utf8</snippet></ROW><ROW><id>18172249</id><snippet>utf-8</snippet></ROW><ROW><id>18172249</id><snippet>to_csv</snippet></ROW><ROW><id>18172305</id><snippet>sexpression = [dummyfunction,1,2,3]
sexpression[0](*sexpression[1:])
</snippet></ROW><ROW><id>18172305</id><snippet>getattr</snippet></ROW><ROW><id>18172305</id><snippet>strpression = ['dummyfunction',1,2,3]
getattr(myobj,strpression[0])(*strpression[1:])
</snippet></ROW><ROW><id>18172305</id><snippet>myobj</snippet></ROW><ROW><id>18172305</id><snippet>eval</snippet></ROW><ROW><id>18172305</id><snippet>namespace = {'dummyfunction': dummyfunction}
#or
namespace = {f.__name__:f for f in [dummyfunction]}
</snippet></ROW><ROW><id>18172328</id><snippet>^</snippet></ROW><ROW><id>18172328</id><snippet>C:\&gt;python3 -c "print('Hai')"
Hai

C:\&gt;python3 -c "import sys; print(sys.argv)"
['-c']

C:\&gt;python3 -c ^
More? "import sys; ^
More? print(sys.argv)"
['-c']
</snippet></ROW><ROW><id>18172328</id><snippet>C:\&gt;python3 -c ^
More? "if 2*2 == 4: ^
More?     print('Testing')"
Testing
</snippet></ROW><ROW><id>18172328</id><snippet>C:\&gt;python3 -c ^
More? "if True: ^
More?     print('First Line'); ^
More?     print('Second Line')"
First Line
Second Line
</snippet></ROW><ROW><id>18172391</id><snippet>pandas</snippet></ROW><ROW><id>18172391</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import pandas as pd

&gt;&gt;&gt; # Create your data structures
&gt;&gt;&gt; cat1 = ['red', 'green']
&gt;&gt;&gt; cat2 = ['round', 'square']
&gt;&gt;&gt; values = [8, 10, 9, 14]

&gt;&gt;&gt; # Reshape your values to a two dimensional numpy array
&gt;&gt;&gt; data = np.array(values)
&gt;&gt;&gt; data.shape = (len(cat2), len(cat1))

&gt;&gt;&gt; # Create a DataFrame and print it
&gt;&gt;&gt; df = pd.DataFrame(data, columns=cat1, index=cat2)
&gt;&gt;&gt; df
        red  green
round     8     10
square    9     14
</snippet></ROW><ROW><id>18172391</id><snippet>&gt;&gt;&gt; print(df.to_string())
        red  green
round     8     10
square    9     14
</snippet></ROW><ROW><id>18172417</id><snippet>simplices</snippet></ROW><ROW><id>18172417</id><snippet>ConvexHull</snippet></ROW><ROW><id>18172417</id><snippet>simplices</snippet></ROW><ROW><id>18172417</id><snippet>vertices</snippet></ROW><ROW><id>18172417</id><snippet>import numpy as np
from scipy.spatial import ConvexHull
import matplotlib.pyplot as plt


# Generate some random points for the demo.
np.random.seed(4321)
pts = 0.1 + 0.8*np.random.rand(15, 2)

ch = ConvexHull(pts)

# hull_indices = ch.vertices   # This will work in the scipy 0.13
hull_indices = np.unique(ch.simplices.flat)
hull_pts = pts[hull_indices, :]

plt.plot(pts[:, 0], pts[:, 1], 'ko', markersize=10)
plt.plot(hull_pts[:, 0], hull_pts[:, 1], 'ro', alpha=.25, markersize=20)
plt.xlim(0, 1)
plt.ylim(0, 1)
plt.show()
</snippet></ROW><ROW><id>18172463</id><snippet>Fibonacci(5)</snippet></ROW><ROW><id>18172463</id><snippet>Fibonacci(2)</snippet></ROW><ROW><id>18172463</id><snippet>Fibonacci(1)</snippet></ROW><ROW><id>18172463</id><snippet>[0, 1, 1, 2, 3]</snippet></ROW><ROW><id>18172463</id><snippet>&gt;&gt;&gt; def fib_to(n):
...     fibs = [0, 1]
...     for i in range(2, n+1):
...         fibs.append(fibs[-1] + fibs[-2])
...     return fibs
...
</snippet></ROW><ROW><id>18172463</id><snippet>&gt;&gt;&gt; fib_to(20)
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]
</snippet></ROW><ROW><id>18172463</id><snippet>&gt;&gt;&gt; fib_to(40)[17]
1597
</snippet></ROW><ROW><id>18172463</id><snippet>&gt;&gt;&gt; def fib(n, computed = {0: 0, 1: 1}):
...     if n not in computed:
...         computed[n] = fib(n-1, computed) + fib(n-2, computed)
...     return computed[n]
</snippet></ROW><ROW><id>18172463</id><snippet>&gt;&gt;&gt; fib(400)
176023680645013966468226945392411250770384383304492191886725992896575345044216019675
</snippet></ROW><ROW><id>18172463</id><snippet>&gt;&gt;&gt; def fib(n):
...     a, b = 0, 1
...     for _ in range(n):
...         a, b = b, a+b
...     return a
</snippet></ROW><ROW><id>18172463</id><snippet>fib_to(100)</snippet></ROW><ROW><id>18172463</id><snippet>[fib(n) for n in range(101)]</snippet></ROW><ROW><id>18172508</id><snippet>list1 = [4,5,6]
tup = tuple(list1)
</snippet></ROW><ROW><id>18172508</id><snippet>list</snippet></ROW><ROW><id>18172508</id><snippet>list1</snippet></ROW><ROW><id>18172594</id><snippet>[a] * 5</snippet></ROW><ROW><id>18172594</id><snippet>[a,a,a,a,a]</snippet></ROW><ROW><id>18172594</id><snippet>if sieve[i/2]</snippet></ROW><ROW><id>18172594</id><snippet>sieve</snippet></ROW><ROW><id>18172594</id><snippet>i/2</snippet></ROW><ROW><id>18172594</id><snippet>True</snippet></ROW><ROW><id>18172594</id><snippet>False</snippet></ROW><ROW><id>18172594</id><snippet>::</snippet></ROW><ROW><id>18172626</id><snippet>iter()</snippet></ROW><ROW><id>18172626</id><snippet>line_iter = iter(list_of_lines[:])
# consume first item from iterable
next(line_iter)
for index, item in enumerate(line_iter, start=1):
    list_of_lines[index][1:3] = [''.join(item[1:3])]
</snippet></ROW><ROW><id>18172670</id><snippet>Booktype</snippet></ROW><ROW><id>18172670</id><snippet>currrent</snippet></ROW><ROW><id>18172670</id><snippet>from xml.etree import ElementTree as ET

xml_string = '''&lt;Books&gt;
&lt;Booktype List= "Story &gt; Fiction &gt; Young"&gt;
#here the rest of book text
&lt;/Booktype&gt;
&lt;Booktype List= "Science &gt; Math &gt; Young"&gt;
#here the rest of book text 2
&lt;/Booktype&gt;
&lt;/Books&gt;
'''

xml = ET.fromstring(xml_string)
for booktype in xml.findall('Booktype'):
    types = map(lambda x: x.strip(), booktype.get('List').split('&gt;'))
    current = booktype
    for t in types:
        current = ET.SubElement(current, t)
    current.text = booktype.text
    booktype.text = ''
    del booktype.attrib['List']
print ET.tostring(xml,'utf-8')
</snippet></ROW><ROW><id>18172670</id><snippet>&lt;Books&gt;
&lt;Booktype&gt;&lt;Story&gt;&lt;Fiction&gt;&lt;Young&gt;
#here the rest of book text
&lt;/Young&gt;&lt;/Fiction&gt;&lt;/Story&gt;&lt;/Booktype&gt;
&lt;Booktype&gt;&lt;Science&gt;&lt;Math&gt;&lt;Young&gt;
#here the rest of book text 2
&lt;/Young&gt;&lt;/Math&gt;&lt;/Science&gt;&lt;/Booktype&gt;
&lt;/Books&gt;
</snippet></ROW><ROW><id>18172670</id><snippet>xml = ET.fromstring(xml_string)
root = ET.Element('Books')
for booktype in xml.findall('Booktype'):
    current = ET.SubElement(root, 'Booktype')
    for t in map(lambda x: x.strip(), booktype.get('List').split('&gt;')):
        current = ET.SubElement(current, t)
    current.text = booktype.text
print ET.tostring(root, 'utf-8')
</snippet></ROW><ROW><id>18172726</id><snippet>,</snippet></ROW><ROW><id>18172726</id><snippet>&gt;&gt;&gt; import pandas
&gt;&gt;&gt; with open('test.csv', 'w') as f:
...     f.write('t\tc\ta\na\t1\t2\nb\t2\t3\nc\t1\t1\n')
... 

&gt;&gt;&gt; df = pandas.read_csv('test.csv')
&gt;&gt;&gt; df.columns
Index([t    c   a], dtype=object)

&gt;&gt;&gt; df = pandas.read_csv('test.csv', delimiter='\t') # &lt;--
&gt;&gt;&gt; df.columns
Index([t, c, a], dtype=object)

&gt;&gt;&gt; df['t']
0    a
1    b
2    c
Name: t
</snippet></ROW><ROW><id>18172742</id><snippet>import requests
from bs4 import BeautifulSoup

resp = requests.get('http://www.youtube.com/user/sachinabey/videos')

soup = BeautifulSoup(resp.text)
for title in soup.findAll('h3', attrs={'class': 'yt-lockup-title'}):
    print title.find('a').text.strip()
</snippet></ROW><ROW><id>18172742</id><snippet>Harder Polynomials
Summing tan inverse
iGraph tutorial
Integrate e^(-x^2)
Chord of Contact to Ellipse
Equation of Tangents of an Ellipse or Hyperbola
Motion and Air Resistance
Projectile Motion
Regression in R
EM Algorithm Derivation
Cosine Rule proof
R writing functions
Proof of square root 2 being irrational
R for loops and while loops
Chi Squared Hypothesis Testing
Integration of Trignometric Functions
Sequences and Series Examples
ARCH GARCH Model Motivation
Integration by Parts
Differentiate Inverse Trigonometry
Simple Harmonic Motion Examples Part II
Simple Harmonic Motion Examples Part I
Simple Harmonic Motion -  Introduction
HSC Solutions 2009 3 Unit Q4
HSC 3 Unit Solutions 2009 Q2
HSC 3 Unit Maths 2009 Solutions
Parallel For Loops
Change of Base for Logarithms - Examples
Divisibility by 3 or 9
Multiplying by 11
</snippet></ROW><ROW><id>18172866</id><snippet>list</snippet></ROW><ROW><id>18172866</id><snippet>get</snippet></ROW><ROW><id>18172866</id><snippet>uptime</snippet></ROW><ROW><id>18172866</id><snippet> "tenant_usage": {
    "server_usages": [
        {
            ... (skipped)
            "uptime": 3600,
            "vcpus": 1
        }
    ],
</snippet></ROW><ROW><id>18172904</id><snippet>h = ses.add_torrent(params)
s = h.status()
while (not h.is_seed()):
    print s.total_wanted   # prints total size wanted after meta data is obtained, before that 0 is printed.
</snippet></ROW><ROW><id>18172932</id><snippet>from mechanize import Browser
from bs4 import BeautifulSoup

br = Browser()
br.set_handle_robots(False)
br.addheaders = [('User-agent', 'Mozilla/5.0 (Windows NT 6.2;\
                    WOW64) AppleWebKit/537.11 (KHTML, like Gecko)\
                    Chrome/23.0.1271.97 Safari/537.11')]

url = "https://encrypted.google.com/search?hl=en&amp;q=site%3Asomedomain.com&amp;start=0"

r = br.open(url)

soup = BeautifulSoup(r)

nextpage = soup.find("a", {"id": "pnnext"})
print nextpage['href']
</snippet></ROW><ROW><id>18172932</id><snippet>/search?q=site:somedomain.com&amp;hl=en&amp;ei=NJ4HUo2yM-TK4ATJlYGICQ&amp;start=10&amp;sa=N
</snippet></ROW><ROW><id>18173056</id><snippet>:raw</snippet></ROW><ROW><id>18173056</id><snippet>"...\\xC3\xA3..."</snippet></ROW><ROW><id>18173056</id><snippet>use open ':std', ':locale';

sub convert_char {
   my ($s) = @_;
   utf8::encode($s);
   $s = uc unpack 'H*', $s;
   $s =~ s/\G(..)/\\x$1/sg;
   return $s;
}

sub convert_literal {
   my $orig = my $s = substr($_[0], 1, -1);

   my $safe          = '\x20-\x7E';          # ASCII printables and space
   my $safe_no_slash = '\x20-\x5B\x5D-\x7E'; # ASCII printables and space, no \
   my $changed = $s =~ s{
      (?: \\? ( [^$safe] )
      |   ( (?: [$safe_no_slash] | \\[$safe] )+ )
      )
   }{
      defined($1) ? convert_char($1) : $2
   }egx;

   # XXX Assumes $orig doesn't contain "*/"
   return qq{"$s"} . ( $changed ? " /* $orig */" : '' );
}

while (&lt;&gt;) {
   s/(" (?:[^"\\]++|\\.)*+ ")/ convert_literal($1) /segx;
   print;
}
</snippet></ROW><ROW><id>18173074</id><snippet>df = df[df.line_race != 0]
</snippet></ROW><ROW><id>18173103</id><snippet>._properties</snippet></ROW><ROW><id>18173103</id><snippet>._porperties</snippet></ROW><ROW><id>18173103</id><snippet>@classmethod
def entity_from_dict(cls, parent_key, dict):
    valid_properties = {}
    for cls_property in cls._properties:
        if cls_property in dict:
            valid_properties.update({cls_property: dict[cls_property]})
    #logging.info(valid_properties)
    # Update the id from the dict
    if 'id' in dict: # if creating a new entity
            valid_properties['id'] = dict['id']
    # Add the parent
    valid_properties['parent'] = parent_key
    try:
        entity = cls(**valid_properties)
    except Exception as e:
        logging.exception('Could not create entity \n' + repr(e))
        return False
    return entity
</snippet></ROW><ROW><id>18173105</id><snippet>for character in text2:
    if character in text1:
        count += 1
</snippet></ROW><ROW><id>18173172</id><snippet>fineSearch(...)</snippet></ROW><ROW><id>18173172</id><snippet>def fineSearch(wd):
    for word in wd.strip().split():
            if word.endswith(('ts.','ld.')): # test for ld. at end
                print word
</snippet></ROW><ROW><id>18173172</id><snippet>&gt;&gt;&gt; with open('testFile.txt', 'r') as f:
        for line in f:
            fineSearch(line)


rats. # Output. If you wanted Ronald. too, you need to change `ld` in the code to `ld.`
</snippet></ROW><ROW><id>18173172</id><snippet>readlines(...)</snippet></ROW><ROW><id>18173172</id><snippet>readlines(...)</snippet></ROW><ROW><id>18173218</id><snippet>for elem in testList</snippet></ROW><ROW><id>18173218</id><snippet>&gt;&gt;&gt; b = [1, 3, -4, 5, 5, 3, 2, 1, 4, 8, 9]
&gt;&gt;&gt; for i in b:
        print i,


1 3 -4 5 5 3 2 1 4 8 9 # Whereas you expected 0 1 2 3 4 5 6 7 8 9 10
</snippet></ROW><ROW><id>18173218</id><snippet>&gt;&gt;&gt; for index, val in enumerate(b): # enumerate yields an (index, value) tuple which gets unpacked.
        print '{0} : {1}*{1} = {2}'.format(index, val, val**2)


0 : 1*1 = 1
1 : 3*3 = 9
2 : -4*-4 = 16
3 : 5*5 = 25
4 : 5*5 = 25
5 : 3*3 = 9
6 : 2*2 = 4
7 : 1*1 = 1
8 : 4*4 = 16
9 : 8*8 = 64
10 : 9*9 = 81
</snippet></ROW><ROW><id>18173218</id><snippet>a</snippet></ROW><ROW><id>18173218</id><snippet>**</snippet></ROW><ROW><id>18173218</id><snippet>&gt;&gt;&gt; [elem**2 for elem in a]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
&gt;&gt;&gt; [elem**2 for elem in b]
[1, 9, 16, 25, 25, 9, 4, 1, 16, 64, 81]
</snippet></ROW><ROW><id>18173218</id><snippet>map</snippet></ROW><ROW><id>18173218</id><snippet>&gt;&gt;&gt; map(lambda x: x**2, a)
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
&gt;&gt;&gt; map(lambda x: x**2, b)
[1, 9, 16, 25, 25, 9, 4, 1, 16, 64, 81]
</snippet></ROW><ROW><id>18173362</id><snippet>y(x)</snippet></ROW><ROW><id>18173362</id><snippet>x</snippet></ROW><ROW><id>18173362</id><snippet>y</snippet></ROW><ROW><id>18173362</id><snippet>lims = gca().get_xlim()
i = np.where( (x &gt; lims[0]) &amp;  (x &lt; lims[1]) )[0]
gca().set_ylim( y[i].min(), y[i].max() )
show()
</snippet></ROW><ROW><id>18173487</id><snippet>decreaseHealth()</snippet></ROW><ROW><id>18173487</id><snippet>m = Monster()
m.decreaseHealth()
</snippet></ROW><ROW><id>18173487</id><snippet>self</snippet></ROW><ROW><id>18173487</id><snippet>m</snippet></ROW><ROW><id>18173487</id><snippet>health</snippet></ROW><ROW><id>18173487</id><snippet>self.health</snippet></ROW><ROW><id>18173487</id><snippet>class Monster(object):

  def __init__(self):
     self.name = "Snake"
     self.health = 100

  def decreaseHealth(self):
     if self.health &lt;= 0:
        print('Dead')
     else:
        self.health -= 4

m = Monster()
m.decreaseHealth()
</snippet></ROW><ROW><id>18173559</id><snippet>import numpy as np

a = np.array([[0,1,5,6,7],
              [0,4,5,6,8],
              [2,3,5,7,9]])

b = np.array([[5,6],
              [5,7]])

b2 = np.array([[6,7],
               [6,8],
               [7,9]])

def check(a, b, upper_left):
    ul_row = upper_left[0]
    ul_col = upper_left[1]
    b_rows, b_cols = b.shape
    a_slice = a[ul_row : ul_row + b_rows, :][:, ul_col : ul_col + b_cols]
    if a_slice.shape != b.shape:
        return False
    return (a_slice == b).all()

def find_slice(big_array, small_array):
    upper_left = np.argwhere(big_array == small_array[0,0])
    for ul in upper_left:
        if check(big_array, small_array, ul):
            return True
    else:
        return False
</snippet></ROW><ROW><id>18173559</id><snippet>&gt;&gt;&gt; find_slice(a, b)
True
&gt;&gt;&gt; find_slice(a, b2)
True
&gt;&gt;&gt; find_slice(a, np.array([[5,6], [5,8]]))
False
</snippet></ROW><ROW><id>18173574</id><snippet>str.translate()</snippet></ROW><ROW><id>18173574</id><snippet>In [4]: 'abcdefabcd'.translate(None, 'acd')
Out[4]: 'befb'
</snippet></ROW><ROW><id>18173574</id><snippet>string.translate(s, table[, deletechars])
</snippet></ROW><ROW><id>18173574</id><snippet>s</snippet></ROW><ROW><id>18173574</id><snippet>deletechars</snippet></ROW><ROW><id>18173574</id><snippet>table</snippet></ROW><ROW><id>18173574</id><snippet>table</snippet></ROW><ROW><id>18173574</id><snippet>''.join(c for c in str1 if c not in str2)
</snippet></ROW><ROW><id>18173803</id><snippet>import itertools

def hasNoRepeats(matching):
    flattenedList = list(itertools.chain.from_iterable(matching))
    flattenedSet = set(flattenedList)
    return len(flattenedSet) == len(flattenedList)

def getMatchings(users, groupSize=2):
#   Get all possible pairings of users
    pairings = list(itertools.combinations(users, groupSize))
#   Get all possible groups of pairings of the correct size, then filter to eliminate groups of pairings where a user appears more than once
    possibleMatchings = filter(hasNoRepeats, itertools.combinations(pairings, len(users)/groupSize))
#   Select a series of the possible matchings, making sure no users are paired twice, to create a series of matching cycles.
    cycles = [possibleMatchings.pop(0)]
    for matching in possibleMatchings:
        # pairingsToDate represents a flattened list of all pairs made in cycles so far
        pairingsToDate = list(itertools.chain.from_iterable(cycles))
        # The following checks to make sure there are no pairs in matching (the group of pairs being considered for this cycle) that have occurred in previous cycles (pairingsToDate)
        if not any([pair in pairingsToDate for pair in matching]):
            # Ok, 'matching' contains only pairs that have never occurred so far, so we'll add 'matching' as the next cycle
            cycles.append(matching)
    return cycles

# Demo:

users = ["A","B","C","D","E","F"]

matchings = getMatchings(users, groupSize=2)

for matching in matchings:
    print matching
</snippet></ROW><ROW><id>18173803</id><snippet>(('A', 'B'), ('C', 'D'), ('E', 'F'))
(('A', 'C'), ('B', 'E'), ('D', 'F'))
(('A', 'D'), ('B', 'F'), ('C', 'E'))
(('A', 'E'), ('B', 'D'), ('C', 'F'))
(('A', 'F'), ('B', 'C'), ('D', 'E'))
</snippet></ROW><ROW><id>18174061</id><snippet>bash</snippet></ROW><ROW><id>18174061</id><snippet>-v</snippet></ROW><ROW><id>18174094</id><snippet>standalone</snippet></ROW><ROW><id>18174094</id><snippet>tostring()</snippet></ROW><ROW><id>18174094</id><snippet>etree.tostring(tree, pretty_print = True, xml_declaration = True, encoding='UTF-8', standalone="yes")
</snippet></ROW><ROW><id>18174107</id><snippet>nan</snippet></ROW><ROW><id>18174107</id><snippet>pandas.read_csv</snippet></ROW><ROW><id>18174107</id><snippet>df.head()</snippet></ROW><ROW><id>18174107</id><snippet>In [35]: df = read_csv('GOOG Key Ratios.csv', skiprows=2, index_col=0, names=['Y%d' % i for i in range(11)])

In [36]: df.head() # not homogeneously typed columns
Out[36]:
                               Y0       Y1       Y2       Y3       Y4  \
NaN                       2003-12  2004-12  2005-12  2006-12  2007-12
Revenue USD Mil             1,466    3,189    6,139   10,605   16,594
Gross Margin %               57.3     54.3     58.1     60.2     59.9
Operating Income USD Mil      342      640    2,017    3,550    5,084
Operating Margin %           23.4     20.1     32.9     33.5     30.6

                               Y5       Y6       Y7       Y8       Y9     Y10
NaN                       2008-12  2009-12  2010-12  2011-12  2012-12     TTM
Revenue USD Mil            21,796   23,651   29,321   37,905   50,175  55,797
Gross Margin %               60.4     62.6     64.5     65.2     58.9    56.7
Operating Income USD Mil    6,632    8,312   10,381   11,742   12,760  12,734
Operating Margin %           30.4     35.1     35.4     31.0     25.4    22.8

In [37]: df.convert_objects(convert_numeric=True).head()
Out[37]:
                             Y0     Y1    Y2    Y3    Y4    Y5    Y6    Y7    Y8    Y9   Y10
NaN                         NaN    NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN
Revenue USD Mil             NaN    NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN
Gross Margin %             57.3   54.3  58.1  60.2  59.9  60.4  62.6  64.5  65.2  58.9  56.7
Operating Income USD Mil  342.0  640.0   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN   NaN
Operating Margin %         23.4   20.1  32.9  33.5  30.6  30.4  35.1  35.4  31.0  25.4  22.8
</snippet></ROW><ROW><id>18174193</id><snippet>for elem in testDict</snippet></ROW><ROW><id>18174193</id><snippet>&gt;&gt;&gt; testDict = {'a':1, 'b':2, 'c':3}
&gt;&gt;&gt; for elem in testDict:
print('Key: {}, Value: {}'.format(elem, testDict[elem]))


Key: a, Value: 1
Key: c, Value: 3
Key: b, Value: 2
</snippet></ROW><ROW><id>18174193</id><snippet>'car', 'zebra'</snippet></ROW><ROW><id>18174193</id><snippet>1, 2</snippet></ROW><ROW><id>18174193</id><snippet>d[1]</snippet></ROW><ROW><id>18174193</id><snippet>d[2]</snippet></ROW><ROW><id>18174193</id><snippet>"car"</snippet></ROW><ROW><id>18174193</id><snippet>"house"</snippet></ROW><ROW><id>18174193</id><snippet>"zebra"</snippet></ROW><ROW><id>18174193</id><snippet>d['car'] = 'zebra'</snippet></ROW><ROW><id>18174193</id><snippet>d['house'] = 'zebra'</snippet></ROW><ROW><id>18174388</id><snippet>debug</snippet></ROW><ROW><id>18174388</id><snippet>True</snippet></ROW><ROW><id>18174388</id><snippet>app.run(debug=True)
</snippet></ROW><ROW><id>18174400</id><snippet>m.digest</snippet></ROW><ROW><id>18174400</id><snippet>m.hexdigest</snippet></ROW><ROW><id>18174538</id><snippet>there's no such thing as 2.49999999999999992 in IEEE 754, 2.49999999999999992 == 2.5.</snippet></ROW><ROW><id>18174538</id><snippet>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; getcontext().prec = 6
&gt;&gt;&gt; Decimal(1) / Decimal(7)
Decimal('0.142857')
&gt;&gt;&gt; getcontext().prec = 28
&gt;&gt;&gt; Decimal(1) / Decimal(7)
Decimal('0.1428571428571428571428571429')
</snippet></ROW><ROW><id>18174538</id><snippet>&gt;&gt;&gt; from bigfloat import *
&gt;&gt;&gt; sqrt(2, precision(100))  # compute sqrt(2) with 100 bits of precision
</snippet></ROW><ROW><id>18174538</id><snippet>&gt;&gt;&gt; from fractions import Fraction
&gt;&gt;&gt; a = Fraction(16, -10)
&gt;&gt;&gt; a
Fraction(-8, 5)
&gt;&gt;&gt; a / 23
Fraction(-8, 115)
&gt;&gt;&gt; float(a/23)
-0.06956521739130435
</snippet></ROW><ROW><id>18174806</id><snippet>gold</snippet></ROW><ROW><id>18174806</id><snippet>50</snippet></ROW><ROW><id>18174806</id><snippet>+=</snippet></ROW><ROW><id>18174806</id><snippet>&gt;&gt;&gt; inventory = {'gold' : 500, 'pouch' : ['flint', 'twine', 'gemstone']}
&gt;&gt;&gt; inventory['gold'] += 50
&gt;&gt;&gt; inventory
{'pouch': ['flint', 'twine', 'gemstone'], 'gold': 550}
</snippet></ROW><ROW><id>18174855</id><snippet>h</snippet></ROW><ROW><id>18174855</id><snippet>l</snippet></ROW><ROW><id>18174855</id><snippet>L</snippet></ROW><ROW><id>18174855</id><snippet>%ld</snippet></ROW><ROW><id>18174855</id><snippet>%d</snippet></ROW><ROW><id>18174896</id><snippet>self.table.item()</snippet></ROW><ROW><id>18174896</id><snippet>self.table.itemAt()</snippet></ROW><ROW><id>18174985</id><snippet>def findFruit(f):
    global fruits
    fruits = ' # '.join('"{}"'.format(s) for s in f.strip().split() if s.startswith(('Man', 'Gra', 'Bana')))


&gt;&gt;&gt; fruits
'"Mango" # "Grape" # "Banana"'
</snippet></ROW><ROW><id>18175295</id><snippet>&gt;&gt;&gt; cells = [[1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; [cell for cell in row for row in cells]
NameError: name 'row' is not defined
</snippet></ROW><ROW><id>18175295</id><snippet>row</snippet></ROW><ROW><id>18175295</id><snippet>&gt;&gt;&gt; [cell for row in cells for cell in row]
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; row
[4, 5, 6]
&gt;&gt;&gt; cell
6
</snippet></ROW><ROW><id>18175295</id><snippet>cell</snippet></ROW><ROW><id>18175295</id><snippet>row</snippet></ROW><ROW><id>18175295</id><snippet>row</snippet></ROW><ROW><id>18175295</id><snippet>&gt;&gt;&gt; [cell for cell in row for row in cells ]
[4, 4, 5, 5, 6, 6]
</snippet></ROW><ROW><id>18175295</id><snippet>list(... for x in ...)</snippet></ROW><ROW><id>18175295</id><snippet>[... for x in ...]</snippet></ROW><ROW><id>18175435</id><snippet>import string as str_module

alphabet = "abcdefghijklmnopqrstuvwxyz0123456789"
key = None
with open("cryptkey", "r") as f:
    key = f.read(36)

tocryptvar = None
with open("tocrypt.txt", "r") as f:
    tocryptvar = f.read().lower()

trans_table = str_module.maketrans(alphabet, key)

tocryptvar = tocryptvar.translate(trans_table)
</snippet></ROW><ROW><id>18175435</id><snippet>alphabet</snippet></ROW><ROW><id>18175435</id><snippet>key</snippet></ROW><ROW><id>18175435</id><snippet>alphabet</snippet></ROW><ROW><id>18175435</id><snippet>string.maketrans()</snippet></ROW><ROW><id>18175435</id><snippet>alphabet</snippet></ROW><ROW><id>18175435</id><snippet>key</snippet></ROW><ROW><id>18175435</id><snippet>tocryptvar.translate(trans_table)</snippet></ROW><ROW><id>18175435</id><snippet>alphabet</snippet></ROW><ROW><id>18175476</id><snippet>.o</snippet></ROW><ROW><id>18175476</id><snippet>printf()</snippet></ROW><ROW><id>18175476</id><snippet>glibc</snippet></ROW><ROW><id>18175476</id><snippet>msvcrt</snippet></ROW><ROW><id>18175476</id><snippet>llvm_cbuilder</snippet></ROW><ROW><id>18175476</id><snippet>llvmpy</snippet></ROW><ROW><id>18175476</id><snippet>printf()</snippet></ROW><ROW><id>18175478</id><snippet>request.u</snippet></ROW><ROW><id>18175478</id><snippet>request.user</snippet></ROW><ROW><id>18175478</id><snippet>def index(request):
    form = CustomUserCreationForm()
    if request.user.is_authenticated():
        form2 = CustomUserChangeForm(instance=request.user)
        return render(request, "index.html", {'form2': form2})
</snippet></ROW><ROW><id>18175481</id><snippet>import maya.cmds as cmd
import maya.OpenMaya as om 

def test_if_inside_mesh(point=(0.0, 0.0, 0.0), dir=(0.0, 0.0, 1.0)):
    sel = om.MSelectionList()
    dag = om.MDagPath()

    #replace torus with arbitrary shape name
    sel.add("pTorusShape1")
    sel.getDagPath(0,dag)

    mesh = om.MFnMesh(dag)

    point = om.MFloatPoint(*point)
    dir = om.MFloatVector(*dir)
    farray = om.MFloatPointArray()

    mesh.allIntersections(
            point, dir,
            None, None,
            False, om.MSpace.kWorld,
            10000, False,
            None, # replace none with a mesh look up accelerator if needed
            False,
            farray,
            None, None,
            None, None,
            None
        ) 
    return farray.length()%2 == 1   

#test
cmd.polyTorus()
print test_if_inside_mesh()
print test_if_inside_mesh((1,0,0))
</snippet></ROW><ROW><id>18175543</id><snippet>import csv

with open('RawEirgrid2.csv','rb') as csvfile:
    M = list(csv.reader(csvfile, delimiter=','))

print(M[0])
</snippet></ROW><ROW><id>18175547</id><snippet>before_insert</snippet></ROW><ROW><id>18175547</id><snippet>before_update</snippet></ROW><ROW><id>18175547</id><snippet>@event.listens_for(Command, 'before_insert', propagate = True)
def serialize_before_insert(mapper, connection, target):
    print("serialize_before_insert")
    target._bin_array = target.toBinArray()
</snippet></ROW><ROW><id>18175547</id><snippet>event.listen()</snippet></ROW><ROW><id>18175547</id><snippet>propagate = True)</snippet></ROW><ROW><id>18175753</id><snippet>opts</snippet></ROW><ROW><id>18175753</id><snippet>strip</snippet></ROW><ROW><id>18175753</id><snippet>shlex</snippet></ROW><ROW><id>18175753</id><snippet>posix</snippet></ROW><ROW><id>18175753</id><snippet>def mylex(x):
    lex = shlex.shlex(x, posix=True)
    lex.whitespace = ','
    lex.whitespace_split = True
    return list(lex)

def opts(x):
    ll = []
    dd = {}
    items = mylex(x)
    for item in items:
        if '=' in item:
            k, v = item.split('=',1)
            dd[k.strip(' "')] = v.strip(' "')
        else:
            ll.append(item.strip(' "'))
    return (ll,dd)
</snippet></ROW><ROW><id>18175753</id><snippet>trials = [
    ['dog,cat',(["dog", "cat"], {})],
    ['big fish,cat',(["big fish", "cat"], {})],
    ['"a dog, a cat",a fish',(["a dog, a cat", "a fish"], {})],
    ['key=value',([], {'key':'value'})],
    ['key=the value,x=y',([], {'key':'the value', 'x':'y'})],
    ['dog, big fish, eats="any, but peas", flies = no!',(['dog','big fish'], {'eats':'any, but peas', 'flies':'no!' })],
]
for (x,y) in trials:
    print('%r'%x)
    args = opts(x)
    print(args)
    if args != y:
        print('error, %r'%y)
    print('')
</snippet></ROW><ROW><id>18175820</id><snippet>Chair.objects.exclude(wood_type='')</snippet></ROW><ROW><id>18176006</id><snippet>brew install pyqt --with-python3
</snippet></ROW><ROW><id>18176097</id><snippet>tar.gz</snippet></ROW><ROW><id>18176097</id><snippet>setup.py</snippet></ROW><ROW><id>18176097</id><snippet>python setup.py install --prefix=/share/pythonLib
</snippet></ROW><ROW><id>18176097</id><snippet>/share/pythonLib/lib/python2.7/site-packages/
</snippet></ROW><ROW><id>18176097</id><snippet>sys.path</snippet></ROW><ROW><id>18176141</id><snippet>import sqlite3
from itertools import izip, repeat

conn = sqlite3.connect('mydb.sqlite3')
table_name = 'test'
cursor = conn.cursor()

# Create test table.
cursor.execute('DROP TABLE IF EXISTS {}'.format(table_name));
cursor.execute('CREATE TABLE {} (a1 integer, a2 integer, a3 integer)'.format(table_name));
conn.commit()

my_dicts = [
    { 'a1': repeat(1, 5), 'a2': repeat(2, 5), 'a3': repeat(3, 5) },
    { 'a2': repeat(4, 2) },
    { 'a3': repeat(7, 7) },
]

for my_dict in my_dicts:
    # Key &lt;=&gt; Items order has to be preserved.
    # .keys() and .values() not used to be sure
    # the order is preserved.
    keys = []
    items = []
    for k, v in my_dict.iteritems():
        keys.append(k)
        items.append(v)

    sql = "INSERT INTO {} ({}) VALUES ({})".format(table_name, ','.join(keys), ','.join(repeat('?', len(keys))))
    cursor.executemany(sql, izip(*items))
    conn.commit()

cursor.execute('SELECT * FROM {}'.format(table_name));
conn.commit()

&gt;&gt;&gt; print cursor.fetchall()
[(1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (1, 2, 3), (None, 4, None), (None, 4, None), (None, None, 7), (None, None, 7), (None, None, 7), (None, None, 7), (None, None, 7), (None, None, 7), (None, None, 7)]
</snippet></ROW><ROW><id>18176204</id><snippet>ascii</snippet></ROW><ROW><id>18176204</id><snippet>print ord(u), u
</snippet></ROW><ROW><id>18176204</id><snippet>u</snippet></ROW><ROW><id>18176204</id><snippet># -*- encoding: utf-8 -*-

print "Russian letters".center(18*4)
i = 0
for c in u"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ"\
         u"абвгдежзийклмнопрстуфхцчшщъыьэюя":
    u = c.encode('koi8-r')  
    print ord(u), u
    i += 1
    if i % 4 == 0:
        print
</snippet></ROW><ROW><id>18176204</id><snippet>python.exe</snippet></ROW><ROW><id>18176204</id><snippet>pythonw.exe</snippet></ROW><ROW><id>18176222</id><snippet>upper()</snippet></ROW><ROW><id>18176222</id><snippet>lower()</snippet></ROW><ROW><id>18176222</id><snippet>if string.lower() == string or string.upper() == string:
    print string
</snippet></ROW><ROW><id>18176222</id><snippet>string.isalpha()</snippet></ROW><ROW><id>18176222</id><snippet>exp = re.compile("^([a-z]{2,}|[A-Z]{2,})$")</snippet></ROW><ROW><id>18176257</id><snippet>foo</snippet></ROW><ROW><id>18176257</id><snippet>bar</snippet></ROW><ROW><id>18176257</id><snippet>foo</snippet></ROW><ROW><id>18176257</id><snippet>bar</snippet></ROW><ROW><id>18176257</id><snippet>foo</snippet></ROW><ROW><id>18176257</id><snippet>bar</snippet></ROW><ROW><id>18176257</id><snippet>.join()</snippet></ROW><ROW><id>18176257</id><snippet>Process</snippet></ROW><ROW><id>18176257</id><snippet>.start()</snippet></ROW><ROW><id>18176257</id><snippet>pool.close()</snippet></ROW><ROW><id>18176257</id><snippet>pool.map()</snippet></ROW><ROW><id>18176412</id><snippet>knights = np.array([(42,'Lancelot'),(32,'Bedivere')], dt)
</snippet></ROW><ROW><id>18176453</id><snippet>pylint</snippet></ROW><ROW><id>18176515</id><snippet>ÿþ</snippet></ROW><ROW><id>18176515</id><snippet>UTF-16</snippet></ROW><ROW><id>18176557</id><snippet>x not in s</snippet></ROW><ROW><id>18176557</id><snippet>not x in s</snippet></ROW><ROW><id>18176557</id><snippet>x not in s</snippet></ROW><ROW><id>18176623</id><snippet>class ni:
    bar = "hello"

def foo():
    pi = ni()
    def bar():
        pi.bar = "eggs"
    pi.bar = "spam"
    print(pi.bar)
    bar()
    print(pi.bar)

ni.bar

&gt;&gt;&gt; hello

foo()

&gt;&gt;&gt; spam
&gt;&gt;&gt; eggs
</snippet></ROW><ROW><id>18176623</id><snippet>hee</snippet></ROW><ROW><id>18176623</id><snippet>pi.bar</snippet></ROW><ROW><id>18176623</id><snippet>bar()</snippet></ROW><ROW><id>18176623</id><snippet>pi</snippet></ROW><ROW><id>18176623</id><snippet>bar()</snippet></ROW><ROW><id>18176623</id><snippet>foo()</snippet></ROW><ROW><id>18176623</id><snippet>pi</snippet></ROW><ROW><id>18176681</id><snippet>def secs(timestr):
    hours, minutes, seconds = timestr.split(':')
    return int(hours) * 3600 + int(minutes) * 60 + int(seconds)
</snippet></ROW><ROW><id>18176681</id><snippet>def secs(timestr):
    timeparts = timestr.split(':')
    if len(timeparts) == 3 and all((part.isdigit() for part in timeparts)):
        return int(timeparts[0]) * 3600 + int(timeparts[1] * 60 + int(timeparts[2])
    else:
        # not a matching string - do whatever you like.
        return None
</snippet></ROW><ROW><id>18176681</id><snippet>return str(int(hours) * 3600 + int(minutes) * 60 + int(seconds))</snippet></ROW><ROW><id>18176681</id><snippet>def _calculate_seconds(timematch):
    return str(int(timematch.group(1)) * 3600 + int(timematch.group(2)) * 60 + int(timematch.group(3)))

def secs(timestr):
    timexp = re.compile(r'(\d{1,2}):(\d{1,2}):(\d{1,2})')
    return re.sub(timexp, _calculate_seconds, timestr)
</snippet></ROW><ROW><id>18176682</id><snippet>try:
    foo = bar
except Exception as exception:
    name_of_exception = exception.__class__.__name__
    assert name_of_exception == 'NameError'
</snippet></ROW><ROW><id>18176682</id><snippet>name_of_exception = type(exception).__name__
</snippet></ROW><ROW><id>18176743</id><snippet>matplotlib</snippet></ROW><ROW><id>18176743</id><snippet>/usr/bin/python
</snippet></ROW><ROW><id>18176743</id><snippet>matplotlib</snippet></ROW><ROW><id>18176743</id><snippet>python your_script.py</snippet></ROW><ROW><id>18176743</id><snippet>#!</snippet></ROW><ROW><id>18176743</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>18176743</id><snippet>matplotlib</snippet></ROW><ROW><id>18176761</id><snippet>If ``ensure_ascii`` is false, all non-ASCII characters are not escaped, and
the return value may be a ``unicode`` instance. See ``dump`` for details.
</snippet></ROW><ROW><id>18176761</id><snippet>If ``s`` is a ``str`` instance and is encoded with an ASCII based encoding
other than utf-8 (e.g. latin-1) then an appropriate ``encoding`` name
must be specified. Encodings that are not ASCII based (such as UCS-2)
are not allowed and should be decoded to ``unicode`` first.
</snippet></ROW><ROW><id>18176761</id><snippet>&gt;&gt;&gt; js = json.dumps("Almodóvar", ensure_ascii=False)  
&gt;&gt;&gt; res = json.loads(js, encoding="utf-8")
&gt;&gt;&gt; print res
Almodóvar
</snippet></ROW><ROW><id>18176850</id><snippet>spines</snippet></ROW><ROW><id>18176850</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure(facecolor='white')
ax = fig.add_subplot(1,1,1)
ax.bar(left=[0,4,5],height=[-100,10,110],color=['red','green','green'],width=0.1)
ax.grid(b=True)
ax.spines['left'].set_position('zero')
ax.spines['right'].set_color('none')
ax.spines['bottom'].set_position('zero')
ax.spines['top'].set_color('none')

plt.show()
</snippet></ROW><ROW><id>18176872</id><snippet>fun1</snippet></ROW><ROW><id>18176872</id><snippet>fun2</snippet></ROW><ROW><id>18176872</id><snippet>fun3</snippet></ROW><ROW><id>18176872</id><snippet>class.fun2</snippet></ROW><ROW><id>18176872</id><snippet>class.fun3</snippet></ROW><ROW><id>18176872</id><snippet>Mock(return_value=&lt;your_mocked_return_value&gt;)</snippet></ROW><ROW><id>18176872</id><snippet>mock.call_count</snippet></ROW><ROW><id>18176872</id><snippet>mock.call_args</snippet></ROW><ROW><id>18176957</id><snippet>df2 = pd.DataFrame(index=df1.index)
</snippet></ROW><ROW><id>18177098</id><snippet>Manager</snippet></ROW><ROW><id>18177098</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>18177287</id><snippet>pylab.py</snippet></ROW><ROW><id>18177287</id><snippet>from __future__ import print_function
import sys, warnings

from matplotlib.cbook import flatten, is_string_like, exception_to_str, \
     silent_list, iterable, dedent

import matplotlib as mpl
# make mpl.finance module available for backwards compatability, in case folks
# using pylab interface depended on not having to import it
import matplotlib.finance

from matplotlib.dates import date2num, num2date,\
        datestr2num, strpdate2num, drange,\
        epoch2num, num2epoch, mx2num,\
        DateFormatter, IndexDateFormatter, DateLocator,\
        RRuleLocator, YearLocator, MonthLocator, WeekdayLocator,\
        DayLocator, HourLocator, MinuteLocator, SecondLocator,\
        rrule, MO, TU, WE, TH, FR, SA, SU, YEARLY, MONTHLY,\
        WEEKLY, DAILY, HOURLY, MINUTELY, SECONDLY, relativedelta

import matplotlib.dates  # Do we need this at all?

# bring all the  symbols in so folks can import them from
# pylab in one fell swoop


## We are still importing too many things from mlab; more cleanup is needed.

from matplotlib.mlab import griddata, stineman_interp, slopes, \
    inside_poly, poly_below, poly_between, \
    is_closed_polygon, path_length, distances_along_curve, vector_lengths

from matplotlib.mlab import window_hanning, window_none,  detrend, demean, \
     detrend_mean, detrend_none, detrend_linear, entropy, normpdf, levypdf, \
     find, longest_contiguous_ones, longest_ones, prepca, \
     prctile, prctile_rank, \
     center_matrix, rk4, bivariate_normal, get_xyz_where, \
     get_sparse_matrix, dist, \
     dist_point_to_segment, segments_intersect, fftsurr, movavg, \
     exp_safe, \
     amap, rms_flat, l1norm, l2norm, norm_flat, frange,  identity, \
     base_repr, binary_repr, log2, ispower2, \
     rec_append_fields, rec_drop_fields, rec_join, csv2rec, rec2csv, isvector

import matplotlib.mlab as mlab
import matplotlib.cbook as cbook

from numpy import *
from numpy.fft import *
from numpy.random import *
from numpy.linalg import *

from matplotlib.pyplot import *

# provide the recommended module abbrevs in the pylab namespace
import matplotlib.pyplot as plt
import numpy as np
import numpy.ma as ma

# don't let numpy's datetime hide stdlib
import datetime

if sys.version_info &gt; (2, 6, 0):
    bytes = __builtins__['bytes']
</snippet></ROW><ROW><id>18177287</id><snippet>pyplot</snippet></ROW><ROW><id>18177287</id><snippet>from matplotlb.pyplot import *</snippet></ROW><ROW><id>18177287</id><snippet>pyplot</snippet></ROW><ROW><id>18177287</id><snippet>pyplot</snippet></ROW><ROW><id>18177287</id><snippet>import pyplot as plt</snippet></ROW><ROW><id>18177287</id><snippet>pylab</snippet></ROW><ROW><id>18177287</id><snippet>plt</snippet></ROW><ROW><id>18177384</id><snippet>pdb</snippet></ROW><ROW><id>18177384</id><snippet>x = 20
import pdb
pdb.set_trace()
</snippet></ROW><ROW><id>18177384</id><snippet>code.interact(local=locals())</snippet></ROW><ROW><id>18177384</id><snippet>x = 20
import code
code.interact(local=locals())
</snippet></ROW><ROW><id>18177400</id><snippet>U.shape == (nu,)</snippet></ROW><ROW><id>18177400</id><snippet>(V.shape == (nv,)</snippet></ROW><ROW><id>18177400</id><snippet>A = np.cos(U)[:,None]*np.sin(V)
B = np.sin(U)[:,None]*np.sin(V)
C = np.repeat(np.cos(V)[None,:],U.size,0)
CP = np.dstack([a1*A, a2*B, a3*C])

SN = np.dstack([2*A/a1, 2*B/a2, 2*C/a3])

DA1 = (a1*a2*np.cos(V)*np.sin(V))**2
DA2 = a3*a3*np.sin(V)**4
DA3 = (a2*np.cos(U))**2 + (a1*np.sin(U))**2
DA = DA1 + DA2 * DA3[:,None]
DA = np.sqrt(DA)*(np.pi**2 / (2*Nu*Nv))

D = np.dot(CP, plane_normal)
S = np.sign(D-d)

F1 = np.dot(np.dot(SN, mat2.T), plane_normal)
F = F1 * DA
#F = F * S # apply sign
Vsum = F[S&gt;0].sum()
Usum = F[S&lt;=0].sum()
</snippet></ROW><ROW><id>18177443</id><snippet>result['selection'] = selected_html.find('h1').contents[0]
</snippet></ROW><ROW><id>18177443</id><snippet>result['info'] = selected_html.find('h1').contents[0]
</snippet></ROW><ROW><id>18177485</id><snippet>cruses</snippet></ROW><ROW><id>18177485</id><snippet>urwid</snippet></ROW><ROW><id>18177485</id><snippet>curses</snippet></ROW><ROW><id>18177485</id><snippet>urwid</snippet></ROW><ROW><id>18177485</id><snippet>urwid</snippet></ROW><ROW><id>18177485</id><snippet>cygwin</snippet></ROW><ROW><id>18177485</id><snippet>curses</snippet></ROW><ROW><id>18177485</id><snippet>Python</snippet></ROW><ROW><id>18177485</id><snippet>urwid</snippet></ROW><ROW><id>18177485</id><snippet>curses</snippet></ROW><ROW><id>18177531</id><snippet>import re

data = """start &lt; some 50 words &gt; End
start &lt; some 50 words &gt;
start &lt; some 50 words &gt; End
start &lt; some 50 words &gt;
&lt; some 50 words &gt; End
"""

print re.sub('start(.*)End', 'start2\g&lt;1&gt;End.', data)
</snippet></ROW><ROW><id>18177531</id><snippet>start2 &lt; some 50 words &gt; End.
start &lt; some 50 words &gt;
start2 &lt; some 50 words &gt; End.
start &lt; some 50 words &gt;
&lt; some 50 words &gt; End
</snippet></ROW><ROW><id>18177550</id><snippet>class Buildings(object):
    def __init__(self, function):
        self.function = function
    # Don't name an attribute the same as a method
    def myMethod(self):
        # Use self.function instead of function
        if self.function == '1':
            print 'blablabla'
        elif self.function == '2':
            print 'blablabla'



Granary = Buildings('1')
Granary.myMethod()
</snippet></ROW><ROW><id>18177550</id><snippet>def Buildings(function):
    if function == '1':
        print 'blablabla'
    elif function == '2':
        print 'blablabla'
Buildings('1')
</snippet></ROW><ROW><id>18177809</id><snippet>n == 0</snippet></ROW><ROW><id>18177809</id><snippet>n &gt; 0</snippet></ROW><ROW><id>18177809</id><snippet>n &lt; 0</snippet></ROW><ROW><id>18177809</id><snippet>sierpinski1(n,x1,y1,x2,y2,x3,y3,panel)
    condition n = 0 FAILS
    sierpinski1(n-1,x1,y1,(x1+x2)/2,(y1+y2)/2,(x1+x3)/2,(y1+y3)/2, panel)
        condition n = 0 PASSES
        panel.canvas.create_polygon(x1,y1,x2,y2,x3,y3, fill = 'yellow', outline = 'black')
    sierpinski1(n-1,(x1+x3)/2,(y1+y3)/2,(x2+x3)/2,(y2+y3)/2,x3,y3,panel)
        condition n = 0 PASSES
        panel.canvas.create_polygon(x1,y1,x2,y2,x3,y3, fill = 'yellow', outline = 'black')
    sierpinski1(n-1,(x1+x2)/2,(y1+y2)/2,x2,y2,(x2+x3)/2,(y2+y3)/2,panel)
        condition n = 0 PASSES
        panel.canvas.create_polygon(x1,y1,x2,y2,x3,y3, fill = 'yellow', outline = 'black')
</snippet></ROW><ROW><id>18177809</id><snippet>n</snippet></ROW><ROW><id>18177888</id><snippet>for x in a.list:
    print x
</snippet></ROW><ROW><id>18177905</id><snippet>root</snippet></ROW><ROW><id>18177905</id><snippet>static_file</snippet></ROW><ROW><id>18177905</id><snippet>os.chdir()</snippet></ROW><ROW><id>18177905</id><snippet>bottle.run</snippet></ROW><ROW><id>18177905</id><snippet>return static_file(filename, root='/path/to/your/static/file/root')
</snippet></ROW><ROW><id>18177905</id><snippet>os.chdir('/path/to/your/static/file/root')
run(host='myip', port=2000, debug=True)
</snippet></ROW><ROW><id>18177933</id><snippet>range</snippet></ROW><ROW><id>18177933</id><snippet>list</snippet></ROW><ROW><id>18177933</id><snippet>&gt;&gt;&gt; Var1 = range(10, 50)
&gt;&gt;&gt; print(list(Var1))
[10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,  
32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18177934</id><snippet>format</snippet></ROW><ROW><id>18177934</id><snippet>a</snippet></ROW><ROW><id>18177934</id><snippet>{...}</snippet></ROW><ROW><id>18177934</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; a = 'a[b]cdef[g ]hi[ j]klmno[ p ]'
&gt;&gt;&gt; d = {'b':2,'g':7,'j':10,'p':16}
&gt;&gt;&gt; 
&gt;&gt;&gt; re.sub(r'\[\s?(.*?)\s?\]',r'{\1}',a).format(**d)
'a2cdef7hi10klmno16'
</snippet></ROW><ROW><id>18177934</id><snippet>lambda</snippet></ROW><ROW><id>18177934</id><snippet>&gt;&gt;&gt; re.sub(r'\[\s?(.*?)\s?\]', lambda m: str(d[m.group(1)]), a)
'a2cdef7hi10klmno16'
</snippet></ROW><ROW><id>18177934</id><snippet>lambda</snippet></ROW><ROW><id>18177934</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt;
&gt;&gt;&gt; setup = """
... import re
... a = 'a[b]cdef[g ]hi[ j]klmno[ p ]'
... d = {'b':2,'g':7,'j':10,'p':16}
... """
&gt;&gt;&gt;
&gt;&gt;&gt; timeit(r"re.sub(r'\[\s?(.*?)\s?\]',r'{\1}',a).format(**d)", setup)
13.796708106994629
&gt;&gt;&gt; timeit(r"re.sub(r'\[\s?(.*?)\s?\]', lambda m: str(d[m.group(1)]), a)", setup)
6.593755006790161
</snippet></ROW><ROW><id>18178031</id><snippet>run = test_imports.alive['import_1']
</snippet></ROW><ROW><id>18178031</id><snippet>global</snippet></ROW><ROW><id>18178031</id><snippet>self</snippet></ROW><ROW><id>18178031</id><snippet>run = self.alive['import_1']
</snippet></ROW><ROW><id>18178056</id><snippet>str.rstrip</snippet></ROW><ROW><id>18178056</id><snippet>int</snippet></ROW><ROW><id>18178056</id><snippet>format</snippet></ROW><ROW><id>18178056</id><snippet>&gt;&gt;&gt; inp = '0x0202020202UL'
&gt;&gt;&gt; format(int(inp[:-2], 16), 'b')
'1000000010000000100000001000000010'
# Using `str.rstrip`, This will work for any hex, not just UL
&gt;&gt;&gt; format(int(inp.rstrip('UL'), 16), 'b')
'1000000010000000100000001000000010'
</snippet></ROW><ROW><id>18178056</id><snippet>from itertools import islice
def formatted_bin(inp):
   output = format(int(inp.rstrip('UL'), 16), 'b')
   le = len(output)
   m = le % 4
   padd = 4 - m if m != 0 else 0
   output  = output.zfill(le + padd)
   it = iter(output)
   return ' '.join(''.join(islice(it, 4)) for _ in xrange((le+padd)/4))

print formatted_bin('0x0202020202UL')
print formatted_bin('0x10')
print formatted_bin('0x101010')
print formatted_bin('0xfff')
</snippet></ROW><ROW><id>18178056</id><snippet>0010 0000 0010 0000 0010 0000 0010 0000 0010
0001 0000
0001 0000 0001 0000 0001 0000
1111 1111 1111
</snippet></ROW><ROW><id>18178076</id><snippet>letters</snippet></ROW><ROW><id>18178076</id><snippet>isalpha</snippet></ROW><ROW><id>18178076</id><snippet>letters = "abcdefghijklmnopqrstuvwxyz"</snippet></ROW><ROW><id>18178076</id><snippet>string.ascii_lowercase</snippet></ROW><ROW><id>18178096</id><snippet>plt.xkcd()</snippet></ROW><ROW><id>18178096</id><snippet>MacOSX</snippet></ROW><ROW><id>18178096</id><snippet>inline</snippet></ROW><ROW><id>18178096</id><snippet>ipython notebook --pylab inline
</snippet></ROW><ROW><id>18178096</id><snippet>plt.xkcd()</snippet></ROW><ROW><id>18178096</id><snippet>QT4Agg</snippet></ROW><ROW><id>18178096</id><snippet>import matplotlib
matplotlib.use('QT4Agg')
</snippet></ROW><ROW><id>18178159</id><snippet>chunksize</snippet></ROW><ROW><id>18178159</id><snippet>import re
def open_delimited(filename, delimiter, *args, **kwargs):
    """
    http://stackoverflow.com/a/17508761/190597
    """
    with open(filename, *args, **kwargs) as infile:
        chunksize = 10000
        remainder = ''
        for chunk in iter(lambda: infile.read(chunksize), ''):
            pieces = re.split(delimiter, remainder + chunk)
            for piece in pieces[:-1]:
                yield piece
            remainder = pieces[-1]
        if remainder:
            yield remainder

filename = 'post.txt'
for chunk in open_delimited(filename, '##', 'r'):
    print(chunk)
    print('-'*80)
</snippet></ROW><ROW><id>18178274</id><snippet>with open('source.txt', 'r') as f:
    data = {}
    numbers = []
    for line in f:
        ln = line.strip()
        if 'Timestamp' in ln:
            data[ln] = numbers
            numbers = []
        elif ln:
            numbers.append([int(n) for n in ln.split()])

print(data)
</snippet></ROW><ROW><id>18178274</id><snippet>{
    'Timestamp 2':
    [
        [5, 4, 8, 9, 8, 7, 2],
        [1, 5, 9, 6, 3, 1, 2]
    ],
    'Timestamp 1':
    [
        [1, 2, 2, 3, 4, 5, 6],
        [1, 5, 8, 9, 3, 4, 2],
        [1, 2, 3, 5, 1, 2, 3]
    ]
}
</snippet></ROW><ROW><id>18178546</id><snippet>pd.rolling_sum(df, 12, axis=1)
</snippet></ROW><ROW><id>18178546</id><snippet>axis=1</snippet></ROW><ROW><id>18178546</id><snippet>df</snippet></ROW><ROW><id>18178546</id><snippet>import numpy as np
import pandas as pd
ncols, nrows = 13, 2
df = pd.DataFrame(np.arange(ncols*nrows).reshape(nrows, ncols))
print(df)
#    0   1   2   3   4   5   6   7   8   9   10  11  12
# 0   0   1   2   3   4   5   6   7   8   9  10  11  12
# 1  13  14  15  16  17  18  19  20  21  22  23  24  25

print(pd.rolling_sum(df, 12, axis=1))
</snippet></ROW><ROW><id>18178546</id><snippet>   0   1   2   3   4   5   6   7   8   9   10   11   12
0 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN   66   78
1 NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN NaN  222  234
</snippet></ROW><ROW><id>18178546</id><snippet>result = [expression for x in df.iterrows()]
</snippet></ROW><ROW><id>18178546</id><snippet>[expression for variable in sequence]
</snippet></ROW><ROW><id>18178546</id><snippet>result</snippet></ROW><ROW><id>18178546</id><snippet>result = []
for variable in sequence:
    result.append(expression)
</snippet></ROW><ROW><id>18178624</id><snippet>groups</snippet></ROW><ROW><id>18178624</id><snippet>dct</snippet></ROW><ROW><id>18178624</id><snippet>from collections import defaultdict
groups = defaultdict(list)
dct = { 'a' : [0, 5, 7], 'b' : [1, 2, 5], 'c' : [3, 2], 'd' : [3], 'e' : [0, 5]}
for key, values in dct.items():
    for value in values:
        groups[value].append(key)

for key in groups.keys():
    if len(groups[key]) &gt; 1:    # i.e. the value is common to more than 1 group
        print(key, groups[key])

(0, ['a', 'e'])
(2, ['c', 'b'])
(3, ['c', 'd'])
(5, ['a', 'b', 'e'])
</snippet></ROW><ROW><id>18178624</id><snippet>dct</snippet></ROW><ROW><id>18178624</id><snippet>def common(query_group, dct, have_common=[]):
    """ Recursively find the common elements within groups """

    if len(query_group) &lt;= 1:
        return have_common

    # extract the elements from groups, and pull their original values from dct
    # then get the intersection of these
    first, second = set(dct[query_group[0]]), set(dct[query_group[1]])
    have_common.extend(first.intersection(second))

    return common(query_group[2:], dct, have_common)

for query_group in groups.values():
    if len(query_group) &gt; 1:
        print(query_group, '=&gt;', common(query_group, dct, have_common=[]))

['e', 'a'] =&gt; [0, 5]    
['b', 'c'] =&gt; [2]    
['d', 'c'] =&gt; [3]    
['e', 'b', 'a'] =&gt; [5}]
</snippet></ROW><ROW><id>18178731</id><snippet>aptitude</snippet></ROW><ROW><id>18178731</id><snippet>aptitude install scrapyd-0.18
</snippet></ROW><ROW><id>18178731</id><snippet>ben@nixbox:~$ aptitude versions scrapyd
Package scrapyd-0.14:                   
p   0.14.4+1351083316                             &lt;NULL&gt;                    500 

Package scrapyd-0.15:
p   0.15.1-309-gc3e91ba+1350590037                &lt;NULL&gt;                    500 

Package scrapyd-0.16:
p   0.16.5+1375718980                             &lt;NULL&gt;                    500 

Package scrapyd-0.17:
p   0.17.1-22-gaa883be+1372791583                 &lt;NULL&gt;                    500 
</snippet></ROW><ROW><id>18178742</id><snippet>&gt;&gt;&gt; os.path.expandvars("%APPDATA%")
'C:\\Documents and Settings\\falsetru\\Application Data'
&gt;&gt;&gt; os.path.exists(os.path.expandvars("%APPDATA%"))
True
</snippet></ROW><ROW><id>18178742</id><snippet>"%APPDATA%"</snippet></ROW><ROW><id>18178742</id><snippet>%APPDATA%</snippet></ROW><ROW><id>18178751</id><snippet>bash -x HelloWorld.sh</snippet></ROW><ROW><id>18178751</id><snippet>#!/bin/bash -x</snippet></ROW><ROW><id>18178751</id><snippet>+ echo 'Hello, World!'
Hello, World!
</snippet></ROW><ROW><id>18178864</id><snippet>data</snippet></ROW><ROW><id>18178864</id><snippet>data</snippet></ROW><ROW><id>18178864</id><snippet>&gt;&gt;&gt; class Minimal:
...     def __init__(self, data=[]):
...         self.data = data
... 
&gt;&gt;&gt; a1 = Minimal()
&gt;&gt;&gt; a2 = Minimal()
&gt;&gt;&gt; a1.data is a2.data
True
</snippet></ROW><ROW><id>18178864</id><snippet>&gt;&gt;&gt; class Minimal:
...     def __init__(self, data=None):
...         self.data = data or []
... 
&gt;&gt;&gt; a1 = Minimal()
&gt;&gt;&gt; a2 = Minimal()
&gt;&gt;&gt; a1.data is a2.data
False
</snippet></ROW><ROW><id>18179140</id><snippet>import Tkinter as tk
...
objects=[
    ('o',tk.Label, 0, 1),
    ('g',tk.Label, 0, 2),
    ('e',tk.Label, 0, 3),
    ('r',tk.Label, 1, 0),
    ('w',tk.Label, 2, 0),
    ('x',tk.Label, 3, 0),
]
</snippet></ROW><ROW><id>18179151</id><snippet>from django.utils import simplejson

def post(self, request, *args, **kwargs):
    isUpvote = simplejson.loads(request.POST.get('isUpvote'))
</snippet></ROW><ROW><id>18179335</id><snippet>import collections

def is_palindrome(string):
    palindrome = collections.deque(string)
    while len(palindrome) &gt; 1:
        if palindrome.popleft() != palindrome.pop():
            return False
    return True
</snippet></ROW><ROW><id>18179408</id><snippet>Wind = [x for y in Wind for x in y]
</snippet></ROW><ROW><id>18179408</id><snippet>for</snippet></ROW><ROW><id>18179408</id><snippet>newWind = []
for y in Wind:
    for x in y:
        newWind.append(x)
</snippet></ROW><ROW><id>18179419</id><snippet>STDERR</snippet></ROW><ROW><id>18179419</id><snippet>warn</snippet></ROW><ROW><id>18179419</id><snippet>warn "Hey I'm a warning.";
</snippet></ROW><ROW><id>18179419</id><snippet>warnings</snippet></ROW><ROW><id>18179419</id><snippet>strict</snippet></ROW><ROW><id>18179419</id><snippet>use strict;
use warnings;

warn "Hey I'm a warning.";
</snippet></ROW><ROW><id>18179419</id><snippet>warnings</snippet></ROW><ROW><id>18179419</id><snippet>warn</snippet></ROW><ROW><id>18179420</id><snippet>Archive_post_save_handler</snippet></ROW><ROW><id>18179420</id><snippet>post_save</snippet></ROW><ROW><id>18179420</id><snippet>created</snippet></ROW><ROW><id>18179658</id><snippet>import multiprocessing
pool = multiprocessing.Pool(processes=4)
def fu(chunk):
    #your code here
    return result

def produce_data(data):
    while data:
        #you need to split data
        yield chunk

result = pool.map(fu,chunk_data(data))
# result will be ordered list of results for each chunk
</snippet></ROW><ROW><id>18179995</id><snippet>import os.path
path = os.path.expanduser('~/.myapp/db.sqlite')
</snippet></ROW><ROW><id>18180437</id><snippet>import math
import pygame
from pygame.locals import *

radar = (100,100)
radar_len = 50
x = radar[0] + math.cos(math.radians(angle)) * radar_len
y = radar[1] + math.sin(math.radians(angle)) * radar_len

# then render the line radar-&gt;(x,y)
pygame.draw.line(screen, Color("black"), radar, (x,y), 1)
</snippet></ROW><ROW><id>18180655</id><snippet>currentIndex()</snippet></ROW><ROW><id>18180717</id><snippet>sort_orders = {
   "-created_at": -MyModel.created_at,
   "some_other_order": SomeModel.some_property

}

def get_order(input):
    return sort_orders.get(input)
</snippet></ROW><ROW><id>18180717</id><snippet>-</snippet></ROW><ROW><id>18180717</id><snippet>s~lightning-catfish&gt; -Series.updatedDate
PropertyOrder(&lt;updatedDate&gt;, DESCENDING)
</snippet></ROW><ROW><id>18180867</id><snippet>contextlib</snippet></ROW><ROW><id>18180867</id><snippet>Close</snippet></ROW><ROW><id>18180867</id><snippet>close</snippet></ROW><ROW><id>18180867</id><snippet>import contextlib
with contextlib.closing(thing):
    print thing
</snippet></ROW><ROW><id>18180867</id><snippet>all_lowercase_with_underscores</snippet></ROW><ROW><id>18180924</id><snippet>str.format()</snippet></ROW><ROW><id>18180924</id><snippet>def findFruit(f):
    found = re.search(r'.*? (.*?) Lemon (.*?) .*?$', f)
    if found is not None:
       print '"{}" # "{}"'.format(found.group(1), found.group(2))
</snippet></ROW><ROW><id>18180924</id><snippet>print '"{0}" # "{1}"'.format(*found.groups())
</snippet></ROW><ROW><id>18180954</id><snippet>## use a proper power law random number generator (or code your own) 
from networkx.utils import powerlaw_sequence
pl_sequence = powerlaw_sequence(1000,exponent=2.5)

fitted_pl = powerlaw.Fit(pl_sequence)

fitted_pl.alpha
Out[73]: 2.4709012785346314  ##close enough
</snippet></ROW><ROW><id>18180984</id><snippet>for item in fle:
    if item.rstrip(',').strip() in sentence.split():
        # Match
        print item
</snippet></ROW><ROW><id>18180984</id><snippet>sentence</snippet></ROW><ROW><id>18180984</id><snippet>.split()</snippet></ROW><ROW><id>18180984</id><snippet>sentence</snippet></ROW><ROW><id>18181960</id><snippet>(priority,value)</snippet></ROW><ROW><id>18181960</id><snippet>def exists(self, item):
   return item in (x[1] for x in self.heap)
</snippet></ROW><ROW><id>18182118</id><snippet>itertools.product</snippet></ROW><ROW><id>18182118</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; list(product('abcdef', repeat=2))
[('a', 'a'), ('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'e'), ('a', 'f'), ('b', 'a'), ('b', 'b'), ('b', 'c'), ('b', 'd'), ('b', 'e'), ('b', 'f'), ('c', 'a'), ('c', 'b'), ('c', 'c'), ('c', 'd'), ('c', 'e'), ('c', 'f'), ('d', 'a'), ('d', 'b'), ('d', 'c'), ('d', 'd'), ('d', 'e'), ('d', 'f'), ('e', 'a'), ('e', 'b'), ('e', 'c'), ('e', 'd'), ('e', 'e'), ('e', 'f'), ('f', 'a'), ('f', 'b'), ('f', 'c'), ('f', 'd'), ('f', 'e'), ('f', 'f')]
</snippet></ROW><ROW><id>18182386</id><snippet>print</snippet></ROW><ROW><id>18182386</id><snippet>None</snippet></ROW><ROW><id>18182386</id><snippet>&gt;&gt;&gt; print(print("foo"))
foo
None
</snippet></ROW><ROW><id>18182386</id><snippet>text = " " * i + " " + "* " * b
print (text[:-1])
</snippet></ROW><ROW><id>18182386</id><snippet>str.rstrip</snippet></ROW><ROW><id>18182386</id><snippet>&gt;&gt;&gt; "foo ".rstrip()
'foo'
</snippet></ROW><ROW><id>18182386</id><snippet>str.rstrip</snippet></ROW><ROW><id>18182386</id><snippet>&gt;&gt;&gt; print (str.rstrip.__doc__)
S.rstrip([chars]) -&gt; str

Return a copy of the string S with trailing whitespace removed.
If chars is given and not None, remove characters in chars instead.
</snippet></ROW><ROW><id>18182726</id><snippet>Table</snippet></ROW><ROW><id>18182726</id><snippet>CreateTable()</snippet></ROW><ROW><id>18182726</id><snippet>CreateTable(User.__table__)
</snippet></ROW><ROW><id>18182726</id><snippet>echo=True</snippet></ROW><ROW><id>18182726</id><snippet>SQLALCHEMY_ECHO</snippet></ROW><ROW><id>18182899</id><snippet>    #!usr/bin/env/ python

    #Regexp library
    import re

    #Map
    #This function returns a new array containing
    #the elements after that have been modified by whatever function we passed in.
    def mapper(function, sequence):

        #List to store the results of the map operation
        result = []

        #Iterate over each item in sequence, append the values to the results list
        #after they have been modified by the "function" supplied as an argument in the
        #mapper function call.
        for item in sequence:
            result.append(function(item))

        return result

    #Reduce
    #The purpose of the reduce function is to go through an array, and combine the items 
    #according to a specified function - this specified function should combine an element 
    #with a base value
    def reducer(function, sequence, base_value):

        #Need to get an base value to serve as the starting point for the construction of 
        #the result
        #I will assume one is given, but in most cases you should include extra validation 
        #here to either ensure one is given, or some sensible default is chosen

        #Initialize our accumulative value object with the base value
        accum_value = base_value

        #Iterate through the sequence items, applying the "function" provided, and 
        #storing the results in the accum_value object
        for item in sequence:
            accum_value = function(item, accum_value)

        return accum_value

    #With these functions it should be sufficient to address your problem, what remains 
    #is simply to get the data from the text files, and keep track of the lines in 
    #which words appear
    if __name__ == 'main':

        word_list_file = 'FILEPATH GOES HERE'

        #Read in a file containing the words that will be searched in the text file 
        #(assumes words are given as a comma separated list)
        infile = open(word_list_file, 'rt')    #Open file
        content = infile.read()     #read the whole file as a single string
        word_list = content.split(',')  #split the string into an array of words
        infile.close()

        target_text_file = 'FILEPATH GOES HERE'

        #Read in the text to analyze
        infile = open(target_text_file, 'rt')   #Open file
        target_text_lines = infile.readlines()    #Read the whole file as an array of lines
        infile.close()

        #With the data loaded, the overall strategy will be to loop over the text lines, and 
        #we will use the map function to loop over the the word_list and see if they are in 
        #the current text file line

        #First, define the my_mapper function that will process your data, and will be passed to
        #the map function
        def my_mapper(item):

            #Split the current sentence into words
            #Will split on any non alpha-numeric character. This strategy can be revised 
            #to find matches to a regular expression pattern based on the words in the 
            #words list. Either way, make sure you choose a sensible strategy to do this.
            current_line_words = re.split(r'\W+', target_text_lines[k])

            #lowercase the words
            current_line_words = [word.lower() for word in current_line_words]

            #Check if the current item (word) is in the current_line_words list, and if so,
            #return the word and the line number
            if item in current_line_words:
                return [item, k+1]    #Return k+1 because k begins at 0, but I assume line
                                      #counting begins with 1?
            else:
                return []   #Technically, this does not need to be added, it can simply 
                            #return None by default, but that requires manually handling iterator 
                            #objects so the loop doesn't crash when seeing the None values, 
                            #and I am being lazy :D

        #With the mapper function established, we can proceed to  loop over the text lines of the 
        #array, and use our map function to process the lines against the list of words.

        #This array will store the results of the map operation
        map_output = []

        #Loop over text file lines, use mapper to find which words are in which lines, store 
        #in map_output list. This is the exciting stuff!
        for k in range(len(target_text_lines)):
            map_output.extend(mapper(my_mapper, word_list))

        #At this point, we should have a list of lists containing the words and the lines they 
        #appeared in, and it should look like, [['word1', 1] ... ['word25': 5] ... [] ...]
        #As you can see, the post-map array will have an entry for each word that appeared in 
        #each line, and if a particular word did not appear in a particular line, there will be a
        #empty list instead.

        #Now all that remains is to summarize our data, and that is what the reduce function is 
        #for. We will iterate over the map_output list, and collect the words and which lines 
        #they appear at in an object that will have the format { 'word': [n1, n2, ...] },where 
        #n1, n2, ... are the lines the word appears in. As in the case for the mapper
        #function, the output of the reduce function can be modified in the my_reducer function 
        #you supply to it. If you'd rather it return something else (like say, word count), this
        #is the function to modify.

        def my_reducer(item, accum_value):
            #First, verify item is not empty
            if item != []:
                #If the element already exists in the output object, append the current line 
                #value to it, if not, add it to the object and create a set holding the current 
                #line value

                #Check this word/line combination isn't already stored in the output dict
                if (item[0] in accum_value) and (item[1] not in accum_value[item[0]]):
                    accum_value[item[0]].append(item[1])
                else:
                    accum_value[item[0]] = [item[1]]

            return accum_value

        #Now we can call the reduce function, save it's output, print it to screen, and we're  
        #done!
        #(Note that for base value we are just passing in an empty object, {})
        reduce_results = reducer(my_reducer, map_output, {})

        #Print results to screen
        for result in reduce_results:
            print('word: {}, lines: {}'.format(result, reduce_results[result]))
</snippet></ROW><ROW><id>18183101</id><snippet>start_date = date.today() - timedelta(days=7)

MyModel.objects.filter(timestamp__gte=start_date).extra(select={'day': connection.ops.date_trunc_sql('day', 'timestamp')}).values('day').annotate(max_temperature=Max('temperature'))
</snippet></ROW><ROW><id>18183451</id><snippet>DeadlineError</snippet></ROW><ROW><id>18183451</id><snippet>task queue</snippet></ROW><ROW><id>18183451</id><snippet>Blobstore</snippet></ROW><ROW><id>18183451</id><snippet>Blobserve URL</snippet></ROW><ROW><id>18183451</id><snippet>Channel API</snippet></ROW><ROW><id>18183953</id><snippet>r = re.findall(r'^ \s+ (\w+) \s+ ((?:0x [\da-f]+ \s+)*)', oo, re.VERBOSE)
numbers = r[0][1].split()
</snippet></ROW><ROW><id>18184247</id><snippet>for d in lst:
    d['score'] -= 1
</snippet></ROW><ROW><id>18184247</id><snippet>[{k: v - 1 if k == 'score' else v for k, v in d.iteritems()} for d in lst] 
</snippet></ROW><ROW><id>18184247</id><snippet>&gt;&gt;&gt; lst = [{'score': 93, 'numrep': 0}, {'score': 32, 'numrep': 0}, {'score': 39, 'numrep': 0}, {'score': 81, 'numrep': 0}, {'score': 82, 'numrep': 0}]
&gt;&gt;&gt; [{k: v - 1 if k == 'score' else v for k, v in d.iteritems()} for d in lst] 
[{'score': 92, 'numrep': 0}, {'score': 31, 'numrep': 0}, {'score': 38, 'numrep': 0}, {'score': 80, 'numrep': 0}, {'score': 81, 'numrep': 0}]
</snippet></ROW><ROW><id>18184247</id><snippet>def subtract_score(d):
    d = d.copy()
    d['score'] -= 1
    return d
</snippet></ROW><ROW><id>18184247</id><snippet>[subtract_score(d) for d in lst]
</snippet></ROW><ROW><id>18184482</id><snippet>newfunc = type(h)(h.__code__, cleaned_globals, h.__name__, h.__defaults__, h.__closure__)
</snippet></ROW><ROW><id>18184482</id><snippet>cleaned_globals</snippet></ROW><ROW><id>18184482</id><snippet>cleaned_globals</snippet></ROW><ROW><id>18184482</id><snippet>h.__globals__</snippet></ROW><ROW><id>18184482</id><snippet>&gt;&gt;&gt; def h(i):
...     f()
...     return g(i)
... 
&gt;&gt;&gt; def g(i):
...     return i + 1
... 
&gt;&gt;&gt; def f():
...     print("Non-pure function")
... 
&gt;&gt;&gt; h(1)
Non-pure function
2
&gt;&gt;&gt; cleaned_globals = {'g': g}
&gt;&gt;&gt; newfunc = type(h)(h.__code__, cleaned_globals, h.__name__, h.__defaults__, h.__closure__)
&gt;&gt;&gt; newfunc(1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in h
NameError: global name 'f' is not defined
&gt;&gt;&gt; cleaned_globals['f'] = lambda: print('Injected function')
&gt;&gt;&gt; newfunc(1)
Injected function
2
</snippet></ROW><ROW><id>18184710</id><snippet>['{{{0[score]}-{0[numrep]}}}'.format(d) for d in lst]
</snippet></ROW><ROW><id>18184710</id><snippet>['{7-0}', '{2-0}', '{9-0}', '{2-0}']
</snippet></ROW><ROW><id>18184710</id><snippet>'[{}]'.format(', '.join(['{{{0[score]}-{0[numrep]}}}'.format(d) for d in lst]))
</snippet></ROW><ROW><id>18184710</id><snippet>&gt;&gt;&gt; print ['{{{0[score]}-{0[numrep]}}}'.format(d) for d in lst]
['{7-0}', '{2-0}', '{9-0}', '{2-0}']
&gt;&gt;&gt; print '[{}]'.format(', '.join(['{{{0[score]}-{0[numrep]}}}'.format(d) for d in lst]))
[{7-0}, {2-0}, {9-0}, {2-0}]
</snippet></ROW><ROW><id>18184710</id><snippet>{{</snippet></ROW><ROW><id>18184710</id><snippet>}}</snippet></ROW><ROW><id>18184710</id><snippet>%</snippet></ROW><ROW><id>18184710</id><snippet>'{%(score)s-%(numrep)s}' % d
</snippet></ROW><ROW><id>18184710</id><snippet>string.Template()</snippet></ROW><ROW><id>18184710</id><snippet>from string import Template

f = Template('{$score-$numrep}')

f.substitute(d)
</snippet></ROW><ROW><id>18184710</id><snippet>&gt;&gt;&gt; print '[{}]'.format(', '.join(['{%(score)s-%(numrep)s}' % d for d in lst]))
[{7-0}, {2-0}, {9-0}, {2-0}]
&gt;&gt;&gt; from string import Template
&gt;&gt;&gt; f = Template('{$score-$numrep}')
&gt;&gt;&gt; print '[{}]'.format(', '.join([f.substitute(d) for d in lst]))
[{7-0}, {2-0}, {9-0}, {2-0}]
</snippet></ROW><ROW><id>18185200</id><snippet>None</snippet></ROW><ROW><id>18185200</id><snippet>r.json()</snippet></ROW><ROW><id>18185200</id><snippet>def request(query, **params):
    query = ('%27'+query+ '%27')
    r = requests.get(URL % {'query': query}, auth=('', API_KEY))
    return r.json()
</snippet></ROW><ROW><id>18185200</id><snippet>r = request("JasonBourne")
for res in r['d']['results']:
    print res['Url']
</snippet></ROW><ROW><id>18185200</id><snippet>r = request("JasonBourne")
urls = [res['Url'] for res in r['d']['results']]
</snippet></ROW><ROW><id>18185200</id><snippet>urls</snippet></ROW><ROW><id>18185585</id><snippet>&gt;&gt;&gt; c=np.array([a,b])
array([[[  1.,   2.,  nan],
        [ nan,   5.,   6.],
        [ nan,  nan,  nan]],

       [[  2.,  nan,   6.],
        [  8.,  nan,  12.],
        [ 14.,  16.,  nan]]])

&gt;&gt;&gt; scipy.stats.nanmean(c,axis=0)
array([[  1.5,   2. ,   6. ],
       [  8. ,   5. ,   9. ],
       [ 14. ,  16. ,   nan]])
</snippet></ROW><ROW><id>18185589</id><snippet>import numpy as np

length = 1000
monte_carlo_array=np.random.uniform(0.0, 1.0, length)
# print monte_carlo_array
threshold = 0.5
above = 0

for i in range (0,length):
    if monte_carlo_array[i] &gt; threshold:
        above+=1
print above
</snippet></ROW><ROW><id>18185589</id><snippet>#include &lt;random&gt; 
#include &lt;iostream&gt;

int main()
{
    const int length = 1000;
    std::random_device rd;
    std::mt19937_64 mt(rd());
    std::uniform_real_distribution&lt;double&gt; distribution(0, 1);
    double threshold = 0.5;
    double monte_carlo_array[length];

    for(int i = 0; i &lt; length; i++)
    {
        double d = distribution(mt);
        monte_carlo_array[i] = d;
    }
    int above = 0;

    for(int i = 0; i &lt; length; i++)
    {
        if (monte_carlo_array[i] &gt; threshold)
        {
            above++;
        }
    }
    std::cout &lt;&lt; above &lt;&lt; std::endl;
}
</snippet></ROW><ROW><id>18185589</id><snippet>Python:
480
507
485
515
506
average:
498.6

C++:
499
484
531
509
509
average
506.4
</snippet></ROW><ROW><id>18185589</id><snippet>Python:

50235
49752
50215
49717
49974

Average: 
49978.6

C++:

50085
50018
49993
49779
49966

Average:
49968.2
</snippet></ROW><ROW><id>18186085</id><snippet>array</snippet></ROW><ROW><id>18186085</id><snippet>.__sizeof__()</snippet></ROW><ROW><id>18186085</id><snippet>&gt;&gt;&gt; sys.getsizeof(array_)
4000056L
</snippet></ROW><ROW><id>18186085</id><snippet>&gt;&gt;&gt; sys.getsizeof(array_)
56L
</snippet></ROW><ROW><id>18186085</id><snippet>list</snippet></ROW><ROW><id>18186371</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; intext = """calf_n1 := n_-_c_le &amp; n_-_pn_le &amp;\n [ ORTH.FOO &lt; "cali.ber,kl", 'calf' , "done" &gt;,\nLKEYS.KEYREL.PRED "_calf_n_1_rel",\n ORHT2BAR &lt;"what so ever &gt;", "this that mess &lt; up"&gt; ,\n LKEYS.KEYREL.CARG "&lt;20&gt;",\nLOOSE.SCREW "&gt;20 but &lt;30"\n JOKE &lt;'whatthe ', "what" &gt;,\n THIS + ]."""
&gt;&gt;&gt; results = re.findall('\\n .*?([A-Z0-9\.]*) &lt; *((?:[^&gt;\n]|&gt;")*) *&gt;.*?(?:\\n|$)', intext)
&gt;&gt;&gt; print results
[('ORTH.FOO', '"cali.ber,kl", \'calf\', "done"'), ('ORHT2BAR', '"what so ever&gt;", "this that mess &lt; up"'), ('JOKE', '\'whatthe \', "what" ')]
</snippet></ROW><ROW><id>18186538</id><snippet>export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/documents/workspace
source /usr/local/bin/virtualenvwrapper.sh
</snippet></ROW><ROW><id>18186538</id><snippet>PROJECT_HOME</snippet></ROW><ROW><id>18186538</id><snippet>$ mkvirtualenv foo
...
(foo)$ lsvirtualenv
</snippet></ROW><ROW><id>18186538</id><snippet>mkvirtualenv</snippet></ROW><ROW><id>18186538</id><snippet>workon</snippet></ROW><ROW><id>18186538</id><snippet> $ workon foo
</snippet></ROW><ROW><id>18187284</id><snippet>@register.filter(is_safe=True)
def length(value):
    """Returns the length of the value - useful for lists."""
    try:
        return len(value)
    except (ValueError, TypeError):
        return ''
</snippet></ROW><ROW><id>18187284</id><snippet>@register.filter(is_safe=True)</snippet></ROW><ROW><id>18187284</id><snippet>length</snippet></ROW><ROW><id>18187284</id><snippet>SaveData</snippet></ROW><ROW><id>18187284</id><snippet>mark_safe</snippet></ROW><ROW><id>18187284</id><snippet>mark_safe</snippet></ROW><ROW><id>18187284</id><snippet>SafeString</snippet></ROW><ROW><id>18187462</id><snippet>float</snippet></ROW><ROW><id>18187462</id><snippet>data['weighted'] = 0.0
</snippet></ROW><ROW><id>18187462</id><snippet>import pandas as pd
data = pd.DataFrame({'winner':[0,0,1,0]}, index=pd.Series(['Steve', 'Joe', 'Marsha', 'Kent'], name='runner_name'), )
data['weighted'] = 0.0
data.ix['Steve', 'weighted'] = 45.88
print(data)
</snippet></ROW><ROW><id>18187462</id><snippet>             winner  weighted
runner_name                  
Steve             0     45.88
Joe               0      0.00
Marsha            1      0.00
Kent              0      0.00
</snippet></ROW><ROW><id>18187462</id><snippet>&gt;&gt;&gt; print(data.dtypes)
winner        int64
weighted    float64
dtype: object
</snippet></ROW><ROW><id>18187513</id><snippet>()</snippet></ROW><ROW><id>18187513</id><snippet>[]</snippet></ROW><ROW><id>18187513</id><snippet>np.arange(10)(1)
</snippet></ROW><ROW><id>18187513</id><snippet>TypeError: 'numpy.ndarray' object is not callable
</snippet></ROW><ROW><id>18187513</id><snippet>np.arange(10)[1]
</snippet></ROW><ROW><id>18187513</id><snippet>1
</snippet></ROW><ROW><id>18187827</id><snippet>env.host_string = IPADDRESS</snippet></ROW><ROW><id>18187827</id><snippet>env.hosts_string</snippet></ROW><ROW><id>18187827</id><snippet>fab</snippet></ROW><ROW><id>18187827</id><snippet>python</snippet></ROW><ROW><id>18187977</id><snippet>dir(thing)</snippet></ROW><ROW><id>18187977</id><snippet>'__eq__' in dir(thing) 
</snippet></ROW><ROW><id>18187977</id><snippet>False</snippet></ROW><ROW><id>18187977</id><snippet>dir()</snippet></ROW><ROW><id>18187977</id><snippet>thing</snippet></ROW><ROW><id>18187977</id><snippet>type</snippet></ROW><ROW><id>18187977</id><snippet>&gt;&gt;&gt; '__eq__' in dir(type(thing))
True
</snippet></ROW><ROW><id>18187977</id><snippet>dir()</snippet></ROW><ROW><id>18187977</id><snippet>dir()</snippet></ROW><ROW><id>18187977</id><snippet>metaclass</snippet></ROW><ROW><id>18187977</id><snippet>__eq__</snippet></ROW><ROW><id>18187977</id><snippet>type()</snippet></ROW><ROW><id>18187977</id><snippet>==</snippet></ROW><ROW><id>18187977</id><snippet>is</snippet></ROW><ROW><id>18187977</id><snippet>dir()</snippet></ROW><ROW><id>18188120</id><snippet>Cfg</snippet></ROW><ROW><id>18188120</id><snippet>data</snippet></ROW><ROW><id>18188120</id><snippet>__init__</snippet></ROW><ROW><id>18188120</id><snippet>class Cfg():
    def __init__(self):
        self.data = {}

    def set(self, key, value):
        self.data[key] = value

    def get(self, key):
        return self.data.get(key, None)
</snippet></ROW><ROW><id>18188120</id><snippet>test_b</snippet></ROW><ROW><id>18188210</id><snippet>Buttons().hbox</snippet></ROW><ROW><id>18188210</id><snippet>my_buttons = Buttons(); 
my_buttons.the_method();
my_buttons.the_method();
</snippet></ROW><ROW><id>18188660</id><snippet>raise</snippet></ROW><ROW><id>18188660</id><snippet>try:
    something()
except SomeError:
    t, v, tb = sys.exc_info()
    try:
        plan_B()
    except AlsoFailsError:
        raise t, v, tb
</snippet></ROW><ROW><id>18188690</id><snippet>&gt;&gt;&gt; array1 = ["a", "b", "c", "d"]
&gt;&gt;&gt; array2 = [0, 1, 1, 0]
&gt;&gt;&gt; [array1[index] for index, val in enumerate(array2) if val == 1] # Or if val
['b', 'c']
</snippet></ROW><ROW><id>18188690</id><snippet>&gt;&gt;&gt; [a for a, b in zip(array1, array2) if b]
['b', 'c']
</snippet></ROW><ROW><id>18188776</id><snippet>&lt;that&gt;</snippet></ROW><ROW><id>18188776</id><snippet>objektid = dom.getElementsByTagName('that')
</snippet></ROW><ROW><id>18188776</id><snippet>&lt;result status="3" botid="ebbf27804e3458c5"&gt;&lt;input&gt;Hello world!&lt;/input&gt;&lt;message&gt;Failed to find bot&lt;/message&gt;&lt;/result&gt;
</snippet></ROW><ROW><id>18189023</id><snippet>r.content</snippet></ROW><ROW><id>18189023</id><snippet>fr = make_response(r.content)
</snippet></ROW><ROW><id>18189023</id><snippet>stream=True</snippet></ROW><ROW><id>18189023</id><snippet>r = zs.get('url_that_loads_a_png', stream=True)
</snippet></ROW><ROW><id>18189190</id><snippet>    import socket
    import struct

    def getTCPInfo(s):
        fmt = "B"*7+"I"*21
        x = struct.unpack(fmt, s.getsockopt(socket.IPPROTO_TCP, socket.TCP_INFO, 92))
        print x

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    getTCPInfo(s)
    s.connect(('www.google.com', 80))
    getTCPInfo(s)
    s.send("hi\n\n")
    getTCPInfo(s)
    s.recv(1024)
    getTCPInfo(s)
</snippet></ROW><ROW><id>18189438</id><snippet>load</snippet></ROW><ROW><id>18189438</id><snippet>/setting/save-reporter/</snippet></ROW><ROW><id>18189438</id><snippet>.html()</snippet></ROW><ROW><id>18189438</id><snippet>success: function(response) {
    $('#authorisedreporter').html(response);
</snippet></ROW><ROW><id>18189592</id><snippet>login(...)</snippet></ROW><ROW><id>18189592</id><snippet>login(input)</snippet></ROW><ROW><id>18189592</id><snippet>login(username, password)</snippet></ROW><ROW><id>18189637</id><snippet>crewList2 = []
for element in tree.xpath('//video/crew/crew_member/roles'):
    role = element.xpath('.//role[1]')
    if role:
        crewList2.append(role[0].text)

print crewList2
</snippet></ROW><ROW><id>18189637</id><snippet>['Director', 'Screenwriter', 'Screenwriter', 'Producer']
</snippet></ROW><ROW><id>18189670</id><snippet>import time, calendar

# Get the current time in a localtime manner (we need it for the day and year)
today = time.localtime(time.time())
# We put the day, month and year into a strftime -&gt; localtime converter
# giving us the localtime version of 00:00:00 of today (there's cleaner version for this process)
today_strftime = time.strptime(str(today.tm_mday) + " " + time.strftime("%b") + " " + str(today.tm_year)[-2:], "%d %b %y")
# Then we take that localtime of 00:00:00 and put it into timegm which gives us the unix
# timestamp of 00:00:00 today, which we can subtract from time.time() to give us how many
# seconds of today has passed since 00:00:00.. Which we can use to compare integers with eachother (more efficient, and easy to compare)
unixtime_beginning_of_day = calendar.timegm(today_strftime)
time_passed_today = time.time() - unixtime_beginning_of_day

if time_passed_today &gt; 3600:
    # 60sec per min * 60 minutes per hour == 3600 seconds in one hour.
    print "One hour has passed since the start of this day"
</snippet></ROW><ROW><id>18189696</id><snippet>range(len(T))</snippet></ROW><ROW><id>18189696</id><snippet>T</snippet></ROW><ROW><id>18189696</id><snippet>T</snippet></ROW><ROW><id>18189696</id><snippet>&gt;&gt;&gt; T = [[2,5],[4,7],[8,6],[34,74],[32,35],[24,7],[12,5],[0,34]]
&gt;&gt;&gt; upper = 10
&gt;&gt;&gt; lower = 0
&gt;&gt;&gt; for elem in T:
        if all(lower &lt; x &lt; upper for x in elem):
            print "True", elem
        else:
            print "False", elem


True [2, 5]
True [4, 7]
True [8, 6]
False [34, 74]
False [32, 35]
False [24, 7]
False [12, 5]
False [0, 34]
</snippet></ROW><ROW><id>18190128</id><snippet>for tag_type in dom.getElementsByTagName('tag_type'):
    while tag_type.hasChildNodes():
        tag_type.removeChild(tag_type.firstChild)
    tag_type.appendChild(dom.createTextNode("Replacement Word"))
</snippet></ROW><ROW><id>18190128</id><snippet>&gt;&gt;&gt; from xml.dom import minidom
&gt;&gt;&gt; xml = '''\
... &lt;root&gt;
...    &lt;tag_type&gt;
...       Foo
...       Bar
...    &lt;/tag_type&gt;
... &lt;/root&gt;
... '''
&gt;&gt;&gt; dom = minidom.parseString(xml)
&gt;&gt;&gt; for tag_type in dom.getElementsByTagName('tag_type'):
...     while tag_type.hasChildNodes():
...         tag_type.removeChild(tag_type.firstChild)
...     tag_type.appendChild(dom.createTextNode("Replacement Word"))
... 
&lt;DOM Text node "'Replacemen'..."&gt;
&gt;&gt;&gt; print dom.toxml()
&lt;?xml version="1.0" ?&gt;&lt;root&gt;
   &lt;tag_type&gt;Replacement Word&lt;/tag_type&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>18190476</id><snippet>re.findall()</snippet></ROW><ROW><id>18190476</id><snippet>piece</snippet></ROW><ROW><id>18190476</id><snippet>(number, number_number)</snippet></ROW><ROW><id>18190476</id><snippet>&gt;&gt;&gt; re.findall(r"(\d+)\s+(\d+_\d+)", '45 456_45    12 12_12')
[('45', '456_45'), ('12', '12_12')]
</snippet></ROW><ROW><id>18190476</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>18190476</id><snippet>piece</snippet></ROW><ROW><id>18190476</id><snippet>remainder</snippet></ROW><ROW><id>18190476</id><snippet>chunk</snippet></ROW><ROW><id>18190476</id><snippet>&gt;&gt;&gt; ('12', '12_12') + '123 123_1234\n'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can only concatenate tuple (not "str") to tuple
</snippet></ROW><ROW><id>18190476</id><snippet>remainder = '{} {} '.format(*pieces[-1])
</snippet></ROW><ROW><id>18190742</id><snippet>urlparse.urlsplit()</snippet></ROW><ROW><id>18190742</id><snippet>&gt;&gt;&gt; from urlparse import urlsplit
&gt;&gt;&gt; urlsplit('http://www.sparkbrowser.com/index.php')
SplitResult(scheme='http', netloc='www.sparkbrowser.com', path='/index.php', query='', fragment='')
&gt;&gt;&gt; _.netloc
'www.sparkbrowser.com'
</snippet></ROW><ROW><id>18190742</id><snippet>.netloc</snippet></ROW><ROW><id>18190742</id><snippet>&gt;&gt;&gt; '.'.join(res.netloc.split('.')[-2:])
'sparkbrowser.com'
</snippet></ROW><ROW><id>18190742</id><snippet>publicsuffix</snippet></ROW><ROW><id>18190742</id><snippet>&gt;&gt;&gt; from publicsuffix import PublicSuffixList
&gt;&gt;&gt; psl = PublicSuffixList()
&gt;&gt;&gt; psl.get_public_suffix(res.netloc)
'sparkbrowser.com'
&gt;&gt;&gt; psl.get_public_suffix('www.example.domain.co.uk')
'domain.co.uk'
</snippet></ROW><ROW><id>18190929</id><snippet>import moduleB

moduleB.some_variable = 'foo'
</snippet></ROW><ROW><id>18190929</id><snippet>some_variable</snippet></ROW><ROW><id>18190990</id><snippet>@</snippet></ROW><ROW><id>18190990</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r"(?&lt;=@)\w+", "@dasweo where you at?")
['dasweo']
</snippet></ROW><ROW><id>18190990</id><snippet>(?&lt;=X)Y</snippet></ROW><ROW><id>18190990</id><snippet>Y</snippet></ROW><ROW><id>18190990</id><snippet>X</snippet></ROW><ROW><id>18190990</id><snippet>X</snippet></ROW><ROW><id>18190990</id><snippet>X</snippet></ROW><ROW><id>18190990</id><snippet>@</snippet></ROW><ROW><id>18190990</id><snippet>Y</snippet></ROW><ROW><id>18190990</id><snippet>\w+</snippet></ROW><ROW><id>18190990</id><snippet>&gt;&gt;&gt; [m.group(1) for m in re.finditer(r"@(\w+)", "@dasweo where you at?")]
['dasweo']
</snippet></ROW><ROW><id>18190990</id><snippet>m.group(1)</snippet></ROW><ROW><id>18190990</id><snippet>\w+</snippet></ROW><ROW><id>18190996</id><snippet>-E</snippet></ROW><ROW><id>18191078</id><snippet>interpolate</snippet></ROW><ROW><id>18191078</id><snippet>def interpolate(ts, target):
    ts1 = ts.sort_index()
    b = (ts1.index &gt; target).argmax() # index of first entry after target
    s = ts1.iloc[b-1:b+1]
    # Insert empty value at target time.
    s = s.reindex(pd.to_datetime(list(s.index.values) + [pd.to_datetime(target)]))
    return s.interpolate('time').loc[target]
</snippet></ROW><ROW><id>18191078</id><snippet>interpolate(ts, '2013-08-11 14:20:00')
2013-08-11 14:20:00    0.329112
</snippet></ROW><ROW><id>18191305</id><snippet>@cuda.autotjit</snippet></ROW><ROW><id>18191305</id><snippet>foo()</snippet></ROW><ROW><id>18191305</id><snippet>import numpy
from numbapro import cuda

@cuda.autojit
def foo(aryA, aryB ,out):
    # do something here
    i = cuda.threadIdx.x + cuda.blockIdx.x * cuda.blockDim.x
    out[i] = aryA[i] + aryB[i]

griddim = 1, 2
blockdim = 3, 4
aryA = numpy.arange(10, dtype=numpy.int32)
aryB = numpy.arange(10, dtype=numpy.int32)
out = numpy.empty(10, dtype=numpy.int32)

# transfer memory
d_ary1 = cuda.to_device(aryA)
d_ary2 = cuda.to_device(aryB)
d_out = cuda.device_array_like(aryA) # like numpy.empty_like() but for GPU
# launch kernel
foo[griddim, blockdim](aryA, aryB, d_out)

# transfer memory device to host
d_out.copy_to_host(out)

print out
</snippet></ROW><ROW><id>18191602</id><snippet>__del__</snippet></ROW><ROW><id>18191602</id><snippet>__del__</snippet></ROW><ROW><id>18191602</id><snippet>__del__()</snippet></ROW><ROW><id>18191602</id><snippet>__exit__()</snippet></ROW><ROW><id>18191602</id><snippet>exc_type</snippet></ROW><ROW><id>18191602</id><snippet>None</snippet></ROW><ROW><id>18191687</id><snippet>import re
import urlparse

s = '?attr[foo]=1&amp;attr[bar]=2'

def parse(s):
    d = {}
    for key, value in urlparse.parse_qs(s).items():
        match = re.match(r'(?P&lt;key&gt;[^\[]+)\[(?P&lt;value&gt;[^\]]+)\]', key)
        gd = match.groupdict()
        d.setdefault(gd['key'], {})[gd['value']] = value[0]
    return d

print(parse(s[1:]))
</snippet></ROW><ROW><id>18191687</id><snippet>{'attr': {'foo': '1', 'bar': '2'}}
</snippet></ROW><ROW><id>18191800</id><snippet>max()</snippet></ROW><ROW><id>18191800</id><snippet>from operator import itemgetter

max(inputlist, key=itemgetter(1))[0]
</snippet></ROW><ROW><id>18191800</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>18191800</id><snippet>&gt;&gt;&gt; inputlist = [('123c', 0.0), ('123c1', 0.0), ('123c2', 0.10456917162915072), ('123c3', 0.097595441008939465), ('123c4', 0.0), ('12c35', 0.0), ('13836', 0.040490933063262943)]
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; max(inputlist, key=itemgetter(1))[0]
'123c2'
</snippet></ROW><ROW><id>18191828</id><snippet>def idDetailIndex(request, user_id):
    user = User.objects.get(id=user_id)
    return redirect('FLSocial', first_name=user.firstName, last_name=user.lastName)
</snippet></ROW><ROW><id>18191863</id><snippet>re.sub('[a-zA-Z]\d,', lambda x: x.group(0)[0] + '0' + x.group(0)[1:], s)
</snippet></ROW><ROW><id>18191895</id><snippet>url</snippet></ROW><ROW><id>18191895</id><snippet>url(r'^calendar/(?P&lt;pk&gt;\d+)/(?P&lt;start__year&gt;\d+)/(?P&lt;start__month&gt;\d+)/$', calendar)</snippet></ROW><ROW><id>18191895</id><snippet>start__year</snippet></ROW><ROW><id>18191895</id><snippet>start_month</snippet></ROW><ROW><id>18191895</id><snippet>kwargs</snippet></ROW><ROW><id>18191895</id><snippet>def calendar(request, pk, start__year, start__month):
    pass
</snippet></ROW><ROW><id>18192006</id><snippet>manage.py startproject</snippet></ROW><ROW><id>18192006</id><snippet>cms/
    manage.py
    cms/
        __init__.py
        settings.py
        urls.py
        wsgi.py
</snippet></ROW><ROW><id>18192006</id><snippet>cms</snippet></ROW><ROW><id>18192006</id><snippet>apps</snippet></ROW><ROW><id>18192006</id><snippet>cms/
    manage.py
    cms/
        __init__.py
        settings.py
        urls.py
        wsgi.py
coltrane/
racing/
tagging/
</snippet></ROW><ROW><id>18192006</id><snippet>cms</snippet></ROW><ROW><id>18192006</id><snippet>cms/
    manage.py
    cms/
        __init__.py
        settings.py
        urls.py
        wsgi.py
    coltrane/
    racing/
    tagging/
</snippet></ROW><ROW><id>18192033</id><snippet>&gt;&gt;&gt; a=np.exp(np.arange(-3,3,dtype=np.float))
&gt;&gt;&gt; b=np.log(a)
&gt;&gt;&gt; b
array([-3., -2., -1.,  0.,  1.,  2.])

&gt;&gt;&gt; b[b&lt;=0]=-np.inf
&gt;&gt;&gt; b
array([-inf, -inf, -inf, -inf,   1.,   2.])
</snippet></ROW><ROW><id>18192033</id><snippet>def inf_log(arr,copy=False):
    mask= (arr&lt;=1)
    notmask= ~mask
    if copy==True:
        out=arr.copy()
        out[notmask]=np.log(out[notmask])
        out[mask]=-np.inf
        return out
    else:
        arr[notmask]=np.log(arr[notmask])
        arr[mask]=-np.inf
</snippet></ROW><ROW><id>18192139</id><snippet>python -m SimpleHTTPServer</snippet></ROW><ROW><id>18192139</id><snippet>http://localhost:8000/products/</snippet></ROW><ROW><id>18192139</id><snippet>http://localhost:8000/products</snippet></ROW><ROW><id>18192548</id><snippet>__file__</snippet></ROW><ROW><id>18192548</id><snippet>.
`- your.egg
   `-your_module.py
</snippet></ROW><ROW><id>18192548</id><snippet>your_module.py</snippet></ROW><ROW><id>18192548</id><snippet>def func():
    print(__file__)
</snippet></ROW><ROW><id>18192548</id><snippet>import sys
sys.path.append('/path/to/your.egg')
from your_module import func
func()
</snippet></ROW><ROW><id>18192548</id><snippet>/path/to/your.egg/your_module.py
</snippet></ROW><ROW><id>18192548</id><snippet>__file__</snippet></ROW><ROW><id>18192548</id><snippet>egg</snippet></ROW><ROW><id>18192548</id><snippet>egg</snippet></ROW><ROW><id>18192548</id><snippet>def rel_to_egg(f):
    my_dir = os.path.dirname(os.path.abspath(f))
    current = my_dir
    while not current.endswith('.egg'):
        current = os.path.dirname(current)
    return os.path.relpath(current, my_dir)
</snippet></ROW><ROW><id>18192548</id><snippet>__file__ == '/test/my.egg/some/dir/my_script.py'</snippet></ROW><ROW><id>18192548</id><snippet>&gt;&gt;&gt; print(rel_to_egg(__file__))
'../..'
</snippet></ROW><ROW><id>18192595</id><snippet>SELECT * WHERE {
  ?x rdfs:label "New York"@en.
  ?x dbpedia-owl:abstract ?abstract.
  OPTIONAL { ?x dbpedia-owl:areaTotal ?areaTotal. }
  OPTIONAL { ?x dbpprop:governor ?governor. }
  OPTIONAL { ?x dbpprop:birthPlace ?birthPlace. }
  FILTER (LANG(?abstract) = 'en')
}
</snippet></ROW><ROW><id>18192608</id><snippet>class _static_property(object):
    """ Descriptor class used for declaring computed properties that 
        don't require a class instance. """
    def __init__(self, getter, setter):
        self.getter = getter
        self.setter = setter

    def __get__(self, obj, objtype=None):
        print "In the getter function"
        return self.getter(obj)

    def __set__(self, obj, value):
        print "In setter function"
        self.setter(obj, value)

class _MyMetaClass(type):
    def getX(self):
        return self._x

    def setX(self, v):
        self._x = v

    X = _static_property(getX, setX)

class MyTest(object):
    __metaclass__ = _MyMetaClass
    _x = 42

print MyTest.__dict__
print MyTest.X
MyTest.X = 12
print MyTest.X
print MyTest.__dict__
</snippet></ROW><ROW><id>18192608</id><snippet>type</snippet></ROW><ROW><id>18192608</id><snippet>self</snippet></ROW><ROW><id>18192608</id><snippet>MyTest</snippet></ROW><ROW><id>18192719</id><snippet>group = {}
for i in range(array.shape[1]):
    tup = tuple(array[:,i])
    if tup in group.keys():
        group[tup].append(i)
    else:
        group[tup] = [i]
</snippet></ROW><ROW><id>18192719</id><snippet>array</snippet></ROW><ROW><id>18192719</id><snippet>In [132]: group
Out[132]:
{(0, 1): [0],
 (0, 2): [6],
 (1, 0): [5],
 (1, 1): [4, 7, 8],
 (2, 0): [2, 9],
 (2, 1): [1, 3]}
</snippet></ROW><ROW><id>18192719</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>18192719</id><snippet>list</snippet></ROW><ROW><id>18192719</id><snippet>dict</snippet></ROW><ROW><id>18192719</id><snippet>tuple</snippet></ROW><ROW><id>18192719</id><snippet>list</snippet></ROW><ROW><id>18192719</id><snippet>group</snippet></ROW><ROW><id>18192719</id><snippet>defaultdict</snippet></ROW><ROW><id>18192719</id><snippet>dict</snippet></ROW><ROW><id>18192719</id><snippet>my_partition['first']  = [0,1,2]
my_partition['second'] = [3,4]
my_partition['third']  = [5,6,7]
my_partition['fourth'] = [8, 9]

# Define a helper to back-out the column that serves as a key for the set-like structure.
# Take 0th element, column index should only be part of one subset.
get_key = lambda x: [k for k,v in group.iteritems() if x in v][0]

# use itertools
import itertools

# Print out the common columns between each pair of groups.
for pair_x, pair_y in itertools.combinations(my_partition.keys(), 2):
    print pair_x, pair_y, (set(map(get_key, my_partition[pair_x])) &amp;
                           set(map(get_key, my_partition[pair_y])))
</snippet></ROW><ROW><id>18192719</id><snippet>In [163]: for pair_x, pair_y in itertools.combinations(my_partition.keys(), 2):
    print pair_x, pair_y, set(map(get_key, my_partition[pair_x])) &amp; set(map(get_key, my_partition[pair_y]))
   .....:
second fourth set([(1, 1)])
second third set([(1, 1)])
second first set([(2, 1)])
fourth third set([(1, 1)])
fourth first set([(2, 0)])
third first set([])
</snippet></ROW><ROW><id>18192798</id><snippet>0xfe</snippet></ROW><ROW><id>18192798</id><snippet>&gt;&gt;&gt; print '125650\xfe383736\xfe3926'.decode('latin-1')
125650þ383736þ3926
</snippet></ROW><ROW><id>18193082</id><snippet>File "/usr/lib64/python3.3/tokenize.py", line 30, in &lt;module&gt;
    from token import *
File "/home/lucas/Server/ClinApp/weblabs/utils/token.py", line 1, in &lt;module&gt;
    from django.conf import settings
</snippet></ROW><ROW><id>18193138</id><snippet>&amp;</snippet></ROW><ROW><id>18193138</id><snippet>logs[(logs &lt; numpy.inf) &amp; (logs &gt; 0)]
</snippet></ROW><ROW><id>18193138</id><snippet>and</snippet></ROW><ROW><id>18193138</id><snippet>or</snippet></ROW><ROW><id>18193138</id><snippet>&amp;</snippet></ROW><ROW><id>18193138</id><snippet>|</snippet></ROW><ROW><id>18193256</id><snippet>&gt;&gt;&gt; g
['a', 'x', 'p']

&gt;&gt;&gt; x = [print(x) for x in g]
a
x
p
#
</snippet></ROW><ROW><id>18193256</id><snippet>&gt;&gt;&gt; print(x)
[None, None, None]
&gt;&gt;&gt; x
[None, None, None]
</snippet></ROW><ROW><id>18193263</id><snippet>ManyToMany</snippet></ROW><ROW><id>18193263</id><snippet>&gt;&gt;&gt; from foo.models import Map, ListField
&gt;&gt;&gt; map = Map()
&gt;&gt;&gt; map.spawn_locations
[]
&gt;&gt;&gt; map.spawn_locations = [(1, 1), (-1, 12), (24, 52)]
&gt;&gt;&gt; map.spawn_locations
[(1, 1), (-1, 12), (24, 52)]
&gt;&gt;&gt; f = ListField()
&gt;&gt;&gt; f.get_prep_value(map.spawn_locations)
u'[(1, 1), (-1, 12), (24, 52)]'
</snippet></ROW><ROW><id>18193263</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; random.choice(map.spawn_locations)
(24, 52)
&gt;&gt;&gt; random.choice(map.spawn_locations)
(1, 1)
</snippet></ROW><ROW><id>18193534</id><snippet>edituserview</snippet></ROW><ROW><id>18193534</id><snippet>u</snippet></ROW><ROW><id>18193534</id><snippet>def test_method(self):
   u = User.objects.get(pk=1)
   # make call to edituserview
   # right now u still reflects the data it had 
   # before you modified its record in edituserview

   u = User.objects.get(pk=1)
   # u should reflect changes
</snippet></ROW><ROW><id>18193592</id><snippet>Message</snippet></ROW><ROW><id>18193592</id><snippet>URL</snippet></ROW><ROW><id>18193592</id><snippet>Message</snippet></ROW><ROW><id>18193592</id><snippet>HAVING</snippet></ROW><ROW><id>18193592</id><snippet>q = session.query(Message).\                                                     
    join(URL).\                                                                  
    group_by(Message).\                                                          
    having(func.count(URL.id) &lt; n)
</snippet></ROW><ROW><id>18193592</id><snippet>filter()</snippet></ROW><ROW><id>18193592</id><snippet>WHERE</snippet></ROW><ROW><id>18193592</id><snippet>having()</snippet></ROW><ROW><id>18193734</id><snippet>wx.ToggleButton(self, 6, '6', (20, 220), name="toggleOne")
</snippet></ROW><ROW><id>18193734</id><snippet>mydict = {}
for btn in buttons:
    mydict[btn.GetName()] = btn.GetValue()
</snippet></ROW><ROW><id>18193884</id><snippet>re.match</snippet></ROW><ROW><id>18193884</id><snippet>  for link in soup.find_all('a'):
    title = link.get('title')
    if title:
      if not 'page does not exist' in title: 
        all_urls.append(link.get('href'))
</snippet></ROW><ROW><id>18193947</id><snippet>def func(l):
   for i, el in enumerate(l):
       if (el match the conditions):
            l.insert(i+1, something)
            return func(l)
   return l


l = [1, 2, 3]
result = func(l)
</snippet></ROW><ROW><id>18193947</id><snippet>l = [1, 2, 3]
while True:
    i = 0
    if i &gt;= len(l):
        break
    if (l[i] match the condition):
        l.insert(i+1, something)
        i = 0
    else:
        i += 1
</snippet></ROW><ROW><id>18194177</id><snippet>myElm3Dict = dict(myWebServiceData['elm3'][0])
</snippet></ROW><ROW><id>18194335</id><snippet>pyqt's</snippet></ROW><ROW><id>18194335</id><snippet>Qtimer</snippet></ROW><ROW><id>18194335</id><snippet>singleShot</snippet></ROW><ROW><id>18194335</id><snippet>QTimer.singleShot (int msec, QObject receiver, SLOT()SLOT() member)</snippet></ROW><ROW><id>18194335</id><snippet>QtCore.QTimer.singleShot(1000, lambda: self.Box.append("Text2")) #1000 milliseconds = 1 second
</snippet></ROW><ROW><id>18194335</id><snippet>    self.timerScreen = QTimer()
    self.timerScreen.setInterval(1000) #1000 milliseconds = 1 second
    self.timerScreen.setSingleShot(True)
    self.timerScreen.timeout.connect(self.Box.append("Text2"))
</snippet></ROW><ROW><id>18194335</id><snippet>def testSleep(self):
    self.lineEdit.setText('Start')
    QtCore.QTimer.singleShot(10000, lambda: self.Box.append("Text2")) 
    QtCore.QTimer.singleShot(10000,lambda: self.timerEvent)


def timerEvent(self):
    QtCore.QTimer.singleShot(10000, lambda: self.Box.append("Text3"))
</snippet></ROW><ROW><id>18194335</id><snippet>x = 10000 #or whatever number
QtCore.QTimer.singleShot(10000 + x, lambda: self.Box.append("Text3"))
</snippet></ROW><ROW><id>18194343</id><snippet>==</snippet></ROW><ROW><id>18194343</id><snippet>&gt;&gt;&gt; s1 = u'Hello'
&gt;&gt;&gt; s2 = unicode("Hello")
&gt;&gt;&gt; type(s1), type(s2)
(&lt;type 'unicode'&gt;, &lt;type 'unicode'&gt;)
&gt;&gt;&gt; s1==s2
True
&gt;&gt;&gt; 
&gt;&gt;&gt; s3='Hello'.decode('utf-8')
&gt;&gt;&gt; type(s3)
&lt;type 'unicode'&gt;
&gt;&gt;&gt; s1==s3
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>18194343</id><snippet>unicode</snippet></ROW><ROW><id>18194343</id><snippet>str</snippet></ROW><ROW><id>18194343</id><snippet>&gt;&gt;&gt; u'Hello' == 'Hello'
True
&gt;&gt;&gt; u'Hello' == '\x81\x01'
__main__:1: UnicodeWarning: Unicode equal comparison failed to convert both arguments to Unicode - interpreting them as being unequal
False
</snippet></ROW><ROW><id>18194448</id><snippet>axis=1</snippet></ROW><ROW><id>18194448</id><snippet>def func(row):
    if row['mobile'] == 'mobile':
        return 'mobile'
    elif row['tablet'] =='tablet':
        return 'tablet' 
    else:
        return 'other'

df['combo'] = df.apply(func, axis=1)
</snippet></ROW><ROW><id>18194480</id><snippet>axes.set_xticks()</snippet></ROW><ROW><id>18194480</id><snippet>271</snippet></ROW><ROW><id>18194480</id><snippet>axes.get_xticks()</snippet></ROW><ROW><id>18194480</id><snippet>271</snippet></ROW><ROW><id>18194480</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()

ax = fig.add_subplot(111)
ax.plot(np.arange(300))

# Get current tick locations and append 271 to this array
x_ticks = np.append(ax.get_xticks(), 271)

# Set xtick locations to the values of the array `x_ticks`
ax.set_xticks(x_ticks)

plt.show()
</snippet></ROW><ROW><id>18194480</id><snippet>x=271</snippet></ROW><ROW><id>18194564</id><snippet>del dictionaryname['keyname']</snippet></ROW><ROW><id>18194564</id><snippet>def run():
    knights = {"Arthur":"king", "Lancelot":"brave", "Galahad":"pure", "Bedivere":"wise"}
    del knights['Galahad']  
    return knights

run()
</snippet></ROW><ROW><id>18194564</id><snippet>try:
    del dictionaryname['keyname']
except KeyError:
    pass
</snippet></ROW><ROW><id>18194564</id><snippet>del</snippet></ROW><ROW><id>18194564</id><snippet>.pop</snippet></ROW><ROW><id>18194564</id><snippet>del</snippet></ROW><ROW><id>18194564</id><snippet>pop</snippet></ROW><ROW><id>18194564</id><snippet>del</snippet></ROW><ROW><id>18194695</id><snippet>&gt;&gt;&gt; table = soup.find("table", class_ = "infobox")
&gt;&gt;&gt; name = table.find("th").text
&gt;&gt;&gt; country = table.find("th",text="Country").parent.find("td").text
&gt;&gt;&gt; table = soup.find("table", class_ = "infobox")
&gt;&gt;&gt; name = table.find("th").text
&gt;&gt;&gt; country = table.find("th",text="Country").parent.find("td").text
&gt;&gt;&gt; country = table.find("th",text="Country").find_next_sibling().text #also works
&gt;&gt;&gt; location =  table.find("th",text="Location").parent.find("td").text
&gt;&gt;&gt; location = table.find("th",text="Location").find_next_sibling().text #also works
</snippet></ROW><ROW><id>18194750</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>18194750</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; testDict = defaultdict(int)
&gt;&gt;&gt; p = [('AAPL', 50), ('AAPL', -50), ('RY', 100), ('RY', -43)]
&gt;&gt;&gt; for key, val in p:
        testDict[key] += val


&gt;&gt;&gt; testDict.items()
[('AAPL', 0), ('RY', 57)]
</snippet></ROW><ROW><id>18194856</id><snippet>open</snippet></ROW><ROW><id>18194856</id><snippet>fopen</snippet></ROW><ROW><id>18194856</id><snippet>buffering</snippet></ROW><ROW><id>18194856</id><snippet>setvbuf</snippet></ROW><ROW><id>18194856</id><snippet>fopen</snippet></ROW><ROW><id>18194856</id><snippet>buffering</snippet></ROW><ROW><id>18194856</id><snippet>PyFile_SetBufSize</snippet></ROW><ROW><id>18194856</id><snippet>bufsize &gt;= 0</snippet></ROW><ROW><id>18194856</id><snippet>setvbuf</snippet></ROW><ROW><id>18194856</id><snippet>malloc</snippet></ROW><ROW><id>18194856</id><snippet>BUFSIZ</snippet></ROW><ROW><id>18194856</id><snippet>setbuf</snippet></ROW><ROW><id>18194856</id><snippet>_IO_DOALLOCATE</snippet></ROW><ROW><id>18194856</id><snippet>_IO_BUFSIZE</snippet></ROW><ROW><id>18194856</id><snippet>_G_BUFSIZE</snippet></ROW><ROW><id>18194856</id><snippet>8192</snippet></ROW><ROW><id>18194945</id><snippet>def resetUI(self, bg=None, fg=None):
    for button in list_of_buttons:
        button.config(background=bg, foreground=fg)
</snippet></ROW><ROW><id>18195138</id><snippet>In [2]: df.sort('Revision').groupby(level=0).last()
Out[2]: 
       Revision Colour
ID                    
14446         0    red
14466         2    red
14471         0  green
14473         1   blue
</snippet></ROW><ROW><id>18195138</id><snippet>ID</snippet></ROW><ROW><id>18195138</id><snippet>groupby('ID')</snippet></ROW><ROW><id>18195436</id><snippet>&lt;tal:block define="python:view.records"&gt;
</snippet></ROW><ROW><id>18195436</id><snippet>records</snippet></ROW><ROW><id>18195436</id><snippet>&lt;tal:block define="python:view.records()"&gt;
</snippet></ROW><ROW><id>18195474</id><snippet>app.run(True, False)
</snippet></ROW><ROW><id>18195474</id><snippet>app</snippet></ROW><ROW><id>18195474</id><snippet>app.run</snippet></ROW><ROW><id>18195474</id><snippet>app.run(debug=True, threaded=False)
</snippet></ROW><ROW><id>18195474</id><snippet>inspect</snippet></ROW><ROW><id>18195479</id><snippet>import plistlib
albumData = plistlib.readPlist("/Users/Darrell/Pictures/iPhoto Library/AlbumData.xml")

masterImageList = albumData["Master Image List"]
for key, value in masterImageList.items():
    print (value['ImagePath'])
</snippet></ROW><ROW><id>18195479</id><snippet>/Users/Darrell/Pictures/iPhoto Library/Masters/2013/08/09/20130809-181038/Kelly.jpg
/Users/Darrell/Pictures/iPhoto Library/Masters/2013/08/09/20130809-180444/_DSC1225.jpg
/Users/Darrell/Pictures/iPhoto Library/Masters/2013/08/09/20130809-181030/_DSC1268.jpg
/Users/Darrell/Pictures/iPhoto Library/Masters/2013/08/09/20130809-181037/_DSC0923.jpg
/Users/Darrell/Pictures/iPhoto Library/Masters/2013/08/09/20130809-181037/_DSC0934.jpg
/Users/Darrell/Pictures/iPhoto Library/Masters/2013/08/09/20130809-181038/_DSC1251.jpg
</snippet></ROW><ROW><id>18195647</id><snippet>import numpy as np
test=np.asarray([[10,15,20,50],[30,40,nan,70],[nan,10,nan,25],[100,50,nan,60]])
test=np.ma.masked_invalid(test)

xi = np.arange(-66,-70,-1)
yi = np.arange(40.5,44.5,1)
xxb,yyb = np.meshgrid(xi, yi)

c=pcolor(xxb,yyb,test)
colorbar(c)
</snippet></ROW><ROW><id>18195763</id><snippet># Modulus must be prime
fmt_error = not isPrime(key.p)
# Verify Lagrange's theorem for sub-group 
fmt_error |= ((key.p-1) % key.q)!=0 
fmt_error |= key.g&lt;=1 or key.g&gt;=key.p
fmt_error |= pow(key.g, key.q, key.p)!=1 
# Public key
fmt_error |= key.y&lt;=0 or key.y&gt;=key.p 
if hasattr(key, 'x'):
    fmt_error |= key.x&lt;=0 or key.x&gt;=key.q 
    fmt_error |= pow(key.g, key.x, key.p)!=key.y
</snippet></ROW><ROW><id>18195763</id><snippet>if extern_key.startswith(b('ssh-dss ')):
    # This is probably a public OpenSSH key
    keystring = binascii.a2b_base64(extern_key.split(b(' '))[1])
    keyparts = []
    while len(keystring) &gt; 4:
        length = struct.unpack("&gt;I", keystring[:4])[0]
        keyparts.append(keystring[4:4 + length])
        keystring = keystring[4 + length:]
    if keyparts[0] == b("ssh-dss"):
        tup = [bytes_to_long(keyparts[x]) for x in (4, 3, 1, 2)]
        return self.construct(tup)
</snippet></ROW><ROW><id>18195921</id><snippet>import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
import numpy as np

plt.figure()
ax = plt.gca()
im = ax.imshow(np.arange(100).reshape((10,10)))

# create an axes on the right side of ax. The width of cax will be 5%
# of ax and the padding between cax and ax will be fixed at 0.05 inch.
divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="5%", pad=0.05)

plt.colorbar(im, cax=cax)
</snippet></ROW><ROW><id>18196137</id><snippet>def detect_onset_event(measurements):
    armed = False
    for offset, (timestamp, value) in enumerate(measurements):
        if value &gt; 90:
            armed = True
        if armed and value &lt; 85:
            return offset
    return -1  # failure condition, might want to raise ValueError()
</snippet></ROW><ROW><id>18196137</id><snippet>import numpy

def detect_twopeak_event(measurements, template):
    data = numpy.asarray(measurements) # convert to numpy array
    activations = numpy.convolve(
        data[:, 1],  # convolve over all "value" elements
        template)
    return activations.argmax()
</snippet></ROW><ROW><id>18196137</id><snippet>def create_mean_template(signals, offsets, radius=20):
    w = numpy.hanning(2 * radius)
    return numpy.mean(
        [s[o-radius:o+radius] * w for s, o in zip(signals, offsets)],
        axis=0)
</snippet></ROW><ROW><id>18196149</id><snippet>import wx

########################################################################
class MyPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)
        self.slider_value = 1

        self.slider = wx.Slider(self, value=1, minValue=0, maxValue=100, size=(250, -1),
                                style=wx.SL_HORIZONTAL | wx.SL_AUTOTICKS | wx.SL_LABELS)
        self.slider.SetTickFreq(5, 1)
        self.slider.Bind(wx.EVT_SCROLL, self.onScroll)
        self.toggle = wx.ToggleButton(self, label="Start")
        self.toggle.Bind(wx.EVT_TOGGLEBUTTON, self.onToggle)

        self.timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.onUpdate, self.timer)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.slider, 0, wx.ALL, 5)
        sizer.Add(self.toggle, 0, wx.ALL, 5)
        self.SetSizer(sizer)

    #----------------------------------------------------------------------
    def onScroll(self, event):
        """
        Fires when you manually scroll the slider
        """
        value = self.slider.GetValue()
        self.slider_value = value

    #----------------------------------------------------------------------
    def onToggle(self, event):
        """
        Start / Stop the slider incrementing
        """
        value = self.toggle.GetValue()
        if value:
            self.toggle.SetLabel("Pause")
            self.timer.Start(1000)
        else:
            self.timer.Stop()
            self.toggle.SetLabel("Start")

    #----------------------------------------------------------------------
    def onUpdate(self, event):
        """
        Increment the slider
        """
        self.slider_value += 1
        self.slider.SetValue(self.slider_value)

########################################################################
class MyFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Slider Test")
        panel = MyPanel(self)
        self.Show()

if __name__ == "__main__":
    app = wx.App(False)
    frame = MyFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>18196208</id><snippet>'C' in seto
</snippet></ROW><ROW><id>18196208</id><snippet>'S'</snippet></ROW><ROW><id>18196208</id><snippet>any('C' in item for item in seto)
</snippet></ROW><ROW><id>18196208</id><snippet>C</snippet></ROW><ROW><id>18196208</id><snippet>any(item.startswith('C') for item in seto)
</snippet></ROW><ROW><id>18196299</id><snippet>df.loc[df['line_race'] == 0, 'rating'] = 0
</snippet></ROW><ROW><id>18196358</id><snippet>.text</snippet></ROW><ROW><id>18196358</id><snippet>&gt;&gt;&gt; print soup.find('tr', 'adr').text

205 South St E
Talladega, Alabama, United States
</snippet></ROW><ROW><id>18196358</id><snippet>&gt;&gt;&gt; soup.find('tr', 'adr').text.strip()
u'205 South St E\nTalladega, Alabama, United States'
&gt;&gt;&gt; print soup.find('tr', 'adr').text.strip()
205 South St E
Talladega, Alabama, United States
</snippet></ROW><ROW><id>18196676</id><snippet>admin/change_form.html</snippet></ROW><ROW><id>18196676</id><snippet>{% extend %}</snippet></ROW><ROW><id>18196676</id><snippet>project/app/templates/admin/change_form.html</snippet></ROW><ROW><id>18196676</id><snippet>templates</snippet></ROW><ROW><id>18196676</id><snippet>project/templates/admin/app/change_form.html</snippet></ROW><ROW><id>18196712</id><snippet>tk.Label</snippet></ROW><ROW><id>18196712</id><snippet>tk.Text</snippet></ROW><ROW><id>18196712</id><snippet>tk.Entry</snippet></ROW><ROW><id>18196712</id><snippet>list</snippet></ROW><ROW><id>18196712</id><snippet>os.listdir()</snippet></ROW><ROW><id>18196712</id><snippet>text</snippet></ROW><ROW><id>18196712</id><snippet>directory()</snippet></ROW><ROW><id>18196712</id><snippet>%temp%</snippet></ROW><ROW><id>18196712</id><snippet>os.path.expandvars()</snippet></ROW><ROW><id>18196712</id><snippet>tempfile.gettempdir()</snippet></ROW><ROW><id>18196712</id><snippet>import os
from Tkinter import *

def directory(folder):
    return '\n'.join(os.listdir(folder))  # turn list into multiline string

class App:
    def __init__(self, master):
        frame = Frame(master)
        frame.pack()

        files = directory(os.path.expandvars('%temp%'))
        self.label = Label(root, text=files)
        self.label.pack(side=LEFT)

root = Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>18196915</id><snippet>from pandas import read_clipboard
names = ['date', 'open', 'close', 'high', 'low']
df = read_clipboard(sep=',', names=names, parse_dates=['date'])
df['d'] = df.date.map(date2num)
</snippet></ROW><ROW><id>18196915</id><snippet>pandas.read_csv</snippet></ROW><ROW><id>18196915</id><snippet>pandas.read_clipboard</snippet></ROW><ROW><id>18196915</id><snippet>from matplotlib.pyplot import subplots, draw
from matplotlib.finance import candlestick

seconds_per_day = 60 * 60 * 24
fig, ax = subplots()
candlestick(ax, df[['d', 'open', 'close', 'high', 'low']].values, width=1.0 / seconds_per_day)
ax.xaxis_date()
draw()
</snippet></ROW><ROW><id>18196958</id><snippet>public static List&lt;Integer&gt; cbSeed(int n) {
    List&lt;Integer&gt; ol = new ArrayList&lt;Integer&gt;();
    ol.add(1);

    int max = (int) Math.ceil(Math.log(n) / Math.log(2));

    for (int i = 0; i &lt; max; i++) {
        int l = 2 * ol.size() + 1;

        List&lt;Integer&gt; newOl = new ArrayList&lt;Integer&gt;(ol.size() * 2);
        for (int el : ol) {
            int e = el;
            newOl.add(e &lt;= n ? e : 0);

            e = l - el;
            newOl.add(e &lt;= n ? e : 0);
        }

        ol = newOl;
    }

    return ol;
}
</snippet></ROW><ROW><id>18196958</id><snippet>for (int i = 2; i &lt; 9; i++)
    System.out.println(i + "\t" + cbSeed(i));
</snippet></ROW><ROW><id>18196967</id><snippet>&gt;&gt;&gt; a[a == 0] = 10
&gt;&gt;&gt; a
array([ 1,  2,  3, 10,  4, 10])
</snippet></ROW><ROW><id>18197093</id><snippet>getMsPerFrame()</snippet></ROW><ROW><id>18197093</id><snippet>return msPFavg, msPFstd, msPFmed #, msdrawAvg, msdrawSD, msfree
</snippet></ROW><ROW><id>18197093</id><snippet>#</snippet></ROW><ROW><id>18197093</id><snippet>&gt;&gt;&gt; print(getMsPerFrame())
(123, 90, 154)
&gt;&gt;&gt; print(getMsPerFrame()[0])
123
</snippet></ROW><ROW><id>18197093</id><snippet>visual.getMsPerFrame()</snippet></ROW><ROW><id>18197093</id><snippet>&gt;&gt;&gt; print(frame2)
{'max': 154, 'avg': 123, 'min': 90}
</snippet></ROW><ROW><id>18197093</id><snippet>&gt;&gt;&gt; print(frame['avg'])
123
</snippet></ROW><ROW><id>18197093</id><snippet>&gt;&gt;&gt; print(frame2)
[154, 123, 90]
</snippet></ROW><ROW><id>18197093</id><snippet>&gt;&gt;&gt; print(frame[1])
123
</snippet></ROW><ROW><id>18197093</id><snippet>&gt;&gt;&gt; print(frame2)
[{'max': 154}, {'avg': 123}, {'min': 90}]
</snippet></ROW><ROW><id>18197093</id><snippet>&gt;&gt;&gt; print([item['avg'] for item in frame2 if item.keys()[0] == 'avg'][0])
123
</snippet></ROW><ROW><id>18197093</id><snippet>print(frames2)</snippet></ROW><ROW><id>18197093</id><snippet>&gt;&gt;&gt; print(frame2)
[('max', 154), ('avg', 123), ('min', 90)]
</snippet></ROW><ROW><id>18197093</id><snippet>&gt;&gt;&gt; print([value for key, value in frame2 if key=='avg'][0])
123
</snippet></ROW><ROW><id>18197211</id><snippet>import numpy as np

v = np.array([1., 1., 1., np.nan, 1., 1., 1., 1., np.nan, 1.])
n = np.isnan(v)
a = ~n
c = np.cumsum(a)
d = np.diff(np.concatenate(([0.], c[n])))
v[n] = -d
np.cumsum(v)
</snippet></ROW><ROW><id>18197211</id><snippet>array([ 1.,  2.,  3.,  0.,  1.,  2.,  3.,  4.,  0.,  1.])</snippet></ROW><ROW><id>18197244</id><snippet>GetSize()</snippet></ROW><ROW><id>18197244</id><snippet>table_width = self.Picks_Left.GetSize()[0] #GetSize returns (width, height) tuple
num_col = self.Picks_Left.GetColumnCount()
col_width = table_width/num_col
for i in range(0, num_col):
    self.Picks_Left.SetColumnWidth(i, col_width)
</snippet></ROW><ROW><id>18197369</id><snippet> self.timer =  fig.canvas.new_timer(interval=100)
 ...
 self.timer.remove_callback(...)
</snippet></ROW><ROW><id>18197369</id><snippet>def new_timer(self, *args, **kwargs):
    """
    Creates a new backend-specific subclass of :class:`backend_bases.Timer`.
    This is useful for getting periodic events through the backend's native
    event loop. Implemented only for backends with GUIs.

    optional arguments:

    *interval*
      Timer interval in milliseconds
    *callbacks*
      Sequence of (func, args, kwargs) where func(*args, **kwargs) will
      be executed by the timer every *interval*.
    """
    return TimerTk(self._tkcanvas, *args, **kwargs)
</snippet></ROW><ROW><id>18197369</id><snippet>TimerTk.start()</snippet></ROW><ROW><id>18197369</id><snippet> class TimerTK(TimerBase):
       ...
       def _timer_start(self):
           self._timer_stop()
           self._timer = self.parent.after(self._interval, self._on_timer)
</snippet></ROW><ROW><id>18197404</id><snippet>my_string = '%s%s%s%s' % (first, second, third, fourth)
byte_string = my_string.encode('utf-8')
</snippet></ROW><ROW><id>18197404</id><snippet>my_string.encode('utf-8')</snippet></ROW><ROW><id>18197404</id><snippet>bytes(my_string, 'utf-8')</snippet></ROW><ROW><id>18197419</id><snippet>min(iter, key=...)</snippet></ROW><ROW><id>18197419</id><snippet>target = 3.19
key, value = min(dict.items(), key=lambda (_, v): abs(v - target))
</snippet></ROW><ROW><id>18197421</id><snippet>__del__()</snippet></ROW><ROW><id>18197421</id><snippet>atexit</snippet></ROW><ROW><id>18197421</id><snippet>sys.exit</snippet></ROW><ROW><id>18197421</id><snippet>main</snippet></ROW><ROW><id>18197421</id><snippet>with</snippet></ROW><ROW><id>18197421</id><snippet>try</snippet></ROW><ROW><id>18197421</id><snippet>finally</snippet></ROW><ROW><id>18197421</id><snippet>__del__</snippet></ROW><ROW><id>18197421</id><snippet>with</snippet></ROW><ROW><id>18197421</id><snippet>finally</snippet></ROW><ROW><id>18197421</id><snippet>atexit</snippet></ROW><ROW><id>18197421</id><snippet>sleep</snippet></ROW><ROW><id>18197421</id><snippet>Py_Finalize</snippet></ROW><ROW><id>18197421</id><snippet>PyImport_Cleanup</snippet></ROW><ROW><id>18197421</id><snippet>sys.modules.clear()</snippet></ROW><ROW><id>18197421</id><snippet>_PyImport_Fini</snippet></ROW><ROW><id>18197421</id><snippet>foo</snippet></ROW><ROW><id>18197421</id><snippet>Foo</snippet></ROW><ROW><id>18197425</id><snippet>zip(l1, l2, l3)</snippet></ROW><ROW><id>18197425</id><snippet>or</snippet></ROW><ROW><id>18197425</id><snippet>[tup[2] or tup[1] or tup[0] for tup in zip(l1, l2, l3)]
</snippet></ROW><ROW><id>18197425</id><snippet>or</snippet></ROW><ROW><id>18197425</id><snippet>or</snippet></ROW><ROW><id>18197425</id><snippet>zip</snippet></ROW><ROW><id>18197425</id><snippet>or</snippet></ROW><ROW><id>18197425</id><snippet>[tup[0] or tup[1] or tup[2] for tup in zip(l3, l2, l1)]
</snippet></ROW><ROW><id>18197425</id><snippet>list of list</snippet></ROW><ROW><id>18197425</id><snippet>li = [[1,    "", 111,    "", 11111], 
      ["",   22, 222,    2222,   ""], 
      ["",   33, "", 3333,   ""], ..... so on
     ]

print [reduce(lambda a, b: a or b, tup) for tup in zip(*li[::-1])]
</snippet></ROW><ROW><id>18197431</id><snippet>command &amp;
</snippet></ROW><ROW><id>18197431</id><snippet>stdout</snippet></ROW><ROW><id>18197431</id><snippet>stderr</snippet></ROW><ROW><id>18197431</id><snippet>#!/bin/bash
# countup.sh

for i in `seq 3`; do
    echo $i
    sleep 1
done
</snippet></ROW><ROW><id>18197431</id><snippet>./countup.sh &amp;
./countup.sh &amp;
</snippet></ROW><ROW><id>18197431</id><snippet>1
1
2
2
3
3
</snippet></ROW><ROW><id>18197431</id><snippet>1
2
1
3
2
3
</snippet></ROW><ROW><id>18197431</id><snippet>stdout</snippet></ROW><ROW><id>18197431</id><snippet>stderr</snippet></ROW><ROW><id>18197431</id><snippet>command &gt; file &amp;
</snippet></ROW><ROW><id>18197431</id><snippet>stdout</snippet></ROW><ROW><id>18197431</id><snippet>command &gt; file 2&gt;&amp;1 &amp;
</snippet></ROW><ROW><id>18197431</id><snippet>stdout</snippet></ROW><ROW><id>18197431</id><snippet>stderr</snippet></ROW><ROW><id>18197431</id><snippet>command</snippet></ROW><ROW><id>18197431</id><snippet>file</snippet></ROW><ROW><id>18197431</id><snippet>command</snippet></ROW><ROW><id>18197431</id><snippet>tail</snippet></ROW><ROW><id>18197431</id><snippet>tail -f file
</snippet></ROW><ROW><id>18197431</id><snippet>nohup command1 &gt; file1 2&gt;&amp;1 &amp;
nohup command2 &gt; file2 2&gt;&amp;1 &amp;
nohup command3 &gt; file3 2&gt;&amp;1 &amp;
</snippet></ROW><ROW><id>18197451</id><snippet>tar xvzf foo.tar.gz</snippet></ROW><ROW><id>18197790</id><snippet>return_inverse=True</snippet></ROW><ROW><id>18197790</id><snippet>at = a.T
b = np.ascontiguousarray(at).view(np.dtype((np.void, at.dtype.itemsize * at.shape[1])))
_, u, indices = np.unique(b, return_index=True, return_inverse=True)
</snippet></ROW><ROW><id>18197790</id><snippet>a</snippet></ROW><ROW><id>18197790</id><snippet>In [35]: u
Out[35]: array([0, 5, 7, 1, 6])

In [36]: indices
Out[36]: array([0, 3, 0, 3, 3, 1, 4, 2, 2, 4])
</snippet></ROW><ROW><id>18197790</id><snippet>u</snippet></ROW><ROW><id>18197790</id><snippet>at = a.T
b = np.ascontiguousarray(at).view(np.dtype((np.void, at.dtype.itemsize * at.shape[1])))
_, idx, indices = np.unique(b, return_index=True, return_inverse=True)
u = a[:,idx]
</snippet></ROW><ROW><id>18197790</id><snippet>In [41]: u
Out[41]:
array([[0, 0, 1, 2, 2],
       [0, 1, 2, 1, 2]])

In [42]: indices
Out[42]: array([0, 3, 0, 3, 3, 1, 4, 2, 2, 4])
</snippet></ROW><ROW><id>18197802</id><snippet>formfield_for_foreignkey</snippet></ROW><ROW><id>18197802</id><snippet>class InlineConnectn(admin.TabularInline):
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        if db_field.name == "book1":
            kwargs["queryset"] = Foo.objects.filter(book1__book_type=1)
        return super(InlineConnectn, self).formfield_for_foreignkey(db_field, request, **kwargs)
</snippet></ROW><ROW><id>18197910</id><snippet>TypeA.Val</snippet></ROW><ROW><id>18197910</id><snippet>TypeA</snippet></ROW><ROW><id>18197910</id><snippet>TypeA</snippet></ROW><ROW><id>18197910</id><snippet>foo</snippet></ROW><ROW><id>18197910</id><snippet>Bar</snippet></ROW><ROW><id>18197910</id><snippet>Bar</snippet></ROW><ROW><id>18197910</id><snippet>foo</snippet></ROW><ROW><id>18197910</id><snippet>Bar.</snippet></ROW><ROW><id>18197910</id><snippet>obj = Bar()</snippet></ROW><ROW><id>18197910</id><snippet>foo.Bar</snippet></ROW><ROW><id>18197910</id><snippet>import foo</snippet></ROW><ROW><id>18197910</id><snippet>TypeA</snippet></ROW><ROW><id>18197910</id><snippet>ValOk</snippet></ROW><ROW><id>18197910</id><snippet>ValSomethingSpecificToThisClassWentWrong</snippet></ROW><ROW><id>18197910</id><snippet>TYPE_GEN</snippet></ROW><ROW><id>18197910</id><snippet>"a": b,</snippet></ROW><ROW><id>18197910</id><snippet>a = b</snippet></ROW><ROW><id>18197910</id><snippet>TYPE_GEN</snippet></ROW><ROW><id>18197985</id><snippet>ranges = []
with open('file1') as f:
    for line in f:
        ranges.append(line.strip().split(' '))
ranges = [tuple(int(_) for _ in r) for r in ranges]
in_range = {range_: set() for range_ in ranges}
with open('file2') as f:
    for line in f:
        num = int(line.strip())
        for range_ in ranges:
            if range_[0] &lt; num &lt; range_[1] # Between low and high
                in_range.add(num)
# print in_range
</snippet></ROW><ROW><id>18198028</id><snippet>~</snippet></ROW><ROW><id>18198028</id><snippet>set backupdir=~/vim_tmp,.
set directory=~/vim_tmp,.
</snippet></ROW><ROW><id>18198028</id><snippet>~/vim_tmp</snippet></ROW><ROW><id>18198044</id><snippet>u"'"</snippet></ROW><ROW><id>18198044</id><snippet>unicode</snippet></ROW><ROW><id>18198044</id><snippet>row[2]</snippet></ROW><ROW><id>18198044</id><snippet>str</snippet></ROW><ROW><id>18198044</id><snippet>unicode</snippet></ROW><ROW><id>18198044</id><snippet>str</snippet></ROW><ROW><id>18198044</id><snippet>str</snippet></ROW><ROW><id>18198044</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>18198044</id><snippet>'ascii'</snippet></ROW><ROW><id>18198044</id><snippet>u"'" + row[2]+"'".encode('utf-8')
</snippet></ROW><ROW><id>18198044</id><snippet>u"'" + row[2] + ("'".encode('utf-8'))
</snippet></ROW><ROW><id>18198044</id><snippet>(u"'" + row[2] + "'").encode('utf-8')
</snippet></ROW><ROW><id>18198044</id><snippet>u"'" + row[2].encode('utf-8') + u"'"
</snippet></ROW><ROW><id>18198044</id><snippet>("'" + row[2] + "'").encode('utf-8')
</snippet></ROW><ROW><id>18198044</id><snippet>encode</snippet></ROW><ROW><id>18198044</id><snippet>decode</snippet></ROW><ROW><id>18198044</id><snippet>'utf-8'</snippet></ROW><ROW><id>18198044</id><snippet>'Latin-1'</snippet></ROW><ROW><id>18198144</id><snippet>myExp = re.compile("(.*)_(?:20)?(\d+)\.(\w+)")
</snippet></ROW><ROW><id>18198144</id><snippet>?:</snippet></ROW><ROW><id>18198144</id><snippet>20</snippet></ROW><ROW><id>18198144</id><snippet>?</snippet></ROW><ROW><id>18198144</id><snippet>(?:20)?</snippet></ROW><ROW><id>18198144</id><snippet>20</snippet></ROW><ROW><id>18198211</id><snippet>import sys
sys.path.insert(0,'parser/directory')
from parser import *
</snippet></ROW><ROW><id>18198218</id><snippet>import sys
import os
import os.path

from PyQt4.QtCore import *
from PyQt4.QtGui import *

class MainWindow(QMainWindow):
    def __init__(self):
        QMainWindow.__init__(self)

        template_menu = self.menuBar().addMenu('&amp;Templates')
        menus = {'templates': template_menu}

        for dirpath, dirnames, filenames in os.walk('templates'):
            current = menus[dirpath]
            for dn in dirnames:
                menus[os.path.join(dirpath, dn)] = current.addMenu(dn)
            for fn in filenames:
                current.addAction(fn)

if __name__=='__main__':
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>18198238</id><snippet>file.csv</snippet></ROW><ROW><id>18198238</id><snippet>2013-07-18 04:54:15.871 UDP 172.12.332.11:20547 172.12.332.11:20547 -&gt; 172.56.213.80:53 CREATE Ignore 0
2013-07-18 04:54:15.841 UDP 192.33.230.81:37192 192.81.130.82:37192 -&gt; 172.81.123.70:53 CREATE Ignore 0
2013-07-18 04:54:15.831 TCP 172.12.332.11:42547 172.12.332.11:42547 -&gt; 172.56.213.80:53 CREATE Ignore 0
2013-07-18 04:54:15.821 UDP 192.33.230.81:37192 192.81.130.82:37192 -&gt; 172.81.123.70:53 CREATE Ignore 0
2013-07-18 04:54:15.811 TCP 172.12.332.11:42547 172.12.332.11:42547 -&gt; 172.56.213.80:53 CREATE Ignore 0
</snippet></ROW><ROW><id>18198238</id><snippet>&gt;&gt;&gt; df = pd.read_table('file.csv', sep=' ', header=None, parse_dates=[[0,1]])
&gt;&gt;&gt; print df.to_string()
                         0_1    2                    3                    4   5                 6       7       8  9
0 2013-07-18 04:54:15.871000  UDP  172.12.332.11:20547  172.12.332.11:20547  -&gt;  172.56.213.80:53  CREATE  Ignore  0
1 2013-07-18 04:54:15.841000  UDP  192.33.230.81:37192  192.81.130.82:37192  -&gt;  172.81.123.70:53  CREATE  Ignore  0
2 2013-07-18 04:54:15.831000  TCP  172.12.332.11:42547  172.12.332.11:42547  -&gt;  172.56.213.80:53  CREATE  Ignore  0
3 2013-07-18 04:54:15.821000  UDP  192.33.230.81:37192  192.81.130.82:37192  -&gt;  172.81.123.70:53  CREATE  Ignore  0
4 2013-07-18 04:54:15.811000  TCP  172.12.332.11:42547  172.12.332.11:42547  -&gt;  172.56.213.80:53  CREATE  Ignore  0
</snippet></ROW><ROW><id>18198238</id><snippet>&gt;&gt; df = df[['0_1', 4, 6]]
&gt;&gt; print df.to_string()
                         0_1                    4                 6
0 2013-07-18 04:54:15.871000  172.12.332.11:20547  172.56.213.80:53
1 2013-07-18 04:54:15.841000  192.81.130.82:37192  172.81.123.70:53
2 2013-07-18 04:54:15.831000  172.12.332.11:42547  172.56.213.80:53
3 2013-07-18 04:54:15.821000  192.81.130.82:37192  172.81.123.70:53
4 2013-07-18 04:54:15.811000  172.12.332.11:42547  172.56.213.80:53
</snippet></ROW><ROW><id>18198238</id><snippet>&gt;&gt;&gt; df[4] = df[4].str.split(':').str.get(0)
&gt;&gt;&gt; df[6] = df[6].str.split(':').str.get(0)
&gt;&gt;&gt; print df.to_string()
                         0_1              4              6
0 2013-07-18 04:54:15.871000  172.12.332.11  172.56.213.80
1 2013-07-18 04:54:15.841000  192.81.130.82  172.81.123.70
2 2013-07-18 04:54:15.831000  172.12.332.11  172.56.213.80
3 2013-07-18 04:54:15.821000  192.81.130.82  172.81.123.70
4 2013-07-18 04:54:15.811000  172.12.332.11  172.56.213.80
</snippet></ROW><ROW><id>18198238</id><snippet>172.12.332.11</snippet></ROW><ROW><id>18198238</id><snippet>172.56.213.80</snippet></ROW><ROW><id>18198238</id><snippet>&gt;&gt;&gt; filtered = df[(df[4] == '172.12.332.11') &amp; (df[6] == '172.56.213.80')]
&gt;&gt;&gt; print filtered.to_string()
                         0_1              4              6
0 2013-07-18 04:54:15.871000  172.12.332.11  172.56.213.80
2 2013-07-18 04:54:15.831000  172.12.332.11  172.56.213.80
4 2013-07-18 04:54:15.811000  172.12.332.11  172.56.213.80
</snippet></ROW><ROW><id>18198238</id><snippet>&gt;&gt;&gt; timestamps = filtered['0_1']
&gt;&gt;&gt; diffs = (timestamps.shift() - timestamps).dropna()
&gt;&gt;&gt; print diffs.to_string()
2   00:00:00.040000
4   00:00:00.020000
</snippet></ROW><ROW><id>18198238</id><snippet>&gt;&gt;&gt; diffs.mean() # this is in nanoseconds
30000000.0
&gt;&gt;&gt; diffs.std()
14142135.62373095
</snippet></ROW><ROW><id>18198238</id><snippet>import io
import pandas as pd

def load_dataframe(filename):
    # First you read the data as a regular csv file and extract the _raw column values
    values = pd.read_csv(filename)['_raw'].values
    # Cleanup the values: remove newline character
    values = map(lambda x: x.replace('\n', ' '), values)
    # Add them to a stream
    s = io.StringIO(u'\n'.join(values))
    # And now everithing is the same just read it from the stream
    df = pd.read_table(s, sep='\s+', header=None, parse_dates=[[0,1]])[['0_1',4, 6]]
    df[4] = df[4].str.split(':').str.get(0)
    df[6] = df[6].str.split(':').str.get(0)
    return df

def get_diffs(df, source, destination):
    timestamps = df[(df[4] == source) &amp; (df[6] == destination)]['0_1']
    return (timestamps.shift() - timestamps).dropna()


def main():
    filename = raw_input('Enter filename: ')
    df = load_dataframe(filename)
    while True:
       source = raw_input('Enter source IP: ').strip()
       destination = raw_input('Enter destination IP: ').strip()
       diffs = get_diffs(df, source, destination)
       for i, row in enumerate(diffs):
           print('row %d - row %d = %s' % (i+2, i+1, row.astype('timedelta64[ms]')))
       print('Mean: %s' % diffs.mean())
       yn = raw_input('Again? [y/n]: ').lower().strip()
       if yn != 'y':
            return

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18198238</id><snippet>$ python test.py
Enter filename: Data.csv
Enter source IP: 172.16.122.21
Enter destination IP: 172.55.102.107
Mean: 3333333.33333
Std: 5773502.6919
Again? [y/n]: n
</snippet></ROW><ROW><id>18198267</id><snippet>def main():
    while True:
        # main game code goes here
        if not playAgain():
            break

def playAgain():
    print("Would you like to keep boxing or quit while you are ahead? (y/n)")
    response = input().lower()
    return response.startswith('y')
</snippet></ROW><ROW><id>18198320</id><snippet>PDBIO</snippet></ROW><ROW><id>18198320</id><snippet>Select</snippet></ROW><ROW><id>18198320</id><snippet>accept_chain</snippet></ROW><ROW><id>18198320</id><snippet>accept_residue</snippet></ROW><ROW><id>18198320</id><snippet>from Bio import PDB

class OnlyACAResideus(PDB.Select):
    def accept_residue(self, res):
        return res in residuesACA

io = PDBIO()

# Presumably, you still have the structure, but you can unfold it like so:
struct = PDB.Selection.unfold_entities(residuesACA, 'S')[0]
io.set_structure(struct)
io.save("struct.pdb", select=OnlyACAResidues())
</snippet></ROW><ROW><id>18198383</id><snippet>[1, -2, 1]</snippet></ROW><ROW><id>18198383</id><snippet>hb</snippet></ROW><ROW><id>18198383</id><snippet>hf</snippet></ROW><ROW><id>18198383</id><snippet>--+----+----+---
 x-hb  x   x+hb 
</snippet></ROW><ROW><id>18198383</id><snippet>x</snippet></ROW><ROW><id>18198383</id><snippet>(f(x+hf)*(1+hb/hf) + f(x)(2+hb/hf+hf/hb) + f(x-hb)(1+hf/hb)) / (2*hf*hb)
</snippet></ROW><ROW><id>18198383</id><snippet>def laplacian(x, y):
    x = np.asarray(x)
    y = np.asarray(y)
    hb = x[1:-1] - x[:-2]
    hf = x[2:] - x[1:-1]
    y_hb = y[:-2]
    y_hf = y[2:]
    hb_hf = hb / hf
    hf_hb = hf / hb
    return (y_hf*(1+hb_hf) - y[1:-1]*(2+hb_hf+hf_hb) +
            y_hb*(1+hf_hb)) / 2 / hb / hf

&gt;&gt;&gt; laplacian(range(7), [0,0,0,4,8,8,8])
array([ 0.,  4.,  0., -4.,  0.])
</snippet></ROW><ROW><id>18198507</id><snippet>&gt;&gt;&gt; string = "foo"
&gt;&gt;&gt; res = [bin(ord(i)) for i in string]
['0b1100110', '0b1101111', '0b1101111']
</snippet></ROW><ROW><id>18198507</id><snippet>&gt;&gt;&gt; dec2bin(double('foo'), 8)
01100110
01101111
01101111
</snippet></ROW><ROW><id>18198530</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>18198530</id><snippet>#</snippet></ROW><ROW><id>18198630</id><snippet>errors = open('errors.txt', 'w')
try: 
    execfile("script.py")
except Exception as e:
    errors.write(e)
try: 
    execfile("other.py")
except Exception as e:
     errors.write(e)
errors.close()
</snippet></ROW><ROW><id>18198634</id><snippet>class State(object):
    @property
    def population(self):
        return self._population
    @population.setter
    def population(self,value):
        if value &lt; 0:
            raise ValueError("Population must not be negative")
        else:
            self._population = value

s = State()
print s.population

--output:--
raceback (most recent call last):
  File "1.py", line 13, in &lt;module&gt;
    print s.population
  File "1.py", line 4, in population
    return self._population
AttributeError: 'State' object has no attribute '_population'
</snippet></ROW><ROW><id>18198634</id><snippet>class State(object):
    @property
    def population(self):
        return self._population
    @population.setter
    def population(self,value):
        if value &lt; 0:
            raise ValueError("Population must not be negative")
        else:
            self._population = value

class Town(object):
    def __init__(self, population):
        self._population = population

    @property
    def population(self):
        return self._population

s = State()
s.population = 30
print s.population

t = Town(s.population)
print t.population
</snippet></ROW><ROW><id>18198634</id><snippet>class State(object):
    def __init__(self, name, *towns):
        self.name = name
        self.towns = towns 

    @property
    def population(self):
        total = 0
        for town in self.towns:
            total += town.population
        return total

class Town(object):
    def __init__(self, name, population):
        self._population = population

    @property
    def population(self):
        return self._population

    @population.setter
    def population(self,value):
        if value &lt; 0:
            raise ValueError("Population must not be negative")
        else:
            self._population = value

detroit = Town("Detroit", 40)
lansing = Town("Lansing", 100)
detroit.population -= 10
print detroit.population
print lansing.population

s = State("Michigan", detroit, lansing)
print s.population

--output:--
30
100
130
</snippet></ROW><ROW><id>18198733</id><snippet># this is a comment</snippet></ROW><ROW><id>18198733</id><snippet>"""</snippet></ROW><ROW><id>18198733</id><snippet>'''</snippet></ROW><ROW><id>18198797</id><snippet>import csv

a = {}
with open('/Users/settingj/Desktop/NOxMultiplier.csv') as f:
    reader = csv.reader(f, delimiter='\t')
    for row in reader:
        a[row[0]] = row[1]
print a
</snippet></ROW><ROW><id>18198797</id><snippet>a = []
b = []
with open('/Users/settingj/Desktop/NOxMultiplier.csv') as f:
    reader = csv.reader(f, delimiter='\t')
    for row in reader:
        a.append(row[0])
        b.append(row[1])
print a
print b
</snippet></ROW><ROW><id>18198797</id><snippet>with open('/Users/settingj/Desktop/NOxMultiplier.csv') as f:
    a, b = zip(*csv.reader(f, delimiter='\t'))
print a
print b
</snippet></ROW><ROW><id>18198814</id><snippet>visit = Visit.objects.filter(patient_id=patient.id)
</snippet></ROW><ROW><id>18198814</id><snippet>visit = Visit.objects.filter(patient=patient)
</snippet></ROW><ROW><id>18198814</id><snippet>def visit_profile(request, slug):
    patient = Patients.objects.get(slug=slug)
    visitimm = []
    # Looping over all active visit records of the patient in date order
    for v in patient.visit_set
                    .filter(active=True).order_by('date_of_visit'):
        # Looping over each visit's immunizations
        for i in v.immunizations_set.all():
            duedate = v.date_of_visit + timedelta(days=int(i.interval))
            visitimm.append((i, duedate))
    ...
</snippet></ROW><ROW><id>18198979</id><snippet>initdb</snippet></ROW><ROW><id>18198979</id><snippet>-D</snippet></ROW><ROW><id>18198979</id><snippet>createdb</snippet></ROW><ROW><id>18198979</id><snippet>CREATE DATABASE</snippet></ROW><ROW><id>18198979</id><snippet>template0</snippet></ROW><ROW><id>18198979</id><snippet>template1</snippet></ROW><ROW><id>18198979</id><snippet>postgres</snippet></ROW><ROW><id>18198994</id><snippet>hstack</snippet></ROW><ROW><id>18198994</id><snippet>&gt;&gt;&gt; dct
defaultdict(&lt;built-in function array&gt;, {0: array([[0, 1, 2, 0, 2, 2, 0],
   [0, 0, 0, 2, 0, 0, 2]]), 1: array([[0, 1, 2, 0, 0],
   [0, 0, 1, 2, 2]]), 2: array([[1, 1, 0, 0],
   [0, 1, 1, 2]])})
&gt;&gt;&gt; np.hstack(dct[k] for k in sorted(dct))
array([[0, 1, 2, 0, 2, 2, 0, 0, 1, 2, 0, 0, 1, 1, 0, 0],
       [0, 0, 0, 2, 0, 0, 2, 0, 0, 1, 2, 2, 0, 1, 1, 2]])
</snippet></ROW><ROW><id>18198994</id><snippet>OrderedDict</snippet></ROW><ROW><id>18198994</id><snippet>defaultdict</snippet></ROW><ROW><id>18198994</id><snippet>dct.values()</snippet></ROW><ROW><id>18199337</id><snippet>import pandas as pd
import numpy as np
df = pd.DataFrame(np.arange(1,7).reshape(2,3),
                  columns = list('abc'), index=pd.Series([2,5], name='b'))
print(df)
#    a  b  c
# b         
# 2  1  2  3
# 5  4  5  6
print(np.where(df.index==5)[0])
# [1]
print(np.where(df['c']==6)[0])
# [1]
</snippet></ROW><ROW><id>18199410</id><snippet>import urllib.error
import urllib.request
import time

imageURL = 'http://YOUR-WEB-SITE.com/imageName.jpg'

directoryForImages = '/where/you/want/to/store/image/'
imageBaseName = 'basename'
extension = '.jpg'

maxLoops = 100

for imageNumber in range(0, maxLoops):
    try:
        # Open a file object for the webpage where you will get the image
        f = urllib.request.urlopen(imageURL)
        # Open the local file where you will store the image
        imageF = open('{0}{1}{2}{3}'.format(directoryForImages, imageBaseName, imageNumber, extension), 'wb')
        # Write the image to the local file
        imageF.write(f.read())

        # Clean up
        imageF.close()
        f.close()
    except urllib.error.HTTPError:   # The 'except' block executes if an HTTPError is thrown by the try block, then the program continues as usual.
        print "Image fetch failed.  Waiting another 15 seconds..."

    time.sleep(15)
</snippet></ROW><ROW><id>18199562</id><snippet>x = x if c else y</snippet></ROW><ROW><id>18199562</id><snippet>x = x if x else y</snippet></ROW><ROW><id>18199562</id><snippet>x = x or y
</snippet></ROW><ROW><id>18199562</id><snippet>x or y</snippet></ROW><ROW><id>18199562</id><snippet>x if x else y</snippet></ROW><ROW><id>18199562</id><snippet>y if not x else x</snippet></ROW><ROW><id>18199562</id><snippet>x or y</snippet></ROW><ROW><id>18199562</id><snippet>x or y</snippet></ROW><ROW><id>18199603</id><snippet>call_function</snippet></ROW><ROW><id>18199603</id><snippet>if (PyFunction_Check(func))
    x = fast_function(func, pp_stack, n, na, nk);
else
    x = do_call(func, pp_stack, na, nk);
</snippet></ROW><ROW><id>18199603</id><snippet>__call__</snippet></ROW><ROW><id>18199714</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from matplotlib.colors import LogNorm
import matplotlib.gridspec as gridspec

delta = 0.025

x = y = np.arange(0, 3.01, delta)
X, Y = np.meshgrid(x, y)
Z1 = plt.mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)
Z2 = plt.mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1)
Z = 1e6 * (Z1 * Z2)

fig=plt.figure()

#
# define 2 subplots, using gridspec to control the 
# width ratios:
#
# note: you have to import matplotlib.gridspec for this
#
gs = gridspec.GridSpec(1, 2,width_ratios=[15,1])

# the 1st subplot
ax1 = plt.subplot(gs[0])

lvls = np.logspace(0,4,20)

CF = ax1.contourf(X,Y,Z,
                  norm = LogNorm(),
                  levels = lvls
                 )
CS = ax1.contour(X,Y,Z,
                 norm = LogNorm(),
                 colors = 'k',
                 levels = lvls
                )

#
# the pseudo-colorbar
#

# the 2nd subplot
ax2 = plt.subplot(gs[1])        

#
# new levels!
#
# np.logspace gives you logarithmically spaced levels - 
# this, however, is not what you want in your colorbar
#
# you want equally spaced labels for each exponential group:
#
levls = np.linspace(1,10,10)
levls = np.concatenate((levls[:-1],np.linspace(10,100,10)))
levls = np.concatenate((levls[:-1],np.linspace(100,1000,10)))
levls = np.concatenate((levls[:-1],np.linspace(1000,10000,10)))

#
# simple x,y setup for a contourf plot to serve as colorbar
#
XC = [np.zeros(len(levls)), np.ones(len(levls))]
YC = [levls, levls]
CM = ax2.contourf(XC,YC,YC, levels=levls, norm = LogNorm())
# log y-scale
ax2.set_yscale('log')  
# y-labels on the right
ax2.yaxis.tick_right()
# no x-ticks
ax2.set_xticks([])

plt.show()
</snippet></ROW><ROW><id>18199714</id><snippet>spacing='proportional'</snippet></ROW><ROW><id>18199714</id><snippet>colorbar</snippet></ROW><ROW><id>18199714</id><snippet>lvls = np.logspace(0,4,20)  
</snippet></ROW><ROW><id>18199714</id><snippet>lvls = np.linspace(1,10,5)
lvls = np.concatenate((lvls[:-1],np.linspace(10,100,5)))
lvls = np.concatenate((lvls[:-1],np.linspace(100,1000,5)))
lvls = np.concatenate((lvls[:-1],np.linspace(1000,10000,5)))
</snippet></ROW><ROW><id>18199714</id><snippet>cbar = plt.colorbar(CF, ticks=lvls, format='%.4f')
</snippet></ROW><ROW><id>18199714</id><snippet>cbar = plt.colorbar(CF, ticks=lvls, format='%.2f', spacing='proportional')
</snippet></ROW><ROW><id>18199714</id><snippet>format</snippet></ROW><ROW><id>18199714</id><snippet>levels = []
LAST_EXP = 4
N_LEVELS = 5
for E in range(0,LAST_EXP):
    levels = np.concatenate((levels[:-1],np.linspace(10**E,10**(E+1),N_LEVELS)))
</snippet></ROW><ROW><id>18199727</id><snippet>.pyc</snippet></ROW><ROW><id>18199727</id><snippet>compileall</snippet></ROW><ROW><id>18199727</id><snippet>.pyc</snippet></ROW><ROW><id>18199727</id><snippet>.py</snippet></ROW><ROW><id>18199727</id><snippet>import</snippet></ROW><ROW><id>18199727</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>18199727</id><snippet>py2app</snippet></ROW><ROW><id>18199727</id><snippet>pythonXY.zip</snippet></ROW><ROW><id>18199757</id><snippet>new_list = filter(None, old_list)
</snippet></ROW><ROW><id>18199757</id><snippet>lambda x: x</snippet></ROW><ROW><id>18199757</id><snippet>a_string = "".join(list_of_strings)
</snippet></ROW><ROW><id>18199757</id><snippet>new_list = reduce(lambda x, y: x+y, old_list)
</snippet></ROW><ROW><id>18199757</id><snippet>filter</snippet></ROW><ROW><id>18199757</id><snippet>reduce</snippet></ROW><ROW><id>18199843</id><snippet>updatedDate</snippet></ROW><ROW><id>18199843</id><snippet>Series</snippet></ROW><ROW><id>18199843</id><snippet>import datetime
series = Series(updatedDate = datetime.datetime.now())
series.put()
</snippet></ROW><ROW><id>18199843</id><snippet>_pre_put_hook</snippet></ROW><ROW><id>18199843</id><snippet>time</snippet></ROW><ROW><id>18199843</id><snippet>ComputedProperty</snippet></ROW><ROW><id>18199884</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>18199978</id><snippet>shoestring.index(n)</snippet></ROW><ROW><id>18199978</id><snippet>n</snippet></ROW><ROW><id>18199978</id><snippet>' '</snippet></ROW><ROW><id>18199978</id><snippet>enumerate</snippet></ROW><ROW><id>18199978</id><snippet>for i, n in enumerate(shoestring):
    if n.isalpha():
        continue
    else:
        print n, i
</snippet></ROW><ROW><id>18199978</id><snippet>if</snippet></ROW><ROW><id>18199978</id><snippet>continue</snippet></ROW><ROW><id>18199978</id><snippet>for i, n in enumerate(shoestring):
    if not n.isalpha():
        print n, i
</snippet></ROW><ROW><id>18199978</id><snippet>filter</snippet></ROW><ROW><id>18199978</id><snippet>nonalphas = ((n, i) for i, n in enumerate(shoestring) if not n.isalpha())
print '\n'.join('{} {}'.format(n, i) for n, i in nonalphas)
</snippet></ROW><ROW><id>18200092</id><snippet>Objects/longobject.c</snippet></ROW><ROW><id>18200092</id><snippet>Include/longintrepr.h</snippet></ROW><ROW><id>18200092</id><snippet>% 2</snippet></ROW><ROW><id>18200092</id><snippet>&amp; 1</snippet></ROW><ROW><id>18200108</id><snippet>&gt;&gt;&gt; np.zeros((3,3)).ravel()
array([ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.])
</snippet></ROW><ROW><id>18200108</id><snippet>ravel</snippet></ROW><ROW><id>18200108</id><snippet>flatten</snippet></ROW><ROW><id>18200108</id><snippet>ravel</snippet></ROW><ROW><id>18200108</id><snippet>flatten</snippet></ROW><ROW><id>18200108</id><snippet>tt = t.reshape(-1)
</snippet></ROW><ROW><id>18200207</id><snippet>child_lines, parent_lines, child_parents = {}. {}. {}
last_parent_line = None
with open(self.file) as f:
    for i, line in enumerate(f):
        line = line.strip(' \t\n\r')
        marker, value = line[0], line[1:]
        if marker == '#':
            parent_lines[value] = i
            last_parent_line = i
        elif marker == '@':
            child_lines[value] = i
            child_parents[i] = last_parent_line
</snippet></ROW><ROW><id>18200242</id><snippet>x0</snippet></ROW><ROW><id>18200242</id><snippet>x1</snippet></ROW><ROW><id>18200242</id><snippet>cell</snippet></ROW><ROW><id>18200242</id><snippet>net</snippet></ROW><ROW><id>18200242</id><snippet>X0[net][cell]</snippet></ROW><ROW><id>18200242</id><snippet>L0 = {}
L1 = {}
for net, cells in FP['NetC'].items(): # use .iteritems() if you're using Python 2
    L0[net] = {}
    L1[net] = {}
    for cell in cells:
        L0[net][cell] = FP['CellD_NM'][cell]['X0']
        L1[net][cell] = FP['CellD_NM'][cell]['X1']
</snippet></ROW><ROW><id>18200603</id><snippet>def runningMean(seq, n=0, total=0):
    if not seq:
        return []
    total = total+seq[-1]
    return runningMean(seq[:-1], n=n+1, total=total) + [total/float(n+1)]
</snippet></ROW><ROW><id>18200603</id><snippet>print(runningMean([123,678,234,256,789]))
</snippet></ROW><ROW><id>18200603</id><snippet>[416.0, 489.25, 426.3333333333333, 522.5, 789.0]
</snippet></ROW><ROW><id>18200849</id><snippet>int_field = forms.TypedChoiceField(choices=SOME_CHOICES, coerce=int)
</snippet></ROW><ROW><id>18201156</id><snippet>print</snippet></ROW><ROW><id>18201156</id><snippet>Motorola</snippet></ROW><ROW><id>18201156</id><snippet>self</snippet></ROW><ROW><id>18201156</id><snippet>self.output</snippet></ROW><ROW><id>18201156</id><snippet>self.output</snippet></ROW><ROW><id>18201156</id><snippet>Motorola</snippet></ROW><ROW><id>18201156</id><snippet>def outputter(msg):
    self.output.insert(END, msg + "\n")
self.f = motorola.Motorola(self.ip, self.passw, outputter)
</snippet></ROW><ROW><id>18201156</id><snippet>print</snippet></ROW><ROW><id>18201156</id><snippet>def __init__(self, ip, passw, outputter):
    self.outputter = outputter
    # ...
    self.outputter("connect on the modem")
</snippet></ROW><ROW><id>18201156</id><snippet>print</snippet></ROW><ROW><id>18201156</id><snippet>outputter</snippet></ROW><ROW><id>18201156</id><snippet>print</snippet></ROW><ROW><id>18201156</id><snippet>def outputter(*msgs, **kwargs):
    sep = kwargs.get("sep", " ")
    end = kwargs.get("end", "\n")
    self.output.insert(END, sep.join(msgs) + end)
</snippet></ROW><ROW><id>18201156</id><snippet>print</snippet></ROW><ROW><id>18201156</id><snippet>outputter</snippet></ROW><ROW><id>18201156</id><snippet>str.format</snippet></ROW><ROW><id>18201156</id><snippet>print data,
</snippet></ROW><ROW><id>18201156</id><snippet>self.outputter(data, end='')
</snippet></ROW><ROW><id>18201156</id><snippet>print</snippet></ROW><ROW><id>18201203</id><snippet>dict.get</snippet></ROW><ROW><id>18201203</id><snippet>&gt;&gt;&gt; print dict.get.__doc__
D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None.
</snippet></ROW><ROW><id>18201203</id><snippet>character[characters] = character.get(characters, 0) + 1</snippet></ROW><ROW><id>18201203</id><snippet>if characters in character:     #if key is present in dict
   character[characters] += 1
else:
   character[characters] = 0   #if key is not present in dict, then set the key first
   character[characters] += 1
</snippet></ROW><ROW><id>18201203</id><snippet>dict.get</snippet></ROW><ROW><id>18201203</id><snippet>0</snippet></ROW><ROW><id>18201203</id><snippet>collections.Counter</snippet></ROW><ROW><id>18201353</id><snippet>* * * * * /usr/bin/curl --silent --compressed http://path.to/the/url
</snippet></ROW><ROW><id>18201353</id><snippet>import requests

from celery.task.schedules import crontab
from celery.decorators import periodic_task

@periodic_task(run_every=crontab(hour="*", minute="*", day_of_week="*"))
def test():
    response = requests.get('https://path.to/the/url/')
    process(response)
</snippet></ROW><ROW><id>18201442</id><snippet>for _ in range(num_dots):

    dots_pos_x = randint(-max_coord, max_coord)
    dots_pos_y = randint(-max_coord, max_coord)

    penup()
    goto(dots_pos_x, dots_pos_y)
    if -200 &lt;= dots_pos_x &lt;= 200 and -200 &lt;= dots_pos_y &lt;= 200:
        pencolor((255, 0, 0))
    else:
        pencolor((0, 0, 0))
    dot(7)
    pendown()
</snippet></ROW><ROW><id>18201530</id><snippet>matching = (l &gt; float(b * 1.1) for l, b in zip(L, B))
</snippet></ROW><ROW><id>18201530</id><snippet>for m, l in zip(matching, L):
    if m:
        print l
</snippet></ROW><ROW><id>18201530</id><snippet>matching = (l for l, b in zip(L, B) if l &gt; float(b * 1.1))
</snippet></ROW><ROW><id>18201530</id><snippet>matching = [l for l, b in zip(L, B) if l &gt; float(b * 1.1)]
</snippet></ROW><ROW><id>18201716</id><snippet>itertools.combinations</snippet></ROW><ROW><id>18201716</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; L=[1,2,3,4]
&gt;&gt;&gt; [",".join(map(str,comb)) for comb in combinations(L, 3)]
['1,2,3', '1,2,4', '1,3,4', '2,3,4']
</snippet></ROW><ROW><id>18201784</id><snippet>common</snippet></ROW><ROW><id>18201784</id><snippet>merger</snippet></ROW><ROW><id>18201784</id><snippet>projectroot
  |- script1.py # launcher scripts, see below for example code
  |- script2.py
  |- script3.py
  |
  |- common
  |    |- __init__.py
  |    |- merger.py # from other packages, use from ..common import merger to get this
  |
  |- subproject1
  |    |- __init__.py # this can be empty
  |    |- script1_main.py
  |
  |- subproject2
  |    |- __init__.py
  |    |- script2_main.py
  |    |- script2_matcher.py
  |
  |- subproject3
       |- __init__.py
       |- script3_main.py
       |- script3_converter.py
       |- script3_matcher.py
</snippet></ROW><ROW><id>18201784</id><snippet>from subproject1 import script1_main

if __name__ == "__main__":
    script1_main.main()
</snippet></ROW><ROW><id>18201784</id><snippet>main</snippet></ROW><ROW><id>18201784</id><snippet>.pyc</snippet></ROW><ROW><id>18201784</id><snippet>_</snippet></ROW><ROW><id>18201784</id><snippet>.</snippet></ROW><ROW><id>18201784</id><snippet>.</snippet></ROW><ROW><id>18201922</id><snippet>urlencode</snippet></ROW><ROW><id>18201922</id><snippet>print</snippet></ROW><ROW><id>18201922</id><snippet>forms</snippet></ROW><ROW><id>18201922</id><snippet>selected_items[]</snippet></ROW><ROW><id>18201922</id><snippet>doseq=True</snippet></ROW><ROW><id>18201922</id><snippet>forms = {"_ref_ck": ref,
     "type": "create",
     "selected_items[]": sel_itms[:10]
     }
 data = urllib.urlencode(forms, doseq=True)
</snippet></ROW><ROW><id>18201922</id><snippet>forms = (("_ref_ck", ref),
         ("type", "create"),
         ("selected_items[]", sel_itms[0]),
         ("selected_items[]", sel_itms[1]),
         # ...
         )
data = urllib.urlencode(forms)
</snippet></ROW><ROW><id>18201922</id><snippet>Mapping</snippet></ROW><ROW><id>18201922</id><snippet>dict</snippet></ROW><ROW><id>18201922</id><snippet>Mapping</snippet></ROW><ROW><id>18201979</id><snippet>addchar</snippet></ROW><ROW><id>18201979</id><snippet>removechar</snippet></ROW><ROW><id>18201979</id><snippet>editchar</snippet></ROW><ROW><id>18201979</id><snippet>from Tkinter import *  # AFAIK Tkinter is always capitalized
#import os
#import easygui as eg

class App:
    characterPrefix = "character_"
    def __init__(self, master):
        self.master = master  # You'll want to keep a reference to your root window
        frame = Frame(master)
        frame.pack()

        # character box
        Label(frame, text = "Characters Editor").grid(row = 0, column = 0, rowspan = 1, columnspan = 2)
        self.charbox = Listbox(frame)  # You'll want to keep this reference as an attribute of the class too.
        for chars in []:
            self.charbox.insert(END, chars)
        self.charbox.grid(row = 1, column = 0, rowspan = 5)
        charadd = Button(frame, text = "   Add   ", command = self.addchar).grid(row = 1, column = 1)
        charremove = Button(frame, text = "Remove", command = self.removechar).grid(row = 2, column = 1)
        charedit = Button(frame, text = "    Edit    ", command = self.editchar).grid(row = 3, column = 1)

    def addchar(self, initialCharacter='', initialInfo=''):
        t = Toplevel(root)  # Creates a new window
        t.title("Add character")
        characterLabel = Label(t, text="Character name:")
        characterEntry = Entry(t)
        characterEntry.insert(0, initialCharacter)
        infoLabel = Label(t, text="Info:")
        infoEntry = Entry(t)
        infoEntry.insert(0, initialInfo)
        def create():
            characterName = characterEntry.get()
            self.charbox.insert(END, characterName)
            with open(app.characterPrefix + characterName, 'w') as f:
                    f.write(infoEntry.get())
            t.destroy()
        createButton = Button(t, text="Create", command=create)
        cancelButton = Button(t, text="Cancel", command=t.destroy)

        characterLabel.grid(row=0, column=0)
        infoLabel.grid(row=0, column=1)
        characterEntry.grid(row=1, column=0)
        infoEntry.grid(row=1, column=1)
        createButton.grid(row=2, column=0)
        cancelButton.grid(row=2, column=1)

    def removechar(self):
        for index in self.charbox.curselection():
            item = self.charbox.get(int(index))
            self.charbox.delete(int(index))
            try:
                os.remove(characterPrefix + item)
            except IOError:
                print "Could not delete file", characterPrefix + item
    def editchar(self):
        # You can implement this one ;)

root = Tk()
root.wm_title("IA Development Kit")
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>18202458</id><snippet>from operator import attrgetter
for i in sorted(match, key=attrgetter('w')):
</snippet></ROW><ROW><id>18202458</id><snippet>for i in sorted(match, key=attrgetter('w'), reverse=True):
</snippet></ROW><ROW><id>18202458</id><snippet>for i in sorted(x.w for x in match):
</snippet></ROW><ROW><id>18202705</id><snippet>bytes</snippet></ROW><ROW><id>18202705</id><snippet>f.write(bytes([x]))
</snippet></ROW><ROW><id>18202705</id><snippet>f.write(bytes([65, 66, 67]))
</snippet></ROW><ROW><id>18202709</id><snippet>class DateDialog(QDialog):
    def __init__(self, parent = None):
        super(DateDialog, self).__init__(parent)

        layout = QVBoxLayout(self)

        # nice widget for editing the date
        self.datetime = QDateTimeEdit(self)
        self.datetime.setCalendarPopup(True)
        self.datetime.setDateTime(QDateTime.currentDateTime())
        layout.addWidget(self.datetime)

        # OK and Cancel buttons
        self.buttons = QDialogButtonBox(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel,
            Qt.Horizontal, self)
        self.layout.addWidget(self.buttons)

    # get current date and time from the dialog
    def dateTime(self):
        return self.datetime.dateTime()

    # static method to create the dialog and return (date, time, accepted)
    @staticmethod
    def getDateTime(parent = None):
        dialog = DateDialog(parent)
        result = dialog.exec_()
        date = dialog.dateTime()
        return (date.date(), date.time(), result == QDialog.Accepted)
</snippet></ROW><ROW><id>18202709</id><snippet>date, time, ok = DateDialog.getDateTime()
</snippet></ROW><ROW><id>18202741</id><snippet>exclude()</snippet></ROW><ROW><id>18202741</id><snippet>get()</snippet></ROW><ROW><id>18202741</id><snippet>MyClass.objects.exclude(status='unknown').get(description='hi')
</snippet></ROW><ROW><id>18202741</id><snippet>.get</snippet></ROW><ROW><id>18202741</id><snippet>Q</snippet></ROW><ROW><id>18202741</id><snippet>.get</snippet></ROW><ROW><id>18202741</id><snippet>MyClass.objects.get(Q(description='hi') &amp; ~Q(status='unknown'))
</snippet></ROW><ROW><id>18202741</id><snippet>.exclude</snippet></ROW><ROW><id>18202741</id><snippet>.exclude</snippet></ROW><ROW><id>18202741</id><snippet>.exclude</snippet></ROW><ROW><id>18202741</id><snippet>.filter</snippet></ROW><ROW><id>18202741</id><snippet>MyClass.objects.filter(status='unknown').get(description='hi')
</snippet></ROW><ROW><id>18202741</id><snippet>MyClass.objects.get(status='unknown', description='hi')
</snippet></ROW><ROW><id>18203076</id><snippet>find()</snippet></ROW><ROW><id>18203076</id><snippet>'kontakt' in link.url</snippet></ROW><ROW><id>18203076</id><snippet>for link in br.links(text_regex=re.compile('^((?!IMG).)*$')):

    if link.url.find('kontakt')&gt;=0: ...do stuff on urls containing contact
    # or:
    if link.url.find('kontakt')&lt;0: continue # skip urls without
</snippet></ROW><ROW><id>18203076</id><snippet>find()</snippet></ROW><ROW><id>18203076</id><snippet>in</snippet></ROW><ROW><id>18203076</id><snippet>find()</snippet></ROW><ROW><id>18203076</id><snippet>link.url.split('/')[-1]</snippet></ROW><ROW><id>18203076</id><snippet>link.url.rsplit('/',2)[1]</snippet></ROW><ROW><id>18203677</id><snippet>dict.popitem()</snippet></ROW><ROW><id>18203677</id><snippet>dict.iteritems()</snippet></ROW><ROW><id>18203677</id><snippet>while</snippet></ROW><ROW><id>18203677</id><snippet>len()</snippet></ROW><ROW><id>18203677</id><snippet>while d:
    key, value = d.popitem()
    print key, value
</snippet></ROW><ROW><id>18203677</id><snippet>reversed()</snippet></ROW><ROW><id>18203677</id><snippet>for key, item in reversed(d.items()):
    print key, value
</snippet></ROW><ROW><id>18203677</id><snippet>collections.deque()</snippet></ROW><ROW><id>18203677</id><snippet>from collections import deque

d = deque(["a0.csf", "b1.csf", "c2.csf"])

while d:
    item = d.pop()
</snippet></ROW><ROW><id>18203677</id><snippet>deque.reverse()</snippet></ROW><ROW><id>18203806</id><snippet>content_type = u"application/json"
</snippet></ROW><ROW><id>18203806</id><snippet>DetailView</snippet></ROW><ROW><id>18203806</id><snippet>"application/json"</snippet></ROW><ROW><id>18203806</id><snippet>content_type = None</snippet></ROW><ROW><id>18203806</id><snippet>get_content_type</snippet></ROW><ROW><id>18203806</id><snippet>render_to_response</snippet></ROW><ROW><id>18203806</id><snippet>PostDetail</snippet></ROW><ROW><id>18203806</id><snippet>class PostDetail(JSONResponseMixin, DetailView):
    model = Post
    template_name = 'post_detail_page.html'
    content_type = None

    def render_to_response(self, **kwargs):
        if self.request.is_ajax():
            # Don't really know if objects will take a list, a queryset, any iterable or even a single object
            return self.render_json_object_response(objects=[self.object]):
        else:
            return super(PostDetail, self).render_to_response(**kwargs)

    def get_content_type(self):
        if self.request.is_ajax():
            return u'application/json'
        else:
            return None
</snippet></ROW><ROW><id>18204073</id><snippet>libgmp</snippet></ROW><ROW><id>18204607</id><snippet>try:</snippet></ROW><ROW><id>18204607</id><snippet>except:</snippet></ROW><ROW><id>18204607</id><snippet>Try</snippet></ROW><ROW><id>18204710</id><snippet>for</snippet></ROW><ROW><id>18204710</id><snippet>if</snippet></ROW><ROW><id>18204710</id><snippet>elif</snippet></ROW><ROW><id>18204710</id><snippet>"impressum"</snippet></ROW><ROW><id>18204710</id><snippet>"kontakt"</snippet></ROW><ROW><id>18204710</id><snippet>"impressum"</snippet></ROW><ROW><id>18204710</id><snippet>"impressum"</snippet></ROW><ROW><id>18204710</id><snippet>urls = set()
contact_keys = ["impressum", "kontakt"]
found_contact_urls = {}
for link in ...:
    new_url = ...
    urls.add(new_url)
    for key in contact_keys:
        if key in new_url:
            found_contact_urls[key] = new_url
            break
for key in contact_keys:
    if key in found_contact_urls:
        print found_contact_urls[key]
        break
</snippet></ROW><ROW><id>18204710</id><snippet>contact_keys</snippet></ROW><ROW><id>18204835</id><snippet>Database</snippet></ROW><ROW><id>18204835</id><snippet>import Database
print Database.__file__
</snippet></ROW><ROW><id>18204835</id><snippet>from Database import Database</snippet></ROW><ROW><id>18204938</id><snippet>goog.index</snippet></ROW><ROW><id>18204938</id><snippet>goog.reset_index()['Date']
</snippet></ROW><ROW><id>18205006</id><snippet>import parallelTestModule

if __name__ == '__main__':    
    extractor = parallelTestModule.ParallelExtractor()
    extractor.runInParallel(numProcesses=2, numThreads=4)
</snippet></ROW><ROW><id>18205063</id><snippet>TestX().bip = 'bap'
</snippet></ROW><ROW><id>18205063</id><snippet>try:
    TestX().bip = 'bap'
except Exception as ex:
    print ex
</snippet></ROW><ROW><id>18205063</id><snippet>Test6</snippet></ROW><ROW><id>18205063</id><snippet>hi6</snippet></ROW><ROW><id>18205063</id><snippet>'blub'</snippet></ROW><ROW><id>18205063</id><snippet>print ex</snippet></ROW><ROW><id>18205063</id><snippet>pdb</snippet></ROW><ROW><id>18205063</id><snippet>(Pdb) ex
KeyError('blub',)
(Pdb) print ex
'blub'
</snippet></ROW><ROW><id>18205063</id><snippet>print ex</snippet></ROW><ROW><id>18205063</id><snippet>KeyError: blub</snippet></ROW><ROW><id>18205063</id><snippet>'blub'</snippet></ROW><ROW><id>18205063</id><snippet>Test6</snippet></ROW><ROW><id>18205063</id><snippet>def __setattr__(self, name, value):
    self.__dict__[name] = value
    print self.__dict__[name]
</snippet></ROW><ROW><id>18205063</id><snippet>self.__dict__</snippet></ROW><ROW><id>18205063</id><snippet>__dict__</snippet></ROW><ROW><id>18205063</id><snippet>__setattr__</snippet></ROW><ROW><id>18205063</id><snippet>def __setattr__(self, name, value):
    super(Test6, self).__setattr__(name, value)
    print getattr(self, name)
</snippet></ROW><ROW><id>18205063</id><snippet>getattr</snippet></ROW><ROW><id>18205063</id><snippet>__dict__</snippet></ROW><ROW><id>18205063</id><snippet>__dict__</snippet></ROW><ROW><id>18205063</id><snippet>self.__getattr__</snippet></ROW><ROW><id>18205063</id><snippet>self.__getattribute__</snippet></ROW><ROW><id>18205420</id><snippet>'w'</snippet></ROW><ROW><id>18205420</id><snippet>with open('blank.txt', 'w') as f:
   for num in range(99, 1000000001, 99):
       #do something here.
</snippet></ROW><ROW><id>18205420</id><snippet>with</snippet></ROW><ROW><id>18205614</id><snippet>webapp2.Route(r'/products/&lt;product_id:\d+&gt;', handler=ProductHandler, name='product'),
</snippet></ROW><ROW><id>18205614</id><snippet>d+</snippet></ROW><ROW><id>18205614</id><snippet>product_id</snippet></ROW><ROW><id>18205614</id><snippet>regex mapping</snippet></ROW><ROW><id>18205614</id><snippet>GET</snippet></ROW><ROW><id>18205614</id><snippet>('/page2/.*', page2)
</snippet></ROW><ROW><id>18205614</id><snippet>/page2/?param=val&amp;param=val&amp;...</snippet></ROW><ROW><id>18205683</id><snippet>def complete( base ):
   matches = [ "'"+os.path.splitext(x)[0]+"'" for x in os.listdir('notes') ]
   vim.command( "let g:result = [" + ",".join(matches) + "]" )


...

let g:result = []
python complete_nvim(vim.eval('a:findstart'),vim.eval('a:base'))
return g:result
</snippet></ROW><ROW><id>18205683</id><snippet>vim.eval</snippet></ROW><ROW><id>18205735</id><snippet>pop</snippet></ROW><ROW><id>18205735</id><snippet>ordr</snippet></ROW><ROW><id>18205735</id><snippet>hap</snippet></ROW><ROW><id>18205735</id><snippet>self.</snippet></ROW><ROW><id>18205735</id><snippet>if self.sort == 1:
    print "A hurricane has blasted through a major city."
    print "-2 Population."
    self.pop -= 2

elif self.sort == 2:
    print "A parade for your nation has spontaneously"
    print "occured in the Capital. +2 Order. +1 Happiness"
    self.ordr += 2
    self.hap +=1

elif self.sort == 3:
    print "A major civil rights movement has succeded in"
    print "getting citizens more rights. -2 Order. +2 Happiness"
    ordr -= 2 
    hap += 2

elif self.sort == 4:
    print "Refugees from a warstricken country have flooded into"
    print "your land. +2 Population"
    self.pop += 2

elif self.sort == 5:
    print "A new surveillance program has been put into place."
    print "+3 Order"
    self.ordr += 3
</snippet></ROW><ROW><id>18206192</id><snippet>Date</snippet></ROW><ROW><id>18206192</id><snippet>cx_Oracle</snippet></ROW><ROW><id>18206192</id><snippet>datetime.datetime</snippet></ROW><ROW><id>18206192</id><snippet>datetime</snippet></ROW><ROW><id>18206467</id><snippet>a =       53150220288
while a &lt;= 1000000000:
</snippet></ROW><ROW><id>18206704</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>18206704</id><snippet>set</snippet></ROW><ROW><id>18206704</id><snippet>import csv
from collections import Counter, defaultdict

FOSSIL = 0   # fossil name is the first column (?)
FORM   = 13  # formation is the 14th column

with open("BivalviaGRDWIS.csv", "rb") as inputfile:
    data = csv.reader(inputfile)
    next(data)  # skip header

    seen = defaultdict(set)

    counts = Counter(
        row[FORM]
        for row in data
        if row[FORM] and row[FORM] not in seen[row[FOSSIL]] and not seen[row[FOSSIL]].add(row[FORM])
    )

print counts
</snippet></ROW><ROW><id>18206704</id><snippet>Counter()</snippet></ROW><ROW><id>18206806</id><snippet>comma_separated = ','.join(some_list)
return redirect(url_for('show_list', some_list=comma_separated))
# returns something like 'http://localhost/show_list?some_list=a,b,c,d'
</snippet></ROW><ROW><id>18206806</id><snippet>{% for item in request.args.get('some_list', '').split(',') %}
    {{ item }}
{% endfor %}
</snippet></ROW><ROW><id>18206806</id><snippet>session['my_list'] = some_list
return redirect(url_for('show_list'))
</snippet></ROW><ROW><id>18206806</id><snippet>{% for item in session.pop('my_list', []) %}
    {{ item }}
{% endfor %}
</snippet></ROW><ROW><id>18207215</id><snippet>inputList = [[1, "Data x"], [2, "Data z"], [3, "Data x"]]

from operator import itemgetter
from collections import defaultdict

dd = defaultdict(list)
for i, v in enumerate(inputList):
    dd[v[1]].append(i)

dupes = [itemgetter(*v)(inputList) for v in dd.itervalues() if len(v) &gt; 1]
# [([1, 'Data x'], [3, 'Data x'])]
</snippet></ROW><ROW><id>18207284</id><snippet>sqlite</snippet></ROW><ROW><id>18207284</id><snippet>insert</snippet></ROW><ROW><id>18207468</id><snippet>cx_Oracle</snippet></ROW><ROW><id>18207468</id><snippet>datetime.datetime()</snippet></ROW><ROW><id>18207468</id><snippet>datetime.strftime()</snippet></ROW><ROW><id>18207468</id><snippet>dtobject.strftime('%d-%b-%Y')
</snippet></ROW><ROW><id>18207468</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; dtobject = datetime.datetime(2999, 12, 31, 0, 0)
&gt;&gt;&gt; dtobject.strftime('%d-%b-%Y')
'31-Dec-2999'
</snippet></ROW><ROW><id>18207468</id><snippet>99</snippet></ROW><ROW><id>18207468</id><snippet>2999</snippet></ROW><ROW><id>18207468</id><snippet>if dtobject.year &lt; 100:
    dtobject = dtobject.replace(year=dtobject.year + 2900)
</snippet></ROW><ROW><id>18207537</id><snippet>np.array(array, copy=False, subok=True, ndmin=N)</snippet></ROW><ROW><id>18207537</id><snippet>np.atleast_1d</snippet></ROW><ROW><id>18207652</id><snippet>lib.py</snippet></ROW><ROW><id>18207652</id><snippet>main.py</snippet></ROW><ROW><id>18207652</id><snippet>lib.py</snippet></ROW><ROW><id>18207652</id><snippet>main.py</snippet></ROW><ROW><id>18207652</id><snippet>lib.py</snippet></ROW><ROW><id>18207652</id><snippet>app</snippet></ROW><ROW><id>18207652</id><snippet>main.py</snippet></ROW><ROW><id>18207652</id><snippet>lib.py</snippet></ROW><ROW><id>18207652</id><snippet>app</snippet></ROW><ROW><id>18207652</id><snippet>-files</snippet></ROW><ROW><id>18207652</id><snippet>hadoop jar /usr/lib/hadoop-mapreduce/hadoop-streaming.jar -files app 
       -mapper "app/main.py map" -reducer "app/main.py reduce" 
       -input input -output output 
</snippet></ROW><ROW><id>18207716</id><snippet>\u002d</snippet></ROW><ROW><id>18207716</id><snippet>&gt;&gt;&gt; json.loads(string1.replace(r'\u002d', '-'))
{u'content': {u'message_exchanged': {u'messagesOnlyToViewee': True, u'messagesOnlyToViewer': True}, u'view_tracking': {}, u'Certifications': {u'certsMpr': {}, u'empty': {}}, u'BasicInfo': {u'upsell': {u'deferImg': True, u'visible': True}, u'empty': {}, u'basic_info': {u'i18n__Industry': u'Industry', u'industry_pivot': u'/search?search=&amp;industry=42&amp;sortCriteria=R&amp;keepFacets=true&amp;trk=prof-0-ovw-industry', u'find_others_region': u'Find other members in Mumbai Area, India', u'headline_highlight': u'Manager at Metlife', u'showTopCardDetail': True, u'i18n_Edit': u'Edit', u'visible': True, u'i18n__find_others_in_industry': u'Find other members in this industry', u'phoneticname': u''}}, u'Volunteering': {u'empty': {}, u'volunteer': {}}, u'frontierajaxform__text_plain__there_were': u'There were one or more errors in your submission. Please correct the marked fields below.', u'lix_treasury_callout': u'B', u'Badge': {u'empty': {}, u'badges': {}}, u'Notes': {}, u'lix_treasury_upload': u'B', u'Summary': {u'empty': {}, u'summary': {u'deferImg': True, u'hasSummaryOrSpecialties': False, u'associatedWith': {}, u'showSummarySection': False, u'visible': True}}, u'connections': {}, u'search_highlight': {}, u'Patents': {u'empty': {}, u'patentsMpr': {}}, u'lix_discovery_order': u'control', u'Following': {u'follow': {u'i18n_see_less': u'See less', u'isFollowing': True, u'i18n_following_section_label': u'Following', u'lix_profile_showChannels': u'control', u'companyFolloweeCount': 1, u'industryFollowees': [{u'ind_unfollow': u'/lite/unfollow?type=INDUSTRY&amp;id=42&amp;csrfToken=ajax%3A1584468784299534813&amp;goback=%2Enpv_29841231_*1_*1_NAME*4SEARCH_AcEA_*1_en*4US_*1_*1_*1_123452511375704563981_2_7_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1', u'canonicalName': u'Insurance', u'link_industry': u'/today/insurance?trk=prof-following-industry-icon', u'i18n_x_followers': u'93,628 followers', u'ind_follow': u'/lite/follow?type=INDUSTRY&amp;id=42&amp;csrfToken=ajax%3A1584468784299534813&amp;goback=%2Enpv_29841231_*1_*1_NAME*4SEARCH_AcEA_*1_en*4US_*1_*1_*1_123452511375704563981_2_7_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1', u'universalName': u'insurance', u'id': 42, u'fmt_following_count': u'93,628', u'isShared': False}], u'i18n_unfollow': u'Unfollow', u'i18n_follow': u'Follow', u'i18n_news': u'News', u'industryFolloweeCount': 1, u'isCondensed': True, u'companyFollowees': [{u'biz_follow': u'/company/follow/submit?id=2213&amp;csrfToken=ajax%3A1584468784299534813&amp;goback=%2Enpv_29841231_*1_*1_NAME*4SEARCH_AcEA_*1_en*4US_*1_*1_*1_123452511375704563981_2_7_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1_*1', u'canonicalName': u'MetLife', u'ind_lookup': u'Insurance', u'logoId': u'/p/2/000/021/14e/05da35a.png', u'logo': u'http://m.c.lnkd.licdn.com/media/p/2/000/021/14e/05da35a.png', u'universalName': u'metlife', u'id': 2213, u'link_biz': u'/company/metlife?trk=prof-following-company-logo', u'isShared': False}], u'i18n_currently_following': u'Following'}, u'follow_people': {u'count': 0, u'influencerSeeMore': -7, u'influencers': [], u'viewee': {u'id': 29841231}}, u'follow_school': {}, u'follow_channels': {}}, u'ContactInfo': {u'distance': {u'distance': -1, u'numberOfConnections': 2}, u'contact_info': {u'deferImg': True, u'showTwitter': True, u'visible': True}}, u'network_overview': {u'lix_showDetail': u'control', u'img_overview_locked': u'http://s.c.lnkd.licdn.com/scds/common/u/img/pic/pic_network_overview_locked_178x276.png'}, u'Projects': {u'projectsMpr': {}, u'empty': {}}, u'Publications': {u'pubsMpr': {}, u'empty': {}}}}
</snippet></ROW><ROW><id>18207716</id><snippet>-</snippet></ROW><ROW><id>18207716</id><snippet>--&gt;</snippet></ROW><ROW><id>18207806</id><snippet>QWebElement</snippet></ROW><ROW><id>18207806</id><snippet>findAll</snippet></ROW><ROW><id>18207806</id><snippet>QWebElementCollection</snippet></ROW><ROW><id>18207806</id><snippet>QList</snippet></ROW><ROW><id>18207806</id><snippet>toList()</snippet></ROW><ROW><id>18207806</id><snippet>body_element = frame.findFirstElement("body")

for el in body_element.findAll("div").toList():
    print el.tagName()
</snippet></ROW><ROW><id>18207845</id><snippet>__getattr__</snippet></ROW><ROW><id>18207845</id><snippet>a.get()</snippet></ROW><ROW><id>18207845</id><snippet>a.set()</snippet></ROW><ROW><id>18207845</id><snippet>__call__</snippet></ROW><ROW><id>18207845</id><snippet>__call__</snippet></ROW><ROW><id>18207845</id><snippet>Method()</snippet></ROW><ROW><id>18208020</id><snippet>rect = cv2.minAreaRect(cnt)
box = cv2.cv.BoxPoints(rect)
box = np.int0(box)
cv2.drawContours(im,[box],0,(0,0,255),2)
</snippet></ROW><ROW><id>18208225</id><snippet>requests</snippet></ROW><ROW><id>18208225</id><snippet>requests</snippet></ROW><ROW><id>18208225</id><snippet>http://httpbin.org/</snippet></ROW><ROW><id>18208225</id><snippet>requests</snippet></ROW><ROW><id>18208225</id><snippet>requests</snippet></ROW><ROW><id>18208225</id><snippet>fileobj = open('/Users/.../test.zip', 'rb')
r = requests.post(url, auth=HTTPDigestAuth('dev', 'dev'), data = {"mysubmit":"Go"}, files={"archive": ("test.zip", fileobj)})
</snippet></ROW><ROW><id>18208225</id><snippet>httpbin.org</snippet></ROW><ROW><id>18208225</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; fileobj = open('/tmp/test.zip', 'rb')
&gt;&gt;&gt; r = requests.post('http://httpbin.org/post', data={"mysubmit":"Go"}, files={"archive": ("test.zip", fileobj)})
&gt;&gt;&gt; r
&lt;Response [200]&gt;
&gt;&gt;&gt; r.json()
{u'origin': u'217.32.203.188', u'files': {u'archive': u'data:application/zip;base64,&lt;long base64 body omitted&gt;'}, u'form': {u'mysubmit': u'Go'}, u'url': u'http://httpbin.org/post', u'args': {}, u'headers': {u'Content-Length': u'57008', u'Accept-Encoding': u'gzip, deflate, compress', u'Connection': u'close', u'Accept': u'*/*', u'User-Agent': u'python-requests/1.2.3 CPython/2.7.5 Darwin/12.4.0', u'Host': u'httpbin.org', u'Content-Type': u'multipart/form-data; boundary=9aec1d03a1794177a38b48416dd4c811'}, u'json': None, u'data': u''}
</snippet></ROW><ROW><id>18208437</id><snippet>is</snippet></ROW><ROW><id>18208437</id><snippet>value</snippet></ROW><ROW><id>18208437</id><snippet>None</snippet></ROW><ROW><id>18208437</id><snippet>None</snippet></ROW><ROW><id>18208437</id><snippet>None</snippet></ROW><ROW><id>18208437</id><snippet>None</snippet></ROW><ROW><id>18208639</id><snippet>settings.STATIC_ROOT</snippet></ROW><ROW><id>18208639</id><snippet>settings.STATICFILES_DIRS</snippet></ROW><ROW><id>18208639</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>18208651</id><snippet>File "usr/lib/python2.6/site-packages/libmproxy/flow.py", line 789
</snippet></ROW><ROW><id>18208651</id><snippet>dict</snippet></ROW><ROW><id>18208651</id><snippet>(key, value)</snippet></ROW><ROW><id>18208725</id><snippet>super()</snippet></ROW><ROW><id>18208725</id><snippet>self.__class__</snippet></ROW><ROW><id>18208725</id><snippet>type(self)</snippet></ROW><ROW><id>18208725</id><snippet>super()</snippet></ROW><ROW><id>18208725</id><snippet>type(self)</snippet></ROW><ROW><id>18208725</id><snippet>class Base(object):
    def method(self):
        print 'original'

class Derived(Base):
    def method(self):
        print 'derived'
        super(type(self), self).method()

class Subclass(Derived):
    def method(self):
        print 'subclass of derived'
        super(Subclass, self).method()
</snippet></ROW><ROW><id>18208725</id><snippet>&gt;&gt;&gt; Subclass().method()
subclass of derived
derived
derived
derived

&lt;... *many* lines removed ...&gt;

  File "&lt;stdin&gt;", line 4, in method
  File "&lt;stdin&gt;", line 4, in method
  File "&lt;stdin&gt;", line 4, in method
RuntimeError: maximum recursion depth exceeded while calling a Python object
</snippet></ROW><ROW><id>18208725</id><snippet>type(self)</snippet></ROW><ROW><id>18208725</id><snippet>Subclass</snippet></ROW><ROW><id>18208725</id><snippet>Derived</snippet></ROW><ROW><id>18208725</id><snippet>Derived.method()</snippet></ROW><ROW><id>18208725</id><snippet>Subclass</snippet></ROW><ROW><id>18208725</id><snippet>[Subclass, Derived, Base]</snippet></ROW><ROW><id>18208725</id><snippet>super()</snippet></ROW><ROW><id>18208725</id><snippet>type(self)</snippet></ROW><ROW><id>18208725</id><snippet>Subclass</snippet></ROW><ROW><id>18208725</id><snippet>Derived.method()</snippet></ROW><ROW><id>18208997</id><snippet>sqlite3 /tmp/site.db</snippet></ROW><ROW><id>18208997</id><snippet>site.db</snippet></ROW><ROW><id>18208997</id><snippet>import flaskr</snippet></ROW><ROW><id>18208997</id><snippet>flaskr.init_db()</snippet></ROW><ROW><id>18209019</id><snippet>char_count = 3 # Or whatever you want
if len(A) &gt;= char_count and len(B) &gt;= char_count :
    for i in range(0, len(A) - char_count + 1):
        some_chars = A[i:i+char_count]
        if some_chars in B:
            # Huray!
</snippet></ROW><ROW><id>18209245</id><snippet>from xlrd import open_workbook

def find_Froudnumbers():
        Fdict = {}
        for filename in file_list:
            try:
                wb = xlrd.open_workbook(os.path.join(start_dir, filename))

                # this will have a problem if there is no similar sheet

                srch_string = 'Ship Res. Coef'
                for sheet_index in range(wb.nsheets):
                    first_sheet = wb.sheet_by_index(sheet_index)
                    second_sheet = wb.sheet_by_index(sheet_index + 1)
                    if (srch_string in first_sheet.name and
                        srch_string in second_sheet.name):

                        # do something with second_sheet

                 Teljar = 25
                Flist = []
                for Frouden in xrange(25, sheet.nrows):
                    Frouden = sheet.cell_value(int(Teljar), 2)
                    Flist.append(Frouden)
                    Teljar += 1
                 Fdict[filename] = [Flist]
            except xlrd.XLRDError:
                print 'Problem with finding Froudenumbers from:', filename
        return Fdict       # map(str.strip(' '), Frouden)
     Fdict = find_Froudnumbers()
    print Fdict
</snippet></ROW><ROW><id>18209275</id><snippet>test = [[] for e in range(len(foobar)/2)]
</snippet></ROW><ROW><id>18209379</id><snippet>AuthenticationForm</snippet></ROW><ROW><id>18209379</id><snippet>ValidationError</snippet></ROW><ROW><id>18209379</id><snippet>ValidationError</snippet></ROW><ROW><id>18209379</id><snippet>class InactiveAuthenticationForm(AuthenticationForm):
    # a bit messy but it should work
    def clean(self):
        try:
            return super(InactiveAuthenticationForm, self).clean()
        except ValidationError as e:
            if self.cached_user is not None: # user exists but is not active
                # behavior that's skipped because of the validation error
                self.check_for_test_cookie()
                return self.cleaned_data
            else:
                raise e
</snippet></ROW><ROW><id>18209379</id><snippet>is_active</snippet></ROW><ROW><id>18209379</id><snippet>is_active</snippet></ROW><ROW><id>18209624</id><snippet> #!/usr/bin/python
 import re
 with open('inp1') as f1, open('inp2') as f2:
     inp1 = f1.readlines()
     inp2 = f2.readlines()

 dict1 = {l.split('   ')[0] : l.split('   ')[1] for l in inp2}

 for line in inp1:
     line = line.rstrip()
     if re.match('recev:',line):
          if dict1.has_key(line):
              line = ' '.join([line, dict1[line].rstrip()])
     print line #write this line to file
</snippet></ROW><ROW><id>18209832</id><snippet>ping -6 ipv6.google.com</snippet></ROW><ROW><id>18209864</id><snippet>CATEGORY_CHOICES</snippet></ROW><ROW><id>18209864</id><snippet>CATEGORY_CHOICES = [('', cat.title)
                    for cat in Category.objects.all()]
</snippet></ROW><ROW><id>18209983</id><snippet>get_absolute_url</snippet></ROW><ROW><id>18209983</id><snippet>View on site</snippet></ROW><ROW><id>18209983</id><snippet>get_absolute_url</snippet></ROW><ROW><id>18210025</id><snippet>quiver(X,Y, U, V, scale=20.0)
</snippet></ROW><ROW><id>18210060</id><snippet>dict_keys()</snippet></ROW><ROW><id>18210060</id><snippet>.keys()</snippet></ROW><ROW><id>18210060</id><snippet>dict.keys()</snippet></ROW><ROW><id>18210563</id><snippet>csv</snippet></ROW><ROW><id>18210563</id><snippet>import csv

with open('text.csv', 'wb') as csvfile:
    fwriter = csv.writer(csvfile)

    for x in sorted_list:
        fwriter.writerow(x)
</snippet></ROW><ROW><id>18210586</id><snippet>__eq__</snippet></ROW><ROW><id>18210586</id><snippet>class Cat:

    def __init__(self, name = "default", age = 0):
        self.name = name
        self.age = age

    def __eq__(self, other):
        if isinstance(other, str):
            return self.name == other
        elif isinstance(other, Cat):
            return self.name == other.name
</snippet></ROW><ROW><id>18210586</id><snippet>l = [Cat('Joe')]

'Joe' in l
#True
</snippet></ROW><ROW><id>18210657</id><snippet>df = pd.DataFrame({'A' : ['one', 'one', 'two', 'three'] * 3,
                   'B' : np.random.randn(12)})
bins = {'one': (-10,-1,0,1,10), 'two':(-100,0,100), 'three':(-999,0,1,2,3)}

def func(row):
    return pd.cut([row['B']], bins=bins[row['A']])[0]

df['C'] = df.apply(func, axis=1)
</snippet></ROW><ROW><id>18210657</id><snippet>        A         B          C
0     one  1.440957    (1, 10]
1     one  0.394580     (0, 1]
2     two -0.039619  (-100, 0]
3   three -0.500325  (-999, 0]
4     one  0.497256     (0, 1]
5     one  0.342222     (0, 1]
6     two -0.968390  (-100, 0]
7   three -0.772321  (-999, 0]
8     one  0.803178     (0, 1]
9     one  0.201513     (0, 1]
10    two  1.178546   (0, 100]
11  three -0.149662  (-999, 0]
</snippet></ROW><ROW><id>18210657</id><snippet>def binize2(df):
    df['C'] = ''
    for key, values in bins.items():
        mask = df['A'] == key
        df.loc[mask, 'C'] = pd.cut(df.loc[mask, 'B'], bins=values)

%%timeit
df3 = binnize(df1)
10 loops, best of 3: 56.2 ms per loop

%%timeit
binize2(df2)
100 loops, best of 3: 6.64 ms per loop
</snippet></ROW><ROW><id>18210958</id><snippet>root.geometry("{0}x{1}+0+0".format(maxW, maxH))

def callback(event):
    print "clicked at: ", event.x, "and: ", event.y

root.bind("&lt;Button-1&gt;", callback)
</snippet></ROW><ROW><id>18210958</id><snippet>root.wait_visibility(root)
root.attributes('-alpha', 0.1)
</snippet></ROW><ROW><id>18211208</id><snippet>import json

def read_objects(filename):
    decoder = json.JSONDecoder()

    with open(filename, 'r') as inputfile:
        line = next(inputfile).strip()
        while line:
            try:
                obj, index = decoder.raw_decode(line)
                yield obj
                line = line[index:]
            except ValueError:
                # Assume we didn't have a complete object yet
                line += next(inputfile).strip()
            if not line:
                line += next(inputfile).strip()
</snippet></ROW><ROW><id>18211208</id><snippet>for filename in all_files:
    for data in read_objects(filename):
        if 'text' and 'coordinates' in data:
            f.writerow([data['id'], data['geo']['coordinates']])
</snippet></ROW><ROW><id>18211229</id><snippet>import pyparsing as pp

key = pp.Word(pp.alphas+"_")
separator = pp. Literal("=").suppress()
value = pp.Word(pp.printables)
pair = key+separator+value

line = pp.OneOrMore(pair)

mytest = "mode='clip' clipzeros=True field='1331+0444=3C286' clipminmax=[0,1.2]"
res = line.parseString(mytest)
mydict = dict(zip(res[::2],[eval(x) for x in res[1::2]])
</snippet></ROW><ROW><id>18211229</id><snippet>{'field': '1331+0444=3C286', 'mode': 'clip', 'clipzeros': True, 'clipminmax': [0, 1.2]}
</snippet></ROW><ROW><id>18211229</id><snippet>res = ['mode', "'clip'", 'clipzeros', 'True', 'field', "'R RQT'", 'clipminmax', '[0,1.2]']
mydict = dict(zip(res[::2],[eval(x) for x in res[1::2]]))

print mydict
</snippet></ROW><ROW><id>18211229</id><snippet>  {'field': 'R RQT', 'mode': 'clip', 'clipzeros': True, 'clipminmax': [0, 1.2]}
</snippet></ROW><ROW><id>18211229</id><snippet>class Parser():
    def __init__(self,primarydivider,secondarydivider):
        self.prime = primarydivider
        self.second = secondarydivider

    def parse(self,string):
        res = self.initialsplit(string)
        new = []
        for entry in res:
            if self.second not in entry:
                new[-1] += ' ' + entry
            else:
                new.append(entry)
        return dict((entry[0],eval(entry[1])) for entry in [entry.split(self.second) for entry in new])

    def initialsplit(self,string):
        return string.split(self.prime)

mytest = "mode='clip' clipzeros=True field='AEF D' clipminmax=[0,1.2]"
myParser = Parser(' ', '=')
parsed = myParser.parse(mytest)
print parsed
</snippet></ROW><ROW><id>18211229</id><snippet> {'field': 'AEF D', 'mode': 'clip', 'clipzeros': True, 'clipminmax': [0, 1.2]}
</snippet></ROW><ROW><id>18211229</id><snippet>Python 2.7.5 (default, May 15 2013, 22:43:36) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; mytest = "mode='clip' clipzeros=True field='R RQT' clipminmax=[0,1.2]"
&gt;&gt;&gt; print mytest
mode='clip' clipzeros=True field='R RQT' clipminmax=[0,1.2]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18211381</id><snippet>C</snippet></ROW><ROW><id>18211381</id><snippet>gamma</snippet></ROW><ROW><id>18211381</id><snippet>C</snippet></ROW><ROW><id>18211381</id><snippet>gamma</snippet></ROW><ROW><id>18211381</id><snippet>C</snippet></ROW><ROW><id>18211381</id><snippet>gamma</snippet></ROW><ROW><id>18211381</id><snippet>C</snippet></ROW><ROW><id>18211381</id><snippet>10^-5</snippet></ROW><ROW><id>18211381</id><snippet>10^15</snippet></ROW><ROW><id>18211381</id><snippet>gamma</snippet></ROW><ROW><id>18211381</id><snippet>10^-14</snippet></ROW><ROW><id>18211381</id><snippet>10^2</snippet></ROW><ROW><id>18211381</id><snippet>C=[]
gamma=[]
for i in range(21): C.append(10.0**(i-5))
for i in range(17): gamma.append(10**(i-14))
</snippet></ROW><ROW><id>18211418</id><snippet>optparse</snippet></ROW><ROW><id>18211418</id><snippet>argparse</snippet></ROW><ROW><id>18211661</id><snippet>refresh()</snippet></ROW><ROW><id>18211661</id><snippet>WebElement</snippet></ROW><ROW><id>18211661</id><snippet>None</snippet></ROW><ROW><id>18211661</id><snippet>return</snippet></ROW><ROW><id>18211661</id><snippet>except</snippet></ROW><ROW><id>18211661</id><snippet>return</snippet></ROW><ROW><id>18211661</id><snippet>None</snippet></ROW><ROW><id>18211661</id><snippet>return getLastPost(br, count)</snippet></ROW><ROW><id>18211665</id><snippet>keys()</snippet></ROW><ROW><id>18211665</id><snippet>keys = d.keys()
for key in keys[5:]:
    print key, d[key]
</snippet></ROW><ROW><id>18211710</id><snippet>{field:'value'}
</snippet></ROW><ROW><id>18211963</id><snippet>any()</snippet></ROW><ROW><id>18211963</id><snippet>matching = [i for i, x in enumerate(my_list) if any(thing in x for thing in things_to_find)]
</snippet></ROW><ROW><id>18211963</id><snippet>&gt;&gt;&gt; my_list = ['abc-123', 'def-456', 'ghi-789', 'abc-456']
&gt;&gt;&gt; things_to_find = ['abc', 'def']
&gt;&gt;&gt; [i for i, x in enumerate(my_list) if any(thing in x for thing in things_to_find)]
[0, 1, 3]
</snippet></ROW><ROW><id>18211982</id><snippet>@app.route('/hello', methods=['GET', 'POST'])
def hello():
    hello_world()
</snippet></ROW><ROW><id>18211982</id><snippet>@app.route('/hello', methods=['GET', 'POST'])
def hello():
    return hello_world()
</snippet></ROW><ROW><id>18211982</id><snippet>return</snippet></ROW><ROW><id>18212201</id><snippet>[...]</snippet></ROW><ROW><id>18212201</id><snippet>list_literal = [1, 2, 3]
list_comprehension = [i for i in range(4) if i &gt; 0]
</snippet></ROW><ROW><id>18212201</id><snippet>(...)</snippet></ROW><ROW><id>18212201</id><snippet>sum((i*i for i in xrange(5)))  # with parenthesis
sum(i*i for i in xrange(5))    # without parenthesis around the generator
</snippet></ROW><ROW><id>18212322</id><snippet>Tk</snippet></ROW><ROW><id>18212322</id><snippet>import sys
from tkinter import *

def forget_page1():
    widgets = [mLabel1, button]
    for widget in widgets:
        widget.place_forget ()
    loadNextPage()

def loadNextPage():
    mLabel2 = Label (text="Welcome to the next page.")
    mLabel2.place (x= 222,y = 200)
    button1 = Button (text = "Hello" )
    button1.place(x = 333,y = 230)

################################
mGui = Tk ()

mGui.geometry("600x600+545+170")
mGui.title("MyMathDictionary")

mLabel1 = Label (text = "Welcome to MyMathDictionary. Press Next to continue.",
                 fg = "blue",bg = "white")
mLabel1.place (x= 150,y = 200)

button = Button (text = "Next", command = forget_page1)
button.place(x = 275,y = 230)

mGui.mainloop()
</snippet></ROW><ROW><id>18212422</id><snippet>row = []
for num in range(0, self.__width):
    row.append(".")
for num in range(0, self.__height):
    self.__grid.append(row)
</snippet></ROW><ROW><id>18212422</id><snippet>row</snippet></ROW><ROW><id>18212422</id><snippet>for num in range(0, self.__height):
    row = []
    for num2 in range(0, self.__width):
        row.append(".")
    self.__grid.append(row)
</snippet></ROW><ROW><id>18212481</id><snippet>   def run(letters):
        keys = []
        values = []
        for key in letters.keys():
            keys.append(key)
        for value in letters.values():
            values.append(value)
        return (keys, values)

    run({"a": 1, "b": 2, "c": 3, "d": 4})
</snippet></ROW><ROW><id>18212481</id><snippet>(['a', 'c', 'b', 'd'], [1, 3, 2, 4])
</snippet></ROW><ROW><id>18212513</id><snippet>fmt='o'</snippet></ROW><ROW><id>18212513</id><snippet>plt.errorbar(x,y,yerr=yerr, color='gray', fmt='o', mfc='white', zorder=1)
</snippet></ROW><ROW><id>18212513</id><snippet>mfc='white'</snippet></ROW><ROW><id>18212513</id><snippet>fmt</snippet></ROW><ROW><id>18212634</id><snippet>if name in ("Jesse", "jesse"):
</snippet></ROW><ROW><id>18212634</id><snippet># Using the lower method of a string will take care of anything that can be regarded  
# as 'jesse' (i.e. 'JeSSe', 'jESSE', 'JESSE', etc.)
if name.lower() == "jesse":
</snippet></ROW><ROW><id>18212634</id><snippet>"Jesse" or "jesse"</snippet></ROW><ROW><id>18212634</id><snippet>"Jesse"</snippet></ROW><ROW><id>18212634</id><snippet>"Jesse"</snippet></ROW><ROW><id>18212634</id><snippet>"jesse"</snippet></ROW><ROW><id>18212634</id><snippet>"Jesse"</snippet></ROW><ROW><id>18212634</id><snippet>"Jesse"</snippet></ROW><ROW><id>18212634</id><snippet>&gt;&gt;&gt; "Jesse" or "jesse"
'Jesse'
&gt;&gt;&gt; False or "jesse"
'jesse'
</snippet></ROW><ROW><id>18212669</id><snippet>pd.NaT.date()</snippet></ROW><ROW><id>18212669</id><snippet>datetime.date(1, 255, 255)</snippet></ROW><ROW><id>18212669</id><snippet>pd.NaT</snippet></ROW><ROW><id>18212669</id><snippet>obj.date()</snippet></ROW><ROW><id>18212669</id><snippet>datetime64</snippet></ROW><ROW><id>18212669</id><snippet>def try_convert(obj):
    if obj is pd.NaT:
        return 'NA'
    else:
        return obj.date()

n [17]: s.apply(try_convert)
Out[17]:
0     2012-06-28
1     2013-05-21
2     2011-10-14
3     2011-11-11
4     2013-02-07
5     2013-01-02
6     2013-06-24
7     2013-07-15
8     2011-11-04
9     2013-04-29
10    2013-06-24
11    2012-10-22
12            NA
13            NA
14    2011-12-13
Name: 1_2, dtype: object
</snippet></ROW><ROW><id>18212867</id><snippet>import csv
import glob

def get_site_files():
    with open('out.csv', 'w') as out_file:
        csv_out = csv.writer(out_file, delimiter=',')
        for fname in glob.glob('*.txt'):
            with open(fname) as f:
                for line in f:
                    vals = line.split(',')
                    csv_out.writerow(vals)

get_site_files()
</snippet></ROW><ROW><id>18212867</id><snippet>import glob
with ('out.csv', 'w') as fout:
    for fname in glob.glob('*.txt'):
        with open(fname, 'r') as fin:
            fout.write(fin.read())
</snippet></ROW><ROW><id>18212926</id><snippet>time.strptime</snippet></ROW><ROW><id>18212926</id><snippet>time.strftime</snippet></ROW><ROW><id>18212926</id><snippet>import time

input_format = "%m/%d/%Y %I:%M:%S %p INFO" # or %d/%m...
output_format = "%Y-%m-%d %H:%M:%S"

def convert_time(logging_time):
    return time.strftime(output_format, time.strptime(logging_time, input_format))

print convert_time("08/07/2013 11:40:08 PM INFO")
# prints 2013-08-07 23:40:08
</snippet></ROW><ROW><id>18212926</id><snippet>strptime</snippet></ROW><ROW><id>18212926</id><snippet>strftime</snippet></ROW><ROW><id>18212926</id><snippet>C</snippet></ROW><ROW><id>18212926</id><snippet>datetime</snippet></ROW><ROW><id>18212926</id><snippet>%p</snippet></ROW><ROW><id>18212926</id><snippet>import locale 
locale.setlocale(locale.LC_TIME, "C")
</snippet></ROW><ROW><id>18212940</id><snippet>n_set_points = 100
n_test_points = 10000
n_dims = 60

set_points = np.random.rand(n_set_points, n_dims) 
test_points = np.random.rand(n_test_points, n_dims)
</snippet></ROW><ROW><id>18212940</id><snippet># deltas.shape = (n_set_points, n_test_point, n_dims)
deltas = (set_points[:, np.newaxis, :] -
          test_points[np.newaxis, ...])

# dist[j, k] holds the squared distance between the
# j-th set_point and the k-th test point
dist = np.sum(deltas*deltas, axis=-1)

# nearest[j] is the index of the set_point closest to
# each test_point, has shape (n_test_points,)
nearest = np.argmin(dist, axis=0)
</snippet></ROW><ROW><id>18212940</id><snippet>deltas</snippet></ROW><ROW><id>18212940</id><snippet>dist = np.einsum('jkd,jkd-&gt;jk', deltas, deltas)
</snippet></ROW><ROW><id>18212940</id><snippet>deltas</snippet></ROW><ROW><id>18212940</id><snippet>def nearest_neighbor(set_pts, test_pts, chunk_size):
    n_test_points = len(test_pts)
    ret = np.empty((n_test_points), dtype=np.intp)

    for chunk_start in xrange(0, n_test_points ,chunk_size):
        deltas = (set_pts[:, np.newaxis, :] -
                  test_pts[np.newaxis,
                           chunk_start:chunk_start + chunk_size, :])
        dist = np.einsum('jkd,jkd-&gt;jk', deltas,deltas)
        ret[chunk_start:chunk_start + chunk_size] = np.argmin(dist, axis=0)
    return ret

%timeit nearest_neighbor(set_points, test_points, 1)
1 loops, best of 3: 283 ms per loop

%timeit nearest_neighbor(set_points, test_points, 10)
1 loops, best of 3: 175 ms per loop

%timeit nearest_neighbor(set_points, test_points, 100)
1 loops, best of 3: 384 ms per loop

%timeit nearest_neighbor(set_points, test_points, 1000)
1 loops, best of 3: 365 ms per loop

%timeit nearest_neighbor(set_points, test_points, 10000)
1 loops, best of 3: 374 ms per loop
</snippet></ROW><ROW><id>18213004</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; txt = '''#|\n this is some sort of foo bar\n that I don't care about|#\nthen there is a foo bar sentence that I want but i don't want that foo bar in within the hex pipe pipe hex comment block.#| and even so, i don't want this section to appear|#\n with some crazy sentence...'''
&gt;&gt;&gt; txt2 = re.sub(r'#\|.*?\|#', '', txt, flags=re.DOTALL)  # remove multiline comment
&gt;&gt;&gt; txt2
"\nthen there is a foo bar sentence that I want but i don't want that foo bar in within the hex pipe pipe hex comment block.\n with some crazy sentence..."
</snippet></ROW><ROW><id>18213004</id><snippet>strip()</snippet></ROW><ROW><id>18213202</id><snippet>lst</snippet></ROW><ROW><id>18213202</id><snippet>....
lst = ["a","b","c","d","e","f"]
OptionMenu(root, var, *lst, command=print_it).pack()
....
</snippet></ROW><ROW><id>18213317</id><snippet>ents = []
for i in xrange(0, 10000000):
    dic = {
        'n': i, 'p': i, 'li': i, 'col': i, 'sty': i,
        'nu': i, 'ge': i, 'rr': i, 'ssty': i
    } 
    ents.append(dic)
dfEnts = pd.DataFrame(ents)

%%timeit
a = dfEnts[(dfEnts["col"] == 44) &amp; (dfEnts["sty"]== 44)]
10 loops, best of 3: 96.1 ms per loop

%%timeit
b = [ix for ix,ent in enumerate(ents) if (ent['col'] == 44) &amp; (ent["sty"] == 44)]
1 loops, best of 3: 1.68 s per loop
</snippet></ROW><ROW><id>18213317</id><snippet>DataFrame</snippet></ROW><ROW><id>18213400</id><snippet>X-Accel-Mapping</snippet></ROW><ROW><id>18213400</id><snippet>X-Accel-Mapping</snippet></ROW><ROW><id>18213400</id><snippet>urllib2</snippet></ROW><ROW><id>18213400</id><snippet>response = urllib2.urlopen(url_to_get_x_accel_mapping_header)
download_url = response.headers['X-Accel-Mapping']
download_contents = urllib2.urlopen(download_url).read()
</snippet></ROW><ROW><id>18213520</id><snippet>$PYTHONPATH=path/to/generated/api:path/to/thrift/libs python TestClient.py
</snippet></ROW><ROW><id>18213520</id><snippet>$PYTHONPATH=/usr/local/include/gen-py/:/usr/local/lib/:/usr/lib/python2.4/site-packages/ python2.7 proxy/examples/python/TestClient.py 
</snippet></ROW><ROW><id>18213636</id><snippet>worldMarkers</snippet></ROW><ROW><id>18213636</id><snippet>markers = worldMarkers(searchDict=searchDict)
</snippet></ROW><ROW><id>18213636</id><snippet>markers = worldMarkers()
</snippet></ROW><ROW><id>18213636</id><snippet>if 'searchDict' in kargs</snippet></ROW><ROW><id>18213636</id><snippet>self.searchDict = kargs['searchDict']</snippet></ROW><ROW><id>18213636</id><snippet>def GET(self)</snippet></ROW><ROW><id>18214111</id><snippet>OperationalError: unable to open database file
</snippet></ROW><ROW><id>18214111</id><snippet>$USER</snippet></ROW><ROW><id>18214111</id><snippet>chmod o+w /path/to/dir
chown $USER /path/to/dir
</snippet></ROW><ROW><id>18214270</id><snippet>import time

print time.strftime('%I:%M:%S %p %Z')
</snippet></ROW><ROW><id>18214892</id><snippet>selenium</snippet></ROW><ROW><id>18214892</id><snippet>from selenium import webdriver

driver = webdriver.Firefox()
driver.get("http://www.priceline.com/")
driver.find_element_by_id("hotel-btn-submit-retl").click()
driver.close()
</snippet></ROW><ROW><id>18214899</id><snippet>y</snippet></ROW><ROW><id>18214899</id><snippet>z</snippet></ROW><ROW><id>18214899</id><snippet>y=z=x*0
</snippet></ROW><ROW><id>18214899</id><snippet>h</snippet></ROW><ROW><id>18214899</id><snippet>g</snippet></ROW><ROW><id>18214899</id><snippet>y=x*0
z=x*0
</snippet></ROW><ROW><id>18214911</id><snippet> p = subprocess.Popen(command, shell=True, stdin=subprocess.PIPE, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, close_fds=True)
out,err = p.communicate()
</snippet></ROW><ROW><id>18214979</id><snippet>row1</snippet></ROW><ROW><id>18214979</id><snippet>del</snippet></ROW><ROW><id>18214979</id><snippet>row1</snippet></ROW><ROW><id>18214979</id><snippet>cur</snippet></ROW><ROW><id>18215186</id><snippet>hdfs</snippet></ROW><ROW><id>18215186</id><snippet>&amp;user.name=hdfs</snippet></ROW><ROW><id>18215186</id><snippet>dr.who</snippet></ROW><ROW><id>18215186</id><snippet>user.name</snippet></ROW><ROW><id>18215236</id><snippet>fact</snippet></ROW><ROW><id>18215236</id><snippet>fact</snippet></ROW><ROW><id>18215236</id><snippet>def create_closure_and_function(*args):
    func = None
    def create_function_closure():
         return func

    closure = create_function_closure.__closure__
    func = types.FunctionType(*args[:-1] + [closure])
    return func
</snippet></ROW><ROW><id>18215236</id><snippet>args[-1]</snippet></ROW><ROW><id>18215236</id><snippet>create_function_closure.__closure__[0]</snippet></ROW><ROW><id>18215332</id><snippet>def get_attribute(data, attribute):
    for attrib in data['response']['context'][0]['attributes']:
        if attrib['name'] == attribute:
            return attrib['value']
    return 'Not Found'

&gt;&gt;&gt; data = json.loads(s)
&gt;&gt;&gt; get_attribute(data, 'operational-status')
u'ok'
&gt;&gt;&gt; get_attribute(data, 'health-state')
u'ok'
</snippet></ROW><ROW><id>18215496</id><snippet>.clf</snippet></ROW><ROW><id>18215496</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure()

for result in results:
    fig.clf()   # Clears the current figure
    ...
</snippet></ROW><ROW><id>18215496</id><snippet>plt.figure</snippet></ROW><ROW><id>18215496</id><snippet>.close</snippet></ROW><ROW><id>18215499</id><snippet>&gt;&gt;&gt; x = np.timedelta64(2069211000000000, 'ns')
&gt;&gt;&gt; days = x.astype('timedelta64[D]')
&gt;&gt;&gt; days / np.timedelta64(1, 'D')
23
</snippet></ROW><ROW><id>18215499</id><snippet>days.astype(int)</snippet></ROW><ROW><id>18215499</id><snippet>timedelta</snippet></ROW><ROW><id>18215499</id><snippet>'D'</snippet></ROW><ROW><id>18215499</id><snippet>'ns'</snippet></ROW><ROW><id>18215523</id><snippet>f.subplots_adjust(0, 0, 1, 1)
</snippet></ROW><ROW><id>18215660</id><snippet>timer(dictionaryObjectParsed)
</snippet></ROW><ROW><id>18215660</id><snippet>def timer(f):
    threading.Timer(1,f).start()
    print time.strftime('%I:%M:%S %p %Z')
</snippet></ROW><ROW><id>18215660</id><snippet>threading.Timer(1,timer)
</snippet></ROW><ROW><id>18215660</id><snippet>def timer(f):
    threading.Timer(1,timer,[f,]).start()
    f()
    print time.strftime('%I:%M:%S %p %Z')
</snippet></ROW><ROW><id>18215801</id><snippet>socket.gethostname()</snippet></ROW><ROW><id>18215801</id><snippet>getpass.getuser()</snippet></ROW><ROW><id>18215801</id><snippet>getpass.gethostname()</snippet></ROW><ROW><id>18215927</id><snippet>import numpy as np
import pylab as plt

def rect(x,y,w,h,c):
    ax = plt.gca()
    polygon = plt.Rectangle((x,y),w,h,color=c)
    ax.add_patch(polygon)

def rainbow_fill(X,Y, cmap=plt.get_cmap("jet")):
    plt.plot(X,Y,lw=0)  # Plot so the axes scale correctly

    dx = X[1]-X[0]
    N  = float(X.size)

    for n, (x,y) in enumerate(zip(X,Y)):
        color = cmap(n/N)
        rect(x,0,dx,y,color)

# Test data    
X = np.linspace(0,10,100)
Y = .25*X**2 - X
rainbow_fill(X,Y)
plt.show()
</snippet></ROW><ROW><id>18215997</id><snippet>import my_package.my_very_long_module_name as foo
from foo import f1, f2, f3
</snippet></ROW><ROW><id>18215997</id><snippet>foo.py</snippet></ROW><ROW><id>18215997</id><snippet>foo</snippet></ROW><ROW><id>18215997</id><snippet>import my_package.my_very_long_module_name as foo
f1, f2, f3 = foo.f1, foo.f2, foo.f3
del foo
</snippet></ROW><ROW><id>18216047</id><snippet>t = t.rsplit('.', 1)[0]
time.strptime('%Y%m%d-%H:%M:%S.%f', t)
</snippet></ROW><ROW><id>18216047</id><snippet>if not '.' in t:
    t += '.0'
time.strptime('%Y%m%d-%H:%M:%S.%f', t)
</snippet></ROW><ROW><id>18216220</id><snippet>next</snippet></ROW><ROW><id>18216220</id><snippet>next</snippet></ROW><ROW><id>18216220</id><snippet>yield</snippet></ROW><ROW><id>18216220</id><snippet>return</snippet></ROW><ROW><id>18216220</id><snippet>yield</snippet></ROW><ROW><id>18216437</id><snippet>multiprocessing</snippet></ROW><ROW><id>18216437</id><snippet>import multiprocessing

def worker(file):
    #your subprocess code


if __name__ == '__main__':
    files = ["path/to/file1.py","path/to/file2.py","path/to/file3.py"]
    for i in files:
        p = multiprocessing.Process(target=worker(i))
        p.start()
</snippet></ROW><ROW><id>18216611</id><snippet>x[x!=0]</snippet></ROW><ROW><id>18216611</id><snippet>x</snippet></ROW><ROW><id>18216611</id><snippet>def funct(x, y):
    x = x[x!=0]
    y = y[y!=0]
    # do something here
    return x,y
a, b = funct(a, b)  #assign the returned value back to the global variables
</snippet></ROW><ROW><id>18216651</id><snippet>decryptedFileText = decryptedFileText.rstrip(decryptedFileText[-1])</snippet></ROW><ROW><id>18216926</id><snippet>.fetchall()</snippet></ROW><ROW><id>18216926</id><snippet>for columnrow in cursor.execute("select column1,column2 from tbl").fetchall():
    ...
</snippet></ROW><ROW><id>18217024</id><snippet>foo.bar</snippet></ROW><ROW><id>18217024</id><snippet>foo</snippet></ROW><ROW><id>18217024</id><snippet>Foo</snippet></ROW><ROW><id>18217024</id><snippet>foo.bar</snippet></ROW><ROW><id>18217024</id><snippet>foo.bar is not foo.bar
</snippet></ROW><ROW><id>18217024</id><snippet>__eq__</snippet></ROW><ROW><id>18217024</id><snippet>True</snippet></ROW><ROW><id>18217024</id><snippet>==</snippet></ROW><ROW><id>18217064</id><snippet>numbers = [num for num in numbers if num % 2 == 0]
</snippet></ROW><ROW><id>18217168</id><snippet>execfile()</snippet></ROW><ROW><id>18217168</id><snippet>globals</snippet></ROW><ROW><id>18217168</id><snippet># test_fun1.py
a = 1

def test1():
    print a
    execfile('test_fun2.py', {})

test1()
</snippet></ROW><ROW><id>18217168</id><snippet>globals()</snippet></ROW><ROW><id>18217168</id><snippet>{}</snippet></ROW><ROW><id>18217168</id><snippet>execfile()</snippet></ROW><ROW><id>18217168</id><snippet>execfile()</snippet></ROW><ROW><id>18217168</id><snippet>execfile()</snippet></ROW><ROW><id>18217168</id><snippet>execfile()</snippet></ROW><ROW><id>18217168</id><snippet>test1()</snippet></ROW><ROW><id>18217168</id><snippet>a = 1

def test1():
    print a
    # code executed by execfile
    b = 2    

    def print_a():
        print 'a'

    def test2():
        print_a()
        print b

    test2()

test1()
</snippet></ROW><ROW><id>18217168</id><snippet>locals()</snippet></ROW><ROW><id>18217168</id><snippet>execfile()</snippet></ROW><ROW><id>18217168</id><snippet>execfile()</snippet></ROW><ROW><id>18217168</id><snippet>execfile()</snippet></ROW><ROW><id>18217168</id><snippet>b = 2</snippet></ROW><ROW><id>18217168</id><snippet>def print_a(): ...</snippet></ROW><ROW><id>18217168</id><snippet>test1()</snippet></ROW><ROW><id>18217403</id><snippet>from django.db.models import Q

b_models = modelB.objects.values('email', 'name')
exclude = Q()
for model in b_models:
    exclude |= (Q(email=model['email']) &amp; Q(name=model['name']))

a_models = modelA.objects.exclude(exclude)
</snippet></ROW><ROW><id>18217403</id><snippet>Q</snippet></ROW><ROW><id>18217403</id><snippet>&amp;</snippet></ROW><ROW><id>18217403</id><snippet>|</snippet></ROW><ROW><id>18217403</id><snippet>~</snippet></ROW><ROW><id>18217403</id><snippet>AND</snippet></ROW><ROW><id>18217403</id><snippet>OR</snippet></ROW><ROW><id>18217403</id><snippet>NOT</snippet></ROW><ROW><id>18217403</id><snippet>emails = modelB.objects.values_list('email', flat=True)
a_models = modelA.objects.exclude(email__in=emails)
</snippet></ROW><ROW><id>18217526</id><snippet>import re
re.sub(r'0$', '', line)
</snippet></ROW><ROW><id>18217560</id><snippet>None</snippet></ROW><ROW><id>18217560</id><snippet>None</snippet></ROW><ROW><id>18217560</id><snippet>AttributeError</snippet></ROW><ROW><id>18217560</id><snippet>group</snippet></ROW><ROW><id>18217560</id><snippet>try</snippet></ROW><ROW><id>18217560</id><snippet>except</snippet></ROW><ROW><id>18217560</id><snippet>match = pattern.search(every_line[13].replace(',',''))
if match:
    return match.group(1)
match = pattern_not.search(every_line[13])
if match:
    return match.group()
match = pattern_not.search(every_line[13])
if match:
    return match.group()
</snippet></ROW><ROW><id>18217560</id><snippet>group</snippet></ROW><ROW><id>18217560</id><snippet>"free"</snippet></ROW><ROW><id>18217560</id><snippet>str.find</snippet></ROW><ROW><id>18217560</id><snippet>str.index</snippet></ROW><ROW><id>18217794</id><snippet>from lxml import etree
import requests

URL = "http://en.wikipedia.org/wiki/List_of_school_districts_in_Alabama"
response = requests.get(URL)

parser = etree.HTMLParser()
tree = etree.fromstring(response.text, parser)

for row in tree.xpath('//*[@id="mw-content-text"]/table[1]/tr'):
    links = row.xpath('./td[1]/a')
    if links:
        link = links[0]
        print link.text, link.attrib.get('href')
</snippet></ROW><ROW><id>18217794</id><snippet>tbody</snippet></ROW><ROW><id>18217794</id><snippet>lxml</snippet></ROW><ROW><id>18217803</id><snippet>datetime.datetime.now</snippet></ROW><ROW><id>18217803</id><snippet>datetime.time.now</snippet></ROW><ROW><id>18217803</id><snippet>datetime.time.currentlocaltime</snippet></ROW><ROW><id>18217803</id><snippet>datetime.time.currentutctime</snippet></ROW><ROW><id>18217884</id><snippet>a[0]</snippet></ROW><ROW><id>18217884</id><snippet>&gt;&gt;&gt; a = ['spam', 'eggs', 100, 1234]
&gt;&gt;&gt; a[0] = [a[0], 'Devon']
&gt;&gt;&gt; a
[['spam', 'Devon'], 'eggs', 100, 1234]
</snippet></ROW><ROW><id>18217884</id><snippet>&gt;&gt;&gt; items = ['devon', 'baloney']
&gt;&gt;&gt; a = ['spam', 'eggs', 100, 1234]
&gt;&gt;&gt; a[0] = [a[0]] + items
&gt;&gt;&gt; a
[['spam', 'devon', 'baloney'], 'eggs', 100, 1234]
</snippet></ROW><ROW><id>18217884</id><snippet>&gt;&gt;&gt; a = ['spam', 'eggs', 100, 1234]
&gt;&gt;&gt; [item if item != 'spam' else [item, 'devon'] for item in a]
[['spam', 'devon'], 'eggs', 100, 1234]
</snippet></ROW><ROW><id>18217960</id><snippet>failure</snippet></ROW><ROW><id>18217960</id><snippet>()</snippet></ROW><ROW><id>18217960</id><snippet>self.failure</snippet></ROW><ROW><id>18217960</id><snippet>'F'</snippet></ROW><ROW><id>18217960</id><snippet>'F'()</snippet></ROW><ROW><id>18217960</id><snippet>failure</snippet></ROW><ROW><id>18217960</id><snippet>None</snippet></ROW><ROW><id>18217960</id><snippet>failure</snippet></ROW><ROW><id>18217960</id><snippet>failure</snippet></ROW><ROW><id>18217960</id><snippet>grade</snippet></ROW><ROW><id>18217960</id><snippet>class Grade_Calculator(object):
    def __init__(self, score):
        self.score = score

    @property
    def grade(self):
        if self.failure:
            return 'F'
        if 60 &lt;= self.score &lt; 70:
            return 'D'
        if 70 &lt;= self.score &lt; 80:
            return 'C'
        if 80 &lt;= self.score &lt; 90:
            return 'B'
        if 90 &lt;= self.score &lt; 100:
            return 'A'

    @property
    def failure(self):
        return self.score &lt; 60   # returns True or False

    def print_grade(self):
        print self.grade, "- see me" * self.failure

if __name__ == '__main__':
    c = Grade_Calculator(71)
    c.print_grade()
</snippet></ROW><ROW><id>18217969</id><snippet>def collector(fileIn):
    d = {}
    with open(fileIn, "r") as f:
        for line in f:
            clu, gen, spec, fam = line.split()
            d.setdefault(gen, []).append((spec, fam))
    return d

def compare_files(f1, f2):
    d1 = collector(f1)
    d2 = collector(f2)
    for genus in d1:
        try:
            if len(d1[genus]) != len(d2[genus]):
                print genus, "is different"
        except:
            print genus, "not found in file 2"
</snippet></ROW><ROW><id>18218025</id><snippet>most_common(...)</snippet></ROW><ROW><id>18218025</id><snippet>&gt;&gt;&gt; a = collections.Counter('abcdababc')
&gt;&gt;&gt; a.most_common()
[('a', 3), ('b', 3), ('c', 2), ('d', 1)]
&gt;&gt;&gt; a.most_common(2)
[('a', 3), ('b', 3)]
</snippet></ROW><ROW><id>18218270</id><snippet>td</snippet></ROW><ROW><id>18218270</id><snippet>img</snippet></ROW><ROW><id>18218270</id><snippet>string</snippet></ROW><ROW><id>18218270</id><snippet>strings</snippet></ROW><ROW><id>18218270</id><snippet>stripped_strings</snippet></ROW><ROW><id>18218270</id><snippet>img</snippet></ROW><ROW><id>18218270</id><snippet>get_text</snippet></ROW><ROW><id>18218400</id><snippet>j=pyfits.getdata(i)
</snippet></ROW><ROW><id>18218400</id><snippet>j</snippet></ROW><ROW><id>18218400</id><snippet>j</snippet></ROW><ROW><id>18218400</id><snippet>data = [pyfits.getdata(filename) for filename in list1]
</snippet></ROW><ROW><id>18218400</id><snippet>data[0]</snippet></ROW><ROW><id>18218400</id><snippet>data[1]</snippet></ROW><ROW><id>18218466</id><snippet>def call_and_type(command, prompt_regex, entry):
    p = pexpect.spawn(command, logfile=sys.stdout, maxread=16384)
    index = p.expect_exact([prompt_regex, pexpect.EOF])
    if index == 0:
        p.setecho(False)
        p.sendline(entry)
        while p.read():
            pass
</snippet></ROW><ROW><id>18218823</id><snippet>print</snippet></ROW><ROW><id>18218823</id><snippet>file.write</snippet></ROW><ROW><id>18218823</id><snippet>errors.write(str(e))
</snippet></ROW><ROW><id>18218823</id><snippet>errors.write('Failed to exec {} with {}'.format(filename, e))
</snippet></ROW><ROW><id>18218823</id><snippet>format</snippet></ROW><ROW><id>18218823</id><snippet>write</snippet></ROW><ROW><id>18218823</id><snippet>e</snippet></ROW><ROW><id>18218823</id><snippet>format</snippet></ROW><ROW><id>18218823</id><snippet>str</snippet></ROW><ROW><id>18218823</id><snippet>repr</snippet></ROW><ROW><id>18218823</id><snippet>str</snippet></ROW><ROW><id>18218823</id><snippet>print</snippet></ROW><ROW><id>18219073</id><snippet>parent.__new__</snippet></ROW><ROW><id>18219073</id><snippet>child1(e)</snippet></ROW><ROW><id>18219073</id><snippet>child1.__new__</snippet></ROW><ROW><id>18219073</id><snippet>parent.__new__</snippet></ROW><ROW><id>18219073</id><snippet>e</snippet></ROW><ROW><id>18219073</id><snippet>child1(e)</snippet></ROW><ROW><id>18219073</id><snippet>__new__</snippet></ROW><ROW><id>18219073</id><snippet>parent.__new__</snippet></ROW><ROW><id>18219073</id><snippet>intermediate</snippet></ROW><ROW><id>18219073</id><snippet>parent</snippet></ROW><ROW><id>18219073</id><snippet>childN</snippet></ROW><ROW><id>18219073</id><snippet>intermediate.__new__</snippet></ROW><ROW><id>18219073</id><snippet>child1</snippet></ROW><ROW><id>18219073</id><snippet>parent</snippet></ROW><ROW><id>18219073</id><snippet>class base(object):
    pass

class parent(base):
    def __new__(cls, e):
        # same as before

class child1(base):
    # etc.
</snippet></ROW><ROW><id>18219073</id><snippet>parent</snippet></ROW><ROW><id>18219073</id><snippet>register</snippet></ROW><ROW><id>18219073</id><snippet>childN</snippet></ROW><ROW><id>18219073</id><snippet>isinstance</snippet></ROW><ROW><id>18219073</id><snippet>__new__</snippet></ROW><ROW><id>18219073</id><snippet>parent</snippet></ROW><ROW><id>18219073</id><snippet>def __new__(cls, e):
    if cls is not parent:
        return super(parent, cls).__new__(cls)
</snippet></ROW><ROW><id>18219102</id><snippet>SCOPES = ('https://www.googleapis.com/auth/glass.timeline '
          'https://www.googleapis.com/auth/glass.location '
          'https://www.googleapis.com/auth/userinfo.profile '
          'https://www.googleapis.com/auth/plus.login')
</snippet></ROW><ROW><id>18219133</id><snippet>width</snippet></ROW><ROW><id>18219133</id><snippet>yaml.dump(d,  width=20, default_flow_style=False)
</snippet></ROW><ROW><id>18219207</id><snippet>help()</snippet></ROW><ROW><id>18219207</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18219207</id><snippet>Lib/pydoc.py</snippet></ROW><ROW><id>18219207</id><snippet>    def listmodules(self, key=''):
        if key:
            self.output.write('''
Here is a list of matching modules.  Enter any module name to get more help.

''')
            apropos(key)
        else:
            self.output.write('''
Please wait a moment while I gather a list of all available modules...

''')
            modules = {}
            def callback(path, modname, desc, modules=modules):
                if modname and modname[-9:] == '.__init__':
                    modname = modname[:-9] + ' (package)'
                if modname.find('.') &lt; 0:
                    modules[modname] = 1
            def onerror(modname):
                callback(None, modname, None)
            ModuleScanner().run(callback, onerror=onerror)
            self.list(modules.keys())
            self.output.write('''
Enter any module name to get more help.  Or, type "modules spam" to search
for modules whose descriptions contain the word "spam".
''')
</snippet></ROW><ROW><id>18219207</id><snippet>ModuleScanner</snippet></ROW><ROW><id>18219207</id><snippet>pkgutil.walk_packages</snippet></ROW><ROW><id>18219207</id><snippet>iter_modules</snippet></ROW><ROW><id>18219207</id><snippet>help()</snippet></ROW><ROW><id>18219207</id><snippet>numpy</snippet></ROW><ROW><id>18219207</id><snippet>scipy</snippet></ROW><ROW><id>18219337</id><snippet>import time


def run_one(letters):
    keys = []
    values = []
    for key in sorted(letters.keys()):
        keys.append(key)
    for value in sorted(letters.values()):
        values.append(value)
    return keys, values


def run_two(letters):
    keys = sorted(letters.keys())
    values = sorted(letters.values())
    return keys, values


def run_three(letters):
    keys = sorted(list(letters.keys()))
    values = sorted(list(letters.values()))
    return keys, values


start_one = time.time()
print run_one({"Cat": 1, "Zebra": 2, "Dog": 3, "Lion": 4})
elapsed_one = (time.time() - start_one)
print elapsed_one

start_two = time.time()
print run_two({"Cat Ci": 1, "Zebra Zi ": 2, "Dog Di": 3, "Lion Li": 4})
elapsed_two = (time.time() - start_two)
print elapsed_two

start_three = time.time()
print run_three({"Cat Ci Co": 1, "Zebra Zi Zo": 2, "Dog Di Do": 3, "Lion Li Lu": 4})
elapsed_three = (time.time() - start_three)
print elapsed_three
</snippet></ROW><ROW><id>18219337</id><snippet>(['Cat', 'Dog', 'Lion', 'Zebra'], [1, 2, 3, 4])
5.29289245605e-05
(['Cat Ci', 'Dog Di', 'Lion Li', 'Zebra Zi '], [1, 2, 3, 4])
3.79085540771e-05
(['Cat Ci Co', 'Dog Di Do', 'Lion Li Lu', 'Zebra Zi Zo'], [1, 2, 3, 4])
4.41074371338e-05 
</snippet></ROW><ROW><id>18219401</id><snippet>&lt;</snippet></ROW><ROW><id>18219401</id><snippet>(?:;"&gt;&lt;strong&gt;(?:&lt;em&gt;)?)([^&lt;]+?)(?=(?:&lt;/em&gt;)?&lt;/strong&gt;)
</snippet></ROW><ROW><id>18219401</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; sample = '''\
...  ;"&gt;&lt;strong&gt;DeanSkyShadow&lt;/strong&gt;
...  ;"&gt;&lt;strong&gt;&lt;em&gt;Xavier&lt;/em&gt;&lt;/strong&gt;
... '''
&gt;&gt;&gt; re.findall(r'(?:;"&gt;&lt;strong&gt;(?:&lt;em&gt;)?)([^&lt;]+?)(?=(?:&lt;/em&gt;)?&lt;/strong&gt;)', sample)
['DeanSkyShadow', 'Xavier']
</snippet></ROW><ROW><id>18219401</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(htmltext)

for strong in soup.find_all('strong'):
    print strong.text
</snippet></ROW><ROW><id>18219433</id><snippet>string_escape</snippet></ROW><ROW><id>18219433</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; value = "{\\x22username\\x22:\\x229\\x22,\\x22password\\x22:\\x226\\x22,\\x22id\\x22:\\x222c8bfa56-f5d9\\x22, \\x22FName\\x22:\\x22AnkQcAJyrqpg\\x22}"
&gt;&gt;&gt; value.decode('string_escape')
'{"username":"9","password":"6","id":"2c8bfa56-f5d9", "FName":"AnkQcAJyrqpg"}'
&gt;&gt;&gt; json.loads(value.decode('string_escape'))
{u'username': u'9', u'password': u'6', u'id': u'2c8bfa56-f5d9', u'FName': u'AnkQcAJyrqpg'}
</snippet></ROW><ROW><id>18219448</id><snippet>def accuracy(n, i):
    return round(float(n) / 10**i) * 10**i
</snippet></ROW><ROW><id>18219601</id><snippet>class Foo(object):
    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, value):
        self._x = accuracy(value)

foo = Foo()

f = 1.5
foo.x = f     # set foo._x to accuracy(f)
print(foo.x)  # prints foo._x
</snippet></ROW><ROW><id>18219780</id><snippet>return GF2Polynomial(self.outFormat(self.bin/other.bin))</snippet></ROW><ROW><id>18219780</id><snippet>1</snippet></ROW><ROW><id>18219780</id><snippet>GF2Polynomial.parsePolyVariable()</snippet></ROW><ROW><id>18219780</id><snippet>letter = [str(m.group(0)) for m in re.finditer(r'[a-z]', poly)]
</snippet></ROW><ROW><id>18219780</id><snippet>degree = max(c); varmatch = True; key = letter[0]
</snippet></ROW><ROW><id>18219780</id><snippet>key = letter[0]</snippet></ROW><ROW><id>18219780</id><snippet>IndexError</snippet></ROW><ROW><id>18219780</id><snippet>super()</snippet></ROW><ROW><id>18219799</id><snippet>import numpy as np

y_data = [ 
     [[a,0],[b,1],[c,None],[d,6],[e,7]],
     [[a,5],[b,2],[c,1],[d,None],[e,1]],
     [[a,3],[b,None],[c,4],[d,9],[e,None]],
     ]

x_data = [0, 1, 2, 3, 4]

for i in range(5):
    xv = []
    yv = []
    for j, v in enumerate(row[i][1] for row in y_data):
        if v is not None:
            xv.append(j)
            yv.append(v)
    ax.plot(xv, yv, label=y_data[0][i][0])
</snippet></ROW><ROW><id>18220120</id><snippet>+=</snippet></ROW><ROW><id>18220120</id><snippet>''.join(buf)
</snippet></ROW><ROW><id>18220255</id><snippet>import lxml.etree as ET
import io

def div(x):
    return 1/x

content = '''\
    &lt;trueRoot&gt;
      &lt;logRoot a1="x1"&gt; 2 &lt;/logRoot&gt;
      &lt;logRoot a1="x1"&gt; 1 &lt;/logRoot&gt;
      &lt;logRoot a1="x1"&gt; 0 &lt;/logRoot&gt;            
    &lt;/trueRoot&gt;
    '''
for event, elem in ET.iterparse(io.BytesIO(content), events=('end', ), tag='logRoot'):
    num = int(elem.text)
    print('Calling div({})'.format(num))
    try:
        div(num)
    except ZeroDivisionError as e:
        print('Ack! ZeroDivisionError on line {}'.format(elem.sourceline))
</snippet></ROW><ROW><id>18220255</id><snippet>Calling div(2)
Calling div(1)
Calling div(0)
Ack! ZeroDivisionError on line 4
</snippet></ROW><ROW><id>18220269</id><snippet>Triangle.objects.filter(type="normal").values('color').annotate(amount=Sum('id', field="width * height")
</snippet></ROW><ROW><id>18220269</id><snippet>SELECT color, sum(width * height) as amount
FROM triangle 
WHERE type = 'normal'
GROUP BY color
</snippet></ROW><ROW><id>18220269</id><snippet>color</snippet></ROW><ROW><id>18220269</id><snippet>Triangle</snippet></ROW><ROW><id>18220296</id><snippet>transient</snippet></ROW><ROW><id>18220296</id><snippet>overrideredirect</snippet></ROW><ROW><id>18220296</id><snippet>import Tkinter as tk

class Example(tk.Frame):
    def __init__(self, root):
        tk.Frame.__init__(self, root)
        self.do_grab = tk.BooleanVar()
        cb = tk.Checkbutton(self, text="New window grabs all events", 
                            variable=self.do_grab, onvalue=True, offvalue=False)
        cb.pack()
        new_button = tk.Button(self, text="New window", command=self.on_click)
        new_button.pack()

    def on_click(self):
        self.top = tk.Toplevel(self)
        button = tk.Button(self.top, text="dismiss", command=self.top.destroy)
        do_grab = self.do_grab.get()

        if do_grab:
            label = tk.Label(self.top, wraplength=200,
                             text="This window grabs all events")
        else:
            label = tk.Label(self.top, wraplength = 200, 
                             text="This window does NOT grab all events")
        label.pack(fill="x")
        button.pack()

        if do_grab:
            self.top.grab_set()

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>18220314</id><snippet>scipy.misc.derivative</snippet></ROW><ROW><id>18220314</id><snippet>1.0</snippet></ROW><ROW><id>18220314</id><snippet>&gt;&gt;&gt; from scipy import misc
&gt;&gt;&gt; def x3(x): return x*x*x
... 
&gt;&gt;&gt; misc.derivative(x3, 1)
4.0
&gt;&gt;&gt; misc.derivative(x3, 1, dx=0.5)
3.25
&gt;&gt;&gt; misc.derivative(x3, 1, dx=0.25)
3.0625
&gt;&gt;&gt; misc.derivative(x3, 1, dx=1.0/2**16)
3.0000000002328306
</snippet></ROW><ROW><id>18220430</id><snippet>create table locations (
    id varchar(10) not null primary key,
    path varchar(1000) not null unique,
    name varchar(40) not null,
    loc varchar(255) not null, -- from your model
    rad varchar(255) not null, -- from your model
);
</snippet></ROW><ROW><id>18220430</id><snippet>id: wa
path: na/usa/wa
name: Washington
</snippet></ROW><ROW><id>18220536</id><snippet>gst-launch-0.10 alsasrc device=hw:1 ! queue ! audioconvert ! audioresample ! queue ! vader name=vader auto-threshold=true ! pocketsphinx lm=/home/pi/dev/scarlettPi/config/speech/lm/scarlett.lm dict=/home/pi/dev/scarlettPi/config/speech/dict/scarlett.dic hmm=/usr/local/share/pocketsphinx/model/hmm/en_US/hub4wsj_sc_8k name=listener ! fakesink dump=1
</snippet></ROW><ROW><id>18220536</id><snippet>pi@scarlettpi ~ $ pacmd dump
Welcome to PulseAudio! Use "help" for usage information.

....

load-module module-alsa-card device_id="0" name="platform-bcm2835_AUD0.0"
</snippet></ROW><ROW><id>18220536</id><snippet>load-module module-udev-detect

load-module module-bluetooth-discover

load-module module-esound-protocol-unix

load-module module-native-protocol-unix

load-module module-gconf

load-module module-default-device-restore

load-module module-rescue-streams

load-module module-always-sink

load-module module-intended-roles

load-module module-console-kit

load-module module-systemd-login

load-module module-position-event-sounds

load-module module-role-cork

load-module module-filter-heuristics

load-module module-filter-apply

load-module module-dbus-protocol

load-module module-switch-on-port-available

load-module module-cli-protocol-unix

load-module module-alsa-card device_id="1" name="usb-OmniVision_Technologies__Inc._USB_Camera-B4.09.24.1-01-CameraB409241" card_name="alsa_card.usb-OmniVision_Technologies__Inc._USB_Camera-B4.09.24.1-01-CameraB409241" namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no
</snippet></ROW><ROW><id>18220536</id><snippet>....
</snippet></ROW><ROW><id>18220536</id><snippet>load-module module-alsa-card device_id="1" name="usb-OmniVision_Technologies__Inc._USB_Camera-B4.09.24.1-01-CameraB409241" card_name="alsa_card.usb-OmniVision_Technologies__Inc._USB_Camera-B4.09.24.1-01-CameraB409241" namereg_fail=false tsched=yes fixed_latency_range=no ignore_dB=no deferred_volume=yes card_properties="module-udev-detect.discovered=1"
</snippet></ROW><ROW><id>18220536</id><snippet>self.pipeline = gst.parse_launch(' ! '.join(['alsasrc device=' + scarlett_config.gimmie('audio_input_device'),
                                           'queue',
                                           'audioconvert',
                                           'audioresample',
                                           'queue',
                                           'vader name=vader auto-threshold=true',
                                           'pocketsphinx lm=' + scarlett_config.gimmie('LM') + ' dict=' + scarlett_config.gimmie('DICT') + ' hmm=' + scarlett_config.gimmie('HMM') + ' name=listener',
                                           'fakesink dump=1']))
</snippet></ROW><ROW><id>18220551</id><snippet>x = a**d
x = x % n
</snippet></ROW><ROW><id>18220551</id><snippet>x = pow(a, d, n)
</snippet></ROW><ROW><id>18220773</id><snippet>revision = project.get('revision')</snippet></ROW><ROW><id>18220773</id><snippet>project.attrib.get('revision', 'No revision')</snippet></ROW><ROW><id>18220773</id><snippet>project</snippet></ROW><ROW><id>18220773</id><snippet>platform/test/code</snippet></ROW><ROW><id>18220773</id><snippet>project = root.find("./project[@name='%s']" % name)
</snippet></ROW><ROW><id>18220773</id><snippet>project</snippet></ROW><ROW><id>18220773</id><snippet>project</snippet></ROW><ROW><id>18220773</id><snippet>None</snippet></ROW><ROW><id>18220773</id><snippet>'NoneType' object has no attribute 'attrib'</snippet></ROW><ROW><id>18220773</id><snippet>project</snippet></ROW><ROW><id>18220773</id><snippet>project = root.find("./project[@name='%s']" % name)
if project:
    revision = project.get('revision')
    res = pattern.match(revision)
    return res.group(1)
else:
    default = root.find("./default")
    return default.attrib.get('revision')
</snippet></ROW><ROW><id>18220814</id><snippet>&gt;&gt;&gt; s = "THE SMASH-HIT, CRITICALLY ACCLAIMED SERIES RETURNS! Now that you've read the first two bestselling collections of SAGA , you're all caught up and ready to jump on the ongoing train with Chapter Thirteen, beginning an all-new monthly sci-fi/fantasy adventure, as Hazel and her parents head to the planet Quietus in search of cult romance novelist D. Oswald Heist."
&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; HTMLParser.HTMLParser().unescape(s)
u"THE SMASH-HIT, CRITICALLY ACCLAIMED SERIES RETURNS! Now that you've read the first two bestselling collections of SAGA , you're all caught up and ready to jump on the ongoing train with Chapter Thirteen, beginning an all-new monthly sci-fi/fantasy adventure, as Hazel and her parents head to the planet Quietus in search of cult romance novelist D. Oswald Heist."
</snippet></ROW><ROW><id>18220927</id><snippet>while</snippet></ROW><ROW><id>18220927</id><snippet>padded_buf = padded_buf[:-bytes_this_block]
</snippet></ROW><ROW><id>18220927</id><snippet>if</snippet></ROW><ROW><id>18220927</id><snippet>break</snippet></ROW><ROW><id>18220932</id><snippet>if choice == 'quit' or choice == '-q':
</snippet></ROW><ROW><id>18221169</id><snippet>write.write</snippet></ROW><ROW><id>18221474</id><snippet>extends</snippet></ROW><ROW><id>18221474</id><snippet>block</snippet></ROW><ROW><id>18221474</id><snippet>base.html</snippet></ROW><ROW><id>18221474</id><snippet>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;title&gt;{% block title %}{% endblock %}&lt;/title&gt;
    {% block head %}{% endblock %}
  &lt;/head&gt;
  &lt;body&gt;
    {% block body %}
      Empty page.
    {% endblock %}
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>18221474</id><snippet>page.html</snippet></ROW><ROW><id>18221474</id><snippet>{% extends "base.html" %}
{% block title %}Page 1 title{% endblock %}
{% block body %}
   Real page content.
   {% block main %}
      Subpage of page.html can also override this main block.
   {% endblock %}
{% endblock %}
</snippet></ROW><ROW><id>18221553</id><snippet>wsol</snippet></ROW><ROW><id>18221553</id><snippet>x1, xy, x2, y2 = wsol.T
</snippet></ROW><ROW><id>18221729</id><snippet>ax = gca()
plot(range(15), label='test')
h, l = ax.get_legend_handles_labels()
figlegend(h, l, 'upper center')
</snippet></ROW><ROW><id>18221729</id><snippet> legText.append(a.axesLegend)
</snippet></ROW><ROW><id>18221743</id><snippet>name = input('Enter your name: ')
if len(name) &lt;= 3:
  greeting = "Hi {}, you have a short name.".format(name)

elif len(name) &gt; 8:
  greeting = "Hi {}, you have a long name.".format(name)

elif len(name) &gt;= 4:
  greeting = "Hi {}, nice to meet you.".format(name)

print(greeting)
</snippet></ROW><ROW><id>18221957</id><snippet>import re
print re.sub(r'(\D+)(\d)$',r'\g&lt;1&gt;0\2','file1')
</snippet></ROW><ROW><id>18222040</id><snippet>print</snippet></ROW><ROW><id>18222040</id><snippet>print '&lt;img src="' + site + '"&gt;'
</snippet></ROW><ROW><id>18222040</id><snippet>str.format()</snippet></ROW><ROW><id>18222040</id><snippet>print '&lt;img src="{0}"&gt;'.format(site)
</snippet></ROW><ROW><id>18222446</id><snippet>%m</snippet></ROW><ROW><id>18222446</id><snippet>%d</snippet></ROW><ROW><id>18222446</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime('Aug 10', '%b %d')
datetime.datetime(1900, 8, 10, 0, 0)
</snippet></ROW><ROW><id>18222651</id><snippet>def download_and_save_the_file(some_url):
    thestring = requests.get(some_url).content
    #Make sure you create unique names
    something = unique_filename(some_url)
    file_ref = open(something)
    fileref.write(the_string)
    fileref.close()  
</snippet></ROW><ROW><id>18222651</id><snippet>from multiprocessing import Pool,cpu_count

p = Pool(cpu_count()-1)
p.map(download_and_save_the_file,files_to_get)
</snippet></ROW><ROW><id>18222932</id><snippet>for x in expected_value.keys():
    print("Stock: ", x, "\tExpected value:", Expected_Sale_value[x])
</snippet></ROW><ROW><id>18222932</id><snippet>print</snippet></ROW><ROW><id>18222932</id><snippet>Expected_Sale_value</snippet></ROW><ROW><id>18222932</id><snippet>expected_value</snippet></ROW><ROW><id>18222932</id><snippet>Expected_Sale_value</snippet></ROW><ROW><id>18222932</id><snippet>for key, value in expected_value.items():
    print("Stock: ", key, "\tExpected value:", value)
</snippet></ROW><ROW><id>18223034</id><snippet>inc</snippet></ROW><ROW><id>18223034</id><snippet>import re

class Replace:
    def __init__(self):
        self.count = 0
    def __call__(self, match):
        self.count += 1
        if self.count &gt; 1:
            return '5'
        else:
            return match.group()

value = "assessments"
nval = re.sub(r's', Replace(), value, flags=re.IGNORECASE)
print(nval)
</snippet></ROW><ROW><id>18223034</id><snippet>s</snippet></ROW><ROW><id>18223034</id><snippet>match.group()</snippet></ROW><ROW><id>18223034</id><snippet>import itertools

def Replace():
    count = itertools.count()
    def wrapper(match):
        return '5' if next(count) &gt; 0 else match.group()
    return wrapper
</snippet></ROW><ROW><id>18223178</id><snippet>list.index</snippet></ROW><ROW><id>18223178</id><snippet>index</snippet></ROW><ROW><id>18223178</id><snippet>'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</snippet></ROW><ROW><id>18223178</id><snippet>ord</snippet></ROW><ROW><id>18223178</id><snippet>chr</snippet></ROW><ROW><id>18223272</id><snippet>sudo vi ~/.bash_profile
</snippet></ROW><ROW><id>18223272</id><snippet>export PYTHONPATH=/usr/local/lib/python2.7/site-packages/
</snippet></ROW><ROW><id>18223310</id><snippet>apply_async</snippet></ROW><ROW><id>18223310</id><snippet>worker</snippet></ROW><ROW><id>18223310</id><snippet>apply_async</snippet></ROW><ROW><id>18223310</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>18223310</id><snippet>pool.map</snippet></ROW><ROW><id>18223310</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>18223535</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime('130129:1007', '%y%m%d:%H%M')
datetime.datetime(2013, 1, 29, 10, 7)
</snippet></ROW><ROW><id>18223561</id><snippet>filename = "/a/text/file"
input_file = open(filename)
</snippet></ROW><ROW><id>18223561</id><snippet>open()</snippet></ROW><ROW><id>18223561</id><snippet>'r'</snippet></ROW><ROW><id>18223561</id><snippet>contents = input_file.readlines()
input_file.close()
</snippet></ROW><ROW><id>18223561</id><snippet>readlines()</snippet></ROW><ROW><id>18223561</id><snippet>close()</snippet></ROW><ROW><id>18223561</id><snippet>biography = contents[4:]
</snippet></ROW><ROW><id>18223561</id><snippet>with open(filename) as input_file:
    biography = input_file.readlines()[4:]
</snippet></ROW><ROW><id>18223561</id><snippet>with</snippet></ROW><ROW><id>18223561</id><snippet>close()</snippet></ROW><ROW><id>18223561</id><snippet>with open(filename) as input_file:
    contents = input_file.readlines()
person = contents[0]
birth_year = contents[1]
...
biography = contents[4:]
</snippet></ROW><ROW><id>18223583</id><snippet>$json = str_replace("u'", "'", $json);
$json = str_replace("'", '"', $json);
</snippet></ROW><ROW><id>18223793</id><snippet>&gt;&gt;&gt; vowels = set(['a', 'e', 'i', 'o', 'u'])
&gt;&gt;&gt; inp = "foobar"
&gt;&gt;&gt; bool(vowels.intersection(inp))
True
&gt;&gt;&gt; bool(vowels.intersection('qwty'))
False
</snippet></ROW><ROW><id>18224035</id><snippet>((?&lt;=TCID\s{3}:\s)).+</snippet></ROW><ROW><id>18224047</id><snippet>str.split</snippet></ROW><ROW><id>18224047</id><snippet>with open('filename') as f:
   table_data = [ line.split() for line in f]
</snippet></ROW><ROW><id>18224047</id><snippet>def func(x):
    try:                                                         
        return int(x)
    except ValueError:
        return x
&gt;&gt;&gt; with open('abc1') as f:
...     table_data = [[ func(x) for x in line.split()] for line in f]
...     
&gt;&gt;&gt; table_data
[[12, 'john', 'E', 44, 'L'],
 [13, 'adam', 'D', 78, 'L'],
 [14, 'tue', 'E', 98, 'L']]
</snippet></ROW><ROW><id>18224216</id><snippet>&gt;&gt;&gt; strs = "#define FULL_CHIP /* Turn on for chip level design */"
&gt;&gt;&gt; if strs.startswith('#define FULL_CHIP'):
       strs = '//' + strs
&gt;&gt;&gt; strs
'//#define FULL_CHIP /* Turn on for chip level design */'
</snippet></ROW><ROW><id>18224216</id><snippet>()</snippet></ROW><ROW><id>18224216</id><snippet>&gt;&gt;&gt; strs = "#define FULL_CHIP /* Turn on for chip level design */"
&gt;&gt;&gt; re.sub(r'(#define FULL_CHIP)',r'//\1', strs)
'//#define FULL_CHIP /* Turn on for chip level design */'
</snippet></ROW><ROW><id>18224216</id><snippet>#define FULL_CHIP</snippet></ROW><ROW><id>18224216</id><snippet>#define FULL_CHIP</snippet></ROW><ROW><id>18224216</id><snippet>^</snippet></ROW><ROW><id>18224216</id><snippet>&gt;&gt;&gt; re.sub(r'^(#define FULL_CHIP)',r'//\1', strs)
</snippet></ROW><ROW><id>18224625</id><snippet>self.charinfo</snippet></ROW><ROW><id>18224625</id><snippet>charinfo</snippet></ROW><ROW><id>18224625</id><snippet>self.charinfo</snippet></ROW><ROW><id>18224625</id><snippet>app.charinfo</snippet></ROW><ROW><id>18224625</id><snippet>for index in self.charbox.curselection():
    charfilelocale = self.charbox.get(int(index))
    charfile = open(app.chardir + app.charprefix + charfilelocale, 'r+')
    # notice the self.charinfo here
    self.charinfo = self.charfile.read().splitlines(0)
</snippet></ROW><ROW><id>18224625</id><snippet>self.charinfo</snippet></ROW><ROW><id>18224625</id><snippet>self.charinfo = None
for index in self.charbox.curselection():
    charfilelocale = self.charbox.get(int(index))
    charfile = open(app.chardir + app.charprefix + charfilelocale, 'r+')
    self.charinfo = self.charfile.read().splitlines(0)
</snippet></ROW><ROW><id>18224782</id><snippet>from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

class Comment(models.Model):
    comment_author = models.ForeignKey(MyUser, related_name='written_comments')
    comment_content = models.CharField(max_length=500)
    comment_date = models.DateTimeField(auto_now_add=True)
    rating = models.IntegerField(default=0)

    # These allow you to relate this comment instance to any type of object
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = generic.GenericForeignKey('content_type', 'object_id')


question = Question(...)
question.save()
answer = Answer(...)
answer.save()

q_comment = Comment(content_object=question, comment_author=..., ...)
q_comment.save()

a_comment = Comment(content_object=answer, comment_autho=..., ...)
a_comment.save()

q_comment.content_object  # Is the instance of the question
a_comment.content_object  # Is the instance of the answer
</snippet></ROW><ROW><id>18225046</id><snippet>globals.py</snippet></ROW><ROW><id>18225308</id><snippet>binary</snippet></ROW><ROW><id>18225308</id><snippet>bson</snippet></ROW><ROW><id>18225477</id><snippet>X_test = vectorizer.fit_transform(sample_tweets)
</snippet></ROW><ROW><id>18225477</id><snippet>fit_transform</snippet></ROW><ROW><id>18225477</id><snippet>transform</snippet></ROW><ROW><id>18225477</id><snippet>sample_tweets</snippet></ROW><ROW><id>18225477</id><snippet>for tweet, sentiment in zip(list_of_sample_tweets, y_pred):
    print("Tweet: %s" % tweet)
    print("Sentiment: %s" % sentiment)
</snippet></ROW><ROW><id>18225567</id><snippet>v</snippet></ROW><ROW><id>18225567</id><snippet>2</snippet></ROW><ROW><id>18225567</id><snippet>v</snippet></ROW><ROW><id>18225567</id><snippet>() -&gt; sum + a</snippet></ROW><ROW><id>18225567</id><snippet>def x():
    return sum + a

x = lambda: sum + a
</snippet></ROW><ROW><id>18225567</id><snippet>sum</snippet></ROW><ROW><id>18225567</id><snippet>accum</snippet></ROW><ROW><id>18225567</id><snippet>sum</snippet></ROW><ROW><id>18225611</id><snippet>for link in br.links(text_regex=re.compile('^((?!IMG).)*$')):
    new_url = urlparse.urljoin(link.base_url, link.url)
    ......

key_found_flag = False
for key in contact_keys:
    if key in found_contact_urls.keys():   
        print found_contact_urls[key]
        key_found_flag = True
        break
if not key_found_flag:
    print url
</snippet></ROW><ROW><id>18225687</id><snippet>&gt;&gt;&gt; ss = ''
&gt;&gt;&gt; for word in ['this','his','is','s']: # Attach the words
...     if word not in ss.split():       # if they are not already present in the list of words so far
...        ss = ss + word + ' '          # to ss(substring) AFTER ss.
...
&gt;&gt;&gt; ss
'this his is s '
</snippet></ROW><ROW><id>18226114</id><snippet>url</snippet></ROW><ROW><id>18226114</id><snippet>def get(url):  
    run("wget '{}'".format(url))
</snippet></ROW><ROW><id>18226114</id><snippet>'</snippet></ROW><ROW><id>18226114</id><snippet>&amp;</snippet></ROW><ROW><id>18226147</id><snippet># we are checking if we can make s2 from s1 just with inserts
def check(s1, s2):

    # indices for iterating through s1 and s2
    i1 = 0
    i2 = 0

    # dictionary to keep track of where to insert what
    inserts = dict()
    buffer = ""
    pos = 0

    while i1 &lt; len(s1) and i2 &lt; len(s2):
        if s1[i1] == s2[i2]:
            i1 += 1
            i2 += 1
            if buffer != "":
                inserts[pos] = buffer
                buffer = ""
            pos += 1
        else:
            buffer += s2[i2]
            i2 += 1

    # if possible return the what and where to insert, otherwise return false
    if i1 == len(s1):
        return inserts
    else:
        return False
</snippet></ROW><ROW><id>18226270</id><snippet>.docx</snippet></ROW><ROW><id>18226270</id><snippet>Word</snippet></ROW><ROW><id>18226270</id><snippet>Microsft Word 2013</snippet></ROW><ROW><id>18226270</id><snippet>Word.Application</snippet></ROW><ROW><id>18226270</id><snippet>HKEY_CLASSES_ROOT\CLSID\</snippet></ROW><ROW><id>18226270</id><snippet>{00020-0000-0000-0000-00000-0000}</snippet></ROW><ROW><id>18226270</id><snippet>Microsoft Word Document</snippet></ROW><ROW><id>18226270</id><snippet>ProgID</snippet></ROW><ROW><id>18226270</id><snippet>Word.Document.8</snippet></ROW><ROW><id>18226270</id><snippet>import win32com.client as win32

word = win32.Dispatch("Word.Document.8")
word.Visible = 0
word.Documents.Open("myfile.docx")
doc = word.ActiveDocument
print doc.Content.Text
word.Quit()
</snippet></ROW><ROW><id>18226270</id><snippet>00020-000....</snippet></ROW><ROW><id>18226273</id><snippet>i</snippet></ROW><ROW><id>18226273</id><snippet>for i in range...</snippet></ROW><ROW><id>18226273</id><snippet>uncrypted.append(i)</snippet></ROW><ROW><id>18226273</id><snippet>listdefault[i].istitle()</snippet></ROW><ROW><id>18226273</id><snippet>listdefault[:-i].istitle()</snippet></ROW><ROW><id>18226273</id><snippet>for w in listdefault[::-1]:
    if w.istitle():
        w = w.lower()
        uncrypted.append(w)
</snippet></ROW><ROW><id>18226273</id><snippet>listdefault[::-1]</snippet></ROW><ROW><id>18226273</id><snippet>reversed(listdefault)</snippet></ROW><ROW><id>18226273</id><snippet>solution = ' '.join([w.lower() for w in listdefault[::-1] if w.istitle()])
</snippet></ROW><ROW><id>18226292</id><snippet>&gt;&gt;&gt; class User(object):
...     def __init__(self, username):
...         self.username = username
...
&gt;&gt;&gt; def object_hook(name, d):
...     cls = {'WP_User': User}[name]
...     # The following was added by me -Antti
...     d = convert_member_dict(d)
...     return cls(**d)
...
&gt;&gt;&gt; user = loads(data, object_hook=object_hook)
&gt;&gt;&gt; user.username
'admin'
</snippet></ROW><ROW><id>18226292</id><snippet>object_hook</snippet></ROW><ROW><id>18226504</id><snippet>target_func</snippet></ROW><ROW><id>18226504</id><snippet>mc</snippet></ROW><ROW><id>18226504</id><snippet>from threading import Thread
from Queue import Queue

....


if __name__ == '__main__':
    mc = myClass()

    q = Queue()

    p = Thread(target = mc.target_func, args = ('bob', q,))
    p.start()
    ret = q.get()
    p.join()

    p2 = Thread(target = mc.target_func, args = ('tom', q,))
    p2.start()
    ret = q.get()
    p2.join()
</snippet></ROW><ROW><id>18226872</id><snippet>dict.viewkeys</snippet></ROW><ROW><id>18226872</id><snippet>&gt;&gt;&gt; {'a':4, 'b':2}.viewkeys() == {'a':0, 'b':1}.viewkeys()
True
</snippet></ROW><ROW><id>18226872</id><snippet>dict.keys</snippet></ROW><ROW><id>18226872</id><snippet>&gt;&gt;&gt; ['a', 'b', 'c'] == ['a', 'c', 'b']    #same keys, but not equal
False
&gt;&gt;&gt; set(['a', 'b', 'c']) == set(['a', 'c', 'b']) #sets compare fine
True
</snippet></ROW><ROW><id>18226872</id><snippet>dict.keys()</snippet></ROW><ROW><id>18226946</id><snippet>safe</snippet></ROW><ROW><id>18226946</id><snippet>&lt;div class="flashes"&gt;
  {% for message in get_flashed_messages()%}
    {{ message|safe }}
  {% endfor %}
&lt;/div&gt;
</snippet></ROW><ROW><id>18227032</id><snippet>out_file.seek(0)</snippet></ROW><ROW><id>18227032</id><snippet>out_file.flush()</snippet></ROW><ROW><id>18227142</id><snippet>CrawlSpider</snippet></ROW><ROW><id>18227142</id><snippet>Rule()</snippet></ROW><ROW><id>18227142</id><snippet>LinkExtractor</snippet></ROW><ROW><id>18227142</id><snippet>from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.selector import HtmlXPathSelector

class DmozSpider(CrawlSpider):
    name = "dmoz"
    allowed_domains = ["dmoz.org"]
    start_urls = [
        "http://www.dmoz.org/"
    ]

    rules = (
        Rule(
            SgmlLinkExtractor(allow_domains=("dmoz.org",)),
            callback='parse_page', follow=True
        ),
    )

    def parse_page(self, response):
        hxs = HtmlXPathSelector(response)
        titles = hxs.select('//ul[@class="directory-url"]/li/a/text()').extract()
        for t in titles:
            print "Title: ", t
</snippet></ROW><ROW><id>18227142</id><snippet>parse</snippet></ROW><ROW><id>18227157</id><snippet>regex = r'978(?:-?\d){10}'
</snippet></ROW><ROW><id>18227384</id><snippet>next</snippet></ROW><ROW><id>18227384</id><snippet>enumerate</snippet></ROW><ROW><id>18227384</id><snippet>&gt;&gt;&gt; next((i for i,x in enumerate(li) if 'amp' in x), None)
5
</snippet></ROW><ROW><id>18227384</id><snippet>None</snippet></ROW><ROW><id>18227528</id><snippet>from subprocess import check_output
output = check_output('netsh wlan connect _Wifi_name_', shell=True)

print output
</snippet></ROW><ROW><id>18227528</id><snippet>with open('mypasswords.txt') as fh:
    for line in fh:
        ...
</snippet></ROW><ROW><id>18227528</id><snippet>from subprocess import Popen, STDOUT, PIPE
from time import sleep

handle = Popen('netsh wlan connect _Wifi_name_', shell=True, stdout=PIPE, stderr=STDOUT, stdin=PIPE)

sleep(5) # wait for the password prompt to occur (if there is one, i'm on Linux and sudo will always ask me for a password so i'm just assuming windows isn't retarded).
handle.stdint.write('mySecretP@ssW0rd\n')
while handle.poll() == None:
    print handle.stdout.readline().strip()
</snippet></ROW><ROW><id>18227815</id><snippet>if x == "A" or "O":</snippet></ROW><ROW><id>18227815</id><snippet>if x == "A" or x == "O":</snippet></ROW><ROW><id>18227815</id><snippet>if x == "A" or "O":</snippet></ROW><ROW><id>18227815</id><snippet>true</snippet></ROW><ROW><id>18227815</id><snippet>if x == "A" or "O":</snippet></ROW><ROW><id>18227815</id><snippet>if (x == "A") or ("O")</snippet></ROW><ROW><id>18227815</id><snippet>"O"</snippet></ROW><ROW><id>18227815</id><snippet>true</snippet></ROW><ROW><id>18227815</id><snippet>x</snippet></ROW><ROW><id>18227815</id><snippet>"A"</snippet></ROW><ROW><id>18227815</id><snippet>or</snippet></ROW><ROW><id>18227815</id><snippet>true</snippet></ROW><ROW><id>18227815</id><snippet>if x in ["A", "O"]:
</snippet></ROW><ROW><id>18227903</id><snippet>n</snippet></ROW><ROW><id>18227903</id><snippet>A</snippet></ROW><ROW><id>18227903</id><snippet>d</snippet></ROW><ROW><id>18227903</id><snippet>A = [1, 4, 5, 8, 10, 13]    # in sorted order
Aset = set(A)

for d in range(1, 13):
    already_seen = set()
    for a in A:
        if a not in already_seen:
            b = a
            count = 1
            while b + d in Aset:
                b += d
                count += 1
                already_seen.add(b)
            # if there is a hole to jump over:
            if b + 2 * d in Aset:
                b += 2 * d
                count += 1
                while b + d in Aset:
                    b += d
                    count += 1
                    # don't record in already_seen here
            print "found %d items in %d .. %d" % (count, a, b)
            # collect here the largest 'count'
</snippet></ROW><ROW><id>18227903</id><snippet>O(n*d)</snippet></ROW><ROW><id>18227903</id><snippet>d</snippet></ROW><ROW><id>18227903</id><snippet>n</snippet></ROW><ROW><id>18227903</id><snippet>n</snippet></ROW><ROW><id>18227903</id><snippet>a</snippet></ROW><ROW><id>18227903</id><snippet>O(n+n+n) = O(n)</snippet></ROW><ROW><id>18227903</id><snippet>d</snippet></ROW><ROW><id>18227903</id><snippet>n</snippet></ROW><ROW><id>18228086</id><snippet>[0 for x in xrange(2)]
</snippet></ROW><ROW><id>18228086</id><snippet>zeros2 = [0 for x in xrange(2)]
# create 5 copies of zeros2
zeros2x5 = [zeros2[:] for x in xrange(5)] 
</snippet></ROW><ROW><id>18228133</id><snippet>for parent in tree.findall('./Parent'):
    children = [child for child in parent.findall('./Child')]
    print '{} has {}'.format(parent.get('name'), ' '.join(c.get('name') for c in children))
</snippet></ROW><ROW><id>18228133</id><snippet>getparent()</snippet></ROW><ROW><id>18228133</id><snippet>import lxml.etree
tree = lxml.etree.parse('1.xml')
for child in tree.findall('./Parent/Child'):
    print '{} has {}'.format(child.getparent().get('name'), child.get('name'))
</snippet></ROW><ROW><id>18228240</id><snippet>path = path.decode('utf-8')
</snippet></ROW><ROW><id>18228240</id><snippet>&gt;&gt;&gt; s = "Cura\xc3\xa7ao"
&gt;&gt;&gt; print s.decode('utf-8')
Curaçao
</snippet></ROW><ROW><id>18228360</id><snippet>def factorial(n):
    result = 1
    for i in range(1, n+1):
        result *= i
    return result

n = input("n! (for n&lt;31)\n\nEnter n: ")
print("n!: %d" % factorial(n))
</snippet></ROW><ROW><id>18228360</id><snippet>def factorial_r(n):
    if n &lt; 2:
        return 1
    return n * factorial_r(n-1)

n = input("n! (for n&lt;31)\n\nEnter n: ")
print("n!: %d" % factorial_r(n))
</snippet></ROW><ROW><id>18228761</id><snippet>&gt;&gt;&gt; myString = "This is %s string. It has %s replacements."
&gt;&gt;&gt; myParams = [ "some", "two" ]
&gt;&gt;&gt; myString % tuple(myParams)
'This is some string. It has two replacements.'
</snippet></ROW><ROW><id>18228761</id><snippet>myParams</snippet></ROW><ROW><id>18228761</id><snippet>&gt;&gt;&gt; myString = "This is %s string. It has %s replacements."
&gt;&gt;&gt; myParams = ("some", "two")
&gt;&gt;&gt; myString % myParams
'This is some string. It has two replacements.'
</snippet></ROW><ROW><id>18228761</id><snippet>def myFunction(myString, myParams):
    return myString % tuple(myParams)

myFunction("This is %s string. It has %s replacements.", ("some", "two"))
</snippet></ROW><ROW><id>18228761</id><snippet>myParams</snippet></ROW><ROW><id>18228761</id><snippet>def myFunction(myString, *myParams):
    return myString % myParams

myFunction("This is %s string. It has %s replacements.", "some", "two")
</snippet></ROW><ROW><id>18228761</id><snippet>logging.log()</snippet></ROW><ROW><id>18228775</id><snippet>set.union</snippet></ROW><ROW><id>18228775</id><snippet>&gt;&gt;&gt; dic = {'list_1':[3, 'green', 'yellow', 'black'], 'list_2':[2, 'green', 'blue']}
&gt;&gt;&gt; set().union(*(x[1:] for x in dic.itervalues()))
set(['blue', 'black', 'green', 'yellow'])
</snippet></ROW><ROW><id>18228775</id><snippet>list()</snippet></ROW><ROW><id>18228775</id><snippet>newlist = []
for colors in dic.values():
    lis = colors[1:]        #do slicing here
    for item in lis:
        if item not in newlist:
            newlist.append(item)
print newlist #['green', 'blue', 'yellow', 'black']
</snippet></ROW><ROW><id>18228853</id><snippet>def filter_nodes(self, **kwargs):
    return [n for n in self.pcode 
            if all(getattr(n, k) == v for k, v in kwargs.iteritems())]
</snippet></ROW><ROW><id>18228933</id><snippet>gst-launch alsasrc device=hw:1 ! queue ! audioconvert ! audioresample ! "audio/x-raw-int, rate=16000, width=16, depth=16, channels=1" ! tee name=t ! queue ! audioresample ! "audio/x-raw-int, rate=8000" ! fvader name=vader auto-threshold=true ! pocketsphinx lm=/home/pi/dev/scarlettPi/config/speech/lm/scarlett.lm dict=/home/pi/dev/scarlettPi/config/speech/dict/scarlett.dic hmm=/usr/local/share/pocketsphinx/model/hmm/en_US/hub4wsj_sc_8k name=listener ! fakesink dump=1 t. ! valve drop=0 ! queue ! wavenc ! filesink location=test.wav async=0
</snippet></ROW><ROW><id>18228933</id><snippet>self.recording_valve = gst.element_factory_make('valve')
</snippet></ROW><ROW><id>18228933</id><snippet>self.pipeline.add (self.recording_valve)
</snippet></ROW><ROW><id>18228933</id><snippet>self.recording_valve.link (self.next_element)
</snippet></ROW><ROW><id>18228933</id><snippet>self.recording_valve.set_property('drop', False)
</snippet></ROW><ROW><id>18228933</id><snippet>self.recording_valve.set_property('drop', True)
</snippet></ROW><ROW><id>18228933</id><snippet>self.tee.get_request_pad('src%d').link(self.recording_valve_queue.get_pad('sink'))
</snippet></ROW><ROW><id>18229269</id><snippet>pickle.load('afile')
</snippet></ROW><ROW><id>18229269</id><snippet>pickle.load(open('afile'))
</snippet></ROW><ROW><id>18229495</id><snippet>webbrowser.open('file://'+os.getcwd()+'/gif_name.gif')</snippet></ROW><ROW><id>18229685</id><snippet>@profile</snippet></ROW><ROW><id>18229685</id><snippet>import __builtin__

try:
    __builtin__.profile
except AttributeError:
    # No line profiler, provide a pass-through version
    def profile(func): return func
    __builtin__.profile = profile
</snippet></ROW><ROW><id>18229685</id><snippet>@profile</snippet></ROW><ROW><id>18229685</id><snippet>profile_support.py</snippet></ROW><ROW><id>18229685</id><snippet>import __builtin__

try:
    profile = __builtin__.profile
except AttributeError:
    # No line profiler, provide a pass-through version
    def profile(func): return func
</snippet></ROW><ROW><id>18229685</id><snippet>__builtin__.profile</snippet></ROW><ROW><id>18229685</id><snippet>from profile_support import profile</snippet></ROW><ROW><id>18229685</id><snippet>@profile</snippet></ROW><ROW><id>18229879</id><snippet>hooks/</snippet></ROW><ROW><id>18230041</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>18230041</id><snippet>from collections import defaultdict
import csv

species = defaultdict(list)

with open('speciesandbss.csv', 'rb') as inputfile:
    for row in csv.reader(inputfile):
        species[row[0]].append(row[1])

for name in sorted(species, key=str.lower):
    print '{} = {}'.format(name, species[name])
</snippet></ROW><ROW><id>18230041</id><snippet>acutata = ['0.16509', '0.16509', '0.16509']
acutocostata = ['0.03145', '0.01936', '0.01781', '0.01698', '0.01684', '0.01077']
adkinsi = ['0.16509']
Aenona = ['0.01311', '0.01311']
aequilateralis = ['0.00495', '0.00445', '0.00368', '0.00356']
agdjakendensis = ['0.00628']
Agerostrea = ['0.01764']
albertensis = ['0.00852', '0.00356', '0.00495', '0.00461', '0.00445', '0.0041']
alta = ['0.00328', '0.33148', '0.33148', '0.43129', '0.33148', '0.325', '0.17882', '0.00307']
alternata = ['0.04929', '0.03373', '0.01311']
americana = ['0.01497', '0.00436', '0.01497', '0.00495', '0.00461', '0.00445', '0.00105']
anacachoensis = ['0.05696', '0.05696', '0.05172', '0.03373']
angulatum = ['0.01179']
anomala = ['0.00852']
Anomia = ['0.00852', '0.00506', '0.02955', '0.00786']
anteradiata = ['0.43129', '0.16509']
antroea = ['0.01373']
antrosa = ['0.01103']
Aphrodina = ['0.43129', '0.01311']
apressus = ['0.01564']
Arca = ['0.01179', '0.01311', '0.01311', '0.01311', '0.01224', '0.01224']
archeri = ['0.16509', '0.16509', '0.16509', '0.16509', '0.16509', '0.16509', '0.16509']
Arctica = ['0.00203']
argentaria = ['0.01233', '0.33148', '0.33148', '0.33148', '0.33148', '0.43129', '0.43129', '0.21502', '0.01311', '0.01224', '0.00352', '0.01311', '0.01311', '0.01179', '0.01373', '0.01311', '0.01311', '0.01224', '0.01224', '0.01224', '0.01224', '0.16509', '0.01564']
armatum = ['0.33148', '0.33148', '0.33148', '0.33148']
Ascaulocardium = ['0.43129', '0.21502']
assiniboiensis = ['0.00401', '0.00436', '0.00436', '0.00685', '0.00495', '0.00495', '0.00486', '0.00461', '0.00453', '0.00445']
assiniboinensis = ['0.00117']
Astarte = ['0.01497', '0.01311']
balchii = ['0.00786']
balticus = ['0.05696', '0.05696', '0.05696', '0.05238', '0.03623', '0.03373', '0.00724', '0.04574']
barabini = ['0.01233', '0.00852', '0.00506']
Barbatia = ['0.05696', '0.03373', '0.18121', '0.17882', '0.01224']
bartoni = ['0.16509']
bartrami = ['0.325', '0.26095', '0.25697', '0.17882', '0.01311']
bella = ['0.01311', '0.01311', '0.01311', '0.01311', '0.01311', '0.01311', '0.01311', '0.01311', '0.01764']
bellisculptus = ['0.05696', '0.05696', '0.03373', '0.25697', '0.01311', '0.01224', '0.01311', '0.01224', '0.01179', '0.01311', '0.01311', '0.01311', '0.01311', '0.01311']
berryi = ['0.43129', '0.17882']
biplicata = ['0.05696', '0.03373', '0.33148', '0.33148', '0.43129', '0.01224', '0.16509', '0.16509', '0.16509', '0.16509', '0.16509', '0.16509']
bisulcata = ['0.01311', '0.01224', '0.01224']
borealis = ['0.01233', '0.00852', '0.00452', '0.00401', '0.00852', '0.00452', '0.00401', '0.00436', '0.01497', '0.02971']
bowiei = ['0.16509', '0.16509']
Breviarca = ['0.01311', '0.01311']
Brevicardium = ['0.16509']
brevifrons = ['0.43129']
bryani = ['0.16509']
bulbosa = ['0.16509', '0.16509', '0.16509']
burlingtonensis = ['0.05696', '0.05696', '0.04929', '0.03373', '0.325', '0.01311', '0.01179', '0.04574']
</snippet></ROW><ROW><id>18230041</id><snippet>with open('outputfile.csv', 'wb') as outputfile:
    writer = csv.writer(outputfile)
    writer.writerows([n, min(values), max(values)] for n, v in species.iteritems() for values in (map(float, v),))
</snippet></ROW><ROW><id>18230366</id><snippet>only_last_and_first = [d for d in L if 'firstname' in d and 'lastname' in d]
</snippet></ROW><ROW><id>18230366</id><snippet>&gt;&gt;&gt; L = [{'color':'yellow','fruit':'banana'},{'firstname':'Jack','lastname':'Black'}]
&gt;&gt;&gt; [d for d in L if 'firstname' in d and 'lastname' in d]
[{'lastname': 'Black', 'firstname': 'Jack'}]
</snippet></ROW><ROW><id>18230366</id><snippet>next()</snippet></ROW><ROW><id>18230366</id><snippet>first = next((d for d in L if 'firstname' in d and 'lastname' in d), None)
</snippet></ROW><ROW><id>18230366</id><snippet>first</snippet></ROW><ROW><id>18230366</id><snippet>None</snippet></ROW><ROW><id>18230366</id><snippet>for</snippet></ROW><ROW><id>18230366</id><snippet>first = None
for d in L:
    if 'firstname' in d and 'lastname' in d:
        first = d
        break
</snippet></ROW><ROW><id>18230393</id><snippet>a</snippet></ROW><ROW><id>18230393</id><snippet>b</snippet></ROW><ROW><id>18230393</id><snippet>&gt;&gt;&gt; def union(q,p):
...       q = q + p
...       q = set(q)
...       return q, p
... 
&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [2,4,6]
&gt;&gt;&gt; a, b = union(a, b)
&gt;&gt;&gt; a
set([1, 2, 3, 4, 6])
&gt;&gt;&gt; b
[2, 4, 6]
</snippet></ROW><ROW><id>18230393</id><snippet>list</snippet></ROW><ROW><id>18230393</id><snippet>&gt;&gt;&gt; list(a)
[1, 2, 3, 4, 6]
</snippet></ROW><ROW><id>18230419</id><snippet>    for rownum in xrange(sh.nrows):
        row = sh.row_values(rownum)
        if row[0] == "clientegen":  # Check if "clientgen" is the first element of the row
            finalarray = list(row)  # If so, make a copy of it and name it `finalarray`
        wr.writerow(row)
</snippet></ROW><ROW><id>18230420</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>18230420</id><snippet>import numpy as np
a = np.loadtxt(filename, delimiter=',',usecols=(1,2,3,4),
               skiprows=1, dtype=float)
</snippet></ROW><ROW><id>18230420</id><snippet>#array([[ 1.,  1.,  1.,  0.],
#       [ 0.,  1.,  0.,  1.],
#       [ 1.,  0.,  0.,  0.],
#       [ 1.,  1.,  1.,  0.],
#       [ 0.,  0.,  0.,  0.],
#       [ 1.,  1.,  1.,  1.]])
</snippet></ROW><ROW><id>18230420</id><snippet>structured arrays</snippet></ROW><ROW><id>18230420</id><snippet>a = np.loadtxt('stack.txt', delimiter=',',usecols=(1,2,3,4),
        skiprows=1, dtype=[('Attribute 1', float),
                           ('Attribute 2', float),
                           ('Attribute 3', float),
                           ('Attribute 4', float)])
</snippet></ROW><ROW><id>18230420</id><snippet>a['Attribute 1']
#array([ 1.,  0.,  1.,  1.,  0.,  1.])
</snippet></ROW><ROW><id>18230425</id><snippet>{% load 'menu.html' %}</snippet></ROW><ROW><id>18230425</id><snippet>{% include 'menu.html' %}</snippet></ROW><ROW><id>18231072</id><snippet>Run</snippet></ROW><ROW><id>18231072</id><snippet>View Breakpoints</snippet></ROW><ROW><id>18231072</id><snippet>pydevd.py</snippet></ROW><ROW><id>18231377</id><snippet>&amp; -&gt; %26 -&gt; %2526</snippet></ROW><ROW><id>18231377</id><snippet>url ='/some/page?foo=bar&amp;fizz=buzz'
import urllib    
url = urllib.quote(urllib.quote(url_re))
users.create_login_url(dest_url=url)
</snippet></ROW><ROW><id>18231377</id><snippet>&amp;</snippet></ROW><ROW><id>18231377</id><snippet>%2526</snippet></ROW><ROW><id>18231470</id><snippet>return [1,2,3]</snippet></ROW><ROW><id>18231470</id><snippet>import ...
def main():
    # calculcate stuff
    return [1,2,3]
</snippet></ROW><ROW><id>18231470</id><snippet>import sys
# calculate and stuff
sys.exit(100)
</snippet></ROW><ROW><id>18231470</id><snippet>import sys
# calculcate stuff
sys.stdout.write('Bugs: 5|Other: 10\n')
sys.stdout.flush()
sys.exit(0)
</snippet></ROW><ROW><id>18231470</id><snippet># calculcate
with open('finish.txt', 'wb') as fh:
    fh.write(str(5)+'\n')
</snippet></ROW><ROW><id>18231554</id><snippet>cmd.exe /c shutdown /r
</snippet></ROW><ROW><id>18231602</id><snippet>collections.Counter()</snippet></ROW><ROW><id>18231602</id><snippet>from collections import Counter

counts = Counter()

for sentence in sequence_of_sentences:
    counts.update(word.strip('.,?!"\'').lower() for word in sentence.split())
</snippet></ROW><ROW><id>18231602</id><snippet>from collections import Counter
import re

counts = Counter()
words = re.compile(r'\w+')

for sentence in sequence_of_sentences:
    counts.update(words.findall(sentence.lower()))
</snippet></ROW><ROW><id>18231602</id><snippet>counts</snippet></ROW><ROW><id>18231602</id><snippet>&gt;&gt;&gt; sequence_of_sentences = ['This is a sentence', 'This is another sentence']
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; counts = Counter()
&gt;&gt;&gt; for sentence in sequence_of_sentences:
...     counts.update(word.strip('.,?!"\'').lower() for word in sentence.split())
... 
&gt;&gt;&gt; counts
Counter({'this': 2, 'is': 2, 'sentence': 2, 'a': 1, 'another': 1})
&gt;&gt;&gt; counts['sentence']
2
</snippet></ROW><ROW><id>18231769</id><snippet>import myprog

def test_multiply():
    answer = myprog.multiply()
    assert answer == 12 
</snippet></ROW><ROW><id>18231769</id><snippet>def multiply():
    return 3*4
</snippet></ROW><ROW><id>18231769</id><snippet>&lt;import statements&gt;
define CONSTANTS
Class and function definitions
if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18231769</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>18231804</id><snippet>&lt;tr&gt;
  &lt;td&gt;1
    &lt;td&gt;
      &lt;td&gt;20
        &lt;td&gt;5%&lt;/td&gt;
      &lt;/td&gt;
    &lt;/td&gt;
  &lt;/td&gt;
&lt;/tr&gt;
</snippet></ROW><ROW><id>18231804</id><snippet>&lt;tr&gt;
  &lt;td&gt;1        &lt;!-- an IMPLICITLY (no closing tag) closed td element --&gt;
  &lt;td&gt;         &lt;!-- as above --&gt;
  &lt;td&gt;20       &lt;!-- as above --&gt;
  &lt;td&gt;5%&lt;/td&gt;  &lt;!-- an EXPLICITLY closed td element --&gt;
  &lt;/td&gt;        &lt;!-- an error; ignore this --&gt;
  &lt;/td&gt;        &lt;!-- as above --&gt;
  &lt;/td&gt;        &lt;!-- as above --&gt;
&lt;/tr&gt;
</snippet></ROW><ROW><id>18231804</id><snippet>td</snippet></ROW><ROW><id>18231804</id><snippet>td</snippet></ROW><ROW><id>18231804</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup("&lt;tr&gt;&lt;td&gt;1&lt;td&gt;&lt;td&gt;20&lt;td&gt;5%&lt;/td&gt;&lt;/td&gt;&lt;/td&gt;&lt;/td&gt;&lt;/tr&gt;")
&gt;&gt;&gt; tr = soup.find("tr")
&gt;&gt;&gt; tr
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;5%&lt;/td&gt;&lt;/tr&gt;
&gt;&gt;&gt; td_list = tr.find_all("td")
&gt;&gt;&gt; td_list
[&lt;td&gt;1&lt;/td&gt;, &lt;td&gt;&lt;/td&gt;, &lt;td&gt;20&lt;/td&gt;, &lt;td&gt;5%&lt;/td&gt;]
&gt;&gt;&gt; td_list[0]  # Python starts counting list items from 0, not 1
&lt;td&gt;1&lt;/td&gt;
&gt;&gt;&gt; td_list[0].text
'1'
&gt;&gt;&gt; td_list[2].text
'20'
&gt;&gt;&gt; td_list[3].text
'5%'
</snippet></ROW><ROW><id>18231879</id><snippet>list = [['SSN', 'Lname', 'FName', 'MInit', 'Known Hours', 'Unknown hours', 'Overtime'],
        [('123456789', 'Smith', 'John', 'B')],
        [(Decimal('40.0'), )],
        'No',
        'Yes', 
        [('333445555', 'Wong', 'Franklin', 'T')], 
        [(Decimal('40.0'), )]
]

def printing(list):

    for i in list:

        print '%-10s %-10s %-10s %-10s %-15s %-10s %-15s' % (i[0],i[1],i[2],i[3],i[4], i[5], i[6])
</snippet></ROW><ROW><id>18231879</id><snippet>def recieving_sumrpt():
    theList = cursor1.execute('SELECT DISTINCT SSN FROM Employee').fetchall()  
    # You get a list of tupple containing each one SSN

    templist=[['SSN','Lname','FName','MInit','Known Hours','Unknown hours','Overtime']]
    # ok: a list of list of 7 strings.

    for i in theList: # for each SSN
        # here i contains a tuple of *1* element
        basics= process_query('SELECT SSN, LName, FName, MInit FROM Employee WHERE SSN=?', i) 
        # basics contains now a list on *one* tupple of *4* items

        templist.append(basics)

    ...
</snippet></ROW><ROW><id>18231879</id><snippet>[(1,), (2,), (3,)]
^ ^     
 \ \ each "row" is a tuple of 1 item because I selected only one *column*
  \
   \ a list of 3 items because there was 3 rows in my test table
</snippet></ROW><ROW><id>18231897</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; conn = sqlite3.connect('/tmp/test.db')
&gt;&gt;&gt; cur = conn.cursor()
&gt;&gt;&gt; cur.execute('CREATE TABLE foo (a text, b text)')
&gt;&gt;&gt; strA = "069-888888"
&gt;&gt;&gt; strB = "069777777"
&gt;&gt;&gt; cur.execute('INSERT INTO foo (a,b) values (?,?)', (strA, strB))
&gt;&gt;&gt; cur.execute('select * from foo;')
&lt;sqlite3.Cursor object at 0x1101c39d0&gt;
&gt;&gt;&gt; cur.fetchall()
[(u'069-888888', u'069777777')]
</snippet></ROW><ROW><id>18231897</id><snippet>TEXT</snippet></ROW><ROW><id>18231922</id><snippet>a</snippet></ROW><ROW><id>18231922</id><snippet>b</snippet></ROW><ROW><id>18231922</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>18231922</id><snippet>ndarray</snippet></ROW><ROW><id>18231922</id><snippet>ndarray.min</snippet></ROW><ROW><id>18231922</id><snippet>a</snippet></ROW><ROW><id>18231922</id><snippet>b</snippet></ROW><ROW><id>18231922</id><snippet>f = ndarray.min
print f(a), f(b) 
</snippet></ROW><ROW><id>18231922</id><snippet>ndarray.min(x)</snippet></ROW><ROW><id>18231922</id><snippet>x.min()</snippet></ROW><ROW><id>18231922</id><snippet>numpy.ndarray.min</snippet></ROW><ROW><id>18231922</id><snippet>rand</snippet></ROW><ROW><id>18231922</id><snippet>f = type(rand(int())).min
</snippet></ROW><ROW><id>18231922</id><snippet>min</snippet></ROW><ROW><id>18232247</id><snippet>itertools.chain()</snippet></ROW><ROW><id>18232247</id><snippet>itertools.islice()</snippet></ROW><ROW><id>18232247</id><snippet>islice()</snippet></ROW><ROW><id>18232247</id><snippet>objects = islice(self.objects, page0 * self.per_page, 1 + page * self.per_page)
</snippet></ROW><ROW><id>18232247</id><snippet>start</snippet></ROW><ROW><id>18232374</id><snippet>numpy.load</snippet></ROW><ROW><id>18232374</id><snippet>.npz</snippet></ROW><ROW><id>18232374</id><snippet>np.savez_compressed('filename.npz', array1=array1, array2=array2)
b = np.load('filename.npz')
</snippet></ROW><ROW><id>18232374</id><snippet>b['array1']</snippet></ROW><ROW><id>18232618</id><snippet>str.join()</snippet></ROW><ROW><id>18232618</id><snippet>', '.join([' : '.join((k, str(keywordsList[k]))) for k in sorted(keywordsList, key=keywordsList. get, reverse=True)])
</snippet></ROW><ROW><id>18232618</id><snippet>&gt;&gt;&gt; ', '.join([' : '.join((k, str(keywordsList[k]))) for k in sorted(keywordsList, key=keywordsList. get, reverse=True)])
u'http://www.3ho.de/ : 4, ergo@ananda-pur.de : 3, roland.luethe1@gmail.com : 2, http://www.kundalini-yoga-zentrum-berlin.de/index.html : 1'
</snippet></ROW><ROW><id>18232618</id><snippet>collections.Counter()</snippet></ROW><ROW><id>18232618</id><snippet>Counter.most_common()</snippet></ROW><ROW><id>18232645</id><snippet>import numpy as np
import networkx as nx
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

G = nx.Graph()
G.add_edges_from([(0,1),(1,2),(2,0)])
fig = plt.figure(figsize=(8,8))
pos=nx.graphviz_layout(G)
nc = np.random.random(3)
nodes = nx.draw_networkx_nodes(G,pos,node_color=nc)
edges = nx.draw_networkx_edges(G,pos) 


def update(n):
  nc = np.random.random(3)
  nodes.set_array(nc)
  return nodes,

anim = FuncAnimation(fig, update, interval=50, blit=True)
</snippet></ROW><ROW><id>18232645</id><snippet>nx.draw</snippet></ROW><ROW><id>18232645</id><snippet>nodes</snippet></ROW><ROW><id>18232645</id><snippet>edges</snippet></ROW><ROW><id>18232645</id><snippet>nx.draw_networkx_nodes</snippet></ROW><ROW><id>18232645</id><snippet>nx.draw_networkx_edges</snippet></ROW><ROW><id>18232645</id><snippet>PatchCollection</snippet></ROW><ROW><id>18232645</id><snippet>LineCollection</snippet></ROW><ROW><id>18232645</id><snippet>set_array</snippet></ROW><ROW><id>18232645</id><snippet>set_offsets</snippet></ROW><ROW><id>18232645</id><snippet>PatchCollection</snippet></ROW><ROW><id>18232645</id><snippet>set_verts</snippet></ROW><ROW><id>18232645</id><snippet>set_segments</snippet></ROW><ROW><id>18232645</id><snippet>LineCollection</snippet></ROW><ROW><id>18233103</id><snippet>t=Tree("(((((637,5250)a,607)b,14782)6942,641)6441)0;", format=9)
</snippet></ROW><ROW><id>18233103</id><snippet>t=Tree("(((((637,5250)0,607)0,14782)6942,641)6441)0;", format=9)
</snippet></ROW><ROW><id>18233103</id><snippet>t=Tree("(((((637,5250),607),14782)6942,641)6441)0;", format=9)
</snippet></ROW><ROW><id>18233231</id><snippet>\xNN</snippet></ROW><ROW><id>18233231</id><snippet>\uNNNN</snippet></ROW><ROW><id>18233231</id><snippet>\x22</snippet></ROW><ROW><id>18233231</id><snippet>"</snippet></ROW><ROW><id>18233231</id><snippet>\xNN</snippet></ROW><ROW><id>18233231</id><snippet>\u00NN</snippet></ROW><ROW><id>18233231</id><snippet>&gt;&gt;&gt; q = q.replace('\\x', '\\u00')
&gt;&gt;&gt; json.loads(q)
{'request_body': '{"username":"2","password":"6","id":"e2cad174-736e-3041-cf7e", "FName":"HS"}', 'request_method': 'POST'}
</snippet></ROW><ROW><id>18233231</id><snippet>abc\\xyz</snippet></ROW><ROW><id>18233231</id><snippet>abc\\u00yz</snippet></ROW><ROW><id>18233360</id><snippet>matrx = [ [1,2,3], [4,5,6] ]

def LookupByTuple(tupl):
    answer = matrx
    for i in tupl:
        answer = answer[i]
    return answer

print LookupByTuple( (1,2) )
</snippet></ROW><ROW><id>18233627</id><snippet>button</snippet></ROW><ROW><id>18233627</id><snippet>lbl_f = Frame(nb)
Label(lbl_f, text="This label is in a grid").grid(pady=100,sticky='ew')
lbl_f.grid()
lbl_f.rowconfigure('all', weight=1)
lbl_f.columnconfigure('all', weight=1)
</snippet></ROW><ROW><id>18233627</id><snippet>row</snippet></ROW><ROW><id>18233627</id><snippet>columnfigure</snippet></ROW><ROW><id>18233627</id><snippet>frame</snippet></ROW><ROW><id>18233627</id><snippet>Button(btn_f, text="Button Packed").pack(pady=100,padx=100) 
</snippet></ROW><ROW><id>18233627</id><snippet>packedButton = Button(btn_f, text="Button Packed")
packedButton.pack(pady=100,padx=100) 
</snippet></ROW><ROW><id>18233734</id><snippet>break</snippet></ROW><ROW><id>18233734</id><snippet>if character == "!":</snippet></ROW><ROW><id>18233734</id><snippet>for character in msg.upper():</snippet></ROW><ROW><id>18233758</id><snippet>I'm not sure how self.w += 1 will create an instance variables instead of just increment class variable or raise an exception for missing instance variable?</snippet></ROW><ROW><id>18233758</id><snippet>&gt;&gt;&gt; class Foo:
...  x = 1
...  def __init__(self):
...   print 'self =', self
...   print 'self x =', self.x
...   print 'foo x =', Foo.x
...   print self.x is Foo.x
...   Foo.x = 2
...   self.x = 3
...   print 'self x =', self.x
...   print 'foo x =', Foo.x
... 
&gt;&gt;&gt; a = Foo()
self = &lt;__main__.Foo instance at 0x1957c68&gt;
self x = 1
foo x = 1
True
self x = 2
foo x = 3
&gt;&gt;&gt; print a
&lt;__main__.Foo instance at 0x1957c68&gt;
</snippet></ROW><ROW><id>18233876</id><snippet>In [104]: df = DataFrame(dict(date = [Timestamp('20130101'),Timestamp('20130131'),Timestamp('20130331'),Timestamp('20130330')],value=randn(4))).set_index('date')

In [105]: df
Out[105]: 
               value
date                
2013-01-01 -0.346980
2013-01-31  1.954909
2013-03-31 -0.505037
2013-03-30  2.545073

In [106]: df.index = df.index.to_period('M').to_timestamp('M')

In [107]: df
Out[107]: 
               value
2013-01-31 -0.346980
2013-01-31  1.954909
2013-03-31 -0.505037
2013-03-31  2.545073
</snippet></ROW><ROW><id>18233957</id><snippet>cpp</snippet></ROW><ROW><id>18233957</id><snippet>#-*- coding: utf-8 -*-
#!python

from ctypes import *
from ctypes.wintypes import *

# stick to unicode version
LPWSTR = POINTER(WCHAR)
HINTERNET = LPVOID

INTERNET_PER_CONN_FLAGS = 1
INTERNET_PER_CONN_AUTOCONFIG_URL = 4
INTERNET_PER_CONN_AUTODISCOVERY_FLAGS = 5
INTERNET_OPTION_REFRESH = 37
INTERNET_OPTION_SETTINGS_CHANGED = 39
INTERNET_OPTION_PER_CONNECTION_OPTION = 75

PROXY_TYPE_AUTO_PROXY_URL = 4

class INTERNET_PER_CONN_OPTION(Structure):
    class Value(Union):
        _fields_ = [
            ('dwValue', DWORD),
            ('pszValue', LPWSTR),
            ('ftValue', FILETIME),
        ]

    _fields_ = [
        ('dwOption', DWORD),
        ('Value', Value),
    ]

class INTERNET_PER_CONN_OPTION_LIST(Structure):
    _fields_ = [
        ('dwSize', DWORD),
        ('pszConnection', LPWSTR),
        ('dwOptionCount', DWORD),
        ('dwOptionError', DWORD),
        ('pOptions', POINTER(INTERNET_PER_CONN_OPTION)),
    ]

InternetSetOption = windll.wininet.InternetSetOptionW
InternetSetOption.argtypes = [HINTERNET, DWORD, LPVOID, DWORD]
InternetSetOption.restype  = BOOL

if __name__ == '__main__':
    proxy = create_unicode_buffer('http://127.0.0.1:8086/proxy.pac')
    List = INTERNET_PER_CONN_OPTION_LIST()
    Option = (INTERNET_PER_CONN_OPTION * 2)()
    nSize = c_ulong(sizeof(INTERNET_PER_CONN_OPTION_LIST))

    Option[0].dwOption = INTERNET_PER_CONN_AUTOCONFIG_URL
    Option[0].Value.pszValue = proxy
    Option[1].dwOption = INTERNET_PER_CONN_FLAGS
    Option[1].Value.dwValue = PROXY_TYPE_AUTO_PROXY_URL

    List.dwSize = sizeof(INTERNET_PER_CONN_OPTION_LIST)
    List.pszConnection = None
    List.dwOptionCount = 2
    List.dwOptionError = 0
    List.pOptions = Option

    assert InternetSetOption(None, INTERNET_OPTION_PER_CONNECTION_OPTION, byref(List), nSize) == True
    assert InternetSetOption(None, INTERNET_OPTION_SETTINGS_CHANGED, None, 0) == True
    assert InternetSetOption(None, INTERNET_OPTION_REFRESH, None, 0) == True
</snippet></ROW><ROW><id>18233957</id><snippet>MultiByteToWideChar</snippet></ROW><ROW><id>18233957</id><snippet>create_unicode_buffer</snippet></ROW><ROW><id>18233957</id><snippet>InternetSetOption</snippet></ROW><ROW><id>18233976</id><snippet>len</snippet></ROW><ROW><id>18233976</id><snippet>sys.getsizeof()</snippet></ROW><ROW><id>18233976</id><snippet>sys.getsizeof()</snippet></ROW><ROW><id>18233976</id><snippet>&gt;&gt;&gt; len('asdf')
4
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getsizeof('asdf')
37
</snippet></ROW><ROW><id>18233976</id><snippet>open(myfile, 'rb')
</snippet></ROW><ROW><id>18234246</id><snippet>s</snippet></ROW><ROW><id>18234246</id><snippet>utf-8</snippet></ROW><ROW><id>18234246</id><snippet>cp1250</snippet></ROW><ROW><id>18234246</id><snippet>utf-8</snippet></ROW><ROW><id>18234246</id><snippet>&gt;&gt;&gt; e = u'{}, {}'.format(s, u) # not sure
</snippet></ROW><ROW><id>18234246</id><snippet>u'{}, {}'</snippet></ROW><ROW><id>18234246</id><snippet>unicode</snippet></ROW><ROW><id>18234246</id><snippet>format</snippet></ROW><ROW><id>18234246</id><snippet>unicode</snippet></ROW><ROW><id>18234246</id><snippet>s</snippet></ROW><ROW><id>18234246</id><snippet>s</snippet></ROW><ROW><id>18234246</id><snippet>ascii</snippet></ROW><ROW><id>18234246</id><snippet>ascii</snippet></ROW><ROW><id>18234246</id><snippet>s.decode('ascii')</snippet></ROW><ROW><id>18234246</id><snippet>s</snippet></ROW><ROW><id>18234246</id><snippet>cp1250</snippet></ROW><ROW><id>18234246</id><snippet>&gt;&gt;&gt; e = u'{}, {}'.format(s.decode('utf8'), u) # not sure
</snippet></ROW><ROW><id>18234246</id><snippet>utf-8</snippet></ROW><ROW><id>18234246</id><snippet>utf-8</snippet></ROW><ROW><id>18234267</id><snippet>keys = ('pos', 'call', 'father', 'mother')

with open(outputfilename, 'w') as output:
    for name in d:
        output.write(name + '\n')
        for entry in d['name']:
            output.write(' '.join([entry[k] for k in keys]) + '\n')
</snippet></ROW><ROW><id>18234267</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>18234267</id><snippet>d</snippet></ROW><ROW><id>18234267</id><snippet>from collections import defaultdict

d = defaultdict(list)
</snippet></ROW><ROW><id>18234267</id><snippet>if not (name in d): d[name] = []</snippet></ROW><ROW><id>18234274</id><snippet>import datetime

now = datetime.datetime.now()
holidays = [datetime.date(2013, 8, 14)] # you can add more here
businessdays = 0
for i in range(1, 32):
    try:
        thisdate = datetime.date(now.year, now.month, i)
    except(ValueError):
        break
    if thisdate.weekday() &lt; 5 and thisdate not in holidays: # Monday == 0, Sunday == 6 
        businessdays += 1

print businessdays
</snippet></ROW><ROW><id>18234332</id><snippet>hypothenuse=10000
thesets=[]
for x in xrange(1, hypothenuse):
    a=math.sqrt(hypothenuse**2-x**2)
    if(int(a)==a):
        thesets.append([x,a])
print "amount of sets: ", len(thesets)
for i in range(len(thesets)):
    print thesets[i][0],thesets[i][1], math.sqrt(thesets[i][0]**2+ thesets[i][1]**2)
</snippet></ROW><ROW><id>18234332</id><snippet>hypothenuse=15
thesets={}
for x in xrange(1,hypothenuse):
    for y in xrange(1,hypothenuse):
        a=math.sqrt(x**2+y**2)
        if(a&lt;hypothenuse and int(a)==a):
            if(x&lt;=y):
                thesets[(x,y)]=True
            else:
                thesets[(y,x)]=True
print len(thesets.keys()) 
print thesets.keys()
</snippet></ROW><ROW><id>18234514</id><snippet>#!/usr/local/bin/python2.7
import math

lista = [2231, 2240, 2236, 2238, 7]

newlist = []
mean = 0
newmean = 0
variance = 0

for i in lista:
    mean += i
mean = mean/float(len(lista))

for i in lista:
    variance += (i*i)
variance = variance/float(len(lista))
variance = math.sqrt(variance)

minval = variance - mean
maxval = variance + mean

for i in lista:
    if i &gt;= minval and i &lt;= maxval:
        newlist.append(i)
print newlist

for i in newlist:
    newmean += i
newmean = newmean/float(len(newlist))
print newmean
</snippet></ROW><ROW><id>18234593</id><snippet>import sys

print 'starting'
sys.stdout.flush()
</snippet></ROW><ROW><id>18234611</id><snippet>Xij[i,j] = ai[i] * Nij[i,j]
</snippet></ROW><ROW><id>18234611</id><snippet>Xij</snippet></ROW><ROW><id>18234611</id><snippet>&gt;&gt;&gt; def test(): print "Hi"
...
&gt;&gt;&gt; test[1] = "yo!"
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'function' object does not support item assignment
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18234611</id><snippet>Xij</snippet></ROW><ROW><id>18234611</id><snippet>Xij</snippet></ROW><ROW><id>18234825</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; a = types.SimpleNamespace()
&gt;&gt;&gt; a.attr1 = 123
&gt;&gt;&gt; a.attr2 = '123'
&gt;&gt;&gt; a.attr3 = [1,2,3]
&gt;&gt;&gt; a.attr1
123
&gt;&gt;&gt; a.attr2
'123'
&gt;&gt;&gt; a.attr3
[1, 2, 3]
</snippet></ROW><ROW><id>18234898</id><snippet>l = len(df.columns)
results = np.zeros((l,l))
mask = pd.isnull(df)
for i, ac in enumerate(df):
    for j, bc in enumerate(df):
           results[j,i] = (mask[i] &amp; mask[j]).sum()
results = DataFrame(results,index=df.columns,columns=df.columns)
</snippet></ROW><ROW><id>18234903</id><snippet>random</snippet></ROW><ROW><id>18234903</id><snippet>random.Random</snippet></ROW><ROW><id>18234903</id><snippet>jumpahead()</snippet></ROW><ROW><id>18235086</id><snippet>if __name__ == "__main__":
    # call your code here
    main()
</snippet></ROW><ROW><id>18235086</id><snippet>main()</snippet></ROW><ROW><id>18235086</id><snippet>python.exe</snippet></ROW><ROW><id>18235086</id><snippet>%PATH%</snippet></ROW><ROW><id>18235255</id><snippet>def main():
    while True:
        data = input('Please enter a string');
        if data == 'exit': 
            break
        else:
            print(data)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18235255</id><snippet>def main():
    while True:
        # Use raw_input instead so input is not evaluated
        data = raw_input('Please enter a string');
        if data == 'exit': 
            break
        else:
            print data

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18236529</id><snippet>In [15]: pd.merge(foo,fundraisers,how='outer').fillna(0)
Out[15]:
   event ID  amount
0      1  a       3
1      1  b       3
2      1  c       4
3      2  a       5
4      2  d       6
5      1  e       0
</snippet></ROW><ROW><id>18236529</id><snippet>DataFrame</snippet></ROW><ROW><id>18236529</id><snippet>'event'</snippet></ROW><ROW><id>18236529</id><snippet>In [16]: pd.merge(foo,fundraisers,how='outer').fillna(0).sort('event')
Out[16]:
   event ID  amount
0      1  a       3
1      1  b       3
2      1  c       4
5      1  e       0
3      2  a       5
4      2  d       6
</snippet></ROW><ROW><id>18236529</id><snippet>'ID'</snippet></ROW><ROW><id>18236529</id><snippet>Donors</snippet></ROW><ROW><id>18236529</id><snippet>'fundraiser ID'</snippet></ROW><ROW><id>18236529</id><snippet>In [42]: merge(foo, fundraisers, left_on=['fundraiser ID', 'event'], right_on=['ID', 'event'], how='outer')
Out[42]:
   event fundraiser ID  amount ID
0      1             a       3  a
1      1             b       3  b
2      1             c       4  c
3      2             a       5  a
4      2             d       6  d
5      1           NaN     NaN  e
</snippet></ROW><ROW><id>18236544</id><snippet>def check_thread_exit():
    if EXIT:
        thread.exit()
</snippet></ROW><ROW><id>18236544</id><snippet>def run(self):
    # an optional try-except block to do cleanup at top level
    try:
        SETUP
        for place in places:
            for measurement in measurements:
                check_thread_exit()
                measure()
    except SystemExit:
        CLEANUP
        raise`
</snippet></ROW><ROW><id>18236762</id><snippet>crypto = require "crypto"
[...]
var iv = new Buffer('asdfasdfasdfasdf')
var key = new Buffer('asdfasdfasdfasdfasdfasdfasdfasdf')
var cipher = crypto.createCipheriv('aes-256-cbc', key, iv);
cipher.update(new Buffer("mystring"));
var enc = cipher.final('base64');
[...]
</snippet></ROW><ROW><id>18236762</id><snippet>createCipher</snippet></ROW><ROW><id>18236762</id><snippet>createCipheriv</snippet></ROW><ROW><id>18236762</id><snippet>from base64 import b64decode
from Crypto.Cipher import AES
[...]
iv = 'asdfasdfasdfasdf'
key = 'asdfasdfasdfasdfasdfasdfasdfasdf'
encoded = b64decode('my_encrypted_string')

dec = AES.new(key=key, mode=AES.MODE_CBC, IV=iv)
value = dec.decrypt(encoded)
</snippet></ROW><ROW><id>18236798</id><snippet>c:
cd \Python27
python
</snippet></ROW><ROW><id>18236931</id><snippet>def run(words):
    collect = convert(words)

    if "Apple" in collect:
        print "Has Apple"
    else:
        print "Doesn't have an Apple"


def convert(fruits):
    tup = tuple(fruits)
    return tup


run(["Apple", "Banana", "Carrot"])
</snippet></ROW><ROW><id>18236931</id><snippet>run()</snippet></ROW><ROW><id>18236931</id><snippet>print</snippet></ROW><ROW><id>18236945</id><snippet>[ 1, 2, 3 ]</snippet></ROW><ROW><id>18236945</id><snippet>import random
from pprint import pprint
from collections import Counter

runLength = 600000

sequenceCount = Counter()
originalCards = ["1", "2", "3"]
ncards = len(originalCards)

for k in range(runLength): # use xrange on python 2
    cards = list(originalCards)

    # naive shuffle        
    for i in range(ncards):
        n = random.randint(0, ncards - 1)
        cards[i], cards[n] = cards[n], cards[i] #swap

    sequenceCount[''.join(cards)] += 1

# results summary
print(sequenceCount)

# result: Counter({'132': 111424, '231': 111194, '213': 110312, 
#                  '123': 89533, '321': 88846, '312': 88691})
</snippet></ROW><ROW><id>18237038</id><snippet>GridLayout</snippet></ROW><ROW><id>18237038</id><snippet>cols: 1</snippet></ROW><ROW><id>18237038</id><snippet>BoxLayout</snippet></ROW><ROW><id>18237038</id><snippet>orientation: 'vertical'</snippet></ROW><ROW><id>18237038</id><snippet>BoxLayout</snippet></ROW><ROW><id>18237038</id><snippet>pos_hint</snippet></ROW><ROW><id>18237038</id><snippet>center_x</snippet></ROW><ROW><id>18237038</id><snippet>x</snippet></ROW><ROW><id>18237038</id><snippet>right</snippet></ROW><ROW><id>18237038</id><snippet>size</snippet></ROW><ROW><id>18237038</id><snippet>size_hint</snippet></ROW><ROW><id>18237038</id><snippet>&lt;Test@BoxLayout&gt;:
    orientation: 'vertical'
    Button:
        text: 'a'
        size_hint: None, None
        size: 100,50
        pos_hint: { 'center_x' : .5 }
    Button:
        text: 'b'
</snippet></ROW><ROW><id>18237038</id><snippet>GridLayout</snippet></ROW><ROW><id>18237038</id><snippet>GridLayout</snippet></ROW><ROW><id>18237038</id><snippet>col_default_width</snippet></ROW><ROW><id>18237038</id><snippet>col_width</snippet></ROW><ROW><id>18237038</id><snippet>col_force_default</snippet></ROW><ROW><id>18237038</id><snippet>size_hint</snippet></ROW><ROW><id>18237038</id><snippet>size</snippet></ROW><ROW><id>18237038</id><snippet>minimum_width</snippet></ROW><ROW><id>18237070</id><snippet>**Creating a main window without a central widget is not supported.**
</snippet></ROW><ROW><id>18237070</id><snippet>class MyForm(QtGui.QMainWindow):
    def __init__(self, parent=None):
        QtGui.QMainWindow.__init__(self, parent)
        central_widget = QtGui.QWidget()
        self.setCentralWidget(central_widget) # new central widget
        self.ui = Ui_Form()
        self.ui.setupUi(central_widget)  # target central_widget for UI setup
</snippet></ROW><ROW><id>18237230</id><snippet>import string

class Resume():
    def __init__(self,filename):
        self.filepath = filename
        self.load()
        self.parse()

    def load(self):
        with open(self.filepath,'rb') as f:
            self.content = f.read().splitlines()

    def checkLine(self,word,value, content, line):
        if word in content.lower():
            value = self.addValue(value,line)
        return value

    def addValue(self,value,line):
        value[line] = value.get(line,0) + 1
        return value

    def dict_List(self,dict_, content):
        new = [(key,value) for key,value in dict_.items() if dict_[key] == max(dict_.values())]
        return [(x[0],content[x[0]]) for x in sorted(new)]

    def get_name(self):
        names = []
        for each in self.name:
            if each[0] not in self.headings:
                each = each[1].replace('Name',"")
                if each[0] not in string.letters:
                    each = each[1:]
                names.append(each.strip())
            else:
                index = self.headings[self.headings.index(each[0])+1]
                names.append("\n".join(self.content[each[0]+1:index]))
        if len(names) == 1:
            return names[0]
        else:
            return names

    def get_work(self):
        experience = []
        for each in self.work:
            index = self.headings[self.headings.index(each[0])+1]
            experience.append("\n".join(self.content[each[0]+1:index]))
        if len(experience) == 1:
            return experience[0]
        else:
            return epxerience

    def parse(self):
        name = dict()
        work_experience = dict()
        isHeading = dict()
        for line_num in range(len(self.content)):
            for checkName in ["name",":"]:
                name.update(self.checkLine(checkName,name,self.content[line_num], line_num))
            for checkWork in ["work","experience"]:
                work_experience.update(self.checkLine(checkWork,work_experience, self.content[line_num],line_num))
            if line_num != len(self.content) - 1:
                if len(self.content[line_num + 1]) &gt; len(self.content[line_num]):
                    isHeading.update(self.addValue(isHeading,line_num))
            if line_num &gt; 0:
                if self.content[line_num - 1] == "":
                    isHeading.update(self.addValue(isHeading,line_num))
            if len(self.content[line_num]) == len(self.content[line_num].lstrip()):
                isHeading.update(self.addValue(isHeading,line_num))
            if self.content[line_num] == "":
                isHeading[line_num] = isHeading.get(line_num,0) - 1

        self.name = self.dict_List(name, self.content)
        self.work = self.dict_List(work_experience, self.content)
        self.headings = self.dict_List(isHeading, self.content)
        self.headings = [x[0] for x in self.headings]



if __name__ == "__main__":
    resume = Resume(filename = 'sampleresume.txt')
    print resume.get_name()
    print resume.get_work()
</snippet></ROW><ROW><id>18237230</id><snippet>Someone
2006 - 2008: Programmer
</snippet></ROW><ROW><id>18237276</id><snippet>__name__</snippet></ROW><ROW><id>18237276</id><snippet>__lib__</snippet></ROW><ROW><id>18237276</id><snippet>__name__</snippet></ROW><ROW><id>18237276</id><snippet>outputSchema</snippet></ROW><ROW><id>18237276</id><snippet>outputSchemaFunction</snippet></ROW><ROW><id>18237276</id><snippet>#!/usr/bin/python

if __name__ != '__lib__':
    def outputSchema(dont_care):
        def wrapper(func):
            def inner(*args, **kwargs):
                return func(*args, **kwargs)
            return inner
        return wrapper

# Your UDFs go here
</snippet></ROW><ROW><id>18237276</id><snippet>print __name__</snippet></ROW><ROW><id>18237276</id><snippet>myudfs.py</snippet></ROW><ROW><id>18237574</id><snippet>python-dev</snippet></ROW><ROW><id>18237574</id><snippet>sudo apt-get install python-dev
</snippet></ROW><ROW><id>18237574</id><snippet>sudo apt-get build-dep python
</snippet></ROW><ROW><id>18237574</id><snippet>sudo yum install yum-utils
sudo yum-builddep python
</snippet></ROW><ROW><id>18237672</id><snippet>./manage.py shell</snippet></ROW><ROW><id>18237672</id><snippet>dir()</snippet></ROW><ROW><id>18238049</id><snippet>import re

string = 'I have values "1" and "1.5" also "12.555"'
m = re.findall(r'\"(\d+|\d+\.\d+)\"', string)
print ", " . join(m)
</snippet></ROW><ROW><id>18238049</id><snippet>1, 1.5, 12.555
</snippet></ROW><ROW><id>18238136</id><snippet>numbers.txt</snippet></ROW><ROW><id>18238136</id><snippet>0
0
0
0
0
0
0
0
0
0
</snippet></ROW><ROW><id>18238136</id><snippet>original_list = [1, 3, 5, 7, 9]
lines_to_write = [2, 4, 6, 8, 10]  # Lines you want to write the results in
total = 0
sum_list = list()

# Get the list of cumulative sums
for element in original_list:
    total = total + element
    sum_list.append(total)
# sum_list = [1, 4, 9, 16, 25]

# Open and read the file
with open('numbers.txt', 'rw+') as file:
    file_lines = file.readlines()
    for element, line in zip(sum_list, lines_to_write):
        file_lines[line-1] = '{}\n'.format(element)
    file.seek(0)
    file.writelines(file_lines)
</snippet></ROW><ROW><id>18238136</id><snippet>numbers.txt</snippet></ROW><ROW><id>18238136</id><snippet>0
1
0
4
0
9
0
16
0
25
</snippet></ROW><ROW><id>18238175</id><snippet>python</snippet></ROW><ROW><id>18238175</id><snippet>SocketServer</snippet></ROW><ROW><id>18238175</id><snippet>NAT</snippet></ROW><ROW><id>18238175</id><snippet>Twisted</snippet></ROW><ROW><id>18238175</id><snippet>NAT</snippet></ROW><ROW><id>18238175</id><snippet>import SocketServer

class MyTCPHandler(SocketServer.BaseRequestHandler):
    """
    The RequestHandler class for our server.

    It is instantiated once per connection to the server, and must
    override the handle() method to implement communication to the
    client.
    """

    def handle(self):
        # self.request is the TCP socket connected to the client
        self.data = self.request.recv(1024).strip()
        print "{} wrote:".format(self.client_address[0])
        print self.data
        # just send back the same data, but upper-cased
        self.request.sendall(self.data.upper())

if __name__ == "__main__":
    HOST, PORT = "localhost", 9999

    # Create the server, binding to localhost on port 9999
    server = SocketServer.TCPServer((HOST, PORT), MyTCPHandler)

    # Activate the server; this will keep running until you
    # interrupt the program with Ctrl-C
    server.serve_forever()
</snippet></ROW><ROW><id>18238175</id><snippet>JavaScript</snippet></ROW><ROW><id>18238175</id><snippet>Socket IO</snippet></ROW><ROW><id>18238175</id><snippet>&lt;script src="/socket.io/socket.io.js"&gt;&lt;/script&gt;
&lt;script&gt;
  var socket = io.connect('http://localhost');
  socket.on('news', function (data) {
    console.log(data);
    socket.emit('my other event', { my: 'data' });
  });
&lt;/script&gt;
</snippet></ROW><ROW><id>18238175</id><snippet>HTML5 Web Sockets</snippet></ROW><ROW><id>18238175</id><snippet>var connection = new WebSocket('ws://IPAddress:Port');
connection.onopen = function () {
  connection.send('Ping'); // Send the message 'Ping' to the server
};
</snippet></ROW><ROW><id>18238175</id><snippet>Javascript: The Definitive Guide</snippet></ROW><ROW><id>18238175</id><snippet>jssockets</snippet></ROW><ROW><id>18238175</id><snippet>_jssocket.setCallBack(event, callback);
_jssocket.connect(ip,port);
_jssocket.write(message);
_jssocket.disconnect();
</snippet></ROW><ROW><id>18238223</id><snippet>validatecommand</snippet></ROW><ROW><id>18238223</id><snippet>    vcmd = self.register(self.VE)

    for pos in ...:
        self.entryDict[pos] = tk.Entry(..., 
                                       validatecommand=(vcmd, "%P", pos), 
                                       ...)
    ...

def VE(self, P, pos):
    print "P: %s pos: %s" % (P, pos)
</snippet></ROW><ROW><id>18238435</id><snippet>boto</snippet></ROW><ROW><id>18238435</id><snippet>subprocess.call</snippet></ROW><ROW><id>18238435</id><snippet>import subprocess
addr = '10.20.30.40'
subprocess.call([ 'ssh', addr ])
</snippet></ROW><ROW><id>18238504</id><snippet>&gt;&gt;&gt; pieces = []
&gt;&gt;&gt; pieces[-1]

IndexError: list index out of range
</snippet></ROW><ROW><id>18238504</id><snippet>try:
    remainder = '{} {} '.format(*pieces[-1]) 
except IndexError:
    print pieces
    print chunk
    raise
</snippet></ROW><ROW><id>18238538</id><snippet>rename</snippet></ROW><ROW><id>18238538</id><snippet>In [1]: df = pd.DataFrame(np.random.randn(7, 5),
                          index=['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
                          columns=[29, 30, 31, 32, 33])

In [2]: df
Out[2]: 
           29        30        31        32        33
Mon -0.080946 -0.072797 -1.019406  1.149162  2.727502
Tue  1.041598 -0.730701 -0.079450  1.323332 -0.823343
Wed  0.338998  1.034372 -0.273139  0.457153  0.007429
Thu -2.239857 -0.439499  0.675963  0.966994  1.348100
Fri  0.050717 -0.506382  1.269897 -0.862577  1.205110
Sat -1.380323  0.200088 -0.685536 -0.425614  0.148111
Sun -0.248540 -1.056943  1.550433  0.651707 -0.041801

In [3]: df.rename(columns=lambda x: 'Week ' + str(x), inplace=True)

In [5]: df
Out[5]: 
      Week 29   Week 30   Week 31   Week 32   Week 33
Mon -0.080946 -0.072797 -1.019406  1.149162  2.727502
Tue  1.041598 -0.730701 -0.079450  1.323332 -0.823343
Wed  0.338998  1.034372 -0.273139  0.457153  0.007429
Thu -2.239857 -0.439499  0.675963  0.966994  1.348100
Fri  0.050717 -0.506382  1.269897 -0.862577  1.205110
Sat -1.380323  0.200088 -0.685536 -0.425614  0.148111
Sun -0.248540 -1.056943  1.550433  0.651707 -0.041801
</snippet></ROW><ROW><id>18238538</id><snippet>In [4]: df.plot(title='Title Here')
</snippet></ROW><ROW><id>18238712</id><snippet>replace</snippet></ROW><ROW><id>18238712</id><snippet>&gt;&gt;&gt; "\na".replace("\n", " ")
' a'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18238712</id><snippet>translate</snippet></ROW><ROW><id>18238712</id><snippet>replace</snippet></ROW><ROW><id>18238712</id><snippet>replace</snippet></ROW><ROW><id>18239134</id><snippet>d[1][2][3] = 42
</snippet></ROW><ROW><id>18239134</id><snippet>d[1][2]</snippet></ROW><ROW><id>18239134</id><snippet>d[1][2][3]</snippet></ROW><ROW><id>18239134</id><snippet>d[1][2][3]</snippet></ROW><ROW><id>18239134</id><snippet>d[1, 2, 3]</snippet></ROW><ROW><id>18239134</id><snippet>[]</snippet></ROW><ROW><id>18239134</id><snippet>node</snippet></ROW><ROW><id>18239134</id><snippet>__repr__</snippet></ROW><ROW><id>18239134</id><snippet>__setitem__</snippet></ROW><ROW><id>18239134</id><snippet>tupledict</snippet></ROW><ROW><id>18239134</id><snippet>__getitem__</snippet></ROW><ROW><id>18239134</id><snippet>get()</snippet></ROW><ROW><id>18239134</id><snippet>class tupledict(dict):

    class node(dict):
        def __repr__(self):
            if self:
                if hasattr(self, "value"):
                    return repr(self.value) + ", " + dict.__repr__(self)
                return dict.__repr__(self)
            else:
                return repr(self.value)

    def __init__(self):
        pass

    def __setitem__(self, key, value):
        if not isinstance(key, tuple):   # handle single value
            key = [key]
        d = self
        for k in key:
            if k not in d:
                dict.__setitem__(d, k, self.node())
            d = dict.__getitem__(d, k)
        d.value = value

    def __getitem__(self, key):
        if not isinstance(key, tuple):
            key = [key]
        d = self
        for k in key:
            try:
                d = dict.__getitem__(d, k)
            except KeyError:
                raise KeyError(key[0] if len(key) == 1 else key)
        try:
            return d.value
        except AttributeError:
            raise KeyError(key[0] if len(key) == 1 else key)
</snippet></ROW><ROW><id>18239134</id><snippet>td = tupledict()
td['foo', 'bar'] = 'spam'
td['foo', 'eggs']   # KeyError

key = 'foo', 'bar'
td[key]    # 'spam'
</snippet></ROW><ROW><id>18239159</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; from mpl_toolkits.mplot3d import Axes3D
&gt;&gt;&gt; AX = \[\]
&gt;&gt;&gt; fig = plt.figure()
&gt;&gt;&gt; ax = fig.add_subplot(111, projection='3d')
&gt;&gt;&gt; for R in \[range(0,10), range(5,15), range(10,20)\]:
...   data = \[np.array(R), np.array(range(10)), np.array(range(10))\]
...   AX = ax.scatter(*data, c=data\[0\], vmin=0, vmax=20, cmap=plt.cm.jet)
...   def forceUpdate(event): AX.changed()
...   fig.canvas.mpl_connect('draw_event', forceUpdate)
... 
9
10
11
&gt;&gt;&gt; plt.colorbar(AX)
&lt;matplotlib.colorbar.Colorbar instance at 0x36265a8&gt;
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>18239197</id><snippet>collections.defaultdict(list)</snippet></ROW><ROW><id>18239197</id><snippet>from collections import defaultdict

lst = [("a",4), ("b",4), ("a",5), ("b",3)]

result = defaultdict(list)
for a, b in lst:
    result[a].append(b)

print sorted(result.items())

# prints: [('a', [4, 5]), ('b', [4, 3])]
</snippet></ROW><ROW><id>18239197</id><snippet>O(n)</snippet></ROW><ROW><id>18239197</id><snippet>O(n * log(n))</snippet></ROW><ROW><id>18239197</id><snippet>O(n^2)</snippet></ROW><ROW><id>18239425</id><snippet>request</snippet></ROW><ROW><id>18239429</id><snippet>Deferred</snippet></ROW><ROW><id>18239429</id><snippet>maybeDeferred</snippet></ROW><ROW><id>18239429</id><snippet>t.e.adbapi.ConnectionPool.runQuery()</snippet></ROW><ROW><id>18239429</id><snippet>render()</snippet></ROW><ROW><id>18239429</id><snippet>render()</snippet></ROW><ROW><id>18239429</id><snippet>NOT_DONE_YET</snippet></ROW><ROW><id>18239429</id><snippet>def render(self, request):
    """Handle a new request"""
    request.setHeader('Content-Type', 'applicaton/json')
    self.getData(request)
    return server.NOT_DONE_YET
</snippet></ROW><ROW><id>18239429</id><snippet>runQuery</snippet></ROW><ROW><id>18239429</id><snippet>http://yoursite?last_update=5+and+"secret"+in+(select+password+from+users)
</snippet></ROW><ROW><id>18239429</id><snippet>%s</snippet></ROW><ROW><id>18239429</id><snippet>?</snippet></ROW><ROW><id>18239429</id><snippet>%</snippet></ROW><ROW><id>18239429</id><snippet>,</snippet></ROW><ROW><id>18239429</id><snippet>ConnectionPool</snippet></ROW><ROW><id>18239429</id><snippet>__init__</snippet></ROW><ROW><id>18239429</id><snippet>def getData(self, request):
    last_update = request.args['last_update']
    print "LAST UPDATE: ", last_update
    new_messages = self.dbpool.runQuery("SELECT *"
                                        " FROM chat_message"
                                        " WHERE time &gt; ?", request.last_update)
    #                                                  ^ ^
    return new_messages.addCallback(self.gotRows, request)
</snippet></ROW><ROW><id>18239429</id><snippet>runQuery</snippet></ROW><ROW><id>18239429</id><snippet>request</snippet></ROW><ROW><id>18239429</id><snippet>def gotRows(self, rows, request):
    if rows:
        # we have data to send back to the client! actually finish the
        # request here.
        data = {"messages": [{'author': row[1], 'message': row[2], 'timestamp': row[3]} for
                             row in rows]}
        request.write(self.__format_response(request, 1, data))
        request.finish()

    else:
        self.delayed_requests.append(self)
</snippet></ROW><ROW><id>18239429</id><snippet>processedDelayedRequests()</snippet></ROW><ROW><id>18239429</id><snippet>render()</snippet></ROW><ROW><id>18239429</id><snippet>def processDelayedRequests(self):
    delayed_requests = self.delayed_requests
    self.delayed_requests = []
    while self.delayed_requests:
        # grab a request out of the "queue"
        request = self.delayed_requests.pop()

        # we can cause another attempt at getting data, but we'll never get
        # to see what hapened with it in this function.
        self.getData(request)
</snippet></ROW><ROW><id>18239502</id><snippet>content_object</snippet></ROW><ROW><id>18239502</id><snippet>content_type</snippet></ROW><ROW><id>18239502</id><snippet>object_id</snippet></ROW><ROW><id>18239502</id><snippet>from django.contrib.contenttypes.models import ContentType
type = ContentType.objects.get_for_model(object)
vote, created = Vote.objects.get_or_create(user_voted=user_voted, content_type=type, object_id=object.id)
</snippet></ROW><ROW><id>18239502</id><snippet># This will fail
&gt;&gt;&gt; TaggedItem.objects.filter(content_object=guido)
# This will also fail
&gt;&gt;&gt; TaggedItem.objects.get(content_object=guido)
</snippet></ROW><ROW><id>18239697</id><snippet>urllib</snippet></ROW><ROW><id>18239697</id><snippet>urllib.quote</snippet></ROW><ROW><id>18239818</id><snippet>def touchingBlocks(sourceBlock):
    touching = []
    for t in range(6):
        touching.append(sourceBlock)  # Here is your error
    touching[0].x += 1
    touching[1].x -= 1
    touching[2].y += 1
    touching[3].y -= 1
    touching[4].z += 1
    touching[5].z -= 1
    return touching
</snippet></ROW><ROW><id>18239818</id><snippet>import copy
[...code...]
touching.append(copy.deepcopy(sourceBlock))
</snippet></ROW><ROW><id>18239822</id><snippet>&lt;tbody/&gt;</snippet></ROW><ROW><id>18239822</id><snippet>&lt;tr/&gt;</snippet></ROW><ROW><id>18239822</id><snippet>wget</snippet></ROW><ROW><id>18239822</id><snippet>curl</snippet></ROW><ROW><id>18239822</id><snippet>&lt;tbody/&gt;</snippet></ROW><ROW><id>18239822</id><snippet>//*[@id="mw-content-text"]/div[2]/table/tr/td/div/ul/li/a
</snippet></ROW><ROW><id>18239833</id><snippet>:w !python &gt; temp
</snippet></ROW><ROW><id>18239833</id><snippet>:tabnew temp
</snippet></ROW><ROW><id>18239833</id><snippet>:%!python script.py
</snippet></ROW><ROW><id>18239922</id><snippet>result = ssh.stdout.readlines()
error = ssh.stderr.readlines()

if error:
    print &gt;&gt;sys.stderr, "ERROR: {}".format(''.join(error))
else:
    print ''.join(result)
</snippet></ROW><ROW><id>18239922</id><snippet>False</snippet></ROW><ROW><id>18239922</id><snippet>[]</snippet></ROW><ROW><id>18240118</id><snippet>min_val, min_key = min((D[k], k) for k in S)
</snippet></ROW><ROW><id>18240118</id><snippet>min_key = min(S, key=D.get)
min_val = D[min_key]
</snippet></ROW><ROW><id>18240118</id><snippet>D</snippet></ROW><ROW><id>18240118</id><snippet>subset_min</snippet></ROW><ROW><id>18240118</id><snippet>D</snippet></ROW><ROW><id>18240260</id><snippet>True</snippet></ROW><ROW><id>18240260</id><snippet>True</snippet></ROW><ROW><id>18240260</id><snippet>True</snippet></ROW><ROW><id>18240260</id><snippet>matrix = [[True, False, True, False, False, True, False, True],
          [True, False, False, True, True, True, True, True],
          [False]]

res = []
for row in matrix:
    rr = row + [True]
    row_res = [rr[n+1:].index(True) if rr[n] else 0
               for n in range(len(row) - 1)]
    res.append(row_res + [0])
</snippet></ROW><ROW><id>18240260</id><snippet>res = [] #our result list
for row in matrix:
    rr = row + [True]  #row with an extra True at the end so index always works
    row_res = []       #result for this row
    for n in range(len(row) - 1):
        #if x is True, calculate the relative index of the next true
        x = rr[n+1:].index(True) if rr[n] else 0
        row_res.append(x)
    row_res.append(0)  #add an extra 0 at the end for the last element
    res.append(row_res)
</snippet></ROW><ROW><id>18240409</id><snippet>os.makedirs</snippet></ROW><ROW><id>18240409</id><snippet>mode</snippet></ROW><ROW><id>18240409</id><snippet>os.makedirs(log_dir, 0o664)
</snippet></ROW><ROW><id>18240583</id><snippet>X[labels == 0]</snippet></ROW><ROW><id>18240583</id><snippet>clusters = [X[labels == i] for i in xrange(n_clusters_)]
</snippet></ROW><ROW><id>18240583</id><snippet>outliers = X[labels == -1]
</snippet></ROW><ROW><id>18240680</id><snippet>decode</snippet></ROW><ROW><id>18240680</id><snippet>&gt;&gt;&gt; doc = doc.decode("utf-8")
&gt;&gt;&gt; print(doc)
Ο υπουργός Οικονομικών Γιάννης Στουρνάρας διαβίβασε την Τετάρτη στον πρόεδρο της αρμόδιας Αρχής κατά του ξεπλύµατος µαύρου χρήµατος, Παναγιώτη Νικολούδη, το αίτημα του υπουργού Υγείας Αδωνι Γεωργιάδη για κατά προτεραιότητα έλεγχο του «πόθεν έσχες» των διοικητών και υποδιοικητών που υπηρέτησαν στο Εθνικό Σύστημα Υγείας από το 2000 έως και σήμερα.
&gt;&gt;&gt; tokens = nltk.WordPunctTokenizer().tokenize(doc.decode("utf-8"))
&gt;&gt;&gt; for t in tokens:
...     print(t, end=" ")
... print()
... 
Ο υπουργός Οικονομικών Γιάννης Στουρνάρας διαβίβασε την Τετάρτη στον πρόεδρο της αρμόδιας Αρχής κατά του ξεπλύµατος µαύρου χρήµατος , Παναγιώτη Νικολούδη , το αίτημα του υπουργού Υγείας Αδωνι Γεωργιάδη για κατά προτεραιότητα έλεγχο του « πόθεν έσχες » των διοικητών και υποδιοικητών που υπηρέτησαν στο Εθνικό Σύστημα Υγείας από το 2000 έως και σήμερα . 
</snippet></ROW><ROW><id>18240680</id><snippet>decode("iso-8859-7")</snippet></ROW><ROW><id>18240685</id><snippet>views.py</snippet></ROW><ROW><id>18240685</id><snippet>return HttpResponse(json.dumps(data), mimetype="application/json")
</snippet></ROW><ROW><id>18240777</id><snippet>None</snippet></ROW><ROW><id>18240777</id><snippet>dict.update</snippet></ROW><ROW><id>18240777</id><snippet>self._dict.update({key:value})</snippet></ROW><ROW><id>18240777</id><snippet>self._dict</snippet></ROW><ROW><id>18240777</id><snippet>self._dict = {key: value}</snippet></ROW><ROW><id>18240777</id><snippet>self.__dict__.update({key:value})</snippet></ROW><ROW><id>18240777</id><snippet>setattr(self, key, value)</snippet></ROW><ROW><id>18240777</id><snippet>getattr(instance, thing)</snippet></ROW><ROW><id>18240777</id><snippet>instance.thing</snippet></ROW><ROW><id>18240777</id><snippet>thing</snippet></ROW><ROW><id>18240777</id><snippet>instance.__dict__</snippet></ROW><ROW><id>18240777</id><snippet>instance.__class__.__dict__</snippet></ROW><ROW><id>18240795</id><snippet>g=re.sub('(?&lt;=[^0-9])t','',g)
</snippet></ROW><ROW><id>18240795</id><snippet>g=re.sub('(?&lt;![0-9])t','',g)
</snippet></ROW><ROW><id>18241017</id><snippet>executeSomething()</snippet></ROW><ROW><id>18241017</id><snippet>for letter in letters:
    print queue.get()
</snippet></ROW><ROW><id>18241175</id><snippet>python -c "import runpy; import pdb; pdb.runcall(runpy.run_module, 'somepackage.somemodule', run_name='__main__')"
</snippet></ROW><ROW><id>18241175</id><snippet>pdb.runcall</snippet></ROW><ROW><id>18241175</id><snippet>pdb.run</snippet></ROW><ROW><id>18241295</id><snippet>C:\python33\Lib\site-packages\pandas\io\clipboard.py</snippet></ROW><ROW><id>18241295</id><snippet>text = clipboard_get()</snippet></ROW><ROW><id>18241295</id><snippet>text = text.decode('UTF-8')</snippet></ROW><ROW><id>18241431</id><snippet>bits=concatenate(([0,0,0,0,0,0,0,0], bits))
</snippet></ROW><ROW><id>18241431</id><snippet>concatenate()</snippet></ROW><ROW><id>18241431</id><snippet>numpy.concatenate()</snippet></ROW><ROW><id>18241431</id><snippet>zeros(8, dtype=int)</snippet></ROW><ROW><id>18241431</id><snippet>numpy.zeros()</snippet></ROW><ROW><id>18241431</id><snippet>[0,0,0,0,0,0,0,0, bits]</snippet></ROW><ROW><id>18241431</id><snippet>&gt;&gt; x = [1,2,3]

x =

     1     2     3

&gt;&gt; [0,0,x]

ans =

     0     0     1     2     3
</snippet></ROW><ROW><id>18241431</id><snippet>&gt;&gt;&gt; x = [1,2,3]
&gt;&gt;&gt;
&gt;&gt;&gt; [0,0,x]
[0, 0, [1, 2, 3]]
&gt;&gt;&gt; 
&gt;&gt;&gt; [0,0] + x
[0, 0, 1, 2, 3]
</snippet></ROW><ROW><id>18241531</id><snippet>import socket, hashlib, base64, threading

class PyWSock:
    MAGIC = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'
    HSHAKE_RESP = "HTTP/1.1 101 Switching Protocols\r\n" + \
                "Upgrade: websocket\r\n" + \
                "Connection: Upgrade\r\n" + \
                "Sec-WebSocket-Accept: %s\r\n" + \
                "\r\n"
    LOCK = threading.Lock()

    clients = []

    def recv_data (self, client):
        # as a simple server, we expect to receive:
        #    - all data at one go and one frame
        #    - one frame at a time
        #    - text protocol
        #    - no ping pong messages
        data = bytearray(client.recv(512))
        if(len(data) &lt; 6):
            raise Exception("Error reading data")
        # FIN bit must be set to indicate end of frame
        assert(0x1 == (0xFF &amp; data[0]) &gt;&gt; 7)
        # data must be a text frame
        # 0x8 (close connection) is handled with assertion failure
        assert(0x1 == (0xF &amp; data[0]))

        # assert that data is masked
        assert(0x1 == (0xFF &amp; data[1]) &gt;&gt; 7)
        datalen = (0x7F &amp; data[1])

        #print("received data len %d" %(datalen,))

        str_data = ''
        if(datalen &gt; 0):
            mask_key = data[2:6]
            masked_data = data[6:(6+datalen)]
            unmasked_data = [masked_data[i] ^ mask_key[i%4] for i in range(len(masked_data))]
            str_data = str(bytearray(unmasked_data))
        return str_data

    def broadcast_resp(self, data):
        # 1st byte: fin bit set. text frame bits set.
        # 2nd byte: no mask. length set in 1 byte. 
        resp = bytearray([0b10000001, len(data)])
        # append the data bytes
        for d in bytearray(data):
            resp.append(d)

        self.LOCK.acquire()
        for client in self.clients:
            try:
                client.send(resp)
            except:
                print("error sending to a client")
        self.LOCK.release()

    def parse_headers (self, data):
        headers = {}
        lines = data.splitlines()
        for l in lines:
            parts = l.split(": ", 1)
            if len(parts) == 2:
                headers[parts[0]] = parts[1]
        headers['code'] = lines[len(lines) - 1]
        return headers

    def handshake (self, client):
        print('Handshaking...')
        data = client.recv(2048)
        headers = self.parse_headers(data)
        print('Got headers:')
        for k, v in headers.iteritems():
            print k, ':', v

        key = headers['Sec-WebSocket-Key']
        resp_data = self.HSHAKE_RESP % ((base64.b64encode(hashlib.sha1(key+self.MAGIC).digest()),))
        print('Response: [%s]' % (resp_data,))
        return client.send(resp_data)

    def handle_client (self, client, addr):
        self.handshake(client)
        try:
            while 1:            
                data = self.recv_data(client)
                print("received [%s]" % (data,))
                self.broadcast_resp(data)
        except Exception as e:
            print("Exception %s" % (str(e)))
        print('Client closed: ' + str(addr))
        self.LOCK.acquire()
        self.clients.remove(client)
        self.LOCK.release()
        client.close()

    def start_server (self, port):
        s = socket.socket()
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        s.bind(('', port))
        s.listen(5)
        while(1):
            print ('Waiting for connection...')
            conn, addr = s.accept()
            print ('Connection from: ' + str(addr))
            threading.Thread(target = self.handle_client, args = (conn, addr)).start()
            self.LOCK.acquire()
            self.clients.append(conn)
            self.LOCK.release()

ws = PyWSock()
ws.start_server(9876)
</snippet></ROW><ROW><id>18241531</id><snippet>import socket,hashlib,base64

MAGIC = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'
HSHAKE_RESP = "HTTP/1.1 101 Switching Protocols\r\n" + \
            "Upgrade: websocket\r\n" + \
            "Connection: Upgrade\r\n" + \
            "Sec-WebSocket-Accept: %s\r\n" + \
            "\r\n"

HOST = ''
PORT = 9876
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((HOST, PORT))
s.listen(5)
conn, addr = s.accept()
print 'Connected by', addr
data = conn.recv(4096)
headers = {}
lines = data.splitlines()
for l in lines:
    parts = l.split(": ", 1)
    if len(parts) == 2:
        headers[parts[0]] = parts[1]
headers['code'] = lines[len(lines) - 1]
key = headers['Sec-WebSocket-Key']
resp_data = HSHAKE_RESP % ((base64.b64encode(hashlib.sha1(key+MAGIC).digest()),))
conn.send(resp_data)

while 1:
    data = conn.recv(4096)
    if not data: 
        break
    databyte = bytearray(data)
    datalen = (0x7F &amp; databyte[1])
    str_data = ''
    if(datalen &gt; 0):
        mask_key = databyte[2:6]
        masked_data = databyte[6:(6+datalen)]
        unmasked_data = [masked_data[i] ^ mask_key[i%4] for i in range(len(masked_data))]
        str_data = str(bytearray(unmasked_data))
    print str_data
    resp = bytearray([0b10000001, len(str_data)])
    for d in bytearray(str_data):
        resp.append(d)
    conn.sendall(resp)
conn.close()
</snippet></ROW><ROW><id>18241624</id><snippet>from math import sin, cos, tan
li = [sin, cos, tan]
</snippet></ROW><ROW><id>18241624</id><snippet>funcs = {'sin': sin, 'cos': cos, 'tan': tan}
func = funcs[string]
func(x)
</snippet></ROW><ROW><id>18241888</id><snippet>y</snippet></ROW><ROW><id>18241888</id><snippet>m</snippet></ROW><ROW><id>18241888</id><snippet>d</snippet></ROW><ROW><id>18241888</id><snippet>form</snippet></ROW><ROW><id>18241888</id><snippet>y = int(form['year'].value)
m = int(form['month'].value)
d = int(form['day'].value)
</snippet></ROW><ROW><id>18241888</id><snippet>year</snippet></ROW><ROW><id>18241888</id><snippet>month</snippet></ROW><ROW><id>18241888</id><snippet>day</snippet></ROW><ROW><id>18241888</id><snippet>http://www2.cs.sfu.ca/CourseCentral/165/ggbaker/1134-dist/lab/files/lab10-dateform.html</snippet></ROW><ROW><id>18241888</id><snippet>calendar.weekday()</snippet></ROW><ROW><id>18241888</id><snippet>int()</snippet></ROW><ROW><id>18241888</id><snippet>calendar.weekday()</snippet></ROW><ROW><id>18241888</id><snippet>weekday</snippet></ROW><ROW><id>18241888</id><snippet>if</snippet></ROW><ROW><id>18242005</id><snippet>dict(newtlist)</snippet></ROW><ROW><id>18242005</id><snippet>dict()</snippet></ROW><ROW><id>18242005</id><snippet>dict</snippet></ROW><ROW><id>18242005</id><snippet>def dictcomb(*dct): #changed the local variable dict to dct and its references henceforth
    mykeys = []
    myvalues = []
    tupl = ()
    tuplist = []
    newtlist = []
    count = 0
    for i in dct:
        mykeys.append(list(i.keys()))
        myvalues.append(list(i.values()))
        dictlen = len(i)
        count = count + 1
    for y in range(count):
        for z in range(dictlen):
            tuplist.append((mykeys[y][z],myvalues[y][z]))
    tuplist.sort()
    for a in range(len(tuplist)):
        try:
            if tuplist[a][0]==tuplist[a+1][0]:
                comblist = [tuplist[a][1],tuplist[a+1][1]]
                newtlist.append(tuple([tuplist[a][0],comblist]))
                del(tuplist[a+1])
            else:
                newtlist.append(tuplist[a])
        except IndexError as msg:
            pass
    print(newtlist)
    dict(newtlist)
</snippet></ROW><ROW><id>18242089</id><snippet>process_value</snippet></ROW><ROW><id>18242089</id><snippet>SgmlLinkExtractor</snippet></ROW><ROW><id>18242089</id><snippet>href</snippet></ROW><ROW><id>18242089</id><snippet>CrawlSpider</snippet></ROW><ROW><id>18242089</id><snippet>parse_follow</snippet></ROW><ROW><id>18242089</id><snippet>Rule</snippet></ROW><ROW><id>18242089</id><snippet>def fix_url(url):
    marker1 = url.find("?") + 1
    marker2 = url.find("page")
    fixed_url = url[:marker1] + url[marker2:] + "&amp;" + url[marker1:marker2 - 1]
    fixed_url = fixed_url.replace("+"," ")
    return fixed_url

class MySpider(CrawlSpider):
    name = 'ContentSpider'
    allowed_domains = ['bbc.co.uk']
    start_urls = ['http://www.bbc.co.uk/search/news/?q=credit card']

    rules = (
        Rule(
            SgmlLinkExtractor(
                restrict_xpaths=('//div[@class="cmWidget news"]/div[@id="news-content"]'),
                allow=('http\:\/\/www\.bbc\.co\.uk\/news\/.')),
            callback='parse_item',
            follow=False),
        Rule(
            SgmlLinkExtractor(
                restrict_xpaths=('//div[@class="pagination"]'),
                process_value=fix_url)),
    )

    def __init__(self, **kwargs):
        CrawlSpider.__init__(self, **kwargs)
        logfile = open('testlog.log', 'w')
        log_observer = ScrapyFileLogObserver(logfile, level=logging.DEBUG)
        log_observer.start()
        log.start(loglevel=logging.DEBUG)

    def parse_item(self, response):
        item = CreditcrawlerItem()
        item['url'] = response.url
        return item
</snippet></ROW><ROW><id>18242348</id><snippet>old = {'a': a, 'b': b, 'c': c}
</snippet></ROW><ROW><id>18242348</id><snippet>globals()</snippet></ROW><ROW><id>18242348</id><snippet>globals().update(old)
</snippet></ROW><ROW><id>18242348</id><snippet>a</snippet></ROW><ROW><id>18242348</id><snippet>b</snippet></ROW><ROW><id>18242348</id><snippet>c</snippet></ROW><ROW><id>18242348</id><snippet>d</snippet></ROW><ROW><id>18242348</id><snippet>globals().update(dict.fromkeys(old.keys(), d))
</snippet></ROW><ROW><id>18242348</id><snippet>a</snippet></ROW><ROW><id>18242348</id><snippet>b</snippet></ROW><ROW><id>18242348</id><snippet>c</snippet></ROW><ROW><id>18242348</id><snippet>d</snippet></ROW><ROW><id>18242595</id><snippet>if len(data) == 0:
    plt.plot([])
else:
    plt.histogram(data)
</snippet></ROW><ROW><id>18242688</id><snippet>Member.objects.attribute.exclude(id=clubmember_set__member_id)
</snippet></ROW><ROW><id>18242707</id><snippet>excelFile = open("excelFile_1.csv", 'w', newline='', encoding='UTF16') 
</snippet></ROW><ROW><id>18242707</id><snippet>excelFile = open("excelFile_1.csv", 'w', newline='', encoding='UTF8')
excelFile.write('\ufeff')  # Zero-width non-breaking space, the Byte Order Mark
</snippet></ROW><ROW><id>18242936</id><snippet>dot</snippet></ROW><ROW><id>18242936</id><snippet>]</snippet></ROW><ROW><id>18242936</id><snippet>re.sub(r'[.](?![0-9]{2}\W)',"",s)
</snippet></ROW><ROW><id>18243062</id><snippet>import pycuda.autoinit
import pycuda.driver as drv
import numpy

from pycuda.compiler import SourceModule
mod = SourceModule("""
__global__ void multiply_them(float *dest, float *a, float *b)
{
  const int i = threadIdx.x;
  dest[i] = a[i] * b[i];
}
""")

multiply_them = mod.get_function("multiply_them")

a = numpy.random.randn(400).astype(numpy.float32)
b = numpy.random.randn(400).astype(numpy.float32)

dest = numpy.zeros_like(a)
multiply_them(
        drv.Out(dest), drv.In(a), drv.In(b),
        block=(400,1,1), grid=(1,1))

print dest-a*b
</snippet></ROW><ROW><id>18243148</id><snippet>set()</snippet></ROW><ROW><id>18243148</id><snippet>in</snippet></ROW><ROW><id>18243148</id><snippet>all([w.isdigit() for w in word])
</snippet></ROW><ROW><id>18243148</id><snippet>tf = [ c.isalpha() for c in word ]
</snippet></ROW><ROW><id>18243148</id><snippet>t = tf.count(True)
f = tf.count(False)
</snippet></ROW><ROW><id>18243148</id><snippet>def check_wordiness(word):
    # This returns true only if a word is all letters
    return all([ c.isalpha() for c in word ])
</snippet></ROW><ROW><id>18243148</id><snippet>for word in top_words:</snippet></ROW><ROW><id>18243148</id><snippet>for word in top_words:
    # Since you are calling .lower() so much, 
    # you probably want to define it up here
    w = word.lower() 
    if w not in common_words and w not in already:
        # String formatting is preferred over +'s
        print "%i. '%s'" % (number, word)
        number +=1
    # This could go under the if statement. You only want to add
    # words that could be added again.  Why add words that are being
    # filtered out anyways?
    already.append(w)

    # this wasn't indented correctly before
    if number == many:
        break
</snippet></ROW><ROW><id>18243336</id><snippet>mail_lists = models.ManyToManyField(Mailists, blank=True)
</snippet></ROW><ROW><id>18243336</id><snippet>blank=True</snippet></ROW><ROW><id>18243336</id><snippet>null=True</snippet></ROW><ROW><id>18243464</id><snippet>def parse(s):

    li = []

    open = 0
    closed = False
    start_index = -1

    for index, c in enumerate(s):
        if c == '(':
            if open == 0:
                start_index = index
            open += 1

        elif c == ')':
            open -= 1
            if open == 0:
                closed = True

        elif closed:
            li.append(s[start_index: index + 1])
            closed = False

        elif open == 0 and c.isdigit():
            li.append(c)

    return li
</snippet></ROW><ROW><id>18243464</id><snippet>'1/(2/(3)2/4)s/5'</snippet></ROW><ROW><id>18243464</id><snippet>['1', '(2/(3)2/4)s', '5']
</snippet></ROW><ROW><id>18243464</id><snippet>'1/(15/-23)s/4'</snippet></ROW><ROW><id>18243464</id><snippet>['1', '(15/-23)s', '4']
</snippet></ROW><ROW><id>18243464</id><snippet>import re

def expand(s):

    ''' Group 1 contains the string inside the parenthesis
        Group 2 contains the digit or character `s` after the closing parenthesis

    '''    
    match = re.search(r'\(([^()]*)\)(\d|s)', s)
    if match:
        group0 = match.group()
        group1 = match.group(1)
        group2 = match.group(2)
        if group2.isdigit():
            # A digit after the closing parenthesis. Repeat the string inside
            s = s.replace(group0, ((group1 + '/') * int(group2))[:-1])
        else:
            s = s.replace(group0, '/'.join(group1.split('/') + group1.split('/')[::-1]))

    if '(' in s:
        return expand(s)

    return s

li = parse('1/(15/-23)2/4')

for index, s in enumerate(li):
    if '(' in s:
        s = expand(s)
        li[index] = s.split('/')

import itertools
print list(itertools.chain(*li))
</snippet></ROW><ROW><id>18243464</id><snippet>['1', '15', '-23', '-23', '15', '4']
</snippet></ROW><ROW><id>18243464</id><snippet>parse(s)</snippet></ROW><ROW><id>18243493</id><snippet>def twoD_interpolate(arr, xmin, xmax, ymin, ymax, x1, y1):
    """
    interpolate in two dimensions with "hard edges"
    """
    ny, nx = arr.shape  # Note the order of ny and xy

    x1 = np.atleast_1d(x1)
    y1 = np.atleast_1d(y1)

    # Change coordinates to match your array.
    x1 = (x1 - xmin) * (nx - 1) / float(xmax - xmin)
    y1 = (y1 - ymin) * (ny - 1) / float(ymax - ymin)

    # order=1 is required to return your examples.
    # mode='nearest' prevents the need for clip
    return map_coordinates(arr, np.vstack((y1, x1)), order=1, mode='nearest')

# function to get the value
def test_val(x, y, arr):
    return twoD_interpolate(arr, 0, 6, 9, 12, x, y)
</snippet></ROW><ROW><id>18243493</id><snippet>print test_val(4, 11, z)
[ 1.7]

print test_val(2, 10, z)
[ 3.7]

print test_val(2.5, 9, z)
[ 4.475]

print test_val(2.5, 9.5, z)
[ 3.925]

#Can even use 1D numpy arrays now
print test_val(np.arange(4),np.arange(4)+9,z)
[ 6.4   4.5   3.    1.95]
</snippet></ROW><ROW><id>18243493</id><snippet>np.atleast_1d</snippet></ROW><ROW><id>18243493</id><snippet>np.array([x1])</snippet></ROW><ROW><id>18243493</id><snippet>x1</snippet></ROW><ROW><id>18243493</id><snippet>&gt;&gt;&gt; np.atleast_1d(5)
array([5])
&gt;&gt;&gt; np.atleast_1d(np.arange(5))
array([0, 1, 2, 3, 4])
</snippet></ROW><ROW><id>18243493</id><snippet>order=1</snippet></ROW><ROW><id>18243493</id><snippet>1</snippet></ROW><ROW><id>18243493</id><snippet>np.vstack</snippet></ROW><ROW><id>18243493</id><snippet>x</snippet></ROW><ROW><id>18243493</id><snippet>y</snippet></ROW><ROW><id>18243493</id><snippet>map_coordinates</snippet></ROW><ROW><id>18243493</id><snippet>coords=[[y1,y2,y3,...
        [x1,y2,y3,...]]

ycoords,xcoords=['y1','y2','y3'],['x1','x2','x3']
&gt;&gt;&gt; np.vstack((xcoords,ycoords))
array([['y1', 'y2','y3'],
       ['x1', 'x2','x3']],
      dtype='|S2')
</snippet></ROW><ROW><id>18243550</id><snippet>&gt;&gt;&gt; print(' MENU '.center(80, '*'))
************************************* MENU *************************************
</snippet></ROW><ROW><id>18243568</id><snippet>In [11]: rng = pd.date_range('2013', freq='H', periods=1000)

In [12]: df = pd.DataFrame(np.random.randn(len(rng)), index=rng, columns=['data'])
</snippet></ROW><ROW><id>18243568</id><snippet>In [13]: df['week'] = df.index.week
</snippet></ROW><ROW><id>18243568</id><snippet>In [14]: df['week_beginning'] = df.index.to_period('W').to_timestamp()

In [15]: df['week_time'] = df.index.to_series() - df['week_beginning']
</snippet></ROW><ROW><id>18243568</id><snippet>pivot_table</snippet></ROW><ROW><id>18243568</id><snippet>In [16]: df.pivot_table(values='data', rows='week_time', cols='week')
Out[16]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 168 entries, 0 to 601200000000000
Data columns (total 7 columns):
33    120  non-null values
34    168  non-null values
35    168  non-null values
36    168  non-null values
37    168  non-null values
38    168  non-null values
39    40  non-null values
dtypes: float64(7)
</snippet></ROW><ROW><id>18243568</id><snippet>In [17]: df.pivot_table('data', 'week_time', 'week').rename(columns=lambda x: 'Week ' + str(x)).plot()
</snippet></ROW><ROW><id>18243630</id><snippet>re.I | re.M</snippet></ROW><ROW><id>18243630</id><snippet>I</snippet></ROW><ROW><id>18243630</id><snippet>M</snippet></ROW><ROW><id>18243630</id><snippet>str = "Test "
a = re.findall(r"(\d+)", str, re.IGNORECASE|re.S)
</snippet></ROW><ROW><id>18243849</id><snippet>r.real = a.real*b.real - a.imag*b.imag;
r.imag = a.real*b.imag + a.imag*b.real;
</snippet></ROW><ROW><id>18243849</id><snippet>a.real*b.real - a.imag*b.imag
</snippet></ROW><ROW><id>18243849</id><snippet>a</snippet></ROW><ROW><id>18243849</id><snippet>b</snippet></ROW><ROW><id>18243849</id><snippet>nan</snippet></ROW><ROW><id>18243849</id><snippet>nan</snippet></ROW><ROW><id>18243849</id><snippet>(nan+nanj)</snippet></ROW><ROW><id>18243849</id><snippet>Py_ADJUST_ERANGE2</snippet></ROW><ROW><id>18243849</id><snippet>errno</snippet></ROW><ROW><id>18243849</id><snippet>nan</snippet></ROW><ROW><id>18243849</id><snippet>OverflowError</snippet></ROW><ROW><id>18243979</id><snippet>if now.tzinfo is not None:
    now = now.astimezone(utc).replace(tzinfo=None)
return now
</snippet></ROW><ROW><id>18243979</id><snippet>if created_at.tzinfo is None:
    created_at = utc.localize(created_at)
return created_at
</snippet></ROW><ROW><id>18243979</id><snippet>None</snippet></ROW><ROW><id>18243979</id><snippet>class TZDateTime(TypeDecorator):
    """
    Coerces a tz-aware datetime object into a naive utc datetime object to be
    stored in the database. If already naive, will keep it.

    On return of the data will restore it as an aware object by assuming it
    is UTC.

    Use this instead of the standard :class:`sqlalchemy.types.DateTime`.
    """

    impl = DateTime

    def process_bind_param(self, value, dialect):
        if value.tzinfo is not None:
            value = value.astimezone(utc).replace(tzinfo=None)
        return value

    def process_result_value(self, value, dialect):
        if value.tzinfo is None:
            value = utc.localize(value)
        return value
</snippet></ROW><ROW><id>18243979</id><snippet>datetime.datetime.utcnow()</snippet></ROW><ROW><id>18243979</id><snippet>class Test(Base):
    __tablename__ = 'test'
    created_at = Column(TZDateTime)
</snippet></ROW><ROW><id>18243987</id><snippet>input_implementations = { 'xls':xls, 'xml':xml, 'csv':csv }

def input_factory(filename):
    ext = os.path.splitext(filename)[1][1:].lower()
    impl = input_implementations.get(ext, None)
    if impl is None:
        print 'rain fire from the skies'
    else:
        return impl(filename)
</snippet></ROW><ROW><id>18244141</id><snippet>a</snippet></ROW><ROW><id>18244141</id><snippet>class=fl</snippet></ROW><ROW><id>18244141</id><snippet>find_all</snippet></ROW><ROW><id>18244141</id><snippet>getAdditionalGooglePages = beautifulSoupObj.find_all('a', attrs={"class": "fl"})
</snippet></ROW><ROW><id>18244141</id><snippet>id=fl</snippet></ROW><ROW><id>18244141</id><snippet>getAdditionalGooglePages = beautifulSoupObj.find_all('a', id="fl")
</snippet></ROW><ROW><id>18244141</id><snippet>class</snippet></ROW><ROW><id>18244145</id><snippet>for (x,y in a):
</snippet></ROW><ROW><id>18244145</id><snippet>for (x,y) in a:
</snippet></ROW><ROW><id>18244145</id><snippet>&gt;&gt;&gt; for (super_long_descriptive_name_1,
...      super_long_descriptive_name_2) in a:
...     pass
... 
</snippet></ROW><ROW><id>18244441</id><snippet>alpha</snippet></ROW><ROW><id>18244441</id><snippet>for</snippet></ROW><ROW><id>18244441</id><snippet>else:
    lett = lett + 1
    count_character[ord(character)] = count_character[ord(character)] + 1
    alpha = ord(character) - ord('A') # &lt;-- need this
    if vowel[(alpha)] == (character):
        num_vowels = num_vowels + 1
        print(vowel[alpha])
    else:
        num_consanants = num_consanants + 1
</snippet></ROW><ROW><id>18244485</id><snippet>subprocess.getoutput()</snippet></ROW><ROW><id>18244485</id><snippet>import subprocess
stdoutdata = subprocess.getoutput("wc --lines /var/log/syslog")
print("stdoutdata: " + stdoutdata.split()[0])
</snippet></ROW><ROW><id>18244534</id><snippet>numpy</snippet></ROW><ROW><id>18244534</id><snippet>str</snippet></ROW><ROW><id>18244534</id><snippet>numpy.string_</snippet></ROW><ROW><id>18244534</id><snippet>In [18]: from pandas.util.testing import rands

In [19]: s = Series([rands(120) for _ in range(10)])

In [20]: s
Out[20]:
0    LdeUwCKNFi4SWWfnAsKK3VIdDegy35lokoOr5DfCePoGn2...
1    xXmofyBFUfCiApbqNEDtJs6JhU0QAhIG8sQRCKkKMdTZuZ...
2    t3XcQFDQhg8BxAc9vFeo5Ky6beMxp9IGj54u3OzELR8lRf...
3    tWufKLo4OiW8lMpB8NiHzy0REAnAtAmLrDJyLzi1GBSRwS...
4    bysGao2rhiqxfmv54eDT6qcshlk0E7srrRLnuBDRRu7oVg...
5    AYIZFysXR9vispYQEfwqaZ20YYvR52pPkBtd2acOapK3Mv...
6    eLAwKopRuynrY75dn7vEfUnqhoSDLh5mGSBclFDaItwyxJ...
7    oj8ilX2EvhegAI4FvZQxJU0hTDR04aLySNdCXPmqOLa6CF...
8    5mEX5o23PMg5yWEE6bofk5tqzPCFNNCIn1v3ynYxicVXa8...
9    c2fS5Z1w7IxKq72x5KM8WhNChfrEJoFavdD1DQUJn4NCNP...
dtype: object

In [21]: s.astype(str).map(len)
Out[21]:
0    120
1    120
2    120
3    120
4    120
5    120
6    120
7    120
8    120
9    120
dtype: int64

In [22]: map(len, s.values.astype(str))
Out[22]: [64, 64, 64, 64, 64, 64, 64, 64, 64, 64]
</snippet></ROW><ROW><id>18244534</id><snippet>numpy</snippet></ROW><ROW><id>18244534</id><snippet>int</snippet></ROW><ROW><id>18244534</id><snippet>str</snippet></ROW><ROW><id>18244534</id><snippet>pandas</snippet></ROW><ROW><id>18244534</id><snippet>In [4]: s = Series([1, 22, 333, 4444])

In [5]: s
Out[5]:
0       1
1      22
2     333
3    4444
dtype: int64

In [6]: s.astype(str)
Out[6]:
0       1
1      22
2     333
3    4444
dtype: object
</snippet></ROW><ROW><id>18244534</id><snippet>numpy</snippet></ROW><ROW><id>18244534</id><snippet>pandas</snippet></ROW><ROW><id>18244534</id><snippet>f0c1bd</snippet></ROW><ROW><id>18244534</id><snippet>In [3]: s = Series([1, 22, 333, 4444])

In [4]: s.map(str)
Out[4]:
0       1
1      22
2     333
3    4444
dtype: object
</snippet></ROW><ROW><id>18244534</id><snippet>pandas</snippet></ROW><ROW><id>18244534</id><snippet>map</snippet></ROW><ROW><id>18244534</id><snippet>Series</snippet></ROW><ROW><id>18244534</id><snippet>pandas</snippet></ROW><ROW><id>18244647</id><snippet>sqlite3</snippet></ROW><ROW><id>18244647</id><snippet>create table words
    (id integer primary key autoincrement not null,
     first text, second text, third text);
</snippet></ROW><ROW><id>18244647</id><snippet>sqlite&gt; select * from words limit 5;
1|salvation|prorates|bird
2|fore|embellishment|empathized
3|scalier|trinity|graze
4|exes|archways|interrelationships
5|voguish|collating|partying
</snippet></ROW><ROW><id>18244647</id><snippet>select * from words where first == "dole" and second == "licked";
29599672|dole|licked|hates
</snippet></ROW><ROW><id>18244647</id><snippet>create index first on words (first);
create index second on words (second);
</snippet></ROW><ROW><id>18244652</id><snippet>player.name = getName()</snippet></ROW><ROW><id>18244652</id><snippet>()</snippet></ROW><ROW><id>18244652</id><snippet>player.name</snippet></ROW><ROW><id>18244652</id><snippet>def getName():
    tempName = ""
    while True:
        tempName = raw_input("What is you name? ")
        if not len(tempName):
            continue
        if yesOrNo("Is {0} your name?".format(tempName)):
            return tempName
        else:
            continue
</snippet></ROW><ROW><id>18244652</id><snippet>player.name = getName()

while not player.dead:
    input = raw_input("&gt;&gt; ").split()
    input.append("EOI")

    if isValidCMD(input[0]):
        runCMD(input[0], input[1], player)
</snippet></ROW><ROW><id>18244828</id><snippet>[innerdict["key3"] for innerdict in list]
</snippet></ROW><ROW><id>18244833</id><snippet>for qry in range(len(arr)):
</snippet></ROW><ROW><id>18244833</id><snippet>arr</snippet></ROW><ROW><id>18244833</id><snippet>print(qry)
</snippet></ROW><ROW><id>18244833</id><snippet>for qry in arr:
    print(qry)
</snippet></ROW><ROW><id>18244833</id><snippet>print qry</snippet></ROW><ROW><id>18244875</id><snippet>inputString = "my_item = ['maria','jose']"

# value is a list type 
value = eval(inputString.split("=")[1])
# key is a string type
key = inputString.split("=")[0].strip()

# I don't think you can define a variable name while the script is running. 
# but you can use dictionary type to call it.
mydict = {}
mydict[key] = value
</snippet></ROW><ROW><id>18244875</id><snippet>&gt;&gt;&gt; print mydict['my_item'] 
['maria', 'jose']
</snippet></ROW><ROW><id>18244884</id><snippet>import xml.etree.ElementTree as ET
tree = ET.parse('data.xml')
root = tree.getroot()

def prepend_ns(s):
    return '{http://www.w3.org/2005/Atom}' + s

for entry in root.findall(prepend_ns('entry')):
    print 'Entry:'
    print '    Title: '   + entry.find(prepend_ns('title')).text
    print '    Author: '  + entry.find(prepend_ns('author')).find(prepend_ns('name')).text
    print '    URL: '     + entry.find(prepend_ns('link')).attrib['href']
    print '    Summary: ' + entry.find(prepend_ns('summary')).text
</snippet></ROW><ROW><id>18244970</id><snippet>dict.get()</snippet></ROW><ROW><id>18244970</id><snippet>secret_map.get(char, char)
</snippet></ROW><ROW><id>18245129</id><snippet>for character in msg.upper():
    if count_character[ord(character)] &gt; max_letter:
        max_letter = count_character[ord(character)]
        count_hi = count_hi + 1
</snippet></ROW><ROW><id>18245129</id><snippet>for character in msg.upper():
    if count_character[ord(character)] &gt; max_letter:
        max_letter = count_character[ord(character)]
        high_letter = character

print("Character" , high_letter , "appeared the most. It appeared", max_letter, "times.")
</snippet></ROW><ROW><id>18245135</id><snippet>id</snippet></ROW><ROW><id>18245135</id><snippet>2**850</snippet></ROW><ROW><id>18245135</id><snippet>&gt;&gt;&gt; id(object())
34418928
&gt;&gt;&gt; id(object())
34418928
&gt;&gt;&gt; id(object()),id(object())
(34418912, 34418912)
&gt;&gt;&gt; id(object()) == id(object())
True
&gt;&gt;&gt; object() is object()
False
</snippet></ROW><ROW><id>18245135</id><snippet>True</snippet></ROW><ROW><id>18245135</id><snippet>is</snippet></ROW><ROW><id>18245224</id><snippet>if len(letters) == len(set(letters)):
    do something
</snippet></ROW><ROW><id>18245281</id><snippet>from sys import stdout
from twisted.python.log import startLogging
startLogging(stdout)
</snippet></ROW><ROW><id>18245281</id><snippet>Deferred</snippet></ROW><ROW><id>18245281</id><snippet>from twisted.python.log import err

...

    d.addCallback(connect)
    d.addCallback(say)
    d.addErrback(err, "connect_protocol encountered some problem")
</snippet></ROW><ROW><id>18245281</id><snippet>say</snippet></ROW><ROW><id>18245281</id><snippet>Deferred</snippet></ROW><ROW><id>18245281</id><snippet>connect</snippet></ROW><ROW><id>18245281</id><snippet>connect</snippet></ROW><ROW><id>18245281</id><snippet>callRemote</snippet></ROW><ROW><id>18245281</id><snippet>connect</snippet></ROW><ROW><id>18245281</id><snippet>Deferred</snippet></ROW><ROW><id>18245281</id><snippet>def connect(protocol):
    print 'Connecting to server as Mr Spaceman...'
    d = protocol.callRemote(commands.Connect, username='Mr Foo')
    d.addCallback(lambda result: (protocol, result))
    return d

def say((protocol, result)):
    print 'Saying "Hello world" to the server...'
    return protocol.callRemote(commands.Say,
                               phrase='Hello world')
</snippet></ROW><ROW><id>18245311</id><snippet>itemBank = [] 
for row in rows:
    itemBank.append((
        tempRow2['Item_Name'],
        tempRow1['Item_Price'],
        tempRow3['Item_In_Stock'],
        tempRow4['Item_Max'], 
        getTimeExtra
        )) #append data


q = """ insert ignore into TABLE1 (
        Item_Name, Item_Price, Item_In_Stock, Item_Max, Observation_Date ) 
        values (%s,%s,%s,%s,%s)           
    """

try:
    x.executemany(q, itemBank)
    conn.commit()
except:
    conn.rollback()
</snippet></ROW><ROW><id>18245506</id><snippet>self.comboADV.activated.connect(self.passtt) -&gt; self.comboADV.activated[str].connect(self.passtt)
</snippet></ROW><ROW><id>18245506</id><snippet>def passtt(self,item):
    print(item)
</snippet></ROW><ROW><id>18245522</id><snippet>connection.commit()</snippet></ROW><ROW><id>18245522</id><snippet>cursor.execute()</snippet></ROW><ROW><id>18245588</id><snippet>AddSymbol(company_name)</snippet></ROW><ROW><id>18245588</id><snippet>Names</snippet></ROW><ROW><id>18245588</id><snippet>AddPrices</snippet></ROW><ROW><id>18245588</id><snippet>AddPrices</snippet></ROW><ROW><id>18245588</id><snippet>str</snippet></ROW><ROW><id>18245588</id><snippet>dict</snippet></ROW><ROW><id>18245588</id><snippet>AddSymbol</snippet></ROW><ROW><id>18245588</id><snippet>stock_symbol</snippet></ROW><ROW><id>18245588</id><snippet>Names</snippet></ROW><ROW><id>18245734</id><snippet>0</snippet></ROW><ROW><id>18245734</id><snippet>1</snippet></ROW><ROW><id>18245734</id><snippet>i = 0
for mylist in listlist:
  answer[i] = mylist.index(1)
  i += 1
</snippet></ROW><ROW><id>18245734</id><snippet>list</snippet></ROW><ROW><id>18245734</id><snippet>mylist</snippet></ROW><ROW><id>18245793</id><snippet>class User(object):
    def action_attack(self):
        ...

    def handle_action(self, name):
        method = getattr(self, 'action_' + name)
        method()

class SpecialUser(User):
    def action_attack(self):
        ...
</snippet></ROW><ROW><id>18245999</id><snippet>class Wrapper(object):
    def __init__(self, wrapped):
        self.wrapped = wrapped

    def __getattr__(self, name):
        if name.startswith('sp_'):
            value = getattr(self.wrapped, name)
            setattr(self, name, value)
            return value

        raise AttributeError
</snippet></ROW><ROW><id>18245999</id><snippet>__getattr__</snippet></ROW><ROW><id>18246031</id><snippet>in</snippet></ROW><ROW><id>18246031</id><snippet>__contains__</snippet></ROW><ROW><id>18246031</id><snippet>list</snippet></ROW><ROW><id>18246031</id><snippet>list</snippet></ROW><ROW><id>18246031</id><snippet>tuple</snippet></ROW><ROW><id>18246031</id><snippet>dict</snippet></ROW><ROW><id>18246031</id><snippet>set</snippet></ROW><ROW><id>18246031</id><snippet>in</snippet></ROW><ROW><id>18246031</id><snippet>it = iter(list1)
while True:
    try:
        item = next(it)
    except StopIteration:
        break
    if item == thingToCheck:
        return True
return False 
</snippet></ROW><ROW><id>18246343</id><snippet>key</snippet></ROW><ROW><id>18246343</id><snippet>&gt;&gt;&gt; bandlist = ['B28', 'B26', 'B11', 'B21', 'B20', 'B7', 'B13', 'B3', 'B19', 'B8', 'B1']
&gt;&gt;&gt; sorted(bandlist, key=lambda x: int(x[1:]))
['B1', 'B3', 'B7', 'B8', 'B11', 'B13', 'B19', 'B20', 'B21', 'B26', 'B28']
</snippet></ROW><ROW><id>18246385</id><snippet>def stream_encode_multipart(values, use_tempfile=True, threshold=1024 * 500,
                            boundary=None, charset='utf-8'):
    """Encode a dict of values (either strings or file descriptors or
    :class:`FileStorage` objects.) into a multipart encoded string stored
    in a file descriptor.
    """

    ...
</snippet></ROW><ROW><id>18246518</id><snippet>scipy.integrate.cumtrapz()</snippet></ROW><ROW><id>18246518</id><snippet>plt.plot(time[:-1], scipy.integrate.cumtrapz(signal, x=time))
plt.show()
</snippet></ROW><ROW><id>18246830</id><snippet>if</snippet></ROW><ROW><id>18246830</id><snippet>b = dict( (key, value) for (key, value) in a.items() if key == "hello" )
</snippet></ROW><ROW><id>18246830</id><snippet>dict(...)</snippet></ROW><ROW><id>18246830</id><snippet>dict</snippet></ROW><ROW><id>18246830</id><snippet>b = { key: value for key, value in a.items() if key == "hello" }
</snippet></ROW><ROW><id>18246862</id><snippet>"Power ON by Alarm"</snippet></ROW><ROW><id>18247164</id><snippet>context</snippet></ROW><ROW><id>18247164</id><snippet>context</snippet></ROW><ROW><id>18247164</id><snippet>def post_save(self, obj, created=False):
    context = self.get_serializer_context()
    clip_serializer = SolrClipSerializer(obj, context=context)
    update_solr.delay(clip_serializer.data)
</snippet></ROW><ROW><id>18247164</id><snippet>@task
def update_solr(data):
    response = requests.post(url, data=data)
</snippet></ROW><ROW><id>18247191</id><snippet>print( "%.2f" % 0.23999999999999999 )
</snippet></ROW><ROW><id>18247191</id><snippet>decimal</snippet></ROW><ROW><id>18247191</id><snippet>a =  1326048  # /100=  13260.48 ; s=2
b =   234493  # /100=   2344.93 ; s=2
c = 34756334  # /100= 347563.34 ; s=2
# All three numbers are in the same scale, so they can be added directly.  Scale of the result is the same as the numbers (s=2)
d = a + b + c  # /100; s=2
# In multiplication, scale of the result is the sum of the scale of the factors. 
# This has the advantage that the scale of operands can be different.
e = a * b  # /10000; s=4
# But we want to go back to 2 decimals quickly.  So, round to 2 decimals.  And yes, division subtracts scales.
e = ( e + 50 ) // 100  # /100 s=2
</snippet></ROW><ROW><id>18247191</id><snippet>a_m= 326
a_s= -1   # a= a_m / 10**a_s = 326 / 10**-1 = 3260
b_m= 75
b_s= 6    # b= b_m / 10**b_s = 75 / 10**6 = 0.000075
c_m= a_m * b_m  # =24450
c_s= a_s + b_s  # = -1 + 6 = 5  ;  c= c_m / 10**c_s = 24450 / 10**5 = 0.24450
# Round to 2 decimals
r= 2
d_m= ( c_m + 10**(c_s-r)//2 ) // 10**(c_s-r)
# d_m = ( 24450 + 10**(5-2)//2 ) // 10**(5-2) = ( 24450 + 500 ) // 1000 = 24
d_s= r  # = 2  ;  d= dm / 10**ds = 24 / 10**2 24 / 100 = 0.24
</snippet></ROW><ROW><id>18247191</id><snippet>c</snippet></ROW><ROW><id>18247191</id><snippet>print( ("%d.%0"+str(c_s)+"d") % ( c // 100 , c % 100 ) )  # Which is the same as...
print( ("%d.%02d") % ( c // 100 , c % 100 ) )  # The case c_s &lt; 0 requires a different expression
</snippet></ROW><ROW><id>18247191</id><snippet>print( "%.2f" % c / 100 )
</snippet></ROW><ROW><id>18247367</id><snippet>#Cookie name. this can be whatever you want
SESSION_COKIE_NAME='sessionid'  # use the sessionid in your views code
#the module to store sessions data
SESSION_ENGINE='django.contrib.sessions.backends.db'    
#age of cookie in seconds (default: 2 weeks)
SESSION_COOKIE_AGE= 24*60*60*7 # the number of seconds for only 7 for example
#whether a user's session cookie expires when the web browser is closed
SESSION_EXPIRE_AT_BROWSER_CLOSE=False
#whether the session cookie should be secure (https:// only)
SESSION_COOKIE_SECURE=False
</snippet></ROW><ROW><id>18247451</id><snippet>['%s:%s%s' % (h, m, ap) for ap in ('am', 'pm') for h in ([12] + range(1,12)) for m in ('00', '30')]
</snippet></ROW><ROW><id>18247490</id><snippet>manifest_data</snippet></ROW><ROW><id>18247490</id><snippet>def manifest_data (name):
    ....
    if project != None:
        revision = project.get('revision')
        if revision:
            res = pattern.match(revision)
            return res.group(1)
    default = root.find("./default")
    return default.attrib.get('revision')
</snippet></ROW><ROW><id>18247501</id><snippet>os.path.basename</snippet></ROW><ROW><id>18247501</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.basename('/home/build_targets/JavaFiles/Commonfeature/CM/src/com/ems/ClusterGroupTreePanel.java')
'ClusterGroupTreePanel.java'
</snippet></ROW><ROW><id>18247501</id><snippet>os.path</snippet></ROW><ROW><id>18247508</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18247508</id><snippet>/usr/lib/python2.7</snippet></ROW><ROW><id>18247508</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>18247747</id><snippet>Python26\site-packages\twisted\internet\base.py</snippet></ROW><ROW><id>18247747</id><snippet>class BaseConnector(styles.Ephemeral):
    .
    .
    .

    def connectionFailed(self, reason):
        self.cancelTimeout()
        if self.transport.doWrite == self.transport.doConnect:    # 1
            del self.transport.doRead                             # 2
            del self.transport.doWrite                            # 3
        self.transport = None
        self.state = "disconnected"
        self.factory.clientConnectionFailed(self, reason)
        if self.state == "disconnected":
            # factory hasn't called our connect() method
            self.factory.doStop()
            self.factoryStarted = 0
    .
    .
    .
</snippet></ROW><ROW><id>18247773</id><snippet>def toJSON(self):
    clone = copy.deepcopy(self)
    if getattr(clone.data, '_state', False):
        del clone.data._state
    return jsonpickle.encode(clone, unpicklable=False)
</snippet></ROW><ROW><id>18247794</id><snippet>{{=globals()['Point{0}'.format(407)]}}
</snippet></ROW><ROW><id>18247794</id><snippet>return dict(points=[point1, point2, ...])
</snippet></ROW><ROW><id>18247794</id><snippet>{{=points[0]}}
</snippet></ROW><ROW><id>18248014</id><snippet>binascii.a2b_hex</snippet></ROW><ROW><id>18248014</id><snippet>hexlify</snippet></ROW><ROW><id>18248014</id><snippet>&gt;&gt;&gt; out = 'oS\xf8\xf4\xe2\xc8\xda\xe3\x7f\xc75*\x83\xb1\x06\x8c\x85\xa4\xa7piE\xd6I'
&gt;&gt;&gt; import binascii
&gt;&gt;&gt; print binascii.hexlify(out)
6f53f8f4e2c8dae37fc7352a83b1068c85a4a7706945d649
</snippet></ROW><ROW><id>18248136</id><snippet>sys.excepthook</snippet></ROW><ROW><id>18248136</id><snippet>full_stack = False</snippet></ROW><ROW><id>18248273</id><snippet>a_value = sys.argv[1].decode('GB2312')
b_value = sys.argv[2].decode('GB2312')
</snippet></ROW><ROW><id>18248348</id><snippet>tw2.sqla</snippet></ROW><ROW><id>18248618</id><snippet>&gt;&gt;&gt; imatrix = lambda n: [[1 if j == i else 0 for j in range(n)] for i in range(n)]
&gt;&gt;&gt; imatrix(3)
[[1, 0, 0], [0, 1, 0], [0, 0, 1]]
</snippet></ROW><ROW><id>18248618</id><snippet>1 if j == i else 0</snippet></ROW><ROW><id>18248800</id><snippet>wchar_t progname[FILENAME_MAX + 1];
mbstowcs(progname, argv[0], strlen(argv[0]) + 1);
Py_SetProgramName(progname);
</snippet></ROW><ROW><id>18248871</id><snippet>7mbit/s</snippet></ROW><ROW><id>18248871</id><snippet>2.888 pages per second</snippet></ROW><ROW><id>18248871</id><snippet>354kB</snippet></ROW><ROW><id>18248907</id><snippet>lib</snippet></ROW><ROW><id>18248907</id><snippet>sys.path.insert(0,'./lib')</snippet></ROW><ROW><id>18248907</id><snippet>sys.path</snippet></ROW><ROW><id>18249252</id><snippet>OpenSession</snippet></ROW><ROW><id>18249252</id><snippet>Session.Close()</snippet></ROW><ROW><id>18249252</id><snippet>body</snippet></ROW><ROW><id>18249252</id><snippet>OpenSession</snippet></ROW><ROW><id>18249252</id><snippet>(?=.*OpenSession)
</snippet></ROW><ROW><id>18249252</id><snippet>OpenSession</snippet></ROW><ROW><id>18249252</id><snippet>.*</snippet></ROW><ROW><id>18249252</id><snippet>def</snippet></ROW><ROW><id>18249252</id><snippet>def</snippet></ROW><ROW><id>18249252</id><snippet>(?=(?:(?!def).)*OpenSession)
</snippet></ROW><ROW><id>18249252</id><snippet>OpenSession</snippet></ROW><ROW><id>18249252</id><snippet>Session.Close</snippet></ROW><ROW><id>18249252</id><snippet>def</snippet></ROW><ROW><id>18249252</id><snippet>Session.Close</snippet></ROW><ROW><id>18249252</id><snippet>(?=(?:(?!def).)*OpenSession)(?:(?!Session[.]Close).)*?
</snippet></ROW><ROW><id>18249252</id><snippet>def</snippet></ROW><ROW><id>18249252</id><snippet>(?=(?:(?!\r?\ndef).)*OpenSession)(?:(?!Session[.]Close|\r?\ndef).)*
</snippet></ROW><ROW><id>18249252</id><snippet>(?is)def\s+(?&lt;name&gt;\w+)\s*\((?&lt;parameter&gt;[^)]+)\)\s*:\s*(?:\r?\n)+(?&lt;body&gt;(?=(?:(?!\r?\ndef).)*OpenSession)(?:(?!Session[.]Close|\r?\ndef).)*)(?=\r?\ndef|$)
</snippet></ROW><ROW><id>18249252</id><snippet>?</snippet></ROW><ROW><id>18249252</id><snippet>\ndef</snippet></ROW><ROW><id>18249252</id><snippet>\b</snippet></ROW><ROW><id>18249252</id><snippet>OpenSession</snippet></ROW><ROW><id>18249252</id><snippet>Session.Close</snippet></ROW><ROW><id>18249252</id><snippet>def</snippet></ROW><ROW><id>18249252</id><snippet>getOpenSession()</snippet></ROW><ROW><id>18249252</id><snippet>Session.Closed</snippet></ROW><ROW><id>18249252</id><snippet>define</snippet></ROW><ROW><id>18249385</id><snippet>/tmp</snippet></ROW><ROW><id>18249385</id><snippet>tempfile</snippet></ROW><ROW><id>18249523</id><snippet>reload</snippet></ROW><ROW><id>18249523</id><snippet>imp</snippet></ROW><ROW><id>18249523</id><snippet>In [18]: from imp import reload

In [19]: reload?
Type:       function
String Form:&lt;function reload at 0xb720a8e4&gt;
File:       /usr/lib/python3.3/imp.py
Definition: reload(module)
Docstring:
Reload the module and return it.

The module must have been successfully imported before.
</snippet></ROW><ROW><id>18249552</id><snippet>yticks</snippet></ROW><ROW><id>18249552</id><snippet>yticklabels</snippet></ROW><ROW><id>18249552</id><snippet>from numpy import *
import matplotlib.pyplot as plt

fig = plt.figure()

ax = fig.add_subplot(111)
x=random.uniform(0,5,size=5)

#plot
ax.barh(arange(len(x)),x,1)

#set ticks
T=arange(len(x))+0.5
ax.set_yticks(T)

#set labels
labels=['a','b','c','d','e']
ax.set_yticklabels(labels)

plt.show()
</snippet></ROW><ROW><id>18249940</id><snippet>shuffledSnapList = snapRoList[:]
random.shuffle(shuffledSnapList)

while shuffledSnapList:
    roSnapshot = shuffledSnapList.pop()
</snippet></ROW><ROW><id>18249940</id><snippet>while</snippet></ROW><ROW><id>18250373</id><snippet>Document</snippet></ROW><ROW><id>18250373</id><snippet>Revision</snippet></ROW><ROW><id>18250373</id><snippet>values()</snippet></ROW><ROW><id>18250373</id><snippet>Revision</snippet></ROW><ROW><id>18250373</id><snippet>Document</snippet></ROW><ROW><id>18250373</id><snippet>date</snippet></ROW><ROW><id>18250373</id><snippet>Revision.objects.all().values('document').aggregate(Max('date'))
</snippet></ROW><ROW><id>18250457</id><snippet>df_new[df_new['l_ext'].isin([31, 22, 30, 25, 64])]
</snippet></ROW><ROW><id>18250549</id><snippet>.upper()</snippet></ROW><ROW><id>18250549</id><snippet>out = {}
for key, value in original.iteritems():
    out[key[0].upper()] = out.get(key[0].upper(), 0) + value
</snippet></ROW><ROW><id>18250549</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>18250549</id><snippet>from collections import defaultdict:

out = defaultdict(int)
for key, value in original.iteritems():
    out[key[0].upper()] += value
</snippet></ROW><ROW><id>18250549</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>18250549</id><snippet>from itertools import groupby

key = lambda i: i[0][0].upper()
out = {key: sum(v for k, v in group) for key, group in groupby(sorted(original.items(), key=key), key=key)}
</snippet></ROW><ROW><id>18250652</id><snippet>re.compile(ur'&lt;unicode string&gt;')</snippet></ROW><ROW><id>18250652</id><snippet>re.UNICODE</snippet></ROW><ROW><id>18250652</id><snippet># -*- coding: utf-8 -*-
from __future__ import unicode_literals
import re


def strip_hash_tags(content):
    """tags should not be more than 15 characters"""
    hash_tags = re.compile(ur'(?i)(?&lt;=\#)\w+',re.UNICODE)
    return [i for i in hash_tags.findall(content) if len(i) &lt; 15]

str = u"am trying to work on a function to extract hashtags from paragraphs, basically words that starts with # (#cool #life #cars #سيارات)"

print(strip_hash_tags(str))

# [u'cool', u'life', u'cars', u'\xd8\xb3\xd9']
</snippet></ROW><ROW><id>18250726</id><snippet>1/2</snippet></ROW><ROW><id>18250726</id><snippet>&gt;&gt;&gt; 1/2
0
</snippet></ROW><ROW><id>18250726</id><snippet>from __future__ import division</snippet></ROW><ROW><id>18250726</id><snippet>/</snippet></ROW><ROW><id>18250726</id><snippet>&gt;&gt;&gt; 1/2.0
0.5
&gt;&gt;&gt; 4**(1/2.0)
2.0
&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 1/2
0.5
&gt;&gt;&gt; 4**(1/2)
2.0
</snippet></ROW><ROW><id>18251446</id><snippet>as_strided</snippet></ROW><ROW><id>18251446</id><snippet>import numpy as np
from numpy.lib.stride_tricks import as_strided

def windowed_view(arr, window, overlap):
    arr = np.asarray(arr)
    window_step = window - overlap
    new_shape = arr.shape[:-1] + ((arr.shape[-1] - overlap) // window_step,
                                  window)
    new_strides = (arr.strides[:-1] + (window_step * arr.strides[-1],) +
                   arr.strides[-1:])
    return as_strided(arr, shape=new_shape, strides=new_strides)
</snippet></ROW><ROW><id>18251446</id><snippet>(number_of_windows, window_size)</snippet></ROW><ROW><id>18251446</id><snippet>win_avg = np.mean(windowed_view(arr, win_size, win_overlap), axis=-1)
</snippet></ROW><ROW><id>18251446</id><snippet>&gt;&gt;&gt; a = np.arange(16)
&gt;&gt;&gt; windowed_view(a, 4, 2)
array([[ 0,  1,  2,  3],
       [ 2,  3,  4,  5],
       [ 4,  5,  6,  7],
       [ 6,  7,  8,  9],
       [ 8,  9, 10, 11],
       [10, 11, 12, 13],
       [12, 13, 14, 15]])
&gt;&gt;&gt; windowed_view(a, 4, 1)
array([[ 0,  1,  2,  3],
       [ 3,  4,  5,  6],
       [ 6,  7,  8,  9],
       [ 9, 10, 11, 12],
       [12, 13, 14, 15]])
</snippet></ROW><ROW><id>18251508</id><snippet>&gt;&gt;&gt; 'Gen\xc3\xa8ve'.decode('latin1')
u'Gen\xc3\xa8ve'
&gt;&gt;&gt; print 'Gen\xc3\xa8ve'.decode('latin1')
GenÃ¨ve
&gt;&gt;&gt; 'Gen\xc3\xa8ve'.decode('utf8')
u'Gen\xe8ve'
&gt;&gt;&gt; print 'Gen\xc3\xa8ve'.decode('utf8')
Genève
</snippet></ROW><ROW><id>18251508</id><snippet>è</snippet></ROW><ROW><id>18251508</id><snippet>U+00E8</snippet></ROW><ROW><id>18251508</id><snippet>\u00e8</snippet></ROW><ROW><id>18251508</id><snippet>\xe8</snippet></ROW><ROW><id>18251508</id><snippet>Ã</snippet></ROW><ROW><id>18251508</id><snippet>¨</snippet></ROW><ROW><id>18251737</id><snippet>print '\n'.join([''.join(inner) for inner in mlist])
</snippet></ROW><ROW><id>18251737</id><snippet>&gt;&gt;&gt; mlist = [['#', '#', '#', '#', '#'], ['#', '0', ' ', ' ', '#'], ['#', '#', '#', ' ', '#']]
&gt;&gt;&gt; print '\n'.join([''.join(inner) for inner in mlist])
#####
#0  #
### #
</snippet></ROW><ROW><id>18251737</id><snippet>for</snippet></ROW><ROW><id>18251737</id><snippet>for inner in mlist:
    print ''.join(inner)
</snippet></ROW><ROW><id>18251801</id><snippet># Split array based on where the 'nan' values are
dataSets = filter(lambda x: len(x) &gt; 0, np.array_split(alldata,np.where(np.isnan(alldata[:,1]))[0]))

# Delete the rows with 'nan' in it.
dataSets = [np.delete(dataSet, np.where(np.isnan(dataSet)), axis=0) for dataSet in dataSets]

startYear = 1966
endYear = 1981
startMonth = 1
endMonth = 12
blank_rainfall_value = np.nan

# Insert rows of the form ['nan', year, month, 0] for all relevant years/months except where there is already a row containing that year/month
extendedDataSets = []
for dataSet in dataSets:
    missingMonths = [[dataSet[0][0], year, month, blank_rainfall_value] for year in range(startYear, endYear+1) for month in range(startMonth, endMonth+1) if [year, month] not in dataSet[:,1:3].tolist()]
    if len(missingMonths) &gt; 0:
        extendedDataSets.append(np.vstack((dataSet, missingMonths)))

# Sort arrray by year, then month
finalDataSets = [np.array(sorted(dataSet, key=lambda row:row[1]+row[2]/12.0)) for dataSet in extendedDataSets]

for dataSet in finalDataSets:
    print dataSet
    print
</snippet></ROW><ROW><id>18252393</id><snippet>screen</snippet></ROW><ROW><id>18252563</id><snippet>            imgPath = os.path.join(self.imgFolder, img)
            actualImage = QtGui.QImage(imgPath)
            pixmap = QtGui.QPixmap(imgPath)
            pixmap = pixmap.scaled(500, 500, QtCore.Qt.KeepAspectRatio) 
            lbl = QtGui.QLabel(self)
            lbl.setPixmap(pixmap)

            lbl.setScaledContents(True)
</snippet></ROW><ROW><id>18252819</id><snippet>u'..'</snippet></ROW><ROW><id>18252872</id><snippet>stderr</snippet></ROW><ROW><id>18252872</id><snippet>SyntaxError</snippet></ROW><ROW><id>18252872</id><snippet>--debug</snippet></ROW><ROW><id>18252872</id><snippet>SyntaxError</snippet></ROW><ROW><id>18253009</id><snippet>angle</snippet></ROW><ROW><id>18253009</id><snippet>angle=40
</snippet></ROW><ROW><id>18253009</id><snippet>angle(Cp[k]*conj(Cp[k-1]))
</snippet></ROW><ROW><id>18253009</id><snippet>numpy.angle()</snippet></ROW><ROW><id>18253391</id><snippet>requests</snippet></ROW><ROW><id>18253391</id><snippet>.json</snippet></ROW><ROW><id>18253391</id><snippet>pyelastic</snippet></ROW><ROW><id>18253391</id><snippet>requests</snippet></ROW><ROW><id>18253656</id><snippet>class camisaEvento(models.Model):

    ...

    @property
    def sum_quantity(self):
        # just guessing, don't know exactly what you need
        # it's using python's list comprehension, but you can use a more explicit
        # syntax if you're not familiar with this one
        return sum([obj.field_to_sum for obj in               
                    quantidadeEvento.objects.filter(fk_field=self.id)])
</snippet></ROW><ROW><id>18253656</id><snippet>{% for camisa_do_evento in camisasEvento %}
    {{ camisa_do_evento.sum_quantity }}
{% endfor %}
</snippet></ROW><ROW><id>18253656</id><snippet>camisaEvento</snippet></ROW><ROW><id>18253656</id><snippet>quantidadeEvento</snippet></ROW><ROW><id>18253696</id><snippet>vector&lt;double&gt; features;//store the feature
bool readVocabulary(const string&amp; filename, Mat&amp; vocabulary) {
    FileStorage fs(filename, FileStorage::READ);
    if (fs.isOpened()) {
        fs["vocabulary"] &gt;&gt; vocabulary;
        return true;
    }
    return false;
}
//imgpath is the image filepath, vocpath is the voc path
void getImgBow(char* imgpath, char* vocpath) {
    cv::initModule_nonfree();
    Ptr&lt;FeatureDetector&gt; featureDetector = FeatureDetector::create("SURF");
    Ptr&lt;DescriptorExtractor&gt; descExtractor =
            DescriptorExtractor::create("SURF");
    Ptr&lt;DescriptorMatcher&gt; descMatcher =
            DescriptorMatcher::create("FlannBased");
    Ptr&lt;BOWImgDescriptorExtractor&gt; bowExtractor;
    if (featureDetector.empty() || descExtractor.empty() || descMatcher.empty()) {
        cout &lt;&lt; "featureDetector or descExtractor was not created" &lt;&lt; endl;
    }
    bowExtractor = new BOWImgDescriptorExtractor(descExtractor, descMatcher);
    Mat vocabulary;
    readVocabulary(vocpath, vocabulary);
    bowExtractor-&gt;setVocabulary(vocabulary);
    Mat img = imread(imgpath);
    if (img.rows &lt; img.cols)
        cv::resize(img, img, Size(320, 240));
    else
        cv::resize(img, img, Size(240, 320));
    vector&lt;KeyPoint&gt; keypoints;
    Mat descriptors;
    featureDetector-&gt;detect(img, keypoints);
    bowExtractor-&gt;compute(img, keypoints, descriptors);
    for (int j = 0; j &lt; descriptors.cols; j++) {
        float value = descriptors.at&lt;float&gt; (0, j);
        features.push_back(value);
    }
}
</snippet></ROW><ROW><id>18253696</id><snippet>PyObject* wrap_contentfilter(PyObject* self, PyObject* args) {
//parse the python parameters.
if (!PyArg_ParseTuple(args, "sssOO", &amp;imgpath, &amp;vocpath, &amp;modelpath,
            &amp;candidate_list, &amp;can_pro_lsit))
//you may use PyInt_AsSsize_t and so on to do type change.
//invoke getImgBow function.
//construct PyObject and return to python, use PyList_SetItem function,PyObject*
}

static PyMethodDef predictMethods[] = { { "content_filter", wrap_contentfilter,
        METH_VARARGS, "get image's bow, predict" }, { NULL, NULL } };
extern "C" 
void initcontentfilter() {
    PyObject* m;
    m = Py_InitModule("contentfilter", predictMethods);
} 
</snippet></ROW><ROW><id>18253696</id><snippet>import contentfilter
 contentfilter.content_filter(parameters)
</snippet></ROW><ROW><id>18253696</id><snippet>g++ -fPIC  content_filter.cpp -o contentfilter.so  -shared -I/usr/local/include -I/usr/include/python2.7 -I/usr/lib/python2.7/config -L/usr/local/lib  -lopencv_highgui -lopencv_nonfree -lopencv_legacy -lopencv_ml -lopencv_features2d -lopencv_imgproc -lopencv_core
</snippet></ROW><ROW><id>18253732</id><snippet>&gt;&gt;&gt; numpy.genfromtxt('myfile.dat',dtype=['i4','f8','f8','a14'])

array((1, 2.5264, 24106644528.0, 'astring'), 
  dtype=[('f0', '&lt;i4'), ('f1', '&lt;f8'), ('f2', '&lt;f8'), ('f3', 'S14')])
</snippet></ROW><ROW><id>18253775</id><snippet>static</snippet></ROW><ROW><id>18253775</id><snippet>app.add_url_rule('/css/&lt;path:filename&gt;', endpoint='css',
                 view_func=app.send_static_file)
</snippet></ROW><ROW><id>18253849</id><snippet>regex = re.compile("^[a-zA-Z][a-zA-Z0-9\.\-]{0,28}[a-zA-Z0-9]$")
</snippet></ROW><ROW><id>18254055</id><snippet>for</snippet></ROW><ROW><id>18254055</id><snippet>iter()</snippet></ROW><ROW><id>18254055</id><snippet>list</snippet></ROW><ROW><id>18254055</id><snippet>for</snippet></ROW><ROW><id>18254055</id><snippet>next()</snippet></ROW><ROW><id>18254055</id><snippet>i</snippet></ROW><ROW><id>18254055</id><snippet>i</snippet></ROW><ROW><id>18254055</id><snippet>i = [1, 2, 3, 4, 5]
for a in i:
   if a == 1:
       del i[0]
   print a
</snippet></ROW><ROW><id>18254055</id><snippet>1
3
4
5
</snippet></ROW><ROW><id>18254055</id><snippet>i[1]</snippet></ROW><ROW><id>18254055</id><snippet>3</snippet></ROW><ROW><id>18254055</id><snippet>2</snippet></ROW><ROW><id>18254055</id><snippet>&gt;&gt;&gt; i = [1, 2, 3, 4, 5]
&gt;&gt;&gt; i_iter = iter(i)  # index starts at 0
&gt;&gt;&gt; next(i_iter)      # now the index is 1
1
&gt;&gt;&gt; del i[0]
&gt;&gt;&gt; i
[2, 3, 4, 5]          # item at index 1 is 3
&gt;&gt;&gt; next(i_iter)      # returns 3, next index is 2
3
&gt;&gt;&gt; i.insert(0, 1)
&gt;&gt;&gt; i
[1, 2, 3, 4, 5]       # item at index 2 is 3
&gt;&gt;&gt; next(i_iter)      # returns 3, next index is 3
3
</snippet></ROW><ROW><id>18254355</id><snippet>cmin</snippet></ROW><ROW><id>18254355</id><snippet>normed=True</snippet></ROW><ROW><id>18254355</id><snippet>cmin</snippet></ROW><ROW><id>18254355</id><snippet>a = np.random.randn(1000)
b = np.random.randn(1000)

a_ma = np.ma.masked_where(a &gt; 0, a)
b_ma = np.ma.masked_where(b &lt; 0, b)

bins = np.arange(-3,3.25,0.25)

fig, ax = plt.subplots(1,3, figsize=(10,3), subplot_kw={'aspect': 1})

hist, xbins, ybins, im = ax[0].hist2d(a_ma,b_ma, bins=bins, normed=True)

hist, xbins, ybins = np.histogram2d(a_ma,b_ma, bins=bins, normed=True)
extent = [xbins.min(),xbins.max(),ybins.min(),ybins.max()]

im = ax[1].imshow(hist.T, interpolation='none', origin='lower', extent=extent)
im = ax[2].imshow(np.ma.masked_where(hist == 0, hist).T, interpolation='none', origin='lower', extent=extent)

ax[0].set_title('mpl')
ax[1].set_title('numpy')
ax[2].set_title('numpy masked')
</snippet></ROW><ROW><id>18254440</id><snippet>class SecretString:
  '''A not-at-all secure way to store a secret string.'''

    def __init__(self, plain_string, pass_phrase):
       self.__plain_string = plain_string
       self.__pass_phrase = pass_phrase

def decrypt(self, pass_phrase):
    '''Only show the string if the pass_phrase is correct.'''
      if pass_phrase == self.__pass_phrase:
     return self.__plain_string
     else:
      return ''
</snippet></ROW><ROW><id>18254440</id><snippet>&gt;&gt;&gt; secret_string = SecretString("ACME: Top Secret", "antwerp")
&gt;&gt;&gt; print(secret_string.decrypt("antwerp"))
ACME: Top Secret
&gt;&gt;&gt; print(secret_string.__plain_text)
Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError:
</snippet></ROW><ROW><id>18254440</id><snippet>&gt;&gt;&gt; print(secret_string._SecretString__plain_string)
ACME: Top Secret
</snippet></ROW><ROW><id>18254494</id><snippet>b = diff[a]</snippet></ROW><ROW><id>18254494</id><snippet>quantized=zeros(data_length,dtype='complex')
for jj in arange(0,data_length):
    diff=np.absolute((phase_recovered[jj]-u_alphabets))
    b = diff.argmin()
    quantized[jj] = u_alphabets[b]
</snippet></ROW><ROW><id>18254622</id><snippet>tinc = 0
#...
rates = {}
rates['T1'] = 0.18 * tinc
rates['T2'] = 29808 + (.25 * (tinc - 165600))
rates['T3'] = 53096 + (.30 * (tinc - 258750))
rates['T4'] = 82904 + (.35 * (tinc - 358110))
rates['T5'] = 132894 + (.38 * (tinc - 500940))
rates['T6'] = 185205 + (.40 * (tinc - 638600))
</snippet></ROW><ROW><id>18254622</id><snippet>tinc</snippet></ROW><ROW><id>18254622</id><snippet>rates</snippet></ROW><ROW><id>18254622</id><snippet>ask_monthly</snippet></ROW><ROW><id>18254622</id><snippet>ask_annual</snippet></ROW><ROW><id>18254622</id><snippet>def setup_rates(tinc):
    rates = {}
    rates['T1'] = 0.18 * tinc
    rates['T2'] = 29808 + (.25 * (tinc - 165600))
    rates['T3'] = 53096 + (.30 * (tinc - 258750))
    rates['T4'] = 82904 + (.35 * (tinc - 358110))
    rates['T5'] = 132894 + (.38 * (tinc - 500940))
    rates['T6'] = 185205 + (.40 * (tinc - 638600))
    return rates
</snippet></ROW><ROW><id>18254622</id><snippet>tax_calc</snippet></ROW><ROW><id>18254622</id><snippet>def tax_calc(rates):
    #... as you were
</snippet></ROW><ROW><id>18254622</id><snippet>asking()
ask_age()
rates = setup_rates(tinc)
tax_calc(rates)
</snippet></ROW><ROW><id>18254752</id><snippet>ar = np.zeros((512,256),dtype=np.uint16)

# there should be something here to fill ar    

xs = np.arange(ar.shape[0])
ys = np.arange(ar.shape[1])

check = (0 &lt; ar) &amp; (ar &lt; 1000)
ind = np.where( check )
xlist = xs[ ind[0] ]
ylist = ys[ ind[1] ] 
zlist = ar[ check ]
</snippet></ROW><ROW><id>18254924</id><snippet>+=</snippet></ROW><ROW><id>18254924</id><snippet>def nested_sum(L):
    total = 0
    for x in L:
        total += nested_sum(x) if isinstance(x, list) else x
    return total
</snippet></ROW><ROW><id>18254924</id><snippet>if</snippet></ROW><ROW><id>18254924</id><snippet>def nested_sum(L):
    total = 0
    for x in L:
        if isinstance(x, list):
            total += nested_sum(x)
        else:
            total += x
    return total
</snippet></ROW><ROW><id>18255073</id><snippet>def filtercalls(call_stack, modul, clas, func, full):
    mod_ignore = ['shutil','scipy.optimize','re','os','sys','json']
    func_ignore = ['CustomFunctionName','pdbcall']
    clas_ignore = ['pdb']
    return modul not in mod_ignore and func not in func_ignore and clas not in clas_ignore
</snippet></ROW><ROW><id>18255073</id><snippet>pycallgraph.start_trace(filter_func=filtercalls)
</snippet></ROW><ROW><id>18255191</id><snippet>collections.Counter()</snippet></ROW><ROW><id>18255191</id><snippet>from collections import Counter

counts = Counter(tup[index_of_path] for tup in some_list)

some_list = [tup for tup in some_list if counts[tup[index_of_path]] == 1]
</snippet></ROW><ROW><id>18255347</id><snippet>ranger.profile</snippet></ROW><ROW><id>18255347</id><snippet>project.apps.ranger.profile</snippet></ROW><ROW><id>18255376</id><snippet>let wagnerFischerTable (a: string) (b: string) =
  let d = ResizeArray([ResizeArray([0])])
  for i = 1 to a.Length do d.Add(ResizeArray([i]))
  for j = 1 to b.Length do d.[0].Add(j)
  for j = 1 to b.Length do
    for i = 1 to a.Length do
      let s, t = b.[j-1], a.[i-1]
      if s = t then
        d.[i].Add(d.[i-1].[j-1])
      else
        d.[i].Add(
          Seq.min [
            d.[i-1].[j] + 1
            d.[i].[j-1] + 1
            d.[i-1].[j-1] + 1
          ])
  d

let simEtAlTables (s: string) (p: string) =
  let d = ResizeArray()
  for i = 0 to s.Length - 1 do
    d.Add(wagnerFischerTable p s.[i..])
  d

let approx (s: string) (p: string) =
  let d = simEtAlTables s p
  let t = ResizeArray([0])
  for i = 1 to s.Length do
    let mutable cmin = 9000
    for h = 0 to i - 1 do
      let dh = d.[h]
      cmin &lt;- min cmin (max t.[h] dh.[dh.Count-1].[i-h])
    t.Add(cmin)
  t.[s.Length]
</snippet></ROW><ROW><id>18255569</id><snippet> ``a''   Open for writing.  The file is created if it does not exist.  The
         stream is positioned at the end of the file.  Subsequent writes
         to the file will always end up at the then current end of file,
         irrespective of any intervening fseek(3) or similar.

 ``a+''  Open for reading and writing.  The file is created if it does not
         exist.  The stream is positioned at the end of the file.  Subse-
         quent writes to the file will always end up at the then current
         end of file, irrespective of any intervening fseek(3) or similar.
</snippet></ROW><ROW><id>18255626</id><snippet>while count &lt;= n and count2 &lt;= n:
</snippet></ROW><ROW><id>18255635</id><snippet>*</snippet></ROW><ROW><id>18255635</id><snippet>&gt;&gt;&gt; a
array([[0],
       [1],
       [2]])
&gt;&gt;&gt; b
array([0, 1, 2])
&gt;&gt;&gt; a*b
array([[0, 0, 0],
       [0, 1, 2],
       [0, 2, 4]])
</snippet></ROW><ROW><id>18255635</id><snippet>&gt;&gt;&gt; a = np.ones((3,2))
&gt;&gt;&gt; b = np.ones((2,4))
&gt;&gt;&gt; np.dot(a,b)
array([[ 2.,  2.,  2.,  2.],
       [ 2.,  2.,  2.,  2.],
       [ 2.,  2.,  2.,  2.]])
</snippet></ROW><ROW><id>18255635</id><snippet>&gt;&gt;&gt; a=np.matrix(np.ones((3,2)))
&gt;&gt;&gt; b=np.matrix(np.ones((2,4)))
&gt;&gt;&gt; a*b
matrix([[ 2.,  2.,  2.,  2.],
        [ 2.,  2.,  2.,  2.],
        [ 2.,  2.,  2.,  2.]])
</snippet></ROW><ROW><id>18255650</id><snippet>&gt;&gt;&gt; s = 'one'
&gt;&gt;&gt; filter(str.isalnum, s.title())
'One'
&gt;&gt;&gt;
&gt;&gt;&gt; s = 'hello_world'
&gt;&gt;&gt; filter(str.isalnum, s.title())
'HelloWorld'
&gt;&gt;&gt; 
&gt;&gt;&gt; s = 'foo_bar_baz'
&gt;&gt;&gt; filter(str.isalnum, s.title())
'FooBarBaz'
</snippet></ROW><ROW><id>18255650</id><snippet>str.title()</snippet></ROW><ROW><id>18255650</id><snippet>str.isalnum()</snippet></ROW><ROW><id>18255650</id><snippet>filter()</snippet></ROW><ROW><id>18255733</id><snippet>^(?![ ])[0-9pqw+*# ().-]*(?&lt;![ ])$
</snippet></ROW><ROW><id>18255733</id><snippet>-</snippet></ROW><ROW><id>18256110</id><snippet>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# First we read the DataFrame and resample it to get a mean on every hour
df = pd.read_csv('trayport.csv', header=None,
                 parse_dates=[0], index_col=0).resample('H', how='mean').dropna()
# Then we add a week field so we can filter it by the week
df['week']= df.index.map(lambda x: x.isocalendar()[1])

# Create week labels
weekdays = 'Mon Tue Wed Thu Fri Sat Sun'.split()

# Create the figure
fig, ax = plt.subplots()

# For every week we want to plot
for week in range(1, 4):
    # Select out the week
    dfw = df[df['week'] == week].copy()
    # Here we align all the weeks to span over the same time period so they
    # can be shown on the graph one over the other, and not one next to
    # the other.
    dfw['timestamp'] = dfw.index.values - (week * np.timedelta64(1, 'W'))
    dfw = dfw.set_index(['timestamp'])
    # Then we plot our data
    ax.plot(dfw.index, dfw[1], label='week %s' % week)
    # Now to set the x labels. First we resample the timestamp to have
    # a date frequency, and set it to be the xtick values
    resampled = dfw.resample('D')
    ax.set_xticks(resampled.index.values)
    # But change the xtick labels to be the weekdays.
    ax.set_xticklabels(weekdays)
# Plot the legend
plt.legend()
</snippet></ROW><ROW><id>18256124</id><snippet>Source_Panel</snippet></ROW><ROW><id>18256124</id><snippet>MyFrame</snippet></ROW><ROW><id>18256124</id><snippet>Frame</snippet></ROW><ROW><id>18256124</id><snippet>MyFrame</snippet></ROW><ROW><id>18256124</id><snippet>wx.Frame</snippet></ROW><ROW><id>18256124</id><snippet>Parent</snippet></ROW><ROW><id>18256124</id><snippet>Source_Panel</snippet></ROW><ROW><id>18256124</id><snippet>MyFrame</snippet></ROW><ROW><id>18256124</id><snippet>self.Parent.m_datapanel.m_dirPicker1.GetTextCtrlValue()
</snippet></ROW><ROW><id>18256135</id><snippet>def weekend(day):
    if day == 'Saturday' or day == 'Sunday':
        return True
    else:
        return False
</snippet></ROW><ROW><id>18256135</id><snippet>def weekend(day):
    return day == 'Saturday' or day == 'Sunday'
</snippet></ROW><ROW><id>18256135</id><snippet>def weekend(day):
    return day in ('Saturday', 'Sunday')
</snippet></ROW><ROW><id>18256135</id><snippet>True</snippet></ROW><ROW><id>18256135</id><snippet>False</snippet></ROW><ROW><id>18256135</id><snippet>False</snippet></ROW><ROW><id>18256135</id><snippet>""</snippet></ROW><ROW><id>18256135</id><snippet>[]</snippet></ROW><ROW><id>18256135</id><snippet>None</snippet></ROW><ROW><id>18256135</id><snippet>{}</snippet></ROW><ROW><id>18256135</id><snippet>0</snippet></ROW><ROW><id>18256135</id><snippet>()</snippet></ROW><ROW><id>18256353</id><snippet>dtype=[('name', object), ('val1', int), ...]</snippet></ROW><ROW><id>18256353</id><snippet>genfromtxt</snippet></ROW><ROW><id>18256353</id><snippet>object</snippet></ROW><ROW><id>18256353</id><snippet>pandas.read_table</snippet></ROW><ROW><id>18256354</id><snippet>NGINX</snippet></ROW><ROW><id>18256354</id><snippet>uWSGI</snippet></ROW><ROW><id>18256354</id><snippet>POST</snippet></ROW><ROW><id>18256354</id><snippet>uWSGI</snippet></ROW><ROW><id>18256354</id><snippet>python task queues</snippet></ROW><ROW><id>18256476</id><snippet>f = open('example.txt', 'r')
</snippet></ROW><ROW><id>18256476</id><snippet>file_contents = f.read()
</snippet></ROW><ROW><id>18256476</id><snippet>print (file_contents)
</snippet></ROW><ROW><id>18256476</id><snippet>f.close()
</snippet></ROW><ROW><id>18256511</id><snippet>    else:
        self.network_operator = None
</snippet></ROW><ROW><id>18256511</id><snippet>self</snippet></ROW><ROW><id>18256511</id><snippet>try</snippet></ROW><ROW><id>18256511</id><snippet>finally</snippet></ROW><ROW><id>18256511</id><snippet>chopped_octet_list.append(single_interface_string)
</snippet></ROW><ROW><id>18256546</id><snippet>np.vstack(np.meshgrid(x_p,y_p,z_p)).reshape(3,-1).T
</snippet></ROW><ROW><id>18256546</id><snippet>def ndmesh(*xi,**kwargs):
    if len(xi) &lt; 2:
        msg = 'meshgrid() takes 2 or more arguments (%d given)' % int(len(xi) &gt; 0)
        raise ValueError(msg)

    args = np.atleast_1d(*xi)
    ndim = len(args)
    copy_ = kwargs.get('copy', True)

    s0 = (1,) * ndim
    output = [x.reshape(s0[:i] + (-1,) + s0[i + 1::]) for i, x in enumerate(args)]

    shape = [x.size for x in output]

    # Return the full N-D matrix (not only the 1-D vector)
    if copy_:
        mult_fact = np.ones(shape, dtype=int)
        return [x * mult_fact for x in output]
    else:
        return np.broadcast_arrays(*output)
</snippet></ROW><ROW><id>18256546</id><snippet>print np.vstack((ndmesh(x_p,y_p,z_p))).reshape(3,-1).T

[[ 1.  2.  8.]
 [ 1.  2.  9.]
 [ 1.  3.  8.]
 ....
 [ 5.  3.  9.]
 [ 5.  4.  8.]
 [ 5.  4.  9.]]
</snippet></ROW><ROW><id>18256546</id><snippet>%timeit sol2()
10000 loops, best of 3: 56.1 us per loop

%timeit np.vstack((ndmesh(x_p,y_p,z_p))).reshape(3,-1).T
10000 loops, best of 3: 55.1 us per loop
</snippet></ROW><ROW><id>18256546</id><snippet>%timeit sol2()
1 loops, best of 3: 655 ms per loop
In [10]:

%timeit points = np.vstack((ndmesh(x_p,y_p,z_p))).reshape(3,-1).T
10 loops, best of 3: 21.8 ms per loop
</snippet></ROW><ROW><id>18256546</id><snippet>%timeit np.vstack((ndmesh(x_p,y_p,z_p,copy=False))).reshape(3,-1).T
100 loops, best of 3: 8.16 ms per loop
</snippet></ROW><ROW><id>18256570</id><snippet>example.com/people?name=tom</snippet></ROW><ROW><id>18256746</id><snippet>QCloseEvent</snippet></ROW><ROW><id>18256746</id><snippet>class MyDialog(QtGui.QDialog):
    # ...
    def __init__(self, parent=None):
        super(MyDialog, self).__init__(parent)

        # when you want to destroy the dialog set this to True
        self._want_to_close = False

    def closeEvent(self, evnt):
        if self._want_to_close:
            super(MyDialog, self).closeEvent(evnt)
        else:
            evnt.ignore()
            self.setWindowState(QtCore.Qt.WindowMinimized)
</snippet></ROW><ROW><id>18256756</id><snippet>&gt;&gt;&gt; "I like Python!!!".split()
['I', 'like', 'Python!!!']
&gt;&gt;&gt; list("I like Python!!!")
['I', ' ', 'l', 'i', 'k', 'e', ' ', 'P', 'y', 't', 'h', 'o', 'n', '!', '!', '!']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18256756</id><snippet>&gt;&gt;&gt; [c for c in "I like Python!!!" if c != " "]
['I', 'l', 'i', 'k', 'e', 'P', 'y', 't', 'h', 'o', 'n', '!', '!', '!']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18257028</id><snippet>&gt;&gt;&gt; tz = pytz.timezone('Asia/Tehran')
&gt;&gt;&gt; tz
&lt;DstTzInfo 'Asia/Tehran' LMT+3:26:00 STD&gt;
</snippet></ROW><ROW><id>18257028</id><snippet>&gt;&gt;&gt; d = tz.localize(datetime(2013, 1, 1))
&gt;&gt;&gt; d
datetime.datetime(2013, 1, 1, 0, 0, tzinfo=&lt;DstTzInfo 'Asia/Tehran' IRST+3:30:00 STD&gt;)
&gt;&gt;&gt; d.utcoffset()
datetime.timedelta(0, 12600)
</snippet></ROW><ROW><id>18257028</id><snippet>localize</snippet></ROW><ROW><id>18257028</id><snippet>utcoffset</snippet></ROW><ROW><id>18257028</id><snippet>&gt;&gt;&gt; d = datetime.now(tz)
&gt;&gt;&gt; d
datetime.datetime(2013, 8, 15, 20, 46, 4, 705896, tzinfo=&lt;DstTzInfo 'Asia/Tehran' IRDT+4:30:00 DST&gt;)
&gt;&gt;&gt; d.utcoffset()
datetime.timedelta(0, 16200)
</snippet></ROW><ROW><id>18257164</id><snippet>"</snippet></ROW><ROW><id>18257187</id><snippet>import re
blockOfText = 'two thousand may be represented as 2000 2000.00 2,000 and 2k'
' '.join([ ''.join(x[0]) for x in re.findall(r'(\$?\d+([,\.]\d+)?k?)', blockOfText) ])
</snippet></ROW><ROW><id>18257187</id><snippet>blockOfText</snippet></ROW><ROW><id>18257365</id><snippet>i, j = [2, 1]
return room[i][j]
</snippet></ROW><ROW><id>18257365</id><snippet>coordinates = [2, 1]
### do stuff with coordinates
i, j = coordinates
return room[i][j]
</snippet></ROW><ROW><id>18257387</id><snippet>#!/usr/local/bin/python2.7
# -*- coding: utf-8 -*-

import sys
from PySide import QtGui

class Sample(QtGui.QWidget):

    def __init__(self):
        super(Sample, self).__init__()

        self.initUI()

    def initUI(self):
        self.setGeometry(300, 300, 800, 600)
        self.setWindowTitle('Sample')

        btn1 = QtGui.QPushButton("Button 1")

        hbox = QtGui.QHBoxLayout()
        hbox.addStretch(1)
        hbox.addWidget(btn1)

        self.setLayout(hbox)
        self.show()

def main():
    app = QtGui.QApplication(sys.argv)
    ex = Sample()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>18257426</id><snippet>if</snippet></ROW><ROW><id>18257426</id><snippet>if</snippet></ROW><ROW><id>18257426</id><snippet>if</snippet></ROW><ROW><id>18257426</id><snippet>else: pass</snippet></ROW><ROW><id>18257426</id><snippet>for name in zip_file_names:
    if name == sz_check_file:
        print name, "Date is verified."
        source_file = os.path.join(r'\\svr-dc\ftp site\%s\daily' % item, sz_check_file)
        destination = os.path.join(r"C:\%s" % item, 'sales.xls')
        shutil.copy(source_file, destination)
        shutil.copy(source_file, r"C:\%s" % item)
        sz_found = true #Flag that sz was found
        print "sales.xls has been copied."
    elif name == sc_check_file:
        print name, "Date is verified."
        source_file = os.path.join(r'\\svr-dc\ftp site\%s\daily' % item, sc_check_file)
        destination = os.path.join(r"C:\%s" % item, 'cosales.xls')
        shutil.copy(source_file, destination)
        shutil.copy(source_file, r"C:\%s" % item)
        sc_found = true #Flag that sc was found
        print "cosales.xls has been copied."
#Check flags to ensure all files found
if !(sz_found&amp;&amp;sc_found):
    print "Repoll %s for %s" % (item, business_date_seven)
    print "Once information is downloaded press any key."
    re_download = raw_input(" ")
    ext_ver_cop_seven()
</snippet></ROW><ROW><id>18257475</id><snippet>redis 127.0.0.1:6379&gt; MSET foo_20130815223737 "{\"time\":'Thu Aug 15 22:37:37 2013', \"data\":\"etc\"}"  foo_20130816123015 "{\"time\":'Thu Aug 16 12:30:15 2013', \"data\":\"etc\"}"
OK
redis 127.0.0.1:6379&gt; KEYS foo_201308*
1) "foo_20130815223737"
2) "foo_20130816123015"
</snippet></ROW><ROW><id>18257649</id><snippet>import matplotlib.pyplot as plt
fig, ax_arr = subplots(3, 1, sharex=True)
</snippet></ROW><ROW><id>18257649</id><snippet>plt.setp([a.get_xticklabels() for a in f.axes[:-1]], visible=False)
# or
plt.setp([a.get_xticklabels() for a in ax_arr[:-1]], visible=False)
</snippet></ROW><ROW><id>18257649</id><snippet>plt.subplots()</snippet></ROW><ROW><id>18257649</id><snippet>import matplotlib.pyplot as plt

fig = plt.figure()
ax1 = fig.add_subplot(211)
ax2 = fig.add_subplot(212)

ax1.plot(x1, y1)
ax2.plot(x2, y2)

plt.setp(ax1.get_xticklabels(), visible=False)
</snippet></ROW><ROW><id>18257649</id><snippet>ax1 = fig.add_subplot(N11)
ax2 = fig.add_subplot(N12)
...
axN = fig.add_subplot(N1N)

plt.setp([a.get_xticklabels() for a in (ax1, ..., axN-1)], visible=False)
</snippet></ROW><ROW><id>18257690</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'\b[a-z]', lambda m: m.group().upper(), 'home swe eeeet home')
'Home Swe Eeeet Home'
&gt;&gt;&gt; re.sub(r'\b[a-z]', lambda m: m.group().upper(), 'heLLo OoO ooo ')
'HeLLo OoO Ooo '
</snippet></ROW><ROW><id>18257690</id><snippet>\b[a-z]</snippet></ROW><ROW><id>18257690</id><snippet>[a-z]</snippet></ROW><ROW><id>18257690</id><snippet>\b</snippet></ROW><ROW><id>18257727</id><snippet>$nin</snippet></ROW><ROW><id>18257727</id><snippet>$nin</snippet></ROW><ROW><id>18257727</id><snippet>field</snippet></ROW><ROW><id>18257727</id><snippet>field</snippet></ROW><ROW><id>18257727</id><snippet>foo = db.collection.find({
    "data": { "$nin": [504, 400] },
})
</snippet></ROW><ROW><id>18257944</id><snippet>mtime</snippet></ROW><ROW><id>18257944</id><snippet>TarInfo</snippet></ROW><ROW><id>18257944</id><snippet>import tarfile
tar = tarfile.open('tarfile.tar')
for member in tar.getmembers():
    print member.name, member.mtime
</snippet></ROW><ROW><id>18257944</id><snippet>mtime</snippet></ROW><ROW><id>18257944</id><snippet>os.utime</snippet></ROW><ROW><id>18257944</id><snippet>import os
os.utime('file', (mtime, mtime))
</snippet></ROW><ROW><id>18258082</id><snippet>bool</snippet></ROW><ROW><id>18258082</id><snippet>int</snippet></ROW><ROW><id>18258082</id><snippet>True</snippet></ROW><ROW><id>18258082</id><snippet>False</snippet></ROW><ROW><id>18258082</id><snippet>&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; hash(True) == hash(1)
True
&gt;&gt;&gt; False == 0
True
&gt;&gt;&gt; hash(False) == hash(0)
True
</snippet></ROW><ROW><id>18258082</id><snippet>True</snippet></ROW><ROW><id>18258082</id><snippet>1</snippet></ROW><ROW><id>18258082</id><snippet>set</snippet></ROW><ROW><id>18258082</id><snippet>dict</snippet></ROW><ROW><id>18258082</id><snippet>&gt;&gt;&gt; True in {1: 'foo'}
True
&gt;&gt;&gt; 1 in {True: 'foo'}
True
</snippet></ROW><ROW><id>18258082</id><snippet>&gt;&gt;&gt; {1.0, 1, 2.0, 2}
{1, 2}
</snippet></ROW><ROW><id>18258092</id><snippet>&lt;html&gt; &lt;form name="form" method="$POST" action="formAction.php" &lt;/html&gt;
</snippet></ROW><ROW><id>18258092</id><snippet>&lt;?

system( 'python ~/scripts/pythonscript.py/function', $return)
echo $return

?&gt;
</snippet></ROW><ROW><id>18258092</id><snippet>&lt;?php

$VAR1 = $_GET["var1"];
$VAR2 = $_GET["var2"];

system("python &lt;script&gt;.py -args=[".$VAR1.",".$VAR2"."]", $return)
echo $return

?&gt;
</snippet></ROW><ROW><id>18258274</id><snippet>import re

numbered = re.compile(r'N\d+').match

for fn in fns:
     # open for counting
     reader = csv.reader(open(fn,"rb"))
     count = sum(1 for row in reader if row and not any(r.strip() == 'DIF' for r in row) and numbered(row[0]))

     # reopen for filtering
     reader = csv.reader(open(fn,"rb"))

     with open (os.path.join('out', fn), 'wb') as f:
        counter = 0
        w = csv.writer(f)
        for row in reader:
            if row and 'Count' in row[0].strip():
                row = ['Count', count]
            if row and not any(r.strip() == 'DIF' for r in row): #remove DIF
                if numbered(row[0]):
                    counter += 1
                    row[0] = 'N%d' % counter
            w.writerow(row)
</snippet></ROW><ROW><id>18258287</id><snippet>readline</snippet></ROW><ROW><id>18258287</id><snippet>raw_input()</snippet></ROW><ROW><id>18258519</id><snippet>.$</snippet></ROW><ROW><id>18258519</id><snippet>\.$</snippet></ROW><ROW><id>18258519</id><snippet>and</snippet></ROW><ROW><id>18258519</id><snippet>or</snippet></ROW><ROW><id>18258519</id><snippet>else</snippet></ROW><ROW><id>18258519</id><snippet>elif</snippet></ROW><ROW><id>18258519</id><snippet>else</snippet></ROW><ROW><id>18258519</id><snippet>if re.search(r'^\.|\.$', domain) or re.search(r'\.\.', domain):
    return False
elif re.search(r'\.', domain):
    return True
else:
    return False
</snippet></ROW><ROW><id>18258519</id><snippet>return</snippet></ROW><ROW><id>18258519</id><snippet>return re.search(r'\.', domain) and not re.search(r'^\.|.$|\.\.', domain):
</snippet></ROW><ROW><id>18258519</id><snippet>return '.' in domain and not \
    (domain.startswith('.') or domain.endswith('.') or '..' in domain)
</snippet></ROW><ROW><id>18258586</id><snippet>import logging
import sys


class CGLogger(logging.Logger):
    def __init__(self,name):
        logging.Logger.__init__(self,name)
        self.mainhandler = logging.StreamHandler(sys.stdout)
        self.addHandler(self.mainhandler)

    def stop_main_logging(self):
        self.removeHandler(self.mainhandler)

    def log_to_file(self, fn):
        self.filehandler = logging.FileHandler(fn)
        self.addHandler(self.filehandler)

    def stop_logging_to_file(self):
        self.removeHandler(self.filehandler)

    def restart_main_logging(self):
        self.addHandler(self.mainhandler)

    def switch_to_file_logging(self, fn):
        self.stop_main_logging()
        self.log_to_file(fn)

    def switch_to_main_logging(self):
        self.stop_logging_to_file()
        self.restart_main_logging(fn)

logging.setLoggerClass(CGLogger)
</snippet></ROW><ROW><id>18258711</id><snippet>Functions_Practice.interactive_remainder_test(name)
</snippet></ROW><ROW><id>18258711</id><snippet>def interactive_remainder_test(name):
    number = inputData(name)
    remainder = processData(number)
    outputData(remainder)
</snippet></ROW><ROW><id>18258711</id><snippet>name = input("What is your name? ")
</snippet></ROW><ROW><id>18258711</id><snippet>main</snippet></ROW><ROW><id>18259077</id><snippet>import urllib2

passman = urllib2.HTTPPasswordMgrWithDefaultRealm()
passman.add_password(None, "http://casfcddb.xxx.com", "char_user", "char_pwd")
auth_handler = urllib2.HTTPBasicAuthHandler(passman)
opener = urllib2.build_opener(auth_handler)
urllib2.install_opener(opener)
urllib2.urlopen("http://casfcddb.xxx.com")
</snippet></ROW><ROW><id>18259077</id><snippet>import requests
requests.get("http://casfcddb.xxx.com", auth=('char_user', 'char_pwd'))
</snippet></ROW><ROW><id>18259100</id><snippet>except</snippet></ROW><ROW><id>18259100</id><snippet>IndexError</snippet></ROW><ROW><id>18259100</id><snippet>try:
    modrad, thetas = trim_rad(rad)
except IndexError:
    print "Couldn't find main chunk"
    return 0
</snippet></ROW><ROW><id>18259100</id><snippet>&gt;&gt;&gt; try:
...     [1][1]
... except IndexError('no'):
...     pass
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
IndexError: list index out of range
&gt;&gt;&gt; try:
...     [1][1]
... except IndexError:
...     pass
...
&gt;&gt;&gt;
</snippet></ROW><ROW><id>18259269</id><snippet>myDict</snippet></ROW><ROW><id>18259269</id><snippet>newDict</snippet></ROW><ROW><id>18259269</id><snippet>values</snippet></ROW><ROW><id>18259269</id><snippet>value</snippet></ROW><ROW><id>18259269</id><snippet>key</snippet></ROW><ROW><id>18259269</id><snippet>SyntaxError</snippet></ROW><ROW><id>18259269</id><snippet>newDict = {}
for key, value in myDict.iteritems():
    if value not in newDict.values():
        newDict[key] = value
    else:
        newDict[key] = ""
print newDict
</snippet></ROW><ROW><id>18259269</id><snippet>newDict = {}
for key, value in myDict.iteritems():
    newDict[key] = value if value not in newDict.values() else ""
print newDict
</snippet></ROW><ROW><id>18259269</id><snippet>dict</snippet></ROW><ROW><id>18259269</id><snippet>myDict</snippet></ROW><ROW><id>18259269</id><snippet>newDict</snippet></ROW><ROW><id>18259269</id><snippet>foundValues = []
for key, value in myDict.iteritems():
    if value not in foundValues:
        foundValues.append(myDict[key])
    else:
        myDict[key] = ""
print myDict
</snippet></ROW><ROW><id>18259269</id><snippet>OrderedDict</snippet></ROW><ROW><id>18259269</id><snippet>dict</snippet></ROW><ROW><id>18259269</id><snippet>myDict</snippet></ROW><ROW><id>18259269</id><snippet>OrderedDict</snippet></ROW><ROW><id>18259269</id><snippet>dict</snippet></ROW><ROW><id>18259269</id><snippet>myDict = {'key1': ['item1', 'item2', 'item3'], 'key2': ['item4', 'item5', 'item6'], 'key3': 'item7', 'key4': 'item8', 'key5': ['item1', 'item2', 'item3'], 'key6': 'item7'}
</snippet></ROW><ROW><id>18259269</id><snippet>from collections import OrderedDict

…

myDict = OrderedDict([('key1', ['item1', 'item2', 'item3']), ('key2', ['item4', 'item5', 'item6']), ('key3', 'item7'), ('key4', 'item8'), ('key5', ['item1', 'item2', 'item3']), ('key6', 'item7')])
</snippet></ROW><ROW><id>18259311</id><snippet>Preferences</snippet></ROW><ROW><id>18259311</id><snippet>File Types</snippet></ROW><ROW><id>18259311</id><snippet>.py</snippet></ROW><ROW><id>18259416</id><snippet>&gt;&gt;&gt; t = "s" if True else "b"
&gt;&gt;&gt; print t
s
&gt;&gt;&gt; t = ("s" if True else "b")
&gt;&gt;&gt; print t
s
&gt;&gt;&gt; t = ("s" if True else "b"),
('s',)
</snippet></ROW><ROW><id>18259416</id><snippet>obj.location=facebookMember['location'].get('name', None)
</snippet></ROW><ROW><id>18259430</id><snippet>for key in dct:
    key(*dct[key])
</snippet></ROW><ROW><id>18259578</id><snippet>plot</snippet></ROW><ROW><id>18259578</id><snippet>Plot</snippet></ROW><ROW><id>18259578</id><snippet>plot</snippet></ROW><ROW><id>18259578</id><snippet>Plot</snippet></ROW><ROW><id>18259578</id><snippet>&gt;&gt;&gt; plot = Plot("plot.png", bbox=(600, 600), background="white")
</snippet></ROW><ROW><id>18259578</id><snippet>plot</snippet></ROW><ROW><id>18259578</id><snippet>igraph.drawing.Plot</snippet></ROW><ROW><id>18259578</id><snippet>plot.png</snippet></ROW><ROW><id>18259578</id><snippet>Plot</snippet></ROW><ROW><id>18259578</id><snippet>plot.redraw()</snippet></ROW><ROW><id>18259578</id><snippet>plot.save()</snippet></ROW><ROW><id>18259578</id><snippet>__draw__</snippet></ROW><ROW><id>18259578</id><snippet>Graph</snippet></ROW><ROW><id>18259578</id><snippet>&gt;&gt;&gt; g = Graph.GRG(100, 0.2)
&gt;&gt;&gt; plot.add(g, bbox=(20, 20, 580, 580))
</snippet></ROW><ROW><id>18259578</id><snippet>surface</snippet></ROW><ROW><id>18259578</id><snippet>TextDrawer</snippet></ROW><ROW><id>18259578</id><snippet>igraph.drawing.text</snippet></ROW><ROW><id>18259578</id><snippet>TextDrawer</snippet></ROW><ROW><id>18259578</id><snippet>draw_at</snippet></ROW><ROW><id>18259578</id><snippet>&gt;&gt;&gt; import cairo
&gt;&gt;&gt; context = cairo.Context(plot.surface)
&gt;&gt;&gt; text_drawer = TextDrawer(context, text="Test label", halign=TextDrawer.LEFT)
&gt;&gt;&gt; text_drawer.draw_at(x=100, y=100)
</snippet></ROW><ROW><id>18259578</id><snippet>TextDrawer</snippet></ROW><ROW><id>18259578</id><snippet>set_font_face</snippet></ROW><ROW><id>18259578</id><snippet>set_font_size</snippet></ROW><ROW><id>18259578</id><snippet>from igraph import Graph, Plot
from igraph.drawing.text import TextDrawer
import cairo

# Construct the plot
plot = Plot("plot.png", bbox=(600, 650), background="white")

# Create the graph and add it to the plot
g = Graph.GRG(100, 0.2)
plot.add(g, bbox=(20, 70, 580, 630))

# Make the plot draw itself on the Cairo surface
plot.redraw()

# Grab the surface, construct a drawing context and a TextDrawer
ctx = cairo.Context(plot.surface)
ctx.set_font_size(36)
drawer = TextDrawer(ctx, "Test title", halign=TextDrawer.CENTER)
drawer.draw_at(0, 40, width=600)

# Save the plot
plot.save()
</snippet></ROW><ROW><id>18259578</id><snippet>draw</snippet></ROW><ROW><id>18259578</id><snippet>draw_at</snippet></ROW><ROW><id>18259578</id><snippet>TextDrawer</snippet></ROW><ROW><id>18259578</id><snippet>text</snippet></ROW><ROW><id>18259578</id><snippet>TextDrawer</snippet></ROW><ROW><id>18259578</id><snippet>igraph.drawing.shapes</snippet></ROW><ROW><id>18260092</id><snippet>csv</snippet></ROW><ROW><id>18260092</id><snippet>numpy</snippet></ROW><ROW><id>18260092</id><snippet>numpy</snippet></ROW><ROW><id>18260092</id><snippet>pandas</snippet></ROW><ROW><id>18260092</id><snippet>&gt;&gt;&gt; import numpy as np, pandas as pd
&gt;&gt;&gt; %time d = np.genfromtxt("./test.csv", delimiter=",")
CPU times: user 14.5 s, sys: 396 ms, total: 14.9 s
Wall time: 14.9 s
&gt;&gt;&gt; %time d = np.loadtxt("./test.csv", delimiter=",")
CPU times: user 25.7 s, sys: 28 ms, total: 25.8 s
Wall time: 25.8 s
&gt;&gt;&gt; %time d = pd.read_csv("./test.csv", delimiter=",").values
CPU times: user 740 ms, sys: 36 ms, total: 776 ms
Wall time: 780 ms
</snippet></ROW><ROW><id>18260092</id><snippet>&gt;&gt;&gt; %time data = iter_loadtxt("test.csv")
CPU times: user 2.84 s, sys: 24 ms, total: 2.86 s
Wall time: 2.86 s
</snippet></ROW><ROW><id>18260092</id><snippet>pandas</snippet></ROW><ROW><id>18260092</id><snippet>&gt;&gt;&gt; import textreader
&gt;&gt;&gt; %time d = textreader.readrows("test.csv", float, ",")
readrows: numrows = 1500000
CPU times: user 1.3 s, sys: 40 ms, total: 1.34 s
Wall time: 1.34 s
</snippet></ROW><ROW><id>18260188</id><snippet>numpy.transpose(matrix7, axes=(1, 0, 2)).tolist()  # The 'axes' attribute tells transpose to swaps axes 0 and 1, leaving the last one alone.
</snippet></ROW><ROW><id>18260188</id><snippet>[[['A ', 'E ', 'C#'], ['  ', 'F#', 'D '], ['  ', 'E ', 'B '], ['  ', 'E ', 'C#'], ['  ', 'F#', 'D '], ['  ', 'E ', 'B '], ['  ', '  ', '  '], ['  ', 'E ', 'C#']],
[['B ', 'E ', 'C#'], ['  ', 'F#', 'D '], ['  ', 'E ', 'B '], ['  ', 'E ', 'C#'], ['  ', 'F#', 'D '], ['  ', 'E ', 'B '], ['  ', '  ', '  '], ['  ', 'E ', 'C#']],
[['C ', 'E ', 'C#'], ['  ', 'F#', 'D '], ['  ', 'E ', 'B '], ['  ', 'E ', 'C#'], ['  ', 'F#', 'D '], ['  ', 'E ', 'B '], ['  ', '  ', '  '], ['  ', 'E ', 'C#']]]
</snippet></ROW><ROW><id>18260247</id><snippet>.py</snippet></ROW><ROW><id>18260247</id><snippet>%APPDATA%\Sublime Text 2\Python\Python.sublime-build</snippet></ROW><ROW><id>18260247</id><snippet>{
    "cmd": ["C:\\python27\\python.exe", "-u", "$file"],
    "file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",
    "selector": "source.python"
}
</snippet></ROW><ROW><id>18260247</id><snippet>python -u C:\your_path\your_script.py
</snippet></ROW><ROW><id>18260305</id><snippet>a = lambda: func(g)
g = something
a()
</snippet></ROW><ROW><id>18260305</id><snippet>eval</snippet></ROW><ROW><id>18260305</id><snippet>delay</snippet></ROW><ROW><id>18260305</id><snippet>lambda</snippet></ROW><ROW><id>18260305</id><snippet>func</snippet></ROW><ROW><id>18260305</id><snippet>g</snippet></ROW><ROW><id>18260305</id><snippet>lambda</snippet></ROW><ROW><id>18260305</id><snippet>a</snippet></ROW><ROW><id>18260305</id><snippet>func</snippet></ROW><ROW><id>18260305</id><snippet>g</snippet></ROW><ROW><id>18260305</id><snippet>a</snippet></ROW><ROW><id>18260452</id><snippet>forecolor</snippet></ROW><ROW><id>18260452</id><snippet>backcolor</snippet></ROW><ROW><id>18260452</id><snippet>init_printing</snippet></ROW><ROW><id>18260452</id><snippet>In [1]: init_printing(forecolor="Blue")
</snippet></ROW><ROW><id>18260579</id><snippet>if not re.search("[-?+]|ins[ACGTU\d]", line):
    # Do something
</snippet></ROW><ROW><id>18260579</id><snippet>line</snippet></ROW><ROW><id>18260579</id><snippet>?</snippet></ROW><ROW><id>18260579</id><snippet>+</snippet></ROW><ROW><id>18260579</id><snippet>-</snippet></ROW><ROW><id>18260579</id><snippet>insA</snippet></ROW><ROW><id>18260579</id><snippet>insC</snippet></ROW><ROW><id>18260579</id><snippet>insG</snippet></ROW><ROW><id>18260579</id><snippet>insT</snippet></ROW><ROW><id>18260579</id><snippet>insU</snippet></ROW><ROW><id>18260579</id><snippet>ins</snippet></ROW><ROW><id>18260629</id><snippet>__new__</snippet></ROW><ROW><id>18260629</id><snippet>__init__</snippet></ROW><ROW><id>18260629</id><snippet>__cinit__</snippet></ROW><ROW><id>18260629</id><snippet>__new__</snippet></ROW><ROW><id>18260629</id><snippet>__new__</snippet></ROW><ROW><id>18260629</id><snippet>__cinit__</snippet></ROW><ROW><id>18260629</id><snippet>super().__init__</snippet></ROW><ROW><id>18260629</id><snippet>__init__</snippet></ROW><ROW><id>18260629</id><snippet>__cinit__</snippet></ROW><ROW><id>18260629</id><snippet>__init__</snippet></ROW><ROW><id>18260629</id><snippet>__new__</snippet></ROW><ROW><id>18260629</id><snippet>super().__init__</snippet></ROW><ROW><id>18260629</id><snippet>__init__</snippet></ROW><ROW><id>18260629</id><snippet>__new__</snippet></ROW><ROW><id>18260629</id><snippet>__cinit__</snippet></ROW><ROW><id>18260629</id><snippet>__init__</snippet></ROW><ROW><id>18260629</id><snippet>__init__</snippet></ROW><ROW><id>18260629</id><snippet>object</snippet></ROW><ROW><id>18260629</id><snippet>cdef class Foo:
    def __cinit__(self, a, b, *args, **kw):
        print('Foo.cinit', a, b, args, kw)
    def __init__(self, *args, **kw):
        print('Foo.init', args, kw)
</snippet></ROW><ROW><id>18260629</id><snippet>import pyximport; pyximport.install()
import cinit

class Bar(cinit.Foo):
    def __new__(cls, *args, **kw):
        print('Bar.new', args, kw)
        return super().__new__(cls, *args, **kw)
    def __init__(self, a, b, c, d):
        print('Bar.init', a, b, c, d)
        super().__init__(a, b, c, d)

b = Bar(1, 2, 3, 4)
</snippet></ROW><ROW><id>18260629</id><snippet>Bar.new (1, 2, 3, 4) {}
Foo.cinit 1 2 (3, 4) {}
Bar.init 1 2 3 4
Foo.init (1, 2, 3, 4) {}
</snippet></ROW><ROW><id>18260629</id><snippet>__init__</snippet></ROW><ROW><id>18260629</id><snippet>super().__init__</snippet></ROW><ROW><id>18260629</id><snippet>super().__init__</snippet></ROW><ROW><id>18260629</id><snippet>__new__</snippet></ROW><ROW><id>18260629</id><snippet>__cinit__</snippet></ROW><ROW><id>18260629</id><snippet>__new__</snippet></ROW><ROW><id>18260629</id><snippet>cls</snippet></ROW><ROW><id>18260629</id><snippet>self</snippet></ROW><ROW><id>18260629</id><snippet>__class__</snippet></ROW><ROW><id>18260629</id><snippet>__new__</snippet></ROW><ROW><id>18260629</id><snippet>__cinit__</snippet></ROW><ROW><id>18260629</id><snippet>__cinit__</snippet></ROW><ROW><id>18260629</id><snippet>__init__</snippet></ROW><ROW><id>18260629</id><snippet>__new__</snippet></ROW><ROW><id>18260709</id><snippet>if</snippet></ROW><ROW><id>18260709</id><snippet>&gt;&gt;&gt; [i for i in range(2) if i!=0] # Or [i for i in range(2) if i]
[1]
</snippet></ROW><ROW><id>18260709</id><snippet>&gt;&gt;&gt; [i if i!=0 else -1 for i in range(2)]
[-1, 1]
</snippet></ROW><ROW><id>18260709</id><snippet>filter(...)</snippet></ROW><ROW><id>18260709</id><snippet>&gt;&gt;&gt; filter(None, [1, 2, 0, 0, 4, 5, 6])
[1, 2, 4, 5, 6]
</snippet></ROW><ROW><id>18260771</id><snippet>self</snippet></ROW><ROW><id>18260771</id><snippet>self.t_start_label = Label(text="start time")
</snippet></ROW><ROW><id>18260771</id><snippet>self.t_start_label = Label(self, text="start time")
                           ^^^^
</snippet></ROW><ROW><id>18260771</id><snippet>Widget.grid</snippet></ROW><ROW><id>18260953</id><snippet>post.slug</snippet></ROW><ROW><id>18260953</id><snippet>\w+</snippet></ROW><ROW><id>18260953</id><snippet>/post//save/</snippet></ROW><ROW><id>18260953</id><snippet>r'^post/(?:(?P&lt;slug&gt;\w+)/)?save/'
</snippet></ROW><ROW><id>18260995</id><snippet>_set</snippet></ROW><ROW><id>18260995</id><snippet>def get_accessor_name(self):
    # This method encapsulates the logic that decides what name to give an
    # accessor descriptor that retrieves related many-to-one or
    # many-to-many objects. It uses the lower-cased object_name + "_set",
    # but this can be overridden with the "related_name" option.
    if self.field.rel.multiple:
        # If this is a symmetrical m2m relation on self, there is no reverse accessor.
        if getattr(self.field.rel, 'symmetrical', False) and self.model == self.parent_model:
            return None
        return self.field.rel.related_name or (self.opts.object_name.lower() + '_set')
    else:
        return self.field.rel.related_name or (self.opts.object_name.lower())
</snippet></ROW><ROW><id>18260995</id><snippet>models/related.py</snippet></ROW><ROW><id>18261049</id><snippet>&gt;&gt;&gt; str1 = "8493 2020"
&gt;&gt;&gt; a = 4
&gt;&gt;&gt; for i in str1[:a]:
        print i


8
4
9
3
</snippet></ROW><ROW><id>18261049</id><snippet>&gt;&gt;&gt; b = str1[:a]
&gt;&gt;&gt; b
'8493'
</snippet></ROW><ROW><id>18261131</id><snippet>for subsm in subsl:
    sumsubdesc(table, subsm)
    print H4,subsm
</snippet></ROW><ROW><id>18261131</id><snippet>for subsm in subsl:
    H4, subsm = sumsubdesc(table, subsm)
    print H4,subsm
</snippet></ROW><ROW><id>18261302</id><snippet>if __name__ == '__main__':
    manager = Manager()
    flag = manager.list([True])
    for taskSize in taskSizes:
        flag[0] = True
        processes = [] # a list to store the process handles 
        for i in range(1,TASK_LAUNCHERS):
            p = Process(target=backgroundTaskLauncher, args=(taskSize,flag))
            p.start()
            processes.append(p) # save process handle
        # Experiment goes here (I think it goes here (unindented(?)))
        flag[0] = False
        # after you are done with your experiment, join all child processes
        for p in processes:
            p.join()
</snippet></ROW><ROW><id>18261428</id><snippet>[sublist[::-1] for sublist in outerlist]
</snippet></ROW><ROW><id>18261428</id><snippet>&gt;&gt;&gt; outerlist = [[1, 2], [3, 4], [5, 6]]
&gt;&gt;&gt; [sublist[::-1] for sublist in outerlist]
[[2, 1], [4, 3], [6, 5]]
</snippet></ROW><ROW><id>18261428</id><snippet>list.reverse()</snippet></ROW><ROW><id>18261428</id><snippet>for sublist in outerlist:
    sublist.reverse()
</snippet></ROW><ROW><id>18261441</id><snippet>pip</snippet></ROW><ROW><id>18261441</id><snippet>easy_install</snippet></ROW><ROW><id>18261441</id><snippet>pip</snippet></ROW><ROW><id>18261441</id><snippet>$ sudo easy_install pip
</snippet></ROW><ROW><id>18261441</id><snippet>$ sudo pip install pyserial
</snippet></ROW><ROW><id>18261441</id><snippet>tar</snippet></ROW><ROW><id>18261441</id><snippet>$ python
Python 2.7.2 (blah blah blah … )
&gt;&gt;&gt; import serial
&gt;&gt;&gt; serial.VERSION
'2.6'
</snippet></ROW><ROW><id>18261453</id><snippet>import sys, codecs
sys.stdout = codecs.getwriter("latin-1")(sys.stdout.detach())
sys.stdin = codecs.getwriter("latin-1")(sys.stdin.detach())
sys.stdout.write(sys.stdin.read(1).decode('latin-1', 'replace'))
</snippet></ROW><ROW><id>18261453</id><snippet>export LANG=sv_SE.ISO-8859-1</snippet></ROW><ROW><id>18261453</id><snippet>input('something: ')
</snippet></ROW><ROW><id>18261453</id><snippet># Since it's bad practice to name function the
# same as __builtins__, we'll go ahead and call it something
# we're used to but isn't in use any more.
def raw_input(txt):
    sys.stdout.write(txt)
    sys.stdout.flush()
    sys.stdin.flush()
    return sys.stdin.readline().strip()
</snippet></ROW><ROW><id>18261465</id><snippet>return next(encod for value in response.values() 
                      for encod in encodings 
                          if encod.lower() in value.lower())
</snippet></ROW><ROW><id>18261465</id><snippet>next(...)</snippet></ROW><ROW><id>18261465</id><snippet>encod</snippet></ROW><ROW><id>18261465</id><snippet>encodings</snippet></ROW><ROW><id>18261465</id><snippet>value</snippet></ROW><ROW><id>18261465</id><snippet>response.values()</snippet></ROW><ROW><id>18261465</id><snippet>encod.lower() in value.lower()</snippet></ROW><ROW><id>18261465</id><snippet>next()</snippet></ROW><ROW><id>18261625</id><snippet>__rfoo__</snippet></ROW><ROW><id>18261625</id><snippet>+</snippet></ROW><ROW><id>18261625</id><snippet>-</snippet></ROW><ROW><id>18261625</id><snippet>*</snippet></ROW><ROW><id>18261625</id><snippet>/</snippet></ROW><ROW><id>18261625</id><snippet>%</snippet></ROW><ROW><id>18261625</id><snippet>divmod()</snippet></ROW><ROW><id>18261625</id><snippet>pow()</snippet></ROW><ROW><id>18261625</id><snippet>**</snippet></ROW><ROW><id>18261625</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>18261625</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>18261625</id><snippet>&amp;</snippet></ROW><ROW><id>18261625</id><snippet>^</snippet></ROW><ROW><id>18261625</id><snippet>|</snippet></ROW><ROW><id>18261625</id><snippet>x - y</snippet></ROW><ROW><id>18261625</id><snippet>y</snippet></ROW><ROW><id>18261625</id><snippet>__rsub__()</snippet></ROW><ROW><id>18261625</id><snippet>y.__rsub__(x)</snippet></ROW><ROW><id>18261625</id><snippet>x.__sub__(y)</snippet></ROW><ROW><id>18261625</id><snippet>NotImplemented</snippet></ROW><ROW><id>18261625</id><snippet>pow()</snippet></ROW><ROW><id>18261625</id><snippet>__rpow__()</snippet></ROW><ROW><id>18261625</id><snippet>x * y</snippet></ROW><ROW><id>18261625</id><snippet>if type(y) is type(x):
    return x.__mul__(y)
elif type(y) is a subclass of type(x):
    try y.__rmul__(x)
    otherwise x.__mul__(y)
else:
    try x.__mul__(y)
    otherwise y.__rmul__(x)
</snippet></ROW><ROW><id>18261625</id><snippet>class Base(object):
    def __mul__(self, lhs): print('Base.mul')
    def __rmul__(self, rhs): print('Base.rmul')

class Derived(Base):
    def __mul__(self, lhs): print('Derived.mul')
    def __rmul__(self, rhs): print('Derived.rmul')

class Unrelated(object):
    def __mul__(self, lhs): print('Unrelated.mul')
    def __rmul__(self, rhs): print('Unrelated.rmul')

print('Base * Base: ', end='')
Base() * Base()
for x, y in itertools.permutations((Base, Derived, Unrelated), 2):
    print('{} * {}: '.format(x.__name__, y.__name__), end='')
    x() * y()
</snippet></ROW><ROW><id>18261625</id><snippet>Base</snippet></ROW><ROW><id>18261625</id><snippet>int</snippet></ROW><ROW><id>18261625</id><snippet>float</snippet></ROW><ROW><id>18261625</id><snippet>int</snippet></ROW><ROW><id>18261625</id><snippet>float</snippet></ROW><ROW><id>18261625</id><snippet>Base.__rmul__</snippet></ROW><ROW><id>18261625</id><snippet>&gt;&gt;&gt; Base() * 2
Base.mul
&gt;&gt;&gt; 2 * Base()
Base.rmul
&gt;&gt;&gt; Base() * 2.5
Base.mul
&gt;&gt;&gt; 2.5 * Base()
Base.rmul
&gt;&gt;&gt; 'sdfsdfsdfds' * Base()
Base.rmul
&gt;&gt;&gt; (lambda: 23) * Base()
Base.rmul
</snippet></ROW><ROW><id>18261625</id><snippet>__mul__</snippet></ROW><ROW><id>18261625</id><snippet>__rmul__</snippet></ROW><ROW><id>18261625</id><snippet>float</snippet></ROW><ROW><id>18261629</id><snippet>send_mass_mail</snippet></ROW><ROW><id>18261629</id><snippet>send_mass_mail((mail_tuple,))
</snippet></ROW><ROW><id>18261700</id><snippet>from urllib2 import urlopen, Request
from bs4 import BeautifulSoup

resp = urlopen(Request('https://en.wikipedia.org/wiki/Anniston_City_Schools',
                       headers={'User-Agent': 'Stack Overflow'}))
soup = BeautifulSoup(resp.read())

table = soup.find('table', class_='infobox')

for row in table.find_all('tr'):
    if 'NCES' in row.th.text:
        nces = row.td.a.text
        print nces
        break
</snippet></ROW><ROW><id>18261955</id><snippet>bytes</snippet></ROW><ROW><id>18261955</id><snippet>pickle.loads(), or pass an open file object to the</snippet></ROW><ROW><id>18261955</id><snippet>with open('out/cache/' +hashed_url, 'rb') as pickle_file:
    content = pickle.load(pickle_file)
</snippet></ROW><ROW><id>18262013</id><snippet>empty_label</snippet></ROW><ROW><id>18262016</id><snippet>x</snippet></ROW><ROW><id>18262016</id><snippet>x_set = set((i['Name'], i['Type'], i['measure1'], i['measure2']) for i in x['Items'])
items = [{'Name': i[0], 'Type': i[1], 'measure1': i[2], 'measure2': i[3]} for i in sorted(x_set)]
new_x = {'Items': items}
</snippet></ROW><ROW><id>18262131</id><snippet>dict</snippet></ROW><ROW><id>18262131</id><snippet>items</snippet></ROW><ROW><id>18262131</id><snippet>set</snippet></ROW><ROW><id>18262131</id><snippet>motels = {}.fromkeys([7000, 6010, 5990, 5030, 4970, 4060, 3930, 3060, 2940, 2030, 1970, 1010, 990, 0], set())
</snippet></ROW><ROW><id>18262131</id><snippet>&gt;&gt;&gt; motels[7000].add(1)
&gt;&gt;&gt; print motels[0]
    set([1])
</snippet></ROW><ROW><id>18262131</id><snippet>set</snippet></ROW><ROW><id>18262131</id><snippet>0</snippet></ROW><ROW><id>18262131</id><snippet>motels = dict([(i, set()) for i in [7000, 6010, 5990, 5030, 4970, 4060, 3930, 3060, 2940, 2030, 1970, 1010, 990, 0]])
</snippet></ROW><ROW><id>18262131</id><snippet>motels</snippet></ROW><ROW><id>18262131</id><snippet>set</snippet></ROW><ROW><id>18262131</id><snippet>for i in xrange(int(raw_input())): motels[int(raw_input())] = set()
</snippet></ROW><ROW><id>18262131</id><snippet>motels</snippet></ROW><ROW><id>18262182</id><snippet>subquery()</snippet></ROW><ROW><id>18262182</id><snippet>Table</snippet></ROW><ROW><id>18262182</id><snippet>subq1 = session.query(
    func.array_to_string(Company.groups, ',').label('group_name')
).filter(
    (Company.status == 'active') &amp;
    (func.array_to_string(Company.groups, ',').like(term))
).limit(limit).subquery()

subq2 = session.query(
    func.regexp_split_to_table(subq1.c.group_name, ',')
        .distinct()
        .label('group')
).subquery()

q = session.query(subq2.c.group).\
    filter(subq2.c.group.like(term)).\
    order_by(subq2.c.group).\
    limit(limit)
</snippet></ROW><ROW><id>18262182</id><snippet>unnest</snippet></ROW><ROW><id>18262182</id><snippet>arrayt_to_string</snippet></ROW><ROW><id>18262182</id><snippet>regexp_split_to_table</snippet></ROW><ROW><id>18262182</id><snippet>subq = session.query(
    func.unnest(Company.groups).label('group')
).filter(
    (Company.status == 'active') &amp;
    (func.array_to_string(Company.groups, ',').like(term))
).limit(limit).subquery()

q = session.query(subq.c.group.distinct()).\
    filter(subq.c.group.like(term)).\
    order_by(subq.c.group).\
    limit(limit)
</snippet></ROW><ROW><id>18262324</id><snippet>import os
for filename in os.listdir(os.getcwd()):
   # do your stuff
</snippet></ROW><ROW><id>18262324</id><snippet>glob</snippet></ROW><ROW><id>18262324</id><snippet>import glob
for filename in glob.glob('*.txt'):
   # do your stuff
</snippet></ROW><ROW><id>18262324</id><snippet>path = '/some/path/to/file'

for filename in os.listdir(path):
    # do your stuff

for filename in glob.glob(os.path.join(path, '*.txt')):
    # do your stuff
</snippet></ROW><ROW><id>18262324</id><snippet>fileinput</snippet></ROW><ROW><id>18262324</id><snippet>import fileinput
for line in fileinput.input():
    # do your stuff
</snippet></ROW><ROW><id>18262324</id><snippet>ls -1 | python parse.py
</snippet></ROW><ROW><id>18262384</id><snippet>def sort(array=[12,4,5,6,7,3,1,15]):
    less = []
    equal = []
    greater = []

    if len(array) &gt; 1:
        pivot = array[0]
        for x in array:
            if x &lt; pivot:
                less.append(x)
            if x == pivot:
                equal.append(x)
            if x &gt; pivot:
                greater.append(x)
        # Don't forget to return something!
        return sort(less)+sort(equal)+sort(greater)  # Just use the + operator to join lists
    # Note that you want equal ^^^^^ not pivot
    else:  # You need to hande the part at the end of the recursion - when you only have one element in your array, just return the array.
        return array
</snippet></ROW><ROW><id>18262393</id><snippet>np.put</snippet></ROW><ROW><id>18262393</id><snippet># Generate the sorted indices
ss = np.argsort(s.view(np.ndarray), axis=1)[:,::-1]
ss += (np.arange(ss.shape[0])*ss.shape[1])[:,None] #Add in place, probably trivial improvement

k=3
np.put(s,ss[:,k:],0) #or s.flat[ss[:,k:]]=0
print s

[[ 1.          0.          0.82177072  0.92487807]
 [ 0.          1.          0.94246304  0.7212526 ]
 [ 0.          0.94246304  1.          0.87247418]
 [ 0.92487807  0.          0.87247418  1.        ]]
</snippet></ROW><ROW><id>18262401</id><snippet>CreateFile</snippet></ROW><ROW><id>18262401</id><snippet>_open_osfhandle</snippet></ROW><ROW><id>18262401</id><snippet>ctypes.cdll.msvcrt._open_osfhandle</snippet></ROW><ROW><id>18262401</id><snippet>open</snippet></ROW><ROW><id>18262401</id><snippet>os.fdopen</snippet></ROW><ROW><id>18262662</id><snippet>static</snippet></ROW><ROW><id>18262662</id><snippet>static</snippet></ROW><ROW><id>18262662</id><snippet>class</snippet></ROW><ROW><id>18262684</id><snippet>(add-hook 'python-mode-hook
          (lambda ()
             (define-key python-mode-map "\r" 'newline-and-indent)))
</snippet></ROW><ROW><id>18262707</id><snippet>styleSheet()</snippet></ROW><ROW><id>18262798</id><snippet>+</snippet></ROW><ROW><id>18262798</id><snippet>can.coords(oval1, *(moveLeft() + addThirty(moveLeft())))
</snippet></ROW><ROW><id>18262798</id><snippet>can.coords(oval1, *(moveLeft() + tuple(addThirty(moveLeft())))))
</snippet></ROW><ROW><id>18262798</id><snippet>top, left = moveLeft()
bottom, right = addThirty(moveLeft())
can.coords(oval1, top, left, bottom, right)
</snippet></ROW><ROW><id>18262798</id><snippet>can.coords</snippet></ROW><ROW><id>18262798</id><snippet>def update_coords():
    top, left = moveLeft()
    bottom, right = addThirty(moveLeft())
    can.coords(oval1, top, left, bottom, right)
Button(wind, text = 'Left', command=update_coords)
</snippet></ROW><ROW><id>18262798</id><snippet>lambda</snippet></ROW><ROW><id>18262798</id><snippet>partial</snippet></ROW><ROW><id>18262798</id><snippet>Button(wind, text = 'Left', command=lambda: can.coords(oval1, *(moveLeft() + addThirty(moveLeft()))))
</snippet></ROW><ROW><id>18262798</id><snippet>&gt;&gt;&gt; def foo():
...     return 2
&gt;&gt;&gt; print(foo)
&lt;function foo at 0x12345678&gt;
&gt;&gt;&gt; print(foo())
2
</snippet></ROW><ROW><id>18262798</id><snippet>foo</snippet></ROW><ROW><id>18262798</id><snippet>foo</snippet></ROW><ROW><id>18262798</id><snippet>foo()</snippet></ROW><ROW><id>18262798</id><snippet>foo</snippet></ROW><ROW><id>18262798</id><snippet>2</snippet></ROW><ROW><id>18262798</id><snippet>&gt;&gt;&gt; def bar(x, y):
...     return x+y
&gt;&gt;&gt; print(bar)
&lt;function bar at 0x12345680&gt;
&gt;&gt;&gt; print(bar(2, 3))
6
</snippet></ROW><ROW><id>18262798</id><snippet>bar</snippet></ROW><ROW><id>18262798</id><snippet>6</snippet></ROW><ROW><id>18262798</id><snippet>bar(2, 3)</snippet></ROW><ROW><id>18262798</id><snippet>bar(2, 3)</snippet></ROW><ROW><id>18262798</id><snippet>&gt;&gt;&gt; def new_function():
...     return bar(2, 3)
</snippet></ROW><ROW><id>18262798</id><snippet>&gt;&gt;&gt; new_function = partial(bar, 2, 3)
</snippet></ROW><ROW><id>18262798</id><snippet>moveLeft()</snippet></ROW><ROW><id>18262798</id><snippet>can.coords</snippet></ROW><ROW><id>18262798</id><snippet>&gt;&gt;&gt; def new_function():
...     can.coords(oval1, *(moveLeft() + addThirty(moveLeft())))
</snippet></ROW><ROW><id>18262807</id><snippet>SIG</snippet></ROW><ROW><id>18262807</id><snippet>-USR2</snippet></ROW><ROW><id>18262807</id><snippet>subprocess.Popen( ["-c", "kill -USR2 %s" % master],
    stdout=subprocess.PIPE, shell=True).wait()
</snippet></ROW><ROW><id>18262807</id><snippet>coreutils</snippet></ROW><ROW><id>18262807</id><snippet>kill</snippet></ROW><ROW><id>18262807</id><snippet>$ /bin/kill --list|grep USR2
USR2
</snippet></ROW><ROW><id>18262807</id><snippet>kill</snippet></ROW><ROW><id>18262807</id><snippet>dash</snippet></ROW><ROW><id>18262807</id><snippet>bash</snippet></ROW><ROW><id>18262807</id><snippet>bash</snippet></ROW><ROW><id>18262807</id><snippet>-SIGUSR2</snippet></ROW><ROW><id>18262807</id><snippet>-USR2</snippet></ROW><ROW><id>18262807</id><snippet>dash</snippet></ROW><ROW><id>18262807</id><snippet>$ dash -c 'kill -l' |grep USR
USR1
USR2
$ bash -c 'kill -l' |grep USR
 6) SIGABRT  7) SIGBUS   8) SIGFPE   9) SIGKILL 10) SIGUSR1
11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 15) SIGTERM
$ bash -c 'kill -SIGUSR2 99999'
bash: line 0: kill: (99999) - No such process
$ bash -c 'kill -USR2 99999'
bash: line 0: kill: (99999) - No such process
$ bash -c 'kill -NOTASIGSPEC 99999'
bash: line 0: kill: NOTASIGSPEC: invalid signal specification
$ dash -c 'kill -SIGUSR2 99999'
dash: 1: kill: Illegal option -S
$ dash -c 'kill -USR2 99999'
dash: 1: kill: No such process
</snippet></ROW><ROW><id>18262847</id><snippet>comint</snippet></ROW><ROW><id>18262854</id><snippet>sed -n '/^&lt;url&gt;$/{n;N;N;N;s/\n/ /g;s/ *&lt;[a-z]*&gt;//g;s/&lt;\/[a-z]*&gt;/ /g;p}'
</snippet></ROW><ROW><id>18262854</id><snippet>sed -n '/^&lt;url&gt;$/ {  # if this line contains only &lt;url&gt;
  n;N;N;N              # read the next 4 lines into the pattern space
  s/\n//g              # remove newlines
  s/ *&lt;[a-z]*&gt;//g      # remove opening tags and the spaces before them
  s/&lt;\/[a-z]*&gt;/ /g     # replace closing tags with a space
  p                    # print the pattern space
}' test.txt
</snippet></ROW><ROW><id>18262854</id><snippet>-n</snippet></ROW><ROW><id>18262964</id><snippet>proxies.txt</snippet></ROW><ROW><id>18262964</id><snippet>p=open('proxies.txt')
for line in p:
    proxy = urllib2.ProxyHandler(line)
</snippet></ROW><ROW><id>18262964</id><snippet>repr</snippet></ROW><ROW><id>18262964</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>18262964</id><snippet>p=open('proxies.txt')
for line in p:
    d = ast.literal_eval(line)
    proxy = urllib2.ProxyHandler(d)
</snippet></ROW><ROW><id>18262964</id><snippet>'</snippet></ROW><ROW><id>18262964</id><snippet>{"https": "https://94.142.27.4:3128"}
{"http": "http://118.97.95.174:8080"}
{"http": "http://66.62.236.15:8080"}
</snippet></ROW><ROW><id>18262964</id><snippet>'www.google.com'\n</snippet></ROW><ROW><id>18262964</id><snippet>www.google.com</snippet></ROW><ROW><id>18262964</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>18262964</id><snippet>www.google.com</snippet></ROW><ROW><id>18262964</id><snippet>http://www.google.com</snippet></ROW><ROW><id>18262964</id><snippet>https://www.google.com</snippet></ROW><ROW><id>18262964</id><snippet>'urls.txt'</snippet></ROW><ROW><id>18262964</id><snippet>url</snippet></ROW><ROW><id>18262964</id><snippet>proxy</snippet></ROW><ROW><id>18262964</id><snippet>with</snippet></ROW><ROW><id>18262964</id><snippet>close</snippet></ROW><ROW><id>18262964</id><snippet>u</snippet></ROW><ROW><id>18262964</id><snippet>p</snippet></ROW><ROW><id>18262964</id><snippet>urllib.urlopen(url).read()</snippet></ROW><ROW><id>18262964</id><snippet>import json
import urllib2  

with open('proxies.txt') as proxies:
    for line in proxies:
        proxy = json.loads(line)
        proxy_handler = urllib2.ProxyHandler(proxy)
        opener = urllib2.build_opener(proxy_handler)
        urllib2.install_opener(opener)
with open('urls.txt') as urls:
    for line in urls:
        url = line.rstrip()
        data = urllib.urlopen(url).read()
        # do something with data
</snippet></ROW><ROW><id>18262964</id><snippet>with</snippet></ROW><ROW><id>18262964</id><snippet>for</snippet></ROW><ROW><id>18262964</id><snippet>for</snippet></ROW><ROW><id>18262964</id><snippet>with open('urls.txt') as f:
    urls = [line.rstrip() for line in f]
with open('proxies.txt') as proxies:
    for line in proxies:
        proxy = json.loads(line)
        proxy_handler = urllib2.ProxyHandler(proxy)
        opener = urllib2.build_opener(proxy_handler)
        urllib2.install_opener(opener)
        for url in urls:
            data = urllib.urlopen(url).read()
            # do something with data
</snippet></ROW><ROW><id>18262964</id><snippet>tee</snippet></ROW><ROW><id>18262979</id><snippet>import sys
from PySide import QtCore, QtGui

class MyWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MyWindow, self).__init__(parent)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.b = QtGui.QPushButton("exit", self, clicked=self.close)
        self.setWindowOpacity(.8)
        self.setStyleSheet("QMainWindow { background: 'black'}");

        self.dialog = QtGui.QDialog()
        self.dialog.setModal(True)
        self.dialog.show()

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    myapp = MyWindow()
    myapp.setGeometry(app.desktop().screenGeometry())
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>18263020</id><snippet>itertools.product</snippet></ROW><ROW><id>18263020</id><snippet>import itertools

users = df.user_id.unique()
df_indexed = df.set_index(['user_id', 'day'])
index = pd.MultiIndex.from_tuples(list(itertools.product(users, range(365))))
reindexed = df_indexed.reindex(index, fill_value=0)
</snippet></ROW><ROW><id>18263088</id><snippet>In [8]: df
Out[8]: 
   one  two  three
A    0    1      2
B    3    4      5

In [10]: df.columns = [['odd','even','odd'],df.columns]

In [11]: df
Out[11]: 
   odd  even    odd
   one   two  three
A    0     1      2
B    3     4      5
</snippet></ROW><ROW><id>18263115</id><snippet>b</snippet></ROW><ROW><id>18263115</id><snippet>b</snippet></ROW><ROW><id>18263115</id><snippet>a</snippet></ROW><ROW><id>18263115</id><snippet>b</snippet></ROW><ROW><id>18263115</id><snippet>[[d['a'] for d in lst if d['b']==b] for b in bs]
</snippet></ROW><ROW><id>18263115</id><snippet>b</snippet></ROW><ROW><id>18263115</id><snippet>bs = (d['b'] for d in lst)
</snippet></ROW><ROW><id>18263115</id><snippet>bs = sorted(set(d['b'] for d in lst))
</snippet></ROW><ROW><id>18263115</id><snippet>&gt;&gt;&gt; lst=[{'a':54,'b':1},{'a':25,'b':0},{'a':53,'b':1},{'a':532,'b':2},{'a':132,'b':0}]
&gt;&gt;&gt; bs = sorted(set(d['b'] for d in lst))
&gt;&gt;&gt; [[d['a'] for d in lst if d['b']==b] for b in bs]
[[25, 132], [54, 53], [532]]
</snippet></ROW><ROW><id>18263187</id><snippet>*myarray</snippet></ROW><ROW><id>18263187</id><snippet>myarray</snippet></ROW><ROW><id>18263187</id><snippet>*</snippet></ROW><ROW><id>18263187</id><snippet>*</snippet></ROW><ROW><id>18263187</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>18263187</id><snippet>sort()</snippet></ROW><ROW><id>18263187</id><snippet>print sort([12,4,5,6,7,3,1,15])</snippet></ROW><ROW><id>18263232</id><snippet>self.fp1 = f1</snippet></ROW><ROW><id>18263232</id><snippet>A</snippet></ROW><ROW><id>18263232</id><snippet>   class B(object):
       fp1 = f1
</snippet></ROW><ROW><id>18263232</id><snippet>B</snippet></ROW><ROW><id>18263232</id><snippet>fp1</snippet></ROW><ROW><id>18263232</id><snippet>instancemethod</snippet></ROW><ROW><id>18263232</id><snippet>fp1</snippet></ROW><ROW><id>18263232</id><snippet>instancemethod</snippet></ROW><ROW><id>18263232</id><snippet>instancemethod</snippet></ROW><ROW><id>18263232</id><snippet>self</snippet></ROW><ROW><id>18263232</id><snippet>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; b = B()
&gt;&gt;&gt; type(a.fp1)
function
&gt;&gt;&gt; type(b.fp1)
instancemethod
</snippet></ROW><ROW><id>18263294</id><snippet>epilog</snippet></ROW><ROW><id>18263294</id><snippet>OptionParser</snippet></ROW><ROW><id>18263294</id><snippet>epilog : string
    paragraph of help text to print after option help
</snippet></ROW><ROW><id>18263313</id><snippet>setattr</snippet></ROW><ROW><id>18263313</id><snippet>def setVar(self, var):
    for key, value in var.items():
        setattr(self, key, value)
</snippet></ROW><ROW><id>18263313</id><snippet>eval</snippet></ROW><ROW><id>18263313</id><snippet>exec</snippet></ROW><ROW><id>18263313</id><snippet>setattr</snippet></ROW><ROW><id>18263313</id><snippet>__dict__</snippet></ROW><ROW><id>18263313</id><snippet>def setVar(self, var):
    self.__dict__.update(var)
</snippet></ROW><ROW><id>18263313</id><snippet>setattr</snippet></ROW><ROW><id>18263313</id><snippet>self</snippet></ROW><ROW><id>18263313</id><snippet>key</snippet></ROW><ROW><id>18263313</id><snippet>value</snippet></ROW><ROW><id>18263505</id><snippet>pass</snippet></ROW><ROW><id>18263505</id><snippet>except WhateverExceptionGetsRaised:
    pass
</snippet></ROW><ROW><id>18263550</id><snippet>samples_in</snippet></ROW><ROW><id>18263550</id><snippet>samples</snippet></ROW><ROW><id>18263550</id><snippet>samples_in</snippet></ROW><ROW><id>18263550</id><snippet>samples</snippet></ROW><ROW><id>18263550</id><snippet>samples_in</snippet></ROW><ROW><id>18263550</id><snippet>samples</snippet></ROW><ROW><id>18263550</id><snippet>samples.append(samples_in[:])
</snippet></ROW><ROW><id>18263550</id><snippet>samples_in</snippet></ROW><ROW><id>18263550</id><snippet>samples.append()</snippet></ROW><ROW><id>18263550</id><snippet>samples_in</snippet></ROW><ROW><id>18263550</id><snippet>samples</snippet></ROW><ROW><id>18263550</id><snippet>samples_in[:]</snippet></ROW><ROW><id>18263550</id><snippet>samples_in[0:len(samples_in)]</snippet></ROW><ROW><id>18263653</id><snippet> for i in range (0, bsize - 2, 3): #possibly bsize - 1?
    for j in range (csize - 2): # possibly csize - 1?
        #do your thing
</snippet></ROW><ROW><id>18263653</id><snippet>i</snippet></ROW><ROW><id>18263653</id><snippet>j</snippet></ROW><ROW><id>18263653</id><snippet>range</snippet></ROW><ROW><id>18263653</id><snippet>i</snippet></ROW><ROW><id>18263653</id><snippet>range</snippet></ROW><ROW><id>18263653</id><snippet>for</snippet></ROW><ROW><id>18263653</id><snippet>&gt;&gt;&gt; for i in range(0, 14, 3):
...    print i
... 
0
3
6
9
12

&gt;&gt;&gt; for i in range(1, 5):
...     print i
... 
1
2
3
4

&gt;&gt;&gt; for i in range(5):
...     print i
... 
0
1
2
3
4
</snippet></ROW><ROW><id>18264207</id><snippet>return function()</snippet></ROW><ROW><id>18264207</id><snippet>function()</snippet></ROW><ROW><id>18264207</id><snippet>w.after</snippet></ROW><ROW><id>18264207</id><snippet>w.after_idle</snippet></ROW><ROW><id>18264207</id><snippet>for dirpath, dirnames, filenames in os.walk(path):
    print(dirpath, dirnames, filenames)
</snippet></ROW><ROW><id>18264207</id><snippet>walk_object = os.walk(path)
def func():
    global walk_object
    try:
        dirpath, dirnames, filenames = next(walk_object)
        print(dirpath, dirnames, filenames)
        func()    # or w.after(0,func) or w.after_idle(func)
    except StopIteration:
        return
func()
</snippet></ROW><ROW><id>18264371</id><snippet>len</snippet></ROW><ROW><id>18264371</id><snippet>index</snippet></ROW><ROW><id>18264371</id><snippet>my_list[5] = "a"</snippet></ROW><ROW><id>18264371</id><snippet>TypeError</snippet></ROW><ROW><id>18264371</id><snippet>my_list = ["foo", "bar"]</snippet></ROW><ROW><id>18264371</id><snippet>my_list[1][2]</snippet></ROW><ROW><id>18264591</id><snippet>list3</snippet></ROW><ROW><id>18264591</id><snippet>list1</snippet></ROW><ROW><id>18264591</id><snippet>list1 = ['little','blue','widget']
list2 = ['there','is','a','little','blue','cup','on','the','table']

list3 = set(list1)&amp;set(list2) # we don't need to list3 to actually be a list

list4 = sorted(list3, key = lambda k : list1.index(k))
</snippet></ROW><ROW><id>18264591</id><snippet>&gt;&gt;&gt; list4
['little', 'blue']
</snippet></ROW><ROW><id>18264725</id><snippet>   h1 = false

   class MyHTMLParser(HTMLParser):
       def handle_starttag(self, tag, attrs):
          ## print "Encountered a start tag:", tag
          if tag == 'h1':
                 h1 = true
       def handle_endtag(self, tag):
          ## print "Encountered an end tag :", tag
          if tag == 'h1':
                 h1 = false
       def handle_data(self, data):
           ## print "Encountered some data  :", data
           if h1:
                 print data
</snippet></ROW><ROW><id>18264918</id><snippet>some_user_type = UserType.objects.get(user_id=some_user_pk)
like_count = some_user_type.userlike_set.all().count()
</snippet></ROW><ROW><id>18264918</id><snippet>annotate</snippet></ROW><ROW><id>18264918</id><snippet>from django.db.models import Count
qs = UserType.objects.annotate(Count('userlike'))
</snippet></ROW><ROW><id>18264918</id><snippet>qs[0].userlike__count</snippet></ROW><ROW><id>18265191</id><snippet>from Tkinter import *
from twisted.internet import tksupport, reactor

root = Tk()

# Install the Reactor support
tksupport.install(root)

# at this point build Tk app as usual using the root object,
# and start the program with "reactor.run()", and stop it
# with "reactor.stop()".
</snippet></ROW><ROW><id>18265204</id><snippet># Target the 1 element when passing in
main(sys.argv[1])

# or this inside of your function
bar = str(bar[0])
</snippet></ROW><ROW><id>18265237</id><snippet>model</snippet></ROW><ROW><id>18265237</id><snippet>self</snippet></ROW><ROW><id>18265237</id><snippet>__init__</snippet></ROW><ROW><id>18265237</id><snippet>__init__</snippet></ROW><ROW><id>18265237</id><snippet>instance</snippet></ROW><ROW><id>18265237</id><snippet>instance</snippet></ROW><ROW><id>18265265</id><snippet>    def getEntryName(var_string) : # From   LIB @   Stackoverflow.com
      result = re.search(r'(.*?)((?:\[\d*])*)$', var_string)
      var_name = result.group(1)
      numbers   =   re.findall(r'\[(\d+)]', result.group(2))
      return var_name, numbers
</snippet></ROW><ROW><id>18265265</id><snippet>def BracketHandler( PassedRange, var_name, var_Length, var_startA, numbers )
  for i in range( 0, int( PassedRange ) - 1 ) : # We cycle through it!
    if numbers : # If there are more indexes to cycle through,
      BracketHandler( numbers[0], var_name + "[" + str( i ) + "]",
                    var_Length,  var_startA, numbers[1:] )
    else: # Exit Condition
      ProcessVar(var_name + "[" + str( i ) + "]",
</snippet></ROW><ROW><id>18265265</id><snippet>foo[0][0][0]
foo[0][0][1]
...
foo[0][0][7]
foo[0][1][0]
...
foo[3][5][7]
</snippet></ROW><ROW><id>18265345</id><snippet>EXISTDB_SERVER_USER = 'user'
EXISTDB_SERVER_PASSWORD = 'admin'
EXISTDB_SERVER_URL = "http://localhost:8899/exist"
EXISTDB_ROOT_COLLECTION = "/db"
</snippet></ROW><ROW><id>18265345</id><snippet>from localsettings import EXISTDB_SERVER_URL
import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'localsettings.py'
</snippet></ROW><ROW><id>18265345</id><snippet>def __init__(self):
        self.db = db.ExistDB(server_url=EXISTDB_SERVER_URL)
</snippet></ROW><ROW><id>18265413</id><snippet>nohup</snippet></ROW><ROW><id>18265413</id><snippet>spawn nohup /usr/bin/firefox https://www.google.com/
</snippet></ROW><ROW><id>18265497</id><snippet>b[0] = 99</snippet></ROW><ROW><id>18265497</id><snippet>a[0] == b[0] &gt;&gt; False</snippet></ROW><ROW><id>18265497</id><snippet>b[0] = 99</snippet></ROW><ROW><id>18265497</id><snippet>a = [1,2,3]  
</snippet></ROW><ROW><id>18265497</id><snippet>a</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>int</snippet></ROW><ROW><id>18265497</id><snippet>b = a[:]
</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>a</snippet></ROW><ROW><id>18265497</id><snippet>int</snippet></ROW><ROW><id>18265497</id><snippet>a</snippet></ROW><ROW><id>18265497</id><snippet>id(a) == id(b)
#False
</snippet></ROW><ROW><id>18265497</id><snippet>a</snippet></ROW><ROW><id>18265497</id><snippet>b</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>id(a[0]) == id(b[0])
#True
</snippet></ROW><ROW><id>18265497</id><snippet>a[0]</snippet></ROW><ROW><id>18265497</id><snippet>1</snippet></ROW><ROW><id>18265497</id><snippet>b[0]</snippet></ROW><ROW><id>18265497</id><snippet>1</snippet></ROW><ROW><id>18265497</id><snippet>a[0]</snippet></ROW><ROW><id>18265497</id><snippet>b[0]</snippet></ROW><ROW><id>18265497</id><snippet>b[0] = 99  
# ^^^^^^ THIS IS NOT WHAT THE WIKIPEDIA ARTICLE IS DESCRIBING
</snippet></ROW><ROW><id>18265497</id><snippet>b</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>b[0]</snippet></ROW><ROW><id>18265497</id><snippet>99</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>b</snippet></ROW><ROW><id>18265497</id><snippet>a</snippet></ROW><ROW><id>18265497</id><snippet>id(a[0]) == id(b[0]) 
#False
</snippet></ROW><ROW><id>18265497</id><snippet>1</snippet></ROW><ROW><id>18265497</id><snippet>99</snippet></ROW><ROW><id>18265497</id><snippet>a = [[1],[2],[3]]
</snippet></ROW><ROW><id>18265497</id><snippet>a</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>int</snippet></ROW><ROW><id>18265497</id><snippet>b = a[:]
</snippet></ROW><ROW><id>18265497</id><snippet>b</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>a</snippet></ROW><ROW><id>18265497</id><snippet>id(a) == id(b)
# False
</snippet></ROW><ROW><id>18265497</id><snippet>a</snippet></ROW><ROW><id>18265497</id><snippet>b</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>id(a[0]) == id(b[0]) 
#True
</snippet></ROW><ROW><id>18265497</id><snippet>a[0]</snippet></ROW><ROW><id>18265497</id><snippet>b[0]</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>int</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>b[0][0] = 99  
</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>b[0]</snippet></ROW><ROW><id>18265497</id><snippet>a[0][0]
# 99 !!!!!!!!!!!!!!  Wikipedia doesn't need to be edited!
</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>a</snippet></ROW><ROW><id>18265497</id><snippet>99</snippet></ROW><ROW><id>18265497</id><snippet>1</snippet></ROW><ROW><id>18265497</id><snippet>list</snippet></ROW><ROW><id>18265497</id><snippet>b[0][0] = 99</snippet></ROW><ROW><id>18265497</id><snippet>id(a[0]) == id(b[0])
#True !!!
</snippet></ROW><ROW><id>18265497</id><snippet>a[0]</snippet></ROW><ROW><id>18265497</id><snippet>a[0]</snippet></ROW><ROW><id>18265497</id><snippet>b[0]</snippet></ROW><ROW><id>18265595</id><snippet>os.rename(f, f.replace(',',''))</snippet></ROW><ROW><id>18265595</id><snippet>os.rename(os.path.join(self.dirname, f), os.path.join(self.dirname, f.replace(',','')))</snippet></ROW><ROW><id>18265595</id><snippet>rename</snippet></ROW><ROW><id>18265663</id><snippet>to_char</snippet></ROW><ROW><id>18265663</id><snippet>datetime</snippet></ROW><ROW><id>18265663</id><snippet>strftime</snippet></ROW><ROW><id>18265663</id><snippet>db_session.query(PaymentsMade) \
    .filter(func.to_char(PaymentsMade.created_at, "FMMonth") == "August")
</snippet></ROW><ROW><id>18265696</id><snippet>settings.MEDIA_ROOT</snippet></ROW><ROW><id>18265893</id><snippet>from myapp.models import Stream

#To create object
Stream.objects.create(
                        city = 'Chennai',
                        ...
                     )

#To get a single object with a unique value
Stream.objects.get(id = 1)

#To update retrieved object
some_variable = Stream.objects.get(id = 1)
some_variable.city = 'Chennai'
some_variable.save()

#To filter objects with given value
Stream.objects.filter(city = 'Chennai')

#To update filtered objects
Stream.objects.filter(city = 'Chennai').update(country = 'India')
</snippet></ROW><ROW><id>18265914</id><snippet>finalize_response</snippet></ROW><ROW><id>18265914</id><snippet>def finalize_response(self, request, *args, **kwargs):
    response = super(SomeAPIView, self).finalize_response(request, *args, **kwargs)
    response['WWW-Authenticate'] = 'Token'
    return response
</snippet></ROW><ROW><id>18265914</id><snippet>handle_exception</snippet></ROW><ROW><id>18265976</id><snippet>from lxml import etree
doc=etree.parse( xmlfile )
ns={'dc': 'http://purl.org/dc/elements/1.1/', 
  'oai': 'http://www.openarchives.org/OAI/2.0/'}
doc.xpath( '//dc:subject' , namespaces=ns ) # get all of the dc:subjects
doc.xpath( '//dc:*', namespaces=ns )  # get all elements in dc: namespace
# more specific path 
doc.xpath( '/oai:OAI-PMH/oai:ListRecords/oai:record/oai:metadata/*/dc:*', namespaces=ns )
x=doc.xpath( '/oai:OAI-PMH/oai:ListRecords/oai:record/oai:metadata/*' )
x[0].xpath( '*[contains(.,"Geo")]' )  # you can also call xpath from non document nodes
x[0].xpath( 'dc:subject/text()' , namespaces=ns ) # get the text of dc:subjects
</snippet></ROW><ROW><id>18265979</id><snippet>range</snippet></ROW><ROW><id>18265979</id><snippet>&gt;&gt;&gt; range(11, 17)
[11, 12, 13, 14, 15, 16]
</snippet></ROW><ROW><id>18265979</id><snippet>&gt;&gt;&gt; list(range(11, 17))
[11, 12, 13, 14, 15, 16]
</snippet></ROW><ROW><id>18265979</id><snippet>16+1</snippet></ROW><ROW><id>18265979</id><snippet>17</snippet></ROW><ROW><id>18265979</id><snippet>0.5</snippet></ROW><ROW><id>18265979</id><snippet>numpy</snippet></ROW><ROW><id>18265979</id><snippet>arange</snippet></ROW><ROW><id>18265979</id><snippet>&gt;&gt;&gt; numpy.arange(11, 17, 0.5)
array([ 11. ,  11.5,  12. ,  12.5,  13. ,  13.5,  14. ,  14.5,  15. ,
        15.5,  16. ,  16.5])
</snippet></ROW><ROW><id>18266011</id><snippet>from decimal import *
getcontext().prec = 160

summan = 0
lista = ['1/4','1/3','1/5','1/6','1/7','1/9','1/10','1/11']

for x in lista:
    den, num = x.split('/')
    print Decimal(den) / Decimal(num)
</snippet></ROW><ROW><id>18266224</id><snippet>open</snippet></ROW><ROW><id>18266224</id><snippet>*args</snippet></ROW><ROW><id>18266224</id><snippet>**kwargs</snippet></ROW><ROW><id>18266224</id><snippet>EnvironBuilder</snippet></ROW><ROW><id>18266224</id><snippet>headers</snippet></ROW><ROW><id>18266224</id><snippet>with self.app.test_client() as client:
    client.post('/v0/scenes/test/foo',
                data=dict(image=(StringIO('fake image'), 'image.png')),
                headers={'content-md5': 'some hash'});
</snippet></ROW><ROW><id>18266304</id><snippet>Profile -&gt; About</snippet></ROW><ROW><id>18266304</id><snippet>Apps</snippet></ROW><ROW><id>18266399</id><snippet>size_to_read = 999999  
with open(file_name, "r") as f:  
  read_part = f.read(size_to_read)  
  if(not len(read_part) == size_to_read):
    eol_reached_unexpectedly()
</snippet></ROW><ROW><id>18266569</id><snippet>def traverse(i):
    for d in i:
        childs = d.get('childs')
        for j in traverse(childs) if childs else ['']:
            yield d['kw']+' '+j

res = list(traverse(dirs))
</snippet></ROW><ROW><id>18266569</id><snippet>def traverse(i):
    for d in i:
        c = d.get('childs')
        yield from (d['kw']+' '+j for j in (traverse(c) if c else ['']))
</snippet></ROW><ROW><id>18266683</id><snippet>decrypt</snippet></ROW><ROW><id>18266683</id><snippet>index()</snippet></ROW><ROW><id>18266683</id><snippet>cleartext = ""
for c in msg:
    if c in alphabet:
        pos = alphabet.index(c)
        cleartext += string.ascii_uppercase[pos]
    else:
        cleartext += c
</snippet></ROW><ROW><id>18266683</id><snippet>translate</snippet></ROW><ROW><id>18266683</id><snippet>import string

def validate(alpha):
    # Is it exactly 26 characters long?
    if len(alpha) != 26: return False
    for c in alpha:
        # Is every character in [A-Z]?
        if c not in string.ascii_uppercase: return False
        # Is this character duplicated?
        if alpha.count(c) &gt; 1: return False
    return True


alphabet = ""
while not validate(alphabet):
    alphabet = input("Please input the encryption alphabet in order (only A-Z"
                     " allowed, with no duplicates): ")

msg = input("Now input your encrypted message: ")

print("Your encrypted alphabet is:", alphabet)
print("Your encrypted message is:", msg)

# Create a mapping from one alphabet to the other using a dictionary
table = dict(zip(alphabet, string.ascii_uppercase))
cleartext = "".join([table[c] if c in table else c for c in msg])

print("Your decrypted message reads:", cleartext)
</snippet></ROW><ROW><id>18266683</id><snippet>import string
# read and validate alphabet
# read message
print(str.translate(message, str.maketrans(alphabet, string.ascii_uppercase)))
</snippet></ROW><ROW><id>18267059</id><snippet>import os

os.system("my_util some_file.txt | grep 'Some data1' | awk '{print $2}'" )
</snippet></ROW><ROW><id>18267237</id><snippet>urllib2</snippet></ROW><ROW><id>18267237</id><snippet>sign-in.html</snippet></ROW><ROW><id>18267237</id><snippet>&lt;form name="sign-in" id="sign-in" action="/gp/flex/sign-in/select.html" method="POST"&gt;
</snippet></ROW><ROW><id>18267237</id><snippet>select.html</snippet></ROW><ROW><id>18267237</id><snippet>&lt;input id="newCust" type="radio" name="action" value="new-user"...&gt;
...
&lt;input id="returningCust" type="radio" name="action" value="sign-in"...&gt;
</snippet></ROW><ROW><id>18267237</id><snippet>import cookielib
import urllib
import urllib2

amazon_username = ...
amazon_password = ...

login_data = urllib.urlencode({'action': 'sign-in',
                               'email': amazon_username,
                               'password': amazon_password,
                               })

cookie = cookielib.CookieJar()    
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie))
opener.addheaders = [('User-agent', ...)]

response = opener.open('https://www.amazon.com/gp/sign-in.html')
print(response.getcode())

response = opener.open('https://www.amazon.com/gp/flex/sign-in/select.html', login_data)
print(response.getcode())

response = opener.open("https://www.amazon.com/") # it should show that you are logged in
print(response.getcode())
</snippet></ROW><ROW><id>18268071</id><snippet>subprocess.check_call()</snippet></ROW><ROW><id>18268071</id><snippet>0</snippet></ROW><ROW><id>18268071</id><snippet>with</snippet></ROW><ROW><id>18268071</id><snippet>return subprocess.check_call(query)
</snippet></ROW><ROW><id>18268071</id><snippet>ValueError</snippet></ROW><ROW><id>18268071</id><snippet>CalledProcessError</snippet></ROW><ROW><id>18268071</id><snippet>subprocess.call()</snippet></ROW><ROW><id>18268113</id><snippet>module.i</snippet></ROW><ROW><id>18268113</id><snippet>%module usemodule</snippet></ROW><ROW><id>18268113</id><snippet>setup.py</snippet></ROW><ROW><id>18268113</id><snippet>name=module</snippet></ROW><ROW><id>18268460</id><snippet>apiclient</snippet></ROW><ROW><id>18268460</id><snippet>apiclient</snippet></ROW><ROW><id>18268460</id><snippet>uritemplate</snippet></ROW><ROW><id>18268460</id><snippet>httplib2</snippet></ROW></DATA>