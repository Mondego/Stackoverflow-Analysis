<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>19017288</id><snippet>method="html"</snippet></ROW><ROW><id>19017288</id><snippet>tostring()</snippet></ROW><ROW><id>19017288</id><snippet>ET.tostring(content, method="html", pretty_print=True)
</snippet></ROW><ROW><id>19017288</id><snippet>lxml.html.tostring(content, pretty_print=True)
</snippet></ROW><ROW><id>19017288</id><snippet>from lxml import etree


text = """&lt;html&gt;
  &lt;body&gt;
    &lt;script&gt; 1 &lt; 2 &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
"""

tree = etree.fromstring(text)
print etree.tostring(tree, method="html")
</snippet></ROW><ROW><id>19017288</id><snippet>&lt;html&gt;
  &lt;body&gt;
    &lt;script&gt; 1 &lt; 2 &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>19017294</id><snippet>baddata = numpy.array([('1', 2814), ('1', 1185), ('1', 6836), ('2', 7057), ('1', 5403),
   ('1', 1642), ('1', 3967), ('2', 7982), ('1', 6139), ('1', 9934),
   ('2', 9932), ('1', 3044), ('1', 2769)], 
  dtype=[('name', '&lt;U24'), ('id', '&lt;i2')])

baddata.astype([('code', 'i4')])
#&gt;&gt;&gt; array([(0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,), (0,),
#&gt;&gt;&gt;        (0,), (0,)], 
#&gt;&gt;&gt;       dtype=[('code', '&lt;i4')])
</snippet></ROW><ROW><id>19017294</id><snippet>baddata = numpy.array([('1', 2814), ('1', 1185), ('1', 6836), ('2', 7057), ('1', 5403),
   ('1', 1642), ('1', 3967), ('2', 7982), ('1', 6139), ('1', 9934),
   ('2', 9932), ('1', 3044), ('1', 2769)], 
  dtype=[('name', '&lt;U24'), ('id', '&lt;i2')])

baddata.astype([('name', 'i4')])
#&gt;&gt;&gt; array([(1,), (1,), (1,), (2,), (1,), (1,), (1,), (2,), (1,), (1,), (2,),
#&gt;&gt;&gt;        (1,), (1,)], 
#&gt;&gt;&gt;       dtype=[('name', '&lt;i4')])
</snippet></ROW><ROW><id>19017313</id><snippet>print wrongCommand.wrong
</snippet></ROW><ROW><id>19017313</id><snippet>print wrongCommand.wrong()
</snippet></ROW><ROW><id>19017313</id><snippet>wrong</snippet></ROW><ROW><id>19017313</id><snippet>print wrongCommand.wrong()
</snippet></ROW><ROW><id>19017313</id><snippet>wrongCommand.wrong()
</snippet></ROW><ROW><id>19017313</id><snippet>print</snippet></ROW><ROW><id>19017313</id><snippet>wrong()</snippet></ROW><ROW><id>19017313</id><snippet>print wrongCommand.wrong()
</snippet></ROW><ROW><id>19017313</id><snippet>wrong()</snippet></ROW><ROW><id>19017313</id><snippet>wc = wrongCommand() # Create a new instance
wc.wrong()
</snippet></ROW><ROW><id>19017313</id><snippet>wrongCommand().wrong()
</snippet></ROW><ROW><id>19017313</id><snippet>wrong()</snippet></ROW><ROW><id>19017313</id><snippet>def wrong(self):
    #...
</snippet></ROW><ROW><id>19017313</id><snippet>@staticmethod
def wrong():
    # ...
</snippet></ROW><ROW><id>19017313</id><snippet>@classmethod
def wrong(cls):
    #...
</snippet></ROW><ROW><id>19017533</id><snippet>from pprint import pprint

data = {u'jobs': {u'_total': 301746, u'_count': 10, u'_start': 0, u'values': [{u'position':       {u'title': u'Director of Sales, New York '}, u'id': 7489651}, {u'position': {u'title': u'Senior Software Development Engineer'}, u'id': 7489610}, {u'position': {u'title': u'Senior Analyst, Marketing Analytics'}, u'id': 7489572}, {u'position': {u'title': u'Director,  Quantitative Analytics'}, u'id': 7489559}, {u'position': {u'title': u'Senior Quantitative Analyst'}, u'id': 7489542}, {u'position': {u'title': u'Director - Progam Lead and Project Manager - Collateral Management'}, u'id': 7489520}, {u'position': {u'title': u'Accounting and Finance Manager'}, u'id': 7489519}, {u'position': {u'title': u'Software Development Engineer - Test'}, u'id': 7489508}, {u'position': {u'title': u'Sr. Sales Executive - Technology'}, u'id': 7489462}, {u'position': {u'title': u'Recruitment Manager'}, u'id': 7489264}]}}

pprint(data['jobs']['values'])
</snippet></ROW><ROW><id>19017533</id><snippet>[{u'id': 7489651, u'position': {u'title': u'Director of Sales, New York '}},
 {u'id': 7489610,
  u'position': {u'title': u'Senior Software Development Engineer'}},
 {u'id': 7489572,
  u'position': {u'title': u'Senior Analyst, Marketing Analytics'}},
 {u'id': 7489559,
  u'position': {u'title': u'Director,  Quantitative Analytics'}},
 {u'id': 7489542, u'position': {u'title': u'Senior Quantitative Analyst'}},
 {u'id': 7489520,
  u'position': {u'title': u'Director - Progam Lead and Project Manager - Collateral Management'}},
 {u'id': 7489519, u'position': {u'title': u'Accounting and Finance Manager'}},
 {u'id': 7489508,
  u'position': {u'title': u'Software Development Engineer - Test'}},
 {u'id': 7489462,
  u'position': {u'title': u'Sr. Sales Executive - Technology'}},
 {u'id': 7489264, u'position': {u'title': u'Recruitment Manager'}}]
</snippet></ROW><ROW><id>19017629</id><snippet>atexit</snippet></ROW><ROW><id>19017629</id><snippet>request_finished</snippet></ROW><ROW><id>19017629</id><snippet>from flask import request_finished
def request_finished_handler(sender, response, **extra):
    sender.logger.debug('Request context is about to close down.  '
                        'Response: %s', response)
    # do some fancy storage stuff.

request_finished.connect(request_finished_handler, app)
</snippet></ROW><ROW><id>19017629</id><snippet>request_finished</snippet></ROW><ROW><id>19017668</id><snippet>zip</snippet></ROW><ROW><id>19017668</id><snippet>zip</snippet></ROW><ROW><id>19017668</id><snippet>zip</snippet></ROW><ROW><id>19017668</id><snippet>xVar, yVar = zip(*((x, y) for x, y in zip(xVar, yVar) if y &lt;= 100))
</snippet></ROW><ROW><id>19017668</id><snippet>&gt;&gt;&gt; xVar = [1, 200, 300, 10]
&gt;&gt;&gt; yVar = [150, 100, 50, 200]
&gt;&gt;&gt; xyVar = zip(xVar, yVar)
&gt;&gt;&gt; xyVar
[(1, 150), (200, 100), (300, 50), (10, 500)]
&gt;&gt;&gt; xyFiltered = [(x, y) for x, y in xyVar if y &lt;= 100]
&gt;&gt;&gt; xyFiltered
[(200, 100), (300, 50)]
&gt;&gt;&gt; xVar, yVar = zip(*xyFiltered)
[(200, 300), (100, 50)]
</snippet></ROW><ROW><id>19017902</id><snippet>collections</snippet></ROW><ROW><id>19017902</id><snippet>list</snippet></ROW><ROW><id>19017902</id><snippet>data</snippet></ROW><ROW><id>19017902</id><snippet>list</snippet></ROW><ROW><id>19017902</id><snippet>from UserList import UserList

class Alist(UserList):
    def __init__(self, iterable, copy=True):
        if copy:
            super(Alist, self).__init__(iterable)

        else:
            self.data = iterable

    def plot_me(self):
        pass
</snippet></ROW><ROW><id>19017913</id><snippet>for k in d1:
    if k not in d2:
        continue
    v1, v2 = d1[k], d2[k]
    for i in xrange(min(len(v1), len(v2))):
        if v1[i] != v2[i]:
            print k, i, v1[i]
            print k, i, v2[i]
</snippet></ROW><ROW><id>19017913</id><snippet>a 0 1
a 0 2
a 1 2
a 1 33
a 2 3
a 2 4
a 3 4
a 3 5
b 0 3
b 0 1
b 1 2
b 1 8
b 2 2
b 2 5
b 3 1
b 3 3
</snippet></ROW><ROW><id>19017938</id><snippet>str.lsplit</snippet></ROW><ROW><id>19017938</id><snippet>str.split</snippet></ROW><ROW><id>19017938</id><snippet>.split()</snippet></ROW><ROW><id>19017938</id><snippet>[names_index, name, names_score]</snippet></ROW><ROW><id>19017938</id><snippet>number / words / more numbers</snippet></ROW><ROW><id>19017938</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; filter(None, re.split(r'(\d+) (\w.*) (\d.*)', '1 Name 559/1 '))
['1', 'Name', '559/1 ']
&gt;&gt;&gt; filter(None, re.split(r'(\d+) (\w.*) (\d.*)', '6 Name Name-Name 1292/10 '))
['6', 'Name Name-Name', '1292/10 ']
</snippet></ROW><ROW><id>19018000</id><snippet>os.name</snippet></ROW><ROW><id>19018000</id><snippet>sys.platform</snippet></ROW><ROW><id>19018000</id><snippet>os.uname()</snippet></ROW><ROW><id>19018000</id><snippet>sys.platform</snippet></ROW><ROW><id>19018000</id><snippet>platform</snippet></ROW><ROW><id>19018020</id><snippet>data.dtype.names</snippet></ROW><ROW><id>19018020</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; data=np.array((500, 501, 502, 503, 504, 504, 504), 
    dtype=[('ColumnName1', '&lt;i8'), ('ColumnName2', '&lt;i8'), 
    ('ColumnName3', '&lt;i8'), ('ColumnName4', '&lt;i8'), ('ColumnName5', '&lt;i8'),
    ('ColumnName6', '&lt;i8'), ('ColumnName7', '&lt;i8')])
</snippet></ROW><ROW><id>19018020</id><snippet>&gt;&gt;&gt; data.dtype.names
('ColumnName1', 'ColumnName2', 'ColumnName3', 
   'ColumnName4', 'ColumnName5', 'ColumnName6', 'ColumnName7')
</snippet></ROW><ROW><id>19018037</id><snippet>print('{:&gt;{width}}{:&gt;{width}}{:&gt;{width}}{:&gt;{width}}'.format(1.2, 1, 4.32, 65.3, width=7))
#&gt;&gt;&gt;     1.2      1   4.32   65.3
</snippet></ROW><ROW><id>19018037</id><snippet>.Nf</snippet></ROW><ROW><id>19018037</id><snippet>print('{:&gt;{width}.2f}{:&gt;{width}.2f}{:&gt;{width}.2f}{:&gt;{width}.2f}'.format(1.2, 1, 4.32, 65.3, width=7))
#&gt;&gt;&gt;    1.20   1.00   4.32  65.30
</snippet></ROW><ROW><id>19018158</id><snippet>class A:
  def some_func():
    pass

  def __init__(self):
    self.init = 1

    self.some_func() # just call member function
</snippet></ROW><ROW><id>19018158</id><snippet>()</snippet></ROW><ROW><id>19018158</id><snippet>def func_of_func(func):
  return fund()

def main():
  a = A()
  func_of_func(a.some_func) # no parentheses after some_func
</snippet></ROW><ROW><id>19018233</id><snippet>import scipy.sparse as sps

# number of nonzero entries per row of X
nnz_per_row = np.diff(X.indptr)
# multiply every row by the corresponding entry of v
# You could do this in-place as:
# X.data *= np.repeat(v, nnz_per_row)
Y = sps.csr_matrix((X.data * np.repeat(v, nnz_per_row), X.indices, X.indptr),
                   shape=X.shape)

# subtract from the non-zero entries the corresponding column value in c...
Y.data -= np.take(c, Y.indices)
# ...and multiply by -1 to get the value you are after
Y.data *= -1
</snippet></ROW><ROW><id>19018233</id><snippet>rows, cols = 3, 5
v = np.random.rand(rows)
c = np.random.rand(cols)
X = sps.rand(rows, cols, density=0.5, format='csr')
</snippet></ROW><ROW><id>19018233</id><snippet>&gt;&gt;&gt; x = X.toarray()
&gt;&gt;&gt; mask = x == 0
&gt;&gt;&gt; x *= v[:, np.newaxis]
&gt;&gt;&gt; x = c - x
&gt;&gt;&gt; x[mask] = 0
&gt;&gt;&gt; x
array([[ 0.79935123,  0.        ,  0.        , -0.0097763 ,  0.59901243],
       [ 0.7522559 ,  0.        ,  0.67510109,  0.        ,  0.36240006],
       [ 0.        ,  0.        ,  0.72370725,  0.        ,  0.        ]])
&gt;&gt;&gt; Y.toarray()
array([[ 0.79935123,  0.        ,  0.        , -0.0097763 ,  0.59901243],
       [ 0.7522559 ,  0.        ,  0.67510109,  0.        ,  0.36240006],
       [ 0.        ,  0.        ,  0.72370725,  0.        ,  0.        ]])
</snippet></ROW><ROW><id>19018233</id><snippet>result = np.sum(Y.data.reshape(Y.shape[0], -1), axis=0)
</snippet></ROW><ROW><id>19018638</id><snippet>def checkTrapTransaction(): 
    try:
        logUtb(f, 'Checking if Transaction type is trapped, making payment with Transaction type as empty')
        browser.find_by_id('submitBtn').first.click()
        alert = browser.get_alert()
        x = str(alert.text) 
        if x == 'Transaction Type is required.':
            logUtb(f, 'Transaction Type input is trapped')
        alert.accept()  
        logUtb(f, "")

    except:
        logUtbE(f, "Exception: Please recheck your code")

def checkTrapEmail():
    try:
        logUtb(f, 'Checking if email is a valid email')
        browser.select('tranType','A')
        browser.find_by_id('submitBtn').first.click()
        alert = browser.get_alert()
        x = str(alert.text)
        if x == 'Please enter a valid email address.':
            logUtb(f, 'Proper email format is trapped')

        alert.accept()  
        logUtb(f, "")

    except:
        logUtbE(f, "Exception: Please recheck your code")
</snippet></ROW><ROW><id>19018905</id><snippet>self.white</snippet></ROW><ROW><id>19018905</id><snippet>name_object['Jim']</snippet></ROW><ROW><id>19018905</id><snippet>name_object[self.white]</snippet></ROW><ROW><id>19018905</id><snippet>name_object[name_object['Jim']]
</snippet></ROW><ROW><id>19018905</id><snippet>'Jim'</snippet></ROW><ROW><id>19018905</id><snippet>self.white</snippet></ROW><ROW><id>19018905</id><snippet>name_object[self.white]</snippet></ROW><ROW><id>19019057</id><snippet>&gt;&gt;&gt; 'foo' + TypeError
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: cannot concatenate 'str' and 'type' objects
</snippet></ROW><ROW><id>19019057</id><snippet>&gt;&gt;&gt; 'foo' + str(TypeError)
"foo&lt;type 'exceptions.TypeError'&gt;"
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19019348</id><snippet>list(range(100))</snippet></ROW><ROW><id>19019667</id><snippet>names</snippet></ROW><ROW><id>19019667</id><snippet>plotfile(os.path.join(pathname,'foo.csv'), names=['a', 'b', 'c', 'd', 'e', 'f'], cols=(3,5), skiprows=0, delimiter=',', label='Series')
</snippet></ROW><ROW><id>19019667</id><snippet>csv2rec</snippet></ROW><ROW><id>19019667</id><snippet>plotfile</snippet></ROW><ROW><id>19020387</id><snippet>s[i] not in 'aeiou' and i &lt; len(s)
</snippet></ROW><ROW><id>19020387</id><snippet>s[i]</snippet></ROW><ROW><id>19020387</id><snippet>i = 3</snippet></ROW><ROW><id>19020387</id><snippet>IndexError</snippet></ROW><ROW><id>19020820</id><snippet>[:]</snippet></ROW><ROW><id>19020820</id><snippet>for (x, y) in z[:]:
    ...
</snippet></ROW><ROW><id>19020939</id><snippet>root</snippet></ROW><ROW><id>19020939</id><snippet>dirs</snippet></ROW><ROW><id>19020939</id><snippet>def find_all(name, path):
    result = []
    for root, dirs, files in os.walk(path):
        if os.path.basename(root) == 'job1':
            if name in files:
                result.append(os.path.join(root, name))
    return result
</snippet></ROW><ROW><id>19020939</id><snippet>glob.glob</snippet></ROW><ROW><id>19020939</id><snippet>import glob
import os

data = glob.glob(os.path.join('cell*', 'job1', 'sample.txt'))
</snippet></ROW><ROW><id>19021422</id><snippet>[^.?!]+(?=[.?!] )
</snippet></ROW><ROW><id>19021422</id><snippet>$</snippet></ROW><ROW><id>19021422</id><snippet>m</snippet></ROW><ROW><id>19021422</id><snippet>$</snippet></ROW><ROW><id>19021422</id><snippet>[^.?!]+(?=[.?!](?: |$))
</snippet></ROW><ROW><id>19021426</id><snippet>relativedelta</snippet></ROW><ROW><id>19021426</id><snippet>datetime.datetime</snippet></ROW><ROW><id>19021426</id><snippet>datetime.date</snippet></ROW><ROW><id>19021426</id><snippet>dateutil</snippet></ROW><ROW><id>19021426</id><snippet>import dateutil.relativedelta
import dateutil.parser

def get_diff(url, header) :
    enc_data = utils.http_response('get', url, header)['body']
    json_data = json.loads(enc_data)['data'] 
    timestamp = dateutil.parser.parse(json_data[0]["timestamp"])
    lastModified = dateutil.parser.parse(json_data[0]["lastModified"])
    diff = dateutil.relativedelta.relativedelta(lastModified, timestamp)
    return diff
</snippet></ROW><ROW><id>19021426</id><snippet>&gt;&gt;&gt; import dateutil.parser
&gt;&gt;&gt; import dateutil.relativedelta
&gt;&gt;&gt; timestamp = dateutil.parser.parse('2013-09-25T11:48:01.074000')
&gt;&gt;&gt; lastModified = dateutil.parser.parse('2013-09-26T02:59:14.436562')
&gt;&gt;&gt; dateutil.relativedelta.relativedelta(lastModified, timestamp)
relativedelta(hours=+15, minutes=+11, seconds=+13, microseconds=+362562)
</snippet></ROW><ROW><id>19021681</id><snippet>import subprocess
with open('CONTENT','w') as f1:
  p1 = subprocess.Popen(["sort", "CONTENT1"], stdout=subprocess.PIPE)
  p2 = subprocess.Popen(["uniq"], stdin=subprocess.PIPE, stdout=f1)
  p1_out = p1.communicate()[0] # catch output
  p2.communicate(p1_out)       # pass input
</snippet></ROW><ROW><id>19021681</id><snippet>sys.stdout</snippet></ROW><ROW><id>19021681</id><snippet>communicate</snippet></ROW><ROW><id>19021681</id><snippet>communicate()</snippet></ROW><ROW><id>19021681</id><snippet>p1</snippet></ROW><ROW><id>19021681</id><snippet>p2</snippet></ROW><ROW><id>19021681</id><snippet>p1</snippet></ROW><ROW><id>19021681</id><snippet>p2</snippet></ROW><ROW><id>19021681</id><snippet>import subprocess
with open('CONTENT','w') as f1:
    p1 = subprocess.Popen(["sort", "CONTENT1"], stdout=subprocess.PIPE)
    p2 = subprocess.Popen(["uniq"], stdin=subprocess.PIPE, stdout=f1)
    out_line = p1.stdout.readline()
    while out_line:
        p2.stdin.write(out_line)
        out_line = p1.stdout.readline()
</snippet></ROW><ROW><id>19021681</id><snippet>import subprocess
with open('CONTENT','w') as f1:
  p1 = subprocess.Popen(["sort", "CONTENT1"], stdout=subprocess.PIPE)
  p2 = subprocess.Popen(["uniq"], stdin=p1.stdout, stdout=f1)
  p1.stdout.close()
</snippet></ROW><ROW><id>19021681</id><snippet>import subprocess
with open('CONTENT','w') as f1:
    p = subprocess.Popen("sort CONTENT1 | uniq", shell=True,
                         stdout=f1)
</snippet></ROW><ROW><id>19021911</id><snippet>newL = [[L[3*(i//3)+j//3][3*(i%3)+j%3] for j in range(9)] for i in range(9)]
</snippet></ROW><ROW><id>19021911</id><snippet>L = [[1,2,3],
     [4,5,6],
     [7,8,9]]
iterL = [ L[i//3][i%3] for i in range(9) ]
</snippet></ROW><ROW><id>19021911</id><snippet>i//3</snippet></ROW><ROW><id>19021911</id><snippet>i%3</snippet></ROW><ROW><id>19021911</id><snippet>i=4</snippet></ROW><ROW><id>19021911</id><snippet>1,0</snippet></ROW><ROW><id>19021911</id><snippet>3</snippet></ROW><ROW><id>19021911</id><snippet>9</snippet></ROW><ROW><id>19022257</id><snippet>import re

my_re = re.compile(";".join(r"(\d+)" for i in range(6)))

return re.sub(
  my_re,
  lambda match: ";".join(str(int(match.group(i)) / 2) for i in range(1, 7)),
  editor.getText())
</snippet></ROW><ROW><id>19022317</id><snippet>class BaseClass(object):
    def is_the_one(self, s):
        return inspect.isclass(s)

def get_dynamic_classes(classes):
    return [type(i, (BaseClass, ), {}) for i in classes]
</snippet></ROW><ROW><id>19022351</id><snippet>217.0/25</snippet></ROW><ROW><id>19022351</id><snippet>cdict = {'red':  ((0.0, 51.0/255, 51.0/255),
                   (0.2, 180.0/255, 180.0/255),
                   (0.4, 175.0/255, 175.0/255),
                   (0.6, 206.0/255, 206.0/255),
                   (0.8, 0.0/255, 0.0/255),
                   (1.0, 102.0/255, 102.0/255)),

        'green':((0.0, 51.0/255, 51.0/255),
                   (0.2, 180.0/255, 180.0/255),
                   (0.4, 200.0/255, 200.0/255),
                   (0.6, 211.0/255, 211.0/255),
                   (0.8, 130.0/255, 130.0/255),
                   (1.0, 217.0/255, 217.0/255)),

        'blue': ((0.0, 51.0/255, 51.0/255),
                   (0.2, 180.0/255, 180.0/255),
                   (0.4, 7.0/255, 7.0/255),
                   (0.6, 106.0/255, 106.0/255),
                   (0.8, 195.0/255, 195.0/255),
                   (1.0, 237.0/255, 237.0/255))
        }

res_map = plt.matplotlib.colors.LinearSegmentedColormap('my_cmap',cdict,256)
</snippet></ROW><ROW><id>19022727</id><snippet>if</snippet></ROW><ROW><id>19022727</id><snippet>if</snippet></ROW><ROW><id>19022727</id><snippet>dp_string = "dp2"
date_string = "2013-05-22"
location_string = "torishima"
file_string = '{0}_{1}_{2}_0000.csv'.format(dp_string, location_string, date_string)

file_matched_1 = next( (file_in_dir for file_in_dir 
                        in files_in_dir 
                        if file_string in file_in_dir
                       ), None)
print "case 1: " + file_matched_1;
</snippet></ROW><ROW><id>19022983</id><snippet>print</snippet></ROW><ROW><id>19022983</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>19022983</id><snippet>print(Cs)</snippet></ROW><ROW><id>19022983</id><snippet>print Cs</snippet></ROW><ROW><id>19022983</id><snippet>print</snippet></ROW><ROW><id>19022983</id><snippet>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; _print_ = print
&gt;&gt;&gt; def myprint(*arg, **kwarg):
...     _print_("yeah.")
...     _print_(*arg,** kwarg)
...
&gt;&gt;&gt; myprint("ok")
yeah.
ok
&gt;&gt;&gt; print = myprint
&gt;&gt;&gt; print('3')
yeah.
3
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19022983</id><snippet>myprint</snippet></ROW><ROW><id>19022983</id><snippet>print</snippet></ROW><ROW><id>19023259</id><snippet>jsonObject</snippet></ROW><ROW><id>19023259</id><snippet>object</snippet></ROW><ROW><id>19023259</id><snippet>jsonObject = serializers.serialize('json', object, fields=('value', 'record_time'))
return HttpResponse(jsonObject, mimetype="application/json")
</snippet></ROW><ROW><id>19023259</id><snippet>jsonObject</snippet></ROW><ROW><id>19023293</id><snippet>os.py</snippet></ROW><ROW><id>19023293</id><snippet>elif name in ('os2', 'nt'):  # Where Env Var Names Must Be UPPERCASE
    # But we store them as upper case

# ... 

else:  # Where Env Var Names Can Be Mixed Case
</snippet></ROW><ROW><id>19023293</id><snippet>os.environ</snippet></ROW><ROW><id>19023293</id><snippet>def __setitem__(self, key, item):
    putenv(key, item)
    self.data[key.upper()] = item
def __getitem__(self, key):
    return self.data[key.upper()]

# ...

def has_key(self, key):
    return key.upper() in self.data
def __contains__(self, key):
    return key.upper() in self.data
def get(self, key, failobj=None):
    return self.data.get(key.upper(), failobj)
</snippet></ROW><ROW><id>19023293</id><snippet>os.environ['windir']</snippet></ROW><ROW><id>19023293</id><snippet>nt</snippet></ROW><ROW><id>19023293</id><snippet>import nt
nt.environ
</snippet></ROW><ROW><id>19023293</id><snippet>&gt;&gt;&gt; import nt
&gt;&gt;&gt; sorted(nt.environ.keys())
['ALLUSERSPROFILE', 'APPDATA', 'COMPUTERNAME', 'ComSpec', 'CommonProgramFiles', 'CommonProgramFiles(x86)', 'CommonProgramW6432', 'FP_NO_HOST_CHECK', 'HOMEDRIVE', 'HOMEPATH', 'LOCALAPPDATA', 'LOGONSERVER', 'NUMBER_OF_PROCESSORS', 'OS', 'PATHEXT', 'PROCESSOR_ARCHITECTURE', 'PROCESSOR_IDENTIFIER', 'PROCESSOR_LEVEL', 'PROCESSOR_REVISION', 'PROMPT', 'PSModulePath', 'PUBLIC', 'Path', 'ProgramData', 'ProgramFiles', 'ProgramFiles(x86)', 'ProgramW6432', 'SESSIONNAME', 'SSH_AUTH_SOCK', 'SystemDrive', 'SystemRoot', 'TEMP', 'TMP', 'USERDNSDOMAIN', 'USERDOMAIN', 'USERNAME', 'USERPROFILE', 'windir', 'windows_tracing_flags', 'windows_tracing_logfile']
</snippet></ROW><ROW><id>19023620</id><snippet>Project &gt; Open Project Properties &gt; Project Execution
</snippet></ROW><ROW><id>19023879</id><snippet>iloc</snippet></ROW><ROW><id>19023879</id><snippet>data[data.date == test_day].iloc[0]
</snippet></ROW><ROW><id>19023889</id><snippet>set</snippet></ROW><ROW><id>19023889</id><snippet>def newlist():
    with open('words.txt') as fin:
        listy = set()
        for word in fin:
            n1 = word.strip()
            n2 = sorted(n1)
            red = ''.join(n2)
            listy.add(red)
    return listy

newlist()
</snippet></ROW><ROW><id>19023889</id><snippet>def newlist():
    with open('words.txt') as fin:
        return set(''.join(sorted(word.strip())) for word in fin)

newlist()
</snippet></ROW><ROW><id>19024045</id><snippet> redis-py exposes two client classes that implement these commands
 The StrictRedis class attempts to adhere to the official command syntax.
</snippet></ROW><ROW><id>19024045</id><snippet>In addition to the changes above, the Redis class, a subclass of StrictRedis,
overrides several other commands to provide backwards compatibility with older
versions of redis-py
</snippet></ROW><ROW><id>19024045</id><snippet>Redis</snippet></ROW><ROW><id>19024045</id><snippet>StrictRedis</snippet></ROW><ROW><id>19024138</id><snippet>upgrade</snippet></ROW><ROW><id>19024138</id><snippet>$ pip install -h
...
-U, --upgrade                Upgrade all packages to the newest available version
</snippet></ROW><ROW><id>19024138</id><snippet>pip install -U editable</snippet></ROW><ROW><id>19024390</id><snippet>scikits.learn.linear_model.logistic.LogisticRegression</snippet></ROW><ROW><id>19024390</id><snippet>sklearn</snippet></ROW><ROW><id>19024734</id><snippet>reduce</snippet></ROW><ROW><id>19024734</id><snippet>In [17]: doc = { 'A':1, 'B':1, 'C':{'C-A':2, 'C-B':{'C-B-A':3}}}
    ...: 
    ...: def get(doc, *args):
    ...:     return reduce(dict.get, args, doc)

In [18]: get(doc, 'A')
Out[18]: 1

In [19]: get(doc, 'C', 'C-A')
Out[19]: 2

In [20]: get(doc, 'C', 'C-B', 'C-B-A')
Out[20]: 3
</snippet></ROW><ROW><id>19024734</id><snippet>reduce</snippet></ROW><ROW><id>19024734</id><snippet>def reduce(function, arguments, initializer):
    a = initializer
    for b in arguments:
        a = function(a, b)
    return a
</snippet></ROW><ROW><id>19024734</id><snippet>a</snippet></ROW><ROW><id>19024734</id><snippet>doc</snippet></ROW><ROW><id>19024734</id><snippet>doc[arguments[0]]</snippet></ROW><ROW><id>19024734</id><snippet>arguments</snippet></ROW><ROW><id>19024734</id><snippet>sys.getrecursionlimit()</snippet></ROW><ROW><id>19024734</id><snippet>In [84]: def get(doc, *args):
    ...:     return reduce(dict.get, args, doc)

In [85]: def get2(doc, *args):
    ...:     return get2(doc[args[0]], *args[1:]) if args else doc

In [86]: %timeit get(doc, 'C', 'C-B', 'C-B-A')
1000000 loops, best of 3: 621 ns per loop

In [87]: %timeit get2(doc, 'C', 'C-B', 'C-B-A')
1000000 loops, best of 3: 1.04 us per loop

In [88]: d = make_dict(depth=350) 

In [89]: %timeit get(d, *range(350))
10000 loops, best of 3: 38.9 us per loop

In [90]: %timeit get2(d, *range(350))
1000 loops, best of 3: 973 us per loop
</snippet></ROW><ROW><id>19024788</id><snippet>self.tableWidget.currentItem()</snippet></ROW><ROW><id>19024788</id><snippet>row()</snippet></ROW><ROW><id>19024788</id><snippet>column()</snippet></ROW><ROW><id>19024857</id><snippet>and</snippet></ROW><ROW><id>19024857</id><snippet>FAILED blah blah Date: blah
</snippet></ROW><ROW><id>19024857</id><snippet>if "[FAILED]" in line and not (("Result:" in line) or ("Date:" in line)):
</snippet></ROW><ROW><id>19025086</id><snippet>x</snippet></ROW><ROW><id>19025086</id><snippet>is_palindrome</snippet></ROW><ROW><id>19025086</id><snippet>def fn(n):
    max_palindrome = 1
    for x in range(n,1,-1):
        if x * n &lt;= max_palindrome: # nothing bigger possible for remaining x
            break
        for y in range(n,x-1,-1):
            if x * y &lt;= max_palindrome: #nothing bigger possible for current x
                break
            if is_palindrome(x*y):
                max_palindrome = x*y
    return max_palindrome
</snippet></ROW><ROW><id>19025258</id><snippet>new_list.append([linewords[0],
                        linewords[1],
                        linewords[3],
                        ",".join(sorted(linewords[4].split(",")))])
</snippet></ROW><ROW><id>19025269</id><snippet>r'^(?P&lt;my_group&gt;fo[-\w]+)'
</snippet></ROW><ROW><id>19025269</id><snippet>[[^fo]</snippet></ROW><ROW><id>19025269</id><snippet>[^fo</snippet></ROW><ROW><id>19025269</id><snippet>]</snippet></ROW><ROW><id>19025953</id><snippet>def find_sequence_in_list(list_to_check, values):
    for i in range (len(list_to_check) - len(values) + 1):
        #print(list_to_check[i:i + len(values)])
        if list_to_check[i:i + len(values)] == values:
            return True

    return False

values = [1, 2, 3]
data1 = [1, 1, 2, 3, 1]
data2 = [1, 1, 4, 3, 1, 2, 1]

print(find_sequence_in_list(data1, values))
print(find_sequence_in_list(data2, values))
</snippet></ROW><ROW><id>19025953</id><snippet>print</snippet></ROW><ROW><id>19025989</id><snippet>node = [ .... ]
sampleID = [ .... ]
sampleID2 = [ .... ]
final_ids = []
[final_ids.extend(list_item) for list_item in sampleID]
[final_ids.extend(list_item) for list_item in sampleID2]

extractedlist = []

for line in nodes:
    if line[0] in final_ids:
        extractedlist.append(line)
</snippet></ROW><ROW><id>19026056</id><snippet>element._meta.get_field('categories').value_from_object(element)
</snippet></ROW><ROW><id>19026444</id><snippet>make_sum</snippet></ROW><ROW><id>19026444</id><snippet>register</snippet></ROW><ROW><id>19026444</id><snippet>node.register(make_sum, 20, result)
</snippet></ROW><ROW><id>19026444</id><snippet>class Node():
    def __init__(self):
        pass

    def register(self, f, num, done):
        print f(num, done)
</snippet></ROW><ROW><id>19026444</id><snippet>lambda</snippet></ROW><ROW><id>19026444</id><snippet>node.register(lambda: make_sum(20, result))
</snippet></ROW><ROW><id>19026444</id><snippet>class Node():
    def __init__(self):
        pass

    def register(self, f):
        print f()
</snippet></ROW><ROW><id>19026579</id><snippet>%</snippet></ROW><ROW><id>19026579</id><snippet>%s</snippet></ROW><ROW><id>19026579</id><snippet>str_to_print = str_to_print % (','.join(str(j) for j in ROI_X_vect),
                               ','.join(str(j) for j in ROI_Y_vect))
</snippet></ROW><ROW><id>19026852</id><snippet>print</snippet></ROW><ROW><id>19026852</id><snippet>s</snippet></ROW><ROW><id>19026852</id><snippet>a</snippet></ROW><ROW><id>19026852</id><snippet>15 / 10 == 1.5</snippet></ROW><ROW><id>19026852</id><snippet>s = s // 10</snippet></ROW><ROW><id>19026852</id><snippet>i</snippet></ROW><ROW><id>19026852</id><snippet>def reverse (a):
    rev = ''
    while a &gt; 1:
        rev += str(a % 10)
        a = a // 10
</snippet></ROW><ROW><id>19026852</id><snippet>&gt;&gt;&gt; num = 123
&gt;&gt;&gt; rev = int(str(num)[::-1])
&gt;&gt;&gt; rev
321
</snippet></ROW><ROW><id>19026852</id><snippet>int()</snippet></ROW><ROW><id>19026852</id><snippet>&gt;&gt;&gt; num = 3210
&gt;&gt;&gt; str(num)[::-1]
'0123'
</snippet></ROW><ROW><id>19026889</id><snippet>if x_data == "0.25" and y_data == "2.5" and z_data == "20.5":
</snippet></ROW><ROW><id>19026889</id><snippet>x_data</snippet></ROW><ROW><id>19026889</id><snippet>y_data</snippet></ROW><ROW><id>19026889</id><snippet>z_data</snippet></ROW><ROW><id>19027104</id><snippet>url(r'^$', 'static_pages.views.specific_static_page', name='index'),
</snippet></ROW><ROW><id>19027104</id><snippet>def specific_static_page(request, static_page_slug=None):

if not static_page_slug:
    static_page_slug = some_default_value #for index page

....
</snippet></ROW><ROW><id>19027387</id><snippet>import boto.ec2

ec2 = boto.ec2.connect_to_region('us-west-2')
instance = get_all_instances(filters={'reservation-id': 'r-50b4f837'})[0].instances[0]
</snippet></ROW><ROW><id>19027387</id><snippet>run_instances</snippet></ROW><ROW><id>19027455</id><snippet>new_re_df = [s.iloc[np.where(ts.astype(int) == int(i))] for i in ts]
</snippet></ROW><ROW><id>19027455</id><snippet>rise_p['ts'] = (rise_p.time / 100).astype('int')

ts_grouped = rise_p.groupby('ts')

...
</snippet></ROW><ROW><id>19027598</id><snippet>flags=</snippet></ROW><ROW><id>19027598</id><snippet>re.sub</snippet></ROW><ROW><id>19027598</id><snippet>print 'this works:', re.sub('START.*END', 'NEWTEXT', text, flags=re.DOTALL)
</snippet></ROW><ROW><id>19027598</id><snippet>count</snippet></ROW><ROW><id>19027598</id><snippet>count</snippet></ROW><ROW><id>19027598</id><snippet>print 'this works:', re.sub('START.*END', 'NEWTEXT', text, 0, re.DOTALL)
</snippet></ROW><ROW><id>19027598</id><snippet>0</snippet></ROW><ROW><id>19028670</id><snippet>sudoers</snippet></ROW><ROW><id>19028670</id><snippet>sudo pip install beautifulsoup4
</snippet></ROW><ROW><id>19028670</id><snippet>[virtualenv][1]</snippet></ROW><ROW><id>19029111</id><snippet>&gt;&gt;&gt; inds = np.where(np.diff(x))[0]
&gt;&gt;&gt; out = np.split(x,inds[np.diff(inds)==1][0::2]+2)
&gt;&gt;&gt; for n in out:
...     print n

[  38 1200 1200  306  306  391  391   82   82   35   35  902  902  955  955
   13]
[955 847 847 835 835 698 698 777 777 896 896 923 923 940 940 569 569  53
  53 411]
[  53 1009 1009 1884]
[1009  878]
[ 923  886  886  511  511  942  942 1067 1067 1888 1888  243  243 1556]
</snippet></ROW><ROW><id>19029111</id><snippet>&gt;&gt;&gt; inds = np.where(np.diff(x))[0]
&gt;&gt;&gt; out = np.split(x,inds[np.diff(inds)==1][0::2]+2)
&gt;&gt;&gt; for n in out:
...     print n
...
[  1   4   4   5   5   8   8  10  10  25  25  70  70  90  90 100]
[2 3 3 4 4 5 5 8 8 9]
[20 21 21 22]
[23]
</snippet></ROW><ROW><id>19029111</id><snippet>x</snippet></ROW><ROW><id>19029111</id><snippet>%timeit inds = np.where(np.diff(x))[0];out = np.split(x,inds[np.diff(inds)==1][0::2]+2)
10000 loops, best of 3: 169 µs per loop
</snippet></ROW><ROW><id>19029111</id><snippet>x</snippet></ROW><ROW><id>19029111</id><snippet>%timeit inds = np.where(np.diff(arr_x))[0];out = np.split(arr_x,inds[np.diff(inds)==1][0::2]+2)
10000 loops, best of 3: 135 µs per loop
</snippet></ROW><ROW><id>19029122</id><snippet>if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19029122</id><snippet>python whatever.py</snippet></ROW><ROW><id>19029122</id><snippet>sys.modules</snippet></ROW><ROW><id>19029122</id><snippet>sys.modules</snippet></ROW><ROW><id>19029221</id><snippet>center=True</snippet></ROW><ROW><id>19029221</id><snippet>pd.stats.moments.rolling_mean</snippet></ROW><ROW><id>19029221</id><snippet>pd.rolling_mean</snippet></ROW><ROW><id>19029221</id><snippet>el</snippet></ROW><ROW><id>19029221</id><snippet>center</snippet></ROW><ROW><id>19029513</id><snippet>¨</snippet></ROW><ROW><id>19029513</id><snippet>¨</snippet></ROW><ROW><id>19029601</id><snippet>build</snippet></ROW><ROW><id>19029601</id><snippet>build</snippet></ROW><ROW><id>19029601</id><snippet>install</snippet></ROW><ROW><id>19029601</id><snippet>pylint</snippet></ROW><ROW><id>19029601</id><snippet>build</snippet></ROW><ROW><id>19029835</id><snippet>conda install numpy</snippet></ROW><ROW><id>19029872</id><snippet>from datetime import datetime

def getdate(text):
    formats = ('%m/%d/%Y', '%m/%d/%y', '%Y/%m/%d', '%b%d/%Y')
    for format in formats:
        try:
            return datetime.strptime(text, format)
        except:
            pass
</snippet></ROW><ROW><id>19029892</id><snippet>import urllib2

url = 'http://s3.amazonaws.com/mybucketsample/test.xlsx'
filecontent = urllib2.urlopen(url).read()

wb = open_workbook(file_contents=filecontent)
</snippet></ROW><ROW><id>19030023</id><snippet>QuerySet.values_list</snippet></ROW><ROW><id>19030023</id><snippet>related_fields = ['customer__name', 'customer__address__postcode', 'date']
item_fields = Item.objects.filter(pk=item).values_list(*related_fields, flat=True)[0]
</snippet></ROW><ROW><id>19030049</id><snippet>which python</snippet></ROW><ROW><id>19030049</id><snippet>PATH</snippet></ROW><ROW><id>19030049</id><snippet>~/anaconda</snippet></ROW><ROW><id>19030049</id><snippet>export PATH=$HOME/anaconda/bin:$PATH
</snippet></ROW><ROW><id>19030049</id><snippet>.bash_profile</snippet></ROW><ROW><id>19030070</id><snippet>QVBoxLayout</snippet></ROW><ROW><id>19030070</id><snippet>QScrollArea</snippet></ROW><ROW><id>19030070</id><snippet>QListWidget</snippet></ROW><ROW><id>19030070</id><snippet>QListWidget::setItemWidget</snippet></ROW><ROW><id>19030221</id><snippet>__str__</snippet></ROW><ROW><id>19030221</id><snippet>def __repr__(self):
    return "%s/%s"%(self.n, self.d)
</snippet></ROW><ROW><id>19030221</id><snippet>__str__</snippet></ROW><ROW><id>19030221</id><snippet>__repr__</snippet></ROW><ROW><id>19030374</id><snippet>OrderedDict</snippet></ROW><ROW><id>19030374</id><snippet># import the right class
from collections import OrderedDict

# create and fill the dictionary
d = OrderedDict()
d['first']  = 1
d['second'] = 2
d['third']  = 3

# retrieve key/value pairs
els = list(d.items()) # explicitly convert to a list, in case it's Python 3.x

# get first inserted element 
els[0]
=&gt; ('first', 1)

# get last inserted element 
els[-1]
=&gt; ('third', 3)
</snippet></ROW><ROW><id>19030377</id><snippet>alt + arrow_left/right --&gt; word backward/forward
cmd + arrow_left/right --&gt; begin/end of line
</snippet></ROW><ROW><id>19030982</id><snippet>"\d"</snippet></ROW><ROW><id>19030982</id><snippet>"\\d"</snippet></ROW><ROW><id>19030982</id><snippet>d</snippet></ROW><ROW><id>19030982</id><snippet>\t</snippet></ROW><ROW><id>19030982</id><snippet>"\t"</snippet></ROW><ROW><id>19030982</id><snippet>r"\t"</snippet></ROW><ROW><id>19030982</id><snippet>\</snippet></ROW><ROW><id>19030982</id><snippet>t</snippet></ROW><ROW><id>19030982</id><snippet>\</snippet></ROW><ROW><id>19030982</id><snippet>d</snippet></ROW><ROW><id>19030982</id><snippet>re.compile(r"\d{3}")
</snippet></ROW><ROW><id>19030982</id><snippet>re.compile("\\d{3}")
</snippet></ROW><ROW><id>19031081</id><snippet>cssselect</snippet></ROW><ROW><id>19031081</id><snippet>root = lxml.html.fromstring(html)
root.cssselect('span.some-class-name')
</snippet></ROW><ROW><id>19031081</id><snippet>xpath</snippet></ROW><ROW><id>19031081</id><snippet>root.xpath('.//span[@class="some-class-name"]')
</snippet></ROW><ROW><id>19031081</id><snippet>cssselect</snippet></ROW><ROW><id>19031081</id><snippet>xpath</snippet></ROW><ROW><id>19031081</id><snippet>findAll/find_all</snippet></ROW><ROW><id>19031172</id><snippet>if request.method == "POST":
    post_dict = request.POST.copy()
    keys = post_dict.keys()
    attributesValues = AttributeValue.objects.filter(feature__pk = feature_id, 
                                                     attribute__name__in=keys)

    for av in attributesValues: #update all the records that are present
        if av.attribute.name in keys:
            av.value = post_dict.get(av.attribute.name)
            if av.value:
                av.save()

    #Now fetch all the new keys can create objects. 
    avs = attributesValues.values_list('attribute__name', flat=True)
    new_keys = list(set(keys) - set(list(avs)))
    for key in new_keys:
        av = AttributeValue.objects.create(feature_pk=feature_id, 
                                           value = post_dict.get(key))
    #rest of the code. 
</snippet></ROW><ROW><id>19031400</id><snippet>stuff</snippet></ROW><ROW><id>19031400</id><snippet>sqlite3.register_adapter</snippet></ROW><ROW><id>19031400</id><snippet>sqlite3.register_converter</snippet></ROW><ROW><id>19031400</id><snippet>import os
import sqlite3
try:
    import cPickle as pickle
except:
    import pickle

class MyObj(object):
    def __init__(self, arg):
        self.arg = arg
    def __str__(self):
        return 'MyObj(%r)' % self.arg

def adapter_func(obj):
    """Convert from in-memory to storage representation.
    """
    print('adapter_func(%s)\n' % obj)
    return pickle.dumps(obj)

def converter_func(data):
    """Convert from storage to in-memory representation.
    """
    print('converter_func(%r)\n' % data)
    return pickle.loads(data)

# Register the functions for manipulating the type.
sqlite3.register_adapter(MyObj, adapter_func)
sqlite3.register_converter("MyObj", converter_func)

def stuff():
    db_filename = 'todo.db'

    db_is_new = not os.path.exists(db_filename)

    conn = sqlite3.connect(db_filename)

    if db_is_new:
        print('need to create schema')
    else:
        print('database exists, assume schema does to')

    conn.close()

    db_filename = 'todo.db'

    # Create some objects to save.  Use a list of tuples so
    # the sequence can be passed directly to executemany().
    to_save = [ (MyObj('this is a value to save'),),
                (MyObj(42),),
                ]

    with sqlite3.connect(db_filename,
                         detect_types=sqlite3.PARSE_DECLTYPES) as conn:
        # Create a table with column of type "MyObj"
        conn.execute("""
        create table if not exists obj (
            id    integer primary key autoincrement not null,
            data  MyObj
        )
        """)
        cursor = conn.cursor()

        # Insert the objects into the database
        cursor.executemany("insert into obj (data) values (?)", to_save)

        # Query the database for the objects just saved
        cursor.execute("select id, data from obj")
        for obj_id, obj in cursor.fetchall():
            print('Retrieved', obj_id, obj, type(obj))
            print()

if __name__ == "__main__":
    stuff()
</snippet></ROW><ROW><id>19031418</id><snippet>def transform(inp):
    destination = {}

    for key, value in inp.items():
        keys = key.split(".")
        d = destination
        for key in keys[:-1]:
            if key not in d:
                d[key] = {}    
            d = d[key]

        d[keys[-1]] = value

    return destination
</snippet></ROW><ROW><id>19031418</id><snippet>inp = {
   'property1': 'value1',
   'property2.property3': 'value2',
   'property2.property7': 'value4',
   'property4.property5.property6': 'value3',

}

output = transform(inp)

print output

{'property1': 'value1',
 'property2': {
    'property3': 'value2',
    'property7': 'value4'
}
,'property4': {
    'property5': {
        'property6': 'value3'
    }
}}
</snippet></ROW><ROW><id>19031429</id><snippet>Counter</snippet></ROW><ROW><id>19031429</id><snippet>|</snippet></ROW><ROW><id>19031429</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; a = Counter('123')
&gt;&gt;&gt; b = Counter('44144')
&gt;&gt;&gt; a
Counter({'2': 1, '3': 1, '1': 1})
&gt;&gt;&gt; b
Counter({'4': 4, '1': 1})
&gt;&gt;&gt; a | b
Counter({'4': 4, '2': 1, '3': 1, '1': 1})
&gt;&gt;&gt; list(a | b)
['2', '3', '1', '4']
</snippet></ROW><ROW><id>19031429</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; d = {1301: Counter({'total': 18,
    ...
...                   "ongoing" : 3})}
&gt;&gt;&gt; list(reduce(lambda a,b:a|b, d.values()))
['inAnalysis', 'inQuest', 'inDevelopment', ' inDevelopment', 'inValidation', 'ongoing', 'isDuplicate', 'total']
</snippet></ROW><ROW><id>19031429</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; d = ...
&gt;&gt;&gt; list(reduce(lambda a,b:a|b, d.values()))
['inValidation', 'total', ' inDevelopment', 'inDevelopment', 'isDuplicate', 'ongoing', 'inQuest', 'inAnalysis']
</snippet></ROW><ROW><id>19031429</id><snippet>set.union</snippet></ROW><ROW><id>19031429</id><snippet>&gt;&gt;&gt; list(set().union(*d.values()))
['inValidation', 'inDevelopment', 'isDuplicate', 'total', 'ongoing', 'inAnalysis', 'inQuest', ' inDevelopment']
</snippet></ROW><ROW><id>19031522</id><snippet>itertools.islice</snippet></ROW><ROW><id>19031522</id><snippet>import itertools

i, j = 10, 20
with open(trainFile, 'rt') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
    for row in itertools.islice(spamreader, i, j+1):
        print (', '.join(row))
</snippet></ROW><ROW><id>19031522</id><snippet>import itertools

i, j = 10, 20
with open(trainFile, 'rt') as csvfile:
    spamreader = csv.reader(itertools.islice(csvfile), delimiter=' ', quotechar='|')
    for row in spamreader:
        print (', '.join(row))
</snippet></ROW><ROW><id>19031612</id><snippet>tr_TR.utf8</snippet></ROW><ROW><id>19031612</id><snippet>import locale
locale.setlocale(locale.LC_ALL, 'tr_TR.utf8')

myCity = u'Isparta İsparta'
print(myCity.lower())
# isparta isparta
</snippet></ROW><ROW><id>19031612</id><snippet>lower_map = {
    ord(u'I'): u'ı',
    ord(u'İ'): u'i',
    }

myCity = u'Isparta İsparta'
lowerCity = myCity.translate(lower_map)
print(lowerCity)
# ısparta isparta
</snippet></ROW><ROW><id>19031612</id><snippet>ısparta isparta
</snippet></ROW><ROW><id>19031831</id><snippet>outputfile.write(value1 + "_NOMINAL" * (type(value1) is str)
                        + "_NUMERIC" * (type(value1) in (float, int)))
</snippet></ROW><ROW><id>19031831</id><snippet>print &gt;&gt; outputfile, value1, "NOMINAL" if type(value1) is str else "NUMERIC"
</snippet></ROW><ROW><id>19031831</id><snippet>str</snippet></ROW><ROW><id>19031831</id><snippet>print &gt;&gt; outputfile, value1, "NOMINAL" if isinstance(value1, str) else "NUMERIC"
</snippet></ROW><ROW><id>19031831</id><snippet>if</snippet></ROW><ROW><id>19032036</id><snippet>import BeautifulSoup as bp

soup = bp.BeautifulSoup('&lt;font face="timesnewroman,times" size="7"&gt;&lt;child&gt;something&lt;/child&gt;&lt;/font&gt;')


for t in soup.findAll('font'):

    t['style'] = 'font-family: %s; font-size: %s' % (t['face'], t['size'])

    del t['face']
    del t['size']
    t.name = 'span'

    print t
</snippet></ROW><ROW><id>19032036</id><snippet>&lt;span style="font-family: timesnewroman,times; font-size: 7"&gt;&lt;child&gt;something&lt;/child&gt;&lt;/span&gt;
</snippet></ROW><ROW><id>19032176</id><snippet>'Mary'</snippet></ROW><ROW><id>19032176</id><snippet>combine0</snippet></ROW><ROW><id>19032176</id><snippet>s = 'Mary'
out = []
length = len(s) # in this case length=4

# for i in range(0, 4):
# i = 0
out.append(s[0])    # s[0] = 'M', out = ['M']
print(''.join(out)) # print('M')
# if i &lt; length - 1: =&gt; if 0 &lt; 3:
# loc(i + 1) =&gt; loc(1)
# for j in range(1, 4):
# j = 1
out.append(s[1])    # s[1] = 'a', out = ['M', 'a']
print(''.join(out)) # print('Ma')
# if j &lt; length - 1: =&gt; if 1 &lt; 3:
# loc(j + 1) =&gt; loc(2)
# for k in range(2, 4):
# k = 2
out.append(s[2])    # s[2] = 'r', out = ['M', 'a', 'r']
print(''.join(out)) # print ('Mar')
# if k &lt; length - 1: =&gt; if 2 &lt; 3:
# loc(k + 1) =&gt; loc(3)
# for l in range(3, 4):
# l = 3
out.append(s[3])    # s[3] = 'y', out = ['M', 'a', 'r', 'y']
print(''.join(out)) # print('Mary')
# if l &lt; length - 1: =&gt; if 3 &lt; 3:
# condition fails -&gt; do not recurse
del out[-1] # out = ['M', 'a', 'r']
# end of for l in range(3, 4)
del out[-1] # out = ['M', 'a']
# k = 3, now in for k in range(2, 4):
out.append(s[3])    # s[3] = 'y', out = ['M', 'a', 'y']
print(''.join(out)) # print('May')
# if k &lt; length - 1: =&gt; if 3 &lt; 3:
# condition fails -&gt; do not recurse
del out[-1] # out = ['M', 'a']
# end of for k in range(2, 4)
del out[-1] # out = ['M']
# j = 2, now in for j in range (1, 4):
out.append(s[2])    # s[2] = 'r', out = ['M', 'r']
print(''.join(out)) # print('Mr')
# if j &lt; length - 1: =&gt; if 2 &lt; 3:
# loc(j + 1) =&gt; loc(3)
# for m in range(3, 4)
# m = 3
out.append(s[3])    # s[3] = 'y', out = ['M', 'r', 'y']
print(''.join(out)) # print('Mry')
# if m &lt; length - 1: =&gt; if 3 &lt; 3:
# condition fails -&gt; do not recurse
del out[-1] # out = ['M', 'r']
# end of for m in range(3, 4)
del out[-1] # out = ['M']
# j = 3, now in for j in range (1, 4):
out.append(s[3])    # s[3] = 'y', out = ['M', 'y']
print(''.join(out)) # print('My')
# if j &lt; length - 1: =&gt; if 3 &lt; 3:
# condition fails -&gt; do not recurse
del out[-1] # out = ['M']
# end of for j in range(1, 4)
del out[-1] # out = []
# i = 1

#... you get the rest
</snippet></ROW><ROW><id>19032422</id><snippet>a+b</snippet></ROW><ROW><id>19032422</id><snippet>zip</snippet></ROW><ROW><id>19032422</id><snippet>print sorted(zip(firstnames, lastnames), key = lambda pair: pair[1])
</snippet></ROW><ROW><id>19032422</id><snippet>key</snippet></ROW><ROW><id>19032422</id><snippet>print [b + a for a, b in sorted(zip(lastnames, firstnames))]
</snippet></ROW><ROW><id>19032580</id><snippet>os.listdir</snippet></ROW><ROW><id>19032580</id><snippet>open</snippet></ROW><ROW><id>19032580</id><snippet>os.path.join</snippet></ROW><ROW><id>19032827</id><snippet>scipy.sparse</snippet></ROW><ROW><id>19032827</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>19032827</id><snippet>nonzero</snippet></ROW><ROW><id>19032827</id><snippet>&gt;&gt;&gt; a = (np.random.random((5,5)) &lt; 0.10)*1
&gt;&gt;&gt; a
array([[0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1],
       [0, 0, 1, 0, 0],
       [1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0]])
</snippet></ROW><ROW><id>19032827</id><snippet>nonzero</snippet></ROW><ROW><id>19032827</id><snippet>&gt;&gt;&gt; a.nonzero()
(array([1, 2, 3]), array([4, 2, 0]))
</snippet></ROW><ROW><id>19032827</id><snippet>i</snippet></ROW><ROW><id>19032827</id><snippet>j</snippet></ROW><ROW><id>19032827</id><snippet>&gt;&gt;&gt; i, j = a.nonzero()
</snippet></ROW><ROW><id>19032827</id><snippet>a</snippet></ROW><ROW><id>19032827</id><snippet>1</snippet></ROW><ROW><id>19032827</id><snippet>&gt;&gt;&gt; a[i,j]
array([1, 1, 1])
</snippet></ROW><ROW><id>19032827</id><snippet>a</snippet></ROW><ROW><id>19032827</id><snippet>&gt;&gt;&gt; a[i,j] = 2
&gt;&gt;&gt; a
array([[0, 0, 0, 0, 0],
       [0, 0, 0, 0, 2],
       [0, 0, 2, 0, 0],
       [2, 0, 0, 0, 0],
       [0, 0, 0, 0, 0]])
</snippet></ROW><ROW><id>19032827</id><snippet>&gt;&gt;&gt; np.array(a.nonzero()).T
array([[1, 4],
       [2, 2],
       [3, 0]])
</snippet></ROW><ROW><id>19032932</id><snippet>unittest.TestCase.skipTest</snippet></ROW><ROW><id>19032932</id><snippet>import unittest

class TestFoo(unittest.TestCase):
    def setUp(self): print('setup')
    def tearDown(self): print('teardown')
    def test_spam(self): pass
    def test_egg(self): pass
    def test_ham(self): pass

if __name__ == '__main__':
    import sys
    loader = unittest.loader.defaultTestLoader
    runner = unittest.TextTestRunner(verbosity=2)
    suite = loader.loadTestsFromModule(sys.modules['__main__'])
    for ts in suite:
        for t in ts:
            if t.id().endswith('am'): # To skip `test_spam` and `test_ham`
                setattr(t, 'setUp', lambda: t.skipTest('criteria'))
    runner.run(suite)
</snippet></ROW><ROW><id>19032932</id><snippet>test_egg (__main__.TestFoo) ... setup
teardown
ok
test_ham (__main__.TestFoo) ... skipped 'criteria'
test_spam (__main__.TestFoo) ... skipped 'criteria'

----------------------------------------------------------------------
Ran 3 tests in 0.001s

OK (skipped=2)


----------------------------------------------------------------------
Ran 3 tests in 0.002s

OK (skipped=2)
</snippet></ROW><ROW><id>19032932</id><snippet>setUp</snippet></ROW><ROW><id>19032932</id><snippet>setUp</snippet></ROW><ROW><id>19032932</id><snippet>tearDown</snippet></ROW><ROW><id>19032932</id><snippet>unittest.TestCase.skipTest</snippet></ROW><ROW><id>19033269</id><snippet>&gt;&gt;&gt; s = "u = 2. * (2. / (np.exp(x + 20.) + np.exp(-x - 20.)) ** 2"
&gt;&gt;&gt; s.count("(")
4
&gt;&gt;&gt; s.count(")")
3
</snippet></ROW><ROW><id>19033290</id><snippet>x</snippet></ROW><ROW><id>19033290</id><snippet>def trav(node, acc = []):
    acc += [node['name']]
    if 'children' in node:
        for child in node['children']:
            trav(child, acc)

acc = []
trav(x, acc)
print acc
</snippet></ROW><ROW><id>19033290</id><snippet>['MAIN', 'SUB1', 'SUBSUB1', 'NAME1', 'NAME2', 'SUBSUB2', 'SUBSUB3']
</snippet></ROW><ROW><id>19033290</id><snippet>from itertools import chain         

def trav(node):
    if 'children' in node:
        return [node['name']] + list(chain.from_iterable([trav(child) for child in node['children']]))
    else:
        return [node['name']]

print trav(x)
</snippet></ROW><ROW><id>19033762</id><snippet>import functools

def my_decorator(value):
    def _dec(f):
        @functools.wraps(f)
        def wrapper(context, request):
            print 'hey look!', value
            return f(context, request)
        return wrapper
    return _dec

@view_defaults(decorator=my_decorator('some meta info'))
class SomeViews(object):
    def __init__(self, request):
        self.request = request

    @view_config(..., renderer='string')
    def view_a(self):
        return 'foo'
</snippet></ROW><ROW><id>19033762</id><snippet>view_defaults</snippet></ROW><ROW><id>19033762</id><snippet>view_config</snippet></ROW><ROW><id>19033762</id><snippet>view_config</snippet></ROW><ROW><id>19033848</id><snippet>map(list, generator_of_generators)
</snippet></ROW><ROW><id>19033848</id><snippet>list(map(list, generator_of_generators))
</snippet></ROW><ROW><id>19033848</id><snippet>[list(gen) for gen in generator_of_generators]
</snippet></ROW><ROW><id>19033848</id><snippet>generator functions</snippet></ROW><ROW><id>19033848</id><snippet>[list(gen()) for gen in generator_of_generator_functions]
</snippet></ROW><ROW><id>19033848</id><snippet>list(generator_of_generator_functions)</snippet></ROW><ROW><id>19033848</id><snippet>list</snippet></ROW><ROW><id>19033848</id><snippet>itertools.groupby</snippet></ROW><ROW><id>19033848</id><snippet>def metagen():
    def innergen():
        yield 1
        yield 2
        yield 3

    for i in range(3):
        r = innergen()
        yield r

        for _ in r: pass
</snippet></ROW><ROW><id>19033848</id><snippet>from collections import UserList
from functools import partial


def objectitemcaller(key):
    def inner(*args, **kwargs):
        try:
            return getattr(object, key)(*args, **kwargs)
        except AttributeError:
            return NotImplemented
    return inner


class Listable(UserList):
    def __init__(self, iterator):
        self.iterator = iterator
        self.iterated = False

    def __iter__(self):
        return self

    def __next__(self):
        self.iterated = True
        return next(self.iterator)

    def _to_list_hack(self):
        self.data = list(self)
        del self.iterated
        del self.iterator
        self.__class__ = UserList

for key in UserList.__dict__.keys() - Listable.__dict__.keys():
    if key not in ["__class__", "__dict__", "__module__", "__subclasshook__"]:
        setattr(Listable, key, objectitemcaller(key))


def metagen():
    def innergen():
        yield 1
        yield 2
        yield 3

    for i in range(3):
        r = Listable(innergen())
        yield r

        if not r.iterated:
            r._to_list_hack()

        else:
            for item in r: pass

for item in metagen():
    print(item)
    print(list(item))
#&gt;&gt;&gt; &lt;Listable object at 0x7f46e4a4b850&gt;
#&gt;&gt;&gt; [1, 2, 3]
#&gt;&gt;&gt; &lt;Listable object at 0x7f46e4a4b950&gt;
#&gt;&gt;&gt; [1, 2, 3]
#&gt;&gt;&gt; &lt;Listable object at 0x7f46e4a4b990&gt;
#&gt;&gt;&gt; [1, 2, 3]

list(metagen())
#&gt;&gt;&gt; [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
</snippet></ROW><ROW><id>19033848</id><snippet>_to_list_hack</snippet></ROW><ROW><id>19033848</id><snippet>__class__</snippet></ROW><ROW><id>19033848</id><snippet>UserList</snippet></ROW><ROW><id>19034004</id><snippet>count</snippet></ROW><ROW><id>19034004</id><snippet>global count
</snippet></ROW><ROW><id>19034004</id><snippet>guessing()</snippet></ROW><ROW><id>19034004</id><snippet>def guessing(count):
</snippet></ROW><ROW><id>19034004</id><snippet>count</snippet></ROW><ROW><id>19034132</id><snippet>Dictionary&lt;string, int&gt; d1 = new Dictionary&lt;string, int&gt;();
Dictionary&lt;string, int&gt; d2 = new Dictionary&lt;string, int&gt;();

var difference = d1.Join(d2, pair =&gt; pair.Key, pair =&gt; pair.Key, (a, b) =&gt; new
{
    Key = a.Key,
    Value = a.Value - b.Value,
})
.Where(pair =&gt; pair.Value &gt; 0)
.ToDictionary(pair =&gt; pair.Key, pair =&gt; pair.Value);
</snippet></ROW><ROW><id>19034132</id><snippet>-</snippet></ROW><ROW><id>19034132</id><snippet>public class Counter&lt;T&gt; : IEnumerable&lt;KeyValuePair&lt;T, int&gt;&gt;
{
    private IEnumerable&lt;KeyValuePair&lt;T, int&gt;&gt; sequence;
    public Counter(IEnumerable&lt;KeyValuePair&lt;T, int&gt;&gt; sequence)
    {
        this.sequence = sequence;
    }

    public static Counter&lt;T&gt; operator -(Counter&lt;T&gt; first, Counter&lt;T&gt; second)
    {
        return new Counter&lt;T&gt;(first.Join(second
            , pair =&gt; pair.Key, pair =&gt; pair.Key, (a, b) =&gt;
                new KeyValuePair&lt;T, int&gt;(a.Key, a.Value - b.Value))
            .Where(pair =&gt; pair.Value &gt; 0));
    }

    public IEnumerator&lt;KeyValuePair&lt;T, int&gt;&gt; GetEnumerator()
    {
        return sequence.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
}
</snippet></ROW><ROW><id>19034329</id><snippet>self</snippet></ROW><ROW><id>19034329</id><snippet>cfg</snippet></ROW><ROW><id>19034329</id><snippet>Label(mGui, str(z), "minute(s) has past.")
</snippet></ROW><ROW><id>19034329</id><snippet>text</snippet></ROW><ROW><id>19034329</id><snippet>Label(mGui, text=str(z) + " minute(s) has past.")
</snippet></ROW><ROW><id>19034408</id><snippet>run</snippet></ROW><ROW><id>19034408</id><snippet>runOnOtherThread</snippet></ROW><ROW><id>19034408</id><snippet>run</snippet></ROW><ROW><id>19034408</id><snippet>import queue
import threading

class SomeClass(threading.Thread):
    def __init__(self, q, loop_time = 1.0/60):
        self.q = q
        self.timeout = loop_time
        super(SomeClass, self).__init__()

    def onThread(self, function, *args, **kwargs):
        self.q.put((function, args, kwargs))

    def run(self):
        while True:
            try:
                function, args, kwargs = self.q.get(timeout=self.timeout)
                function(*args, **kwargs)
            except queue.Empty:
                self.idle()

    def idle(self):
        # put the code you would have put in the `run` loop here 

    def doSomething(self):
        pass

    def doSomethingElse(self):
        pass
</snippet></ROW><ROW><id>19034408</id><snippet>someClass = SomeClass()
someClass.start()
someClass.onThread(someClass.doSomething)
someClass.onThread(someClass.doSomethingElse)
someClass.onThread(someClass.doSomething)
</snippet></ROW><ROW><id>19034408</id><snippet>    def _doSomething(self):
        # put the real code here
    def doSomething(self):
        self.onThread(self._doSomething)
</snippet></ROW><ROW><id>19034408</id><snippet>idle</snippet></ROW><ROW><id>19034408</id><snippet>futures</snippet></ROW><ROW><id>19034408</id><snippet>concurrent.futures</snippet></ROW><ROW><id>19034408</id><snippet>import futures

class SomeClass(object):
    def doSomething(self):
        pass
    def doSomethingElse(self):
        pass

someClass = SomeClass()
with futures.ThreadPoolExecutor(1) as executor:
    executor.submit(someClass.doSomething)
    executor.submit(someClass.doSomethingElse)
    executor.submit(someClass.doSomething)
</snippet></ROW><ROW><id>19034408</id><snippet>from multiprocessing import dummy as multithreading

class SomeClass(object):
    def doSomething(self):
        pass
    def doSomethingElse(self):
        pass

someClass = SomeClass()
pool = multithreading.Pool(1)
pool.apply(someClass.doSomething)
pool.apply(someClass.doSomethingElse)
pool.apply(someClass.doSomething)
pool.close()
pool.join()
</snippet></ROW><ROW><id>19034408</id><snippet>with futures.ThreadPoolExecutor(1) as executor:
    f1 = executor.submit(someClass.doSomething)
    f2 = executor.submit(someClass.doSomethingElse)
    futures.wait((f1, f2))
    f3 = executor.submit(someClass.doSomethingElser, f1.result(), f2.result())
    result = f3.result()
</snippet></ROW><ROW><id>19034408</id><snippet>f1</snippet></ROW><ROW><id>19034408</id><snippet>f2</snippet></ROW><ROW><id>19034408</id><snippet>f2</snippet></ROW><ROW><id>19034408</id><snippet>doSomethingElser</snippet></ROW><ROW><id>19034408</id><snippet>class SomeClass(threading.Thread):
    def __init__(self):
        self.things_lock = threading.Lock()
        self.things = []
        while True:
            with self.lock:
                things = self.things[:]
            for thing in things:
                # pass
    def doSomething(self):
        with self.lock:
            self.things.append(0)

someClass = SomeClass()
someClass.start()
someClass.doSomething()
</snippet></ROW><ROW><id>19034408</id><snippet>SomeClass</snippet></ROW><ROW><id>19034408</id><snippet>doSomething</snippet></ROW><ROW><id>19034408</id><snippet>doSomething</snippet></ROW><ROW><id>19034408</id><snippet>someClass = SomeClass()
someClass.start()
somethingThread = threading.Thread(target=someClass.doSomething)
somethingThread.start()
doOtherImportantStuffWithSomethingIsHappening()
somethingThread.join()
</snippet></ROW><ROW><id>19034788</id><snippet>pauseMenu</snippet></ROW><ROW><id>19034788</id><snippet>pauseMenu.pauseMenuFunct(DISPLAYSURF,(WINWIDTH,WINHEIGHT))
</snippet></ROW><ROW><id>19034788</id><snippet>self</snippet></ROW><ROW><id>19034788</id><snippet>def start():
    pygame.init()
    menuScreen = MenuScreen()
    pMenu = pauseMenu()
</snippet></ROW><ROW><id>19034788</id><snippet>pMenu.pauseMenuFunct()</snippet></ROW><ROW><id>19034812</id><snippet>"C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\vcvarsall.bat" amd64</snippet></ROW><ROW><id>19034812</id><snippet>"C:\Program Files (x86)\Microsoft Visual Studio 10.0\VC\vcvarsall.bat" amd64</snippet></ROW><ROW><id>19034812</id><snippet>python.exe</snippet></ROW><ROW><id>19034813</id><snippet>params = {
    'id':'id',
    'file':open(sourceFile, 'rb')
}
</snippet></ROW><ROW><id>19034838</id><snippet>self</snippet></ROW><ROW><id>19034838</id><snippet>getActionUtility</snippet></ROW><ROW><id>19034838</id><snippet>self.getActionUtility(a)
</snippet></ROW><ROW><id>19034838</id><snippet>self</snippet></ROW><ROW><id>19034838</id><snippet>def getActionUtility(self, action):
    return 0
</snippet></ROW><ROW><id>19034848</id><snippet>ducks</snippet></ROW><ROW><id>19034848</id><snippet>ducks - 1</snippet></ROW><ROW><id>19034848</id><snippet>int</snippet></ROW><ROW><id>19034848</id><snippet>remaining_sweets = (int(sweets) - int(swducks)*int(ducks) - 1)*int(children)
</snippet></ROW><ROW><id>19034895</id><snippet>r'..'</snippet></ROW><ROW><id>19034895</id><snippet>'..'</snippet></ROW><ROW><id>19034895</id><snippet>r'My\Path\Without\Escaping'</snippet></ROW><ROW><id>19034895</id><snippet>'My\Path\Without\Escaping'</snippet></ROW><ROW><id>19034895</id><snippet>'My\\Path\\Without\\Escaping'</snippet></ROW><ROW><id>19034895</id><snippet>r'Bad\String\Example\'</snippet></ROW><ROW><id>19034935</id><snippet>&gt;&gt;&gt; range(1,int(raw_input('Number: '))+1)
Number: 5
[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>19034976</id><snippet>&gt;&gt;&gt;from sklearn import preprocessing
&gt;&gt;&gt;data2 = preprocessing.scale(dataarray)
</snippet></ROW><ROW><id>19034995</id><snippet>def pattern():
    integer = int(raw_input("Please enter a number"))
    for number in range(0, integer):
        print " " * number + "*" * (integer - number)
</snippet></ROW><ROW><id>19034995</id><snippet>*</snippet></ROW><ROW><id>19034995</id><snippet>for</snippet></ROW><ROW><id>19035025</id><snippet>pool.map</snippet></ROW><ROW><id>19035025</id><snippet>pool.map</snippet></ROW><ROW><id>19035025</id><snippet>Pool</snippet></ROW><ROW><id>19035025</id><snippet>Queue</snippet></ROW><ROW><id>19035209</id><snippet>namedtuple</snippet></ROW><ROW><id>19035209</id><snippet>IdValueTuple = collections.namedtuple("IdValueTuple", "id value")
unique_data_with_id = list({IdValueTuple(d["id"], d["value"]) for d in mydata})
</snippet></ROW><ROW><id>19035278</id><snippet>class InvalidLogType(Exception):
   pass
</snippet></ROW><ROW><id>19035278</id><snippet>raise InvalidLogType()
</snippet></ROW><ROW><id>19035278</id><snippet>except InvalidLogType:
   etc
</snippet></ROW><ROW><id>19035495</id><snippet>&lt;div id='a'&gt;
  &lt;div&gt;
    &lt;a class='click'&gt;abc&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>19035495</id><snippet>  //div[@id='a']//a[@class='click']
</snippet></ROW><ROW><id>19035495</id><snippet>&lt;a class="click"&gt;abc&lt;/a&gt;
</snippet></ROW><ROW><id>19035495</id><snippet>driver.get_element_by_xpath("//div[@id='a']//a[@class='click']")
</snippet></ROW><ROW><id>19035721</id><snippet>config.add_route('api', '/api/*subpath')
config.add_route('default', '/*subpath')

config.add_view(web, route_name='default')
config.add_view(api, route_name='api')
</snippet></ROW><ROW><id>19035836</id><snippet>&gt;&gt;&gt; print re.match(r'^(\S+) (.*?) (\S+)$', '6 Name Name`Name None').groups()
('6', 'Name Name`Name', 'None')
</snippet></ROW><ROW><id>19035836</id><snippet>\S</snippet></ROW><ROW><id>19035836</id><snippet>^</snippet></ROW><ROW><id>19035836</id><snippet>$</snippet></ROW><ROW><id>19036060</id><snippet>resample</snippet></ROW><ROW><id>19036060</id><snippet>In [2]: df
Out[2]: 
      Sub-Product  11/1/12  11/2/12  11/3/12  11/4/12  11/5/12  11/6/12
GP   Acquisitions      164      168       54       72      203      167
GP   Applications      190      207       65       91      227      200
GPF  Acquisitions     1124     1142      992     1053     1467     1198
GPF  Applications     1391     1430     1269     1357     1855     1510
</snippet></ROW><ROW><id>19036060</id><snippet>In [4]: df = df.reset_index().set_index(['index', 'Sub-Product'])

In [5]: df
Out[5]: 
                    11/1/12  11/2/12  11/3/12  11/4/12  11/5/12  11/6/12
index Sub-Product                                                       
GP    Acquisitions      164      168       54       72      203      167
      Applications      190      207       65       91      227      200
GPF   Acquisitions     1124     1142      992     1053     1467     1198
      Applications     1391     1430     1269     1357     1855     1510
</snippet></ROW><ROW><id>19036060</id><snippet>In [6]: df.columns = pd.to_datetime(df.columns)

In [7]: df
Out[7]: 
                    2012-11-01  2012-11-02  2012-11-03  2012-11-04  \
index Sub-Product                                                    
GP    Acquisitions         164         168          54          72   
      Applications         190         207          65          91   
GPF   Acquisitions        1124        1142         992        1053   
      Applications        1391        1430        1269        1357   

                    2012-11-05  2012-11-06  
index Sub-Product                           
GP    Acquisitions         203         167  
      Applications         227         200  
GPF   Acquisitions        1467        1198  
      Applications        1855        1510  
</snippet></ROW><ROW><id>19036060</id><snippet>axis=1</snippet></ROW><ROW><id>19036060</id><snippet>'w'</snippet></ROW><ROW><id>19036060</id><snippet>how='sum'</snippet></ROW><ROW><id>19036060</id><snippet>how=np.sum</snippet></ROW><ROW><id>19036060</id><snippet>In [10]: df.resample('w', how='sum', axis=1)
Out[10]: 
                    2012-11-04  2012-11-11
index Sub-Product                         
GP    Acquisitions         458         370
      Applications         553         427
GPF   Acquisitions        4311        2665
      Applications        5447        3365
</snippet></ROW><ROW><id>19036243</id><snippet>raw_input</snippet></ROW><ROW><id>19036243</id><snippet>input</snippet></ROW><ROW><id>19036243</id><snippet>input</snippet></ROW><ROW><id>19036243</id><snippet>text = input('Text here')
</snippet></ROW><ROW><id>19036243</id><snippet>text = raw_input('Text here')
</snippet></ROW><ROW><id>19036243</id><snippet>text = eval(input('Text here'))
</snippet></ROW><ROW><id>19036243</id><snippet>text = input('Text here')
</snippet></ROW><ROW><id>19036243</id><snippet>raw_input()</snippet></ROW><ROW><id>19036243</id><snippet>input()</snippet></ROW><ROW><id>19036243</id><snippet>input()</snippet></ROW><ROW><id>19036243</id><snippet>sys.stdin</snippet></ROW><ROW><id>19036243</id><snippet>EOFError</snippet></ROW><ROW><id>19036243</id><snippet>input()</snippet></ROW><ROW><id>19036243</id><snippet>eval(input())</snippet></ROW><ROW><id>19036318</id><snippet>a = np.array([[0,0,0,1,1],
              [1,2,0,0,0],
              [6,7,4,1,0],  # sum &gt; 10
              [0,1,1,0,1],
              [7,3,2,2,8],  # sum &gt; 10 
              [0,1,0,1,2]])
sps_a = sps.csr_matrix(a)

# get sum of each row:
row_sum = np.add.reduceat(sps_a.data, sps_a.indptr[:-1])

# set values to zero
row_mask = row_sum &gt; 10
nnz_per_row = np.diff(sps_a.indptr)
sps_a.data[np.repeat(row_mask, nnz_per_row)] = 0
# ask scipy.sparse to remove the zeroed entries
sps_a.eliminate_zeros()

&gt;&gt;&gt; sps_a.toarray()
array([[0, 0, 0, 1, 1],
       [1, 2, 0, 0, 0],
       [0, 0, 0, 0, 0],
       [0, 1, 1, 0, 1],
       [0, 0, 0, 0, 0],
       [0, 1, 0, 1, 2]])
&gt;&gt;&gt; sps_a.nnz # it does remove the entries, not simply set them to zero
10
</snippet></ROW><ROW><id>19036501</id><snippet>import re

def rename_file(filename):
  if filename.startswith('EPG') and ' ' in filename:
    # \s+       means 1 or more whitespace characters                                   
    # [0-9]{2}  means exactly 2 characters of 0 through 9                               
    # \.        means find a '.' character                                              
    # [0-9]{4}  means exactly 4 characters of 0 through 9                               
    newfilename = re.sub("\s+[0-9]{2}\.[0-9]{4}", '', filename)
    newfilename = newfilename.replace(" ","_")
    os.rename(filename, newfilename)
</snippet></ROW><ROW><id>19036501</id><snippet># Remove whitespace from files where EPG named with space " " replace with "_"
for filename in os.listdir("."):
    if filename.find("2013|09 ") &gt; 0:
        newfilename = filename.replace(" ","_")
        os.rename(filename, newfilename)
</snippet></ROW><ROW><id>19036501</id><snippet>filename.find("2013|09 ") &gt; 0</snippet></ROW><ROW><id>19036501</id><snippet>In [76]: filename = "EPG CRO 24 Kitchen 09.2013.xsl"
In [77]: filename.find("2013|09 ")
Out[77]: -1
</snippet></ROW><ROW><id>19036501</id><snippet>In [80]: if filename.startswith('EPG') and ' ' in filename:
   ....:     print('process this')
   ....:     
process this
</snippet></ROW><ROW><id>19036723</id><snippet>In [6]: df.to_hdf('foo.h5','BranchFlowsTable',data_columns=True,table=True)

In [24]: with pd.get_store('foo.h5') as store:
    print(store)
   ....:     
&lt;class 'pandas.io.pytables.HDFStore'&gt;
File path: foo.h5
/BranchFlows                 frame_table [0.0.0] (typ-&gt;generic,nrows-&gt;25,ncols-&gt;2,indexers-&gt;[index],dc-&gt;[branch,flow])
/BranchFlowsTable            frame_table  (typ-&gt;appendable,nrows-&gt;25,ncols-&gt;2,indexers-&gt;[index],dc-&gt;[branch,flow])    

In [7]: pd.read_hdf('foo.h5','BranchFlowsTable',where='flow&gt;0.5')
Out[7]: 

   branch      flow
14     14  1.503739
15     15  0.660297
17     17  0.685152
18     18  1.156073
20     20  0.994792
21     21  1.266463
23     23  0.927678
</snippet></ROW><ROW><id>19036799</id><snippet>memory = {}</snippet></ROW><ROW><id>19036849</id><snippet>v_upated = datetime.date(1900, 1, 1) + datetime.timedelta(int(v_updated)-2)</snippet></ROW><ROW><id>19036849</id><snippet>v_updated</snippet></ROW><ROW><id>19036909</id><snippet>&lt;code&gt;</snippet></ROW><ROW><id>19037192</id><snippet>class TopicLabel(models.Model):
    ...
    topics = models.ManyToManyField(Topic, through=TopicLabelConnection)
</snippet></ROW><ROW><id>19037192</id><snippet>getTopics</snippet></ROW><ROW><id>19037192</id><snippet>{% for topic in cur_label.topics.all %}
    &lt;li&gt;{{ topic.title }}&lt;/li&gt;
{% endfor %}
</snippet></ROW><ROW><id>19037192</id><snippet>order_by</snippet></ROW><ROW><id>19037192</id><snippet>getTopics</snippet></ROW><ROW><id>19037192</id><snippet>order</snippet></ROW><ROW><id>19037255</id><snippet>start = 0
end = 0

while start &lt; 2 or end &lt;= start:
    start = int(raw_input("Enter start -&gt; "))
    end = int(raw_input("Enter end -&gt;"))

total = 0
for x in range(start, end+1):
    if x % 2 == 0:
        total += x

print total
</snippet></ROW><ROW><id>19037255</id><snippet>start = 0
end = 0

while start &lt; 2 or end &lt;= start:
    start = int(raw_input("Enter start -&gt; "))
    end = int(raw_input("Enter end -&gt; "))

print sum([x for x in range(start, end+1) if x % 2 == 0])
</snippet></ROW><ROW><id>19037255</id><snippet>end+1</snippet></ROW><ROW><id>19037546</id><snippet>IP</snippet></ROW><ROW><id>19037546</id><snippet>"IP"</snippet></ROW><ROW><id>19037546</id><snippet>pfile.readline()</snippet></ROW><ROW><id>19037546</id><snippet>IP</snippet></ROW><ROW><id>19037546</id><snippet>host = socket.gethostbyaddr(IP.rstrip())
</snippet></ROW><ROW><id>19037546</id><snippet>gethostbyaddr</snippet></ROW><ROW><id>19037745</id><snippet>import numpy
import pickle
import pygame

surface = pygame.Surface((100, 100))
</snippet></ROW><ROW><id>19037745</id><snippet>base = (pickle.load(open("g.pickle"))+1)/2 * 255
base = base[..., numpy.newaxis].repeat(4, -1).astype("uint8")
</snippet></ROW><ROW><id>19037745</id><snippet>numpy_surface = numpy.frombuffer(surface.get_buffer())
numpy_surface[...] = numpy.frombuffer(base)
del numpy_surface
</snippet></ROW><ROW><id>19037745</id><snippet>screen = pygame.display.set_mode((100, 100))
screen.blit(surface, (0, 0))
pygame.display.flip()
</snippet></ROW><ROW><id>19037745</id><snippet>make_surface</snippet></ROW><ROW><id>19037745</id><snippet>import numpy
import pickle
import pygame

base = (pickle.load(open("g.pickle"))+1) * 128
base = base[..., None].repeat(3, -1).astype("uint8")

surface = pygame.surfarray.make_surface(base)

screen = pygame.display.set_mode((100, 100))
screen.blit(surface, (0, 0))
pygame.display.flip()
</snippet></ROW><ROW><id>19037745</id><snippet>base[..., None]</snippet></ROW><ROW><id>19037745</id><snippet>base[..., numpy.newaxis]</snippet></ROW><ROW><id>19037745</id><snippet>numpy</snippet></ROW><ROW><id>19037745</id><snippet>numpy</snippet></ROW><ROW><id>19037745</id><snippet>numpy</snippet></ROW><ROW><id>19037745</id><snippet>IndexError: bytes to write exceed buffer size</snippet></ROW><ROW><id>19037745</id><snippet>numpy</snippet></ROW><ROW><id>19037745</id><snippet>...</snippet></ROW><ROW><id>19037745</id><snippet>[3:2]</snippet></ROW><ROW><id>19037745</id><snippet>[:, 3:2]</snippet></ROW><ROW><id>19037745</id><snippet>[:, :, :, 3:2]</snippet></ROW><ROW><id>19037745</id><snippet>[..., 3:2]</snippet></ROW><ROW><id>19037745</id><snippet>...</snippet></ROW><ROW><id>19037745</id><snippet>None</snippet></ROW><ROW><id>19037745</id><snippet>numpy.newaxis</snippet></ROW><ROW><id>19037745</id><snippet>[a, b, c]</snippet></ROW><ROW><id>19037745</id><snippet>[[a], [b], [c]]</snippet></ROW><ROW><id>19037745</id><snippet>repeat</snippet></ROW><ROW><id>19037745</id><snippet>114, 202, 143, ...
</snippet></ROW><ROW><id>19037745</id><snippet>[114, 114, 114], [202, 202, 202], [143, 143, 143], ...
</snippet></ROW><ROW><id>19037745</id><snippet>[..., None]</snippet></ROW><ROW><id>19037745</id><snippet>[114], [202], [143], ...
</snippet></ROW><ROW><id>19037745</id><snippet>repeat</snippet></ROW><ROW><id>19037745</id><snippet>3</snippet></ROW><ROW><id>19037745</id><snippet>-1</snippet></ROW><ROW><id>19037745</id><snippet>-1</snippet></ROW><ROW><id>19037745</id><snippet>numpy.newaxis</snippet></ROW><ROW><id>19038389</id><snippet>DISPLAY</snippet></ROW><ROW><id>19038389</id><snippet>import os

env = os.environ.copy()
env['DISPLAY'] = ':0.0'

p1 = subprocess.Popen(["python","/home/src/upload.py"] + s[1:3], 
                      env=env, stdout=subprocess.PIPE)
p2 = subprocess.Popen(["python","/home/src/download.py"] + s[1:3], 
                      env=env, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>19038577</id><snippet>app_phone = 5555555555
query_string="""SELECT biz_name, biz_addr, biz_owner
                 FROM business_t
                 WHERE regexp_replace(biz_phone_1, E'\\\\D|^1', '', 'g') = '%(phone)s'
                     OR regexp_replace(biz_phone_2, E'\\\\D|^1', '', 'g') = '%(phone)s'
                     OR regexp_replace(biz_cell_1, E'\\\\D|^1', '', 'g') = '%(phone)s'
                     OR regexp_replace(biz_cell_2, E'\\\\D|^1', '', 'g') = '%(phone)s';
             """
result = run_query(query_string, {'phone': app_phone})
</snippet></ROW><ROW><id>19038577</id><snippet>app_phone = 5555555555
cmp_phones = "regexp_replace(%s, E'\\\\D|^1', '', 'g') = '%%(phone)s'"
db_phone_columns = (biz_phone_1, biz_phone_2, biz_cell_1, biz_cell_2)
where_condition = 'OR'.join(cmp_phones % phone for phone in db_phone_columns)
result = run_query(query_string, {'phone': app_phone}
query_string="""SELECT biz_name, biz_addr, biz_owner
                 FROM business_t
                 WHERE %(where_condition)s;""" % 
             {'where_condition': where_condition}
result = run_query(query_string, {'phone': app_phone})
</snippet></ROW><ROW><id>19038758</id><snippet>x</snippet></ROW><ROW><id>19038758</id><snippet>y</snippet></ROW><ROW><id>19038758</id><snippet>np.cumsum</snippet></ROW><ROW><id>19038758</id><snippet>dates</snippet></ROW><ROW><id>19038758</id><snippet>x</snippet></ROW><ROW><id>19038758</id><snippet>plot_date</snippet></ROW><ROW><id>19038758</id><snippet>plot</snippet></ROW><ROW><id>19038853</id><snippet>import re
myString = re.sub(r'\(.*\)', '', myString)
</snippet></ROW><ROW><id>19038853</id><snippet>myString = re.sub(r'\s*\(\w+\)\s*$', '', myString)
</snippet></ROW><ROW><id>19038862</id><snippet>parts = line.strip().split(':')
record.idNum = int(parts[0])
record.firstName = parts[1]
record.lastName = parts[2]
record.classCode = parts[3]
record.gpa = float(parts[4])
</snippet></ROW><ROW><id>19038862</id><snippet>StudentFileReader.fetchRecord())</snippet></ROW><ROW><id>19038862</id><snippet>class MyStudentFileReader(StudentFileReader):
    def fetchRecord(self):
        line = self._inputFile.readline()
        if not line:
            return None

        record = StudentRecord()

        parts = line.strip().split(':')
        record.idNum = int(parts[0])
        record.firstName = parts[1]
        record.lastName = parts[2]
        record.classCode = parts[3]
        record.gpa = float(parts[4])

        return record
</snippet></ROW><ROW><id>19038862</id><snippet>MyStudentFileReader()</snippet></ROW><ROW><id>19038862</id><snippet>StudentFileReader()</snippet></ROW><ROW><id>19039016</id><snippet>&gt;&gt;&gt; test ="""&lt;b&gt;Header 1&lt;/b&gt;
&lt;br/&gt;
Text 1
&lt;br/&gt;
Text 2
&lt;br/&gt;
Text 3
&lt;br/&gt;
Text 4
&lt;br/&gt;
&lt;b&gt;Header 2&lt;/b&gt;"""
&gt;&gt;&gt; soup = BeautifulSoup(test)

&gt;&gt;&gt; test = soup.find('b')
&gt;&gt;&gt; desired_text = [x.strip() for x in str(test.parent).split('&lt;br /&gt;')]
['&lt;b&gt;Header 1&lt;/b&gt;', 'Text 1', 'Text 2', 'Text 3', 'Text 4', '&lt;b&gt;Header 2&lt;/b&gt;']
</snippet></ROW><ROW><id>19039016</id><snippet>[x.strip() for x in str(test.parent).split('&lt;br /&gt;')]
</snippet></ROW><ROW><id>19039016</id><snippet>&lt;br&gt;</snippet></ROW><ROW><id>19039016</id><snippet>some_list = [item for item in some_iterable]
</snippet></ROW><ROW><id>19039016</id><snippet>x.strip()</snippet></ROW><ROW><id>19039027</id><snippet>if any(x.isupper() for x in password) and \ 
   any(x.islower() for x in password) and \
   any(x.isdigit() for x in password):
    print ("Congratulations, you have a secure password.")
</snippet></ROW><ROW><id>19039074</id><snippet>except</snippet></ROW><ROW><id>19039074</id><snippet>def final(x):
    try:
        print(x*x)

    except:
        print("Error")
        damnit

    finally:
        print("End Function")

def dedent(x):
    try:
        print(x*x)

    except:
        print("Error")
        damnit

    print("End Function")

try:
    final("a")
except Exception as e:
    print("There was an error:", e)
#&gt;&gt;&gt; Error
#&gt;&gt;&gt; End Function
#&gt;&gt;&gt; There was an error: global name 'damnit' is not defined

try:
    dedent("a")
except Exception as e:
    print("There was an error:", e)
#&gt;&gt;&gt; Error
#&gt;&gt;&gt; There was an error: global name 'damnit' is not defined
</snippet></ROW><ROW><id>19039074</id><snippet>return</snippet></ROW><ROW><id>19039074</id><snippet>def final(x):
    try:
        print(x*x)

    except:
        print("Error")
        return "Return inside"

    finally:
        print("End Function")
        return "Return outside"

def dedent(x):
    try:
        print(x*x)

    except:
        print("Error")
        return "Return inside"

    print("End Function")
    return "Return outside"

try:
    final("a")
except Exception as e:
    print("There was an error:", e)
#&gt;&gt;&gt; Error
#&gt;&gt;&gt; End Function
#&gt;&gt;&gt; 'Return outside'

try:
    dedent("a")
except Exception as e:
    print("There was an error:", e)
#&gt;&gt;&gt; Error
#&gt;&gt;&gt; 'Return inside'
</snippet></ROW><ROW><id>19039167</id><snippet>import numpy as np

helper = np.vectorize(lambda x: x.total_seconds())
dt_sec = helper(dt)
</snippet></ROW><ROW><id>19039374</id><snippet>math.log</snippet></ROW><ROW><id>19039374</id><snippet>import math
...
results = (math.log(some_string[1]) * 30)
</snippet></ROW><ROW><id>19039374</id><snippet>from math import log
...
results = (log(some_string[1]) * 30)
</snippet></ROW><ROW><id>19039393</id><snippet>pred</snippet></ROW><ROW><id>19039393</id><snippet>prey</snippet></ROW><ROW><id>19039393</id><snippet>pred = float(input("Enter the predator population : ")) # use pred and prey here
prey = float(input("Enter the prey population :"))

periods = int(input("Enter the number of periods: "))

A=float(input("Enter the value .1: ")) # these should have better prompts
B=float(input("Enter the value .01 : "))
C=float(input("Enter the value .01 : "))
D=float(input("Enter the value .00002: "))

for i in range(periods):
   # update both pred and prey at once (so no temp vars are needed)
   # also, lots of unneeded parentheses were removed
   prey, pred = prey*(1 + A - B*pred), pred*(1 - C + D*prey)

   print("After period {} there are {:.0f} predators, and {:.0f} prey"
         .format(i, pred, prey))
</snippet></ROW><ROW><id>19039442</id><snippet>get_by_natural_key()</snippet></ROW><ROW><id>19039442</id><snippet>{
    "pk": 1,
    "model": "store.book",
    "fields": {
        "name": "Mostly Harmless",
        "author": 42
    }
}
</snippet></ROW><ROW><id>19039442</id><snippet>{
    "pk": 1,
    "model": "store.book",
    "fields": {
        "name": "Mostly Harmless",
        "author": ["Douglas", "Adams"]
    }
}
</snippet></ROW><ROW><id>19039496</id><snippet>\s</snippet></ROW><ROW><id>19039496</id><snippet>eggs</snippet></ROW><ROW><id>19039496</id><snippet>bacon</snippet></ROW><ROW><id>19039496</id><snippet>donkey</snippet></ROW><ROW><id>19039496</id><snippet>dog</snippet></ROW><ROW><id>19039496</id><snippet>\s</snippet></ROW><ROW><id>19039496</id><snippet>|</snippet></ROW><ROW><id>19039496</id><snippet>noun_patt = r'\s(?:{})\s'.format('|'.join(noun_list))
</snippet></ROW><ROW><id>19039496</id><snippet>(?:...)</snippet></ROW><ROW><id>19039496</id><snippet>|</snippet></ROW><ROW><id>19039496</id><snippet>\s</snippet></ROW><ROW><id>19039496</id><snippet>.findall()</snippet></ROW><ROW><id>19039496</id><snippet>&gt;&gt;&gt; text = "Some nouns like eggs egg bacon what a lovely donkey"
&gt;&gt;&gt; import re
&gt;&gt;&gt; text = "Some nouns like eggs egg bacon what a lovely donkey"
&gt;&gt;&gt; noun_list = ['eggs', 'bacon', 'donkey', 'dog']
&gt;&gt;&gt; noun_patt = r'\s(?:{})\s'.format('|'.join(noun_list))
&gt;&gt;&gt; re.findall(noun_patt, text)
[' eggs ', ' bacon ']
</snippet></ROW><ROW><id>19039561</id><snippet>None</snippet></ROW><ROW><id>19039561</id><snippet>run</snippet></ROW><ROW><id>19039561</id><snippet>Queue.Empty</snippet></ROW><ROW><id>19039561</id><snippet>queue.Empty</snippet></ROW><ROW><id>19039561</id><snippet>import threading
import Queue

class Server(threading.Thread):
    def __init__(self, title, q, loop_time = 1.0/60):
        self.title = title
        self.q = q
        self.timeout = loop_time
        super(Server, self).__init__()

    def run(self):
        print "%s started" % self.title
        while True:
            try:
                function, args, kwargs = self.q.get(timeout=self.timeout)
                function(*args, **kwargs)

            except Queue.Empty:
                # print "empty"
                self.idle()

    def idle(self):
        pass
        # put the code you would have put in the `run` loop here 

    # This is the top level function called by other objects
    def reboot(self):
        self.__onThread(self.__reboot)

    def __reboot(self):
        if not hasattr(self, "_down"):
            self._down = threading.Thread(target=self.__powerDown)
            self._down.start()
            up = threading.Thread(target=self.__powerUp)
            up.start()

    def __onThread(self, function, *args, **kwargs):
        self.q.put((function, args, kwargs))

    def __powerDown(self):
        # do something
        print "%s power down" % self.title
        pass

    def __powerUp(self):
        print "%s power up" % self.title

        if not hasattr(self, "_down"):
            return

        self._down.join()
        # do something
        del self._down

class ServerA(Server):
    pass

class ServerB(Server):
    pass

def main():
    serverA = ServerA("A", Queue.Queue())
    serverB = ServerB("B", Queue.Queue())
    serverA.start()
    serverB.start()
    serverA.reboot()
    serverB.reboot()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19039561</id><snippet>A started
B started

B power down
A power down
B power up
A power up
</snippet></ROW><ROW><id>19039873</id><snippet>f_object</snippet></ROW><ROW><id>19039873</id><snippet>import os

filenames = ['a.txt', 'b.txt']
files = [open(f,'w') for f in filenames]
for f_object in files:
    f_object.write("test")

del files[:]
# Nuke the last reference.
del f_object 

for name in filenames:
    os.remove(name)
</snippet></ROW><ROW><id>19039873</id><snippet>del band</snippet></ROW><ROW><id>19039873</id><snippet>import os

def write_to_files(files):
    for f_object in files:
        f_object.write("test")  

filenames = ['a.txt', 'b.txt']
files = [open(f,'w') for f in filenames]
write_to_files(files)

del files[:]

for name in filenames:
    os.remove(name)
</snippet></ROW><ROW><id>19039916</id><snippet>parser.add_argument('--foo',action='store_true')
</snippet></ROW><ROW><id>19039916</id><snippet>Namespace(foo=False)
</snippet></ROW><ROW><id>19039916</id><snippet>Namespace(foo=True)
</snippet></ROW><ROW><id>19039916</id><snippet>parser.add_argument('--foo',action='store_true', default=True)
</snippet></ROW><ROW><id>19039916</id><snippet>foo=True</snippet></ROW><ROW><id>19039916</id><snippet>--foo</snippet></ROW><ROW><id>19039916</id><snippet>foo</snippet></ROW><ROW><id>19039916</id><snippet>True</snippet></ROW><ROW><id>19039916</id><snippet>argparse</snippet></ROW><ROW><id>19040047</id><snippet>super().__init__()</snippet></ROW><ROW><id>19040047</id><snippet>threading.Thread</snippet></ROW><ROW><id>19040047</id><snippet>Thread.__init__()</snippet></ROW><ROW><id>19040074</id><snippet>sigma</snippet></ROW><ROW><id>19040074</id><snippet>sigma</snippet></ROW><ROW><id>19040081</id><snippet>\X</snippet></ROW><ROW><id>19040081</id><snippet>re.sub(r'(Item)', r'- \1', 'A list of things: \nItem1, \nItem2')
</snippet></ROW><ROW><id>19040095</id><snippet>ndb.toplevel</snippet></ROW><ROW><id>19040095</id><snippet>ndb.synctasklet</snippet></ROW><ROW><id>19040095</id><snippet>toplevel</snippet></ROW><ROW><id>19040095</id><snippet>synctasklet</snippet></ROW><ROW><id>19040249</id><snippet>python_dateutil-2.1-py3.3.egg</snippet></ROW><ROW><id>19040249</id><snippet>600</snippet></ROW><ROW><id>19040249</id><snippet>644</snippet></ROW><ROW><id>19040249</id><snippet>600</snippet></ROW><ROW><id>19040249</id><snippet>022</snippet></ROW><ROW><id>19040249</id><snippet>sudo pip install --upgrade python-dateutil</snippet></ROW><ROW><id>19040249</id><snippet>644</snippet></ROW><ROW><id>19040249</id><snippet>sudo   pip install --upgrade python-dateutil
Requirement already up-to-date: python-dateutil in /usr/lib/python3.3/site-packages/python_dateutil-2.1-py3.3.egg
Downloading/unpacking six from https://pypi.python.org/packages/source/s/six/six-1.4.1.tar.gz#md5=bdbb9e12d3336c198695aa4cf3a61d62 (from python-dateutil)
  Downloading six-1.4.1.tar.gz
  Running setup.py egg_info for package six

Installing collected packages: six
  Found existing installation: six 1.3.0
    Uninstalling six:
      Successfully uninstalled six
  Running setup.py install for six

Successfully installed six
Cleaning up...
</snippet></ROW><ROW><id>19040484</id><snippet>shutdown()</snippet></ROW><ROW><id>19040484</id><snippet># return response and shutdown the server
import threading
assassin = threading.Thread(target=server.shutdown)
assassin.daemon = True
assassin.start()
</snippet></ROW><ROW><id>19040863</id><snippet>template</snippet></ROW><ROW><id>19040863</id><snippet>{{course}}</snippet></ROW><ROW><id>19040863</id><snippet>process</snippet></ROW><ROW><id>19040863</id><snippet>def process(self, template, data):
        # ...
        output += template[:start]
        print "Processing, template is currently:"
        print template
        output += self.processVariable(template[start:end+2], data)
        # ...

    return output
</snippet></ROW><ROW><id>19040863</id><snippet>check</snippet></ROW><ROW><id>19040863</id><snippet>if not '}}' in template:
    check = False 
</snippet></ROW><ROW><id>19041118</id><snippet>N = 1</snippet></ROW><ROW><id>19041118</id><snippet>dx = 80.</snippet></ROW><ROW><id>19041118</id><snippet>x = numpy.arange(-40, -40, 80)</snippet></ROW><ROW><id>19041118</id><snippet>0</snippet></ROW><ROW><id>19041118</id><snippet>u</snippet></ROW><ROW><id>19041118</id><snippet>0</snippet></ROW><ROW><id>19041118</id><snippet>fft</snippet></ROW><ROW><id>19041332</id><snippet>a = 0    
b = 1     # this is the first fibonacci number

# First iteration of for loop
c = a + b # c is now 1, the second fibonacci number
a = b     # a is now 1
b = c     # b is now 1

# Second iteration
c = a + b # c is now 2, the third fibonacci number
a = b     # a is now 1
b = c     # b is now 2

# Third iteration
c = a + b # c is now 3, the fourth fibonacci number
a = b     # a is now 2
b = c     # b is now 3

# Fourth iteration
c = a + b # c is now 5, the fifth fibonacci number
a = b     # a is now 3
b = c     # b is now 5

# Remaining 98 iteration omitted
</snippet></ROW><ROW><id>19041332</id><snippet>c</snippet></ROW><ROW><id>19041332</id><snippet>c</snippet></ROW><ROW><id>19041332</id><snippet>range(102)</snippet></ROW><ROW><id>19041332</id><snippet>range(103)</snippet></ROW><ROW><id>19041332</id><snippet>0, 1, 1, 3, 5</snippet></ROW><ROW><id>19041332</id><snippet>range(101)</snippet></ROW><ROW><id>19041332</id><snippet>break</snippet></ROW><ROW><id>19041332</id><snippet>range(5)</snippet></ROW><ROW><id>19041332</id><snippet>[0, 1, 2, 3, 4]</snippet></ROW><ROW><id>19041332</id><snippet>sum = 0

for i in range(5):
  sum = sum + i

print sum
</snippet></ROW><ROW><id>19041404</id><snippet>String.split()</snippet></ROW><ROW><id>19041404</id><snippet>String.strip()</snippet></ROW><ROW><id>19041404</id><snippet>in_text = """City = "Urban Recovery", "Urban Mop-up Operation", "The Oncoming Darkness", "Arks Ship Fire Swirl"
Forest = "Subdue Fang Banther", "With Wind and Rain"
Caves = "Cave", "Volcanic Guerillas"
Desert = "Desert Guerillas"
Tundra =
Skyland = "Rampaging Malice", "Chrome"
Tunnels = "Mega Mecha awakening"
Ruins = 
Coast = "Beach Wars!"
Quarry = 
Space = "Profound Darkness' Kin: Elder", "Raging Dark Arms", "Approaching Dark Arms", "Utterly Profound", "Falz", "Dark Falz"
Event = "Merry Christmas on Ice", "Trick or Treat", "A Boisterous White Day", "Where's the Chocolate" """

for line in in_text.split("\n"):
    key,vals = line.split("=")
    key = key.strip()
    vals = [x.strip() for x in vals.split(",")]
    print key," : ",vals
</snippet></ROW><ROW><id>19041404</id><snippet>City  :  ['"Urban Recovery"', '"Urban Mop-up Operation"', '"The Oncoming Darkness"', '"Arks Ship Fire Swirl"']
Forest  :  ['"Subdue Fang Banther"', '"With Wind and Rain"']
Caves  :  ['"Cave"', '"Volcanic Guerillas"']
Desert  :  ['"Desert Guerillas"']
Tundra  :  ['']
Skyland  :  ['"Rampaging Malice"', '"Chrome"']
Tunnels  :  ['"Mega Mecha awakening"']
Ruins  :  ['']
Coast  :  ['"Beach Wars!"']
Quarry  :  ['']
Space  :  ['"Profound Darkness\' Kin: Elder"', '"Raging Dark Arms"', '"Approaching Dark Arms"', '"Utterly Profound"', '"Falz"', '"Dark Falz"']
Event  :  ['"Merry Christmas on Ice"', '"Trick or Treat"', '"A Boisterous White Day"', '"Where\'s the Chocolate"']
</snippet></ROW><ROW><id>19041547</id><snippet>data = "Maybe Example $00.00 test $00.00 bla $00.00 dasdsadasd"
pull1 = re.search(r'(Example) (\D\w+\D\w+)', data)
pull2 = re.search(r'(bla) (\D\w+\D\w+)', data)

print pull1.group(0)
print pull2.group(0)
</snippet></ROW><ROW><id>19041797</id><snippet>w</snippet></ROW><ROW><id>19041797</id><snippet>x</snippet></ROW><ROW><id>19041797</id><snippet>y</snippet></ROW><ROW><id>19041797</id><snippet>w</snippet></ROW><ROW><id>19041797</id><snippet>[1,10]</snippet></ROW><ROW><id>19041797</id><snippet>x</snippet></ROW><ROW><id>19041797</id><snippet>y</snippet></ROW><ROW><id>19041797</id><snippet>w</snippet></ROW><ROW><id>19041797</id><snippet>x</snippet></ROW><ROW><id>19041797</id><snippet>y</snippet></ROW><ROW><id>19041797</id><snippet>x</snippet></ROW><ROW><id>19041797</id><snippet>y</snippet></ROW><ROW><id>19042324</id><snippet>def my_order(value):
    return (value[0], int(value[1:]))
</snippet></ROW><ROW><id>19042324</id><snippet>listQuery.sort(key=my_order)
</snippet></ROW><ROW><id>19042324</id><snippet>my_order</snippet></ROW><ROW><id>19042324</id><snippet>('A', 2)</snippet></ROW><ROW><id>19042324</id><snippet>('A', 11)</snippet></ROW><ROW><id>19042324</id><snippet>'A'</snippet></ROW><ROW><id>19042324</id><snippet>2</snippet></ROW><ROW><id>19042324</id><snippet>11</snippet></ROW><ROW><id>19042442</id><snippet>class TestCGI(object, XLS):
    def w_cell(self, r, c, val, style=None):
        if style is not None:
            style=XLS.get_cell_stlye(self)
        self.sht.write(r, c, val, style)
</snippet></ROW><ROW><id>19042486</id><snippet>str.rsplit</snippet></ROW><ROW><id>19042486</id><snippet>str.rsplit</snippet></ROW><ROW><id>19042486</id><snippet>&gt;&gt;&gt; 'foo bar spam'.rsplit(None, 1)
['foo bar', 'spam']
</snippet></ROW><ROW><id>19042486</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; lis = ['Name', 'Allen Doe', 'Jane Doe', 'Larry Hackman']
&gt;&gt;&gt; Counter(y[-1][1] for y in (x.rsplit(None, 1) for x in lis) if len(y)&gt;1)
Counter({'o': 2, 'a': 1})
</snippet></ROW><ROW><id>19042490</id><snippet>list_of_tuples = [ ('one', {'a':'b'}), ('one', {'c':'b'}), ('two', {'a':'b'}), ('two', {'d':'e'}), ('three', {'d':'e'}) ]
</snippet></ROW><ROW><id>19042490</id><snippet>connections = {}
for elem in list_of_tuples:
    new_key = (list(elem[1].keys())[0], list(elem[1].values())[0])
    if (new_key in connections):
       connections[new_key].append(elem)
    else:
       connections[new_key] = [elem]

list_of_connections = []
for k, v in connections.items():
    list_of_connections.append(v)

print(list_of_connections)
</snippet></ROW><ROW><id>19042490</id><snippet>[[('one', {'a': 'b'}), ('two', {'a': 'b'})], [('one', {'c': 'b'})], [('two', {'d': 'e'}), ('three', {'d': 'e'})]]
</snippet></ROW><ROW><id>19042526</id><snippet>"</snippet></ROW><ROW><id>19042526</id><snippet>with open('tmp', 'w') as fout:
    writer = csv.writer(fout, quotechar="'")
</snippet></ROW><ROW><id>19042526</id><snippet>csv.reader</snippet></ROW><ROW><id>19042526</id><snippet>json</snippet></ROW><ROW><id>19042569</id><snippet>cx_Oracle</snippet></ROW><ROW><id>19042569</id><snippet># Install --&gt; You should have oracle installed otherwise exception will be raised

pip install cx_Oracle

import cx_Oracle

con = cx_Oracle.connect('pythonhol/welcome@127.0.0.1/orcl')
print con.version

con.close()
</snippet></ROW><ROW><id>19042578</id><snippet>fmin_l_bfgd_b</snippet></ROW><ROW><id>19042578</id><snippet>\scipy\optimize\_lbfgsb.pyd</snippet></ROW><ROW><id>19042578</id><snippet>double precision</snippet></ROW><ROW><id>19042578</id><snippet>float64</snippet></ROW><ROW><id>19042578</id><snippet>single precision</snippet></ROW><ROW><id>19042578</id><snippet>cobyla</snippet></ROW><ROW><id>19042583</id><snippet>foo</snippet></ROW><ROW><id>19042583</id><snippet>Foo</snippet></ROW><ROW><id>19042583</id><snippet>self.__baz</snippet></ROW><ROW><id>19042583</id><snippet>self._Foo__baz</snippet></ROW><ROW><id>19042583</id><snippet>Foo</snippet></ROW><ROW><id>19042583</id><snippet>__baz</snippet></ROW><ROW><id>19042583</id><snippet>_Foo__baz</snippet></ROW><ROW><id>19042583</id><snippet>_Bar__baz</snippet></ROW><ROW><id>19042583</id><snippet>self.__baz</snippet></ROW><ROW><id>19042583</id><snippet>Bar</snippet></ROW><ROW><id>19042583</id><snippet>Foo.__init__(self)</snippet></ROW><ROW><id>19042583</id><snippet>Baz.__init__</snippet></ROW><ROW><id>19042583</id><snippet>super</snippet></ROW><ROW><id>19042583</id><snippet>Foo.__init__</snippet></ROW><ROW><id>19042583</id><snippet>__baz</snippet></ROW><ROW><id>19042583</id><snippet>_Foo__baz</snippet></ROW><ROW><id>19042663</id><snippet>fd = file('C:/'+filename, 'rb')
merger.append(PdfFileReader(fd))
fd.close()
os.remove('C:/'+filename)
</snippet></ROW><ROW><id>19042663</id><snippet>fd = None
try:
    fd = file('C:/'+filename, 'rb')
    merger.append(PdfFileReader(fd))
finally:
    if fd: fd.close()
if os.path.exists('C:/'+filename): os.remove('C:/'+filename)
</snippet></ROW><ROW><id>19042663</id><snippet>with file('C:/'+filename, 'rb') as fd:
    merger.append(PdfFileReader(fd))
if os.path.exists('C:/'+filename): os.remove('C:/'+filename)
</snippet></ROW><ROW><id>19042901</id><snippet>c:\&gt;powershell -command "c:\genrateDataForPython.ps1 -output c:\data.txt"
c:\&gt;type c:\data.txt | python .\myscript.py
</snippet></ROW><ROW><id>19042901</id><snippet># Convert some accent chars to base64
$s  = [Text.Encoding]::UTF8.GetBytes("éêèë")
[System.Convert]::ToBase64String($s)
# Output:
w6nDqsOow6s=

# Decode:
$d  = [System.Convert]::FromBase64String("w6nDqsOow6s=")
[Text.Encoding]::UTF8.GetString($d)
# Output
éêèë
</snippet></ROW><ROW><id>19043575</id><snippet>import configparser

conf = configparser.ConfigParser()

conf.read('FILE.INI')
</snippet></ROW><ROW><id>19043575</id><snippet>conf['Person1']['name']
</snippet></ROW><ROW><id>19043575</id><snippet>with open('FILE.INI', 'w') as inifile:

    conf.write(inifile)
</snippet></ROW><ROW><id>19043718</id><snippet>python</snippet></ROW><ROW><id>19043718</id><snippet>-</snippet></ROW><ROW><id>19043718</id><snippet>-</snippet></ROW><ROW><id>19043718</id><snippet>$ curl https://remote.path/script.py | python - arg1 arg2 arg3
</snippet></ROW><ROW><id>19043901</id><snippet>with</snippet></ROW><ROW><id>19043901</id><snippet>import os

if (os.path.exists('/root/testing/test123.txt')):
        readfile = open('/root/testing/test123.txt', 'r')
        teststr = readfile.readline()
        print teststr #or 'return' if you want that
</snippet></ROW><ROW><id>19044029</id><snippet>in</snippet></ROW><ROW><id>19044029</id><snippet>sql = 'select * from tbl where params1=:params1 and params2=:params2 and params3 in ({})'.format(
    ', '.join(['params3_' + str(i) for i in range(len(params3_value))])
</snippet></ROW><ROW><id>19044029</id><snippet>params3_value</snippet></ROW><ROW><id>19044029</id><snippet>params3</snippet></ROW><ROW><id>19044029</id><snippet>params3_value</snippet></ROW><ROW><id>19044029</id><snippet>['v1', 'v2', 'v3']</snippet></ROW><ROW><id>19044029</id><snippet>select * from tbl where params1=:params1 and params2=:params2 and params3 in (:params3_0, :params3_1, :params3_2)
</snippet></ROW><ROW><id>19044029</id><snippet>cursor.execute()</snippet></ROW><ROW><id>19044029</id><snippet>params = {'params1': params1_value, 'params2': params2_value}
for i, val in enumerate(params3_value):
    params['params3_' + str(i)] = value
cursor.execute(sql, {params})
</snippet></ROW><ROW><id>19044029</id><snippet>:name</snippet></ROW><ROW><id>19044029</id><snippet>cx_Oracle</snippet></ROW><ROW><id>19044029</id><snippet>:named</snippet></ROW><ROW><id>19044029</id><snippet>params3_value</snippet></ROW><ROW><id>19044195</id><snippet>if-elif</snippet></ROW><ROW><id>19044195</id><snippet>comb</snippet></ROW><ROW><id>19044195</id><snippet>CC_match</snippet></ROW><ROW><id>19044195</id><snippet>head = list(comb[0:-1])
head.append(CC_match)
head.append(comb[-1])
perm_list.append(', '.join(head))
</snippet></ROW><ROW><id>19044195</id><snippet>for</snippet></ROW><ROW><id>19044195</id><snippet>if-elif</snippet></ROW><ROW><id>19044195</id><snippet>for comb in itertools.permutations(nouns2):
    head = list(comb[0:-1])
    head.append(CC_match)
    head.append(comb[-1])
    perm_list.append(', '.join(head))
</snippet></ROW><ROW><id>19044195</id><snippet>comb</snippet></ROW><ROW><id>19044233</id><snippet>status[0]</snippet></ROW><ROW><id>19044233</id><snippet>status[1]</snippet></ROW><ROW><id>19044233</id><snippet>status.append([])</snippet></ROW><ROW><id>19044238</id><snippet>for loop</snippet></ROW><ROW><id>19044238</id><snippet>while loop</snippet></ROW><ROW><id>19044238</id><snippet>number_attempts</snippet></ROW><ROW><id>19044238</id><snippet>id=phone_number.id</snippet></ROW><ROW><id>19044238</id><snippet>Store(...)</snippet></ROW><ROW><id>19044238</id><snippet>id</snippet></ROW><ROW><id>19044238</id><snippet>Pool.objects.filter(phone_number=phone_number).count()</snippet></ROW><ROW><id>19044238</id><snippet>store = Pool(phone_number = phone_number.phone_number,
             un_answered=x, answered=0)
</snippet></ROW><ROW><id>19044238</id><snippet>Pool.objects.filter(phone_number=phone_number).count()</snippet></ROW><ROW><id>19044238</id><snippet>.count()</snippet></ROW><ROW><id>19044238</id><snippet>number_attempts = Pool.objects.filter(phone_number=phone_number).count()
</snippet></ROW><ROW><id>19044238</id><snippet>try:
    store = Pool.objects.get(phone_number=phone_number)
    number_attempts = store.un_answered

# FIX : the original code used a bare except clause.
# Bare except clauses are EVIL. DONT use bare except clauses. NEVER.
# Or thou shall burn in the flames of hell for your eternal death....

except Pool.DoesNotExist:
    store = Pool(phone_number = phone_number.phone_number,
                 un_answered=1, answered=0)
    store.save()
    number_attempts = 1

...
if pool_list:
        if number_attempts &gt; 3:
            return number_attempts

        else:
            x = number_attempts
            x += 1 
            print x 'returns 2'
            store.un_answered = x
            store.save()
</snippet></ROW><ROW><id>19044630</id><snippet>f[0:5:-1]</snippet></ROW><ROW><id>19044630</id><snippet>f[5:0:-1]</snippet></ROW><ROW><id>19044630</id><snippet>"raboo"</snippet></ROW><ROW><id>19044630</id><snippet>f</snippet></ROW><ROW><id>19044630</id><snippet>f[5::-1]</snippet></ROW><ROW><id>19044630</id><snippet>"raboof"</snippet></ROW><ROW><id>19044630</id><snippet>start</snippet></ROW><ROW><id>19044630</id><snippet>stop</snippet></ROW><ROW><id>19044630</id><snippet>start</snippet></ROW><ROW><id>19044630</id><snippet>stop</snippet></ROW><ROW><id>19044788</id><snippet>itertoolsmodule.c</snippet></ROW><ROW><id>19044788</id><snippet>islice</snippet></ROW><ROW><id>19044788</id><snippet>itertools.islice()</snippet></ROW><ROW><id>19044788</id><snippet>islice_new</snippet></ROW><ROW><id>19044788</id><snippet>next</snippet></ROW><ROW><id>19044788</id><snippet>int(rowStart)</snippet></ROW><ROW><id>19044788</id><snippet>stop</snippet></ROW><ROW><id>19044788</id><snippet>int(rowFinish+1)</snippet></ROW><ROW><id>19044788</id><snippet>step</snippet></ROW><ROW><id>19044788</id><snippet>None</snippet></ROW><ROW><id>19044788</id><snippet>it</snippet></ROW><ROW><id>19044788</id><snippet>iter(spamreader)</snippet></ROW><ROW><id>19044788</id><snippet>cnt</snippet></ROW><ROW><id>19044788</id><snippet>0</snippet></ROW><ROW><id>19044788</id><snippet>islice_next()</snippet></ROW><ROW><id>19044788</id><snippet>it</snippet></ROW><ROW><id>19044788</id><snippet>cnt</snippet></ROW><ROW><id>19044788</id><snippet>next(it)</snippet></ROW><ROW><id>19044788</id><snippet>cnt</snippet></ROW><ROW><id>19044788</id><snippet>next</snippet></ROW><ROW><id>19044788</id><snippet>islice_next()</snippet></ROW><ROW><id>19044788</id><snippet>cnt</snippet></ROW><ROW><id>19044788</id><snippet>next</snippet></ROW><ROW><id>19044788</id><snippet>stop</snippet></ROW><ROW><id>19044893</id><snippet>Run/Run Configurations/Common</snippet></ROW><ROW><id>19044893</id><snippet>print "ö"</snippet></ROW><ROW><id>19044893</id><snippet>"ö"</snippet></ROW><ROW><id>19044963</id><snippet>def driverGrey():
    pic=makePicture(pickAFile())
    # 1. call a function named 'pickAFile' which I assume returne a file or filename
    # 2. pass the file or filename to the function named 'makePicture' which obviously
    #    returns a 'picture' object (for whatever definition of a 'picture object')
    # 3. binds the 'picture object' to the local name 'pic'

    (snip...)

    makeGreyscaleThenNegate(pic)
    # 1. pass the picture object to the function named 'makeGreyscaleThenNegate'.
    #
    #    At that time we enter the body of the 'makeGreyscaleThenNegate' function, 
    #    in which the object known as 'pic' here will be bound to the local 
    #    name 'picture' - IOW at that point we have two names ('pic' and 'picture')
    #    in two different namespaces ('driverGrey' local namespace and
    #    'makeGreyscaleThenNegate' local namespace) referencing the same object.
    #
    # 2. 'makeGreyscaleThenNegate' modifies the object. 
    #
    # 3. when 'makeGreyscaleThenNegate' returns, it's local namespace is destroyed
    #    so we only have the local 'pic' name referencing the picture object,
    #    and the control flow comes back here.

    (snip...)
</snippet></ROW><ROW><id>19045005</id><snippet>$ psql -h localhost dbname &lt; dump_file
</snippet></ROW><ROW><id>19045005</id><snippet>('python manage.py migrate --no-initial-data')
('python manage.py syncdb')
</snippet></ROW><ROW><id>19045549</id><snippet>QtGui.QFileDialog.getOpenFileName(None,"Load File","","Text (*.txt);;All Files (*)")
</snippet></ROW><ROW><id>19045618</id><snippet>sum</snippet></ROW><ROW><id>19045618</id><snippet>from django.db.models import Sum
total_credit = Employees.objects.all(). \
               aggregate(total_credit=Sum('credit'))['total_credit']

return render_to_response('templatename.html', 
                          {'total_credit': total_credit}, 
                          context_instance=RequestContext(request))
</snippet></ROW><ROW><id>19046253</id><snippet>repr(val)</snippet></ROW><ROW><id>19046253</id><snippet>u'"1"'</snippet></ROW><ROW><id>19046253</id><snippet>1</snippet></ROW><ROW><id>19046253</id><snippet>"1"</snippet></ROW><ROW><id>19046253</id><snippet>int(val.strip('"'))
</snippet></ROW><ROW><id>19046257</id><snippet>.rowcount</snippet></ROW><ROW><id>19046257</id><snippet>cursor.execute("""INSERT INTO `User`(`UID`, `IP`) VALUES(%s,%s);""", params)
print("affected rows = {}".format(cursor.rowcount))
</snippet></ROW><ROW><id>19046264</id><snippet>x-int(x)</snippet></ROW><ROW><id>19046264</id><snippet>random.random() &lt; x-int(x)</snippet></ROW><ROW><id>19046264</id><snippet>import random
import math
import numpy as np

def prob_round(x):
    sign = np.sign(x)
    x = abs(x)
    is_up = random.random() &lt; x-int(x)
    round_func = math.ceil if is_up else math.floor
    return sign * round_func(x)

x = 6.1
sum( prob_round(x) for i in range(100) ) / 100.
=&gt; 6.12
</snippet></ROW><ROW><id>19046264</id><snippet>prec</snippet></ROW><ROW><id>19046264</id><snippet>def prob_round(x, prec = 0):
    fixup = np.sign(x) * 10**prec
    x *= fixup
    is_up = random.random() &lt; x-int(x)
    round_func = math.ceil if is_up else math.floor
    return round_func(x) / fixup

x = 8.33333333
[ prob_round(x, prec = 2) for i in range(10) ]
=&gt; [8.3399999999999999,
 8.3300000000000001,
 8.3399999999999999,
 8.3300000000000001,
 8.3300000000000001,
 8.3300000000000001,
 8.3300000000000001,
 8.3300000000000001,
 8.3399999999999999,
 8.3399999999999999]
</snippet></ROW><ROW><id>19046414</id><snippet>zip</snippet></ROW><ROW><id>19046414</id><snippet>map</snippet></ROW><ROW><id>19046414</id><snippet>None</snippet></ROW><ROW><id>19046414</id><snippet>&gt;&gt;&gt; zip([1,2,3], [4,5,6], [7,8,9])
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
&gt;&gt;&gt; map(None, [1,2,3], [4,5,6], [7,8,9])
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
</snippet></ROW><ROW><id>19046414</id><snippet>def iDictOfListsToDicts(d):
    keys = list(d)
    for vs in zip(*d.values()):
        yield dict(zip(keys, vs))
</snippet></ROW><ROW><id>19046414</id><snippet>&gt;&gt;&gt; d = {
...     "a": [1, 2, 3],
...     "b": [4, 5, 6],
...     "c": [7, 8, 9],
... }
&gt;&gt;&gt; for i in iDictOfListsToDicts(d):
...     print i
... 
{'a': 1, 'c': 7, 'b': 4}
{'a': 2, 'c': 8, 'b': 5}
{'a': 3, 'c': 9, 'b': 6}
</snippet></ROW><ROW><id>19046422</id><snippet>itertools.product()</snippet></ROW><ROW><id>19046422</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; A = [('a', 'b'), ('c', 'd'), ('e', 'f')]
&gt;&gt;&gt; for perm in product(*((l, l[::-1]) for l in A)):
...     print perm
... 
(('a', 'b'), ('c', 'd'), ('e', 'f'))
(('a', 'b'), ('c', 'd'), ('f', 'e'))
(('a', 'b'), ('d', 'c'), ('e', 'f'))
(('a', 'b'), ('d', 'c'), ('f', 'e'))
(('b', 'a'), ('c', 'd'), ('e', 'f'))
(('b', 'a'), ('c', 'd'), ('f', 'e'))
(('b', 'a'), ('d', 'c'), ('e', 'f'))
(('b', 'a'), ('d', 'c'), ('f', 'e'))
</snippet></ROW><ROW><id>19046422</id><snippet>((l, l[::-1]) for l in A)</snippet></ROW><ROW><id>19046422</id><snippet>product()</snippet></ROW><ROW><id>19046422</id><snippet>A</snippet></ROW><ROW><id>19046422</id><snippet>&gt;&gt;&gt; [(l, l[::-1]) for l in A]
[(('a', 'b'), ('b', 'a')), (('c', 'd'), ('d', 'c')), (('e', 'f'), ('f', 'e'))]
</snippet></ROW><ROW><id>19046452</id><snippet>.*</snippet></ROW><ROW><id>19046452</id><snippet>(?!txt)</snippet></ROW><ROW><id>19046452</id><snippet>.*</snippet></ROW><ROW><id>19046452</id><snippet>.*\.txt$</snippet></ROW><ROW><id>19046457</id><snippet>import os
find_str = "ERROR"
error = False
# Open file with 'b' to specify binary mode
file = open(file_directory, 'rb')
file.seek(-1024 * 1024, os.SEEK_END)  # Note minus sign
if find_str in file.read():
    error = True
# file.close()
</snippet></ROW><ROW><id>19046457</id><snippet>seek()</snippet></ROW><ROW><id>19046457</id><snippet>io.UnsupportedOperation</snippet></ROW><ROW><id>19046457</id><snippet>SEEK_*</snippet></ROW><ROW><id>19046457</id><snippet>os</snippet></ROW><ROW><id>19046818</id><snippet>libgdal1</snippet></ROW><ROW><id>19046818</id><snippet>--with-python</snippet></ROW><ROW><id>19046955</id><snippet>calcoo</snippet></ROW><ROW><id>19046955</id><snippet>sys.argv</snippet></ROW><ROW><id>19046955</id><snippet>__main__</snippet></ROW><ROW><id>19046955</id><snippet>class Calculator():
    def sumatory(self):                                   
        return float(operator1) + float(operator2)
    def substract(self):
        return float(operator1) - float(operator2)

if __name__ == '__main__':
    import sys
    operator1= sys.argv[1]
    operation= sys.argv[2]
    operator2= sys.argv[3]
    try:
        operator1 = float(sys.argv[1]) 
        operator2 = float(sys.argv[3])
    except ValueError:
        sys.exit("Error: Non numerical Parameters")

    if operation == "sum":
        print Calculator().sumatory()
    elif operation == "substract":
         print Calculator().substract()
    else:
        print "Error, operation not supported."
</snippet></ROW><ROW><id>19046955</id><snippet>calcoo</snippet></ROW><ROW><id>19046955</id><snippet>Calculator</snippet></ROW><ROW><id>19047010</id><snippet>contourf</snippet></ROW><ROW><id>19047010</id><snippet>latlon</snippet></ROW><ROW><id>19047010</id><snippet>datain = msk_array

fig = plt.figure(figsize=(12,5))
map = Basemap(projection='robin',resolution='c',lat_0=0,lon_0=0)

ny, nx = datain.shape

xin = np.linspace(map.xmin,map.xmax,nx) # nx is the number of x points on the grid
yin = np.linspace(map.ymin,map.ymax,ny) # ny in the number of y points on the grid

lons = np.arange(-180,180,0.25) #from raster.GetGeoTransform()
lats  = np.arange(90,-90,-0.25) 

lons, lats = np.meshgrid(lons,lats)

xx, yy = m(lons,lats)

levels = [-1000,-800,-600,-400,-200,0,200,400,600,800,1000]
cntr = map.contourf(xx, yy,datain, levels,cmap=cm.RdBu)

cbar = map.colorbar(cntr,location='bottom',pad='15%')

# Add some more info to the map
cstl = map.drawcoastlines(linewidth=.5)
meri = map.drawmeridians(np.arange(0,360,60), linewidth=.2, labels=[1,0,0,1], labelstyle='+/-', color='grey' ) 
para = map.drawparallels(np.arange(-90,90,30), linewidth=.2, labels=[1,0,0,1], labelstyle='+/-', color='grey')
boun = map.drawmapboundary(linewidth=0.5, color='grey')
</snippet></ROW><ROW><id>19047010</id><snippet>lats</snippet></ROW><ROW><id>19047026</id><snippet>savefig</snippet></ROW><ROW><id>19047026</id><snippet>show</snippet></ROW><ROW><id>19047173</id><snippet>sys.exit()</snippet></ROW><ROW><id>19047173</id><snippet>SystemExit</snippet></ROW><ROW><id>19047173</id><snippet>ValueError</snippet></ROW><ROW><id>19047173</id><snippet>sys.excepthook()</snippet></ROW><ROW><id>19047173</id><snippet>stderr</snippet></ROW><ROW><id>19047173</id><snippet>sys.excepthook()</snippet></ROW><ROW><id>19047173</id><snippet>SystemExit</snippet></ROW><ROW><id>19047173</id><snippet>ValueError</snippet></ROW><ROW><id>19047285</id><snippet>bottom</snippet></ROW><ROW><id>19047285</id><snippet>plt.bar</snippet></ROW><ROW><id>19047285</id><snippet>0</snippet></ROW><ROW><id>19047285</id><snippet>bottom=None</snippet></ROW><ROW><id>19047285</id><snippet>bottom</snippet></ROW><ROW><id>19047285</id><snippet>bottom</snippet></ROW><ROW><id>19047285</id><snippet>import numpy as np
import matplotlib.pyplot as plt
x = np.arange(10)
plt.bar(x, 4**x, bottom=0, log=True)
plt.show()
</snippet></ROW><ROW><id>19047385</id><snippet>global</snippet></ROW><ROW><id>19047385</id><snippet>def global_paths():
    global RUN_PATH
    global BASE_PATH
    global EXE_SUFIX
    global SPEC_PATH
    global cmd_list

    RUN_PATH  = "/run/run_base_ref_amd64-m64-gcc43-nn.0000/"
    BASE_PATH = "/SPECcpu2006/1.1/cdrom"
    EXE_SUFIX = "_base.amd64-m64-gcc43-nn"
    SPEC_PATH = BASE_PATH + "/benchspec/CPU2006/"
    cmd_list  = {}
</snippet></ROW><ROW><id>19047409</id><snippet>RedirectMiddleware</snippet></ROW><ROW><id>19047409</id><snippet>MetaRefreshMiddleware</snippet></ROW><ROW><id>19047422</id><snippet>extend()</snippet></ROW><ROW><id>19047422</id><snippet>append()</snippet></ROW><ROW><id>19047422</id><snippet>+=</snippet></ROW><ROW><id>19047422</id><snippet>with open(r'D:\Files\input.csv') as f:
    input_data = []
    for row in csv.reader(f, delimiter=',', quoting=csv.QUOTE_NONE):
        input_data += row
</snippet></ROW><ROW><id>19047640</id><snippet>A = [x for x in itertools.product([0, 1], repeat=n) if sum(x)*2&lt;=n]
</snippet></ROW><ROW><id>19047640</id><snippet>A = list(itertools.ifilter(
          lambda x:sum(x)*2&lt;=n, 
          itertools.product([0, 1], repeat=n)))
</snippet></ROW><ROW><id>19047908</id><snippet>content</snippet></ROW><ROW><id>19047908</id><snippet>urlsort</snippet></ROW><ROW><id>19047908</id><snippet>print "".join(page1.readlines))</snippet></ROW><ROW><id>19048554</id><snippet>req.subprocess_env['QUERY_STRING']
</snippet></ROW><ROW><id>19048554</id><snippet>d.get('dt', [None])[0]
</snippet></ROW><ROW><id>19048554</id><snippet>d.get('dt', [''])[0]
</snippet></ROW><ROW><id>19048754</id><snippet>python setup.py install</snippet></ROW><ROW><id>19048754</id><snippet>python setup.py develop</snippet></ROW><ROW><id>19048756</id><snippet>class CustomStreamListener(tweepy.StreamListener):

def check_coords(self, status):
    if status.coordinates is not None:
        lat = status.coordinates['coordinates'][1]
        lng = status.coordinates['coordinates'][0]        
        return 49.7 &lt; lat &lt; 58.5 and -6 &lt; lng &lt; 2.1

def on_status(self, status):


    if self.check_coords(status):
        # if check_coords returns true, the following will run
        try:
            print "'tweet text'%s\n\ 'User Name't%s\n\  'Created at't%s\n\  'Created with't%s\n\ 'geo't%s\ 'coordinates't%s" % (status.text, 
                              status.author.screen_name, 
                              status.created_at, 
                              status.source,
                              status.geo,
                              status.coordinates)
        except Exception, e:
            print &gt;&gt; sys.stderr, 'Encountered Exception:', e
            pass

def on_error(self, status_code):
    print &gt;&gt; sys.stderr, 'Encountered error with status code:', status_code
    return True # Don't kill the stream

def on_timeout(self):
    print &gt;&gt; sys.stderr, 'Timeout...'
    return True # Don't kill the stream


streaming_api = tweepy.streaming.Stream(auth, CustomStreamListener(), timeout=60)


print &gt;&gt; sys.stderr, 'Filtering the public timeline for "%s"' % (' '.join(sys.argv[1:]),)
"""For track=[""], put in words to search for. Commas separate individual terms IE"Applejack, Discord",
to search for tweets containing more than one term, separate keywords with a space. IE "Rarity Diamonds" """
streaming_api.filter(follow=None, track=["Rarity Diamonds,Applejack,Discord"])
</snippet></ROW><ROW><id>19048761</id><snippet>$ yolk --show-updates
 Paste 1.7.2 (1.7.5.1)
 PasteDeploy 1.3.3 (1.5.0)
 PasteScript 1.7.3 (1.7.5)
 coverage 3.4 (3.6)
…
</snippet></ROW><ROW><id>19048761</id><snippet>requirements.txt</snippet></ROW><ROW><id>19048761</id><snippet>pip install -r</snippet></ROW><ROW><id>19048761</id><snippet>pylint</snippet></ROW><ROW><id>19049688</id><snippet>for char in lowercase_text:    
    if char == 'e':
        e_counter = e_counter + 1
    else:
        char_counter = char_counter + 1
</snippet></ROW><ROW><id>19049688</id><snippet>for char in lowercase_text:    
    # Check if we have an alphanumeric string and continue the loop if not
    if not char.isalpha():
        continue
    # Increment the total character counter
    char_counter += 1
    # Additionaly, increment the 'e' counter if we have an 'e'
    if char == 'e':
        e_counter += 1
</snippet></ROW><ROW><id>19049837</id><snippet>reg=conn.fetchall()
</snippet></ROW><ROW><id>19049837</id><snippet>for reg in conn.next_proc_resultset():
  pass
</snippet></ROW><ROW><id>19049884</id><snippet>name</snippet></ROW><ROW><id>19049884</id><snippet>names = Person.objects.values_list('name', flat=True)
</snippet></ROW><ROW><id>19049884</id><snippet>people = [{'name':'Tom', 'uid':'asdlfkj223'}, {'name':'Jerry', 'uid':'alksd32'},]
</snippet></ROW><ROW><id>19049884</id><snippet>names = [person['name'] for person in people]
</snippet></ROW><ROW><id>19049884</id><snippet>dict</snippet></ROW><ROW><id>19050149</id><snippet>django-admin.py makemessages -l de
</snippet></ROW><ROW><id>19050279</id><snippet>add_widget</snippet></ROW><ROW><id>19050279</id><snippet>children property</snippet></ROW><ROW><id>19050279</id><snippet>Widget</snippet></ROW><ROW><id>19050279</id><snippet>Layout</snippet></ROW><ROW><id>19050279</id><snippet>Widget</snippet></ROW><ROW><id>19050279</id><snippet>Widget</snippet></ROW><ROW><id>19050279</id><snippet>FloatLayout</snippet></ROW><ROW><id>19050279</id><snippet>Widget</snippet></ROW><ROW><id>19050322</id><snippet># Translation util
def t(string_number):
    plugin       = xbmcaddon.Addon("plugin.video.jworg")
    return plugin.getLocalizedString(string_number)

if language == "":
    language = t(30009)
</snippet></ROW><ROW><id>19050473</id><snippet>def __init__(self):
    for parent_klass in inspect.getmro(self.__class__):
        _d.update(getattr(parent_klass, 'd', {}))
    _d.update(self.d)
    self.d = _d
</snippet></ROW><ROW><id>19050502</id><snippet>sudo yum install python-devel
</snippet></ROW><ROW><id>19050770</id><snippet>nondefault subnet</snippet></ROW><ROW><id>19050770</id><snippet>subnet_id</snippet></ROW><ROW><id>19050770</id><snippet>groups</snippet></ROW><ROW><id>19050770</id><snippet>NetworkInterfaceSpecification</snippet></ROW><ROW><id>19050770</id><snippet>run_instance</snippet></ROW><ROW><id>19050770</id><snippet>import time
import boto
import boto.ec2.networkinterface

from settings.settings import AWS_ACCESS_GENERIC

ec2 = boto.connect_ec2(*AWS_ACCESS_GENERIC)

interface = boto.ec2.networkinterface.NetworkInterfaceSpecification(subnet_id='subnet-11d02d71',
                                                                    groups=['sg-0365c56d'],
                                                                    associate_public_ip_address=True)
interfaces = boto.ec2.networkinterface.NetworkInterfaceCollection(interface)

reservation = ec2.run_instances(image_id='ami-a1074dc8',
                                instance_type='t1.micro',
                                #the following two arguments are provided in the network_interface
                                #instead at the global level !!
                                #'security_group_ids': ['sg-0365c56d'],
                                #'subnet_id': 'subnet-11d02d71',
                                network_interfaces=interfaces,
                                key_name='keyPairName')

instance = reservation.instances[0]
instance.update()
while instance.state == "pending":
    print instance, instance.state
    time.sleep(5)
    instance.update()

instance.add_tag("Name", "some name")

print "done", instance, instance.state
</snippet></ROW><ROW><id>19051121</id><snippet>def shrink(s):
    for i in range(len(s)):
        yield s[i:]
</snippet></ROW><ROW><id>19051121</id><snippet>def split_into_five_character_segments(s):
    ret = []
    while len(s) &gt; 5:
        ret.append(s[:5])
        s = s[5:]
    ret.append(s)
    return ret
</snippet></ROW><ROW><id>19051121</id><snippet>sequence = "MSSPPPARSGFYRQEVTKTAWEVRAVYRDLQ"
fragments = [split_into_five_character_segments(s) for s in shrink(sequence)]
</snippet></ROW><ROW><id>19051121</id><snippet>join</snippet></ROW><ROW><id>19051121</id><snippet>for idx, fragment in enumerate(fragments):
    fragment_number = idx + 1
    indent = " " * idx
    print indent + str(fragment_number)
    print indent + " ".join(fragment)
</snippet></ROW><ROW><id>19051121</id><snippet>1
MSSPP PARSG FYRQE VTKTA WEVRA VYRDL Q
 2
 SSPPP ARSGF YRQEV TKTAW EVRAV YRDLQ
  3
  SPPPA RSGFY RQEVT KTAWE VRAVY RDLQ
   4
   PPPAR SGFYR QEVTK TAWEV RAVYR DLQ
    5
    PPARS GFYRQ EVTKT AWEVR AVYRD LQ
     6
     PARSG FYRQE VTKTA WEVRA VYRDL Q
      7
      ARSGF YRQEV TKTAW EVRAV YRDLQ
       8
       RSGFY RQEVT KTAWE VRAVY RDLQ
        9
        SGFYR QEVTK TAWEV RAVYR DLQ
         10
         GFYRQ EVTKT AWEVR AVYRD LQ
          11
          FYRQE VTKTA WEVRA VYRDL Q
           12
           YRQEV TKTAW EVRAV YRDLQ
            13
            RQEVT KTAWE VRAVY RDLQ
             14
             QEVTK TAWEV RAVYR DLQ
              15
              EVTKT AWEVR AVYRD LQ
               16
               VTKTA WEVRA VYRDL Q
                17
                TKTAW EVRAV YRDLQ
                 18
                 KTAWE VRAVY RDLQ
                  19
                  TAWEV RAVYR DLQ
                   20
                   AWEVR AVYRD LQ
                    21
                    WEVRA VYRDL Q
                     22
                     EVRAV YRDLQ
                      23
                      VRAVY RDLQ
                       24
                       RAVYR DLQ
                        25
                        AVYRD LQ
                         26
                         VYRDL Q
                          27
                          YRDLQ
                           28
                           RDLQ
                            29
                            DLQ
                             30
                             LQ
                              31
                              Q
</snippet></ROW><ROW><id>19051145</id><snippet>AIN0</snippet></ROW><ROW><id>19051145</id><snippet>AIN0</snippet></ROW><ROW><id>19051145</id><snippet>voltage = resistance x current</snippet></ROW><ROW><id>19051145</id><snippet>with open('sampled_data.csv', 'w') as f:
  while True:
    f.write(','.join(str(adc.read(AIN0)*1800)))
    time.sleep(T)
</snippet></ROW><ROW><id>19051145</id><snippet>sample_data.csv</snippet></ROW><ROW><id>19051145</id><snippet>,</snippet></ROW><ROW><id>19051261</id><snippet>scrapy-users</snippet></ROW><ROW><id>19051261</id><snippet>shell</snippet></ROW><ROW><id>19051261</id><snippet>shell</snippet></ROW><ROW><id>19051261</id><snippet>$ scrapy shell https://www.mcdonalds.com.sg/locate-us/
2013-09-27 00:44:14-0400 [scrapy] INFO: Scrapy 0.16.5 started (bot: scrapybot)
...

In [1]: from scrapy.http import FormRequest

In [2]: url = 'https://www.mcdonalds.com.sg/wp-admin/admin-ajax.php'

In [3]: payload = {'action': 'ws_search_store_location', 'store_name':'0', 'store_area':'0', 'store_type':'0'}

In [4]: req = FormRequest(url, formdata=payload)

In [5]: fetch(req)
2013-09-27 00:45:13-0400 [default] DEBUG: Crawled (200) &lt;POST https://www.mcdonalds.com.sg/wp-admin/admin-ajax.php&gt; (referer: None)
...

In [6]: import json

In [7]: data = json.loads(response.body)

In [8]: len(data['stores']['listing'])
Out[8]: 127

In [9]: data['stores']['listing'][0]
Out[9]: 
{u'address': u'678A Woodlands Avenue 6&lt;br/&gt;#01-05&lt;br/&gt;Singapore 731678',
 u'city': u'Singapore',
 u'id': 78,
 u'lat': u'1.440409',
 u'lon': u'103.801489',
 u'name': u"McDonald's Admiralty",
 u'op_hours': u'24 hours&lt;br&gt;\r\nDessert Kiosk: 0900-0100',
 u'phone': u'68940513',
 u'region': u'north',
 u'type': [u'24hrs', u'dessert_kiosk'],
 u'zip': u'731678'}
</snippet></ROW><ROW><id>19051261</id><snippet>FormRequest(...)</snippet></ROW><ROW><id>19051261</id><snippet>response.body</snippet></ROW><ROW><id>19051261</id><snippet>data['stores']['listing']</snippet></ROW><ROW><id>19051261</id><snippet>class McDonaldSpider(BaseSpider):
    name = "mcdonalds"
    allowed_domains = ["mcdonalds.com.sg"]
    start_urls = ["https://www.mcdonalds.com.sg/locate-us/"]

    def parse(self, response):
        # This receives the response from the start url. But we don't do anything with it.
        url = 'https://www.mcdonalds.com.sg/wp-admin/admin-ajax.php'
        payload = {'action': 'ws_search_store_location', 'store_name':'0', 'store_area':'0', 'store_type':'0'}
        return FormRequest(url, formdata=payload, callback=self.parse_stores)

    def parse_stores(self, response):
        data = json.loads(response.body)
        for store in data['stores']['listing']:
            yield McDonaldsItem(name=store['name'], address=store['address'])
</snippet></ROW><ROW><id>19051281</id><snippet>str.format</snippet></ROW><ROW><id>19051281</id><snippet>g = 'Fox_Crime20130927092830.xls'
shell1 = 'xls2csv -x {} -s cp1252 -d utf-8 &gt; FOX.csv'.format(g)
print shell1
</snippet></ROW><ROW><id>19051281</id><snippet>{}</snippet></ROW><ROW><id>19051281</id><snippet>g</snippet></ROW><ROW><id>19051281</id><snippet>xls2csv -x Fox_Crime20130927092830.xls -s cp1252 -d utf-8 &gt; FOX.csv
</snippet></ROW><ROW><id>19051281</id><snippet>g = 'Fox_Crime20130927092830.xls'
shell1 = 'xls2csv -x ' + g + ' -s cp1252 -d utf-8 &gt; FOX.csv'
print shell1
</snippet></ROW><ROW><id>19051481</id><snippet>engine_handle = create_engine('mssql+pyodbc://sa:pass@&lt;IP address&gt;/master', echo=False)
</snippet></ROW><ROW><id>19051481</id><snippet>CREATE DATABASE</snippet></ROW><ROW><id>19051481</id><snippet>sqlalchemy</snippet></ROW><ROW><id>19051481</id><snippet>master</snippet></ROW><ROW><id>19051732</id><snippet>sql = """SELECT 
             * 
         FROM 
             db_email 
         WHERE
             user_id = %s AND 
             deleted = 0 AND 
             subject LIKE '%%%s%%'"""
cursor.execute(sql, (user_id, searchparams))
</snippet></ROW><ROW><id>19051732</id><snippet>%</snippet></ROW><ROW><id>19051732</id><snippet>sql = """SELECT 
             * 
         FROM 
             db_email 
         WHERE
             user_id = %s AND 
             deleted = 0 AND 
             subject LIKE %s"""
cursor.execute(sql, (user_id, "%" + searchparams + "%"))
</snippet></ROW><ROW><id>19052069</id><snippet>import datetime

def iso_year_start(iso_year):
    "The gregorian calendar date of the first day of the given ISO year"
    fourth_jan = datetime.date(iso_year, 1, 4)
    delta = datetime.timedelta(fourth_jan.isoweekday()-1)
    return fourth_jan - delta 

def iso_to_gregorian(iso_year, iso_week, iso_day):
    "Gregorian calendar date for the given ISO year, week and day"
    year_start = iso_year_start(iso_year)
    return year_start + datetime.timedelta(days=iso_day-1, weeks=iso_week-1)


def week_start_end(date):
    year = date.isocalendar()[0]
    week = date.isocalendar()[1]
    d1 = iso_to_gregorian(year, week, 0)
    d2 = iso_to_gregorian(year, week, 6)
    d3 = datetime.datetime(d1.year, d1.month, d1.day, 0,0,0,0)
    d4 = datetime.datetime(d2.year, d2.month, d2.day, 23,59,59,999999)
    return (d3,d4)
</snippet></ROW><ROW><id>19052069</id><snippet>&gt;&gt;&gt; d = datetime.datetime(2013, 8, 15, 12, 0, 0)
&gt;&gt;&gt; print week_start_end(d)
(datetime.datetime(2013, 8, 11, 0, 0), datetime.datetime(2013, 8, 17, 23, 59, 59, 999999))
</snippet></ROW><ROW><id>19052103</id><snippet>form_save</snippet></ROW><ROW><id>19052103</id><snippet>auto_now_add</snippet></ROW><ROW><id>19052103</id><snippet>pub_date</snippet></ROW><ROW><id>19052103</id><snippet>success_url</snippet></ROW><ROW><id>19052103</id><snippet>class CreateNewPost(generic.edit.CreateView):
    model = BlogPost
    form_class = NewPostForm
    success_url = '/entries/%(id)s'

    def form_valid(self, form):
        obj = form.save(commit=False)
        obj.user = self.request.user
        obj.pub_date = timezone.now()
        obj.save()
</snippet></ROW><ROW><id>19052103</id><snippet>get_success_url</snippet></ROW><ROW><id>19052103</id><snippet>form_valid</snippet></ROW><ROW><id>19053087</id><snippet>db.define_table('patientaccount',
    Field('email'),
    ...)
</snippet></ROW><ROW><id>19053087</id><snippet>db.patientaccount</snippet></ROW><ROW><id>19053157</id><snippet>for mol in mols:
    for energy, density in data:
        fig = plt.figure()
        ax = fig.addsubplot(111)
        ax.plot(density, energy, 'ro')

        ax.set_xlabel(...)
        ax.set_ylabel(...)
        [a.label.set_color('black') for a in (ax.xaxis, ax.yaxis)]
        # more spines and axis tinkering


        fig.savefig(mol+".png")
</snippet></ROW><ROW><id>19053157</id><snippet>fig = plt.figure()
ax = fig.addsubplot(111)
for mol in mols:
    for energy, density in data:
        ax.cla() # or ax.clear()
        ax.plot(density, energy, 'ro')

        ax.set_xlabel(...)
        ax.set_ylabel(...)
        [a.label.set_color('black') for a in (ax.xaxis, ax.yaxis)]
        # more spines and axis tinkering

        fig.savefig(mol+".png")
</snippet></ROW><ROW><id>19053157</id><snippet># Create the figure and subplot
fig = plt.figure()
ax = fig.addsubplot(111)

# Tinker with labels and spines
ax.set_xlabel(...)
ax.set_ylabel(...)
[a.label.set_color('black') for a in (ax.xaxis, ax.yaxis)]
...

# Plot data and save figures
for mol in mols:
    for energy, density in data:
        ax.cla() # or ax.clear()
        p, = ax.plot(density, energy, 'ro')

        fig.savefig(mol+".png")
        p.remove() # removes specific plot from figure
</snippet></ROW><ROW><id>19053157</id><snippet># same preamble
for mol in mols:
    lines = []
    for energy, density in data:
        ax.cla() # or ax.clear()
        p, = ax.plot(density, energy, 'ro')
        lines.append(p)

        fig.savefig(mol+".png")
    [p.remove() for p in lines]
</snippet></ROW><ROW><id>19053212</id><snippet>payload = json.dumps({"host": "tst123:3306"})                                 
headers = {'content-type': 'application/json'}                                
r = requests.put(url, data=payload, headers=headers)
</snippet></ROW><ROW><id>19053227</id><snippet>string()</snippet></ROW><ROW><id>19053227</id><snippet>import string

def countString(strg):
    if not strg:                             # if it's the empty string
        return 0                             # then it has 0 letters
    elif strg[0] in string.ascii_lowercase:  # if the first char is a letter
        return 1 + countString(strg[1:])     # add 1 and continue with recursion
    else:                                    # if the first char is not a letter
        raise Exception, 'Incorrect Letters' # then throw an exception

countString('abcd')
=&gt; 4

countString('ab$cd')
=&gt; Exception: Incorrect Letters
</snippet></ROW><ROW><id>19053227</id><snippet>def countChar(strg, ch):
    if not strg:                           # if it's the empty string
        return 0                           # then ch's count is 0
    elif strg[0] == ch:                    # if the first char is ch
        return 1 + countChar(strg[1:], ch) # add 1 and continue with recursion
    else:                                  # if the first char is not ch
        return countChar(strg[1:], ch)     # simply continue with recursion

countChar('abcdeabca', 'a')
=&gt; 3

countChar('abcdeabca', 'x')
=&gt; 0
</snippet></ROW><ROW><id>19053347</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>19053347</id><snippet>if u"Total £" in studentfees:
</snippet></ROW><ROW><id>19053572</id><snippet>if</snippet></ROW><ROW><id>19053572</id><snippet>if ans != "y" and ans != "n":
    print "Try again"
    return answer()
</snippet></ROW><ROW><id>19053572</id><snippet>None</snippet></ROW><ROW><id>19053572</id><snippet>False</snippet></ROW><ROW><id>19053572</id><snippet>if</snippet></ROW><ROW><id>19053572</id><snippet>if True:</snippet></ROW><ROW><id>19053572</id><snippet>while</snippet></ROW><ROW><id>19053713</id><snippet>importlib.import_module</snippet></ROW><ROW><id>19053713</id><snippet>&gt;&gt;&gt; import importlib
&gt;&gt;&gt; importlib.import_module('os.path')
&lt;module 'posixpath' from '/usr/lib/python2.7/posixpath.pyc'&gt;
</snippet></ROW><ROW><id>19053790</id><snippet>Red</snippet></ROW><ROW><id>19053790</id><snippet>Green</snippet></ROW><ROW><id>19053790</id><snippet>Blue</snippet></ROW><ROW><id>19053790</id><snippet>test_pwm_set</snippet></ROW><ROW><id>19053790</id><snippet>Red = 0
Green = 0
Blue = 0
</snippet></ROW><ROW><id>19053790</id><snippet>RGB_LED</snippet></ROW><ROW><id>19053790</id><snippet>Red = RGB_LED('Red', 0, 0.0)
Green = RGB_LED('Green', 1, 0.0)
Blue = RGB_LED('Blue', 2, 0.0)

# Buttons
ttk.Button(mainframe, text="Red", command= lambda: Red.set_intensity(float(red_input.get()))).grid(column=1, row=3, sticky=(W, E))
ttk.Button(mainframe, text="Green", command= lambda: Green.set_intensity(float(green_input.get()))).grid(column=2, row=3, sticky=(W, E))
ttk.Button(mainframe, text="Blue", command= lambda: Blue.set_intensity(float(blue_input.get()))).grid(column=3, row=3, sticky=(W, E))
</snippet></ROW><ROW><id>19053800</id><snippet>def to_camel_case(snake_str):
    components = snake_str.split('_')
    # We capitalize the first letter of each component except the first one
    # with the 'title' method and join them together.
    return components[0] + "".join(x.title() for x in components[1:])
</snippet></ROW><ROW><id>19053800</id><snippet>In [11]: to_camel_case('snake_case')
Out[11]: 'snakeCase'
</snippet></ROW><ROW><id>19053855</id><snippet>from fabric.api import *
from fabric.contrib import project

env.roledefs['static'] = ['user@123.123.123.132',]    

# Where the static files get collected locally. Your STATIC_ROOT setting.
env.local_static_root = '/tmp/static'

# Where the static files should go remotely
env.remote_static_root = '/home/static-files'

@roles('static')
def deploy_static():
    local('./manage.py collectstatic')
    project.rsync_project(
        remote_dir = env.remote_static_root,
        local_dir = env.local_static_root,
        delete = True
    )
</snippet></ROW><ROW><id>19053855</id><snippet>fab deploy_static
</snippet></ROW><ROW><id>19053972</id><snippet>Content-Length: 0
</snippet></ROW><ROW><id>19054998</id><snippet>for</snippet></ROW><ROW><id>19054998</id><snippet>AOI = []
for t in Town:
    for r in Range:
        for s in Section:
            AOI.append(t + r + s)
</snippet></ROW><ROW><id>19055059</id><snippet># X - some data in 2dimensional np.array

x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1
y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, h),
                     np.arange(y_min, y_max, h))

# here "model" is your model's prediction (classification) function
Z = model(np.c_[xx.ravel(), yy.ravel()]) 

# Put the result into a color plot
Z = Z.reshape(xx.shape)
plt.contourf(xx, yy, Z, cmap=pl.cm.Paired)
plt.axis('off')

# Plot also the training points
plt.scatter(X[:, 0], X[:, 1], c=Y, cmap=pl.cm.Paired)
</snippet></ROW><ROW><id>19055059</id><snippet>sklearn</snippet></ROW><ROW><id>19055118</id><snippet>question = raw_input("Do you wish to try again? y/n: ")
start_over = 10
if question == "y":
    start_over -= 1
    print start_over
else:
    raise SystemExit
</snippet></ROW><ROW><id>19055364</id><snippet>&gt;&gt;&gt; f = open('text.csv', 'w+')
&gt;&gt;&gt; f.write('asdf')
&gt;&gt;&gt;
&gt;&gt;&gt; f2 = open('text.csv', 'r')
&gt;&gt;&gt; f2.read()
''
&gt;&gt;&gt; f2.close()
</snippet></ROW><ROW><id>19055364</id><snippet>close</snippet></ROW><ROW><id>19055364</id><snippet>&gt;&gt;&gt; f.close()
&gt;&gt;&gt; f2 = open('text.csv', 'r')
&gt;&gt;&gt; f2.read()
'asdf'
</snippet></ROW><ROW><id>19055364</id><snippet>w+</snippet></ROW><ROW><id>19055364</id><snippet>with open(cr_file, 'w+') as f:
    c = pycurl.Curl()
    c.setopt(c.URL, csv_url)
    c.setopt(c.WRITEFUNCTION, f.write)
    c.setopt(c.HTTPHEADER, headers)
    c.perform()

    f.seek(0)
    ids = find_bugs(f.readlines())
</snippet></ROW><ROW><id>19055437</id><snippet>Select-String -Path $SearchFolder -Pattern 'new-print-server, default, dymo, zebra' -NotMatch | select line, filename
</snippet></ROW><ROW><id>19055437</id><snippet>$files = Get-ChildItem "C:\Test\New folder\*.txt"
foreach ($file in $files) {
    $notMatchedLines = $file | Select-String -Pattern 'new-print-server, default, dymo, zebra' -NotMatch | select line,filename
    $notMatchedLines | foreach {$_.line = $_.line.replace("^",",")}
    $notMatchedLines | Export-Csv ([io.path]::ChangeExtension($file.Fullname, '.csv')) -NoTypeInformation -Encoding UTF8
}
</snippet></ROW><ROW><id>19055667</id><snippet>blobstore.BlobReferenceProperty</snippet></ROW><ROW><id>19055667</id><snippet>class Image(db.Model):

    reference = db.ReferenceProperty(Article,
            collection_name='matched_images', verbose_name='Title')
    primary_image = blobstore.BlobReferenceProperty()
</snippet></ROW><ROW><id>19055734</id><snippet>remove</snippet></ROW><ROW><id>19055734</id><snippet>data['key2'].remove({'subkey1': 'subvalue1', 'subkey2': 'subvalue2'})</snippet></ROW><ROW><id>19055874</id><snippet>matplotlib.dates</snippet></ROW><ROW><id>19055874</id><snippet>fig = plt.figure()
ax = fig.add_subplot(1,1,1)
datenum = matplotlib.dates.date2num(dates)

for i in range(-1,len(data_values)-1):
    ax.barh(datenum + i*5., data_values[i], height=5.)
ax.yaxis.set_major_formatter(matplotlib.dates.DateFormatter('%m/%d'))

plt.show()
</snippet></ROW><ROW><id>19055896</id><snippet>if</snippet></ROW><ROW><id>19055896</id><snippet>for</snippet></ROW><ROW><id>19055896</id><snippet>fridge = {"cheese" : "so delicious", "crackers": "you will love it once you try it", "chicken soup": "delicous stuff"}
food_sought = "pepper"
if food_sought in fridge:
    print("I was able to find a something in our list of food: %s : %s" % (food_sought, fridge[food_sought]))
else:
    print("We couldn't find the food you were looking for")
</snippet></ROW><ROW><id>19055896</id><snippet>for .. in ..</snippet></ROW><ROW><id>19055896</id><snippet>food_sought</snippet></ROW><ROW><id>19055896</id><snippet>fridge = {"cheese" : "so delicious", "crackers": "you will love it once you try it", "chicken soup": "delicous stuff"}
food_sought = "chicken"
for name in fridge:
    if name == food_sought:
        print("I was able to find a something in our list of food: %s : %s" % (food_sought, fridge[food_sought]))
        break
else:
    print("We couldn't find the food you were looking for")
</snippet></ROW><ROW><id>19056036</id><snippet>split("\n")</snippet></ROW><ROW><id>19056036</id><snippet>for line in data:
</snippet></ROW><ROW><id>19056059</id><snippet>class Parser(object):

    def __init__(self, use_messaging=False):
        if use_messaging:
            try:
                self.messages = __import__('django.contrib.messages') 
            except ImportError:
                print "dude, you really need to read the help secton"
                sys.exit(1)
        else:
            self.messages = None

    def parse(self):
        if self.messages:
            self.messages.send_message("I am parsing now")
</snippet></ROW><ROW><id>19056145</id><snippet>str.split</snippet></ROW><ROW><id>19056145</id><snippet>with open("textFile.txt") as textFile:
    lines = [line.split() for line in textFile]
</snippet></ROW><ROW><id>19056145</id><snippet>&gt;&gt;&gt; with open("textFile.txt") as textFile:
        lines = [line.split() for line in textFile]
...     
&gt;&gt;&gt; lines
[['Hello', 'World'], ['How', 'are', 'you?'], ['Bye', 'World']]
</snippet></ROW><ROW><id>19056145</id><snippet>with</snippet></ROW><ROW><id>19056145</id><snippet>with</snippet></ROW><ROW><id>19056300</id><snippet>test.py</snippet></ROW><ROW><id>19056300</id><snippet>test2.py</snippet></ROW><ROW><id>19056300</id><snippet>test.py</snippet></ROW><ROW><id>19056300</id><snippet>test2</snippet></ROW><ROW><id>19056300</id><snippet>test</snippet></ROW><ROW><id>19056300</id><snippet>test</snippet></ROW><ROW><id>19056300</id><snippet>sys.modules</snippet></ROW><ROW><id>19056300</id><snippet>import test2</snippet></ROW><ROW><id>19056300</id><snippet>test2</snippet></ROW><ROW><id>19056300</id><snippet>sys.modules</snippet></ROW><ROW><id>19056300</id><snippet>import test</snippet></ROW><ROW><id>19056300</id><snippet>test</snippet></ROW><ROW><id>19056300</id><snippet>sys.modules</snippet></ROW><ROW><id>19056300</id><snippet>test</snippet></ROW><ROW><id>19056300</id><snippet>test.aFunction()</snippet></ROW><ROW><id>19056300</id><snippet>test</snippet></ROW><ROW><id>19056300</id><snippet>def aFunction()</snippet></ROW><ROW><id>19056300</id><snippet>import test2</snippet></ROW><ROW><id>19056300</id><snippet>test2.py</snippet></ROW><ROW><id>19056300</id><snippet>import test

test.aFunction()
</snippet></ROW><ROW><id>19056350</id><snippet>Z</snippet></ROW><ROW><id>19056350</id><snippet>np.asarray(Z)[:,0]
</snippet></ROW><ROW><id>19056350</id><snippet>np.matrix</snippet></ROW><ROW><id>19056350</id><snippet>(N,1)</snippet></ROW><ROW><id>19056350</id><snippet>(N,)</snippet></ROW><ROW><id>19056350</id><snippet>In [4]: a = np.arange(9).reshape(3,3)

In [5]: a
Out[5]: 
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])

In [6]: m = np.matrix(a)

In [7]: m
Out[7]: 
matrix([[0, 1, 2],
        [3, 4, 5],
        [6, 7, 8]])

In [8]: m[:,0]
Out[8]: 
matrix([[0],
        [3],
        [6]])

In [9]: a[:,0]
Out[9]: array([0, 3, 6])

In [10]: m[:,0].shape
Out[10]: (3, 1)

In [11]: a[:,0].shape
Out[11]: (3,)
</snippet></ROW><ROW><id>19056350</id><snippet>In [12]: np.array(m[:,0])
Out[12]: 
array([[0],
       [3],
       [6]])

In [13]: np.array(m[:,0]).shape
Out[13]: (3, 1)
</snippet></ROW><ROW><id>19056700</id><snippet>lib = pj.Lib()
lib.init(log_cfg=pj.LogConfig(level=3, callback=log_cb))
lib.set_null_snd_dev()
</snippet></ROW><ROW><id>19056873</id><snippet>findall</snippet></ROW><ROW><id>19056873</id><snippet>match_hh_company_url.findall(each)
</snippet></ROW><ROW><id>19056873</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile(r'')
&gt;&gt;&gt; r()
Traceback (most recent call last):
    r()
TypeError: '_sre.SRE_Pattern' object is not callable

&gt;&gt;&gt; r.findall('')
['']
</snippet></ROW><ROW><id>19056941</id><snippet>&gt;&gt;&gt; s = "hello"
&gt;&gt;&gt; lst = [1, 2, 3, 4, 5]
&gt;&gt;&gt; zip(s, lst)
[('h', 1), ('e', 2), ('l', 3), ('l', 4), ('o', 5)]
</snippet></ROW><ROW><id>19056941</id><snippet>&gt;&gt;&gt; s = "hell"
&gt;&gt;&gt; lst = [1, 2, 3, 4, 5]
&gt;&gt;&gt; zip(s, lst)
[('h', 1), ('e', 2), ('l', 3), ('l', 4)]
</snippet></ROW><ROW><id>19056941</id><snippet>lst</snippet></ROW><ROW><id>19056942</id><snippet>encoded_id.encode('latin1').decode('utf8')
</snippet></ROW><ROW><id>19056942</id><snippet>&gt;&gt;&gt; encoded_id = u'abcd\xc3\x9f'
&gt;&gt;&gt; encoded_id.encode('latin1').decode('utf8')
u'abcd\xdf'
&gt;&gt;&gt; print encoded_id.encode('latin1').decode('utf8')
abcdß
</snippet></ROW><ROW><id>19056955</id><snippet>outputStream</snippet></ROW><ROW><id>19056955</id><snippet>output = PdfFileWriter()
for rownum, row in enumerate(reader):
    if rownum == 0:
        header = row
    else:
        for col in row:
            d[header[colnum]] = col
            colnum += 1
        # or, more concisely:
        # d = dict((header[colnum], value) for (colnum, value) in enumerate(row))
        # or use a dict comprehension if you're on a sufficiently recent version
        # or best of all, use a csv.DictReader object instead of creating the dictionary yourself

        packet = StringIO.StringIO()

        can = canvas.Canvas(packet, pagesize=(621,405))
        can.drawString(340, 147, d['FirstName'])
        can.save()

        packet.seek(0)
        new_pdf = PdfFileReader(packet)                        

        # I would check whether this can be read once and still have getPage called multiple times
        existing_pdf = PdfFileReader(file(order, 'rb'))

        front = existing_pdf.getPage(0)
        back = existing_pdf.getPage(1)
        back.mergePage(new_pdf.getPage(0))
        output.addPage(front)
        output.addPage(back)

outputStream = file(token+'_merged.pdf', 'wb')
output.write(outputStream)
outputStream.close()
</snippet></ROW><ROW><id>19057001</id><snippet>MyApp/MyApp/Template/...
MyApp/App1/...
MyApp/App2/...
MyApp/Menu/...
</snippet></ROW><ROW><id>19057001</id><snippet>MyApp/MyApp/view.py/...
MyApp/MyApp/Template/...
MyApp/App1/...
MyApp/App2/...
</snippet></ROW><ROW><id>19057048</id><snippet>GCCFORMAT</snippet></ROW><ROW><id>19057048</id><snippet>pList</snippet></ROW><ROW><id>19057048</id><snippet>gcc_format = GCCFORMAT(GCCN)
results = gcc_format.pList
</snippet></ROW><ROW><id>19057120</id><snippet>SOMETHING/endpoint</snippet></ROW><ROW><id>19057453</id><snippet>sys.path</snippet></ROW><ROW><id>19057453</id><snippet>setuptools</snippet></ROW><ROW><id>19057453</id><snippet>pkg_resources.ResourceManager</snippet></ROW><ROW><id>19057619</id><snippet>queued = []

...

connecting = endpoint.connect(factory)
def connected(protocol):
    if queued:
        sending = protocol.sendMessage(queued.pop(0))
        sending.addCallback(sendNextMessage, protocol)
        sending.addErrback(reconnect)
connecting.addCallback(connected)
</snippet></ROW><ROW><id>19057619</id><snippet>connecting</snippet></ROW><ROW><id>19057619</id><snippet>Deferred</snippet></ROW><ROW><id>19057619</id><snippet>connected</snippet></ROW><ROW><id>19057619</id><snippet>list</snippet></ROW><ROW><id>19057619</id><snippet>Protocol.connectionMade</snippet></ROW><ROW><id>19057619</id><snippet>connect</snippet></ROW><ROW><id>19057619</id><snippet>Deferred</snippet></ROW><ROW><id>19057619</id><snippet>connectionMade</snippet></ROW><ROW><id>19057806</id><snippet>fscale</snippet></ROW><ROW><id>19057806</id><snippet># create a wave with 1Mhz and 0.5Mhz frequencies
dt = 40e-9
t = np.arange(0, 1000e-6, dt)
fscale = t/max(t)
y = np.cos(2 * pi * 1e6 * t*fscale) + (np.cos(2 * pi * 2e6 *t*fscale) * np.cos(2 * pi * 2e6 * t*fscale))
y *= np.hanning(len(y))
yy = np.concatenate((y, ([0] * 10 * len(y))))

# FFT of this
Fs = 1 / dt  # sampling rate, Fs = 500MHz = 1/2ns
n = len(yy)  # length of the signal
k = np.arange(n)
T = n / Fs
frq = k / T  # two sides frequency range
frq = frq[range(n / 2)]  # one side frequency range
Y = fft(yy) / n  # fft computing and normalization
Y = Y[range(n / 2)] / max(Y[range(n / 2)])

# plotting the data
subplot(3, 1, 1)
plot(t * 1e3, y, 'r')
xlabel('Time (micro seconds)')
ylabel('Amplitude')
grid()

# plotting the spectrum
subplot(3, 1, 2)
plot(frq[0:600], abs(Y[0:600]), 'k')
xlabel('Freq (Hz)')
ylabel('|Y(freq)|')
grid()

# plotting the specgram
subplot(3, 1, 3)
Pxx, freqs, bins, im = specgram(y, NFFT=512, Fs=Fs, noverlap=10)
show()
</snippet></ROW><ROW><id>19057853</id><snippet>surface = pygame.Surface((100, 100), flags=pygame.SRCALPHA)
</snippet></ROW><ROW><id>19057853</id><snippet>surface = pygame.Surface((100, 100)).convert_alpha()
</snippet></ROW><ROW><id>19057853</id><snippet>pygame.display.set_mode((X, Y))
</snippet></ROW><ROW><id>19057968</id><snippet>in</snippet></ROW><ROW><id>19057968</id><snippet>list.append</snippet></ROW><ROW><id>19057968</id><snippet>add = input("Please enter a film: ")
if add not in films:
    films.append(add)
</snippet></ROW><ROW><id>19057968</id><snippet>films</snippet></ROW><ROW><id>19057968</id><snippet>for film in films:
    print ("%s" % film)
</snippet></ROW><ROW><id>19058106</id><snippet>LOAD DATA INFILE</snippet></ROW><ROW><id>19058106</id><snippet>=</snippet></ROW><ROW><id>19058106</id><snippet>SET</snippet></ROW><ROW><id>19058106</id><snippet>NULL</snippet></ROW><ROW><id>19058106</id><snippet>LOAD DATA LOCAL INFILE '/path/to/your/file.csv' 
IGNORE INTO TABLE table_name
    FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' 
    LINES TERMINATED BY '\r\n'
    IGNORE 1 LINES 
(@MID, DBAName, PartnerID, PartnerName, SubPartnerID, SubPartnerName, ActiveMonths,
 @BonusAmount, @BonusAppliedDate, @PartnerPercentage, @PartnerShare, @TotalPayment)
SET MID = TRIM(BOTH '"' FROM SUBSTR(@MID, 2)), -- here we get rid of equal sign and double quotes
    BonusAmount  = TRIM(LEADING '$' FROM NULLIF(@BonusAmount, '')),
    BonusAppliedDate = NULLIF(@BonusAppliedDate, ''),
    PartnerPercentage = NULLIF(@PartnerPercentage, ''),
    PartnerShare = TRIM(LEADING '$' FROM NULLIF(@PartnerShare, '')),
    TotalPayment = TRIM(LEADING '$' FROM NULLIF(@TotalPayment, ''))
</snippet></ROW><ROW><id>19058106</id><snippet>LINES STARTING BY</snippet></ROW><ROW><id>19058106</id><snippet>LOAD DATA LOCAL INFILE '/path/to/your/file.csv' 
IGNORE INTO TABLE table_name
    FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"' 
    LINES TERMINATED BY '\r\n' STARTING BY '='
    IGNORE 1 LINES 
(MID, DBAName, PartnerID, PartnerName, SubPartnerID, SubPartnerName, ActiveMonths, @BonusAmount, BonusAppliedDate, PartnerPercentage, PartnerShare, @TotalPayment)
SET BonusAmount  = TRIM(LEADING '$' FROM NULLIF(@BonusAmount, '')),
    BonusAppliedDate = NULLIF(@BonusAppliedDate, ''),
    PartnerPercentage = NULLIF(@PartnerPercentage, ''),
    PartnerShare = TRIM(LEADING '$' FROM NULLIF(@PartnerShare, '')),
    TotalPayment = TRIM(LEADING '$' FROM NULLIF(@TotalPayment, ''))
</snippet></ROW><ROW><id>19058106</id><snippet>CREATE TABLE table_name 
(
    MID BIGINT, 
    DBAName           VARCHAR(100),
    PartnerID         INT,
    PartnerName       VARCHAR(100),
    SubPartnerID      INT,
    SubPartnerName    VARCHAR(100),
    ActiveMonths      INT,
    BonusAmount       DECIMAL(19, 2),
    BonusAppliedDate  DATE,
    PartnerPercentage DECIMAL(3, 2),
    PartnerShare      DECIMAL(19, 2),
    TotalPayment      DECIMAL(19, 2)
);
</snippet></ROW><ROW><id>19058132</id><snippet>view-source:https://play.google.com/store/apps/details?id=com.teslacoilsw.launcher&amp;hl=en</snippet></ROW><ROW><id>19058132</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>19058132</id><snippet>@itemprop</snippet></ROW><ROW><id>19058132</id><snippet>price</snippet></ROW><ROW><id>19058132</id><snippet>browser.find_element_by_xpath()</snippet></ROW><ROW><id>19058132</id><snippet>@content</snippet></ROW><ROW><id>19058132</id><snippet>priceValue = browser.find_element_by_xpath("//meta[@itemprop='price']")
print priceValue.get_attribute("content")
</snippet></ROW><ROW><id>19058164</id><snippet>print('Hello world!')
print('What is your name?')
myName = input()

while True:
    print('It is nice to meet you, ' + myName)
</snippet></ROW><ROW><id>19058164</id><snippet>print('Hello world!')
while True:
    print('It is nice to meet you, ' + input('What is your name? '))
</snippet></ROW><ROW><id>19058258</id><snippet>weather</snippet></ROW><ROW><id>19058258</id><snippet>&gt;&gt;&gt; type(weather)
&lt;class 'suds.sax.text.Text'&gt;
</snippet></ROW><ROW><id>19058258</id><snippet>&gt;&gt;&gt; weather.splitlines()[0]
'&lt;?xml version="1.0" encoding="utf-16"?&gt;'
</snippet></ROW><ROW><id>19058258</id><snippet>&gt;&gt;&gt; weather = weather.encode('utf16')
&gt;&gt;&gt; parseWeather = ET.fromstring(weather)
</snippet></ROW><ROW><id>19058365</id><snippet>logging.config.fileConfig</snippet></ROW><ROW><id>19058365</id><snippet>pyramid.paster.get_app(inipath)
pyramid.paster.setup_logging(inipath)
</snippet></ROW><ROW><id>19058365</id><snippet>inipath</snippet></ROW><ROW><id>19058365</id><snippet>development.ini#myapp</snippet></ROW><ROW><id>19058365</id><snippet>fileConfig</snippet></ROW><ROW><id>19058409</id><snippet>HTTP/1.1 200 OK
Cache-Control: public, max-age=60
Content-Type: text/html; charset=utf-8
Content-Encoding: gzip
Expires: Fri, 27 Sep 2013 19:22:41 GMT
Last-Modified: Fri, 27 Sep 2013 19:21:41 GMT
Vary: *
X-Frame-Options: SAMEORIGIN
Date: Fri, 27 Sep 2013 19:21:41 GMT
Content-Length: 12706

&lt;!DOCTYPE html&gt;
&lt;html&gt;
... truncated rest of body ...
</snippet></ROW><ROW><id>19058409</id><snippet>&gt;&gt;&gt; bad_r = requests.get('http://httpbin.org/status/404')
&gt;&gt;&gt; bad_r.status_code
404

&gt;&gt;&gt; bad_r.raise_for_status()
Traceback (most recent call last):
  File "requests/models.py", line 832, in raise_for_status
    raise http_error
requests.exceptions.HTTPError: 404 Client Error
</snippet></ROW><ROW><id>19058409</id><snippet>r = requests.get('http://en.wikipedia.org/wiki/Monty_Python')
# response headers: 
r.headers
# request headers:
r.request.headers
</snippet></ROW><ROW><id>19058409</id><snippet>r.text</snippet></ROW><ROW><id>19058409</id><snippet>"Content-Type":"application/x-www-form-urlencoded",</snippet></ROW><ROW><id>19058409</id><snippet>data=json.dumps(data)</snippet></ROW><ROW><id>19058409</id><snippet>"Content-type": "application/json",</snippet></ROW><ROW><id>19058550</id><snippet>int rgbInt = byteArray[0] &lt;&lt; 16 + byteArray[1] &lt;&lt; 8 + byteArray[2];    
// not sure these are in the correct order, you may have to swap the indexes around. 
</snippet></ROW><ROW><id>19058550</id><snippet>+ 0xFF &lt;&lt; 24
</snippet></ROW><ROW><id>19058603</id><snippet>getFeedback</snippet></ROW><ROW><id>19058603</id><snippet>getFeedback</snippet></ROW><ROW><id>19058603</id><snippet>import itertools

def generateInitialGuesslist():
    return list("".join(k) for k in itertools.product('ABCDEF', repeat=4))

def getFeedback(guess, feedbackStr, guess_list):
    guess_score = feedbackStr
    new_guess_list = []
    for candidate in guess_list:
        candidate_score = computeFeedback(guess, candidate)
        if candidate_score == guess_score:        #remove all non matching guesses
            new_guess_list.append(candidate)
    return new_guess_list

def computeFeedback(code,guess):
    # Given a code and guess computes the feedback string

    b = 0
    w = 0
    inCodeCount = {'A':0,'B':0,'C':0,'D':0, 'E':0, 'F':0}
    inGuessCount = {'A':0,'B':0,'C':0,'D':0, 'E':0, 'F':0}
    for i in range(0,4):
        if code[i] == guess [i]:
            b += 1
        inCodeCount[code[i]] += 1
        inGuessCount[guess[i]] += 1
    for ch in inCodeCount:
        w += min(inCodeCount [ch], inGuessCount [ch])
    w -= b 
    feedback = str(w)+'w'+str(b)+'b'
    return feedback

guesslist = generateInitialGuesslist()
guesslist = getFeedback('AABB', '1w1b', guesslist)
print guesslist
print len(guesslist)
</snippet></ROW><ROW><id>19058603</id><snippet>AABB</snippet></ROW><ROW><id>19058603</id><snippet>ABCD</snippet></ROW><ROW><id>19058603</id><snippet>1w1b</snippet></ROW><ROW><id>19058607</id><snippet>legend = axes.legend()
frame = legend.get_frame()
</snippet></ROW><ROW><id>19058607</id><snippet>frame.set_XXX</snippet></ROW><ROW><id>19058607</id><snippet>plt.legend()</snippet></ROW><ROW><id>19058621</id><snippet>def primes(n): # sieve of eratosthenes
    ps, sieve = [], [True] * (n + 1)
    for p in range(2, n + 1):
        if sieve[p]:
           ps.append(p)
           for i in range(p * p, n + 1, p):
               sieve[i] = False
    return ps
</snippet></ROW><ROW><id>19058836</id><snippet>np.take</snippet></ROW><ROW><id>19058836</id><snippet>axis</snippet></ROW><ROW><id>19058836</id><snippet>&gt;&gt;&gt; a = np.arange(2*3*4).reshape(2, 3, 4)
&gt;&gt;&gt; a
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])
&gt;&gt;&gt; b = np.arange(3)
&gt;&gt;&gt; np.random.shuffle(b)
&gt;&gt;&gt; b
array([1, 0, 2])
&gt;&gt;&gt; np.take(a, b, axis=1)
array([[[ 4,  5,  6,  7],
        [ 0,  1,  2,  3],
        [ 8,  9, 10, 11]],

       [[16, 17, 18, 19],
        [12, 13, 14, 15],
        [20, 21, 22, 23]]])
</snippet></ROW><ROW><id>19058836</id><snippet>&gt;&gt;&gt; a[:, b]
array([[[ 4,  5,  6,  7],
        [ 0,  1,  2,  3],
        [ 8,  9, 10, 11]],

       [[16, 17, 18, 19],
        [12, 13, 14, 15],
        [20, 21, 22, 23]]])
</snippet></ROW><ROW><id>19058836</id><snippet>&gt;&gt;&gt; axis = 1
&gt;&gt;&gt; idx = (slice(None),) * axis + (b,)
&gt;&gt;&gt; a[idx]
array([[[ 4,  5,  6,  7],
        [ 0,  1,  2,  3],
        [ 8,  9, 10, 11]],

       [[16, 17, 18, 19],
        [12, 13, 14, 15],
        [20, 21, 22, 23]]])
</snippet></ROW><ROW><id>19058836</id><snippet>np.take</snippet></ROW><ROW><id>19058975</id><snippet>import string

def change(word, pos):
    old = string.ascii_lowercase
    new = old[pos:] + old[:pos]
    return word.translate(string.maketrans(old, new))
</snippet></ROW><ROW><id>19058982</id><snippet>days</snippet></ROW><ROW><id>19058982</id><snippet>changeInDateStr</snippet></ROW><ROW><id>19058982</id><snippet>changeInDate</snippet></ROW><ROW><id>19058982</id><snippet>print [..blah blah...] " This was " + changeInDate.days + [" days", " day"][changeInDays.days==1] + " ago!"
</snippet></ROW><ROW><id>19059287</id><snippet>def multi_filter(predicates, iterable):
    bins = [[] for _ in predicates]
    for item in iterable:
        for predicate, bin in zip(predicates, bins):
            if predicate(item):
                bin.append(item)

    return bins
</snippet></ROW><ROW><id>19059382</id><snippet>dfile.write('\n'.join(x).encode("UTF-8"))
</snippet></ROW><ROW><id>19059382</id><snippet>open()</snippet></ROW><ROW><id>19059382</id><snippet>import codecs

with codecs.open('test.txt', 'w', encoding="UTF-8") as dfile:
    dfile.write('\n'.join(x))
</snippet></ROW><ROW><id>19059416</id><snippet>csv</snippet></ROW><ROW><id>19059416</id><snippet>import csv
with open("file.txt", "rb") as infile:
    reader = csv.reader(infile, delimiter="\t")
    allData = list(reader)
</snippet></ROW><ROW><id>19059416</id><snippet>int</snippet></ROW><ROW><id>19059416</id><snippet>float</snippet></ROW><ROW><id>19059416</id><snippet>    allData = [(int(first), float(second)) for first,second in reader]
</snippet></ROW><ROW><id>19059416</id><snippet>zip()</snippet></ROW><ROW><id>19059416</id><snippet>*</snippet></ROW><ROW><id>19059416</id><snippet>    first, second = zip(*((float(x), float(y)) for x,y in reader))
</snippet></ROW><ROW><id>19059501</id><snippet>self.frame = QtGui.QGroupBox(self)    
self.frame.setTitle("Hello World")
</snippet></ROW><ROW><id>19059556</id><snippet>u</snippet></ROW><ROW><id>19059556</id><snippet>import urllib2
import csv

u = urllib2.urlopen(r'http://finance.yahoo.com/d/quotes.csv?s=AAPL+GOOG+MSFT&amp;f=nab')

reader = csv.reader(u)

for row in reader:
    print row
</snippet></ROW><ROW><id>19059556</id><snippet>csv.reader</snippet></ROW><ROW><id>19059556</id><snippet>u</snippet></ROW><ROW><id>19059635</id><snippet>for event in pygame.event.get_pressed():
</snippet></ROW><ROW><id>19059635</id><snippet>for event in pygame.event.get():
</snippet></ROW><ROW><id>19059635</id><snippet>k</snippet></ROW><ROW><id>19059635</id><snippet>for event in k:
</snippet></ROW><ROW><id>19059672</id><snippet>out</snippet></ROW><ROW><id>19059672</id><snippet>outfile</snippet></ROW><ROW><id>19059672</id><snippet>with open('data.json', 'w') as outfile:
    outfile.write(out)
</snippet></ROW><ROW><id>19059672</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>19059672</id><snippet>json.dumps()</snippet></ROW><ROW><id>19059737</id><snippet>numpy.cov</snippet></ROW><ROW><id>19059737</id><snippet>import numpy

randoms = numpy.random.random((1043, 261))

covs = [numpy.cov(randoms) for _ in range(10)]
all((c==covs[0]).all() for c in covs)
#&gt;&gt;&gt; True
</snippet></ROW><ROW><id>19059890</id><snippet>p.stdout.readline</snippet></ROW><ROW><id>19059890</id><snippet>for line in p.stdout</snippet></ROW><ROW><id>19059890</id><snippet>sys.stdout.write(line)</snippet></ROW><ROW><id>19059890</id><snippet>print</snippet></ROW><ROW><id>19059890</id><snippet>print(line, end="")</snippet></ROW><ROW><id>19059890</id><snippet>p.kill</snippet></ROW><ROW><id>19059890</id><snippet>os.kill</snippet></ROW><ROW><id>19059890</id><snippet>os.kill</snippet></ROW><ROW><id>19059890</id><snippet>import os
import signal
import subprocess
import sys

p = subprocess.Popen(['ping', 'google.com'], stdout=subprocess.PIPE)
while True:
    line = p.stdout.readline()

    sys.stdout.write(line)
    sys.stdout.flush()
    if '10' in line:
        break

p.kill()
</snippet></ROW><ROW><id>19059920</id><snippet>In[1]:= A = {{-3a,1,0,0}, {3a,-2a-1,2,0}, {0,2a,-a-b-2,3}, {0,0,a+b,-3}};
x = {p, q, r, s};
sol = Reduce[A.x==0 &amp;&amp; p+q+r+s==1 &amp;&amp; Det[A]==0, x, Backsubstitution-&gt;True]

Out[3]= (1+3*a+3*a^2+a^3+a^2*b) != 0 &amp;&amp; 
p == 1/(1+3*a+3*a^2+a^3+a^2*b) &amp;&amp; 
q == (3*a)/(1+3*a+3*a^2+a^3+a^2*b) &amp;&amp; 
r == (3*a^2)/(1+3*a+3*a^2+a^3+a^2*b) &amp;&amp; 
s == (a^3 + a^2*b)/(1+3*a+3*a^2+a^3+a^2*b)

In[4]:= x=x/.ToRules[sol (* Watch out for that denominator!!! *)];
Simplify[A.x]

Out[5]= {0, 0, 0, 0}

In[6]:= Simplify[Total[x]]

Out[6]= 1
</snippet></ROW><ROW><id>19059967</id><snippet>syncdb</snippet></ROW><ROW><id>19060571</id><snippet>from urllib.parse import unquote
</snippet></ROW><ROW><id>19060571</id><snippet>from urllib import unquote
</snippet></ROW><ROW><id>19060571</id><snippet>unquote('http://abc.com/hsdl-3201%23008-lite-on-12275800/hsdl-3201%23008-lite-on-12275800')
#&gt;&gt;&gt; 'http://abc.com/hsdl-3201#008-lite-on-12275800/hsdl-3201#008-lite-on-12275800'
</snippet></ROW><ROW><id>19060571</id><snippet>unquote_plus</snippet></ROW><ROW><id>19060571</id><snippet>"+"</snippet></ROW><ROW><id>19060753</id><snippet>for i in result:
    src = str(i[PyQt4.QtCore.QString(u'src')])
    alt = str(i[PyQt4.QtCore.QString(u'alt')])
</snippet></ROW><ROW><id>19060753</id><snippet>QString</snippet></ROW><ROW><id>19060753</id><snippet>QString</snippet></ROW><ROW><id>19060753</id><snippet>QString</snippet></ROW><ROW><id>19060753</id><snippet>result</snippet></ROW><ROW><id>19060753</id><snippet>list</snippet></ROW><ROW><id>19060753</id><snippet>result = [
    {
        PyQt4.QtCore.QString(u'src'): PyQt4.QtCore.QString(u'http://...'),
        PyQt4.QtCore.QString(u'alt'): PyQt4.QtCore.QString(u'bla'),
    },
    {
        PyQt4.QtCore.QString(u'src'): PyQt4.QtCore.QString(u'http://...'),
        PyQt4.QtCore.QString(u'alt'): PyQt4.QtCore.QString(u'bla'),
    },
    ....
]
</snippet></ROW><ROW><id>19060753</id><snippet>QString</snippet></ROW><ROW><id>19060753</id><snippet>unicode</snippet></ROW><ROW><id>19060753</id><snippet>str</snippet></ROW><ROW><id>19060753</id><snippet>QString</snippet></ROW><ROW><id>19060753</id><snippet>str()</snippet></ROW><ROW><id>19060753</id><snippet>unicode</snippet></ROW><ROW><id>19060753</id><snippet>src = unicode(i[PyQt4.QtCore.QString(u'src')])
</snippet></ROW><ROW><id>19060753</id><snippet>src = src.encode('utf_8')  # or use whatever encoding you prefer instead of UTF-8 here
</snippet></ROW><ROW><id>19060843</id><snippet>try:
    int(x)
except ValueError:
    ... # Not convertable
else:
    ... # Convertable
</snippet></ROW><ROW><id>19060843</id><snippet>try:
    int(x)
except ValueError:
    intable = True
else:
    intable = False
</snippet></ROW><ROW><id>19060843</id><snippet>elif x != "So sue me!" and not intable:</snippet></ROW><ROW><id>19060843</id><snippet>elif x != "So sue me!" and x not int:</snippet></ROW><ROW><id>19060843</id><snippet>else:
    return None
</snippet></ROW><ROW><id>19060869</id><snippet>std::string</snippet></ROW><ROW><id>19060869</id><snippet>std::string::substr</snippet></ROW><ROW><id>19060869</id><snippet>std::string s1("ABCDE");
std::string s2 = s1.substr(0, 2);
</snippet></ROW><ROW><id>19060882</id><snippet>json.loads(self.request.body)</snippet></ROW><ROW><id>19061129</id><snippet>def additional_method(self, arg):
    print("hello", arg)

Input.additional_method = additional_method
</snippet></ROW><ROW><id>19061129</id><snippet>Input.additional_method = lambda self, arg: do_something(arg)
</snippet></ROW><ROW><id>19061129</id><snippet>Input</snippet></ROW><ROW><id>19061129</id><snippet>Input</snippet></ROW><ROW><id>19061129</id><snippet>additional_method</snippet></ROW><ROW><id>19061129</id><snippet>Input</snippet></ROW><ROW><id>19061148</id><snippet>while count &lt; 3:
</snippet></ROW><ROW><id>19061148</id><snippet>count = 1</snippet></ROW><ROW><id>19061148</id><snippet>while count &lt;= 3:
</snippet></ROW><ROW><id>19061148</id><snippet>count</snippet></ROW><ROW><id>19061148</id><snippet>0</snippet></ROW><ROW><id>19061148</id><snippet>0 &lt; 2</snippet></ROW><ROW><id>19061148</id><snippet>count</snippet></ROW><ROW><id>19061148</id><snippet>1</snippet></ROW><ROW><id>19061148</id><snippet>1 &lt; 2</snippet></ROW><ROW><id>19061148</id><snippet>count</snippet></ROW><ROW><id>19061148</id><snippet>2</snippet></ROW><ROW><id>19061148</id><snippet>2 &lt; 2</snippet></ROW><ROW><id>19061224</id><snippet>companies_with_more_than_1_user = (
    Company.objects
        .annotate(num_users=Count('userprofile'))
        .filter(num_users__gt=1)
)
users = User.objects.filter(userprofile__company__in=companies_with_more_than_1_user)
</snippet></ROW><ROW><id>19061437</id><snippet>$(document).ready(function () {
    $("#btn").on("click", function() {
        $(this).attr("disabled", "disabled");
        doWork(); //this method contains your logic
    });
});

function doWork() {
     alert("doing work");
     //actually this function will do something and when processing is done the button is enabled by removing the 'disabled' attribute
     //I use setTimeout so you can see the button can only be clicked once, and can't be clicked again while work is being done
     setTimeout('$("#btn").removeAttr("disabled")', 1500);
}
</snippet></ROW><ROW><id>19061519</id><snippet>body = '\n'.join('%s, %s' % pair for pair in mylist)
</snippet></ROW><ROW><id>19061597</id><snippet>import csv
from cStringIO import StringIO

# parse the data you're about to filter with
with open('filters.csv', 'rb') as f:
    filters = {(row[0], row[1]) for row in csv.reader(f, delimiter=',')}

out_f = StringIO()  # use e.g. `with open('out.csv', 'wb') as out_f` for real file output
out = csv.writer(out_f, delimiter=',')

# go thru your rows and see if the pair (row[1], row[8]) is
# found in the previously parsed set of filters; if yes, skip the row
with open('data.csv', 'rb') as f:
    for row in csv.reader(f, delimiter=','):
        if (row[1], row[8]) not in filters:
            out.writerow(row)

# for debugging only
print out_f.getvalue()  # prints the resulting filtered CSV data
</snippet></ROW><ROW><id>19061597</id><snippet>{... for ... in ...}</snippet></ROW><ROW><id>19061597</id><snippet>set(... for ... in ...)</snippet></ROW><ROW><id>19061746</id><snippet>import csv

with open('linklist.csv', 'rb') as input_file, \
        open('Link Statements9.txt', 'w') as output_file:

    for row in csv.reader(input_file, delimiter=',', quoting=csv.QUOTE_NONE):
        link_name, from_unit, to_unit, rate = row
        output_file.write("Establish link %s at %s Kbps to Unit %s.\n"
                          % (link_name, rate, to_unit))
        output_file.write("Establish link %s at %s Kbps from Unit %s.\n"
                          % (link_name, rate, from_unit))
</snippet></ROW><ROW><id>19061746</id><snippet>with open(...) as ...:</snippet></ROW><ROW><id>19061910</id><snippet>day1, day2, day3</snippet></ROW><ROW><id>19061910</id><snippet>days</snippet></ROW><ROW><id>19061910</id><snippet>total_days</snippet></ROW><ROW><id>19061910</id><snippet>total_days = 3
days = []
for _ in range(total_days):
    days.append(0)
</snippet></ROW><ROW><id>19061910</id><snippet>total_days = 3
days = [0 for _ in range(total_days)]
</snippet></ROW><ROW><id>19061910</id><snippet>total_days</snippet></ROW><ROW><id>19061910</id><snippet># method definition
def start_workouts(total_days, init_workout, workout_increase):
    workouts = [(init_workout + day * workout_increase) for day in range(total_days)]
    return workouts

# method execution (3 days, starting at 100, increasing 20 each day)
my_workouts = start_workouts(3, 100, 20)
# my_workouts == [100, 120, 140]
# my_workouts[0] is "Day1"
# my_workouts[1] is "Day2"
# my_workouts[2] is "Day3"
</snippet></ROW><ROW><id>19062048</id><snippet>GetSubDatasets</snippet></ROW><ROW><id>19062048</id><snippet>import numpy, gdal, gdalconst
dataset = gdal.Open("multipage.tiff", gdalconst.GA_ReadOnly)
data = numpy.array([gdal.Open(name, gdalconst.GA_ReadOnly).ReadAsArray()
                    for name, descr in dataset.GetSubDatasets()])
</snippet></ROW><ROW><id>19062145</id><snippet>x</snippet></ROW><ROW><id>19062145</id><snippet>x = Example.get_food()
print food_dict[x] # Value at key x
</snippet></ROW><ROW><id>19062145</id><snippet>x</snippet></ROW><ROW><id>19062145</id><snippet>for x in food_dict.keys():
    print food_dict[x] # will print each value of the dict
</snippet></ROW><ROW><id>19062145</id><snippet>.keys()</snippet></ROW><ROW><id>19062145</id><snippet>for x in food_dict:
    print food_dict[x]
</snippet></ROW><ROW><id>19062181</id><snippet>output</snippet></ROW><ROW><id>19062181</id><snippet>print</snippet></ROW><ROW><id>19062181</id><snippet>output = ""
for key in range(0,26):        
    ## Other stuff
print "Key", key, ":", output
</snippet></ROW><ROW><id>19062181</id><snippet>for key in range(0,26):        
    output = ""
    ## Other stuff
    print "Key", key, ":", output
</snippet></ROW><ROW><id>19062181</id><snippet>Key 25 : MARK NBSL ... KYPI LZQJ
</snippet></ROW><ROW><id>19062181</id><snippet>Key 0 : MARK 
Key 1 : NBSL 
   #etc
Key 24 : KYPI 
Key 25 : LZQJ 
</snippet></ROW><ROW><id>19062244</id><snippet>timeit</snippet></ROW><ROW><id>19062244</id><snippet>python -mtimeit -s'import test' 'test.foo()'
</snippet></ROW><ROW><id>19062244</id><snippet>timeit</snippet></ROW><ROW><id>19062244</id><snippet>main</snippet></ROW><ROW><id>19062244</id><snippet>if __name__ == "__main__":
    sys.exit(main())
</snippet></ROW><ROW><id>19062244</id><snippet>main</snippet></ROW><ROW><id>19062244</id><snippet>args</snippet></ROW><ROW><id>19062244</id><snippet>def main(args=None):    
    if args is None:
        args = sys.argv[1:]
</snippet></ROW><ROW><id>19062244</id><snippet>timeit</snippet></ROW><ROW><id>19062244</id><snippet>args</snippet></ROW><ROW><id>19062244</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>19062244</id><snippet>import timeit
import shlex

def foo():
    total = 0
    for i in range(10000):
        total += i**3
    return total

timeit.main(args=shlex.split("""-s'from __main__ import foo' 'foo()'"""))
</snippet></ROW><ROW><id>19062244</id><snippet>100 loops, best of 3: 7.9 msec per loop
</snippet></ROW><ROW><id>19062244</id><snippet>main</snippet></ROW><ROW><id>19062244</id><snippet>main</snippet></ROW><ROW><id>19062244</id><snippet>usec</snippet></ROW><ROW><id>19062244</id><snippet>utils_timeit.py</snippet></ROW><ROW><id>19062244</id><snippet>import timeit
def timeit_auto(stmt="pass", setup="pass", repeat=3):
    """
    http://stackoverflow.com/q/19062202/190597 (endolith)
    Imitate default behavior when timeit is run as a script.

    Runs enough loops so that total execution time is greater than 0.2 sec,
    and then repeats that 3 times and keeps the lowest value.

    Returns the number of loops and the time for each loop in microseconds
    """
    t = timeit.Timer(stmt, setup)

    # determine number so that 0.2 &lt;= total time &lt; 2.0
    for i in range(1, 10):
        number = 10**i
        x = t.timeit(number) # seconds
        if x &gt;= 0.2:
            break
    r = t.repeat(repeat, number)
    best = min(r)
    usec = best * 1e6 / number
    return number, usec
</snippet></ROW><ROW><id>19062244</id><snippet>import timeit
import utils_timeit as UT

def foo():
    total = 0
    for i in range(10000):
        total += i**3
    return total

num, timing = UT.timeit_auto(setup='from __main__ import foo', stmt='foo()')
print(num, timing)
</snippet></ROW><ROW><id>19062470</id><snippet>def something():
    turtle.dot()
    turtle.pos()
</snippet></ROW><ROW><id>19062470</id><snippet>pos()</snippet></ROW><ROW><id>19062470</id><snippet>dot()</snippet></ROW><ROW><id>19062470</id><snippet>def something():
    if turtle.dot() :
        turtle.pos()
</snippet></ROW><ROW><id>19062611</id><snippet>file.read()</snippet></ROW><ROW><id>19062611</id><snippet>.readlines()</snippet></ROW><ROW><id>19062611</id><snippet>with open('drugs') as temp_file:
  drugs = [line.rstrip('\n') for line in temp_file]
</snippet></ROW><ROW><id>19062611</id><snippet>with</snippet></ROW><ROW><id>19062798</id><snippet>kwargs['client_flag'] = CLIENT.FOUND_ROWS
kwargs.update(settings_dict['OPTIONS'])
</snippet></ROW><ROW><id>19062798</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.',
        'NAME': '',                      
        'USER': '',                      
        'PASSWORD': '',                  
        'HOST': '', 
        'PORT': '',                      
        'OPTIONS': {
            'client_flag': 0
        }
    }
}
</snippet></ROW><ROW><id>19062878</id><snippet>if char in text:
    print(text)
</snippet></ROW><ROW><id>19062884</id><snippet>correlate</snippet></ROW><ROW><id>19062884</id><snippet>score = db.session.query(Scores.id).order_by(Scores.date.desc()).correlate(Students)
</snippet></ROW><ROW><id>19062884</id><snippet>correlate</snippet></ROW><ROW><id>19062884</id><snippet>Students</snippet></ROW><ROW><id>19062884</id><snippet>FROM</snippet></ROW><ROW><id>19062884</id><snippet>score = score.filter(Students.email == Scores.email)
</snippet></ROW><ROW><id>19062884</id><snippet>order_by</snippet></ROW><ROW><id>19062884</id><snippet>score = score.limit(1)
</snippet></ROW><ROW><id>19062884</id><snippet>students = db.session.query(Students, score.as_scalar()).filter_by(archive=0).order_by(Students.exam_date)
</snippet></ROW><ROW><id>19062884</id><snippet>as_scalar</snippet></ROW><ROW><id>19062884</id><snippet>limit</snippet></ROW><ROW><id>19062884</id><snippet>as_scalar</snippet></ROW><ROW><id>19062884</id><snippet>Query</snippet></ROW><ROW><id>19062884</id><snippet>students[:10]</snippet></ROW><ROW><id>19062884</id><snippet>LIMIT</snippet></ROW><ROW><id>19062913</id><snippet>Message</snippet></ROW><ROW><id>19062913</id><snippet>Text</snippet></ROW><ROW><id>19062913</id><snippet>Text</snippet></ROW><ROW><id>19062913</id><snippet>class Text(Object, ColourMixin):
    """
    A class for representing text on the screen.

    The reference point of a Text object is the centre of its
    bounding box.
    """

    def __init__(self, screen, x, y, text, size, colour, static=0):

        self.init_text (screen, x, y, text, size, colour, static)

    def init_text (self, screen, x, y, text, size, colour, static=0):
        """
        Arguments:

        screen -- the screen the object is on.
        x -- x-coordinate of centre of bounding box.
        y -- y-coordinate of centre of bounding box.
        text -- the text to display.
        size -- nominal height of the text, in pixels.
        colour -- the colour the text should be.
        """
        if not _have_font:
            raise GameError, "We don't have pygame.font, so can't create text objects"
        self._size = size
        self._colour = colour
        self._text = text
        self._font = pygame.font.Font(None, self._size)
        self._a = 0
        surface = self._create_surface()
        Object.__init__(self, screen, x, y, surface, x_offset=self._x_offset,
                        y_offset=self._y_offset, static=static)
        self.move_to(x,y)

    # There are more methods...
</snippet></ROW><ROW><id>19062913</id><snippet>__init__</snippet></ROW><ROW><id>19062913</id><snippet>self._font = pygame.font.Font(None, self._size)
self._a = 0
surface = self._create_surface()
</snippet></ROW><ROW><id>19062913</id><snippet>None</snippet></ROW><ROW><id>19062913</id><snippet>import pygame
print pygame.font.get_default_font()
</snippet></ROW><ROW><id>19062913</id><snippet>_font</snippet></ROW><ROW><id>19062913</id><snippet># Don't do this!
end_message._font = pygame.font.Font('/path/to/my/font/file', size)
</snippet></ROW><ROW><id>19062913</id><snippet>self._font = pygame.font.Font("/path/to/my/font/file", self._size)
</snippet></ROW><ROW><id>19062913</id><snippet>__init__</snippet></ROW><ROW><id>19062913</id><snippet>init_text</snippet></ROW><ROW><id>19062913</id><snippet>init_text</snippet></ROW><ROW><id>19062913</id><snippet>Message.init_message</snippet></ROW><ROW><id>19063058</id><snippet>img.shape</snippet></ROW><ROW><id>19063058</id><snippet>len(img.shape)</snippet></ROW><ROW><id>19063058</id><snippet>len(img.shape)</snippet></ROW><ROW><id>19063066</id><snippet>name</snippet></ROW><ROW><id>19063066</id><snippet>Lemma</snippet></ROW><ROW><id>19063066</id><snippet>for s in ws:
    for l in s.lemmas:
        if l.name != "flabbergasted":
            print(l.name)
</snippet></ROW><ROW><id>19063066</id><snippet>flabbergast
boggle
bowl_over
dumbfounded
dumfounded
stupefied
thunderstruck
dumbstruck
dumbstricken
</snippet></ROW><ROW><id>19063110</id><snippet>from graph_tool.all import *

g = Graph()

vals = [("a","b"), ("b","c"), ("c","d"), ("d","b"), ("c","e")]

vertexes_names = g.new_vertex_property("string") 
vertexes = {}
for start, stop in vals:
    if start not in vertexes:
        vertexes[start] = g.add_vertex()
        vertexes_names[vertexes[start]] = start
    if stop not in vertexes:
        vertexes[stop] = g.add_vertex()
        vertexes_names[vertexes[stop]] = stop
    g.add_edge(vertexes[start], vertexes[stop])

graph_tool.stats.remove_parallel_edges(g)
graph_draw(g, vertex_text=vertexes_names, vertex_font_size=18, output="output.png")
</snippet></ROW><ROW><id>19063131</id><snippet>defaultdict</snippet></ROW><ROW><id>19063131</id><snippet>lambda</snippet></ROW><ROW><id>19063131</id><snippet>trigram = defaultdict(lambda: defaultdict(lambda: defaultdict(int)))

trigram['a']['b']['c'] += 1
</snippet></ROW><ROW><id>19063327</id><snippet>z_counts = []
lines = []

with open('C://foo.csv', 'r') as f:
    lines = f.readlines() #This is your list of all the rows/lines (now populated with data)
    for index, line in enumerate(lines):
        #store the z counts and the index of the line as pairs using a tuple: `( ... )`
        z_counts.append((line.strip().split('z').count('z'), index))

    #Since you want the top 5 matches
    #Reverse is necessary since Python automatically sorts in ascending order
    print sorted(z_counts, reverse=True)[:5]
</snippet></ROW><ROW><id>19063327</id><snippet>a,b,c,d,e,f,g,h,j,i,p
a,e,f,g,h,d,e,g,z,g,z
z,z,z,c,x,s,e,f,d,s,f
q,e,r,s,f,t,y,y,u,i,f
e,p,l,l,k,k,z,z,q,e,r
o,i,i,j,l,s,w,e,r,q,g
w,e,r,f,g,s,v,h,d,b,z
t,r,y,e,u,i,o,p,d,f,j
</snippet></ROW><ROW><id>19063327</id><snippet>0
2
3
0
2
0
1
0
</snippet></ROW><ROW><id>19063327</id><snippet>[(3, 2), (2, 4), (2, 1), (1, 6), (0, 7)]
</snippet></ROW><ROW><id>19063327</id><snippet>for tpl in sorted(z_counts, reverse=True)[:5]:
    print lines[tpl[1]]
</snippet></ROW><ROW><id>19063327</id><snippet>z,z,z,c,x,s,e,f,d,s,f     #3 z's, line index 2 (3rd line)
e,p,l,l,k,k,z,z,q,e,r     #2 z's, line index 4 (5th line)
a,e,f,g,h,d,e,g,z,g,z     #2 z's, line index 1 (2nd line)
w,e,r,f,g,s,v,h,d,b,z     #1 z, line index 6 (7th line)
t,r,y,e,u,i,o,p,d,f,j     #0 z's, line index 7 (8th line)
</snippet></ROW><ROW><id>19063331</id><snippet>form = SQLFORM.factory(
    Field('email', requires=[IS_NOT_EMPTY(), IS_EMAIL(error_message='invalid email')])
    )
</snippet></ROW><ROW><id>19063358</id><snippet>nosetest</snippet></ROW><ROW><id>19063358</id><snippet>-v</snippet></ROW><ROW><id>19063358</id><snippet>--pdb</snippet></ROW><ROW><id>19063358</id><snippet>--pdb-failure</snippet></ROW><ROW><id>19063449</id><snippet>&gt;&gt;&gt; print(*['*']*n, sep='-'*m)
*--*--*
</snippet></ROW><ROW><id>19063449</id><snippet>&gt;&gt;&gt; print(*('*'*n), sep='-'*m) #this can fail if you use `'**'` instead of `'*'`
*--*--*
</snippet></ROW><ROW><id>19063449</id><snippet>['*']*n</snippet></ROW><ROW><id>19063449</id><snippet>print()</snippet></ROW><ROW><id>19063449</id><snippet>*</snippet></ROW><ROW><id>19063449</id><snippet>'-'*m</snippet></ROW><ROW><id>19063449</id><snippet>sep</snippet></ROW><ROW><id>19063449</id><snippet>&gt;&gt;&gt; ['*']*n
['*', '*', '*']
</snippet></ROW><ROW><id>19063658</id><snippet>x + 1</snippet></ROW><ROW><id>19063658</id><snippet>x</snippet></ROW><ROW><id>19063658</id><snippet>def f():
    x = 42
    def g():
        print(x)
    g()
f()
</snippet></ROW><ROW><id>19063658</id><snippet>def f():
    x = 42
    def g():
        print(x)
        x = 42
    g()
f()
</snippet></ROW><ROW><id>19063658</id><snippet>print</snippet></ROW><ROW><id>19063658</id><snippet>0 LOAD_GLOBAL              0 (print) 
3 LOAD_DEREF               0 (x) 
6 CALL_FUNCTION            1 
9 POP_TOP  
</snippet></ROW><ROW><id>19063658</id><snippet>print</snippet></ROW><ROW><id>19063658</id><snippet>0 LOAD_GLOBAL              0 (print) 
3 LOAD_FAST                0 (x) 
6 CALL_FUNCTION            1 
9 POP_TOP 
</snippet></ROW><ROW><id>19063758</id><snippet>pool.imap_unordered</snippet></ROW><ROW><id>19063758</id><snippet>pool.imap</snippet></ROW><ROW><id>19063758</id><snippet>0.01</snippet></ROW><ROW><id>19063758</id><snippet>imap_unordered</snippet></ROW><ROW><id>19063758</id><snippet>imap</snippet></ROW><ROW><id>19063758</id><snippet>i*0.1</snippet></ROW><ROW><id>19063758</id><snippet>i</snippet></ROW><ROW><id>19063758</id><snippet>imap</snippet></ROW><ROW><id>19063758</id><snippet>main</snippet></ROW><ROW><id>19063758</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>19063758</id><snippet>from multiprocessing import Pool
import time
import random

def work(i):
    time.sleep(0.1*i)
    return i

def main():
    p = Pool(4)
    nums = range(50)
    random.shuffle(nums)

    start = time.time()
    print 'Using imap'
    for i in p.imap(work, nums):
        print i
    print 'Time elapsed: %s' % (time.time() - start)

    start = time.time()
    print 'Using imap_unordered'
    for i in p.imap_unordered(work, nums):
        print i
    print 'Time elapsed: %s' % (time.time() - start)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>19063758</id><snippet>imap</snippet></ROW><ROW><id>19063758</id><snippet>imap_unordered</snippet></ROW><ROW><id>19063987</id><snippet>import csv
from collections import defaultdict

d = defaultdict(list)

with open('Links.csv', 'rb') as inf:
    reader = csv.reader(inf, delimiter=',', quoting=csv.QUOTE_NONE)
    for row in reader:
        d[row[2]].append(row)

with open('outfile.csv', 'w') as outf:
    for k,v in d.iteritems():
        outf.write('{}\n'.format(k))
        for i in v:
            up = '{1},Establish {4} link {0} at {3} Kbps to {2}.\n'
            down = up.replace('Establish','Terminate').replace('to','from')
            outf.write(up.format(*i))
            outf.write(down.format(*i))
        outf.write('\n')
</snippet></ROW><ROW><id>19064108</id><snippet>&gt;&gt;&gt; from ZODB.FileStorage import FileStorage
&gt;&gt;&gt; from ZODB.DB import DB
&gt;&gt;&gt; storage = FileStorage('Data.fs')
&gt;&gt;&gt; db = DB(storage)
&gt;&gt;&gt; connection = db.open()
&gt;&gt;&gt; root = connection.root()
&gt;&gt;&gt; root['foo'] = 'bar'
&gt;&gt;&gt; connection.close()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mj/Development/venvs/stackoverflow-2.7/lib/python2.7/site-packages/ZODB/Connection.py", line 286, in close
    raise ConnectionStateError("Cannot close a connection joined to "
ZODB.POSException.ConnectionStateError: Cannot close a connection joined to a transaction
</snippet></ROW><ROW><id>19064239</id><snippet>*</snippet></ROW><ROW><id>19064239</id><snippet>&gt;&gt;&gt; print(*[1, 2, 3])
1 2 3
</snippet></ROW><ROW><id>19064239</id><snippet>"Hello world!"</snippet></ROW><ROW><id>19064239</id><snippet>['H', 'e', 'l', etc]</snippet></ROW><ROW><id>19064405</id><snippet>maketrans</snippet></ROW><ROW><id>19064405</id><snippet>bytes</snippet></ROW><ROW><id>19064405</id><snippet># Python 3
&gt;&gt;&gt; bytes
&lt;class 'bytes'&gt;
&gt;&gt;&gt; bytes.maketrans
&lt;built-in method maketrans of type object at 0x10aa6fe70&gt;
</snippet></ROW><ROW><id>19064405</id><snippet>bytes</snippet></ROW><ROW><id>19064405</id><snippet>str</snippet></ROW><ROW><id>19064405</id><snippet># Python 2.7
&gt;&gt;&gt; bytes
&lt;type 'str'&gt;
&gt;&gt;&gt; bytes.maketrans
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: type object 'str' has no attribute 'maketrans'
</snippet></ROW><ROW><id>19064405</id><snippet>import string
import urllib2
import base64
import random

def get_appids():
    fly = string.maketrans(
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM"
    )
    f = urllib2.urlopen("http://lovejiani.com/v").read().translate(fly)
    d = base64.b64decode(f)
    e = unicode(d, encoding='ascii').split(u'\r\n')
    random.shuffle(e)
    return e
</snippet></ROW><ROW><id>19064517</id><snippet>datetime.datetime()</snippet></ROW><ROW><id>19064517</id><snippet>pytz</snippet></ROW><ROW><id>19064517</id><snippet>pytz</snippet></ROW><ROW><id>19064517</id><snippet>python-dateutil</snippet></ROW><ROW><id>19064517</id><snippet>dateutil.tz.gettz()</snippet></ROW><ROW><id>19064517</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; from dateutil.tz import gettz
&gt;&gt;&gt; datetime.datetime.now(gettz())
datetime.datetime(2013, 9, 28, 8, 34, 14, 680998, tzinfo=tzfile('/etc/localtime'))
&gt;&gt;&gt; datetime.datetime.now(gettz()).strftime('%Y-%m-%d %H:%M:%S%Z')
'2013-09-28 08:36:01BST'
</snippet></ROW><ROW><id>19064658</id><snippet>eval</snippet></ROW><ROW><id>19064658</id><snippet>with</snippet></ROW><ROW><id>19064791</id><snippet>cmds.hide(cmds.ls(lights=True, dag=True))
cmds.showHidden()
</snippet></ROW><ROW><id>19065009</id><snippet>import glob
path = '/home/kumarswamys/Adobe/download/*.py'
files=glob.glob(path)
for file in files:
    f=open(file, 'r')
    f.readlines()
    f.close()
</snippet></ROW><ROW><id>19065159</id><snippet>/</snippet></ROW><ROW><id>19065159</id><snippet>with open("/path/to/tide_data.txt", "r") as file:
</snippet></ROW><ROW><id>19065371</id><snippet>$venv/$VIRTUALENVWRAPPER_PROJECT_FILENAME</snippet></ROW><ROW><id>19065371</id><snippet>echo $VIRTUALENVWRAPPER_PROJECT_FILENAME</snippet></ROW><ROW><id>19065371</id><snippet>.project</snippet></ROW><ROW><id>19065371</id><snippet>cat $VIRTUAL_ENV/$VIRTUALENVWRAPPER_PROJECT_FILENAME</snippet></ROW><ROW><id>19065475</id><snippet>result = random.choice(attack)

if result == "Miss":
    print("You made the spider angry!")
elif result == "Hit":
    print("You killed the spider!")
</snippet></ROW><ROW><id>19065475</id><snippet>result</snippet></ROW><ROW><id>19065475</id><snippet>if choice(attack) == "Miss":  # Random runs once
    ...
if choice(attack) == "Hit":   # Random runs a second time, possibly with different results
    ...
</snippet></ROW><ROW><id>19065475</id><snippet>"Hit"</snippet></ROW><ROW><id>19065475</id><snippet>"Miss"</snippet></ROW><ROW><id>19065475</id><snippet>messages = {
    "Miss": "You made the spider angry!",
    "Hit": "You killed the spider!"
}

print(messages[choice(attack)])
</snippet></ROW><ROW><id>19065486</id><snippet>class A:
    def __init__(self):
        time.sleep(0.1)

    def a1(self):
        print 'a1'

def a2(): 
    print 'a2'

def b2():
    a2()  
    A().a1()

def x():
    t = time.clock()
    for i in xrange(100):
        b2()
    print 'elapsed: %0.1fs'%(time.clock()-t)
</snippet></ROW><ROW><id>19065486</id><snippet>x()</snippet></ROW><ROW><id>19065486</id><snippet>A()</snippet></ROW><ROW><id>19065486</id><snippet>b2()</snippet></ROW><ROW><id>19065486</id><snippet>A()</snippet></ROW><ROW><id>19065486</id><snippet>A()</snippet></ROW><ROW><id>19065486</id><snippet>A()</snippet></ROW><ROW><id>19065486</id><snippet>x()</snippet></ROW><ROW><id>19065486</id><snippet>def x():
    t = time.clock()
    instance = A()
    for i in xrange(100):
        b2(instance)
    print 'elapsed: %0.1fs'%(time.clock()-t)

def b2(instance=None):
    a2()
    if instance is None:
        instance = A()
    instance.a1()
</snippet></ROW><ROW><id>19065486</id><snippet>x()</snippet></ROW><ROW><id>19065527</id><snippet>import os

appName = "ap01"
opts =[
    "-server",
    "-filename=c:/test.VS",
    "-display=1"
]

opts = ' '.join(opts)
os.system(r'start "" "C:\bin\{:}" {:}'.format(appName, opts) )
</snippet></ROW><ROW><id>19065527</id><snippet>import subprocess
import os

app=[
    "ap01.ext",
    "-server",
    "-filename=c:/test.VS",
    "-display=1"
]

os.chdir('"C:/bin/')
subprocess.call(app, shell=True)
</snippet></ROW><ROW><id>19065575</id><snippet>#!</snippet></ROW><ROW><id>19065575</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>19065835</id><snippet>Tk()</snippet></ROW><ROW><id>19065835</id><snippet>from Tkinter import *</snippet></ROW><ROW><id>19065835</id><snippet>root = Tk()
Label(root, text="You rolled a " + diceroll + " on the " + DICE[selecteddice]["name"])
</snippet></ROW><ROW><id>19065835</id><snippet>TypeError: cannot concatenate 'str' and 'int' objects</snippet></ROW><ROW><id>19065835</id><snippet>str()</snippet></ROW><ROW><id>19065835</id><snippet>diceroll</snippet></ROW><ROW><id>19065835</id><snippet>Label(root, text="You rolled a " + str(diceroll) + " on the " + DICE[selecteddice]["name"])
</snippet></ROW><ROW><id>19065835</id><snippet>TypeError: cannot concatenate 'str' and 'instance' objects</snippet></ROW><ROW><id>19065835</id><snippet>__repr__</snippet></ROW><ROW><id>19065835</id><snippet>__str__</snippet></ROW><ROW><id>19065835</id><snippet>#The top image was produced thanks to this
import random
from Tkinter import *

selecteddice = 'sixsided'

DICE = dict(
    sixsided={'name': 'Six Sided Dice',
              'side': 6},
    eightsided = {'name': 'Eight Sided Dice',
                  'side': 8}
    )
names = ['Six Sided Dice', 'Eight Sided Dice']

root = Tk()

diceroll = random.randrange(1,DICE[selecteddice]["side"])
Label(root, text="You rolled a " + str(diceroll) + " on the " + DICE[selecteddice]["name"]).pack()

root.mainloop()
</snippet></ROW><ROW><id>19066146</id><snippet>import gc

def objects_by_id(id_):
    for obj in gc.get_objects():
        if id(obj) == id_:
            return obj
</snippet></ROW><ROW><id>19066146</id><snippet>mx.Tools.makeref(id_)
</snippet></ROW><ROW><id>19066146</id><snippet>ctypes.cast(id_, ctypes.py_object).value
</snippet></ROW><ROW><id>19066333</id><snippet>2009-05-19T11:51:47Z</snippet></ROW><ROW><id>19066333</id><snippet>date_string = "2009-05-19T11:51:47Z"
</snippet></ROW><ROW><id>19066333</id><snippet>from dateutil import parser
d1 = parser.parse(date_string)
</snippet></ROW><ROW><id>19066333</id><snippet>from datetime import datetime
d1 = datetime.strptime(date_string, "%Y-%m-%dT%H:%M:%SZ")
</snippet></ROW><ROW><id>19066333</id><snippet>(d1-d2).total_seconds()
</snippet></ROW><ROW><id>19066514</id><snippet>print(choice(attack))</snippet></ROW><ROW><id>19066514</id><snippet>hit_or_miss = random.choice(attack)
print(hit_or_miss)
</snippet></ROW><ROW><id>19066514</id><snippet>if spider == "Y":
    if hit_or_miss == "Hit":
        print(...)

    if hit_or_miss == "Miss":
        print(...)

if spider == "N":
    if hit_or_miss == "Hit":
        print(...)

    if hit_or_miss == "Miss":
        print(...)
</snippet></ROW><ROW><id>19066514</id><snippet>responses = {
    ("Y", "Hit"):  ...,
    ("Y", "Miss"): ...,
    ("N", "Hit"):  ...,
    ("N", "Miss"): ...
}

print(responses[spider, hit_or_miss])
</snippet></ROW><ROW><id>19066948</id><snippet>return</snippet></ROW><ROW><id>19066948</id><snippet>def addseven(n):
    return n + 7

a = 9
b = addseven(a)
print(b)        # should be 16
</snippet></ROW><ROW><id>19066948</id><snippet>def addseventosix(n):
    if n != 6:
        return
    else:
        return n + 7
</snippet></ROW><ROW><id>19066948</id><snippet>return</snippet></ROW><ROW><id>19066948</id><snippet>None</snippet></ROW><ROW><id>19066948</id><snippet>def functionthatisuseless(n):
    n + 7

print(functionthatisuseless(8))        # should output None
</snippet></ROW><ROW><id>19066948</id><snippet>return</snippet></ROW><ROW><id>19066948</id><snippet>def addsevenandaddeight(n):
    return (n+7, n+8)        # the parentheses aren't necessary, they are just for clarity

seven, eight = addsevenandaddeight(0)
print(seven)        # should be 7
print(eight)        # should be 8
</snippet></ROW><ROW><id>19066948</id><snippet>return</snippet></ROW><ROW><id>19066948</id><snippet>def addseven(n):
    return n+7

def timeseight(n):
    return n*8

print(addseven(timeseight(9))

# what the intepreter is doing (kind of):
# print(addseven(72))    # 72 is what is returned when timeseight is called on 9
# print(79)
# 79
</snippet></ROW><ROW><id>19066988</id><snippet>from Tkinter import *

class ImageTest(object):
    def __init__(self):

        self.window = Tk()
        self.window.geometry('300x300')

        self.init_test_screen()

        self.window.mainloop()

    def init_test_screen(self):

        self.testImg = PhotoImage(file='test.gif')
        label1 = Label(self.window, image=self.testImg )
        label1.pack()
        label2 = Label(self.window, image=self.testImg )
        label2.pack()

imagetest = ImageTest()
</snippet></ROW><ROW><id>19067066</id><snippet>import csv
import numpy as np

def security_mean(com):
    CSV = csv.reader(open("my_file.csv","rb"))
    CSV.next() # skip header row
    adj_close = np.array([row[-1] for  row in CSV], dtype=np.float32)
    value = np.mean( (adj_close[1:] / adj_close[:-1] - 1. )
    print string + ' mean: ' + str(value)
</snippet></ROW><ROW><id>19067125</id><snippet>int16</snippet></ROW><ROW><id>19067125</id><snippet>numpy.int16</snippet></ROW><ROW><id>19067125</id><snippet>RuntimeWarning: overflow encountered in short_scalars
</snippet></ROW><ROW><id>19067125</id><snippet>numpy.int16</snippet></ROW><ROW><id>19067125</id><snippet>x0_square = int16(3200)
x0 = int16(2560)
scale_factor = int16(2048)
x = int16(2048)
a = int16(x0_square +  ( ( (int16(2) * x0)  / scale_factor * (x - x0) )))
a
#&gt;&gt;&gt; 1920
</snippet></ROW><ROW><id>19067125</id><snippet>x_square_a = int16(x0_square +  ( ( (2 .* x0) ./ scale_factor .* (x - x0) )));
</snippet></ROW><ROW><id>19067302</id><snippet>x=y=Queue()
</snippet></ROW><ROW><id>19067302</id><snippet>y</snippet></ROW><ROW><id>19067302</id><snippet>Queue()</snippet></ROW><ROW><id>19067302</id><snippet>x</snippet></ROW><ROW><id>19067302</id><snippet>y</snippet></ROW><ROW><id>19067302</id><snippet>id(x) == id(y)</snippet></ROW><ROW><id>19067302</id><snippet>x=Queue()
y=Queue()
</snippet></ROW><ROW><id>19067302</id><snippet>x</snippet></ROW><ROW><id>19067302</id><snippet>Queue()</snippet></ROW><ROW><id>19067302</id><snippet>y</snippet></ROW><ROW><id>19067302</id><snippet>Queue()</snippet></ROW><ROW><id>19067302</id><snippet>id(x) == id(y)</snippet></ROW><ROW><id>19067302</id><snippet>False</snippet></ROW><ROW><id>19067302</id><snippet>a = [1,2,3,4,5]
b = a
b.append(6)
print(a)
# [1,2,3,4,5,6] even though we didn't seem to do anything to a!
</snippet></ROW><ROW><id>19067302</id><snippet>import copy; b = a.copy();</snippet></ROW><ROW><id>19067302</id><snippet>b = a</snippet></ROW><ROW><id>19067302</id><snippet>a = 7
a += 1
</snippet></ROW><ROW><id>19067302</id><snippet>a</snippet></ROW><ROW><id>19067302</id><snippet>a</snippet></ROW><ROW><id>19067302</id><snippet>a</snippet></ROW><ROW><id>19067302</id><snippet>a = 7
b = a
a += 1
print(a)
# 8
print(b)
# 7
</snippet></ROW><ROW><id>19067393</id><snippet>resolution</snippet></ROW><ROW><id>19067393</id><snippet>tickinterval</snippet></ROW><ROW><id>19067393</id><snippet>from</snippet></ROW><ROW><id>19067393</id><snippet>to</snippet></ROW><ROW><id>19067455</id><snippet>json</snippet></ROW><ROW><id>19067455</id><snippet>import json
print json.dumps({"key": "value", "numbers": [1, 2, 3],})
# {"numbers": [1, 2, 3], "key": "value"}
</snippet></ROW><ROW><id>19067771</id><snippet>lines = cv2.HoughLinesP(edges,1,np.pi/180,275, minLineLength = 600, maxLineGap = 100)[0].tolist()

for x1,y1,x2,y2 in lines:
    for index, (x3,y3,x4,y4) in enumerate(lines):

        if y1==y2 and y3==y4: # Horizontal Lines
            diff = abs(y1-y3)
        elif x1==x2 and x3==x4: # Vertical Lines
            diff = abs(x1-x3)
        else:
            diff = 0

        if diff &lt; 10 and diff is not 0:
            del lines[index]

gridsize = (len(lines) - 2) / 2
</snippet></ROW><ROW><id>19067973</id><snippet>django&lt;=1.6</snippet></ROW><ROW><id>19067973</id><snippet>app_label</snippet></ROW><ROW><id>19067973</id><snippet>Meta</snippet></ROW><ROW><id>19067973</id><snippet>models.py</snippet></ROW><ROW><id>19067973</id><snippet>django&lt;=1.6</snippet></ROW><ROW><id>19067973</id><snippet>1.7</snippet></ROW><ROW><id>19067973</id><snippet>syncdb</snippet></ROW><ROW><id>19067973</id><snippet>models/__init__.py</snippet></ROW><ROW><id>19067978</id><snippet>cv.Scalar(float(hsv_min[0]),float(hsv_min[1]),float(hsv_min[2]))
</snippet></ROW><ROW><id>19068006</id><snippet>return</snippet></ROW><ROW><id>19068006</id><snippet>def random_characters(number):
    i = 0
    new_string = ''

    while (i &lt; number) :
        new_string = random.choice(string.ascii_lowercase)
        i = i + 1
    return new_string # &lt;&lt;&lt; Dedent

random_characters(3)
#&gt;&gt;&gt; 'c'
</snippet></ROW><ROW><id>19068006</id><snippet>new_string</snippet></ROW><ROW><id>19068006</id><snippet>list</snippet></ROW><ROW><id>19068006</id><snippet>"".join</snippet></ROW><ROW><id>19068006</id><snippet>def random_characters(number):
    i = 0
    letters = [] # Place to put the letters

    while (i &lt; number) :
        letters.append(random.choice(string.ascii_lowercase)) # &lt;&lt;&lt; Add the letter
        i = i + 1
    return "".join(letters) # &lt;&lt;&lt; Join the letters into one string

random_characters(3)
#&gt;&gt;&gt; 'lgp'
</snippet></ROW><ROW><id>19068006</id><snippet>for i in range(number)</snippet></ROW><ROW><id>19068006</id><snippet>while</snippet></ROW><ROW><id>19068006</id><snippet>def random_characters(number):
    letters = []

    for i in range(number): # &lt;&lt;&lt; Deals with i for you.
        letters.append(random.choice(string.ascii_lowercase))

    return "".join(letters)

random_characters(3)
#&gt;&gt;&gt; 'xay'
</snippet></ROW><ROW><id>19068006</id><snippet>def random_characters(number):
    # MAGIC!
    letters = [random.choice(string.ascii_lowercase) for i in range(number)]

    return "".join(letters) # &lt;&lt;&lt; Join the letters into one string

random_characters(3)
#&gt;&gt;&gt; 'yby'
</snippet></ROW><ROW><id>19068006</id><snippet>%~&gt; python -i random_characters.py
&gt;&gt;&gt; random_characters(3)
'zgp'
</snippet></ROW><ROW><id>19068006</id><snippet>print</snippet></ROW><ROW><id>19068006</id><snippet>print(random_characters(3))  # Python 3
print random_characters(3)   # Python 2
</snippet></ROW><ROW><id>19068206</id><snippet>Rename your script to mygame.py.
Delete any other files in the same directory as your script named pygame.py.
</snippet></ROW><ROW><id>19068235</id><snippet>input()     # Python 3
raw_input() # Python 2
</snippet></ROW><ROW><id>19068295</id><snippet>class ActiveManager(models.Manager):
    def get_query_set(self, active=True):
        return super(ActiveManager, self).\
            get_query_set().filter(pub_date__lte=timezone.now(), is_active=active)\
                           .order_by('-pub_date')

class InctiveManager(InctiveManager):
    def get_query_set(self):
        return super(InctiveManager, self).get_query_set(is_active=False)

class LatestManager(InctiveManager):
    def get_query_set(self):
        return super(LatestManager, self).get_query_set(is_active=True)\
                                         .filter(num_choices__gte=2)\
                                         .annotate(num_choices=Count('choice'))

class Poll(models.Model):
    ...

    objects = models.Manager()
    active = ActiveManager()
    inctive = InctiveManager()
    latest = LatestManager()
</snippet></ROW><ROW><id>19068295</id><snippet>all_active_polls = Poll.active.all()
num_of_active_polls = len(all_active_polls)

all_inactive_polls = Poll.inactive.all()
num_of_inactive_polls = len(all_inactive_polls)

latest_poll_list = Poll.latest.all()[:5]
</snippet></ROW><ROW><id>19068325</id><snippet>print sess.get('http://vimeo.com/api/rest/v2', params={'method': 'vimeo.oauth.checkAccessToken'}).content

&lt;?xml version="1.0" encoding="UTF-8"?&gt;\n&lt;rsp generated_in="0.0044" stat="ok"&gt;\n  &lt;oauth&gt;\n    &lt;token&gt;...&lt;/token&gt;\n    &lt;permission&gt;delete&lt;/permission&gt;\n    &lt;user display_name="Max Countryman" id="16760357" username="user16760357"/&gt;\n  &lt;/oauth&gt;\n&lt;/rsp&gt;\n'
</snippet></ROW><ROW><id>19068325</id><snippet>from rauth.session import OAuth1Session

session = OAuth1Session(consumer_key=VIMEO_CLIENTID,
                        consumer_secret=VIMEO_CLIENTSECRET,
                        access_token=VIMEO_ACCESSTOKEN,
                        access_token_secret=VIMEO_ACCESSTOKENSECRET)

response = session.get('http://vimeo.com/api/rest/v2', params={'method': 'vimeo.oauth.checkAccessToken'})
</snippet></ROW><ROW><id>19068330</id><snippet>multiprocessing</snippet></ROW><ROW><id>19068330</id><snippet>repeat</snippet></ROW><ROW><id>19068330</id><snippet>a</snippet></ROW><ROW><id>19068330</id><snippet>def repeat(a):
    from modules import functions
    parameters = par_vals
    for i in range(large_number):
        #do lots of stuff dependent on a, plot stuff, save plots as png
</snippet></ROW><ROW><id>19068330</id><snippet>multiprocessing.pool</snippet></ROW><ROW><id>19068330</id><snippet>import multiprocessing

pool = multiprocessing.Pool(processes=6)  # Create a pool with 6 workers.
A=list_100_a #list of 100 different a values

# Use the workers in the pool to call repeat on each value of a in A.  We
# throw away the result of calling map, since it looks like the point of calling
# repeat(a) is for the side effects (files created, etc).
pool.map(repeat, A) 

# Close the pool so no more jobs can be submitted to it, then wait for 
# all workers to exit.
pool.close()
pool.join()
</snippet></ROW><ROW><id>19068330</id><snippet>result = pool.map(repeat, A)</snippet></ROW><ROW><id>19068330</id><snippet>multiprocessing</snippet></ROW><ROW><id>19068338</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>19068338</id><snippet>poll()</snippet></ROW><ROW><id>19068338</id><snippet>experiments = [...]
process = None

def start_next_experiment():
    if not experiments:
        print "Done!"
    else:
        experiment = experiments.pop()
        process = subprocess.Popen(experiment)

def on_start_clicked():
    start_next_experiment()

def on_stop_clicked():
     # Clear the queue
    experiments = []

    # optional: Kill the process
    if process:
        process.terminate()

def on_idle():
    if process:
        # use e.g. a PyQT timer to run this method periodically
        process.poll()
        if process.returncode is not None:
            process = None
            start_next_experiment()
</snippet></ROW><ROW><id>19068355</id><snippet>strptime</snippet></ROW><ROW><id>19068355</id><snippet>datetime.datetime.strptime(string_date, "%Y-%m-%d %H:%M:%S.%f")
#&gt;&gt;&gt; datetime.datetime(2013, 9, 28, 20, 30, 55, 782000)
</snippet></ROW><ROW><id>19068487</id><snippet>import numpy as np
import matplotlib.pyplot as plt

N = 10000
mean = [0, 0]
cov = [[2, 2], [0, 2]]
x,y = np.random.multivariate_normal(mean, cov, N).T

plt.scatter(x, y, s=70, alpha=0.03)
plt.ylim((-5, 5))
plt.xlim((-5, 5))
plt.show()
</snippet></ROW><ROW><id>19068668</id><snippet>pos=[i+len(init_string) for i in pos]
</snippet></ROW><ROW><id>19068668</id><snippet>i</snippet></ROW><ROW><id>19068668</id><snippet>0</snippet></ROW><ROW><id>19068668</id><snippet>pos=[k+len(init_string) for k in pos]
</snippet></ROW><ROW><id>19068668</id><snippet>i</snippet></ROW><ROW><id>19068668</id><snippet>&gt;&gt;&gt; i = 0
&gt;&gt;&gt; [i for i in range(5)]
[0, 1, 2, 3, 4]
&gt;&gt;&gt; i
0
</snippet></ROW><ROW><id>19068668</id><snippet>&gt;&gt;&gt; i = 0
&gt;&gt;&gt; [i for i in range(5)]
[0, 1, 2, 3, 4]
&gt;&gt;&gt; i
4
</snippet></ROW><ROW><id>19068714</id><snippet>&gt;&gt;&gt; lst = [{}]
&gt;&gt;&gt; lst_copy = lst[:]
&gt;&gt;&gt; lst_copy[0]['foo'] = 'bar'
&gt;&gt;&gt; lst_copy.append(42)
&gt;&gt;&gt; lst
[{'foo': 'bar'}]
&gt;&gt;&gt; id(lst) == id(lst_copy)
False
&gt;&gt;&gt; id(lst[0]) == id(lst_copy[0])
True
</snippet></ROW><ROW><id>19068714</id><snippet>42</snippet></ROW><ROW><id>19068714</id><snippet>&gt;&gt;&gt; from copy import deepcopy
&gt;&gt;&gt; lst_deepcopy = deepcopy(lst)
&gt;&gt;&gt; id(lst_deepcopy[0]) == id(lst[0])
False
</snippet></ROW><ROW><id>19068720</id><snippet>%.0f</snippet></ROW><ROW><id>19068720</id><snippet>,0f</snippet></ROW><ROW><id>19069001</id><snippet>import numpy as np
import matplotlib.pyplot as plt

# sample data
x = np.arange(10)
y = 5*x + 10 

# fit with np.polyfit
m, b = np.polyfit(x, y, 1)

plt.plot(x, y, '.')
plt.plot(x, m*x + b, '-')
</snippet></ROW><ROW><id>19069134</id><snippet>names = sorted(str(string).split(","))
</snippet></ROW><ROW><id>19069134</id><snippet>names = sorted(string[0].split(','))
</snippet></ROW><ROW><id>19069134</id><snippet>string[0]</snippet></ROW><ROW><id>19069134</id><snippet>file.readlines</snippet></ROW><ROW><id>19069134</id><snippet>names = f.read().split(',')
names.sort()
</snippet></ROW><ROW><id>19069134</id><snippet>from string import ascii_uppercase
def score(word):
    return sum(ascii_uppercase.index(c) + 1 for c in word.strip('"'))

with open('names.txt') as f:
  names = f.read().split(',')
  names.sort()
print sum(i*score(x) for i, x in enumerate(names, 1))
</snippet></ROW><ROW><id>19069134</id><snippet>string</snippet></ROW><ROW><id>19069364</id><snippet>__dict__</snippet></ROW><ROW><id>19069364</id><snippet>__getattr__</snippet></ROW><ROW><id>19069364</id><snippet>self._file</snippet></ROW><ROW><id>19069364</id><snippet>class File(object):
    def __init__(self, *args):
        self._file = open(*args)

    def __getattr__(self, name):
        return getattr(self._file, name)
</snippet></ROW><ROW><id>19069364</id><snippet>self</snippet></ROW><ROW><id>19069364</id><snippet>this</snippet></ROW><ROW><id>19069364</id><snippet>open()</snippet></ROW><ROW><id>19069364</id><snippet>file()</snippet></ROW><ROW><id>19069364</id><snippet>object</snippet></ROW><ROW><id>19069364</id><snippet>setattr()</snippet></ROW><ROW><id>19069364</id><snippet>self._file</snippet></ROW><ROW><id>19069364</id><snippet>self</snippet></ROW><ROW><id>19069364</id><snippet>class File(object):
    def __init__(self, *args):
        self._file = open(*args)
        for name in dir(self._file):
            setattr(self, name, getattr(self._file, name))
</snippet></ROW><ROW><id>19069364</id><snippet>__del__</snippet></ROW><ROW><id>19069364</id><snippet>__del__</snippet></ROW><ROW><id>19069364</id><snippet>close_the_file(f)</snippet></ROW><ROW><id>19069364</id><snippet>with</snippet></ROW><ROW><id>19069364</id><snippet>with open(somefilename) as fileobj:
    # do all sorts with fileobj

# here, fileobj will have been closed automatically.
</snippet></ROW><ROW><id>19069364</id><snippet>file.close()</snippet></ROW><ROW><id>19069364</id><snippet>with</snippet></ROW><ROW><id>19069364</id><snippet>from __future__ import with_statement # This isn't required in Python 2.6

with open("hello.txt") as f:
    for line in f:
        print line,
</snippet></ROW><ROW><id>19069401</id><snippet>positions = {}
positions[tutle.pos()] = []
</snippet></ROW><ROW><id>19069401</id><snippet>stuff = positions.get(tutle.pos())
</snippet></ROW><ROW><id>19069401</id><snippet>None</snippet></ROW><ROW><id>19069401</id><snippet>list1 = []
</snippet></ROW><ROW><id>19069401</id><snippet>list2 = list1
list3 = list2
</snippet></ROW><ROW><id>19069500</id><snippet>for item in the_list:
    item = value
</snippet></ROW><ROW><id>19069500</id><snippet>item</snippet></ROW><ROW><id>19069500</id><snippet>value</snippet></ROW><ROW><id>19069500</id><snippet>the_list[i]</snippet></ROW><ROW><id>19069500</id><snippet>for item in the_list</snippet></ROW><ROW><id>19069500</id><snippet>item</snippet></ROW><ROW><id>19069500</id><snippet>item = value</snippet></ROW><ROW><id>19069500</id><snippet>the_list[i]</snippet></ROW><ROW><id>19069634</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>19069634</id><snippet>MEDIA_ROOT = os.path.join(os.path.dirname(__file__), '..', 'media').replace('\\','/')
</snippet></ROW><ROW><id>19069634</id><snippet>&gt;&gt;&gt; x = (1,)
&gt;&gt;&gt; type(x)
&lt;type 'tuple'&gt;
&gt;&gt;&gt; x + u'foo'
Traceback (most recent call last):
    x + u'foo'
TypeError: can only concatenate tuple (not "unicode") to tuple
</snippet></ROW><ROW><id>19069689</id><snippet>datetime.datetime.strptime</snippet></ROW><ROW><id>19069689</id><snippet>date_str</snippet></ROW><ROW><id>19069689</id><snippet>format</snippet></ROW><ROW><id>19069689</id><snippet>format</snippet></ROW><ROW><id>19069689</id><snippet>date_str</snippet></ROW><ROW><id>19069689</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.strptime('28-09-2013', '%d-%m-%Y')
datetime.datetime(2013, 9, 28, 0, 0)
</snippet></ROW><ROW><id>19070008</id><snippet>&gt;&gt;&gt; dic = {'Mr A':[1200,1500,1100], 'Mr B':[2200, 3000, 1200]}
&gt;&gt;&gt; [key for key, value in dic.iteritems() if 1200 in value]
['Mr A', 'Mr B']
&gt;&gt;&gt; [key for key, value in dic.iteritems() if 3000 in value]
['Mr B']
</snippet></ROW><ROW><id>19070032</id><snippet>print</snippet></ROW><ROW><id>19070032</id><snippet>for i in range(0, 5000):
    piece = ((number/10**i)//1)%10
    if piece:
        print(i, piece)
    x+=((number/10**i)//1)%10
</snippet></ROW><ROW><id>19070032</id><snippet>number = 10**24</snippet></ROW><ROW><id>19070032</id><snippet>0 4.0
1 2.0
24 1.0
7.0
</snippet></ROW><ROW><id>19070032</id><snippet>i</snippet></ROW><ROW><id>19070032</id><snippet>&gt;&gt;&gt; 10**24/10**0
1e+24
&gt;&gt;&gt; _ // 1
1e+24
&gt;&gt;&gt; _ % 10
4.0
</snippet></ROW><ROW><id>19070032</id><snippet>10**24</snippet></ROW><ROW><id>19070032</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal(1e24)
Decimal('999999999999999983222784')
</snippet></ROW><ROW><id>19070032</id><snippet>1e24</snippet></ROW><ROW><id>19070032</id><snippet>999999999999999983222784</snippet></ROW><ROW><id>19070032</id><snippet>4</snippet></ROW><ROW><id>19070032</id><snippet>10</snippet></ROW><ROW><id>19070032</id><snippet>number = 10**24
x=0
for i in range(0, 5000):
    x += number//10**i % 10
print(x)
</snippet></ROW><ROW><id>19070032</id><snippet>1</snippet></ROW><ROW><id>19070032</id><snippet>print(sum(int(ch) for ch in str(number)))
</snippet></ROW><ROW><id>19070146</id><snippet>meshgrid</snippet></ROW><ROW><id>19070146</id><snippet>import numpy as np
x = np.linspace(1, 3.5, 6)
y = np.linspace(1, 3, 5)
X, Y = np.meshgrid(x, y)
</snippet></ROW><ROW><id>19070146</id><snippet>F</snippet></ROW><ROW><id>19070146</id><snippet>z = np.array([F(x,y) for x,y in zip(np.ravel(X), np.ravel(Y))])
Z = z.reshape(X.shape)
</snippet></ROW><ROW><id>19070146</id><snippet>from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z)
ax.set_xlabel('X')
ax.set_ylabel('Y')
ax.set_zlabel('F(X, Y)')
plt.show()
</snippet></ROW><ROW><id>19070146</id><snippet>imshow</snippet></ROW><ROW><id>19070146</id><snippet>F</snippet></ROW><ROW><id>19070242</id><snippet>new_parent</snippet></ROW><ROW><id>19070242</id><snippet>a</snippet></ROW><ROW><id>19070242</id><snippet>new_parent</snippet></ROW><ROW><id>19070242</id><snippet>new_parent</snippet></ROW><ROW><id>19070242</id><snippet>a</snippet></ROW><ROW><id>19070242</id><snippet>import lxml.etree

xml = '''&lt;?xml version='1.0' encoding='ASCII'?&gt;
&lt;root&gt;
  &lt;a&gt;
    &lt;b&gt;something&lt;/b&gt;
    &lt;c&gt;something different&lt;/c&gt;
  &lt;/a&gt;
&lt;/root&gt;'''

root = lxml.etree.fromstring(xml)
a = root.find('.//a')
parent = lxml.etree.Element('new_parent')
for child in a:
    parent.append(child)
a.append(parent)

print lxml.etree.tostring(root, xml_declaration=True)
</snippet></ROW><ROW><id>19070242</id><snippet>&lt;?xml version='1.0' encoding='ASCII'?&gt;
&lt;root&gt;
  &lt;a&gt;
    &lt;new_parent&gt;
      &lt;b&gt;something&lt;/b&gt;
      &lt;c&gt;something different&lt;/c&gt;
    &lt;/new_parent&gt;
  &lt;/a&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>19070242</id><snippet>extend</snippet></ROW><ROW><id>19070242</id><snippet>append</snippet></ROW><ROW><id>19070242</id><snippet>root = lxml.etree.fromstring(xml)
a = root.find('.//a')
parent = lxml.etree.Element('new_parent')
parent.extend(a)
a.append(parent)
</snippet></ROW><ROW><id>19070303</id><snippet>import arcpy,os, easygui,sys

mssng_files = r'L:\SF_HMP - transferred to Ydrive\Maps\broken_links_missing_files.txt'
wkspc = easygui.enterbox("Enter workspace path:",title='Search for Files')
output_loc = easygui.enterbox("Output location:",title='Copy Files')

with open(mssng_files) as filelist:
  for line in filelist:
    files_to_find.append(line.strip())


for dirpath, dirnames, filenames in arcpy.da.Walk(wkspc,datatype='FeatureClass'):
  for filename in filenames:
        if filename in files_to_find:
            ws_l = os.path.join(dirpath,filename)
            arcpy.env.workspace = ws_l
            arcpy.FeatureClassToGeodatabase_conversion(ws_l,output_loc)

for dirpath, dirnames, filenames in arcpy.da.Walk(wkspc,datatype='RasterDataset'):
  for filename in filenames:
        if filename in files_to_find:
            ws_r = os.path.join(dirpath,filename)
            arcpy.env.workspace = ws_r
            arcpy.RasterToGeodatabase_conversion(ws_r,output_loc)

for dirpath, dirnames, filenames in arcpy.da.Walk(wkspc,datatype='Table'):
  for filename in filenames:
        if filename in files_to_find:
            ws_t = os.path.join(dirpath,filename)
            arcpy.env.workspace = ws_t
            arcpy.TableToGeodatabase_conversion(ws_t,output_loc)
</snippet></ROW><ROW><id>19070308</id><snippet>re.match</snippet></ROW><ROW><id>19070308</id><snippet>re.search</snippet></ROW><ROW><id>19070308</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.match('a', 'abc')
&lt;_sre.SRE_Match object at 0x0000000001E18578&gt;
&gt;&gt;&gt; re.match('a', 'bac')
&gt;&gt;&gt; re.search('a', 'bac')
&lt;_sre.SRE_Match object at 0x0000000002654370&gt;
</snippet></ROW><ROW><id>19070308</id><snippet>search() vs. match()</snippet></ROW><ROW><id>19070674</id><snippet>$ A=5</snippet></ROW><ROW><id>19070674</id><snippet>$ export B="kkk"</snippet></ROW><ROW><id>19070674</id><snippet>export</snippet></ROW><ROW><id>19070674</id><snippet>environment</snippet></ROW><ROW><id>19070674</id><snippet>environment</snippet></ROW><ROW><id>19070674</id><snippet>$ A="kkk"</snippet></ROW><ROW><id>19070674</id><snippet>environment</snippet></ROW><ROW><id>19070674</id><snippet>environment</snippet></ROW><ROW><id>19070674</id><snippet>environment</snippet></ROW><ROW><id>19070713</id><snippet>words_starting_in_M = []
with open(filepath) as wordsfile:
    for line in wordsfile:
        if line.startswith("M"):
            words_starting_in_M.append(line.rstrip())
</snippet></ROW><ROW><id>19070756</id><snippet>seek()</snippet></ROW><ROW><id>19070756</id><snippet>seek()</snippet></ROW><ROW><id>19070756</id><snippet>tell()</snippet></ROW><ROW><id>19070756</id><snippet>print&gt;&gt;fout, header
pos = fout.tell()
</snippet></ROW><ROW><id>19070756</id><snippet>pos</snippet></ROW><ROW><id>19070756</id><snippet>len(header) + 1</snippet></ROW><ROW><id>19070756</id><snippet>fout.seek(len("%% this is the header line\n"))
</snippet></ROW><ROW><id>19070756</id><snippet>fout.seek(pos)
</snippet></ROW><ROW><id>19070842</id><snippet>a</snippet></ROW><ROW><id>19070842</id><snippet>fooo().a</snippet></ROW><ROW><id>19070842</id><snippet>fooo</snippet></ROW><ROW><id>19070842</id><snippet>y = fooo()
y.a = 5
</snippet></ROW><ROW><id>19070957</id><snippet>n = Day[:-1]   ##go to end of tuple
Day = [Total_Output for n in range(Num_Days)] ##add data (Total_Output to end of tuple
</snippet></ROW><ROW><id>19070957</id><snippet>n</snippet></ROW><ROW><id>19070957</id><snippet>n</snippet></ROW><ROW><id>19070957</id><snippet>for n in</snippet></ROW><ROW><id>19070957</id><snippet>list</snippet></ROW><ROW><id>19070957</id><snippet>Day</snippet></ROW><ROW><id>19070957</id><snippet>Day</snippet></ROW><ROW><id>19070957</id><snippet>[Total_Output] * Num_Days</snippet></ROW><ROW><id>19070957</id><snippet>list</snippet></ROW><ROW><id>19070957</id><snippet>Num_Days</snippet></ROW><ROW><id>19070957</id><snippet>Total_Output</snippet></ROW><ROW><id>19070957</id><snippet>Day.append(Total_Output)
</snippet></ROW><ROW><id>19071026</id><snippet>from multiprocessing import Lock, Process, Queue, current_process
import time

class Testclass(object):
    def __init__(self, x):
        self.x = x

def toyfunction(testclass):
    testclass.product = testclass.x * testclass.x
    return testclass


def worker(work_queue, done_queue):
    try:
        for testclass in iter(work_queue.get, 'STOP'):
            print(testclass.counter)
            newtestclass = toyfunction(testclass)
            done_queue.put(newtestclass)

    except:
        print('error')

    return True

def main():

    counter = 1

    database = []
    while counter &lt;= 100:
        database.append(Testclass(10))
        counter += 1
        print(counter)



    workers = 8
    work_queue = Queue()
    done_queue = Queue()
    processes = []

    start = time.clock()
    counter = 1

    for testclass in database:
        testclass.counter = counter
        work_queue.put(testclass)
        counter += 1
        print(counter)


    print('items loaded')
    for w in range(workers):
        p = Process(target=worker, args=(work_queue, done_queue))
        p.start()
        processes.append(p)
        work_queue.put('STOP')

    for p in processes:
        p.join()

    done_queue.put('STOP')

    newdatabase = []
    for testclass in iter(done_queue.get, 'STOP'):
        newdatabase.append(testclass)

    print(time.clock()-start)
    print("Done")
    return(newdatabase)

if __name__ == '__main__':
    database = main()
</snippet></ROW><ROW><id>19071214</id><snippet>conda</snippet></ROW><ROW><id>19071214</id><snippet>conda build</snippet></ROW><ROW><id>19071214</id><snippet>setup.py develop</snippet></ROW><ROW><id>19071217</id><snippet>import scipy.optimize

banana = lambda x: 100*(x[1]-x[0]**2)**2+(1-x[0])**2
xopt = scipy.optimize.fmin(func=banana, x0=[-1.2,1])
</snippet></ROW><ROW><id>19071217</id><snippet>Optimization terminated successfully.
         Current function value: 0.000000
         Iterations: 85
         Function evaluations: 159
array([ 1.00002202,  1.00004222])
</snippet></ROW><ROW><id>19071239</id><snippet>socketobject</snippet></ROW><ROW><id>19071239</id><snippet>select</snippet></ROW><ROW><id>19071239</id><snippet>fileno</snippet></ROW><ROW><id>19071239</id><snippet>def SocketWrapper(object):
    def __init__(self, socket):
        self.socketobj = socket # use whatever you are already doing

    def fileno(self):
        return self.socketobj.fileno()
</snippet></ROW><ROW><id>19071239</id><snippet>SocketWrapper</snippet></ROW><ROW><id>19071239</id><snippet>select</snippet></ROW><ROW><id>19071468</id><snippet>re.sub</snippet></ROW><ROW><id>19071468</id><snippet>S = """\
&lt;a&gt; &lt;b&gt; &lt;c&gt;.
&lt;d&gt; db:connect &lt;e&gt;.
db:start &lt;f&gt; &lt;g&gt;.
&lt;h&gt; &lt;i&gt; "hello".
"""

import re

expand_tags = re.sub(r"&lt;(.*?)&gt;", r"&lt;http://www.mycompany.com/\1&gt;", S)
expand_db = re.sub(r"db:(.*?)\s", r"&lt;http://www.mydbcompany.com/\1&gt;", expand_tags)

print(expand_db)
#&gt;&gt;&gt; &lt;http://www.mycompany.com/a&gt; &lt;http://www.mycompany.com/b&gt; &lt;http://www.mycompany.com/c&gt;.
#&gt;&gt;&gt; &lt;http://www.mycompany.com/d&gt; &lt;http://www.mydbcompany.com/connect&gt;&lt;http://www.mycompany.com/e&gt;.
#&gt;&gt;&gt; &lt;http://www.mydbcompany.com/start&gt;&lt;http://www.mycompany.com/f&gt; &lt;http://www.mycompany.com/g&gt;.
#&gt;&gt;&gt; &lt;http://www.mycompany.com/h&gt; &lt;http://www.mycompany.com/i&gt; "hello".
</snippet></ROW><ROW><id>19071468</id><snippet>\1</snippet></ROW><ROW><id>19071503</id><snippet>a</snippet></ROW><ROW><id>19071503</id><snippet>banana</snippet></ROW><ROW><id>19071503</id><snippet>a = 'x'</snippet></ROW><ROW><id>19071503</id><snippet>count_letters('a', 'banana')
</snippet></ROW><ROW><id>19071503</id><snippet>l = 'a'
s = 'banana'

count_letters(l, s)
</snippet></ROW><ROW><id>19071551</id><snippet>#</snippet></ROW><ROW><id>19071551</id><snippet>sudo</snippet></ROW><ROW><id>19071551</id><snippet>root@hostname / # ls -a
</snippet></ROW><ROW><id>19071551</id><snippet>someone@hostname ~ $ ls -a
</snippet></ROW><ROW><id>19071568</id><snippet>$ ps -fA | grep python
  501 81651 12648   0  9:53PM ttys000    0:00.16 python -m SimpleHTTPServer
</snippet></ROW><ROW><id>19071568</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>19071568</id><snippet>python</snippet></ROW><ROW><id>19071568</id><snippet>http://localhost:8000/</snippet></ROW><ROW><id>19071568</id><snippet>kill 81651
</snippet></ROW><ROW><id>19071568</id><snippet>$ python -m SimpleHTTPServer 8910
Serving HTTP on 0.0.0.0 port 8910 ...
</snippet></ROW><ROW><id>19071568</id><snippet>http://localhost:8910</snippet></ROW><ROW><id>19071568</id><snippet>8910</snippet></ROW><ROW><id>19071738</id><snippet>seq1 = range(1, 11)
seq2 = (fn(j) for j in seq1)
assertSequenceEqual(seq1, seq2)
</snippet></ROW><ROW><id>19071738</id><snippet>def fn(i): ...
output = ...

class TestSequence(unittest.TestCase):
    pass

if __name__ == '__main__':
    for i in range(1,11):
        testmethodname = 'test_fn_{0}'.format(i)
        testmethod = lambda self: self.assertEqual(fn(i), output[i])
        setattr(TestSequence, testmethodname, testmethod)
    unittest.main()
</snippet></ROW><ROW><id>19071738</id><snippet>import nose.tools

def test_fn():
    for i in range(1, 11):
        yield nose.tools.assert_equals, output[i], fn(i)
</snippet></ROW><ROW><id>19071769</id><snippet>df_columns = ['a', 'b', 'a', 'a_2', 'a_2', 'a', 'a_2', 'a_2_2']

def uniquify(df_columns):
    seen = set()

    for item in df_columns:
        fudge = 1
        newitem = item

        while newitem in seen:
            fudge += 1
            newitem = "{}_{}".format(item, fudge)

        yield newitem
        seen.add(newitem)

list(uniquify(df_columns))
#&gt;&gt;&gt; ['a', 'b', 'a_2', 'a_2_2', 'a_2_3', 'a_3', 'a_2_4', 'a_2_2_2']
</snippet></ROW><ROW><id>19071844</id><snippet>None</snippet></ROW><ROW><id>19071844</id><snippet>def VisitNode(self, node, target):
    # Base case. If we found the target, return target in a list
    if node == target:
        return [node]

    # If we're at a leaf and it isn't the target, return None 
    if len(self.neighbors(node)) == 0:
        return None

    # recursively iterate over children
    for i in self.neighbors_iter(node):
        tail = self.VisitNode(i, target)
        if tail: # is not None
            return [node] + tail # prepend node to path back from target
    return None #none of the children contains target
</snippet></ROW><ROW><id>19071844</id><snippet>neighbours_iter</snippet></ROW><ROW><id>19071844</id><snippet>def VisitNode(self, node, target):
    # Base case. If we found the target, return target in a list
    if node == target:
        return [node]
    # recursively iterate over children
    for i in self.neighbors_iter(node):
        tail = self.VisitNode(i, target)
        if tail: # is not None
            return [node] + tail # prepend node to path back from target
    return None # leaf node or none of the child contains target
</snippet></ROW><ROW><id>19071844</id><snippet>else</snippet></ROW><ROW><id>19071844</id><snippet>if</snippet></ROW><ROW><id>19071857</id><snippet>#! /usr/bin/env python
# coding= utf-8

import csv

csvFile = 'myCSVfile.csv'
xmlFile = 'myXMLfile.xml'

csvData = csv.reader(open(csvFile))
xmlData = open(xmlFile, 'w')
xmlData.write('&lt;?xml version="1.0" encoding="utf-8"?&gt;' + "\n")
# there must be only one top-level tag
xmlData.write('&lt;Catchment xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"&gt;' + "\n")
xmlData.write('&lt;CatchmentParamters&gt;' + "\n")
rowNum = 0


for row in csvData:
    if rowNum == 0:
        tags = row
        # replace spaces w/ underscores in tag names
        for i in range(0, 2):
            tags[i] = tags[i].replace(' ', '_')

    else: 
      for i in range(0, 2):
            xmlData.write('    ' + '&lt;' + tags[i] + '&gt;' \
                          + row[i] + '&lt;/' + tags[i] + '&gt;' + "\n")

      xmlData.write('&lt;/CatchmentParameters&gt;' + "\n")
      xmlData.write('&lt;VegetationZone&gt;' + "\n")
      xmlData.write('&lt;VegetationZoneParameters&gt;' + "\n")

      for i in range(2, 4):
            xmlData.write('    ' + '&lt;' + tags[i] + '&gt;' \
                          + row[i] + '&lt;/' + tags[i] + '&gt;' + "\n")

      xmlData.write('&lt;/VegetationZoneParameters&gt;' + "\n")
      xmlData.write('&lt;/VegetationZone&gt;' + "\n")

    rowNum +=1

xmlData.write('&lt;/Catchment&gt;' + "\n")
xmlData.close()
</snippet></ROW><ROW><id>19071885</id><snippet>from gi.repository import Gtk

class CursorSample(Gtk.Application):
    def __init__(self):
        Gtk.Application.__init__(self, application_id="org.app.CursorSample")

        self.buffer = Gtk.TextBuffer()
        self.buffer.connect("notify::cursor-position",
                            self.on_cursor_position_changed)

        self.tw = Gtk.TextView()
        self.tw.set_buffer(self.buffer)
        self.tw.props.wrap_mode = Gtk.WrapMode.CHAR

    def do_activate(self):
        main_window = Gtk.Window(Gtk.WindowType.TOPLEVEL)
        main_window.add(self.tw)
        self.add_window(main_window)
        main_window.set_position(Gtk.WindowPosition.CENTER)
        main_window.show_all()

    def on_cursor_position_changed(self, buffer, data=None):
        print buffer.props.cursor_position

if __name__ == "__main__":
    cursorsample = CursorSample()
    cursorsample.run(None)
</snippet></ROW><ROW><id>19071964</id><snippet>title</snippet></ROW><ROW><id>19071964</id><snippet>text</snippet></ROW><ROW><id>19072033</id><snippet>print(throw_card(7,2))</snippet></ROW><ROW><id>19072033</id><snippet>throw_card</snippet></ROW><ROW><id>19072033</id><snippet>None</snippet></ROW><ROW><id>19072033</id><snippet>throw_card(7,2)
throw_card(19,4)
throw_card(10,5)
throw_card(6,3)
throw_card(4000,7)
</snippet></ROW><ROW><id>19072041</id><snippet>python program.py input_1.txt input_2.txt &gt; out.txt 
</snippet></ROW><ROW><id>19072041</id><snippet>from subprogram import MyClass
import sys

if __name__ == '__main__':
    class = MyClass()
    class.run(sys.argv)
</snippet></ROW><ROW><id>19072041</id><snippet>cat input1.txt input2.txt | python subprogram.py &gt; out.txt
</snippet></ROW><ROW><id>19072304</id><snippet>x=[0,1,2]
y=[0,4,5]

from itertools import product

for lst in product(*(range(a, b+1) for a, b in zip(x, y))):
    print(lst)
#&gt;&gt;&gt; (0, 1, 2)
#&gt;&gt;&gt; (0, 1, 3)
#&gt;&gt;&gt; (0, 1, 4)
#&gt;&gt;&gt; (0, 1, 5)
#&gt;&gt;&gt; (0, 2, 2)
#&gt;&gt;&gt; (0, 2, 3)
#&gt;&gt;&gt; (0, 2, 4)
#&gt;&gt;&gt; (0, 2, 5)
#&gt;&gt;&gt; (0, 3, 2)
#&gt;&gt;&gt; (0, 3, 3)
#&gt;&gt;&gt; (0, 3, 4)
#&gt;&gt;&gt; (0, 3, 5)
#&gt;&gt;&gt; (0, 4, 2)
#&gt;&gt;&gt; (0, 4, 3)
#&gt;&gt;&gt; (0, 4, 4)
#&gt;&gt;&gt; (0, 4, 5)
</snippet></ROW><ROW><id>19072304</id><snippet>zip</snippet></ROW><ROW><id>19072304</id><snippet>x</snippet></ROW><ROW><id>19072304</id><snippet>y</snippet></ROW><ROW><id>19072304</id><snippet>[(0, 0), (1, 4), (2, 5)]</snippet></ROW><ROW><id>19072304</id><snippet>for a, b in</snippet></ROW><ROW><id>19072304</id><snippet>a</snippet></ROW><ROW><id>19072304</id><snippet>b</snippet></ROW><ROW><id>19072304</id><snippet>a = 1</snippet></ROW><ROW><id>19072304</id><snippet>b = 4</snippet></ROW><ROW><id>19072304</id><snippet>range</snippet></ROW><ROW><id>19072304</id><snippet>range(a, b+1)</snippet></ROW><ROW><id>19072304</id><snippet>[ range(0, 1), range(1, 5), range(2, 6) ]
</snippet></ROW><ROW><id>19072304</id><snippet>product</snippet></ROW><ROW><id>19072304</id><snippet>product</snippet></ROW><ROW><id>19072304</id><snippet>product(*[ range(0, 1), range(1, 5), range(2, 6) ])
</snippet></ROW><ROW><id>19072304</id><snippet>product(range(0, 1), range(1, 5), range(2, 6))
</snippet></ROW><ROW><id>19072429</id><snippet>./</snippet></ROW><ROW><id>19072429</id><snippet>bin/python</snippet></ROW><ROW><id>19072429</id><snippet>python</snippet></ROW><ROW><id>19072429</id><snippet>bin</snippet></ROW><ROW><id>19072429</id><snippet>/bin/python</snippet></ROW><ROW><id>19072429</id><snippet>python</snippet></ROW><ROW><id>19072429</id><snippet>./bin/python</snippet></ROW><ROW><id>19072429</id><snippet>bin/python</snippet></ROW><ROW><id>19072429</id><snippet>.</snippet></ROW><ROW><id>19072429</id><snippet>PATH</snippet></ROW><ROW><id>19072429</id><snippet>./exec-name</snippet></ROW><ROW><id>19072429</id><snippet>exec-name</snippet></ROW><ROW><id>19072429</id><snippet>.</snippet></ROW><ROW><id>19072429</id><snippet>PATH</snippet></ROW><ROW><id>19072429</id><snippet>bin/python</snippet></ROW><ROW><id>19072429</id><snippet>PATH</snippet></ROW><ROW><id>19072429</id><snippet>bin/python</snippet></ROW><ROW><id>19072429</id><snippet>./bin/python</snippet></ROW><ROW><id>19072429</id><snippet>PATH</snippet></ROW><ROW><id>19072711</id><snippet>virtualenv --help
Usage: virtualenv [OPTIONS] DEST_DIR
</snippet></ROW><ROW><id>19072711</id><snippet>"." (dot) has many meanings:
In a pathname it means "current directory"--eg. ./filename
As a prefix to a filename, it causes it to be hidden--eg. .filename
It is a synonym for the "source" command--used to pull an executable file into a script.--eg: . execfile (note the space)
In a regular expression it matches any single character.
</snippet></ROW><ROW><id>19072711</id><snippet>virtualenv .</snippet></ROW><ROW><id>19072745</id><snippet>email</snippet></ROW><ROW><id>19072745</id><snippet>username_or_email</snippet></ROW><ROW><id>19072745</id><snippet>from scrapy.http import FormRequest
from scrapy.spider import BaseSpider


class LoginSpider(BaseSpider):
    name = 'pinterest'
    start_urls = ['https://www.pinterest.com/login/']
    # you can set the user agent either in the settings or the spider
    user_agent = ('Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) '
                  'AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 '
                  'Mobile/9A334 Safari/7534.48.3')

    def parse(self, response):
        data = {'email': 'XXX@xxx', 'password': 'xxx'}
        # no need for dont_filter
        return FormRequest.from_response(response, formdata=data, callback=self.after_login)

    def after_login(self, response):
        print response.url
</snippet></ROW><ROW><id>19072745</id><snippet>$ scrapy runspider pinterest.py
2013-09-28 19:16:58-0400 [scrapy] INFO: Scrapy 0.16.5 started (bot: scrapybot)
2013-09-28 19:16:58-0400 [scrapy] DEBUG: Enabled extensions: LogStats, TelnetConsole, CloseSpider, WebService, CoreStats, SpiderState
2013-09-28 19:16:58-0400 [scrapy] DEBUG: Enabled downloader middlewares: HttpAuthMiddleware, DownloadTimeoutMiddleware, UserAgentMiddleware, RetryMiddleware, DefaultHeadersMiddleware, RedirectMiddleware, CookiesMiddleware, HttpCompressionMiddleware, ChunkedTransferMiddleware, DownloaderStats
2013-09-28 19:16:58-0400 [scrapy] DEBUG: Enabled spider middlewares: HttpErrorMiddleware, OffsiteMiddleware, RefererMiddleware, UrlLengthMiddleware, DepthMiddleware
2013-09-28 19:16:58-0400 [scrapy] DEBUG: Enabled item pipelines: 
2013-09-28 19:16:58-0400 [pinterest] INFO: Spider opened
2013-09-28 19:16:58-0400 [pinterest] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)
2013-09-28 19:16:58-0400 [scrapy] DEBUG: Telnet console listening on 0.0.0.0:6023
2013-09-28 19:16:58-0400 [scrapy] DEBUG: Web service listening on 0.0.0.0:6080
2013-09-28 19:17:01-0400 [pinterest] DEBUG: Crawled (200) &lt;GET https://www.pinterest.com/login/&gt; (referer: None)
2013-09-28 19:17:09-0400 [pinterest] DEBUG: Redirecting (302) to &lt;GET http://www.pinterest.com/&gt; from &lt;POST https://www.pinterest.com/login/?next=%2Flogin%2F&gt;
2013-09-28 19:17:09-0400 [pinterest] DEBUG: Redirecting (302) to &lt;GET http://www.pinterest.com/join/discover/&gt; from &lt;GET http://www.pinterest.com/&gt;
2013-09-28 19:17:10-0400 [pinterest] DEBUG: Crawled (200) &lt;GET http://www.pinterest.com/join/discover/&gt; (referer: https://www.pinterest.com/login/)
http://www.pinterest.com/join/discover/
</snippet></ROW><ROW><id>19072991</id><snippet>('&lt;MY_TOKEN&gt;')
</snippet></ROW><ROW><id>19072991</id><snippet>'&lt;MY_TOKEN&gt;'
</snippet></ROW><ROW><id>19072991</id><snippet>('TOK', '&lt;MY_TOKEN&gt;')
</snippet></ROW><ROW><id>19072991</id><snippet>'VE9LOjxNWV9UT0tFTj4K'
</snippet></ROW><ROW><id>19072991</id><snippet>'TOK:&lt;MY_TOKEN&gt;'</snippet></ROW><ROW><id>19072991</id><snippet>r = requests.get('&lt;MY_URI&gt;', headers={'Authorization': 'TOK:&lt;MY_TOKEN&gt;'})
</snippet></ROW><ROW><id>19073100</id><snippet>re.sub</snippet></ROW><ROW><id>19073100</id><snippet>p.sub(lambda m: threeLetterDict[m.group(0)], "abcdefghi")
</snippet></ROW><ROW><id>19073347</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>19073347</id><snippet>myproject.settings</snippet></ROW><ROW><id>19073347</id><snippet>from myproject import settings</snippet></ROW><ROW><id>19073347</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19073347</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19073347</id><snippet>/home/rolando/projects</snippet></ROW><ROW><id>19073347</id><snippet>$ cd ~/projects
$ django-admin startproject myweb
$ cd myweb
$ ./manage.py startapp myapp
</snippet></ROW><ROW><id>19073347</id><snippet>myapp/models.py</snippet></ROW><ROW><id>19073347</id><snippet>from django.db import models


class Person(models.Model):
    name = models.CharField(max_length=32)
</snippet></ROW><ROW><id>19073347</id><snippet>myapp</snippet></ROW><ROW><id>19073347</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>19073347</id><snippet>myweb/settings.py</snippet></ROW><ROW><id>19073347</id><snippet># at the end of settings.py
INSTALLED_APPS += ('myapp',)
</snippet></ROW><ROW><id>19073347</id><snippet>myweb/settings.py</snippet></ROW><ROW><id>19073347</id><snippet># at the end of settings.py
DATABASES['default']['ENGINE'] = 'django.db.backends.sqlite3'
DATABASES['default']['NAME'] = '/tmp/myweb.db'
</snippet></ROW><ROW><id>19073347</id><snippet>$ ./manage.py syncdb --noinput
Creating tables ...
Installing custom SQL ...
Installing indexes ...
Installed 0 object(s) from 0 fixture(s)
</snippet></ROW><ROW><id>19073347</id><snippet>$ cd ~/projects
$ scrapy startproject mybot
$ cd mybot
</snippet></ROW><ROW><id>19073347</id><snippet>mybot/items.py</snippet></ROW><ROW><id>19073347</id><snippet>from scrapy.contrib.djangoitem import DjangoItem
from scrapy.item import Field

from myapp.models import Person


class PersonItem(DjangoItem):
    # fields for this item are automatically created from the django model
    django_model = Person
</snippet></ROW><ROW><id>19073347</id><snippet>/home/rolando/projects
├── mybot
│   ├── mybot
│   │   ├── __init__.py
│   │   ├── items.py
│   │   ├── pipelines.py
│   │   ├── settings.py
│   │   └── spiders
│   │       └── __init__.py
│   └── scrapy.cfg
└── myweb
    ├── manage.py
    ├── myapp
    │   ├── __init__.py
    │   ├── models.py
    │   ├── tests.py
    │   └── views.py
    └── myweb
        ├── __init__.py
        ├── settings.py
        ├── urls.py
        └── wsgi.py
</snippet></ROW><ROW><id>19073347</id><snippet>scrapy shell</snippet></ROW><ROW><id>19073347</id><snippet>$ cd ~/projects/mybot
$ PYTHONPATH=~/projects/myweb DJANGO_SETTINGS_MODULE=myweb.settings scrapy shell

# ... scrapy banner, debug messages, python banner, etc.

In [1]: from mybot.items import PersonItem

In [2]: i = PersonItem(name='rolando')

In [3]: i.save()
Out[3]: &lt;Person: Person object&gt;

In [4]: PersonItem.django_model.objects.get(name='rolando')
Out[4]: &lt;Person: Person object&gt;
</snippet></ROW><ROW><id>19073347</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19073347</id><snippet>mybot/settings.py</snippet></ROW><ROW><id>19073347</id><snippet># Setting up django's project full path.
import sys
sys.path.insert(0, '/home/rolando/projects/myweb')

# Setting up django's settings module name.
# This module is located at /home/rolando/projects/myweb/myweb/settings.py.
import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'myweb.settings'
</snippet></ROW><ROW><id>19073347</id><snippet>$ cd ~/projects/mybot
$ scrapy genspider -t basic example example.com
</snippet></ROW><ROW><id>19073347</id><snippet># file: mybot/spiders/example.py
from scrapy.spider import BaseSpider
from mybot.items import PersonItem


class ExampleSpider(BaseSpider):
    name = "example"
    allowed_domains = ["example.com"]
    start_urls = ['http://www.example.com/']

    def parse(self, response):
        # do stuff
        return PersonItem(name='rolando')
</snippet></ROW><ROW><id>19073347</id><snippet>mybot/pipelines.py</snippet></ROW><ROW><id>19073347</id><snippet>class MybotPipeline(object):
    def process_item(self, item, spider):
        item.save()
        return item
</snippet></ROW><ROW><id>19073347</id><snippet>item.save()</snippet></ROW><ROW><id>19073347</id><snippet>DjangoItem</snippet></ROW><ROW><id>19073347</id><snippet>mybot/settings.py</snippet></ROW><ROW><id>19073347</id><snippet>ITEM_PIPELINES = {
    'mybot.pipelines.MybotPipeline': 1000,
}
</snippet></ROW><ROW><id>19073347</id><snippet>$ scrapy crawl example
</snippet></ROW><ROW><id>19073628</id><snippet>subprocess</snippet></ROW><ROW><id>19073628</id><snippet>os.system()</snippet></ROW><ROW><id>19073628</id><snippet>import subprocess

proc = subprocess.Popen('ls | awk "{print $1}"', shell=True, stdout=subprocess.PIPE)
stdout_value = proc.communicate()[0]
for item in stdout_value.split('\n'):
    print item
</snippet></ROW><ROW><id>19073637</id><snippet># graph: Graph we are operating on
# node: Node we are starting from
# hops: Number of hops we can still do (edges we can take)
def findPaths(graph, node, hops):
    # if no further hops should be done, we were successful and
    # can end the recursion
    if hops == 0:
        yield []
        return

    # if the node is not in the graph, we cannot go further, so
    # the current path is invalid
    if node not in graph:
        return

    # for every node we can reach from the current
    for n in graph[node]:
        # find all paths we can take from here
        for path in findPaths(graph, n, hops - 1):
            # and concat the edge names
            yield [graph[node][n]] + path
</snippet></ROW><ROW><id>19073637</id><snippet>&gt;&gt;&gt; list(findPaths(graph, 'L0', 3))
[['01', '14', '45'], ['01', '12', '23']]
&gt;&gt;&gt; list(findPaths(graph, 'L0', 4))
[['01', '12', '23', '31']]
&gt;&gt;&gt; list(findPaths(graph, 'L0', 2))
[['01', '14'], ['01', '12']]
</snippet></ROW><ROW><id>19073644</id><snippet>python subprocess</snippet></ROW><ROW><id>19073644</id><snippet>import subprocess

text = "hello world"
subprocess.Popen(["espeak", "-v", "mb-en1", text])
</snippet></ROW><ROW><id>19073742</id><snippet>input()</snippet></ROW><ROW><id>19073742</id><snippet>int()</snippet></ROW><ROW><id>19073742</id><snippet>data = int(input("Enter a number or enter to quit: "))
</snippet></ROW><ROW><id>19073742</id><snippet>data = input("Enter a number or enter to quit: ")
try:
    data = int(data)
except ValueError:
    pass
</snippet></ROW><ROW><id>19073831</id><snippet>import datetime

d = [datetime.datetime(2013, 5, 1, 9, 31, 24), datetime.datetime(2013, 6, 11, 17, 22, 18), datetime.datetime(2013, 4, 3, 16, 6, 59)]

d[0] + sum((d_i-d[0] for d_i in d), datetime.timedelta(0)) / len(d)
#&gt;&gt;&gt; datetime.datetime(2013, 5, 5, 22, 20, 13, 666667)
</snippet></ROW><ROW><id>19073831</id><snippet>d[0]</snippet></ROW><ROW><id>19073872</id><snippet>Set-ExecutionPolicy</snippet></ROW><ROW><id>19073872</id><snippet>Set-ExecutionPolicy RemoteSigned
</snippet></ROW><ROW><id>19073872</id><snippet>Set-ExecutionPolicy</snippet></ROW><ROW><id>19073872</id><snippet>Set-ExecutionPolicy RemoteSigned -Scope CurrentUser
</snippet></ROW><ROW><id>19074072</id><snippet>pip install lxml
</snippet></ROW><ROW><id>19074072</id><snippet>soup = BeautifulSoup(html, "lxml")
</snippet></ROW><ROW><id>19074076</id><snippet>/home/joe
├── data
│   └── numbers.txt
└── programs
    └── process.py
</snippet></ROW><ROW><id>19074076</id><snippet>/home/joe</snippet></ROW><ROW><id>19074076</id><snippet>programs/process.py</snippet></ROW><ROW><id>19074076</id><snippet>data/numbers.txt</snippet></ROW><ROW><id>19074076</id><snippet>/home/joe/programs/process.py</snippet></ROW><ROW><id>19074076</id><snippet>/home/joe/data/numbers.txt</snippet></ROW><ROW><id>19074076</id><snippet>..</snippet></ROW><ROW><id>19074076</id><snippet>programs</snippet></ROW><ROW><id>19074076</id><snippet>numbers.txt</snippet></ROW><ROW><id>19074076</id><snippet>../data/numbers.txt</snippet></ROW><ROW><id>19074076</id><snippet>os.getcwd</snippet></ROW><ROW><id>19074076</id><snippet>os.chdir</snippet></ROW><ROW><id>19074076</id><snippet>__file__</snippet></ROW><ROW><id>19074076</id><snippet>os.path.dirname</snippet></ROW><ROW><id>19074076</id><snippet>os.path.join</snippet></ROW><ROW><id>19074114</id><snippet>[x or None for x in "1\t2\t3\t\t4".split("\t")]
#&gt;&gt;&gt; ['1', '2', '3', None, '4']
</snippet></ROW><ROW><id>19074114</id><snippet>int</snippet></ROW><ROW><id>19074114</id><snippet>[int(x) if x else None for x in "1\t2\t3\t\t4".split("\t")]
#&gt;&gt;&gt; [1, 2, 3, None, 4]
</snippet></ROW><ROW><id>19074396</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>19074396</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>19074396</id><snippet>MEDIA_ROOT</snippet></ROW><ROW><id>19074396</id><snippet>MEDIA_ROOT = `/abs/path/to/project/media/`
</snippet></ROW><ROW><id>19074396</id><snippet>urls.py</snippet></ROW><ROW><id>19074396</id><snippet># urls.py
from django.conf import settings
from django.conf.urls.static import static
urlpatterns = patterns('',
    # other patterns
) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
</snippet></ROW><ROW><id>19074396</id><snippet>{{MEDIA_URL}}{{article.mainPhoto}}</snippet></ROW><ROW><id>19074396</id><snippet>&lt;img src="{{article.mainPhoto.url}}" /&gt;
</snippet></ROW><ROW><id>19074477</id><snippet>import Tkinter
import tkMessageBox
</snippet></ROW><ROW><id>19074477</id><snippet>from tkinter import messagebox as tkMessageBox
</snippet></ROW><ROW><id>19074637</id><snippet>classmethod</snippet></ROW><ROW><id>19074637</id><snippet>class SomeApi(Resource):
    def get(self):
        return self.response

    @classmethod
    def make_api(cls, response):
        cls.response = response
        return cls


class KillerApp(object):
    def __init__(self):
        self.app = Flask()
        app_api = Api(self.app)
        MyApi = SomeAPI.make_api({"key": "value"})
        app_api.add_resource(MyApi, "/api/path")

    def run(self)
        self.app.run()


KillerApp().run()
</snippet></ROW><ROW><id>19075265</id><snippet>lowByte = lambda b: b &amp; 0xff
</snippet></ROW><ROW><id>19075515</id><snippet>users = User.objects.filter(category__criteria=value)
</snippet></ROW><ROW><id>19075718</id><snippet>done()</snippet></ROW><ROW><id>19075718</id><snippet>True</snippet></ROW><ROW><id>19075718</id><snippet>while done != True:
</snippet></ROW><ROW><id>19075718</id><snippet>True</snippet></ROW><ROW><id>19075718</id><snippet>while not done():
</snippet></ROW><ROW><id>19075718</id><snippet>elim_row()</snippet></ROW><ROW><id>19075718</id><snippet>for stuff in get_rid_of:
    try:
        if stuff in possible[(y,x)]:
            possible[(y,x)] = []
        else:
            possible[(y,x)].remove(stuff)
    except ValueError:
        pass
</snippet></ROW><ROW><id>19075718</id><snippet>possible[(y,x)]</snippet></ROW><ROW><id>19075718</id><snippet>elim_</snippet></ROW><ROW><id>19075718</id><snippet>for stuff in get_rid_of:
    if stuff in possible[(y,x)]:
        possible[(y,x)].remove(stuff)
</snippet></ROW><ROW><id>19075838</id><snippet>self.data1_Var.after(200, self.update_data1)</snippet></ROW><ROW><id>19075838</id><snippet>self.update_data1</snippet></ROW><ROW><id>19075838</id><snippet>self.data1_Var.after</snippet></ROW><ROW><id>19075838</id><snippet>self.data1_Var.after(200, self.update_data1, some_data)</snippet></ROW><ROW><id>19075838</id><snippet>self.update_data1</snippet></ROW><ROW><id>19075838</id><snippet>self.update_all_data</snippet></ROW><ROW><id>19075838</id><snippet>self.data1_Var.after(200, self.update_data1)</snippet></ROW><ROW><id>19075838</id><snippet>update_all_data</snippet></ROW><ROW><id>19075838</id><snippet>update_data1</snippet></ROW><ROW><id>19075844</id><snippet>model.history.all()[:-3]
</snippet></ROW><ROW><id>19075844</id><snippet>last3 = []
for h in model.history.all:
   if len(last3) &gt; 2:
       del last3[0]
   last3.append[h]
</snippet></ROW><ROW><id>19075861</id><snippet>__init__</snippet></ROW><ROW><id>19075861</id><snippet>def __init__(self):
    self.dispatch_map = { 'a' : self.a, 'b' : self.b }
</snippet></ROW><ROW><id>19075861</id><snippet>dispatch()</snippet></ROW><ROW><id>19075861</id><snippet>def dispatch(self, arg):
    bound = self.dispatch_map[arg].__get__(self, type(self))
    bound()
</snippet></ROW><ROW><id>19075885</id><snippet>cursor.executemany</snippet></ROW><ROW><id>19075885</id><snippet>import sqlite3

connection = sqlite3.connect("table.sqlite")
cursor = connection.cursor()

source_table = 'table1'
target_table = 'test_table1'

stmt = "SELECT * FROM %s" % source_table

cursor.execute(stmt)
data = cursor.fetchall()

fields = ','.join('?' for desc in cursor.description)
stmt = "insert into {} values ({})".format(target_table, fields)
cursor.executemany(stmt, data)
connection.commit()
connection.close()
</snippet></ROW><ROW><id>19075885</id><snippet>cursor.description</snippet></ROW><ROW><id>19075885</id><snippet>?</snippet></ROW><ROW><id>19075992</id><snippet>response time = instance startup time like library loading and initial data access + the time for processing the user request</snippet></ROW><ROW><id>19075992</id><snippet>response time =  the time for processing the user request</snippet></ROW><ROW><id>19076026</id><snippet>usecols</snippet></ROW><ROW><id>19076026</id><snippet>usecols=(5,) # or [5]
</snippet></ROW><ROW><id>19076026</id><snippet>(5)</snippet></ROW><ROW><id>19076026</id><snippet>5</snippet></ROW><ROW><id>19076026</id><snippet>,</snippet></ROW><ROW><id>19076107</id><snippet>import os
import time
date1 = time.strftime('%Y%m%d%H%M%S')
cmd1= "cp logfile logfile{0}".format(date1)
cmd2= "cat /dev/null &gt; logfile"
os.system(cmd1)
os.system(cmd2)
</snippet></ROW><ROW><id>19076132</id><snippet>13024882639633631</snippet></ROW><ROW><id>19076132</id><snippet>MicrosecondsToFileTime</snippet></ROW><ROW><id>19076132</id><snippet>import datetime

def getFiletime(dt):
    microseconds = int(dt, 16) / 10
    seconds, microseconds = divmod(microseconds, 1000000)
    days, seconds = divmod(seconds, 86400)

    return datetime.datetime(1601, 1, 1) + datetime.timedelta(days, seconds, microseconds)

print format(getFiletime(hex(13024882639633631*10)[2:17]), '%a, %d %B %Y %H:%M:%S %Z')
</snippet></ROW><ROW><id>19076311</id><snippet>cStringIO</snippet></ROW><ROW><id>19076311</id><snippet>io.BytesIO</snippet></ROW><ROW><id>19076311</id><snippet>import io
data = io.BytesIO(urllib.urlopen(URL).read())
</snippet></ROW><ROW><id>19076311</id><snippet>import io
from urllib import request
data = io.BytesIO(request.urlopen("http://careers.stackoverflow.com/jobs?a=288").read())
data
&gt;&gt;&gt;&gt; &lt;_io.BytesIO object at 0x11050aae0&gt;
</snippet></ROW><ROW><id>19076311</id><snippet>def run(origin):
    # Load image file from url.    
    try:
        #make a temp filename that is valid on your machine
        tmp_filename = "/tmp/temp.png"
        #fetch the image in this file
        request.urlretrieve("https://www.google.com/images/srpr/logo4w.png", tmp_filename)
        #create a blender datablock of it
        img = bpy.data.images.load(tmp_filename)
        #pack the image in the blender file so...
        img.pack()
        #...we can delete the temp image
        os.remove(tmp_filename)
    except Exception as e:
        raise NameError("Cannot load image: {0}".format(e))
    # Create image texture from image
    cTex = bpy.data.textures.new('ColorTex', type='IMAGE')
    cTex.image = img
    # Create material
    mat = bpy.data.materials.new('TexMat')
    # Add texture slot for color texture
    mtex = mat.texture_slots.add()
    mtex.texture = cTex
    # Create new cube
    bpy.ops.mesh.primitive_cube_add(location=origin)
    # Add material to created cube
    ob = bpy.context.object
    me = ob.data
    me.materials.append(mat)

run((0,0,0))
</snippet></ROW><ROW><id>19076406</id><snippet>&gt;&gt;&gt; first, rest = 'someone.lastname@example.com'.split('.', 1)
&gt;&gt;&gt; first + rest[:1]
'someonel'
</snippet></ROW><ROW><id>19076418</id><snippet>min</snippet></ROW><ROW><id>19076418</id><snippet>max</snippet></ROW><ROW><id>19076418</id><snippet>@app.route("/foo/&lt;int(min=1, max=300):id&gt;")
</snippet></ROW><ROW><id>19076418</id><snippet>id</snippet></ROW><ROW><id>19076418</id><snippet>404</snippet></ROW><ROW><id>19076418</id><snippet>get_foo</snippet></ROW><ROW><id>19076418</id><snippet>404</snippet></ROW><ROW><id>19076418</id><snippet>id</snippet></ROW><ROW><id>19076418</id><snippet>id</snippet></ROW><ROW><id>19076577</id><snippet>Clutter.BindConstraint</snippet></ROW><ROW><id>19076577</id><snippet>Clutter.AlignConstraint</snippet></ROW><ROW><id>19076577</id><snippet>Clutter.Constraint</snippet></ROW><ROW><id>19076577</id><snippet>ClutterConstraint</snippet></ROW><ROW><id>19076577</id><snippet>Clutter.Constraint</snippet></ROW><ROW><id>19076577</id><snippet>Clutter.Constraint.do_update_allocation()</snippet></ROW><ROW><id>19076577</id><snippet>class MyConstraint (Clutter.Constraint):
    def __init__(self, source, width_fraction=1.0, height_fraction=1.0):
        Clutter.Constraint.__init__(self)
        self._source = source
        self._widthf = width_fraction
        self._heightf = height_fraction
    def do_update_allocation(self, actor, allocation):
        source_alloc = self._source.get_allocation()
        width = source_alloc.get_width() * self._widthf
        height = source_alloc.get_height() * self._heightf
        allocation.x2 = allocation.x1 + width
        allocation.y2 = allocation.y1 + height
</snippet></ROW><ROW><id>19076577</id><snippet>Clutter.Constraint</snippet></ROW><ROW><id>19076590</id><snippet>x</snippet></ROW><ROW><id>19076590</id><snippet>indices = [i for i, elem in enumerate(word) if elem == x]
</snippet></ROW><ROW><id>19076590</id><snippet>&gt;&gt;&gt; word = ["p", "y", "t", "h", "o", "n"]
status = ["_", "_", "_", "_", "_", "_"]
&gt;&gt;&gt; &gt;&gt;&gt; word
['p', 'y', 't', 'h', 'o', 'n']
&gt;&gt;&gt; status
['_', '_', '_', '_', '_', '_']
</snippet></ROW><ROW><id>19076590</id><snippet>guess = 't'</snippet></ROW><ROW><id>19076590</id><snippet>&gt;&gt;&gt; guess = 't'
&gt;&gt;&gt; indices = [i for i, x in enumerate(word) if x == guess]
&gt;&gt;&gt; indices
[2]
</snippet></ROW><ROW><id>19076590</id><snippet>for i in indices:
    status[i] = guess
</snippet></ROW><ROW><id>19076590</id><snippet>status</snippet></ROW><ROW><id>19076590</id><snippet>print(' '.join(status))
_ _ t _ _ _
</snippet></ROW><ROW><id>19077041</id><snippet>callme</snippet></ROW><ROW><id>19077041</id><snippet>def callme(*args):
    if CheckVar1.get() or CheckVar2.get():
        b1['state'] = 'normal'
    else:
        b1['state'] = 'disabled'
</snippet></ROW><ROW><id>19077041</id><snippet>lambda</snippet></ROW><ROW><id>19077041</id><snippet>def callme(msg, extra1, extra2):
    print msg, extra1, extra2
    if CheckVar1.get() or CheckVar2.get():
        b1['state'] = 'normal'
    else:
        b1['state'] = 'disabled'
...

CheckVar1.trace("w", lambda *args: callme('checkvar1 changed', 'blah', 'blah'))
CheckVar2.trace("w", lambda *args: callme('checkvar2 changed', 'xxx', 'yyy'))
</snippet></ROW><ROW><id>19077099</id><snippet>shelve</snippet></ROW><ROW><id>19077099</id><snippet>shelve</snippet></ROW><ROW><id>19077099</id><snippet>pickle</snippet></ROW><ROW><id>19077099</id><snippet>import shelve

data = shelve.open("savegame")
</snippet></ROW><ROW><id>19077099</id><snippet>data["foo"] = "bar"
</snippet></ROW><ROW><id>19077099</id><snippet>shelve</snippet></ROW><ROW><id>19077099</id><snippet>data.sync()
</snippet></ROW><ROW><id>19077099</id><snippet>shelve</snippet></ROW><ROW><id>19077099</id><snippet>data["foo"]</snippet></ROW><ROW><id>19077099</id><snippet>"bar"</snippet></ROW><ROW><id>19077396</id><snippet>sys.modules</snippet></ROW><ROW><id>19077396</id><snippet>sys.modules.keys()</snippet></ROW><ROW><id>19077396</id><snippet>urllib</snippet></ROW><ROW><id>19077396</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print sys.modules.keys()
['copy_reg', 'sre_compile', '_sre', 'encodings', 'site', '__builtin__', 'sysconfig', '__main__', 'encodings.encodings', 'abc', 'posixpath', '_weakrefset', 'errno', 'encodings.codecs', 'sre_constants', 're', '_abcoll', 'types', '_codecs', 'encodings.__builtin__', '_warnings', 'genericpath', 'stat', 'zipimport', '_sysconfigdata', 'warnings', 'UserDict', 'encodings.utf_8', 'sys', 'virtualenvwrapper', '_osx_support', 'codecs', 'readline', 'os.path', 'sitecustomize', 'signal', 'traceback', 'linecache', 'posix', 'encodings.aliases', 'exceptions', 'sre_parse', 'os', '_weakref']
&gt;&gt;&gt; import urllib
&gt;&gt;&gt; print sys.modules.keys()
['cStringIO', 'heapq', 'base64', 'copy_reg', 'sre_compile', '_collections', '_sre', 'functools', 'encodings', 'site', '__builtin__', 'sysconfig', 'thread', '_ssl', '__main__', 'operator', 'encodings.encodings', '_heapq', 'abc', 'posixpath', '_weakrefset', 'errno', '_socket', 'binascii', 'encodings.codecs', 'urllib', 'sre_constants', 're', '_abcoll', 'collections', 'types', '_codecs', 'encodings.__builtin__', '_struct', '_warnings', '_scproxy', 'genericpath', 'stat', 'zipimport', '_sysconfigdata', 'string', 'warnings', 'UserDict', 'struct', 'encodings.utf_8', 'textwrap', 'sys', 'ssl', 'virtualenvwrapper', '_osx_support', 'codecs', 'readline', 'os.path', 'strop', '_functools', 'sitecustomize', 'socket', 'keyword', 'signal', 'traceback', 'urlparse', 'linecache', 'itertools', 'posix', 'encodings.aliases', 'time', 'exceptions', 'sre_parse', 'os', '_weakref']
</snippet></ROW><ROW><id>19077396</id><snippet>import sys
&gt;&gt;&gt; sys.modules["foo"] = "bar"  # Let's pretend we imported a module named "foo", which is a string.
&gt;&gt;&gt; print __import__("foo")
bar  # Not a module, that's my string!
</snippet></ROW><ROW><id>19077396</id><snippet>sys.modules</snippet></ROW><ROW><id>19077495</id><snippet>print '%.2f' % number
print '%.3g' % number
</snippet></ROW><ROW><id>19077495</id><snippet>str.format()</snippet></ROW><ROW><id>19077495</id><snippet>Formatter</snippet></ROW><ROW><id>19077495</id><snippet>'{0:.2f}'.format(number)
'{0:.3g}'.format(number)
</snippet></ROW><ROW><id>19077495</id><snippet>f</snippet></ROW><ROW><id>19077495</id><snippet>g</snippet></ROW><ROW><id>19077495</id><snippet>g</snippet></ROW><ROW><id>19077495</id><snippet>f</snippet></ROW><ROW><id>19077495</id><snippet>f</snippet></ROW><ROW><id>19077495</id><snippet>g</snippet></ROW><ROW><id>19078000</id><snippet>def f(d):
    paths = []
    for key, value in d.items():
        if value is None:
            paths.append([key, value])
        else:
            internal_lists = f(value)
            for l in internal_lists:
                paths.append([key] + l)
    return paths
</snippet></ROW><ROW><id>19078000</id><snippet>try:
    xxx
except:
    xxx
</snippet></ROW><ROW><id>19078000</id><snippet>for key in f.keys():
</snippet></ROW><ROW><id>19078014</id><snippet>MySQLdb</snippet></ROW><ROW><id>19078014</id><snippet>mysqldb</snippet></ROW><ROW><id>19078014</id><snippet>import MySQLdb
</snippet></ROW><ROW><id>19078309</id><snippet>import pygame
from pygame.locals import QUIT, KEYDOWN, K_ESCAPE, K_SPACE, SRCALPHA


class Game(object):
    def __init__(self):
        pygame.init()
        self.width, self.height = 800, 800
        pygame.display.set_caption("Surfarray test")
        self.screen = pygame.display.set_mode((self.width, self.height))
        self.background = pygame.Surface((self.width, self.height))
        self.background.fill((255, 255, 255))
        self.background.convert()
        self.bar = pygame.Surface((200, 100))
        self.bar.fill((255, 0, 0))
        self.bar.convert()

        self.sprite = pygame.sprite.GroupSingle()
        self.sprite.add(CustomSprite(pygame.Rect(5, 5, 100, 100)))

    def input(self):
        for event in pygame.event.get():

            if event.type == QUIT:
                return False

            if event.type == KEYDOWN:
                if event.key == K_ESCAPE:
                    return False
                if event.key == K_SPACE:
                    # make bar transparent by pressing the space bar
                    self.sprite.update()

    def main(self):
        while True:
            if self.input() is False:
                return False
            self.draw()

    def draw(self):
        self.screen.blit(self.background, (0, 0))
        self.screen.blit(self.bar, (5, 5))
        self.sprite.draw(self.screen)
        pygame.display.update()


class CustomSprite(pygame.sprite.Sprite):
    def __init__(self, rect):
        pygame.sprite.Sprite.__init__(self)
        self.rect = rect
        # SRCALPHA flag makes the pixel format include per-pixel alpha data
        self.image = pygame.Surface((rect.width, rect.height), SRCALPHA)
        self.image.convert_alpha()
        self.image.fill((126, 126, 126))

    # magic happens here
    def update(self):
        pxa = pygame.surfarray.pixels_alpha(self.image)
        pxa[:] = 100  # make all pixels transparent

if __name__ == "__main__":
    game = Game()
    game.main()
</snippet></ROW><ROW><id>19078432</id><snippet>tbody</snippet></ROW><ROW><id>19078432</id><snippet>item['title'] = hxs.select("//table/tr[1]/td[2]/div[2]/div[1]/div[1]/text()").extract()
</snippet></ROW><ROW><id>19078539</id><snippet>import re
line = ' &lt;abc&lt;hd &lt;&gt; "abc\"d\" ef" ' 

match = list(re.findall(r'(&lt;[^&gt;]+&gt;)\s+("(?:\"|[^"])+")', line)[0])

print(match)
#['&lt;abc&lt;hd &lt;&gt;', '"abc"d" ef"']
</snippet></ROW><ROW><id>19078539</id><snippet>print(re.split(r'\s+(?=")', line.strip())) #split on white space only if followed by a quote.
#['&lt;abc&lt;hd &lt;&gt;', '"abc"d" ef"']     
</snippet></ROW><ROW><id>19078558</id><snippet>int()</snippet></ROW><ROW><id>19078558</id><snippet>for x in range(width/grass.get_width()+1):
</snippet></ROW><ROW><id>19078558</id><snippet>for x in range(int(width/grass.get_width()+1)):
</snippet></ROW><ROW><id>19078558</id><snippet>print int(5.145)
&gt;&gt;&gt; 5
</snippet></ROW><ROW><id>19078575</id><snippet>pack</snippet></ROW><ROW><id>19078575</id><snippet>grid</snippet></ROW><ROW><id>19078575</id><snippet>create_window</snippet></ROW><ROW><id>19078575</id><snippet>cv.create_window(...)</snippet></ROW><ROW><id>19078575</id><snippet>inner_frame</snippet></ROW><ROW><id>19078575</id><snippet>from Tkinter import *
root=Tk()
root.title('Bit Exraction')
root.geometry('800x600')
cv_frameindex=  ['CV_F0','CV_F1','CV_F2','CV_F3','CV_F4','CV_F5','CV_F6',
                 'CV_F7','CV_F8','CV_F9','CV_F10','CV_F11','CV_F12','CV_F13',
                 'CV_F14','CV_F15','CV_F16','CV_F17','CV_F18','CV_F19','CV_F20',
                 'CV_F21','CV_F22','CV_F23','CV_F24','CV_F25','CV_F26','CV_F27',
                 'CV_F28','CV_F29','CV_F30','CV_F31','CV_F32','CV_F33','CV_F34',
                 'CV_F35','CV_F36','CV_F37','CV_F38','CV_F39','CV_F40','CV_F41',
                 'CV_F42','CV_F43','CV_F44','CV_F45','CV_F46','CV_F47','CV_F48',
                 'CV_F49','CV_F50','CV_F51','CV_F52','CV_F53','CV_F54','CV_F55',
                 'CV_F56','CV_F57','CV_F58','CV_F59','CV_F60','CV_F61','CV_F62',
                 'CV_F63','CV_F64','CV_F65','CV_F66','CV_F67','CV_F68','CV_F69',
                 'CV_F70','CV_F71','CV_F72','CV_F73','CV_F74','CV_F75','CV_F76',
                 'CV_F77','CV_F78','CV_F79']

GPIO_index=['GPIO-0','GPIO-1','GPIO-2','GPIO-3','GPIO-4','GPIO-5','GPIO-6',
            'GPIO-7','GPIO-8','GPIO-9','GPIO-10','GPIO-11','GPIO-12','GPIO-13',
            'GPIO-14','GPIO-15','GPIO-16','GPIO-17','GPIO-18','GPIO-19','GPIO-20',
            'GPIO-21','GPIO-22','GPIO-23','GPIO-24','GPIO-25','GPIO-26','GPIO-27',
            'GPIO-28','GPIO-29','GPIO-30','GPIO-31','GPIO-32','GPIO-33','GPIO-34',
            'GPIO-35','GPIO-36','GPIO-37','GPIO-38','GPIO-39','GPIO-40','GPIO-41',
            'GPIO-42','GPIO-43','GPIO-44','GPIO-45','GPIO-46','GPIO-47','GPIO-48',
            'GPIO-49','GPIO-50','GPIO-51','GPIO-52','GPIO-53','GPIO-54','GPIO-55',
            'GPIO-56','GPIO-57','GPIO-58','GPIO-59','GPIO-60','GPIO-61','GPIO-62',
            'GPIO-63','GPIO-64','GPIO-65','GPIO-66','GPIO-67','GPIO-68','GPIO-69',
            'GPIO-70','GPIO-71','GPIO-72','GPIO-73','GPIO-74','GPIO-75','GPIO-76',
            'GPIO-77','GPIO-78','GPIO-79']

bak_index=['bak0','bak1','bak2','bak3','bak4','bak5','bak6',
           'bak7','bak8','bak9','bak10','bak11','bak12','bak13',
           'bak14','bak15','bak16','bak17','bak18','bak19','bak20',
           'bak21','bak22','bak23','bak24','bak25','bak26','bak27',
           'bak28','bak29','bak30','bak31','bak32','bak33','bak34',
           'bak35','bak36','bak37','bak38','bak39','bak40','bak41',
           'bak42','bak43','bak44','bak45','bak46','bak47','bak48',
           'bak49','bak50','bak51','bak52','bak53','bak54','bak55',
           'bak56','bak57','bak58','bak59','bak60','bak61','bak62',
           'bak63','bak64','bak65','bak66','bak67','bak68','bak69',
           'bak70','bak71','bak72','bak73','bak74','bak75','bak76',
           'bak77','bak78','bak79'
      ]
for i in range(80):
    bak_index[i]=[]


t1=Frame(root,height=1,width=300)
Label(t1,text='Use:  1-GPIO       O-Native\n',anchor='w',height=2,width=300).pack(side=LEFT, fill=Y)
t1.pack(side=TOP,fill=Y)

t2=Frame(root,height=1,width=300)
Label(t2,text='I/O:  1-Output     O-Input\n',anchor='w',height=2,width=300).pack(side=LEFT, fill=Y)
t2.pack(side=TOP,fill=Y)

t3=Frame(root,height=1,width=300)
Label(t3,text='H/L:  1-High       O-Low\n',anchor='w',height=2,width=300).pack(side=LEFT, fill=Y)
t3.pack(side=TOP,fill=Y)

t4=Frame(root,height=1,width=300)
Label(t4,text='INV:  1-Invert     Input Value\n',anchor='w',height=2,width=300).pack(side=LEFT, fill=Y)
t4.pack(side=TOP,fill=Y)

t5=Frame(root,height=1,width=300)
Label(t5,text='Pin Default Set As Native Function\n',anchor='w',height=2,width=300).pack(side=LEFT, fill=Y)
t5.pack(side=TOP,fill=Y)

t6=Frame(root,height=0,width=300)
Label(t6,text='--'*90,anchor='w',height=1,width=300).pack(side=LEFT, fill=Y)
t6.pack(side=TOP,fill=Y)


t7=Frame(root,height=5,width=300)
tt=Frame(t7,height=1,width=300)
lb1=Label(tt, text='PIN',height=1,width=20,anchor=W).pack(side=LEFT, fill=Y)
lb2=Label(tt, text='  USE',height=1,width=20,anchor=W).pack(side=LEFT, fill=Y)
lb3=Label(tt, text='         I/O',height=1,width=20,anchor=W).pack(side=LEFT, fill=Y)
lb4=Label(tt, text='               H/L',height=1,width=20,anchor=W).pack(side=LEFT, fill=Y)
lb5=Label(tt, text='  INV',height=1,width=20,anchor=CENTER).pack(side=LEFT,fill=Y)
tt.pack(side=TOP, fill=Y)
tt1=Frame(t7,height=1,width=300)
Label(tt1,text='--'*90,anchor='w',height=1,width=300).pack(side=LEFT, fill=Y)
tt1.pack(side=TOP,fill=Y)
t7.pack(side=TOP,fill=Y)

cv=Canvas(root,height=30,width=30, scrollregion=(0,0,40,800),bg='red')
S1=Scrollbar(root,orient='vertical',command=cv.yview)
cv['yscrollcommand']=S1.set
S1.pack(side=RIGHT, fill=Y)
cv.pack(side=TOP, fill="both", expand=True)

inner_frame = Frame(cv, background="pink")
cv.create_window(0, 0, anchor="nw", window=inner_frame,tags=("frame",))

for j in range(80):
    cv_frameindex[j]=Frame(inner_frame, height=10, width=10)
    bak_index[j].append(Label(cv_frameindex[j], text=GPIO_index[j], height=1, width=13, anchor=CENTER))
    bak_index[j].append(Label(cv_frameindex[j], text=' '*20, height=1, width=10, anchor=CENTER))
    bak_index[j].append(Checkbutton(cv_frameindex[j], text='0', state='active'))
    bak_index[j].append(Checkbutton(cv_frameindex[j], text='1', state='active'))
    bak_index[j].append(Label(cv_frameindex[j], text=' '*20, height=1, width=13, anchor=CENTER))
    bak_index[j].append(Checkbutton(cv_frameindex[j], text='0', state='active'))
    bak_index[j].append(Checkbutton(cv_frameindex[j], text='1', state='active'))
    bak_index[j].append(Label(cv_frameindex[j], text=' '*20, height=1, width=13, anchor=CENTER))
    bak_index[j].append(Checkbutton(cv_frameindex[j], text='0', state='active'))
    bak_index[j].append(Checkbutton(cv_frameindex[j], text='1', state='active'))
    bak_index[j].append(Label(cv_frameindex[j], text=' '*20, height=1, width=13, anchor=CENTER))
    bak_index[j].append(Checkbutton(cv_frameindex[j], text='0', state='active'))
    bak_index[j].append(Checkbutton(cv_frameindex[j], text='1', state='active'))
    bak_index[j].append(Label(cv_frameindex[j], text=' '*20, height=1, width=13, anchor=CENTER))

for k in bak_index:
    for i in range(len(k)):
        k[i].pack(side=LEFT,fill=Y)
for L in cv_frameindex:
    L.pack(side=TOP, fill=Y)

t8=Frame(inner_frame, height=5, width=300)
Button(t8, text='Generate').pack(fill=Y)
t8.pack(side=TOP, fill=Y)

t9=Frame(inner_frame, height=5, width=300)
Button(t9, text='Generate').pack(fill=Y)
t9.pack(side=TOP, fill=Y)

def on_configure(event):
    cv.itemconfigure("frame", width=event.width)
    cv.configure(scrollregion=cv.bbox("all"))

# make sure the inner frame is always as wide as the canvas,
# and that the scrollregion is up-to-date
cv.bind("&lt;Configure&gt;", on_configure)

root.mainloop()
</snippet></ROW><ROW><id>19078575</id><snippet>grid</snippet></ROW><ROW><id>19078575</id><snippet>pack</snippet></ROW><ROW><id>19078575</id><snippet>onvalue</snippet></ROW><ROW><id>19078575</id><snippet>offvalue</snippet></ROW><ROW><id>19078773</id><snippet>df = data.groupby(...).agg(...)
df.columns = df.columns.droplevel(0)
</snippet></ROW><ROW><id>19078773</id><snippet>import pandas as pd
import pandas.rpy.common as com
import numpy as np

data = com.load_data('Loblolly')
print(data.head())
#     height  age Seed
# 1     4.51    3  301
# 15   10.89    5  301
# 29   28.72   10  301
# 43   41.74   15  301
# 57   52.70   20  301

df = data.groupby('Seed').agg(
    {'age':{'foo':'sum'},
     'height':{'mean':'mean', 'std':'std'}})
print(df.head())
#       age     height           
#       foo        std       mean
# Seed                           
# 301    78  22.638417  33.246667
# 303    78  23.499706  34.106667
# 305    78  23.927090  35.115000
# 307    78  22.222266  31.328333
# 309    78  23.132574  33.781667

df.columns = df.columns.droplevel(0)
print(df.head())
</snippet></ROW><ROW><id>19078773</id><snippet>      foo        std       mean
Seed                           
301    78  22.638417  33.246667
303    78  23.499706  34.106667
305    78  23.927090  35.115000
307    78  22.222266  31.328333
309    78  23.132574  33.781667
</snippet></ROW><ROW><id>19078998</id><snippet>image_urls</snippet></ROW><ROW><id>19078998</id><snippet>images</snippet></ROW><ROW><id>19078998</id><snippet>IMAGES_STORE</snippet></ROW><ROW><id>19078998</id><snippet>images</snippet></ROW><ROW><id>19078998</id><snippet>{'image_urls': ['http://i.stack.imgur.com/tKsDb.png',
                'http://i.stack.imgur.com/NAGkl.png'],
 'images': [{'checksum': 'b0974ea6c88740bed353206b279e0827',
             'path': 'full/762f5682798c5854833316fa171c71166e284630.jpg',
             'url': 'http://i.stack.imgur.com/tKsDb.png'},
            {'checksum': '9a42f7bd1dc45840312fd49cd08e6a5c',
             'path': 'full/615eabb7b61e79b96ea1ddb34a2ef55c8e0f7ec3.jpg',
             'url': 'http://i.stack.imgur.com/NAGkl.png'}]}
</snippet></ROW><ROW><id>19079121</id><snippet>from PyQt4 import Qt, QtCore, QtGui
import threading
import socket
import Queue
import time

# Object of this class has to be shared between
# the two threads (Python and Qt one).
# Qt thread calls 'connect',   
# Python thread calls 'emit'.
# The slot corresponding to the emitted signal
# will be called in Qt's thread.
class SafeConnector:
    def __init__(self):
        self._rsock, self._wsock = socket.socketpair()
        self._queue = Queue.Queue()
        self._qt_object = QtCore.QObject()
        self._notifier = QtCore.QSocketNotifier(self._rsock.fileno(),
                                                QtCore.QSocketNotifier.Read)
        self._notifier.activated.connect(self._recv)

    def connect(self, signal, receiver):
        QtCore.QObject.connect(self._qt_object, signal, receiver)

    # should be called by Python thread
    def emit(self, signal, args):
        self._queue.put((signal, args))
        self._wsock.send('!')

    # happens in Qt's main thread
    def _recv(self):
        self._rsock.recv(1)
        signal, args = self._queue.get()
        self._qt_object.emit(signal, args)

class PythonThread(threading.Thread):
    def __init__(self, connector, *args, **kwargs):
        threading.Thread.__init__(self, *args, **kwargs)
        self.connector = connector
        self.daemon = True

    def emit_signal(self):
        self.connector.emit(QtCore.SIGNAL("test"), str(time.time()))

    def run(self):
        while True:
            time.sleep(1)
            self.emit_signal()

if __name__ == '__main__':
    app = QtGui.QApplication([])
    mainwin = QtGui.QMainWindow()
    label = QtGui.QLabel(mainwin)
    mainwin.setCentralWidget(label)

    connector = SafeConnector()
    python_thread = PythonThread(connector)
    connector.connect(QtCore.SIGNAL("test"), label.setText)
    python_thread.start()

    mainwin.show()
    app.exec_()
</snippet></ROW><ROW><id>19079129</id><snippet>WebDriver.execute_script</snippet></ROW><ROW><id>19079129</id><snippet>from selenium import webdriver

driver = webdriver.Firefox()
driver.get('http://jsfiddle.net/falsetru/mLGnB/show/')
elem = driver.find_element_by_css_selector('div.dijitReset&gt;input[type=hidden]')
driver.execute_script('''
    var elem = arguments[0];
    var value = arguments[1];
    elem.value = value;
''', elem, '2013-11-26')
</snippet></ROW><ROW><id>19079129</id><snippet>from selenium import webdriver

driver = webdriver.Firefox()
driver.get('http://matrix.itasoftware.com/')
elem = driver.find_element_by_xpath(
    './/input[@id="ita_form_date_DateTextBox_0"]'
    '/following-sibling::input[@type="hidden"]')

value = driver.execute_script('return arguments[0].value;', elem)
print("Before update, hidden input value = {}".format(value))

driver.execute_script('''
    var elem = arguments[0];
    var value = arguments[1];
    elem.value = value;
''', elem, '2013-11-26')

value = driver.execute_script('return arguments[0].value;', elem)
print("After update, hidden input value = {}".format(value))
</snippet></ROW><ROW><id>19079137</id><snippet>(self.width/2, 20)</snippet></ROW><ROW><id>19079137</id><snippet>(self.width/2, height - 20)</snippet></ROW><ROW><id>19079137</id><snippet>vector1</snippet></ROW><ROW><id>19079137</id><snippet>(0, 1)</snippet></ROW><ROW><id>19079137</id><snippet>glOrtho(0.0, height, width, 0.0, -20.0, 20.0)
</snippet></ROW><ROW><id>19079137</id><snippet>void glOrtho( GLdouble   left,  
              GLdouble   right,  
              GLdouble   bottom,  
              GLdouble   top,  
              GLdouble   nearVal,  
              GLdouble   farVal); 
</snippet></ROW><ROW><id>19079141</id><snippet>format</snippet></ROW><ROW><id>19079141</id><snippet>increment</snippet></ROW><ROW><id>19079141</id><snippet>%.2f</snippet></ROW><ROW><id>19079141</id><snippet>get()</snippet></ROW><ROW><id>19079141</id><snippet>str</snippet></ROW><ROW><id>19079185</id><snippet>In [7]:  df_s = pd.DataFrame({'time': range(1379945743841,1379945743850), 'value': [3,4,3,4,3,2,2,3,3]})
</snippet></ROW><ROW><id>19079185</id><snippet>In [8]: df_s['time'] = pd.to_datetime(df_s['time'],unit='ms')

In [9]: df_s
Out[9]: 
                        time  value
0 2013-09-23 14:15:43.841000      3
1 2013-09-23 14:15:43.842000      4
2 2013-09-23 14:15:43.843000      3
3 2013-09-23 14:15:43.844000      4
4 2013-09-23 14:15:43.845000      3
5 2013-09-23 14:15:43.846000      2
6 2013-09-23 14:15:43.847000      2
7 2013-09-23 14:15:43.848000      3
8 2013-09-23 14:15:43.849000      3
</snippet></ROW><ROW><id>19079185</id><snippet>In [10]: pd.to_datetime(1379945743843,unit='ms')
Out[10]: Timestamp('2013-09-23 14:15:43.843000', tz=None)

In [11]: pd.to_datetime(1379945743845,unit='ms')
Out[11]: Timestamp('2013-09-23 14:15:43.845000', tz=None)

In [12]: df = df_s.set_index('time')
</snippet></ROW><ROW><id>19079185</id><snippet>&amp;</snippet></ROW><ROW><id>19079185</id><snippet>In [13]: df_s[(df_s.time&gt;pd.to_datetime(1379945743843,unit='ms')) &amp; (df_s.time&lt;pd.to_datetime(1379945743845,unit='ms'))]
Out[13]: 
                    time  value
3 2013-09-23 14:15:43.844000      4
</snippet></ROW><ROW><id>19079185</id><snippet>In [7]: df_s.query('"2013-09-23 14:15:43.843" &lt; time &lt; "2013-09-23 14:15:43.845"')
Out[7]: 
                    time  value
3 2013-09-23 14:15:43.844000      4
</snippet></ROW><ROW><id>19079185</id><snippet>In [11]: df_s[df_s.time.isin(range(1379945743843,1379945743845))]
Out[11]: 
            time  value
2  1379945743843      3
3  1379945743844      4
</snippet></ROW><ROW><id>19079409</id><snippet>col_idx = -1
for idx, mt in enumerate(sheet.row_values(0)):
    print mt
    if mt=='MT':
        col_idx = idx
        break
</snippet></ROW><ROW><id>19079464</id><snippet>*args</snippet></ROW><ROW><id>19079464</id><snippet>**kwargs</snippet></ROW><ROW><id>19079464</id><snippet>def a(*args,**kwargs):
     print args
     print kwargs

a('abc','75449',test=None,abc=-1)
</snippet></ROW><ROW><id>19079464</id><snippet>['abc','75449']
{'test':None,'abc':-1}
</snippet></ROW><ROW><id>19079592</id><snippet>rollDie</snippet></ROW><ROW><id>19079592</id><snippet>rolls</snippet></ROW><ROW><id>19079592</id><snippet>roll</snippet></ROW><ROW><id>19079592</id><snippet>roll</snippet></ROW><ROW><id>19079592</id><snippet>rolls</snippet></ROW><ROW><id>19079592</id><snippet>rolls</snippet></ROW><ROW><id>19079621</id><snippet>main()</snippet></ROW><ROW><id>19079621</id><snippet># your code
# ...
main()
</snippet></ROW><ROW><id>19079621</id><snippet># your code
# ...
if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19079621</id><snippet>if __name__ == “__main__”:</snippet></ROW><ROW><id>19079631</id><snippet>adler32</snippet></ROW><ROW><id>19079631</id><snippet>crc32</snippet></ROW><ROW><id>19079631</id><snippet>adler32</snippet></ROW><ROW><id>19079631</id><snippet>crc32</snippet></ROW><ROW><id>19079631</id><snippet>crc32</snippet></ROW><ROW><id>19079631</id><snippet>adler32</snippet></ROW><ROW><id>19079631</id><snippet>crc32</snippet></ROW><ROW><id>19079631</id><snippet>md5</snippet></ROW><ROW><id>19079631</id><snippet>sha1</snippet></ROW><ROW><id>19079773</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>19079773</id><snippet>Turtle</snippet></ROW><ROW><id>19079773</id><snippet>dot{}</snippet></ROW><ROW><id>19079773</id><snippet>defaultdict</snippet></ROW><ROW><id>19079773</id><snippet>dot()</snippet></ROW><ROW><id>19079773</id><snippet>from collections import defaultdict
from turtle import *

class MyTurtle(Turtle):
    def __init__(self, *args, **kwds):
        super(MyTurtle, self).__init__(*args, **kwds)  # initialize base
        self.dots = defaultdict(int)

    def dot(self, *args, **kwds):
        super(MyTurtle, self).dot(*args, **kwds)
        self.dots[self.position()] += 1

    def print_count(self):
        """ print number of dots drawn, if any, at current position """
        print self.dots.get(self.position(), 0) # avoid creating counts of zero

def main(turtle):
    turtle.forward(100)
    turtle.dot("blue")
    turtle.left(90)
    turtle.forward(50)
    turtle.dot("green")
    # go back to the start point
    turtle.right(180) # turn completely around
    turtle.forward(50)
    turtle.dot("red")  # put second one in same spot
    turtle.right(90)
    turtle.forward(100)

if __name__ == '__main__':
    turtle1 = MyTurtle()
    main(turtle1)
    mainloop()

    for posn, count in turtle1.dots.iteritems():
        print('({x:5.2f}, {y:5.2f}): '
              '{cnt:n}'.format(x=posn[0], y=posn[1], cnt=count))
</snippet></ROW><ROW><id>19079773</id><snippet>(100.00, 50.00): 1
(100.00,  0.00): 2
</snippet></ROW><ROW><id>19079774</id><snippet>from django.contrib import admin
import django.forms as forms

class SpecialForm(forms.ModelForm):
    my_extra_field = forms.ChoiceField() #or whatever

    def save(self, **kw):
        orig_model = super(SpecialForm, self).save(**kw)
        # do extra stuff to orig_model with self.cleaned_data['my_extra_field']

    class Meta:
        model = TheOriginalModel

class TheOriginalModelAdmin(admin.ModelAdmin):
    form = SpecialForm
</snippet></ROW><ROW><id>19079778</id><snippet>np.loadtxt</snippet></ROW><ROW><id>19079778</id><snippet>array([(2011, 12, 25, b'AAA', b'AAA', b'AAA'),
       (2011, 12, 26, b'BBB', b'BBB', b'BBB'),
       (2011, 12, 27, b'CCC', b'CCC', b'CCC')], 
      dtype=[('f0', '&lt;i4'), ('f1', '&lt;i4'), ('f2', '&lt;i4'), ('f3', 'S4'), ('f4', 'S4'), ('f5', 'S4')])
</snippet></ROW><ROW><id>19079778</id><snippet>f0</snippet></ROW><ROW><id>19079778</id><snippet>f1</snippet></ROW><ROW><id>19079778</id><snippet>f2</snippet></ROW><ROW><id>19079778</id><snippet>nt['f3']
#&gt;&gt;&gt; array([b'AAA', b'BBB', b'CCC'], 
#&gt;&gt;&gt;       dtype='|S4')
</snippet></ROW><ROW><id>19079778</id><snippet>dtype</snippet></ROW><ROW><id>19079778</id><snippet>dtype=[('MEAT', '&lt;i4'), ('CHEESE', '&lt;i4'), ('TOAST', '&lt;i4'), ('BIRD', 'S4'), ('PLANE', 'S4'), ('SOCK', 'S4')]
nt = numpy.loadtxt('/home/joshua/file.csv', dtype=dtype, delimiter=',')

nt['SOCK']
#&gt;&gt;&gt; array([b'AAA', b'BBB', b'CCC'], 
#&gt;&gt;&gt;       dtype='|S4')
</snippet></ROW><ROW><id>19079897</id><snippet>fuzzyspellingvariable</snippet></ROW><ROW><id>19079897</id><snippet>fuzzyspellingvariable.get()
</snippet></ROW><ROW><id>19079897</id><snippet>fuzzyspellingvariable = BooleanVar()
</snippet></ROW><ROW><id>19080038</id><snippet> join(map(lambda x: "*", split(s)), " ")
</snippet></ROW><ROW><id>19080111</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; from random import choice
&gt;&gt;&gt; 
&gt;&gt;&gt; options = [1,2,3,4,5,6]
&gt;&gt;&gt; 
&gt;&gt;&gt; Counter(choice(options) for _ in range(1000))
Counter({5: 187, 6: 172, 2: 168, 4: 167, 1: 162, 3: 144})
</snippet></ROW><ROW><id>19080111</id><snippet>xrange()</snippet></ROW><ROW><id>19080111</id><snippet>range()</snippet></ROW><ROW><id>19080111</id><snippet>collections.Counter</snippet></ROW><ROW><id>19080111</id><snippet>random.choice</snippet></ROW><ROW><id>19080189</id><snippet>os.chdir(os.path.join(os.getenv('userprofile'),'Desktop'))
</snippet></ROW><ROW><id>19080189</id><snippet>os.chdir('c:\\users\\prosserc\\desktop')
</snippet></ROW><ROW><id>19080189</id><snippet>os.chdir(r'c:\users\prosserc\desktop')
</snippet></ROW><ROW><id>19080216</id><snippet>with</snippet></ROW><ROW><id>19080216</id><snippet>with open("myfile.txt") as f:
    text = f.read()
</snippet></ROW><ROW><id>19080216</id><snippet>as</snippet></ROW><ROW><id>19080216</id><snippet>with</snippet></ROW><ROW><id>19080216</id><snippet>import numpy as np
</snippet></ROW><ROW><id>19080216</id><snippet>np</snippet></ROW><ROW><id>19080216</id><snippet>numpy</snippet></ROW><ROW><id>19080216</id><snippet>Exception</snippet></ROW><ROW><id>19080216</id><snippet>try:
    f = open("foo")
except IOError as exc:
    # Now you can access the Exception for more detailed analysis
</snippet></ROW><ROW><id>19080283</id><snippet>Nan</snippet></ROW><ROW><id>19080283</id><snippet>3.0</snippet></ROW><ROW><id>19080283</id><snippet>import csv
import ast
import datetime

def guess_type(x):
    attempt_fns = [ast.literal_eval,
                   float,
                   lambda x: datetime.datetime.strptime(x, 
                                                    "%Y-%m-%d %H:%M:%S")
                   ]
    for fn in attempt_fns:
        try:
            return fn(x)
        except (ValueError, SyntaxError):
            pass
    return x

with open("untyped.csv", "rb") as fp:
    reader = csv.reader(fp)
    for row in reader:
        row = [guess_type(x) for x in row]
        print row
        print map(type, row)
</snippet></ROW><ROW><id>19080283</id><snippet>2013-07-31 00:00:00,,1.0,2013.0,7.0,Q3,21160742,32HHBS1307170203,nan
</snippet></ROW><ROW><id>19080283</id><snippet>[datetime.datetime(2013, 7, 31, 0, 0), '', 1.0, 2013.0, 7.0, 'Q3', 21160742, '32HHBS1307170203', nan]
[&lt;type 'datetime.datetime'&gt;, &lt;type 'str'&gt;, &lt;type 'float'&gt;, &lt;type 'float'&gt;, &lt;type 'float'&gt;, &lt;type 'str'&gt;, &lt;type 'int'&gt;, &lt;type 'str'&gt;, &lt;type 'float'&gt;]
</snippet></ROW><ROW><id>19080365</id><snippet>tests_dir = os.path.dirname(__file__)
sys.path.append(os.path.join(tests_dir, "..", "..", "..", "main", "somecode"))
</snippet></ROW><ROW><id>19080794</id><snippet>//</snippet></ROW><ROW><id>19080846</id><snippet>any</snippet></ROW><ROW><id>19080846</id><snippet>data = [["4","5"],["3","7"]]
search = "4"

if any(element == search for sublist in data for element in sublist):
    print ("there")
else:
    print("not there")
</snippet></ROW><ROW><id>19080846</id><snippet>if any(search in sublist for sublist in data):
    print ("there")
else:
    print("not there")
</snippet></ROW><ROW><id>19080846</id><snippet>for sublist in data:
    if search in sublist:
        print("there", sublist)
        break
else:
    print("not there")
</snippet></ROW><ROW><id>19080871</id><snippet>sudo chmod o+x /root                     # grant access to root directory
sudo chmod o+rX /root/Python-2.7.3 -R    # recursively grant access to everything in Python-2.7.3
</snippet></ROW><ROW><id>19080871</id><snippet>source</snippet></ROW><ROW><id>19080871</id><snippet>sudo</snippet></ROW><ROW><id>19080964</id><snippet>calc_pay_rise</snippet></ROW><ROW><id>19080964</id><snippet>random_number()</snippet></ROW><ROW><id>19080964</id><snippet>randmom = random_number()</snippet></ROW><ROW><id>19080964</id><snippet>def random_number</snippet></ROW><ROW><id>19080964</id><snippet>def calc_pay_rise</snippet></ROW><ROW><id>19080964</id><snippet>def random_number():
    random = 0  # not sure what's the point of this
    return (random + 5) * 10

def calc_pay_rise():
    return 5 + random_number()

calc_pay_rise()
</snippet></ROW><ROW><id>19080964</id><snippet>def random_number():
    random = 0  # not sure what's the point of this
    return (random + 5) * 10
# is the same as 
def random_number():
    return 50
</snippet></ROW><ROW><id>19080964</id><snippet>def calc_pay_rise():
    return 5 + random_number()
# is the same as
def calc_pay_rise():
    return 5 + 50  # because random_number always returns 50
</snippet></ROW><ROW><id>19080964</id><snippet>calc_pay_rise()
# is really just the same as writing
5 + 50
# so you're not doing anything at all with that value, so you might as well eliminate the call, because it has no side effects either.
</snippet></ROW><ROW><id>19081053</id><snippet>prefix_to_strip = 'path#'
s1 = 'path#poss|&lt;-poss&lt;-home-&gt;prep-&gt;in-&gt;pobj-&gt;|pobj'
s1 = s1[len(prefix_to_strip):]
</snippet></ROW><ROW><id>19081053</id><snippet>strip()</snippet></ROW><ROW><id>19081053</id><snippet>path#</snippet></ROW><ROW><id>19081053</id><snippet>if s1.startswith(prefix_to_strip):
    s1 = s1[len(prefix_to_strip):]
</snippet></ROW><ROW><id>19081053</id><snippet>def strip_prefix(prefix, string):
    return string[len(prefix):] if string.startswith(prefix) else string

strip_prefix('foo#', 'foo#bar')  # =&gt; 'bar'
strip_prefix('foo#', 'hello')  # =&gt; 'hello'
</snippet></ROW><ROW><id>19081269</id><snippet>l</snippet></ROW><ROW><id>19081269</id><snippet>1</snippet></ROW><ROW><id>19081269</id><snippet>with</snippet></ROW><ROW><id>19081269</id><snippet>from math import log
txt = list()
with open('file1.txt', 'r') as fr, open('file2.txt', "w+") as fw:
    for line in fr:
        items = line.split()
        txt.append("{0}\t{1}".format(items[0], log(float(items[1]))))
    fw.write("\n".join(txt))
</snippet></ROW><ROW><id>19081317</id><snippet>with</snippet></ROW><ROW><id>19081317</id><snippet>with</snippet></ROW><ROW><id>19081350</id><snippet>graph</snippet></ROW><ROW><id>19081350</id><snippet>for each neighbor in neighbor_nodes(current)</snippet></ROW><ROW><id>19081350</id><snippet>current = heapq.heappop(openHeap)[1]</snippet></ROW><ROW><id>19081350</id><snippet>openHeap.append((0,current))</snippet></ROW><ROW><id>19081350</id><snippet>heapq.heappush(openHeap, (tile.H,tile))</snippet></ROW><ROW><id>19081350</id><snippet>openHeap</snippet></ROW><ROW><id>19081350</id><snippet>current = heapq.heappop(openHeap)[1]</snippet></ROW><ROW><id>19081350</id><snippet>temp = heapq.heappop(openHeap)
current = temp[1]
</snippet></ROW><ROW><id>19081350</id><snippet>h, current = heapq.heappop(openHeap)
</snippet></ROW><ROW><id>19081350</id><snippet>heaqpq.heappop()</snippet></ROW><ROW><id>19081548</id><snippet>try</snippet></ROW><ROW><id>19081548</id><snippet>try:
    print "before"
    try:
        print d['not-exist']
    except KeyError:
        pass
    print "after"
except OtherError:
    print "OtherError"
</snippet></ROW><ROW><id>19081548</id><snippet>KeyError</snippet></ROW><ROW><id>19081548</id><snippet>.get</snippet></ROW><ROW><id>19081548</id><snippet>try:
    x = d['key']
except KeyError:
    x = 0
</snippet></ROW><ROW><id>19081548</id><snippet>x = d.get('key', 0)
</snippet></ROW><ROW><id>19081548</id><snippet>try</snippet></ROW><ROW><id>19082105</id><snippet>zip</snippet></ROW><ROW><id>19082105</id><snippet>*</snippet></ROW><ROW><id>19082105</id><snippet>&gt;&gt;&gt; ay, by = zip(*(calc(x) for x in steps))
&gt;&gt;&gt; ay
(2, 4, 6, 8, 10)
&gt;&gt;&gt; by
(1, 4, 9, 16, 25)
</snippet></ROW><ROW><id>19082281</id><snippet>Gtk.ListStore(*[str]*len(dictionary))
</snippet></ROW><ROW><id>19082281</id><snippet>Gtk.ListStore(*(x for bar in spam))
</snippet></ROW><ROW><id>19082332</id><snippet>log.write(str(time.time() + "Float switch turned on"))
                                               here--^
</snippet></ROW><ROW><id>19082332</id><snippet>while floatSwitch is True:
</snippet></ROW><ROW><id>19082332</id><snippet>while floatSwitch:
</snippet></ROW><ROW><id>19082401</id><snippet>from selenium import webdriver

browser = webdriver.Firefox()
browser.get("http://stackoverflow.com")

browser.add_cookie({"name": "test[country]",
                    "value": "nl",
                    "path": "/",
                    "max_age": 6000})

browser.close()
</snippet></ROW><ROW><id>19082401</id><snippet>import unittest
from selenium import webdriver


class country(unittest.TestCase):
    def setUp(self):
        self.verificationErrors = []
        self.driver = webdriver.Remote("http://127.0.0.1:4444/wd/hub", {'browserName': 'chrome'})

    def test_country_cookie_redirect(self):
        self.driver.add_cookie({"name": "test[country]",
                                "value": "nl",
                                "path": "/",
                                "max_age": 6000})
        self.driver.get("http://example.com")
        self.assertEqual("http://example.com", self.driver.current_url)

    def tearDown(self):
        self.driver.quit()
        self.assertEqual([], self.verificationErrors)


if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>19082429</id><snippet>WebForm_DoPostBackWithOptions()</snippet></ROW><ROW><id>19082429</id><snippet>WebForm_DoPostBackWithOptions()</snippet></ROW><ROW><id>19082429</id><snippet>{}</snippet></ROW><ROW><id>19082429</id><snippet>POST</snippet></ROW><ROW><id>19082622</id><snippet>import random

WORDS = ("python", "jumble", "easy", "difficult", "answer", "xylophone", "truck" , "doom" , "mayonase" ,"flying" ,"magic" ,"mine" ,"bugle")

word = random.choice(WORDS)
correct_answer = word
max_guesses = 5

print("Word length:", len(word))
print("Attempts Available:", max_guesses)


for guesses in range(max_guesses):
    guess = input("\nEnter your guess, or a letter: ")
    if guess == correct_answer:
        print("Yay! '%s' is the correct answer.\n" % guess)
        break
    elif guess != "":
        if guess[0] in correct_answer:
            print("Yes, '%s' appears in the answer" % guess[0])
        else:
            print("No, '%s' does not appear in the answer" % guess[0])
else:
    print("\nYou ran out of maximumum tries!\n")
</snippet></ROW><ROW><id>19082637</id><snippet>&gt;&gt;&gt; a = [[1,2,3], [4,5,6], [7,8,9]]
&gt;&gt;&gt; b = [[1,None,3], [4,None,6], [7,None, None]]
&gt;&gt;&gt; [(i,j) for i, row in enumerate(a) for j, x in enumerate(row) if b[i][j] != x]
[(0, 1), (1, 1), (2, 1), (2, 2)]
</snippet></ROW><ROW><id>19082706</id><snippet>def from_string(s):
    "Convert dotted IPv4 address to integer."
    return reduce(lambda a,b: a&lt;&lt;8 | b, map(int, s.split(".")))

def to_string(ip):
    "Convert 32-bit integer to dotted IPv4 address."
    return ".".join(map(lambda n: str(ip&gt;&gt;n &amp; 0xFF), [24,16,8,0]))

ip = '90.1.0.0'
count = 12000
block_size = 1024

ip_int = from_string(ip)
while count &gt; 0:
    delta = min(count, block_size)
    print to_string(ip_int), delta
    ip_int += delta
    count -= delta
</snippet></ROW><ROW><id>19082797</id><snippet>import csv
import datetime
import copy
from collections import defaultdict

with open(r"C:\Temp\test.csv") as i, open(r"C:\Temp\resuls.csv", "wb") as o:
    rdr = csv.reader(i)
    wrt = csv.writer(o)

    data, currdate = defaultdict(lambda:[0, 0, 0, 0]), None
    for line in rdr:
        date, name = datetime.datetime.strptime(line[0], '%d/%m/%Y'), line[7]

        if date != currdate or not currdate:
            for v in data.itervalues(): v[:2] = v[2:]
            currdate = date

        wrt.writerow(line + data[name][:2])

        data[name][3] += 1
        if line[6] == "1": data[name][2] += 1
</snippet></ROW><ROW><id>19082797</id><snippet>import csv
import datetime
import copy
from collections import defaultdict

with open(r"C:\Temp\test.csv") as i, open(r"C:\Temp\resuls.csv", "wb") as o:
    rdr, wrt = csv.reader(i), csv.writer(o)

    curr, currdate = defaultdict(lambda:[0, 0]), None
    for line in rdr:
        date, name = datetime.datetime.strptime(line[0], '%d/%m/%Y'), line[7]

        if date != currdate or not currdate:
            prev = copy.deepcopy(curr)
            currdate = date

        wrt.writerow(line + prev[name])

        curr[name][1] += 1
        if line[6] == "1": curr[name][0] += 1
</snippet></ROW><ROW><id>19082859</id><snippet>&gt;&gt;&gt; b = []
&gt;&gt;&gt; for x in j:
...     inner = []
...     for y in k:
...         c = [h for h in x if h in y]
...         inner.append(c)
...     b.append(inner)
...
&gt;&gt;&gt; b
[[[2], [1, 2, 3], []], [[2, 4], [2, 3], [4]], [[2], [2, 1, 3], []]]
</snippet></ROW><ROW><id>19082859</id><snippet>&gt;&gt;&gt; b = [[[h for h in x if h in y] for y in k] for x in j]
&gt;&gt;&gt; b
[[[2], [1, 2, 3], []], [[2, 4], [2, 3], [4]], [[2], [2, 1, 3], []]]
</snippet></ROW><ROW><id>19082878</id><snippet>names = [v[0] for v in professions.values()]
</snippet></ROW><ROW><id>19083056</id><snippet>csv.reader()</snippet></ROW><ROW><id>19083056</id><snippet>for row in firmyeardata3:</snippet></ROW><ROW><id>19083277</id><snippet>return 2**num, 5**num
</snippet></ROW><ROW><id>19083277</id><snippet>2**num, 5**num</snippet></ROW><ROW><id>19083277</id><snippet>1, 10**num</snippet></ROW><ROW><id>19083442</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>19083442</id><snippet>r"hello"</snippet></ROW><ROW><id>19083442</id><snippet>r[1, 2, 3]</snippet></ROW><ROW><id>19083442</id><snippet>class ListPrefixer:
    def __init__(self, typ):
        self.typ = typ

    def __getitem__(self, args):
        return self.typ(args)

class MyList(list):
    def each(self, func):
        return MyList(func(x) for x in self)

e = ListPrefixer(MyList)

e[1, 2, 3, 4].each(lambda x: x**2)
#&gt;&gt;&gt; [1, 4, 9, 16]
</snippet></ROW><ROW><id>19083501</id><snippet>from gevent import monkey; monkey.patch_all()
</snippet></ROW><ROW><id>19083502</id><snippet>*args</snippet></ROW><ROW><id>19083502</id><snippet>sort_columns</snippet></ROW><ROW><id>19083502</id><snippet>sorted_keys = sorted(concurrencydict.keys(), key=itemgetter(*sort_columns))
</snippet></ROW><ROW><id>19083578</id><snippet>static PyObject * call_function(PyObject ***pp_stack, int oparg);
</snippet></ROW><ROW><id>19083578</id><snippet>static</snippet></ROW><ROW><id>19083668</id><snippet>index</snippet></ROW><ROW><id>19083668</id><snippet>index</snippet></ROW><ROW><id>19083668</id><snippet>in</snippet></ROW><ROW><id>19083668</id><snippet>if value in lst:
    # value was found in lst
</snippet></ROW><ROW><id>19083668</id><snippet>&gt;&gt;&gt; a = [1,2,3,4,5,6]
&gt;&gt;&gt; 6 in a
True
&gt;&gt;&gt; 7 in a
False
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19083668</id><snippet>a=[1,2,3,4,5]

if 6 in a:
    print "in"
</snippet></ROW><ROW><id>19083682</id><snippet>div</snippet></ROW><ROW><id>19083682</id><snippet>span</snippet></ROW><ROW><id>19083682</id><snippet>div</snippet></ROW><ROW><id>19083682</id><snippet>/span</snippet></ROW><ROW><id>19083682</id><snippet>elem = browser.find_elements_by_xpath("//div[contains(@id,'d')]/span")
</snippet></ROW><ROW><id>19084139</id><snippet>405</snippet></ROW><ROW><id>19084139</id><snippet>mechanize</snippet></ROW><ROW><id>19084139</id><snippet>405</snippet></ROW><ROW><id>19084139</id><snippet>selenium</snippet></ROW><ROW><id>19084139</id><snippet>405</snippet></ROW><ROW><id>19084235</id><snippet>import threading
import Queue
import time

class Worker(threading.Thread):
  def __init__(self, q):
    threading.Thread.__init__(self)

    self._q = q

  def run(self):
    # here, worker does its job
    # results are pushed to the shared queue
    while True:
      print 'I am working'
      time.sleep(1)
      result = time.time() # just an example
      self._q.put(result)

def process(q):
  while True:
    if q.empty():
      time.sleep(10)
    print 'I am processing'
    worker_result = q.get()
    # do whatever you want with the result...
    print "  ", worker_result

if __name__ == '__main__':
   shared_queue = Queue.Queue()
   worker = Worker(shared_queue)
   worker.start()
   process(shared_queue)
</snippet></ROW><ROW><id>19084241</id><snippet>list1=[2.42, 11.42,13.86,72.32]
list2=[56.59,88.52,4.33,87.70]
list3=[73.72,50.50,7.97,84.47]

print("============================")
print(list1)
print(list2)
print(list3)
print("============================")

for i in range(len(list1)):
    data = []
    data.append(list1[i])
    data.append(list2[i])
    data.append(list3[i])
    print(str(max(data)).rjust(i+1),end = " ")

print("\n")

for i in range(len(list1)):
    summ = list1[i] + list2[i] + list3[i]
    avr = summ / 3
    print(str(avr).rjust(i+1),end= " ")
</snippet></ROW><ROW><id>19084283</id><snippet>input</snippet></ROW><ROW><id>19084283</id><snippet>red</snippet></ROW><ROW><id>19084283</id><snippet>blue</snippet></ROW><ROW><id>19084283</id><snippet>yellow</snippet></ROW><ROW><id>19084283</id><snippet>&gt;&gt;&gt; '5' == 5
False
</snippet></ROW><ROW><id>19084283</id><snippet>red</snippet></ROW><ROW><id>19084283</id><snippet>blue</snippet></ROW><ROW><id>19084283</id><snippet>yellow</snippet></ROW><ROW><id>19084283</id><snippet>red = '1'
blue = '2'
yellow = '3'
</snippet></ROW><ROW><id>19084283</id><snippet>prime_1 = int(input('Enter your first primary color: '))
prime_2 = int(input('Enter your second primary color: '))
</snippet></ROW><ROW><id>19084283</id><snippet>4</snippet></ROW><ROW><id>19084283</id><snippet>red</snippet></ROW><ROW><id>19084283</id><snippet>ValueError</snippet></ROW><ROW><id>19084283</id><snippet>try</snippet></ROW><ROW><id>19084283</id><snippet>try:
    prime_1 = int(input('Enter your first primary color: '))
except ValueError:
    prime_1 = None
try:
    prime_2 = int(input('Enter your second primary color: '))
except ValueError:
    prime_2 = None
</snippet></ROW><ROW><id>19084385</id><snippet>for i in range(256):
    rgb = (i, i, i)
</snippet></ROW><ROW><id>19084385</id><snippet>i</snippet></ROW><ROW><id>19084385</id><snippet>step = 256 / 30.0
value = int(frame * step)
rgb = (value, value, value)
</snippet></ROW><ROW><id>19084422</id><snippet>numpy</snippet></ROW><ROW><id>19084422</id><snippet>list_a</snippet></ROW><ROW><id>19084422</id><snippet>numpy</snippet></ROW><ROW><id>19084422</id><snippet>&gt;&gt;&gt; np.min(list_a, axis=1)
array([ 0.2,  0.1,  0.3,  0.2])
</snippet></ROW><ROW><id>19084422</id><snippet>array</snippet></ROW><ROW><id>19084422</id><snippet>&gt;&gt;&gt; b = np.array(list_a)
&gt;&gt;&gt; b.min(axis=1)
array([ 0.2,  0.1,  0.3,  0.2])
</snippet></ROW><ROW><id>19084465</id><snippet>def input_default(prompt, default):
    return raw_input("%s [%s] " % (prompt, default)) or default

name = input_default("What is your name?", "Not Sure")
</snippet></ROW><ROW><id>19084485</id><snippet>for row in matrix:
    print ' '.join(row)
</snippet></ROW><ROW><id>19084485</id><snippet>str.join()</snippet></ROW><ROW><id>19084485</id><snippet>print '\n'.join([' '.join(row) for row in matrix])
</snippet></ROW><ROW><id>19084485</id><snippet>&gt;&gt;&gt; matrix = [['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'D', 'E'], ['A', 'B', 'C', 'D', 'E']]
&gt;&gt;&gt; for row in matrix:
...     print ' '.join(row)
... 
A B C D E
A B C D E
A B C D E
A B C D E
A B C D E
&gt;&gt;&gt; print '\n'.join([' '.join(row) for row in matrix])
A B C D E
A B C D E
A B C D E
A B C D E
A B C D E
</snippet></ROW><ROW><id>19084485</id><snippet>zip()</snippet></ROW><ROW><id>19084485</id><snippet>zip()</snippet></ROW><ROW><id>19084485</id><snippet>*args</snippet></ROW><ROW><id>19084485</id><snippet>&gt;&gt;&gt; for cols in zip(*matrix):  # transposed
...     print ' '.join(cols)
... 
A A A A A
B B B B B
C C C C C
D D D D D
E E E E E
</snippet></ROW><ROW><id>19084501</id><snippet>class MyCalendar(QtGui.QCalendarWidget):
  def __init__(self,parent=None):
    QtGui.QCalendarWidget.__init__(self,parent)

  def paintCell(self, painter, rect, date):
    QtGui.QCalendarWidget.paintCell(self, painter, rect, date)
    if date.day() % 5 == 0: # example condition based on date
      painter.drawText(rect.bottomLeft(), "test")
</snippet></ROW><ROW><id>19084592</id><snippet>import cv2

cv2.namedWindow("preview")
vc = cv2.VideoCapture(0)

rval, frame = vc.read()

while True:

  if frame is not None:   
     cv2.imshow("preview", frame)
  rval, frame = vc.read()

  if cv2.waitKey(1) &amp; 0xFF == ord('q'):
     break
</snippet></ROW><ROW><id>19084649</id><snippet>random</snippet></ROW><ROW><id>19084649</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; L = range(100)
&gt;&gt;&gt; amount = 10
&gt;&gt;&gt; [random.choice(L) for _ in range(amount)]
[31, 91, 52, 18, 92, 17, 70, 97, 17, 56]
</snippet></ROW><ROW><id>19084689</id><snippet>if</snippet></ROW><ROW><id>19084689</id><snippet>if firsttoken == ';': # skip comments
if firsttoken == 'go': # start execution here
</snippet></ROW><ROW><id>19084689</id><snippet>python -tt &lt;scriptname&gt;</snippet></ROW><ROW><id>19084705</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>19084705</id><snippet>CGIHTTPServer</snippet></ROW><ROW><id>19084756</id><snippet>glTranslate</snippet></ROW><ROW><id>19084756</id><snippet>glTranslate</snippet></ROW><ROW><id>19084766</id><snippet>user_health</snippet></ROW><ROW><id>19084766</id><snippet>main_loop</snippet></ROW><ROW><id>19084766</id><snippet>global user_health</snippet></ROW><ROW><id>19084766</id><snippet>user_health = 100</snippet></ROW><ROW><id>19084766</id><snippet>def main_loop():
    global user_health
    user_heal = 100
    ...
</snippet></ROW><ROW><id>19084882</id><snippet>import pandas as pd
import io

csv = """foo,1234567,a,1
foo,2345678,b,3
bar,3456789,b,5
"""

df = pd.read_csv(io.StringIO(csv),
        names = ["fb", "num", "ab", "x"], 
        dtype = {"fb" : object, "num" : np.int64, "ab" : object, "x" : np.int8})
print(df)
</snippet></ROW><ROW><id>19084956</id><snippet>_</snippet></ROW><ROW><id>19084956</id><snippet>&gt;&gt;&gt; ListOf5=['one','two','three','four','five']
&gt;&gt;&gt; _,_,Third,_,Fifth=ListOf5
&gt;&gt;&gt; Third, Fifth
('three', 'five')
</snippet></ROW><ROW><id>19084956</id><snippet>&gt;&gt;&gt; _,_,Third,_,Fifth=[c for c in 'abcde']
&gt;&gt;&gt; Third, Fifth
('c', 'e')
</snippet></ROW><ROW><id>19084956</id><snippet>&gt;&gt;&gt; Third,Fifth=ListOf5[2],ListOf5[4]
&gt;&gt;&gt; Third,Fifth
('three', 'five')
</snippet></ROW><ROW><id>19084956</id><snippet>&gt;&gt;&gt; s1,s2,*s3='abcdefg'
&gt;&gt;&gt; s1,s2,s3
('a', 'b', ['c', 'd', 'e', 'f', 'g'])
&gt;&gt;&gt; s1,*s2,s3='abcdefg'
&gt;&gt;&gt; s1,s2,s3
('a', ['b', 'c', 'd', 'e', 'f'], 'g')
</snippet></ROW><ROW><id>19085110</id><snippet>class Scores(base):
    __tablename__ = 'center_master'
    id = Column(Integer(), primary_key=True)
    email = Column(String(255), index=True)
</snippet></ROW><ROW><id>19085119</id><snippet>import warnings

f = t.open_file(file, mode='r')
root = f.root

with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    obj = f.get_node(root, 'density_100m')

# do stuff with obj
</snippet></ROW><ROW><id>19085133</id><snippet>str = re.sub(r'(options) (\S+)', r'\2\n    \1', re.sub(r'([ \t =,])/', replace_text, text))
</snippet></ROW><ROW><id>19085216</id><snippet>url(r'^anuncio/(?P&lt;titulo&gt;\d+)$', anuncio),
</snippet></ROW><ROW><id>19085216</id><snippet>\d+</snippet></ROW><ROW><id>19085216</id><snippet>url(r'^anuncio/(?P&lt;titulo&gt;[\w ]+)$', anuncio, name = 'anuncio'),
</snippet></ROW><ROW><id>19085216</id><snippet>Anuncio = Anuncio.objects.get(titulo = titulo)
</snippet></ROW><ROW><id>19085216</id><snippet>anuncio = Anuncio.objects.get(titulo = titulo)
</snippet></ROW><ROW><id>19085216</id><snippet>.get()</snippet></ROW><ROW><id>19085216</id><snippet>anuncio = get_object_or_404(Anuncio, titulo = titulo)
</snippet></ROW><ROW><id>19085216</id><snippet>&lt;a href="{% url 'anuncio' user.userprofile.anuncio %}"&gt; {{user.userprofile.anuncio}} &lt;/a&gt;
</snippet></ROW><ROW><id>19085216</id><snippet>id</snippet></ROW><ROW><id>19085216</id><snippet>anuncio</snippet></ROW><ROW><id>19085216</id><snippet>user.userprofile.id</snippet></ROW><ROW><id>19085216</id><snippet>regex</snippet></ROW><ROW><id>19085216</id><snippet>\d+</snippet></ROW><ROW><id>19085265</id><snippet>Twisted</snippet></ROW><ROW><id>19085265</id><snippet>functools.partial</snippet></ROW><ROW><id>19085265</id><snippet>ioloop.IOLoop.instance().add_callback</snippet></ROW><ROW><id>19085265</id><snippet>import errno
import functools
import socket
from tornado import ioloop, iostream

class Communicator(object):
    def connection_ready(self, sock, fd, events):
        while True:
            try:
                connection, address = sock.accept()
            except socket.error, e:
                if e[0] not in (errno.EWOULDBLOCK, errno.EAGAIN):
                    raise
                return
            connection.setblocking(0)
            self.stream = iostream.IOStream(connection)
            self.stream.read_until(delimiter='\n', callback=self.initial_state) 

    def initial_state(self, msg):
        msg = msg.rstrip()
        print "entering initial state with message: %s" % msg
        transitions = {
            'a' : functools.partial(ioloop.IOLoop.instance().add_callback, self.state_a, msg),
            'b' : functools.partial(ioloop.IOLoop.instance().add_callback, self.state_b, msg),
            'c' : functools.partial(ioloop.IOLoop.instance().add_callback, self.final_state, msg)
        }
        try:
            transitions[msg[0]]()
        except:
            self.stream.write("Aborted (wrong input)\n", self.stream.close)

    def state_a(self, msg):
        print "entering state a with message: %s" % msg
        transitions = {
            'a' : functools.partial(ioloop.IOLoop.instance().add_callback, self.stream.write, "got a\n", functools.partial(self.state_a, msg[1:])),
            'b' : functools.partial(ioloop.IOLoop.instance().add_callback, self.state_b, msg),
            'c' : functools.partial(ioloop.IOLoop.instance().add_callback, self.final_state, msg[1:])
        }
        try:
            transitions[msg[0]]()
        except:
            self.stream.write("Aborted (wrong input)\n", self.stream.close)

    def state_b(self, msg):
        print "entering state b with message: %s" % msg
        transitions = {
            'a' : functools.partial(ioloop.IOLoop.instance().add_callback, self.state_a, msg),
            'b' : functools.partial(ioloop.IOLoop.instance().add_callback, self.stream.write, "got b\n", functools.partial(self.state_a, msg[1:])),
            'c' : functools.partial(ioloop.IOLoop.instance().add_callback, self.final_state, msg[1:])}
        try:
            transitions[msg[0]]()
        except:
            self.stream.write("Aborted (wrong input)\n" , self.stream.close)

    def final_state(self, msg):
        print "entering final state with message: %s" % msg
        self.stream.write("Finished properly with message %s\n" % msg, self.stream.close)

if __name__ == '__main__':
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock.setblocking(0)
    sock.bind(("", 8000))
    sock.listen(5000)

    communicator = Communicator()
    io_loop = ioloop.IOLoop.instance()
    callback = functools.partial(communicator.connection_ready, sock)
    io_loop.add_handler(sock.fileno(), callback, io_loop.READ)
    try:
        io_loop.start()
    except KeyboardInterrupt:
        io_loop.stop()
        print "exited cleanly"
</snippet></ROW><ROW><id>19085265</id><snippet>$ nc localhost 8000
aaaaa
got a
got a
got a
got a
got a
Aborted (wrong input)
$ nc localhost 8000
abababab
got a
got b
got a
got b
got a
got b
got a
got b
Aborted (wrong input)
$ nc localhost 8000
aaabbbc
got a
got a
got a
got b
got b
got b
Finished properly with message 
$ nc localhost 8000
abcabc
got a
got b
Finished properly with message abc
</snippet></ROW><ROW><id>19085299</id><snippet>answer = raw_input("Enter: ") # Let's assume I enter "Foo"
mydict = {answer: raw_input("Enter a value for {} ".format(answer)} Let's say I enter "5"
print mydict.get('Foo')
# 5
</snippet></ROW><ROW><id>19085547</id><snippet>win32com</snippet></ROW><ROW><id>19085547</id><snippet>xpcom</snippet></ROW><ROW><id>19085720</id><snippet>list.extend()</snippet></ROW><ROW><id>19085720</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; a[len(a):] = [4, 5]
&gt;&gt;&gt; a
[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>19085720</id><snippet>list</snippet></ROW><ROW><id>19085992</id><snippet>pygame.draw.rect</snippet></ROW><ROW><id>19085992</id><snippet>pygame.sprite.Sprite</snippet></ROW><ROW><id>19085992</id><snippet>obj.text</snippet></ROW><ROW><id>19085992</id><snippet>None</snippet></ROW><ROW><id>19085992</id><snippet>event.button == SECONDARY_BUTTON</snippet></ROW><ROW><id>19085992</id><snippet>pygame.Rect</snippet></ROW><ROW><id>19085992</id><snippet>pygame.Rect.collidepoint</snippet></ROW><ROW><id>19086005</id><snippet>import sys
import matplotlib
import matplotlib.pyplot as plt
import numpy as np

def get_text_positions(text, x_data, y_data, txt_width, txt_height):
    a = zip(y_data, x_data)
    text_positions = list(y_data)
    for index, (y, x) in enumerate(a):
        local_text_positions = [i for i in a if i[0] &gt; (y - txt_height) 
                            and (abs(i[1] - x) &lt; txt_width * 2) and i != (y,x)]
        if local_text_positions:
            sorted_ltp = sorted(local_text_positions)
            if abs(sorted_ltp[0][0] - y) &lt; txt_height: #True == collision
                differ = np.diff(sorted_ltp, axis=0)
                a[index] = (sorted_ltp[-1][0] + txt_height, a[index][1])
                text_positions[index] = sorted_ltp[-1][0] + txt_height*1.01
                for k, (j, m) in enumerate(differ):
                    #j is the vertical distance between words
                    if j &gt; txt_height * 2: #if True then room to fit a word in
                        a[index] = (sorted_ltp[k][0] + txt_height, a[index][2])
                        text_positions[index] = sorted_ltp[k][0] + txt_height
                        break
    return text_positions

def text_plotter(text, x_data, y_data, text_positions, txt_width,txt_height):
    for z,x,y,t in zip(text, x_data, y_data, text_positions):
        plt.annotate(str(z), xy=(x-txt_width/2, t), size=12)
        if y != t:
            plt.arrow(x, t,0,y-t, color='red',alpha=0.3, width=txt_width*0.1, 
                head_width=txt_width, head_length=txt_height*0.5, 
                zorder=0,length_includes_head=True)

# start new plot
plt.clf()
plt.xlabel("Proportional Euclidean Distance")
plt.ylabel("Percentage Timewindows Attended")
plt.title("Test plot")

together = [(0, 1.0, 0.4), (25, 1.0127692669427917, 0.41), (50, 1.016404709797609, 0.41), (75, 1.1043426359673716, 0.42), (100, 1.1610446924342996, 0.44), (125, 1.1685687930691457, 0.43), (150, 1.3486407784550272, 0.45), (250, 1.4013999168008104, 0.45)]
together.sort()

text = [x for (x,y,z) in together]
eucs = [y for (x,y,z) in together]
covers = [z for (x,y,z) in together]

p1 = plt.plot(eucs,covers,color="black", alpha=0.5)

txt_height = 0.0037*(plt.ylim()[1] - plt.ylim()[0])
txt_width = 0.018*(plt.xlim()[1] - plt.xlim()[0])

text_positions = get_text_positions(text, eucs, covers, txt_width, txt_height)

text_plotter(text, eucs, covers, text_positions, txt_width, txt_height)

plt.savefig("test.png")
plt.show()
</snippet></ROW><ROW><id>19086011</id><snippet>simplify=True</snippet></ROW><ROW><id>19086011</id><snippet>x*(x - 1) - x**2 + x</snippet></ROW><ROW><id>19086011</id><snippet>simplify</snippet></ROW><ROW><id>19086011</id><snippet>cancel</snippet></ROW><ROW><id>19086076</id><snippet>def MERGE(A,start,mid,end):
    L = A[start:mid]
    R = A[mid:end]
    i = 0
    j = 0
    k = start
    for l in range(k,end):
        if j &gt;= len(R) or (i &lt; len(L) and L[i] &lt; R[j]):
            A[l] = L[i]
            i = i + 1
        else:
            A[l] = R[j]
            j = j + 1  

def mergeSort(A,p,r):
    if r - p &gt; 1:
        mid = int((p+r)/2)
        mergeSort(A,p,mid)
        mergeSort(A,mid,r)
        MERGE(A,p,mid,r)

A  = [20, 30, 21, 15, 42, 45, 31, 0, 9]
mergeSort(A,0,len(A))
print A
</snippet></ROW><ROW><id>19086076</id><snippet>def MERGE(A,start,mid,end):
    # Do nothing
    pass

def mergeSort(A,p,r):
    if r - p &gt; 1:
        mid = int((p+r)/2)
        print A[p:mid],A[mid:r]
        mergeSort(A,p,mid)
        mergeSort(A,mid,r)
        MERGE(A,p,mid,r)

A  = [20, 30, 21, 15, 42, 45, 31, 0, 9]
mergeSort(A,0,len(A))
</snippet></ROW><ROW><id>19086076</id><snippet>[20, 30, 21, 15] [42, 45, 31, 0, 9]
[20, 30] [21, 15]
[20] [30]
[21] [15]
[42, 45] [31, 0, 9]
[42] [45]
[31] [0, 9]
[0] [9]
</snippet></ROW><ROW><id>19086076</id><snippet>def MERGE(A,start,mid,end):
    # Do nothing
    pass

def mergeSort(A,p,r):
    if r - p &gt; 1:
        mid = int((p+r)/2)
        print A[p:mid],A[mid+1:r]    # Changed
        mergeSort(A,p,mid)
        mergeSort(A,mid+1,r)         # Changed
        MERGE(A,p,mid,r)

A  = [20, 30, 21, 15, 42, 45, 31, 0, 9]
mergeSort(A,0,len(A))
</snippet></ROW><ROW><id>19086076</id><snippet>[20, 30, 21, 15] [45, 31, 0, 9]
[20, 30] [15]
[20] []
[45, 31] [9]
[45] []
</snippet></ROW><ROW><id>19086076</id><snippet># New indexing function that includes the right index.
def get_partial_list(origin_list, left_index, right_index): # Added
    return origin_list[left_index:right_index+1]


def MERGE(A,start,mid,end):
    L = get_partial_list(A,start,mid)
    R = get_partial_list(A,mid+1,end)
    i = 0
    j = 0
    k = start
    for l in range(k,end+1):            # changed
        if j &gt;= len(R) or (i &lt; len(L) and L[i] &lt; R[j]):
            A[l] = L[i]
            i = i + 1
        else:
            A[l] = R[j]
            j = j + 1  

def mergeSort(A,p,r):
    if r - p &gt; 0:                          # changed
        mid = int((p+r)/2)
        mergeSort(A,p,mid)
        mergeSort(A,mid+1,r)             # changed
        MERGE(A,p,mid,r)

A  = [20, 30, 21, 15, 42, 45, 31, 0, 9]
mergeSort(A,0,len(A)-1)                 # changed
print A
</snippet></ROW><ROW><id>19086183</id><snippet>global STREAM

def twitter_start(request):
    global STREAM
    STREAM = MyStreamer(settings.CONSUMER_KEY, settings.CONSUMER_SECRET,
                        settings.ACCESS_TOKEN_KEY, settings.ACCESS_TOKEN_SECRET)

    # get the keywords from the models
    keywords = Keys.objects.all()
    STREAM.statuses.filter(track=keywords)
    return HttpResponse(request)

def twitter_stop(request):
    STREAM.disconnect()
    return HttpResponse(request)
</snippet></ROW><ROW><id>19086260</id><snippet>pkg_resources</snippet></ROW><ROW><id>19086260</id><snippet>import pkg_resources

def get_pkg_license(pkgname):
    """
    Given a package reference (as from requirements.txt),
    return license listed in package metadata.
    NOTE: This function does no error checking and is for
    demonstration purposes only.
    """
    pkgs = pkg_resources.require(pkgname)
    pkg = pkgs[0]
    for line in pkg.get_metadata_lines('PKG-INFO'):
        (k, v) = line.split(': ', 1)
        if k == "License":
            return v
    return None
</snippet></ROW><ROW><id>19086260</id><snippet>&gt;&gt;&gt; get_pkg_license('mercurial')
'GNU GPLv2+'
&gt;&gt;&gt; get_pkg_license('pytz')
'MIT'
&gt;&gt;&gt; get_pkg_license('django')
'UNKNOWN'
</snippet></ROW><ROW><id>19086318</id><snippet>a = getattr(logwriter, severity) 
a(message)
</snippet></ROW><ROW><id>19086318</id><snippet>logging.info(self.message, self.severity)
</snippet></ROW><ROW><id>19086497</id><snippet>django.contrib.auth</snippet></ROW><ROW><id>19086497</id><snippet>AbstractBaseUser</snippet></ROW><ROW><id>19086497</id><snippet>USERNAME_FIELD</snippet></ROW><ROW><id>19086497</id><snippet>USERNAME_FIELD</snippet></ROW><ROW><id>19086497</id><snippet>login()</snippet></ROW><ROW><id>19086497</id><snippet>logout()</snippet></ROW><ROW><id>19086497</id><snippet>authenticate()</snippet></ROW><ROW><id>19086546</id><snippet>curve_fit</snippet></ROW><ROW><id>19086546</id><snippet>k=A*ma.exp(-E/(R*T))</snippet></ROW><ROW><id>19086546</id><snippet>func</snippet></ROW><ROW><id>19086546</id><snippet>(T, A, E)</snippet></ROW><ROW><id>19086546</id><snippet>(T, E, A)</snippet></ROW><ROW><id>19086546</id><snippet>A</snippet></ROW><ROW><id>19086546</id><snippet>E</snippet></ROW><ROW><id>19086546</id><snippet>&gt;&gt;&gt; def func(T, A, E):
    return A*ma.exp(-E/(R*T))

&gt;&gt;&gt; so.curve_fit(func, T, k)
(array([  8.21449078e+00,  -5.86499656e+04]), array([[  6.07720215e+09,   4.31864058e+12],
       [  4.31864058e+12,   3.07102992e+15]]))
&gt;&gt;&gt; def func(T, E, A):
    return A*ma.exp(-E/(R*T))

&gt;&gt;&gt; so.curve_fit(func, T, k)
(array([ -5.86499656e+04,   8.21449078e+00]), array([[  3.07102992e+15,   4.31864058e+12],
       [  4.31864058e+12,   6.07720215e+09]]))
</snippet></ROW><ROW><id>19086546</id><snippet>typeerror</snippet></ROW><ROW><id>19086615</id><snippet>django.views.debug.technical_500_response</snippet></ROW><ROW><id>19086628</id><snippet>\u0020</snippet></ROW><ROW><id>19086628</id><snippet>\u007E</snippet></ROW><ROW><id>19086628</id><snippet>\uxxxx</snippet></ROW><ROW><id>19086628</id><snippet>xxxx</snippet></ROW><ROW><id>19086628</id><snippet>def my_encode(s):
    return ''.join(
        c if 0x20 &lt;= ord(c) &lt;= 0x7E else r'\u%04x' % ord(c)
        for c in s
    )
</snippet></ROW><ROW><id>19086628</id><snippet>\u</snippet></ROW><ROW><id>19086628</id><snippet>c for c in s</snippet></ROW><ROW><id>19086628</id><snippet>str.join</snippet></ROW><ROW><id>19086628</id><snippet>unicode_escape</snippet></ROW><ROW><id>19086628</id><snippet>def my_decode(s):
    return s.decode('unicode_escape')
</snippet></ROW><ROW><id>19086664</id><snippet>Thread</snippet></ROW><ROW><id>19086664</id><snippet>class LedThread(Thread):
    def __init__(self, args):
        Thread.__init__(self)
        self.args = args
    def run(self):
        self.doLeds()
    def doLeds(self):
        onoff = 0
        while 1:
            onoff=not onoff
            for led in self.args:
                wpi.digitalWrite(led,onoff)
                time.sleep(0.025)

t = LedThread([17,22,10,9,11])
t.start()
time.sleep(10)
t.args = [10,9,11]
time.sleep(10)
</snippet></ROW><ROW><id>19086916</id><snippet>&gt;&gt;&gt; for x in [[1,2], [3,4]]: print(x)
... 
[1, 2]
[3, 4]
&gt;&gt;&gt; for a,b in [[1,2], [3,4]]: print(a+b)
... 
3
7
&gt;&gt;&gt; for [a,b] in [[1,2], [3,4]]: print(a+b)
... 
3
7
</snippet></ROW><ROW><id>19086916</id><snippet>&gt;&gt;&gt; xs = [[[0, 1], [0, 2], [0, 3], [0, 4]],
...       [[1, 4], [1, 3], [1, 2], [1, 1]],
...       [[1, 1], [1, 2], [1, 3], [1, 4]]]
&gt;&gt;&gt; 
&gt;&gt;&gt; [[x[0][0],sum(b for a,b in x)] for x in zip(*xs)]
[[0, 6], [0, 7], [0, 8], [0, 9]]
</snippet></ROW><ROW><id>19087100</id><snippet>&gt;&gt;&gt; tups = [(1, 2, 4.56), (2, 1, 1.23), (1, 3, 2.776)]
&gt;&gt;&gt; [t for t in tups if t[0] == 1] # starting_with 1
[(1, 2, 4.56), (1, 3, 2.776)]
&gt;&gt;&gt; [t for t in tups if t[1] == 3] # (_, 3, _)
[(1, 3, 2.776)]
</snippet></ROW><ROW><id>19087100</id><snippet>__eq__</snippet></ROW><ROW><id>19087100</id><snippet>&gt;&gt;&gt; class AnyNumber(object):
...     def __eq__(self, other):
...         return True
...     def __ne__(self, other):
...         return False
... 
&gt;&gt;&gt; ANY = AnyNumber()
&gt;&gt;&gt; ANY == 0
True
&gt;&gt;&gt; ANY == 1
True

&gt;&gt;&gt; tups = [(1, 2, 4.56), (2, 1, 1.23), (1, 3, 2.776)]
&gt;&gt;&gt; [t for t in tups if t == (1, ANY, ANY)] 
[(1, 2, 4.56), (1, 3, 2.776)]
&gt;&gt;&gt; [t for t in tups if t == (ANY, 1, ANY)] 
[(2, 1, 1.23)]
</snippet></ROW><ROW><id>19087843</id><snippet>get_serving_url</snippet></ROW><ROW><id>19087915</id><snippet>pip</snippet></ROW><ROW><id>19087915</id><snippet>pbr</snippet></ROW><ROW><id>19087915</id><snippet>pip</snippet></ROW><ROW><id>19087915</id><snippet>sudo easy_install pip
</snippet></ROW><ROW><id>19087915</id><snippet>easy_install</snippet></ROW><ROW><id>19087915</id><snippet>easy_install</snippet></ROW><ROW><id>19087915</id><snippet>easy_install</snippet></ROW><ROW><id>19087915</id><snippet>pip</snippet></ROW><ROW><id>19087915</id><snippet>PyPI</snippet></ROW><ROW><id>19087915</id><snippet>python setup.py</snippet></ROW><ROW><id>19087915</id><snippet>pip</snippet></ROW><ROW><id>19087951</id><snippet>nbconvert: Wikipedia (mediawiki) output</snippet></ROW><ROW><id>19087951</id><snippet>{% block headingcell scoped %}
{{ '#' * cell.level }} {{ cell.source | replace('\n', ' ') }}
{% endblock headingcell %}
</snippet></ROW><ROW><id>19087951</id><snippet>{% block headingcell scoped %}
{{ '=' * cell.level }}{{ cell.source | replace('\n', ' ') }}{{ '=' * cell.level }}
{% endblock headingcell %}
</snippet></ROW><ROW><id>19087971</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

page = urllib2.urlopen("http://www.icc-ccs.org/prc/piracyreport.php")
soup = BeautifulSoup(page)
for incident in soup('td', width="90%"):
    where, linebreak, what = incident.contents[:3]
    print where.strip()
    print what.strip()
    print
</snippet></ROW><ROW><id>19087974</id><snippet>if __name__ == "__main__":
    suite = unittest.defaultTestLoader.loadTestsFromTestCase(Test)
    unittest.TextTestRunner().run(suite)
</snippet></ROW><ROW><id>19088052</id><snippet>text = 'app_name: Free Studio 2013 v6.1.12.925'
ver_pos = text.find(' v') #It is token for get version
print '%s \nversion: %s' % (text[:ver_pos], text[ver_pos:])
</snippet></ROW><ROW><id>19088052</id><snippet>app_name: Free Studio 2013 
version:  v6.1.12.925
</snippet></ROW><ROW><id>19088210</id><snippet>string fileName = "C:\\Tcl\\example\\hello.tcl";
        Process p = new Process();
        p.StartInfo = new ProcessStartInfo("cmd", "/K tclsh " + fileName + " &amp; exit")
        {
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };
        p.Start();

        string output = p.StandardOutput.ReadToEnd();
        p.WaitForExit();

        Console.WriteLine(output);

        Console.ReadLine();
</snippet></ROW><ROW><id>19088210</id><snippet> string fileName = @"C:\Python27\example\hello_world.py";

        Process p = new Process();
        p.StartInfo = new ProcessStartInfo("cmd", "/K " + fileName + " &amp; exit")
        {
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };
        p.Start();

        string output = p.StandardOutput.ReadToEnd();
        p.WaitForExit();

        Console.WriteLine(output);

        Console.ReadLine();
</snippet></ROW><ROW><id>19088210</id><snippet>string fileName = @"C:\Python27\example\hello_world.py";

        Process p = new Process();
        p.StartInfo = new ProcessStartInfo(@"C:\Python27\python.exe",  fileName )
        {
            RedirectStandardOutput = true,
            UseShellExecute = false,
            CreateNoWindow = true
        };
        p.Start();

        string output = p.StandardOutput.ReadToEnd();
        p.WaitForExit();

        Console.WriteLine(output);

        Console.ReadLine();
</snippet></ROW><ROW><id>19089051</id><snippet>charset</snippet></ROW><ROW><id>19089051</id><snippet>charset = page.headers.getparam('charset')
soup = BeautifulSoup(page.read(), from_encoding=charset)
</snippet></ROW><ROW><id>19089051</id><snippet>charset</snippet></ROW><ROW><id>19089051</id><snippet>None</snippet></ROW><ROW><id>19089074</id><snippet>list</snippet></ROW><ROW><id>19089074</id><snippet>class WaveParameter(list):
    pass

class Point(list):
    pass

# you can use them just like lists    
point = Point([1, 2, 3, 4])

wp = WaveParameter([5, 6])

# of course all methods from list are inherited
wp.append(7)
wp.append(8)

# let's check them
print(point)
print(wp)

# type checking examples
print isinstance(point, Point)
print isinstance(wp, Point)
print isinstance(point, WaveParameter)
print isinstance(wp, WaveParameter)
</snippet></ROW><ROW><id>19089074</id><snippet>def example_function_with_waveparameter(data):
    if not isinstance(data, WaveParameter):
        log.error("received wrong parameter type (%s instead WaveParameter)" %
                  type(data))
    # and then do the stuff
</snippet></ROW><ROW><id>19089074</id><snippet>assert</snippet></ROW><ROW><id>19089074</id><snippet>def example_function_with_waveparameter(data):
    assert(isinstance(data, WaveParameter))
</snippet></ROW><ROW><id>19089416</id><snippet>import csv
import time

column_count = 2 # Assume we have 2 columns, which is the minimum

with open('somefile.txt') as f:
    reader = csv.reader(f, delimiter=',')
    # fetch the first row, grab the column length
    column_count = len(next(reader)) 

# Next, create the table:

table_name = 'sometable_{0}'.format(int(time.time()))

q = 'CREATE TEMPORARY TABLE {0} ('.format(table_name)
q += ', '.join('col_{0} VARCHAR(255)'.format(i) for i in range(column_count))
q += ');'

cur.execute(q)
cur.commit()

q = "INSERT INTO {0} VALUES (".format(table_name)
q += ', '.join(('%s ' * column_count).split())
q += ');'


# Now, populate it

with open('somefile.txt') as f:
    reader = csv.reader(f, delimiter=',')
    for row in reader:
        cur.execute(q, tuple(row))
        cur.commit()
</snippet></ROW><ROW><id>19089561</id><snippet>N_y = N_y[0]
</snippet></ROW><ROW><id>19089561</id><snippet>N_y</snippet></ROW><ROW><id>19089561</id><snippet>[[[1, 2, 3], [4, 5, 3], [2, 5, 8]]]
</snippet></ROW><ROW><id>19089561</id><snippet>[[1, 2, 3], [4, 5, 3], [2, 5, 8]]
</snippet></ROW><ROW><id>19089591</id><snippet>bytes</snippet></ROW><ROW><id>19089591</id><snippet>str</snippet></ROW><ROW><id>19089855</id><snippet>[]</snippet></ROW><ROW><id>19089855</id><snippet>.</snippet></ROW><ROW><id>19089855</id><snippet>^</snippet></ROW><ROW><id>19089855</id><snippet>[^.]*</snippet></ROW><ROW><id>19090149</id><snippet>==</snippet></ROW><ROW><id>19090149</id><snippet>!=</snippet></ROW><ROW><id>19090149</id><snippet>a = [ 'a', 'b', 'c' ]
b = [ 'a', 'b', 'c' ]
c = [ 'x', 'b', 'y' ]
if a == b:  # will be true
  …
if a == c:  # will be false
  …
if a[1] == c[1]:  # will be true
  …
</snippet></ROW><ROW><id>19090149</id><snippet>if ([ [ 'a', 'b' ], [ 'c', 'd', 'e' ], 'f', 'g' ] ==
    [ [ 'a', 'b' ], [ 'c', 'd', 'e' ], 'f', 'g' ]):  # will be true
  …
</snippet></ROW><ROW><id>19090149</id><snippet>if len(password) != len(thispass):
  … # ignore attempts with wrong length, e. g. return False or similar
for position in range(len(password)):
  while thispass[position] != password[position]:
    try:
      thispass[position] = alphabet[alphabet.index(thispass[position]) + 1]
    except IndexError:  # no further alphabet element for this position?
      thispass[position] = alphabet[0]  # set to first element of alphabet (wrap)
</snippet></ROW><ROW><id>19090183</id><snippet>np.nan</snippet></ROW><ROW><id>19090183</id><snippet>A[~np.isnan(A)]</snippet></ROW><ROW><id>19090183</id><snippet>A</snippet></ROW><ROW><id>19090183</id><snippet>nan</snippet></ROW><ROW><id>19090183</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import pylab

&gt;&gt;&gt; A = np.array([1,np.nan, 3,5,1,2,5,2,4,1,2,np.nan,2,1,np.nan,2,np.nan,1,2])

&gt;&gt;&gt; pylab.figure()
&gt;&gt;&gt; pylab.hist(A[~np.isnan(A)])
&gt;&gt;&gt; pylab.show()
</snippet></ROW><ROW><id>19090189</id><snippet>def addlinks(text):
    from flask import Markup
    idlist = getallissueids()
    for issueid in idlist:
        parts = text.split(issueid)
        text = Markup("&lt;a href=/browse/" + issueid +"&gt;" + issueid + "&lt;/a&gt;").join(parts)     
    return text
</snippet></ROW><ROW><id>19090283</id><snippet>if form.process().accepted:
    session.name = form.vars.name
    session.email = form.vars.email
    session.subject = form.vars.subject
    session.message = form.vars.message
    if mail:
        if mail.send(to=['otheremail@yahoo.com'],
            subject='project minerva',
            message= "Hello this is an email send from minerva.com from contact us form.\nName:"+ session.name+" \nEmail : " + session.email +"\nSubject : "+session.subject +"\nMessage : "+session.message+ ".\n "
        ):
            response.flash = 'email sent sucessfully.'
        else:
            response.flash = 'fail to send email sorry!'
    else:
        response.flash = 'Unable to send the email : email parameters not defined'
elif form.errors:
        response.flash='form has errors.'
</snippet></ROW><ROW><id>19090283</id><snippet>mail.settings.server = 'smtp@gmail.com:465'
</snippet></ROW><ROW><id>19090283</id><snippet>mail.settings.server = 'smtp.gmail.com:465'
</snippet></ROW><ROW><id>19090283</id><snippet>mail.settings.server = 'smtp.gmail.com:587'
</snippet></ROW><ROW><id>19090311</id><snippet>def incrX(i):
  while True:
    i += 1
    i %= 10
    yield i

incr = incrX(10)
print incr.next()
print incr.next()
</snippet></ROW><ROW><id>19090380</id><snippet>if</snippet></ROW><ROW><id>19090380</id><snippet>x = 1 - x
</snippet></ROW><ROW><id>19090380</id><snippet>^</snippet></ROW><ROW><id>19090380</id><snippet>for i in range (start, end):
    x ^= 1
</snippet></ROW><ROW><id>19090380</id><snippet>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; x ^ 1
0
&gt;&gt;&gt; x ^= 1
&gt;&gt;&gt; x ^ 1
1
</snippet></ROW><ROW><id>19090380</id><snippet>itertools.cycle()</snippet></ROW><ROW><id>19090380</id><snippet>from itertools import cycle

x_values = cycle((0, 1))

for i in range (start, end):
    x = next(x_values)
</snippet></ROW><ROW><id>19090380</id><snippet>cycle()</snippet></ROW><ROW><id>19090380</id><snippet>&gt;&gt;&gt; from itertools import cycle
&gt;&gt;&gt; x_values = cycle((1, 'spam', 3.14))
&gt;&gt;&gt; next(x_values)
1
&gt;&gt;&gt; next(x_values)
'spam'
&gt;&gt;&gt; next(x_values)
3.14
&gt;&gt;&gt; next(x_values)
1
</snippet></ROW><ROW><id>19090380</id><snippet>timeit</snippet></ROW><ROW><id>19090380</id><snippet>x - 1</snippet></ROW><ROW><id>19090380</id><snippet>cycle()</snippet></ROW><ROW><id>19090380</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit('x = 1 - x', 'x = 0')
0.044335126876831055
&gt;&gt;&gt; timeit('x ^= 1', 'x = 0')
0.05133986473083496
&gt;&gt;&gt; timeit('x = ((x + 1) % 2)', 'x = 0')
0.11392998695373535
&gt;&gt;&gt; timeit('x = next(x_values)', 'from itertools import cycle; x_values = cycle((0, 1))')
0.1254570484161377
</snippet></ROW><ROW><id>19090380</id><snippet>if</snippet></ROW><ROW><id>19090380</id><snippet>dis.dis()</snippet></ROW><ROW><id>19090380</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def foo():
...     if x==0:
...         x=1
...     else:
...         x=0
... 
&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (0)
              6 COMPARE_OP               2 (==)
              9 POP_JUMP_IF_FALSE       21

  3          12 LOAD_CONST               2 (1)
             15 STORE_FAST               0 (x)
             18 JUMP_FORWARD             6 (to 27)

  5     &gt;&gt;   21 LOAD_CONST               1 (0)
             24 STORE_FAST               0 (x)
        &gt;&gt;   27 LOAD_CONST               0 (None)
             30 RETURN_VALUE        
</snippet></ROW><ROW><id>19090380</id><snippet>&gt;&gt;&gt; def bar():
...     x = ((x + 1) % 2)
... 
&gt;&gt;&gt; dis.dis(bar)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (1)
              6 BINARY_ADD          
              7 LOAD_CONST               2 (2)
             10 BINARY_MODULO       
             11 STORE_FAST               0 (x)
             14 LOAD_CONST               0 (None)
             17 RETURN_VALUE        
</snippet></ROW><ROW><id>19090623</id><snippet>csv.reader()</snippet></ROW><ROW><id>19090623</id><snippet>rows = list(reader)
row1 = rows[0]
row2 = rows[1]
row3 = rows[2]
</snippet></ROW><ROW><id>19090623</id><snippet>next()</snippet></ROW><ROW><id>19090623</id><snippet>reader = csv.reader(open('new_file.txt','r'),delimiter=' ')
row1 = next(reader)
row2 = next(reader)
row3 = next(reader)
</snippet></ROW><ROW><id>19090711</id><snippet>clientConnectionFailed</snippet></ROW><ROW><id>19090711</id><snippet>clientConnectionLost</snippet></ROW><ROW><id>19090733</id><snippet>&lt;script type='text/javascript' src="cpp2js.js"&gt;&lt;/script&gt; 
</snippet></ROW><ROW><id>19091361</id><snippet>if current_day &gt;= set_week_day:
    week = current_week
else:
    week = current_week - 1
</snippet></ROW><ROW><id>19091376</id><snippet>GtkGrid</snippet></ROW><ROW><id>19091376</id><snippet>hexpand</snippet></ROW><ROW><id>19091376</id><snippet>hexpand-set</snippet></ROW><ROW><id>19091376</id><snippet>label.set_hexpand(True)
</snippet></ROW><ROW><id>19091401</id><snippet>TopicLabel.objects.filter(connection_label__topicId__visible=True)</snippet></ROW><ROW><id>19091401</id><snippet>&gt;&gt;&gt; t1 = Topic.objects.create(title='visible1', visible=True)
&gt;&gt;&gt; t2 = Topic.objects.create(title='visible2', visible=True)
&gt;&gt;&gt; t3 = Topic.objects.create(title='invisible1', visible=False)
&gt;&gt;&gt; t4 = Topic.objects.create(title='invisible2', visible=False)
&gt;&gt;&gt; tl1 = TopicLabel.objects.create(name='1')
&gt;&gt;&gt; tl2 = TopicLabel.objects.create(name='2')
&gt;&gt;&gt; tl3 = TopicLabel.objects.create(name='3')
&gt;&gt;&gt; TopicLabelConnection.objects.create(topicId=t1, labelId=tl1) 
&gt;&gt;&gt; TopicLabelConnection.objects.create(topicId=t2, labelId=tl2) 
&gt;&gt;&gt; TopicLabelConnection.objects.create(topicId=t3, labelId=tl3) 
&gt;&gt;&gt; TopicLabelConnection.objects.create(topicId=t4, labelId=tl3) 

&gt;&gt;&gt; TopicLabel.objects.filter(connection_label__topicId__visible=True)
[&lt;TopicLabel: 1&gt;, &lt;TopicLabel: 2&gt;]
</snippet></ROW><ROW><id>19091551</id><snippet>from threading import Thread
from Queue import Queue
from time import gmtime, strftime

def worker():
    while True:
        item = q.get()
        print item
        q.task_done()

q = Queue()
for i in range(1):
     t = Thread(target=worker)
     t.daemon = True
     t.start()

# ---- Somewhere in your threads
    q.put( color("HEY - Some text ... :DDD blabla - "+strftime("%X", gmtime()),fg=85) )
# -----
q.join()
</snippet></ROW><ROW><id>19091690</id><snippet>f_str</snippet></ROW><ROW><id>19091690</id><snippet>new_lines = []
with open("test.txt") as f:
    for line in f:
        new_line = list(line)
        new_line[1] = "k"
        new_lines.append(''.join(new_line))

with open("test.txt", "w") as f:
    f.writelines(new_lines)
</snippet></ROW><ROW><id>19092036</id><snippet>class Ball:
    def spawn(self):
        self.sinceSpawn = 0

    def update(self, dt):
        if not gamePaused:
            self.sinceSpawn += dt
        if self.sinceSpawn &gt;= BALL_WAIT_TIME:
            pass #Do something here
</snippet></ROW><ROW><id>19092263</id><snippet>&gt;&gt;&gt; score = Score(0)
&gt;&gt;&gt; score.print_points()
0
</snippet></ROW><ROW><id>19092263</id><snippet>&gt;&gt;&gt; print score.points
</snippet></ROW><ROW><id>19092522</id><snippet>table_file = open('table.html', 'w')
table_file.write('&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;')
table_file.close()
</snippet></ROW><ROW><id>19092522</id><snippet>with</snippet></ROW><ROW><id>19092522</id><snippet>with open('table.html', 'w') as table_file:
  table_file.write('&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;')
  # Write anything else you need here...
</snippet></ROW><ROW><id>19093228</id><snippet>downloaded_file = bz.download_attachment(attachment_id)
file_name = str(downloaded_file.name)
</snippet></ROW><ROW><id>19093228</id><snippet>kwards = {
    'contenttype':'application/octet-stream',
   # 'filename': file_path     #there could be more parameters if needed
} 

#attachfile method will return the id of attached file 
bz.attachfile(bug_id, file_path, file_name, **kwards) 
</snippet></ROW><ROW><id>19093359</id><snippet>csv</snippet></ROW><ROW><id>19093359</id><snippet>csv.reader</snippet></ROW><ROW><id>19093359</id><snippet>delimiter=','</snippet></ROW><ROW><id>19093359</id><snippet>foo,bar,baz
hello world,again,and again
</snippet></ROW><ROW><id>19093359</id><snippet>&gt;&gt;&gt; list(csv.reader(open('test.csv', 'rb')))
[['foo', 'bar', 'baz'], ['hello world', 'again', 'and again']]
</snippet></ROW><ROW><id>19093359</id><snippet>hello world</snippet></ROW><ROW><id>19093359</id><snippet>and again</snippet></ROW><ROW><id>19093359</id><snippet>csv</snippet></ROW><ROW><id>19093359</id><snippet>with open('test.csv', 'rb') as f:
    reader = csv.reader(f, delimiter=',')
    for row in reader:
        ...
    # or just rows = list(reader)
</snippet></ROW><ROW><id>19093359</id><snippet>csv.reader</snippet></ROW><ROW><id>19093359</id><snippet>with open(filename, 'rb') as f:
    rows = [line.split(',') for line in f]
</snippet></ROW><ROW><id>19093756</id><snippet>@cache_page(60 * 15)
def my_mongo_view(request):
    return render_to_response('home.html', ...)
</snippet></ROW><ROW><id>19093756</id><snippet>from django.core.cache import cache

def my_mongo_view(request):
    ret = cache.get('home-rendered')
    if ret is None:
        ret = render_to_response('home.html', ...)
        cache.set('home-rendered', ret)
    return ret
</snippet></ROW><ROW><id>19093944</id><snippet>import json

my_list = ["hello", "world"]

with open('file.txt', 'w') as f:
    json.dump(my_list, f)
</snippet></ROW><ROW><id>19093944</id><snippet>my_list = ["hello", "world"]
with open('file.txt', 'w') as f:
    f.write('\n'.join(my_list))  # assuming your list isn't large
    f.write('\n')
</snippet></ROW><ROW><id>19093944</id><snippet>pickle</snippet></ROW><ROW><id>19093944</id><snippet>import ast
import json

with open('file.txt') as f:
    contents = f.read()
contents = ast.literal_eval(contents)  # parses the string as if it were a Pytnon literal (which it is)

with open('file.txt', 'w') as f:
    json.dump(contents, f)  # write back as JSON this time
</snippet></ROW><ROW><id>19093944</id><snippet>import ast
import json

with open('file.txt') as f:
    lines = f.read().split('\n')
contents = [ast.literal_eval(line) for line in lines]

# ...and now choose from above how you'd like to write it back to the file
</snippet></ROW><ROW><id>19094277</id><snippet>set shellcmdflag=-ic
</snippet></ROW><ROW><id>19094277</id><snippet>vim</snippet></ROW><ROW><id>19094277</id><snippet>vim</snippet></ROW><ROW><id>19094277</id><snippet>[1]+  Stopped ...</snippet></ROW><ROW><id>19094277</id><snippet>Found a swap file ...</snippet></ROW><ROW><id>19094277</id><snippet>fg</snippet></ROW><ROW><id>19094277</id><snippet>set shellcmdflag=-ic
</snippet></ROW><ROW><id>19094277</id><snippet>.exerc</snippet></ROW><ROW><id>19094808</id><snippet>einsum</snippet></ROW><ROW><id>19094808</id><snippet>np.einsum('ij,ij-&gt;i', X, X)
</snippet></ROW><ROW><id>19095094</id><snippet>&gt;&gt;&gt; match = re.match("(?P&lt;letter&gt;A)", "A")
&gt;&gt;&gt; match.groupdict()
{'letter': 'A'}
</snippet></ROW><ROW><id>19095831</id><snippet>print "\\"
</snippet></ROW><ROW><id>19095831</id><snippet>\</snippet></ROW><ROW><id>19095831</id><snippet>n</snippet></ROW><ROW><id>19095831</id><snippet>\n</snippet></ROW><ROW><id>19095831</id><snippet>newline</snippet></ROW><ROW><id>19095831</id><snippet>\</snippet></ROW><ROW><id>19095982</id><snippet>&gt;&gt;&gt; math.log(sys.float_info.min)
-708.3964185322641
</snippet></ROW><ROW><id>19095982</id><snippet>&gt;&gt;&gt; math.log(sys.float_info.min * sys.float_info.epsilon)
-744.4400719213812
</snippet></ROW><ROW><id>19096179</id><snippet>in</snippet></ROW><ROW><id>19096179</id><snippet>==</snippet></ROW><ROW><id>19096179</id><snippet>if i in match:
</snippet></ROW><ROW><id>19096179</id><snippet>i</snippet></ROW><ROW><id>19096247</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>19096497</id><snippet>def myview(request):
    if request.method == 'GET':
        # Code for GET requests
    elif request.method == 'POST':
        # Code for POST requests
</snippet></ROW><ROW><id>19096497</id><snippet>class CreateMyModelView(CreateView):
    def get(self, request, *args, **kwargs):
        # Code for GET requests

    def post(self, request, *args, **kwargs):
        # Code for POST requests
</snippet></ROW><ROW><id>19096695</id><snippet>threading.Lock</snippet></ROW><ROW><id>19096695</id><snippet>mp.Value</snippet></ROW><ROW><id>19096695</id><snippet>mp.Array</snippet></ROW><ROW><id>19096695</id><snippet>mp.Manager</snippet></ROW><ROW><id>19096695</id><snippet>mp.Event</snippet></ROW><ROW><id>19096695</id><snippet>import multiprocessing as mp
import time

def Counter(i, event):
    i.value=1
    while i.value &gt; 0 and not event.is_set():
        print("i: ",i.value)
        i.value += 1

def ValueTester(i, stopval, event):
    while True:
        if i.value &gt;= stopval:
            event.set()
            break
        else:
            time.sleep(0.1)

if __name__ == '__main__':
    num = mp.Value('d', 0.0)
    event = mp.Event()    
    counter = mp.Process(target=Counter, args=(num, event))
    counter.start()
    tester = mp.Process(target=ValueTester, args=(num, 10, event))
    tester.start()
    tester.join()
    counter.join()
    print("Process Complete")
</snippet></ROW><ROW><id>19096732</id><snippet>el = driver.find_element_by_id('id_of_select')
for option in el.find_elements_by_tag_name('option'):
    if option.text == 'The Option I Am Looking For':
        option.click()
</snippet></ROW><ROW><id>19096732</id><snippet>SElect</snippet></ROW><ROW><id>19096732</id><snippet>select_option_by_visible_text</snippet></ROW><ROW><id>19096793</id><snippet>&gt;&gt;&gt; mydict = {'mykey':u'é'}
&gt;&gt;&gt; for value in mydict.values(): 
...   print value
... 
é
</snippet></ROW><ROW><id>19096891</id><snippet>bob['files'] #get you the list with second dictionary

bob['files'][0] #get you the first item in the list, which is the nested 2nd dictionary

bob['files'][0]['type'] == 'diskDescriptor
</snippet></ROW><ROW><id>19097281</id><snippet>''.join(str(k[(0xF0 &amp; b) &gt;&gt; 4]) + str(k[0xF &amp; b]) for b in arrayofbyte)
</snippet></ROW><ROW><id>19097703</id><snippet>re.escape()</snippet></ROW><ROW><id>19097703</id><snippet>match = re.search(re.escape(string), text)
</snippet></ROW><ROW><id>19097832</id><snippet> # Add a list filter author to BookAdmin.
 # Now you can filter books by author.
 class BookAdmin(ModelAdmin):
    list_filter = ('author', )
</snippet></ROW><ROW><id>19097832</id><snippet># Add hyperlinks to AuthorAdmin.
# Now you can jump to the book list filtered by autor. 
class AuthorAdmin(admin.ModelAdmin):
    def authors(self):
        return '&lt;a href="/admin/appname/book/?author__id__exact=%d"&gt;%s&lt;/a&gt;' % (self.author_id, self.author)
    authors.allow_tags = True
</snippet></ROW><ROW><id>19097832</id><snippet>class Books(models.Model):
    title = models.CharField()
    author = models.ForeignKey(Author)

def get_admin_url(self):
    return "/admin/appname/books/%d/" %self.id


class BookAdmin(admin.ModelAdmin):
    def authors(self):
        html = ""
        for obj in Books.objects.filter(author__id_exact=self.id):
            html += '&lt;p&gt;&lt;a href="%s"&gt;%s&lt;/a&gt;&lt;/p&gt;' %(obj.get_admin_url(), obj.title)
        return html
    authors.allow_tags = True

    list_display = ['title', authors]
</snippet></ROW><ROW><id>19097892</id><snippet>$ awk 'BEGIN{OFS=FS="|"}
  NR&gt;1 {cost1[$1]+=$2; cost2[$1]+=$3} 
  END{ for (i in cost1) print i, cost1[i], cost2[i]}' file
Sugar|300|200
Spices|100|200
Pizza|200|150
</snippet></ROW><ROW><id>19097892</id><snippet>BEGIN{OFS=FS="|"}</snippet></ROW><ROW><id>19097892</id><snippet>|</snippet></ROW><ROW><id>19097892</id><snippet>NR&gt;1</snippet></ROW><ROW><id>19097892</id><snippet>cost1</snippet></ROW><ROW><id>19097892</id><snippet>cost2</snippet></ROW><ROW><id>19097892</id><snippet>END {}</snippet></ROW><ROW><id>19097918</id><snippet>Z_level, XD1, XD2, ... = list_sample
</snippet></ROW><ROW><id>19097967</id><snippet>import sys
sys.path = [ &lt;path to your web app&gt; ] + sys.path
from cherrypy._cpwsgi import CPWSGIApp
from cherrypy._cptree import Application

from &lt;your_web_app&gt; import &lt;your web app class&gt; 
config_path = '&lt;path to your cherrypy config&gt;'
application = CPWSGIApp(
    Application(&lt;your web app class&gt;(), '', config = config_path)
</snippet></ROW><ROW><id>19097972</id><snippet>FOR i IN 1..array_length(arr, 1) LOOP
</snippet></ROW><ROW><id>19097972</id><snippet>ANY</snippet></ROW><ROW><id>19097972</id><snippet>ROW_NUMBER</snippet></ROW><ROW><id>19097972</id><snippet>arr := regexp_split_to_array(_imeis, E'\\s+');
RETURN QUERY 
    SELECT * FROM (
        SELECT 
        ROW_NUMBER() OVER(PARTITION BY dt.imei ORDER BY dt.date_time_process DESC) as rnumber
        --other fields here
        FROM gpstracking_device_tracks dt --added alias
        WHERE dt.imei = ANY(arr)
        AND dt.date_time_process &gt;= date_trunc('hour', now()) 
        AND dt.date_time_process &lt;= NOW()
    )
    where rnumber = 1
</snippet></ROW><ROW><id>19097972</id><snippet>    SELECT 
        ROW_NUMBER() OVER(PARTITION BY dt.imei ORDER BY dt.date_time_process DESC) as rnumber
        --other fields here
    FROM gpstracking_device_tracks dt --added alias
    WHERE dt.imei = ANY(arr)
    AND dt.date_time_process &gt;= @last_poll_timestamp
    AND dt.date_time_process &lt;= NOW()
</snippet></ROW><ROW><id>19098195</id><snippet>vsl</snippet></ROW><ROW><id>19098195</id><snippet>grid</snippet></ROW><ROW><id>19098195</id><snippet>Label</snippet></ROW><ROW><id>19098195</id><snippet>None</snippet></ROW><ROW><id>19098195</id><snippet>vsl=Label(gui,text="Working, please wait...",font=("arial",16))
vsl.grid(row=20,rowspan=1,column=0,columnspan=1,padx=10,sticky=N)
</snippet></ROW><ROW><id>19098195</id><snippet>vsl</snippet></ROW><ROW><id>19098195</id><snippet>grid</snippet></ROW><ROW><id>19098195</id><snippet>None</snippet></ROW><ROW><id>19098258</id><snippet>cv2</snippet></ROW><ROW><id>19098258</id><snippet>numpy</snippet></ROW><ROW><id>19098258</id><snippet>numpy.shape</snippet></ROW><ROW><id>19098258</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import cv2
&gt;&gt;&gt; img = cv2.imread('foo.jpg')
&gt;&gt;&gt; height, width, depth = img.shape
&gt;&gt;&gt; print height, width, depth
  600 800 3
</snippet></ROW><ROW><id>19098258</id><snippet>img</snippet></ROW><ROW><id>19098258</id><snippet>height, width = img.shape</snippet></ROW><ROW><id>19098329</id><snippet>raise KeyboardInterrupt</snippet></ROW><ROW><id>19098329</id><snippet>time.sleep()</snippet></ROW><ROW><id>19098329</id><snippet>time.sleep()</snippet></ROW><ROW><id>19098329</id><snippet>def g():
    thread.start_new_thread(f, ())
    for _ in range(10): 
        time.sleep(1)
</snippet></ROW><ROW><id>19098341</id><snippet>m = re.findall(r'\[\d+\] – \[\d+\]', body, re.UNICODE)
</snippet></ROW><ROW><id>19098341</id><snippet>[20] – [22]</snippet></ROW><ROW><id>19098410</id><snippet>key=d.get</snippet></ROW><ROW><id>19098410</id><snippet>distutils</snippet></ROW><ROW><id>19098410</id><snippet>&gt;&gt;&gt; sorted(firmware_percents, key=distutils.version.StrictVersion, reverse=True)
['7.0.3', '7.0.2', '7.0.1', '7.0', '6.1.4', '6.1.3', '6.1.2', '6.1.1', '6.1', '6.0.2', '6.0.1', '6.0', '5.1.1', '5.1', '5.0.1', '5.0']
&gt;&gt;&gt; sorted(firmware_percents, key=distutils.version.LooseVersion, reverse=True)
['7.0.3', '7.0.2', '7.0.1', '7.0', '6.1.4', '6.1.3', '6.1.2', '6.1.1', '6.1', '6.0.2', '6.0.1', '6.0', '5.1.1', '5.1', '5.0.1', '5.0']
</snippet></ROW><ROW><id>19098410</id><snippet>.</snippet></ROW><ROW><id>19098410</id><snippet>7.0.2rc1</snippet></ROW><ROW><id>19098423</id><snippet>#make dictionary
user_data = {}

#make a new user object
new_user = CsrUser(...)

#insert your new user object into the dictionary
#use new_user.f_name or new_user.l_name here in place of new_user.name (or combine both)
user_data[new_user.name] = new_user  

#to get a user object out of the dictionary 
a_user = user_data["name_here"]
</snippet></ROW><ROW><id>19098507</id><snippet>score1 + score2</snippet></ROW><ROW><id>19098620</id><snippet>cursor.execute</snippet></ROW><ROW><id>19098620</id><snippet>None</snippet></ROW><ROW><id>19098620</id><snippet> print cur.fetchone()

 rows_to_fetch = 3
 print cur.fetchmany(rows_to_fetch)

 print cur.fetchall()
</snippet></ROW><ROW><id>19098791</id><snippet>mp</snippet></ROW><ROW><id>19098791</id><snippet>multiprocessing</snippet></ROW><ROW><id>19098791</id><snippet>mp.cpu_count()</snippet></ROW><ROW><id>19098791</id><snippet>mp.Pool()</snippet></ROW><ROW><id>19098791</id><snippet>mp.Pool(processes=None)</snippet></ROW><ROW><id>19098791</id><snippet>mp.cpu_count()</snippet></ROW><ROW><id>19098791</id><snippet>.imap_unordered(...)</snippet></ROW><ROW><id>19098791</id><snippet>Pool</snippet></ROW><ROW><id>19098791</id><snippet>degreelist</snippet></ROW><ROW><id>19098791</id><snippet>Pool</snippet></ROW><ROW><id>19098791</id><snippet>Pool</snippet></ROW><ROW><id>19098791</id><snippet>mp.Queue</snippet></ROW><ROW><id>19098791</id><snippet>.put()</snippet></ROW><ROW><id>19098791</id><snippet>.get()</snippet></ROW><ROW><id>19098791</id><snippet>Pool</snippet></ROW><ROW><id>19098791</id><snippet>imap_unordered</snippet></ROW><ROW><id>19098791</id><snippet>Pool</snippet></ROW><ROW><id>19098791</id><snippet>chunksize</snippet></ROW><ROW><id>19098791</id><snippet>init_worker</snippet></ROW><ROW><id>19098791</id><snippet>degreeslist</snippet></ROW><ROW><id>19098791</id><snippet>import multiprocessing as mp

def init_worker(mps, fps, cut):
    global memorizedPaths, filepaths, cutoff
    global DG

    print "process initializing", mp.current_process()
    memorizedPaths, filepaths, cutoff = mps, fps, cut
    DG = 1##nx.read_gml("KeggComplete.gml", relabel = True)

def work(item):
    _all_simple_paths_graph(DG, cutoff, item, memorizedPaths, filepaths)

def _all_simple_paths_graph(DG, cutoff, item, memorizedPaths, filepaths):
    pass # print "doing " + str(item)

if __name__ == "__main__":
    m = mp.Manager()
    memorizedPaths = m.dict()
    filepaths = m.dict()
    cutoff = 1 ##
    # use all available CPUs
    p = mp.Pool(initializer=init_worker, initargs=(memorizedPaths,
                                                   filepaths,
                                                   cutoff))
    degreelist = range(100000) ##
    for _ in p.imap_unordered(work, degreelist, chunksize=500):
        pass
    p.close()
    p.join()
</snippet></ROW><ROW><id>19098791</id><snippet>   memorizedPaths[item] = item
</snippet></ROW><ROW><id>19098791</id><snippet>_all_simple_paths_graph()</snippet></ROW><ROW><id>19098791</id><snippet>Manager.dict()</snippet></ROW><ROW><id>19098854</id><snippet># UNTESTED
import requests
import csv

# Connect to the web server.
response = requests.get("https:://domain.com/file_maker.pl?param1=12345", stream=True)
# Read the data as CSV
data = csv.reader(response.raw)

# Use the data
for line in data:
  print line
</snippet></ROW><ROW><id>19098854</id><snippet># UNTESTED
import requests
import csv

# Connect to the web server.
response = requests.get("https:://domain.com/file_maker.pl?param1=12345")

# Store the data
with open('outfile', 'w') as outfile:
    outfile.write(response.content)
</snippet></ROW><ROW><id>19098854</id><snippet>url = "https://release.domain.com/release_cr_new.plreleaseid=26851&amp;v=2&amp;m=a&amp;dump_csv=1"
headers = {
  "Accept-Encoding" : "gzip,deflate,sdch",
  "Accept-Language" : "en-US,en;q=0.8",
  "User-Agent" : "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.116 Safari/537.36",
  "Accept" : "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
  "Referer" : "https://release.domain.com/release_cr_new.html?releaseid=26851&amp;v=2&amp;m=a",
  "Cookie" : "releasegroup=Development; XR77=3q3pzeMQc1gf-jDlpNtkgr4WvZYqxVZSYzeQHfGAwMTAeZQ6D3g2e6w; __utma=147924903.423899313.1373397746.1378841205.1380290587.15; __utmc=147924903; __utmz=147924903.1380290587.15.14.utmcsr=google|utmccn=(organic)|utmcmd=organic|utmctr=(not%20provided); pubcookie_s_release.domain.com=Hm17WT1VJbPpBLOQ+NhtyBbZlfO9qntsoGP0P8BEVeh4d0ay+THE3EkNLc6PV5rJ40Ui7uj/+c6f2tzZYWOJ/j+dyoP5l+J//rL875K9ERxio1FZeiUVRQgeabetZ+V1AWlrkjURmAw2SU1hEz/f2pCt0sHe06C14vWA95PFu1Smp6viWOL8QnaPHFWhGU3uQQH5Wxex0CziHbrYXHuKwnxwWejvVtTM8e8aIHkM2WuB3IIDhGMVtd0r292owvcv6Rvcl7tYSoQaQYfSpPZreXo4tNO9gh9ZIGqao8LaCfG5Fw8+Ow5wQKf2ryVuPc8Ah4MTIzC1UeZxBtxSTyZk5E1in7LCV9E+d/5G84U+ECcdn166gJg1iMG68II81YJO9fYs91gGtA5iUa6h3RpFo+ysBkqbHjCpetOUxfHh47sdr4nUoIWEb0LfKVTYfvmW6BNGx4m90PqE8aQlknv7zxqAQrujqe7h5zSpmaD5UjrfRwp7lYD+6e88vgQzLgWlcAA=; _session_id=eb0095f849a509c3cf65b43680b3002a; default_column_2=bugid%2Cloginname%2Ccomponent%2Cversionvalue%2Cbugdate%2Cshortdescription%2Cpriority%2Cstatus%2Cqacontact%2Csqa_status%2Cis_dep"
}

response = requests.get(url, headers=headers)
</snippet></ROW><ROW><id>19098922</id><snippet>ciphered_msg = str()
i = int()
j = int()
n = int(3)
</snippet></ROW><ROW><id>19098922</id><snippet>ciphered_msg = ""
i = 0 # unnecessary, the i variable gets reassigned in the loop, delete this line
j = 0 # unnecessary, the j variable gets reassigned in the loop, delete this line
n = 3
</snippet></ROW><ROW><id>19098922</id><snippet>0</snippet></ROW><ROW><id>19098922</id><snippet>1</snippet></ROW><ROW><id>19098922</id><snippet>2</snippet></ROW><ROW><id>19098922</id><snippet>message</snippet></ROW><ROW><id>19098922</id><snippet>ciphered_msg</snippet></ROW><ROW><id>19098922</id><snippet>message</snippet></ROW><ROW><id>19098922</id><snippet>5</snippet></ROW><ROW><id>19098922</id><snippet>message</snippet></ROW><ROW><id>19098922</id><snippet>0 3 1 4 2
</snippet></ROW><ROW><id>19098922</id><snippet>message</snippet></ROW><ROW><id>19098922</id><snippet>abcde</snippet></ROW><ROW><id>19098922</id><snippet>adbec</snippet></ROW><ROW><id>19098922</id><snippet># input
0 1 2 3 4 # original indexes
a b c d e # `message` variable

# output
0 3 1 4 2 # scrambled indexes
a d b e c # `ciphered_msg` variable
</snippet></ROW><ROW><id>19099764</id><snippet>sorted</snippet></ROW><ROW><id>19099764</id><snippet>return sorted(data)
</snippet></ROW><ROW><id>19099764</id><snippet>data</snippet></ROW><ROW><id>19099764</id><snippet>.sort</snippet></ROW><ROW><id>19099764</id><snippet>data.sort()
return data
</snippet></ROW><ROW><id>19100005</id><snippet>&lt;</snippet></ROW><ROW><id>19100005</id><snippet>&gt;</snippet></ROW><ROW><id>19100005</id><snippet>&lt;=</snippet></ROW><ROW><id>19100005</id><snippet>&gt;=</snippet></ROW><ROW><id>19100005</id><snippet>==</snippet></ROW><ROW><id>19100005</id><snippet>key</snippet></ROW><ROW><id>19100005</id><snippet>key</snippet></ROW><ROW><id>19100076</id><snippet>name = raw_input("Name the variable:")
value = raw_input("And the value?")
exec("{} = {}".format(name, value))
</snippet></ROW><ROW><id>19100132</id><snippet>arrs = Regions.objects.filter(parentid_id in ListFirst) 
</snippet></ROW><ROW><id>19100132</id><snippet>arrs = Regions.objects.filter(parentid__id__in=ListFirst) 
</snippet></ROW><ROW><id>19100132</id><snippet>ars = Regions.objects.filter(parentid_id=id) 
</snippet></ROW><ROW><id>19100132</id><snippet>ars = Regions.objects.filter(parentid__id=id) 
</snippet></ROW><ROW><id>19100381</id><snippet>for</snippet></ROW><ROW><id>19100381</id><snippet>&gt;&gt;&gt; for i in 42:
...     pass
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not iterable
</snippet></ROW><ROW><id>19100381</id><snippet>range()</snippet></ROW><ROW><id>19100381</id><snippet>zip()</snippet></ROW><ROW><id>19100381</id><snippet>def sum_items(list1, list2):
    sum_list = []
    for i, j in zip(list1, list2)
        sum_list.append(i + j)
    return sum_list
</snippet></ROW><ROW><id>19100381</id><snippet>def sum_items(list1, list2):
    return [i + j for i, j in zip(list1, list2)]
</snippet></ROW><ROW><id>19100381</id><snippet>sum()</snippet></ROW><ROW><id>19100381</id><snippet>def sum_items(list1, list2):
    return [sum(t) for t in zip(list1, list2)]
</snippet></ROW><ROW><id>19100381</id><snippet>zip()</snippet></ROW><ROW><id>19100381</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>19100381</id><snippet>['foo', 'bar', 'baz']</snippet></ROW><ROW><id>19100381</id><snippet>[(1, 'foo'), (2, 'bar'), (3, 'baz')]</snippet></ROW><ROW><id>19100736</id><snippet>WebDriverWait</snippet></ROW><ROW><id>19100736</id><snippet>from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait # available since 2.4.0
from selenium.webdriver.support import expected_conditions as EC # available since 2.26.0

ff = webdriver.Firefox()
ff.get("http://somedomain/url_that_delays_loading")
try:
    element = WebDriverWait(ff, 10).until(EC.presence_of_element_located((By.ID, "myDynamicElement")))
finally:
    ff.quit()
</snippet></ROW><ROW><id>19101056</id><snippet>{% load i18n %}
{% get_language_info for "en" as lang %}
{{lang.name_local}} ({{lang.code}})
</snippet></ROW><ROW><id>19101056</id><snippet>English (en)
</snippet></ROW><ROW><id>19101400</id><snippet>__unicode__</snippet></ROW><ROW><id>19101400</id><snippet>class ParentEvents(models.Model):
    name=models.CharField(max_length=70)

    def __unicode__(self):
        return u"%s" % self.name
</snippet></ROW><ROW><id>19101400</id><snippet>Event</snippet></ROW><ROW><id>19101400</id><snippet>__unicode__</snippet></ROW><ROW><id>19101444</id><snippet>author[some_id]</snippet></ROW><ROW><id>19101444</id><snippet>author-ID</snippet></ROW><ROW><id>19101444</id><snippet>title-ID</snippet></ROW><ROW><id>19101457</id><snippet>def editstr(s):
    n = s.count(' ')
    if n == 0: return s
    return s[:-2*n/3].replace(' ', '%20')
</snippet></ROW><ROW><id>19101457</id><snippet>.replace</snippet></ROW><ROW><id>19101493</id><snippet>import xml.etree.ElementTree as etree
txml = etree.parse('xml string above')
txml.findall('SESSION/TRANSACTION')
[&lt;Element TRANSACTION at 0x4064f9d8&gt;,
 &lt;Element TRANSACTION at 0x4064fa20&gt;,
 &lt;Element TRANSACTION at 0x4064f990&gt;,
 &lt;Element TRANSACTION at 0x4064fa68&gt;,
 &lt;Element TRANSACTION at 0x4064fab0&gt;]
[x.get('ID') for x in txml.findall('SESSION/TRANSACTION')]
['2103645570', '4315547431', '4099381642', '1220404184', '201506542']
</snippet></ROW><ROW><id>19101570</id><snippet>def delay():
    b=b+1
    time.sleep(b)
    start()
</snippet></ROW><ROW><id>19101570</id><snippet>b = b + 1</snippet></ROW><ROW><id>19101570</id><snippet>b</snippet></ROW><ROW><id>19101570</id><snippet>delay</snippet></ROW><ROW><id>19101570</id><snippet>def delay():
    global b
    b=b+1
    time.sleep(b)
    start()
</snippet></ROW><ROW><id>19101570</id><snippet>while</snippet></ROW><ROW><id>19101570</id><snippet>start</snippet></ROW><ROW><id>19101570</id><snippet>delay</snippet></ROW><ROW><id>19101570</id><snippet>while</snippet></ROW><ROW><id>19101570</id><snippet>import time

password = 'apple'

def start():
    counter = 0
    user_guess = ''

    while user_guess != password:
        print("enter password")
        user_guess = input("-&gt;  ")
        if user_guess != password:
            counter += + 1          # Same thing as doing `counter = counter + 1`
            time.sleep(counter)

    grant()

def grant():
    print "Access granted!"

start()
</snippet></ROW><ROW><id>19101603</id><snippet>flux</snippet></ROW><ROW><id>19101603</id><snippet>SEM</snippet></ROW><ROW><id>19101603</id><snippet>depth</snippet></ROW><ROW><id>19101603</id><snippet>del</snippet></ROW><ROW><id>19101603</id><snippet>flux</snippet></ROW><ROW><id>19101603</id><snippet>flux</snippet></ROW><ROW><id>19101603</id><snippet>flux</snippet></ROW><ROW><id>19101603</id><snippet>flux_n</snippet></ROW><ROW><id>19101603</id><snippet>flux_n</snippet></ROW><ROW><id>19101603</id><snippet>list</snippet></ROW><ROW><id>19101603</id><snippet>SEM_n</snippet></ROW><ROW><id>19101603</id><snippet>matplotlib</snippet></ROW><ROW><id>19101603</id><snippet>def data_reader(file_name, first_surface):
    flux = []
    SEM = []
    depth = []

    with open (file_name) as inf:
        lines = inf.readlines()
        for (i, line,) in enumerate(lines):
            if ' surface  %d' %first_surface in line:
                data = (lines[i+1].strip())
                fields = data.split()
                numbers = list(map(float,fields))  
                flux.append(numbers[0])
                SEM.append(numbers[1])
                first_surface += 1
                depth.append(first_surface - 101)                

    return (flux, SEM, first_surface)
</snippet></ROW><ROW><id>19101626</id><snippet>try: ... expect:</snippet></ROW><ROW><id>19101889</id><snippet>WontFix</snippet></ROW><ROW><id>19101889</id><snippet>:(</snippet></ROW><ROW><id>19101948</id><snippet>numpy.round</snippet></ROW><ROW><id>19101948</id><snippet>100 * np.round(newdf3.pivot_table(rows=['Quradate'], aggfunc=np.mean), 2) 
</snippet></ROW><ROW><id>19101948</id><snippet>DataFrame</snippet></ROW><ROW><id>19101948</id><snippet>In [9]: dfrm
Out[9]:
          A         B         C
0 -1.312700  0.760710  1.044006
1 -0.792521 -0.076913  0.087334
2 -0.557738  0.982031  1.365357
3  1.013947  0.345896 -0.356652
4  1.278278 -0.195477  0.550492
5  0.116599 -0.670163 -1.290245
6 -1.808143 -0.818014  0.713614
7  0.233726  0.634349  0.561103
8  2.344671 -2.331232 -0.759296
9 -1.658047  1.756503 -0.996620

In [10]: 100*np.round(dfrm, 2)
Out[10]:
     A    B    C
0 -131   76  104
1  -79   -8    9
2  -56   98  137
3  101   35  -36
4  128  -20   55
5   12  -67 -129
6 -181  -82   71
7   23   63   56
8  234 -233  -76
9 -166  176 -100
</snippet></ROW><ROW><id>19102031</id><snippet>view.py</snippet></ROW><ROW><id>19102031</id><snippet>medecinas</snippet></ROW><ROW><id>19102031</id><snippet>datos.is_valid()</snippet></ROW><ROW><id>19102031</id><snippet>if</snippet></ROW><ROW><id>19102082</id><snippet>global</snippet></ROW><ROW><id>19102082</id><snippet>myglobal = 'myglobal'

def test_global():
    print myglobal

test_global()

myglobal #output
</snippet></ROW><ROW><id>19102082</id><snippet>myglobal</snippet></ROW><ROW><id>19102082</id><snippet>import dis

dis.dis(test_global)

  2           0 LOAD_GLOBAL              0 (myglobal)
              3 PRINT_ITEM
              4 PRINT_NEWLINE
              5 LOAD_CONST               0 (None)
              8 RETURN_VALUE
</snippet></ROW><ROW><id>19102082</id><snippet>myglobal</snippet></ROW><ROW><id>19102082</id><snippet>myglobal</snippet></ROW><ROW><id>19102082</id><snippet>import dis

def test_global():
    myglobal = 'mylocal'

dis.dis(test_global)

  2           0 LOAD_CONST               1 ('mylocal')
              3 STORE_FAST               0 (myglobal)
              6 LOAD_CONST               0 (None)
              9 RETURN_VALUE
</snippet></ROW><ROW><id>19102082</id><snippet>myglobal</snippet></ROW><ROW><id>19102082</id><snippet>myglobal += 'another string'
</snippet></ROW><ROW><id>19102082</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>19102082</id><snippet>myglobal</snippet></ROW><ROW><id>19102082</id><snippet>global myglobal
myglobal += 'another string'
</snippet></ROW><ROW><id>19102116</id><snippet>/users</snippet></ROW><ROW><id>19102116</id><snippet>/v1.0/users</snippet></ROW><ROW><id>19102116</id><snippet>/v1.1/users</snippet></ROW><ROW><id>19102116</id><snippet>/v1.0/users</snippet></ROW><ROW><id>19102116</id><snippet>/v1.1/users</snippet></ROW><ROW><id>19102116</id><snippet>@app.route('/&lt;version&gt;/users')
def users(version):
    # do something
    return jsonify(response)
</snippet></ROW><ROW><id>19102474</id><snippet>def ends (s):
    if len(s) &gt; 2:
        return s[0] + s[-1]
    else:
        return s

def butends (s):
    if len(s) &gt; 2:
        return s[1:-1]
    else:
        return s

def repl (find, replacement, s):
    newString = ''
    for c in s:
        if c == find:
            newString += replacement
        else:
            newString += c
    return newString
</snippet></ROW><ROW><id>19102520</id><snippet>class BasicTest(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        print('BasicTest.__init__')
        super(unittest.TestCase, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>19102520</id><snippet>class BasicTest(unittest.TestCase):
    def __init__(self, *args, **kwargs):
        print('BasicTest.__init__')
        super(BasicTest, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>19102520</id><snippet>class BasicTest(unittest.TestCase):
    ...
    def setUp(self):
        print('BasicTest.setUp')
        super(BasicTest, self).tearDown()
</snippet></ROW><ROW><id>19102616</id><snippet>weight</snippet></ROW><ROW><id>19102616</id><snippet>def userInput():
    a= input("Please put in the weight of your package:")
    weight = None
    try:
        weight= float(a)
    except:
        userInput()
    return weight

def calculate(weight):
    if weight &lt;= 2:
        print('Your rate is $1.10')
    elif weight &gt; 2 and weight &lt;= 6:
        print('Your rate is $2.20')
    elif weight &gt; 6 and weight &lt;= 10:
        print('Your rate is $3.70')
    else:
        print('Your rate is $3.80')

def main():
    weight = userInput()
    calculate(weight)

main()
</snippet></ROW><ROW><id>19102925</id><snippet>In [4]: s = df.choices.apply(Series).stack()

In [5]: s.name = 'choices' # needs a name to join

In[6]: del df['choices']

In[7]: df1 = df.join(s.reset_index(level=1))

In[8]: df1.columns = ['name', 'rank', 'choice']

In [9]: df1.sort(['name', 'rank']).reset_index(drop=True)
Out[9]: 
    name  rank  choice
0   tata     0       5
1   tata     1       4
2   tata     2       3
3   tata     3       1
4   tati     0       6
5   tati     1       3
6   tati     2       2
7   tati     3       1
8   tati     4       5
9   tati     5       4
10  toto     0       1
11  toto     1       2
12  toto     2       3
</snippet></ROW><ROW><id>19103092</id><snippet>message = "GET / HTTP/1.1\r\n\r\n"
</snippet></ROW><ROW><id>19103092</id><snippet>send()</snippet></ROW><ROW><id>19103092</id><snippet>s.send(message.encode('utf-8'))
</snippet></ROW><ROW><id>19103221</id><snippet>str.format()</snippet></ROW><ROW><id>19103221</id><snippet>'&lt;'</snippet></ROW><ROW><id>19103221</id><snippet>'&gt;'</snippet></ROW><ROW><id>19103221</id><snippet>'='</snippet></ROW><ROW><id>19103221</id><snippet>'^'</snippet></ROW><ROW><id>19103221</id><snippet>&gt;&gt;&gt; for args in (('apple', '$1.09', '80'), ('truffle', '$58.01', '2')):
...     print '{0:&lt;10} {1:&gt;8} {2:&gt;8}'.format(*args)
...
apple         $1.09       80
truffle      $58.01        2
</snippet></ROW><ROW><id>19103241</id><snippet>flask.g</snippet></ROW><ROW><id>19103241</id><snippet>flask.g</snippet></ROW><ROW><id>19103241</id><snippet>__init__.py</snippet></ROW><ROW><id>19103241</id><snippet>from flask import Flask
from pymongo import MongoClient
# This line of code does NOT create a connection
client = MongoClient()

app = Flask()

# This can be in __init__.py, or some other file that has imported the "client" attribute
@app.route('/'):
def index():
    posts = client.database.posts.find()
</snippet></ROW><ROW><id>19103241</id><snippet>from flask import Flask, g
from pymongo import MongoClient
# This line of code does NOT create a connection
client = MongoClient()

app = Flask()

@app.before_request
def before_request():
    g.db = client.database

@app.route('/'):
def index():
    posts = g.db.posts.find()
</snippet></ROW><ROW><id>19103241</id><snippet>g.db</snippet></ROW><ROW><id>19103241</id><snippet>flask.g</snippet></ROW><ROW><id>19103241</id><snippet>session</snippet></ROW><ROW><id>19103241</id><snippet>flask.g</snippet></ROW><ROW><id>19103241</id><snippet>after_request</snippet></ROW><ROW><id>19103241</id><snippet>flask.g</snippet></ROW><ROW><id>19103241</id><snippet>session</snippet></ROW><ROW><id>19103257</id><snippet>@app.route("/", methods = ["GET","PUT"])</snippet></ROW><ROW><id>19103257</id><snippet>route()</snippet></ROW><ROW><id>19103257</id><snippet>app.route(...)</snippet></ROW><ROW><id>19103257</id><snippet>@</snippet></ROW><ROW><id>19103257</id><snippet>index</snippet></ROW><ROW><id>19103257</id><snippet>index = app.route(...)(index)
</snippet></ROW><ROW><id>19103257</id><snippet>app.route()</snippet></ROW><ROW><id>19103257</id><snippet>index</snippet></ROW><ROW><id>19103257</id><snippet>index</snippet></ROW><ROW><id>19103257</id><snippet>@foo
def bar()
   pass
</snippet></ROW><ROW><id>19103257</id><snippet>foo()</snippet></ROW><ROW><id>19103257</id><snippet>bar</snippet></ROW><ROW><id>19103257</id><snippet>route()</snippet></ROW><ROW><id>19103257</id><snippet>route</snippet></ROW><ROW><id>19103257</id><snippet>def route(self, *rargs, **kargs):
    args = list(rargs)
    if kargs:
        print(kargs['methods'])
    def decorator(f):
        def wrapped(index_args):
            f(args[0])
        return wrapped
    return decorator
</snippet></ROW><ROW><id>19103277</id><snippet>track</snippet></ROW><ROW><id>19103277</id><snippet>driveAtFive</snippet></ROW><ROW><id>19103277</id><snippet>driveAtFive = client.post('/tracks', track={
  'title': 'Drive at 5 - ' + now.strftime("%Y-%m-%d"),
  'sharing': 'public',
  'asset_data': open('/home/jhvisser/Music/driveAt5_'+now.strftime("%y%m%d")+'.mp3', 'rb')
})
</snippet></ROW><ROW><id>19103336</id><snippet>for y in range(1, 9):
    for x in range(4):
        base = 20 if y % 2 == 0 else 10
        canvas.drawRect(base + (x * 20), y * 10, 10, 10)
</snippet></ROW><ROW><id>19103336</id><snippet>y</snippet></ROW><ROW><id>19103336</id><snippet>y</snippet></ROW><ROW><id>19103336</id><snippet>x</snippet></ROW><ROW><id>19103336</id><snippet>itertools.product()</snippet></ROW><ROW><id>19103336</id><snippet>from itertools import product

for y, x in product(range(1, 9), range(4)):
    base = 20 if y % 2 == 0 else 10
    canvas.drawRect(base + (x * 20), y * 10, 10, 10)
</snippet></ROW><ROW><id>19103336</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; for y, x in product(range(1, 9), range(4)):
...     base = 20 if y % 2 == 0 else 10
...     print (base + (x * 20), y * 10)
... 
(10, 10)
(30, 10)
(50, 10)
(70, 10)
(20, 20)
(40, 20)
(60, 20)
(80, 20)
(10, 30)
(30, 30)
(50, 30)
(70, 30)
(20, 40)
(40, 40)
(60, 40)
(80, 40)
(10, 50)
(30, 50)
(50, 50)
(70, 50)
(20, 60)
(40, 60)
(60, 60)
(80, 60)
(10, 70)
(30, 70)
(50, 70)
(70, 70)
(20, 80)
(40, 80)
(60, 80)
(80, 80)
</snippet></ROW><ROW><id>19103363</id><snippet>#file1.py
import config

config.name_dict = json.load(...)
</snippet></ROW><ROW><id>19103363</id><snippet>from config import *

name_dict = json.load(...)
</snippet></ROW><ROW><id>19103363</id><snippet>name_dict</snippet></ROW><ROW><id>19103363</id><snippet>config</snippet></ROW><ROW><id>19103363</id><snippet>global</snippet></ROW><ROW><id>19103363</id><snippet>&gt;&gt;&gt; x = 0
&gt;&gt;&gt; def function():
...     x = 1
... 
&gt;&gt;&gt; function()
&gt;&gt;&gt; x
0
&gt;&gt;&gt; def function():
...     global x
...     x = 1
... 
&gt;&gt;&gt; function()
&gt;&gt;&gt; x
1
</snippet></ROW><ROW><id>19103363</id><snippet>x</snippet></ROW><ROW><id>19103363</id><snippet>&gt;&gt;&gt; x = 0
&gt;&gt;&gt; def function():
...     return x + 1
... 
&gt;&gt;&gt; function()
1
&gt;&gt;&gt; def function():
...     global x
...     return x + 1
... 
&gt;&gt;&gt; function()
1
</snippet></ROW><ROW><id>19103363</id><snippet>x</snippet></ROW><ROW><id>19103363</id><snippet>global</snippet></ROW><ROW><id>19103363</id><snippet>x = something</snippet></ROW><ROW><id>19103456</id><snippet>return</snippet></ROW><ROW><id>19103456</id><snippet>for i in range(len(request.POST.getlist('examen'))):
    data = {
        'nombre_examen': request.POST.getlist('examen')[i],
        'credencial_miembro': request.POST['laboratorio_credencial']
    }
    print data
    medicina = examenlab_form(data)

    if medicina.is_valid():
        medicina.save()
        medicinas.append(medicina)
        messages.success(request, 'Alta Exitosa!')
    return HttpResponseRedirect('')
</snippet></ROW><ROW><id>19103456</id><snippet>return</snippet></ROW><ROW><id>19103456</id><snippet>.getlist()</snippet></ROW><ROW><id>19103456</id><snippet>for exam in request.POST.getlist('examen'):
    data = {
        'nombre_examen': exam,
        'credencial_miembro': request.POST['laboratorio_credencial']
    }
    print data
    medicina = examenlab_form(data)

    if medicina.is_valid():
        medicina.save()
        medicinas.append(medicina)
        messages.success(request, 'Alta Exitosa!')

return HttpResponseRedirect('')
</snippet></ROW><ROW><id>19103675</id><snippet>hotel.datesAndPrices</snippet></ROW><ROW><id>19103754</id><snippet>pd.read_csv</snippet></ROW><ROW><id>19103754</id><snippet>&gt;&gt;&gt; df = pd.read_csv("test_data2.csv", index_col=[0,1], skipinitialspace=True)
&gt;&gt;&gt; df
                       dep  freq   arr   code  mode
from       to                                      
RGBOXFD    RGBPADTON   127     0    27  99999     2
           RGBPADTON   127     0    33  99999     2
           RGBRDLEY    127     0  1425  99999     2
           RGBCHOLSEY  127     0    52  99999     2
           RGBMDNHEAD  127     0    91  99999     2
RGBDIDCOTP RGBPADTON   127     0    46  99999     2
           RGBPADTON   127     0     3  99999     2
           RGBCHOLSEY  127     0    61  99999     2
           RGBRDLEY    127     0  1430  99999     2
           RGBPADTON   127     0   115  99999     2
</snippet></ROW><ROW><id>19103754</id><snippet>skipinitialspace=True</snippet></ROW><ROW><id>19103878</id><snippet>.keys()</snippet></ROW><ROW><id>19103878</id><snippet>if key in data_dict:
</snippet></ROW><ROW><id>19103915</id><snippet>def regexSubFix(f,term):
    return re.sub(term + r'\s*-\s*(\(\d{5}\))\s*-\s*(\w{3}\s\d{4}\w?\s*-\s*\d{3}\s*-\s*(?:[^.\s]|\b\s\b)+)\s*-\s*([^.]+\.txt)$',
          lambda match: term+' - {0} - {1} - {2}'.format(match.group(1),
          re.sub(r'\s*-\s*', '-', match.group(2)),
          match.group(3)) ,
          f)
</snippet></ROW><ROW><id>19103915</id><snippet>if checkProper(fixed,term):
    goodFix.append(fixed)
else: stillWrong.append(fixed)
</snippet></ROW><ROW><id>19103915</id><snippet>201308 - (96381) - MAT 1033-023-I ntemediate Algebra - Escuder, Ana.txt
</snippet></ROW><ROW><id>19104044</id><snippet>['a', 'b', 'c']</snippet></ROW><ROW><id>19104044</id><snippet>multiclass.py</snippet></ROW><ROW><id>19104044</id><snippet>type_of_target</snippet></ROW><ROW><id>19104044</id><snippet>float</snippet></ROW><ROW><id>19104044</id><snippet>0.5</snippet></ROW><ROW><id>19104044</id><snippet>[0, 1.0, 2.0]</snippet></ROW><ROW><id>19104044</id><snippet>floats</snippet></ROW><ROW><id>19104044</id><snippet>continuous</snippet></ROW><ROW><id>19104044</id><snippet>multiclass</snippet></ROW><ROW><id>19104044</id><snippet>[0, 1, 2]</snippet></ROW><ROW><id>19104044</id><snippet>[0.0, 1.0. 2.0]</snippet></ROW><ROW><id>19104077</id><snippet>setattr</snippet></ROW><ROW><id>19104077</id><snippet>setattr(p.image, entry, db.Blob(image))
</snippet></ROW><ROW><id>19104084</id><snippet>numpy</snippet></ROW><ROW><id>19104084</id><snippet>DataFrames</snippet></ROW><ROW><id>19104084</id><snippet>Series</snippet></ROW><ROW><id>19104271</id><snippet>payload = {'grant_type': 'authorization_code',
    'code': code,
    'client_id': 'xxxxxxxxxxxxxxxxxxxxxxx',
    'client_secret': 'xxxxxxxxxxxxxxxxxxxxxx',
    'redirect_uri': redirect_uri}
result = urlfetch.fetch(url=API_ACCESS_TOKEN_URL, payload = payload, method=urlfetch.POST)
</snippet></ROW><ROW><id>19104449</id><snippet>convert_postcodes</snippet></ROW><ROW><id>19104449</id><snippet>for row in range(len(file)):
    for line in range(len(postcodes)):
</snippet></ROW><ROW><id>19104449</id><snippet>N</snippet></ROW><ROW><id>19104449</id><snippet>file</snippet></ROW><ROW><id>19104449</id><snippet>M</snippet></ROW><ROW><id>19104449</id><snippet>postcodes</snippet></ROW><ROW><id>19104449</id><snippet>M*N</snippet></ROW><ROW><id>19104449</id><snippet>dict</snippet></ROW><ROW><id>19104449</id><snippet>file</snippet></ROW><ROW><id>19104449</id><snippet>file</snippet></ROW><ROW><id>19104449</id><snippet>M+N</snippet></ROW><ROW><id>19104449</id><snippet>def convert_postcodes(postcode_path, file_path, output_path):
    postcodes = dict()
    with open(postcode_path, 'rb') as f:
        reader = csv.reader(f, delimiter=',')
        for row in reader:
            code = row[1]
            lng = row[2]
            lat = row[3]
            # _, code, lng, lat = row  # or use this if `row` has exactly 4 items.
            postcodes[code] = [lng, lat]
    with open(file_path, 'rb') as fin, open(output_path, 'wb') as fout:
        reader = csv.reader(fin, delimiter=',')
        writer = csv.writer(fout, delimiter=',')
        for row in reader:
            code = row[3]
            row.extend(postcodes[code])
            writer.writerow(row)
</snippet></ROW><ROW><id>19104543</id><snippet>re.match</snippet></ROW><ROW><id>19104543</id><snippet>re.search</snippet></ROW><ROW><id>19104543</id><snippet>import urllib, urllib2, sys, re
import cStringIO
import pycurl

def CaptureToken(cURL):
    buf = cStringIO.StringIO()
    c = pycurl.Curl()
    c.setopt(c.URL, cURL)
    c.setopt(c.WRITEFUNCTION, buf.write)
    c.setopt(c.CONNECTTIMEOUT, 30) 
    c.setopt(c.TIMEOUT, 30) 
    c.perform()
    html = buf.getvalue()
    buf.close()
    results = re.search(r'(type="hidden" name="([0-9a-f]{32})")', html).group(2)
    print results

CaptureToken('http://www.proregionisbono.org.pl/administrator/index.php')
</snippet></ROW><ROW><id>19104636</id><snippet>import</snippet></ROW><ROW><id>19104636</id><snippet>sys.modules</snippet></ROW><ROW><id>19104636</id><snippet>reload</snippet></ROW><ROW><id>19104636</id><snippet>sys.path</snippet></ROW><ROW><id>19104636</id><snippet>mypackage.mymodule</snippet></ROW><ROW><id>19104636</id><snippet>mymodule</snippet></ROW><ROW><id>19104636</id><snippet>sys.modules</snippet></ROW><ROW><id>19104636</id><snippet>imp</snippet></ROW><ROW><id>19104636</id><snippet>importlib</snippet></ROW><ROW><id>19104636</id><snippet>multiprocessing</snippet></ROW><ROW><id>19104636</id><snippet>concurrent.futures</snippet></ROW><ROW><id>19104636</id><snippet>multiprocessing</snippet></ROW><ROW><id>19104722</id><snippet>print stopwords.words('english')</snippet></ROW><ROW><id>19104722</id><snippet>-file</snippet></ROW><ROW><id>19104778</id><snippet>if</snippet></ROW><ROW><id>19104778</id><snippet>map</snippet></ROW><ROW><id>19104778</id><snippet>map</snippet></ROW><ROW><id>19104778</id><snippet>filter</snippet></ROW><ROW><id>19104778</id><snippet>mysum = mysum + i</snippet></ROW><ROW><id>19104778</id><snippet>for</snippet></ROW><ROW><id>19104778</id><snippet>for i in [i for i in range(2, 10) if i%2==0 or i%5==0]: mysum += i
</snippet></ROW><ROW><id>19104778</id><snippet>for</snippet></ROW><ROW><id>19104778</id><snippet>mysum</snippet></ROW><ROW><id>19104778</id><snippet>mysum = 0</snippet></ROW><ROW><id>19104778</id><snippet>for i in (i for i in range(2, 10) if i%2==0 or i%5==0): mysum += i
</snippet></ROW><ROW><id>19104778</id><snippet>for i in (i for i in range(2, 10) if i%2==0 or i%5==0):
    mysum += i
</snippet></ROW><ROW><id>19104778</id><snippet>not2or5 = (i for i in range(2, 10) if i%2==0 or i%5==0) 
for i in not2or5:
    mysum += i
</snippet></ROW><ROW><id>19104778</id><snippet>reduce</snippet></ROW><ROW><id>19104778</id><snippet>fold</snippet></ROW><ROW><id>19104778</id><snippet>reduce</snippet></ROW><ROW><id>19104778</id><snippet>for</snippet></ROW><ROW><id>19104778</id><snippet>sum</snippet></ROW><ROW><id>19104778</id><snippet>mysum += sum(i for i in range(2, 10) if i%2==0 or i%5==0)
</snippet></ROW><ROW><id>19104778</id><snippet>mysum</snippet></ROW><ROW><id>19104778</id><snippet>+=</snippet></ROW><ROW><id>19104778</id><snippet>=</snippet></ROW><ROW><id>19104778</id><snippet>for i in range(2, 10):
    if i%2==0 or i%5==0:
        mysum += i
</snippet></ROW><ROW><id>19104778</id><snippet>not2or5 = (i for i in range(2, 10) if i%2==0 or i%5==0)
mysum += sum(not2to5)
</snippet></ROW><ROW><id>19104778</id><snippet>sum</snippet></ROW><ROW><id>19104778</id><snippet>for</snippet></ROW><ROW><id>19104778</id><snippet>[sum(range(i)) for i in range(n)]</snippet></ROW><ROW><id>19104867</id><snippet>import re

city_html = """&lt;td&gt;&lt;a href="/worldclock/city.html?n=97"&gt;Harrisburg&lt;/a&gt;&lt;span id=p217s class=wds&gt; *&lt;/span&gt;&lt;/td&gt;
               &lt;td&gt;&lt;a href="/worldclock/city.html?n=3551"&gt;Gujranwala&lt;/a&gt;&lt;span id=p204s class=wds&gt;&lt;/span&gt;&lt;/td&gt;"""

cities = re.findall(r'(?:city\.html.*?&gt;)(.*?)(?:&lt;)', city_html)
# cities == ['Harrisburg', 'Gujranwala']
</snippet></ROW><ROW><id>19104867</id><snippet>city.html ... &gt;</snippet></ROW><ROW><id>19104867</id><snippet>&lt;</snippet></ROW><ROW><id>19105004</id><snippet>.pack()</snippet></ROW><ROW><id>19105004</id><snippet>ResultsBox</snippet></ROW><ROW><id>19105004</id><snippet>ResultsBox = Text(window, height = 13, width = 70)
ResultsBox.pack(side = BOTTOM)
</snippet></ROW><ROW><id>19105004</id><snippet>contents_list = ["Longest Height: ",
                 str(h1),
                 "\n",
                 ...]
contents = "".join(contents_list)
text_file.write(contents)
ResultsBox.insert(END, contents)
</snippet></ROW><ROW><id>19105021</id><snippet>file.flush()</snippet></ROW><ROW><id>19105021</id><snippet>fsync</snippet></ROW><ROW><id>19105021</id><snippet>flush</snippet></ROW><ROW><id>19105154</id><snippet>^[a-zA-Z_][a-zA-Z0-9_]*$
</snippet></ROW><ROW><id>19105154</id><snippet>^(?!\d)\w+$
</snippet></ROW><ROW><id>19105154</id><snippet>(?!…)</snippet></ROW><ROW><id>19105193</id><snippet>guessC</snippet></ROW><ROW><id>19105193</id><snippet>gu = int(raw_input())
return gu
</snippet></ROW><ROW><id>19105193</id><snippet>gue, low, high = guess(low, high)
</snippet></ROW><ROW><id>19105193</id><snippet>guessC()</snippet></ROW><ROW><id>19105193</id><snippet>int</snippet></ROW><ROW><id>19105392</id><snippet>na_csv_output['f0']</snippet></ROW><ROW><id>19105392</id><snippet>f1</snippet></ROW><ROW><id>19105392</id><snippet>f2</snippet></ROW><ROW><id>19105392</id><snippet>f</snippet></ROW><ROW><id>19105392</id><snippet>na_csv_output = np.zeros((len(ldt_timestamps)),dtype=('i4,i4,i4,a10,a10,i4'))
</snippet></ROW><ROW><id>19105392</id><snippet>np.savetxt('eventResults.csv', na_csv_output, fmt='%f, %f, %f, string= %s %s, last number = %f', delimiter=",")
</snippet></ROW><ROW><id>19105436</id><snippet>_sys_version</snippet></ROW><ROW><id>19105436</id><snippet>python_implementation</snippet></ROW><ROW><id>19105436</id><snippet>sys.version</snippet></ROW><ROW><id>19105436</id><snippet>_sys_version_parser = re.compile(
    r'([\w.+]+)\s*'
    '\(#?([^,]+),\s*([\w ]+),\s*([\w :]+)\)\s*'
    '\[([^\]]+)\]?')
</snippet></ROW><ROW><id>19105436</id><snippet>else:
    # CPython
    match = _sys_version_parser.match(sys_version)
    if match is None:
        raise ValueError(
            'failed to parse CPython sys.version: %s' %
            repr(sys_version))
    version, buildno, builddate, buildtime, compiler = \
          match.groups()
    name = 'CPython'
    builddate = builddate + ' ' + buildtime
</snippet></ROW><ROW><id>19105436</id><snippet>r'([\w.+]+)\s*'
'\(#?([^,]+),\s*([\w ]+),\s*([\w :]+)\)\s*'
'\[([^\]]+)\]?')
</snippet></ROW><ROW><id>19105436</id><snippet>([\w.+]+)\s*</snippet></ROW><ROW><id>19105436</id><snippet>[a-zA-Z0-9_.+]</snippet></ROW><ROW><id>19105436</id><snippet>buildno</snippet></ROW><ROW><id>19105436</id><snippet>(</snippet></ROW><ROW><id>19105436</id><snippet>(default, Apr 12 2012, 14:30:37)</snippet></ROW><ROW><id>19105436</id><snippet>|EPD_free 7.3-2 (32-bit)|</snippet></ROW><ROW><id>19105436</id><snippet>sys.version</snippet></ROW><ROW><id>19105436</id><snippet># This raises an exception for you:
platform.python_implementation()

# Try this:
sys.version = '2.7.3 (default, Apr 12 2012, 14:30:37) [MSC v.1500 32 bit (Intel)]'
# Hopefully, this no longer raises.
platform.python_implementation()
</snippet></ROW><ROW><id>19105442</id><snippet>which python</snippet></ROW><ROW><id>19105652</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>19105652</id><snippet>/usr/bin occurs before /usr/local/bin</snippet></ROW><ROW><id>19105652</id><snippet>$PATH</snippet></ROW><ROW><id>19105652</id><snippet>/usr/bin</snippet></ROW><ROW><id>19105652</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>19105652</id><snippet>$PATH</snippet></ROW><ROW><id>19105652</id><snippet>env</snippet></ROW><ROW><id>19105652</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>19105652</id><snippet>$ cat ~/.bash_profile
</snippet></ROW><ROW><id>19105652</id><snippet># Setting PATH for EPD_free-7.3-2
# The original version is saved in .bash_profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/Current/bin:${PATH}"
export PATH
</snippet></ROW><ROW><id>19105652</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>19105652</id><snippet>.bash_profile.pysave</snippet></ROW><ROW><id>19105652</id><snippet>$HOME</snippet></ROW><ROW><id>19105652</id><snippet>cat</snippet></ROW><ROW><id>19105652</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>19105652</id><snippet>.bash_profile.pysave</snippet></ROW><ROW><id>19105652</id><snippet>.bash_profile</snippet></ROW><ROW><id>19105652</id><snippet>.bash_profile.pysave</snippet></ROW><ROW><id>19105652</id><snippet>~/.bash_profile.</snippet></ROW><ROW><id>19105652</id><snippet>$PATH</snippet></ROW><ROW><id>19105652</id><snippet>${PATH}</snippet></ROW><ROW><id>19105652</id><snippet>${PATH}</snippet></ROW><ROW><id>19105652</id><snippet>echo $PATH</snippet></ROW><ROW><id>19105652</id><snippet>$ echo $PATH
/Library/Frameworks/Python.framework/Versions/Current/bin:/Library/Frameworks/Python.framework/Versions/Current/bin:/usr/local/bin:/usr/local/sbin:~/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/texbin
</snippet></ROW><ROW><id>19105652</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>19105652</id><snippet>/usr/bin</snippet></ROW><ROW><id>19105652</id><snippet>brew doctor</snippet></ROW><ROW><id>19105652</id><snippet>brew doctor</snippet></ROW><ROW><id>19105652</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>19105652</id><snippet>$PATH</snippet></ROW><ROW><id>19105652</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>19105652</id><snippet>/usr/local/bin/</snippet></ROW><ROW><id>19105652</id><snippet>brew doctor</snippet></ROW><ROW><id>19105652</id><snippet>$PATH</snippet></ROW><ROW><id>19105652</id><snippet>:</snippet></ROW><ROW><id>19105652</id><snippet>$PATH</snippet></ROW><ROW><id>19105652</id><snippet>$ echo 'export PATH="/usr/local/bin:/usr/local/sbin:~/bin:$PATH"' &gt;&gt; ~/.bash_profile
</snippet></ROW><ROW><id>19105652</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>19105652</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>19105652</id><snippet>cd</snippet></ROW><ROW><id>19105652</id><snippet>$HOME</snippet></ROW><ROW><id>19105652</id><snippet>.bash_profile</snippet></ROW><ROW><id>19105652</id><snippet>$ cd $HOME
</snippet></ROW><ROW><id>19105652</id><snippet>$ open -a "TextEdit" .bash_profile
</snippet></ROW><ROW><id>19105652</id><snippet>PATH="/Library/Frameworks/Python.framework/Versions/Current/bin:${PATH}"
export PATH
</snippet></ROW><ROW><id>19105652</id><snippet>#</snippet></ROW><ROW><id>19105652</id><snippet>$ vim ~/.bash_profile
</snippet></ROW><ROW><id>19105652</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>19105652</id><snippet>ESC</snippet></ROW><ROW><id>19105652</id><snippet>:q</snippet></ROW><ROW><id>19105652</id><snippet>sudo</snippet></ROW><ROW><id>19105652</id><snippet>sudo</snippet></ROW><ROW><id>19105652</id><snippet>exit</snippet></ROW><ROW><id>19105652</id><snippet>:q</snippet></ROW><ROW><id>19105652</id><snippet>:w</snippet></ROW><ROW><id>19105652</id><snippet>H</snippet></ROW><ROW><id>19105652</id><snippet>J</snippet></ROW><ROW><id>19105652</id><snippet>K</snippet></ROW><ROW><id>19105652</id><snippet>L</snippet></ROW><ROW><id>19105652</id><snippet>I</snippet></ROW><ROW><id>19105652</id><snippet>-INSERT-</snippet></ROW><ROW><id>19105652</id><snippet># Setting PATH for EPD_free-7.3-2
# The original version is saved in .bash_profile.pysave
# PATH="/Library/Frameworks/Python.framework/Versions/Current/bin:${PATH}"
# export PATH
# export PATH="/usr/local/bin:/usr/local/sbin:~/bin:$PATH"
</snippet></ROW><ROW><id>19105652</id><snippet>export PATH="/usr/local/bin:/usr/local/sbin:~/bin:$PATH"
</snippet></ROW><ROW><id>19105652</id><snippet>ESC</snippet></ROW><ROW><id>19105652</id><snippet>-INSERT-</snippet></ROW><ROW><id>19105652</id><snippet>:wq</snippet></ROW><ROW><id>19105652</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>19105652</id><snippet>$ source .bash_profile
</snippet></ROW><ROW><id>19105652</id><snippet>.bash_profile</snippet></ROW><ROW><id>19105652</id><snippet>brew doctor</snippet></ROW><ROW><id>19105652</id><snippet>echo $PATH</snippet></ROW><ROW><id>19105652</id><snippet>/usr/local/bin:/usr/local/sbin:~/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/texbin
</snippet></ROW><ROW><id>19105672</id><snippet>urllib3</snippet></ROW><ROW><id>19105672</id><snippet>request</snippet></ROW><ROW><id>19105672</id><snippet>urllib3</snippet></ROW><ROW><id>19105672</id><snippet>requests</snippet></ROW><ROW><id>19105672</id><snippet>requests</snippet></ROW><ROW><id>19105672</id><snippet>requests.PreparedRequest.prepare_body</snippet></ROW><ROW><id>19105672</id><snippet>files</snippet></ROW><ROW><id>19105672</id><snippet>urllib3.filepost.encode_multipart_formdata</snippet></ROW><ROW><id>19105672</id><snippet>(filename, contents, (content_type, headers_dict))</snippet></ROW><ROW><id>19105672</id><snippet>requests</snippet></ROW><ROW><id>19105672</id><snippet>urllib3.filepost.encode_multipart_formdata</snippet></ROW><ROW><id>19105672</id><snippet>iter_field_objects</snippet></ROW><ROW><id>19105672</id><snippet>urllib3.fields.RequestField.from_tuples</snippet></ROW><ROW><id>19105672</id><snippet>from_tuples</snippet></ROW><ROW><id>19105672</id><snippet>iter_field_objects</snippet></ROW><ROW><id>19105672</id><snippet>import requests
import requests.packages.urllib3
from requests.packages.urllib3.fields import RequestField, guess_content_type
import six

old_iter_field_objects = requests.packages.urllib3.filepost.iter_field_objects
def iter_field_objects(fields):
    if isinstance(fields, dict):
        i = six.iteritems(fields)
    else:
        i = iter(fields)

    for field in i:
      if isinstance(field, RequestField):
        yield field
      else:
        name, value = field
        filename = value[0]
        data = value[1]
        content_type = value[2] if len(value)&gt;2 else guess_content_type(filename)
        headers = None
        if isinstance(content_type, (tuple, list)):
            content_type, headers = content_type
        rf = RequestField(name, data, filename, headers)
        rf.make_multipart(content_type=content_type)
        yield rf
requests.packages.urllib3.filepost.iter_field_objects = iter_field_objects
</snippet></ROW><ROW><id>19105672</id><snippet>&gt;&gt;&gt; files = {'file': ('foo.txt', 'foo\ncontents\n'), 
...          'file2': ('bar.txt', 'bar contents', 'text/plain'),
...          'file3': ('baz.txt', 'baz contents', ('text/plain', {'header': 'value'}))}
&gt;&gt;. r = request.Request('POST', 'http://example.com', files=files)
&gt;&gt;&gt; print r.prepare().body
--1ee28922d26146e7a2ee201e5bf22c44
Content-Disposition: form-data; name="file3"; filename="baz.txt"
Content-Type: text/plain
header: value

baz contents
--1ee28922d26146e7a2ee201e5bf22c44
Content-Disposition: form-data; name="file2"; filename="bar.txt"
Content-Type: text/plain

bar contents
--1ee28922d26146e7a2ee201e5bf22c44
Content-Disposition: form-data; name="file"; filename="foo.txt"
Content-Type: text/plain

foo
</snippet></ROW><ROW><id>19105672</id><snippet>requests</snippet></ROW><ROW><id>19105672</id><snippet>urllib3</snippet></ROW><ROW><id>19105672</id><snippet>requests</snippet></ROW><ROW><id>19105883</id><snippet>child.text = row[0]
</snippet></ROW><ROW><id>19105889</id><snippet>tokens = ["Sentence 1.","And Sentence 2.","Or Sentence 3.",
          "New Sentence 4.","New Sentence 5.","And Sentence 6."]
result = list()
for token in tokens:
        if not token.startswith("And ") and not token.startswith("Or "): #trailing whitespace because of the cases like "Andy ..." and "Orwell ..."
            result.append([token])
        else:
            result[-1].append(token)
</snippet></ROW><ROW><id>19105889</id><snippet>[['Sentence 1.', 'And Sentence 2.', 'Or Sentence 3.'],
 ['New Sentence 4.'],
 ['New Sentence 5.', 'And Sentence 6.']]
</snippet></ROW><ROW><id>19105973</id><snippet>memory_profiler</snippet></ROW><ROW><id>19105973</id><snippet>In [2]: %memit np.zeros(1e7)
maximum of 3: 76.402344 MB per loop
</snippet></ROW><ROW><id>19105973</id><snippet>%load_ext memory_profiler
</snippet></ROW><ROW><id>19105986</id><snippet>a = int(a)
</snippet></ROW><ROW><id>19105986</id><snippet>&gt;&gt;&gt; a = "3"
&gt;&gt;&gt; type(a)
&lt;class 'str'&gt;
&gt;&gt;&gt; a = int(a)
&gt;&gt;&gt; a
3
&gt;&gt;&gt; type(a)
&lt;class 'int'&gt;
</snippet></ROW><ROW><id>19106010</id><snippet>c.lower</snippet></ROW><ROW><id>19106010</id><snippet>def scrambler(string):
    sen = ''
    for c in string:
        if c.lower() == 'k':
            sen += 'm'
        elif c.lower() == 'o':
            sen += 'q'
        elif c.lower() == 'e':
            sen += 'g'
        else:
            sen += c
    return sen

print scrambler('koe')
</snippet></ROW><ROW><id>19106012</id><snippet>map</snippet></ROW><ROW><id>19106012</id><snippet>In [239]: from operator import methodcaller

In [240]: s = Series(date_range(Timestamp('now'), periods=2))

In [241]: s
Out[241]:
0   2013-10-01 00:24:16
1   2013-10-02 00:24:16
dtype: datetime64[ns]

In [238]: s.map(lambda x: x.strftime('%d-%m-%Y'))
Out[238]:
0    01-10-2013
1    02-10-2013
dtype: object

In [242]: s.map(methodcaller('strftime', '%d-%m-%Y'))
Out[242]:
0    01-10-2013
1    02-10-2013
dtype: object
</snippet></ROW><ROW><id>19106012</id><snippet>datetime.date</snippet></ROW><ROW><id>19106012</id><snippet>date()</snippet></ROW><ROW><id>19106012</id><snippet>Timestamp</snippet></ROW><ROW><id>19106012</id><snippet>Series</snippet></ROW><ROW><id>19106012</id><snippet>In [249]: s.map(methodcaller('date'))

Out[249]:
0    2013-10-01
1    2013-10-02
dtype: object

In [250]: s.map(methodcaller('date')).values

Out[250]:
array([datetime.date(2013, 10, 1), datetime.date(2013, 10, 2)], dtype=object)
</snippet></ROW><ROW><id>19106012</id><snippet>Timestamp.date</snippet></ROW><ROW><id>19106012</id><snippet>In [273]: s.map(Timestamp.date)
Out[273]:
0    2013-10-01
1    2013-10-02
dtype: object
</snippet></ROW><ROW><id>19106012</id><snippet>Timestamp</snippet></ROW><ROW><id>19106012</id><snippet>pandas</snippet></ROW><ROW><id>19106012</id><snippet>pandas.Timestamp</snippet></ROW><ROW><id>19106012</id><snippet>date</snippet></ROW><ROW><id>19106012</id><snippet>DatetimeIndex</snippet></ROW><ROW><id>19106012</id><snippet>numpy</snippet></ROW><ROW><id>19106012</id><snippet>In [243]: index = DatetimeIndex(s)

In [244]: index
Out[244]:
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-10-01 00:24:16, 2013-10-02 00:24:16]
Length: 2, Freq: None, Timezone: None

In [246]: index.date
Out[246]:
array([datetime.date(2013, 10, 1), datetime.date(2013, 10, 2)], dtype=object)
</snippet></ROW><ROW><id>19106012</id><snippet>datetime64[ns]</snippet></ROW><ROW><id>19106012</id><snippet>Series</snippet></ROW><ROW><id>19106012</id><snippet>Timestamp.date</snippet></ROW><ROW><id>19106012</id><snippet>operator.methodcaller</snippet></ROW><ROW><id>19106012</id><snippet>lambda</snippet></ROW><ROW><id>19106012</id><snippet>In [263]: f = methodcaller('date')

In [264]: flam = lambda x: x.date()

In [265]: fmeth = Timestamp.date

In [266]: s2 = Series(date_range('20010101', periods=1000000, freq='T'))

In [267]: s2
Out[267]:
0    2001-01-01 00:00:00
1    2001-01-01 00:01:00
2    2001-01-01 00:02:00
3    2001-01-01 00:03:00
4    2001-01-01 00:04:00
5    2001-01-01 00:05:00
6    2001-01-01 00:06:00
7    2001-01-01 00:07:00
8    2001-01-01 00:08:00
9    2001-01-01 00:09:00
10   2001-01-01 00:10:00
11   2001-01-01 00:11:00
12   2001-01-01 00:12:00
13   2001-01-01 00:13:00
14   2001-01-01 00:14:00
...
999985   2002-11-26 10:25:00
999986   2002-11-26 10:26:00
999987   2002-11-26 10:27:00
999988   2002-11-26 10:28:00
999989   2002-11-26 10:29:00
999990   2002-11-26 10:30:00
999991   2002-11-26 10:31:00
999992   2002-11-26 10:32:00
999993   2002-11-26 10:33:00
999994   2002-11-26 10:34:00
999995   2002-11-26 10:35:00
999996   2002-11-26 10:36:00
999997   2002-11-26 10:37:00
999998   2002-11-26 10:38:00
999999   2002-11-26 10:39:00
Length: 1000000, dtype: datetime64[ns]

In [269]: timeit s2.map(f)
1 loops, best of 3: 1.04 s per loop

In [270]: timeit s2.map(flam)
1 loops, best of 3: 1.1 s per loop

In [271]: timeit s2.map(fmeth)
1 loops, best of 3: 968 ms per loop
</snippet></ROW><ROW><id>19106012</id><snippet>pandas</snippet></ROW><ROW><id>19106012</id><snippet>numpy</snippet></ROW><ROW><id>19106012</id><snippet>ndarray</snippet></ROW><ROW><id>19106012</id><snippet>datetime.date</snippet></ROW><ROW><id>19106012</id><snippet>numpy.dtype</snippet></ROW><ROW><id>19106012</id><snippet>pandas</snippet></ROW><ROW><id>19106012</id><snippet>pandas</snippet></ROW><ROW><id>19106012</id><snippet>datetime64[ns]</snippet></ROW><ROW><id>19106102</id><snippet>7 == 7 # true!
</snippet></ROW><ROW><id>19106102</id><snippet>"Hello world".equals("Hello world") // Java...

"Hello world" == "Hello world" # Python!
</snippet></ROW><ROW><id>19106102</id><snippet>"ABC" &gt; "BAC" # false, because the character B is greater than A
"AAAB" &lt; "AAAC" # true, because the character B is less than C
</snippet></ROW><ROW><id>19106102</id><snippet>mylist</snippet></ROW><ROW><id>19106304</id><snippet>7/3</snippet></ROW><ROW><id>19106304</id><snippet>2</snippet></ROW><ROW><id>19106304</id><snippet>int</snippet></ROW><ROW><id>19106304</id><snippet>float</snippet></ROW><ROW><id>19106304</id><snippet>2.0</snippet></ROW><ROW><id>19106304</id><snippet>float(7)/3</snippet></ROW><ROW><id>19106304</id><snippet>7/float(3)</snippet></ROW><ROW><id>19106304</id><snippet>7.0/3</snippet></ROW><ROW><id>19106304</id><snippet>7/3.0</snippet></ROW><ROW><id>19106304</id><snippet>from __future__ import division</snippet></ROW><ROW><id>19106304</id><snippet>//</snippet></ROW><ROW><id>19106447</id><snippet>add(**params)
        Add a document.  Pass in all document fields as
        keyword parameters:
            add(id='foo', notes='bar')
        You must "commit" for the addition to be saved.
</snippet></ROW><ROW><id>19106447</id><snippet>s.add(commit=True, **doc)     
</snippet></ROW><ROW><id>19106459</id><snippet>MATCH path=root-***put your partial pattern here***-&gt;[:`1`|`0`*]-&gt;leaf
WHERE NOT (leaf)-[:`0`|`1`]-&gt;()
RETURN path
ORDER BY length(path) DESC
LIMIT 1
</snippet></ROW><ROW><id>19106485</id><snippet>__import__</snippet></ROW><ROW><id>19106485</id><snippet>package.module</snippet></ROW><ROW><id>19106485</id><snippet>current_module = __import__(__name__)
print current_module
</snippet></ROW><ROW><id>19106485</id><snippet>&lt;module 'MyModule' from '/Users/abarnert/src/test/pkgtest3/MyModule/__init__.pyc'&gt;
</snippet></ROW><ROW><id>19106485</id><snippet>importlib.import_module()</snippet></ROW><ROW><id>19106485</id><snippet>import importlib
current_module = importlib.import_module(__name__)
setattr(current_module, 'VarA', 5)
</snippet></ROW><ROW><id>19106485</id><snippet>import sys
current_package = importlib.import_module(__name__)
current_module = sys.modules[__name__]
setattr(current_module, 'VarA', 5)
</snippet></ROW><ROW><id>19106485</id><snippet>execfile</snippet></ROW><ROW><id>19106485</id><snippet>import</snippet></ROW><ROW><id>19106485</id><snippet>import sys
current_module = sys.modules[__name__]
setattr(current_module, 'VarA', 5)
</snippet></ROW><ROW><id>19106533</id><snippet>&gt;&gt;&gt; data = [[4,5],[3,7]]
&gt;&gt;&gt; data.append([5,6])
&gt;&gt;&gt; data
[[4, 5], [3, 7], [5, 6]]
</snippet></ROW><ROW><id>19106973</id><snippet>def message_to_bits(message):
  return "".join("".join(str(bits.char_to_bits(char))) for char in message)
</snippet></ROW><ROW><id>19107202</id><snippet>10</snippet></ROW><ROW><id>19107202</id><snippet>10</snippet></ROW><ROW><id>19107202</id><snippet>target = guess = 10
</snippet></ROW><ROW><id>19107202</id><snippet># Set target equal to 10
target = 10
# Make guess equal None, since there are no guesses yet
guess = None

# Loop until guess equals target
while target != guess:
    # Get new guess
    guess = int(input('Enter a number other than 10: '))

# Print message
print('Hey, you werent supposed to enter 10!')
</snippet></ROW><ROW><id>19107298</id><snippet>{{for product in products:}}
  {{=XML(response.render('template.html', product.as_dict()))}}
{{pass}}
</snippet></ROW><ROW><id>19107298</id><snippet>&lt;div id=...&gt; &lt;h1&gt; {{=price}} &lt;/h1&gt;...
</snippet></ROW><ROW><id>19107298</id><snippet>response.render()</snippet></ROW><ROW><id>19107298</id><snippet>XML()</snippet></ROW><ROW><id>19107298</id><snippet>for</snippet></ROW><ROW><id>19107298</id><snippet>products</snippet></ROW><ROW><id>19107298</id><snippet>price</snippet></ROW><ROW><id>19107298</id><snippet>product.price</snippet></ROW><ROW><id>19107298</id><snippet>for</snippet></ROW><ROW><id>19107405</id><snippet>flips_left</snippet></ROW><ROW><id>19107405</id><snippet>if flip_choice in flips_left:
    print flip_lines[flip_choice]
    flips_left.remove(flip_choice)
else:
    print "Some error"
</snippet></ROW><ROW><id>19107405</id><snippet>flips_left = {'side flip':True, 'front flip':True, 'back flip':True}

...

if flip_choice in flips_left:
    if flips_left[flip_choice]:
        print flip_lines[flip_choice]
        flips_left[flip_choice] = False
    else:
        print "You have already done %s!" % flip_choice
else:
    print "That is not a valid flip"
</snippet></ROW><ROW><id>19107415</id><snippet>@inline_requests
def parse_course(self, response):

    # ...

    for link in grade_links:
        try:
            response = yield Request(link)
        except Exception as e:
            # handle the exception here
            pass
        else:
            # extract the data here
            pass

     # at the end yield the item
</snippet></ROW><ROW><id>19107511</id><snippet>patch.object</snippet></ROW><ROW><id>19107511</id><snippet>&gt;&gt;&gt; class EmailChecker():
...     def is_email_correct(self, email):
...         pass
... 
&gt;&gt;&gt; def my_side_effect(*args):
...     if args[0] == '1':
...         return True
...     else:
...         return False
... 
&gt;&gt;&gt; with mock.patch.object(EmailChecker, 'is_email_correct', side_effect=my_side_effect):
...     checker = EmailChecker()
...     print(checker.is_email_correct('1'))
...     print(checker.is_email_correct('2'))
... 
True
False
</snippet></ROW><ROW><id>19107511</id><snippet>**args</snippet></ROW><ROW><id>19107511</id><snippet>*args</snippet></ROW><ROW><id>19107511</id><snippet>self</snippet></ROW><ROW><id>19107511</id><snippet>is_email_correct</snippet></ROW><ROW><id>19107511</id><snippet>my_side_effect</snippet></ROW><ROW><id>19107511</id><snippet>def my_side_effect(email): 
    return email == '1'
</snippet></ROW><ROW><id>19107520</id><snippet>giveAllowance</snippet></ROW><ROW><id>19107520</id><snippet>giveAllowance(10, jane)</snippet></ROW><ROW><id>19107520</id><snippet>jane</snippet></ROW><ROW><id>19107520</id><snippet>giveAllowance</snippet></ROW><ROW><id>19107520</id><snippet>if person in familyDict</snippet></ROW><ROW><id>19107520</id><snippet>Family</snippet></ROW><ROW><id>19107709</id><snippet>print( double(inc)(0) )
</snippet></ROW><ROW><id>19107709</id><snippet>double</snippet></ROW><ROW><id>19107709</id><snippet>inc</snippet></ROW><ROW><id>19107709</id><snippet>inc</snippet></ROW><ROW><id>19107709</id><snippet>print( (double(double))(inc)(0) )
</snippet></ROW><ROW><id>19107709</id><snippet>double</snippet></ROW><ROW><id>19107709</id><snippet>double</snippet></ROW><ROW><id>19107709</id><snippet>inc</snippet></ROW><ROW><id>19107709</id><snippet>double(double)</snippet></ROW><ROW><id>19107709</id><snippet>double</snippet></ROW><ROW><id>19107709</id><snippet>double</snippet></ROW><ROW><id>19107709</id><snippet>double</snippet></ROW><ROW><id>19107709</id><snippet>double</snippet></ROW><ROW><id>19107709</id><snippet>inc</snippet></ROW><ROW><id>19107709</id><snippet>double</snippet></ROW><ROW><id>19107709</id><snippet>inc</snippet></ROW><ROW><id>19107709</id><snippet>double</snippet></ROW><ROW><id>19107709</id><snippet>print((double(double(double)))(inc)(0)
</snippet></ROW><ROW><id>19107709</id><snippet>double</snippet></ROW><ROW><id>19107709</id><snippet>double(double)</snippet></ROW><ROW><id>19107709</id><snippet>double(double)</snippet></ROW><ROW><id>19107709</id><snippet>double(double)(double(double(inc)))</snippet></ROW><ROW><id>19107709</id><snippet>inc</snippet></ROW><ROW><id>19107709</id><snippet>print( double(double(double(inc)))(0) )
</snippet></ROW><ROW><id>19107819</id><snippet>raise</snippet></ROW><ROW><id>19107819</id><snippet>try:
    assert( False )
# Right here
except Exception as e:
    print "some debugging information"
    try:
        another_function()
    except:
        print "that didn't work either"
    else:
        print "ooh, that worked!"
    raise e
</snippet></ROW><ROW><id>19107819</id><snippet>Exception</snippet></ROW><ROW><id>19108167</id><snippet>django-admin.py startproject &lt;projectname&gt;</snippet></ROW><ROW><id>19108167</id><snippet>&lt;projectname&gt;</snippet></ROW><ROW><id>19108167</id><snippet>--projectname
  --settings.py
  --urls.py
  --wsgi.py

--manage.py
</snippet></ROW><ROW><id>19108167</id><snippet>blog</snippet></ROW><ROW><id>19108167</id><snippet>&lt;projectname&gt;</snippet></ROW><ROW><id>19108167</id><snippet>import os
path=os.path.dirname(__file__)
............... other settings.py variables

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': path+'/tt.db',                      # Or path to database file if using sqlite3.
        'USER': '',                      # Not used with sqlite3.
        'PASSWORD': '',                  # Not used with sqlite3.
        'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '',                      # Set to empty string for default. Not used with sqlite3.
    }
}
</snippet></ROW><ROW><id>19108167</id><snippet>blog</snippet></ROW><ROW><id>19108167</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>19108167</id><snippet>INSTALLED_APPS = (
    ....other apps
    'blog',
)
</snippet></ROW><ROW><id>19108167</id><snippet>STATICFILES_DIRS</snippet></ROW><ROW><id>19108167</id><snippet>STATICFILES_DIRS = (
    os.path.join(path, '..','blog','static') 
)
</snippet></ROW><ROW><id>19108167</id><snippet>urls.py</snippet></ROW><ROW><id>19108167</id><snippet>urlpatterns = patterns('',
    ...other urlpatterns
    url(r'^blog/', include('blog.urls')),
)
</snippet></ROW><ROW><id>19108167</id><snippet>python manage.py collectstatic
python manage.py syncdb
python manage.py runserver
</snippet></ROW><ROW><id>19108277</id><snippet>replace</snippet></ROW><ROW><id>19108277</id><snippet>start_time = start_time.replace(minute=ceil_to, second=0, microsecond=0)
</snippet></ROW><ROW><id>19108798</id><snippet>myQuery.filter().extra(
    select={'myinteger': 'CAST(mycharfield AS UNSIGNED)'}
).order_by('myinteger')
</snippet></ROW><ROW><id>19108889</id><snippet>dictionary[key]</snippet></ROW><ROW><id>19108889</id><snippet>newDict = {'SrchResults':['one', 'two', 'three']}
</snippet></ROW><ROW><id>19108889</id><snippet>newDict['SrchResults']</snippet></ROW><ROW><id>19108889</id><snippet>['one', 'two', 'three']</snippet></ROW><ROW><id>19108889</id><snippet>len()</snippet></ROW><ROW><id>19108889</id><snippet>'SrchResults'</snippet></ROW><ROW><id>19109290</id><snippet>def f(x, y):
    retval1 = x + y
    retval2 = x * y
    return retval1, retval2
</snippet></ROW><ROW><id>19109290</id><snippet>sumval, prodval = f(5,7)
</snippet></ROW><ROW><id>19109313</id><snippet>groupby</snippet></ROW><ROW><id>19109313</id><snippet>group_by_yrs_list = {year:list(grp) for year, grp in groupby(years_list, key=lambda year_month: year_month[:-2])}
for k, v in group_by_yrs_list.items():
    print k, v
</snippet></ROW><ROW><id>19109968</id><snippet>CrawlSpider</snippet></ROW><ROW><id>19109968</id><snippet>process_links()</snippet></ROW><ROW><id>19109968</id><snippet>process_requests()</snippet></ROW><ROW><id>19110007</id><snippet>/</snippet></ROW><ROW><id>19110007</id><snippet>float</snippet></ROW><ROW><id>19110007</id><snippet>&gt;&gt;&gt; 2/2
1.0
&gt;&gt;&gt; 3/2
1.5
</snippet></ROW><ROW><id>19110007</id><snippet>//</snippet></ROW><ROW><id>19110007</id><snippet>k = n // 2
</snippet></ROW><ROW><id>19110007</id><snippet>//</snippet></ROW><ROW><id>19110007</id><snippet>&gt;&gt;&gt; 2//2
1
&gt;&gt;&gt; 3//2
1
</snippet></ROW><ROW><id>19110007</id><snippet>/</snippet></ROW><ROW><id>19110007</id><snippet>downheap()</snippet></ROW><ROW><id>19110007</id><snippet>return downheap(lista, n, 1)</snippet></ROW><ROW><id>19110007</id><snippet>heapsort()</snippet></ROW><ROW><id>19110007</id><snippet>None</snippet></ROW><ROW><id>19110007</id><snippet>return</snippet></ROW><ROW><id>19110240</id><snippet>/etc/asound.conf</snippet></ROW><ROW><id>19110240</id><snippet>~/.asoundrc</snippet></ROW><ROW><id>19110240</id><snippet>pcm.mydevice {
    type plug
    slave.pcm {
        type file
        slave.pcm "hw:0,0"   # or whatever your actual output device is
        file "|/some/where/myapplication"
    }
}
</snippet></ROW><ROW><id>19110240</id><snippet>mydevice</snippet></ROW><ROW><id>19110714</id><snippet>multiprocessing.Lock</snippet></ROW><ROW><id>19110714</id><snippet>#!python3
from multiprocessing import Process,Lock
import time
import sys

def test(n,lock):
    with lock:
        for i in range(20):
            print(n,end='')
            sys.stdout.flush()
            time.sleep(.01)  # needed some delay or ran too fast and didn't mix output.
        print()

if __name__ == '__main__':
    lock = Lock()
    jobs = [Process(target=test,args=(n,lock)) for n in range(5)]
    for job in jobs:
        job.start()
    for job in jobs:
        job.join()
</snippet></ROW><ROW><id>19110714</id><snippet>with lock:</snippet></ROW><ROW><id>19110714</id><snippet>003023120134201342013420314203140231402134203140231420134021342031402134201342013420314203142
1342
14

4
</snippet></ROW><ROW><id>19110714</id><snippet>00000000000000000000
11111111111111111111
44444444444444444444
22222222222222222222
33333333333333333333
</snippet></ROW><ROW><id>19111041</id><snippet>^(?P&lt;categories&gt;(?:[\w]+\/?)+)$</snippet></ROW><ROW><id>19111041</id><snippet>categories = filter(bool, categories.split('/'))
</snippet></ROW><ROW><id>19111210</id><snippet>pyplot</snippet></ROW><ROW><id>19111210</id><snippet>import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
from numpy import arange, sin, pi
import threading

class Dummy():

    def plotme(self, iteration = 1):

        print "%ix plotting... " % iteration,
        t = arange(0.0, 2.0, 0.01)
        s = sin(2*pi*t)
        plt.plot(t, s)
        plt.xlabel('time (s)')
        plt.ylabel('voltage (mV)')
        plt.title('About as simple as it gets, folks')
        plt.savefig("19110942_%i_test.png" % iteration) # irrelevant here
        plt.clf()

    def threadme(self, iteration = 1):

        thread_plot = threading.Thread(target=self.plotme,
                                      args=(iteration,))
        thread_plot.start()
        thread_plot.join()

dummy = Dummy()
dummy.threadme(1)
dummy.threadme(2)
</snippet></ROW><ROW><id>19111210</id><snippet>import matplotlib
matplotlib.use("Agg")
import matplotlib.pyplot as plt
from numpy import arange, sin, pi
import threading

class Dummy():

    def plotme(self, iteration = 1):

        print "%ix plotting... " % iteration,
        t = arange(0.0, 2.0, 0.01)
        s = sin(2*pi*t)

        fig, ax = plt.subplots()
        ax.plot(t, s)
        ax.set_xlabel('time (s)')
        ax.set_ylabel('voltage (mV)')
        ax.set_title('About as simple as it gets, folks (%i)' % iteration)
        fig.savefig("19110942_%i_test.png" % iteration)

    def threadme(self, iteration = 1):

        thread_plot = threading.Thread(target=self.plotme,
                                      args=(iteration,))
        thread_plot.start()
        thread_plot.join()

dummy = Dummy()
dummy.threadme(1)
dummy.threadme(2)
</snippet></ROW><ROW><id>19111409</id><snippet>RotatingFileHandler</snippet></ROW><ROW><id>19111409</id><snippet>maxBytes</snippet></ROW><ROW><id>19111409</id><snippet>backupCount</snippet></ROW><ROW><id>19111409</id><snippet>maxBytes</snippet></ROW><ROW><id>19111409</id><snippet>backupCount</snippet></ROW><ROW><id>19111409</id><snippet>maxBytes</snippet></ROW><ROW><id>19111409</id><snippet>maxBytes</snippet></ROW><ROW><id>19111409</id><snippet>backupCount</snippet></ROW><ROW><id>19111409</id><snippet>backupCount</snippet></ROW><ROW><id>19111468</id><snippet>class foo:
</snippet></ROW><ROW><id>19111468</id><snippet>class foo:
    pass
</snippet></ROW><ROW><id>19111468</id><snippet>parent = Tkinter.Tk()
</snippet></ROW><ROW><id>19111559</id><snippet>itertools.ifilter</snippet></ROW><ROW><id>19111559</id><snippet>from itertools import ifilter
c = np.array([ e for e in ifilter(lambda x: x[1] in b, a) ])
&gt;&gt; array([[3,4],
          [5,6],
          [7,4]])
</snippet></ROW><ROW><id>19111617</id><snippet>django.contrib.admin.util.prepare_lookup_value</snippet></ROW><ROW><id>19111617</id><snippet>prepare_lookup_value</snippet></ROW><ROW><id>19111617</id><snippet>git blame</snippet></ROW><ROW><id>19111617</id><snippet>django.contrib.{util to utils}</snippet></ROW><ROW><id>19111617</id><snippet>django.contrib.admin.util.prepare_lookup_value</snippet></ROW><ROW><id>19111735</id><snippet>self</snippet></ROW><ROW><id>19111735</id><snippet>instance = printclass()
instance.dotheprint()
</snippet></ROW><ROW><id>19111735</id><snippet>dotheprint()</snippet></ROW><ROW><id>19111735</id><snippet>self</snippet></ROW><ROW><id>19111735</id><snippet>dotheprint()</snippet></ROW><ROW><id>19111735</id><snippet>__init__</snippet></ROW><ROW><id>19111735</id><snippet>class printclass():
    string="yes"

    def __init__(self):
        self.dotheprint()

    def dotheprint(self):
        print self.string

printclass()
</snippet></ROW><ROW><id>19111817</id><snippet>def run(func):
    for line in sys.stdin:
        print func(line)
</snippet></ROW><ROW><id>19111876</id><snippet>heapq</snippet></ROW><ROW><id>19111876</id><snippet>from heapq import nlargest
from operator import itemgetter

largest_15 = nlargest(15, (line.split()[:2] for line in f), itemgetter(1))
</snippet></ROW><ROW><id>19111876</id><snippet>heappushpop()</snippet></ROW><ROW><id>19112237</id><snippet>@link</snippet></ROW><ROW><id>19112237</id><snippet>@action</snippet></ROW><ROW><id>19112237</id><snippet>/someclass/&lt;pk&gt;/&lt;methodname&gt;/</snippet></ROW><ROW><id>19112237</id><snippet>/someclass/info</snippet></ROW><ROW><id>19112237</id><snippet>class MyRouter(DefaultRouter):
    routes = [
        Route(
            url=r'^{prefix}/((?P&lt;pk&gt;\d+)/)?info$',
            mapping={'get': 'info'},
            name='{basename}-info',
            initkwargs={}
        )
    ] + DefaultRouter.routes
</snippet></ROW><ROW><id>19112237</id><snippet>info</snippet></ROW><ROW><id>19112237</id><snippet>def info(self, request, pk=None):
    if pk:
        obj = SomeClass.objects.get(pk=pk)
        return Response({'info': obj.info()})
    else:
        objs = SomeClass.objects.filter(pk__in=request.GET.getlist('pk'))
        return Response({'infos': [obj.info() for obj in objs]})
</snippet></ROW><ROW><id>19112237</id><snippet>@link</snippet></ROW><ROW><id>19112379</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>19112379</id><snippet>os.path.join</snippet></ROW><ROW><id>19112379</id><snippet>os.path.split</snippet></ROW><ROW><id>19112379</id><snippet>os.path.sep</snippet></ROW><ROW><id>19112379</id><snippet>with open(...) as f:
    return json.load(f)  # also not that there is no nead to f.read()+json.loads()
                         # if you can just json.load() on the file handle
</snippet></ROW><ROW><id>19112379</id><snippet>_command = "{} &amp;&amp; cd {} &amp;&amp; {} &amp;&amp; {}".format(_driver, _path, _settings["compile"], _settings["exec"])
</snippet></ROW><ROW><id>19112379</id><snippet>_</snippet></ROW><ROW><id>19112382</id><snippet>_form.py</snippet></ROW><ROW><id>19112382</id><snippet>if (self.enctype != "application/x-www-form-urlencoded") and (self.enctype != "utf-8"):
</snippet></ROW><ROW><id>19112784</id><snippet>mytuple</snippet></ROW><ROW><id>19112784</id><snippet>list()</snippet></ROW><ROW><id>19112784</id><snippet>(1.0,)</snippet></ROW><ROW><id>19112784</id><snippet>for item in mytuple:
    print str(item[0]) + ','
</snippet></ROW><ROW><id>19112784</id><snippet>print ', ,'.join([str(i[0]) for i in mytuple])
# 1.0, ,25.34, ,2.4, ,7.4
</snippet></ROW><ROW><id>19112890</id><snippet>df = DataFrame(table, columns=headers)
df
</snippet></ROW><ROW><id>19112890</id><snippet>Out[7]:
   Heading1  Heading2
0         1         2
1         3         4
</snippet></ROW><ROW><id>19112952</id><snippet>win32com</snippet></ROW><ROW><id>19113226</id><snippet>class TalkAdmin(admin.ModelAdmin):

    list_display = ['title', 'get_speakers', 'date']

    def get_speakers(self, obj):
        speakers = obj.speakers.all().order_by('name').values_list('name', flat=True)
        return ', '.join(speakers)
</snippet></ROW><ROW><id>19113927</id><snippet>a = [
['first_name', 'last_name', 'email'],
['Danny', 'Lastnme', 'name@email.com'],
['Sally', 'Surname', 'name@email.com'],
['Sally', 'Surname', 'name@email.com'],  
['Sally', 'Surname', 'name@email.com'], 
['Chris', 'Lastnam', 'name@email.com'],
['Larry', 'Seconds', 'name@email.com'],
['Barry', 'Barrins', 'name@email.com'],
['Glenn', 'Melting', 'name@email.com'],
['Glenn', 'Melting', 'name@email.com'],
]

result = {}

b = [tuple(x) for x in a[1:]]
all_uniques = set(b)
result['unique'] = [list(x) for x in list(all_uniques)]

# To show which ones have duplicates use Mr Es solution:

from collections import Counter

t = Counter(b)
dupes = []

for k, v in t.iteritems():
    if v &gt; 1:
        dupes.append(list(k)*(v-1))

result['dupes'] = dupes

print(result)
</snippet></ROW><ROW><id>19114084</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; "".join("%.2d" % i for i in a)
'010203'
&gt;&gt;&gt; a = [10, 11, 12, 13]
&gt;&gt;&gt; "".join("%.2d" % i for i in a)
'10111213'
</snippet></ROW><ROW><id>19114092</id><snippet>pip install kivy</snippet></ROW><ROW><id>19114092</id><snippet>sudo pip install kivy</snippet></ROW><ROW><id>19114092</id><snippet>sudo</snippet></ROW><ROW><id>19114092</id><snippet>$ python main.py
[INFO   ] Kivy v1.7.2
...
[CRITICAL] [Window      ] Unable to find any valuable Window provider at all!
[CRITICAL] [App         ] Unable to get a Window, abort.
</snippet></ROW><ROW><id>19114092</id><snippet>$ pip install hg+http://bitbucket.org/pygame/pygame
</snippet></ROW><ROW><id>19114092</id><snippet>$ python yourcode.py
[INFO   ] Kivy v1.7.2
Purge log fired. Analysing...
Purge finished !
[INFO   ] [Logger      ] Record log in /Users/erik.allik/.kivy/logs/kivy_13-10-01_2.txt
[INFO   ] [Factory     ] 144 symbols loaded
[DEBUG  ] [Cache       ] register &lt;kv.lang&gt; with limit=None, timeout=Nones
[DEBUG  ] [Cache       ] register &lt;kv.image&gt; with limit=None, timeout=60s
...
[INFO   ] [OSC         ] using &lt;multiprocessing&gt; for socket
[DEBUG  ] [Base        ] Create provider from mouse
[INFO   ] [Base        ] Start application main loop
</snippet></ROW><ROW><id>19114284</id><snippet>subprocess.call()</snippet></ROW><ROW><id>19114284</id><snippet>c|wscript.exe</snippet></ROW><ROW><id>19114284</id><snippet>import subprocess

#subprocess.call("notepad") # works

#subprocess.call("dir") # [Error 2] The system cannot find the file specified
                        # no shell, no intrinsics

#subprocess.call("19112944.vbs") # [Error 193] %1 is not a valid Win32 application
                                 # no shell, can't associate .vbs with c|wscript.exe

subprocess.call("cscript 19112944.vbs") # works

subprocess.call("cmd /c 19112944.vbs") # works
                                       # have shell, can associate .vbs with c|wscript.exe
</snippet></ROW><ROW><id>19114492</id><snippet>with</snippet></ROW><ROW><id>19114492</id><snippet>with open("/tmp/LostShots/LostShots.txt", "r") as input_file, \ 
     open('results.txt', 'w') as output_file:

    for line in input_file:
        if "Lost" in line:
            output_file.write(line) 
</snippet></ROW><ROW><id>19114492</id><snippet>with</snippet></ROW><ROW><id>19114492</id><snippet>with open("/tmp/LostShots/LostShots.txt", "r") as input_file:
    with open('results.txt', 'w') as output_file:

        for line in input_file:
            if "Lost" in line:
                output_file.write(line) 
</snippet></ROW><ROW><id>19115048</id><snippet>import csv
import tempfile
import shutil

input_file = 'minitest.csv'

with open(input_file, 'rb') as f, \
     tempfile.NamedTemporaryFile(delete=False) as out_f:

    # in order to be able to not have to read everything in memory, we have to 
    # write every processed row to disk immediatley; for that, we need a temporary
    # file because we can't read and write a single file at the same time:
    reader = csv.reader(f)
    writer = csv.writer(out_f)

    # header row
    writer.writerow(next(reader))

    # note that this uses a generator not a list, so that writerows will lazily
    # evaluate each row as it writes them to disk
    writer.writerows(row + [float(row[2]) * float(row[5])] for row in reader)

# one everything's done, overwrite the original file with the new contents.
shutil.move(out_f.name, input_file)
</snippet></ROW><ROW><id>19115386</id><snippet>json</snippet></ROW><ROW><id>19115386</id><snippet>object_pairs_hook</snippet></ROW><ROW><id>19115386</id><snippet>json.load(s)</snippet></ROW><ROW><id>19115799</id><snippet>def index(request):
    poll_list = Poll.objects.order_by('data_publicacao')
    return render_to_response('index.html', {'poll_list': poll_list})
</snippet></ROW><ROW><id>19115799</id><snippet>def index(request):
    poll_list = Poll.objects.order_by('data_publicacao')
    return render_to_response('index.html', RequestContext(request, {
                                            'poll_list': poll_list}))
</snippet></ROW><ROW><id>19115857</id><snippet>class UpdateScript:
    def index(self, field1, field2):
        ...
</snippet></ROW><ROW><id>19115857</id><snippet>class UpdateScript:
    def index(self, **kwargs):
        ...
</snippet></ROW><ROW><id>19115857</id><snippet>import urllib
print urllib.urlopen('http://localhost:8080', 'field1=b&amp;field2=c').read()
</snippet></ROW><ROW><id>19115954</id><snippet>Post.comments</snippet></ROW><ROW><id>19115954</id><snippet>subqueryload</snippet></ROW><ROW><id>19115954</id><snippet>Post.comments</snippet></ROW><ROW><id>19115954</id><snippet>Post.comments</snippet></ROW><ROW><id>19115954</id><snippet>published_comments</snippet></ROW><ROW><id>19115954</id><snippet>Post.comments</snippet></ROW><ROW><id>19115954</id><snippet>published_comments</snippet></ROW><ROW><id>19115954</id><snippet>Post.deleted_comments = deleted_comments</snippet></ROW><ROW><id>19115954</id><snippet>contains_eager</snippet></ROW><ROW><id>19116042</id><snippet>re.sub()</snippet></ROW><ROW><id>19116042</id><snippet>count</snippet></ROW><ROW><id>19116042</id><snippet>re.sub(r"\bksu\b", "King Saud University", string, flags=re.I, count=1)
</snippet></ROW><ROW><id>19116336</id><snippet>req.putheader("Authorization", "Basic %s" % base64.b64encode(concat_consumer_url))
</snippet></ROW><ROW><id>19116399</id><snippet>tar xzvf Django-1.5.4.tar.gz
cd Django-1.5.4
sudo python setup.py install
</snippet></ROW><ROW><id>19116643</id><snippet>&lt;Gather&gt;</snippet></ROW><ROW><id>19116643</id><snippet>&lt;Response&gt;
  &lt;Play loop="0"&gt;/my_music.mp3&lt;/Play&gt;
&lt;/Response&gt;
</snippet></ROW><ROW><id>19116643</id><snippet>&lt;Response&gt;
   &lt;Gather numDigits="1" action="/accepted"&gt;
     &lt;Say&gt;Incoming call from +X YYY ZZZZ ZZZZ&lt;/Say&gt;
   &lt;/Gather
&lt;Response&gt;
</snippet></ROW><ROW><id>19116643</id><snippet>action</snippet></ROW><ROW><id>19116643</id><snippet>&lt;Response&gt;
  &lt;Dial&gt;
    &lt;Conference&gt;some-unique-room-name&lt;/Conference&gt;
  &lt;/Dial&gt;
&lt;/Response&gt;
</snippet></ROW><ROW><id>19116643</id><snippet>/accepted</snippet></ROW><ROW><id>19116643</id><snippet>&lt;Queue&gt;</snippet></ROW><ROW><id>19116643</id><snippet>url</snippet></ROW><ROW><id>19116643</id><snippet>&lt;Number&gt;</snippet></ROW><ROW><id>19116643</id><snippet>&lt;Number&gt;</snippet></ROW><ROW><id>19116643</id><snippet>&lt;Response&gt;
  &lt;Dial&gt;
    &lt;Number url="/whisper"&gt;+AGENTNUMBER&lt;/Number&gt;
  &lt;/Dial&gt;
&lt;/Response&gt;
</snippet></ROW><ROW><id>19116643</id><snippet>/whisper</snippet></ROW><ROW><id>19116643</id><snippet>&lt;Gather&gt;</snippet></ROW><ROW><id>19116643</id><snippet>&lt;Hangup&gt;</snippet></ROW><ROW><id>19116990</id><snippet>from django.shortcuts import render, get_object_or_404
from your_app.models import Location

def get_location(request, lid):
    location = get_object_or_404(Location, id=lid)
    return render(request, 'location.html', {'location': location})
</snippet></ROW><ROW><id>19116990</id><snippet>DoesNotExist</snippet></ROW><ROW><id>19117099</id><snippet>id, state, result</snippet></ROW><ROW><id>19117099</id><snippet>state=processing</snippet></ROW><ROW><id>19117099</id><snippet>state=done</snippet></ROW><ROW><id>19117099</id><snippet>result=result</snippet></ROW><ROW><id>19117099</id><snippet>.ready()</snippet></ROW><ROW><id>19117164</id><snippet>HeapSize</snippet></ROW><ROW><id>19117164</id><snippet>jvmData = "..." #the string holding the data
jvmLines = jvmData.split("\n") #a list of the lines in the string
lines = [l.strip() for l in jvmLines if "name=" in l] #filter all data lines
result = {}
for line in lines:
    data = dict(s.split("=") for s in line.split(", "))
    #the value is in "current" for HeapSize or in "count" otherwise
    value = data["current"] if data["name"] == "HeapSize" else data["count"]
    result[data["name"]] = value
</snippet></ROW><ROW><id>19117164</id><snippet>filter</snippet></ROW><ROW><id>19117164</id><snippet>map</snippet></ROW><ROW><id>19117164</id><snippet>if/else</snippet></ROW><ROW><id>19117164</id><snippet>jvmData = "..." #the string holding the data
jvmLines = jvmData.split("\n") #a list of the lines in the string
lines = filter(lambda x: "name=" in x, jvmLines) #filter all data lines
result = {}
for line in lines:
    data = dict(map(lambda x: x.split("="), line.split(", ")))
    if data["name"] == "HeapSize":
        result[data["name"]] = data["current"]
    else:
        result[data["name"]] = data["count"]
</snippet></ROW><ROW><id>19117181</id><snippet>numpy.select</snippet></ROW><ROW><id>19117181</id><snippet>conds = [r &lt;= p1, r &lt;= (p1 + p2), r &gt; (p1 + p2)]
choices = [a1, a2, a3]
a = np.select(conds, choices)
</snippet></ROW><ROW><id>19117181</id><snippet>r == r</snippet></ROW><ROW><id>19117211</id><snippet>Font</snippet></ROW><ROW><id>19117211</id><snippet>SysFont</snippet></ROW><ROW><id>19117211</id><snippet>render</snippet></ROW><ROW><id>19117211</id><snippet>Surface</snippet></ROW><ROW><id>19117211</id><snippet>Surface</snippet></ROW><ROW><id>19117211</id><snippet>import pygame
import sys
from pygame.locals import *

white = (255,255,255)
black = (0,0,0)


class Pane(object):
    def __init__(self):
        pygame.init()
        self.font = pygame.font.SysFont('Arial', 25)
        pygame.display.set_caption('Box Test')
        self.screen = pygame.display.set_mode((600,400), 0, 32)
        self.screen.fill((white))
        pygame.display.update()


    def addRect(self):
        self.rect = pygame.draw.rect(self.screen, (black), (175, 75, 200, 100), 2)
        pygame.display.update()

    def addText(self):
        self.screen.blit(self.font.render('Hello!', True, (255,0,0)), (200, 100))
        pygame.display.update()

if __name__ == '__main__':
    Pan3 = Pane()
    Pan3.addRect()
    Pan3.addText()
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit(); sys.exit();
</snippet></ROW><ROW><id>19117211</id><snippet>Font.render</snippet></ROW><ROW><id>19117491</id><snippet>text</snippet></ROW><ROW><id>19117491</id><snippet>import json

import db
import web


class Getloc(object):
    def PUT(self):
        s = web.input()['text']
        # doesn't the DB layer web.py allow you to directly query the rows
        # that match your criteria? filtering in your code is inefficient
        for user in db.select('location'):
            if user.lname == s:
                lid = user.lid
                break  # once found, save CPU time and don't keep iterating

        # sec_dict = []  # this is not a dict, it's a list, but it's not
                         # needed anyway--use list comprehensions instead

        # i = 0  # not needed in this case, but if you need iteration with
                 # indexing, use `for ix, elem in enumerate(elems)`

        # same question--can't you just have the DB do the filtering?
        ret = [user.lname.encode('ascii', 'ignore')
               for user in db.select('location')
               if user.lparent == lid]

        # if not ret:
        #     ret = [None]  # this is a bad idea; just return an empty list

        return json.dumps(ret)
</snippet></ROW><ROW><id>19117793</id><snippet>x = Fraction(1, ceil(frac.denominator / frac.numerator))
</snippet></ROW><ROW><id>19117793</id><snippet>x = Fraction(1,int(ceil(frac.denominator / float(frac.numerator))))
</snippet></ROW><ROW><id>19118319</id><snippet>&gt;&gt;&gt; tree = etree.parse(StringIO.StringIO(broken_html), parser=parser)
&gt;&gt;&gt; tree
&lt;lxml.etree._ElementTree object at 0x2fd8e60&gt;
</snippet></ROW><ROW><id>19118319</id><snippet>lxml.html</snippet></ROW><ROW><id>19118319</id><snippet>&gt;&gt;&gt; from lxml import html
&gt;&gt;&gt; broken_html = "&lt;html&gt;&lt;head&gt;&lt;title&gt;test&lt;body&gt;&lt;h1&gt;page title&lt;/h3&gt;"
&gt;&gt;&gt; html.fromstring(broken_html)
&lt;Element html at 0x2dde650&gt;
</snippet></ROW><ROW><id>19118469</id><snippet>dfrm1 = pandas.DataFrame({'tt':['g', 'g', 'g', 't', 't'], 
                          'oo':['gh', 'jj', 'gh', 'gh', 'gh']})

dfrm1.groupby('tt')['oo'].value_counts().unstack(level=1).fillna(0.0)
</snippet></ROW><ROW><id>19118625</id><snippet>PS1='end1&gt;'; command1
</snippet></ROW><ROW><id>19118653</id><snippet>r</snippet></ROW><ROW><id>19118653</id><snippet>r</snippet></ROW><ROW><id>19118653</id><snippet>r</snippet></ROW><ROW><id>19118653</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import math

x, y = np.genfromtxt('data', unpack=True, skip_header=1)
# find lots of points on the piecewise linear curve defined by x and y
M = 1000
t = np.linspace(0, len(x), M)
x = np.interp(t, np.arange(len(x)), x)
y = np.interp(t, np.arange(len(y)), y)
tol = 1.5
i, idx = 0, [0]
while i &lt; len(x):
    total_dist = 0
    for j in range(i+1, len(x)):
        total_dist += math.sqrt((x[j]-x[j-1])**2 + (y[j]-y[j-1])**2)
        if total_dist &gt; tol:
            idx.append(j)
            break
    i = j+1

xn = x[idx]
yn = y[idx]
fig, ax = plt.subplots()
ax.plot(x, y, '-')
ax.scatter(xn, yn, s=50)
ax.set_aspect('equal')
plt.show()
</snippet></ROW><ROW><id>19118653</id><snippet>'equal'</snippet></ROW><ROW><id>19118659</id><snippet>with open(file_path, 'wb') as open_file:
</snippet></ROW><ROW><id>19118741</id><snippet>virtualenv-1.10.1\virtualenv_support</snippet></ROW><ROW><id>19118741</id><snippet>--extra-search-dir</snippet></ROW><ROW><id>19118741</id><snippet>--no-setuptools</snippet></ROW><ROW><id>19118741</id><snippet>--no-setuptools</snippet></ROW><ROW><id>19118828</id><snippet>def main():    
    line = r'&lt;para&gt;06.00        na hrvatskom Zona gradnje: Izgradnja zelenog Pekinga&lt;/para&gt;'        
    if re.search(r'^(&lt;para&gt;)\d{2}.\d{2}', line):
        line_time = re.findall(r'\d{2}.\d{2}',line)[0]       
        line_title = line[line.find(re.findall(r'[A-Z]',line)[0]):line.find(':')]        
        line_sub = line[line.find(':')+1:line.find(r'&lt;/')].strip()

        print '&lt;start&gt;'+line_time+'&lt;/start&gt;&lt;title&gt;'+line_title+'&lt;/title&gt;&lt;sub&gt;'+line_sub+'&lt;/sub&gt;'   
</snippet></ROW><ROW><id>19118828</id><snippet>&lt;start&gt;06.00&lt;/start&gt;&lt;title&gt;Zona gradnje&lt;/title&gt;&lt;sub&gt;Izgradnja zelenog Pekinga&lt;/sub&gt;
</snippet></ROW><ROW><id>19118828</id><snippet> with open(r'D:\Trading\PythonScholar\input\input.tx','r') as file: 
        for line in file:            
            if re.search(r'^(&lt;para&gt;)\d{2}.\d{2}', line.strip()): 
                line_time = re.findall(r'\d{2}.\d{2}',line)[0] 
                line_title = line[line.find(re.findall(r'[A-Z]',line)[0]):line.find(':')] 
                line_sub = line[line.find(':')+1:line.find(r'&lt;/')].strip() 
                print '&lt;start&gt;'+line_time+'&lt;/start&gt;&lt;title&gt;'+line_title+'&lt;/title&gt;&lt;sub&gt;'+line_sub+'&lt;/sub&gt;'
</snippet></ROW><ROW><id>19119168</id><snippet>Cell("A1").value = "'10/1/2013"
</snippet></ROW><ROW><id>19119431</id><snippet>bpy.data.objects[&lt;index or object name&gt;].data.vertices[&lt;index&gt;].co[&lt;0,1,2&gt; which correspond to x,y,z respectively]  
bpy.data.objects[&lt;index or object name&gt;].data.polygons[&lt;index&gt;].edge_keys  
</snippet></ROW><ROW><id>19119431</id><snippet>import bpy, bmesh 

for ob in bpy.context.scene.objects: 
    if ob.type != 'MESH': 
        continue
    bm = bmesh.new() 
    bm.from_object(ob, bpy.context.scene) 

    if len(bm.faces) &gt; 0 and 0 not in (len(e.link_faces) for e in bm.edges): 
        print(ob.name, "is valid") 
    else: 
        print(ob.name, "has errors") 
</snippet></ROW><ROW><id>19119431</id><snippet>def validate(obj):
    import bpy, bmesh 

    if obj.type == 'MESH':                
        bm = bmesh.new() 
        bm.from_object(obj, bpy.context.scene) 

        if len(bm.faces) &gt; 0 and 0 not in (len(e.link_faces) for e in bm.edges): 
            return True
    return False
</snippet></ROW><ROW><id>19119466</id><snippet>numpy</snippet></ROW><ROW><id>19119466</id><snippet>matplotlib</snippet></ROW><ROW><id>19119738</id><snippet>draw</snippet></ROW><ROW><id>19119738</id><snippet>plt.pause(.1)</snippet></ROW><ROW><id>19119772</id><snippet>{:.2f}</snippet></ROW><ROW><id>19119772</id><snippet>&gt;&gt;&gt; '{:.2f}'.format(0.4)
'0.40'
</snippet></ROW><ROW><id>19119942</id><snippet>request</snippet></ROW><ROW><id>19119942</id><snippet>count()</snippet></ROW><ROW><id>19119942</id><snippet>func</snippet></ROW><ROW><id>19119942</id><snippet>def count_number_of_various_polls(func):
    def count(request):
        ...
        func(request)
    return count
</snippet></ROW><ROW><id>19120179</id><snippet>b1</snippet></ROW><ROW><id>19120179</id><snippet>print array[1][0]
</snippet></ROW><ROW><id>19120179</id><snippet>&gt;&gt;&gt; array=[['a1','a2','a3','a4'],['b1','b2','b3','b4'],['c1','c2','c3','c4']]
&gt;&gt;&gt; array[1]
['b1', 'b2', 'b3', 'b4']
&gt;&gt;&gt; array[1][0]
'b1'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19120179</id><snippet>array</snippet></ROW><ROW><id>19120179</id><snippet>b1</snippet></ROW><ROW><id>19120324</id><snippet>python test.py "blah='blah'"
</snippet></ROW><ROW><id>19120324</id><snippet>python test.py blah="'blah'"
</snippet></ROW><ROW><id>19120324</id><snippet>python test.py blah=\'blah\'
</snippet></ROW><ROW><id>19120324</id><snippet>bash</snippet></ROW><ROW><id>19120324</id><snippet>$ cat test.py 
import sys
print sys.argv
$ python test.py blah='blah'
['test.py', 'blah=blah']
$ python test.py "blah='blah'"
['test.py', "blah='blah'"]
$ python test.py blah="'blah'"
['test.py', "blah='blah'"]
$ python test.py blah=\'blah\'
['test.py', "blah='blah'"]
</snippet></ROW><ROW><id>19120357</id><snippet>'    class Track:'
'    \tdef __init__(self, artist, title, album=None):'
'    \t\tself.artist = str(artist)'
'            self.title = str(title)'
'            self.album = album'
'    '
'    \tdef __str__(self):'
'    \t\treturn self.artist + " " + self.title + " " + self.album'
'    '
'    \tdef set_album(self, album):'
'    \t\tself.album = album'
</snippet></ROW><ROW><id>19120357</id><snippet>python -tt yourprogramname.py</snippet></ROW><ROW><id>19120584</id><snippet>qsub -l nodes=1:ppn=2 -l walltime=300 -l node=foo training.py
</snippet></ROW><ROW><id>19120584</id><snippet>cat training.py
#!/usr/bin/python
#PBS nodes=foo
#PBS walltime=300
</snippet></ROW><ROW><id>19120758</id><snippet>[]</snippet></ROW><ROW><id>19120758</id><snippet>&lt;form method="POST"&gt;
&lt;select name="primary"  id="primary" multiple="multiple"&gt;
  &lt;option &gt;a&lt;/option&gt;
  &lt;option &gt;b&lt;/option&gt;
  &lt;option &gt;c&lt;/option&gt;
&lt;/select&gt;
&lt;input type="submit" value="submit"&gt;
&lt;/form&gt;  
</snippet></ROW><ROW><id>19120758</id><snippet>def POST(self):
    s = web.input(primary = [])
    print str(s.primary)
</snippet></ROW><ROW><id>19121073</id><snippet>from flask import Flask
from models import Base, User # Your non-Flask-SQLAlchemy models...
from flask_sqlalchemy import SQLAlchemy

app =  Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'
db = SQLAlchemy(app)

@app.before_first_request
def setup():
    # Recreate database each time for demo
    Base.metadata.drop_all(bind=db.engine)
    Base.metadata.create_all(bind=db.engine)
    db.session.add(User('Bob Jones', 'bob@gmail.com'))
    db.session.add(User('Joe Quimby', 'eat@joes.com'))
    db.session.commit()

@app.route('/')
def root():
    users = db.session.query(User).all()
    return u"&lt;br&gt;".join([u"{0}: {1}".format(user.name, user.email) for user in users])

if __name__ == '__main__':
    app.run('127.0.0.1', 5000) 
</snippet></ROW><ROW><id>19121073</id><snippet>User.query</snippet></ROW><ROW><id>19121073</id><snippet>first_or_404()</snippet></ROW><ROW><id>19121257</id><snippet>GzipFile</snippet></ROW><ROW><id>19121257</id><snippet>import sys
from gzip import GzipFile

class MyStream(object):
    def write(self, data):
        #write to your stream...
        sys.stdout.write(data) #stdout, for example

gz= GzipFile( fileobj=MyStream(), mode='w'  )
gz.write("something")
</snippet></ROW><ROW><id>19121271</id><snippet>y[i] = np.sum(x - x[i])</snippet></ROW><ROW><id>19121271</id><snippet>y[i] = np.sum(x) - x.size * x[i]</snippet></ROW><ROW><id>19121271</id><snippet>y = np.sum(x) - x.size * x
</snippet></ROW><ROW><id>19121271</id><snippet>&gt;&gt;&gt; x = np.random.normal(size=(1000,))
&gt;&gt;&gt; np.allclose(np.sum(x - x[:,None], 1), np.sum(x) - x.size * x)
True

%timeit np.sum(x - x[:,None], 1)
100 loops, best of 3: 6.33 ms per loop

%timeit np.sum(x) - x.size * x
100000 loops, best of 3: 16.5 us per loop
</snippet></ROW><ROW><id>19121365</id><snippet># Put an 'r' at the start of the string to make it a raw-string.
with open(r"C:\path\to\file\train_data.csv","rb") as training:
</snippet></ROW><ROW><id>19121378</id><snippet>prepare_data()</snippet></ROW><ROW><id>19121407</id><snippet>def delete_images(image_id):
    ImagenAvaluo.objects.filter(image_id=image_id).delete()
</snippet></ROW><ROW><id>19121407</id><snippet>request</snippet></ROW><ROW><id>19121505</id><snippet>with open("file") as f:
   for line in f:
     print line
</snippet></ROW><ROW><id>19121505</id><snippet>for line in f: print line</snippet></ROW><ROW><id>19121505</id><snippet>with open('file') as f:
    while True:
        try:
            line=f.next()
        except StopIteration:
            break
        else:
            print line 
</snippet></ROW><ROW><id>19121505</id><snippet>with open("file") as f:
   data = f.readlines()    # equivelent to data=list(f)
   for line in data:
     print line
</snippet></ROW><ROW><id>19121505</id><snippet>with open('file') as f:
    data=list(f)
    it=iter(data)
    while True:
        try:
            line=it.next()
        except StopIteration:
            break
        else:
            print line  
</snippet></ROW><ROW><id>19121705</id><snippet>\n</snippet></ROW><ROW><id>19121705</id><snippet>ConfigParser</snippet></ROW><ROW><id>19121705</id><snippet>\n</snippet></ROW><ROW><id>19121705</id><snippet>[NOTIFICATIONS]
test1 = Hello,
        {username}!
</snippet></ROW><ROW><id>19121705</id><snippet>&gt;&gt;&gt; print(cfg.get('NOTIFICATIONS', 'test1'))
Hello,
{username}!
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19121755</id><snippet>x = { row.SITE_NAME : row.LOOKUP_TABLE for row in cursor }
</snippet></ROW><ROW><id>19121755</id><snippet>_container</snippet></ROW><ROW><id>19121755</id><snippet>_value</snippet></ROW><ROW><id>19121755</id><snippet>{ _key : _value(_key) for _key in _container }
</snippet></ROW><ROW><id>19121797</id><snippet>d</snippet></ROW><ROW><id>19121797</id><snippet>d' = 1/d</snippet></ROW><ROW><id>19121797</id><snippet>d'</snippet></ROW><ROW><id>19121797</id><snippet>k</snippet></ROW><ROW><id>19121797</id><snippet>k</snippet></ROW><ROW><id>19121797</id><snippet>n</snippet></ROW><ROW><id>19121797</id><snippet>k</snippet></ROW><ROW><id>19121797</id><snippet>k</snippet></ROW><ROW><id>19121797</id><snippet>all_nodes = np.asarray(...) # Set of nodes
all_dists = np.asarray(...) # Pairwise distances

N = len(all_nodes)
k = 10 # Or however many you want.

def calculate_distance(node_subset, distances):
    # A function you write to determine sum of distances
    # among a particular subset of nodes.    

# Initial random subset of k elements
shuffle = np.random.shuffle(all_nodes) 
current_subset = shuffle[0:k]
current_outsiders = shuffle[k:]

# Simulated annealing parameters.
temp = 100.0
cooling_rate = 0.95
num_iters = 10000

# Simulated annealing loop.
for ii in range(num_iters):
    proposed_subset = current_subset.copy()
    proposed_outsiders =  current_outsiders.copy()

    index_to_swap = np.random.randint(k)
    outsider_to_swap = np.random.randint(N - k)

    tmp = current_subset[index_to_swap]
    proposed_subset[index_to_swap] = current_outsiders[outsider_to_swap]
    proposed_outsiders[outsider_to_swap] = tmp

    potential_change = np.exp((-1.0/temp)*
        calculate_distance(proposed_subset,all_dists)/
        calculate_distance(current_subset, all_dists)) 

    if potential_change &gt; 1 or potential_change &gt;= np.random.rand():
         current_subset = proposed_subset
         current_outsiders = proposed_outsiders

    temp = cooling_rate * temp
</snippet></ROW><ROW><id>19122009</id><snippet>String[] cmd = new String[] {"python /home/k/Desktop/cc.py", "3"};
</snippet></ROW><ROW><id>19122009</id><snippet>String[] cmd = new String[] {"python", "/home/k/Desktop/cc.py", "3"};
</snippet></ROW><ROW><id>19122009</id><snippet>exec(String command)</snippet></ROW><ROW><id>19122009</id><snippet>exec(String[] cmdarray)</snippet></ROW><ROW><id>19122250</id><snippet>class SyntheticChildrenProvider:
    def __init__(self, valobj, internal_dict):
        this call should initialize the Python object using valobj as the variable to provide synthetic children for 
    def num_children(self): 
        this call should return the number of children that you want your object to have 
    def get_child_index(self,name): 
        this call should return the index of the synthetic child whose name is given as argument 
    def get_child_at_index(self,index): 
        this call should return a new LLDB SBValue object representing the child at the index given as argument 
    def update(self): 
        this call should be used to update the internal state of this Python object whenever the state of the variables in LLDB changes.[1]
    def has_children(self): 
        this call should return True if this object might have children, and False if this object can be guaranteed not to have children.[2]
</snippet></ROW><ROW><id>19122337</id><snippet>In [29]: bars
Out[29]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 942 entries, 2010-01-04 00:00:00 to 2013-09-30 00:00:00
Data columns (total 6 columns):
Open         942  non-null values
High         942  non-null values
Low          942  non-null values
Close        942  non-null values
Volume       942  non-null values
Adj Close    942  non-null values
dtypes: float64(5), int64(1)

window=30

In [30]: concat([ (Series(vwap(bars.iloc[i:i+window]),
                      index=[bars.index[i+window]])) for i in xrange(len(df)-window) ])
Out[30]: 
2010-02-17    203.21
2010-02-18    202.95
2010-02-19    202.64
2010-02-22    202.41
2010-02-23    202.19
2010-02-24    201.85
2010-02-25    201.65
2010-02-26    201.50
2010-03-01    201.31
2010-03-02    201.35
2010-03-03    201.42
2010-03-04    201.09
2010-03-05    200.95
2010-03-08    201.50
2010-03-09    202.02
...
2013-09-10    485.94
2013-09-11    487.38
2013-09-12    486.77
2013-09-13    487.23
2013-09-16    487.20
2013-09-17    486.09
2013-09-18    485.52
2013-09-19    485.30
2013-09-20    485.37
2013-09-23    484.87
2013-09-24    485.81
2013-09-25    486.41
2013-09-26    486.07
2013-09-27    485.30
2013-09-30    484.74
Length: 912
</snippet></ROW><ROW><id>19122355</id><snippet>.eliminate_zeros()</snippet></ROW><ROW><id>19122355</id><snippet>a.eliminate_zeros()
</snippet></ROW><ROW><id>19122355</id><snippet>a.data</snippet></ROW><ROW><id>19122449</id><snippet>cylinder</snippet></ROW><ROW><id>19122449</id><snippet>visual</snippet></ROW><ROW><id>19122449</id><snippet>from visual import cylinder
</snippet></ROW><ROW><id>19122449</id><snippet>vpython</snippet></ROW><ROW><id>19122449</id><snippet>from visual import *
</snippet></ROW><ROW><id>19123015</id><snippet>csv</snippet></ROW><ROW><id>19123015</id><snippet>csv</snippet></ROW><ROW><id>19123015</id><snippet>,</snippet></ROW><ROW><id>19123015</id><snippet>"</snippet></ROW><ROW><id>19123015</id><snippet>\n</snippet></ROW><ROW><id>19123015</id><snippet>,</snippet></ROW><ROW><id>19123015</id><snippet>unicode_csv_reader</snippet></ROW><ROW><id>19123015</id><snippet>codecs.open</snippet></ROW><ROW><id>19123015</id><snippet>UnicodeReader</snippet></ROW><ROW><id>19123015</id><snippet>encoding</snippet></ROW><ROW><id>19123015</id><snippet>reader</snippet></ROW><ROW><id>19123015</id><snippet>DictReader</snippet></ROW><ROW><id>19123015</id><snippet>(line.encode('utf-8') for line in infile)</snippet></ROW><ROW><id>19123015</id><snippet>with codecs.open(infileName , 'rU', 'utf-16') as infile:
    utf8 = (line.encode('utf-8') for line in infile)
    rdr = csv.DictReader(utf8, delimiter='\t')
    vnames = rdr.fieldnames
    for row in rdr:
        do_something(row)
</snippet></ROW><ROW><id>19123015</id><snippet>unicode</snippet></ROW><ROW><id>19123015</id><snippet>str</snippet></ROW><ROW><id>19123028</id><snippet>if len(kargs.viewkeys() &amp; {'dollar', 'euro'}) != 1:
    raise ValueError('One keyword argument is required: dollar=x or euro=x')
</snippet></ROW><ROW><id>19123028</id><snippet>kargs.keys()</snippet></ROW><ROW><id>19123028</id><snippet>&gt;&gt;&gt; kargs = {'dollar': 1, 'euro': 3, 'foo': 'bar'}
&gt;&gt;&gt; kargs.viewkeys() &amp; {'dollar', 'euro'}
set(['dollar', 'euro'])
&gt;&gt;&gt; del kargs['euro']
&gt;&gt;&gt; kargs.viewkeys() &amp; {'dollar', 'euro'}
set(['dollar'])
&gt;&gt;&gt; del kargs['dollar']
&gt;&gt;&gt; kargs.viewkeys() &amp; {'dollar', 'euro'}
set([])
</snippet></ROW><ROW><id>19123028</id><snippet>&amp;</snippet></ROW><ROW><id>19123028</id><snippet>dollar</snippet></ROW><ROW><id>19123028</id><snippet>euro</snippet></ROW><ROW><id>19123028</id><snippet>&lt;</snippet></ROW><ROW><id>19123028</id><snippet>if {}.viewkeys() &lt; kargs.viewkeys() &lt; {'dollar', 'euro'}:
    raise ValueError('One keyword argument is required: dollar=x or euro=x')
</snippet></ROW><ROW><id>19123028</id><snippet>if set() &lt; kargs.keys() &lt; {'dollar', 'euro'}:
</snippet></ROW><ROW><id>19123028</id><snippet>&gt;&gt;&gt; kargs = {'dollar': 1, 'euro': 3, 'foo': 'bar'}
&gt;&gt;&gt; {}.viewkeys() &lt; kargs.viewkeys() &lt; {'dollar', 'euro'}
False
&gt;&gt;&gt; del kargs['foo']
&gt;&gt;&gt; {}.viewkeys() &lt; kargs.viewkeys() &lt; {'dollar', 'euro'}
False
&gt;&gt;&gt; del kargs['dollar']
&gt;&gt;&gt; {}.viewkeys() &lt; kargs.viewkeys() &lt; {'dollar', 'euro'}
True
&gt;&gt;&gt; del kargs['euro']
&gt;&gt;&gt; {}.viewkeys() &lt; kargs.viewkeys() &lt; {'dollar', 'euro'}
False
</snippet></ROW><ROW><id>19123028</id><snippet>'foo'</snippet></ROW><ROW><id>19123171</id><snippet>L1 = (N,2N,2N+1,...,3N-3,3N)
L2 = (N+1,N+2,...,2N-1,3N-1)
L3 = (1,2,...,N-1,3N-2)
</snippet></ROW><ROW><id>19123171</id><snippet>L3</snippet></ROW><ROW><id>19123171</id><snippet>L</snippet></ROW><ROW><id>19123171</id><snippet>if</snippet></ROW><ROW><id>19123171</id><snippet>L1[1]&lt;L2[1]</snippet></ROW><ROW><id>19123171</id><snippet>if</snippet></ROW><ROW><id>19123171</id><snippet>L[1]=N</snippet></ROW><ROW><id>19123171</id><snippet>L[2]</snippet></ROW><ROW><id>19123171</id><snippet>L1</snippet></ROW><ROW><id>19123171</id><snippet>L3</snippet></ROW><ROW><id>19123171</id><snippet>L1</snippet></ROW><ROW><id>19123171</id><snippet>L3</snippet></ROW><ROW><id>19123171</id><snippet>L2</snippet></ROW><ROW><id>19123171</id><snippet>(N-1)*(3+2+1)+3+1 = 6N - 2
</snippet></ROW><ROW><id>19123171</id><snippet>L2&lt;L1</snippet></ROW><ROW><id>19123171</id><snippet>L1&lt;L3</snippet></ROW><ROW><id>19123171</id><snippet>L2</snippet></ROW><ROW><id>19123171</id><snippet>L3</snippet></ROW><ROW><id>19123171</id><snippet>L2</snippet></ROW><ROW><id>19123463</id><snippet>meta</snippet></ROW><ROW><id>19123463</id><snippet>title</snippet></ROW><ROW><id>19123463</id><snippet>from bs4 import BeautifulSoup as Soup

html = """
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Test Page&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div&gt;test&lt;/div&gt;
&lt;/html&gt;
"""
soup = Soup(html)

title = soup.find('title')
meta = soup.new_tag('meta')
meta['content'] = "text/html; charset=UTF-8"
meta['http-equiv'] = "Content-Type"
title.insert_after(meta)

print soup
</snippet></ROW><ROW><id>19123463</id><snippet>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Test Page&lt;/title&gt;
        &lt;meta content="text/html; charset=UTF-8" http-equiv="Content-Type"/&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;test&lt;/div&gt;
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>19123463</id><snippet>head</snippet></ROW><ROW><id>19123463</id><snippet>head = soup.find('head')
head.insert(1, meta)
</snippet></ROW><ROW><id>19123475</id><snippet>$ virtualenv myenv
New python executable in myenv/bin/python
Installing setuptools............done.
Installing pip...............done.
$ source myenv/bin/activate
</snippet></ROW><ROW><id>19123475</id><snippet>0.1.0</snippet></ROW><ROW><id>19123475</id><snippet>toolz</snippet></ROW><ROW><id>19123475</id><snippet>0.2.1</snippet></ROW><ROW><id>19123475</id><snippet>(myenv)$ pip install toolz==0.1.0
Downloading/unpacking toolz==0.1.0
  Downloading toolz-0.1.tar.gz
  Running setup.py egg_info for package toolz
Downloading/unpacking itertoolz&gt;=0.5 (from toolz==0.1.0)
  Downloading itertoolz-0.5.tar.gz
  Running setup.py egg_info for package itertoolz
Downloading/unpacking functoolz&gt;=0.4 (from toolz==0.1.0)
  Downloading functoolz-0.4.tar.gz
  Running setup.py egg_info for package functoolz
Installing collected packages: toolz, itertoolz, functoolz
  Running setup.py install for toolz
  Running setup.py install for itertoolz
  Running setup.py install for functoolz
Successfully installed toolz itertoolz functoolz
Cleaning up...
</snippet></ROW><ROW><id>19123475</id><snippet>(myenv)$ pip freeze
functoolz==0.4
itertoolz==0.5
toolz==0.1
wsgiref==0.1.2
</snippet></ROW><ROW><id>19123475</id><snippet>(myenv)$ pip freeze &gt; reqs.txt
(myenv)$ deactivate
$ source env2/bin/activate
(env2)$ pip freeze
wsgiref==0.1.2
(env2)$ pip install -r reqs.txt 
Downloading/unpacking functoolz==0.4 (from -r reqs.txt (line 1))
  Downloading functoolz-0.4.tar.gz
  Running setup.py egg_info for package functoolz
Downloading/unpacking itertoolz==0.5 (from -r reqs.txt (line 2))
  Downloading itertoolz-0.5.tar.gz
  Running setup.py egg_info for package itertoolz
Downloading/unpacking toolz==0.1 (from -r reqs.txt (line 3))
  Downloading toolz-0.1.tar.gz
  Running setup.py egg_info for package toolz
Requirement already satisfied (use --upgrade to upgrade): wsgiref==0.1.2 in /Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6 (from -r reqs.txt (line 4))
Installing collected packages: functoolz, itertoolz, toolz
  Running setup.py install for functoolz
  Running setup.py install for itertoolz
  Running setup.py install for toolz
Successfully installed functoolz itertoolz toolz
Cleaning up...
</snippet></ROW><ROW><id>19123529</id><snippet>while True</snippet></ROW><ROW><id>19123529</id><snippet>break</snippet></ROW><ROW><id>19123529</id><snippet>while one == 0</snippet></ROW><ROW><id>19123529</id><snippet>while True</snippet></ROW><ROW><id>19123529</id><snippet>one = 1</snippet></ROW><ROW><id>19123529</id><snippet>len(l) &gt; 500</snippet></ROW><ROW><id>19123529</id><snippet>a = 1
while(True):
    if get_divisors_count(get_triangular(a)) &gt; 500:
        print(a)
        break
    a += 1
</snippet></ROW><ROW><id>19123529</id><snippet>a</snippet></ROW><ROW><id>19123529</id><snippet>n</snippet></ROW><ROW><id>19123529</id><snippet>n/a</snippet></ROW><ROW><id>19123529</id><snippet>sqrt(n)</snippet></ROW><ROW><id>19123529</id><snippet>sum(range(1, nth+1))</snippet></ROW><ROW><id>19123529</id><snippet>running_sum += a</snippet></ROW><ROW><id>19123529</id><snippet>O(N**1.5)</snippet></ROW><ROW><id>19123529</id><snippet>O(N**2)</snippet></ROW><ROW><id>19123684</id><snippet>In [2]: df = DataFrame(np.random.rand(5,3), index=[0, 1, 2, 4, 5])

In [3]: df.index.to_series()
Out[3]: 
0    0
1    1
2    2
4    4
5    5
dtype: int64

In [4]: s = df.index.to_series()

In [5]: 1./s.diff().mean()
Out[5]: 0.80000000000000004
</snippet></ROW><ROW><id>19123719</id><snippet>somevar = 'foo'
getattr(x, somevar)
</snippet></ROW><ROW><id>19123719</id><snippet>getattr()</snippet></ROW><ROW><id>19123719</id><snippet>&gt;&gt;&gt; x = object()
&gt;&gt;&gt; getattr(x, 'foo')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'object' object has no attribute 'foo'
&gt;&gt;&gt; getattr(x, 'foo', 42)
42
</snippet></ROW><ROW><id>19123719</id><snippet>getattr()</snippet></ROW><ROW><id>19123719</id><snippet>for attrname in dir(x):
    print('x.{} = {!r}'.format(attrname, getattr(x, attrname))
</snippet></ROW><ROW><id>19123719</id><snippet>setattr()</snippet></ROW><ROW><id>19123719</id><snippet>for i, value in enumerate(dynamic_values):
    setattr(i, 'attribute{}'.format(i), value)
</snippet></ROW><ROW><id>19123776</id><snippet>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; list(range(2, 11))
[2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; for i in range(2, 11):
...     x *= i
...     print(x)
...
2
6
24
120
720
5040
40320
362880
3628800
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19123776</id><snippet>x</snippet></ROW><ROW><id>19123776</id><snippet>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; for i in range(2, 11):
...     if i != 3:    # I add a condition to skip 3
...         x *= i
...         print(x)
...
2
8
40
240
1680
13440
120960
1209600
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19123777</id><snippet>i, j, k, l = (collections.deque() for _ in xrange(4))
</snippet></ROW><ROW><id>19123832</id><snippet>Run Shell Script</snippet></ROW><ROW><id>19123832</id><snippet>stdin</snippet></ROW><ROW><id>19123832</id><snippet>Set Value of Variable</snippet></ROW><ROW><id>19123832</id><snippet>Get Value of Variable</snippet></ROW><ROW><id>19123836</id><snippet>mainloop</snippet></ROW><ROW><id>19123836</id><snippet>after</snippet></ROW><ROW><id>19123836</id><snippet>def animation(self):
    ...
    &lt;redraw the scene&gt;
    ...
    self.after(20, self.animation)
</snippet></ROW><ROW><id>19123845</id><snippet>cess.query(Test.my_id, Test.name)
</snippet></ROW><ROW><id>19123845</id><snippet>Test</snippet></ROW><ROW><id>19123845</id><snippet>json</snippet></ROW><ROW><id>19123845</id><snippet>KeyedTuple</snippet></ROW><ROW><id>19123845</id><snippet>my_id</snippet></ROW><ROW><id>19123845</id><snippet>name</snippet></ROW><ROW><id>19123845</id><snippet>cess.query(Test)
</snippet></ROW><ROW><id>19123850</id><snippet>QApplication</snippet></ROW><ROW><id>19123892</id><snippet>{% set media_files = [] %}
</snippet></ROW><ROW><id>19123892</id><snippet>{% extends 'base.html' %}
{{ media_files.append('jquery.js') }}
</snippet></ROW><ROW><id>19123952</id><snippet>&gt;&gt;&gt; lis = [{'year': 2012L}, {'year': 2013L}, {'year': 2013L}, {'year': 2013L}]
&gt;&gt;&gt; [x['year'] for x in lis]
[2012L, 2013L, 2013L, 2013L]
</snippet></ROW><ROW><id>19124006</id><snippet>$ tree
.
├── static
│   └── scripts
│       └── test.js
├── templates
│   └── index.html
└── test.py
</snippet></ROW><ROW><id>19124006</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

import os.path
import tornado.httpserver
import tornado.ioloop
import tornado.options
import tornado.web

from tornado.options import define, options
define("port", default=8000, help="run on the given port", type=int)

class IndexHandler(tornado.web.RequestHandler):
    def get(self):
        self.render('index.html', test="Hello, world!")

if __name__ == '__main__':
    tornado.options.parse_command_line()
    app = tornado.web.Application( handlers=[
        (r'/', IndexHandler)], 
        static_path=os.path.join(os.path.dirname(__file__), "static"),
        template_path=os.path.join(os.path.dirname(__file__), "templates"))
    http_server = tornado.httpserver.HTTPServer(app)
    http_server.listen(options.port)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>19124006</id><snippet>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Test&lt;/title&gt;
    &lt;script src="{{ static_url('scripts/test.js') }}" type="application/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;input type="button" onclick="show_test()" value="alert" /&gt;
    &lt;script type="application/javascript"&gt;
        set_test("{{test}}");
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>19124006</id><snippet>/* test.js */
var test = ""

function set_test(val)
{
    test=val
}

function show_test()
{
    alert(test);
}
</snippet></ROW><ROW><id>19124168</id><snippet>ast</snippet></ROW><ROW><id>19124168</id><snippet>import ast

with open('mymodule.py') as f:
    mycode = f.read()

myast = ast.parse(mycode)
for thing in myast.body:
    if isinstance(thing, ast.ClassDef):
        print('class {}({})'.format(thing.name, 
                                    ', '.join(base.id for base in thing.bases)))
        for subthing in thing.body:
            if isinstance(subthing, ast.FunctionDef):
                print('    def {}'.format(name))
</snippet></ROW><ROW><id>19124168</id><snippet>class NodeVisitor(object)
    def visit
    def generic_visit
class NodeTransformer(NodeVisitor)
    def generic_visit
</snippet></ROW><ROW><id>19124177</id><snippet>pygame</snippet></ROW><ROW><id>19124177</id><snippet>while True:
    for event in key_presses():
        handle_event(event)  # stuff that happens as a result of input
    update_state()  # stuff that happens regardless of input
    update_display()  # everything that changes the display (backlight, text, anything)
</snippet></ROW><ROW><id>19124232</id><snippet>list</snippet></ROW><ROW><id>19124232</id><snippet>def convert_all(all, convert=to_unicode_or_bust):
    if isinstance(all, tuple):
        return tuple(convert_all(piece, convert) for piece in all)
    elif isinstance(all, list):
        return [convert_all(piece, convert) for piece in all]
    return convert(all)
</snippet></ROW><ROW><id>19124232</id><snippet>list</snippet></ROW><ROW><id>19124232</id><snippet>\x--</snippet></ROW><ROW><id>19124232</id><snippet>\u----</snippet></ROW><ROW><id>19124240</id><snippet>to_dict</snippet></ROW><ROW><id>19124240</id><snippet>class Test(Base):
   ...

   def to_dict(self):
       return {c.name: getattr(self, c.name) for c in self.__table__.columns}
</snippet></ROW><ROW><id>19124240</id><snippet>users = cess.query(Test).order_by(Test.my_id).distinct().all()
output = [c.to_dict() for c in users]

print json.dumps(output)
</snippet></ROW><ROW><id>19124329</id><snippet>bp</snippet></ROW><ROW><id>19124329</id><snippet>scipy.fftpack.fftfreq</snippet></ROW><ROW><id>19124329</id><snippet>scipy.fftpack.rfft</snippet></ROW><ROW><id>19124329</id><snippet>import numpy as np
from scipy.fftpack import rfft, irfft, fftfreq

time   = np.linspace(0,10,2000)
signal = np.cos(5*np.pi*time) + np.cos(7*np.pi*time)

W = fftfreq(signal.size, d=time[1]-time[0])
f_signal = rfft(signal)

# If our original signal time was in seconds, this is now in Hz    
cut_f_signal = f_signal.copy()
cut_f_signal[(W&lt;6)] = 0

cut_signal = irfft(cut_f_signal)
</snippet></ROW><ROW><id>19124329</id><snippet>import pylab as plt
plt.subplot(221)
plt.plot(time,signal)
plt.subplot(222)
plt.plot(W,f_signal)
plt.xlim(0,10)
plt.subplot(223)
plt.plot(W,cut_f_signal)
plt.xlim(0,10)
plt.subplot(224)
plt.plot(time,cut_signal)
plt.show()
</snippet></ROW><ROW><id>19124335</id><snippet>In [6]: s = Series(np.random.rand(10))

In [7]: s
Out[7]: 
0    0.302041
1    0.353838
2    0.421416
3    0.174497
4    0.600932
5    0.871461
6    0.116874
7    0.233738
8    0.859147
9    0.145515
dtype: float64

In [8]: s.describe()
Out[8]: 
count    10.000000
mean      0.407946
std       0.280562
min       0.116874
25%       0.189307
50%       0.327940
75%       0.556053
max       0.871461
dtype: float64

In [9]: s.describe()[['count','mean']]
Out[9]: 
count    10.000000
mean      0.407946
dtype: float64
</snippet></ROW><ROW><id>19124396</id><snippet>end</snippet></ROW><ROW><id>19124396</id><snippet>'\t'</snippet></ROW><ROW><id>19124396</id><snippet>for i in range(0,4):
    print("%.2f" % div1Data[i], end='\t')
</snippet></ROW><ROW><id>19124396</id><snippet>&gt;&gt;&gt; '\t' % 1.001
Traceback (most recent call last):
  File "&lt;ipython-input-77-8e0f35262786&gt;", line 1, in &lt;module&gt;
    '\t' % 1.001
TypeError: not all arguments converted during string formatting
</snippet></ROW><ROW><id>19124432</id><snippet>FOO</snippet></ROW><ROW><id>19124432</id><snippet>metavar</snippet></ROW><ROW><id>19124432</id><snippet>&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('--foo')
&gt;&gt;&gt; parser.add_argument('bar')
&gt;&gt;&gt; parser.parse_args('X --foo Y'.split())
Namespace(bar='X', foo='Y')
&gt;&gt;&gt; parser.print_help()
usage:  [-h] [--foo FOO] bar
...
</snippet></ROW><ROW><id>19125036</id><snippet>\</snippet></ROW><ROW><id>19125036</id><snippet>&gt;&gt;&gt; mystr = "long" \
... "str"
&gt;&gt;&gt; mystr
'longstr'
</snippet></ROW><ROW><id>19125036</id><snippet>longStr = r"C:\Users\Public\Documents\year 2013\testfiles" \
           r"\testcode\rawstringfiles.txt"
raw_StringFile = open(longStr, 'a')
</snippet></ROW><ROW><id>19125036</id><snippet>\</snippet></ROW><ROW><id>19125036</id><snippet>longStr = (r"C:\Users\Public\Documents\year 2013\testfiles"
               r"\testcode\rawstringfiles.txt")
raw_StringFile = open(longStr, 'a')
</snippet></ROW><ROW><id>19125273</id><snippet>&gt;&gt;&gt; import prettytable
&gt;&gt;&gt; x = prettytable.PrettyTable(["Length", "Time"])
&gt;&gt;&gt; x.add_row([0, 0.00000])
&gt;&gt;&gt; x.add_row([250, 0.00600]) 
&gt;&gt;&gt; x.add_row([500, 0.02100]) 
&gt;&gt;&gt; x.add_row([750, 0.04999])    
&gt;&gt;&gt; print x
+--------+---------+
| Length |   Time  |
+--------+---------+
|   0    |   0.0   |
|  250   |  0.006  |
|  500   |  0.021  |
|  750   | 0.04999 |
+--------+---------+
</snippet></ROW><ROW><id>19125273</id><snippet>&gt;&gt;&gt; import texttable
&gt;&gt;&gt; x = texttable.Texttable()
&gt;&gt;&gt; x.add_rows([["Length", "Time"], [0, 0.00000], [250, 0.00600], [500, 0.02100], [750, 0.04999]])
&gt;&gt;&gt; print x.draw()
+--------+-------+
| Length | Time  |
+========+=======+
| 0      | 0     |
+--------+-------+
| 250    | 0.006 |
+--------+-------+
| 500    | 0.021 |
+--------+-------+
| 750    | 0.050 |
+--------+-------+
</snippet></ROW><ROW><id>19125316</id><snippet>&gt;&gt;&gt; i = u'&gt;e\x93\x10\xabK\xbe\xfeX\x97\x9a$\r\xef\x8f3'
&gt;&gt;&gt; i.encode('utf8').encode('base64')
'PmXCkxDCq0vCvsO+WMKXwpokDcOvwo8z\n'
</snippet></ROW><ROW><id>19125316</id><snippet>i</snippet></ROW><ROW><id>19125316</id><snippet>Buffer</snippet></ROW><ROW><id>19125316</id><snippet>i</snippet></ROW><ROW><id>19125316</id><snippet>&gt; var i = '&gt;e\x93\x10\xabK\xbe\xfeX\x97\x9a$\r\xef\x8f3';
&gt; var s = new Buffer(i, 'binary').toString('base64');
&gt; s
'PmWTEKtLvv5Yl5okDe+PMw=='
</snippet></ROW><ROW><id>19125386</id><snippet>string</snippet></ROW><ROW><id>19125386</id><snippet>int</snippet></ROW><ROW><id>19125386</id><snippet>bool</snippet></ROW><ROW><id>19125386</id><snippet>list</snippet></ROW><ROW><id>19125386</id><snippet>Document</snippet></ROW><ROW><id>19125386</id><snippet>Property</snippet></ROW><ROW><id>19125386</id><snippet>dict</snippet></ROW><ROW><id>19125386</id><snippet>json</snippet></ROW><ROW><id>19125386</id><snippet>Vertex</snippet></ROW><ROW><id>19125386</id><snippet>Edge</snippet></ROW><ROW><id>19125386</id><snippet>specs = [(2, 0.27911702036756064), (5, 0.6708785014712791)]
anode = g.vertices.get(123)
anode.specs = g.client.type_system.database.to_document(specs)
anode.save()
</snippet></ROW><ROW><id>19125386</id><snippet>Model</snippet></ROW><ROW><id>19125386</id><snippet>Document</snippet></ROW><ROW><id>19125386</id><snippet>List</snippet></ROW><ROW><id>19125386</id><snippet># people.py

from bulbs.model import Node, Relationship
from bulbs.property import String, DateTime, Document
from bulbs.utils import current_datetime

    class Person(Node):

        element_type = "person"

        name = String(nullable=False)
        specs = Document()

    class Knows(Relationship):

        label = "knows"

        timestamp = DateTime(default=current_datetime, nullable=False)
</snippet></ROW><ROW><id>19125386</id><snippet>&gt;&gt;&gt; from people import Person, Knows
&gt;&gt;&gt; from bulbs.neo4jserver import Graph

&gt;&gt;&gt; g = Graph()
&gt;&gt;&gt; g.add_proxy("people", Person)
&gt;&gt;&gt; g.add_proxy("knows", Knows)

&gt;&gt;&gt; specs = [(2, 0.27911702036756064), (5, 0.6708785014712791)]

# You can save specs when you create it...
&gt;&gt;&gt; james = g.people.create(name="James", specs=specs)

# ...or save it after creation...
&gt;&gt;&gt; julie = g.people.create(name="Julie")
&gt;&gt;&gt; julie.specs = specs
&gt;&gt;&gt; julie.save()
</snippet></ROW><ROW><id>19125531</id><snippet>cols_to_use = df2.columns - df.columns
</snippet></ROW><ROW><id>19125531</id><snippet>tolist()</snippet></ROW><ROW><id>19125531</id><snippet>dfNew = merge(df, df2[cols_to_use.tolist()], left_index=True, right_index=True, how='outer')
</snippet></ROW><ROW><id>19125570</id><snippet>@static_var('seed',0)
def counter(self):
    self.counter.__func__.seed += 1
</snippet></ROW><ROW><id>19125570</id><snippet>@static_var('seed',0)
def counter(self):
    Circle.counter.seed += 1
</snippet></ROW><ROW><id>19125570</id><snippet>Counter</snippet></ROW><ROW><id>19125570</id><snippet>type(self)</snippet></ROW><ROW><id>19125585</id><snippet>IndexError</snippet></ROW><ROW><id>19125585</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>19125585</id><snippet>oLink.xpath('string()')</snippet></ROW><ROW><id>19125585</id><snippet>oLink.xpath('string()')[0]</snippet></ROW><ROW><id>19125585</id><snippet>IndexError</snippet></ROW><ROW><id>19125585</id><snippet>from lxml import html

URL = 'http://subscribe.ru/catalog?rss'

parser = html.HTMLParser(encoding="KOI8-R")
content = html.parse(URL, parser)
anchors = content.xpath("//a")

for anchor in anchors:
    text = anchor.text
    if text:  # if the anchor is not empty
        print text.encode("utf-8")
</snippet></ROW><ROW><id>19125585</id><snippet>Вход на сайт
Регистрация 
Забыли пароль?
Войти
условия пользования сервисом Subscribe.ru
Начать регистрацию
Регистрация
Выслать еще раз
Готово
</snippet></ROW><ROW><id>19125585</id><snippet>Спорт
Прогноз погоды
Новости и СМИ
Страны и Регионы
Общество
Дом и семья
Все разделы
ЗАО «Интернет-Проекты»
</snippet></ROW><ROW><id>19125748</id><snippet>plt.xlim(xmax=22) #or xl
plt.ylim(ymax=51) #or yl
</snippet></ROW><ROW><id>19125748</id><snippet>plt.pcolormesh(X, cmap=matplotlib.cm.RdBu_r, vmin=-5, vmax=5)
</snippet></ROW><ROW><id>19125863</id><snippet>label=</snippet></ROW><ROW><id>19125863</id><snippet>plot()</snippet></ROW><ROW><id>19125863</id><snippet>legend(loc='upper left')</snippet></ROW><ROW><id>19125863</id><snippet>x = np.linspace(0, 20, 1000)
y1 = np.sin(x)
y2 = np.cos(x)

pylab.plot(x, y1, '-b', label='sine')
pylab.plot(x, y2, '-r', label='cosine')
pylab.legend(loc='upper right')
pylab.ylim(-1.5, 2.0)
</snippet></ROW><ROW><id>19126053</id><snippet>setup.py</snippet></ROW><ROW><id>19126053</id><snippet>sys.version_info</snippet></ROW><ROW><id>19126053</id><snippet>if sys.version_info &lt; (2, 7);
    from ordereddict import OrderedDict
else:
    from collections import OrderedDict
</snippet></ROW><ROW><id>19126053</id><snippet>import sys
from setuptools import setup

extra_install_requires = []
if sys.version_info &lt; (2, 7):
    extra_install_requires.append('ordereddict&gt;=1.1')

setup(
    # ...
    install_requires = [...] + extra_install_requires,
    # ...
)
</snippet></ROW><ROW><id>19126053</id><snippet>try:
    from collections import OrderedDict
except ImportError:
    from ordereddict import OrderedDict
</snippet></ROW><ROW><id>19126053</id><snippet>version_info</snippet></ROW><ROW><id>19126053</id><snippet>extra_install_requires = []
try:
    from collections import OrderedDict
except ImportError:
    extra_install_requires.append('ordereddict&gt;=1.1')
</snippet></ROW><ROW><id>19126053</id><snippet>pip-2.5 install</snippet></ROW><ROW><id>19126053</id><snippet>ordereddict</snippet></ROW><ROW><id>19126053</id><snippet>python2.6 setup.py bdist_egg &amp;&amp; python2.7 setup.py bdist_egg</snippet></ROW><ROW><id>19126053</id><snippet>dist/Foo-0.1-py2.6.egg</snippet></ROW><ROW><id>19126053</id><snippet>dist/Foo-0.1-py2.7.egg</snippet></ROW><ROW><id>19126074</id><snippet>sqlite3</snippet></ROW><ROW><id>19126074</id><snippet>import json
import urllib
from datetime import datetime

data = urllib.urlopen('https://dl.dropboxusercontent.com/u/2684973/data_A.txt').read()
data = json.loads(data)

tweets = data['statuses']

def parse_created(timestamp):
    _, m, d, t, _, y = timestamp.split(' ')
    return datetime.strptime('%s %s %s %s' % (m, d, t, y), '%b %d %H:%M:%S %Y')

tweets_data = [(x['user']['name'], x['text'], parse_created(x['created_at']))
               for x in tweets]
</snippet></ROW><ROW><id>19126074</id><snippet>tweets_data</snippet></ROW><ROW><id>19126074</id><snippet>erik_tweets = [x for x in tweets
               if x['user']['name'] == 'Erik Allik']
</snippet></ROW><ROW><id>19126074</id><snippet>erik_tweets_before_today = [
    x for x in tweets
    if x['user']['name'] == 'Erik Allik'
    and x['created_at'].date() &lt; datetime.date.today()
]
</snippet></ROW><ROW><id>19126243</id><snippet>for tile in self.getAdjacentNodes(curNode.pos):
    if tile not in closedSet:
        tile.parent = curNode
        tile.cost = self.manHatDist(curNode.pos, end) + self.euclidDist(curNode.pos, current) + curNode.cost
        if tile not in openSet:
            openSet.add(tile)
            heapq.heappush(openHeap, (tile.cost,tile))
</snippet></ROW><ROW><id>19126243</id><snippet>self.manHatDist(curNode.pos, end) + self.euclidDist(curNode.pos, current) + curNode.cost
</snippet></ROW><ROW><id>19126243</id><snippet>curNode.cost
- self.manHatDist(curNode.pos, end)
+ self.euclidDist(curNode.pos, tile.pos)
+ self.manHatDist(tile.pos, end)
</snippet></ROW><ROW><id>19126243</id><snippet>tile</snippet></ROW><ROW><id>19126243</id><snippet>closedSet</snippet></ROW><ROW><id>19126243</id><snippet>tile</snippet></ROW><ROW><id>19126243</id><snippet>curNode</snippet></ROW><ROW><id>19126243</id><snippet>tile</snippet></ROW><ROW><id>19126243</id><snippet>openSet</snippet></ROW><ROW><id>19126243</id><snippet>tile</snippet></ROW><ROW><id>19126243</id><snippet>curNode</snippet></ROW><ROW><id>19126243</id><snippet>for tile in self.getAdjacentNodes(curNode.pos):
    if tile not in closedSet:
        cost = (curNode.cost
                - self.manHatDist(curNode.pos, end)
                + self.euclidDist(curNode.pos, tile.pos)
                + self.manHatDist(tile.pos, end))
        if tile not in openSet or cost &lt; tile.cost:
            tile.parent = curNode
            tile.cost = cost
            openSet.add(tile)
            heapq.heappush(openHeap, (cost,tile))
</snippet></ROW><ROW><id>19126243</id><snippet>self.euclidDist(curNode.pos, tile.pos)</snippet></ROW><ROW><id>19126243</id><snippet>euclidDist</snippet></ROW><ROW><id>19126286</id><snippet>__new__()</snippet></ROW><ROW><id>19126286</id><snippet>__init__()</snippet></ROW><ROW><id>19126286</id><snippet>nested()</snippet></ROW><ROW><id>19126286</id><snippet>__enter__()</snippet></ROW><ROW><id>19126286</id><snippet>__exit__()</snippet></ROW><ROW><id>19126286</id><snippet>RuntimeError</snippet></ROW><ROW><id>19126389</id><snippet>Image</snippet></ROW><ROW><id>19126389</id><snippet>PIL</snippet></ROW><ROW><id>19126389</id><snippet>Image</snippet></ROW><ROW><id>19126389</id><snippet>import Image
</snippet></ROW><ROW><id>19126389</id><snippet>from PIL import Image
</snippet></ROW><ROW><id>19126389</id><snippet>qrcode/image/pil.py</snippet></ROW><ROW><id>19126473</id><snippet>&lt;VirtualHost \*:[0-9]*&gt;(?:.(?!&lt;/VirtualHost))*?ServerName +desired\.dev(?:(?!&lt;/VirtualHost).)*?&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>19126493</id><snippet>foo</snippet></ROW><ROW><id>19126493</id><snippet>-f, --foo</snippet></ROW><ROW><id>19126493</id><snippet>'bar', '--foo'</snippet></ROW><ROW><id>19126493</id><snippet>'bar'</snippet></ROW><ROW><id>19126493</id><snippet>-</snippet></ROW><ROW><id>19126566</id><snippet>def print_full(x):
    pd.set_option('display.max_rows', len(x))
    print(x)
    pd.reset_option('display.max_rows')
</snippet></ROW><ROW><id>19126566</id><snippet>.table-striped</snippet></ROW><ROW><id>19126679</id><snippet>client = config['client']</snippet></ROW><ROW><id>19126679</id><snippet>client = paramiko.SSHClient()</snippet></ROW><ROW><id>19126811</id><snippet>latex</snippet></ROW><ROW><id>19126811</id><snippet>long_frac_ratio</snippet></ROW><ROW><id>19126811</id><snippet>1/b*a</snippet></ROW><ROW><id>19126811</id><snippet>a/b</snippet></ROW><ROW><id>19126811</id><snippet>In [31]: latex(p__s_alpha, long_frac_ratio=1)
Out[31]: '\\frac{1}{k} \\prod_{i=1}^{O} a_{0}'
</snippet></ROW><ROW><id>19126811</id><snippet>a/b</snippet></ROW><ROW><id>19126811</id><snippet>a*1/b</snippet></ROW><ROW><id>19126811</id><snippet>a/b</snippet></ROW><ROW><id>19126811</id><snippet>Mul(a, Pow(b, -1))</snippet></ROW><ROW><id>19126811</id><snippet>a*b**-1</snippet></ROW><ROW><id>19126811</id><snippet>LatexPrinter</snippet></ROW><ROW><id>19126811</id><snippet>sympy.printing.latex</snippet></ROW><ROW><id>19126811</id><snippet>_print_Mul</snippet></ROW><ROW><id>19126811</id><snippet>a/b</snippet></ROW><ROW><id>19126811</id><snippet>Mul</snippet></ROW><ROW><id>19126868</id><snippet>def it(l):
  for i in l:
    if isinstance(i, collections.Iterable):
      for item in it(i):
        yield item
    else:
      yield i
</snippet></ROW><ROW><id>19126868</id><snippet>yield from</snippet></ROW><ROW><id>19126933</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; s = '"Jens", "kasper", "Michael"' 
&gt;&gt;&gt; literal_eval(s)
('Jens', 'kasper', 'Michael')
&gt;&gt;&gt; list(literal_eval(s))
['Jens', 'kasper', 'Michael']
</snippet></ROW><ROW><id>19126997</id><snippet>IDL&gt; o = obj_new('IDLgrView')
IDL&gt; print, obj_valid(o, /get_heap_identifier)
           1
</snippet></ROW><ROW><id>19127016</id><snippet>fmt_str ='out {}'

for val in ["a", "b", 1]:
    print fmt_str.format(val)
</snippet></ROW><ROW><id>19127016</id><snippet>out a
out b
out 1
</snippet></ROW><ROW><id>19127016</id><snippet>%</snippet></ROW><ROW><id>19127016</id><snippet>format</snippet></ROW><ROW><id>19127016</id><snippet>foo</snippet></ROW><ROW><id>19127049</id><snippet>DataFrame.apply()</snippet></ROW><ROW><id>19127049</id><snippet>apply</snippet></ROW><ROW><id>19127049</id><snippet>DataFrame</snippet></ROW><ROW><id>19127049</id><snippet>In [1]: df = DataFrame(randn(10, 3))

In [2]: df
Out[2]:
       0      1      2
0  2.848 -1.536  0.234
1 -0.652 -1.169  0.101
2  0.957 -0.642  0.961
3  1.722 -2.552 -0.517
4 -0.258  1.810  1.332
5  0.362 -1.215  0.768
6  0.949 -0.384 -0.802
7  0.782 -1.140 -2.217
8 -0.410  0.882 -0.366
9  0.240  0.632 -1.374

In [3]: def standardize(x):
   ...:     y = x - x.mean()
   ...:     sd = x.std()
   ...:     return y / sd
   ...:

In [4]: df.apply(standardize)
Out[4]:
       0      1      2
0  2.074 -0.773  0.384
1 -1.234 -0.490  0.263
2  0.286 -0.085  1.047
3  1.009 -1.555 -0.300
4 -0.862  1.801  1.385
5 -0.276 -0.526  0.871
6  0.279  0.113 -0.559
7  0.121 -0.468 -1.848
8 -1.005  1.087 -0.162
9 -0.391  0.895 -1.081

In [5]: df.apply(standardize).mean()
Out[5]:
0    8.327e-17
1    2.220e-17
2    2.220e-17
dtype: float64

In [6]: df.apply(standardize).std()
Out[6]:
0    1
1    1
2    1
dtype: float64
</snippet></ROW><ROW><id>19127049</id><snippet>axis=1</snippet></ROW><ROW><id>19127049</id><snippet>In [8]: df.apply(standardize, axis=1).mean(1)
Out[8]:
0   -1.850e-17
1    7.401e-17
2   -3.701e-17
3   -2.544e-17
4    9.252e-17
5    3.701e-17
6   -3.701e-17
7   -1.110e-16
8   -3.701e-17
9    0.000e+00
dtype: float64
</snippet></ROW><ROW><id>19127049</id><snippet>x if x else y</snippet></ROW><ROW><id>19127049</id><snippet>DataFrame.where()</snippet></ROW><ROW><id>19127049</id><snippet>In [16]: df = DataFrame(randint(6, size=(10, 3)))

In [17]: df
Out[17]:
   0  1  2
0  2  1  4
1  2  4  0
2  4  4  4
3  4  3  2
4  2  4  3
5  1  1  3
6  2  0  2
7  1  4  4
8  2  4  5
9  2  1  2

In [19]: df.where(df, nan)
Out[19]:
   0   1   2
0  2   1   4
1  2   4 NaN
2  4   4   4
3  4   3   2
4  2   4   3
5  1   1   3
6  2 NaN   2
7  1   4   4
8  2   4   5
9  2   1   2
</snippet></ROW><ROW><id>19127106</id><snippet>with open("CountryCodes.csv",'r') as CountryCodes:
    genc = (line.split(',') for line in CountryCodes)

    c2n = dict((c_fields[0].strip(),c_fields[1].strip())
               for c_fields in genc)

with open("CountryData.csv",'r') as CountryData:
    gend = (line.split(',') for line in CountryData)

    the_data = [ (c2n[d_fields[0].strip()], # data_country_code
                  int(d_fields[1]),         # country_pop
                  d_fields[2].strip(),      # country_area
                  d_fields[3].strip(),      # country_gdp
                  d_fields[4].strip())      # country_lit_rate
                 for d_fields in gend ]

the_data.sort(key = lambda x: x[1])

p = 10
for i in xrange(0,len(the_data),p):
    if i:  raw_input("  Press ENTER to continue\n")
    print ('\n'.join("%-10s \t %-10s \t %-10s \t %-10s \t %s"
                     % el for el in the_data[i:i+p]) )
</snippet></ROW><ROW><id>19127106</id><snippet>with open("CountryCodes.csv",'r') as CountryCodes:
    genc = (line.split(',') for line in CountryCodes)
    lic = [map(str.strip,row) for row in genc]

def name_of(x,lic=lic):
  for code,name,continent in lic:
    if x==code:
      return name

with open("CountryData.csv",'r') as CountryData:
    gend = (line.split(',') for line in CountryData)

    the_data = [ (name_of(d_fields[0].strip()), # data_country_code
                  int(d_fields[1]),         # country_pop
                  d_fields[2].strip(),      # country_area
                  d_fields[3].strip(),      # country_gdp
                  d_fields[4].strip())      # country_lit_rate
                 for d_fields in gend ]
</snippet></ROW><ROW><id>19127155</id><snippet>parent = node()
fchild = node()
schild = node()
wchild = node()
cchild = node()
</snippet></ROW><ROW><id>19127155</id><snippet>wchild = parent
</snippet></ROW><ROW><id>19127155</id><snippet>wchild</snippet></ROW><ROW><id>19127155</id><snippet>parent</snippet></ROW><ROW><id>19127155</id><snippet>wchild</snippet></ROW><ROW><id>19127155</id><snippet>parent</snippet></ROW><ROW><id>19127155</id><snippet>parent = node()
wchild = node()
parent.farmer = True
wchild = parent
if wchild.farmer:
  print "Farmer"
</snippet></ROW><ROW><id>19127155</id><snippet>wchild.wolf = not wchild.wolf
</snippet></ROW><ROW><id>19127155</id><snippet>node</snippet></ROW><ROW><id>19127155</id><snippet>def copy(self, child_node):
  child_node.farmer = self.farmer
</snippet></ROW><ROW><id>19127155</id><snippet>parent = node()
child = node()
parent.farmer = True
parent.copy(child)
</snippet></ROW><ROW><id>19127155</id><snippet>child.farmer</snippet></ROW><ROW><id>19127155</id><snippet>True</snippet></ROW><ROW><id>19127155</id><snippet>parent.farmer</snippet></ROW><ROW><id>19127168</id><snippet>import functools

class Action(threading.Thread):
    def __init__(self, method, *args):
        threading.Thread.__init__(self)
        self.daemon = True
        self.method=method
        self.args=args
        self.queue=Queue.Queue()
    def run(self):
        self.queue.put(self.method(*self.args))
    def register_callback(self, tkroot, callback):
        # to be called by Tk's main thread,
        # will execute the callback in the Tk main loop
        try:
            result = self.queue.get_nowait()
        except:
            # set a timer, to check again for results within 100 milliseconds
            tkroot.after(100, functools.partial(self.register_callback,
                                                tkroot, callback))
        else:
            return callback(result)
</snippet></ROW><ROW><id>19127168</id><snippet>getHotFixes</snippet></ROW><ROW><id>19127168</id><snippet>getHotFixes</snippet></ROW><ROW><id>19127168</id><snippet>class Methods(object):
    ...
    def getHotFixes(self):
        try:
            startupinfo = subprocess.STARTUPINFO()
            startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
            myProcess = subprocess.Popen("wmic qfe get HotFixID, InstalledOn",
                stdout = subprocess.PIPE,
                stderr = subprocess.PIPE,
                startupinfo = startupinfo)
            out, error = myProcess.communicate()
            full_list = out.splitlines()
            result = ""
            for item in full_list:
                if item != "" and item != " ":
                result += "%s \n" % item

            out_number = len(result.splitlines()) - 1
            return "There Are %s Microsoft HotFixes Updates \n\n%s" % (out_number , result)
        except:
            return "ERROR :Could'nt get HotFixes"
</snippet></ROW><ROW><id>19127168</id><snippet>MainWindow</snippet></ROW><ROW><id>19127168</id><snippet>getHotFixes</snippet></ROW><ROW><id>19127168</id><snippet>register_callback</snippet></ROW><ROW><id>19127168</id><snippet>start()</snippet></ROW><ROW><id>19127168</id><snippet>class MainWindow(object):
    def __init__(self):
        self.root = Tk()
        ...
        def openHotFixes():
            disableAllButtons(self)
            action = Action(self.methods.getHotFixes)
            action.register_callback(self.root, openHotFixesDone)
            action.start()

        def openHotFixesDone(result):
            self.textLabelString.set("Microsoft Hotfixes")
            self.textBox.config(state=NORMAL)
            self.textBox.delete("1.0",END)
            self.textBox.insert(INSERT,result)
            self.textBox.config(state=DISABLED)
            enableAllButtons(self)
</snippet></ROW><ROW><id>19127214</id><snippet>for number in scoreList:
    sum = sum + scoreList
</snippet></ROW><ROW><id>19127214</id><snippet>number</snippet></ROW><ROW><id>19127214</id><snippet>scoreList</snippet></ROW><ROW><id>19127214</id><snippet>for number in scoreList:
    sum = sum + number
</snippet></ROW><ROW><id>19127214</id><snippet>sum</snippet></ROW><ROW><id>19127214</id><snippet>TypeError: unsupported operand type(s) for +: 'int' and 'list'</snippet></ROW><ROW><id>19127214</id><snippet>sum</snippet></ROW><ROW><id>19127214</id><snippet>total_score = sum(scoreList)
</snippet></ROW><ROW><id>19127275</id><snippet>self.setCacheMode(QtGui.QGraphicsView.CacheBackground)</snippet></ROW><ROW><id>19127351</id><snippet> data={
    'name': 'z103.5 Drive at 5 Streetmix - '+now.strftime("%Y%m%d"),
    'tags-0-tag': 'remix',
    'tags-1-tag': 'radio',
    'tags-2-tag': 'hits',
    'description': 'Daily weekday uploads of the latest drive at 5 music hits'
 }
 r = requests.post(postUrl,files=files,data=data)
</snippet></ROW><ROW><id>19127532</id><snippet>c.execute('DROP TABLE IF EXISTS _data')
c.execute('CREATE TABLE _data (Tag, Word)')
for query in c.execute('SELECT Tags, Title FROM data'):
    tags = query[0].strip().split()
    words = wordpunct_tokenize(query[1])
    c.executemany('INSERT INTO _data (Tag, Word) VALUES(?, ?)',
                  itertools.product(tags, words))
c.commit()
</snippet></ROW><ROW><id>19127532</id><snippet>ORDER BY</snippet></ROW><ROW><id>19127532</id><snippet>Tag, Word</snippet></ROW><ROW><id>19127532</id><snippet>Word, Tag</snippet></ROW><ROW><id>19127532</id><snippet>tag_count</snippet></ROW><ROW><id>19127532</id><snippet>GROUP BY</snippet></ROW><ROW><id>19127532</id><snippet>c.execute('''INSERT INTO pair_count 
             SELECT Tag, Word, COUNT(*) FROM _data GROUP BY Tag, Word''')
</snippet></ROW><ROW><id>19127661</id><snippet>&lt;a href="http://mylink.com" target="_blank"&gt;Link&lt;/a&gt;</snippet></ROW><ROW><id>19127688</id><snippet>#!/usr/bin/python

import os, csv, sys, Tkinter, tkFileDialog as fd

# stop tinker shell from opening as only needed for file dialog
root = Tkinter.Tk()
root.withdraw()

def crop_file(in_path):
    # read file into memory
    file_obj = open(in_path, 'rb')
    reader = csv.reader(file_obj, delimiter='\t')
    data = []
    for row in reader:
        if not row or not any(row):
            break #stop at empty row
        else:
            data.append(row)
    file_obj.close()

    print 'Found', len(data), 'rows of data without empty lines.'
    conf = raw_input('delete remaining lines? (Y|N): ').upper()[0]

    if conf == 'Y':
        # write data to file
        file_obj = open(in_path, 'wb')
        writer = csv.writer(file_obj)
        writer.writerows(data)
        file_obj.close

def main():
    in_path = None
    prog_name = sys.argv[0]

    # check if in_path are inlcuded as cmd line args...
    if len(sys.argv) &gt; 1:
        in_path = sys.argv[1]
        if not os.path.exists(in_path):
            print 'Usage:', prog_name, '[file_path&gt;]'
            print 'cannot find the file provided for file_path:\n', in_path
            sys.exit("Error - invalid excel_file_path arg")
    else:
        try:
            # set current working directory to user's my documents folder
            os.chdir(os.path.join(os.getenv('userprofile'),'documents'))
        except:
            pass

    # ask user for path to file...
    while not in_path:
        print "Please select the file to read data from ..."
        try:
            in_path = fd.askopenfilename()
        except:
            print 'Error selecting file.'
        if not in_path:
            cont = raw_input('Do you want to continue? (Y|N): ').upper()[0]
            if cont == 'N':
                sys.exit("Error - unable to select input file")

    crop_file(in_path)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19127706</id><snippet>icloset</snippet></ROW><ROW><id>19127706</id><snippet>on</snippet></ROW><ROW><id>19127706</id><snippet>date_key</snippet></ROW><ROW><id>19127706</id><snippet>user_uuid</snippet></ROW><ROW><id>19127706</id><snippet>icloset</snippet></ROW><ROW><id>19127706</id><snippet>definedRIDs.join(icloset.reset_index(),
                 on=['date_key','user_uuid'])
</snippet></ROW><ROW><id>19127706</id><snippet>on</snippet></ROW><ROW><id>19127814</id><snippet>str.split()</snippet></ROW><ROW><id>19127814</id><snippet>&gt;&gt;&gt; my_name = "Hello&lt;split&gt;my&lt;split&gt;name&lt;split&gt;is&lt;split&gt;Max"
&gt;&gt;&gt; 
&gt;&gt;&gt; for s in my_name.split('&lt;split&gt;'):
...     print s
... 
Hello
my
name
is
Max
</snippet></ROW><ROW><id>19127814</id><snippet>str.replace()</snippet></ROW><ROW><id>19127814</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; my_name.replace('&lt;split&gt;', os.linesep)
'Hello\nmy\nname\nis\nMax'
</snippet></ROW><ROW><id>19127814</id><snippet>&gt;&gt;&gt; os.linesep.join(my_name.split('&lt;split&gt;'))
'Hello\nmy\nname\nis\nMax'
</snippet></ROW><ROW><id>19127923</id><snippet>pycairo</snippet></ROW><ROW><id>19127923</id><snippet>pip</snippet></ROW><ROW><id>19127923</id><snippet>Install Procedure
-----------------
$ ./waf --help     # shows available waf options
$ ./waf configure  # use --prefix and --libdir if necessary
                   # --prefix=/usr --libdir=/usr/lib64  for Fedora 64-bit
$ ./waf build
$ ./waf install

Use
$ python3 ./waf ...
if you have python2 and python3 installed, and the default is python 2.
</snippet></ROW><ROW><id>19127923</id><snippet>pip</snippet></ROW><ROW><id>19127923</id><snippet>$ pip install --download=. pycairo
Downloading/unpacking pycairo
  Downloading pycairo-1.10.0.tar.bz2 (246kB): 246kB downloaded
$ tar xf pycairo-1.10.0.tar.bz2
$ cd pycairo-1.10.0
$ python ./waf etc.
</snippet></ROW><ROW><id>19127923</id><snippet>configure</snippet></ROW><ROW><id>19127923</id><snippet>--prefix=$VIRTUAL_ENV</snippet></ROW><ROW><id>19127923</id><snippet>PYTHON</snippet></ROW><ROW><id>19127923</id><snippet>cairocffi</snippet></ROW><ROW><id>19128015</id><snippet>composite_redirect_window</snippet></ROW><ROW><id>19128015</id><snippet>composite_name_window_pixmap</snippet></ROW><ROW><id>19128021</id><snippet>__dict__</snippet></ROW><ROW><id>19128021</id><snippet>_sa_instance_state</snippet></ROW><ROW><id>19128021</id><snippet>Session</snippet></ROW><ROW><id>19128021</id><snippet># 1. only load individual columns - loading simple tuples instead 
# of full ORM objects with identity tracking.  these tuples can be
# used directly in a dict comprehension
dimensionMap = dict(
    connection.session.query(Dimension.businessKey, Dimension.primarySyntheticKey)
)

# 2. For bulk inserts, use Table.insert() call with
# multiparams in chunks
buf = []
for row in sheet.allrows():
    dimensionId = dimensionMap[row[0]]
    metric = row[1]

    buf.append({"dimensionId": dimensionId, "metric": metric})

    if len(buf == 20000):
        connection.session.execute(Fact.__table__.insert(), params=buf)
        buf[:] = []

connection.session.execute(Fact.__table__.insert(), params=buf)
sys.stdout.write('All Done')
</snippet></ROW><ROW><id>19128053</id><snippet>for unit, statement in reader:
    print unit
</snippet></ROW><ROW><id>19128053</id><snippet>reader</snippet></ROW><ROW><id>19128053</id><snippet>Links.csv</snippet></ROW><ROW><id>19128053</id><snippet>with</snippet></ROW><ROW><id>19128053</id><snippet>with</snippet></ROW><ROW><id>19128053</id><snippet>Link Statements.csv</snippet></ROW><ROW><id>19128053</id><snippet>with</snippet></ROW><ROW><id>19128053</id><snippet>data</snippet></ROW><ROW><id>19128053</id><snippet>reader</snippet></ROW><ROW><id>19128053</id><snippet>csv.reader</snippet></ROW><ROW><id>19128053</id><snippet>sorted</snippet></ROW><ROW><id>19128053</id><snippet>data = list(csv.reader(open('Link Statements.csv'),delimiter=','))
</snippet></ROW><ROW><id>19128053</id><snippet>Link Statements.csv</snippet></ROW><ROW><id>19128053</id><snippet>with</snippet></ROW><ROW><id>19128053</id><snippet>sortedlist</snippet></ROW><ROW><id>19128053</id><snippet>print</snippet></ROW><ROW><id>19128053</id><snippet>Link Statements.csv</snippet></ROW><ROW><id>19128053</id><snippet>data = csv.reader(open('Link Statements.csv'),delimiter=',')
sortedlist = sorted(data, key=operator.itemgetter(0), reverse=True)
for item in sortedlist:
    print item
</snippet></ROW><ROW><id>19128053</id><snippet>['  RCT-6', 'Establish LOS UHF MCR link MPP01 at 14336 Kbps to 1/6.']
['  RCT-6', 'Establish SIPRNET link SIPRPP01 at 8192 Kbps to 1/6.']
['  RCT-6', 'Establish NIPRNET link NIPRPP02 at 4096 Kbps to 2/6.']
['  RCT-6', 'Establish BSPE link BSPEPP03 at 472 Kbps to 1/10.']
['  RCT-6', 'Terminate NIPRNET link NIPRZP01 at 8192 Kbps from MEB.']
['  RCT-6', 'Terminate SIPRNET link SIPRZP01 at 4096 Kbps from MEB.']
['  MEB', 'Establish NIPRNET link NIPRZP01 at 8192 Kbps to RCT-6.']
['  MEB', 'Establish SIPRNET link SIPRZP01 at 4096 Kbps to RCT-6.']
['  3/6', 'Establish NIPRNET link SIPRPP03 at 4096 Kbps to 1/10.']
['  2/6', 'Terminate NIPRNET link NIPRPP02 at 4096 Kbps from RCT-6.']
['  2/6', 'Terminate DPV0 link DPV0PP04 at 472 Kbps from 1/10.']
['  1/6', 'Terminate LOS UHF MCR link MPP01 at 14336 Kbps from RCT-6.']
['  1/6', 'Terminate SIPRNET link SIPRPP01 at 8192 Kbps from RCT-6.']
['  1/6', 'Establish SIPRNET link SIPRPP04 at 8192 Kbps to 1/3.']
['  1/6', 'Establish NIPRNET link NIPRPP03 at 8192 Kbps to 1/10.']
['  1/3', 'Terminate SIPRNET link SIPRPP04 at 8192 Kbps from 1/6.']
['  1/10', 'Terminate BSPE link BSPEPP03 at 472 Kbps from RCT-6.']
['  1/10', 'Establish DPV0 link DPV0PP04 at 472 Kbps to 2/6.']
['  1/10', 'Terminate NIPRNET link NIPRPP03 at 8192 Kbps from 1/6.']
['  1/10', 'Terminate NIPRNET link SIPRPP03 at 4096 Kbps from 3/6.']
</snippet></ROW><ROW><id>19128053</id><snippet>sorted</snippet></ROW><ROW><id>19128062</id><snippet>import difflib

lines1 = '''
dog
cat
bird
buffalo
gophers
hound
horse
'''.strip().splitlines()

lines2 = '''
cat
dog
bird
buffalo
gopher
horse
mouse
'''.strip().splitlines()

# Changes:
# swapped positions of cat and dog
# changed gophers to gopher
# removed hound
# added mouse

for line in difflib.unified_diff(lines1, lines2, fromfile='file1', tofile='file2', lineterm=''):
    print line
</snippet></ROW><ROW><id>19128062</id><snippet>--- file1
+++ file2
@@ -1,7 +1,7 @@
+cat
 dog
-cat
 bird
 buffalo
-gophers
-hound
+gopher
 horse
+mouse
</snippet></ROW><ROW><id>19128062</id><snippet>for line in difflib.unified_diff(lines1, lines2, fromfile='file1', tofile='file2', lineterm='', n=0):
    print line
</snippet></ROW><ROW><id>19128062</id><snippet>--- file1
+++ file2
@@ -0,0 +1 @@
+cat
@@ -2 +2,0 @@
-cat
@@ -5,2 +5 @@
-gophers
-hound
+gopher
@@ -7,0 +7 @@
+mouse
</snippet></ROW><ROW><id>19128062</id><snippet>for line in difflib.unified_diff(lines1, lines2, fromfile='file1', tofile='file2', lineterm='', n=0):
    for prefix in ('---', '+++', '@@'):
        if line.startswith(prefix):
            break
    else:
        print line
</snippet></ROW><ROW><id>19128062</id><snippet>+cat
-cat
-gophers
-hound
+gopher
+mouse
</snippet></ROW><ROW><id>19128062</id><snippet>diff = difflib.unified_diff(lines1, lines2, fromfile='file1', tofile='file2', lineterm='', n=0)
lines = list(diff)[2:]
added = [line[1:] for line in lines if line[0] == '+']
removed = [line[1:] for line in lines if line[0] == '-']

print 'additions:'
for line in added:
    print line
print
print 'additions, ignoring position'
for line in added:
    if line not in removed:
        print line
</snippet></ROW><ROW><id>19128062</id><snippet>additions:
cat
gopher
mouse

additions, ignoring position:
gopher
mouse
</snippet></ROW><ROW><id>19128073</id><snippet>p.children.append()</snippet></ROW><ROW><id>19128073</id><snippet>File "/Users/classic/dev/sqlalchemy/lib/sqlalchemy/orm/session.py", line 1183, in _autoflush
  self.flush()
</snippet></ROW><ROW><id>19128073</id><snippet>a.child = some_persistent_child</snippet></ROW><ROW><id>19128073</id><snippet>a</snippet></ROW><ROW><id>19128073</id><snippet>parent_assocs</snippet></ROW><ROW><id>19128073</id><snippet>Child</snippet></ROW><ROW><id>19128073</id><snippet>Association</snippet></ROW><ROW><id>19128073</id><snippet>with session.no_autoflush:
    p.children.append(a)
</snippet></ROW><ROW><id>19128073</id><snippet>a</snippet></ROW><ROW><id>19128073</id><snippet>Parent</snippet></ROW><ROW><id>19128075</id><snippet>for</snippet></ROW><ROW><id>19128075</id><snippet>read</snippet></ROW><ROW><id>19128075</id><snippet>with</snippet></ROW><ROW><id>19128075</id><snippet>re.search()</snippet></ROW><ROW><id>19128075</id><snippet>\d+:\d+</snippet></ROW><ROW><id>19128075</id><snippet>\d+\/\d+\/d+</snippet></ROW><ROW><id>19128075</id><snippet>/</snippet></ROW><ROW><id>19128075</id><snippet>import re
with open("old_text.txt", "r") as oldfile, open("new_text.txt", "w") as new_file:
    for line in old_file:
        # This will match if this pattern is anywhere in the line
        if re.search("\d+:\d+", line) is not None:
            line = ""
        # This will match if this pattern is anywhere in the line
        if re.search("\d+\/\d+\/d+", line) is not None:
            line = ""
        new_file.write(line)
</snippet></ROW><ROW><id>19128075</id><snippet>re.match()</snippet></ROW><ROW><id>19128075</id><snippet>old_file</snippet></ROW><ROW><id>19128075</id><snippet>new_file</snippet></ROW><ROW><id>19128075</id><snippet>old_file</snippet></ROW><ROW><id>19128178</id><snippet>import base64


response = requests.put(url, data={'insertUpload': base64.b64encode(data)}, files=files, ...)
</snippet></ROW><ROW><id>19128178</id><snippet>data</snippet></ROW><ROW><id>19128178</id><snippet>data</snippet></ROW><ROW><id>19128178</id><snippet>with open('mydata.csv', 'rb') as fd:
     b64data = base64.b64encode(fd.read())

files = {'file': ('mydata.csv', b64data, 'application/octet-stream')}
requests.put(...)  # everything here is the same as what you did
</snippet></ROW><ROW><id>19128178</id><snippet>print(base64.b64encode('line\n'))
# =&gt; bGluZQo=
print(base64.b64encode('line\nline\n'))
# =&gt; bGluZQpsaW5lCg==
</snippet></ROW><ROW><id>19128205</id><snippet>print x
</snippet></ROW><ROW><id>19128297</id><snippet>len(board)</snippet></ROW><ROW><id>19128297</id><snippet>len(board[0])</snippet></ROW><ROW><id>19128297</id><snippet>&gt;&gt;&gt; board = [['A', 'N', 'T', 'T'], ['X', 'S', 'O', 'B']]
&gt;&gt;&gt; tuple('NO') in zip(*board)
False
&gt;&gt;&gt; tuple('NS') in zip(*board)
True
</snippet></ROW><ROW><id>19128459</id><snippet>data = [[4,5],[4,7]]
search = 5
found = false
for sublist in data:
    if search in sublist:
        print("there", sublist)
        found = true
if found == false:
    print("not there")
    print(data)
</snippet></ROW><ROW><id>19128525</id><snippet>temp=input("Please choose an option: ")
try:
    if temp == ("1"):
        fc=input("Fahrenheit: ")
        fer(int(fc))
    elif temp == ("2"):
        cf=input("Celsius: ")
        cel(int(cf))
    else:
        print("It looks like you input a value that wasn't 1 or 2!")
except ValueError:
    print("It looks like you input a value that wasn't a number!")
</snippet></ROW><ROW><id>19128703</id><snippet>def fake_data(n):

    # xy coordinates for an n-by-n grid
    grid = np.indices((n,n),dtype=np.float32).reshape(2,-1).T

    # interpolated coordinates
    xy_i = grid.copy()
    # not monotonically increasing
    np.random.shuffle(xy_i)

    # values
    z = np.random.rand(n**2)

    # input coordinates
    xy = grid.copy()
    # not regularly gridded 
    xy += np.random.rand(*xy_i.shape)*0.25

    # pick n random points to use
    inc = np.random.choice(np.arange(n**2),(n,),replace=False)
    xy = grid[inc,:]
    z = z[inc]

    return xy, z, xy_i
</snippet></ROW><ROW><id>19128732</id><snippet>def select(lst, *indices):
    return (lst[i] for i in indices)
</snippet></ROW><ROW><id>19128732</id><snippet>&gt;&gt;&gt; def select(lst, *indices):
...     return (lst[i] for i in indices)
...
&gt;&gt;&gt; L = range(0,101,10)
&gt;&gt;&gt; a, b = select(L, 2, 5)
&gt;&gt;&gt; a, b
(20, 50)
</snippet></ROW><ROW><id>19128732</id><snippet>def select(lst, indices):
    return (lst[i] for i in indices)
</snippet></ROW><ROW><id>19128732</id><snippet>select(L, [2, 5])
</snippet></ROW><ROW><id>19128752</id><snippet>number = long(v)
</snippet></ROW><ROW><id>19129087</id><snippet>&gt;&gt;&gt; xs = [1, 2, 3, 4, 5, 6, 7]
&gt;&gt;&gt; [x for i in range(3) for x in xs[i::3]]
[1, 4, 7, 2, 5, 3, 6]
</snippet></ROW><ROW><id>19129243</id><snippet>import numpy as np
import pandas as pd
original_data = np.array([[1,0,0,10,1530,0.1,2,-49.0756686364,163.856504545],
                 [1,0,0,10,8250,0.1,2,-84.7795213636,264.205363636],
[1,0,0,10,20370,0.1,2,-245.585863636,662.467227273],
[1,0,0,10,33030,0.1,2,-290.468136364,1107.19936364],
[1,0,0,10,47970,0.1,2,-308.668681818,1584.18090909],
[1,0,0,10,63090,0.1,2,-244.954186364,1932.43454545],
[1,0,0,10,93090,0.1,2,-9.5453963636,1794.01636364],
[1.5,0.5,0,11,1530,0.1,2,-36.28640875,136.9883],
[1.5,0.5,0,11,8250,0.1,2,-83.2991125,231.58275],
[1.5,0.5,0,11,20370,0.1,2,-227.956625,757.027125],
[1.5,0.5,0,11,33030,0.1,2,-301.754875,1045.55275],
[1.5,0.5,0,11,47970,0.1,2,-291.517625,1534.11625],
[1.5,0.5,0,11,63090,0.1,2,-257.7195,1904.9475],
[1.5,0.5,0,11,930901,0,0,10,63090,0.1,2,-244.954186364,1932.43454545]

df =pd.DataFrame(original_data,  columns=['X', 'Y', 'Z', '#','Fr', 'Er', 'V', 'R', 'I'])
df1 = df.pivot_table(['R', 'I'], ['X', 'Y', 'Z', '#','Er', 'V'], 'Fr')
df1.to_csv('test.dat', sep='\t', header=True, index=True)
</snippet></ROW><ROW><id>19129284</id><snippet>def fetchAndReplace(dictionary,key,newValue):
    if key in dictionary:
        dictionary[key]=newValue
        return dictionary
    else:
        return 'Nothing' 

di=  {'x':3,'y':2}

print fetchAndReplace(di, 'z', 6)    
print fetchAndReplace(di, 'x', 6)
</snippet></ROW><ROW><id>19129284</id><snippet>Nothing
{'y': 2, 'x': 6}
</snippet></ROW><ROW><id>19129287</id><snippet>    var data = google.visualization.arrayToDataTable({{!net_data}});
</snippet></ROW><ROW><id>19129339</id><snippet>"w"</snippet></ROW><ROW><id>19129339</id><snippet>"r"</snippet></ROW><ROW><id>19129339</id><snippet>"w"</snippet></ROW><ROW><id>19129339</id><snippet>"w+"</snippet></ROW><ROW><id>19129339</id><snippet>"r+"</snippet></ROW><ROW><id>19129339</id><snippet>f.seek(0)</snippet></ROW><ROW><id>19129339</id><snippet>for line in f</snippet></ROW><ROW><id>19129339</id><snippet>for line in new_lines</snippet></ROW><ROW><id>19129376</id><snippet>from django.conf import settings
...
class NFLTeam(models.Model):
...
    def save(self, *args, **kwargs):
        if settings.NFL_NO_SAVE is True:
             return
</snippet></ROW><ROW><id>19129507</id><snippet>&gt;&gt;&gt; training_set=[((1, 0, 0), 1), ((1, 0, 1), 1), ((1, 1, 0), 1), ((1, 1, 1), 0), [(1, 1, 10), 1]]
&gt;&gt;&gt; map(lambda t: t[-1], training_set)
[1, 1, 1, 0, 1]
</snippet></ROW><ROW><id>19129507</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; item=itemgetter(-1)
&gt;&gt;&gt; map(item, training_set)
[1, 1, 1, 0, 1]
</snippet></ROW><ROW><id>19129507</id><snippet>&gt;&gt;&gt; zip(*training_set)[1]
(1, 1, 1, 0, 1)
</snippet></ROW><ROW><id>19129717</id><snippet>{% load placeholder_tags %}
</snippet></ROW><ROW><id>19129717</id><snippet>&lt;app_name&gt;/templatetags
&lt;app_name&gt;/models.py
</snippet></ROW><ROW><id>19129915</id><snippet>In [1]: p = pd.Panel(d)

In [2]: p.swapaxes()
Out[2]: 
&lt;class 'pandas.core.panel.Panel'&gt;
Dimensions: 2 (items) x 2 (major_axis) x 2 (minor_axis)
Items axis: item1 to item2
Major_axis axis: major0 to major1
Minor_axis axis: minor0 to minor1
</snippet></ROW><ROW><id>19129915</id><snippet>from_dict</snippet></ROW><ROW><id>19129915</id><snippet>In [11]: pd.Panel.from_dict(d, orient='minor')  # default orient is items
Out[11]: 
&lt;class 'pandas.core.panel.Panel'&gt;
Dimensions: 2 (items) x 2 (major_axis) x 2 (minor_axis)
Items axis: major0 to major1
Major_axis axis: minor0 to minor1
Minor_axis axis: item1 to item2
</snippet></ROW><ROW><id>19130112</id><snippet>    import math
    def is_number(s):
       try:
           float(s)
           return True
       except ValueError:
           return False
    filename = "123 3.34 9.91 p"
    val = filename.split(" ")
    for items in val:
       if is_number(items):
           if float(items) != math.floor(float(items)):
               print items
</snippet></ROW><ROW><id>19130115</id><snippet>deque.rotate</snippet></ROW><ROW><id>19130115</id><snippet>rotate_left</snippet></ROW><ROW><id>19130115</id><snippet>def rotate_left(nums):
    q = deque(nums)
    q.rotate(-1)
    return list(q)
</snippet></ROW><ROW><id>19130867</id><snippet>lines = []
for i in range(1,9):
  lines.append([str(2**j) for j in range(i)])
</snippet></ROW><ROW><id>19130867</id><snippet>b = len(lines[-1])
buffers = [len(x) for x in lines[-1]]
</snippet></ROW><ROW><id>19130867</id><snippet>for line in lines:
  l = len(line)
  line = [" "]*(b-len(line)) + line
</snippet></ROW><ROW><id>19130867</id><snippet>zip()</snippet></ROW><ROW><id>19130867</id><snippet>String.rjust()</snippet></ROW><ROW><id>19130867</id><snippet>  out = []
  for x,y in zip(line,buffers):
    out.append(x.rjust(y))
</snippet></ROW><ROW><id>19130867</id><snippet>array[::-1]</snippet></ROW><ROW><id>19130867</id><snippet>array[1:]</snippet></ROW><ROW><id>19130867</id><snippet>  print(" ".join(out+out[::-1][1:]))
</snippet></ROW><ROW><id>19130867</id><snippet>lines = []
for i in range(1,9):
  lines.append([str(2**j) for j in range(i)])

b = len(lines[-1])
buffers = [len(x) for x in lines[-1]]

for line in lines:
  l = len(line)
  line = [" "]*(b-len(line)) + line
  out = []
  for x,y in zip(line,buffers):
    out.append(x.rjust(y))
  print(" ".join(out+out[::-1][1:]))
</snippet></ROW><ROW><id>19130867</id><snippet>                   1                 
               1   2  1              
            1  2   4  2  1           
         1  2  4   8  4  2  1        
      1  2  4  8  16  8  4  2 1      
    1 2  4  8 16  32 16  8  4 2 1    
  1 2 4  8 16 32  64 32 16  8 4 2 1  
1 2 4 8 16 32 64 128 64 32 16 8 4 2 1
</snippet></ROW><ROW><id>19130879</id><snippet>def download(self):
    self.text.SetLabel('Downloading...')
    threading.Thread(None, target=self.getfile.download_file(self.res_html))
</snippet></ROW><ROW><id>19130879</id><snippet>start()</snippet></ROW><ROW><id>19130879</id><snippet>Thread</snippet></ROW><ROW><id>19130879</id><snippet>target</snippet></ROW><ROW><id>19130879</id><snippet>target</snippet></ROW><ROW><id>19130879</id><snippet>target=self.getfile.download_file(self.res_html)
</snippet></ROW><ROW><id>19130879</id><snippet>Thread</snippet></ROW><ROW><id>19130879</id><snippet>target</snippet></ROW><ROW><id>19130879</id><snippet>lambda</snippet></ROW><ROW><id>19130879</id><snippet>target=lambda: self.getfile.download_file(self.res_html)
</snippet></ROW><ROW><id>19130879</id><snippet>functools.partial</snippet></ROW><ROW><id>19130879</id><snippet>target=partial(self.getfile.download_file, self.res_html)
</snippet></ROW><ROW><id>19130879</id><snippet>None</snippet></ROW><ROW><id>19130879</id><snippet>Thread</snippet></ROW><ROW><id>19130879</id><snippet>worker = threading.Thread(target=lambda: self.getfile.download_file(self.res_html))
worker.start()
</snippet></ROW><ROW><id>19131011</id><snippet>-A INPUT -j REJECT -reject-with icmp-host-prohibited
</snippet></ROW><ROW><id>19131046</id><snippet>def add(a,b):
    return a + b
</snippet></ROW><ROW><id>19131046</id><snippet>add(3,5)
</snippet></ROW><ROW><id>19131046</id><snippet>answer = add(4,7)
</snippet></ROW><ROW><id>19131060</id><snippet>res = []
for contour in contours:
    contour = cv2.approxPolyDP(contour,10,True)
    print "--------------------------"
    print contour
    print "--------------------------"
    res.append(contour)
print np.vstack(res)
</snippet></ROW><ROW><id>19131156</id><snippet>ax.plot(np.linspace(0, 2*np.pi, 100), np.ones(100)*5, color='r', linestyle='-')
</snippet></ROW><ROW><id>19131156</id><snippet>np.linspace(0, 2*np.pi, 100)</snippet></ROW><ROW><id>19131156</id><snippet>np.ones(100)*5</snippet></ROW><ROW><id>19131156</id><snippet>plot()</snippet></ROW><ROW><id>19131156</id><snippet>.lines.Line2D object</snippet></ROW><ROW><id>19131156</id><snippet>.collections.PathCollection object</snippet></ROW><ROW><id>19131156</id><snippet>ax.scatter(1, 0, s=100000, facecolors='none')
</snippet></ROW><ROW><id>19131156</id><snippet>patch</snippet></ROW><ROW><id>19131156</id><snippet>ax.bar(0, 5, 2*np.pi, bottom=0.0, facecolor='None') #need to modified the edge lines or won't look right
</snippet></ROW><ROW><id>19131479</id><snippet>gomaxprocs(1)</snippet></ROW><ROW><id>19131479</id><snippet>import threading
import Queue

def main():
    c1 = Queue.Queue(maxsize=0)
    c2 = Queue.Queue(maxsize=0)
    quit = Queue.Queue(maxsize=0)

    def func1():
        for i in range(10):
            c1.put(i)
        quit.put(0)

    threading.Thread(target=func1).start()

    def func2():
        for i in range(2):
            c2.put(i)

    threading.Thread(target=func2).start()

    combined = Queue.Queue(maxsize=0)

    def listen_and_forward(queue):
        while True:
            combined.put((queue, queue.get()))

    t = threading.Thread(target=listen_and_forward, args=(c1,))
    t.daemon = True
    t.start()
    t = threading.Thread(target=listen_and_forward, args=(c2,))
    t.daemon = True
    t.start()
    t = threading.Thread(target=listen_and_forward, args=(quit,))
    t.daemon = True
    t.start()

    while True:
        which, message = combined.get()
        if which is c1:
            print 'Received value from c1'
        elif which is c2:
            print 'Received value from c2'
        elif which is quit:
            print 'Received value from quit'
            return
main()
</snippet></ROW><ROW><id>19131479</id><snippet>import threading
import Queue

def select(*queues):
    combined = Queue.Queue(maxsize=0)
    def listen_and_forward(queue):
        while True:
            combined.put((queue, queue.get()))
    for queue in queues:
        t = threading.Thread(target=listen_and_forward, args=(queue,))
        t.daemon = True
        t.start()
    while True:
        yield combined.get()

def main():

    c1 = Queue.Queue(maxsize=0)
    c2 = Queue.Queue(maxsize=0)
    quit = Queue.Queue(maxsize=0)

    def func1():
        for i in range(10):
            c1.put(i)
        quit.put(0)

    threading.Thread(target=func1).start()

    def func2():
        for i in range(2):
            c2.put(i)

    threading.Thread(target=func2).start()

    for which, msg in select(c1, c2, quit):
        if which is c1:
            print 'Received value from c1'
        elif which is c2:
            print 'Received value from c2'
        elif which is quit:
            print 'Received value from quit'
            return
main()
</snippet></ROW><ROW><id>19131584</id><snippet>BundleModel</snippet></ROW><ROW><id>19131584</id><snippet>product_vals.p_created</snippet></ROW><ROW><id>19131584</id><snippet>product_vals.p_updated</snippet></ROW><ROW><id>19131699</id><snippet>&lt;input type="button" id="subbut"&gt; 
</snippet></ROW><ROW><id>19131699</id><snippet>var data={"name":"Hola"};
$(document).ready(function(){
    $('#subbut').click(function(){
        $.ajax({
            url: '/test',
            type: 'POST',
            data: data,
            dataType: 'json',
            success: function(data,status){
                alert(data.name);
                alert("Data" + data +"status"+status);
            }
       });
       return false;
    });
});
</snippet></ROW><ROW><id>19131699</id><snippet>response.headers = {'Content-Type': 'application/json; charset=utf-8'}
self.response.out.write(output)
</snippet></ROW><ROW><id>19131810</id><snippet>import os
import time

source = 'D:\\backup_original'

target_dir = 'E:\\backup_copied'

target = target_dir + os.sep + time.strftime('%Y%m%d%H%M%S') + '.zip'

zip_command = "7za a {0} {1}".format(target, ''.join(source))

if os.system(zip_command) == 0:
    print('Success')
else:
    print('Backup Failed')
</snippet></ROW><ROW><id>19132044</id><snippet>offset</snippet></ROW><ROW><id>19132044</id><snippet>longLength</snippet></ROW><ROW><id>19132044</id><snippet>for offset in range(longLength):
    subInt = longInt // 10**(longLength - offset - 1) % 10**(shortLength)
</snippet></ROW><ROW><id>19132242</id><snippet>databasy.ui.utils.executeSequentially = function (functions) {
    if (functions.length == 0) {
        return;
    }
    setTimeout(function() {
        functions[0]();
        functions.splice(0, 1);
        databasy.ui.utils.executeSequentially(functions);
    }, 0);
};
</snippet></ROW><ROW><id>19132413</id><snippet>from django.conf import settings
</snippet></ROW><ROW><id>19132413</id><snippet>urlpatterns</snippet></ROW><ROW><id>19132413</id><snippet>urlpatterns =+ patterns('',
</snippet></ROW><ROW><id>19132413</id><snippet>urlpatterns += patterns('',
</snippet></ROW><ROW><id>19132413</id><snippet>=+</snippet></ROW><ROW><id>19132413</id><snippet>urlpattern</snippet></ROW><ROW><id>19132413</id><snippet>urlpattern</snippet></ROW><ROW><id>19132413</id><snippet>urlpattern</snippet></ROW><ROW><id>19132413</id><snippet>+</snippet></ROW><ROW><id>19132413</id><snippet>urlpatterns = patterns('',
    url(r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve', { 'document_root': settings.STATIC_ROOT, }),
    url(r'^media/(?P&lt;path&gt;.*)$', 'django.views.static.serve', { 'document_root': settings.MEDIA_ROOT, }),
)
</snippet></ROW><ROW><id>19132426</id><snippet>IpConfigNew</snippet></ROW><ROW><id>19132426</id><snippet>#Calls on function IpStore in order to store the new IP    
Button(IpConfig,text = 'Done', command = IpStore).place(x=150,y=30)
IpConfig.mainloop()
</snippet></ROW><ROW><id>19132426</id><snippet>def IpConfigNew():
    #Creates a Toplevel window instead of a new "main" window in a new loop
    IpConfig = Toplevel(app) 

    ...

    #IpConfig.mainloop()
    app.wait_window(IpConfig)
</snippet></ROW><ROW><id>19132494</id><snippet>type()</snippet></ROW><ROW><id>19132494</id><snippet>&gt;&gt;&gt; foo = type('Foo', (), {})()
&gt;&gt;&gt; foo
&lt;__main__.Foo object at 0x100499f50&gt;
</snippet></ROW><ROW><id>19132677</id><snippet>def Convert_toFullStop(text):
    return text.replace('_', '.')
</snippet></ROW><ROW><id>19132677</id><snippet>print</snippet></ROW><ROW><id>19132791</id><snippet>cmap</snippet></ROW><ROW><id>19132791</id><snippet>fill_between</snippet></ROW><ROW><id>19132791</id><snippet>fill()</snippet></ROW><ROW><id>19132791</id><snippet>cmap</snippet></ROW><ROW><id>19132791</id><snippet>fill</snippet></ROW><ROW><id>19132791</id><snippet># create some sample data
x = np.linspace(0, 1)
y = np.sin(4 * np.pi * x) * np.exp(-5 * x) * 120

fig, ax = plt.subplots()

# plot only the outline of the polygon, and capture the result
poly, = ax.fill(x, y, facecolor='none')

# get the extent of the axes
xmin, xmax = ax.get_xlim()
ymin, ymax = ax.get_ylim()

# create a dummy image
img_data = np.arange(ymin,ymax,(ymax-ymin)/100.)
img_data = img_data.reshape(img_data.size,1)

# plot and clip the image
im = ax.imshow(img_data, aspect='auto', origin='lower', cmap=plt.cm.Reds_r, extent=[xmin,xmax,ymin,ymax], vmin=y.min(), vmax=30.)

im.set_clip_path(poly)
</snippet></ROW><ROW><id>19132791</id><snippet>fill</snippet></ROW><ROW><id>19132808</id><snippet>app_name = "quick scraper"</snippet></ROW><ROW><id>19132808</id><snippet>class Config(object):
    def __init__(self):
        self.app_name = "quick scraper"

config = Config()
</snippet></ROW><ROW><id>19132808</id><snippet>logger = logging.getLogger(config.app_name)
</snippet></ROW><ROW><id>19132808</id><snippet>__init__</snippet></ROW><ROW><id>19132808</id><snippet>class Main(object):
    def __init__(self, config):
        self.config = config

        self.logger = logging.getLogger(self.config.app_name)

        ...

        self.app_library = AppHelper(self.config)
        self.app_library.dlAndSaveWebpage(url)
</snippet></ROW><ROW><id>19132871</id><snippet>csv.reader</snippet></ROW><ROW><id>19132871</id><snippet>zip</snippet></ROW><ROW><id>19132871</id><snippet>import csv

with open("AAPL.csv", "rb") as f:
    CSV = csv.reader(f)

    header = next(CSV) # read the header row
    column_data = zip(*CSV) # read data and arrange by columns instead of by rows

# do stuff with column_lists
</snippet></ROW><ROW><id>19132871</id><snippet>CSV</snippet></ROW><ROW><id>19132983</id><snippet>regex</snippet></ROW><ROW><id>19132983</id><snippet>str.splitlines</snippet></ROW><ROW><id>19132983</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = """1. eat, food
   7am
2. brush, teeth
   8am
3. crack, eggs
   1pm"""
&gt;&gt;&gt; lis = [re.sub(r'^\d+\.\s*', '', x).strip() for x in s.splitlines()]
&gt;&gt;&gt; it = iter(lis)
&gt;&gt;&gt; for x in it:
    print '{!r}'.format(x + '\n' + next(it))


'eat, food\n7am'
'brush, teeth\n8am'
'crack, eggs\n1pm'
</snippet></ROW><ROW><id>19133610</id><snippet>from gi.repository import Gtk

class Application(object):
    def __init__(self):
        self.window = Gtk.Window(Gtk.WindowType.TOPLEVEL)
        self.window.set_title("Alignment Editor")
        self.window.set_default_size(200, 150)
        self.window.connect("delete_event", lambda w,e: Gtk.main_quit())

        self.row = ["a", "b"]
        self.store = Gtk.ListStore(*[str]*len(self.row)) #create len(word) columns
        self.store.append(self.row)

        cra = Gtk.CellRendererText()
        twcolumna = Gtk.TreeViewColumn("Column a")
        twcolumna.pack_start(cra, True)
        twcolumna.add_attribute(cra, 'text', 0)

        crb = Gtk.CellRendererText()
        twcolumnb = Gtk.TreeViewColumn("Column b")
        twcolumnb.pack_start(crb, True)
        twcolumnb.add_attribute(crb, 'text', 1)

        self.treeview = Gtk.TreeView(self.store)

        self.treeview.append_column(twcolumna)
        self.treeview.append_column(twcolumnb)

        self.treeview.set_reorderable(True)
        self.window.add(self.treeview)
        self.window.show_all()

if __name__ == "__main__":
    Application()
    Gtk.main()
</snippet></ROW><ROW><id>19133781</id><snippet>&gt;&gt;&gt; dict.fromkeys("abi")
{'a': None, 'i': None, 'b': None}
&gt;&gt;&gt; dict.fromkeys("iba")
{'i': None, 'a': None, 'b': None}
</snippet></ROW><ROW><id>19133781</id><snippet>&gt;&gt;&gt; dict.fromkeys("abi")
{'a': None, 'b': None, 'i': None}
</snippet></ROW><ROW><id>19133781</id><snippet>&gt;&gt;&gt; dict.fromkeys("abi")
{'b': None, 'a': None, 'i': None}
</snippet></ROW><ROW><id>19133793</id><snippet>hash()</snippet></ROW><ROW><id>19133793</id><snippet>int</snippet></ROW><ROW><id>19133793</id><snippet>sys.maxint</snippet></ROW><ROW><id>19133866</id><snippet>print Pass.fetchone()[0]
</snippet></ROW><ROW><id>19133866</id><snippet>result</snippet></ROW><ROW><id>19133866</id><snippet>Pass</snippet></ROW><ROW><id>19133866</id><snippet>newElement</snippet></ROW><ROW><id>19133866</id><snippet>NewElement</snippet></ROW><ROW><id>19133942</id><snippet>x_list = [x]*10
y_list = [y]*10
</snippet></ROW><ROW><id>19134190</id><snippet>li.insert</snippet></ROW><ROW><id>19134190</id><snippet>li</snippet></ROW><ROW><id>19134190</id><snippet>s = "foo bar baz"
l = s.split()
l == ['foo', 'bar', 'baz']
l.insert(2, "qux")  
l == ['foo', 'bar', 'qux', 'baz']
</snippet></ROW><ROW><id>19134339</id><snippet>    ax = a3.Axes3D(pl.figure())
</snippet></ROW><ROW><id>19134339</id><snippet>ax</snippet></ROW><ROW><id>19134339</id><snippet>WEdge</snippet></ROW><ROW><id>19134339</id><snippet>def init(self, ..., ax=None):
    self.ax = ax if ax else a3.Axes3D(pl.figure())

we1 = WEdge()
we2 = WEdge(ax=we1.ax)
</snippet></ROW><ROW><id>19134339</id><snippet>ax = a3.Axes3D(pl.figure())
we1 = WEdge(ax)
we2 = WEdge(ax)
</snippet></ROW><ROW><id>19134339</id><snippet>ax</snippet></ROW><ROW><id>19134425</id><snippet>generation</snippet></ROW><ROW><id>19134425</id><snippet>class generation:
    def __init__ (self, number, container=None):
        self.n = number
        self.cont = [] if container is None else container
</snippet></ROW><ROW><id>19134440</id><snippet>/usr/bin/sudo /bin/date ...</snippet></ROW><ROW><id>19134440</id><snippet>import subprocess

p = subprocess.Popen('sudo -S date --set ...', shell=True, stdin=subprocess.PIPE)
p.communicate(input='&lt;your password&gt;')
</snippet></ROW><ROW><id>19134440</id><snippet>p = subprocess.Popen('sudo -S date --set ...', shell=True,
                     stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
out, err = p.communicate(input='&lt;your password&gt;')
print "\n".join("out: " + x for x in out.split('\n'))
print "\n".join("err: " + x for x in err.split('\n'))
</snippet></ROW><ROW><id>19134440</id><snippet>out</snippet></ROW><ROW><id>19134440</id><snippet>err</snippet></ROW><ROW><id>19134528</id><snippet>BlogSitemap.items()</snippet></ROW><ROW><id>19134528</id><snippet>Article.objects</snippet></ROW><ROW><id>19134528</id><snippet>ModelManager</snippet></ROW><ROW><id>19134528</id><snippet>Article.object.all()</snippet></ROW><ROW><id>19134528</id><snippet>Article.objects.filter(someconditionhere)</snippet></ROW><ROW><id>19134858</id><snippet>main()</snippet></ROW><ROW><id>19134858</id><snippet>import itertools
from multiprocessing import Pool

def func(g, h, i):
    return g + h + i

def helper(args):
    args2 = args[0] + (args[1],)
    return func(*args2)

def main():
    pool = Pool(processes=4)
    result = pool.map(helper,itertools.izip(itertools.repeat((2, 3)), range(10)))
    print result

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19134991</id><snippet>Search</snippet></ROW><ROW><id>19134991</id><snippet>&gt;&gt;&gt; Search().aStar((0,0), (2,2))
Traceback (most recent call last):
  ...
  File "q19128695.py", line 25, in aStar
    openSet.remove(curNode)
KeyError: &lt;__main__.Node instance at 0x104895518&gt;
</snippet></ROW><ROW><id>19134991</id><snippet>Node</snippet></ROW><ROW><id>19134991</id><snippet>__repr__</snippet></ROW><ROW><id>19134991</id><snippet>Node</snippet></ROW><ROW><id>19134991</id><snippet>def __repr__(self):
    return 'Node({0.value}, {0.pos}, {0.cost})'.format(self)
</snippet></ROW><ROW><id>19134991</id><snippet>&gt;&gt;&gt; Search().aStar((0,0), (2,2))
Traceback (most recent call last):
  ...
  File "q19128695.py", line 25, in aStar
    openSet.remove(curNode)
KeyError: Node(East, (1, 2), 3.41421356237)
</snippet></ROW><ROW><id>19134991</id><snippet>&gt;&gt;&gt; import pdb
&gt;&gt;&gt; pdb.pm()
&gt; q19128695.py(25)aStar()
-&gt; openSet.remove(curNode)
(Pdb) openSet
set([Node(North, (2, -1), 6.0), Node(East, (2, 2), 4.65028153987), 
     Node(West, (-1, 1), 5.0), Node(North, (0, -1), 5.0),
     Node(South, (1, 3), 6.65028153987), Node(South, (0, 3), 6.0), 
     Node(East, (3, 0), 6.0), Node(West, (-1, 0), 5.0),
     Node(North, (1, -1), 5.0), Node(East, (3, 1), 6.65028153987),
     Node(West, (-1, 2), 6.0)])
(Pdb) closedSet
set([Node(0, (0, 0), 4), Node(South, (2, 1), 3.41421356237),
     Node(East, (1, 1), 3.0), Node(South, (0, 1), 3.0),
     Node(East, (2, 0), 3.0), Node(East, (1, 0), 3.0),
     Node(East, (1, 2), 3.41421356237), Node(South, (0, 2), 3.0)])
(Pdb) curNode
Node(East, (1, 2), 3.41421356237)
(Pdb) curNode in closedSet
True
</snippet></ROW><ROW><id>19134991</id><snippet>openSet</snippet></ROW><ROW><id>19134991</id><snippet>openHeap</snippet></ROW><ROW><id>19134991</id><snippet>openHeap</snippet></ROW><ROW><id>19134991</id><snippet>openSet</snippet></ROW><ROW><id>19134991</id><snippet>if t not in openSet or cost &lt; t.cost:
    t.parent = curNode
    t.cost = cost
    openSet.add(t)
    heapq.heappush(openHeap, (cost,t))
</snippet></ROW><ROW><id>19134991</id><snippet>(cost, t)</snippet></ROW><ROW><id>19134991</id><snippet>Node</snippet></ROW><ROW><id>19134991</id><snippet>__lt__</snippet></ROW><ROW><id>19134991</id><snippet>__gt__</snippet></ROW><ROW><id>19134991</id><snippet>t</snippet></ROW><ROW><id>19134991</id><snippet>heapq.heappush(openHeap, t)
</snippet></ROW><ROW><id>19134991</id><snippet>openHeap.append((curNode.cost,curNode))
while openSet:
    curNode = heapq.heappop(openHeap)[1]
</snippet></ROW><ROW><id>19134991</id><snippet>openHeap = [curNode]
while openSet:
    curNode = heapq.heappop(openHeap)
</snippet></ROW><ROW><id>19134991</id><snippet>t</snippet></ROW><ROW><id>19134991</id><snippet>openSet</snippet></ROW><ROW><id>19134991</id><snippet>t_open = t in openSet
if not t_open or cost &lt; t.cost:
    t.parent = curNode
    t.cost = cost
    if t_open:
        heapq.heapify(openHeap)
    else:
        openSet.add(t)
        heapq.heappush(openHeap, t)
</snippet></ROW><ROW><id>19134991</id><snippet>(Pdb) curNode
Node(East, (1, 2), 3.41421356237)
</snippet></ROW><ROW><id>19134991</id><snippet>3.41421356237</snippet></ROW><ROW><id>19134991</id><snippet>    cost = (curNode.cost
            - self.manHatDist(curNode.pos, end) 
            + self.euclidDist(curNode.pos, current)
            + self.manHatDist(t.pos, end))
</snippet></ROW><ROW><id>19134991</id><snippet>            + self.euclidDist(curNode.pos, t.pos)
</snippet></ROW><ROW><id>19134991</id><snippet>&gt;&gt;&gt; Search().aStar((0,0), (2,2))
['North', 'North', 'East', 'East']
</snippet></ROW><ROW><id>19134991</id><snippet>Search().aStar(...)</snippet></ROW><ROW><id>19134991</id><snippet>curNode.cost - self.manHatDist(curNode.pos, end)</snippet></ROW><ROW><id>19134991</id><snippet>cost</snippet></ROW><ROW><id>19135088</id><snippet>choice</snippet></ROW><ROW><id>19135088</id><snippet>choice</snippet></ROW><ROW><id>19135088</id><snippet>obj</snippet></ROW><ROW><id>19135098</id><snippet>,</snippet></ROW><ROW><id>19135098</id><snippet>print</snippet></ROW><ROW><id>19135098</id><snippet>,</snippet></ROW><ROW><id>19135098</id><snippet>#!/usr/bin/env python
import sys
class Logger(object):
    def __init__(self, stream):
        self.stream = stream

    def write(self, msg):
        self.stream.write(msg)

    def flush(self):
        pass

if __name__ == '__main__':
    sys.stdout = Logger(sys.stdout)
    print 'User says hello!',
    print 'Goodbye, cruel world!'
</snippet></ROW><ROW><id>19135098</id><snippet>sys.stdout</snippet></ROW><ROW><id>19135098</id><snippet>flush</snippet></ROW><ROW><id>19135182</id><snippet>with open(filename,'r+') as fr,open(filename,'r+') as fw:
    for line in fr:
        x = line.find('order')
        fw.write(line if x==-1
                 else line[0:x]+'\n' if '\n' in line
                 else line[0:x])
    fw.truncate()
</snippet></ROW><ROW><id>19135182</id><snippet>import re

r = re.compile('(.*?)(?:order.*?$|\Z)',
               re.MULTILINE|re.DOTALL)

with open(filename,'r+') as f:
    x = f.read()
    f.seek(0,0)
    f.write(''.join(r.findall(x)))
    f.truncate() 
</snippet></ROW><ROW><id>19135812</id><snippet>Element is not currently interactable</snippet></ROW><ROW><id>19135812</id><snippet>hack</snippet></ROW><ROW><id>19135812</id><snippet>JS</snippet></ROW><ROW><id>19135812</id><snippet>id ita_form_location_RouteLanguageTextBox_0</snippet></ROW><ROW><id>19135812</id><snippet>Enter routing code</snippet></ROW><ROW><id>19135812</id><snippet>airport city or city name</snippet></ROW><ROW><id>19135812</id><snippet>find_element_by_id</snippet></ROW><ROW><id>19135812</id><snippet>css selector</snippet></ROW><ROW><id>19135812</id><snippet>xpath</snippet></ROW><ROW><id>19135812</id><snippet>elements</snippet></ROW><ROW><id>19135812</id><snippet>visible</snippet></ROW><ROW><id>19135812</id><snippet>elements</snippet></ROW><ROW><id>19135812</id><snippet>id</snippet></ROW><ROW><id>19135812</id><snippet>element</snippet></ROW><ROW><id>19135812</id><snippet>selenium</snippet></ROW><ROW><id>19135812</id><snippet>elements</snippet></ROW><ROW><id>19135812</id><snippet>from selenium import webdriver
import selenium.webdriver.support.ui as ui

driver = webdriver.Firefox()
driver.get("http://matrix.itasoftware.com/")
#click on the multi tab
tab = driver.find_element_by_id("ita_layout_TabContainer_0_tablist_ita_form_multislice_MultiSliceForm_0").click()
#click on the advanced routes
advanced_routing=ui.WebDriverWait(driver, 10).until(
     lambda driver : driver.find_element_by_id("sites_matrix_layout_RouteLanguageToggleLink_1")
)
advanced_routing.click()
#get all visible elements with id like ita_form_location_RouteLanguageTextBox. its similar to regex ita_form_location_RouteLanguageTextBox.*
element = ui.WebDriverWait(driver, 10).until(
        lambda driver : driver.find_elements_by_css_selector("[id*=ita_form_multislice_MultiSliceRow] [id*=ita_form_location_RouteLanguageTextBox]")
)
element[0].send_keys("foo")
element[1].send_keys("bar")

import time
time.sleep(20)
</snippet></ROW><ROW><id>19135936</id><snippet>from django.contrib import auth

def clean_username(username):
    url = urlresolvers.reverse('your_view_name', kwargs=dict(username=username))
    match = urlresolvers.resolve(url)
    if match.view_name != 'your_view_name':
        raise ValidationError(_(
            u'This username does not create a valid URL.  Please choose another'))

    if auth.get_user_model().objects.filter(username__iexact=username):
        raise ValidationError(_(u'There is already a user with this username'))

    return username
</snippet></ROW><ROW><id>19135941</id><snippet>Count('created__day')</snippet></ROW><ROW><id>19135941</id><snippet>created__day</snippet></ROW><ROW><id>19135941</id><snippet>Count</snippet></ROW><ROW><id>19135941</id><snippet>.extra(...)</snippet></ROW><ROW><id>19135941</id><snippet>DATE()</snippet></ROW><ROW><id>19135941</id><snippet>Count</snippet></ROW><ROW><id>19135975</id><snippet>Window &gt; Preferences &gt; General &gt; Workspace</snippet></ROW><ROW><id>19136004</id><snippet>import sys

if len(sys.argv) != 2:
    print 'Add an input file as parameter'
    sys.exit(1)

print 'opening file: %s' % sys.argv[1]

with open(sys.argv[1]) as input, open('output', 'w+') as output:
    for line in input:
        if line is not None:
            if line == '\n':
                pass
            elif 'OK' in line:
                pass
            else:
                new_line = line.split(' ', 7)
                output.write('%s,%s,%s,%s / %s\n' % (new_line[1], new_line[2], new_line[3], new_line[4], new_line[6]))
                # just for checking purposes let's print the lines
                print '%s,%s,%s,%s / %s' % (new_line[1], new_line[2], new_line[3], new_line[4], new_line[6])
</snippet></ROW><ROW><id>19136029</id><snippet>logstdout</snippet></ROW><ROW><id>19136029</id><snippet>from scrapy import log

print 'PRINT OUTPUT BEFORE'
log.start(loglevel='DEBUG', logstdout=False)
print 'PRINT OUTPUT AFTER'
</snippet></ROW><ROW><id>19136029</id><snippet>PRINT OUTPUT BEFORE
PRINT OUTPUT AFTER
</snippet></ROW><ROW><id>19136200</id><snippet>SELECT setval('django_content_type_id_seq', (SELECT MAX(id) FROM django_content_type));
</snippet></ROW><ROW><id>19136318</id><snippet>post_save</snippet></ROW><ROW><id>19136332</id><snippet>sys.argv</snippet></ROW><ROW><id>19136332</id><snippet>[sys.argv[2]]</snippet></ROW><ROW><id>19136332</id><snippet>['test_out.jpg']</snippet></ROW><ROW><id>19136332</id><snippet>fn = sys.argv[2:] and sys.argv[2] or 'test_out.jpg'
</snippet></ROW><ROW><id>19136332</id><snippet>fn = sys.argv[2] if sys.argv[2:] else 'test_out.jpg'
</snippet></ROW><ROW><id>19136594</id><snippet>def accumulate(lis):
    total = 0
    for item in lis:
        total += item
        yield total


&gt;&gt;&gt; list(accumulate(range(5)))
[0, 1, 3, 6, 10]
</snippet></ROW><ROW><id>19136594</id><snippet>itertools.accumulate</snippet></ROW><ROW><id>19136737</id><snippet>class MRWord(MRJob):
    count = []
</snippet></ROW><ROW><id>19136737</id><snippet>def mapper_init_def(self):
   self.count = {}
</snippet></ROW><ROW><id>19137513</id><snippet>IndentationError</snippet></ROW><ROW><id>19137513</id><snippet>rb</snippet></ROW><ROW><id>19137513</id><snippet>newline=""</snippet></ROW><ROW><id>19137513</id><snippet>with open(epi_csv_file, newline="") as csvfile:
    myReader = csv.reader(csvfile, delimiter=',', skipinitialspace=True)
    for row in myReader:
        print(row)
</snippet></ROW><ROW><id>19137513</id><snippet>['zbcdexc', '0011222', 'Ryan', 'Luke']
</snippet></ROW><ROW><id>19137593</id><snippet>itertools.count()</snippet></ROW><ROW><id>19137593</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>19137593</id><snippet>import csv
from itertools import count
from collections import defaultdict
from functools import partial

counts = defaultdict(partial(count, 1))  # create a new count starting at 1

with open(output_csv_filename, 'wb') as outfile:
    writer = csv.writer(outfile)
    for row in your_list_of_rows:
        row[9] = next(counts[row[2]])  # get the next count value
        writer.writerow(row)
</snippet></ROW><ROW><id>19137593</id><snippet>row[9]</snippet></ROW><ROW><id>19137593</id><snippet>row[2]</snippet></ROW><ROW><id>19137593</id><snippet>&gt;&gt;&gt; from itertools import count
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; counts = defaultdict(partial(count, 1))
&gt;&gt;&gt; next(counts['foo'])
1
&gt;&gt;&gt; next(counts['foo'])
2
&gt;&gt;&gt; next(counts['bar'])
1
&gt;&gt;&gt; next(counts['foo'])
3
</snippet></ROW><ROW><id>19137593</id><snippet>1-20,data1,Unique data1,4,data2,14,data3.65,data4,data5,1,141.85,data data data
1-20,data1,Unique data1,4,data2,14,data3.65,data4,data5,2,140.81,data data data
1-20,data1,Unique data1,4,data2,14,data3.65,data4,data5,3,131.86,data data data
1-30,data1,Unique data2,4,data2,12,data3.30,data4,data5,1,163.85,data data data
1-30,data1,Unique data2,4,data2,12,data3.30,data4,data5,2,162.93,data data data
1-30,data1,Unique data2,4,data2,12,data3.30,data4,data5,3,161.23,data data data
1-30,data1,Unique data2,4,data2,12,data3.30,data4,data5,4,159.83,data data data
1-30,data1,Unique data2,4,data2,12,data3.30,data4,data5,5,156.71,data data data
1-30,data1,Unique data2,4,data2,12,data3.30,data4,data5,6,154.96,data data data
1-30,data1,Unique data2,4,data2,12,data3.30,data4,data5,7,147.96,data data data
1-30,data1,Unique data2,4,data2,12,data3.30,data4,data5,8,140.09,data data data
1-50,data1,Unique data3,2,data2,16,data3.00,data4,data5,1,169.5,data data data
1-50,data1,Unique data3,2,data2,16,data3.00,data4,data5,2,165.2,data data data
1-50,data1,Unique data3,2,data2,16,data3.00,data4,data5,3,165.1,data data data
1-50,data1,Unique data3,2,data2,16,data3.00,data4,data5,4,159.8,data data data
</snippet></ROW><ROW><id>19137982</id><snippet>flag = fcntl.fcntl(MyStream.fileno(), fcntl.F_GETFL)
fcntl.fcntl(MyStream.fileno(), fcntl.F_SETFL, flag &amp; ~os.O_NONBLOCK)
</snippet></ROW><ROW><id>19138239</id><snippet>def test():
    res = ['x1','x2']
    A.&lt;res&gt; = BooleanPolynomialRing(len(res))
    return A
....: 
sage: test()
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
&lt;snip&gt;
IndexError: the number of names must equal the number of generators
</snippet></ROW><ROW><id>19138239</id><snippet>A.&lt;res&gt; ...</snippet></ROW><ROW><id>19138239</id><snippet>sage: preparse("A.&lt;res&gt; = BooleanPolynomialRing(len(res))")
"A = BooleanPolynomialRing(len(res), names=('res',)); (res,) = A._first_ngens(1)"
</snippet></ROW><ROW><id>19138239</id><snippet>sage: res = ['x','y']
sage: A.&lt;res&gt; = BooleanPolynomialRing(len(res))
&lt;snip&gt;
ValueError: variable names must be alphanumeric, but one is 'res[Integer(1)]' which is not.
</snippet></ROW><ROW><id>19138239</id><snippet>sage: res = [2,['x','y']]
sage: A = BooleanPolynomialRing(names=res[1])
sage: A
Boolean PolynomialRing in x, y
</snippet></ROW><ROW><id>19138239</id><snippet>sage: BooleanPolynomialRing?
</snippet></ROW><ROW><id>19138264</id><snippet>import re

with open("old_text.txt") as f:
   txt = f.read()
   new_txt=re.sub(r'(\bCourtney\b.*?)(\s*\Courtney\b\s*)','\1',txt,re.S)
</snippet></ROW><ROW><id>19138264</id><snippet>import re

name='Courtney'

with open("old_text.txt") as f:
   txt = f.read()
   new_txt=re.sub(r'(\b{}\b.*?)(\s*\{}\b\s*)'.format(name,name),'\1',txt,re.S)
</snippet></ROW><ROW><id>19138327</id><snippet>thread1.join()</snippet></ROW><ROW><id>19138327</id><snippet>thread1</snippet></ROW><ROW><id>19138327</id><snippet>wait_until_finished(thread1)</snippet></ROW><ROW><id>19138327</id><snippet>import time

def printer():
    for _ in range(3):
        print "hello"
        time.sleep(1.0)

thread = Thread(target=printer)
thread.start()
thread.join()
print "goodbye"
</snippet></ROW><ROW><id>19138327</id><snippet>hello
hello
hello
goodbye
</snippet></ROW><ROW><id>19138327</id><snippet>.join()</snippet></ROW><ROW><id>19138327</id><snippet>goodbye</snippet></ROW><ROW><id>19138327</id><snippet>hello</snippet></ROW><ROW><id>19138327</id><snippet>multiprocessing</snippet></ROW><ROW><id>19138327</id><snippet>threading</snippet></ROW><ROW><id>19138344</id><snippet>///PythonToOCV.h

#ifndef __PYTHONTOOCV_H_INCLUDED__
#define __PYTHONTOOCV_H_INCLUDED__

#include &lt;iostream&gt;
#include &lt;Python.h&gt;
#include &lt;boost/python.hpp&gt;
#include "numpy/ndarrayobject.h"
#include "opencv2/core/core.hpp"

/////////////////////////////////////////////////////////////////////////////
/// \brief Import Numpy array. Necessary to avoid PyArray_Check() to crash
void doImport( );

int failmsg( const char *fmt, ... );

static size_t REFCOUNT_OFFSET = ( size_t )&amp;((( PyObject* )0)-&gt;ob_refcnt ) +
( 0x12345678 != *( const size_t* )"\x78\x56\x34\x12\0\0\0\0\0" )*sizeof( int );

static inline PyObject* pyObjectFromRefcount( const int* refcount )
{
return ( PyObject* )(( size_t )refcount - REFCOUNT_OFFSET );
}

static inline int* refcountFromPyObject( const PyObject* obj )
{
return ( int* )(( size_t )obj + REFCOUNT_OFFSET );
}

class NumpyAllocator : public cv::MatAllocator
{
public:
NumpyAllocator( ) { }
~NumpyAllocator( ) { }

void allocate( int dims, const int* sizes, int type, int*&amp; refcount,
uchar*&amp; datastart, uchar*&amp; data, size_t* step );

void deallocate( int* refcount, uchar* datastart, uchar* data );
};


/////////////////////////////////////////////////////////////////////////////
/// \brief Convert a numpy array to a cv::Mat. This is used to import images
/// from Python.
/// This function is extracted from opencv/modules/python/src2/cv2.cpp
/// in OpenCV 2.4
int pyopencv_to( const PyObject* o, cv::Mat&amp; m, const char* name = "&lt;unknown&gt;", bool allowND=true );
#endif //__PYTHONTOOCV_H_INCLUDED__

///PythonToOCV.cpp

#include "PythonToOpenCV.h"

void doImport( )
{
    import_array( );
}

int failmsg( const char *fmt, ... )
{
    char str[1000];

    va_list ap;
    va_start( ap, fmt );
    vsnprintf( str, sizeof( str ), fmt, ap );
    va_end( ap );
    PyErr_SetString( PyExc_TypeError, str );
    return 0;
}

void NumpyAllocator::allocate( int dims, const int* sizes, int type, int*&amp; refcount, uchar*&amp; datastart, uchar*&amp; data, size_t* step )
{
    int depth = CV_MAT_DEPTH( type );
    int cn = CV_MAT_CN( type );
    const int f = ( int )( sizeof( size_t )/8 );
    int typenum = depth == CV_8U ? NPY_UBYTE : depth == CV_8S ? NPY_BYTE :
                  depth == CV_16U ? NPY_USHORT : depth == CV_16S ? NPY_SHORT :
                  depth == CV_32S ? NPY_INT : depth == CV_32F ? NPY_FLOAT :
                  depth == CV_64F ? NPY_DOUBLE : f*NPY_ULONGLONG + (f^1)*NPY_UINT;
    int i;
    npy_intp _sizes[CV_MAX_DIM+1];
    for( i = 0; i &lt; dims; i++ )
        _sizes[i] = sizes[i];
    if( cn &gt; 1 )
    {
    /*if( _sizes[dims-1] == 1 )
         _sizes[dims-1] = cn;
    else*/
        _sizes[dims++] = cn;
    }
    PyObject* o = PyArray_SimpleNew( dims, _sizes, typenum );
    if( !o )
    CV_Error_(CV_StsError, ("The numpy array of typenum=%d, ndims=%d can not be created", typenum, dims));
    refcount = refcountFromPyObject(o);
    npy_intp* _strides = PyArray_STRIDES(o);
    for( i = 0; i &lt; dims - (cn &gt; 1); i++ )
        step[i] = (size_t)_strides[i];
    datastart = data = (uchar*)PyArray_DATA(o);

}

void NumpyAllocator::deallocate( int* refcount, uchar* datastart, uchar* data )
{
    if( !refcount )
       return;
    PyObject* o = pyObjectFromRefcount(refcount);
    Py_INCREF(o);
    Py_DECREF(o);
}

// Declare the object
NumpyAllocator g_numpyAllocator;

int pyopencv_to(const PyObject* o, cv::Mat&amp; m, const char* name, bool allowND )
{
    // to avoid PyArray_Check() to crash even with valid array
    doImport( );

    if(!o || o == Py_None)
    {
        if( !m.data )
            m.allocator = &amp;g_numpyAllocator;
        return true;
    }

    if( !PyArray_Check(o) )
    {
        failmsg("%s is not a numpy array", name);
        return false;
    }

    // NPY_LONG (64 bit) is converted to CV_32S (32 bit)
    int typenum = PyArray_TYPE(o);
    int type = typenum == NPY_UBYTE ? CV_8U : typenum == NPY_BYTE ? CV_8S :
        typenum == NPY_USHORT ? CV_16U : typenum == NPY_SHORT ? CV_16S :
        typenum == NPY_INT || typenum == NPY_LONG ? CV_32S :
        typenum == NPY_FLOAT ? CV_32F :
        typenum == NPY_DOUBLE ? CV_64F : -1;

    if( type &lt; 0 )
    {
        failmsg("%s data type = %d is not supported", name, typenum);
        return false;
    }

    int ndims = PyArray_NDIM(o);
    if(ndims &gt;= CV_MAX_DIM)
    {
        failmsg("%s dimensionality (=%d) is too high", name, ndims);
        return false;
    }

    int size[CV_MAX_DIM+1];
    size_t step[CV_MAX_DIM+1], elemsize = CV_ELEM_SIZE1(type);
    const npy_intp* _sizes = PyArray_DIMS(o);
    const npy_intp* _strides = PyArray_STRIDES(o);
    bool transposed = false;

    for(int i = 0; i &lt; ndims; i++)
    {
        size[i] = (int)_sizes[i];
        step[i] = (size_t)_strides[i];
    }

    if( ndims == 0 || step[ndims-1] &gt; elemsize ) {
        size[ndims] = 1;
        step[ndims] = elemsize;
        ndims++;
    }

    if( ndims &gt;= 2 &amp;&amp; step[0] &lt; step[1] )
    {
        std::swap(size[0], size[1]);
        std::swap(step[0], step[1]);
        transposed = true;
    }

    if( ndims == 3 &amp;&amp; size[2] &lt;= CV_CN_MAX &amp;&amp; step[1] == elemsize*size[2] )
    {
        ndims--;
        type |= CV_MAKETYPE(0, size[2]);
    }

    if( ndims &gt; 2 &amp;&amp; !allowND )
    {
        failmsg("%s has more than 2 dimensions", name);
        return false;
    }

    m = cv::Mat(ndims, size, type, PyArray_DATA(o), step);

    if( m.data )
    {
        m.refcount = refcountFromPyObject(o);
        m.addref(); // protect the original numpy array from deallocation
        // (since Mat destructor will decrement the reference counter)
    };
    m.allocator = &amp;g_numpyAllocator;

    if( transposed )
    {
        cv::Mat tmp;
        tmp.allocator = &amp;g_numpyAllocator;
        transpose(m, tmp);
        m = tmp;
    }
    return true;
}
</snippet></ROW><ROW><id>19138344</id><snippet>/// fromPython.h

#ifndef __FROMPYTHON_H_INCLUDED__
#define __FROMPYTHON_H_INCLUDED__

#include "PythonToOCV.h"
#include &lt;boost/python.hpp&gt;

int fromPython( boost::python::object &amp;frame );
#endif //__FROMPYTHON_H_INCLUDED__



/// fromPython.cpp

#include "fromPython.h"

int fromPython( boost::python::object &amp;frame )
{
     cv::Mat image;
     // this is the function from modules/python/src2/cv2.cpp (the third parameter might be ArgInfo in later OpenCV versions)
     pyopencv_to( frame.ptr( ), image, "info", true );

     ///
     ///  HERE code using cv::Mat image          
     ///

     return 1;
} 
</snippet></ROW><ROW><id>19138344</id><snippet>#include "fromPython.h"
using namespace boost::python; 

/// This function needs to be included to pass PyObjects as numpy array ( http://mail.python.org/pipermail/cplusplus-sig/2006-September/011021.html )
void* extract_pyarray( PyObject* x )
{
    return PyObject_TypeCheck( x, &amp;PyArray_Type ) ? x : 0;
}

BOOST_PYTHON_MODULE( myWrapper )
{
     // This function needs to be included to pass PyObjects as numpy array ( http://mail.python.org/pipermail/cplusplus-sig/2006-September/011021.html )
     boost::python::converter::registry::insert( &amp;extract_pyarray, type_id&lt;PyArrayObject&gt;( ) ); 
     def fromPython( "fromPython", &amp;fromPython );
} 
</snippet></ROW><ROW><id>19138344</id><snippet>import myWrapper
import cv2 

def myFunct():
    cap = cv2.VideoCapture(0)
    while(1):
        ret,frame = cap.read()
        myWrapper.fromPython(frame)
</snippet></ROW><ROW><id>19138663</id><snippet>${{ total_paid.amount__sum }}</snippet></ROW><ROW><id>19138663</id><snippet>total_paid = Payment.objects.all().aggregate(Sum('amount')).get('amount__sum', 0.00)</snippet></ROW><ROW><id>19138823</id><snippet>SESSION_COOKIE_DOMAIN</snippet></ROW><ROW><id>19138823</id><snippet>None</snippet></ROW><ROW><id>19138944</id><snippet>class NestedDict(collections.OrderedDict):
    """Implementation of perl's autovivification feature."""
    def __getitem__(self, item):
        try:
            return dict.__getitem__(self, item)
        except KeyError:
            value = self[item] = type(self)()
            return value

def mergejsons(jsns):
 ##use auto vification Nested Dict
    op=nesteddict.NestedDict()
    for j in jsns:
        jdata=json.load(open(j))
        jname=j.split('.')[0][-2:]
        for commnkey,val in jdata.items():
            for k,v in val.items():
                if k!='commonkey':
                    op[commnkey][k][jname]=v
                if  op[commnkey].has_key('commonkey'):
                    continue
                else:
                    op[commnkey][k][jname]=v
</snippet></ROW><ROW><id>19138949</id><snippet>random.randint(1,100)</snippet></ROW><ROW><id>19138949</id><snippet>100 - randint(1,100)</snippet></ROW><ROW><id>19138949</id><snippet>self.move = random.randint(1,100)</snippet></ROW><ROW><id>19138949</id><snippet>self.life = (self.life + self.defense) - enemy.attack
enemy.life = (enemy.life + enemy.defense) - self.attack
</snippet></ROW><ROW><id>19139251</id><snippet>import logging
import logging.handlers
logger = logging.getLogger("my_logger")
logger.setLevel(logging.DEBUG)
handler = logging.handlers.SysLogHandler(
    facility=logging.handlers.SysLogHandler.LOG_DAEMON, address="/dev/log")
</snippet></ROW><ROW><id>19139264</id><snippet>global &lt;var_name&gt;</snippet></ROW><ROW><id>19139264</id><snippet>def drw_prs_tm(msg):
    global tm
    global prs

    tm = np.append(tm,t)
    prs = np.append(prs,s)

def print_end(msg):
    global tm
    global prs
    plt.plot(tm,prs,'k-')
</snippet></ROW><ROW><id>19139264</id><snippet>global</snippet></ROW><ROW><id>19139408</id><snippet>normed</snippet></ROW><ROW><id>19139408</id><snippet>#!/usr/bin/env python
import matplotlib.pyplot as plt
import numpy as np

# Generate random data
mu, sigma = 200, 25
x = mu + sigma*np.random.randn(10000)

# Create the histogram and normalize the counts to 1
hist, bins = np.histogram(x, bins = 50)
max_val = max(hist)
hist = [ float(n)/max_val for n in hist]

# Plot the resulting histogram
center = (bins[:-1]+bins[1:])/2
width = 0.7*(bins[1]-bins[0])
plt.bar(center, hist, align = 'center', width = width)
plt.show()
</snippet></ROW><ROW><id>19139783</id><snippet>str.splitlines()</snippet></ROW><ROW><id>19139783</id><snippet>\r</snippet></ROW><ROW><id>19139783</id><snippet>\n</snippet></ROW><ROW><id>19139783</id><snippet>&gt;&gt;&gt; sample = 'line 1\rline 2'
&gt;&gt;&gt; print sample
line 2
&gt;&gt;&gt; sample.splitlines()
['line 1', 'line 2']
&gt;&gt;&gt; print '\n'.join(sample.splitlines())
line 1
line 2
</snippet></ROW><ROW><id>19139880</id><snippet>c</snippet></ROW><ROW><id>19139880</id><snippet>use_colours = {"L": "red", "A": "green", "B": "blue"}
ax.scatter(a,b,c,c=[use_colours[x[0]] for x in d],s=50)
</snippet></ROW><ROW><id>19139992</id><snippet>select</snippet></ROW><ROW><id>19139992</id><snippet>import select

string = ''
while True:
  r, w, e = select.select([ child.stdout, sys.stdin ], [], [])
  if child.stdout in r:
    string += child.stdout.read()
  if sys.stdin in r:
    typed = sys.stdin.read()
    child.stdin.write(typed)
    string += typed
</snippet></ROW><ROW><id>19140049</id><snippet>itertools.takewhile</snippet></ROW><ROW><id>19140049</id><snippet> sum(x for x in itertools.takewhile(lambda n: n &lt; 4e6, fnFibonacci()) 
                if x % 2 == 0)
</snippet></ROW><ROW><id>19140142</id><snippet>functools.partial</snippet></ROW><ROW><id>19140142</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; def mult(a, b):
...     return a * b
...
&gt;&gt;&gt; doubler = partial(mult, 2)
&gt;&gt;&gt; doubler(4)
8
</snippet></ROW><ROW><id>19140142</id><snippet>function</snippet></ROW><ROW><id>19140142</id><snippet>partial</snippet></ROW><ROW><id>19140142</id><snippet>df['existingFeature'].apply(partial(function, "string"))
</snippet></ROW><ROW><id>19140505</id><snippet># global semaphore
sem = toro.BoundedSemaphore(5)

@gen.coroutine
def get(self):
    with (yield sem.acquire()):
        # do work
</snippet></ROW><ROW><id>19140510</id><snippet>itemData.encode()</snippet></ROW><ROW><id>19140510</id><snippet>    obj['itemData'] = str(self.itemData.encode())
</snippet></ROW><ROW><id>19140510</id><snippet>()</snippet></ROW><ROW><id>19140665</id><snippet>a*rand</snippet></ROW><ROW><id>19140665</id><snippet>rand</snippet></ROW><ROW><id>19140665</id><snippet>rand</snippet></ROW><ROW><id>19140665</id><snippet>rand</snippet></ROW><ROW><id>19140665</id><snippet>c</snippet></ROW><ROW><id>19140665</id><snippet>lcg</snippet></ROW><ROW><id>19140665</id><snippet>rand</snippet></ROW><ROW><id>19140665</id><snippet>numpy.random</snippet></ROW><ROW><id>19140734</id><snippet>class OrExpression:
    def __init__(self, left, right):
        self.left = left
        self.right = right

class EqualsExpression:
    def __init__(self, left, right):
        self.left = left
        self.right = right

class Literal:
    def __init__(self, value):
        self.value = value

class Variable:
    def __init__(self, name):
        self.name = name
</snippet></ROW><ROW><id>19140734</id><snippet>e = OrExpression(
    EqualsExpression(
        Variable("element"),
        Literal("Apple")
    ),
    OrExpression(
        EqualsExpression(
            Variable("element"),
            Literal("Orange")
        ),
        EqualsExpression(
            Variable("element"),
            Literal("Duck")
        )
    )
)
</snippet></ROW><ROW><id>19140734</id><snippet>eval</snippet></ROW><ROW><id>19140734</id><snippet>class OrExpression:
    def __init__(self, left, right):
        self.left = left
        self.right = right
    def eval(self, variables):
        return self.left.eval(variables) or self.right.eval(variables)

class EqualsExpression:
    def __init__(self, left, right):
        self.left = left
        self.right = right
    def eval(self, variables):
        return self.left.eval(variables) == self.right.eval(variables)

class Literal:
    def __init__(self, value):
        self.value = value
    def eval(self, variables):
        return self.value

class Variable:
    def __init__(self, name):
        self.name = name
    def eval(self, variables):
        return variables[self.name]
</snippet></ROW><ROW><id>19140734</id><snippet>eval</snippet></ROW><ROW><id>19140734</id><snippet>element</snippet></ROW><ROW><id>19140734</id><snippet>print e.eval({"element": "Apple"})
print e.eval({"element": "Duck"})
print e.eval({"element": "Banana"})
</snippet></ROW><ROW><id>19140734</id><snippet>True
True
False
</snippet></ROW><ROW><id>19140734</id><snippet>value</snippet></ROW><ROW><id>19140734</id><snippet>eval</snippet></ROW><ROW><id>19140734</id><snippet>class Node:
    def __init__(self, value=None, *children):
        self.value = value
        self.children = children

def evalTree(t, variables):
    if t.value == "Or":
        return evalTree(t.children[0], variables) or evalTree(t.children[1], variables)
    elif t.value == "Equals":
        return evalTree(t.children[0], variables) == evalTree(t.children[1], variables)
    elif t.value == "Literal":
        return t.children[0].value
    elif t.value == "Variable":
        name = t.children[0].value
    else:
        raise Exception("Unrecognized node type")

t = Node("Or",
    Node("Equals",
        Node("Variable", Node("element")),
        Node("Literal", Node("Apple"))
    ),
    Node("Or",
        Node("Equals",
            Node("Variable", Node("element")),
            Node("Literal", Node("Apple"))
        ),
        Node("Equals",
            Node("Variable", Node("element")),
            Node("Literal", Node("Apple"))
        )
    )
)

print evalTree(t,{"element": "Apple"})
print evalTree(t,{"element": "Duck"})
print evalTree(t,{"element": "Banana"})
</snippet></ROW><ROW><id>19140734</id><snippet>True
True
False
</snippet></ROW><ROW><id>19140781</id><snippet>&gt;&gt;&gt; def Temp():
...     for i in xrange(10):
...             if i&lt;5:
...                     yield i;
...             else:
...                     yield 5
... 
&gt;&gt;&gt; for last in Temp():
...     print last
</snippet></ROW><ROW><id>19140981</id><snippet>socket</snippet></ROW><ROW><id>19140999</id><snippet>import itertools as it

def get_footer(file_):
    with open(file_) as f:
        g = it.dropwhile(lambda x: x != '[Other data]\n', f)
        footer_len = len([i for i, _ in enumerate(g)])
    return footer_len

footer_len = get_footer('file.txt')
df = pd.read_csv('file.txt', … skipfooter=footer_len)
</snippet></ROW><ROW><id>19141045</id><snippet>/*
  keyword
*/
</snippet></ROW><ROW><id>19141045</id><snippet>'//' in currentLine
</snippet></ROW><ROW><id>19141084</id><snippet>Tk()</snippet></ROW><ROW><id>19141084</id><snippet>tkinter</snippet></ROW><ROW><id>19141084</id><snippet>Tkinter</snippet></ROW><ROW><id>19141084</id><snippet>Tkinter</snippet></ROW><ROW><id>19141084</id><snippet>from &lt;module&gt; import *</snippet></ROW><ROW><id>19141084</id><snippet>*</snippet></ROW><ROW><id>19141084</id><snippet>tkinter</snippet></ROW><ROW><id>19141084</id><snippet>from tkinter import *
</snippet></ROW><ROW><id>19141084</id><snippet>from tkinter import Tkinter
</snippet></ROW><ROW><id>19141084</id><snippet>Tkinter</snippet></ROW><ROW><id>19141084</id><snippet>tkinter</snippet></ROW><ROW><id>19141084</id><snippet>import tkinter</snippet></ROW><ROW><id>19141084</id><snippet>tkinter.Tk()</snippet></ROW><ROW><id>19141093</id><snippet>plt.plot(a, np.log(1 + r*a[:,None]).mean(1))
</snippet></ROW><ROW><id>19141093</id><snippet>In [49]: a = np.arange(a_step-.3, a_max, a_step)

In [50]: r = np.random.random(100)

In [51]: timeit [scipy.mean(log(1+a[i]*r)) for i in range(len(a))]
100 loops, best of 3: 5.47 ms per loop

In [52]: timeit np.log(1 + r*a[:,None]).mean(1)
1000 loops, best of 3: 384 µs per loop
</snippet></ROW><ROW><id>19141093</id><snippet>a</snippet></ROW><ROW><id>19141093</id><snippet>r</snippet></ROW><ROW><id>19141093</id><snippet>r</snippet></ROW><ROW><id>19141093</id><snippet>a</snippet></ROW><ROW><id>19141093</id><snippet>a</snippet></ROW><ROW><id>19141093</id><snippet>import numpy as np
import matplotlib.pyplot as plt

r = np.random.random(100)

a = 1.
a_max = 1.
a_step = 0.01
a = np.arange(a_step-.3, a_max, a_step)
a.shape
#(129,)
a = a[:,None] #adds a new axis, making this a column vector, same as: a = a.reshape(-1,1)
a.shape
#(129, 1)
(a*r).shape
#(129, 100)
loga = np.log(1 + a*r)
loga.shape
#(129,100)
mloga = loga.mean(axis=1) #take the mean along the 2nd axis where `a` varies
mloga.shape
#(129,)

plt.plot(a, mloga)
plt.show()
</snippet></ROW><ROW><id>19141093</id><snippet>np.outer</snippet></ROW><ROW><id>19141093</id><snippet>plt.plot(a, np.log(1 + np.outer(a,r)).mean(1))
</snippet></ROW><ROW><id>19141093</id><snippet>a</snippet></ROW><ROW><id>19141093</id><snippet>a = a[:,None]</snippet></ROW><ROW><id>19141093</id><snippet>r = np.exp(np.arange(1,5))
a = np.arange(5)

In [33]: r
Out[33]: array([  2.71828183,   7.3890561 ,  20.08553692,  54.59815003])

In [34]: a
Out[34]: array([0, 1, 2, 3, 4])

In [39]: r*a[:,None]
Out[39]: 
# this is  2.7...         7.3...        20.08...       54.5...         # times:
array([[   0.        ,    0.        ,    0.        ,    0.        ],   # 0
       [   2.71828183,    7.3890561 ,   20.08553692,   54.59815003],   # 1
       [   5.43656366,   14.7781122 ,   40.17107385,  109.19630007],   # 2
       [   8.15484549,   22.1671683 ,   60.25661077,  163.7944501 ],   # 3
       [  10.87312731,   29.5562244 ,   80.34214769,  218.39260013]])  # 4

In [40]: np.outer(a,r)
Out[40]: 
array([[   0.        ,    0.        ,    0.        ,    0.        ],
       [   2.71828183,    7.3890561 ,   20.08553692,   54.59815003],
       [   5.43656366,   14.7781122 ,   40.17107385,  109.19630007],
       [   8.15484549,   22.1671683 ,   60.25661077,  163.7944501 ],
       [  10.87312731,   29.5562244 ,   80.34214769,  218.39260013]])

# this is the mean of each column:
In [41]: (np.outer(a,r)).mean(1)
Out[41]: array([  0.        ,  21.19775622,  42.39551244,  63.59326866,  84.79102488])

# and the log of 1 + the above is:
In [42]: np.log(1+(np.outer(a,r)).mean(1))
Out[42]: array([ 0.        ,  3.09999121,  3.77035604,  4.16811021,  4.4519144 ])
</snippet></ROW><ROW><id>19141374</id><snippet>url_list</snippet></ROW><ROW><id>19141374</id><snippet>url_list = [{'target': 'http://10.58.48.103:5000/', 'clicks': '1'}, 
            {'target': 'http://slash.org', 'clicks': '4'},
            {'target': 'http://10.58.48.58:5000/', 'clicks': '1'},
            {'target': 'http://de.com/a', 'clicks': '0'}]
</snippet></ROW><ROW><id>19141374</id><snippet>&lt;li&gt;{{ item["target"] }}&lt;/li&gt; 
</snippet></ROW><ROW><id>19141374</id><snippet>key</snippet></ROW><ROW><id>19141374</id><snippet>value</snippet></ROW><ROW><id>19141374</id><snippet>{% for key, value in url_list.iteritems() %}
    &lt;li&gt;{{ value["target"] }}&lt;/li&gt; 
</snippet></ROW><ROW><id>19141387</id><snippet>outer</snippet></ROW><ROW><id>19141387</id><snippet>NaN</snippet></ROW><ROW><id>19141387</id><snippet>In [119]: dfrm
Out[119]:
          A           B         C  D
0 -1.312700    0.760710  1.044006  0
1 -0.792521   -0.076913  0.087334  1
2 -0.557738    0.982031  1.365357  2
3  1.013947  100.000000 -0.356652  3
4  1.278278  100.000000  0.550492  4
5  0.116599  100.000000 -1.290245  5
6 -1.808143   -0.818014  0.713614  6
7  0.233726  100.000000  0.561103  7
8  2.344671  100.000000 -0.759296  8
9 -1.658047    1.756503 -0.996620  9

In [120]: dfrm1 = dfrm.copy()

In [121]: dfrm1.ix[3, 'D'] = 888

In [122]: dfrm1
Out[122]:
          A           B         C    D
0 -1.312700    0.760710  1.044006    0
1 -0.792521   -0.076913  0.087334    1
2 -0.557738    0.982031  1.365357    2
3  1.013947  100.000000 -0.356652  888
4  1.278278  100.000000  0.550492    4
5  0.116599  100.000000 -1.290245    5
6 -1.808143   -0.818014  0.713614    6
7  0.233726  100.000000  0.561103    7
8  2.344671  100.000000 -0.759296    8
9 -1.658047    1.756503 -0.996620    9

In [123]: pandas.merge(dfrm, dfrm1, left_on='D', right_on='D', how='outer')
Out[123]:
         A_x         B_x       C_x    D       A_y         B_y       C_y
0  -1.312700    0.760710  1.044006    0 -1.312700    0.760710  1.044006
1  -0.792521   -0.076913  0.087334    1 -0.792521   -0.076913  0.087334
2  -0.557738    0.982031  1.365357    2 -0.557738    0.982031  1.365357
3   1.013947  100.000000 -0.356652    3       NaN         NaN       NaN
4   1.278278  100.000000  0.550492    4  1.278278  100.000000  0.550492
5   0.116599  100.000000 -1.290245    5  0.116599  100.000000 -1.290245
6  -1.808143   -0.818014  0.713614    6 -1.808143   -0.818014  0.713614
7   0.233726  100.000000  0.561103    7  0.233726  100.000000  0.561103
8   2.344671  100.000000 -0.759296    8  2.344671  100.000000 -0.759296
9  -1.658047    1.756503 -0.996620    9 -1.658047    1.756503 -0.996620
10       NaN         NaN       NaN  888  1.013947  100.000000 -0.356652
</snippet></ROW><ROW><id>19141387</id><snippet>right</snippet></ROW><ROW><id>19141387</id><snippet>left</snippet></ROW><ROW><id>19141535</id><snippet>()</snippet></ROW><ROW><id>19141535</id><snippet>self.make_title</snippet></ROW><ROW><id>19141535</id><snippet>from Tkinter import *

fen =Tk()

class test_Tk_class:
    def __init__(self):
        self.make_title() # &lt;------------

    def make_title(self):
        fen.title("Test")


a = test_Tk_class()
fen.mainloop()
</snippet></ROW><ROW><id>19141649</id><snippet>def c(self):

     process = [self.a, self.b, self.a, self.a] 

     for i in process:
              print 'Hello'
              i()
              print 'Bye'
</snippet></ROW><ROW><id>19141711</id><snippet>np.finfo()</snippet></ROW><ROW><id>19141711</id><snippet>print np.finfo(float).eps
&gt;&gt;&gt; 2.22044604925e-16

print np.finfo(np.float32).eps
&gt;&gt;&gt; 1.19209e-07
</snippet></ROW><ROW><id>19141720</id><snippet>$ brew link python
</snippet></ROW><ROW><id>19141720</id><snippet>/usr/local/Cellar</snippet></ROW><ROW><id>19141720</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>19141720</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>19141843</id><snippet>sqlite3</snippet></ROW><ROW><id>19141843</id><snippet>psycopg2</snippet></ROW><ROW><id>19141988</id><snippet>enumerate</snippet></ROW><ROW><id>19141988</id><snippet>for i, v in enumerate(b):
  try:
    a[i][1] = v
  except IndexError:
    a.append([None, v])
</snippet></ROW><ROW><id>19141988</id><snippet>bnumer = enumerate(b)
for i, v in bnumer:
  try:
    a[i][1] = v
  except IndexError:
    break

# extend the list with the remaining default values from b
a.extend([None,v] for v in bnumer)
</snippet></ROW><ROW><id>19142057</id><snippet>?</snippet></ROW><ROW><id>19142057</id><snippet>find = re.compile(r"^(.*?)\..*")
</snippet></ROW><ROW><id>19142057</id><snippet>find = re.compile(r"^([^.]*).*")
</snippet></ROW><ROW><id>19142057</id><snippet>match()</snippet></ROW><ROW><id>19142057</id><snippet>search()</snippet></ROW><ROW><id>19142057</id><snippet>find = re.compile(r"^[^.]*")

for l in lines:
    print re.search(find, l).group(0)
</snippet></ROW><ROW><id>19142063</id><snippet>result = round(centimeter / 100, -1)
</snippet></ROW><ROW><id>19142063</id><snippet>result = round(centimeter / 100., 2)  # 2 decimal places
                               ^  ^
</snippet></ROW><ROW><id>19142063</id><snippet>&gt;&gt;&gt; round(51/100, 0)
0.0
&gt;&gt;&gt; round(51/100.0, 0)
1.0
&gt;&gt;&gt; round(51/100.0, -1)
0.0
&gt;&gt;&gt; round(51/100.0, 2)
0.51
&gt;&gt;&gt; round(51/100.0, 1)
0.5
</snippet></ROW><ROW><id>19142218</id><snippet>nsmap = {'xmlns': 'urn:tva:metadata:2010'}

for info in root.xpath('//xmlns:ProgramInformation', namespaces=nsmap):
    print info.get('programId') # retrieve crid
    print info.find('.//xmlns:Title', namespaces=nsmap).text # retrieve title
    print info.find('.//xmlns:Genre/xmlns:Name', namespaces=nsmap).text # retrieve genre
</snippet></ROW><ROW><id>19142243</id><snippet>as</snippet></ROW><ROW><id>19142243</id><snippet>except ImportError as e:
</snippet></ROW><ROW><id>19142255</id><snippet>raw_input</snippet></ROW><ROW><id>19142255</id><snippet>message = raw_input("Enter your message: ")
</snippet></ROW><ROW><id>19142255</id><snippet>.strip(",")</snippet></ROW><ROW><id>19142255</id><snippet>['Hello', ' world']</snippet></ROW><ROW><id>19142255</id><snippet>message</snippet></ROW><ROW><id>19142255</id><snippet>l</snippet></ROW><ROW><id>19142255</id><snippet>l=[]
for i in xrange(0,len(message)-1):
    l += [ord(message) ^ ord(randomstring) for message,randomstring in zip(message,randomstring)]
print l
</snippet></ROW><ROW><id>19142574</id><snippet>bytearray()</snippet></ROW><ROW><id>19142574</id><snippet>with open (output1, "wb") as compdata:
    for row in range(height):
        bytes = bytearray(cobs(delta_rows[row].getByte_List()))
        compdata.write(bytes)
</snippet></ROW><ROW><id>19142574</id><snippet>bytearray()</snippet></ROW><ROW><id>19142574</id><snippet>bytes()</snippet></ROW><ROW><id>19142689</id><snippet>list()</snippet></ROW><ROW><id>19142689</id><snippet>Tag.objects.filter(name__istartswith=q)[:10]</snippet></ROW><ROW><id>19142689</id><snippet>Tag</snippet></ROW><ROW><id>19142689</id><snippet>q</snippet></ROW><ROW><id>19142689</id><snippet>QuerySet()</snippet></ROW><ROW><id>19142689</id><snippet>list()</snippet></ROW><ROW><id>19142689</id><snippet>QuerySet</snippet></ROW><ROW><id>19142689</id><snippet>list()</snippet></ROW><ROW><id>19142689</id><snippet>entry_list = list(Entry.objects.all())
</snippet></ROW><ROW><id>19142689</id><snippet>QuerySet</snippet></ROW><ROW><id>19142796</id><snippet>url(r'^admin/jsi18n', 'django.views.i18n.javascript_catalog'),
</snippet></ROW><ROW><id>19142796</id><snippet>'rtag.views'</snippet></ROW><ROW><id>19142796</id><snippet>rtag.views.django.views.i18n.javascript_catalog</snippet></ROW><ROW><id>19142796</id><snippet>urlpatterns = patterns('',
    url(r'^admin/', include(admin.site.urls)),
    url(r'^admin/jsi18n', 'django.views.i18n.javascript_catalog'),
)

urlpatterns += patterns( 'rtag.views',

    url(r'^$', 'accueil', name="url_accueil"),

    url(r'^list_by_wo/$', 'orderbywo', name="list_by_wo"),

    url(r'^list_by_sn/$', 'orderbysn', name="list_by_sn"),

    url(r'^list_by_create_date/$', 'orderbycreate_date', name="list_by_create_date"),

    url(r'^list_by_PN/$', 'orderbyPN', name="list_by_PN"),

    url(r'^list_by_return_reason/$', 'orderbyreturn_reason',     name="list_by_return_reason"),

    url(r'^list_by_fault_type/$', 'orderbyfault_type', name="list_by_fault_type"),

    url(r'^list_by_Error_message/$', 'orderbyerrormessage', name="list_by_Error_message"),

    url(r'^list_by_user/$', 'orderbyuser', name="list_by_user"),

    url(r'^list_by_custo/$', 'orderbycusto', name="list_by_custo"),

    url(r'^connexion/$', 'connexion' , name="connexion"),

    url(r'^deconnexion/$', 'deconnexion' , name="deconnexion"),

    url(r'^ajout/$', 'ajout'),

    url(r'^rtag/(?P&lt;Id_rtag&gt;\d+)$', 'details'),

    url(r'^modif/(?P&lt;Id_rtag&gt;\d+)$', 'modif'),

    url(r'^csv/$', 'generate_csv'),

)
</snippet></ROW><ROW><id>19142796</id><snippet>rtag.views</snippet></ROW><ROW><id>19142796</id><snippet>rtag.urls</snippet></ROW><ROW><id>19142796</id><snippet>urlpatterns = patterns('',
    url(r'^admin/', include(admin.site.urls)),
    url(r'^admin/jsi18n', 'django.views.i18n.javascript_catalog'),
    url(r'^', include('rtag.urls')),
)
</snippet></ROW><ROW><id>19142943</id><snippet>ORACLE_HOME=path/to/where/you/extracted/libs
TNS_ADMIN=path/to/tnsnames.ora
</snippet></ROW><ROW><id>19143174</id><snippet>s.connect(('10.12.0.30', 6634))
</snippet></ROW><ROW><id>19143285</id><snippet>import csv
import datetime
import copy
from collections import defaultdict

with open(r"C:\Temp\test2.csv") as i, open(r"C:\Temp\results2.csv", "wb") as o:
    rdr = csv.reader(i)
    wrt = csv.writer(o)

    # data is a dictionary where we will save current and previous data like:
    # {
    #    (George Smith, 15t): [
    #         previous date count when column 7 = 1,
    #         previous date count,
    #         current date count when column 7 = 1,
    #         current date count
    #    ]
    data, currdate = defaultdict(lambda:[0, 0, 0, 0]), None
    for line in rdr:
        date = datetime.datetime.strptime(line[0], '%d/%m/%Y')

        # key of dictionary would be tuple looking like
        # (George Smith, 15t)
        name = (line[7], line[9])

        # if date is changed, we have to put current values into previous
        # by copying part of the list
        #
        #    (George Smith, 15t): [
        #         previous date count when column 7 = 1,
        #         previous date count,
        #         current date count when column 7 = 1,
        #         current date count
        #    ]
        #
        # becomes
        #
        #    (George Smith, 15t): [
        #         current date count when column 7 = 1,
        #         current date count
        #         current date count when column 7 = 1,
        #         current date count
        #    ]
        # and then we change currdate variable to current one

        if date != currdate or not currdate:
            for v in data.itervalues(): v[:2] = v[2:]
            currdate = date

        # writing current line + first 2 elements from list (previous counts)
        wrt.writerow(line + data[name][:2])

        # updating current counts
        data[name][3] += 1
        if line[6] == "1": data[name][2] += 1
</snippet></ROW><ROW><id>19143341</id><snippet>&lt;KP_Enter&gt;</snippet></ROW><ROW><id>19143341</id><snippet>&lt;Return&gt;</snippet></ROW><ROW><id>19143341</id><snippet>self.equals_button</snippet></ROW><ROW><id>19143341</id><snippet>&lt;Return&gt;</snippet></ROW><ROW><id>19143341</id><snippet>.focus_set()</snippet></ROW><ROW><id>19143341</id><snippet>.bind()</snippet></ROW><ROW><id>19143341</id><snippet>button=Button(etc.etc.command=myfunc)</snippet></ROW><ROW><id>19143373</id><snippet>def get_monotonic_subsequences(data, min_length):
    direction = data[1] - data[0] #determine direction of initial subsequence
    subsequences = []
    cur_seq = []
    for i in range(0, len(data) - 1):
        if direction &gt; 0:
            if (data[i] &gt;= data[i-1]):
                cur_seq.append(data[i])
            else:
                subsequences.append(cur_seq)
                cur_seq = [data[i]]
                direction = data[i+1] - data[i]
        else:
            if (data[i] &lt;= data[i-1]):
                cur_seq.append(data[i])
            else:
                subsequences.append(cur_seq)
                cur_seq = [data[i]]
                direction = data[i+1] - data[i]

    if  (data[-1] - data[-2])*direction &gt; 0:
        cur_seq.append(data[-1])
        subsequences.append(cur_seq)
    else:
        subsequences.append(cur_seq)
        subsequences.append([data[-1]])
    return [x for x in subsequences if len(x) &gt;= min_length]
</snippet></ROW><ROW><id>19143464</id><snippet>os.startfile</snippet></ROW><ROW><id>19143659</id><snippet>python example.py one two "#three" "#four" five
</snippet></ROW><ROW><id>19143677</id><snippet>crypt.crypt</snippet></ROW><ROW><id>19143677</id><snippet>None</snippet></ROW><ROW><id>19143677</id><snippet>$1\$WDvKY5n\$</snippet></ROW><ROW><id>19143677</id><snippet>1\</snippet></ROW><ROW><id>19143677</id><snippet>1</snippet></ROW><ROW><id>19143677</id><snippet>1\</snippet></ROW><ROW><id>19143677</id><snippet>WDvKY5n\</snippet></ROW><ROW><id>19143677</id><snippet>[a-zA-Z0-9/]</snippet></ROW><ROW><id>19143677</id><snippet>$</snippet></ROW><ROW><id>19143677</id><snippet>$1$WDvKY5n$</snippet></ROW><ROW><id>19143677</id><snippet>'$1d2n7Q0.r54s'</snippet></ROW><ROW><id>19143677</id><snippet>None</snippet></ROW><ROW><id>19143677</id><snippet>crypt</snippet></ROW><ROW><id>19143704</id><snippet>ser.read(64)</snippet></ROW><ROW><id>19143704</id><snippet>ser.read(size=64)</snippet></ROW><ROW><id>19143704</id><snippet>i=0
for modem in PortList:
    for port in modem:
        try:
            ser = serial.Serial(port, 9600, timeout=1)
            ser.close()
            ser.open()
            ser.write("ati")
            time.sleep(3)
            read_val = ser.read(size=64)
            print read_val
            if read_val is not '':
                print port
        except serial.SerialException:
            continue
        i+=1
</snippet></ROW><ROW><id>19143749</id><snippet>fork</snippet></ROW><ROW><id>19143749</id><snippet>#!/usr/bin/env python

import os
import sys
import time

_ = raw_input('Enter the the secret code: ')
if os.fork(): # returns 0 in the child, pid of the child in the parent
    sys.exit()

time.sleep(2)
print('All good things must come to an end')
</snippet></ROW><ROW><id>19143814</id><snippet>escapejs</snippet></ROW><ROW><id>19143814</id><snippet>var netdata = "{{ netdata|escapejs }}"
</snippet></ROW><ROW><id>19143833</id><snippet>converters = {0: lambda s: float(s.strip('"')}
data = np.loadtxt("Data/sim.csv", delimiter=',', skiprows=1, converters=converters)
</snippet></ROW><ROW><id>19143833</id><snippet>data = np.loadtxt("Data/sim.csv", delimiter=',', skiprows=1, usecols=range(1,15))
</snippet></ROW><ROW><id>19143833</id><snippet>with open("Data/sim.csv") as f:
    ncols = len(f.readline().split(','))

data = np.loadtxt("Data/sim.csv", delimiter=',', skiprows=1, usecols=range(1,ncols+1))
</snippet></ROW><ROW><id>19144043</id><snippet>(BB)</snippet></ROW><ROW><id>19144043</id><snippet>(B/B)</snippet></ROW><ROW><id>19144043</id><snippet>str.replace</snippet></ROW><ROW><id>19144043</id><snippet>re.sub</snippet></ROW><ROW><id>19144043</id><snippet>(B/B)</snippet></ROW><ROW><id>19144043</id><snippet>data = re.sub(r'\(BB\)', '(B/B)', data)
data = re.sub(r'\s*\(\w+\)\s*$', '', data)
</snippet></ROW><ROW><id>19144096</id><snippet>50</snippet></ROW><ROW><id>19144096</id><snippet>50</snippet></ROW><ROW><id>19144096</id><snippet>hello</snippet></ROW><ROW><id>19144096</id><snippet>while True:
    print "Please enter a number or word and I will tell you the length of it."

    NR = raw_input()
    print len(NR)
</snippet></ROW><ROW><id>19144096</id><snippet>raw_input()</snippet></ROW><ROW><id>19144096</id><snippet>print</snippet></ROW><ROW><id>19144096</id><snippet>while True:
    NR = raw_input("Please enter a number or word and I will tell you the length of it: ")
    print len(NR)
</snippet></ROW><ROW><id>19144096</id><snippet>NR = None
while NR != '':
    NR = raw_input("Please enter a number or word (or a blank line to exit): ")
    print len(NR)
</snippet></ROW><ROW><id>19144096</id><snippet>print "Please enter a number or word and I will tell you the length of it."
while True:
    NR = raw_input()
    print len(NR)
</snippet></ROW><ROW><id>19144265</id><snippet>x = raw_input('&gt; ').upper()[0]</snippet></ROW><ROW><id>19144265</id><snippet>import time
import os


lives = 3

def start():
    global lives

    if lives &lt; 1:
        print("GAME OVER")
        quit()

    print("You wake up in a well.")
    print("Do you climb out or get help?")
    well = raw_input("Help or Climb?  ").upper()[0]

    if well == "H":
        print("You get your phone out.")
        time.sleep(2)
        print("There's no charge left.")
        print(" " * 3)
        lives = lives - 1
        print("You have", lives, "lives left.")
        time.sleep(3)
        os.system("cls")
        start()

    elif well == "C":
        print("You start climbing up the walls of the well.")
        time.sleep(3)
        print("You are close, but you lose your footing and are blinded by the sunlight,")
        footing = raw_input("Move your foot to the left or right?").upper()[0]
        if footing == "L":
            print("You miss the step and fall.")
            lives = lives - 1
            start()




start()
</snippet></ROW><ROW><id>19144326</id><snippet>def __init__(nlegs, self):
</snippet></ROW><ROW><id>19144326</id><snippet>def __init__(self, nlegs):
</snippet></ROW><ROW><id>19144326</id><snippet>nlegs</snippet></ROW><ROW><id>19144326</id><snippet>self</snippet></ROW><ROW><id>19144326</id><snippet>self</snippet></ROW><ROW><id>19144388</id><snippet>0x</snippet></ROW><ROW><id>19144388</id><snippet>h</snippet></ROW><ROW><id>19144388</id><snippet>'0x08h'</snippet></ROW><ROW><id>19144388</id><snippet>'080a'</snippet></ROW><ROW><id>19144388</id><snippet>def parse_hex(s):
    return int(s.lstrip('0x').rstrip('h'), 16)
</snippet></ROW><ROW><id>19144388</id><snippet>numbers = [parse_hex(s) for s in x.split(', ')]
</snippet></ROW><ROW><id>19144388</id><snippet>0x</snippet></ROW><ROW><id>19144388</id><snippet>def parse_hex(s):
    return int(s.rstrip('h'), 16)
</snippet></ROW><ROW><id>19144388</id><snippet>int</snippet></ROW><ROW><id>19144388</id><snippet>0x/0X</snippet></ROW><ROW><id>19144453</id><snippet>get_redirect_url()</snippet></ROW><ROW><id>19144453</id><snippet>*</snippet></ROW><ROW><id>19144453</id><snippet>get_redirect_url(*data)</snippet></ROW><ROW><id>19144453</id><snippet>get_redirect_url(url1, url2, url3, ..)</snippet></ROW><ROW><id>19144453</id><snippet>get_redirect_url()</snippet></ROW><ROW><id>19144453</id><snippet>def get_redirect_url(url):
    opener = urllib2.build_opener(urllib2.HTTPRedirectHandler)
    request = opener.open(url)
    return request.url 


with open ('openCRS_url.txt', 'r') as myFile:
    urls = [line.strip() for line in myFile]
    redirect_urls = [get_redirect_url(url) for url in urls]
    print redirect_urls
</snippet></ROW><ROW><id>19144540</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.match(".*a bc.* ", "123 a bcdef12")
None
&gt;&gt;&gt; re.match(".*a bc.*", "123 a bcdef12")
&lt;_sre.SRE_Match object at 0x7fdd6c462b90&gt;
</snippet></ROW><ROW><id>19144652</id><snippet># immediately re-load attributes on obj1, obj2
session.refresh(obj1)
session.refresh(obj2)

# expire objects obj1, obj2, attributes will be reloaded
# on the next access:
session.expire(obj1)
session.expire(obj2)
</snippet></ROW><ROW><id>19144652</id><snippet>session.refresh()</snippet></ROW><ROW><id>19144772</id><snippet>print</snippet></ROW><ROW><id>19144772</id><snippet>_list=[0,1,2,3]
n=[]
for x in _list:
    if x ==0:
        x=1
    div=x/2.0
    n.append(div)
</snippet></ROW><ROW><id>19144940</id><snippet>min</snippet></ROW><ROW><id>19144940</id><snippet>key</snippet></ROW><ROW><id>19144940</id><snippet>min_idx = min(x, key=funct)
min_val = funct(min_idx)
</snippet></ROW><ROW><id>19145013</id><snippet>import re
from collections import defaultdict

d = defaultdict(int)

with open('file.txt') as f:
    for line in f:
        qty, chr, _id = re.split('\s+', line.strip())
        d[(_id, chr)] += int(qty)

for (_id, chr), qty in d.iteritems():
    print '{} {}       {}'.format(qty, chr, _id)
</snippet></ROW><ROW><id>19145256</id><snippet>route_from</snippet></ROW><ROW><id>19145256</id><snippet>from flask.globals import _app_ctx_stack, _request_ctx_stack
from werkzeug.urls import url_parse

def route_from(url, method = None):
    appctx = _app_ctx_stack.top
    reqctx = _request_ctx_stack.top
    if appctx is None:
        raise RuntimeError('Attempted to match a URL without the '
                           'application context being pushed. This has to be '
                           'executed when application context is available.')

    if reqctx is not None:
        url_adapter = reqctx.url_adapter
    else:
        url_adapter = appctx.url_adapter
        if url_adapter is None:
            raise RuntimeError('Application was not able to create a URL '
                               'adapter for request independent URL matching. '
                               'You might be able to fix this by setting '
                               'the SERVER_NAME config variable.')
    parsed_url = url_parse(url)
    if parsed_url.netloc is not "" and parsed_url.netloc != url_adapter.server_name:
        raise NotFound()
    return url_adapter.match(parsed_url.path, method)
</snippet></ROW><ROW><id>19145256</id><snippet>url_for</snippet></ROW><ROW><id>19145256</id><snippet>url</snippet></ROW><ROW><id>19145256</id><snippet>dict</snippet></ROW><ROW><id>19145277</id><snippet>In [97]: s = read_clipboard(header=None)

In [98]: news = s.rename(columns=lambda x: ['Region', 'data'][x])

In [99]: news
Out[99]:
   Region  data
0       0     8
1       1    25
2      11     1
3       2    41
4       3    23
5       4    15
6       5    35
7       6    24
8       7    27
9       8    50
10      9    55
11      N    10

In [100]: news_converted = news.convert_objects(convert_numeric=True)

In [101]: news_converted
Out[101]:
    Region  data
0        0     8
1        1    25
2       11     1
3        2    41
4        3    23
5        4    15
6        5    35
7        6    24
8        7    27
9        8    50
10       9    55
11     NaN    10

In [102]: news_converted.loc[11, 'Region'] = 'N'

In [103]: news_converted_with_index = news_converted.set_index('Region')

In [104]: news_converted_with_index
Out[104]:
        data
Region
0.0        8
1.0       25
11.0       1
2.0       41
3.0       23
4.0       15
5.0       35
6.0       24
7.0       27
8.0       50
9.0       55
N         10

In [105]: news_converted_with_index.sort_index()
Out[105]:
        data
Region
0.0        8
1.0       25
2.0       41
3.0       23
4.0       15
5.0       35
6.0       24
7.0       27
8.0       50
9.0       55
11.0       1
N         10
</snippet></ROW><ROW><id>19145277</id><snippet>Series</snippet></ROW><ROW><id>19145286</id><snippet>str.split</snippet></ROW><ROW><id>19145286</id><snippet>&gt;&gt;&gt; "defenders\t2\n".split()
['defenders', '2']
</snippet></ROW><ROW><id>19145286</id><snippet>re.findall</snippet></ROW><ROW><id>19145286</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'\S+', "defenders\t2\n")
['defenders', '2']
</snippet></ROW><ROW><id>19145406</id><snippet>private</snippet></ROW><ROW><id>19145406</id><snippet>public</snippet></ROW><ROW><id>19145406</id><snippet>private</snippet></ROW><ROW><id>19145406</id><snippet>protected</snippet></ROW><ROW><id>19145406</id><snippet>def Foo(param):
    param = [param]  # because `nonlocal` was introduced only in 3.x
    class _Foo(object):
        @property
        def param(self):
            return param[0]
        @param.setter
        def param(self, val):
            param[0] = val
    return _Foo()

foo = Foo('bar')
print foo.param  # bar
foo.param = 'baz'
print foo.param  # baz
# no way to access `foo._param` or anything
</snippet></ROW><ROW><id>19145406</id><snippet>&gt;&gt;&gt; foo.__class__.param.fget.__closure__[0].cell_contents[0] = 'hey'
&gt;&gt;&gt; foo.param
'hey'
</snippet></ROW><ROW><id>19145406</id><snippet>ctypes</snippet></ROW><ROW><id>19145406</id><snippet>import ctypes
arr = (ctypes.c_ubyte * 64).from_address(id(foo))
</snippet></ROW><ROW><id>19145406</id><snippet>arr</snippet></ROW><ROW><id>19145406</id><snippet>.param</snippet></ROW><ROW><id>19145411</id><snippet>import numpy as np
import matplotlib

x = np.linspace(-1, 1, 201)

L = np.polynomial.legendre.legval(x, np.identity(50))

plt.plot(x, L.T)
</snippet></ROW><ROW><id>19145411</id><snippet>import numpy as np    
from numpy.polynomial.legendre import leggauss, legval

def f(x):
    if 0 &lt;= x &lt;= 1:
        return 1
    if -1 &lt;= x &lt;= 0:
        return -1

# of course you could write a vectorized version of
# this particular f(x), but I assume you have a more
# general piecewise function
f = np.vectorize(f)

deg = 100
x, w = leggauss(deg) # len(x) == 100

L = np.polynomial.legendre.legval(x, np.identity(deg))
# Sum L(xi)*f(xi)*wi
integral = (L*(f(x)*w)[None,:]).sum(axis=1)

c = (np.arange(1,51) + 0.5) * integral[1:51]

x_fine = np.linspace(-1, 1, 2001) # 2001 points
Lfine = np.polynomial.legendre.legval(x_fine, np.identity(51))

# sum_1_50 of c(n) * Ln(x_fine)
cLn_sum = (c[:,None] * Lfine[1:51,:]).sum(axis=0)
</snippet></ROW><ROW><id>19145477</id><snippet>adpcm2lin</snippet></ROW><ROW><id>19145477</id><snippet>audioop</snippet></ROW><ROW><id>19145477</id><snippet>with open('spam.adpcm', 'rb') as f:
    adpcm = f.read()
pcm, _ = audioop.adpcm2lin(adpcm, 2, None)
</snippet></ROW><ROW><id>19145477</id><snippet>adpcm</snippet></ROW><ROW><id>19145477</id><snippet>state</snippet></ROW><ROW><id>19145477</id><snippet>with open('spam.adpcm', 'rb') as f:
    state = None
    while True:
        adpcm = f.read(BLOCKSIZE)
        if not adpcm:
            return
        pcm, state = audioop.adpcm2lin(adpcm, 2, state)
        yield pcm
</snippet></ROW><ROW><id>19145525</id><snippet>class ArticleSerializer(serializers.HyperlinkedModelSerializer):
    user = UserSerializer(many=False, read_only=True)
    teaser = serializers.SerializerMethodField('get_teaser')

    class Meta:
        model = models.Article
        fields = (
            'id'
            ,'title'
            , 'date_added'
            , 'user'
            , 'teaser'
        )

    def get_teaser(self, obj):
        return force_text(obj.content[:20])
</snippet></ROW><ROW><id>19145572</id><snippet>indexes=['date','uid','artist','iid','tag']
data1 = pd.read_table(filename,header=None, nrows=1000000, names=('uid','iid','artist','tag','date'),index_col=indexes, parse_dates='date') 
data['anno']=1
data2 = pd.read_table(filename,header=None, nrows=1000000, names=('uid','iid','artist','tag','date'), parse_dates='date') 
</snippet></ROW><ROW><id>19145572</id><snippet>daily_users = data2.groupby('date').uid.nunique()
daily_annotations = data2.groupby('date').count().uid
anno_per_user_perday2 = daily_annotations / daily_users.map(float)
</snippet></ROW><ROW><id>19145572</id><snippet>anno_per_user_perday = data1.sum(level=['date','uid']).mean(level='date').anno
</snippet></ROW><ROW><id>19145572</id><snippet>%timeit -n100 daily_users = data2.groupby('date').uid.nunique() ; daily_annotations = data2.groupby('date').count().uid ; anno_per_user_perday2 = daily_annotations / daily_users.map(float)
100 loops, best of 3: 387 ms per loop

%timeit -n100 anno_per_user_perday1 = data1.sum(level=['date','uid']).mean(level='date').anno
100 loops, best of 3: 149 ms per loop
</snippet></ROW><ROW><id>19145613</id><snippet>(\w|\+)</snippet></ROW><ROW><id>19145613</id><snippet>\w</snippet></ROW><ROW><id>19145613</id><snippet>[a-zA-Z+]</snippet></ROW><ROW><id>19145613</id><snippet>[\w+]</snippet></ROW><ROW><id>19145854</id><snippet>allData[[0,1,3],mask == 1]</snippet></ROW><ROW><id>19145854</id><snippet>allData[[0,1,3],argwhere(mask == 1)]</snippet></ROW><ROW><id>19145854</id><snippet>[[list1], [list2]]</snippet></ROW><ROW><id>19145854</id><snippet>:</snippet></ROW><ROW><id>19145854</id><snippet>:</snippet></ROW><ROW><id>19145854</id><snippet>b=random.random((5, 10,2))
b[[0,1,3],:, some_mask==1] #works
b[:,:, some_mask==1] #works
b[[0,1,3],[2,4], some_mask==1] #ValueError
</snippet></ROW><ROW><id>19145962</id><snippet>cycle([1,2,3,4,5]) -&gt; [1,2,3,4,5,1,2,3,4,5,1,2,3,4,5]
</snippet></ROW><ROW><id>19145962</id><snippet>[iter(a), iter(b), iter(c)]</snippet></ROW><ROW><id>19145962</id><snippet>[iter(a), iter(b), iter(c), iter(a), iter(b), iter(c), iter(a), iter(b), iter(c), ...]
</snippet></ROW><ROW><id>19145962</id><snippet>[1, 4, 5, 2, StopIterator]
</snippet></ROW><ROW><id>19145962</id><snippet>islice(cc,2)</snippet></ROW><ROW><id>19145962</id><snippet>[iter(c), iter(a)]</snippet></ROW><ROW><id>19145962</id><snippet>[iter(c), iter(a), iter(c), iter(a), iter(c), iter(a), ...]
</snippet></ROW><ROW><id>19145962</id><snippet>[6, 3, StopIterator]
</snippet></ROW><ROW><id>19145962</id><snippet>islice(cc, 2)</snippet></ROW><ROW><id>19145962</id><snippet>[iter(a), iter(c)]</snippet></ROW><ROW><id>19145962</id><snippet>[StopIterator]
</snippet></ROW><ROW><id>19146079</id><snippet>multiprocessing</snippet></ROW><ROW><id>19146092</id><snippet>f = open('NIRS_data.txt','r')
number_string = f.readline()
v_numbers = []
while number_string != '':
    numbers = number_string.split()
    for number in numbers:
        v_numbers.append( number )
    number_string = f.readline()
</snippet></ROW><ROW><id>19146092</id><snippet>v_numbers</snippet></ROW><ROW><id>19146092</id><snippet>lfilter</snippet></ROW><ROW><id>19146092</id><snippet>append</snippet></ROW><ROW><id>19146092</id><snippet>        v_numbers.append(float(number))
</snippet></ROW><ROW><id>19146092</id><snippet>np.loadtxt</snippet></ROW><ROW><id>19146092</id><snippet>v_numbers = np.loadtxt('NIRS_data.txt').ravel()
</snippet></ROW><ROW><id>19146169</id><snippet>ipdb</snippet></ROW><ROW><id>19146169</id><snippet>~ $ ipdb --help

usage: ipdb.py scriptfile [arg] ...
~ $ ipdb species.py args
&gt; ~\species.py(1)&lt;module&gt;()
---&gt; 1 import random
     2 from pprint import pprint
     3

ipdb&gt;
</snippet></ROW><ROW><id>19146169</id><snippet>pdb</snippet></ROW><ROW><id>19146169</id><snippet>ipdb&gt;</snippet></ROW><ROW><id>19146169</id><snippet>n</snippet></ROW><ROW><id>19146169</id><snippet>s</snippet></ROW><ROW><id>19146169</id><snippet>r</snippet></ROW><ROW><id>19146169</id><snippet>b</snippet></ROW><ROW><id>19146169</id><snippet>breakpoint</snippet></ROW><ROW><id>19146169</id><snippet>c</snippet></ROW><ROW><id>19146169</id><snippet>q</snippet></ROW><ROW><id>19146169</id><snippet>help &lt;cmd&gt;</snippet></ROW><ROW><id>19146169</id><snippet>ipdb&gt; help r
r(eturn)
Continue execution until the current function returns.
</snippet></ROW><ROW><id>19146169</id><snippet>ipdb&gt; b 67
Breakpoint 1 at ~\species.py:67
</snippet></ROW><ROW><id>19146169</id><snippet>retval</snippet></ROW><ROW><id>19146169</id><snippet>rv</snippet></ROW><ROW><id>19146169</id><snippet>ipdb</snippet></ROW><ROW><id>19146169</id><snippet>ipdb</snippet></ROW><ROW><id>19146169</id><snippet>vars()['&lt;varname&gt;']</snippet></ROW><ROW><id>19146169</id><snippet>ipdb</snippet></ROW><ROW><id>19146169</id><snippet>n</snippet></ROW><ROW><id>19146169</id><snippet>ipdb</snippet></ROW><ROW><id>19146169</id><snippet>ipdb&gt; n
&gt; ~\species.py(67)&lt;module&gt;()
     66
1--&gt; 67 while len([y for y in petri_dish if y.status == 1]) &gt; 1:
     68     turn += 1

ipdb&gt;
&gt; ~\species.py(67)&lt;module&gt;()
     66
1--&gt; 67 while len([y for y in petri_dish if y.status == 1]) &gt; 1:
     68     turn += 1

ipdb&gt;
&gt; ~\species.py(69)&lt;module&gt;()
     68     turn += 1
---&gt; 69     move_around()
     70

ipdb&gt; turn
2
</snippet></ROW><ROW><id>19146169</id><snippet>ipdb&gt; s
--Call--
&gt; ~\species.py(60)move_around()
     59
---&gt; 60 def move_around():
     61     for x in list(petri_dish):
</snippet></ROW><ROW><id>19146193</id><snippet>import os 
import csv


path=os.getcwd()

filenames = os.listdir(path)

for filename in filenames:

    if filename.endswith('.csv'):
        r=csv.reader(open(filename))
        new_data = []
        for row in r:
            row[-1] = row[-1].replace("S-D", "S")
            new_data.append(row)

        newfilename = "".join(filename.split(".csv")) + "_edited.csv"
        with open(newfilename, "w") as f:
            writer = csv.writer(f)
            writer.writerows(new_data)
</snippet></ROW><ROW><id>19146222</id><snippet>itertools.product()</snippet></ROW><ROW><id>19146222</id><snippet>from itertools import product

for combo in product(*map(set, zip(good, bad))):
    print(combo)
</snippet></ROW><ROW><id>19146222</id><snippet>&gt;&gt;&gt; good = (0,1,2,3)
&gt;&gt;&gt; bad =  (0,10,20,3)
&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; for combo in product(*map(set, zip(good, bad))):
...     print(combo)
... 
(0, 1, 2, 3)
(0, 1, 20, 3)
(0, 10, 2, 3)
(0, 10, 20, 3)
</snippet></ROW><ROW><id>19146222</id><snippet>good</snippet></ROW><ROW><id>19146222</id><snippet>bad</snippet></ROW><ROW><id>19146222</id><snippet>ugly</snippet></ROW><ROW><id>19146222</id><snippet>&gt;&gt;&gt; ugly =  (1,2,4,3)
&gt;&gt;&gt; for combo in product(*map(set, zip(good, bad, ugly))):
...     print(combo)
... 
(0, 1, 4, 3)
(0, 1, 2, 3)
(0, 1, 20, 3)
(0, 10, 4, 3)
(0, 10, 2, 3)
(0, 10, 20, 3)
(0, 2, 4, 3)
(0, 2, 2, 3)
(0, 2, 20, 3)
(1, 1, 4, 3)
(1, 1, 2, 3)
(1, 1, 20, 3)
(1, 10, 4, 3)
(1, 10, 2, 3)
(1, 10, 20, 3)
(1, 2, 4, 3)
(1, 2, 2, 3)
(1, 2, 20, 3)
</snippet></ROW><ROW><id>19146222</id><snippet>def op(*sequences):
    return product(*map(set, zip(*sequences)))

for combo in op(good, bad):
    print(combo)

for combo in op(good, bad, ugly):
    print(combo)
</snippet></ROW><ROW><id>19146222</id><snippet>set</snippet></ROW><ROW><id>19146222</id><snippet>set</snippet></ROW><ROW><id>19146222</id><snippet>def unique_with_order(seq):
    seen = set()
    seen_add = seen.add
    return [x for x in seq if x not in seen and not seen_add(x)]

def ordered_op(*sequences):
    return product(*map(unique_with_order, zip(*sequences)))
</snippet></ROW><ROW><id>19146222</id><snippet>&gt;&gt;&gt; for combo in ordered_op(good, bad):
...     print(combo)
... 
(0, 1, 2, 3)
(0, 1, 20, 3)
(0, 10, 2, 3)
(0, 10, 20, 3)
&gt;&gt;&gt; for combo in ordered_op(bad, good):
...     print(combo)
... 
(0, 10, 20, 3)
(0, 10, 2, 3)
(0, 1, 20, 3)
(0, 1, 2, 3)
</snippet></ROW><ROW><id>19146384</id><snippet>for yoffset in range(yscale):
    for xoffset in range(xscale):
        newImage.setPixel(yscale*r + yoffset, xscale*c + xoffset, pixel)
</snippet></ROW><ROW><id>19146384</id><snippet>newImage.setPixel(4*r, 4*c, pixel)
newImage.setPixel(4*r, 4*c+1, pixel)
newImage.setPixel(4*r, 4*c+2, pixel)
newImage.setPixel(4*r, 4*c+3, pixel)
</snippet></ROW><ROW><id>19146384</id><snippet>4*c+n</snippet></ROW><ROW><id>19146384</id><snippet>n</snippet></ROW><ROW><id>19146384</id><snippet>for n in range(4):
    newImage.setPixel(4*r, 4*c+n, pixel)
</snippet></ROW><ROW><id>19146384</id><snippet>4</snippet></ROW><ROW><id>19146384</id><snippet>xscale</snippet></ROW><ROW><id>19146384</id><snippet>n</snippet></ROW><ROW><id>19146384</id><snippet>for r in range(height*yscale):
    for c in range(width*xscale):
        pixel = oldImage.getPixel(r // yscale, c // xscale)
        newImage.setPixel(r, c, pixel)
</snippet></ROW><ROW><id>19146384</id><snippet>for (yoffset, xoffset) in itertools.product(range(yscale), range(xscale)):</snippet></ROW><ROW><id>19146384</id><snippet>product</snippet></ROW><ROW><id>19146413</id><snippet>self</snippet></ROW><ROW><id>19146413</id><snippet>class TopicLabel(models.Model):
    [...]
    def getVisibleTopics(self):
        return self.topics.filter(visible=True)
</snippet></ROW><ROW><id>19146524</id><snippet>import sys

msg = {'text':u'\2026'}
sys.stderr.write('default encoding: %s\n' % sys.stdout.encoding)
print msg['text']
</snippet></ROW><ROW><id>19146524</id><snippet>$ python bad.py&gt;/tmp/xxx
default encoding: None
Traceback (most recent call last):
  File "fix.py", line 5, in &lt;module&gt;
    print msg['text']
UnicodeEncodeError: 'ascii' codec can't encode character u'\x82' in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>19146524</id><snippet>import sys

msg = {'text':u'\2026'}
sys.stderr.write('default encoding: %s\n' % sys.stdout.encoding)
encoding = sys.stdout.encoding or 'utf-8'
print msg['text'].encode(encoding)
</snippet></ROW><ROW><id>19146524</id><snippet>$ python good.py &gt;/tmp/xxx
default encoding: None
$ cat /tmp/xxx
6
</snippet></ROW><ROW><id>19146655</id><snippet>lower = 1
high = 100
mid = (high + lower)/2 -&gt; at start it will be 50
</snippet></ROW><ROW><id>19146655</id><snippet>high = mid
</snippet></ROW><ROW><id>19146655</id><snippet>lower = mid +1
</snippet></ROW><ROW><id>19146655</id><snippet>found = False
range_lower_bound = 1
range_high_bound = 100

print "Think of a number between 1 and 100 (inclusive)."
print "Answer the following questions with letters y or Y for yes and n or N for no."

while not found:
    range_mid = (range_high_bound + range_lower_bound) / 2
    x = raw_input('interval: [%s,%s]. Is your number &lt;= %s? ' % (range_lower_bound, range_high_bound, range_mid))
    if x.lower() == 'y':
        # Check if this is the last question we need to guess the number
        if range_mid == range_lower_bound:
            print "Your number is %s" % (range_lower_bound)
            found = True
        range_high_bound = range_mid
    # here i'm defaulting "anything" no N for simplicity
    else:
        # Check if this is the last question we need to guess the number
        if range_mid == range_lower_bound:
            print "Your number is %s" % (range_high_bound)
            found = True
        range_lower_bound = range_mid + 1
</snippet></ROW><ROW><id>19146670</id><snippet>Event</snippet></ROW><ROW><id>19146670</id><snippet>Event</snippet></ROW><ROW><id>19146670</id><snippet>Event</snippet></ROW><ROW><id>19146670</id><snippet>param</snippet></ROW><ROW><id>19146670</id><snippet>Condition</snippet></ROW><ROW><id>19146670</id><snippet>c = Condition()
data = None
...

with c:
    data = "new data"
    c.notify()

...

with c:
    while data is None:
        c.wait()
</snippet></ROW><ROW><id>19146670</id><snippet>queue</snippet></ROW><ROW><id>19146670</id><snippet>q = Queue()

...

q.put(data)

... 

data = q.get()
</snippet></ROW><ROW><id>19146927</id><snippet>"C:\test\\"</snippet></ROW><ROW><id>19146927</id><snippet>\t</snippet></ROW><ROW><id>19146927</id><snippet>"C:/test/"</snippet></ROW><ROW><id>19146927</id><snippet>r"C:\test"</snippet></ROW><ROW><id>19146988</id><snippet>class LessPrecise(float):
    def __repr__(self):
        return str(self)

def roundingVals_toTwoDeci(y):
    for d in y:
        for k, v in d.items():
            v = LessPrecise(round(v, 2))
            print v
            d[k] = v

&gt;&gt;&gt; roundingVals_toTwoDeci(y)
80.0
10.0
0.08
10.67
80.73
10.78
0.0
10.0
80.72
10.0
0.78
10.0
80.78
10.0
0.0
10.98
&gt;&gt;&gt; s=json.dumps(y)
&gt;&gt;&gt; s
'[{"a": 80.0, "c": 10.0, "b": 0.08, "d": 10.67}, {"a": 80.73, "c": 10.78, "b": 0.0, "d": 10.0}, {"a": 80.72, "c": 10.0, "b": 0.78, "d": 10.0}, {"a": 80.78, "c": 10.0, "b": 0.0, "d": 10.98}]'
</snippet></ROW><ROW><id>19147060</id><snippet>points= [list(map(int,v.split())) if v.strip().lower() != "j" else "JUMP" for v in vlist]
</snippet></ROW><ROW><id>19147134</id><snippet>if platform.system() == 'Darwin':
    extra_link_args.append('-Wl,-rpath,'+lib_path)
</snippet></ROW><ROW><id>19147240</id><snippet>unicode</snippet></ROW><ROW><id>19147240</id><snippet>u</snippet></ROW><ROW><id>19147240</id><snippet>In [41]: print(u"T\u00fcrk K\u0131z\u0131lay\u0131 Genel Ba\u015fkan\u0131m\u0131z Sn. @AhmetLutfiAkar yar\u0131n sabah 08:00'e TV8'de canl\u0131 yay\u0131n konu\u011fu olacak... @TurkKizilayi")
Türk Kızılayı Genel Başkanımız Sn. @AhmetLutfiAkar yarın sabah 08:00'e TV8'de canlı yayın konuğu olacak... @TurkKizilayi
</snippet></ROW><ROW><id>19147240</id><snippet>str</snippet></ROW><ROW><id>19147240</id><snippet>unicode</snippet></ROW><ROW><id>19147240</id><snippet>raw_unicode_escape</snippet></ROW><ROW><id>19147240</id><snippet>In [43]: print("T\u00fcrk K\u0131z\u0131lay\u0131 Genel Ba\u015fkan\u0131m\u0131z Sn. @AhmetLutfiAkar yar\u0131n sabah 08:00'e TV8'de canl\u0131 yay\u0131n konu\u011fu olacak... @TurkKizilayi".decode('raw_unicode_escape'))
Türk Kızılayı Genel Başkanımız Sn. @AhmetLutfiAkar yarın sabah 08:00'e TV8'de canlı yayın konuğu olacak... @TurkKizilayi
</snippet></ROW><ROW><id>19147401</id><snippet>nonce</snippet></ROW><ROW><id>19147401</id><snippet>session.get(..).text</snippet></ROW><ROW><id>19147401</id><snippet>response = hashlib.sha256(nonce.encode('utf8') + 'PASSWORD' +
                          str(avgtemperatures[0]) +
                          str(avgtemperatures[1])).hexdigest()
</snippet></ROW><ROW><id>19147401</id><snippet>response = hashlib.sha256('{}PASSWORD{}{}'.format(
    nonce.encode('utf8'), *avgtemperatures)).hexdigest()
</snippet></ROW><ROW><id>19147556</id><snippet>from unittest.mock import MagicMock

def foo(x):
    a = x.value

m = MagicMock()
p = PropertyMock()
type(m).value = p
foo(m)
p.assert_called_once_with()
</snippet></ROW><ROW><id>19148000</id><snippet>from datetime import datetime
fmt = '%a %b %d %H:%M:%S %Z %Y'
t = "Wed Oct 02 18:01:56 UTC 2013"
print datetime.strptime(t, fmt)
</snippet></ROW><ROW><id>19148000</id><snippet>datetime.datetime(2013, 10, 2, 18, 1, 56)</snippet></ROW><ROW><id>19148108</id><snippet>str(random.Random(3))</snippet></ROW><ROW><id>19148108</id><snippet>'&lt;random.Random object at 0x1783870&gt;'</snippet></ROW><ROW><id>19148108</id><snippet>r1 = random.Random(seed)
actual_random = r1.random()
print(actual_random) # prints 0.08487199515892163 etc
print(str(r.random()).split(".")[1]) # prints 08487199515892163
</snippet></ROW><ROW><id>19148108</id><snippet>lot_of_staff = [1,10,2,3,5,6,7,8]
conc="".join([str(i) for i in lot_of_staff])
print(conc)# prints '110235678'
</snippet></ROW><ROW><id>19148158</id><snippet>name = data['name']
entity = Object.get_or_insert(name) 
</snippet></ROW><ROW><id>19148158</id><snippet>entity = Object.get_by_id(name)
if not entity:
    entity = Object(id=name)
    entity.put()
</snippet></ROW><ROW><id>19148273</id><snippet>"/usr/local/bin/myprogram" "/home/kevinmills/spam.txt"
</snippet></ROW><ROW><id>19148273</id><snippet>myprogram</snippet></ROW><ROW><id>19148273</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>19148347</id><snippet>Tkinter.Event</snippet></ROW><ROW><id>19148347</id><snippet>from Tkinter import Tk, Entry

root = Tk()

def click(key):
    # print the key that was pressed
    print key.char

entry = Entry()
entry.grid()
# Bind entry to any keypress
entry.bind("&lt;Key&gt;", click)

root.mainloop()
</snippet></ROW><ROW><id>19148347</id><snippet>key</snippet></ROW><ROW><id>19148347</id><snippet>Tkinter.Event</snippet></ROW><ROW><id>19148347</id><snippet>.char</snippet></ROW><ROW><id>19148500</id><snippet>DoAllReports</snippet></ROW><ROW><id>19148500</id><snippet>DoNoReports</snippet></ROW><ROW><id>19148500</id><snippet>DoAllReports = IntVar(False)
</snippet></ROW><ROW><id>19148500</id><snippet>DoAllReports.get()</snippet></ROW><ROW><id>19148500</id><snippet>DoAllReports</snippet></ROW><ROW><id>19148500</id><snippet>DoNoReports</snippet></ROW><ROW><id>19148500</id><snippet>IntVars</snippet></ROW><ROW><id>19148500</id><snippet>DoAll</snippet></ROW><ROW><id>19148500</id><snippet>DoNone</snippet></ROW><ROW><id>19148500</id><snippet>DoAllReports</snippet></ROW><ROW><id>19148500</id><snippet>DoNoReports</snippet></ROW><ROW><id>19148500</id><snippet>DoAllReports  = DoAll.get()
DoNoReports   = DoNone.get()
</snippet></ROW><ROW><id>19148500</id><snippet>IntVars</snippet></ROW><ROW><id>19148500</id><snippet>DO IT!</snippet></ROW><ROW><id>19148789</id><snippet>maximum</snippet></ROW><ROW><id>19148789</id><snippet>def maximum(tab, indDeb, indFin):
    # ...

    k1 = maximum(tab, indDeb, indFin)
</snippet></ROW><ROW><id>19148789</id><snippet>k1 = maximum(tab, indDeb, m)
</snippet></ROW><ROW><id>19149000</id><snippet>event</snippet></ROW><ROW><id>19149000</id><snippet>False</snippet></ROW><ROW><id>19149000</id><snippet>def event(self, event):
    if event.type() == QEvent.User:
        self.label.setText(event.message)
        return True
    return QWidget.event(self, event)
</snippet></ROW><ROW><id>19149053</id><snippet>with open('spam.json') as f:
    things = [json.loads(line) for line in f]
</snippet></ROW><ROW><id>19149053</id><snippet>with open('eggs.json', 'w') as f:
    for thing in new_things:
        f.write(json.dumps(thing) + '\n')
</snippet></ROW><ROW><id>19149053</id><snippet>new_things = {}
for thing in things:
    thing_id = thing['id']
    try:
        old_thing = new_things[thing_id]
    except KeyError:
        new_things[thing_id] = thing
    else:
        old_thing['ua'].extend(thing['ua'])
new_things = new_things.values()
</snippet></ROW><ROW><id>19149053</id><snippet>def merge(things):
    return {'id': things[0]['id'],
            'ua': list(itertools.chain.from_iterable(t['ua'] for t in things))}
sorted_things = sorted(things, key=operator.itemgetter('id'))
grouped_things = itertools.groupby(sorted_things, key=operator.itemgetter('id'))
new_things = [merge(list(group)) for key, group in grouped_things]
</snippet></ROW><ROW><id>19149053</id><snippet>with</snippet></ROW><ROW><id>19149053</id><snippet>with open('spam.json') as f:
    things = (json.loads(line) for line in f)
    for thing in things:
        # blah blah
</snippet></ROW><ROW><id>19149053</id><snippet>with open('spam.json') as f:
    for line in f:
        thing = json.loads(line)
        # blah blah
</snippet></ROW><ROW><id>19149053</id><snippet>new_things</snippet></ROW><ROW><id>19149053</id><snippet>id</snippet></ROW><ROW><id>19149053</id><snippet>id</snippet></ROW><ROW><id>19149053</id><snippet>id</snippet></ROW><ROW><id>19149053</id><snippet>with open('spam.json') as f:
    new_dict = defaultdict(list)
    for row in f:
        thing = json.loads(row)
        new_dict[thing["id"]].extend(thing["ua"])
with open('eggs.json', 'w') as f:
    for id, ua in new_dict.items(): # use iteritems in Python 2.x
        thing = {'id': id, 'ua': ua}
        f.write(json.dumps(thing) + '\n')
</snippet></ROW><ROW><id>19149053</id><snippet>anydbm</snippet></ROW><ROW><id>19149053</id><snippet>dbm</snippet></ROW><ROW><id>19149053</id><snippet>shelve</snippet></ROW><ROW><id>19149053</id><snippet>shelve</snippet></ROW><ROW><id>19149053</id><snippet>dict</snippet></ROW><ROW><id>19149053</id><snippet>db = sqlite3.connect('temp.sqlite')
c = db.cursor()
c.execute('CREATE TABLE Things (tid, ua)')
for thing in things:
    for ua in thing['ua']:
        c.execute('INSERT INTO Things (tid, ua) VALUES (?, ?)',
                  thing['id'], ua)
c.commit()
c.execute('SELECT tid, ua FROM Things ORDER BY tid')
rows = iter(c.fetchone, None)
grouped_things = itertools.groupby(rows, key=operator.itemgetter(0))
new_things = (merge(list(group)) for key, group in grouped_things)
with open('eggs.json', 'w') as f:
    for thing in new_things:
        f.write(json.dumps(thing) + '\n')
</snippet></ROW><ROW><id>19149073</id><snippet>list</snippet></ROW><ROW><id>19149073</id><snippet>existinglist = list(existing)
</snippet></ROW><ROW><id>19149254</id><snippet>date</snippet></ROW><ROW><id>19149254</id><snippet>input_date = datetime.strptime(input_string, '%Y/%m/%d')
</snippet></ROW><ROW><id>19149254</id><snippet>now = time.strftime('vb')
</snippet></ROW><ROW><id>19149254</id><snippet>now</snippet></ROW><ROW><id>19149254</id><snippet>'vb'</snippet></ROW><ROW><id>19149254</id><snippet>now = input_date.isoformat()
</snippet></ROW><ROW><id>19149321</id><snippet>for sublist in data:
    if search1 in sublist and search2 in sublist:
        print("there", sublist)
        break
</snippet></ROW><ROW><id>19149321</id><snippet>break</snippet></ROW><ROW><id>19149321</id><snippet>data = [[4,3],[4,7], [6,3], [9,2]]
search = [4,3]

if search in data:
    print 'yes',search
</snippet></ROW><ROW><id>19149321</id><snippet>search</snippet></ROW><ROW><id>19149321</id><snippet>item in list</snippet></ROW><ROW><id>19149329</id><snippet>a</snippet></ROW><ROW><id>19149329</id><snippet>global a</snippet></ROW><ROW><id>19149329</id><snippet>setupModule()</snippet></ROW><ROW><id>19149329</id><snippet>a</snippet></ROW><ROW><id>19149329</id><snippet>b</snippet></ROW><ROW><id>19149329</id><snippet>@classmethod
def setUpClass(cls):
    cls.b = "Setup Class variable"

def test_1(self):
    print self.b
</snippet></ROW><ROW><id>19149343</id><snippet>turtle.mainloop()
</snippet></ROW><ROW><id>19149368</id><snippet>In [11]: df4 = pd.concat([df1, df2])
</snippet></ROW><ROW><id>19149368</id><snippet>In [12]: g = df4.groupby('name', as_index=False)

In [13]: g.sum()
Out[13]: 
  name  pos
0   n1    2
1   n2    2
2   n3    5
3   n4    3
</snippet></ROW><ROW><id>19149396</id><snippet>date</snippet></ROW><ROW><id>19149396</id><snippet>datetime</snippet></ROW><ROW><id>19149396</id><snippet>strptime</snippet></ROW><ROW><id>19149396</id><snippet>datetime</snippet></ROW><ROW><id>19149396</id><snippet>date</snippet></ROW><ROW><id>19149396</id><snippet>&gt;&gt;&gt; s = '20130925'
&gt;&gt;&gt; dt = datetime.datetime.strptime(s, '%Y%m%d')
&gt;&gt;&gt; d = dt.date()
&gt;&gt;&gt; d
datetime.date(2013, 9, 25)
</snippet></ROW><ROW><id>19149396</id><snippet>'%Y%m%d'</snippet></ROW><ROW><id>19149396</id><snippet>strftime()</snippet></ROW><ROW><id>19149396</id><snippet>strptime()</snippet></ROW><ROW><id>19149519</id><snippet>206.190.43.214</snippet></ROW><ROW><id>19149519</id><snippet>weather.yahooapis.com</snippet></ROW><ROW><id>19149519</id><snippet>206.190.43.214</snippet></ROW><ROW><id>19149519</id><snippet>Host:</snippet></ROW><ROW><id>19149519</id><snippet>$ curl 'http://206.190.43.214/forecastrss?w=2365345&amp;u=f'
&lt;404 error&gt;
$ curl 'http://weather.yahooapis.com/forecastrss?w=2365345&amp;u=f'
&lt;correct rss&gt;
$ curl 'http://206.190.43.214/forecastrss?w=2365345&amp;u=f' -H 'Host: weather.yahooapis.com'
&lt;correct rss&gt;
</snippet></ROW><ROW><id>19149519</id><snippet>mdata = urllib2.urlopen('http://weather.yahooapis.com/forecastrss?w='+str(i)+'&amp;u=f')
</snippet></ROW><ROW><id>19149519</id><snippet>req = urllib2.Request('http://206.190.43.214/forecastrss?w='+str(i)+'&amp;u=f')
req.add_header('Host', 'weather.yahooapis.com')
mdata = urllib2.urlopen(req)
</snippet></ROW><ROW><id>19149519</id><snippet>minidom.parseString(mdata)</snippet></ROW><ROW><id>19149519</id><snippet>mdata</snippet></ROW><ROW><id>19149519</id><snippet>urlopen</snippet></ROW><ROW><id>19149519</id><snippet>read()</snippet></ROW><ROW><id>19149519</id><snippet>parse</snippet></ROW><ROW><id>19149519</id><snippet>parseString</snippet></ROW><ROW><id>19149537</id><snippet>image.transform(image.size, Image.MESH, mesh, self.filtering)
</snippet></ROW><ROW><id>19149581</id><snippet>#-*- coding: utf-8 -*-
</snippet></ROW><ROW><id>19149581</id><snippet>utf-8</snippet></ROW><ROW><id>19149581</id><snippet>utf-8</snippet></ROW><ROW><id>19149591</id><snippet>re</snippet></ROW><ROW><id>19149591</id><snippet>\U</snippet></ROW><ROW><id>19149591</id><snippet>import re

s=u"Smiley emoticon rocks!\U0001f600 I like you.\U0001f601"
count = len(re.findall(ru'[\U0001f600-\U0001f650]', s))
</snippet></ROW><ROW><id>19149591</id><snippet>findall</snippet></ROW><ROW><id>19149591</id><snippet>emoticons = re.finditer(ru'[\U0001f600-\U0001f650]', s)
count = sum(1 for _ in emoticons)
</snippet></ROW><ROW><id>19149591</id><snippet>wordcount = len(s.split())
</snippet></ROW><ROW><id>19149591</id><snippet>word_and_emoticon_count = len(re.findall(ru'\w+|[\U0001f600-\U0001f650]', s))
</snippet></ROW><ROW><id>19149767</id><snippet>get_cache</snippet></ROW><ROW><id>19149767</id><snippet>@gen.coroutine
def serve_from_cache(self):
  response = yield gen.Task(get_redis)
  if response:
      self.finish(response)
      raise gen.Return(True)
  else:
      raise gen.Return(False)

@gen.coroutine
def get(self):
  if (yield self.serve_from_cache()):
    return
  # do work
  yield self.set_cache(...)
</snippet></ROW><ROW><id>19149767</id><snippet>@gen.coroutine
def get_cache(self):
    return yield gen.Task(get_redis)


@gen.coroutine
def get(self):
    resp = yield self.get_cache()
    if resp:
      self.finish(resp)
      return
    # do work...
</snippet></ROW><ROW><id>19149914</id><snippet>class Affiliate(model.Model):
    affiliate_id = models.PositiveIntegerField(primary_key=True)
    …

    def user_level(self):
        levels = [(5, 'B'), …]
        for referrals, category in levels:
             if self.some_field &lt; referrals:
                 return category 
</snippet></ROW><ROW><id>19149914</id><snippet>some_field</snippet></ROW><ROW><id>19150025</id><snippet>base64</snippet></ROW><ROW><id>19150025</id><snippet>base64</snippet></ROW><ROW><id>19150025</id><snippet>repr(file_content)</snippet></ROW><ROW><id>19150025</id><snippet>repr()</snippet></ROW><ROW><id>19150180</id><snippet>while(again == True):</snippet></ROW><ROW><id>19150180</id><snippet>== True</snippet></ROW><ROW><id>19150180</id><snippet>again</snippet></ROW><ROW><id>19150180</id><snippet>if(yn == 'y' or 'yes'):</snippet></ROW><ROW><id>19150180</id><snippet>if (yn == 'y') or ('yes'):</snippet></ROW><ROW><id>19150180</id><snippet>'yes'</snippet></ROW><ROW><id>19150180</id><snippet>True</snippet></ROW><ROW><id>19150180</id><snippet>if yn == 'y' or yn == 'yes':</snippet></ROW><ROW><id>19150180</id><snippet>if yn in ('y', 'yes')</snippet></ROW><ROW><id>19150180</id><snippet>again == True</snippet></ROW><ROW><id>19150180</id><snippet>==</snippet></ROW><ROW><id>19150180</id><snippet>=</snippet></ROW><ROW><id>19150180</id><snippet>else</snippet></ROW><ROW><id>19150396</id><snippet>while True:
    if os.path.isdir("dir_path"): 
        break
    time.sleep(5)
</snippet></ROW><ROW><id>19150451</id><snippet>&gt;&gt;&gt; def nums():
...    
...    num1 = 1
...    num2 = 2
...    num3 = 3
...    
...    return num1, num2, num3, num1 + num2
</snippet></ROW><ROW><id>19150451</id><snippet>&gt;&gt;&gt; print nums()
(1, 2, 3, 3)
</snippet></ROW><ROW><id>19150451</id><snippet>&gt;&gt;&gt; print nums()[0]
1
&gt;&gt;&gt; print nums()[1]
2
&gt;&gt;&gt; #etc...
</snippet></ROW><ROW><id>19150451</id><snippet>def some_function():
    #set value equal to first return value
    value = nums()[0]
    print value
</snippet></ROW><ROW><id>19150476</id><snippet>rjust</snippet></ROW><ROW><id>19150476</id><snippet>rjust</snippet></ROW><ROW><id>19150476</id><snippet>str</snippet></ROW><ROW><id>19150476</id><snippet>rjust(8-1)</snippet></ROW><ROW><id>19150476</id><snippet>rjust(7)</snippet></ROW><ROW><id>19150476</id><snippet>def printBMITable(startHeight, endHeight, startWeight, endWeight):

    for x in range (startWeight, endWeight + 1, 10):
        print "\t",x,

    print '\n'

    for i in range(startHeight, endHeight + 1):
        print i,
        for x in range(startWeight, endWeight + 1, 10):
            print str(round(calculateBMI(i, x), 2)).rjust(7),
        print ''
</snippet></ROW><ROW><id>19150476</id><snippet>&gt;&gt;&gt; printBMITable(195, 200, 190, 200)
        190     200

195    3.51     3.7
196    3.48    3.66
197    3.44    3.62
198    3.41    3.59
199    3.37    3.55
200    3.34    3.52
</snippet></ROW><ROW><id>19150476</id><snippet>round</snippet></ROW><ROW><id>19150627</id><snippet>cmd</snippet></ROW><ROW><id>19150627</id><snippet>python sample.py &lt; input.txt</snippet></ROW><ROW><id>19150627</id><snippet>stdout</snippet></ROW><ROW><id>19150805</id><snippet>struct_time</snippet></ROW><ROW><id>19150805</id><snippet>time.mktime()</snippet></ROW><ROW><id>19150805</id><snippet>struct_time</snippet></ROW><ROW><id>19150805</id><snippet>&gt;&gt;&gt; time.strptime("02/Oct/2013:20:18:18", "%d/%b/%Y:%X")
    time.struct_time(tm_year=2013, tm_mon=10, tm_mday=2, tm_hour=20, tm_min=18, tm_sec=18, tm_wday=2, tm_yday=275, tm_isdst=-1)
&gt;&gt;&gt; time.mktime(time.strptime("02/Oct/2013:20:18:18", "%d/%b/%Y:%X"))
    1380725298.0
</snippet></ROW><ROW><id>19150805</id><snippet>date</snippet></ROW><ROW><id>19150870</id><snippet>panel.Layout() 
</snippet></ROW><ROW><id>19150916</id><snippet>[100,90]</snippet></ROW><ROW><id>19150916</id><snippet>190</snippet></ROW><ROW><id>19150916</id><snippet>for n in 190</snippet></ROW><ROW><id>19150916</id><snippet>thinking% n*100</snippet></ROW><ROW><id>19150916</id><snippet>thinking/n*100</snippet></ROW><ROW><id>19150916</id><snippet>%</snippet></ROW><ROW><id>19150916</id><snippet>/</snippet></ROW><ROW><id>19151092</id><snippet>$ pip install -e git://github.com/kvesteri/flask-storage.git#egg=Flask-Storage
</snippet></ROW><ROW><id>19151183</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; graph = {
... "random" : [
...     {
...         "attr1" : "X",
...         "attr2" : "Y"
...     },
...     {
...         "attr1" : "Z",
...         "attr2" : "V"
...     }
...     ]
... }
&gt;&gt;&gt; json.dumps(graph)
'{"random": [{"attr2": "Y", "attr1": "X"}, {"attr2": "V", "attr1": "Z"}]}'
</snippet></ROW><ROW><id>19151554</id><snippet>with open("Test.txt", 'r') as f:
    for line in f:
        a, b = getStartEnd(line.rstrip())
        print a, b
</snippet></ROW><ROW><id>19151554</id><snippet>( char != end )</snippet></ROW><ROW><id>19151554</id><snippet>( char != start)</snippet></ROW><ROW><id>19151554</id><snippet>for char in reversed(sequence):
    if char == end:
        endCount += 1
        if ( char != end): # always False because char == end
            break
</snippet></ROW><ROW><id>19151554</id><snippet>for char in reversed(sequence):
    if char == end:
        endCount += 1
    else:
        break
</snippet></ROW><ROW><id>19151554</id><snippet>itertools.takewhile</snippet></ROW><ROW><id>19151554</id><snippet>import itertools

def getStartEnd(sequence):
    start = sequence[0]
    end = sequence[-1]
    start_count = sum(1 for _ in itertools.takewhile(lambda ch: ch == start, sequence))
    end_count = sum(1 for _ in itertools.takewhile(lambda ch: ch == end, reversed(sequence)))
    return start_count, end_count
</snippet></ROW><ROW><id>19151748</id><snippet>import re
txt = 'file8, file9, file10'
pat = r"(?&lt;!\d)(\d)(?=,|$)"
regexp = re.compile(pat)
print(regexp.sub(r"0\1", txt))
</snippet></ROW><ROW><id>19151748</id><snippet>(?&lt;! ... )</snippet></ROW><ROW><id>19151748</id><snippet>(?&lt;!a)b</snippet></ROW><ROW><id>19151748</id><snippet>b</snippet></ROW><ROW><id>19151748</id><snippet>a</snippet></ROW><ROW><id>19151748</id><snippet>bb</snippet></ROW><ROW><id>19151748</id><snippet>cb</snippet></ROW><ROW><id>19151748</id><snippet>ab</snippet></ROW><ROW><id>19151748</id><snippet>(?&lt;!\d)(\d)</snippet></ROW><ROW><id>19151748</id><snippet>(\d)</snippet></ROW><ROW><id>19151748</id><snippet>(?= ... )</snippet></ROW><ROW><id>19151748</id><snippet>a(?=b)</snippet></ROW><ROW><id>19151748</id><snippet>a</snippet></ROW><ROW><id>19151748</id><snippet>b</snippet></ROW><ROW><id>19151748</id><snippet>ab</snippet></ROW><ROW><id>19151748</id><snippet>ac</snippet></ROW><ROW><id>19151748</id><snippet>aa</snippet></ROW><ROW><id>19151748</id><snippet>(?=,|$)</snippet></ROW><ROW><id>19151748</id><snippet>,|$</snippet></ROW><ROW><id>19151748</id><snippet>(?&lt;!\d)(\d)(?=,|$)</snippet></ROW><ROW><id>19151787</id><snippet>data = [
    (1,1,3),
    (1,2,2),
    (2,1,2),
    (2,4,1),
]

#import csv
#with open('data.csv') as f:
#    next(f) # Skip header
#    data = [map(int, row) for row in csv.reader(f)]
#    # Python 3.x: map(int, row) -&gt; tuple(map(int, row))

n = max(max(user, item) for user, item, rating in data) # Get size of matrix
matrix = [[0] * n for i in range(n)]

for user, item, rating in data:
    matrix[user-1][item-1] = rating # Convert to 0-based index.

for row in matrix:
    print(row)
</snippet></ROW><ROW><id>19151787</id><snippet>[3, 2, 0, 0]
[2, 0, 0, 1]
[0, 0, 0, 0]
[0, 0, 0, 0]
</snippet></ROW><ROW><id>19151852</id><snippet>f = open("old_text.txt")
temp = f.read()
f.close


new_file = open("new_text.txt", "w")

counter = 0
name = "Courtney"

for number in range(temp.count(name)):
    counter = +1 
    temp.find("Courtney")
    if counter % 2 == 0:
        pass
    else:
        temp = temp.replace("Courteny", "")
#                         ^ No need for = sign here

new_file.write(temp)        
new_file.close
</snippet></ROW><ROW><id>19151852</id><snippet>str.replace</snippet></ROW><ROW><id>19151852</id><snippet>remember = []
with open('old_text.txt', 'r') as old:
    for var in old:
        remember += str(var).split(' ')[::2]
        remember += "\n"

with open('new_text.txt', 'w') as new:
    for var in remember:
        new.write(var + ' ')

print remember
</snippet></ROW><ROW><id>19152440</id><snippet>field</snippet></ROW><ROW><id>19152440</id><snippet>Host</snippet></ROW><ROW><id>19152440</id><snippet>'h1'</snippet></ROW><ROW><id>19152440</id><snippet>if h.field == 'h1':
    servpro()
else:
    hostpro()
</snippet></ROW><ROW><id>19152440</id><snippet>if repr(h) == 'h1':
    servpro()
else:
    hostpro()
</snippet></ROW><ROW><id>19152651</id><snippet>2013-10-02 23:50:34-0700 [-] failed to set uid/gid 1/1 (are you root?) -- exiting.
</snippet></ROW><ROW><id>19152651</id><snippet>twistd</snippet></ROW><ROW><id>19152651</id><snippet>sudo twistd</snippet></ROW><ROW><id>19152651</id><snippet>uid</snippet></ROW><ROW><id>19152651</id><snippet>gid</snippet></ROW><ROW><id>19152651</id><snippet>daemon</snippet></ROW><ROW><id>19152651</id><snippet>uid=1, gid=1</snippet></ROW><ROW><id>19152651</id><snippet>Application</snippet></ROW><ROW><id>19153040</id><snippet>[</snippet></ROW><ROW><id>19153040</id><snippet>]</snippet></ROW><ROW><id>19153040</id><snippet>print(data[0]['students'])
</snippet></ROW><ROW><id>19153040</id><snippet>&gt;&gt;&gt; print(data)
[{'instructor': 'hamarneh', 'course': 'CMPT 102 D1', 'title': 'Scientific Cmpt.Prgm', 'students': ['axc5', 'csf10', 'ctu1', 'nmw15', 'nsm12', 'ppy1', 'qtg13', 'tim1', 'tkd10', 'vhm8', 'vsv1', 'wps1', 'xup12', 'yqt6']}]
&gt;&gt;&gt; print(data[0]['students'])
['axc5', 'csf10', 'ctu1', 'nmw15', 'nsm12', 'ppy1', 'qtg13', 'tim1', 'tkd10', 'vhm8', 'vsv1', 'wps1', 'xup12', 'yqt6']
</snippet></ROW><ROW><id>19153040</id><snippet>data</snippet></ROW><ROW><id>19153040</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>19153040</id><snippet>from collections import defaultdict

courses_per_student = defaultdict(int)

for course in data:
    for student in course['students']:
        courses_per_student[student] += 1
</snippet></ROW><ROW><id>19153333</id><snippet>numpy.fromstring</snippet></ROW><ROW><id>19153333</id><snippet>import numpy as np
np.fromstring(a, dtype=float, sep=' ')
</snippet></ROW><ROW><id>19153333</id><snippet>&gt;&gt;&gt; np.fromstring('0 911 872.9 354.9 901.9 395.0 904.6 414.0 903.8 400.5', dtype=float, sep=' ')
array([   0. ,  911. ,  872.9,  354.9,  901.9,  395. ,  904.6,  414. ,  903.8,  400.5])  
</snippet></ROW><ROW><id>19153417</id><snippet>setattr()</snippet></ROW><ROW><id>19153417</id><snippet>self</snippet></ROW><ROW><id>19153417</id><snippet>def ParseSymbol(self, regex):
    attributes = ['Section', 'Class', 'Subclass', 'Group', 'Subgroup']

    Pattern_groups = re.search(regex, self.Symbol)

    for group, attr in zip(Pattern_groups.groups(), attributes):
        setattr(self, attr, group)
</snippet></ROW><ROW><id>19153417</id><snippet>setattr()</snippet></ROW><ROW><id>19153417</id><snippet>attributes</snippet></ROW><ROW><id>19153417</id><snippet>getattr()</snippet></ROW><ROW><id>19153541</id><snippet>B, C = A[::2], A[1::2]
</snippet></ROW><ROW><id>19153541</id><snippet>[::2]</snippet></ROW><ROW><id>19153541</id><snippet>[1::2]</snippet></ROW><ROW><id>19153541</id><snippet>&gt;&gt;&gt; A = [1, 3, 2, 6, 5, 7]
&gt;&gt;&gt; B, C = A[::2], A[1::2]
&gt;&gt;&gt; B
[1, 2, 5]
&gt;&gt;&gt; C
[3, 6, 7]
</snippet></ROW><ROW><id>19154155</id><snippet>&gt;&gt;&gt; s = 'abcdefg'
&gt;&gt;&gt; s[0] + s[1] # This does the operation 'a' + 'b'
'ab'
</snippet></ROW><ROW><id>19154155</id><snippet>'a' + 'b' = somevar</snippet></ROW><ROW><id>19154155</id><snippet>somevar = 'a' + 'b'</snippet></ROW><ROW><id>19154155</id><snippet>&gt;&gt;&gt; somevar = s[0] + s[1]
</snippet></ROW><ROW><id>19154155</id><snippet>somevar</snippet></ROW><ROW><id>19154155</id><snippet>&gt;&gt;&gt; somevar
'ab'
</snippet></ROW><ROW><id>19154159</id><snippet>method1</snippet></ROW><ROW><id>19154159</id><snippet>class MyClass():
    class ContinueException(Exception):
        pass

    def method1(self, members):
        for member in members:
            try:
                print "in method1 with ", member
                self.method2(member)
            except MyClass.ContinueException:
                pass

    def method2(self, member):
        print "-&gt;in method2 with ", member
        self.method3(member)
        self.method4(member)

    def method3(self, member):
        print "---&gt;in method3 with ", member
        if member % 2 == 0:
            raise MyClass.ContinueException()

    def method4(self, member):
        print "-----&gt;in method4 with ", member
</snippet></ROW><ROW><id>19154159</id><snippet>member</snippet></ROW><ROW><id>19154159</id><snippet>method3</snippet></ROW><ROW><id>19154159</id><snippet>method4</snippet></ROW><ROW><id>19154159</id><snippet>&gt;&gt;&gt; c = MyClass()
&gt;&gt;&gt; c.method1([1,2,3,4])
in method1 with  1
-&gt;in method2 with  1
---&gt;in method3 with  1
-----&gt;in method4 with  1
in method1 with  2
-&gt;in method2 with  2
---&gt;in method3 with  2
in method1 with  3
-&gt;in method2 with  3
---&gt;in method3 with  3
-----&gt;in method4 with  3
in method1 with  4
-&gt;in method2 with  4
---&gt;in method3 with  4
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19154358</id><snippet>.format()</snippet></ROW><ROW><id>19154358</id><snippet>with open(z, 'r') as file:
</snippet></ROW><ROW><id>19154358</id><snippet>with open('foo_{}_bar'.format(z), 'r') as file:
</snippet></ROW><ROW><id>19154358</id><snippet>z</snippet></ROW><ROW><id>19154358</id><snippet>filename</snippet></ROW><ROW><id>19154358</id><snippet>.startswith()</snippet></ROW><ROW><id>19154358</id><snippet>open()</snippet></ROW><ROW><id>19154358</id><snippet>z</snippet></ROW><ROW><id>19154358</id><snippet>NameError</snippet></ROW><ROW><id>19154358</id><snippet>break</snippet></ROW><ROW><id>19154358</id><snippet>else:</snippet></ROW><ROW><id>19154358</id><snippet>for</snippet></ROW><ROW><id>19154358</id><snippet>for filename in dirs:
    if filename.startswith("EPG_NatGeo"):
        z = filename
        break
else:
    raise ValueError('No filename matched')
</snippet></ROW><ROW><id>19154635</id><snippet>executemany</snippet></ROW><ROW><id>19154635</id><snippet>[[v] for v in values]
</snippet></ROW><ROW><id>19154661</id><snippet>foo = models.URLFIELD()
</snippet></ROW><ROW><id>19156000</id><snippet>sys.path.appendsys.path.append('&lt;path_to_pyd_directory&gt;')</snippet></ROW><ROW><id>19156036</id><snippet>int()</snippet></ROW><ROW><id>19156036</id><snippet>int("010110", 2)
</snippet></ROW><ROW><id>19156526</id><snippet>subprocess.call</snippet></ROW><ROW><id>19156526</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>19156526</id><snippet>import sys
import subprocess

procs = []
for i in range(86):
    proc = subprocess.Popen([sys.executable, 'task.py', '{}in.csv'.format(i), '{}out.csv'.format(i)])
    procs.append(proc)

for proc in procs:
    proc.wait()
</snippet></ROW><ROW><id>19156834</id><snippet>LIMIT 3</snippet></ROW><ROW><id>19156834</id><snippet>results = list(c.execute("SELECT WPNumber, ROUTE, WPID FROM wpnavrte WHERE ROUTE = ? AND (WPID = ? OR WPID = ?) LIMIT 3", (x[1], x[0], x[2])))
if len(results) != 2:
    # do something
</snippet></ROW><ROW><id>19157437</id><snippet>def __init__(self, master=None):
    ...
    self.f1 = Frame(...)
    ...
</snippet></ROW><ROW><id>19157437</id><snippet>self.f1</snippet></ROW><ROW><id>19157518</id><snippet>def prime(n):
  i=2
  while (n%i != 0 and i &lt; n):
    i += 1
  if (i &lt; n):
    return prime (n/i)
  else:
    print("The highest prime factor is: "),n

print("Enter a number to find its highest prime factor")
n=input()
prime(n)
</snippet></ROW><ROW><id>19157518</id><snippet>def prime(n,a):
  i = a
  while (n%i != 0 and i*i &lt; n):
    i += 1
  if (i*i &lt; n):
    return prime (n/i, i)
  else:
    print("The highest prime factor is: "),n

print("Enter a number to find its highest prime factor")
n=input()
prime(n,2)
</snippet></ROW><ROW><id>19157603</id><snippet>kwargs</snippet></ROW><ROW><id>19157603</id><snippet>LOOK_UP_TABLE = {
    'users' : {
        'model': ...,
        'serializer_class': ...,
    },
    'categories' : {
        ...
    }, 
}
</snippet></ROW><ROW><id>19157603</id><snippet>get_queryset</snippet></ROW><ROW><id>19157603</id><snippet>get_serializer_class</snippet></ROW><ROW><id>19158083</id><snippet>filter_args = {}
filter_args['date'] = my_date
filter_args['sum'] = my_sum
if request.POST.get('operators'):
    filter_args['operator'] = MyForm.cleaned_data['operators']
payments = Transactions.objects.filter(**filter_args)
</snippet></ROW><ROW><id>19158126</id><snippet>4.06</snippet></ROW><ROW><id>19158126</id><snippet>from decimal import Decimal

print Decimal('20.3') / Decimal('5.0')
</snippet></ROW><ROW><id>19158126</id><snippet>4.06
</snippet></ROW><ROW><id>19158126</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>19158126</id><snippet>float</snippet></ROW><ROW><id>19158608</id><snippet>127.0.0.1 = 01111111000000000000000000000001</snippet></ROW><ROW><id>19158608</id><snippet>01111111000000000000000000000001 = .1
---------fixed--------------**** ** variable

so you get:
01111111000000000000000000000010 = .2
01111111000000000000000000000011 = .3
</snippet></ROW><ROW><id>19158608</id><snippet>&gt;&gt;&gt; import ipaddress
&gt;&gt;&gt; print("\n".join([str(x) for x in ipaddress.ip_network("192.0.2.0/28").hosts()]))
192.0.2.1
192.0.2.2
192.0.2.3
192.0.2.4
192.0.2.5
192.0.2.6
192.0.2.7
192.0.2.8
192.0.2.9
192.0.2.10
192.0.2.11
192.0.2.12
192.0.2.13
192.0.2.14
</snippet></ROW><ROW><id>19158608</id><snippet>2001:0db8::/120</snippet></ROW><ROW><id>19158608</id><snippet>ipaddress.ip_network("2001:0db8::/120").hosts()</snippet></ROW><ROW><id>19158608</id><snippet>python3 -c 'import ipaddress; print("\n".join([str(x) for x in ipaddress.ip_network("192.0.2.0/28").hosts()]))'
</snippet></ROW><ROW><id>19158608</id><snippet>#!/bin/bash
# split it up
IFS='.' read -a array &lt;&lt;&lt; "127.0.0"
#echo ${array[*]}
#127 0 0

mask=$(( ${#array[@]} * 8))
# 28

# add missing 0s.
for $i in {1..4}; do
   if [ i -gt ${#array[@]} ]; then
      array[i]="0"
   fi
done
#echo ${array[*]}
#127 0 0 0


# join, see http://stackoverflow.com/questions/1527049/bash-join-elements-of-an-array
SAVE_IFS=$IFS
IFS="."
full_ip="${array[*]}"
IFS=$SAVE_IFS
# 127.0.0.0

# now add /mask
network="$full_ip/$mask"
# 127.0.0.0/24

python3 -c "import ipaddress; print(\"\\n\".join([str(x) for x in ipaddress.ip_network(\"$network\").hosts()]))"
#127.0.0.1
#127.0.0.2
# ...
#127.0.0.254
</snippet></ROW><ROW><id>19158608</id><snippet>import ipaddress
input="127.0.0"
input_arr=input.split(".") # ['127', '0', '0']
netmask=len(input_arr)*8  # 24
for i in range(len(input_arr), 4):
     input_arr.append('0')
# input_arr = ['127', '0', '0', '0']
ip='.'.join(input_arr)  # '127.0.0.0'
network=ip + '/' + str(netmask)  # '127.0.0.0/24'
print("\n".join([str(x) for x in ipaddress.ip_network(network).hosts()]))
</snippet></ROW><ROW><id>19158608</id><snippet>.network_address</snippet></ROW><ROW><id>19158608</id><snippet>.broadcast_address</snippet></ROW><ROW><id>19158703</id><snippet>ast</snippet></ROW><ROW><id>19158703</id><snippet>import ast

def iter_functions(code):
    tree = ast.parse(code)
    for x in tree.body:
        if isinstance(x, ast.FunctionDef):
            yield x
        elif isinstance(x, ast.ClassDef):
            for x in tree.body:
                for y in x.body:
                    yield y

code = r'''class parent:
    def father(self):
        print "dad"
    def mother(self):
        print "mom"
    def grandfather(self):
        print "grand"
        print "dad"
'''

# This is incorrect. See UPDATE
for f in iter_functions(code):
    if len(f.body) &gt; 0 and len({stmt.lineno for stmt in f.body}) == 1:
        print(f.lineno)
</snippet></ROW><ROW><id>19158703</id><snippet>2
4
</snippet></ROW><ROW><id>19158703</id><snippet>SyntaxError</snippet></ROW><ROW><id>19158703</id><snippet>SyntaxError</snippet></ROW><ROW><id>19158703</id><snippet>for</snippet></ROW><ROW><id>19158703</id><snippet>for f in iter_functions(code):
    if len({node.lineno for stmt in f.body for node in ast.walk(stmt)
            if hasattr(node, 'lineno')}) == 1:
        print(f.lineno)
</snippet></ROW><ROW><id>19158703</id><snippet>def func():
    if True:
        pass
</snippet></ROW><ROW><id>19158745</id><snippet>usePTY=True</snippet></ROW><ROW><id>19158745</id><snippet>foo | bar</snippet></ROW><ROW><id>19158745</id><snippet>foo</snippet></ROW><ROW><id>19158745</id><snippet>usePTY=True</snippet></ROW><ROW><id>19158745</id><snippet>usePTY=False</snippet></ROW><ROW><id>19158745</id><snippet>usePTY=True</snippet></ROW><ROW><id>19158745</id><snippet>PYTHONUNBUFFERED</snippet></ROW><ROW><id>19158745</id><snippet>-u</snippet></ROW><ROW><id>19158745</id><snippet>    import os, sys, mscvrt                                                                                                                  
    msvcrt.setmode(sys.stdin.fileno(), os.O_BINARY)                                                                                         
    msvcrt.setmode(sys.stdout.fileno(), os.O_BINARY)                                                                                        
    msvcrt.setmode(sys.stderr.fileno(), os.O_BINARY)           
</snippet></ROW><ROW><id>19158785</id><snippet>tuple</snippet></ROW><ROW><id>19158785</id><snippet>list</snippet></ROW><ROW><id>19158785</id><snippet>def find(a):
    index=a
    ret = []
    while index&lt;len(z)-1:
        if z[index]=="T":
            for index in range (index+20,index+30):
                if z[index]=="A" and z[index+1]=="G" and z[index+2]=="T":
                    a=index
                    ret.append(a)
        index=index+1
    return ret
</snippet></ROW><ROW><id>19158785</id><snippet>yield</snippet></ROW><ROW><id>19158785</id><snippet>list</snippet></ROW><ROW><id>19158785</id><snippet>yield</snippet></ROW><ROW><id>19158785</id><snippet>yield</snippet></ROW><ROW><id>19159246</id><snippet>O(log(n) + m)</snippet></ROW><ROW><id>19159246</id><snippet>n</snippet></ROW><ROW><id>19159246</id><snippet>m</snippet></ROW><ROW><id>19159246</id><snippet>O(nlog(n))</snippet></ROW><ROW><id>19159246</id><snippet>log(n)</snippet></ROW><ROW><id>19159246</id><snippet>9</snippet></ROW><ROW><id>19159246</id><snippet>from random import randint
from operator import itemgetter

first = itemgetter(0)
second = itemgetter(1)

sa = [(str(randint(0, 1000000)), str(randint(0, 1000000))) for _ in range(300000)]
f_sorted = sorted(sa, key=first)
s_sorted = sa
s_sorted.sort(key=second)
max_length = max(len(s) for _,s in sa)

# See: bisect module from stdlib
def bisect_right(seq, element, key):
    lo = 0
    hi = len(seq)
    element = element.ljust(max_length, '9')
    while lo &lt; hi:
        mid = (lo+hi)//2
        if element &lt; key(seq[mid]):
            hi = mid
        else:
            lo = mid + 1
    return lo


def bisect_left(seq, element, key):
    lo = 0
    hi = len(seq)
    while lo &lt; hi:
        mid = (lo+hi)//2
        if key(seq[mid]) &lt; element:
            lo = mid + 1
        else:
            hi = mid
    return lo


def lookup_set(x_appr, y_appr):
    x_left = bisect_left(f_sorted, x_appr, key=first)
    x_right = bisect_right(f_sorted, x_appr, key=first)
    x_candidates = f_sorted[x_left:x_right + 1]
    y_left = bisect_left(s_sorted, y_appr, key=second)
    y_right = bisect_right(s_sorted, y_appr, key=second)
    y_candidates = s_sorted[y_left:y_right + 1]
    return set(x_candidates).intersection(y_candidates)
</snippet></ROW><ROW><id>19159246</id><snippet>In [2]: def lookup_set2(x_appr, y_appr):
   ...:     return [n for n in sa if n[0].startswith(x_appr) and n[1].startswith(y_appr)]

In [3]: lookup_set('123', '124')
Out[3]: set([])

In [4]: lookup_set2('123', '124')
Out[4]: []

In [5]: lookup_set('123', '125')
Out[5]: set([])

In [6]: lookup_set2('123', '125')
Out[6]: []

In [7]: lookup_set('12', '125')
Out[7]: set([('12478', '125908'), ('124625', '125184'), ('125494', '125940')])

In [8]: lookup_set2('12', '125')
Out[8]: [('124625', '125184'), ('12478', '125908'), ('125494', '125940')]

In [9]: %timeit lookup_set('12', '125')
1000 loops, best of 3: 589 us per loop

In [10]: %timeit lookup_set2('12', '125')
10 loops, best of 3: 145 ms per loop

In [11]: %timeit lookup_set('123', '125')
10000 loops, best of 3: 102 us per loop

In [12]: %timeit lookup_set2('123', '125')
10 loops, best of 3: 144 ms per loop
</snippet></ROW><ROW><id>19159246</id><snippet>240-1400</snippet></ROW><ROW><id>19159246</id><snippet>In [19]: %timeit lookup_set('1', '2')
10 loops, best of 3: 27.1 ms per loop

In [20]: %timeit lookup_set2('1', '2')
10 loops, best of 3: 152 ms per loop

In [21]: len(lookup_set('1', '2'))
Out[21]: 3587
In [23]: %timeit lookup_set('', '2')
10 loops, best of 3: 182 ms per loop

In [24]: %timeit lookup_set2('', '2')
1 loops, best of 3: 212 ms per loop

In [25]: len(lookup_set2('', '2'))
Out[25]: 33053
</snippet></ROW><ROW><id>19159246</id><snippet>In [26]: %timeit lookup_set('', '')
1 loops, best of 3: 360 ms per loop

In [27]: %timeit lookup_set2('', '')
1 loops, best of 3: 221 ms per loop
</snippet></ROW><ROW><id>19159246</id><snippet>sort</snippet></ROW><ROW><id>19159246</id><snippet>In [13]: from random import randint
    ...: from operator import itemgetter
    ...: 
    ...: first = itemgetter(0)
    ...: second = itemgetter(1)
    ...: 
    ...: sa2 = [(str(randint(0, 1000000)), str(randint(0, 1000000))) for _ in range(300000)]

In [14]: %%timeit
    ...: f_sorted = sorted(sa2, key=first)
    ...: s_sorted = sorted(sa2, key=second)
    ...: max_length = max(len(s) for _,s in sa2)
    ...: 
1 loops, best of 3: 881 ms per loop
</snippet></ROW><ROW><id>19159246</id><snippet>O(n)</snippet></ROW><ROW><id>19159246</id><snippet>bisect</snippet></ROW><ROW><id>19159246</id><snippet>key</snippet></ROW><ROW><id>19159246</id><snippet>f_sorted = sorted(sa, key=first)
</snippet></ROW><ROW><id>19159246</id><snippet>f_sorted = sorted((first, (first,second)) for first,second in sa)
</snippet></ROW><ROW><id>19159246</id><snippet>('123', '')</snippet></ROW><ROW><id>19159246</id><snippet>bisect_*</snippet></ROW><ROW><id>19159361</id><snippet>from sklearn import svm</snippet></ROW><ROW><id>19159426</id><snippet>thank_you</snippet></ROW><ROW><id>19159426</id><snippet>url(r'thanks/(?P&lt;id&gt;\d+)/$, 'thank_you', name='thank_you')
</snippet></ROW><ROW><id>19159426</id><snippet>if form.is_valid():
    docrequest = form.save()
    return HttpResponseRedirect(reverse('thank_you', kwargs={'id': docrequest.id}))
</snippet></ROW><ROW><id>19159426</id><snippet>def thank_you(request, id):

    docrequest = DocumentRequest.objects.get(pk=id)
    return render_to_response('thankyou.html',
                              {'docrequest' : docrequest },                            
                              context_instance=RequestContext(request))
</snippet></ROW><ROW><id>19159426</id><snippet>    docrequest = form.save()
    request.session['docrequest_id'] = docrequest.id
</snippet></ROW><ROW><id>19159426</id><snippet>def thank_you(request):
    if not 'docrequest_id' in request.session:
        return HttpResponseForbidden    
    docrequest = DocumentRequest.objects.get(request.session['docrequest_id'])
</snippet></ROW><ROW><id>19159631</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; A, B, C = np.polyfit([1,2,3],[4,7,12],2)
&gt;&gt;&gt; print A, B, C
1.0 -4.2727620148e-15 3.0
&gt;&gt;&gt; print A, 'x^2 +', B, 'x +', C
1.0 x^2 + -4.2727620148e-15 x + 3.0
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19159692</id><snippet>ord()</snippet></ROW><ROW><id>19159692</id><snippet>import org.python.core.PyException;
import org.python.core.PyCode;
import org.python.util.PythonInterpreter;

public class Main {
  public static void main(String[] args) throws PyException {

    PythonInterpreter interp = new PythonInterpreter();
    System.out.println("ā".codePointAt(0));    // outputs 257
    interp.exec("print ord('ā')");             // outputs 63

    String s = "print ord(u'ā')";
    PyCode code = interp.compile(s);
    interp.exec(code);                         // outputs 257
  }
}
</snippet></ROW><ROW><id>19159720</id><snippet>sentinel = object()

if r is sentinel:
    raise Exception(..)
</snippet></ROW><ROW><id>19159720</id><snippet>object()</snippet></ROW><ROW><id>19159720</id><snippet>object()</snippet></ROW><ROW><id>19159825</id><snippet>ls1</snippet></ROW><ROW><id>19159825</id><snippet>.append()</snippet></ROW><ROW><id>19159825</id><snippet>ls1</snippet></ROW><ROW><id>19159825</id><snippet>P81.append(ls2[9])
P81.append(ls2[8])
</snippet></ROW><ROW><id>19159825</id><snippet>P10</snippet></ROW><ROW><id>19159825</id><snippet>key[0]</snippet></ROW><ROW><id>19159825</id><snippet>leftShift</snippet></ROW><ROW><id>19159825</id><snippet>ls1</snippet></ROW><ROW><id>19159825</id><snippet>P81.append(ls1[9])
</snippet></ROW><ROW><id>19159825</id><snippet>ls1[0]</snippet></ROW><ROW><id>19159825</id><snippet>ls1[1]</snippet></ROW><ROW><id>19159825</id><snippet>ls2</snippet></ROW><ROW><id>19159825</id><snippet>leftShift</snippet></ROW><ROW><id>19159904</id><snippet>@simple_decorator
def my_simple_logging_decorator(func):
    def you_will_never_see_this_name(*args, **kwargs):
        print 'calling {}'.format(func.__name__)
        return func(*args, **kwargs)
    return you_will_never_see_this_name
</snippet></ROW><ROW><id>19159904</id><snippet>@simple_decorator
def my_simple_logging_decorator(func):
    def you_will_never_see_this_name(*args, **kwargs):
# Added/modified code starts here
        if globalvar:
            print 'calling {}'.format(func.__name__)
# End modified code
        return func(*args, **kwargs)
    return you_will_never_see_this_name
</snippet></ROW><ROW><id>19160549</id><snippet>  titlex = info.find('.//xmlns:Title', namespaces=nsmap)
  title = titlex.text if titlex != None else ''
</snippet></ROW><ROW><id>19160742</id><snippet>In [6]: df['end_time'] = pd.to_datetime(df['end_time'],unit='s')

In [7]: df['start_time'] = pd.to_datetime(df['end_time'],unit='s')

In [8]: df
Out[8]: 
             end_time          start_time
0 2013-10-03 13:04:41 2013-10-03 13:04:41
1 2013-10-03 13:04:42 2013-10-03 13:04:42
2 2013-10-03 13:04:43 2013-10-03 13:04:43
3 2013-10-03 13:04:44 2013-10-03 13:04:44
4 2013-10-03 13:04:45 2013-10-03 13:04:45
5 2013-10-03 13:04:46 2013-10-03 13:04:46
6 2013-10-03 13:04:47 2013-10-03 13:04:47
7 2013-10-03 13:04:48 2013-10-03 13:04:48
8 2013-10-03 13:04:49 2013-10-03 13:04:49
9 2013-10-03 13:04:50 2013-10-03 13:04:50
</snippet></ROW><ROW><id>19160742</id><snippet>datetime.fromtimestamp</snippet></ROW><ROW><id>19160742</id><snippet>In [21]: DatetimeIndex(pd.to_datetime(df['end_time'],unit='s'),tz='UTC').tz_convert('EST')
Out[21]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2013-10-03 08:04:41, ..., 2013-10-03 08:04:50]
Length: 10, Freq: None, Timezone: EST
In [32]: DataFrame(dict(end_time = DatetimeIndex(pd.to_datetime(df['end_time'],unit='s'),tz='UTC').tz_convert('Asia/Kolkata').asobject))
</snippet></ROW><ROW><id>19160742</id><snippet>                    end_time
 0  2013-10-03 18:34:41+05:30
 1  2013-10-03 18:34:42+05:30
 2  2013-10-03 18:34:43+05:30
 3  2013-10-03 18:34:44+05:30
 4  2013-10-03 18:34:45+05:30
 5  2013-10-03 18:34:46+05:30
 6  2013-10-03 18:34:47+05:30
 7  2013-10-03 18:34:48+05:30
 8  2013-10-03 18:34:49+05:30
 9  2013-10-03 18:34:50+05:30
</snippet></ROW><ROW><id>19160836</id><snippet>&gt;&gt;&gt; c = collections.Counter(item for sublist in data for item in sublist)
&gt;&gt;&gt; c
Counter({'13': 9, '3': 9, '7': 8, '4': 7, '1': 2, '8': 1, '2': 1})
&gt;&gt;&gt; c.most_common(1)[0]
('13', 9)
</snippet></ROW><ROW><id>19160836</id><snippet>3</snippet></ROW><ROW><id>19161047</id><snippet>import win32api

from win32con import MB_SYSTEMMODAL

response = win32api.MessageBox(0, "Did you hear the Buzzer?", "Buzzer Test", 4, MB_SYSTEMMODAL)
</snippet></ROW><ROW><id>19161109</id><snippet>import re
m = re.match('(.+) \((.+)\)', obj.value)
if m:
    city, country = m.groups()
else:
    city, country = obj.value, None
</snippet></ROW><ROW><id>19161171</id><snippet>slice_index</snippet></ROW><ROW><id>19161171</id><snippet>image_plane_widget1 = engine.scenes[0].children[1].children[0].children[0]
image_plane_widget1.ipw.origin = array([  0.5,  21. ,   0.5])
image_plane_widget1.ipw.point1 = array([  0.5,  21. ,  50.5])
image_plane_widget1.ipw.point2 = array([ 50.5,  21. ,   0.5])
image_plane_widget1.ipw.origin = array([  0.5,  21. ,   0.5])
image_plane_widget1.ipw.point1 = array([  0.5,  21. ,  50.5])
image_plane_widget1.ipw.point2 = array([ 50.5,  21. ,   0.5])
</snippet></ROW><ROW><id>19161232</id><snippet>getIndex(...)</snippet></ROW><ROW><id>19161232</id><snippet>[]</snippet></ROW><ROW><id>19161232</id><snippet>valgrind</snippet></ROW><ROW><id>19161232</id><snippet>valgrind</snippet></ROW><ROW><id>19161232</id><snippet>-g -O0</snippet></ROW><ROW><id>19161690</id><snippet>np.ix_</snippet></ROW><ROW><id>19161690</id><snippet>Y[np.ix_([0,3],[0,3])]
</snippet></ROW><ROW><id>19161690</id><snippet>In [25]: Y = np.arange(16).reshape(4,4)
In [26]: Y[np.ix_([0,3],[0,3])]
Out[26]:
array([[ 0,  3],
       [12, 15]])
</snippet></ROW><ROW><id>19161859</id><snippet>import matplotlib.pyplot as plt
import numpy as np

Nrows = 2
Ncols = 3

fig, ax = plt.subplots(Nrows, Ncols,
                       sharex=True,
                       sharey=True)
plt.subplots_adjust(hspace=0,
                    wspace=0)


for i in range(Nrows):
    for j in range(Ncols):
        if i == 0:
            ax[i,j].xaxis.set_ticks_position('top')
            plt.setp(ax[i,j].get_xticklabels(), visible=False)
        elif i == Nrows-1:
            ax[i,j].xaxis.set_ticks_position('bottom')
        else:
            ax[i,j].xaxis.set_ticks_position('none')

        if j == 0:
            ax[i,j].yaxis.set_ticks_position('left')
        elif j == Ncols-1:
            ax[i,j].yaxis.set_ticks_position('right')
            plt.setp(ax[i,j].get_yticklabels(), visible=False)
        else:
            ax[i,j].yaxis.set_ticks_position('none')
</snippet></ROW><ROW><id>19161981</id><snippet>("\n".join(map(str, listname)))
</snippet></ROW><ROW><id>19161997</id><snippet>dt = datetime.datetime.strptime('2010-08-30 15:02:55.730', '%Y-%m-%d %H:%M:%S.%f')
</snippet></ROW><ROW><id>19162026</id><snippet>scrapy</snippet></ROW><ROW><id>19162026</id><snippet>scrapy.contrib.closespider.CloseSpider</snippet></ROW><ROW><id>19162026</id><snippet>CLOSESPIDER_TIMEOUT</snippet></ROW><ROW><id>19162026</id><snippet>CLOSESPIDER_ITEMCOUNT</snippet></ROW><ROW><id>19162026</id><snippet>CLOSESPIDER_PAGECOUNT</snippet></ROW><ROW><id>19162026</id><snippet>CLOSESPIDER_ERRORCOUNT</snippet></ROW><ROW><id>19162222</id><snippet>create</snippet></ROW><ROW><id>19162222</id><snippet>    john = speaker.objects.create(
        name = "John Smith",
        email = "john@john.com"
    )

    unit = talk.objects.create(
        title = "Writing unit tests",
        summary = "How to write unit tests",
    )

    unit.speakers.add(john)
</snippet></ROW><ROW><id>19162356</id><snippet>DEBUG = True</snippet></ROW><ROW><id>19162446</id><snippet>for line in jvmLines:
    if line.find('name=') &gt; 0:
        print line
</snippet></ROW><ROW><id>19162679</id><snippet>casting integer to string:
myOldIntValue|string

casting string to integer:
myOldStrValue|int
</snippet></ROW><ROW><id>19162900</id><snippet>runfirst</snippet></ROW><ROW><id>19162900</id><snippet>runthird</snippet></ROW><ROW><id>19162900</id><snippet>while True</snippet></ROW><ROW><id>19162900</id><snippet>def runfirst():
    do some stuff
def runsecond():
    do some different stuff
def runthird():
    do some more stuff

while True:
    runfirst()
    runsecond()
    runthird()
</snippet></ROW><ROW><id>19162964</id><snippet>root = Tk().withdraw()</snippet></ROW><ROW><id>19162964</id><snippet>package require snack
snack::sound snd -file $filename
snd play -blocking 0
after 5000 {set waiting 1}
vwait waiting
</snippet></ROW><ROW><id>19162964</id><snippet>snd</snippet></ROW><ROW><id>19162964</id><snippet>vwait waiting</snippet></ROW><ROW><id>19163020</id><snippet>"{:&gt;10d}".format(n)</snippet></ROW><ROW><id>19163020</id><snippet>"{:&gt;10s}".format(s)</snippet></ROW><ROW><id>19163020</id><snippet>def align(word, number):
    return "{:&lt;10s}{:&gt;10d}".format(word, number)
</snippet></ROW><ROW><id>19163020</id><snippet>align('Hello', 3454)
align('nice', 222)
align('bye', 45433)
align('well', 3424)
</snippet></ROW><ROW><id>19163167</id><snippet>lists = [e['val'] for e in dl]
idx_to_remove = [i for i, elem in enumerate(map(any, zip(*lists))) if not elem]
</snippet></ROW><ROW><id>19163167</id><snippet>for l in lists:
    l[:] = [elem for i, elem in enumerate(l) if i not in idx_to_remove]
</snippet></ROW><ROW><id>19163167</id><snippet>&gt;&gt;&gt; pprint.pprint(dl)
[{'plat': 'unix', 'val': ['', '1ju', '', '202', '', '']},
 {'plat': 'Ios', 'val': ['', '', 'Ty', '', 'Jk', '']},
 {'plat': 'NT', 'val': ['', 1, '', '202', '', '']},
 {'plat': 'centOs', 'val': ['', '', '', '202', '', '']},
 {'plat': 'ubuntu', 'val': ['KL', '1', '', '', '', '9i0']}]
</snippet></ROW><ROW><id>19163175</id><snippet>example_dataset = [(0, 629), (1, 546), (2, 255), (3, 72), (4, 27), (5, 2), (6, 4), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0)]
another_example_dataset = [(0, 331), (1, 532), (2, 398), (3, 180), (4, 74), (5, 17), (6, 3), (7, 0), (8, 0), (9, 0), (10, 0), (11, 0), (12, 0), (13, 0), (14, 0), (15, 0)]

def CalculateIndex(dataset):
    sum5 = 0
    for i in range(15,-1,-1):
        sum5 += dataset[i][1]
        if sum5 &gt; 76.75:
            return i+1

print "index for example_dataset is: ", CalculateIndex(example_dataset)
print "index for another_example_dataset is: ", CalculateIndex(another_example_dataset)
</snippet></ROW><ROW><id>19163300</id><snippet>&gt;&gt;&gt; a_list = [(20, 1), (16, 0), (21, 0), (20, 0), (24, 0), (25, 1)]
&gt;&gt;&gt; a = min(x[1] for x in a_list)
&gt;&gt;&gt; max(b for b in a_list if b[1] == a)
(24, 0)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19163400</id><snippet>Leaf.objects.select_related().all()
</snippet></ROW><ROW><id>19163763</id><snippet>print line</snippet></ROW><ROW><id>19163763</id><snippet>buf</snippet></ROW><ROW><id>19163763</id><snippet>for line in f:
    # do search stuff
</snippet></ROW><ROW><id>19163763</id><snippet>buf = f.readlines(buffersize)
while buf:
    for line in buf:
        # do search stuff
    buf = f.readlines(buffersize)
</snippet></ROW><ROW><id>19163834</id><snippet>event</snippet></ROW><ROW><id>19163834</id><snippet>def cb(self):
    print "variable is", self.var.get()
</snippet></ROW><ROW><id>19164243</id><snippet>strsplit</snippet></ROW><ROW><id>19164243</id><snippet>table(unlist(lapply(da, strsplit, ""), use.names = FALSE))
# 
#  :  D  E  G  H  I  K  L  M  N  P  Q  R  S  T  U  V  X  Y  Z 
#  1  1  5  1  2  1  1  3 11 12  9  4  8  6  7  2  3  2  2  3 
</snippet></ROW><ROW><id>19164487</id><snippet>{"query":
"
CYPHER 1.9
START user = node(*)
WHERE user.password? = {password}   // &lt;---- quotes removed here
RETURN user
",
"params":
    { "password":
      "$2a$12$5.OLqPRaoAhItdfAgNZZYeCf8TJzSM2aMmnK8a.K2DdrKOoMhKOpi" } }
</snippet></ROW><ROW><id>19164680</id><snippet>for i in csum:
    ax.plot(x, csum[i])
</snippet></ROW><ROW><id>19164680</id><snippet>for i in range(len(csum)):
</snippet></ROW><ROW><id>19164680</id><snippet>for y in csum:
    ax.plot(x, y)
</snippet></ROW><ROW><id>19164717</id><snippet>parser = argparse.ArgumentParser()
parser.add_argument("-r", "--reverse-dns", help="rDNS on host", action="store_true")
parser.add_argument("-s", "--shodan", help="perform SHODAN query on discovered IPs", action="store_true")
parser.add_argument("targets", help="IPv4 addresses to search for", nargs="+")
</snippet></ROW><ROW><id>19164717</id><snippet>--shodan</snippet></ROW><ROW><id>19164717</id><snippet>nargs='+'</snippet></ROW><ROW><id>19164717</id><snippet>targets</snippet></ROW><ROW><id>19164717</id><snippet>subparsers = parser.add_subparsers()
shodan_parser = subparsers.add_parser("shodan", help="SHODAN options")
...
</snippet></ROW><ROW><id>19164717</id><snippet>(venv)[nott@admin gumdrop]$ python gumdrop.py google.ca --shodan --html
....
</snippet></ROW><ROW><id>19164717</id><snippet>targets=['google.ca']</snippet></ROW><ROW><id>19164717</id><snippet>shodan=True</snippet></ROW><ROW><id>19164717</id><snippet>--html</snippet></ROW><ROW><id>19164717</id><snippet>(venv)[nott@admin gumdrop]$ python gumdrop.py --shodan --html google.ca askjeeves.ca
...
</snippet></ROW><ROW><id>19164717</id><snippet>shodan=True</snippet></ROW><ROW><id>19164717</id><snippet>--html</snippet></ROW><ROW><id>19164717</id><snippet>target=['google.ca']</snippet></ROW><ROW><id>19164717</id><snippet>askjeeves.ca</snippet></ROW><ROW><id>19164717</id><snippet>python gumdrop.py google.ca askjeeves.ca shodan --html
python gumdrop.py --shodan google.ca shodan --html
</snippet></ROW><ROW><id>19164717</id><snippet>--html</snippet></ROW><ROW><id>19164717</id><snippet>args.shodan.html</snippet></ROW><ROW><id>19164717</id><snippet>args.html</snippet></ROW><ROW><id>19164862</id><snippet>print</snippet></ROW><ROW><id>19164862</id><snippet>print ("%.2f centimeters is the same as %.2f meters." % (centimeter, result))</snippet></ROW><ROW><id>19164862</id><snippet>%d</snippet></ROW><ROW><id>19164862</id><snippet>%f</snippet></ROW><ROW><id>19164862</id><snippet>.2</snippet></ROW><ROW><id>19164924</id><snippet>&gt;&gt;&gt; var1 = {'OS_TYPE': 'LINUX', 'MY_SUBTYPE': 'abc', 'BUILD_ID': 'AAA', 'C_ID': '9999'}
&gt;&gt;&gt; print var1['MY_SUBTYPE']
abc
</snippet></ROW><ROW><id>19164971</id><snippet>0006</snippet></ROW><ROW><id>19164971</id><snippet>0007</snippet></ROW><ROW><id>19164971</id><snippet>0012</snippet></ROW><ROW><id>19164971</id><snippet>0007</snippet></ROW><ROW><id>19164971</id><snippet>0011</snippet></ROW><ROW><id>19165440</id><snippet>scipy.optimize.curve_fit</snippet></ROW><ROW><id>19165440</id><snippet>f</snippet></ROW><ROW><id>19165440</id><snippet>numpy.polyfit</snippet></ROW><ROW><id>19165440</id><snippet>poly1d</snippet></ROW><ROW><id>19165440</id><snippet>import numpy as np
import matplotlib.pyplot as plt

points = np.array([(1, 1), (2, 4), (3, 1), (9, 3)])
# get x and y vectors
x = points[:,0]
y = points[:,1]

# calculate polynomial
z = np.polyfit(x, y, 3)
f = np.poly1d(z)

# calculate new x's and y's
x_new = np.linspace(x[0], x[-1], 50)
y_new = f(x_new)

plt.plot(x,y,'o', x_new, y_new)
plt.xlim([x[0]-1, x[-1] + 1 ])
plt.show()
</snippet></ROW><ROW><id>19165586</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>19165586</id><snippet>list.append</snippet></ROW><ROW><id>19165586</id><snippet>&gt;&gt;&gt; b = dict.fromkeys([1,2,3,4], [])
&gt;&gt;&gt; [id(x) for x in b.values()]
[158948300, 158948300, 158948300, 158948300]
</snippet></ROW><ROW><id>19165586</id><snippet>&gt;&gt;&gt; b = {k:[] for k in xrange(1, 5)}
&gt;&gt;&gt; [id(x) for x in b.values()]
[158945580, 158948396, 158948108, 158946764]
</snippet></ROW><ROW><id>19165586</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>19165586</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dic = defaultdict(list)
&gt;&gt;&gt; dic[1].append(1)
&gt;&gt;&gt; dic[2].append(2)
&gt;&gt;&gt; dic
defaultdict(&lt;type 'list'&gt;, {1: [1], 2: [2]})
&gt;&gt;&gt; dic[3]
[]
</snippet></ROW><ROW><id>19165763</id><snippet>form.validate()</snippet></ROW><ROW><id>19165763</id><snippet>{% if field.errors %}
    &lt;span class="error help-inline"&gt;{{ field.errors|join(', ') }}&lt;/span&gt;
{% endif %}
</snippet></ROW><ROW><id>19165763</id><snippet> return render_template('users/form.html', form=form) 
</snippet></ROW><ROW><id>19165794</id><snippet>django.core.urlresolvers.resolve</snippet></ROW><ROW><id>19165794</id><snippet>from django.utils.translation import get_language
import re

def strip_lang(path):
    pattern = '^(/%s)/' % get_language()
    match = re.search(pattern, path)
    if match is None:
        return path
    return path[match.end(1):]
</snippet></ROW><ROW><id>19165794</id><snippet>def your_view(request):
    next = strip_lang(request.path)
    return render(request,  "form.html", {'next': next})
</snippet></ROW><ROW><id>19165794</id><snippet>&lt;input name="next" type="hidden" value="{{ next }}"/&gt;
</snippet></ROW><ROW><id>19165794</id><snippet>&lt;input name="next" type="hidden" value="{{ request.path|strip_lang }}"/&gt;
</snippet></ROW><ROW><id>19165991</id><snippet>cv2.imread(image)</snippet></ROW><ROW><id>19165991</id><snippet>cv2.resize(...)</snippet></ROW><ROW><id>19165991</id><snippet>cv2.imwrite(...)</snippet></ROW><ROW><id>19165991</id><snippet>import sys, cv2, numpy
from SRM import SRM

"""Main Program"""

filename = "snap.jpeg"
Q = 64

img = cv2.imread(filename)
name = filename[:-4]


if img.shape[0] &gt; 200 or img.shape[1] &gt; 200:
    ratio = img.shape[0] * 1. / img.shape[1]
    size = (int(ratio * 200), 200)

    img = cv2.resize(img, size, interpolation=cv2.INTER_LANCZOS4)

    srm = SRM(img, Q)

    srm.initialization()
    srm.segmentation()
    classes, srmMap = srm.map() # Map is a python function, use different variable name
    srmMap = srmMap.astype('uint8') # or you can try other opencv supported type 
    # I suppose that srmMap is your image returned as numpy array
    cv2.imwrite('name.jpeg', srmMap)
    # or
    cv2.imshow('image', srmMap)
    cv2.waitKey(0)
</snippet></ROW><ROW><id>19166321</id><snippet>items = set(items)
fruits = set(foods_dict['fruit']) &amp; items
veggies = set(foods_dict['veg']) &amp; items
others = items - fruits - veggies
</snippet></ROW><ROW><id>19166321</id><snippet>item in foods_dict['fruit']</snippet></ROW><ROW><id>19166321</id><snippet>In [5]: %%timeit
   ...: items2 = set(items)
   ...: fruits = set(foods_dict['fruit']) &amp; items2
   ...: veggies = set(foods_dict['veg']) &amp; items2
   ...: others = items2 - fruits - veggies
   ...: 
1000000 loops, best of 3: 1.75 us per loop

In [6]: %%timeit
   ...: fruits = set()
   ...: veggies = set()
   ...: others = set()
   ...: for item in items:
   ...:     if item in foods_dict.get('fruit'):
   ...:         fruits.add(item)
   ...:     elif item in foods_dict.get('veg'):
   ...:         veggies.add(item)
   ...:     else:
   ...:         others.add(item)
   ...: 
100000 loops, best of 3: 2.57 us per loop

In [7]: %%timeit
   ...: veggies = set(elem for elem in items if elem in foods_dict['veg'])
   ...: fruits = set(elem for elem in items if elem in foods_dict['fruit'])
   ...: others = set(items) - veggies - fruits
   ...: 
100000 loops, best of 3: 3.34 us per loop
</snippet></ROW><ROW><id>19166321</id><snippet>In [9]: foods_dict = {}
   ...: foods_dict['fruit'] = list(range(0, 10000, 2))
   ...: foods_dict['veg'] = list(range(1, 10000, 2))

In [10]: items = list(range(5, 10000, 13))  #some odd some even

In [11]: %%timeit
    ...: fruits = set()
    ...: veggies = set()
    ...: others = set()
    ...: for item in items:
    ...:     if item in foods_dict.get('fruit'):
    ...:         fruits.add(item)
    ...:     elif item in foods_dict.get('veg'):
    ...:         veggies.add(item)
    ...:     else:
    ...:         others.add(item)
    ...: 
10 loops, best of 3: 68.8 ms per loop

In [12]: %%timeit
    ...: veggies = set(elem for elem in items if elem in foods_dict['veg'])
    ...: fruits = set(elem for elem in items if elem in foods_dict['fruit'])
    ...: others = set(items) - veggies - fruits
    ...: 
10 loops, best of 3: 99.9 ms per loop

In [13]: %%timeit
    ...: items2 = set(items)
    ...: fruits = set(foods_dict['fruit']) &amp; items2
    ...: veggies = set(foods_dict['veg']) &amp; items2
    ...: others = items2 - fruits - veggies
    ...: 
1000 loops, best of 3: 445 us per loop
</snippet></ROW><ROW><id>19166471</id><snippet>+</snippet></ROW><ROW><id>19166471</id><snippet>-</snippet></ROW><ROW><id>19166471</id><snippet>:version</snippet></ROW><ROW><id>19166471</id><snippet>+python</snippet></ROW><ROW><id>19166471</id><snippet>+python/dyn</snippet></ROW><ROW><id>19166471</id><snippet>:version</snippet></ROW><ROW><id>19166471</id><snippet>/nodefaultlib:python27.lib</snippet></ROW><ROW><id>19166602</id><snippet>(your-env)[me@my-machine]~/path/to/twitter$ python setup.py develop
</snippet></ROW><ROW><id>19166602</id><snippet>python setup.py develop</snippet></ROW><ROW><id>19166714</id><snippet>supported = ['.mp3','.ogg','.wma'] #put all known here

for root, dirs, files in os.walk("."):
    for filename in files:
        if filename.lower() in supported: #test if filename ext is in supported
            fullname = os.path.join(root, filename)
</snippet></ROW><ROW><id>19166776</id><snippet>#</snippet></ROW><ROW><id>19166821</id><snippet>Clovek</snippet></ROW><ROW><id>19166821</id><snippet>ucitel</snippet></ROW><ROW><id>19166821</id><snippet>student</snippet></ROW><ROW><id>19166821</id><snippet>get_all_field_names()</snippet></ROW><ROW><id>19167021</id><snippet>quadrant = [ (lambda sign: lambda x, y: (sign[0] * x, sign[1] * y) ) (sign)
    for sign in ((1, -1), (1, 1), (-1, 1), (-1, -1))]
</snippet></ROW><ROW><id>19167021</id><snippet>def wrapper (sign):
    def makeQuadrant (x, y):
        return (sign [0] * x, sign [1] * y)
    return makeQuadrant

quadrant = [wrapper (sign) for sign in ((1, -1), (1, 1), (-1, 1), (-1, -1))]
</snippet></ROW><ROW><id>19167021</id><snippet>quadrant = [lambda x, y, sign = sign: (sign[0] * x, sign[1] * y)
    for sign in ((1, -1), (1, 1), (-1, 1), (-1, -1))]
</snippet></ROW><ROW><id>19167021</id><snippet>quadrant = [lambda x, y: (sign[0] * x, sign[1] * y, id (sign) )
    for sign in ((1, -1), (1, 1), (-1, 1), (-1, -1))]

for q in quadrant:
    print (id (q) )
</snippet></ROW><ROW><id>19167021</id><snippet>sign</snippet></ROW><ROW><id>19167021</id><snippet>sign</snippet></ROW><ROW><id>19167021</id><snippet>(-1, -1)</snippet></ROW><ROW><id>19167021</id><snippet>quadrant = [lambda x, y: (sign[0] * x, sign[1] * y, id (sign) )
    for sign in ((1, -1), (1, 1), (-1, 1), (-1, -1))]

for q in quadrant:
    print (q (2, 3) )
</snippet></ROW><ROW><id>19167021</id><snippet>fs = [lambda: x for x in range (10) ]
for f in fs: print (f () )
</snippet></ROW><ROW><id>19167298</id><snippet>radius, height = [float(part) for part in input("What is the radius and height of the cylinder? (e.g. 32, 15): ").split(',')]
</snippet></ROW><ROW><id>19167298</id><snippet>split</snippet></ROW><ROW><id>19167298</id><snippet>for</snippet></ROW><ROW><id>19167546</id><snippet>del</snippet></ROW><ROW><id>19167546</id><snippet>import json

with open('data.json') as json_data:
    data = json.load(json_data)
    for element in data: 
        del element['imageData'] 
</snippet></ROW><ROW><id>19167664</id><snippet>PRIVMSG #mychannel Link infos: Title of Page\r\n
</snippet></ROW><ROW><id>19167664</id><snippet>#mychannel</snippet></ROW><ROW><id>19167664</id><snippet>Link</snippet></ROW><ROW><id>19167664</id><snippet>PRIVMSG #mychannel :Link infos: Title of Page\r\n
</snippet></ROW><ROW><id>19167664</id><snippet>irc.send("PRIVMSG %s :Link infos:" % (channel) + urlTitle.contents[0] + "\r\n" )
</snippet></ROW><ROW><id>19167664</id><snippet>PRIVMSG</snippet></ROW><ROW><id>19167903</id><snippet>catch_warnings</snippet></ROW><ROW><id>19167903</id><snippet>simplefilter</snippet></ROW><ROW><id>19167903</id><snippet>    with warnings.catch_warnings():
      warnings.simplefilter("ignore")
      data = np.loadtxt(myfile, unpack=True)
</snippet></ROW><ROW><id>19168016</id><snippet>&gt;&gt;&gt; import urllib.request
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named request
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19168016</id><snippet>&gt;&gt;&gt; import urllib.request
&gt;&gt;&gt; urllib.request
&lt;module 'urllib.request' from '/usr/lib/python3.3/urllib/request.py'&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19168109</id><snippet>n=440

while (n&lt;=880):
    print n
    n=n*(2**(1.0/12.0))
</snippet></ROW><ROW><id>19168128</id><snippet>keys</snippet></ROW><ROW><id>19168128</id><snippet>list1</snippet></ROW><ROW><id>19168128</id><snippet>dict1</snippet></ROW><ROW><id>19168128</id><snippet>in</snippet></ROW><ROW><id>19168128</id><snippet>in</snippet></ROW><ROW><id>19168128</id><snippet>keys</snippet></ROW><ROW><id>19168128</id><snippet>keys()</snippet></ROW><ROW><id>19168128</id><snippet>in</snippet></ROW><ROW><id>19168128</id><snippet>keys()</snippet></ROW><ROW><id>19168128</id><snippet>for key in range(0,nDicts):
    for x in list1[key]:
        if x in dict1:
            resultDict={list1[key][x]:dict1[x]}
            print resultDict
</snippet></ROW><ROW><id>19168128</id><snippet>list1</snippet></ROW><ROW><id>19168128</id><snippet>for list1_dict in list1:
    for x in list1_dict:
        if x in dict1:
            resultDict = {list_dict[x]: dict1[x]}
            print resultDict
</snippet></ROW><ROW><id>19168128</id><snippet>for list1_dict in list1:
    for k, v in list1_dict.iteritems():
        if k in dict1:
            resultDict = {v: dict1[k]}
            print resultDict
</snippet></ROW><ROW><id>19168128</id><snippet>for list1_dict in list1:
    for k, v in list1_dict.iteritems():
        try:
            resultDict = {v: dict1[k]}
            print resultDict
        except KeyError:
            pass
</snippet></ROW><ROW><id>19168259</id><snippet>plt.quiverkey(QV1, 1.2, 0.515, 2, 'arrow 1', coordinates='data')
plt.quiverkey(QV2, 1.2, 0.520, 2, 'arrow 2', coordinates='data')
plt.quiverkey(QV3, 1.2, 0.525, 2, 'arrow 3', coordinates='data')
</snippet></ROW><ROW><id>19168264</id><snippet> from pandas.io.data import get_data_yahoo
 import matplotlib.pyplot as plt 
 data = get_data_yahoo("ADS", start = '2012-01-01', end = '2012-12-31' [['Close','Volume']] 
 ax = data.plot(subplots = True, figsize = (8, 8)); 
 plt.title('Adidas-Aktie 2012')
 plt.legend(loc = 'best')
 ax[0].annotate('your text',xy =(locx,locy), xytext=(locx,locy), arrowprops = dict(facecolor = 'black')) # assuming the you want to annotate the first plot
 plt.show()
</snippet></ROW><ROW><id>19168388</id><snippet>os.system()</snippet></ROW><ROW><id>19168388</id><snippet>grep</snippet></ROW><ROW><id>19168388</id><snippet>stdout</snippet></ROW><ROW><id>19168388</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>19168388</id><snippet>os.listdir()</snippet></ROW><ROW><id>19168388</id><snippet>for filename in os.listdir('/etc/init.d/'):
    if 'jboss-' in filename and not filename.startswith('jboss-'):
        print filename
</snippet></ROW><ROW><id>19168388</id><snippet>grep -vw jboss-</snippet></ROW><ROW><id>19168388</id><snippet>jboss</snippet></ROW><ROW><id>19168562</id><snippet>import zmq.green as zmq</snippet></ROW><ROW><id>19168651</id><snippet>pair1</snippet></ROW><ROW><id>19168651</id><snippet>pair</snippet></ROW><ROW><id>19168651</id><snippet>p1 = {'pair': ([2, 3, 4], [5, 6, 7])}
p2 = {'pair': ([9, 10, 11], [12, 13, 14])}
p3 = {'pair': ([12, 20, 30], [17, 8, 30])}

def find_and_set_mean(a_dictionary):
    a_dictionary['mean']=np.mean(a_dictionary['pair']) 

find_and_set_mean(p1)
find_and_set_mean(p2)
find_and_set_mean(p3)
</snippet></ROW><ROW><id>19168651</id><snippet>{'pair': ([2, 3, 4], [5, 6, 7]), 'mean': 4.5}
{'pair': ([9, 10, 11], [12, 13, 14]), 'mean': 11.5}
{'pair': ([12, 20, 30], [17, 8, 30]), 'mean': 19.5}
</snippet></ROW><ROW><id>19168651</id><snippet>class PairObject(object):

    def __init__(self, _part1, _part2):
        self.part1 = _part1
        self.part2 = _part2

    def pair(self):
        return (self.part1, self.part2)

    def mean(self):
        return np.mean((self.part1, self.part2)) 

# Then use it like this:    
p1 = PairObject([2, 3, 4], [5, 6, 7])
p1.pair() # returns ([2, 3, 4], [5, 6, 7])
p1.mean() # returns 4.5
</snippet></ROW><ROW><id>19168656</id><snippet>current_page</snippet></ROW><ROW><id>19168656</id><snippet>#!/usr/bin/python

from bs4 import BeautifulSoup
import urllib2
import itertools
import random
import urlparse


class Crawler(object):
"""docstring for Crawler"""

def __init__(self):
    self.soup = None                                        # Beautiful Soup object
    self.current_page   = "http://www.python.org/"          # Current page's address
    self.links          = set()                             # Queue with every links fetched
    self.visited_links  = set()

    self.counter = 0 # Simple counter for debug purpose

def open(self):

    # Open url
    print self.counter , ":", self.current_page
    res = urllib2.urlopen(self.current_page)
    html_code = res.read()
    self.visited_links.add(self.current_page)

    # Fetch every links
    self.soup = BeautifulSoup(html_code)

    page_links = []
    try :
        for link in [h.get('href') for h in self.soup.find_all('a')]:
            print "Found link: '" + link + "'"
            if link.startswith('http'):
                page_links.append(link)
                print "Adding link" + link + "\n"
            elif link.startswith('/'):
                parts = urlparse.urlparse(self.current_page)
                page_links.append(parts.scheme + '://' + parts.netloc + link)
                print "Adding link " + parts.scheme + '://' + parts.netloc + link + "\n"
            else:
                page_links.append(self.current_page+link)
                print "Adding link " + self.current_page+link + "\n"

    except Exception, ex: # Magnificent exception handling
        print ex

    # Update links 
    self.links = self.links.union( set(page_links) )

    # Choose a random url from non-visited set
    self.current_page = random.sample( self.links.difference(self.visited_links),1)[0]
    self.counter+=1

def run(self):

    # Crawl 3 webpages (or stop if all url has been fetched)
    while len(self.visited_links) &lt; 3 or (self.visited_links == self.links):
        self.open()

    for link in self.links:
        print link

if __name__ == '__main__':
    C = Crawler()
    C.run()
</snippet></ROW><ROW><id>19168972</id><snippet>class TestConnector(unittest.TestCase):

    def setUp(self):
        [...]

    def test_connections(self):

        with open('URL_list.txt') as f:
            for url in f:
                conn = Connector(self.user)
                self.assertNotEqual(conn.read(url.strip()), None)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>19168972</id><snippet>class TestConnector(unittest.TestCase):
    def setUp(self):
        [...]

def generate_test(url):
    def test(self):
        conn = Connector(self.user)
        self.assertNotEqual(conn.read(url), None)

if __name__ == '__main__':
    with open('URL_list.txt') as f:
        for i, url in enumerate(f):
            test_name = 'test_{}'.format(i)
            setattr(TestConnector, test_name, generate_test(url.strip()))

    unittest.main()
</snippet></ROW><ROW><id>19169052</id><snippet>from lxml import html

url = 'http://facts-and-joy.ru/'
content = html.parse(url)
rsslinks = content.xpath('//link[@type="application/rss+xml"]')

for link in rsslinks:
    print link.get('title')
    print html.tostring(link, encoding="utf-8")
</snippet></ROW><ROW><id>19169052</id><snippet>Позитивное мышление RSS Feed
&lt;link rel="alternate" type="application/rss+xml" title="Позитивное мышление RSS Feed" href="http://facts-and-joy.ru/feed/"&gt;&#13;
</snippet></ROW><ROW><id>19169052</id><snippet>print html.tostring(link, encoding="utf-8")
</snippet></ROW><ROW><id>19169052</id><snippet>html.tostring()</snippet></ROW><ROW><id>19169052</id><snippet>etree.tostring()</snippet></ROW><ROW><id>19169052</id><snippet>etree.tostring(link, method="html", encoding="utf-8")</snippet></ROW><ROW><id>19169072</id><snippet>print("The volume of the cylinder is" + str(volume) + "{}cm\u00b3".format(volume))
</snippet></ROW><ROW><id>19169072</id><snippet>print("The volume of the cylinder is {}cm\u00b3".format(volume))
</snippet></ROW><ROW><id>19169072</id><snippet>.format()</snippet></ROW><ROW><id>19169072</id><snippet>print("The volume of the cylinder is {:.5f}cm\u00b3".format(volume))
</snippet></ROW><ROW><id>19169072</id><snippet>decimals = 5
print("The volume of the cylinder is {0:.{1}f}cm\u00b3".format(volume, decimals))
</snippet></ROW><ROW><id>19169072</id><snippet>&gt;&gt;&gt; volume = 193019.2896
&gt;&gt;&gt; decimals = 2
&gt;&gt;&gt; print("The volume of the cylinder is {0:.{1}f}cm\u00b3".format(volume, decimals))
The volume of the cylinder is 193019.29cm³
&gt;&gt;&gt; decimals = 3
&gt;&gt;&gt; print("The volume of the cylinder is {0:.{1}f}cm\u00b3".format(volume, decimals))
The volume of the cylinder is 193019.290cm³
</snippet></ROW><ROW><id>19169072</id><snippet>input()</snippet></ROW><ROW><id>19169072</id><snippet>int()</snippet></ROW><ROW><id>19169131</id><snippet>import sys
encoding = sys.stdout.encoding or 'utf-8'

...
print (path + "/@" + removeNS(name) + "=" + val).encode(encoding)
</snippet></ROW><ROW><id>19169142</id><snippet>&gt;&gt;&gt; print var1[BOOT][0]
trust\build\bin\AAAA\t.o
</snippet></ROW><ROW><id>19169180</id><snippet>if</snippet></ROW><ROW><id>19169180</id><snippet>def excel_style(row, col):
    """ Convert given row and column number to an Excel-style cell name. """
    quot, rem = divmod(col-1, 26)
    return((chr(quot-1 + ord('A')) if quot else '') +
           (chr(rem + ord('A')) + str(row)))

if __name__ == '__main__':
    addresses = [(1,   1), (1,  26),
                 (1,  27), (1,  52),
                 (1,  53), (1,  78),
                 (1,  79), (1, 104)]

    print '(row, col) --&gt; Excel'
    print '---------------------'
    for row, col in addresses:
        print '({:3d}, {:3d}) --&gt; {!r}'.format(row, col, excel_style(row, col))
</snippet></ROW><ROW><id>19169180</id><snippet>(row, col) --&gt; Excel
---------------------
(  1,   1) --&gt; 'A1'
(  1,  26) --&gt; 'Z1'
(  1,  27) --&gt; 'AA1'
(  1,  52) --&gt; 'AZ1'
(  1,  53) --&gt; 'BA1'
(  1,  78) --&gt; 'BZ1'
(  1,  79) --&gt; 'CA1'
(  1, 104) --&gt; 'CZ1'
</snippet></ROW><ROW><id>19169255</id><snippet>ipaddress</snippet></ROW><ROW><id>19169524</id><snippet>/home/abuzzar/djcode/mysites/polls/urls.py</snippet></ROW><ROW><id>19169524</id><snippet>urls(r'^$',view.index, name='index')
</snippet></ROW><ROW><id>19169524</id><snippet>url(r'^$',view.index, name='index')
</snippet></ROW><ROW><id>19169550</id><snippet>Host:</snippet></ROW><ROW><id>19169788</id><snippet>def partitions(n):
    if n == 0:
        yield []
    else:
        for partial_partition in partitions(n-1):
            for i in range(len(partial_partition)):
                copy_partition = partial_partition[:]
                copy_partition[i] += (n,)
                yield copy_partition
            yield partial_partition + [(n,)]
</snippet></ROW><ROW><id>19169810</id><snippet>settings.py</snippet></ROW><ROW><id>19169810</id><snippet>DEBUG = True</snippet></ROW><ROW><id>19169810</id><snippet>False</snippet></ROW><ROW><id>19169810</id><snippet> from settings import DEBUG

 if DEBUG:
     # Do this as it's development
 else:
     # Do this as it's production
</snippet></ROW><ROW><id>19169810</id><snippet>cache</snippet></ROW><ROW><id>19169810</id><snippet>DEBUG=False</snippet></ROW><ROW><id>19169921</id><snippet>everyone</snippet></ROW><ROW><id>19169921</id><snippet>__init__</snippet></ROW><ROW><id>19169921</id><snippet>self</snippet></ROW><ROW><id>19170047</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>19170047</id><snippet>print ("Getting MediaInfo...")
mediainfo_command = ["mediainfo", input_file_full]
mediainfo = subprocess.check_output(mediainfo_command)
</snippet></ROW><ROW><id>19170066</id><snippet>&gt;&gt;&gt; L = [[[1,2,3]], [[4,5,6]], [[7,8,9]]]
&gt;&gt;&gt; [x[0] for x in L]
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
</snippet></ROW><ROW><id>19170098</id><snippet>"nt|nv"  # rather than "nt" | " nv"
f_recs[f_recs['Behavior'].str.contains("nt|nv", na=False)]
</snippet></ROW><ROW><id>19170098</id><snippet>|</snippet></ROW><ROW><id>19170098</id><snippet>In [1]: "nt" | "nv"
TypeError: unsupported operand type(s) for |: 'str' and 'str'
</snippet></ROW><ROW><id>19170196</id><snippet>from math import pi

print("Welcome to the volume and surface area cylinder calculator powered by Python!")
response = raw_input("To calculate the volume type in 'vol', to calculate the surface area, type in 'SA': ").lower()
while response not in ["vol", "sa"]:
    print("Please enter a correct statement.")
    response = raw_input("To calculate the volume type in 'vol', to calculate the surface area, type in 'SA': ").lower()

radius, height = [float(part) for part in raw_input("What is the radius and height of the cylinder? (e.g. 32, 15): ").split(',')] 

r2 = radius ** 2
SA = 2 * pi * r2 + 2 + pi * radius * height
volume = pi * r2 * height

decimal_places = int(raw_input("How many decimal places do you want it to?: "))

if response=="vol":
    print("The volume of the cylinder is {0:.{1}f}cm\u00b3".format(volume, decimal_places))
    verify = raw_input("Do you want to find out the surface area (type in Yes or No): ")
    if verify.lower() == "yes":
       print("The surface area of the cylinder is {0:.{1}f}cm\u00b2".format(SA, decimal_places)) 

if response =="sa":
    print("The surface area of the cylinder is {0:.{1}f}cm\u00b2".format(SA, decimal_places))
    verify = raw_input("Do you want to find out the volume (type in Yes or No): ")
    if verify.lower() == "yes":
        print("The volume of the cylinder is {0:.{1}f}cm\u00b3".format(volume, decimal_places))
</snippet></ROW><ROW><id>19170198</id><snippet>01 class Thing(object):
02     def __init__(self, my_list=None):
03         if my_list is None:
04           my_list = []
04         self.list = my_list 
</snippet></ROW><ROW><id>19170239</id><snippet>In [11]: df.loc['2000-01-03', 'C']
Out[11]: -0.49492900000000001
</snippet></ROW><ROW><id>19170324</id><snippet>preorder_print</snippet></ROW><ROW><id>19170324</id><snippet>preoder_print</snippet></ROW><ROW><id>19170324</id><snippet>NameError: global name 'preoder_print' is not defined
</snippet></ROW><ROW><id>19170403</id><snippet>exceptions = set("belize cambodge mexique mozambique zaire zimbabwe".split())
vowels = set('aeiou')
plurals = set("etats-unis pays-bas".split())

word, sentinel = "", "quit"
while word != sentinel:
  word = input("Enter the name of a country: ")
  if word == sentinel:
    continue
  male = word in exceptions or word[-1].lower() not in vowels
  plurality = word in plurals
  apo = word[0].lower() in vowels

  if apo:
    print("l'%s" %word)
  elif plurality:
    print("les", word)
  else:
    print("le" if male else "la", word)
</snippet></ROW><ROW><id>19170525</id><snippet>def preorder_print(root):
    print root
    if root.left is not None:
        preoder_print(root.left)
    else:
        if root.right is not None:
            preorder_print(root.right)
</snippet></ROW><ROW><id>19170525</id><snippet>4</snippet></ROW><ROW><id>19170525</id><snippet>2</snippet></ROW><ROW><id>19170525</id><snippet>8</snippet></ROW><ROW><id>19170525</id><snippet>2</snippet></ROW><ROW><id>19170525</id><snippet>else</snippet></ROW><ROW><id>19170525</id><snippet>def preorder_print(root):
    print root
    if root.left is not None:
        preoder_print(root.left)
    if root.right is not None:
        preorder_print(root.right)
</snippet></ROW><ROW><id>19170525</id><snippet>BST_Insert</snippet></ROW><ROW><id>19170525</id><snippet>root.right = node</snippet></ROW><ROW><id>19170525</id><snippet>node.value &gt; root.value</snippet></ROW><ROW><id>19170525</id><snippet>6</snippet></ROW><ROW><id>19170525</id><snippet>8</snippet></ROW><ROW><id>19170525</id><snippet>10</snippet></ROW><ROW><id>19170525</id><snippet>6</snippet></ROW><ROW><id>19170525</id><snippet>    else:
        if root.value &lt; node.value:    # go to right      
            root.right = node
        else:
            BST_Insert(root.right, node)
</snippet></ROW><ROW><id>19170525</id><snippet>    elif root.value &lt; node.value:    # go to right     
        if root.right is None
            root.right = node
        else:
            BST_Insert(root.right, node)
</snippet></ROW><ROW><id>19170627</id><snippet>csv.reader()</snippet></ROW><ROW><id>19170627</id><snippet>.next()</snippet></ROW><ROW><id>19170627</id><snippet>float</snippet></ROW><ROW><id>19170627</id><snippet>int</snippet></ROW><ROW><id>19170627</id><snippet>plt.plot()</snippet></ROW><ROW><id>19170627</id><snippet>genfromtxt()</snippet></ROW><ROW><id>19170627</id><snippet>numpy</snippet></ROW><ROW><id>19170627</id><snippet>data1
2
3
4
3
6
6
4
</snippet></ROW><ROW><id>19170627</id><snippet>data2
92
73
64
53
16
26
74
</snippet></ROW><ROW><id>19170627</id><snippet>import numpy as np
data1=np.genfromtxt('data1.csv', skip_header=1) #suppose it is in the current working directory
data2=np.genfromtxt('data2.csv', skip_header=1)
plt.plot(data1, data2,'o-')
</snippet></ROW><ROW><id>19170690</id><snippet>def GetNumbers():
    global xsqurd
    xsqurd = int(input('What is the coefficient of x^2? '))
</snippet></ROW><ROW><id>19170690</id><snippet>raw_input</snippet></ROW><ROW><id>19170690</id><snippet>input</snippet></ROW><ROW><id>19170758</id><snippet>TokenAuthentication</snippet></ROW><ROW><id>19170758</id><snippet>SessionAuthentication</snippet></ROW><ROW><id>19170810</id><snippet>qt</snippet></ROW><ROW><id>19170810</id><snippet>notes.md</snippet></ROW><ROW><id>19170810</id><snippet>shiboken</snippet></ROW><ROW><id>19170810</id><snippet>pyside</snippet></ROW><ROW><id>19170810</id><snippet>qt</snippet></ROW><ROW><id>19170810</id><snippet>qt</snippet></ROW><ROW><id>19170873</id><snippet>conda</snippet></ROW><ROW><id>19170873</id><snippet># Windows
conda create -p E:\pywin python all other packages you want
# Linux
conda create -p /mnt/usb/pylin python all other packages you want
</snippet></ROW><ROW><id>19170873</id><snippet>pywin</snippet></ROW><ROW><id>19170873</id><snippet>pylin</snippet></ROW><ROW><id>19170873</id><snippet># Windows
D:\pywin\python.exe your_script.py
# Linux
/mnt/usb/pylin/bin/python your_script.py
</snippet></ROW><ROW><id>19170873</id><snippet>conda</snippet></ROW><ROW><id>19170905</id><snippet>/var/run/&lt;PROGRAM NAME&gt;.pid</snippet></ROW><ROW><id>19170905</id><snippet>12345\n</snippet></ROW><ROW><id>19170905</id><snippet>kill $(cat /var/run/myprogram.pid)</snippet></ROW><ROW><id>19170984</id><snippet>while not type in ("a","A","b","B" ...)</snippet></ROW><ROW><id>19170984</id><snippet>type</snippet></ROW><ROW><id>19170984</id><snippet>while type != someListElement</snippet></ROW><ROW><id>19170984</id><snippet>and</snippet></ROW><ROW><id>19170984</id><snippet>or</snippet></ROW><ROW><id>19171251</id><snippet>&gt;&gt;&gt; hobby1 = u'Dizziness'
&gt;&gt;&gt; hobby2 = u'Vértigo'
&gt;&gt;&gt; hobbies = [hobby1, hobby2]
&gt;&gt;&gt; print hobby1
Dizziness
&gt;&gt;&gt; print hobbies
[u'Dizziness', u'V\xe9rtigo']
</snippet></ROW><ROW><id>19171251</id><snippet>u</snippet></ROW><ROW><id>19171251</id><snippet>str</snippet></ROW><ROW><id>19171251</id><snippet>unicode</snippet></ROW><ROW><id>19171251</id><snippet>str</snippet></ROW><ROW><id>19171251</id><snippet>repr</snippet></ROW><ROW><id>19171251</id><snippet>Painting</snippet></ROW><ROW><id>19171251</id><snippet>'Painting'</snippet></ROW><ROW><id>19171251</id><snippet>Painting</snippet></ROW><ROW><id>19171251</id><snippet>u'Painting'</snippet></ROW><ROW><id>19171251</id><snippet>print</snippet></ROW><ROW><id>19171251</id><snippet>str</snippet></ROW><ROW><id>19171251</id><snippet>print hobby1</snippet></ROW><ROW><id>19171251</id><snippet>Painting</snippet></ROW><ROW><id>19171251</id><snippet>u</snippet></ROW><ROW><id>19171251</id><snippet>str</snippet></ROW><ROW><id>19171251</id><snippet>repr</snippet></ROW><ROW><id>19171251</id><snippet>str</snippet></ROW><ROW><id>19171251</id><snippet>hobbies</snippet></ROW><ROW><id>19171251</id><snippet>u</snippet></ROW><ROW><id>19171251</id><snippet>[foo, bar, baz]</snippet></ROW><ROW><id>19171251</id><snippet>My hobbies are [Painting, Stargazing]</snippet></ROW><ROW><id>19171251</id><snippet>My hobbies are ['Painting', 'Stargazing']</snippet></ROW><ROW><id>19171251</id><snippet>&gt;&gt;&gt; print 'Hobbies:', ', '.join(hobbies)
Hobbies: Painting, Stargazing
</snippet></ROW><ROW><id>19171251</id><snippet>&gt;&gt;&gt; print u'Hobbies:', u', '.join(hobbies)
Hobbies: Painting, Stargazing
</snippet></ROW><ROW><id>19171313</id><snippet>search = [4,3]
data = [[4,3,0],[4,7], [6,3], [9,2], [4,3]]

for sublist in data:
    if search == sublist[:len(search)]:
        sublist.append("c")
        print("there", sublist)
</snippet></ROW><ROW><id>19171313</id><snippet>there [4,3,0,'c']
there [4,3,'c']
</snippet></ROW><ROW><id>19171314</id><snippet>.rewrite(exp)</snippet></ROW><ROW><id>19171314</id><snippet>.rewrite(sin)</snippet></ROW><ROW><id>19171314</id><snippet>simplify</snippet></ROW><ROW><id>19171515</id><snippet>global</snippet></ROW><ROW><id>19171515</id><snippet>nonlocal</snippet></ROW><ROW><id>19171515</id><snippet>code</snippet></ROW><ROW><id>19171515</id><snippet>function</snippet></ROW><ROW><id>19171515</id><snippet>code</snippet></ROW><ROW><id>19171515</id><snippet>&gt;&gt;&gt; def foo():
...     global y
...     x=1
...     y=1
&gt;&gt;&gt; foo.__code__.co_varnames
('x',)
</snippet></ROW><ROW><id>19171515</id><snippet>co_varnames</snippet></ROW><ROW><id>19171515</id><snippet>&gt;&gt;&gt; dis.dis(foo)
  3           0 LOAD_CONST               1 (1)
              3 STORE_FAST               0 (x)

  4           6 LOAD_CONST               1 (1)
              9 STORE_GLOBAL             0 (y)
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE        
</snippet></ROW><ROW><id>19171553</id><snippet>def print_column_labels():
    return "   a b c d e f g h" + "\n"

def print_separator_row(num_columns):
    return "   " +"+-" * num_columns+"+" + "\n"

def print_squares_white(row_number, num_columns):
    if row_number&lt;=9:
        return " "+str(row_number) +" "+"| |#" * (num_columns / 2)+"| "+str(row_number) + "\n"
    else:
        return " "+ str(row_number ) +""+"|#| " * (num_columns / 2)+"| "+str(row_number) + "\n"

def print_squares_black(row_number, num_columns):
    if row_number&lt;=9:
        return " "+ str(row_number ) +" "+"|#| " * (num_columns / 2)+"| "+str(row_number) + "\n"
    else:
        return " "+ str(row_number ) +""+"|#| " * (num_columns / 2)+"| "+str(row_number) + "\n"

def print_chessboard(row_num,num_columns):
    result = ""
    result = result + print_column_labels()
    result = result + print_separator_row(num_columns)
    if row_num%2==0:
        while row_num&gt;=1:
            result = result + print_squares_white(row_num,num_columns)
            row_num-=1
            result = result + print_separator_row(num_columns)
            result = result + print_squares_black(row_num,num_columns)
            row_num-=1
            result = result + print_separator_row(num_columns)
            if row_num==0:
                result = result + print_column_labels()
    else:
        while row_num&gt;=2:
            result = result + print_squares_white(row_num,num_columns)
            row_num-=1
            result = result + print_separator_row(num_columns)
            result = result + print_squares_black(row_num,num_columns)
            row_num-=1
            result = result + print_separator_row(num_columns)
            if row_num==1:
                result = result + print_squares_white(row_num,num_columns)
                result = result + print_separator_row(num_columns)
                result = result + print_column_labels()

    return result

chessboard = print_chessboard(8,8)

print chessboard
</snippet></ROW><ROW><id>19171590</id><snippet>adb reboot</snippet></ROW><ROW><id>19171590</id><snippet>import os
os.system("adb reboot")
</snippet></ROW><ROW><id>19171731</id><snippet>unicode</snippet></ROW><ROW><id>19171731</id><snippet>ascii</snippet></ROW><ROW><id>19171731</id><snippet>column_headers.append((sheet.cell(row_number, column_number).value).encode('ascii','ignore'))
</snippet></ROW><ROW><id>19171731</id><snippet>data.value</snippet></ROW><ROW><id>19171731</id><snippet>integers</snippet></ROW><ROW><id>19171731</id><snippet>floats</snippet></ROW><ROW><id>19171731</id><snippet>.0</snippet></ROW><ROW><id>19171731</id><snippet>int(data.value)</snippet></ROW><ROW><id>19171769</id><snippet>operator</snippet></ROW><ROW><id>19171769</id><snippet>step_range()</snippet></ROW><ROW><id>19171769</id><snippet>#!/usr/bin/python

import operator

def step_range(start, end, step, step_func, compare_func):
    while compare_func(start, end):
        yield start
        start = step_func(start, step)

def main():
    print [x for x in step_range(1, 64, 2, operator.mul, operator.le)]
    print [x for x in step_range(64, 0, 2, operator.div, operator.gt)]
    print [x for x in step_range(0, 64, 8, operator.add, operator.le)]
    print [x for x in step_range(64, 0, 8, operator.sub, operator.ge)]

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19171769</id><snippet>$ python test.py
[1, 2, 4, 8, 16, 32, 64]
[64, 32, 16, 8, 4, 2, 1]
[0, 8, 16, 24, 32, 40, 48, 56, 64]
[64, 56, 48, 40, 32, 24, 16, 8, 0]
</snippet></ROW><ROW><id>19171784</id><snippet>def otherfunction(a):
    ...

...
mass_of_rider_kg = float(input('input mass of rider in kilograms:'))
a = mass_of_rider_kg
while a &lt; mass_of_rider_kg+16:
     a = a + 4
     otherfunction(a)
</snippet></ROW><ROW><id>19171888</id><snippet>Const1</snippet></ROW><ROW><id>19171888</id><snippet>Const2</snippet></ROW><ROW><id>19171888</id><snippet>In [20]: data = [['Name1','Obj1','Ind1',10,5,3,6],
   ....:         ['Name1','Obj1','Ind2',10,5,2,1],
   ....:         ['Name1','Obj1','Ind3',10,5,5,2],
   ....:         ['Name1','Obj2','Ind1',10,5,33,15],
   ....:         ['Name1','Obj2','Ind2',10,5,15,9],
   ....:         ['Name1','Obj2','Ind3',10,5,32,9]]

In [21]: df = DataFrame(data,columns=['Name','Object','Index','Const1','Const2','Method1','Method2'])
In [22]: df
Out[22]:
    Name Object Index  Const1  Const2  Method1  Method2
0  Name1   Obj1  Ind1      10       5        3        6
1  Name1   Obj1  Ind2      10       5        2        1
2  Name1   Obj1  Ind3      10       5        5        2
3  Name1   Obj2  Ind1      10       5       33       15
4  Name1   Obj2  Ind2      10       5       15        9
5  Name1   Obj2  Ind3      10       5       32        9

In [23]: df.loc[df.Index.isin(['Ind2', 'Ind3']), ['Method1', 'Method2']] *= -1

In [24]: def plyr(df):
   ....:     df = df.copy()
   ....:     df['Const1'] /= float(df.Const1.count())
   ....:     df['Const2'] /= float(df.Const2.count())
   ....:     return df
   ....:

In [25]: df.groupby(['Name', 'Object']).apply(lambda x: plyr(x)._get_numeric_data().sum())
Out[25]:
              Const1  Const2  Method1  Method2
Name  Object
Name1 Obj1        10       5       -4        3
      Obj2        10       5      -14       -3
</snippet></ROW><ROW><id>19171927</id><snippet>tryLogin</snippet></ROW><ROW><id>19171927</id><snippet>ProtocolAvatar</snippet></ROW><ROW><id>19171927</id><snippet>IProtocolAvatar</snippet></ROW><ROW><id>19171927</id><snippet>def tryLogin(self, username, password):
    self.portal.login(credentials.UsernamePassword(username, password), None, IProtocolAvatar).addCallbacks(self._cbLogin, self._ebLogin)
    #                                                                         ^
</snippet></ROW><ROW><id>19171927</id><snippet>IPortocolAvatar</snippet></ROW><ROW><id>19171927</id><snippet>IProtocolAvatar</snippet></ROW><ROW><id>19171927</id><snippet>import telnetlib
import time

t = telnetlib.Telnet('localhost', 8000)
t.write(b'user pass\r\n')
t.write(b'blah blah\r\n')
time.sleep(1)
print(t.read_eager())
</snippet></ROW><ROW><id>19171980</id><snippet>&gt;&gt;&gt; op = lambda a, b: a + b
&gt;&gt;&gt; result = op(5, 7)
&gt;&gt;&gt; result
12
</snippet></ROW><ROW><id>19172172</id><snippet>def make_scores_dict(names, scores):
    return dict(zip(names, scores))
</snippet></ROW><ROW><id>19172172</id><snippet>def make_scores_dict(names, scores):
    scores_dict = {}
    for i in range(len(names)):
        scores_dict[names[i]] = scores[i]

    return scores_dict
</snippet></ROW><ROW><id>19172172</id><snippet>def make_scores_dict(names, scores):
    scores_dict = {}
    for i, name in enumerate(names):
        scores_dict.update({name: scores[i]})
    return scores_dict
</snippet></ROW><ROW><id>19172380</id><snippet>os.environ['DJANGO_SETTINGS_MODULE'] = 'myproj.settings'</snippet></ROW><ROW><id>19172380</id><snippet>myproj/</snippet></ROW><ROW><id>19172380</id><snippet>myproj/</snippet></ROW><ROW><id>19172380</id><snippet>myproj</snippet></ROW><ROW><id>19172380</id><snippet>myproj/</snippet></ROW><ROW><id>19172380</id><snippet>myproj/</snippet></ROW><ROW><id>19172380</id><snippet>myproj</snippet></ROW><ROW><id>19172380</id><snippet>python manage.py myscript</snippet></ROW><ROW><id>19172436</id><snippet>class MySpinBox(QtGui.QSpinBox):
    def __init__(self, *args):
       QtGui.QSpinBox.__init__(self, *args)

       self.setRange(0,9999)

    def textFromValue(self, value):
       return "%04d" % value
</snippet></ROW><ROW><id>19172482</id><snippet>ImportError</snippet></ROW><ROW><id>19172482</id><snippet>from app.models import Person</snippet></ROW><ROW><id>19172482</id><snippet>items.py</snippet></ROW><ROW><id>19172482</id><snippet>crawler.configure()

from final.aqaq.aqaq.spiders.spider import aqaqspider
spider = aqaqspider(domain='aqaq.com')

crawler.crawl(spider)
</snippet></ROW><ROW><id>19172675</id><snippet>generator = (x for x in something if search in str(x.title).lower())
for item in generator:
   print item
</snippet></ROW><ROW><id>19172675</id><snippet>filter</snippet></ROW><ROW><id>19172699</id><snippet>mass_of_rider_kg = float(input('input mass of rider in kilograms:'))
mass_of_bike_kg = float(input('input mass of bike in kilograms:'))
velocity_in_ms = float(input('input velocity in meters per second:'))
coefficient_of_drafting = float(input('input coefficient of drafting:'))
with open('BikeOutput.txt', 'w') as myfile:
    a = mass_of_rider_kg
    while a &lt; mass_of_rider_kg+20:
        a = a + 4
        pAir = .18*coefficient_of_drafting*(velocity_in_ms**3)  
        pRoll = .001*9.8*(a+mass_of_bike_kg)*velocity_in_ms
        pSec = pAir+pRoll
        print(pSec)
        myfile.write('data: %.2f %.2f %.2f %.2f %.2f\n' %  ( a, mass_of_bike_kg, velocity_in_ms,coefficient_of_drafting, pSec))
</snippet></ROW><ROW><id>19172710</id><snippet>list</snippet></ROW><ROW><id>19172710</id><snippet>int</snippet></ROW><ROW><id>19172710</id><snippet>def message_to_bits(msg):
    result = 0
    for c in msg:
        result = (result &lt;&lt; 8) | ord(c)
    return result

def get_bit(num, position):
    return num &amp; (1 &lt;&lt; position)

def set_bit_on(num, position):
    return num | (1 &lt;&lt; position)

def set_bit_off(num, position):
    return num &amp; ~(1 &lt;&lt; position)

def set_bit(num, value, position):
    if value:
        return num | (1 &lt;&lt; position)
    else:
        return num &amp; ~(1 &lt;&lt; position)

def encode(nested_list_thing, key):
    key_bits = message_to_bits(key)
    key_length = 8 * len(key)
    print ('key: {:0%db}' % key_length).format(key_bits)

    # Mask keeps track of which bit in
    # key_bits we are using to set the value of
    mask = 1 &lt;&lt; (key_length - 1)

    result = []
    for list_ in nested_list_thing:
        encoded_list = []

        for tuple_ in list_:
            encoded_tuple = []

            for num in tuple_:
                # Encode the number
                set_to_bit = key_bits &amp; mask
                encoded_num = set_bit(num, set_to_bit, 0)
                encoded_tuple.append(encoded_num)
                # Move to next position in key_bits
                mask = mask &gt;&gt; 1
            encoded_list.append(tuple(encoded_tuple))
        result.append(encoded_list)
    return result

image = [[(15, 103, 225), (0, 3, 19)],
        [(22, 200, 1), (8, 8, 8)],
        [(0, 0, 0), (5, 123, 19)]]
key = 'hello'
print encode(image, key)
</snippet></ROW><ROW><id>19172710</id><snippet>&gt; key: 0110100001100101011011000110110001101111
&gt; [[(14, 103, 225), (0, 3, 18)], [(22, 200, 0), (9, 9, 8)], [(0, 1, 0), (5, 122, 19)]]
</snippet></ROW><ROW><id>19172710</id><snippet>encode</snippet></ROW><ROW><id>19172710</id><snippet>    ...
        for num in tuple_:
            xor_key = 1 if key_bits &amp; mask else 0
            encoded_num = num ^ xor_key
            encoded_tuple.append(encoded_num)
            # Move to next position in key_bits
            mask = mask &gt;&gt; 1
    ...
</snippet></ROW><ROW><id>19172710</id><snippet>image = [[(15, 103, 225), (0, 3, 19)],
        [(22, 200, 1), (8, 8, 8)],
        [(0, 0, 0), (5, 123, 19)]]

key = 'hello'

encoded_image = encode(image, key)
decoded_image = encode(encoded_image, key)

print encoded_image
print decoded_image
</snippet></ROW><ROW><id>19172710</id><snippet>&gt; [[(15, 102, 224), (0, 2, 19)], [(22, 200, 1), (9, 9, 8)], [(0, 1, 0), (4, 123, 18)]] # &lt;-- encoded
&gt; [[(15, 103, 225), (0, 3, 19)], [(22, 200, 1), (8, 8, 8)], [(0, 0, 0), (5, 123, 19)]]  # &lt;-- decoded
</snippet></ROW><ROW><id>19172716</id><snippet>arrs = [ l.rstrip().split("\t") for l in open("your_file.tsv") ]
</snippet></ROW><ROW><id>19172716</id><snippet>val = 0
for i in range(len(arrs)):
    if i % 20 == 0:
        arrs[i][5] = str( int(arr[i][5]) + val )
        val += 1
</snippet></ROW><ROW><id>19172716</id><snippet>open("your_modified_file.tsv", "w").write( "\n".join(arrs) )
</snippet></ROW><ROW><id>19172769</id><snippet>sys.stdin</snippet></ROW><ROW><id>19172769</id><snippet>raw_input()</snippet></ROW><ROW><id>19172769</id><snippet>sys.stdin</snippet></ROW><ROW><id>19172769</id><snippet>sys.stdin</snippet></ROW><ROW><id>19172769</id><snippet>import sys
print len(sys.stdin.read()) # anything to consume piped input
sys.stdin = open("CON:", "r")
x = raw_input("sdfklj ")
</snippet></ROW><ROW><id>19172769</id><snippet>sys.stdin</snippet></ROW><ROW><id>19172769</id><snippet>CON:</snippet></ROW><ROW><id>19172769</id><snippet>/dev/tty1</snippet></ROW><ROW><id>19172791</id><snippet>from collections import Counter
def lone_sum(a, b, c):
    d = Counter([a, b, c])
    return sum(k for k in d if d[k]==1)
</snippet></ROW><ROW><id>19172791</id><snippet>def lone_sum(*L):
  d = Counter(L)
  return sum(k for k in d if d[k]==1)
</snippet></ROW><ROW><id>19172791</id><snippet>c</snippet></ROW><ROW><id>19172791</id><snippet>def rep_sum(c, *L):
  d = Counter(L)
  return sum(k for k in d if d[k]==c)
</snippet></ROW><ROW><id>19172791</id><snippet>c</snippet></ROW><ROW><id>19172791</id><snippet>def rep_sum(c, *L):
  d = Counter(L)
  return sum(k for k in d if d[k]&lt;=c)
</snippet></ROW><ROW><id>19172791</id><snippet>def lone_sum(*L):
  nums = set()
  all_nums = set()
  for num in L:
    if num in nums:
      nums.remove(num)
    elif num not in all_nums:
      all_nums.add(num)
      nums.add(num)
  return sum(nums)
</snippet></ROW><ROW><id>19173027</id><snippet>mysql&gt; grant all privileges on *.* to root@localhost identified by 'password' with grant option;
</snippet></ROW><ROW><id>19173695</id><snippet>query_dbs</snippet></ROW><ROW><id>19173695</id><snippet>#!/usr/bin/env python

import os
import sqlite3
import MySQLdb
from MySQLdb.constants import FIELD_TYPE

user = os.getenv('USER')

def create_mysql_table():
    conn = MySQLdb.connect(user=user, db='foo')
    c = conn.cursor()
    c.execute("DROP TABLE stocks")
    c.execute("CREATE TABLE stocks"
              "(date text, trans text, symbol text, qty real, price Decimal(10,2) UNSIGNED NOT NULL)")
    c.execute("INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)")
    conn.commit()

def create_sqlite_table():
    conn = sqlite3.connect('test.db')
    c = conn.cursor()
    c.execute("DROP TABLE stocks")
    c.execute("CREATE TABLE stocks"
              "(date text, trans text, symbol text, qty real, price real)")
    c.execute("INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)")
    conn.commit()

def query_dbs(use_type_converters):
    conn = sqlite3.connect('test.db')
    c = conn.cursor()
    for row in c.execute('SELECT * FROM stocks'):
        print 'SQLITE: %s' % str(row)

    type_converters = MySQLdb.converters.conversions.copy()

    if use_type_converters:
        type_converters.update({
            FIELD_TYPE.DECIMAL: float,
            FIELD_TYPE.NEWDECIMAL: float,
        })

    conn = MySQLdb.connect(user=user, db='foo', conv=type_converters)
    c = conn.cursor()
    c.execute('SELECT * FROM stocks')
    for row in c.fetchall():
        print 'MYSQLDB: %s' % str(row)

create_sqlite_table()
create_mysql_table()

print "Without type conversion:"
query_dbs(False)
print "With type conversion:"
query_dbs(True)
</snippet></ROW><ROW><id>19173695</id><snippet>Without type conversion:
SQLITE: (u'2006-01-05', u'BUY', u'RHAT', 100.0, 35.14)
MYSQLDB: ('2006-01-05', 'BUY', 'RHAT', 100.0, Decimal('35.14'))
With type conversion:
SQLITE: (u'2006-01-05', u'BUY', u'RHAT', 100.0, 35.14)
MYSQLDB: ('2006-01-05', 'BUY', 'RHAT', 100.0, 35.14)
</snippet></ROW><ROW><id>19173861</id><snippet>proxies = {'https': 'http://127.0.0.1:8080'}
</snippet></ROW><ROW><id>19173938</id><snippet>from subprocess import call
call(["xdotool", "mousemove", "300", "500"])
</snippet></ROW><ROW><id>19173938</id><snippet>sudo apt-get install xdotool
</snippet></ROW><ROW><id>19173938</id><snippet>man xdotool</snippet></ROW><ROW><id>19173988</id><snippet>&gt;&gt;&gt; l = ["a", "b", "c"]
&gt;&gt;&gt; len(l)
3
&gt;&gt;&gt; l[2]
'c'
</snippet></ROW><ROW><id>19173988</id><snippet>0</snippet></ROW><ROW><id>19173988</id><snippet>l[3]</snippet></ROW><ROW><id>19173988</id><snippet>IndexError</snippet></ROW><ROW><id>19173988</id><snippet>i = len(lasarr)-1
</snippet></ROW><ROW><id>19174104</id><snippet>dr</snippet></ROW><ROW><id>19174104</id><snippet>mg</snippet></ROW><ROW><id>19174104</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19174104</id><snippet>mg</snippet></ROW><ROW><id>19174104</id><snippet>dr</snippet></ROW><ROW><id>19174104</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19174104</id><snippet>traclus</snippet></ROW><ROW><id>19174104</id><snippet>a</snippet></ROW><ROW><id>19174104</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19174104</id><snippet>a</snippet></ROW><ROW><id>19174104</id><snippet>__init__.py</snippet></ROW><ROW><id>19174104</id><snippet>a</snippet></ROW><ROW><id>19174104</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19174104</id><snippet>__init__.py</snippet></ROW><ROW><id>19174275</id><snippet>find_groups</snippet></ROW><ROW><id>19174275</id><snippet>print_groups</snippet></ROW><ROW><id>19174275</id><snippet>from collections import namedtuple
from copy import deepcopy

def find_groups(inpixels):
    """
    Group the pixels in the image into three categories: free, closed, and
    border.
        free: A white pixel with a path to outside the image.
        closed: A white pixels with no path to outside the image.
        border: A black pixel.

    Params:
        pixels: A collection of columns of rows of pixels. 0 is black 1 is
                white.

    Return:
        PixelGroups with attributes free, closed and border.
        Each is a list of tuples (y, x).
    """

    # Pad the entire image with white pixels.
    width = len(inpixels[0]) + 2
    height = len(inpixels) + 2
    pixels = deepcopy(inpixels)
    for y in pixels:
        y.insert(0, 1)
        y.append(1)
    pixels.insert(0, [1 for x in range(width)])
    pixels.append([1 for x in range(width)])

    # The free pixels are found through a breadth first traversal.
    queue = [(0,0)]
    visited = [(0,0)]
    while queue:
        y, x = queue.pop(0)

        adjacent = ((y+1, x), (y-1, x), (y, x+1), (y, x-1))
        for n in adjacent:
            if (-1 &lt; n[0] &lt; height and -1 &lt; n[1] &lt; width and
                                        not n in visited and 
                                    pixels[n[0]][n[1]] == 1):
                queue.append(n)
                visited.append(n)

    # Remove the padding and make the categories.
    freecoords = [(y-1, x-1) for (y, x) in visited if
                 (0 &lt; y &lt; height-1 and 0 &lt; x &lt; width-1)]
    allcoords = [(y, x) for y in range(height-2) for x in range(width-2)]
    complement = [i for i in allcoords if not i in freecoords]
    bordercoords = [(y, x) for (y, x) in complement if inpixels[y][x] == 0]
    closedcoords = [(y, x) for (y, x) in complement if inpixels[y][x] == 1]

    PixelGroups = namedtuple('PixelGroups', ['free', 'closed', 'border'])
    return PixelGroups(freecoords, closedcoords, bordercoords)

def print_groups(ysize, xsize, pixelgroups):
    ys= []
    for y in range(ysize):
        xs = []
        for x in range(xsize):
            if (y, x) in pixelgroups.free:
                xs.append('.')
            elif (y, x) in pixelgroups.closed:
                xs.append('X')
            elif (y, x) in pixelgroups.border:
                xs.append('#')
        ys.append(xs)
    print('\n'.join([' '.join(k) for k in ys]))
</snippet></ROW><ROW><id>19174275</id><snippet>pixels = [[0, 1, 0, 0, 1, 1],
          [1, 0, 1, 1, 0, 1], 
          [1, 0, 1, 1, 0, 1],
          [1, 0 ,1 ,1 ,0, 1],
          [1, 0, 1 ,0 ,1, 1],
          [1, 0, 0, 1, 1, 1],
          [1, 1, 1, 1, 1, 1]]
pixelgroups = find_groups(pixels)
print_groups(7, 6, pixelgroups)
print("closed: " + str(pixelgroups.closed))
</snippet></ROW><ROW><id>19174275</id><snippet># . # # . .
. # X X # .
. # X X # .
. # X X # .
. # X # . .
. # # . . .
. . . . . .

closed: [(1, 2), (1, 3), (2, 2), (2, 3), (3, 2), (3, 3), (4, 2)]
</snippet></ROW><ROW><id>19174275</id><snippet># pseudo code
realborders = [i for i in pixelgroups.border if i has an adjacent closed pixel]
streaks = [otherwise]
</snippet></ROW><ROW><id>19174399</id><snippet>import re
data = [[u'text'], [u'element'], [u'text00']]
patterns = [u'text', u'EL', u'00']
results = []
for pattern in patterns:
    results.append([x[0] for x in data if re.search(pattern, x[0], flags=re.I)])
print  results
</snippet></ROW><ROW><id>19174399</id><snippet>import re
data = [[u'text'], [u'element'], [u'text00']]
patterns = [u'text', u'EL', u'00']
results = [[x[0] for x in data if re.search(pattern, x[0], flags=re.I)] for pattern in patterns]
print  results
</snippet></ROW><ROW><id>19174717</id><snippet>class GroupMeeting(models.Model):
    date = models.DateTimeField()
    placeGPS = models.FloatField()
    placeName = models.CharField(max_length=30)
    dateRepeat= models.ForeignKey(RepeatDays)
    post = models.ForeignKey(Post, limit_choices_to = {'category': 0})
</snippet></ROW><ROW><id>19174809</id><snippet>id</snippet></ROW><ROW><id>19174809</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; class Visit(ast.NodeVisitor):
...     def visit_ClassDef(self, node):
...         print [n.id for n in node.bases]
... 
&gt;&gt;&gt; text = open('test.py').read()
&gt;&gt;&gt; tree = ast.parse(text)
&gt;&gt;&gt; Visit().visit(tree)
['Foo', 'Baz']
</snippet></ROW><ROW><id>19174809</id><snippet>test.py</snippet></ROW><ROW><id>19174809</id><snippet>class Bar(Foo,Baz):
    pass
</snippet></ROW><ROW><id>19174809</id><snippet>bases</snippet></ROW><ROW><id>19174809</id><snippet>expr</snippet></ROW><ROW><id>19174809</id><snippet>class Bar(FooFactory(),BazFactory()): pass
</snippet></ROW><ROW><id>19174809</id><snippet>Name</snippet></ROW><ROW><id>19174809</id><snippet>id</snippet></ROW><ROW><id>19174987</id><snippet>F1_Content</snippet></ROW><ROW><id>19174987</id><snippet>F2_Content</snippet></ROW><ROW><id>19174987</id><snippet>print(repr(line))</snippet></ROW><ROW><id>19174987</id><snippet>print(line.encode('unicode_escape'))</snippet></ROW><ROW><id>19174987</id><snippet>set</snippet></ROW><ROW><id>19174987</id><snippet>with open(sys.argv[1], "r") as file1:
    f1_content = {line.strip() for line in file1}

with open open(sys.argv[2], "r") af file2:
    for line in file2:
        if line.strip() in file2:
            print(line)
</snippet></ROW><ROW><id>19174987</id><snippet>with</snippet></ROW><ROW><id>19174987</id><snippet>with</snippet></ROW><ROW><id>19174987</id><snippet>\u30B8</snippet></ROW><ROW><id>19174987</id><snippet>\u30B7\u3099</snippet></ROW><ROW><id>19174987</id><snippet>&gt;&gt;&gt; print('\u30B8 != \u30B7\u3099:', '\u30B8' != '\u30B7\u3099')
ジ != ジ: True
</snippet></ROW><ROW><id>19174987</id><snippet>unicodedata.normalize()</snippet></ROW><ROW><id>19174987</id><snippet>from unicodedata import normalize

with open(sys.argv[1], "r") as file1:
    f1_content = {normalize(line.strip(), 'NFKC') for line in file1}

with open open(sys.argv[2], "r") af file2:
    for line in file2:
        if normalize(line.strip(), 'NFKC') in file2:
            print(line)
</snippet></ROW><ROW><id>19175278</id><snippet>perl -ne '
  BEGIN{ ($f,$t)=(44,81) }
  ($.==$f .. $.==$t) =~ /(E0|.)$/ or next;
  print;
  $1 eq "E0" or next;
  $_ += 82 for $f,$t;
' file
</snippet></ROW><ROW><id>19175320</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>19175320</id><snippet>from urllib import urlencode

items = [('first_name', '&amp;&amp;'), ('first_name', '&amp;&amp;&amp;&amp;')]
query_string = urlencode(items)
</snippet></ROW><ROW><id>19175320</id><snippet>&gt;&gt;&gt; urlencode(items)
'first_name=%26%26&amp;first_name=%26%26%26%26'
</snippet></ROW><ROW><id>19175581</id><snippet>b</snippet></ROW><ROW><id>19175581</id><snippet>c</snippet></ROW><ROW><id>19175581</id><snippet>def coefficient(x,y):
    x_1 = x[0]
    x_2 = x[1]
    x_3 = x[2]
    y_1 = y[0]
    y_2 = y[1]
    y_3 = y[2]

    a = y_1/((x_1-x_2)*(x_1-x_3)) + y_2/((x_2-x_1)*(x_2-x_3)) + y_3/((x_3-x_1)*(x_3-x_2))

    b = (-y_1*(x_2+x_3)/((x_1-x_2)*(x_1-x_3))
         -y_2*(x_1+x_3)/((x_2-x_1)*(x_2-x_3))
         -y_3*(x_1+x_2)/((x_3-x_1)*(x_3-x_2)))

    c = (y_1*x_2*x_3/((x_1-x_2)*(x_1-x_3))
        +y_2*x_1*x_3/((x_2-x_1)*(x_2-x_3))
        +y_3*x_1*x_2/((x_3-x_1)*(x_3-x_2)))

    return a,b,c

x = [1,2,3]
y = [4,7,12]

a,b,c = coefficient(x, y)

print "a = ", a
print "b = ", b
print "c = ", c
</snippet></ROW><ROW><id>19175581</id><snippet>a =  1
b =  0
c =  3
</snippet></ROW><ROW><id>19175581</id><snippet>b</snippet></ROW><ROW><id>19175581</id><snippet>numpy</snippet></ROW><ROW><id>19175659</id><snippet>mkvirtualenv your_project_name // create a virtual environment
workon your_project_name // select this virtual environment

pip install django // will install in this virtualenv
</snippet></ROW><ROW><id>19175907</id><snippet>__table__</snippet></ROW><ROW><id>19175907</id><snippet>__mapper__</snippet></ROW><ROW><id>19175907</id><snippet>def build_daily_history_table(ticket):
    classname = ticket + "_HistoricDay"
    ticket = type(classname, (Base, HistoricDay), {'__tablename__' : ticket+"_daily_history"})
    ticket.__repr__ =  build_daily_history_table_repr
    return ticket

build_daily_history_table("test").__table__.create(bind = engine)
</snippet></ROW><ROW><id>19175907</id><snippet>2013-10-04 22:36:53,263 INFO sqlalchemy.engine.base.Engine 
CREATE TABLE test_daily_history (
    id INTEGER NOT NULL, 
    date DATE, 
    open FLOAT, 
    high FLOAT, 
    low FLOAT, 
    close FLOAT, 
    volume BIGINT, 
    "adjClose" FLOAT, 
    PRIMARY KEY (id)
)


2013-10-04 22:36:53,263 INFO sqlalchemy.engine.base.Engine ()
2013-10-04 22:36:53,263 INFO sqlalchemy.engine.base.Engine COMMIT
</snippet></ROW><ROW><id>19175907</id><snippet>Base.metadata.tables["ticket_daily_history"].create(bind = engine)
</snippet></ROW><ROW><id>19175907</id><snippet>build_daily_history_table</snippet></ROW><ROW><id>19176087</id><snippet>RD1 = [x for x in Test if x != unWantedWords]
</snippet></ROW><ROW><id>19176087</id><snippet>RD1 = [x for x in Test if x not in unWantedWords]
</snippet></ROW><ROW><id>19176343</id><snippet>def somewhere():
  old_eq = obj.__eq__
  def new_eq(a, b):
    return False
  obj.__eq__ = new_eq
  # ^^^ Will fail here because you can't assign new __eq__ to the object
  if not obj == obj:
    print('Well, ok...')
  obj.__eq__ = old_eq
</snippet></ROW><ROW><id>19176343</id><snippet>__eq__</snippet></ROW><ROW><id>19176343</id><snippet>class Patched(YourClass):
  def __eq__(self, i):
    if self.original__eq:
      return YourClass.__eq__(self, i):
    else:
      pass # your code here
</snippet></ROW><ROW><id>19176582</id><snippet>line = line.strip()
</snippet></ROW><ROW><id>19176668</id><snippet>^[A-Z]{4}[0-9]{3,}$
</snippet></ROW><ROW><id>19176668</id><snippet>^</snippet></ROW><ROW><id>19176668</id><snippet>$</snippet></ROW><ROW><id>19176668</id><snippet>ABCD054grf</snippet></ROW><ROW><id>19176988</id><snippet>GIR</snippet></ROW><ROW><id>19176988</id><snippet>Keybinder.init()
</snippet></ROW><ROW><id>19176988</id><snippet>python-keybinder</snippet></ROW><ROW><id>19177046</id><snippet>plot</snippet></ROW><ROW><id>19177046</id><snippet>axis</snippet></ROW><ROW><id>19177046</id><snippet>plot</snippet></ROW><ROW><id>19177046</id><snippet>axis</snippet></ROW><ROW><id>19177046</id><snippet>plt.figure(figsize = (8,6), dpi = 72)
plt.xlabel('RF Region')
plt.ylabel('Frequency [%]')
plt.title('Distribution of Rating Results')
ylim(0,50)
ax = plt.gca()
colors= ['r', 'b']
df.plot(kind='bar',color=colors, alpha=0.75, ax=ax)
ax.yaxis.set_major_locator(MultipleLocator(10))
ax.yaxis.set_minor_locator(MultipleLocator(5))
plt.grid(b=True, which='major', linewidth=1.0)
plt.grid(b=True, which='minor')
</snippet></ROW><ROW><id>19177130</id><snippet>    import numpy as np
    import numpy.ma as ma

    values = [('&lt;', 2, 3.5, 'as', 6), (None, None, 6.888893, 'bb', 9),
              ('a', 66, 77, 'sdfasdf', 45)]
    nrows = len(values)

    arr = ma.zeros(nrows, dtype=[('c1', 'S1'),('c2', np.int), ('c3', np.float), 
                                 ('c4', 'S8'), ('c5', np.int)])

    for i, row in enumerate(values):
        for j, cell in enumerate(values[i]):
            if values[i][j] is None:
                arr.mask[i][j] = True
            else:
                arr.data[i][j] = cell

    print arr
</snippet></ROW><ROW><id>19177132</id><snippet># each block in the text file will be one element of this list
matchers = [[]]
i = 0 
with open('test.txt') as infile:
    for line in infile:
        line = line.strip()
        # Blocks are seperated by blank lines
        if len(line) == 0:
            i += 1
            matchers.append([])
            # assume there are always two blank lines between items 
            # and just skip to the lext line
            infile.next()
            continue
        matchers[i].append(line)
</snippet></ROW><ROW><id>19177132</id><snippet>import re

# This regular expression matches the variable number of students in each block
studentlike = re.compile('(\d+) (.+) (\d+/\d+)')
# We will build a table containing a list of elements for each student
table = []
for matcher in matchers:
    # We use an iterator over the block lines to make indexing simpler
    it = iter(matcher)
    # The first two elements are match values
    m1, m2 = it.next(), it.next()
    # then there are a number of students
    students = []
    for possiblestudent in it:
        m = studentlike.match(possiblestudent)
        if m:
            students.append(list(m.groups()))
        else:
            break
    # After the students come the data elements, which we read into a dictionary
    # We also add in the last possible student line as that didn't match the student re
    dataitems = dict(item.split() for item in [possiblestudent] + list(it))
    datanames = dataitems.keys()
    # Finally we construct the table
    for student in students:
        # We use the dictionary .get() method to return blanks for the missing fields
        table.append([m1, m2] + student + [dataitems.get(d, '') for d in datanames])
print table
</snippet></ROW><ROW><id>19177132</id><snippet>import pandas
csvdata = pandas.read_csv('test.csv')
textdata = pandas.DataFrame(table, columns=['MATCH2', 'MATCH1', 'TITLE01', 'MATCH3', 'TITLE02', 'Data', 'misc2', 'bla3'])
mergeddata = pandas.merge(csvdata, textdata, how='left', on=['MATCH1', 'MATCH2', 'MATCH3'], sort=False)
mergeddata.to_csv('output.csv', index=False)
</snippet></ROW><ROW><id>19177223</id><snippet>Response.reason</snippet></ROW><ROW><id>19177223</id><snippet>r = requests.get('http://www.google.com/')
print(r.reason)
</snippet></ROW><ROW><id>19177227</id><snippet>dict_read = dict((map(float,x) for x in reader)
</snippet></ROW><ROW><id>19177388</id><snippet>else</snippet></ROW><ROW><id>19177388</id><snippet>if</snippet></ROW><ROW><id>19177388</id><snippet>if left!=null: 
    inorder(left)
print(current_node.val)
if (right!=null):
    inorder(right)
</snippet></ROW><ROW><id>19177390</id><snippet>\r</snippet></ROW><ROW><id>19177390</id><snippet>\n</snippet></ROW><ROW><id>19177390</id><snippet>\r\n</snippet></ROW><ROW><id>19177390</id><snippet>'rU'</snippet></ROW><ROW><id>19177390</id><snippet>data = open("banklist.csv", "rU").readlines()[1:]
</snippet></ROW><ROW><id>19177390</id><snippet>next()</snippet></ROW><ROW><id>19177390</id><snippet>with open("banklist.csv", "rU") as infile:
    next(infile, None)  # skip the first line
    for line in infile:
        print line 
</snippet></ROW><ROW><id>19177390</id><snippet>csv</snippet></ROW><ROW><id>19177390</id><snippet>import csv

with open("banklist.csv", "rU") as infile:
    reader = csv.reader(infile)
    next(reader, None)  # skip the first row
    for row in reader:
        print row
</snippet></ROW><ROW><id>19177390</id><snippet>['First National Bank also operating as The National Bank of El Paso', 'Edinburg', 'TX', '14318', '13-Sep-13', '18-Sep-13']
["The Community's Bank", 'Bridgeport', 'CT', '57041', '13-Sep-13', '17-Sep-13']
['Sunrise Bank of Arizona', 'Phoenix', 'AZ', '34707', '23-Aug-13', '11-Sep-13']
['Community South Bank', 'Parsons', 'TN', '19849', '23-Aug-13', '5-Sep-13']
['Bank of Wausau', 'Wausau', 'WI', '35016', '9-Aug-13', '4-Sep-13']
['First Community Bank of Southwest Florida (also operating as Community Bank of Cape Coral)', 'Fort Myers', 'FL', '34943', '2-Aug-13', '26-Aug-13']
# etc.
</snippet></ROW><ROW><id>19177754</id><snippet>try:
    chr = unichr  # Python 2
except NameError:
    pass          # Python 3

i = 404
c = chr(i) # c is now 'Ɣ' regardless of Python version
</snippet></ROW><ROW><id>19177754</id><snippet>chr</snippet></ROW><ROW><id>19178245</id><snippet>foo = (1,2,3)
len(foo)
&gt;&gt;&gt; 3

bar = ['a', 'b', 'c', 'd']
len(bar)
&gt;&gt;&gt; 4
</snippet></ROW><ROW><id>19178245</id><snippet>foo = "This is a string"
len(foo)
</snippet></ROW><ROW><id>19178245</id><snippet>"lowercase string".upper()
</snippet></ROW><ROW><id>19178245</id><snippet>foo = "lowercase string"
uppercase = foo.upper()
</snippet></ROW><ROW><id>19178335</id><snippet>plt.scatter</snippet></ROW><ROW><id>19178335</id><snippet>remove()</snippet></ROW><ROW><id>19178335</id><snippet>x = np.linspace(-10,10,100);
[X,Y] = np.meshgrid(x,x)
g = np.exp(-(np.square(X) + np.square(Y))/2)
im_handle = plt.imshow(g)
scat = plt.scatter(50,50,c='r', marker='+')
# image, with scatter point overlayed
scat.remove()
plt.draw()
# underlying image, no more scatter point(s) now shown

# For completeness, can also remove the other way around:
plt.clf()
im_handle = plt.imshow(g)
scat = plt.scatter(50,50,c='r', marker='+')
# image with both components
im_handle.remove()
plt.draw()
# now just the scatter points remain.
</snippet></ROW><ROW><id>19178335</id><snippet>remove()</snippet></ROW><ROW><id>19178335</id><snippet>matplotlib.axes.Axes.draw_idle</snippet></ROW><ROW><id>19178578</id><snippet>collections.Counter.update</snippet></ROW><ROW><id>19178578</id><snippet>&gt;&gt;&gt; c = Counter('aaab')
&gt;&gt;&gt; c.update(Counter('babac'))
&gt;&gt;&gt; c
Counter({'a': 5, 'b': 3, 'c': 1})
</snippet></ROW><ROW><id>19178578</id><snippet>__iadd__</snippet></ROW><ROW><id>19178578</id><snippet>&gt;&gt;&gt; sys.version
'3.3.0 (default, Sep 29 2012, 17:14:58) \n[GCC 4.7.2]'
&gt;&gt;&gt; print(Counter.__iadd__.__doc__)
Inplace add from another counter, keeping only positive counts.

        &gt;&gt;&gt; c = Counter('abbb')
        &gt;&gt;&gt; c += Counter('bcc')
        &gt;&gt;&gt; c
        Counter({'b': 4, 'c': 2, 'a': 1})
</snippet></ROW><ROW><id>19178586</id><snippet>re.sub</snippet></ROW><ROW><id>19178586</id><snippet>Fore.YELLOW + find + Fore.RESET</snippet></ROW><ROW><id>19178586</id><snippet>find</snippet></ROW><ROW><id>19178586</id><snippet>if case == "y" or case == "Y":
    pattern = re.compile(find, re.I)
else:
    pattern = find
</snippet></ROW><ROW><id>19178586</id><snippet>pattern</snippet></ROW><ROW><id>19178586</id><snippet>re.sub</snippet></ROW><ROW><id>19178586</id><snippet>find</snippet></ROW><ROW><id>19178586</id><snippet>line = re.sub(pattern, Fore.YELLOW + find + Fore.RESET, line)
</snippet></ROW><ROW><id>19178698</id><snippet>choosePath('0', '9')</snippet></ROW><ROW><id>19178698</id><snippet>if net.has_key(s)==False:
    return "There is no start node called " + str(s) + "."
if net.has_key(t)==False:
    return "There is no terminal node called " + str(t) + "."
</snippet></ROW><ROW><id>19178698</id><snippet>else: return "There is no path from " + str(s) + " to " + str(t) + "."
</snippet></ROW><ROW><id>19178698</id><snippet>class NoPathException(Exception):
    pass

def choosePath(s, t):
    net = {'0':{'1':138, '9':150},
       '1':{'0':138, '2':178, '8':194},
       '2':{'1':178, '3':47.5},
       '3':{'2':47.5, '4':70},
       '4':{'3':70, '5':70},
       '5':{'4':70, '6':36},
       '6':{'5':36, '7':50},
       '7':{'6':50, '8':81},
       '8':{'7':81, '9':138, '1':194},
       '9':{'8':138, '0':150}}
    # sanity check
    if s == t:
        return []
    if not net.has_key(s):
        raise ValueError("start node argument not in net")
    if not net.has_key(t):
        raise ValueError("end node argument not in net")
    # create a labels dictionary
    labels={}
    # record whether a label was updated
    order={}
    # populate an initial labels dictionary
    for i in net.keys():
        if i == s: labels[i] = 0 # shortest distance form s to s is 0
        else: labels[i] = float("inf") # initial labels are infinity
    from copy import copy
    drop1 = copy(labels) # used for looping
    ## begin algorithm
    while len(drop1) &gt; 0:
        # find the key with the lowest label
        minNode = min(drop1, key = drop1.get) #minNode is the nod2 with the smallest label
        # update labels for nodes that are connected to minNode
        for i in net[minNode]:
            if labels[i] &gt; (labels[minNode] + net[minNode][i]):
                labels[i] = labels[minNode] + net[minNode][i]
                drop1[i] = labels[minNode] + net[minNode][i]
                order[i] = minNode
        del drop1[minNode] # once a node has been visited, it's excluded from drop1
    ## end algorithm
    # print shortest path
    temp = copy(t)
    rpath = []
    path = []
    while 1:
        rpath.append(temp)
        if order.has_key(temp):
            temp = order[temp]
        else:
            raise NoPathException("no path to solution")
        if temp == s:
            rpath.append(temp)
            break
    for j in range(len(rpath)-1,-1,-1):
        path.append(rpath[j])

    return path
</snippet></ROW><ROW><id>19178698</id><snippet>a = choosePath('3', '9')
print(a)
['3', '4', '5', '6', '7', '8', '9']
</snippet></ROW><ROW><id>19178777</id><snippet>import numpy
arr = numpy.array([1,2,3])
mat = numpy.diag(arr)
print(mat)
&gt;&gt;&gt; 
[[1 0 0]
 [0 2 0]
 [0 0 3]]
</snippet></ROW><ROW><id>19178958</id><snippet>cmd</snippet></ROW><ROW><id>19178958</id><snippet>cmd = r"tshark -o column.format:"Source","%s", "Destination","%d", "dstport"," %uD"' -r %s"%(filename)
#              -- no comma here -^                              ----^  ----^     --^
</snippet></ROW><ROW><id>19178958</id><snippet>"</snippet></ROW><ROW><id>19178958</id><snippet>"Source"</snippet></ROW><ROW><id>19178958</id><snippet>cmd = ["tshark", "-o", 
       'column.format:"Source","%s","Destination","%d","dstport"," %uD"',
       "-r", filename]
</snippet></ROW><ROW><id>19178959</id><snippet>A</snippet></ROW><ROW><id>19178959</id><snippet>B</snippet></ROW><ROW><id>19178959</id><snippet>C</snippet></ROW><ROW><id>19178959</id><snippet>df.C = df.A + df.B
</snippet></ROW><ROW><id>19178959</id><snippet>apply</snippet></ROW><ROW><id>19178959</id><snippet>0</snippet></ROW><ROW><id>19178959</id><snippet>1</snippet></ROW><ROW><id>19178959</id><snippet>&gt;&gt;&gt; df.apply(lambda s: s)[:3]
           A          B          C          D
0  57.890858  72.344298  16.348960  84.109071
1  85.534617  53.067682  95.212719  36.677814
2  23.202907   3.788458  66.717430   1.466331
</snippet></ROW><ROW><id>19178959</id><snippet>&gt;&gt;&gt; df.apply(lambda s: s[0] + s[1])
A    143.425475
B    125.411981
C    111.561680
D    120.786886
dtype: float64
</snippet></ROW><ROW><id>19178959</id><snippet>axis=1</snippet></ROW><ROW><id>19178959</id><snippet>&gt;&gt;&gt; df.apply(lambda s: s[0] + s[1], axis=1)
0     130.235156
1     138.602299
2      26.991364
3     143.229523
...
98    152.640811
99     90.266934
</snippet></ROW><ROW><id>19178959</id><snippet>&gt;&gt;&gt; (df.apply(lambda s: s[0] + s[1], axis=1) == 
     df.apply(lambda s: s['A'] + s['B'], axis=1))
0     True
1     True
2     True
3     True
...
98    True
99    True
</snippet></ROW><ROW><id>19179031</id><snippet>urllib</snippet></ROW><ROW><id>19179031</id><snippet>urllib.urlretrieve</snippet></ROW><ROW><id>19179031</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; data = urllib.urlretrieve('http://www.python.org/pics/pythonHi.gif','pythonHi.gif')
</snippet></ROW><ROW><id>19179497</id><snippet>sys.modules</snippet></ROW><ROW><id>19179497</id><snippet>import_module</snippet></ROW><ROW><id>19179497</id><snippet>time = importlib.import_module('time')
</snippet></ROW><ROW><id>19179497</id><snippet>globals()['time'] = importlib.import_module('time')
</snippet></ROW><ROW><id>19179497</id><snippet>import</snippet></ROW><ROW><id>19179497</id><snippet>try</snippet></ROW><ROW><id>19179497</id><snippet>except</snippet></ROW><ROW><id>19179524</id><snippet>flask</snippet></ROW><ROW><id>19179524</id><snippet>Rule "/assets/&lt;path:filename&gt;" for "static" endpoint
Rule "/assets/&lt;path:filename&gt;" for "foo.static" endpoint
Rule "/assets/&lt;path:filename&gt;" for "bar.static" endpoint
</snippet></ROW><ROW><id>19179524</id><snippet>static</snippet></ROW><ROW><id>19179524</id><snippet>static</snippet></ROW><ROW><id>19179524</id><snippet>Map.update</snippet></ROW><ROW><id>19179524</id><snippet>class MyApp(Flask):
    def static_dispatchers(self):
        yield super(MyApp, self).send_static_file
        for blueprint in self.blueprints.values():
            yield blueprint.send_static_file

    def send_static_file(self, filename):
        last_exception = None
        for static_dispatcher in self.static_dispatchers():
            try:
                return static_dispatcher(filename)
            except NotFound as e:
                last_exception = e
        raise last_exception
</snippet></ROW><ROW><id>19179524</id><snippet>/static
/static/app.js "console.log('app');"
/foo/static/app.js "console.log('foo app');"
/foo/static/blue.js "console.log('foo blue');"
/foo/static/foo.js "console.log('foo self');"
/bar/static/app.js "console.log('bar app');"
/bar/static/blue.js "console.log('foo blue');"
/bar/static/bar.js "console.log('bar self');"
</snippet></ROW><ROW><id>19179524</id><snippet>&lt;script src="{{ url_for('static', filename='app.js') }}"&gt;&lt;/script&gt;
&lt;script src="{{ url_for('foo.static', filename='app.js') }}"&gt;&lt;/script&gt;
&lt;script src="{{ url_for('bar.static', filename='app.js') }}"&gt;&lt;/script&gt;
&lt;script src="{{ url_for('foo.static', filename='blue.js') }}"&gt;&lt;/script&gt;
&lt;script src="{{ url_for('bar.static', filename='blue.js') }}"&gt;&lt;/script&gt;
&lt;script src="{{ url_for('foo.static', filename='foo.js') }}"&gt;&lt;/script&gt;
&lt;script src="{{ url_for('bar.static', filename='bar.js') }}"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>19179524</id><snippet>app
app
app
foo blue (or bar blue)
foo blue (or bar blue)
foo self
bar self
</snippet></ROW><ROW><id>19179524</id><snippet>url_for</snippet></ROW><ROW><id>19179708</id><snippet>mask = df[['PhaseA','PhaseB','PhaseC']].isin([415,423,427,432]).all(axis=1)
df.ix[mask]
</snippet></ROW><ROW><id>19179708</id><snippet>In [51]: mask = df[['PhaseA','PhaseB','PhaseC']].isin([415,423,427,432]).all(axis=1)
In [52]: mask 
Out[52]: 
Index
2013-01-07 00:00:00    False
2013-01-07 00:01:00    False
2013-01-07 00:02:00     True
2013-01-07 00:03:00    False
2013-01-07 00:04:00     True
2013-01-07 00:05:00    False
dtype: bool

In [53]: df.ix[mask]
</snippet></ROW><ROW><id>19179708</id><snippet>Out[53]: 
                     PhaseA  PhaseB  PhaseC  DataCol
Index                                               
2013-01-07 00:02:00     415     423     415      1.2
2013-01-07 00:04:00     415     423     423      1.2
</snippet></ROW><ROW><id>19179708</id><snippet>DataFrame.isin</snippet></ROW><ROW><id>19179708</id><snippet>DataFrame.isin</snippet></ROW><ROW><id>19179708</id><snippet>mask</snippet></ROW><ROW><id>19179708</id><snippet>mask = df[['PhaseA','PhaseB','PhaseC']].applymap(set([415,423,427,]).__contains__).all(axis=1)
</snippet></ROW><ROW><id>19179805</id><snippet>http://localhost:8000/complete/google-oauth2/</snippet></ROW><ROW><id>19179805</id><snippet># TWITTER
#
SOCIAL_AUTH_TWITTER_KEY = '&lt;...&gt;'
SOCIAL_AUTH_TWITTER_SECRET = '&lt;.....&gt;'
</snippet></ROW><ROW><id>19180081</id><snippet>pip install git+https://github.com/django/django@c939b2a1cb22b5035b1ccf90ee7686f334e6049d#egg=django==0.96.5
</snippet></ROW><ROW><id>19180179</id><snippet>(ID, level)</snippet></ROW><ROW><id>19180179</id><snippet># Lookup for values by (id, level)
values = {}
minlevel, maxlevel = float('inf'), float('-inf')
for id_, level, value in inputlist:
    values[id_, level] = value
    if level &lt; minlevel:
        minlevel = level
    if level &gt; maxlevel:
        maxlevel = level

def level_sort(tup):
    id_, level, value = tup
    sortkey = [level]
    for l in range(minlevel, maxlevel + 1):
        sortkey.append(values.get((id_, l)) if l &gt;= level else None)
    return sortkey

sorted(inputlist, key=level_sort)
</snippet></ROW><ROW><id>19180179</id><snippet>None</snippet></ROW><ROW><id>19180179</id><snippet>(B, 1, None)</snippet></ROW><ROW><id>19180179</id><snippet>(C, 1, None)</snippet></ROW><ROW><id>19180179</id><snippet>&gt;&gt;&gt; level_sort(('B', 1, None))
[1, None, 5.0, 55]
&gt;&gt;&gt; level_sort(('C', 1, None))
[1, None, 5.0, 40]
</snippet></ROW><ROW><id>19180179</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; A, B, C = 'ABC'
&gt;&gt;&gt; inputlist = [(A, 1, None),
...  (B, 1, None),
...  (C, 1, None),
...  (A, 2, 1.1),
...  (B, 2, 5.0),
...  (C, 2, 5.0),
...  (C, 3, 40),
...  (B, 3, 55)]
&gt;&gt;&gt; values = {}
&gt;&gt;&gt; minlevel, maxlevel = float('inf'), float('-inf')
&gt;&gt;&gt; for id_, level, value in inputlist:
...     values[id_, level] = value
...     if level &lt; minlevel:
...         minlevel = level
...     if level &gt; maxlevel:
...         maxlevel = level
... 
&gt;&gt;&gt; def level_sort(tup):
...     id_, level, value = tup
...     sortkey = [level]
...     for l in range(minlevel, maxlevel + 1):
...         sortkey.append(values.get((id_, l)) if l &gt;= level else None)
...     return sortkey
... 
&gt;&gt;&gt; pprint(sorted(inputlist, key=level_sort))
[('A', 1, None),
 ('C', 1, None),
 ('B', 1, None),
 ('A', 2, 1.1),
 ('C', 2, 5.0),
 ('B', 2, 5.0),
 ('C', 3, 40),
 ('B', 3, 55)]
</snippet></ROW><ROW><id>19180327</id><snippet>for</snippet></ROW><ROW><id>19180327</id><snippet>after</snippet></ROW><ROW><id>19180327</id><snippet>def f():
    for i in range (0,numLights):
        master.after(100, renderGUI(a))
        w.update_idletasks()    
        for n in range(0,numLights):
            if a[n]&gt;1:
                a[n] = a[n]-1
            elif a[n] == 1:
                    #then its about to become nought, right?
                    a[n-1] = speed[n]
                    speed[n-1] = speed[n]
                    a[n] = a[n]-1
                    continue
            continue

btn = Button(master, text='Stop', width=20, command=master.destroy)
btn.pack()
master.after(1, f)
master.mainloop()
</snippet></ROW><ROW><id>19180327</id><snippet>update_idletasks</snippet></ROW><ROW><id>19180327</id><snippet>def updatesdisplay(root, t=0):
    def _updatesdisplay(func):
        def driver(iterator):
            try: next(iterator)
            except StopIteration: pass
            else: 
                if t: root.after(t, driver, iterator)
                else: root.after_idle(driver, iterator)
        def wrapped():
            driver(func())
        return wrapped
    return _updatesdisplay

@updatesdisplay(master, 100) # 100 because we want to slow things down a bit
def f():
    for i in range (0,numLights):
        renderGUI(a)
        yield # window gets updated here
        for n in range(0,numLights):
            if a[n]&gt;1:
                a[n] = a[n]-1
            elif a[n] == 1:
                    #then its about to become nought, right?
                    a[n-1] = speed[n]
                    speed[n-1] = speed[n]
                    a[n] = a[n]-1
                    continue
            continue

btn = Button(master, text='Stop', width=20, command=master.destroy)
btn.pack()
master.after(1, f)
master.mainloop()
</snippet></ROW><ROW><id>19180651</id><snippet> In [7]: index = date_range('20131009 08:30','20131010 10:05',freq='5T')

In [8]: df = DataFrame(randn(len(index),2),columns=list('AB'),index=index)

In [9]: df
Out[9]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 308 entries, 2013-10-09 08:30:00 to 2013-10-10 10:05:00
Freq: 5T
Data columns (total 2 columns):
A    308  non-null values
B    308  non-null values
dtypes: float64(2)

In [10]: df.between_time('9:00','10:00')
Out[10]: 
                            A         B
2013-10-09 09:00:00 -0.664639  1.597453
2013-10-09 09:05:00  1.197290 -0.500621
2013-10-09 09:10:00  1.470186 -0.963553
2013-10-09 09:15:00  0.181314 -0.242415
2013-10-09 09:20:00  0.969427 -1.156609
2013-10-09 09:25:00  0.261473  0.413926
2013-10-09 09:30:00 -0.003698  0.054953
2013-10-09 09:35:00  0.418147 -0.417291
2013-10-09 09:40:00  0.413565 -1.096234
2013-10-09 09:45:00  0.460293  1.200277
2013-10-09 09:50:00 -0.702444 -0.041597
2013-10-09 09:55:00  0.548385 -0.832382
2013-10-09 10:00:00 -0.526582  0.758378
2013-10-10 09:00:00  0.926738  0.178204
2013-10-10 09:05:00 -1.178534  0.184205
2013-10-10 09:10:00  1.408258  0.948526
2013-10-10 09:15:00  0.523318  0.327390
2013-10-10 09:20:00 -0.193174  0.863294
2013-10-10 09:25:00  1.355610 -2.160864
2013-10-10 09:30:00  1.930622  0.174683
2013-10-10 09:35:00  0.273551  0.870682
2013-10-10 09:40:00  0.974756 -0.327763
2013-10-10 09:45:00  1.808285  0.080267
2013-10-10 09:50:00  0.842119  0.368689
2013-10-10 09:55:00  1.065585  0.802003
2013-10-10 10:00:00 -0.324894  0.781885
</snippet></ROW><ROW><id>19180737</id><snippet>SELECT foo.name, bar.name, (SELECT COUNT('*') FROM baz WHERE baz.foo_id=foo.id AND baz.bar_id=bar.id) FROM foo, bar
</snippet></ROW><ROW><id>19180737</id><snippet>count_query = session.query(func.count('*')).filter(Baz.foo_id==Foo.id).filter(Baz.bar_id==Bar.id).correlate(Bar).correlate(Foo).as_scalar()
query = session.query(Foo.name, Bar.name, count_query)
</snippet></ROW><ROW><id>19180737</id><snippet>FROM foo LEFT OUTER JOIN baz ON foo.id=baz.foo_id RIGHT OUTER JOIN bar ON bar.id=baz.bar_id
</snippet></ROW><ROW><id>19180737</id><snippet>RIGHT OUTER JOIN</snippet></ROW><ROW><id>19180755</id><snippet>import Tkinter as tk
import ttk

#from PIL import Image

class Application:

    def __init__(self, parent):
        self.parent = parent

        self.content = ttk.Frame(parent, padding=(3,3,12,12))
        self.content.pack()
        self.content.columnconfigure(1, weight=1)
        self.content.rowconfigure(1, weight=1)

        self.row1()


    def row1(self):
        self.enButton = ttk.Button(self.content, text="Enable", command=self.enableCmd)
        self.disButton = ttk.Button(self.content, text="Disable", command=self.disableCmd)
        self.enButton.grid(column=1, row=1)
        self.disButton.grid(column=2, row=1)
        self.disButton.state(['disabled'])

    def enableCmd(self):
        self.disButton.state(['!disabled'])
        self.enButton.state(['disabled'])
        # self.ser.write("pe001\n")

    def disableCmd(self):
        self.disButton.state(['disabled'])
        self.enButton.state(['!disabled'])


if __name__ == '__main__':
    root = tk.Tk()
    root.title("PC Control Interface")
    #img = Image("photo", file="T.ico") # "appicon.gif"
    #root.tk.call('wm','iconphoto',root._w,img)

    app = Application(root)

    root.mainloop()
</snippet></ROW><ROW><id>19180786</id><snippet>q</snippet></ROW><ROW><id>19180786</id><snippet>q = np.array([[1,2,3],[1,2,3]])
</snippet></ROW><ROW><id>19180786</id><snippet>In [77]: q.size
Out[77]: 6
</snippet></ROW><ROW><id>19180786</id><snippet>np.unique</snippet></ROW><ROW><id>19180786</id><snippet>q</snippet></ROW><ROW><id>19180786</id><snippet>In [78]: q = np.empty(2, dtype='object')

In [79]: q[:] = [[1,2,3],[1,2,3]]

In [80]: q.size
Out[80]: 2
</snippet></ROW><ROW><id>19180786</id><snippet>np.unique</snippet></ROW><ROW><id>19180786</id><snippet>In [81]: np.unique(q)
Out[81]: array([[1, 2, 3]], dtype=object)
</snippet></ROW><ROW><id>19180786</id><snippet>q</snippet></ROW><ROW><id>19180786</id><snippet>In [20]: q = np.array([[1,2,3],[1,2,4]])

In [21]: q2 = np.empty(2, dtype='object')

In [22]: q2[:] = [[1,2,3],[1,2,4]]

In [23]: q
Out[23]: 
array([[1, 2, 3],
       [1, 2, 4]])

In [24]: q2
Out[24]: array([[1, 2, 3], [1, 2, 4]], dtype=object)
</snippet></ROW><ROW><id>19180786</id><snippet>q</snippet></ROW><ROW><id>19180786</id><snippet>q2</snippet></ROW><ROW><id>19180786</id><snippet>q</snippet></ROW><ROW><id>19180786</id><snippet>q2</snippet></ROW><ROW><id>19180786</id><snippet>np.unique</snippet></ROW><ROW><id>19180786</id><snippet>q</snippet></ROW><ROW><id>19180786</id><snippet>np.unique</snippet></ROW><ROW><id>19180786</id><snippet>q2</snippet></ROW><ROW><id>19180786</id><snippet>In [25]: np.unique(q)
Out[25]: array([1, 2, 3, 4])

In [26]: np.unique(q2)
Out[26]: array([[1, 2, 3], [1, 2, 4]], dtype=object)
</snippet></ROW><ROW><id>19180786</id><snippet>np.unique(q)</snippet></ROW><ROW><id>19180786</id><snippet>In [27]: np.array([np.unique(q).tolist()],dtype='object')
Out[27]: array([[1, 2, 3, 4]], dtype=object)
</snippet></ROW><ROW><id>19180786</id><snippet>np.atleast_2d</snippet></ROW><ROW><id>19180786</id><snippet>In [28]: np.atleast_2d(np.unique(q))
Out[28]: array([[1, 2, 3, 4]])
</snippet></ROW><ROW><id>19180786</id><snippet>array([[1, 2, 3], [1, 2, 4]], dtype=object)
</snippet></ROW><ROW><id>19180786</id><snippet>q</snippet></ROW><ROW><id>19180786</id><snippet>object</snippet></ROW><ROW><id>19180786</id><snippet>q = np.empty(2, dtype='object')
</snippet></ROW><ROW><id>19180786</id><snippet>object</snippet></ROW><ROW><id>19180786</id><snippet>In [32]: set(map(tuple, ([[1, 2, 3], [1, 2, 4]])))
Out[32]: {(1, 2, 3), (1, 2, 4)}

In [33]: %timeit set(map(tuple, ([[1, 2, 3], [1, 2, 4]])))
1000000 loops, best of 3: 1.07 µs per loop

In [34]: %timeit np.unique(q2)
100000 loops, best of 3: 13.1 µs per loop
</snippet></ROW><ROW><id>19180871</id><snippet>import os

os.environ["DJANGO_SETTINGS_MODULE"] = "settings"  # "settings" will be your django settings file path
</snippet></ROW><ROW><id>19181008</id><snippet>def sort_by_month(entry):
    return meses_ord[entry['month']]

sorted(fechas_, key=sort_by_month)
</snippet></ROW><ROW><id>19181008</id><snippet>sorted(fechas_, key=lambda entry: meses_ord[entry['month']])
</snippet></ROW><ROW><id>19181008</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; meses_ord = {'January': 1, 'February': 2, 'March': 3, 'April': 4}
&gt;&gt;&gt; fechas_ = [{'anyo': 2010, 'horas': Decimal('52.5'), 'month': 'March', 'importe': Decimal('4200.000')},
... {'anyo': 2010, 'horas': Decimal('40.0'), 'month': 'February', 'importe':Decimal('3200.000')},
... {'anyo': 2010, 'horas': Decimal('42.5'), 'month': 'April', 'importe': Decimal('3400.000')},
... {'anyo': 2010, 'horas': Decimal('20.0'), 'month': 'January', 'importe': Decimal('1600.000')}]
&gt;&gt;&gt; pprint(sorted(fechas_, key=lambda entry: meses_ord[entry['month']]))
[{'anyo': 2010,
  'horas': Decimal('20.0'),
  'importe': Decimal('1600.000'),
  'month': 'January'},
 {'anyo': 2010,
  'horas': Decimal('40.0'),
  'importe': Decimal('3200.000'),
  'month': 'February'},
 {'anyo': 2010,
  'horas': Decimal('52.5'),
  'importe': Decimal('4200.000'),
  'month': 'March'},
 {'anyo': 2010,
  'horas': Decimal('42.5'),
  'importe': Decimal('3400.000'),
  'month': 'April'}]
</snippet></ROW><ROW><id>19181248</id><snippet>import pdb
pdb.set_trace()
</snippet></ROW><ROW><id>19181248</id><snippet>-s</snippet></ROW><ROW><id>19181248</id><snippet>pytest.set_trace()</snippet></ROW><ROW><id>19181248</id><snippet>-s</snippet></ROW><ROW><id>19181384</id><snippet>self.fig</snippet></ROW><ROW><id>19181384</id><snippet>self.ax</snippet></ROW><ROW><id>19181384</id><snippet>plot</snippet></ROW><ROW><id>19181384</id><snippet>def plot(self):
    """Data plotting"""

    # PLOT THE HISTOGRAM
    self.fig, self.ax = plt.subplots()
    hist_fit = expo(self.bin_centres, *self.fit_par)
    self.ax.bar(self.bin_centres, self.hist, self.bin_width)
    self.ax.plot(self.bin_centres[fit_start:-1], hist_fit[fit_start:-1])
</snippet></ROW><ROW><id>19181384</id><snippet>def fit(self, fit_start=0):
    """Histogram fitting"""

    self.fit_guess = [self.hist[0], 1 / self.mean]
    self.fit_par, self.fit_var = curve_fit(expo,
                                           self.bin_centres[fit_start:-1],
                                           self.hist[fit_start:-1],
                                           p0=self.fit_guess)
    self.tau = 1 / self.fit_par[1]
</snippet></ROW><ROW><id>19181384</id><snippet>if __name__ == "__main__":

    data1.load(os.path.join(dirname, file_list[i]))
    data1.fit()
    print(data1.tau)
    data1.plot()
    data1.figure
</snippet></ROW><ROW><id>19181384</id><snippet>fig, ax = plt.subplots()
</snippet></ROW><ROW><id>19181384</id><snippet>ax</snippet></ROW><ROW><id>19181384</id><snippet>def plot(self, ax):
    hist_fit = expo(self.bin_centres, *self.fit_par)
    ...    

fig, ax = plt.subplots()
data1.plot(ax)
</snippet></ROW><ROW><id>19181459</id><snippet>x * np.arange(1, 9).reshape(-1, 1)
</snippet></ROW><ROW><id>19181459</id><snippet>x * arange(1, 9)[:, np.newaxis]
</snippet></ROW><ROW><id>19181459</id><snippet>arange(1, 9)</snippet></ROW><ROW><id>19181459</id><snippet>x</snippet></ROW><ROW><id>19181459</id><snippet>reshape</snippet></ROW><ROW><id>19181459</id><snippet>x * arange(1, 4)
</snippet></ROW><ROW><id>19181594</id><snippet>cv2.imread</snippet></ROW><ROW><id>19181594</id><snippet>cv2.split</snippet></ROW><ROW><id>19181594</id><snippet>&gt;&gt;&gt; import cv2
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; img = cv2.imread("foo.jpg")
&gt;&gt;&gt; b,g,r = cv2.split(img)
</snippet></ROW><ROW><id>19181678</id><snippet>value</snippet></ROW><ROW><id>19181678</id><snippet>key</snippet></ROW><ROW><id>19181678</id><snippet>for value, key in clubDict.items():
</snippet></ROW><ROW><id>19181678</id><snippet>.items()</snippet></ROW><ROW><id>19181678</id><snippet>(key, value)</snippet></ROW><ROW><id>19181678</id><snippet>def getTotals():
    result = defaultdict(int)
    regexp = re.compile(r'(?:ttp_ws_sm|ttpv1)_(\d+)_')

    with open(os.path.join(source, 'ttp_13_08.csv'), 'r') as f:
        rows = csv.reader(f)

        #adds total values for each club code (from csv file)
        for row in rows:
            match = regexp.search(row[1])
            if match:
                result[match.group(1)] += int(row[13])
        data.update(result)

        for key in clubDict.viewkeys() &amp; data:
            club_value, data_value = clubDict[key], data[key]
            if club_value == data_value:
                print 'match'
            else:
                print '{0}, {1}, {2}'.format(key, club_value, data_value)
</snippet></ROW><ROW><id>19181678</id><snippet>clubDict</snippet></ROW><ROW><id>19181678</id><snippet>dict.viewkeys()</snippet></ROW><ROW><id>19181678</id><snippet>data</snippet></ROW><ROW><id>19181978</id><snippet>Ctrl+Alt+Enter</snippet></ROW><ROW><id>19181978</id><snippet>Cmd+Alt+Enter</snippet></ROW><ROW><id>19182081</id><snippet>def group(lst, limit):

    lim = 0
    grp = []

    for x in lst:
        if x + lim &gt; limit:
            yield grp
            grp = []
            lim = 0

        grp.append(x)
        lim += x

    yield grp

print list(group([1, 1, 1, 1, 2, 2, 1, 3, 1, 1, 2], 3))
</snippet></ROW><ROW><id>19182306</id><snippet>bisect.bisect()</snippet></ROW><ROW><id>19182306</id><snippet>bisect.bisect_right()</snippet></ROW><ROW><id>19182306</id><snippet>bisect.bisect_left()</snippet></ROW><ROW><id>19182306</id><snippet>bisect.bisect_left()</snippet></ROW><ROW><id>19182306</id><snippet>&gt;&gt;&gt; import bisect
&gt;&gt;&gt; t3 = ['carver', 'carvers', 'carves', 'carving', 'carvings']
&gt;&gt;&gt; bisect.bisect(t3, 'carves')
3
&gt;&gt;&gt; bisect.bisect_left(t3, 'carves')
2
&gt;&gt;&gt; bisect.bisect == bisect.bisect_right
True
&gt;&gt;&gt; bisect.bisect == bisect.bisect_left
False
</snippet></ROW><ROW><id>19182434</id><snippet>arr.data[1][1]=5
</snippet></ROW><ROW><id>19182434</id><snippet>_get_data()</snippet></ROW><ROW><id>19182434</id><snippet>arr[1][1]=5
</snippet></ROW><ROW><id>19182434</id><snippet>__getitme__()</snippet></ROW><ROW><id>19182434</id><snippet>dout = mvoid(dout, mask=mask, hardmask=self._hardmask)
</snippet></ROW><ROW><id>19182434</id><snippet>[1][0]</snippet></ROW><ROW><id>19182434</id><snippet>movid()</snippet></ROW><ROW><id>19182434</id><snippet>__getitem__()</snippet></ROW><ROW><id>19182462</id><snippet>from collections import defaultdict
import re

# Nested defaultdict for data structure
def make_map():
    def make_map_dict():
        return defaultdict(dict)
    return defaultdict(make_map_dict)

# Read in the data
with open('/path/to/your/txt_file.txt', 'r') as f:
    txt_data = [map(str.strip, x.split('\n')) for x in map(str.strip, f.read().split('\n\n')) if x]

with open('/path/to/your/csv_file.csv', 'r') as f:
    header = f.readline()
    csv_data = [map(str.strip, x.split(',')) for x in map(str.strip, f.read().split('\n')) if x]

# Generate a mapping dictionaries
txt_map = defaultdict(make_map)
csv_map = defaultdict(make_map)

# Regex matches
name_re = re.compile(r'^(\d+) +(\w+(?: \w+)*) +(\d+/\d+)$')
data_re = re.compile(r'^(Data(?:\d+)?) +(\$\d+(?:\.\d{2})?)$')

# Make txt mapping
for datapoint in txt_data:
    names = [name_re.match(x).group(2) for x in datapoint[2:] if name_re.match(x)]
    data = {data_re.match(x).group(1): data_re.match(x).group(2) for x in datapoint[2:] if data_re.match(x)}
    for name in names:
        txt_map[datapoint[1]][datapoint[0]][name] = data

# Make csv mapping
for datapoint in csv_data:
    csv_map[datapoint[0]][datapoint[1]][datapoint[8]] = [datapoint[9]]

# Merge maps
final_map = defaultdict(make_map)
for x in txt_map:
    for y in txt_map[x]:
        for z in txt_map[x][y]:
            if csv_map[x][y][z] is not None:
                final_map[x][y][z] = csv_map[x][y][z] + [txt_map[x][y][z]]

# You now have final_map to do with what you will
</snippet></ROW><ROW><id>19182462</id><snippet>zip</snippet></ROW><ROW><id>19182899</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; telems = d.xpath('.//a:r[not(.//a:hlinkClick)]//a:t/text()', namespaces=NAMESPACES)
&gt;&gt;&gt; joined_text = ''.join(telems).strip()
&gt;&gt;&gt; re.sub('\s+', ' ', joined_text)
'Go for a test-drive.'
</snippet></ROW><ROW><id>19182966</id><snippet>len(a) - a[::-1].index(max(a)) - 1
</snippet></ROW><ROW><id>19182966</id><snippet>a[::-1]</snippet></ROW><ROW><id>19182966</id><snippet>index</snippet></ROW><ROW><id>19182966</id><snippet>max(a)</snippet></ROW><ROW><id>19182966</id><snippet>def last_max_index2(s):
    m_index = m = None
    for i, elem in enumerate(s):
        if elem &gt;= m:
            m, m_index = elem, i
     return m_index
</snippet></ROW><ROW><id>19182966</id><snippet>last_max_index2</snippet></ROW><ROW><id>19182966</id><snippet>reduce</snippet></ROW><ROW><id>19182966</id><snippet>enumerate</snippet></ROW><ROW><id>19182966</id><snippet>last_max_index3 = lambda s: max((x, i) for i, x in enumerate(s))[1] 
</snippet></ROW><ROW><id>19182966</id><snippet>enumerate</snippet></ROW><ROW><id>19183195</id><snippet>finalresult = sorted(result, key=lambda word: (-word[1], len(word[0]), word[0]))
</snippet></ROW><ROW><id>19183300</id><snippet>map</snippet></ROW><ROW><id>19183300</id><snippet>abs</snippet></ROW><ROW><id>19183300</id><snippet>In [1]: sorted(map(abs, lista))
Out[1]: [1, 2, 3, 5, 7, 8]
</snippet></ROW><ROW><id>19183300</id><snippet># The list defined above
lista = [a,b,c,d]

# Sorted from least to greatest absolute value
sorted_abs_list = sorted(map(abs, lista))

# Sorted from greatest to least absolute value
sorted_abs_list = sorted(map(abs, lista), reverse=True)
</snippet></ROW><ROW><id>19183683</id><snippet>In [1]: df = pd.read_csv('foo.csv', sep=',', parse_dates=[0], header=None,
                         names=['Date', 'letter', 'value'])

In [2]: df
Out[2]: 
                 Date letter  value
0 2013-01-01 00:00:00      A      1
1 2013-01-02 00:00:00      A      2
2 2013-01-03 00:00:00      A      3
3 2013-01-04 00:00:00      A      4
4 2013-01-05 00:00:00      A      5
5 2013-01-01 00:00:00      B      1
6 2013-01-02 00:00:00      B      2
7 2013-01-03 00:00:00      B      3
8 2013-01-04 00:00:00      B      4
9 2013-01-05 00:00:00      B      5

In [3]: df.pivot(index='Date', columns='letter', values='value')
Out[3]:
letter      A  B
Date            
2013-01-01  1  1
2013-01-02  2  2
2013-01-03  3  3
2013-01-04  4  4
2013-01-05  5  5
</snippet></ROW><ROW><id>19183896</id><snippet>fib/fib.pyc</snippet></ROW><ROW><id>19183896</id><snippet>__pycache__</snippet></ROW><ROW><id>19183896</id><snippet>(python3.3.2)~/code/python/stackoverflow$ nosetests test_fib.py 
....
----------------------------------------------------------------------
Ran 4 tests in 0.001s

OK
</snippet></ROW><ROW><id>19183896</id><snippet>python</snippet></ROW><ROW><id>19183896</id><snippet>ipython</snippet></ROW><ROW><id>19183896</id><snippet>&gt;&gt;&gt; from fib import fib
&gt;&gt;&gt; fib
???
</snippet></ROW><ROW><id>19183896</id><snippet>fib</snippet></ROW><ROW><id>19183896</id><snippet>&lt;function ...&gt;</snippet></ROW><ROW><id>19183896</id><snippet>&lt;module ...&gt;</snippet></ROW><ROW><id>19183896</id><snippet>&gt;&gt;&gt; from fib import fib
&gt;&gt;&gt; fib
&lt;function fib at 0x10cb7d9e0&gt;
</snippet></ROW><ROW><id>19183896</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>19183896</id><snippet>fib</snippet></ROW><ROW><id>19183896</id><snippet>test_fib</snippet></ROW><ROW><id>19183896</id><snippet>__future__</snippet></ROW><ROW><id>19183896</id><snippet>absolute_import</snippet></ROW><ROW><id>19184028</id><snippet>lines=method.split('\n')</snippet></ROW><ROW><id>19184028</id><snippet>lines</snippet></ROW><ROW><id>19184028</id><snippet>with open("path to save the file + filename.txt", "w") as f:
  f.write(method)
</snippet></ROW><ROW><id>19184439</id><snippet>test(?:\w|\s(?!test))+?follow
</snippet></ROW><ROW><id>19184439</id><snippet>(?:)</snippet></ROW><ROW><id>19184439</id><snippet>\w</snippet></ROW><ROW><id>19184439</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>19184439</id><snippet>\s</snippet></ROW><ROW><id>19184439</id><snippet>\s(?!test)</snippet></ROW><ROW><id>19184439</id><snippet>test</snippet></ROW><ROW><id>19184439</id><snippet>()+?</snippet></ROW><ROW><id>19184439</id><snippet>test
word
**test**
**word**
**follow**
word
test
**test**
**word**
**word**
**follow**
word
word
**test**
**word**
**follow**
</snippet></ROW><ROW><id>19184439</id><snippet>(?&lt;!\w)(test)\s(?!\1\s)(?:\w|\s(?!\1\s))*?(?&lt;!\w)follow(?!\w)
</snippet></ROW><ROW><id>19184557</id><snippet>import Control.Monad
import Control.Monad.State

-- filter `str` with the "stateful" monadic predicate function `handleChar`, 
-- with an initial state of 0
getRidOfArguments :: String -&gt; String
getRidOfArguments str = filterM handleChar str `evalState` 0

handleChar :: Char -&gt; State Int Bool
handleChar '(' = modify (+1) &gt;&gt; gets (&lt;= 1)
handleChar ')' = modify (max 0 . subtract 1) &gt;&gt; gets (== 0)
handleChar _   = gets (== 0)
</snippet></ROW><ROW><id>19184557</id><snippet>filter</snippet></ROW><ROW><id>19184557</id><snippet>filterM</snippet></ROW><ROW><id>19184557</id><snippet>State</snippet></ROW><ROW><id>19184687</id><snippet>&gt;&gt;&gt; from django.test import Client
&gt;&gt;&gt; c = Client()
&gt;&gt;&gt; response = c.get('/')
&gt;&gt;&gt; response.content
</snippet></ROW><ROW><id>19184732</id><snippet>scheme = { 'phone'  : ['People/Analyst/Phone'], \
           'email'  : ['People/Analyst/Email'], \
           'address': ['People/Analyst/Address'] \
           'name'   : [ 'People/Analyst/FirstName', 'People/Analyst/FirstName', ' ' ]
           ...
</snippet></ROW><ROW><id>19184732</id><snippet>for k,v in scheme.iteritems():
  dataStore[k] = [fetchXMLText(path) for path in v]
</snippet></ROW><ROW><id>19184840</id><snippet># Your starting point
course = 87
finalProject = 75
exam = 82

# What I would "crunch" into a calculator besides the variables
total1 = (course * 0.6) + (finalProject * 0.2) + (exam * 0.2)
total2 = (course * 0.7) + (finalProject * 0.1) + (exam * 0.2)

# Printing my computed answers just to make sure I can tell if it gives the right output
print "Total1: %s\tTotal2: %s" % (total1, total2)

# Printing the highest one. 
print "\nYour mark is: %s" % max(total1, total2)
</snippet></ROW><ROW><id>19184884</id><snippet>&gt;&gt;&gt; keys = ["Client", "Name", "Phone", "Address", "Email"]
</snippet></ROW><ROW><id>19184884</id><snippet>&gt;&gt;&gt; info_list = ["Client #1", "Joe", "800-213-4445", "123 Fake St.", "fake@fake.com"]
&gt;&gt;&gt; dict(zip(keys, info_list))
{'Email': 'fake@fake.com', 'Phone': '800-213-4445', 'Client': 'Client #1', 'Name': 'Joe', 'Address': '123 Fake St.'}
</snippet></ROW><ROW><id>19185104</id><snippet>text</snippet></ROW><ROW><id>19185104</id><snippet>html = '''...
&lt;slide&gt;
    America
    &lt;a&gt; 2 &lt;/a&gt;
    &lt;b&gt; 3 &lt;/b&gt;
    &lt;c&gt; 4 &lt;/c&gt;
&lt;/slide&gt;

&lt;slide&gt;
    Germany
    &lt;a&gt; 5 &lt;/a&gt;
    &lt;b&gt; 6 &lt;/b&gt;
    &lt;c&gt; 7 &lt;/c&gt;
&lt;/slide&gt;
....'''

import lxml.html
root = lxml.html.fromstring(html)
for slide in root.xpath('.//slide'):
    slide.text = ''
</snippet></ROW><ROW><id>19185252</id><snippet>stripped = (x.strip() for x in data)
stations = [x for x in stripped if x]
</snippet></ROW><ROW><id>19185252</id><snippet>stripped</snippet></ROW><ROW><id>19185252</id><snippet>stations = [x for x in (x.strip() for x in data) if x]
</snippet></ROW><ROW><id>19185309</id><snippet>'..webapps/myapp/lib/python2.7/site-packages/Project-0.0-py2.7.egg/project/templates'</snippet></ROW><ROW><id>19185309</id><snippet>python setup.py install</snippet></ROW><ROW><id>19185309</id><snippet>python setup.py develop</snippet></ROW><ROW><id>19185353</id><snippet>def check_n(request, elements, kw):
    if not is_valid(kw['n']):
        raise ValueError('invalid url parameter')
    return elements, kw

config.add_route('numbers', 'numbers/{n:[1-9]\d*}/', pregenerator=check_n)
</snippet></ROW><ROW><id>19185353</id><snippet>def validated_route_path(request, *args, **kwargs):
    route_name = args[0]
    path = request.route_path(*args, **kwargs)
    route_intr = request.registry.introspector.get('routes', route_name)
    route = route_intr['object']
    if route.match(path) is None:
        raise ValueError('invalid url generated')
    return path

config.add_request_method(validated_route_path)

request.validated_route_path('numbers', n='chicken') # -&gt; ValueError
</snippet></ROW><ROW><id>19185500</id><snippet>itertools.imap</snippet></ROW><ROW><id>19185592</id><snippet>/modules</snippet></ROW><ROW><id>19185592</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19185592</id><snippet>modules</snippet></ROW><ROW><id>19185592</id><snippet>export PYTHONPATH="$PYTHONPATH:./modules"
</snippet></ROW><ROW><id>19185592</id><snippet>export PYTHONPATH="$PYTHONPATH:modules"
</snippet></ROW><ROW><id>19185592</id><snippet>Jobscraperapp/modules</snippet></ROW><ROW><id>19185592</id><snippet>export PYTHONPATH="$PYTHONPATH:/absolute/path/to/Jobscraperapp/modules"
</snippet></ROW><ROW><id>19185717</id><snippet>a[-1]</snippet></ROW><ROW><id>19185717</id><snippet>&gt;&gt;&gt; a = [0,1,2,3,4,5,7,8]
&gt;&gt;&gt; a[-1]
8
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19185822</id><snippet>def get_cpu_type():
    from win32com.client import GetObject
    root_winmgmts = GetObject("winmgmts:root\cimv2")
    cpus = root_winmgmts.ExecQuery("Select * from Win32_Processor")
    return cpus[0].Name
</snippet></ROW><ROW><id>19185919</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d.setdefault('1', []).append('x')
&gt;&gt;&gt; d.setdefault('1', []).append('y')
&gt;&gt;&gt; d.setdefault('1', []).append('z')
&gt;&gt;&gt; d
{'1': ['x', 'y', 'z']}
</snippet></ROW><ROW><id>19185919</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>19185919</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; d['1'].append('x')
&gt;&gt;&gt; d['1'].append('y')
&gt;&gt;&gt; d['1'].append('z')
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {'1': ['x', 'y', 'z']})
</snippet></ROW><ROW><id>19185971</id><snippet># Prepare the list of words
word_file = open('wordfile', 'r', encoding='utf8')
words = [word.strip() for word in word_file.readlines()]
word_file.close()

# Now examine each sentence:
with open('sentencefile') as sentences:
    for sentence in sentences:
        found = False
        for word in words:
            if word in sentence:
                found = True
                break
        if found:
            print sentence
</snippet></ROW><ROW><id>19186144</id><snippet>list1 = [chr(a+65) for a in range(26)]
list2 = [chr(a+65)*300 for a in range(26)]

In [287]: list1[0]
'a'

In [288]: list2[0]
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
</snippet></ROW><ROW><id>19186364</id><snippet>&gt;&gt;&gt; queryset = Entry.objects.all()
&gt;&gt;&gt; print queryset[5] # Queries the database
&gt;&gt;&gt; print queryset[5] # Queries the database again
</snippet></ROW><ROW><id>19186364</id><snippet>my_items[0].name = 'joe'</snippet></ROW><ROW><id>19186364</id><snippet>my_items[0].save()</snippet></ROW><ROW><id>19186364</id><snippet>my_items[0]</snippet></ROW><ROW><id>19186499</id><snippet>&gt;&gt;&gt; cProfile.run("replace1_word2('foo bar baz')")
         313 function calls in 0.000 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 &lt;pyshell#216&gt;:1(replace1_word2)
        1    0.000    0.000    0.000    0.000 &lt;string&gt;:1(&lt;module&gt;)
       12    0.000    0.000    0.000    0.000 {len}
      286    0.000    0.000    0.000    0.000 {method 'append' of 'list' objects}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
       12    0.000    0.000    0.000    0.000 {range}


&gt;&gt;&gt; cProfile.run("replace1_word('foo bar baz')")
         27 function calls in 0.000 seconds

   Ordered by: standard name

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.000    0.000 &lt;pyshell#220&gt;:1(replace1_word)
        1    0.000    0.000    0.000    0.000 &lt;string&gt;:1(&lt;module&gt;)
       12    0.000    0.000    0.000    0.000 {len}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
       12    0.000    0.000    0.000    0.000 {range}
</snippet></ROW><ROW><id>19186499</id><snippet>list.append</snippet></ROW><ROW><id>19186499</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; from string import ascii_lowercase
&gt;&gt;&gt; def replace1_word4(word):
         words = ('{}'.join([word[:w], word[w+1:]]) for w in range(len(word)))
         return [word.format(replace)
                 for  word, replace in product(words, ascii_lowercase)]
</snippet></ROW><ROW><id>19186615</id><snippet>and</snippet></ROW><ROW><id>19186615</id><snippet>or</snippet></ROW><ROW><id>19186615</id><snippet>if obj is not None and obj.is_valid():
    ....
</snippet></ROW><ROW><id>19186615</id><snippet>  if operator.xyz(obj is not None, obj.is_valid()) 
</snippet></ROW><ROW><id>19186615</id><snippet>obj</snippet></ROW><ROW><id>19186615</id><snippet>None</snippet></ROW><ROW><id>19186715</id><snippet>CreateFileW</snippet></ROW><ROW><id>19186715</id><snippet>CreateFile</snippet></ROW><ROW><id>19186715</id><snippet>fileH = win32file.CreateFileW</snippet></ROW><ROW><id>19186903</id><snippet>unique_elements, indices = np.unique(data[:]['name'], return_index = True)
</snippet></ROW><ROW><id>19186903</id><snippet>data = data[indices]
</snippet></ROW><ROW><id>19186919</id><snippet>    return render(request, 'base.html', {'qobj': qobj, 'yes_count': qobj.answer_set.filter(value="Yes").count()})
</snippet></ROW><ROW><id>19186919</id><snippet>{{ yes_count }}
</snippet></ROW><ROW><id>19187052</id><snippet>meta Media</snippet></ROW><ROW><id>19187052</id><snippet>ModelAdmin.Media</snippet></ROW><ROW><id>19187052</id><snippet>this_field_doesn't_actually_exist = forms.CharField</snippet></ROW><ROW><id>19187052</id><snippet>ModelAdmin</snippet></ROW><ROW><id>19187052</id><snippet>readonly_fields</snippet></ROW><ROW><id>19187052</id><snippet>readonly_fields = ('foo', )
fields = ('foo',)
def foo(self, obj):
    return "Arbtrary HTML"
foo.allow_tags = True
</snippet></ROW><ROW><id>19187106</id><snippet>&gt;&gt;&gt; df = df.reset_index()
&gt;&gt;&gt; df = df.set_index(['X','Y'])
&gt;&gt;&gt; df.ix[ df[df['Stuff']&gt;10].index.unique() ]
            Date  Stuff
X  Y                   
30 4  2004-01-02   14.9
   4  2004-01-03    3.1
10 3  2004-01-01    2.3
   3  2004-01-02   10.2
</snippet></ROW><ROW><id>19187509</id><snippet>&gt;&gt;&gt; s = r'\x09'
&gt;&gt;&gt; s.decode('unicode_escape')
u'\t'
</snippet></ROW><ROW><id>19187509</id><snippet>str</snippet></ROW><ROW><id>19187509</id><snippet>bytes</snippet></ROW><ROW><id>19187509</id><snippet>decode</snippet></ROW><ROW><id>19187509</id><snippet>str</snippet></ROW><ROW><id>19187509</id><snippet>&gt;&gt;&gt; s = r'\x09'
&gt;&gt;&gt; s.encode('unicode_escape').decode('unicode_escape')
&gt;&gt;&gt; '\t'
</snippet></ROW><ROW><id>19187509</id><snippet>codecs</snippet></ROW><ROW><id>19187542</id><snippet>'gene{0}key'.format(i) = []
</snippet></ROW><ROW><id>19187542</id><snippet>gene1key</snippet></ROW><ROW><id>19187542</id><snippet>gene2key</snippet></ROW><ROW><id>19187542</id><snippet>gene3key</snippet></ROW><ROW><id>19187542</id><snippet>i</snippet></ROW><ROW><id>19187542</id><snippet>genekeys = {}
tajvalues = {}
dictionaries = {}

for i in range(10):
    filename = sample+'_rand{0}.genes.tajD'.format(i)
    genekeys[i] = []
    tajvalues[i] = []
    with open(filename, 'r') as data:
        for line in data:
            line = line.strip().split('\t')
            gene, taj = line[0], line[3]
            genekeys[i].append(gene)
            tajvalues[i].append(taj)
    dictionaries[i] = dict(itertools.izip(genekeys[i],tajvalues[i]))


with open(sample+'_rand0.genes.tajD', 'r') as genes, open(outfilename, 'w') as outfile :
    for line in genes :
        values = {}
        line = line.strip().split('\t')
        mastergene = line[0]
        for i in range(10):
            values[i] = dictionaries[i][mastergene]
        allrand = [values[0], values[1], values[2], values[3], values[4], values[5], values[6], values[7], values[8], values[9]]
        avg = numpy.mean(allrand)
        outfile.write(mastergene + '\t' + values[0] + '\t' + values[1] + '\t' + values[2] + '\t' + values[3] + '\t' + values[4] + '\t' + values[5] + '\t' + values[6] + '\t' + values[7] + '\t' + values[8] + '\t' + values[9] + '\t' + avg + '\n')
</snippet></ROW><ROW><id>19187542</id><snippet>dictionaries</snippet></ROW><ROW><id>19187542</id><snippet>values</snippet></ROW><ROW><id>19187542</id><snippet>numpy.mean</snippet></ROW><ROW><id>19187542</id><snippet>outfile.write</snippet></ROW><ROW><id>19187542</id><snippet>dictionaries = {}
for i in range(10):
    filename = sample+'_rand{0}.genes.tajD'.format(i)
    dictionaries[i] = {}
    with open(filename, 'r') as data:
        for line in data:
            line = line.strip().split('\t')
            gene, taj = line[0], line[3]
            dictionaries[i][gene] = taj

with open(sample+'_rand0.genes.tajD', 'r') as genes, open(outfilename, 'w') as outfile :
    for line in genes :
        line = line.strip().split('\t')
        mastergene = line[0]
        values = []
        for i in range(10):
            values.append(dictionaries[i][mastergene])
        #alternative to the above for loop: values = [dictionaries[i][mastergene] for i in range 10]
        avg = numpy.mean(values)
        outfile.write(mastergene + '\t' + '\t'.join(values) + '\t' + avg + '\n')
</snippet></ROW><ROW><id>19187912</id><snippet>def null(x): return x
longlist = range(100000)
shortlist = range(1)
longerlist = range(1000000)

%timeit null(shortlist)
10000000 loops, best of 3: 124 ns per loop

%timeit null(longlist)
10000000 loops, best of 3: 137 ns per loop

%timeit null(longerlist)
10000000 loops, best of 3: 125 ns per loop
</snippet></ROW><ROW><id>19188030</id><snippet>from Tkinter import *

def dummy(root):
    root.after(1000, dummy, root)
    print '',

def main():
    root = Tk()
    root.withdraw()
    dummy(root)
    mainloop()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>19188061</id><snippet>return</snippet></ROW><ROW><id>19188061</id><snippet>print</snippet></ROW><ROW><id>19188061</id><snippet>def BST_size(root):
    if root is None:
        return -1
    if root is not None:
        if root.left is not None:
            return 1 + BST_size(root.left)
        if root.right is not None:
            return 1 + BST_size(root.right)

def print_BST_size(root):
    size = BST_size(root)
    if size == -1:
        print "size -1 (Null value in root)"
    else:
        print "size", size
</snippet></ROW><ROW><id>19188061</id><snippet>    count = -1
    if root is not None:
        if root.left is not None:
            count += BST_size(root.left)
        if root.right is not None:
            count += BST_size(root.right)
    return count
</snippet></ROW><ROW><id>19188061</id><snippet>[0]</snippet></ROW><ROW><id>19188061</id><snippet>0</snippet></ROW><ROW><id>19188061</id><snippet>count[0] += 1</snippet></ROW><ROW><id>19188061</id><snippet>count += 1</snippet></ROW><ROW><id>19188061</id><snippet>count</snippet></ROW><ROW><id>19188061</id><snippet>root</snippet></ROW><ROW><id>19188061</id><snippet>None</snippet></ROW><ROW><id>19188266</id><snippet>count</snippet></ROW><ROW><id>19188266</id><snippet>qc = q.answer_set.count()
</snippet></ROW><ROW><id>19188266</id><snippet>()</snippet></ROW><ROW><id>19188266</id><snippet>count</snippet></ROW><ROW><id>19188266</id><snippet>qc</snippet></ROW><ROW><id>19188266</id><snippet>count</snippet></ROW><ROW><id>19188266</id><snippet>&gt;&gt;&gt; a = [1, 2, 3, 4]
&gt;&gt;&gt; a.clear
&lt;built-in method clear of list object at 0x02172198&gt;
&gt;&gt;&gt; a
[1, 2, 3, 4]
&gt;&gt;&gt; a.clear()
&gt;&gt;&gt; a
[]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19188266</id><snippet>clear</snippet></ROW><ROW><id>19188266</id><snippet>()</snippet></ROW><ROW><id>19188333</id><snippet>rolling_sum</snippet></ROW><ROW><id>19188333</id><snippet>In [18]: df.groupby(level='IDs').apply(lambda x: pd.rolling_sum(x,2))
Out[18]: 
                value
IDs timestamp        
0   2010-10-30    NaN
    2010-11-30      3
    2011-11-30      5
1   2000-01-01    NaN
    2007-01-01    333
    2010-01-01    433
2   2000-01-01    NaN
</snippet></ROW><ROW><id>19188510</id><snippet>r'[0-9]+(?=:)'</snippet></ROW><ROW><id>19188550</id><snippet>os.system</snippet></ROW><ROW><id>19188550</id><snippet>check_output(...)</snippet></ROW><ROW><id>19188550</id><snippet>check_output</snippet></ROW><ROW><id>19188550</id><snippet>def _run_command(self, cmd):
"""
Execute an adb command via the subprocess module. If the process exits with
a exit status of zero, the output is encapsulated into a ADBCommandResult and
returned. Otherwise, an ADBExecutionError is thrown.
"""
try:
    output = check_output(cmd, stderr=subprocess.STDOUT)
    return ADBCommandResult(0,output)
except CalledProcessError as e:
    raise ADBProcessError(e.cmd, e.returncode, e.output)
</snippet></ROW><ROW><id>19188550</id><snippet>am start -n yourpackagename/.activityname</snippet></ROW><ROW><id>19188550</id><snippet>adb shell am start -n com.android.settings/com.android.settings.Settings</snippet></ROW><ROW><id>19188550</id><snippet>time.sleep(60)</snippet></ROW><ROW><id>19188550</id><snippet>sys.boot_completed</snippet></ROW><ROW><id>19188550</id><snippet>def wait_boot_complete(self, encryption='off'):
"""
When data at rest encryption is turned on, there needs to be a waiting period 
during boot up for the user to enter the DAR password. This function will wait
till the password has been entered and the phone has finished booting up.

OR

Wait for the BOOT_COMPLETED intent to be broadcast by check the system 
property 'sys.boot_completed'. A ADBProcessError is thrown if there is an 
error communicating with the device. 

This method assumes the phone will eventually reach the boot completed state.

A check is needed to see if the output length is zero because the property
is not initialized with a 0 value. It is created once the intent is broadcast.

"""
if encryption is 'on':
  decrypted = None
  target = 'trigger_restart_framework'
  print 'waiting for framework restart'
  while decrypted is None:
    status = self.adb.adb_shell(self.serial, "getprop vold.decrypt")
    if status.output.strip() == 'trigger_restart_framework':
      decrypted = 'true'

  #Wait for boot to complete. The boot completed intent is broadcast before
  #boot is actually completed when encryption is enabled. So 'key' off the 
  #animation.
  status = self.adb.adb_shell(self.serial, "getprop init.svc.bootanim").output.strip()
  print 'wait for animation to start'
  while status == 'stopped':
    status = self.adb.adb_shell(self.serial, "getprop init.svc.bootanim").output.strip()

  status = self.adb.adb_shell(self.serial, "getprop init.svc.bootanim").output.strip()
  print 'waiting for animation to finish'
  while status == 'running':
    status = self.adb.adb_shell(self.serial, "getprop init.svc.bootanim").output.strip()        

else:
  boot = False
  while(not boot):      
    self.adb.adb_wait_for_device(self.serial)
    res = self.adb.adb_shell(self.serial, "getprop sys.boot_completed")
    if len(res.output.strip()) != 0 and int(res.output.strip()) is 1:
      boot = True
</snippet></ROW><ROW><id>19188618</id><snippet>four == four+1
</snippet></ROW><ROW><id>19188618</id><snippet>four = four+1
</snippet></ROW><ROW><id>19188618</id><snippet>if</snippet></ROW><ROW><id>19188618</id><snippet>def rollDie(number):
    counts = [0] * 6
    for i in range(number):
        roll = random.randint(1,6)
        counts[roll - 1] += 1
    return counts
</snippet></ROW><ROW><id>19188640</id><snippet>\n</snippet></ROW><ROW><id>19188640</id><snippet>print</snippet></ROW><ROW><id>19188834</id><snippet>Flask-Restful</snippet></ROW><ROW><id>19188834</id><snippet>Flask.handle_user_exception</snippet></ROW><ROW><id>19188834</id><snippet>Flask-Restful</snippet></ROW><ROW><id>19189120</id><snippet>PyObject_GetItem()</snippet></ROW><ROW><id>19189120</id><snippet>np.dtype([('field1', '&lt;f8', (1,2)), ('field2', '&lt;f8', (2,2)), ('field3', '&lt;f8', (3,1))])</snippet></ROW><ROW><id>19189120</id><snippet>x['field1'], x['field2'], x['field3']</snippet></ROW><ROW><id>19189120</id><snippet>PyObject_GetItem()</snippet></ROW><ROW><id>19189120</id><snippet>#include "Python.h"
#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION
#include "arrayobject.h"
#include &lt;cmath&gt;
#include &lt;iostream&gt;
#include &lt;iomanip&gt;
using namespace std;

static PyObject *readarray(PyObject *self, PyObject *args) {
    PyArrayObject *arr, *x2;
    PyArray_Descr *dtype;
    PyObject *names, *name, *x1 = NULL;
    Py_ssize_t N, i;
    NpyIter *iter;
    NpyIter_IterNextFunc *iternext;
    double **dataptr;
    npy_intp index;

    if (!PyArg_ParseTuple(args, "O!", &amp;PyArray_Type, &amp;arr)) {
        return NULL;
    }
    dtype = PyArray_DTYPE(arr);
    names = dtype-&gt;names;
    if (names != NULL) {
        names = PySequence_Fast(names, NULL);
        N = PySequence_Fast_GET_SIZE(names);
        for (i=0; i&lt;N; i++) {
            name = PySequence_Fast_GET_ITEM(names, i);
            cout &lt;&lt; setw(7) &lt;&lt; left &lt;&lt; PyString_AsString(name);
            x1 = PyObject_GetItem((PyObject *) arr, name);
            x2 = (PyArrayObject *) x1;
            dtype = PyArray_DTYPE(x2);
            iter = NpyIter_New(x2, NPY_ITER_READONLY, NPY_KEEPORDER, NPY_SAME_KIND_CASTING, dtype);
            if (iter == NULL) {return NULL;}
            dataptr = (double **) NpyIter_GetDataPtrArray(iter);
            iternext = NpyIter_GetIterNext(iter, NULL);
            do {
                index = NpyIter_GetIterIndex(iter);
                if (index==0) {
                    cout &lt;&lt; setw(6) &lt;&lt; right &lt;&lt; index &lt;&lt; setw(9) &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(4) &lt;&lt;**dataptr &lt;&lt; endl;
                } else {
                    cout &lt;&lt; "       " &lt;&lt; setw(6) &lt;&lt; right &lt;&lt; index &lt;&lt; setw(9) &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(4) &lt;&lt; **dataptr &lt;&lt; endl;
                }
            } while (iternext(iter));
        }
        NpyIter_Deallocate(iter);
    }
    return Py_BuildValue("i", 0);
}

static PyMethodDef pyproj4methods[] = {
    {"readarray", readarray, METH_VARARGS, "Documentation"},
    {NULL, NULL, 0, NULL}
};

PyMODINIT_FUNC initpyproj4(void) {
    Py_InitModule("pyproj4", pyproj4methods);
    import_array();
}
</snippet></ROW><ROW><id>19189120</id><snippet>import numpy as np
import pyproj4 as p4
np.random.seed(22)

## Python Implementation ##
dt = np.dtype([('field1', '&lt;f8', (1,2)), ('field2', '&lt;f8', (2,2)), ('field3', '&lt;f8', (3,1))])
x = np.zeros(2, dtype=dt)

for name in x.dtype.names:
    m,n,p = x[name].shape
    x[name] = np.random.randn(m,n,p)
    it = np.nditer(x[name], ['c_index'], ['readonly'])
    for num in it:
        if it.index==0:
            print '{0:6s} {1:6d}  {2: 2.4f}'.format(name, it.index, num.item())
        else:
            print '{0:6s} {1:6d}  {2: 2.4f}'.format(' ', it.index, num.item())
print '-----------------------'
## C-API Implementation ##
p4.readarray(x)
</snippet></ROW><ROW><id>19189120</id><snippet>field1      0  -0.0919
            1  -1.4634
            2   1.0818
            3  -0.2393
field2      0  -0.4911
            1  -1.0023
            2   0.9188
            3  -1.1036
            4   0.6265
            5  -0.5615
            6   0.0289
            7  -0.2308
field3      0   0.5878
            1   0.7523
            2  -1.0585
            3   1.0560
            4   0.7478
            5   1.0647
</snippet></ROW><ROW><id>19189230</id><snippet>import ast
data = '''{"multicast_id":6343554431392278573,"success":5,"failure":15,"canonical_ids":0,"results":[{"message_id":"0:1380910865603840%356b9054f9fd7ecd"},{"error":"NotRegistered"},{"error":"NotRegistered"},{"error":"NotRegistered"},{"error":"NotRegistered"},{"error":
"NotRegistered"},{"error":"NotRegistered"},{"error":"NotRegistered"},{"message_id":"0:1380910865592683%356b9054f9fd7ecd"},{"error":"NotRegistered"},{"error":"NotRegistered"},{"error":"NotRegistered"},{"error":"NotRegistered"},{"error":"NotRegistered"},{"error":"NotRegistered"},{"message_id":"0:1380910865600910%356b9054f9fd7ecd"},{"error":"NotRegistered"},{"message_id":"0:1380910865596592%356b9054f9fd7ecd"},{"error":"NotRegistered"},{"message_id":"0:1380910865595499%356b9054f9fd7ecd"}]}'''

&gt;&gt;&gt; pp.pprint(ast.literal_eval(data))
{   'canonical_ids': 0,
    'failure': 15,
    'multicast_id': 6343554431392278573L,
    'results': [   {   'message_id': '0:1380910865603840%356b9054f9fd7ecd'},
                   {   'error': 'NotRegistered'},
                   {   'error': 'NotRegistered'},
                   {   'error': 'NotRegistered'},
                   {   'error': 'NotRegistered'},
                   {   'error': 'NotRegistered'},
                   {   'error': 'NotRegistered'},
                   {   'error': 'NotRegistered'},
                   {   'message_id': '0:1380910865592683%356b9054f9fd7ecd'},
                   {   'error': 'NotRegistered'},
                   {   'error': 'NotRegistered'},
                   {   'error': 'NotRegistered'},
                   {   'error': 'NotRegistered'},
                   {   'error': 'NotRegistered'},
                   {   'error': 'NotRegistered'},
                   {   'message_id': '0:1380910865600910%356b9054f9fd7ecd'},
                   {   'error': 'NotRegistered'},
                   {   'message_id': '0:1380910865596592%356b9054f9fd7ecd'},
                   {   'error': 'NotRegistered'},
                   {   'message_id': '0:1380910865595499%356b9054f9fd7ecd'}],
    'success': 5}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19189230</id><snippet>&gt;&gt;&gt; pp.pprint([elem['error'] for elem in ast.literal_eval(data)['results'] if 'error' in elem])
[   'NotRegistered',
    'NotRegistered',
    'NotRegistered',
    'NotRegistered',
    'NotRegistered',
    'NotRegistered',
    'NotRegistered',
    'NotRegistered',
    'NotRegistered',
    'NotRegistered',
    'NotRegistered',
    'NotRegistered',
    'NotRegistered',
    'NotRegistered',
    'NotRegistered']
</snippet></ROW><ROW><id>19189356</id><snippet>def rec_dd():
    return defaultdict(rec_dd)

&gt;&gt;&gt; x = rec_dd()
&gt;&gt;&gt; x['a']['b']['c']['d']
defaultdict(&lt;function rec_dd at 0x7f0dcef81500&gt;, {})
&gt;&gt;&gt; print json.dumps(x)
{"a": {"b": {"c": {"d": {}}}}}
</snippet></ROW><ROW><id>19189356</id><snippet>rec_dd = lambda: defaultdict(rec_dd)
</snippet></ROW><ROW><id>19189395</id><snippet>a = 2*pi/(N-1)

for k in xrange(N):
    z = a * k
    res[k] *= 0.42659 - 0.49656*cos(z) + 0.076849*cos(2*z) # Blackman
</snippet></ROW><ROW><id>19189395</id><snippet>-63.8888312044
-62.1859660802
-59.4560808775
-57.5235455007
-57.0010514385
-59.4284419437
-66.6535724743
-46.1441434426
-2.31562840406
16.0873761957
22.4136439765 &lt;-- PEAK
19.5784749467
6.43274013629
-28.3842042716
-55.5273291654
-68.8982705127
-53.3843989911
-49.731974213
-48.3131204305
-47.6953570892
-47.4386151256
-47.361972079
-47.3787962267
-47.4434419084
-47.530228024
-47.6240076874
-47.7155325706
-47.799012933
-47.870764286
-47.9284264139
-47.9705003855
-47.9960714351
</snippet></ROW><ROW><id>19189395</id><snippet>res[k] *= 0.355768 - 0.487396*cos(z) + 0.144232*cos(2*z) - 0.012604*cos(3*z)
res[k] *= 1 - 1.93*cos(z) + 1.29*cos(2*z) - 0.388*cos(3*z) + 0.028*cos(4*z)
res[k] *= 1 - 1.985844164102*cos(z) + 1.791176438506*cos(2*z) - 1.282075284005*cos(3*z) + 0.667777530266*cos(4*z) - 0.240160796576*cos(5*z) + 0.056656381764*cos(6*z) - 0.008134974479*cos(7*z) + 0.000624544650*cos(8*z) - 0.000019808998*cos(9*z) + 0.000000132974*cos(10*z)
</snippet></ROW><ROW><id>19189650</id><snippet>data = zip(*data)
data = [x for x in data if any(x)]
data = zip(*data)
</snippet></ROW><ROW><id>19189650</id><snippet>data = [list(row) for row in zip(*data)]
</snippet></ROW><ROW><id>19189650</id><snippet>data = [x for x in data if any(x)]
</snippet></ROW><ROW><id>19189803</id><snippet>import usb.backend.libusb1 as libusb1
import usb.backend.libusb0 as libusb0
import usb.backend.openusb as openusb
</snippet></ROW><ROW><id>19189803</id><snippet>devices = usb.core.find(find_all=1, backend=libusb1.get_backend() )    
devices = usb.core.find(find_all=1, backend=libusb0.get_backend() )    
devices = usb.core.find(find_all=1, backend=openusb.get_backend() )
</snippet></ROW><ROW><id>19189910</id><snippet>list1 = list2 = [123] * 3
list1.append(456)

print list1 =&gt;  # prints [123, 123, 123, 456]
print list2 =&gt;  # prints [123, 123, 123, 456]
print list1 is list2   # prints True
</snippet></ROW><ROW><id>19189910</id><snippet>list1</snippet></ROW><ROW><id>19189910</id><snippet>list2</snippet></ROW><ROW><id>19189910</id><snippet>list1 = [123] * 3
list2 = [123] * 3
# or  list1, list2 = [123] * 3, [123] * 3

list1.append(456)

print list1  # prints [123, 123, 123, 456]
print list2  # prints [123, 123, 123]
print list1 is list 2  # prints False
</snippet></ROW><ROW><id>19189910</id><snippet># a and b contain the same int object
# but it's OK because int's are immutable
a = b = 1
a += 2  # creates a new int from 1+2 and assigns it to `a`
print b  # =&gt; 1  ... b is unchanged
print a  # =&gt; 3
</snippet></ROW><ROW><id>19189910</id><snippet>int</snippet></ROW><ROW><id>19189910</id><snippet>float</snippet></ROW><ROW><id>19189910</id><snippet>str</snippet></ROW><ROW><id>19189910</id><snippet>-5</snippet></ROW><ROW><id>19189910</id><snippet>-5</snippet></ROW><ROW><id>19189910</id><snippet>5</snippet></ROW><ROW><id>19189910</id><snippet>a += 2</snippet></ROW><ROW><id>19189910</id><snippet>a = a + 2</snippet></ROW><ROW><id>19189910</id><snippet>a + 2</snippet></ROW><ROW><id>19189910</id><snippet>__add__</snippet></ROW><ROW><id>19189910</id><snippet>a + 2</snippet></ROW><ROW><id>19189910</id><snippet>a</snippet></ROW><ROW><id>19189930</id><snippet>DATABASES</snippet></ROW><ROW><id>19189930</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', 
        'NAME': 'DB_NAME',
        'USER': 'DB_USER',
        'PASSWORD': 'DB_PASSWORD',
        'HOST': 'localhost',   # Or an IP Address that your DB is hosted on
        'PORT': '3306',
    }
}
</snippet></ROW><ROW><id>19189930</id><snippet>python manage.py runserver
</snippet></ROW><ROW><id>19189930</id><snippet>ip:port</snippet></ROW><ROW><id>19190196</id><snippet>itertools.islice</snippet></ROW><ROW><id>19190196</id><snippet>with</snippet></ROW><ROW><id>19190196</id><snippet>from itertools import islice
with open('afile') as f:
    lines = list(islice(f, 4003, 4005))
do_something_with(lines)
</snippet></ROW><ROW><id>19190196</id><snippet>&gt;&gt;&gt; timeit("x=islice(open('afile'), 4003, 4005); print next(x) + next(x)", 'from itertools import islice', number=1)
4003
4004

0.00028586387634277344
&gt;&gt;&gt; timeit("print getline('afile', 4003) + getline('afile', 4004)", 'from linecache import getline', number=1)
4002
4003

2.193450927734375e-05

&gt;&gt;&gt; timeit("getline('afile', 4003) + getline('afile', 4004)", 'from linecache import getline', number=10**5)
0.14125394821166992
&gt;&gt;&gt; timeit("''.join(islice(open('afile'), 4003, 4005))", 'from itertools import islice', number=10**5)
14.732316970825195
</snippet></ROW><ROW><id>19190196</id><snippet>&gt;&gt;&gt; timeit("from linecache import getline; getline('afile', 4003) + getline('afile', 4004)", number=10**5)
15.613967180252075
</snippet></ROW><ROW><id>19190196</id><snippet>islice</snippet></ROW><ROW><id>19190196</id><snippet>islice</snippet></ROW><ROW><id>19190330</id><snippet>save</snippet></ROW><ROW><id>19190330</id><snippet>class Form1(...):
   def save(self, thing):
      for field, value in self.cleaned_data.items():
          setattr(thing, field, value)

class Form2(...):
   def save(self, thing):
      thing.point = Point.objects.get_or_create(lat=self.cleaned_data.get('lat'), long=...)
      # note, you may not want get_or_create if you don't want to share points.
</snippet></ROW><ROW><id>19190330</id><snippet>for form in form_list:
    form.save(instance)
</snippet></ROW><ROW><id>19190330</id><snippet>class BaseSaveBehaviorForm(forms.Form):
     def save(self, thing):
         for field, value in self.cleaned_data.items():
             setattr(thing, field, value)

class NormalBehaviorForm(BaseSaveBehaviorForm):
     # your forms as usual


class SpecialSaveBehaviorForm(forms.Form):
     def save(self, instance):
         # do something unusual
</snippet></ROW><ROW><id>19190454</id><snippet>name</snippet></ROW><ROW><id>19190454</id><snippet>url(r'browse/state/(?P&lt;state&gt;\d+)$', browse_state_sites, name='state-detail')
</snippet></ROW><ROW><id>19190454</id><snippet>django.core.urlresolvers.reverse</snippet></ROW><ROW><id>19190454</id><snippet>resp = self.client.get(reverse('state-detail', kwargs={
  'state': 12345,
}))
</snippet></ROW><ROW><id>19190454</id><snippet>GET</snippet></ROW><ROW><id>19190454</id><snippet>/browse/state/1/county/1</snippet></ROW><ROW><id>19190454</id><snippet>browse/state/(?P&lt;state&gt;\d+)$</snippet></ROW><ROW><id>19190454</id><snippet>browse/state/&lt;number&gt;</snippet></ROW><ROW><id>19190454</id><snippet>/county/1</snippet></ROW><ROW><id>19190578</id><snippet>collections.Counter()</snippet></ROW><ROW><id>19190578</id><snippet>from collections import Counter

def freq_attack(ciphertext):
    counts = Counter(ch for ch in ciphertext if ch.isalpha())
    total = sum(counts.itervalues())

    for char, count in counts.most_common():
        print char, count * 100.0 / total
</snippet></ROW><ROW><id>19190578</id><snippet>&gt;&gt;&gt; freq_attack('hello world')
l 30.0
o 20.0
e 10.0
d 10.0
h 10.0
r 10.0
w 10.0
</snippet></ROW><ROW><id>19190578</id><snippet>for</snippet></ROW><ROW><id>19190578</id><snippet>ciphertext</snippet></ROW><ROW><id>19190578</id><snippet>hello world</snippet></ROW><ROW><id>19190578</id><snippet>l</snippet></ROW><ROW><id>19190578</id><snippet>Counter()</snippet></ROW><ROW><id>19190836</id><snippet>dictionary_list</snippet></ROW><ROW><id>19190836</id><snippet>list</snippet></ROW><ROW><id>19190836</id><snippet>print dictionary_list[1]['_chk2m']
</snippet></ROW><ROW><id>19190997</id><snippet>zoom</snippet></ROW><ROW><id>19190997</id><snippet>self.ToggleTool(self.wx_ids['Pan'], False)
</snippet></ROW><ROW><id>19190997</id><snippet>def DeactivateAll(self):
    if self._active == 'PAN':
        self.pan('off')
        self.ToggleTool(self.wx_ids['Pan'], False)
    elif self._active == 'ZOOM':
        self.ToggleTool(self.wx_ids['Zoom'], False)
        self.zoom()
</snippet></ROW><ROW><id>19190997</id><snippet> def DeactivateAll(self):
    self.ToggleTool(self.wx_ids['Pan'], False)
    self.ToggleTool(self.wx_ids['Zoom'], False)
</snippet></ROW><ROW><id>19191048</id><snippet>sys.modules</snippet></ROW><ROW><id>19191048</id><snippet>sys.modules</snippet></ROW><ROW><id>19191048</id><snippet>sys.modules</snippet></ROW><ROW><id>19191048</id><snippet>sys.modules</snippet></ROW><ROW><id>19191048</id><snippet>cf</snippet></ROW><ROW><id>19191048</id><snippet>cf</snippet></ROW><ROW><id>19191048</id><snippet>cf.py</snippet></ROW><ROW><id>19191048</id><snippet>cf</snippet></ROW><ROW><id>19191048</id><snippet>cf</snippet></ROW><ROW><id>19191048</id><snippet>cf</snippet></ROW><ROW><id>19191048</id><snippet>cf.a</snippet></ROW><ROW><id>19191048</id><snippet>cf.a</snippet></ROW><ROW><id>19191048</id><snippet>cf.py</snippet></ROW><ROW><id>19191048</id><snippet>1</snippet></ROW><ROW><id>19191048</id><snippet>$ python cf.py
1
1
</snippet></ROW><ROW><id>19191319</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.search(r'[^f]', 'ffffooooooooo').start()
4
</snippet></ROW><ROW><id>19191319</id><snippet>[^f]</snippet></ROW><ROW><id>19191319</id><snippet>f</snippet></ROW><ROW><id>19191319</id><snippet>start()</snippet></ROW><ROW><id>19191319</id><snippet>re.search()</snippet></ROW><ROW><id>19191319</id><snippet>f</snippet></ROW><ROW><id>19191319</id><snippet>re.search()</snippet></ROW><ROW><id>19191319</id><snippet>None</snippet></ROW><ROW><id>19191319</id><snippet>first_index = -1
match = re.search(r'[^f]', line)
if match:
    first_index = match.start()
</snippet></ROW><ROW><id>19191319</id><snippet>next(i for i, c in enumerate(line) if c != mark)</snippet></ROW><ROW><id>19191319</id><snippet>try</snippet></ROW><ROW><id>19191319</id><snippet>except StopIteration</snippet></ROW><ROW><id>19191319</id><snippet>mark</snippet></ROW><ROW><id>19191494</id><snippet>&gt;&gt;&gt; x = [
['2007-12-18'], ['AAAA'],
['abc', 'def', 'ghi', 'jkl'], 
['Objetos de Aprendizagem', u'Personaliza\\xe7\\xe3o', u'Perfil do Usu\\xe1rio',
u'Padr\\xf5es de Metadados', u'Vers\\xf5es de Objetos de Aprendizagem', 'Agrupamento de Objetos Similares'], 
['2007-12-18'],
[u'LOCPN: CADEIA DE PRODU\\xc7\\xc3O'],
[u'Maria de F\\xe1tima', 'ZZZ', 'Albert Einstein', 'James Clerk Maxwell',
u'Jos\\xe9 da Silva', 'DDD', 'R M. C. A'],
['Objetos de Aprendizagem', 'Modelo de Processo', 'Redes de Petri Colorida', 
u'Especifica\\xe7\\xe3o formal'], 
['2007-12-18'], 
[u'COMPUTA\\xc7\\xc3O M\\xd3VEL E UB\\xcdQUA  GRADUA\\xc7\\xc3O DE REFER\\xcaNCIA'],
['JB Cardoso', 'Franz Ferdinand', 'Nick Nolte', u'S\\xe9rgio Madruga', u'D\\xe9bora    JKLJ'],
[u'Computa\\xe7\\xe3o M\\xf3vel e Ub\\xedqua', u'Gradua\\xe7\\xe3o de Refer\\xeancia', u' Educa\\xe7\\xe3o Ub\\xedqua']
]
</snippet></ROW><ROW><id>19191494</id><snippet>&gt;&gt;&gt; [x[j:j+4] for j in range(0,len(x),4)]
</snippet></ROW><ROW><id>19191494</id><snippet>range()</snippet></ROW><ROW><id>19191494</id><snippet>[
[['2007-12-18'], ['AAAA'], ['abc', 'def', 'ghi', 'jkl'], 
['Objetos de Aprendizagem', 'Personaliza\\xe7\\xe3o', 'Perfil do Usu\\xe1rio',
'Padr\\xf5es de Metadados', 'Vers\\xf5es de Objetos de Aprendizagem', 
'Agrupamento de Objetos Similares']], 
[['2007-12-18'], ['LOCPN: CADEIA DE PRODU\\xc7\\xc3O'], ['Maria de F\\xe1tima', 
'ZZZ','Albert Einstein', 'James Clerk Maxwell', 'Jos\\xe9 da Silva', 'DDD', 
'R M. C. A'],
['Objetos de Aprendizagem', 'Modelo de Processo', 'Redes de Petri Colorida',
'Especifica\\xe7\\xe3o formal']], 
[['2007-12-18'], ['COMPUTA\\xc7\\xc3O M\\xd3VEL E UB\\xcdQUA  GRADUA\\xc7\\xc3O DE REFER\\xcaNCIA'], 
['JB Cardoso', 'Franz Ferdinand', 'Nick Nolte', 'S\\xe9rgio Madruga', 
'D\\xe9bora JKLJ'],
['Computa\\xe7\\xe3o M\\xf3vel e Ub\\xedqua', 
'Gradua\\xe7\\xe3o de Refer\\xeancia', ' Educa\\xe7\\xe3o Ub\\xedqua']]
]
</snippet></ROW><ROW><id>19191523</id><snippet>block</snippet></ROW><ROW><id>19191523</id><snippet>0 1 2
3 4 5
6 7 8
</snippet></ROW><ROW><id>19191523</id><snippet>for</snippet></ROW><ROW><id>19191523</id><snippet>for t in range(0,9,3):
    for y in range(1, 9, 3):
</snippet></ROW><ROW><id>19191523</id><snippet>t, y</snippet></ROW><ROW><id>19191523</id><snippet>for</snippet></ROW><ROW><id>19191523</id><snippet>t</snippet></ROW><ROW><id>19191523</id><snippet>t+1</snippet></ROW><ROW><id>19191523</id><snippet>t+2</snippet></ROW><ROW><id>19191523</id><snippet>0 1 2
</snippet></ROW><ROW><id>19191523</id><snippet>if</snippet></ROW><ROW><id>19191523</id><snippet>if ... and slot[y+1] != user_team and computer_team:
</snippet></ROW><ROW><id>19191523</id><snippet>if ... and (slot[y+1] != user_team) and computer_team:
</snippet></ROW><ROW><id>19191523</id><snippet>computer_team</snippet></ROW><ROW><id>19191523</id><snippet>'x'</snippet></ROW><ROW><id>19191523</id><snippet>'o'</snippet></ROW><ROW><id>19191523</id><snippet>True</snippet></ROW><ROW><id>19191523</id><snippet>if</snippet></ROW><ROW><id>19191523</id><snippet>if ... and (slot[y+1] != user_team) and (slot[y+1] != computer_team):
</snippet></ROW><ROW><id>19191523</id><snippet>if</snippet></ROW><ROW><id>19191523</id><snippet>True</snippet></ROW><ROW><id>19191576</id><snippet>None</snippet></ROW><ROW><id>19191576</id><snippet>addNode</snippet></ROW><ROW><id>19191576</id><snippet>a[addNode(a[x],k,newNode)]</snippet></ROW><ROW><id>19191576</id><snippet>addNode(a[x],k,newNode); a[None]</snippet></ROW><ROW><id>19191576</id><snippet>def addNode(a,k,newNode):
    if k in a:
        a[k][newNode]
    else:
        for x in a:
            addNode(a[x],k,newNode)
</snippet></ROW><ROW><id>19191576</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; a = tree()
&gt;&gt;&gt; a['1']
defaultdict(&lt;function &lt;lambda&gt; at 0x7fee0285f848&gt;, {})
&gt;&gt;&gt; addNode(a, '1', 'new')
&gt;&gt;&gt; print json.dumps(a)
{"1": {"new": {}}}
&gt;&gt;&gt; a['1']['2']['3']
defaultdict(&lt;function &lt;lambda&gt; at 0x7fee0285f848&gt;, {})
&gt;&gt;&gt; addNode(a, '3', 'new2')
&gt;&gt;&gt; print json.dumps(a)
{"1": {"new": {}, "2": {"3": {"new2": {}}}}}
</snippet></ROW><ROW><id>19191611</id><snippet>def convert_name( name ):
</snippet></ROW><ROW><id>19191611</id><snippet>subnames = name.split() # split the name on whitespace
</snippet></ROW><ROW><id>19191611</id><snippet>if (len(subnames) == 1): return subnames[0]
</snippet></ROW><ROW><id>19191660</id><snippet>self._lowest</snippet></ROW><ROW><id>19191660</id><snippet>0</snippet></ROW><ROW><id>19191660</id><snippet>self._lowest = None</snippet></ROW><ROW><id>19191660</id><snippet>add</snippet></ROW><ROW><id>19191660</id><snippet>self._lowest</snippet></ROW><ROW><id>19191660</id><snippet>score</snippet></ROW><ROW><id>19191660</id><snippet>if self._lowest is None or score &lt; self._lowest:
  self._lowest = score
</snippet></ROW><ROW><id>19191660</id><snippet>None</snippet></ROW><ROW><id>19191660</id><snippet>score</snippet></ROW><ROW><id>19191660</id><snippet>self._highest</snippet></ROW><ROW><id>19191660</id><snippet>0</snippet></ROW><ROW><id>19191660</id><snippet>-9 -1 -5 -3</snippet></ROW><ROW><id>19191660</id><snippet>self._lowest</snippet></ROW><ROW><id>19191660</id><snippet>self._highest</snippet></ROW><ROW><id>19191660</id><snippet>float('inf')</snippet></ROW><ROW><id>19191660</id><snippet>float('-inf')</snippet></ROW><ROW><id>19191660</id><snippet>self._lowest = min(self._lowest, score)
self._highest = max(self._highest, score)
</snippet></ROW><ROW><id>19191754</id><snippet>UPDATE</snippet></ROW><ROW><id>19191754</id><snippet>c.execute(
    "UPDATE database SET columnA=?, columnB=?, columnC=?, columnD=?, columnE=? "
    "WHERE id = (SELECT MAX(id) from database))", 
    data)
</snippet></ROW><ROW><id>19191754</id><snippet>.execute()</snippet></ROW><ROW><id>19191754</id><snippet>data</snippet></ROW><ROW><id>19191754</id><snippet>UPDATE</snippet></ROW><ROW><id>19191771</id><snippet>class MyRegistrationView(RegistrationView):
    def __init__(self, *args, **kwargs):
        k = 1 + 1
        super(MyRegistrationView, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>19191771</id><snippet>url(r'^registration/register/$', MyRegistrationView.as_view(),
    name='registration_register'),
url('^registration/', include('registration.urls')),
</snippet></ROW><ROW><id>19191796</id><snippet>for row in ws.iter_rows():
    # row is now a tuple
    first_value = row[0]
</snippet></ROW><ROW><id>19191812</id><snippet>results</snippet></ROW><ROW><id>19191812</id><snippet>print</snippet></ROW><ROW><id>19191812</id><snippet>count</snippet></ROW><ROW><id>19191812</id><snippet>result = cur.fetchone()
print result['count']
</snippet></ROW><ROW><id>19191812</id><snippet>.fetchone()</snippet></ROW><ROW><id>19191812</id><snippet>result = cur.fetchone()
print result[0]
</snippet></ROW><ROW><id>19191821</id><snippet>def BST_maxdepth(root, depth=0):
    if root is None:
        return depth
    return max(BST_maxdepth(root.left, depth+1),
               BST_maxdepth(root.right, depth+1))
</snippet></ROW><ROW><id>19191871</id><snippet>std</snippet></ROW><ROW><id>19191871</id><snippet>numpy</snippet></ROW><ROW><id>19191871</id><snippet>std</snippet></ROW><ROW><id>19191871</id><snippet>sqrt(sum((x-x.mean())**2)) / (n-ddof)</snippet></ROW><ROW><id>19191871</id><snippet>ddof=0</snippet></ROW><ROW><id>19191871</id><snippet>R</snippet></ROW><ROW><id>19191871</id><snippet>ddof=1</snippet></ROW><ROW><id>19191871</id><snippet>In [7]: s.std()
Out[7]: 12.137473069268983

In [8]: s.std(ddof=1)
Out[8]: 12.255890244843339
</snippet></ROW><ROW><id>19191871</id><snippet>&gt; sd(s)
[1] 12.25589
</snippet></ROW><ROW><id>19191871</id><snippet>mean</snippet></ROW><ROW><id>19191871</id><snippet>numpy</snippet></ROW><ROW><id>19191871</id><snippet>In [5]: np.isclose(s.mean(), 1.24345e-14)
Out[5]: True
</snippet></ROW><ROW><id>19191885</id><snippet>pickle</snippet></ROW><ROW><id>19191885</id><snippet>_pickle</snippet></ROW><ROW><id>19191885</id><snippet>pickle</snippet></ROW><ROW><id>19191885</id><snippet>pickle.py</snippet></ROW><ROW><id>19191885</id><snippet># Use the faster _pickle if possible
try:
    from _pickle import *
except ImportError:
    Pickler, Unpickler = _Pickler, _Unpickler
</snippet></ROW><ROW><id>19191885</id><snippet>pickle</snippet></ROW><ROW><id>19191885</id><snippet>pickle</snippet></ROW><ROW><id>19191885</id><snippet>_pickle</snippet></ROW><ROW><id>19191885</id><snippet>_pickle</snippet></ROW><ROW><id>19191885</id><snippet>cPickle</snippet></ROW><ROW><id>19191961</id><snippet>In [11]: df.convert_objects(convert_numeric=True)
Out[11]: 
   fol  T_opp  T_Dir  T_Enh Activity
0    1      0      0    NaN       hf
1    2    NaN      0      0       hx
2    2      0      0      0       fe
3    3      0    NaN      0       rn
</snippet></ROW><ROW><id>19191961</id><snippet>In [12]: df.convert_objects(convert_numeric=True).fillna(1)
Out[12]: 
   fol  T_opp  T_Dir  T_Enh Activity
0    1      0      0      1       hf
1    2      1      0      0       hx
2    2      0      0      0       fe
3    3      0      1      0       rn
</snippet></ROW><ROW><id>19192050</id><snippet>foopackage</snippet></ROW><ROW><id>19192050</id><snippet>__init__.py</snippet></ROW><ROW><id>19192050</id><snippet>from .foo1 import foo1
from .foo2 import foo2
</snippet></ROW><ROW><id>19192050</id><snippet>.</snippet></ROW><ROW><id>19192050</id><snippet>foo1</snippet></ROW><ROW><id>19192050</id><snippet>foo2</snippet></ROW><ROW><id>19192050</id><snippet>from foopackage.foo1 import foo1
from foopackage.foo2 import foo2
</snippet></ROW><ROW><id>19192175</id><snippet>ranges = (
    (8700, 12600),
    (15700, 17600),
    (18750, 22350),
    (23700, 27250),
    (106950, 115300),
)

newSndIdx = 0

for start, end in ranges:
    for i in range(start, end + 1):
        sampleValue = getSampleValueAt(sound, i)
        setSampleValueAt(newSnd, newSndIdx, sampleValue)
        newSndIdx += 1
    newSndIdx += 500
</snippet></ROW><ROW><id>19192228</id><snippet>import datetime

datetime.datetime.utcnow()
</snippet></ROW><ROW><id>19192228</id><snippet>from datetime import datetime

datetime.utcnow()
</snippet></ROW><ROW><id>19192228</id><snippet>datetime</snippet></ROW><ROW><id>19192228</id><snippet>datetime</snippet></ROW><ROW><id>19192228</id><snippet>from datetime import date, datetime, timedelta
</snippet></ROW><ROW><id>19192228</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime
&lt;module 'datetime' from '/Users/mj/Development/venvs/stackoverflow-2.7/lib/python2.7/lib-dynload/datetime.so'&gt;
&gt;&gt;&gt; datetime.datetime
&lt;type 'datetime.datetime'&gt;
&gt;&gt;&gt; datetime.datetime.utcnow()
datetime.datetime(2013, 10, 4, 23, 27, 14, 678151)
</snippet></ROW><ROW><id>19192282</id><snippet>return ("a Parallelogram with side lengths {} and {}, and interior "
        "angle {}".format(self.base, self.side, self.theta))
</snippet></ROW><ROW><id>19192282</id><snippet>\</snippet></ROW><ROW><id>19192282</id><snippet>return "a Parallelogram with side lengths {} and {}, and interior " \
       "angle {}".format(self.base, self.side, self.theta)
</snippet></ROW><ROW><id>19192282</id><snippet>+</snippet></ROW><ROW><id>19192282</id><snippet>&gt;&gt;&gt; "one string " "and another"
'one string and another'
</snippet></ROW><ROW><id>19192282</id><snippet>str()</snippet></ROW><ROW><id>19192282</id><snippet>.format()</snippet></ROW><ROW><id>19192326</id><snippet>new_list = [ListBnum0, ListBnum1, ListBnum2, ListBnum3, ListBnum4]
</snippet></ROW><ROW><id>19192326</id><snippet>ListB = list[ListBnum0,ListBnum1,ListBnum2,ListBnum3,ListBnum4]
</snippet></ROW><ROW><id>19192326</id><snippet>list</snippet></ROW><ROW><id>19192326</id><snippet>ListB = list([ListBnum0,ListBnum1,ListBnum2,ListBnum3,ListBnum4])
</snippet></ROW><ROW><id>19192326</id><snippet>list</snippet></ROW><ROW><id>19192326</id><snippet>[ListBnum0, …]</snippet></ROW><ROW><id>19192326</id><snippet>ListA = [5,1,3,8,4]
List0 = [int(i) for i in ListA]
def avg(x):
    return sum(x) / len(x)
ListB = [avg(List0[max(i-1, 0):i+2]) for i in range(len(List0))]
ListFinal = [str(i) for i in ListB]
</snippet></ROW><ROW><id>19192431</id><snippet>append</snippet></ROW><ROW><id>19192431</id><snippet>None</snippet></ROW><ROW><id>19192431</id><snippet>append</snippet></ROW><ROW><id>19192431</id><snippet>trck.append(tracks)</snippet></ROW><ROW><id>19192431</id><snippet>trck = trck.append(tracks)</snippet></ROW><ROW><id>19192431</id><snippet>None</snippet></ROW><ROW><id>19192507</id><snippet>SIGKILL</snippet></ROW><ROW><id>19192507</id><snippet>killed</snippet></ROW><ROW><id>19192507</id><snippet>finished counting</snippet></ROW><ROW><id>19192507</id><snippet>counter.items()</snippet></ROW><ROW><id>19192507</id><snippet>counter.iteritems()</snippet></ROW><ROW><id>19192507</id><snippet>for key, value in counter.iteritems():
    writer.writerow([key, value])
</snippet></ROW><ROW><id>19192507</id><snippet>items</snippet></ROW><ROW><id>19192507</id><snippet>iteritems</snippet></ROW><ROW><id>19192610</id><snippet>for element in inDir:
    if os.path.join(path, file) == os.path.join(path, element):
        fullPath = os.path.join(fullPath, file)
        print(fullPath)
        return fullPath
    elif os.path.isdir(os.path.join(path, element)):
        return search(os.path.join(path, element), file)
</snippet></ROW><ROW><id>19192610</id><snippet>None</snippet></ROW><ROW><id>19192610</id><snippet>root/
    sub1/
        sub1a/
            notthefile
    sub2/
        thefile
</snippet></ROW><ROW><id>19192610</id><snippet>root</snippet></ROW><ROW><id>19192610</id><snippet>sub1</snippet></ROW><ROW><id>19192610</id><snippet>sub1</snippet></ROW><ROW><id>19192610</id><snippet>sub1a</snippet></ROW><ROW><id>19192610</id><snippet>sub1a</snippet></ROW><ROW><id>19192610</id><snippet>sub1a</snippet></ROW><ROW><id>19192610</id><snippet>None</snippet></ROW><ROW><id>19192610</id><snippet>elif os.path.isdir(os.path.join(path, element)):
    fullpath = search(os.path.join(path, element), file)
    if fullpath is not None:
        return fullpath
</snippet></ROW><ROW><id>19192610</id><snippet>fullPath</snippet></ROW><ROW><id>19192610</id><snippet>None</snippet></ROW><ROW><id>19192610</id><snippet>os.path.join(fullPath, file)</snippet></ROW><ROW><id>19192610</id><snippet>path</snippet></ROW><ROW><id>19192610</id><snippet>fullPath</snippet></ROW><ROW><id>19192728</id><snippet>add_produto = """INSERT INTO produto(nome,
                 data_lcm, preco)
                 VALUES (%s, %s, %s)"""% (va, 'input_date', 'vc')

cursor.execute(add_produto)
</snippet></ROW><ROW><id>19192728</id><snippet>add_produto = """INSERT INTO produto(nome,
                 data_lcm, preco)
                 VALUES (%s, %s, %s)"""

cursor.execute(add_produto, va, input_date, vc)
</snippet></ROW><ROW><id>19192728</id><snippet>add_produto</snippet></ROW><ROW><id>19192728</id><snippet>*add_produto</snippet></ROW><ROW><id>19192728</id><snippet>add_produto</snippet></ROW><ROW><id>19192728</id><snippet>'vc'</snippet></ROW><ROW><id>19192728</id><snippet>vc</snippet></ROW><ROW><id>19192728</id><snippet>'vc'</snippet></ROW><ROW><id>19192768</id><snippet>A, B = [matrix(zeros(shape=(3,3), dtype=complex)) for _ in range(2)]
</snippet></ROW><ROW><id>19192768</id><snippet>(matrix(zeros(shape =(3,3), dtype=complex)),)</snippet></ROW><ROW><id>19192768</id><snippet>5</snippet></ROW><ROW><id>19192768</id><snippet>5</snippet></ROW><ROW><id>19192768</id><snippet>_</snippet></ROW><ROW><id>19192866</id><snippet>.split()</snippet></ROW><ROW><id>19192866</id><snippet>len()</snippet></ROW><ROW><id>19192866</id><snippet>&gt;&gt;&gt; s = 'one two three'
&gt;&gt;&gt; s.split()
['one', 'two', 'three']
&gt;&gt;&gt; lst = s.split()
&gt;&gt;&gt; len(lst)
3
</snippet></ROW><ROW><id>19192988</id><snippet>ConnectionError</snippet></ROW><ROW><id>19192988</id><snippet>BrokenPipeError</snippet></ROW><ROW><id>19192988</id><snippet>ConnectionAbortedError</snippet></ROW><ROW><id>19192988</id><snippet>ConnectionRefusedError</snippet></ROW><ROW><id>19192988</id><snippet>ConnectionResetError</snippet></ROW><ROW><id>19192988</id><snippet>except ConnectionError:
</snippet></ROW><ROW><id>19192988</id><snippet>ConnectionError</snippet></ROW><ROW><id>19192988</id><snippet>OSError</snippet></ROW><ROW><id>19192988</id><snippet>IOError</snippet></ROW><ROW><id>19192988</id><snippet>ConnectionError</snippet></ROW><ROW><id>19192988</id><snippet>OSError</snippet></ROW><ROW><id>19192988</id><snippet>errno</snippet></ROW><ROW><id>19192988</id><snippet>except OSError as e:
    if e.errno not in (EPIPE, ESHUTDOWN, ECONNABORTED, ECONNREFUSED, ECONNRESET):
        raise
    # whatever you wanted to do for ConnectionError.
</snippet></ROW><ROW><id>19192988</id><snippet>try:
    code_that_raises()
except Exception as e:
    print(type(e), type(e).__qualname__, whatever_else_looks_useful(e))
</snippet></ROW><ROW><id>19192995</id><snippet>(\w+),(?:(\S*?),)?([\w ]+){(.+)}
</snippet></ROW><ROW><id>19193099</id><snippet>j</snippet></ROW><ROW><id>19193099</id><snippet>results = []
with open('C:\\Python33\\PIXB.DAT', 'r') as file:
    for line in file:
        values = line.split() # splits on any whitespace
        if len(values) &gt; 1 # not the j line
            results.extend(values[:3]) # add three values to the results list
        else:
            results.append(values[0]) # add the "j" to the list
</snippet></ROW><ROW><id>19193099</id><snippet>results</snippet></ROW><ROW><id>19193099</id><snippet>extend</snippet></ROW><ROW><id>19193099</id><snippet>results.extend(int(x) for x in values[:3])
</snippet></ROW><ROW><id>19193099</id><snippet>extend</snippet></ROW><ROW><id>19193099</id><snippet>append</snippet></ROW><ROW><id>19193099</id><snippet>tuple(...)</snippet></ROW><ROW><id>19193099</id><snippet>[...]</snippet></ROW><ROW><id>19193099</id><snippet>int</snippet></ROW><ROW><id>19193112</id><snippet>g.truthify_coordinate(row, col)
</snippet></ROW><ROW><id>19193112</id><snippet>g[row][col] = True   # or g[row, col] = True
</snippet></ROW><ROW><id>19193169</id><snippet>profile</snippet></ROW><ROW><id>19193169</id><snippet>timeit</snippet></ROW><ROW><id>19193169</id><snippet>profile</snippet></ROW><ROW><id>19193169</id><snippet>profile</snippet></ROW><ROW><id>19193169</id><snippet>timeit</snippet></ROW><ROW><id>19193169</id><snippet>for impl in 'mycode', 'googlecode', 'thriftcode':
    t = timeit.timeit('serialize(data)', 
                      setup='''from {} import serialize; 
                               with open('data.txt') as f: data=f.read()
                            '''.format(impl),
                      number=10000)
    print('{}: {}'.format(impl, t)
</snippet></ROW><ROW><id>19193169</id><snippet>serialize</snippet></ROW><ROW><id>19193548</id><snippet>noc = int(input('Enter number of courses: '))
for i in range(1, noc+1):
    grade = input('Enter grade for course no. {}: '.format(i))
    weight = input('Enter weight for course no. {}: '.format(i))
    #do something with grade and weight here.
</snippet></ROW><ROW><id>19193552</id><snippet>def getWordForTwoDigits(amount):
...
return ...
</snippet></ROW><ROW><id>19193552</id><snippet>if TensAmount == 1:
    do something
elif TensAmount == 2:
    do something different
</snippet></ROW><ROW><id>19193552</id><snippet>singlesWord = getWordForDigit(int(amount)%10)
</snippet></ROW><ROW><id>19193552</id><snippet>def splitter(num):
    sep=str(num).rsplit('.', 1)
    return sep
</snippet></ROW><ROW><id>19193620</id><snippet>productprice = float(input('Enter price of product'))
if 10.0 &lt;= productprice &lt;= 20.0:
    afterDiscount = productprice * 0.80
elif 20.1 &lt;= productprice &lt;= 30.0:
    afterDiscount = productprice * 0.70
else:
    afterDiscount = productprice
print (afterDiscount)
</snippet></ROW><ROW><id>19193620</id><snippet>productprice = float(raw_input('Enter price of product'))
</snippet></ROW><ROW><id>19193620</id><snippet>0 &lt; num &lt; 3
</snippet></ROW><ROW><id>19193620</id><snippet>True</snippet></ROW><ROW><id>19193620</id><snippet>False</snippet></ROW><ROW><id>19193620</id><snippet>else</snippet></ROW><ROW><id>19193688</id><snippet>surf = pygame.Surface((100,200)) # I'm going to use 100x200 in examples
data = pygame.image.tostring(surf, 'RGBA')
</snippet></ROW><ROW><id>19193688</id><snippet>from StringIO import StringIO
data = StringIO()
pygame.image.save(surf, x)
print x.getvalue()
</snippet></ROW><ROW><id>19193688</id><snippet>from StringIO import StringIO
from PIL import Image
data = pygame.image.tostring(surf, 'RGBA')
img = Image.fromstring('RGBA', (100,200), data)
zdata = StringIO()
img.save(zdata, 'JPEG')
print zdata.getvalue()
</snippet></ROW><ROW><id>19193780</id><snippet>elif slot[2] == user_team and slot[4] == user_team and (slot[6] != user_team) \
and (slot[6] != computer_team):
</snippet></ROW><ROW><id>19193780</id><snippet>4, 2, 3, 7</snippet></ROW><ROW><id>19193780</id><snippet> O | O | X
-----------
 X | X | O
-----------
 O | X | 8
</snippet></ROW><ROW><id>19193780</id><snippet>if Slot2 = User, Slot4 = User, Slot6 != User, and Slot6 != Computer either... 
</snippet></ROW><ROW><id>19193780</id><snippet>Slot2 = User, Slot4 = User, Slot6 != User, and Slot6 = Computer
</snippet></ROW><ROW><id>19193780</id><snippet>and (slot[6] != computer_team)</snippet></ROW><ROW><id>19193924</id><snippet>if some_condition():
   table_name = 'TABLE_A'
else:
   table_name = 'TABLE_B'

cursor.execute('INSERT INTO '+ table_name + 'VALUES (?)', values)
</snippet></ROW><ROW><id>19194282</id><snippet>'%'+?'%'</snippet></ROW><ROW><id>19194282</id><snippet>+</snippet></ROW><ROW><id>19194282</id><snippet>LIKE</snippet></ROW><ROW><id>19194282</id><snippet>'%'+?+'%'</snippet></ROW><ROW><id>19194282</id><snippet>%</snippet></ROW><ROW><id>19194282</id><snippet>return cursor.execute("""select myID from Column where name like ?""",
                      ('%'+myString+'%',))
</snippet></ROW><ROW><id>19194282</id><snippet>'foo%'</snippet></ROW><ROW><id>19194594</id><snippet>dict</snippet></ROW><ROW><id>19194594</id><snippet>if not model_class.objects.filter(**dict).exists():
    a = model_class.objects.create(**dict)
</snippet></ROW><ROW><id>19194594</id><snippet>a, created = model_class.objects.get_or_create(**dict)
</snippet></ROW><ROW><id>19194594</id><snippet>dict</snippet></ROW><ROW><id>19194594</id><snippet>dict</snippet></ROW><ROW><id>19194925</id><snippet>gdal.UseExceptions()</snippet></ROW><ROW><id>19194925</id><snippet>from osgeo import gdal

dsrc = gdal.Open('nonexist')
# ... silence

gdal.UseExceptions()

dsrc = gdal.Open('nonexist')
# Traceback (most recent call last):
#   File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
# RuntimeError: `nonexist' does not exist in the file system,
# and is not recognised as a supported dataset name.
</snippet></ROW><ROW><id>19194925</id><snippet>try</snippet></ROW><ROW><id>19194925</id><snippet>except</snippet></ROW><ROW><id>19194925</id><snippet>try:
    dsrc = gdal.Open('nonexist')
except RuntimeError as e:
    print(str(e))
</snippet></ROW><ROW><id>19195323</id><snippet>{% load mptt_tags %}
&lt;h1&gt;Tags&lt;/h1&gt;
&lt;ul&gt;
{% recursetree tags %}
    &lt;li&gt;{{ node.name }}
        {% if not node.is_leaf_node %}
            &lt;ul&gt;
                {{ children }}
            &lt;/ul&gt;
        {% endif %}
    &lt;/li&gt;
{% endrecursetree %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>19195323</id><snippet># yourapp/tags_list.html
&lt;ul&gt;
{% for tag in tags %}
    &lt;li&gt;{{ tag.name }}&lt;/li&gt;
    {% if tag.children.exists %}
       {% with tag.children.all as tags %}
            {% include "yourapp/tags_list.html" %}
        {% endwith %}    
    {% endif %}
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>19195323</id><snippet>parent = models.ForeignKey('self', blank=True, null=True, related_name="children")
</snippet></ROW><ROW><id>19195869</id><snippet>server_monitor</snippet></ROW><ROW><id>19195869</id><snippet>-c 1</snippet></ROW><ROW><id>19195869</id><snippet>-q celery,server_monitor</snippet></ROW><ROW><id>19195869</id><snippet>celery</snippet></ROW><ROW><id>19195869</id><snippet>server_monitor</snippet></ROW><ROW><id>19195940</id><snippet>a, b = 1, 2
exec('print(a+b)', {'a': 5, 'b': 5}) # prints 10
</snippet></ROW><ROW><id>19195940</id><snippet>exec</snippet></ROW><ROW><id>19195946</id><snippet>import subprocess

p = subprocess.Popen('commands to run program', shell=True, stdin=subprocess.PIPE)
p.communicate(input='Y')
p.wait()
</snippet></ROW><ROW><id>19196136</id><snippet>&gt;&gt;&gt; my_list = ['Hey','Lol (First)','Dasd','Go (First)','Asd']
&gt;&gt;&gt; [x for x in my_list if 'First' in x] + [x for x in my_list if 'First' not in x]
['Lol (First)', 'Go (First)', 'Hey', 'Dasd', 'Asd']
&gt;&gt;&gt; [x for x in my_list if 'First' not in x] + [x for x in my_list if 'First' in x]
['Hey', 'Dasd', 'Asd', 'Lol (First)', 'Go (First)']
</snippet></ROW><ROW><id>19196136</id><snippet>&gt;&gt;&gt; for x in [x for x in my_list if 'First' in x] + [x for x in my_list if 'First' not in x]:
...     print(x)
...
Lol (First)
Go (First)
Hey
Dasd
Asd
&gt;&gt;&gt; for x in [x for x in my_list if 'First' not in x] + [x for x in my_list if 'First' in x]:
...     print(x)
...
Hey
Dasd
Asd
Lol (First)
Go (First)
</snippet></ROW><ROW><id>19196171</id><snippet>selection_set</snippet></ROW><ROW><id>19196171</id><snippet>select_set</snippet></ROW><ROW><id>19196171</id><snippet>0</snippet></ROW><ROW><id>19196171</id><snippet>END</snippet></ROW><ROW><id>19196171</id><snippet>from Tkinter import * # Python 3.x: from tkinter import *

def select_all():
    lb.select_set(0, END)

root = Tk()
lb = Listbox(root, selectmode=MULTIPLE)
for i in range(10): lb.insert(END, i)
lb.pack()
Button(root, text='select all', command=select_all).pack()
root.mainloop()
</snippet></ROW><ROW><id>19196171</id><snippet>self.selectAllCallback</snippet></ROW><ROW><id>19196171</id><snippet>self.selectAll=Button(self,text="select all", command=self.selectAllCallback())
#                                                                           ^^
</snippet></ROW><ROW><id>19196171</id><snippet>self.selectAll=Button(self,text="select all", command=self.selectAllCallback)
</snippet></ROW><ROW><id>19196472</id><snippet>developer.google.com</snippet></ROW><ROW><id>19196472</id><snippet>urllib</snippet></ROW><ROW><id>19196472</id><snippet>httplib</snippet></ROW><ROW><id>19196472</id><snippet>...

params = urllib.urlencode([
    ('js_code', sys.argv[1]),
    ('compilation_level', 'WHITESPACE_ONLY'),
    ('output_format', 'text'),
    ('output_info', 'compiled_code'),
  ])

# Always use the following value for the Content-type header.
headers = {"Content-type": "application/x-www-form-urlencoded"}
conn = httplib.HTTPConnection('closure-compiler.appspot.com')
conn.request('POST', '/compile', params, headers)

...
</snippet></ROW><ROW><id>19196472</id><snippet>import httplib
import sys
import urllib
from contextlib import closing


def call_closure_api(**kwargs):
    with closing(httplib.HTTPConnection('closure-compiler.appspot.com')) as conn:
        conn.request(
            'POST', '/compile',
            urllib.urlencode(kwargs.items()),
            headers={"Content-type": "application/x-www-form-urlencoded"}
        )
        return conn.getresponse().read()


call_closure_api(
    js_code=sys.argv[1],
    # feel free to introduce named constants for these
    compilation_level='WHITESPACE_ONLY',
    output_format='text',
    output_info='compiled_code'
)
</snippet></ROW><ROW><id>19196583</id><snippet>Twython</snippet></ROW><ROW><id>19196583</id><snippet>Consumer key</snippet></ROW><ROW><id>19196583</id><snippet>Consumer Secret</snippet></ROW><ROW><id>19196583</id><snippet>Access token</snippet></ROW><ROW><id>19196583</id><snippet>Access token secret</snippet></ROW><ROW><id>19196583</id><snippet>from twython import Twython

APP_KEY = ''  # Customer Key here
APP_SECRET = ''  # Customer secret here
OAUTH_TOKEN = '1936951807-z5bBNING8P1TU2onWvJh5dh8hoYlYAmNOaAx2OX'  # Access Token here
OAUTH_TOKEN_SECRET = 'QWJEZ7ridSeZGdxJELSBk7mupCpMA9q9sLCou5ywg'  # Access Token Secret here

twitter = Twython(APP_KEY, APP_SECRET, OAUTH_TOKEN, OAUTH_TOKEN_SECRET)

twitter.update_status(status="Hello from Python! :D")
</snippet></ROW><ROW><id>19196997</id><snippet>df.loc[(-df.sum(axis=1)).argsort()]
</snippet></ROW><ROW><id>19196997</id><snippet>import pandas as pd
import io
content = io.BytesIO('''\
index             one.txt  third.txt  two.txt
a               1          1        0
i               0          0        1
is              1          1        1
no              0          0        1
not             0          1        0
really          1          0        0
sentence        1          1        1
short           2          0        0
think           0          0        1''')

df = pd.read_table(content, sep='\s+', header=0)
df.set_index(['index'], inplace=True)
print(df.loc[(-df.sum(axis=1)).argsort()])
</snippet></ROW><ROW><id>19196997</id><snippet>          one.txt  third.txt  two.txt
index                                
is              1          1        1
sentence        1          1        1
a               1          1        0
short           2          0        0
i               0          0        1
no              0          0        1
not             0          1        0
really          1          0        0
think           0          0        1
</snippet></ROW><ROW><id>19197283</id><snippet>pygame.init()</snippet></ROW><ROW><id>19197283</id><snippet>screen function</snippet></ROW><ROW><id>19197283</id><snippet>def screen(a,b,z,v):
    pygame.init()
    screen = pygame.display.set_mode((a,b),z,v)
</snippet></ROW><ROW><id>19197283</id><snippet>pygame.init()
screen(50,50,0,32)
</snippet></ROW><ROW><id>19197297</id><snippet>reactor.connectTCP</snippet></ROW><ROW><id>19197297</id><snippet>IConnector</snippet></ROW><ROW><id>19197297</id><snippet>transport</snippet></ROW><ROW><id>19197353</id><snippet>decNumber = float(input("Enter a positive number: "))
</snippet></ROW><ROW><id>19197353</id><snippet>decNumber = int(input("Enter a positive number: "))
</snippet></ROW><ROW><id>19197353</id><snippet>dec = dec / 2
</snippet></ROW><ROW><id>19197353</id><snippet>dec = dec // 2
</snippet></ROW><ROW><id>19197353</id><snippet>The binary notation is: 10
</snippet></ROW><ROW><id>19197803</id><snippet>userWantToContinue = True
while aqpool[0] and userWantToContinue:
    shuffle (aqpool)
    numRight = 0

    for question, rightAnswer in aqpool:
        answer = raw_input(question + " ")

        if answer == rightAnswer:
            print ("RÄTT SVAR!")

            numRight = numRight + 1

        else:
            print("FEL SVAR! Rätta svaret är: " + rightAnswer + "\n")


        print("Vill du försätta spela? (ja eller nej)")
        userWantToContinue = str(raw_input()) not in ('n', 'nej')
        if not userWantToContinue:
            break

    total = numRight / len(aqpool) * 100
    print ("Du hade %s%% rätt!" % total)
</snippet></ROW><ROW><id>19197805</id><snippet>re.DOTALL</snippet></ROW><ROW><id>19197805</id><snippet>(.*)</snippet></ROW><ROW><id>19197805</id><snippet>re.sub(r'start(.*)end', '',  text, flags=re.DOTALL)
</snippet></ROW><ROW><id>19197805</id><snippet>(.*?)</snippet></ROW><ROW><id>19197805</id><snippet>line1\nstart\nline2\nline3\nend\nline4\nline5\nstart\nline6\nend\nline7
</snippet></ROW><ROW><id>19197805</id><snippet>(.*?)</snippet></ROW><ROW><id>19197805</id><snippet>start</snippet></ROW><ROW><id>19197805</id><snippet>end</snippet></ROW><ROW><id>19197805</id><snippet>start</snippet></ROW><ROW><id>19197805</id><snippet>end</snippet></ROW><ROW><id>19197805</id><snippet>re.sub(r'start.*?end', '',  text, flags=re.DOTALL)
</snippet></ROW><ROW><id>19197805</id><snippet>\s*</snippet></ROW><ROW><id>19197805</id><snippet>re.sub(r'start.*?end\s*', '',  text, flags=re.DOTALL)
</snippet></ROW><ROW><id>19197807</id><snippet>namedtuple</snippet></ROW><ROW><id>19197807</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Array = namedtuple('Array', ['data', 'description'])
&gt;&gt;&gt; A = Array(np.array([[1,2,3],[4,5,6]]), "Holds all the data from experiment 1. Each row contains an intensity measurement with the following columns: time [s], intensity [W/m^2], error [%].")
&gt;&gt;&gt; A.data
array([[1, 2, 3],
       [4, 5, 6]])
&gt;&gt;&gt; A.description
'Holds all the data from experiment 1. Each row contains an intensity measurement with the following columns: time [s], intensity [W/m^2], error [%].'
</snippet></ROW><ROW><id>19197932</id><snippet>k=1...kmax</snippet></ROW><ROW><id>19197932</id><snippet>k=2</snippet></ROW><ROW><id>19197982</id><snippet># GUI.py
class GUI(...):
    def __init__(...):
        ...
        self.button= ttk.Button(..., command = lambda: c.stuff(self))
        ...
   def update_progress(self):
       ...

# calc.py
def stuff(gui):
    for i in range(...):
        ...
        gui.update_progress()
</snippet></ROW><ROW><id>19198005</id><snippet>Data = [
    '&lt;td&gt;1&lt;/td&gt;', '&lt;td&gt;2&lt;/td&gt;', '&lt;td&gt;3&lt;/td&gt;', '&lt;td&gt;4&lt;/td&gt;',
    '&lt;td&gt;A&lt;/td&gt;', '&lt;td&gt;B&lt;/td&gt;', '&lt;td&gt;C&lt;/td&gt;', '&lt;td&gt;D&lt;/td&gt;',
    '&lt;td&gt;I&lt;/td&gt;', '&lt;td&gt;II&lt;/td&gt;', '&lt;td&gt;III&lt;/td&gt;', '&lt;td&gt;IV&lt;/td&gt;',
]

lists, result = [], []
for i in range(0, len(Data), 4):
    lists.append(Data[i:i+4])

for currentList in zip(*lists):
    result += list(currentList)
print result
</snippet></ROW><ROW><id>19198005</id><snippet>['&lt;td&gt;1&lt;/td&gt;', '&lt;td&gt;A&lt;/td&gt;', '&lt;td&gt;I&lt;/td&gt;',
 '&lt;td&gt;2&lt;/td&gt;', '&lt;td&gt;B&lt;/td&gt;', '&lt;td&gt;II&lt;/td&gt;',
 '&lt;td&gt;3&lt;/td&gt;', '&lt;td&gt;C&lt;/td&gt;', '&lt;td&gt;III&lt;/td&gt;',
 '&lt;td&gt;4&lt;/td&gt;', '&lt;td&gt;D&lt;/td&gt;', '&lt;td&gt;IV&lt;/td&gt;']
</snippet></ROW><ROW><id>19198007</id><snippet>Example</snippet></ROW><ROW><id>19198007</id><snippet>Model</snippet></ROW><ROW><id>19198007</id><snippet>Example</snippet></ROW><ROW><id>19198007</id><snippet>Model</snippet></ROW><ROW><id>19198007</id><snippet>class Example():
    pass

example = Example()
#let's try to save it
example.save()

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: Example instance has no attribute 'save'
</snippet></ROW><ROW><id>19198007</id><snippet>class Parent():
    def save(*args, **kwargs):
        print "saving now"

class Example(Parent):
    pass

example = Example()
#since Example has no save method, it inherits the Parent's save method.
example.save()
"saving now"
</snippet></ROW><ROW><id>19198007</id><snippet>   class Example(Parent):
        def save(self, *args, **kwargs):
            print "i know how to save on my own now"

   example = Example()
   example.save()
   "i know how to save on my own now"
</snippet></ROW><ROW><id>19198007</id><snippet>   class Example(Parent):
         def save(self, *args, **kwargs):
              super(Example, self).save(*args, **kwargs)
              print "i know how to save on my own now"

   example = Example()
   example.save()
   "saving now" #from parent
   "i know how to save on my own" #from example
</snippet></ROW><ROW><id>19198449</id><snippet>.py</snippet></ROW><ROW><id>19198449</id><snippet>import</snippet></ROW><ROW><id>19198449</id><snippet>__path__</snippet></ROW><ROW><id>19198449</id><snippet>module</snippet></ROW><ROW><id>19198449</id><snippet>module</snippet></ROW><ROW><id>19198449</id><snippet>Python/C API</snippet></ROW><ROW><id>19198484</id><snippet>(x1, y1)</snippet></ROW><ROW><id>19198484</id><snippet>(x2, y2)</snippet></ROW><ROW><id>19198484</id><snippet>sqrt((x1 - y1)^2 + (x2 - y2)^2))
</snippet></ROW><ROW><id>19198484</id><snippet>sqrt</snippet></ROW><ROW><id>19198484</id><snippet>if x &gt; y then sqrt(x) &gt; sqrt(y)
</snippet></ROW><ROW><id>19198484</id><snippet>ref = (x0, y0)
candidates = [(x1, y1), (x2, y2), (x3, y3), ...]

candidates.sort(key=lambda x: (x[0] - ref[0]) ** 2 + (x[1] - ref[1]) ** 2)
</snippet></ROW><ROW><id>19198551</id><snippet>liststore = Gtk.ListStore(*([str] * size))
</snippet></ROW><ROW><id>19198551</id><snippet>[str] * size</snippet></ROW><ROW><id>19198551</id><snippet>size</snippet></ROW><ROW><id>19198551</id><snippet>str</snippet></ROW><ROW><id>19198551</id><snippet>func(*args)</snippet></ROW><ROW><id>19198551</id><snippet>args</snippet></ROW><ROW><id>19199002</id><snippet>from collections import Counter
import numpy as np
import matplotlib.pyplot as plt


labels, values = zip(*Counter(['A','B','A','C','A','A']).items())

indexes = np.arange(len(labels))
width = 1

plt.bar(indexes, values, width)
plt.xticks(indexes + width * 0.5, labels)
plt.show()
</snippet></ROW><ROW><id>19199024</id><snippet>command</snippet></ROW><ROW><id>19199024</id><snippet>command=</snippet></ROW><ROW><id>19199094</id><snippet>Item_getName</snippet></ROW><ROW><id>19199094</id><snippet>char *</snippet></ROW><ROW><id>19199094</id><snippet>string *</snippet></ROW><ROW><id>19199094</id><snippet>const char* Item_getName(Item* item) { return item-&gt;getName()-&gt;c_str(); }
</snippet></ROW><ROW><id>19199094</id><snippet>Item</snippet></ROW><ROW><id>19199094</id><snippet>__init__</snippet></ROW><ROW><id>19199094</id><snippet>TypeError</snippet></ROW><ROW><id>19199094</id><snippet>class Item(object):
    def __init__(self, obj):
        self.obj = obj
    def getName(self):
        return lib.Item_getName(self.obj)
</snippet></ROW><ROW><id>19199094</id><snippet>getName</snippet></ROW><ROW><id>19199094</id><snippet>lib.Item_getName.restype = c_char_p
lib.Item_getName.argtypes = ()
</snippet></ROW><ROW><id>19199360</id><snippet>PyObject* pyopencv_from(const cv::Mat&amp; m)
{
  if( !m.data )
      Py_RETURN_NONE;
  cv::Mat temp, *p = (cv::Mat*)&amp;m;
  if(!p-&gt;refcount || p-&gt;allocator != &amp;g_numpyAllocator)
  {
      temp.allocator = &amp;g_numpyAllocator;
      m.copyTo(temp);
      p = &amp;temp;
  }
  p-&gt;addref();
  return pyObjectFromRefcount(p-&gt;refcount);
}
</snippet></ROW><ROW><id>19199360</id><snippet>boost::python::object toPython( const cv::Mat &amp;frame )
{
    PyObject* pyObjFrame = pyopencv_from( frame );
    boost::python::object boostPyObjFrame(boost::python::handle&lt;&gt;((PyObject*)pyObjFrame)));

    return boostPyObjFrame;
}
</snippet></ROW><ROW><id>19199360</id><snippet>boost::python::dict toPython( std::vector&lt;cv::Point&gt; newPoints, std::vector&lt;cv::Point&gt; oldPoints )
{
    boost::python::dict pointsDict;
    boost::python::list oldPointsList;
    boost::python::list newPointsList;

    for( size_t ii = 0; ii &lt; oldPoints.size( ); ++ii )
    {
        oldPointsList.append( boost::python::make_tuple( oldPoints[ii].x, oldPoints[ii].y ) );
    }

    for( size_t ii = 0; ii &lt; newPoints.size( ); ++ii )
    {
        newPointsList.append( boost::python::make_tuple( newPoints[ii].x, newPoints[ii].y ) );
    }

    pointsDict["oldPoints"] = oldPointsList;
    pointsDict["newPoints"] = newPointsList;
    return pointsDict
}
</snippet></ROW><ROW><id>19199360</id><snippet>BOOST_PYTHON_MODULE( myWrapper )
{
    // necessary only if array (cv::Mat) is returned
    import_array();
    boost::python::converter::registry::insert( &amp;extract_pyarray, type_id&lt;PyArrayObject&gt;());

    def toPython("toPython", &amp;toPython);
}
</snippet></ROW><ROW><id>19199425</id><snippet>with open("numbers.txt") as f:
   nums = [int(line) for line in f]
   nums.sort()
   print nums
</snippet></ROW><ROW><id>19199425</id><snippet>[6, 9, 10, 11, 45]
</snippet></ROW><ROW><id>19199710</id><snippet>cdict</snippet></ROW><ROW><id>19199710</id><snippet>y1</snippet></ROW><ROW><id>19199710</id><snippet>i</snippet></ROW><ROW><id>19199710</id><snippet>y0</snippet></ROW><ROW><id>19199710</id><snippet>i+1</snippet></ROW><ROW><id>19199710</id><snippet>cdict</snippet></ROW><ROW><id>19199710</id><snippet>'red'</snippet></ROW><ROW><id>19199710</id><snippet>'green'</snippet></ROW><ROW><id>19199710</id><snippet>'blue'</snippet></ROW><ROW><id>19199710</id><snippet>(x, y0, y1)</snippet></ROW><ROW><id>19199710</id><snippet>x</snippet></ROW><ROW><id>19199710</id><snippet>y0</snippet></ROW><ROW><id>19199710</id><snippet>x</snippet></ROW><ROW><id>19199710</id><snippet>y1</snippet></ROW><ROW><id>19199710</id><snippet>x</snippet></ROW><ROW><id>19199710</id><snippet>x</snippet></ROW><ROW><id>19199710</id><snippet>(0, A, B)</snippet></ROW><ROW><id>19199710</id><snippet>(X, C, D)</snippet></ROW><ROW><id>19199710</id><snippet>t</snippet></ROW><ROW><id>19199710</id><snippet>0</snippet></ROW><ROW><id>19199710</id><snippet>X</snippet></ROW><ROW><id>19199710</id><snippet>(t - 0) / (X - 0) * (C - B) + B</snippet></ROW><ROW><id>19199710</id><snippet>def cmap_discretize(cmap, N):
    colors_i = np.concatenate((np.linspace(0, 1., N), (0.,0.,0.,0.)))
    colors_rgba = cmap(colors_i)
    indices = np.linspace(0, 1., N+1)
    cdict = {}
    for ki,key in enumerate(('red','green','blue')):
        cdict[key] = [ (indices[i], colors_rgba[i-1,ki], colors_rgba[i,ki]) for i in xrange(N+1) ]
    # "white out" the bands closest to the middle
    num_middle_bands = 2 - (N % 2)
    middle_band_start_idx = (N - num_middle_bands) // 2
    for middle_band_idx in range(middle_band_start_idx,
                                 middle_band_start_idx + num_middle_bands):
        for key in cdict.keys():
            old = cdict[key][middle_band_idx]
            cdict[key][middle_band_idx] = old[:2] + (1.,)
            old = cdict[key][middle_band_idx + 1]
            cdict[key][middle_band_idx + 1] = old[:1] + (1.,) + old[2:]
    # Return colormap object.
    return cols.LinearSegmentedColormap(cmap.name + "_%d"%N, cdict, 1024)
</snippet></ROW><ROW><id>19199905</id><snippet>def selectionSort(lst):
    with lst as f:
        nums = [int(line) for line in f]
    ...
    ...
    return nums

sorted_lst = selectionSort(lst)
print(sorted_lst)
</snippet></ROW><ROW><id>19199905</id><snippet>def selectionSort(nums):

    for i in range(len(nums) - 1, 0, -1):
       maxPos = 0
       for position in range(1, i + 1):
           if nums[position] &gt; nums[maxPos]:
               maxPos = position

       value = nums[i]
       nums[i] = nums[maxPos]
       nums[maxPos] = value


def main():
    textFileName = input("Enter the Filename: ")
    with open(textFileName) as f:
        lst = [int(line) for line in f]
    selectionSort(lst)
    print(lst)

main()
</snippet></ROW><ROW><id>19200002</id><snippet>abs</snippet></ROW><ROW><id>19200002</id><snippet>sorted</snippet></ROW><ROW><id>19200002</id><snippet>list.sort</snippet></ROW><ROW><id>19200002</id><snippet>&gt;&gt;&gt; lis = [1,-5,10,6,3,-4,-9]
&gt;&gt;&gt; sorted(lis, key=abs, reverse=True)
[10, -9, 6, -5, -4, 3, 1]
</snippet></ROW><ROW><id>19200094</id><snippet>% crontab -e
</snippet></ROW><ROW><id>19200094</id><snippet>10 7 * * 1-5 /path/to/your/script
</snippet></ROW><ROW><id>19200372</id><snippet>def getDollarFormatText(dolAndCent):

    separateDolCent = [int(x) for x in str(dolAndCent).split('.')]

    return separateDolCent
</snippet></ROW><ROW><id>19200372</id><snippet>int</snippet></ROW><ROW><id>19200372</id><snippet>rsplit</snippet></ROW><ROW><id>19200372</id><snippet>split</snippet></ROW><ROW><id>19200372</id><snippet>1</snippet></ROW><ROW><id>19200372</id><snippet>separateDolCent</snippet></ROW><ROW><id>19200372</id><snippet>def get_dollar_format_text(dol_and_cent):
    '''Returns the dollar and cents part of a money amount as
    a two element list of integers, where the first element is
    dollars and the second is cents.
    '''
    return [int(x) for x in str(dol_and_cent).split('.')]
</snippet></ROW><ROW><id>19200372</id><snippet>camelCase</snippet></ROW><ROW><id>19200372</id><snippet>using_underscores</snippet></ROW><ROW><id>19200372</id><snippet>2</snippet></ROW><ROW><id>19200372</id><snippet>3.4</snippet></ROW><ROW><id>19200372</id><snippet>345.4311</snippet></ROW><ROW><id>19200372</id><snippet>def get_dollar_format_text(dol_and_cent):
    '''Returns the dollar and cents part of a money amount as
    a two element list of integers, where the first element is
    dollars and the second is cents.
    '''
    return [int(x) for x in '{0:.2f}'.format(dol_and_cent).split('.')]
</snippet></ROW><ROW><id>19200372</id><snippet>2</snippet></ROW><ROW><id>19200372</id><snippet>2.00</snippet></ROW><ROW><id>19200372</id><snippet>3.4</snippet></ROW><ROW><id>19200372</id><snippet>3.40</snippet></ROW><ROW><id>19200372</id><snippet>345.4311</snippet></ROW><ROW><id>19200372</id><snippet>345.43</snippet></ROW><ROW><id>19200384</id><snippet>def cipher_attack(partial_alphabetic,ciphertext):
    var = ""
    for i in xrange(len(ciphertext)):
        if ciphertext[i] in partial_alphabetic:
            var += alphabet[partial_alphabetic.index(ciphertext[i]) % 26]
        else:
            var += "!"
    print var

cipher_attack("!wertyuiopasdfghjklzxcvbnm","rqr")
</snippet></ROW><ROW><id>19200384</id><snippet>d!d
</snippet></ROW><ROW><id>19200622</id><snippet>strs = "www.site.com/buy/id/"
for url in self.urls:
    f.write(strs + url.split("/")[-1] + "\n")
    f.flush()
</snippet></ROW><ROW><id>19200622</id><snippet>f.write("www.site.com/buy/id/{}\n".format(url.split("/")[-1]))
</snippet></ROW><ROW><id>19200627</id><snippet>def path(a, b):
    if not b:
        return a
    for n, (p, q) in enumerate(b):
        if p == a[-1][1]:
            return path(a + [(p, q)], b[:n] + b[n+1:])
        if q == a[-1][1]:
            return path(a + [(q, p)], b[:n] + b[n+1:])
    raise ValueError("no path", a, b)

L = [(8, 2), (8, 5), (2, 12), (12, 13), (5, 6), (6, 7), (13, 14), (14, 3), (7, 4), (3, 4)]
print path([L[0]], L[1:])
#[(8, 2), (2, 12), (12, 13), (13, 14), (14, 3), (3, 4), (4, 7), (7, 6), (6, 5), (5, 8)]
</snippet></ROW><ROW><id>19200713</id><snippet>import sys
import clang.cindex

def srcrangestr(x):
    return '%s:%d:%d - %s:%d:%d' % (x.start.file, x.start.line, x.start.column, x.end.file, x.end.line, x.end.column)

def main():
    index = clang.cindex.Index.create()
    tu = index.parse(sys.argv[1], args=['-x', 'c++'])

    for x in tu.cursor.get_tokens():
        print x.kind
        print "  " + srcrangestr(x.extent)
        print "  '" + str(x.spelling) + "'"

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19200713</id><snippet>TokenKind.PUNCTUATION
  test2.h:1:1 - test2.h:1:2
  '#'
TokenKind.IDENTIFIER
  test2.h:1:2 - test2.h:1:8
  'ifndef'
TokenKind.IDENTIFIER
  test2.h:1:9 - test2.h:1:21
  '__HEADER_FOO'
TokenKind.PUNCTUATION
  test2.h:2:1 - test2.h:2:2
  '#'
TokenKind.IDENTIFIER
  test2.h:2:2 - test2.h:2:8
  'define'
TokenKind.IDENTIFIER
  test2.h:2:9 - test2.h:2:21
  '__HEADER_FOO'
TokenKind.COMMENT
  test2.h:4:1 - test2.h:4:11
  '//+reflect'
TokenKind.KEYWORD
  test2.h:5:1 - test2.h:5:6
  'class'
TokenKind.IDENTIFIER
  test2.h:5:7 - test2.h:5:10
  'Foo'
TokenKind.PUNCTUATION
  test2.h:6:1 - test2.h:6:2
  '{'
TokenKind.KEYWORD
  test2.h:7:5 - test2.h:7:11
  'public'
TokenKind.PUNCTUATION
  test2.h:7:11 - test2.h:7:12
  ':'
TokenKind.KEYWORD
  test2.h:8:5 - test2.h:8:12
  'private'
TokenKind.PUNCTUATION
  test2.h:8:12 - test2.h:8:13
  ':'
TokenKind.KEYWORD
  test2.h:9:9 - test2.h:9:12
  'int'
TokenKind.IDENTIFIER
  test2.h:9:13 - test2.h:9:18
  'm_int'
TokenKind.PUNCTUATION
  test2.h:9:18 - test2.h:9:19
  ';'
TokenKind.COMMENT
  test2.h:9:20 - test2.h:9:30
  '//+reflect'
TokenKind.PUNCTUATION
  test2.h:10:1 - test2.h:10:2
  '}'
TokenKind.PUNCTUATION
  test2.h:10:2 - test2.h:10:3
  ';'
TokenKind.PUNCTUATION
  test2.h:12:1 - test2.h:12:2
  '#'
TokenKind.IDENTIFIER
  test2.h:12:2 - test2.h:12:7
  'endif'
</snippet></ROW><ROW><id>19200769</id><snippet>$ python
Python 3.3.2 (default, May 21 2013, 11:50:47) 
[GCC 4.2.1 Compatible Apple Clang 4.1 ((tags/Apple/clang-421.11.66))] on darwin
Type "help", "copyright", "credits" or "license" for more information.
Running with pythonstartup.py
&gt;&gt;&gt; s = 'Hello World'
&gt;&gt;&gt; str(s)
'Hello World'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19200769</id><snippet>--with-pydebug</snippet></ROW><ROW><id>19200889</id><snippet>elt.NoSuchElementException</snippet></ROW><ROW><id>19200889</id><snippet>driver.NoSuchElementException</snippet></ROW><ROW><id>19200889</id><snippet>from selenium import NoSuchElementException</snippet></ROW><ROW><id>19200889</id><snippet>from selenium.common.exceptions import NoSuchElementException</snippet></ROW><ROW><id>19200925</id><snippet>  if not combinacion3 in comprobadas:
    print("Trying: ["+combinacion3+"]")
    comprobadas.append(combinacion3)
</snippet></ROW><ROW><id>19201230</id><snippet>mock</snippet></ROW><ROW><id>19201230</id><snippet>import_module()</snippet></ROW><ROW><id>19201230</id><snippet>unittest.mock</snippet></ROW><ROW><id>19201230</id><snippet>try:
    # Python 3.3+
    from unittest.mock import patch
except ImportError:
    # External dependency
    from mock import patch

def test():
    module_obj = {'name': Object, 'another_name': AnotherObject}

    with patch('importlib.import_module', module_obj.get):
        assert initialize('name') is module_obj['name']
</snippet></ROW><ROW><id>19201510</id><snippet>import glob
import numpy as np
import pandas as pd

stocks = glob.glob("stock*.csv")

total_tick = 0
for stock in stocks:
    df = pd.read_csv(stock, 
                     names=["time", "open", "high", "low", "close", "volume"],
                     parse_dates=[0], index_col="time")
    tick = df["close"].diff().apply(np.sign).fillna(0.0)
    total_tick += tick

total_tick.to_csv("tick.csv")
</snippet></ROW><ROW><id>19201510</id><snippet>2013-09-16 09:30:00,0.0
2013-09-16 09:31:00,3.0
2013-09-16 15:59:00,-5.0
2013-09-16 16:00:00,-3.0
2013-09-17 09:30:00,1.0
2013-09-17 09:31:00,-1.0
</snippet></ROW><ROW><id>19201510</id><snippet>DataFrame</snippet></ROW><ROW><id>19201510</id><snippet>&gt;&gt;&gt; df
                         open      high     low       close  volume
time                                                               
2013-09-16 09:30:00  461.0100  461.4900  461.00  453.484089  183507
2013-09-16 09:31:00  460.8200  461.6099  460.39  474.727508  212774
2013-09-16 15:59:00  449.7200  450.0774  449.59  436.010403  146399
2013-09-16 16:00:00  450.1200  450.1200  449.65  455.296584  444594
2013-09-17 09:30:00  448.0000  448.0000  447.50  447.465545  173624
2013-09-17 09:31:00  449.2628  449.6800  447.50  477.785506  193186
</snippet></ROW><ROW><id>19201510</id><snippet>&gt;&gt;&gt; df["close"]
time
2013-09-16 09:30:00    453.484089
2013-09-16 09:31:00    474.727508
2013-09-16 15:59:00    436.010403
2013-09-16 16:00:00    455.296584
2013-09-17 09:30:00    447.465545
2013-09-17 09:31:00    477.785506
Name: close, dtype: float64
</snippet></ROW><ROW><id>19201510</id><snippet>&gt;&gt;&gt; df["close"].diff()
time
2013-09-16 09:30:00          NaN
2013-09-16 09:31:00    21.243419
2013-09-16 15:59:00   -38.717105
2013-09-16 16:00:00    19.286181
2013-09-17 09:30:00    -7.831039
2013-09-17 09:31:00    30.319961
Name: close, dtype: float64
</snippet></ROW><ROW><id>19201510</id><snippet>&gt;&gt;&gt; df["close"].diff().apply(np.sign)
time
2013-09-16 09:30:00   NaN
2013-09-16 09:31:00     1
2013-09-16 15:59:00    -1
2013-09-16 16:00:00     1
2013-09-17 09:30:00    -1
2013-09-17 09:31:00     1
Name: close, dtype: float64
</snippet></ROW><ROW><id>19201510</id><snippet>NaN</snippet></ROW><ROW><id>19201510</id><snippet>&gt;&gt;&gt; df["close"].diff().apply(np.sign).fillna(0)
time
2013-09-16 09:30:00    0
2013-09-16 09:31:00    1
2013-09-16 15:59:00   -1
2013-09-16 16:00:00    1
2013-09-17 09:30:00   -1
2013-09-17 09:31:00    1
dtype: float64
</snippet></ROW><ROW><id>19201622</id><snippet>n</snippet></ROW><ROW><id>19201622</id><snippet>4</snippet></ROW><ROW><id>19201622</id><snippet>lst.index()</snippet></ROW><ROW><id>19201622</id><snippet>4</snippet></ROW><ROW><id>19201622</id><snippet>n</snippet></ROW><ROW><id>19201622</id><snippet>.index()</snippet></ROW><ROW><id>19201622</id><snippet>start</snippet></ROW><ROW><id>19201622</id><snippet>i = lst.index(a, n)     
</snippet></ROW><ROW><id>19201622</id><snippet>range()</snippet></ROW><ROW><id>19201622</id><snippet>for n in range(len(lst)):
    a = min(lst[n:])
    i = lst.index(a, n)
    lst[n], lst[i] = a, lst[n]
</snippet></ROW><ROW><id>19201622</id><snippet>&gt;&gt;&gt; lst = [6, 8, 9, 1, 3, 4, 7, 5, 4]
&gt;&gt;&gt; for n in range(0,len(lst)):
...     a = min(lst[n:])
...     i = lst.index(a, n)
...     lst[n], lst[i] = a, lst[n]
... 
&gt;&gt;&gt; lst
[1, 3, 4, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>19201633</id><snippet>with open(r'c:\NDCHypen.txt', 'r') as infile,
     open(r'c:\NDCOnly.txt', 'w') as outfile:
    data = infile.read()
    data = data.replace("-", "")
    outfile.write(data)
</snippet></ROW><ROW><id>19201633</id><snippet>'\r\n'</snippet></ROW><ROW><id>19201633</id><snippet>\n'</snippet></ROW><ROW><id>19201633</id><snippet>'rb'</snippet></ROW><ROW><id>19201633</id><snippet>'wb'</snippet></ROW><ROW><id>19201676</id><snippet>wx.EXPAND</snippet></ROW><ROW><id>19201676</id><snippet>top_box.Add(box1, 0, wx.EXPAND)
top_box.Add(box2)
</snippet></ROW><ROW><id>19202117</id><snippet>bincount</snippet></ROW><ROW><id>19202117</id><snippet>&gt;&gt;&gt; m = np.array([[0,0,1],[1,1,0],[1,1,1]])
&gt;&gt;&gt; np.apply_along_axis(np.bincount, 1, m)
array([[2, 1],
       [1, 2],
       [0, 3]])
&gt;&gt;&gt; [np.bincount(m[i]) for i in range(m.shape[1])]
[array([2, 1]), array([1, 2]), array([0, 3])]
</snippet></ROW><ROW><id>19202117</id><snippet>&gt;&gt;&gt; m = np.array([[0,0,0],[1,1,0],[1,1,0]])
&gt;&gt;&gt; m
array([[0, 0, 0],
       [1, 1, 0],
       [1, 1, 0]])
&gt;&gt;&gt; [np.bincount(m[i]) for i in range(m.shape[1])]
[array([3]), array([1, 2]), array([1, 2])]
&gt;&gt;&gt; np.apply_along_axis(np.bincount, 1, m)
Traceback (most recent call last):
  File "&lt;ipython-input-49-72e06e26a718&gt;", line 1, in &lt;module&gt;
    np.apply_along_axis(np.bincount, 1, m)
  File "/usr/local/lib/python2.7/dist-packages/numpy/lib/shape_base.py", line 117, in apply_along_axis
    outarr[tuple(i.tolist())] = res
ValueError: could not broadcast input array from shape (2) into shape (1)
</snippet></ROW><ROW><id>19202117</id><snippet>minlength</snippet></ROW><ROW><id>19202117</id><snippet>lambda</snippet></ROW><ROW><id>19202117</id><snippet>partial</snippet></ROW><ROW><id>19202117</id><snippet>&gt;&gt;&gt; np.apply_along_axis(lambda x: np.bincount(x, minlength=2), 1, m)
array([[3, 0],
       [1, 2],
       [1, 2]])
</snippet></ROW><ROW><id>19202149</id><snippet>df.groupby(["a", "name"]).median().index.get_level_values(1)

Out[2]:

Index([u'hello', u'foo'], dtype=object)
</snippet></ROW><ROW><id>19202149</id><snippet>df.groupby(["a", "name"]).median().index.get_level_values('name')
</snippet></ROW><ROW><id>19202149</id><snippet>tolist()</snippet></ROW><ROW><id>19202149</id><snippet>df.groupby(["a", "name"]).median().index.get_level_values(1).tolist()

Out[5]:

['hello', 'foo']
</snippet></ROW><ROW><id>19202282</id><snippet>from django.contrib import admin
from polls.models import Choice
from polls.models import Poll
</snippet></ROW><ROW><id>19202282</id><snippet>import views
from django.contrib import admin
from models import *
</snippet></ROW><ROW><id>19202500</id><snippet>sys.stdin</snippet></ROW><ROW><id>19202500</id><snippet>sum = 0
for line in sys.stdin:
    item = int(line.strip())
    sum += item
print sum
</snippet></ROW><ROW><id>19202500</id><snippet>entire_raw_data = sys.stdin.read()
lines = entire_raw_data.split()
... # do something with lines
</snippet></ROW><ROW><id>19202500</id><snippet>raw_input()</snippet></ROW><ROW><id>19202500</id><snippet>for line in iter(raw_input, ''):  # will iterate until an empty line
    # so something with line
</snippet></ROW><ROW><id>19202500</id><snippet>while True:
    line = raw_input()
    if not line:
        break
    # so something with line
</snippet></ROW><ROW><id>19202518</id><snippet>import numpy as np

data = [('spire', '250um', [(0, 1.89e6, 0.0), (1, 2e6, 1e-2)]),
        ('spire', '350',   [(0, 1.89e6, 0.0), (2, 2.02e6, 3.8e-2)])
        ]
table = np.array(data, dtype=[('instrument', '|S32'),
                               ('filter', '|S64'),
                               ('response', [('linenumber', 'i'),
                                             ('wavelength', 'f'),
                                             ('throughput', 'f')], (2,))
                              ])

print table[0]
# gives ('spire', '250um', [(0, 1890000.0, 0.0), (1, 2000000.0, 0.009999999776482582)])
</snippet></ROW><ROW><id>19202519</id><snippet>readMsgThread = threading.Thread( target=readMsg(serialPort) )
</snippet></ROW><ROW><id>19202519</id><snippet>readMsg(serialPort)</snippet></ROW><ROW><id>19202519</id><snippet>target</snippet></ROW><ROW><id>19202519</id><snippet>readMsgThread = threading.Thread( target=readMsg, args=(serialPort,) )
</snippet></ROW><ROW><id>19202519</id><snippet>readMsg</snippet></ROW><ROW><id>19202519</id><snippet>readMsg</snippet></ROW><ROW><id>19202519</id><snippet>readMsgThread.setDaemon( True )
</snippet></ROW><ROW><id>19202538</id><snippet>__tablename__</snippet></ROW><ROW><id>19202538</id><snippet>@declared_attr
def activation(self):
    return relationship(
      Activation.__tablename__,
      backref=self.__tablename__
    )
</snippet></ROW><ROW><id>19202538</id><snippet>__tablename__</snippet></ROW><ROW><id>19202538</id><snippet>@declared_attr
def activation(self):
    return relationship(
      Activation,
      backref=self.__tablename__
    )
</snippet></ROW><ROW><id>19202567</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>19202567</id><snippet>import subprocess

cmd = ['ssh', 'user@machine2',
       'mkdir -p output/dir; cat - &gt; output/dir/file.dat']

p = subprocess.Popen(cmd, stdin=subprocess.PIPE)

your_inmem_data = 'foobarbaz\0' * 1024 * 1024

for chunk_ix in range(0, len(your_inmem_data), 1024):
    chunk = your_inmem_data[chunk_ix:chunk_ix + 1024]
    p.stdin.write(chunk)
</snippet></ROW><ROW><id>19202567</id><snippet>sys.stdout</snippet></ROW><ROW><id>19202567</id><snippet>ssh</snippet></ROW><ROW><id>19202567</id><snippet>$ python process.py | ssh &lt;the same ssh command&gt;
</snippet></ROW><ROW><id>19202729</id><snippet>r"\n"</snippet></ROW><ROW><id>19202729</id><snippet>r"\\n"</snippet></ROW><ROW><id>19202729</id><snippet>"\\\\n"</snippet></ROW><ROW><id>19202729</id><snippet>"\n"</snippet></ROW><ROW><id>19202737</id><snippet>#!/usr/bin/python                                                               

# Load the JSON module and use it to load your JSON file.                       
# I'm assuming that the JSON file contains a list of objects.                   
import json
obj  = json.load(open("file.json"))

# Iterate through the objects in the JSON and pop (remove)                      
# the obj once we find it.                                                      
for i in xrange(len(obj)):
    if obj[i]["ename"] == "mark":
        obj.pop(i)
        break

# Output the updated file with pretty JSON                                      
open("updated-file.json", "w").write(
    json.dumps(obj, sort_keys=True, indent=4, separators=(',', ': '))
)
</snippet></ROW><ROW><id>19202737</id><snippet>for</snippet></ROW><ROW><id>19202886</id><snippet>max()</snippet></ROW><ROW><id>19202886</id><snippet>max_index = 0
for i, value in enumerate(l):
    if value &gt; l[max_index]:
        max_index = i
</snippet></ROW><ROW><id>19202886</id><snippet>max_index</snippet></ROW><ROW><id>19202886</id><snippet>l</snippet></ROW><ROW><id>19202886</id><snippet>enumerate()</snippet></ROW><ROW><id>19202886</id><snippet>max()</snippet></ROW><ROW><id>19202886</id><snippet>max_index = max(range(len(l)), key=l.__getitem__)
</snippet></ROW><ROW><id>19202886</id><snippet>l</snippet></ROW><ROW><id>19202886</id><snippet>range(len(l))</snippet></ROW><ROW><id>19202886</id><snippet>l.__getitem__()</snippet></ROW><ROW><id>19202904</id><snippet>split</snippet></ROW><ROW><id>19202904</id><snippet>&gt;&gt;&gt; '2 2 4 5 7'.split()
['2', '2', '4', '5', '7']
</snippet></ROW><ROW><id>19202904</id><snippet>int</snippet></ROW><ROW><id>19202904</id><snippet>&gt;&gt;&gt; [int(elem) for elem in '2 2 4 5 7'.split()]
[2, 2, 4, 5, 7]
</snippet></ROW><ROW><id>19202904</id><snippet>import sys

list_of_lists = []

for line in sys.stdin:
    new_list = [int(elem) for elem in line.split()]
    list_of_lists.append(new_list)
</snippet></ROW><ROW><id>19202904</id><snippet>&gt;&gt;&gt; list_of_lists
[[3], [2], [2, 2, 4, 5, 7]]
</snippet></ROW><ROW><id>19202904</id><snippet>list1 = list_of_lists[0]  # first list of this list of lists
list1 = list_of_lists[1]  # second list of this list of lists
list1 = list_of_lists[2]  # an so on ...
</snippet></ROW><ROW><id>19202942</id><snippet>from django.db.models import Count
Category.objects.annotate(
    entry_count=Count('entry_set')
).order_by('-entry_count')
</snippet></ROW><ROW><id>19202942</id><snippet>entry_count</snippet></ROW><ROW><id>19202942</id><snippet>@property</snippet></ROW><ROW><id>19203069</id><snippet>a ^ 0b11111111      #exclusive or's each bit in a with 1, inverting each bit

&gt;&gt;&gt; a=0b01100001
&gt;&gt;&gt; bin(a ^ 0b11111111)
'0b10011110' 

&gt;&gt;&gt; bin((a ^ 0b11111111) &amp; (b ^ 0b11111111))
'0b10011100'
</snippet></ROW><ROW><id>19203069</id><snippet>&gt;&gt;&gt; bin(~a &amp; ~b)
'-0b1100100
</snippet></ROW><ROW><id>19203173</id><snippet>ps</snippet></ROW><ROW><id>19203173</id><snippet>import subprocess
import sys

scriptname  = 'foo'
procs = subprocess.check_output(['ps', '-xa']).splitlines()
count = len([l for l in procs if 'python' in l and scriptname in l])
if count &gt; 3:
    sys.exit()
</snippet></ROW><ROW><id>19203187</id><snippet>&gt;&gt;&gt; m = mutagen.File(path, easy=True)
&gt;&gt;&gt; m['title']
[u'Sunshine Smile']
&gt;&gt;&gt; m['artist']
[u'Adorable']
&gt;&gt;&gt; m['album']
[u'Against Perfection']
</snippet></ROW><ROW><id>19203187</id><snippet>&gt;&gt;&gt; m = mutagen.File(path)
&gt;&gt;&gt; for tag in ('TPE1', 'TPE2', u'©ART', 'Author', 'Artist', 'ARTIST',
...             'TRACK ARTIST', 'TRACKARTIST', 'TrackArtist', 'Track Artist'):
...     try:
...         artist = unicode(m[tag][0])
...         break
...     except KeyError:
...         pass
</snippet></ROW><ROW><id>19203235</id><snippet>def split_special(subject):
    return re.split(r"""
        \|           # Match |
        (?!          # only if it's not possible to match...
         (?:         # the following non-capturing group:
          (?!\[\[)   # that doesn't contain two square brackets
          .          # but may otherwise contain any character
         )*          # any number of times,
         \]\]        # followed by ]]
        )            # End of first loohahead. Now the same thing for braces:
        (?!(?:(?!\{\{).)*\}\})""", 
        subject, flags=re.VERBOSE)
</snippet></ROW><ROW><id>19203235</id><snippet>&gt;&gt;&gt; s = "|Row 1|[[link|text|df[sdfl|kj]|foo]]|{{img|altText|{|}|bar}}|"
&gt;&gt;&gt; split_special(s)
['', 'Row 1', '[[link|text|df[sdfl|kj]|foo]]', '{{img|altText|{|}|bar}}', '']
</snippet></ROW><ROW><id>19203235</id><snippet>|</snippet></ROW><ROW><id>19203344</id><snippet>def gcd_steps(a, b):
    steps = []
    # this is the standard GCD finding algorithm;
    # we simply amend it with "step tracking"
    while b:
        # a, b = b, a % b
        tmp = a
        a = b
        b = tmp % b
        steps.append(a)
    return steps  # normally we'd want to return `a`
                  # but you want the steps not just the result

steps = gcd_steps(125 * 123 * 12314, 25 * 149)

# print the list with `-&gt;` between the steps
print(" -&gt; ".join(str(x) for x in steps))
</snippet></ROW><ROW><id>19203344</id><snippet>steps[-1]</snippet></ROW><ROW><id>19203344</id><snippet>3725 -&gt; 900 -&gt; 125 -&gt; 25
</snippet></ROW><ROW><id>19203361</id><snippet>list(itertools.combinations(di.values(),2))
Out[6]: 
[([1, 2, 5], 34),
 ([1, 2, 5], 'haha'),
 ([1, 2, 5], 24),
 (34, 'haha'),
 (34, 24),
 ('haha', 24)]
</snippet></ROW><ROW><id>19203403</id><snippet>x, y = np.indices(array.shape)
x = x.ravel(order='F')
y = y.ravel(order='F')
values = array.ravel(order='F')
</snippet></ROW><ROW><id>19203467</id><snippet>.seek()</snippet></ROW><ROW><id>19203467</id><snippet>with open('huge_file.dat', 'rb') as f:
    f.seek(1024 * 1024 * 1024)  # skip 1GB
    ...
</snippet></ROW><ROW><id>19203512</id><snippet>integer</snippet></ROW><ROW><id>19203512</id><snippet>&gt;&gt;&gt; '{08}'.format(*range(10)) # should be SyntaxError
'8'
&gt;&gt;&gt; '{010}'.format(*range(10)) # should be '8'
'10'
&gt;&gt;&gt; '{-1}'.format(*range(10)) # should be '9', but looked up as a string
KeyError: '-1'
&gt;&gt;&gt; '{1 }'.format(*range(10)) # should be '1', but looked up as a string
KeyError: '1 '
&gt;&gt;&gt; '{10000000000000000000}'.format(1) # should be IndexError
ValueError: Too many decimal digits in format string
</snippet></ROW><ROW><id>19203512</id><snippet>get_integer</snippet></ROW><ROW><id>19203512</id><snippet>PY_SSIZE_T_MAX</snippet></ROW><ROW><id>19203512</id><snippet>digit +</snippet></ROW><ROW><id>19203512</id><snippet>integer</snippet></ROW><ROW><id>19203512</id><snippet>element_index</snippet></ROW><ROW><id>19203512</id><snippet>arg_name</snippet></ROW><ROW><id>19203512</id><snippet>element_index</snippet></ROW><ROW><id>19203512</id><snippet>arg_name</snippet></ROW><ROW><id>19203516</id><snippet>ws.cell(1,i+1).value =  "The price of" + symbolslist[i] + " is " + price 
</snippet></ROW><ROW><id>19203568</id><snippet>virtualenv</snippet></ROW><ROW><id>19203568</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>19203568</id><snippet>cpvirtualenv venv1 venv2
</snippet></ROW><ROW><id>19203568</id><snippet>workon venv2</snippet></ROW><ROW><id>19203781</id><snippet>defaultdict</snippet></ROW><ROW><id>19203781</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(str)
&gt;&gt;&gt; for i, j in zip(X, Y):
...     d[i] += j
... 
&gt;&gt;&gt; print d
defaultdict(&lt;type 'str'&gt;, {'1': 'mGw', '0': 'azh22'})
&gt;&gt;&gt; print d.items()
[('1', 'mGw'), ('0', 'azh22')]
&gt;&gt;&gt; X = d.keys()
&gt;&gt;&gt; Y = d.values()
&gt;&gt;&gt; print X
['1', '0']
&gt;&gt;&gt; print Y
['mGw', 'azh22']
</snippet></ROW><ROW><id>19203904</id><snippet>re.findall()</snippet></ROW><ROW><id>19203904</id><snippet>ws.cell(1,i+1).value = "The price of" + symbolslist[i] + " is " + ','.join(price)
</snippet></ROW><ROW><id>19203904</id><snippet>ws.cell(1,i+1).value = "The price of" + symbolslist[i] + " is " + price[0]
</snippet></ROW><ROW><id>19203904</id><snippet>import urllib
from bs4 import BeautifulSoup

for symbol in symbolslist:
    url = "http://finance.yahoo.com/q?s={}&amp;q1=1".format(symbol)
    response = urllib.urlopen(url)
    soup = BeautifulSoup(response, from_encoding=response.headers.getparam('charset'))
    price = soup.find('span', id='yfs_l84_' + symbol).text
    text = "The price of {} is {}".format(symbol, price)
    print text
    ws.cell(1,i+1).value = text
</snippet></ROW><ROW><id>19203904</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; symbolslist = ["aapl","spy","goog","nflx"] 
&gt;&gt;&gt; for symbol in symbolslist:
...     url = "http://finance.yahoo.com/q?s={}&amp;q1=1".format(symbol)
...     response = urllib.urlopen(url)
...     soup = BeautifulSoup(response, from_encoding=response.headers.getparam('charset'))
...     price = soup.find('span', id='yfs_l84_' + symbol).text
...     text = "The price of {} is {}".format(symbol, price)
...     print text
... 
The price of aapl is 483.03
The price of spy is 168.89
The price of goog is 872.35
The price of nflx is 327.26
</snippet></ROW><ROW><id>19203927</id><snippet>vim</snippet></ROW><ROW><id>19203927</id><snippet>screen</snippet></ROW><ROW><id>19203927</id><snippet>tmux</snippet></ROW><ROW><id>19203927</id><snippet>vim</snippet></ROW><ROW><id>19203927</id><snippet>screen</snippet></ROW><ROW><id>19203927</id><snippet>inotifywatch</snippet></ROW><ROW><id>19203927</id><snippet>fswatch</snippet></ROW><ROW><id>19203927</id><snippet>import os
import subprocess
import sys
import time

scripts = sys.argv[1:]
mtimes = {script: os.stat(script).st_mtime for script in scripts}
while True:
    for script in scripts:
        mtime = os.stat(script).st_mtime
        if mtime != mtimes[script]:
            subprocess.call([script], shell=True)
            mtimes[script] = mtime
    time.sleep(250)
</snippet></ROW><ROW><id>19203927</id><snippet>$ screen
$ python watch.py myscript.py
$ ^AS^A&lt;Tab&gt;^A^C
$ vim myscript.py
</snippet></ROW><ROW><id>19204033</id><snippet>lambda</snippet></ROW><ROW><id>19204033</id><snippet>def</snippet></ROW><ROW><id>19204033</id><snippet>def create_multiplier(x):
    def inner_function(y):
        return x*y
    return inner_function
</snippet></ROW><ROW><id>19204033</id><snippet>y*x</snippet></ROW><ROW><id>19204033</id><snippet>x*y</snippet></ROW><ROW><id>19204094</id><snippet>javascript</snippet></ROW><ROW><id>19204094</id><snippet>main</snippet></ROW><ROW><id>19204094</id><snippet>handlers:
- url: /javascript
  static_dir: javascript
- url: .*
  script: main.app
</snippet></ROW><ROW><id>19204230</id><snippet>patch</snippet></ROW><ROW><id>19204230</id><snippet>patch</snippet></ROW><ROW><id>19204230</id><snippet># mod_a.py
import urllib2

def myfunc():
    opened_url = urllib2.urlopen()
    return opened_url.read()
</snippet></ROW><ROW><id>19204230</id><snippet># test.py
from mock import patch, Mock
import mod_a

@patch('mod_a.urllib2.urlopen')
def mytest(mock_urlopen):
    a = Mock()
    a.read.side_effect = ['resp1', 'resp2']
    mock_urlopen.return_value = a
    res = mod_a.myfunc()
    print res
    assert res == 'resp1'

    res = mod_a.myfunc()
    print res
    assert res == 'resp2'

mytest()
</snippet></ROW><ROW><id>19204230</id><snippet>$ python test.py
resp1
resp2
</snippet></ROW><ROW><id>19204424</id><snippet>pip install --user some_package
</snippet></ROW><ROW><id>19204636</id><snippet>resource</snippet></ROW><ROW><id>19204636</id><snippet>getrusage</snippet></ROW><ROW><id>19204636</id><snippet>time</snippet></ROW><ROW><id>19204815</id><snippet>abc123def</snippet></ROW><ROW><id>19204815</id><snippet>Sub Macro2()
    With ActiveCell.Characters(Start:=1, Length:=3).Font  'Applies to the first 3 characters
        .Name = "Calibri"
        .FontStyle = "Regular"
        .Size = 11
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontMinor
    End With
    With ActiveCell.Characters(Start:=4, Length:=3).Font 'Applies to the middle 3 characters
        .Name = "Calibri"
        .FontStyle = "Regular"
        .Size = 11
        .Strikethrough = False
        .Superscript = True
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontMinor
    End With
    With ActiveCell.Characters(Start:=7, Length:=3).Font 'Applies to the last 3 characters
        .Name = "Calibri"
        .FontStyle = "Regular"
        .Size = 11
        .Strikethrough = False
        .Superscript = False
        .Subscript = False
        .OutlineFont = False
        .Shadow = False
        .Underline = xlUnderlineStyleNone
        .ThemeColor = xlThemeColorLight1
        .TintAndShade = 0
        .ThemeFont = xlThemeFontMinor
    End With
End Sub
</snippet></ROW><ROW><id>19204815</id><snippet>Sub Macro2()
    With ActiveCell.Characters(Start:=4, Length:=3).Font
        .Superscript = False
    End With
End Sub
</snippet></ROW><ROW><id>19204815</id><snippet>.Characters</snippet></ROW><ROW><id>19204815</id><snippet>ActiveCell.Characters(Start:=4, Length:=3).Font
</snippet></ROW><ROW><id>19204815</id><snippet>.Font.Superscript</snippet></ROW><ROW><id>19204815</id><snippet>True</snippet></ROW><ROW><id>19204815</id><snippet>Start</snippet></ROW><ROW><id>19204815</id><snippet>Length</snippet></ROW><ROW><id>19204815</id><snippet>Sub ApplySuperscriptToNumbers()
Dim i As Long
Dim str As String
Dim rng As Range
Dim cl As Range

'## Generally should work on any contiguous "Selection" of cell(s)
Set rng = Range(Selection.Address)
'## Iterate over each cell in this selection
For Each cl In rng.Cells
    str = cl.Value
    '## Iterate over each character in the cell
    For i = 1 To Len(str)
        '## Check if this character is numeric
        If IsNumeric(Mid(str, i, 1)) Then
            '## Apply superscript to this 1 character
            cl.Characters(Start:=i, Length:=1).Font.Superscript = True
        End If
    Next
Next

End Sub
</snippet></ROW><ROW><id>19204868</id><snippet>setattr()</snippet></ROW><ROW><id>19204868</id><snippet>class Foo(object):
    def __init__(self, l):
        for k, v in l:
            setattr(self, k, v)
</snippet></ROW><ROW><id>19204868</id><snippet>l</snippet></ROW><ROW><id>19204868</id><snippet>k</snippet></ROW><ROW><id>19204868</id><snippet>Foo</snippet></ROW><ROW><id>19204868</id><snippet>self</snippet></ROW><ROW><id>19204868</id><snippet>v</snippet></ROW><ROW><id>19204868</id><snippet>l = [("first","foo"),("second","bar"),("anything","you get the point")]
bar = Foo(l)

print bar.first
#foo
print bar.second
#bar
print bar.anything
#you get the point
</snippet></ROW></DATA>