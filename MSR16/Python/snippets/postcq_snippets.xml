<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>15242123</id><snippet>(1 or 3) &gt; 2</snippet></ROW><ROW><id>15242123</id><snippet>(1 or 3)</snippet></ROW><ROW><id>15242123</id><snippet>1</snippet></ROW><ROW><id>15242123</id><snippet>and</snippet></ROW><ROW><id>15242123</id><snippet>or</snippet></ROW><ROW><id>15242123</id><snippet>1 &gt; 2</snippet></ROW><ROW><id>15242123</id><snippet>False</snippet></ROW><ROW><id>15242123</id><snippet>&gt;&gt;&gt; 1 &gt; 2 or 3 &gt; 2
True
</snippet></ROW><ROW><id>15242123</id><snippet>&gt;&gt;&gt; t = (1, 3)
&gt;&gt;&gt; any(el &gt; 2 for el in t)
True
</snippet></ROW><ROW><id>15242123</id><snippet>t</snippet></ROW><ROW><id>15242589</id><snippet>url(r'^', include('frontpage.urls', namespace="frontpage")),


urlpatterns = patterns('frontpage.views',
    url(r'^$', 'index', name='index'),
)
</snippet></ROW><ROW><id>15243355</id><snippet>self.set(value)</snippet></ROW><ROW><id>15243355</id><snippet>set()</snippet></ROW><ROW><id>15243355</id><snippet>class Animal(object):
    def interact(self):
        print('I am a {}, I say "{}"'.format(self.name(), self.speak()))

class Dog(Animal):
    def name(self):
        return 'dog'
    def speak(self):
        return 'woof'
</snippet></ROW><ROW><id>15243355</id><snippet>a.set()</snippet></ROW><ROW><id>15243355</id><snippet>class A(object):
    def set(self, value):
        print(value + 1)
    def set2(self, value):
        A.set(self, value)
</snippet></ROW><ROW><id>15243503</id><snippet>&gt;&gt;&gt; dir(__builtins__)
['ArithmeticError', 'AssertionError', 'AttributeError',
 ...  # a whole bunch of other Errors
 'abs', 'all', 'any',
 ...  # other builtins
 'type', 'vars', 'zip']
</snippet></ROW><ROW><id>15243503</id><snippet>__main__</snippet></ROW><ROW><id>15243503</id><snippet>sorted(__builtins__)</snippet></ROW><ROW><id>15244004</id><snippet>_ast</snippet></ROW><ROW><id>15244093</id><snippet>&gt;&gt;&gt; d = {'a': '1', 'c': '10', 'b': '8', 'e': '11', 'g': '3', 'f': '2'}
&gt;&gt;&gt; sorted(d, key=lambda i: int(d[i]))
['a', 'f', 'g', 'b', 'c', 'e']
</snippet></ROW><ROW><id>15244209</id><snippet>\b(?:[a-zA-Z0-9]\s){2,}
</snippet></ROW><ROW><id>15244209</id><snippet>A R U N</snippet></ROW><ROW><id>15244209</id><snippet>I</snippet></ROW><ROW><id>15244209</id><snippet>&gt;&gt;&gt; re.search(r'\b(?:[a-zA-Z0-9]\s){2,}', 'My name is arun its A R U N jayapal. I am going to London.').group()
'A R U N '
</snippet></ROW><ROW><id>15245458</id><snippet>n</snippet></ROW><ROW><id>15245458</id><snippet>2n</snippet></ROW><ROW><id>15245458</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([1.,2.,3.,4.])
&gt;&gt;&gt; a
array([ 1.,  2.,  3.,  4.])
&gt;&gt;&gt; a.dtype
dtype('float64')
&gt;&gt;&gt; a.dtype = complex
&gt;&gt;&gt; a
array([ 1.+2.j,  3.+4.j])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15245458</id><snippet>dtype</snippet></ROW><ROW><id>15245458</id><snippet>float</snippet></ROW><ROW><id>15245458</id><snippet>&gt;&gt;&gt; a = np.array([1,2,3,4])
&gt;&gt;&gt; a
array([1, 2, 3, 4])
&gt;&gt;&gt; a.dtype
dtype('int64')
&gt;&gt;&gt; a.dtype = complex
&gt;&gt;&gt; a
array([  4.94065646e-324 +9.88131292e-324j,
         1.48219694e-323 +1.97626258e-323j])
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15245458</id><snippet>np.dtype('complex64')</snippet></ROW><ROW><id>15245458</id><snippet>for x in range(dimX):
    for y in range(dimY):
        #2 floats, each 4 bytes, is one complex number
        trace=stream.readBytes(8*dimZ)
        a = np.frombuffer(trace,dtype=np.dtype('complex64'))
        data[x][y] = a
</snippet></ROW><ROW><id>15245458</id><snippet>numpy.frombuffer()</snippet></ROW><ROW><id>15245458</id><snippet>&gt;&gt;&gt; binary_string = struct.pack('2f', 1,2)
&gt;&gt;&gt; binary_string
'\x00\x00\x80?\x00\x00\x00@'
&gt;&gt;&gt; numpy.frombuffer(binary_string, dtype=np.dtype('complex64'))
array([ 1.+2.j], dtype=complex64)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15245458</id><snippet>numpy.frombuffer()</snippet></ROW><ROW><id>15245458</id><snippet>for x in range(dimX):
    data[x] = [np.frombuffer(stream.readBytes(8*dimZ), dtype=np.dtype('complex64')) for y in range(dimY)]
</snippet></ROW><ROW><id>15245458</id><snippet>data = [[np.frombuffer(stream.readBytes(8*dimZ), dtype=np.dtype('complex64'))
         for y in range(dimY)]
         for x in range(dimX)]
</snippet></ROW><ROW><id>15245784</id><snippet>sqrt(N)</snippet></ROW><ROW><id>15245784</id><snippet>sqrt(N)</snippet></ROW><ROW><id>15245784</id><snippet>i</snippet></ROW><ROW><id>15245784</id><snippet>sqrt(N)</snippet></ROW><ROW><id>15245784</id><snippet>N//i</snippet></ROW><ROW><id>15245784</id><snippet>import math
N = 600851475141
divisors = []
for i in xrange(1, int(math.sqrt(N))+1):
    if N % i == 0:
        divisors.extend(set((i, N//i)))
for d in sorted(divisors):
    print(d)
</snippet></ROW><ROW><id>15245784</id><snippet>1
3
11981
35943
16716787
50150361
200283825047
600851475141
</snippet></ROW><ROW><id>15245962</id><snippet>from collections import defaultdict, Counter

txt = open("fichier_a_compresser 1.txt").read()

counts = defaultdict(Counter)

for i in range(len(txt)-1):
    counts[txt[i]][txt[i+1]]+=1

for first, counter in counts.items():
    for second, count in counter.items():
        print '{} appears after the character {} {} times.'.format(second, first, count)
</snippet></ROW><ROW><id>15246115</id><snippet>\w</snippet></ROW><ROW><id>15246115</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>15246115</id><snippet>unicode</snippet></ROW><ROW><id>15246115</id><snippet>re.UNICODE</snippet></ROW><ROW><id>15246115</id><snippet>&gt;&gt;&gt; re.search(SearchStr, htmlString.decode('utf8'), re.UNICODE).groups()
(u'&lt;/dd&gt;&lt;dt&gt;', u'Fine, thank you.', u'Â ', u'&lt;/dt&gt;&lt;dd&gt;', u'Molt', u'b\xe9')
</snippet></ROW><ROW><id>15246741</id><snippet>sys.excepthook()</snippet></ROW><ROW><id>15246741</id><snippet>import sys

def myexcepthook(type, value, tb):
    dump(type, value, tb)

sys.excepthook = myexcepthook
</snippet></ROW><ROW><id>15246741</id><snippet>stderr</snippet></ROW><ROW><id>15246741</id><snippet>sys.__excepthook__</snippet></ROW><ROW><id>15246741</id><snippet>def myexcepthook(type, value, tb):
    dump(type, value, tb)
    sys.__excepthook__(type, value, tb)
</snippet></ROW><ROW><id>15246952</id><snippet>for i,v in enumerate(xrange(0,len(seq),13)):
    line = seq[v:v+13]
    out_line = ' '.join('{:&lt;3}'.format(single_to_tripple(part)) for part in line)
    print out_line
</snippet></ROW><ROW><id>15246952</id><snippet>out_line = ' '.join(single_to_tripple(part) for part in line)
</snippet></ROW><ROW><id>15247749</id><snippet>imp</snippet></ROW><ROW><id>15247749</id><snippet>[]</snippet></ROW><ROW><id>15247749</id><snippet>check_call</snippet></ROW><ROW><id>15247749</id><snippet>tfile</snippet></ROW><ROW><id>15247892</id><snippet>__init__</snippet></ROW><ROW><id>15247892</id><snippet>class BaseClass(object):
    def __init__(self, classtype):
        self._type = classtype

def ClassFactory(name, argnames, BaseClass=BaseClass):
    def __init__(self, **kwargs):
        for key, value in kwargs.items():
            # here, the argnames variable is the one passed to the
            # ClassFactory call
            if key not in argnames:
                raise TypeError("Argument %s not valid for %s" 
                    % (key, self.__class__.__name__))
            setattr(self, key, value)
        BaseClass.__init__(self, name[:-len("Class")])
    newclass = type(name, (BaseClass,),{"__init__": __init__})
    return newclass
</snippet></ROW><ROW><id>15247892</id><snippet>&gt;&gt;&gt; SpecialClass = ClassFactory("SpecialClass", "a b c".split())
&gt;&gt;&gt; s = SpecialClass(a=2)
&gt;&gt;&gt; s.a
2
&gt;&gt;&gt; s2 = SpecialClass(d=3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 8, in __init__
TypeError: Argument d not valid for SpecialClass
</snippet></ROW><ROW><id>15247892</id><snippet>name = "SpecialClass"
classes = {}
classes[name] = ClassFactory(name, params)
instance = classes[name](...)
</snippet></ROW><ROW><id>15247892</id><snippet>globals()</snippet></ROW><ROW><id>15247892</id><snippet>name = "SpecialClass"
globals()[name] = ClassFactory(name, params)
instance = SpecialClass(...)
</snippet></ROW><ROW><id>15248146</id><snippet>%</snippet></ROW><ROW><id>15248146</id><snippet>Submit()</snippet></ROW><ROW><id>15248146</id><snippet>Submit()</snippet></ROW><ROW><id>15248146</id><snippet>None</snippet></ROW><ROW><id>15248146</id><snippet>spss.Submit('SAVE OUTFILE = "%s".' % 
    os.path.join(wdir, "PrepareTableScript_%s.sav" % str(ver).zfill(2))
)
</snippet></ROW><ROW><id>15248224</id><snippet>{% static %}

&lt;link rel="stylesheet" type="text/css" href="{% static 'css/index.css' %}"/&gt;
</snippet></ROW><ROW><id>15248309</id><snippet>[i for i in range(100) if i &gt; 10 if i &lt; 50]
</snippet></ROW><ROW><id>15249568</id><snippet>CallWrapper</snippet></ROW><ROW><id>15249568</id><snippet>import Tkinter as tk
import traceback

class Catcher: 
    def __init__(self, func, subst, widget):
        self.func = func 
        self.subst = subst
        self.widget = widget
    def __call__(self, *args):
        try:
            if self.subst:
                args = apply(self.subst, args)
            return apply(self.func, args)
        except SystemExit, msg:
            raise SystemExit, msg
        except:
            traceback.print_exc(file=open('test.log', 'a'))

# ...
tk.CallWrapper = Catcher
b = tk.Button(master, text="OK", command=copydir)
b.pack()
master.mainloop()
</snippet></ROW><ROW><id>15249699</id><snippet>xlwt</snippet></ROW><ROW><id>15249699</id><snippet>python setup.py build
python setup.py install --prefix=${HOME}/.local
</snippet></ROW><ROW><id>15249699</id><snippet>.local</snippet></ROW><ROW><id>15249699</id><snippet>--user</snippet></ROW><ROW><id>15249699</id><snippet>xlwt</snippet></ROW><ROW><id>15249699</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15249699</id><snippet>export PYTHONPATH=${HOME}/.local/lib/python2.4/site-packages
</snippet></ROW><ROW><id>15249699</id><snippet>(ba)sh</snippet></ROW><ROW><id>15249699</id><snippet>python</snippet></ROW><ROW><id>15249699</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15249699</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15249699</id><snippet>$ echo $PYTHONPATH</snippet></ROW><ROW><id>15249699</id><snippet>export PYTHONPATH=${PYTHONPATH}:${HOME}/.local/lib/python2.4/site-packages
</snippet></ROW><ROW><id>15249727</id><snippet>df1['C'][df1['A'] &gt; 2] = "R"

   A  B  C
0  1  w  H
1  2  x  H
2  3  y  R
3  4  z  R
</snippet></ROW><ROW><id>15249816</id><snippet>list</snippet></ROW><ROW><id>15249816</id><snippet>index</snippet></ROW><ROW><id>15249816</id><snippet>lst = [1,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,0,3,1,0,1,3,0,3,0,3,1]
if lst[4] == 3:
    print('yes')
</snippet></ROW><ROW><id>15249816</id><snippet>list.index(3)</snippet></ROW><ROW><id>15249816</id><snippet>1</snippet></ROW><ROW><id>15249816</id><snippet>3</snippet></ROW><ROW><id>15249870</id><snippet>[exe]</snippet></ROW><ROW><id>15250194</id><snippet>my_urlfinder = re.compile(r'\s(http:\/\/(\S+.|)blah.com/users/(\d+)(\/|))')
</snippet></ROW><ROW><id>15250194</id><snippet>('http://blah.com/users/123', '', '123', '')
('http://blah.com/users/353', '', '353', '')
</snippet></ROW><ROW><id>15250277</id><snippet>query = Comment.objects.filter(project__user=person)
</snippet></ROW><ROW><id>15250664</id><snippet>import logging
logging.basicConfig(level=logging.DEBUG)
</snippet></ROW><ROW><id>15250693</id><snippet>td</snippet></ROW><ROW><id>15250693</id><snippet>cell_c</snippet></ROW><ROW><id>15250693</id><snippet>rows = table.findAll('tr')
for tr in rows:
    cols = tr.findAll('td')
    if 'cell_c' in cols[0]['class']:
        # currency row
        digital_code, letter_code, units, name, rate = [c.text for c in cols]
        print digital_code, letter_code, units, name, rate
</snippet></ROW><ROW><id>15250979</id><snippet>def scoring(self):
    self.score=self.score+1
    self.label.text = str(self.score)
    print (self.score)
</snippet></ROW><ROW><id>15251146</id><snippet>and</snippet></ROW><ROW><id>15251146</id><snippet>&amp;</snippet></ROW><ROW><id>15251146</id><snippet>if opg == 160 and opc == 129:
</snippet></ROW><ROW><id>15251146</id><snippet>&amp;</snippet></ROW><ROW><id>15251146</id><snippet>opg == 160 &amp; opc == 129</snippet></ROW><ROW><id>15251146</id><snippet>opg == (160 &amp; opc) == 129</snippet></ROW><ROW><id>15251146</id><snippet>for line in response.body.splitlines():
    if line:
        line = map(int, line.split())
        opg, opc, value = line[2], line[3], line[5]
        if opg == 160 and opc == 129:
            ret['success'] = "valore: %s" % (value)
            self.write(tornado.escape.json_encode(ret))
</snippet></ROW><ROW><id>15251430</id><snippet>.split()</snippet></ROW><ROW><id>15251430</id><snippet>.startswith()</snippet></ROW><ROW><id>15251430</id><snippet>import subprocess

output = subprocess.check_output(['chkconfig', '--list'])

for line in output.splitlines():
    if line.startswith('httpd_'):
        print line.split()[0]
</snippet></ROW><ROW><id>15251430</id><snippet>Popen()</snippet></ROW><ROW><id>15251430</id><snippet>output = subprocess.Popen(['chkconfig', '--list'], stdout=subprocess.PIPE).stdout

for line in output:
    if line.startswith('httpd_'):
        print line.split()[0]
</snippet></ROW><ROW><id>15251931</id><snippet>infile = open(source,'r')

file_contents_lines = infile.readlines()

for line in file_contents_lines:
    print line
</snippet></ROW><ROW><id>15252012</id><snippet>&gt;&gt;&gt; !cat ragged.csv
1,2,3
1,2,3,4
1,2,3,4,5
1,2
1,2,3,4
&gt;&gt;&gt; my_cols = ["A", "B", "C", "D", "E"]
&gt;&gt;&gt; pd.read_csv("ragged.csv", names=my_cols, engine='python')
   A  B   C   D   E
0  1  2   3 NaN NaN
1  1  2   3   4 NaN
2  1  2   3   4   5
3  1  2 NaN NaN NaN
4  1  2   3   4 NaN
</snippet></ROW><ROW><id>15252092</id><snippet>time</snippet></ROW><ROW><id>15252092</id><snippet>datetime.time</snippet></ROW><ROW><id>15252092</id><snippet>time</snippet></ROW><ROW><id>15252092</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; import time
&gt;&gt;&gt; ref = datetime.time(10, 20)
&gt;&gt;&gt; isinstance(ref, time)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: isinstance() arg 2 must be a class, type, or tuple of classes and types
&gt;&gt;&gt; isinstance(ref, datetime.time)
True
</snippet></ROW><ROW><id>15252092</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; dthandler = lambda obj: obj.isoformat() if isinstance(obj, datetime.time) else None
&gt;&gt;&gt; json.dumps(ref, default=dthandler)
'"10:20:00"'
</snippet></ROW><ROW><id>15252092</id><snippet>TypeError</snippet></ROW><ROW><id>15252092</id><snippet>None</snippet></ROW><ROW><id>15252092</id><snippet>def dthandler(o):
    try:
        return o.isoformat()
    except AttributeError:
        raise TypeError
</snippet></ROW><ROW><id>15252404</id><snippet>.pages</snippet></ROW><ROW><id>15252404</id><snippet>.ppt</snippet></ROW><ROW><id>15252404</id><snippet>.pages</snippet></ROW><ROW><id>15252404</id><snippet>.doc</snippet></ROW><ROW><id>15252404</id><snippet>.rtf</snippet></ROW><ROW><id>15252404</id><snippet>.pages</snippet></ROW><ROW><id>15252404</id><snippet>"SLDocumentTypeRichText"</snippet></ROW><ROW><id>15252404</id><snippet>"Microsoft Word 97 - 2004 document"</snippet></ROW><ROW><id>15253040</id><snippet>subprocess</snippet></ROW><ROW><id>15253040</id><snippet>check_call</snippet></ROW><ROW><id>15253040</id><snippet>import subprocess

command=["ls", "-l"]

try:
  exit_code=subprocess.check_call(command)
  # Do something for successful execution here
  print("Program run")
except subprocess.CalledProcessError as e:
  print "Program exited with exit code", e.returncode
  # Do something for error here
</snippet></ROW><ROW><id>15253040</id><snippet>import subprocess
import os

command=["ls", "-l"]

try:
  exit_code=subprocess.check_call(command, stdout=open(os.devnull, "w"))
  # Do something for successful execution here
  print("Program run")
except subprocess.CalledProcessError as e:
  print "Program exited with exit code", e.returncode
  # Do something for error here
</snippet></ROW><ROW><id>15253040</id><snippet>import subprocess
import os

command=["grep", "mystring", "/home/cwgem/testdir/test.txt"]

try:
  exit_code=subprocess.check_call(command, stdout=open(os.devnull, "w"))
  # Do something for successful execution here
  print("Program run")
except subprocess.CalledProcessError as e:
  print "Program exited with exit code", e.returncode
  # Do something for error here
</snippet></ROW><ROW><id>15253040</id><snippet>$ python process_exitcode_test.py
Program exited with exit code 1
</snippet></ROW><ROW><id>15253626</id><snippet>__eq__</snippet></ROW><ROW><id>15253626</id><snippet>__ne__</snippet></ROW><ROW><id>15253626</id><snippet>node in prev</snippet></ROW><ROW><id>15253626</id><snippet>False</snippet></ROW><ROW><id>15253626</id><snippet>node</snippet></ROW><ROW><id>15253626</id><snippet>object</snippet></ROW><ROW><id>15253626</id><snippet>class Board(object):
    def __init__(self, matrix, whitepos=None):
        self.matrix = matrix
        self.whitepos = whitepos
        if not whitepos:
            for y in xrange(3):
                for x in xrange(3):
                    if board[y][x] == 0:
                        self.whitepos = (x, y)
    def __eq__(self, o):
        # Note that comparing whitepos is not strictly necessary; but I left 
        # it in as a safety measure in case the board state gets corrupted.
        # If speed becomes an issue, take it out.
        return (self.matrix, self.whitepos) == (o.matrix, o.whitepos)

class Node(object):
    def __init__(self, board, parent):
        self.state = board
        self.parent = parent
        if not parent:
            self.g = 0
        else:
            self.g = parent.g + 1
        self.h = heuristic(board)

    def test_goal(self):
        return is_final_state(self.state)

    def expand(self):
        children = []
        b = self.state
        x, y = get_whitepos(b)
        if x &gt; 0:
            children.append(Node(move(b, x, y, -1, 0), self))
        if x &lt; 2:
            children.append(Node(move(b, x, y, +1, 0), self))
        if y &gt; 0:
            children.append(Node(move(b, x, y, 0, -1), self))
        if y &lt; 2:
            children.append(Node(move(b, x, y, 0, +1), self))
        return children

    def __eq__(self, o):
        # Note that you don't have to compare parents, since your goal
        # is to eliminate ANY nodes with the same position.
        return self.state == o.state

class Solution(object):
    def __init__(self, node, mem_needed, steps):
        self.node = node
        self.mem_needed = mem_needed
        self.iterations = steps

    def inc(self, other):
        self.node = other.node
        self.mem_needed = max(self.mem_needed, other.mem_needed)
        self.iterations += other.iterations

#...

print_solution("bl", bl_search(board))
# I commented out all but the first search to avoid cluttering up the output.
</snippet></ROW><ROW><id>15253626</id><snippet>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20

* bl
moves: 20
    [[1, 2, 3], [8, 0, 4], [7, 6, 5]]
    [[1, 2, 3], [8, 6, 4], [7, 0, 5]]
    [[1, 2, 3], [8, 6, 4], [0, 7, 5]]
    [[1, 2, 3], [0, 6, 4], [8, 7, 5]]
    [[1, 2, 3], [6, 0, 4], [8, 7, 5]]
    [[1, 0, 3], [6, 2, 4], [8, 7, 5]]
    [[0, 1, 3], [6, 2, 4], [8, 7, 5]]
    [[6, 1, 3], [0, 2, 4], [8, 7, 5]]
    [[6, 1, 3], [2, 0, 4], [8, 7, 5]]
    [[6, 1, 3], [2, 7, 4], [8, 0, 5]]
    [[6, 1, 3], [2, 7, 4], [8, 5, 0]]
    [[6, 1, 3], [2, 7, 0], [8, 5, 4]]
    [[6, 1, 0], [2, 7, 3], [8, 5, 4]]
    [[6, 0, 1], [2, 7, 3], [8, 5, 4]]
    [[6, 7, 1], [2, 0, 3], [8, 5, 4]]
    [[6, 7, 1], [2, 5, 3], [8, 0, 4]]
    [[6, 7, 1], [2, 5, 3], [8, 4, 0]]
    [[6, 7, 1], [2, 5, 0], [8, 4, 3]]
    [[6, 7, 0], [2, 5, 1], [8, 4, 3]]
    [[6, 0, 7], [2, 5, 1], [8, 4, 3]]
    [[6, 5, 7], [2, 0, 1], [8, 4, 3]]
nodes needed: 44282
iterations:   59930
</snippet></ROW><ROW><id>15253674</id><snippet>subprocess.call()</snippet></ROW><ROW><id>15253674</id><snippet>SCONSFLAGS</snippet></ROW><ROW><id>15253674</id><snippet>variable=value</snippet></ROW><ROW><id>15253683</id><snippet>NameError: global name 'ea' is not defined
</snippet></ROW><ROW><id>15253683</id><snippet>onsubmit</snippet></ROW><ROW><id>15253683</id><snippet>def onsubmit():
    a=v.get()
    text.insert(INSERT, a)
</snippet></ROW><ROW><id>15253720</id><snippet>lxml.html</snippet></ROW><ROW><id>15253720</id><snippet>from lxml import html

tree = html.parse("http://www.rte.ie/player/ie/search/?q=news")
for article in tree.xpath('//article[@class="search-result clearfix"]'):
    select = lambda expr: article.cssselect(expr)[0]
    title = select(".search-programme-title")
    info = dict(
        icon_url=select("img.thumbnail").get('src'),
        name=title.text_content(),
        stream=title.find('a').get('href'),
        date=select(".search-programme-episodes").text_content(),
        short=select(".search-programme-description").text_content(),
        channel=select(".search-channel-icon").text_content())
    print(info)
</snippet></ROW><ROW><id>15253720</id><snippet>{'short': 'Ivan and Sean talk to future basketball sensation Julian Newman and the News Dudes are in the loft with some crazy news stories.', 'stream': '/player/ru/show/10117771/', 'name': 'elev8', 'date': 'Tue 05 Mar 2013', 'icon_url': 'http://img.rasset.ie/0005d4bf-261.jpg', 'channel': 'RTÃ 2'}
{'short': "The One O'Clock News followed by Weather.", 'stream': '/player/ru/show/10118015/', 'name': 'One News', 'date': 'Wed 06 Mar 2013', 'icon_url': 'http://img.rasset.ie/000716b2-261.jpg', 'channel': 'RTÃ 1'}
...
</snippet></ROW><ROW><id>15253772</id><snippet>regexp_email</snippet></ROW><ROW><id>15253772</id><snippet>r'[\w]+@[\w]+[.][\w]+[\w.]+|[\w]+\(at\)[\w]+[.][\w]+[\w.]+|[\w]+\sat\s[\w-]+\sdot\s[\w]+\sdot\s[\w]+'
</snippet></ROW><ROW><id>15253772</id><snippet>[]</snippet></ROW><ROW><id>15253772</id><snippet>\w</snippet></ROW><ROW><id>15253772</id><snippet>\w</snippet></ROW><ROW><id>15253772</id><snippet>r'\w+@\w+[.]\w+[\w.]+|\w+\(at\)\w+[.]\w+[\w.]+|\w+\sat\s[\w-]+\sdot\s\w+\sdot\s\w+'
</snippet></ROW><ROW><id>15253781</id><snippet>self.attrs['class'] = 'someclass %s' % self.attrs.get('class','')
</snippet></ROW><ROW><id>15253781</id><snippet>'someclass '
</snippet></ROW><ROW><id>15253781</id><snippet>'class'</snippet></ROW><ROW><id>15253984</id><snippet>p.clf</snippet></ROW><ROW><id>15253984</id><snippet>def simpledist(speclist,totalbugs,a):
    data = [float(spec.pop)/float(totalbugs) for spec in speclist]
    p.clf()
    p.hist(data)
    p.savefig('/Home/s1215235/Documents/python/newfolder/' + str(a) + '.png')
</snippet></ROW><ROW><id>15253984</id><snippet>p</snippet></ROW><ROW><id>15253984</id><snippet>matplotlib.pyplot</snippet></ROW><ROW><id>15253984</id><snippet>figure</snippet></ROW><ROW><id>15253984</id><snippet> p.gca().cla()
</snippet></ROW><ROW><id>15254225</id><snippet>&gt;&gt;&gt; a = '345674655'
&gt;&gt;&gt; [a[i:i+3] for i in range(0,len(a),3)]
['345', '674', '655']
</snippet></ROW><ROW><id>15254225</id><snippet>' '.join</snippet></ROW><ROW><id>15254225</id><snippet>&gt;&gt;&gt; ' '.join([a[i:i+3] for i in range(0,len(a),3)])
'345 674 655'
</snippet></ROW><ROW><id>15254225</id><snippet>&gt;&gt;&gt; [''.join(x) for x in zip(*[iter(a)]*3)]
['345', '674', '655']
</snippet></ROW><ROW><id>15254225</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>15254225</id><snippet>itertools.zip_longest</snippet></ROW><ROW><id>15254225</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; [''.join(x) for x in itertools.izip_longest(*[iter(a)]*3,fillvalue=' ')]
['345', '674', '655']
</snippet></ROW><ROW><id>15254540</id><snippet>sudo pip install virtualenv
(or, sudo easy_install virtualenv if you donât use pip)
(or, easy_install --install-dir ~/site-packages/ virtualenv on a shared host)
mkdir ~/virtualenvs   (a directory for your isolated environments)
virtualenv ~/virtualenvs/mysite.com --no-site-packages
(--no-site-packages isolates your environment from the main site-packages directory)
cd ~/virtualenvs/mysite.com/bin
source activate  (activates your new environment)
</snippet></ROW><ROW><id>15254608</id><snippet>import subprocess
import json
import sys
import os

def php(script_path, argument):
    p = subprocess.Popen(['php', script_path, argument], stdout=subprocess.PIPE)
    result = p.communicate()[0]
    return result

image_dimensions_json =str(php("get_image_size.php", image_location_relative[1:]))
dic = json.loads(image_dimensions_json)
print str(dic["0"]) + "|" + str(dic["1"])
</snippet></ROW><ROW><id>15254608</id><snippet>[1:]</snippet></ROW><ROW><id>15254608</id><snippet>&lt;?php

echo(json_encode(getimagesize($argv[1])));

?&gt;
</snippet></ROW><ROW><id>15254608</id><snippet>echo</snippet></ROW><ROW><id>15254608</id><snippet>print_r</snippet></ROW><ROW><id>15254646</id><snippet>// middleware/__init__.py
class ArduinoMiddleware:

    def __init__(self):
        self.serial = serial.Serial('/dev/ttyUSB0', 9600)
        time.sleep(1.5)

    def process_request(self, request):
        request.serialWrite = self.serialWrite

    def serialWrite(self, msg):
        try:
            self.serial.write(msg)
            return "Running Animation"
        except:
            return "Failed to communicate with cube"

// ajax.py
@dajaxice_register
def animate(request, data):
    msg = request.serialWrite(str(data))
    return simplejson.dumps({'message':msg})

// settings.py
...
MIDDLEWARE_CLASSES = (
  'middleware.ArduinoMiddleware',
  ...
)
</snippet></ROW><ROW><id>15254646</id><snippet>manage.py runserver</snippet></ROW><ROW><id>15254695</id><snippet>ipythonrc</snippet></ROW><ROW><id>15254793</id><snippet>degree_of_contact = 0
for tmp1, tmp2 in [(p1, p2), (p2, p1)]:
    for x,y in tmp1:
        if point_inside_polygon(x, y, tmp2):
            degree_of_contact += 1
</snippet></ROW><ROW><id>15255195</id><snippet>import datetime

# Create a user to test with
@app.before_first_request
def create_user():
    user_datastore.create_user(
        email='me@mydomain.com',
        password=utils.encrypt_password('password'),
        confirmed_at=datetime.datetime.now())
</snippet></ROW><ROW><id>15255502</id><snippet>&gt;&gt;&gt; md5sum('photo.jpg')
'89dd603a0ce14750799a5144a56fbc12'
&gt;&gt;&gt; image = pyexiv2.ImageMetadata('photo.jpg')
&gt;&gt;&gt; image.read()
&gt;&gt;&gt; image['Exif.Image.ImageDescription'] = '%030x' % random.randrange(256**15)
&gt;&gt;&gt; image.write()
&gt;&gt;&gt; md5sum('photo.jpg')
'426cc91835e7f4f5e92c5a48850adc05'
</snippet></ROW><ROW><id>15255599</id><snippet>makeHTMLTags</snippet></ROW><ROW><id>15255599</id><snippet>makeHTMLTags</snippet></ROW><ROW><id>15255599</id><snippet>from pyparsing import makeHTMLTags

fcTag = makeHTMLTags("fc")[0]
tagAttrs = 'dt s tx tn'.split()

for match in fcTag.searchString(htmltext):
    print ' '.join("%s:%s" % (attr,match[attr]) for attr in tagAttrs)
</snippet></ROW><ROW><id>15255599</id><snippet>dt:2013-03-07 s:d220 tx:16 tn:11
dt:2013-03-08 s:d220 tx:15 tn:10
dt:2013-03-09 s:d220 tx:15 tn:10
</snippet></ROW><ROW><id>15255599</id><snippet>dtArray = []
sArray = []
txArray = []
tnArray = []
for match in fcTag.searchString(htmltext):
    dtArray.append(match.dt)
    sArray.append(match.s)
    txArray.append(match.tx)
    tnArray.append(match.tn)
    print ' '.join("%s:%s" % (attr,match[attr]) for attr in tagAttrs)
</snippet></ROW><ROW><id>15255599</id><snippet>dtArray[i]</snippet></ROW><ROW><id>15255599</id><snippet>sArray[i]</snippet></ROW><ROW><id>15255599</id><snippet>fcArray = []
for match in fcTag.searchString(htmltext):
    fcArray.append(dict((attr,match[attr]) for attr in tagAttrs))
</snippet></ROW><ROW><id>15255599</id><snippet>fc = fcArray[i]</snippet></ROW><ROW><id>15255599</id><snippet>fc['dt']</snippet></ROW><ROW><id>15255599</id><snippet>fc['s']</snippet></ROW><ROW><id>15255599</id><snippet>from collections import namedtuple
FCData = namedtuple("FCData", tagAttrs)

fcArray = []
for match in fcTag.searchString(htmltext):
    fcArray.append(FCData(*(match[attr] for attr in tagAttrs)))
</snippet></ROW><ROW><id>15255599</id><snippet>fc = fcArray[i]</snippet></ROW><ROW><id>15255599</id><snippet>fc.dt</snippet></ROW><ROW><id>15255599</id><snippet>fc.s</snippet></ROW><ROW><id>15255599</id><snippet>fc</snippet></ROW><ROW><id>15255599</id><snippet>dt</snippet></ROW><ROW><id>15255599</id><snippet>fc.dt = "new datetime value"</snippet></ROW><ROW><id>15255599</id><snippet>class FCData(object): pass

fcArray = []
for match in fcTag.searchString(htmltext):
    fc = FCdata()
    for attr in tagAttrs:
        setattr(fc, attr, match[attr])
    fcArray.append(fc)
</snippet></ROW><ROW><id>15255599</id><snippet>fc = fcArray[i]</snippet></ROW><ROW><id>15255599</id><snippet>fc.dt</snippet></ROW><ROW><id>15255599</id><snippet>fc.dt = "new datetime value"</snippet></ROW><ROW><id>15255599</id><snippet>fcArray = fcTag.searchString(htmltext)
</snippet></ROW><ROW><id>15255599</id><snippet>ParseResults</snippet></ROW><ROW><id>15255599</id><snippet>fc = fcArray[i]</snippet></ROW><ROW><id>15255599</id><snippet>dt</snippet></ROW><ROW><id>15255599</id><snippet>fc.dt</snippet></ROW><ROW><id>15255599</id><snippet>fc['dt']</snippet></ROW><ROW><id>15255599</id><snippet>fc.dt</snippet></ROW><ROW><id>15255599</id><snippet>fc['dt']</snippet></ROW><ROW><id>15255899</id><snippet>matrix</snippet></ROW><ROW><id>15255899</id><snippet>np.dot</snippet></ROW><ROW><id>15255899</id><snippet>def f(array1, array2) :
    return np.dot(array1, array2)
</snippet></ROW><ROW><id>15255899</id><snippet>&gt;&gt;&gt; array_a1 = np.array([1, 2])
&gt;&gt;&gt; array_a2 = np.array([3, 4])
&gt;&gt;&gt; array_a = np.array([array_a1, array_a2])
&gt;&gt;&gt; array_a
array([[1, 2],
       [3, 4]])
&gt;&gt;&gt; array_b = np.array([[5, 6], [7, 8]])
&gt;&gt;&gt; array_b
array([[5, 6],
       [7, 8]])
&gt;&gt;&gt; f(array_a, array_b)
array([[19, 22],
       [43, 50]])
&gt;&gt;&gt; np.sum(f(array_a, array_b), axis=0)
array([62, 72])
</snippet></ROW><ROW><id>15255899</id><snippet>&gt;&gt;&gt; array_a1 = np.array([[1, 2], [3, 4]])
&gt;&gt;&gt; array_a2 = np.array([[5, 6], [7, 8]])
&gt;&gt;&gt; array_a = np.array([array_a1, array_a2])
&gt;&gt;&gt; array_b = np.array([[9, 10], [11, 12]])
&gt;&gt;&gt; np.sum(f(array_a, array_b), axis=0)
array([[142, 156],
       [222, 244]])
</snippet></ROW><ROW><id>15255919</id><snippet>import datetime as dt 

def draw_fft(self):
    ...
    outputfilename = 'output_{}.csv'.format( dt.datetime.now().strftime('%Y%m%d%H%M%S') )
    np.savetxt(outputfilename, output, delimiter=',')
</snippet></ROW><ROW><id>15256035</id><snippet>1000-20%
1000-(20% of 1000) 
1000-(20/100 * 1000)
1000-(0.2 * 1000)     # this is what your code should look like
1000-200 = 800
</snippet></ROW><ROW><id>15256035</id><snippet>1000-(0.2 * 1000)</snippet></ROW><ROW><id>15256035</id><snippet>1000 * (1 - 0.2)</snippet></ROW><ROW><id>15256035</id><snippet>1000 * 0.8</snippet></ROW><ROW><id>15256366</id><snippet>names</snippet></ROW><ROW><id>15256366</id><snippet>id</snippet></ROW><ROW><id>15256366</id><snippet>6</snippet></ROW><ROW><id>15256366</id><snippet>exp</snippet></ROW><ROW><id>15256366</id><snippet>3</snippet></ROW><ROW><id>15256366</id><snippet>rs =pd.read_csv('rs.txt', header="infer", sep="\t",  names=['exp','fov','cycle', 'color', 'values'], index_col=2
</snippet></ROW><ROW><id>15256383</id><snippet>setup.py</snippet></ROW><ROW><id>15256383</id><snippet>__init__.py</snippet></ROW><ROW><id>15256383</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>15256383</id><snippet>__name__</snippet></ROW><ROW><id>15256383</id><snippet>__main__</snippet></ROW><ROW><id>15256392</id><snippet>result</snippet></ROW><ROW><id>15256392</id><snippet>&lt;form&gt;</snippet></ROW><ROW><id>15256392</id><snippet>target="result"</snippet></ROW><ROW><id>15256392</id><snippet>form submit</snippet></ROW><ROW><id>15256645</id><snippet>import scipy # numpy could work too
from functools import wraps
def asarray_strictnumeric( obj ):
    ''' only convert if the result is a numerical array. '''
    tmp=scipy.asarray(obj)
    if tmp.dtype.kind in 'iufc':
        return tmp
    else:
        return obj

def array_args(f):
    ''' Decorator: 
        - converts numerical positional arguments to arrays,
        - leaves non-numerical positional arguments alone,
        - leaves all keywords alone.
    '''
    @wraps(f)
    def wrapper(*args, **kwds):
        args=[asarray_strictnumeric(x) for x in args]
        return f( *args, **kwds )
    return wrapper 
</snippet></ROW><ROW><id>15256828</id><snippet>which='both'</snippet></ROW><ROW><id>15256828</id><snippet>figure()
ax = gca()

ax.set_yscale('log')
ax.spines['left'].set_color('#FF9000')
ax.yaxis.label.set_color('#FF9000')

ax.tick_params(axis='y', colors='#FF9000', width=5, which='both')
</snippet></ROW><ROW><id>15256828</id><snippet>tick_params</snippet></ROW><ROW><id>15256839</id><snippet>locals()</snippet></ROW><ROW><id>15256839</id><snippet>vars()</snippet></ROW><ROW><id>15256839</id><snippet>dict</snippet></ROW><ROW><id>15256855</id><snippet>In [105]: def f1(f):
   .....:     print 'hi'
   .....:     return f
   .....: 

In [106]: def f2():
   .....:     print 'hello'
   .....:     

In [107]: f1(f2)
hi
Out[107]: &lt;function __main__.f2&gt;
</snippet></ROW><ROW><id>15256855</id><snippet>In [108]: f1(f2())
hello
hi
</snippet></ROW><ROW><id>15256855</id><snippet>f2</snippet></ROW><ROW><id>15256855</id><snippet>f1</snippet></ROW><ROW><id>15257148</id><snippet>glob.glob('/home/*/*/')
</snippet></ROW><ROW><id>15257148</id><snippet>glob.glob('/home/*/*')
</snippet></ROW><ROW><id>15257579</id><snippet>1.  ^([^_]+)_
2.  _([^_]+)_ 
3.  ^[^_]_
</snippet></ROW><ROW><id>15257686</id><snippet>cc</snippet></ROW><ROW><id>15257686</id><snippet>final_grid = np.empty((nrows,ncols))
for ii in xrange(len(data)):
    final_grid[row[ii,:],col[ii,:]] = data[ii]
</snippet></ROW><ROW><id>15257686</id><snippet>final_grid</snippet></ROW><ROW><id>15257686</id><snippet>row</snippet></ROW><ROW><id>15257686</id><snippet>col</snippet></ROW><ROW><id>15257777</id><snippet>$ /usr/bin/libreoffice --headless --invisible -convert-to ods /home/cwgem/Downloads/QTL_Sample_data.xls 
convert /home/cwgem/Downloads/QTL_Sample_data.xls -&gt; /home/cwgem/QTL_Sample_data.ods using OpenDocument Spreadsheet Flat XML
$ /usr/bin/libreoffice --headless --invisible -convert-to xls /home/cwgem/QTL_Sample_data.ods 
convert /home/cwgem/QTL_Sample_data.ods -&gt; /home/cwgem/QTL_Sample_data.xls using
</snippet></ROW><ROW><id>15257851</id><snippet>os.walk()</snippet></ROW><ROW><id>15257851</id><snippet>collections.Counter()</snippet></ROW><ROW><id>15257851</id><snippet>import os
from collections import Counter

path = '/the/path/to/the/I want/to/count'
counts = Counter(fname[:2] for _, _, files in os.walk(path) for fname in files)
for initials, count in counts.most_common():
    print '{}: {:&gt;20}'.format(initials, count)
</snippet></ROW><ROW><id>15257851</id><snippet>os.listdir()</snippet></ROW><ROW><id>15257851</id><snippet>os.path.isfile()</snippet></ROW><ROW><id>15257851</id><snippet>counts = Counter(fname[:2] for fname in os.listdir(path) if os.path.isfile(os.path.join(path, fname)))
</snippet></ROW><ROW><id>15257851</id><snippet>isfile()</snippet></ROW><ROW><id>15257851</id><snippet>counts = Counter(fname[:2] for fname in os.listdir(path) if fname.endswith('.pdf'))
</snippet></ROW><ROW><id>15257855</id><snippet>hand</snippet></ROW><ROW><id>15257855</id><snippet>hand</snippet></ROW><ROW><id>15257855</id><snippet>hand</snippet></ROW><ROW><id>15257855</id><snippet>def is_valid_word(hand, word, wordlist):
    hand_cp = dict(hand)
    for letter in word:
        if hand_cp.get(letter):
            # The letter is in our hand, so "use it up".
            hand_cp[letter] = hand_cp[letter] - 1
        else:
            # The letter isn't in our hand, so the word isn't valid.
            return False

    # If we can make the word, now make sure it's a real word:
    # (If wordlist is long, you might want to sort it and do a real search)
    if word not in wordlist: 
        return False

    # We haven't found any reason to return False, so this is a valid word.
    return True
</snippet></ROW><ROW><id>15258058</id><snippet>Configurable</snippet></ROW><ROW><id>15258058</id><snippet>IPython.utils.traitlets.HasTraits</snippet></ROW><ROW><id>15258058</id><snippet>IPython.utils.traitlets</snippet></ROW><ROW><id>15258058</id><snippet>enthought.traits</snippet></ROW><ROW><id>15258058</id><snippet>enthought.traits</snippet></ROW><ROW><id>15258058</id><snippet>enthought.traits</snippet></ROW><ROW><id>15258058</id><snippet>enthought.traits</snippet></ROW><ROW><id>15258160</id><snippet>options</snippet></ROW><ROW><id>15258160</id><snippet>encoding</snippet></ROW><ROW><id>15258160</id><snippet>input_encoding</snippet></ROW><ROW><id>15258160</id><snippet>input_encoding</snippet></ROW><ROW><id>15258160</id><snippet>input_encoding</snippet></ROW><ROW><id>15258160</id><snippet>Template</snippet></ROW><ROW><id>15258160</id><snippet>TemplateLookup</snippet></ROW><ROW><id>15258160</id><snippet>input_encoding</snippet></ROW><ROW><id>15258219</id><snippet> l = "111 222 333 444 555 666" 
 #this splits and creates a list
 vals = l.split()
 sql = """INSERT INTO Values VALUES( %s, %s, %s, %s, %s, %s,\"uname\")"""
 cur.execute(sql, vals)
</snippet></ROW><ROW><id>15258381</id><snippet>DictVectorizer</snippet></ROW><ROW><id>15258493</id><snippet>request.GET</snippet></ROW><ROW><id>15258493</id><snippet>www.domain.co.uk/?param=value</snippet></ROW><ROW><id>15258493</id><snippet>?</snippet></ROW><ROW><id>15258493</id><snippet>www.domain.co.uk/macoui=001100</snippet></ROW><ROW><id>15258493</id><snippet>?</snippet></ROW><ROW><id>15258493</id><snippet>url(r'^macoui=(?P&lt;macaoui&gt;\d{6})$', 'domain.views.output'),
</snippet></ROW><ROW><id>15258493</id><snippet>def output(request, macaoui):
</snippet></ROW><ROW><id>15258493</id><snippet>www.domain.co.uk/?macoui=001100</snippet></ROW><ROW><id>15258493</id><snippet>url(r'^$', 'domain.views.output'),
</snippet></ROW><ROW><id>15258493</id><snippet>def output(request):
   macaoui = request.GET.get('macoui', '')
</snippet></ROW><ROW><id>15258534</id><snippet>itertext()</snippet></ROW><ROW><id>15258534</id><snippet>.text</snippet></ROW><ROW><id>15258534</id><snippet>&gt;&gt;&gt; test = ET.fromstring('&lt;elem&gt;Sometext &lt;subelem&gt;more text&lt;/subelem&gt; rest&lt;/elem&gt;')
&gt;&gt;&gt; test.text
'Sometext '
&gt;&gt;&gt; ''.join(test.itertext())
'Sometext more text rest'
</snippet></ROW><ROW><id>15258534</id><snippet>.itertext()</snippet></ROW><ROW><id>15258534</id><snippet>.text</snippet></ROW><ROW><id>15258534</id><snippet>.tail</snippet></ROW><ROW><id>15258534</id><snippet>&gt;&gt;&gt; (test.text or '') + ''.join(child.tail for child in test.getchildren())
'Sometext  middle  rest'
</snippet></ROW><ROW><id>15258534</id><snippet>.text</snippet></ROW><ROW><id>15258534</id><snippet>ElementTree.tostring()</snippet></ROW><ROW><id>15258534</id><snippet>&gt;&gt;&gt; (test.text or '') + ''.join(ET.tostring(child) for child in test.getchildren())
'Sometext &lt;subelem&gt;more text&lt;/subelem&gt; middle &lt;subelem&gt;other text&lt;/subelem&gt; rest'
</snippet></ROW><ROW><id>15258534</id><snippet>ET.tostring()</snippet></ROW><ROW><id>15258534</id><snippet>(test.text or '')</snippet></ROW><ROW><id>15258534</id><snippet>.text</snippet></ROW><ROW><id>15258534</id><snippet>None</snippet></ROW><ROW><id>15258534</id><snippet>def innerxml(elem):
    return (elem.text or '') + ''.join(ET.tostring(child) for child in elem.getchildren())
</snippet></ROW><ROW><id>15258588</id><snippet>ws.sort(key=lambda datum: (datum['date'], datum['type'], datum['location']))
</snippet></ROW><ROW><id>15258759</id><snippet>r.status_code</snippet></ROW><ROW><id>15258759</id><snippet>if r.status_code == 404:
    # A 404 was issued.
</snippet></ROW><ROW><id>15258759</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.get('http://httpbin.org/status/404')
&gt;&gt;&gt; r.status_code
404
</snippet></ROW><ROW><id>15258759</id><snippet>requests</snippet></ROW><ROW><id>15258759</id><snippet>r.raise_for_status()</snippet></ROW><ROW><id>15258759</id><snippet>&gt;&gt;&gt; r = requests.get('http://httpbin.org/status/404')
&gt;&gt;&gt; r.raise_for_status()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "requests/models.py", line 664, in raise_for_status
    raise http_error
requests.exceptions.HTTPError: 404 Client Error: NOT FOUND
&gt;&gt;&gt; r = requests.get('http://httpbin.org/status/200')
&gt;&gt;&gt; r.raise_for_status()
&gt;&gt;&gt; # no exception raised.
</snippet></ROW><ROW><id>15258856</id><snippet>isalnum</snippet></ROW><ROW><id>15258856</id><snippet>n</snippet></ROW><ROW><id>15258856</id><snippet>mystr[n]</snippet></ROW><ROW><id>15258856</id><snippet>def validNumber(phone_number):
    if len(phone_number) != 12:
        return False
    for i in range(12):
        if i in [3,7]:
            if phone_number[i] != '-':
                return False
        elif not phone_number[i].isalnum():
            return False
    return True
</snippet></ROW><ROW><id>15258856</id><snippet>phone_number[i]</snippet></ROW><ROW><id>15258856</id><snippet>for i in range(len(phone_number)):
    print i, phone_number[i]
</snippet></ROW><ROW><id>15258856</id><snippet>enumerate</snippet></ROW><ROW><id>15258856</id><snippet>def validNumber(phone_number):
    for i,c in enumerate(phone_number):
        if i in [3,7]:
            if c != '-':
                return False
        elif not c.isalnum():
            return False
    return True
</snippet></ROW><ROW><id>15258856</id><snippet>main</snippet></ROW><ROW><id>15258856</id><snippet>def main():
    phone_number = '' # an invalid number to initiate while loop
    while not validNumber(phone_number):
        phone_number = input('Please enter a phone number in the format XXX-XXX-XXXX: ')
    translated_number = translateNumber(phone_number)
</snippet></ROW><ROW><id>15258864</id><snippet>try-except</snippet></ROW><ROW><id>15258864</id><snippet>def draw():
    try:
        while True:
            for x in range(0,10):
                for y in range (0,10):
                    if (coord[i][j] == 0):
                        canvas.create_rectangle((x * 40) + 10, (y * 40) + 10, (x * 40) + 50, (y * 40) + 50, fill="white")
                    if (coord[i][j] == 1):
                        canvas.create_rectangle((x * 40) + 10, (y * 40) + 10, (x * 40) + 50, (y * 40) + 50, fill="red")
                    if (coord[i][j] == 2):
                        canvas.create_rectangle((x * 40) + 10, (y * 40) + 10, (x * 40) + 50, (y * 40) + 50, fill="darkorange")
        time.sleep(0.03)
    except Exception as e:
        print(e)
        raise
</snippet></ROW><ROW><id>15259028</id><snippet>islink</snippet></ROW><ROW><id>15259028</id><snippet>False</snippet></ROW><ROW><id>15259028</id><snippet>win32api</snippet></ROW><ROW><id>15259028</id><snippet>ctypes</snippet></ROW><ROW><id>15259028</id><snippet>jaraco.windows</snippet></ROW><ROW><id>15259028</id><snippet>ntpath</snippet></ROW><ROW><id>15259028</id><snippet>os</snippet></ROW><ROW><id>15259028</id><snippet>nt</snippet></ROW><ROW><id>15259028</id><snippet>posixmodule.c</snippet></ROW><ROW><id>15259028</id><snippet>win32_xstat_impl</snippet></ROW><ROW><id>15259028</id><snippet>win32_xstat_impl_w</snippet></ROW><ROW><id>15259406</id><snippet>os.walk()</snippet></ROW><ROW><id>15259406</id><snippet>os.listdir()</snippet></ROW><ROW><id>15259406</id><snippet>os.path.isdir()</snippet></ROW><ROW><id>15259406</id><snippet>walk()</snippet></ROW><ROW><id>15259406</id><snippet>try:
    # Note that listdir and error are globals in this module due
    # to earlier import-*.
    names = listdir(top)
except error, err:
    if onerror is not None:
        onerror(err)
    return

dirs, nondirs = [], []
for name in names:
    if isdir(join(top, name)):
        dirs.append(name)
    else:
        nondirs.append(name)
</snippet></ROW><ROW><id>15259406</id><snippet>listdir</snippet></ROW><ROW><id>15259406</id><snippet>isdir</snippet></ROW><ROW><id>15259406</id><snippet>os.listdir()</snippet></ROW><ROW><id>15259406</id><snippet>os.path.isdir()</snippet></ROW><ROW><id>15259490</id><snippet>^something/(?P&lt;id1&gt;\d+)/(?P&lt;id2&gt;\d+)/(?:(?P&lt;id3&gt;\d+)/)?(?:(?P&lt;id4&gt;\d+)/)?$
</snippet></ROW><ROW><id>15259490</id><snippet>In [4]: p = re.compile(r'^something/(?P&lt;id1&gt;\d+)/(?P&lt;id2&gt;\d+)/(?:(?P&lt;id3&gt;\d+)/)?(?:(?P&lt;id4&gt;\d+)/)?$')

In [5]: p.match('something/1/2/3/4/').groups()
Out[5]: ('1', '2', '3', '4')

In [6]: p.match('something/1/2/3/4').groups()
Out[6]: ('1', '2', '3', None)

In [7]: p.match('something/1/2/3/').groups()
Out[7]: ('1', '2', '3', None)

In [8]: p.match('something/1/2/3').groups()
Out[8]: ('1', '2', None, None)

In [9]: p.match('something/1/2/').groups()
Out[9]: ('1', '2', None, None)
</snippet></ROW><ROW><id>15259490</id><snippet>In [12]: p = re.compile(r'^something/(?P&lt;id1&gt;\d+)/(?P&lt;id2&gt;\d+)/(?:(?P&lt;id3&gt;\d+))?(?:/(?P&lt;id4&gt;\d+)/?)?$')

In [13]: import re
KeyboardInterrupt

In [13]: p.match('something/1/2/3/4').groups()
Out[13]: ('1', '2', '3', '4')

In [14]: p.match('something/1/2/3/').groups()
Out[14]: ('1', '2', '3', None)

In [15]: p.match('something/1/2/3').groups()
Out[15]: ('1', '2', '3', None)

In [16]: p.match('something/1/2/').groups()
Out[16]: ('1', '2', None, None)
</snippet></ROW><ROW><id>15259654</id><snippet>try-except</snippet></ROW><ROW><id>15259654</id><snippet>try: 
    # try the thing you expect to work
    mp3 = open('Tracks/' + title + '.mp3', 'w')
except OSError, e:
    # exception is for the unlikely case
    os.makedirs('Tracks')
    mp3 = open('Tracks/' + title + '.mp3', 'w')

mp3.write(mp3File.content)
mp3.close()
print '%s has been created.' % fileName
</snippet></ROW><ROW><id>15259654</id><snippet>try</snippet></ROW><ROW><id>15259654</id><snippet>try: 
    # If directory has not yet been created
    os.makedirs('Tracks')
except OSError, e:
    # If directory has already been created or is inaccessible
    if not os.path.exists('Tracks')
        sys.exit("Error creating 'Tracks' Directory. Cannot save MP3. Check permissions.")
with open('Tracks/' + title + '.mp3', 'w') as mp3:
    mp3.write(mp3File.content)
    print '%s has been created.' % fileName
</snippet></ROW><ROW><id>15259693</id><snippet>":::END"</snippet></ROW><ROW><id>15259693</id><snippet>def sockWrite(conn, data):
    data = data.replace(':', r'\:') + ":::END"
    conn.write(data)
</snippet></ROW><ROW><id>15259693</id><snippet>replace('r\:', ':')</snippet></ROW><ROW><id>15259693</id><snippet>':::END'</snippet></ROW><ROW><id>15259693</id><snippet>endswith</snippet></ROW><ROW><id>15259693</id><snippet>partition</snippet></ROW><ROW><id>15259693</id><snippet>split</snippet></ROW><ROW><id>15259693</id><snippet>read</snippet></ROW><ROW><id>15259693</id><snippet>'\0'</snippet></ROW><ROW><id>15259693</id><snippet>pickle</snippet></ROW><ROW><id>15259693</id><snippet>2</snippet></ROW><ROW><id>15259693</id><snippet>3</snippet></ROW><ROW><id>15259693</id><snippet>HIGHEST_PROTOCOL</snippet></ROW><ROW><id>15259693</id><snippet>pickle</snippet></ROW><ROW><id>15259693</id><snippet>json.loads</snippet></ROW><ROW><id>15259693</id><snippet>raw_decode</snippet></ROW><ROW><id>15259851</id><snippet>p = Popen(["candump","can0"],stdout=PIPE)
</snippet></ROW><ROW><id>15260063</id><snippet>import sys
sys.path.append("/home/ubuntu/Foo/src")

import foobar
</snippet></ROW><ROW><id>15260324</id><snippet>def main():
    phone_number = ""
    while not validNumber(phone_number):
        phone_number = input('Please enter a phone number in the format XXX-XXX-XXXX: ')
    translateNumber(phone_number)
</snippet></ROW><ROW><id>15260324</id><snippet>input</snippet></ROW><ROW><id>15260324</id><snippet>raw_input</snippet></ROW><ROW><id>15260520</id><snippet>pythoncode</snippet></ROW><ROW><id>15260520</id><snippet>%pythoncode %{
def _special_python_member_function(self):
     print "hello"
     self.rotate() # some function of Sphere
Sphere.new_functionality=_special_python_member_function
%}
</snippet></ROW><ROW><id>15260520</id><snippet>rename</snippet></ROW><ROW><id>15260520</id><snippet>__init__</snippet></ROW><ROW><id>15260520</id><snippet>def function_that_depends_on_python_specific_state(self, *args):
   if not hasatttr( self, 'python_data'):
        self.python_data = self.make_python_data() # construct the relevant data
   pass # do work that involves the python specific data
</snippet></ROW><ROW><id>15260520</id><snippet>__getattr__</snippet></ROW><ROW><id>15260520</id><snippet>def _sphere_getattr(self, name):
    if name=='python_data':
         self.__dict__[name]=self.make_python_data()
         return self.__dict__[name]
    else:
        raise AttributeError
Sphere.__getattr__ = _sphere_getattr
</snippet></ROW><ROW><id>15260673</id><snippet>newstring = '_'.join(input1.split())
</snippet></ROW><ROW><id>15260673</id><snippet>import re
newstring = re.sub(' +', '_', input1)
</snippet></ROW><ROW><id>15260875</id><snippet>set_title</snippet></ROW><ROW><id>15260875</id><snippet>cbar.ax.set_title('title')
</snippet></ROW><ROW><id>15261055</id><snippet>input : coordinate of a cell

function empty_cell_search(cell)
  for neighbor_cell in neighbors :
    if the_neighbor_cell is empty and is not already visited : 
      add the_neighbor_cell to set of visited cells
      union empty_cell_search(the_neighbor_cell) with current set of visited cells
  return the set of currently visited cells
</snippet></ROW><ROW><id>15261130</id><snippet>In [24]: import string

In [25]: string.uppercase
Out[25]: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

In [26]: string.uppercase[5:]+string.uppercase[:5]
Out[26]: 'FGHIJKLMNOPQRSTUVWXYZABCDE'

In [27]: table = string.maketrans(string.uppercase, string.uppercase[5:]+string.uppercase[:5])

In [28]: 'CAR'.translate(table)
Out[28]: 'HFW'

In [29]: 'HELLO'.translate(table)
Out[29]: 'MJQQT'
</snippet></ROW><ROW><id>15261131</id><snippet>http://stackoverflow.com/questions/15260904/serving-media-in-django</snippet></ROW><ROW><id>15261131</id><snippet>http://stackoverflow.com/questions/15260904///////serving-media-in-django</snippet></ROW><ROW><id>15261176</id><snippet>&gt;&gt;&gt; foo, bar = (1, 2)
&gt;&gt;&gt; foo
1
&gt;&gt;&gt; bar
2
&gt;&gt;&gt; baz, = (3, )
&gt;&gt;&gt; baz
3
</snippet></ROW><ROW><id>15261176</id><snippet>&gt;&gt;&gt; for a, b in [(1, 'x'), (2, 'y')]:
...     print a, "and b is", b
...
1 and b is x
2 and b is y
</snippet></ROW><ROW><id>15261283</id><snippet>{%- for item in items | sort(reverse=True, attribute=date) %}
    {%- if loop.index &lt;= 3 %}
        &lt;li&gt;
            blah blah
        &lt;/li&gt;
    {%- endif %}
{%- endfor %}
</snippet></ROW><ROW><id>15261463</id><snippet>def userItem(randomItem):
    """ This function finds out the users Item choice."""

    youWonMsg = "You won... You were lucky this time, but next time i will win!"
    iWinMsg = "I win!! :D lucky me!"

    userChoice = raw_input("what is your choice? Rock Paper OR Scissors?")

    randomItem, userChoice = str(randomItem).lower(), userChoice.lower()

    print "I picked " + randomItem + "!"

    if userChoice == randomItem:
        print "It's a draw! Jinx Knock on wood! XD"
    elif userChoice == "scissors" and randomItem == "rock":
        print iWinMsg
    elif userChoice == "scissors" and randomItem == "paper":
        print youWonMsg
    elif userChoice == "rock" and randomItem == "paper":
        print iWinMsg
    elif userChoice == "rock" and randomItem == "scissors":
        print youWonMsg
    elif userChoice == "paper" and randomItem == "scissors":
        print iWinMsg
    elif userChoice == "paper" and randomItem == "rock":
        print youWonMsg
    else:
        print "I think there has been an error, please recheck your spelling and try again! Thank you :D"
</snippet></ROW><ROW><id>15261463</id><snippet>def userItem(randomItem):
    """ This function finds out the users Item choice."""
    iWinMsg = "You won... You were lucky this time, but next time i will win!"
    youWonMsg = "I win!! :D lucky me!"
    mappings = {('scissors', 'rock'): True, ('scissors', 'paper'): False,
                ('rock', 'paper'): True, ('paper', 'scissors'): False,
                ('rock', 'scissors'): True, ('paper', 'scissors'): True,
                ('paper', 'rock'): False}

    userChoice = raw_input("what is your choice? Rock Paper OR Scissors?")

    randomItem, userChoice = str(randomItem).lower(), userChoice.lower()

    print "I picked " + randomItem + "!"

    key = (userChoice, randomItem)

    if userChoice == randomItem:
        print "It's a draw! Jinx Knock on wood! XD"
    elif key in mappings and mappings[key]:
        print iWinMsg
    elif key in mappings and not mappings[key]:
        print youWonMsg
    else:
        print "I think there has been an error, please recheck your spelling and try again! Thank you :D"
</snippet></ROW><ROW><id>15261479</id><snippet>print x['query']['pages'].keys()</snippet></ROW><ROW><id>15261479</id><snippet>['-1']</snippet></ROW><ROW><id>15261479</id><snippet>['1080152']</snippet></ROW><ROW><id>15261479</id><snippet>'-1'</snippet></ROW><ROW><id>15261479</id><snippet>x['query']['pages']</snippet></ROW><ROW><id>15261479</id><snippet>if '-1' in x['query']['pages']:
   # dictionary x['query']['pages'] has '-1' as a key
</snippet></ROW><ROW><id>15261602</id><snippet>my_module</snippet></ROW><ROW><id>15261602</id><snippet>$node-&gt;type</snippet></ROW><ROW><id>15261602</id><snippet>custom_type</snippet></ROW><ROW><id>15261602</id><snippet>field_baz</snippet></ROW><ROW><id>15261602</id><snippet>/path/to/my/python_script.py</snippet></ROW><ROW><id>15261602</id><snippet>field_baz</snippet></ROW><ROW><id>15261602</id><snippet>field_data_foo</snippet></ROW><ROW><id>15261602</id><snippet>field_data_bar</snippet></ROW><ROW><id>15261602</id><snippet>!isset($node-&gt;nid)</snippet></ROW><ROW><id>15261602</id><snippet>/**
 * Implements hook_node_presave().
 */
function my_module_node_presave($node) {
  if ($node-&gt;type == 'custom_type' &amp;&amp; !isset($node-&gt;nid)) {

    // Get the user value from the node.
    // You may have to clean it so it enters the script properly
    $baz = $node-&gt;field_baz[LANGUAGE_NONE][0]['value'];

    // Build the command string
    $cmd = '/path/to/my/python_script.py ' . $baz;

    // Execute the script and store the output in a variable
    $py_output = shell_exec($cmd);

    // Assuming the output is a JSON string.
    $data = drupal_json_decode($py_output);

    // Add the values to the fields
    $node-&gt;field_data_foo[LANGUAGE_NONE][0]['value'] = $data['foo'];
    $node-&gt;field_data_bar[LANGUAGE_NONE][0]['value'] = $data['bar'];

    // Nothing more to do, the $node object is a reference and
    // the object with its new data will be passed on to be saved.
  }
}
</snippet></ROW><ROW><id>15261676</id><snippet>while guess &gt;= number:
    guess = int(input("Too High, please guess again: "))
    if guess == number:
        print("Correct! You've guessed my number!")

while guess &lt;= number:
    guess = int(input("Too Low, please guess again: "))

    if guess == number:
        print("Correct! You've guessed my number!")
</snippet></ROW><ROW><id>15261676</id><snippet>while</snippet></ROW><ROW><id>15261676</id><snippet>while guess != number:
</snippet></ROW><ROW><id>15261676</id><snippet>if</snippet></ROW><ROW><id>15261676</id><snippet>&lt;=</snippet></ROW><ROW><id>15261676</id><snippet>==</snippet></ROW><ROW><id>15261676</id><snippet>&gt;=</snippet></ROW><ROW><id>15261711</id><snippet>a=[(1,'Rach', 'Mell', '5.11', '160'),(2, 'steve', 'Rob', '6.1', '200'), (1,'Rach', 'Mell', '5.11', '160')]

for i,e in enumerate(a):
    if e[0]==2: 
        temp=list(a[i])
        temp[2]='Roberto'
        a[i]=tuple(temp)

print a        
</snippet></ROW><ROW><id>15261711</id><snippet>[(1, 'Rach', 'Mell', '5.11', '160'), (2, 'steve', 'Roberto', '6.1', '200'), (1, 'Rach', 'Mell', '5.11', '160')]
</snippet></ROW><ROW><id>15261711</id><snippet>&gt;&gt;&gt; [t if t[0]!=2 else (t[0],t[1],'Roberto',t[3],t[4]) for t in a]
[(1, 'Rach', 'Mell', '5.11', '160'), (2, 'steve', 'Roberto', '6.1', '200'), (1, 'Rach', 'Mell', '5.11', '160')]
</snippet></ROW><ROW><id>15261887</id><snippet>numpy</snippet></ROW><ROW><id>15261887</id><snippet>pylab</snippet></ROW><ROW><id>15261887</id><snippet>from pylab import imshow, show, get_cmap
from numpy import random

Z = random.random((50,50))   # Test data

imshow(Z, cmap=get_cmap("Spectral"), interpolation='nearest')
show()
</snippet></ROW><ROW><id>15261887</id><snippet>import pylab as plt
import numpy as np

Z = np.random.random((500,500))   # Test data
plt.imshow(Z, cmap='gray', interpolation='nearest')
plt.show()
</snippet></ROW><ROW><id>15262044</id><snippet>for i in range (0,self.__size):
        if(current.getData()==item):
            found=True
            pos=i#save the position to pop
            i=self.__size#&lt;--- doesn't leave the loop 
        else:
            prev=current
            current=current.getNext()
</snippet></ROW><ROW><id>15262044</id><snippet>i=self.__size</snippet></ROW><ROW><id>15262044</id><snippet>break</snippet></ROW><ROW><id>15262044</id><snippet>current</snippet></ROW><ROW><id>15262044</id><snippet>current</snippet></ROW><ROW><id>15262044</id><snippet>==</snippet></ROW><ROW><id>15262044</id><snippet>=</snippet></ROW><ROW><id>15262044</id><snippet>self.__head==None   #should be self.__head=None
self.__tail==None   #should be self.__tail=None
current.setNext(None)
current.setPrevious(None)
</snippet></ROW><ROW><id>15262044</id><snippet>==</snippet></ROW><ROW><id>15262044</id><snippet>=</snippet></ROW><ROW><id>15262044</id><snippet>if(found==True):</snippet></ROW><ROW><id>15262044</id><snippet>found</snippet></ROW><ROW><id>15262044</id><snippet>found==True</snippet></ROW><ROW><id>15262044</id><snippet>found</snippet></ROW><ROW><id>15262044</id><snippet>if(found==True):
   ...
</snippet></ROW><ROW><id>15262044</id><snippet>if(found):
   ...
</snippet></ROW><ROW><id>15262056</id><snippet>mmap</snippet></ROW><ROW><id>15262056</id><snippet>mmap</snippet></ROW><ROW><id>15262056</id><snippet>MapViewOfFile</snippet></ROW><ROW><id>15262056</id><snippet>os</snippet></ROW><ROW><id>15262056</id><snippet>mmap</snippet></ROW><ROW><id>15262056</id><snippet>ctypes</snippet></ROW><ROW><id>15262125</id><snippet>glob</snippet></ROW><ROW><id>15262125</id><snippet>xpath</snippet></ROW><ROW><id>15262125</id><snippet>preg_match_all</snippet></ROW><ROW><id>15262125</id><snippet>getNodePath()</snippet></ROW><ROW><id>15262125</id><snippet>$pattern = '/home|house|guide/iu';

foreach (glob('data/*.xml') as $file)
{
    foreach (simplexml_load_file($file)-&gt;xpath('//*') as $node)
    {
        if (!preg_match_all($pattern, $node, $matches)) continue;

        printf(
            "\"%s\" in %s, xpath: %s\n", implode('", "', $matches[0]),
            basename($file), dom_import_simplexml($node)-&gt;getNodePath()
        );
    }
}
</snippet></ROW><ROW><id>15262125</id><snippet>"Guide" in iana-charsets-2013-03-05.xml, xpath: /*/*[7]/*[158]/*[4]
"Guide" in iana-charsets-2013-03-05.xml, xpath: /*/*[7]/*[224]/*[2]
"Guide" in iana-charsets-2013-03-05.xml, xpath: /*/*[7]/*[224]/*[4]
"guide" in rdf-dmoz.xml, xpath: /*/*[4]/d:Description
"guide" in rdf-dmoz.xml, xpath: /*/*[5]/d:Description
</snippet></ROW><ROW><id>15262146</id><snippet>apply</snippet></ROW><ROW><id>15262146</id><snippet>&gt;&gt;&gt; df.groupby('A_id').apply(lambda x: pd.Series(dict(
    sum_up=(x.B == 'up').sum(),
    sum_down=(x.B == 'down').sum(),
    over_200_up=((x.B == 'up') &amp; (x.C &gt; 200)).sum()
)))
      over_200_up  sum_down  sum_up
A_id                               
a1              0         0       1
a2              0         1       0
a3              1         0       2
a4              0         0       0
a5              0         0       0
</snippet></ROW><ROW><id>15263092</id><snippet>[point_geom.x, point_geom.y]
</snippet></ROW><ROW><id>15263107</id><snippet>import os
print(os.readlink('/proc/self/fd/0'))
</snippet></ROW><ROW><id>15263107</id><snippet>/proc</snippet></ROW><ROW><id>15263107</id><snippet>self</snippet></ROW><ROW><id>15263107</id><snippet>fd</snippet></ROW><ROW><id>15263107</id><snippet>stdin</snippet></ROW><ROW><id>15263150</id><snippet>callto:</snippet></ROW><ROW><id>15263150</id><snippet>skype:</snippet></ROW><ROW><id>15263465</id><snippet>True</snippet></ROW><ROW><id>15263465</id><snippet>False</snippet></ROW><ROW><id>15263465</id><snippet>import pyparsing as pypar
import itertools

def python_equiv(s):
    return s.replace('||',' or ').replace('&amp;&amp;',' and ')

def substitute(s,truth_table, VARS):
    for v,t in zip(VARS,truth_table):
        s = s.replace(v,t)
    return s

def check_statements(A1,A2):  
    VARS = set()
    maths    = pypar.oneOf("( ! = | &amp; )")
    keywords = pypar.oneOf("and or")
    variable = pypar.Word(pypar.alphanums)
    variable.setParseAction(lambda x: VARS.add(x[0]))
    grammar  = pypar.OneOrMore(maths | keywords | variable)

    # Determine the variable names
    grammar.parseString(A1)
    grammar.parseString(A2)

    A1 = python_equiv(A1)
    A2 = python_equiv(A2)

    bool_vals = map(str, [False,True])

    for table in itertools.product(bool_vals,repeat=len(VARS)):
        T1 = substitute(A1,table,VARS)
        T2 = substitute(A2,table,VARS)
        if eval(T1) != eval(T2):
            print "FAIL AT ", table,
            return False

    print "Statements equiv:",

    return True


# Original example
A1 = '''((op1 != v1) || ((op2 != v2) || (op3 != v3)))'''
A2 = '''((op2 != v2) ||  (op1 != v1) || (op3 != v3))'''
print check_statements(A1,A2)

# Example with a failure
A1 = '''((op1 != v1) || ((op2 != v2) || (op3 != v3)))'''
A2 = '''((op2 != v2) ||  (op1 != v1) &amp;&amp; (op3 != v3))'''
print check_statements(A1,A2)
</snippet></ROW><ROW><id>15263465</id><snippet>Statements equiv: True
FAIL AT  ('False', 'False', 'False', 'False', 'False', 'True') False
</snippet></ROW><ROW><id>15263885</id><snippet># Option one 
older_method_string = "%.9f" % numvar

# Option two
newer_method_string = "{:.9f}".format(numvar) 
</snippet></ROW><ROW><id>15264097</id><snippet>class N:
    def __init__(self):
        self.s = []
    def add(self,u):
        self.s.append(u)
    def check(self):
        if sorted(self.s) == True:
            print "List is sorted"
        else:
            print "Not sorted but it will sort now"
            return sorted(self.s)
</snippet></ROW><ROW><id>15264102</id><snippet>&amp;</snippet></ROW><ROW><id>15264102</id><snippet>curl</snippet></ROW><ROW><id>15264102</id><snippet>curl -o /tmp/fantasyhockey.txt "http://...."</snippet></ROW><ROW><id>15264181</id><snippet>reverse</snippet></ROW><ROW><id>15264181</id><snippet>def reverse(number):
     reverse=''
     while number&gt;0:
        reverse = reverse + str(number % 10)
        number=number//10
     return reverse
</snippet></ROW><ROW><id>15264181</id><snippet>isPalindrome</snippet></ROW><ROW><id>15264181</id><snippet>50</snippet></ROW><ROW><id>15264181</id><snippet>05</snippet></ROW><ROW><id>15264181</id><snippet>5</snippet></ROW><ROW><id>15264181</id><snippet>50</snippet></ROW><ROW><id>15264181</id><snippet>5</snippet></ROW><ROW><id>15264181</id><snippet>def isPalindrome(number):
    if str(number) == reverse(number):
        return True
    else:
        return False
</snippet></ROW><ROW><id>15264399</id><snippet>items</snippet></ROW><ROW><id>15264399</id><snippet>Y</snippet></ROW><ROW><id>15264399</id><snippet>Z</snippet></ROW><ROW><id>15264399</id><snippet>items</snippet></ROW><ROW><id>15264399</id><snippet>items</snippet></ROW><ROW><id>15264399</id><snippet>X</snippet></ROW><ROW><id>15264399</id><snippet>Y.items</snippet></ROW><ROW><id>15264399</id><snippet>Z.items</snippet></ROW><ROW><id>15264399</id><snippet>X.items is Y.items</snippet></ROW><ROW><id>15264399</id><snippet>items</snippet></ROW><ROW><id>15264399</id><snippet>items</snippet></ROW><ROW><id>15264399</id><snippet>items</snippet></ROW><ROW><id>15264399</id><snippet>class X(object):
    items  = []

class Y(object):
    items  = []

class Z(object):
    items  = []
</snippet></ROW><ROW><id>15264399</id><snippet>def addItems(cls):
    cls.items = []
    cls.items.append(1)
    return cls
</snippet></ROW><ROW><id>15264399</id><snippet>items</snippet></ROW><ROW><id>15264444</id><snippet>field_name = models.CharField(max_length=400, blank=True)
</snippet></ROW><ROW><id>15265371</id><snippet>Details, Name, Author, Status</snippet></ROW><ROW><id>15265371</id><snippet>details, name, author, status</snippet></ROW><ROW><id>15265371</id><snippet>bookInfo</snippet></ROW><ROW><id>15265371</id><snippet>bookInfo</snippet></ROW><ROW><id>15265371</id><snippet>BookInfo</snippet></ROW><ROW><id>15265371</id><snippet>&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Add&lt;/title&gt;
&lt;/head&gt;
    &lt;body&gt;
        &lt;form action="add/" method="post"&gt;
        {% csrf_token %}
        &lt;p style="font-family:Courier New;color:teal;"&gt;Name &lt;input type="text" placeholder="Name of the book" name="name" /&gt;&lt;/p&gt;

        &lt;p style="font-family:Courier New;color:teal;"&gt;Author &lt;input type="text" placeholder="Author of the book" name="author" /&gt;&lt;/p&gt;
        &lt;p style="font-family:Courier New; color:teal;"&gt; Status
            &lt;select name="status"&gt;
                &lt;option value=1&gt;Read&lt;/option&gt;
                &lt;option value=1&gt;Unread&lt;/option&gt;
            &lt;/select&gt;
            &lt;/p&gt;
            &lt;input type="submit" id="booksubmit" value="Add/Edit Book" /&gt;
        &lt;/form&gt;
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>15265371</id><snippet>/&gt;</snippet></ROW><ROW><id>15265371</id><snippet>&lt;/input&gt;</snippet></ROW><ROW><id>15265371</id><snippet>style="font-family:Courier New; color:teal"
</snippet></ROW><ROW><id>15265371</id><snippet>style="font-family:Courier New; color:teal;"
</snippet></ROW><ROW><id>15265371</id><snippet>content_type</snippet></ROW><ROW><id>15265371</id><snippet>{{ Name }}, {{ Status }}</snippet></ROW><ROW><id>15265371</id><snippet>content_type</snippet></ROW><ROW><id>15265371</id><snippet>xhtml+xml</snippet></ROW><ROW><id>15265371</id><snippet>&lt;input type="text" value="{{ Name }}" /&gt;
</snippet></ROW><ROW><id>15265774</id><snippet>import imp
fname, pathname, description = imp.find_module("__test__.py", path)
if not fname:
    #File is not present
else:
    #File is present
    fname.close()
</snippet></ROW><ROW><id>15265799</id><snippet>import threading

stderr_l = threading.Lock()

def print_t(msg):
    with stderr_l:
        print msg
</snippet></ROW><ROW><id>15265799</id><snippet>print_t</snippet></ROW><ROW><id>15266555</id><snippet>&lt;code object at 0x...&gt;</snippet></ROW><ROW><id>15266555</id><snippet>f.__code__</snippet></ROW><ROW><id>15266555</id><snippet>f</snippet></ROW><ROW><id>15266555</id><snippet>.pyc</snippet></ROW><ROW><id>15266555</id><snippet>foo.py</snippet></ROW><ROW><id>15266555</id><snippet>.pyc</snippet></ROW><ROW><id>15266555</id><snippet>import</snippet></ROW><ROW><id>15266555</id><snippet>&lt;code object&gt;</snippet></ROW><ROW><id>15266555</id><snippet>.pyc</snippet></ROW><ROW><id>15266555</id><snippet>.pyc</snippet></ROW><ROW><id>15266555</id><snippet>.py</snippet></ROW><ROW><id>15266555</id><snippet>&lt;code object&gt;</snippet></ROW><ROW><id>15266555</id><snippet>&lt;code object&gt;</snippet></ROW><ROW><id>15266555</id><snippet>import</snippet></ROW><ROW><id>15266555</id><snippet>foo.py</snippet></ROW><ROW><id>15266555</id><snippet>python foo.py</snippet></ROW><ROW><id>15266555</id><snippet>foo.py</snippet></ROW><ROW><id>15266824</id><snippet>X'53514C697465'
</snippet></ROW><ROW><id>15266824</id><snippet>with open(path, 'rb') as f:
    "X'{0}'".format(r.read().encode('hex'))
</snippet></ROW><ROW><id>15266888</id><snippet>tuple(state, position, hourOfDay, dayOfWeed)</snippet></ROW><ROW><id>15266888</id><snippet>data = dict()
</snippet></ROW><ROW><id>15266888</id><snippet>data[state, position, hourOfDay, dayOfWeed] = value
</snippet></ROW><ROW><id>15266888</id><snippet>value = data[state, position, hourOfDay, dayOfWeed]
</snippet></ROW><ROW><id>15267567</id><snippet>if width &lt; 0 or width &gt; 10000:
</snippet></ROW><ROW><id>15267567</id><snippet>if not 0 &lt;= width &lt;= 10000:
</snippet></ROW><ROW><id>15267655</id><snippet>keep_blank_values</snippet></ROW><ROW><id>15267655</id><snippet>&gt;&gt;&gt; print cgi.FieldStorage.__init__.__doc__
Constructor.  Read multipart/* until last part.

        Arguments, all optional:

        fp              : file pointer; default: sys.stdin
            (not used when the request method is GET)

        headers         : header dictionary-like object; default:
            taken from environ as per CGI spec

        outerboundary   : terminating multipart boundary
            (for internal use only)

        environ         : environment dictionary; default: os.environ

        keep_blank_values: flag indicating whether blank values in
            percent-encoded forms should be treated as blank strings.
            A true value indicates that blanks should be retained as
            blank strings.  The default false value indicates that
            blank values are to be ignored and treated as if they were
            not included.

        strict_parsing: flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored.
            If true, errors raise a ValueError exception.
</snippet></ROW><ROW><id>15267696</id><snippet>html</snippet></ROW><ROW><id>15267696</id><snippet>from xml.sax import saxutils as su

unqoutedHtml = su.unescape(content)
newElement = html.document_fromstring(unqoutedHtml)
</snippet></ROW><ROW><id>15267890</id><snippet>/</snippet></ROW><ROW><id>15267992</id><snippet>=</snippet></ROW><ROW><id>15267992</id><snippet>$ cat /tmp/x.py 
print 'hello, world!'

$ alias execute='python /tmp/x.py'
$ execute
hello, world!
</snippet></ROW><ROW><id>15267992</id><snippet>/tmp</snippet></ROW><ROW><id>15268107</id><snippet>print form</snippet></ROW><ROW><id>15268181</id><snippet>first, last = MyModel.allocate_ids(100, parent=p)
</snippet></ROW><ROW><id>15268181</id><snippet>first, last = MyModel.allocate_ids(100, parent=q)
</snippet></ROW><ROW><id>15268419</id><snippet>molecule2atom = Table(
  'molecule2atom',
  Base.metadata, 
  Column('molecule_db', Integer),
  Column('molecule_id', Integer),
  Column('atom_id', Integer, ForeignKey('atom.id')),
  ForeignKeyConstraint( 
    ('molecule_db', 'molecule_id'),
    ('molecule.db', 'molecule.id')  ),
)
</snippet></ROW><ROW><id>15268419</id><snippet>molecules = relationship("Molecule", secondary=molecule2atom, backref="atoms")
</snippet></ROW><ROW><id>15268545</id><snippet>another_scenario = {
        "scenario_name": 
        (
            (
                "command1",
                (
                    os.path,
                    os.path.exists
                ),
                None
            ),  # &lt;- Note this comma
        )
}
</snippet></ROW><ROW><id>15268545</id><snippet>&gt;&gt;&gt; (1)
1
&gt;&gt;&gt; (1,)
(1,)
&gt;&gt;&gt; type((1))
&lt;type 'int'&gt;
&gt;&gt;&gt; type((1,))
&lt;type 'tuple'&gt;
</snippet></ROW><ROW><id>15268545</id><snippet>&gt;&gt;&gt; 1,
(1,)
&gt;&gt;&gt; 1, 2
(1, 2)
</snippet></ROW><ROW><id>15268545</id><snippet>&gt;&gt;&gt; ()
()
</snippet></ROW><ROW><id>15268919</id><snippet>java weblogic.WLST helloworld.py</snippet></ROW><ROW><id>15268919</id><snippet>stdin.write('y\n')</snippet></ROW><ROW><id>15268990</id><snippet>pip install git+git://github.com/jkbr/httpie.git
</snippet></ROW><ROW><id>15268990</id><snippet>pip install git+https://github.com/jkbr/httpie.git
</snippet></ROW><ROW><id>15269166</id><snippet>pairs = {'{': '}', '[': ']', '(': ')'}

def parse_groups(string):
    stack = []
    last = 0
    for i, c in enumerate(string):
        if c in pairs:
            # push onto the stack when we find an opener
            if not stack and last &lt; i:
                # yield anything *not* grouped
                yield string[last:i]
            stack.append((c, i))
        elif c in pairs:
            if stack and pairs[stack[-1][0]] == c:
                # Found a closing bracket, pop the stack
                start = stack.pop()[1]
                if not stack:
                    # Group fully closed, yield
                    yield string[start:i + 1]
                    last = i + 1
            else:
                raise ValueError('Missing opening parethesis')

    if stack:
        raise ValueError('Missing closing parethesis')

    if last &lt; len(string):
        # yield the tail
        yield string[last:]
</snippet></ROW><ROW><id>15269166</id><snippet>&gt;&gt;&gt; list(parse_groups('aaa(cc(kkk)c)ddd[lll]{m(aa)mm}'))
['aaa', '(cc(kkk)c)', 'ddd', '[lll]', '{m(aa)mm}']
</snippet></ROW><ROW><id>15269166</id><snippet>&gt;&gt;&gt; list(parse_groups('aa(bb'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 19, in parse_groups
ValueError: Missing closing parethesis
&gt;&gt;&gt; list(parse_groups('aa[{bb}}'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 20, in parse_groups
ValueError: Missing opening parethesis
&gt;&gt;&gt; list(parse_groups('aa)bb'))
Traceback (most recent call last):
Â  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
Â  File "&lt;stdin&gt;", line 20, in parse_groups
ValueError: Missing opening parethesis
</snippet></ROW><ROW><id>15269211</id><snippet>b = [i for sub in a for i in sub]
</snippet></ROW><ROW><id>15269253</id><snippet>request_queue_size</snippet></ROW><ROW><id>15269253</id><snippet>gevent</snippet></ROW><ROW><id>15269253</id><snippet>SocketServer</snippet></ROW><ROW><id>15269750</id><snippet>setattr</snippet></ROW><ROW><id>15269750</id><snippet>from google.appengine.ext import db
class TestModel(db.Model):
    string_type = db.StringProperty(default='', multiline=True)
    text_type = db.TextProperty()

some_instance = TestModel()
some_instance.text_type = 'foobar'
setattr(some_instance, 'string_type', some_instance.text_type)
some_instance.put()

retrieved_instance = db.get(some_instance.key())

print id(retrieved_instance.string_type) #10166414447674124776
print id(retrieved_instance.text_type) #10166414447721032360

print type(retrieved_instance.string_type) #OOPS: string_type is now Text type!
</snippet></ROW><ROW><id>15269863</id><snippet>In [10]: re.findall('svg:x1="([^"]*)"', line)
Out[10]: ['0cm']
</snippet></ROW><ROW><id>15269863</id><snippet>re.findall('svg:x1="(\d*)cm"', line)

In [11]: re.findall('svg:x1="(\d*)cm"', line)
Out[11]: ['0']
</snippet></ROW><ROW><id>15269899</id><snippet>a</snippet></ROW><ROW><id>15269899</id><snippet>&gt;&gt;&gt; m = np.zeros((6,6))
&gt;&gt;&gt; for row, col, val in a:
...    m[row - 1, col - 1] = val
</snippet></ROW><ROW><id>15270002</id><snippet>users =  search(User, User.fname, 'Jo')</snippet></ROW><ROW><id>15270169</id><snippet>len(score.intersection(node))</snippet></ROW><ROW><id>15270315</id><snippet>class Proxy(object):
    def __init__(self, object_a):
        self._object_a = object_a

    def decorateEnterExit(self, obj, f):
        def inner(*args, **kwargs):
            with obj as _:
                return f(*args, **kwargs)
        return inner

    def __getattribute__(self, name):
        obj = object.__getattribute__(self, '_object_a')
        dee = object.__getattribute__(self, 'decorateEnterExit')
        return dee(obj, getattr(obj, name))
</snippet></ROW><ROW><id>15270315</id><snippet>&gt;&gt;&gt; Proxy(A('Ax')).hello()
Enter the function
hello Ax!
Exit the function
</snippet></ROW><ROW><id>15270315</id><snippet>self</snippet></ROW><ROW><id>15270315</id><snippet>__enter__</snippet></ROW><ROW><id>15270315</id><snippet>A</snippet></ROW><ROW><id>15270315</id><snippet>def __enter__(self):
    print 'Enter the function'
    return self
</snippet></ROW><ROW><id>15270770</id><snippet>class traced(object):
    indent =0
    def __init__(self,f):
        self.__name__=f.__name__
        self.indent=0
        self.f=f         
    def __call__(self,*args,**kwargs):
        string=""           
        if kwargs:
           l=[]
           for (key, value) in kwargs.items():
               l.append(str(key) + "=" + str(value))
           a=', '.join(l)
           string = '('+a+')'              
        else:
             l=[]
             for value in args:
                 l.append(str(value))
             a=', '.join(l)
             string = '('+a+')'       
        print('| ' * traced.indent + ',- '+ self.__name__+' '+string)   
        try:
            traced.indent+=1
            value = self.f(*args,**kwargs)                
        except Exception:
            traced.indent-=1  # &lt;-- only decrement by one
            raise             # &lt;-- reraise the exception so the original function can catch it
        traced.indent-=1
        print('| '* traced.indent + "`- "+ repr(value))          
        return value
</snippet></ROW><ROW><id>15270770</id><snippet>&gt;&gt;&gt; change_t([9, 7, 5], 44)
,- change_t ([9, 7, 5], 44)
| ,- change_t ([9, 7, 5], 35)
| | ,- change_t ([9, 7, 5], 26)
| | | ,- change_t ([9, 7, 5], 17)
| | | | ,- change_t ([9, 7, 5], 8)
| | | | | ,- change_t ([7, 5], 8)
| | | | | | ,- change_t ([7, 5], 1)
| | | | | | | ,- change_t ([5], 1)
| | | | | | | | ,- change_t ([], 1)
| | | | | | ,- change_t ([5], 8)
| | | | | | | ,- change_t ([5], 3)
| | | | | | | | ,- change_t ([], 3)
| | | | | | | ,- change_t ([], 8)
| | | | ,- change_t ([7, 5], 17)
| | | | | ,- change_t ([7, 5], 10)
| | | | | | ,- change_t ([7, 5], 3)
| | | | | | | ,- change_t ([5], 3)
| | | | | | | | ,- change_t ([], 3)
| | | | | | ,- change_t ([5], 10)
| | | | | | | ,- change_t ([5], 5)
| | | | | | | | ,- change_t ([5], 0)
| | | | | | | | `- []
| | | | | | | `- [5]
| | | | | | `- [5, 5]
| | | | | `- [5, 5]
| | | | `- [7, 5, 5]
| | | `- [7, 5, 5]
| | `- [9, 7, 5, 5]
| `- [9, 9, 7, 5, 5]
`- [9, 9, 9, 7, 5, 5]
[9, 9, 9, 7, 5, 5]
</snippet></ROW><ROW><id>15270770</id><snippet>class traced(object):
    indent = 0

    def __init__(self, f):
        self.__name__ = f.__name__
        self.f = f

    def __call__(self, *args, **kwargs):
        if kwargs:
            l = [str(key) + '=' + str(value) for key, value in kwargs.items()]
        else:
            l = list(map(str, args))
        print('| ' * traced.indent + ',- {0} ({1})'.format(self.__name__, ', '.join(l)))
        try:
            traced.indent += 1
            value = self.f(*args,**kwargs)                
        finally:
            traced.indent -= 1

        print('| ' * traced.indent + '`- ' + repr(value))
        return value
</snippet></ROW><ROW><id>15270770</id><snippet>l = list(map(str, args))
l.extend([str(key) + '=' + str(value) for key, value in kwargs.items()])
</snippet></ROW><ROW><id>15270804</id><snippet>write()</snippet></ROW><ROW><id>15270804</id><snippet>f.write('%s:%s\n' % (url, e))
</snippet></ROW><ROW><id>15270847</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>15270847</id><snippet>else</snippet></ROW><ROW><id>15270847</id><snippet>from myapp import app

# logging stuff
# app.logger.setHandler(...)

# more configuration

# do some stuff for apache (?)
</snippet></ROW><ROW><id>15270847</id><snippet>from myapp import app
app.run(debug=True)
</snippet></ROW><ROW><id>15270855</id><snippet>None</snippet></ROW><ROW><id>15270855</id><snippet>def transform_point(self, x=None, y=None):
    if x is None:
        x = self.x
    if y is None:
        y = self.y
</snippet></ROW><ROW><id>15270855</id><snippet>x</snippet></ROW><ROW><id>15270855</id><snippet>y</snippet></ROW><ROW><id>15270855</id><snippet>None</snippet></ROW><ROW><id>15270855</id><snippet>object()</snippet></ROW><ROW><id>15270855</id><snippet>_sentinel = object()

def transform_point(self, x=_sentinel, y=_sentinel):
    if x is _sentinel:
        x = self.x
    if y is _sentinel:
        y = self.y
</snippet></ROW><ROW><id>15270855</id><snippet>.transform_point(None, None)</snippet></ROW><ROW><id>15271018</id><snippet>focus_set</snippet></ROW><ROW><id>15271018</id><snippet>w.bind("&lt;1&gt;", lambda event: w.focus_set())
</snippet></ROW><ROW><id>15271082</id><snippet>&lt;p&gt;label for="id_new_user"&gt;New user:&lt;/label&gt;
   &lt;input type="checkbox" name="new_user" id="id_new_user" 
        onclick="javascript:toggleDiv('user_choice');" checked/&gt;&lt;/p&gt; 

&lt;p id="user_choice" style="display:none"&gt;        
    &lt;label for="id_user"&gt;User:&lt;/label&gt; 
    &lt;select name="user" id="id_user"&gt;
        &lt;option value="" selected="selected"&gt;---------&lt;/option&gt;
        &lt;option value="1"&gt;sam&lt;/option&gt;
        &lt;option value="2"&gt;usertest&lt;/option&gt;
    &lt;/select&gt;
</snippet></ROW><ROW><id>15271082</id><snippet>class WorkflowForm(forms.Form):   
    new_user = forms.BooleanField(required=False, initial=True)
    user = ModelChoiceField(queryset=User.objects.all())
    description = forms.CharField(required=False, widget=forms.Textarea)

    def __init__(self, user, *args, **kwargs):
        super(WorkflowForm, self).__init__(*args, **kwargs)
        self.fields['user'].queryset = User.objects.all()
        self.fields['user'].widget.attrs['style'] = 'display:none'
        self.fields['user'].widget.attrs['id'] = 'user_choice'
        self.fields['new_user'].widget.attrs['onclick'] = "javascript:toggleDiv('user_choice');"
</snippet></ROW><ROW><id>15271082</id><snippet>{{form.as_p}}

&lt;script&gt;
function toggleDiv(divId) {
    $("#"+divId).toggle(500);
}
&lt;/script&gt;
</snippet></ROW><ROW><id>15271604</id><snippet>app.run(port=8080,host='0.0.0.0')
</snippet></ROW><ROW><id>15271837</id><snippet>word = 'abcd'

def do_something(word):
    return [word[:x + 1] for x in xrange(len(word))]

print do_something(word)
</snippet></ROW><ROW><id>15271837</id><snippet>['a', 'ab', 'abc', 'abcd']
</snippet></ROW><ROW><id>15271977</id><snippet>dbb.commit()
</snippet></ROW><ROW><id>15271977</id><snippet>curb.execute ("UPDATE RadioGroups SET CurrentState=1 WHERE RadioID=11")</snippet></ROW><ROW><id>15272213</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>15272213</id><snippet>href</snippet></ROW><ROW><id>15272213</id><snippet>for elt in root.xpath('//a'):
    print(elt.attrib['href'], elt.text_content())
</snippet></ROW><ROW><id>15272536</id><snippet>&gt;&gt;&gt; "[{\"id\": 2, \"name\": \"squats\", \"wrs\": [[\"55\", 9]]}]".replace('\\"',"\"")
'[{"id": 2, "name": "squats", "wrs": [["55", 9]]}]'
</snippet></ROW><ROW><id>15272536</id><snippet>&gt;&gt;&gt; "[{u'name': u'squats', u'wrs': [[u'99', 8]], u'id': 2}]".replace("u\'","\'")
"[{'name': 'squats', 'wrs': [['99', 8]], 'id': 2}]"
</snippet></ROW><ROW><id>15272745</id><snippet>import os</snippet></ROW><ROW><id>15272745</id><snippet>os</snippet></ROW><ROW><id>15272764</id><snippet>data_tupled_list = [(x[0],x[1]+x[2]) for x in zip(*data_list)]
</snippet></ROW><ROW><id>15272764</id><snippet>data_tupled_list = [(a,b+c) for a,b,c in zip(*data_list)]
</snippet></ROW><ROW><id>15272764</id><snippet>a</snippet></ROW><ROW><id>15272764</id><snippet>b</snippet></ROW><ROW><id>15272764</id><snippet>c</snippet></ROW><ROW><id>15273467</id><snippet>gettext</snippet></ROW><ROW><id>15273467</id><snippet>JText::_</snippet></ROW><ROW><id>15273467</id><snippet>gettext</snippet></ROW><ROW><id>15273467</id><snippet>gettext</snippet></ROW><ROW><id>15273467</id><snippet>gettext</snippet></ROW><ROW><id>15273467</id><snippet>_('Welcome to my site. Check out our cool &lt;a href="/products"&gt;products&lt;/a&gt; \
you should not miss.')
</snippet></ROW><ROW><id>15273467</id><snippet>msgid</snippet></ROW><ROW><id>15273467</id><snippet>_('Welcome to my site. Check out our cool ') + '&lt;a href="/products"&gt;' +\
_('products') + '&lt;/a&gt;' + _(' you should not miss.')
</snippet></ROW><ROW><id>15273467</id><snippet>msgid</snippet></ROW><ROW><id>15273467</id><snippet>printf</snippet></ROW><ROW><id>15273467</id><snippet>_('Welcome to my site. Check out our cool %sproducts%s you should not miss.' % \
('&lt;a href="/products"&gt;', '&lt;/a&gt;')
</snippet></ROW><ROW><id>15273467</id><snippet>%s</snippet></ROW><ROW><id>15273467</id><snippet>sproducts</snippet></ROW><ROW><id>15273467</id><snippet>&lt;/a&gt;</snippet></ROW><ROW><id>15273467</id><snippet>_('Welcome to my site. Check out our cool %s \
you should not miss.') % ('&lt;a href="%s"&gt;%s&lt;/a&gt;' % ('/products', _('products')))
</snippet></ROW><ROW><id>15273467</id><snippet>_('Welcome to my site. Checkout our cool ${product_url} \
you should not miss.')
</snippet></ROW><ROW><id>15273467</id><snippet>${'This is a &lt;a href="/"&gt;url&lt;/a&gt;'}
</snippet></ROW><ROW><id>15273467</id><snippet>|n</snippet></ROW><ROW><id>15273467</id><snippet>'&lt;a href="%s"&gt;%s&lt;/a&gt;' % ('/products', _('products'))
</snippet></ROW><ROW><id>15273467</id><snippet>'&lt;a href="%s"&gt;%s&lt;/a&gt;' % (escape('/products'), _('products'))
</snippet></ROW><ROW><id>15273467</id><snippet>escape</snippet></ROW><ROW><id>15273467</id><snippet>markupsafe</snippet></ROW><ROW><id>15273467</id><snippet>request.route_url('products_view')</snippet></ROW><ROW><id>15273467</id><snippet>mapping</snippet></ROW><ROW><id>15273467</id><snippet>translationstring</snippet></ROW><ROW><id>15273467</id><snippet>_('Welcome to my site. Checkout our cool ${product_url} \
you should not miss.', mapping={'product_url': '&lt;a href="%s"&gt;%s&lt;/a&gt;' %\
(escape(request.route_url('products_view')), _('products'))})
</snippet></ROW><ROW><id>15273467</id><snippet>msgid</snippet></ROW><ROW><id>15273467</id><snippet>_('products')</snippet></ROW><ROW><id>15273648</id><snippet>from rpy2.robjects.lib import ggplot2

class GeomDotplot(ggplot2.Geom):
    _constructor = ggplot2.ggplot2_env['geom_dotplot']
ggplot2.geom_dotplot = GeomDotplot.new
</snippet></ROW><ROW><id>15273749</id><snippet>(7, 10)</snippet></ROW><ROW><id>15273749</id><snippet>(11, 13)</snippet></ROW><ROW><id>15273749</id><snippet>(7, 13)</snippet></ROW><ROW><id>15273749</id><snippet>a = [(7, 10), (11, 13), (11, 15), (14, 20), (23, 39)]
b = []
for begin,end in sorted(a):
    if b and b[-1][1] &gt;= begin - 1:
        b[-1] = (b[-1][0], end)
    else:
        b.append((begin, end))
</snippet></ROW><ROW><id>15273749</id><snippet>b</snippet></ROW><ROW><id>15273749</id><snippet>[(7, 20), (23, 39)]
</snippet></ROW><ROW><id>15273959</id><snippet>0</snippet></ROW><ROW><id>15273959</id><snippet>np.inf</snippet></ROW><ROW><id>15273959</id><snippet>y</snippet></ROW><ROW><id>15273959</id><snippet>calculcate</snippet></ROW><ROW><id>15273959</id><snippet>def calculate(y1, y2, y):
    if not isinstance(y, np.ndarray):
        y = np.array(y)

    if not np.isfinite(y):
        print 'bad y array values'
        return

    elif np.sum(y == 0) &gt; 0:
        print 'zero values in y'
        return

    # the rest of your code
</snippet></ROW><ROW><id>15273959</id><snippet>RunTimeWarning</snippet></ROW><ROW><id>15273959</id><snippet>calculate</snippet></ROW><ROW><id>15274155</id><snippet>class A_meta(type):
    def __init__(cls, *args):
        type.__init__(cls, *args)
        if hasattr(cls, 'VAL'):
            cls.big_attr = heavy_func(cls.VAL)

class A(object):
    __metaclass__ = A_meta

class B(A):
        VAL = 'b'

class C(A):
        VAL = 'c'
</snippet></ROW><ROW><id>15274155</id><snippet>class A(object):
    def __getattr__(self, attr):
        if attr == 'big_attr':
            self.__class__.big_attr = heavy_func(self.VAL)
        return object.__getattribute__(self, attr)
</snippet></ROW><ROW><id>15274202</id><snippet>def vencedor_linha(t):
    tl1=(t[0],t[1],t[2])
    tl2=(t[3],t[4],t[5])
    tl3=(t[6],t[7],t[8])
    tl=(tl1,tl2,tl3)
    for row in tl:
        if all(x == 'X' for x in row) or all(x == 'O' for x in row):
            return True
    return False
</snippet></ROW><ROW><id>15274453</id><snippet>import *</snippet></ROW><ROW><id>15274705</id><snippet>ind = [uberdata.index(i) for i in order]
</snippet></ROW><ROW><id>15274705</id><snippet>order</snippet></ROW><ROW><id>15275167</id><snippet>&gt;&gt;&gt; text = u"don\u2019t think"
&gt;&gt;&gt; textencode = text.encode('utf-8').split(" ")
&gt;&gt;&gt; print textencode[0]
donât
</snippet></ROW><ROW><id>15275167</id><snippet>&gt;&gt;&gt; text = "don\u2019t think"
&gt;&gt;&gt; textencode = text.split(" ")
&gt;&gt;&gt; textencode
['donât', 'think']
</snippet></ROW><ROW><id>15275332</id><snippet>import smtplib

def prompt(prompt):
    return raw_input(prompt).strip()

fromaddr = prompt("From: ")
toaddrs  = prompt("To: ").split()
print "Enter message, end with ^D (Unix) or ^Z (Windows):"

# Add the From: and To: headers at the start!
msg = ("From: %s\r\nTo: %s\r\n\r\n"
       % (fromaddr, ", ".join(toaddrs)))
while 1:
    try:
        line = raw_input()
    except EOFError:
        break
    if not line:
        break
    msg = msg + line

print "Message length is " + repr(len(msg))

server = smtplib.SMTP('localhost')
server.set_debuglevel(1)
server.sendmail(fromaddr, toaddrs, msg)
server.quit()
</snippet></ROW><ROW><id>15275392</id><snippet>i</snippet></ROW><ROW><id>15275392</id><snippet>key</snippet></ROW><ROW><id>15275392</id><snippet>key = int(key)
</snippet></ROW><ROW><id>15275560</id><snippet>for</snippet></ROW><ROW><id>15275560</id><snippet>return False</snippet></ROW><ROW><id>15275560</id><snippet>def search (filetosearch, query):
    with open(filetosearch, 'r') as inF:
        for line in inF:
            if query in line:
                return True

    return False
</snippet></ROW><ROW><id>15275560</id><snippet>break</snippet></ROW><ROW><id>15275560</id><snippet>break</snippet></ROW><ROW><id>15275717</id><snippet>else</snippet></ROW><ROW><id>15275717</id><snippet>if</snippet></ROW><ROW><id>15275717</id><snippet>for div in range(3, n, 2):
  if (n % div == 0):
    # not a prime
    n += 1
    break
else:
  ...
</snippet></ROW><ROW><id>15275717</id><snippet>if</snippet></ROW><ROW><id>15275717</id><snippet>else</snippet></ROW><ROW><id>15275717</id><snippet>for</snippet></ROW><ROW><id>15275717</id><snippet>else</snippet></ROW><ROW><id>15275717</id><snippet>else</snippet></ROW><ROW><id>15275717</id><snippet>break</snippet></ROW><ROW><id>15275935</id><snippet>check_same_thread</snippet></ROW><ROW><id>15275935</id><snippet>True</snippet></ROW><ROW><id>15275962</id><snippet>&gt;&gt;&gt; l = ['A', 'B', 'C']
&gt;&gt;&gt; print '%s %s %s' % tuple(l)
A B C
</snippet></ROW><ROW><id>15275962</id><snippet>&gt;&gt;&gt; print " ".join(l)
A B C
</snippet></ROW><ROW><id>15276206</id><snippet>from operator import itemgetter
from itertools import groupby
full_list = [0,1,2,3,10,11,12,59]
cont = [map(itemgetter(1), g) for k, g in groupby(enumerate(full_list), lambda (i,x):i-x)]
# [[0, 1, 2, 3], [10, 11, 12], [59]]
</snippet></ROW><ROW><id>15276290</id><snippet>&gt; d = {'1': 1, '2': 2, '3': 3}
&gt; d.get('1')
1
</snippet></ROW><ROW><id>15276290</id><snippet>&gt; int('1') + int('2')
3
</snippet></ROW><ROW><id>15276352</id><snippet>for name in namelist:
    firstname = library.find('.//firstname[@name="{}"]'.format(name))
</snippet></ROW><ROW><id>15276914</id><snippet>People.objects.all().order_by()
</snippet></ROW><ROW><id>15276922</id><snippet>1e-4</snippet></ROW><ROW><id>15276922</id><snippet>Decimal</snippet></ROW><ROW><id>15276922</id><snippet>&gt;&gt;&gt; print '{:4.0e}'.format(100*0.000001)
1e-04
</snippet></ROW><ROW><id>15276922</id><snippet>&gt;&gt;&gt; Decimal(100)*Decimal('0.000001')
Decimal('0.000100')
</snippet></ROW><ROW><id>15277046</id><snippet>&gt;&gt;&gt; sample = u'some stuff: Ã©Å'
&gt;&gt;&gt; ''.join(c if 0 &lt; ord(c) &lt;= 127 else '\\u{:04x}'.format(ord(c)) for c in sample)
u'some stuff: \\u00e9\\u0158'
&gt;&gt;&gt; print ''.join(c if 0 &lt; ord(c) &lt;= 127 else '\\u{:04x}'.format(ord(c)) for c in sample)
some stuff: \u00e9\u0158
</snippet></ROW><ROW><id>15277046</id><snippet>&gt;&gt;&gt; sample.encode('utf-16')
'\xff\xfes\x00o\x00m\x00e\x00 \x00s\x00t\x00u\x00f\x00f\x00:\x00 \x00\xe9\x00X\x01'
</snippet></ROW><ROW><id>15277125</id><snippet>dict</snippet></ROW><ROW><id>15277125</id><snippet>for-loop</snippet></ROW><ROW><id>15277125</id><snippet>list_of_dicts = [{'keys1.1' : 'value1.1',
                   'key1.2':'values1.2'},
                 {'keys2.1':'value2.1'},
                 {'key3.1':'value3.1'}]


for item in list_of_dicts:
  for key, value in item.iteritems()
    print key, value
    print "The key is {0} with a value of {1}".format(key, value)
#or
for item in list_of_dicts:
  for key in item.keys():
    print item[key]
    print "The key is {0} with a value of {1}".format(key, item[key])
</snippet></ROW><ROW><id>15277395</id><snippet>old = {1: 'one', 2: 'two'}
new = {1: 'newone', 2: None, 3: 'new'}

old.update( (k,v) for k,v in new.iteritems() if v is not None)

# {1: 'newone', 2: 'two', 3: 'new'}
</snippet></ROW><ROW><id>15277424</id><snippet>d[(attrib_a, attrib_b)] = t
</snippet></ROW><ROW><id>15277424</id><snippet>d[attrib_a, attrib_b] = t
</snippet></ROW><ROW><id>15277825</id><snippet>True</snippet></ROW><ROW><id>15277825</id><snippet>False</snippet></ROW><ROW><id>15277825</id><snippet>True</snippet></ROW><ROW><id>15277825</id><snippet>True</snippet></ROW><ROW><id>15277825</id><snippet>def determina_vencedor(t):
    if vencedor_coluna(t):
        return True

    if vencedor_linha(t)
        return True

    if vencedor_diagonal(t)
        return True

    return False
</snippet></ROW><ROW><id>15277825</id><snippet>def determina_vencedor(t):
    for func in (vencedor_coluna, vencedor_linha, vencedor_diagonal):
        if func(t):
            return True
    return False
</snippet></ROW><ROW><id>15277825</id><snippet>any()</snippet></ROW><ROW><id>15277825</id><snippet>def determina_vencedor(t):
    return any(f(t) for f in (vencedor_coluna, vencedor_linha, vencedor_diagonal))
</snippet></ROW><ROW><id>15278217</id><snippet>x</snippet></ROW><ROW><id>15278217</id><snippet>inverse</snippet></ROW><ROW><id>15278217</id><snippet>inverse</snippet></ROW><ROW><id>15278217</id><snippet>x</snippet></ROW><ROW><id>15278217</id><snippet>x</snippet></ROW><ROW><id>15278217</id><snippet>y</snippet></ROW><ROW><id>15278217</id><snippet>In [84]: x = np.array([1,2,2,3])

In [85]: y, inverse = np.unique(x, return_inverse=True)

In [86]: y
Out[86]: array([1, 2, 3])

In [87]: inverse
Out[87]: array([0, 1, 1, 2])

In [88]: np.bincount(inverse)
Out[88]: array([1, 2, 1])

In [89]: np.column_stack((y,np.bincount(inverse)))
Out[89]: 
array([[1, 1],
       [2, 2],
       [3, 1]])
</snippet></ROW><ROW><id>15278217</id><snippet>x</snippet></ROW><ROW><id>15278217</id><snippet>x</snippet></ROW><ROW><id>15278217</id><snippet>In [173]: x = np.random.random(1000)

In [174]: x.sort()

In [156]: %timeit using_unique(x)
10000 loops, best of 3: 99.7 us per loop

In [180]: %timeit using_groupby(x)
100 loops, best of 3: 3.64 ms per loop

In [157]: %timeit using_counter(x)
100 loops, best of 3: 4.31 ms per loop

In [158]: %timeit using_ordered_dict(x)
100 loops, best of 3: 4.7 ms per loop
</snippet></ROW><ROW><id>15278217</id><snippet>len(x)</snippet></ROW><ROW><id>15278217</id><snippet>using_unique</snippet></ROW><ROW><id>15278217</id><snippet>using_unique</snippet></ROW><ROW><id>15278217</id><snippet>len(x)</snippet></ROW><ROW><id>15278217</id><snippet>import numpy as np
import collections
import itertools as IT
import matplotlib.pyplot as plt
import timeit

def using_unique(x):
    y, inverse = np.unique(x, return_inverse=True)
    return np.column_stack((y, np.bincount(inverse)))

def using_counter(x):
    result = collections.Counter(x)
    return np.array(sorted(result.items()))

def using_ordered_dict(x):
    result = collections.OrderedDict()
    for item in x:
        result[item] = result.get(item,0)+1
    return np.array(result.items())

def using_groupby(x):
    return np.array([(k, sum(1 for i in g)) for k, g in IT.groupby(x)])

fig, ax = plt.subplots()
timing = collections.defaultdict(list)
Ns = [int(round(n)) for n in np.logspace(0, 3, 10)]
for n in Ns:
    x = np.random.random(n)
    x.sort()
    timing['unique'].append(
        timeit.timeit('m.using_unique(m.x)', 'import __main__ as m', number=1000))
    timing['counter'].append(
        timeit.timeit('m.using_counter(m.x)', 'import __main__ as m', number=1000))
    timing['ordered_dict'].append(
        timeit.timeit('m.using_ordered_dict(m.x)', 'import __main__ as m', number=1000))
    timing['groupby'].append(
        timeit.timeit('m.using_groupby(m.x)', 'import __main__ as m', number=1000))

ax.plot(Ns, timing['unique'], label='using_unique')
ax.plot(Ns, timing['counter'], label='using_counter')
ax.plot(Ns, timing['ordered_dict'], label='using_ordered_dict')
ax.plot(Ns, timing['groupby'], label='using_groupby')
plt.legend(loc='best')
plt.ylabel('milliseconds')
plt.xlabel('size of x')
plt.show()
</snippet></ROW><ROW><id>15278302</id><snippet>allow_reuse_address</snippet></ROW><ROW><id>15278302</id><snippet>SocketServer.TCPServer.allow_reuse_address = True
httpd = SocketServer.TCPServer(("", PORT), MyRequestHandler)
</snippet></ROW><ROW><id>15278497</id><snippet>UUID()</snippet></ROW><ROW><id>15278497</id><snippet>TypeError</snippet></ROW><ROW><id>15278497</id><snippet>ValueError</snippet></ROW><ROW><id>15278497</id><snippet>hex</snippet></ROW><ROW><id>15278497</id><snippet>bytes</snippet></ROW><ROW><id>15278497</id><snippet>bytes_le</snippet></ROW><ROW><id>15278497</id><snippet>fields</snippet></ROW><ROW><id>15278497</id><snippet>int</snippet></ROW><ROW><id>15278497</id><snippet>TypeError</snippet></ROW><ROW><id>15278497</id><snippet>ValueError</snippet></ROW><ROW><id>15278497</id><snippet>&gt;&gt;&gt; uuid.UUID()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/uuid.py", line 129, in __init__
    raise TypeError('need one of hex, bytes, bytes_le, fields, or int')
TypeError: need one of hex, bytes, bytes_le, fields, or int
&gt;&gt;&gt; uuid.UUID('abcd')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/uuid.py", line 134, in __init__
    raise ValueError('badly formed hexadecimal UUID string')
ValueError: badly formed hexadecimal UUID string
&gt;&gt;&gt; uuid.UUID(bytes='abcd')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/uuid.py", line 144, in __init__
    raise ValueError('bytes is not a 16-char string')
ValueError: bytes is not a 16-char string
</snippet></ROW><ROW><id>15278497</id><snippet>None</snippet></ROW><ROW><id>15278497</id><snippet>myUUID</snippet></ROW><ROW><id>15278497</id><snippet>UUID</snippet></ROW><ROW><id>15278586</id><snippet>first_50 = app.questionSearch({'query':'tornado', 'start' : 0, 'results' : 50})
next_50 = app.questionSearch({'query':'tornado', 'start' : 50, 'results' : 50})
</snippet></ROW><ROW><id>15278698</id><snippet>import ogr

driver = ogr.GetDriverByName('ESRI Shapefile')

lineshp = driver.Open('U:/My Documents/Tool/shp/line.shp', 0)
linelyr = lineshp.GetLayer()

pointshp = driver.Open('U:/My Documents/Tool/shp/point.shp', 0)
pointlyr = pointshp.GetLayer()

linefeat = linelyr.GetNextFeature()
pointfeat = pointlyr.GetNextFeature()

point_geom = pointfeat.GetGeometryRef()

distlist = []
while linefeat:
    line_geom = linefeat.GetGeometryRef()
    dist = point_geom.Distance(line_geom)
    distlist.append(dist)
    linefeat.Destroy()
    linefeat = linelyr.GetNextFeature()

print min(distlist)
</snippet></ROW><ROW><id>15278726</id><snippet>TypeError: cannot concatenate 'str' and 'int' objects</snippet></ROW><ROW><id>15278726</id><snippet>"\t".join(x) + 1</snippet></ROW><ROW><id>15278726</id><snippet>join</snippet></ROW><ROW><id>15278726</id><snippet>1</snippet></ROW><ROW><id>15278726</id><snippet>outPut.write("\t".join(x) + "1")</snippet></ROW><ROW><id>15278726</id><snippet>foo
bar
baz
</snippet></ROW><ROW><id>15278726</id><snippet>qux
bar
qux
</snippet></ROW><ROW><id>15278726</id><snippet>f   o   o   
0b  a   r   
1b  a   z0
</snippet></ROW><ROW><id>15278726</id><snippet>outPut.write("\t".join(x) + "1")</snippet></ROW><ROW><id>15278726</id><snippet>"\t".join(x)</snippet></ROW><ROW><id>15278726</id><snippet>outPut.write(x + "\t1")</snippet></ROW><ROW><id>15278726</id><snippet>foo
    0bar
    1baz    0
</snippet></ROW><ROW><id>15278726</id><snippet>x</snippet></ROW><ROW><id>15278726</id><snippet>outPut.write(x.rstrip() + "\t1\n")</snippet></ROW><ROW><id>15278726</id><snippet>f1 = open('text-1.txt', 'r')
f2 = open('text-2.txt', 'r')

fileOne= f1.readlines()
fileTwo = f2.readlines()

outPut = open('output.txt', 'w')

for x,y in zip(fileOne,fileTwo):
    if x==y:
        outPut.write(x.rstrip() + "\t1\n")

    else:
        outPut.write(x.rstrip() + "\t0\n")


f1.close()
f2.close()
outPut.close()
</snippet></ROW><ROW><id>15278726</id><snippet>foo 0
bar 1
baz 0
</snippet></ROW><ROW><id>15279243</id><snippet>getattr</snippet></ROW><ROW><id>15279243</id><snippet>setattr</snippet></ROW><ROW><id>15279243</id><snippet>db = getattr(connection,dbname)
</snippet></ROW><ROW><id>15279243</id><snippet>setattr</snippet></ROW><ROW><id>15279243</id><snippet>getattr</snippet></ROW><ROW><id>15279243</id><snippet>db = connection.DBNAME
db = getattr(connection,'DBNAME')
</snippet></ROW><ROW><id>15279256</id><snippet>import subprocess # This is how we're going to call the commands.

samples = {} # Empty dict
with open('inputfile','r') as f:
    for line in f:
        # Extract sampleID, other things depending on file format...

        samples[sampleID] = [rgid, rglb, grpl, rgpu, rgsm] # Populate dict

for sampleID in samples:
    rgid, rglb, grpl, rgpu, rgsm = samples[sampleID]

    # Now you can run your commands using the subprocess module.
    # Remember to add a change based on sampleID if e.g. the IO files differ.
    subprocess.call(['picard-tools', 'AddOrReplaceReadGroups', 'I=input.bam', 
        'O=output.bam', 'RGID=%s' % rgid, 'RGLB=%s' % rglb, 'RGPL=%s' %rgpl,
        'RGPU=%s' % rgpu, 'RGSM=%s' % rgsm, 'VALIDATION_STRINGENCY=SILENT', 
        'SORT_ORDER=coordinate', 'CREATE_INDEX=true'])
</snippet></ROW><ROW><id>15279472</id><snippet> xAxis: {
     type: 'datetime',
     categories: {{ months|safe }},
     etc...........
 },series: [
        {% for location in locations %}
        {
            name: Here would go the name of {{location.name}},
            data: [
               {% for data in location_data %}
               {{data}},
               {% endfor %}
            ]
        },
        {% endfor %}
 ]
</snippet></ROW><ROW><id>15279522</id><snippet>collections.Counter</snippet></ROW><ROW><id>15279522</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter([7,9,9,9,9])
&gt;&gt;&gt; max(c.items(), key=lambda x:x[1])[0]
9
</snippet></ROW><ROW><id>15279631</id><snippet>part_list = ['ccs', 'fcex', '8-12', '8-15', '8-15b', '80ha3']
items = []
f = open("C:/Users/SilenX/Desktop/python/frys.txt", "r") # Open the file
for line in f:
    for token in line.lower().split(): # Loop over lowercase words in the line
        if token in part_list: # If it's one of the words you're looking for,
            items.append(token) # Append it to your list.
f.close()
print items
</snippet></ROW><ROW><id>15279631</id><snippet>"ccs."</snippet></ROW><ROW><id>15279631</id><snippet>"fcex8-12"</snippet></ROW><ROW><id>15279631</id><snippet>part_list</snippet></ROW><ROW><id>15279631</id><snippet>part_list</snippet></ROW><ROW><id>15279680</id><snippet>count</snippet></ROW><ROW><id>15279917</id><snippet>_&lt;classname&gt;</snippet></ROW><ROW><id>15279917</id><snippet>self._Client__serverUrl = ...
</snippet></ROW><ROW><id>15279939</id><snippet>#!python2.7
print "Hello"
</snippet></ROW><ROW><id>15279939</id><snippet>#!python3.3
print("World")
</snippet></ROW><ROW><id>15279943</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>15279943</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(html_doc)
page_images = [image["src"] for image in soup.findAll("img")]
</snippet></ROW><ROW><id>15279943</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>15279943</id><snippet>pip install beautifulsoup4</snippet></ROW><ROW><id>15280058</id><snippet>formatter %</snippet></ROW><ROW><id>15280058</id><snippet>formatter = "One: %r, Two: %r, Three: %r, Four: %r"
</snippet></ROW><ROW><id>15280058</id><snippet>%r</snippet></ROW><ROW><id>15280082</id><snippet>ret = pex.expect([r'^((?!' + re.escape(line) + ').)*$', pexpect.EOF, pexpect.TIMEOUT], timeout)
</snippet></ROW><ROW><id>15280082</id><snippet>hello world</snippet></ROW><ROW><id>15280082</id><snippet>hello world -&gt; won't match
hello world 2 -&gt; won't match
my hello world -&gt; won't match
hello worl -&gt; will match
</snippet></ROW><ROW><id>15280354</id><snippet>__init__.py</snippet></ROW><ROW><id>15280354</id><snippet>__init__.py</snippet></ROW><ROW><id>15280354</id><snippet>from package import module</snippet></ROW><ROW><id>15280354</id><snippet>module</snippet></ROW><ROW><id>15280354</id><snippet>sys.modules</snippet></ROW><ROW><id>15280354</id><snippet>sys.modules</snippet></ROW><ROW><id>15280354</id><snippet>from package.subpackage import mod</snippet></ROW><ROW><id>15280354</id><snippet>sys.modules</snippet></ROW><ROW><id>15280354</id><snippet>"package.subpackage.mod"</snippet></ROW><ROW><id>15280354</id><snippet>def simpleFunction():
    pass

# open files, read huge amounts of data, do slow stuff here
</snippet></ROW><ROW><id>15280354</id><snippet>def simpleFunction():
    pass

def loadData():
    # open files, read huge amounts of data, do slow stuff here
</snippet></ROW><ROW><id>15280354</id><snippet>someModule.loadData()</snippet></ROW><ROW><id>15280354</id><snippet>from someExtensionModule import someFunction</snippet></ROW><ROW><id>15280403</id><snippet>itertools.groupby</snippet></ROW><ROW><id>15280403</id><snippet>lst = [ 1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0]

from itertools import groupby
from operator import itemgetter

for k,v in groupby(enumerate(lst),key=itemgetter(1)):
    if k:
        v = list(v)
        print v[0][0],v[-1][0]
</snippet></ROW><ROW><id>15280586</id><snippet>LANG</snippet></ROW><ROW><id>15280630</id><snippet>reduce</snippet></ROW><ROW><id>15280630</id><snippet>&gt;&gt;&gt; class Foo(object): pass
... 
&gt;&gt;&gt; a = Foo()
&gt;&gt;&gt; a.foo = Foo()
&gt;&gt;&gt; a.foo.bar = Foo()
&gt;&gt;&gt; a.foo.bar.baz = Foo()
&gt;&gt;&gt; a.foo.bar.baz.qux = Foo()
&gt;&gt;&gt; 
&gt;&gt;&gt; reduce(lambda x,y:getattr(x,y,''),['foo','bar','baz','qux'],a)
&lt;__main__.Foo object at 0xec2f0&gt;
&gt;&gt;&gt; reduce(lambda x,y:getattr(x,y,''),['foo','bar','baz','qux','quince'],a)
''
</snippet></ROW><ROW><id>15280630</id><snippet>reduce</snippet></ROW><ROW><id>15280630</id><snippet>functools</snippet></ROW><ROW><id>15280630</id><snippet>def attr_getter(item,attributes)
    for a in attributes:
        try:
            item = getattr(item,a)
        except AttributeError:
            return None #or whatever on error
    return item
</snippet></ROW><ROW><id>15280630</id><snippet>try:
   title = foo.bar.baz.qux
except AttributeError:
   title = None
</snippet></ROW><ROW><id>15280707</id><snippet>lookup = {s: i for i, s in enumerate(code_order)}
print(sorted(l, key=lambda o: lookup[o['code']]))
</snippet></ROW><ROW><id>15280707</id><snippet>lookup = dict((s, i) for i, s in enumerate(code_order))
print sorted(l, key=lambda o: lookup[o['code']])
</snippet></ROW><ROW><id>15281128</id><snippet>os.system('''awk 'BEGIN
    {FS="\t";OFS="\n"} {a[$1]=a
    [$1] OFS $2 FS $3 FS $4} END
    {for (i in a) {print i a[i]}}'
    2_lcsorted.txt &gt;
    2_locus_2.txt''')</snippet></ROW><ROW><id>15281128</id><snippet>subprocess.call('''awk 'BEGIN
    {FS="\t";OFS="\n"} {a[$1]=a
    [$1] OFS $2 FS $3 FS $4} END
    {for (i in a) {print i a[i]}}'
    2_lcsorted.txt &gt;
    2_locus_2.txt''')</snippet></ROW><ROW><id>15281128</id><snippet>subprocess.call(cmd, shell=True)</snippet></ROW><ROW><id>15281179</id><snippet>environ_base</snippet></ROW><ROW><id>15281179</id><snippet>get()</snippet></ROW><ROW><id>15281179</id><snippet>post()</snippet></ROW><ROW><id>15281179</id><snippet>client = app.test_client()
response = client.get('/your/url/', 
                      environ_base={'HTTP_USER_AGENT': 'Chrome, etc'})
</snippet></ROW><ROW><id>15281179</id><snippet>request.user_agent</snippet></ROW><ROW><id>15281179</id><snippet>request.headers['User-Agent']</snippet></ROW><ROW><id>15281213</id><snippet>self = view.view_class(*class_args, **class_kwargs)
</snippet></ROW><ROW><id>15281213</id><snippet>as_view</snippet></ROW><ROW><id>15281213</id><snippet>view</snippet></ROW><ROW><id>15281253</id><snippet>import maya.cmds as cmds

class image(object):
    def __init__(self,name):
        plane = cmds.nurbsPlane(axis=(0,0,0),width = 10)
        shader = cmds.shadingNode('surfaceShader', asShader=True)
        SG = cmds.sets(empty=True, renderable=True, 
                       noSurfaceShader=True, name=shader+"SG")
        cmds.connectAttr(shader+'.outColor', SG+".surfaceShader",
                         force=True)
        img = cmds.shadingNode('file', asTexture=True)
        cmds.setAttr(img+'.fileTextureName', name, type='string')
        cmds.connectAttr(img+'.outColor', shader+'.outColor',
                         force=True)
        # you should connect to a texture placement node and
        # its numerous connectins here
        cmds.sets(plane[0], edit=True, forceElement=SG)


name=r'C:\Desert.jpg'
temp = image(name)
</snippet></ROW><ROW><id>15281343</id><snippet>myDict = {'level1':
         {'level2':(1, 2),
          'level3':
                [
                 {'level4': (1, 2)},
                 {'level5': (1, 2)},
                ], 
         'level6': [1,2,3], 
         'level7':{'level8': (1,2), 'level9': (1,2)}
         }
    }



def prettyPrint(dictionary, ident = '', braces=1):
    for key, value in dictionary.iteritems():
        if isinstance(value, dict):
            print '%s%s%s%s' % (ident, braces*'[', key, braces*']') 
            prettyPrint(value, ident+'  ', braces+1)
        elif isinstance(value, list):
            ndict=0
            for v in value:
                if isinstance(v, dict):
                    ndict += 1
            if ndict:
                print '%s%s' % (ident, key) 
                for e in value:
                    if isinstance(e, dict):
                        prettyPrint(e, ident+'  ', braces+1)
                    else: 
                         print ident+'%s : %s' %(key, e)
            else:
                print ident+'%s : %s' %(key, value)
        else:
            print ident+'%s : %s' %(key, value)

prettyPrint(myDict)


[level1]
  level2 : (1, 2)
  level3
    level4 : (1, 2)
    level5 : (1, 2)
  level6 : [1, 2, 3]
  [[level7]]
    level8 : (1, 2)
    level9 : (1, 2)
</snippet></ROW><ROW><id>15281495</id><snippet>[filter(None, comb) for comb in itertools.product(*[[None] + it for it in list_of_iterables])]
</snippet></ROW><ROW><id>15281495</id><snippet>filter</snippet></ROW><ROW><id>15281495</id><snippet>itertools.chain</snippet></ROW><ROW><id>15281495</id><snippet>[None] + it</snippet></ROW><ROW><id>15281515</id><snippet>.apply</snippet></ROW><ROW><id>15281515</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; df = pd.DataFrame({'A':[0,2,3,2,0,0],'B': [1,0,2,0,0,0],'C': [0,0,1,0,1,0]})
&gt;&gt;&gt; 
&gt;&gt;&gt; def classifier(row):
...         if row["A"] &gt; 0 and row["B"] == 0 and row["C"] == 0:
...                 return "c1"
...         elif row["A"] == 0 and (row["B"] &gt; 0 or row["C"] &gt; 0):
...                 return "c2"
...         else:
...                 return "c3"
...     
&gt;&gt;&gt; df["D"] = df.apply(classifier, axis=1)
&gt;&gt;&gt; df
   A  B  C   D
0  0  1  0  c2
1  2  0  0  c1
2  3  2  1  c3
3  2  0  0  c1
4  0  0  1  c2
5  0  0  0  c3
</snippet></ROW><ROW><id>15281515</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'A':[0,2,3,2,0,0],'B': [1,0,2,0,0,0],'C': [0,0,1,0,1,0]})
&gt;&gt;&gt; df["D"] = "c3"
&gt;&gt;&gt; df["D"][(df["A"] &gt; 0) &amp; (df["B"] == 0) &amp; (df["C"] == 0)] = "c1"
&gt;&gt;&gt; df["D"][(df["A"] == 0) &amp; ((df["B"] &gt; 0) | (df["C"] &gt; 0))] = "c2"
&gt;&gt;&gt; df
   A  B  C   D
0  0  1  0  c2
1  2  0  0  c1
2  3  2  1  c3
3  2  0  0  c1
4  0  0  1  c2
5  0  0  0  c3
</snippet></ROW><ROW><id>15281627</id><snippet>random.sample</snippet></ROW><ROW><id>15281627</id><snippet>&gt;&gt;&gt; random.sample([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 4)
[4, 2, 9, 0]
&gt;&gt;&gt; random.sample('even strings work', 4)
['n', 't', ' ', 'r']
</snippet></ROW><ROW><id>15281627</id><snippet>random</snippet></ROW><ROW><id>15281627</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; lst = list(range(10))
&gt;&gt;&gt; random.seed('just some random seed') # set the seed
&gt;&gt;&gt; random.sample(lst, 4)
[6, 7, 2, 1]
&gt;&gt;&gt; random.sample(lst, 4)
[6, 3, 1, 0]
&gt;&gt;&gt; random.seed('just some random seed') # use the same seed again
&gt;&gt;&gt; random.sample(lst, 4)
[6, 7, 2, 1]
&gt;&gt;&gt; random.sample(lst, 4)
[6, 3, 1, 0]
</snippet></ROW><ROW><id>15281678</id><snippet>import sys, os
[sys.path.remove(i) for i in sys.path if i == os.getcwd() or i == '']
from celery import Celery
</snippet></ROW><ROW><id>15281678</id><snippet>absolute_import</snippet></ROW><ROW><id>15281678</id><snippet>celery.py</snippet></ROW><ROW><id>15281678</id><snippet>from .celery import my_func
</snippet></ROW><ROW><id>15281895</id><snippet>__getitem__</snippet></ROW><ROW><id>15281895</id><snippet>__getitem__</snippet></ROW><ROW><id>15281895</id><snippet>__setitem__</snippet></ROW><ROW><id>15281895</id><snippet>p= Particle(foo)
bar = p[0]
</snippet></ROW><ROW><id>15281895</id><snippet>__init__</snippet></ROW><ROW><id>15281895</id><snippet>self</snippet></ROW><ROW><id>15281895</id><snippet>class Particle:
    def __init__(self, mass, position, velocity, force):
        self.mass = mass
        self.position = position
        self.velocity = velocity
        self.force = force
</snippet></ROW><ROW><id>15281895</id><snippet>mass,pos,vel,f = 0,0,0,0 # just for readability
p = Particle(mass,pos,vel,f)
print p.mass, p.position, p.velocity, p.force
</snippet></ROW><ROW><id>15281895</id><snippet>p</snippet></ROW><ROW><id>15281895</id><snippet>Particle</snippet></ROW><ROW><id>15281895</id><snippet>in [1]: p
out[1]: &lt;__main__.Particle instance at 0x03E1fE68&gt;
</snippet></ROW><ROW><id>15281895</id><snippet>__getitem__</snippet></ROW><ROW><id>15281895</id><snippet>in [2]: p.mass
out[2]: 0

in [3]: p.mass = 2 
in [4]: p.mass
out[4]: 2
</snippet></ROW><ROW><id>15281895</id><snippet>__init__</snippet></ROW><ROW><id>15281895</id><snippet>class</snippet></ROW><ROW><id>15281895</id><snippet>in [5]: p.newattr ='foobar!'
in [6]: p.newattr
out[6]: 'foobar!'
</snippet></ROW><ROW><id>15281967</id><snippet>/usr/lib/mailman/bin/ackpostforgmail.py</snippet></ROW><ROW><id>15281967</id><snippet>/usr/lib/mailman</snippet></ROW><ROW><id>15281967</id><snippet>cd /usr/lib/mailman/bin/</snippet></ROW><ROW><id>15281967</id><snippet>sudo withlist -r ackpostforgmail LISTNAME</snippet></ROW><ROW><id>15281967</id><snippet># Call this script with:
# cd /usr/lib/mailman/bin/
# withlist -r ackpostforgmail LISTNAME

from Mailman import mm_cfg

def ackpostforgmail(m):
    # m is the maillist object for the list LISTNAME

    # We need to lock the list, since we want to change something...
    m.Lock()

    print "Setting 'AcknowledgePosts' to True for all gmail adresses of the list..."
    for memb in m.members:
        # If the mailadress memb contains 'gmail'...
        if 'gmail' in memb:
            # ...set the ackpost option...
            prev_state = m.getMemberOption(memb, mm_cfg.AcknowledgePosts)
            m.setMemberOption(memb, mm_cfg.AcknowledgePosts,True)
            after_state = m.getMemberOption(memb, mm_cfg.AcknowledgePosts)

            print "%s: %s -&gt; %s" % (memb, prev_state, after_state)

    m.Save()
</snippet></ROW><ROW><id>15281967</id><snippet>-a</snippet></ROW><ROW><id>15281967</id><snippet>with_list</snippet></ROW><ROW><id>15281967</id><snippet>list_lists</snippet></ROW><ROW><id>15281989</id><snippet>ActionChains</snippet></ROW><ROW><id>15281989</id><snippet>browser</snippet></ROW><ROW><id>15281989</id><snippet>menu = browser.find_element_by_xpath("//nav/ul/li/a[@href='#'][.='Profile']")
hover = ActionChains(browser).move_to_element(menu)
hover.perform()
</snippet></ROW><ROW><id>15282163</id><snippet>TestCase</snippet></ROW><ROW><id>15282163</id><snippet>yield create_class(i)('test_fail')
</snippet></ROW><ROW><id>15282163</id><snippet>runTest</snippet></ROW><ROW><id>15282163</id><snippet>TestCase</snippet></ROW><ROW><id>15282163</id><snippet>import unittest

def create_class(param):
    class Test(unittest.TestCase):
        def setUp(self):
            pass

        def test_fail(self):
            print('executed')
            assert False
            print('after assert')

    return Test

def test_basic():
    for i in range(5):
        yield create_class(i)('test_fail')
</snippet></ROW><ROW><id>15282163</id><snippet>$ nosetests -s
executed
.executed
.executed
.executed
.executed
.
----------------------------------------------------------------------
Ran 5 tests in 0.004s

OK
</snippet></ROW><ROW><id>15282163</id><snippet>assert</snippet></ROW><ROW><id>15282163</id><snippet>TestCase</snippet></ROW><ROW><id>15282163</id><snippet>AssertionError</snippet></ROW><ROW><id>15282163</id><snippet>nose</snippet></ROW><ROW><id>15282163</id><snippet>TestCase.run</snippet></ROW><ROW><id>15282163</id><snippet>result</snippet></ROW><ROW><id>15282163</id><snippet>defaultTestResult()</snippet></ROW><ROW><id>15282163</id><snippet>run()</snippet></ROW><ROW><id>15282163</id><snippet>The same effect may be had by simply calling the TestCase instance.
</snippet></ROW><ROW><id>15282163</id><snippet>nose</snippet></ROW><ROW><id>15282163</id><snippet>TestCase</snippet></ROW><ROW><id>15282163</id><snippet>TestCase</snippet></ROW><ROW><id>15282163</id><snippet>TestCase</snippet></ROW><ROW><id>15282195</id><snippet>&gt;&gt;&gt; import uuid
&gt;&gt;&gt; # make a random UUID
&gt;&gt;&gt; u = uuid.uuid4()
&gt;&gt;&gt; u.hex
'f3db6f9a34ed48938a45113ac4b5f156'
</snippet></ROW><ROW><id>15282195</id><snippet>''.join(random.choice(string.ascii_letters + string.digits) for x in range(12))
</snippet></ROW><ROW><id>15282215</id><snippet>quadmesh.set_clim(vmin=0,vmax=15)
</snippet></ROW><ROW><id>15282666</id><snippet>numbers</snippet></ROW><ROW><id>15282666</id><snippet>numbers=[]
while len(number)!=i:
    # ...
</snippet></ROW><ROW><id>15282688</id><snippet>ranges</snippet></ROW><ROW><id>15282688</id><snippet>success_codes = range(200, 300)
retry_code    = range(400, 405) + range(500, 504)
fail_codes    = range(504, 507)
</snippet></ROW><ROW><id>15282688</id><snippet>success_codes = list(range(200, 300))
retry_code    = list(range(400, 405)) + list(range(500, 504))
fail_codes    = list(range(504, 507))
</snippet></ROW><ROW><id>15282691</id><snippet>zip = zipfile.ZipFile('test.zip')
file = zip.read('text1.txt')
</snippet></ROW><ROW><id>15282691</id><snippet>import zipfile</snippet></ROW><ROW><id>15282772</id><snippet>ss = "spam bar ds&lt;hai bye&gt;sd baz eggs ZQ&lt;boo &lt;abv&gt; foo&gt;WX  "

reg = re.compile('(?:'
                     '\S*?'
                     '&lt;'
                     '[^&lt;&gt;]*?'
                     '(?:&lt;[^&lt;&gt;]*&gt;[^&lt;&gt;]*)*'
                     '[^&lt;&gt;]*?'
                     '&gt;'
                       ')?'
                 '\S+')

print reg.findall(ss)
</snippet></ROW><ROW><id>15282772</id><snippet>['spam', 'bar', 'ds&lt;hai bye&gt;sd', 'baz', 'eggs',
 'ZQ&lt;boo &lt;abv&gt; foo&gt;WX']
</snippet></ROW><ROW><id>15282772</id><snippet>import re

pat = ('(?&lt;!\S)'  # absence of non-whitespace before

       '(?:'
           '[^\s&lt;&gt;]+'

           '|'  # OR

           '(?:[^\s&lt;&gt;]*)'
           '(?:'
               '&lt;'
               '[^&lt;&gt;]*?'
               '(?:&lt;[^&lt;&gt;]*?&gt;[^&lt;&gt;]*)*'
               '[^&lt;&gt;]*?'
               '&gt;'
               ')'
           '(?:[^\s&lt;&gt;]*)'
       ')'

       '(?!\S)' # absence of non-whitespace after)
       )
reg = re.compile(pat)

ss = ("spam i&gt;j bar ds&lt;hai bye&gt;sd baz eggs Z&lt;boo &lt;abv&gt;"
      " foo&gt;W ttt &lt;two&lt;;&gt;*&lt;:&gt; three&gt; ")
print '%s\n' % ss
print reg.findall(ss)

ss = "a&lt;b&lt;E1&gt;c&gt;d &lt;b&lt;E2&gt;c&gt;d &lt;b&lt;E3&gt;c&gt; a&lt;&lt;E4&gt;c&gt;d &lt;&lt;E5&gt;&gt;d 
   &lt;&lt;E6&gt;&gt; &lt;&lt;&gt;&gt;"
print '\n\n%s\n' % ss
print reg.findall(ss)
</snippet></ROW><ROW><id>15282772</id><snippet>spam i&gt;j bar ds&lt;hai bye&gt;sd baz eggs Z&lt;boo &lt;abv&gt; foo&gt;W 
ttt &lt;two&lt;;&gt;*&lt;:&gt; three&gt; 

['spam', 'bar', 'ds&lt;hai bye&gt;sd', 'baz', 'eggs', 
 'Z&lt;boo &lt;abv&gt; foo&gt;W', 'ttt', '&lt;two&lt;;&gt;*&lt;:&gt; three&gt;']


a&lt;b&lt;E1&gt;c&gt;d &lt;b&lt;E2&gt;c&gt;d &lt;b&lt;E3&gt;c&gt; a&lt;&lt;E4&gt;c&gt;d &lt;&lt;E5&gt;&gt;d &lt;&lt;E6&gt;&gt; &lt;&lt;&gt;&gt;

['a&lt;b&lt;E1&gt;c&gt;d', '&lt;b&lt;E2&gt;c&gt;d', '&lt;b&lt;E3&gt;c&gt;', 'a&lt;&lt;E4&gt;c&gt;d', '&lt;&lt;E5&gt;&gt;d',
 '&lt;&lt;E6&gt;&gt;', '&lt;&lt;&gt;&gt;']
</snippet></ROW><ROW><id>15282772</id><snippet>ss = """A&lt;B&lt;C&gt;D  
 E&lt;F&lt;G&gt;H 
I&lt;J&gt;K&gt; 
 L&lt;&lt;M&gt;N
   O&lt;P&gt;&gt;Q
 R&lt;&lt;S&gt;    T&lt;&lt;&gt;"""
print '\n\n%s\n' % ss
print reg.findall(ss)
</snippet></ROW><ROW><id>15282772</id><snippet>A&lt;B&lt;C&gt;D  
 E&lt;F&lt;G&gt;H 
I&lt;J&gt;K&gt; 
 L&lt;&lt;M&gt;N
   O&lt;P&gt;&gt;Q
 R&lt;&lt;S&gt;    T&lt;&lt;&gt;

['E&lt;F&lt;G&gt;H \nI&lt;J&gt;K&gt;', 'L&lt;&lt;M&gt;N\n   O&lt;P&gt;&gt;Q']
</snippet></ROW><ROW><id>15282772</id><snippet>'(?:&lt;[^&lt;&gt;]*?&gt;[^&lt;&gt;]*)*'</snippet></ROW><ROW><id>15282772</id><snippet>'E&lt;F&lt;G&gt;H \nI&lt;J&gt;K&gt;'</snippet></ROW><ROW><id>15282772</id><snippet>'L&lt;&lt;M&gt;N\n   O&lt;P&gt;&gt;Q'</snippet></ROW><ROW><id>15282772</id><snippet>&lt;G&gt;</snippet></ROW><ROW><id>15282772</id><snippet>&lt;J&gt;</snippet></ROW><ROW><id>15282772</id><snippet>&lt;  &lt;G&gt;  &lt;J&gt;  &gt;</snippet></ROW><ROW><id>15282772</id><snippet>&lt;M&gt;</snippet></ROW><ROW><id>15282772</id><snippet>&lt;P&gt;</snippet></ROW><ROW><id>15282772</id><snippet>&lt;  &lt;M&gt;  &lt;P&gt;  &gt;</snippet></ROW><ROW><id>15282772</id><snippet>\n</snippet></ROW><ROW><id>15282772</id><snippet>\n</snippet></ROW><ROW><id>15282772</id><snippet>#</snippet></ROW><ROW><id>15282772</id><snippet>import re

ss = """
 A&lt;:&lt;11&gt;:&lt;12&gt;:&gt;
 fgh
 A&lt;#:&lt;33&gt;:&lt;34&gt;:&gt;
 A#&lt;:&lt;55&gt;:&lt;56&gt;:&gt;
 A&lt;:&lt;77&gt;:&lt;78&gt; i&lt;j&gt;
 A&lt;B&lt;C&gt;D #
 E&lt;F&lt;G&gt;H #
 I&lt;J&gt;K&gt; 
 L&lt;&lt;M&gt;N 
 O&lt;P&gt;&gt;Q  #
 R&lt;&lt;S&gt;  T&lt;&lt;&gt;"""
print '%s\n' % ss

pat = ('(?&lt;!\S)'  # absence of non-whitespace before
           '(?:[^\s&lt;&gt;]*)'
           '(?:&lt;'
               '[^&lt;&gt;]*?'
               '(?:&lt;[^&lt;&gt;]*?&gt;[^&lt;&gt;]*)*'
               '&gt;)'
           '(?:[^\s&lt;&gt;]*)'
       '(?!\S)' # absence of non-whitespace after)
       )
reg = re.compile(pat)
print '------------------------------'
print '\n'.join(map(repr,reg.findall(ss)))


pat = ('(?&lt;!\S)'  # absence of non-whitespace before
           '(?:[^\s&lt;&gt;]*)'
           '(?:&lt;'
               '[^&lt;&gt;\n]*?'
               '(?:&lt;[^&lt;&gt;\n]*?&gt;[^&lt;&gt;\n]*)*'
               '&gt;)'
           '(?:[^\s&lt;&gt;]*)'
       '(?!\S)' # absence of non-whitespace after)
       )
reg = re.compile(pat)
print '\n----------- with \\n -------------'
print '\n'.join(map(repr,reg.findall(ss)))


pat = ('(?&lt;!\S)'  # absence of non-whitespace before
           '(?:[^\s&lt;&gt;]*)'
           '(?:&lt;'
               '[^&lt;&gt;#]*?'
               '(?:&lt;[^&lt;&gt;#]*?&gt;[^&lt;&gt;#]*)*'
               '&gt;)'
           '(?:[^\s&lt;&gt;]*)'
       '(?!\S)' # absence of non-whitespace after)
       )
reg = re.compile(pat)
print '\n------------- with # -----------'
print '\n'.join(map(repr,reg.findall(ss)))


pat = ('(?&lt;!\S)'  # absence of non-whitespace before
           '(?:[^\s&lt;&gt;#]*)'
           '(?:&lt;'
               '[^&lt;&gt;#]*?'
               '(?:&lt;[^&lt;&gt;#]*?&gt;[^&lt;&gt;#]*)*'
               '&gt;)'
           '(?:[^\s&lt;&gt;]*)'
       '(?!\S)' # absence of non-whitespace after)
       )
reg = re.compile(pat)
print '\n------ with ^# everywhere -------'
print '\n'.join(map(repr,reg.findall(ss)))
</snippet></ROW><ROW><id>15282772</id><snippet> A&lt;:&lt;11&gt;:&lt;12&gt;:&gt;
 fgh
 A&lt;#:&lt;33&gt;:&lt;34&gt;:&gt;
 A#&lt;:&lt;55&gt;:&lt;56&gt;:&gt;
 A&lt;:&lt;77&gt;:&lt;78&gt; i&lt;j&gt;
 A&lt;B&lt;C&gt;D #
 E&lt;F&lt;G&gt;H #
 I&lt;J&gt;K&gt; 
 L&lt;&lt;M&gt;N 
 O&lt;P&gt;&gt;Q  #
 R&lt;&lt;S&gt;  T&lt;&lt;&gt;

------------------------------
'A&lt;:&lt;11&gt;:&lt;12&gt;:&gt;'
'A&lt;#:&lt;33&gt;:&lt;34&gt;:&gt;'
'A#&lt;:&lt;55&gt;:&lt;56&gt;:&gt;'
'i&lt;j&gt;'
'E&lt;F&lt;G&gt;H #\n I&lt;J&gt;K&gt;'
'L&lt;&lt;M&gt;N \n O&lt;P&gt;&gt;Q'

----------- with \n -------------
'A&lt;:&lt;11&gt;:&lt;12&gt;:&gt;'
'A&lt;#:&lt;33&gt;:&lt;34&gt;:&gt;'
'A#&lt;:&lt;55&gt;:&lt;56&gt;:&gt;'
'i&lt;j&gt;'

------------- with # -----------
'A&lt;:&lt;11&gt;:&lt;12&gt;:&gt;'
'A#&lt;:&lt;55&gt;:&lt;56&gt;:&gt;'
'i&lt;j&gt;'
'L&lt;&lt;M&gt;N \n O&lt;P&gt;&gt;Q'

------ with ^# everywhere -------
'A&lt;:&lt;11&gt;:&lt;12&gt;:&gt;'
'i&lt;j&gt;'
'L&lt;&lt;M&gt;N \n O&lt;P&gt;&gt;Q'
</snippet></ROW><ROW><id>15282805</id><snippet>ID</snippet></ROW><ROW><id>15282805</id><snippet>from Bio import SeqIO
out = open("out.txt", "a")
records = list(SeqIO.parse("input.fas","fasta"))
previous = records[-1]
for record in records:
    id = "_".join(str(record.id).rsplit("_")[1:])
    out.write("SEQUENCE_ID=" + previous.id + "e_" + id + "b\n")
    out.write("SEQUENCE_TEMPLATE =%s\n=\n" % previous.seq)
    previous = record
out.close()
</snippet></ROW><ROW><id>15282856</id><snippet>#</snippet></ROW><ROW><id>15282856</id><snippet>        v----comment starts here
([:\s,]*#\w+)*  ...
</snippet></ROW><ROW><id>15282856</id><snippet>([:\s,]*\#\w+)*  
</snippet></ROW><ROW><id>15282856</id><snippet>v----escape me
#\w+                                    #The hashtag matching ... 
</snippet></ROW><ROW><id>15282856</id><snippet>HASHTAG_SEQ_REGEX_PATTERN           = r"""
(                 # Outermost grouping to match overall regex
\#\w+             # The hashtag matching. It's a valid combination of \w+
([:\s,]*\#\w+)*   # This is an optional (0 or more) sequence of hashtags separated by [\s,:]*
)                 # Closing parenthesis of outermost grouping to match overall regex
"""
</snippet></ROW><ROW><id>15282928</id><snippet>"C:\Python27\python.exe" "%1"
</snippet></ROW><ROW><id>15282928</id><snippet>"C:\Python27\python.exe" "%1" %*
</snippet></ROW><ROW><id>15282961</id><snippet>awk '/the-timestamp-I-have/,0' the-log-file
</snippet></ROW><ROW><id>15282961</id><snippet>the-log-file</snippet></ROW><ROW><id>15282961</id><snippet>the-timestamp-I-have</snippet></ROW><ROW><id>15283089</id><snippet>poi_x</snippet></ROW><ROW><id>15283089</id><snippet>poi_y</snippet></ROW><ROW><id>15283089</id><snippet>m</snippet></ROW><ROW><id>15283089</id><snippet>b</snippet></ROW><ROW><id>15283089</id><snippet>#! /usr/bin/env python
equation_1 ="y=2x+3"
equation_2 ="y=-0.5x+7"

plus_1 = equation_1.find('+')
plus_2 = equation_2.find('+')

x_1 = equation_1.find('x')
x_2 = equation_2.find('x')

equalsign_1 = equation_1.find('=')
equalsign_2 = equation_2.find('=')

b1 = float(equation_1[x_1+1:])
b2 = float(equation_2[x_2+1:])

m1 = float(equation_1[equalsign_1+1:x_1])
m2 = float(equation_2[equalsign_2+1:x_2])

print m1,b1,m2,b2

if m1==m2 and b1!=b2:
    print "Your equations are parallel. "

elif m1==m2 and b1==b2:
    print "Your equations are the same. "

else:
    equation_intersect_y = b2 - b1
    equation_intersect_x = m1 - m2

    poi_x = equation_intersect_y/equation_intersect_x
    poi_y = m1*poi_x+b1

    print poi_x, poi_y
</snippet></ROW><ROW><id>15283089</id><snippet>2.0 3.0 -0.5 7.0
1.6 6.2
</snippet></ROW><ROW><id>15283089</id><snippet>#! /usr/bin/env python
def parse_equation_string(eq_string):
    x_pos = eq_string.find('x')
    equal_pos = eq_string.find('=')

    b = float(eq_string[x_pos+1:])
    m = float(eq_string[equal_pos+1:x_pos])
    return m, b

def get_point_of_intersection(line1, line2):
    m1, b1 = line1
    m2, b2 = line2

    if m1==m2 and b1!=b2:
        return "The lines are parallel. "

    elif m1==m2 and b1==b2:
        return "The lines are the same. "

    else:
        equation_intersect_y = b2 - b1
        equation_intersect_x = m1 - m2

        poi_x = equation_intersect_y/equation_intersect_x
        poi_y = m1*poi_x+b1

        return poi_x, poi_y

equation_1 = "y=2x+3"
equation_2 = "y=-0.5x+7"

line_1 = parse_equation_string(equation_1)
line_2 = parse_equation_string(equation_2)

print line_1, line_2
print get_point_of_intersection(line_1, line_2)
</snippet></ROW><ROW><id>15283089</id><snippet>(2.0, 3.0) (-0.5, 7.0)
(1.6, 6.2)
</snippet></ROW><ROW><id>15283188</id><snippet>nosetests tests:test_something_else
</snippet></ROW><ROW><id>15283188</id><snippet>from nose.plugins.attrib import attr

@attr('now')
def test_something_else():
    pass
</snippet></ROW><ROW><id>15283188</id><snippet>nosetests -a now
</snippet></ROW><ROW><id>15283188</id><snippet>nosetests -a !now
</snippet></ROW><ROW><id>15283661</id><snippet>OrderedDict</snippet></ROW><ROW><id>15283661</id><snippet>defaultdict</snippet></ROW><ROW><id>15283661</id><snippet>import collections
od = collections.OrderedDict()
od["i"] = collections.OrderedDict()
od["i"]["a"] = "111"
od["i"]["b"] = "222"
print od
</snippet></ROW><ROW><id>15283661</id><snippet>OrderedDict([('i', OrderedDict([('a', '111'), ('b', '222')]))])
</snippet></ROW><ROW><id>15283666</id><snippet>{% for polyhedron in polyhedrons %}
{{ polyhedron.name }}
{{ polyhedron.color }} 
&lt;form action="/correction" method=post&gt;
    &lt;input type="hidden" name="key" value="{{ polyhedron.key().id() }}"&gt;
    &lt;input type="submit" id="{{ polyhedron.key().id() }}" name="color" value="red"&gt;
    &lt;input type="submit" id="{{ polyhedron.key().id() }}" name="color" value="green"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>15283666</id><snippet>{% for polyhedron in polyhedrons %}
{{ polyhedron.name }}
{{ polyhedron.color }} 
&lt;form action="/correction" method=post&gt;
    &lt;input type="hidden" name="key" value="{{ polyhedron.key.urlsafe() }}"&gt;
    &lt;input type="submit" id="{{ polyhedron.key.urlsafe() }}" name="color" value="red"&gt;
    &lt;input type="submit" id="{{ polyhedron.key.urlsafe() }}" name="color" value="green"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>15283666</id><snippet>class CorrectionHandler(webapp2.RequestHandler):
    def post(self):
        polyhedron_object_key = self.request.get("key")
        polyhedron_object = Polyhedron.get_by_id(polyhedron_object_key)
        polyhedron_object.color = self.request.get('color')
</snippet></ROW><ROW><id>15283666</id><snippet>class CorrectionHandler(webapp2.RequestHandler):
    def post(self):
        polyhedron_object_key = self.request.get("key")
        polyhedron_object = ndb.Key(urlsafe=polyhedron_object_key).get()
        polyhedron_object.color = self.request.get('color')
</snippet></ROW><ROW><id>15283753</id><snippet>f = open('testtext.txt')
</snippet></ROW><ROW><id>15283753</id><snippet>f = open('testtext.txt', 'rb')
</snippet></ROW><ROW><id>15283773</id><snippet>defaultdict</snippet></ROW><ROW><id>15283773</id><snippet>from collections import defaultdict

items = [{'category':'apple','item':'granny smith'},
 {'category':'apple','item':'cox'},
 {'category':'apple','item':'pixie'},
 {'category':'orange','item':'premier'},
 {'category':'orange','item':'queen'},
 {'category':'orange','item':'westin'},
 {'category':'tea','item':'breakfast'},
 {'category':'tea','item':'lady grey'},
 {'category':'tea','item':'builders'},
 {'category':'coffee','item':'colombia'},
 {'category':'coffee','item':'kenya'},
 {'category':'coffee','item':'brazil'}]

result = defaultdict(list)
for item in items:
    result[item['category']].append(item['item'])
</snippet></ROW><ROW><id>15283773</id><snippet>{% for key, values in result.items() %}
    &lt;span&gt;{{key}}&lt;/span&gt;
    &lt;ul&gt;
    {% for item in values %}
        &lt;li&gt;{{item}}&lt;/li&gt;
    {% endfor %}
    &lt;/ul&gt;
{% endfor %}
</snippet></ROW><ROW><id>15283823</id><snippet>save()</snippet></ROW><ROW><id>15283823</id><snippet>def test_db_access(self):
    input = Element(title = 'foo')
    input.save()

    output = Element.objects.get(title='foo')

    self.assertEquals(input, output)
</snippet></ROW><ROW><id>15283823</id><snippet>def save(obj):
    obj.id = 1
</snippet></ROW><ROW><id>15283868</id><snippet>import</snippet></ROW><ROW><id>15283868</id><snippet>import</snippet></ROW><ROW><id>15283868</id><snippet>global</snippet></ROW><ROW><id>15283868</id><snippet>def foo():
    global sys
    import sys

foo()
sys.path
</snippet></ROW><ROW><id>15283879</id><snippet>python</snippet></ROW><ROW><id>15283879</id><snippet>def print_message():
    print "This is my very special script!"

if __name__ == "__main__":
    print_message()
</snippet></ROW><ROW><id>15283879</id><snippet>username@server:~$ curl http://ideone.com/plain/O2n3Pg 2&gt;/dev/null | python
This is my very special script!
</snippet></ROW><ROW><id>15283937</id><snippet>&gt;&gt;&gt; cards_to_bytes = dict((card, num) for (num, card) in enumerate(cards))
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; hands = np.zeros(133784560, dtype='7int8') # 133784560 == 52c7
&gt;&gt;&gt; for num, hand in enumerate(itertools.combinations(cards, 7)):
...     hands[num] = [cards_to_bytes[card] for card in hand]
</snippet></ROW><ROW><id>15283937</id><snippet>hands[num] = map(cards_to_bytes.__getitem__, hand)</snippet></ROW><ROW><id>15284010</id><snippet>Connect.create</snippet></ROW><ROW><id>15284010</id><snippet>def create(self,date,name,age):
    self.con.execute( 'create table Profile(date text, name text,age real)' )
    self.con.execute( "insert into Profile values('{0}','{1}','{2}')"
                      .format(date,name,age) )
    return
</snippet></ROW><ROW><id>15284065</id><snippet>a[(3 &lt; a) &amp; (a &lt;= 6)]
</snippet></ROW><ROW><id>15284065</id><snippet>(3 &lt; a &lt;=6)</snippet></ROW><ROW><id>15284065</id><snippet>((3 &lt; a) and (a &lt;= 6))</snippet></ROW><ROW><id>15284065</id><snippet>and</snippet></ROW><ROW><id>15284065</id><snippet>and</snippet></ROW><ROW><id>15284065</id><snippet>or</snippet></ROW><ROW><id>15284065</id><snippet>&amp;</snippet></ROW><ROW><id>15284065</id><snippet>|</snippet></ROW><ROW><id>15284077</id><snippet>collections.Counter</snippet></ROW><ROW><id>15284077</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; l = [2L, 14L, 14L, 14L, 11L, 2L, 2L, 11L, 14L, 11L, 14L, 2L, 2L, 14L]
&gt;&gt;&gt; c = Counter(l)
&gt;&gt;&gt; c
    Counter({14L: 6, 2L: 5, 11L: 3})
&gt;&gt;&gt; c[14L]
    6
</snippet></ROW><ROW><id>15284247</id><snippet>dtype</snippet></ROW><ROW><id>15284247</id><snippet>'S1'</snippet></ROW><ROW><id>15284247</id><snippet>'S2'</snippet></ROW><ROW><id>15284247</id><snippet>In [1]: import numpy as np

In [2]: a = np.array(['hi','hello'])

In [3]: a.dtype
Out[3]: dtype('|S5')

In [4]: a = np.array(['hi','hello'], dtype='S2')

In [5]: a
Out[5]: 
array(['hi', 'he'], 
      dtype='|S2')
</snippet></ROW><ROW><id>15284404</id><snippet>python3</snippet></ROW><ROW><id>15284404</id><snippet>python</snippet></ROW><ROW><id>15284404</id><snippet>$ python3
Python 3.2.3 (default, Oct 19 2012, 19:53:57) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
</snippet></ROW><ROW><id>15284576</id><snippet>def</snippet></ROW><ROW><id>15284576</id><snippet>None</snippet></ROW><ROW><id>15284576</id><snippet>def foo(bar=None):
    if bar is None:
        bar = []
    ...
</snippet></ROW><ROW><id>15284699</id><snippet>try:
 width = int(input("enter width"))
except:
 width = int(input("enter width as integer"))
</snippet></ROW><ROW><id>15284699</id><snippet>def size_input(message):
   try:
      ret = int(input(message))
      return ret
   except:
      return size_input("enter a number")

width = size_input("enter width")
</snippet></ROW><ROW><id>15284735</id><snippet>def mostFrequentWords(word,frequency,n):
   my_list = zip(word,frequency) #combine the two lists
   my_list.sort(key=lambda x:x[1],reverse=True) #sort by freq
   words,freqs = zip(*my_list[:n]) #take the top n entries and split back to seperate lists
   return words #return our most frequent words in order
</snippet></ROW><ROW><id>15284881</id><snippet>from xlsxwriter.workbook import Workbook

workbook = Workbook('protection.xlsx')
worksheet = workbook.add_worksheet()

# Create a cell format with protection properties.
unlocked = workbook.add_format({'locked': False})

# Format the columns to make the text clearer.
worksheet.set_column('A:A', 40)

# Turn worksheet protection on.
worksheet.protect()

# Write a locked and unlocked cell.
worksheet.write('A1', 'Cell B1 is locked. It cannot be edited.')
worksheet.write('A2', 'Cell B2 is unlocked. It can be edited.')

worksheet.write_formula('B1', '=1+2')  # Locked by default.
worksheet.write_formula('B2', '=1+2', unlocked)

workbook.close()
</snippet></ROW><ROW><id>15284935</id><snippet>def even2d(list2d):
    return all(sum(row) % 2 == 0 for row in list2d)
</snippet></ROW><ROW><id>15284935</id><snippet>all</snippet></ROW><ROW><id>15284935</id><snippet>True</snippet></ROW><ROW><id>15284935</id><snippet>row_sums = []
for row in list2d:
    row_sum = sum(row)
    row_sums.append(row_sum)
</snippet></ROW><ROW><id>15284935</id><snippet>row_sums = [sum(row) for row in list2d]
</snippet></ROW><ROW><id>15284935</id><snippet>sum(row)</snippet></ROW><ROW><id>15284935</id><snippet>sum(row) % 2 == 0</snippet></ROW><ROW><id>15284935</id><snippet>row_evens = [sum(row) % 2 == 0 for row in list2d]
</snippet></ROW><ROW><id>15284935</id><snippet>def even2d(list2d):
    row_evens = [sum(row) % 2 == 0 for row in list2d]
    return all(row_evens)
</snippet></ROW><ROW><id>15284935</id><snippet>def even2d(list2d):
    row_evens = (sum(row) % 2 == 0 for row in list2d)
    return all(row_evens)
</snippet></ROW><ROW><id>15285004</id><snippet>O(1)</snippet></ROW><ROW><id>15285004</id><snippet>In [78]: lis = [0,1,1,2,3,5,8,13,-1]

In [79]: if len(lis)%2 !=0 :  #if the list is of odd length then append the last item to it
    lis.append(lis[-1])
   ....:     

In [80]: i=0

In [81]: while i&lt;len(lis)-1:
    if lis[i]&gt;lis[i+1]:
        local_max,local_min=lis[i],lis[i+1]
    elif lis[i]&lt;lis[i+1]:    
        local_max,local_min=lis[i+1],lis[i]
    else:
        local_max,local_min=lis[i],lis[i+1]
    print local_min,local_max
    i+=2
   ....:     
0 1
1 2
3 5
8 13
-1 -1
</snippet></ROW><ROW><id>15285004</id><snippet>In [86]: it=iter(lis)

In [87]: lis = [0,1,1,2,3,5,8,13,-1]

In [88]: if len(lis)%2 !=0 :
    lis.append(lis[-1])
   ....:     

In [89]: it=iter(lis)

In [90]: for _ in xrange(len(lis)/2):
   ....:     a,b=next(it),next(it)
   ....:     if a&gt;b:
   ....:         local_max,local_min=a,b
   ....:     elif a&lt;b:    
   ....:         local_max,local_min=b,a
   ....:     else:    
   ....:         local_max,local_min=a,b
   ....:     print local_min,local_max    
   ....:     
0 1
1 2
3 5
8 13
-1 -1
</snippet></ROW><ROW><id>15285072</id><snippet>import warnings
warnings.filterwarnings('ignore', r"django.contrib.localflavor is deprecated")
</snippet></ROW><ROW><id>15285107</id><snippet>5 / 9</snippet></ROW><ROW><id>15285107</id><snippet>&gt;&gt;&gt; 5 / 9
    0
</snippet></ROW><ROW><id>15285107</id><snippet>&gt;&gt;&gt; 5.0 / 9
    0.5555555555555556
&gt;&gt;&gt; 5.0 / 9.0
    0.5555555555555556
</snippet></ROW><ROW><id>15285125</id><snippet>def job_expired(self):
    time=self.time
    date=self.purchased
    end=date+timedelta(days=time)
    #now is defined globally
    if now &gt; end:
        self.expired = True
        self.pending = False 
        self.save()

        ex = self.expired
    else:
        ex=self.expired=False
    return ex
</snippet></ROW><ROW><id>15285146</id><snippet>itertools.imap</snippet></ROW><ROW><id>15285146</id><snippet>foo = (x**2 for x in count())
</snippet></ROW><ROW><id>15285295</id><snippet>def inputPass():
    global passNumber
    passNumber = input('Please enter pass number')
</snippet></ROW><ROW><id>15285295</id><snippet>def inputPass():
    return input('Please enter pass number')
</snippet></ROW><ROW><id>15285656</id><snippet>parentId = models.ForeignKey("CategoryModel")
</snippet></ROW><ROW><id>15285656</id><snippet>parentId = models.ForeignKey("self")
</snippet></ROW><ROW><id>15285748</id><snippet>df.ix[subsampleIDs]</snippet></ROW><ROW><id>15285748</id><snippet>import numpy as np
N = 2000000
M = 5000
totalIDs = np.random.randint(0, 10000000, N)
totalIDs = np.unique(totalIDs)
np.random.shuffle(totalIDs)
v1 = np.random.rand(len(totalIDs))
v2 = np.random.rand(len(totalIDs))

subsampleIDs = np.random.choice(totalIDs, M)
subsampleIDs = np.unique(subsampleIDs)
np.random.shuffle(subsampleIDs)
</snippet></ROW><ROW><id>15285748</id><snippet>import pandas as pd
df = pd.DataFrame(data = {"v1":v1, "v2":v2}, index=totalIDs) 
df.ix[subsampleIDs]
</snippet></ROW><ROW><id>15285915</id><snippet>from django.template.defaultfilters import truncatechars  # or truncatewords

class Foo(models.Model):
    description = models.TextField()

    @property
    def short_description(self):
        return truncatechars(self.description, 100)

class FooAdmin(admin.ModelAdmin):
    list_display = ['short_description']
</snippet></ROW><ROW><id>15285956</id><snippet>import histogram, numpy 
y = range(0, 100) #Except I used real data
Hist = histogram(y, bins=100, range=[0,100])
colors = ['red', 'blue', 'green', ]
ranges = [[0,30], [30,31], [31,100]]
fig = pyplot.figure(figsize=(8,6))
ax, plt, _ = fig.plothist(Hist, alpha=0) # plot for spacing
for c, r in zip(colors, ranges):
    plt = ax.overlay(Hist, range=r, facecolor=c)
print y

CumulativeHist = numpy.cumsum(h6)
colors = ['red', 'blue', 'green', ]
ranges = [[0,30], [30,31], [31,100]]
fig = pyplot.figure(figsize=(8,6))
ax, plt, _ = fig.plothist(CumulativeHist, alpha=0) # plot for spacing
for c, r in zip(colors, ranges):
    plt = ax.overlay(CumulativeHist, range=r, facecolor=c)

pyplot.show()
</snippet></ROW><ROW><id>15285971</id><snippet>_communicate_with_poll</snippet></ROW><ROW><id>15285971</id><snippet>close_unregister_and_remove</snippet></ROW><ROW><id>15285971</id><snippet>_communicate_with_select</snippet></ROW><ROW><id>15285971</id><snippet>self.stdout.close()</snippet></ROW><ROW><id>15285971</id><snippet>seld.stderr.close()</snippet></ROW><ROW><id>15285971</id><snippet>_communicate</snippet></ROW><ROW><id>15285971</id><snippet>stdout</snippet></ROW><ROW><id>15285971</id><snippet>stderr</snippet></ROW><ROW><id>15286134</id><snippet>retbins=True</snippet></ROW><ROW><id>15286134</id><snippet>import pandas as pd
import numpy as np

np.random.seed(1)
s = pd.Series(np.random.randint(0,20,20))

categories, edges = pd.qcut(s, 5, retbins=True)
df = pd.DataFrame({'original':s,
                   'bin_max': edges[1:][categories.labels]},
                  columns = ['original', 'bin_max'])
print(df)
</snippet></ROW><ROW><id>15286134</id><snippet>    original  bin_max
0          5      5.0
1         11     11.0
2         12     13.4
3          8      8.6
4          9     11.0
5         11     11.0
6          5      5.0
7         15     18.0
8          0      5.0
9         16     18.0
10         1      5.0
11        12     13.4
12         7      8.6
13        13     13.4
14         6      8.6
15        18     18.0
16         5      5.0
17        18     18.0
18        11     11.0
19        10     11.0
</snippet></ROW><ROW><id>15286323</id><snippet>class MyAdmin(models.ModelAdmin):
    list_display = ('other_field', 'delete_link', 'edit_link')


    def delete_link(self, obj):
        info = obj._meta.app_label, obj._meta.module_name
        url = reverse('admin:%s_%s_delete' % info, args=(obj.id,))
        return '&lt;a href="%s"&gt;Delete&lt;/a&gt;' % url
    delete_link.allow_tags = True
    delete_link.short_description = 'Delete'

    def edit_link(self,obj):
        return u'&lt;a href="/admin/%s/%s/%s"&gt;Edit&lt;/a&gt;' % (
             obj._meta.app_label, obj._meta.module_name, obj.id)
    edit_link.allow_tags = True
    edit_link.short_description = "Edit"
</snippet></ROW><ROW><id>15286323</id><snippet>def action_link(self, obj):
    app_name = obj._meta.app_label
    url_name = obj._meta.module_name
    data_id = obj.id

    return """
         &lt;ul&gt;
            &lt;li&gt;&lt;a href="/admin/{0}/{1}/{2}"&gt;Edit&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="/admin/{0}/{1}/{2}/delete"&gt;Delete&lt;/a&gt;&lt;/li&gt;
         &lt;/ul&gt;
         """.format(
         obj._meta.app_label, 
         obj._meta.module_name, 
         obj.id)
action_link.allow_tags = True
action_link.short_description = 'Actions'
</snippet></ROW><ROW><id>15286460</id><snippet>greenlets</snippet></ROW><ROW><id>15286724</id><snippet>pk = QtSql.QSqlIndex("cursName","idxName")
pk.append(QtSql.QSqlField("ID"))
self.setPrimaryKey(pk)
</snippet></ROW><ROW><id>15286950</id><snippet>adj = """1 0 1 0 1
1 0 1 0 0
1 0 1 0 1
0 0 1 0 0
1 1 1 1 0
1 1 1 0 1
1 0 1 0 0"""

for row,line in enumerate(adj.split('\n')):
    for col,val in enumerate(line.split(' ')):
        if val == '1':
            print row,col
</snippet></ROW><ROW><id>15287294</id><snippet>row = numpy.arange(_2Darray.shape[0])
index_values = _2Darray[row, array_indexes]
</snippet></ROW><ROW><id>15287294</id><snippet>for i in range(len(row)):
    result1[i] = array[row[i], col[i]]

result2 = array[row, col]
numpy.all(result1 == result2)
</snippet></ROW><ROW><id>15287556</id><snippet>is_finished</snippet></ROW><ROW><id>15287556</id><snippet>orders = orders.filter(items__status__is_finished=False)
</snippet></ROW><ROW><id>15287556</id><snippet>orders = orders.exclude(items__status__is_finished=False)
</snippet></ROW><ROW><id>15287729</id><snippet>class Person(object):
    def __init__(self,name,age):
        self.name = name
        self.age = age
    def title(self):
        return self.name+str(self.age)

class Employee(Person):
    def __init__(self,*args,**kwargs):
        Person.__init__(self, *args)
        self.empid= kwargs.get('empid')
    def title(self):
        return self.name+str(self.age)+self.empid
</snippet></ROW><ROW><id>15287729</id><snippet>&gt;&gt;&gt; j = Employee('Jon',30,empid="001")
&gt;&gt;&gt; j.title()
'Jon30001'
</snippet></ROW><ROW><id>15287792</id><snippet>[L if i else False for i in A ]
</snippet></ROW><ROW><id>15287848</id><snippet>def increase_tree_values(node, delta):
    """ Increases/decreases the value of all nodes in the tree by the value 'delta'
    """

    # increase the current node's value
    node.value += delta

    # recursively call function on left child, if it exists
    if node.left_child:
        increase_tree_values(node.left_child, delta)

    # recursively call function on right child, if it exists
    if node.right_child:
        increase_tree_values(node.right_child, delta)



# presuming you have some binary tree called 'tree' already constructed
# increase all nodes in 'tree' by 2
increase_tree_values(tree, 2)
</snippet></ROW><ROW><id>15288043</id><snippet>&gt;&gt;&gt; my_str = 'This is my text of 2013-02-11, &amp; it contained characters like this! (Exceptional)'
&gt;&gt;&gt; my_str.translate(None, '!@#%^&amp;*()_+=`/')
This is my text of 2013-02-11,  it contained characters like this Exceptional
</snippet></ROW><ROW><id>15288194</id><snippet>Py_INCREF</snippet></ROW><ROW><id>15288194</id><snippet>Py_None</snippet></ROW><ROW><id>15288194</id><snippet>Py_None</snippet></ROW><ROW><id>15288194</id><snippet>Py_None</snippet></ROW><ROW><id>15288194</id><snippet>Objects/object.c</snippet></ROW><ROW><id>15288194</id><snippet>PyObject _Py_NoneStruct = {
  _PyObject_EXTRA_INIT
  1, &amp;PyNone_Type
};
</snippet></ROW><ROW><id>15288194</id><snippet>Include/object.h</snippet></ROW><ROW><id>15288194</id><snippet>#define Py_None (&amp;_Py_NoneStruct)
</snippet></ROW><ROW><id>15288194</id><snippet>Fatal Python error: deallocating None
</snippet></ROW><ROW><id>15288194</id><snippet>none_dealloc</snippet></ROW><ROW><id>15288194</id><snippet>Objects/object.c</snippet></ROW><ROW><id>15288194</id><snippet>/* ARGUSED */
static void
none_dealloc(PyObject* ignore)
{
    /* This should never get called, but we also don't want to SEGV if
     * we accidentally decref None out of existence.
     */
    Py_FatalError("deallocating None");
}
</snippet></ROW><ROW><id>15288194</id><snippet>NoneType</snippet></ROW><ROW><id>15288194</id><snippet>free</snippet></ROW><ROW><id>15288194</id><snippet>Py_DECREF(Py_None)</snippet></ROW><ROW><id>15288194</id><snippet>Noddy_name</snippet></ROW><ROW><id>15288194</id><snippet>0</snippet></ROW><ROW><id>15288194</id><snippet>&gt;&gt;&gt; None   #or whatever object that was deallocated
&lt;ARandomObjectYouNeverSawBefore object at ...&gt;
</snippet></ROW><ROW><id>15288194</id><snippet>Py_INCREF</snippet></ROW><ROW><id>15288493</id><snippet>timeit</snippet></ROW><ROW><id>15288493</id><snippet>stmt</snippet></ROW><ROW><id>15288493</id><snippet>template = """
def inner(_it, _timer):
    %(setup)s
    _t0 = _timer()
    for _i in _it:
        %(stmt)s
    _t1 = _timer()
    return _t1 - _t0
"""
</snippet></ROW><ROW><id>15288493</id><snippet>stmt</snippet></ROW><ROW><id>15288493</id><snippet>fastlocals</snippet></ROW><ROW><id>15288493</id><snippet>STORE_FAST</snippet></ROW><ROW><id>15288493</id><snippet>f_opt</snippet></ROW><ROW><id>15288493</id><snippet>stmt</snippet></ROW><ROW><id>15288493</id><snippet>f_no_opt</snippet></ROW><ROW><id>15288493</id><snippet>&gt;&gt;&gt; code = compile(stmt, '&lt;string&gt;', 'exec')
&gt;&gt;&gt; f_no_opt = types.FunctionType(code, globals())

&gt;&gt;&gt; t_no_opt = min(timeit.repeat(f_no_opt, repeat=10, number=10))
&gt;&gt;&gt; t_opt = min(timeit.repeat(f_opt, repeat=10, number=10))
&gt;&gt;&gt; t_opt / t_no_opt
0.4931101445632647
</snippet></ROW><ROW><id>15289637</id><snippet>import json

def jsonify(*args, **kwargs):
    return json.dumps((args, kwargs))  # Tuples are faster to create
</snippet></ROW><ROW><id>15289637</id><snippet>'[[1, 2, 3, 4, 5], {"foo": "bar"}]'
</snippet></ROW><ROW><id>15290431</id><snippet># Index the document.
try:
    index.put(doc)
except search.PutError, e:
    result = e.results[0]
    if result.code == search.OperationResult.TRANSIENT_ERROR:
        # possibly retry indexing result.object_id
except search.Error, e:
    # possibly log the failure
</snippet></ROW><ROW><id>15291027</id><snippet>s = aliased(Tags)
e = aliased(Tags)
sr = aliased(R_Incident_Tags)
er = aliased(R_Incident_Tags)

qry = (session.query(s.name, e.name, func.count(e.name)).
        select_from(s, e, sr, er).
        filter(s.category=='service').
        filter(e.category=='event').
        filter(e.uid == er.tag_uid).
        filter(s.uid == sr.tag_uid).
        filter(er.incident_uid == sr.incident_uid).
        group_by(s.name, e.name)
        )
</snippet></ROW><ROW><id>15291027</id><snippet>relationship</snippet></ROW><ROW><id>15291027</id><snippet>JOIN</snippet></ROW><ROW><id>15291027</id><snippet>WHERE</snippet></ROW><ROW><id>15291171</id><snippet>for result in cursor.execute(SQL,multi = True):
    pass
</snippet></ROW><ROW><id>15291171</id><snippet>cursor.execute(SQL,multi = True)</snippet></ROW><ROW><id>15291171</id><snippet>import mysql.connector

cnx = mysql.connector.connect(user='scott', database='test')
cursor = cnx.cursor()

SQL = '''
    update my_table 
    set 
    LAY = 'P6682'
    , BLK = 'P6682'
    , ANI = 'P6682'
    where
    Shot = 'SH01';

    update my_table 
    set 
    LAY = '1863'
    , BLK = '1863'
    , ANI = '1863'
    where
    Shot = 'SH02'
'''

for result in cursor.execute(SQL,multi = True):
    pass

cnx.commit()
cur.close()
cnx.close()
cnx.disconnect()
</snippet></ROW><ROW><id>15291353</id><snippet>super()</snippet></ROW><ROW><id>15291353</id><snippet>@classmethod
def get_description(cls):
    desc = super(AdvancedGenerator, cls).get_description()
    return desc + ' Advanced(tm) ' + cls.adv_feature
</snippet></ROW><ROW><id>15291353</id><snippet>SimpleGenerator.get_description()</snippet></ROW><ROW><id>15291353</id><snippet>super(AdvancedGenerator, cls).get_description()</snippet></ROW><ROW><id>15291353</id><snippet>cls</snippet></ROW><ROW><id>15291353</id><snippet>cls</snippet></ROW><ROW><id>15291353</id><snippet>SimpleGenerator</snippet></ROW><ROW><id>15291353</id><snippet>super()</snippet></ROW><ROW><id>15291353</id><snippet>cls</snippet></ROW><ROW><id>15291353</id><snippet>AdvancedGenerator</snippet></ROW><ROW><id>15291353</id><snippet>__name__</snippet></ROW><ROW><id>15291353</id><snippet>&gt;&gt;&gt; class SimpleGenerator(object):
...     @classmethod
...     def get_description(cls):
...         return cls.__name__
... 
&gt;&gt;&gt; class AdvancedGenerator(SimpleGenerator):
...     @classmethod
...     def get_description(cls):
...         desc = SimpleGenerator.get_description() 
...         return desc + ' Advanced(tm)'
... 
&gt;&gt;&gt; AdvancedGenerator.get_description()
'SimpleGenerator Advanced(tm)'
</snippet></ROW><ROW><id>15291353</id><snippet>super()</snippet></ROW><ROW><id>15291353</id><snippet>&gt;&gt;&gt; class AdvancedGenerator(SimpleGenerator):
...     @classmethod
...     def get_description(cls):
...         desc = super(AdvancedGenerator, cls).get_description()
...         return desc + ' Advanced(tm)'
... 
&gt;&gt;&gt; AdvancedGenerator.get_description()
'AdvancedGenerator Advanced(tm)'
</snippet></ROW><ROW><id>15291510</id><snippet>import json
import pandas as pd
import numpy as np

rng = pd.date_range('1/1/2011 01:00:00', periods=12, freq='H') 
df = pd.DataFrame(np.random.randn(12, 1), index=rng, columns=['A'])

print json.dumps(df.T.as_matrix().tolist(),indent=4)
</snippet></ROW><ROW><id>15291510</id><snippet>[
    [
        -0.6916923670267555, 
        0.23075256008033393, 
        1.2390943452146521, 
        -0.9421708175530891, 
        -1.4622768586461448, 
        -0.3973987276444045, 
        -0.04983495806442656, 
        -1.9139530636627042, 
        1.9562147260518052, 
        -0.8296105620697014, 
        0.2888681009437529, 
        -2.3943000262784424
    ]
]
</snippet></ROW><ROW><id>15291510</id><snippet>groupby</snippet></ROW><ROW><id>15291510</id><snippet>rng = pd.date_range('1/1/2011 01:00:00', periods=48, freq='H') 
df = pd.DataFrame(np.random.randn(48, 1), index=rng, columns=['A'])

grouped = df.groupby(lambda x: x.day)
data = [group['A'].values.tolist() for day, group in grouped]
print json.dumps(data, indent=4)
</snippet></ROW><ROW><id>15291510</id><snippet>[
    [
        -0.8939584996681688, 
        ...
        -1.1332895023662326
    ], 
    [
        -0.1514553673781838, 
        ...
        -1.8380494963443343
    ], 
    [
        -1.8342085568898159
    ]
]
</snippet></ROW><ROW><id>15291616</id><snippet>try:
    beanstalk = beanstalkc.Connection(host="my.host.com")
    beanstalk.watch("update_queue")
except:
    print "Error connecting to beanstalk"

while True:
    job = beanstalk.reserve()
    do_something_with_job(job)
</snippet></ROW><ROW><id>15291643</id><snippet>&gt;&gt;&gt; ['ov'] * 4
['ov', 'ov', 'ov', 'ov']

&gt;&gt;&gt; ["ls", "ns", "*", "cm", "*"] + ["ov"] * 4 + ["kd"]
['ls', 'ns', '*', 'cm', '*', 'ov', 'ov', 'ov', 'ov', 'kd']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15291643</id><snippet>&gt;&gt;&gt; '-' * 15
'---------------'   
</snippet></ROW><ROW><id>15291807</id><snippet>&lt;\p&gt;</snippet></ROW><ROW><id>15291807</id><snippet>&lt;/p&gt;</snippet></ROW><ROW><id>15292041</id><snippet>1: you start monitoring the log file for writes
2: something writes to the log file (this adds a "write" notice to the kqueue)
3: your process is notified, but does not have a chance to go look yet
4: something (same something as step 2, or different, does not matter)
   writes more to the log file (this merely "expands" the existing notice,
   with no effect in this case)
5: your process finally gets a chance to read the "file was written" notice
   from the kqueue
</snippet></ROW><ROW><id>15292041</id><snippet>fstat()</snippet></ROW><ROW><id>15292041</id><snippet>fstat()</snippet></ROW><ROW><id>15292041</id><snippet>7: you fstat the file
</snippet></ROW><ROW><id>15292041</id><snippet>syslog</snippet></ROW><ROW><id>15292054</id><snippet>space.add_post_step_callback(space.remove, ball)
space.add_post_step_callback(space.remove, ball.body)
</snippet></ROW><ROW><id>15292300</id><snippet>memcpy</snippet></ROW><ROW><id>15292300</id><snippet>PYGILSTATE_ACQUIRE; //a macro i made
PyObject *result = PyEval_CallObject(python_callback, NULL);
if (!PyObject_CheckBuffer(result))
  ; //raise exception

Py_buffer *view = (Py_buffer *) malloc(sizeof(*view));
int error = PyObject_GetBuffer(result, view, PyBUF_SIMPLE);
if (error)
  ; //raise exception

memcpy(my_other_buffer, view-&gt;buf, view-&gt;len);

PyBuffer_Release(view);
Py_DECREF(result);
PYGILSTATE_RELEASE; //another macro
</snippet></ROW><ROW><id>15292785</id><snippet>script</snippet></ROW><ROW><id>15292968</id><snippet>import re
from voluptuous import All, Invalid, Required, Schema

def Email(msg=None):
    def f(v):
        if re.match("[\w\.\-]*@[\w\.\-]*\.\w+", str(v)):
            return str(v)
        else:
            raise Invalid(msg or ("incorrect email address"))
    return f

schema = Schema({
        Required('email') : All(Email())
    })

schema({'email' : "invalid_email.com"}) # &lt;-- this will result in a MultipleInvalid Exception
schema({'email' : "valid@email.com"}) # &lt;-- this should validate the email address
</snippet></ROW><ROW><id>15293007</id><snippet>import matplotlib.pyplot as plt
img = plt.imread(filename)

# &gt;&gt;&gt; img
# array([[38948, 41457, 37714, ..., 61511, 61785, 61824],
#       [39704, 38083, 36690, ..., 61419, 60086, 61910],
#       [41449, 39169, 38178, ..., 60192, 60969, 63538],
#       ...,
#       [37963, 39531, 40339, ..., 62351, 62646, 61793],
#       [37462, 37409, 38370, ..., 61125, 62497, 59770],
#       [39753, 36905, 38778, ..., 61922, 59565, 60035]], dtype=uint16)
</snippet></ROW><ROW><id>15293234</id><snippet>?</snippet></ROW><ROW><id>15293234</id><snippet>.*?</snippet></ROW><ROW><id>15293234</id><snippet>{}</snippet></ROW><ROW><id>15293234</id><snippet> regex = re.compile(r'\{# xxx #\}(.*?)\{# zzz #\}')
</snippet></ROW><ROW><id>15293234</id><snippet>m = re.match</snippet></ROW><ROW><id>15293234</id><snippet>m.group(1)</snippet></ROW><ROW><id>15293234</id><snippet>findall</snippet></ROW><ROW><id>15293496</id><snippet>def merged_pivot(data, *output_names, **merged_columns):
    input_names = []
    column_map = {}
    for col in output_names:
        start = len(input_names)
        input_names.extend(merged_columns.get(col, [col]))
        column_map[col] = slice(start, len(input_names))
    for row in zip(*(data[c] for c in input_names)):
        yield tuple(''.join(row[column_map[c]]) for c in output_names)
</snippet></ROW><ROW><id>15293496</id><snippet>list(merged_pivot(a, 'date', 'rate', 'code', 'product', code=('country code', 'area code')))
</snippet></ROW><ROW><id>15293496</id><snippet>'date', 'rate', 'code', 'product'</snippet></ROW><ROW><id>15293496</id><snippet>code=('country code', 'area code')</snippet></ROW><ROW><id>15293496</id><snippet>code</snippet></ROW><ROW><id>15293496</id><snippet>country code</snippet></ROW><ROW><id>15293496</id><snippet>area code</snippet></ROW><ROW><id>15293496</id><snippet>&gt;&gt;&gt; list(merged_pivot(a, 'date', 'rate', 'code', 'product', code=('country code', 'area code')))
[('2012-03-09', '199', '1114', 'Mobile'), ('2012-01-12', '900', '211', 'Teddy'), ('2012-11-11', '899', '4419', 'Handbag')]
</snippet></ROW><ROW><id>15293496</id><snippet>[('2012-03-09', '199', '1114', 'Mobile'), 
 ('2012-01-12', '900', '211', 'Teddy'),
 ('2012-11-11', '899', '4419', 'Handbag')]
</snippet></ROW><ROW><id>15293496</id><snippet>list()</snippet></ROW><ROW><id>15293496</id><snippet>merged_pivot()</snippet></ROW><ROW><id>15293496</id><snippet>columns = ('date', 'rate', 'code', 'product')
for row in merged_pivot(a, *columns, code=('country code', 'area code')):
    # do something with `row`
    print row
</snippet></ROW><ROW><id>15293633</id><snippet>&gt;&gt;&gt; l = [[1,2,3],[4,5,6], [7], [8,9]]
&gt;&gt;&gt; [item for sublist in l for item in sublist]
[1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; 5 in [item for sublist in l for item in sublist]
True
</snippet></ROW><ROW><id>15293637</id><snippet>tcks = nax.get_yticks()
tcks[-1] = vmax
nax.set_yticks(tcks)
</snippet></ROW><ROW><id>15293648</id><snippet>request</snippet></ROW><ROW><id>15293648</id><snippet>&gt;&gt;&gt; r = requests.head('http://www.example.com')
&gt;&gt;&gt; r.request.method
'HEAD'

&gt;&gt;&gt; r = requests.get('http://www.example.com')
&gt;&gt;&gt; r.request.method
'GET'
</snippet></ROW><ROW><id>15293726</id><snippet>re</snippet></ROW><ROW><id>15293792</id><snippet>&gt;&gt;&gt; n = -4
&gt;&gt;&gt; for bit in reversed([ (n&gt;&gt;shift)&amp;1 for shift in range(32) ]):
...    print bit,
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0
</snippet></ROW><ROW><id>15293792</id><snippet>sum( (n&gt;&gt;shift)&amp;1 for shift in range(32) )
</snippet></ROW><ROW><id>15293953</id><snippet>[program:gunicorn]
environment=PYTHONPATH=/usr/local/bin:/usr/local/lib/project
command=/usr/local/bin/gunicorn my_app:app -c /path/to/.gu_setup
...
</snippet></ROW><ROW><id>15293953</id><snippet>command=/usr/local/bin/gunicorn --debug --log-level debug my_app:app -c /path/to/.gu_setup
</snippet></ROW><ROW><id>15293953</id><snippet>command=/usr/local/bin/gunicorn --pythonpath /usr/local/bin,/usr/local/lib/project my_app:app -c /path/to/.gu_setup
</snippet></ROW><ROW><id>15293953</id><snippet>--pythonpath</snippet></ROW><ROW><id>15293953</id><snippet>command=/usr/local/bin/gunicorn --pythonpath /usr/local/lib/project my_app:app -c /path/to/.gu_setup
</snippet></ROW><ROW><id>15293981</id><snippet>[dict(zip(configSet['fields'], result)) for result in configSet['results']]
</snippet></ROW><ROW><id>15293981</id><snippet>results</snippet></ROW><ROW><id>15293981</id><snippet>fields</snippet></ROW><ROW><id>15293981</id><snippet>In [6]: [dict(zip(configSet['fields'], result)) for result in configSet['results']]
Out[6]:
[{'Config': 23,
  'Config Name': 'New test2 for demo',
  'Device': 45,
  'Device Name': 'New test2 for demo',
  'channel': 4,
  'date_added': datetime.datetime(2013, 3, 6, 13, 52, 14),
  'date_modified': datetime.datetime(2013, 3, 7, 14, 27, 39),
  'description': 'Default desc for device',
  'enable_password': 'Cisco',
  'frequency': 'None',
  'ip': '192.168.0.100',
  'maxclients': None,
  'password': 'Cisco',
  'personality': 'ios',
  'radius': 13,
  'ssid': '0',
  'transport_protocol': 'Telnet',
  'username': 'Cisco',
  'vlan': 0},
 {'Config': 23,
  'Config Name': 'New test2 for demo',
  'Device': 47,
  'Device Name': 'Test after a couple hours',
  'channel': 4,
  'date_added': datetime.datetime(2013, 3, 6, 13, 52, 14),
  'date_modified': datetime.datetime(2013, 3, 7, 14, 27, 39),
  'description': 'Default desc for device',
  'enable_password': 'Cisco',
  'frequency': 'None',
  'ip': '192.168.0.100',
  'maxclients': None,
  'password': 'Cisco',
  'personality': 'ios',
  'radius': 13,
  'ssid': '0',
  'transport_protocol': 'Telnet',
  'username': 'Cisco',
  'vlan': 0}]
</snippet></ROW><ROW><id>15294155</id><snippet>import numpy
from scipy import ndimage

array = numpy.zeros((100, 100), dtype=np.uint8)
x = np.random.randint(0, 100, 2000)
y = np.random.randint(0, 100, 2000)
array[x, y] = 1

pl.imshow(array, cmap="gray", interpolation="nearest")

s = ndimage.generate_binary_structure(2,2) # iterate structure
labeled_array, numpatches = ndimage.label(array,s) # labeling

sizes = ndimage.sum(array,labeled_array,range(1,numpatches+1)) 
# To get the indices of all the min/max patches. Is this the correct label id?
map = numpy.where(sizes==sizes.max())[0] + 1 
mip = numpy.where(sizes==sizes.min())[0] + 1

# inside the largest, respecitively the smallest labeled patches with values
max_index = np.zeros(numpatches + 1, np.uint8)
max_index[map] = 1
max_feature = max_index[labeled_array]

min_index = np.zeros(numpatches + 1, np.uint8)
min_index[mip] = 1
min_feature = min_index[labeled_array]
</snippet></ROW><ROW><id>15294155</id><snippet>numpy.where</snippet></ROW><ROW><id>15294155</id><snippet>numpy.where</snippet></ROW><ROW><id>15294155</id><snippet>labeled_array</snippet></ROW><ROW><id>15294181</id><snippet>In [25]: a = np.random.rand(8)*10

In [26]: a.sort()

In [27]: a
Out[27]: 
array([ 0.72062151,  1.02039858,  2.07877837,  3.94256869,  5.5139672 ,
    6.80194715,  6.83050498,  8.63027672])

# trick is to pass a nanosecond value directly
# pandas keeps all values internally as timedelta64[ns]
In [5]: pd.Series((np.round(a*1000)/1000)*1e9,dtype='timedelta64[ns]')
Out[5]: 
0   00:00:00.721000
1   00:00:01.020000
2   00:00:02.079000
3   00:00:03.943000
4   00:00:05.514000
5   00:00:06.802000
6   00:00:06.831000
7   00:00:08.630000
dtype: timedelta64[ns]
</snippet></ROW><ROW><id>15294181</id><snippet>In [8]: pd.Series((np.round(a*1000)/1000)*1e9,dtype='timedelta64[ns]') + pd.Timestamp('20110406')
Out[8]: 
0   2011-04-06 00:00:00.721000
1   2011-04-06 00:00:01.020000
2   2011-04-06 00:00:02.079000
3   2011-04-06 00:00:03.943000
4   2011-04-06 00:00:05.514000
5   2011-04-06 00:00:06.802000
6   2011-04-06 00:00:06.831000
7   2011-04-06 00:00:08.630000
dtype: datetime64[ns]
</snippet></ROW><ROW><id>15294377</id><snippet>bullseye</snippet></ROW><ROW><id>15294377</id><snippet>matplotlib</snippet></ROW><ROW><id>15294377</id><snippet>import numpy as np
import matplotlib.pyplot as plt

theta, r = np.mgrid[0:2*np.pi:20j, 0.2:1:10j]
z = np.random.random(theta.size).reshape(theta.shape)

fig, ax = plt.subplots(ncols=1, subplot_kw=dict(projection='polar'))

ax.pcolormesh(theta, r, z)
ax.set_yticklabels([])
ax.set_ylim([0, 1])

plt.show()
</snippet></ROW><ROW><id>15294377</id><snippet>ax.pcolormesh</snippet></ROW><ROW><id>15294420</id><snippet>glob</snippet></ROW><ROW><id>15294420</id><snippet>fileinput</snippet></ROW><ROW><id>15294420</id><snippet>import fileinput
from glob import glob

log_files = glob('/some/dir/with/logs/*.log')
for line in fileinput.input(log_files):
    pass # do something
</snippet></ROW><ROW><id>15294711</id><snippet>from django.forms.fields import DateField

fld = DateField()
dt = request.GET.get('date', '')
formatted_datetime = fld.to_python(dt)
</snippet></ROW><ROW><id>15295070</id><snippet>def get_urls(self):
    urls = super(AdminSiteGs, self).get_urls()

    my_urls = patterns('',
        url(r'^my_admin_view/$', self.admin_view(my_admin_view))
    )

    return my_urls + urls
</snippet></ROW><ROW><id>15295070</id><snippet>urlpatterns = patterns('',
    url(r'^admin/', include(admin_site_gs.urls)),  # not needed
)
</snippet></ROW><ROW><id>15295213</id><snippet>&gt;&gt;&gt; h = '16 03 01 00 e3 01'
&gt;&gt;&gt; h.replace(' ','').decode('hex')
'\x16\x03\x01\x00\xe3\x01'
&gt;&gt;&gt; h.replace(' ','').decode('hex').decode('utf8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "c:\Python27\lib\encodings\utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeDecodeError: 'utf8' codec can't decode byte 0xe3 in position 4: unexpected end of data
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15295213</id><snippet>&gt;&gt;&gt; h = 'c3 a1'
&gt;&gt;&gt; u = h.replace(' ','').decode('hex').decode('utf8')
&gt;&gt;&gt; u
u'\xe1'
&gt;&gt;&gt; print u
Ã¡
</snippet></ROW><ROW><id>15295634</id><snippet>parse_process_char</snippet></ROW><ROW><id>15295634</id><snippet>Modules/_csv.c</snippet></ROW><ROW><id>15295634</id><snippet>    else if (c == dialect-&gt;quotechar &amp;&amp;
             dialect-&gt;quoting != QUOTE_NONE) {
        if (dialect-&gt;doublequote) {
            /* doublequote; " represented by "" */
            self-&gt;state = QUOTE_IN_QUOTED_FIELD;
        }
        else {
            /* end of quote part of field */
            self-&gt;state = IN_FIELD;
        }
    }
    else {
        /* normal character - save in field */
        if (parse_add_char(self, c) &lt; 0)
            return -1;
    }
</snippet></ROW><ROW><id>15295634</id><snippet>else</snippet></ROW><ROW><id>15295634</id><snippet>else</snippet></ROW><ROW><id>15295634</id><snippet>self-&gt;state = IN_FIELD</snippet></ROW><ROW><id>15295974</id><snippet>Range("H5:J26").Select
Selection.ClearContents
</snippet></ROW><ROW><id>15295974</id><snippet>self.xl.Range("H5:J26").Select()
self.xl.Selection.ClearContents()
</snippet></ROW><ROW><id>15295974</id><snippet>from win32com.client.gencache import EnsureDispatch

exc = EnsureDispatch("Excel.Application")
exc.Visible = 1
exc.Workbooks.Open(r"f:\Python\Examples\test.xls")
exc.Sheets("data").Select()
exc.Range("H5:J26").Select()
exc.Selection.ClearContents()
</snippet></ROW><ROW><id>15296199</id><snippet>''.join(r'\x{0:x}'.format(ord(c)) for c in mystring)</snippet></ROW><ROW><id>15296199</id><snippet>&gt;&gt;&gt; mystring = "Hello World"
&gt;&gt;&gt; print ''.join(r'\x{0:x}'.format(ord(c)) for c in mystring)
\x48\x65\x6c\x6c\x6f\x20\x57\x6f\x72\x6c\x64
</snippet></ROW><ROW><id>15296199</id><snippet>str.encode</snippet></ROW><ROW><id>15296199</id><snippet>&gt;&gt;&gt; print ''.join(r'\x'+c.encode('hex_codec') for c in mystring)
\x48\x65\x6c\x6c\x6f\x20\x57\x6f\x72\x6c\x64
</snippet></ROW><ROW><id>15296255</id><snippet>from decimal import Decimal
import itertools

def encrypt(numbers_as_text, code):
    key = itertools.cycle(code[::-1])

    num = Decimal(numbers_as_text)

    power = 1
    for _ in numbers_as_text:
        num += power * int(next(key))
        power *= Decimal(10)

    return num



if __name__ == "__main__":
    print(encrypt('12345','12'))
</snippet></ROW><ROW><id>15296255</id><snippet>code[::-1]</snippet></ROW><ROW><id>15296255</id><snippet>itertools.cycle</snippet></ROW><ROW><id>15296255</id><snippet>key</snippet></ROW><ROW><id>15296255</id><snippet>2</snippet></ROW><ROW><id>15296255</id><snippet>1</snippet></ROW><ROW><id>15296255</id><snippet>2</snippet></ROW><ROW><id>15296255</id><snippet>1</snippet></ROW><ROW><id>15296255</id><snippet>2</snippet></ROW><ROW><id>15296255</id><snippet>1</snippet></ROW><ROW><id>15296255</id><snippet>Decimal</snippet></ROW><ROW><id>15296255</id><snippet>Decimal()</snippet></ROW><ROW><id>15296255</id><snippet>Decimal()</snippet></ROW><ROW><id>15296255</id><snippet>numbers_as_text</snippet></ROW><ROW><id>15296255</id><snippet>10</snippet></ROW><ROW><id>15296255</id><snippet>Decimal</snippet></ROW><ROW><id>15296255</id><snippet>power</snippet></ROW><ROW><id>15296255</id><snippet>1</snippet></ROW><ROW><id>15296255</id><snippet>10</snippet></ROW><ROW><id>15296255</id><snippet>num</snippet></ROW><ROW><id>15296255</id><snippet>for</snippet></ROW><ROW><id>15296255</id><snippet>for index in range(len(numbers_as_text))</snippet></ROW><ROW><id>15296311</id><snippet>items</snippet></ROW><ROW><id>15296311</id><snippet>&lt;ul&gt;
{% for item in data %}
{% for key, value in item.items %}
    {% if key == 'Server Name' %}
        &lt;li{% if forloop.last %} class='last'{% endif %}&gt;{{ value }}&lt;/li&gt;
    {% endif %}
    {% if key == 'Server Price' %}
        &lt;li{% if forloop.last %} class='last'{% endif %}&gt;{{ value }}&lt;/li&gt;
    {% endif %}
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>15296311</id><snippet>forloop.parentloop.last</snippet></ROW><ROW><id>15296360</id><snippet>python -tt</snippet></ROW><ROW><id>15296360</id><snippet>#!/usr/bin/python -tt
</snippet></ROW><ROW><id>15296360</id><snippet>print("example")</snippet></ROW><ROW><id>15296360</id><snippet>raw_input</snippet></ROW><ROW><id>15296360</id><snippet>raw_input</snippet></ROW><ROW><id>15296360</id><snippet>print</snippet></ROW><ROW><id>15296360</id><snippet>raw_input</snippet></ROW><ROW><id>15296360</id><snippet>print("example")</snippet></ROW><ROW><id>15296360</id><snippet>raw_input</snippet></ROW><ROW><id>15296360</id><snippet>raw_input()</snippet></ROW><ROW><id>15296360</id><snippet>input()</snippet></ROW><ROW><id>15296360</id><snippet>print</snippet></ROW><ROW><id>15296379</id><snippet>class MyUser(AbstractUser):

    gender = models.Charfield(....

    def __init__(self, *args, **kwargs):
       super(self, MyUser).__init__(*args, **kwargs)
       email = models.EmailField(blank=False, unique=True)
       email.contribute_to_class('email', self)
</snippet></ROW><ROW><id>15296415</id><snippet>import pandas as pd
import numpy as np

# your DataFrame; df = ...

pd.rolling_apply(df, 12, lambda x: np.prod(1 + x) - 1)
</snippet></ROW><ROW><id>15296529</id><snippet># Converts something like "14/Nov/2012:09:32:46"
# to "2012-11-14:09:32:46"
_MONTHS = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]
def convert(s):
  p = s.split(':', 1)
  t = p[0].split('/')
  return "%s-%02d-%02d:" % (t[2], _MONTHS.index(t[1]) + 1, int(t[0])) + p[1]
</snippet></ROW><ROW><id>15296578</id><snippet>a, b</snippet></ROW><ROW><id>15296578</id><snippet>c, d</snippet></ROW><ROW><id>15296578</id><snippet>(a, b), (c, d) = [10, 20], [15, 20]
</snippet></ROW><ROW><id>15296578</id><snippet>x, y = max(a, c), min(b, d)
if x &gt; y:  # no overlap
    x, y = None, None
</snippet></ROW><ROW><id>15296578</id><snippet>y - x</snippet></ROW><ROW><id>15296578</id><snippet>y - x + 1</snippet></ROW><ROW><id>15296745</id><snippet>Rscript</snippet></ROW><ROW><id>15296745</id><snippet>  retVal = Shell(MY_RSCRIPT_BAT, vbNormalFocus)  ## vba code here
</snippet></ROW><ROW><id>15296745</id><snippet>@echo off
C:
PATH R_PATH;%path%
cd DEMO_PATH
Rscript your_pca_script.R 
exit
</snippet></ROW><ROW><id>15296770</id><snippet>\d+</snippet></ROW><ROW><id>15296770</id><snippet>response = re.search(r'^(http://)?(www\.)?(vimeo\.com/)?(\d+)', embed_url)
</snippet></ROW><ROW><id>15296770</id><snippet>&gt;&gt;&gt; re.search(r'^(http://)?(www\.)?(vimeo\.com/)?(\d+)', embed_url).group(4)
'52422837'
</snippet></ROW><ROW><id>15296770</id><snippet>[...]</snippet></ROW><ROW><id>15296770</id><snippet>[\/\d+]</snippet></ROW><ROW><id>15296770</id><snippet>/</snippet></ROW><ROW><id>15296770</id><snippet>+</snippet></ROW><ROW><id>15297100</id><snippet>REQUIRED_FIELDS</snippet></ROW><ROW><id>15297100</id><snippet>AbstractUser</snippet></ROW><ROW><id>15297100</id><snippet>contrib/auth/models.py</snippet></ROW><ROW><id>15297100</id><snippet>AbstractBaseUser</snippet></ROW><ROW><id>15297100</id><snippet>REQUIRED_FIELDS = []</snippet></ROW><ROW><id>15297100</id><snippet>AbstractUser</snippet></ROW><ROW><id>15297100</id><snippet>REQUIRED_FIELDS = ['email']</snippet></ROW><ROW><id>15297100</id><snippet>class MyCoolUserModel(AbstractUser):
    REQUIRED_FIELDS = ['email', 'dob']
    ...
</snippet></ROW><ROW><id>15297100</id><snippet>createsuperuser</snippet></ROW><ROW><id>15297100</id><snippet>contrib/auth/management/commands/createsuperuser.py</snippet></ROW><ROW><id>15297100</id><snippet>core/management/commands/</snippet></ROW><ROW><id>15297100</id><snippet>manage.py</snippet></ROW><ROW><id>15297150</id><snippet>pip</snippet></ROW><ROW><id>15297150</id><snippet>easy_install</snippet></ROW><ROW><id>15297150</id><snippet>import simplejson
asset_json=simplejson.loads(json_string)
encoded=simplejson.encoder.JSONEncoderForHTML().encode(assets_json)
</snippet></ROW><ROW><id>15297150</id><snippet>encoded</snippet></ROW><ROW><id>15297150</id><snippet>'{"asset_id": "575155948f7d4c4ebccb02d4e8f84d2f", "body": "\\u003cscript\\u003e\\u003c/script\\u003e", "asset_created": null}'
</snippet></ROW><ROW><id>15297150</id><snippet>loads</snippet></ROW><ROW><id>15297150</id><snippet>simplejson.dumps(your_object_to_encode, cls=simplejson.encoder.JSONEncoderForHTML)
</snippet></ROW><ROW><id>15297150</id><snippet>&lt;script&gt;
//&lt;![CDATA[
var assets = [{
  "asset_created": null, 
  "asset_id": "575155948f7d4c4ebccb02d4e8f84d2f", 
  "body": "&lt;script&gt;&lt;/script&gt;"
}];
//]]&gt;
&lt;/script&gt;
</snippet></ROW><ROW><id>15297432</id><snippet>While True</snippet></ROW><ROW><id>15297432</id><snippet>threading.Thread</snippet></ROW><ROW><id>15297432</id><snippet>class WorkerThread(threading.Thread):

    def run(self):
        while True:
            print 'Working hard'
            time.sleep(0.5)

def runstuff():
    worker = WorkerThread()
    worker.start() #start thread here, which will call run()
</snippet></ROW><ROW><id>15297432</id><snippet>thread.start_new_thread(fun, args)</snippet></ROW><ROW><id>15297432</id><snippet>def fun():
    While True:
        #do stuff

thread.start_new_thread(fun) #run in thread.
</snippet></ROW><ROW><id>15297453</id><snippet>addErrback</snippet></ROW><ROW><id>15297453</id><snippet>deferredGenerator</snippet></ROW><ROW><id>15297453</id><snippet>page = None
for i in range(numRetries):
    wfd = defer.waitForDeferred(getPage(url,timeout=10))
    yield wfd
    try:
        page = wfd.getResult()
    except TimeoutError:
        # Do nothing, let the loop continue
        pass
    else:
        # Success, exit the loop
        break
if page is None:
    # Handle the timeout for real
    ...
else:
    # Continue processing
    ...
</snippet></ROW><ROW><id>15297798</id><snippet>key=lambda line: stringsplit(line)</snippet></ROW><ROW><id>15297844</id><snippet>labels</snippet></ROW><ROW><id>15297844</id><snippet># r_melted is the one defined upstream of your code snippet,
# not the results of calling r.transform()
labels = robj.StrVector(tuple(["a", "b", "c"]))
p = ggplot2.ggplot(r_melted) + \
    ggplot2.geom_boxplot(aes_string(**{"x": "factor(variable, levels = %s)" % labels,
                                       "y": "value"
                                       "fill": "group"})) + \
    ggplot2.scale_fill_manual(values=np.array(["#00BA38", "#F8766D"])) + \
    ggplot2.coord_flip()
</snippet></ROW><ROW><id>15297844</id><snippet>labels</snippet></ROW><ROW><id>15297844</id><snippet># r_melted is the one defined upstream of your code snippet,
# not the results of calling r.transform()
from rpy2.robjects.vectors import FactorVector
variable_i = r_melted.names.index('variable')
r_melted[variable_i] = FactorVector(r_melted[variable_i],
                                    levels = robj.StrVector(tuple(["a", "b", "c"]))
p = ggplot2.ggplot(r_melted) + \
    ggplot2.geom_boxplot(aes_string(**{"x": "variable",
                                       "y": "value"
                                       "fill": "group"})) + \
    ggplot2.scale_fill_manual(values=np.array(["#00BA38", "#F8766D"])) + \
    ggplot2.coord_flip()
</snippet></ROW><ROW><id>15297915</id><snippet>my_choices</snippet></ROW><ROW><id>15297915</id><snippet>form.fields</snippet></ROW><ROW><id>15297915</id><snippet>form.fields['my_choices']</snippet></ROW><ROW><id>15297915</id><snippet>__init__</snippet></ROW><ROW><id>15297915</id><snippet>def __init__(self, *args, **kwargs):
    choices = kwargs.pop('choices')
    super(MyForm, self).__init__(*args, **kwargs)
    self.fields['my_choices'] = choices
</snippet></ROW><ROW><id>15297915</id><snippet>form = MyForm(choices=my_choices)</snippet></ROW><ROW><id>15298012</id><snippet>(x, y)</snippet></ROW><ROW><id>15298012</id><snippet>0 0 0 0
0 0 0 0
0 1 0 0
0 0 0 0
</snippet></ROW><ROW><id>15298012</id><snippet>matrix = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 1, 0, 0], [0, 0, 0, 0]]
sparse_matrix = {(1, 2): 1}
</snippet></ROW><ROW><id>15298012</id><snippet>for x in xrange(4):
  for y in xrange(4):
      assert matrix[y][x] == sparse_matrix.get((x, y), 0)
</snippet></ROW><ROW><id>15298014</id><snippet>cfs = floating_bond.cashflows()
coupons = [ as_coupon(c) for c in cfs[:-1] ] # the last one is the redemption
print [ (c.rate(), c.accrualPeriod()) for c in coupons ]
</snippet></ROW><ROW><id>15298188</id><snippet>output = []

f = open( 'riskfactors.csv', 'rU' ) #open the file in read universal mode
for line in f:
    cells = line.split( "," )
    output.append( ( cells[ 0 ], cells[ 1 ], cells[ 3 ] ) ) #since we want the first, second and third column

f.close()

print output
</snippet></ROW><ROW><id>15298201</id><snippet>len-1</snippet></ROW><ROW><id>15298201</id><snippet>(1,2,3,4)</snippet></ROW><ROW><id>15298201</id><snippet>(3,4,5,6)</snippet></ROW><ROW><id>15298201</id><snippet>for</snippet></ROW><ROW><id>15298201</id><snippet>prefixes</snippet></ROW><ROW><id>15298201</id><snippet>def get_overlap(keys):
    # create map: prefix -&gt; set(keys with that prefix)
    prefixes = defaultdict(set)
    for key in keys:
        for prefix in [key[:i] for i in range(len(key))]:
            prefixes[prefix].add(key)
    # get keys with matching prefixes for all suffixes
    overlap = set()
    for key in keys:
        for suffix in [key[i:] for i in range(len(key))]:
            overlap.update([(key, other) for other in prefixes[suffix]
                                                      if other != key])
    return overlap
</snippet></ROW><ROW><id>15298201</id><snippet>2*n*k</snippet></ROW><ROW><id>15298201</id><snippet>n</snippet></ROW><ROW><id>15298201</id><snippet>k</snippet></ROW><ROW><id>15298201</id><snippet>prefixes</snippet></ROW><ROW><id>15298201</id><snippet>n*k</snippet></ROW><ROW><id>15298201</id><snippet>n^2*k</snippet></ROW><ROW><id>15298201</id><snippet>def get_overlap_simple(keys):
    prefixes = defaultdict(list)
    for key in keys:
        prefixes[key[:-1]].append(key)
    return [(key, other) for key in keys for other in prefixes[key[1:]]]
</snippet></ROW><ROW><id>15298418</id><snippet>xlxt</snippet></ROW><ROW><id>15298418</id><snippet>proc import datafile="C:\temp\test.csv"
     out=mydataset
     dbms=csv
     replace;
     getnames=yes;  /* Uses first row in CSV for column names */
     guessingrows=32767; 
run;
</snippet></ROW><ROW><id>15298795</id><snippet>categories=CategoryAnswers.objects.values('category', 'brand').distinct()
for cat in categories:
    print CategoryAnswers.objects.filter(category=cat["category"], brand=cat["brand"]).values('category', 'brand').annotate(total=Sum('answer'))
</snippet></ROW><ROW><id>15299006</id><snippet>noteb = ttk.Notebook( root, width=500, height=300 )
frame1 = tkinter.Frame( noteb )
textbox = tkinter.Text( frame1, put whatever you want to put here )
frame1.pack( expand=1, fill='both' )
noteb.add( frame1, whatever parameters you want )
noteb.pack( expand=1, fill='both' )
</snippet></ROW><ROW><id>15299366</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>15299366</id><snippet>%timeit</snippet></ROW><ROW><id>15299366</id><snippet>-n 1</snippet></ROW><ROW><id>15299366</id><snippet>%timeit</snippet></ROW><ROW><id>15299366</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>15299366</id><snippet>-n 1</snippet></ROW><ROW><id>15299366</id><snippet>-r 1</snippet></ROW><ROW><id>15299366</id><snippet>%timeit</snippet></ROW><ROW><id>15299366</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>15299366</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>15299366</id><snippet>%timeit</snippet></ROW><ROW><id>15299366</id><snippet>%timeit</snippet></ROW><ROW><id>15299366</id><snippet>%timeit</snippet></ROW><ROW><id>15299366</id><snippet>%lprun</snippet></ROW><ROW><id>15299366</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>15299366</id><snippet>numpy.loadtxt</snippet></ROW><ROW><id>15299366</id><snippet>%timeit</snippet></ROW><ROW><id>15299366</id><snippet>&gt;&gt;&gt; f = open('test.out', 'r');f.readline()
'a b c d e f g h i j k l m n o p q r s t u v w x y z\n'
&gt;&gt;&gt; %timeit -n 1 -r 1 np.loadtxt(f, unpack=True)
1 loops, best of 1: 31.1 ms per loop


Function: file_to_numpy_ordered_dict at line 88
Total time: 0.083706 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    88                                           def file_to_numpy_ordered_dict(filename):
    89                                               """
    90                                               Read a space-separated-value file as a dict of columns, keyed by
    91                                               column header where each column (dict value) is a numpy array.
    92                                               """
    93                                           
    94         1          583    583.0      0.7      with open(filename, 'r') as file_obj:
    95         1          313    313.0      0.4          headers = file_obj.readline().split()
    96                                           
    97                                                   # unpack=True b/c want data organized as column based arrays, not rows
    98         1        82417  82417.0     98.5          arrs = np.loadtxt(file_obj, unpack=True)
    99                                           
   100         1          226    226.0      0.3      ret_dict = collections.OrderedDict()
   101        27           35      1.3      0.0      for ii, colname in enumerate(headers):
   102        26          131      5.0      0.2          ret_dict[colname] = arrs[ii]
   103                                           
   104         1            1      1.0      0.0      return ret_dict
</snippet></ROW><ROW><id>15299399</id><snippet>def displayHand(hand):
    letters = []
    for letter, count in hand.iteritems():
        letters.extend([letter] * count)
    return ' '.join(letters)
</snippet></ROW><ROW><id>15299399</id><snippet>&gt;&gt;&gt; hand = {'a': 1, 'q': 1, 'd': 2, 'y': 1, 'm': 1, 'o': 1}
&gt;&gt;&gt; displayHand(hand)
'a q d d y m o'
&gt;&gt;&gt; print 'Current Hand:', displayHand(hand)
Current Hand: a q d d y m o
</snippet></ROW><ROW><id>15299399</id><snippet>displayHand()</snippet></ROW><ROW><id>15299399</id><snippet>print 'Current Hand:',
displayHand(hand)
</snippet></ROW><ROW><id>15299497</id><snippet>event.inaxes</snippet></ROW><ROW><id>15299497</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig, axes = plt.subplots(ncols=2)

axes[0].imshow(np.random.random((10,10)), interpolation='none')
axes[1].imshow(np.random.random((10,10)), interpolation='none')

def motion_capture(event):
    if event.inaxes is axes[0]:
        print event.xdata
        print event.ydata


fig.canvas.mpl_connect('motion_notify_event', motion_capture)

plt.show()
</snippet></ROW><ROW><id>15299851</id><snippet>NUMBER.setParseAction(lambda locn,tokens: (locn,tokens[0]))
</snippet></ROW><ROW><id>15299851</id><snippet>setParseAction</snippet></ROW><ROW><id>15299851</id><snippet>fn()
fn(tokens)
fn(locn,tokens)
fn(srctring,locn,tokens)
</snippet></ROW><ROW><id>15299851</id><snippet>[(0, '1'), (2, '2'), (4, '34')]
</snippet></ROW><ROW><id>15300191</id><snippet>def accepts(*types):
    def check_accepts(f):
        assert len(types) == f.func_code.co_argcount
        def new_f(*args, **kwds):
            for (a, t) in zip(args, types):
                assert isinstance(a, t), \
                       "arg %r does not match %s" % (a,t)
            return f(*args, **kwds)
        new_f.func_name = f.func_name
        return new_f
    return check_accepts
</snippet></ROW><ROW><id>15300191</id><snippet>@accepts(int, (int,float))
def func(arg1, arg2):
    return arg1 * arg2

func(3, 2) # -&gt; 6
func('3', 2) # -&gt; AssertionError: arg '3' does not match &lt;type 'int'&gt;
</snippet></ROW><ROW><id>15300403</id><snippet>unittest2</snippet></ROW><ROW><id>15300664</id><snippet>def splitList(myList,option):

    result = []

    if option == 0:
        for item in myList:
            if (item &lt; 0):
                result.append(item)
    elif option == 1:
        for item in myList:
            if (item % 2 == 0):
                result.append(item)
    else:
        return "Option Error"

    return sorted(result)

print splitList([1,-3,5,7,-9,-11,0,2,-4], 0)
print splitList([1,-3,5,7,-9,-11,0,2,-4], 1)
print splitList([1,-3,5,7,-9,-11,0,2,-4], 2)
</snippet></ROW><ROW><id>15300664</id><snippet>[-11, -9, -4, -3]
[-4, 0, 2]
Option Error
</snippet></ROW><ROW><id>15300671</id><snippet>None</snippet></ROW><ROW><id>15300671</id><snippet>return None</snippet></ROW><ROW><id>15300671</id><snippet>None</snippet></ROW><ROW><id>15300671</id><snippet>None</snippet></ROW><ROW><id>15300671</id><snippet>return None</snippet></ROW><ROW><id>15300671</id><snippet>None</snippet></ROW><ROW><id>15300671</id><snippet>def get_mother(person):
    if is_human(person):
        return person.mother
    else:
        return None
</snippet></ROW><ROW><id>15300671</id><snippet>return</snippet></ROW><ROW><id>15300671</id><snippet>break</snippet></ROW><ROW><id>15300671</id><snippet>return</snippet></ROW><ROW><id>15300671</id><snippet>return</snippet></ROW><ROW><id>15300671</id><snippet>def find_prisoner_with_knife(prisoners):
    for prisoner in prisoners:
        if "knife" in prisoner.items:
            prisoner.move_to_inquisition()
            return # no need to check rest of the prisoners nor raise an alert
    raise_alert()
</snippet></ROW><ROW><id>15300671</id><snippet>var = find_prisoner_with_knife()</snippet></ROW><ROW><id>15300671</id><snippet>None</snippet></ROW><ROW><id>15300671</id><snippet>return</snippet></ROW><ROW><id>15300671</id><snippet>void</snippet></ROW><ROW><id>15300671</id><snippet>def set_mother(person, mother):
    if is_human(person):
        person.mother = mother
</snippet></ROW><ROW><id>15300671</id><snippet>var = set_mother(my_person, my_mother)</snippet></ROW><ROW><id>15300763</id><snippet>ManyToOneRel</snippet></ROW><ROW><id>15300763</id><snippet>django.db.models.fields.Field</snippet></ROW><ROW><id>15301104</id><snippet>Tk</snippet></ROW><ROW><id>15301104</id><snippet>Toplevel</snippet></ROW><ROW><id>15301120</id><snippet>(?: ...)</snippet></ROW><ROW><id>15301120</id><snippet>re</snippet></ROW><ROW><id>15301120</id><snippet>(?:...)</snippet></ROW><ROW><id>15301120</id><snippet>'('+ tag_join + ')'</snippet></ROW><ROW><id>15301120</id><snippet>"|".join(re.escape(tag) for tag in tags)</snippet></ROW><ROW><id>15301183</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('--example', nargs='?', const=1, type=int)
args = parser.parse_args()
print(args)
</snippet></ROW><ROW><id>15301183</id><snippet>% test.py 
Namespace(example=None)
% test.py --example
Namespace(example=1)
% test.py --example 2
Namespace(example=2)
</snippet></ROW><ROW><id>15301183</id><snippet>nargs='?'</snippet></ROW><ROW><id>15301183</id><snippet>const=1</snippet></ROW><ROW><id>15301183</id><snippet>type=int</snippet></ROW><ROW><id>15301183</id><snippet>test.py</snippet></ROW><ROW><id>15301183</id><snippet>example</snippet></ROW><ROW><id>15301183</id><snippet>--example</snippet></ROW><ROW><id>15301183</id><snippet>default=1</snippet></ROW><ROW><id>15301183</id><snippet>parser.add_argument('--example', nargs='?', const=1, type=int, default=1)
</snippet></ROW><ROW><id>15301183</id><snippet>% test.py 
Namespace(example=1)
</snippet></ROW><ROW><id>15301205</id><snippet>Time</snippet></ROW><ROW><id>15301205</id><snippet>time1 = Time()</snippet></ROW><ROW><id>15301205</id><snippet>__str__</snippet></ROW><ROW><id>15301385</id><snippet>get_tag_list</snippet></ROW><ROW><id>15301385</id><snippet>get_by_model</snippet></ROW><ROW><id>15301385</id><snippet>'my tag with spaces'</snippet></ROW><ROW><id>15301385</id><snippet>Tag.objects.filter(name__in=parse_tag_input(tags))
</snippet></ROW><ROW><id>15301385</id><snippet>parse_tag_input</snippet></ROW><ROW><id>15301385</id><snippet>['my', 'tag', 'with', 'spaces']</snippet></ROW><ROW><id>15301385</id><snippet>get_tag_list</snippet></ROW><ROW><id>15301385</id><snippet>elif isinstance(tags, (types.ListType, types.TupleType)):
    ...
</snippet></ROW><ROW><id>15301385</id><snippet>TaggedItem.object.get_by_model(MyModel, ['my tag with spaces'])
</snippet></ROW><ROW><id>15301464</id><snippet>^80</snippet></ROW><ROW><id>15301464</id><snippet>print('{:^80}'.format('Oops!  That was not a valid number.  Try again...'))
</snippet></ROW><ROW><id>15301464</id><snippet>               Oops!  That was not a valid number.  Try again...                
</snippet></ROW><ROW><id>15301961</id><snippet>(?=...)</snippet></ROW><ROW><id>15301961</id><snippet>In [33]: re.sub( r"([a-zA-Z0-9])\s+(?=[a-zA-Z0-9])" , r"\1*" , '3 a 5 b')
Out[33]: '3*a*5*b'

In [32]: re.sub( r"([a-zA-Z0-9])\s+(?=[a-zA-Z0-9])" , r"\1*" , "3 /a 5! b" )
Out[32]: '3 /a*5! b'
</snippet></ROW><ROW><id>15302042</id><snippet>*args</snippet></ROW><ROW><id>15302042</id><snippet>def foo(a, b=3, *args, **kwargs):
</snippet></ROW><ROW><id>15302042</id><snippet>b</snippet></ROW><ROW><id>15302042</id><snippet>foo(x) # a=x, b=3, args=(), kwargs={}
foo(x, y) # a=x, b=y, args=(), kwargs={}
foo(x, b=y) # a=x, b=y, args=(), kwargs={}
foo(x, y, z, k) # a=x, b=y, args=(z, k), kwargs={}
foo(x, c=y, d=k) # a=x, b=3, args=(), kwargs={'c': y, 'd': k}
foo(x, c=y, b=z, d=k) # a=x, b=z, args=(), kwargs={'c': y, 'd': k}
</snippet></ROW><ROW><id>15302042</id><snippet>foo(x, y, b=z)</snippet></ROW><ROW><id>15302042</id><snippet>b</snippet></ROW><ROW><id>15302042</id><snippet>*args</snippet></ROW><ROW><id>15302196</id><snippet>subprocess.Popen( ... , stdout=PIPE)</snippet></ROW><ROW><id>15302196</id><snippet>Popen</snippet></ROW><ROW><id>15302196</id><snippet>stdout</snippet></ROW><ROW><id>15302196</id><snippet>stdout</snippet></ROW><ROW><id>15302196</id><snippet>AsyncResult.stdout</snippet></ROW><ROW><id>15302196</id><snippet>rc = parallel.Client()
dview = rc[:]
def ff(x):
    print(x)
    return x**2
sync = dview.map_sync(ff,[1,2,3,4])
print('sync res=%r' % sync)
async = dview.map_async(ff,[1,2,3,4])
print('async res=%r' % async)
async.get()
</snippet></ROW><ROW><id>15302196</id><snippet>sync res=[1, 4, 9, 16]
async res=&lt;AsyncMapResult: ff&gt;
</snippet></ROW><ROW><id>15302196</id><snippet>AsyncResult.stdout</snippet></ROW><ROW><id>15302196</id><snippet>print(async.stdout)
['1\n2\n', '3\n4\n']
</snippet></ROW><ROW><id>15302196</id><snippet>print('async output:')
async.display_outputs()
</snippet></ROW><ROW><id>15302196</id><snippet>async output:
[stdout:0] 
1
2
[stdout:1] 
3
4
</snippet></ROW><ROW><id>15302196</id><snippet>async.get()</snippet></ROW><ROW><id>15302196</id><snippet>display_outputs()</snippet></ROW><ROW><id>15302196</id><snippet>print(async.display_outputs())</snippet></ROW><ROW><id>15302212</id><snippet>requests module</snippet></ROW><ROW><id>15302212</id><snippet>import sys
sys.path.append(r'C:\\Python27\\Lib\\site-packages\\')
sys.path.append(r'C:\\Python27\\Lib\\')
sys.path.append(r'C:\\Python27\\Lib\\site-packages\\requests-1.1.0-py2.7.egg\\')
sys.path.append(r'C:\\Python27\\Lib\\site-packages\\simplejson-3.1.0-py2.7.egg\\simplejson')
sys.path.append(r'C:\\Python27\\Lib\\site-packages\\simplejson-3.1.0-py2.7.egg\\')
sys.path.append(r'C:\\Python27\\Lib\\site-packages\\simplejson-3.1.0-py2.7.egg\\simplejson\\tests\\')
</snippet></ROW><ROW><id>15302239</id><snippet>__init__.py</snippet></ROW><ROW><id>15302239</id><snippet>code.engine</snippet></ROW><ROW><id>15302239</id><snippet>code</snippet></ROW><ROW><id>15302369</id><snippet>data = [{"name": "John", "age": "20", "occupation": "Python pro"}, \
        {"name": "Jack", "age": "80", "occupation": "Olympic Athlete"}, \
        {"name": "John", "age": "20", "occupation": "Student"}]

new_data = []
names_ages = set([])
for d in data:
    name_age = (d["name"], d["age"])
    if name_age not in names_ages:
        new_data.append(d)
    names_ages.add(name_age)

print new_data
# [{'age': '20', 'name': 'John', 'occupation': 'Python pro'},
#  {'age': '80', 'name': 'Jack', 'occupation': 'Olympic Athlete'}]
</snippet></ROW><ROW><id>15302633</id><snippet>__name</snippet></ROW><ROW><id>15302633</id><snippet>__name</snippet></ROW><ROW><id>15302633</id><snippet>__init__</snippet></ROW><ROW><id>15302633</id><snippet>__name</snippet></ROW><ROW><id>15302633</id><snippet>class Cat:
  def __init__(self, newName):
    __name = newName
  def meow(self):
    print "Hi from {0}".format(self.__name)

c = Cat("Mittens")
c.meow() # prints: "Hi from "
</snippet></ROW><ROW><id>15302633</id><snippet>AttributeError</snippet></ROW><ROW><id>15302633</id><snippet>__init__</snippet></ROW><ROW><id>15302633</id><snippet>__name</snippet></ROW><ROW><id>15302633</id><snippet>self</snippet></ROW><ROW><id>15302633</id><snippet>self.__name = newName</snippet></ROW><ROW><id>15302633</id><snippet>__name</snippet></ROW><ROW><id>15302633</id><snippet>__getattribute__</snippet></ROW><ROW><id>15302634</id><snippet>enumerate</snippet></ROW><ROW><id>15302634</id><snippet>for i, row in enumerate(data):
    for j, cell in enumerate(row):
        # now you can access data[i][j-1], data[i+1][j] etc
</snippet></ROW><ROW><id>15302634</id><snippet>def myLeftNeighborGenerator(data):
    for i, row in enumerate(data):
        for j, cell in enumerate(row):
            leftNeighbor = data[i][j-1] if j &gt; 0 else None
            yield cell, leftNeighbor
</snippet></ROW><ROW><id>15302634</id><snippet>for x, left in myLeftNeighborGenerator(data):
    if x[0][0] == 'f':
        x[0][1] += 1
    if left is not None:
        # whatever
</snippet></ROW><ROW><id>15302750</id><snippet>&lt;html&gt;Inline image here: &lt;img src="cid:test.jpg"&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>15302750</id><snippet>files=MultiDict([("inline", open("files/test.jpg"))])
</snippet></ROW><ROW><id>15302905</id><snippet>np.dot(a, b)</snippet></ROW><ROW><id>15302905</id><snippet>&gt;&gt;&gt; a.dot(v)
array([[ 3.,  3.,  3.],
       [ 3.,  3.,  3.],
       [ 3.,  3.,  3.]])
</snippet></ROW><ROW><id>15302905</id><snippet>v.dot(a)</snippet></ROW><ROW><id>15302905</id><snippet>np.rollaxis</snippet></ROW><ROW><id>15302905</id><snippet>&gt;&gt;&gt; v.dot(np.rollaxis(a, 2, 1))
array([[ 3.,  3.,  3.],
       [ 3.,  3.,  3.],
       [ 3.,  3.,  3.]])
</snippet></ROW><ROW><id>15302905</id><snippet>np.dot</snippet></ROW><ROW><id>15302905</id><snippet>out</snippet></ROW><ROW><id>15302905</id><snippet>np.einsum</snippet></ROW><ROW><id>15302905</id><snippet>&gt;&gt;&gt; a = np.ones((3, 3, 2))
&gt;&gt;&gt; np.einsum('i, jki', v, a)
array([[ 3.,  3.,  3.],
       [ 3.,  3.,  3.],
       [ 3.,  3.,  3.]])
</snippet></ROW><ROW><id>15302905</id><snippet>In [4]: %timeit a.dot(v)
100000 loops, best of 3: 2.43 us per loop

In [5]: %timeit v.dot(np.rollaxis(a, 2, 1))
100000 loops, best of 3: 4.49 us per loop

In [7]: %timeit np.tensordot(v, a, axes=(0, 2))
100000 loops, best of 3: 14.9 us per loop

In [8]: %timeit np.einsum('i, jki', v, a)
100000 loops, best of 3: 2.91 us per loop
</snippet></ROW><ROW><id>15303051</id><snippet>m = Member()</snippet></ROW><ROW><id>15303051</id><snippet>set_password()</snippet></ROW><ROW><id>15303051</id><snippet>class Member(Base):
    __table__ = Table('member', Metadata, autoload=True)

    @classmethod
    def set_password(cls, member_id, password):
        member = session.query(Member).filter_by(member_id=member_id).one()
        member.password = password
        session.flush()

# usage:

Member.set_password(56, "somepassword")
</snippet></ROW><ROW><id>15303051</id><snippet>class Member(Base):
    __table__ = Table('member', Metadata, autoload=True)

    @classmethod
    def set_password(cls, member_id, password):
        session.query(Member).filter_by(member_id=member_id).\
                    update({'password':password}, synchronize_session=False)
</snippet></ROW><ROW><id>15303076</id><snippet>if 'n' in playAgain:
    print "too bad"
    playAgain = 'yes'
</snippet></ROW><ROW><id>15303076</id><snippet>print('Do you want to play again? (yes or no)')
playAgain = input()
</snippet></ROW><ROW><id>15303076</id><snippet>playAgain = input('Do you want to play again? (yes or no)')
</snippet></ROW><ROW><id>15303076</id><snippet>input</snippet></ROW><ROW><id>15303168</id><snippet>a = np.array([0,.1,.5,1])
epsilon = 1e-5
a[a==0] += epsilon
a[a==1] += -epsilon
</snippet></ROW><ROW><id>15303168</id><snippet>a==0</snippet></ROW><ROW><id>15303168</id><snippet>In : a==0
Out: array([True, False, False, False], dtype=bool)
</snippet></ROW><ROW><id>15303168</id><snippet>a</snippet></ROW><ROW><id>15303168</id><snippet>True</snippet></ROW><ROW><id>15303168</id><snippet>False</snippet></ROW><ROW><id>15303185</id><snippet>a = [['0', '0'], ['0', '0'], ['0', '0']]
</snippet></ROW><ROW><id>15303185</id><snippet>&gt;&gt;&gt; [e for sub in a for e in sub]
['0', '0', '0', '0', '0', '0']
</snippet></ROW><ROW><id>15303185</id><snippet>&gt;&gt;&gt; fl=[e for sub in a for e in sub]
&gt;&gt;&gt; fl[1]=1
&gt;&gt;&gt; fl[2]=2
&gt;&gt;&gt; fl
['0', 1, 2, '0', '0', '0']
</snippet></ROW><ROW><id>15303185</id><snippet>&gt;&gt;&gt; fl[1:2]='XX'
&gt;&gt;&gt; fl
['0', 'X', 'X', '0', '0', '0', '0', '0', '0', '0', '0']
</snippet></ROW><ROW><id>15303185</id><snippet>&gt;&gt;&gt; [list(e) for e in zip(*[fl[i::2] for i in range(2)])]
[['0', 'X'], ['X', '0'], ['0', '0']]
</snippet></ROW><ROW><id>15303185</id><snippet>li=[[1,2,3],[4,5],[6],[7,8,9,10]]

def xlate(li,wanted):
    idx=0
    for i,e in enumerate(li):
        for j,e_ in enumerate(e):
            if idx==wanted: return (i,j)
            idx+=1


    return (None,None)        

t=xlate(li,5)
li[t[0]][t[1]]='X'  
</snippet></ROW><ROW><id>15303185</id><snippet>[[1, 2, 3], [4, 5], ['X'], [7, 8, 9, 10]]
</snippet></ROW><ROW><id>15303254</id><snippet>x = 1</snippet></ROW><ROW><id>15303599</id><snippet>file1.txt</snippet></ROW><ROW><id>15303599</id><snippet>with open('file1.txt', 'w') as openfile:
    # write to openfile

# openfile is automatically closed once you step outside the `with` block.
</snippet></ROW><ROW><id>15303670</id><snippet>self.ui.residentComboBox.currentText()</snippet></ROW><ROW><id>15303670</id><snippet>self.ui.residentComboBox.currentText().split()[0]
</snippet></ROW><ROW><id>15303670</id><snippet>[0]</snippet></ROW><ROW><id>15303670</id><snippet>t = "3426523 askew chan"
print t.split()
#['3426523','askew','chan']
print t.split()[0]
#'3426523'
</snippet></ROW><ROW><id>15303685</id><snippet>__init__.py</snippet></ROW><ROW><id>15303685</id><snippet>svn log</snippet></ROW><ROW><id>15303714</id><snippet>User</snippet></ROW><ROW><id>15303714</id><snippet> from django.contrib.auth.models import User
</snippet></ROW><ROW><id>15303974</id><snippet>rpy</snippet></ROW><ROW><id>15303974</id><snippet>dz_vec &lt;- dz_vec[!is.na(dz_vec)]</snippet></ROW><ROW><id>15303974</id><snippet>NA</snippet></ROW><ROW><id>15303974</id><snippet>length()</snippet></ROW><ROW><id>15303974</id><snippet>len()</snippet></ROW><ROW><id>15303974</id><snippet>sapply</snippet></ROW><ROW><id>15303974</id><snippet>mean</snippet></ROW><ROW><id>15303974</id><snippet>sd</snippet></ROW><ROW><id>15303974</id><snippet>numpy</snippet></ROW><ROW><id>15304128</id><snippet>names1880 = pd.read_csv('yob1880.txt', names={'name', 'sex', 'births'})
</snippet></ROW><ROW><id>15304128</id><snippet>{'a','b','c'}</snippet></ROW><ROW><id>15304128</id><snippet>set</snippet></ROW><ROW><id>15304128</id><snippet>&gt;&gt;&gt; {'name', 'sex', 'births'}
set(['births', 'name', 'sex'])
</snippet></ROW><ROW><id>15304128</id><snippet>list</snippet></ROW><ROW><id>15304128</id><snippet>tuple</snippet></ROW><ROW><id>15304128</id><snippet>&gt;&gt;&gt; ['name', 'sex', 'births']
['name', 'sex', 'births']
&gt;&gt;&gt; ('name', 'sex', 'births')
('name', 'sex', 'births')
</snippet></ROW><ROW><id>15304172</id><snippet>import sys
print sys.stdin.read()
</snippet></ROW><ROW><id>15304172</id><snippet>python echo.py &lt; test.txt
</snippet></ROW><ROW><id>15304310</id><snippet>CFloat</snippet></ROW><ROW><id>15304310</id><snippet>Float</snippet></ROW><ROW><id>15304310</id><snippet>Float</snippet></ROW><ROW><id>15304310</id><snippet>class CFloatDemo(HasTraits):
    f = Float
    cf = CFloat

demo = CFloatDemo()

demo.f = '3.0'  # This raises a TraitError
demo.cf = '3.0' # This assigns 3.0 to 'cf'
</snippet></ROW><ROW><id>15304310</id><snippet>TextEditor</snippet></ROW><ROW><id>15304310</id><snippet>traits_view=View(
   Item('f', editor=TextEditor(auto_set=False,enter_set=True, evaluate=float)),
   Item(name='click')
)
</snippet></ROW><ROW><id>15304310</id><snippet>Float</snippet></ROW><ROW><id>15304351</id><snippet>Element</snippet></ROW><ROW><id>15304351</id><snippet>.getroot()</snippet></ROW><ROW><id>15304351</id><snippet>tostring()</snippet></ROW><ROW><id>15304351</id><snippet>xmlstr = ElementTree.tostring(et, encoding='utf8', method='xml')
</snippet></ROW><ROW><id>15304498</id><snippet>nameA</snippet></ROW><ROW><id>15304498</id><snippet>else</snippet></ROW><ROW><id>15304498</id><snippet>text= wx.TextEntryDialog(None, "What is your name?", "Title", " ")
if text.ShowModal == wx.ID_OK:         # this is not correct. see edit
    nameA = text.GetValue()
else:
    nameA = 'Nothing'
</snippet></ROW><ROW><id>15304498</id><snippet>nameA</snippet></ROW><ROW><id>15304498</id><snippet>if</snippet></ROW><ROW><id>15304498</id><snippet>ShowModal()</snippet></ROW><ROW><id>15304498</id><snippet>dlg = wx.TextEntryDialog(None, "What is your name?", "Title", " ")

answer = dlg.ShowModal()

if answer == wx.ID_OK:
    nameA = dlg.GetValue()
else:
    nameA = 'Nothing'

dlg.Destroy()
</snippet></ROW><ROW><id>15304570</id><snippet>&gt;&gt;&gt; s = 'abacdaebfxxxxxxxxxxxxxxxxxxxxxabc'
&gt;&gt;&gt; finder = lambda lst, inds, x: [lst.index(x, i) for i in inds]
&gt;&gt;&gt; finder(s, [0, 2, 3, 10], 'a')
[0, 2, 5, 30]
</snippet></ROW><ROW><id>15304570</id><snippet>s</snippet></ROW><ROW><id>15304735</id><snippet>readline</snippet></ROW><ROW><id>15304735</id><snippet>import cmd
import traceback

def log_exceptions(fun):
    def wrapped(*a, **kw):
        try:
            return fun(*a, **kw)
        except Exception:
            print traceback.format_exc()
            raise

    return wrapped

class App(cmd.Cmd):
    @log_exceptions
    def complete_foo(self,*arg):
        # Uncommenting this line will silently crash the progrm
        # making it hard to debug.
        # Is there a way to force the program to crash ?
        c = 2 + "ddda"
        return "d dzpo idz dza dpaoi".split(" ")
</snippet></ROW><ROW><id>15304735</id><snippet>$ python c.py
(Cmd) foo Traceback (most recent call last):
  File "c.py", line 7, in wrapped
    return fun(*a, **kw)
  File "c.py", line 20, in complete_foo
    c = 2 + "ddda"
TypeError: unsupported operand type(s) for +: 'int' and 'str'
</snippet></ROW><ROW><id>15304825</id><snippet>sqlaccdb = "SELECT * FROM [" + rtn + "]"
</snippet></ROW><ROW><id>15304843</id><snippet>$HOME/.vim/ftplugin/</snippet></ROW><ROW><id>15304843</id><snippet>filetype plugin on
syntax on
</snippet></ROW><ROW><id>15304843</id><snippet>python</snippet></ROW><ROW><id>15304843</id><snippet>did_filetype()</snippet></ROW><ROW><id>15304843</id><snippet>python</snippet></ROW><ROW><id>15304843</id><snippet>if did_filetype()
    finish
endif
if getline(1) =~ '.*python.*'
    setfiletype python
endif
</snippet></ROW><ROW><id>15304843</id><snippet>setlocal tabstop=4
setlocal shiftwidth=4
setlocal expandtab
setlocal softtabstop=4
setlocal textwidth=79
</snippet></ROW><ROW><id>15304843</id><snippet>scripts.vim</snippet></ROW><ROW><id>15304843</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>15304843</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>15304843</id><snippet>/usr/share/vim/vim73/scripts.vim</snippet></ROW><ROW><id>15304946</id><snippet>print displayHand</snippet></ROW><ROW><id>15304946</id><snippet>def compPlayHand(hand, wordList, n):
    #  Keep track of the total score
    totalScore = 0
    # As long as there are still usable letters left in the hand:
    while compChooseWord(hand,wordList,n) is not None:

        # Display the hand

        print "Current Hand: ",
        displayHand(hand)

        word = compChooseWord(hand,wordList,n)  # comp chooses word
        hand = updateHand(hand,word)
        # Tell the user how many points the word earned, and the updated total score, in one line followed by a blank line
        getWordScore(word,n)
        totalScore += getWordScore(word,n)
        # Update the hand
        c = calculateHandlen(hand)

        print   '"'+str(word)+'"' + " earned " + str(getWordScore(word,n)) +' points.' " Total:  " + str(totalScore) + " points."     # Otherwise (the word is valid):
        print

        if compChooseWord(hand,wordList,n) is None:  # End the game (break out of the loop)

            print  "Current Hand: ",
            displayHand(hand)

            print "Total score: " + str(totalScore) + " points."
</snippet></ROW><ROW><id>15304968</id><snippet>object</snippet></ROW><ROW><id>15304968</id><snippet>str</snippet></ROW><ROW><id>15304968</id><snippet>int</snippet></ROW><ROW><id>15304968</id><snippet>__slots__</snippet></ROW><ROW><id>15305069</id><snippet>Image.open</snippet></ROW><ROW><id>15305069</id><snippet>db.image.picture</snippet></ROW><ROW><id>15305069</id><snippet>Field</snippet></ROW><ROW><id>15305069</id><snippet>pic = Image.open(os.path.join(request.folder,'uploads',form.vars.picture))
</snippet></ROW><ROW><id>15305069</id><snippet>blob</snippet></ROW><ROW><id>15305069</id><snippet>retrieve</snippet></ROW><ROW><id>15305077</id><snippet>In [11]: str.join?
Namespace:  Python builtin
Docstring:
S.join(iterable) -&gt; string

Return a string which is the concatenation of the strings in the
iterable.  The separator between elements is S.
</snippet></ROW><ROW><id>15305077</id><snippet>In [12]: ", ".join("+".join(chars) for chars in [A1, B1, C1])
Out[12]: 'a+b+c, d+e+f, g+h+i'
</snippet></ROW><ROW><id>15305116</id><snippet>import os
import errno

print {i:os.strerror(i) for i in sorted(errno.errorcode)}
</snippet></ROW><ROW><id>15305116</id><snippet>{1: 'Operation not permitted', 2: 'No such file or directory', 3: 'No such process', 4: 'Interrupted system call', 5: 'Input/output error', 6: 'Device not configured', 7: 'Argument list too long', 8: 'Exec format error', 9: 'Bad file descriptor', 10: 'No child processes', 11: 'Resource deadlock avoided', 12: 'Cannot allocate memory', 13: 'Permission denied', 14: 'Bad address', 15: 'Block device required', 16: 'Resource busy', 17: 'File exists', 18: 'Cross-device link', 19: 'Operation not supported by device', 20: 'Not a directory', 21: 'Is a directory', 22: 'Invalid argument', 23: 'Too many open files in system', 24: 'Too many open files', 25: 'Inappropriate ioctl for device', 26: 'Text file busy', 27: 'File too large', 28: 'No space left on device', 29: 'Illegal seek', 30: 'Read-only file system', 31: 'Too many links', 32: 'Broken pipe', 33: 'Numerical argument out of domain', 34: 'Result too large', 35: 'Resource temporarily unavailable', 36: 'Operation now in progress', 37: 'Operation already in progress', 38: 'Socket operation on non-socket', 39: 'Destination address required', 40: 'Message too long', 41: 'Protocol wrong type for socket', 42: 'Protocol not available', 43: 'Protocol not supported', 44: 'Socket type not supported', 46: 'Protocol family not supported', 47: 'Address family not supported by protocol family', 48: 'Address already in use', 49: "Can't assign requested address", 50: 'Network is down', 51: 'Network is unreachable', 52: 'Network dropped connection on reset', 53: 'Software caused connection abort', 54: 'Connection reset by peer', 55: 'No buffer space available', 56: 'Socket is already connected', 57: 'Socket is not connected', 58: "Can't send after socket shutdown", 59: "Too many references: can't splice", 60: 'Operation timed out', 61: 'Connection refused', 62: 'Too many levels of symbolic links', 63: 'File name too long', 64: 'Host is down', 65: 'No route to host', 66: 'Directory not empty', 68: 'Too many users', 69: 'Disc quota exceeded', 70: 'Stale NFS file handle', 71: 'Too many levels of remote in path', 77: 'No locks available', 78: 'Function not implemented', 84: 'Value too large to be stored in data type', 90: 'Identifier removed', 91: 'No message of desired type', 92: 'Illegal byte sequence', 94: 'Bad message', 95: 'EMULTIHOP (Reserved)', 96: 'No message available on STREAM', 97: 'ENOLINK (Reserved)', 98: 'No STREAM resources', 99: 'Not a STREAM', 100: 'Protocol error', 101: 'STREAM ioctl timeout', 102: 'Operation not supported on socket'}    
</snippet></ROW><ROW><id>15305220</id><snippet>decipher = dict(zip(numbs1,chars)) 
stringc = ''.join(decipher[stringb[i:i+2]] for i in range(0, len(stringb), 2));
print "Decoded: ", stringc
</snippet></ROW><ROW><id>15305225</id><snippet>command=lambda: self.addkey(str(i))
</snippet></ROW><ROW><id>15305225</id><snippet>i</snippet></ROW><ROW><id>15305225</id><snippet>i</snippet></ROW><ROW><id>15305225</id><snippet>for</snippet></ROW><ROW><id>15305225</id><snippet>i = 3</snippet></ROW><ROW><id>15305225</id><snippet>3</snippet></ROW><ROW><id>15305225</id><snippet>i</snippet></ROW><ROW><id>15305225</id><snippet>i</snippet></ROW><ROW><id>15305225</id><snippet>def add_key_f(i):
    return lambda self: self.addkey(i)
</snippet></ROW><ROW><id>15305248</id><snippet>lxml</snippet></ROW><ROW><id>15305248</id><snippet>#!/usr/bin/env python
import glob
from lxml import html
from bs4 import UnicodeDammit

for filename in glob.glob('*.html'):
    with open(filename, 'rb') as file:
        content = file.read()
        doc = UnicodeDammit(content, is_html=True)

    parser = html.HTMLParser(encoding=doc.original_encoding)
    root = html.document_fromstring(content, parser=parser)
    title = root.find('.//title').text_content()
    print(title)
</snippet></ROW><ROW><id>15305248</id><snippet>Unicode Chars: ì ââ
Unicode Chars: ì ââ
Unicode Chars: ì ââ
</snippet></ROW><ROW><id>15305483</id><snippet>gcc -g</snippet></ROW><ROW><id>15305483</id><snippet>distutils</snippet></ROW><ROW><id>15305483</id><snippet>CFLAGS='-Wall -O0 -g' python setup.py build
</snippet></ROW><ROW><id>15305506</id><snippet>splitnum</snippet></ROW><ROW><id>15305506</id><snippet>for x in splitnum[:-1]</snippet></ROW><ROW><id>15305771</id><snippet>exec</snippet></ROW><ROW><id>15305771</id><snippet>__import__</snippet></ROW><ROW><id>15305771</id><snippet>import</snippet></ROW><ROW><id>15305771</id><snippet>mycode.pyc</snippet></ROW><ROW><id>15305771</id><snippet>reload</snippet></ROW><ROW><id>15305771</id><snippet>mycode.pyc</snippet></ROW><ROW><id>15305771</id><snippet>python -B reloadtest.py</snippet></ROW><ROW><id>15305771</id><snippet>python reloadtest.py</snippet></ROW><ROW><id>15305771</id><snippet>os.unlink('mycode.pyc')</snippet></ROW><ROW><id>15305771</id><snippet>reload</snippet></ROW><ROW><id>15305771</id><snippet>mycode.py</snippet></ROW><ROW><id>15305771</id><snippet>str1 = '''
def run():
    return 10

'''
with open('mycode.py', 'w') as f:
    f.write(str1)
import mycode as mymodule

print "number", mymodule.run()

str2 = '''
def run():
    return 99

'''
with open('mycode.py', 'w') as f:
    f.write(str2)

reload(mymodule)

print "number", mymodule.run()
</snippet></ROW><ROW><id>15305771</id><snippet>exec</snippet></ROW><ROW><id>15305771</id><snippet>x, y</snippet></ROW><ROW><id>15305771</id><snippet>larry, moe, curly, hickory, dickory, dock</snippet></ROW><ROW><id>15305771</id><snippet>tuple</snippet></ROW><ROW><id>15305771</id><snippet>list</snippet></ROW><ROW><id>15305771</id><snippet>run(*seq)</snippet></ROW><ROW><id>15305771</id><snippet>es = 'number = mymodule.run({})'.format(','.join(params))
exec(es)
</snippet></ROW><ROW><id>15305771</id><snippet>number = mymodule.run(*params)
</snippet></ROW><ROW><id>15305771</id><snippet>exec</snippet></ROW><ROW><id>15305771</id><snippet>exec</snippet></ROW><ROW><id>15305771</id><snippet>import</snippet></ROW><ROW><id>15305771</id><snippet>reload</snippet></ROW><ROW><id>15305771</id><snippet>execfile</snippet></ROW><ROW><id>15305771</id><snippet>def make_new_module(n):
    str = '''
    def run():
        return {}        
    '''.format(n)
    f = open('mycode.py','w')
    f.write(str1)
    f.close()
    return __import__('mycode')
</snippet></ROW><ROW><id>15305771</id><snippet>def make_new_function(n):
    def run():
        return n
    return run
</snippet></ROW><ROW><id>15305771</id><snippet>mymodule.run</snippet></ROW><ROW><id>15305771</id><snippet>namedtuple</snippet></ROW><ROW><id>15305771</id><snippet>import types
def make_new_module(n):
    def run():
        return n
    mymodule = types.ModuleType('mymodule')
    mymodule.run = run
    return mymodule
</snippet></ROW><ROW><id>15305771</id><snippet>def change_mymodule_run(n):
    def run():
        return n
    mymodule.run = run
</snippet></ROW><ROW><id>15305771</id><snippet>module</snippet></ROW><ROW><id>15305771</id><snippet>def change_module_run(module, n):
    def run():
        return n
    module.run = run
</snippet></ROW><ROW><id>15305799</id><snippet>itertools</snippet></ROW><ROW><id>15305799</id><snippet>product</snippet></ROW><ROW><id>15305799</id><snippet>itertools.product</snippet></ROW><ROW><id>15305799</id><snippet>itertools.product</snippet></ROW><ROW><id>15305799</id><snippet>list</snippet></ROW><ROW><id>15305799</id><snippet>import itertools

uk_rock_stars=[1,2,3,4,5,6,7,8,9]
uk_pop_stars=[10,11,12,13,1,4,6,22,81]
us_stars=[22,34,44,7,33,99,22,77,99]

for combination in itertools.product(uk_rock_stars, uk_pop_stars, us_stars):
    print combination
</snippet></ROW><ROW><id>15305799</id><snippet>(1, 10, 22)
(1, 10, 34)
(1, 10, 44)
(1, 10, 7)
(1, 10, 33)
(1, 10, 99)
(1, 10, 22)
(1, 10, 77)
(1, 10, 99)
(1, 11, 22)
(1, 11, 34)
(1, 11, 44)
(1, 11, 7)
(1, 11, 33)
(1, 11, 99)
(1, 11, 22)
(1, 11, 77)
(1, 11, 99)
...
etc.
</snippet></ROW><ROW><id>15305848</id><snippet># This class gets a single character input from the keyboard
class _GetchUnix:
    def __init__(self):
        import tty, sys
        from select import select
    def __call__(self):
        import sys, tty, termios
        from select import select
        fd = sys.stdin.fileno()
        old_settings = termios.tcgetattr(fd)
        try:
                tty.setraw(sys.stdin.fileno())
                [i, o, e] = select([sys.stdin.fileno()], [], [], 2)
                if i: 
                ch=sys.stdin.read(1)
                else: 
                ch='' 
        finally:
                    termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
            return ch
getch = _GetchUnix()
# End Class
</snippet></ROW><ROW><id>15305895</id><snippet>str</snippet></ROW><ROW><id>15305895</id><snippet>unicode</snippet></ROW><ROW><id>15305895</id><snippet>u"blÃ¤".encode('utf8') â "bl\xc3\xa4"  # from unicode to str
"bl\xc3\xa4".decode('utf8') â u"blÃ¤"  # from str to unicode
</snippet></ROW><ROW><id>15305895</id><snippet>str</snippet></ROW><ROW><id>15305895</id><snippet>unicode</snippet></ROW><ROW><id>15305895</id><snippet>str</snippet></ROW><ROW><id>15305895</id><snippet>unicode</snippet></ROW><ROW><id>15305895</id><snippet>ascii</snippet></ROW><ROW><id>15305895</id><snippet>unicode</snippet></ROW><ROW><id>15305895</id><snippet>print</snippet></ROW><ROW><id>15305895</id><snippet>str</snippet></ROW><ROW><id>15305895</id><snippet>ascii</snippet></ROW><ROW><id>15305969</id><snippet>cbar.ax.tick_params(labelsize=10) 
</snippet></ROW><ROW><id>15306001</id><snippet>    process.stdin.write(modified_line)
    process.stdin.close()
</snippet></ROW><ROW><id>15306001</id><snippet>process.stdin.write()</snippet></ROW><ROW><id>15306001</id><snippet>process.stdin.close()</snippet></ROW><ROW><id>15306001</id><snippet>process.wait()</snippet></ROW><ROW><id>15306001</id><snippet>for ...
    process.stdin.write(modified_line)

process.stdin.close()
process.wait()
</snippet></ROW><ROW><id>15306290</id><snippet>time.sleep()</snippet></ROW><ROW><id>15306290</id><snippet>after</snippet></ROW><ROW><id>15306290</id><snippet>import Tkinter as tk

w = tk.Tk()
w.after(30000, lambda: w.destroy()) # Destroy the widget after 30 seconds
w.mainloop()
</snippet></ROW><ROW><id>15306429</id><snippet>__lt__</snippet></ROW><ROW><id>15306429</id><snippet>__cmp__</snippet></ROW><ROW><id>15306429</id><snippet>__cmp__</snippet></ROW><ROW><id>15306525</id><snippet>cv2.inRange(src, lowerb, upperb[, dst]) --&gt; dst</snippet></ROW><ROW><id>15306525</id><snippet>hsv_filtered = cv2.inRange(hsv, [0, low_sat, low_value], [255, 255, 255])</snippet></ROW><ROW><id>15306785</id><snippet>Toplevel</snippet></ROW><ROW><id>15306785</id><snippet>import Tkinter as tk

class MainWindow(tk.Frame):
    counter = 0
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        self.button = tk.Button(self, text="Create new window", 
                                command=self.create_window)
        self.button.pack(side="top")

    def create_window(self):
        self.counter += 1
        t = tk.Toplevel(self)
        t.wm_title("Window #%s" % self.counter)
        l = tk.Label(t, text="This is window #%s" % self.counter)
        l.pack(side="top", fill="both", expand=True, padx=100, pady=100)

if __name__ == "__main__":
    root = tk.Tk()
    main = MainWindow(root)
    main.pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>15306977</id><snippet>filtered_collection = From(some_collection).where("item.property &gt; 10").select_many()
</snippet></ROW><ROW><id>15307103</id><snippet>def parallel(l1,l2):
    if gradient(l1) != gradient(l2):
        return False
    return True
</snippet></ROW><ROW><id>15307103</id><snippet>def parallel(l1,l2):
    return gradient(l1) == gradient(l2)
</snippet></ROW><ROW><id>15307103</id><snippet>if min(xranges) &lt;= x &lt;= max(xranges):
    return True
else:
    return False
</snippet></ROW><ROW><id>15307103</id><snippet>return min(xranges) &lt;= x &lt;= max(xranges)
</snippet></ROW><ROW><id>15307103</id><snippet>l1[0][0]</snippet></ROW><ROW><id>15307103</id><snippet>(x1, y1), (x2, y2) = l1
</snippet></ROW><ROW><id>15307103</id><snippet>l1[0][0]</snippet></ROW><ROW><id>15307103</id><snippet>x1</snippet></ROW><ROW><id>15307103</id><snippet>gradient</snippet></ROW><ROW><id>15307103</id><snippet>crosses</snippet></ROW><ROW><id>15307103</id><snippet>line_intersection(line, line)
</snippet></ROW><ROW><id>15307103</id><snippet>False</snippet></ROW><ROW><id>15307103</id><snippet>None</snippet></ROW><ROW><id>15307103</id><snippet>    In [81]: 1.2 - 1.0 == 0.2
    Out[81]: False
</snippet></ROW><ROW><id>15307103</id><snippet>def parallel(l1,l2):
    if gradient(l1) == gradient(l2): ...
</snippet></ROW><ROW><id>15307103</id><snippet>def near(a, b, rtol=1e-5, atol=1e-8):
    # Essentially borrowed from NumPy 
    return abs(a - b) &lt; (atol + rtol * abs(b))

def parallel(l1,l2):
    if near(gradient(l1), gradient(l2)): ...
</snippet></ROW><ROW><id>15307103</id><snippet>l1</snippet></ROW><ROW><id>15307103</id><snippet>line1</snippet></ROW><ROW><id>15307103</id><snippet>if gradient is None</snippet></ROW><ROW><id>15307103</id><snippet>(x1, y1)</snippet></ROW><ROW><id>15307103</id><snippet>(x2, y2)</snippet></ROW><ROW><id>15307103</id><snippet>l(t) = (x1, y1)*(1-t) + (x2, y2)*t
</snippet></ROW><ROW><id>15307103</id><snippet>t</snippet></ROW><ROW><id>15307103</id><snippet>t</snippet></ROW><ROW><id>15307103</id><snippet>t = 1</snippet></ROW><ROW><id>15307103</id><snippet>(x2, y2)</snippet></ROW><ROW><id>15307103</id><snippet>t = 0</snippet></ROW><ROW><id>15307103</id><snippet>(x1, y1)*(1-0) = (x1, y1)</snippet></ROW><ROW><id>15307103</id><snippet>t</snippet></ROW><ROW><id>15307103</id><snippet>t**2</snippet></ROW><ROW><id>15307103</id><snippet>t</snippet></ROW><ROW><id>15307103</id><snippet>t</snippet></ROW><ROW><id>15307103</id><snippet>t</snippet></ROW><ROW><id>15307103</id><snippet>l1(t) = (x1, y1)*(1-t) + (x2, y2)*t

l2(s) = (u1, v1)*(1-s) + (u2, v2)*s
</snippet></ROW><ROW><id>15307103</id><snippet>l1(t) = l2(s)
</snippet></ROW><ROW><id>15307103</id><snippet>l1(t)</snippet></ROW><ROW><id>15307103</id><snippet>l1(t) = l2(s)</snippet></ROW><ROW><id>15307103</id><snippet>x</snippet></ROW><ROW><id>15307103</id><snippet>y</snippet></ROW><ROW><id>15307103</id><snippet>l1(t) = l2(s)</snippet></ROW><ROW><id>15307103</id><snippet>t</snippet></ROW><ROW><id>15307103</id><snippet>s</snippet></ROW><ROW><id>15307103</id><snippet>t</snippet></ROW><ROW><id>15307103</id><snippet>s</snippet></ROW><ROW><id>15307103</id><snippet>t</snippet></ROW><ROW><id>15307103</id><snippet>s</snippet></ROW><ROW><id>15307103</id><snippet>l1(t) = (x1, y1) + (x2-x1, y2-y1)*t
l2(s) = (u1, v1) + (u2-u1, v2-v1)*s
</snippet></ROW><ROW><id>15307103</id><snippet>l1(t) = l2(s)</snippet></ROW><ROW><id>15307103</id><snippet>x1 + (x2-x1)*t = u1 + (u2-u1)*s
y1 + (y2-y1)*t = v1 + (v2-v1)*s

(x2-x1)*t - (u2-u1)*s = u1-x1
(y2-y1)*t - (v2-v1)*s = v1-y1
</snippet></ROW><ROW><id>15307103</id><snippet>t</snippet></ROW><ROW><id>15307103</id><snippet>s</snippet></ROW><ROW><id>15307103</id><snippet>def line_intersection(line1, line2):
    """
    Return the coordinates of a point of intersection given two lines.
    Return None if the lines are parallel, but non-collinear.
    Return an arbitrary point of intersection if the lines are collinear.

    Parameters:
    line1 and line2: lines given by 2 points (a 2-tuple of (x,y)-coords).
    """
    (x1,y1), (x2,y2) = line1
    (u1,v1), (u2,v2) = line2
    (a,b), (c,d) = (x2-x1, u1-u2), (y2-y1, v1-v2)
    e, f = u1-x1, v1-y1
    # Solve ((a,b), (c,d)) * (t,s) = (e,f)
    denom = float(a*d - b*c)
    if near(denom, 0):
        # parallel
        # If collinear, the equation is solvable with t = 0.
        # When t=0, s would have to equal e/b and f/d
        if near(float(e)/b, float(f)/d):
            # collinear
            px = x1
            py = y1
        else:
            return None
    else:
        t = (e*d - b*f)/denom
        # s = (a*f - e*c)/denom
        px = x1 + t*(x2-x1)
        py = y1 + t*(y2-y1)
    return px, py


def crosses(line1, line2):
    """
    Return True if line segment line1 intersects line segment line2 and 
    line1 and line2 are not parallel.
    """
    (x1,y1), (x2,y2) = line1
    (u1,v1), (u2,v2) = line2
    (a,b), (c,d) = (x2-x1, u1-u2), (y2-y1, v1-v2)
    e, f = u1-x1, v1-y1
    denom = float(a*d - b*c)
    if near(denom, 0):
        # parallel
        return False
    else:
        t = (e*d - b*f)/denom
        s = (a*f - e*c)/denom
        # When 0&lt;=t&lt;=1 and 0&lt;=s&lt;=1 the point of intersection occurs within the
        # line segments
        return 0&lt;=t&lt;=1 and 0&lt;=s&lt;=1

def near(a, b, rtol=1e-5, atol=1e-8):
    return abs(a - b) &lt; (atol + rtol * abs(b))

line1 = ((4,4),(10,10)) 
line2 = ((11,5),(5,11))
line3 = ((11,5),(9,7))
line4 = ((4,0),(10,6)) 

assert all(near(a,b) for a,b in zip(line_intersection(line1,line2), (8.0, 8.0)))
assert all(near(a,b) for a,b in zip(line_intersection(line1,line3), (8.0, 8.0)))
assert all(near(a,b) for a,b in zip(line_intersection(line2,line3), (11, 5)))

assert line_intersection(line1, line4) == None # parallel, non-collinear
assert crosses(line1,line2) == True
assert crosses(line2,line3) == False    
</snippet></ROW><ROW><id>15307225</id><snippet>events = venue.event_set</snippet></ROW><ROW><id>15307277</id><snippet>import re
def touni(match):
    return unichr(int(match.group(1), 16))

source = '\\x{4e8b}\\x{696d}'
print(re.sub(r'\\x\{([\da-f]+)\}', touni, source))
</snippet></ROW><ROW><id>15307277</id><snippet>äºæ¥­
</snippet></ROW><ROW><id>15307547</id><snippet>print "{0:&lt;20}".format( "test" )
</snippet></ROW><ROW><id>15307547</id><snippet>outstring = ""
for item in output:
    for cell in item:
        outstring += "{0:&lt;20}  ".format( cell ) #change 20 to whatever you want the column width to be
    outstring += "\n"

print outstring
</snippet></ROW><ROW><id>15307757</id><snippet>dtype=object</snippet></ROW><ROW><id>15307757</id><snippet>In [3]: a = np.ones((5, 5), dtype=object)

In [5]: import fractions

In [6]: a *= fractions.Fraction(3, 4)

In [7]: a
Out[7]: 
array([[3/4, 3/4, 3/4, 3/4, 3/4],
       [3/4, 3/4, 3/4, 3/4, 3/4],
       [3/4, 3/4, 3/4, 3/4, 3/4],
       [3/4, 3/4, 3/4, 3/4, 3/4],
       [3/4, 3/4, 3/4, 3/4, 3/4]], dtype=object)
</snippet></ROW><ROW><id>15307757</id><snippet>dtype=object</snippet></ROW><ROW><id>15307757</id><snippet>In [12]: b = np.ones((5, 5)) * 0.75

In [13]: %timeit np.sum(a)
1000 loops, best of 3: 1.25 ms per loop

In [14]: %timeit np.sum(b)
10000 loops, best of 3: 23.9 us per loop
</snippet></ROW><ROW><id>15307763</id><snippet>convert_to_jade()</snippet></ROW><ROW><id>15307763</id><snippet>self</snippet></ROW><ROW><id>15307763</id><snippet>this</snippet></ROW><ROW><id>15307763</id><snippet>C++</snippet></ROW><ROW><id>15307763</id><snippet>java</snippet></ROW><ROW><id>15307763</id><snippet>  html = self.convert_to_jade(html)
</snippet></ROW><ROW><id>15307763</id><snippet>self.something()</snippet></ROW><ROW><id>15307763</id><snippet>self</snippet></ROW><ROW><id>15307763</id><snippet>self</snippet></ROW><ROW><id>15307763</id><snippet>self</snippet></ROW><ROW><id>15307763</id><snippet>class convert_html(sublime_plugin.TextCommand):
  def convert_syntax(self, html, preprocessor):
    return "this is just a " + preprocessor + " test"

  def convert_to_jade(self, html):
    return self.convert_syntax(html, "jade")

  def run(self, edit):
    with open(self.view.file_name(), "r") as f:
      html = f.read()
      html = self.convert_to_jade(html)
      print(html)
</snippet></ROW><ROW><id>15307969</id><snippet>def some_command( register, variable ):
    register.append([variable,'variable_x'])
</snippet></ROW><ROW><id>15307969</id><snippet>some_command( register, whatever you want )
</snippet></ROW><ROW><id>15308305</id><snippet>del foo.fields[index]
</snippet></ROW><ROW><id>15308305</id><snippet>del foo.fields[-1]
</snippet></ROW><ROW><id>15308743</id><snippet>fig = plt.figure(figsize=(10,10))
ax = fig.add_subplot(111, ...)
</snippet></ROW><ROW><id>15308743</id><snippet>dir</snippet></ROW><ROW><id>15308743</id><snippet>for item in dir(ax):
    print item
#or in case i guess there should be a setter for sth. i search:
for item in dir(ax):
    if item.startswith("set_"):
        print item
#or if i search sth. about labels:
for item in dir(ax):
    if "label" in item:
        print item
</snippet></ROW><ROW><id>15308743</id><snippet>docstring</snippet></ROW><ROW><id>15308743</id><snippet>print ax.xaxis.label.set_size.__doc__
</snippet></ROW><ROW><id>15308743</id><snippet>&gt;&gt;&gt;type(ax.xaxis.label)
&lt;class 'matplotlib.text.Text'&gt; 
</snippet></ROW><ROW><id>15309498</id><snippet>^(\()?0?(5[02-9])(?(1)\))-?(\d{7})$
</snippet></ROW><ROW><id>15309498</id><snippet>(055)-5555555
(055)5555555 
0555555555
</snippet></ROW><ROW><id>15309498</id><snippet>055)-5555555
</snippet></ROW><ROW><id>15309498</id><snippet>(\()?</snippet></ROW><ROW><id>15309498</id><snippet>(?(1)\))</snippet></ROW><ROW><id>15309546</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; import os

&gt;&gt;&gt; open('lib.c', 'w').write(
...   'unsigned char data[] = {0, 1, 2, 3};\n')
&gt;&gt;&gt; ret = os.system('gcc -shared -o lib.so lib.c')
</snippet></ROW><ROW><id>15309546</id><snippet>unsigned char</snippet></ROW><ROW><id>15309546</id><snippet>&gt;&gt;&gt; lib = CDLL('./lib.so')
&gt;&gt;&gt; data = (c_ubyte * 4).in_dll(lib, 'data')
&gt;&gt;&gt; list(data)
[0, 1, 2, 3]
</snippet></ROW><ROW><id>15309546</id><snippet>c_char_p</snippet></ROW><ROW><id>15309546</id><snippet>hsidp</snippet></ROW><ROW><id>15309546</id><snippet>hsidp = (c_char_p)()   
hsidp = c_char_p.in_dll(ibc, "hid")
</snippet></ROW><ROW><id>15309546</id><snippet>hsid = (c_ubyte * 1000)()
hsid = c_ubyte.in_dll(ibc, "hid")
</snippet></ROW><ROW><id>15309546</id><snippet>gen_privatekey</snippet></ROW><ROW><id>15309546</id><snippet>string_at</snippet></ROW><ROW><id>15309546</id><snippet>str</snippet></ROW><ROW><id>15309546</id><snippet>&gt;&gt;&gt; hid = (c_ubyte * 24)(*map(ord, "This is a test."))
&gt;&gt;&gt; string_at(hid, 24)
'This is a test.\x00\x00\x00\x00\x00\x00\x00\x00\x00'
</snippet></ROW><ROW><id>15309546</id><snippet>c_char</snippet></ROW><ROW><id>15309546</id><snippet>c_ubyte</snippet></ROW><ROW><id>15309546</id><snippet>&gt;&gt;&gt; (c_char * 24).from_buffer(hid).value
'This is a test.'
</snippet></ROW><ROW><id>15309546</id><snippet>c_char</snippet></ROW><ROW><id>15309546</id><snippet>value</snippet></ROW><ROW><id>15309546</id><snippet>raw</snippet></ROW><ROW><id>15309546</id><snippet>str</snippet></ROW><ROW><id>15309546</id><snippet>&gt;&gt;&gt; hid = (c_char * 24)()
&gt;&gt;&gt; hid.value = 'This is a test.'
&gt;&gt;&gt; hid.value
'This is a test.'
</snippet></ROW><ROW><id>15309709</id><snippet>pysqlite2</snippet></ROW><ROW><id>15309709</id><snippet>sqlite3</snippet></ROW><ROW><id>15309709</id><snippet>collections.Counter</snippet></ROW><ROW><id>15309709</id><snippet>os.path</snippet></ROW><ROW><id>15309709</id><snippet>posixpath</snippet></ROW><ROW><id>15309709</id><snippet>ntpath</snippet></ROW><ROW><id>15309709</id><snippet>riscospath</snippet></ROW><ROW><id>15309709</id><snippet>posix</snippet></ROW><ROW><id>15309709</id><snippet>nt</snippet></ROW><ROW><id>15309709</id><snippet>os2</snippet></ROW><ROW><id>15309709</id><snippet>ce</snippet></ROW><ROW><id>15309709</id><snippet>riscos</snippet></ROW><ROW><id>15309709</id><snippet>os</snippet></ROW><ROW><id>15309709</id><snippet>setuptools</snippet></ROW><ROW><id>15309709</id><snippet>pkg_resources</snippet></ROW><ROW><id>15309892</id><snippet>import xml.etree.ElementTree as ET

s = '&lt;html&gt;&lt;textarea name="content[country]"&gt;foo&lt;/textarea&gt;&lt;textarea name="content[country]"&gt;bar&lt;/textarea&gt;&lt;/html&gt;'
tree = ET.fromstring(s)
print [n.text for n in tree.iterfind('.//textarea[@name="content[country]"]')]
# ['foo', 'bar']
</snippet></ROW><ROW><id>15309892</id><snippet>import re
print re.findall(r'&lt;\s*textarea.*?&gt;(.*?)&lt;', s)
</snippet></ROW><ROW><id>15310153</id><snippet>.text</snippet></ROW><ROW><id>15310153</id><snippet>company = root.find('.//company').text
author = root.find('.//Author').text
</snippet></ROW><ROW><id>15310397</id><snippet>list</snippet></ROW><ROW><id>15310397</id><snippet>str</snippet></ROW><ROW><id>15310397</id><snippet>&gt;&gt;&gt; x = 'abcdefghij'
&gt;&gt;&gt; x[0]
'a'
&gt;&gt;&gt; x[5:]
'fghij'
&gt;&gt;&gt; x[::3]
'adgj'
&gt;&gt;&gt; x[-1]
'j'
</snippet></ROW><ROW><id>15310530</id><snippet>namespace DeviceCreation
{
    //public enum DeviceType { DeviceA, DeviceB, DeviceC, DeviceD };
    public abstract class Device
    {
        public string Identifier { get; private set; }
        public Device(string identifier)
        {
            Identifier = identifier;
        }

        public abstract string Name();

        public virtual void Close()
        {

        }

        public string AskIdentifier()
        {
            return Identifier;   
        }

        public static string GetIdentifierPattern()
        {
            return "xyzsdfsdf";
        }
    }

    public class DeviceA : Device
    {
        public DeviceA(string identifier) : base(identifier) { }
        public override string Name()
        {
            return "DeviceA";
        }        
    }

    public class DeviceB : Device
    {
        public DeviceB(string identifier) : base(identifier) { }
        public override string Name()
        {
            return "DeviceB";
        }       

    }

    public class DeviceC : Device
    {
        public DeviceC(string identifier) : base(identifier) { }
        public override string Name()
        {
            return "DeviceC";
        }        
    }

    public class DeviceD : Device
    {
        public DeviceD(string identifier) : base(identifier) { }
        public override string Name()
        {
            return "DeviceD";
        }        
    }

    public class DeviceFactory
    {
        private static List&lt;Type&gt; device_table = new List&lt;Type&gt;() { typeof(DeviceA), typeof(DeviceB), typeof(DeviceC), typeof(DeviceD) };

        public static Device Create(Device device, string identifier)
        {
            if (!device_table.Contains(device.GetType()))
            {
                var message = string.Format("No device driver implemented for identifier {0}.", identifier);
                throw new NotImplementedException(message);
            }

            if (string.IsNullOrEmpty(identifier))
                throw new ArgumentException("No identifier selected.");

            //Try to open a device and then read identifier
            string dev_identifier;
            try
            {
                var dev = DevIOLib.Open(identifier);
                dev_identifier = dev.AskIdentifier();
                dev.Close();
            }
            catch (Exception ex)
            {
                throw new Exception(string.Format("Error opening device {0} on {1}.", device, identifier));
            }

            var match = Regex.Match(dev_identifier, Device.GetIdentifierPattern());
            if (match.Success)
            {
                var newDevice = (Device) Activator.CreateInstance(device.GetType(), dev_identifier);
                return newDevice;
            }
            else
                throw new Exception(string.Format("Wrong device connected to identifier {0}.", identifier));
        }
    }

    public static class DevIOLib
    {
        public static Device Open(string identier)
        {
            return new DeviceA(identier);
        }
    }

    public class DeviceCreationTest
    {
        public static void Main(string[] args)
        {
            var d = new DeviceA("asdfsdf");
            DeviceFactory.Create(d, "asdfsdf");

            Console.ReadKey();

        }   
    }
}
</snippet></ROW><ROW><id>15310774</id><snippet>~/.pip/pip.conf</snippet></ROW><ROW><id>15310774</id><snippet>[global]
use-mirrors=false
</snippet></ROW><ROW><id>15310809</id><snippet>$.getJSON()</snippet></ROW><ROW><id>15310809</id><snippet>source: function( request, response ) {
    $.getJSON($SCRIPT_ROOT + "/_search_university", {
        search: request
    }, response);
}
</snippet></ROW><ROW><id>15310809</id><snippet>$.map()</snippet></ROW><ROW><id>15310809</id><snippet>source: function( request, response ) {
        $.getJSON($SCRIPT_ROOT + "/_search_university", {
            search: request
        }, function( data ) {
            response( $.map( data.results, function( item ) {
                return {
                    label: item.name,
                    value: item.id
                }
            }));
        });
}
</snippet></ROW><ROW><id>15310891</id><snippet>{
    "cmd": ["C:\\python27\\python.exe", "-u", "$file"],
    "file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",
    "selector": "source.python"
}
</snippet></ROW><ROW><id>15310891</id><snippet> { 
   "cmd": ["/Library/Frameworks/Python.framework/Versions/2.7/bin/python2.7", 
   "-u", "$file"], "file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)", 
   "selector": "source.python"       
 }
</snippet></ROW><ROW><id>15310891</id><snippet>import platform
print platform.python_version()
</snippet></ROW><ROW><id>15310891</id><snippet>2.7.* your current version *</snippet></ROW><ROW><id>15310891</id><snippet>2.7.2</snippet></ROW><ROW><id>15310891</id><snippet>python-mailsnake-master\python-mailsnake-master</snippet></ROW><ROW><id>15310891</id><snippet>python setup.py install</snippet></ROW><ROW><id>15310899</id><snippet>self.ax.imshow(arr+are.T,cmap=plt.cm.Greys_r, interpolation='none')
</snippet></ROW><ROW><id>15311080</id><snippet>multiprocessing</snippet></ROW><ROW><id>15311080</id><snippet>os.fork</snippet></ROW><ROW><id>15311086</id><snippet>def MaxValue(maxValue):
    def wrapFunction(function):
        def replacedMaxValueFunction(self, value):
            assert value &lt;= maxValue
            return function(self, value)
        replacedMaxValueFunction.__name__ = function.__name__
        return replacedMaxValueFunction
    return wrapFunction
</snippet></ROW><ROW><id>15311086</id><snippet>&gt;&gt;&gt; @MaxValue(123)
def f(self, value):
    print(value)
&gt;&gt;&gt; f(1, 123)
123
&gt;&gt;&gt; f(1, 124)
Traceback (most recent call last):
  File "&lt;pyshell#9&gt;", line 1, in &lt;module&gt;
    f(1, 124)
  File "&lt;pyshell#1&gt;", line 4, in replacedMaxValueFunction
    assert value &lt;= maxValue
AssertionError
</snippet></ROW><ROW><id>15311262</id><snippet>for i in range(len(li)):
    c = li[i]
    li[i] = dic[c]
print li
</snippet></ROW><ROW><id>15311262</id><snippet>list</snippet></ROW><ROW><id>15311262</id><snippet>enumerate</snippet></ROW><ROW><id>15311262</id><snippet>for i, c in enumerate(li):
    li[i] = dic[c]
print li
</snippet></ROW><ROW><id>15311262</id><snippet>lis = [dic[c] if c in dic else c for c in lis]
</snippet></ROW><ROW><id>15311262</id><snippet>for x in y:</snippet></ROW><ROW><id>15311262</id><snippet>x</snippet></ROW><ROW><id>15311262</id><snippet>y</snippet></ROW><ROW><id>15311262</id><snippet>x</snippet></ROW><ROW><id>15311262</id><snippet>y[i]</snippet></ROW><ROW><id>15311262</id><snippet>i</snippet></ROW><ROW><id>15311262</id><snippet>&gt;&gt;&gt; y = range(5,10)
&gt;&gt;&gt; for x in y:
    i = y.index(x)
    x += 10
    print i
    print 'Value of x    : %3d, id: %7d' % (x, id(x))
    print 'Value of y[i] : %3d, id: %7d' % (y[i], id(y[i]))
    print '-'*31
</snippet></ROW><ROW><id>15311519</id><snippet>parse_data</snippet></ROW><ROW><id>15311519</id><snippet>parse_data</snippet></ROW><ROW><id>15311519</id><snippet>obj.some_attr</snippet></ROW><ROW><id>15311519</id><snippet>parse_data</snippet></ROW><ROW><id>15311680</id><snippet>[ ]</snippet></ROW><ROW><id>15311680</id><snippet>minLength = 5000
minBF = 10

resfile = open("simple" + str(minLength) + str(minBF) + ".csv","w")

resfile.close()
</snippet></ROW><ROW><id>15311680</id><snippet>open</snippet></ROW><ROW><id>15311680</id><snippet>filename = "simple" + str(minLength) + str(minBF) + ".csv"
resfile = open(filename,"w")
</snippet></ROW><ROW><id>15311680</id><snippet>+</snippet></ROW><ROW><id>15311680</id><snippet>str()</snippet></ROW><ROW><id>15311680</id><snippet>filename = "simple%d%d.csv" % (minLength,minBF)
print filename
</snippet></ROW><ROW><id>15311780</id><snippet>regex = '(?P&lt;first&gt;"Tom":{"c":(.+?),"b":(.+?),"a":(.+?)})|(?P&lt;second&gt;"Tom":{"a":(.+?),"c":(.+?),"b":(.+?)})'
# Careful as this raises an exception if no match was found
m = re.search( regex, somestring ).groupdict()
if m['first']:
    print 'First'
else:
    print 'Second'
</snippet></ROW><ROW><id>15311949</id><snippet>winfo_exists</snippet></ROW><ROW><id>15311949</id><snippet>winfo_children</snippet></ROW><ROW><id>15311949</id><snippet>&gt;&gt;&gt; import Tkinter as tk
&gt;&gt;&gt; root = tk.Tk()
&gt;&gt;&gt; label = tk.Label(root, text="Hello, world")
&gt;&gt;&gt; label.winfo_exists()
1
&gt;&gt;&gt; root.winfo_children()
[&lt;Tkinter.Label instance at 0x0000000002ADC1C8&gt;]
&gt;&gt;&gt; label.destroy()
&gt;&gt;&gt; label.winfo_exists()
0
&gt;&gt;&gt; root.winfo_children()
[]
</snippet></ROW><ROW><id>15311974</id><snippet>Photo.objects.exclude(viewsT__user=targetUser)
</snippet></ROW><ROW><id>15312083</id><snippet>import socket, sys, itertools

host = sys.argv[1] #Server IP Address
textport = sys.argv[2] #Server Binding Port

s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

try:
    port = int(textport)
except ValueError:
    port = socket.getservbyname(textport, 'udp')

# preprocess file data    
with open('auth3.log') as data:
    roles = [role for (role, line_spoken) in line.split(': ', 1) for line in data]

# preprocess everything we can
hp = (host, port)
send = s.sendto

for role in itertools.cycle(roles):
    try:
        send(role, hp)
    except:
        pass
</snippet></ROW><ROW><id>15312120</id><snippet>def overlap_split_list(l,s):
    l1 = []
    l2 = []
    for i in l:
        if i in s:
            l1.append(l2)
            l2 = []
        l2.append(i)
    if l2: l1.append(l2)
    return l1
</snippet></ROW><ROW><id>15312120</id><snippet>def generator_overlap_split_list(l,s):
    l2 = []
    for i in l:
        if i in s:
            yield l2
            l2 = []
        l2.append(i)
    if l2: yield l2
</snippet></ROW><ROW><id>15312120</id><snippet>print overlap_split_list(l,s)    
print [i for i in generator_overlap_split_list(l,s)]
print list(generator_overlap_split_list(l,s))
</snippet></ROW><ROW><id>15312132</id><snippet>@ios_login_required()
def amiloggedinornot(request):
    ...

# equals to 
def amiloggedinornot(request):
    ...
amiloggedinornot = ios_login_required()(amiloggedinornot)
</snippet></ROW><ROW><id>15312132</id><snippet>ios_login_required</snippet></ROW><ROW><id>15312132</id><snippet>f</snippet></ROW><ROW><id>15312132</id><snippet>()</snippet></ROW><ROW><id>15312132</id><snippet>@ios_login_required</snippet></ROW><ROW><id>15312132</id><snippet>@ios_login_required
def amiloggedinornot(request):
    ...

# which equals to
def amiloggedinornot(request):
    ...
amiloggedinornot = ios_login_required(amiloggedinornot)
</snippet></ROW><ROW><id>15312132</id><snippet>user.is_authenticated</snippet></ROW><ROW><id>15312132</id><snippet>not user.is_authenticated</snippet></ROW><ROW><id>15312132</id><snippet>False</snippet></ROW><ROW><id>15312144</id><snippet>reactor.stop()</snippet></ROW><ROW><id>15312144</id><snippet>clientConnectionLost()</snippet></ROW><ROW><id>15312144</id><snippet>transport.loseConnection()</snippet></ROW><ROW><id>15312233</id><snippet>datum</snippet></ROW><ROW><id>15312233</id><snippet>str.join</snippet></ROW><ROW><id>15312510</id><snippet>r+</snippet></ROW><ROW><id>15312510</id><snippet>with open(file,'r+') as f:
    text = f.read()
    f.seek(0)
    f.truncate()
    f.write(replace_pattern.sub('',text))
</snippet></ROW><ROW><id>15312510</id><snippet>foo bar baz</snippet></ROW><ROW><id>15312510</id><snippet>foo spam</snippet></ROW><ROW><id>15312510</id><snippet>foo spambaz</snippet></ROW><ROW><id>15312526</id><snippet>import urllib2, cookielib

url = 'https://example.com/path/default.aspx'
txheaders =  {'User-agent' : 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'}

cj = cookielib.LWPCookieJar()
# cj.load signature: filename=None, ignore_discard=False, ignore_expires=False
cj.load('/path/to/my/cookies.txt') 

opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
urllib2.install_opener(opener)

req = urllib2.Request(url, None, txheaders)
handle = urllib2.urlopen(req)
</snippet></ROW><ROW><id>15312526</id><snippet>LoadError: 'cookies.txt' does not look like a Set-Cookie3 (LWP) format file</snippet></ROW><ROW><id>15312526</id><snippet>cj = cookielib.MozillaCookieJar('/path/to/my/cookies.txt')
cj.load() 
</snippet></ROW><ROW><id>15312624</id><snippet>import os
total = sum(len(files) for root, dirs, files in os.walk('.'))
</snippet></ROW><ROW><id>15312624</id><snippet>len([file for file in os.listdir(current_directory)])
</snippet></ROW><ROW><id>15312624</id><snippet>(len(files) for root, dirs, files in os.walk('.'))
</snippet></ROW><ROW><id>15312959</id><snippet>def get_chars(string):
    l = []
    for c in string:
        if c not in l:
            l.append(c)
    return sorted(l)

with open('filename','r') as f:
    data = f.read()
data = [i.strip().lower() for i in data.split(',')]
search = input('Word to find: ').strip().lower()
for i in data[:]:
    if get_chars(i) == s_chars:
        print i
</snippet></ROW><ROW><id>15312987</id><snippet> {% static %}
 &lt;link rel='stylesheet' href="{% static 'css/style.css' %}"&gt;

 {% block head %}
     {{block.super}}
 {% endblock %}
</snippet></ROW><ROW><id>15313024</id><snippet>os.listdir</snippet></ROW><ROW><id>15313024</id><snippet>os.path.join</snippet></ROW><ROW><id>15313024</id><snippet>os.path.isfile</snippet></ROW><ROW><id>15313024</id><snippet>import os
path = 'C:/'
files = []
for i in os.listdir(path):
    if os.path.isfile(os.path.join(path,i)) and '001_MN_DX' in i:
        files.append(i)
</snippet></ROW><ROW><id>15313024</id><snippet>import os
path = 'C:/'
files = [i for i in os.listdir(path) if os.path.isfile(os.path.join(path,i)) and \
         '001_MN_DX' in i]
</snippet></ROW><ROW><id>15313248</id><snippet>StringVar()</snippet></ROW><ROW><id>15313248</id><snippet>master</snippet></ROW><ROW><id>15313248</id><snippet>self.typeFrame</snippet></ROW><ROW><id>15313248</id><snippet>class FunctionInput:
        def __init__(self, master, window, items):
            self.window = window
            self.items = items
            self.runProgram = True
            self.frame = tk.Frame(master)
            self.typeFrame = tk.Frame(self.frame)
            self.typeChoice = tk.StringVar(self.typeFrame)
            self.quitButton = tk.Button(self.frame, text = 'Quit', command = self.frame.quit)
            self.optLabel = tk.Label(self.frame, text = 'Type of Approximation: ')
            self.optL = tk.Radiobutton(self.typeFrame, text = 'Left Rectangular', variable = self.typeChoice, value = 'l')
            self.optR = tk.Radiobutton(self.typeFrame, text = 'Right Rectangular', variable = self.typeChoice, value = 'r')
            self.optT = tk.Radiobutton(self.typeFrame, text = 'Trapezoidal', variable = self.typeChoice, value = 't')
            self.optS = tk.Radiobutton(self.typeFrame, text = 'Simpsons Rule', variable = self.typeChoice, value = 's')
            self.optL.grid(row = 1, column = 1, padx = 5, pady = 5)
            self.optR.grid(row = 1, column = 2, padx = 5, pady = 5)
            self.optT.grid(row = 2, column = 1, padx = 5, pady = 5)
            self.optS.grid(row = 2, column = 2, padx = 5, pady = 5)
            self.optLabel.grid(row = 4)
            self.typeFrame.grid(row = 5)
            self.quitButton.grid(row = 6)
            # there were numerous other widgets and frames, but I only included the relevant ones
            self.frame.grid()

        def getInput(self):
            type_integration = self.typeChoice.get()
            self.frame.quit()
            return type_integration


def main():
    # some other code, win and axisLabels are defined prior to this
    root = tk.Tk(className = ' Function Grapher')
    app = FunctionInput(root, win, axisLabels)
    root.rowconfigure(0, weight = 1)
    root.columnconfigure(0, weight = 1)
    root.mainloop() # there is a button to exit the mainloop in my GUI
    print app.getInput()

if __name__ == '__main__': main()
</snippet></ROW><ROW><id>15313248</id><snippet>self.typeFrame = tk.Frame(self.frame)
self.typeChoice = tk.StringVar(self.typeFrame)
self.typeChoice.set(None)
</snippet></ROW><ROW><id>15313249</id><snippet>    groups = AGroup.query.all()
    for g in groups:
        if sorted(list(g.users)) == members:
            doSomething()
</snippet></ROW><ROW><id>15313267</id><snippet>chr</snippet></ROW><ROW><id>15313267</id><snippet>str</snippet></ROW><ROW><id>15313267</id><snippet>chr</snippet></ROW><ROW><id>15313267</id><snippet>str</snippet></ROW><ROW><id>15313267</id><snippet>def code_char(char, key):
    ichar = int(char)
    ikey = int(key)
    return str(ichar+ikey)
</snippet></ROW><ROW><id>15313267</id><snippet>def code_char(char, key):
    ichar = int(char)
    ikey = int(key)
    return chr(ord('0') + ichar+ikey)
</snippet></ROW><ROW><id>15313506</id><snippet>avconv</snippet></ROW><ROW><id>15313506</id><snippet>import os
from subprocess import check_call
from tempfile import mktemp
from scikits.audiolab import wavread, play
from scipy.signal import remez, lfilter
from pylab import *

# convert mp3, read wav
mp3filename = 'XC124158.mp3'
wname = mktemp('.wav')
check_call(['avconv', '-i', mp3filename, wname])
sig, fs, enc = wavread(wname)
os.unlink(wname)

# bandpass filter
bands = array([0,3500,4000,5500,6000,fs/2.0]) / fs
desired = [0, 1, 0]
b = remez(513, bands, desired)
sig_filt = lfilter(b, 1, sig)
sig_filt /=  1.05 * max(abs(sig_filt)) # normalize

subplot(211)
specgram(sig, Fs=fs, NFFT=1024, noverlap=0)
axis('tight'); axis(ymax=8000)
title('Original')
subplot(212)
specgram(sig_filt, Fs=fs, NFFT=1024, noverlap=0)
axis('tight'); axis(ymax=8000)
title('Filtered')
show()

play(sig_filt, fs)
</snippet></ROW><ROW><id>15313586</id><snippet>from socket import *
import threading
import json
import select


print("client")
HOST = input("connect to: ")
PORT = int(input("on port: "))

# create the socket
s = socket(AF_INET, SOCK_STREAM)
s.connect((HOST, PORT))
print("connected to:", HOST)

#------------------- need 2 threads for handling incoming and outgoing messages--

#       1: create out_buffer:
out_buffer = []

# for incoming data
def incoming():
    rlist,wlist,xlist = select.select([s], out_buffer, [])
    while 1:
        for i in rlist:
            data = i.recv(1024)
            if data:
                print("\nreceived:", data.decode())

# now for outgoing data
def outgoing():
    global out_buffer
    while 1:
        user_input=input("your message: ")+"\n"
        if user_input:
            out_buffer += [user_input.encode()]
#       for i in wlist:
            s.send(out_buffer[0])
            out_buffer = []

thread_in = threading.Thread(target=incoming, args=())
thread_out = threading.Thread(target=outgoing, args=())
thread_in.start() # this causes the thread to run
thread_out.start()
thread_in.join()  # this waits until the thread has completed
thread_out.join()
</snippet></ROW><ROW><id>15313764</id><snippet>handleInputs</snippet></ROW><ROW><id>15313764</id><snippet>class Game(threading.Thread):
    def update(self):
        pygame.display.update()
        self.screen.fill(self.fillcolour)

    def setup(self):
        """Placeholder for setup"""
        pass

    def frame(self):
        """Placeholder for frame"""
        pass

    def handleEvent(self, event):
        """Placeholder for input handling"""
        pass

    def handleInputs(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                self.quit()
            self.handleEvent(event)

    def run(self):
        self.setup()

        while True:
            if self.FRAMERATE:
                self.clock.tick(self.FRAMERATE)

            self.frame()
            self.update()
            self.handleInputs()
</snippet></ROW><ROW><id>15314393</id><snippet>def code_block(text, key):
    res = [str(int(c) + int(k))[-1:] for c, k in zip(text, key)]
    return ''.join(res)
</snippet></ROW><ROW><id>15314393</id><snippet>&gt;&gt;&gt; code_block('12341234','12121212')
'24462446'
&gt;&gt;&gt; code_block('66554433','44556677')
'00000000'
</snippet></ROW><ROW><id>15314393</id><snippet>'8'</snippet></ROW><ROW><id>15314393</id><snippet>&gt;&gt;&gt; 66554433 + 44556677
111111110
</snippet></ROW><ROW><id>15314393</id><snippet>&gt;&gt;&gt; code_block('12341234', '12121212')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 8, in code_block
  File "&lt;stdin&gt;", line 6, in last
TypeError: 'int' object has no attribute '__getitem__'
</snippet></ROW><ROW><id>15314445</id><snippet>initial</snippet></ROW><ROW><id>15314445</id><snippet>MyForm(initial={
    'my_multi': ['a', 'b', 'c']
})
</snippet></ROW><ROW><id>15314446</id><snippet>s</snippet></ROW><ROW><id>15314446</id><snippet>reader</snippet></ROW><ROW><id>15314446</id><snippet>&gt;&gt;&gt; s='2 3 4 5 6'
&gt;&gt;&gt; s.split(' ')
['2', '3', '4', '5', '6'] #just split will give strings
&gt;&gt;&gt; [int(i) for i in s.split(' ')] #typecasting to ints
[2, 3, 4, 5, 6] #now you have ints
</snippet></ROW><ROW><id>15314446</id><snippet>reader</snippet></ROW><ROW><id>15314446</id><snippet>try: except:</snippet></ROW><ROW><id>15314446</id><snippet>map(int, s.split())</snippet></ROW><ROW><id>15314446</id><snippet>ints_list = []
for r in reader:
    ints_list = map(int, r.strip().split(' '))
</snippet></ROW><ROW><id>15314446</id><snippet>ints_list</snippet></ROW><ROW><id>15314577</id><snippet>def transform(s):
    ''' Receives a GeoNode structure as nested lists and returns a Mesh.
    '''
    if isinstance(s, list):
       return merge_meshes([transform(e) for e in s])
    else:
       assert isinstance(s, GeoNode)
       return geonode_to_mesh(s)
</snippet></ROW><ROW><id>15314842</id><snippet>string=  input("Enter string:").slice(',')
</snippet></ROW><ROW><id>15314842</id><snippet>st=  input("Enter string:").split(',')
</snippet></ROW><ROW><id>15314842</id><snippet>&gt;&gt;&gt; st=  input("Enter string:").split(',')
Enter string:"Jezus, Santa Maria, Program , Hangover"
&gt;&gt;&gt; st[1]
' Santa Maria'
</snippet></ROW><ROW><id>15314857</id><snippet>import re

with open('myLargeFile.txt', 'r') as myFile:
    numbersList = re.findall('{"number":(\d{9})', myFile.read(), re.DOTALL)
print numbersList
</snippet></ROW><ROW><id>15314857</id><snippet>{"number":</snippet></ROW><ROW><id>15314857</id><snippet>numbersList = re.findall('{"number":(\d{x,y})', myFile.read(), re.DOTALL)
</snippet></ROW><ROW><id>15314857</id><snippet>numbersList = re.findall('{"number":(\d{5,9})', myFile.read(), re.DOTALL)
</snippet></ROW><ROW><id>15315072</id><snippet>inspect</snippet></ROW><ROW><id>15315072</id><snippet>.getargspec()</snippet></ROW><ROW><id>15315072</id><snippet>requestonly()</snippet></ROW><ROW><id>15315072</id><snippet>def requestonly(view, attr=None):
    ismethod = False
    if attr is None:
        attr = '__call__'
    if inspect.isroutine(view):
        fn = view
    elif inspect.isclass(view):
        try:
            fn = view.__init__
        except AttributeError:
            return False
        ismethod = hasattr(fn, '__call__')
    else:
        try:
            fn = getattr(view, attr)
        except AttributeError:
            return False

    try:
        argspec = inspect.getargspec(fn)
    except TypeError:
        return False

    args = argspec[0]

    if hasattr(fn, im_func) or ismethod:
        # it's an instance method (or unbound method on py2)
        if not args:
            return False
        args = args[1:]
    if not args:
        return False

    if len(args) == 1:
        return True

    defaults = argspec[3]
    if defaults is None:
        defaults = ()

    if args[0] == 'request':
        if len(args) - len(defaults) == 1:
            return True

    return False
</snippet></ROW><ROW><id>15315149</id><snippet>Profiles</snippet></ROW><ROW><id>15315149</id><snippet>User</snippet></ROW><ROW><id>15315149</id><snippet>from django.contrib.auth.models import User

class StandardProfile(models.Model):
    user = models.OneToOneField(User, primary_key=True)
    something = models.CharField(max_length=255)

class ArtistProfile(models.Model):
    user = models.OneToOneField(User, primary_key=True)
    style = models.CharField(max_length=255)
    music = models.CharField(max_length=255)
    bank_account = models.CharField(max_length=255)
</snippet></ROW><ROW><id>15315400</id><snippet>setattr(row, db_field, db_value)
</snippet></ROW><ROW><id>15315423</id><snippet>[0.0 in x for x in yyy]</snippet></ROW><ROW><id>15315423</id><snippet>&gt;&gt;&gt; yyy=[(2.0, 3.4, 3.75), (2.0, 3.4, 0.0), (2.0, 3.4, 0.0), (2.0, 3.4, 3.5), (2.0, 3.4, 0.0)]
&gt;&gt;&gt; [0.0 in x for x in yyy]
[False, True, True, False, True]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15315507</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; from random import randint
&gt;&gt;&gt; df = pd.DataFrame({'A': [randint(1, 9) for x in xrange(10)],
                   'B': [randint(1, 9)*10 for x in xrange(10)],
                   'C': [randint(1, 9)*100 for x in xrange(10)]})
&gt;&gt;&gt; df
   A   B    C
0  9  40  300
1  9  70  700
2  5  70  900
3  8  80  900
4  7  50  200
5  9  30  900
6  2  80  700
7  2  80  400
8  5  80  300
9  7  70  800
</snippet></ROW><ROW><id>15315507</id><snippet>&gt;&gt;&gt; df["B"] &gt; 50
0    False
1     True
2     True
3     True
4    False
5    False
6     True
7     True
8     True
9     True
Name: B
&gt;&gt;&gt; (df["B"] &gt; 50) &amp; (df["C"] == 900)
0    False
1    False
2     True
3     True
4    False
5    False
6    False
7    False
8    False
9    False
</snippet></ROW><ROW><id>15315507</id><snippet>.loc</snippet></ROW><ROW><id>15315507</id><snippet>&gt;&gt;&gt; df["A"][(df["B"] &gt; 50) &amp; (df["C"] == 900)]
2    5
3    8
Name: A, dtype: int64
</snippet></ROW><ROW><id>15315507</id><snippet>.loc</snippet></ROW><ROW><id>15315507</id><snippet>&gt;&gt;&gt; df.loc[(df["B"] &gt; 50) &amp; (df["C"] == 900), "A"]
2    5
3    8
Name: A, dtype: int64
&gt;&gt;&gt; df.loc[(df["B"] &gt; 50) &amp; (df["C"] == 900), "A"].values
array([5, 8], dtype=int64)
&gt;&gt;&gt; df.loc[(df["B"] &gt; 50) &amp; (df["C"] == 900), "A"] *= 1000
&gt;&gt;&gt; df
      A   B    C
0     9  40  300
1     9  70  700
2  5000  70  900
3  8000  80  900
4     7  50  200
5     9  30  900
6     2  80  700
7     2  80  400
8     5  80  300
9     7  70  800
</snippet></ROW><ROW><id>15315507</id><snippet>== 900</snippet></ROW><ROW><id>15315507</id><snippet>!= 900</snippet></ROW><ROW><id>15315507</id><snippet>~(df["C"] == 900)</snippet></ROW><ROW><id>15315529</id><snippet>/usr/bin/easy_install</snippet></ROW><ROW><id>15315529</id><snippet>$ curl -O https://pypi.python.org/packages/source/v/virtualenv/virtualenv-X.X.tar.gz
$ tar xvfz virtualenv-X.X.tar.gz
$ cd virtualenv-X.X
$ [sudo] python setup.py install
</snippet></ROW><ROW><id>15315593</id><snippet>&gt;&gt;&gt; import json

&gt;&gt;&gt; dict = {'filter': u'[{"type":"string","value":"T","field":"company"},{"type":"numeric","comparison":"lt","value":100,"field":"price"},{"type":"numeric","comparison":"gt","value":10,"field":"price"}]',
 'limit': u'10',
 'page': u'1',
 'sort': u'[{"property":"company","direction":"ASC"}]',
 'start': u'0'}

&gt;&gt;&gt; json.loads(dict['filter'])

[{u'field': u'company', u'type': u'string', u'value': u'T'},
 {u'comparison': u'lt',
  u'field': u'price',
  u'type': u'numeric',
  u'value': 100},
 {u'comparison': u'gt', u'field': u'price', u'type': u'numeric', u'value': 10}]
</snippet></ROW><ROW><id>15315639</id><snippet>for i in db:</snippet></ROW><ROW><id>15315639</id><snippet>i</snippet></ROW><ROW><id>15315639</id><snippet>while</snippet></ROW><ROW><id>15315659</id><snippet>restaurants</snippet></ROW><ROW><id>15315659</id><snippet>return render(request,'menu/restaurants.html', {"restaurants": restaurants})
</snippet></ROW><ROW><id>15315659</id><snippet>render</snippet></ROW><ROW><id>15315659</id><snippet>context_instance</snippet></ROW><ROW><id>15315667</id><snippet>import git 

g = git.cmd.Git(git_dir)
g.pull()
</snippet></ROW><ROW><id>15315785</id><snippet>class AreaCode(db.Model):
    __tablename__ = 'areacodes'

    area_code = db.Column(db.Integer, primary_key=True)


class Exchange(db.Model):
    __tablename__ = 'exchanges'

    exchange = db.Column(db.Integer, primary_key=True)
    area_code_pk = db.Column(db.Integer, db.ForeignKey('areacodes.area_code'),
                             primary_key=True)
    area_code = db.relationship('AreaCode', backref=db.backref('exchanges', lazy='dynamic'))


class PhoneNumber(db.Model):
    __tablename__ = 'phonenumbers'
    __table_args__ = (
        db.ForeignKeyConstraint(
            ['exchange_exchange', 'exchange_area_code_pk'],
            ['exchanges.exchange', 'exchanges.area_code_pk'],
        ),
    )

    phone_number = db.Column(db.Integer, primary_key=True)
    exchange_exchange = db.Column(db.Integer, primary_key=True)
    exchange_area_code_pk = db.Column(db.Integer, primary_key=True)
    exchange = db.relationship('Exchange', backref=db.backref('phone_numbers', lazy='dynamic'))
</snippet></ROW><ROW><id>15316072</id><snippet>hero_id = []</snippet></ROW><ROW><id>15316072</id><snippet>i = 0</snippet></ROW><ROW><id>15316072</id><snippet>urllist = ['http://example.com', 'http://example1.com']
hero_id = []
for url in urllist:
    db = re.findall('(\d{3})/"&gt;(\w+\s-\s\w+)&lt;/a&gt;', urllib.urlopen(url).read(), re.DOTALL)
    for j in db:
        hero_id.append(tuple(filter(None, j))[0])
print hero_id
</snippet></ROW><ROW><id>15316112</id><snippet>from numpy import array
</snippet></ROW><ROW><id>15316198</id><snippet>globals()</snippet></ROW><ROW><id>15316198</id><snippet>globals()</snippet></ROW><ROW><id>15316198</id><snippet>possible_seq</snippet></ROW><ROW><id>15316198</id><snippet>.items()</snippet></ROW><ROW><id>15316198</id><snippet>[v for k, v in globals().items() if 'possible_seq' in k]
</snippet></ROW><ROW><id>15316198</id><snippet>possible_seqs = [[1, '1A', '1B', 2, 3, 4, 5, 6, 7, '7A',
           8, 9, '9A', '9B', 10, 11, 12, 13, 14, 15],
                 [1, '1A', '1B', 2, 3, 4, 5, 6, 7, '7A',
           8, 9, '9A(T)', '9B', 10, 11, 12, 13, 14, 15]]
</snippet></ROW><ROW><id>15316328</id><snippet>def process_file_wrapped(filenamen, foo, bar, baz=biz):
    try:
        process_file(filename, foo, bar, baz=biz)
    except:
        print('%s: %s' % (filename, traceback.format_exc()))
</snippet></ROW><ROW><id>15316403</id><snippet>import numpy as np

with open("file.ext") as f:
    a = np.array(f.readlines())
</snippet></ROW><ROW><id>15316403</id><snippet>import numpy as np

with open("file.ext") as f:
    a = np.array([map(float, line.split()) for line in f])
</snippet></ROW><ROW><id>15316403</id><snippet>array()</snippet></ROW><ROW><id>15316403</id><snippet>[line for line in f]</snippet></ROW><ROW><id>15316403</id><snippet>f.readlines()</snippet></ROW><ROW><id>15316403</id><snippet>f</snippet></ROW><ROW><id>15316403</id><snippet>[line.split() for line in f]</snippet></ROW><ROW><id>15316403</id><snippet>f</snippet></ROW><ROW><id>15316403</id><snippet>split</snippet></ROW><ROW><id>15316403</id><snippet>map</snippet></ROW><ROW><id>15316403</id><snippet>float</snippet></ROW><ROW><id>15316403</id><snippet>map(float, line.split())</snippet></ROW><ROW><id>15316403</id><snippet>[map(float, line.split()) for line in f]</snippet></ROW><ROW><id>15316403</id><snippet>array()</snippet></ROW><ROW><id>15316522</id><snippet>class threading.Thread(group=None, target=None, name=None, args=(), kwargs={})
</snippet></ROW><ROW><id>15316522</id><snippet>Thread</snippet></ROW><ROW><id>15316522</id><snippet>@property
def name(self):
    assert self._initialized, "Thread.__init__() not called"
    return self._name

@name.setter
def name(self, name):
    assert self._initialized, "Thread.__init__() not called"
    self._name = str(name)
</snippet></ROW><ROW><id>15316522</id><snippet>Thread.__init__(name=name)</snippet></ROW><ROW><id>15316522</id><snippet>class myThread(threading.Thread):
    def __init__(self, threadID, name, counter):
        threading.Thread.__init__(self, name=name)
        self.threadID = threadID
        self.counter = counter
</snippet></ROW><ROW><id>15316535</id><snippet>numpy.insert( a, 2, 'c' )
</snippet></ROW><ROW><id>15316535</id><snippet>c</snippet></ROW><ROW><id>15316535</id><snippet>a</snippet></ROW><ROW><id>15316584</id><snippet>b = a + 1
</snippet></ROW><ROW><id>15316584</id><snippet>for i in range(len(a)):
    for j in range(len(a[i])):
        b[i][j] = a[i][j] + 1
</snippet></ROW><ROW><id>15316680</id><snippet>from subprocess import Popen, PIPE

p = Popen(["ls", "non existent"], stdout=PIPE)
output = p.communicate()[0]
print(p.returncode)
</snippet></ROW><ROW><id>15316680</id><snippet>subprocess.CalledProcessError</snippet></ROW><ROW><id>15316680</id><snippet>returncode</snippet></ROW><ROW><id>15316680</id><snippet>from subprocess import CalledProcessError, check_output

try:
    output = check_output(["ls", "non existent"])
except CalledProcessError as e:
    print(e.returncode)
</snippet></ROW><ROW><id>15316729</id><snippet>Foo.__contains__</snippet></ROW><ROW><id>15316729</id><snippet>a['bar']
</snippet></ROW><ROW><id>15316729</id><snippet>Foo.__getitem__</snippet></ROW><ROW><id>15316729</id><snippet>    self[key] = data
</snippet></ROW><ROW><id>15316729</id><snippet>OrderedDict.__setitem__</snippet></ROW><ROW><id>15316729</id><snippet>def __setitem__(self, key, value, PREV=0, NEXT=1, dict_setitem=dict.__setitem__):
    'od.__setitem__(i, y) &lt;==&gt; od[i]=y'
    # Setting a new item creates a new link at the end of the linked list,
    # and the inherited dictionary is updated with the new key/value pair.
    if key not in self:
        root = self.__root
        last = root[PREV]
        last[NEXT] = root[PREV] = self.__map[key] = [last, root, key]
    dict_setitem(self, key, value)
</snippet></ROW><ROW><id>15316729</id><snippet>Foo.__contains__</snippet></ROW><ROW><id>15316729</id><snippet>    if key not in self:
</snippet></ROW><ROW><id>15316729</id><snippet>self.__root</snippet></ROW><ROW><id>15316729</id><snippet>self.__map</snippet></ROW><ROW><id>15316729</id><snippet>Foo.__contains__</snippet></ROW><ROW><id>15316729</id><snippet>    if key not in self:
</snippet></ROW><ROW><id>15316729</id><snippet>self.__root</snippet></ROW><ROW><id>15316729</id><snippet>self.__map</snippet></ROW><ROW><id>15316729</id><snippet>Foo.__contains__</snippet></ROW><ROW><id>15316729</id><snippet>OrderedDict.__setitem__</snippet></ROW><ROW><id>15316729</id><snippet>'bar'</snippet></ROW><ROW><id>15316729</id><snippet>__setitem__</snippet></ROW><ROW><id>15316729</id><snippet>__iter__</snippet></ROW><ROW><id>15316729</id><snippet>from collections import OrderedDict

dictclass = OrderedDict

class Foo(dictclass):
    def __getitem__(self,key):
        try:
            return dictclass.__getitem__(self,key)
        except KeyError:
            pass

        data = key*2
        self[key] = data
        return data

    def __contains__(self,whatever):
        print('contains: {}'.format(whatever))
        return dictclass.__contains__(self,whatever) or 'bar' in whatever

    def __setitem__(self, key, value, PREV=0, NEXT=1, dict_setitem=dict.__setitem__):
        'od.__setitem__(i, y) &lt;==&gt; od[i]=y'
        # Setting a new item creates a new link at the end of the linked list,
        # and the inherited dictionary is updated with the new key/value pair.
        print('key not in self: {}'.format(key not in self))
        if key not in self:
            root = self._OrderedDict__root
            last = root[PREV]
            last[NEXT] = root[PREV] = self._OrderedDict__map[key] = [last, root, key]
        dict_setitem(self, key, value)

    def __iter__(self):
        'od.__iter__() &lt;==&gt; iter(od)'
        # Traverse the linked list in order.
        NEXT, KEY = 1, 2

        root = self._OrderedDict__root
        curr = root[NEXT]
        print('curr: {}'.format(curr))
        print('root: {}'.format(root)) 
        print('curr is not root: {}'.format(curr is not root))

        while curr is not root:
            yield curr[KEY]
            curr = curr[NEXT]

a = Foo()
print a['bar']
# barbar

print a.keys()
# ['bar']
</snippet></ROW><ROW><id>15316729</id><snippet>Foo</snippet></ROW><ROW><id>15316729</id><snippet>collections.MutableMapping</snippet></ROW><ROW><id>15316729</id><snippet>OrderedDict</snippet></ROW><ROW><id>15316729</id><snippet>import collections
dictclass = collections.OrderedDict

class Foo(collections.MutableMapping):
    def __init__(self, *args, **kwargs):
        self._data = dictclass(*args, **kwargs)
    def __setitem__(self, key, value):
        self._data[key] = value
    def __delitem__(self, key):
        del self._data[key]
    def __iter__(self):
        return iter(self._data)
    def __len__(self):
        return len(self._data)

    def __getitem__(self,key):
        try:
            return self._data[key]
        except KeyError:
            pass

        data = key*2
        self[key] = data
        return data

    def __contains__(self,whatever):
        return dictclass.__contains__(self,whatever) or 'bar' in whatever
</snippet></ROW><ROW><id>15316729</id><snippet>a = Foo()
print a['bar']
# barbar

print a.keys()
# ['bar']
</snippet></ROW><ROW><id>15316729</id><snippet>__contains__</snippet></ROW><ROW><id>15316817</id><snippet>yield</snippet></ROW><ROW><id>15316862</id><snippet>(?!...)</snippet></ROW><ROW><id>15316862</id><snippet>(?=...)</snippet></ROW><ROW><id>15316862</id><snippet>re.sub(r"([0-9])(?=[a-zA-Z])(?!e[+-]?\d)",r"\1*","5feet")
</snippet></ROW><ROW><id>15316978</id><snippet>IOError</snippet></ROW><ROW><id>15316978</id><snippet>"IOError "</snippet></ROW><ROW><id>15316978</id><snippet>print "IOError", detail
</snippet></ROW><ROW><id>15316978</id><snippet>IOError</snippet></ROW><ROW><id>15316978</id><snippet>print detail
</snippet></ROW><ROW><id>15316978</id><snippet>IOError</snippet></ROW><ROW><id>15316978</id><snippet>os.listdir()</snippet></ROW><ROW><id>15316978</id><snippet>os.path.join()</snippet></ROW><ROW><id>15316978</id><snippet>checkCreateDir(name)
checkCreateDir(os.path.join(name, season))
newFilename = os.path.join(name, season, '{}{}.mp4'.format(name, episode))
print newFilename
shutil.move(os.path.join('./1TV', filename), newFilename)
</snippet></ROW><ROW><id>15317038</id><snippet>export</snippet></ROW><ROW><id>15317038</id><snippet>PYTHONPATH=your_directory python script_name
</snippet></ROW><ROW><id>15317038</id><snippet>env PYTHONPATH=your_directory python script_name
</snippet></ROW><ROW><id>15317038</id><snippet>python script_name</snippet></ROW><ROW><id>15317038</id><snippet>python -c 'import os; print os.getenv("PYTHONPATH")'</snippet></ROW><ROW><id>15317038</id><snippet>sys.path</snippet></ROW><ROW><id>15317038</id><snippet>cd path_which_has_subdirectory_gdata
python
</snippet></ROW><ROW><id>15317038</id><snippet>import gdata
</snippet></ROW><ROW><id>15317038</id><snippet>ImportError</snippet></ROW><ROW><id>15317038</id><snippet>import gdata.spreadsheet.service
</snippet></ROW><ROW><id>15317038</id><snippet>__init__.py</snippet></ROW><ROW><id>15317056</id><snippet>Products</snippet></ROW><ROW><id>15317056</id><snippet>bigcommerce.api.Products().get()
</snippet></ROW><ROW><id>15317150</id><snippet>myText = 'hello python'
with open('myTextFile.txt', 'w') as myFile:
    myFile.write(myText)
</snippet></ROW><ROW><id>15317150</id><snippet>myTextFile.txt</snippet></ROW><ROW><id>15317150</id><snippet>hello python</snippet></ROW><ROW><id>15317150</id><snippet>a,b = raw_input('Enter in format number^power').split('^')
a = int (a)
b = int (b)
result = a**b
with open("test34.txt", "a") as myFile:
    myFile.write(str(result))
print ("Done!")
raw_input()
</snippet></ROW><ROW><id>15317150</id><snippet>myFile.write("result")</snippet></ROW><ROW><id>15317150</id><snippet>open('test34.txt', 'a')</snippet></ROW><ROW><id>15317150</id><snippet>open('test34.txt', 'w')</snippet></ROW><ROW><id>15317155</id><snippet>stack = []
result = []
for elem in inputstring.split('|'):
    if not elem: continue
    stack.append(elem)
    result.append('|' + '|'.join(stack))
</snippet></ROW><ROW><id>15317155</id><snippet>&gt;&gt;&gt; result
['|item1', '|item1|item2', '|item1|item2|item3', '|item1|item2|item3|item4']
</snippet></ROW><ROW><id>15317155</id><snippet>def generate_items(inputstring):
    stack = []
    for elem in inputstring.split('|'):
        if not elem: continue
        stack.append(elem)
        yield '|' + '|'.join(stack)

for item in generate_items(inputstring):
    print item
</snippet></ROW><ROW><id>15317244</id><snippet>#!/usr/python
import cgi
print('Content-Type: text/html; charset=utf-8\n')
form = cgi.FieldStorage()

if 'name' in form:
    with open('/var/www/cgi-bin/temp.txt','w') as file:
        file.write(form['name'])
</snippet></ROW><ROW><id>15317310</id><snippet>def serialize_queryset(resource_class, queryset):
    # hand me a queryset, i give you dehydrated resources
    resource = resource_class()
    dd = {}

    # make meta
    dd['meta'] = {}
    dd['meta']['limit'] = 1000
    dd['meta']['next'] = None
    dd['meta']['offset'] = 0
    dd['meta']['previous'] = None
    dd['meta']['total_count'] = len(queryset)

    # objects
    dd['objects'] = []
    for obj in queryset:
        bundle = resource.build_bundle(obj=obj)
        dehydrated_obj = resource.full_dehydrate(bundle)
        dd['objects'].append(dehydrated_obj)

    # return dict
    return dd
</snippet></ROW><ROW><id>15317310</id><snippet>from tastypie.serializer import Serializer

serializer = Serializer()

def my_view(request):

    #... do some other view stuff ...

    # prepare a queryset for serialization
    queryset = MyModel.objects.filter(is_cool=True)
    data = serialize_queryset(MyModel, queryset)

    # add in custom stuff, determined earlier in the view somewhere
    data['success'] = success
    data['message'] = message
    data['error'] = error

    # serialize and return response
    data = serializer.serialize(data)
    return HttpResponse(data, mimetype='application/json')
</snippet></ROW><ROW><id>15317373</id><snippet>magenta</snippet></ROW><ROW><id>15317373</id><snippet>self.master = Tk()                                                      
self.master.configure(bg = 'magenta')
</snippet></ROW><ROW><id>15317549</id><snippet>In [1]: class Foo(object):
   ...:     def f_standalone(x):
   ...:         print("standalone version of f, x={}".format(x))
   ...:

In [2]: Foo.f_standalone(12)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-2-2d315c006153&gt; in &lt;module&gt;()
----&gt; 1 Foo.f_standalone(12)

TypeError: unbound method f_standalone() must be called with Foo instance as first argument (got int instance instead)
</snippet></ROW><ROW><id>15317549</id><snippet>In [1]: class Foo(object):
   ...:     def f_standalone(x):
   ...:         print("standalone version of f, x={}".format(x))
   ...:     @staticmethod
   ...:     def f_static(x):
   ...:         print("static version of f, x={}".format(x))
   ...:

In [2]: Foo().f_standalone()
standalone version of f, x=&lt;__main__.Foo object at 0x1064daa10&gt;

In [3]: Foo().f_static()
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-3-addf9c3f2477&gt; in &lt;module&gt;()
----&gt; 1 Foo().f_static()

TypeError: f_static() missing 1 required positional argument: 'x'
</snippet></ROW><ROW><id>15317552</id><snippet>mass[0:-1]</snippet></ROW><ROW><id>15317552</id><snippet>den[0]*(rad[0]**3)</snippet></ROW><ROW><id>15317552</id><snippet>mass[1]</snippet></ROW><ROW><id>15317552</id><snippet>test = numpy.linspace(1,10,num=10)
test[1:] += test[0:-1]
# [  1.   3.   6.  10.  15.  21.  28.  36.  45.  55.]
</snippet></ROW><ROW><id>15317552</id><snippet>x + y</snippet></ROW><ROW><id>15317552</id><snippet>x</snippet></ROW><ROW><id>15317552</id><snippet>numpy</snippet></ROW><ROW><id>15317552</id><snippet>test = numpy.linspace(1,10,num=10)
test[1:] += test[0:-1] + 0
# [  1.   3.   5.   7.   9.  11.  13.  15.  17.  19.]
</snippet></ROW><ROW><id>15317552</id><snippet>mass[1:] += den[1:]*(rad[1:]**3-rad[0:-1]**3)
mass[1:] += mass[0:-1]
</snippet></ROW><ROW><id>15317761</id><snippet>def long_running_with_more_values(start, stop):
    while start &lt; stop:
        if stop - start &lt; 20000:
            headers = get_headers.delay(start, stop)
            break
        else:
            headers = get_headers.delay(start, start + 20000)
            start += 20000
    insert_to_db.delay(headers)
</snippet></ROW><ROW><id>15317761</id><snippet>headers</snippet></ROW><ROW><id>15317761</id><snippet>get_headers.delay()</snippet></ROW><ROW><id>15317761</id><snippet>headers += get_headers.delay(start, stop)</snippet></ROW><ROW><id>15317761</id><snippet>get_headers.delay()</snippet></ROW><ROW><id>15317842</id><snippet>btn_ok.clicked.connect(self.dialogTest)</snippet></ROW><ROW><id>15317859</id><snippet>NSMutableData</snippet></ROW><ROW><id>15317859</id><snippet>[data bytes]</snippet></ROW><ROW><id>15317859</id><snippet>[data length]</snippet></ROW><ROW><id>15317903</id><snippet>fileName = '[abc][def]Real Name[!].exe'
name = re.search('(\[[^]]*\])*([\w\s]+)', fileName).group(2)
print name
</snippet></ROW><ROW><id>15317970</id><snippet>config.registry['wsdl_client'] = Client(wsdl_url)

def some_view(request):
    client = request.registry['wsdl_client']
</snippet></ROW><ROW><id>15317970</id><snippet>request.add_finished_callback()</snippet></ROW><ROW><id>15317971</id><snippet>a</snippet></ROW><ROW><id>15317971</id><snippet>b</snippet></ROW><ROW><id>15317971</id><snippet>numpy.cov(a,b)[0][1]</snippet></ROW><ROW><id>15317971</id><snippet>cov(a,b)</snippet></ROW><ROW><id>15317971</id><snippet>np.cov(a,b)</snippet></ROW><ROW><id>15317971</id><snippet>cov(a,a)  cov(a,b)

cov(a,b)  cov(b,b)
</snippet></ROW><ROW><id>15317971</id><snippet>cov</snippet></ROW><ROW><id>15318060</id><snippet>re.compile("(?=.{0," + str(n - 1) + "}o)[o?]{" + str(n) + "}")
</snippet></ROW><ROW><id>15318070</id><snippet>sudo apt-get install python-epydoc
</snippet></ROW><ROW><id>15318070</id><snippet>#!/bin/bash

NLTK_VERSION=$(python -c 'import nltk; print nltk.__version__')
NLTK_URL=$(python -c 'import nltk; print nltk.__url__')
EPYDOC_OPTS = --name=nltk --navlink="nltk ${NLTK_VERSION}"\
              --url=${NLTK_URL} --inheritance=listed --debug

# Rebuild from scratch
[[ -e ~/python-nltk-docs ]] &amp;&amp; rm -rf ~/python-nltk-docs

mkdir ~/python-nltk-docs
epydoc ${EPYDOC_OPTS} -o ~/python-nltk-docs /usr/share/pyshared/nltk
</snippet></ROW><ROW><id>15318070</id><snippet>~/python-nltk-docs</snippet></ROW><ROW><id>15318193</id><snippet>nova boot --image myimage --flavor 1 server1 
</snippet></ROW><ROW><id>15318193</id><snippet>nova</snippet></ROW><ROW><id>15318193</id><snippet>nova boot</snippet></ROW><ROW><id>15318193</id><snippet>nova boot</snippet></ROW><ROW><id>15318266</id><snippet>def assign(self,**kwargs):
    for k,v in kwargs.items():
        if v:
           setattr(self,k,v)
</snippet></ROW><ROW><id>15318266</id><snippet>#python2.7 and newer
def assign(self,allowed_kwargs={'foo','bar','baz'},**kwargs):
    if kwargs.keysview() - allowed_kwargs:
        raise TypeError('useful message here...')
    for k in allowed_kwargs:
        setattr(self,k,kwargs[k])
</snippet></ROW><ROW><id>15318272</id><snippet>import rsvg
import cairo
import StringIO

def render_svg_to_png(svg_data):
    # Render
    svg = rsvg.Handle(data=svg_data)
    img = cairo.ImageSurface(cairo.FORMAT_ARGB32, 
      svg.props.width, 
      svg.props.height)
    ctx = cairo.Context(img)
    svg.render_cairo(ctx)

    # Write to StringIO
    png_io = StringIO.StringIO()
    img.write_to_png(png_io)

    return png_io.getvalue()

svg_data = open('test.svg', 'r').read()
print render_svg_to_png(svg_data)
</snippet></ROW><ROW><id>15318272</id><snippet>.png</snippet></ROW><ROW><id>15318392</id><snippet>now()</snippet></ROW><ROW><id>15318392</id><snippet>import datetime
from django.utils.timezone import utc

now = datetime.datetime.utcnow().replace(tzinfo=utc)
expires = now + datetime.timedelta(hours=7)
</snippet></ROW><ROW><id>15318392</id><snippet>now()</snippet></ROW><ROW><id>15318392</id><snippet>django.utils.timezone</snippet></ROW><ROW><id>15318392</id><snippet>datetime.now()</snippet></ROW><ROW><id>15318392</id><snippet>datetime.utcnow()</snippet></ROW><ROW><id>15318392</id><snippet>datetime</snippet></ROW><ROW><id>15318392</id><snippet>expires</snippet></ROW><ROW><id>15318392</id><snippet>NonExistentTimeError</snippet></ROW><ROW><id>15318392</id><snippet>pytz</snippet></ROW><ROW><id>15318441</id><snippet>for ixr, row in enumerate(leresults):
    for ixe, el in enumerate(row):
        if len(el)==1:
            leresults[ixr][ixe] = el[0]
</snippet></ROW><ROW><id>15318708</id><snippet>download()</snippet></ROW><ROW><id>15318708</id><snippet>/static</snippet></ROW><ROW><id>15318708</id><snippet>/myapp/static/path/to/file.ext</snippet></ROW><ROW><id>15318708</id><snippet>/static</snippet></ROW><ROW><id>15318942</id><snippet>def trifactorgenerator(n):
  return (((i,j,n/(i*j)) 
           for i in range(1, int(n**.5)+1) if n%i==0 
             for j in range(i, int( (n/i)**.5)+1) if n%(i*j) == 0))
</snippet></ROW><ROW><id>15318942</id><snippet>(2,3,4)</snippet></ROW><ROW><id>15318942</id><snippet>(2,4,3)</snippet></ROW><ROW><id>15318963</id><snippet>p = []
for n in range(3):
    p.append(Poly(a[n+1][0:3]))
print p
</snippet></ROW><ROW><id>15318963</id><snippet>Poly</snippet></ROW><ROW><id>15318963</id><snippet>a</snippet></ROW><ROW><id>15318963</id><snippet>p = []
for n in range(3):
    p.append([n,n+1,n+2])
print p
#output:
#[[0, 1, 2],
# [1, 2, 3],
# [2, 3, 4]]
</snippet></ROW><ROW><id>15318963</id><snippet>n+1</snippet></ROW><ROW><id>15318963</id><snippet>n=n+1</snippet></ROW><ROW><id>15318963</id><snippet>n in range(3)</snippet></ROW><ROW><id>15318963</id><snippet>for n in range(3):
    print n
#output:
# 0
# 1
# 2
</snippet></ROW><ROW><id>15318963</id><snippet>0</snippet></ROW><ROW><id>15318963</id><snippet>2</snippet></ROW><ROW><id>15318963</id><snippet>3</snippet></ROW><ROW><id>15319004</id><snippet>sys.exit()</snippet></ROW><ROW><id>15319004</id><snippet>except KeyboardInterrupt:</snippet></ROW><ROW><id>15319004</id><snippet>try:
    # DO THINGS
except KeyboardInterrupt:
    # quit
    sys.exit()
</snippet></ROW><ROW><id>15319004</id><snippet>exit()</snippet></ROW><ROW><id>15319315</id><snippet>d[x]=d.get(x,0)
</snippet></ROW><ROW><id>15319315</id><snippet>d[x]=d.get(x,0) + 1
</snippet></ROW><ROW><id>15319315</id><snippet>0</snippet></ROW><ROW><id>15319315</id><snippet>True</snippet></ROW><ROW><id>15319315</id><snippet>0</snippet></ROW><ROW><id>15319315</id><snippet>collections.Counter</snippet></ROW><ROW><id>15319315</id><snippet>d = collections.Counter(strng)
</snippet></ROW><ROW><id>15319315</id><snippet>all(k in dct and v &lt; dct[k] for k, v in d.items())
</snippet></ROW><ROW><id>15319358</id><snippet>communicate()</snippet></ROW><ROW><id>15319704</id><snippet>&gt;&gt;&gt; some_list = [[('C', '0', 8.625), ('A', '0', 4.5)], [('B', '0', 15.3125), ('D', '2', 6.0625)],
[('C', '1', 8.1875), ('D', '2', 6.0625)], [('G', '2', 11.0625), ('D', '2', 6.0625)],
[('G', '2', 10.1875), ('C', '1', 8.1875)]]
&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; ('C', '0', 8.625) in chain(*some_list)
True
</snippet></ROW><ROW><id>15319750</id><snippet>x</snippet></ROW><ROW><id>15319750</id><snippet>import matplotlib.pyplot as plt
fig = plt.figure()
ax = fig.add_subplot(111)
y = [100, 99, 93, 88, 85, 43]
xt = [0, 5, 4, 3, 2, 1]
ax.plot(y)
ax.set_xticklabels(xt)
fig.savefig("out.png")
</snippet></ROW><ROW><id>15319750</id><snippet>x</snippet></ROW><ROW><id>15319750</id><snippet>xticks</snippet></ROW><ROW><id>15319750</id><snippet>xticklabels</snippet></ROW><ROW><id>15319825</id><snippet>__getitem__</snippet></ROW><ROW><id>15319825</id><snippet>get_items</snippet></ROW><ROW><id>15319825</id><snippet>class ItemsInterface(object):
    def get_items(self, key):
        raise NotImplementedError

class DictItems(ItemsInterface, dict):
    def __init__(self, *args, **kwargs):
        dict.__init__(self, *args, **kwargs)
    def get_items(self, key):
        res = self[key]
        # apply recursively
        try:
            res = res.get_items(key)
        except AttributeError:
            pass
        return res

class ListItems(ItemsInterface, list):
    def __init__(self, *args, **kwargs):
        list.__init__(self, *args, **kwargs)
    def get_items(self, key):
        return [ x.get_items(key) for x in self ]

x = ListItems()
x.append(DictItems({'key1':'v1'}))
x.append(DictItems({'key1':'v2'}))
x.append(DictItems({'key1':'v3'}))
y = DictItems({'key1':'v999'})
x.append(ListItems([ y ]))
x.get_items('key1')
=&gt; ['v1', 'v2', 'v3', ['v999']]
</snippet></ROW><ROW><id>15319825</id><snippet>ListItems</snippet></ROW><ROW><id>15319825</id><snippet>DictItems</snippet></ROW><ROW><id>15319825</id><snippet>get_items</snippet></ROW><ROW><id>15319835</id><snippet>GetId</snippet></ROW><ROW><id>15319835</id><snippet>id_of_button_n = button_n.GetId()
</snippet></ROW><ROW><id>15319835</id><snippet>self.btarray</snippet></ROW><ROW><id>15319936</id><snippet>NOTIFY</snippet></ROW><ROW><id>15319936</id><snippet>LISTEN</snippet></ROW><ROW><id>15319936</id><snippet>NOTIFY</snippet></ROW><ROW><id>15319936</id><snippet>LISTEN</snippet></ROW><ROW><id>15319936</id><snippet>PL/Pythonu</snippet></ROW><ROW><id>15319936</id><snippet>os.system</snippet></ROW><ROW><id>15319936</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>15319936</id><snippet>PL/Perlu</snippet></ROW><ROW><id>15319936</id><snippet>system()</snippet></ROW><ROW><id>15319936</id><snippet>os.system</snippet></ROW><ROW><id>15319936</id><snippet>shutil</snippet></ROW><ROW><id>15319936</id><snippet>os.mkdir</snippet></ROW><ROW><id>15319936</id><snippet>subprocess.call</snippet></ROW><ROW><id>15319936</id><snippet>os.system</snippet></ROW><ROW><id>15319936</id><snippet>subprocess.call</snippet></ROW><ROW><id>15319936</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>15319936</id><snippet>system()</snippet></ROW><ROW><id>15319936</id><snippet>copy</snippet></ROW><ROW><id>15319936</id><snippet>CopyFile</snippet></ROW><ROW><id>15320186</id><snippet>if color == self.fill2:
    color = self.fill1
else:
    color = self.fill2
</snippet></ROW><ROW><id>15320433</id><snippet>for result in cursor.stored_results():
    people = result.fetchall()
</snippet></ROW><ROW><id>15320433</id><snippet>SELECT</snippet></ROW><ROW><id>15320433</id><snippet>import mysql.connector

cnx = mysql.connector.connect(user='me',password='pw',host='localhost',database='mydb')
cnx._open_connection()
cursor = cnx.cursor()

cursor.callproc("getperson",[1])

for result in cursor.stored_results():
    people=result.fetchall()

for person in people:
    print person

cnx.close()
</snippet></ROW><ROW><id>15320460</id><snippet>myValues[i] = bla['value']
</snippet></ROW><ROW><id>15320720</id><snippet>In [15]: lst = [('543', 'Tom', '- Jerry'), ('544', 'X-man - ', 'Hulk')]

In [16]: [tuple(i.strip(' -') for i in tup) for tup in lst]
Out[16]: [('543', 'Tom', 'Jerry'), ('544', 'X-man', 'Hulk')]
</snippet></ROW><ROW><id>15321139</id><snippet>list()</snippet></ROW><ROW><id>15321139</id><snippet>[]</snippet></ROW><ROW><id>15321139</id><snippet>append</snippet></ROW><ROW><id>15321139</id><snippet>None</snippet></ROW><ROW><id>15321139</id><snippet>&gt;&gt;&gt; lst = []
&gt;&gt;&gt; lst.append('hello')  # appends 'hello' to the list
&gt;&gt;&gt; lst
['hello']
&gt;&gt;&gt; result = lst.append('world')  # append method returns None
&gt;&gt;&gt; result  # nothing is displayed
&gt;&gt;&gt; print result
None
&gt;&gt;&gt; lst  # the list contains 'world' as well now
['hello', 'world']
</snippet></ROW><ROW><id>15321222</id><snippet>&gt;&gt;&gt; s
'This is some \\u03c0 text that has to be cleaned\\u2026! it\\u0027s annoying!'
&gt;&gt;&gt; print(s.decode('unicode_escape').encode('ascii','ignore'))
This is some  text that has to be cleaned! it's annoying!
</snippet></ROW><ROW><id>15321234</id><snippet>gca().ticklabel_format(style='sci',axis='y',scilimits=(0,0))
ylim(-3e-6,-1e-6)
</snippet></ROW><ROW><id>15321285</id><snippet>Axes</snippet></ROW><ROW><id>15321285</id><snippet>ax.get_position()</snippet></ROW><ROW><id>15321285</id><snippet>Axes</snippet></ROW><ROW><id>15321285</id><snippet>Bbox(array([[ 0.125,  0.1  ], [ 0.745,  0.9  ]]))</snippet></ROW><ROW><id>15321285</id><snippet>ax._position.bounds</snippet></ROW><ROW><id>15321285</id><snippet>import matplotlib 
import matplotlib.pyplot as plt

min_val = 0
max_val = 1

my_cmap = matplotlib.cm.get_cmap('jet') 
norm = matplotlib.colors.Normalize(min_val, max_val) 

cmmapable = matplotlib.cm.ScalarMappable(norm, my_cmap)
cmmapable.set_array(range(min_val, max_val))

fig1 = plt.figure()
ax1 = fig1.add_subplot(111)

cbar = plt.colorbar(cmmapable, ax = ax1, ticks=[0, 1])
cbar.ax.set_yticklabels(['Min', 'Max'])

# gives bounding box with left, right, bottom, top
print(ax1.get_position())
# gives rectangle with left, bottom, width, height
print(ax1._position.bounds)

fig2 = plt.figure()
ax2 = fig2.add_axes(ax1._position.bounds)

plt.show()
</snippet></ROW><ROW><id>15321285</id><snippet>import matplotlib 
import matplotlib.pyplot as plt

min_val = 0
max_val = 1

my_cmap = matplotlib.cm.get_cmap('jet') 
norm = matplotlib.colors.Normalize(min_val, max_val) 

cmmapable = matplotlib.cm.ScalarMappable(norm, my_cmap)
cmmapable.set_array(range(min_val, max_val))

fig1 = plt.figure()
ax1 = fig1.add_subplot(111)

# set opacity to 0
cbar = plt.colorbar(cmmapable, ax = ax1, ticks=[0, 1], alpha = 0)

# remove the tick labels
cbar.ax.set_yticklabels(['', ''])
# set the tick length to 0
cbar.ax.tick_params(axis = 'y', which = "both", length = 0)

# set everything that has a linewidth to 0
for a in cbar.ax.get_children():
    try:
        a.set_linewidth(0)
    except:
        pass

plt.show()   
</snippet></ROW><ROW><id>15321402</id><snippet>=</snippet></ROW><ROW><id>15321402</id><snippet>x</snippet></ROW><ROW><id>15321432</id><snippet>Firefox</snippet></ROW><ROW><id>15321432</id><snippet>fierfox</snippet></ROW><ROW><id>15321432</id><snippet>import webbrowser as wb

url_mf = ['https://www.thatsite.com/','http://www.google.ie/']
url_gc = ['https://www.thatsite.com/','http://www.google.ie/']

chrome = wb.get('"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe" %s')
firefox = wb.get('"C:/Program Files (x86)/Mozilla Firefox/firefox.exe" %s')

chrome.open(url_gc[1], new=1)
firefox.open(url_mf[1], new=1)
</snippet></ROW><ROW><id>15321432</id><snippet>import webbrowser as wb

urls = ["http://www.google.ie/","http://www.gametrailers.com/"]

for url in urls:
    wb.open(url,new=2, autoraise=True)
</snippet></ROW><ROW><id>15321519</id><snippet>INSTALLED_APPS = (
    .......
    'blog',
    ......
)
</snippet></ROW><ROW><id>15321524</id><snippet>update</snippet></ROW><ROW><id>15321524</id><snippet>F()</snippet></ROW><ROW><id>15321524</id><snippet>Model.objects.filter(id=id).update(field=F('field') +1))
</snippet></ROW><ROW><id>15321557</id><snippet>GetName()</snippet></ROW><ROW><id>15321557</id><snippet>wx.BitmapButton(self,..., name = someName)</snippet></ROW><ROW><id>15321557</id><snippet>SetName()</snippet></ROW><ROW><id>15321557</id><snippet>value</snippet></ROW><ROW><id>15321557</id><snippet>value</snippet></ROW><ROW><id>15321591</id><snippet>while 1:
    i=input('Enter the number for which all previous shall be tested for primality: ')
    n=5
    a=[2,3]
    while n&lt;=i:
        n=n+1
        isPrime = True
        for b in a:
            if n%b==0:
                isPrime = False
                break
        if isPrime:
            a.append(n)
            print a
</snippet></ROW><ROW><id>15321906</id><snippet>win32security</snippet></ROW><ROW><id>15321906</id><snippet>cacls</snippet></ROW><ROW><id>15321906</id><snippet>from subprocess import *

proc = Popen("echo y|cacls filename /E /G BUILTIN\\Users:R", shell=True) 

proc.wait()

print "Child exited with",proc.returncode
</snippet></ROW><ROW><id>15321906</id><snippet>echo y</snippet></ROW><ROW><id>15321906</id><snippet>icacls</snippet></ROW><ROW><id>15321906</id><snippet>xcalcs</snippet></ROW><ROW><id>15321982</id><snippet>exec</snippet></ROW><ROW><id>15321982</id><snippet>var  = 'John1'
value = 42

exec "%s = %d" % (var,value)
exec "print %s" % (var)

print (dir())
</snippet></ROW><ROW><id>15321982</id><snippet>42
['John1', '__builtins__', '__doc__', '__file__', '__name__', '__package__', 'value', 'var']
</snippet></ROW><ROW><id>15322028</id><snippet>list</snippet></ROW><ROW><id>15322028</id><snippet>list</snippet></ROW><ROW><id>15322028</id><snippet>Fred=list(range(10))

def f(x): return x % 2 != 0

print(list(filter(f,Fred)))
</snippet></ROW><ROW><id>15322042</id><snippet>array = [(126,150),(124,154),(123,145),(123,149)]
inversed = [(item[1],item[0]) for item in array]
</snippet></ROW><ROW><id>15322060</id><snippet>safe</snippet></ROW><ROW><id>15322060</id><snippet>import json

@app.route('/')
def my_view():
    data = [1, 'foo']
    return render_template('index.html', data=json.dumps(data))
</snippet></ROW><ROW><id>15322060</id><snippet>&lt;script type="text/javascript"&gt;
    function test_func(data) {
        console.log(data);
    }
    test_func({{ data|safe }})
&lt;/script&gt;
</snippet></ROW><ROW><id>15322060</id><snippet>import json

@app.route('/')
def my_view():
    data = [1, "foo"]
    return render_template('index.html', data=map(json.dumps, data))
</snippet></ROW><ROW><id>15322060</id><snippet>{% for item in data %}
    &lt;span onclick=someFunction({{ item|safe }});&gt;{{ item }}&lt;/span&gt;
{% endfor %}
</snippet></ROW><ROW><id>15322060</id><snippet>Flask</snippet></ROW><ROW><id>15322112</id><snippet>&gt;&gt;&gt; d = {'(': 'a'}
&gt;&gt;&gt; "".join(d.get(x,x) for x in 'text with m(ny letters')
'text with many letters'
</snippet></ROW><ROW><id>15322112</id><snippet>&gt;&gt;&gt; d = {'(': 'a'}
&gt;&gt;&gt; ''.join(map(lambda letter: d.get(letter, letter), 'text with m(ny letters'))
'text with many letters'
</snippet></ROW><ROW><id>15322112</id><snippet>d.get(letter, letter)
</snippet></ROW><ROW><id>15322112</id><snippet>lambda letter: lalala
</snippet></ROW><ROW><id>15322112</id><snippet>def f(letter):
    return lalala
f # return f
</snippet></ROW><ROW><id>15322112</id><snippet>map(function, list) 
</snippet></ROW><ROW><id>15322112</id><snippet>[function(element) for element in list]
</snippet></ROW><ROW><id>15322112</id><snippet>l = []
for element in list:
    l.append(function(element))
l # returns that list
</snippet></ROW><ROW><id>15322112</id><snippet>''.join(list)
</snippet></ROW><ROW><id>15322112</id><snippet>string = ''
for element in list:
    string += element
string # return string as result
</snippet></ROW><ROW><id>15322191</id><snippet>ABC</snippet></ROW><ROW><id>15322191</id><snippet>match = re.search(r'ABC\s*(\d+)', page)
if match:
    print match.group(1)
</snippet></ROW><ROW><id>15322191</id><snippet>&gt;&gt;&gt; re.search(r'ABC\s*(\d+)', 'ABC 98765.').group(1)
'98765'
&gt;&gt;&gt; re.search(r'ABC\s*(\d+)', 'ABC 55555&lt;').group(1)
'55555'
</snippet></ROW><ROW><id>15322191</id><snippet>findall()</snippet></ROW><ROW><id>15322191</id><snippet>matches = re.findall(r'ABC\s*(\d+)', page)
</snippet></ROW><ROW><id>15322191</id><snippet>ABC</snippet></ROW><ROW><id>15322191</id><snippet>&gt;&gt;&gt; re.findall(r'ABC\s*(\d+)', 'Some text with ABC 98765. There is some other text too, with ABC 55555&lt;!')
['98765', '55555']
</snippet></ROW><ROW><id>15322215</id><snippet>float</snippet></ROW><ROW><id>15322215</id><snippet>np.float32</snippet></ROW><ROW><id>15322215</id><snippet>response</snippet></ROW><ROW><id>15322215</id><snippet>pyximport</snippet></ROW><ROW><id>15322215</id><snippet>~/.pyxbld</snippet></ROW><ROW><id>15322215</id><snippet>%userprofile%\.pyxbld</snippet></ROW><ROW><id>15322215</id><snippet>import numpy as np
import pyximport
pyximport.install(setup_args={'include_dirs': [np.get_include()]})

open('_tmp.pyx', 'w').write('''
cimport numpy as np
cpdef function(np.ndarray[np.float32_t, ndim=2] response, max_loc):
    cdef unsigned int p_one, q_one
    p_one = int(max_loc[0])
    q_one = int(max_loc[1])
    p_two = int(max_loc[0])
    q_two = int(max_loc[1])
    r_one = response[q_one, p_one]
    r_two = response[q_two, p_two]
''')

import _tmp
assert(hasattr(_tmp, 'function'))
</snippet></ROW><ROW><id>15322215</id><snippet>unsigned int</snippet></ROW><ROW><id>15322215</id><snippet>PyFloat_FromDouble</snippet></ROW><ROW><id>15322215</id><snippet>double</snippet></ROW><ROW><id>15322215</id><snippet>int</snippet></ROW><ROW><id>15322215</id><snippet>PyObject_GetItem</snippet></ROW><ROW><id>15322215</id><snippet>ndarray</snippet></ROW><ROW><id>15322215</id><snippet>np.float32</snippet></ROW><ROW><id>15322215</id><snippet>#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) \
    (type)((char*)buf + i0 * s0 + i1 * s1)

  /* "_tmp.pyx":9
 *     p_two = int(max_loc[0])
 *     q_two = int(max_loc[1])
 *     r_one = response[q_one, p_one]             # &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
 *     r_two = response[q_two, p_two]
 */
  __pyx_t_3 = __pyx_v_q_one;
  __pyx_t_4 = __pyx_v_p_one;
  __pyx_t_5 = -1;

  if (unlikely(__pyx_t_3 &gt;= (size_t)__pyx_bshape_0_response))
    __pyx_t_5 = 0;
  if (unlikely(__pyx_t_4 &gt;= (size_t)__pyx_bshape_1_response))
    __pyx_t_5 = 1;

  if (unlikely(__pyx_t_5 != -1)) {
    __Pyx_RaiseBufferIndexError(__pyx_t_5);
    {
      __pyx_filename = __pyx_f[0];
      __pyx_lineno = 9;
      __pyx_clineno = __LINE__;
      goto __pyx_L1_error;
    }
  }

  __pyx_t_1 = PyFloat_FromDouble((
    *__Pyx_BufPtrStrided2d(
      __pyx_t_5numpy_float32_t *,
      __pyx_bstruct_response.buf,
      __pyx_t_3, __pyx_bstride_0_response,
      __pyx_t_4, __pyx_bstride_1_response)));

  if (unlikely(!__pyx_t_1)) {
    __pyx_filename = __pyx_f[0];
    __pyx_lineno = 9;
    __pyx_clineno = __LINE__;
    goto __pyx_L1_error;
  }

  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_r_one = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "_tmp.pyx":10
 *     q_two = int(max_loc[1])
 *     r_one = response[q_one, p_one]
 *     r_two = response[q_two, p_two]             # &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
 */
  __pyx_t_1 = PyTuple_New(2);

  if (unlikely(!__pyx_t_1)) {
    __pyx_filename = __pyx_f[0];
    __pyx_lineno = 10;
    __pyx_clineno = __LINE__;
    goto __pyx_L1_error;
  }

  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(__pyx_v_q_two);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_q_two);
  __Pyx_GIVEREF(__pyx_v_q_two);
  __Pyx_INCREF(__pyx_v_p_two);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_p_two);
  __Pyx_GIVEREF(__pyx_v_p_two);

  __pyx_t_2 = PyObject_GetItem(
    ((PyObject *)__pyx_v_response),
    ((PyObject *)__pyx_t_1));

  if (!__pyx_t_2) {
    __pyx_filename = __pyx_f[0];
    __pyx_lineno = 10;
    __pyx_clineno = __LINE__;
    goto __pyx_L1_error;
  }

  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_v_r_two = __pyx_t_2;
  __pyx_t_2 = 0;
</snippet></ROW><ROW><id>15322359</id><snippet>.belongs()</snippet></ROW><ROW><id>15322359</id><snippet>db.data_table.book.lower().belongs(row.foo)
</snippet></ROW><ROW><id>15322395</id><snippet>math</snippet></ROW><ROW><id>15322395</id><snippet>mathmodule.c</snippet></ROW><ROW><id>15322395</id><snippet>exp</snippet></ROW><ROW><id>15322395</id><snippet>math_exp</snippet></ROW><ROW><id>15322395</id><snippet>static PyMethodDef math_methods[] = {
    # ...
    {"exp",             math_exp,       METH_O,         math_exp_doc},
</snippet></ROW><ROW><id>15322395</id><snippet>math_exp</snippet></ROW><ROW><id>15322395</id><snippet>FUNC1</snippet></ROW><ROW><id>15322395</id><snippet>math_1</snippet></ROW><ROW><id>15322395</id><snippet>exp</snippet></ROW><ROW><id>15322395</id><snippet>FUNC1(exp, exp, 1,
     "exp(x)\n\nReturn e raised to the power of x.")
</snippet></ROW><ROW><id>15322395</id><snippet>fdlibm</snippet></ROW><ROW><id>15322395</id><snippet>exp</snippet></ROW><ROW><id>15322428</id><snippet>type</snippet></ROW><ROW><id>15322428</id><snippet>&gt;&gt;&gt; class MyClass(object): pass
... 
&gt;&gt;&gt; isinstance(MyClass, type)
True
</snippet></ROW><ROW><id>15322428</id><snippet>object</snippet></ROW><ROW><id>15322428</id><snippet>object</snippet></ROW><ROW><id>15322428</id><snippet>&gt;&gt;&gt; isinstance(MyClass, object)
True
</snippet></ROW><ROW><id>15322428</id><snippet>issubclass</snippet></ROW><ROW><id>15322428</id><snippet>&gt;&gt;&gt; issubclass(MyClass, object)
True
</snippet></ROW><ROW><id>15322428</id><snippet>isinstance(Monkey, ModelBase)</snippet></ROW><ROW><id>15322428</id><snippet>ModelBase</snippet></ROW><ROW><id>15322428</id><snippet># from django source-code
class ModelBase(type):
    """
    Metaclass for all models.
    """
</snippet></ROW><ROW><id>15322428</id><snippet>ModelBase</snippet></ROW><ROW><id>15322564</id><snippet>&gt;&gt;&gt; Left= Word(alphanums)
&gt;&gt;&gt; Op = oneOf('= := -&gt; ::=')
&gt;&gt;&gt; Right = QuotedString('"') | QuotedString("'")
&gt;&gt;&gt; Rule = Left+ Op+ Right
&gt;&gt;&gt; Rule.parseString("A -&gt; '_\x5555 a'")
(['A', '-&gt;', '_U55 a'], {})
&gt;&gt;&gt; Rule.parseString(r"A -&gt; '_\x5555 a'")  # use a raw string literal, with r""
(['A', '-&gt;', '_\\x5555 a'], {})
</snippet></ROW><ROW><id>15322712</id><snippet>__init__</snippet></ROW><ROW><id>15322715</id><snippet>agg</snippet></ROW><ROW><id>15322715</id><snippet>aggregate</snippet></ROW><ROW><id>15322715</id><snippet>Series</snippet></ROW><ROW><id>15322715</id><snippet>DataFrame</snippet></ROW><ROW><id>15322715</id><snippet>agg</snippet></ROW><ROW><id>15322715</id><snippet>idx = df.groupby('word')['count'].agg(lambda col: col.idxmax())
print(idx)
</snippet></ROW><ROW><id>15322715</id><snippet>word
a       2
an      3
the     1
Name: count
</snippet></ROW><ROW><id>15322715</id><snippet>ix</snippet></ROW><ROW><id>15322715</id><snippet>word</snippet></ROW><ROW><id>15322715</id><snippet>tag</snippet></ROW><ROW><id>15322715</id><snippet>print(df.ix[idx, ['word', 'tag']])
</snippet></ROW><ROW><id>15322715</id><snippet>  word tag
2    a   T
3   an   T
1  the   S
</snippet></ROW><ROW><id>15322715</id><snippet>apply</snippet></ROW><ROW><id>15322715</id><snippet>agg</snippet></ROW><ROW><id>15322715</id><snippet>apply</snippet></ROW><ROW><id>15322715</id><snippet>import pandas as pd
df = pd.DataFrame({'word':'a the a an the'.split(),
                   'tag': list('SSTTT'),
                   'count': [30, 20, 60, 5, 10]})

print(df.groupby('word').apply(lambda subf: subf['tag'][subf['count'].idxmax()]))
</snippet></ROW><ROW><id>15322715</id><snippet>word
a       T
an      T
the     S
</snippet></ROW><ROW><id>15322715</id><snippet>agg</snippet></ROW><ROW><id>15322715</id><snippet>ix</snippet></ROW><ROW><id>15322715</id><snippet>apply</snippet></ROW><ROW><id>15322715</id><snippet>N = 10000
df = pd.DataFrame({'word':'a the a an the'.split()*N,
                   'tag': list('SSTTT')*N,
                   'count': [30, 20, 60, 5, 10]*N})
def using_apply(df):
    return (df.groupby('word').apply(lambda subf: subf['tag'][subf['count'].idxmax()]))

def using_agg_ix(df):
    idx = df.groupby('word')['count'].agg(lambda col: col.idxmax())
    return df.ix[idx, ['word', 'tag']]

In [22]: %timeit using_apply(df)
100 loops, best of 3: 8.05 ms per loop

In [23]: %timeit using_agg_ix(df)
100 loops, best of 3: 5.58 ms per loop
</snippet></ROW><ROW><id>15322715</id><snippet>set_index</snippet></ROW><ROW><id>15322715</id><snippet>to_dict</snippet></ROW><ROW><id>15322715</id><snippet>In [36]: df2 = df.ix[idx, ['word', 'tag']].set_index('word')

In [37]: df2
Out[37]: 
     tag
word    
a      T
an     T
the    S

In [38]: df2.to_dict()['tag']
Out[38]: {'a': 'T', 'an': 'T', 'the': 'S'}
</snippet></ROW><ROW><id>15322788</id><snippet>__slots__</snippet></ROW><ROW><id>15322788</id><snippet>class MutableEfficientNamedList(object):
    __slots__ = ('field1', 'field2', 'field3')

    def __init__(self, *values):
        for k, v in zip(self.__slots__, values):
            setattr(self, k, v)

    def __getitem__(self, i):
        return getattr(self, self.__slots__[i])

    def __setitem__(self, i, v):
        return setattr(self, self.__slots__[i], v)

    def __repr__(self):
        return '{}({})'.format(type(self).__name__, 
            ', '.join(repr(getattr(self, s)) for s in self.__slots__))
</snippet></ROW><ROW><id>15322788</id><snippet>__slots__</snippet></ROW><ROW><id>15322788</id><snippet>&gt;&gt;&gt; menl = MutableEfficientNamedList('foo', 'bar', 'baz')
&gt;&gt;&gt; menl
MutableEfficientNamedList('foo', 'bar', 'baz')
&gt;&gt;&gt; menl.field1
'foo'
&gt;&gt;&gt; menl[0]
'foo'
&gt;&gt;&gt; menl[1]
'bar'
&gt;&gt;&gt; menl[1] = 'spam'
&gt;&gt;&gt; menl.field2
'spam'
</snippet></ROW><ROW><id>15322788</id><snippet>namedtuple()</snippet></ROW><ROW><id>15322788</id><snippet>def namedlist(name, *attrs):
    """Create a named list class named `name` with attributes `attrs`.
       `attrs` must be strings representing valid Python identifiers.
    """
    class MutableEfficientNamedList(object):
        __slots__ = attrs

        def __init__(self, *values):
            for k, v in zip(self.__slots__, values):
                setattr(self, k, v)

        def __getitem__(self, i):
            return getattr(self, self.__slots__[i])

        def __setitem__(self, i, v):
            return setattr(self, self.__slots__[i], v)

        def __repr__(self):
            return '{}({})'.format(type(self).__name__, 
                ', '.join(repr(getattr(self, s)) for s in self.__slots__))

    MutableEfficientNamedList.__name__ = name
    return MutableEfficientNamedList

MyList = namedlist('MyList', 'foo', 'bar', 'baz')
nl = MyList(1, 2, 3)
print nl  # MyList(1, 2, 3)
print nl.bar  # 2
print nl[1]  # 2
</snippet></ROW><ROW><id>15322927</id><snippet>listbox.bind( "&lt;Double-Button-1&gt;" , internet )

def internet():
    weblink = lb2.get(ACTIVE)
    webbrowser.open(weblink)
</snippet></ROW><ROW><id>15323397</id><snippet>drive_service.about().get().execute()["rootFolderId"]</snippet></ROW><ROW><id>15323397</id><snippet>def listFolders(self, path):
    fId = self.getPathId(path) #get the id of the parent folder
    files = self.drive_service.children().list(folderId=fId).execute() #Request children
    files = files["items"] #All of the items in the folder

    folders = []
    for i in range(len(files)):
        sId = files[i]["id"]
        sFile = self.drive_service.files().get(fileId=sId).execute()
        if sFile["labels"]["trashed"] == False and sFile["mimeType"] == "application/vnd.google-apps.folder":
            self.addPath(path+sFile["title"]+"/", sFile["id"])
            folders.append(sFile["title"])
    return folders
</snippet></ROW><ROW><id>15323402</id><snippet>block_head = r"""
    (?P&lt;head&gt;
        ^
        \s*
        (?P&lt;head_head&gt; =+ )
        \s*
        (?P&lt;head_text&gt; .*? )
        \s*
        (?P=head_head)
        \s*
        $
    )
"""
</snippet></ROW><ROW><id>15323402</id><snippet>=</snippet></ROW><ROW><id>15323402</id><snippet>=</snippet></ROW><ROW><id>15323402</id><snippet>re.X</snippet></ROW><ROW><id>15323402</id><snippet>=</snippet></ROW><ROW><id>15323402</id><snippet>&gt;&gt;&gt; re.search(block_head, '=== Some header! ===', re.X).groupdict()
{'head_text': 'Some header!', 'head': '=== Some header! ===', 'head_head': '==='}
</snippet></ROW><ROW><id>15323402</id><snippet>block_head = r"(?P&lt;head&gt;^\s*(?P&lt;head_head&gt;=+)\s*(?P&lt;head_text&gt;.*?)\s*(?P=head_head)\s*$)"
</snippet></ROW><ROW><id>15323402</id><snippet>re</snippet></ROW><ROW><id>15324175</id><snippet>P = {'A': 10, ..}</snippet></ROW><ROW><id>15324175</id><snippet>w = [((c1, c2), P[c1] - P[c2]) for c1, c2 in itertools.combinations(P.keys(), 2)]</snippet></ROW><ROW><id>15324175</id><snippet>letters_pairs, values = zip(*w)</snippet></ROW><ROW><id>15324434</id><snippet>str</snippet></ROW><ROW><id>15324434</id><snippet>hashlib</snippet></ROW><ROW><id>15324434</id><snippet>str</snippet></ROW><ROW><id>15324434</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; "this is binary \0\1\2"
'this is binary \x00\x01\x02'
&gt;&gt;&gt; hashlib.sha1("this is binary \0\1\2").hexdigest()
'17c27af39d476f662be60be7f25c8d3873041bb3'
</snippet></ROW><ROW><id>15324557</id><snippet>Row(*A)</snippet></ROW><ROW><id>15324557</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Row = namedtuple('Row', ['first', 'second', 'third'])
&gt;&gt;&gt; A = ['1', '2', '3']
&gt;&gt;&gt; Row(*A)
Row(first='1', second='2', third='3')
</snippet></ROW><ROW><id>15324584</id><snippet>something</snippet></ROW><ROW><id>15324736</id><snippet>namedtuple(...)</snippet></ROW><ROW><id>15324736</id><snippet>Result = namedtuple('Result', ['x', 'y'])
result = Result(5, 6)
</snippet></ROW><ROW><id>15324736</id><snippet>namedtuple</snippet></ROW><ROW><id>15324736</id><snippet>namedtuple</snippet></ROW><ROW><id>15324786</id><snippet>from collections import defaultdict
def set_with_path(d, path, val):
    end = path.pop()
    for k in path:
        d = d.setdefault(k, {})
    d[end] = val
</snippet></ROW><ROW><id>15324786</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; set_with_path(d, ['one', 'two', 'three'], 'val')
&gt;&gt;&gt; d
{'one': {'two': {'three': 'val'}}}
&gt;&gt;&gt; set_with_path(d, ['one', 'four', 'six'], 'val2')
&gt;&gt;&gt; d
{'one': {'four': {'six': 'val2'}, 'two': {'three': 'val'}}}
</snippet></ROW><ROW><id>15324861</id><snippet>msg_ids</snippet></ROW><ROW><id>15325045</id><snippet>for value in pytz.all_timezones:
     try:
        t =  timezone(value)
    except:
        print "FAIL", value
</snippet></ROW><ROW><id>15325075</id><snippet>Node</snippet></ROW><ROW><id>15325320</id><snippet>def mirror(root):
    if root is None:
        return
    mirror(root.left)
    mirror(root.right)
    root.left, root.right = root.right, root.left
</snippet></ROW><ROW><id>15325492</id><snippet>result = [foo(l) for l in mylist]
</snippet></ROW><ROW><id>15325492</id><snippet>.append()</snippet></ROW><ROW><id>15325514</id><snippet>def how():
     tangerine = 1    
     return tangerine
</snippet></ROW><ROW><id>15325514</id><snippet> import ext
 print ext.how()
</snippet></ROW><ROW><id>15325544</id><snippet>Owner.all().filter('things=',t1)
</snippet></ROW><ROW><id>15325544</id><snippet>Owner.all().filter('things =',t1)
</snippet></ROW><ROW><id>15325840</id><snippet>def points(*args):
  return list(product(*[range(n) for n in args]))
</snippet></ROW><ROW><id>15325856</id><snippet>&gt;&gt;&gt; L = [(('a', 'c'), -3), (('a', 'd'), -7), (('c', 'd'), -4)]
&gt;&gt;&gt; zip(*[(a[0], a[1], b) for a, b in L])
[('a', 'a', 'c'), ('c', 'd', 'd'), (-3, -7, -4)]
</snippet></ROW><ROW><id>15326213</id><snippet>import random

a_random_tag = random.choice(list_of_tags)
</snippet></ROW><ROW><id>15326274</id><snippet>struct.unpack('!6xBB4xI4xI', data)</snippet></ROW><ROW><id>15326274</id><snippet>6</snippet></ROW><ROW><id>15326274</id><snippet>B</snippet></ROW><ROW><id>15326274</id><snippet>B</snippet></ROW><ROW><id>15326274</id><snippet>4</snippet></ROW><ROW><id>15326274</id><snippet>I</snippet></ROW><ROW><id>15326274</id><snippet>4</snippet></ROW><ROW><id>15326274</id><snippet>I</snippet></ROW><ROW><id>15326294</id><snippet>def first_tuple(t):
    return t if isinstance(t,tuple) else next(x for x in t if isinstance(x,tuple))
</snippet></ROW><ROW><id>15326294</id><snippet>&gt;&gt;&gt; first_tuple((3,5))
(3, 5)
&gt;&gt;&gt; first_tuple([(3, 5), [200, 100, 100]])
(3, 5)
&gt;&gt;&gt; first_tuple([[100, 100, 100], (3, 5)])
(3, 5)
&gt;&gt;&gt; first_tuple([(3, 5), (4, 7)])
(3, 5)
&gt;&gt;&gt; first_tuple([[],[]])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in first_tuple
StopIteration
</snippet></ROW><ROW><id>15326609</id><snippet>A</snippet></ROW><ROW><id>15326609</id><snippet>B</snippet></ROW><ROW><id>15326609</id><snippet>myLib</snippet></ROW><ROW><id>15326609</id><snippet>A</snippet></ROW><ROW><id>15326609</id><snippet>B</snippet></ROW><ROW><id>15326609</id><snippet>A</snippet></ROW><ROW><id>15326609</id><snippet>B</snippet></ROW><ROW><id>15326609</id><snippet>myLib</snippet></ROW><ROW><id>15326609</id><snippet>myLib</snippet></ROW><ROW><id>15326609</id><snippet>__init__.py</snippet></ROW><ROW><id>15326609</id><snippet>myLib</snippet></ROW><ROW><id>15326609</id><snippet>from myLib import A</snippet></ROW><ROW><id>15326609</id><snippet>A</snippet></ROW><ROW><id>15326609</id><snippet>A</snippet></ROW><ROW><id>15326609</id><snippet>A</snippet></ROW><ROW><id>15326609</id><snippet>A.A()</snippet></ROW><ROW><id>15326609</id><snippet>from myLib.A import A</snippet></ROW><ROW><id>15326609</id><snippet>A</snippet></ROW><ROW><id>15326609</id><snippet>A()</snippet></ROW><ROW><id>15326764</id><snippet>Wedge</snippet></ROW><ROW><id>15326764</id><snippet>import matplotlib.pyplot as plt
from matplotlib.patches import Wedge

def main():
    fig, ax = plt.subplots()
    dual_half_circle((0.5, 0.5), radius=0.3, angle=90, ax=ax)
    ax.axis('equal')
    plt.show()

def dual_half_circle(center, radius, angle=0, ax=None, colors=('w','k'),
                     **kwargs):
    """
    Add two half circles to the axes *ax* (or the current axes) with the 
    specified facecolors *colors* rotated at *angle* (in degrees).
    """
    if ax is None:
        ax = plt.gca()
    theta1, theta2 = angle, angle + 180
    w1 = Wedge(center, radius, theta1, theta2, fc=colors[0], **kwargs)
    w2 = Wedge(center, radius, theta2, theta1, fc=colors[1], **kwargs)
    for wedge in [w1, w2]:
        ax.add_artist(wedge)
    return [w1, w2]

main()
</snippet></ROW><ROW><id>15326764</id><snippet>ax.transAxes</snippet></ROW><ROW><id>15326764</id><snippet>import matplotlib.pyplot as plt
from matplotlib.patches import Wedge

def main():
    fig, ax = plt.subplots()
    dual_half_circle(radius=0.1, angle=90, ax=ax)
    ax.axis('equal')
    plt.show()

def dual_half_circle(radius, angle=0, ax=None, colors=('w','k'), **kwargs):
    """
    Add two half circles to the axes *ax* (or the current axes) at the lower
    left corner of the axes with the specified facecolors *colors* rotated at
    *angle* (in degrees).
    """
    if ax is None:
        ax = plt.gca()
    kwargs.update(transform=ax.transAxes, clip_on=False)
    center = (0, 0)
    theta1, theta2 = angle, angle + 180
    w1 = Wedge(center, radius, theta1, theta2, fc=colors[0], **kwargs)
    w2 = Wedge(center, radius, theta2, theta1, fc=colors[1], **kwargs)
    for wedge in [w1, w2]:
        ax.add_artist(wedge)
    return [w1, w2]

main()
</snippet></ROW><ROW><id>15326795</id><snippet>#!/usr/local/bin/python2.7 
</snippet></ROW><ROW><id>15326795</id><snippet>chmod +x path_to_file/test.py
</snippet></ROW><ROW><id>15326795</id><snippet>exec('path_to_file/test.py');
</snippet></ROW><ROW><id>15327010</id><snippet>numberPolynomials = 3
F = {}
for n in range(1, numberPolynomials+1):
    F[n] = np.poly1d(f[n-1])
    F[(n, 2)] = np.polyder(F[n])
    print F[(n, 2)]
</snippet></ROW><ROW><id>15327010</id><snippet>F1</snippet></ROW><ROW><id>15327010</id><snippet>F2</snippet></ROW><ROW><id>15327010</id><snippet>F[1]</snippet></ROW><ROW><id>15327010</id><snippet>F[2]</snippet></ROW><ROW><id>15327010</id><snippet>F12</snippet></ROW><ROW><id>15327010</id><snippet>F22</snippet></ROW><ROW><id>15327010</id><snippet>F32</snippet></ROW><ROW><id>15327010</id><snippet>F[(1,2)]</snippet></ROW><ROW><id>15327010</id><snippet>F[(2,2)]</snippet></ROW><ROW><id>15327010</id><snippet>F[(3,2)]</snippet></ROW><ROW><id>15327010</id><snippet>import numpy as np
</snippet></ROW><ROW><id>15327042</id><snippet>class DummyObj(object):

    ...

    def __hash__(self):
        return (hash(self.myTuple) ^
                hash(tuple(self.myList)) ^
                hash(tuple(self.myDictionary.items())))
</snippet></ROW><ROW><id>15327042</id><snippet>p1 = DummyObj(t1, list1, d1)
p2 = DummyObj(t1, list1, d1)
mySet = set()
mySet.add(p1)

print "p1 in set", p1 in mySet
print "p2 in set", p2 in mySet
</snippet></ROW><ROW><id>15327042</id><snippet>$ python ~/settest.py 
p1 in set True
p2 in set True
</snippet></ROW><ROW><id>15327079</id><snippet>event = pygame.event.wait()</snippet></ROW><ROW><id>15327206</id><snippet>pxarray = pygame.PixelArray (surface)
</snippet></ROW><ROW><id>15327206</id><snippet>pxarray[x][y] = 0xFF00FF # this will set pixel at x,y to purple
</snippet></ROW><ROW><id>15327206</id><snippet>transform.scale</snippet></ROW><ROW><id>15327214</id><snippet>STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)
</snippet></ROW><ROW><id>15327214</id><snippet>TEMPLATE_CONTEXT_PROCESSORS = [
    ...
    'django.core.context_processors.static',
    ...
]
</snippet></ROW><ROW><id>15327214</id><snippet>from os.path import join, dirname, normpath

LOCAL_PATH = normpath(join(dirname(__file__), '..'))
</snippet></ROW><ROW><id>15327214</id><snippet># Additional locations of static files
STATICFILES_DIRS = (
    LOCAL_PATH + '/public/common/',
)
</snippet></ROW><ROW><id>15327214</id><snippet>MEDIA_ROOT = ''
MEDIA_URL = ''

STATIC_ROOT = '/uploaded/'
STATIC_URL = '/static/'

# Additional locations of static files
STATICFILES_DIRS = (
    LOCAL_PATH + '/public/common/',
)

    # List of finder classes that know how to find static files in
# various locations.
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
#    'django.contrib.staticfiles.finders.DefaultStorageFinder',
)
</snippet></ROW><ROW><id>15327214</id><snippet>'django.contrib.staticfiles',
</snippet></ROW><ROW><id>15327442</id><snippet>grant_type</snippet></ROW><ROW><id>15327442</id><snippet>refresh_token</snippet></ROW><ROW><id>15327442</id><snippet>https://www.googleapis.com/fusiontables/v1/query?sql=STATEMENT_HERE</snippet></ROW><ROW><id>15327442</id><snippet>urllib2</snippet></ROW><ROW><id>15327442</id><snippet>requests</snippet></ROW><ROW><id>15327442</id><snippet>httplib</snippet></ROW><ROW><id>15327442</id><snippet>query = "INSERT INTO %s(EXAMPLE_COL1,EXAMPLE_COL2) VALUES"\
        "('EXAMPLE_INFO1','EXAMPLE_INFO2')" % table_id # Single quotes
opener = urllib2.build_opener(urllib2.HTTPHandler)
request = urllib2.Request('https://www.google.com/fusiontables/api/query?%s' % \
    (urllib.urlencode({'access_token': access_token,
                       'sql': query})),
    headers={'Content-Length':0})      # Manually set length to avoid 411 error
request.get_method = lambda: 'POST'    # Change HTTP request method
response = opener.open(request).read()
print response
</snippet></ROW><ROW><id>15327442</id><snippet>HTTP Error 400: HTTP GET can only be used for SELECT queries</snippet></ROW><ROW><id>15327442</id><snippet>Content-Length</snippet></ROW><ROW><id>15327442</id><snippet>0</snippet></ROW><ROW><id>15327442</id><snippet>HTTP Error 411: Length Required</snippet></ROW><ROW><id>15327442</id><snippet>"INSERT INTO %s(EXAMPLE_COL1,EXAMPLE_COL2) VALUES(EXAMPLE_INFO1,EXAMPLE_INFO2)" % table_id</snippet></ROW><ROW><id>15327442</id><snippet>HTTP Error 400: Parse error near 'SOME_STRING' (line X, position Y)</snippet></ROW><ROW><id>15327777</id><snippet>indexDict[word] = [count]
</snippet></ROW><ROW><id>15327777</id><snippet>indexDict[word] = indexDict.setdefault(word, []) + [count]
</snippet></ROW><ROW><id>15327779</id><snippet>export MYAPP_DB_USER='myapp'
export MYAPP_DB_PASSWORD='testing123'
</snippet></ROW><ROW><id>15327779</id><snippet>DATABASE_USER = os.environ.get("MYAPP_DB_USER", '')
DATABASE_PASSWORD = os.environ.get("MYAPP_DB_PASSWORD", '')
</snippet></ROW><ROW><id>15327963</id><snippet>main()</snippet></ROW><ROW><id>15327963</id><snippet>secA = 20
secB = 15
secC = 10
</snippet></ROW><ROW><id>15327963</id><snippet>getTickets()</snippet></ROW><ROW><id>15327963</id><snippet>def getTickets():

    global A
    A = int(input("Please enter the number of tickets sold in section A: "))

    global B
    B =int(input("Please enter the number of tickets sold in section B: "))

    global C
    C =int(input("Please enter the number of tickets sold in section C: "))
</snippet></ROW><ROW><id>15327963</id><snippet>global</snippet></ROW><ROW><id>15327963</id><snippet>int()</snippet></ROW><ROW><id>15327963</id><snippet>input()</snippet></ROW><ROW><id>15327963</id><snippet>ticketsValid()</snippet></ROW><ROW><id>15327963</id><snippet>def ticketsValid(A,B,C):
    while A &gt; 300 or A &lt; 0:
        print("ERROR: Section A has a limit of 300 seats\n")
        A = int(input("Please enter the number of tickets sold in section A: "))
    while B &gt; 500 or B &lt; 0:
        print("ERROR: Section B has a limit of 500 seats")
        B =int(input("Please enter the number of tickets sold in section B: "))
    while C &gt; 200 or C &lt; 0:
        print("ERROR: Section C has a limit of 200 seats")
        C =int(input("Please enter the number of tickets sold in section C: "))
</snippet></ROW><ROW><id>15327963</id><snippet>calcIncome(A,B,C)</snippet></ROW><ROW><id>15327963</id><snippet>def calcIncome(A, B, C):
    total = A * secA + B * secB + C * secC
    print ("The income generated is $%d" % (total))
</snippet></ROW><ROW><id>15327963</id><snippet>def main():
    getTickets()
    ticketsValid(A,B,C)
    calcIncome(A, B, C)
</snippet></ROW><ROW><id>15327963</id><snippet>main()</snippet></ROW><ROW><id>15327963</id><snippet>main()
</snippet></ROW><ROW><id>15328016</id><snippet>matplotlib.animation.Animation</snippet></ROW><ROW><id>15328016</id><snippet>__init__()</snippet></ROW><ROW><id>15328016</id><snippet># Clear the initial frame
self._init_draw()

# Instead of starting the event source now, we connect to the figure's
# draw_event, so that we only start once the figure has been drawn.
self._first_draw_id = fig.canvas.mpl_connect('draw_event', self._start)
</snippet></ROW><ROW><id>15328016</id><snippet>self._init_draw()</snippet></ROW><ROW><id>15328016</id><snippet>Local variable '...' is assigned to but never used</snippet></ROW><ROW><id>15328016</id><snippet>FuncAnimation</snippet></ROW><ROW><id>15328016</id><snippet>anim = FuncAnimation(fig=fig,
                     func=update_lines,
                     frames=make_data,
                     fargs=(lines,),
                     interval=10,
                     blit=False)
</snippet></ROW><ROW><id>15328306</id><snippet>import string

def Coder(shift):
    alpha = string.ascii_lowercase
    ALPHA = string.ascii_uppercase
    if 0 &lt;= shift &lt; 26:
        unshifted_letters = ALPHA + alpha
        shifted_letters = ALPHA[shift:] + ALPHA[:shift] + alpha[shift:] + alpha[:shift]
        return dict(zip(unshifted_letters, shifted_letters))
</snippet></ROW><ROW><id>15328306</id><snippet>encode('rot13')</snippet></ROW><ROW><id>15328306</id><snippet>string.maketrans</snippet></ROW><ROW><id>15328508</id><snippet>get_position</snippet></ROW><ROW><id>15328508</id><snippet>self.board</snippet></ROW><ROW><id>15328508</id><snippet>self.get_position</snippet></ROW><ROW><id>15328508</id><snippet>__init__</snippet></ROW><ROW><id>15328508</id><snippet>self.board</snippet></ROW><ROW><id>15328508</id><snippet>0</snippet></ROW><ROW><id>15328508</id><snippet>None</snippet></ROW><ROW><id>15328508</id><snippet>get_position</snippet></ROW><ROW><id>15328508</id><snippet>self.board[row*7+column]</snippet></ROW><ROW><id>15328508</id><snippet>play_turn</snippet></ROW><ROW><id>15328508</id><snippet>self.board</snippet></ROW><ROW><id>15328508</id><snippet>print_board</snippet></ROW><ROW><id>15328508</id><snippet>get_position</snippet></ROW><ROW><id>15328597</id><snippet>x=linspace(0,10,100)
H0 = 71
omegas = [1.01,1.1,1.5,2.0,3.0]
rcs = [0.5*(omega0/(omega0-1))*(1-cos(x)) for omega0 in omegas]
tcs = [(0.5/H0)*(omega0/(omega0-1)**(3/2))*(x-sin(x)) for omega0 in omegas]
for pair in zip(tcs,rcs):
    plot(pair[0],pair[1])
show()
</snippet></ROW><ROW><id>15328767</id><snippet>sum_1 = sum_1 + i*3,  # &lt; no comma needed there
</snippet></ROW><ROW><id>15328767</id><snippet>&gt;&gt;&gt; 2,
(2,)
</snippet></ROW><ROW><id>15328768</id><snippet>import pandas as pd
import pylab as pl

df1 = pd.DataFrame([[0.0,0.0],[1.0,1.0],[2.0,2.0],[4.0,3.0]],columns=['x','y1'])
df2 = pd.DataFrame([[0.0,0.0],[0.5,1.9],[1.5,2.0],[3.0,3.0],[4.0,4.0]],columns=['x','y2'])
x = np.union1d(df1.x, df2.x)
y1 = np.interp(x, df1.x, df1.y1)
y2 = np.interp(x, df2.x, df2.y2)
pl.plot(x, y1, "-o")
pl.plot(x, y2, "-o")
</snippet></ROW><ROW><id>15328771</id><snippet>python -m SimpleHTTPServer
</snippet></ROW><ROW><id>15328771</id><snippet>python -m SimpleHTTPServer 80
</snippet></ROW><ROW><id>15328795</id><snippet>print list(words)
</snippet></ROW><ROW><id>15328795</id><snippet>str.join()</snippet></ROW><ROW><id>15328795</id><snippet>print ', '.join(words)
</snippet></ROW><ROW><id>15328841</id><snippet>import "DPI" function void do_http(...)
</snippet></ROW><ROW><id>15328851</id><snippet>new_list = [[element or '0.00' for element in sublist] for sublist in big_list]
</snippet></ROW><ROW><id>15328957</id><snippet>collections.deque</snippet></ROW><ROW><id>15328957</id><snippet>&gt;&gt;&gt; from collections import deque
&gt;&gt;&gt; d = deque(maxlen=2)
&gt;&gt;&gt; d.append(3)
&gt;&gt;&gt; d.append(4)
&gt;&gt;&gt; d.append(5)
&gt;&gt;&gt; d
    deque([4, 5], maxlen=2)
</snippet></ROW><ROW><id>15328983</id><snippet>print(row)
</snippet></ROW><ROW><id>15328983</id><snippet>for cell in row:
    print cell
</snippet></ROW><ROW><id>15329033</id><snippet>w</snippet></ROW><ROW><id>15329272</id><snippet>{m,n}</snippet></ROW><ROW><id>15329272</id><snippet>m=0</snippet></ROW><ROW><id>15329272</id><snippet>n=2</snippet></ROW><ROW><id>15329272</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = "(?P&lt;chord&gt;[A-G])((?P&lt;accidental&gt;#|b)|(?P&lt;additional&gt;m)){0,2}"
&gt;&gt;&gt; re.match(regex, "Gm").groupdict()
{'chord': 'G', 'additional': 'm', 'accidental': None}
&gt;&gt;&gt; re.match(regex, "G").groupdict()
{'chord': 'G', 'additional': None, 'accidental': None}
&gt;&gt;&gt; re.match(regex, "G#m").groupdict()
{'chord': 'G', 'additional': 'm', 'accidental': '#'}
&gt;&gt;&gt; re.match(regex, "Gm#").groupdict()
{'chord': 'G', 'additional': 'm', 'accidental': '#'}
</snippet></ROW><ROW><id>15329304</id><snippet>requirements.txt</snippet></ROW><ROW><id>15329304</id><snippet>Flask==0.9
Jinja2==2.6
Werkzeug==0.8.3
distribute==0.6.27
wsgiref==0.1.2

Flask-Cache==0.10.0

gunicorn==0.17.2
</snippet></ROW><ROW><id>15329304</id><snippet>pip</snippet></ROW><ROW><id>15329304</id><snippet>$ pip freeze &gt; requirements.txt
</snippet></ROW><ROW><id>15329340</id><snippet>read</snippet></ROW><ROW><id>15329340</id><snippet>readlines</snippet></ROW><ROW><id>15329418</id><snippet>node</snippet></ROW><ROW><id>15329418</id><snippet>cansend</snippet></ROW><ROW><id>15329418</id><snippet>Node</snippet></ROW><ROW><id>15329418</id><snippet>operatingMode</snippet></ROW><ROW><id>15329418</id><snippet>property</snippet></ROW><ROW><id>15329418</id><snippet>class Node(object):
    def __init__(self, nodeID, busID, operatingMode)
        self.nodeID = nodeID
        self.busID = busID
        self.operatingMode = operatingMode

    @property
    def operatingMode(self):
        return self._operatingMode

    @operatingMode.setter
    def operatingMode(self, mode):
        self._operatingMode = mode
        cansend(self.nodeID, self.busID, mode)
</snippet></ROW><ROW><id>15329418</id><snippet>operatingMode</snippet></ROW><ROW><id>15329418</id><snippet>Node</snippet></ROW><ROW><id>15329418</id><snippet>Node</snippet></ROW><ROW><id>15329418</id><snippet>cansend</snippet></ROW><ROW><id>15329562</id><snippet>range(0, 5)</snippet></ROW><ROW><id>15329562</id><snippet>0, 1, 2, 3, 4</snippet></ROW><ROW><id>15329562</id><snippet>range(6)</snippet></ROW><ROW><id>15329562</id><snippet>thetamap = np.arange(6) + np.arange(6)[:,None]
</snippet></ROW><ROW><id>15329592</id><snippet>optimize</snippet></ROW><ROW><id>15329592</id><snippet>__debug__ == True</snippet></ROW><ROW><id>15329592</id><snippet>PYTHONOPTIMIZE</snippet></ROW><ROW><id>15329592</id><snippet>debug = __debug__ and not hasattr(sys, 'frozen')
</snippet></ROW><ROW><id>15329614</id><snippet>CNAME</snippet></ROW><ROW><id>15329614</id><snippet>s3.amazonaws.com</snippet></ROW><ROW><id>15329614</id><snippet>http://subdomain.domain.com/your_object_here</snippet></ROW><ROW><id>15329614</id><snippet>s3.amazonaws.com</snippet></ROW><ROW><id>15329614</id><snippet>bucket_name_here.s3.amazonaws.com</snippet></ROW><ROW><id>15329703</id><snippet>if Enter == "Yes" or "yes":
</snippet></ROW><ROW><id>15329703</id><snippet>or</snippet></ROW><ROW><id>15329703</id><snippet>if (Enter == "Yes") or "yes":</snippet></ROW><ROW><id>15329703</id><snippet>if</snippet></ROW><ROW><id>15329703</id><snippet>if Enter.lower() == "yes":
</snippet></ROW><ROW><id>15329748</id><snippet>lst</snippet></ROW><ROW><id>15329748</id><snippet>import random
random.shuffle(lst)
</snippet></ROW><ROW><id>15329748</id><snippet>question = lst.pop()
</snippet></ROW><ROW><id>15329763</id><snippet>firstRow</snippet></ROW><ROW><id>15329763</id><snippet>firstRow = dict.fromkeys('qwertyuiop', 1)
</snippet></ROW><ROW><id>15329763</id><snippet>keys = {}
keys.update(dict.fromkeys('qwertyuiop', 1))
keys.update(dict.fromkeys('asdfghjkl', 2))
keys.update(dict.fromkeys('zxcvbnm,', 3))
</snippet></ROW><ROW><id>15329763</id><snippet>rows = {1: 'qwertyuiop', 0: 'asdfghjkl;', 2: 'zxcvbnm,.'}
keys = {c:k for k,row in rows.iteritems() for c in row}
</snippet></ROW><ROW><id>15329844</id><snippet>zip</snippet></ROW><ROW><id>15329844</id><snippet>[
    [my_operation(x,y) for x,y in zip(xs, ys)]
    for xs, ys in zip(a, b)
]
</snippet></ROW><ROW><id>15329844</id><snippet>[
    [[regex(p, s) for p in patterns] for s in strings]
    for strings, patterns in zip(a, b)
]
</snippet></ROW><ROW><id>15329965</id><snippet>+</snippet></ROW><ROW><id>15329965</id><snippet>import subprocess as sp
deborphan_results = sp.check_output(â¦)
deborphan_results = deborphan_results.splitlines()
subprocess.call(["aptitude", "purge"] + deborphan_results + ["-y"])
</snippet></ROW><ROW><id>15329965</id><snippet>proc = sp.Popen(â¦, stdout=sp.PIPE); deborphan_results, _ = proc.communicate()</snippet></ROW><ROW><id>15330108</id><snippet>$ python
Python 2.7.3 (default, Sep 26 2012, 21:51:14) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from gps import gps
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15330108</id><snippet>/usr/lib/pyshared/python2.7/gps/packet.so
/usr/lib/pyshared/python2.7/gps/clienthelpers.so
/usr/lib/python2.7/dist-packages/gps-3.6.egg-info
/usr/lib/python2.7/dist-packages/gps/misc.py
/usr/lib/python2.7/dist-packages/gps/client.py
/usr/lib/python2.7/dist-packages/gps/fake.py
/usr/lib/python2.7/dist-packages/gps/__init__.py
/usr/lib/python2.7/dist-packages/gps/gps.py
</snippet></ROW><ROW><id>15330108</id><snippet>dpkg -L python-gps
</snippet></ROW><ROW><id>15330108</id><snippet>gps.py</snippet></ROW><ROW><id>15330250</id><snippet>berries = 'strawberries, bilberry, blackberry'
</snippet></ROW><ROW><id>15330250</id><snippet>for</snippet></ROW><ROW><id>15330250</id><snippet>form.custom.widget[key]</snippet></ROW><ROW><id>15330250</id><snippet>None</snippet></ROW><ROW><id>15330250</id><snippet>berries = 'strawberries', 'bilberry', 'blackberry'
</snippet></ROW><ROW><id>15330470</id><snippet>def nDigits(i):
    return len(str(i))
results = []
for i in xrange(1000000):
    results.append(nDigits(i))
print len(results)
</snippet></ROW><ROW><id>15330470</id><snippet>xrange</snippet></ROW><ROW><id>15330470</id><snippet>range</snippet></ROW><ROW><id>15330470</id><snippet>0</snippet></ROW><ROW><id>15330470</id><snippet>def nDigits(i):
    return len(str(i))
results = [nDigits(i) for i in xrange(1000000)]
print len(results)
</snippet></ROW><ROW><id>15330470</id><snippet>results = [len(str(i)) for i in xrange(1000000)]
print len(results)
</snippet></ROW><ROW><id>15330614</id><snippet>"processes"</snippet></ROW><ROW><id>15330614</id><snippet>"calls"</snippet></ROW><ROW><id>15330614</id><snippet>for proc in object ['processes']:
    for call in proc ['calls']:
        if call ['api'] == "interesting":
            fname = None
            for arg in call ['arguments']:
                if arg ['name'] == "FileName":
                    fname = arg ['value']
</snippet></ROW><ROW><id>15330614</id><snippet>fname</snippet></ROW><ROW><id>15330625</id><snippet>1-2-3-...-n</snippet></ROW><ROW><id>15330625</id><snippet>1-dimensional</snippet></ROW><ROW><id>15330625</id><snippet>('element',)</snippet></ROW><ROW><id>15330625</id><snippet>('element')</snippet></ROW><ROW><id>15330625</id><snippet>(3) + 4 == 7</snippet></ROW><ROW><id>15330625</id><snippet>(3,) + 4 == TypeError</snippet></ROW><ROW><id>15330625</id><snippet>('element') == 'element'.</snippet></ROW><ROW><id>15330648</id><snippet>class YourItem(Item):
    sponsors = Field()
</snippet></ROW><ROW><id>15330648</id><snippet>item['sponsors'] = xpath.select('//sponsors/sponsor/text()').extract()
</snippet></ROW><ROW><id>15330863</id><snippet>from nltk.corpus import wordnet as wn
vehicle = wn.synset('vehicle.n.01')
typesOfVehicles = list(set([w for s in vehicle.closure(lambda s:s.hyponyms()) for w in s.lemma_names]))
</snippet></ROW><ROW><id>15331018</id><snippet>in</snippet></ROW><ROW><id>15331018</id><snippet>__contains__</snippet></ROW><ROW><id>15331018</id><snippet>str</snippet></ROW><ROW><id>15331018</id><snippet>list</snippet></ROW><ROW><id>15331018</id><snippet>tuple</snippet></ROW><ROW><id>15331018</id><snippet>O(N)</snippet></ROW><ROW><id>15331018</id><snippet>set</snippet></ROW><ROW><id>15331018</id><snippet>dict</snippet></ROW><ROW><id>15331018</id><snippet>O(1)</snippet></ROW><ROW><id>15331018</id><snippet>O(log N)</snippet></ROW><ROW><id>15331019</id><snippet>def iconToQImage(hIcon):
    hdc = win32ui.CreateDCFromHandle(win32gui.GetDC(0))
    hbmp = win32ui.CreateBitmap()
    hbmp.CreateCompatibleBitmap(hdc, hIcon.width, hIcon.height)
    hdc = hdc.CreateCompatibleDC()
    hdc.SelectObject(hbmp)

    win32gui.DrawIconEx(hdc.GetHandleOutput(), 0, 0, hIcon.hIcon, hIcon.width, hIcon.height, 0, None, 0x0003)

    bitmapbits = hbmp.GetBitmapBits(True)
    image = QtGui.QImage(bitmapbits, hIcon.width, hIcon.height, QtGui.QImage.Format_ARGB32_Premultiplied)
    return image
</snippet></ROW><ROW><id>15331330</id><snippet>from jinja2 import Template

ts = """
{% for game, gameSlots in assignedGameSlotsInMyGames.iteritems() %}
{% for gameSlot2 in gameSlots %}
&lt;tr&gt;
&lt;td&gt; {{gameSlot2.user.email}} &lt;/td&gt;
&lt;td&gt; {{gameSlot2.gameCharacter.characterType}} &lt;/td&gt;
&lt;/tr&gt;
{% endfor %}
{% endfor %}
"""

t = Template(ts)

d = {'assignedGameSlotsInMyGames':
     {'game1': [{'user': {'email': 'a@a.ru'},
                 'gameCharacter':{'characterType':'testCharacterType1'}},
                {'user': {'email': 'b@b.ru'},
                 'gameCharacter':{'characterType':'testCharacterType2'}}],
      'game2': [{'user': {'email': 'a2@a.ru'},
                 'gameCharacter':{'characterType':'testCharacterType12'}},
                {'user': {'email': 'b2@b.ru'},
                 'gameCharacter':{'characterType':'testCharacterType22'}}]
     }
}

print t.render(d)
</snippet></ROW><ROW><id>15331330</id><snippet>&lt;tr&gt;
&lt;td&gt; a2@a.ru &lt;/td&gt;
&lt;td&gt; testCharacterType12 &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt; b2@b.ru &lt;/td&gt;
&lt;td&gt; testCharacterType22 &lt;/td&gt;
&lt;/tr&gt;



&lt;tr&gt;
&lt;td&gt; a@a.ru &lt;/td&gt;
&lt;td&gt; testCharacterType1 &lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt; b@b.ru &lt;/td&gt;
&lt;td&gt; testCharacterType2 &lt;/td&gt;
&lt;/tr&gt;
</snippet></ROW><ROW><id>15331330</id><snippet>{% if gameSlot.game.name == game.name %}</snippet></ROW><ROW><id>15331330</id><snippet>ts = """
{% for g in games %}
    {% for v in ags[g.game]%}
        {{ v }}
    {% endfor %}
{% endfor %}
"""

d = {
      'games':[{'game':'A'},
           {'game':'B'},
           {'game':'C'}],
      'ags':{'A':['ONE','TWO','THREE'],'B':['1','2','3']}
}

t = Template(ts)
print t.render(d)
</snippet></ROW><ROW><id>15331330</id><snippet>ONE

TWO

THREE



1

2

3
</snippet></ROW><ROW><id>15331619</id><snippet>&gt;&gt;&gt; x = [1, 2, 3]
&gt;&gt;&gt; y = [4, 5, 6]
&gt;&gt;&gt; zipped = zip(x, y)
&gt;&gt;&gt; zipped
[(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>15331619</id><snippet>zipped = zip(points, permission)
for i, j in zipped:
    print i, j 
</snippet></ROW><ROW><id>15331841</id><snippet>partial</snippet></ROW><ROW><id>15331841</id><snippet>def partial(func, *part_args):
    def wrapper(*extra_args):
        args = list(part_args)
        args.extend(extra_args)
        return func(*args)

    return wrapper
</snippet></ROW><ROW><id>15331841</id><snippet>partial(sum2, 4)</snippet></ROW><ROW><id>15331841</id><snippet>sum2</snippet></ROW><ROW><id>15331841</id><snippet>4</snippet></ROW><ROW><id>15331841</id><snippet>partial(sum2, 4)(2) == sum2(4, 2)</snippet></ROW><ROW><id>15331841</id><snippet>class EventNotifier(object):
    def __init__(self):
        self._listeners = []

    def add_listener(self, callback):
        ''' callback should accept two positional arguments, event and params '''
        self._listeners.append(callback)
        # ...

    def notify(self, event, *params):
        for f in self._listeners:
            f(event, params)
</snippet></ROW><ROW><id>15331841</id><snippet>context</snippet></ROW><ROW><id>15331841</id><snippet>def log_event(context, event, params):
    context.log_event("Something happened %s, %s", event, params)
</snippet></ROW><ROW><id>15331841</id><snippet>class Listener(object):
   def __init__(self, context):
       self._context = context

   def __call__(self, event, params):
       self._context.log_event("Something happened %s, %s", event, params)


 notifier.add_listener(Listener(context))
</snippet></ROW><ROW><id>15331841</id><snippet>log_listener = lambda event, params: log_event(context, event, params)
notifier.add_listener(log_listener)
</snippet></ROW><ROW><id>15331841</id><snippet>context = get_context()  # whatever
notifier.add_listener(partial(log_event, context))
</snippet></ROW><ROW><id>15331841</id><snippet>partial</snippet></ROW><ROW><id>15331880</id><snippet>main</snippet></ROW><ROW><id>15331978</id><snippet>{|</snippet></ROW><ROW><id>15331978</id><snippet>|}</snippet></ROW><ROW><id>15331978</id><snippet>site=urllib2.urlopen(url1) 
a=site.read()
c1=a.find('{|')
c2=a.find('|}')
c=c1
while(c&lt;c2):
    print a[c]
    c+=1
</snippet></ROW><ROW><id>15332279</id><snippet>/var/run/memcached.pid</snippet></ROW><ROW><id>15332279</id><snippet>subprocess</snippet></ROW><ROW><id>15332279</id><snippet>pidof memcached</snippet></ROW><ROW><id>15332279</id><snippet>subprocess</snippet></ROW><ROW><id>15332433</id><snippet>csv</snippet></ROW><ROW><id>15332433</id><snippet>data.csv</snippet></ROW><ROW><id>15332433</id><snippet>FIELDS</snippet></ROW><ROW><id>15332433</id><snippet>import csv

ID = 'state'
FIELDS = ['car', 'motorcycle', 'van', 'airplane', 'bike']
MIN_ID, MIN, MAX_ID, MAX = 0, 1, 2, 3  # indices of data in min_maxes records

with open('data.csv', 'rb') as csv_file:
    csv_dict_reader = csv.DictReader(csv_file, delimiter=',')

    # initialize min and max values from first row of csv file
    row = csv_dict_reader.next()
    min_maxes = {field: [row[ID], float(row[field])]*2 for field in FIELDS}

    # update min and max values with data from remaining rows of csv file
    for row in csv_dict_reader:
        for id, value, min_max_rec in (
                (row[ID], float(row[field]), min_maxes[field]) for field in FIELDS):
            if value &lt; min_max_rec[MIN]:
                min_max_rec[MIN_ID] = id
                min_max_rec[MIN]    = value
            if value &gt; min_max_rec[MAX]:
                min_max_rec[MAX_ID] = id
                min_max_rec[MAX]    = value

print '                   min                  max'
for field in FIELDS:
    min_max_rec = min_maxes[field]
    print '{:10}    {:12}{:4.1f}      {:12}{:4.1f}'.format(field,
              min_max_rec[MIN_ID]+':', min_max_rec[MIN],
              min_max_rec[MAX_ID]+':', min_max_rec[MAX])
</snippet></ROW><ROW><id>15332433</id><snippet>data.csv</snippet></ROW><ROW><id>15332433</id><snippet>state,car,motorcycle,van,airplane,bike
Maine,35.5,8.1,5.7,21.0,33.2
Michigan,47.9,9.1,5.5,20.40,25.2
Washington,52.5,1.2,4.6,3.,24.7
Denver,21.8,20.5,5.3,2.90,30.9
</snippet></ROW><ROW><id>15332433</id><snippet>                   min                  max
car           Denver:     21.8      Washington: 52.5
motorcycle    Washington:  1.2      Denver:     20.5
van           Washington:  4.6      Maine:       5.7
airplane      Denver:      2.9      Maine:      21.0
bike          Washington: 24.7      Maine:      33.2
</snippet></ROW><ROW><id>15332577</id><snippet>__SummaryInfo__</snippet></ROW><ROW><id>15332577</id><snippet>sum</snippet></ROW><ROW><id>15332577</id><snippet>num</snippet></ROW><ROW><id>15332577</id><snippet>sum</snippet></ROW><ROW><id>15332577</id><snippet>num</snippet></ROW><ROW><id>15332577</id><snippet>DEF:sum=nameOfYour.rrd:sum:AVERAGE  
DEF:num=nameOfYour.rrd:num:AVERAGE 
CDEF:average=sum,num,/ 
</snippet></ROW><ROW><id>15332925</id><snippet>If x,y are strings over some alphabet,

then xy = yx if and only if x = z^k and y = z^l for some string z and integers k,l.
</snippet></ROW><ROW><id>15332925</id><snippet>def powercheck(lst):
    count = 0
    position = 0
    for pos in KnuthMorrisPratt(double(lst), lst):
        count += 1
        position = pos
        if count == 2:
            break

    return lst[:position]


def double(lst):
    for i in range(1,3):
        for elem in lst:
            yield elem

def main():
    print powercheck([1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1])

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>15332925</id><snippet># Knuth-Morris-Pratt string matching
# David Eppstein, UC Irvine, 1 Mar 2002

def KnuthMorrisPratt(text, pattern):

    '''Yields all starting positions of copies of the pattern in the text.
Calling conventions are similar to string.find, but its arguments can be
lists or iterators, not just strings, it returns all matches, not just
the first one, and it does not need the whole text in memory at once.
Whenever it yields, it will have read the text exactly up to and including
the match that caused the yield.'''

    # allow indexing into pattern and protect against change during yield
    pattern = list(pattern)

    # build table of shift amounts
    shifts = [1] * (len(pattern) + 1)
    shift = 1
    for pos in range(len(pattern)):
        while shift &lt;= pos and pattern[pos] != pattern[pos-shift]:
            shift += shifts[pos-shift]
        shifts[pos+1] = shift

    # do the actual search
    startPos = 0
    matchLen = 0
    for c in text:
        while matchLen == len(pattern) or \
              matchLen &gt;= 0 and pattern[matchLen] != c:
            startPos += shifts[matchLen]
            matchLen -= shifts[matchLen]
        matchLen += 1
        if matchLen == len(pattern):
            yield startPos
</snippet></ROW><ROW><id>15332925</id><snippet>[1,0,1,1]
</snippet></ROW><ROW><id>15332925</id><snippet>1362988461.75

(50, [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1])

1362988465.96

50 [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1]

1362988487.14
</snippet></ROW><ROW><id>15332925</id><snippet>def rand_bitstring(n):
    rand = random.SystemRandom()
    lst = []
    for j in range(1, n+1):
        r = rand.randint(1,2)
        if r == 2:
            lst.append(0)
        else:
            lst.append(1)

    return lst

def main():
    lst = rand_bitstring(50)*200000
    print time.time()
    print powercheck(lst)
    print time.time()
    powercheck2(lst)
    print time.time()
</snippet></ROW><ROW><id>15333196</id><snippet>SVN = Popen('which svn 2&gt;&amp;1', shell=True, stdout=PIPE).communicate()[0]
str="if [[ ! -x " + SVN + " ]]; then echo 'svn could not be found or executed'; fi"
Popen(str, shell=True)
</snippet></ROW><ROW><id>15333415</id><snippet>request.session</snippet></ROW><ROW><id>15333415</id><snippet>SessionBase</snippet></ROW><ROW><id>15333415</id><snippet>_session</snippet></ROW><ROW><id>15333415</id><snippet>request.session[key]</snippet></ROW><ROW><id>15333415</id><snippet>if request.session._session:
    # do something
</snippet></ROW><ROW><id>15333415</id><snippet>if request.session.keys():
    # do something
</snippet></ROW><ROW><id>15333415</id><snippet>.keys()</snippet></ROW><ROW><id>15333415</id><snippet>class SessionBase(object):
    # some code

    def keys(self):
        return self._session.keys()

    # some code
</snippet></ROW><ROW><id>15333750</id><snippet>text =  # Set you're input unicode string here.
words = re.findall('[\p{IsCyrillic}][0-9\p{IsCyrillic}]+', text)

for word in words:
    print word
</snippet></ROW><ROW><id>15334482</id><snippet>&gt;&gt;&gt; def f(x):
    return x*2

&gt;&gt;&gt; f(3)
6
</snippet></ROW><ROW><id>15334482</id><snippet>:</snippet></ROW><ROW><id>15334482</id><snippet>.py</snippet></ROW><ROW><id>15334534</id><snippet>john.save()</snippet></ROW><ROW><id>15334534</id><snippet>john</snippet></ROW><ROW><id>15334863</id><snippet># gotcha|pitfall: my original idea, but this generates a list of 1-tuples:
# x = [struct.unpack("b",a) for a in charlist]

fmt = "%ib"%len(charlist) # eg. "5b", if charlist's length is 5
x = struct.unpack(fmt,charlist) # tuple of ints
</snippet></ROW><ROW><id>15334932</id><snippet>lambda</snippet></ROW><ROW><id>15334932</id><snippet>[lambda: random.normalvariate(3.0, 2.0), lambda: random.normalvariate(1.0, 4.0)]
</snippet></ROW><ROW><id>15334932</id><snippet>sin</snippet></ROW><ROW><id>15334932</id><snippet>sin(x)</snippet></ROW><ROW><id>15334932</id><snippet>random.normalvariate(1.0, 4.0)</snippet></ROW><ROW><id>15335530</id><snippet>def suite():
    suite = unittest.TestSuite()
    suite.addTest(unittest.makeSuite(TestMyUnit, 'test'))
    return suite
</snippet></ROW><ROW><id>15335530</id><snippet>from TestUnits import test_something

def suite():
    suite = unittest.TestSuite()
    suite.addTest(test_something.suite())
    return suite

if __name__ == '__main__':
    unittest.main(defaultTest='suite')
</snippet></ROW><ROW><id>15335734</id><snippet>cursor.execute( "SELECT password FROM peerlist WHERE username=?", (username1,))
</snippet></ROW><ROW><id>15335734</id><snippet>.execute()</snippet></ROW><ROW><id>15335734</id><snippet>len(username1)</snippet></ROW><ROW><id>15335909</id><snippet>for key,value in item.items:
</snippet></ROW><ROW><id>15335909</id><snippet>dict.items()</snippet></ROW><ROW><id>15335909</id><snippet>item.items</snippet></ROW><ROW><id>15335909</id><snippet>for key,value in item.items():
</snippet></ROW><ROW><id>15336002</id><snippet>dis</snippet></ROW><ROW><id>15336002</id><snippet>&gt;&gt;&gt; def foo():
...     somedict = {}
...     somedict['bar'] = 'spam'
... 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(foo)
  2           0 BUILD_MAP                0
              3 STORE_FAST               0 (somedict)

  3           6 LOAD_CONST               1 ('spam')
              9 LOAD_FAST                0 (somedict)
             12 LOAD_CONST               2 ('bar')
             15 STORE_SUBSCR        
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE        
</snippet></ROW><ROW><id>15336002</id><snippet>somedict['bar'] = spam</snippet></ROW><ROW><id>15336002</id><snippet>somedict</snippet></ROW><ROW><id>15336002</id><snippet>'bar'</snippet></ROW><ROW><id>15336002</id><snippet>'spam'</snippet></ROW><ROW><id>15336002</id><snippet>STORE_SUBSCR</snippet></ROW><ROW><id>15336002</id><snippet>thread.thread_ident()</snippet></ROW><ROW><id>15336002</id><snippet>threading</snippet></ROW><ROW><id>15336002</id><snippet>_active</snippet></ROW><ROW><id>15336685</id><snippet>x &lt; y &lt;= z</snippet></ROW><ROW><id>15336685</id><snippet>x &lt; y and y &lt;= z</snippet></ROW><ROW><id>15336685</id><snippet>y</snippet></ROW><ROW><id>15336685</id><snippet>z</snippet></ROW><ROW><id>15336685</id><snippet>x &lt; y</snippet></ROW><ROW><id>15336685</id><snippet>9 in list == False</snippet></ROW><ROW><id>15336685</id><snippet>(9 in list) == False</snippet></ROW><ROW><id>15336685</id><snippet>(9 in list) and (list == False)</snippet></ROW><ROW><id>15336685</id><snippet>not in</snippet></ROW><ROW><id>15336685</id><snippet>list</snippet></ROW><ROW><id>15336685</id><snippet>if 9 not in lst:
</snippet></ROW><ROW><id>15336687</id><snippet>def chooseOneServer():
    dara = websvc()
    i=0
    servers = []
    for item in dara:
        for key,value in item.items() :
            if key == '1':
                servers.append(('i',value))
                i += 1
    return servers
</snippet></ROW><ROW><id>15336882</id><snippet>.getRect</snippet></ROW><ROW><id>15336882</id><snippet>.Intersects(self, otherRect)</snippet></ROW><ROW><id>15336949</id><snippet>$(DESTDIR)/usr/lib/pythonX.Y/dist-packages/mymodule*
</snippet></ROW><ROW><id>15336949</id><snippet>/usr/share/pyshared/mymodule*
</snippet></ROW><ROW><id>15337035</id><snippet>any()</snippet></ROW><ROW><id>15337035</id><snippet>if any(search_1 in col for col in line):
</snippet></ROW><ROW><id>15337035</id><snippet>csv.reader()</snippet></ROW><ROW><id>15337035</id><snippet>for col in line</snippet></ROW><ROW><id>15337035</id><snippet>search_1</snippet></ROW><ROW><id>15337035</id><snippet>search_1 in col</snippet></ROW><ROW><id>15337035</id><snippet>any()</snippet></ROW><ROW><id>15337035</id><snippet>search_1 in col</snippet></ROW><ROW><id>15337035</id><snippet>True</snippet></ROW><ROW><id>15337035</id><snippet>True</snippet></ROW><ROW><id>15337035</id><snippet>False</snippet></ROW><ROW><id>15337149</id><snippet>import numpy

def dms_string_to_radians(dms_string):
    degrees = numpy.sum(numpy.fromstring(dms_string, sep='-') * 
            [1.0, 1/60.0, 1/3600.0])

    return numpy.radians(degrees)

print dms_string_to_radians('47-39-28')
</snippet></ROW><ROW><id>15337149</id><snippet>0.831785136406
</snippet></ROW><ROW><id>15337149</id><snippet>import string, math

def dms_string_to_radians(dms_string):

    dms = [float(x) for x in string.split(dms_string, '-')]
    degrees = sum(
            [scale * val for scale, val in zip([1.0, 1/60.0, 1/3600.0], dms)])

    return math.radians(degrees)

print dms_string_to_radians('47-39-28')
</snippet></ROW><ROW><id>15337184</id><snippet>import re
str = "13480 D'AAA-BBB CCC..."
result = re.search("([\d]+)\s([\w\s\x27\x2E\x2C\x2D]+)",str)

print(result.group(1)) # will print "13480"
print(result.group(2)) # will print "D'AAA-BBB CCC..."
</snippet></ROW><ROW><id>15337184</id><snippet>str = "13480 D'AAA-BBB CCC..."
result = str.split(' ',1)

print(result[0]) # will print "13480"
print(result[1]) # will print "D'AAA-BBB CCC..."
</snippet></ROW><ROW><id>15337196</id><snippet>from psycopg2.extensions import adapt as sqlescape                          
import sqlalchemy                                                           
from sqlalchemy import select                                               
from sqlalchemy.ext.compiler import compiles                                
from sqlalchemy.sql.expression import ColumnClause                          


class MyFunc(ColumnClause):                                                 
    def __init__(self, *args, **kwargs):                                    
        self.kwargs = kwargs                                                
        super().__init__(*args)                                             


@compiles(MyFunc)                                                           
def compile_myfunc(element, compiler, **kw):                                
    s = ','.join("%s:=%s" % (k, sqlescape(v)) for k, v in element.kwargs.items())
    return "%s(%s)" % (element.name, s)                                     


def call(engine, func, **kwargs):                                           
    return engine.execute(select([MyFunc(func, **kwargs)]))                 


engine = sqlalchemy.create_engine('postgresql+psycopg2://lbolla@localhost/mytest')
print(call(engine, 'test_f', a='a').scalar())                               
print(call(engine, 'test_f', b='b').scalar())                               
</snippet></ROW><ROW><id>15337655</id><snippet>["ham", "spam", "eggs"]</snippet></ROW><ROW><id>15337655</id><snippet>['eggs', 'ham', 'spam']</snippet></ROW><ROW><id>15337655</id><snippet>classes_</snippet></ROW><ROW><id>15337655</id><snippet>decision_function</snippet></ROW><ROW><id>15337655</id><snippet>predict_proba</snippet></ROW><ROW><id>15337655</id><snippet>predict_log_proba</snippet></ROW><ROW><id>15337655</id><snippet>eggs</snippet></ROW><ROW><id>15337655</id><snippet>ham</snippet></ROW><ROW><id>15337655</id><snippet>spam</snippet></ROW><ROW><id>15337655</id><snippet>max</snippet></ROW><ROW><id>15337655</id><snippet>classes_</snippet></ROW><ROW><id>15337900</id><snippet>urlparse</snippet></ROW><ROW><id>15337900</id><snippet>import urlparse

u = 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=1999-0016'

q = urlparse.urlparse(u).query
values = urlparse.parse_qs(q).get('name')
if values is not None:
    print values[0]
    # prints '1999-0016'
</snippet></ROW><ROW><id>15338126</id><snippet>admin.autodiscover()</snippet></ROW><ROW><id>15338126</id><snippet>urls.py</snippet></ROW><ROW><id>15338126</id><snippet># urls.py
from django.conf.urls import patterns, include
from django.contrib import admin

admin.autodiscover()

urlpatterns = patterns('',
    (r'^admin/', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>15338126</id><snippet>admin.site.urls</snippet></ROW><ROW><id>15338749</id><snippet>object</snippet></ROW><ROW><id>15338749</id><snippet>class Result(object):
</snippet></ROW><ROW><id>15338749</id><snippet>&gt;&gt;&gt; res = Result(5,6)
&gt;&gt;&gt; res.visible
False
&gt;&gt;&gt; res.visible = True
&gt;&gt;&gt; res.currentStatus()
'You can see me!'
</snippet></ROW><ROW><id>15338936</id><snippet>Byte = BitVecSort(8)
i8 = BitVec('i8', Byte)
A = Array('A', IntSort(), Byte)
</snippet></ROW><ROW><id>15339001</id><snippet>&gt;&gt;&gt; text = "0x15000000"
&gt;&gt;&gt; text = text[2:]  # remove literal type prefix
&gt;&gt;&gt; text = text.zfill(len(text) + len(text) % 2)  # pad with zeros for even digits
&gt;&gt;&gt; ' '.join(text[i: i+2] for i in range(0, len(text), 2))  # split into 2-digit chunks
'15 00 00 00'
</snippet></ROW><ROW><id>15339029</id><snippet>def view_name(request):
    if request.method == 'POST':
        images = request.POST.getlist('images[]')

        for i in range(len(images)):
            //do forloop here
</snippet></ROW><ROW><id>15339640</id><snippet>raise ExceptionType, "message"
</snippet></ROW><ROW><id>15339640</id><snippet>raise ExceptionType(message)
</snippet></ROW><ROW><id>15339640</id><snippet>setup.py</snippet></ROW><ROW><id>15339757</id><snippet>import numpy as np
N = 5
A = np.arange(N)
X = np.arange(N*N).reshape(N,N)

B = np.arange(N)
W = np.arange(N*N).reshape(N,N)

G = np.arange(N)
Zij = np.arange(N)
</snippet></ROW><ROW><id>15339757</id><snippet>Sum_v(Av * Xi_v)</snippet></ROW><ROW><id>15339757</id><snippet>np.dot</snippet></ROW><ROW><id>15339757</id><snippet>In [54]: X
Out[54]: 
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])

In [55]: A
Out[55]: array([0, 1, 2, 3, 4])

In [56]: np.dot(X, A)
Out[56]: array([ 30,  80, 130, 180, 230])
</snippet></ROW><ROW><id>15339757</id><snippet>Sum_v(Bv * Wj_v)</snippet></ROW><ROW><id>15339757</id><snippet>In [58]: np.dot(W,B)
Out[58]: array([ 30,  80, 130, 180, 230])
</snippet></ROW><ROW><id>15339757</id><snippet>i</snippet></ROW><ROW><id>15339757</id><snippet>j</snippet></ROW><ROW><id>15339757</id><snippet>In [59]: np.dot(X,A) + np.dot(W,B)[:,None]
Out[59]: 
array([[ 60, 110, 160, 210, 260],
       [110, 160, 210, 260, 310],
       [160, 210, 260, 310, 360],
       [210, 260, 310, 360, 410],
       [260, 310, 360, 410, 460]])
</snippet></ROW><ROW><id>15339757</id><snippet>In [60]: np.dot(Zij, G)
Out[60]: 30
</snippet></ROW><ROW><id>15339757</id><snippet>In [61]: M = np.dot(X,A) + np.dot(W,B)[:,None] + np.dot(Zij, G)

In [62]: M
Out[62]: 
array([[ 90, 140, 190, 240, 290],
       [140, 190, 240, 290, 340],
       [190, 240, 290, 340, 390],
       [240, 290, 340, 390, 440],
       [290, 340, 390, 440, 490]])
</snippet></ROW><ROW><id>15339757</id><snippet>Zij</snippet></ROW><ROW><id>15339757</id><snippet>i,j</snippet></ROW><ROW><id>15339757</id><snippet>Z</snippet></ROW><ROW><id>15339757</id><snippet>Z</snippet></ROW><ROW><id>15339757</id><snippet>i</snippet></ROW><ROW><id>15339757</id><snippet>j</snippet></ROW><ROW><id>15339757</id><snippet>Z</snippet></ROW><ROW><id>15339757</id><snippet>np.dot(Z, G)</snippet></ROW><ROW><id>15339757</id><snippet>In [13]: Z = np.arange(N**3).reshape(N,N,-1)

In [14]: np.dot(X,A) + np.dot(W,B)[:,None] + np.dot(Z, G)
Out[14]: 
array([[  90,  190,  290,  390,  490],
       [ 390,  490,  590,  690,  790],
       [ 690,  790,  890,  990, 1090],
       [ 990, 1090, 1190, 1290, 1390],
       [1290, 1390, 1490, 1590, 1690]])
</snippet></ROW><ROW><id>15339883</id><snippet>axes.set_xticks(my_ticks)</snippet></ROW><ROW><id>15340387</id><snippet>&lt;Tkinter.Event instance at 0x8ade56c&gt;</snippet></ROW><ROW><id>15340387</id><snippet>widget.bind("&lt;Double-1&gt;", export_data)
</snippet></ROW><ROW><id>15340387</id><snippet>export_data</snippet></ROW><ROW><id>15340387</id><snippet>lambda</snippet></ROW><ROW><id>15340387</id><snippet>functools.partial</snippet></ROW><ROW><id>15340387</id><snippet>widget.bind("&lt;Double-1", lambda event: export_data(dirpath))
</snippet></ROW><ROW><id>15340501</id><snippet>join</snippet></ROW><ROW><id>15340501</id><snippet>threading.Thread</snippet></ROW><ROW><id>15340501</id><snippet>def parallelizer_task(processor,input,callback):
    output = processor(input)
    if callback:
        callback(output)

    # Attach result to current thread
    thread = threading.currentThread()
    thread.result = output


class ThreadsParallelizer(Parallelizer):

    def parallelize(self,processors,input=None,callback=None):
        threads = []
        for processor in processors:
            t = threading.Thread(...)
            threads.append(t)
            t.start()

        # wait for threads to finish
        for th in threads:
            th.join()

        # do something with results
        results = [th.result for th in threads]
        return results
</snippet></ROW><ROW><id>15340518</id><snippet>cp --parents</snippet></ROW><ROW><id>15340518</id><snippet>import os, shutil

def cp_parents(target_dir, files):
    dirs = []
    for file in files:
        dirs.append(os.path.dirname(file))
    dirs.sort(reverse=True)
    for i in range(len(dirs)):
        if not dirs[i] in dirs[i-1]:
            need_dir = os.path.normpath(target_dir + dirs[i])
            print("Creating", need_dir )
            os.makedirs(need_dir)
    for file in files:
        dest = os.path.normpath(target_dir + file)
        print("Copying %s to %s" % (file, dest))
        shutil.copy(file, dest)
</snippet></ROW><ROW><id>15340518</id><snippet>target_dir = '/tmp/dummy'
files = [ '/tmp/dir/file1', '/tmp/dir/subdir/file2', '/tmp/file3' ]

cp_parents(target_dir, files)
</snippet></ROW><ROW><id>15340518</id><snippet>Creating /tmp/dummy/tmp/dir/subdir
Copying /tmp/dir/file1 to /tmp/dummy/tmp/dir/file1
Copying /tmp/dir/subdir/file2 to /tmp/dummy/tmp/dir/subdir/file2
Copying /tmp/file3 to /tmp/dummy/tmp/file3
</snippet></ROW><ROW><id>15340694</id><snippet>search</snippet></ROW><ROW><id>15340694</id><snippet>group(index)</snippet></ROW><ROW><id>15340694</id><snippet>&gt;&gt;&gt; p = re.compile("name (.*) is valid")
&gt;&gt;&gt; p.search(s)    # The result of this is referenced by variable name '_'
&lt;_sre.SRE_Match object at 0x10555e738&gt;
&gt;&gt;&gt; _.group(1)     # group(1) will return the 1st capture.
'my_user_name'
</snippet></ROW><ROW><id>15340850</id><snippet>|</snippet></ROW><ROW><id>15340850</id><snippet>p_or_p1 = re.compile('(?:{}|{})'.format(p, p1))
</snippet></ROW><ROW><id>15341114</id><snippet>import re

def callback(match):
    return match.group(0).replace('17', '19')

s = "[ 17 plane_17 \ 23 25 17 99 150 248 \ noname ]"

s = re.compile(r'\\.+?\\').sub(callback, s)

print s
</snippet></ROW><ROW><id>15341114</id><snippet>[ 17 plane_17 \ 23 25 19 99 150 248 \ noname ]
</snippet></ROW><ROW><id>15341127</id><snippet>join</snippet></ROW><ROW><id>15341127</id><snippet>ret['success'] = "IDENTIFY: The value is %s " % (" ".join(IEEEAddrRemoteDev))
</snippet></ROW><ROW><id>15341127</id><snippet>status=="0"</snippet></ROW><ROW><id>15341127</id><snippet>status</snippet></ROW><ROW><id>15341127</id><snippet>if status == 0:
</snippet></ROW><ROW><id>15341169</id><snippet>list(enumerate(set(color_names)))
</snippet></ROW><ROW><id>15341173</id><snippet>as</snippet></ROW><ROW><id>15341173</id><snippet>except HTTPException as exc:
</snippet></ROW><ROW><id>15341263</id><snippet>    def jump(self, iterations):
        move1, move2, i = 0,0,0
        while i &lt; iterations:
            print(move1, move2) # move1 is 0 again

            a = Game(self.size, self.p1.position+1, self.p2.position)
            x = a.run()
            print("who won game a? : " + str(x)) # x is either 1 or 2, for the sake of testing 
                     # it's been set to always 1
            if x == 1:
                move1 += 1
            print("move 1 is: " + str(move1)) # if move1 is incremented, it is shown here successfully    

            b = Game(self.size, self.p1.position+2, self.p2.position)
            y = b.run()
            print("who won game b? : " + str(y))

            if y == 1:
                move2 += 1
            print("move 2 is: " + str(move2))

            i += 1

        if move2 &gt;= move1:
            return 2
        else:
            return 1

human, comp, i = 0, 0, 0
times = 10
while i &lt; times:
    g = Game()
    print("new game")
    while True:
        print("position of 1 is:" + str(g.p1.position))
        print("position of 2 is:" + str(g.p2.position))
        roll = g.jump(4)
        print("first jump finished")
        g.p1.move(roll)
        if g.finished():
            human += 1
            break

        roll = g.jump(4)
        print("second jump finished")
        g.p2.move(roll)
        if g.finished():
            comp += 1
            break
    i += 1
</snippet></ROW><ROW><id>15341263</id><snippet>new game
position of 1 is:0
position of 2 is:0
(0, 0)
who won game a? : 2
move 1 is: 0
who won game b? : 2
move 2 is: 0
(0, 0)
who won game a? : 2
move 1 is: 0
who won game b? : 1
move 2 is: 1
(0, 1)
who won game a? : 1
move 1 is: 1
who won game b? : 1
move 2 is: 2
(1, 2)
who won game a? : 1
move 1 is: 2
who won game b? : 2
move 2 is: 2
first jump finished
(0, 0)
who won game a? : 1
move 1 is: 1
who won game b? : 2
move 2 is: 0
(1, 0)
who won game a? : 1
move 1 is: 2
who won game b? : 1
move 2 is: 1
(2, 1)
who won game a? : 2
move 1 is: 2
who won game b? : 2
move 2 is: 1
(2, 1)
who won game a? : 2
move 1 is: 2
who won game b? : 2
move 2 is: 1
second jump finished
position of 1 is:2
position of 2 is:1
(0, 0)
who won game a? : 1
move 1 is: 1
who won game b? : 2
move 2 is: 0
(1, 0)
who won game a? : 2
move 1 is: 1
who won game b? : 1
move 2 is: 1
(1, 1)
who won game a? : 1
move 1 is: 2
who won game b? : 2
move 2 is: 1
(2, 1)
who won game a? : 2
move 1 is: 2
who won game b? : 2
move 2 is: 1
first jump finished
(0, 0)
who won game a? : 1
move 1 is: 1
who won game b? : 2
move 2 is: 0
(1, 0)
who won game a? : 2
move 1 is: 1
who won game b? : 1
move 2 is: 1
(1, 1)
who won game a? : 1
move 1 is: 2
who won game b? : 2
move 2 is: 1
(2, 1)
who won game a? : 2
move 1 is: 2
who won game b? : 2
move 2 is: 1
second jump finished
position of 1 is:3
position of 2 is:2
</snippet></ROW><ROW><id>15341269</id><snippet>lambda</snippet></ROW><ROW><id>15341269</id><snippet>operator.setitem()</snippet></ROW><ROW><id>15341269</id><snippet>import operator

lambda map: operator.setitem(map, 'x', 'y')
</snippet></ROW><ROW><id>15341354</id><snippet>for row in cursor:
    l = list(row)
    l[5] = l[5].decode('ISO-8859-1')
    (do this for all neccesary cols)
    ws.append(l)
</snippet></ROW><ROW><id>15341427</id><snippet>fn = lambda: None
</snippet></ROW><ROW><id>15341427</id><snippet>lambda_form     ::=  "lambda" [parameter_list]: expression
</snippet></ROW><ROW><id>15341427</id><snippet>parameter_list</snippet></ROW><ROW><id>15341439</id><snippet>__doc__</snippet></ROW><ROW><id>15341552</id><snippet>#!/usr/bin/env python

import glob
import gzip
import subprocess

for f in glob.glob('logs/*'):
  if f.endswith('.gz'):
    # Open a compressed file. Here is the easy way:
    #   file = gzip.open(f, 'rb')
    # Or, here is the hard way:
    proc = subprocess.Popen(['zcat', f], stdout=subprocess.PIPE)
    file = proc.stdout
  else:
    # Otherwise, it must be a regular file
    file = open(f, 'rb')

  # Process file, for example:
  print f, file.readline()
</snippet></ROW><ROW><id>15341841</id><snippet>classtest</snippet></ROW><ROW><id>15341841</id><snippet>def __init__(self):
    self.smtp_server = ""
    self.smtp_port = 0
    self.email_attachments = []
</snippet></ROW><ROW><id>15342089</id><snippet>&gt;&gt;&gt; g[:-1].decode('utf-16-le')
u'Full Tilt Poker Tournament Summary $2.25 Heads-Up Sit &amp; Go (250555914) 2-7 Triple Draw Limit (Turbo, Heads Up)\nBuy-In: $2.12 + $0.13\nBuy-In Chips: 1500\n2 Entries\nTotal Prize Pool: $4.24\nTournament started: 2013/03/08 06:00:27 ET\nTournament finished: 2013/03/08 06:14:30 ET\n\n1: Andrey3310, $4.24\n2: synthesiis\nsynthesiis finished in 2nd plac'
&gt;&gt;&gt; myre.search(g[:-1].decode('utf-16-le')).groups()
(u'250555914',)
</snippet></ROW><ROW><id>15342089</id><snippet>.decode('utf-16')</snippet></ROW><ROW><id>15342089</id><snippet>codecs.open()</snippet></ROW><ROW><id>15342089</id><snippet>import codecs

for line in codecs.open('filename.txt', 'r', encoding='utf16'):
    # handle line
</snippet></ROW><ROW><id>15342089</id><snippet>.readlines()</snippet></ROW><ROW><id>15342207</id><snippet>all()</snippet></ROW><ROW><id>15342207</id><snippet>if any(add[0] != elem[0] for elem in list1):
    list1.append(add)
</snippet></ROW><ROW><id>15342207</id><snippet>all()</snippet></ROW><ROW><id>15342207</id><snippet>True</snippet></ROW><ROW><id>15342207</id><snippet>False</snippet></ROW><ROW><id>15342207</id><snippet>add[0]</snippet></ROW><ROW><id>15342207</id><snippet>elem[0]</snippet></ROW><ROW><id>15342207</id><snippet>list1</snippet></ROW><ROW><id>15342207</id><snippet>elem[0]</snippet></ROW><ROW><id>15342333</id><snippet>e</snippet></ROW><ROW><id>15342333</id><snippet>str(e)</snippet></ROW><ROW><id>15342333</id><snippet>error = str(e)
for fn in names:
    setattr(sys.modules[__name__], fn, lambda error=error: error
</snippet></ROW><ROW><id>15342333</id><snippet>error</snippet></ROW><ROW><id>15342333</id><snippet>error</snippet></ROW><ROW><id>15342333</id><snippet>def errorfunction(error):
    return lambda: error

error = str(e)
for fn in names:
    setattr(sys.modules[__name__], fn, errorfunction(error)
</snippet></ROW><ROW><id>15342378</id><snippet>PyList_SetItem</snippet></ROW><ROW><id>15342378</id><snippet>/* This adds one to each item in a list.  For example:
        alist = [1,2,3,4,5]
        RefArgs.MyFunc(alist)
*/
static PyObject * MyFunc(PyObject *self, PyObject *args)
{
   PyObject * ArgList;
   int i;

   PyArg_ParseTuple(args, "O!", &amp;PyList_Type, &amp;ArgList));

   for (i = 0; i &lt; PyList_Size(ArgList); i++)
   {
      PyObject * PyValue;
      long iValue;

      PyValue = PyList_GetItem(ArgList, i);

      /* Add 1 to each item in the list (trivial, I know) */
      iValue = PyLong_AsLong(PyValue) + 1;

      /* SETTING THE ITEM */
      iRetn = PyList_SetItem(ArgList, i, PyLong_FromLong(iValue));

      if (iRetn == -1) Py_RETURN_FALSE;
   }

   Py_RETURN_TRUE;
}
</snippet></ROW><ROW><id>15342378</id><snippet>PyObject_SetItem</snippet></ROW><ROW><id>15342378</id><snippet>PyList_SetItem</snippet></ROW><ROW><id>15342378</id><snippet>PyObject_SetItem</snippet></ROW><ROW><id>15342378</id><snippet>PyObject_SetItem</snippet></ROW><ROW><id>15342454</id><snippet>firstList = [random.randint(1,6) for num in range(1, 11)]
</snippet></ROW><ROW><id>15342454</id><snippet>firstList= []
for num in range(1,11):
    x= int(random.randint(1,6))
    firstList.append(x)
print(firstList)
</snippet></ROW><ROW><id>15342454</id><snippet>append</snippet></ROW><ROW><id>15342610</id><snippet>&gt;&gt;&gt; def foo():
...     a = 5
...     def bar():
...         return a
...     del a
... 
SyntaxError: can not delete variable 'a' referenced in nested scope
</snippet></ROW><ROW><id>15342610</id><snippet>$ python3.3
Python 3.3.0 (default, Sep 29 2012, 08:16:08) 
[GCC 4.2.1 Compatible Apple Clang 3.1 (tags/Apple/clang-318.0.58)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def foo():
...     a = 5
...     def bar():
...         return a
...     del a
...     return bar
... 
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15342610</id><snippet>NameError</snippet></ROW><ROW><id>15342610</id><snippet>a</snippet></ROW><ROW><id>15342610</id><snippet>&gt;&gt;&gt; foo()()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in bar
NameError: free variable 'a' referenced before assignment in enclosing scope
</snippet></ROW><ROW><id>15342777</id><snippet>import numpy as np
import re

PAT = re.compile(r"""id:\s*(?P&lt;id&gt;\d+)\s*
                     Name:\s*(?P&lt;name&gt;[0-9A-Za-z ]+?)\s+time:.*
                     processing_time:\s*(?P&lt;ptime&gt;\d+)""", re.VERBOSE)

values = []
fp = open("proba.txt", "r")
for line in fp:
    match = PAT.match(line)
    if match:
        values.append(( int(match.group("id")),
                        match.group("name"),
                        int(match.group("ptime"))))
fp.close()
print values
</snippet></ROW><ROW><id>15342777</id><snippet>[(23455, 'y malsen', 5), (23455, 'ymalsen', 5)]
</snippet></ROW><ROW><id>15342777</id><snippet>id: 23455 Name: y malsen time: 03:20:20 user: ymanlls ip: 230.33.45.32 processing_time: 05
id: 23455 Name: ymalsen time: 03:20:20 user: ymanlls ip: 230.33.45.32 processing_time: 05
</snippet></ROW><ROW><id>15342890</id><snippet>#!/usr/bin/env python
import itertools
import subprocess
from multiprocessing.dummy import Pool # use threads

def run(combo):
    cmd = ["command", combo[0], combo[1]]
    return combo, subprocess.call(cmd)

def main():
    p = Pool(60) # 60 subprocesses at a time
    for combo, rc in p.imap_unordered(run, itertools.combinations(files, 2)):
        print("%s exited with %s" % (combo, rc))
    p.close()
    p.join()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>15342919</id><snippet>while True:
    choice1 = raw_input('John Blue Green')
    if choice1 == 'A':
        print('blah')
        break # &lt;-- 'A' is okay, so we can get out of the loop then
    elif choice1 == 'B':
        print('blahblah')
</snippet></ROW><ROW><id>15342919</id><snippet>True</snippet></ROW><ROW><id>15342919</id><snippet>break</snippet></ROW><ROW><id>15342958</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>15342958</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; print ast.literal_eval("(65.312321,89.314213214214)")
(65.312321, 89.314213214214)
</snippet></ROW><ROW><id>15342958</id><snippet>&gt;&gt;&gt; print list(ast.literal_eval("(65.312321,89.314213214214)"))
[65.312321, 89.314213214214]
</snippet></ROW><ROW><id>15343106</id><snippet>import cv2
import numpy as np

# original image
image = cv2.imread('image.png')

# mask (of course replace corners with yours)
mask = np.zeros(image.shape, dtype=np.uint8)
roi_corners = np.array([[(10,10), (300,300), (10,300)]], dtype=np.int32)
white = (255, 255, 255)
cv2.fillPoly(mask, roi_corners, white)

# apply the mask
masked_image = cv2.bitwise_and(image, mask)

# display your handywork
cv2.imshow('masked image', masked_image)
cv2.waitKey()
cv2.destroyAllWindows()
</snippet></ROW><ROW><id>15343518</id><snippet>set()</snippet></ROW><ROW><id>15343518</id><snippet>__init__</snippet></ROW><ROW><id>15343518</id><snippet>B</snippet></ROW><ROW><id>15343518</id><snippet>self</snippet></ROW><ROW><id>15343518</id><snippet>class A(object):
    def __init__(self, s):
        self.s = copy.copy(s)
</snippet></ROW><ROW><id>15343603</id><snippet>Edit with IDLE</snippet></ROW><ROW><id>15343603</id><snippet>"C:\Program Files\Python33\pythonw.exe" "C:\Program Files\Python33\Lib\idlelib\idle.pyw" -e "%1"
</snippet></ROW><ROW><id>15343603</id><snippet>#!/usr/bin/env python2</snippet></ROW><ROW><id>15343603</id><snippet>#!/usr/bin/env python3</snippet></ROW><ROW><id>15343603</id><snippet> C:\Windows\pyw.exe -m idlelib.idle -e "%1"
</snippet></ROW><ROW><id>15343603</id><snippet> C:\Windows\pyw.exe -3 -m idlelib.idle -e "%1"
</snippet></ROW><ROW><id>15343603</id><snippet> C:\Windows\pyw.exe -2 -m idlelib.idle -e "%1"
</snippet></ROW><ROW><id>15343603</id><snippet>Edit with IDLE</snippet></ROW><ROW><id>15343603</id><snippet>Edit with IDLE</snippet></ROW><ROW><id>15343603</id><snippet>Edit with IDLE (Py2)</snippet></ROW><ROW><id>15343603</id><snippet>.reg</snippet></ROW><ROW><id>15343603</id><snippet>Windows Registry Editor Version 5.00
[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Python.File\shell\Edit with IDLE (Py2)]
[HKEY_LOCAL_MACHINE\SOFTWARE\Classes\Python.File\shell\Edit with IDLE (Py2)\command]
@="C:\\Windows\\pyw.exe -2 -m idlelib.idle -e \"%1\""
</snippet></ROW><ROW><id>15343603</id><snippet>-2.6</snippet></ROW><ROW><id>15343603</id><snippet>-2.7</snippet></ROW><ROW><id>15343686</id><snippet>pram_axdnull</snippet></ROW><ROW><id>15343686</id><snippet>"-"</snippet></ROW><ROW><id>15343686</id><snippet>p = Popen(["pram_axdnull", str(kmer), input_filename, "-"],
          stdin=PIPE, stdout=PIPE)
output = p.communicate(generate_kmers(3))[0]
</snippet></ROW><ROW><id>15343686</id><snippet>kmer_proc = Popen(["generate_kmers", str(kmer)], stdout=PIPE)
p = Popen(["pram_axdnull", str(kmer), input_filename, "-"],
          stdin=kmer_proc.stdout, stdout=PIPE)
kmer_proc.stdout.close()
output = p.communicate()[0]
</snippet></ROW><ROW><id>15343686</id><snippet>pram_axdnull</snippet></ROW><ROW><id>15343686</id><snippet>"-"</snippet></ROW><ROW><id>15343686</id><snippet>import os
import tempfile
from subprocess import check_output

with tempfile.NamedTemporaryFile() as file:
    file.write(generate_kmers(3))
    file.delete = False

try:
    p = Popen(["pram_axdnull", str(kmer), input_filename, file.name],
              stdout=PIPE)
    output = p.communicate()[0]
    # or
    # output = check_output(["pram_axdnull", str(kmer), input_filename, 
                             file.name])
finally:
    os.remove(file.name)
</snippet></ROW><ROW><id>15343686</id><snippet>from subprocess import check_call

with tempfile.NamedTemporaryFile() as file:
    check_call(["generate_kmers", str(kmer)], stdout=file)
    file.delete = False
</snippet></ROW><ROW><id>15343686</id><snippet>os.mkfifo()</snippet></ROW><ROW><id>15343686</id><snippet>import os
import shutil
import tempfile
from contextlib import contextmanager
from subprocess import Popen, PIPE

@contextmanager
def named_pipe():
    dirname = tempfile.mkdtemp()
    try:
        path = os.path.join(dirname, 'named_pipe')
        os.mkfifo(path)
        yield path
    finally:
        shutil.rmtree(dirname)

with named_pipe() as path:
    p = Popen(["pram_axdnull", str(kmer), input_filename, path],
              stdout=PIPE) # read from path
    with open(path, 'wb') as wpipe:
        kmer_proc = Popen(["generate_kmers", str(kmer)],
                          stdout=wpipe) # write to path
    output = p.communicate()[0]
    kmer_proc.wait()
</snippet></ROW><ROW><id>15343775</id><snippet>k = np.array([0,1,2,3,4,5,6,5,4,10])
lm_i = np.where(np.diff(np.sign(np.diff(k))) &gt; 0)[0] + 1
mlm = np.min(k[lm_i])
mlm_i = lm_i[np.argmin(k[lm_i])]
</snippet></ROW><ROW><id>15343775</id><snippet>i = np.where(k &gt; mlm)[0][0]
</snippet></ROW><ROW><id>15343775</id><snippet>np.where(k &gt; np.min(k[np.where(np.diff(np.sign(np.diff(k))) &gt; 0)[0] + 1]))[0][0]
</snippet></ROW><ROW><id>15343775</id><snippet>%timeit np.where(k &gt; np.min(k[np.where(np.diff(np.sign(np.diff(k))) &gt; 0)[0] + 1]))[0][0]
1000 loops, best of 3: 228 us per loop
</snippet></ROW><ROW><id>15343861</id><snippet>open("out1.txt", "w").writelines([l for l in open("in.txt").readlines() if "tests/file/myword" in l])
</snippet></ROW><ROW><id>15343861</id><snippet>with</snippet></ROW><ROW><id>15343861</id><snippet>with open("in.txt") as f:
    lines = f.readlines()
    lines = [l for l in lines if "ROW" in l]
    with open("out.txt", "w") as f1:
        f1.writelines(lines)
</snippet></ROW><ROW><id>15343861</id><snippet>with open("in.txt") as f:
    with open("out.txt", "w") as f1:
        for line in f:
            if "ROW" in line:
                f1.write(line) 
</snippet></ROW><ROW><id>15343866</id><snippet>price</snippet></ROW><ROW><id>15343866</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>15343866</id><snippet>import csv

def unicode_csv_reader(unicode_csv_data, dialect=csv.excel, **kwargs):
    # csv.py doesn't do Unicode; encode temporarily as UTF-8:
    csv_reader = csv.reader(utf_8_encoder(unicode_csv_data),
                        dialect=dialect, **kwargs)
    for row in csv_reader:
        # decode UTF-8 back to Unicode, cell by cell:
        yield [unicode(cell, 'utf-8') for cell in row]
</snippet></ROW><ROW><id>15343899</id><snippet>&lt;html&gt;
    &lt;header&gt;
        &lt;title&gt;An example&lt;/title&gt;
        &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
        &lt;script&gt;
            function call_counter(url, pk) {
                window.open(url);
                $.get('YOUR_VIEW_HERE/'+pk+'/', function (data) {
                    alert("counter updated!");
                });
            }
        &lt;/script&gt;
    &lt;/header&gt;
    &lt;body&gt;
        &lt;button onclick="call_counter('http://www.google.com', 12345);"&gt;
            I update object 12345
        &lt;/button&gt;
        &lt;button onclick="call_counter('http://www.yahoo.com', 999);"&gt;
            I update object 999
        &lt;/button&gt;
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>15343899</id><snippet>&lt;a target="_blank" 
    class="btn btn-info pull-right" 
    href="{% url YOUR_VIEW column_3_item.pk %}/?next={{column_3_item.link_for_item|urlencode:''}}"&gt;
    Check It Out
&lt;/a&gt;
</snippet></ROW><ROW><id>15343899</id><snippet>views.py</snippet></ROW><ROW><id>15343899</id><snippet>def YOUR_VIEW_DEF(request, pk):
    YOUR_OBJECT.objects.filter(pk=pk).update(views=F('views')+1)
    return HttpResponseRedirect(request.GET.get('next')))
</snippet></ROW><ROW><id>15343913</id><snippet>countInts(firstList)
</snippet></ROW><ROW><id>15343913</id><snippet>ones, twos, threes, fours, fives = countInts(firstList)
</snippet></ROW><ROW><id>15343913</id><snippet>ones</snippet></ROW><ROW><id>15343913</id><snippet>main()</snippet></ROW><ROW><id>15343913</id><snippet>randomTen()</snippet></ROW><ROW><id>15343913</id><snippet>firstList</snippet></ROW><ROW><id>15343969</id><snippet>if option == 'A' or 'a':
</snippet></ROW><ROW><id>15343969</id><snippet>if (option == 'A') or 'a':
</snippet></ROW><ROW><id>15343969</id><snippet>if (option == 'A') or (option == 'a')
</snippet></ROW><ROW><id>15343969</id><snippet>if option in ('A', 'a'):
</snippet></ROW><ROW><id>15343996</id><snippet>def innerHTML(node): 
    buildString = ''
    for child in node:
        buildString += html.tostring(child)
    return buildString
</snippet></ROW><ROW><id>15344080</id><snippet>__exit__</snippet></ROW><ROW><id>15344080</id><snippet>is</snippet></ROW><ROW><id>15344080</id><snippet>def __exit__(self, ex_type, ex_val, tb):
    if ex_type is VagueThirdPartyError:
        if ex_val.args[0] == 'foobar':
            raise SpecificException('Foobarred!')

        # Not raising a new exception, but surpressing the current one:
        if ex_val.args[0] == 'eggs-and-ham':
            # ignore this exception
            return True

        if ex_val.args[0] == 'baz':
            # re-raise this exception
            return False

    # No else required, the function exits and `None` is  returned
</snippet></ROW><ROW><id>15344136</id><snippet>boolean</snippet></ROW><ROW><id>15344136</id><snippet>float</snippet></ROW><ROW><id>15344136</id><snippet>arr_bool</snippet></ROW><ROW><id>15344136</id><snippet>arr_val</snippet></ROW><ROW><id>15344136</id><snippet>True</snippet></ROW><ROW><id>15344136</id><snippet>False</snippet></ROW><ROW><id>15344136</id><snippet>N = 10
arr_bool = np.random.random_integers(0,1,(N,N))
arr_val  = np.random.rand(N,N)
imshow(arr_bool*arr_val, cmap = cm.spectral_r, interpolation = 'nearest')
</snippet></ROW><ROW><id>15344136</id><snippet>arr_bool</snippet></ROW><ROW><id>15344136</id><snippet>arr_val</snippet></ROW><ROW><id>15344136</id><snippet>arr_bool * arr_val</snippet></ROW><ROW><id>15344194</id><snippet>wx.NewId()</snippet></ROW><ROW><id>15344194</id><snippet>self.idr = 0</snippet></ROW><ROW><id>15344194</id><snippet>__init__</snippet></ROW><ROW><id>15344250</id><snippet>import numpy,scipy</snippet></ROW><ROW><id>15344987</id><snippet>data</snippet></ROW><ROW><id>15344987</id><snippet>Log</snippet></ROW><ROW><id>15345248</id><snippet>json</snippet></ROW><ROW><id>15345248</id><snippet>import json

# package a python dict as json
dict0 = {'spam': 'data', 'eggs': 'more data'}
pack = json.dumps(dict0)

# turn it back to a dict
dict1 = json.loads(pack)

&gt;&gt;&gt; print dict1['spam']
data
</snippet></ROW><ROW><id>15345262</id><snippet>map(None, *[range(x + 1, y) for x, y in zip(a, b)])
</snippet></ROW><ROW><id>15345428</id><snippet>and</snippet></ROW><ROW><id>15345428</id><snippet>if var &gt; 6 and var &lt; 19:
</snippet></ROW><ROW><id>15345428</id><snippet>if 6 &lt; var &lt; 19:
</snippet></ROW><ROW><id>15345428</id><snippet>(6 &lt; var) and (var &lt; 19)</snippet></ROW><ROW><id>15345494</id><snippet>str(var)</snippet></ROW><ROW><id>15345494</id><snippet>.format()</snippet></ROW><ROW><id>15345494</id><snippet>var</snippet></ROW><ROW><id>15345494</id><snippet>'{:,}'.format(var)    # format an integer
'{:,.2f}'.format(var) # format a decimal or float
</snippet></ROW><ROW><id>15345494</id><snippet>&gt;&gt;&gt; var = 12345678.123
&gt;&gt;&gt; '{:,}'.format(int(var))  # ignore the `.123` part
'12,345,678'
&gt;&gt;&gt; '{:,.2f}'.format(var)
'12,345,678.12'
</snippet></ROW><ROW><id>15345637</id><snippet>for</snippet></ROW><ROW><id>15345637</id><snippet>f2remove = [
    os.path.join(path, item)
    for path in (a,b)
        for item in os.listdir(path)
            if os.path.isdir(os.path.join(path, item))
               for x in (parse_name(item),)
                  if x and (ref - x).days &gt;= 0
   ]
</snippet></ROW><ROW><id>15345637</id><snippet>for</snippet></ROW><ROW><id>15345637</id><snippet>append</snippet></ROW><ROW><id>15345637</id><snippet>result = []
for a in A:
Â  Â  for b in B:
      if test(a, b):
   Â  Â  Â  result.append((a, b))
</snippet></ROW><ROW><id>15345637</id><snippet>result = [
    (a, b)
    for a in A
    for b in B
    if test(a, b)
]
</snippet></ROW><ROW><id>15345766</id><snippet>one_letter</snippet></ROW><ROW><id>15345766</id><snippet>one_letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
stat = {'A': 5, 
          'B':3, 
          'C':9, 
          'U': 5, 
          'D': 9, 
          'a': 99}

total_count = sum(stat.get(letter, 0) for letter in one_letter) # should be 31
</snippet></ROW><ROW><id>15345766</id><snippet>total_count = sum(stat.values()) # should be 130
</snippet></ROW><ROW><id>15345766</id><snippet>for letter in one_letter:
    stat_file.writelines("%s: %f%%\n" %(letter, \
        stat.get(letter, 0)/float(total_count)*100))
</snippet></ROW><ROW><id>15345766</id><snippet>stat.get(letter, 0)</snippet></ROW><ROW><id>15345766</id><snippet>stat</snippet></ROW><ROW><id>15345766</id><snippet>stat[letter]</snippet></ROW><ROW><id>15345766</id><snippet>A-Z</snippet></ROW><ROW><id>15345766</id><snippet>stat</snippet></ROW><ROW><id>15345969</id><snippet>scipy.misc</snippet></ROW><ROW><id>15345969</id><snippet>imread</snippet></ROW><ROW><id>15345969</id><snippet>In [1]: import scipy.misc

In [2]: scipy.misc.imread
Out[2]: &lt;function scipy.misc.pilutil.imread&gt;
</snippet></ROW><ROW><id>15346373</id><snippet>psutil</snippet></ROW><ROW><id>15346373</id><snippet>import psutil

proc = psutil.Process(pid)
if proc.status == psutil.STATUS_ZOMBIE:
    # Zombie process!
</snippet></ROW><ROW><id>15346549</id><snippet>body['parents'] = [{'id': parentID}]
</snippet></ROW><ROW><id>15346575</id><snippet>ticketsValid</snippet></ROW><ROW><id>15346575</id><snippet>A</snippet></ROW><ROW><id>15346575</id><snippet>B</snippet></ROW><ROW><id>15346575</id><snippet>C</snippet></ROW><ROW><id>15346575</id><snippet>global A, B, C</snippet></ROW><ROW><id>15346575</id><snippet>getTickets</snippet></ROW><ROW><id>15346575</id><snippet>getTickets</snippet></ROW><ROW><id>15346575</id><snippet>(A, B, C)</snippet></ROW><ROW><id>15346575</id><snippet>ticketsValid</snippet></ROW><ROW><id>15346575</id><snippet>calcIncome</snippet></ROW><ROW><id>15346575</id><snippet>def getTickets():
    A = int(input("Please enter the number of tickets sold in section A: "))
    B = int(input("Please enter the number of tickets sold in section B: "))
    C = int(input("Please enter the number of tickets sold in section C: "))
    return (A, B, C)

def ticketsValid(A, B, C):
    while A &gt; 300 or A &lt; 0:
        print("ERROR: Section A has a limit of 300 seats")
        A = int(input("Please enter the number of tickets sold in section A: "))
    while B &gt; 500 or B &lt; 0:
        print("ERROR: Section B has a limit of 500 seats")
        B = int(input("Please enter the number of tickets sold in section B: "))
    while C &gt; 200 or C &lt; 0:
        print("ERROR: Section C has a limit of 200 seats")
        C = int(input("Please enter the number of tickets sold in section C: "))
    return (A, B, C)

def calcIncome(A, B, C):
    incomeGenerated = A * secA + B * secB + C * secC
    print("The income generated is $%d" % (incomeGenerated))

def main():
    A, B, C = getTickets()
    A, B, C = ticketsValid(A, B, C)
    calcIncome(A, B, C)
</snippet></ROW><ROW><id>15346724</id><snippet>os.getcwd() + "/" + filename</snippet></ROW><ROW><id>15346737</id><snippet>import matplotlib
matplotlib.get_backend()
</snippet></ROW><ROW><id>15346737</id><snippet>mpl_is_inline = 'inline' in matplotlib.get_backend()
</snippet></ROW><ROW><id>15346737</id><snippet>display(fig)
</snippet></ROW><ROW><id>15347202</id><snippet>import os
import tempfile

with tempfile.NamedTemoraryFile(suffix='.xls') as file:
    file.write(content)
    file.delete = False

try:
    result = ReadFromExcel(file.name)
finally:
    os.remove(file.name)
</snippet></ROW><ROW><id>15347202</id><snippet>file_contents</snippet></ROW><ROW><id>15347250</id><snippet>@decorator
def function():
    pass
</snippet></ROW><ROW><id>15347250</id><snippet>def function():
    pass
function = decorator(function)
</snippet></ROW><ROW><id>15347428</id><snippet>ndarray</snippet></ROW><ROW><id>15347428</id><snippet>ndarray</snippet></ROW><ROW><id>15347428</id><snippet>__rsub__</snippet></ROW><ROW><id>15347428</id><snippet>object</snippet></ROW><ROW><id>15347428</id><snippet>class test(object):
    def __sub__(self,  other):
        return other

    def __rsub__(self,  other):
        return other if other != 1 else 666

In [11]: t = test()

In [12]: t - np.arange(4)
Out[12]: array([0, 1, 2, 3])

In [13]: np.arange(4) - t
Out[13]: array([0, 666, 2, 3], dtype=object)
</snippet></ROW><ROW><id>15347428</id><snippet>test</snippet></ROW><ROW><id>15347428</id><snippet>ndarray</snippet></ROW><ROW><id>15347428</id><snippet>__array_priority__</snippet></ROW><ROW><id>15347428</id><snippet>__array_wrap__</snippet></ROW><ROW><id>15347428</id><snippet>class test(np.ndarray):
    __array_priority__ = 100

    def __new__(cls):
        obj = np.int32([1]).view(cls)
        return obj

    def __array_wrap__(self, arr, context) :
        if context is not None :
            ufunc = context[0]
            args = context[1]
            if ufunc == np.subtract :
                if self is args[0] :
                    return args[1]
                elif self is args[1] :
                    return args[0]
        return arr
</snippet></ROW><ROW><id>15347428</id><snippet>&gt;&gt;&gt; t = test()
&gt;&gt;&gt; np.arange(4) - t
array([0, 1, 2, 3])
&gt;&gt;&gt; t - np.arange(4)
array([0, 1, 2, 3])
</snippet></ROW><ROW><id>15347428</id><snippet>&gt;&gt;&gt; np.arange(4) + t
test([1, 2, 3, 4])
&gt;&gt;&gt; t + np.arange(4)
test([1, 2, 3, 4])
</snippet></ROW><ROW><id>15347428</id><snippet>1</snippet></ROW><ROW><id>15347428</id><snippet>t</snippet></ROW><ROW><id>15347529</id><snippet>from urllib import urlencode
from urllib2 import urlopen


url = 'https://bugzilla.mozilla.org/show_bug.cgi'
data = urlencode([('ctype', 'xml'), ('id', [788604, 793892]),
                  ('excludefield', 'attachmentdata'),
                  ], doseq=True)
response = urlopen(url, data)
print(response.code) # -&gt; 200
xml = response.read()
</snippet></ROW><ROW><id>15347529</id><snippet>doseq=True</snippet></ROW><ROW><id>15347529</id><snippet>('id', [788604, 793892])</snippet></ROW><ROW><id>15347529</id><snippet>id=788604&amp;id=793892</snippet></ROW><ROW><id>15347529</id><snippet>doseq</snippet></ROW><ROW><id>15347529</id><snippet>('id', 788604), ('id', 793892)</snippet></ROW><ROW><id>15347595</id><snippet>{}</snippet></ROW><ROW><id>15347595</id><snippet>'&lt; {0} &gt;'.format(' '.join(items))
</snippet></ROW><ROW><id>15347729</id><snippet>product</snippet></ROW><ROW><id>15347729</id><snippet>(range(i+1) for i in divPair.values())</snippet></ROW><ROW><id>15347729</id><snippet>range</snippet></ROW><ROW><id>15347729</id><snippet>&gt;&gt;&gt; list(product(['range', 'range', 'range']))
[('range',), ('range',), ('range',)]
</snippet></ROW><ROW><id>15347729</id><snippet>list(product(*[range(i+1) for i in divPair.values()]))
</snippet></ROW><ROW><id>15347729</id><snippet>list(product(*(range(i+1) for i in divPair.values())))
</snippet></ROW><ROW><id>15347850</id><snippet>cmd = '/etc/init.d/{} restart'.format(a)
</snippet></ROW><ROW><id>15347850</id><snippet>cmd = '/etc/init.d/'+a+' restart'
</snippet></ROW><ROW><id>15347850</id><snippet>subprocess</snippet></ROW><ROW><id>15347855</id><snippet>__all__</snippet></ROW><ROW><id>15347855</id><snippet>@property
all(self):
    #Whatever introspective code you may want for your modules
    __all__ += submodule.__all__
</snippet></ROW><ROW><id>15347855</id><snippet>$ ipython
In [1]: from foomod import *

In [2]: printbar()
Out[2]: 'Imported from a foreign land'

In [3]: ^D
Do you really want to exit ([y]/n)?
$ ls foomod/
__init__.py __init__.pyc    core.py         core.pyc        submodule
$ grep . foomod/*.py 
foomod/__init__.py:from foomod.core import *
foomod/core.py:def printbar():
foomod/core.py:     return "Imported from a foreign land"
</snippet></ROW><ROW><id>15347855</id><snippet>__init__.py</snippet></ROW><ROW><id>15347855</id><snippet>$ echo &gt; foomod/__init__.py
$ ipython

In [1]: from foomod import *

In [2]: printbar()
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
&lt;ipython-input-2-ba5b6693441e&gt; in &lt;module&gt;()
----&gt; 1 printbar()

NameError: name 'printbar' is not defined
</snippet></ROW><ROW><id>15347893</id><snippet>ProxyFactory.protocol</snippet></ROW><ROW><id>15347893</id><snippet>requestFactory</snippet></ROW><ROW><id>15348121</id><snippet>property</snippet></ROW><ROW><id>15348121</id><snippet>class Foo(object):
     @property
     def blah(self):
         return "Cheddar Cheese!"

a = Foo()
print('{a.blah}'.format(a=a))
</snippet></ROW><ROW><id>15348121</id><snippet>Cheddar Cheese!</snippet></ROW><ROW><id>15348439</id><snippet>def __init__(self):
</snippet></ROW><ROW><id>15348439</id><snippet>triangle</snippet></ROW><ROW><id>15348439</id><snippet>def __init__(self):
    self._side = [0, 0, 0, 0]
    self._angle = [0, 0, 0, 0]
    self._perimeter = 0
    self._area = 0
</snippet></ROW><ROW><id>15348563</id><snippet>CURL</snippet></ROW><ROW><id>15348563</id><snippet>file_get_context()</snippet></ROW><ROW><id>15348633</id><snippet>def lookup(type, value): 
    people = {
        'doctors': {'doctor1': "Smith", 'doctor2': "Rogers"},
        'supervisors': {'super1': "Steve", 'super2': "Annie"}
    }
    print people[type][value]
</snippet></ROW><ROW><id>15348633</id><snippet>&gt;&gt;&gt; myDoc = 'super1'
&gt;&gt;&gt; lookup('supervisors', myDoc)
Steve
</snippet></ROW><ROW><id>15348633</id><snippet>locals()</snippet></ROW><ROW><id>15348633</id><snippet>locals()</snippet></ROW><ROW><id>15348819</id><snippet>"price":"([\d\.]+?)","opt":\{"[^a-z]*"4":\[(.+?)\]</snippet></ROW><ROW><id>15348891</id><snippet>genfromtxt</snippet></ROW><ROW><id>15348891</id><snippet>loadtxt</snippet></ROW><ROW><id>15348891</id><snippet>import numpy as np
import StringIO

s = """1 10 1.2345 5.4321 10.5647
       2 14 434.35 345.34 1000000
       3 8  253.235 2.53 .002345"""
f = StringIO.StringIO(s)

data = np.genfromtxt(f, names = 'id, count, x, y, z', dtype=[int,int,float,float,float])
</snippet></ROW><ROW><id>15348891</id><snippet>data[0]
#(1, 10, 1.2345, 5.4321, 10.5647)
</snippet></ROW><ROW><id>15348891</id><snippet>data['count']
#array([10, 14,  8])
</snippet></ROW><ROW><id>15348901</id><snippet>obj_width = xmax - xmin
obj_height = ymax - ymin
if (obj_width / obj_height &gt; ratio)
{
    height_adjustment = ((obj_width / ratio) - (ymax - ymin)) / 2;
    ymin -= height_adjustment;
    ymax += height_adjustment;
    if (ymin &lt; 0)
    {
        ymax -= ymin;
        ymin = 0;
    }
    if (ymax &gt;= image_height)
        ymax = image_height - 1;
}
else if (obj_width / obj_height &lt; ratio)
{
    width_adjustment = ((obj_height * ratio) - (xmax - xmin)) / 2;
    xmin -= width_adjustment;
    xmax += width_adjustment;
    if (xmin &lt; 0)
    {
        xmax -= xmin;
        xmin = 0;
    }
    if (xmax &gt;= image_width)
        xmax = image_width - 1;
}
</snippet></ROW><ROW><id>15349285</id><snippet>print()</snippet></ROW><ROW><id>15349285</id><snippet>output = []

heart_max,heart_min = find_max_min (wanted_tuples, 0,1)
output.append('Heart: {}  {:.1f}   {}   {:.1f}'.format(heart_min[1],heart_min[0],heart_max[1],heart_max[0]))

mv_max,mv_min = find_max_min (wanted_tuples, 0,2)
output.append('Motor: {}  {:.1f} {}  {:.1f}'.format(mv_min[1],mv_min[0],mv_max[1],mv_max[0]))

# etc.

with open('best_and_worst.txt', 'w') as f_write:
    f_write.write('\n'.join(output))
</snippet></ROW><ROW><id>15349464</id><snippet>%x0A</snippet></ROW><ROW><id>15349464</id><snippet>LF</snippet></ROW><ROW><id>15349464</id><snippet>%x7F</snippet></ROW><ROW><id>15349556</id><snippet>results</snippet></ROW><ROW><id>15349556</id><snippet>cur = db.cursor()
cur.execute("SELECT * FROM prototype")
db.commit()
results = cur.fetchall()
for name in results:
    print name[0]
</snippet></ROW><ROW><id>15349556</id><snippet>tuple</snippet></ROW><ROW><id>15349556</id><snippet>name</snippet></ROW><ROW><id>15349556</id><snippet>name[0]</snippet></ROW><ROW><id>15349556</id><snippet>name[1]</snippet></ROW><ROW><id>15349607</id><snippet>(?:can|may)
</snippet></ROW><ROW><id>15349607</id><snippet>?:
</snippet></ROW><ROW><id>15349626</id><snippet>result = []
names = ['link', 'zelda', 'saria', 'ganon', 'volvagia']
lines = iter(data)
for line in lines:
    while line.startswith("&gt;") and any(name in line for name in names):
        name = line
        upper_seq = []
        for line in lines:
            if not line.isupper():
                break
            upper_seq.append(line)
        else:
            line = "" # guard against infinite loop at EOF 

        result.append((name, ''.join(upper_seq)))
</snippet></ROW><ROW><id>15349626</id><snippet>set()</snippet></ROW><ROW><id>15349626</id><snippet>any(...)</snippet></ROW><ROW><id>15349626</id><snippet>names = set(names)
# ...
    if line.startswith("&gt;") and names.intersection(line[1:].split()):
        # ...
</snippet></ROW><ROW><id>15349626</id><snippet>[('&gt;link is the first', 'OIGFHFHAGIUUIIUFG'),
 ('&gt;ganon is the fourth', 'ADGGHHHHHH'),
 ('&gt;volvagia is the last', 'AFGDAAFGDAADFGAFDADFDFFDDFGAHUUERR')]
</snippet></ROW><ROW><id>15350008</id><snippet>target</snippet></ROW><ROW><id>15350008</id><snippet>t1 = threading.Thread(target=analysis("samplequery"))
</snippet></ROW><ROW><id>15350008</id><snippet>analysis</snippet></ROW><ROW><id>15350008</id><snippet>'samplequery</snippet></ROW><ROW><id>15350008</id><snippet>t1 = threading.Thread(target=analysis, args=("samplequery",))
</snippet></ROW><ROW><id>15350008</id><snippet>Thread()</snippet></ROW><ROW><id>15350008</id><snippet>group</snippet></ROW><ROW><id>15350008</id><snippet>None</snippet></ROW><ROW><id>15350008</id><snippet>threading.Thread()</snippet></ROW><ROW><id>15350008</id><snippet>None</snippet></ROW><ROW><id>15350008</id><snippet>ThreadGroup</snippet></ROW><ROW><id>15350008</id><snippet>run()</snippet></ROW><ROW><id>15350008</id><snippet>None</snippet></ROW><ROW><id>15350039</id><snippet>urllib.quote(urlparse.urlparse(urllib.unquote(url))[2]) 
</snippet></ROW><ROW><id>15350039</id><snippet>&gt;&gt;&gt; urllib.quote(urlparse.urlparse(urllib.unquote("/foo"))[2]) 
'/foo'
&gt;&gt;&gt; urllib.quote(urlparse.urlparse(urllib.unquote("/foo?"))[2]) 
'/foo'
</snippet></ROW><ROW><id>15350039</id><snippet>/catalogs/p?</snippet></ROW><ROW><id>15350039</id><snippet>/catalogs/p</snippet></ROW><ROW><id>15350148</id><snippet>self.TreeBuilder.start("root", {})
[...]
for event,element in cElementTree.iterparse(io, events = ( b'start',b'end')):
    if event == b'start':
        self.TreeBuilder.start(element.tag, element.attrib)
[...]
self.TreeBuilder.end("root")
</snippet></ROW><ROW><id>15350292</id><snippet> // Put here the url to the file
 url = "https://raw.github.com/cburgmer/cjklib/master/cjklib/data/pinyinipamapping.csv";

    $.ajax({
        type: "GET",
        url: url,
        dataType: "text",
        success: function(data) {processData(data);}
     });


function processData(allText) {
    // Get an array of lines
    var allTextLines = allText.split(/\r\n|\n/);
    // Get the number of columns using the first row
    var entries = allTextLines[0].split(',');
    var lines = [];

    // while there are elements in the row
    while (entries.length&gt;0) {
        // remove that line, split it and store in our array 
        lines.push(entries.shift().split(','));
    }
    // Now do your stuff with the array lines

}
</snippet></ROW><ROW><id>15350646</id><snippet>C:\path\to\script.py</snippet></ROW><ROW><id>15350646</id><snippet>'C:\path\to\script.py'</snippet></ROW><ROW><id>15350646</id><snippet>/cygdrive/c/path/to/script.py</snippet></ROW><ROW><id>15350646</id><snippet>C:/path/to/script.py</snippet></ROW><ROW><id>15350646</id><snippet>$(cygpath -w /cygdrive/c/path/to/script.py)</snippet></ROW><ROW><id>15350646</id><snippet>cygpath</snippet></ROW><ROW><id>15350646</id><snippet>-w</snippet></ROW><ROW><id>15350646</id><snippet>$(...)</snippet></ROW><ROW><id>15350646</id><snippet>path/to/script.py</snippet></ROW><ROW><id>15350646</id><snippet>cygpath</snippet></ROW><ROW><id>15350646</id><snippet>cygpath -w /cygdrive/c/Windows</snippet></ROW><ROW><id>15350646</id><snippet>c:\windows</snippet></ROW><ROW><id>15350646</id><snippet>cygpath 'c:\Windows'</snippet></ROW><ROW><id>15350646</id><snippet>/cygdrive/c/Windows</snippet></ROW><ROW><id>15350658</id><snippet>dict</snippet></ROW><ROW><id>15350658</id><snippet>repr</snippet></ROW><ROW><id>15350658</id><snippet>repr</snippet></ROW><ROW><id>15350749</id><snippet>sum(x for counter in numbers.values() for x in counter.values())
</snippet></ROW><ROW><id>15350749</id><snippet>sum(sum(numbers.values(), Counter()).values())
</snippet></ROW><ROW><id>15350749</id><snippet>sum(sum(c.values()) for c in numbers.values())
</snippet></ROW><ROW><id>15350749</id><snippet>from itertools import chain
sum(chain.from_iterable(d.values() for d in numbers.values()))
</snippet></ROW><ROW><id>15350792</id><snippet>sys.version</snippet></ROW><ROW><id>15350792</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; print(sys.version)
3.2.3 (default, Oct 19 2012, 19:53:16) 
[GCC 4.7.2]
</snippet></ROW><ROW><id>15350792</id><snippet>wim@wim-zenbook:~$ python3
Python 3.2.3 (default, Oct 19 2012, 19:53:16) 
[GCC 4.7.2] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15351066</id><snippet>gte</snippet></ROW><ROW><id>15351325</id><snippet>SELECT ... FOR UPDATE</snippet></ROW><ROW><id>15351325</id><snippet>UPDATE persone SET age = age+1 WHERE id=1</snippet></ROW><ROW><id>15351325</id><snippet>age=age-1</snippet></ROW><ROW><id>15351385</id><snippet>2 * 2 * 2 * 2 * 3 * 3 * 5 * 7 * 11 * 13 * 17 * 19 = 232792560
</snippet></ROW><ROW><id>15351385</id><snippet>&gt;&gt;&gt; all(map(lambda x: 232792560 % x == 0, range(1, 21)))
True
</snippet></ROW><ROW><id>15351600</id><snippet>for element in (sorted(x) for x in S):
   # do things
</snippet></ROW><ROW><id>15351600</id><snippet>map</snippet></ROW><ROW><id>15351600</id><snippet>for element in map(sorted, S):
    # or itertools.imap on Python2.x if you need iterators...
</snippet></ROW><ROW><id>15351750</id><snippet>Counter</snippet></ROW><ROW><id>15351750</id><snippet>collections</snippet></ROW><ROW><id>15351750</id><snippet>from random import choice
from collections import Counter

diceNo = int(raw_input('How many dice do you need? '))
diceValues = ['skull', 'skull', 'skull', 'symbol', 'shield', 'shield']

counter = Counter()
counter.update(choice(diceValues) for _ in range(diceNo))

print("Rolls:")
for value, count in counter.items():
    print("{}: {}".format(value, count))

print ('YOUR DICE ROLLS HAVE COMPLETED')
raw_input("PRESS ANY KEY TO CONTINUE.")
</snippet></ROW><ROW><id>15351750</id><snippet>counter.update(choice(diceValues) for _ in range(diceNo))</snippet></ROW><ROW><id>15351750</id><snippet>counter.update</snippet></ROW><ROW><id>15351750</id><snippet>diceNo</snippet></ROW><ROW><id>15351867</id><snippet>protorpc</snippet></ROW><ROW><id>15351867</id><snippet>int64</snippet></ROW><ROW><id>15351867</id><snippet>uint64</snippet></ROW><ROW><id>15351867</id><snippet>2**53</snippet></ROW><ROW><id>15351867</id><snippet>protorpc</snippet></ROW><ROW><id>15351867</id><snippet>id = messages.IntegerField(1)
</snippet></ROW><ROW><id>15351867</id><snippet>IntegerField</snippet></ROW><ROW><id>15351867</id><snippet>messages.Variant.INT64</snippet></ROW><ROW><id>15351867</id><snippet>{'id': '123456789'}
</snippet></ROW><ROW><id>15351867</id><snippet>protorpc</snippet></ROW><ROW><id>15351867</id><snippet>{'id': 123456789}
</snippet></ROW><ROW><id>15351867</id><snippet>id = messages.IntegerField(1, variant=messages.Variant.INT32)
</snippet></ROW><ROW><id>15351867</id><snippet>id = messages.StringField(1)
</snippet></ROW><ROW><id>15351867</id><snippet>endpoints-proto-datastore</snippet></ROW><ROW><id>15351867</id><snippet>from protorpc import messages
from endpoints_proto_datastore.ndb import EndpointsVariantIntegerProperty
</snippet></ROW><ROW><id>15351867</id><snippet>attr1 = EndpointsVariantIntegerProperty(variant=messages.Variant.INT32)
</snippet></ROW><ROW><id>15351987</id><snippet>PrimaryKeyConstraint</snippet></ROW><ROW><id>15351987</id><snippet>list(table.primary_key)[0]</snippet></ROW><ROW><id>15351987</id><snippet>from sqlalchemy import tuple_, or_, and_

def select_by_composite_pk(table, values):
    "works only in a high-capability database like postgresql"
    return table.select().where(tuple_(*table.primary_key).in_(values))

def select_by_composite_pk_no_tuples(table, values):
    "works in any database"

    return table.select().where(
            or_(
                *[
                    and_(*[col == val for col, val in zip(table.primary_key, val)])
                    for val in values
                ]
            ))

def select_by_single_pk(table, values):
    "works in any database"
    return table.select().where(list(table.primary_key)[0].in_(values))

if __name__ == '__main__':
    from sqlalchemy import create_engine, Table, Column, Integer, MetaData

    eng = create_engine("postgresql://scott:tiger@localhost/test", echo=True)

    conn = eng.connect()
    trans = conn.begin()

    m = MetaData()

    # single PK column
    a = Table('a', m, Column('x', Integer, primary_key=True),
                            Column('y', Integer))

    # composite PK column
    b = Table('b', m, Column('x', Integer, primary_key=True),
                    Column('y', Integer, primary_key=True))

    m.create_all(conn)

    conn.execute(a.insert(), [
            {'x': i, 'y': i * 2} for i in xrange(10)
        ])
    conn.execute(b.insert(), [
            {'x': i, 'y': i * 2} for i in xrange(10)
        ])

    print conn.execute(
                select_by_composite_pk(a,
                    [tuple_(3, ), tuple_(5, ), tuple_(9, )])).fetchall()

    print conn.execute(
                select_by_composite_pk(b,
                    [tuple_(3, 6), tuple_(5, 10), tuple_(9, 18)])).fetchall()

    print conn.execute(
                select_by_composite_pk_no_tuples(b,
                    [(3, 6), (5, 10), (9, 18)])).fetchall()

    print conn.execute(
                select_by_single_pk(b, [3, 5, 9])).fetchall()

    # ORM query version
    from sqlalchemy.orm import Session
    from sqlalchemy.ext.declarative import declarative_base

    Base = declarative_base()

    class MyCompositeClass(Base):
        __table__ = b

    # get accepts a tuple
    print Session(conn).query(MyCompositeClass).get((5, 10))
</snippet></ROW><ROW><id>15352131</id><snippet>import IPython
ip = IPython.core.ipapi.get()
for var in ip.run_line_magic('who_ls', ''):
  # potato
</snippet></ROW><ROW><id>15352243</id><snippet>property</snippet></ROW><ROW><id>15352243</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()

class A(Base):
    __tablename__ = "a"
    id = Column(Integer, primary_key=True)
    bs = relationship("B")

class B(Base):
    __tablename__ = "b"
    id = Column(Integer, primary_key=True)
    a_id = Column(Integer, ForeignKey('a.id'))
</snippet></ROW><ROW><id>15352243</id><snippet>print A.bs.property.mapper.class_
</snippet></ROW><ROW><id>15352243</id><snippet>from sqlalchemy import inspect
print inspect(A.bs).mapper.class_
</snippet></ROW><ROW><id>15352312</id><snippet>corpus = [dictionary.doc2bow(text) for text in texts]</snippet></ROW><ROW><id>15352312</id><snippet>import gensim as gs

documents = ["Human machine interface for lab abc computer applications",
             "A survey of user opinion of computer system response time",
             "The EPS user interface management system",
             "System and human system engineering testing of EPS",
             "Relation of user perceived response time to error measurement",
             "The generation of random binary unordered trees",
             "The intersection graph of paths in trees",
             "Graph minors IV Widths of trees and well quasi ordering",
             "Graph minors A survey"]

texts = [[word for word in document.lower().split()] for document in documents]
dictionary = gs.corpora.Dictionary(texts)
corpus = [dictionary.doc2bow(text) for text in texts]

tfidf = gs.models.TfidfModel(corpus)
corpus_tfidf = tfidf[corpus]

lsi = gs.models.LsiModel(corpus_tfidf, id2word=dictionary, num_topics=5)
lsi.print_topics()

for i in lsi.print_topics():
    print i
</snippet></ROW><ROW><id>15352312</id><snippet>-0.331*"system" + -0.329*"a" + -0.329*"survey" + -0.241*"user" + -0.234*"minors" + -0.217*"opinion" + -0.215*"eps" + -0.212*"graph" + -0.205*"response" + -0.205*"time"
-0.330*"minors" + 0.313*"eps" + 0.301*"system" + -0.288*"graph" + -0.274*"a" + -0.274*"survey" + 0.268*"management" + 0.262*"interface" + 0.208*"human" + 0.189*"engineering"
0.282*"trees" + 0.267*"the" + 0.236*"in" + 0.236*"paths" + 0.236*"intersection" + -0.233*"time" + -0.233*"response" + 0.202*"generation" + 0.202*"unordered" + 0.202*"binary"
-0.247*"generation" + -0.247*"unordered" + -0.247*"random" + -0.247*"binary" + 0.219*"minors" + -0.214*"the" + -0.214*"to" + -0.214*"error" + -0.214*"perceived" + -0.214*"relation"
0.333*"machine" + 0.333*"for" + 0.333*"lab" + 0.333*"abc" + 0.333*"applications" + 0.258*"computer" + -0.214*"system" + -0.194*"eps" + -0.191*"and" + -0.188*"testing"
</snippet></ROW><ROW><id>15352409</id><snippet>coords</snippet></ROW><ROW><id>15352409</id><snippet>itemconfig</snippet></ROW><ROW><id>15352409</id><snippet># Create
self.ids[x][y] = w.create_rectangle([3 + 50 * y, ...)

# Update
fillcolors = {'f':'green', 'w':'blue', 'X':'brown', 's':'gray'}
fill = "black" if self.a[x][y][1] == 'C' else fillcolors[self.a[x][y][0][0]]
w.coords(self.ids[x][y], [3 + 50 * y, ...)
w.itemconfig(self.ids[x][y], fill=fill)
</snippet></ROW><ROW><id>15352430</id><snippet>f2 = open('accessionids.txt','r')
f1 = open('fasta.txt','r')
f3 = open('fasta_parsed.txt','w')

AI_DICT = {}
for line in f2:
    AI_DICT[line[:-1]] = 1

skip = 0
for line in f1:
    if line[0] == '&gt;':
        _splitline = line.split('|')
        accessorIDWithArrow = _splitline[0]
        accessorID = accessorIDWithArrow[1:-1]
        # print accessorID
        if accessorID in AI_DICT:
            f3.write(line)
            skip = 0
        else:
            skip = 1
    else:
        if not skip:
            f3.write(line)

f1.close()
f2.close()
f3.close()
</snippet></ROW><ROW><id>15352430</id><snippet>accessionids.txt</snippet></ROW><ROW><id>15352430</id><snippet>fasta.txt</snippet></ROW><ROW><id>15352430</id><snippet>&gt;</snippet></ROW><ROW><id>15352430</id><snippet>|</snippet></ROW><ROW><id>15352430</id><snippet>|</snippet></ROW><ROW><id>15352430</id><snippet>_splitline[0]</snippet></ROW><ROW><id>15352430</id><snippet>accessorIDWithArrow[1:-1]</snippet></ROW><ROW><id>15352430</id><snippet>&gt;</snippet></ROW><ROW><id>15352430</id><snippet>accessorID</snippet></ROW><ROW><id>15352430</id><snippet>fasta_parsed.txt</snippet></ROW><ROW><id>15352430</id><snippet>skip</snippet></ROW><ROW><id>15352430</id><snippet>0</snippet></ROW><ROW><id>15352430</id><snippet>else</snippet></ROW><ROW><id>15352430</id><snippet>if not skip</snippet></ROW><ROW><id>15352430</id><snippet>fasta_parsed.txt</snippet></ROW><ROW><id>15352430</id><snippet>fasta_parsed.txt</snippet></ROW><ROW><id>15352430</id><snippet>skip</snippet></ROW><ROW><id>15352504</id><snippet>for</snippet></ROW><ROW><id>15352504</id><snippet>data = [[1,2,3],
        [1,2,3]]

column = 1
print sum(row[column] for row in data)
</snippet></ROW><ROW><id>15352534</id><snippet>import ast
res = ast.literal_eval('[156, 100, 713]')
</snippet></ROW><ROW><id>15352568</id><snippet>min_x = min(particleCoords.iteritems(),key = lambda item: item[1][0])
max_x = max(particleCoords.iteritems(),key = lambda item: item[1][0])

min_y = min(particleCoords.iteritems(),key = lambda item: item[1][1])
max_y = max(particleCoords.iteritems(),key = lambda item: item[1][1])
</snippet></ROW><ROW><id>15352568</id><snippet>item[1]</snippet></ROW><ROW><id>15352568</id><snippet>x</snippet></ROW><ROW><id>15352568</id><snippet>y</snippet></ROW><ROW><id>15352568</id><snippet>min_x = min(particleCoords.itervalues(),key = itemgetter(0))
max_x = max(particleCoords.itervalues(),key = itemgetter(0))

min_y = min(particleCoords.itervalues(),key = itemgetter(1))
max_y = max(particleCoords.itervalues(),key = itemgetter(1))
</snippet></ROW><ROW><id>15352568</id><snippet>min_x</snippet></ROW><ROW><id>15352568</id><snippet>max_x</snippet></ROW><ROW><id>15352568</id><snippet>(x,y)</snippet></ROW><ROW><id>15352568</id><snippet>x</snippet></ROW><ROW><id>15352628</id><snippet>log&lt;sub&gt;a&lt;/sub&gt;b</snippet></ROW><ROW><id>15352628</id><snippet>log&lt;sub&gt;x&lt;/sub&gt;b / log&lt;sub&gt;x&lt;/sub&gt;a</snippet></ROW><ROW><id>15352628</id><snippet>X</snippet></ROW><ROW><id>15352628</id><snippet>Y</snippet></ROW><ROW><id>15352628</id><snippet>X</snippet></ROW><ROW><id>15352628</id><snippet>Y</snippet></ROW><ROW><id>15352628</id><snippet># Don't even think about using this for negative powers :-)

def isPower (num, base):
    if base == 1 and num != 1: return False
    if base == 1 and num == 1: return True
    if base == 0 and num != 1: return False
    power = int (math.log (num, base) + 0.5)
    return base ** power == num
</snippet></ROW><ROW><id>15352628</id><snippet>import math

def isPower (num, base):
    if base == 1 and num != 1: return False
    if base == 1 and num == 1: return True
    if base == 0 and num != 1: return False
    power = int (math.log (num, base) + 0.5)
    return base ** power == num

print isPower (127,2)       # false
print isPower (128,2)       # true
print isPower (129,2)       # false
print

print isPower (26,3)        # false
print isPower (27,3)        # true
print isPower (28,3)        # false
print isPower (3**10,3)     # ftrue
print isPower (3**129,3)    # true
print

print isPower (5,5)         # true
print isPower (1,1)         # true
print isPower (10,1)        # false
</snippet></ROW><ROW><id>15352628</id><snippet>isPower(128,2)</snippet></ROW><ROW><id>15352628</id><snippet>isPower(verybignum,2)</snippet></ROW><ROW><id>15352628</id><snippet>def isPower (num, base):
    if base == 1 and num != 1: return False
    if base == 1 and num == 1: return True
    if base == 0 and num != 1: return False
    testnum = base
    while testnum &lt; num:
        testnum = testnum * base
    return testnum == num
</snippet></ROW><ROW><id>15352725</id><snippet>parser.add_argument('-r', type=revs, ...)
</snippet></ROW><ROW><id>15352725</id><snippet>parser.add_argument('-r', type='revs', ...)
</snippet></ROW><ROW><id>15352725</id><snippet>type</snippet></ROW><ROW><id>15352725</id><snippet>type</snippet></ROW><ROW><id>15352762</id><snippet>the_doc</snippet></ROW><ROW><id>15352762</id><snippet>os.chdir("/tmp/")
files = [DOC(file=f) for f in glob.glob("*.xml")]
the_doc = ROOT(*files)
print lxml.etree.tostring(the_doc, pretty_print=True)
</snippet></ROW><ROW><id>15352813</id><snippet>stderr</snippet></ROW><ROW><id>15352813</id><snippet>zgrep</snippet></ROW><ROW><id>15352813</id><snippet>Popen</snippet></ROW><ROW><id>15352813</id><snippet>zgrep</snippet></ROW><ROW><id>15352813</id><snippet>zlib</snippet></ROW><ROW><id>15352813</id><snippet>gawk</snippet></ROW><ROW><id>15353081</id><snippet>range()</snippet></ROW><ROW><id>15353081</id><snippet>itertools.combinations</snippet></ROW><ROW><id>15353081</id><snippet>&gt;&gt;&gt; n = 4
&gt;&gt;&gt; players = range(1,n+1)
&gt;&gt;&gt; players
[1, 2, 3, 4]
&gt;&gt;&gt; list(itertools.combinations(players, 2))
[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
</snippet></ROW><ROW><id>15353312</id><snippet>compressedFile</snippet></ROW><ROW><id>15353312</id><snippet>gzip.GzipFile()</snippet></ROW><ROW><id>15353312</id><snippet>gzip</snippet></ROW><ROW><id>15353312</id><snippet>#! /usr/bin/env python
import urllib2
import StringIO
import gzip

baseURL = "https://www.kernel.org/pub/linux/docs/man-pages/"
filename = "man-pages-3.34.tar.gz"
outFilePath = "man-pages-3.34.tar"

response = urllib2.urlopen(baseURL + filename)
compressedFile = StringIO.StringIO()
compressedFile.write(response.read())
#
# Set the file's current position to the beginning
# of the file so that gzip.GzipFile can read
# its contents from the top.
#
compressedFile.seek(0)

decompressedFile = gzip.GzipFile(fileobj=compressedFile, mode='rb')

with open(outFilePath, 'w') as outfile:
    outfile.write(decompressedFile.read())
</snippet></ROW><ROW><id>15353416</id><snippet>object.__exit__</snippet></ROW><ROW><id>15353416</id><snippet>__exit__</snippet></ROW><ROW><id>15353416</id><snippet>True</snippet></ROW><ROW><id>15353416</id><snippet>False</snippet></ROW><ROW><id>15353416</id><snippet>__exit__</snippet></ROW><ROW><id>15353416</id><snippet>def __exit__(self, exctype, value, tb):
    print "  __exit__; excptype: '%s'; value: '%s'" % (exctype, value)
    if exctype is GeneratorExit:
        return False
    return True
</snippet></ROW><ROW><id>15353416</id><snippet>GeneratorExit</snippet></ROW><ROW><id>15353416</id><snippet>__exit__</snippet></ROW><ROW><id>15353416</id><snippet>True</snippet></ROW><ROW><id>15353416</id><snippet>try:
   something()
except: #Uh-Oh
   pass
</snippet></ROW><ROW><id>15353416</id><snippet>AttributeError</snippet></ROW><ROW><id>15353416</id><snippet>GeneratorExit</snippet></ROW><ROW><id>15353416</id><snippet>__exit__</snippet></ROW><ROW><id>15353416</id><snippet>try:
    for item in foo(10):
        print 'Fail - val: %d' % item.val
        item.not_an_attribute
except AttributeError:
    pass

print "Here"  #No reference to the generator left.  
              #Should see __exit__ before "Here"
</snippet></ROW><ROW><id>15353416</id><snippet>g = foo(10)
try:
    for item in g:
        print 'Fail - val: %d' % item.val
        item.not_an_attribute
except AttributeError:
    pass

print "Here"
b = g  #keep a reference to prevent the reference counter from cleaning this up.
       #Now we see __exit__ *after* "Here"
</snippet></ROW><ROW><id>15353498</id><snippet>server/openerp/addons/base/res/res_company_view.xml</snippet></ROW><ROW><id>15353498</id><snippet>server/openerp/addons/base/res/res_company.py</snippet></ROW><ROW><id>15353582</id><snippet>dict_reader = csv.DictReader(StringIO.StringIO(some_string))
</snippet></ROW><ROW><id>15353582</id><snippet>StringIO.StringIO</snippet></ROW><ROW><id>15353582</id><snippet>dict_reader</snippet></ROW><ROW><id>15353582</id><snippet>#! /usr/bin/env python
import csv
try:
    from StringIO import StringIO   # Python 2.x
except ImportError:
    from io import StringIO         # Python 3.x

test_string = """name,value
foo,1
bar,2
"""

string_io = StringIO(test_string)
# 
# Position is 0 i.e. the beginning of the string.
# 
print("Position: {}".format(string_io.tell()))

dict_reader = csv.DictReader(string_io)
#
# Position is still 0. Nothing has been read.
#
print("Position: {}".format(string_io.tell()))
#
# Now we start reading from string_io
#
for row in dict_reader:
    print(row)
    #
    # Position increases every time you read 
    # a row using dict_reader.
    #
    print("Position: {}".format(string_io.tell()))
</snippet></ROW><ROW><id>15353582</id><snippet>Position: 0
Position: 0
{'name': 'foo', 'value': '1'}
Position: 17
{'name': 'bar', 'value': '2'}
Position: 23
</snippet></ROW><ROW><id>15353582</id><snippet>string_io</snippet></ROW><ROW><id>15353582</id><snippet>dict_reader</snippet></ROW><ROW><id>15353582</id><snippet>string_io</snippet></ROW><ROW><id>15353582</id><snippet>string_io.seek(0)
for row in dict_reader:
    print(row)
    print("Position: {}".format(string_io.tell()))
</snippet></ROW><ROW><id>15353582</id><snippet>for</snippet></ROW><ROW><id>15353582</id><snippet>{'name': 'name', 'value': 'value'}
Position: 11
{'name': 'foo', 'value': '1'}
Position: 17
{'name': 'bar', 'value': '2'}
Position: 23
</snippet></ROW><ROW><id>15353582</id><snippet>dict_reader</snippet></ROW><ROW><id>15353582</id><snippet>string_io</snippet></ROW><ROW><id>15353582</id><snippet>dict_reader</snippet></ROW><ROW><id>15353582</id><snippet>dict_reader</snippet></ROW><ROW><id>15353582</id><snippet>csv.DictReader.next()</snippet></ROW><ROW><id>15353582</id><snippet>Reader_iternext()</snippet></ROW><ROW><id>15353998</id><snippet>res_groups</snippet></ROW><ROW><id>15353998</id><snippet>category_id</snippet></ROW><ROW><id>15353998</id><snippet>name</snippet></ROW><ROW><id>15353998</id><snippet>res_groups</snippet></ROW><ROW><id>15354195</id><snippet>import logging
should_abort = False

def do_stuff():
    global should_abort
    ...

def main():
    while not should_abort:  # your main loop
        try:
            do_stuff()
        except MyException1, e:
            logging.exception('GOT MyException1 %s', e)
        except MyException2, e:
            logging.exception('GOT MyException2 %s', e)
        except Exception, e:
            logging.exception('UNKNOWN EXCEPTION %s', e)
</snippet></ROW><ROW><id>15354195</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>15354195</id><snippet>BaseException</snippet></ROW><ROW><id>15354195</id><snippet>Exception</snippet></ROW><ROW><id>15354421</id><snippet>drive_c\pyinstaller-2.0</snippet></ROW><ROW><id>15354421</id><snippet>msiexec</snippet></ROW><ROW><id>15354421</id><snippet>wine msiexec /i python-2.6.6.msi
</snippet></ROW><ROW><id>15354421</id><snippet>pywin32</snippet></ROW><ROW><id>15354421</id><snippet>wine c:/Python26/Python.exe c:/pyinstaller-2.0/pyinstaller.py &lt;spec_file&gt;
</snippet></ROW><ROW><id>15354552</id><snippet>def mixins(*args):
    return type('Foo', args, {})
</snippet></ROW><ROW><id>15354552</id><snippet>object</snippet></ROW><ROW><id>15354552</id><snippet>def mixins(*args):
    bases = args if object in args else args + (object,)
    return type('Foo', bases, {})
</snippet></ROW><ROW><id>15354576</id><snippet>s = 'Hi my name is {name} and I am {age} years old'
</snippet></ROW><ROW><id>15354576</id><snippet>str.format</snippet></ROW><ROW><id>15354576</id><snippet>&gt;&gt;&gt; s.format(name='John', age=42)
Hi my name is John and I am 42 years old
</snippet></ROW><ROW><id>15354576</id><snippet>{}</snippet></ROW><ROW><id>15354576</id><snippet>%</snippet></ROW><ROW><id>15354988</id><snippet>os.walk</snippet></ROW><ROW><id>15354988</id><snippet>os.listdir</snippet></ROW><ROW><id>15354988</id><snippet>glob.glob</snippet></ROW><ROW><id>15354988</id><snippet>os.stat</snippet></ROW><ROW><id>15354988</id><snippet>hashlib.md5(open(fname).read()).hexdigest()</snippet></ROW><ROW><id>15354988</id><snippet>os.utime</snippet></ROW><ROW><id>15354988</id><snippet>json.dump</snippet></ROW><ROW><id>15354988</id><snippet>json.load</snippet></ROW><ROW><id>15355058</id><snippet>enlistForParent</snippet></ROW><ROW><id>15355058</id><snippet>addToParent</snippet></ROW><ROW><id>15355058</id><snippet>setParentForNode</snippet></ROW><ROW><id>15355150</id><snippet>None</snippet></ROW><ROW><id>15355150</id><snippet>None</snippet></ROW><ROW><id>15355284</id><snippet>numbers</snippet></ROW><ROW><id>15355284</id><snippet>sys.path</snippet></ROW><ROW><id>15355284</id><snippet>numbers</snippet></ROW><ROW><id>15355284</id><snippet>import numbers
print numbers.__file__
</snippet></ROW><ROW><id>15355458</id><snippet>f.flush()</snippet></ROW><ROW><id>15355458</id><snippet>f.seek()</snippet></ROW><ROW><id>15355486</id><snippet>parser</snippet></ROW><ROW><id>15355486</id><snippet>parser.parse</snippet></ROW><ROW><id>15355486</id><snippet>datetime</snippet></ROW><ROW><id>15355486</id><snippet>strftime</snippet></ROW><ROW><id>15355486</id><snippet>In [1]: from dateutil import parser

In [2]: list_dates = ['2013-05-01', '15th Oct 2013', '01-05-13', '2013/FEB/05']

In [3]: [parser.parse(date).strftime('%Y-%m-%d') for date in list_dates]
Out[3]: ['2013-05-01', '2013-10-15', '2013-01-05', '2013-02-05']
</snippet></ROW><ROW><id>15356015</id><snippet>zipimport</snippet></ROW><ROW><id>15356015</id><snippet>chardet</snippet></ROW><ROW><id>15356015</id><snippet>module.mod</snippet></ROW><ROW><id>15356015</id><snippet>importer = zipimport.zipimporter('module.mod')
chardet = importer.load_module('chardet')
</snippet></ROW><ROW><id>15356015</id><snippet>-file module.mod</snippet></ROW><ROW><id>15356015</id><snippet>chardet</snippet></ROW><ROW><id>15356454</id><snippet>In [25]: l = ['SPRD', '60', 'p25']

In [26]: filter(None,(s.translate(None,'1234567890') for s in l))
Out[26]: ['SPRD', 'p']
</snippet></ROW><ROW><id>15356497</id><snippet>base = b'\x80abc'.decode(FSENCODING, "replace")
</snippet></ROW><ROW><id>15356798</id><snippet>import subprocess
p = subprocess.Popen("whatever.exe",stdout=subprocess.PIPE)
print p.stdout.read()
p.wait()
</snippet></ROW><ROW><id>15356798</id><snippet>#!/usr/bin/env python

import cgitb
import subprocess
import sys

cgitb.enable()

sys.stdout.write("Content-type: text/plain\r\n\r\n")

p = subprocess.Popen("/usr/games/fortune",stdout=subprocess.PIPE)
data = p.stdout.read()
p.wait()

print data
</snippet></ROW><ROW><id>15357184</id><snippet>raw_input()</snippet></ROW><ROW><id>15357184</id><snippet>input()</snippet></ROW><ROW><id>15357184</id><snippet>b</snippet></ROW><ROW><id>15357184</id><snippet>b</snippet></ROW><ROW><id>15357184</id><snippet>raw_input()</snippet></ROW><ROW><id>15357184</id><snippet>input()</snippet></ROW><ROW><id>15357184</id><snippet>input()</snippet></ROW><ROW><id>15357184</id><snippet>raw_input()</snippet></ROW><ROW><id>15357257</id><snippet>    self.outputbox.bind('&lt;Return&gt;', self.FireonEnter)
</snippet></ROW><ROW><id>15357257</id><snippet>import Tkinter as tk


class Application(tk.Frame):
    def __init__(self, master=None):
        tk.Frame.__init__(self, master)
        self.createWidgets()

    def createWidgets(self):
        self.outputbox = tk.Text()
        self.outputbox["width"] = 20
        self.outputbox["height"] = 1
        self.outputbox.grid()
        self.outputbox.bind('&lt;Return&gt;', self.FireonEnter)

    def FireonEnter(self, event):
        print('Enter pressed')

root = tk.Tk()
app = Application(root)
root.mainloop()
</snippet></ROW><ROW><id>15357477</id><snippet>def isfloat(x):
    try:
        a = float(x)
    except ValueError:
        return False
    else:
        return True

def isint(x):
    try:
        a = float(x)
        b = int(a)
    except ValueError:
        return False
    else:
        return a == b
</snippet></ROW><ROW><id>15357667</id><snippet>from xml.etree.ElementTree import ElementTree

et = ElementTree(document)

f = open("/tmp/test.xml", "w")
et.write(f, encoding='utf-8', xml_declaration=True) 
f.close()
</snippet></ROW><ROW><id>15358005</id><snippet>def group(seq, sep):
    g = []
    for el in seq:
        if el == sep:
            yield g
            g = []
        g.append(el)
    yield g

ex = ['A', 'WORD', 'B' , 'C' , 'WORD' , 'D']
result = list(group(ex, 'WORD'))
print(result)
</snippet></ROW><ROW><id>15358005</id><snippet>[['A'], ['WORD', 'B', 'C'], ['WORD', 'D']]
</snippet></ROW><ROW><id>15358110</id><snippet>functools.wraps</snippet></ROW><ROW><id>15358110</id><snippet>def wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES):
    def decorator(wrapper):
        return update_wrapper(wrapper, wrapped=wrapped, ...)
    return decorator
</snippet></ROW><ROW><id>15358110</id><snippet>partial</snippet></ROW><ROW><id>15358110</id><snippet> @wraps(f)
 def g():
     ...
</snippet></ROW><ROW><id>15358110</id><snippet>def g():
    ...
g = update_wrapper(g, f)
</snippet></ROW><ROW><id>15358306</id><snippet>from django.core.cache import cache


def save_viewer_tab(active, session_key, tab):
    cache.set(session_key + ":" + str(tab), int(active))


def get_viewer_tab(session_key, tab, default=0):
    return cache.get(session_key + ":" + str(tab), default)


@csrf_exempt
def update_active_tab_request(request):
    """
    Stores the active tab for a given tab item
    """
    session_key = request.session._session_key
    for tab, active in request.GET.iteritems():
        save_viewer_tab(active, session_key, tab)

    return HttpResponse("OK", status=200)
</snippet></ROW><ROW><id>15358991</id><snippet>#!/usr/bin/python

lines = open('CVE.txt').readlines()
nexpose = set([l.split(':')[1].strip() for l in lines if l.startswith('NeXpose')])
snort   = set([l.split(':')[1].strip() for l in lines if l.startswith('Snort')])

# print 'Nexpose: ', ', '.join(nexpose)
# print 'Snort  : ', ', '.join(snort)

print 'CVEs both in Nexpose and Snort  : ', ', '.join(snort.intersection(nexpose))
</snippet></ROW><ROW><id>15359172</id><snippet>req_partition = ['/', '/boot', '/home', '/usr', '/usr/local', '/var', '/tmp',    '/mnt/floppy', '/mnt/cdrom', '/dev/shm']
</snippet></ROW><ROW><id>15359172</id><snippet>req_partition = list()
with open('/path/to/partitions') as f:
    for line in f:
        req_partition.append(line.strip())
</snippet></ROW><ROW><id>15359172</id><snippet>/path/to/partitions</snippet></ROW><ROW><id>15359172</id><snippet>/
/boot
/home
/usr
/usr/local
/var
/tmp
/mnt/floppy
/mnt/cdrom
/dev/shm
</snippet></ROW><ROW><id>15359180</id><snippet>&gt;&gt;&gt; from sympy import limit, Symbol, sin, oo
&gt;&gt;&gt; x = Symbol("x")
&gt;&gt;&gt; limit(sin(x)/x, x, 0)
1
</snippet></ROW><ROW><id>15359390</id><snippet>result = [{'date': t.date, 'count': t.count, 'status': t.statusline} for t in query]
</snippet></ROW><ROW><id>15359390</id><snippet>query = session.query(HTTP.date, func.count(HTTP.statusline).
        label('count')).filter(HTTP.statusline.like('%'+status+'%'), HTTP.date&gt;=(DD)).group_by(HTTP.date).order_by(asc(HTTP.date)).all()
</snippet></ROW><ROW><id>15359390</id><snippet>.like('%'+status+'%')</snippet></ROW><ROW><id>15359390</id><snippet>.contains(status)</snippet></ROW><ROW><id>15359390</id><snippet>%</snippet></ROW><ROW><id>15359446</id><snippet>app1 = Flask(__name__)
app1.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/database1.db'
db1 = SQLAlchemy(app1)

class Lcn(db1.Model):
    __tablename__ = 'lcn'

app2 = Flask(__name__)
app2.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/database2.db'
db2 = SQLAlchemy(app2)

class LcnRemote(db2.Model):
    __tablename__ = 'lcn'
</snippet></ROW><ROW><id>15360928</id><snippet>dict</snippet></ROW><ROW><id>15360928</id><snippet>&gt;&gt;&gt; print {1:1, 9:2}
{1: 1, 9: 2}
&gt;&gt;&gt; print {9:1, 1:2}
{9: 1, 1: 2}
</snippet></ROW><ROW><id>15360928</id><snippet>2</snippet></ROW><ROW><id>15360928</id><snippet>&gt;&gt;&gt; print {9:1, 1:2, 2:4}
{9: 1, 2: 4, 1: 2}
&gt;&gt;&gt; print {1:1, 9:2, 2:4}
{1: 1, 2: 4, 9: 2}
</snippet></ROW><ROW><id>15360928</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>15361064</id><snippet># Concatenates a and b with ' - ' or Coalesces them if one is None
'-'.join([x for x in (a,b) if x])
</snippet></ROW><ROW><id>15361064</id><snippet>&gt;&gt;&gt; '-'.join([x for x in ('foo','bar') if x])
'foo-bar'
&gt;&gt;&gt; '-'.join([x for x in ('foo','') if x])
'foo'
&gt;&gt;&gt; '-'.join([x for x in ('','bar') if x])
'bar'
&gt;&gt;&gt; '-'.join([x for x in ('','') if x])
''
</snippet></ROW><ROW><id>15361231</id><snippet>SERVICE=122</snippet></ROW><ROW><id>15361231</id><snippet>service_filter = Redirector.service == 122
menu_id_select = session.query(Redirector.menu_id).filter(service_filter)
keyword_select = session.query(Redirector.keyword).filter(service_filter)
</snippet></ROW><ROW><id>15361231</id><snippet>(session
    .query(AccessStringDetails)
    .filter(AccessStringDetails.menu_id.in_(menu_id_select))
    .delete(False))
(session
    .query(TimeDetails)
    .filter(TimeDetails.menu_id.in_(menu_id_select))
    .delete(False))
(session
    .query(RedirectorInputParams)
    .filter(RedirectorInputParams.command_id.in_(keyword_select))
    .delete(False))
# etc.

session.query(Redirector).filter(service_filter).delete(False)
</snippet></ROW><ROW><id>15361231</id><snippet>Column.in_</snippet></ROW><ROW><id>15361231</id><snippet>DELETE FROM access_string_details WHERE access_string_details.menu_id IN (SELECT redirector.menu_id AS redirector_menu_id 
FROM redirector 
WHERE redirector.service = :service_1)
</snippet></ROW><ROW><id>15361231</id><snippet>:service_1</snippet></ROW><ROW><id>15361231</id><snippet>122</snippet></ROW><ROW><id>15361352</id><snippet>min(f(x), g(x))</snippet></ROW><ROW><id>15361352</id><snippet>scipy.integrate.quad</snippet></ROW><ROW><id>15361410</id><snippet>[app:xyz]
    something = True
</snippet></ROW><ROW><id>15361410</id><snippet>main</snippet></ROW><ROW><id>15361410</id><snippet>settings['something']
</snippet></ROW><ROW><id>15361537</id><snippet>x[x.columns[0]]
</snippet></ROW><ROW><id>15361746</id><snippet>&gt;&gt;&gt;d = eval("{'osFreeMem': 286494720, 'osUpTime': 19230718, 'sysload': [0.24609375, 0.62109375, 0.734375], 'nodeUpTime': 1831, 'osTotMem': 536870912, 'nodeMemory': {'heapTotal': 8766304, 'heapUsed': 7789588, 'rss': 22773760}}")
&gt;&gt;&gt;d
{'osFreeMem': 286494720, 'osUpTime': 19230718, 'sysload': [0.24609375, 0.62109375, 0.734375], nodeUpTime': 1831, 'osTotMem': 536870912, 'nodeMemory': {'heapTotal': 8766304, 'heapUsed': 7789588, 'rss': 22773760}}
</snippet></ROW><ROW><id>15361806</id><snippet>itertools.groupby</snippet></ROW><ROW><id>15361806</id><snippet>def join_dates(l):
    date = None
    for t in l:
        if len(t) == 1:
            date = t
        else:
            yield t + date
</snippet></ROW><ROW><id>15361806</id><snippet>itertools</snippet></ROW><ROW><id>15361806</id><snippet>from itertools import groupby
[t + ds[0] for ds, ts in zip(*[(list(g) for _, g in groupby(l, len))] * 2) for t in ts]
</snippet></ROW><ROW><id>15362086</id><snippet>for</snippet></ROW><ROW><id>15362086</id><snippet>for b in [B1, B2, B3]:
    b.bind("&lt;Enter&gt;", SetColor)
    b.bind("&lt;Leave&gt;", ReturnColor)
</snippet></ROW><ROW><id>15362086</id><snippet>for s in ["button 1", "button 2", "button 3"]:
    b=Button(root, text=s, bg="white")
    b.pack()
    b.bind("&lt;Enter&gt;", SetColor)
    b.bind("&lt;Leave&gt;", ReturnColor)
</snippet></ROW><ROW><id>15362086</id><snippet>for</snippet></ROW><ROW><id>15362133</id><snippet>sed -r  's/ts\(((\([^()]*\)|[^(),])*),((\([^()]*\)|[^(),])*),((\([^()]*\)|[^(),])*),((\([^()]*\)|[^(),])*)\)/ts(\1,\7,\3,\5)/g' *.F
</snippet></ROW><ROW><id>15362133</id><snippet>(        # Match and capture...
 (       # either
  \(     #  an opening parenthesis
  [^()]* #  any number of non-parenthesis characters
  \)     #  a closing parenthesis
 |       # or  
  [^(),] #  a character besides parentheses or comma
 )*      # any number of times
)        # End of capturing group
</snippet></ROW><ROW><id>15362283</id><snippet>def itertime(start, end, int_step):
    current_time = start
    step = datetime.timedelta(0, int_step)
    while current_time &lt; end:
        yield current_time
        current_time += step
</snippet></ROW><ROW><id>15362283</id><snippet>for</snippet></ROW><ROW><id>15362283</id><snippet>for time in itertime(start_time, end_time, step=5 * 60):
     ...
</snippet></ROW><ROW><id>15362283</id><snippet>Read all the measurements you want to take in account 
(use a simple query like Measurement.objects.filter(end__gte=begin_time,
     begin__lte=end_time) )
get all the nodes in your query
for each node:     
    - get the initial state of each node at "begin_time" and annotate it in
       a dictionary with the current state of each node
    - calculate a "next_change" time in each node - determine the time
        of next state change (either its begin, or its end, if the begin is in the past)
    - push then into a n ordered data structure, such as a list 
          maintained with Python's heapq based on this 
          next_state_change" time-stamp

Then start your CSV files, with headers and first value line (from the dictionary
         with the current state)
Loop through your time stamps along the snippet above, and for
               each timestamp:
      - pick measurements from your list until "nest_state_change" is
              after your timestamp. For each of them:
            - if "end" is in the future, annotate that as "next_state_change" and 
                  push it back on the heapq
            - update the device state on your nodes dictionary
      - write a new row to your CSV file
</snippet></ROW><ROW><id>15362571</id><snippet>DictVectorizer.inverse_transform</snippet></ROW><ROW><id>15362571</id><snippet>desc_vect = desc_vect.tocsr()

n_docs = desc_vect.shape[0]
tfidftables = [{} for _ in xrange(n_docs)]
terms = tfidf_vectorizer.get_feature_names()

for i, j in zip(*desc_vect.nonzero()):
    tfidftables[i][terms[j]] = X[i, j]
</snippet></ROW><ROW><id>15362762</id><snippet>numpy.lib.stride_tricks.as_strided</snippet></ROW><ROW><id>15362762</id><snippet>import numpy as np
from numpy.lib.stride_tricks import as_strided

rows, cols = 500, 500
win_rows, win_cols = 5, 5

img = np.random.rand(rows, cols)

win_img = as_strided(img, shape=(rows-win_rows+1, cols-win_cols+1,
                                 win_rows, win_cols),
                     strides=img.strides*2)
</snippet></ROW><ROW><id>15362762</id><snippet>win_img[i, j]</snippet></ROW><ROW><id>15362762</id><snippet>(win_rows, win_cols)</snippet></ROW><ROW><id>15362762</id><snippet>[i, j]</snippet></ROW><ROW><id>15362762</id><snippet>&gt;&gt;&gt; img[100:105, 100:105]
array([[ 0.34150754,  0.17888323,  0.67222354,  0.9020784 ,  0.48826682],
       [ 0.68451774,  0.14887515,  0.44892615,  0.33352743,  0.22090103],
       [ 0.41114758,  0.82608407,  0.77190533,  0.42830363,  0.57300759],
       [ 0.68435626,  0.94874394,  0.55238567,  0.40367885,  0.42955156],
       [ 0.59359203,  0.62237553,  0.58428725,  0.58608119,  0.29157555]])
&gt;&gt;&gt; win_img[100,100]
array([[ 0.34150754,  0.17888323,  0.67222354,  0.9020784 ,  0.48826682],
       [ 0.68451774,  0.14887515,  0.44892615,  0.33352743,  0.22090103],
       [ 0.41114758,  0.82608407,  0.77190533,  0.42830363,  0.57300759],
       [ 0.68435626,  0.94874394,  0.55238567,  0.40367885,  0.42955156],
       [ 0.59359203,  0.62237553,  0.58428725,  0.58608119,  0.29157555]])
</snippet></ROW><ROW><id>15362762</id><snippet>&gt;&gt;&gt; np.var(win_img, axis=(-1, -2))
</snippet></ROW><ROW><id>15362762</id><snippet>&gt;&gt;&gt; win_mean = np.sum(np.sum(win_img, axis=-1), axis=-1)/win_rows/win_cols
&gt;&gt;&gt; win_sqr_mean = np.sum(np.sum(win_img**2, axis=-1), axis=-1)/win_rows/win_cols
&gt;&gt;&gt; win_var = win_sqr_mean - win_mean**2
</snippet></ROW><ROW><id>15362762</id><snippet>win_var</snippet></ROW><ROW><id>15362762</id><snippet>&gt;&gt;&gt; win_var.shape
(496, 496)
</snippet></ROW><ROW><id>15362762</id><snippet>win_var[i, j]</snippet></ROW><ROW><id>15362762</id><snippet>(5, 5)</snippet></ROW><ROW><id>15362762</id><snippet>[i, j]</snippet></ROW><ROW><id>15363002</id><snippet>import sys
from PyQt4.QtGui import QApplication, QDialog
from ui_project import Ui_Name  # here you need to correct the names

app = QApplication(sys.argv)
window = QDialog()
ui = Ui_Name()
ui.setupUi(window)

window.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>15363018</id><snippet>func.count()</snippet></ROW><ROW><id>15363018</id><snippet>field1_count = func.count(Table1.field1)

result = session.query(Table1.field1, Table1.field2, field1_count).filter(
    Table1.user_id == self.user_id).filter(Table1.timestamp &gt; self.from_ts).group_by(
    Table1.field1, Travelog.field2).order_by(desc(field1_count)).first()
</snippet></ROW><ROW><id>15363018</id><snippet>func.count()</snippet></ROW><ROW><id>15363018</id><snippet>.label()</snippet></ROW><ROW><id>15363018</id><snippet>field1_count = func.count(Table1.field1).label('c')
</snippet></ROW><ROW><id>15363018</id><snippet>order_by</snippet></ROW><ROW><id>15363018</id><snippet>result = session.query(Table1.field1, Table1.field2, field1_count).filter(
    Table1.user_id == self.user_id).filter(Table1.timestamp &gt; self.from_ts).group_by(
    Table1.field1, Travelog.field2).order_by(desc('c')).first()
</snippet></ROW><ROW><id>15363018</id><snippet>field1_count.name</snippet></ROW><ROW><id>15363018</id><snippet>result = session.query(Table1.field1, Table1.field2, field1_count).filter(
    Table1.user_id == self.user_id).filter(Table1.timestamp &gt; self.from_ts).group_by(
    Table1.field1, Travelog.field2).order_by(desc(field1_count.name)).first()
</snippet></ROW><ROW><id>15363210</id><snippet>range(10)</snippet></ROW><ROW><id>15363210</id><snippet>[0,1,2,3,4,5,6,7,8,9]</snippet></ROW><ROW><id>15363210</id><snippet>i</snippet></ROW><ROW><id>15363210</id><snippet>i = 0
while i &lt; 10:
    # do stuff and manipulate `i` as much as you like       
    if i==5:
        i+=3

    print i

    # don't forget to increment `i` manually
    i += 1
</snippet></ROW><ROW><id>15363324</id><snippet>convert_str += SIGNED_RESOURCE_TYPE + '=' + query_string[SIGNED_RESOURCE] + '&amp;'
</snippet></ROW><ROW><id>15363324</id><snippet>convert_str += SIGNED_RESOURCE + '=' + query_string[SIGNED_RESOURCE] + '&amp;'
</snippet></ROW><ROW><id>15363324</id><snippet>blob</snippet></ROW><ROW><id>15363324</id><snippet>qry_str = sas.generate_signed_query_string('picture/xxx.jpg','blob', sap)
</snippet></ROW><ROW><id>15363324</id><snippet>qry_str = sas.generate_signed_query_string('picture/xxx.jpg','b', sap)
</snippet></ROW><ROW><id>15363521</id><snippet>for record in get:
    print record['name']
</snippet></ROW><ROW><id>15363793</id><snippet>"\1%s\2" by "\g&lt;1&gt;%s\g&lt;2&gt;"</snippet></ROW><ROW><id>15363793</id><snippet>print line,</snippet></ROW><ROW><id>15363998</id><snippet>grab_set()</snippet></ROW><ROW><id>15363998</id><snippet>grab_release()</snippet></ROW><ROW><id>15363998</id><snippet>b.grab_set() # when you show the popup
# do stuff ...
b.grab_release() # to return to normal
</snippet></ROW><ROW><id>15363998</id><snippet>withdraw()</snippet></ROW><ROW><id>15363998</id><snippet>a.withdraw()
</snippet></ROW><ROW><id>15363998</id><snippet>b</snippet></ROW><ROW><id>15363998</id><snippet>a.deiconify()
</snippet></ROW><ROW><id>15364028</id><snippet>o=open(current_dir+"\\startup.exe","wb")
o.write(startupbin)
</snippet></ROW><ROW><id>15364028</id><snippet>open()</snippet></ROW><ROW><id>15364028</id><snippet>'\n'</snippet></ROW><ROW><id>15364028</id><snippet>'b'</snippet></ROW><ROW><id>15364028</id><snippet>'b'</snippet></ROW><ROW><id>15364190</id><snippet>numpy</snippet></ROW><ROW><id>15364190</id><snippet>import sys
import numpy

numpy.set_printoptions(threshold=sys.maxint)
</snippet></ROW><ROW><id>15364190</id><snippet>numpy.set_printoptions()</snippet></ROW><ROW><id>15364190</id><snippet>sys.maxsize</snippet></ROW><ROW><id>15364190</id><snippet>numpy.set_printoptions(threshold=sys.maxsize)
</snippet></ROW><ROW><id>15364579</id><snippet>for row in reader:
    for value in row:
        edbresults = api.exploitdb.search(value)
        print (edbresults)
</snippet></ROW><ROW><id>15364616</id><snippet>time.sleep(num_seconds)</snippet></ROW><ROW><id>15364616</id><snippet>time.time()</snippet></ROW><ROW><id>15364616</id><snippet>TimeReturned</snippet></ROW><ROW><id>15364616</id><snippet>Yes</snippet></ROW><ROW><id>15364616</id><snippet>if TimeReturned &gt; time.time()</snippet></ROW><ROW><id>15364616</id><snippet>if 1005 &gt; 1001</snippet></ROW><ROW><id>15364616</id><snippet>if time.time() &gt; TimeReturned</snippet></ROW><ROW><id>15364616</id><snippet>TimeReturned</snippet></ROW><ROW><id>15364616</id><snippet>import time

survivors = 15
survivor_return_seconds = 10.0
time_survivors_left = None

while True:
    action = raw_input("Type 'x' to make survivors leave, ENTER to see how many are left: ")

    #check if survivors returned
    if time_survivors_left is not None:
        if time.time() &gt;= time_survivors_left + survivor_return_seconds:
            survivors += 5
            time_survivors_left = None
            print "Survivors came back!"

    if action == 'x':
        if time_survivors_left is not None:
            print "Survivors already left! Wait a bit!"
        else:
            survivors -= 5
            time_survivors_left = time.time()

    print "There are %s survivors left." % (survivors,)
    if time_survivors_left is not None:
        print "5 survivors will return in %.2fs" % (
            time_survivors_left + survivor_return_seconds - time.time())
</snippet></ROW><ROW><id>15364616</id><snippet>Type 'x' to make survivors leave, ENTER to see how many are left: 
There are 15 survivors left.
Type 'x' to make survivors leave, ENTER to see how many are left: 
There are 15 survivors left.
Type 'x' to make survivors leave, ENTER to see how many are left: x
There are 10 survivors left.
5 survivors will return in 9.99s
Type 'x' to make survivors leave, ENTER to see how many are left: 
There are 10 survivors left.
5 survivors will return in 9.05s
Type 'x' to make survivors leave, ENTER to see how many are left: 
There are 10 survivors left.
5 survivors will return in 7.66s
Type 'x' to make survivors leave, ENTER to see how many are left: 
There are 10 survivors left.
5 survivors will return in 6.45s
Type 'x' to make survivors leave, ENTER to see how many are left: x
Survivors already left! Wait a bit!
There are 10 survivors left.
5 survivors will return in 5.73s
Type 'x' to make survivors leave, ENTER to see how many are left: 
There are 10 survivors left.
5 survivors will return in 4.15s
Type 'x' to make survivors leave, ENTER to see how many are left: 
There are 10 survivors left.
5 survivors will return in 2.90s
Type 'x' to make survivors leave, ENTER to see how many are left: 
There are 10 survivors left.
5 survivors will return in 1.72s
Type 'x' to make survivors leave, ENTER to see how many are left: 
There are 10 survivors left.
5 survivors will return in 0.48s
Type 'x' to make survivors leave, ENTER to see how many are left: 
Survivors came back!
There are 15 survivors left.
Type 'x' to make survivors leave, ENTER to see how many are left: 
There are 15 survivors left.
Type 'x' to make survivors leave, ENTER to see how many are left: 
</snippet></ROW><ROW><id>15364870</id><snippet>HTTPRequest</snippet></ROW><ROW><id>15364870</id><snippet>fetch</snippet></ROW><ROW><id>15364870</id><snippet>request = tornado.httpclient.HTTPRequest(url=como_url, connect_timeout=20.0, request_timeout=20.0)
response = yield tornado.gen.Task(http_client.fetch, request)
</snippet></ROW><ROW><id>15365087</id><snippet>identifier = node.findtext('{http://www.eol.org/transfer/content/0.3}identifier')
</snippet></ROW><ROW><id>15365087</id><snippet>.find()</snippet></ROW><ROW><id>15365087</id><snippet>findall()</snippet></ROW><ROW><id>15365087</id><snippet>iterfind()</snippet></ROW><ROW><id>15365087</id><snippet>namespaces = {'eol': 'http://www.eol.org/transfer/content/0.3'} # add more as needed

root.findall('eol:identifier', namespaces=namespaces)
</snippet></ROW><ROW><id>15365087</id><snippet>namespaces</snippet></ROW><ROW><id>15365087</id><snippet>eol:</snippet></ROW><ROW><id>15365087</id><snippet>namespaces</snippet></ROW><ROW><id>15365087</id><snippet>{http://www.eol.org/transfer/content/0.3}identifier</snippet></ROW><ROW><id>15365087</id><snippet>lxml</snippet></ROW><ROW><id>15365087</id><snippet>.nsmap</snippet></ROW><ROW><id>15365626</id><snippet>defaultdict</snippet></ROW><ROW><id>15365626</id><snippet>a = zip(blist, alist)
for key, value in a:
    a.setdefault(k, set[]).append(v)
</snippet></ROW><ROW><id>15365626</id><snippet>zip</snippet></ROW><ROW><id>15365626</id><snippet>a</snippet></ROW><ROW><id>15365626</id><snippet>.setdefault</snippet></ROW><ROW><id>15365626</id><snippet>k</snippet></ROW><ROW><id>15365626</id><snippet>key</snippet></ROW><ROW><id>15365626</id><snippet>v</snippet></ROW><ROW><id>15365626</id><snippet>value</snippet></ROW><ROW><id>15365626</id><snippet>set[]</snippet></ROW><ROW><id>15365626</id><snippet>set</snippet></ROW><ROW><id>15365626</id><snippet>set()</snippet></ROW><ROW><id>15365626</id><snippet>set</snippet></ROW><ROW><id>15365626</id><snippet>.append</snippet></ROW><ROW><id>15365626</id><snippet>add</snippet></ROW><ROW><id>15365626</id><snippet>d = {}
a = zip(blist, alist)
for key, value in a:
    d.setdefault(key, set()).add(value)
</snippet></ROW><ROW><id>15365626</id><snippet>for k, v in d.iteritems():
    if k &gt; 5:
        print '{0}: {1}'.format(k, ','.join(v))
</snippet></ROW><ROW><id>15365738</id><snippet>' '</snippet></ROW><ROW><id>15365738</id><snippet>&gt;&gt;&gt; '{:20} {: }'.format('ydisp', 0.176)
'ydisp                 0.176'
&gt;&gt;&gt; '{:20} {: }'.format('xdisp', -0.509)
'xdisp                -0.509'
</snippet></ROW><ROW><id>15365738</id><snippet>:</snippet></ROW><ROW><id>15365738</id><snippet>-</snippet></ROW><ROW><id>15365770</id><snippet>numpy</snippet></ROW><ROW><id>15365793</id><snippet>In [1]: df = DataFrame(
        {'Address': [1000, 1001, 1002],
        'Associate Modules': [['1A', '2A', '3A'],
                              ['2A', '4A', '5A'], 
                              ['1A', '4A']]})
</snippet></ROW><ROW><id>15365793</id><snippet>In [2]: modules = df['Associate Modules'].apply(Series)
In [3]: modules.index = df['Address']
In [4]: modules
Out[4]: 
          0   1    2
Address             
1000     1A  2A   3A
1001     2A  4A   5A
1002     1A  4A  NaN
</snippet></ROW><ROW><id>15365793</id><snippet>In [5]: result = modules.stack()
In [6]: result.index = result.index.get_level_values(0)

In [7]: result
Out[7]: 
Address
1000       1A
1000       2A
1000       3A
1001       2A
1001       4A
1001       5A
1002       1A
1002       4A
</snippet></ROW><ROW><id>15365793</id><snippet>reset_index()</snippet></ROW><ROW><id>15366093</id><snippet>[random.random() for _ in range(100)]
</snippet></ROW><ROW><id>15366176</id><snippet>frame.pack()
# force drawing of the window
win.update_idletasks()
</snippet></ROW><ROW><id>15366176</id><snippet># insert the line in the Text widget
t.insert(tk.END, out)
# force widget to display the end of the text (follow the input)
t.see(tk.END)
# force refresh of the widget to be sure that thing are displayed
t.update_idletasks()
</snippet></ROW><ROW><id>15366268</id><snippet>do_staff</snippet></ROW><ROW><id>15366268</id><snippet>get_something</snippet></ROW><ROW><id>15366268</id><snippet>do_staff</snippet></ROW><ROW><id>15366268</id><snippet>test</snippet></ROW><ROW><id>15366268</id><snippet>def get_something(test=False):
    if test:
        return something + test_var
    return something

def do_staff(test=False):
    value = get_something(test=test)
    return doit(value)

def test():
    return do_staff(test=True)
</snippet></ROW><ROW><id>15366268</id><snippet>do_staff</snippet></ROW><ROW><id>15366268</id><snippet>is_debug_on</snippet></ROW><ROW><id>15366268</id><snippet>is_debug_on = False

def get_something():
    if is_debug_on:
        pass # Do testing stuff, print statements, etc.
    return something # Do normal stuff.

def do_staff():
    value = get_something()

def test():
    is_debug_on = True
    do_staff()
    is_debug_on = False
</snippet></ROW><ROW><id>15366268</id><snippet>logging</snippet></ROW><ROW><id>15366296</id><snippet>KDTree</snippet></ROW><ROW><id>15366296</id><snippet>def nearest_neighbors_kd_tree(x, y, k) :
    x, y = map(np.asarray, (x, y))
    tree =scipy.spatial.cKDTree(y[:, None])    
    ordered_neighbors = tree.query(x[:, None], k)[1]
    nearest_neighbor = np.empty((len(x),), dtype=np.intp)
    nearest_neighbor.fill(-1)
    used_y = set()
    for j, neigh_j in enumerate(ordered_neighbors) :
        for k in neigh_j :
            if k not in used_y :
                nearest_neighbor[j] = k
                used_y.add(k)
                break
    return nearest_neighbor
</snippet></ROW><ROW><id>15366296</id><snippet>n=1000</snippet></ROW><ROW><id>15366296</id><snippet>In [9]: np.any(nearest_neighbors_kd_tree(x, y, 12) == -1)
Out[9]: True

In [10]: np.any(nearest_neighbors_kd_tree(x, y, 13) == -1)
Out[10]: False
</snippet></ROW><ROW><id>15366296</id><snippet>k=13</snippet></ROW><ROW><id>15366296</id><snippet>In [11]: %timeit nearest_neighbors_kd_tree(x, y, 13)
100 loops, best of 3: 9.26 ms per loop
</snippet></ROW><ROW><id>15366296</id><snippet>k=1000</snippet></ROW><ROW><id>15366296</id><snippet>In [12]: %timeit nearest_neighbors_kd_tree(x, y, 1000)
1 loops, best of 3: 424 ms per loop
</snippet></ROW><ROW><id>15366296</id><snippet>In [13]: %timeit nearest_neighbors(x, y)
10 loops, best of 3: 60 ms per loop

In [14]: %timeit nearest_neighbors_sorted(x, y)
10 loops, best of 3: 47.4 ms per loop
</snippet></ROW><ROW><id>15366296</id><snippet>def nearest_neighbors_sorted(x, y) :
    x, y = map(np.asarray, (x, y))
    y_idx = np.argsort(y)
    y = y[y_idx]
    nearest_neighbor = np.empty((len(x),), dtype=np.intp)
    for j, xj in enumerate(x) :
        idx = np.searchsorted(y, xj)
        if idx == len(y) or idx != 0 and y[idx] - xj &gt; xj - y[idx-1] :
            idx -= 1
        nearest_neighbor[j] = y_idx[idx]
        y = np.delete(y, idx)
        y_idx = np.delete(y_idx, idx)
    return nearest_neighbor
</snippet></ROW><ROW><id>15366296</id><snippet>In [2]: %timeit nearest_neighbors_sorted(x, y)
1 loops, best of 3: 557 ms per loop

In [3]: %timeit nearest_neighbors(x, y)
1 loops, best of 3: 1.53 s per loop
</snippet></ROW><ROW><id>15366296</id><snippet>def nearest_neighbors(x, y) :
    x, y = map(np.asarray, (x, y))
    y = y.copy()
    y_idx = np.arange(len(y))
    nearest_neighbor = np.empty((len(x),), dtype=np.intp)
    for j, xj in enumerate(x) :
        idx = np.argmin(np.abs(y - xj))
        nearest_neighbor[j] = y_idx[idx]
        y = np.delete(y, idx)
        y_idx = np.delete(y_idx, idx)

    return nearest_neighbor
</snippet></ROW><ROW><id>15366296</id><snippet>n = 1000
x = np.random.rand(n)
y = np.random.rand(2*n)
</snippet></ROW><ROW><id>15366296</id><snippet>In [11]: %timeit nearest_neighbors(x, y)
10 loops, best of 3: 52.4 ms per loop
</snippet></ROW><ROW><id>15366303</id><snippet>import xlrd

book = xlrd.open_workbook('trend.xls')
sheet = book.sheet_by_index(0)

unique_combinations = {}

for row_index in range(sheet.nrows):
    cell_1 = sheet.cell(row_index, 0)
    cell_2 = sheet.cell(row_index, 1)
    cell_3 = sheet.cell(row_index, 2)
    unique_combo = (cell_1.value, int(cell_2.value))
    if unique_combinations.has_key(unique_combo):
        unique_combinations[unique_combo].append(cell_3.value)
    else:
        unique_combinations[unique_combo] = [cell_3.value]

for k in unique_combinations.keys():
    values = unique_combinations[k]
    average = sum(values ) / len(values )
    print '%s - %s = %s' % (k[0], k[1], average)
</snippet></ROW><ROW><id>15366348</id><snippet>In [49]: %timeit np.hstack(lst*1000)
10 loops, best of 3: 25.2 ms per loop

In [50]: %timeit np.array(list(chain.from_iterable(lst*1000)))
1000 loops, best of 3: 1.81 ms per loop

In [52]: %timeit np.fromiter(chain.from_iterable(lst*1000), dtype='int')
1000 loops, best of 3: 1 ms per loop
</snippet></ROW><ROW><id>15366400</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; x = "From: Joyce IP: 192.111.1.1 Source: 192.168.1.1"
&gt;&gt;&gt; re.sub(r'\w+:\s', '', x)
'Joyce 192.111.1.1 192.168.1.1'
</snippet></ROW><ROW><id>15366400</id><snippet>re.findall()</snippet></ROW><ROW><id>15366400</id><snippet>&gt;&gt;&gt; ' '.join(re.findall(r'(?&lt;=:\s)\S+', x))
'Joyce 192.111.1.1 192.168.1.1'
</snippet></ROW><ROW><id>15366400</id><snippet>\s</snippet></ROW><ROW><id>15366406</id><snippet>zorder</snippet></ROW><ROW><id>15366406</id><snippet>pyplot.Line2D((x1, x2), (y1, y2), color='red', zorder = 1)</snippet></ROW><ROW><id>15366443</id><snippet>&gt;&gt;&gt; import functools
&gt;&gt;&gt; def iterate(fn):
    def repeater(arg, _count=1):
        for i in range(_count):
            arg = fn(arg)
        return arg
    count = 0
    while True:
        yield functools.partial(repeater, _count=count)
        count += 1


&gt;&gt;&gt; i = iterate(double)
&gt;&gt;&gt; f, f2, f3, f4 = next(i), next(i), next(i), next(i)
&gt;&gt;&gt; f(3), f2(3), f3(3), f4(3)
(3, 6, 12, 24)
&gt;&gt;&gt; f(3), f2(3), f3(3), f4(3)
(3, 6, 12, 24)
</snippet></ROW><ROW><id>15366509</id><snippet>print (t.getstatus())</snippet></ROW><ROW><id>15366509</id><snippet>getstatus</snippet></ROW><ROW><id>15366509</id><snippet>instance at 0x0198D3A0</snippet></ROW><ROW><id>15366509</id><snippet>status</snippet></ROW><ROW><id>15366545</id><snippet>key = list(d)[0]
value = list(d.values())[0]
</snippet></ROW><ROW><id>15366545</id><snippet>key, value = list(d.items())[0]
</snippet></ROW><ROW><id>15366545</id><snippet>list</snippet></ROW><ROW><id>15366545</id><snippet>.keys()</snippet></ROW><ROW><id>15366545</id><snippet>.values()</snippet></ROW><ROW><id>15366545</id><snippet>.items()</snippet></ROW><ROW><id>15366545</id><snippet>key, = d
value, = d.values()
</snippet></ROW><ROW><id>15366545</id><snippet>(key, value), = d.items()
</snippet></ROW><ROW><id>15366773</id><snippet>self.ax.imshow(arr, cmap = plt.cm.spring, interpolation = 'none')</snippet></ROW><ROW><id>15367058</id><snippet>In [73]: output = range(10)

In [74]: for item in output:
   ....:     output.remove(item)
</snippet></ROW><ROW><id>15367058</id><snippet>output</snippet></ROW><ROW><id>15367058</id><snippet>In [75]: output
Out[75]: [1, 3, 5, 7, 9]
</snippet></ROW><ROW><id>15367058</id><snippet>for-loop</snippet></ROW><ROW><id>15367058</id><snippet>output.remove(item)
</snippet></ROW><ROW><id>15367058</id><snippet>output</snippet></ROW><ROW><id>15367058</id><snippet>output[1]</snippet></ROW><ROW><id>15367058</id><snippet>0  &lt;-- first item removed
1  &lt;-- the new output[0] ** THIS ONE GETS SKIPPED **
2  &lt;-- the new output[1] -- gets removed on the next iteration 
</snippet></ROW><ROW><id>15367058</id><snippet>output</snippet></ROW><ROW><id>15367058</id><snippet>new_output = []
for word in output:
    x = wn.synsets(word) 
    if len(x)&gt;=1:
        new_output.append(word)
</snippet></ROW><ROW><id>15367150</id><snippet>results</snippet></ROW><ROW><id>15367150</id><snippet>counter</snippet></ROW><ROW><id>15367150</id><snippet>sorted_results</snippet></ROW><ROW><id>15367150</id><snippet>import csv
from collections import Counter
import operator

def parse_files(dataset_path,f):  # please avoid using reserved words like file
    threads = range(0,16,2)
    dataset = csv.reader(open(dataset_path,'rb'), delimiter=',')
    results = []
    for line in dataset:
        counter = {str(x):[] for x in range(0,8,2)}
        # map(lambda x:counter[line[x+1]].append(line[x]), threads)
        # map(lambda ...) is just a more pythonic way to write the following two lines
        for index in threads:
            counter[line[index+1]].append(line[index])
        # now counter is something like 
        #{'0': ['c', 'l'], '2': ['a', 'm'], '4': ['mi', 's'], '6': ['b', 'G']}

        results.extend([','.join(v)+'='+k for k,v in counter.items()])
        # in results, I'm appending something like this:
        # {'c,l=6', 'a,m=0', 'b,mi=2', 'G,s=4'}

    sorted_results = sorted(dict(Counter(results)).iteritems(), key=operator.itemgetter(1), reverse=True)
    print '\n'.join(['The couple %s appears %d times'%el for el in sorted_results])

    # &gt;&gt;&gt; The couple a,b=2 appears 2 times
    # &gt;&gt;&gt; The couple c,m=4 appears 2 times
    # &gt;&gt;&gt; The couple G,s=4 appears 2 times
    # &gt;&gt;&gt; The couple c,mi=6 appears 1 times
    # &gt;&gt;&gt; The couple a,m=2 appears 1 times
    # &gt;&gt;&gt; ...
</snippet></ROW><ROW><id>15367376</id><snippet>    parser = LH.HTMLParser()
    parser.feed(data)
    root = parser.close()
    m = root.xpath('//meta[@property]')
</snippet></ROW><ROW><id>15367376</id><snippet>import sys
import lxml.html as LH
import lxml.etree as ET

data = '''
&lt;!DOCTYPE html&gt;
&lt;!--[if lt IE 7]&gt; &lt;html class="ie6"&gt; &lt;![endif]--&gt;
&lt;!--[if IE 7]&gt;    &lt;html class="ie7"&gt; &lt;![endif]--&gt;
&lt;!--[if IE 8]&gt;    &lt;html class="ie8"&gt; &lt;![endif]--&gt;
&lt;!--[if gt IE 8]&gt;&lt;!--&gt; &lt;html&gt; &lt;!--&lt;![endif]--&gt;
&lt;head profile="http://gmpg.org/xfn/11"&gt;
 &lt;meta charset="UTF-8"&gt;
 &lt;title&gt;
     Erased US data shows 1 in 4 missiles in Afghan airstrikes now fired by drone: The Bureau of Investigative Journalism  &lt;/title&gt;

 &lt;meta name="description" content="Drone data has been wiped from the Air Force website."&gt;

 &lt;meta name="generator" content="Magicalia 2010" /&gt;
 &lt;meta name="google-site-verification" content="bGFVI6kAZGjMNNiS6LGvBDWSGydwyWQI3gogCD4xP50" /&gt;

 &lt;link href="http://cdn-images.mailchimp.com/embedcode/slim-081711.css" rel="stylesheet" type="text/css"&gt;
 &lt;link rel="stylesheet" href="http://www.thebureauinvestigates.com/wp-content/themes/dxw_magicalia/css/screen.css" type="text/css" media="screen, projection" /&gt;
 &lt;link rel="stylesheet" href="http://www.thebureauinvestigates.com/wp-content/themes/dxw_magicalia/css/print.css" type="text/css" media="print" /&gt;
 &lt;link rel="stylesheet" href="http://www.thebureauinvestigates.com/wp-content/themes/dxw_magicalia/style.css?3" type="text/css" media="screen, projection" /&gt;

 &lt;!--[if IE]&gt;
   &lt;link rel="stylesheet" href="http://www.thebureauinvestigates.com/wp-content/themes/dxw_magicalia/css/lib/ie.css" type="text/css" media="screen, projection" /&gt;
 &lt;![endif]--&gt;

 &lt;!--[if lt IE 7]&gt;
   &lt;script defer type="text/javascript" src="http://www.thebureauinvestigates.com/wp-content/themes/dxw_magicalia/js/pngfix.js"&gt;&lt;/script&gt;
 &lt;![endif]--&gt;

 &lt;!--[if gte IE 5.5]&gt;
   &lt;script language="javaScript" src="http://www.thebureauinvestigates.com/wp-content/themes/dxw_magicalia/js/dhtml.js" type="text/javaScript"&gt;&lt;/script&gt;
 &lt;![endif]--&gt;

 &lt;link rel="alternate" type="application/rss+xml" title="The Bureau of Investigative Journalism RSS Feed" href="http://www.thebureauinvestigates.com/feed/" /&gt;
 &lt;link rel="pingback" href="http://www.thebureauinvestigates.com/xmlrpc.php" /&gt;

 &lt;link rel="alternate" type="application/rss+xml" title="The Bureau of Investigative Journalism Â» Erased US data shows 1 in 4 missiles in Afghan airstrikes now fired by drone Comments Feed" href="http://www.thebureauinvestigates.com/2013/03/12/erased-us-data-shows-1-in-4-missiles-in-afghan-airstrikes-now-fired-by-drone/feed/" /&gt;
&lt;link rel='stylesheet' id='mailchimp-css'  href='http://www.thebureauinvestigates.com/wp-content/themes/dxw_magicalia/lib/mailchimp.dev.css?ver=3.5.1' type='text/css' media='all' /&gt;
&lt;link rel='stylesheet' id='donate-css'  href='http://www.thebureauinvestigates.com/wp-content/themes/dxw_magicalia/lib/donate.dev.css?ver=3.5.1' type='text/css' media='all' /&gt;
&lt;link rel='stylesheet' id='tubepress-css'  href='http://www.thebureauinvestigates.com/wp-content/plugins/tubepress/src/main/web/css/tubepress.css?ver=3.5.1' type='text/css' media='all' /&gt;
&lt;link rel='stylesheet' id='NextGEN-css'  href='http://www.thebureauinvestigates.com/wp-content/plugins/nextgen-gallery/css/nggallery.css?ver=1.0.0' type='text/css' media='screen' /&gt;
&lt;link rel='stylesheet' id='shutter-css'  href='http://www.thebureauinvestigates.com/wp-content/plugins/nextgen-gallery/shutter/shutter-reloaded.css?ver=1.3.4' type='text/css' media='screen' /&gt;
&lt;link rel='stylesheet' id='stbCSS-css'  href='http://www.thebureauinvestigates.com/wp-content/plugins/wp-special-textboxes/css/wp-special-textboxes.css.php?ver=4.3.72' type='text/css' media='all' /&gt;
&lt;link rel='stylesheet' id='grid-css'  href='http://www.thebureauinvestigates.com/wp-content/plugins/big-brother/css/grid.css?ver=3.5.1' type='text/css' media='all' /&gt;
&lt;link rel='stylesheet' id='reveal-css'  href='http://www.thebureauinvestigates.com/wp-content/plugins/big-brother/css/reveal.css?ver=3.5.1' type='text/css' media='all' /&gt;
&lt;link rel='stylesheet' id='app-css'  href='http://www.thebureauinvestigates.com/wp-content/plugins/big-brother/css/app.css?ver=3.5.1' type='text/css' media='all' /&gt;
&lt;script type='text/javascript' src='http://www.thebureauinvestigates.com/wp-includes/js/jquery/jquery.js?ver=1.8.3'&gt;&lt;/script&gt;
&lt;script type='text/javascript' src='http://www.thebureauinvestigates.com/wp-content/plugins/tubepress/src/main/web/js/tubepress.js?ver=3.5.1'&gt;&lt;/script&gt;
&lt;script type='text/javascript' src='http://www.thebureauinvestigates.com/wp-content/themes/dxw_magicalia/js/jquery.cycle.js?ver=3.5.1'&gt;&lt;/script&gt;
&lt;script type='text/javascript' src='http://www.thebureauinvestigates.com/wp-content/themes/dxw_magicalia/js/search.js?ver=3.5.1'&gt;&lt;/script&gt;
&lt;script type='text/javascript' src='http://www.thebureauinvestigates.com/wp-content/themes/dxw_magicalia/js/nav/superfish.js?ver=3.5.1'&gt;&lt;/script&gt;
&lt;script type='text/javascript' src='http://www.thebureauinvestigates.com/wp-content/themes/dxw_magicalia/js/nav/supersubs.js?ver=3.5.1'&gt;&lt;/script&gt;
&lt;script type='text/javascript' src='http://www.thebureauinvestigates.com/wp-content/themes/dxw_magicalia/js/home.js?ver=3.5.1'&gt;&lt;/sc
'''

if __name__ == '__main__':

    print("%-20s: %s" % ('Python',           sys.version_info))
    print("%-20s: %s" % ('lxml.etree',       ET.LXML_VERSION))
    print("%-20s: %s" % ('libxml used',      ET.LIBXML_VERSION))
    print("%-20s: %s" % ('libxml compiled',  ET.LIBXML_COMPILED_VERSION))
    print("%-20s: %s" % ('libxslt used',     ET.LIBXSLT_VERSION))
    print("%-20s: %s" % ('libxslt compiled', ET.LIBXSLT_COMPILED_VERSION))

    n = 0
    while True:
        n += 1
        print '-', n
        parser = LH.HTMLParser()
        parser.feed(data)
        root = parser.close()
        m = root.xpath('//meta[@property]')
        for i in m:
            print(n)
</snippet></ROW><ROW><id>15367376</id><snippet>% test.py
Python              : sys.version_info(major=2, minor=7, micro=2, releaselevel='final', serial=0)
lxml.etree          : (2, 3, 0, 0)
libxml used         : (2, 7, 8)
libxml compiled     : (2, 7, 8)
libxslt used        : (1, 1, 26)
libxslt compiled    : (1, 1, 26)
- 1
- 2
- 3
- 4
- 5
...
</snippet></ROW><ROW><id>15367466</id><snippet>pip install biopython</snippet></ROW><ROW><id>15367466</id><snippet>from Bio import trie
import string


def get_trie(dictfile='/usr/share/dict/american-english'):
    tr = trie.trie()
    with open(dictfile) as f:
        for line in f:
            word = line.rstrip()
            try:
                word = word.encode(encoding='ascii', errors='ignore')
                tr[word] = len(word)
                assert tr.has_key(word), "Missing %s" % word
            except UnicodeDecodeError:
                pass
    return tr


def get_trie_word(tr, s):
    for end in reversed(range(len(s))):
        word = s[:end + 1]
        if tr.has_key(word): 
            return word, s[end + 1: ]
    return None, s

def main(s):
    tr = get_trie()
    while s:
        word, s = get_trie_word(tr, s)
        print word

if __name__ == '__main__':
    s = "Imageclassificationmethodscan beroughlydividedinto two broad families of approaches:"
    s = s.strip(string.punctuation)
    s = s.replace(" ", '')
    s = s.lower()
    main(s)
</snippet></ROW><ROW><id>15367466</id><snippet>&gt;&gt;&gt; if __name__ == '__main__':
...     s = "Imageclassificationmethodscan beroughlydividedinto two broad families of approaches:"
...     s = s.strip(string.punctuation)
...     s = s.replace(" ", '')
...     s = s.lower()
...     main(s)
... 
image
classification
methods
can
be
roughly
divided
into
two
broad
families
of
approaches
</snippet></ROW><ROW><id>15367466</id><snippet>&gt;&gt;&gt; main("expertsexchange")
experts
exchange
</snippet></ROW><ROW><id>15367517</id><snippet>os</snippet></ROW><ROW><id>15367517</id><snippet>import sys
import os

def call_legacy_func(func, *args, **opts):
    prev = os.path.abspath(os.getcwd()) # Save the real cwd
    try:
        # Get the child's physical location.
        func_path = sys.modules[func.__module__].__file__
    except:
        # Die; we got passed a built-in function (no __file__)
        # Or you could just call it, I guess: return func(*args, **opts)
        return None

    # Change to the expected directory and run the function.
    os.chdir(func_path)
    result = func(*args, **opts)

    # Fix the cwd, and return.
    os.chdir(prev)
    return result

import ChildOneScript.ChildOne as ChildOne
call_legacy_func(ChildOne.myChildFunction, 0, 1, kwarg=False)
</snippet></ROW><ROW><id>15367702</id><snippet>resarr = [[0]*j]*i
</snippet></ROW><ROW><id>15367702</id><snippet>i</snippet></ROW><ROW><id>15367702</id><snippet>[0]*j</snippet></ROW><ROW><id>15367702</id><snippet>resarr = [[0]*j for _ in range(i)]
</snippet></ROW><ROW><id>15367702</id><snippet>[0, 0, ...]</snippet></ROW><ROW><id>15367702</id><snippet>i</snippet></ROW><ROW><id>15367702</id><snippet>&gt;&gt;&gt; a = [0] * 4
&gt;&gt;&gt; a
[0, 0, 0, 0]
&gt;&gt;&gt; b = [a] * 4
&gt;&gt;&gt; b
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
&gt;&gt;&gt; id(b[0])     # get the "address" of b[0]
42848200
&gt;&gt;&gt; id(b[1])     # b[1] is the same object!
42848200
&gt;&gt;&gt; b[0][0] = 1
&gt;&gt;&gt; b
[[1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0], [1, 0, 0, 0]]
</snippet></ROW><ROW><id>15367806</id><snippet>if</snippet></ROW><ROW><id>15367806</id><snippet>T</snippet></ROW><ROW><id>15367806</id><snippet>def temp_sky(lreq, breq):
    T = &lt;some_default_value&gt; # None is often a good pick
    for line in tfile:
        data = line.split()
        if ( abs(float(data[0]) - lreq) &lt;= 0.1 and abs(float(data[1]) - breq) &lt;= 0.1):            
            T= data[2]
    return T
</snippet></ROW><ROW><id>15367870</id><snippet>&gt;&gt;&gt; print "one",1,"two",2
one 1 two 2
</snippet></ROW><ROW><id>15367870</id><snippet>&gt;&gt;&gt; print("one",1,"two",2)
one 1 two 2
</snippet></ROW><ROW><id>15367924</id><snippet>toPlainText</snippet></ROW><ROW><id>15367924</id><snippet>&gt;&gt;&gt; str("Ã©")
'\x82'
&gt;&gt;&gt; unicode(str("Ã©"))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
UnicodeDecodeError: 'ascii' codec can't decode byte 0x82 in position 0: ordinal
not in range(128)
</snippet></ROW><ROW><id>15367924</id><snippet>&gt;&gt;&gt; unicode(str("Ã©"), 'latin_1')
u'\x82'
</snippet></ROW><ROW><id>15367981</id><snippet>sys.stdout.filename.flush()
</snippet></ROW><ROW><id>15367981</id><snippet>import functools
class Tee(object):
    def __init__(self, name, mode)
    .
    .
    for name in ('write', 'flush', ...):
        setattr(self, name, functools.partial(self._wrapper, name))

    def _wrapper(func_name, *args, **kw):
        getattr(self.filename, name)(*args, **kw)
        getattr(self.stdout, name)(*args, **kw)
</snippet></ROW><ROW><id>15368107</id><snippet>setup</snippet></ROW><ROW><id>15368107</id><snippet>setup(
    name = "mytestmodule",
    version = "0.0.1",
    description = ("A simple module."),
    packages=['mymodule', 'mymodule.subdir'],
)
</snippet></ROW><ROW><id>15368107</id><snippet>setuptools</snippet></ROW><ROW><id>15368107</id><snippet>find_packages</snippet></ROW><ROW><id>15368107</id><snippet>from setuptools import setup, find_packages
setup(
    name = "mytestmodule",
    version = "0.0.1",
    description = ("A simple module."),
    packages=find_packages(),
)
</snippet></ROW><ROW><id>15368107</id><snippet>__init__.py</snippet></ROW><ROW><id>15368205</id><snippet>'--dbpath C:\\dropbox\\projects\\mongodb'</snippet></ROW><ROW><id>15368205</id><snippet>'--dbpath', 'C:\\dropbox\\projects\\mongodb'</snippet></ROW><ROW><id>15368205</id><snippet>--dbpath</snippet></ROW><ROW><id>15368205</id><snippet>----dbpath</snippet></ROW><ROW><id>15368205</id><snippet>mongod</snippet></ROW><ROW><id>15368205</id><snippet>C:\\mongodb\\bin\\mongod "----dbpath C:\\dropbox\\projects\\mongodb"
</snippet></ROW><ROW><id>15368258</id><snippet>lst = [t[:1] + tuple(t[1].split(' - ')) if len(t) == 2 else t for t in data]
</snippet></ROW><ROW><id>15368258</id><snippet>for i in data:
    if len(i) == 2:
        i = i[:1] + tuple(i[1].split(' - '))
    lst.append(i)
</snippet></ROW><ROW><id>15368286</id><snippet>if 'error' in self.dict1:
    raise ValueError("%s: %s" % (self.dict1["error"], self.dict1["message"]))
</snippet></ROW><ROW><id>15368321</id><snippet>parser.add_argument('directory',help='directory to use',action='store')
</snippet></ROW><ROW><id>15368321</id><snippet>args = parser.parse_args()</snippet></ROW><ROW><id>15368321</id><snippet>args</snippet></ROW><ROW><id>15368321</id><snippet>$ python test.py /foo/bar/baz
Namespace(directory='/foo/bar/baz', dump=False, fake=False, verbose=False)
$ python test.py
usage: test.py [-h] [-v] [-d] [-f] directory
test.py: error: too few arguments
</snippet></ROW><ROW><id>15368530</id><snippet>QGridLayout</snippet></ROW><ROW><id>15368530</id><snippet>Button_input1</snippet></ROW><ROW><id>15368530</id><snippet>vBox_rigth</snippet></ROW><ROW><id>15368530</id><snippet>    grid = QtGui.QGridLayout(cWidget)
    ......
    grid.addWidget(Button_input1, 0, 0)
    ......
    grid.addLayout(vBox_rigth, 0, 1)
</snippet></ROW><ROW><id>15368530</id><snippet>addWidget</snippet></ROW><ROW><id>15368530</id><snippet>vBox_left</snippet></ROW><ROW><id>15368530</id><snippet>
    Button_input1 = QtGui.QPushButton("Reference Polygons")
    &lt;b&gt;vBox_left.addWidget(Button_input1)&lt;/b&gt;

    Button_input2 = QtGui.QPushButton("Segmented Polygons")
    &lt;b&gt;vBox_left.addWidget(Button_input2)&lt;/b&gt;

    Button_output = QtGui.QPushButton("Save")
    &lt;b&gt;vBox_left.addWidget(Button_output)&lt;/b&gt;

    Button_start = QtGui.QPushButton("Start")
    Button_start.setCheckable(True)

    &lt;b&gt;vBox_left.addWidget(Button_input1)&lt;/b&gt;
    &lt;b&gt;vBox_left.addWidget(Button_input2)&lt;/b&gt;
    &lt;b&gt;vBox_left.addWidget(Button_output)&lt;/b&gt;
    vBox_left.addWidget(Button_start)
</snippet></ROW><ROW><id>15368530</id><snippet>vBox_left</snippet></ROW><ROW><id>15368530</id><snippet>grid</snippet></ROW><ROW><id>15368530</id><snippet>    grid.addWidget(Button_input1, 0, 0)
    grid.addWidget(Button_input2, 1, 0)
    grid.addWidget(Button_output, 2, 0)
    grid.addWidget(Button_start, 3, 0)
</snippet></ROW><ROW><id>15368530</id><snippet>font</snippet></ROW><ROW><id>15368530</id><snippet>    ke = QtGui.QRadioButton("Ke et al.", cWidget)
    font = QtGui.QFont("Times", 10)
    font.setItalic(True)
    ke.setFont(font)
</snippet></ROW><ROW><id>15368530</id><snippet>QLabel</snippet></ROW><ROW><id>15368530</id><snippet>    ke_label = QtGui.QLabel("Ke &lt;i&gt;et al&lt;/i&gt;.")
</snippet></ROW><ROW><id>15368530</id><snippet>__init__</snippet></ROW><ROW><id>15368530</id><snippet>    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        # title of the window
        self.setWindowTitle('Segmentation Accuracy')
        # fix window size
        self.setFixedSize(400,200)
        # status bar with initial message
        self.statusBar().showMessage('ready')


        # Layout
        # contiene gli altri widget
        cWidget = QtGui.QWidget(self)
        grid = QtGui.QGridLayout(cWidget)

        # Box Left
        vBox_left = QtGui.QVBoxLayout()
        vBox_left.setSpacing(2) #set spacing

        Button_input1 = QtGui.QPushButton("Reference Polygons")
        vBox_left.addWidget(Button_input1)

        Button_input2 = QtGui.QPushButton("Segmented Polygons")
        vBox_left.addWidget(Button_input2)

        Button_output = QtGui.QPushButton("Save")
        vBox_left.addWidget(Button_output)

        Button_start = QtGui.QPushButton("Start")
        Button_start.setCheckable(True)

        # vBox_left.addWidget(Button_input1)
        # vBox_left.addWidget(Button_input2)
        # vBox_left.addWidget(Button_output)
        vBox_left.addWidget(Button_start)

        # Box right
        vBox_right = QtGui.QVBoxLayout()
        vBox_right.setSpacing(10) #set spacing

        ke = QtGui.QRadioButton("", cWidget)
        pu = QtGui.QRadioButton("", cWidget)
        clinton = QtGui.QRadioButton("", cWidget)
        ke.setChecked(True)

        ke_label = QtGui.QLabel("Ke &lt;i&gt;et al&lt;/i&gt;.", cWidget)
        pu_label = QtGui.QLabel("Pu et al.", cWidget)
        clinton_label = QtGui.QLabel("Clinton et al.", cWidget)

        grid_right = QtGui.QGridLayout()

        grid_right.addWidget(ke, 0, 0)
        grid_right.addWidget(pu, 1, 0)
        grid_right.addWidget(clinton, 2, 0)
        grid_right.addWidget(ke_label, 0, 1)
        grid_right.addWidget(pu_label, 1, 1)
        grid_right.addWidget(clinton_label, 2, 1)
        grid.addLayout(grid_right, 0, 1)

        grid.setColumnStretch(0, 1)
        grid.setColumnStretch(1, 1)
        grid_right.setColumnStretch(1, 1)

        ke.setStatusTip("Ke et al., 2010. Remote Sensing of Environment, 114, pp. 1141-1154")
        pu.setStatusTip("Pu et al., 2012. Remote Sensing of Environment, 124, pp. 516-533")
        clinton.setStatusTip("Clinton et al., 2012. Remote Sensing of Environment, 124, pp. 516-533")


        ke_label.setStatusTip("Ke et al., 2010. Remote Sensing of Environment, 114, pp. 1141-1154")
        pu_label.setStatusTip("Pu et al., 2012. Remote Sensing of Environment, 124, pp. 516-533")
        clinton_label.setStatusTip("Clinton et al., 2012. Remote Sensing of Environment, 124, pp. 516-533")

        # grid.addWidget(Button_input1, 0, 0)
        # grid.addWidget(Button_input2, 1, 0)
        # grid.addWidget(Button_output, 2, 0)
        # grid.addWidget(Button_start, 3, 0)
        grid.addLayout(vBox_left, 0, 0)
        #grid.addLayout(vBox_right, 0, 1)


        # cWidget.setLayout(grid)
        self.setCentralWidget(cWidget)
</snippet></ROW><ROW><id>15369082</id><snippet>pip</snippet></ROW><ROW><id>15369082</id><snippet>easy_install</snippet></ROW><ROW><id>15369082</id><snippet>/opt/local/...</snippet></ROW><ROW><id>15369082</id><snippet>readlink `which pip`
</snippet></ROW><ROW><id>15369082</id><snippet>sudo port install py-pip
</snippet></ROW><ROW><id>15369082</id><snippet>which pip</snippet></ROW><ROW><id>15369082</id><snippet>askewchan@rock:~$ which pip
/opt/local/bin/pip
askewchan@rock:~$ readlink `which pip`
/opt/local/Library/Frameworks/Python.framework/Versions/2.7/bin/pip-2.7
</snippet></ROW><ROW><id>15369082</id><snippet>easy_install</snippet></ROW><ROW><id>15369082</id><snippet>py-distribute</snippet></ROW><ROW><id>15369082</id><snippet>sudo port install py-distribute
</snippet></ROW><ROW><id>15369082</id><snippet>easy_install</snippet></ROW><ROW><id>15369082</id><snippet>easy_install</snippet></ROW><ROW><id>15369082</id><snippet>pip</snippet></ROW><ROW><id>15369082</id><snippet>askewchan@rock:Tracking {master *}$ port search *easy*install*
py-pip @1.2.1 (python, www)
    An easy_install replacement

askewchan@rock:Tracking {master *}$ port search py*distribute
py-distribute @0.6.35 (python, devel)
    Replacement for setuptools
</snippet></ROW><ROW><id>15369171</id><snippet>ls</snippet></ROW><ROW><id>15369171</id><snippet>selected</snippet></ROW><ROW><id>15369171</id><snippet>ls(sl=True)</snippet></ROW><ROW><id>15369171</id><snippet>PyNode</snippet></ROW><ROW><id>15369171</id><snippet>nodeType</snippet></ROW><ROW><id>15369171</id><snippet>pymel.core.Component</snippet></ROW><ROW><id>15369171</id><snippet>MeshVertex</snippet></ROW><ROW><id>15369171</id><snippet>isinstance(obj, type_sequence)</snippet></ROW><ROW><id>15369171</id><snippet>filter(lambda x: isinstance(x, (pm.MeshVertex, pm.MeshEdge, pm.MeshFace)), pm.selected())
</snippet></ROW><ROW><id>15369171</id><snippet>general</snippet></ROW><ROW><id>15369266</id><snippet>result = max( the_list, key=lambda item:item['likes']['count'] )
</snippet></ROW><ROW><id>15369420</id><snippet>   def find_font_file(query):
       matches = filter(lambda path: query in os.path.basename(path), fontman.findSystemFonts())
       return matches
</snippet></ROW><ROW><id>15369733</id><snippet>cmd</snippet></ROW><ROW><id>15369848</id><snippet># pseudocode 
def display_text(text):
    lines = text.splitlines()
    while lines remaining:
        display next N lines
        wait for key press
</snippet></ROW><ROW><id>15370116</id><snippet>&gt;&gt;&gt; cols = 4
&gt;&gt;&gt; rows = 3
&gt;&gt;&gt; [0] * cols
[0, 0, 0, 0]
&gt;&gt;&gt; [[0] * cols] * rows
[[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]
</snippet></ROW><ROW><id>15370116</id><snippet>def create_empty_universum(cols, rows, cell=0):
    return [[cell] * cols] * rows
</snippet></ROW><ROW><id>15370116</id><snippet>[[0]*cols for i in range(rows)]</snippet></ROW><ROW><id>15370357</id><snippet>import lxml.etree as ET
import lxml.builder
import glob

dbchangelog = 'http://www.host.org/xml/ns/dbchangelog'
xsi = 'http://www.host.org/2001/XMLSchema-instance'
E = lxml.builder.ElementMaker(
    nsmap={
        None: dbchangelog,
        'xsi': xsi})

ROOT = E.databaseChangeLog
DOC = E.include

# grab all the xml files
files = [DOC(file=f) for f in glob.glob("*.xml")]

the_doc = ROOT(*files)
the_doc.attrib['{{{pre}}}schemaLocation'.format(pre=xsi)] = 'www.host.org/xml/ns/dbchangelog'

print(ET.tostring(the_doc,
                  pretty_print=True, xml_declaration=True, encoding='utf-8'))
</snippet></ROW><ROW><id>15370357</id><snippet>&lt;?xml version='1.0' encoding='utf-8'?&gt;
&lt;databaseChangeLog xmlns:xsi="http://www.host.org/2001/XMLSchema-instance" xmlns="http://www.host.org/xml/ns/dbchangelog" xsi:schemaLocation="www.host.org/xml/ns/dbchangelog"&gt;
  &lt;include file="test.xml"/&gt;
&lt;/databaseChangeLog&gt;
</snippet></ROW><ROW><id>15370366</id><snippet>file://</snippet></ROW><ROW><id>15370366</id><snippet>pwd</snippet></ROW><ROW><id>15370378</id><snippet>get_env()</snippet></ROW><ROW><id>15370378</id><snippet>build_headers()</snippet></ROW><ROW><id>15370492</id><snippet>def main(args):
    ...

main(sys.argv)
</snippet></ROW><ROW><id>15370492</id><snippet>*</snippet></ROW><ROW><id>15370492</id><snippet>def main(*args):
    ...

main(*sys.argv)
</snippet></ROW><ROW><id>15370492</id><snippet>main('foo', 'arg1', 'arg2')
</snippet></ROW><ROW><id>15370514</id><snippet>[AG]</snippet></ROW><ROW><id>15370514</id><snippet> ORF_sequences2 = re.findall(r'[AG]..ATG(?:...)*?(?:TAA|TAG|TGA)',fdna)
</snippet></ROW><ROW><id>15370514</id><snippet>A|G</snippet></ROW><ROW><id>15370514</id><snippet> ORF_sequences2 = re.findall(r'(?:A|G)..ATG(?:...)*?(?:TAA|TAG|TGA)',fdna)
</snippet></ROW><ROW><id>15370514</id><snippet>&gt;&gt;&gt; re.findall(r'[AG]..ATG(?:...)*?(?:TAA|TAG|TGA)', 'GCCATGGGGTTTTGA')
['GCCATGGGGTTTTGA']
&gt;&gt;&gt; re.findall(r'[AG]..ATG(?:...)*?(?:TAA|TAG|TGA)', 'GCATGGGGTTTTGA')
[]
</snippet></ROW><ROW><id>15370514</id><snippet>A</snippet></ROW><ROW><id>15370514</id><snippet>G(?:..)ATG(?:...)*?(?:TAA|TAG|TGA)</snippet></ROW><ROW><id>15370514</id><snippet>|</snippet></ROW><ROW><id>15370514</id><snippet>&gt;&gt;&gt; re.findall(r'A|G(?:..)ATG(?:...)*?(?:TAA|TAG|TGA)', 'A')
['A']
&gt;&gt;&gt; re.findall(r'A|G(?:..)ATG(?:...)*?(?:TAA|TAG|TGA)', 'GCCATGGGGTTTTGA')
['GCCATGGGGTTTTGA']
</snippet></ROW><ROW><id>15370514</id><snippet>(?:...)</snippet></ROW><ROW><id>15370514</id><snippet> ORF_sequences2 = re.findall(r'[AG]..ATGG..(?:...){7,}?(?:TAA|TAG|TGA)',fdna)
</snippet></ROW><ROW><id>15370514</id><snippet>A</snippet></ROW><ROW><id>15370514</id><snippet>G</snippet></ROW><ROW><id>15370514</id><snippet>ATGG</snippet></ROW><ROW><id>15370514</id><snippet>TAA</snippet></ROW><ROW><id>15370514</id><snippet>TAG</snippet></ROW><ROW><id>15370514</id><snippet>TGA</snippet></ROW><ROW><id>15370514</id><snippet>..</snippet></ROW><ROW><id>15370514</id><snippet>ATG</snippet></ROW><ROW><id>15370514</id><snippet>&gt;&gt;&gt; re.findall(r'[AG]..ATGG..(?:...){7,}?(?:TAA|TAG|TGA)', 'GCCATGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTGA')
['GCCATGGGGTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTGA']
</snippet></ROW><ROW><id>15370514</id><snippet>&gt;&gt;&gt; re.findall(r'[AG]..ATGG..(?:...){7,}?(?:TAA|TAG|TGA)', 'GCCATGGGGTTTTTTTTTTTTTTTTTTTTTTTTTGA')
['GCCATGGGGTTTTTTTTTTTTTTTTTTTTTTTTTGA']
&gt;&gt;&gt; re.findall(r'[AG]..ATGG..(?:...){7,}?(?:TAA|TAG|TGA)', 'GCATGAGGTTTTTTTTTTTTTTTTTTTTTTTTTGA')
[]
</snippet></ROW><ROW><id>15370590</id><snippet>python setup.py install
</snippet></ROW><ROW><id>15370839</id><snippet># These coordinates are for Hong Kong
dlat = "22 15 0 N"
dlong = "114 10 60 E"

dlat = dlat.split(" ")
dlong = dlong.split(" ")
</snippet></ROW><ROW><id>15370839</id><snippet>getcords</snippet></ROW><ROW><id>15370839</id><snippet># Convert the coordinates
lat = getcords(float(dlat[0]), float(dlat[1]), float(dlat[2]), dlat[3])
long = getcords(float(dlong[0]), float(dlong[1]), float(dlong[2]), dlong[3])
</snippet></ROW><ROW><id>15370839</id><snippet>long</snippet></ROW><ROW><id>15370839</id><snippet>int</snippet></ROW><ROW><id>15370839</id><snippet>In [98]: long?
Type:       type
String Form:&lt;type 'long'&gt;
Namespace:  Python builtin
</snippet></ROW><ROW><id>15370913</id><snippet>del</snippet></ROW><ROW><id>15370913</id><snippet>del</snippet></ROW><ROW><id>15370913</id><snippet>del foo
</snippet></ROW><ROW><id>15370913</id><snippet>del LOCAL_SCOPE['foo']
</snippet></ROW><ROW><id>15370913</id><snippet>massive_list = list(range(1000000))
same_massive_list = massive_list
del massive_list
</snippet></ROW><ROW><id>15370913</id><snippet>massive_list</snippet></ROW><ROW><id>15370913</id><snippet>same_massive_list</snippet></ROW><ROW><id>15370913</id><snippet>del</snippet></ROW><ROW><id>15370913</id><snippet>del</snippet></ROW><ROW><id>15370913</id><snippet>del</snippet></ROW><ROW><id>15370913</id><snippet>None</snippet></ROW><ROW><id>15370913</id><snippet>foo = list(range(1000000))
bar = foo
foo[:] = []
# Both `bar` and `foo` still refer to the original list, but now it's empty
</snippet></ROW><ROW><id>15370913</id><snippet>d.clear()</snippet></ROW><ROW><id>15370913</id><snippet>del</snippet></ROW><ROW><id>15370929</id><snippet>&lt;html&gt;
&lt;title&gt;
@Title@
&lt;/title&gt;
&lt;body&gt;
Welcome to my website - @Websitecontent@
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>15371125</id><snippet>csv</snippet></ROW><ROW><id>15371181</id><snippet>time.sleep(30)</snippet></ROW><ROW><id>15371308</id><snippet>dict.fromkeys(yourlist, 0)

&gt;&gt;&gt; l = ['a1', 'a2', 'a3', 'a4', ...
&gt;&gt;&gt; dict.fromkeys(l, 0)
{'a1': 0, 'a2': 0, 'a3': 0, 'a4': 0, ...
</snippet></ROW><ROW><id>15371399</id><snippet>if self.board[row][column] == self.board[nrow][ncolumn]:
    match == match+1
</snippet></ROW><ROW><id>15371399</id><snippet>match += 1
</snippet></ROW><ROW><id>15371595</id><snippet>s = '&gt;n269412 | AK142815 | msdfhakjfdkjfs'
print s.partition('|')[0]
</snippet></ROW><ROW><id>15371720</id><snippet>"P:\\70_parseFile\\80_FileDir\\60_FA_050"
</snippet></ROW><ROW><id>15371720</id><snippet>r"P:\70_parseFile\80_FileDir\60_FA_050"
</snippet></ROW><ROW><id>15371752</id><snippet>In [1]: d = {'banana': 3, 'orange': 5, 'apple': 5}

In [2]: sorted(d.items(), key=lambda x: (-x[1], x[0]))
Out[2]: [('apple', 5), ('orange', 5), ('banana', 3)]
</snippet></ROW><ROW><id>15371784</id><snippet>In [5]: a = np.zeros((10, 10))

In [6]: a
Out[6]: 
array([[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]])

In [7]: a[3,1] = 2.0

In [8]: a[7,4] = 17.0

In [9]: a[9,0] = 1.5
</snippet></ROW><ROW><id>15371784</id><snippet>In [11]: x, y = a.nonzero()

In [12]: zip(x,y)
Out[12]: [(3, 1), (7, 4), (9, 0)]

In [13]: nonzero = zip(x,y)
</snippet></ROW><ROW><id>15371784</id><snippet>In [17]: with open('numbers.txt', 'w+') as outf:
   ....:     for r, k in nonzero:
   ....:         outf.write('{:d} {:d} {:g}\n'.format(r, k, a[r,k]))
   ....:         

In [18]: cat numbers.txt
3 1 2
7 4 17
9 0 1.5
</snippet></ROW><ROW><id>15371784</id><snippet>fscanf</snippet></ROW><ROW><id>15371784</id><snippet>In [17]: import struct

In [19]: c = struct.Struct('=IId')

In [20]: with open('numbers.bin', 'w+') as outf:
   ....:     for r, k in nonzero:
   ....:         outf.write(c.pack(r, k, a[r,k]))
</snippet></ROW><ROW><id>15371784</id><snippet>Struct</snippet></ROW><ROW><id>15371784</id><snippet>struct</snippet></ROW><ROW><id>15371885</id><snippet>N = 6
a = range(N)
for i in xrange(N-1):
    print zip(a[:N/2], reversed(a[N/2:]))
    a = a[:1] + a[-1:] + a[1:-1]
</snippet></ROW><ROW><id>15371885</id><snippet>N</snippet></ROW><ROW><id>15371885</id><snippet>N</snippet></ROW><ROW><id>15371885</id><snippet>N</snippet></ROW><ROW><id>15371992</id><snippet>__init__.py</snippet></ROW><ROW><id>15371992</id><snippet>constants</snippet></ROW><ROW><id>15371992</id><snippet>__all__</snippet></ROW><ROW><id>15371992</id><snippet>__init__.py</snippet></ROW><ROW><id>15371992</id><snippet>from constants import *
</snippet></ROW><ROW><id>15372122</id><snippet>&gt;&gt;&gt; def test():
...     return (1, 2)
... 
&gt;&gt;&gt; thing = test()
&gt;&gt;&gt; thing
(1, 2)
&gt;&gt;&gt; type(thing)
&lt;type 'tuple'&gt;
&gt;&gt;&gt; type(thing).__name__
'tuple'
</snippet></ROW><ROW><id>15372739</id><snippet>from itertools import groupby
import os

def conc_by_name(names):
    for tail, group in groupby(names, key=os.path.split):
        with open(tail, 'w') as out:
           for name in group:
              with open(name) as f:
                  out.writelines(f)
</snippet></ROW><ROW><id>15372739</id><snippet>file1.fasta</snippet></ROW><ROW><id>15372739</id><snippet>file2.fasta</snippet></ROW><ROW><id>15372988</id><snippet>OrderedDict</snippet></ROW><ROW><id>15372988</id><snippet>from collections import OrderedDict

result = OrderedDict(zip(cursor.description, data))
</snippet></ROW><ROW><id>15372988</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; cols = ['userid', 'cid', 'mid', 'did', 'msid']
&gt;&gt;&gt; data = (29L, 35L, None, '', None)
&gt;&gt;&gt; result = OrderedDict(zip(cols, data))
&gt;&gt;&gt; result
OrderedDict([('userid', 29L), ('cid', 35L), ('mid', None), ('did', ''), ('msid', None)])
&gt;&gt;&gt; result['userid']
29L
&gt;&gt;&gt; result['cid']
35L
&gt;&gt;&gt; list(result)
['userid', 'cid', 'mid', 'did', 'msid']
</snippet></ROW><ROW><id>15373077</id><snippet>or</snippet></ROW><ROW><id>15373077</id><snippet>if Choice1.lower() == 'life':
</snippet></ROW><ROW><id>15373077</id><snippet>in</snippet></ROW><ROW><id>15373077</id><snippet>if Choice1 in ('Life', 'life'):
</snippet></ROW><ROW><id>15373077</id><snippet>or</snippet></ROW><ROW><id>15373077</id><snippet>if Choice1 == 'Life' or Choice1 == 'life':
</snippet></ROW><ROW><id>15373077</id><snippet>Choice1</snippet></ROW><ROW><id>15373077</id><snippet>Choice1 == 'Life' or 'life'</snippet></ROW><ROW><id>15373077</id><snippet>(Choice1 == 'Life') or ('life')</snippet></ROW><ROW><id>15373077</id><snippet>Choice1 == ('Life' or 'life')</snippet></ROW><ROW><id>15373077</id><snippet>'Life'</snippet></ROW><ROW><id>15373077</id><snippet>Choice1 == 'Life'</snippet></ROW><ROW><id>15373077</id><snippet>Choice</snippet></ROW><ROW><id>15373077</id><snippet>'life'</snippet></ROW><ROW><id>15373102</id><snippet>data.shape</snippet></ROW><ROW><id>15373102</id><snippet>import matplotlib.pyplot as plt
import numpy as np
column_labels = list('ABC')
row_labels = range(7)
data = np.random.rand(7,3)
fig, ax = plt.subplots()
heatmap = ax.pcolor(data, cmap=plt.cm.Blues)

# put the major ticks at the middle of each cell
ax.set_xticks(np.arange(data.shape[1])+0.5, minor=False)
ax.set_yticks(np.arange(data.shape[0])+0.5, minor=False)

# want a more natural, table-like display
ax.invert_yaxis()
ax.xaxis.tick_top()

ax.set_xticklabels(column_labels, minor=False)
ax.set_yticklabels(row_labels, minor=False)
plt.show()
</snippet></ROW><ROW><id>15373190</id><snippet>&gt;&gt;&gt; type(clon)
&lt;type 'numpy.float64'&gt;
&gt;&gt;&gt; type(lon1)
&lt;type 'float'&gt;
</snippet></ROW><ROW><id>15373190</id><snippet>drawgreatcircle()</snippet></ROW><ROW><id>15373190</id><snippet>numpy.float64</snippet></ROW><ROW><id>15373190</id><snippet>&gt;&gt;&gt; clon = float(clon)
&gt;&gt;&gt; type(clon)
&lt;type 'float'&gt;
</snippet></ROW><ROW><id>15373195</id><snippet>soup.find('div', class_='ABC').h1
</snippet></ROW><ROW><id>15373195</id><snippet>div</snippet></ROW><ROW><id>15373195</id><snippet>ABC</snippet></ROW><ROW><id>15373195</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('''
... &lt;div class="ABC"&gt;
...     &lt;h1&gt;My string&lt;/h1&gt;
... &lt;/div&gt;
... ''')
&gt;&gt;&gt; soup.find('div', class_='ABC').h1
&lt;h1&gt;My string&lt;/h1&gt;
</snippet></ROW><ROW><id>15373299</id><snippet>ihe.dcmt.hwc_settings</snippet></ROW><ROW><id>15373299</id><snippet>ihe</snippet></ROW><ROW><id>15373299</id><snippet>sys.path</snippet></ROW><ROW><id>15373299</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>15373299</id><snippet>manage.py</snippet></ROW><ROW><id>15373338</id><snippet>family</snippet></ROW><ROW><id>15373338</id><snippet>AF_INET6</snippet></ROW><ROW><id>15373338</id><snippet>socket.getaddrinfo("example.com", None, socket.AF_INET6)
</snippet></ROW><ROW><id>15373377</id><snippet>eval()</snippet></ROW><ROW><id>15373377</id><snippet>int()</snippet></ROW><ROW><id>15373377</id><snippet>num2 = int(nList[2])
# etc.
</snippet></ROW><ROW><id>15373377</id><snippet>nList[0]</snippet></ROW><ROW><id>15373377</id><snippet>if nList[0] == "sub":
</snippet></ROW><ROW><id>15373447</id><snippet>otherWord</snippet></ROW><ROW><id>15373447</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; otherWord = 'GREEN'
&gt;&gt;&gt; otherWord = Counter(otherWord)
&gt;&gt;&gt; otherWord
Counter({'E': 2, 'R': 1, 'N': 1, 'G': 1})
</snippet></ROW><ROW><id>15373447</id><snippet>if len(line) &lt;= int(maxLength):
    match = True
    for l, c in counter.items():
        if line.count(l) &lt; c:
            match = False
            break
    if match:
        listOfWords.append(line)
</snippet></ROW><ROW><id>15373447</id><snippet>match</snippet></ROW><ROW><id>15373447</id><snippet>if len(line) &lt;= int(maxLength):
    for l, c in counter.items():
        if line.count(l) &lt; c:
            break
    else:
        listOfWords.append(line)
</snippet></ROW><ROW><id>15373598</id><snippet>fid</snippet></ROW><ROW><id>15373598</id><snippet>double</snippet></ROW><ROW><id>15373598</id><snippet>from libc.stdio cimport *                                                                

cdef extern from "stdio.h":
    FILE *fdopen(int, const char *)

import numpy as np
cimport numpy as np

DTYPE = np.double # or whatever your type is
ctypedef np.double_t DTYPE_t # or whatever your type is

def FromFileSkip(fid, int count=1, int skip=0):
    cdef int k
    cdef FILE* cfile
    cdef np.ndarray[DTYPE_t, ndim=1] data
    cdef DTYPE_t* data_ptr

    cfile = fdopen(fid.fileno(), 'rb') # attach the stream
    data = np.zeros(count).astype(DTYPE)
    data_ptr = &lt;DTYPE_t*&gt;data.data

    # maybe skip some header bytes here
    # ...

    for k in range(count):
        if fread(&lt;void*&gt;(data_ptr + k), sizeof(DTYPE_t), 1, cfile) &lt; 0:
            break
        if fseek(cfile, skip, SEEK_CUR):
            break

    return data
</snippet></ROW><ROW><id>15373598</id><snippet>cython -a example.pyx</snippet></ROW><ROW><id>15373707</id><snippet>PATH</snippet></ROW><ROW><id>15373707</id><snippet>/path/to/script.py
export PATH=$PATH:/path/to
</snippet></ROW><ROW><id>15373707</id><snippet>ln -s /path/to/script.py /path/to/script
</snippet></ROW><ROW><id>15373707</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>15373883</id><snippet>for row in Alist:
    print row
</snippet></ROW><ROW><id>15373883</id><snippet>Alist[0][0]</snippet></ROW><ROW><id>15373883</id><snippet>Alist[0][1]</snippet></ROW><ROW><id>15373883</id><snippet>Alist[1][0]</snippet></ROW><ROW><id>15373991</id><snippet>zip</snippet></ROW><ROW><id>15373991</id><snippet>str.join</snippet></ROW><ROW><id>15373991</id><snippet>result = [' '.join(zip(*row)[0]) for row in data]
</snippet></ROW><ROW><id>15373991</id><snippet>zip(*sequences)[i]</snippet></ROW><ROW><id>15373991</id><snippet>[seq[i] for seq in sequences]</snippet></ROW><ROW><id>15374032</id><snippet>   pointOnHull = leftmost point in S
   i = 0
   repeat
      P[i] = pointOnHull
      endpoint = S[0]         // initial endpoint for a candidate edge on the hull
      for j from 1 to |S|-1
         if (endpoint == pointOnHull) or (S[j] is on left of line from P[i] to endpoint)
            endpoint = S[j]   // found greater left turn, update endpoint
      i = i+1
      pointOnHull = endpoint
   until endpoint == P[0]      // wrapped around to first hull point
</snippet></ROW><ROW><id>15374032</id><snippet>   pointOnHull = leftmost point in S
</snippet></ROW><ROW><id>15374032</id><snippet>  P[i] = pointOnHull
</snippet></ROW><ROW><id>15374032</id><snippet>  (S[j] is on left of line from P[i] to endpoint)
</snippet></ROW><ROW><id>15374032</id><snippet>def normalizeangle(radians):
    return divmod(radians, math.pi*2)[1]



def arclength(radians1, radians2 = 0):
    radians1, radians2 = normalizeangle(radians1), normalizeangle(radians2)
    return min(normalizeangle(radians1 - radians2), normalizeangle(radians2 - radians1))



def arcdir(radians1, radians2 = 0):
    radians1, radians2 = normalizeangle(radians1), normalizeangle(radians2)
    return cmp(normalizeangle(radians1 - radians2), normalizeangle(radians2 - radians1))
</snippet></ROW><ROW><id>15374032</id><snippet>arcdir</snippet></ROW><ROW><id>15374088</id><snippet>str2func</snippet></ROW><ROW><id>15374088</id><snippet>myfunc = str2func(myStruct.myFunction);
myfunc(5)
</snippet></ROW><ROW><id>15374088</id><snippet>feval</snippet></ROW><ROW><id>15374088</id><snippet>feval(myStruct.myFunction, 5)
</snippet></ROW><ROW><id>15374168</id><snippet>import numpy as N
import wave

towrite = ''
for freq in xrange(440,600):
     duration = 1
     samplerate = 44100
     samples = duration*samplerate
     period = samplerate / float(freq) # in sample points
     omega = N.pi * 2 / period

     xaxis = N.arange(samples,dtype = N.float)
     ydata = 16384 * N.sin(xaxis*omega)

     signal = N.resize(ydata, (samples,))

     towrite += ''.join([wave.struct.pack('h',s) for s in signal])

 f = wave.open('freqs.wav', 'wb')
 f.setparams((1,2,44100, 44100*4, 'NONE', 'noncompressed'))
 f.writeframes(towrite)
 f.close()
</snippet></ROW><ROW><id>15374236</id><snippet>r</snippet></ROW><ROW><id>15374236</id><snippet>def my_func(some_list, r=0):
    # do some stuff
</snippet></ROW><ROW><id>15374236</id><snippet>def my_func(some_list, r=0):
    # do some stuff

    return new_list, r

my_list = [1,2,3,4,5]
different_list, my_outside_r = my_func(some_list, 0)
</snippet></ROW><ROW><id>15374306</id><snippet>print(subprocess.Popen("echo -n hi", \
    shell=True, stdout=subprocess.PIPE).communicate()[0])
</snippet></ROW><ROW><id>15374402</id><snippet>import operator

sentences = ["davidbobmike1joe" , "mikejoe2bobkarl", "joemikebob", "bobjoe", "bobbyisawesome", "david", "bobbyjoe"];
dict = {}

def countWords(n):
    """Count all possible character sequences/words of length n occuring in all given sentences"""
    for sentence in sentences:
        countWordsSentence(sentence, n);

def countWordsSentence(sentence, n):
    """Count all possible character sequence/words of length n occuring in a sentence"""
    for i in range(0,len(sentence)-n+1):
        word = sentence[i:i+n]
        if word not in dict:
            dict[word] = 1;
        else:
            dict[word] = dict[word] +1;

def cropDictionary():
    """Removes all words that occur only once."""
    for key in dict.keys():
        if(dict[key]==1):
            dict.pop(key);

def removePartials(word):
    """Removes all the partial occurences of a given word from the dictionary."""
    for i in range(3,len(word)):
        for j in range(0,len(word)-i+1):
            for key in dict.keys():
               if key==word[j:j+i] and dict[key]==dict[word]:
                   dict.pop(key);

def removeAllPartials():
    """Removes all partial words in the dictionary"""
    for word in dict.keys():
        removePartials(word);

for i in range(3,max(map(lambda x: len(x), sentences))):
    countWords(i);
    cropDictionary();
    removeAllPartials();

print dict;
</snippet></ROW><ROW><id>15374402</id><snippet>&gt;&gt;&gt; print dict;
{'mike': 3, 'bobby': 2, 'david': 2, 'joe': 5, 'bob': 6}
</snippet></ROW><ROW><id>15374415</id><snippet>google-api-python-client</snippet></ROW><ROW><id>15374415</id><snippet>google-api-python-client-gae-N.M.zip</snippet></ROW><ROW><id>15374415</id><snippet>N.M</snippet></ROW><ROW><id>15374415</id><snippet>$ cd myproject</snippet></ROW><ROW><id>15374415</id><snippet>$ unzip google-api-python-client-gae-1.0.zip</snippet></ROW><ROW><id>15374448</id><snippet>chr</snippet></ROW><ROW><id>15374448</id><snippet>map(chr, range(32, 127))
</snippet></ROW><ROW><id>15374448</id><snippet>[chr(n) for n in range(32, 127)]
</snippet></ROW><ROW><id>15374495</id><snippet>csv.reader</snippet></ROW><ROW><id>15374495</id><snippet>reader = csv.reader(data)

for line_list in reader:
   pass
   # line_list is a list of the data contained in a row so you can access line_list[0]
</snippet></ROW><ROW><id>15374669</id><snippet>if get_port.fetchone():
    do_something_here()
</snippet></ROW><ROW><id>15374669</id><snippet>if len(get_port.fetchmany()):
    do_something_here()
</snippet></ROW><ROW><id>15374874</id><snippet>So... this is a programming exercise in which the output is exactly
the same as the input? 
â xxmbabanexx 12 mins ago 


@xxmbabanexx - lol yes â Amina 8 mins ago
</snippet></ROW><ROW><id>15374874</id><snippet>"""
Task: Make a program which returns the exact same output as the input
Ideas:
print the output!!
"""
</snippet></ROW><ROW><id>15374874</id><snippet>first_input = "Input_One.txt"
second_input = "Input_Two.txt"



Input_One = open(first_input, "r")
Input_Two = open (first_input, "r")


Output_One = open("Output_One.txt", "w")
Output_Two = open ("Output_Two.txt", "w")
</snippet></ROW><ROW><id>15374874</id><snippet>x = Input_One.read()
y = Input_Two.read()
</snippet></ROW><ROW><id>15374874</id><snippet>x</snippet></ROW><ROW><id>15374874</id><snippet>y</snippet></ROW><ROW><id>15374874</id><snippet>print "OUTPUT 1:\n", x
print "\n"
print "OUTPUT 2:\n", y
</snippet></ROW><ROW><id>15374874</id><snippet>#Save "output"

Output_One.write(x)
Output_Two.write(y)

print"\nCOMPLETE!"
</snippet></ROW><ROW><id>15374901</id><snippet>object</snippet></ROW><ROW><id>15374901</id><snippet>type</snippet></ROW><ROW><id>15374901</id><snippet>&gt;&gt;&gt; class Foo: pass
... 
&gt;&gt;&gt; type(Foo())
&lt;type 'instance'&gt;
</snippet></ROW><ROW><id>15374901</id><snippet>&gt;&gt;&gt; class Bar(object): pass
... 
&gt;&gt;&gt; type(Bar())
&lt;class '__main__.Bar'&gt;
</snippet></ROW><ROW><id>15374901</id><snippet>object</snippet></ROW><ROW><id>15374983</id><snippet>words = 'blue yellow'

if 'blue' in words:
    print 'yes'
else:
    print 'no'
</snippet></ROW><ROW><id>15374983</id><snippet>nightly blues</snippet></ROW><ROW><id>15374983</id><snippet>blue</snippet></ROW><ROW><id>15374983</id><snippet>if 'blue' in words.split():
    â¦
</snippet></ROW><ROW><id>15374989</id><snippet>from reportlab.lib.enums import TA_LEFT, TA_RIGHT, TA_CENTER, TA_JUSTIFY
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, landscape
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Frame,Table, TableStyle, NextPageTemplate, PageTemplate, BaseDocTemplate
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus.flowables import Flowable, PageBreak
from pyPdf import PdfFileReader, PdfFileWriter
import glob, os
from reportlab.lib.pagesizes import letter, A4

def make_portrait(canvas,doc):
    canvas.setPageSize(letter)

def make_landscape(canvas,doc):
    canvas.setPageSize(landscape(letter))

doc = BaseDocTemplate("NextPageExample.pdf",showBoundary=1)
elements = []
styles = getSampleStyleSheet()
styles.add(ParagraphStyle(name='normal', fontSize=6, leading = 7, alignment=TA_LEFT))


frame1 = Frame(doc.leftMargin, doc.height-5*inch,
                doc.width, 5*inch,
                leftPadding = 0, rightPadding = 0,
                topPadding = 0, bottomPadding = 0,
                id='frame1')

ptemplate = PageTemplate(id='portrait',frames =[frame1], onPage=make_portrait)
ltemplate = PageTemplate(id='landscape',frames =[frame1], onPage=make_landscape)
doc.addPageTemplates([ptemplate, ltemplate])
elements.append(Paragraph("Table is here.",styles["normal"]))
elements.append(NextPageTemplate('landscape'))
elements.append(PageBreak())
elements.append(Paragraph("Pictures are to be placed here.",styles["normal"]))

doc.build(elements)
del elements
</snippet></ROW><ROW><id>15375030</id><snippet># google/appengine/ext/ndb/model.py:1711

class UserProperty(Property):
  """A Property whose value is a User object.

  Note: this exists for backwards compatibility with existing
  datastore schemas only; we do not recommend storing User objects
  directly in the datastore, but instead recommend storing the
  user.user_id() value.
  """
</snippet></ROW><ROW><id>15375043</id><snippet>search = (
    SearchQuerySet().filter(content=term)
)

search_list = search[:]
unpublished_Mymodels = Mymodel.objects.filter(published=False)

for match in search_list:
    try:
        if match.model_name == 'Mymodel':
            if match._get_object() in unpublished_Mymodels:
                search_list.remove(match)
    except:
        pass

search = search_list
</snippet></ROW><ROW><id>15375159</id><snippet>from Tkinter import *
</snippet></ROW><ROW><id>15375159</id><snippet>class App(Frame):
</snippet></ROW><ROW><id>15375159</id><snippet>App</snippet></ROW><ROW><id>15375159</id><snippet>Frame</snippet></ROW><ROW><id>15375159</id><snippet>    def __init__(self, master):
        Frame.__init__(self, master)
        self.grid()
        self.widgets()
</snippet></ROW><ROW><id>15375159</id><snippet>__init__</snippet></ROW><ROW><id>15375159</id><snippet>widgets</snippet></ROW><ROW><id>15375159</id><snippet>    def widgets(self):


        menubar = Menu(root)
        menubar.add_command(label="File")
        menubar.add_command(label="Quit", command=root.quit())

        root.config(menu=menubar)
</snippet></ROW><ROW><id>15375159</id><snippet>widgets</snippet></ROW><ROW><id>15375159</id><snippet>menubar</snippet></ROW><ROW><id>15375159</id><snippet>root=Tk()
root.title("Menubar")
app=App(root)
root.mainloop()
</snippet></ROW><ROW><id>15375159</id><snippet>Menubar</snippet></ROW><ROW><id>15375159</id><snippet>App</snippet></ROW><ROW><id>15375159</id><snippet>root.mainloop</snippet></ROW><ROW><id>15375176</id><snippet>apply</snippet></ROW><ROW><id>15375176</id><snippet>.size()</snippet></ROW><ROW><id>15375176</id><snippet>from pandas import *

d = {"my_label": Series(['A','B','A','C','D','D','E'])}
df = DataFrame(d)


def as_perc(value, total):
    return value/float(total)

def get_count(values):
    return len(values)

grouped_count = df.groupby("my_label").my_label.agg(get_count)
data = grouped_count.apply(as_perc, total=df.my_label.count())
</snippet></ROW><ROW><id>15375176</id><snippet>.agg()</snippet></ROW><ROW><id>15375408</id><snippet>import random
import sys
import time

def slowprint(s):
    for c in s + '\n':
        sys.stdout.write(c)
        sys.stdout.flush() # defeat buffering
        time.sleep(random.random() * 0.1)

slowprint('Hello, world.')
</snippet></ROW><ROW><id>15375408</id><snippet>0.1</snippet></ROW><ROW><id>15375408</id><snippet>time.sleep()</snippet></ROW><ROW><id>15375574</id><snippet>config.py</snippet></ROW><ROW><id>15375574</id><snippet>USER='zzzzzzzz'
PASS='xxxxxxxx'
HOST='yyyyyyyy'
MYDB='wwwwwwww'
</snippet></ROW><ROW><id>15375574</id><snippet>chmod 0600 /path/to/config.py
</snippet></ROW><ROW><id>15375574</id><snippet>MySQLdb</snippet></ROW><ROW><id>15375574</id><snippet>import config
connection = MySQLdb.connect(
    host = config.HOST, user = config.USER,
    passwd = config.PASS, db = config.MYDB)
</snippet></ROW><ROW><id>15375574</id><snippet>config.py</snippet></ROW><ROW><id>15375714</id><snippet>numpy.split</snippet></ROW><ROW><id>15375714</id><snippet>numpy.array_split</snippet></ROW><ROW><id>15375714</id><snippet>df = pd.DataFrame({"A":np.arange(9), "B":np.arange(10, 19)}, 
                  index=np.arange(100, 109))
for tmp in np.split(df, 3):
    print tmp
</snippet></ROW><ROW><id>15375714</id><snippet>     A   B
100  0  10
101  1  11
102  2  12
     A   B
103  3  13
104  4  14
105  5  15
     A   B
106  6  16
107  7  17
108  8  18
</snippet></ROW><ROW><id>15375757</id><snippet>imap</snippet></ROW><ROW><id>15375786</id><snippet> d = {
        'large': lambda item: item &gt; 100,
        'small': lambda item: item &lt; 100,
      }
 return [item for item in data if d[mode](item)]
</snippet></ROW><ROW><id>15375786</id><snippet>func = {
        'large': lambda item: item &gt; 100,
        'small': lambda item: item &lt; 100,
        }[mode]
return [item for item in data if func(item)]
</snippet></ROW><ROW><id>15375896</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>15375896</id><snippet>import decimal  
from google.storage.speckle.proto import jdbc_type

from google.storage.speckle.python.api import converters  
from google.storage.speckle.python.api import rdbms  
from google.storage.speckle.python.api import rdbms_googleapi

rdbms._PYTHON_TYPE_TO_JDBC_TYPE[decimal.Decimal] = jdbc_type.DECIMAL  
converters.conversions[decimal.Decimal] = converters.Any2Str  
converters.conversions[jdbc_type.DECIMAL] = decimal.Decimal  
</snippet></ROW><ROW><id>15376016</id><snippet>any()</snippet></ROW><ROW><id>15376016</id><snippet>In [1]: strs="I am a string"

In [2]: lis=['this', 'is', 'a', 'regex', 'test']

In [3]: any(x in strs for x in lis)
Out[3]: True
</snippet></ROW><ROW><id>15376016</id><snippet>True</snippet></ROW><ROW><id>15376016</id><snippet>"thisisafoobar"</snippet></ROW><ROW><id>15376016</id><snippet>re.search()</snippet></ROW><ROW><id>15376016</id><snippet>str.split()</snippet></ROW><ROW><id>15376016</id><snippet>In [4]: import re

In [5]: any(re.search(r"\b{0}\b".format(x),strs) for x in lis)
Out[5]: True

In [6]: strs="foo bar"

In [7]: any(re.search(r"\b{0}\b".format(x),strs) for x in lis)
Out[7]: False
</snippet></ROW><ROW><id>15376016</id><snippet>str.split()</snippet></ROW><ROW><id>15376016</id><snippet>In [12]: strs="I am a string"

In [13]: spl=strs.split()    #use set(strs.split()) if the list returned is huge

In [14]: any(x in spl for x in lis)
Out[14]: True

In [15]: strs="Iamastring"

In [16]: spl=strs.split()

In [17]: any(x in spl for x in lis)
Out[17]: False
</snippet></ROW><ROW><id>15376181</id><snippet>process continue</snippet></ROW><ROW><id>15376181</id><snippet>-i</snippet></ROW><ROW><id>15376181</id><snippet>Process 13559 stopped
* thread #1: tid = 0xb7da5, 0x0000000100000f21 a.out`main + 49 at a.c:7, stop reason = breakpoint 2.1
    #0: 0x0000000100000f21 a.out`main + 49 at a.c:7
   4        int i;
   5        for (i = 0; i &lt; 100; i++)
   6        {
-&gt; 7            printf ("%d\n", i);
   8        }
   9    }
(lldb) c -i 5
Process 13559 resuming
0
1
2
3
4
5
Process 13559 stopped
* thread #1: tid = 0xb7da5, 0x0000000100000f21 a.out`main + 49 at a.c:7, stop reason = breakpoint 2.1
    #0: 0x0000000100000f21 a.out`main + 49 at a.c:7
   4        int i;
   5        for (i = 0; i &lt; 100; i++)
   6        {
-&gt; 7            printf ("%d\n", i);
   8        }
   9    }
(lldb) 
</snippet></ROW><ROW><id>15376181</id><snippet>breakpoint modify -i count bpnum</snippet></ROW><ROW><id>15376235</id><snippet>a = 34.73809999999999
print round(a, 4)
&gt;&gt;&gt; 34.7381
</snippet></ROW><ROW><id>15376368</id><snippet>from moduleA import (ClassA, ClassB, ClassC,
                     DataA, DataB)
</snippet></ROW><ROW><id>15376382</id><snippet>epoll</snippet></ROW><ROW><id>15376382</id><snippet>dict</snippet></ROW><ROW><id>15376382</id><snippet>socket</snippet></ROW><ROW><id>15376382</id><snippet>weakref</snippet></ROW><ROW><id>15376382</id><snippet>fileno</snippet></ROW><ROW><id>15376382</id><snippet>accept</snippet></ROW><ROW><id>15376382</id><snippet>epoll</snippet></ROW><ROW><id>15376382</id><snippet>epoll_ctl</snippet></ROW><ROW><id>15376382</id><snippet>ctypes</snippet></ROW><ROW><id>15376382</id><snippet>epoll_ctl(my_epoll.fileno(), EPOLL_CTL_MOD, fd, NULL)</snippet></ROW><ROW><id>15376382</id><snippet>ENOENT</snippet></ROW><ROW><id>15376382</id><snippet>EBADF</snippet></ROW><ROW><id>15376382</id><snippet>EINVAL</snippet></ROW><ROW><id>15376382</id><snippet>event</snippet></ROW><ROW><id>15376382</id><snippet>epoll</snippet></ROW><ROW><id>15376505</id><snippet>pandas.factorize</snippet></ROW><ROW><id>15376505</id><snippet>data = pd.DataFrame({'id' : [50,50,30,10,50,50,30]})
print pd.factorize(data.id)[0]
</snippet></ROW><ROW><id>15376505</id><snippet>[0 0 1 2 0 0 1]
</snippet></ROW><ROW><id>15376505</id><snippet>numpy.unique</snippet></ROW><ROW><id>15376505</id><snippet>import numpy as np
print np.unique([50,50,30,10,50,50,30], return_inverse=True)[1]
</snippet></ROW><ROW><id>15376505</id><snippet>array([2, 2, 1, 0, 2, 2, 1])
</snippet></ROW><ROW><id>15376505</id><snippet>numpy.unique</snippet></ROW><ROW><id>15376505</id><snippet>factorize</snippet></ROW><ROW><id>15376505</id><snippet>sort</snippet></ROW><ROW><id>15376505</id><snippet>True</snippet></ROW><ROW><id>15376505</id><snippet>pandas.factorize(data.id, sort=True)[0]
</snippet></ROW><ROW><id>15376520</id><snippet>i</snippet></ROW><ROW><id>15376520</id><snippet>+=</snippet></ROW><ROW><id>15376520</id><snippet>__iadd__</snippet></ROW><ROW><id>15376520</id><snippet>__add__</snippet></ROW><ROW><id>15376520</id><snippet>+</snippet></ROW><ROW><id>15376520</id><snippet>__add__</snippet></ROW><ROW><id>15376520</id><snippet>__iadd__</snippet></ROW><ROW><id>15376520</id><snippet>__add__</snippet></ROW><ROW><id>15376520</id><snippet>__iadd__</snippet></ROW><ROW><id>15376520</id><snippet>i = 1
i += 1
</snippet></ROW><ROW><id>15376520</id><snippet>i</snippet></ROW><ROW><id>15376520</id><snippet>i</snippet></ROW><ROW><id>15376520</id><snippet>i += 1</snippet></ROW><ROW><id>15376520</id><snippet>i = i + 1</snippet></ROW><ROW><id>15376520</id><snippet>a = [1, 2, 3]
b = a
b += [1, 2, 3]
print a  #[1, 2, 3, 1, 2, 3]
print b  #[1, 2, 3, 1, 2, 3]
</snippet></ROW><ROW><id>15376520</id><snippet>a = [1, 2, 3]
b = a
b = b + [1, 2, 3]
print a #[1, 2, 3]
print b #[1, 2, 3, 1, 2, 3]
</snippet></ROW><ROW><id>15376520</id><snippet>b</snippet></ROW><ROW><id>15376520</id><snippet>a</snippet></ROW><ROW><id>15376520</id><snippet>+=</snippet></ROW><ROW><id>15376520</id><snippet>b</snippet></ROW><ROW><id>15376520</id><snippet>b</snippet></ROW><ROW><id>15376520</id><snippet>a</snippet></ROW><ROW><id>15376520</id><snippet>b = b + [1, 2, 3]</snippet></ROW><ROW><id>15376520</id><snippet>b</snippet></ROW><ROW><id>15376520</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>15376520</id><snippet>b</snippet></ROW><ROW><id>15376520</id><snippet>b</snippet></ROW><ROW><id>15376520</id><snippet>x + y</snippet></ROW><ROW><id>15376520</id><snippet>x.__add__</snippet></ROW><ROW><id>15376520</id><snippet>x.__add__(y)</snippet></ROW><ROW><id>15376520</id><snippet>NotImplemented</snippet></ROW><ROW><id>15376520</id><snippet>x</snippet></ROW><ROW><id>15376520</id><snippet>y</snippet></ROW><ROW><id>15376520</id><snippet>x + y</snippet></ROW><ROW><id>15376520</id><snippet>y.__radd__(x)</snippet></ROW><ROW><id>15376520</id><snippet>foo_instance += bar_instance</snippet></ROW><ROW><id>15376520</id><snippet>Foo</snippet></ROW><ROW><id>15376520</id><snippet>__add__</snippet></ROW><ROW><id>15376520</id><snippet>__iadd__</snippet></ROW><ROW><id>15376520</id><snippet>foo_instance = bar_instance.__radd__(bar_instance,foo_instance)</snippet></ROW><ROW><id>15376598</id><snippet>__init__.py</snippet></ROW><ROW><id>15376598</id><snippet>self._require_parameter(kwds, 'required', True)</snippet></ROW><ROW><id>15376598</id><snippet>empty()</snippet></ROW><ROW><id>15376598</id><snippet>ListProperty</snippet></ROW><ROW><id>15376598</id><snippet>def empty(self, value):
    """Is list property empty.

    [] is not an empty value.

    Returns:
      True if value is None, else false.
    """
    return value is None
</snippet></ROW><ROW><id>15376598</id><snippet>new_property</snippet></ROW><ROW><id>15376598</id><snippet>new_property</snippet></ROW><ROW><id>15376598</id><snippet>None</snippet></ROW><ROW><id>15376598</id><snippet>empty()</snippet></ROW><ROW><id>15376598</id><snippet>[]</snippet></ROW><ROW><id>15376996</id><snippet>def tokenize(phrase, stop_words=()):
    stop_words = '|'.join(re.escape(x) + r'\b' for x in stop_words)
    other = '\s+|\w+|[^\s\w]+'
    regex = stop_words + '|' + other if stop_words else other
    return re.findall(regex, phrase)
</snippet></ROW><ROW><id>15376996</id><snippet>\b</snippet></ROW><ROW><id>15377031</id><snippet>Frame.OnExit</snippet></ROW><ROW><id>15377031</id><snippet>OnExit</snippet></ROW><ROW><id>15377031</id><snippet>OnExit</snippet></ROW><ROW><id>15377031</id><snippet>EVT_CLOSE</snippet></ROW><ROW><id>15377031</id><snippet>OnClose</snippet></ROW><ROW><id>15377031</id><snippet>OnCloseWindow</snippet></ROW><ROW><id>15377031</id><snippet>OnExit</snippet></ROW><ROW><id>15377031</id><snippet>event</snippet></ROW><ROW><id>15377031</id><snippet>self</snippet></ROW><ROW><id>15377031</id><snippet>EVT_CLOSE</snippet></ROW><ROW><id>15377031</id><snippet>Destroy</snippet></ROW><ROW><id>15377031</id><snippet>EVT_CLOSE</snippet></ROW><ROW><id>15377031</id><snippet>tickThread.stopped</snippet></ROW><ROW><id>15377031</id><snippet>True</snippet></ROW><ROW><id>15377031</id><snippet>class tradeWindow(wx.Frame):
    def __init__(self, parent, id):
        wx.Frame.__init__(self, parent, id, "Exchange", size = (500, 190))
        panel = wx.Panel(self)
        self.Bind(wx.EVT_CLOSE, self.OnClose)
    def OnClose(self, event):
        tickThread.stopped = True
        self.Destroy()
</snippet></ROW><ROW><id>15377031</id><snippet>Condition</snippet></ROW><ROW><id>15377031</id><snippet>Lock</snippet></ROW><ROW><id>15377031</id><snippet>Event</snippet></ROW><ROW><id>15377058</id><snippet>[:]</snippet></ROW><ROW><id>15377058</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>15377058</id><snippet>lis[:]</snippet></ROW><ROW><id>15377058</id><snippet>list(lis)</snippet></ROW><ROW><id>15377058</id><snippet>copy.copy(lis)</snippet></ROW><ROW><id>15377058</id><snippet>In [33]: def func(lis):
    print id(lis)
   ....:     

In [34]: lis=[1,2,3]

In [35]: id(lis)
Out[35]: 158354604

In [36]: func(lis[:])
158065836
</snippet></ROW><ROW><id>15377058</id><snippet>deepcopy()</snippet></ROW><ROW><id>15377058</id><snippet>In [41]: lis=[range(3),list('abc')]

In [42]: id(lis)
Out[42]: 158066124

In [44]: lis1=lis[:]

In [45]: id(lis1)
Out[45]: 158499244  # different than lis, but the inner lists are still same

In [46]: [id(x) for x in lis1]==[id(y) for y in lis]
Out[46]: True

In [47]: lis2=copy.deepcopy(lis)  

In [48]: [id(x) for x in lis2]==[id(y) for y in lis]  
Out[48]: False
</snippet></ROW><ROW><id>15377260</id><snippet>verbose</snippet></ROW><ROW><id>15377260</id><snippet>verbose</snippet></ROW><ROW><id>15377260</id><snippet>False</snippet></ROW><ROW><id>15377260</id><snippet>0</snippet></ROW><ROW><id>15377260</id><snippet>&gt;&gt;&gt; send(IP(dst="1.2.3.4")/ICMP())
.
Sent 1 packets.
&gt;&gt;&gt; send(IP(dst="1.2.3.4")/ICMP(), verbose=0)
&gt;&gt;&gt; send(IP(dst="1.2.3.4")/ICMP(), verbose=False)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15377260</id><snippet>help()</snippet></ROW><ROW><id>15377260</id><snippet>&gt;&gt;&gt; help(send)
Help on function send in module scapy.sendrecv:

send(x, inter=0, loop=0, count=None, verbose=None, realtime=None, *args, **kargs)
    Send packets at layer 3
    send(packets, [inter=0], [loop=0], [verbose=conf.verb]) -&gt; None
(END)
</snippet></ROW><ROW><id>15377895</id><snippet>csv</snippet></ROW><ROW><id>15377895</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; your_dict = {}
&gt;&gt;&gt; with open('eggs.csv', 'rb') as csvfile:
...     spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
...     for row in spamreader:
...         your_dict[row[0]] = row[1:]
</snippet></ROW><ROW><id>15377990</id><snippet>class IntelligentUploadHandler(FileUploadHandler):
    """
    An upload handler which overrides the default multipart parser to allow
    simultaneous parsing of fields and files... intelligently. Subclass this
    for real and true awesomeness.
    """

    def __init__(self, *args, **kwargs):
        super(IntelligentUploadHandler, self).__init__(*args, **kwargs)

    def field_parsed(self, field_name, field_value):
        """
        A callback method triggered when a non-file field has been parsed 
        successfully by the parser. Use this to listen for new fields being
        parsed.
        """
        pass

    def handle_raw_input(self, input_data, META, content_length, boundary,
            encoding = None):
        """
        Parse the raw input from the HTTP request and split items into fields
        and files, executing callback methods as necessary.

        Shamelessly adapted and borrowed from django.http.multiparser.MultiPartParser.
        """
        # following suit from the source class, this is imported here to avoid
        # a potential circular import
        from django.http import QueryDict

        # create return values
        self.POST = QueryDict('', mutable=True)
        self.FILES = MultiValueDict()

        # initialize the parser and stream
        stream = LazyStream(ChunkIter(input_data, self.chunk_size))

        # whether or not to signal a file-completion at the beginning of the loop.
        old_field_name = None
        counter = 0

        try:
            for item_type, meta_data, field_stream in Parser(stream, boundary):
                if old_field_name:
                    # we run this test at the beginning of the next loop since
                    # we cannot be sure a file is complete until we hit the next
                    # boundary/part of the multipart content.
                    file_obj = self.file_complete(counter)

                    if file_obj:
                        # if we return a file object, add it to the files dict
                        self.FILES.appendlist(force_text(old_field_name, encoding,
                            errors='replace'), file_obj)

                    # wipe it out to prevent havoc
                    old_field_name = None
                try: 
                    disposition = meta_data['content-disposition'][1]
                    field_name = disposition['name'].strip()
                except (KeyError, IndexError, AttributeError):
                    continue

                transfer_encoding = meta_data.get('content-transfer-encoding')

                if transfer_encoding is not None:
                    transfer_encoding = transfer_encoding[0].strip()

                field_name = force_text(field_name, encoding, errors='replace')

                if item_type == FIELD:
                    # this is a POST field
                    if transfer_encoding == "base64":
                        raw_data = field_stream.read()
                        try:
                            data = str(raw_data).decode('base64')
                        except:
                            data = raw_data
                    else:
                        data = field_stream.read()

                    self.POST.appendlist(field_name, force_text(data, encoding,
                        errors='replace'))

                    # trigger listener
                    self.field_parsed(field_name, self.POST.get(field_name))
                elif item_type == FILE:
                    # this is a file
                    file_name = disposition.get('filename')

                    if not file_name:
                        continue

                    # transform the file name
                    file_name = force_text(file_name, encoding, errors='replace')
                    file_name = self.IE_sanitize(unescape_entities(file_name))

                    content_type = meta_data.get('content-type', ('',))[0].strip()

                    try:
                        charset = meta_data.get('content-type', (0, {}))[1].get('charset', None)
                    except:
                        charset = None

                    try:
                        file_content_length = int(meta_data.get('content-length')[0])
                    except (IndexError, TypeError, ValueError):
                        file_content_length = None

                    counter = 0

                    # now, do the important file stuff
                    try:
                        # alert on the new file
                        self.new_file(field_name, file_name, content_type,
                                file_content_length, charset)

                        # chubber-chunk it
                        for chunk in field_stream:
                            if transfer_encoding == "base64":
                                # base 64 decode it if need be
                                over_bytes = len(chunk) % 4

                                if over_bytes:
                                    over_chunk = field_stream.read(4 - over_bytes)
                                    chunk += over_chunk

                                try:
                                    chunk = base64.b64decode(chunk)
                                except Exception as e:
                                    # since this is anly a chunk, any error is an unfixable error
                                    raise MultiPartParserError("Could not decode base64 data: %r" % e)

                            chunk_length = len(chunk)
                            self.receive_data_chunk(chunk, counter)
                            counter += chunk_length
                            # ... and we're done
                    except SkipFile:
                        # just eat the rest
                        exhaust(field_stream)
                    else:
                        # handle file upload completions on next iteration
                        old_field_name = field_name

        except StopUpload as e:
            # if we get a request to stop the upload, exhaust it if no con reset
            if not e.connection_reset:
                exhaust(input_data)
        else:
            # make sure that the request data is all fed
            exhaust(input_data)

        # signal the upload has been completed
        self.upload_complete()

        return self.POST, self.FILES

    def IE_sanitize(self, filename):
        """Cleanup filename from Internet Explorer full paths."""
        return filename and filename[filename.rfind("\\")+1:].strip()
</snippet></ROW><ROW><id>15377990</id><snippet>field_parsed</snippet></ROW><ROW><id>15378696</id><snippet>date</snippet></ROW><ROW><id>15378696</id><snippet>{{ pub_date|date:'d-F-Y' }
</snippet></ROW><ROW><id>15378696</id><snippet>DATE_FORMAT</snippet></ROW><ROW><id>15378696</id><snippet>SHORT_DATE_FORMAT</snippet></ROW><ROW><id>15378748</id><snippet>()</snippet></ROW><ROW><id>15378748</id><snippet>say_hi</snippet></ROW><ROW><id>15378748</id><snippet>say_hi()</snippet></ROW><ROW><id>15378748</id><snippet>b = Button(root,text="Say
        something",fg="red",bg="black",command=say_hi) b.pack()
</snippet></ROW><ROW><id>15378790</id><snippet>import difflib
country_names = [x.name.lower() for x in pycountry.countries]    
matching_countries = difflib.get_close_matches(data, country_names)
confidence = difflib.SequenceMatcher(None, matching_countries[0], data).ratio()
</snippet></ROW><ROW><id>15378889</id><snippet>{'token':'7fd74c28-8ba1-11e2-9073-e840f23c81a0'}['uuid']
</snippet></ROW><ROW><id>15378889</id><snippet>undefined</snippet></ROW><ROW><id>15378889</id><snippet>uuid</snippet></ROW><ROW><id>15378889</id><snippet>db.user.findOne(undefined)
</snippet></ROW><ROW><id>15378889</id><snippet>{'token':token}['uuid']
</snippet></ROW><ROW><id>15378889</id><snippet>uuid</snippet></ROW><ROW><id>15378889</id><snippet>{'token':token}</snippet></ROW><ROW><id>15378889</id><snippet>KeyError</snippet></ROW><ROW><id>15378889</id><snippet>UUID</snippet></ROW><ROW><id>15378889</id><snippet>from uuid import UUID

token = '7fd74c28-8ba1-11e2-9073-e840f23c81a0'
get_user = db.user.find_one({'token' : UUID(token) })
</snippet></ROW><ROW><id>15379292</id><snippet>&gt;&gt;&gt; l = ['abc,def,ghi,jkl']
&gt;&gt;&gt; l[0]
'abc,def,ghi,jkl'
&gt;&gt;&gt; l[0].split(',')
['abc', 'def', 'ghi', 'jkl']
&gt;&gt;&gt; ', '.join(l[0].split(','))
'abc, def, ghi, jkl'
</snippet></ROW><ROW><id>15379345</id><snippet>'%08X' % hash
</snippet></ROW><ROW><id>15379345</id><snippet>hashstr = '%08X' % hash
hashstr = "".join(reversed([hashstr[i:i+2] for i in range(0, len(hashstr), 2)]))
</snippet></ROW><ROW><id>15379345</id><snippet>def ELFHash(key):
    hash, x = 0, 0
    for i in range(len(key)):
        hash = (hash &lt;&lt; 4) + ord(key[i])
        x = hash &amp; 0xF0000000
        if x != 0:
            hash ^= (x &gt;&gt; 24)
            hash &amp;= ~x
    hashstr = '%08X' % hash
    return "".join(reversed([hashstr[i:i+2] for i in range(0, len(hashstr), 2)]))
</snippet></ROW><ROW><id>15379990</id><snippet>In [15]: success = {k:(v if k in data else '') for (k,v) in client_order.items()}

In [16]: success
Out[16]: {'Games': 'Indoor Games', 'Laptops': 'Sony', 'Mobiles': 'HTC', 'Wallet': ''}
</snippet></ROW><ROW><id>15379990</id><snippet>data</snippet></ROW><ROW><id>15379990</id><snippet>In [18]: success = {k:(v if v in data.get(k, []) else '') for (k,v) in client_order.items()}

In [19]: success
Out[19]: {'Games': 'Indoor Games', 'Laptops': 'Sony', 'Mobiles': 'HTC', 'Wallet': ''}
</snippet></ROW><ROW><id>15380058</id><snippet>function2</snippet></ROW><ROW><id>15380058</id><snippet>PyObject_GetItem</snippet></ROW><ROW><id>15380058</id><snippet>np.float32</snippet></ROW><ROW><id>15380058</id><snippet>np.float32_t</snippet></ROW><ROW><id>15380058</id><snippet>float</snippet></ROW><ROW><id>15380058</id><snippet>PyFloat_FromDouble</snippet></ROW><ROW><id>15380058</id><snippet>tmp1</snippet></ROW><ROW><id>15380058</id><snippet>tmp2</snippet></ROW><ROW><id>15380058</id><snippet>tmp3</snippet></ROW><ROW><id>15380058</id><snippet>function3</snippet></ROW><ROW><id>15380058</id><snippet>tmp</snippet></ROW><ROW><id>15380058</id><snippet>float</snippet></ROW><ROW><id>15380058</id><snippet>ndarray</snippet></ROW><ROW><id>15380058</id><snippet>function1</snippet></ROW><ROW><id>15380058</id><snippet>np.float64</snippet></ROW><ROW><id>15380058</id><snippet>&gt;&gt;&gt; type(np.float32(1) / 2)
&lt;type 'numpy.float64'&gt;
</snippet></ROW><ROW><id>15380058</id><snippet>&gt;&gt;&gt; type(np.float32(1) / np.float32(2))
&lt;type 'numpy.float32'&gt;
</snippet></ROW><ROW><id>15380058</id><snippet>float32</snippet></ROW><ROW><id>15380058</id><snippet>def</snippet></ROW><ROW><id>15380058</id><snippet>cpdef</snippet></ROW><ROW><id>15380058</id><snippet>function1</snippet></ROW><ROW><id>15380058</id><snippet>np.float32</snippet></ROW><ROW><id>15380058</id><snippet>function2</snippet></ROW><ROW><id>15380058</id><snippet>double</snippet></ROW><ROW><id>15380058</id><snippet>def function1(response, max_loc):    
    tmp = np.zeros(3, dtype=np.float32)
    x, y = int(max_loc[0]), int(max_loc[1])
    tmp[0] = (((response[y,x+1] - response[y,x-1]) / np.float32(2)) *
             (response[y,x] - min(response[y,x-1], response[y,x+1])))
    tmp[1] = response[y,x+1] - response[y,x-1]
    tmp[2] = 2*(response[y,x] - min(response[y,x-1], response[y,x+1]))

    print tmp[0], tmp[1], tmp[2]
    return tmp

cpdef function2(np.ndarray[np.float32_t, ndim=2] response, max_loc):
    cdef np.ndarray[np.float32_t, ndim=1] tmp = np.zeros(3, dtype=np.float32)
    cdef unsigned int x, y
    x, y = int(max_loc[0]), int(max_loc[1])
    tmp[0] = (((response[y,x+1] - response[y,x-1]) / &lt;np.float32_t&gt;2) *
             (response[y,x] - min(response[y,x-1], response[y,x+1])))
    tmp[1] = response[y,x+1] - response[y,x-1]
    tmp[2] = 2*(response[y,x] - min(response[y,x-1], response[y,x+1]))

    print tmp[int(0)], tmp[int(1)], tmp[int(2)]
    return tmp
</snippet></ROW><ROW><id>15380058</id><snippet>&gt;&gt;&gt; function1(response, max_loc)
0.0821186 0.314914 1.04306
array([ 0.08211858,  0.31491402,  1.0430603 ], dtype=float32)

&gt;&gt;&gt; function2(response, max_loc)
0.0821186 0.314914 1.04306
array([ 0.08211857,  0.31491402,  1.0430603 ], dtype=float32)
</snippet></ROW><ROW><id>15380116</id><snippet>In [20]: l = [['a1', 'b1', 'c1', 'd1', 'e1', 'f1', 'g1', 'h1', 'i1'], ['a2', 'b2', 'c2', 'd2', 'e2', 'f2', 'g2', 'h2', 'i2'], ['a3', 'b3', 'c3', 'd3', 'e3', 'f3', 'g3', 'h3', 'i3'], ['a4', 'b4', 'c4', 'd4', 'e4', 'f4', 'g4', 'h4', 'i4'], ['a5', 'b5', 'c5', 'd5', 'e5', 'f5', 'g5', 'h5', 'i5'], ['a6', 'b6', 'c6', 'd6', 'e6', 'f6', 'g6', 'h6', 'i6'], ['a7', 'b7', 'c7', 'd7', 'e7', 'f7', 'g7', 'h7', 'i7'], ['a8', 'b8', 'c8', 'd8', 'e8', 'f8', 'g8', 'h8', 'i8'], ['a9', 'b9', 'c9', 'd9', 'e9', 'f9', 'g9', 'h9', 'i9']]

In [21]: map(dict.fromkeys, l)
Out[21]: 
[{'a1': None,
  'b1': None,
  'c1': None,
  'd1': None,
  'e1': None,
  'f1': None,
  'g1': None,
  'h1': None,
  'i1': None},
 {'a2': None,
  'b2': None,
  'c2': None,
  'd2': None,
   ...
</snippet></ROW><ROW><id>15380116</id><snippet>list(map(dict.fromkeys, l))</snippet></ROW><ROW><id>15380225</id><snippet>if iter(vals) is vals:
    vals = list(vals)
</snippet></ROW><ROW><id>15380225</id><snippet>self</snippet></ROW><ROW><id>15380225</id><snippet>__iter__()</snippet></ROW><ROW><id>15380225</id><snippet>class ListPart(object):
    """Liste stÃ¼ckweise zerlegen."""
    def __init__(self, data=None):
        if data is None: data = []
        self.data = data
    def next(self):
        try:
            return self.data.pop(0)
        except IndexError:
            raise StopIteration
    def __iter__(self):
        return self
    def __len__(self): # doesn't work with __getattr__...
        return len(self.data)
</snippet></ROW><ROW><id>15380225</id><snippet>l = [1, 2, 3, 4]
lp = ListPart(l)
for i in lp: process(i)
# now l is empty.
</snippet></ROW><ROW><id>15380225</id><snippet>next()</snippet></ROW><ROW><id>15380225</id><snippet>StopIteration</snippet></ROW><ROW><id>15380225</id><snippet>def __iter__(self):
    while True:
        try:
            yield l.pop(0)
        except IndexError: # pop from empty list
            return
</snippet></ROW><ROW><id>15380539</id><snippet>class StoreDeletionHandler(webapp2.RequestHandler):
def get(self):
    stores = Stores.all()

    countStores= 0

    for p in stores:
        p.delete()
        countStores+= 1

    self.response.out.write("\nDeleted Stores: " + str(countStores))        


app = webapp2.WSGIApplication([('/deleteStores', StoreDeletionHandler)], debug=True)
</snippet></ROW><ROW><id>15380539</id><snippet>- url: /.*
  script: main.app
</snippet></ROW><ROW><id>15380539</id><snippet>class CustomerDeletionHandler(webapp2.RequestHandler):
    def get(self):

        customers = Customers.all()
        countCustomers= 0

        for p in customers:
            p.delete()
            countcustomers+= 1

        self.response.out.write("\nDeleted Customers: " + str(countCustomers))

app = webapp2.WSGIApplication([
('/deleteCustomers', CustomerDeletionHandler)
], debug=True)
</snippet></ROW><ROW><id>15380539</id><snippet>- url: /deleteCustomers
  script: test.app
</snippet></ROW><ROW><id>15380539</id><snippet>http://www.myapp.appspot.com/deleteCustomers/NewUrl1
http://www.myapp.appspot.com/deleteCustomers/SomethingElse
http://www.myapp.appspot.com/deleteCustomers/YetAnotherUrlForTestpy
</snippet></ROW><ROW><id>15380539</id><snippet>http://www.myapp.appspot.com/ThisGoesToMain
http://www.myapp.appspot.com/deleteStores #also goes to main
http://www.myapp.appspot.com/deleteStores/YetAnotherUrlForMain
</snippet></ROW><ROW><id>15380933</id><snippet># re_direct.py

import this_module
import that_module

wanted = None


# caller.py
import re-direct

'''
many prerequisites
'''
def imp_now(case):
    import re_direct
    if case1:
        re_direct.wanted = re_direct.this_module
    elif case2:
        re_direct.wanted = re_direct.that_module
</snippet></ROW><ROW><id>15380940</id><snippet>self.ax.imshow(arr_n, cmap=plt.cm.spectral)
</snippet></ROW><ROW><id>15380940</id><snippet>self.ax.imshow(np.invert(arr_n), cmap=plt.cm.spectral)
</snippet></ROW><ROW><id>15381220</id><snippet>b'.'*4</snippet></ROW><ROW><id>15381220</id><snippet>'....'</snippet></ROW><ROW><id>15381220</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; def f():
...   s = b'.'*4
...   buf = c_char_p(s)
...   memset(buf, 0, 1)
... 
&gt;&gt;&gt; f.__code__.co_consts
(None, '.', 4, 0, 1, '....')
&gt;&gt;&gt; c_char_p(f.__code__.co_consts[5]).value
'....'

&gt;&gt;&gt; f() # set the first character to "\x00"
&gt;&gt;&gt; f.__code__.co_consts
(None, '.', 4, 0, 1, '\x00...')
&gt;&gt;&gt; c_char_p(f.__code__.co_consts[5]).value
''
</snippet></ROW><ROW><id>15381220</id><snippet>value</snippet></ROW><ROW><id>15381220</id><snippet>c_char_p</snippet></ROW><ROW><id>15381220</id><snippet>value</snippet></ROW><ROW><id>15381220</id><snippet>unsigned long</snippet></ROW><ROW><id>15381220</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack("&lt;L", 191)
'\xbf\x00\x00\x00'
</snippet></ROW><ROW><id>15381220</id><snippet>bufferSize</snippet></ROW><ROW><id>15381220</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; import numbers
&gt;&gt;&gt; s = 'numbers'
&gt;&gt;&gt; b = c_char_p(s)
&gt;&gt;&gt; r = memset(b, 100, 1)
&gt;&gt;&gt; s
'dumbers'

&gt;&gt;&gt; numbers.Number
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'numbers' is not defined

&gt;&gt;&gt; globals()[s].Number
&lt;class 'numbers.Number'&gt;
</snippet></ROW><ROW><id>15381220</id><snippet>create_string_buffer</snippet></ROW><ROW><id>15381220</id><snippet>char</snippet></ROW><ROW><id>15381220</id><snippet>&gt;&gt;&gt; b1 = create_string_buffer('test1')
&gt;&gt;&gt; type(b1)
&lt;class 'ctypes.c_char_Array_6'&gt;
&gt;&gt;&gt; b1.value
'test1'

&gt;&gt;&gt; b2 = (c_char * 6)()
&gt;&gt;&gt; b2.value = 'test2'
&gt;&gt;&gt; type(b2)
&lt;class 'ctypes.c_char_Array_6'&gt;
&gt;&gt;&gt; b2.value
'test2'
&gt;&gt;&gt; b2.raw
'test2\x00'
</snippet></ROW><ROW><id>15381220</id><snippet>unsigned long</snippet></ROW><ROW><id>15381220</id><snippet>value = c_ulong() 
bytesRead = c_ulong()
rpm(ph, addy, byref(value), sizeof(value), byref(bytesRead))
</snippet></ROW><ROW><id>15381220</id><snippet>&gt;&gt;&gt; offset = sizeof(c_size_t)*2
&gt;&gt;&gt; addr = id(200) + offset
&gt;&gt;&gt; n = c_int.from_address(addr)
&gt;&gt;&gt; n
c_long(200)
&gt;&gt;&gt; n.value = 2000000
&gt;&gt;&gt; 
&gt;&gt;&gt; 200 + 1
2000001
</snippet></ROW><ROW><id>15381577</id><snippet>db_connection.commit()
</snippet></ROW><ROW><id>15381831</id><snippet>width = max(coord[0] for coord in coordinates)
height = max(coord[1] for coord in coordinates)
zeros_and_ones = numpy.zeros([width, height])
for x, y in coordinates:
    zeros_and_ones[x, y] = 1
</snippet></ROW><ROW><id>15381850</id><snippet>"%s"</snippet></ROW><ROW><id>15382354</id><snippet>[1] * 80
</snippet></ROW><ROW><id>15382528</id><snippet>set_xticks()</snippet></ROW><ROW><id>15382528</id><snippet>ax.bar(x, y, align='center')</snippet></ROW><ROW><id>15382530</id><snippet>from Tkinter import *
from glob import glob

class ImageFrame(Frame):

    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.images = glob("*.gif")
        self.cur = 0
        # label showing the image
        self.image = PhotoImage()
        imagelabel = Label(self, image=self.image)
        imagelabel.grid(row=1, column=1)
        # button cycling through the images
        button = Button(self, text="NEXT", command=self.show_next)
        button.grid(row=2, column=1)
        # layout and show first image
        self.grid()
        self.show_next()

    def show_next(self):
        self.cur = (self.cur + 1) % len(self.images)
        self.image.configure(file=self.images[self.cur])

ImageFrame().mainloop()
</snippet></ROW><ROW><id>15382530</id><snippet>glob</snippet></ROW><ROW><id>15382530</id><snippet>grid</snippet></ROW><ROW><id>15382530</id><snippet>show_next</snippet></ROW><ROW><id>15382530</id><snippet>PhotoImage</snippet></ROW><ROW><id>15382530</id><snippet>configure</snippet></ROW><ROW><id>15382530</id><snippet>gif</snippet></ROW><ROW><id>15382643</id><snippet>driver = gdal.GetDriverByName('MEM')
outds = driver.Create('', pixelxsize, pixelysize, 1, GDT_Byte)
outds.SetProjection(target_proj)
outds.SetGeoTransform(target_gt)

gdal.RasterizeLayer(outds, [1], vectorlayer, burn_values=[1])
</snippet></ROW><ROW><id>15382911</id><snippet>zip()</snippet></ROW><ROW><id>15382911</id><snippet>from collections import OrderedDict

ordered_dictionary = [OrderedDict(zip(names, subl)) for subl in list_of_lists]
</snippet></ROW><ROW><id>15382911</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint([OrderedDict(zip(names, subl)) for subl in list_of_lists])
[OrderedDict([('date', '20010103'), ('open', '0.9507'), ('high', '0.9569'), ('low', '0.9262'), ('close', '0.9271')]),
 OrderedDict([('date', '20010104'), ('open', '0.9271'), ('high', '0.9515'), ('low', '0.9269'), ('close', '0.9507')]),
 OrderedDict([('date', '20010105'), ('open', '0.9507'), ('high', '0.9591'), ('low', '0.9464'), ('close', '0.9575')])]
</snippet></ROW><ROW><id>15382960</id><snippet>for element in node:
    if 'parent' in element:
        if 'children' not in node[element['parent']]:
            node[element['parent']]['children'] = []
        node[element['parent']]['children'].append(element)
        del element['parent']

test = node[0]
</snippet></ROW><ROW><id>15382960</id><snippet>children</snippet></ROW><ROW><id>15382960</id><snippet>node</snippet></ROW><ROW><id>15383233</id><snippet>from matplotlib.pyplot import figure, show
from scipy.stats import gaussian_kde
from numpy.random import normal
from numpy import arange

def violin_plot(ax, data, pos, bp=False):
    '''
    create violin plots on an axis
    '''
    dist = max(pos)-min(pos)
    w = min(0.15*max(dist,1.0),0.5)
    for d,p in zip(data,pos):
        k = gaussian_kde(d) #calculates the kernel density
        m = k.dataset.min() #lower bound of violin
        M = k.dataset.max() #upper bound of violin
        x = arange(m,M,(M-m)/100.) # support for violin
        v = k.evaluate(x) #violin profile (density curve)
        v = v/v.max()*w #scaling the violin to the available space
        ax.fill_betweenx(x,p,v+p,facecolor='y',alpha=0.3)
        ax.fill_betweenx(x,p,-v+p,facecolor='y',alpha=0.3)
    if bp:
        ax.boxplot(data,notch=1,positions=pos,vert=1)

if __name__=="__main__":
    pos = range(5)
    data = [normal(size=100) for i in pos]
    fig=figure()
    ax = fig.add_subplot(111)
    violin_plot(ax,data,pos,bp=1)

    data_x = [0, 1, 2, 2, 3, 4]
    data_y = [1.5, 1., 0.7, 2.5, 1, 1.5]
    ax.plot(data_x, data_y, 'or')
    fig.savefig("violins.gif")
</snippet></ROW><ROW><id>15383251</id><snippet>exists</snippet></ROW><ROW><id>15383251</id><snippet>Select</snippet></ROW><ROW><id>15383251</id><snippet># use on an existing select()
s = select([table.c.col1]).where(table.c.col2==5)
s = exists(s)

# construct a select() at once
exists(['*'], **select_arguments).where(criterion)

# columns argument is optional, generates "EXISTS (SELECT *)"
# by default.
exists().where(table.c.col2==5)
</snippet></ROW><ROW><id>15383251</id><snippet>EXISTS</snippet></ROW><ROW><id>15383251</id><snippet>exists()</snippet></ROW><ROW><id>15383251</id><snippet>EXISTS(SELECT * from t);</snippet></ROW><ROW><id>15383251</id><snippet>SELECT EXISTS(SELECT * FROM t);</snippet></ROW><ROW><id>15383251</id><snippet>exists()</snippet></ROW><ROW><id>15383251</id><snippet>select()</snippet></ROW><ROW><id>15383251</id><snippet>result = conn.execute(select([exists().where(cookie_table.c.cookie_id == cookie_id)]))
</snippet></ROW><ROW><id>15383251</id><snippet>&gt;&gt;&gt; print select([exists().where(users.c.name=='test')])
SELECT EXISTS (SELECT *
FROM users
WHERE users.name = :name_1)
</snippet></ROW><ROW><id>15383251</id><snippet>exists</snippet></ROW><ROW><id>15383251</id><snippet>limit</snippet></ROW><ROW><id>15384039</id><snippet>Moved Permanently</snippet></ROW><ROW><id>15384039</id><snippet>urllib2</snippet></ROW><ROW><id>15384039</id><snippet>...
response = urllib2.urlopen(req)
if response.geturl() == url:
  // no redirect occurred
else:
  // a redirect occurred because the url has changed
</snippet></ROW><ROW><id>15384080</id><snippet>wdict = words_dict() #Builds a dictionary containing all valid English words...
</snippet></ROW><ROW><id>15384080</id><snippet>known_red</snippet></ROW><ROW><id>15384171</id><snippet>openpyxl</snippet></ROW><ROW><id>15384171</id><snippet>wrap_text</snippet></ROW><ROW><id>15384171</id><snippet>from openpyxl import Workbook

workbook = Workbook()
worksheet = workbook.worksheets[0]
worksheet.title = "Sheet1"

worksheet.cell('A1').style.alignment.wrap_text = True
worksheet.cell('A1').value = "Line 1\nLine 2\nLine 3"

workbook.save('wrap_text1.xlsx')
</snippet></ROW><ROW><id>15384171</id><snippet>from xlsxwriter.workbook import Workbook

# Create an new Excel file and add a worksheet.
workbook = Workbook('wrap_text2.xlsx')
worksheet = workbook.add_worksheet()

# Widen the first column to make the text clearer.
worksheet.set_column('A:A', 20)

# Add a cell format with text wrap on.
cell_format = workbook.add_format({'text_wrap': True})

# Write a wrapped string to a cell.
worksheet.write('A1', "Line 1\nLine 2\nLine 3", cell_format)

workbook.close()
</snippet></ROW><ROW><id>15384214</id><snippet>zip</snippet></ROW><ROW><id>15384214</id><snippet>sum</snippet></ROW><ROW><id>15384214</id><snippet>out = [sum(i) for i in zip(x1, x2, x3)]
</snippet></ROW><ROW><id>15384214</id><snippet>reduce</snippet></ROW><ROW><id>15384214</id><snippet>out = [reduce(lambda a, b: a * b, i) for i in zip(x1, x2, x3)]
</snippet></ROW><ROW><id>15384214</id><snippet>reduce</snippet></ROW><ROW><id>15384214</id><snippet>functools</snippet></ROW><ROW><id>15384214</id><snippet>def mult(lst):
    mul = 1
    for i in lst:
        mul *= i
    return mul

out = [mult(i) for i in zip(x1, x2, x3)]
</snippet></ROW><ROW><id>15384214</id><snippet>lst = [[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]</snippet></ROW><ROW><id>15384214</id><snippet>zip(x1, x2, x3)</snippet></ROW><ROW><id>15384214</id><snippet>zip(*lst)</snippet></ROW><ROW><id>15384214</id><snippet>*</snippet></ROW><ROW><id>15384214</id><snippet>out = [sum(i) for i in zip(*lst)]
</snippet></ROW><ROW><id>15384248</id><snippet># like list comprehensions but with () instead of []
gen = (b for a, b in foo if a == 'b')
my_element = next(gen)
</snippet></ROW><ROW><id>15384248</id><snippet>my_element = next(b for a, b in foo if a == 'b')
</snippet></ROW><ROW><id>15384248</id><snippet>from itertools import ifilter

my_element = next(ifilter(lambda (x, y): x == 'b', foo))
</snippet></ROW><ROW><id>15384248</id><snippet>timeit</snippet></ROW><ROW><id>15384273</id><snippet>list()</snippet></ROW><ROW><id>15384273</id><snippet>range()</snippet></ROW><ROW><id>15384273</id><snippet>print(range(10))
</snippet></ROW><ROW><id>15384273</id><snippet>print(list(range(10)))
</snippet></ROW><ROW><id>15384273</id><snippet>for el in range(10):
  print(el)
</snippet></ROW><ROW><id>15384296</id><snippet>%%cython
cdef int _one_child_number(int s, int child_count, int digits_count):
    cdef int start, count, c, child_count2, s2, part, i
    if s &gt;= 10**(digits_count-1):
        return child_count
    else:
        if s == 0:
            start = 1
        else:
            start = 0
        count = 0
        for c in range(start, 10):
            s2 = s*10 + c
            child_count2 = child_count
            i = 10
            while True:
                part = s2 % i
                if part % digits_count == 0:
                    child_count2 += 1
                    if child_count2 &gt; 1:
                        break
                if part == s2:
                    break
                i *= 10

            if child_count2 &lt;= 1:
                count += _one_child_number(s2, child_count2, digits_count)
        return count 

def one_child_number(int digits_count):
    return _one_child_number(0, 0, digits_count)
</snippet></ROW><ROW><id>15384296</id><snippet>print sum(one_child_number(i) for i in xrange(8))
</snippet></ROW><ROW><id>15384296</id><snippet>_one_child_number</snippet></ROW><ROW><id>15384296</id><snippet>s</snippet></ROW><ROW><id>15384296</id><snippet>child_count</snippet></ROW><ROW><id>15384296</id><snippet>s</snippet></ROW><ROW><id>15384296</id><snippet>digits_count</snippet></ROW><ROW><id>15384296</id><snippet>s</snippet></ROW><ROW><id>15384296</id><snippet>def _one_child_number(s, child_count, digits_count):
    print s, child_count
    if s &gt;= 10**(digits_count-1): # if the length of s is digits_count
        return child_count # child_count is 0 or 1 here, 1 means we found one one-child-number.
    else:
        if s == 0: 
            start = 1 #if the length of s is 0, we choose from 123456789 for the most left digit.
        else:
            start = 0 #otherwise we choose from 0123456789 
        count = 0 # init the one-child-number count
        for c in range(start, 10): # loop for every digit
            s2 = s*10 + c  # add digit c to the right of s

            # following code calculates the child count of s2
            child_count2 = child_count 
            i = 10
            while True:
                part = s2 % i
                if part % digits_count == 0:
                    child_count2 += 1
                    if child_count2 &gt; 1: # when child count &gt; 1, it's not a one-child-number, break
                        break
                if part == s2:
                    break
                i *= 10

            # if the child count by far is less than or equal 1, 
            # call _one_child_number recursively to add next digit.
            if child_count2 &lt;= 1: 
                count += _one_child_number(s2, child_count2, digits_count)
        return count 
</snippet></ROW><ROW><id>15384296</id><snippet>_one_child_number(0, 0, 3)</snippet></ROW><ROW><id>15384296</id><snippet>0 0
1 0
10 1
101 1
104 1
107 1
11 0
110 1
111 1
112 1
113 1
114 1
115 1
116 1
117 1
118 1
119 1
12 1
122 1
125 1
128 1
13 1
131 1
134 1
137 1
14 0
140 1
141 1
142 1
143 1
144 1
145 1
146 1
147 1
148 1
149 1
15 1
152 1
155 1
158 1
16 1
161 1
164 1
167 1
17 0
170 1
171 1
172 1
173 1
174 1
175 1
176 1
177 1
178 1
179 1
18 1
182 1
185 1
188 1
19 1
191 1
194 1
197 1
2 0
20 1
202 1
205 1
208 1
21 1
211 1
214 1
217 1
22 0
220 1
221 1
222 1
223 1
224 1
225 1
226 1
227 1
228 1
229 1
23 1
232 1
235 1
238 1
24 1
241 1
244 1
247 1
25 0
250 1
251 1
252 1
253 1
254 1
255 1
256 1
257 1
258 1
259 1
26 1
262 1
265 1
268 1
27 1
271 1
274 1
277 1
28 0
280 1
281 1
282 1
283 1
284 1
285 1
286 1
287 1
288 1
289 1
29 1
292 1
295 1
298 1
3 1
31 1
311 1
314 1
317 1
32 1
322 1
325 1
328 1
34 1
341 1
344 1
347 1
35 1
352 1
355 1
358 1
37 1
371 1
374 1
377 1
38 1
382 1
385 1
388 1
4 0
40 1
401 1
404 1
407 1
41 0
410 1
411 1
412 1
413 1
414 1
415 1
416 1
417 1
418 1
419 1
42 1
422 1
425 1
428 1
43 1
431 1
434 1
437 1
44 0
440 1
441 1
442 1
443 1
444 1
445 1
446 1
447 1
448 1
449 1
45 1
452 1
455 1
458 1
46 1
461 1
464 1
467 1
47 0
470 1
471 1
472 1
473 1
474 1
475 1
476 1
477 1
478 1
479 1
48 1
482 1
485 1
488 1
49 1
491 1
494 1
497 1
5 0
50 1
502 1
505 1
508 1
51 1
511 1
514 1
517 1
52 0
520 1
521 1
522 1
523 1
524 1
525 1
526 1
527 1
528 1
529 1
53 1
532 1
535 1
538 1
54 1
541 1
544 1
547 1
55 0
550 1
551 1
552 1
553 1
554 1
555 1
556 1
557 1
558 1
559 1
56 1
562 1
565 1
568 1
57 1
571 1
574 1
577 1
58 0
580 1
581 1
582 1
583 1
584 1
585 1
586 1
587 1
588 1
589 1
59 1
592 1
595 1
598 1
6 1
61 1
611 1
614 1
617 1
62 1
622 1
625 1
628 1
64 1
641 1
644 1
647 1
65 1
652 1
655 1
658 1
67 1
671 1
674 1
677 1
68 1
682 1
685 1
688 1
7 0
70 1
701 1
704 1
707 1
71 0
710 1
711 1
712 1
713 1
714 1
715 1
716 1
717 1
718 1
719 1
72 1
722 1
725 1
728 1
73 1
731 1
734 1
737 1
74 0
740 1
741 1
742 1
743 1
744 1
745 1
746 1
747 1
748 1
749 1
75 1
752 1
755 1
758 1
76 1
761 1
764 1
767 1
77 0
770 1
771 1
772 1
773 1
774 1
775 1
776 1
777 1
778 1
779 1
78 1
782 1
785 1
788 1
79 1
791 1
794 1
797 1
8 0
80 1
802 1
805 1
808 1
81 1
811 1
814 1
817 1
82 0
820 1
821 1
822 1
823 1
824 1
825 1
826 1
827 1
828 1
829 1
83 1
832 1
835 1
838 1
84 1
841 1
844 1
847 1
85 0
850 1
851 1
852 1
853 1
854 1
855 1
856 1
857 1
858 1
859 1
86 1
862 1
865 1
868 1
87 1
871 1
874 1
877 1
88 0
880 1
881 1
882 1
883 1
884 1
885 1
886 1
887 1
888 1
889 1
89 1
892 1
895 1
898 1
9 1
91 1
911 1
914 1
917 1
92 1
922 1
925 1
928 1
94 1
941 1
944 1
947 1
95 1
952 1
955 1
958 1
97 1
971 1
974 1
977 1
98 1
982 1
985 1
988 1
</snippet></ROW><ROW><id>15384604</id><snippet>${variable['result']['content'][0]['dataCache']}
</snippet></ROW><ROW><id>15384633</id><snippet>_table</snippet></ROW><ROW><id>15384633</id><snippet>_name</snippet></ROW><ROW><id>15384853</id><snippet>os.chdir()</snippet></ROW><ROW><id>15384853</id><snippet>org_dir = os.getcwd()

... # your stuff

os.chdir(org_dir)
# delete the dir
</snippet></ROW><ROW><id>15385028</id><snippet>def parse(s):
    for t in s.split('&lt;'):
        for u in t.strip().split('&gt;',1):
            if u.strip(): yield u.strip()

&gt;&gt;&gt; list(parse(s1))
['one', 'two', 'three', "here's one attribute", 'six : 10.3', 'seven : 8.5', 'eight : 90.1', 'nine : 8.7']
&gt;&gt;&gt; list(parse("&lt;one&gt;&lt;two&gt;&lt;three&gt; an.attribute ::"))
['one', 'two', 'three', 'an.attribute ::']

&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(list(parse(s1)))
['one',
 'two',
 'three',
 "here's one attribute",
 'six : 10.3',
 'seven : 8.5',
 'eight : 90.1',
 'nine : 8.7']
</snippet></ROW><ROW><id>15385028</id><snippet>&gt;&gt;&gt; [ u.strip() for t in s1.split('&lt;') for u in t.strip().split('&gt;',1) if u.strip() ]
['one', 'two', 'three', "here's one attribute", 'six : 10.3', 'seven : 8.5', 'eight : 90.1', 'nine : 8.7']
</snippet></ROW><ROW><id>15385030</id><snippet>propagate</snippet></ROW><ROW><id>15385030</id><snippet>sth</snippet></ROW><ROW><id>15385030</id><snippet>False</snippet></ROW><ROW><id>15385142</id><snippet>src = open('source').read()
if src not in open('dest').read():
    with open('dest', 'a') as dst:
        dst.write(src)
</snippet></ROW><ROW><id>15385294</id><snippet>{-# LANGUAGE TemplateHaskell #-}

import Data.MessagePack.Derive

-- I don't know which of these lines you need
-- I also don't know whether the True should actually be False
$(deriveObject True ''Document)
$(derivePack True ''Document)
$(deriveUnpack True ''Document)
</snippet></ROW><ROW><id>15385351</id><snippet>lis</snippet></ROW><ROW><id>15385351</id><snippet># python 2.7:
n = {k: d[k] for k in d.viewkeys() &amp; set(lis)}

# python 3:
n = {k: d[k] for k in d.keys() &amp; set(lis)}
</snippet></ROW><ROW><id>15385351</id><snippet>in</snippet></ROW><ROW><id>15385351</id><snippet>d</snippet></ROW><ROW><id>15385351</id><snippet># python 2.6 or older:
n = dict((k, d[k]) for k in lis if k in d)

# python 2.7 and up:
n = {k: d[k] for k in lis if k in d}
</snippet></ROW><ROW><id>15385351</id><snippet>lis</snippet></ROW><ROW><id>15385351</id><snippet>d</snippet></ROW><ROW><id>15385351</id><snippet>if k in d</snippet></ROW><ROW><id>15385351</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit("{k: d[k] for k in d.viewkeys() &amp; s}", 'from __main__ import d, lis; s=set(lis)')
2.156520128250122
&gt;&gt;&gt; timeit("{k: d[k] for k in lis if k in d}", 'from __main__ import d, lis')
0.9401540756225586
</snippet></ROW><ROW><id>15385759</id><snippet>argv</snippet></ROW><ROW><id>15385798</id><snippet>{% if writeable=="False" %}
{% if not usrpermdev %}
$("#chart_div").html("&lt;div class='alert'&gt;&lt;strong&gt;Warning!&lt;/strong&gt; You don't have the permission to view this page.&lt;/div&gt;")
{% elif usrpermdev==0 %}
$("#chart_div").html("&lt;div class='alert'&gt;&lt;strong&gt;Warning!&lt;/strong&gt; You don't have the permission to view this page.&lt;/div&gt;")
{% end %}
</snippet></ROW><ROW><id>15386228</id><snippet>re.compile('&lt;a href="([^"]+?)"&gt;See full summary&lt;/a&gt;', re.DOTALL | re.IGNORECASE)
</snippet></ROW><ROW><id>15386228</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; patt = re.compile('&lt;a href="([^"]+?)"&gt;See full summary&lt;/a&gt;', re.DOTALL | re.IGNORECASE)
&gt;&gt;&gt; patt.findall('&lt;a href="link"&gt;text&lt;/a&gt; &lt;a href="correctLink"&gt;See full summary&lt;/a&gt;')
['correctLink']
</snippet></ROW><ROW><id>15386228</id><snippet>soup.find('a', text='See full summary')['href']
</snippet></ROW><ROW><id>15386228</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup=BeautifulSoup('&lt;a href="link"&gt;text&lt;/a&gt; &lt;a href="correctLink"&gt;See full summary&lt;/a&gt;')
&gt;&gt;&gt; soup.find('a', text='See full summary')['href']
u'correctLink'
</snippet></ROW><ROW><id>15386806</id><snippet>/admin/cms/page</snippet></ROW><ROW><id>15386806</id><snippet>- Home (level=0)
    - About Us (level=1)
        - About Company Services (level=2)
            - Foo Bar (level=3)
        - Our Management Team (level=2)
    - Some Other Section (level=1)
        - Some Sub Section (level=2)
    - ...
</snippet></ROW><ROW><id>15386806</id><snippet>{% show_menu A B C D %}</snippet></ROW><ROW><id>15386806</id><snippet>ul</snippet></ROW><ROW><id>15386806</id><snippet>A = Start
B = End
C = Inactive
D = Active
</snippet></ROW><ROW><id>15386806</id><snippet>{% show_menu 1 2 0 100 %}</snippet></ROW><ROW><id>15386806</id><snippet>A=1</snippet></ROW><ROW><id>15386806</id><snippet>Home</snippet></ROW><ROW><id>15386806</id><snippet>B=2</snippet></ROW><ROW><id>15386806</id><snippet>Foo Bar</snippet></ROW><ROW><id>15386806</id><snippet>C=0</snippet></ROW><ROW><id>15386806</id><snippet>About Us</snippet></ROW><ROW><id>15386806</id><snippet>Some Other Section</snippet></ROW><ROW><id>15386806</id><snippet>About Company...</snippet></ROW><ROW><id>15386806</id><snippet>Out Management...</snippet></ROW><ROW><id>15386806</id><snippet>D=100</snippet></ROW><ROW><id>15386806</id><snippet>About Company...</snippet></ROW><ROW><id>15386806</id><snippet>Our Management</snippet></ROW><ROW><id>15386806</id><snippet>- About Us (level=1)
    - About Company Services (level=2)
    - Our Management Team (level=2)
- Some Other Section (level=1)
</snippet></ROW><ROW><id>15386961</id><snippet>flowRates</snippet></ROW><ROW><id>15386961</id><snippet>/simulation-20130312_13:33p1435       # root group: /
   +- input                           # group: /input
   |  +- gravity = 9.81               # scalar double
   |  +- timeScale = 1.0              # scalar double
   |  +- userTitle = 'real'           # scalar string
   |  +- flowRates = [ 1.1, 2.1 ]     # scalar array[2]
   |  +- material                     # group: /input/material
   |     +- density = 1234.2          # scalar double
   |     +- young = 1.123e6           # scalar double
   |     +- temp = 290.2              # scalar double
   +- finished = '20130312_16:21'     # scalar string
   +- host = 'efflux.local'           # scalar string
   +- series                          # group: /series
      +- t = [0,1e-5,2e-5,...,3.4e-4] # simple dataset double
      +- Ek = [0,...]                 # simple dataset double
</snippet></ROW><ROW><id>15387043</id><snippet>pygame.mixer.init(frequency=22050,size=-16,channels=4)
sound1 = pygame.mixer.Sound('sound1.wav')
sound2 = pygame.mixer.Sound('sound2.wav')
chan1 = pygame.mixer.find_channel()
chan1.queue(sound1)
chan2 = pygame.mixer.find_channel()
chan2.queue(sound2)
time.sleep(10)
</snippet></ROW><ROW><id>15387049</id><snippet>alist = numbers.split()
</snippet></ROW><ROW><id>15387049</id><snippet>alist=list(numbers)</snippet></ROW><ROW><id>15387049</id><snippet>&gt;&gt;&gt; numbers = '5 3 12 3 544 5 1 7 1'
&gt;&gt;&gt; alist = numbers.split()
&gt;&gt;&gt; alist
['5', '3', '12', '3', '544', '5', '1', '7', '1']
</snippet></ROW><ROW><id>15387113</id><snippet>from django.core.urlresolvers import reverse
from django.http import HttpResponseRedirect


def affiche(request):
    form = AfficheForm(request.POST or None)
    if request.method == 'POST':     
        if form.is_valid():
            Select = form.cleaned_data['Select']
            if Select == '1':
                url = reverse('affiche_all', args=(),
                    kwargs={'devise': 'EURO'})
                return HttpResponseRedirect(url)
</snippet></ROW><ROW><id>15387113</id><snippet>from django.conf.urls import url, patterns

urlpatterns = patterns('your_app.views',
    url(r'^some-path/(?P&lt;devise&gt;[-\w]+)/$', 'affiche_all', name='affiche_all'),
)
</snippet></ROW><ROW><id>15387759</id><snippet>__getattr__</snippet></ROW><ROW><id>15387759</id><snippet>type(obj).__getattr__</snippet></ROW><ROW><id>15387759</id><snippet>MyClass.fake</snippet></ROW><ROW><id>15387759</id><snippet>__getattr__</snippet></ROW><ROW><id>15387759</id><snippet>MyClass.fake</snippet></ROW><ROW><id>15387759</id><snippet>MyClass.__getattr__('fake')</snippet></ROW><ROW><id>15387759</id><snippet>__getattr__</snippet></ROW><ROW><id>15387759</id><snippet>self</snippet></ROW><ROW><id>15387759</id><snippet>name</snippet></ROW><ROW><id>15388271</id><snippet>tx=transactionID 
</snippet></ROW><ROW><id>15388271</id><snippet>&lt;form method=post action="https://www.paypal.com/cgi-bin/webscr"&gt; 
&lt;input type="hidden" name="cmd" value="_notify-synch"&gt; 
&lt;input type="hidden" name="tx" value="TransactionID"&gt; 
&lt;input type="hidden" name="at" value="YourIdentityToken"&gt; 
&lt;input type="submit" value="PDT"&gt; 
&lt;/form&gt; 
</snippet></ROW><ROW><id>15388301</id><snippet>from dateutil.parser import parse as dateparser
dateparser("Wed Mar 13 10:10 EDT 2013").strftime("%Y-%m-%d %H:%M")
</snippet></ROW><ROW><id>15388340</id><snippet>np.fft.fftfreq</snippet></ROW><ROW><id>15388340</id><snippet>from __future__ import division
import numpy as np
import matplotlib.pyplot as plt

data = np.random.rand(301) - 0.5
ps = np.abs(np.fft.fft(data))**2

time_step = 1 / 30
freqs = np.fft.fftfreq(data.size, time_step)
idx = np.argsort(freqs)

plt.plot(freqs[idx], ps[idx])
</snippet></ROW><ROW><id>15388340</id><snippet>In [7]: max(freqs)
Out[7]: 14.950166112956811
</snippet></ROW><ROW><id>15388636</id><snippet>get_attribute</snippet></ROW><ROW><id>15388636</id><snippet>element = driver.find_element_by_xpath(".//*[@id='toplevel_page_menu']/ul/li[2]/a")
href = element.get_attribute('href')
print href
</snippet></ROW><ROW><id>15388636</id><snippet>from BeautifulSoup import BeautifulSoup

# On the current page
source = driver.page_source
soup = BeautifulSoup(source)

href = soup('&lt;the tag containing the anchor&gt;',{'id':'toplevel_page_menu'})[0]('ul')[0]('li')[2]('a')[0]['href']
</snippet></ROW><ROW><id>15388677</id><snippet>XMLHttpRequest</snippet></ROW><ROW><id>15388943</id><snippet>egg</snippet></ROW><ROW><id>15388943</id><snippet>python setup.py bdist --formats=egg</snippet></ROW><ROW><id>15389099</id><snippet>'\r'</snippet></ROW><ROW><id>15389099</id><snippet> - list 1\r\n
</snippet></ROW><ROW><id>15389099</id><snippet>\r</snippet></ROW><ROW><id>15389099</id><snippet>\n</snippet></ROW><ROW><id>15389099</id><snippet>print</snippet></ROW><ROW><id>15389099</id><snippet>&lt;li&gt;list 1\r&lt;/li&gt;\n
</snippet></ROW><ROW><id>15389099</id><snippet>&lt;/li&gt;</snippet></ROW><ROW><id>15389099</id><snippet>\r</snippet></ROW><ROW><id>15389099</id><snippet>\r</snippet></ROW><ROW><id>15389099</id><snippet>open(fname, 'rU')</snippet></ROW><ROW><id>15389099</id><snippet>re.sub('(- (?P&lt;id&gt;[^\r\n]+))', '&lt;li&gt;\g&lt;id&gt;&lt;/li&gt;', text)</snippet></ROW><ROW><id>15389137</id><snippet>"Dummy String"</snippet></ROW><ROW><id>15389137</id><snippet>hex</snippet></ROW><ROW><id>15389137</id><snippet>hexlify</snippet></ROW><ROW><id>15389137</id><snippet>&gt;&gt;&gt; binascii.hexlify('Dummy String')
'44756d6d7920537472696e67'
</snippet></ROW><ROW><id>15389137</id><snippet>unhexlify</snippet></ROW><ROW><id>15389137</id><snippet>unhexlify</snippet></ROW><ROW><id>15389137</id><snippet>hex</snippet></ROW><ROW><id>15389137</id><snippet>&gt;&gt;&gt; binascii.unhexlify('44756d6d7920537472696e67')
'Dummy String'
</snippet></ROW><ROW><id>15389137</id><snippet>md5</snippet></ROW><ROW><id>15389137</id><snippet>"Dummy String"</snippet></ROW><ROW><id>15389137</id><snippet>unhexlify</snippet></ROW><ROW><id>15389137</id><snippet>import binascii
import hashlib

the_hash = hashlib.md5('Dummy String').hexdigest()
print the_hash
the_unhex = binascii.unhexlify(the_hash)
print the_unhex
</snippet></ROW><ROW><id>15389137</id><snippet>ec041da9f891c09b3d1617ba5057b3f5
ÐLÐ¬-Ñ?=Â¦PWÐÐ£
</snippet></ROW><ROW><id>15389153</id><snippet>nltk.help.upenn_tagset()
</snippet></ROW><ROW><id>15389153</id><snippet>tagsets</snippet></ROW><ROW><id>15389394</id><snippet>Traceback (most recent call last):
  File "&lt;pyshell#4&gt;", line 6, in &lt;module&gt;
    str1 = re.sub(match.group(),"\\"+match.group(),str1)
error: unbalanced parenthesis
</snippet></ROW><ROW><id>15389394</id><snippet>match.group()</snippet></ROW><ROW><id>15389394</id><snippet>match.group()</snippet></ROW><ROW><id>15389394</id><snippet>str1 = re.sub(re.escape(match.group()),"\\"+match.group(),str1)
</snippet></ROW><ROW><id>15389394</id><snippet>pattern = re.compile(r"("+i+")")
str1 = re.sub(pattern,"\\"+match.group(),str1)
</snippet></ROW><ROW><id>15389394</id><snippet>str1 = "/path/happy (dog)"
tuple_1 = (r'\s+', r'\(', r'\)')
for i in tuple_1:
     pattern = re.compile(r"("+i+")")

     match = pattern.search(str1)

     if match:
         str1 = re.sub(pattern,"\\"+match.group(),str1)
</snippet></ROW><ROW><id>15389394</id><snippet>'/path/happy\\ \\(dog\\)'</snippet></ROW><ROW><id>15389777</id><snippet>()</snippet></ROW><ROW><id>15389777</id><snippet>[]</snippet></ROW><ROW><id>15389777</id><snippet>end</snippet></ROW><ROW><id>15389777</id><snippet>numpy.zeros</snippet></ROW><ROW><id>15389777</id><snippet>zeros</snippet></ROW><ROW><id>15389777</id><snippet>[]</snippet></ROW><ROW><id>15389777</id><snippet>()</snippet></ROW><ROW><id>15389777</id><snippet>[random.random() for r in xrange(N)]</snippet></ROW><ROW><id>15389777</id><snippet>random(N)</snippet></ROW><ROW><id>15389777</id><snippet>import numpy
import random

N = int(100);
B = N+1;
M = 5e4;
burnin = M;
Niter = 20;
p = numpy.ones([B,Niter+1])/B;
hit = numpy.zeros([B,1]);
g = numpy.zeros([B, Niter]);
b_hat = numpy.zeros(B);

for j in range(1,Niter):
    x = [float(random.randint(0,1)&gt;0.5) for r in xrange(N)];
    bin_x = 1+sum(x);
    index = [random.randint(0,N-1) for r in xrange(int(M+burnin))];
    #acceptval = rand(1,M+burnin);
    acceptval = [random.random() for r in xrange(int(M+burnin))];
    for m in range(1,int(M+burnin)):
        y = x;
        y[index[m]] = 1-x[index[m]];
        bin_y = 1+sum(y);

        alpha = min(1, p[bin_x,j]/p[bin_y,j] );
        if acceptval[m]&lt;alpha:
            x = y; bin_x = bin_y;

        if m &gt; burnin: 
            hit[bin_x] = hit[bin_x]+1;

    pnew = p[:,j];
    for b in range(1,B-1):
        if (hit[b+1]*hit[b] == 0):
            pnew[b+1] = pnew[b]*(p[b+1,j]/p[b,j]);
        else:
            g[b,j] = hit[b+1]*hit[b] / [hit[b+1]+hit[b]];
            g_hat[b] = g[b,j]/sum(g[b,numpy.arange(1,j)]);
            pnew[b+1] = pnew[b]*(p[b+1,j]/p[b,j])+((hit[b+1]/hit[b])^g_hat[b]);
    p[:,j+1] = pnew/sum(pnew);
    hit[:] = 0;
</snippet></ROW><ROW><id>15389973</id><snippet>t.color('black', 'blue')
</snippet></ROW><ROW><id>15389973</id><snippet>t.pencolor('black')
t.fillcolor('blue')
</snippet></ROW><ROW><id>15389992</id><snippet>import re
regex = re.compile(r'y(es)?$', flags=re.IGNORECASE)
my_input = raw_input('&gt; ')
if regex.match(my_input):
    #etc 
</snippet></ROW><ROW><id>15389992</id><snippet>"y"</snippet></ROW><ROW><id>15389992</id><snippet>"yes"</snippet></ROW><ROW><id>15389992</id><snippet>"yellow"</snippet></ROW><ROW><id>15389992</id><snippet>"yesterday"</snippet></ROW><ROW><id>15389992</id><snippet>my_input = raw_input('&gt; ')
if my_input.lower() in ('y', 'yes'):
    #etc
</snippet></ROW><ROW><id>15389998</id><snippet>title</snippet></ROW><ROW><id>15389998</id><snippet>tree.find('.//dct:title', namespaces={'dct': 'http://purl.org/dc/terms/'})
</snippet></ROW><ROW><id>15389998</id><snippet>namespaces</snippet></ROW><ROW><id>15389998</id><snippet>nsmap = {
    'dct': 'http://purl.org/dc/terms/',
    'doc': 'http://www.witbd.org/xmlns/common/document/',
    'rdf': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
}

tree.find('.//dct:title', namespaces=nsmap)
</snippet></ROW><ROW><id>15389998</id><snippet>&gt;&gt;&gt; tree.find('.//dct:title', namespaces=nsmap)
&lt;Element '{http://purl.org/dc/terms/}title' at 0x105ec4690&gt;
&gt;&gt;&gt; tree.find('.//dct:title', namespaces=nsmap).text
'some text of interest to me'
</snippet></ROW><ROW><id>15389998</id><snippet>tree.find('.//{http://purl.org/dc/terms/}title')
</snippet></ROW><ROW><id>15389998</id><snippet>namespaces</snippet></ROW><ROW><id>15390028</id><snippet>suds.plugin.MessagePlugin</snippet></ROW><ROW><id>15390028</id><snippet>    import suds
    class PayloadInterceptor(suds.plugin.MessagePlugin):
        def __init__(self, *args, **kwargs):
            self.last_payload = None

        def received(self, context):
            #recieved xml as a string
            print "%s bytes received" % len(context.reply)
            self.last_payload = context.reply    
            #clean up reply to prevent parsing
            context.reply = ""
            return context

    if __name__=='__main__':    
        wsurl = "http://webservices.oorsprong.org/websamples.countryinfo/CountryInfoService.wso?WSDL"
        payload_interceptor = PayloadInterceptor()
        client = suds.client.Client(wsurl, plugins=[payload_interceptor])
        print client
        res = client.service.CapitalCity("NL")
        print "received %s bytes" % len(payload_interceptor.last_payload)
        print "parsed result: %s" % res
        print "response payload: %s" % payload_interceptor.last_payload    
</snippet></ROW><ROW><id>15390028</id><snippet>    ...    
    received 336 bytes
    parsed result: None
    response payload: &lt;?xml version="1.0" encoding="utf-8"?&gt;
    &lt;soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/"&gt;
      &lt;soap:Body&gt;
        &lt;m:CapitalCityResponse xmlns:m="http://www.oorsprong.org/websamples.countryinfo"&gt;
          &lt;m:CapitalCityResult&gt;Amsterdam&lt;/m:CapitalCityResult&gt;
        &lt;/m:CapitalCityResponse&gt;
      &lt;/soap:Body&gt;
    &lt;/soap:Envelope&gt;
</snippet></ROW><ROW><id>15390233</id><snippet>,</snippet></ROW><ROW><id>15390279</id><snippet>class MyClass(object):
    def __init__(self, foo, bar, baz):
        if not self._database_exists(foo):
            raise ValueError('No valid database {}'.format(foo))

        # etc.
</snippet></ROW><ROW><id>15390279</id><snippet>try:
    theinstance = MyClass('foooption', barvalue, bazvalue)
except ValueError as e:
    # Oops, something went wrong
    showErrorToUser(e)
    theinstance = None
</snippet></ROW><ROW><id>15390604</id><snippet>str</snippet></ROW><ROW><id>15390604</id><snippet>unicode</snippet></ROW><ROW><id>15390604</id><snippet>str</snippet></ROW><ROW><id>15390604</id><snippet>unicode</snippet></ROW><ROW><id>15390604</id><snippet>str</snippet></ROW><ROW><id>15390604</id><snippet>unicode</snippet></ROW><ROW><id>15390604</id><snippet>byte</snippet></ROW><ROW><id>15390604</id><snippet>str</snippet></ROW><ROW><id>15390604</id><snippet>("x = %s" % '\u041c\u0438\u0440').encode("utf-8")</snippet></ROW><ROW><id>15390604</id><snippet>u</snippet></ROW><ROW><id>15390604</id><snippet> ("x = %s" % '\u041c\u0438\u0440').encode("utf-8")
</snippet></ROW><ROW><id>15390651</id><snippet>.stripped_strings</snippet></ROW><ROW><id>15390651</id><snippet>soup = BeautifulSoup(data)
for row in soup.find_all('tr'):
    print '\n'.join(row.stripped_strings)
</snippet></ROW><ROW><id>15390651</id><snippet>for row in soup.findAll('tr'):
    print '\n'.join(el.strip() for row.findAll(text=True) if el.strip())
</snippet></ROW><ROW><id>15390692</id><snippet>f = open('filename.txt', 'r')
li = [line.split() for line in f]
</snippet></ROW><ROW><id>15390958</id><snippet>long</snippet></ROW><ROW><id>15390958</id><snippet>&gt;&gt;&gt; type(100000000000000000000)
&lt;type 'long'&gt;
&gt;&gt;&gt; type(np.int(100000000000000000000))
&lt;type 'long'&gt;
&gt;&gt;&gt; np.int64(100000000000000000000)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
OverflowError: Python int too large to convert to C long
</snippet></ROW><ROW><id>15390958</id><snippet>AttributeError</snippet></ROW><ROW><id>15390958</id><snippet>sqrt</snippet></ROW><ROW><id>15390958</id><snippet>numpy.sqrt</snippet></ROW><ROW><id>15390958</id><snippet>long.sqrt</snippet></ROW><ROW><id>15390958</id><snippet>math.sqrt</snippet></ROW><ROW><id>15390958</id><snippet>long</snippet></ROW><ROW><id>15390958</id><snippet>int</snippet></ROW><ROW><id>15390958</id><snippet>long</snippet></ROW><ROW><id>15390958</id><snippet>PyLongObject</snippet></ROW><ROW><id>15390958</id><snippet>long</snippet></ROW><ROW><id>15390958</id><snippet>PyLong_AsLong</snippet></ROW><ROW><id>15391397</id><snippet>try-catch</snippet></ROW><ROW><id>15391397</id><snippet>condition checks</snippet></ROW><ROW><id>15391397</id><snippet>condition fail</snippet></ROW><ROW><id>15391397</id><snippet>try:
    event = event_dict['ParamElement_Info_0']['dict']['Events_list']
except Exception, e:
    log('Opsss, incorrect data format: %s' % e.message)
</snippet></ROW><ROW><id>15391420</id><snippet>def isqrt(n):
    x = n
    y = (x + n // x) // 2
    while y &lt; x:
        x = y
        y = (x + n // x) // 2
    return x
</snippet></ROW><ROW><id>15391472</id><snippet>import argparse
parser = argparse.ArgumentParser(description='This is my description')
parser.add_argument('--ipv4', action='store_true', dest='ipv4')
</snippet></ROW><ROW><id>15391472</id><snippet>parser.add_argument('-ipv4', '--ipv4', action='store_true', dest='ipv4')
</snippet></ROW><ROW><id>15391810</id><snippet>def my_sqrt(x):
    root1 = math.sqrt(x)
    root2 = -root1
    return root1,root2
</snippet></ROW><ROW><id>15392228</id><snippet>item.setFlags(item.flags() ^ QtCore.Qt.ItemIsUserCheckable)
</snippet></ROW><ROW><id>15392228</id><snippet>item</snippet></ROW><ROW><id>15392228</id><snippet>^</snippet></ROW><ROW><id>15392228</id><snippet>|</snippet></ROW><ROW><id>15392228</id><snippet>QtCore.Qt.ItemIsUserCheckable</snippet></ROW><ROW><id>15392228</id><snippet>item.flags()</snippet></ROW><ROW><id>15392228</id><snippet>item.setData(Qt::CheckStateRole, QVariant());
</snippet></ROW><ROW><id>15392244</id><snippet>class MyClass(object):

    def __init__(self):
        self._conn = None

    @property
    def conn(self):
        if self._conn is None:
            self._conn = ConnectToDatabase()
        return self._conn

    def do_something1(self):
        self.conn.do_something1()

    def do_something2(self):
        self.conn.do_something2()
</snippet></ROW><ROW><id>15392244</id><snippet>def prerequisite(prerequisite_function, *pre_args, **pre_kwargs):
    def wrapper(func):
        def wrapped(self, *args, **kwargs):
            prerequisite_function(self, *pre_args, **pre_kwargs)
            return func(self, *args, **kwargs)
        return wrapped
    return builder

 class MyClass(object):

     def __init__(self):
         self.conn = None

     def connect(self):
         if self.conn is None:
             self.conn = ConnectToDatabase()

     @prerequisite(connect)
     def do_something(self):
         self.conn.do_something()
</snippet></ROW><ROW><id>15392244</id><snippet>prerequisite</snippet></ROW><ROW><id>15392417</id><snippet>In [44]: x = df['pipestring'].apply(lambda x: pd.Series(x.split('|')))

In [45]: x
Out[45]: 
    0     1    2       3
0  aa   aaa  aaa     NaN
1  bb  bbbb  bbb  bbbbbb

In [46]: df.join(x).set_index(['wibble'])
Out[46]: 
                pipestring                 pipelist   0     1    2       3
wibble                                                                    
a               aa|aaa|aaa           [aa, aaa, aaa]  aa   aaa  aaa     NaN
b       bb|bbbb|bbb|bbbbbb  [bb, bbbb, bbb, bbbbbb]  bb  bbbb  bbb  bbbbbb
</snippet></ROW><ROW><id>15392576</id><snippet>FGlasgow</snippet></ROW><ROW><id>15392576</id><snippet>Random</snippet></ROW><ROW><id>15392576</id><snippet>FGlasgow</snippet></ROW><ROW><id>15392576</id><snippet>randint()</snippet></ROW><ROW><id>15392576</id><snippet>FGlasgow</snippet></ROW><ROW><id>15392576</id><snippet>import random

def RandomNo(upper=50):
    Random = random.randint(1, min(50, upper))
    return Random

Food = 1
FGlasgow = 100

while FGlasgow &gt; 0:
    Random = RandomNo(FGlasgow)
    Food += Random
    FGlasgow -= Random
    print "You have found" , Random , "units of food"
</snippet></ROW><ROW><id>15392576</id><snippet>FGlasgow</snippet></ROW><ROW><id>15392576</id><snippet>while</snippet></ROW><ROW><id>15392625</id><snippet>file = open(filename)
while True:
    line = file.readline()
    if not line:      # if end of file, exit
        print "Reached end of file"
        break
    if line == "\n":  # if new line, or empty line, continue
        continue
    else:
        your function
</snippet></ROW><ROW><id>15392853</id><snippet>// sending a csrftoken with every ajax request
function csrfSafeMethod(method) {
    // these HTTP methods do not require CSRF protection
    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
}
$.ajaxSetup({
    crossDomain: false, // obviates need for sameOrigin test
    beforeSend: function(xhr, settings) {
        if (!csrfSafeMethod(settings.type)) {
            xhr.setRequestHeader("X-CSRFToken", $.cookie('csrftoken'));
        }
    }
});

$.ajax({
    type: "POST",
    // ...
</snippet></ROW><ROW><id>15392853</id><snippet>$.cookie('csrftoken')</snippet></ROW><ROW><id>15392853</id><snippet>{% csrf_token %}</snippet></ROW><ROW><id>15392853</id><snippet>ensure_csrf_cookie()</snippet></ROW><ROW><id>15392917</id><snippet>*</snippet></ROW><ROW><id>15392917</id><snippet>6/5*(6+7)
</snippet></ROW><ROW><id>15392971</id><snippet>&gt;&gt;&gt; print(r"abc\ndef")
abc\ndef
</snippet></ROW><ROW><id>15392971</id><snippet>&gt;&gt;&gt; string = "abc\ndef"
&gt;&gt;&gt; print (repr(string))
&gt;&gt;&gt; 'abc\ndef'
</snippet></ROW><ROW><id>15392971</id><snippet>repr()</snippet></ROW><ROW><id>15393081</id><snippet># you need this because your y column is an int64 (otherwise this the next step
# will throw an exception), on the to fix list in 0.11-dev though
In [71]: df = orig_df.astype('float64')

# use boolean indexing!
# NaN are automatically excluded
In [72]: df[df&gt;0.3] = 1 ; df[df&lt;=0.3] = 0

In [73]: df
Out[73]: 
     0   1         2   3   4  y
35 NaN NaN       NaN NaN   1  0
40 NaN   1       NaN NaN NaN  0
43 NaN NaN         0 NaN NaN  0
49 NaN   1       NaN NaN NaN  0
50 NaN   1       NaN NaN NaN  1
</snippet></ROW><ROW><id>15393091</id><snippet>from collections import defaultdict
ident_ranges = defaultdict(list)
with open('file1.txt', 'r') as f1
    for row in f1:
        ident, start, end = row.split()
        start, end = int(start), int(end)
        ident_ranges[ident].append((start, end))
with open('file2.txt', 'r') as f2, open('out.txt', 'w') as output:  
    for line in f2:
        ident, value = line.split()
        value = int(value)
        if any(start &lt;= value &lt;= end for start, end in ident_ranges[ident]):
            output.write(line)
</snippet></ROW><ROW><id>15393091</id><snippet>defaultdict</snippet></ROW><ROW><id>15393091</id><snippet>any</snippet></ROW><ROW><id>15393091</id><snippet>start &lt;= value &lt;= end</snippet></ROW><ROW><id>15393169</id><snippet>myDataString = "var1=value1&amp;var2=value2&amp;var3=value3"
mySplitData = myDataString.split('&amp;')

import collections
myDict = collections.defaultdict(list)

for value in mySplitData:
    splitValue = value.split('=')
    myDict[splitValue[0]]
</snippet></ROW><ROW><id>15393225</id><snippet>self.newFrame = NewFrame(self)
</snippet></ROW><ROW><id>15393225</id><snippet>def __init__(self, parentFrame):
    wx.Frame.__init__(self, None, title="New Frame")
    self.parentFrame = parentFrame
</snippet></ROW><ROW><id>15393261</id><snippet>plot_surface</snippet></ROW><ROW><id>15393266</id><snippet>(n,)</snippet></ROW><ROW><id>15393266</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; N=2
&gt;&gt;&gt; np.zeros((N,)*1)
array([ 0.,  0.])
&gt;&gt;&gt; np.zeros((N,)*2)
array([[ 0.,  0.],
       [ 0.,  0.]])
&gt;&gt;&gt; np.zeros((N,)*3)
array([[[ 0.,  0.],
        [ 0.,  0.]],

       [[ 0.,  0.],
        [ 0.,  0.]]])
</snippet></ROW><ROW><id>15393724</id><snippet>MyClass.special_items</snippet></ROW><ROW><id>15393724</id><snippet>special_items.</snippet></ROW><ROW><id>15393724</id><snippet>classmethod</snippet></ROW><ROW><id>15393724</id><snippet>self</snippet></ROW><ROW><id>15393724</id><snippet>@classmethod
def preload_items(cls):
        cls.special_items['id'] = "properties"
</snippet></ROW><ROW><id>15393724</id><snippet>self.special_items</snippet></ROW><ROW><id>15393771</id><snippet>from django import forms

class CountryForm(forms.Form):
        OPTIONS = (
                ("AUT", "Australia"),
                ("DEU", "Germany"),
                ("NLD", "Neitherlands"),
                )
        Countries = forms.MultipleChoiceField(widget=forms.CheckboxSelectMultiple,
                                             choices=OPTIONS)
</snippet></ROW><ROW><id>15393771</id><snippet>def countries_view(request):
    if request.method == 'POST':
        form = CountryForm(request.POST)
        if form.is_valid():
            countries = form.cleaned_data.get('countries')
            # do something with your results
    else:
        form = CountryForm

    return render_to_response('render_country.html', {'form':form },
        context_instance=RequestContext(request))
</snippet></ROW><ROW><id>15393771</id><snippet>&lt;form method='post'&gt;
    {{ form.as_p }}
    &lt;input type='submit' value='submit'&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>15393855</id><snippet>self.pathgen(dict(test))
</snippet></ROW><ROW><id>15393855</id><snippet>def pathgen(self, test):
    test = dict(test)
    ...
</snippet></ROW><ROW><id>15393969</id><snippet>classmethod</snippet></ROW><ROW><id>15393969</id><snippet>FormSet.get_default_prefix()</snippet></ROW><ROW><id>15394138</id><snippet>a1 is a2</snippet></ROW><ROW><id>15394138</id><snippet>stringobject.c</snippet></ROW><ROW><id>15394138</id><snippet>unicodeobject.c</snippet></ROW><ROW><id>15394138</id><snippet>unicode</snippet></ROW><ROW><id>15394138</id><snippet>str</snippet></ROW><ROW><id>15394138</id><snippet>unicode</snippet></ROW><ROW><id>15394138</id><snippet>intern</snippet></ROW><ROW><id>15394138</id><snippet>unicode</snippet></ROW><ROW><id>15394138</id><snippet>str</snippet></ROW><ROW><id>15394138</id><snippet>a1 is a2</snippet></ROW><ROW><id>15394175</id><snippet>top.io</snippet></ROW><ROW><id>15394175</id><snippet>sys.path</snippet></ROW><ROW><id>15394175</id><snippet>io.py</snippet></ROW><ROW><id>15394175</id><snippet>top</snippet></ROW><ROW><id>15394282</id><snippet>None</snippet></ROW><ROW><id>15394282</id><snippet>"hi "</snippet></ROW><ROW><id>15394282</id><snippet>print("hi", test)
</snippet></ROW><ROW><id>15394282</id><snippet>print("hi " + (test or ''))
</snippet></ROW><ROW><id>15394282</id><snippet>test</snippet></ROW><ROW><id>15394282</id><snippet>if test is not None:
    print("hi", test)
</snippet></ROW><ROW><id>15394493</id><snippet>web.ctx.env</snippet></ROW><ROW><id>15394493</id><snippet>CONTENT_TYPE</snippet></ROW><ROW><id>15394493</id><snippet>ct = web.ctx.env.get('CONTENT_TYPE')
</snippet></ROW><ROW><id>15394873</id><snippet>sudo apt-get install python-vtk
</snippet></ROW><ROW><id>15395033</id><snippet>pb.property_list()</snippet></ROW><ROW><id>15395033</id><snippet> properties = pb.property_list()
 properties[:] = [e for e in properties if e.name() != '__scatter__']
</snippet></ROW><ROW><id>15395147</id><snippet>unzip</snippet></ROW><ROW><id>15395147</id><snippet>split</snippet></ROW><ROW><id>15395148</id><snippet>&gt;&gt;&gt; np.any((0 &lt; x) &amp; (x &lt; 1))
True
</snippet></ROW><ROW><id>15395148</id><snippet>x.any()</snippet></ROW><ROW><id>15395148</id><snippet>np.any(x)</snippet></ROW><ROW><id>15395148</id><snippet>True</snippet></ROW><ROW><id>15395148</id><snippet>x</snippet></ROW><ROW><id>15395148</id><snippet>0 &lt; True &lt; 1</snippet></ROW><ROW><id>15395148</id><snippet>0 &lt; True</snippet></ROW><ROW><id>15395148</id><snippet>True &lt; 1</snippet></ROW><ROW><id>15395148</id><snippet>True == 1</snippet></ROW><ROW><id>15395148</id><snippet>&gt;&gt;&gt; 0 &lt; x
array([[ True, False, False],
       [False,  True,  True],
       [False, False,  True]], dtype=bool)
&gt;&gt;&gt; x &lt; 1
array([[False,  True,  True],
       [ True, False,  True],
       [ True,  True, False]], dtype=bool)
&gt;&gt;&gt; (0 &lt; x) &amp; (x &lt; 1)
array([[False, False, False],
       [False, False,  True],
       [False, False, False]], dtype=bool)
</snippet></ROW><ROW><id>15395148</id><snippet>&amp;</snippet></ROW><ROW><id>15395386</id><snippet>min(lst,key=lambda x: abs(float(x[0]) - 2))
</snippet></ROW><ROW><id>15395386</id><snippet>min</snippet></ROW><ROW><id>15395386</id><snippet>key</snippet></ROW><ROW><id>15395386</id><snippet>&gt;&gt;&gt; lst = [('1.74', '253.2'), ('2.85', '13.46'), ('2.43', '15.63')]
&gt;&gt;&gt; min(lst,key=lambda x: abs(float(x[0]) - 2))
('1.74', '253.2')
</snippet></ROW><ROW><id>15395532</id><snippet>(?&lt;=[^\w\s])(?=\w)|(?&lt;=\w)(?=[^\w\s])
</snippet></ROW><ROW><id>15395532</id><snippet/></ROW><ROW><id>15395532</id><snippet>re.sub(r'(?&lt;=[^\w\s])(?=\w)|(?&lt;=\w)(?=[^\w\s])', ' ', str)
</snippet></ROW><ROW><id>15395535</id><snippet>In [13]: UserList = tuple((n, a, w) if a &gt;= 18 else ('', None, None) for (n, a, w) in UserList)

In [14]: UserList
Out[14]: (('', None, None), ('Mike', 19, 178), ('Pull', 24, 200), ('', None, None))
</snippet></ROW><ROW><id>15395566</id><snippet>delete_memo = []
for i in xrange(len(names)):
    if CONDITION_FOR_DELETION:
        delete_memo.append(i)
delete_memo.reverse()
for i in delete_memo:
    del names[i]
    del data1[i]
    del data2[i]
</snippet></ROW><ROW><id>15395653</id><snippet>class RecordForm(forms.Form):
    name = forms.CharField(max_length=255)
    domain = forms.TypedChoiceField(choices=[])
    type = forms.TypedChoiceField(choices=...)
    content = forms.CharField()
    ttl = forms.CharField()
    comment = forms.CharField()

    def __init__(self, *args, **kwargs):
        super(RecordForm, self).__init__(*args, **kwargs)
        self.fields['type'].choices = [(c.id, c.name) for c in Domain.objects.all()]
</snippet></ROW><ROW><id>15396208</id><snippet>import foo</snippet></ROW><ROW><id>15396208</id><snippet>sys.modules['foo']</snippet></ROW><ROW><id>15396208</id><snippet>module1</snippet></ROW><ROW><id>15396208</id><snippet>import</snippet></ROW><ROW><id>15396208</id><snippet>module1</snippet></ROW><ROW><id>15396208</id><snippet>import sys
import unittest 
import my_fake_module
sys.modules['module_i_want_to_fake'] = my_fake_module
import module1
//test code here
module1.some_method()
//test code here
</snippet></ROW><ROW><id>15396208</id><snippet>import module_i_want_to_fake
print(module_i_want_to_fake)
</snippet></ROW><ROW><id>15396208</id><snippet>&lt;module 'my_fake_module' from 'my_fake_module.pyc'&gt;
</snippet></ROW><ROW><id>15396208</id><snippet>module1</snippet></ROW><ROW><id>15396208</id><snippet>types.ModuleType</snippet></ROW><ROW><id>15396208</id><snippet>my_fake_module</snippet></ROW><ROW><id>15396208</id><snippet>'module_i_want_to_fake'</snippet></ROW><ROW><id>15396208</id><snippet>importlib</snippet></ROW><ROW><id>15396270</id><snippet>text:u'First name ': u'John',</snippet></ROW><ROW><id>15396270</id><snippet>dict</snippet></ROW><ROW><id>15396270</id><snippet>text:</snippet></ROW><ROW><id>15396270</id><snippet>text:u'First Name'</snippet></ROW><ROW><id>15396270</id><snippet>xlrd cell</snippet></ROW><ROW><id>15396270</id><snippet>cell.value</snippet></ROW><ROW><id>15396270</id><snippet>new_keys = [k.value for k in addresslist[0]]</snippet></ROW><ROW><id>15396350</id><snippet>print "|" + collection['URL'] + "|" + collection['title'] + "|" + collection['name']+"|" + collection['date'] + "|" 
</snippet></ROW><ROW><id>15396350</id><snippet>print "|".join([a[x] for x in ('URL', 'title', 'name', 'date')])
</snippet></ROW><ROW><id>15396350</id><snippet>In : a
Out: {'URL': 'example.com', 'date': '2013-03-13', 'name': 'Mel', 'title': 'Foo!'}

In : [a[x] for x in ('URL', 'title', 'name', 'date')]
Out: ['example.com', 'Foo!', 'Mel', '2013-03-13']

In : "|".join([a[x] for x in ('URL', 'title', 'name', 'date')])
Out: 'example.com|Foo!|Mel|2013-03-13'
</snippet></ROW><ROW><id>15396350</id><snippet>re.findall</snippet></ROW><ROW><id>15396350</id><snippet>re.search(...)</snippet></ROW><ROW><id>15396350</id><snippet>result.group()</snippet></ROW><ROW><id>15396350</id><snippet>re.finditer</snippet></ROW><ROW><id>15396350</id><snippet>re.findall</snippet></ROW><ROW><id>15396421</id><snippet>open()</snippet></ROW><ROW><id>15396421</id><snippet>newline</snippet></ROW><ROW><id>15396421</id><snippet>None</snippet></ROW><ROW><id>15396421</id><snippet>'\n'</snippet></ROW><ROW><id>15396421</id><snippet>os.linesep</snippet></ROW><ROW><id>15396421</id><snippet>''</snippet></ROW><ROW><id>15396421</id><snippet>'\n'</snippet></ROW><ROW><id>15396421</id><snippet>'\n'</snippet></ROW><ROW><id>15396421</id><snippet>with open(outputfilename, 'w') as outputfile:
    outputfile.write('\n'.join(output))
</snippet></ROW><ROW><id>15396421</id><snippet>\r\n</snippet></ROW><ROW><id>15396421</id><snippet>\n</snippet></ROW><ROW><id>15396421</id><snippet>\n</snippet></ROW><ROW><id>15396421</id><snippet>newline=''</snippet></ROW><ROW><id>15396421</id><snippet>with open(outputfilename, 'w', newline='') as outputfile:
    outputfile.write('\n'.join(output))
</snippet></ROW><ROW><id>15396421</id><snippet>'\x0a'</snippet></ROW><ROW><id>15396421</id><snippet>\n</snippet></ROW><ROW><id>15396421</id><snippet>\r</snippet></ROW><ROW><id>15396421</id><snippet>\x0d</snippet></ROW><ROW><id>15396421</id><snippet>&gt;&gt;&gt; '\x0a'
'\n'
&gt;&gt;&gt; '\x0d'
'\r'
</snippet></ROW><ROW><id>15396445</id><snippet>multiprocessing.Manager</snippet></ROW><ROW><id>15396445</id><snippet>import multiprocessing

manager = multiprocessing.Manager()
a_shared_big_dictionary = manager.dict(a_big_dictionary)

po = multiprocessing.Pool()
for elements in a_list:
    results.append(po.apply_async(my_module.my_function, (some_arguments, elements, a_shared_big_dictionary)))               
po.close()
po.join()
for r in results:
    a_new_list.add(r.get())
</snippet></ROW><ROW><id>15396511</id><snippet>statement</snippet></ROW><ROW><id>15396511</id><snippet>soup.find ( 'table' , { 'class' : "financialStatement" })</snippet></ROW><ROW><id>15396511</id><snippet>if statement:
   rows = statement.findAll ( 'tr' )
else:
   rows = None
</snippet></ROW><ROW><id>15396685</id><snippet>return</snippet></ROW><ROW><id>15396685</id><snippet>setTime()</snippet></ROW><ROW><id>15396685</id><snippet>time, hour12, hour, mins, sec = setTime()
</snippet></ROW><ROW><id>15396685</id><snippet>setTime()</snippet></ROW><ROW><id>15396685</id><snippet>foo, bar, baz, spam, eggs = setTime()
</snippet></ROW><ROW><id>15396685</id><snippet>print(baz, ":", spam, ":", eggs)
</snippet></ROW><ROW><id>15396945</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "abc('abt')"
&gt;&gt;&gt; regex = re.compile("\('(.*)'\)")
&gt;&gt;&gt; m = re.search(regex, s)
&gt;&gt;&gt; m.group(1)
'abt'
</snippet></ROW><ROW><id>15397078</id><snippet>spec</snippet></ROW><ROW><id>15397276</id><snippet>main</snippet></ROW><ROW><id>15397276</id><snippet>a</snippet></ROW><ROW><id>15397276</id><snippet>def main():
    global a
    a = 1
    # ...
</snippet></ROW><ROW><id>15397276</id><snippet>foo.a</snippet></ROW><ROW><id>15397276</id><snippet>bar.Bar</snippet></ROW><ROW><id>15397276</id><snippet>bar.a</snippet></ROW><ROW><id>15397276</id><snippet>import foo</snippet></ROW><ROW><id>15397276</id><snippet>foo.a</snippet></ROW><ROW><id>15397276</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>15397276</id><snippet>foo</snippet></ROW><ROW><id>15397276</id><snippet>sys.modules['foo'].a</snippet></ROW><ROW><id>15397276</id><snippet>a</snippet></ROW><ROW><id>15397276</id><snippet>bar</snippet></ROW><ROW><id>15397276</id><snippet>foo</snippet></ROW><ROW><id>15397276</id><snippet>a</snippet></ROW><ROW><id>15397276</id><snippet>incr</snippet></ROW><ROW><id>15397276</id><snippet>a</snippet></ROW><ROW><id>15397276</id><snippet>dict</snippet></ROW><ROW><id>15397276</id><snippet>dict</snippet></ROW><ROW><id>15397276</id><snippet>dict</snippet></ROW><ROW><id>15397276</id><snippet>def main():
    configs = {}
    configs['gravity'] = 1.0
    rock = rps.Rock(configs)
    rock.do_stuff()
    configs['gravity'] = 2.1
    rock.do_stuff()
if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15397276</id><snippet>class Rock(object):
    def __init__(self, configs):
        self.configs = configs
    def do_stuff(self):
        print('Falling with gravity {}.'.format(self.configs['gravity']))
</snippet></ROW><ROW><id>15397276</id><snippet>Falling with gravity 1.0.
Falling with gravity 2.1.
</snippet></ROW><ROW><id>15397276</id><snippet>configs['gravity']</snippet></ROW><ROW><id>15397276</id><snippet>configs</snippet></ROW><ROW><id>15397276</id><snippet>dict</snippet></ROW><ROW><id>15397276</id><snippet>id(self.configs)</snippet></ROW><ROW><id>15397276</id><snippet>id(self.configs['gravity'])</snippet></ROW><ROW><id>15397345</id><snippet>import numpy as np
a = np.random.randint(0, 100, (100,128,256))
np.sum(a &gt; 10, axis=0)
</snippet></ROW><ROW><id>15397350</id><snippet>git+file</snippet></ROW><ROW><id>15397350</id><snippet>pip install -I distribute</snippet></ROW><ROW><id>15397350</id><snippet> install_requires = ['core'],
 dependency_links = ['git+file:///srv/git/core.git/#egg=core'],
</snippet></ROW><ROW><id>15397409</id><snippet>cursor.execute("SELECT user_id FROM round WHERE state = -1 OR state = 2")
numrows = cursor.rowcount
</snippet></ROW><ROW><id>15397409</id><snippet>for x in xrange(0,numrows):
  row = cursor.fetchone()
  print row[0], "--&gt;", row[1]
</snippet></ROW><ROW><id>15397487</id><snippet>python manage.py collectstatic -l</snippet></ROW><ROW><id>15397648</id><snippet>.index()</snippet></ROW><ROW><id>15397648</id><snippet>element == searchterm</snippet></ROW><ROW><id>15397648</id><snippet>.index()</snippet></ROW><ROW><id>15397697</id><snippet>.format()</snippet></ROW><ROW><id>15397697</id><snippet>self.response.out.write("""
     &lt;img src="/images/resistor.png" width = "150"&gt;
     &lt;table border = "1"&gt;
       &lt;tr height="150" &gt;
         &lt;td bgcolor="{}" width="35"&gt;  &lt;/td&gt; 
         &lt;td bgcolor="{}" width="35"&gt;  &lt;/td&gt; 
         &lt;td bgcolor="{}" width="35"&gt;  &lt;/td&gt; 
         &lt;td bgcolor="{}" width="35"&gt;  &lt;/td&gt;
       &lt;/tr&gt;
     &lt;/table&gt;
     &lt;form action="/sign" method="post"&gt;
       &lt;div&gt;&lt;textarea name="content" rows="3" cols="60"&gt;&lt;/textarea&gt;&lt;/div&gt;
       &lt;div&gt;&lt;input type="submit" value="Sign Guestbook"&gt;&lt;/div&gt;
     &lt;/form&gt; """.format( ('Red','Blue','Black','Green') ))
self.response.out.write('&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;')
</snippet></ROW><ROW><id>15397849</id><snippet>Dimension1</snippet></ROW><ROW><id>15397849</id><snippet>Dimension2</snippet></ROW><ROW><id>15397849</id><snippet>Fact</snippet></ROW><ROW><id>15397849</id><snippet>class Fact(Base):
    ...
    dim1 = relationship('Dimension1', uselist=False)
    dim2 = relationship('Dimension2', uselist=False)


    #Constructor
</snippet></ROW><ROW><id>15397849</id><snippet>fact.dim1.specific1</snippet></ROW><ROW><id>15397849</id><snippet>fact = Fact(...)
fact.dim1 = Dimension1(...)
fact.dim2 = Dimension2(...)
session.add(fact)
</snippet></ROW><ROW><id>15397849</id><snippet>session.commit</snippet></ROW><ROW><id>15397996</id><snippet>def name_gen():
    with open('C:/python/namessample.txt') as nameFile:
        for name in nameFile.read().split(','):
            yield name.strip('"')
</snippet></ROW><ROW><id>15397996</id><snippet>def name_gen():
    with open('C:/python/namessample.txt') as nameFile:
        return [name.strip('"') for name in nameFile.read().split(',')]
</snippet></ROW><ROW><id>15397996</id><snippet>def name_gen():
    with open('C:/python/namessample.txt') as nameFile:
        for line in nameFile:
            for name in line.rstrip('\n').split(','):
                yield name.strip('"')
</snippet></ROW><ROW><id>15398106</id><snippet>from django.db.models import Q

queryset = Evento.objects.filter(Q(mod__isnull=True, aprobado=True) | Q(mod__isnull=False, mod__activo=False))
</snippet></ROW><ROW><id>15398401</id><snippet>py2app</snippet></ROW><ROW><id>15398401</id><snippet>py2app</snippet></ROW><ROW><id>15398401</id><snippet>libpython.dylib</snippet></ROW><ROW><id>15398401</id><snippet>Python.framework</snippet></ROW><ROW><id>15398401</id><snippet>sys.executable</snippet></ROW><ROW><id>15398401</id><snippet>py2app</snippet></ROW><ROW><id>15398401</id><snippet>cx_freeze</snippet></ROW><ROW><id>15398401</id><snippet>ssh</snippet></ROW><ROW><id>15398401</id><snippet>py2app</snippet></ROW><ROW><id>15398401</id><snippet>zip</snippet></ROW><ROW><id>15398401</id><snippet>scp</snippet></ROW><ROW><id>15398401</id><snippet>ftp</snippet></ROW><ROW><id>15398401</id><snippet>py2app</snippet></ROW><ROW><id>15398401</id><snippet>foo.py</snippet></ROW><ROW><id>15398401</id><snippet>foo.app/Contents/Resources/foo.py</snippet></ROW><ROW><id>15398401</id><snippet>foo.app/Contents/Resources/lib</snippet></ROW><ROW><id>15398401</id><snippet>foo.app/Contents/Resources/lib/python2.7/lib-dynload</snippet></ROW><ROW><id>15398401</id><snippet>easy_install</snippet></ROW><ROW><id>15398401</id><snippet>py2app</snippet></ROW><ROW><id>15398401</id><snippet>py2app</snippet></ROW><ROW><id>15398410</id><snippet>.astimezone()</snippet></ROW><ROW><id>15398410</id><snippet>.normalize()</snippet></ROW><ROW><id>15398410</id><snippet>from pytz import timezone
end_date = ...tz-aware datetime...
us_tz = timezone('America/Chicago')

localized_end_date = us_tz.normalize(end_date.astimezone(us_tz))
</snippet></ROW><ROW><id>15398410</id><snippet>.astimezone</snippet></ROW><ROW><id>15398410</id><snippet>.localize()</snippet></ROW><ROW><id>15398410</id><snippet>tzinfo</snippet></ROW><ROW><id>15398410</id><snippet>end_date = ...naive datetime...
localized_end_date = timezone('America/Chicago').localize(end_date, is_dst=None)
</snippet></ROW><ROW><id>15398447</id><snippet>(-b+math.sqrt(b**2-4*a*c))/2*a
</snippet></ROW><ROW><id>15398447</id><snippet>x/2*a</snippet></ROW><ROW><id>15398447</id><snippet>(x/2)*a</snippet></ROW><ROW><id>15398447</id><snippet>(-b + math.sqrt(b**2 - 4*a*c)) / (2 * a)
</snippet></ROW><ROW><id>15398447</id><snippet>d</snippet></ROW><ROW><id>15398447</id><snippet>x = (-b + math.sqrt(d)) / (2 * a)
</snippet></ROW><ROW><id>15398634</id><snippet>from collections import Counter
Counter("11234458881")
</snippet></ROW><ROW><id>15398634</id><snippet>Counter({'1': 3, '8': 3, '4': 2, '3': 1, '2': 1, '5': 1})
</snippet></ROW><ROW><id>15398671</id><snippet>values</snippet></ROW><ROW><id>15398671</id><snippet>dictionary.values()</snippet></ROW><ROW><id>15398671</id><snippet>dictionary.values</snippet></ROW><ROW><id>15398898</id><snippet>a = input() test sentence</snippet></ROW><ROW><id>15398898</id><snippet>#</snippet></ROW><ROW><id>15398898</id><snippet>raw_input</snippet></ROW><ROW><id>15398898</id><snippet>input</snippet></ROW><ROW><id>15398898</id><snippet>input</snippet></ROW><ROW><id>15398898</id><snippet>raw_input</snippet></ROW><ROW><id>15398898</id><snippet>raw_input</snippet></ROW><ROW><id>15398898</id><snippet>str</snippet></ROW><ROW><id>15398898</id><snippet>input</snippet></ROW><ROW><id>15398898</id><snippet>raw_input</snippet></ROW><ROW><id>15398898</id><snippet>input</snippet></ROW><ROW><id>15398993</id><snippet>&gt;&gt;&gt; [[tuple(map(int, pair)) + (2,) for pair in pairs] for pairs in l]
[[(100, 200, 2), (300, 400, 2), (500, 600, 2)], [(100, 200, 2)], [(100, 200, 2)]]
</snippet></ROW><ROW><id>15398993</id><snippet>&gt;&gt;&gt; [[(int(a), int(b), 2) for a, b in pairs] for pairs in l]
[[(100, 200, 2), (300, 400, 2), (500, 600, 2)], [(100, 200, 2)], [(100, 200, 2)]]
</snippet></ROW><ROW><id>15398993</id><snippet>(addr_from, addr_to, 2)</snippet></ROW><ROW><id>15398993</id><snippet>def processPair(a, b):
    if a.isdigit():
        a = int(a)
    elif a.isalnum():
        a = re.sub(r'((?:[A-Z].*?)?(?:\d.*?)?[A-Z]+)(\d+)', r'\1%\2', a)
    if b.isdigit():
        b = int(b) + 2
    elif b.isalnum():
        b = re.sub(r'((?:[A-Z].*?)?(?:\d.*?)?[A-Z]+)(\d+)', r'\1%\2', b)
    return (a, b, 2)
</snippet></ROW><ROW><id>15398993</id><snippet>(a, b)</snippet></ROW><ROW><id>15398993</id><snippet>a.isdigit() is True</snippet></ROW><ROW><id>15398993</id><snippet>a.isdigit()</snippet></ROW><ROW><id>15398993</id><snippet>a.isdigit() == False</snippet></ROW><ROW><id>15398993</id><snippet>not a.isdigit()</snippet></ROW><ROW><id>15398993</id><snippet>a.isdigit()</snippet></ROW><ROW><id>15398993</id><snippet>if</snippet></ROW><ROW><id>15398993</id><snippet>elif</snippet></ROW><ROW><id>15398993</id><snippet>l</snippet></ROW><ROW><id>15398993</id><snippet>&gt;&gt;&gt; [[processPair(*pair) for pair in pairs] for pairs in l]
[[(100, 202, 2), (300, 402, 2), (500, 602, 2)], [(100, 202, 2)], [(100, 202, 2)]]
</snippet></ROW><ROW><id>15399001</id><snippet>from itertools import chain, count

s1 = "this is is a foo"
s2 = "this is a a bar"
s3 = "that 's a foobar"

# convert each sentence into a list of words, because the lists
# will be used twice, to build the dictionary and to vectorize
w1, w2, w3 = all_ws = [s.split() for s in [s1, s2, s3]]

# chain the lists and turn into a set, and then a list, of unique words
index_to_word = list(set(chain(*all_ws)))

# build the inverse mapping of index_to_word, by pairing it with a counter
word_to_index = dict(zip(index_to_word, count()))

# create the vectors of word indices and of word count for each sentence
v1 = [(word_to_index[word], w1.count(word)) for word in w1]
v2 = [(word_to_index[word], w2.count(word)) for word in w2]
v3 = [(word_to_index[word], w3.count(word)) for word in w3]

print v1
print v2
print v3
</snippet></ROW><ROW><id>15399010</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; get1 = itemgetter(1)
&gt;&gt;&gt; get1([0,1,2,3,4,5])
1
&gt;&gt;&gt; get1('abcdefg')
'b'
</snippet></ROW><ROW><id>15399044</id><snippet>is</snippet></ROW><ROW><id>15399044</id><snippet>id</snippet></ROW><ROW><id>15399044</id><snippet>long</snippet></ROW><ROW><id>15399044</id><snippet>ceval.c</snippet></ROW><ROW><id>15399044</id><snippet>case PyCmp_IS:
    res = (v == w);
    break;
case PyCmp_IS_NOT:
    res = (v != w);
    break;
</snippet></ROW><ROW><id>15399044</id><snippet>v</snippet></ROW><ROW><id>15399044</id><snippet>w</snippet></ROW><ROW><id>15399044</id><snippet>PyObject *</snippet></ROW><ROW><id>15399044</id><snippet>bltinmodule.c</snippet></ROW><ROW><id>15399044</id><snippet>static PyObject *
builtin_id(PyObject *self, PyObject *v)
{
    return PyLong_FromVoidPtr(v);
}

PyDoc_STRVAR(id_doc,
"id(object) -&gt; integer\n\
\n\
Return the identity of an object. This is guaranteed to be unique among\n\
simultaneously existing objects. (Hint: it's the object's memory address.)");
</snippet></ROW><ROW><id>15399518</id><snippet>def truncator(array):
  new_shape = [d-1 for d in array.shape]
  return np.resize(array, new_shape)
</snippet></ROW><ROW><id>15399518</id><snippet>:-1</snippet></ROW><ROW><id>15399518</id><snippet>a[:-1,:-1:,-1]</snippet></ROW><ROW><id>15399518</id><snippet>def another_truncator(array):
  slicers = [slice(-1) for d in array.shape]
  return array[slicers]


&gt;&gt;&gt; a
array([[0, 1, 2],
       [1, 2, 3],
       [2, 3, 4]])
&gt;&gt;&gt; another_truncator(a)
array([[0, 1],
       [1, 2]])
</snippet></ROW><ROW><id>15399518</id><snippet>col[start:end:step]</snippet></ROW><ROW><id>15399518</id><snippet>[::]</snippet></ROW><ROW><id>15399518</id><snippet>col[start:end:step]</snippet></ROW><ROW><id>15399518</id><snippet>slice</snippet></ROW><ROW><id>15399518</id><snippet>slice(start, end, step)</snippet></ROW><ROW><id>15399518</id><snippet>[:-1]</snippet></ROW><ROW><id>15399518</id><snippet>slice(-1)</snippet></ROW><ROW><id>15399518</id><snippet>def another_truncator(array):
  slicers = [slice(-1) for d in array.shape] #create n slicers
  return array[slicers] #slice and return
</snippet></ROW><ROW><id>15399564</id><snippet>colors.Colormap</snippet></ROW><ROW><id>15399564</id><snippet>class split_cmap(colors.Colormap):
    def __init__(self, cmap_a, cmap_b, split=.5):
        '''Makes a split color map cmap_a is the low range, 
           cmap_b is the high range
           split is where to break the range
        '''
        self.cmap_a, self.cmap_b = cmap_a, cmap_b
        self.split = split

    def __call__(self, v):
        if v &lt; self.split:
            return self.cmap_a(v) 
            # or you might want to use v / self.split
        else:
            return self.cmap_b(v) 
            # or you might want to use (v - self.split) / (1 - self.split)

    def set_bad(self,*args, **kwargs):
        self.cmap_a.set_bad(*args, **kwargs)
        self.cmap_b.set_bad(*args, **kwargs)

    def set_over(self, *args, **kwargs):
        self.cmap_a.set_over(*args, **kwargs) # not really needed
        self.cmap_b.set_over(*args, **kwargs)

    def set_under(self, *args, **kwargs):
        self.cmap_a.set_under(*args, **kwargs)
        self.cmap_b.set_under(*args, **kwargs) # not really needed

    def is_gray(self):
        return False
</snippet></ROW><ROW><id>15399564</id><snippet>colors.Colormap</snippet></ROW><ROW><id>15399564</id><snippet>Normalize</snippet></ROW><ROW><id>15399564</id><snippet>[0, 1]</snippet></ROW><ROW><id>15399564</id><snippet>norm</snippet></ROW><ROW><id>15399564</id><snippet>.5</snippet></ROW><ROW><id>15399707</id><snippet>write()</snippet></ROW><ROW><id>15399707</id><snippet>flush()</snippet></ROW><ROW><id>15399707</id><snippet>readline()</snippet></ROW><ROW><id>15399707</id><snippet>import subprocess

p = subprocess.Popen(['python', 'p2.py'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
p.stdin.write("Hello\n")
p.stdin.flush()
print 'got', p.stdout.readline().strip()
p.stdin.write("How are you?\n")
p.stdin.flush()
print 'got', p.stdout.readline().strip()
</snippet></ROW><ROW><id>15399707</id><snippet>import sys

data = sys.stdin.readline()
sys.stdout.write("Hm.\n")
sys.stdout.flush()
data = sys.stdin.readline()
sys.stdout.write("Whatever.\n")
sys.stdout.flush()
</snippet></ROW><ROW><id>15399780</id><snippet>global paymentFound
paymentFound = False

while paymentFound == False:
    testMid = findMid(newMin, newMax)
    ...
</snippet></ROW><ROW><id>15400023</id><snippet>Both methods have the exact same effect.</snippet></ROW><ROW><id>15400023</id><snippet>app.debug</snippet></ROW><ROW><id>15400023</id><snippet>app.debug</snippet></ROW><ROW><id>15400023</id><snippet>config-$ENV.py</snippet></ROW><ROW><id>15400023</id><snippet>DEBUG = True
# ... other settings (e.g., log location, project root, etc)
</snippet></ROW><ROW><id>15400023</id><snippet>DEBUG = False
# ... other settings (e.g., log location, project root, etc)
</snippet></ROW><ROW><id>15400023</id><snippet>EMPTY FILE
</snippet></ROW><ROW><id>15400023</id><snippet>from flask import Flask

def create_app(env='dev'):
    app = Flask(__name__)
    app.config.from_object('app.conf.config-%s' % env)

    if app.debug:
        print 'running in debug mode'
    else:
        print 'NOT running in debug mode'
    return app
</snippet></ROW><ROW><id>15400023</id><snippet>from app import create_app
import os

port = int(os.environ.get('PORT', 5000))
app = create_app(env='dev') #Or pass 'live' to NOT be in debug mode
app.run(host='0.0.0.0', port=port)
</snippet></ROW><ROW><id>15400226</id><snippet>defaultdict</snippet></ROW><ROW><id>15400226</id><snippet>import csv

from collections import defaultdict

with open(filename, 'r') as handle:
    reader = csv.DictReader(handle, ['name', 'miles', 'country'])
    data = defaultdict(list)

    for line in reader:
        data[line['name']).append(int(line['miles']))

    for runner, distances in data.items():
        print '{} ran a total of {} miles and an average of {} miles'.format(
            runner, sum(distances), sum(distances) / float(len(distances))
        )
</snippet></ROW><ROW><id>15400403</id><snippet>last_message = Message.get(lastkey)</snippet></ROW><ROW><id>15400403</id><snippet>last_message = Message.get_by_key_name(lastkey)</snippet></ROW><ROW><id>15400403</id><snippet>last_message = Message.get_by_id(int(lastkey))</snippet></ROW><ROW><id>15400403</id><snippet>messages_since_last_message = Message.all().filter('date &gt;', last_message.date).order('date')
#OR GQL:
messages_since_last_message = Message.gql("WHERE date &gt; :1 ORDER BY date ASC", last_message.date)
</snippet></ROW><ROW><id>15400403</id><snippet>&gt;=</snippet></ROW><ROW><id>15400456</id><snippet>def main():
    fileName= raw_input('Please enter the file name: ')

    validate_file(fileName)
    new_lines = convert_file(fileName)
    for line in new_lines:
        print line

def validate_file(fileName):
    try:
        inputFile= open(fileName, 'r')
        inputFile.close()
    except IOError:
        print('File not found.')

def strip_punctuation(line):
    punctuation = ''
    line = line.strip()
    if len(line)&gt;0:
        if line[-1] in ('.','!','?'):
            punctuation = line[-1]
            line = line[:-1]
    return line, punctuation

def convert_file(fileName):
    inputFile= open(fileName, 'r')
    converted_lines = []
    for line in inputFile:
        line, punctuation = strip_punctuation(line)
        line = line.split()
        new_words = []
        for word in line:
            endString= str(word[1:])
            them=endString, str(word[0:1]), 'ay'
            new_word="".join(them)
            new_words.append(new_word)
        new_sentence = ' '.join(new_words)
        new_sentence = new_sentence.lower()
        if len(new_sentence):
            new_sentence = new_sentence[0].upper() + new_sentence[1:]
        converted_lines.append(new_sentence + punctuation)
    return converted_lines
</snippet></ROW><ROW><id>15400768</id><snippet>.split(',')</snippet></ROW><ROW><id>15401040</id><snippet>import dataFile 
</snippet></ROW><ROW><id>15401040</id><snippet>dataFile = __import__('dataFile')
</snippet></ROW><ROW><id>15401090</id><snippet>'_id'</snippet></ROW><ROW><id>15401090</id><snippet>ObjectId</snippet></ROW><ROW><id>15401090</id><snippet>bson.objectid.ObjectId</snippet></ROW><ROW><id>15401182</id><snippet>&lt;</snippet></ROW><ROW><id>15401182</id><snippet>&gt;&gt;&gt; 0 &lt; 1 &lt; 2
True
</snippet></ROW><ROW><id>15401182</id><snippet>(0&lt;1) and (1&lt;2)</snippet></ROW><ROW><id>15401182</id><snippet>c == c in s</snippet></ROW><ROW><id>15401182</id><snippet>(c == c) and (c in s)</snippet></ROW><ROW><id>15401182</id><snippet>True</snippet></ROW><ROW><id>15401182</id><snippet>&gt;&gt;&gt; def foo(x):
...     print "Called foo(%d)" % x
...     return x
...
&gt;&gt;&gt; print 0 &lt; foo(1) &lt; 2
Called foo(1)
True
</snippet></ROW><ROW><id>15401240</id><snippet>apple_cost_in_dollars</snippet></ROW><ROW><id>15401240</id><snippet>In [9]: cost = '1'

In [10]: cost * 10
Out[10]: '1111111111'

In [11]: cost = int('1')

In [12]: cost * 10
Out[12]: 10
</snippet></ROW><ROW><id>15401359</id><snippet>interGrpSock.bind((host, port))     
interGrpSock.listen(1)          /* Instead of s.listen(1) here */
</snippet></ROW><ROW><id>15401455</id><snippet>print (lambda b: (Y))(num)
</snippet></ROW><ROW><id>15401455</id><snippet>   (lambda a, b: a(a, b))(X,b)
</snippet></ROW><ROW><id>15401455</id><snippet>            (lambda a, b: b*a(a, b-1) if b &gt; 0 else 1
            ,
            b)
</snippet></ROW><ROW><id>15401455</id><snippet>X(X, b)
</snippet></ROW><ROW><id>15401455</id><snippet>b*X(X, b-1) if b &gt; 0 else 1
</snippet></ROW><ROW><id>15401455</id><snippet>num*X(X, b-1) if num &gt; 0 else 1
</snippet></ROW><ROW><id>15401553</id><snippet>Ubuntu 12.10</snippet></ROW><ROW><id>15401553</id><snippet>python --version</snippet></ROW><ROW><id>15401553</id><snippet>python setup ...</snippet></ROW><ROW><id>15401553</id><snippet>dpkg -L python-numpy</snippet></ROW><ROW><id>15401553</id><snippet>$ python2.7 setup.py install
</snippet></ROW><ROW><id>15401640</id><snippet>[AG]..</snippet></ROW><ROW><id>15401640</id><snippet>r'(?x) (?: [AG].. ATG | ATG G.. )  (?:...){7,}? (?:TAA|TAG|TGA)'
</snippet></ROW><ROW><id>15401640</id><snippet>[AG]..</snippet></ROW><ROW><id>15401640</id><snippet>r'(?x) ATG (?: (?&lt;=[AG].. ATG) | (?=G) ) (?:...){8,}? (?:TAA|TAG|TGA)'
</snippet></ROW><ROW><id>15401724</id><snippet>isinstance(l, list)</snippet></ROW><ROW><id>15401724</id><snippet>isinstance(l, collections.Iterable)</snippet></ROW><ROW><id>15401758</id><snippet>def isPrime(n):
    if n == 2: return True
    if n % 2 == 0 or n &lt; 2: return False
    for i in range(3, int(n**0.5)+1, 2):
        if n % i == 0: return False
    return True
if __name__ == "__main__":
    n = count = 1
    while count &lt; 10001:
        n += 2
        if isPrime(n): count += 1
    print n
</snippet></ROW><ROW><id>15402127</id><snippet>sys.stdout.write('\thello world %d.\n' % (i+1))
</snippet></ROW><ROW><id>15402127</id><snippet>%</snippet></ROW><ROW><id>15402127</id><snippet>+</snippet></ROW><ROW><id>15402380</id><snippet>next = 1
modulo = 2**32
def myrand():
    global next
    next = ((next * 1103515245) + 12345) % modulo
    return (next / 65536) % 32768
</snippet></ROW><ROW><id>15402725</id><snippet>import collections

# u is your input list of dictionaries, entries in u will be modified in place

c = collections.Counter(e["zip_zone"] for e in u)
for e in u:
    e["count"] = c[e["zip_zone"]]
</snippet></ROW><ROW><id>15402739</id><snippet>subprocess.call(["bashScript1Name", "bashScript2Name"])
</snippet></ROW><ROW><id>15402818</id><snippet>public String[] java_lib_help_me_out()
{
    return new String[] { "one", "two", "three" };
}
</snippet></ROW><ROW><id>15402889</id><snippet>split()</snippet></ROW><ROW><id>15402889</id><snippet>for token in tokens</snippet></ROW><ROW><id>15402889</id><snippet>token</snippet></ROW><ROW><id>15402889</id><snippet>tokens</snippet></ROW><ROW><id>15402889</id><snippet>token</snippet></ROW><ROW><id>15402889</id><snippet>tokens</snippet></ROW><ROW><id>15402889</id><snippet>import string
import re
def analyzer():
    inputfile=raw_input("Which file?: ")
    review=open(inputfile,'r')
    review=review.read()
    tokens=[e.lower() for e in map(string.strip, re.split("(\W+)", review)) if len(e) &gt; 0 and not re.match("\W",e)]

    print tokens

analyzer()
</snippet></ROW><ROW><id>15402889</id><snippet>[FUNC(x) for x in LIST if COND]</snippet></ROW><ROW><id>15402921</id><snippet>YourToolButton.setMenu(menu)
</snippet></ROW><ROW><id>15402921</id><snippet>YourToolButton.setPopupMode(mode)
</snippet></ROW><ROW><id>15402921</id><snippet>YourMenu.addAction(icon, text, receiver, member[, shortcut=0])
</snippet></ROW><ROW><id>15402948</id><snippet>1</snippet></ROW><ROW><id>15402948</id><snippet>True</snippet></ROW><ROW><id>15402948</id><snippet>while True</snippet></ROW><ROW><id>15402948</id><snippet>wim@wim-zenbook:/usr/lib/python2.7$ grep -rn "while True:"
_abcoll.py:292:            while True:
_abcoll.py:478:            while True:
_abcoll.py:531:            while True:
argparse.py:1807:            while True:
base64.py:287:    while True:
base64.py:302:    while True:
calendar.py:162:        while True:
chunk.py:28:while True:
chunk.py:34:    while True:
codecs.py:458:        while True:
codecs.py:529:        while True:
ConfigParser.py:478:        while True:
decimal.py:2141:            while True:
decimal.py:2331:            while True:
decimal.py:2681:        while True:
decimal.py:2990:            while True:
decimal.py:3124:        while True:
decimal.py:3205:            while True:
decimal.py:5695:            while True:
difflib.py:1466:        while True:
difflib.py:1556:        while True:
difflib.py:1573:        while True:
difflib.py:1580:        while True:
filecmp.py:67:        while True:
fractions.py:245:        while True:
gzip.py:202:            while True:
gzip.py:208:            while True:
gzip.py:248:                while True:
gzip.py:502:        while True:
httplib.py:273:        while True:
httplib.py:406:        while True:
httplib.py:411:            while True:
httplib.py:572:        while True:
httplib.py:610:        while True:
httplib.py:747:        while True:
locale.py:134:            while True:
mailbox.py:217:            while True:
mailbox.py:534:        while True:
mailbox.py:652:                while True:
mailbox.py:814:        while True:
mailbox.py:850:        while True:
mailbox.py:856:                while True:
mailbox.py:1221:        while True:
mailbox.py:1227:        while True:
mailbox.py:1246:        while True:
mailbox.py:1251:        while True:
mailbox.py:1279:        while True:
mailbox.py:1342:            while True:
mailbox.py:1352:                while True:
mailbox.py:1359:                while True:
mailbox.py:1364:            while True:
mailbox.py:1385:            while True:
mailbox.py:1395:            while True:
mimetypes.py:243:            while True:
pdb.py:1312:    while True:
pickletools.py:1841:    while True:
posixpath.py:299:    while True:
pty.py:146:    while True:
pyclbr.py:196:                    while True:
pyclbr.py:284:    while True:
pyclbr.py:308:    while True:
py_compile.py:146:        while True:
pydoc.py:537:        while True:
pydoc.py:1762:        while True:
_pyio.py:559:        while True:
_pyio.py:953:            while True:
_pyio.py:1013:            while True:
_pyio.py:1896:        while True:
sets.py:356:            while True:
shlex.py:123:        while True:
socket.py:349:            while True:
socket.py:372:            while True:
socket.py:427:                while True:
socket.py:445:            while True:
socket.py:474:            while True:
socket.py:514:        while True:
SocketServer.py:153:    while True:
ssl.py:196:            while True:
subprocess.py:476:    while True:
sysconfig.py:406:    while True:
tarfile.py:529:            while True:
tarfile.py:534:            while True:
tarfile.py:566:            while True:
tarfile.py:836:            while True:
tarfile.py:859:        while True:
tarfile.py:902:        while True:
tarfile.py:1168:            while True:
tarfile.py:1384:        while True:
tarfile.py:1579:                while True:
tarfile.py:2317:        while True:
tarfile.py:2379:        while True:
tarfile.py:2508:        while True:
threading.py:255:                while True:
uu.py:105:        while True:
_weakrefset.py:97:        while True:
zipfile.py:579:        while True:
</snippet></ROW><ROW><id>15402948</id><snippet>while 1</snippet></ROW><ROW><id>15402948</id><snippet>bool</snippet></ROW><ROW><id>15402948</id><snippet>wim@wim-zenbook:/usr/lib/python2.7$ grep -rn "while 1:" *.py
aifc.py:309:        while 1:
aifc.py:962:        while 1:
audiodev.py:252:    while 1:
binhex.py:257:    while 1:
binhex.py:265:    while 1:
binhex.py:295:            while 1:
binhex.py:377:        while 1:
binhex.py:481:    while 1:
binhex.py:492:        while 1:
cgi.py:251:        while 1:
cgi.py:683:        while 1:
cgi.py:696:        while 1:
cgi.py:729:        while 1:
code.py:227:        while 1:
compileall.py:141:            while 1:
DocXMLRPCServer.py:41:        while 1:
fpformat.py:141:        while 1:
ftplib.py:199:            while 1:
ftplib.py:407:        while 1:
ftplib.py:431:        while 1:
ftplib.py:462:        while 1:
ftplib.py:484:        while 1:
ftplib.py:691:                while 1:
ftplib.py:709:                while 1:
ftplib.py:731:                while 1:
ftplib.py:747:                while 1:
ftplib.py:904:        while 1:
getpass.py:97:    while 1:
heapq.py:346:    while 1:
heapq.py:348:            while 1:
imaplib.py:864:        while 1:
imaplib.py:987:        while 1:
_LWPCookieJar.py:111:            while 1:
mailbox.py:2021:        while 1:
mailbox.py:2039:        while 1:
mailbox.py:2050:        while 1:
mailbox.py:2109:        while 1:
mailbox.py:2117:        while 1:
mailbox.py:2164:        while 1:
mailbox.py:2172:        while 1:
mailcap.py:63:    while 1:
markupbase.py:269:        while 1:
markupbase.py:323:        while 1:
markupbase.py:345:            while 1:
markupbase.py:358:        while 1:
mhlib.py:305:        while 1:
mhlib.py:616:            while 1:
mhlib.py:915:    while 1:
mhlib.py:920:            while 1:
mimetools.py:240:    while 1:
mimetools.py:247:    while 1:
mimetypes.py:213:        while 1:
mimify.py:86:        while 1:
mimify.py:98:    while 1:
mimify.py:111:    while 1:
mimify.py:135:    while 1:
mimify.py:164:    while 1:
mimify.py:241:    while 1:
mimify.py:266:    while 1:
mimify.py:292:    while 1:
mimify.py:315:    while 1:
mimify.py:390:            while 1:
mimify.py:407:        while 1:
_MozillaCookieJar.py:58:            while 1:
multifile.py:15:while 1:
multifile.py:114:        while 1:
netrc.py:38:        while 1:
netrc.py:58:                while 1:
netrc.py:73:            while 1:
nntplib.py:239:            while 1:
nntplib.py:559:        while 1:
nntplib.py:583:        while 1:
os.py:545:            while 1:
pdb.py:40:    while 1:
pickle.py:856:            while 1:
platform.py:166:    while 1:
platform.py:966:    while 1:
quopri.py:70:    while 1:
quopri.py:128:    while 1:
random.py:394:        while 1:
random.py:464:        while 1:
random.py:517:            while 1:
random.py:540:            while 1:
re.py:310:        while 1:
rfc822.py:148:        while 1:
shlex.py:287:    while 1:
shutil.py:48:    while 1:
site.py:424:        while 1:
smtplib.py:352:        while 1:
smtplib.py:847:    while 1:
sre_parse.py:307:    while 1:
sre_parse.py:325:    while 1:
sre_parse.py:393:    while 1:
sre_parse.py:406:                while 1:
sre_parse.py:425:            while 1:
sre_parse.py:536:                        while 1:
sre_parse.py:549:                        while 1:
sre_parse.py:573:                    while 1:
sre_parse.py:600:                    while 1:
sre_parse.py:640:                while 1:
sre_parse.py:708:    while 1:
sre_parse.py:718:                    while 1:
telnetlib.py:587:        while 1:
telnetlib.py:608:        while 1:
telnetlib.py:616:        while 1:
telnetlib.py:732:        while 1:
tokenize.py:286:    while 1:                                   # loop over lines in stream
urllib.py:266:                while 1:
urlparse.py:282:    while 1:
wave.py:135:        while 1:
weakref.py:153:        while 1:
weakref.py:359:        while 1:
xdrlib.py:214:        while 1:
xmllib.py:187:        while 1:
xmlrpclib.py:1461:        while 1:
zipfile.py:1095:            while 1:
</snippet></ROW><ROW><id>15402968</id><snippet>route_url</snippet></ROW><ROW><id>15402968</id><snippet>static_url</snippet></ROW><ROW><id>15402968</id><snippet>resource_url</snippet></ROW><ROW><id>15402968</id><snippet>from pyramid.events import NewRequest
from pyramid.events import subscriber

@subscriber(NewRequest)
def mysubscriber(event):
    event.request.environ['HTTP_HOST'] = 'example.com'
</snippet></ROW><ROW><id>15402968</id><snippet>route_url</snippet></ROW><ROW><id>15402968</id><snippet>example.com</snippet></ROW><ROW><id>15403046</id><snippet>self.ticketPanel</snippet></ROW><ROW><id>15403082</id><snippet>{% if date.day &lt;= 10 %}
    //show data
{% else %}
    //no data
{% endif %}
</snippet></ROW><ROW><id>15403099</id><snippet>'x'</snippet></ROW><ROW><id>15403099</id><snippet>&gt;&gt;&gt; [e for e in test if e.startswith('x')]
['xzz', 'xaa']
&gt;&gt;&gt; any(e.startswith('x') for e in test)
True
</snippet></ROW><ROW><id>15403339</id><snippet>def sample_view(request, *args, **kwargs):
    from datetime import date
    current_date = date.today()
    current_day = int(current_date.day) # force a cast to an int, just to be explicit
    return render_to_response("template", {'day_of_the_month': current_day })
</snippet></ROW><ROW><id>15403339</id><snippet>{% if day_of_the_month &gt; 10 %}
    &lt;!-- Stuff to show after the 10th --&gt;
{% else %}
    &lt;!-- Stuff to show before the 10th --&gt;
{% endif %}
</snippet></ROW><ROW><id>15403339</id><snippet>current_date</snippet></ROW><ROW><id>15403339</id><snippet>current_date.day</snippet></ROW><ROW><id>15403520</id><snippet>virtualenv myproject
cd myproject
source bin/activate
pip install numpy
</snippet></ROW><ROW><id>15403649</id><snippet>data(index,role)</snippet></ROW><ROW><id>15403649</id><snippet>role</snippet></ROW><ROW><id>15403649</id><snippet>QtCore.Qt.CheckStateRole</snippet></ROW><ROW><id>15403649</id><snippet>QtCore.Qt.Checked</snippet></ROW><ROW><id>15403649</id><snippet>QtCore.Qt.Unchecked</snippet></ROW><ROW><id>15403649</id><snippet>setData</snippet></ROW><ROW><id>15403649</id><snippet>flags</snippet></ROW><ROW><id>15403649</id><snippet>class CheckableDirModel(QtGui.QDirModel):
def __init__(self, parent=None):
    QtGui.QDirModel.__init__(self, None)
    self.checks = {}

def data(self, index, role=QtCore.Qt.DisplayRole):
    if role != QtCore.Qt.CheckStateRole:
        return QtGui.QDirModel.data(self, index, role)
    else:
        if index.column() == 0:
            return self.checkState(index)

def flags(self, index):
    return QtGui.QDirModel.flags(self, index) | QtCore.Qt.ItemIsUserCheckable

def checkState(self, index):
    if index in self.checks:
        return self.checks[index]
    else:
        return QtCore.Qt.Unchecked

def setData(self, index, value, role):
    if (role == QtCore.Qt.CheckStateRole and index.column() == 0):
        self.checks[index] = value
        self.emit(QtCore.SIGNAL("dataChanged(QModelIndex,QModelIndex)"), index, index)
        return True 

    return QtGui.QDirModel.setData(self, index, value, role)
</snippet></ROW><ROW><id>15403649</id><snippet>QDirModel</snippet></ROW><ROW><id>15403649</id><snippet>model = CheckableDirModel()
tree = QtGui.QTreeView()
tree.setModel(model)
</snippet></ROW><ROW><id>15403805</id><snippet>d = {'Date': ['2013-05-01', '2013-05-01', '2013-05-01', '2013-05-01'], 'Country Code': ['93', '92', '91', '90'], 'Area Code': ['1,2,3,4,5,6,7', '31,32,43,44,54,56,7, ', '434,34,4', '00, 89']}

new = {'Date': d['Date'], 'Combined Code': []}

for i, code in enumerate(d['Country Code']):
    area = map(str.strip, d['Area Code'][i].split(','))
    new['Combined Code'].append(",".join(["".join(item) for item in zip([code] * len(area), area)]))

print new
</snippet></ROW><ROW><id>15403805</id><snippet>{'Date': ['2013-05-01', '2013-05-01', '2013-05-01', '2013-05-01'], 'Combined Code': ['931,932,933,934,935,936,937', '9231,9232,9243,9244,9254,9256,927,92', '91434,9134,914', '9000,9089']}
</snippet></ROW><ROW><id>15404006</id><snippet>&gt;&gt;&gt; senseIdToSynset = {s.offset:s for s in wn.all_synsets()}
&gt;&gt;&gt; senseIdToSynset[2084071]
Synset('dog.n.01')
</snippet></ROW><ROW><id>15404372</id><snippet>LogEntry</snippet></ROW><ROW><id>15404372</id><snippet>LogEntryManager</snippet></ROW><ROW><id>15404372</id><snippet>log_action</snippet></ROW><ROW><id>15404372</id><snippet>from django.contrib.admin.models import LogEntry, CHANGE
from django.contrib.contenttypes.models import ContentType

def make_checked(modeladmin, request, queryset):
    queryset.update(checked = 1)

    ct = ContentType.objects.get_for_model(queryset.model)
    for obj in queryset:
        LogEntry.objects.log_action(
            user_id=request.user.id, 
            content_type_id=ct.pk,
            object_id=obj.pk,
            object_repr=obj.description,
            action_flag=CHANGE,
            change_message="You have ...") 
make_checked.short_description = 'Mark selected products as checked'
</snippet></ROW><ROW><id>15404372</id><snippet>LogEntry</snippet></ROW><ROW><id>15404372</id><snippet>log_entry</snippet></ROW><ROW><id>15404372</id><snippet>l = LogEntry(user_id=request.user.id, actions_flag=CHANGE, change_message="...")
l.save()
</snippet></ROW><ROW><id>15404441</id><snippet>&gt;&gt;&gt; a = ['[', '{', 'u', "'", 'f', 'i', 'r', 's', 't', '_', 'n', 'a', 'm', 'e', "'", ':', ' ', 'u', "'", 'j', 'o', 'h', 'n', "'", ',', ' ', 'u', "'", 'l', 'a', 's', 't', '_', 'n', 'a', 'm', 'e', "'", ':', ' ', 'u', "'", 's', 'm', 'i', 't', 'h', "'", ',', ' ', 'u', "'", 'a', 'g', 'e', "'", ':', ' ', '2', '0', ',', ' ', 'u', "'", 'm', 'o', 'b', 'n', 'u', 'm', "'", ':', ' ', 'u', "'", '1', '2', '3', '4', '1', '9', '0', '8', "'", ',', ' ', 'u', "'", '_', 'i', 'd', "'", ':', ' ', '1', ',', ' ', 'u', "'", 'e', 'm', 'a', 'i', 'l', "'", ':', ' ', 'u', "'", 's', 'm', 'i', 't', 'h', '@', 'g', 'm', 'a', 'i', 'l', '.', 'c', 'o', 'm', "'", '}', ']']

&gt;&gt;&gt; ''.join(a)
     "[{u'first_name': u'john', u'last_name': u'smith', u'age': 20, u'mobnum': u'12341908', u'_id': 1, u'email': u'smith@gmail.com'}]"

&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval(''.join(a))
 [{u'_id': 1,
  u'age': 20,
  u'email': u'smith@gmail.com',
  u'first_name': u'john',
  u'last_name': u'smith',
  u'mobnum': u'12341908'}]
</snippet></ROW><ROW><id>15404446</id><snippet>quit()</snippet></ROW><ROW><id>15404446</id><snippet>Frame</snippet></ROW><ROW><id>15404446</id><snippet>destroy()</snippet></ROW><ROW><id>15404446</id><snippet>self.Quit = Button(self, text = "QUIT", command = self.master.destroy)
</snippet></ROW><ROW><id>15404554</id><snippet>__class__</snippet></ROW><ROW><id>15404554</id><snippet>list</snippet></ROW><ROW><id>15404554</id><snippet>f2.__class__ = list
</snippet></ROW><ROW><id>15404554</id><snippet>TypeError: __class__ assignment: only for heap types
</snippet></ROW><ROW><id>15404632</id><snippet>def get(data,s):
    if len(data) == 1:
        return add(s, int(data))

    s = add(s, int(data[data.index('+')-1]))
    cut = data[(data.index('+')+1):]
    return get(cut,s)
</snippet></ROW><ROW><id>15404632</id><snippet>add(*[int(x) for x in data.split('+')])
</snippet></ROW><ROW><id>15404667</id><snippet>c1 = open("c1",'w')</snippet></ROW><ROW><id>15404667</id><snippet>c1</snippet></ROW><ROW><id>15404667</id><snippet>shlex.split</snippet></ROW><ROW><id>15404667</id><snippet>from subprocess import Popen, PIPE

p0 = Popen(['wget', '-O', '-', 'http://www.google.com'], stdout=PIPE)
p1 = Popen(['sed', '2,8d'], stdin=p0.stdout, stdout=PIPE) 
with open('c1', 'w') as c1:
    p2 = Popen(['sed', '2,7d'], stdin=p1.stdout, stdout=c1)
    p2.wait()
</snippet></ROW><ROW><id>15404667</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>15405437</id><snippet>def contact(request):
    form = ContactForm(request.POST or None)
    if request.POST and form.is_valid():
</snippet></ROW><ROW><id>15405437</id><snippet>or</snippet></ROW><ROW><id>15405437</id><snippet>and</snippet></ROW><ROW><id>15405437</id><snippet>None</snippet></ROW><ROW><id>15405437</id><snippet>form.is_valid()</snippet></ROW><ROW><id>15405449</id><snippet>def main(inp):
    # play game

if __name__ == '__main__':
    main(sys.stdin)
</snippet></ROW><ROW><id>15405449</id><snippet>StringIO</snippet></ROW><ROW><id>15405449</id><snippet>main</snippet></ROW><ROW><id>15405449</id><snippet>pty</snippet></ROW><ROW><id>15405849</id><snippet>get_signature(b'KEY', b'TEXT')
</snippet></ROW><ROW><id>15405849</id><snippet>get_signature(key.encode('ascii'), test.encode('ascii'))
</snippet></ROW><ROW><id>15405849</id><snippet>def get_signature(key, msg):
    if(isinstance(key, str)):
        key = key.encode('ascii')
    if(isinstance(msg, str)):
        msg = msg.encode('ascii')
    return base64.b64encode(hmac.new(key, msg, hashlib.sha1).digest())
</snippet></ROW><ROW><id>15406004</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; a = collections.Counter([1,1,2,2])
&gt;&gt;&gt; a
Counter({1: 2, 2: 2})
&gt;&gt;&gt; a[1]
2 
&gt;&gt;&gt; a[2]
2
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15406004</id><snippet>collections</snippet></ROW><ROW><id>15406004</id><snippet>def count_digits(s):
    res = [0]*10
    for x in s:
        res[int(x)] += 1
    return res
</snippet></ROW><ROW><id>15406057</id><snippet>task()</snippet></ROW><ROW><id>15406057</id><snippet>Tk.after()</snippet></ROW><ROW><id>15406057</id><snippet>task()</snippet></ROW><ROW><id>15406057</id><snippet>import tkinter as tk

root = tk.Tk()

TIMEOUT = 3000
i = 0
def task():
    global i
    i += 1
    print('In task(), i={}'.format(i))
    root.after(TIMEOUT, task)
    print('Called root.after() and exiting task()')


root.after(TIMEOUT, task)
root.mainloop()
</snippet></ROW><ROW><id>15406057</id><snippet>In task(), i=1
Called root.after() and exiting task()
In task(), i=2
Called root.after() and exiting task()
In task(), i=3
Called root.after() and exiting task()
</snippet></ROW><ROW><id>15406057</id><snippet>'Called root.after() and exiting task()'</snippet></ROW><ROW><id>15406099</id><snippet>urlpatterns = patterns('store.views',
    url(r'^$', 'main'),
    url(r'^new_delivery_user/$', 'new_delivery_user'),
    url(r'^edit_store_user/$', 'edit_store_user'),
    url(r'^edit_delivery_user/$', 'edit_delivery_user'),
    url(r'^deliveries/$', 'deliveries'),
    url(r'^request_delivery/$', 'request_delivery'),
    url(r'^request_delivery/confirm$', 'request_delivery_confirm'),
    url(r'^accept/(\d+)/$', 'accept'),
    url(r'^event_signal/$', 'store.views.event_signal'),
)
</snippet></ROW><ROW><id>15406099</id><snippet>    url(r'^event_signal/$', 'event_signal'),
</snippet></ROW><ROW><id>15406128</id><snippet>|</snippet></ROW><ROW><id>15406128</id><snippet>or</snippet></ROW><ROW><id>15406128</id><snippet>elif (c==7|c==3):
</snippet></ROW><ROW><id>15406128</id><snippet>elif c==7 or c==3:
</snippet></ROW><ROW><id>15406128</id><snippet>elif c in (3, 7):
</snippet></ROW><ROW><id>15406128</id><snippet>|</snippet></ROW><ROW><id>15406128</id><snippet>or</snippet></ROW><ROW><id>15406128</id><snippet>(c == (7 | c) == 3)</snippet></ROW><ROW><id>15406128</id><snippet>7 | c</snippet></ROW><ROW><id>15406128</id><snippet>c</snippet></ROW><ROW><id>15406128</id><snippet>3</snippet></ROW><ROW><id>15406128</id><snippet>False</snippet></ROW><ROW><id>15406128</id><snippet>&gt;&gt;&gt; c = 7
&gt;&gt;&gt; (c==7|c==3)
False
&gt;&gt;&gt; c = 3
&gt;&gt;&gt; (c==7|c==3)
False
&gt;&gt;&gt; c==7 or c==3
True
</snippet></ROW><ROW><id>15406332</id><snippet>filter</snippet></ROW><ROW><id>15406332</id><snippet>filtered</snippet></ROW><ROW><id>15406332</id><snippet>result = es.get('/_search', data={
    "query": {
        "filtered": {
            "query" : { "match_all" : {}},
            "filter": {
                "range": {
                   "@timestamp": {
                      "from": datetime(2013, 3, 11, 8, 0, 30,   tzinfo=paristimezone),
                       "to": datetime(2013, 3, 12, 11, 0, 30, tzinfo=paristimezone)
                    }
                }
            }
        }
    },           
   "facets" : {
       "error" : {
        "terms" : {
            "field" : "status_code"
        },
         "facet_filter" : {
            "term" : {"server" : "testserver01"}
           }
        }
    }
})
</snippet></ROW><ROW><id>15406338</id><snippet>def websvc(currency):
    db = MySQLdb.connect("localhost", "root", "aqw", "PFE_Project")
    cursor = db.cursor()
    sql = "SELECT * FROM myform_composantsserveur"
    servers = []

    try:
        cursor.execute(sql)
        results = cursor.fetchall()
        currency_in = currency
        req = urllib2.urlopen('http://rate-exchange.appspot.com/currency?from=USD&amp;to=%s') % (currency_in) 
        req1 = req.read()
        rate = int(req1['rate'])
        # rate = 0.77112893299999996

        for row in results:
            result = {} 
            result['1'] = row[1]
            result['3'] = int(row[2])
            result['4'] = int(row[3])
            result['5'] = int(row[4])
            result['6'] = row[5]
            result['7'] = int(row[6])
            result['8'] = row[7]
            result['9'] = row[8]
            p = rate * calculations_metric (int(row[2]), int(row[3]), int(row[4]), int(row[6]), row[7])
            result['2'] = p
            keys = result.keys()
            keys.sort()
            servers.append(result)

    except:
        print "Error: unable to fetch data"
    db.close()
    return servers
</snippet></ROW><ROW><id>15406624</id><snippet>&gt;&gt;&gt; parser.add_argument('--version', action='version', version='%(prog)s 2.0')
</snippet></ROW><ROW><id>15406624</id><snippet>__version__</snippet></ROW><ROW><id>15406624</id><snippet>from _version import __version__
parser.add_argument('--version', action='version',
                    version='%(prog)s {version}'.format(version=__version__))
</snippet></ROW><ROW><id>15406624</id><snippet>parser.add_argument('-v', '--version', action='version', version='%(prog)s ' + __version__)
</snippet></ROW><ROW><id>15406748</id><snippet>MultiValueDict</snippet></ROW><ROW><id>15406748</id><snippet>.get()</snippet></ROW><ROW><id>15406748</id><snippet>[...]</snippet></ROW><ROW><id>15406748</id><snippet>.getlist()</snippet></ROW><ROW><id>15406748</id><snippet>request.FILES.getlist('uploadedFile')
</snippet></ROW><ROW><id>15407122</id><snippet>import NaiveBayes

model = NaiveBayes.NaiveBayes()

model.set_real(['Height'])
model.set_real(['Weight'])
model.add_instances({'attributes':
                         {'Height': 239,
                          'Weight': 231,
                          },
                     'cases': 32,
                     'label':  'Sex=M'})

model.add_instances({'attributes':
                         {'Height': 233,
                          'Weight': 234,
                          },
                     'cases': 32,
                     'label':  'Sex=M'})
model.add_instances({'attributes':
                         {'Height': 190,
                          'Weight': 152
                          },
                     'cases': 58,
                     'label': 'Sex=F'
                     })
model.add_instances({'attributes':
                         {'Height': 191,
                          'Weight': 153
                          },
                     'cases': 58,
                     'label': 'Sex=F'
                     })

model.train()
result = model.predict({'attributes': {'Height': 212, 'Weight': 200}})

print ("The result is %s" % (result))
</snippet></ROW><ROW><id>15407122</id><snippet>$ python3 bayes.py
The result is {'Sex=M': 1.0, 'Sex=F': 0.0}
</snippet></ROW><ROW><id>15407290</id><snippet>zip(*[iter(lst)]*2)
</snippet></ROW><ROW><id>15407290</id><snippet>min</snippet></ROW><ROW><id>15407290</id><snippet>In [39]: min(zip(*[iter(lst)]*2),key=lambda (x,y): abs(float(x[1]) - 2))
Out[39]: (('654', '2.12', '86'), ('2', '756'))
</snippet></ROW><ROW><id>15407446</id><snippet>lines = {}

for files in filesInDir:
    sourceFile = open("scanfiles/" + files, "r")
    lines[files] = sourceFile.read().splitlines()
</snippet></ROW><ROW><id>15407553</id><snippet>&lt;kml xmlns="http://www.opengis.net/kml/2.2"xmlns:gx="http://www.google.com/kml/ext/2.2"&gt;
    &lt;Document id="feat_1"&gt;
    &lt;Placemark id="feat_2"&gt;
    &lt;name&gt;DSC00001.JPG&lt;/name&gt;
    &lt;description&gt;&lt;img src="files/DSC00001.JPG" alt="picture" width="400" height="300" align="left" /&gt;&lt;/description&gt;
    &lt;Point id="geom_0"&gt;&lt;coordinates&gt;18.9431816667,9.44355222222,0.0&lt;/coordinates&gt;
    &lt;/Point&gt;&lt;/Placemark&gt;&lt;/Document&gt;&lt;/kml&gt;
</snippet></ROW><ROW><id>15407553</id><snippet>&lt;kml xmlns="http://www.opengis.net/kml/2.2"
     xmlns:gx="http://www.google.com/kml/ext/2.2" 
     xmlns:kml="http://www.opengis.net/kml/2.2" 
     xmlns:atom="http://www.w3.org/2005/Atom"
&gt;
&lt;Document id="feat_1"&gt;
&lt;Placemark id="feat_2"&gt;
&lt;name&gt;DSC00001.JPG&lt;/name&gt;
&lt;Style&gt;
&lt;BalloonStyle&gt;
&lt;text&gt;&lt;![CDATA[
 &lt;table width=100% cellpadding=0 cellspacing=0&gt;
  &lt;tr&gt;&lt;td&gt;&lt;img width=100% src='files/DSC00001.jpg' /&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;]]&gt;
&lt;/text&gt;
&lt;/BalloonStyle&gt;
&lt;/Style&gt; 
&lt;Point id="geom_0"&gt;
&lt;coordinates&gt;18.9431816667,9.44355222222&lt;/coordinates&gt;
&lt;/Point&gt;
&lt;/Placemark&gt;
&lt;/Document&gt;
&lt;/kml&gt;
</snippet></ROW><ROW><id>15407768</id><snippet>groupby()</snippet></ROW><ROW><id>15407768</id><snippet>import pandas as pd
import numpy as np
import itertools

df = pd.DataFrame({
"strings":["the dog", "lazy dog", "The fox jump"], 
"value":["a","b","c"]})

w = df.strings.str.split()
c = w.map(len)
idx = np.repeat(c.index, c.values)
#words = np.concatenate(w.values)
words = list(itertools.chain.from_iterable(w.values))
s = pd.Series(words, index=idx)
s.name = "words"
print df.join(s)
</snippet></ROW><ROW><id>15407768</id><snippet>        strings value words
0       the dog     a   the
0       the dog     a   dog
1      lazy dog     b  lazy
1      lazy dog     b   dog
2  The fox jump     c   The
2  The fox jump     c   fox
2  The fox jump     c  jump
</snippet></ROW><ROW><id>15407783</id><snippet>/proc/net/arp
/proc/net/route
</snippet></ROW><ROW><id>15407783</id><snippet>Iface   Destination     Gateway         Flags   RefCnt  Use     Metric  Mask            MTU     Window  IRTT                                                       
eth0    00000000        B91A210A        0003    0       0       100     00000000        0       0       0                                                                             
</snippet></ROW><ROW><id>15407783</id><snippet>import struct
from IPy import IP
address = IP(struct.unpack('&lt;I', struct.pack('&gt;I', int(i, 16)))[0])
#Converts 'B91A210A' to IP('10.33.26.185')
</snippet></ROW><ROW><id>15407783</id><snippet>IP address       HW type     Flags       HW address            Mask     Device
10.33.26.185     0x1         0x2         e6:92:ec:f5:af:f7     *        eth0
</snippet></ROW><ROW><id>15407913</id><snippet>if None != foo(a) == 1:
</snippet></ROW><ROW><id>15407913</id><snippet>if (None != foo(a)) and (foo(a) == 1):
</snippet></ROW><ROW><id>15408060</id><snippet>dpkg -L python-dnspython
</snippet></ROW><ROW><id>15408060</id><snippet>export PYTHONPATH=/usr/share/pyshared
</snippet></ROW><ROW><id>15408210</id><snippet>from c import modeltocopy
from b import dynamic_model as dyn_model_factory

ShadowModel = dyn_model_factory('ShadowModel', app_label='fake', fields=modeltocopy._meta.fields)
</snippet></ROW><ROW><id>15408210</id><snippet>dynamic_model</snippet></ROW><ROW><id>15408412</id><snippet>data = {"_id" : "123", "study_type" : "research", "study_name" : "Statistical analysis"}
doc = Study(**data)
</snippet></ROW><ROW><id>15408412</id><snippet>Doc.update(set__VAR=Val, set__VAR2=Val2)
</snippet></ROW><ROW><id>15408412</id><snippet>setattr(Doc, 'VAR', val)
setattr(Doc, 'VAR2', val2)
Doc.save()
</snippet></ROW><ROW><id>15408412</id><snippet>Doc.VAR = val
Doc.VAR2 = val2
Doc.save()
</snippet></ROW><ROW><id>15408439</id><snippet>django_roa</snippet></ROW><ROW><id>15408523</id><snippet>figure</snippet></ROW><ROW><id>15408523</id><snippet>Figure</snippet></ROW><ROW><id>15408523</id><snippet>from matplotlib import pyplot as plt
from matplotlib.patches import Ellipse

fig = plt.figure()
ax = fig.add_subplot(111)
ax.add_artist(Ellipse(xy=(1, 1), width=2, height=2, facecolor='g', edgecolor='k', alpha=.1))
plt.show()
</snippet></ROW><ROW><id>15408672</id><snippet>list1 = [0,562,256,0,0,856]
list2 = [265,0,265,0,874,958]
rest1 = []
rest2 = []
result1 = []
result2 = []
for i in range(len(list1)):
if list1[i] and list2[i]:
    rest1.append(list1[i])
        rest2.append(list2[i])
for i in range(len(rest1)):
if rest1[i] &gt;249 and rest2[i]&gt;249:
        result1.append(rest1[i])
    result2.append(rest2[i])
print(result1,result1)
</snippet></ROW><ROW><id>15408983</id><snippet>itertools.takewhile</snippet></ROW><ROW><id>15408983</id><snippet>itertools.takewhile(lambda x: x &lt; 10, primes())
</snippet></ROW><ROW><id>15408983</id><snippet>itertools.takewhile((10.).__gt__, primes())
</snippet></ROW><ROW><id>15409009</id><snippet>cursor.execute("INSERT INTO mytable (Date, Cpu) VALUES (?,?)", (today, getCpuLoad()))
</snippet></ROW><ROW><id>15409009</id><snippet>today</snippet></ROW><ROW><id>15409033</id><snippet>import pandas as pd
import numpy as np

begin = pd.datetime(2013,1,1)
end = pd.datetime(2013,2,20)

dtrange = pd.date_range(begin, end)

p1 = np.random.rand(len(dtrange)) + 5
p2 = np.random.rand(len(dtrange)) + 10

df = pd.DataFrame({'p1': p1, 'p2': p2}, index=dtrange)
</snippet></ROW><ROW><id>15409033</id><snippet>d = df.index.day - np.clip((df.index.day-1) // 10, 0, 2)*10 - 1
date = df.index.values - np.array(d, dtype="timedelta64[D]")
df.groupby(date).mean()
</snippet></ROW><ROW><id>15409033</id><snippet>                 p1         p2
2013-01-01  5.413795  10.445640
2013-01-11  5.516063  10.491339
2013-01-21  5.539676  10.528745
2013-02-01  5.783467  10.478001
2013-02-11  5.358787  10.579149
</snippet></ROW><ROW><id>15409096</id><snippet>c.TerminalInteractiveShell.editor = 'emacsclient'</snippet></ROW><ROW><id>15409096</id><snippet>~/.config/ipython/profile_default/ipython_config.py</snippet></ROW><ROW><id>15409096</id><snippet>ipython locate profile</snippet></ROW><ROW><id>15409096</id><snippet>export EDITOR=emacsclient</snippet></ROW><ROW><id>15409096</id><snippet>~/.bashrc</snippet></ROW><ROW><id>15409251</id><snippet>links[0]</snippet></ROW><ROW><id>15409251</id><snippet>bs4.element.Tag</snippet></ROW><ROW><id>15409251</id><snippet>split</snippet></ROW><ROW><id>15409251</id><snippet>split</snippet></ROW><ROW><id>15409251</id><snippet>In [10]: l = links[0]

In [11]: type(l)
Out[11]: bs4.element.Tag

In [17]: print l.split
None

In [18]: None()   # :)

TypeError: 'NoneType' object is not callable
</snippet></ROW><ROW><id>15409251</id><snippet>In [21]: links[0]['href']
Out[21]: '/?ref=1591d2c3-5613-4592-a245-ca34cbd29008&amp;_pop=brdcrumb'
</snippet></ROW><ROW><id>15409251</id><snippet>get</snippet></ROW><ROW><id>15409251</id><snippet>In [24]: links[0].get('href')
Out[24]: '/?ref=1591d2c3-5613-4592-a245-ca34cbd29008&amp;_pop=brdcrumb'


In [26]: print links[0].get('wharrgarbl')
None

In [27]: print links[0]['wharrgarbl']

KeyError: 'wharrgarbl'
</snippet></ROW><ROW><id>15409356</id><snippet>IPAddressField</snippet></ROW><ROW><id>15409356</id><snippet>P</snippet></ROW><ROW><id>15409693</id><snippet>12</snippet></ROW><ROW><id>15409693</id><snippet>12</snippet></ROW><ROW><id>15409693</id><snippet>listcoor</snippet></ROW><ROW><id>15409693</id><snippet>listcoor[12]['longitude']
</snippet></ROW><ROW><id>15409693</id><snippet>&gt;&gt;&gt; 12['longitude']
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is unsubscriptable
</snippet></ROW><ROW><id>15409872</id><snippet>griddata</snippet></ROW><ROW><id>15409872</id><snippet>griddata</snippet></ROW><ROW><id>15409872</id><snippet>#00FF00</snippet></ROW><ROW><id>15409872</id><snippet>data_dims = (3, 3) # or what ever your data really is
X = np.asarray(x).reshape(data_dims)
Y = np.asarray(y).reshape(data_dims)
C = np.asarray([mpl.colors.colorConverter.to_rgb(_hz) for _hz in z]).reshape(data_dims + (3,)) 
# the colors converted to (r, g, b) tuples
</snippet></ROW><ROW><id>15409872</id><snippet>asarray</snippet></ROW><ROW><id>15409872</id><snippet>imshow</snippet></ROW><ROW><id>15409872</id><snippet>imshow(c, interpolation='none', 
       origin='bottom', 
       extent=[np.min(X), np.max(X), np.min(Y), np.max(Y)])
</snippet></ROW><ROW><id>15409872</id><snippet>imshow</snippet></ROW><ROW><id>15409872</id><snippet>C</snippet></ROW><ROW><id>15410009</id><snippet>xrange(1, 10, 4)</snippet></ROW><ROW><id>15410009</id><snippet>xrange(1, 13, 4)</snippet></ROW><ROW><id>15410009</id><snippet>&gt;&gt;&gt; for item in xrange(1,13,4):
...     print item
... 
1
5
9
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15410009</id><snippet>xrange</snippet></ROW><ROW><id>15410009</id><snippet>start, stop, step</snippet></ROW><ROW><id>15410009</id><snippet>xrange</snippet></ROW><ROW><id>15410009</id><snippet>xrange</snippet></ROW><ROW><id>15410009</id><snippet>xrange.__repr__()</snippet></ROW><ROW><id>15410009</id><snippet>rtn = PyString_FromFormat("xrange(%ld, %ld, %ld)",
                          r-&gt;start,
                          r-&gt;start + r-&gt;len * r-&gt;step,
                          r-&gt;step);
</snippet></ROW><ROW><id>15410140</id><snippet>tup = tuple((element.foo, element.bar) for element in alist)
</snippet></ROW><ROW><id>15410140</id><snippet>tup = tuple([(element.foo, element.bar) for element in alist])
</snippet></ROW><ROW><id>15410140</id><snippet>attrgetter</snippet></ROW><ROW><id>15410140</id><snippet>alist</snippet></ROW><ROW><id>15410140</id><snippet>In [37]: %timeit tuple([(element.foo, element.bar) for element in alist])
1 loops, best of 3: 165 ms per loop

In [38]: %timeit tuple((element.foo, element.bar) for element in alist)
10 loops, best of 3: 155 ms per loop

In [39]: %timeit tuple(map(operator.attrgetter('foo','bar'), alist))
1 loops, best of 3: 283 ms per loop

In [40]: getter = operator.attrgetter('foo','bar')

In [41]: %timeit tuple(map(getter, alist))
1 loops, best of 3: 284 ms per loop

In [46]: %timeit tuple(imap(getter, alist))
1 loops, best of 3: 264 ms per loop
</snippet></ROW><ROW><id>15410369</id><snippet>for field in item</snippet></ROW><ROW><id>15410369</id><snippet>for field in item['row']</snippet></ROW><ROW><id>15410369</id><snippet>from scrapy.item import Item, Field
from scrapy.spider import BaseSpider

class TableItem(Item):
    row = Field()

class TestSider(BaseSpider):
    name = "tabletest"
    start_urls = ('http://scrapy.org?finger', 'http://example.com/toe')

    def parse(self, response):
        item = TableItem()

        row = dict(
            foo='bar',
            baz=[123, 'test'],
        )
        row['url'] = response.url

        if 'finger' in response.url:
            row['digit'] = 'my finger'
            row['appendage'] = 'hand'
        else:
            row['foot'] = 'might be my toe'

        item['row'] = row

        return item
</snippet></ROW><ROW><id>15410369</id><snippet>stav@maia:/srv/stav/scrapie/oneoff$ scrapy crawl tabletest
2013-03-14 06:55:52-0600 [scrapy] INFO: Scrapy 0.17.0 started (bot: oneoff)
2013-03-14 06:55:52-0600 [scrapy] DEBUG: Overridden settings: {'NEWSPIDER_MODULE': 'oneoff.spiders', 'SPIDER_MODULES': ['oneoff.spiders'], 'USER_AGENT': 'Chromium OneOff 24.0.1312.56 Ubuntu 12.04 (24.0.1312.56-0ubuntu0.12.04.1)', 'BOT_NAME': 'oneoff'}
2013-03-14 06:55:53-0600 [scrapy] DEBUG: Enabled extensions: LogStats, TelnetConsole, CloseSpider, WebService, CoreStats, SpiderState
2013-03-14 06:55:53-0600 [scrapy] DEBUG: Enabled downloader middlewares: HttpAuthMiddleware, DownloadTimeoutMiddleware, UserAgentMiddleware, RetryMiddleware, DefaultHeadersMiddleware, MetaRefreshMiddleware, HttpCompressionMiddleware, RedirectMiddleware, CookiesMiddleware, ChunkedTransferMiddleware, DownloaderStats
2013-03-14 06:55:53-0600 [scrapy] DEBUG: Enabled spider middlewares: HttpErrorMiddleware, OffsiteMiddleware, RefererMiddleware, UrlLengthMiddleware, DepthMiddleware
2013-03-14 06:55:53-0600 [scrapy] DEBUG: Enabled item pipelines:
2013-03-14 06:55:53-0600 [tabletest] INFO: Spider opened
2013-03-14 06:55:53-0600 [tabletest] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)
2013-03-14 06:55:53-0600 [scrapy] DEBUG: Telnet console listening on 0.0.0.0:6023
2013-03-14 06:55:53-0600 [scrapy] DEBUG: Web service listening on 0.0.0.0:6080
2013-03-14 06:55:53-0600 [tabletest] DEBUG: Crawled (200) &lt;GET http://scrapy.org?finger&gt; (referer: None)
2013-03-14 06:55:53-0600 [tabletest] DEBUG: Scraped from &lt;200 http://scrapy.org?finger&gt;
    {'row': {'appendage': 'hand',
             'baz': [123, 'test'],
             'digit': 'my finger',
             'foo': 'bar',
             'url': 'http://scrapy.org?finger'}}
2013-03-14 06:55:53-0600 [tabletest] DEBUG: Redirecting (302) to &lt;GET http://www.iana.org/domains/example/&gt; from &lt;GET http://example.com/toe&gt;
2013-03-14 06:55:53-0600 [tabletest] DEBUG: Redirecting (302) to &lt;GET http://www.iana.org/domains/example&gt; from &lt;GET http://www.iana.org/domains/example/&gt;
2013-03-14 06:55:53-0600 [tabletest] DEBUG: Crawled (200) &lt;GET http://www.iana.org/domains/example&gt; (referer: None)
2013-03-14 06:55:53-0600 [tabletest] DEBUG: Scraped from &lt;200 http://www.iana.org/domains/example&gt;
    {'row': {'baz': [123, 'test'],
             'foo': 'bar',
             'foot': 'might be my toe',
             'url': 'http://www.iana.org/domains/example'}}
2013-03-14 06:55:53-0600 [tabletest] INFO: Closing spider (finished)
2013-03-14 06:55:53-0600 [tabletest] INFO: Dumping Scrapy stats:
    {'downloader/request_bytes': 1066,
     'downloader/request_count': 4,
     'downloader/request_method_count/GET': 4,
     'downloader/response_bytes': 3833,
     'downloader/response_count': 4,
     'downloader/response_status_count/200': 2,
     'downloader/response_status_count/302': 2,
     'finish_reason': 'finished',
     'finish_time': datetime.datetime(2013, 3, 14, 12, 55, 53, 848735),
     'item_scraped_count': 2,
     'log_count/DEBUG': 13,
     'log_count/INFO': 4,
     'response_received_count': 2,
     'scheduler/dequeued': 4,
     'scheduler/dequeued/memory': 4,
     'scheduler/enqueued': 4,
     'scheduler/enqueued/memory': 4,
     'start_time': datetime.datetime(2013, 3, 14, 12, 55, 53, 99635)}
2013-03-14 06:55:53-0600 [tabletest] INFO: Spider closed (finished)
</snippet></ROW><ROW><id>15410514</id><snippet>popt, pcov = curve_fit(func, x, yn, p0=(1./np.std(yn), np.argmax(yn) ,0,0,1))
</snippet></ROW><ROW><id>15410514</id><snippet>sigma=10</snippet></ROW><ROW><id>15410514</id><snippet>mu=50</snippet></ROW><ROW><id>15410729</id><snippet>j</snippet></ROW><ROW><id>15410729</id><snippet>dict</snippet></ROW><ROW><id>15410729</id><snippet>results</snippet></ROW><ROW><id>15410729</id><snippet>dict</snippet></ROW><ROW><id>15410729</id><snippet>text = j['results'][0]['text']
id = j['results'][0]['id']
</snippet></ROW><ROW><id>15410729</id><snippet>texts = {}
results = j['results']

for result in results:
    text = result['text']
    id = results['id']
    texts[id] = text
</snippet></ROW><ROW><id>15410729</id><snippet>dict</snippet></ROW><ROW><id>15410729</id><snippet>texts</snippet></ROW><ROW><id>15410871</id><snippet>waves = [(frequency, amplitude) for _ in range(wave_count)]
</snippet></ROW><ROW><id>15410871</id><snippet>waves = [(frequency, amplitude)] * wave_count
</snippet></ROW><ROW><id>15410871</id><snippet>wave_count</snippet></ROW><ROW><id>15411036</id><snippet> pfexec rm /usr/lib/libgcc_s.so.1
 pfexec ln -s /opt/ts/gcc/3.4/lib/libgcc_s.so.1 /usr/lib/libgcc_s.so.1
</snippet></ROW><ROW><id>15411146</id><snippet>dict.pop</snippet></ROW><ROW><id>15411146</id><snippet> mydict.pop("key", None)
</snippet></ROW><ROW><id>15411544</id><snippet>drawdata.unstack('ID').plot().get_legend().set_title("")
</snippet></ROW><ROW><id>15411544</id><snippet>import pylab as pl
drawdata.unstack('ID').plot(legend=False)
pl.legend(loc="best")
</snippet></ROW><ROW><id>15411544</id><snippet>ax.legend(ax.containers, legend_list, loc='best', fancybox=True, shadow=True)
</snippet></ROW><ROW><id>15411713</id><snippet>attr = wx.grid.Grid.GridCellAttr()
attr.SetBackgroundColour(wx.RED)
self.SetRowAttr(5, attr)
</snippet></ROW><ROW><id>15412081</id><snippet>fields = ('title',)
</snippet></ROW><ROW><id>15412081</id><snippet>&gt;&gt;&gt; ('title')
'title'
&gt;&gt;&gt; 'title',
('title',)
</snippet></ROW><ROW><id>15412081</id><snippet>foo(('title',), 'bar')</snippet></ROW><ROW><id>15412081</id><snippet>foo('title', 'bar')</snippet></ROW><ROW><id>15412190</id><snippet>find /path/to/src -name "*.nr" -exec cp \{\} /path/to/dest \;
</snippet></ROW><ROW><id>15412830</id><snippet>Veg(name, color)
vegList.append(Veg)
</snippet></ROW><ROW><id>15412830</id><snippet>Veg</snippet></ROW><ROW><id>15412830</id><snippet>__str__</snippet></ROW><ROW><id>15412830</id><snippet>print vegList</snippet></ROW><ROW><id>15412830</id><snippet># Builds objects on instantiation for a vegetable and color
class Veg:
    def __init__(self, name, color):
        self.name = name
        self.color = color
        print('You have created a new', self.color, self.name, end='.\n')

    def __str__(self):
        return 'One {} {}'.format(self.color, self.name)

# Function to create a new vegetable and store it in a list
def createVeg():
    name = input('What is the name of the Vegetable? ')
    color = input('What color is the vegetable? ')

    vegList.append(Veg(name, color))
    return

# Initialize variables
vegList = []
choice = 'y'

# Main loop
while choice == 'y':
    print('Your basket contains:\n')
    for veg in vegList:
        print(veg)
    choice = input('Would you like to add a new vegetable? (y / n) ')
    if choice == 'y':
        createVeg()
    if choice == 'n':
        break

print('Goodbye!')
</snippet></ROW><ROW><id>15412954</id><snippet>self._command</snippet></ROW><ROW><id>15412987</id><snippet>itertools.chain()</snippet></ROW><ROW><id>15412987</id><snippet>chain.from_iterable()</snippet></ROW><ROW><id>15412987</id><snippet>y</snippet></ROW><ROW><id>15412987</id><snippet>In [23]: lis=[1,2,3,4]

In [24]: from itertools import chain

In [31]: y = list(chain(*([n]*4 for n in lis)))

In [32]: y
Out[32]: [1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4]
</snippet></ROW><ROW><id>15412987</id><snippet>In [25]: x=[1,2,3,4]*1000  #can't use more than 1000 due to limited RAM

In [26]: %timeit list(chain(*([n]*1000 for n in x)))
1 loops, best of 3: 196 ms per loop

In [27]: %timeit list(chain.from_iterable(([n]*1000 for n in x)))
1 loops, best of 3: 177 ms per loop

In [29]: %timeit [n for n in x for _ in xrange(1000)]
1 loops, best of 3: 388 ms per loop

#three more solutions;from @Steven Rumbalski 

In [28]: %timeit [repeated for value in x for repeated in repeat(value,1000)]
1 loops, best of 3: 344 ms per loop

In [30]: %timeit list(chain.from_iterable(izip(*repeat(x,1000))))
1 loops, best of 3: 204 ms per loop

In [31]: %timeit list(chain(*izip(*repeat(x,1000))))
1 loops, best of 3: 238 ms per loop
</snippet></ROW><ROW><id>15413049</id><snippet>errorbar</snippet></ROW><ROW><id>15413049</id><snippet>...
#..plot the current light curve
ax1.errorbar(time, rate, error, fmt='r.', capsize=0)
gca().xaxis.set_major_formatter(FormatStrFormatter('%5.1f'))

#..overplot a previous outburst
newax2.errorbar(time + 122.5, rate, error, fmt='g.', capsize=0)
newax3.errorbar(time + 255, rate, error, fmt='k.', capsize=0)
...
</snippet></ROW><ROW><id>15413049</id><snippet>time</snippet></ROW><ROW><id>15413049</id><snippet>ax1</snippet></ROW><ROW><id>15413049</id><snippet>axis</snippet></ROW><ROW><id>15413049</id><snippet>...
##..plot the current light curve
ax1.errorbar(time, rate, error, fmt='r.', capsize=0)
ax1.set_xlim(tmin-10,tmax)
ax1.xaxis.set_major_formatter(FormatStrFormatter('%5.1f'))
##..overplot a previous outburst
newax2.errorbar(time, rate, error, fmt='g.', capsize=0)
newax3.errorbar(time, rate, error, fmt='k.', capsize=0)
newax2.set_xlim(tmin-10-122.5,tmax-122.5)
newax2.xaxis.set_major_formatter(FormatStrFormatter('%5.1f'))
newax3.set_xlim(tmin-10-255,tmax-255)
newax3.xaxis.set_major_formatter(FormatStrFormatter('%5.1f'))
ylim(0,0.45)
#axis([tmin-10,tmax,-0.00,0.45])
...
</snippet></ROW><ROW><id>15413218</id><snippet>import os
import numpy as np

result = None
for root, dirs, files in os.walk('.', topdown = True):
    for filename in files:
        with open(os.path.join(root, filename), 'r') as f:
            data = np.genfromtxt(f, unpack=True, names=True, dtype=None)
        if result is None:
            result = data
        else:
            result = np.vstack((result, data))

print(result[:10]) # print first 10 lines
np.save('/tmp/outfile.npy', result)
</snippet></ROW><ROW><id>15413244</id><snippet>def new_f(self,*args, **kwargs):
    print "Entering", f.__name__,self.__class__.__name__,inspect.getargspec(f).args[1:] 
    f(self,*args)        
    print "Exited", f.__name__,self.__class__.__name__,inspect.getargspec(f).args[1:]        
</snippet></ROW><ROW><id>15413244</id><snippet>def new_f(self,*args, **kwargs):
    print "Entering", f.__name__,self.__class__.__name__,inspect.getargspec(f).args[1:] 
    ret = f(self,*args)        
    print "Exited", f.__name__,self.__class__.__name__,inspect.getargspec(f).args[1:]        
    return ret
</snippet></ROW><ROW><id>15413244</id><snippet>f(self,*args)</snippet></ROW><ROW><id>15413244</id><snippet>None</snippet></ROW><ROW><id>15413358</id><snippet>onPortSettings</snippet></ROW><ROW><id>15413358</id><snippet>timer</snippet></ROW><ROW><id>15413358</id><snippet>    self.on_PortSettings() &lt;-- here

    self.timer = QTimer(self)            
</snippet></ROW><ROW><id>15413456</id><snippet>func</snippet></ROW><ROW><id>15413456</id><snippet>func</snippet></ROW><ROW><id>15413456</id><snippet>func</snippet></ROW><ROW><id>15413456</id><snippet>def func(data, a, b):
    return data[:,0]*data[:,1]*a + b
</snippet></ROW><ROW><id>15413456</id><snippet>curve_fit</snippet></ROW><ROW><id>15413456</id><snippet>data</snippet></ROW><ROW><id>15413456</id><snippet>x</snippet></ROW><ROW><id>15413456</id><snippet>y</snippet></ROW><ROW><id>15413456</id><snippet>z</snippet></ROW><ROW><id>15413456</id><snippet>a</snippet></ROW><ROW><id>15413456</id><snippet>b</snippet></ROW><ROW><id>15413456</id><snippet>params, pcov = optimize.curve_fit(func, A[:,:2], A[:,2], guess)
</snippet></ROW><ROW><id>15413456</id><snippet>import scipy.optimize as optimize
import numpy as np

A = np.array([(19,20,24), (10,40,28), (10,50,31)])

def func(data, a, b):
    return data[:,0]*data[:,1]*a + b

guess = (1,1)
params, pcov = optimize.curve_fit(func, A[:,:2], A[:,2], guess)
print(params)
# [ 0.04919355  6.67741935]
</snippet></ROW><ROW><id>15413568</id><snippet>for line in f:
    if '!!event!!' in line:
        L0 = line.split()
        for line in f:
            if "flag1" in line:
                L1 = line.split()
            elif "flag2" in line:
                L2 = line.split()
            elif "flag3" in line:
                L3 = line.split()
                break             # continue outer loop
        print 'Event and flag times: ', L0[0], L1[0], L2[0], L3[0]

# Event and flag times:  8:41:08 8:41:10 8:41:12 8:41:16
# Event and flag times:  8:41:22 8:41:23 8:41:24 8:41:27
</snippet></ROW><ROW><id>15413873</id><snippet>sum(sum(b) for b in a)
</snippet></ROW><ROW><id>15414124</id><snippet>form.cleaned_data['start_date']</snippet></ROW><ROW><id>15414341</id><snippet>split</snippet></ROW><ROW><id>15414341</id><snippet>shlex.split</snippet></ROW><ROW><id>15414341</id><snippet>import shlex
p2 = subprocess.Popen(shlex.split(second), stdin=p1.stdout, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>15414341</id><snippet>first = ['ip', 'route', 'list', 'dev', 'eth0']
second = ['awk', ' /^default/ {print $3}']
p1 = subprocess.Popen(first, stdout=subprocess.PIPE)
p2 = subprocess.Popen(second, stdin=p1.stdout, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>15414455</id><snippet>pyglet</snippet></ROW><ROW><id>15414455</id><snippet>sys.platform.startswith('linux')</snippet></ROW><ROW><id>15414455</id><snippet>sys.platform.startswith('linux') or sys.platform.startswith('freebsd')</snippet></ROW><ROW><id>15414455</id><snippet>pyglet/lib.py
pyglet/app/base.py
pyglet/gl/__init__.py
pyglet/image/codecs/__init__.py
pyglet/input/__init__.py
pyglet/media/drivers/openal/__init__.py
</snippet></ROW><ROW><id>15414720</id><snippet>start_new_thread</snippet></ROW><ROW><id>15414720</id><snippet>start_new_thread(networkStart.startConnecton())</snippet></ROW><ROW><id>15414720</id><snippet>threading</snippet></ROW><ROW><id>15414720</id><snippet>import threading
import connections

threading.Thread(target=networkStart.startConnecton).start()
print 'This should print!'
</snippet></ROW><ROW><id>15415082</id><snippet>ISession</snippet></ROW><ROW><id>15415082</id><snippet>SessionAuthenticationPolicy</snippet></ROW><ROW><id>15415095</id><snippet>sock.recv(1024)</snippet></ROW><ROW><id>15415095</id><snippet>threading.Thread(target=Thread2, args=(sock,)).start()
while True:
    data = sock.recv(1024)
    if not data:
        break
    print data
</snippet></ROW><ROW><id>15415095</id><snippet>t = threading.Thread(target=Thread2, args=(sock,))
t.daemon = True
t.start()
while True:
    data = sock.recv(1024)
    if not data:
        break
    print data
</snippet></ROW><ROW><id>15415095</id><snippet>args</snippet></ROW><ROW><id>15415095</id><snippet>args=(sock,)</snippet></ROW><ROW><id>15415095</id><snippet>args=(sock)</snippet></ROW><ROW><id>15415095</id><snippet>args=(sock)</snippet></ROW><ROW><id>15415095</id><snippet>args=sock</snippet></ROW><ROW><id>15415107</id><snippet>In [1]: df = DataFrame(np.random.randn(10),
                       index=pd.date_range('2001-05-16', '2001-05-25'))

In [2]: grouper = df.groupby(df.index &lt; pd.Timestamp('2001-05-21'))

In [3]: before, after = grouper.get_group(True), grouper.get_group(False)

In [4]: before
Out[4]: 
               0
2001-05-16  2.560516
2001-05-17 -2.207314
2001-05-18  0.646882
2001-05-19  0.660611
2001-05-20  0.437303
</snippet></ROW><ROW><id>15415107</id><snippet>after</snippet></ROW><ROW><id>15415107</id><snippet>In [3]</snippet></ROW><ROW><id>15415632</id><snippet>import numpy as np
from matplotlib import pyplot as plt

def my_dist(x):
    return np.exp(-x ** 2)

x = np.arange(-100, 100)
p = my_dist(x)
plt.plot(x, p)
plt.show()
</snippet></ROW><ROW><id>15415632</id><snippet>import numpy as np
from scipy.interpolate import UnivariateSpline
from matplotlib import pyplot as plt

N = 1000
n = N/10
s = np.random.normal(size=N)   # generate your data sample with N elements
p, x = np.histogram(s, bins=n) # bin it into n = N/10 bins
x = x[:-1] + (x[1] - x[0])/2   # convert bin edges to centers
f = UnivariateSpline(x, p, s=n)
plt.plot(x, f(x))
plt.show()
</snippet></ROW><ROW><id>15415632</id><snippet>s</snippet></ROW><ROW><id>15415632</id><snippet>UnivariateSpline</snippet></ROW><ROW><id>15415813</id><snippet>def is_shifted_copy(l1, l2):
    l1l1 = l1 * 2
    n = len(l1)
    return next((i for i in range(n) if l1l1[i:i + n] == l2), None)
</snippet></ROW><ROW><id>15415856</id><snippet>set_xticklabels(["Under 600", "600-700",...], rotation = "vertical")</snippet></ROW><ROW><id>15415910</id><snippet>connection.commit()</snippet></ROW><ROW><id>15415910</id><snippet>commit()</snippet></ROW><ROW><id>15416166</id><snippet>readline</snippet></ROW><ROW><id>15416166</id><snippet>raw_input()</snippet></ROW><ROW><id>15416166</id><snippet>readline</snippet></ROW><ROW><id>15416166</id><snippet>try:
    import readline
except:
    pass #readline not available
</snippet></ROW><ROW><id>15416181</id><snippet>&gt;&gt;&gt; a = list(range(10))
&gt;&gt;&gt; a
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; i = a.index(9)
&gt;&gt;&gt; i
9
&gt;&gt;&gt; a[i]
9
&gt;&gt;&gt; a[10]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list index out of range
</snippet></ROW><ROW><id>15416181</id><snippet>i</snippet></ROW><ROW><id>15416181</id><snippet>0..i-1</snippet></ROW><ROW><id>15416181</id><snippet>len(mylist) - 1</snippet></ROW><ROW><id>15416181</id><snippet>resList</snippet></ROW><ROW><id>15416181</id><snippet>resultss</snippet></ROW><ROW><id>15416345</id><snippet>&gt;&gt;&gt; [row[:-1] + (rank,) for rank, row in enumerate(sorted(rows, reverse=True), start=1)]
    [(90L, 70L, 1), (25L, 78L, 2), (17L, 1L, 3)]
</snippet></ROW><ROW><id>15416345</id><snippet>enumerate(rows, start=1)</snippet></ROW><ROW><id>15416345</id><snippet>1</snippet></ROW><ROW><id>15416345</id><snippet>row[:-1]</snippet></ROW><ROW><id>15416345</id><snippet>row[:-1] + (rank,)</snippet></ROW><ROW><id>15416345</id><snippet>cursor.execute ("SELECT winnings, user FROM round_lb WHERE r_id = 5")
rows = cursor.fetchall()
for rank, (winnings, user) in enumerate(sorted(rows, reverse=True), start=1):
    params = (winnings, user, rank)
    cursor.execute("INSERT INTO round_lb (winnings, user, rank) VALUES (%s, %s, %s)", params)
</snippet></ROW><ROW><id>15416345</id><snippet>cursor.execute ("SELECT winnings, user FROM round_lb WHERE r_id = 5 ORDER BY winnings DESC")
rows = cursor.fetchall()
for rank, (winnings, user) in enumerate(rows, start=1):
    params = (winnings, user, rank)
    cursor.execute("INSERT INTO round_lb (winnings, user, rank) VALUES (%s, %s, %s)", params)
</snippet></ROW><ROW><id>15416495</id><snippet>with open(json_file_path, "w") as json_file:
    for data in data_iterable:
        json_file.write("{}\n".format(json.dumps(data)))
</snippet></ROW><ROW><id>15416495</id><snippet>with open(json_file_path, "r") as json_file:
    for line in json_file:
        data = json.loads(line)
        process_data(data)
</snippet></ROW><ROW><id>15416495</id><snippet>with open(json_file_path, "a") as json_file:
    json_file.write("{}\n".format(json.dumps(new_data)))
</snippet></ROW><ROW><id>15416496</id><snippet>while functionLock!=''</snippet></ROW><ROW><id>15416496</id><snippet>False</snippet></ROW><ROW><id>15416496</id><snippet>while functionLock!=''</snippet></ROW><ROW><id>15416496</id><snippet>False</snippet></ROW><ROW><id>15416496</id><snippet>total</snippet></ROW><ROW><id>15416496</id><snippet>total</snippet></ROW><ROW><id>15416496</id><snippet>10</snippet></ROW><ROW><id>15416496</id><snippet>num</snippet></ROW><ROW><id>15416496</id><snippet>total+=num</snippet></ROW><ROW><id>15416496</id><snippet>total</snippet></ROW><ROW><id>15416496</id><snippet>num</snippet></ROW><ROW><id>15416496</id><snippet>total</snippet></ROW><ROW><id>15416496</id><snippet>total-=num</snippet></ROW><ROW><id>15416496</id><snippet>total</snippet></ROW><ROW><id>15416496</id><snippet>9</snippet></ROW><ROW><id>15416496</id><snippet>total = 10</snippet></ROW><ROW><id>15416496</id><snippet>11</snippet></ROW><ROW><id>15416496</id><snippet>total</snippet></ROW><ROW><id>15416496</id><snippet>xchg</snippet></ROW><ROW><id>15416496</id><snippet>total</snippet></ROW><ROW><id>15416496</id><snippet>global total</snippet></ROW><ROW><id>15416496</id><snippet>myfunction</snippet></ROW><ROW><id>15416589</id><snippet>xlrd</snippet></ROW><ROW><id>15416589</id><snippet>import os
import xlrd
print 'xlrd:   ', xlrd.__VERSION__
import xlwt
print 'xlwt:   ', xlwt.__VERSION__
import xlutils.copy
print 'xlutils:', open(os.path.join(os.path.dirname(
    xlutils.copy.__file__), 'version.txt')).read()


from xlrd import open_workbook, cellname, XL_CELL_TEXT
from xlwt import Workbook
from xlutils.copy import copy

# open fail
book = open_workbook('name.xls')
# make copy
wb = copy(book)

print 'finished'
</snippet></ROW><ROW><id>15416589</id><snippet>2013-03-14 18:33:30.201494 ['python2.7', 'test.py']
xlrd:    0.9.0
xlwt:    0.7.4
xlutils: 1.5.2

finished
</snippet></ROW><ROW><id>15416589</id><snippet>2013-03-14 18:35:40.241518 ['python2.7', 'test.py']
xlrd:    0.7.3
xlwt:    0.7.4
xlutils: 1.5.2

finished
</snippet></ROW><ROW><id>15416589</id><snippet>2013-03-14 18:42:06.703188 ['python2.7', 'test.py']
xlrd:    0.6.1
xlwt:    0.7.4
xlutils: 1.5.2

Traceback (most recent call last):
  File "test.py", line 19, in &lt;module&gt;
    wb = copy(book)
  File "/usr/lib/python2.7/dist-packages/xlutils/copy.py", line 13, in copy
    w
  File "/usr/lib/python2.7/dist-packages/xlutils/filter.py", line 827, in process
    reader(chain[0])
  File "/usr/lib/python2.7/dist-packages/xlutils/filter.py", line 66, in __call__
    for col_x in xrange(sheet.row_len(row_x)):
AttributeError: 'Sheet' object has no attribute 'row_len'
</snippet></ROW><ROW><id>15416631</id><snippet>curl</snippet></ROW><ROW><id>15416631</id><snippet>curl -O "https://pypi.python.org/packages/source/x/xlrd/xlrd-0.9.0.tar.gz"
</snippet></ROW><ROW><id>15416865</id><snippet>dictionary.iteritems</snippet></ROW><ROW><id>15417276</id><snippet>item['file']</snippet></ROW><ROW><id>15417276</id><snippet>item['deleted']</snippet></ROW><ROW><id>15417276</id><snippet>for item in fileItems:
    isDeleted = item['deleted']
    try:
        theFile = item['file']
        # Rest of your code
    except KeyError:
        print "Item deleted"
</snippet></ROW><ROW><id>15417299</id><snippet>if test_string in list_of_strings</snippet></ROW><ROW><id>15417299</id><snippet>if test_string.lower() in (s.lower() for s in list_of_strings)
</snippet></ROW><ROW><id>15417299</id><snippet>&gt;&gt;&gt; originals = ['0430f244a18146a0815aa1dd4012db46', '0430f244a18146a0815aa1dd40 12db46', '59739CCDA2F15D5AC16DB6695CAE3378']
&gt;&gt;&gt; test = '59739ccda2f15d5ac16db6695cae3378'
&gt;&gt;&gt; if test.lower() in (s.lower() for s in originals):
...    print '%s is match, yeih!' % test
... 
59739ccda2f15d5ac16db6695cae3378 is match, yeih!
</snippet></ROW><ROW><id>15417336</id><snippet>-u</snippet></ROW><ROW><id>15417336</id><snippet>numpy.asarray</snippet></ROW><ROW><id>15417336</id><snippet>numpy.frombuffer</snippet></ROW><ROW><id>15417336</id><snippet>cv2</snippet></ROW><ROW><id>15417336</id><snippet>cv</snippet></ROW><ROW><id>15417336</id><snippet>import sys
import cv2
import numpy

stdin = sys.stdin.read()
array = numpy.frombuffer(stdin, dtype='uint8')
img = cv2.imdecode(array, 1)
cv2.imshow("window", img)
cv2.waitKey()
</snippet></ROW><ROW><id>15417336</id><snippet>python -u test.py &lt; cat.jpeg
</snippet></ROW><ROW><id>15417646</id><snippet>pyplot.scatter([1, 2, 3], [4, 5, 6])
t = mpl.text.TextPath((2, 4), 'This is text', size=0.1)
pc = mpl.collections.PathCollection([t])
pc.set_urls(['http://www.google.com'])
ax = pyplot.gca()
ax.add_collection(pc)
pyplot.draw()
f = pyplot.gcf()
f.canvas.print_figure('fig.svg')
</snippet></ROW><ROW><id>15417646</id><snippet>set_urls</snippet></ROW><ROW><id>15417646</id><snippet>set_url</snippet></ROW><ROW><id>15417755</id><snippet>slice</snippet></ROW><ROW><id>15417755</id><snippet>e = a[3200:4121]
</snippet></ROW><ROW><id>15417755</id><snippet>step</snippet></ROW><ROW><id>15417755</id><snippet>e = a[3200:4121:1]
</snippet></ROW><ROW><id>15417755</id><snippet>e = a[3200:4121:2]
</snippet></ROW><ROW><id>15417755</id><snippet>lst[n:m]</snippet></ROW><ROW><id>15417755</id><snippet>n</snippet></ROW><ROW><id>15417755</id><snippet>m-1</snippet></ROW><ROW><id>15417915</id><snippet>float()</snippet></ROW><ROW><id>15417915</id><snippet>number = float(filename[7:-2])
</snippet></ROW><ROW><id>15417915</id><snippet>data_T_</snippet></ROW><ROW><id>15417915</id><snippet>.d</snippet></ROW><ROW><id>15417915</id><snippet>&gt;&gt;&gt; for example in ('data_T_1e-05.d', 'data_T_7.2434.d', 'data_T_0.001.d'):
...     print float(example[7:-2])
... 
1e-05
7.2434
0.001
</snippet></ROW><ROW><id>15417953</id><snippet>or</snippet></ROW><ROW><id>15417953</id><snippet>bool</snippet></ROW><ROW><id>15417953</id><snippet>or</snippet></ROW><ROW><id>15417953</id><snippet>&gt;&gt;&gt; def f():
...     return 1 or 2
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(f)
2           0 LOAD_CONST               1 (1) 
            3 JUMP_IF_TRUE_OR_POP      9 
            6 LOAD_CONST               2 (2) 
      &gt;&gt;    9 RETURN_VALUE         
</snippet></ROW><ROW><id>15417953</id><snippet>top = 1
if top:
     goto 9
else:
     del top
top = 2
label 9
return top
</snippet></ROW><ROW><id>15417953</id><snippet>ceval.c</snippet></ROW><ROW><id>15417953</id><snippet>JUMP_IF_TRUE_OR_POP</snippet></ROW><ROW><id>15417953</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>15417953</id><snippet>w = TOP()</snippet></ROW><ROW><id>15417953</id><snippet>or</snippet></ROW><ROW><id>15417953</id><snippet>if top</snippet></ROW><ROW><id>15417953</id><snippet>if top == False</snippet></ROW><ROW><id>15417953</id><snippet>if top == True</snippet></ROW><ROW><id>15417953</id><snippet>bool(top)</snippet></ROW><ROW><id>15417953</id><snippet>bool</snippet></ROW><ROW><id>15417953</id><snippet>DISPATCH</snippet></ROW><ROW><id>15417953</id><snippet>FAST_DISPATCH</snippet></ROW><ROW><id>15417953</id><snippet>or</snippet></ROW><ROW><id>15417953</id><snippet>or</snippet></ROW><ROW><id>15417953</id><snippet>True</snippet></ROW><ROW><id>15417953</id><snippet>False</snippet></ROW><ROW><id>15417953</id><snippet>or</snippet></ROW><ROW><id>15417953</id><snippet>True</snippet></ROW><ROW><id>15417953</id><snippet>False</snippet></ROW><ROW><id>15417953</id><snippet>if foo:</snippet></ROW><ROW><id>15417953</id><snippet>if foo == True:</snippet></ROW><ROW><id>15417953</id><snippet>if foo is True:</snippet></ROW><ROW><id>15417953</id><snippet>if foo != False:</snippet></ROW><ROW><id>15417953</id><snippet>or</snippet></ROW><ROW><id>15417953</id><snippet>bool</snippet></ROW><ROW><id>15417953</id><snippet>if</snippet></ROW><ROW><id>15417953</id><snippet>else</snippet></ROW><ROW><id>15417953</id><snippet>if</snippet></ROW><ROW><id>15417953</id><snippet>else</snippet></ROW><ROW><id>15417953</id><snippet>a or b</snippet></ROW><ROW><id>15417953</id><snippet>a if a else b</snippet></ROW><ROW><id>15418138</id><snippet>dict</snippet></ROW><ROW><id>15418138</id><snippet>__getitem__</snippet></ROW><ROW><id>15418138</id><snippet>dict</snippet></ROW><ROW><id>15418138</id><snippet>__setattr__</snippet></ROW><ROW><id>15418138</id><snippet>class Row(dict):
    def __init__(self, table, index, *args, **kw):
        self._table, self._index = table, index
        super(Row, self).__init__(*args, **kw)

    def __setitem__(self, key, value):
        super(Row, self).__setitem__(key, value)
        self._table.columns[key][self._index] = value
</snippet></ROW><ROW><id>15418138</id><snippet>dict</snippet></ROW><ROW><id>15418138</id><snippet>def getBufferRow(self, index):
   row = {}
   for key in self.columns:
       row[key] = self.columns[key][index]
   return Row(self, index, row)
</snippet></ROW><ROW><id>15418264</id><snippet>from datetime import datetime
if datetime.strptime(report['date'], '%m/%d/%Y') &gt; datetime.today():
    report["status"] = "due"
else:
    if report["result"]:
        report["status"] = "pending_check"
    else:
        report["status"] = "missing_result"
</snippet></ROW><ROW><id>15418264</id><snippet>%if report["status"] == "due":
    &lt;span class="ui-icon ui-icon-circle-close"&gt;&lt;/span&gt;
%elif report["status"] == "pending_check":
    &lt;span class="ui-icon ui-icon-circle-check"&gt;&lt;/span&gt;
%elif report["status"] == "missing_result":
      &lt;span class="ui-icon ui-icon-alert"&gt;&lt;/span&gt;
%end
</snippet></ROW><ROW><id>15418264</id><snippet>close</snippet></ROW><ROW><id>15418264</id><snippet>check</snippet></ROW><ROW><id>15418264</id><snippet>alert</snippet></ROW><ROW><id>15418264</id><snippet>report["status"]</snippet></ROW><ROW><id>15418304</id><snippet>import re

m = re.search(r"(NM_\d+)\s+range", name2)
if m:
   print(m.group(1))
</snippet></ROW><ROW><id>15418343</id><snippet># File: factories.py
from .models import Book
import factory

starting_seq_num = 0

class BookFactory(factory.Factory):
  FACTORY_FOR = BookModel  
  title = factory.Sequence(lambda n: u'Title #{}'.format(n))

  @classmethod
  def _setup_next_sequence(cls):      
      # Instead of defaulting to starting with 0, start with starting_seq_num.
      return starting_seq_num

# File: make_data.py
import factories

factories.starting_seq_num = 100    
factories.BookFactory().create()
</snippet></ROW><ROW><id>15418343</id><snippet># File: factories.py
from .models import Book
import factory

class BookFactory(factory.Factory):
  # Note that starting_seq_num cannot be set here in the class definition,
  # because Factory will then pass it as a kwarg to the model's create() method
  # and cause an exception.  It must be set outside the class definition.
  FACTORY_FOR = BookModel  
  title = factory.Sequence(lambda n: u'Title #{}'.format(n))

  @classmethod
  def _setup_next_sequence(cls):      
      return getattr(cls, 'starting_seq_num', 0)

# File: make_data.py
from factories import BookFactory

BookFactory.starting_seq_num = 100
BookFactory().create()
</snippet></ROW><ROW><id>15418468</id><snippet>ax.set_xlim( min(your_data) - 10, None )
</snippet></ROW><ROW><id>15418468</id><snippet>from collections import Counter
from pylab import *
data = randint(20,size=1000)
res = Counter(data)
vals = arange(20)
ax = gca()
ax.bar(vals-0.4, [ res[i] for i in vals ], width=0.8)
ax.set_xlim( min(data)-1, None )
show()
</snippet></ROW><ROW><id>15418468</id><snippet>ax.margins( margin_you_desire )
</snippet></ROW><ROW><id>15418468</id><snippet>ax.margins(0.01, None)
</snippet></ROW><ROW><id>15418485</id><snippet>Entry</snippet></ROW><ROW><id>15418485</id><snippet>User</snippet></ROW><ROW><id>15418485</id><snippet>pre_delete</snippet></ROW><ROW><id>15418485</id><snippet>post_save</snippet></ROW><ROW><id>15418485</id><snippet>def my_callback(sender, **kwargs):
    instance = kwargs.get('instance')
    # you can now reference instance.user
    # send email code here
</snippet></ROW><ROW><id>15418920</id><snippet>ohisc = list(hisc)
</snippet></ROW><ROW><id>15418920</id><snippet>list</snippet></ROW><ROW><id>15418920</id><snippet>ohisc = hisc[:]
</snippet></ROW><ROW><id>15418920</id><snippet>[]</snippet></ROW><ROW><id>15418945</id><snippet>&gt;&gt;&gt; chained = itertools.chain.from_iterable(sixbit)
&gt;&gt;&gt; [''.join(bits) for bits in itertools.izip(*[chained]*8)]
['00001100', '00010101', '00100001']
</snippet></ROW><ROW><id>15418945</id><snippet>chained</snippet></ROW><ROW><id>15418945</id><snippet>chained</snippet></ROW><ROW><id>15418945</id><snippet>itertools</snippet></ROW><ROW><id>15418945</id><snippet>&gt;&gt;&gt; chained = itertools.chain.from_iterable(sixbit)
&gt;&gt;&gt; list(chained)
['0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '1', '0', '1', '0', '1', '0', '0', '1', '0', '0', '0', '0', '1']
</snippet></ROW><ROW><id>15418945</id><snippet>[chained]*8</snippet></ROW><ROW><id>15418945</id><snippet>chained</snippet></ROW><ROW><id>15418945</id><snippet>*</snippet></ROW><ROW><id>15418945</id><snippet>izip</snippet></ROW><ROW><id>15418945</id><snippet>izip</snippet></ROW><ROW><id>15418945</id><snippet>&gt;&gt;&gt; chained = itertools.chain.from_iterable(sixbit)
&gt;&gt;&gt; list(itertools.izip(*[chained]*8))
[('0', '0', '0', '0', '1', '1', '0', '0'), ('0', '0', '0', '1', '0', '1', '0', '1'), ('0', '0', '1', '0', '0', '0', '0', '1')]
</snippet></ROW><ROW><id>15418945</id><snippet>&gt;&gt;&gt; chained = itertools.chain.from_iterable(sixbit)
&gt;&gt;&gt; [''.join(bits) for bits in itertools.izip(*[chained]*8)]
['00001100', '00010101', '00100001']
</snippet></ROW><ROW><id>15418982</id><snippet>A</snippet></ROW><ROW><id>15418982</id><snippet>B</snippet></ROW><ROW><id>15418982</id><snippet>A = array( [ (0.1,0.5,0.2,0.2), (0.2,0.5,0.1,0.2), (0.7,0.1,0.1,0.1) ] )
B = array( [ (1,2,3,4), (2,3,4,5), (3,4,5,6) ] )

tiled = tile (B, (3,1,1)).swapaxes (0,1)
all_results = A*tiled
</snippet></ROW><ROW><id>15418982</id><snippet>all_results</snippet></ROW><ROW><id>15418982</id><snippet>all_results[0]</snippet></ROW><ROW><id>15418982</id><snippet>all_results[1]</snippet></ROW><ROW><id>15418982</id><snippet>C, D, E = all_results</snippet></ROW><ROW><id>15418982</id><snippet>all_results = A[:, None, :] * B[None, :, :]
for i, res in enumerate (all_results):
    locals () ['result%d'%i] = res
</snippet></ROW><ROW><id>15418982</id><snippet>res1</snippet></ROW><ROW><id>15418982</id><snippet>res2</snippet></ROW><ROW><id>15419072</id><snippet># some fake data
data = randn(1000)
# evaluate the histogram
values, base = np.histogram(data, bins=40)
#evaluate the cumulative
cumulative = cumsum(values)
# plot the cumulative function
plot(base[:-1], cumulative)
#plot the survival function
plot(base[:-1], len(data)-cumulative)
</snippet></ROW><ROW><id>15419249</id><snippet>class Human(Player):
    def play_turn(self, board):
        print self.playernum
</snippet></ROW><ROW><id>15419249</id><snippet>play_turn</snippet></ROW><ROW><id>15419249</id><snippet>class Human(Player):
    def play_turn(self, board):
        super(Human, self).play_turn(board)
        print self.playernum
</snippet></ROW><ROW><id>15419297</id><snippet>def gatherStats(template_file, csv_file):
    for lang in getLanguageCodes(csv_file):
        lang_dir = os.path.join(template_file, lang)
        try:
            for filename in os.listdir(lang_dir):
                path = os.path.join(lang_dir, filename)
                if re.search(r'-.+-template-users-data.csv$',filename):
                    with open(path, 'rb') as template_user_data_file:
                        reader = csv.reader(template_user_data_file)
                        try:
                            for row in reader:
                                print row
                        except csv.ERROR as e:
                            logging.error(e)
                else:
                    print "didn't find the file"
        except Exception, e:
            logging.exception(e)
</snippet></ROW><ROW><id>15419343</id><snippet>8</snippet></ROW><ROW><id>15419343</id><snippet>9</snippet></ROW><ROW><id>15419494</id><snippet>import matplotlib.pyplot as plt

img = [[0.9, 0.3], [0.2, 0.1]]

cmap = plt.get_cmap('jet')

rgba_img = cmap(img)
rgb_img = np.delete(rgba_img, 3, 2)
</snippet></ROW><ROW><id>15419494</id><snippet>cmap</snippet></ROW><ROW><id>15419494</id><snippet>LinearSegmentedColormap</snippet></ROW><ROW><id>15419494</id><snippet>Colormap</snippet></ROW><ROW><id>15419494</id><snippet>__call__</snippet></ROW><ROW><id>15419494</id><snippet>Colormap</snippet></ROW><ROW><id>15419494</id><snippet>def __call__(self, X, alpha=None, bytes=False):
    """
    *X* is either a scalar or an array (of any dimension).
    If scalar, a tuple of rgba values is returned, otherwise
    an array with the new shape = oldshape+(4,). If the X-values
    are integers, then they are used as indices into the array.
    If they are floating point, then they must be in the
    interval (0.0, 1.0).
    Alpha must be a scalar between 0 and 1, or None.
    If bytes is False, the rgba values will be floats on a
    0-1 scale; if True, they will be uint8, 0-255.
    """
</snippet></ROW><ROW><id>15419494</id><snippet>img</snippet></ROW><ROW><id>15419494</id><snippet>plt.imshow</snippet></ROW><ROW><id>15419494</id><snippet>plt.matshow</snippet></ROW><ROW><id>15419734</id><snippet>class EditedAddress(models.Model):
    class Meta:
        verbose_name = 'Edited Address'
        verbose_name_plural = 'Edited Addresses'
</snippet></ROW><ROW><id>15420111</id><snippet>&lt;include/&gt;</snippet></ROW><ROW><id>15420111</id><snippet>includes</snippet></ROW><ROW><id>15420111</id><snippet>&lt;project name="test" default="clean"&gt;

    &lt;dirname property="build.dir" file="${ant.file.test}" /&gt;

    &lt;target name="clean"&gt;
        &lt;delete&gt;
            &lt;fileset dir="${build.dir}/test"&gt;
                &lt;include name="**/*,*.xml" /&gt;
            &lt;/fileset&gt;
        &lt;/delete&gt;
    &lt;/target&gt;

&lt;/project&gt;
</snippet></ROW><ROW><id>15420111</id><snippet>.</snippet></ROW><ROW><id>15420111</id><snippet>dir</snippet></ROW><ROW><id>15420111</id><snippet>build.xml</snippet></ROW><ROW><id>15420111</id><snippet>&lt;dirname/&gt;</snippet></ROW><ROW><id>15420111</id><snippet>.</snippet></ROW><ROW><id>15420111</id><snippet>&lt;delete dir="." includes="**/*.txt" /&gt;
&lt;!-- call clean target from build2.xml --&gt;
&lt;ant file="./subdir/build2.xml" target="clean"/&gt;
</snippet></ROW><ROW><id>15420111</id><snippet>&lt;delete dir="." includes="**/*.txt" /&gt;
</snippet></ROW><ROW><id>15420111</id><snippet>inheritAll="false"</snippet></ROW><ROW><id>15420111</id><snippet>.</snippet></ROW><ROW><id>15420242</id><snippet>16</snippet></ROW><ROW><id>15420242</id><snippet>/usr/include/limits.h</snippet></ROW><ROW><id>15420242</id><snippet>#define NGROUPS_MAX 16  /* max number of groups for a user */
</snippet></ROW><ROW><id>15420242</id><snippet>1024</snippet></ROW><ROW><id>15420242</id><snippet>getconf NGROUPS_MAX</snippet></ROW><ROW><id>15420260</id><snippet>news_item_obj.getImageCaption()
</snippet></ROW><ROW><id>15420299</id><snippet>['egrep', '-wi', '-nr', 'keyword1|keyword2|blabla', 'test/match_inside.txt']
</snippet></ROW><ROW><id>15420299</id><snippet>grep 'a|b|c' target.txt
</snippet></ROW><ROW><id>15420299</id><snippet>"'keyword1|keyword2|blabla'"
</snippet></ROW><ROW><id>15420299</id><snippet>'keyword1|keyword2|blabla'
</snippet></ROW><ROW><id>15420299</id><snippet>keyword1|keyword2|blabla
</snippet></ROW><ROW><id>15420502</id><snippet>encode</snippet></ROW><ROW><id>15420502</id><snippet>out = open(filename, 'w', encoding='utf8')
</snippet></ROW><ROW><id>15420502</id><snippet>csv</snippet></ROW><ROW><id>15420502</id><snippet>open()</snippet></ROW><ROW><id>15420502</id><snippet>locale.getpreferredencoding()</snippet></ROW><ROW><id>15420502</id><snippet>import csv
with open('some.csv', newline='', encoding='utf-8') as f:
    reader = csv.reader(f)
    for row in reader:
         print(row)
</snippet></ROW><ROW><id>15420589</id><snippet>index = pd.date_range('2012-01-01 00:00:00.25', 
                      '2012-01-01 00:00:04.25', freq='S')
</snippet></ROW><ROW><id>15420589</id><snippet>s.reindex(index, method='ffill')
                            data
2012-01-01 00:00:00.250000    12
2012-01-01 00:00:01.250000    45
2012-01-01 00:00:02.250000    56
2012-01-01 00:00:03.250000    89
2012-01-01 00:00:04.250000    12
</snippet></ROW><ROW><id>15420660</id><snippet>FILTER</snippet></ROW><ROW><id>15420660</id><snippet>&lt;http://fr.dbpedia.org/resource/OpÃ©ra&gt;</snippet></ROW><ROW><id>15420660</id><snippet>dbpedia-owl:abstract</snippet></ROW><ROW><id>15420660</id><snippet>PREFIX dbpp: &lt;http://dbpedia.org/property/&gt;
PREFIX dbpo: &lt;http://dbpedia.org/ontology/&gt;
PREFIX dbpr: &lt;http://dbpedia.org/resource/&gt;
SELECT ?wt ?summary ?source_url
WHERE {
    ?wt rdfs:label "OpÃ©ra"@fr .
    OPTIONAL { ?wt dbpedia-owl:abstract ?summary .
    filter (lang(?summary) = "fr" ) 
    }
    OPTIONAL { ?wt foaf:isPrimaryTopicOf ?source_url . }
}
</snippet></ROW><ROW><id>15420660</id><snippet>&lt;http://fr.dbpedia.org/resource/CatÃ©gorie:OpÃ©ra&gt;</snippet></ROW><ROW><id>15420716</id><snippet>employees.csv</snippet></ROW><ROW><id>15420716</id><snippet>name,age,weight,height
Bob Barker,25,175,6ft 2in
Ted Kingston,28,163,5ft 10in
Mary Manson,27,140,5ft 6in
Sue Sommers,27,132,5ft 8in
Alice Toklas,24,124,5ft 6in
</snippet></ROW><ROW><id>15420716</id><snippet>namedtuple</snippet></ROW><ROW><id>15420716</id><snippet>__dict__</snippet></ROW><ROW><id>15420716</id><snippet>record.fieldname</snippet></ROW><ROW><id>15420716</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>15420716</id><snippet>Person</snippet></ROW><ROW><id>15420716</id><snippet>employees</snippet></ROW><ROW><id>15420716</id><snippet>retrieve()</snippet></ROW><ROW><id>15420716</id><snippet>from collections import defaultdict, namedtuple
import csv

class DataBase(object):
    def __init__(self, csv_filename, recordname):
        with open(csv_filename, 'rb') as inputfile:
            csv_reader = csv.reader(inputfile, delimiter=',')
            self.fields = csv_reader.next()  # read header row
            self.Record = namedtuple(recordname, self.fields)
            self.records = [self.Record(*row) for row in csv_reader]
            self.valid_fieldnames = set(self.fields)

        # create a lookup table with one entry per field name which maps each of their
        # values to a list of the indices of matching records in records list
        self.lookup_table = {field: defaultdict(list) for field in self.fields}
        for index, record in enumerate(self.records):
            for field in self.fields:
                value = getattr(record, field)
                self.lookup_table[field][value].append(index)

    def retrieve(self, **kwargs):
        """ return list of records with a field name with value supplied
                   as keyword arg or None if there aren't any. """
        if len(kwargs) != 1:
            raise ValueError('Exactly one fieldname/keyword argument required for function '
                             '(%s specified)' % ', '.join([repr(k) for k in kwargs.keys()]))
        keyword, value = kwargs.items()[0]  # get only keyword arg and value
        if keyword not in self.valid_fieldnames:
            raise TypeError('%r is an invalid fieldname' % keyword)
        matches = [self.records[index]
                    for index in self.lookup_table[keyword].get(value, [])]
        return matches if matches else None

if __name__ == '__main__':
    empdb = DataBase('employees.csv', 'Person')
    print "retrieve(name='Ted Kingston'):", empdb.retrieve(name='Ted Kingston')
    print "retrieve(age='27'):", empdb.retrieve(age='27')
    print "retrieve(weight='150'):", empdb.retrieve(weight='150')
    try:
        print "retrieve(hight='5ft'):", empdb.retrieve(hight='5ft')
    except TypeError as e:
        print '{!r} raised as expected'.format(e)
    else:
        raise type('NoExceptionError', (Exception,), {})(
            'Expected TypeError not raised from "retrieve(hight=\'5ft\')" call.')
</snippet></ROW><ROW><id>15420716</id><snippet>retrieve(name='Ted Kingston'): [Person(name='Ted Kingston', age='28',
                                        weight='163', height='5ft 10in')]
retrieve(age='27'): [Person(name='Mary Manson', age='27', weight='140',
                      height='5ft 6in'), Person(name='Sue Sommers', age='27',
                      weight='132', height='5ft 8in')]
retrieve(weight='150'): None
retrieve(hight='5ft'): TypeError("'hight' is an invalid fieldname",) raised as expected
</snippet></ROW><ROW><id>15421066</id><snippet>import re
import csv
import itertools

line = next(f1)
coding = re.match('^#\s*coding\s*(:|=|:=)\s*([\w\d\-_]+)\s*$', line)
reader = csv.reader(itertools.chain([line], f1))
</snippet></ROW><ROW><id>15421066</id><snippet>reader = csv.reader(f1 if coding else itertools.chain([line], f1))
</snippet></ROW><ROW><id>15421141</id><snippet>kind</snippet></ROW><ROW><id>15421141</id><snippet>for type_tuple in FEED_TYPES:
    kind, name = type_tuple
    def make_notify(kind):
        def notify(self, **kwargs):
            print "notifying %s" % kind
            self.create(kind, **kwargs)
        return notify
    notify = make_notify(kind)
    notify.__name__ = "notify_%s" % kind
    setattr(cls, notify.__name__, classmethod(notify))
</snippet></ROW><ROW><id>15421141</id><snippet>type</snippet></ROW><ROW><id>15421141</id><snippet>Feed</snippet></ROW><ROW><id>15421141</id><snippet>Feed</snippet></ROW><ROW><id>15421141</id><snippet>FEED_TYPES = [
    ('fan_mail',     'Fan Mail'),
    ('review',       'Review'),
    ('tip',          'Tip'),
    ('fan_user',     'Fan User'),
    ('fan_song',     'Fan Song'),
    ('fan_album',    'Fan Album'),
    ('played_song',  'Played Song'),
    ('played_album', 'Played Album'),
    ('played_radio', 'Played Radio'),
    ('new_event',    'New Event'),
]

def add_feed_types(cls):
    for type_tuple in FEED_TYPES:
        kind, name = type_tuple
        def make_notify(kind):
            def notify(self, **kwargs):
                print "notifying %s" % kind
                self.create(kind, **kwargs)
            return notify
        notify = make_notify(kind)
        notify.__name__ = "notify_%s" % kind
        setattr(cls, notify.__name__, classmethod(notify))
    return cls

@add_feed_types
class Feed:
    @classmethod
    def do_create(cls, **kwargs):
        print kwargs

    @classmethod
    def create(cls, kind, **kwargs):
        kwargs['feed_type'] = kind
        cls.do_create(**kwargs)


Feed.create("FanMail", to_profile="Gerson", from_profile="Felipe")
Feed.notify_fan_mail(to_profile="Gerson2", from_profile="Felipe2")
</snippet></ROW><ROW><id>15421203</id><snippet>word1|word2|[^a-z]*</snippet></ROW><ROW><id>15421224</id><snippet>def letter_grade(score):    
    if score &lt; 60:
        print 'The grade is E'
    elif score &lt; 70:
        print 'The grade is D'
    elif score &lt; 80:
        print 'The grade is C'
    elif score &lt; 90:
        print 'The grade is B'
    else:
        print 'The grade is A' 
    return score


score = int(raw_input('Enter your test score: '))
letter_grade(score)
</snippet></ROW><ROW><id>15421224</id><snippet>raw_input</snippet></ROW><ROW><id>15421224</id><snippet>input</snippet></ROW><ROW><id>15421224</id><snippet>def letter_grade(score):    
    if score &lt; 60:
        return 'E'
    elif score &lt; 70:
        return 'D'
    ... and so on



score = int(raw_input('Enter your test score: '))
print "The grade is {}".format(letter_grade(score))
</snippet></ROW><ROW><id>15421224</id><snippet>format</snippet></ROW><ROW><id>15421224</id><snippet>list</snippet></ROW><ROW><id>15421224</id><snippet>list_of_scores = range(50, 100, 5)  # a list of scores [50, 55, 60, 65, 70, 75, 80, 85, 90, 95]
for score in list_of_scores:
    print "The grade is {}".format(letter_grade(score))
</snippet></ROW><ROW><id>15421396</id><snippet>site-packages</snippet></ROW><ROW><id>15421396</id><snippet>include-site-packages = false
</snippet></ROW><ROW><id>15421396</id><snippet>include-site-packages</snippet></ROW><ROW><id>15421396</id><snippet>true</snippet></ROW><ROW><id>15421396</id><snippet>include-site-packages = true
allowed-eggs-from-site-packages = jinja2,mako
</snippet></ROW><ROW><id>15421396</id><snippet>jinja2</snippet></ROW><ROW><id>15421396</id><snippet>mako</snippet></ROW><ROW><id>15421396</id><snippet>allowed-eggs-from-site-packages</snippet></ROW><ROW><id>15421396</id><snippet>*</snippet></ROW><ROW><id>15421586</id><snippet>defaults</snippet></ROW><ROW><id>15421586</id><snippet>{'instid': None}</snippet></ROW><ROW><id>15421586</id><snippet>get()</snippet></ROW><ROW><id>15421586</id><snippet>instid</snippet></ROW><ROW><id>15421586</id><snippet>/contact</snippet></ROW><ROW><id>15421586</id><snippet>/contact/1</snippet></ROW><ROW><id>15421586</id><snippet>&lt;int:instid&gt;</snippet></ROW><ROW><id>15421586</id><snippet>defaults</snippet></ROW><ROW><id>15421586</id><snippet>add_url_rule()</snippet></ROW><ROW><id>15421586</id><snippet>from xxx import ContactAPI
from xxx.models import Contact

# self.app is my Flask app
# self.session is SQLAlchemy Session

api_name = 'contact'
instance_endpoint = '/%s/&lt;int:instid&gt;' % api_name
collection_endpoint = '/%s' % api_name

methods = ['GET']

api_view = ContactAPI.as_view(api_name, self.session,
                              Contact, app)

self.app.add_url_rule(instance_endpoint, methods=methods, 
                      view_func=api_view)

self.app.add_url_rule(collection_endpoint, methods=methods, 
                      defaults={'instid': None},
                      view_func=api_view)
</snippet></ROW><ROW><id>15421586</id><snippet>asdf</snippet></ROW><ROW><id>15421617</id><snippet>count = 1
i = 3
while count != 1000:
    if i%2 != 0:
       for k in range(2,i):
          if i%k == 0:        # 'i' is _not_ a prime!
            print(i)       # ??
            count += 1     # ??
            break
     i += 1          # should be one space to the left,
                     # for proper indentation
</snippet></ROW><ROW><id>15421617</id><snippet>i%k==0</snippet></ROW><ROW><id>15421617</id><snippet>i</snippet></ROW><ROW><id>15421617</id><snippet>for</snippet></ROW><ROW><id>15421617</id><snippet>i%2</snippet></ROW><ROW><id>15421617</id><snippet>2</snippet></ROW><ROW><id>15421617</id><snippet>3</snippet></ROW><ROW><id>15421617</id><snippet>count = 1
i = 3
while count != 1000:
    for k in range(2,i):
        if i%k == 0:       
            break
    else:
        print(i)
        count += 1
    i += 2        
</snippet></ROW><ROW><id>15421617</id><snippet>else</snippet></ROW><ROW><id>15421617</id><snippet>for</snippet></ROW><ROW><id>15421617</id><snippet>for</snippet></ROW><ROW><id>15421617</id><snippet>n == p*q</snippet></ROW><ROW><id>15421617</id><snippet>p</snippet></ROW><ROW><id>15421617</id><snippet>q</snippet></ROW><ROW><id>15421617</id><snippet>1</snippet></ROW><ROW><id>15421617</id><snippet>n</snippet></ROW><ROW><id>15421617</id><snippet>p</snippet></ROW><ROW><id>15421617</id><snippet>q</snippet></ROW><ROW><id>15421617</id><snippet>n</snippet></ROW><ROW><id>15421617</id><snippet>n</snippet></ROW><ROW><id>15421617</id><snippet>from math import sqrt

count = 1
i = 1
while count &lt; 1000:
    i += 2
    for k in range(2, 1+int(sqrt(i+1))):
        if i%k == 0:       
            break
    else:
        # print(i) ,
        count += 1
        # if count%20==0: print ""
print i
</snippet></ROW><ROW><id>15421617</id><snippet>range(2,i)</snippet></ROW><ROW><id>15421617</id><snippet>sqrt</snippet></ROW><ROW><id>15421617</id><snippet>~ n&lt;sup&gt;2.1...2.2&lt;/sup&gt;</snippet></ROW><ROW><id>15421617</id><snippet>~ n&lt;sup&gt;1.5&lt;/sup&gt;</snippet></ROW><ROW><id>15421617</id><snippet>~ n&lt;sup&gt;1.3&lt;/sup&gt;</snippet></ROW><ROW><id>15421617</id><snippet>~ n&lt;sup&gt;1.1&lt;/sup&gt;</snippet></ROW><ROW><id>15421617</id><snippet>n</snippet></ROW><ROW><id>15421617</id><snippet>from math import log

count = 1 ; i = 1 ; D = {}
n = 100000                        # 20k:0.20s 
m = int(n*(log(n)+log(log(n))))   # 100k:1.15s 200k:2.36s-7.8M 
while count &lt; n:                  #            400k:5.26s-8.7M 
        i += 2                    #            800k:11.21-7.8M 
        if i not in D:            #            1mln:13.20-7.8M (n^1.1)
            count += 1
            k = i*i
            if k &gt; m:  break      # break, when all is already marked
            while k &lt;= m:
                D[k] = 0 
                k += 2*i
while count &lt; n:
        i += 2
        if i not in D: count += 1
if i &gt;= m: print "invalid: top value estimate too small",i,m ; error
print i,m  
</snippet></ROW><ROW><id>15421619</id><snippet>filter()</snippet></ROW><ROW><id>15421619</id><snippet>reduce()</snippet></ROW><ROW><id>15421619</id><snippet>lambda x: isPrime(x)</snippet></ROW><ROW><id>15421619</id><snippet>isPrime</snippet></ROW><ROW><id>15421619</id><snippet>isPrime</snippet></ROW><ROW><id>15421619</id><snippet>isPrime</snippet></ROW><ROW><id>15421619</id><snippet>[range(200)]</snippet></ROW><ROW><id>15421619</id><snippet>print filter(isPrime, range(200))
</snippet></ROW><ROW><id>15421717</id><snippet>stretch</snippet></ROW><ROW><id>15421717</id><snippet>SplitItem</snippet></ROW><ROW><id>15421717</id><snippet>stretch = 3</snippet></ROW><ROW><id>15421717</id><snippet>stretch = 1</snippet></ROW><ROW><id>15422095</id><snippet>[t for t in list_of_tuples if t[1] == n or t[2] == n]
</snippet></ROW><ROW><id>15422155</id><snippet>.splitlines()</snippet></ROW><ROW><id>15422155</id><snippet>for line in textData.splitlines():
    print(line)
    lineResult = libLAPFF.parseLine(line)
</snippet></ROW><ROW><id>15422205</id><snippet>bind</snippet></ROW><ROW><id>15422205</id><snippet>send</snippet></ROW><ROW><id>15422458</id><snippet>Model</snippet></ROW><ROW><id>15422458</id><snippet>ModelBase</snippet></ROW><ROW><id>15422458</id><snippet>six.with_metaclass</snippet></ROW><ROW><id>15422458</id><snippet>Parent</snippet></ROW><ROW><id>15422458</id><snippet>Child</snippet></ROW><ROW><id>15422458</id><snippet>def with_metaclass(meta, base=object):
    """Create a base class with a metaclass."""
    return meta("NewBase", (base,), {})

class ParentBase(type):
    def __new__(cls, name, base, attrs):
        meta = attrs.pop('Meta', None)
        new_class = super(ParentBase, cls).__new__(cls, name, base, attrs)
        new_class.fun = getattr(meta, 'funtime', None)
        return new_class

class Parent(with_metaclass(ParentBase)):
    pass

class Child(Parent):
    class Meta:
       funtime = 'yaaay'

c = Child()

&gt;&gt;&gt; c.fun
'yaaay'
</snippet></ROW><ROW><id>15422458</id><snippet>Parent</snippet></ROW><ROW><id>15422458</id><snippet>NewBase = ParentBase("NewBase", (object,), {})
class Parent(NewBase):
    pass
</snippet></ROW><ROW><id>15422458</id><snippet>ParentBase("NewBase", (object,), {})</snippet></ROW><ROW><id>15422458</id><snippet>type()</snippet></ROW><ROW><id>15422458</id><snippet>ParentBase</snippet></ROW><ROW><id>15422458</id><snippet>type</snippet></ROW><ROW><id>15422458</id><snippet>ParentBase("NewBase", (object,), {})</snippet></ROW><ROW><id>15422458</id><snippet>type("NewBase", (object,), {})</snippet></ROW><ROW><id>15422458</id><snippet>type</snippet></ROW><ROW><id>15422458</id><snippet>ParentBase</snippet></ROW><ROW><id>15422458</id><snippet>NewBase</snippet></ROW><ROW><id>15422458</id><snippet>ParentBase</snippet></ROW><ROW><id>15422458</id><snippet>Parent</snippet></ROW><ROW><id>15422458</id><snippet>class NewBase(object):
    __metaclass__ = ParentBase

class Parent(NewBase):
    pass
</snippet></ROW><ROW><id>15422458</id><snippet>__metaclass__</snippet></ROW><ROW><id>15422591</id><snippet>from dateutil.parser import parse
date = 'Thu, 14 Mar 2013 13:33:07 -0400'
parse(date).strftime("%Y-%m-%d %H:%M:%S")
</snippet></ROW><ROW><id>15422703</id><snippet>import os
from setuptools import setup, find_packages
here = os.path.abspath(os.path.dirname(__file__))

install_requires = [
    'pyramid',
    'pyramid_debugtoolbar',
    'waitress',
    'requests',
    'gunicorn',
    'mongoengine',
    ]

test_requires = [
    'mock',
    'nose',
    ]

setup(name='repoapi',
      ...
      install_requires=install_requires,
      tests_require=test_requires,
      test_suite="nose.collector",
      ...
      )
</snippet></ROW><ROW><id>15422703</id><snippet>$ python setup.py test
</snippet></ROW><ROW><id>15422732</id><snippet>&gt;&gt;&gt; command = 'foo'
&gt;&gt;&gt; command == "Quit" or "quit" or "Q" or "q"
'quit'
</snippet></ROW><ROW><id>15422732</id><snippet>or</snippet></ROW><ROW><id>15422732</id><snippet>False</snippet></ROW><ROW><id>15422732</id><snippet>((((command == "Quit") or "quit") or "Q") or "q")
</snippet></ROW><ROW><id>15422732</id><snippet>command</snippet></ROW><ROW><id>15422732</id><snippet>"Quit"</snippet></ROW><ROW><id>15422732</id><snippet>(((False or "quit") or "Q") or "q")
</snippet></ROW><ROW><id>15422732</id><snippet>"quit"</snippet></ROW><ROW><id>15422732</id><snippet>in</snippet></ROW><ROW><id>15422732</id><snippet>def process(self, command):
    return command in ("Quit","quit","Q","q")
</snippet></ROW><ROW><id>15422732</id><snippet>set</snippet></ROW><ROW><id>15422862</id><snippet>- url: /assets
  static_dir: templates/assets
</snippet></ROW><ROW><id>15422862</id><snippet>http://localhost:8090/assets/css/bootstrap.css</snippet></ROW><ROW><id>15422862</id><snippet>templates/assets/css/bootstrap.css</snippet></ROW><ROW><id>15422862</id><snippet>/</snippet></ROW><ROW><id>15422862</id><snippet>/page1</snippet></ROW><ROW><id>15422983</id><snippet>import gtk</snippet></ROW><ROW><id>15422983</id><snippet>pygtk.require</snippet></ROW><ROW><id>15422983</id><snippet>Fatal Python error: PyThreadState_Get: no current thread</snippet></ROW><ROW><id>15422983</id><snippet>pygtk</snippet></ROW><ROW><id>15422983</id><snippet>gtk</snippet></ROW><ROW><id>15422983</id><snippet>pygtk</snippet></ROW><ROW><id>15422983</id><snippet>brew</snippet></ROW><ROW><id>15422983</id><snippet>pygtk</snippet></ROW><ROW><id>15422983</id><snippet>$ brew info pygtk
pygtk: stable 2.24.0
...
==&gt; Caveats
For non-Homebrew Python, you need to amend your PYTHONPATH like so:
  export PYTHONPATH=/usr/local/lib/python2.7/site-packages:$PYTHONPATH
</snippet></ROW><ROW><id>15422983</id><snippet>pip</snippet></ROW><ROW><id>15422983</id><snippet>brew</snippet></ROW><ROW><id>15422983</id><snippet>python</snippet></ROW><ROW><id>15422983</id><snippet>which python</snippet></ROW><ROW><id>15422983</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>15422983</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>15422983</id><snippet>virtualenv</snippet></ROW><ROW><id>15422983</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>15422983</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>15422983</id><snippet>PATH</snippet></ROW><ROW><id>15422983</id><snippet>pip</snippet></ROW><ROW><id>15422983</id><snippet>idle</snippet></ROW><ROW><id>15422983</id><snippet>python</snippet></ROW><ROW><id>15423018</id><snippet>def nonconsecutive_combinations(r, n):
  # first combination, startng at 1, step-size 2
  combination = range(1, r*2, 2)
  # as long as all items are less than or equal to n
  while combination[r-1] &lt;= n:
    yield tuple(combination)
    p = r-1 # pointer to the element we will increment
    a = 1   # number that will be added to the last element
    # find the rightmost element we can increment without
    # making the last element bigger than n
    while p &gt; 0 and combination[p] + a &gt; n:
      p -= 1
      a += 2
    # increment the item and
    # fill the tail of the list with increments of two
    combination[p:] = range(combination[p]+1, combination[p] + 2*(r-p), 2)
</snippet></ROW><ROW><id>15423018</id><snippet>next()</snippet></ROW><ROW><id>15423018</id><snippet>&gt; list(nonconsecutive_combinations(2, 4))
[(1, 3), (1, 4), (2, 4)]
&gt; list(nonconsecutive_combinations(3, 6))
[(1, 3, 5), (1, 3, 6), (1, 4, 6), (2, 4, 6)]
</snippet></ROW><ROW><id>15423018</id><snippet>c</snippet></ROW><ROW><id>15423018</id><snippet>r</snippet></ROW><ROW><id>15423018</id><snippet>c[x] &gt;= c[x-1] + 2</snippet></ROW><ROW><id>15423018</id><snippet>n</snippet></ROW><ROW><id>15423018</id><snippet>n</snippet></ROW><ROW><id>15423018</id><snippet>c[r-1] &lt;= n</snippet></ROW><ROW><id>15423018</id><snippet>(1, 3, 5, ..., 2*r-1)</snippet></ROW><ROW><id>15423018</id><snippet>combination = range(1, r*2, 2)
while combination[r-1] &lt;= n:
</snippet></ROW><ROW><id>15423018</id><snippet>yield tuple(combination)
</snippet></ROW><ROW><id>15423018</id><snippet>while</snippet></ROW><ROW><id>15423018</id><snippet># we don't actually do this:
combination[r-1] += 1
</snippet></ROW><ROW><id>15423018</id><snippet># if above does not work
combination[r-2] += 1
combination[r-1]  = combination[r-2] + 2
</snippet></ROW><ROW><id>15423018</id><snippet>a</snippet></ROW><ROW><id>15423018</id><snippet>p</snippet></ROW><ROW><id>15423018</id><snippet>p = r-1
a = 1
while p &gt; 0 and combination[p] + a &gt; n:
  p -= 1
  a += 2
</snippet></ROW><ROW><id>15423018</id><snippet>2*x</snippet></ROW><ROW><id>15423018</id><snippet>x</snippet></ROW><ROW><id>15423018</id><snippet>combination[p:] = range(combination[p]+1, combination[p] + 2*(r-p), 2)
</snippet></ROW><ROW><id>15423026</id><snippet>point.x, point.y, point.z = (14, 22, 30)
# Tuple unpacking ... is there nothing it cannot do?
</snippet></ROW><ROW><id>15423026</id><snippet>__setitem__</snippet></ROW><ROW><id>15423026</id><snippet>def __setitem__(self, key, value):
    if isinstance(key, tuple):
        for k, v in zip(key, value):
            setattr(self, k, v)
    else:
        setattr(self, key, value)
</snippet></ROW><ROW><id>15423026</id><snippet>point['x', 'y', 'z'] = (14, 22, 30)
</snippet></ROW><ROW><id>15423026</id><snippet>getprops</snippet></ROW><ROW><id>15423026</id><snippet>__getitem__</snippet></ROW><ROW><id>15423026</id><snippet>x, y, z = point['x', 'y', 'z']
</snippet></ROW><ROW><id>15423119</id><snippet>np_choozer</snippet></ROW><ROW><id>15423119</id><snippet>my_1D_array.reshape(-1,1)</snippet></ROW><ROW><id>15423180</id><snippet>if n == 1: return 1</snippet></ROW><ROW><id>15423180</id><snippet>n * factorial(n-1)</snippet></ROW><ROW><id>15423180</id><snippet>n-1</snippet></ROW><ROW><id>15423180</id><snippet>def factorial(n): # only works for positive numbers
    if n == 1: return 1 # base case
    return n * factorial(n-1) # recursive case; only executed if the above is not
                              # executed because 'return' stops a function
</snippet></ROW><ROW><id>15423180</id><snippet>n</snippet></ROW><ROW><id>15423180</id><snippet>factorial(4)</snippet></ROW><ROW><id>15423180</id><snippet>n</snippet></ROW><ROW><id>15423180</id><snippet>return n * factorial(n-1)</snippet></ROW><ROW><id>15423180</id><snippet>4 * factorial(4-1)</snippet></ROW><ROW><id>15423180</id><snippet>4 * factorial(3)</snippet></ROW><ROW><id>15423180</id><snippet>n</snippet></ROW><ROW><id>15423180</id><snippet>return n * factorial(n-1)</snippet></ROW><ROW><id>15423180</id><snippet>3 * factorial(3-1)</snippet></ROW><ROW><id>15423180</id><snippet>3 * factorial(2)</snippet></ROW><ROW><id>15423180</id><snippet>n</snippet></ROW><ROW><id>15423180</id><snippet>return n * factorial(n-1)</snippet></ROW><ROW><id>15423180</id><snippet>2 * factorial(2-1) =</snippet></ROW><ROW><id>15423180</id><snippet>n</snippet></ROW><ROW><id>15423180</id><snippet>return 1</snippet></ROW><ROW><id>15423180</id><snippet>factorial(4) = 4 * factorial(3)</snippet></ROW><ROW><id>15423180</id><snippet>factorial(3) = 3 * factorial(2)</snippet></ROW><ROW><id>15423180</id><snippet>factorial(2) = 2 * factorial(1)</snippet></ROW><ROW><id>15423180</id><snippet>factorial(1) = 1</snippet></ROW><ROW><id>15423180</id><snippet>return</snippet></ROW><ROW><id>15423248</id><snippet>strarray = [['08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08'],
        ['49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00'],
        ['81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65'],
        ...]
numaarray = [map(int, subL[0].split()) for subL in strarray]
</snippet></ROW><ROW><id>15423377</id><snippet>struct</snippet></ROW><ROW><id>15423377</id><snippet>int</snippet></ROW><ROW><id>15423377</id><snippet>import os
import numpy as np
from ctypes import *

open('tmp.c', 'w').write('''\
typedef struct {
    int v1; double *v2;
} darray;
int test(darray *input, darray *output) {
    int i;
    /* note: this should first test for compatible size */
    for (i=0; i &lt; input-&gt;v1; i++)
        *(output-&gt;v2 + i) = *(input-&gt;v2 + i) * 2;
    return 0;
}
''')
os.system('gcc -shared -o tmp.so tmp.c')
</snippet></ROW><ROW><id>15423377</id><snippet>classmethod</snippet></ROW><ROW><id>15423377</id><snippet>darray</snippet></ROW><ROW><id>15423377</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>15423377</id><snippet>c_double_p = POINTER(c_double)

class darray(Structure):
    _fields_ = [
      ('v1', c_int),
      ('v2', c_double_p),
    ]
    @classmethod
    def fromnp(cls, a):
        return cls(len(a), a.ctypes.data_as(c_double_p))

lib = CDLL('./tmp.so')
lib.test.argtypes = POINTER(darray), POINTER(darray)
</snippet></ROW><ROW><id>15423377</id><snippet>a1 = np.arange(3) + 1.0
a2 = np.zeros(3)
print 'before:', '\na1 =', a1, '\na2 =', a2 

lib.test(darray.fromnp(a1), darray.fromnp(a2))
print 'after:', '\na1 =', a1, '\na2 =', a2 
</snippet></ROW><ROW><id>15423377</id><snippet>before: 
a1 = [ 1.  2.  3.] 
a2 = [ 0.  0.  0.]
after: 
a1 = [ 1.  2.  3.] 
a2 = [ 2.  4.  6.]
</snippet></ROW><ROW><id>15423715</id><snippet>&lt;form id="wwmform" name="wwmform" method="get" action="http://web.archive.org/form-submit.jsp" onsubmit="document.location.href='http://web.archive.org/web/*/'+document.getElementById('wwmurl').value;return false;" style="display:inline;"&gt;
      &lt;input id="wwmurl" type="text" name="url" size="50" value="http://"&gt;
      &lt;button type="submit" name="type" value="urlquery" class="roundbox5"&gt;Take Me Back&lt;/button&gt;
    &lt;/form&gt;
</snippet></ROW><ROW><id>15423715</id><snippet>urllib</snippet></ROW><ROW><id>15423715</id><snippet>urllib2</snippet></ROW><ROW><id>15423715</id><snippet>onsubmit</snippet></ROW><ROW><id>15423799</id><snippet>In [1]:
%load_ext cythonmagic

In [2]:
%%cython
cimport numpy as np

np.import_array()

def to_c_contiguous(np.ndarray a):
    cdef np.ndarray new
    cdef int dim, i
    new = a.copy()
    dim = np.PyArray_NDIM(new)
    for i in range(dim):
        np.PyArray_STRIDES(a)[i] = np.PyArray_STRIDES(new)[i]
    a.data = new.data
    np.PyArray_UpdateFlags(a, np.NPY_C_CONTIGUOUS)
    np.set_array_base(a, new)

In [8]:
import sys
import numpy as np
a = np.random.rand(10, 10, 10)
b = c = a[::2, 1::3, 2::4]
d = a[::2, 1::3, 2::4]
print sys.getrefcount(a)
to_c_contiguous(b)
print sys.getrefcount(a)
print np.all(b==d)
</snippet></ROW><ROW><id>15423799</id><snippet>4
3
True
</snippet></ROW><ROW><id>15423799</id><snippet>to_c_contiguous(a)</snippet></ROW><ROW><id>15423799</id><snippet>a</snippet></ROW><ROW><id>15423799</id><snippet>a</snippet></ROW><ROW><id>15423799</id><snippet>to_c_contiguous(b)</snippet></ROW><ROW><id>15423846</id><snippet>def get_nodes(l):
    # Recursion base
    if l is None: return ([], [])
    if l.children is None: return ([], [l])

    # Recursion step
    this = ([l], [])
    internal, leaf = get_nodes(l.children.left)
    this[0] += internal
    this[1] += leaf

    internal, leaf = get_nodes(l.children.right)
    this[0] += internal
    this[1] += leaf

    return this
</snippet></ROW><ROW><id>15423867</id><snippet>import re
pattern = re.compile(r'^(?:[^"/\\]|\"(?:[^\"\\]|\\.)*\"|/(?:[^/"\\]|\\.)|/\"(?:[^\"\\]|\\.)*\"|\\.)*//(.*)$')
</snippet></ROW><ROW><id>15423867</id><snippet>import re

pattern = re.compile(r'^(?:[^"/\\]|\"(?:[^\"\\]|\\.)*\"|/(?:[^/"\\]|\\.)|/\"(?:[^\"\\]|\\.)*\"|\\.)*//(.*)$')

tests = [
    (r'// hello world', True),
    (r'     // hello world', True),
    (r'hello world', False),
    (r'System.out.println("Hello, World!\n"); // prints hello world', True),
    (r'String url = "http://www.example.com"', False),
    (r'// hello world', True),
    (r'//\\', True),
    (r'// "some comment"', True),
    (r'new URI("http://www.google.com")', False),
    (r'System.out.println("Escaped quote\""); // Comment', True)
]

tests_passed = 0

for test in tests:
    match = pattern.match(test[0])
    has_comment = match != None
    if has_comment == test[1]:
        tests_passed += 1

print "Passed {0}/{1} tests".format(tests_passed, len(tests))
</snippet></ROW><ROW><id>15423960</id><snippet>csv</snippet></ROW><ROW><id>15423960</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-
import csv

import sip
sip.setapi('QString', 2)
sip.setapi('QVariant', 2)

from PyQt4 import QtGui, QtCore

class MyWindow(QtGui.QWidget):
    def __init__(self, fileName, parent=None):
        super(MyWindow, self).__init__(parent)
        self.fileName = fileName

        self.model = QtGui.QStandardItemModel(self)

        self.tableView = QtGui.QTableView(self)
        self.tableView.setModel(self.model)
        self.tableView.horizontalHeader().setStretchLastSection(True)

        self.pushButtonLoad = QtGui.QPushButton(self)
        self.pushButtonLoad.setText("Load Csv File!")
        self.pushButtonLoad.clicked.connect(self.on_pushButtonLoad_clicked)

        self.pushButtonWrite = QtGui.QPushButton(self)
        self.pushButtonWrite.setText("Write Csv File!")
        self.pushButtonWrite.clicked.connect(self.on_pushButtonWrite_clicked)

        self.layoutVertical = QtGui.QVBoxLayout(self)
        self.layoutVertical.addWidget(self.tableView)
        self.layoutVertical.addWidget(self.pushButtonLoad)
        self.layoutVertical.addWidget(self.pushButtonWrite)

    def loadCsv(self, fileName):
        with open(fileName, "rb") as fileInput:
            for row in csv.reader(fileInput):    
                items = [
                    QtGui.QStandardItem(field)
                    for field in row
                ]
                self.model.appendRow(items)

    def writeCsv(self, fileName):
        with open(fileName, "wb") as fileOutput:
            writer = csv.writer(fileOutput)
            for rowNumber in range(self.model.rowCount()):
                fields = [
                    self.model.data(
                        self.model.index(rowNumber, columnNumber),
                        QtCore.Qt.DisplayRole
                    )
                    for columnNumber in range(self.model.columnCount())
                ]
                writer.writerow(fields)

    @QtCore.pyqtSlot()
    def on_pushButtonWrite_clicked(self):
        self.writeCsv(self.fileName)

    @QtCore.pyqtSlot()
    def on_pushButtonLoad_clicked(self):
        self.loadCsv(self.fileName)

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('MyWindow')

    main = MyWindow("/path/to/MyFile.csv")
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>15424008</id><snippet>foreach (var filePath in File.ReadAllLines(indexFile))
{
    if (File.Exists(filePath))
    {
        var destinationPath = Path.Combine(destinationRoot, Path.GetFileName(filePath));
        File.Copy(filePath, destinationPath);
    }
}
</snippet></ROW><ROW><id>15424025</id><snippet>from visual import *
myell = ellipsoid(pos=(x0,y0,z0), length=L, height=H, width=W) 
</snippet></ROW><ROW><id>15424025</id><snippet>ball = sphere(pos=(1,2,1), radius=0.5)
</snippet></ROW><ROW><id>15424166</id><snippet>content = '''\
&lt;h2&gt;
&lt;a href="http://smittenkitchen.com/blog/2008/10/mollys-apple-tarte-tatin/" 
rel="bookmark" 
title="permanent link to mollyâs apple tarte tatin"&gt;
mollyâs apple tarte tatin&lt;/a&gt;
&lt;/h2&gt;'''
</snippet></ROW><ROW><id>15424166</id><snippet>import lxml.html as LH
root = LH.fromstring(content)
atag = root.find('a')
print(repr(atag.attrib['title']))
</snippet></ROW><ROW><id>15424166</id><snippet>import bs4 as bs
soup = bs.BeautifulSoup(content)
atag = soup.find('a')
print(repr(atag.attrs['title']))
</snippet></ROW><ROW><id>15424166</id><snippet>import BeautifulSoup as bs
soup = bs.BeautifulSoup(content)
atag = soup.find('a')
print(repr(atag['title']))
</snippet></ROW><ROW><id>15424166</id><snippet>u'permanent link to molly\u2019s apple tarte tatin'
</snippet></ROW><ROW><id>15424246</id><snippet>def _handler_helper():
   def fna():
      print "a" 
      pass

   def fnb():
      print "b" 
      pass

   m = {"a":fna,"b":fnb}
   return lambda x:m[x]

get_handler_by_type = _handler_helper()
</snippet></ROW><ROW><id>15424246</id><snippet>def</snippet></ROW><ROW><id>15424246</id><snippet>class _HandlerHelper:
   def fna(self):
       print 'a'

   def fnb(self):
       print 'b'

   # __call__ is a magic method which lets you treat the object as a function
   def __call__(self, fn):
       return getattr(self, 'fn' + fn)

get_handler_by_type = _HandlerHelper()
</snippet></ROW><ROW><id>15424485</id><snippet>(6.12303176911e-17+1j)
</snippet></ROW><ROW><id>15424485</id><snippet>6.12303176911e-17</snippet></ROW><ROW><id>15424485</id><snippet>0.0000000000000000612303176911</snippet></ROW><ROW><id>15424528</id><snippet>MODULE: &lt;module 'json_myobj' from '/Users/dhellmann/Documents/PyMOTW/src/PyMOTW/json/json_myobj.pyc'&gt;
</snippet></ROW><ROW><id>15424764</id><snippet>xargs</snippet></ROW><ROW><id>15424764</id><snippet>echo</snippet></ROW><ROW><id>15424764</id><snippet>xargs</snippet></ROW><ROW><id>15424933</id><snippet>csvfile = open('file.csv', 'rb')
csvreader = csv.reader(csvfile, delimiter = ',')
for row in csvreader:
    thisVariable = row[0]
</snippet></ROW><ROW><id>15424933</id><snippet>csvfile = open('file.csv', 'r', newline='')
csvreader = csv.reader(csvfile, delimiter = ',')
for row in csvreader:
    thisVariable = row[0]
</snippet></ROW><ROW><id>15425042</id><snippet>import re
x_date = []
fp = open("results_file.txt")
for i, line in enumerate(fp):
    if (i &gt;= line_start) and (i &lt;= line_end):
        line = re.match("(.{10})(.{8})(.{8})(.{12})(.{12})(.{12})(.{12})", line).groups()
        x_date_temp = line[0]
        x_date.append(x_date_temp)
</snippet></ROW><ROW><id>15425042</id><snippet>line_dict = re.match("(?P&lt;date&gt;.{10})"
                     "(?P&lt;field1&gt;.{8})"
                     "(?P&lt;field2&gt;.{8})"
                     "(?P&lt;field3&gt;.{12})"
                     "(?P&lt;field4&gt;.{12})"
                     "(?P&lt;field5&gt;.{12})"
                     "(?P&lt;field6&gt;.{12})", line).groupdict()
</snippet></ROW><ROW><id>15425292</id><snippet>firstRun = true
def someFunc:
    if not(self.firstRun):
       return
    # doSomeFunc
    self.firstRun = false
</snippet></ROW><ROW><id>15425435</id><snippet> import os
 import sys

 PORJECT_ROOT = os.path.join(os.path.dirname(__file__),'..')
 sys.path.insert(0, os.path.join(PROJECT_ROOT,'static'))
</snippet></ROW><ROW><id>15425693</id><snippet>conx = sqlite3.connect( 'nameofdatabase.db' )
curs = conx.cursor()
curs.execute( 'SELECT COMPONENT_ID, LEVEL, COMPONENT_NAME, PARENT ' +
              'FROM DOMAIN_HIERARCHY' )
rows = curs.fetchall()
cmap = {}
hrcy = None
for row in rows:
    entry = (row[2], {})
    cmap[row[0]] = entry
    if row[1] == 1:
        hrcy = {entry[0]: entry[1]}

# raise if hrcy is None

for row in rows:
    item = cmap[row[0]]
    parent = cmap.get(row[3], None)
    if parent is not None:
        parent[1][row[2]] = item[1]

print hrcy
</snippet></ROW><ROW><id>15425693</id><snippet>cmap</snippet></ROW><ROW><id>15425693</id><snippet>rows = [(1,1,'A',0),
        (2,2,'AA',1),
        (3,2,'AB',1),
        (4,3,'AAA',2),
        (5,3,'AAB',2),
        (6,3,'ABA',3),
        (7,3,'ABB',3)]       
</snippet></ROW><ROW><id>15425693</id><snippet>{'A': {'AA': {'AAA': {}, 'AAB': {}}, 'AB': {'ABA': {}, 'ABB': {}}}}
</snippet></ROW><ROW><id>15426033</id><snippet>searchsorted</snippet></ROW><ROW><id>15426033</id><snippet>740</snippet></ROW><ROW><id>15426161</id><snippet>while</snippet></ROW><ROW><id>15426161</id><snippet>def inputGuess(lettersGuessed):
    while True:
        guess = raw_input("What is your guess? ")
        guess = guess.lower()
        if guess in lettersGuessed:
            print "You've already guessed that. Try again!"
        else:
            break
    print guess
    return guess
</snippet></ROW><ROW><id>15426187</id><snippet>img = cv2.imread('image.png')
img = img[c1:c1+25,r1:r1+25]
</snippet></ROW><ROW><id>15426662</id><snippet>def get_object(self, *args, **kwargs):
    obj = super(EditarEvento, self).get_object(*args, **kwargs)
    if obj.user != self.request.user:
        raise PermissionDenied() #or Http404
    return obj
</snippet></ROW><ROW><id>15427603</id><snippet>routing</snippet></ROW><ROW><id>15427603</id><snippet>myapp</snippet></ROW><ROW><id>15427603</id><snippet>application</snippet></ROW><ROW><id>15427603</id><snippet>/var/www/myapp</snippet></ROW><ROW><id>15427603</id><snippet>routing</snippet></ROW><ROW><id>15427603</id><snippet>def theapp(&lt;don't remember the argumets by heart&gt;):
    app.debug = 'True'
    app.run()
</snippet></ROW><ROW><id>15427603</id><snippet>from routing import theapp as application
</snippet></ROW><ROW><id>15427603</id><snippet>from routing import app as application
</snippet></ROW><ROW><id>15427654</id><snippet>context.get</snippet></ROW><ROW><id>15427654</id><snippet>for id in context.get['active_ids']:
</snippet></ROW><ROW><id>15427654</id><snippet>for id in context.get('active_ids'):
</snippet></ROW><ROW><id>15427959</id><snippet>variables.less</snippet></ROW><ROW><id>15427959</id><snippet>@iconSpritePath:          "../img/glyphicons-halflings.png";
@iconWhiteSpritePath:     "../img/glyphicons-halflings-white.png";
</snippet></ROW><ROW><id>15427959</id><snippet>@iconSpritePath:          "/static/images/glyphicons-halflings.png";
@iconWhiteSpritePath:     "/static/images/glyphicons-halflings-white.png";
</snippet></ROW><ROW><id>15427959</id><snippet>static/images</snippet></ROW><ROW><id>15427959</id><snippet>background-image: url("../img/glyphicons-halflings.png"); 
...
background-image: url("../img/glyphicons-halflings-white.png");
</snippet></ROW><ROW><id>15428235</id><snippet>re.sub</snippet></ROW><ROW><id>15428235</id><snippet>repl</snippet></ROW><ROW><id>15428235</id><snippet>def add_two(match):
    return str(int(match.group()) + 2)

s = 'Alex 28'
re.sub(r'(\d+)', add_two, s)
</snippet></ROW><ROW><id>15428235</id><snippet>re.sub(r'(\d+)', lambda m: str(int(m.group()) + 2), s)
</snippet></ROW><ROW><id>15428235</id><snippet>str</snippet></ROW><ROW><id>15428235</id><snippet>str</snippet></ROW><ROW><id>15428235</id><snippet>repl</snippet></ROW><ROW><id>15428235</id><snippet>match.group()</snippet></ROW><ROW><id>15428333</id><snippet>RequestHandler</snippet></ROW><ROW><id>15428333</id><snippet>class SearchHandler(webapp2.RequestHandler):
  def get(self):
    searchQuery = self.request.get('searchQuery')
    self.response.out.write('Term: %s' % searchQuery)
</snippet></ROW><ROW><id>15428398</id><snippet>cat myfile.txt | xargs -n 1 --max-procs 3 --verbose wget
</snippet></ROW><ROW><id>15428577</id><snippet>sudo</snippet></ROW><ROW><id>15428577</id><snippet>sudo -s</snippet></ROW><ROW><id>15428658</id><snippet>Counter</snippet></ROW><ROW><id>15428658</id><snippet>class MostCommon(object):
    """Keep track the top-k key-value pairs.

    Attributes:
        top: Integer representing the top-k items to keep track of.
        store: Dictionary of the top-k items.
        min: The current minimum of any top-k item.
        min_set: Set where keys are counts, and values are the set of
            keys with that count.
    """
    def __init__(self, top):
        """Create a new MostCommon object to track key-value paris.

        Args:
            top: Integer representing the top-k values to keep track of.
        """
        self.top = top
        self.store = dict()
        self.min = None
        self.min_set = defaultdict(set)

    def _update_existing(self, key, value):
        """Update an item that is already one of the top-k values."""
        # Currently handle values that are non-decreasing.
        assert value &gt; self.store[key]
        self.min_set[self.store[key]].remove(key)
        if self.store[key] == self.min:  # Previously was the minimum.
            if not self.min_set[self.store[key]]:  # No more minimums.
                del self.min_set[self.store[key]]
                self.min_set[value].add(key)
                self.min = min(self.min_set.keys())
        self.min_set[value].add(key)
        self.store[key] = value

    def __contains__(self, key):
        """Boolean if the key is one of the top-k items."""
        return key in self.store

    def __setitem__(self, key, value):
        """Assign a value to a key.

        The item won't be stored if it is less than the minimum (and
        the store is already full). If the item is already in the store,
        the value will be updated along with the `min` if necessary.
        """
        # Store it if we aren't full yet.
        if len(self.store) &lt; self.top:
            if key in self.store:  # We already have this item.
                self._update_existing(key, value)
            else:  # Brand new item.
                self.store[key] = value
                self.min_set[value].add(key)
                if value &lt; self.min or self.min is None:
                    self.min = value
        else:  # We're full. The value must be greater minimum to be added.
            if value &gt; self.min:  # New item must be larger than current min.
                if key in self.store:  # We already have this item.
                    self._update_existing(key, value)
                else:  # Brand new item.
                    # Make room by removing one of the current minimums.
                    old = self.min_set[self.min].pop()
                    del self.store[old]
                    # Delete the set if there are no old minimums left.
                    if not self.min_set[self.min]:
                        del self.min_set[self.min]
                    # Add the new item.
                    self.min_set[value].add(key)
                    self.store[key] = value
                    self.min = min(self.min_set.keys())

    def __repr__(self):
        if len(self.store) &lt; 10:
            store = repr(self.store)
        else:
            length = len(self.store)
            largest = max(self.store.itervalues())
            store = '&lt;len={length}, max={largest}&gt;'.format(length=length,
                                                           largest=largest)
        return ('{self.__class__.__name__}(top={self.top}, min={self.min}, '
                'store={store})'.format(self=self, store=store))
</snippet></ROW><ROW><id>15428658</id><snippet>&gt;&gt;&gt; common = MostCommon(2)
&gt;&gt;&gt; common
MostCommon(top=2, min=None, store={})
&gt;&gt;&gt; common['a'] = 1
&gt;&gt;&gt; common
MostCommon(top=2, min=1, store={'a': 1})
&gt;&gt;&gt; 'a' in common
True
&gt;&gt;&gt; common['b'] = 2
&gt;&gt;&gt; common
MostCommon(top=2, min=1, store={'a': 1, 'b': 2})
&gt;&gt;&gt; common['c'] = 3
&gt;&gt;&gt; common
MostCommon(top=2, min=2, store={'c': 3, 'b': 2})
&gt;&gt;&gt; 'a' in common
False
&gt;&gt;&gt; common['b'] = 4
&gt;&gt;&gt; common
MostCommon(top=2, min=3, store={'c': 3, 'b': 4})
</snippet></ROW><ROW><id>15428658</id><snippet>&gt;&gt;&gt; counter = Counter()
&gt;&gt;&gt; for x in permutations(xrange(10), 10):
        counter[x] += 1

&gt;&gt;&gt; common = MostCommon(1)
&gt;&gt;&gt; for key, value in counter.iteritems():
    common[key] = value

&gt;&gt;&gt; common
MostCommon(top=1, min=1, store={(9, 7, 8, 0, 2, 6, 5, 4, 3, 1): 1})
&gt;&gt;&gt; timeit('repr(common)', 'from __main__ import common', number=1)
1.3251570635475218e-05
</snippet></ROW><ROW><id>15428658</id><snippet>n</snippet></ROW><ROW><id>15428658</id><snippet>Counter</snippet></ROW><ROW><id>15428658</id><snippet>n</snippet></ROW><ROW><id>15428955</id><snippet>pinv</snippet></ROW><ROW><id>15428955</id><snippet>&gt;&gt;&gt; import sympy as sy
&gt;&gt;&gt; M = sy.Matrix(2,3, [1,2,3,4,5,6])

&gt;&gt;&gt; N = M.H * (M * M.H) ** -1

&gt;&gt;&gt; N.evalf(4)
[-0.9444,  0.4444]
[-0.1111,  0.1111]
[ 0.7222, -0.2222]
&gt;&gt;&gt; M * N
[1, 0]
[0, 1]
</snippet></ROW><ROW><id>15428955</id><snippet>&gt;&gt;&gt; M = sy.Matrix(3, 2, [1,2,3,4,5,6])

&gt;&gt;&gt; N = (M.H * M) ** -1 * M.H

&gt;&gt;&gt; N.evalf(4)
[-1.333, -0.3333,  0.6667]
[ 1.083,  0.3333, -0.4167]
&gt;&gt;&gt; N * M
[1, 0]
[0, 1]
</snippet></ROW><ROW><id>15429726</id><snippet>score = int(self.label7.get())
score += 100
self.label7.set(str(score))
app.refresh()
</snippet></ROW><ROW><id>15429726</id><snippet>refresh</snippet></ROW><ROW><id>15429781</id><snippet>def truncate(string, width):
    if len(string) &gt; width:
        string = string[:width-3] + '...'
    return string

"{0:&lt;10s}".format(truncate("Foo Bar Baz", 10))
</snippet></ROW><ROW><id>15429781</id><snippet>&gt;&gt;&gt; "{0:&lt;10s}".format(truncate("Foo", 10))
'Foo       '
&gt;&gt;&gt; "{0:&lt;10s}".format(truncate("Foo Bar Baz", 10))
'Foo Bar...'
</snippet></ROW><ROW><id>15430123</id><snippet>pattern = '(\.?/|/)|(^:?[^:]*$)'
re.match(pattern, ":home/test") # match, is a local path
re.match(pattern, "user@host:blah") # no match
</snippet></ROW><ROW><id>15430170</id><snippet>class Foo(object):
    def __init__(self):
        self._attr_path = []

    def __getattr__(self, attr):
        self._attr_path.append(attr)
        return self

    def __call__(self, *args, **kw):
        print ".".join(self._attr_path)
        print args, kw
        del self._attr_path[:]

f = Foo()
f.a.b.c(1,2,3)
</snippet></ROW><ROW><id>15430170</id><snippet>a.b.c
(1, 2, 3) {}
</snippet></ROW><ROW><id>15430170</id><snippet>class Bar(object):
    def __init__(self, foo, attr):
        self.foo = foo
        self._attr_path = [attr]

    def __getattr__(self, attr):
        self._attr_path.append(attr)
        return self

    def __call__(self, *args, **kw):
        print self
        print args, kw

    def __str__(self):
        return ".".join(self._attr_path)

class Foo(object):

    def __getattr__(self, attr):
        return Bar(self, attr)

f = Foo()
f.a.b.c(1,2,3)
</snippet></ROW><ROW><id>15430170</id><snippet>class Foo(object):

    def __init__(self, parent=None, name=""):
        self.parent = parent
        self.name = name

    def __getattr__(self, attr):
        return Foo(parent=self, name=attr)

    def __call__(self, *args, **kw):
        print self
        print args, kw    

    def __str__(self):
        nodes = []
        node = self
        while node.parent:
            nodes.append(node)
            node = node.parent
        return ".".join(node.name for node in nodes[::-1])

f = Foo()
x = f.a.b
y = f.a.c
x()
y()

g = f.a
f.b
g.b.c() 
</snippet></ROW><ROW><id>15430230</id><snippet>id
website
etc.
</snippet></ROW><ROW><id>15430230</id><snippet>source_id (refers to id in web pages table)
target_id (also refers to id in web pages table)
</snippet></ROW><ROW><id>15430565</id><snippet>r</snippet></ROW><ROW><id>15430565</id><snippet>w</snippet></ROW><ROW><id>15430565</id><snippet> f = open('names', 'w')
</snippet></ROW><ROW><id>15430565</id><snippet>a</snippet></ROW><ROW><id>15430565</id><snippet> f = open('names', 'a')
</snippet></ROW><ROW><id>15430565</id><snippet> f = open('names', 'r+')
</snippet></ROW><ROW><id>15430628</id><snippet>mProcess = multiprocessing.Process(target=test)</snippet></ROW><ROW><id>15430628</id><snippet>mProcess = multiprocessing.Process(target=test())</snippet></ROW><ROW><id>15430628</id><snippet>test</snippet></ROW><ROW><id>15430931</id><snippet>/depot/findutils/bin/find: /remote/scratch/results/tmp.na.8Em5fZ: No such file or directory
/depot/findutils/bin/find: /remote/scratch/results/tmp.na.k6iHJA: No such file or directory
/depot/findutils/bin/find: /remote/scratch/results/tmp.na.ZPe2TC: No such file or directory
</snippet></ROW><ROW><id>15430931</id><snippet>find</snippet></ROW><ROW><id>15431098</id><snippet>def replace_empty_dict_with(d, value):
    for k, v in d.iteritems():
        if len(v) == 0:
            d[k] = value
        else:
            replace_empty_dict_with(v, value)

d = {}
w = {}
for node, pid, _ in main_array:
    if pid == -1:
        w[node] = d[node] = {}
    else:
        parent = main_array[pid][0]
        w[node] = w[parent][node] = {}

replace_empty_dict_with(d, -1)
import pprint
pprint.pprint(d)
</snippet></ROW><ROW><id>15431098</id><snippet>{'some_string0': {'some_string3': -1,
                  'some_string4': -1,
                  'some_string5': {'some_string9': {'some_string11': -1}}},
 'some_string1': {'some_string6': -1, 'some_string7': {'some_string10': -1}},
 'some_string2': {'some_string8': -1}}
</snippet></ROW><ROW><id>15431156</id><snippet>^</snippet></ROW><ROW><id>15431156</id><snippet>re.M</snippet></ROW><ROW><id>15431156</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>15431156</id><snippet>ModCon = re.sub('^[a-z]', lambda x: x.group().upper(), ModCon, flags=re.M)
</snippet></ROW><ROW><id>15431156</id><snippet>{1}</snippet></ROW><ROW><id>15431156</id><snippet>Match</snippet></ROW><ROW><id>15431156</id><snippet>.group()</snippet></ROW><ROW><id>15431215</id><snippet>FULL_NAV = [
    ['nav1'],
    ['nav1', 'subnav1'],
    ['nav1', 'subnav2'],
    ['nav2'],
    ['nav3'],
    ['nav3', 'subnav1'],
    ['nav3', 'subnav2'],
    ['nav3', 'subnav3'],
    ['nav3', 'subnav3', 'subsubnav1'],
    ['nav3', 'subnav3', 'subsubnav1', 'subsubsubnav'],
    ['nav4'],
    ['nav5'],
    ['nav5', 'subnav1'],
    ['nav5', 'subnav1', 'subsubnav1'],
    ['nav5', 'subnav2'],
    ['nav5', 'subnav3']
]


def get_required_nav(node_path, full_nav):
    return_list = []

    for comparison_node in full_nav:
        cn_len = len(comparison_node)
        np_len = len(node_path)
        if cn_len &lt;= np_len:
            if comparison_node[:cn_len - 1] == node_path[:cn_len - 1]:
                return_list.append(comparison_node)
        else:
            if comparison_node[:-1] == node_path:
                return_list.append(comparison_node)
    return return_list

if __name__ == '__main__':
        from pprint import pprint
        pprint(get_required_nav(
            ['nav3', 'subnav3'], FULL_NAV))


# Output of above example:
# [['nav1'],
#  ['nav2'],
#  ['nav3'],
#  ['nav3', 'subnav1'],
#  ['nav3', 'subnav2'],
#  ['nav3', 'subnav3'],
#  ['nav3', 'subnav3', 'subsubnav1'],
#  ['nav4'],
#  ['nav5']]
</snippet></ROW><ROW><id>15431343</id><snippet>urllib3</snippet></ROW><ROW><id>15431343</id><snippet>from requests.adapters import HTTPAdapter

s = requests.Session()
s.mount('http://www.github.com', HTTPAdapter(max_retries=5))
</snippet></ROW><ROW><id>15431343</id><snippet>requests</snippet></ROW><ROW><id>15431343</id><snippet>import requests

requests.adapters.DEFAULT_RETRIES = 5
</snippet></ROW><ROW><id>15431343</id><snippet>max_retries</snippet></ROW><ROW><id>15431343</id><snippet>HTTPAdapter()</snippet></ROW><ROW><id>15431343</id><snippet>HTTPAdapter.__init__()</snippet></ROW><ROW><id>15431910</id><snippet>gettags</snippet></ROW><ROW><id>15431910</id><snippet>main_line = f.create_line(200,300,300,300, tags="main_line_tag", width=5)
tags_text = ', '.join(f.gettags(main_line))
line_text = "%s: %s" % (main_line, tags_text)
f.create_text(220,320, text=line_text)
</snippet></ROW><ROW><id>15431910</id><snippet>exec 'main_line%d = ...</snippet></ROW><ROW><id>15431910</id><snippet>exec</snippet></ROW><ROW><id>15431910</id><snippet>lines = []
def update(t, newxy):
    for line in lines:
        f.coord(line, *newxy)

class Create:
    def __init__(self, xy, t):
        self.xy = xy
        self.t = t
        for i in xrange(self.t):
            new_line = f.create_line(200,300,300,300, tags="main_line_tag%d" % (i+1))
            lines.append(new_line)
</snippet></ROW><ROW><id>15432093</id><snippet>import re

re.sub('[^a-zA-Z]', '', inputstring)
</snippet></ROW><ROW><id>15432093</id><snippet>[....]</snippet></ROW><ROW><id>15432093</id><snippet>^</snippet></ROW><ROW><id>15432093</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub('[^a-zA-Z]', '', '"tes!@#$%^&amp;*(())___+t" "test1" "test3N"')
'testtesttestN'
</snippet></ROW><ROW><id>15432550</id><snippet>dis</snippet></ROW><ROW><id>15432550</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; TheString = "k=abs(x)+y"
&gt;&gt;&gt; Binary = compile( TheString , "&lt;string&gt;" , "exec" )
&gt;&gt;&gt; dis.dis(Binary)
  1           0 LOAD_NAME                0 (abs)
              3 LOAD_NAME                1 (x)
              6 CALL_FUNCTION            1
              9 LOAD_NAME                2 (y)
             12 BINARY_ADD          
             13 STORE_NAME               3 (k)
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE        
</snippet></ROW><ROW><id>15432550</id><snippet>abs()</snippet></ROW><ROW><id>15432550</id><snippet>x</snippet></ROW><ROW><id>15432550</id><snippet>y</snippet></ROW><ROW><id>15432550</id><snippet>k</snippet></ROW><ROW><id>15432694</id><snippet>weights_h1</snippet></ROW><ROW><id>15432694</id><snippet>weights_h2</snippet></ROW><ROW><id>15432694</id><snippet>error_out</snippet></ROW><ROW><id>15432694</id><snippet>error_h1</snippet></ROW><ROW><id>15432694</id><snippet>error_h2</snippet></ROW><ROW><id>15432694</id><snippet>weights_h1 = [w + x * coef * error_h1 for w, x in zip(weights_h1, input)]
weights_h2 = [w + x * coef * error_h2 for w, x in zip(weights_h2, input)] 
</snippet></ROW><ROW><id>15432803</id><snippet>import numpy as np
import matplotlib.pyplot as plt

grid = np.zeros((10,10), dtype=np.bool)
square_length = 0.5
circles = {'c1':[[4,2],1.5],'c2':[[5,6],2.0]}

# Generate arrays of indices/coordiates so we can do the
# calculations the Numpy way, without resorting to loops
# I always get the index order wrong so double check...
xx = np.arange(grid.shape[0])
yy = np.arange(grid.shape[1])

for val in circles.itervalues():
    radius = val[1]
    # same index caveat here
    # Calling Mr Pythagoras: Find the pixels that lie inside this circle
    inside = (xx[:,None] - val[0][0]) ** 2 + (yy[None, :] - val[0][1]) ** 2 &lt;= (radius ** 2)
    # do grid &amp; inside and initialize grid with ones for intersection instead of union
    grid = grid | inside 

plt.imshow(grid)
plt.show()
</snippet></ROW><ROW><id>15432803</id><snippet>sqrt(17) ~= 4.123..</snippet></ROW><ROW><id>15432803</id><snippet>3.5</snippet></ROW><ROW><id>15432819</id><snippet>from __future__ import print_function
from __future__ import division
from __future__ import absolute_import

import scipy.interpolate
import numpy
import matplotlib 
import matplotlib.pyplot as plt

# close old plots
plt.close("all")

# some parameters
N = 300             # number of points for interpolation
xy_center = [2,2]   # center of the plot
radius = 2          # radius

# mostly original code
meanR = [9.95184937,   9.87947708,   9.87628496,   9.78414422,
         9.79365258,   9.96168969,   9.87537519,   9.74536093,
        10.16686878,  10.04425475,  10.10444126,  10.2917172 ,
        10.16745917,  10.0235203 ,   9.89914   ,  10.11263505,
         9.99756449,  10.17861254,  10.04704248]

koord = [[1,4],[3,4],[1,3],[3,3],[2,3],[1,2],[3,2],[2,2],[1,1],[3,1],[2,1],[1,0],[3,0],[0,3],[4,3],[0,2],[4,2],[0,1],[4,1]]

x,y = [],[]
for i in koord:
    x.append(i[0])
    y.append(i[1])

z = meanR

xi = numpy.linspace(-2, 6, N)
yi = numpy.linspace(-2, 6, N)
zi = scipy.interpolate.griddata((x, y), z, (xi[None,:], yi[:,None]), method='cubic')

# set points &gt; radius to not-a-number. They will not be plotted.
# the dr/2 makes the edges a bit smoother
dr = xi[1] - xi[0]
for i in range(N):
    for j in range(N):
        r = numpy.sqrt((xi[i] - xy_center[0])**2 + (yi[j] - xy_center[1])**2)
        if (r - dr/2) &gt; radius:
            zi[j,i] = "nan"

# make figure
fig = plt.figure()

# set aspect = 1 to make it a circle
ax = fig.add_subplot(111, aspect = 1)

# use different number of levels for the fill and the lines
CS = ax.contourf(xi, yi, zi, 60, cmap = plt.cm.jet, zorder = 1)
ax.contour(xi, yi, zi, 15, colors = "grey", zorder = 2)

# make a color bar
cbar = fig.colorbar(CS, ax=ax)

# add the data points
# I guess there are no data points outside the head...
ax.scatter(x, y, marker = 'o', c = 'b', s = 15, zorder = 3)

# draw a circle
# change the linewidth to hide the 
circle = matplotlib.patches.Circle(xy = xy_center, radius = radius, edgecolor = "k", facecolor = "none")
ax.add_patch(circle)

# make the axis invisible 
for loc, spine in ax.spines.iteritems():
    # use ax.spines.items() in Python 3
    spine.set_linewidth(0)

# remove the ticks
ax.set_xticks([])
ax.set_yticks([])

# Add some body parts. Hide unwanted parts by setting the zorder low
# add two ears
circle = matplotlib.patches.Ellipse(xy = [0,2], width = 0.5, height = 1.0, angle = 0, edgecolor = "k", facecolor = "w", zorder = 0)
ax.add_patch(circle)
circle = matplotlib.patches.Ellipse(xy = [4,2], width = 0.5, height = 1.0, angle = 0, edgecolor = "k", facecolor = "w", zorder = 0)
ax.add_patch(circle)
# add a nose
xy = [[1.5,3], [2,4.5],[2.5,3]]
polygon = matplotlib.patches.Polygon(xy = xy, facecolor = "w", zorder = 0)
ax.add_patch(polygon) 

# set axes limits
ax.set_xlim(-0.5, 4.5)
ax.set_ylim(-0.5, 4.5)

plt.show() 
</snippet></ROW><ROW><id>15433131</id><snippet>import lxml.html
from lxml.cssselect import CSSSelector
content = result.read()
page_html = lxml.html.fromstring(content)

elements = page_html.xpath('//*[self::div or self::span]')
</snippet></ROW><ROW><id>15433131</id><snippet>sd_selector = CSSSelector('span,div')
elements = sd_selector(page_html)
</snippet></ROW><ROW><id>15433427</id><snippet>json</snippet></ROW><ROW><id>15433427</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; data = '{"id":"123456789","name":"John Smith","first_name":"John","last_name":"Smith","link":"http:\/\/www.facebook.com\/john.smith","username":"john.smith","gender":"male","locale":"en_GB"}'
&gt;&gt;&gt; d = json.loads(data)
</snippet></ROW><ROW><id>15433427</id><snippet>&gt;&gt;&gt; d
{u'username': u'john.smith', u'first_name': u'John', u'last_name': u'Smith', u'name': u'John Smith', u'locale': u'en_GB', u'gender': u'male', u'link': u'http://www.facebook.com/john.smith', u'id': u'123456789'}
&gt;&gt;&gt; d['username']
u'john.smith'
</snippet></ROW><ROW><id>15433549</id><snippet>pool = redis.ConnectionPool(host='localhost', port=6379, db=0)
r = redis.Redis(connection_pool=pool)
</snippet></ROW><ROW><id>15433922</id><snippet>__import__</snippet></ROW><ROW><id>15433952</id><snippet>save()</snippet></ROW></DATA>