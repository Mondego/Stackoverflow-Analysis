<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>21041292</id><snippet>params = {_action:'insert'};
_.extend(params, objData); // using underscore or lodash
[...]
$http.post('api/api.py', params)
</snippet></ROW><ROW><id>21041904</id><snippet>urllib</snippet></ROW><ROW><id>21041904</id><snippet>urllib.quote</snippet></ROW><ROW><id>21041904</id><snippet>urllib.unquote</snippet></ROW><ROW><id>21042520</id><snippet>numpy.r_</snippet></ROW><ROW><id>21042520</id><snippet>numpy.s_</snippet></ROW><ROW><id>21042520</id><snippet>import sys
import numpy as np
filenames = sys.argv[1:]
arrays = [np.loadtxt(filename) for filename in filenames]
final_array = np.concatenate(arrays, axis=0)
</snippet></ROW><ROW><id>21042602</id><snippet>hg</snippet></ROW><ROW><id>21042602</id><snippet>cwd=</snippet></ROW><ROW><id>21042602</id><snippet>'"{}"'.format</snippet></ROW><ROW><id>21042602</id><snippet>msg</snippet></ROW><ROW><id>21042602</id><snippet>shlex.quote</snippet></ROW><ROW><id>21042602</id><snippet>import subprocess
msg = 'this is commit'
try:
    subprocess.check_output(['hg', 'commit', '-m', msg])
    print("commit done")
except subprocess.CalledProcessError as cpe:
    print("commit failed: %r" % cpe)
</snippet></ROW><ROW><id>21042614</id><snippet>csv.DictWriter()</snippet></ROW><ROW><id>21042614</id><snippet> import csv

 with open(outputfilename, 'wb') as outfh:
     writer = csv.DictWriter(outfh, fieldnames=('url', 'category', 'user'), extrasaction='ignore')
     writer.writerows(data['expenses'])
</snippet></ROW><ROW><id>21042614</id><snippet>fieldnames</snippet></ROW><ROW><id>21042614</id><snippet>csv.DictWriter()</snippet></ROW><ROW><id>21042614</id><snippet>extrasaction='ignore'</snippet></ROW><ROW><id>21042614</id><snippet>restval</snippet></ROW><ROW><id>21042614</id><snippet>expenses</snippet></ROW><ROW><id>21042614</id><snippet>writer.writerows()</snippet></ROW><ROW><id>21042650</id><snippet>f1index</snippet></ROW><ROW><id>21042650</id><snippet>f1strength = strengths[f1index]
f2strength = strengths[f2index]
</snippet></ROW><ROW><id>21042830</id><snippet>html = t.render(Context({'plus1':now})
#          --- 1     --2          -- 2 but no 1
</snippet></ROW><ROW><id>21042830</id><snippet>)</snippet></ROW><ROW><id>21042830</id><snippet>html = t.render(Context({'plus1':now}))
</snippet></ROW><ROW><id>21042977</id><snippet>try</snippet></ROW><ROW><id>21042977</id><snippet>except</snippet></ROW><ROW><id>21042977</id><snippet>except ImportError as exc:
</snippet></ROW><ROW><id>21042977</id><snippet>except ImportError, exc:
</snippet></ROW><ROW><id>21043217</id><snippet>AbstractFormBase</snippet></ROW><ROW><id>21043217</id><snippet>SchemeForm</snippet></ROW><ROW><id>21043217</id><snippet>super()</snippet></ROW><ROW><id>21043217</id><snippet>__init__</snippet></ROW><ROW><id>21043217</id><snippet>AbstractFormBase</snippet></ROW><ROW><id>21043217</id><snippet>NgModelFormMixin</snippet></ROW><ROW><id>21043217</id><snippet>forms.ModelForm</snippet></ROW><ROW><id>21043217</id><snippet>__init__</snippet></ROW><ROW><id>21043217</id><snippet>super()</snippet></ROW><ROW><id>21043217</id><snippet>AbstractFormBase</snippet></ROW><ROW><id>21043217</id><snippet>class AbstractFormBase(object):
    def __init__(self, *args, **kwargs):
        super(AbstractFormBase, self).__init__(*args, **kwargs)
        self.helper = FormHelper()
        self.helper.form_class = 'form-horizontal'
        self.helper.label_class = 'col-lg-3'
        self.helper.field_class = 'col-lg-8'
</snippet></ROW><ROW><id>21043217</id><snippet>NgModelFormMixin</snippet></ROW><ROW><id>21043217</id><snippet>form.ModelForm</snippet></ROW><ROW><id>21043217</id><snippet>Meta</snippet></ROW><ROW><id>21043217</id><snippet>fields</snippet></ROW><ROW><id>21043217</id><snippet>exclude</snippet></ROW><ROW><id>21043239</id><snippet>if words[0] in {"TPW", "KPM1", "KPM2"}:
</snippet></ROW><ROW><id>21043239</id><snippet>if words[0] in "TPW" or "KPM1" or "KPM2":
</snippet></ROW><ROW><id>21043239</id><snippet>words[0] in "TPW" or "KPM1" or "KPM2"</snippet></ROW><ROW><id>21043239</id><snippet>True</snippet></ROW><ROW><id>21043239</id><snippet>words[0] in "TPW"</snippet></ROW><ROW><id>21043239</id><snippet>words[0]</snippet></ROW><ROW><id>21043239</id><snippet>"TPW"</snippet></ROW><ROW><id>21043239</id><snippet>True</snippet></ROW><ROW><id>21043239</id><snippet>"KPM1"</snippet></ROW><ROW><id>21043239</id><snippet>True</snippet></ROW><ROW><id>21043671</id><snippet>sendto</snippet></ROW><ROW><id>21043671</id><snippet>class Server(threading.Thread):
    def __init__(self):
        super(Server, self).__init__()
        self.addr = (HOST,PORT)
        self.start()

    def run(self):
        self.s = socket(AF_INET, SOCK_STREAM)
        self.s.bind((HOST, PORT))
        self.s.listen(5)
        print "Server is running......"

        while True:
            conn, addr = self.s.accept()
            threading.Thread(target=self.clientHandler, args=(conn, addr)).start()
</snippet></ROW><ROW><id>21043671</id><snippet>def clientHandler(self, conn, addr):
    clients.append(conn)
</snippet></ROW><ROW><id>21043671</id><snippet>clientHandler</snippet></ROW><ROW><id>21043671</id><snippet>def clientHandler(self, conn, addr):
    clients.append(conn)
    while True:
         msg = read_from_socket(conn)
         id_str, _, msg = msg.partition(b':')
         clients[int(id_str.decode('ascii'))].sendall(msg)
</snippet></ROW><ROW><id>21043671</id><snippet>read_from_socket</snippet></ROW><ROW><id>21043671</id><snippet>b'\n'</snippet></ROW><ROW><id>21043671</id><snippet>def read_from_socket(conn):
    buf = bytearray(0)
    while True:
        b = conn.recv(1)
        buf.extend(b)
        if b == b'\n':
             return bytes(buf)
</snippet></ROW><ROW><id>21043671</id><snippet>\n</snippet></ROW><ROW><id>21043671</id><snippet>class Client(threading.Thread):
    def sendMessage(self):
        if len(clients)&gt;1:
                to = randint(0, len(clients) - 1)
                message = ('%s:hello from %s\n' % (to, self.name)).encode('utf-8')
                print(message)
                self.ss.send(message)
</snippet></ROW><ROW><id>21043671</id><snippet>server=Server()
client1=Client()
client2=Client()
client3=Client()

client1.start()
client2.start()
client3.start()

time.sleep(1)
client1.sendMessage()
</snippet></ROW><ROW><id>21043878</id><snippet>numpy.math.cos</snippet></ROW><ROW><id>21043878</id><snippet>numpy.cos</snippet></ROW><ROW><id>21043878</id><snippet>cos</snippet></ROW><ROW><id>21043878</id><snippet>In [30]: import numpy as np

In [31]: np.cos(np.array([1, 2, 3]))                                                             
Out[31]: array([ 0.54030231, -0.41614684, -0.9899925 ])
</snippet></ROW><ROW><id>21043878</id><snippet>In [32]: np.math.cos(np.array([1, 2, 3]))                                                        
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-32-8ce0f3c0df04&gt; in &lt;module&gt;()
----&gt; 1 np.math.cos(np.array([1, 2, 3]))

TypeError: only length-1 arrays can be converted to Python scalars
</snippet></ROW><ROW><id>21043917</id><snippet>len(listobject) - givenindex</snippet></ROW><ROW><id>21043917</id><snippet>-1</snippet></ROW><ROW><id>21043917</id><snippet>+---+---+---+---+---+
| h | e | l | l | o |  # contents
+---+---+---+---+---+
| 0 | 1 | 2 | 3 | 4 |  # indices
+---+---+---+---+---+
|-5 |-4 |-3 |-2 |-1 |  # negative indices
+---+---+---+---+---+
</snippet></ROW><ROW><id>21043917</id><snippet>e</snippet></ROW><ROW><id>21044182</id><snippet>p = Popen('bash -c "echo \'useful\'; cd ~/dicp/python; nohup sleep 5 &amp;&gt; /tmp/out.txt &amp; echo \'more\';"', shell = True, stdout = PIPE, stderr = PIPE)
print p.communicate()
</snippet></ROW><ROW><id>21044384</id><snippet>OneToOneField</snippet></ROW><ROW><id>21044384</id><snippet>from otherapp.admin import OriginalFooAdmin
from otherapp.models import Foo
from yourapp.models import YourExtension
from django.contrib import admin

admin.site.unregister(Foo)

class ExtensionInline(admin.StackedInline):
    model = YourExtension

class NewFooAdmin(OriginalFooAdmin):
    inlines = OriginalFooAdmin.inlines + [ExtensionInline]
admin.site.register(Foo, NewFooAdmin)
</snippet></ROW><ROW><id>21044440</id><snippet>import numpy as np
import pandas as pd
import itertools

c = list(itertools.repeat(['x','y', 'z'], 3))
col_a = list(itertools.chain(*c))

depths = [5.0, 5.0, 5.0, 10.0, 10.0, 10.0, 20.0, 20.0, 20.0]
names = list("xyzxyzxyz")

df = pd.DataFrame(np.random.rand(8, 9))
df.columns = pd.MultiIndex.from_arrays((depths, names))
print df[10]
</snippet></ROW><ROW><id>21044440</id><snippet>          x         y         z
0  0.767859  0.274721  0.986447
1  0.166864  0.143640  0.896246
2  0.029581  0.951677  0.626415
3  0.822003  0.358323  0.061943
4  0.764663  0.955426  0.831934
5  0.192194  0.001171  0.181386
6  0.649342  0.186907  0.109016
7  0.360859  0.163483  0.597824
</snippet></ROW><ROW><id>21044440</id><snippet>df.xs("x", 1, level=1)
</snippet></ROW><ROW><id>21044440</id><snippet>         5         10        20
0  0.075749  0.767859  0.691237
1  0.305108  0.166864  0.595809
2  0.432526  0.029581  0.317391
3  0.410563  0.822003  0.884315
4  0.865121  0.764663  0.808828
5  0.590033  0.192194  0.657932
6  0.658829  0.649342  0.006082
7  0.677408  0.360859  0.320102
</snippet></ROW><ROW><id>21044534</id><snippet>import Tkinter as Tk
root = Tk.Tk()
root.title('Program')
menuButton = Tk.Button(root, text='Menu')
menuButton.grid(row=0, column=0)
root.mainloop()
</snippet></ROW><ROW><id>21044534</id><snippet>def change_language(lang):
    if lang == 'English':
        root.title('Program')
        menuButton.config(text='Menu')
    elif lang == 'Spanish':
        root.title('Programa')
        menuButton.config(text='Men√∫')
</snippet></ROW><ROW><id>21044534</id><snippet>english = ['Program', 'Menu']
spanish = ['Programa', 'Men√∫']

def change_language_2(lang):
    root.title(lang[0])
    menuButton.config(text=lang[1])
</snippet></ROW><ROW><id>21044723</id><snippet>collections.Counter()</snippet></ROW><ROW><id>21044723</id><snippet>most_common()</snippet></ROW><ROW><id>21044723</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; counts = Counter('aaaaaabbbbcccc')
&gt;&gt;&gt; counts.most_common(2)
[('a', 6), ('c', 4)]
</snippet></ROW><ROW><id>21044723</id><snippet>aabc</snippet></ROW><ROW><id>21044723</id><snippet>b</snippet></ROW><ROW><id>21044723</id><snippet>c</snippet></ROW><ROW><id>21044723</id><snippet>Counter</snippet></ROW><ROW><id>21044723</id><snippet>c</snippet></ROW><ROW><id>21044723</id><snippet>b</snippet></ROW><ROW><id>21044723</id><snippet>b</snippet></ROW><ROW><id>21044723</id><snippet>c</snippet></ROW><ROW><id>21044723</id><snippet>list4.sort(key=lambda v: (-v[1], v[0))
</snippet></ROW><ROW><id>21044723</id><snippet>Counter.most_common()</snippet></ROW><ROW><id>21044723</id><snippet>heapq</snippet></ROW><ROW><id>21044785</id><snippet>a = np.array([[1,2,3],[4,5,6]])
b = a.T  # or a.transpose()
</snippet></ROW><ROW><id>21044785</id><snippet>b[0] *= 2
</snippet></ROW><ROW><id>21044785</id><snippet>b = a.T.copy()
</snippet></ROW><ROW><id>21044785</id><snippet>a[:, 0] *= 2
</snippet></ROW><ROW><id>21044793</id><snippet>import math, random
name1 = ""
name2 = ""
strength1 = 0
strength2 = 0
skill1 = 0
skill2 = 0

def Character1():
    global strength1, skill1, name1
    name1 = raw_input("Please enter a name for the first character : ")
    strength1 = math.floor(random.randint(1,12)/random.randint(1,4))+10
    skill1 = math.floor(random.randint(1,12)/random.randint(1,4))+10

def Character2():
    global strength2, skill2, name2
    name2 = raw_input("Please enter a name for the second character : ")
    strength2 = math.floor(random.randint(1,12)/random.randint(1,4))+10
    skill2 = math.floor(random.randint(1,12)/random.randint(1,4))+10

def printStats():
    print "The first character is called " + name1 + " and has a skill level of " + str(skill1) + " and a strength level of " + str(strength1) 
    print "The first character is called " + name2 + " and has a skill level of " + str(skill2) + " and a strength level of " + str(strength2) 

Character1()
Character2()
printStats()
</snippet></ROW><ROW><id>21045117</id><snippet>if cont in "nN":
</snippet></ROW><ROW><id>21045117</id><snippet>if cont in ["n", "N"]:
</snippet></ROW><ROW><id>21045117</id><snippet>if cont.lower() == "n":
</snippet></ROW><ROW><id>21045117</id><snippet>if cont=='N' or 'n':</snippet></ROW><ROW><id>21045117</id><snippet>True</snippet></ROW><ROW><id>21045117</id><snippet>if cont == True:</snippet></ROW><ROW><id>21045117</id><snippet>True</snippet></ROW><ROW><id>21045117</id><snippet>&gt;&gt;&gt; cont = "Y"
&gt;&gt;&gt; if cont == "N" or "n":
...     print "cont is N or n"
... 
cont is N or n
</snippet></ROW><ROW><id>21045117</id><snippet>while True:
    ... most of your code ...

    cont = raw_input("Do you want to continue? (Y/N)")
    if cont.lower() == "n":
        break
</snippet></ROW><ROW><id>21045117</id><snippet>#FinalGrade

results = []

print ("\n")
print ("-----------------------------------------------------------------------------")
print ("\n")
Institution = str(input("Please Enter the Name of Your Insitution: "))

while True:
   print ("\n")
   print ("---------------------------------NEW STUDENT---------------------------------")
   print ("\n")
   Year = str(input("Please Enter the Year of the Student (For Example, 'Year 1 / 2 / 3 / 4'): "))
   print ("\n")
   print ("-----------------------------------------------------------------------------")
   print ("\n")
   Student = str(input("Student Full Name: "))
   print ("\n")
   Grade1 = int(input("Enter Student's First Term Grade: "))
   Grade2 = int(input("Enter Student's Second Term Grade: "))
   Grade3 = int(input("Enter Student's Third Term Grade: "))
   Grade4 = int(input("Enter Student's Fourth Term Grade: "))

   average =  (Grade1+Grade2+Grade3+Grade4)/4

   print ("\n")
   print ("-----------------------------------------------------------------------------")
   print ("\n")
   print ("Total Grade Average: %G" % (average))

   passed_or_failed = "PASSED"
   if average &lt; 40:
      passed_or_failed = 'FAILED'
   results.append(passed_or_failed)

   print ("\n")
   print ("%s has: %s" % (Student, passed_or_failed))
   print ("\n")

   cont = input('Do you want to keep entering students? Y/N: ')

   if cont.lower() == "n":
      print ("\n")
      print ("-----------------------------------------------------------------------------")
      print ("\n")
      print ("Thank you for using FinalGrade. Goodbye.")
      break
</snippet></ROW><ROW><id>21045117</id><snippet>while</snippet></ROW><ROW><id>21045255</id><snippet>'app_name.ModelName'</snippet></ROW><ROW><id>21045255</id><snippet>ticket_type=models.ForeignKey('core.TicketType')
</snippet></ROW><ROW><id>21045362</id><snippet> POINT,
 LINE,
 AREA,
 VOLUME
</snippet></ROW><ROW><id>21045362</id><snippet>typedef enum
{
#include "ENUMS.txt" 
} domainType;
</snippet></ROW><ROW><id>21045421</id><snippet>{% url ... %}</snippet></ROW><ROW><id>21045421</id><snippet>url(r'^(?P&lt;poll_id&gt;\d+)/$', views.detail, name='detail'),
</snippet></ROW><ROW><id>21045421</id><snippet>(?P&lt;poll_id&gt;\d+)</snippet></ROW><ROW><id>21045421</id><snippet>{% url 'polls:detail' poll.id %}</snippet></ROW><ROW><id>21045421</id><snippet>poll.id</snippet></ROW><ROW><id>21045421</id><snippet>{% url 'polls:detail' poll_id=poll.id %}
</snippet></ROW><ROW><id>21045421</id><snippet>polls</snippet></ROW><ROW><id>21045421</id><snippet>polls/</snippet></ROW><ROW><id>21045421</id><snippet>url(r'^polls/', include('polls.urls')),
</snippet></ROW><ROW><id>21045421</id><snippet>/polls/</snippet></ROW><ROW><id>21045421</id><snippet>poll.id</snippet></ROW><ROW><id>21045421</id><snippet>1</snippet></ROW><ROW><id>21045421</id><snippet>http://localhost:8000/</snippet></ROW><ROW><id>21045421</id><snippet>http://localhost:8000/polls/1/
</snippet></ROW><ROW><id>21045520</id><snippet>logging</snippet></ROW><ROW><id>21045520</id><snippet>'animal'</snippet></ROW><ROW><id>21045520</id><snippet>'animal.cat'</snippet></ROW><ROW><id>21045520</id><snippet>'animal.dog'</snippet></ROW><ROW><id>21045520</id><snippet>settings.py</snippet></ROW><ROW><id>21045520</id><snippet>'legacy'</snippet></ROW><ROW><id>21045520</id><snippet>'legacy'</snippet></ROW><ROW><id>21045520</id><snippet>mysite.log</snippet></ROW><ROW><id>21045520</id><snippet>'mysite'</snippet></ROW><ROW><id>21045587</id><snippet>multiprocessing</snippet></ROW><ROW><id>21045587</id><snippet>from multiprocessing import Process
import time

def f(name):
    print('hello', name)
    time.sleep(10)

def d(name):
    print('test2', name)
    time.sleep(10)

if __name__ == '__main__':
    p1 = Process(target=f, args=('bob',))
    p2 = Process(target=d, args=('alice',))
    p1.start()
    p2.start()
    p1.join()
    p2.join()
</snippet></ROW><ROW><id>21045587</id><snippet>time python3 ./process.py 
hello bob
test2 alice

real  0m10.073s
user  0m0.040s
sys   0m0.016s
</snippet></ROW><ROW><id>21045622</id><snippet>time</snippet></ROW><ROW><id>21045622</id><snippet>localtime</snippet></ROW><ROW><id>21045622</id><snippet>gmtime</snippet></ROW><ROW><id>21045622</id><snippet>time_convert()</snippet></ROW><ROW><id>21045622</id><snippet>tm_mon</snippet></ROW><ROW><id>21045622</id><snippet>time.gmtime()</snippet></ROW><ROW><id>21045763</id><snippet>class AddressInline(admin.StackedInline):
    model = Address
    fk_name = "address"
    max_num = 1

class BillingAddressInline(admin.StackedInline):
    model = Address
    fk_name = "billing_address"
    max_num = 1


class CompanyAdmin(admin.ModelAdmin):
    # ...
    inlines = [AddressInline, BillingAddressInline]
</snippet></ROW><ROW><id>21045772</id><snippet>input</snippet></ROW><ROW><id>21045772</id><snippet>+</snippet></ROW><ROW><id>21045772</id><snippet>int</snippet></ROW><ROW><id>21045772</id><snippet>variable1 = int(input())
...
variable2 = int(input())
</snippet></ROW><ROW><id>21045868</id><snippet>self.assertRaises(urllib2.URLError, page_data, 'http://faleeeeee.ru')
</snippet></ROW><ROW><id>21045868</id><snippet>with self.assertRaises(urllib2.URLError):
    page_data('http://faleeeeee.ru')
</snippet></ROW><ROW><id>21045929</id><snippet>dic={'value':'123','sort':'desc','type':'float'}     
str=''
for i in dic:
    str = str + i + '=' + dic[i] + '&amp;'
str[:-1]
</snippet></ROW><ROW><id>21045929</id><snippet>reduce(lambda x,y: x+y, [i+'='+dic[i]+'&amp;' for i in dic])[:-1]
</snippet></ROW><ROW><id>21045949</id><snippet>from __future__ import with_statement
</snippet></ROW><ROW><id>21045949</id><snippet>with</snippet></ROW><ROW><id>21045949</id><snippet>csv</snippet></ROW><ROW><id>21045949</id><snippet>re</snippet></ROW><ROW><id>21045949</id><snippet>re</snippet></ROW><ROW><id>21045949</id><snippet>.</snippet></ROW><ROW><id>21045949</id><snippet>,</snippet></ROW><ROW><id>21045979</id><snippet>b = list(a.row)
</snippet></ROW><ROW><id>21046082</id><snippet>list1 = ['a', 'e', 't', 'b', 'c']
list2 = ['e', 'b', 'a', 'c', 'n', 's']

weights = defaultdict(int)

for i, e in enumerate(list1):
   weights[e] += i

for i, e in enumerate(list2):
   weights[e] += i

&gt;&gt;&gt; result = sorted(set(list1) &amp; set(list2), key=lambda i: weights[i])
&gt;&gt;&gt; result
['e', 'a', 'b', 'c']
</snippet></ROW><ROW><id>21046182</id><snippet>CSI 15 ~</snippet></ROW><ROW><id>21046182</id><snippet>CSI 12 ~</snippet></ROW><ROW><id>21046182</id><snippet>SSE Q</snippet></ROW><ROW><id>21046182</id><snippet>'\eOQ</snippet></ROW><ROW><id>21046302</id><snippet>select_boxes = driver.find_elements_by_class_name("action")
for select_box in select_boxes:
    print select_box.get_attribute("value")
</snippet></ROW><ROW><id>21046333</id><snippet>change</snippet></ROW><ROW><id>21046333</id><snippet>cur1.executemany("""INSERT INTO delay (running,`change`,nomaterial,breakdown,quality,noplan,line,shift) VALUE(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)""", datater1)
</snippet></ROW><ROW><id>21046450</id><snippet>users_list.append[suser]</snippet></ROW><ROW><id>21046450</id><snippet>users_list.append(suser)</snippet></ROW><ROW><id>21046512</id><snippet>types = ["guitar", "piano", ...] # note case

while True:
    type_ = str(input("Please enter the tutor type: "))
    if type_.lower() in types: # checks all items in types in one line
        break # leave while loop
    print("Please enter a correct type!") # only happens once per loop
</snippet></ROW><ROW><id>21046512</id><snippet>type_.capitalize()</snippet></ROW><ROW><id>21047099</id><snippet>data = """
#include &lt;stdlib.h&gt;
#include "mylib.h"
"""
import re
pattern = re.compile("#\s*include\s*(?:&lt;.*?&gt;|\".*?\")")
print pattern.findall(data)
</snippet></ROW><ROW><id>21047099</id><snippet>['#include &lt;stdlib.h&gt;', '#include "mylib.h"']
</snippet></ROW><ROW><id>21047128</id><snippet>dict</snippet></ROW><ROW><id>21047128</id><snippet>if: elif:</snippet></ROW><ROW><id>21047128</id><snippet>requests.get</snippet></ROW><ROW><id>21047128</id><snippet>function_dict = {'get_id': (requests.get, # function
                            (url + "/users/" + user,), # tuple of arguments  
                            {'headers': self.headers}), # dict of keyword args
                 ...}
</snippet></ROW><ROW><id>21047128</id><snippet>func, args, kwargs = function_dict[request]
result = func(*args, **kwargs)
</snippet></ROW><ROW><id>21047128</id><snippet>is</snippet></ROW><ROW><id>21047128</id><snippet>==</snippet></ROW><ROW><id>21047128</id><snippet>if request == 'get_id':
</snippet></ROW><ROW><id>21047132</id><snippet>from unittest.mock import patch
from unittest import TestCase


def get_input(text):
    return input(text)


def answer():
    ans = get_input('enter yes or no')
    if ans == 'yes':
        return 'you entered yes'
    if ans == 'no':
        return 'you entered no'


class Test(TestCase):

    # get_input will return 'yes' during this test
    @patch('yourmodule.get_input', return_value='yes')
    def test_answer_yes(self, input):
        self.assertEqual(answer(), 'you entered yes')

    @patch('yourmodule.get_input', return_value='no')
    def test_answer_no(self, input):
        self.assertEqual(answer(), 'you entered no')
</snippet></ROW><ROW><id>21047219</id><snippet>x = [1,2,3,4,5,6]
restart = True
while restart:
    for i in x:
        # add any exit condition!
        # if foo == bar:
        #   restart = False
        #   break
        if i == 4:
           break
        else:
            print i
</snippet></ROW><ROW><id>21047395</id><snippet>In [1]: habitat_species.apply(lambda x: habitat_family[lookupMap[x.name]])
Out[1]:
    tiger  lion  mosquito  ladybug  locust  seal  seabass  shark  dolphin
1     101   101       345      345     345   101      625    625      101
2     123   123       928      928     928   123      254    254      123
3     523   523       183      183     183   523      929    929      523
4     562   562       645      645     645   562      827    827      562
5     546   546       113      113     113   546      102    102      546
6     213   213       942      942     942   213      295    295      213
7     562   562       689      689     689   562      174    174      562
8     234   234       539      539     539   234      777    777      234
9     987   987       789      789     789   987      123    123      987
10    901   901       814      814     814   901      763    763      901

%timeit habitat_species.apply(lambda x: habitat_family[lookupMap[x.name]])
1000 loops, best of 3: 1.57 ms per loop
</snippet></ROW><ROW><id>21047416</id><snippet>FileField</snippet></ROW><ROW><id>21047416</id><snippet>read</snippet></ROW><ROW><id>21047416</id><snippet>FileField</snippet></ROW><ROW><id>21047416</id><snippet>display_text_file</snippet></ROW><ROW><id>21047416</id><snippet>class MyModel(models.Model):
    name = models.CharField(max_length=100)
    text = models.FileField(max_length=100, upload_to='.')

def display_text_file(self):
    with open(self.text.path) as fp:
        return fp.read().replace('\n', '&lt;br&gt;')
</snippet></ROW><ROW><id>21047416</id><snippet>def show_files(request):
    objects = MyModel.objects.all()
    return render_to_response('show_files.html', {'objects': objects},
                              context_instance=RequestContext(request))
</snippet></ROW><ROW><id>21047416</id><snippet>{% for obj in objects %}

 &lt;p&gt;
   file name: {{obj.name}} &lt;br&gt;
   file content: {{obj.display_text_file}}
 &lt;/p&gt;

{% endfor %}
</snippet></ROW><ROW><id>21047416</id><snippet>display_text_file</snippet></ROW><ROW><id>21047416</id><snippet>def display_text_file(self):
    with open(self.text.path) as fp:
        return fp.read().replace('\n', '&lt;br&gt;')

def display_text_file(self):
    self.text.open() # reset the pointer of file, needs if you need to read file more than once, in a request.
    return self.text.read().replace('\n', '&lt;br&gt;')

def display_text_file(self):
    self.text.open() # reset the pointer of file, needs if you need to read file more than once, in a request.
    return self.text.file.read().replace('\n', '&lt;br&gt;')
</snippet></ROW><ROW><id>21047416</id><snippet>self.text</snippet></ROW><ROW><id>21047416</id><snippet>django.db.models.fields.files.FieldFile</snippet></ROW><ROW><id>21047416</id><snippet>['DEFAULT_CHUNK_SIZE', 'chunks', 'close', 'closed', 'delete', 'encoding', 'field', 'file', 
'fileno', 'flush', 'instance', 'isatty', 'multiple_chunks', 'name', 'newlines', 'open', 'path', 
'read', 'readinto', 'readline', 'readlines', 'save', 'seek', 'size', 'softspace', 'storage', 'tell', 
'truncate', 'url', 'write', 'writelines', 'xreadlines']
</snippet></ROW><ROW><id>21047416</id><snippet>self.text.file</snippet></ROW><ROW><id>21047416</id><snippet>django.core.files.base.File</snippet></ROW><ROW><id>21047416</id><snippet>['DEFAULT_CHUNK_SIZE', 'chunks', 'close', 'closed', 'encoding', 'file', 
'fileno', 'flush', 'isatty', 'mode', 'multiple_chunks', 'name', 'newlines', 'open', 
'read', 'readinto', 'readline', 'readlines', 'seek', 'size', 'softspace', 'tell', 
'truncate', 'write', 'writelines', 'xreadlines']
</snippet></ROW><ROW><id>21047416</id><snippet>read</snippet></ROW><ROW><id>21047480</id><snippet>object</snippet></ROW><ROW><id>21047480</id><snippet>'instance'</snippet></ROW><ROW><id>21047480</id><snippet>type</snippet></ROW><ROW><id>21047480</id><snippet>x</snippet></ROW><ROW><id>21047480</id><snippet>x.__class__</snippet></ROW><ROW><id>21047480</id><snippet>type(x)</snippet></ROW><ROW><id>21047480</id><snippet>&lt;type 'instance'&gt;</snippet></ROW><ROW><id>21047480</id><snippet>object</snippet></ROW><ROW><id>21047480</id><snippet>class Class1(object): pass
</snippet></ROW><ROW><id>21047480</id><snippet>&gt;&gt;&gt; class Class1(object): pass

&gt;&gt;&gt; type(Class1())
&lt;class '__main__.Class1'&gt;
</snippet></ROW><ROW><id>21047706</id><snippet>most_common(1)</snippet></ROW><ROW><id>21047706</id><snippet>self.mode, _ = self.mode_counter.most_common(1)[0]</snippet></ROW><ROW><id>21047706</id><snippet>self.mode = self.mode_counter.most_common(1)[0][0]</snippet></ROW><ROW><id>21047823</id><snippet>activeThreads.append(id);</snippet></ROW><ROW><id>21047823</id><snippet>check_port</snippet></ROW><ROW><id>21047823</id><snippet>id</snippet></ROW><ROW><id>21047823</id><snippet>builtin_function_or_method</snippet></ROW><ROW><id>21047823</id><snippet>for t in activeThreads: 
    t.join()
</snippet></ROW><ROW><id>21047870</id><snippet>&gt;&gt;&gt; lst = ['\xd9\x88\xd8\xb1\xd9\x88\xd8\xaf',
           '\xd9\x85\xd9\x85\xd9\x86\xd9\x88\xd8\xb9']
&gt;&gt;&gt; for l in lst:
...  print l
... 
Ÿàÿ±ŸàÿØ
ŸÖŸÖŸÜŸàÿπ
</snippet></ROW><ROW><id>21047870</id><snippet>&gt;&gt;&gt; lst = [e.decode('utf-8') for e in lst]
&gt;&gt;&gt; lst
[u'\u0648\u0631\u0648\u062f', u'\u0645\u0645\u0646\u0648\u0639']
</snippet></ROW><ROW><id>21047882</id><snippet>pandas.pyc</snippet></ROW><ROW><id>21047949</id><snippet>map</snippet></ROW><ROW><id>21047949</id><snippet>&gt;&gt;&gt; map(lambda f: f(3), [lambda x: x**2,lambda x: x**3])
[9, 27]
</snippet></ROW><ROW><id>21048085</id><snippet>__lt__</snippet></ROW><ROW><id>21048085</id><snippet>__eq__</snippet></ROW><ROW><id>21048364</id><snippet>git clone https://github.com/django-nonrel/django.git my_folder
</snippet></ROW><ROW><id>21048364</id><snippet>cd my_folder
python setup.py build
python setup.py install
</snippet></ROW><ROW><id>21048397</id><snippet>a</snippet></ROW><ROW><id>21048397</id><snippet>starts=numpy.intersect1d(numpy.where(a&lt;44)[0]+1,numpy.where(a&gt;44)[0])
print(numpy.split(a,starts))
</snippet></ROW><ROW><id>21048557</id><snippet>&gt;&gt;&gt; l1 = [1,2,3,4,5,6,7,8,10]
&gt;&gt;&gt; l2 = ['a','b']
&gt;&gt;&gt; 
&gt;&gt;&gt; from itertools import cycle
&gt;&gt;&gt; 
&gt;&gt;&gt; for number, letter in zip(l1, cycle(l2)):
...     print number, letter
... 
1 a
2 b
3 a
4 b
5 a
6 b
7 a
8 b
10 a
</snippet></ROW><ROW><id>21048557</id><snippet>itertools.cycle</snippet></ROW><ROW><id>21048557</id><snippet>list</snippet></ROW><ROW><id>21048557</id><snippet>list()</snippet></ROW><ROW><id>21048708</id><snippet>from pylab import *
from scipy.integrate import *

def RHS(t, x):
    return -x

min_t = 0.0
max_t = 10.0
num_t = 1e2
grid_t = linspace(min_t, max_t, num_t)
grid_dt = (max_t - min_t)/(num_t - 1)

y = zeros(num_t, dtype=complex)
y[0] = complex(1.0, 0.0)

solver = complex_ode(RHS)
solver.set_initial_value(y[0], grid_t[0]).set_integrator('dopri5')

for idx in range(1, int(num_t)):
    solver.integrate(solver.t + grid_dt)
    y[idx] = solver.y[0]
</snippet></ROW><ROW><id>21048731</id><snippet>diary</snippet></ROW><ROW><id>21048731</id><snippet>for x = 1:1000
    diary(['foo_' num2str(x) '.m' ])
    disp(['a = ' num2str(x) ';'])
    disp(['b = ''' num2str(x) '_1'';'])
    disp(['c = ''' num2str(x) '_2'';'])
    diary off
    disp(' ')
end
</snippet></ROW><ROW><id>21048731</id><snippet>    diary(['foo_' num2str(x,'%.4d') '.m' ])
</snippet></ROW><ROW><id>21048743</id><snippet>reduce</snippet></ROW><ROW><id>21048743</id><snippet>operator.getitem</snippet></ROW><ROW><id>21048743</id><snippet>from operator import getitem
reduce(getitem, L, D)[K] = V
</snippet></ROW><ROW><id>21048743</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(D)
{'outermost': {'inner': {'key1': 'add a value',
                         'key2': '',
                         'key3': '',
                         'key4': '',
                         'key5': ''}}}
</snippet></ROW><ROW><id>21049167</id><snippet>class Vector(object):
    def __init__(self, arguments):
        object.__setattr__(self, 'contents', list(arguments))

    def __iter__(self):
        return iter(self.contents)

    def __getitem__(self, key):
        return self.contents[key]

    def __setitem__(self, key, value):
        self.contents[key] = value

    def __delitem__(self, key):
        del self.contents[key]

    def __setattr__(self, key, value):
        for node in self.contents:
            setattr(node, key, value)
</snippet></ROW><ROW><id>21049167</id><snippet>Vector(units).hitpoint = 50

# This also still works...
for unit in Vector(units):
    unit.hitpoint = 50

# This also still works...
Vector(unit)[2].hitpoint = 50
</snippet></ROW><ROW><id>21049171</id><snippet>work
call
work
call
work
return
</snippet></ROW><ROW><id>21049171</id><snippet>n == 0</snippet></ROW><ROW><id>21049171</id><snippet>n</snippet></ROW><ROW><id>21049171</id><snippet>n</snippet></ROW><ROW><id>21049171</id><snippet>call</snippet></ROW><ROW><id>21049171</id><snippet>n = 2
work
    n = 1
    work
    call
    work
    call
    work
work
    n = 1
    work
    call
    work
    call
    work
    return
work
return
</snippet></ROW><ROW><id>21049171</id><snippet>n</snippet></ROW><ROW><id>21049171</id><snippet>n = 2</snippet></ROW><ROW><id>21049171</id><snippet>n = 0</snippet></ROW><ROW><id>21049171</id><snippet>n = 2
work
    n = 1
    work
        n = 0
        return
    work
        n = 0
        return
    work
    return
work
    n = 1
    work
        n = 0
        return
    work
        n = 0
        return
    work
    return
work
return
</snippet></ROW><ROW><id>21049171</id><snippet>n = 2</snippet></ROW><ROW><id>21049171</id><snippet>n</snippet></ROW><ROW><id>21049171</id><snippet>work - call - work - call - work - return</snippet></ROW><ROW><id>21049171</id><snippet>call</snippet></ROW><ROW><id>21049270</id><snippet>class options(object):
    def __init__(self, somearg):
        self.somearg = somearg

    def __call__(self, func):
        func.options = self
        return func

&gt;&gt;&gt; @options('foo')
... def myfunc(): pass
...
&gt;&gt;&gt; myfunc.options
... &lt;__main__.options at 0x19f6d90&gt;
&gt;&gt;&gt; myfunc.options.somearg
... 'foo'
</snippet></ROW><ROW><id>21049270</id><snippet>class record_decorator(object):
    def __init__(self, decorator):
        self.decorator = decorator

    def __call__(self, func):
        result = self.decorator(func)
        if not hasattr(result, 'decorators'):
            if hasattr(func, 'decorators'):
                result.decorators = func.decorators[:]  # copy
            else:
                result.decorators = []
        result.decorators.append(self.decorator)
        return result

&gt;&gt;&gt; def a(func):
...     print 'decorating with a'
...     return func
...
&gt;&gt;&gt; def a(func):
...     print 'decorating with a'
...     return func
...
&gt;&gt;&gt; @record_decorator(b)
... @record_decorator(a)
... def myfunc(): pass
...
decorating with a
decorating with b
&gt;&gt;&gt; myfunc.decorators
[&lt;function __main__.a&gt;, &lt;function __main__.b&gt;]
</snippet></ROW><ROW><id>21049270</id><snippet>myfunc.decorators</snippet></ROW><ROW><id>21049270</id><snippet>record_decorator</snippet></ROW><ROW><id>21049294</id><snippet>&gt;&gt;&gt; a = np.random.randint(0, 9, (3,6))
&gt;&gt;&gt; a
array([[7, 1, 7, 4, 2, 0],
       [7, 5, 7, 1, 8, 5],
       [3, 5, 5, 3, 5, 5]])

&gt;&gt;&gt; a[:, [5, 2, 0]]
array([[0, 7, 7],
       [5, 7, 7],
       [5, 5, 3]])
</snippet></ROW><ROW><id>21049485</id><snippet>def monkey_patch(self):
    add = self.add # add now points to self.add
    def squared_sum(x, y):
        return x**2 + y**2
    add = types.MethodType(squared_sum, self) # add now points to squared_sum
# method ends, add and squared_sum are abandoned
</snippet></ROW><ROW><id>21049485</id><snippet>self.add</snippet></ROW><ROW><id>21049485</id><snippet>squared_sum</snippet></ROW><ROW><id>21049485</id><snippet>self</snippet></ROW><ROW><id>21049485</id><snippet>name</snippet></ROW><ROW><id>21049485</id><snippet>add</snippet></ROW><ROW><id>21049485</id><snippet>print</snippet></ROW><ROW><id>21049485</id><snippet>add</snippet></ROW><ROW><id>21049485</id><snippet>def monkey_patch(self):
    def squared_sum(self, x, y, name):
        self.name = name
        print 'calling from ', self.name
        return x**2 + y**2
    self.add = types.MethodType(squared_sum, self) 
</snippet></ROW><ROW><id>21049485</id><snippet>math = Math()

def func(self, x, y, name):
    return x ** y

math.add = types.MethodType(func, math)
</snippet></ROW><ROW><id>21049679</id><snippet>sorted</snippet></ROW><ROW><id>21049679</id><snippet>reverse</snippet></ROW><ROW><id>21049679</id><snippet>cmp</snippet></ROW><ROW><id>21049679</id><snippet>key</snippet></ROW><ROW><id>21049679</id><snippet>sorted(A, reverse=True)</snippet></ROW><ROW><id>21049679</id><snippet>fpin</snippet></ROW><ROW><id>21049679</id><snippet>string</snippet></ROW><ROW><id>21049679</id><snippet>**kwargs</snippet></ROW><ROW><id>21049679</id><snippet>**kwargs</snippet></ROW><ROW><id>21049837</id><snippet>def recursive(input, output=None):
    if output is None:
        output = {} # container to store results
    if 'children' in input:
        # do whatever, add things to output
        recursive(input['children'], output)
    return output
</snippet></ROW><ROW><id>21049837</id><snippet>output</snippet></ROW><ROW><id>21049837</id><snippet>return</snippet></ROW><ROW><id>21049837</id><snippet>return</snippet></ROW><ROW><id>21049837</id><snippet>def recursive(input, output=None):
    if output is None:
        output = {} # container to store results
    if 'children' in input:
        for child in input['children']:
            # do whatever, add things to output
            recursive(child, output)
    return output    
</snippet></ROW><ROW><id>21049837</id><snippet>output</snippet></ROW><ROW><id>21049837</id><snippet>list</snippet></ROW><ROW><id>21049837</id><snippet>set</snippet></ROW><ROW><id>21049897</id><snippet>datetime.date(datetime.strptime(datestr,'%Y-%m-%d'))</snippet></ROW><ROW><id>21050036</id><snippet>./manage.py shell</snippet></ROW><ROW><id>21050036</id><snippet>from django.template import Context, Template
from collections import Counter

t = Template('{% for k,v in results.items %}{% for a,b in v.items %}[{{ a }}, {{ b }}]{% endfor %}{% endfor %}')
c = Context({"results": {"question1": Counter({'1': 3, '': 1, '2': 1})}})
t.render(c)
</snippet></ROW><ROW><id>21050036</id><snippet>items</snippet></ROW><ROW><id>21050036</id><snippet>for</snippet></ROW><ROW><id>21050036</id><snippet>dict.items</snippet></ROW><ROW><id>21050036</id><snippet>Counter</snippet></ROW><ROW><id>21050036</id><snippet>Counter</snippet></ROW><ROW><id>21050036</id><snippet>dict</snippet></ROW><ROW><id>21050036</id><snippet>Context</snippet></ROW><ROW><id>21050036</id><snippet>from django.template import Context, Template
from collections import Counter

t = Template('{% for k,v in results.items %}{% for a,b in v.items %}[{{ a }}, {{ b }}]{% endfor %}{% endfor %}')
c = Context({"results": {"question1": dict(Counter({'1': 3, '': 1, '2': 1}))}})
t.render(c)
</snippet></ROW><ROW><id>21050036</id><snippet>u'[1, 3][, 1][2, 1]'
</snippet></ROW><ROW><id>21050117</id><snippet>import re
reValidIPv4 = re.compile(r"""
    # Match a valid IPv4 in the wild.
    (?:                                         # Group two start-of-IP assertions.
      ^                                         # Either the start of a line,
    | (?&lt;=\s)                                   # or preceeded by whitespace.
    )                                           # Group two start-of-IP assertions.
    (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)    # First number in range 0-255 
    (?:                                         # Exactly 3 additional numbers.
      \.                                        # Numbers separated by dot.
      (?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)  # Number in range 0-255 .
    ){3}                                        # Exactly 3 additional numbers.
    (?=$|\s)                                    # End IP on whitespace or EOL.
    """, re.VERBOSE | re.MULTILINE)

text = "10.0.0.1.1 but 127.0.0.256 1.1.1.1"
l = reValidIPv4.findall(text)
print(l)
</snippet></ROW><ROW><id>21050582</id><snippet>Rule</snippet></ROW><ROW><id>21050582</id><snippet>strict_slashes</snippet></ROW><ROW><id>21050582</id><snippet>@app.route('/projects/')
def projects():
    return 'The project page'

@app.route('/about')
def about():
    return 'The about page'
</snippet></ROW><ROW><id>21050582</id><snippet>strict_slashes=False</snippet></ROW><ROW><id>21050654</id><snippet>&gt;&gt;&gt; df["amount"].fillna(df.groupby("id")["amount"].transform("mean"), inplace=True)
&gt;&gt;&gt; df["amount"].fillna(df["amount"].mean(), inplace=True)
</snippet></ROW><ROW><id>21050654</id><snippet>&gt;&gt;&gt; df
    id   type  amount
0    1    one   345.0
1    2    one   928.0
2    3    two   942.0
3    2  three   645.0
4    2    two   113.0
5    3  three   942.0
6    1    one   442.0
7    1    two   539.0
8    1    one   442.0
9    2  three   814.0
10   4    one   615.2

[11 rows x 3 columns]
</snippet></ROW><ROW><id>21050681</id><snippet>docutils</snippet></ROW><ROW><id>21050681</id><snippet>OmniMarkupPreviewer</snippet></ROW><ROW><id>21050775</id><snippet>plt.savefig(str(new_counter)+'foo.eps')
</snippet></ROW><ROW><id>21050827</id><snippet>django.contribute.admin</snippet></ROW><ROW><id>21050827</id><snippet>INSTALLED_APP</snippet></ROW><ROW><id>21051049</id><snippet>QWidget</snippet></ROW><ROW><id>21051049</id><snippet>show()</snippet></ROW><ROW><id>21051049</id><snippet>hide()</snippet></ROW><ROW><id>21051049</id><snippet>QWidget</snippet></ROW><ROW><id>21051049</id><snippet>QWidget</snippet></ROW><ROW><id>21051049</id><snippet>hide</snippet></ROW><ROW><id>21051049</id><snippet>Single</snippet></ROW><ROW><id>21051049</id><snippet>widget.hide()</snippet></ROW><ROW><id>21051049</id><snippet>Split</snippet></ROW><ROW><id>21051049</id><snippet>show()</snippet></ROW><ROW><id>21051049</id><snippet>QSplitter</snippet></ROW><ROW><id>21051049</id><snippet>Single</snippet></ROW><ROW><id>21051049</id><snippet>splitter.setSizes([self.width(), 0])
</snippet></ROW><ROW><id>21051049</id><snippet>split</snippet></ROW><ROW><id>21051049</id><snippet>splitter.setSizes([self.width()/2, self.width()/2])
</snippet></ROW><ROW><id>21051049</id><snippet>self</snippet></ROW><ROW><id>21051049</id><snippet>self.width()</snippet></ROW><ROW><id>21051098</id><snippet>IndexError</snippet></ROW><ROW><id>21051098</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; v = np.array([[1, 2, 3]])
&gt;&gt;&gt; r = np.array([[1, 2, 3], [0, 9, 8], [2, 4, 4]])
&gt;&gt;&gt; l = np.array([[4, 5, 6], [7, 8, 9]])
def get_index(seq, *arrays):
    for array in arrays:
        try:
            return np.where(array==seq)[0][0]
        except IndexError:
            pass
...         
&gt;&gt;&gt; get_index(v, r, l)
0
&gt;&gt;&gt; get_index(np.array([7, 8, 9]), r, l)
1
</snippet></ROW><ROW><id>21051098</id><snippet>None</snippet></ROW><ROW><id>21051098</id><snippet> def get_index(seq, **arrays):
    for name, array in arrays.items():
        try:
            return name, np.where(array==seq)[0][0]
        except IndexError:
            pass
...         
&gt;&gt;&gt; get_index(v, **dict(r=r, l=l))
('r', 0)
&gt;&gt;&gt; get_index(np.array([7, 8, 9]), **dict(r=r, l=l))
('l', 1)
</snippet></ROW><ROW><id>21051121</id><snippet>ufunc.reduce</snippet></ROW><ROW><id>21051121</id><snippet>op.identity</snippet></ROW><ROW><id>21051121</id><snippet>numpy.bitwise_and.identity</snippet></ROW><ROW><id>21051121</id><snippet>1</snippet></ROW><ROW><id>21051121</id><snippet>0xffffffff....</snippet></ROW><ROW><id>21051121</id><snippet>-1</snippet></ROW><ROW><id>21051121</id><snippet>&gt;&gt;&gt; np.bitwise_and.identity
1
</snippet></ROW><ROW><id>21051121</id><snippet>numpy.bitwise_and.reduce([0x211f,0x1013,0x1111])</snippet></ROW><ROW><id>21051121</id><snippet>&gt;&gt;&gt; np.bitwise_and(np.bitwise_and(np.bitwise_and(1, 0x211f), 0x1013), 0x1111)
1
&gt;&gt;&gt; 1 &amp; 0x211f &amp; 0x1013 &amp; 0x1111
1
</snippet></ROW><ROW><id>21051121</id><snippet>&gt;&gt;&gt; -1 &amp; 0x211f &amp; 0x1013 &amp; 0x1111
17
</snippet></ROW><ROW><id>21051121</id><snippet>reduce</snippet></ROW><ROW><id>21051123</id><snippet>//comment()[.="a comment "]/following-sibling::node()
</snippet></ROW><ROW><id>21051123</id><snippet>&gt;&gt;&gt; xml.xpath('//comment()[.="a comment "]/following-sibling::node()')
[' some more text ', &lt;Element b at 0x2923af0&gt;, ' ', &lt;!-- other comment --&gt;, ' something else etc']
</snippet></ROW><ROW><id>21051269</id><snippet>gl</snippet></ROW><ROW><id>21051269</id><snippet>'2'</snippet></ROW><ROW><id>21051269</id><snippet>int()</snippet></ROW><ROW><id>21051269</id><snippet>&gt;&gt;&gt; gl = (('2',),)
&gt;&gt;&gt; gl[0][0]
'2'
</snippet></ROW><ROW><id>21051269</id><snippet>gl</snippet></ROW><ROW><id>21051269</id><snippet>&gt;&gt;&gt; int(gl[0][0])
2
</snippet></ROW><ROW><id>21051510</id><snippet>self</snippet></ROW><ROW><id>21051510</id><snippet>Label</snippet></ROW><ROW><id>21051510</id><snippet>Entry</snippet></ROW><ROW><id>21051510</id><snippet>image_set_label = Label(self, text="Image Set Type: ") # made self parent
image_set_label.grid(row=1, column=0, pady=10)
self._image_set_type = Entry(self) # made self parent
self._image_set_type.insert(0, "Ramp")
self._image_set_type.grid(row=1, column=1, pady=10, columnspan=2)
</snippet></ROW><ROW><id>21051695</id><snippet>&gt;&gt;&gt; a, b = 'cd'
&gt;&gt;&gt; a
'c'
&gt;&gt;&gt; b
'd'
</snippet></ROW><ROW><id>21051695</id><snippet>ValueError</snippet></ROW><ROW><id>21051695</id><snippet>TypeError</snippet></ROW><ROW><id>21051695</id><snippet>&gt;&gt;&gt; a, b = 42
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'int' object is not iterable
</snippet></ROW><ROW><id>21051695</id><snippet>for</snippet></ROW><ROW><id>21051695</id><snippet>&gt;&gt;&gt; a, b = set([1, 2])
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
2
</snippet></ROW><ROW><id>21052094</id><snippet>bytes</snippet></ROW><ROW><id>21052094</id><snippet>@</snippet></ROW><ROW><id>21052094</id><snippet>0x0a</snippet></ROW><ROW><id>21052094</id><snippet>\n</snippet></ROW><ROW><id>21052094</id><snippet>\x00</snippet></ROW><ROW><id>21052094</id><snippet>&gt;&gt;&gt; b'\x40' == b'@'
True
&gt;&gt;&gt; b'\x0a' == b'\n'
True
</snippet></ROW><ROW><id>21052094</id><snippet>\xhh</snippet></ROW><ROW><id>21052094</id><snippet>\c</snippet></ROW><ROW><id>21052094</id><snippet>binascii.hexlify()</snippet></ROW><ROW><id>21052094</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.hexlify(b'@\x00\x00\x00')
b'40000000'
&gt;&gt;&gt; binascii.hexlify(b'\n\x00\x00\x00')
b'0a000000'
</snippet></ROW><ROW><id>21052094</id><snippet>a</snippet></ROW><ROW><id>21052094</id><snippet>f</snippet></ROW><ROW><id>21052094</id><snippet>0</snippet></ROW><ROW><id>21052094</id><snippet>9</snippet></ROW><ROW><id>21052378</id><snippet>//span[starts-with(name(), 'Price')]/text()
</snippet></ROW><ROW><id>21052378</id><snippet>//span[starts-with(., 'Price')]/text()
</snippet></ROW><ROW><id>21052378</id><snippet>//span[contains(., 'Price')]/text()
</snippet></ROW><ROW><id>21052378</id><snippet>//span[contains(name(), 'Price')]/text()
</snippet></ROW><ROW><id>21052535</id><snippet>operator</snippet></ROW><ROW><id>21052535</id><snippet>import operator
# Below is a mapping of op symbols to their corresponding functions
ops = {
    '+' : operator.add, 
    '-' : operator.sub, 
    '*' : operator.mul, 
    '/' : operator.truediv, 
    '==' : operator.eq, 
    '&gt;' : operator.gt, 
    '&lt;' : operator.lt
}
def func(op, x, y):
    try:
        return ops[op](x, y)
    except KeyError:
        return 'ERROR'
</snippet></ROW><ROW><id>21052535</id><snippet>&gt;&gt;&gt; func('+', 2, 1)
3
&gt;&gt;&gt; func('-', 2, 1)
1
&gt;&gt;&gt; func('*', 2, 1)
2
&gt;&gt;&gt; func('/', 2, 1)
2.0
&gt;&gt;&gt; func('==', 2, 1)
False
&gt;&gt;&gt; func('&gt;', 2, 1)
True
&gt;&gt;&gt; func('&lt;', 2, 1)
False
&gt;&gt;&gt; func('&amp;', 2, 1) # Just to demonstrate
'ERROR'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21052697</id><snippet>__eq__</snippet></ROW><ROW><id>21052697</id><snippet>True</snippet></ROW><ROW><id>21052697</id><snippet>primary_key = True</snippet></ROW><ROW><id>21053112</id><snippet>metric</snippet></ROW><ROW><id>21053112</id><snippet>&gt;&gt;&gt; def mydist(x, y):
...     return np.sum((x-y)**2)
...
&gt;&gt;&gt; X = np.array([[-1, -1], [-2, -1], [-3, -2], [1, 1], [2, 1], [3, 2]])

&gt;&gt;&gt; nbrs = NearestNeighbors(n_neighbors=4, algorithm='ball_tree',
...            metric='pyfunc', func=mydist)
&gt;&gt;&gt; nbrs.fit(X)
NearestNeighbors(algorithm='ball_tree', leaf_size=30, metric='pyfunc',
         n_neighbors=4, radius=1.0)
&gt;&gt;&gt; nbrs.kneighbors(X)
(array([[  0.,   1.,   5.,   8.],
       [  0.,   1.,   2.,  13.],
       [  0.,   2.,   5.,  25.],
       [  0.,   1.,   5.,   8.],
       [  0.,   1.,   2.,  13.],
       [  0.,   2.,   5.,  25.]]), array([[0, 1, 2, 3],
       [1, 0, 2, 3],
       [2, 1, 0, 3],
       [3, 4, 5, 0],
       [4, 3, 5, 0],
       [5, 4, 3, 0]]))
</snippet></ROW><ROW><id>21053222</id><snippet>[]</snippet></ROW><ROW><id>21053222</id><snippet>.loc</snippet></ROW><ROW><id>21053222</id><snippet>&gt;&gt;&gt; df.loc["two"]
a     4
c    14
Name: two, dtype: int64
&gt;&gt;&gt; type(_)
&lt;class 'pandas.core.series.Series'&gt;
&gt;&gt;&gt; df.loc[["two"]]
     a   c
b         
two  4  14

[1 rows x 2 columns]
&gt;&gt;&gt; type(_)
&lt;class 'pandas.core.frame.DataFrame'&gt;
</snippet></ROW><ROW><id>21053222</id><snippet>numpy</snippet></ROW><ROW><id>21053222</id><snippet>&gt;&gt;&gt; a = np.arange(9).reshape(3,3)
&gt;&gt;&gt; a[1]
array([3, 4, 5])
&gt;&gt;&gt; a[[1]]
array([[3, 4, 5]])
</snippet></ROW><ROW><id>21053433</id><snippet>del</snippet></ROW><ROW><id>21053433</id><snippet>del x</snippet></ROW><ROW><id>21053433</id><snippet>x = None</snippet></ROW><ROW><id>21053433</id><snippet>x</snippet></ROW><ROW><id>21053433</id><snippet>memory_profiler</snippet></ROW><ROW><id>21053433</id><snippet>psutil</snippet></ROW><ROW><id>21053433</id><snippet>malloc</snippet></ROW><ROW><id>21053433</id><snippet>tracemalloc</snippet></ROW><ROW><id>21053433</id><snippet>heapy</snippet></ROW><ROW><id>21053433</id><snippet>guppy</snippet></ROW><ROW><id>21053433</id><snippet>Pympler</snippet></ROW><ROW><id>21053433</id><snippet>meliae</snippet></ROW><ROW><id>21053433</id><snippet>gc</snippet></ROW><ROW><id>21053473</id><snippet>re.DOTALL</snippet></ROW><ROW><id>21053473</id><snippet>.findall()</snippet></ROW><ROW><id>21053473</id><snippet>import re
response = '''id="this_id"&gt;
blah
&lt;/div&gt; &lt;div id="another_id"'''

descriptionRegex = r'id="this_id"&gt;(.*)&lt;/div&gt;\s*&lt;div\ id="another_id"'

for found in re.findall(descriptionRegex, response, re.DOTALL ) :
   print found
</snippet></ROW><ROW><id>21053553</id><snippet>lcmm(*range(1,5))</snippet></ROW><ROW><id>21053553</id><snippet>range(1, 5)</snippet></ROW><ROW><id>21053553</id><snippet>*</snippet></ROW><ROW><id>21053553</id><snippet>lcmm(1, 2, 3, 4)</snippet></ROW><ROW><id>21053553</id><snippet>def lcmm(*args):</snippet></ROW><ROW><id>21053553</id><snippet>*</snippet></ROW><ROW><id>21053553</id><snippet>args</snippet></ROW><ROW><id>21053553</id><snippet>args</snippet></ROW><ROW><id>21053553</id><snippet>(1, 2, 3, 4)</snippet></ROW><ROW><id>21053553</id><snippet>reduce(lcm, range(1,5))</snippet></ROW><ROW><id>21053553</id><snippet>reduce(lcm, args)</snippet></ROW><ROW><id>21053553</id><snippet>args = (1, 2, 3, 4)</snippet></ROW><ROW><id>21053553</id><snippet>lcmm(range(1,5))</snippet></ROW><ROW><id>21053553</id><snippet>[1, 2, 3, 4]</snippet></ROW><ROW><id>21053553</id><snippet>def lcmm(*args):</snippet></ROW><ROW><id>21053553</id><snippet>*args</snippet></ROW><ROW><id>21053553</id><snippet>args</snippet></ROW><ROW><id>21053553</id><snippet>([1, 2, 3, 4],)</snippet></ROW><ROW><id>21053553</id><snippet>[1, 2, 3, 4]</snippet></ROW><ROW><id>21053553</id><snippet>lcm</snippet></ROW><ROW><id>21053580</id><snippet>cursor.execute()</snippet></ROW><ROW><id>21053580</id><snippet>params</snippet></ROW><ROW><id>21053580</id><snippet># from oursqlx/cursor.pyx:121
# in Cursor.execute()
        else:
            stmt.execute(*params)
</snippet></ROW><ROW><id>21053580</id><snippet>cursor.execute("select blah from blah_table where blah_field = ?", [blah_variable]) # brackets!
</snippet></ROW><ROW><id>21053709</id><snippet>print_this</snippet></ROW><ROW><id>21053709</id><snippet>calculate_that</snippet></ROW><ROW><id>21053709</id><snippet>save</snippet></ROW><ROW><id>21053709</id><snippet>name</snippet></ROW><ROW><id>21053709</id><snippet>status</snippet></ROW><ROW><id>21053709</id><snippet>count</snippet></ROW><ROW><id>21053709</id><snippet>inspect</snippet></ROW><ROW><id>21053709</id><snippet>import inspect

for attr in dir(a):
    if inspect.ismethod(getattr(a, attr)):
        print '%s is a method' % attr
    else:
        print '%s is an attribute or property' % attr
</snippet></ROW><ROW><id>21053763</id><snippet>os.walk()</snippet></ROW><ROW><id>21053763</id><snippet>for dirpath, dirnames, filenames in os.walk(my_directory):
    # Remove regular files, ignore directories
    for filename in filenames:
        os.unlink(os.path.join(dirpath, filename))
</snippet></ROW><ROW><id>21053788</id><snippet>Win32_TemperatureProbe()</snippet></ROW><ROW><id>21053898</id><snippet>resizeEvent</snippet></ROW><ROW><id>21053898</id><snippet>class ScaledLabel(QtGui.QLabel):
    def __init__(self, *args, **kwargs):
        QtGui.QLabel.__init__(self)
        self._pixmap = QtGui.QPixmap(self.pixmap())

    def resizeEvent(self, event):
        self.setPixmap(self._pixmap.scaled(
            self.width(), self.height(),
            QtCore.Qt.KeepAspectRatio))
</snippet></ROW><ROW><id>21053898</id><snippet>class MainWindow(QtGui.QMainWindow):
    def __init__(self):
        ...
        self._pixmap = QtGui.QPixmap(self.label.pixmap())
        self.label.installEventFilter(self)

    def eventFilter(self, widget, event):
        if (event.type() == QtCore.QEvent.Resize and
            widget is self.label):
            self.label.setPixmap(self._pixmap.scaled(
                self.label.width(), self.label.height(),
                QtCore.Qt.KeepAspectRatio))
            return True
        return QtGui.QMainWindow.eventFilter(self, widget, event)
</snippet></ROW><ROW><id>21053943</id><snippet>sudo pip uninstall django_appcache
sudo pip install django_appcache
</snippet></ROW><ROW><id>21053943</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>21053951</id><snippet>s = '''that's my     string, "   keep these spaces     "    but reduce these '''


normal, quoted, eating = 0,1,2
state = eating
result = ''
for ch in s:
  if (state, ch) == (eating, ' '):
    continue
  elif (state,ch) == (eating, '"'):
    result += ch
    state = quoted
  elif state == eating:
    result += ch
    state = normal
  elif (state, ch) == (quoted, '"'):
    result += ch
    state = normal
  elif state == quoted:
    result += ch
  elif (state,ch) == (normal, '"'):
    result += ch
    state = quoted
  elif (state,ch) == (normal, ' '):
    result += ch
    state = eating
  else: # state == normal
    result += ch

print result
</snippet></ROW><ROW><id>21053951</id><snippet>actions = {
    'normal' : {
        ' ' : lambda x: ('eating', ' '),
        '"' : lambda x: ('quoted', '"'),
        None: lambda x: ('normal', x)
    },
    'eating' : {
        ' ' : lambda x: ('eating', ''),
        '"' : lambda x: ('quoted', '"'),
        None: lambda x: ('normal', x)
    },
    'quoted' : {
        '"' : lambda x: ('normal', '"'),
        '\\': lambda x: ('escaped', '\\'),
        None: lambda x: ('quoted', x)
    },
    'escaped' : {
        None: lambda x: ('quoted', x)
    }
}

def reduce(s):
    result = ''
    state = 'eating'
    for ch in s:
        state, ch = actions[state].get(ch, actions[state][None])(ch)
        result += ch
    return result

s = '''that's my     string, "   keep these spaces     "    but reduce these '''
print reduce(s)
</snippet></ROW><ROW><id>21053994</id><snippet>yield</snippet></ROW><ROW><id>21053994</id><snippet>class YieldSubstitute&lt;Data&gt; {
    private int    n;
    private Data[] data;

    public YieldSubstitute(Data[] data) {
        this.n    = 0;
        this.data = data;
    }

    public Data getNext() {
        Data toReturn = data[n];
        n = (n + 1) % data.length;
        return toReturn;
    }
}
</snippet></ROW><ROW><id>21053994</id><snippet>YieldSubstitute&lt;Data&gt; ys = new YieldSubstitute&lt;Data&gt;(data);
Data data1 = ys.getNext();
Data data2 = ys.getNext();
...
</snippet></ROW><ROW><id>21053994</id><snippet>yield</snippet></ROW><ROW><id>21053994</id><snippet>generator = string(data)
data1 = next(generator)
data2 = next(generator)
...
</snippet></ROW><ROW><id>21053994</id><snippet>return</snippet></ROW><ROW><id>21053994</id><snippet>yield</snippet></ROW><ROW><id>21053994</id><snippet>yield</snippet></ROW><ROW><id>21053994</id><snippet>return</snippet></ROW><ROW><id>21053994</id><snippet>byte[] out = new byte[lengthText]; // initialized with 0s
int n = 0;
for (int i = 0; i &lt; lengthText; i++) {
    out[i] = data1[n] ^ data2[n]; // assuming that both arrays have more that 0 elements
    n = (n + 1) % Math.min(data1.length, data2.length); // just in case their length differ
}
</snippet></ROW><ROW><id>21053994</id><snippet>data1</snippet></ROW><ROW><id>21053994</id><snippet>data2</snippet></ROW><ROW><id>21053994</id><snippet>byte[]</snippet></ROW><ROW><id>21053994</id><snippet>Math.min</snippet></ROW><ROW><id>21054009</id><snippet> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
</snippet></ROW><ROW><id>21054009</id><snippet>...</snippet></ROW><ROW><id>21054009</id><snippet>print()</snippet></ROW><ROW><id>21054043</id><snippet>issubclass</snippet></ROW><ROW><id>21054043</id><snippet>class B(object):
    pass

class D(B):
    pass

print issubclass(B, object)
print issubclass(D, B) # true
# order matters:
print issubclass(B, D) # false
# it's transitive:
print issubclass(D, object)
# a class is a subclass of itself:
print issubclass(B, B) # true
</snippet></ROW><ROW><id>21054087</id><snippet>i</snippet></ROW><ROW><id>21054087</id><snippet>lambda x, i=i: x%i==0
</snippet></ROW><ROW><id>21054087</id><snippet>i</snippet></ROW><ROW><id>21054087</id><snippet>i</snippet></ROW><ROW><id>21054087</id><snippet>lambda x, n=i: x%n==0</snippet></ROW><ROW><id>21054087</id><snippet>i</snippet></ROW><ROW><id>21054087</id><snippet>i = "original"

def print_i1():
    print(i) # prints "changed" when called below

def print_i2(s=i): #default set at function creation, not call
    print(s) # prints "original" when called below


i = "changed"
print_i1()
print_i2()
</snippet></ROW><ROW><id>21054182</id><snippet>encout</snippet></ROW><ROW><id>21054182</id><snippet>encrypt</snippet></ROW><ROW><id>21054182</id><snippet>encout</snippet></ROW><ROW><id>21054182</id><snippet>encout = ''</snippet></ROW><ROW><id>21054182</id><snippet>encrypt</snippet></ROW><ROW><id>21054182</id><snippet>return encout</snippet></ROW><ROW><id>21054182</id><snippet>encrypt</snippet></ROW><ROW><id>21054182</id><snippet>for</snippet></ROW><ROW><id>21054182</id><snippet>print(encrypt(encin))
</snippet></ROW><ROW><id>21054248</id><snippet>    self.__ui.lineEdit1.setFixedSize(40, 30)
    self.__ui.lineEdit2.setFixedSize(140, 30)
    self.__ui.lineEdit3.setFixedSize(80, 30)
</snippet></ROW><ROW><id>21054391</id><snippet>&gt;&gt;&gt; mylist = ['county_id\temp_2010\temp_2020\temp_2030\temp_2040\thhld_2010\thhld_2020\thhld_2030\thhld_2040\tmf_2010\tmf_2020\tmf_2030\tmf_2040\tpop_2010\tpop_2020\tpop_2030\tpop_2040\tdu_2010\tdu_2020\tdu_2030\tdu_2040\tsf_2010\tsf_2020\tsf_2030\tsf_2040']
&gt;&gt;&gt; splitlist = mylist[0].split("\t")
&gt;&gt;&gt; splitlist
['county_id', 'emp_2010', 'emp_2020', 'emp_2030', 'emp_2040', 'hhld_2010', 'hhld_2020', 'hhld_2030', 'hhld_2040', 'mf_2010', 'mf_2020', 'mf_2030', 'mf_2040', 'pop_2010', 'pop_2020', 'pop_2030', 'pop_2040', 'du_2010', 'du_2020', 'du_2030', 'du_2040', 'sf_2010', 'sf_2020', 'sf_2030', 'sf_2040']
</snippet></ROW><ROW><id>21054516</id><snippet>if (A[x]) or (B[x]) or (C[x]) or (D[x] == "TRUE"):
</snippet></ROW><ROW><id>21054516</id><snippet>== "TRUE"</snippet></ROW><ROW><id>21054516</id><snippet>D[x]</snippet></ROW><ROW><id>21054516</id><snippet>A[x]</snippet></ROW><ROW><id>21054516</id><snippet>B[x]</snippet></ROW><ROW><id>21054516</id><snippet>C[x]</snippet></ROW><ROW><id>21054516</id><snippet>"FALSE"</snippet></ROW><ROW><id>21054516</id><snippet>== "TRUE"</snippet></ROW><ROW><id>21054516</id><snippet>if A[x] == "TRUE" or B[x] == "TRUE" or C[x] == "TRUE" or D[x] == "TRUE":
</snippet></ROW><ROW><id>21054516</id><snippet>in</snippet></ROW><ROW><id>21054516</id><snippet>"TRUE"</snippet></ROW><ROW><id>21054516</id><snippet>if "TRUE" in (A[x], B[x], C[x], D[x]):
</snippet></ROW><ROW><id>21054516</id><snippet>if A[x] == "TRUE":
    # A is true
elif B[x] == "TRUE":
    # B is true
elif C[x] == "TRUE":
    # C is true
elif D[x] == "TRUE":
    # D is true
else:
    # neither is true
</snippet></ROW><ROW><id>21054577</id><snippet>any()</snippet></ROW><ROW><id>21054577</id><snippet>range(1, 10)</snippet></ROW><ROW><id>21054577</id><snippet>s</snippet></ROW><ROW><id>21054577</id><snippet>if any(x in s for x in range(1, 10)):
    print('yes')
</snippet></ROW><ROW><id>21054577</id><snippet>any()</snippet></ROW><ROW><id>21054855</id><snippet>Tools -&gt; SublimeREPL -&gt; Python -&gt; Python</snippet></ROW><ROW><id>21054855</id><snippet>Tools -&gt; SublimeREPL -&gt; Eval in REPL</snippet></ROW><ROW><id>21054855</id><snippet>Transfer to REPL</snippet></ROW><ROW><id>21055019</id><snippet>list</snippet></ROW><ROW><id>21055019</id><snippet>l</snippet></ROW><ROW><id>21055019</id><snippet>In [1]: l =  [['J', 'A', 'M', 'E', 'S'],
   ...:  ['F', 'C', 'A', 'A', 'A'],
   ...:  ['F', 'A', 'B', 'B', 'B']]
</snippet></ROW><ROW><id>21055019</id><snippet>tuple</snippet></ROW><ROW><id>21055019</id><snippet>zip()</snippet></ROW><ROW><id>21055019</id><snippet>In [2]: zip(*l)
Out[2]: 
[('J', 'F', 'F'),
 ('A', 'C', 'A'),
 ('M', 'A', 'B'),
 ('E', 'A', 'B'),
 ('S', 'A', 'B')]
</snippet></ROW><ROW><id>21055019</id><snippet>list</snippet></ROW><ROW><id>21055019</id><snippet>tuple</snippet></ROW><ROW><id>21055019</id><snippet>In [3]: sorted(zip(*l))
Out[3]: 
[('A', 'C', 'A'),
 ('E', 'A', 'B'),
 ('J', 'F', 'F'),
 ('M', 'A', 'B'),
 ('S', 'A', 'B')]
</snippet></ROW><ROW><id>21055019</id><snippet>list</snippet></ROW><ROW><id>21055019</id><snippet>lists</snippet></ROW><ROW><id>21055019</id><snippet>tuple</snippet></ROW><ROW><id>21055019</id><snippet>In [4]: zip(*sorted(zip(*l)))
Out[4]: 
[('A', 'E', 'J', 'M', 'S'),
 ('C', 'A', 'F', 'A', 'A'),
 ('A', 'B', 'F', 'B', 'B')]
</snippet></ROW><ROW><id>21055019</id><snippet>list</snippet></ROW><ROW><id>21055019</id><snippet>tuples</snippet></ROW><ROW><id>21055019</id><snippet>list</snippet></ROW><ROW><id>21055019</id><snippet>list</snippet></ROW><ROW><id>21055019</id><snippet>In [5]: [list(t) for t in zip(*sorted(zip(*l)))]
Out[5]: 
[['A', 'E', 'J', 'M', 'S'],
 ['C', 'A', 'F', 'A', 'A'],
 ['A', 'B', 'F', 'B', 'B']]
</snippet></ROW><ROW><id>21055176</id><snippet>~</snippet></ROW><ROW><id>21055176</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({"A": ["Hello", "this", "World", "apple"]})
&gt;&gt;&gt; df.A.str.contains("Hello|World")
0     True
1    False
2     True
3    False
Name: A, dtype: bool
&gt;&gt;&gt; ~df.A.str.contains("Hello|World")
0    False
1     True
2    False
3     True
Name: A, dtype: bool
&gt;&gt;&gt; df[~df.A.str.contains("Hello|World")]
       A
1   this
3  apple

[2 rows x 1 columns]
</snippet></ROW><ROW><id>21055176</id><snippet>df[~(df.A.str.contains("Hello") | (df.A.str.contains("World")))]</snippet></ROW><ROW><id>21055195</id><snippet>--allow-all-external</snippet></ROW><ROW><id>21055195</id><snippet>pip install https://pyodbc.googlecode.com/files/pyodbc-3.0.6.zip</snippet></ROW><ROW><id>21055260</id><snippet>pip install https://bitbucket.org/mpi4py/mpi4py/downloads/mpi4py-1.3.1.tar.gz
</snippet></ROW><ROW><id>21055302</id><snippet># see "Authentication" section below for tokens and keys
t = Twitter(
        auth=OAuth(OAUTH_TOKEN, OAUTH_SECRET,
                   CONSUMER_KEY, CONSUMER_SECRET)
       )
</snippet></ROW><ROW><id>21055475</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>21055475</id><snippet>from urllib import urlopen

def get_context_data(self, **kwargs):
    context = super(IndexView, self).get_context_data(**kwargs)
    my_stock_url = 'http://mystockpage.org/stocks/'
    context['stocks'] = json.loads(urlopen(my_stock_url).read())
    context['last_stock'] = stocks[0]['target'].split()[2].strip(')')
    return context
</snippet></ROW><ROW><id>21055643</id><snippet>In [10]: df['intCode'] = pd.Categorical.from_array(df.group).labels

In [11]: df
Out[11]: 
  group  intCode
0  005j        0
1  005j        0
2  0k16        2
3  0fff        1
4  0fff        1
</snippet></ROW><ROW><id>21056000</id><snippet>pip</snippet></ROW><ROW><id>21056000</id><snippet>sudo</snippet></ROW><ROW><id>21056000</id><snippet>setup.py</snippet></ROW><ROW><id>21056000</id><snippet>sudo</snippet></ROW><ROW><id>21056000</id><snippet>pip</snippet></ROW><ROW><id>21056060</id><snippet>vY.T</snippet></ROW><ROW><id>21056060</id><snippet>vBeta</snippet></ROW><ROW><id>21056060</id><snippet>x</snippet></ROW><ROW><id>21056060</id><snippet>fmin_bfgs</snippet></ROW><ROW><id>21056060</id><snippet>fnRSS</snippet></ROW><ROW><id>21056060</id><snippet>x0=vBeta</snippet></ROW><ROW><id>21056301</id><snippet>df.fillna(pd.rolling_mean(df, 7, min_periods=1).shift(-3))
</snippet></ROW><ROW><id>21056301</id><snippet>&gt;&gt;&gt; df
                  1
0                  
2000-10-01  0.22140
2000-10-02  0.18304
2000-10-03  0.20181
2000-10-04  0.19469
2000-10-05      NaN
2000-10-06      NaN
2000-10-07  0.11495
2000-10-08  0.23528
2000-10-09  0.16796

[9 rows x 1 columns]
&gt;&gt;&gt; df = df.fillna(pd.rolling_mean(df, 7, min_periods=1).shift(-3))
&gt;&gt;&gt; df
                   1
0                   
2000-10-01  0.221400
2000-10-02  0.183040
2000-10-03  0.201810
2000-10-04  0.194690
2000-10-05  0.185954
2000-10-06  0.182938
2000-10-07  0.114950
2000-10-08  0.235280
2000-10-09  0.167960

[9 rows x 1 columns]
</snippet></ROW><ROW><id>21056301</id><snippet>rolling_mean</snippet></ROW><ROW><id>21056332</id><snippet>class Response(messages.Message):
    items = messages.StringField(1, repeated=True)
</snippet></ROW><ROW><id>21056496</id><snippet>pygame.draw.rect(window, (darkYellow),(30+cursorPos*230, 300, 130, 40),0)
</snippet></ROW><ROW><id>21056496</id><snippet>event.type == pygame.KEYDOWN and pygame.K_DOWN</snippet></ROW><ROW><id>21056496</id><snippet>(event.type==pygame.KEYDOWN) and pygame.K_DOWN</snippet></ROW><ROW><id>21056496</id><snippet>event.type == pygame.KEYDOWN and event.key == pygame.K_DOWN
</snippet></ROW><ROW><id>21056539</id><snippet>public_dns</snippet></ROW><ROW><id>21056539</id><snippet>for dns in public_dns:</snippet></ROW><ROW><id>21056539</id><snippet>'e'</snippet></ROW><ROW><id>21056539</id><snippet>'c'</snippet></ROW><ROW><id>21056539</id><snippet>'2'</snippet></ROW><ROW><id>21056539</id><snippet>public_dns = ['ec2-xx-xxx-xxx-xxx.compute-1.amazonaws.com']
</snippet></ROW><ROW><id>21056539</id><snippet>file = open('/home/ubuntu/hosts', 'w')</snippet></ROW><ROW><id>21056539</id><snippet>file</snippet></ROW><ROW><id>21056539</id><snippet>=</snippet></ROW><ROW><id>21056539</id><snippet>&lt;&lt;HERE</snippet></ROW><ROW><id>21056539</id><snippet>exec_command</snippet></ROW><ROW><id>21056539</id><snippet>a,b,c = ssh.exec_command(‚Ä¶)</snippet></ROW><ROW><id>21056539</id><snippet>sftp</snippet></ROW><ROW><id>21056539</id><snippet>hosts = ['127.0.0.1 localhost\n']
for ip, tag in hosts_file_info.iteritems():
    hosts.append('%s %s\n' % (ip,tag))
for dns in public_dns:
    ssh = paramiko.SSHClient()
    # etc. up to connect
    sftp = paramiko.SFTPClient.from_transport(ssh.get_transport())
    f = sftp.open('/home/ubuntu/hosts', 'w')
    f.writelines(hosts)
    f.close()
</snippet></ROW><ROW><id>21056698</id><snippet>print(max(words, key=len))
</snippet></ROW><ROW><id>21056698</id><snippet>longest = max(words, key=len)
longestWord = {'value': longest, 'len': len(longest)}
</snippet></ROW><ROW><id>21056759</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>21056759</id><snippet>/usr/bin/env python</snippet></ROW><ROW><id>21056759</id><snippet>/usr/bin/python2.7</snippet></ROW><ROW><id>21056759</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>21056759</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>21056759</id><snippet>/System/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>21056759</id><snippet>/usr/bin/python2.7</snippet></ROW><ROW><id>21056799</id><snippet>presetSettings.bind("&lt;&lt;ComboboxSelected&gt;&gt;", cmbSelected)
</snippet></ROW><ROW><id>21056799</id><snippet>cmbSelected</snippet></ROW><ROW><id>21057054</id><snippet>.giz</snippet></ROW><ROW><id>21057054</id><snippet>sys.argv[1]</snippet></ROW><ROW><id>21057054</id><snippet>wx</snippet></ROW><ROW><id>21057054</id><snippet>argv</snippet></ROW><ROW><id>21057054</id><snippet>wx.App</snippet></ROW><ROW><id>21057119</id><snippet>neighbor_list</snippet></ROW><ROW><id>21057119</id><snippet>class Entities(object):
    # not here
    def __init__(self, name):
        self.name = name
        self.neighbor_list = [] # here
</snippet></ROW><ROW><id>21057599</id><snippet>class Options(object):
    def functionOne(self): # or function1
        print 'one'
    def functionTwo(self): # or function2
        print 'two'
    def functionThree(self): # or function3
        print 'three'

o = Options()
for name in dir(o):
    if 'function' in name:
        getattr(o, name)()
</snippet></ROW><ROW><id>21057599</id><snippet>one
three
two
</snippet></ROW><ROW><id>21057599</id><snippet>def run_it(o, partial):
    for name in dir(o):
        if partial in name:
            getattr(o, name)()
</snippet></ROW><ROW><id>21057599</id><snippet>&gt;&gt;&gt; run_it(o, 'One')
one
&gt;&gt;&gt; run_it(o, 'nTwo')
two
</snippet></ROW><ROW><id>21057828</id><snippet>config.has_option(section, option)
</snippet></ROW><ROW><id>21057865</id><snippet>x</snippet></ROW><ROW><id>21057865</id><snippet>y</snippet></ROW><ROW><id>21057865</id><snippet>x.append(float(loc[1]))</snippet></ROW><ROW><id>21057865</id><snippet>y.append(float(loc[0]))</snippet></ROW><ROW><id>21057975</id><snippet>import psutil  # From https://code.google.com/p/psutil/

def is_running(process_name):
    return process_name in psutil.get_process_list()
</snippet></ROW><ROW><id>21057975</id><snippet>c</snippet></ROW><ROW><id>21057975</id><snippet>isProcessFound</snippet></ROW><ROW><id>21057975</id><snippet>isProcessFound = check_process.check("wmplayer.exe")
</snippet></ROW><ROW><id>21057975</id><snippet>c</snippet></ROW><ROW><id>21058110</id><snippet>&lt;root&gt;
‚îú‚îÄ‚îÄ setup.py
‚îî‚îÄ‚îÄ tk
    ‚îú‚îÄ‚îÄ __init__.py
    ‚îî‚îÄ‚îÄ latex
        ‚îî‚îÄ‚îÄ __init__.py
</snippet></ROW><ROW><id>21058110</id><snippet>setup.py</snippet></ROW><ROW><id>21058110</id><snippet>from distutils.core import setup

setup(
    name='tk',
    version='1.0',
    description='Graphics package that supplements native Tkinter',
    packages=['tk', 'tk.latex'],
)
</snippet></ROW><ROW><id>21058119</id><snippet>file_in  = open('input.txt', 'r')
file_out = open('output.txt', 'w')

for line in file_in:
    line = line.rstrip()
    line = line.split('\t')

    CATEGORY = ' '.join(line[:-3]) ##set variable as beginning of line 
                                   ##to before 3rd last column
    NUMBER_1 = line[-3] ##set variable as 3rd last column
    TOTAL = line[-1]    ##set variable as last column

    file_out.write('%s\t%s\t%s\n' % (CATEGORY, NUMBER_1, TOTAL))

file_in.close()
file_out.close()
</snippet></ROW><ROW><id>21058119</id><snippet>python &lt;ABOVE_SCRIPT&gt;.py</snippet></ROW><ROW><id>21058128</id><snippet>import subprocess 
import time

class foo_class(object):
    def __init__(self):
        pass

    def start(self):
        self.foo = subprocess.Popen(['a daemon service'])

    def stop(self):
        self.foo.kill()
        self.foo.wait() #don't know if this is necessary?

    def restart(self):
        self.start()


foo = foo_class()
foo.start()
time.sleep(5)
foo.stop()
</snippet></ROW><ROW><id>21058285</id><snippet>exec</snippet></ROW><ROW><id>21058285</id><snippet>eval</snippet></ROW><ROW><id>21058285</id><snippet>exec</snippet></ROW><ROW><id>21058285</id><snippet>eval</snippet></ROW><ROW><id>21058285</id><snippet>eval('2+3') == 5</snippet></ROW><ROW><id>21058285</id><snippet>&gt;&gt;&gt; data = """class f:
    def pr(self):
        print "asdfg" """
&gt;&gt;&gt; exec data
&gt;&gt;&gt; instance = f()
&gt;&gt;&gt; instance.pr()
asdfg
</snippet></ROW><ROW><id>21058312</id><snippet>&gt;&gt;&gt; d1 = dict(a=1, b=2, c=3, d=4)
&gt;&gt;&gt; d2 = dict(a=1, b=2)
&gt;&gt;&gt; set(d2.items()).issubset( set(d1.items()) )
True
</snippet></ROW><ROW><id>21058312</id><snippet>&gt;&gt;&gt; set(d1.items()).issubset( set(d2.items()) )
False
</snippet></ROW><ROW><id>21058331</id><snippet>a &amp; b &amp; c</snippet></ROW><ROW><id>21058331</id><snippet>import functools
print(functools.reduce(lambda x,y: x &amp; y, [a, b, c]))
</snippet></ROW><ROW><id>21058331</id><snippet>0    False
1    False
2     True
dtype: bool
</snippet></ROW><ROW><id>21058331</id><snippet>np.logical_and.reduce</snippet></ROW><ROW><id>21058331</id><snippet>functools.reduce(lambda x,y: x &amp; y, [a, b, c])</snippet></ROW><ROW><id>21058331</id><snippet>a &amp; b &amp; c</snippet></ROW><ROW><id>21058331</id><snippet>reduce</snippet></ROW><ROW><id>21058331</id><snippet>functools.reduce</snippet></ROW><ROW><id>21058331</id><snippet>reduce</snippet></ROW><ROW><id>21058331</id><snippet>reduce</snippet></ROW><ROW><id>21058331</id><snippet>functools.reduce</snippet></ROW><ROW><id>21058331</id><snippet>functools.reduce</snippet></ROW><ROW><id>21058331</id><snippet>np.logical_and.reduce([logic])</snippet></ROW><ROW><id>21058331</id><snippet>import pandas as pd
import numpy as np
x = pd.Series([True,True,False,False], index=[1,2,3,4]) 
y = pd.Series([True,True,False,False], index=[1,2,3,4]) 
print(x &amp; y)
</snippet></ROW><ROW><id>21058331</id><snippet>1     True
2     True
3    False
4    False
dtype: bool
</snippet></ROW><ROW><id>21058331</id><snippet>np.logical_and.reduce([x,y])</snippet></ROW><ROW><id>21058331</id><snippet>    print(np.logical_and.reduce([x,y]))
  File "/data1/unutbu/.virtualenvs/dev/local/lib/python2.7/site-packages/pandas-0.13.0_98_gd9b0c1f-py2.7-linux-i686.egg/pandas/core/generic.py", line 665, in __nonzero__
    .format(self.__class__.__name__))
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
</snippet></ROW><ROW><id>21058465</id><snippet>json.loads(f.readall().decode("utf-8"))["facts"]</snippet></ROW><ROW><id>21058465</id><snippet>data = json.loads(f.readall().decode("utf-8"))["facts"]
</snippet></ROW><ROW><id>21058465</id><snippet>data = json.loads(f.readall().decode("utf-8"))["facts"][0]
</snippet></ROW><ROW><id>21058465</id><snippet>&lt;</snippet></ROW><ROW><id>21058465</id><snippet>&gt;</snippet></ROW><ROW><id>21058538</id><snippet>os.sep</snippet></ROW><ROW><id>21058538</id><snippet>In [254]: os.getcwd()
Out[254]: 'D:\\Documents\\Desktop'

In [255]: os.getcwd().split(os.sep)
Out[255]: ['D:', 'Documents', 'Desktop']
</snippet></ROW><ROW><id>21058882</id><snippet>modwsgi</snippet></ROW><ROW><id>21058946</id><snippet>json.loads</snippet></ROW><ROW><id>21058946</id><snippet>json.load</snippet></ROW><ROW><id>21058946</id><snippet>&gt;&gt;&gt; json.loads('{}')
{}
&gt;&gt;&gt; json.loads('{}{}') # == json.loads(json.dumps({}) + json.dumps({}))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\json\__init__.py", line 338, in loads
    return _default_decoder.decode(s)
  File "C:\Python27\lib\json\decoder.py", line 368, in decode
    raise ValueError(errmsg("Extra data", s, end, len(s)))
ValueError: Extra data: line 1 column 3 - line 1 column 5 (char 2 - 4)
</snippet></ROW><ROW><id>21058946</id><snippet>&gt;&gt;&gt; dict1 = {}
&gt;&gt;&gt; dict2 = {}
&gt;&gt;&gt; json.dumps([dict1, dict2])
'[{}, {}]'
&gt;&gt;&gt; json.loads(json.dumps([dict1, dict2]))
[{}, {}]
</snippet></ROW><ROW><id>21059059</id><snippet>s='cde'
for i in s:
    i=chr(ord(i)-2)
print s
</snippet></ROW><ROW><id>21059059</id><snippet>i</snippet></ROW><ROW><id>21059059</id><snippet>i</snippet></ROW><ROW><id>21059260</id><snippet>+</snippet></ROW><ROW><id>21059260</id><snippet>\d+</snippet></ROW><ROW><id>21059260</id><snippet>(?:(?!rows).)+</snippet></ROW><ROW><id>21059260</id><snippet>1</snippet></ROW><ROW><id>21059260</id><snippet>(?:(?!rows)\D)+</snippet></ROW><ROW><id>21059293</id><snippet># file: myspider.py
import json

from scrapy.http import Request
from scrapy.spider import BaseSpider


class MySpider(BaseSpider):
    name = 'myspider'
    start_urls = (
        # Add here more urls. Alternatively, make the start urls dynamic
        # reading them from a file, db or an external url.
        'https://www.facebook.com/TiltedKiltEsplanade',
    )

    graph_url = 'https://graph.facebook.com/{name}'
    feed_url = 'https://www.facebook.com/feeds/page.php?id={id}&amp;format=rss20'

    def start_requests(self):
        for url in self.start_urls:
            # This assumes there is no trailing slash
            name = url.rpartition('/')[2]
            yield Request(self.graph_url.format(name=name), self.parse_graph)

    def parse_graph(self, response):
        data = json.loads(response.body)
        return Request(self.feed_url.format(id=data['id']), self.parse_feed)

    def parse_feed(self, response):
        # You can use the xml spider, xml selector or the feedparser module
        # to extract information from the feed.
        self.log('Got feed: %s' % response.body[:100])
</snippet></ROW><ROW><id>21059293</id><snippet>$ scrapy runspider myspider.py
2014-01-11 02:19:48-0400 [scrapy] INFO: Scrapy 0.21.0-97-g21a8a94 started (bot: scrapybot)
2014-01-11 02:19:48-0400 [scrapy] DEBUG: Optional features available: ssl, http11, boto, django
2014-01-11 02:19:48-0400 [scrapy] DEBUG: Overridden settings: {}
2014-01-11 02:19:49-0400 [scrapy] DEBUG: Enabled extensions: LogStats, TelnetConsole, CloseSpider, WebService, CoreStats, SpiderState
2014-01-11 02:19:49-0400 [scrapy] DEBUG: Enabled downloader middlewares: HttpAuthMiddleware, DownloadTimeoutMiddleware, UserAgentMiddleware, RetryMiddleware, DefaultHeadersMiddleware, MetaRefreshMiddleware, HttpCompressionMiddleware, RedirectMiddleware, CookiesMiddleware, ChunkedTransferMiddleware, DownloaderStats
2014-01-11 02:19:49-0400 [scrapy] DEBUG: Enabled spider middlewares: HttpErrorMiddleware, OffsiteMiddleware, RefererMiddleware, UrlLengthMiddleware, DepthMiddleware
2014-01-11 02:19:49-0400 [scrapy] DEBUG: Enabled item pipelines: 
2014-01-11 02:19:49-0400 [myspider] INFO: Spider opened
2014-01-11 02:19:49-0400 [myspider] INFO: Crawled 0 pages (at 0 pages/min), scraped 0 items (at 0 items/min)
2014-01-11 02:19:49-0400 [scrapy] DEBUG: Telnet console listening on 0.0.0.0:6023
2014-01-11 02:19:49-0400 [scrapy] DEBUG: Web service listening on 0.0.0.0:6080
2014-01-11 02:19:49-0400 [myspider] DEBUG: Crawled (200) &lt;GET https://graph.facebook.com/TiltedKiltEsplanade&gt; (referer: None)
2014-01-11 02:19:50-0400 [myspider] DEBUG: Crawled (200) &lt;GET https://www.facebook.com/feeds/page.php?id=414117051979234&amp;format=rss20&gt; (referer: https://graph.facebook.com/TiltedKiltEsplanade)
2014-01-11 02:19:50-0400 [myspider] DEBUG: Got feed: &lt;?xml version="1.0" encoding="utf-8"?&gt;
    &lt;rss version="2.0"
          xmlns:media="http://search.yahoo.com
2014-01-11 02:19:50-0400 [myspider] INFO: Closing spider (finished)
2014-01-11 02:19:50-0400 [myspider] INFO: Dumping Scrapy stats:
    {'downloader/request_bytes': 578,
     'downloader/request_count': 2,
     'downloader/request_method_count/GET': 2,
     'downloader/response_bytes': 6669,
     'downloader/response_count': 2,
     'downloader/response_status_count/200': 2,
     'finish_reason': 'finished',
     'finish_time': datetime.datetime(2014, 1, 11, 6, 19, 50, 849162),
     'log_count/DEBUG': 9,
     'log_count/INFO': 3,
     'request_depth_max': 1,
     'response_received_count': 2,
     'scheduler/dequeued': 2,
     'scheduler/dequeued/memory': 2,
     'scheduler/enqueued': 2,
     'scheduler/enqueued/memory': 2,
     'start_time': datetime.datetime(2014, 1, 11, 6, 19, 49, 221361)}
2014-01-11 02:19:50-0400 [myspider] INFO: Spider closed (finished)
</snippet></ROW><ROW><id>21059308</id><snippet>windowed_view</snippet></ROW><ROW><id>21059308</id><snippet>numpy.lib.stride_tricks.as_strided</snippet></ROW><ROW><id>21059308</id><snippet>max_dd</snippet></ROW><ROW><id>21059308</id><snippet>axis=1</snippet></ROW><ROW><id>21059308</id><snippet>def rolling_max_dd(x, window_size, min_periods=1):
    """Compute the rolling maximum drawdown of `x`.

    `x` must be a 1d numpy array.
    `min_periods` should satisfy `1 &lt;= min_periods &lt;= window_size`.

    Returns an 1d array with length `len(x) - min_periods + 1`.
    """
    if min_periods &lt; window_size:
        pad = np.empty(window_size - min_periods)
        pad.fill(x[0])
        x = np.concatenate((pad, x))
    y = windowed_view(x, window_size)
    running_max_y = np.maximum.accumulate(y, axis=1)
    dd = y - running_max_y
    return dd.min(axis=1)
</snippet></ROW><ROW><id>21059308</id><snippet>import numpy as np
from numpy.lib.stride_tricks import as_strided
import pandas as pd
import matplotlib.pyplot as plt


def windowed_view(x, window_size):
    """Creat a 2d windowed view of a 1d array.

    `x` must be a 1d numpy array.

    `numpy.lib.stride_tricks.as_strided` is used to create the view.
    The data is not copied.

    Example:

    &gt;&gt;&gt; x = np.array([1, 2, 3, 4, 5, 6])
    &gt;&gt;&gt; windowed_view(x, 3)
    array([[1, 2, 3],
           [2, 3, 4],
           [3, 4, 5],
           [4, 5, 6]])
    """
    y = as_strided(x, shape=(x.size - window_size + 1, window_size),
                   strides=(x.strides[0], x.strides[0]))
    return y


def rolling_max_dd(x, window_size, min_periods=1):
    """Compute the rolling maximum drawdown of `x`.

    `x` must be a 1d numpy array.
    `min_periods` should satisfy `1 &lt;= min_periods &lt;= window_size`.

    Returns an 1d array with length `len(x) - min_periods + 1`.
    """
    if min_periods &lt; window_size:
        pad = np.empty(window_size - min_periods)
        pad.fill(x[0])
        x = np.concatenate((pad, x))
    y = windowed_view(x, window_size)
    running_max_y = np.maximum.accumulate(y, axis=1)
    dd = y - running_max_y
    return dd.min(axis=1)


def max_dd(ser):
    max2here = pd.expanding_max(ser)
    dd2here = ser - max2here
    return dd2here.min()


if __name__ == "__main__":
    np.random.seed(0)
    n = 100
    s = pd.Series(np.random.randn(n).cumsum())

    window_length = 10

    rolling_dd = pd.rolling_apply(s, window_length, max_dd, min_periods=0)
    df = pd.concat([s, rolling_dd], axis=1)
    df.columns = ['s', 'rol_dd_%d' % window_length]
    df.plot(linewidth=3, alpha=0.4)

    my_rmdd = rolling_max_dd(s.values, window_length, min_periods=1)
    plt.plot(my_rmdd, 'g.')

    plt.show()
</snippet></ROW><ROW><id>21059308</id><snippet>rolling_max_dd</snippet></ROW><ROW><id>21059308</id><snippet>n = 10000</snippet></ROW><ROW><id>21059308</id><snippet>window_length = 500</snippet></ROW><ROW><id>21059308</id><snippet>In [2]: %timeit rolling_dd = pd.rolling_apply(s, window_length, max_dd, min_periods=0)
1 loops, best of 3: 247 ms per loop

In [3]: %timeit my_rmdd = rolling_max_dd(s.values, window_length, min_periods=1)
10 loops, best of 3: 38.2 ms per loop
</snippet></ROW><ROW><id>21059308</id><snippet>rolling_max_dd</snippet></ROW><ROW><id>21059308</id><snippet>window_length = 200</snippet></ROW><ROW><id>21059308</id><snippet>Series</snippet></ROW><ROW><id>21059308</id><snippet>fillna</snippet></ROW><ROW><id>21059308</id><snippet>rolling_max_dd</snippet></ROW><ROW><id>21059342</id><snippet>prfiles.views.profile</snippet></ROW><ROW><id>21059342</id><snippet>sender_url = reverse('profiles:profile', args=(sender_username,))
</snippet></ROW><ROW><id>21059442</id><snippet>print [runner["runnerName"] for runner in runners_dict["runners"]]
</snippet></ROW><ROW><id>21059442</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>21059442</id><snippet>from operator import itemgetter
print map(itemgetter("runnerName"), runners_dict["runners"])
</snippet></ROW><ROW><id>21059442</id><snippet>[u'La Napoule', u'Swivel', u'Deanos Devil', u'Bishan Bedi', u'In Seine',
 u'Needs The Run', u'Appellez Baileys', u'Jessy Mae', u'Redy To Rumble']
</snippet></ROW><ROW><id>21059603</id><snippet>var = " ".join(var)
#This will output as desired, with a space in between each character
</snippet></ROW><ROW><id>21059629</id><snippet>#!/usr/bin/python3

# Iterate over every line in file1.
#   Iterate over every line in file2.
#     If lines intersect, print combined line.

with open('file1') as file1:
    for line1 in file1:
        u1,h1,s1 = line1.rstrip().split(':')

        with open('file2') as file2:
            for line2 in file2:
                h2,s2,p2 = line2.rstrip().split(':')

                if h1 == h2 and s1 == s2:
                    print(':'.join((u1,h1,s2,p2)))
</snippet></ROW><ROW><id>21059800</id><snippet>yield</snippet></ROW><ROW><id>21059800</id><snippet>from wsgiref.simple_server import make_server

class DemoApp:

    def __init__(self, environ, start_response):
        self.environ = environ
        self.start = start_response

    def __iter__(self):
        status = '200 OK'
        response_headers = [('Content-type', 'text/plain')]
        self.start(status, response_headers)
        yield 'Hello world!'


if __name__ == '__main__':
    httpd = make_server('', 1000, DemoApp)
    print("Serving HTTP on port 1000...")
    httpd.serve_forever()
</snippet></ROW><ROW><id>21059813</id><snippet>QLineEdit::textEdited</snippet></ROW><ROW><id>21059813</id><snippet>QLineEdit</snippet></ROW><ROW><id>21059813</id><snippet>QTextEdit</snippet></ROW><ROW><id>21059813</id><snippet>QTextCursor c =  txtedit.textCursor();
c.movePosition(QTextCursor::End);
txtedit.setTextCursor(c);
// txtedit.ensureCursorVisible(); // you might need this also
</snippet></ROW><ROW><id>21059940</id><snippet>n = int(raw_input())
</snippet></ROW><ROW><id>21059940</id><snippet>&gt;&gt;&gt; n = int(raw_input())
100000000000000
&gt;&gt;&gt; n
100000000000000L
</snippet></ROW><ROW><id>21059941</id><snippet>import json
import re

nonspace = re.compile(r'\S')
def iterparse(j):
    decoder = json.JSONDecoder()
    pos = 0
    while True:
        matched = nonspace.search(j, pos)
        if not matched:
            break
        pos = matched.start()
        decoded, pos = decoder.raw_decode(j, pos)
        yield decoded
</snippet></ROW><ROW><id>21059941</id><snippet>&gt;&gt;&gt; j = '''
... { "id": 1 }
... { "id": 2 }
... '''
&gt;&gt;&gt; list(iterparse(j))
[{u'id': 1}, {u'id': 2}]
</snippet></ROW><ROW><id>21060056</id><snippet>    products = [int(p) for p in request.POST['products'] if str(p).isdigit()]
</snippet></ROW><ROW><id>21060056</id><snippet>    products = [int(p) for p in request.POST['products'] if unicode(p).isnumeric()]
</snippet></ROW><ROW><id>21060056</id><snippet>unicode</snippet></ROW><ROW><id>21060056</id><snippet>if request.is_ajax():
    products = [int(p) for p in request.POST.get('products',[]) if str(p).isdigit()]
    products_params = request.POST.get('products_params', [])
    if (not (products and products_params)) or (len(products) != len(products_params)):
        return HttpResponseBadRequest()
</snippet></ROW><ROW><id>21060094</id><snippet>base</snippet></ROW><ROW><id>21060094</id><snippet>class</snippet></ROW><ROW><id>21060094</id><snippet>def get_my_code(base):

    class MyCode(base):
        def initialize(self):
          ...

    return MyCode

my_code = get_my_code(ParentA)
</snippet></ROW><ROW><id>21060179</id><snippet>r</snippet></ROW><ROW><id>21060179</id><snippet>leftImage = ImageTk.PhotoImage(Image.open(r"C:\Users\usr\Desktop\left.png"))
rightImage = ImageTk.PhotoImage(Image.open(r"C:\Users\usr\Desktop\right.png"))
</snippet></ROW><ROW><id>21060179</id><snippet>\r</snippet></ROW><ROW><id>21060219</id><snippet>python manage.py syncdb 
</snippet></ROW><ROW><id>21060222</id><snippet>def __init__(self):
    fp = open('image.txt')
    s = fp.readlines()
    self.a = 0
    self.line = s[a]
    self.ent_date.insert(0, line[0])     

def forms(self):
    b = tk.Button(bd ='4', text="Auto Fill", width = 20, command = self.autosave)
    ...

def autosave(self):
    # save the current state, e.g., 
    # self.ent_date.insert(0, line[0]) - we'll leave it to the OP
    box.showinfo('Success','Saved Successfully')
    self.a += 1
</snippet></ROW><ROW><id>21060360</id><snippet>file.seek</snippet></ROW><ROW><id>21060360</id><snippet>set</snippet></ROW><ROW><id>21060360</id><snippet>in</snippet></ROW><ROW><id>21060360</id><snippet>def index(filename, words):
    with open(filename) as f:
        for line_number, line in enumerate(f, 1):
            word = line.strip()
            if word in words:
                print(word, line_number)

fileName = 'index.txt'
wordList = ['bird', 'cat'] # input().split()
words = set(wordList)
index(fileName, words)
</snippet></ROW><ROW><id>21060360</id><snippet>eval</snippet></ROW><ROW><id>21060360</id><snippet>eval</snippet></ROW><ROW><id>21060360</id><snippet>input().split()</snippet></ROW><ROW><id>21060677</id><snippet>update_checker.py</snippet></ROW><ROW><id>21060677</id><snippet>with open(filename, 'rb') as f:   # will close() when we leave this block
    permacache = pickle.load(f)
</snippet></ROW><ROW><id>21060762</id><snippet>r['hits']</snippet></ROW><ROW><id>21060762</id><snippet>r['hits']</snippet></ROW><ROW><id>21060762</id><snippet>r = requests.get('http://pixabay.com/api/?username=USERNAME&amp;key=APIKEY&amp;search_term=yellow+flower&amp;image_type=photo&amp;per_page=8')
r = r.json()
for item in r['hits']:
    print item['type']
</snippet></ROW><ROW><id>21060822</id><snippet>with open('database.txt','a+') as myfile:
    json.dump(lst, myfile)
    myfile.write('\n')
</snippet></ROW><ROW><id>21061218</id><snippet>travis.yml</snippet></ROW><ROW><id>21061218</id><snippet>.</snippet></ROW><ROW><id>21061218</id><snippet>.travis.yml</snippet></ROW><ROW><id>21061500</id><snippet>GridSearchCV</snippet></ROW><ROW><id>21061581</id><snippet>fs</snippet></ROW><ROW><id>21061581</id><snippet>N=len(eeg1)</snippet></ROW><ROW><id>21061581</id><snippet>fft</snippet></ROW><ROW><id>21061581</id><snippet>N</snippet></ROW><ROW><id>21061581</id><snippet>N/2</snippet></ROW><ROW><id>21061581</id><snippet>0..fs/2</snippet></ROW><ROW><id>21061581</id><snippet>-fs/2..0</snippet></ROW><ROW><id>21061581</id><snippet>f=linspace(0,N-1,N)*fs/N</snippet></ROW><ROW><id>21061581</id><snippet>f = np.linspace (0,fs,len(eeg1), endpoint=False)</snippet></ROW><ROW><id>21061581</id><snippet>f</snippet></ROW><ROW><id>21061581</id><snippet>0</snippet></ROW><ROW><id>21061581</id><snippet>fs</snippet></ROW><ROW><id>21061581</id><snippet>plt.plot(  f(0:N/2), abs( fft1(0:N/2) )  )</snippet></ROW><ROW><id>21061581</id><snippet>f = np.linspace (-fs/2,fs/2,len(eeg1), endpoint=False)</snippet></ROW><ROW><id>21061670</id><snippet>--stations</snippet></ROW><ROW><id>21061670</id><snippet>DEFAULT_FILE = ''
for p in [path.join(getenv('HOME', '~'), '.pyradio', 'stations.csv'),
          path.join(getenv('HOME', '~'), '.pyradio'),
          path.join(path.dirname(__file__), 'stations.csv')]:
    if path.exists(p) and path.isfile(p):
        DEFAULT_FILE = p
        break
</snippet></ROW><ROW><id>21061670</id><snippet>.pyradio</snippet></ROW><ROW><id>21061670</id><snippet>.pyradio</snippet></ROW><ROW><id>21061752</id><snippet>with open('name_of_the_txt_file.txt','a') as fp: 
    fp.write("%s has: %s  " % (Student,passed_or_failed))
</snippet></ROW><ROW><id>21061987</id><snippet>&gt;&gt;&gt; s = "123456"
&gt;&gt;&gt; it = reversed(s)
&gt;&gt;&gt; ''.join(next(it) + x for x in it)
'563412'
</snippet></ROW><ROW><id>21061987</id><snippet>&gt;&gt;&gt; s = "7123456"
&gt;&gt;&gt; it = reversed(s)
&gt;&gt;&gt; (s[0] if len(s)%2 else '') + ''.join(next(it) + x for x in it)
'7563412'
</snippet></ROW><ROW><id>21061987</id><snippet>zip</snippet></ROW><ROW><id>21061987</id><snippet>&gt;&gt;&gt; s = "7123456"
&gt;&gt;&gt; (s[0] if len(s)%2 else '') + ''.join(x+y for x, y in zip(s[-2::-2], s[::-2]))
'7563412'
</snippet></ROW><ROW><id>21062034</id><snippet>import cv2
import urllib
import numpy as np

req = urllib.urlopen('http://answers.opencv.org/upfiles/logo_2.png')
arr = np.asarray(bytearray(req.read()), dtype=np.uint8)
img = cv2.imdecode(arr,-1) # 'load it as it is'

cv2.imshow('lalala',img)
if cv2.waitKey() &amp; 0xff == 27: quit()
</snippet></ROW><ROW><id>21062146</id><snippet>import json

response = get_response()
json_response = json.loads(response.content)
json_response['status']
</snippet></ROW><ROW><id>21062151</id><snippet>--presplash</snippet></ROW><ROW><id>21062151</id><snippet>presplash.filename</snippet></ROW><ROW><id>21062151</id><snippet>build</snippet></ROW><ROW><id>21062539</id><snippet>browser.driver.set_window_size(640, 480)
</snippet></ROW><ROW><id>21062539</id><snippet>.driver</snippet></ROW><ROW><id>21062539</id><snippet>&gt;&gt;&gt; from splinter import Browser
&gt;&gt;&gt; browser = Browser()
&gt;&gt;&gt; browser
&lt;splinter.driver.webdriver.firefox.WebDriver object at 0x7fac66d93a10&gt;
&gt;&gt;&gt; browser.driver
&lt;selenium.webdriver.firefox.webdriver.WebDriver object at 0x1fbf3d0&gt;
</snippet></ROW><ROW><id>21062539</id><snippet>set_window_size</snippet></ROW><ROW><id>21062649</id><snippet>SSSSSSSSSSSSSsssssssssssssssss SSSSSSSSSSSSSSssssssssssssss
</snippet></ROW><ROW><id>21062649</id><snippet>&gt;&gt;&gt; lines = []
&gt;&gt;&gt; for i in range(0,len(words),5):
    line = " ".join(words[i:i+5])
    lines.append(line)
&gt;&gt;&gt; out = "\n".join(lines)
</snippet></ROW><ROW><id>21062703</id><snippet>from itertools import islice, cycle


def roundrobin(*iterables):
    "roundrobin('ABC', 'D', 'EF') --&gt; A D E B F C"
    # Recipe credited to George Sakkis
    pending = len(iterables)
    nexts = cycle(iter(it).next for it in iterables)
    while pending:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            pending -= 1
            nexts = cycle(islice(nexts, pending))


print list(roundrobin(range(5), "hello"))
</snippet></ROW><ROW><id>21062817</id><snippet>lines = open(path,"r").readlines()
</snippet></ROW><ROW><id>21062817</id><snippet>import random #preferably at the top of the script
myline = random.choice(lines)
</snippet></ROW><ROW><id>21062817</id><snippet>cleanline = line.strip()
</snippet></ROW><ROW><id>21062817</id><snippet>br=mechanize.Browser()
br.set_handle_robots(False)

def open_page(url,agent,proxy):
    changeuseragent(agent.strip()) # pass br here, or move above lines out
    addproxy(proxy.strip()) # into the global scope
    changecookie()

    return br.open(url)

# if script is executed, not imported. This line below is common magic.
if __name__=="__main__": 
    # TODO: open your files
    somelines = file(path,"r").readlines()
    #
    running = True
    while running:
        # TODO: select a line
        oneline = random.choice(lines)
        secondline = random.choice(otherlines)
        #
        f = open_page(your_url,agentline,proxyline)
        print f.read() #&lt;or do whatever you wish
        f.close() #&lt;not necessary

        running = raw_input("x and enter to exit: ").lower().startswith("x")
    # And on it goes.
</snippet></ROW><ROW><id>21062836</id><snippet>render</snippet></ROW><ROW><id>21062836</id><snippet>RequestContext</snippet></ROW><ROW><id>21062836</id><snippet>django.contrib.auth.context_processors.auth</snippet></ROW><ROW><id>21062836</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>21062836</id><snippet>User</snippet></ROW><ROW><id>21062836</id><snippet>AnonymousUser</snippet></ROW><ROW><id>21062836</id><snippet>{{ user }}</snippet></ROW><ROW><id>21062836</id><snippet>render</snippet></ROW><ROW><id>21062836</id><snippet>RequestContext</snippet></ROW><ROW><id>21062836</id><snippet>{{ messages }}</snippet></ROW><ROW><id>21062836</id><snippet>{{ messages|length }}</snippet></ROW><ROW><id>21062836</id><snippet>RequestContext</snippet></ROW><ROW><id>21062836</id><snippet>base.html</snippet></ROW><ROW><id>21062836</id><snippet>base.html</snippet></ROW><ROW><id>21063027</id><snippet>X = [ [ Int("x_%s_%s" % (i+1, j+1)) for j in range(9) ] 
  for i in range(9) ]
</snippet></ROW><ROW><id>21063027</id><snippet>cells_c  = [ And(1 &lt;= X[i][j], X[i][j] &lt;= 9) 
         for i in range(9) for j in range(9) ]
</snippet></ROW><ROW><id>21063474</id><snippet>import os
import time
import pygame


# Center the Frame in the screen.
os.environ['SDL_VIDEO_CENTERED'] = '1'

BG_COLOR = (224, 255, 255)
TEXT_COLOR = (0, 0, 255)
SIZE = (800, 360)


def show_window(text, font, screen):
    rendered_text = font.render(text, True, TEXT_COLOR)
    screen.fill(BG_COLOR)
    screen.blit(rendered_text, ((SIZE[0] - rendered_text.get_width()) // 2,
                                (SIZE[1] - rendered_text.get_height()) // 2))
    pygame.display.flip()


pygame.init()
screen = pygame.display.set_mode(SIZE)
font = pygame.font.SysFont("comicsansms", 200)

words = ['foo', 'bar', 'baz']
for word in words:
    show_window(word, font, screen)
    # Replace the following `sleep` call with your stuff.
    time.sleep(3)

pygame.quit()
print "done"
</snippet></ROW><ROW><id>21063814</id><snippet>In [15]: items = ['Item1','Item2']

In [17]: p1 = Panel({ 'Item1' : DataFrame(randn(4, 3)) }).reindex(items=items)

In [18]: p2 = Panel({ 'Item2' : DataFrame(randn(4, 2)) }).reindex(items=items)

In [26]: p4d = pd.Panel4D({ 'Label1' : p1, 'Label2' : p2 })

In [27]: p4d.ix['Label1','Item1']
Out[27]: 
          0         1         2
0  1.974462 -0.916765 -0.577381
1  0.378009  0.047688 -0.281828
2 -0.288759  0.697560 -0.074013
3 -0.124308  0.908857 -0.042192

[4 rows x 3 columns]

In [28]: p4d.ix['Label1','Item2']
Out[28]: 
    0   1   2
0 NaN NaN NaN
1 NaN NaN NaN
2 NaN NaN NaN
3 NaN NaN NaN

[4 rows x 3 columns]
</snippet></ROW><ROW><id>21063821</id><snippet>from PIL import Image, ImageTk

image = Image.open("lenna.jpg")
photo = ImageTk.PhotoImage(image)
</snippet></ROW><ROW><id>21063821</id><snippet>ImageTk.PhotoImage</snippet></ROW><ROW><id>21063821</id><snippet>Tkinter.PhotoImage</snippet></ROW><ROW><id>21063821</id><snippet>root = Tk()
PILFile = Image.open("Image.jpg")
Image = ImageTk.PhotoImage(PILFile) # &lt;---
ImageLabel = Label(root, image=Image)
ImageLabel.image = Image
ImageLabel.pack()
root.mainloop()
</snippet></ROW><ROW><id>21064134</id><snippet>Series</snippet></ROW><ROW><id>21064134</id><snippet>{column: aggfunc}</snippet></ROW><ROW><id>21064134</id><snippet>.agg()</snippet></ROW><ROW><id>21064134</id><snippet>year</snippet></ROW><ROW><id>21064134</id><snippet>fn</snippet></ROW><ROW><id>21064134</id><snippet>In [32]: def fn(x):
    print("Printing x+1 : {}".format(x + 1))
    print("Printing x: {}".format(x))
    return 0
</snippet></ROW><ROW><id>21064134</id><snippet>df['year']</snippet></ROW><ROW><id>21064134</id><snippet>In [33]: df['year'] = ['a', 'a', 'b', 'b', 'c']
</snippet></ROW><ROW><id>21064134</id><snippet>pandas/core/groupby.py</snippet></ROW><ROW><id>21064134</id><snippet>df.groupby('year')</snippet></ROW><ROW><id>21064134</id><snippet>DataFrameGroupby</snippet></ROW><ROW><id>21064134</id><snippet>df</snippet></ROW><ROW><id>21064134</id><snippet>DataFrame</snippet></ROW><ROW><id>21064134</id><snippet>.agg()</snippet></ROW><ROW><id>21064134</id><snippet>DataFrameGroupBy</snippet></ROW><ROW><id>21064134</id><snippet>NDFrameGroupBy</snippet></ROW><ROW><id>21064134</id><snippet>NDFrameGroupBy._aggregate_generic()</snippet></ROW><ROW><id>21064134</id><snippet>    try:
        for name, data in self:
            result[name] = self._try_cast(func(data, *args, **kwargs),
                                          data)
    except Exception:
        return self._aggregate_item_by_item(func, *args, **kwargs)
</snippet></ROW><ROW><id>21064134</id><snippet>try</snippet></ROW><ROW><id>21064134</id><snippet>print x</snippet></ROW><ROW><id>21064134</id><snippet>try</snippet></ROW><ROW><id>21064134</id><snippet>_aggregate_item_by_item</snippet></ROW><ROW><id>21064134</id><snippet>return np.mean(x)</snippet></ROW><ROW><id>21064134</id><snippet>return 0</snippet></ROW><ROW><id>21064134</id><snippet>mean</snippet></ROW><ROW><id>21064134</id><snippet>_aggregate_item_by_item</snippet></ROW><ROW><id>21064134</id><snippet>df['year']</snippet></ROW><ROW><id>21064134</id><snippet>fn</snippet></ROW><ROW><id>21064134</id><snippet>return 0</snippet></ROW><ROW><id>21064134</id><snippet>try</snippet></ROW><ROW><id>21064468</id><snippet>self.image = pygame.image.load("explosion.jpg")
</snippet></ROW><ROW><id>21064468</id><snippet>self</snippet></ROW><ROW><id>21064468</id><snippet>ship.image = pygame.image.load("explosion.jpg")
</snippet></ROW><ROW><id>21064468</id><snippet>missile.image = pygame.image.load("explosion.jpg")
</snippet></ROW><ROW><id>21064522</id><snippet>?</snippet></ROW><ROW><id>21064522</id><snippet>,?</snippet></ROW><ROW><id>21064522</id><snippet>,?*</snippet></ROW><ROW><id>21064522</id><snippet>sre_compile.error</snippet></ROW><ROW><id>21064522</id><snippet>.</snippet></ROW><ROW><id>21064522</id><snippet>?</snippet></ROW><ROW><id>21064522</id><snippet>PATTERN = r'(\d{6}),(\d{6}),(.*?),(.*?),(.*)'
match = re.match(PATTERN, input_line)
if match:
    primary_id = match.group(1)
    text = match.group(5)
else:
    text = input_line
</snippet></ROW><ROW><id>21064522</id><snippet>\d</snippet></ROW><ROW><id>21064522</id><snippet>[0-9]</snippet></ROW><ROW><id>21064522</id><snippet>0</snippet></ROW><ROW><id>21064522</id><snippet>[1-9]{6}</snippet></ROW><ROW><id>21064522</id><snippet>match.group(num)</snippet></ROW><ROW><id>21064522</id><snippet>match.group()[num]</snippet></ROW><ROW><id>21064522</id><snippet>match.group(5)</snippet></ROW><ROW><id>21064522</id><snippet>match.group()[7]</snippet></ROW><ROW><id>21064522</id><snippet>.*</snippet></ROW><ROW><id>21064522</id><snippet>.*?</snippet></ROW><ROW><id>21064522</id><snippet>.*?</snippet></ROW><ROW><id>21064522</id><snippet>[^,]*</snippet></ROW><ROW><id>21064522</id><snippet>PATTERN = r'(\d{6}),(\d{6}),([^,]*),([^,]*),(.*)'
</snippet></ROW><ROW><id>21064551</id><snippet># -*- coding: utf-8 -*-</snippet></ROW><ROW><id>21064551</id><snippet>PEP 0263</snippet></ROW><ROW><id>21064607</id><snippet>repr</snippet></ROW><ROW><id>21064607</id><snippet>&gt;&gt;&gt; print(repr({'company_code': u'ha'}))
{'company_code': u'ha'}
</snippet></ROW><ROW><id>21064607</id><snippet>&gt;&gt;&gt; print(json.dumps({'company_code': u'ha'}))
{"company_code": "ha"}
</snippet></ROW><ROW><id>21064607</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; json.loads('"a"')
u'a'
&gt;&gt;&gt; json.loads("'a'")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\json\__init__.py", line 338, in loads
    return _default_decoder.decode(s)
  File "C:\Python27\lib\json\decoder.py", line 365, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "C:\Python27\lib\json\decoder.py", line 383, in raw_decode
    raise ValueError("No JSON object could be decoded")
ValueError: No JSON object could be decoded
</snippet></ROW><ROW><id>21064607</id><snippet>json.loads</snippet></ROW><ROW><id>21064607</id><snippet>dict[key]</snippet></ROW><ROW><id>21064607</id><snippet>&gt;&gt;&gt; encoded = '{"company_code": "ha", "from-date": "", "to-date": "", "ledger_type": "CLNT", "cost_center": "ALL", "margin": "wtmg"}'
&gt;&gt;&gt; decoded = json.loads(encoded)
&gt;&gt;&gt; decoded['company_code']
u'ha'
</snippet></ROW><ROW><id>21065004</id><snippet>from itertools import groupby

s = "    Mary    had    a little lamb  "
res = ''.join(' ' if is_space else ''.join(chars) for is_space, chars in groupby(s, str.isspace))
#  Mary had a little lamb 
</snippet></ROW><ROW><id>21065102</id><snippet>rsync</snippet></ROW><ROW><id>21065232</id><snippet>http://example.site.com/customers?fields=id,first_name,last_name</snippet></ROW><ROW><id>21065232</id><snippet>from requests import Session, Request
request = Request('GET', 'https://httpbin.org/get')
prepared = request.prepare()
prepared.url += '?field=id,first_name,last_name'
session = Session()
response = session.send(prepared)
</snippet></ROW><ROW><id>21065400</id><snippet>set</snippet></ROW><ROW><id>21065400</id><snippet>&gt;&gt;&gt; mylist = [['Installation', '64%'], ['C2', '14%'], ['NA', '14%'], ['C2', '14%'], ['NA', '14%'], ['na', '7%']]
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; newlist = []
&gt;&gt;&gt; for item in mylist:
...     t = tuple(item)
...     if t not in seen:
...         newlist.append(item)
...         seen.add(t)
...
&gt;&gt;&gt; newlist
[['Installation', '64%'], ['C2', '14%'], ['NA', '14%'], ['na', '7%']]
</snippet></ROW><ROW><id>21065400</id><snippet>&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; seen.add([1,2])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
&gt;&gt;&gt; seen.add(tuple([1,2]))
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21065605</id><snippet>.*</snippet></ROW><ROW><id>21065605</id><snippet>.*?
</snippet></ROW><ROW><id>21065928</id><snippet>addTab</snippet></ROW><ROW><id>21065928</id><snippet>import sys, random
from PyQt4 import QtCore, QtGui

class TabContainer(QtGui.QWidget):
  def __init__(self):
    super(TabContainer, self).__init__()
    self.next_item_is_table = False
    self.initUI()

  def initUI(self):
    self.setGeometry( 150, 150, 650, 350)
    self.tabwidget = QtGui.QTabWidget(self)
    vbox = QtGui.QVBoxLayout()
    vbox.addWidget(self.tabwidget)
    self.setLayout(vbox)
    self.pages = []
    self.add_page()
    self.show()

  def create_page(self, *contents):
    page = QtGui.QWidget()
    vbox = QtGui.QVBoxLayout()
    for c in contents:
        vbox.addWidget(c)

    page.setLayout(vbox)
    return page

  def create_table(self):
    rows, columns = random.randint(2,5), random.randint(1,5)
    table = QtGui.QTableWidget( rows, columns )
    for r in xrange(rows):
        for c in xrange(columns):
            table.setItem( r, c, QtGui.QTableWidgetItem( str( random.randint(0,10) ) ) )
    return table

  def create_list(self):
    list = QtGui.QListWidget()
    columns = random.randint(2,5)
    for c in xrange(columns):
        QtGui.QListWidgetItem( str( random.randint(0,10) ), list )

    return list

  def create_new_page_button(self):
    btn = QtGui.QPushButton('Create a new page!')
    btn.clicked.connect(self.add_page)
    return btn

  def add_page(self):
    if self.next_item_is_table:
        self.pages.append( self.create_page( self.create_table(), self.create_new_page_button() ) )
        self.next_item_is_table = False
    else:
        self.pages.append( self.create_page( self.create_list(), self.create_new_page_button() ) )
        self.next_item_is_table = True

    self.tabwidget.addTab( self.pages[-1] , 'Page %s' % len(self.pages) )
    self.tabwidget.setCurrentIndex( len(self.pages)-1 )

app = QtGui.QApplication(sys.argv)
ex = TabContainer()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>21066136</id><snippet>&gt;&gt;&gt; print("\u0631\u064e\u062c\u0627")
ÿ±Ÿéÿ¨ÿß
</snippet></ROW><ROW><id>21066136</id><snippet>ÿ±Ÿé</snippet></ROW><ROW><id>21066136</id><snippet>ÿ¨ÿß</snippet></ROW><ROW><id>21066300</id><snippet>dict</snippet></ROW><ROW><id>21066300</id><snippet>or</snippet></ROW><ROW><id>21066300</id><snippet>in</snippet></ROW><ROW><id>21066300</id><snippet>set</snippet></ROW><ROW><id>21066300</id><snippet>if var in {'test','test2'}:
    #do something
</snippet></ROW><ROW><id>21066300</id><snippet>dict</snippet></ROW><ROW><id>21066300</id><snippet>set</snippet></ROW><ROW><id>21066300</id><snippet>set</snippet></ROW><ROW><id>21066300</id><snippet>dict</snippet></ROW><ROW><id>21066479</id><snippet>on_Button_clicked</snippet></ROW><ROW><id>21066479</id><snippet>exec_</snippet></ROW><ROW><id>21066479</id><snippet>self</snippet></ROW><ROW><id>21066479</id><snippet>dialog</snippet></ROW><ROW><id>21066479</id><snippet>AttributeError</snippet></ROW><ROW><id>21066479</id><snippet>MainDialog</snippet></ROW><ROW><id>21066479</id><snippet>class SubDialog(QtGui.QDialog, Ui_MyDialog): 
    def __init__(self, some_list, parent=None): 
        QtGui.QDialog.__init__(self, parent) 
        self.setupUi(self)
        self.setAttribute(QtCore.Qt.WA_DeleteOnClose)
        self.tableCo.setColumnCount(len(some_list))           
        self.tableCo.setHorizontalHeaderLabels(some_list)

class MainDialog(QtGui.QDialog, Dlg):  
    ...    

    def on_Button_clicked(self, checked=None):
        if checked is None: return
        dialog = SubQDialog(some_list)
        dialog.exec_()
</snippet></ROW><ROW><id>21066483</id><snippet>Track ID (\d+): audio \([A-Z0-9_/]+\) \[language:[a-z]{3} default_track:[01] forced_track:[01]\]
</snippet></ROW><ROW><id>21066483</id><snippet>Track ID (\d+): subtitles \([A-Z0-9_/]+\) \[language:[a-z]{3} default_track:[01] forced_track:[01]\]
</snippet></ROW><ROW><id>21066483</id><snippet>\[</snippet></ROW><ROW><id>21066483</id><snippet>\]</snippet></ROW><ROW><id>21066518</id><snippet>if</snippet></ROW><ROW><id>21066518</id><snippet>if</snippet></ROW><ROW><id>21066518</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit('create_matrix(particle_id=None)', setup='def create_matrix(particle_id=None):\n    if particle_id:\t        return particle_id\n    else: return None', number=10000000)
1.3292641180877212  # if statement with particle_id defaulting to None
&gt;&gt;&gt; timeit('create_matrix(particle_id=5)', setup='def create_matrix(particle_id=None):\n    if particle_id:\t        return particle_id\n    else: return None', number=10000000)
1.5606957465069584  # if statement with particle_id defaulting to 5
&gt;&gt;&gt; timeit('create_matrix(particle_id=5)', setup='def create_matrix(particle_id=None): return None', number=10000000)
1.2185165279484238  # no if statement
</snippet></ROW><ROW><id>21066518</id><snippet>if</snippet></ROW><ROW><id>21066518</id><snippet>if</snippet></ROW><ROW><id>21066518</id><snippet>def create_matrix(self, particle_id=None):
    if particle_id is not None:
        ...
</snippet></ROW><ROW><id>21066770</id><snippet>sort()</snippet></ROW><ROW><id>21066770</id><snippet>None</snippet></ROW><ROW><id>21066770</id><snippet>x['coverage'].sort() == u['coverage'].sort()
</snippet></ROW><ROW><id>21066770</id><snippet>sorted()</snippet></ROW><ROW><id>21066770</id><snippet>CV = 'coverage'
NM = 'name'

# If possible, make sure all of the data meets basic expectations.
# This simplifies other logic.
def normalize(bosses):
    for b in bosses:
        if CV not in b: b[CV] = []
        if NM not in b: b[NM] = None
        b[CV].sort()

normalize(listy)
normalize(updated)

def bosses_match(b1, b2):
    return b1[NM] == b2[NM] and b1[CV] == b2[CV]

for u in updated:
    matches = [i for i, x in enumerate(listy) if bosses_match(u, x)]
    if matches:
        for i in matches:
            listy[i] = u
    else:
        listy.append(u)
</snippet></ROW><ROW><id>21066770</id><snippet>from collections import defaultdict

lookup = defaultdict(list)
for i, b in enumerate(listy):
    lookup[b[NM]].append(i)     # Store the item, or the index.
</snippet></ROW><ROW><id>21066914</id><snippet>dict</snippet></ROW><ROW><id>21066914</id><snippet>list</snippet></ROW><ROW><id>21066914</id><snippet>instances = [] # list to hold instances
for _ in range(5):
    first_one *= 2
    second_one *= 1.5
    new = file_1.Hello() # create instance
    new.set_num(first_one, second_one) # set number
    instances.append(new) # add to list
</snippet></ROW><ROW><id>21066914</id><snippet>for instance in instances:
    print(instance._Hello__first)
    print(instance._Hello__second)
</snippet></ROW><ROW><id>21067231</id><snippet>filter</snippet></ROW><ROW><id>21067231</id><snippet>filter(lambda d: d['acronym'] == 'lol', loaded_data)
</snippet></ROW><ROW><id>21067231</id><snippet>acronym == lol</snippet></ROW><ROW><id>21067231</id><snippet>l = filter(lambda d: d['acronym'] == 'lol', loaded_data)
if l:
    print "found"
    print l[0]
</snippet></ROW><ROW><id>21067231</id><snippet>any</snippet></ROW><ROW><id>21067321</id><snippet>rewards = Reward.objects.all()
</snippet></ROW><ROW><id>21067321</id><snippet>rewards = Reward.objects.get()</snippet></ROW><ROW><id>21067321</id><snippet>rewards = Reward.objects.all()
rewards = [(x.id, x.name) for x in rewards]  # returns a list of tuples for the id and name fields (if such fields exist)
</snippet></ROW><ROW><id>21067344</id><snippet>top_score_id = sorted_tuple[0][0]
</snippet></ROW><ROW><id>21067470</id><snippet>importlib.import_module</snippet></ROW><ROW><id>21067470</id><snippet>__import__</snippet></ROW><ROW><id>21067470</id><snippet>&gt;&gt;&gt; from importlib import import_module
&gt;&gt;&gt; mod = raw_input(":")
:sys
&gt;&gt;&gt; sys = import_module(mod)
&gt;&gt;&gt; sys
&lt;module 'sys' (built-in)&gt;
&gt;&gt;&gt; sys.version_info # Just to demonstrate
sys.version_info(major=2, minor=7, micro=5, releaselevel='final', serial=0)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21067470</id><snippet>importlib.import_module</snippet></ROW><ROW><id>21067470</id><snippet>__import__</snippet></ROW><ROW><id>21067536</id><snippet>for x in range(0,len(tuesday)):
     print(" -",x)
</snippet></ROW><ROW><id>21067536</id><snippet>for x in range(0,len(tuesday)):
 print(" -",tuesday[x])
</snippet></ROW><ROW><id>21067536</id><snippet>for x in tuesday:
 print (x)
</snippet></ROW><ROW><id>21067574</id><snippet>list(set(mylist))</snippet></ROW><ROW><id>21067574</id><snippet>seen = set()

[x for x in mylist if x not in seen and not seen.add(x)]
Out[3]: [1, 2, 3, 6, 7, 9, 11]
</snippet></ROW><ROW><id>21067574</id><snippet>from itertools import zip_longest

[tup[0] for tup in zip_longest(mylist,mylist[1:]) if len(set(tup)) == 2]
Out[11]: [1, 2, 3, 6, 7, 9, 11]
</snippet></ROW><ROW><id>21067574</id><snippet>list(set(mylist))</snippet></ROW><ROW><id>21067587</id><snippet>tolist</snippet></ROW><ROW><id>21067587</id><snippet>&gt;&gt;&gt; r = numpy.array([[116, 114],[111, 104]])
&gt;&gt;&gt; [sum(e) for e in r.tolist()]
[230, 215]
</snippet></ROW><ROW><id>21067768</id><snippet>&gt;&gt;&gt; ['Ace'] + [str(i) for i in range(2,11)] + ['Jack', 'Queen', 'King']
['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']
</snippet></ROW><ROW><id>21067768</id><snippet>itertools.chain</snippet></ROW><ROW><id>21067768</id><snippet>&gt;&gt;&gt; list(itertools.chain(['Ace'], [str(i) for i in range(2,11)],
                         ['Jack', 'Queen', 'King']))

['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King']
</snippet></ROW><ROW><id>21067819</id><snippet>str()</snippet></ROW><ROW><id>21067819</id><snippet>&gt;&gt;&gt; str('\n')
'\n'
&gt;&gt;&gt; str(['\n'])
"['\\n']"
</snippet></ROW><ROW><id>21067819</id><snippet>str()</snippet></ROW><ROW><id>21067819</id><snippet>__str__()</snippet></ROW><ROW><id>21067819</id><snippet>__repr__()</snippet></ROW><ROW><id>21067819</id><snippet>&gt;&gt;&gt; "\n".__str__()
'\n'
&gt;&gt;&gt; "\n".__repr__()
"'\\n'"
</snippet></ROW><ROW><id>21067819</id><snippet>str()</snippet></ROW><ROW><id>21067819</id><snippet>''.join(str(x) for x in itemsToWriteToFile)
</snippet></ROW><ROW><id>21067820</id><snippet>**</snippet></ROW><ROW><id>21067820</id><snippet>def httpstatus(self, url, data=None, timeout=None):
    kwargs = {}
    if timeout is not None:
        kwargs['timeout'] = timeout
    urlopen(url, data, **kwargs)
</snippet></ROW><ROW><id>21067820</id><snippet>def httpstatus(self, url, data=None, **kwargs):
    # Don't forget to mention in documentation that all
    # extra arguments are passed to urlopen as is.
    urlopen(url, data, **kwargs)
</snippet></ROW><ROW><id>21067846</id><snippet>con = httplib.HTTPConnection("myweb.com")
while True:
    con.request("GET", "/x.css", headers={"Connection":" keep-alive"})
    result = con.getresponse()
    print result.reason, result.getheaders()
</snippet></ROW><ROW><id>21067994</id><snippet>{% obj in obj_list %}
    {% for key, value in obj.items %}
        {{ value }}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>21068036</id><snippet>message = client.messages.create(to,from_,body)</snippet></ROW><ROW><id>21068036</id><snippet>message = client.messages.create(to=to,from_=from_,body=body)</snippet></ROW><ROW><id>21068036</id><snippet>class Messages(ListResource):
    name = "Messages"
    key = "messages"
    instance = Message

    def create(self, from_=None, **kwargs):
        """
        Create and send a Message.

        :param str to: The destination phone number.
        :param str `from_`: The phone number sending this message
            (must be a verified Twilio number)
        :param str body: The message you want to send,
            limited to 1600 characters.
        :param list media_url: A list of URLs of images to include in the
            message.
        :param status_callback: A URL that Twilio will POST to when
            your message is processed.
        :param str application_sid: The 34 character sid of the application
            Twilio should use to handle this phone call.
        """
        kwargs["from"] = from_
        return self.create_instance(kwargs)
</snippet></ROW><ROW><id>21068061</id><snippet>event</snippet></ROW><ROW><id>21068061</id><snippet>save_m2m</snippet></ROW><ROW><id>21068061</id><snippet>save</snippet></ROW><ROW><id>21068061</id><snippet>commit=True</snippet></ROW><ROW><id>21068061</id><snippet>save</snippet></ROW><ROW><id>21068061</id><snippet>commit=False</snippet></ROW><ROW><id>21068061</id><snippet>save_m2m</snippet></ROW><ROW><id>21068061</id><snippet>EventForm</snippet></ROW><ROW><id>21068355</id><snippet>f = 'filename'
for path, dirs, files in os.walk('.'):
    if f in files:
        os.chdir(path)
        break
</snippet></ROW><ROW><id>21068381</id><snippet>import json

json.dumps(data, indent='\t')
</snippet></ROW><ROW><id>21068381</id><snippet>simplejson</snippet></ROW><ROW><id>21068381</id><snippet>import simplejson as json
</snippet></ROW><ROW><id>21068381</id><snippet>json</snippet></ROW><ROW><id>21068534</id><snippet>reset_index()</snippet></ROW><ROW><id>21068534</id><snippet>In [7]: df
Out[7]: 
  Field
1     a
2     b
3     c
5     d
6     e
8     f

[6 rows x 1 columns]

In [8]: df.reset_index(drop=True)
Out[8]: 
  Field
0     a
1     b
2     c
3     d
4     e
5     f

[6 rows x 1 columns]
</snippet></ROW><ROW><id>21068534</id><snippet>drop=True</snippet></ROW><ROW><id>21068534</id><snippet>use_index=False</snippet></ROW><ROW><id>21068534</id><snippet>df.plot()</snippet></ROW><ROW><id>21068585</id><snippet>getattr</snippet></ROW><ROW><id>21068585</id><snippet>bar</snippet></ROW><ROW><id>21068585</id><snippet>attr = 'bar'
getattr(foo, attr)  # &lt;=&gt; foo.bar 
</snippet></ROW><ROW><id>21068894</id><snippet>defmacro</snippet></ROW><ROW><id>21068986</id><snippet>sorted()</snippet></ROW><ROW><id>21068986</id><snippet>sorted()</snippet></ROW><ROW><id>21068986</id><snippet>&gt;&gt;&gt; c = [u'9', u'9', u'54', u'51', u'48', u'48', u'47', u'46', u'46', u'45', u'44', u'44', u'43', u'43', u'43', u'42', u'42', u'41', u'41', u'41', u'41', u'41', u'40', u'38', u'38', u'38', u'38', u'37', u'37', u'37', u'36', u'36', u'36', u'36', u'35', u'35', u'35', u'35', u'35', u'35', u'35', u'34', u'34', u'33', u'33', u'33', u'33', u'33', u'32', u'32', u'32', u'31', u'31', u'31', u'30', u'30', u'29', u'29', u'29', u'29', u'29', u'29', u'29', u'26', u'26', u'25', u'25', u'25', u'24', u'24', u'24', u'24', u'23', u'2', u'17', u'16', u'12', u'1', u'1', u'1', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0']
&gt;&gt;&gt; sorted(c, key=int)
[u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'1', u'1', u'1', u'2', u'9', u'9', u'12', u'16', u'17', u'23', u'24', u'24', u'24', u'24', u'25', u'25', u'25', u'26', u'26', u'29', u'29', u'29', u'29', u'29', u'29', u'29', u'30', u'30', u'31', u'31', u'31', u'32', u'32', u'32', u'33', u'33', u'33', u'33', u'33', u'34', u'34', u'35', u'35', u'35', u'35', u'35', u'35', u'35', u'36', u'36', u'36', u'36', u'37', u'37', u'37', u'38', u'38', u'38', u'38', u'40', u'41', u'41', u'41', u'41', u'41', u'42', u'42', u'43', u'43', u'43', u'44', u'44', u'45', u'46', u'46', u'47', u'48', u'48', u'51', u'54']
</snippet></ROW><ROW><id>21068986</id><snippet>natsort</snippet></ROW><ROW><id>21068986</id><snippet>&gt;&gt;&gt; import natsort
&gt;&gt;&gt; c = [u'9', u'9', u'54', u'51', u'48', u'48', u'47', u'46', u'46', u'45', u'44', u'44', u'43', u'43', u'43', u'42', u'42', u'41', u'41', u'41', u'41', u'41', u'40', u'38', u'38', u'38', u'38', u'37', u'37', u'37', u'36', u'36', u'36', u'36', u'35', u'35', u'35', u'35', u'35', u'35', u'35', u'34', u'34', u'33', u'33', u'33', u'33', u'33', u'32', u'32', u'32', u'31', u'31', u'31', u'30', u'30', u'29', u'29', u'29', u'29', u'29', u'29', u'29', u'26', u'26', u'25', u'25', u'25', u'24', u'24', u'24', u'24', u'23', u'2', u'17', u'16', u'12', u'1', u'1', u'1', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0']
&gt;&gt;&gt; natsort.natsorted(c, key=lambda y: y.lower())
[u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'0', u'1', u'1', u'1', u'2', u'9', u'9', u'12', u'16', u'17', u'23', u'24', u'24', u'24', u'24', u'25', u'25', u'25', u'26', u'26', u'29', u'29', u'29', u'29', u'29', u'29', u'29', u'30', u'30', u'31', u'31', u'31', u'32', u'32', u'32', u'33', u'33', u'33', u'33', u'33', u'34', u'34', u'35', u'35', u'35', u'35', u'35', u'35', u'35', u'36', u'36', u'36', u'36', u'37', u'37', u'37', u'38', u'38', u'38', u'38', u'40', u'41', u'41', u'41', u'41', u'41', u'42', u'42', u'43', u'43', u'43', u'44', u'44', u'45', u'46', u'46', u'47', u'48', u'48', u'51', u'54']
</snippet></ROW><ROW><id>21068986</id><snippet>&gt;&gt;&gt; x = ['foo12', 'foo1', 'foo2','foo24']
&gt;&gt;&gt; natsort.natsorted(x)
['foo1', 'foo2', 'foo12', 'foo24']
</snippet></ROW><ROW><id>21069118</id><snippet>start_urls</snippet></ROW><ROW><id>21069118</id><snippet>for url in spider.start_urls:
    request url and call spider.parse() with its response
</snippet></ROW><ROW><id>21069118</id><snippet>def parse(self, response):
    hxs = HtmlXPathSelector(response)
    item = PrivacyItem()
    item['desc'] = hxs.select('//body//p/text()').extract()
    item['title'] = hxs.select('//title/text()').extract()      
    return item
</snippet></ROW><ROW><id>21069118</id><snippet>hxs.select('..').extract()[0]</snippet></ROW><ROW><id>21069166</id><snippet>sudo pip</snippet></ROW><ROW><id>21069166</id><snippet>--allow-external</snippet></ROW><ROW><id>21069166</id><snippet>--allow-unverified</snippet></ROW><ROW><id>21069179</id><snippet>WebSocketServerFactory</snippet></ROW><ROW><id>21069179</id><snippet>externalPort</snippet></ROW><ROW><id>21069451</id><snippet>DatastoreInputReader</snippet></ROW><ROW><id>21069451</id><snippet>Domain</snippet></ROW><ROW><id>21069508</id><snippet>which python
</snippet></ROW><ROW><id>21069508</id><snippet>export PYTHONPATH=$PYTHONPATH:/path/to/your/python
</snippet></ROW><ROW><id>21069508</id><snippet>source .bash_profile
</snippet></ROW><ROW><id>21069513</id><snippet>tkinter.filedialog.askdirectory</snippet></ROW><ROW><id>21069513</id><snippet>askdirectory</snippet></ROW><ROW><id>21069513</id><snippet>\</snippet></ROW><ROW><id>21069513</id><snippet>askdirectory</snippet></ROW><ROW><id>21069513</id><snippet>open("C:/path/path/")
</snippet></ROW><ROW><id>21069513</id><snippet>open(r"C:\path\path")
</snippet></ROW><ROW><id>21069513</id><snippet>os.path</snippet></ROW><ROW><id>21069513</id><snippet>askdirectory</snippet></ROW><ROW><id>21069526</id><snippet>import json
import re
import urllib2

text = urllib2.urlopen('http://dcsd.nutrislice.com/menu/meadow-view/lunch/').read()
menu = json.loads(re.search(r"bootstrapData\['menuMonthWeeks'\]\s*=\s*(.*);", text).group(1))

print menu
</snippet></ROW><ROW><id>21069526</id><snippet>import itertools
import json
import re
import urllib2

text = urllib2.urlopen('http://dcsd.nutrislice.com/menu/meadow-view/lunch/').read()
menus = json.loads(re.search(r"bootstrapData\['menuMonthWeeks'\]\s*=\s*(.*);", text).group(1))

days = itertools.chain.from_iterable(menu['days'] for menu in menus)

day = next(itertools.dropwhile(lambda day: day['date'] != '2014-01-13', days), None)

if day:
    print '\n'.join(item['food']['description'] for item in day['menu_items'])
else:
    print 'Day not found.'
</snippet></ROW><ROW><id>21069542</id><snippet>QObject</snippet></ROW><ROW><id>21069542</id><snippet>print</snippet></ROW><ROW><id>21069542</id><snippet>QObject</snippet></ROW><ROW><id>21069542</id><snippet>QObject</snippet></ROW><ROW><id>21069542</id><snippet>print</snippet></ROW><ROW><id>21069542</id><snippet>QObject</snippet></ROW><ROW><id>21069542</id><snippet>print</snippet></ROW><ROW><id>21069542</id><snippet>QThread</snippet></ROW><ROW><id>21069542</id><snippet>EmmittingStream(QObject)</snippet></ROW><ROW><id>21069542</id><snippet>self.myLongTask = TaskThread()
sys.stdout = EmittingStream(textWritten=self.normalOutputWritten)
sys.stdout.moveToThread(self.myLongTask)
self.myLongTask.start()
</snippet></ROW><ROW><id>21069542</id><snippet>print</snippet></ROW><ROW><id>21069542</id><snippet>processEvents()</snippet></ROW><ROW><id>21069542</id><snippet>normalOutputWritten</snippet></ROW><ROW><id>21069542</id><snippet>EmittingStream</snippet></ROW><ROW><id>21069542</id><snippet>print</snippet></ROW><ROW><id>21069553</id><snippet>from BeautifulSoup import BeautifulSoup
soup = BeautifulSoup(open("file.html",'r').read())
cols = [header.string for header in soup.find('thead').findAll('th')]
col_idx = cols.index('Username')
col_values = [td[col_idx].string for td in [tr.findAll('td') for tr in soup.find('tbody').findAll('tr')]]
print col_values
</snippet></ROW><ROW><id>21069646</id><snippet>read_fwf</snippet></ROW><ROW><id>21069646</id><snippet>&gt;&gt;&gt; df = pd.read_fwf("2002FemPreg.dat",
... colspecs=[(0,13), (274, 276), (276, 277), (277, 279), (422, 440)],
... names=["caseid", "preglength", "outcome", "birthorder", "finalweight"])
&gt;&gt;&gt; df.head()
   caseid  preglength  outcome  birthorder   finalweight
0       1          39        1           1   6448.271112
1       1          39        1           2   6448.271112
2       2          39        1           1  12999.542264
3       2          39        1           2  12999.542264
4       2          39        1           3  12999.542264

[5 rows x 5 columns]
</snippet></ROW><ROW><id>21069676</id><snippet>gw_func_dict = dict((chr(2**i), func) for i, func in enumerate(gwfuncs[:8]))
</snippet></ROW><ROW><id>21069676</id><snippet>dict()</snippet></ROW><ROW><id>21069676</id><snippet>(key, value)</snippet></ROW><ROW><id>21069676</id><snippet>{key_expr: value_expr for targets in iterable &lt;additional loops or if expressions&gt;}
</snippet></ROW><ROW><id>21069676</id><snippet>dict((key_expr, value_expr) for targets in iterable &lt;additional loops or if expressions&gt;)
</snippet></ROW><ROW><id>21070057</id><snippet>sudo apt-get install gir1.2-gtksource-3.0
</snippet></ROW><ROW><id>21070075</id><snippet>import numpy as np
import pyqtgraph as pg
from PySide import QtCore
from scipy.ndimage import gaussian_filter


data = np.random.beta(0.5, 3, size=(500, 500))
data = gaussian_filter(data, sigma=(12, 3))

pg.image(data, title="my picture")

if __name__ == '__main__':
    import sys
    if sys.flags.interactive != 1 or not hasattr(QtCore, 'PYQT_VERSION'):
        pg.QtGui.QApplication.exec_()
</snippet></ROW><ROW><id>21070155</id><snippet>mousePressEvent</snippet></ROW><ROW><id>21070155</id><snippet>pyqtProperty</snippet></ROW><ROW><id>21070155</id><snippet>    ...

    @QtCore.pyqtProperty(bool)
    def state(self):
        return self._state

    @state.setter
    def state(self, value):
        self._state = value

    def mousePressEvent(self, event):
        print 'clicked'
        if self.state:
            self.state = False
            self.setText('OFF')
        else:
            self.state = True
            self.setText('ON')
        self.style().unpolish(self)
        self.style().polish(self)
        self.update()
        super(CustomButton, self).mousePressEvent(event)
</snippet></ROW><ROW><id>21070216</id><snippet>s1 = 'AB\xfc'
s2 = u'√¶'.encode('cp1252')
</snippet></ROW><ROW><id>21070261</id><snippet>DeviceAttribute</snippet></ROW><ROW><id>21070261</id><snippet>DeviceAttribute</snippet></ROW><ROW><id>21070261</id><snippet>DeviceAttribute</snippet></ROW><ROW><id>21070261</id><snippet>key</snippet></ROW><ROW><id>21070261</id><snippet>value</snippet></ROW><ROW><id>21070261</id><snippet>Device</snippet></ROW><ROW><id>21070261</id><snippet>OneToOneField</snippet></ROW><ROW><id>21070261</id><snippet>DeviceSubclassA</snippet></ROW><ROW><id>21070261</id><snippet>Device</snippet></ROW><ROW><id>21070261</id><snippet>DeviceSubclassB</snippet></ROW><ROW><id>21070261</id><snippet>Device</snippet></ROW><ROW><id>21070261</id><snippet>DeviceSubclassA</snippet></ROW><ROW><id>21070261</id><snippet>DeviceSubclassB</snippet></ROW><ROW><id>21070261</id><snippet>name</snippet></ROW><ROW><id>21070261</id><snippet>Device</snippet></ROW><ROW><id>21070290</id><snippet>pygame.py</snippet></ROW><ROW><id>21070290</id><snippet>pygame</snippet></ROW><ROW><id>21070290</id><snippet>  import pygame
File "C:\Users\George\Desktop\pygame.py", line 6, in &lt;module&gt;
</snippet></ROW><ROW><id>21070290</id><snippet>import pygame</snippet></ROW><ROW><id>21070290</id><snippet>C:\Users\George\Desktop\pygame.py</snippet></ROW><ROW><id>21070412</id><snippet>def _onSuccess(self, controller):
    # shortened to demonstrate even simple call to super
    # causes a different behaviour
    super(ConfirmControllerEx, self)._onSuccess(controller)
</snippet></ROW><ROW><id>21070412</id><snippet>_onSuccess</snippet></ROW><ROW><id>21070412</id><snippet>super</snippet></ROW><ROW><id>21070412</id><snippet>None</snippet></ROW><ROW><id>21070412</id><snippet>None</snippet></ROW><ROW><id>21070412</id><snippet>NoneType</snippet></ROW><ROW><id>21070412</id><snippet>_onSuccess</snippet></ROW><ROW><id>21070412</id><snippet>None</snippet></ROW><ROW><id>21070462</id><snippet>self</snippet></ROW><ROW><id>21070462</id><snippet>K[i][j] = self.kernel(self, B[i], C[j])
</snippet></ROW><ROW><id>21070462</id><snippet>self</snippet></ROW><ROW><id>21070462</id><snippet>K[i][j] = self.kernel(B[i], C[j])
</snippet></ROW><ROW><id>21070462</id><snippet>kernel()</snippet></ROW><ROW><id>21070462</id><snippet>kernel(self, self, B[i], C[j])</snippet></ROW><ROW><id>21070498</id><snippet>from django.db import models
from mptt.models import MPTTModel, TreeForeignKey

class Menu(MPTTModel):
    menuName = models.CharField(max_length=50)
    menuAlias = models.CharField(max_length=50, unique=True, validators=[aliasvalidator])
    published = models.BooleanField()
    parent = TreeForeignKey('self', null=True, blank=True, related_name='children', db_index=True)
</snippet></ROW><ROW><id>21070676</id><snippet>while True</snippet></ROW><ROW><id>21070676</id><snippet>print 'Translate "Dog" and "Water" to German.'
while True:
    word = raw_input("Word: ")

    # conditionals
</snippet></ROW><ROW><id>21070676</id><snippet>if word == 'quit': break</snippet></ROW><ROW><id>21070752</id><snippet>chrome</snippet></ROW><ROW><id>21070805</id><snippet>from scipy import sparse
a = sparse.diags([1,4,9],[-1,0,1],shape =(10,10),format ="csr")

numpy.sqrt(a.data)
</snippet></ROW><ROW><id>21070881</id><snippet>['cars']</snippet></ROW><ROW><id>21070881</id><snippet>'cars'</snippet></ROW><ROW><id>21070881</id><snippet>list[0] += '!'</snippet></ROW><ROW><id>21070881</id><snippet>list[0]</snippet></ROW><ROW><id>21070881</id><snippet>list</snippet></ROW><ROW><id>21070881</id><snippet>+=</snippet></ROW><ROW><id>21070881</id><snippet>'cars' + '!'</snippet></ROW><ROW><id>21070881</id><snippet>list</snippet></ROW><ROW><id>21070881</id><snippet>['']</snippet></ROW><ROW><id>21070881</id><snippet>!</snippet></ROW><ROW><id>21070902</id><snippet>&gt;&gt;&gt; attributes = {'class': 'left_padded', 'attr2': '...'}
&gt;&gt;&gt; div = soup.new_tag('div', **attributes)
&gt;&gt;&gt; div
&lt;div attr2="..." class="left_padded"&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>21070902</id><snippet>attributes</snippet></ROW><ROW><id>21070902</id><snippet>**</snippet></ROW><ROW><id>21070902</id><snippet>**attrs</snippet></ROW><ROW><id>21070902</id><snippet>soup.new_tag()</snippet></ROW><ROW><id>21070902</id><snippet>div['class']</snippet></ROW><ROW><id>21070934</id><snippet>while loop</snippet></ROW><ROW><id>21070934</id><snippet>playlist = []
while message:
    #....
print playlist
</snippet></ROW><ROW><id>21070998</id><snippet>item_data = {
    'Body': 'http://url_to_lolcat.gif',
    'SentBy': 'User A',
    'ReceivedTime': '12/9/2011 11:36:03 PM',
}

item = table.new_item(
    # Our hash key is 'forum'
    hash_key='LOLCat Forum',
    # Our range key is 'subject'
    range_key='Check this out!',
    # This has the
    attrs=item_data
)
</snippet></ROW><ROW><id>21070998</id><snippet>from boto.dynamodb2.table import Table

table = Table('users')

users.put_item(data={'username': 'johndoe', 
                     'first_name': 'John',
                     'last_name': 'Doe'})
</snippet></ROW><ROW><id>21071080</id><snippet>random.choice</snippet></ROW><ROW><id>21071080</id><snippet>import random

def random_line(f):
    return random.choice([line for line in f])

f = open("sample.txt", 'r')

print random_line(f)
</snippet></ROW><ROW><id>21071080</id><snippet>def random_line(f):
    return random.choice(f.readlines())
</snippet></ROW><ROW><id>21071110</id><snippet>"q"</snippet></ROW><ROW><id>21071110</id><snippet>None</snippet></ROW><ROW><id>21071110</id><snippet>None</snippet></ROW><ROW><id>21071110</id><snippet>split</snippet></ROW><ROW><id>21071110</id><snippet>message = request.args.get('q').split()
</snippet></ROW><ROW><id>21071110</id><snippet>message = request.args.get('q', '').split()
</snippet></ROW><ROW><id>21071224</id><snippet>extent</snippet></ROW><ROW><id>21071224</id><snippet>plt.imshow()</snippet></ROW><ROW><id>21071224</id><snippet>#All the stuff earlier in the program
plt.imshow(matrix, interpolation='nearest', cmap=plt.cm.ocean, extent=(0.5,10.5,0.5,10.5))
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>21071224</id><snippet>#All the stuff earlier in the program
plt.imshow(matrix, interpolation='nearest', cmap=plt.cm.ocean,
    extent=(0.5,numpy.shape(matrix)[0]+0.5,0.5,numpy.shape(matrix)[1]+0.5))
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>21071251</id><snippet>'td.title'</snippet></ROW><ROW><id>21071251</id><snippet>'span.runtime'</snippet></ROW><ROW><id>21071251</id><snippet>td.title</snippet></ROW><ROW><id>21071251</id><snippet>&lt;TD&gt;</snippet></ROW><ROW><id>21071251</id><snippet>class="title"</snippet></ROW><ROW><id>21071253</id><snippet>lengthDF['size'] = 'large'
lengthDF['size'][lengthDF.index &lt; 10] = 'small'
</snippet></ROW><ROW><id>21071269</id><snippet>\b</snippet></ROW><ROW><id>21071269</id><snippet>r'\baaa\b'</snippet></ROW><ROW><id>21071269</id><snippet>'\\b'</snippet></ROW><ROW><id>21071277</id><snippet>glob</snippet></ROW><ROW><id>21071277</id><snippet>&gt;&gt;&gt; import glob
&gt;&gt;&gt; glob.glob('ticket_[0-9][0-9][0-9][0-9][0-9][0-9].txt')
</snippet></ROW><ROW><id>21071308</id><snippet>lazy='dynamic'</snippet></ROW><ROW><id>21071308</id><snippet>class Group(db.Model):
    ...
    people = db.relationship(Person, lambda: groups_people, lazy='dynamic',
        backref=db.backref('groups', lazy='dynamic'))
    ...
</snippet></ROW><ROW><id>21071358</id><snippet>pip install virtualenv</snippet></ROW><ROW><id>21071358</id><snippet>pip uninstall virtualenv</snippet></ROW><ROW><id>21071419</id><snippet>#!/usr/bin/python3

from multiprocessing import *
import time

def nic_process( q ):
    while True:
        job = q.get()
        # perform task
        print(job)

        # add a delay to make timing happy
        time.sleep(1)

        # Put the job back into the queue.
        q.put(job)


if __name__ == '__main__':
    job_q = Queue()
    proc_count = cpu_count()

    pool = [ Process(target=nic_process, args=(job_q,)) for p in range(proc_count) ]
    for p in pool:
        p.start()

    # Fill the job queue.
    job_q.put(['job1','params',0,999])
    job_q.put(['job2','params',1000,1999])
    job_q.put(['job3','params',2000,2999])
    # ...
</snippet></ROW><ROW><id>21071752</id><snippet>import xml</snippet></ROW><ROW><id>21071752</id><snippet>xml.dom</snippet></ROW><ROW><id>21071752</id><snippet>&gt;&gt;&gt; import xml
&gt;&gt;&gt; xml.dom
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'dom'
&gt;&gt;&gt; import xml.dom
&gt;&gt;&gt; xml.dom
&lt;module 'xml.dom' from 'C:\Python27\lib\xml\dom\__init__.pyc'&gt;
</snippet></ROW><ROW><id>21071752</id><snippet>os.path</snippet></ROW><ROW><id>21071752</id><snippet>os</snippet></ROW><ROW><id>21071752</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path
&lt;module 'ntpath' from 'C:\Python27\lib\ntpath.pyc'&gt;
</snippet></ROW><ROW><id>21071865</id><snippet>Queue.Queue</snippet></ROW><ROW><id>21071865</id><snippet>stdout</snippet></ROW><ROW><id>21071865</id><snippet>Queue</snippet></ROW><ROW><id>21071865</id><snippet>Queue</snippet></ROW><ROW><id>21071865</id><snippet>QThread</snippet></ROW><ROW><id>21071865</id><snippet>import sys
from Queue import Queue
from PyQt4.QtCore import *
from PyQt4.QtGui import *

# The new Stream Object which replaces the default stream associated with sys.stdout
# This object just puts data in a queue!
class WriteStream(object):
    def __init__(self,queue):
        self.queue = queue

    def write(self, text):
        self.queue.put(text)

# A QObject (to be run in a QThread) which sits waiting for data to come through a Queue.Queue().
# It blocks until data is available, and one it has got something from the queue, it sends
# it to the "MainThread" by emitting a Qt Signal 
class MyReceiver(QObject):
    mysignal = pyqtSignal(str)

    def __init__(self,queue,*args,**kwargs):
        QObject.__init__(self,*args,**kwargs)
        self.queue = queue

    @pyqtSlot()
    def run(self):
        while True:
            text = self.queue.get()
            self.mysignal.emit(text)

# An example QObject (to be run in a QThread) which outputs information with print
class LongRunningThing(QObject):
    @pyqtSlot()
    def run(self):
        for i in range(1000):
            print i

# An Example application QWidget containing the textedit to redirect stdout to
class MyApp(QWidget):
    def __init__(self,*args,**kwargs):
        QWidget.__init__(self,*args,**kwargs)

        self.layout = QVBoxLayout(self)
        self.textedit = QTextEdit()
        self.button = QPushButton('start long running thread')
        self.button.clicked.connect(self.start_thread)
        self.layout.addWidget(self.textedit)
        self.layout.addWidget(self.button)

    @pyqtSlot(str)
    def append_text(self,text):
        self.textedit.moveCursor(QTextCursor.End)
        self.textedit.insertPlainText( text )

    @pyqtSlot()
    def start_thread(self):
        self.thread = QThread()
        self.long_running_thing = LongRunningThing()
        self.long_running_thing.moveToThread(self.thread)
        self.thread.started.connect(self.long_running_thing.run)
        self.thread.start()

# Create Queue and redirect sys.stdout to this queue
queue = Queue()
sys.stdout = WriteStream(queue)

# Create QApplication and QWidget
qapp = QApplication(sys.argv)  
app = MyApp()
app.show()

# Create thread that will listen on the other end of the queue, and send the text to the textedit in our application
thread = QThread()
my_receiver = MyReceiver(queue)
my_receiver.mysignal.connect(app.append_text)
my_receiver.moveToThread(thread)
thread.started.connect(my_receiver.run)
thread.start()

qapp.exec_()
</snippet></ROW><ROW><id>21071881</id><snippet># See if the ball hits the player paddle
if pygame.sprite.spritecollide(player, balls, False):
    # The 'diff' lets you try to bounce the ball left or right 
    # depending where on the paddle you hit it
    diff = (player.rect.x + player.width/2) - (ball.rect.x+ball.width/2)

    # Set the ball's y position in case 
    # we hit the ball on the edge of the paddle
    ball.rect.y = screen.get_height() - player.rect.height - ball.rect.height - 1
    ball.bounce(diff)
</snippet></ROW><ROW><id>21071881</id><snippet># Draw Everything
allsprites.draw(screen)
</snippet></ROW><ROW><id>21071881</id><snippet>list</snippet></ROW><ROW><id>21071881</id><snippet>balls</snippet></ROW><ROW><id>21071881</id><snippet>allsprites</snippet></ROW><ROW><id>21071881</id><snippet># Create the ball
ball = Ball()
allsprites.add(ball)
balls.add(ball)
</snippet></ROW><ROW><id>21071881</id><snippet>allsprites</snippet></ROW><ROW><id>21071881</id><snippet>sprite.Group</snippet></ROW><ROW><id>21071881</id><snippet>draw</snippet></ROW><ROW><id>21071881</id><snippet>sprite.Group.draw</snippet></ROW><ROW><id>21071881</id><snippet>update</snippet></ROW><ROW><id>21071881</id><snippet>Sprite</snippet></ROW><ROW><id>21071881</id><snippet>&gt;&gt;&gt; import pygame.sprite
&gt;&gt;&gt; pygame.sprite.__file__
'c:\\Python27\\lib\\site-packages\\pygame\\sprite.py'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21071881</id><snippet>__file__</snippet></ROW><ROW><id>21071881</id><snippet>class Sprite(object):
    """simple base class for visible game objects
    pygame.sprite.Sprite(*groups): return Sprite

    The base class for visible game objects. Derived classes will want to 
    override the Sprite.update() and assign a Sprite.image and 
    Sprite.rect attributes.  The initializer can accept any number of 
    Group instances to be added to.

    When subclassing the Sprite, be sure to call the base initializer before
    adding the Sprite to Groups.
    """

    def __init__(self, *groups):
        self.__g = {} # The groups the sprite is in
        if groups: self.add(groups)

    def add(self, *groups):
        """add the sprite to groups
        Sprite.add(*groups): return None

        Any number of Group instances can be passed as arguments. The 
        Sprite will be added to the Groups it is not already a member of.
        """
        has = self.__g.__contains__
        for group in groups:
            if hasattr(group, '_spritegroup'):
                if not has(group):
                    group.add_internal(self)
                    self.add_internal(group)
            else: self.add(*group)

    def remove(self, *groups):
        """remove the sprite from groups
        Sprite.remove(*groups): return None

        Any number of Group instances can be passed as arguments. The Sprite will
        be removed from the Groups it is currently a member of.
        """
        has = self.__g.__contains__
        for group in groups:
            if hasattr(group, '_spritegroup'):
                if has(group):
                    group.remove_internal(self)
                    self.remove_internal(group)
            else: self.remove(*group)

    def add_internal(self, group):
        self.__g[group] = 0

    def remove_internal(self, group):
        del self.__g[group]

    def update(self, *args):
        """method to control sprite behavior
        Sprite.update(*args):

        The default implementation of this method does nothing; it's just a
        convenient "hook" that you can override. This method is called by
        Group.update() with whatever arguments you give it.

        There is no need to use this method if not using the convenience 
        method by the same name in the Group class.
        """
        pass

    def kill(self):
        """remove the Sprite from all Groups
        Sprite.kill(): return None

        The Sprite is removed from all the Groups that contain it. This won't
        change anything about the state of the Sprite. It is possible to continue
        to use the Sprite after this method has been called, including adding it
        to Groups.
        """
        for c in self.__g.keys():
            c.remove_internal(self)
        self.__g.clear()

    def groups(self):
        """list of Groups that contain this Sprite
        Sprite.groups(): return group_list

        Return a list of all the Groups that contain this Sprite.
        """
        return self.__g.keys()

    def alive(self):
        """does the sprite belong to any groups
        Sprite.alive(): return bool

        Returns True when the Sprite belongs to one or more Groups.
        """
        return (len(self.__g) != 0)

    def __repr__(self):
        return "&lt;%s sprite(in %d groups)&gt;" % (self.__class__.__name__, len(self.__g))
</snippet></ROW><ROW><id>21071881</id><snippet>Sprite</snippet></ROW><ROW><id>21071897</id><snippet>int(counts)</snippet></ROW><ROW><id>21071897</id><snippet>counts</snippet></ROW><ROW><id>21071897</id><snippet>int(...)</snippet></ROW><ROW><id>21071897</id><snippet>counts = int(counts)
</snippet></ROW><ROW><id>21071897</id><snippet>f.readline()</snippet></ROW><ROW><id>21071897</id><snippet>int</snippet></ROW><ROW><id>21072044</id><snippet>lxml</snippet></ROW><ROW><id>21072044</id><snippet>cssselect</snippet></ROW><ROW><id>21072044</id><snippet>&gt;&gt;&gt; import urllib.request
&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; html = .. urllib.request.urlopen .. http://www.google.com/search?q=python ..
           .read()
&gt;&gt;&gt; root = lxml.html.fromstring(html)
&gt;&gt;&gt; div, = root.cssselect('#resultStats')
&gt;&gt;&gt; div.text_content().strip()
'About 46,600,000 results  (0.17 seconds)'
</snippet></ROW><ROW><id>21072278</id><snippet>dest_path</snippet></ROW><ROW><id>21072278</id><snippet>def my_function(source_path, dest_path, start_text, stop_text):
    # pre-format start and end to save time in loop (for case insensitive match)
    lower_start = start_text.lower()
    lower_stop = stop_text.lower()
    # safely open input and output files
    with open(source_path, 'r') as source, open(dest_path, 'w') as dest:
        # this variable controls if we're writing to the destination file or not
        writing = False
        # go through each line of the source file
        for line in source:
            # test if it's a starting or ending line
            if line.lower().startswith(lower_start): writing = True
            elif line.lower().startswith(lower_stop): writing = False
            # write line to destination file if needed
            if writing: dest.write(line)
</snippet></ROW><ROW><id>21072278</id><snippet>with</snippet></ROW><ROW><id>21072737</id><snippet>__init__</snippet></ROW><ROW><id>21072737</id><snippet>class Car:

    def take_to_repair_shop(self):
        pass

    def drive_to_the_beach(self):
        pass

    repair = take_to_repair_shop # &lt;---
    beach = drive_to_the_beach   # &lt;---
</snippet></ROW><ROW><id>21072737</id><snippet>&gt;&gt;&gt; car = Car()
&gt;&gt;&gt; car.repair()
&gt;&gt;&gt; car.take_to_repair_shop()
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21072894</id><snippet>urllib.parse.quote</snippet></ROW><ROW><id>21072894</id><snippet>&gt;&gt;&gt; import urllib.parse
&gt;&gt;&gt; word = 'ŸÖ€å‚Äåÿ®ÿßÿ¥ÿØ'
&gt;&gt;&gt; urllib.parse.quote(word, encoding='utf-8')
'%D9%85%DB%8C%E2%80%8C%D8%A8%D8%A7%D8%B4%D8%AF'
</snippet></ROW><ROW><id>21072894</id><snippet>encoding='utf-8'</snippet></ROW><ROW><id>21072894</id><snippet>utf-8</snippet></ROW><ROW><id>21072922</id><snippet>master</snippet></ROW><ROW><id>21072922</id><snippet>None</snippet></ROW><ROW><id>21072922</id><snippet>Tkinter.Frame</snippet></ROW><ROW><id>21072922</id><snippet>self</snippet></ROW><ROW><id>21072922</id><snippet>Frame</snippet></ROW><ROW><id>21072922</id><snippet>master</snippet></ROW><ROW><id>21072922</id><snippet>Button</snippet></ROW><ROW><id>21072922</id><snippet>def __init__(self)</snippet></ROW><ROW><id>21072922</id><snippet>app = Application(root)</snippet></ROW><ROW><id>21072922</id><snippet>TypeError</snippet></ROW><ROW><id>21072922</id><snippet>root</snippet></ROW><ROW><id>21072922</id><snippet>app = Application(root)</snippet></ROW><ROW><id>21072922</id><snippet>__init__</snippet></ROW><ROW><id>21072922</id><snippet>class Application(Tkinter.Frame):
</snippet></ROW><ROW><id>21072922</id><snippet>Application</snippet></ROW><ROW><id>21072922</id><snippet>Tkinter.Frame</snippet></ROW><ROW><id>21072922</id><snippet>def __init__(self, master):
</snippet></ROW><ROW><id>21072922</id><snippet>Application.__init__</snippet></ROW><ROW><id>21072922</id><snippet>self</snippet></ROW><ROW><id>21072922</id><snippet>app = Application(root)
</snippet></ROW><ROW><id>21072922</id><snippet>__init__</snippet></ROW><ROW><id>21072922</id><snippet>Application.__init__(app, root)
</snippet></ROW><ROW><id>21072922</id><snippet>__init__</snippet></ROW><ROW><id>21072922</id><snippet>self</snippet></ROW><ROW><id>21072922</id><snippet>master</snippet></ROW><ROW><id>21072922</id><snippet>TypeError</snippet></ROW><ROW><id>21072922</id><snippet>self</snippet></ROW><ROW><id>21072922</id><snippet>master</snippet></ROW><ROW><id>21072973</id><snippet>from tkinter import *</snippet></ROW><ROW><id>21072973</id><snippet>Label()</snippet></ROW><ROW><id>21072973</id><snippet>Tk()</snippet></ROW><ROW><id>21072973</id><snippet>sqrt</snippet></ROW><ROW><id>21072973</id><snippet>math</snippet></ROW><ROW><id>21072973</id><snippet>numpy</snippet></ROW><ROW><id>21072973</id><snippet>scipy</snippet></ROW><ROW><id>21072973</id><snippet>*</snippet></ROW><ROW><id>21072973</id><snippet>getint</snippet></ROW><ROW><id>21072973</id><snippet>tkinter</snippet></ROW><ROW><id>21072973</id><snippet>NONE</snippet></ROW><ROW><id>21072973</id><snippet>None</snippet></ROW><ROW><id>21072973</id><snippet>import tkinter</snippet></ROW><ROW><id>21072973</id><snippet>tkinter.Label()</snippet></ROW><ROW><id>21072973</id><snippet>tkinter.Tk()</snippet></ROW><ROW><id>21072973</id><snippet>import tkinter as tk</snippet></ROW><ROW><id>21072973</id><snippet>tk.Label()</snippet></ROW><ROW><id>21072973</id><snippet>tkinter -&gt; tk</snippet></ROW><ROW><id>21072973</id><snippet>numpy -&gt; np</snippet></ROW><ROW><id>21072996</id><snippet>data.xml</snippet></ROW><ROW><id>21072996</id><snippet>data.xml</snippet></ROW><ROW><id>21072996</id><snippet>template/</snippet></ROW><ROW><id>21072996</id><snippet>...
127.0.0.1 - - [12/Jan/2014 13:25:35] "GET /data.xml HTTP/1.1" 404 -
127.0.0.1 - - [12/Jan/2014 13:25:35] "GET /static/Column3D.swf HTTP/1.1" 304 -
...
</snippet></ROW><ROW><id>21072996</id><snippet>/static/Column3D.swf</snippet></ROW><ROW><id>21072996</id><snippet>http://whateveryour.domain/static/Column3D.swf</snippet></ROW><ROW><id>21072996</id><snippet>/data.xml</snippet></ROW><ROW><id>21072996</id><snippet>http://whateveryour.domain/data.xml</snippet></ROW><ROW><id>21072996</id><snippet>data.xml</snippet></ROW><ROW><id>21072996</id><snippet>Column3D.swf</snippet></ROW><ROW><id>21073481</id><snippet>ginput</snippet></ROW><ROW><id>21073481</id><snippet>(x,y)</snippet></ROW><ROW><id>21073481</id><snippet>int</snippet></ROW><ROW><id>21073822</id><snippet>idx = ["test1 2011",
"test2 2011",
"test3 2011",
"test1 2012",
"test2 2012",
"test3 2012"]

idx = pd.Index(idx)
</snippet></ROW><ROW><id>21073822</id><snippet>MultiIndex.from_tuples</snippet></ROW><ROW><id>21073822</id><snippet>[::-1]</snippet></ROW><ROW><id>21073822</id><snippet>midx = pd.MultiIndex.from_tuples([x.split()[::-1] for x in idx])
</snippet></ROW><ROW><id>21073822</id><snippet>In [12]: pd.DataFrame(np.random.randn(6,2), index=midx)
Out[12]:
                   0         1
2011 test1  0.340850  2.295460
     test2  1.201304 -0.546234
     test3 -0.667596  1.114521
2012 test1 -0.116098 -0.494520
     test2  0.663173 -0.834933
     test3  0.709935 -0.195774
</snippet></ROW><ROW><id>21073942</id><snippet>text_file = open('TempLog.log', 'a')
</snippet></ROW><ROW><id>21073942</id><snippet>open</snippet></ROW><ROW><id>21073973</id><snippet>str</snippet></ROW><ROW><id>21073973</id><snippet>def compare(this, that, encoding="utf-8"):
    // convert this to str
    if isinstance(this, bytes):
        this = str(this, encoding)
    // convert that to str
    if isinstance(that, bytes):
        that = str(that, encoding)
    return this == that
</snippet></ROW><ROW><id>21074135</id><snippet>user_limit</snippet></ROW><ROW><id>21074135</id><snippet>Int</snippet></ROW><ROW><id>21074135</id><snippet>raw_input()</snippet></ROW><ROW><id>21074135</id><snippet>str</snippet></ROW><ROW><id>21074135</id><snippet>int</snippet></ROW><ROW><id>21074135</id><snippet>def numbers(limit):
    i = 0
    numbers = []

    while i &lt; limit:
        numbers.append(i)
        i = i + 1
    print numbers

user_limit = int(raw_input("Give me a limit "))
numbers(user_limit)
</snippet></ROW><ROW><id>21074135</id><snippet>Give me a limit 8
[0, 1, 2, 3, 4, 5, 6, 7]
</snippet></ROW><ROW><id>21074327</id><snippet>datetime.datetime.combine</snippet></ROW><ROW><id>21074327</id><snippet>today = datetime.datetime.now().date()
</snippet></ROW><ROW><id>21074327</id><snippet>midday = datetime.time(hour=12)
</snippet></ROW><ROW><id>21074327</id><snippet>midday_today = datetime.datetime.combine(today, midday)
</snippet></ROW><ROW><id>21074327</id><snippet>midday</snippet></ROW><ROW><id>21074327</id><snippet>if datetime.datetime.now().time() &lt; midday:
</snippet></ROW><ROW><id>21074327</id><snippet>import datetime

now = datetime.datetime.now()

today = now.date()

midnight = datetime.time(hour=0)
midday = datetime.time(hour=12)

last_midnight = datetime.datetime.combine(today, midnight)
if now.time() &lt; midday:
    yesterday = today - datetime.timedelta(days=1)
    last_midday = datetime.datetime.combine(yesterday, midday)
else:
    last_midday = datetime.datetime.combine(today, midday)
</snippet></ROW><ROW><id>21074339</id><snippet>sudo pip install -U django-celery
</snippet></ROW><ROW><id>21074427</id><snippet>pprint</snippet></ROW><ROW><id>21074427</id><snippet>PrettyPrinter</snippet></ROW><ROW><id>21074427</id><snippet>stream</snippet></ROW><ROW><id>21074427</id><snippet>pp = pprint.PrettyPrinter(indent=4)
</snippet></ROW><ROW><id>21074427</id><snippet>pprint.pprint</snippet></ROW><ROW><id>21074427</id><snippet>stream</snippet></ROW><ROW><id>21074427</id><snippet>pprint</snippet></ROW><ROW><id>21074427</id><snippet>pprint</snippet></ROW><ROW><id>21074427</id><snippet>pywapi.get_weather_from_weather_com</snippet></ROW><ROW><id>21074427</id><snippet>import json

with open('weather.txt', 'wt') as out:
    json.dump(steyregg, out, indent=4)
</snippet></ROW><ROW><id>21074460</id><snippet>import re

def parse(s):
    if 'day' in s:
        m = re.match(r'(?P&lt;days&gt;[-\d]+) day[s]*, (?P&lt;hours&gt;\d+):(?P&lt;minutes&gt;\d+):(?P&lt;seconds&gt;\d[\.\d+]*)', s)
    else:
        m = re.match(r'(?P&lt;hours&gt;\d+):(?P&lt;minutes&gt;\d+):(?P&lt;seconds&gt;\d[\.\d+]*)', s)
    return {key: float(val) for key, val in m.groupdict().iteritems()}
</snippet></ROW><ROW><id>21074460</id><snippet>from datetime import timedelta

s1 = '1157 days, 9:46:39'
s2 = '12:00:01.824952'
s3 = '-1 day, 23:59:31.859767'
t1 = parse(s1)
t2 = parse(s2)
t3 = parse(s3)

timedelta(**t1) # datetime.timedelta(1157, 35199)
timedelta(**t2) # datetime.timedelta(0, 43201, 824952)
timedelta(**t3) # datetime.timedelta(-1, 86371, 859767)
</snippet></ROW><ROW><id>21074504</id><snippet>&gt;&gt;&gt; print "ABCD"*7, "\xc0\xf2\x03\x42FAKE\xfa\xfe\xff\xbf"
ABCDABCDABCDABCDABCDABCDABCD √Ä√≤BFAKE√∫√æ√ø¬ø
</snippet></ROW><ROW><id>21074553</id><snippet>&lt;?xml version="1.0"?&gt;
&lt;data&gt;
    &lt;country name="Liechtenstein"&gt;
        &lt;rank&gt;1&lt;/rank&gt;
        &lt;year&gt;2008&lt;/year&gt;
        &lt;gdppc&gt;141100&lt;/gdppc&gt;
        &lt;neighbor name="Austria" direction="E"/&gt;
        &lt;neighbor name="Switzerland" direction="W"/&gt;
    &lt;/country&gt;
    &lt;country name="Singapore"&gt;
        &lt;rank&gt;4&lt;/rank&gt;
        &lt;year&gt;2011&lt;/year&gt;
        &lt;gdppc&gt;59900&lt;/gdppc&gt;
        &lt;neighbor name="Malaysia" direction="N"/&gt;
    &lt;/country&gt;
    &lt;country name="Panama"&gt;
        &lt;rank&gt;68&lt;/rank&gt;
        &lt;year&gt;2011&lt;/year&gt;
        &lt;gdppc&gt;13600&lt;/gdppc&gt;
        &lt;neighbor name="Costa Rica" direction="W"/&gt;
        &lt;neighbor name="Colombia" direction="E"/&gt;
    &lt;/country&gt;
&lt;/data&gt;
</snippet></ROW><ROW><id>21074553</id><snippet>&gt;&gt;&gt; import xml.etree.ElementTree as ET
&gt;&gt;&gt; tree = ET.parse('test.xml')
&gt;&gt;&gt; for elem in tree.iter():
...     print elem
... 
&lt;Element 'data' at 0x10b2d7b50&gt;
&lt;Element 'country' at 0x10b2d7b90&gt;
&lt;Element 'rank' at 0x10b2d7bd0&gt;
&lt;Element 'year' at 0x10b2d7c50&gt;
&lt;Element 'gdppc' at 0x10b2d7d10&gt;
&lt;Element 'neighbor' at 0x10b2d7e90&gt;
&lt;Element 'neighbor' at 0x10b2d7ed0&gt;
&lt;Element 'country' at 0x10b2d7f10&gt;
&lt;Element 'rank' at 0x10b2d7f50&gt;
&lt;Element 'year' at 0x10b2d7f90&gt;
&lt;Element 'gdppc' at 0x10b2d7fd0&gt;
&lt;Element 'neighbor' at 0x10b2db050&gt;
&lt;Element 'country' at 0x10b2db090&gt;
&lt;Element 'rank' at 0x10b2db0d0&gt;
&lt;Element 'year' at 0x10b2db110&gt;
&lt;Element 'gdppc' at 0x10b2db150&gt;
&lt;Element 'neighbor' at 0x10b2db190&gt;
&lt;Element 'neighbor' at 0x10b2db1d0&gt;
</snippet></ROW><ROW><id>21074846</id><snippet>import re
pattern = re.compile("(?&lt;=&lt;li&gt;&lt;b&gt;).*?(?=&lt;/ul&gt;)", re.IGNORECASE | re.DOTALL)
print re.findall(pattern, data)
</snippet></ROW><ROW><id>21074846</id><snippet>['First list title&lt;/B&gt; Additional info\n  &lt;UL&gt;\n  &lt;LI&gt;&lt;I&gt;List element 1&lt;/I&gt; additional info\n  ',
 'Second list title&lt;/B&gt; Additional info\n  &lt;UL&gt;\n  &lt;LI&gt;&lt;I&gt;List element 1&lt;/I&gt; additional info1\n  &lt;LI&gt;&lt;I&gt;List element 2&lt;/I&gt; additional info2\n  &lt;LI&gt;&lt;I&gt;List element 3&lt;/I&gt; additional info3\n  &lt;LI&gt;&lt;I&gt;List element 4&lt;/I&gt; additional info4\n  ']
</snippet></ROW><ROW><id>21075011</id><snippet>animateButtons(self)</snippet></ROW><ROW><id>21075011</id><snippet>animation.start()</snippet></ROW><ROW><id>21075011</id><snippet>animation</snippet></ROW><ROW><id>21075011</id><snippet>self</snippet></ROW><ROW><id>21075011</id><snippet>self.animation = QtCore.QPropertyAnimation(...)
self.animation.setStartValue(...)
...
</snippet></ROW><ROW><id>21075165</id><snippet>def allAlarms():
    listDefault.set("Select ID")
    cbox['values'] = alarmIDs
def carAlarms():
    listDefault.set("Select ID")
    cbox['values'] = carAlarmIDs
def houseAlarms():
    listDefault.set("Select ID")
    cbox['values'] = houseAlarmIDs

allAlarms = ttk.Radiobutton(self.master, text="All", variable=self.alarmType,
                            value="alarmIDs", command=allAlarms).place(x=10, y=30)

carAlarms = ttk.Radiobutton(self.master, text="Car Alarms", variable=self.alarmType,
                            value="carAlarmIDs", command=carAlarms).place(x=10, y=50)

houseAlarms = ttk.Radiobutton(self.master, text="House Alarms", variable=self.alarmType,
                              value="houseAlarmIDs", command=houseAlarms).place(x=10, y=70)
</snippet></ROW><ROW><id>21075503</id><snippet>build</snippet></ROW><ROW><id>21075503</id><snippet>build2</snippet></ROW><ROW><id>21075503</id><snippet>FloatLayout</snippet></ROW><ROW><id>21075503</id><snippet>BoxLayout</snippet></ROW><ROW><id>21075503</id><snippet>button1 = '''
BoxLayout:
    Button:
        text: 'Check In'
        size_hint: None, None
        pos_hint: {'center_x': .5, 'center_y': .5}
        canvas.before:
            PushMatrix
            Rotate:
                angle: 0
                origin: self.center
        canvas.after:
            PopMatrix
    Button:
            text: 'SOS'
            size_hint: None, None
            pos_hint: {'center_x': 1.5, 'center_y': 1.5}
            canvas.before:
                PushMatrix
                Rotate:
                    angle: 45
                    origin: self.center
            canvas.after:
                PopMatrix

'''
</snippet></ROW><ROW><id>21075593</id><snippet>c = wmi.WMI()
wql = "Select * From Win32_SerialPort"
for item in c.query(wql):
    print item
</snippet></ROW><ROW><id>21075593</id><snippet>instance of Win32_SerialPort
{
    Availability = 2;
    Binary = TRUE;
    Caption = "SpectrumAnalyzer1 (COM15)";
    ConfigManagerErrorCode = 0;
    ConfigManagerUserConfig = FALSE;
    CreationClassName = "Win32_SerialPort";
    Description = "SpectrumAnalyzer1";
    DeviceID = "COM15";
    MaxBaudRate = 128000;
    MaximumInputBufferSize = 0;
    MaximumOutputBufferSize = 0;
    Name = "SpectrumAnalyzer1 (COM15)";
    OSAutoDiscovered = TRUE;
    PNPDeviceID = "USB\\VID_10C4&amp;PID_ED00\\1269376";
    PowerManagementCapabilities = {1};
    PowerManagementSupported = FALSE;
    ProviderType = "RS232 Serial Port";
    SettableBaudRate = TRUE;
    SettableDataBits = TRUE;
    SettableFlowControl = TRUE;
    SettableParity = TRUE;
    SettableParityCheck = TRUE;
    SettableRLSD = TRUE;
    SettableStopBits = TRUE;
    Status = "OK";
    StatusInfo = 3;
    Supports16BitMode = FALSE;
    SupportsDTRDSR = TRUE;
    SupportsElapsedTimeouts = TRUE;
    SupportsIntTimeouts = TRUE;
    SupportsParityCheck = TRUE;
    SupportsRLSD = TRUE;
    SupportsRTSCTS = TRUE;
    SupportsSpecialCharacters = TRUE;
    SupportsXOnXOff = TRUE;
    SupportsXOnXOffSet = TRUE;
    SystemCreationClassName = "Win32_ComputerSystem";
    SystemName = ".......";
};
</snippet></ROW><ROW><id>21075593</id><snippet>item</snippet></ROW><ROW><id>21075593</id><snippet>myQuery = c.query(wql)
myQuery.Availability 
</snippet></ROW><ROW><id>21075593</id><snippet>2
</snippet></ROW><ROW><id>21075593</id><snippet>in</snippet></ROW><ROW><id>21075593</id><snippet>for Temperature in c.sensor():
    if "/intelcpu/0/temperature/1" in Temperature.identifier:
        print Temperature.identifier
        print Temperature.value 
</snippet></ROW><ROW><id>21075653</id><snippet>os.pipe</snippet></ROW><ROW><id>21075653</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>21075653</id><snippet>Popen.communicate()</snippet></ROW><ROW><id>21075711</id><snippet>def lazy_func(func):
    class LazyComparer(object):
        def __init__(self, x):
            self.x = x
        def __lt__(self, other):
            return func(self.x) &lt; func(other.x)
        def __eq__(self, other):
            return func(self.x) == func(other.x)
    return lambda x: LazyComparer(x)
</snippet></ROW><ROW><id>21075711</id><snippet>def make_lazy(*funcs):
    def wrapper(x):
        return [lazy_func(f)(x) for f in funcs]
    return wrapper
</snippet></ROW><ROW><id>21075711</id><snippet>def countcalls(f):
    "Decorator that makes the function count calls to it."
    def _f(*args, **kwargs):
        _f._count += 1
        return f(*args, **kwargs)
    _f._count = 0
    return _f

@countcalls
def g(x): return x

@countcalls
def f1(x): return 0

@countcalls
def f2(x): return x

def report_calls(*funcs):
    print(' | '.join(['{} calls to {}'.format(f._count, f.func_name)
                      for f in funcs]))

L = range(10)[::-1]

L.sort(key=make_lazy(f1, g))
report_calls(f1, g)

g._count = 0
L.sort(key=make_lazy(f2, g))
report_calls(f2, g) 
</snippet></ROW><ROW><id>21075711</id><snippet>18 calls to f1 | 36 calls to g
36 calls to f2 | 0 calls to g
</snippet></ROW><ROW><id>21075711</id><snippet>f1</snippet></ROW><ROW><id>21075711</id><snippet>g</snippet></ROW><ROW><id>21075711</id><snippet>f2</snippet></ROW><ROW><id>21075711</id><snippet>g</snippet></ROW><ROW><id>21075711</id><snippet>Key</snippet></ROW><ROW><id>21075711</id><snippet>LazyComparer</snippet></ROW><ROW><id>21075711</id><snippet>def memo(f):
    # Author: Peter Norvig
    """Decorator that caches the return value for each call to f(args).
    Then when called again with same args, we can just look it up."""
    cache = {}
    def _f(*args):
        try:
            return cache[args]
        except KeyError:
            cache[args] = result = f(*args)
            return result
        except TypeError:
            # some element of args can't be a dict key
            return f(*args)
    _f.cache = cache
    return _f

L.sort(key=make_lazy(memo(f1), memo(g)))
report_calls(f1, g)
</snippet></ROW><ROW><id>21075711</id><snippet>g</snippet></ROW><ROW><id>21075711</id><snippet>10 calls to f1 | 10 calls to g
</snippet></ROW><ROW><id>21075792</id><snippet>__call__</snippet></ROW><ROW><id>21075792</id><snippet>class MyWSGIContainer(WSGIContainer):
    def __call__(self, request):
        if request.remote_ip in blacklist:
            self.write_redirect()
        else:
            super(MyWSGIContainer, self)(request)
</snippet></ROW><ROW><id>21075792</id><snippet>self.write_redirect()</snippet></ROW><ROW><id>21076036</id><snippet>raw_input</snippet></ROW><ROW><id>21076036</id><snippet>""</snippet></ROW><ROW><id>21076036</id><snippet>command()</snippet></ROW><ROW><id>21076036</id><snippet>elif user_input == "":
    pass
</snippet></ROW><ROW><id>21076036</id><snippet>raw_input</snippet></ROW><ROW><id>21076036</id><snippet>pygame</snippet></ROW><ROW><id>21076178</id><snippet>functools.partial</snippet></ROW><ROW><id>21076178</id><snippet># my_model.py
def V(m, k, x):
   return -m*x**2 + k*x**4
</snippet></ROW><ROW><id>21076178</id><snippet># scan.py
import functools
from scipy.optimize import minimize
import random, my_model

for i in range(5):
    m = random.randint(0,10)
    k = random.randint(0,10)
    minimize(functools.partial(my_model.V, m, k), 0)
</snippet></ROW><ROW><id>21076178</id><snippet>@classmethod</snippet></ROW><ROW><id>21076537</id><snippet>if</snippet></ROW><ROW><id>21076537</id><snippet>while True:
    msg = client.recv(1024)
    if msg == 'exit':
        print '&lt;System&gt;Host disconnected the Server...'
        print '&lt;System&gt;Program will shut down in 5 seconds'
        time.sleep(5)
        break
    else:
        print msg
</snippet></ROW><ROW><id>21076602</id><snippet>x</snippet></ROW><ROW><id>21076602</id><snippet>while y &gt;= 100:
    x = 1000
    ...
</snippet></ROW><ROW><id>21076743</id><snippet>string.index</snippet></ROW><ROW><id>21076743</id><snippet>def half(s):
    idx = s.index(' ', len(s) / 2)
    return s[:idx], s[idx+1:]
</snippet></ROW><ROW><id>21076902</id><snippet>a[1]</snippet></ROW><ROW><id>21076902</id><snippet>a[0]</snippet></ROW><ROW><id>21076902</id><snippet>a[2]</snippet></ROW><ROW><id>21076902</id><snippet>In [4]: a = [['one']]*3

In [5]: a[1][0] = 'two'

In [6]: a
Out[6]: [['two'], ['two'], ['two']]
</snippet></ROW><ROW><id>21077105</id><snippet>/posts?page=2</snippet></ROW><ROW><id>21077556</id><snippet>$ python3 yourscript.py
</snippet></ROW><ROW><id>21077621</id><snippet>f.close</snippet></ROW><ROW><id>21077621</id><snippet>f.close()</snippet></ROW><ROW><id>21077621</id><snippet>f2.close()</snippet></ROW><ROW><id>21077621</id><snippet>close</snippet></ROW><ROW><id>21077621</id><snippet>with open(file, mode) as f:
    do_something_with(f)
</snippet></ROW><ROW><id>21077621</id><snippet>"a"</snippet></ROW><ROW><id>21077621</id><snippet>&gt;&gt;&gt; help(open)
Help on built-in function open in module __builtin__:

open(...)
    open(name[, mode[, buffering]]) -&gt; file object

    Open a file using the file() type, returns a file object.  This is the
    preferred way to open a file.  See file.__doc__ for further information.


&gt;&gt;&gt; print file.__doc__
file(name[, mode[, buffering]]) -&gt; file object

Open a file.  The mode can be 'r', 'w' or 'a' for reading (default),
writing or appending.  The file will be created if it doesn't exist
when opened for writing or appending; it will be truncated when
opened for writing.  Add a 'b' to the mode for binary files.
Add a '+' to the mode to allow simultaneous reading and writing.
If the buffering argument is given, 0 means unbuffered, 1 means line
buffered, and larger numbers specify the buffer size.  The preferred way
to open a file is with the builtin open() function.
Add a 'U' to mode to open the file for input with universal newline
support.  Any line ending in the input file will be seen as a '\n'
in Python.  Also, a file so opened gains the attribute 'newlines';
the value for this attribute is one of None (no newline read yet),
'\r', '\n', '\r\n' or a tuple containing all the newline types seen.
</snippet></ROW><ROW><id>21077621</id><snippet>open(file, "a")
</snippet></ROW><ROW><id>21077644</id><snippet>self.set_value_int</snippet></ROW><ROW><id>21077644</id><snippet>menu_edit.add_command(label="Precision", 
    command=lambda name="Pecision", var=self.precision: self.set_value_int(name, var))
...
def set_value_int(self, name, var):
    ...
    def okey():
        s = entry.get()
        try:
            var.set(int(s))

        ...
</snippet></ROW><ROW><id>21077712</id><snippet>range</snippet></ROW><ROW><id>21077712</id><snippet>R = range(1, 3001)
</snippet></ROW><ROW><id>21077712</id><snippet>for i in R:
    print i
</snippet></ROW><ROW><id>21077712</id><snippet>1
2
3
4
...etc
</snippet></ROW><ROW><id>21078018</id><snippet>rule = Rule.objects.filter(user=user).latest('id')
</snippet></ROW><ROW><id>21078321</id><snippet>input</snippet></ROW><ROW><id>21078321</id><snippet>&gt;&gt;&gt; word = input()
word2   &lt;--- user type this.
&gt;&gt;&gt; word
'word2'
</snippet></ROW><ROW><id>21078321</id><snippet>list</snippet></ROW><ROW><id>21078321</id><snippet>&gt;&gt;&gt; list(word)
['w', 'o', 'r', 'd', '2']
</snippet></ROW><ROW><id>21078321</id><snippet>list</snippet></ROW><ROW><id>21078440</id><snippet>print</snippet></ROW><ROW><id>21078440</id><snippet>__future__</snippet></ROW><ROW><id>21078440</id><snippet>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; def foobar(x):
      return x*x if x else print ('x is None-y')
... 
&gt;&gt;&gt; foobar(0)
x is None-y
&gt;&gt;&gt; foobar(2)
4
</snippet></ROW><ROW><id>21078440</id><snippet>sys.stdout</snippet></ROW><ROW><id>21078440</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; def foobar(x):
      return x*x if x else sys.stdout.write('x is None-y\n')
... 
&gt;&gt;&gt; foobar(0)
x is None-y
&gt;&gt;&gt; foobar(2)
4
</snippet></ROW><ROW><id>21078461</id><snippet>instance.attribute
</snippet></ROW><ROW><id>21078461</id><snippet>cvninstances.append(Cvn(cvns[i][2],cvns[i][0],cvns[i][1],cvns[i][3],cvns[i][4],cvns[i][5]))
</snippet></ROW><ROW><id>21078461</id><snippet>cvninstances.append(Cvn(*cvns[i]))
</snippet></ROW><ROW><id>21078461</id><snippet>[veh for veh in vehlist if veh.avail==True]
</snippet></ROW><ROW><id>21078461</id><snippet>[veh for veh in vehlist if veh.avail]
</snippet></ROW><ROW><id>21078555</id><snippet>request.user</snippet></ROW><ROW><id>21078555</id><snippet>def some_view(request):
     form = TransactionForm(user=request.user)
</snippet></ROW><ROW><id>21078555</id><snippet>user</snippet></ROW><ROW><id>21078555</id><snippet>__init__</snippet></ROW><ROW><id>21078555</id><snippet>kwargs</snippet></ROW><ROW><id>21078555</id><snippet>class TransactionForm(ModelForm):
    class Meta:
        model = Transaction

    # def __init__(self, *args, **kwargs):
        # user = kwargs.pop('user', User.objects.get(pk_of_default_user))
    def __init__(self, user, *args, **kwargs):
        super(TransactionForm, self).__init__(*args, **kwargs)
        self.fields['category'] = forms.ModelChoiceField(
                                     queryset=Category.objects.filter(user=user))
</snippet></ROW><ROW><id>21078555</id><snippet>get_form_kwargs</snippet></ROW><ROW><id>21078555</id><snippet>class TransUpdateView(UpdateView):
    #...

    def get_form_kwargs(self):
        kwargs = super(YourView, self).get_form_kwargs()
        kwargs.update({'user': self.request.user})
        return kwargs
</snippet></ROW><ROW><id>21078663</id><snippet>for word in words:
    for key,values in wordDict.items():
        if word in values:
            print key,word
</snippet></ROW><ROW><id>21078663</id><snippet>"numbers": [str(n) for n in range(10)]
</snippet></ROW><ROW><id>21078663</id><snippet>def get_type(word):
    for key,values in wordDict.items():
        if word in values:
            return key

for word in words:
    print word, get_type(word)
</snippet></ROW><ROW><id>21078663</id><snippet>None</snippet></ROW><ROW><id>21078837</id><snippet>matrix.append(list(newlist[x:x+6]))
</snippet></ROW><ROW><id>21078837</id><snippet>matrix</snippet></ROW><ROW><id>21078837</id><snippet>for y, vector in matrix:
</snippet></ROW><ROW><id>21078837</id><snippet>matrix</snippet></ROW><ROW><id>21078837</id><snippet>[ [4,3,2,6,3,2], [2,1,6,8,9,2], ... ]</snippet></ROW><ROW><id>21078837</id><snippet>[4,3,2,6,3,2]</snippet></ROW><ROW><id>21078837</id><snippet>y</snippet></ROW><ROW><id>21078837</id><snippet>vector</snippet></ROW><ROW><id>21078837</id><snippet>codedmessage.append(letter[x], letter[y])
</snippet></ROW><ROW><id>21078837</id><snippet>letter</snippet></ROW><ROW><id>21078837</id><snippet>for letter in message: 
</snippet></ROW><ROW><id>21078837</id><snippet>message</snippet></ROW><ROW><id>21078837</id><snippet>letter</snippet></ROW><ROW><id>21078837</id><snippet>letter = "ABCDEF"</snippet></ROW><ROW><id>21078837</id><snippet>append</snippet></ROW><ROW><id>21078837</id><snippet>codedmessage.append([letter[x], letter[y]])</snippet></ROW><ROW><id>21078837</id><snippet>codedmessage += [letter[x], letter[y]]</snippet></ROW><ROW><id>21078837</id><snippet>x</snippet></ROW><ROW><id>21078837</id><snippet>codedmessage.append(letter[x], letter[y])</snippet></ROW><ROW><id>21078837</id><snippet>x</snippet></ROW><ROW><id>21078878</id><snippet>str.format()</snippet></ROW><ROW><id>21078878</id><snippet>formats = {
    'Price': '{0.good} is worth {0.price} at {0.location}',
    'Wormhole': '{0.fromsys} has a wormhole to {0.tosys}',
}

return formats[self.memtype].format(self)
</snippet></ROW><ROW><id>21078878</id><snippet>self</snippet></ROW><ROW><id>21078878</id><snippet>self</snippet></ROW><ROW><id>21078878</id><snippet>{...}</snippet></ROW><ROW><id>21078878</id><snippet>&gt;&gt;&gt; class Demo():
...     good = 'Spice'
...     price = 10
...     location = 'Betazed'
...     fromsys = 'Arrakis'
...     tosys = 'Endor'
... 
&gt;&gt;&gt; formats = {
...     'Price': '{0.good} is worth {0.price} at {0.location}',
...     'Wormhole': '{0.fromsys} has a wormhole to {0.tosys}',
... }
&gt;&gt;&gt; formats['Price'].format(Demo())
'Spice is worth 10 at Betazed'
&gt;&gt;&gt; formats['Wormhole'].format(Demo())
'Arrakis has a wormhole to Endor'
</snippet></ROW><ROW><id>21078997</id><snippet>import grequests

urls = ['http://localhost/test', 'http://localhost/test']

params = {'a':'b', 'c':'d'}
rs = (grequests.post(u, data=params) for u in urls)
grequests.map(rs)
</snippet></ROW><ROW><id>21078999</id><snippet>animate()</snippet></ROW><ROW><id>21078999</id><snippet>x,y</snippet></ROW><ROW><id>21078999</id><snippet>line.set_data(x, y)</snippet></ROW><ROW><id>21078999</id><snippet>(line,)</snippet></ROW><ROW><id>21078999</id><snippet>blit=true</snippet></ROW><ROW><id>21078999</id><snippet>import numpy as np
from matplotlib import pyplot as plt
from matplotlib import animation
from matplotlib.collections import LineCollection
from matplotlib.colors import ListedColormap, BoundaryNorm

# First set up the figure, the axis, and the plot element we want to animate
fig = plt.figure()
ax = plt.axes(xlim=(0, 2), ylim=(-2, 2))

cmap = ListedColormap(['b', 'r', 'b'])
norm = BoundaryNorm([0, 1, 1.5, 2], cmap.N)

line = LineCollection([], cmap=cmap, norm=norm,lw=2)
line.set_array(np.linspace(0, 2, 1000))
ax.add_collection(line)

# initialization function: plot the background of each frame
def init():
    line.set_segments([])
    return line,

# animation function.  This is called sequentially
def animate(i):
    x = np.linspace(0, 2, 1000)
    y = np.sin(2 * np.pi * (x - 0.01 * i))
    points = np.array([x, y]).T.reshape(-1, 1, 2)
    segments = np.concatenate([points[:-1], points[1:]], axis=1)
    line.set_segments(segments)
    return line,

# call the animator.  blit=True means only re-draw the parts that have changed.
anim = animation.FuncAnimation(fig, animate, init_func=init,
                           frames=200, interval=20)
</snippet></ROW><ROW><id>21079197</id><snippet>_login_check</snippet></ROW><ROW><id>21079197</id><snippet>def _login_check(f):
    @wraps(f)
    def wrapper(self):
        if self.log_in():
            f(self)
        else:
            raise MyError('Not Logged In')
    return wrapper
</snippet></ROW><ROW><id>21079197</id><snippet>def _login_check(f):
    @wraps(f)
    def wrapper(self):
        if self.log_in():
            return f(self)
        else:
            raise MyError('Not Logged In')
    return wrapper
</snippet></ROW><ROW><id>21079343</id><snippet>Decimal</snippet></ROW><ROW><id>21079468</id><snippet>tkinter.font</snippet></ROW><ROW><id>21079468</id><snippet>import tkinter</snippet></ROW><ROW><id>21079468</id><snippet>tkinter.font</snippet></ROW><ROW><id>21079468</id><snippet>&gt;&gt;&gt; import tkinter
&gt;&gt;&gt; tkinter.font
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute 'font'
&gt;&gt;&gt;
&gt;&gt;&gt; import tkinter.font
&gt;&gt;&gt; tkinter.font
&lt;module 'tkinter.font' from 'C:\\Python33\\lib\\tkinter\\font.py'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21079468</id><snippet>tkinter.font</snippet></ROW><ROW><id>21079468</id><snippet>import tkinter</snippet></ROW><ROW><id>21079468</id><snippet>tkinter.font</snippet></ROW><ROW><id>21079551</id><snippet>def luhn_checksum(card_number):
    def digits_of(n):
        return [int(d) for d in str(n)]
    digits = digits_of(card_number)
    odd_digits = digits[-1::-2]
    even_digits = digits[-2::-2]
    checksum = 0
    checksum += sum(odd_digits)
    for d in even_digits:
        checksum += sum(digits_of(d*2))
    return checksum % 10

def is_luhn_valid(card_number):
    return luhn_checksum(card_number) == 0


result = is_luhn_valid(4532015112830366)
print 'Correct:' + str(result)
result = is_luhn_valid(6011514433546201)
print 'Correct:' + str(result)
result = is_luhn_valid(6771549495586802)
print 'Correct:' + str(result)
</snippet></ROW><ROW><id>21079551</id><snippet>&gt;&gt;&gt;Correct:True
&gt;&gt;&gt;Correct:True
&gt;&gt;&gt;Correct:True
</snippet></ROW><ROW><id>21079649</id><snippet>while True:
    messagetoencode = input().upper()
    if len(messagetoencode) &gt; 8 and len(messagetoencode) % 4 == 0:
        break
    else:
        print("Message must be more than 8 characters &amp; divisible by 4")
</snippet></ROW><ROW><id>21079649</id><snippet>&gt;</snippet></ROW><ROW><id>21079649</id><snippet>8</snippet></ROW><ROW><id>21079649</id><snippet>&lt;</snippet></ROW><ROW><id>21079649</id><snippet>8</snippet></ROW><ROW><id>21079649</id><snippet>&gt;</snippet></ROW><ROW><id>21079649</id><snippet>&gt;=</snippet></ROW><ROW><id>21079673</id><snippet>inzipfile.namelist()</snippet></ROW><ROW><id>21079673</id><snippet>print inzipfile.namelist()
</snippet></ROW><ROW><id>21079673</id><snippet>['foobar/bar/', 'foobar/bar/b.txt', 'foobar/bar/c.txt', 'foobar/foo/', 
 'foobar/foo/a.txt', 'foobar/foo/b.txt', 'foobar/']
</snippet></ROW><ROW><id>21079673</id><snippet>inzipfile.printdir()</snippet></ROW><ROW><id>21079673</id><snippet>File Name                                             Modified             Size
foobar/bar/                                    2014-01-12 08:53:36            0
foobar/bar/b.txt                               2014-01-12 08:54:08           60
foobar/bar/c.txt                               2014-01-12 08:54:28           60
foobar/foo/                                    2014-01-12 08:53:02            0
foobar/foo/a.txt                               2014-01-12 08:55:04           60
foobar/foo/b.txt                               2014-01-12 08:55:24           60
foobar/                                        2014-01-12 08:52:32            0
</snippet></ROW><ROW><id>21079673</id><snippet>/</snippet></ROW><ROW><id>21079673</id><snippet>import os
import zipfile

with zipfile.ZipFile('foobar.zip', 'r') as inzipfile:
    for infile in (name for name in inzipfile.namelist() if name[-1] != '/'):
        if 'foo' in os.path.split(infile)[0]:
            print inzipfile.open(infile,'r').read(),
</snippet></ROW><ROW><id>21079673</id><snippet>wanted = {'a.txt', 'b.txt'}  # use a set, it's faster for testing membership
import zipfile
with zipfile.ZipFile('foobar.zip','r') as inzipfile:
    for infile in (name for name in inzipfile.namelist() if name[-1] != '/'):
        if os.path.split(infile)[1] in wanted:
          print inzipfile.open(infile,'r').read()
</snippet></ROW><ROW><id>21079673</id><snippet>def check_files(zipfilename):
    """ Check and see if all members of a .zip archive can be opened.
        Beware of vacuous truth - all members of an empty archive can be opened
    """
    def can_open(archive, membername):
        try:
            archive.open(membername, 'r')  # return value ignored
        except (RuntimeError, zipfile.BadZipfile, zipfile.LargeZipFile):
            return False
        return True

    with zipfile.ZipFile(zipfilename, 'r') as archive:
        return all(can_open(archive, membername)
                    for membername in (
                        name for name in archive.namelist() if name[-1] != '/'))
</snippet></ROW><ROW><id>21079678</id><snippet>args</snippet></ROW><ROW><id>21079678</id><snippet># args = ()
args = {}
</snippet></ROW><ROW><id>21079767</id><snippet>move = msvcrt.getch()
</snippet></ROW><ROW><id>21079767</id><snippet>move</snippet></ROW><ROW><id>21079767</id><snippet>move</snippet></ROW><ROW><id>21079767</id><snippet>move = msvcrt.getch()</snippet></ROW><ROW><id>21079767</id><snippet>getch</snippet></ROW><ROW><id>21079767</id><snippet># File: msvcrt-example-2.py

import msvcrt
import time

print "press SPACE to enter the serial number"

while not msvcrt.kbhit() or msvcrt.getch() != " ":
    # do something else while we're waiting
    print ".",
    time.sleep(0.1)

print

# clear the keyboard buffer
while msvcrt.kbhit():
    msvcrt.getch()

serial = raw_input("enter your serial number: ")

print "serial number is", serial
</snippet></ROW><ROW><id>21079848</id><snippet>split</snippet></ROW><ROW><id>21079848</id><snippet>while mon not in "...".split():
                          # ^ note parentheses 
</snippet></ROW><ROW><id>21079848</id><snippet>builtin_function_or_method</snippet></ROW><ROW><id>21079848</id><snippet>str.split</snippet></ROW><ROW><id>21079855</id><snippet>DataFrame</snippet></ROW><ROW><id>21079855</id><snippet>DataFrame</snippet></ROW><ROW><id>21079855</id><snippet>DataFrame</snippet></ROW><ROW><id>21079855</id><snippet>Series</snippet></ROW><ROW><id>21079855</id><snippet>Series</snippet></ROW><ROW><id>21079855</id><snippet>DataFrames</snippet></ROW><ROW><id>21079855</id><snippet>any()</snippet></ROW><ROW><id>21079855</id><snippet>all()</snippet></ROW><ROW><id>21079855</id><snippet>In [36]: df
Out[36]: 
       Volume
Index        
0           1
1           0
2           1
3           1

[4 rows x 1 columns]

In [37]: df[(df &gt; 0).all(1)]
Out[37]: 
       Volume
Index        
0           1
2           1
3           1

[3 rows x 1 columns]
</snippet></ROW><ROW><id>21079855</id><snippet>1</snippet></ROW><ROW><id>21079855</id><snippet>all()</snippet></ROW><ROW><id>21079855</id><snippet>1</snippet></ROW><ROW><id>21079855</id><snippet>In [39]: df = pd.DataFrame({"A": ['a', 'b', 'c', 'd'], "B": ['e', 'f', 'g', 'h']})

In [40]: df
Out[40]: 
   A  B
0  a  e
1  b  f
2  c  g
3  d  h

[4 rows x 2 columns]

In [41]: bf = pd.DataFrame({"A": [True, True, False, False], "B": [True, False, True, False]})

In [42]: bf
Out[42]: 
       A      B
0   True   True
1   True  False
2  False   True
3  False  False

[4 rows x 2 columns]
</snippet></ROW><ROW><id>21079855</id><snippet>bf</snippet></ROW><ROW><id>21079855</id><snippet>1</snippet></ROW><ROW><id>21079855</id><snippet>B</snippet></ROW><ROW><id>21079855</id><snippet>NaN</snippet></ROW><ROW><id>21079855</id><snippet>In [43]: df[bf]
Out[43]: 
     A    B
0    a    e
1    b  NaN
2  NaN    g
3  NaN  NaN

[4 rows x 2 columns]
</snippet></ROW><ROW><id>21079855</id><snippet>In [44]: df[bf.all(1)]
Out[44]: 
   A  B
0  a  e

[1 rows x 2 columns]
</snippet></ROW><ROW><id>21079855</id><snippet>any</snippet></ROW><ROW><id>21079855</id><snippet>False</snippet></ROW><ROW><id>21079855</id><snippet>In [45]: df[bf.any(1)]
Out[45]: 
   A  B
0  a  e
1  b  f
2  c  g

[3 rows x 2 columns]
</snippet></ROW><ROW><id>21079948</id><snippet>&lt;&lt;ListboxSelect&gt;&gt;</snippet></ROW><ROW><id>21080176</id><snippet>new org.python.util.PythonInterpreter().compile("python code here")</snippet></ROW><ROW><id>21080176</id><snippet>org.python.core.PySyntaxError</snippet></ROW><ROW><id>21080699</id><snippet>#!/usr/bin/python

import sys
import fileinput

x = open("output.txt", "a")

for line in fileinput.input():
    l = line.replace(r"{\frac{d^{2}}{d^{2}{r}}}\zeta","\zeta''")
    x.write(l)
</snippet></ROW><ROW><id>21080699</id><snippet>$ echo '{\frac{d^{2}}{d^{2}{r}}}\zeta' | ./regex.py</snippet></ROW><ROW><id>21080699</id><snippet>\zeta''</snippet></ROW><ROW><id>21080707</id><snippet>PATH="/Applications/Postgres93.app/Contents/MacOS/bin:$PATH
</snippet></ROW><ROW><id>21080768</id><snippet>sympify</snippet></ROW><ROW><id>21080768</id><snippet>sympify</snippet></ROW><ROW><id>21080768</id><snippet>&gt;&gt;&gt; Symbol('{myvar-42}') + 1
{myvar-42} + 1
</snippet></ROW><ROW><id>21080768</id><snippet>x_2</snippet></ROW><ROW><id>21080768</id><snippet>abc123</snippet></ROW><ROW><id>21080768</id><snippet>&gt;&gt;&gt; expr = sympify('x + 1')
&gt;&gt;&gt; expr.subs(Symbol('x'), Symbol('{myvar-42}')
{myvar-42} + 1
</snippet></ROW><ROW><id>21080768</id><snippet>locals</snippet></ROW><ROW><id>21080768</id><snippet>&gt;&gt;&gt; x, y, z = symbols('x y z')
&gt;&gt;&gt; expr = sympify('x/z - y')
&gt;&gt;&gt; expr.subs({x: 10, y: 5})
10/z - 5
</snippet></ROW><ROW><id>21080795</id><snippet>import time

start = time.time()  # seconds since the UNIX epoch

# upload your file

elapsed = time.time() - start
</snippet></ROW><ROW><id>21080795</id><snippet>elapsed</snippet></ROW><ROW><id>21080795</id><snippet>time.time()</snippet></ROW><ROW><id>21080795</id><snippet>&gt;&gt;&gt; import time, random
&gt;&gt;&gt; start = time.time()
&gt;&gt;&gt; time.sleep(random.randrange(20))  # random amount of time to wait
&gt;&gt;&gt; print time.time() - start
20.8919820786
</snippet></ROW><ROW><id>21080904</id><snippet>module=__import__(searchpath+'.'+modname)
</snippet></ROW><ROW><id>21080904</id><snippet>module=__import__(searchpath+'.'+modname, None, None, "*")
</snippet></ROW><ROW><id>21080904</id><snippet>__import__</snippet></ROW><ROW><id>21080941</id><snippet>collections.Counter</snippet></ROW><ROW><id>21080941</id><snippet>&gt;&gt;&gt; x = [['ali', '225'], ['raheem', '4514'], ['mohammed', '19652']]
&gt;&gt;&gt; y = [['ali', '45514'], ['mohammed', '441'], ['salwa', '41']]
&gt;&gt;&gt; x = [[k, int(v)] for k,v in x]
&gt;&gt;&gt; y = [[k, int(v)] for k,v in y]
&gt;&gt;&gt; Counter(dict(x))
Counter({'mohammed': 19652, 'raheem': 4514, 'ali': 225})
&gt;&gt;&gt; Counter(dict(x)) + Counter(dict(y))
Counter({'ali': 45739, 'mohammed': 20093, 'raheem': 4514, 'salwa': 41})
</snippet></ROW><ROW><id>21081030</id><snippet>while True</snippet></ROW><ROW><id>21081030</id><snippet>break</snippet></ROW><ROW><id>21081030</id><snippet>count = 0
while True:
    count += 1
    if count == 10:
        break
</snippet></ROW><ROW><id>21081030</id><snippet>while True:
    ...
    if f - f2 &lt; 0:
        # use new variables
        f, E = f2, E2
    else:
        break
</snippet></ROW><ROW><id>21081036</id><snippet>stop</snippet></ROW><ROW><id>21081036</id><snippet>self.pool.terminate</snippet></ROW><ROW><id>21081036</id><snippet>Pool.terminate</snippet></ROW><ROW><id>21081062</id><snippet>isinstance</snippet></ROW><ROW><id>21081062</id><snippet>if isinstance(result.index, pandas.core.index.MultiIndex):
</snippet></ROW><ROW><id>21081089</id><snippet>if request.method == 'POST':
    flash("Hello world")
</snippet></ROW><ROW><id>21081247</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; data = pd.read_csv("data.csv", names=["t", "p"], parse_dates=[0])
&gt;&gt;&gt; data.to_dict()
{'p': {0: 0.21007899999999999}, 't': {0: Timestamp('2014-01-12 00:00:00', tz=None)}}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21081247</id><snippet>Timestamp</snippet></ROW><ROW><id>21081247</id><snippet>dir()</snippet></ROW><ROW><id>21081247</id><snippet>Timestamp</snippet></ROW><ROW><id>21081247</id><snippet>&gt;&gt;&gt; data.to_dict()["t"][0]
Timestamp('2014-01-12 00:00:00', tz=None)
&gt;&gt;&gt; dir(data.to_dict()["t"][0])
['__add__', '__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__pyx_vtable__', '__qualname__', '__radd__', '__reduce__', '__reduce_ex__', '__repr__', '__rsub__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__weakref__', '_get_field', '_repr_base', 'asm8', 'astimezone', 'combine', 'ctime', 'date', 'day', 'dayofweek', 'dayofyear', 'dst', 'freq', 'freqstr', 'fromordinal', 'fromtimestamp', 'hour', 'isocalendar', 'isoformat', 'isoweekday', 'max', 'microsecond', 'min', 'minute', 'month', 'nanosecond', 'now', 'offset', 'quarter', 'replace', 'resolution', 'second', 'strftime', 'strptime', 'time', 'timetuple', 'timetz', 'to_datetime', 'to_period', 'to_pydatetime', 'today', 'toordinal', 'tz', 'tz_convert', 'tz_localize', 'tzinfo', 'tzname', 'utcfromtimestamp', 'utcnow', 'utcoffset', 'utctimetuple', 'value', 'week', 'weekday', 'weekofyear', 'year']
&gt;&gt;&gt; data.to_dict()["t"][0].timetuple()
time.struct_time(tm_year=2014, tm_mon=1, tm_mday=12, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=12, tm_isdst=-1)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21081247</id><snippet>print data.head()</snippet></ROW><ROW><id>21081247</id><snippet>data.head()</snippet></ROW><ROW><id>21081339</id><snippet>import pandas as pd
#df = pd.read_csv('file.csv', dtype={'area': str, 'phone': str})
df=pd.DataFrame(columns=['phone','name','area'],
                data=[['(444) 444-4444, (000) 000-0000', 'Foo', 'cityname, ST'],
                      ['(555) 555-5555',   'Bar', 'othercity, SN']])
print df
df['State'] = df.area.apply(lambda x: x.split(',')[1] if len(x.split(','))&gt;1 else '')
df.area = df.area.apply(lambda x: x.split(',')[0])
df.phone = df.phone.apply(lambda x: x.split(',')[0])
print df
</snippet></ROW><ROW><id>21081339</id><snippet>                            phone name           area
0  (444) 444-4444, (000) 000-0000  Foo   cityname, ST
1                  (555) 555-5555  Bar  othercity, SN
            phone name       area State
0  (444) 444-4444  Foo   cityname    ST
1  (555) 555-5555  Bar  othercity    SN
</snippet></ROW><ROW><id>21081371</id><snippet>QTimer.singleShot()</snippet></ROW><ROW><id>21081371</id><snippet>QTimer</snippet></ROW><ROW><id>21081371</id><snippet>QTimer</snippet></ROW><ROW><id>21081371</id><snippet>singleShot</snippet></ROW><ROW><id>21081371</id><snippet>QTimer</snippet></ROW><ROW><id>21081371</id><snippet>QTimer</snippet></ROW><ROW><id>21081371</id><snippet>QTimer</snippet></ROW><ROW><id>21081371</id><snippet>setSingleShot(True)</snippet></ROW><ROW><id>21081371</id><snippet>stop()</snippet></ROW><ROW><id>21081371</id><snippet>import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *


class MyApp(QWidget):
    def __init__(self,*args,**kwargs):
        QWidget.__init__(self,*args,**kwargs)
        self.current_timer = None
        self.layout = QVBoxLayout(self)
        self.button = QPushButton('start timer')
        self.button.clicked.connect(self.start_timer)
        self.layout.addWidget(self.button)

    def start_timer(self):
        if self.current_timer:
            self.current_timer.stop()
            self.current_timer.deleteLater()
        self.current_timer = QTimer()
        self.current_timer.timeout.connect(self.print_hello)
        self.current_timer.setSingleShot(True)
        self.current_timer.start(3000)

    def print_hello(self):
        print 'hello'


# Create QApplication and QWidget
qapp = QApplication(sys.argv)  
app = MyApp()
app.show()
qapp.exec_()
</snippet></ROW><ROW><id>21081511</id><snippet>name</snippet></ROW><ROW><id>21081511</id><snippet>names_to_search = A.objects.all().values_list('name', flat=True)
people = B.objects.filter(name__in=names_to_search)
</snippet></ROW><ROW><id>21081511</id><snippet>name</snippet></ROW><ROW><id>21081531</id><snippet>nestedExpr</snippet></ROW><ROW><id>21081531</id><snippet>import pyparsing as pyp

aString = "C((H2)(C(H3))) C((H1)(Cl1)) C((C(H3))3)"
aList = aString.split()

for i in range(len(aList)):
    aList[i] = [pyp.nestedExpr().parseString(aList[i][1:]).asList()[0]]

print aList
</snippet></ROW><ROW><id>21081531</id><snippet>[[[['H2'], ['C', ['H3']]]], [[['H1'], ['Cl1']]], [[['C', ['H3']], '3']]]
</snippet></ROW><ROW><id>21081671</id><snippet>File "/usr/lib/python2.7/urllib2.py", line 1215, in https_open
return self.do_open(httplib.HTTPSConnection, req)
</snippet></ROW><ROW><id>21081671</id><snippet>site = "https://www." + site
</snippet></ROW><ROW><id>21081671</id><snippet>https://www.10digits.us/n/Tom_Jones/Phoenix_AZ/1fe293a0b7</snippet></ROW><ROW><id>21081671</id><snippet>http://www.10digits.us/n/Tom_Jones/Phoenix_AZ/1fe293a0b7</snippet></ROW><ROW><id>21081671</id><snippet>https</snippet></ROW><ROW><id>21081671</id><snippet>http</snippet></ROW><ROW><id>21081671</id><snippet>www.10digits.us</snippet></ROW><ROW><id>21081733</id><snippet>user</snippet></ROW><ROW><id>21081763</id><snippet>emp_id</snippet></ROW><ROW><id>21081763</id><snippet>unique</snippet></ROW><ROW><id>21081763</id><snippet>nullable</snippet></ROW><ROW><id>21081763</id><snippet>null=True</snippet></ROW><ROW><id>21081763</id><snippet>emp_id</snippet></ROW><ROW><id>21081763</id><snippet>primari_key</snippet></ROW><ROW><id>21081763</id><snippet>models.AutoField</snippet></ROW><ROW><id>21081763</id><snippet>emp_id = models.AutoField(primary_key=True)
</snippet></ROW><ROW><id>21081763</id><snippet>max_length</snippet></ROW><ROW><id>21081763</id><snippet>Employee</snippet></ROW><ROW><id>21081763</id><snippet>emp_id</snippet></ROW><ROW><id>21081763</id><snippet>0001544</snippet></ROW><ROW><id>21081763</id><snippet>from django.contrib.auth.models import BaseUserManager


class EmployeManager(BaseUserManager):
    def create_user(self, username,  email,emp_id,  password=None):
        if not username:
            raise ValueError('Employers must have an username.')
        if not email:
            raise ValueError('Employers must have an email address.')
        if not emp_id:
            raise ValueError('Employers must have an employer id')
        user = self.model(username=username, email=self.normalize_email(email), emp_id=emp_id)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, username,  email, emp_id, password):
        user = self.create_user(username,  email, emp_id, password)
        user.is_admin = True
        user.is_superuser = True
        user.save(using=self._db)
        return user
</snippet></ROW><ROW><id>21081763</id><snippet>from myapp.managers import EmployeManager
</snippet></ROW><ROW><id>21081763</id><snippet>Employers Model</snippet></ROW><ROW><id>21081763</id><snippet>objects = EmployeManager()
</snippet></ROW><ROW><id>21081763</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>21081801</id><snippet>None</snippet></ROW><ROW><id>21081801</id><snippet>is</snippet></ROW><ROW><id>21081924</id><snippet>Runtime.getRuntime().exec("python "+cmd + py + ".py");
</snippet></ROW><ROW><id>21081924</id><snippet>exec</snippet></ROW><ROW><id>21081924</id><snippet>exec</snippet></ROW><ROW><id>21081924</id><snippet>ProcessBuilder</snippet></ROW><ROW><id>21081924</id><snippet>ProcessBuilder pb = new ProcessBuilder("python", py + ".py");
pb.directory(new File(cmd));
pb.redirectError();
//...
Process p = pb.start();
</snippet></ROW><ROW><id>21081924</id><snippet>python</snippet></ROW><ROW><id>21081949</id><snippet>import</snippet></ROW><ROW><id>21081949</id><snippet>project/
  __init__.py
  app.py
  config.py
</snippet></ROW><ROW><id>21081949</id><snippet>app.py</snippet></ROW><ROW><id>21081949</id><snippet>mainList</snippet></ROW><ROW><id>21081949</id><snippet>config.py</snippet></ROW><ROW><id>21081949</id><snippet>app.py</snippet></ROW><ROW><id>21081949</id><snippet>from config import mainList
</snippet></ROW><ROW><id>21081949</id><snippet>app.py</snippet></ROW><ROW><id>21081949</id><snippet>import config
mainList = config.mainList
</snippet></ROW><ROW><id>21081949</id><snippet>project/
  __init__.py
  app.py
  otherstuff/
    __init__.py
    config.py 
</snippet></ROW><ROW><id>21081949</id><snippet>from otherstuff.config import mainList
</snippet></ROW><ROW><id>21081949</id><snippet>__init__.py</snippet></ROW><ROW><id>21081949</id><snippet>__init__.py</snippet></ROW><ROW><id>21081949</id><snippet>mainList</snippet></ROW><ROW><id>21081949</id><snippet>search(list)</snippet></ROW><ROW><id>21081949</id><snippet>file1</snippet></ROW><ROW><id>21081949</id><snippet>file2</snippet></ROW><ROW><id>21081949</id><snippet>app/
  mainFile.py
  file1.py
  file2.py
</snippet></ROW><ROW><id>21081949</id><snippet>mainFile.py</snippet></ROW><ROW><id>21081949</id><snippet># mainFile.py
import file1
</snippet></ROW><ROW><id>21081949</id><snippet>file1.py</snippet></ROW><ROW><id>21081949</id><snippet># file1.py
import file2
# Maybe assign some variables for easier access
mainList = file2.mainList
search = file2.search
# And your code
class Library:
    pass
</snippet></ROW><ROW><id>21081949</id><snippet>file2.py</snippet></ROW><ROW><id>21081949</id><snippet>file1.py</snippet></ROW><ROW><id>21081949</id><snippet>file1.py</snippet></ROW><ROW><id>21081949</id><snippet>file2.py</snippet></ROW><ROW><id>21081949</id><snippet>file1.py</snippet></ROW><ROW><id>21081949</id><snippet>file1.py</snippet></ROW><ROW><id>21081949</id><snippet>mainFile.py</snippet></ROW><ROW><id>21081949</id><snippet>mainFile.py</snippet></ROW><ROW><id>21081949</id><snippet>'__main__'</snippet></ROW><ROW><id>21081949</id><snippet>mainFile.py</snippet></ROW><ROW><id>21081949</id><snippet>file1.py</snippet></ROW><ROW><id>21081949</id><snippet>file2.py</snippet></ROW><ROW><id>21081949</id><snippet>Library()</snippet></ROW><ROW><id>21081949</id><snippet>search()</snippet></ROW><ROW><id>21081949</id><snippet>mainFile.py</snippet></ROW><ROW><id>21081949</id><snippet># mainFile.py
import file1

library = file1.Library()
search = file1.search    # Remember we imported search() from file2.py into file1.py

# Write your logic here
</snippet></ROW><ROW><id>21081949</id><snippet>mainFile.py</snippet></ROW><ROW><id>21081949</id><snippet>search()</snippet></ROW><ROW><id>21082174</id><snippet>def divide(self):
    newWindow = window(self.x/2, self.y/2, self.width/2, self.height/2)
    return newWindow
</snippet></ROW><ROW><id>21082174</id><snippet>window(...)</snippet></ROW><ROW><id>21082235</id><snippet>pygame.transform.scale()
</snippet></ROW><ROW><id>21082273</id><snippet>N = [["D","C","A","B"],
     [2,3,4,5],
     [6,7,8,9]]

# Swap the last two columns

for item in N:
    item[2], item[3] = item[3], item[2]

# Or as a function

def swap_columns(your_list, pos1, pos2):
    for item in your_list:
        item[pos1], item[pos2] = item[pos2], item[pos1]
</snippet></ROW><ROW><id>21082273</id><snippet>swap_columns(N, 2, 3)
[['D', 'C', 'B', 'A'], [2, 3, 5, 4], [6, 7, 9, 8]]
</snippet></ROW><ROW><id>21082322</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; t = '''&lt;topic&gt;some_title1:&lt;start&gt;
test_text&lt;end&gt;

&lt;topic&gt;title_2:&lt;start&gt;
test1
test2
&lt;end&gt;'''
&gt;&gt;&gt; q = re.findall(r'&lt;topic&gt;([^:&lt;]+?):&lt;start&gt;([^&lt;]+?)&lt;end&gt;', t)
[('some_title1', '\ntest_text'), ('title_2', '\ntest1\ntest2\n')]
&gt;&gt;&gt; dict(q)
{'some_title1': '\ntest_text', 'title_2': '\ntest1\ntest2\n'}
</snippet></ROW><ROW><id>21082322</id><snippet>&gt;&gt;&gt; dict(re.findall(r'&lt;topic&gt;([^:&lt;]+?):&lt;start&gt;([^&lt;]+?)&lt;end&gt;', t))
{'some_title1': '\ntest_text', 'title_2': '\ntest1\ntest2\n'}
</snippet></ROW><ROW><id>21082322</id><snippet>&gt;</snippet></ROW><ROW><id>21082322</id><snippet>&lt;</snippet></ROW><ROW><id>21082322</id><snippet>&lt;</snippet></ROW><ROW><id>21082322</id><snippet>([^:&lt;]+?)</snippet></ROW><ROW><id>21082322</id><snippet>([^&lt;]+?)</snippet></ROW><ROW><id>21082371</id><snippet>urls</snippet></ROW><ROW><id>21082371</id><snippet>admin.site.urls</snippet></ROW><ROW><id>21082371</id><snippet>urlpatterns</snippet></ROW><ROW><id>21082371</id><snippet>admin.site.urls.urlpatterns</snippet></ROW><ROW><id>21082371</id><snippet>urls</snippet></ROW><ROW><id>21082497</id><snippet>my_input = "DECBBEFEAACDCFEC"
my_grid = zip(*[iter(my_input)]*int(len(my_input)**0.5))
</snippet></ROW><ROW><id>21082497</id><snippet>my_grid = [my_input[i:i+4] for i in range(0,len(my_input),4)]
</snippet></ROW><ROW><id>21082497</id><snippet>transposed_grid = list(zip(*my_grid))
</snippet></ROW><ROW><id>21082497</id><snippet>range(0,4,1)</snippet></ROW><ROW><id>21082497</id><snippet>range(4)</snippet></ROW><ROW><id>21082505</id><snippet>is_even = lambda i: i % 2 == 0
even = [i for i in range(1, n) if is_even(i)]
</snippet></ROW><ROW><id>21082505</id><snippet>filter</snippet></ROW><ROW><id>21082505</id><snippet>is_prime</snippet></ROW><ROW><id>21082505</id><snippet>filter</snippet></ROW><ROW><id>21082505</id><snippet>filter</snippet></ROW><ROW><id>21082505</id><snippet>i</snippet></ROW><ROW><id>21082505</id><snippet>for</snippet></ROW><ROW><id>21082505</id><snippet>filter</snippet></ROW><ROW><id>21082519</id><snippet>dir</snippet></ROW><ROW><id>21082519</id><snippet>dir</snippet></ROW><ROW><id>21082519</id><snippet>&gt;&gt;&gt; num = 1 # Just to demonstrate
&gt;&gt;&gt; dir()
['__builtins__', '__doc__', '__name__', '__package__', 'num']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21082519</id><snippet>&gt;&gt;&gt; dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21082519</id><snippet>dir</snippet></ROW><ROW><id>21082519</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; dir(sys)
['__displayhook__', '__doc__', '__excepthook__', '__name__', '__package__', '__stderr__', '__stdin__', '__stdout__', '_clear_type_cache', '_current_frames', '_getframe', '_mercurial', 'api_version', 'argv', 'builtin_module_names', 'byteorder', 'call_tracing', 'callstats', 'copyright', 'displayhook', 'dllhandle', 'dont_write_bytecode', 'exc_clear', 'exc_info', 'exc_type', 'excepthook', 'exec_prefix', 'executable', 'exit', 'flags', 'float_info', 'float_repr_style', 'getcheckinterval', 'getdefaultencoding', 'getfilesystemencoding', 'getprofile', 'getrecursionlimit',
'getrefcount', 'getsizeof', 'gettrace', 'getwindowsversion', 'hexversion', 'long_info', 'maxint', 'maxsize', 'maxunicode', 'meta_path', 'modules', 'path', 'path_hooks', 'path_importer_cache', 'platform', 'prefix', 'ps1', 'ps2', 'py3kwarning', 'setcheckinterval', 'setprofile', 'setrecursionlimit', 'settrace', 'stderr', 'stdin', 'stdout', 'subversion', 'version', 'version_info',
'warnoptions', 'winver']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21082519</id><snippet>dir("re")</snippet></ROW><ROW><id>21082519</id><snippet>dir(string)</snippet></ROW><ROW><id>21082519</id><snippet>string</snippet></ROW><ROW><id>21082519</id><snippet>dir("string")</snippet></ROW><ROW><id>21082519</id><snippet>&gt;&gt;&gt; dir("re") == dir("string")
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>21082519</id><snippet>"re"</snippet></ROW><ROW><id>21082519</id><snippet>re</snippet></ROW><ROW><id>21082519</id><snippet>dir("re")</snippet></ROW><ROW><id>21082519</id><snippet>re</snippet></ROW><ROW><id>21082519</id><snippet>&gt;&gt;&gt; dir("re")  # The output is the same as doing dir(str)
['__add__', '__class__', '__contains__', '__delattr__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '_formatter_field_name_split', '_formatter_parser', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'index', 'isalnum', 'isalpha', 'isdigit', 'islower', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill']
&gt;&gt;&gt;
&gt;&gt;&gt; import re
&gt;&gt;&gt; dir(re) # The output is for the re module, not str
['DEBUG', 'DOTALL', 'I', 'IGNORECASE', 'L', 'LOCALE', 'M', 'MULTILINE', 'S', 'Scanner', 'T', 'TEMPLATE', 'U', 'UNICODE', 'VERBOSE', 'X', '_MAXCACHE', '__all__', '__builtins__', '__doc__', '__file__', '__name__', '__package__', '__version__', '_alphanum', '_cache', '_cache_repl', '_compile', '_compile_repl', '_expand', '_pattern_type', '_pickle', '_subx', 'compile', 'copy_reg', 'error', 'escape', 'findall',  'finditer', 'match', 'purge', 'search', 'split', 'sre_compile', 'sre_parse', 'sub', 'subn', 'sys', 'template']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21082531</id><snippet>Import serial

arduino = serial.Serial('/dev/ttyS0',
                     baudrate=9600,
                     bytesize=serial.EIGHTBITS,
                     parity=serial.PARITY_NONE,
                     stopbits=serial.STOPBITS_ONE,
                     timeout=1,
                     xonxoff=0,
                     rtscts=0
                     )
# Toggle DTR to reset Arduino
arduino.setDTR(False)
sleep(1)
# toss any data already received, see
# http://pyserial.sourceforge.net/pyserial_api.html#serial.Serial.flushInput
arduino.flushInput()
arduino.setDTR(True)

with arduino:
    while True:
        print(arduino.readline())
</snippet></ROW><ROW><id>21082531</id><snippet>void setup() {
  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for Leonardo only
  }
}
</snippet></ROW><ROW><id>21082644</id><snippet>SHA512 crypt</snippet></ROW><ROW><id>21082800</id><snippet>&gt;&gt;&gt; viewers = [(item['viewer'], item['timestamp']) for item in data]
[('terraria11218', '1389575253.25377'), ('oruni', '1389574404.94542')]
&gt;&gt;&gt; viewers
[('terraria11218', '1389575253.25377'), ('oruni', '1389574404.94542')]
</snippet></ROW><ROW><id>21082906</id><snippet>for x in soup.find_all('a'):
    for k, v in categories.iteritems():
        if v in x['href']:
            return k
</snippet></ROW><ROW><id>21082906</id><snippet>category = next((
    k for x in soup.find_all('a')
      for k, v in categories.iteritems()
      if v in x['href']
), None)
</snippet></ROW><ROW><id>21083075</id><snippet>t1 = threading.Thread(target=timeout(CONS,5))
</snippet></ROW><ROW><id>21083075</id><snippet>timeout</snippet></ROW><ROW><id>21083075</id><snippet>timeout</snippet></ROW><ROW><id>21083075</id><snippet>t1</snippet></ROW><ROW><id>21083075</id><snippet>t1 = threading.Thread(target=timeout, args=(CONS,5))
</snippet></ROW><ROW><id>21083075</id><snippet>timeout</snippet></ROW><ROW><id>21083090</id><snippet>restrict_xpaths</snippet></ROW><ROW><id>21083090</id><snippet>restrict_xpaths</snippet></ROW><ROW><id>21083449</id><snippet>&lt;textarea type="text" name="note" class = "textarea" cols="50" rows="10"&gt;{{note}}&lt;/textarea&gt;
</snippet></ROW><ROW><id>21083494</id><snippet>.remove()</snippet></ROW><ROW><id>21083494</id><snippet>Session</snippet></ROW><ROW><id>21083494</id><snippet>session</snippet></ROW><ROW><id>21083494</id><snippet>scoped_session</snippet></ROW><ROW><id>21083494</id><snippet>Session</snippet></ROW><ROW><id>21083494</id><snippet>Session</snippet></ROW><ROW><id>21083494</id><snippet>remove</snippet></ROW><ROW><id>21083494</id><snippet>scoped_session</snippet></ROW><ROW><id>21083494</id><snippet>scoped_session.__call__</snippet></ROW><ROW><id>21083494</id><snippet>import threading
from sqlalchemy import create_engine
from sqlalchemy.orm import scoped_session, sessionmaker

_engine = create_engine('sqlite:///:memory:')
Session = scoped_session(sessionmaker(_engine))


def scoped_session_demo(remove=False):
    ids = []

    def push_ids():
        thread_name = threading.currentThread().getName()
        data = [thread_name]

        data.append(Session())
        if remove:
            Session.remove()
        data.append(Session())

        ids.append(data)

    t = threading.Thread(target=push_ids)
    t.start()
    t.join()

    push_ids()

    sub_thread, main_thread = ids

    sub_name, sub_session_a, sub_session_b = sub_thread
    main_name, main_session_a, main_session_b = main_thread

    print sub_name, sub_session_a == sub_session_b
    print main_name, main_session_a == main_session_b
    print sub_name, '==', main_name, sub_session_a == main_session_b


print 'Without remove:'
scoped_session_demo()
print 'With remove:'
scoped_session_demo(True)
</snippet></ROW><ROW><id>21083494</id><snippet>Without remove:
Thread-1 True
MainThread True
Thread-1 == MainThread False
With remove:

Thread-2 False
MainThread False
Thread-2 == MainThread False
</snippet></ROW><ROW><id>21083571</id><snippet>ctypes</snippet></ROW><ROW><id>21083571</id><snippet>from ctypes import *

class PowerClass(Structure):
    _fields_ = [('ACLineStatus', c_byte),
            ('BatteryFlag', c_byte),
            ('BatteryLifePercent', c_byte),
            ('Reserved1',c_byte),
            ('BatteryLifeTime',c_ulong),
            ('BatteryFullLifeTime',c_ulong)]    

powerclass = PowerClass()
result = windll.kernel32.GetSystemPowerStatus(byref(powerclass))
print(powerclass.BatteryLifePercent)
</snippet></ROW><ROW><id>21083571</id><snippet>Win32_Battery</snippet></ROW><ROW><id>21083571</id><snippet>pywin32</snippet></ROW><ROW><id>21083571</id><snippet>from win32com.client import GetObject

WMI = GetObject('winmgmts:')
for battery in WMI.InstancesOf('Win32_Battery'):
    print(battery.EstimatedChargeRemaining)
</snippet></ROW><ROW><id>21083571</id><snippet>wmi</snippet></ROW><ROW><id>21083571</id><snippet>import wmi

w = wmi.WMI()
for battery in w.query('select * from Win32_Battery'):
    print battery.EstimatedChargeRemaining
</snippet></ROW><ROW><id>21083587</id><snippet>*/1 * * *„ÄÄ√ó„ÄÄwc -l foo*txt |awk '{ if( $2=="total" &amp;&amp; $1 &gt;=400000) { system("python foo.py") } }'
*/1 * * *„ÄÄ√ó„ÄÄwc -l bar*txt |awk '{ if( $2=="total" &amp;&amp; $1 &gt;=400000) { system("python bar.py") } }'
</snippet></ROW><ROW><id>21083804</id><snippet>&gt;&gt;&gt; one = [['red', 'rfg', 'erg', '234', '23423434234', 'F', '2014-01-11'],
['red', 'gertus', 'gengie', '234', '234234234234', 'F', '2014-01-11'],
['red', 'sdf', 'sdf', '23', '234234234234', 'F', '2014-01-11'],
['red', 'rfg', 'erg', '234', '23423434234', 'F', '2014-01-11'],
['red', 'gertus', 'gengie', '234', '234234234234', 'F', '2014-01-11'],
['red', 'sdf', 'sdf', '23', '234234234234', 'F', '2014-01-11']]
&gt;&gt;&gt; [i for i in one if one.count(i) &lt; 2]
[]
</snippet></ROW><ROW><id>21083804</id><snippet>t = [1, 2, 3, 4]
for i in t:
    t.remove(i)

[1, 2, 3, 4]
 ^
remove t[0], now t == [2, 3, 4]

[2, 3, 4]
    ^
remove t[1], now t == [2, 4]

There is no t[2], so we are done.
</snippet></ROW><ROW><id>21083804</id><snippet>[i for i in one if one.count(i) &lt; 2]</snippet></ROW><ROW><id>21084024</id><snippet>contigDict = {}
for line in open('contigsFile.txt'):
    contigId, isoform, length = line.split()
    if contigId in contigDict:
        curr_Isoform, curr_length = contigDict[contigId]
        if int(curr_length) &lt; int(length):
            contigDict[contigId] = (isoform, length)
    else:
        contigDict[contigId] = (isoform, length)
</snippet></ROW><ROW><id>21084220</id><snippet>results</snippet></ROW><ROW><id>21084220</id><snippet>for i in results:
    instances.remove(i)
del results[:]
</snippet></ROW><ROW><id>21084220</id><snippet>while results:
    instances.remove(results.pop())
</snippet></ROW><ROW><id>21084295</id><snippet>for</snippet></ROW><ROW><id>21084295</id><snippet>for offer in networkoffers:  # will look through keys, which are strings and not dicts
    networkoffers[offer]['name']
</snippet></ROW><ROW><id>21084295</id><snippet>networkoffers</snippet></ROW><ROW><id>21084295</id><snippet>dict</snippet></ROW><ROW><id>21084295</id><snippet>offers</snippet></ROW><ROW><id>21084295</id><snippet>offer</snippet></ROW><ROW><id>21084295</id><snippet>string</snippet></ROW><ROW><id>21084295</id><snippet>offers['name']</snippet></ROW><ROW><id>21084295</id><snippet>networkoffers[offers]</snippet></ROW><ROW><id>21084295</id><snippet>networkoffers</snippet></ROW><ROW><id>21084428</id><snippet>len(sprites.sprites)
</snippet></ROW><ROW><id>21084428</id><snippet>pygame.sprite.Group
</snippet></ROW><ROW><id>21084428</id><snippet>in      test if a Sprite is contained
len     the number of Sprites contained
bool    test if any Sprites are contained
iter    iterate through all the Sprites
</snippet></ROW><ROW><id>21084575</id><snippet>Path</snippet></ROW><ROW><id>21084575</id><snippet>Path</snippet></ROW><ROW><id>21084575</id><snippet>Path</snippet></ROW><ROW><id>21084603</id><snippet>coordstest = np.vstack([np.random.uniform(150, 220, 20), 
                        np.random.uniform(150, 220, 20)]).T
</snippet></ROW><ROW><id>21084603</id><snippet>coords = np.vstack([np.random.multivariate_normal(coordstest[i,:], covs, 200) 
                         for i in range(10)])
</snippet></ROW><ROW><id>21084603</id><snippet>individuals = (np.arange(0,200).reshape(-1,1)*np.ones(10).reshape(1,-1)).flatten()
individuals = pd.Series(individuals)

allCoords = pd.DataFrame(coords, columns = ['x','y'])

plt.scatter(allCoords['x'], allCoords['y'], c = individuals, 
      s = 40, cmap = 'hot')
</snippet></ROW><ROW><id>21084603</id><snippet>coords = np.vstack([np.random.multivariate_normal(coordstest[i,:], 
               [[10,0],[0,10]], 200) for i in range(10)])
</snippet></ROW><ROW><id>21084698</id><snippet>AutoField</snippet></ROW><ROW><id>21084698</id><snippet>class Meal(models.Model):
        mealid = models.AutoField(db_column='MealId', primary_key=True)
        name = models.CharField(db_column='Name', max_length=45, blank=True)
        description = models.CharField(db_column='Description', max_length=200, blank=True)
</snippet></ROW><ROW><id>21084780</id><snippet>&gt;&gt;&gt; min(filter(None, [1, 2, 0, None, 5, False]))
1
</snippet></ROW><ROW><id>21084875</id><snippet>map</snippet></ROW><ROW><id>21084875</id><snippet>WINDOWWIDTH, WINDOWHEIGHT = map(int, modes[0])
</snippet></ROW><ROW><id>21084875</id><snippet>pygame.display.list_modes()</snippet></ROW><ROW><id>21084875</id><snippet>WINDOWWIDTH, WINDOWHEIGHT = modes[0]
</snippet></ROW><ROW><id>21084950</id><snippet>iwconfig</snippet></ROW><ROW><id>21084950</id><snippet>iw</snippet></ROW><ROW><id>21084950</id><snippet>iw</snippet></ROW><ROW><id>21084950</id><snippet>iwconfig</snippet></ROW><ROW><id>21084950</id><snippet>iwlib</snippet></ROW><ROW><id>21084950</id><snippet>iw</snippet></ROW><ROW><id>21084950</id><snippet>python-iwlib</snippet></ROW><ROW><id>21084950</id><snippet>iwlib</snippet></ROW><ROW><id>21084950</id><snippet>airmon-ng</snippet></ROW><ROW><id>21084950</id><snippet>python-iwlib</snippet></ROW><ROW><id>21085340</id><snippet>    WSGIScriptAlias / /var/www/flask_dev/hello.wsgi
    &lt;Directory "/var/www/flask_dev"&gt;
       WSGIProcessGroup hello
       WSGIApplicationGroup %{GLOBAL}
       Order deny,allow
       Allow from all
    &lt;/Directory&gt;
</snippet></ROW><ROW><id>21085355</id><snippet>for model_field in SOA_detail._meta._fields():
  if isinstance(model_field, CharField):
      char_fields.append(model_field.name)
  elif isinstance(model_field, IntegerField):
      num_fields.append(model_field.name)
  elif isinstance(model_filed, DateTimeField):
      date_field.append(model_field.name)
</snippet></ROW><ROW><id>21085665</id><snippet>[]</snippet></ROW><ROW><id>21085665</id><snippet>[]</snippet></ROW><ROW><id>21085665</id><snippet>a[0,1]</snippet></ROW><ROW><id>21085665</id><snippet>a[(0, 1)]</snippet></ROW><ROW><id>21085665</id><snippet>a.__getitem__((0, 1))</snippet></ROW><ROW><id>21085665</id><snippet>a[0][1]</snippet></ROW><ROW><id>21085665</id><snippet>a.__getitem__(0).__getitem__(1)</snippet></ROW><ROW><id>21085665</id><snippet>__getitem__</snippet></ROW><ROW><id>21085665</id><snippet>slice</snippet></ROW><ROW><id>21085665</id><snippet>__getitem__</snippet></ROW><ROW><id>21085665</id><snippet>a[0, 1]</snippet></ROW><ROW><id>21085665</id><snippet>__getitem__</snippet></ROW><ROW><id>21085665</id><snippet>&gt;&gt;&gt; class Something(object):
...     def __getitem__(self, arg):
...         return arg
...     
&gt;&gt;&gt; Something()[{1, 2, 3}, {4, 5, 6}, 'foo', ..., 12, 4:2]
    ({1, 2, 3}, {4, 5, 6}, 'foo', Ellipsis, 12, slice(4, 2, None))
</snippet></ROW><ROW><id>21085802</id><snippet>import numpy as np
from scipy.signal import convolve2d

image = np.random.random((100,100))
nbCameras = np.abs(np.random.normal(size=(100,100)).round())

maskWidth = 3
mask = np.ones((maskWidth, maskWidth))

visibilityMask = (nbCameras&gt;1).astype(np.float)
visibilityMask = convolve2d(visibilityMask, mask, mode="same").astype(np.bool)

imgFinal = image.copy()
imgFinal[~visibilityMask] *= 0

import matplotlib.pyplot as plt
for i, (im, title) in enumerate([(image, "image"), 
                                 (nbCameras, "nbCameras"), 
                                 (visibilityMask, "visibilityMask"), 
                                 (imgFinal, "imgFinal")]):
    plt.subplot(2,2,i+1)
    plt.title(title)
    plt.imshow(im, cmap=plt.cm.gray)

plt.show()
</snippet></ROW><ROW><id>21085923</id><snippet>Worksheet.write</snippet></ROW><ROW><id>21085923</id><snippet>data = [
    {'id':u'1','name':u'Jeff'},
    {'id':u'2','name':'Carlo'},
]

import xlwt

w = xlwt.Workbook()
ws = w.add_sheet('sheet1')

columns = list(data[0].keys()) # list() is not need in Python 2.x
for i, row in enumerate(data):
    for j, col in enumerate(columns):
        ws.write(i, j, row[col])

w.save('data.xls')
</snippet></ROW><ROW><id>21086062</id><snippet>#!/usr/bin/env python

import datetime
import threading                                                                                                                                                                                                                                                               
from Tkinter import *
import tkMessageBox

class MyApp(Frame):
    def __init__(self, root=None):
        if not root:
            root = Tk()
        self.time_var = StringVar()
        self.time_var.set('starting timer ...')

        self.root = root
        Frame.__init__(self, root)
        self.init_widgets()
        self.update_time()

    def init_widgets(self):
        self.label = Label(self.root, textvariable=self.time_var)
        self.label.pack()
        self.btn = Button(self.root, text='show error', command=self.spawn_errors)
        self.btn.pack()

    def update_time(self):
        self.time_var.set( str(datetime.datetime.now()) )
        self.root.after(1000, self.update_time)

    def spawn_errors(self):
        for i in range(3):
            t = threading.Thread(target=self.show_error)
            t.start()

    def show_error(self):
        now = datetime.datetime.now()
        tkMessageBox.showerror('Error: %s' % (str(now)), now)


if __name__ == '__main__':
    app = MyApp()
    app.mainloop()
</snippet></ROW><ROW><id>21086090</id><snippet>reduceByKey</snippet></ROW><ROW><id>21086090</id><snippet>(word, 1)</snippet></ROW><ROW><id>21086090</id><snippet>reduceByKey(lambda x, y: x + y)</snippet></ROW><ROW><id>21086090</id><snippet>(word, count)</snippet></ROW><ROW><id>21086090</id><snippet>&gt;&gt;&gt; from operator import add
&gt;&gt;&gt; rdd = sc.parallelize([("a", 1), ("b", 1), ("a", 1)])
&gt;&gt;&gt; sorted(rdd.reduceByKey(add).collect())
[('a', 2), ('b', 1)]
</snippet></ROW><ROW><id>21086090</id><snippet>reduce(reduce(reduce(firstValue, secondValue), thirdValue), fourthValue) ...
</snippet></ROW><ROW><id>21086090</id><snippet>groupByKey</snippet></ROW><ROW><id>21086090</id><snippet>combineByKey</snippet></ROW><ROW><id>21086090</id><snippet>reduceByKey()</snippet></ROW><ROW><id>21086090</id><snippet>reduceByKey</snippet></ROW><ROW><id>21086090</id><snippet>combineByKey</snippet></ROW><ROW><id>21086903</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; d = OrderedDict()
&gt;&gt;&gt; d[2] = 3
&gt;&gt;&gt; d[1] = 4
&gt;&gt;&gt; d[5] = 2
&gt;&gt;&gt; print d
OrderedDict([(2, 3), (1, 4), (5, 2)])
&gt;&gt;&gt; for i in d:
&gt;&gt;&gt;     print i
2
1
5
</snippet></ROW><ROW><id>21086977</id><snippet>chdir</snippet></ROW><ROW><id>21087010</id><snippet>stdin.read(1)</snippet></ROW><ROW><id>21087010</id><snippet>stdin</snippet></ROW><ROW><id>21087010</id><snippet>read()</snippet></ROW><ROW><id>21087010</id><snippet>readline()</snippet></ROW><ROW><id>21087010</id><snippet>rd.py</snippet></ROW><ROW><id>21087010</id><snippet>from sys import stdin

x = stdin.read(1)
userinput = stdin.readline()
betAmount = int(userinput)
print ("x=",x)
print ("userinput=",userinput)
print ("betAmount=",betAmount)
</snippet></ROW><ROW><id>21087010</id><snippet>234</snippet></ROW><ROW><id>21087010</id><snippet>C:\&gt;python rd.py
234
x= 2
userinput= 34

betAmount= 34
</snippet></ROW><ROW><id>21087010</id><snippet>2</snippet></ROW><ROW><id>21087010</id><snippet>34</snippet></ROW><ROW><id>21087010</id><snippet>readline()</snippet></ROW><ROW><id>21087010</id><snippet>readline()</snippet></ROW><ROW><id>21087010</id><snippet>read()</snippet></ROW><ROW><id>21087078</id><snippet>subprocess.Popen(["bash", "-c", "make"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>21087154</id><snippet>mygrid</snippet></ROW><ROW><id>21087154</id><snippet>grid2=list(zip(*mygrid))
</snippet></ROW><ROW><id>21087154</id><snippet>mygrid</snippet></ROW><ROW><id>21087154</id><snippet>grid2</snippet></ROW><ROW><id>21087154</id><snippet>print</snippet></ROW><ROW><id>21087154</id><snippet> for i in range (len(mygrid)):
     print(mygrid[i])
</snippet></ROW><ROW><id>21087154</id><snippet>for l in mygrid:
    print(l)
</snippet></ROW><ROW><id>21087154</id><snippet>mygrid</snippet></ROW><ROW><id>21087154</id><snippet>mygrid = [list(decode[i:i+4]) for i in range(0,len(decode),4)]
        # ^ add call to list
</snippet></ROW><ROW><id>21087207</id><snippet>links</snippet></ROW><ROW><id>21087207</id><snippet>links_child</snippet></ROW><ROW><id>21087207</id><snippet>Tag</snippet></ROW><ROW><id>21087207</id><snippet>get</snippet></ROW><ROW><id>21087207</id><snippet>links_child</snippet></ROW><ROW><id>21087207</id><snippet>extend</snippet></ROW><ROW><id>21087207</id><snippet>append</snippet></ROW><ROW><id>21087207</id><snippet>links_child</snippet></ROW><ROW><id>21087207</id><snippet>links</snippet></ROW><ROW><id>21087207</id><snippet>../contact/contact-form.php</snippet></ROW><ROW><id>21087207</id><snippet>from urllib import urlopen
from bs4 import BeautifulSoup
import re
import multiprocessing

def work(link):
    link_db = {}
    start_slash = re.compile('/')
    print link
    fullLink = link.attrs.get('href', None)
    check_start = start_slash.match(fullLink)
    if check_start != None:
        fullLink = base_site + fullLink
    page_child = urlopen(fullLink).read()
    soup_child = BeautifulSoup(page_child)
    link_db[fullLink] = 'example'
    return link_db

if __name__ == '__main__':
    base_site = "http://www.tasq.com"
    page = urlopen(base_site).read()
    soup = BeautifulSoup(page)
    links = soup.find_all('a')
    link_dbs = []
    pool = multiprocessing.Pool(processes=4)
    result = pool.map_async(work, links)
    link_dbs.extend( result.get() )
    print link_dbs
</snippet></ROW><ROW><id>21087460</id><snippet>response</snippet></ROW><ROW><id>21087460</id><snippet>result[0]</snippet></ROW><ROW><id>21087460</id><snippet>result[1]</snippet></ROW><ROW><id>21087460</id><snippet>unicode</snippet></ROW><ROW><id>21087460</id><snippet>str</snippet></ROW><ROW><id>21087460</id><snippet>response.decode('cp1250', 'replace')</snippet></ROW><ROW><id>21087460</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>21087460</id><snippet>decode</snippet></ROW><ROW><id>21087460</id><snippet>print</snippet></ROW><ROW><id>21087460</id><snippet>decode</snippet></ROW><ROW><id>21087460</id><snippet>unicode</snippet></ROW><ROW><id>21087460</id><snippet>encode</snippet></ROW><ROW><id>21087460</id><snippet>bytes</snippet></ROW><ROW><id>21087900</id><snippet>numpy.insert</snippet></ROW><ROW><id>21087900</id><snippet>numpy.diff</snippet></ROW><ROW><id>21087900</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[1, 2, 8], [8, 2, 7], [7, 2, 5]])
&gt;&gt;&gt; np.insert(np.diff(a), 0, 0, axis=1)
array([[ 0,  1,  6],
       [ 0, -6,  5],
       [ 0, -5,  3]])
</snippet></ROW><ROW><id>21088116</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([[0, 2, 8], [0, 2, 7], [0, 2, 5], [2, 4, 5], [ 8, 4, 7]])
&gt;&gt;&gt; np.sqrt(np.sum(np.square(a), axis=0))
array([  8.24621125,   6.63324958,  14.56021978])
</snippet></ROW><ROW><id>21088249</id><snippet>&gt;&gt;&gt; [x.title() for x in ["JAMES", "jack","HArry"]]
['James', 'Jack', 'Harry']
</snippet></ROW><ROW><id>21088249</id><snippet>&gt;&gt;&gt; map(str.title, ["JAMES", "jack","HArry"])
['James', 'Jack', 'Harry']
</snippet></ROW><ROW><id>21088257</id><snippet>d = 1000000
while d &gt; 1000:
    split_at = q[:,3].searchsorted([1,random.randrange(LB,UB-I)])
    D = numpy.split(q, split_at) 
    T=D[1]
    TF=D[2]
    T2=copy(TF)
    T2[:,3]=T2[:,3]+I
    u=random.sample(T[:],1)
    v=random.sample(T2[:],1)
    u=array(u)
    v=array(v)
    d=v[0,0]-u[0,0]+T[-1,3]
x=numpy.where(v==T2)[0][0]
y=numpy.where(u==T)[0][0]
l=np.copy(T[y])
T[y],T2[x]=T2[x],T[y]
T2[x],l=l,T2[x]
E=np.copy(T)
E2=np.copy(T2)
E[:,3]=np.cumsum(E[:,0])
E2[:,3]=np.cumsum(E2[:,0])+I
f2=sum(E[:,1]*E[:,3])+sum(E2[:,1]*E2[:,3])
</snippet></ROW><ROW><id>21088294</id><snippet>ndarray</snippet></ROW><ROW><id>21088294</id><snippet>&gt;&gt;&gt; x = np.array([1, 2, 3])
&gt;&gt;&gt; type(x)
&lt;type 'numpy.ndarray'&gt;
</snippet></ROW><ROW><id>21088294</id><snippet>np.ndarray</snippet></ROW><ROW><id>21088294</id><snippet>np.array</snippet></ROW><ROW><id>21088294</id><snippet>TypeError</snippet></ROW><ROW><id>21088294</id><snippet>np.array</snippet></ROW><ROW><id>21088294</id><snippet>np.ndarray</snippet></ROW><ROW><id>21088422</id><snippet>request.user</snippet></ROW><ROW><id>21088422</id><snippet>def some_view(request):
     form = PatientForm(user=request.user)
</snippet></ROW><ROW><id>21088422</id><snippet>from django.contrib.auth.models import AnonymousUser

class PatientForm(ModelForm):
    class Meta:
        model=Patient

    def __init__(self, *args, **kwargs):
        user = kwargs.pop('user', AnonymousUser())
        super(PatientForm, self).__init__(*args, **kwargs)
        if user.is_staff():
            # hide field and set doctor to request.user
            self.fields['doctor'].widget = forms.HiddenInput()
            self.fields['doctor'].initial = user
</snippet></ROW><ROW><id>21088449</id><snippet>QDialog</snippet></ROW><ROW><id>21088449</id><snippet>A modal dialog is a dialog that blocks input 
to other visible windows in the same application.
</snippet></ROW><ROW><id>21088449</id><snippet>from PyQt4 import QtGui, QtCore
from time import sleep

class Test(QtGui.QDialog):
    def __init__(self, parent=None):
        super(Test, self).__init__(parent)
        button = QtGui.QPushButton("Button")
        hbox = QtGui.QHBoxLayout()
        hbox.addWidget(button)
        self.setLayout(hbox)
        button.clicked.connect(self.slot)

    def slot(self):
        progress = QtGui.QProgressDialog(self)
        progress.setWindowModality(QtCore.Qt.WindowModal)
        progress.setLabel(QtGui.QLabel("Doing things..."))
        progress.setAutoClose(True)
        for i in range(101):
             progress.setValue(i);
             sleep(0.05)
             if progress.wasCanceled():
                 break

if __name__=="__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    myapp = Test()
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>21088785</id><snippet>&gt;&gt;&gt; a = np.array([1, 3, 5, 6, 8, 9], dtype=np.float)
&gt;&gt;&gt; a/a[-1]
array([ 0.11111111,  0.33333333,  0.55555556,  0.66666667,  0.88888889,  1.        ])
</snippet></ROW><ROW><id>21088968</id><snippet>np.arange</snippet></ROW><ROW><id>21088968</id><snippet>&gt;&gt;&gt; import numpy as np  
&gt;&gt;&gt; np.arange(200, dtype=np.float)/200
array([ 0.   ,  0.005,  0.01 ,  0.015,  0.02 ,  0.025,  0.03 ,  0.035,
        0.04 ,  0.045,  0.05 ,  0.055,  0.06 ,  0.065,  0.07 ,  0.075,
        0.08 ,  0.085,  0.09 ,  0.095,  0.1  ,  0.105,  0.11 ,  0.115,
        ...
        0.88 ,  0.885,  0.89 ,  0.895,  0.9  ,  0.905,  0.91 ,  0.915,
        0.92 ,  0.925,  0.93 ,  0.935,  0.94 ,  0.945,  0.95 ,  0.955,
        0.96 ,  0.965,  0.97 ,  0.975,  0.98 ,  0.985,  0.99 ,  0.995])
</snippet></ROW><ROW><id>21088971</id><snippet>enable-threads</snippet></ROW><ROW><id>21088971</id><snippet>processes</snippet></ROW><ROW><id>21089291</id><snippet>df.groupby()</snippet></ROW><ROW><id>21089291</id><snippet>df</snippet></ROW><ROW><id>21089291</id><snippet>grouped = df.groupby('Sequence')
</snippet></ROW><ROW><id>21089291</id><snippet>Sequence</snippet></ROW><ROW><id>21089291</id><snippet>df.groupby().apply(..)</snippet></ROW><ROW><id>21089291</id><snippet>df.groupby().aggregate(..)</snippet></ROW><ROW><id>21089291</id><snippet>df[['Ratio1', 'Ratio2', 'Ratio3']].median(axis=1)
</snippet></ROW><ROW><id>21089291</id><snippet>axis=1</snippet></ROW><ROW><id>21089291</id><snippet>df.groupby('ID')['Ratio1'].median()
</snippet></ROW><ROW><id>21089291</id><snippet>ID</snippet></ROW><ROW><id>21089291</id><snippet>Ratio1</snippet></ROW><ROW><id>21089291</id><snippet>data['ID']</snippet></ROW><ROW><id>21089291</id><snippet>ID</snippet></ROW><ROW><id>21089291</id><snippet>apply</snippet></ROW><ROW><id>21089291</id><snippet>def my_func(row):
    return spike[row['ID']] / float(row['Ratio 1']) * (10**-12) * (6.022*10**23) / (1*10**6)

df['Value1'] = df.apply(my_func, axis=1)
</snippet></ROW><ROW><id>21089452</id><snippet>def parse_page1(self, response):
    item = MyItem()
    item['main_url'] = response.url
    # parse response and populate item as required
    request = Request("http://www.example.com/some_page.html",
                      callback=self.parse_page2)
    request.meta['item'] = item
    return request

def parse_page2(self, response):
    item = response.meta['item']
    # parse response and populate item as required
    item['other_url'] = response.url
    return item
</snippet></ROW><ROW><id>21089993</id><snippet>import json

# store your value:
with open('file.txt', 'w') as outFile:
  json.dump(dWord, outfile)

# read your value:
with open('file.txt') as inFile:
  dword = json.load(inFile)
</snippet></ROW><ROW><id>21090315</id><snippet>import passlib.hash, crypt

ctype = "6" #for sha512 (see man crypt)
salt = "qwerty"
insalt = '${}${}$'.format(ctype, salt)
password = "AMOROSO8282"

value1 = sha512_crypt.encrypt(password, salt=salt, rounds=5000)
value2 = crypt.crypt(password, insalt)
if not value1 == value2:
    print("algorithms do not match")
print("{}\n{}\n\n".format(value1, value2))
</snippet></ROW><ROW><id>21090315</id><snippet>$6$qwerty$wZZxE91RvJb4ETR0svmCb69rVCevicDV1Fw.Y9Qyg9idcZUioEoYmOzAv23wyEiNoyMLuBLGXPSQbd5ETanmq/
$6$qwerty$wZZxE91RvJb4ETR0svmCb69rVCevicDV1Fw.Y9Qyg9idcZUioEoYmOzAv23wyEiNoyMLuBLGXPSQbd5ETanmq/
</snippet></ROW><ROW><id>21090320</id><snippet>keyz=['A','B','C','D','E','F']

matrix = [ 
['O', '9', 'L', 'K', '4', 'N'],
['H', 'V', 'U', 'B', 'P', 'X'],
['D', 'W', '3', 'E', '6', 'A'],
['5', 'T', 'I', '8', 'J', 'S'],
['Z', 'M', 'C', 'Q', 'R', '7'],
['1', 'Y', 'G', '2', '0', 'F']]

rkc=0
decode={}
for row in matrix:
    y=keyz[rkc]
    ckc=0
    rkc = rkc+1
    for col in row:
        x=keyz[ckc]
        decode[x+y]=col
        ckc = ckc + 1

for letter in ["EE","DC","FC","AC","BD","AB","CD","FD"]:
    print decode[letter],

print
</snippet></ROW><ROW><id>21090320</id><snippet>import string
import random
gridlayout= []
messagetoencode="readthis"
list1 = list(string.ascii_uppercase + string.digits)
for i in range(6):
    grid2=[]
    for j in range(6):
        thing = random.choice(list1)
        grid2.append(thing)
        list1.remove(thing)
    gridlayout.append(grid2)
    list2=list(messagetoencode)
print("  A    B    C    D    E    F")
for l in gridlayout:
    print l

keyz=['A','B','C','D','E','F']

rkc=0
decode={}
encode={}
for row in gridlayout:
    y=keyz[rkc]
    ckc=0
    rkc = rkc+1
    for col in row:
        x=keyz[ckc]
        decode[x+y]=col
        encode[col]=x+y
        ckc = ckc + 1

obfuse=[]

for letter in messagetoencode:
    obfuse.append(encode[letter.upper()])

print "obfuse is ", obfuse

for letter in obfuse:
    print decode[letter],

print
</snippet></ROW><ROW><id>21090415</id><snippet>for i in k:
    if i not in '#&amp;@$!*^{}_()*+[]%\n':
        stat=stat+i
</snippet></ROW><ROW><id>21090415</id><snippet>from collections import Counter
import requests  # external library but much more convenient than urllib2

r = requests.get('http://www.pythonchallenge.com/pc/def/ocr.html')
text = r.text.rsplit('&lt;!--', 1)[-1].rsplit('--&gt;', 1)[0]  # extract comment
counts = Counter(text)
rare = {c for c in counts if counts[c] &lt; 5}
print ''.join([c for c in text if c in rare])
</snippet></ROW><ROW><id>21090432</id><snippet>ptrepack</snippet></ROW><ROW><id>21090432</id><snippet>ptrepack --chunkshape=auto --propindexes --complevel=9 --complib=blosc in.h5 out.h5
</snippet></ROW><ROW><id>21090552</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; xml = urllib2.urlopen('http://freegeoip.net/xml/192.168.1.1').read()
&gt;&gt;&gt; soup = BeautifulSoup(xml)
&gt;&gt;&gt; soup.ip.text
u'192.168.1.1'
</snippet></ROW><ROW><id>21090552</id><snippet>#!/usr/bin/env python
import urllib2
from bs4 import BeautifulSoup

ip  = "192.168.1.1"

xml = urllib2.urlopen('http://freegeoip.net/xml/' + ip).read()

soup = BeautifulSoup(xml)

print "IP Address: %s" % soup.ip.text
print "Country Code: %s" % soup.countrycode.text
print "Country Name: %s" % soup.countryname.text
</snippet></ROW><ROW><id>21090552</id><snippet>IP Address: 192.168.1.1
Country Code: RD
Country Name: Reserved
</snippet></ROW><ROW><id>21090552</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>21090769</id><snippet>def output(input1, input2):
    with input1:  # automatically close when done
        # set comprehension of all lines starting with @, minus last character
        to_match = {line.strip()[:-1] for line in input1 if line[0] == '@'}

    with input2:
        for line in input2:
            if line[0] == '@' and line.strip()[:-1] in to_match:
                print line.strip()
                for i in range(3):
                    print next(input2, '').strip()
</snippet></ROW><ROW><id>21090786</id><snippet>        f(xk[i] + epsilon[i]) - f(xk[i])
f'[i] = ---------------------------------
                   epsilon[i]
</snippet></ROW><ROW><id>21090786</id><snippet>approx_grad</snippet></ROW><ROW><id>21090799</id><snippet>def function(arg1, arg2):
    if False:
        import signal

    os.kill(pid, signal.SIGKILL)
</snippet></ROW><ROW><id>21090799</id><snippet>signal</snippet></ROW><ROW><id>21090799</id><snippet>import signal</snippet></ROW><ROW><id>21090799</id><snippet>signal</snippet></ROW><ROW><id>21090799</id><snippet>signal</snippet></ROW><ROW><id>21090799</id><snippet>import signal</snippet></ROW><ROW><id>21090799</id><snippet>signal</snippet></ROW><ROW><id>21090815</id><snippet>PORT = 50000
MAGIC = "fna349fn" #to make sure we don't confuse or get confused by other programs
</snippet></ROW><ROW><id>21090815</id><snippet>from time import sleep
from socket import socket, AF_INET, SOCK_DGRAM, SOL_SOCKET, SO_BROADCAST, gethostbyname, gethostname

s = socket(AF_INET, SOCK_DGRAM) #create UDP socket
s.bind(('', 0))
s.setsockopt(SOL_SOCKET, SO_BROADCAST, 1) #this is a broadcast socket
my_ip= gethostbyname(gethostname()) #get our IP. Be careful if you have multiple network interfaces or IPs

while 1:
    data = MAGIC+my_ip
    s.sendto(data, ('&lt;broadcast&gt;', PORT))
    print "sent service announcement"
    sleep(5)
</snippet></ROW><ROW><id>21090815</id><snippet>from socket import socket, AF_INET, SOCK_DGRAM

s = socket(AF_INET, SOCK_DGRAM) #create UDP socket
s.bind(('', PORT))

while 1:
    data, addr = s.recvfrom(1024) #wait for a packet
    if data.startswith(MAGIC):
        print "got service announcement from", data[len(MAGIC):]
</snippet></ROW><ROW><id>21091119</id><snippet>global</snippet></ROW><ROW><id>21091119</id><snippet>nonlocal</snippet></ROW><ROW><id>21091119</id><snippet>locals</snippet></ROW><ROW><id>21091119</id><snippet>del</snippet></ROW><ROW><id>21091119</id><snippet>x</snippet></ROW><ROW><id>21091119</id><snippet>x</snippet></ROW><ROW><id>21091119</id><snippet>inner</snippet></ROW><ROW><id>21091119</id><snippet>inner</snippet></ROW><ROW><id>21091119</id><snippet>outer</snippet></ROW><ROW><id>21091119</id><snippet>inner</snippet></ROW><ROW><id>21091119</id><snippet>locals</snippet></ROW><ROW><id>21091119</id><snippet>del x</snippet></ROW><ROW><id>21091119</id><snippet>x</snippet></ROW><ROW><id>21091119</id><snippet>inner</snippet></ROW><ROW><id>21091119</id><snippet>locals</snippet></ROW><ROW><id>21091119</id><snippet>print</snippet></ROW><ROW><id>21091119</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>21091119</id><snippet>def outer():
    x = 1
    def inner():
        print x
        print "Local variables: %s" % locals()
    return inner
inner = outer()
print inner.func_closure
print inner.func_code.co_freevars
print outer.func_code.co_cellvars
</snippet></ROW><ROW><id>21091119</id><snippet>inspect</snippet></ROW><ROW><id>21091119</id><snippet>function</snippet></ROW><ROW><id>21091119</id><snippet>code</snippet></ROW><ROW><id>21091119</id><snippet>dis</snippet></ROW><ROW><id>21091119</id><snippet>outer</snippet></ROW><ROW><id>21091119</id><snippet>inner</snippet></ROW><ROW><id>21091119</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>21091119</id><snippet>LOAD_DEREF</snippet></ROW><ROW><id>21091119</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>21091119</id><snippet>exec</snippet></ROW><ROW><id>21091119</id><snippet>del</snippet></ROW><ROW><id>21091119</id><snippet>def foo(): del x</snippet></ROW><ROW><id>21091119</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>21091119</id><snippet>del</snippet></ROW><ROW><id>21091119</id><snippet>x</snippet></ROW><ROW><id>21091119</id><snippet>del</snippet></ROW><ROW><id>21091339</id><snippet>init</snippet></ROW><ROW><id>21091339</id><snippet>__init__</snippet></ROW><ROW><id>21091339</id><snippet>Sprite</snippet></ROW><ROW><id>21091339</id><snippet>((x, y), name)</snippet></ROW><ROW><id>21091498</id><snippet>for line in fileinput.input(myfile,inplace=1):
   lineno = 0 
   lineno = string.find(line, stext)
if lineno &gt;=0:
   line = line.replace(stext, rtext)
    sys.stdout.write(line)
else:
    print "append line"
</snippet></ROW><ROW><id>21091498</id><snippet>for line in fileinput.input(myfile,inplace=1):
    lineno = 0 
    lineno = string.find(line, stext)
    if lineno &gt;=0:
        line = line.replace(stext, rtext)
        sys.stdout.write(line)
    else:
        print "append line"
</snippet></ROW><ROW><id>21091498</id><snippet>if</snippet></ROW><ROW><id>21091498</id><snippet>lineno</snippet></ROW><ROW><id>21091498</id><snippet>stext</snippet></ROW><ROW><id>21091678</id><snippet>import externalLib as myLib

def myNewMethod(self):
    print(self.name)

myLib.Superclass.myNewMethod = myNewMethod
</snippet></ROW><ROW><id>21091873</id><snippet>requests</snippet></ROW><ROW><id>21091873</id><snippet>files</snippet></ROW><ROW><id>21091873</id><snippet>data</snippet></ROW><ROW><id>21091873</id><snippet>data</snippet></ROW><ROW><id>21091873</id><snippet>files</snippet></ROW><ROW><id>21091873</id><snippet>None</snippet></ROW><ROW><id>21091873</id><snippet>requests</snippet></ROW><ROW><id>21091873</id><snippet>files = [
    ('up', ('aa.png', open('aa.png', 'rb'), 'image/png')),
    ('exp', (None, 'python', None)),
    ('ptext', (None, 'text', None)),
    ('board', (None, 'Pictures', None)),
]

r = requests.post(url, files=files, cookies=cookie)
</snippet></ROW><ROW><id>21091873</id><snippet>Content-Type: multipart/form-data; boundary=6f9d948e26f140a289a9e8297c332a91

--0ca5f18576514b069c33bc436ce6e2cd
Content-Disposition: form-data; name="up"; filename="aa.png"
Content-Type: image/png

[ .. image data .. ]

--0ca5f18576514b069c33bc436ce6e2cd
Content-Disposition: form-data; name="exp"

python
--0ca5f18576514b069c33bc436ce6e2cd
Content-Disposition: form-data; name="ptext"

text
--0ca5f18576514b069c33bc436ce6e2cd
Content-Disposition: form-data; name="board"

Pictures
--0ca5f18576514b069c33bc436ce6e2cd--
</snippet></ROW><ROW><id>21092117</id><snippet>netifaces</snippet></ROW><ROW><id>21092117</id><snippet>ip</snippet></ROW><ROW><id>21092117</id><snippet>for line in subprocess.Popen(
              ["ip", "addr", "show", "dev", "eth0"],
              stdout=subprocess.PIPE).communicate()[0].splitlines():
  if 'inet' in line:
     subprocess.Popen(["ip", "addr", "del", line.split()[1], "dev", "eth0"])
</snippet></ROW><ROW><id>21092509</id><snippet>data</snippet></ROW><ROW><id>21092509</id><snippet>genfromtxt</snippet></ROW><ROW><id>21092509</id><snippet>  data.shape = data.shape[0]
</snippet></ROW><ROW><id>21092509</id><snippet>data.dtype = new_dtype</snippet></ROW><ROW><id>21092509</id><snippet>  data = data.view(new_dtype).reshape(-1)
</snippet></ROW><ROW><id>21092509</id><snippet>data['f3']</snippet></ROW><ROW><id>21092509</id><snippet>data</snippet></ROW><ROW><id>21092509</id><snippet>data</snippet></ROW><ROW><id>21092509</id><snippet>data['f3']</snippet></ROW><ROW><id>21092509</id><snippet>data</snippet></ROW><ROW><id>21092519</id><snippet>sharedModule.agr = aggregator
</snippet></ROW><ROW><id>21092602</id><snippet>_FOO_cache</snippet></ROW><ROW><id>21092602</id><snippet>my_employee.company</snippet></ROW><ROW><id>21092602</id><snippet>my_employee._company_cache</snippet></ROW><ROW><id>21092602</id><snippet>hasattr(my_employee, '_company_cache')</snippet></ROW><ROW><id>21092788</id><snippet>wimp_data[mass].dN_dx[definitions[j]] = float(nu_e[j][i])
</snippet></ROW><ROW><id>21092788</id><snippet>wimp_data[mass].dN_dx[definitions[j]] = [float(nu_e[j][i])]
</snippet></ROW><ROW><id>21092868</id><snippet>client.php</snippet></ROW><ROW><id>21092868</id><snippet>div</snippet></ROW><ROW><id>21092868</id><snippet>server.py</snippet></ROW><ROW><id>21092868</id><snippet>from SimpleXMLRPCServer import SimpleXMLRPCServer
from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler

# Restrict to a particular path.
class RequestHandler(SimpleXMLRPCRequestHandler):
    rpc_paths = ('/RPC2',)

# Create server
server = SimpleXMLRPCServer(("localhost", 8000),
                            requestHandler=RequestHandler)
server.register_introspection_functions()

# Register pow() function; this will use the value of
# pow.__name__ as the name, which is just 'pow'.
server.register_function(pow)

# Register a function under a different name
def adder_function(x,y):
    return x + y
server.register_function(adder_function, 'add')

# Register an instance; all the methods of the instance are
# published as XML-RPC methods (in this case, just 'div').
class MyFuncs:
    def div(self, x, y):
        return x // y

server.register_instance(MyFuncs())

# Run the server's main loop
server.serve_forever()
</snippet></ROW><ROW><id>21092868</id><snippet>client.php</snippet></ROW><ROW><id>21092868</id><snippet>&lt;html&gt;
&lt;head&gt;&lt;title&gt;xmlrpc&lt;/title&gt;&lt;/head&gt;
&lt;body&gt;
&lt;h1&gt;Php - Python - XMLRPC Demo&lt;/h1&gt;
&lt;?php

    // Note that the path to xmlrpc.inc file is relative.
    // to this file.
    include("xmlrpc/lib/xmlrpc.inc");

    // Params to python function 10 and 5.
    // Build the message you want send.
    // The message takes the function name and the params. See doc for details on how
    // build params, is pretty easy.
    $msg = new xmlrpcmsg( "div", array(new xmlrpcval(10, "int"), new xmlrpcval(5, "int")) );
    // Build a XMLRCP - Client.
    $client = new xmlrpc_client("/RPC2", "localhost", 8000);
    // And send the message.
    $response = $client-&gt;send($msg);


    // From here all should look familier to you.
    if(!$response-&gt;faultCode())
    {
        $v=$response-&gt;value();
        echo "The result from div is" . htmlspecialchars($v-&gt;scalarval());

    }
    else
    {
        print "An error occurred: ";
        print "Code: " . htmlspecialchars($r-&gt;faultCode())
            . " Reason: '" . htmlspecialchars($r-&gt;faultString()) . "'&lt;/pre&gt;&lt;br/&gt;";
    }

?&gt;
&lt;hr/&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>21092911</id><snippet>try:
    app.config_from_object('foo_config')
    app.conf  # force ImportError if configuration not found
except ImportError:
    app.config_from_object('foo.defaultconfig')
</snippet></ROW><ROW><id>21092972</id><snippet>a is b</snippet></ROW><ROW><id>21092972</id><snippet>a</snippet></ROW><ROW><id>21092972</id><snippet>b</snippet></ROW><ROW><id>21092972</id><snippet>c</snippet></ROW><ROW><id>21092972</id><snippet>d</snippet></ROW><ROW><id>21092972</id><snippet>c is d</snippet></ROW><ROW><id>21092972</id><snippet>is</snippet></ROW><ROW><id>21092972</id><snippet>id()</snippet></ROW><ROW><id>21092972</id><snippet>is</snippet></ROW><ROW><id>21092972</id><snippet>==</snippet></ROW><ROW><id>21092972</id><snippet>==</snippet></ROW><ROW><id>21092972</id><snippet>&gt;&gt;&gt; a = 'str'
&gt;&gt;&gt; b = 'str'
&gt;&gt;&gt; 
&gt;&gt;&gt; a is b
True
</snippet></ROW><ROW><id>21093047</id><snippet>Recv</snippet></ROW><ROW><id>21093047</id><snippet>Recv</snippet></ROW><ROW><id>21093047</id><snippet>tag=-1</snippet></ROW><ROW><id>21093047</id><snippet>MPI.ANY_TAG</snippet></ROW><ROW><id>21093047</id><snippet>print MPI.ANY_TAG</snippet></ROW><ROW><id>21093047</id><snippet>Recv</snippet></ROW><ROW><id>21093047</id><snippet>rnk</snippet></ROW><ROW><id>21093047</id><snippet>rnk = -2 # EDIT</snippet></ROW><ROW><id>21093047</id><snippet>#passRandomDraw.py
import numpy
from mpi4py import MPI
comm = MPI.COMM_WORLD
rank = comm.Get_rank()

randNum = numpy.zeros(1)
rnk = -1 # EDIT

if rank == 1:
    randNum = numpy.random.random_sample(1)
    print "Process", rank, "drew the number", randNum[0]
    comm.Send(randNum, dest=0, tag=rank) # EDIT

if rank == 0:
    print "Process", rank, "before receiving has the number", randNum[0]
    print "Sender rank:", rnk
    status = MPI.Status()
    comm.Recv(randNum, source=MPI.ANY_SOURCE, tag=MPI.ANY_TAG, status=status) # EDIT
    rnk = status.Get_source()
    print "Process", rank, "received the number", randNum[0]
    print "Sender rank:", rnk # EDIT
</snippet></ROW><ROW><id>21093231</id><snippet>predict_proba()</snippet></ROW><ROW><id>21093231</id><snippet>from sklearn.naive_bayes import MultinomialNB
from sklearn import datasets
iris = datasets.load_iris()

mnb = MultinomialNB()
y_pred = mnb.fit(iris.data, iris.target).predict_proba(iris.data)
tags = list(set(iris.target.tolist()))
probs = y_pred.tolist() 

print [zip(i, tags) for i in probs]
</snippet></ROW><ROW><id>21093231</id><snippet>[[(0.7520319948772209, 0), (0.160905710773243, 1), (0.08706229434953643, 2)], [(0.6844907609326716, 0), (0.1996142797317376, 1), (0.11589495933559005, 2)], [(0.7165539514487157, 0), (0.18031248114566703, 1), (0.10313356740561741, 2)], [(0.6678967279059345, 0), (0.20853796442897996, 1), (0.12356530766508479, 2)], [(0.7592386233982199, 0), (0.1564119915930661, 1), (0.08434938500871363, 2)], [(0.7123284219054676, 0), (0.18631932889818908, 1), (0.10135224919634335, 2)], [(0.692830614508067, 0), (0.1941393579908561, 1), (0.11303002750107637, 2)], [(0.7223023141841948, 0), (0.17848129978229782, 1), (0.09921638603350694, 2)], [(0.6490803351236442, 0), (0.2179567749596649, 1), (0.1329628899166902, 2)], [(0.7101630090806663, 0), (0.18515188117472428, 1), (0.10468510974460926, 2)], [(0.7706876980918721, 0), (0.15071276584157142, 1), (0.0785995360665561, 2)], [(0.6987277167692307, 0), (0.19198923174718688, 1), (0.10928305148358229, 2)], [(0.7092823355477573, 0), (0.18501507079143967, 1), (0.1057025936608035, 2)], [(0.7342374424798592, 0), (0.16829861767010512, 1), (0.0974639398500348, 2)], [(0.8443463905803837, 0), (0.10536809401960547, 1), (0.05028551540001017, 2)], [(0.8036814104223939, 0), (0.1313362382603278, 1), (0.06498235131727866, 2)], [(0.769464547835359, 0), (0.15105143900207532, 1), (0.07948401316256604, 2)], [(0.7255850952734539, 0), (0.17657408576774905, 1), (0.097840818958797, 2)], [(0.7397080632341082, 0), (0.1707037515928118, 1), (0.08958818517308087, 2)], [(0.7454550625206028, 0), (0.16522965912480264, 1), (0.08931527835459417, 2)], [(0.7081107158186839, 0), (0.1885497211367833, 1), (0.10333956304453229, 2)], [(0.7064869683171973, 0), (0.18818498727469904, 1), (0.10532804440810306, 2)], [(0.796989599495376, 0), (0.13199962567205156, 1), (0.0710107748325723, 2)], [(0.587778432243368, 0), (0.2561898147126928, 1), (0.1560317530439388, 2)], [(0.6495116627735238, 0), (0.22132827197437152, 1), (0.12916006525210533, 2)], [(0.6558603115752442, 0), (0.21701444369684725, 1), (0.1271252447279083, 2)], [(0.6471160032245035, 0), (0.22224046981900822, 1), (0.1306435269564876, 2)], [(0.7416782873328798, 0), (0.1675882755811794, 1), (0.09073343708594127, 2)], [(0.7446817125214586, 0), (0.16548141143388176, 1), (0.08983687604466006, 2)], [(0.6688637590831867, 0), (0.2087351551980403, 1), (0.12240108571877327, 2)], [(0.6601483794765286, 0), (0.21396507128778453, 1), (0.12588654923568643, 2)], [(0.6816137660789651, 0), (0.2033992437242013, 1), (0.11498699019683437, 2)], [(0.8241101192684347, 0), (0.11766437654228883, 1), (0.058225504189276536, 2)], [(0.83205074128301, 0), (0.11304194543139681, 1), (0.05490731328559234, 2)], [(0.7101630090806663, 0), (0.18515188117472428, 1), (0.10468510974460926, 2)], [(0.7430851694455511, 0), (0.16529239865700102, 1), (0.0916224318974473, 2)], [(0.779636336970197, 0), (0.14494298030029326, 1), (0.0754206827295091, 2)], [(0.7101630090806663, 0), (0.18515188117472428, 1), (0.10468510974460926, 2)], [(0.6789788268871746, 0), (0.20084313848520732, 1), (0.12017803462761736, 2)], [(0.7262832077959535, 0), (0.17640557129332532, 1), (0.0973112209107207, 2)], [(0.7363551685765576, 0), (0.1696809261744515, 1), (0.0939639052489906, 2)], [(0.5538451256026228, 0), (0.2692779602391119, 1), (0.17687691415826487, 2)], [(0.7042027164892329, 0), (0.18658505267113334, 1), (0.10921223083963391, 2)], [(0.5963555624638872, 0), (0.25075085344725584, 1), (0.15289358408885717, 2)], [(0.65439734662364, 0), (0.2198127742453153, 1), (0.12578987913104406, 2)], [(0.6495106395351926, 0), (0.21917003546172703, 1), (0.1313193250030794, 2)], [(0.7571100536851544, 0), (0.15851940194145597, 1), (0.08437054437338924, 2)], [(0.6969127760751604, 0), (0.1916827744135674, 1), (0.11140444951127176, 2)], [(0.7671631061752553, 0), (0.1526253742597591, 1), (0.08021151956498587, 2)], [(0.7254443501785298, 0), (0.1762902432553972, 1), (0.09826540656607288, 2)], [(0.05616303783205017, 0), (0.5114112651916364, 1), (0.432425696976313, 2)], [(0.05045622209773331, 0), (0.5019052377441757, 1), (0.4476385401580907, 2)], [(0.039404121537601915, 0), (0.5063650737015377, 1), (0.4542308047608592, 2)], [(0.04710522699818281, 0), (0.48480988067469, 1), (0.46808489232712763, 2)], [(0.03801644816953021, 0), (0.49775392400502627, 1), (0.46422962782544475, 2)], [(0.045561446486157016, 0), (0.4925073573450104, 1), (0.4619311961688331, 2)], [(0.039662446204841086, 0), (0.49873204417078004, 1), (0.46160550962437963, 2)], [(0.10701788982710146, 0), (0.47535669064402614, 1), (0.41762541952887167, 2)], [(0.053665098673951646, 0), (0.505300715070129, 1), (0.4410341862559204, 2)], [(0.0525135327993029, 0), (0.48336561688204754, 1), (0.46412085031864936, 2)], [(0.07633356381663149, 0), (0.479485268421569, 1), (0.4441811677617995, 2)], [(0.050562916172520865, 0), (0.49342004113700544, 1), (0.45601704269047194, 2)], [(0.07291747327601361, 0), (0.49453525978952834, 1), (0.43254726693445994, 2)], [(0.03955223347843718, 0), (0.4959408839306025, 1), (0.46450688259096, 2)], [(0.08936248960426366, 0), (0.48762276421125, 1), (0.4230147461844858, 2)], [(0.06195975911054385, 0), (0.5061292622360939, 1), (0.431910978653363, 2)], [(0.03831622365371633, 0), (0.4882594641563942, 1), (0.4734243121898909, 2)], [(0.08635079776773631, 0), (0.49450781017113565, 1), (0.4191413920611266, 2)], [(0.027093026736842187, 0), (0.48373491476096137, 1), (0.48917205850219836, 2)], [(0.07519686280624735, 0), (0.4902817831829304, 1), (0.4345213540108229, 2)], [(0.024409954485511174, 0), (0.4828392042793499, 1), (0.492750841235139, 2)], [(0.07042285903603575, 0), (0.4964293611155268, 1), (0.4331477798484379, 2)], [(0.02455795536824762, 0), (0.48683709246033974, 1), (0.4886049521714139, 2)], [(0.04880578029883432, 0), (0.4998434674757908, 1), (0.45135075222537513, 2)], [(0.0638913231350886, 0), (0.5020577350429162, 1), (0.4340509418219941, 2)], [(0.05742052492537856, 0), (0.5041933482237854, 1), (0.43838612685083517, 2)], [(0.03993759354894706, 0), (0.504010990963511, 1), (0.4560514154875418, 2)], [(0.02528131305415432, 0), (0.4937813226658602, 1), (0.4809373642799863, 2)], [(0.03918748210864577, 0), (0.49255695819412515, 1), (0.4682555596972289, 2)], [(0.12061289562641707, 0), (0.48274378627696585, 1), (0.39664331809661796, 2)], [(0.07482169849815479, 0), (0.48808052342521985, 1), (0.4370977780766249, 2)], [(0.09117508375957138, 0), (0.48671672075844624, 1), (0.42210819548198314, 2)], [(0.07675253014451815, 0), (0.49259018574599794, 1), (0.43065728410948345, 2)], [(0.019521752496472658, 0), (0.47919807833320655, 1), (0.5012801691703213, 2)], [(0.03679860023973873, 0), (0.48532661590429554, 1), (0.4778747838559651, 2)], [(0.04575050525515768, 0), (0.4966545638828356, 1), (0.45759493086200687, 2)], [(0.04377223745963666, 0), (0.5043534382070538, 1), (0.4518743243333101, 2)], [(0.041377864559958115, 0), (0.49450702243148886, 1), (0.4641151130085546, 2)], [(0.06664472235797042, 0), (0.4927032207407448, 1), (0.4406520569012841, 2)], [(0.0528380132202798, 0), (0.4871102029137462, 1), (0.460051783865975, 2)], [(0.047940170349888546, 0), (0.49001280154973126, 1), (0.4620470281003815, 2)], [(0.04505918048213829, 0), (0.49770388865629844, 1), (0.45723693086156225, 2)], [(0.06766160412311599, 0), (0.4929541163343243, 1), (0.43938427954256065, 2)], [(0.10330850300509363, 0), (0.476587539562611, 1), (0.42010395743229584, 2)], [(0.052348028868769506, 0), (0.4904703285165612, 1), (0.45718164261466987, 2)], [(0.07213390841723287, 0), (0.4951634224930377, 1), (0.43270266908972993, 2)], [(0.05983129688259453, 0), (0.49357344812806564, 1), (0.44659525498934033, 2)], [(0.06145081121761718, 0), (0.4997746691613533, 1), (0.4387745196210307, 2)], [(0.12643795001228872, 0), (0.47099626175067344, 1), (0.40256578823703776, 2)], [(0.06070342294682647, 0), (0.49247820304725287, 1), (0.4468183740059213, 2)], [(0.004295498135605839, 0), (0.43723717013987085, 1), (0.5584673317245246, 2)], [(0.012341506012939497, 0), (0.46132786049878993, 1), (0.5263306334882699, 2)], [(0.008041961751626116, 0), (0.4680415056267554, 1), (0.5239165326216197, 2)], [(0.012203741968758995, 0), (0.4719261984222097, 1), (0.5158700596090297, 2)], [(0.006638717235494328, 0), (0.45347586782275284, 1), (0.5398854149417517, 2)], [(0.005263351295626021, 0), (0.4644832412791946, 1), (0.5302534074251788, 2)], [(0.018779628968296866, 0), (0.45982004366157864, 1), (0.5214003273701255, 2)], [(0.00888680054755727, 0), (0.47816163997455585, 1), (0.5129515594778852, 2)], [(0.008973878798549955, 0), (0.4660746833425122, 1), (0.5249514378589395, 2)], [(0.0057884114937193755, 0), (0.45971014127911347, 1), (0.534501447227168, 2)], [(0.016774571271002955, 0), (0.4801428349049056, 1), (0.5030825938240929, 2)], [(0.012044056966578119, 0), (0.4687383638137518, 1), (0.5192175792196708, 2)], [(0.010208690383078136, 0), (0.4695191063788682, 1), (0.5202722032380547, 2)], [(0.010040795166916689, 0), (0.4512755375694701, 1), (0.5386836672636148, 2)], [(0.0064969600914313004, 0), (0.43748007849739584, 1), (0.5560229614111728, 2)], [(0.009304270226104616, 0), (0.4601504705473684, 1), (0.530545259226528, 2)], [(0.014563517615477736, 0), (0.47933745208881223, 1), (0.5060990302957091, 2)], [(0.0070262746504037524, 0), (0.47944937445766783, 1), (0.5135243508919285, 2)], [(0.0025301248297814735, 0), (0.4388473043566187, 1), (0.5586225708136002, 2)], [(0.01793057634785105, 0), (0.4743301503029546, 1), (0.5077392733491937, 2)], [(0.007644068684806274, 0), (0.4622175416837792, 1), (0.5301383896314145, 2)], [(0.01270343330775703, 0), (0.4583206744735115, 1), (0.5289758922187313, 2)], [(0.005081534005270547, 0), (0.46485081415813695, 1), (0.5300676518365941, 2)], [(0.01829020671024577, 0), (0.47785801303090053, 1), (0.5038517802588545, 2)], [(0.010300836830757908, 0), (0.4716408754308902, 1), (0.5180582877383503, 2)], [(0.013056433889026029, 0), (0.48854866614356096, 1), (0.49839489996741193, 2)], [(0.02048499287484417, 0), (0.4796366294972459, 1), (0.4998783776279093, 2)], [(0.02097735435316386, 0), (0.48087632026222776, 1), (0.4981463253846089, 2)], [(0.007710125240385033, 0), (0.4556132126926747, 1), (0.5366766620669403, 2)], [(0.01775038522782329, 0), (0.4965751879587703, 1), (0.4856744268134073, 2)], [(0.008638855104322298, 0), (0.4756764562227914, 1), (0.5156846886728871, 2)], [(0.012134615048701844, 0), (0.49867869309551527, 1), (0.4891866918557844, 2)], [(0.006698546808664106, 0), (0.45021394937102427, 1), (0.5430875038203126, 2)], [(0.02528409377638384, 0), (0.4904865676449243, 1), (0.4842293385786926, 2)], [(0.017052353961584325, 0), (0.48108163514744395, 1), (0.5018660108909714, 2)], [(0.0059266080768430335, 0), (0.46457056945157915, 1), (0.5295028224715764, 2)], [(0.007121249136349586, 0), (0.45269328584265495, 1), (0.5401854650209942, 2)], [(0.015142475318899725, 0), (0.4798754856996685, 1), (0.5049820389814322, 2)], [(0.02213425927551211, 0), (0.480457241275485, 1), (0.49740849944900195, 2)], [(0.011936502731266969, 0), (0.4753590492087327, 1), (0.5127044480600016, 2)], [(0.006463038736312238, 0), (0.4524258122544322, 1), (0.5411111490092549, 2)], [(0.011315743506039701, 0), (0.4700603993589541, 1), (0.5186238571350079, 2)], [(0.012341506012939497, 0), (0.46132786049878993, 1), (0.5263306334882699, 2)], [(0.006432772071935396, 0), (0.4567810928523039, 1), (0.5367861350757602, 2)], [(0.00587581213132872, 0), (0.45021579023480335, 1), (0.5439083976338676, 2)], [(0.009473580472389227, 0), (0.46237113309649774, 1), (0.5281552864311121, 2)], [(0.013103723329522001, 0), (0.4670468076720037, 1), (0.5198494689984746, 2)], [(0.0138096923928804, 0), (0.47411641181074315, 1), (0.5120738957963767, 2)], [(0.009332865067928468, 0), (0.4597334606118675, 1), (0.5309336743202042, 2)], [(0.017337387678188924, 0), (0.474812201112126, 1), (0.5078504112096852, 2)]]
</snippet></ROW><ROW><id>21093297</id><snippet>expanding_mean</snippet></ROW><ROW><id>21093297</id><snippet>grouped = df.sort(columns='date').groupby('home')
grouped['score_h'].apply(pd.expanding_mean)
</snippet></ROW><ROW><id>21093347</id><snippet>def distance(a, b):
    """Distance between two bases a and b."""
    if a == b:
        return 0
    elif a == "_" or b == "_":
        return 1
    else:
        return 2
</snippet></ROW><ROW><id>21093347</id><snippet>def w_sum(a, b, w=1):
    """Calculate the pair sum of bases a and b with weighting w."""
    if a == b:
        return 3 * w
    elif a == "_" or b == "_":
        return -1 * w
    else:
        return 2 * w
</snippet></ROW><ROW><id>21093347</id><snippet>zip</snippet></ROW><ROW><id>21093347</id><snippet>list(zip(seq1, seq2, seq3)) == [('A', 'A', 'A'), 
                                ('G', 'G', 'C'), 
                                ('_', '_', 'T'), 
                                ('C', 'C', '_'), 
                                ('T', 'T', 'T')]
</snippet></ROW><ROW><id>21093347</id><snippet>itertools.combinations</snippet></ROW><ROW><id>21093347</id><snippet>list(combinations(('G', 'G', 'C'), 2)) == [('G', 'G'), 
                                           ('G', 'C'), 
                                           ('G', 'C')]
</snippet></ROW><ROW><id>21093347</id><snippet>from itertools import combinations

consensus = 0
wsp = 0
for position in zip(seq1, seq2, seq3): # sets at same position
    for pair in combinations(position, 2): # pairs within set
        consensus+= distance(*pair) # calculate distance
        wsp += w_sum(*pair) # calculate pair sum
</snippet></ROW><ROW><id>21093347</id><snippet>*pair</snippet></ROW><ROW><id>21093431</id><snippet>msg = "!comment postid customcomment"</snippet></ROW><ROW><id>21093431</id><snippet>split</snippet></ROW><ROW><id>21093431</id><snippet>" "</snippet></ROW><ROW><id>21093431</id><snippet>msg_list=msg.split(" ",2)</snippet></ROW><ROW><id>21093431</id><snippet>postid=msg_list[1]</snippet></ROW><ROW><id>21093431</id><snippet>postid=int(msg_list[1])</snippet></ROW><ROW><id>21093431</id><snippet>message = msg_list[2]</snippet></ROW><ROW><id>21093431</id><snippet>msg_list=msg.split()</snippet></ROW><ROW><id>21093431</id><snippet>join</snippet></ROW><ROW><id>21093431</id><snippet>message=" ".join(msg_list[2:])</snippet></ROW><ROW><id>21093431</id><snippet>facebook.publish(cat="comments", id=postid, message=message)</snippet></ROW><ROW><id>21093515</id><snippet>PORT</snippet></ROW><ROW><id>21093515</id><snippet>__main__</snippet></ROW><ROW><id>21093515</id><snippet>if __name__ == '__main__':
    from os import environ
    app.run(debug=False, port=environ.get("PORT", 5000), processes=2)
</snippet></ROW><ROW><id>21093679</id><snippet>class History(models.Model):
    @classmethod
    def insert_history(cls, field1, field2, field3):
        # Here be code
</snippet></ROW><ROW><id>21093679</id><snippet>from app.models import History
History.insert_history(field1, field2, field3)
</snippet></ROW><ROW><id>21093679</id><snippet>create</snippet></ROW><ROW><id>21093899</id><snippet>numbers[index] = user
</snippet></ROW><ROW><id>21093899</id><snippet>replace()</snippet></ROW><ROW><id>21093899</id><snippet>append()</snippet></ROW><ROW><id>21093899</id><snippet>numbers.append(user)
</snippet></ROW><ROW><id>21093899</id><snippet>insert()</snippet></ROW><ROW><id>21093899</id><snippet>0</snippet></ROW><ROW><id>21093899</id><snippet>numbers.insert(0, user)
</snippet></ROW><ROW><id>21093976</id><snippet>sudo apt-get install python-distutils-extra python-cairo-dev libtiff5-dev \
libcairo2-dev libglib2.0-dev python2.7-dev python-zbar python-gi \
python-gi-cairo gir1.2-gtk-3.0 pdftk python-pypdf python-reportlab \
python-imaging 
</snippet></ROW><ROW><id>21094024</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>21094024</id><snippet>from collections import Counter, defaultdict

x = Counter(['a', 'a', 'ab', 'c', 'hij', 'k']) # OR ['a','a','ab','c','hij','k']
by_length = defaultdict(list)
for key in x:
    by_length[len(key)].append(key)

print(by_length[1]) # prints: ['a', 'k', 'c']
print(by_length[2]) # prints: ['ab']
print(by_length[3]) # prints: ['hij']
</snippet></ROW><ROW><id>21094024</id><snippet>Counter</snippet></ROW><ROW><id>21094039</id><snippet>else</snippet></ROW><ROW><id>21094039</id><snippet>itertuples</snippet></ROW><ROW><id>21094039</id><snippet>if</snippet></ROW><ROW><id>21094039</id><snippet>df</snippet></ROW><ROW><id>21094039</id><snippet>keeper_rows</snippet></ROW><ROW><id>21094039</id><snippet>keeper_rows = df.ix[[i for i,x in enumerate(df.itertuples()) if 'GE' in x[0:2]]]
for row_as_tuple in df.itertuples():
    from_other, to_other, val = row_as_tuple
    if "GE" not in (from_other, to_other):
        new_rows = {"From":["GE", from_other], 
                    "To"  :[to_other, "GE"], 
                    "Val" :[val, val]}
        keeper_rows = pandas.concat([keeper_rows, pandas.DataFrame(new_rows)], 
                                    ignore_index=True)
</snippet></ROW><ROW><id>21094355</id><snippet>unsigned char</snippet></ROW><ROW><id>21094355</id><snippet>red</snippet></ROW><ROW><id>21094355</id><snippet>red = 255
red = red*127/255 + 128
</snippet></ROW><ROW><id>21094355</id><snippet>0</snippet></ROW><ROW><id>21094355</id><snippet>red = red*127/255 + 128 = (255*127 modulo 255) / 255 + 128 = 0 /255 + 128 = 128</snippet></ROW><ROW><id>21094355</id><snippet>red</snippet></ROW><ROW><id>21094355</id><snippet>red = (float)red * 127 / 255
</snippet></ROW><ROW><id>21094355</id><snippet>red</snippet></ROW><ROW><id>21094355</id><snippet>cv::Mat</snippet></ROW><ROW><id>21094355</id><snippet>CV_8U</snippet></ROW><ROW><id>21094355</id><snippet>CV_32F</snippet></ROW><ROW><id>21094355</id><snippet> Mat red_float;   
 red.convertTo(red_float,CV_32F);
 red_float = red_float*RMAX/255+128;
 red_float.convertTo(red,CV_8U);
</snippet></ROW><ROW><id>21094393</id><snippet>csv</snippet></ROW><ROW><id>21094393</id><snippet>import csv

sourceCode = urllib2.urlopen('http://coinmarketcap.com').read() 
mcapUSD = sourceCode.split('&lt;strong&gt;Total Market Cap: &lt;span id="total-marketcap" data-usd="')[1].split('"')[0]
mcap = float(mcapUSD.replace(',','')

# read previous value from the CSV first
with open('mcapdata.csv', 'rb') as infh:
    last = None
    for row in csv.reader(infh):
        last = row[1]  # second column

# Now calculate the log value based on the last value
logRe = log(mcap/float(last))

# write new values
with open(mcapdata.csv', 'ab') as outfh:
    date = strftime('%d %b %Y %H:%M:%S', gmtime())
    csv.writer(outfh).writerow([date, mcap, logRe])
</snippet></ROW><ROW><id>21094393</id><snippet>mcapdata.csv</snippet></ROW><ROW><id>21094452</id><snippet>ListedColormap</snippet></ROW><ROW><id>21094452</id><snippet>my_cmap = matplotlib.colors.ListedColormap(my_rgb, name='my_name')
</snippet></ROW><ROW><id>21094589</id><snippet>def handele_noargs(self, **options):
</snippet></ROW><ROW><id>21094589</id><snippet>def handle_noargs(self, **options):
</snippet></ROW><ROW><id>21094589</id><snippet>@Override</snippet></ROW><ROW><id>21094614</id><snippet>from rest_framework import permissions


class IsOwner(permissions.BasePermission):
    def has_object_permission(self, request, view, obj):
        return obj.user == request.user
</snippet></ROW><ROW><id>21094614</id><snippet>ToDoResponder</snippet></ROW><ROW><id>21094614</id><snippet>permission_classes = (IsAuthenticated, IsOwner)
</snippet></ROW><ROW><id>21094614</id><snippet>ToDoResponder</snippet></ROW><ROW><id>21094614</id><snippet>def pre_save(self, obj):
    obj.user = self.request.user
    super(ToDoResponder, self).pre_save(obj)
</snippet></ROW><ROW><id>21094656</id><snippet>itertools.permutations</snippet></ROW><ROW><id>21094656</id><snippet>&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt; 
&gt;&gt;&gt; l = ["A","B","C"]
&gt;&gt;&gt; 
&gt;&gt;&gt; list(permutations(l))
[('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'), ('C', 'A', 'B'), ('C', 'B', 'A')]
</snippet></ROW><ROW><id>21094905</id><snippet>x=5</snippet></ROW><ROW><id>21094905</id><snippet>Start &gt; All programs &gt; Enthought Canopy &gt; Canopy Command Prompt</snippet></ROW><ROW><id>21094905</id><snippet>python</snippet></ROW><ROW><id>21094905</id><snippet>C:\Users\jrocher\&gt; python
Enthought Canopy Python 2.7.3 | 32-bit | (default, Dec  2 2013, 16:14:17) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21094976</id><snippet>markers_on</snippet></ROW><ROW><id>21094976</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.array([1,2,3,4,5])
&gt;&gt;&gt; b = np.array([True,False,False,True,False]) # this is your boolean data array
&gt;&gt;&gt; markers_on = x[~b]
&gt;&gt;&gt; markers_on
array([2, 3, 5])
</snippet></ROW><ROW><id>21095093</id><snippet>requests</snippet></ROW><ROW><id>21095093</id><snippet>import requests

r = requests.get(the_api_url)
MyModel(**r.json())
</snippet></ROW><ROW><id>21095093</id><snippet>data = json.loads(response.body)</snippet></ROW><ROW><id>21095093</id><snippet>m = MyModel()
m.field_a = value_a
m.save()

# you can also pass in the field values when you initialise
m = MyModel(field_a=value_a)
m.save()
</snippet></ROW><ROW><id>21095093</id><snippet>m = MyModel.objects.create(field_a=value_a)
# no need to save, it's already created in db
</snippet></ROW><ROW><id>21095101</id><snippet>if not os.path.exists(somepath):
    # if here current thread is stopped and the same dir is created in other thread
    # the next line will raise an exception
    os.makedirs(somepath) 
</snippet></ROW><ROW><id>21095184</id><snippet>O</snippet></ROW><ROW><id>21095184</id><snippet>o</snippet></ROW><ROW><id>21095184</id><snippet>'O'</snippet></ROW><ROW><id>21095184</id><snippet>for letter in lst:
    if letter not in encode:
        raise KeyError("Sorry i don't know how to encode this letter!")
    encodedMsg.append(encode[letter.upper()])
</snippet></ROW><ROW><id>21095261</id><snippet>from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver

@receiver(post_save)
def do_your_thing(sender, **kwargs):
    if sender is User:
        if kwargs["created"]:
            print kwargs["instance"].password
            # do your thing
</snippet></ROW><ROW><id>21095309</id><snippet>def recurseDict(nested_dict):
    output = []

    for key, value in nested_dict.iteritems():
        if isinstance(value,dict):
            output = output + recurseDict(value)
        else:
            # Do whatever you want here, I'll just add the values to a list
            output.append(nested_dict[key])
    return output
</snippet></ROW><ROW><id>21095309</id><snippet>In [28]: a = {'blue': 4, 'green': {'yellow': {'black': 16}}, 'red': 3}

In [29]: recurseDict(a)
Out[29]: [4, 16, 3]
</snippet></ROW><ROW><id>21095731</id><snippet>NoneType</snippet></ROW><ROW><id>21095731</id><snippet>None</snippet></ROW><ROW><id>21095731</id><snippet>None</snippet></ROW><ROW><id>21095731</id><snippet>send_command(child, SNMPGROUPCMD + group + V3PRIVCMD)
</snippet></ROW><ROW><id>21095731</id><snippet>group</snippet></ROW><ROW><id>21095731</id><snippet>SNMPGROUPCMD</snippet></ROW><ROW><id>21095731</id><snippet>V3PRIVCMD</snippet></ROW><ROW><id>21095731</id><snippet>None</snippet></ROW><ROW><id>21095734</id><snippet>&gt;&gt;&gt; session = requests.Session()
&gt;&gt;&gt; # get the cookie
&gt;&gt;&gt; resp = session.get(url)
&gt;&gt;&gt; # post data with csrf header using the cookie value
&gt;&gt;&gt; resp = session.post(url, data=data, headers={"X-CSRFToken": resp.cookies['csrftoken'])
</snippet></ROW><ROW><id>21095877</id><snippet>func()</snippet></ROW><ROW><id>21095877</id><snippet>func()</snippet></ROW><ROW><id>21095877</id><snippet>func()</snippet></ROW><ROW><id>21095877</id><snippet>func()</snippet></ROW><ROW><id>21096046</id><snippet>allow</snippet></ROW><ROW><id>21096046</id><snippet>SgmlLinkExtractor</snippet></ROW><ROW><id>21096046</id><snippet>allow=(re.escape("index.php?pg=search&amp;from=10&amp;q=*:*&amp;nr=10"))</snippet></ROW><ROW><id>21096046</id><snippet>import re</snippet></ROW><ROW><id>21096046</id><snippet>allow=('index.php')</snippet></ROW><ROW><id>21096308</id><snippet>re.search</snippet></ROW><ROW><id>21096308</id><snippet>re.search(pattern, string, flags=0)
</snippet></ROW><ROW><id>21096308</id><snippet>import re
my_text = "[abc"
if re.search("a", my_text):
    print "found!"
</snippet></ROW><ROW><id>21096308</id><snippet>in</snippet></ROW><ROW><id>21096308</id><snippet>print "fourth" in "thefourtheye"  # True
</snippet></ROW><ROW><id>21096408</id><snippet>sys.modules['os']</snippet></ROW><ROW><id>21096408</id><snippet>OSMOD</snippet></ROW><ROW><id>21096408</id><snippet>import os as OSMOD</snippet></ROW><ROW><id>21096408</id><snippet>os</snippet></ROW><ROW><id>21096408</id><snippet>sys.modules</snippet></ROW><ROW><id>21096408</id><snippet>as OSMOD</snippet></ROW><ROW><id>21096408</id><snippet>OSMOD</snippet></ROW><ROW><id>21096408</id><snippet>import os</snippet></ROW><ROW><id>21096408</id><snippet>os</snippet></ROW><ROW><id>21096408</id><snippet>os = OSMOD
</snippet></ROW><ROW><id>21096408</id><snippet>os</snippet></ROW><ROW><id>21096408</id><snippet>os = 'Ozzy Santana'
import os as OSMOD
</snippet></ROW><ROW><id>21096408</id><snippet>os</snippet></ROW><ROW><id>21096408</id><snippet>import os</snippet></ROW><ROW><id>21096408</id><snippet>os</snippet></ROW><ROW><id>21096408</id><snippet>os</snippet></ROW><ROW><id>21096467</id><snippet>self.connect(editor, SIGNAL("returnPressed()"),
                 self.commitAndCloseEditor)
</snippet></ROW><ROW><id>21096467</id><snippet>connect</snippet></ROW><ROW><id>21096467</id><snippet>SIGNAL</snippet></ROW><ROW><id>21096467</id><snippet>returnPressed</snippet></ROW><ROW><id>21096467</id><snippet>SLOT</snippet></ROW><ROW><id>21096467</id><snippet>commitAndCloseEditor</snippet></ROW><ROW><id>21096467</id><snippet>commitAndCloseEditor</snippet></ROW><ROW><id>21096738</id><snippet>randint()</snippet></ROW><ROW><id>21096738</id><snippet>__init__</snippet></ROW><ROW><id>21096738</id><snippet>class Sample_stats:
    def __init__(self):
        self.ts = datetime.now()
        self.total = randint(10,10000)
        self.seed = randint(5,5000)
        self.post_id = randint(0,100)
        self.site_id = 1
        self.twitter = randint(5,5000)
        self.facebook = randint(5,5000)
        self.gplus = randint(5,5000)
        self.pinterest = randint(5,5000)
        self.clicks = randint(5,5000)
        self.subpage_id = 1
        self.mouse_overs = randint(5,5000)
        self.impressions = randint(5,5000)
</snippet></ROW><ROW><id>21096738</id><snippet>Sample_stats()</snippet></ROW><ROW><id>21096776</id><snippet>parse</snippet></ROW><ROW><id>21096776</id><snippet>CrawlSpider</snippet></ROW><ROW><id>21096776</id><snippet>Rule</snippet></ROW><ROW><id>21096923</id><snippet>In [11]: df = read_csv(StringIO(data),sep='|')
</snippet></ROW><ROW><id>21096923</id><snippet>In [12]: df['exchtime'] = pd.to_datetime(df['exchtime'],unit='s')

In [13]: df
Out[13]: 
                    exchtime     bid     ask
0 2014-01-08 11:00:14.587758  520.00  541.00
1 2014-01-08 11:00:30.462050  540.43  540.87
2 2014-01-08 11:00:30.462050  540.43  540.87
3 2014-01-08 11:00:30.468602  540.43  540.86
4 2014-01-08 11:00:30.468602  540.43  540.86
5 2014-01-08 11:00:47.675000  540.43  540.85
6 2014-01-08 11:00:47.675000  540.43  540.85
7 2014-01-08 11:00:47.735410  540.43  540.84
8 2014-01-08 11:00:47.735410  540.43  540.84

[9 rows x 3 columns]
</snippet></ROW><ROW><id>21096923</id><snippet>In [15]: df['spread'] = df.ask-df.bid
</snippet></ROW><ROW><id>21096923</id><snippet>In [16]: df.set_index('exchtime').resample('1s',how=np.max)
Out[16]: 
                        bid     ask  spread
exchtime                                   
2014-01-08 11:00:14  520.00  541.00   21.00
2014-01-08 11:00:15     NaN     NaN     NaN
2014-01-08 11:00:16     NaN     NaN     NaN
2014-01-08 11:00:17     NaN     NaN     NaN
2014-01-08 11:00:18     NaN     NaN     NaN
2014-01-08 11:00:19     NaN     NaN     NaN
2014-01-08 11:00:20     NaN     NaN     NaN
2014-01-08 11:00:21     NaN     NaN     NaN
2014-01-08 11:00:22     NaN     NaN     NaN
2014-01-08 11:00:23     NaN     NaN     NaN
2014-01-08 11:00:24     NaN     NaN     NaN
2014-01-08 11:00:25     NaN     NaN     NaN
2014-01-08 11:00:26     NaN     NaN     NaN
2014-01-08 11:00:27     NaN     NaN     NaN
2014-01-08 11:00:28     NaN     NaN     NaN
2014-01-08 11:00:29     NaN     NaN     NaN
2014-01-08 11:00:30  540.43  540.87    0.44
2014-01-08 11:00:31     NaN     NaN     NaN
2014-01-08 11:00:32     NaN     NaN     NaN
2014-01-08 11:00:33     NaN     NaN     NaN
2014-01-08 11:00:34     NaN     NaN     NaN
2014-01-08 11:00:35     NaN     NaN     NaN
2014-01-08 11:00:36     NaN     NaN     NaN
2014-01-08 11:00:37     NaN     NaN     NaN
2014-01-08 11:00:38     NaN     NaN     NaN
2014-01-08 11:00:39     NaN     NaN     NaN
2014-01-08 11:00:40     NaN     NaN     NaN
2014-01-08 11:00:41     NaN     NaN     NaN
2014-01-08 11:00:42     NaN     NaN     NaN
2014-01-08 11:00:43     NaN     NaN     NaN
2014-01-08 11:00:44     NaN     NaN     NaN
2014-01-08 11:00:45     NaN     NaN     NaN
2014-01-08 11:00:46     NaN     NaN     NaN
2014-01-08 11:00:47  540.43  540.85    0.42

[34 rows x 3 columns]
</snippet></ROW><ROW><id>21096923</id><snippet>In [10]: df = DataFrame(np.random.randn(100000,2),index=date_range('20130101',periods=100000,freq='50U'))

In [7]: def f1(df):
   ...:     df = df.copy()
   ...:     df['seconds'] = [ e.replace(microsecond=0) for e in df.index ]
   ...:     df.groupby('seconds')[0].agg(np.max)
   ...:     

In [11]: def f2(df):
   ....:     df = df.copy()
   ....:     df.resample('1s',how=np.max)
   ....:     

In [8]: %timeit f1(df)
1 loops, best of 3: 692 ms per loop

In [12]: %timeit f2(df)
100 loops, best of 3: 2.36 ms per loop
</snippet></ROW><ROW><id>21096923</id><snippet>In [9]: df = DataFrame(np.random.randn(100000,2),index=date_range('20130101',periods=100000,freq='50L'))

In [10]: df.groupby(pd.TimeGrouper('1s'))[0].ohlc()
Out[10]: 
In [11]: %timeit df.groupby(pd.TimeGrouper('1s'))[0].ohlc()
1000 loops, best of 3: 1.2 ms per loop
</snippet></ROW><ROW><id>21097220</id><snippet>&gt;&gt;&gt; range(0, len(data), 2)
[0, 2, 4, 6, 8]
</snippet></ROW><ROW><id>21097220</id><snippet>numpy</snippet></ROW><ROW><id>21097220</id><snippet>mean</snippet></ROW><ROW><id>21097220</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; window_size = 4
&gt;&gt;&gt; stride = 2
&gt;&gt;&gt; window_avg = [ np.mean(data[i:i+window_size]) for i in range(0, len(data), stride)
                   if i+window_size &lt;= len(data) ]
&gt;&gt;&gt; window_avg
[2.5, 4.5, 6.5, 8.5]
</snippet></ROW><ROW><id>21097220</id><snippet>window_size</snippet></ROW><ROW><id>21097220</id><snippet>In [5]: window_size = 450
In [6]: data = range(70000)
In [7]: stride = 30
In [8]: timeit [ np.mean(data[i:i+window_size]) for i in range(0, len(data), stride)
                 if i+window_size &lt;= len(data) ]
1 loops, best of 3: 220 ms per loop
</snippet></ROW><ROW><id>21097220</id><snippet>itertools</snippet></ROW><ROW><id>21097220</id><snippet>In [9]: timeit map(np.mean, izip(*(islice(it, i, None, stride) for i, it in enumerate(tee(data, window_size)))))
1 loops, best of 3: 436 ms per loop
</snippet></ROW><ROW><id>21097445</id><snippet>&gt;&gt;&gt; a = sel.xpath('//div[@class="result-item-header"]//h2/a')
&gt;&gt;&gt; a.xpath('text()').extract()
[u'Service Desk Engineer (Unified C...', u'Virtualisatie specialist', 
                          u'Medior beheerder ICT', ... ]
&gt;&gt;&gt; a.xpath('@href').extract()
[u'http://www.itbanen.nl/vacature/topbaan/3030450/Service+Desk+Engineer+%28Unified+Communications%29', 
 u'http://www.itbanen.nl/vacature/topbaan/3025022/Virtualisatie+specialist', 
 u'http://www.itbanen.nl/vacature/3043979/Medior+beheerder+ICT/0', 
 ...]
</snippet></ROW><ROW><id>21097445</id><snippet>for link in a.xpath('@href').extract():
    yield Request(link, callback=self.parse_category)
</snippet></ROW><ROW><id>21097460</id><snippet>def retrying(max_attempts, func, *args, **kwargs):
  attempts_left = max_attempts
  while attempts_left:  # could be 'while True', but an extra check won't hurt
    try:
      return func(*args, **kwargs)
    except SomeException:
      attempts_left -= 1
      if not attempts_left:
        raise
</snippet></ROW><ROW><id>21097460</id><snippet>SomeException</snippet></ROW><ROW><id>21097460</id><snippet>Exception</snippet></ROW><ROW><id>21097460</id><snippet>raise</snippet></ROW><ROW><id>21097460</id><snippet>func</snippet></ROW><ROW><id>21097460</id><snippet>retrying(3, foo, 1, b=2)</snippet></ROW><ROW><id>21097460</id><snippet>foo(1, b=2)</snippet></ROW><ROW><id>21097555</id><snippet>requests</snippet></ROW><ROW><id>21097555</id><snippet>for url in list_of_urls:
    r = requests.get(url)
    print r.headers
</snippet></ROW><ROW><id>21097555</id><snippet>argparser</snippet></ROW><ROW><id>21097807</id><snippet>request</snippet></ROW><ROW><id>21097807</id><snippet>In [6]: dis.dis(test_first)
  2           0 LOAD_GLOBAL              0 (request) 
              3 LOAD_ATTR                1 (session) 
              6 STORE_FAST               0 (session) 

  3           9 LOAD_CONST               1 (1) 
             12 LOAD_FAST                0 (session) 
             15 LOAD_CONST               2 ('v1') 
             18 STORE_SUBSCR         

  4          19 LOAD_CONST               3 (2) 
             22 LOAD_FAST                0 (session) 
             25 LOAD_CONST               4 ('v2') 
             28 STORE_SUBSCR         

  5          29 LOAD_CONST               5 (3) 
             32 LOAD_FAST                0 (session) 
             35 LOAD_CONST               4 ('v2') 
             38 STORE_SUBSCR         

  6          39 LOAD_FAST                0 (session) 
             42 LOAD_CONST               2 ('v1') 
             45 BINARY_SUBSCR        
             46 LOAD_CONST               1 (1) 
             49 COMPARE_OP               2 (==) 
             52 POP_JUMP_IF_FALSE       68 

  7          55 LOAD_CONST               6 (4) 
             58 LOAD_FAST                0 (session) 
             61 LOAD_CONST               7 ('v4') 
             64 STORE_SUBSCR         
             65 JUMP_FORWARD             0 (to 68) 
        &gt;&gt;   68 LOAD_CONST               0 (None) 
             71 RETURN_VALUE   
</snippet></ROW><ROW><id>21097807</id><snippet>In [7]: dis.dis(test_second)
  2           0 LOAD_CONST               1 (1) 
              3 LOAD_GLOBAL              0 (request) 
              6 LOAD_ATTR                1 (session) 
              9 LOAD_CONST               2 ('v1') 
             12 STORE_SUBSCR         

  3          13 LOAD_CONST               3 (2) 
             16 LOAD_GLOBAL              0 (request) 
             19 LOAD_ATTR                1 (session) 
             22 LOAD_CONST               4 ('v2') 
             25 STORE_SUBSCR         

  4          26 LOAD_CONST               5 (3) 
             29 LOAD_GLOBAL              0 (request) 
             32 LOAD_ATTR                1 (session) 
             35 LOAD_CONST               4 ('v2') 
             38 STORE_SUBSCR         

  5          39 LOAD_GLOBAL              0 (request) 
             42 LOAD_ATTR                1 (session) 
             45 LOAD_CONST               2 ('v1') 
             48 BINARY_SUBSCR        
             49 LOAD_CONST               1 (1) 
             52 COMPARE_OP               2 (==) 
             55 POP_JUMP_IF_FALSE       74 

  6          58 LOAD_CONST               6 (4) 
             61 LOAD_GLOBAL              0 (request) 
             64 LOAD_ATTR                1 (session) 
             67 LOAD_CONST               7 ('v4') 
             70 STORE_SUBSCR         
             71 JUMP_FORWARD             0 (to 74) 
        &gt;&gt;   74 LOAD_CONST               0 (None) 
             77 RETURN_VALUE  
</snippet></ROW><ROW><id>21097807</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>21097807</id><snippet>LOAD_ATTR</snippet></ROW><ROW><id>21097807</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>21097807</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>21097807</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>21097807</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>21097807</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>21097807</id><snippet>LOAD_ATTR</snippet></ROW><ROW><id>21097807</id><snippet>In [8]: %timeit test_first()
1000000 loops, best of 3: 343 ns per loop

In [9]: %timeit test_second()
1000000 loops, best of 3: 542 ns per loop
</snippet></ROW><ROW><id>21097807</id><snippet>request</snippet></ROW><ROW><id>21097838</id><snippet>plt.Polygon</snippet></ROW><ROW><id>21097838</id><snippet>xs = list(np.hstack((np.array(a), dx, np.array(b))))
ys = list(np.hstack((np.array(0), mlab.normpdf(dx, 0, 1), np.array(0))))
xy = zip(xs,ys)
ax.add_patch(plt.Polygon(xy))
</snippet></ROW><ROW><id>21097844</id><snippet>get_absolute_url</snippet></ROW><ROW><id>21097844</id><snippet>object-tools</snippet></ROW><ROW><id>21097844</id><snippet>{% extends "admin/change_form.html" %}

{% block object-tools %}
{% if change %}{% if not is_popup %}
  &lt;ul class="object-tools"&gt;
    {% block object-tools-items %}
    &lt;li&gt;
        {% url opts|admin_urlname:'history' original.pk|admin_urlquote as history_url %}
        &lt;a href="{% add_preserved_filters history_url %}" class="historylink"&gt;{% trans "History" %}&lt;/a&gt;
    &lt;/li&gt;
    {% if has_absolute_url %}&lt;li&gt;&lt;a href="{% url 'your-custom-view-here' original.pk %}" class="viewsitelink"&gt;{% trans "View on site" %}&lt;/a&gt;&lt;/li&gt;{% endif%}
    {% endblock %}
  &lt;/ul&gt;
{% endif %}{% endif %}
{% endblock %}
</snippet></ROW><ROW><id>21097844</id><snippet>templates/admin/photologue/&lt;modelnamehere&gt;/change_form.html</snippet></ROW><ROW><id>21097844</id><snippet>&lt;modelnamehere&gt;</snippet></ROW><ROW><id>21097844</id><snippet>view_on_site</snippet></ROW><ROW><id>21098122</id><snippet>    linux-vdso.so.1 =&gt;  (0x00007fffd1f0b000)
    libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f414c44e000)
    libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f414c24a000)
    libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f414c02c000)
    librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007f414be24000)
    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f414ba5c000)
    /lib64/ld-linux-x86-64.so.2 (0x00007f414cac4000)
</snippet></ROW><ROW><id>21098145</id><snippet>[t[1] for t in inputlist]
</snippet></ROW><ROW><id>21098145</id><snippet>from operator import itemgetter

map(itemgetter(1), inputlist)
</snippet></ROW><ROW><id>21098145</id><snippet>-1</snippet></ROW><ROW><id>21098145</id><snippet>[t[-1] for t in inputlist]
</snippet></ROW><ROW><id>21098145</id><snippet>[item for ratio, item in inputlist]
</snippet></ROW><ROW><id>21098145</id><snippet>zip()</snippet></ROW><ROW><id>21098145</id><snippet>zip(*inputlist)[-1]
</snippet></ROW><ROW><id>21098145</id><snippet>&gt;&gt;&gt; inputlist = [(0.2, 'Item1'), (0.25, 'Item2'), (0.23, 'Item3')]
&gt;&gt;&gt; [t[1] for t in inputlist]
['Item1', 'Item2', 'Item3']
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; map(itemgetter(1), inputlist)
['Item1', 'Item2', 'Item3']
&gt;&gt;&gt; [t[-1] for t in inputlist]
['Item1', 'Item2', 'Item3']
&gt;&gt;&gt; [item for ratio, item in inputlist]
['Item1', 'Item2', 'Item3']
&gt;&gt;&gt; zip(*inputlist)[-1]
('Item1', 'Item2', 'Item3')
</snippet></ROW><ROW><id>21098251</id><snippet>match_obj</snippet></ROW><ROW><id>21098251</id><snippet>None</snippet></ROW><ROW><id>21098251</id><snippet>which_word_matched = match_obj.group() if match_obj else ''
</snippet></ROW><ROW><id>21098360</id><snippet>zip()</snippet></ROW><ROW><id>21098360</id><snippet>for x, y in zip(a, b):
</snippet></ROW><ROW><id>21098360</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [4,5,6]
&gt;&gt;&gt; for x, y in zip(a, b):
...     print x, y
... 
1 4
2 5
3 6
</snippet></ROW><ROW><id>21098415</id><snippet>precision</snippet></ROW><ROW><id>21098415</id><snippet>&gt;&gt;&gt; '{text:{fill}{align}{width}.{precision}}'.format(text = 'abcdef', width=8, fill = '~', align = '^', precision = 4)
'~~abcd~~'
&gt;&gt;&gt; '{num:{fill}{align}{width}.{precision}{type}}'.format(num = 12.34, width=12, fill = '~', align = '^', type = 'f', precision = 4)
'~~12.3400~~~'
</snippet></ROW><ROW><id>21098415</id><snippet>width</snippet></ROW><ROW><id>21098415</id><snippet>precision</snippet></ROW><ROW><id>21098504</id><snippet>flatMap</snippet></ROW><ROW><id>21098504</id><snippet>flatMap</snippet></ROW><ROW><id>21098504</id><snippet>&gt;&gt;&gt; words = sc.textFile("README.md")
&gt;&gt;&gt; def mapper(line):
...     return ((word, 1) for word in line.split())
...
&gt;&gt;&gt; words.flatMap(mapper).take(4)
[(u'#', 1), (u'Apache', 1), (u'Spark', 1), (u'Lightning-Fast', 1)]
&gt;&gt;&gt; counts = words.flatMap(mapper).reduceByKey(lambda x, y: x + y)
&gt;&gt;&gt; counts.take(5)
[(u'all', 1), (u'help', 1), (u'webpage', 1), (u'when', 1), (u'Hadoop', 12)]
</snippet></ROW><ROW><id>21098504</id><snippet>&gt;&gt;&gt; words = sc.textFile("README.md")
&gt;&gt;&gt; def mapper(line):
...     for word in line.split():
...         yield (word, 1)
...
&gt;&gt;&gt; words.flatMap(mapper).take(4)
[(u'#', 1), (u'Apache', 1), (u'Spark', 1), (u'Lightning-Fast', 1)]
&gt;&gt;&gt; counts = words.flatMap(mapper).reduceByKey(lambda x, y: x + y)
&gt;&gt;&gt; counts.take(5)
[(u'all', 1), (u'help', 1), (u'webpage', 1), (u'when', 1), (u'Hadoop', 12)]
</snippet></ROW><ROW><id>21098504</id><snippet>flatMap</snippet></ROW><ROW><id>21098504</id><snippet>[key, value, key, value, ...]</snippet></ROW><ROW><id>21098504</id><snippet>[(key, value), (key, value)...]</snippet></ROW><ROW><id>21098709</id><snippet>join</snippet></ROW><ROW><id>21098709</id><snippet>row</snippet></ROW><ROW><id>21098709</id><snippet>print " ".join(row)</snippet></ROW><ROW><id>21098739</id><snippet>values = relationship(SensorValue, backref=backref('sensor_value', order_by='sensor_value.datetime'))
</snippet></ROW><ROW><id>21098739</id><snippet>values = relationship(SensorValue, backref=backref('sensor_value', order_by='SensorValue.datetime'))
</snippet></ROW><ROW><id>21098821</id><snippet>a = [1]</snippet></ROW><ROW><id>21098821</id><snippet>a</snippet></ROW><ROW><id>21098821</id><snippet>a</snippet></ROW><ROW><id>21098821</id><snippet>a</snippet></ROW><ROW><id>21098821</id><snippet>def x():
    global a
    a = [1]
</snippet></ROW><ROW><id>21098821</id><snippet>a</snippet></ROW><ROW><id>21098821</id><snippet>x()</snippet></ROW><ROW><id>21099240</id><snippet>def validate_input(val, min_v=100, max_v=500):
    try:
        val = float(val)
    except ValueError:
        print("Not a valid entry")
    else:
        if not min_v &lt; val &lt;= max_v:
            print("Value should be between {} and {}".format(min_v, max_v))
        else:
            return val
    return False
</snippet></ROW><ROW><id>21099240</id><snippet>while True:
    val = input("...")
    if val in valid_help_string_list:
        # print help
    else:
        val = validate_input(val)
        if val:
            break
# use val
</snippet></ROW><ROW><id>21099240</id><snippet>validate_input</snippet></ROW><ROW><id>21099240</id><snippet>False</snippet></ROW><ROW><id>21099240</id><snippet>0</snippet></ROW><ROW><id>21099240</id><snippet>False</snippet></ROW><ROW><id>21099240</id><snippet>break</snippet></ROW><ROW><id>21099240</id><snippet>min_v &gt;= 0</snippet></ROW><ROW><id>21099547</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; llist = ['a','b','c','b','e','a','f','e','f','e','e','e','a']
&gt;&gt;&gt; c = Counter(llist)
&gt;&gt;&gt; for i,j in c.most_common():
...     print j,i
...
5 e
3 a
2 b
2 f
1 c
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21099547</id><snippet>collections.Counter.most_common</snippet></ROW><ROW><id>21099641</id><snippet>lru_cache</snippet></ROW><ROW><id>21099641</id><snippet>@lru_cache(maxsize=None)
def factorial( n ):
   ...
</snippet></ROW><ROW><id>21099819</id><snippet>"\"</snippet></ROW><ROW><id>21099819</id><snippet>"/"</snippet></ROW><ROW><id>21099819</id><snippet>"\"</snippet></ROW><ROW><id>21099819</id><snippet>"\t"</snippet></ROW><ROW><id>21099819</id><snippet>"\"</snippet></ROW><ROW><id>21099819</id><snippet>"t"</snippet></ROW><ROW><id>21099819</id><snippet>&lt;tab&gt;</snippet></ROW><ROW><id>21099819</id><snippet>"\\t"</snippet></ROW><ROW><id>21099819</id><snippet>"\t"</snippet></ROW><ROW><id>21099819</id><snippet>"\\Documents\\CelestialData.csv"</snippet></ROW><ROW><id>21099819</id><snippet>"\Documents\CelestialData.csv"</snippet></ROW><ROW><id>21099819</id><snippet>r</snippet></ROW><ROW><id>21099819</id><snippet>"\"</snippet></ROW><ROW><id>21099819</id><snippet>r"\Documents\CelestialData.csv"</snippet></ROW><ROW><id>21099927</id><snippet>Fx['File']</snippet></ROW><ROW><id>21099927</id><snippet>str(Fx['Date'])</snippet></ROW><ROW><id>21099927</id><snippet>str</snippet></ROW><ROW><id>21099927</id><snippet>Fx['Date']</snippet></ROW><ROW><id>21099927</id><snippet>&gt;&gt;&gt; Fx['File'] + " " + Fx['Date'].apply(str)
0    hello 2014-01-02 00:00:00
1     what 2014-01-02 00:00:00
</snippet></ROW><ROW><id>21100030</id><snippet>identN</snippet></ROW><ROW><id>21100030</id><snippet>'|'.join</snippet></ROW><ROW><id>21100030</id><snippet>subidents = [
    r"[a-zA-Z_] \w*",
    r"'[a-zA-Z_] \w* '",
    r"\"[a-zA-Z_] \w* \"",
    r"`[a-zA-Z_] \w* `",
    ]
ident = "(?:%s)" % '|'.join(subidents)
</snippet></ROW><ROW><id>21100045</id><snippet>dict</snippet></ROW><ROW><id>21100045</id><snippet>objectName</snippet></ROW><ROW><id>21100045</id><snippet>    def saveSettings(self):
        settings = {}
        for child in self.settingsParent.children():
            name = child.objectName()
            if not name:
                continue
            if isinstance(child, QtGui.QCheckBox):
                settings[name] = child.isChecked()
            elif isinstance(child, QtGui.QComboBox):
                settings[name] = child.currentIndex()
            ...
        return settings

    def restoreSettings(self, settings):
        for child in self.settingsParent.children():
            name = child.objectName()
            if name not in settings:
                continue
            if isinstance(child, QtGui.QCheckBox):
                child.setChecked(settings[name])
            elif isinstance(child, QtGui.QComboBox):
                child.setCurrentIndex(settings[name])
            ...
</snippet></ROW><ROW><id>21100045</id><snippet>    settings = self.saveSettings()
    item.setData(0, QtCore.Qt.UserRole, settings)
</snippet></ROW><ROW><id>21100045</id><snippet>    settings = item.data(0, QtCore.Qt.UserRole)
    self.restoreSettings(settings)
</snippet></ROW><ROW><id>21100045</id><snippet>data</snippet></ROW><ROW><id>21100045</id><snippet>QVariant</snippet></ROW><ROW><id>21100045</id><snippet>dict</snippet></ROW><ROW><id>21100045</id><snippet>dict</snippet></ROW><ROW><id>21100045</id><snippet>    settings = item.data(0, Qt.QtCore.Qt.UserRole).toPyObject()
</snippet></ROW><ROW><id>21100045</id><snippet>QVariant</snippet></ROW><ROW><id>21100045</id><snippet>    import sip
    sip.setapi('QVariant', 2)
    from PyQt4 import ... etc
</snippet></ROW><ROW><id>21100062</id><snippet>from distutils.core import setup
import py2exe

# Change the path in the following line for webdriver.xpi
data_files = [('selenium/webdriver/firefox', ['D:/Python27/Lib/site-packages/selenium/webdriver/firefox/webdriver.xpi'])]

setup(
    name='General name of app',
    version='1.0',
    description='General description of app',
    author='author name',
    author_email='author email',
    url='',
    windows=[{'script': 'abc.py'}],   # the main py file
    data_files=data_files,
    options={
        'py2exe':
            {
                'skip_archive': True,
                'optimize': 2,
            }
    }
)
</snippet></ROW><ROW><id>21100207</id><snippet>END = object()
while data:
    index = min_(data)
    key, value = data.pop(index)
    yield key
    key = next(value, END)
    if key is not END:
        data.append((key, value))
</snippet></ROW><ROW><id>21100207</id><snippet>min_</snippet></ROW><ROW><id>21100207</id><snippet>data.remove(data[index])</snippet></ROW><ROW><id>21100207</id><snippet>pop</snippet></ROW><ROW><id>21100273</id><snippet>tempfile.NamedTemporaryFile()</snippet></ROW><ROW><id>21100273</id><snippet>'w+b'</snippet></ROW><ROW><id>21100273</id><snippet>f = tempfile.NamedTemporaryFile(mode='w+', delete=False, dir=target_dir)
</snippet></ROW><ROW><id>21100273</id><snippet>dw.writerow()</snippet></ROW><ROW><id>21100273</id><snippet>str</snippet></ROW><ROW><id>21100273</id><snippet>bytes</snippet></ROW><ROW><id>21100545</id><snippet>app</snippet></ROW><ROW><id>21100545</id><snippet>refresher</snippet></ROW><ROW><id>21100545</id><snippet>def refresher(frame):
    frame.getXML()# I Don`t know what do this function, just an example
    frame.after(1000,refresher,frame)

main = tk.Tk()
main.wm_title("Readdit")
# main.geometry("350x400")
app = Application(master=main)
# Begins the applications GUI loop
# app.__init__()
refresher(app) #use app here
app.mainloop()
</snippet></ROW><ROW><id>21100929</id><snippet>eval()</snippet></ROW><ROW><id>21100929</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>21100929</id><snippet>main()</snippet></ROW><ROW><id>21100929</id><snippet>eval()</snippet></ROW><ROW><id>21100929</id><snippet>exec()</snippet></ROW><ROW><id>21100929</id><snippet>main(#REPLACE_THIS#)
</snippet></ROW><ROW><id>21100929</id><snippet>import string
def exec_with_args(exec_string,args):
    arg_string=reduce(lambda x,y:x+','+y,args)
    exec_string.replace("#REPLACE_THIS#", arg_string)
</snippet></ROW><ROW><id>21100929</id><snippet> import subprocess
 #Write string to a file
 exec_file=open("file_to_execute","w")
 exec_file.write(string_to_execute)
 #Run the python file as a separate process
 output=subprocess.Popen(["python","file_to_execute"].extend(argument_list),
     stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>21100929</id><snippet>def function_name(*args):
    import sys

    def a(x,y):
        return x

    def b(y):
        return y

    def inner_main(x,y):
        lambda x,y: a(b(y),a(x,y))

    inner_main(*args)
</snippet></ROW><ROW><id>21100929</id><snippet>exec(program_string)
function_name(*args)
</snippet></ROW><ROW><id>21100980</id><snippet>sprite_back = pygame.image.load('CharacterBack.png')
sprite_front = pygame.image.load('CharacterFront.png')
sprite_right = pygame.image.load('CharacterRight.png')
sprite_left = pygame.image.load('CharacterLeft.png')

sprite = sprite_front

while True:

    DISPLAYSURF.blit(sprite,(spritex,spritey))

    if charLeft == True:
        spritex -= 10
    elif charRight == True:
        spritex += 10
    elif charUp == True:
        spritey -= 10
    elif charDown == True:
        spritey += 10

    for event in pygame.event.get():
        if event.type==QUIT:
            pygame.quit()
            sys.exit()

        if event.type == KEYDOWN:
            if (event.key == K_LEFT):
                charLeft = True
                sprite=sprite_left
            elif (event.key == K_d):
                charRight = True
                sprite=sprite_right
            elif (event.key == K_w):
                charUp = True
                sprite=sprite_back
            elif (event.key == K_s):
                charDown = True
                sprite=sprite_front
        if event.type == KEYUP:
            if (event.key == K_LEFT):
                charLeft = False
            elif (event.key == K_d):
                charRight = False
            elif (event.key == K_w):
                charUp = False
            elif (event.key == K_s):
                charDown = False
</snippet></ROW><ROW><id>21101025</id><snippet>collections.Counter</snippet></ROW><ROW><id>21101025</id><snippet>collection.Counter</snippet></ROW><ROW><id>21101025</id><snippet>O(N)</snippet></ROW><ROW><id>21101025</id><snippet>list.count</snippet></ROW><ROW><id>21101025</id><snippet>O(N**2)</snippet></ROW><ROW><id>21101025</id><snippet>sum</snippet></ROW><ROW><id>21101025</id><snippet>sum()</snippet></ROW><ROW><id>21101025</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>21101025</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; texts = ['Lorem hello ipsum', 'Lorem ipsum generator machine', 'hello Lorem ipsum']
&gt;&gt;&gt; c = Counter(word for x in texts for word in x.split())
&gt;&gt;&gt; [' '.join(y for y in x.split() if c[y] &gt; 1) for x in texts]
['Lorem hello ipsum', 'Lorem ipsum', 'hello Lorem ipsum']
</snippet></ROW><ROW><id>21101025</id><snippet>In [8]: texts = ['Lorem hello ipsum', 'Lorem ipsum generator machine', 'hello Lorem ipsum']

In [9]: huge_texts = [x.split()*100 for x in texts]*1000  #list of lists                            

In [10]: %%timeit
from collections import Counter
from itertools import chain
c = Counter(chain.from_iterable(huge_texts))
texts = [[word for word in x if c[word]&gt;1] for x in huge_texts]

1 loops, best of 3: 791 ms per loop

In [11]: %%timeit 
all_tokens = sum(huge_texts, [])
tokens_once = set(word for word in set(all_tokens) if all_tokens.count(word) == 1)
texts = [[word for word in text if word not in tokens_once] for text in huge_texts]                                                        

1 loops, best of 3: 20.4 s per loop 
</snippet></ROW><ROW><id>21101086</id><snippet>math.ceil()</snippet></ROW><ROW><id>21101086</id><snippet>import math

def roundTo32(x, base=32):
    return int(base * math.ceil(float(x) / base))
</snippet></ROW><ROW><id>21101086</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; def roundTo32(x, base=32):
...     return int(base * math.ceil(float(x) / base))
... 
&gt;&gt;&gt; roundTo32(15)
32
&gt;&gt;&gt; roundTo32(33)
64
</snippet></ROW><ROW><id>21101344</id><snippet>box1 = first.boxplot(ax=ax,notch=False,widths=0.20,sym='',rot=-45, positions=np.arange(0.0,4.0,1.0))
box2 = second.boxplot(ax=ax,notch=False,widths=0.20,sym='',rot=-45, positions=np.arange(0.3,4.3,1.0))
</snippet></ROW><ROW><id>21101344</id><snippet>disp = 0.15
for k in box1.keys():
    for line1,line2 in zip(box1[k],box2[k]):
        setp(line1,xdata=getp(line1,'xdata') - disp)
        setp(line2,xdata=getp(line2,'xdata') + disp)
</snippet></ROW><ROW><id>21101436</id><snippet>View-&gt;Show Symbol-&gt;Show All Characters

or

View-&gt;Show Symbol-&gt;Show White Space and Tab
</snippet></ROW><ROW><id>21101436</id><snippet>"draw_white_space": "selection"

 to

 "draw_white_space":"all"
</snippet></ROW><ROW><id>21101473</id><snippet>requests.json_body</snippet></ROW><ROW><id>21101473</id><snippet>username = self.request.json_body['username']
</snippet></ROW><ROW><id>21101481</id><snippet>menu = {} #simple menu                             # 0
menu['1']="Add product."                           # 0
menu['2']="Delete product."                        # 0
menu['3']="View stock"                             # 0
menu['4']="Exit"                                   # 0
while True:                                        # 0
  options=menu.keys()                              # 2
  options.sort()                                   # 2
  for entry in options:                            # 2
        print entry, menu[entry]                   # 8
        selection=raw_input("Please Select:")      # 8
   if selection =='1':                             # 3
        print "Need the following data:"           # 8
        id_prod = raw_input("Product id: ")        # 8
        int(id_prod)                               # 8
        name = raw_input("Product name: ")         # 8
        price = raw_input("Product price: ")       # 8
        int(price)                                 # 8
        stock = raw_input ("How many are there: ") # 8
        int(stock)                                 # 8
        print "You're adding the following data", id_prod, name, price, stock # 8
      newProd()                                    # 6
   elif selection == '2':                          # 3
        name = raw_input ("Enter the name of the product you want to delete: ") # 8
       deleteProd(name)                            # 7
   elif selection == '3':                          # 3
        print "Here's your stock"                  # 8
        viewStock()                                # 8
   elif selection == '4':                          # 3
         print "Goodbye"                           # 9
         break                                     # 9
   else:                                           # 3
         print "Unknown Option Selected!"          # 9
</snippet></ROW><ROW><id>21101548</id><snippet>dont_filter=True</snippet></ROW><ROW><id>21101548</id><snippet>Request</snippet></ROW><ROW><id>21101548</id><snippet>from scrapy.spider import BaseSpider
from scrapy.http import Request


class MySpider(BaseSpider):
    name = 'wikipedia'
    allowed_domains = ['en.wikipedia.org']
    start_urls = [
        'http://en.wikipedia.org/wiki/Main_Page',
    ]

    def parse(self, response):
        print "I'm at wikipedia"
        request = Request(url="https://google.com", 
                          callback=self.parse_google, 
                          dont_filter=True)
        yield request

    def parse_google(self, response):
        print "I'm at google"
</snippet></ROW><ROW><id>21101793</id><snippet>def parse(self, response):
    sel = Selector(response)
    sites = sel.xpath('//div[@class="item paid-featured-item"]/div[@class="listing-item"]')
    cars = []
    for site in sites:
        car = CarItem()
        car['ATitle']=site.xpath('.//div[@class="block item-title"]/h3/span[@class="title"]/a/text()').extract()
        cars.append(car)
    return cars
</snippet></ROW><ROW><id>21101793</id><snippet>def parse(self, response):
    sel = Selector(response)
    sites = sel.css('div.paid-featured-item div.listing-item')
    cars = []
    for site in sites:
        car = CarItem()
        car['ATitle'] = site.css('div.item-title h3 span.title a::text').extract()
        cars.append(car)
    return cars
</snippet></ROW><ROW><id>21101793</id><snippet>a::text</snippet></ROW><ROW><id>21102043</id><snippet>def insert_into_rss_links(link=link, rss_link=rss_link, title=title):
</snippet></ROW><ROW><id>21102043</id><snippet>link</snippet></ROW><ROW><id>21102043</id><snippet>link</snippet></ROW><ROW><id>21102167</id><snippet>import os

loc = os.getcwd()
</snippet></ROW><ROW><id>21102292</id><snippet>datalist = sorted(Dictionary.dWord.items(), key=lambda x: x[2][0], reverse=True)
</snippet></ROW><ROW><id>21102292</id><snippet>x</snippet></ROW><ROW><id>21102292</id><snippet>key, value</snippet></ROW><ROW><id>21102292</id><snippet>x[1]</snippet></ROW><ROW><id>21102292</id><snippet>datalist = sorted(Dictionary.dWord.items(), key=lambda x: x[1][0], reverse=True)
</snippet></ROW><ROW><id>21102292</id><snippet>datalist</snippet></ROW><ROW><id>21102292</id><snippet>l[2][0]</snippet></ROW><ROW><id>21102292</id><snippet>l[1][0]</snippet></ROW><ROW><id>21102376</id><snippet>Exercises
---

ID  Name
1   Dead lift 
2   Bent over row (barbell)
...

Events 
---

ID  Date       ExerciseID  Weight  Sets  Reps
1   13/1/2014  2           135     1     6
2   13/1/2014  2           155     1     5
3   13/1/2014  1           315     1     4
...
</snippet></ROW><ROW><id>21102422</id><snippet>MPI_Comm_spawn</snippet></ROW><ROW><id>21102422</id><snippet>subprocess</snippet></ROW><ROW><id>21102422</id><snippet>MPI_Comm_spawn</snippet></ROW><ROW><id>21102422</id><snippet>MPI_Comm_spawn</snippet></ROW><ROW><id>21102422</id><snippet>mpiexec</snippet></ROW><ROW><id>21102422</id><snippet>mpirun</snippet></ROW><ROW><id>21102422</id><snippet>OMPI_</snippet></ROW><ROW><id>21102422</id><snippet>I_</snippet></ROW><ROW><id>21102422</id><snippet>mpiexec -n 1</snippet></ROW><ROW><id>21102443</id><snippet>from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait # available since 2.4.0
from selenium.webdriver.support import expected_conditions as EC # available since 2.26.0

ff = webdriver.Firefox()
ff.get("http://somedomain/url_that_delays_loading")
element = WebDriverWait(ff, 10).until(EC.visibility_of_element_located((By.CLASS_NAME, "rf-st-stop")))
</snippet></ROW><ROW><id>21102443</id><snippet>EC.invisibility_of_element_located</snippet></ROW><ROW><id>21102531</id><snippet>sys</snippet></ROW><ROW><id>21102531</id><snippet>sys.getsizeof()</snippet></ROW><ROW><id>21102661</id><snippet>username.error_messages="kkkkkk"</snippet></ROW><ROW><id>21102661</id><snippet>error_messages</snippet></ROW><ROW><id>21102661</id><snippet>dict</snippet></ROW><ROW><id>21102661</id><snippet>username.error_messages = {'required': 'username is required'}
</snippet></ROW><ROW><id>21102713</id><snippet>yes</snippet></ROW><ROW><id>21102713</id><snippet>y</snippet></ROW><ROW><id>21102713</id><snippet>re.compile(r'\b(yes|y)\b')
</snippet></ROW><ROW><id>21102874</id><snippet>cherrypy.session['any_string'] = 'some_string'</snippet></ROW><ROW><id>21102963</id><snippet>columns = ['id', 'name']
print session.query(select(from_obj=User, columns=columns)).all()
</snippet></ROW><ROW><id>21103062</id><snippet>class SourceBase(metaclass=abc.ABCMeta):
</snippet></ROW><ROW><id>21103062</id><snippet>class SourceBase(object):
    __metaclass__=abc.ABCMeta
</snippet></ROW><ROW><id>21103062</id><snippet>SourceBase</snippet></ROW><ROW><id>21103062</id><snippet>type</snippet></ROW><ROW><id>21103062</id><snippet>__metaclass__</snippet></ROW><ROW><id>21103062</id><snippet>abc.ABCMeta</snippet></ROW><ROW><id>21103198</id><snippet>def clearsublists(L):
    return [clearsublists(l) for l in L if isinstance(l, list)]
</snippet></ROW><ROW><id>21103279</id><snippet>$ python manage.py test polls.tests
</snippet></ROW><ROW><id>21103279</id><snippet>Creating test database for alias 'default'...
F
======================================================================
FAIL: test_was_published_recently_with_future_poll (polls.tests.QuestionMethodTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/sergio/.virtualenvs/django4/mydjango/polls/tests.py", line 17, in test_was_published_recently_with_future_poll
    self.assertEqual(future_question.was_published_recently(), False)
AssertionError: True != False
</snippet></ROW><ROW><id>21103403</id><snippet>def lettercount(pos):
    return {c: pos.count(c) for c in pos}
</snippet></ROW><ROW><id>21103403</id><snippet>zip</snippet></ROW><ROW><id>21103403</id><snippet>counts = [lettercount(t) for t in zip(seq1, seq2, seq3)]
</snippet></ROW><ROW><id>21103403</id><snippet>...
counts = []
for position in zip(seq1, seq2, seq3): # sets at same position
    counts.append(lettercount(position))
    for pair in combinations(position, 2): # pairs within set
        ...
</snippet></ROW><ROW><id>21103459</id><snippet>timeit.timeit</snippet></ROW><ROW><id>21103459</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit('"abcdefghijklmnopqrstuvwxyz,1".split(",", 1)')
1.6438178595324267
&gt;&gt;&gt; timeit('"abcdefghijklmnopqrstuvwxyz,1".rsplit(",", 1)')
1.6466740884665505
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21103459</id><snippet>str.split</snippet></ROW><ROW><id>21103459</id><snippet>str.split</snippet></ROW><ROW><id>21103645</id><snippet>start_urls</snippet></ROW><ROW><id>21103645</id><snippet>self.start_urls = ["http://www.bankofwow.com/"]
</snippet></ROW><ROW><id>21103665</id><snippet>hfile</snippet></ROW><ROW><id>21103665</id><snippet>None</snippet></ROW><ROW><id>21103665</id><snippet>is True</snippet></ROW><ROW><id>21103665</id><snippet>== True</snippet></ROW><ROW><id>21103665</id><snippet>None</snippet></ROW><ROW><id>21103665</id><snippet>--host-file=''</snippet></ROW><ROW><id>21103665</id><snippet>hfile</snippet></ROW><ROW><id>21103665</id><snippet>if hfile:
</snippet></ROW><ROW><id>21103665</id><snippet>None</snippet></ROW><ROW><id>21103665</id><snippet>if hfile is not None:
</snippet></ROW><ROW><id>21103665</id><snippet>--host</snippet></ROW><ROW><id>21103665</id><snippet>host</snippet></ROW><ROW><id>21103665</id><snippet>host</snippet></ROW><ROW><id>21103665</id><snippet>None</snippet></ROW><ROW><id>21103665</id><snippet>connect(user, host, passwd, en_passwd)</snippet></ROW><ROW><id>21103665</id><snippet>None</snippet></ROW><ROW><id>21103665</id><snippet>host</snippet></ROW><ROW><id>21103665</id><snippet>if</snippet></ROW><ROW><id>21103665</id><snippet>connect</snippet></ROW><ROW><id>21103665</id><snippet>hosts</snippet></ROW><ROW><id>21103665</id><snippet>hfile</snippet></ROW><ROW><id>21103665</id><snippet>exit</snippet></ROW><ROW><id>21103665</id><snippet>truthy</snippet></ROW><ROW><id>21103665</id><snippet>hosts</snippet></ROW><ROW><id>21103665</id><snippet>r</snippet></ROW><ROW><id>21103665</id><snippet>\r</snippet></ROW><ROW><id>21103665</id><snippet>\n</snippet></ROW><ROW><id>21103665</id><snippet>main</snippet></ROW><ROW><id>21103665</id><snippet>main</snippet></ROW><ROW><id>21103665</id><snippet>main</snippet></ROW><ROW><id>21103665</id><snippet>IndentationError</snippet></ROW><ROW><id>21103665</id><snippet>-tt</snippet></ROW><ROW><id>21103787</id><snippet>import cherrypy
from genshi.template import TemplateLoader

@cherrypy.expose
def index(self):
tmpl = loader.load('index.html')

if(cherrypy.session.get('_cp_Email')):
    return tmpl.generate(title='Geddit').render('html', LoggedIn=True)
else:
    return tmpl.generate(title='Geddit').render('html', LoggedIn=False)
</snippet></ROW><ROW><id>21103787</id><snippet>            if (LoggedIn) {
              # Logged In menu
            } else {
              # not Logged In menu
            }
</snippet></ROW><ROW><id>21103852</id><snippet>dict</snippet></ROW><ROW><id>21103852</id><snippet>PyDict</snippet></ROW><ROW><id>21103852</id><snippet>dict</snippet></ROW><ROW><id>21103852</id><snippet>dict</snippet></ROW><ROW><id>21103852</id><snippet>MacroPy</snippet></ROW><ROW><id>21103852</id><snippet>o{‚Ä¶}</snippet></ROW><ROW><id>21103852</id><snippet>od[{‚Ä¶}]</snippet></ROW><ROW><id>21103852</id><snippet>od.py</snippet></ROW><ROW><id>21103852</id><snippet>realmain.py</snippet></ROW><ROW><id>21103852</id><snippet>main.py</snippet></ROW><ROW><id>21103852</id><snippet>python main.py</snippet></ROW><ROW><id>21103852</id><snippet>DictionaryComp</snippet></ROW><ROW><id>21103852</id><snippet>GeneratorExpr</snippet></ROW><ROW><id>21103852</id><snippet>Tuple</snippet></ROW><ROW><id>21103852</id><snippet>Call</snippet></ROW><ROW><id>21103852</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>21103852</id><snippet>def od(tree, **kw):
    pair = ast.Tuple(elts=[tree.key, tree.value])
    gx = ast.GeneratorExp(elt=pair, generators=tree.generators)
    odict = ast.Attribute(value=ast.Name(id='collections'), 
                          attr='OrderedDict')
    call = ast.Call(func=odict, args=[gx], keywords=[])
    return call
</snippet></ROW><ROW><id>21103852</id><snippet>O{‚Ä¶}</snippet></ROW><ROW><id>21103852</id><snippet>PyDict</snippet></ROW><ROW><id>21103852</id><snippet>Python/compile.c</snippet></ROW><ROW><id>21103852</id><snippet>Python/ceval.c</snippet></ROW><ROW><id>21103852</id><snippet>Objects/dictobject.c</snippet></ROW><ROW><id>21103852</id><snippet>olddict, dict = dict, OrderedDict</snippet></ROW><ROW><id>21103852</id><snippet>dict</snippet></ROW><ROW><id>21103870</id><snippet>Initialise array X
Read each line L of file F:
    If the ID field is empty then merge each entry into the previous line L-1
    Otherwise append the line L to array X
</snippet></ROW><ROW><id>21104093</id><snippet>sharedarea</snippet></ROW><ROW><id>21104093</id><snippet>buffer-size</snippet></ROW><ROW><id>21104093</id><snippet>signal-bufsize</snippet></ROW><ROW><id>21104137</id><snippet>defaultdict</snippet></ROW><ROW><id>21104137</id><snippet>default_factory</snippet></ROW><ROW><id>21104137</id><snippet>dict</snippet></ROW><ROW><id>21104137</id><snippet>&gt;&gt;&gt; defaultdict(int, [(i, i*i) for i in range(5)])
defaultdict(&lt;type 'int'&gt;, {0: 0, 1: 1, 2: 4, 3: 9, 4: 16})
</snippet></ROW><ROW><id>21104137</id><snippet>defaultdict</snippet></ROW><ROW><id>21104137</id><snippet>def defaultdict_factory_factory(default_factory):
    def defaultdict_factory(*args, **kwargs):
        return defaultdict(default_factory, *args, **kwargs)
    return defaultdict_factory
</snippet></ROW><ROW><id>21104137</id><snippet>functools.partial</snippet></ROW><ROW><id>21104137</id><snippet>def defaultdict_factory_factory(default_factory):
    return partial(defaultdict, default_factory)
</snippet></ROW><ROW><id>21104539</id><snippet>@PauloBu</snippet></ROW><ROW><id>21104539</id><snippet>r</snippet></ROW><ROW><id>21104539</id><snippet>&gt;&gt;&gt; print 'this is \n a test'
this is 
 a test
</snippet></ROW><ROW><id>21104539</id><snippet>r</snippet></ROW><ROW><id>21104539</id><snippet>&gt;&gt;&gt; print r'this is \n a test'
this is \n a test
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>21104539</id><snippet>re</snippet></ROW><ROW><id>21104539</id><snippet>\b</snippet></ROW><ROW><id>21104539</id><snippet>re</snippet></ROW><ROW><id>21104539</id><snippet>\b</snippet></ROW><ROW><id>21104539</id><snippet>'\b'</snippet></ROW><ROW><id>21104539</id><snippet>'\\b'</snippet></ROW><ROW><id>21104539</id><snippet>r'\b'</snippet></ROW><ROW><id>21104539</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall('\b', 'test') # the backslash gets consumed by the python string interpreter
[]
&gt;&gt;&gt; re.findall('\\b', 'test') # backslash is explicitly escaped and is passed through to re module
['', '']
&gt;&gt;&gt; re.findall(r'\b', 'test') # often this syntax is easier
['', '']
</snippet></ROW><ROW><id>21104548</id><snippet>Process p = Runtime.exec("python", pathToProgram);
</snippet></ROW><ROW><id>21104548</id><snippet>print</snippet></ROW><ROW><id>21104548</id><snippet>BufferedReader in = new BufferedReader(new InputStreamReader(p.getInputStream()));
</snippet></ROW><ROW><id>21104548</id><snippet>String line = in.readLine();
</snippet></ROW><ROW><id>21104616</id><snippet>getopt()</snippet></ROW><ROW><id>21104616</id><snippet>$ python Script.py --condition=foo --output-file abc.def test
['test']
[('--condition', 'foo'), ('--output-file', 'abc.def')]
&lt;type 'list'&gt;
</snippet></ROW><ROW><id>21104616</id><snippet>test</snippet></ROW><ROW><id>21104616</id><snippet>getopt</snippet></ROW><ROW><id>21104616</id><snippet>getopt</snippet></ROW><ROW><id>21104616</id><snippet>getopt()</snippet></ROW><ROW><id>21104616</id><snippet>getopt()</snippet></ROW><ROW><id>21104616</id><snippet>argparse</snippet></ROW><ROW><id>21104616</id><snippet>getopt</snippet></ROW><ROW><id>21104616</id><snippet>--</snippet></ROW><ROW><id>21104754</id><snippet>futures</snippet></ROW><ROW><id>21104754</id><snippet>threading.Condition</snippet></ROW><ROW><id>21104754</id><snippet>gevent</snippet></ROW><ROW><id>21104754</id><snippet>futures</snippet></ROW><ROW><id>21104754</id><snippet>gevent</snippet></ROW><ROW><id>21104754</id><snippet>Future</snippet></ROW><ROW><id>21104754</id><snippet>Event</snippet></ROW><ROW><id>21104754</id><snippet>Lock</snippet></ROW><ROW><id>21104754</id><snippet>Rlock</snippet></ROW><ROW><id>21104754</id><snippet>Condition</snippet></ROW><ROW><id>21104754</id><snippet>gevent</snippet></ROW><ROW><id>21104754</id><snippet>threading</snippet></ROW><ROW><id>21104754</id><snippet>futures</snippet></ROW><ROW><id>21104754</id><snippet>concurrent.futures</snippet></ROW><ROW><id>21104754</id><snippet>futures</snippet></ROW><ROW><id>21104800</id><snippet>pants0</snippet></ROW><ROW><id>21104800</id><snippet>pants1</snippet></ROW><ROW><id>21104800</id><snippet>pants[0]</snippet></ROW><ROW><id>21104800</id><snippet>pants[1]</snippet></ROW><ROW><id>21104800</id><snippet>Leather_Pants</snippet></ROW><ROW><id>21104800</id><snippet>pants = []
pants.append(Leather_Pants(NPC))
pants.append(Leather_Pants(chests[5]))
pants[1].pickup(PC)
</snippet></ROW><ROW><id>21104800</id><snippet>self</snippet></ROW><ROW><id>21104800</id><snippet>class Player(object):
    def __init__(self):
        self.Items = set()

class Item(object):
    def __init__(self):
        self.Equipped = 0

class Leather_Pants(Item):
    def __init__(self):
        pass # there is nothing to do here
    def Pick_Up(self, owner):
        self.owner.Items.add(self)
    def Equip(self):
        self.Equipped = 1
</snippet></ROW><ROW><id>21105305</id><snippet>def merge(xs):
    it = iter(xs)
    ret = next(it, (None, None))
    for x in it:
        if ret[1] is None or x[0]['alt'] != ret[1]['alt']:
            yield ret
            ret = x
        else:
            ret = ret[0], x[1]
    if ret[0] is not None:
        yield ret
</snippet></ROW><ROW><id>21105305</id><snippet>&gt;&gt;&gt; data = [
...     ({'id':1, 'alt': 8}, {'id':1, 'alt': 9}),
...     ({'id':1, 'alt': 9}, {'id':1, 'alt': 9}),
...     ({'id':1, 'alt': 9}, {'id':1, 'alt': 10}),
...     ({'id':1, 'alt': 10}, {'id':1, 'alt': 7}),
...     ({'id':1, 'alt': 8}, {'id':1, 'alt': 9}),
...     ({'id':1, 'alt': 9}, {'id': 1, 'alt': 10})
... ]
&gt;&gt;&gt; list(merge(data))
[({'alt': 8, 'id': 1}, {'alt': 7, 'id': 1}),
 ({'alt': 8, 'id': 1}, {'alt': 10, 'id': 1})]

&gt;&gt;&gt; data = [
...   ({'id':1, 'alt': 10}, {'id':1, 'alt': 12}),
...   ({'id':1, 'alt': 8}, {'id':1, 'alt': 9}),
...   ({'id':1, 'alt': 9}, {'id':1, 'alt': 10})
... ]
&gt;&gt;&gt; list(merge(data))
[({'alt': 10, 'id': 1}, {'alt': 12, 'id': 1}),
 ({'alt': 8, 'id': 1}, {'alt': 10, 'id': 1})]

&gt;&gt;&gt; list(merge([]))
[]
</snippet></ROW><ROW><id>21105368</id><snippet>&gt;&gt;&gt; x=[1,2,3,4,5,15,20]
&gt;&gt;&gt; [i+j for i in x for j in x]
[2, 3, 4, 5, 6, 16, 21, 3, 4, 5, 6, 7, 17, 22, 4, 5, 6, 7, 8, 18, 23, 5, 6, 7, 8, 9, 19, 24, 6, 7, 8, 9, 10, 20, 25, 16, 17, 18, 19, 20, 30, 35, 21, 22, 23, 24, 25, 35, 40]
</snippet></ROW><ROW><id>21105368</id><snippet>&gt;&gt;&gt; [i+j for i in x for j in x if i+j&lt;=30]
[2, 3, 4, 5, 6, 16, 21, 3, 4, 5, 6, 7, 17, 22, 4, 5, 6, 7, 8, 18, 23, 5, 6, 7, 8, 9, 19, 24, 6, 7, 8, 9, 10, 20, 25, 16, 17, 18, 19, 20, 30, 21, 22, 23, 24, 25]
</snippet></ROW><ROW><id>21105368</id><snippet>&gt;&gt;&gt; list(set([i+j for i in x for j in x if i+j&lt;=30]))
[2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30]
</snippet></ROW><ROW><id>21105368</id><snippet>&gt;&gt;&gt; sorted(list(set([i+j for i in x for j in x if i+j&lt;=30])))
[2, 3, 4, 5, 6, 7, 8, 9, 10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 30]
</snippet></ROW><ROW><id>21105368</id><snippet>&gt;&gt;&gt; timeit.timeit(
    'x=sorted(list(set([randint(1,i) for i in range(2,1000)])));z=[i+j for i in x for j in x if i+j&lt;=500]',
    setup="from random import randint",number=100)
1.7806868553161621
</snippet></ROW><ROW><id>21105582</id><snippet>[item.strip() for item in s.replace("(", ")").split(")")]
</snippet></ROW><ROW><id>21105582</id><snippet>mylist = []
for item in s.replace("(", ";").replace(")", ";").split(";"):
    mylist.append(item.strip())

print mylist[:-1]
</snippet></ROW><ROW><id>21105582</id><snippet>['index', '1.0000000e+00 2.0000000e+00 3.0000000e+00', '_x_', 'error error error', 't', '1.2500000e+02 1.2500000e+02 1.2500000e+02']
</snippet></ROW><ROW><id>21105667</id><snippet>def attack(self, enemyhealth):
    enemyhealth = (enemyhealth - self.statATK)
    return enemyhealth
</snippet></ROW><ROW><id>21105667</id><snippet>Keaton.statHEALTH = James.attack(Keaton.statHEALTH)
</snippet></ROW><ROW><id>21105667</id><snippet>return</snippet></ROW><ROW><id>21105667</id><snippet>attack</snippet></ROW><ROW><id>21105667</id><snippet>def attack(self, other):
    other.statHEALTH -= self.statATK
</snippet></ROW><ROW><id>21105667</id><snippet>James.attack(Keaton)
</snippet></ROW><ROW><id>21105759</id><snippet>$ scrapy shell http://www.cio.co.uk/cio100/2013/cio/
...
&gt;&gt;&gt; for tr in sel.xpath('//table[@class="bgWhite listTable"]/tr'):
...     item = Cio100Item()
...     item['company'] = tr.xpath('td[2]//a/text()').extract()[0].strip()
...     item['person'] = tr.xpath('td[3]//a/text()').extract()[0].strip()
...     item['industry'] = tr.xpath('td[4]//a/text()').extract()[0].strip()
...     item['url'] = tr.xpath('td[4]//a/@href').extract()[0].strip()
...     print item
... 
{'company': u'LOCOG',
 'industry': u'Leisure and entertainment',
 'person': u'Gerry Pennell',
 'url': u'/cio100/2013/locog/'}
{'company': u'Laterooms.com',
 'industry': u'Leisure and entertainment',
 'person': u'Adam Gerrard',
 'url': u'/cio100/2013/lateroomscom/'}
{'company': u'Vodafone',
 'industry': u'Communications and IT services',
 'person': u'Albert Hitchcock',
 'url': u'/cio100/2013/vodafone/'}
...
</snippet></ROW><ROW><id>21105759</id><snippet>yield</snippet></ROW><ROW><id>21105767</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>21105767</id><snippet>import os
from os.path import normpath, abspath, dirname, join
BASE_DIR = normpath(abspath(join(dirname(__file__), '..', '..')))
TEMPLATE_DIRS = (
    join(BASE_DIR, 'templates'),
)
</snippet></ROW><ROW><id>21105767</id><snippet>BASE_DIR</snippet></ROW><ROW><id>21105767</id><snippet>dirname(__file__)</snippet></ROW><ROW><id>21105767</id><snippet>settings.py</snippet></ROW><ROW><id>21105767</id><snippet>join</snippet></ROW><ROW><id>21105767</id><snippet>'..'</snippet></ROW><ROW><id>21105767</id><snippet>abspath</snippet></ROW><ROW><id>21105767</id><snippet>normpath</snippet></ROW><ROW><id>21105825</id><snippet>logger.setLevel(logging.INFO)
</snippet></ROW><ROW><id>21105825</id><snippet>NOTSET</snippet></ROW><ROW><id>21105825</id><snippet>WARNING</snippet></ROW><ROW><id>21105825</id><snippet>NOTSET</snippet></ROW><ROW><id>21105828</id><snippet>groups</snippet></ROW><ROW><id>21105828</id><snippet>grouped = df.groupby('OPTION')
</snippet></ROW><ROW><id>21105828</id><snippet>grouped</snippet></ROW><ROW><id>21105828</id><snippet>for name, group in grouped:
    print("Option name: {}".format(name))
    # Count of entries for this OPTION
    print("Count: {}".format(len(group.index)))
    # Accessing specific columns, say SELL
    print("SELL for this option\n")
    print(group["SELL"])
    # Summary for SELL for this option
    print("Summary\n")
    print(group["SELL"].describe())
</snippet></ROW><ROW><id>21105939</id><snippet>    if key not in masterIndex.keys():
        masterIndex[key]= partialIndex[key]
    elif key in masterIndex.keys():
        masterIndex[key].extend(partialIndex[key])
</snippet></ROW><ROW><id>21105939</id><snippet>masterIndex</snippet></ROW><ROW><id>21105939</id><snippet>elif</snippet></ROW><ROW><id>21105939</id><snippet>not in</snippet></ROW><ROW><id>21105939</id><snippet>in</snippet></ROW><ROW><id>21105939</id><snippet>    if key not in masterIndex.keys():
        masterIndex[key]= partialIndex[key]
    else:
        masterIndex[key].extend(partialIndex[key])
</snippet></ROW><ROW><id>21105939</id><snippet>masterIndex</snippet></ROW><ROW><id>21105939</id><snippet>dict</snippet></ROW><ROW><id>21105939</id><snippet>.keys()</snippet></ROW><ROW><id>21105939</id><snippet>    if key not in masterIndex:
        masterIndex[key]= partialIndex[key]
    else:
        masterIndex[key].extend(partialIndex[key])
</snippet></ROW><ROW><id>21106251</id><snippet>True</snippet></ROW><ROW><id>21106251</id><snippet>True</snippet></ROW><ROW><id>21106251</id><snippet>char == m</snippet></ROW><ROW><id>21106251</id><snippet>if-clause</snippet></ROW><ROW><id>21106251</id><snippet>False</snippet></ROW><ROW><id>21106251</id><snippet>if</snippet></ROW><ROW><id>21106251</id><snippet>if char == m:
   return True
elif aStr == '' or len(aStr) == 1:
    return False
else:
    ...
</snippet></ROW><ROW><id>21106251</id><snippet>isIn</snippet></ROW><ROW><id>21106251</id><snippet>isitIn</snippet></ROW><ROW><id>21106251</id><snippet>char &lt; m</snippet></ROW><ROW><id>21106251</id><snippet>char &gt; m</snippet></ROW><ROW><id>21106251</id><snippet>return isitIn(char, aStr[:-1])</snippet></ROW><ROW><id>21106251</id><snippet>return isIn(char, aStr[1:])</snippet></ROW><ROW><id>21106251</id><snippet>if char &lt; m:
    return isitIn(char, aStr[:len(aStr) // 2])
elif char &gt; m:
    return isitIn(char, aStr[len(aStr) // 2:])
</snippet></ROW><ROW><id>21106251</id><snippet>def isitIn(char, aStr):
    if aStr == '':  # Check for empty string
        return False
    m = aStr[len(aStr) // 2]
    if char == m:
       return True
    elif len(aStr) == 1:
        return False
    else:
       if char &lt; m:
           return isitIn(char, aStr[:len(aStr) // 2])
       elif char &gt; m:
           return isitIn(char, aStr[len(aStr) // 2:])
    return isitIn(char, aStr)
</snippet></ROW><ROW><id>21106459</id><snippet>from multiprocessing import Process, Manager
from multiprocessing.managers import BaseManager, SyncManager
from time import sleep
import signal

#handle SIGINT from SyncManager object
def mgr_sig_handler(signal, frame):
    print 'not closing the mgr'

#initilizer for SyncManager
def mgr_init():
    signal.signal(signal.SIGINT, mgr_sig_handler)
    #signal.signal(signal.SIGINT, signal.SIG_IGN) # &lt;- OR do this to just ignore the signal
    print 'initialized mananger'

def f(process_number, shared_array):
    try:
        print "starting thread: ", process_number
        shared_array.append(process_number)
        sleep(3)
        shared_array.append(process_number)
    except KeyboardInterrupt:
        print "Keyboard interrupt in process: ", process_number
    finally:
        print "cleaning up thread", process_number

if __name__ == '__main__':

    processes = []

     #using syncmanager directly instead of letting Manager() do it for me
    manager = SyncManager()
    manager.start(mgr_init)  #fire up the child manager process
    shared_array = manager.list()

    for i in xrange(4):
        p = Process(target=f, args=(i, shared_array))
        p.start()
        processes.append(p)

    try:
        for process in processes:
            process.join()
    except KeyboardInterrupt:
        print "Keyboard interrupt in main"

    for item in shared_array:
        print item
</snippet></ROW><ROW><id>21106554</id><snippet>distutils</snippet></ROW><ROW><id>21106554</id><snippet>install_requires</snippet></ROW><ROW><id>21106554</id><snippet>setuptools</snippet></ROW><ROW><id>21106554</id><snippet>setuptools</snippet></ROW><ROW><id>21106554</id><snippet>pip</snippet></ROW><ROW><id>21106554</id><snippet>setuptools</snippet></ROW><ROW><id>21106554</id><snippet>setuptools</snippet></ROW><ROW><id>21106687</id><snippet>list()</snippet></ROW><ROW><id>21106687</id><snippet>a = list(b)</snippet></ROW><ROW><id>21106687</id><snippet>b</snippet></ROW><ROW><id>21106687</id><snippet>a = [list(x) for x in b]
</snippet></ROW><ROW><id>21106687</id><snippet>deepcopy</snippet></ROW><ROW><id>21106687</id><snippet>is</snippet></ROW><ROW><id>21106687</id><snippet>id</snippet></ROW><ROW><id>21106687</id><snippet>&gt;&gt;&gt; list1 = [['x', 'y', 0],
...         ['m', 'n', 0],
... ]
&gt;&gt;&gt; dict2 = {'first': list(list1),
...         'second': list(list1),
... }
&gt;&gt;&gt; id(dict2['first'])
4398414856
&gt;&gt;&gt; id(dict2['second'])
4398414920
&gt;&gt;&gt; id(dict2['first'][0])
4378407688
&gt;&gt;&gt; id(dict2['second'][0])
4378407688
</snippet></ROW><ROW><id>21106687</id><snippet>first</snippet></ROW><ROW><id>21106687</id><snippet>second</snippet></ROW><ROW><id>21106947</id><snippet>import os
import re

r = re.compile(r'log_\d{8}-\d{2}-\d{2}-\d{2}_\d{4}\.txt$')

latest_file = \
    max(filter(r.search,os.listdir('/path/to/logs')))

print(latest_file)
</snippet></ROW><ROW><id>21107046</id><snippet>import pylab, numpy
from scipy.optimize import curve_fit

x=numpy.array(range(10))
y=numpy.array([5,4,3,2,1,2,3,4,5,6])

n=len(x)
mean=sum(y)/n
sigma=sum(y-mean)**2/n

def gaus(x,a,x0,sigma,c):
    return a*numpy.exp(-(x-x0)**2/(2*sigma**2))+c

popt, pcov=curve_fit(gaus,x,y,p0=[-1,mean,sigma,-5])

pylab.plot(x,y,'r-',x,y,'ro')
pylab.plot(x,gaus(x,*popt),'k-',x,gaus(x,*popt),'ko')
pylab.show()
</snippet></ROW><ROW><id>21107240</id><snippet>seen = set()
for line in infile:
    testname, vid, tstamp = line.split(",", 3)[:3]
    if (testname, vid, tstamp) in seen:
        continue
    seen.add((testname, vid, tstamp))
    outfile.write(line)
</snippet></ROW><ROW><id>21107240</id><snippet>itertools</snippet></ROW><ROW><id>21107240</id><snippet>unique_everseen</snippet></ROW><ROW><id>21107240</id><snippet>def keyfunc(line):
    return tuple(line.split(",", 3)[:3])
for line in unique_everseen(infile, key=keyfunc):
    outfile.write(line)
</snippet></ROW><ROW><id>21107240</id><snippet>dbm</snippet></ROW><ROW><id>21107240</id><snippet>join</snippet></ROW><ROW><id>21107240</id><snippet>everseen</snippet></ROW><ROW><id>21107240</id><snippet>justseen</snippet></ROW><ROW><id>21107240</id><snippet>def keyfunc(line):
    return tuple(line.split(",", 3)[:3])
for line in unique_justseen(infile, key=keyfunc):
    outfile.write(line)
</snippet></ROW><ROW><id>21107240</id><snippet>testname</snippet></ROW><ROW><id>21107240</id><snippet>vid</snippet></ROW><ROW><id>21107240</id><snippet>tstamp</snippet></ROW><ROW><id>21107240</id><snippet>testname</snippet></ROW><ROW><id>21107240</id><snippet>vid</snippet></ROW><ROW><id>21107240</id><snippet>tstamp</snippet></ROW><ROW><id>21107240</id><snippet>tstamp</snippet></ROW><ROW><id>21107240</id><snippet>tstamp</snippet></ROW><ROW><id>21107240</id><snippet>everseen</snippet></ROW><ROW><id>21107240</id><snippet>def keyfunc(line):
    return tuple(line.split(",", 2)[:2])
for line in reversed(list(unique_everseen(reversed(list(infile)), key=keyfunc))):
    outfile.write(line)
</snippet></ROW><ROW><id>21107240</id><snippet>MemoryError</snippet></ROW><ROW><id>21107240</id><snippet>file</snippet></ROW><ROW><id>21107240</id><snippet>io.Whatever</snippet></ROW><ROW><id>21107240</id><snippet>linecache</snippet></ROW><ROW><id>21107240</id><snippet>line2.split(",")</snippet></ROW><ROW><id>21107255</id><snippet>import sys

def build_index(path):
    index = {}
    for key, pos, data in parse_fastq(path):
        if key not in index:
            # Don't overwrite duplicates- use first occurrence.
            index[key] = pos

    return index

def error(s):
    sys.stderr.write(s + "\n")

def extract_key(s):
    # This much is fairly constant:
    assert(s.startswith('@'))
    (machine_name, rest) = s.split(':', 1)
    # Per wikipedia, this changes in different variants of FASTQ format:
    (key, rest) = rest.split('/', 1)
    return key

def parse_fastq(path):
    """
    Parse the 4-line FASTQ groups in path.
    Validate the contents, somewhat.
    """
    f = open(path)
    i = 0
    # Note: iterating a file is incompatible with fh.tell(). Fake it.
    pos = offset = 0
    for line in f:
        offset += len(line)
        lx = i % 4
        i += 1
        if lx == 0:     # @machine: key
            key = extract_key(line)
            len1 = len2 = 0
            data = [ line ]
        elif lx == 1:
            data.append(line)
            len1 = len(line)
        elif lx == 2:   # +machine: key or something
            assert(line.startswith('+'))
            data.append(line)
        else:           # lx == 3 : quality data
            data.append(line)
            len2 = len(line)

            if len2 != len1:
                error("Data length mismatch at line "
                        + str(i-2)
                        + " (len: " + str(len1) + ") and line "
                        + str(i)
                        + " (len: " + str(len2) + ")\n")
            #print "Yielding @%i: %s" % (pos, key)
            yield key, pos, data
            pos = offset

    if i % 4 != 0:
        error("EOF encountered in mid-record at line " + str(i));

def match_records(path, index):
    results = []
    for key, pos, d in parse_fastq(path):
        if key in index:
            # found a match!
            results.append(key)

    return results

def write_matches(inpath, matches, outpath):
    rf = open(inpath)
    wf = open(outpath, 'w')

    for m in matches:
        rf.seek(m)
        wf.write(rf.readline())
        wf.write(rf.readline())
        wf.write(rf.readline())
        wf.write(rf.readline())

    rf.close()
    wf.close()

#import pdb; pdb.set_trace()
index = build_index('afile.fastq')
matches = match_records('bfile.fastq', index)
posns = [ index[k] for k in matches ]
write_matches('afile.fastq', posns, 'outfile.fastq')
</snippet></ROW><ROW><id>21107460</id><snippet>data1 = ... # contents of file1
data2 = ... # contents of file2

data = [data1, data2]
# use [1:] to filter column headers
data_cells = [[line.split() for line in datum.split('\n')][1:]
              for datum in data]

result = []
for line_sequence in zip(*data_cells):
    col1 = line_sequence[0][0] # get row header
    result.append([col1]) # and put it in a list
    for line in line_sequence:
        result[-1].append(line[-1])

out = '\n'.join(['    '.join(line) for line in result])
print(out)
</snippet></ROW><ROW><id>21107460</id><snippet>NM_032291    1.4612e+01    1.473e-04
NM_001080397    1.0545e+01    1.473e-03
NM_018090    1.4473e+01    1.473e-02
NM_032785    5.4473e-01    1.473e-01
NM_001145278    1.0545e+02    1.473e00
NM_013943    1.473e-04    1.473e01
NM_001145277    1.4473e+01    1.473e02
NM_052998    1.4473e+02    1.473e03
NM_001195683    1.4473e+03    1.473e04
</snippet></ROW><ROW><id>21107680</id><snippet>signal_handler</snippet></ROW><ROW><id>21107680</id><snippet>accept</snippet></ROW><ROW><id>21107680</id><snippet>init</snippet></ROW><ROW><id>21107680</id><snippet>launchd</snippet></ROW><ROW><id>21107680</id><snippet>exit</snippet></ROW><ROW><id>21107680</id><snippet>waitpid</snippet></ROW><ROW><id>21107680</id><snippet>signal_handler</snippet></ROW><ROW><id>21107680</id><snippet>exit</snippet></ROW><ROW><id>21107680</id><snippet>accept</snippet></ROW><ROW><id>21107680</id><snippet>EINTR</snippet></ROW><ROW><id>21107680</id><snippet>accept</snippet></ROW><ROW><id>21107680</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>21107680</id><snippet>try:
    accept()
except KeyboardInterrupt: # or maybe BaseException
    # wait for children, blocking instead of WNOHANG of course
    sys.exit(0)
</snippet></ROW><ROW><id>21107805</id><snippet>export FMTSTR=`python -c 'print "%2$n\xc0\xf2\x03\x42"'`
</snippet></ROW><ROW><id>21107805</id><snippet>\xc0\xf2\x03</snippet></ROW><ROW><id>21108055</id><snippet>self</snippet></ROW><ROW><id>21108055</id><snippet>_generate_file_name</snippet></ROW><ROW><id>21108055</id><snippet>class MicroSim(object)</snippet></ROW><ROW><id>21108074</id><snippet> 10          58 SETUP_LOOP              27 (to 88)
             61 LOAD_NAME                3 (sys)
             64 LOAD_ATTR                6 (stdin)
             67 GET_ITER         
        &gt;&gt;   68 FOR_ITER                16 (to 87)
             71 STORE_NAME               7 (line)
 11          74 LOAD_NAME                4 (count)
             77 LOAD_CONST               4 (1)
             80 INPLACE_ADD      
             81 STORE_NAME               4 (count)
             84 JUMP_ABSOLUTE           68
        &gt;&gt;   87 POP_BLOCK
</snippet></ROW><ROW><id>21108074</id><snippet> 12          18 SETUP_LOOP              24 (to 45)
             21 LOAD_FAST                0 (input)
             24 GET_ITER
        &gt;&gt;   25 FOR_ITER                16 (to 44)
             28 STORE_FAST               3 (line)
 13          31 LOAD_FAST                1 (count)
             34 LOAD_CONST               2 (1)
             37 INPLACE_ADD
             38 STORE_FAST               1 (count)
             41 JUMP_ABSOLUTE           25
        &gt;&gt;   44 POP_BLOCK
</snippet></ROW><ROW><id>21108095</id><snippet>j, k</snippet></ROW><ROW><id>21108095</id><snippet>dic</snippet></ROW><ROW><id>21108095</id><snippet>dic[j][2][r] in dic[k][2]</snippet></ROW><ROW><id>21108095</id><snippet>dic[*][2]</snippet></ROW><ROW><id>21108095</id><snippet>O(N^2 * M^2)</snippet></ROW><ROW><id>21108095</id><snippet>N</snippet></ROW><ROW><id>21108095</id><snippet>dic</snippet></ROW><ROW><id>21108095</id><snippet>M</snippet></ROW><ROW><id>21108095</id><snippet>dic[*][2]</snippet></ROW><ROW><id>21108095</id><snippet>O(N^2 * M)</snippet></ROW><ROW><id>21108095</id><snippet>set()</snippet></ROW><ROW><id>21108095</id><snippet>.add</snippet></ROW><ROW><id>21108095</id><snippet>[]</snippet></ROW><ROW><id>21108095</id><snippet>.append</snippet></ROW><ROW><id>21108095</id><snippet>dic = [[a, b, set(c)] for a, b, c in dic]
</snippet></ROW><ROW><id>21108095</id><snippet>j</snippet></ROW><ROW><id>21108095</id><snippet>k</snippet></ROW><ROW><id>21108095</id><snippet>collections.Counter</snippet></ROW><ROW><id>21108095</id><snippet>for r in range(len(dic[j][2])):
    if(dic[j][2][r] in dic[k][2]):
        temp_score += 1
</snippet></ROW><ROW><id>21108095</id><snippet>temp_score += len(dic[j][2] &amp; dic[k][2])
</snippet></ROW><ROW><id>21108095</id><snippet>for j in range(len(dic))</snippet></ROW><ROW><id>21108095</id><snippet>dic[j]</snippet></ROW><ROW><id>21108095</id><snippet>for x in dic</snippet></ROW><ROW><id>21108095</id><snippet>x</snippet></ROW><ROW><id>21108095</id><snippet>for x in dic:
    for y in dic:
        score_temp = len(x[2] &amp; y[2])
        score_final = float(score_temp) / (x[1] + y[1])
        dice_cursor.execute('insert into dices values(?,?,?)', 
                            (x[0], y[0], score_final))
</snippet></ROW><ROW><id>21108095</id><snippet>for x, y in itertools.product(dic, dic):
</snippet></ROW><ROW><id>21108213</id><snippet>class AuthenticationMiddleware(object):
def __init__(self, app, username, password):
    self.app = app
    self.username = username
    self.password = password
def __unauthorized(self, start_response):
    start_response('401 Unauthorized', [
        ('Content-type', 'text/plain'),
        ('WWW-Authenticate', 'Basic realm="restricted"')
    ])
    return ['You are unauthorized and forbidden to view this resource.']
def __call__(self, environ, start_response):
    authorization = environ.get('HTTP_AUTHORIZATION', None)
    if not authorization:
        return self.__unauthorized(start_response)

    (method, authentication) = authorization.split(' ', 1)
    if 'basic' != method.lower():
        return self.__unauthorized(start_response)

    request_username, request_password = authentication.strip().decode('base64').split(':', 1)
    if self.username == request_username and self.password == request_password:
        return self.app(environ, start_response)

    return self.__unauthorized(start_response)
</snippet></ROW><ROW><id>21108213</id><snippet>def basic_auth_required(func):
@wraps(func)
def _decorator(request, *args, **kwargs):
    from django.contrib.auth import authenticate, login
    if request.META.has_key('HTTP_AUTHORIZATION'):
        authmeth, auth = request.META['HTTP_AUTHORIZATION'].split(' ', 1)
        if authmeth.lower() == 'basic':
            auth = auth.strip().decode('base64')
            username, password = auth.split(':', 1)
            if username=='myusername' and password == 'my password':
                return func(request, *args, **kwargs)
            else:
                return HttpResponseForbidden('&lt;h1&gt;Forbidden&lt;/h1&gt;')
    res = HttpResponse()
    res.status_code = 401
    res['WWW-Authenticate'] = 'Basic'
    return res
return _decorator
</snippet></ROW><ROW><id>21108350</id><snippet>import matplotlib.pyplot as plt
from matplotlib.dates import AutoDateFormatter, AutoDateLocator

xtick_locator = AutoDateLocator()
xtick_formatter = AutoDateFormatter(xtick_locator)

ax = plt.axes()
ax.xaxis.set_major_locator(xtick_locator)
ax.xaxis.set_major_formatter(xtick_formatter)
</snippet></ROW><ROW><id>21108350</id><snippet>import datetime
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.dates import AutoDateFormatter, AutoDateLocator, date2num

x = [datetime.datetime.now() + datetime.timedelta(days=30*i) for i in range(20)]
y = np.random.random((20))

xtick_locator = AutoDateLocator()
xtick_formatter = AutoDateFormatter(xtick_locator)

for i in range(4):
    ax = plt.subplot(2,2,i+1)
    ax.xaxis.set_major_locator(xtick_locator)
    ax.xaxis.set_major_formatter(xtick_formatter)
    ax.plot(date2num(x),y)


plt.show()
</snippet></ROW><ROW><id>21108581</id><snippet>connect_signal1_to_slot1();
connect_signal2_to_slot2();
...
connect_global_done_signal_to_global_done_slot();

slotX: mark_conditionX_done(); if global_done: emit global_done_signal();
global_done_slot: do_foo();
</snippet></ROW><ROW><id>21108680</id><snippet>import cv2

im = cv2.imread('c:/data/ph.jpg')
gray=cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)
contours,hierarchy = cv2.findContours(gray,cv2.RETR_LIST,cv2.CHAIN_APPROX_SIMPLE)
idx =0 
for cnt in contours:
    idx += 1
    x,y,w,h = cv2.boundingRect(cnt)
    roi=im[y:y+h,x:x+w]
    cv2.imwrite(str(idx) + '.jpg', roi)
    #cv2.rectangle(im,(x,y),(x+w,y+h),(200,0,0),2)
cv2.imshow('img',im)
cv2.waitKey(0)    
</snippet></ROW><ROW><id>21108683</id><snippet>struct.pack</snippet></ROW><ROW><id>21108683</id><snippet>struct.unpack</snippet></ROW><ROW><id>21108683</id><snippet>import struct

def to_float(int_):
    return struct.unpack('d', struct.pack('q', int_))[0]

def to_long(float_):
    return struct.unpack('q', struct.pack('d', float_))[0]


data = 0.2345
long_data= to_long(data) #4597616773191482474
new_data = to_float(long_data) #0.2345
</snippet></ROW><ROW><id>21108717</id><snippet>from matplotlib import pyplot as plt
import math
tempList = [20.3, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4, 20.4]
plt.plot(tempList)
plt.ylim(math.floor(min(tempList)), math.ceil(max(tempList)))
plt.show()
</snippet></ROW><ROW><id>21108817</id><snippet>self.driver.find_element_by_xpath
</snippet></ROW><ROW><id>21108817</id><snippet>&lt;input type="file" /&gt;
</snippet></ROW><ROW><id>21109081</id><snippet>try:
    hostname = socket.gethostbyaddr(an_ip_address)[0]
except Exception as exc:
    if exc.errno == 2:
        raise Exception('Not able to do reverse DNS at this time, aborting')
</snippet></ROW><ROW><id>21109081</id><snippet>e.strerror</snippet></ROW><ROW><id>21109081</id><snippet>dir(e)</snippet></ROW><ROW><id>21109141</id><snippet>matplotlib</snippet></ROW><ROW><id>21109141</id><snippet>Axes3D.plot_surface(X, Y, Z, *args, **kwargs)</snippet></ROW><ROW><id>21109141</id><snippet>cmap</snippet></ROW><ROW><id>21109141</id><snippet>matplotlib</snippet></ROW><ROW><id>21109141</id><snippet>mayavi</snippet></ROW><ROW><id>21109165</id><snippet>sqlite3.complete_statement</snippet></ROW><ROW><id>21109512</id><snippet>class Everything(object):
    def __contains__(self, other):
        return True

everything = Everything()

print 212134 in everything
print everything in everything
print None in everything
for i in everything:
    print i # TypeError.
</snippet></ROW><ROW><id>21109512</id><snippet>__contains__</snippet></ROW><ROW><id>21109512</id><snippet>in</snippet></ROW><ROW><id>21109512</id><snippet>__contains__</snippet></ROW><ROW><id>21109512</id><snippet>everything_ever = Everything()
def check_allowed(x, whitelist=everything_ever):
    if x in whitelist:
        print("x is ok")
    else:
        print("x is not ok")
</snippet></ROW><ROW><id>21109707</id><snippet>flags</snippet></ROW><ROW><id>21109707</id><snippet>&gt;&gt;&gt; re.sub(r'[^ac]', "X", "ABC", flags=re.IGNORECASE)
'AXC'
</snippet></ROW><ROW><id>21109707</id><snippet>def sub(pattern, repl, string, count=0, flags=0):
    """Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."""
    return _compile(pattern, flags).sub(repl, string, count)
</snippet></ROW><ROW><id>21109707</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>21109707</id><snippet>count</snippet></ROW><ROW><id>21109707</id><snippet>&gt;&gt;&gt; re.sub(r'[^ac]', "X", "ABC", re.IGNORECASE, count=2)
Traceback (most recent call last):
  File "&lt;ipython-input-82-8b949ec4f925&gt;", line 1, in &lt;module&gt;
    re.sub(r'[^ac]', "X", "ABC", re.IGNORECASE, count=2)
TypeError: sub() got multiple values for keyword argument 'count'
</snippet></ROW><ROW><id>21109707</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>21109707</id><snippet>'XXC'</snippet></ROW><ROW><id>21109707</id><snippet>&gt;&gt;&gt; re.IGNORECASE
2
&gt;&gt;&gt; re.sub(r'[^ac]', "X", "ABC", re.IGNORECASE)
'XXC'
&gt;&gt;&gt; re.sub(r'[^ac]', "X", "ABC", count=2)
'XXC'
&gt;&gt;&gt; re.sub(r'[^ac]', "X", "ABC", 2)
'XXC'
</snippet></ROW><ROW><id>21109723</id><snippet>G</snippet></ROW><ROW><id>21109723</id><snippet>import numpy as np
from scipy import sparse
from scipy.sparse import linalg
import matplotlib.pyplot as plt

def numgrid(n):
    """
    NUMGRID Number the grid points in a two dimensional region.
    G = NUMGRID('R',n) numbers the points on an n-by-n grid in
    an L-shaped domain made from 3/4 of the entire square.
    adapted from C. Moler, 7-16-91, 12-22-93.
    Copyright (c) 1984-94 by The MathWorks, Inc.
    """
    x = np.ones((n,1))*np.linspace(-1,1,n)
    y = np.flipud(x.T)
    G = (x &gt; -1) &amp; (x &lt; 1) &amp; (y &gt; -1) &amp; (y &lt; 1) &amp; ( (x &gt; 0) | (y &gt; 0))
    G = np.where(G,1,0) # boolean to integer
    k = np.where(G)
    G[k] = 1+np.arange(len(k[0]))
    return G

def delsq(G):
    """
    DELSQ  Construct five-point finite difference Laplacian.
    delsq(G) is the sparse form of the two-dimensional,
    5-point discrete negative Laplacian on the grid G.
    adapted from  C. Moler, 7-16-91.
    Copyright (c) 1984-94 by The MathWorks, Inc.
    """
    [m,n] = G.shape
    # Indices of interior points
    G1 = G.flatten()
    p = np.where(G1)[0]
    N = len(p)
    # Connect interior points to themselves with 4's.
    i = G1[p]-1
    j = G1[p]-1
    s = 4*np.ones(p.shape)

    # for k = north, east, south, west
    for k in [-1, m, 1, -m]:
       # Possible neighbors in k-th direction
       Q = G1[p+k]
       # Index of points with interior neighbors
       q = np.where(Q)[0]
       # Connect interior points to neighbors with -1's.
       i = np.concatenate([i, G1[p[q]]-1])
       j = np.concatenate([j,Q[q]-1])
       s = np.concatenate([s,-np.ones(q.shape)])
    # sparse matrix with 5 diagonals
    return sparse.csr_matrix((s, (i,j)),(N,N))

if __name__ == '__main__':
    print numgrid(6)
    print delsq(numgrid(6)).todense()
    G = numgrid(32)
    D = delsq(G)
    N = D.shape[0]
    rhs = np.ones((N,1))
    u = linalg.spsolve(D, rhs) # vector solution
    U = np.zeros(G.shape) # map u back onto G space
    U[G&gt;0] = u[G[G&gt;0]-1]
    plt.contour(U)
    plt.show()
</snippet></ROW><ROW><id>21109919</id><snippet>if not any(s in msg for s in FILTER):</snippet></ROW><ROW><id>21109958</id><snippet>~</snippet></ROW><ROW><id>21109958</id><snippet>subprocess.call(['rm', os.path.expanduser('~/.bash_history')])
</snippet></ROW><ROW><id>21109958</id><snippet>history</snippet></ROW><ROW><id>21109958</id><snippet>subprocess.call(['bash', '-c', 'history -c'])
</snippet></ROW><ROW><id>21109961</id><snippet>set_request_factory</snippet></ROW><ROW><id>21109961</id><snippet>from pyramid.request import Request
from pyramid.request import Response

def request_factory(environ):
    request = Request(environ)
    if request.is_xhr:
        request.response = Response()
        request.response.headerlist = []
        request.response.headerlist.extend(
            (
                ('Access-Control-Allow-Origin', '*'),
                ('Content-Type', 'application/json')
            )
        )
    return request

config.set_request_factory(request_factory)
</snippet></ROW><ROW><id>21110048</id><snippet>(\S)+</snippet></ROW><ROW><id>21110048</id><snippet>\S</snippet></ROW><ROW><id>21110048</id><snippet>(\S+)</snippet></ROW><ROW><id>21110048</id><snippet>\S</snippet></ROW><ROW><id>21110048</id><snippet>[^\s/]</snippet></ROW><ROW><id>21110048</id><snippet>&gt;&gt;&gt; re.findall(r"/r/([^\s/]+)", string1)
['whatever3', 'whatever2']
</snippet></ROW><ROW><id>21110109</id><snippet>&lt;?php
set_time_limit(0);//no max exec time
while(true)
{
    echo 'Still running',PHP_EOL;
}
</snippet></ROW><ROW><id>21110109</id><snippet>memory_limit</snippet></ROW><ROW><id>21110109</id><snippet>&lt;?php
set_time_limit(0);
ini_set('memory_limit', -1);
while(true)
{
    //do stuff
    if ($foobar === 'whatever') break;//exit script
}
</snippet></ROW><ROW><id>21110109</id><snippet>&lt;?php
require(realpath(__DIR__.'/lib/Xml.php');//include some script
</snippet></ROW><ROW><id>21110109</id><snippet>require</snippet></ROW><ROW><id>21110109</id><snippet>set_time_limit</snippet></ROW><ROW><id>21110109</id><snippet>require</snippet></ROW><ROW><id>21110109</id><snippet>#include</snippet></ROW><ROW><id>21110109</id><snippet>while(true){}</snippet></ROW><ROW><id>21110783</id><snippet>      {"payload":"http://somewonderfulsite.com/logeventType=pushSceneToChannel&amp; \
      networkName=endoftimes&amp;networkEmail=me@me.com&amp;channelName=blastoff&amp; \
      sceneType=originalAudio&amp;sceneUrl=%(VARIABLE HERE)s&amp;sceneDescp=uhhuh&amp; \
      sceneTag1=ok&amp;sceneTag3=ko&amp; \
      sceneTip=22&amp;sceneTipDnom=BTC&amp;networkAvatar=empty&amp; \
      timestamp=current_milli_time();" % PUTVARIABLE}
</snippet></ROW><ROW><id>21110790</id><snippet>import numpy
r=numpy.array([3,3,3])
k=numpy.array([numpy.nan,0,numpy.nan])
n=numpy.array([numpy.nan,0,0])
indxZeros=numpy.where(k==0)
indxNonZeros=numpy.where(k!=0)
d=numpy.empty(k.shape)
d[indxZeros]=0
d[indxNonZeros]=n[indxNonZeros]/k[indxNonZeros]
print d
</snippet></ROW><ROW><id>21110800</id><snippet>listdir</snippet></ROW><ROW><id>21110800</id><snippet>os</snippet></ROW><ROW><id>21110800</id><snippet>os.listdir</snippet></ROW><ROW><id>21110800</id><snippet>listdir</snippet></ROW><ROW><id>21110800</id><snippet>all_files = listdir("/root/raw/")
</snippet></ROW><ROW><id>21110800</id><snippet>import os
</snippet></ROW><ROW><id>21111008</id><snippet>repr</snippet></ROW><ROW><id>21111008</id><snippet>pprint</snippet></ROW><ROW><id>21111008</id><snippet>IPython.lib.pretty.RepresentationPrinter.pretty</snippet></ROW><ROW><id>21111008</id><snippet>IPython.lib.pretty</snippet></ROW><ROW><id>21111008</id><snippet>RepresentationPrinter.pretty</snippet></ROW><ROW><id>21111008</id><snippet>IPython.lib.pretty.pretty</snippet></ROW><ROW><id>21111008</id><snippet>&gt;&gt;&gt; from IPython.lib.pretty import pretty
&gt;&gt;&gt; pretty(type([]))
'list'
</snippet></ROW><ROW><id>21111008</id><snippet>IPython.lib.pretty.pprint</snippet></ROW><ROW><id>21111008</id><snippet>&gt;&gt;&gt; from IPython.lib.pretty import pprint
&gt;&gt;&gt; pprint(type([]))
list
</snippet></ROW><ROW><id>21111008</id><snippet>pprint</snippet></ROW><ROW><id>21111348</id><snippet>result</snippet></ROW><ROW><id>21111348</id><snippet>None</snippet></ROW><ROW><id>21111348</id><snippet>with open("file1.txt","r") as fin:
    lines = fin.readlines()
    with open("file2.txt","w") as fout:
        for line in lines:
            result = re.search(r'\(.*\)', line)
            if result:     # check if not None
                res = "\n" + result.group()
                fout.write(res)
</snippet></ROW><ROW><id>21111485</id><snippet>&gt;&gt;&gt; import package
&gt;&gt;&gt; package.something
</snippet></ROW><ROW><id>21111485</id><snippet>something</snippet></ROW><ROW><id>21111485</id><snippet>package/__init__.py</snippet></ROW><ROW><id>21111485</id><snippet>web.py</snippet></ROW><ROW><id>21111485</id><snippet>&gt;&gt;&gt; import web  # which is a package
&gt;&gt;&gt; web.httpserver  # which is a module located in web/httpserver.py
&lt;module 'web.httpserver' ...&gt;
</snippet></ROW><ROW><id>21111485</id><snippet>web/__init__.py</snippet></ROW><ROW><id>21111485</id><snippet>import httpserver</snippet></ROW><ROW><id>21111485</id><snippet>urllib/__init__.py</snippet></ROW><ROW><id>21111485</id><snippet>import</snippet></ROW><ROW><id>21111485</id><snippet>request</snippet></ROW><ROW><id>21111485</id><snippet>import</snippet></ROW><ROW><id>21111485</id><snippet>__init__.py</snippet></ROW><ROW><id>21111485</id><snippet>import urllib.request</snippet></ROW><ROW><id>21111485</id><snippet>dir(urllib)</snippet></ROW><ROW><id>21111485</id><snippet>response</snippet></ROW><ROW><id>21111485</id><snippet>urllib.request</snippet></ROW><ROW><id>21111485</id><snippet>import</snippet></ROW><ROW><id>21111485</id><snippet>import urllib.error</snippet></ROW><ROW><id>21111485</id><snippet>request</snippet></ROW><ROW><id>21111485</id><snippet>error</snippet></ROW><ROW><id>21111485</id><snippet>sys.modules</snippet></ROW><ROW><id>21111723</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>21111723</id><snippet>from collections import defaultdict

numbered = defaultdict(list)
for i in tup:
    numbered[i[1]].append(i)
</snippet></ROW><ROW><id>21111723</id><snippet>numbered[1]</snippet></ROW><ROW><id>21111723</id><snippet>numbered[2]</snippet></ROW><ROW><id>21111723</id><snippet>i[1]</snippet></ROW><ROW><id>21111723</id><snippet>if</snippet></ROW><ROW><id>21111723</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; tup = [('x',1),('y',2),('z',1)]
&gt;&gt;&gt; numbered = defaultdict(list)
&gt;&gt;&gt; for i in tup:
...     numbered[i[1]].append(i)
... 
&gt;&gt;&gt; numbered
defaultdict(&lt;type 'list'&gt;, {1: [('x', 1), ('z', 1)], 2: [('y', 2)]})
&gt;&gt;&gt; numbered[1]
[('x', 1), ('z', 1)]
&gt;&gt;&gt; numbered[2]
[('y', 2)]
</snippet></ROW><ROW><id>21111723</id><snippet>defaultdict</snippet></ROW><ROW><id>21111723</id><snippet>dict</snippet></ROW><ROW><id>21111723</id><snippet>numbered = {}
for i in tup:
    numbered.setdefault(i[1], []).append(i)
</snippet></ROW><ROW><id>21111763</id><snippet>db.Employees.find({departmentID:{$regex:'^abp'}}) 
</snippet></ROW><ROW><id>21112126</id><snippet>Login</snippet></ROW><ROW><id>21112126</id><snippet>__init__</snippet></ROW><ROW><id>21112126</id><snippet>class Login:
    def __init__(self,method):
        self.authmethod=method()
</snippet></ROW><ROW><id>21112126</id><snippet>Login</snippet></ROW><ROW><id>21112126</id><snippet>class Login:
</snippet></ROW><ROW><id>21112126</id><snippet>class Login(object):
</snippet></ROW><ROW><id>21112170</id><snippet>ztrap_emailreportoptin</snippet></ROW><ROW><id>21112170</id><snippet>SELECT
    table_name, column_name, constraint_name,
    referenced_table_name, referenced_column_name
FROM information_schema.key_column_usage
WHERE referenced_table_name IS NOT NULL;
</snippet></ROW><ROW><id>21112174</id><snippet>&gt;&gt;&gt; somedict = {}
&gt;&gt;&gt; somedict['foo'] = {'bar': 0}
&gt;&gt;&gt; somedict['spam'] = somedict['foo']
&gt;&gt;&gt; somedict['foo']['bar'] += 1
&gt;&gt;&gt; somedict['spam']
{'bar': 1}
&gt;&gt;&gt; somedict['foo'] is somedict['spam']
True
</snippet></ROW><ROW><id>21112174</id><snippet>foo</snippet></ROW><ROW><id>21112174</id><snippet>spam</snippet></ROW><ROW><id>21112174</id><snippet>bar</snippet></ROW><ROW><id>21112174</id><snippet>somedict['spam'] = {'bar': 0}
</snippet></ROW><ROW><id>21112174</id><snippet>somedict['spam'] = somedict['foo'].copy()
</snippet></ROW><ROW><id>21112248</id><snippet>Storage()</snippet></ROW><ROW><id>21112248</id><snippet>uri         - URI to sqlite database, sqlite://&lt;sqlite-database&gt;:&lt;table&gt;
</snippet></ROW><ROW><id>21112248</id><snippet>sqlite:///some/path/to/database.db:foobar
</snippet></ROW><ROW><id>21112248</id><snippet>/some/path/to/database.db</snippet></ROW><ROW><id>21112248</id><snippet>foobar</snippet></ROW><ROW><id>21112838</id><snippet>dict</snippet></ROW><ROW><id>21112838</id><snippet>for</snippet></ROW><ROW><id>21112838</id><snippet>from itertools import groupby
from operator import itemgetter

res = {key: sum(t[1] for t in group) 
       for key, group in groupby(sorted(data, key=itemgetter(0)), key=itemgetter(0))}
</snippet></ROW><ROW><id>21113214</id><snippet>.egg</snippet></ROW><ROW><id>21113214</id><snippet>.whl</snippet></ROW><ROW><id>21113354</id><snippet>binary</snippet></ROW><ROW><id>21113354</id><snippet>binary = [0,0,0,0,0,0,0,0,0] # 9 bits

for i in range (8,-1,-1):
    binary[i] = total%2
    total=int(total / 2)

for i in range (9):
    print(binary[i],end='')
print (" ")
</snippet></ROW><ROW><id>21113467</id><snippet>nan</snippet></ROW><ROW><id>21113467</id><snippet>a</snippet></ROW><ROW><id>21113467</id><snippet>weights</snippet></ROW><ROW><id>21113467</id><snippet>numpy.average</snippet></ROW><ROW><id>21113467</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([1,2,np.nan,4])
&gt;&gt;&gt; weights = np.array([4,3,2,1])
&gt;&gt;&gt; indices = np.where(np.logical_not(np.isnan(a)))[0]
&gt;&gt;&gt; np.average(a[indices], weights=weights[indices])
1.75
</snippet></ROW><ROW><id>21113467</id><snippet>&gt;&gt;&gt; indices = ~np.isnan(a)
&gt;&gt;&gt; np.average(a[indices], weights=weights[indices])
1.75
</snippet></ROW><ROW><id>21113468</id><snippet>foo(**args)
</snippet></ROW><ROW><id>21113468</id><snippet>foo()</snippet></ROW><ROW><id>21113468</id><snippet>&gt;&gt;&gt; def foo(a, b, c):
...     print a, b, c
... 
&gt;&gt;&gt; foo(c=3, a=5, b=42)
5 42 3
&gt;&gt;&gt; args = {'a': 1, 'b' : 17, 'c': 23}
&gt;&gt;&gt; foo(**args)
1 17 23
</snippet></ROW><ROW><id>21113468</id><snippet>inspect.getargspec()</snippet></ROW><ROW><id>21113468</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getargspec(foo)
ArgSpec(args=['a', 'b', 'c'], varargs=None, keywords=None, defaults=None)
</snippet></ROW><ROW><id>21113477</id><snippet>import Tkinter as tk

class TimedToplevel(object):
    def __init__(self, parent, milliseconds):
        self.milliseconds = milliseconds
        self.parent = parent
        self.parent.after(milliseconds, self.create_window)

    def create_window(self):
        self.top = tk.Toplevel(self.parent)
        label = tk.Label(self.top, text="Your time has expired")
        button = tk.Button(self.top, text="Ok", command=self.dismiss)
        button.pack(side="bottom")
        label.pack(side="top", fill="both", expand=True)

    def dismiss(self):
        self.top.destroy()


class Example(tk.Frame):
    def __init__(self, master):
        self.alerts = []
        tk.Frame.__init__(self, master)
        t = tk.Text(self, width=40, height=4, wrap="word")
        t.pack(side="top", fill="both", expand=True)
        t.insert("end", "type here, to see that you can type " +
                 "while the timers are running")
        for delay in (5,10,15):
            label = "Alert me in %s seconds" % delay
            b = tk.Button(self, text=label, 
                          command=lambda ms=delay*1000: self.alert(ms))
            b.pack(side="top")

    def alert(self, delay):
        alert=TimedToplevel(self, delay)
        self.alerts.append(alert)

if __name__ == "__main__":
    root = tk.Tk()
    Example(root).pack(fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>21113760</id><snippet>from pylab import *
import matplotlib.pyplot as plt
from datetime import datetime
import time
from matplotlib.dates import  DateFormatter, WeekdayLocator, HourLocator, \
     DayLocator, MONDAY
from matplotlib.finance import candlestick,\
     plot_day_summary, candlestick2


mondays = WeekdayLocator(MONDAY)        # major ticks on the mondays
alldays    = DayLocator()              # minor ticks on the days
weekFormatter = DateFormatter('%b %d')  # e.g., Jan 12
dayFormatter = DateFormatter('%d')      # e.g., 12

#starting from dates expressed as strings...
Date1 = '01/01/2010'
Date2 = '02/01/2010'
#...you convert them in float numbers....
Date1 = date2num(datetime.strptime(Date1, "%d/%m/%Y"))
Date2 = date2num(datetime.strptime(Date2, "%d/%m/%Y"))
#so redefining the Prices list of tuples...
Prices = [(Date1, 1.123, 1.212, 1.463, 1.056), (Date2,1.121, 1.216, 1.498, 1.002)]
#and then following the official example. 
fig, ax = plt.subplots()
fig.subplots_adjust(bottom=0.2)
ax.xaxis.set_major_locator(mondays)
ax.xaxis.set_minor_locator(alldays)
ax.xaxis.set_major_formatter(weekFormatter)
candlestick(ax, Prices, width=0.6)

ax.xaxis_date()
ax.autoscale_view()
plt.setp( plt.gca().get_xticklabels(), rotation=45, horizontalalignment='right')

plt.show()
</snippet></ROW><ROW><id>21113954</id><snippet>ubuntu@ip-10-137-27-87:~/public_html/clupus.com$ ls ~/public_html/clupus.com/ -la
total 16
drwxrwxr-x 3 ubuntu ubuntu 4096 Jan 14 11:13 .
drwxrwxr-x 3 ubuntu ubuntu 4096 Jan 14 10:38 ..
drwxr-xr-x 7 ubuntu ubuntu 4096 Jan 14 10:43 clupus
-rw-rw-r-- 1 ubuntu ubuntu  219 Jan 14 14:09 clupus.wsgi
ubuntu@ip-10-137-27-87:~/public_html/clupus.com$ 
</snippet></ROW><ROW><id>21113954</id><snippet>os.path.expanduser</snippet></ROW><ROW><id>21113954</id><snippet>~</snippet></ROW><ROW><id>21113954</id><snippet>#sys.path.append('~/public_html/clupus.com'
sys.path.append('/home/ubuntu/public_html/clupus.com/clupus')
</snippet></ROW><ROW><id>21113954</id><snippet>ImportError: Could not import settings 'clupus.settings'</snippet></ROW><ROW><id>21113954</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>21113954</id><snippet>'clupus.settings'</snippet></ROW><ROW><id>21113954</id><snippet>settings.py</snippet></ROW><ROW><id>21113954</id><snippet>/home/ubuntu/public_html/clupus.com/clupus/clupus</snippet></ROW><ROW><id>21113954</id><snippet>#os.environ['DJANGO_SETTINGS_MODULE'] = 'clupus.clupus.settings'
os.environ['DJANGO_SETTINGS_MODULE'] = 'clupus.settings'
</snippet></ROW><ROW><id>21114284</id><snippet>df = df.groupby(['code', 'colour']).apply(lambda x:x.set_index('id').to_dict('dict')['amount'])
</snippet></ROW><ROW><id>21114284</id><snippet>df.index = ['/'.join(i) for i in df.index]
</snippet></ROW><ROW><id>21114284</id><snippet>df = df.reset_index()
</snippet></ROW><ROW><id>21114284</id><snippet>df.columns=['code/colour','id:amount']
</snippet></ROW><ROW><id>21114284</id><snippet>In [105]: df
Out[105]: 
   code/colour                               id:amount
0    one/black                     {1: 0.392264412544}
1    one/white  {2: 2.13950686015, 7: -0.393002947047}
2  three/black                      {6: -2.0766612539}
3  three/white                     {4: -1.18058561325}
4    two/black                     {5: -1.51959565941}
5    two/white  {8: -1.7659863039, 3: -0.595666853895}
</snippet></ROW><ROW><id>21114410</id><snippet>fmt</snippet></ROW><ROW><id>21114410</id><snippet>fmt : str or sequence of strs, optional
    A single format (%10.5f), a sequence of formats, or a
    multi-format string, e.g. 'Iteration %d -- %10.5f', in which
    case `delimiter` is ignored. For complex `X`, the legal options
    for `fmt` are:
        a) a single specifier, `fmt='%.4e'`, resulting in numbers formatted
            like `' (%s+%sj)' % (fmt, fmt)`
        b) a full string specifying every real and imaginary part, e.g.
            `' %.4e %+.4j %.4e %+.4j %.4e %+.4j'` for 3 columns
        c) a list of specifiers, one per column - in this case, the real
            and imaginary part must have separate specifiers,
            e.g. `['%.3e + %.3ej', '(%.15e%+.15ej)']` for 2 columns
</snippet></ROW><ROW><id>21114410</id><snippet>numpy.savetxt('file.csv', array, delimiter = ',', fmt = ['%d'] + ['%.4f']*999)
</snippet></ROW><ROW><id>21114450</id><snippet>def aux():
    return "VoG - Sucess" 

class VariabilityOfGradients(object):
    aux = staticmethod(aux)
</snippet></ROW><ROW><id>21114450</id><snippet>import copy_reg
import types
from itertools import product
import multiprocessing as mp

def _pickle_method(method):
    """
    Author: Steven Bethard (author of argparse)
    http://bytes.com/topic/python/answers/552476-why-cant-you-pickle-instancemethods
    """
    func_name = method.im_func.__name__
    obj = method.im_self
    cls = method.im_class
    cls_name = ''
    if func_name.startswith('__') and not func_name.endswith('__'):
        cls_name = cls.__name__.lstrip('_')
    if cls_name:
        func_name = '_' + cls_name + func_name
    return _unpickle_method, (func_name, obj, cls)


def _unpickle_method(func_name, obj, cls):
    """
    Author: Steven Bethard
    http://bytes.com/topic/python/answers/552476-why-cant-you-pickle-instancemethods
    """
    for cls in cls.mro():
        try:
            func = cls.__dict__[func_name]
        except KeyError:
            pass
        else:
            break
    return func.__get__(obj, cls)

copy_reg.pickle(types.MethodType, _pickle_method, _unpickle_method)

class ImageData(object):

    def __init__(self, width=60, height=60):
        self.width = width
        self.height = height
        self.data = []
        for i in range(width):
            self.data.append([0] * height)

    def shepard_interpolation(self, seeds=20):
        print "ImD - Success"       

def aux():
    return "VoG - Sucess" 

class VariabilityOfGradients(object):
    aux = staticmethod(aux)

    @staticmethod
    def calculate_orientation_uncertainty():
        pool = mp.Pool()
        results = []
        for x, y in product(range(1, 5), range(1, 5)):
            # result = pool.apply_async(aux) # this works too
            result = pool.apply_async(VariabilityOfGradients.aux, callback=results.append)
        pool.close()
        pool.join()
        print(results)


if __name__ == '__main__':  
    results = []
    pool = mp.Pool()
    for _ in range(3):
        result = pool.apply_async(ImageData.shepard_interpolation, args=[ImageData()])
        results.append(result.get())
    pool.close()
    pool.join()

    VariabilityOfGradients.calculate_orientation_uncertainty()   
</snippet></ROW><ROW><id>21114450</id><snippet>ImD - Success
ImD - Success
ImD - Success
['VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess', 'VoG - Sucess']
</snippet></ROW><ROW><id>21114450</id><snippet>pool.apply_async</snippet></ROW><ROW><id>21114450</id><snippet>ImageData.shepard_interpolation</snippet></ROW><ROW><id>21114450</id><snippet>for _ in range(3):
    result = pool.apply_async(ImageData.shepard_interpolation, args=[ImageData()])
    results.append(result.get())
</snippet></ROW><ROW><id>21114450</id><snippet>ImageData.shepard_interpolation</snippet></ROW><ROW><id>21114450</id><snippet>for _ in range(3):
    pool.apply_async(ImageData.shepard_interpolation, args=[ImageData()],
                     callback=results.append)
</snippet></ROW><ROW><id>21114450</id><snippet>results.append</snippet></ROW><ROW><id>21114450</id><snippet>pool.apply_async</snippet></ROW><ROW><id>21114450</id><snippet>ImageData.shepard_interpolation</snippet></ROW><ROW><id>21114450</id><snippet>pool.map</snippet></ROW><ROW><id>21114450</id><snippet>results = pool.map(ImageData.shepard_interpolation, [ImageData()]*3)
</snippet></ROW><ROW><id>21114828</id><snippet>Beach.java

public class Beach {

    private String name;
    private String city;


    public Beach(String name, String city){
        this.name = name;
        this.city = city;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = city;
    }

}
Using Beach.java in Jython

&gt;&gt;&gt; import Beach
&gt;&gt;&gt; beach = Beach("Cocoa Beach","Cocoa Beach")
&gt;&gt;&gt; beach.getName()
u'Cocoa Beach'
&gt;&gt;&gt; print beach.getName()
Cocoa Beach
</snippet></ROW><ROW><id>21114908</id><snippet>url_dict</snippet></ROW><ROW><id>21114908</id><snippet>url_dict = {line.split()[0]: int(line.split()[1])}
</snippet></ROW><ROW><id>21114908</id><snippet>for line in data:
    key, val = line.split()
    if key in url_dict:
        url_dict[key] += val
    else:
        url_dict[key] = val
</snippet></ROW><ROW><id>21114908</id><snippet>for key in urls_list:
    if key in url_dict:
        url_dict[key] += val
    else:
        url_dict[key] = val  
</snippet></ROW><ROW><id>21114908</id><snippet>try</snippet></ROW><ROW><id>21114908</id><snippet>try:
   with open(urls_file_path, "r") as f:
        data = f.readlines()
except IOError:
    logging.critical('no files to read from %s' % urls_file_path)
    raise IOError('no files to read from %s' % urls_file_path)
else:
    # rest of your code
</snippet></ROW><ROW><id>21115148</id><snippet>itertools.combinations</snippet></ROW><ROW><id>21115148</id><snippet>from itertools import combinations

for pair in combinations(combinations(l, 2), 2):
    # use pair
</snippet></ROW><ROW><id>21115148</id><snippet>&gt;&gt;&gt; l = [0,1,2,3]
&gt;&gt;&gt; list(combinations(l, 2))
[(0, 1), (0, 2), (0, 3), (1, 2), (1, 3), (2, 3)]
</snippet></ROW><ROW><id>21115148</id><snippet>&gt;&gt;&gt; list(combinations(combinations(l, 2), 2))
[((0, 1), (0, 2)), ((0, 1), (0, 3)), ((0, 1), (1, 2)), ((0, 1), (1, 3)), 
 ((0, 1), (2, 3)), ((0, 2), (0, 3)), ((0, 2), (1, 2)), ((0, 2), (1, 3)), 
 ((0, 2), (2, 3)), ((0, 3), (1, 2)), ((0, 3), (1, 3)), ((0, 3), (2, 3)), 
 ((1, 2), (1, 3)), ((1, 2), (2, 3)), ((1, 3), (2, 3))]
</snippet></ROW><ROW><id>21115264</id><snippet>os._exit(n)</snippet></ROW><ROW><id>21115357</id><snippet>__iadd__</snippet></ROW><ROW><id>21115357</id><snippet>+=</snippet></ROW><ROW><id>21115357</id><snippet>__add__</snippet></ROW><ROW><id>21115357</id><snippet>WorldTile</snippet></ROW><ROW><id>21115357</id><snippet>int</snippet></ROW><ROW><id>21115357</id><snippet>def __add__(self, other):
    return WorldTile(self.resource + other)
</snippet></ROW><ROW><id>21115357</id><snippet>+</snippet></ROW><ROW><id>21115357</id><snippet>+=</snippet></ROW><ROW><id>21115357</id><snippet>self.objects</snippet></ROW><ROW><id>21115525</id><snippet>pcolormesh</snippet></ROW><ROW><id>21115525</id><snippet>import numpy as np
import matplotlib.pyplot as plt

nrows = 10
ncols = 10
a = np.random.rand(nrows, ncols)
pcm = plt.pcolormesh(a, cmap="Greys")

# Apparently need to render once in order to assign facecolors
# to the grid created by pcolormesh:
plt.draw()

fc = pcm.get_facecolors()
fc_grid = fc.reshape(nrows, ncols, -1)

alpha = 0.2
fc_grid[:, 3:6] = (1-alpha)*fc_grid[:, 3:6] + alpha*np.array([1.0, 0, 0, 1])
fc_grid[4:7, 7:] = (1-alpha)*fc_grid[4:7, 7:] + alpha*np.array([0, 1.0, 0, 1])

plt.show()
</snippet></ROW><ROW><id>21115632</id><snippet>:</snippet></ROW><ROW><id>21115697</id><snippet>return subL(L[:x-1])
</snippet></ROW><ROW><id>21115697</id><snippet>None</snippet></ROW><ROW><id>21115697</id><snippet>print</snippet></ROW><ROW><id>21115697</id><snippet>subL(x)
</snippet></ROW><ROW><id>21115697</id><snippet>None</snippet></ROW><ROW><id>21115697</id><snippet>None</snippet></ROW><ROW><id>21115697</id><snippet>def subL(L):
    if L:
        print(L)
        return subL(L[:-1])
</snippet></ROW><ROW><id>21115710</id><snippet>class MyMeta(type):
    def __new__(mcl, name, bases, nmspc):
        if "__call__" in nmspc:
            nmspc["__call__"] = trace(nmspc["__call__"])
        return super(MyMeta, mcl).__new__(mcl, name, bases, nmspc)

class BaseClass(object):
    __metaclass__ = MyMeta
</snippet></ROW><ROW><id>21115710</id><snippet>BaseClass</snippet></ROW><ROW><id>21115710</id><snippet>__call__</snippet></ROW><ROW><id>21115710</id><snippet>BaseClass</snippet></ROW><ROW><id>21115710</id><snippet>object</snippet></ROW><ROW><id>21115710</id><snippet>MyMeta</snippet></ROW><ROW><id>21115710</id><snippet>type</snippet></ROW><ROW><id>21115970</id><snippet>sorted</snippet></ROW><ROW><id>21115970</id><snippet>list.sort</snippet></ROW><ROW><id>21115970</id><snippet>key</snippet></ROW><ROW><id>21115970</id><snippet>reverse=True</snippet></ROW><ROW><id>21115970</id><snippet>&gt;&gt;&gt; word_list = ['banana', 'apple', 'pineapple']
&gt;&gt;&gt; sorted(word_list,
...        key=lambda word: sum(ch in 'aeiou' for ch in word),
...        reverse=True)
['pineapple', 'banana', 'apple']
</snippet></ROW><ROW><id>21115972</id><snippet>~</snippet></ROW><ROW><id>21115972</id><snippet>any</snippet></ROW><ROW><id>21115972</id><snippet>q = session.query(Person)
q = q.filter(Person.building == g.current_building)
q = q.filter(~Person.groups.any())
</snippet></ROW><ROW><id>21115972</id><snippet>any</snippet></ROW><ROW><id>21116119</id><snippet>ModelForm</snippet></ROW><ROW><id>21116119</id><snippet>core</snippet></ROW><ROW><id>21116119</id><snippet>BaseModel</snippet></ROW><ROW><id>21116119</id><snippet>BaseForm</snippet></ROW><ROW><id>21116187</id><snippet>path='\\\\WALL-E\\RedirectedFolders\\rmarshall\\My Documents\\Downloads\\'
</snippet></ROW><ROW><id>21116263</id><snippet>3&gt;&gt; b"'Zo\xc3\xab\\'s'".decode('ascii', errors='surrogateescape')
"'Zo\udcc3\udcab\\'s'"
3&gt;&gt; "'Zo\udcc3\udcab\\'s'".encode('ascii', errors='surrogateescape')
b"'Zo\xc3\xab\\'s'"
</snippet></ROW><ROW><id>21116350</id><snippet>@gen.coroutine
def set_project_status(self, pid, status):
    try:
        result = yield motor.Op(self.db[S.DB_PROJECT_TABLE].update,
                       {'PID': pid}, {'$set': {'STATUS': status}})

        logging.debug('update result: {0}'.format(result))        
        project = yield motor.Op(self.db[S.DB_PROJECT_TABLE].find_one, {'PID': pid})
        logging.debug('set_project_status project {0}'.format(project))
    except Exception,e:
        logging.debug('{0} {1} {2}'.format(pid, status, e))
        raise gen.Return(False)
</snippet></ROW><ROW><id>21116350</id><snippet>result.get('n') == 1</snippet></ROW><ROW><id>21116502</id><snippet>0</snippet></ROW><ROW><id>21116502</id><snippet>127</snippet></ROW><ROW><id>21116502</id><snippet>\x80</snippet></ROW><ROW><id>21116654</id><snippet>os.rename()</snippet></ROW><ROW><id>21116654</id><snippet>shutil.move()</snippet></ROW><ROW><id>21116654</id><snippet>import shutil
shutil.move(src,dest)
</snippet></ROW><ROW><id>21116927</id><snippet>/t</snippet></ROW><ROW><id>21116927</id><snippet>/test</snippet></ROW><ROW><id>21116927</id><snippet>localhost:6543/#/t</snippet></ROW><ROW><id>21116965</id><snippet>return sparse_mat, session_id
</snippet></ROW><ROW><id>21116965</id><snippet>m, id = your_function()
</snippet></ROW><ROW><id>21117074</id><snippet>boto</snippet></ROW><ROW><id>21117074</id><snippet>JSONResponseError</snippet></ROW><ROW><id>21117074</id><snippet>DynamoDBValidationError</snippet></ROW><ROW><id>21117074</id><snippet>__init__</snippet></ROW><ROW><id>21117074</id><snippet>self.status = status
self.reason = reason
self.body = body
if self.body:
    self.error_message = self.body.get('message', None)
    self.error_code = self.body.get('__type', None)
    if self.error_code:
        self.error_code = self.error_code.split('#')[-1]
</snippet></ROW><ROW><id>21117074</id><snippet>e.error_message</snippet></ROW><ROW><id>21117074</id><snippet>e</snippet></ROW><ROW><id>21117074</id><snippet>for attr in dir(e): 
    print "e[%r] = '''%s'''" % (attr, getattr(e, attr))
</snippet></ROW><ROW><id>21117395</id><snippet>line</snippet></ROW><ROW><id>21117395</id><snippet> time.strptime(line.decode('ascii'), '%Y-%m-%d ...')
</snippet></ROW><ROW><id>21117395</id><snippet>'ignore'</snippet></ROW><ROW><id>21117395</id><snippet>strptime()</snippet></ROW><ROW><id>21117627</id><snippet>qs = Product.objects.order_by('website__name')
</snippet></ROW><ROW><id>21117627</id><snippet>itertools.groupby</snippet></ROW><ROW><id>21117627</id><snippet>from itertools import groupby
from operator import attrgetter

keyfunc = attrgetter('website')
qs = Product.objects.order_by('website__name')
groups = []
uniquekeys = []
for website_name, products in groupby(qs, keyfunc):
    groups.append(list(products))
    uniquekeys.append(website_name)
</snippet></ROW><ROW><id>21117627</id><snippet>regroup</snippet></ROW><ROW><id>21117627</id><snippet>{{% regroup qs by website as product_list %}

&lt;ul&gt;
{% for group in product_list %}
    &lt;li&gt;{{ group.grouper.name }}
    &lt;ul&gt;
        {% for product in group.list %}
          &lt;li&gt;{{ product.name }}: {{ product.website }}&lt;/li&gt;
        {% endfor %}
    &lt;/ul&gt;
    &lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>21117698</id><snippet>cur.execute('SELECT * from jivemessage WHERE body LIKE %s', ("%{}%".format(i),))
</snippet></ROW><ROW><id>21117698</id><snippet>%s</snippet></ROW><ROW><id>21118139</id><snippet>encode('utf8')</snippet></ROW><ROW><id>21118174</id><snippet>date_parser</snippet></ROW><ROW><id>21118174</id><snippet>In [291]: from dateutil.parser import parse
In [292]: import datetime as dt
In [293]: def date_parser(x):
   .....:     date, hour = x.split(' ')
   .....:     return parse(date) + dt.timedelta(0, 3600*int(hour))

In [298]: pd.read_csv('test.csv', parse_dates=[[0,1]], date_parser=date_parser)
Out[298]: 
            date_hour  a  b  c
0 2013-10-01 00:00:00  1  1  1
1 2013-10-01 00:00:00  2  2  2
2 2013-10-01 00:00:00  3  3  3
3 2013-10-01 01:00:00  4  4  4
4 2013-10-01 01:00:00  5  5  5
</snippet></ROW><ROW><id>21118179</id><snippet>&gt;&gt;&gt; groups = df.groupby(['code','colour']).groups
&gt;&gt;&gt; groups['one','white']
[1L, 6L]
</snippet></ROW><ROW><id>21118307</id><snippet>cherrypy.Application</snippet></ROW><ROW><id>21118535</id><snippet>itertools.product()</snippet></ROW><ROW><id>21118535</id><snippet>from itertools import product

for a, b, c in product(A, B, C):
</snippet></ROW><ROW><id>21118535</id><snippet>A == B == C</snippet></ROW><ROW><id>21118535</id><snippet>for a, b, c in product(A, repeat=3):
</snippet></ROW><ROW><id>21118535</id><snippet>lists = [A, B, C, D, E]
for combination in product(*lists):
</snippet></ROW><ROW><id>21118716</id><snippet>c</snippet></ROW><ROW><id>21118716</id><snippet>adb</snippet></ROW><ROW><id>21118718</id><snippet>MemoryError</snippet></ROW><ROW><id>21118935</id><snippet>container = c.create_container('kermit/hellonode', name='hello', ports=[1337])
c.start(container, publish_all_ports=True)
info = c.inspect_container(container)
host_port = info['NetworkSettings']['Ports']['1337'][0]['HostPort']
</snippet></ROW><ROW><id>21118935</id><snippet>0.0.0.0:&lt;host_port&gt;</snippet></ROW><ROW><id>21119183</id><snippet>from PyQt4 import QtGui, QtCore

class CustomWidget(QtGui.QWidget):

    def __init__(self, parent=None):
        super(QtGui.QWidget, self).__init__(parent)
        layout = QtGui.QVBoxLayout(self)

        self.lineEdit1 = QtGui.QLineEdit(self)
        layout.addWidget(self.lineEdit1)
        self.pushButton = QtGui.QPushButton("line1 -&gt; line2", self)
        self.pushButton.clicked.connect(self.onClick)
        layout.addWidget(self.pushButton)
        self.lineEdit2 = QtGui.QLineEdit(self)
        layout.addWidget(self.lineEdit2)

    def onClick(self):
        self.lineEdit2.setText(self.lineEdit1.text())


if __name__ == "__main__":
    import sys
    app = QtGui.QApplication(sys.argv)
    widget = CustomWidget()
    widget.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>21119344</id><snippet>div[class=location]::text</snippet></ROW><ROW><id>21119344</id><snippet>normalize-space()</snippet></ROW><ROW><id>21119344</id><snippet>.xpath()</snippet></ROW><ROW><id>21119344</id><snippet>def normalize_whitespace(str):
    import re
    str = str.strip()
    str = re.sub(r'\s+', ' ', str)
    return str
</snippet></ROW><ROW><id>21119344</id><snippet>    car['Location'] = normalize_whitespace(
        u''.join(site.css('div[class=location]::text').extract()))
</snippet></ROW><ROW><id>21119344</id><snippet>    car['Location'] = normalize_whitespace(
        site.css('div[class=location]::text').extract()[0])
</snippet></ROW><ROW><id>21119451</id><snippet>workbook.worksheets_objs</snippet></ROW><ROW><id>21119451</id><snippet>import xlsxwriter


workbook = xlsxwriter.Workbook('test.xlsx')

sheet_names = ['Data1', 'Chart1', 'Data2', 'Chart2', 'Data3', 'Chart3']
for sheet_name in sheet_names:
    workbook.add_worksheet(sheet_name)

# sort sheets based on name
workbook.worksheets_objs.sort(key=lambda x: x.name)
workbook.close()
</snippet></ROW><ROW><id>21119719</id><snippet>key</snippet></ROW><ROW><id>21119719</id><snippet>alpha1Order</snippet></ROW><ROW><id>21119719</id><snippet>alpha2Order</snippet></ROW><ROW><id>21119719</id><snippet>alpha1Order = {token: i for i, token in enumerate(alpha1Order)}
alpha2Order = {token: i for i, token in enumerate(alpha2Order)}

def keyfunction(filename):
    num, alpha1, alpha2 = tokenize(filename)
    return int(num), alpha1Order[alpha1], alpha2Order[alpha2]
</snippet></ROW><ROW><id>21119719</id><snippet>int(num)</snippet></ROW><ROW><id>21119771</id><snippet>import os
from timeit import timeit

def remove():
    os.remove('test.txt')
    external_command()

def empty():
    open('test.txt', 'wb').close()  # same as your with statement, but shorter
    external_command()

def external_command():
    ''' not actually an external command, but pretend... '''
    with open('test.txt', 'a') as f:
        f.write('mooo')


print 'removal took', timeit(remove, number=1000), 'seconds'
#O: removal took 0.132004915145 seconds

print 'emptying took', timeit(empty, number=1000), 'seconds'
#O: emptying took 0.106063604726 seconds
</snippet></ROW><ROW><id>21119887</id><snippet>(r'^accounts/', include('registration.urls')),
</snippet></ROW><ROW><id>21120001</id><snippet>def negate(func):
  def result(*args):
    return not func(*args)
  return result
</snippet></ROW><ROW><id>21120001</id><snippet>not</snippet></ROW><ROW><id>21120049</id><snippet>records</snippet></ROW><ROW><id>21120049</id><snippet>from itertools import izip_longest

listA = [1, 2, 3, 4]
listB = [1, 2, '--']

records = izip_longest(listA, listB)
# will return [(1, 1), (2, 2), (3, '--'), (4, None)]
</snippet></ROW><ROW><id>21120049</id><snippet>&lt;table&gt;
    &lt;tr&gt;
        &lt;th&gt;Col1&lt;/th&gt;
        &lt;th&gt;Col2&lt;/th&gt;
    &lt;tr&gt;
    {% for col1, col2 in records %}
    &lt;tr&gt;
        &lt;td&gt;{{col1}}&lt;/td&gt;
        &lt;td&gt;{{col2}}&lt;/td&gt;
    &lt;tr&gt;
    {% endfor %}
&lt;/table&gt;
</snippet></ROW><ROW><id>21120143</id><snippet>&amp;</snippet></ROW><ROW><id>21120143</id><snippet>i</snippet></ROW><ROW><id>21120143</id><snippet>i &amp; 1023</snippet></ROW><ROW><id>21120143</id><snippet>1023 == (2**10) - 1</snippet></ROW><ROW><id>21120143</id><snippet>(2**4) - 1 == 15</snippet></ROW><ROW><id>21120143</id><snippet>a = 22 #     10110
b = 15 #      1111
a &amp; b == 6 #  0110
</snippet></ROW><ROW><id>21120253</id><snippet>split()</snippet></ROW><ROW><id>21120253</id><snippet>gawk -f a.awk file.xml
</snippet></ROW><ROW><id>21120253</id><snippet>a.awk</snippet></ROW><ROW><id>21120253</id><snippet>BEGIN {RS="^$"}
{
    n=split($0,a,/&lt;\/?(uniprot|pr_id|column_start|column_end|old_new)&gt;/,s)
    for (i=1; i&lt;=n-1;i+=2) {
        if (s[i]=="&lt;pr_id&gt;") {pp=a[i+1]; up=0}
        if (s[i]=="&lt;uniprot&gt;" &amp;&amp; up==0) {uu=a[i+1];up=1}
        if (s[i]=="&lt;column_start&gt;") ss=a[i+1]
        if (s[i]=="&lt;column_end&gt;") ee=a[i+1]
        if (s[i]=="&lt;old_new&gt;" &amp;&amp; a[i+1]=="old") {
            p[++k]=pp
            u[k]=uu
            s[k]=ss
            e[k]=ee
        }
    }
}
END {
    fmt="%5s%10s%10s%10s\n"
    printf fmt, "pr_id", "uniprot", "old_start", "old_end"
    for (i=1; i&lt;=k; i++)
        printf fmt,p[i],u[i],s[i],e[i]
}
</snippet></ROW><ROW><id>21120253</id><snippet>pr_id   uniprot old_start   old_end
   01    O11482       300       334
   02     P4455        12        34
   02     P4455        35        37
</snippet></ROW><ROW><id>21120418</id><snippet>i</snippet></ROW><ROW><id>21120418</id><snippet>for i in a:
    while not someCondition:
        # do something
    print(i)
</snippet></ROW><ROW><id>21120447</id><snippet>re.search()</snippet></ROW><ROW><id>21120447</id><snippet>re.match()</snippet></ROW><ROW><id>21120447</id><snippet>re.match()</snippet></ROW><ROW><id>21120447</id><snippet>MatchObject</snippet></ROW><ROW><id>21120447</id><snippet>re.match()</snippet></ROW><ROW><id>21120447</id><snippet>m/.../</snippet></ROW><ROW><id>21120447</id><snippet>re.search()</snippet></ROW><ROW><id>21120447</id><snippet>/.../</snippet></ROW><ROW><id>21120736</id><snippet>a, b, c, d = [f(i) for i in xrange(1, 5)]
</snippet></ROW><ROW><id>21120736</id><snippet>map</snippet></ROW><ROW><id>21120736</id><snippet>a, b, c, d = map(f, xrange(1, 5))
</snippet></ROW><ROW><id>21120736</id><snippet>print a, b, c, d
</snippet></ROW><ROW><id>21120736</id><snippet>1 4 9 16
</snippet></ROW><ROW><id>21120736</id><snippet>def curry_function(function, first, second):
    return lambda third: function(first, second, third)

f = curry_function(f, "dummy1", "dummy2")
</snippet></ROW><ROW><id>21120736</id><snippet>functools.partial</snippet></ROW><ROW><id>21120736</id><snippet>from functools import partial
f = partial(f, "dummy1", "dummy2")
</snippet></ROW><ROW><id>21120764</id><snippet>loadXML</snippet></ROW><ROW><id>21120764</id><snippet>model = modelLoader.loadXml(add_two_numbers_file)
</snippet></ROW><ROW><id>21120900</id><snippet>type(‚Ä¶)</snippet></ROW><ROW><id>21120900</id><snippet>type</snippet></ROW><ROW><id>21120900</id><snippet>__iter__</snippet></ROW><ROW><id>21120900</id><snippet>type</snippet></ROW><ROW><id>21120900</id><snippet>type</snippet></ROW><ROW><id>21120900</id><snippet>enum</snippet></ROW><ROW><id>21120900</id><snippet>&gt;&gt;&gt; def enum(*keys):
        return namedtuple('Enum', keys)(*range(len(keys)))
&gt;&gt;&gt; Suit = enum('spades', 'hearts', 'diamonds', 'clubs')
&gt;&gt;&gt; Suit.spades
0
&gt;&gt;&gt; Suit.hearts
1
&gt;&gt;&gt; Suit.diamonds
2
&gt;&gt;&gt; Suit.clubs
3
&gt;&gt;&gt; [s for s in Suit]
[0, 1, 2, 3]
</snippet></ROW><ROW><id>21121499</id><snippet>plt.xlim</snippet></ROW><ROW><id>21121499</id><snippet>import datetime
import pylab as plt

# Some sample data
X = [datetime.datetime(2000, 3, 2, n) for n in xrange(9,13)]
Y = [4,8,3,2]

# Set the limits
start_time = datetime.datetime(2000, 3, 2, 7)
end_time = datetime.datetime(2000, 3, 2, 14)

plt.bar(X, Y, align='center',width=.015)
plt.gcf().autofmt_xdate()
plt.xlim(start_time, end_time)
plt.show()
</snippet></ROW><ROW><id>21121851</id><snippet>Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
sqlite3.OperationalError: near "auto_increment": syntax error
</snippet></ROW><ROW><id>21121851</id><snippet>AUTOINCREMENT</snippet></ROW><ROW><id>21121851</id><snippet>PRIMARY KEY</snippet></ROW><ROW><id>21121851</id><snippet>PRIMARY KEY</snippet></ROW><ROW><id>21121851</id><snippet>id</snippet></ROW><ROW><id>21121851</id><snippet>INTEGER</snippet></ROW><ROW><id>21121851</id><snippet>int</snippet></ROW><ROW><id>21121851</id><snippet>query = """CREATE TABLE `home` (
   `id` integer primary key autoincrement,
   `full_name` char(255) not null,
   `display_name` char(255),
   `ip_address` char(255) not null,
   `user`  char(255) not null
);"""
</snippet></ROW><ROW><id>21121851</id><snippet>char</snippet></ROW><ROW><id>21121851</id><snippet>TEXT</snippet></ROW><ROW><id>21121911</id><snippet>z</snippet></ROW><ROW><id>21121911</id><snippet>None</snippet></ROW><ROW><id>21121911</id><snippet>class Point(object):
    __slots__ = ['x', 'y', 'z']

    def __init__(self, x=0, y=0, z=None):
        self.x = x
        self.y = y
        self.z = z
</snippet></ROW><ROW><id>21121911</id><snippet>z</snippet></ROW><ROW><id>21121911</id><snippet>None</snippet></ROW><ROW><id>21121911</id><snippet>def __add__(self, P):
    S = Point(self.x, self.y, self.z)
    S.x = self.x + P.x
    S.y = self.y + P.y
    if self.z is not None:
        if P.z is None:
            raise ValueError('Cannot add a 2D point to a 3D point')
        S.z = self.z + P.z
    return S
</snippet></ROW><ROW><id>21121924</id><snippet>S3BotoStorage.exists</snippet></ROW><ROW><id>21121924</id><snippet>S3BotoStorage.entries</snippet></ROW><ROW><id>21121924</id><snippet>    @property
    def entries(self):
        """
        Get the locally cached files for the bucket.
        """
        if self.preload_metadata and not self._entries:
            self._entries = dict((self._decode_name(entry.key), entry)
                                for entry in self.bucket.list(prefix=self.location))
</snippet></ROW><ROW><id>21121924</id><snippet>S3BotoStorage</snippet></ROW><ROW><id>21121924</id><snippet>from storages.backends.s3boto import S3BotoStorage, parse_ts_extended


class MyS3BotoStorage(S3BotoStorage):
    def exists(self, name):
        name = self._normalize_name(self._clean_name(name))
        k = self.bucket.new_key(self._encode_name(name))
        return k.exists()

    def size(self, name):
        name = self._normalize_name(self._clean_name(name))
        return self.bucket.get_key(self._encode_name(name)).size

    def modified_time(self, name):
        name = self._normalize_name(self._clean_name(name))
        k = self.bucket.get_key(self._encode_name(name))
        return parse_ts_extended(k.last_modified)
</snippet></ROW><ROW><id>21121989</id><snippet>from scrapy.http.request import Request</snippet></ROW><ROW><id>21122111</id><snippet>self.window.focus_group(0)
self.window.open_file(htmlFile)

self.window.focus_group(1)
self.window.open_file(jsFile)

self.window.focus_group(2)
self.window.open_file(sassFile)
</snippet></ROW><ROW><id>21122111</id><snippet>for i, file in enumerate([htmlFile, jsFile, sassFile]):
    self.window.focus_group(i)
    self.window.open_file(file)
</snippet></ROW><ROW><id>21122137</id><snippet>from module1 import func

func(x)
</snippet></ROW><ROW><id>21122137</id><snippet> module1.func(x)
</snippet></ROW><ROW><id>21122137</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath("C:/Documents")
'C:\\Documents'
&gt;&gt;&gt;
&gt;&gt;&gt; from os import path
&gt;&gt;&gt; path.abspath("C:/documents")
'C:\\documents'
&gt;&gt;&gt;
&gt;&gt;&gt; from path import abspath
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named path
&gt;&gt;&gt;
&gt;&gt;&gt; from os.path import abspath
&gt;&gt;&gt; abspath("C:/documents")
'C:\\documents'
</snippet></ROW><ROW><id>21122280</id><snippet>gcc</snippet></ROW><ROW><id>21122280</id><snippet>clang</snippet></ROW><ROW><id>21122405</id><snippet>object</snippet></ROW><ROW><id>21122405</id><snippet>In [12]: Series([1, 'some string', pd.to_datetime('2014-01-01')])
Out[12]: 
0                      1
1            some string
2    2014-01-01 00:00:00
dtype: object
</snippet></ROW><ROW><id>21122405</id><snippet>In [13]: Series([1, 'some string', pd.to_datetime('2014-01-01')])[2]
Out[13]: Timestamp('2014-01-01 00:00:00', tz=None)
</snippet></ROW><ROW><id>21122627</id><snippet>def parse(self, response):
    sel = Selector(response)
    sites = sel.xpath('.//div[@class="block item-title"]/h3/span/a')
    for site in sites:
        Link = site.xpath('@href').extract()[0]
        print Link
</snippet></ROW><ROW><id>21122680</id><snippet>df.groupby(["Group", "stage"])["time"].apply(lambda x: x-x.iloc[0])</snippet></ROW><ROW><id>21122752</id><snippet>self.on_close</snippet></ROW><ROW><id>21122752</id><snippet>on_close</snippet></ROW><ROW><id>21122752</id><snippet>on_close</snippet></ROW><ROW><id>21122752</id><snippet>self.close</snippet></ROW><ROW><id>21122752</id><snippet>self.close</snippet></ROW><ROW><id>21123051</id><snippet>ChannelCodeType = Enum('TELEPHONE', 'TELEFAX', 'EMAIL', 'WEBSITE',
                                               type_name='channelCode')

class Contact(ComplexModel):
    "contact person and communication channel"
    contactName = primitive.Unicode(min_len=1, max_len=70, nillable=False)
    channel = primitive.Unicode(max_occurs='unbounded')
    channelCode = XmlAttribute(ChannelCodeType, attribute_of='channel')
</snippet></ROW><ROW><id>21123051</id><snippet>&gt;&gt;&gt; c = Contact()
&gt;&gt;&gt; c.contactName = 'xxx'
&gt;&gt;&gt; c.channel = [ '1', '2' ]
&gt;&gt;&gt; c.channelCode = [ChannelCodeType.TELEPHONE, ChannelCodeType.FAX]
</snippet></ROW><ROW><id>21123051</id><snippet>&gt;&gt;&gt; Contact(
...     contactName='xxx',
...     channel=[ '1', '2' ],
...     channelCode=[ChannelCodeType.TELEPHONE, ChannelCodeType.FAX]
... )
</snippet></ROW><ROW><id>21123051</id><snippet>attribute_of</snippet></ROW><ROW><id>21123135</id><snippet>False</snippet></ROW><ROW><id>21123405</id><snippet>__init__</snippet></ROW><ROW><id>21123405</id><snippet>from_crawler</snippet></ROW><ROW><id>21123405</id><snippet>class cRetry(RetryMiddleware):

    errorCounter = 0

    def __init__(self, crawler):
        super(cRetry, self).__init__(crawler.settings)
        self.crawler = crawler

    @classmethod
    def from_crawler(cls, crawler):
        return cls(crawler)

    def process_response(self, request, response, spider):
        # ...
</snippet></ROW><ROW><id>21123405</id><snippet>__init__</snippet></ROW><ROW><id>21123405</id><snippet>from_crawler(cls, crawler)</snippet></ROW><ROW><id>21123419</id><snippet>print war_data.columns</snippet></ROW><ROW><id>21123419</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({"A ": [1,2,3], "B": [2,3,4]})
&gt;&gt;&gt; df
   A   B
0   1  2
1   2  3
2   3  4

[3 rows x 2 columns]
&gt;&gt;&gt; df.columns
Index([u'A ', u'B'], dtype='object')
&gt;&gt;&gt; df["A"]
Traceback (most recent call last):
[...]
KeyError: u'no item named A'
</snippet></ROW><ROW><id>21123480</id><snippet>word in list</snippet></ROW><ROW><id>21123480</id><snippet>list(set(mylist))</snippet></ROW><ROW><id>21123640</id><snippet>CHAR(32)</snippet></ROW><ROW><id>21123640</id><snippet>uuid</snippet></ROW><ROW><id>21123640</id><snippet>from sqlalchemy.types import TypeDecorator, CHAR
from sqlalchemy.dialects.postgresql import UUID
import uuid

class GUID(TypeDecorator):
    """Platform-independent GUID type.

    Uses Postgresql's UUID type, otherwise uses
    CHAR(32), storing as stringified hex values.

    """
    impl = CHAR

    def load_dialect_impl(self, dialect):
        if dialect.name == 'postgresql':
            return dialect.type_descriptor(UUID())
        else:
            return dialect.type_descriptor(CHAR(32))

    def process_bind_param(self, value, dialect):
        if value is None:
            return value
        elif dialect.name == 'postgresql':
            return str(value)
        else:
            if not isinstance(value, uuid.UUID):
                return "%.32x" % uuid.UUID(value)
            else:
                # hexstring
                return "%.32x" % value

    def process_result_value(self, value, dialect):
        if value is None:
            return value
        else:
            return uuid.UUID(value)
</snippet></ROW><ROW><id>21123640</id><snippet>uuid.uuid4()</snippet></ROW><ROW><id>21123660</id><snippet>class AuthRequiredMiddleware(object):
    def process_request(self, request):
        if not request.user.is_authenticated():
            return HttpResponseRedirect(reverse('landing_page')) # or http response
        return None
</snippet></ROW><ROW><id>21123660</id><snippet>MIDDLEWARE_CLASSES = (
    ...
    'path.to.your.AuthRequiredMiddleware',
)
</snippet></ROW><ROW><id>21123768</id><snippet>y</snippet></ROW><ROW><id>21123768</id><snippet>y</snippet></ROW><ROW><id>21123768</id><snippet>In [18]: [x for x in range(5)]
Out[18]: [0, 1, 2, 3, 4]

In [19]: x
Out[19]: 4
</snippet></ROW><ROW><id>21123768</id><snippet>y</snippet></ROW><ROW><id>21123827</id><snippet>curses</snippet></ROW><ROW><id>21123827</id><snippet>raw</snippet></ROW><ROW><id>21123827</id><snippet>raw</snippet></ROW><ROW><id>21123827</id><snippet>cbreak</snippet></ROW><ROW><id>21123827</id><snippet>raw()</snippet></ROW><ROW><id>21123827</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>21123827</id><snippet>SIGINT</snippet></ROW><ROW><id>21123827</id><snippet>3</snippet></ROW><ROW><id>21123827</id><snippet>getch</snippet></ROW><ROW><id>21123827</id><snippet>3</snippet></ROW><ROW><id>21124257</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>21124257</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; var = "(5, 'kghjsg'), (6, 'kghjsghk'), (7, 'jksgjsg'), (8, 'ksgshgk'), (9, 'hjsdhg')"
&gt;&gt;&gt; literal_eval(var)
((5, 'kghjsg'), (6, 'kghjsghk'), (7, 'jksgjsg'), (8, 'ksgshgk'), (9, 'hjsdhg'))
</snippet></ROW><ROW><id>21124257</id><snippet>strings</snippet></ROW><ROW><id>21124257</id><snippet>numbers</snippet></ROW><ROW><id>21124257</id><snippet>tuples</snippet></ROW><ROW><id>21124257</id><snippet>lists</snippet></ROW><ROW><id>21124257</id><snippet>dicts</snippet></ROW><ROW><id>21124257</id><snippet>booleans</snippet></ROW><ROW><id>21124257</id><snippet>None</snippet></ROW><ROW><id>21124333</id><snippet>(\d+(?:\.\d+)?) ?[Gg](?:iga)?[Hh](?:ert)?[Zz]
</snippet></ROW><ROW><id>21124385</id><snippet>x = subprocess.Popen(["nosetests",
    "TestStateMachine.py:FluidityTest.test_it_has_an_initial_state",
    "-v"],
    stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>21124385</id><snippet>Popen</snippet></ROW><ROW><id>21124385</id><snippet>-v</snippet></ROW><ROW><id>21124385</id><snippet>$nosetests "TestStateMachine.py:FluidityTest.test_it_has_an_initial_state -v"
</snippet></ROW><ROW><id>21124385</id><snippet>-v</snippet></ROW><ROW><id>21124387</id><snippet>df = pd.DataFrame(np.random.random_integers(1,200,135), columns=['heights'])
bins = np.linspace(df.heights.min(), df.heights.max(), 21)
grp = df.groupby(np.digitize(df.heights, bins))
sizes = grp.size() 

def f(vals, max):
    sum = 0
    group = 1
    for v in vals:
        sum += v
        if sum &lt;= max:
            yield group
        else:
            group +=1
            sum = v
            yield group

#I've changed 6 by 30 for the example cause I don't have your original dataset
grp.size().groupby([g for g in f(sizes, 30)])
</snippet></ROW><ROW><id>21124387</id><snippet>print grp.size().groupby([g for g in f(sizes, 30)]).cumsum()</snippet></ROW><ROW><id>21124387</id><snippet>dat = np.random.random_integers(0,200,135)
dat = np.array([78,116,146,111,147,78,14,91,196,92,163,144,107,182,58,89,77,134,
83,126,94,70,121,175,174,88,90,42,93,131,91,175,135,8,142,166,
1,112,25,34,119,13,95,182,178,200,97,8,60,189,49,94,191,81,
56,131,30,107,16,48,58,65,78,8,0,11,45,179,151,130,35,64,
143,33,49,25,139,20,53,55,20,3,63,119,153,14,81,93,62,162,
46,29,84,4,186,66,90,174,55,48,172,83,173,167,66,4,197,175,
184,20,23,161,70,153,173,127,51,186,114,27,177,96,93,105,169,158,
83,155,161,29,197,143,122,72,60])
df = pd.DataFrame({'heights':dat})
bins = np.digitize(dat,np.linspace(0,200,21))
grp = df.heights.groupby(bins)

m = 15 #you should put 6 here, the minimun
s = 0
c = 1
def f(x):
    global c,s
    res = pd.Series([c]*x.size,index=x.index)
    s += x.size
    if s&gt;m:
        s = 0
        c += 1
    return res
g = grp.apply(f)
print df.groupby(g).size()

#another way of doing the same, just a matter of taste

m = 15 #you should put 6 here, the minimun
s = 0
c = 1
def f2(x):
    global c,s
    res = [c]*x.size #here is the main difference with f
    s += x.size
    if s&gt;m:
        s = 0
        c += 1
    return res

g = grp.transform(f2) #call it this way
print df.groupby(g).size()
</snippet></ROW><ROW><id>21124401</id><snippet>xmldoc = minidom.parse('sampleXML.xml')
#Grab the first occurence of the "secondSetOfItems" element
second_items = xmldoc.getElementsByTagName("secondSetOfItems")[0]
item_list = items.getElementsByTagName("item")

for item in item_list:
    print item.attributes['name'].value
</snippet></ROW><ROW><id>21124401</id><snippet>item5
item6
item7
item8
</snippet></ROW><ROW><id>21124548</id><snippet>ftplib</snippet></ROW><ROW><id>21124548</id><snippet>nlst</snippet></ROW><ROW><id>21124548</id><snippet>dir</snippet></ROW><ROW><id>21124548</id><snippet>nlst</snippet></ROW><ROW><id>21124548</id><snippet>chdir</snippet></ROW><ROW><id>21124548</id><snippet>dir</snippet></ROW><ROW><id>21124548</id><snippet>callback</snippet></ROW><ROW><id>21124661</id><snippet>inputstring = 'wrong_syntax(b&gt;=c) correct_syntax(b,&gt;=,c)'
regex = r"([^,])(&gt;=|&lt;=|!=|==|&gt;|&lt;|=)([^,])"
replace = r"\1,\2,\3"

result = re.sub(regex, replace, inputstring)

print(result)
</snippet></ROW><ROW><id>21124806</id><snippet>re.DOTALL</snippet></ROW><ROW><id>21124806</id><snippet>.</snippet></ROW><ROW><id>21124806</id><snippet>result = re.search(r'Schedule \(1\).*?\(2\)', data, flags=re.DOTALL)
</snippet></ROW><ROW><id>21124806</id><snippet>*?</snippet></ROW><ROW><id>21124806</id><snippet>(2)</snippet></ROW><ROW><id>21124806</id><snippet>*</snippet></ROW><ROW><id>21124806</id><snippet>(2)</snippet></ROW><ROW><id>21124806</id><snippet>(1)...(2)</snippet></ROW><ROW><id>21124806</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; data = 'Schedule (1) GEORGE JETSON\n\nPRESIDENT X X 0 O O\n\n(2) BILL CLINTON\n\nVICE PRESIDENT X X 0 0 0\n\n(3)'
&gt;&gt;&gt; re.search(r'Schedule \(1\).*?\(2\)', data, flags=re.DOTALL)
&lt;_sre.SRE_Match object at 0x107ff5510&gt;
&gt;&gt;&gt; re.search(r'Schedule \(1\).*?\(2\)', data, flags=re.DOTALL).group()
'Schedule (1) GEORGE JETSON\n\nPRESIDENT X X 0 O O\n\n(2)'
</snippet></ROW><ROW><id>21124806</id><snippet>(...)</snippet></ROW><ROW><id>21124806</id><snippet>.*?</snippet></ROW><ROW><id>21124806</id><snippet>(1)</snippet></ROW><ROW><id>21124806</id><snippet>(2)</snippet></ROW><ROW><id>21124806</id><snippet>&gt;&gt;&gt; re.search(r'Schedule \(1\)(.*?)\(2\)', data, flags=re.DOTALL).group(1)
' GEORGE JETSON\n\nPRESIDENT X X 0 O O\n\n'
</snippet></ROW><ROW><id>21124806</id><snippet>.group(1)</snippet></ROW><ROW><id>21125064</id><snippet>class TodoSimple(Resource):
    def get(self, todo_id):
        return {todo_id: todos[todo_id]}

    def put(self, todo_id):
        todos[todo_id] = request.form['data']
        return {todo_id: todos[todo_id]}

api.add_resource(TodoSimple, '/&lt;string:todo_id&gt;')
</snippet></ROW><ROW><id>21125064</id><snippet>api.add_resource(HelloWorld,
    '/',
    '/hello')
</snippet></ROW><ROW><id>21125082</id><snippet>import numpy as np
import matplotlib as mp
import matplotlib.pyplot as plt

# Declare numpy array with nans
y=np.array([np.nan,10005,10005,10006,10006,10006,10007,10007,10007, 10008,10007,10008,10008,10008, np.nan,10010,10010,10010, np.nan, np.nan, np.nan, np.nan])
x=np.arange(y.size)

for yv in np.unique(y):
    if yv != np.nan:
        idx = y == yv
        plt.plot(x[idx],y[idx],marker='o',linestyle='-',color='b')
plt.margins(.1,.1)
plt.show()
</snippet></ROW><ROW><id>21125082</id><snippet>plt.margins</snippet></ROW><ROW><id>21125139</id><snippet>2*alpha/180*np.pi</snippet></ROW><ROW><id>21125139</id><snippet>((2 * alpha) / 180) * ni.pi
=&gt; (90 / 180) * ni.pi # integer division truncates this to 0
=&gt; 0 * ni.pi
</snippet></ROW><ROW><id>21125139</id><snippet>np.sin(2.0*alpha/180*np.pi) # the floating point 2.0 will promote alpha to float for the multiply
</snippet></ROW><ROW><id>21125139</id><snippet>np.sin(2*float(alpha)/180*np.pi) # explicit, very clear
</snippet></ROW><ROW><id>21125139</id><snippet>alpha = 45.0 # this is a little dangerous as you might change the angle in the future and forget to make it a float again
</snippet></ROW><ROW><id>21125149</id><snippet>print('Welcome to your currency converter\n Please choose your starting currency from the four options:')
currency1 = input('(GDP) = Pound Sterling ¬£ \n(EUR) = Euro ‚Ç¨ \n(USD) = US Dollar ($) \n(JPY)= Japanese Yen ¬•\n').lower()

while currency1 not in ['gdp', 'eur', 'usd', 'jpy']:
    print('Sorry not accepted try again')
    currency1 = input('(GDP) = Pound Sterling ¬£ \n(EUR) = Euro ‚Ç¨ \n(USD) = US Dollar ($) \n(JPY)= Japanese Yen ¬•\n').lower()
</snippet></ROW><ROW><id>21125305</id><snippet>future_check_features(PyFutureFeatures *ff, stmt_ty s, const char *filename)
...
  else if (strcmp(feature, "braces") == 0) {
    PyErr_SetString(PyExc_SyntaxError,
        "not a chance");
    PyErr_SyntaxLocation(filename, s-&gt;lineno);
    return 0;
  }
</snippet></ROW><ROW><id>21125880</id><snippet>numpy.in1d</snippet></ROW><ROW><id>21125880</id><snippet>&gt;&gt;&gt; new_data = data[np.in1d(arr1, arr2)]
&gt;&gt;&gt; new_data
array([ 80.,  99.])
</snippet></ROW><ROW><id>21125880</id><snippet>in1d</snippet></ROW><ROW><id>21125880</id><snippet>ndarray</snippet></ROW><ROW><id>21125880</id><snippet>&gt;&gt;&gt; np.in1d(arr1, arr2)
array([False, False,  True, False,  True], dtype=bool)
</snippet></ROW><ROW><id>21126110</id><snippet>import csv

with open('my_data.csv') as data_file,\
     open('values.csv') as value_file, \
     open('my_new_data.csv', 'wb') as out_file:

    data_reader = csv.reader(data_file, delimiter=' ', skipinitialspace=True)
    value_reader = csv.reader(value_file, delimiter=',')
    writer = csv.writer(out_file, delimiter=' ')
    while True:
        try:
            row = next(data_reader)
            row[1:4] = next(value_reader)
            writer.writerows([row, next(data_reader), next(data_reader)])
        except StopIteration:
            break
</snippet></ROW><ROW><id>21126110</id><snippet> 1    253.31     78.20     490.0         0 0 1 0 0
   101         0         0         0         0         0         0          
     1         2         3         4         5         6
     2    123.31   -122.20     -20.0         0 0 1 0 0
   101         0         0         0         0         0         0          
     7         8         9        10        11        12
     3     53.21      10.2      90.0         0 0 1 0 0
   101         0         0         0         0         0         0          
    13        14        15        11        10        10
</snippet></ROW><ROW><id>21126110</id><snippet>1.0,2.5,3.2
4.1,5.2,6.2
7.6,8.0,9.3
</snippet></ROW><ROW><id>21126110</id><snippet>1 1.0 2.5 3.2 0 0 1 0 0
101 0 0 0 0 0 0 
1 2 3 4 5 6
2 4.1 5.2 6.2 0 0 1 0 0
101 0 0 0 0 0 0 
7 8 9 10 11 12
3 7.6 8.0 9.3 0 0 1 0 0
101 0 0 0 0 0 0 
13 14 15 11 10 10
</snippet></ROW><ROW><id>21126692</id><snippet>self</snippet></ROW><ROW><id>21126700</id><snippet>print "I AM %d LINES LONG"%len(list(open(__file__)))</snippet></ROW><ROW><id>21126700</id><snippet>with open(__file__) as f:
    print "I AM %d LINES LONG"%len(list(f))
</snippet></ROW><ROW><id>21126784</id><snippet>r'(\d{6}.*?\(\d{3}\) \d{3}-\d{4}) ?'
</snippet></ROW><ROW><id>21126784</id><snippet>$1\n</snippet></ROW><ROW><id>21126784</id><snippet>import re

s = '233989 001 0 / 49 T R 4:15 PM - 5:30 PM 205 IST Building 01/13/14 - 05/02/14 Controls View (814) 865-8947 266200 002 0 / 43 M W F 10:10 AM - 11:00 AM 110 IST Building 01/13/14 - 05/02/14 Controls View (814) 865-8947'
spl = re.split(r'(\d{6}.*?\(\d{3}\) \d{3}-\d{4}) ?', s)
for line in spl:
    print line
</snippet></ROW><ROW><id>21126796</id><snippet>size = 83456
self.file = open("/tmp/installer.ipk", "w+b")
self.file.write("\0" * size)
self.file.flush()
self.mm = mmap.mmap(self.file.fileno(), size, access=mmap.ACCESS_WRITE)
</snippet></ROW><ROW><id>21126798</id><snippet>seen = set()
myList2 = [x for x in myList1 if x not in seen and not seen.add(x)]
</snippet></ROW><ROW><id>21126798</id><snippet>from collections import OrderedDict
myList2 = list(OrderedDict.fromkeys(myList1))
</snippet></ROW><ROW><id>21126798</id><snippet>index</snippet></ROW><ROW><id>21126798</id><snippet>list</snippet></ROW><ROW><id>21126798</id><snippet>mySet = set(myList1)
</snippet></ROW><ROW><id>21126894</id><snippet>subplot()</snippet></ROW><ROW><id>21126894</id><snippet>pl.figure(figsize=(12, 6))
pl.subplot(1, 2, 1)
for axeid in (3, 4, 7, 8):
    pl.subplot(2, 4, axeid)
</snippet></ROW><ROW><id>21127018</id><snippet>if hosts:
    with open(hosts, mode='r', buffering=1):
</snippet></ROW><ROW><id>21127018</id><snippet>hosts</snippet></ROW><ROW><id>21127018</id><snippet>hosts</snippet></ROW><ROW><id>21127018</id><snippet>argparse</snippet></ROW><ROW><id>21127018</id><snippet>type=file</snippet></ROW><ROW><id>21127018</id><snippet>hosts</snippet></ROW><ROW><id>21127018</id><snippet>TypeError: coercing to Unicode: need string or buffer, file found</snippet></ROW><ROW><id>21127018</id><snippet>open</snippet></ROW><ROW><id>21127018</id><snippet>open</snippet></ROW><ROW><id>21127018</id><snippet>str</snippet></ROW><ROW><id>21127018</id><snippet>        for line in hosts:
</snippet></ROW><ROW><id>21127018</id><snippet>hosts</snippet></ROW><ROW><id>21127018</id><snippet>            hosts = line.rstrip
</snippet></ROW><ROW><id>21127018</id><snippet>hosts</snippet></ROW><ROW><id>21127018</id><snippet>line.rstrip</snippet></ROW><ROW><id>21127018</id><snippet>line.rstrip</snippet></ROW><ROW><id>21127018</id><snippet>            child = connects(user, hosts, passwd, en_passwd)
</snippet></ROW><ROW><id>21127018</id><snippet>hosts</snippet></ROW><ROW><id>21127018</id><snippet>host</snippet></ROW><ROW><id>21127018</id><snippet>hosts_entry</snippet></ROW><ROW><id>21127018</id><snippet>hosts</snippet></ROW><ROW><id>21127018</id><snippet>if hosts:
    for line in hosts:
        host = line.rstrip()
        child = connects(user, host, passwd, en_passwd)
</snippet></ROW><ROW><id>21127018</id><snippet>hosts</snippet></ROW><ROW><id>21127018</id><snippet>buffering=1</snippet></ROW><ROW><id>21127018</id><snippet>parser.add_argument('--host_file', dest='hosts', type=str, help='specify a target host file')

# ‚Ä¶

if hosts:
    with open(hosts, buffering=1) as hosts_file:
        for line in hosts_file:
            host = line.rstrip()
            child = connects(user, host, passwd, en_passwd)
</snippet></ROW><ROW><id>21127081</id><snippet>&gt;&gt;&gt; import codecs
&gt;&gt;&gt; codecs.encode("Hello World!", "rot_13")
'Uryyb Jbeyq!'
</snippet></ROW><ROW><id>21127197</id><snippet>&amp;in_iframe=1</snippet></ROW><ROW><id>21127197</id><snippet>import urllib2
from bs4 import BeautifulSoup

urls = ['https://jobs-challp.icims.com/jobs/search?ss=1&amp;searchKeyword=gis&amp;searchCategory=&amp;searchLocation=&amp;latitude=&amp;longitude=&amp;searchZip=&amp;searchRadius=20&amp;in_iframe=1',
        'https://www.smartrecruiters.com/SpectraForce1/']

for url in urls:
    soup = BeautifulSoup(urllib2.urlopen(url))
    print 'Scraping {}'.format(url)
    for link in soup.find_all('a'):
        if 'GIS' in link.text:
            print '--&gt; TEXT: ' + link.text.strip()
            print '--&gt; URL:  ' + link['href']
            print ''
</snippet></ROW><ROW><id>21127197</id><snippet>Scraping https://jobs-challp.icims.com/jobs/search?ss=1&amp;searchKeyword=gis&amp;searchCategory=&amp;searchLocation=&amp;latitude=&amp;longitude=&amp;searchZip=&amp;searchRadius=20&amp;in_iframe=1
--&gt; TEXT: GIS Specialist
--&gt; URL:  https://jobs-challp.icims.com/jobs/2432/gis-specialist/job?in_iframe=1

--&gt; TEXT: GIS Specialist
--&gt; URL:  https://jobs-challp.icims.com/jobs/2369/gis-specialist/job?in_iframe=1

Scraping https://www.smartrecruiters.com/SpectraForce1/
--&gt; TEXT: Technical Specialist/ Research Analyst/ GIS/ Engineering Technician
--&gt; URL:  https://www.smartrecruiters.com/SpectraForce1/74985505-technical-specialist

--&gt; TEXT: GIS Specialist
--&gt; URL:  https://www.smartrecruiters.com/SpectraForce1/74966857-gis-specialist

--&gt; TEXT: GIS Technician
--&gt; URL:  https://www.smartrecruiters.com/SpectraForce1/74944180-gis-technician
</snippet></ROW><ROW><id>21127324</id><snippet>exec expression</snippet></ROW><ROW><id>21127324</id><snippet>expression</snippet></ROW><ROW><id>21127324</id><snippet>main</snippet></ROW><ROW><id>21127324</id><snippet>    exec source
</snippet></ROW><ROW><id>21127324</id><snippet>    exec source in {}
</snippet></ROW><ROW><id>21127526</id><snippet>propagate</snippet></ROW><ROW><id>21127526</id><snippet>logger.propagate = False
</snippet></ROW><ROW><id>21127526</id><snippet>test_b</snippet></ROW><ROW><id>21127526</id><snippet>basicConfig()</snippet></ROW><ROW><id>21127526</id><snippet>logging.getLogger().info(msg)</snippet></ROW><ROW><id>21127526</id><snippet>logging.info(msg)</snippet></ROW><ROW><id>21127526</id><snippet>logging.log</snippet></ROW><ROW><id>21127563</id><snippet>plt.axis('equal')</snippet></ROW><ROW><id>21127563</id><snippet>ax.set_aspect("equal")
</snippet></ROW><ROW><id>21127674</id><snippet>x = subprocess.Popen(["nosetests",
                      "TestStateMachine.py:FluidityTest.test_it_has_an_initial_state", 
                      "-v"], 
                     stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

out_and_err, _ = x.communicate()
</snippet></ROW><ROW><id>21127674</id><snippet>x = subprocess.Popen(["nosetests",
                      "TestStateMachine.py:FluidityTest.test_it_has_an_initial_state", 
                      "-v"], 
                     stdout=subprocess.PIPE, stderr=subprocess.PIPE)

out, err = x.communicate()
</snippet></ROW><ROW><id>21127674</id><snippet>STDOUT</snippet></ROW><ROW><id>21127674</id><snippet>Popen</snippet></ROW><ROW><id>21127674</id><snippet>communicate</snippet></ROW><ROW><id>21127674</id><snippet>check_output</snippet></ROW><ROW><id>21127674</id><snippet>out_and_err = subprocess.check_output([‚Ä¶¬†args ‚Ä¶], stderr=subprocess.STDOUT)
</snippet></ROW><ROW><id>21127704</id><snippet>in</snippet></ROW><ROW><id>21127704</id><snippet>for_stmt ::=  "for" target_list "in" expression_list ":" suite
              ["else" ":" suite]
</snippet></ROW><ROW><id>21128059</id><snippet>dj_database_url.config()</snippet></ROW><ROW><id>21128059</id><snippet>DATABASE_URL</snippet></ROW><ROW><id>21128059</id><snippet>DATABASE_URL = "postgres://postgres:123@localhost:5432/test"
#                          ^user    ^pw ^host     ^port ^dbname
</snippet></ROW><ROW><id>21128105</id><snippet>print</snippet></ROW><ROW><id>21128336</id><snippet>eval</snippet></ROW><ROW><id>21128336</id><snippet>CREATE OR REPLACE FUNCTION json_update(data json, key text, value json)
RETURNS json AS
$BODY$
   from json import loads, dumps
   if key is None: return data
   js = loads(data)
   # you must decode 'value' with loads too:
   js[key] = loads(value)
   return dumps(js)
$BODY$
LANGUAGE plpythonu VOLATILE;

postgres=# SELECT json_update('{"a":1}', 'a', '{"innerkey":"innervalue"}');
            json_update            
-----------------------------------
 {"a": {"innerkey": "innervalue"}}
(1 row)
</snippet></ROW><ROW><id>21128336</id><snippet>eval</snippet></ROW><ROW><id>21128336</id><snippet>json</snippet></ROW><ROW><id>21128336</id><snippet>json</snippet></ROW><ROW><id>21128336</id><snippet>postgres=# SELECT json_update(
postgres(#    '{"a":1}', 
postgres(#    'a', 
postgres(#    '__import__(''shutil'').rmtree(''/glad_this_is_not_just_root'')'
postgres(# );
ERROR:  invalid input syntax for type json
LINE 4:          '__import__(''shutil'').rmtree(''/glad_this_is_not_...
                 ^
DETAIL:  Token "__import__" is invalid.
CONTEXT:  JSON data, line 1: __import__...
</snippet></ROW><ROW><id>21128336</id><snippet>eval</snippet></ROW><ROW><id>21128336</id><snippet>eval</snippet></ROW><ROW><id>21128438</id><snippet>with open("Input.txt", "r") as input_file:
    for line1 in input_file:
        line2, line3, line4 = [next(input_file) for _ in xrange(3)]
        if "N" not in line2:
            print line1 + line2 + line3 + line4.rstrip()
</snippet></ROW><ROW><id>21128438</id><snippet>@abcde:111/2
ABCDEFGHIj
+abcde:111/2
bla11
@abcde:113/2
djijwkoken
+abcde:113/2
bla15
</snippet></ROW><ROW><id>21128642</id><snippet>def is_substr(input_string, substrs):
    return any(strs in input_string for strs in substrs)

def awesome(my_string):
    if is_substr(my_string, ["A", "B", "C"]):
        x = do_something() + complicated_thing()
    elif is_substr(my_string, ["1", "2", "3"]):
        x = do_something_else() + complicated_thing()
    elif is_substr(my_string, ["!", "#", "$"]):
        x = do_another_thing() + complicated_thing()
    return x + ("Hello" if some_condition(x) else "World")
</snippet></ROW><ROW><id>21128642</id><snippet>def awesome(input_string):
    functions_dict = {
        ('AB', 'CD', 'EF'): do_something,
        ('12', '34', '56'): do_something_else,
        ('!@', '@#', '#$'): do_another_thing
    }
    for sub_strings, function in functions_dict.items():
        if any(s in input_string for s in sub_strings):
            x = function() + complicated_thing()
            return x + ("Hello" if some_condition(x) else "World")
</snippet></ROW><ROW><id>21128801</id><snippet>re.findall</snippet></ROW><ROW><id>21128801</id><snippet>with open('path/to/file') as infile:
    contents = infile.read()
    contents = contents.replace('-3","', '\n')
    print(contents)
</snippet></ROW><ROW><id>21128801</id><snippet>"-3",""</snippet></ROW><ROW><id>21128801</id><snippet>-3","</snippet></ROW><ROW><id>21128801</id><snippet>"</snippet></ROW><ROW><id>21128801</id><snippet>s.replace()</snippet></ROW><ROW><id>21128801</id><snippet>some_string_with_double_quotes = "this is a \"double quote\" within a string"
</snippet></ROW><ROW><id>21128801</id><snippet>some_string_with_double_quotes = 'this is a "double quote" within a string'
</snippet></ROW><ROW><id>21128876</id><snippet>x=(1,2,3,4,5)
x[-1]
</snippet></ROW><ROW><id>21128876</id><snippet>5
</snippet></ROW><ROW><id>21128887</id><snippet>test.base</snippet></ROW><ROW><id>21128887</id><snippet>my.base</snippet></ROW><ROW><id>21128887</id><snippet>my.base</snippet></ROW><ROW><id>21128887</id><snippet>my.base</snippet></ROW><ROW><id>21128887</id><snippet>test.base</snippet></ROW><ROW><id>21128887</id><snippet>test.base</snippet></ROW><ROW><id>21128887</id><snippet>my_base() class</snippet></ROW><ROW><id>21128887</id><snippet>_name ='test.base'</snippet></ROW><ROW><id>21128887</id><snippet>&lt;record model="ir.ui.view" id="test_base_tree_inheirt"&gt;
    &lt;field name="name"&gt;test.base.tree&lt;/field&gt;
    &lt;field name="model"&gt;test.base&lt;/field&gt;
    &lt;field name="type"&gt;tree&lt;/field&gt;
    &lt;field name="inherit_id" ref="&lt;base_module_name&gt;.test_base_tree"/&gt;
    &lt;field name="arch" type="xml"&gt;
        &lt;field name="email" position="after"&gt;
            &lt;field name="dept"/&gt;
        &lt;/field&gt;
    &lt;/field&gt;
&lt;/record&gt;
</snippet></ROW><ROW><id>21128901</id><snippet>self.SetBackgroundStyle(wx.BG_STYLE_CUSTOM)
</snippet></ROW><ROW><id>21128901</id><snippet>EVT_ERASE_BACKGROUND</snippet></ROW><ROW><id>21128901</id><snippet>self.SetBackgroundStyle(wx.BG_STYLE_ERASE)
</snippet></ROW><ROW><id>21128926</id><snippet>&gt;&gt;&gt; d = {'ab': 3, 'aa': 3, 'b': 4, 'c': 2, 'a': 1}
&gt;&gt;&gt; sorted(d, key=lambda x: (-d[x], x))
['b', 'aa', 'ab', 'c', 'a']
&gt;&gt;&gt; sorted(d, key=lambda x: (-d[x], x))[:2]
['b', 'aa']
</snippet></ROW><ROW><id>21128926</id><snippet>&gt;&gt;&gt; sorted(d, key=lambda x: (-d[x], x.lower()))[:2]
['b', 'aa']
</snippet></ROW><ROW><id>21128926</id><snippet>&gt;&gt;&gt; sorted(sorted(d), key=d.get, reverse=True)
['b', 'aa', 'ab', 'c', 'a']
</snippet></ROW><ROW><id>21129036</id><snippet>/Dropbox/music_files</snippet></ROW><ROW><id>21129036</id><snippet>os.makedirs('/Dropbox/music_files')</snippet></ROW><ROW><id>21129036</id><snippet>import os

if not os.path.exists('/Dropbox/music_files'):
    os.makedirs('/Dropbox/music_files')

filepath = os.path.join('/Dropbox/music_files', new_filename)

with open(filepath, 'w+') as f:
    f.write(content)
</snippet></ROW><ROW><id>21129445</id><snippet>&gt;&gt;&gt; list(chunks(range(0, 11), 4))
[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10]]
</snippet></ROW><ROW><id>21129738</id><snippet>import sqlite3

db = sqlite3.connect('test.db')
db.row_factory = sqlite3.Row
cur = db.cursor() # getting a cursor

cur.execute('drop table if exists test')
cur.execute('create table test (t1 text,i1 text)')
db.commit() # commit the transaction, note commits are done
            # at the connection, not on the cursor

cur.execute('insert into test (t1, i1) values (?, ?)',('xyzs','51'))
db.commit()

cursor = cur.execute('select * from test')

for row in cursor:
    print(row['t1'],row['i1'])
</snippet></ROW><ROW><id>21129816</id><snippet>hashlib.sha1</snippet></ROW><ROW><id>21129816</id><snippet>&gt;&gt;&gt; import hashlib
&gt;&gt;&gt; hashlib.sha1('asdf')
&lt;sha1 HASH object @ 0000000002B97DF0&gt;
</snippet></ROW><ROW><id>21129816</id><snippet>random.randint</snippet></ROW><ROW><id>21129816</id><snippet>int</snippet></ROW><ROW><id>21129816</id><snippet>&gt;&gt;&gt; hashlib.sha1(1234)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: must be string or buffer, not int
</snippet></ROW><ROW><id>21129816</id><snippet>os.urandom</snippet></ROW><ROW><id>21129816</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; hashlib.sha1(os.urandom(10)) # `os.urandom(10)` generate 10-bytes random string.
&lt;sha1 HASH object @ 0000000002B97F30&gt;
&gt;&gt;&gt; hashlib.sha1(os.urandom(10)).digest()
'\x0c.y\x08\x13\xf0\x16.\xea\x05\x03\x07{6H\xa0U\xfe\xdfT'
&gt;&gt;&gt; hashlib.sha1(os.urandom(10)).hexdigest()
'6e33d9cfdbd7ffcf062ee502eaa25893f618fcff'
</snippet></ROW><ROW><id>21129913</id><snippet>run.py</snippet></ROW><ROW><id>21130014</id><snippet>datetime</snippet></ROW><ROW><id>21130014</id><snippet>datetime</snippet></ROW><ROW><id>21130014</id><snippet>start_timestamp = datetime.datetime(2014, 1, 14)
</snippet></ROW><ROW><id>21130014</id><snippet>timedelta</snippet></ROW><ROW><id>21130014</id><snippet>end_timestamp = start_timestamp + datetime.timedelta(7)
</snippet></ROW><ROW><id>21130014</id><snippet>if start_timestamp &lt; start_created_at &lt; end_timestamp:
    print 'yay!'
</snippet></ROW><ROW><id>21130828</id><snippet>extend</snippet></ROW><ROW><id>21130828</id><snippet>include</snippet></ROW><ROW><id>21130828</id><snippet>base.html</snippet></ROW><ROW><id>21130828</id><snippet>{% if user.is_authenticated %}
    {% include 'member.html' %}
{% else %}
    {% include 'guest.html' %}
{% endif %}
</snippet></ROW><ROW><id>21130857</id><snippet>nlkt.collocations.TrigramCollocationFinder</snippet></ROW><ROW><id>21130857</id><snippet>TrigramCollocationFinder().score_ngrams</snippet></ROW><ROW><id>21130857</id><snippet>def nbest(self, score_fn, n):
    """Returns the top n ngrams when scored by the given function."""
    return [p for p,s in self.score_ngrams(score_fn)[:n]]
</snippet></ROW><ROW><id>21130857</id><snippet>score_ngrams()</snippet></ROW><ROW><id>21130857</id><snippet>nbest</snippet></ROW><ROW><id>21130857</id><snippet>def score_ngrams(self, score_fn):
    """Returns a sequence of (ngram, score) pairs ordered from highest to
    lowest score, as determined by the scoring function provided.
    """
    return sorted(self._score_ngrams(score_fn),
                  key=_itemgetter(1), reverse=True)
</snippet></ROW><ROW><id>21130857</id><snippet>import nltk
from nltk.collocations import *
from nltk.tokenize import word_tokenize

text = "this is a foo bar bar black sheep  foo bar bar black sheep foo bar bar black sheep shep bar bar black sentence"

trigram_measures = nltk.collocations.TrigramAssocMeasures()
finder = TrigramCollocationFinder.from_words(word_tokenize(text))

for i in finder.score_ngrams(trigram_measures.pmi):
    print i
</snippet></ROW><ROW><id>21130857</id><snippet>(('this', 'is', 'a'), 9.047123912114026)
(('is', 'a', 'foo'), 7.46216141139287)
(('black', 'sheep', 'shep'), 5.46216141139287)
(('black', 'sheep', 'foo'), 4.877198910671714)
(('a', 'foo', 'bar'), 4.462161411392869)
(('sheep', 'shep', 'bar'), 4.462161411392869)
(('bar', 'black', 'sheep'), 4.047123912114026)
(('bar', 'black', 'sentence'), 4.047123912114026)
(('sheep', 'foo', 'bar'), 3.877198910671714)
(('bar', 'bar', 'black'), 3.047123912114026)
(('foo', 'bar', 'bar'), 3.047123912114026)
(('shep', 'bar', 'bar'), 3.047123912114026)
</snippet></ROW><ROW><id>21130887</id><snippet>play1 = 1
def some_function():
    global play1
    play1 = #your value here, which will change the global value
</snippet></ROW><ROW><id>21130887</id><snippet>__builtin__</snippet></ROW><ROW><id>21130887</id><snippet>import __builtin__
__builtin__.play1 = #new value
</snippet></ROW><ROW><id>21131769</id><snippet>from itertools import groupby

my_dict = {14:1, 15:2, 16:4, 11:5, 20:1, 22:5, 25:2}
key_fn, result = lambda (x, _): x / 5 + 1  if x % 5 else x / 5, {}

for item, grp in groupby(sorted(my_dict.items(), key = key_fn), key_fn):
    result[((item - 1) * 5 + 1, item * 5)] = sum(count for _, count in grp)

print result
</snippet></ROW><ROW><id>21131769</id><snippet>{(11, 15): 8, (21, 25): 7, (16, 20): 5}
</snippet></ROW><ROW><id>21131925</id><snippet>i = "1" 
j = i + 2
</snippet></ROW><ROW><id>21131925</id><snippet>TypeError: cannot concatenate 'str' and 'int' objects
</snippet></ROW><ROW><id>21131925</id><snippet>for a in {1, 'abc', 3.14159}:
    print a
    print type(a)
</snippet></ROW><ROW><id>21131925</id><snippet>3.14159
&lt;type 'float'&gt;
1
&lt;type 'int'&gt;
abc
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>21132097</id><snippet>def f1(f):
    def f2(a):
        return a(a)

    def f3(b):
        def f4(*args):
            return b(b)(*args)

        return f(f4)

    return f2(f3)
</snippet></ROW><ROW><id>21132097</id><snippet>f1 = lambda f: (lambda a: a(a))(lambda b: f(lambda *args: b(b)(*args)))
</snippet></ROW><ROW><id>21132097</id><snippet>def f1(f):
    def f3():
        def f4(*args):
            return f3()(*args)
        return f(f4)

    return f3()
</snippet></ROW><ROW><id>21132097</id><snippet>called = False

def g1(func):
    def g2(*args):
        print args
        return None

    global called

    if not called:
        called = True
        func(5)
    else:
        return g2

f1(g1) # prints "(5,)"
</snippet></ROW><ROW><id>21132097</id><snippet>import random

def g3(func):
    def g4(a):
        def g5(b):
            print a
            return a+b
        return g5

    if random.random() &lt; 0.1:
        return g4(1)
    else:
        return g4(func(1))

f1(g3)
</snippet></ROW><ROW><id>21132097</id><snippet>def g6(func):
    def g7(n):
        if n &gt; 0:
            return n*func(n-1)
        else:
            return 1

    return g7

print f1(g6)(5) # 120
print f1(g6)(6) # 720
</snippet></ROW><ROW><id>21132173</id><snippet>train</snippet></ROW><ROW><id>21132173</id><snippet>test</snippet></ROW><ROW><id>21132173</id><snippet>all = range(1, 539) # numbers from 1 to 538
random.shuffle(all) # shuffle them randomly
test = all[:239] # first half in test 
train = all[239:] # second half in train
</snippet></ROW><ROW><id>21132486</id><snippet>.format()</snippet></ROW><ROW><id>21132486</id><snippet>+</snippet></ROW><ROW><id>21132486</id><snippet>'{:+}'.format(3)  # "+3"
'{:+}'.format(-3) # "-3"
</snippet></ROW><ROW><id>21132486</id><snippet>a = numpy.array([1, 2, -4, 5, -3])
print '(' + ' '.join('{:+}'.format(n) for n in a)) + ')'
# (+1 +2 -4 +5 -3)
</snippet></ROW><ROW><id>21132544</id><snippet>**</snippet></ROW><ROW><id>21132544</id><snippet>db.blah_table.insert(**{"blah_field" : "blah_value"})
</snippet></ROW><ROW><id>21132619</id><snippet>deferred</snippet></ROW><ROW><id>21132619</id><snippet>session.query(User).options(defer(User.name, User.nickname, ...)).all()
</snippet></ROW><ROW><id>21132619</id><snippet>sa.version&gt;=0.9</snippet></ROW><ROW><id>21132619</id><snippet>load_only</snippet></ROW><ROW><id>21132619</id><snippet>session.query(User).options(load_only(User.id, User.login)).all()
</snippet></ROW><ROW><id>21132619</id><snippet>id</snippet></ROW><ROW><id>21132619</id><snippet>primary_key</snippet></ROW><ROW><id>21132931</id><snippet>import numpy as np
cimport numpy as np

cdef class MyClass:
    cdef double var1
    cdef np.ndarray[double, ndim=1] Redges

    def __init__( self, np.ndarray[double, ndim=1] Redges ):
        self.Redges = Redges
</snippet></ROW><ROW><id>21132931</id><snippet>class</snippet></ROW><ROW><id>21132931</id><snippet>cdef</snippet></ROW><ROW><id>21132931</id><snippet>Error compiling Cython file:
------------------------------------------------------------                       
...                                                                                
import numpy as np                                                                 
cimport numpy as np                                                                

cdef class MyClass:                                                                
    cdef double var1                                                               
    cdef np.ndarray[double, ndim=1] Redges                                         
                                   ^                                               
------------------------------------------------------------                       

test_cython.pyx:6:36: Buffer types only allowed as function local variables
</snippet></ROW><ROW><id>21132931</id><snippet>np.ndarray</snippet></ROW><ROW><id>21132931</id><snippet>cdef np.ndarray[double, ndim=1] Redges</snippet></ROW><ROW><id>21132931</id><snippet>import numpy as np
cimport numpy as np

cdef class MyClass:
    cdef double var1
    #cdef np.ndarray[double, ndim=1] Redges

    def __init__( self, np.ndarray[double, ndim=1] Redges ):
        self.Redges = Redges
</snippet></ROW><ROW><id>21132931</id><snippet>$cython test_cython.pyx 
$
</snippet></ROW><ROW><id>21132931</id><snippet>cython</snippet></ROW><ROW><id>21132931</id><snippet>struct</snippet></ROW><ROW><id>21132931</id><snippet>struct</snippet></ROW><ROW><id>21132931</id><snippet>np.ndarray</snippet></ROW><ROW><id>21132931</id><snippet>struct</snippet></ROW><ROW><id>21132931</id><snippet>np.ndarray</snippet></ROW><ROW><id>21132931</id><snippet>object</snippet></ROW><ROW><id>21132931</id><snippet>import numpy as np
cimport numpy as np

cdef class MyClass:
    cdef double var1
    cdef object Redges

    def __init__( self, np.ndarray[double, ndim=1] Redges ):
        self.Redges = Redges
</snippet></ROW><ROW><id>21132931</id><snippet>self.Redges</snippet></ROW><ROW><id>21132931</id><snippet>import numpy as np
cimport numpy as np

cdef class MyClass:
    cdef double var1
    cdef object Redges

    def __init__( self, np.ndarray[double, ndim=1] Redges ):
        self.Redges = Redges

    def do_stuff(self):
        cdef np.ndarray[double, ndim=1] ar
        ar = self.Redges
        ar[0] += 1
        return ar[0]
</snippet></ROW><ROW><id>21132931</id><snippet>do_stuff</snippet></ROW><ROW><id>21132931</id><snippet>ar</snippet></ROW><ROW><id>21132953</id><snippet>logs = PrizeVerificationCodeSMSLog.objects.filter(winner__lucky_draw_id=id).order_by('-created_on')
winners = logs.select_related("winner")[:10]
</snippet></ROW><ROW><id>21132953</id><snippet>SELECT "prizeverificationcodesmslog"."id", "prizeverificationcodesmslog"."winner_id", 
    "prizeverificationcodesmslog"."mobile_number", "prizeverificationcodesmslog"."created_on", 
    "winner"."id", "winner"."lucky_draw_id", "winner"."participation_id", 
    "winner"."prize_id", "winner"."mobile_number" 
FROM "prizeverificationcodesmslog" 
INNER JOIN "winner" ON ("prizeverificationcodesmslog"."winner_id" = "winner"."id") 
WHERE "winner"."lucky_draw_id" = 1  
ORDER BY "prizeverificationcodesmslog"."created_on" 
DESC LIMIT 10;
</snippet></ROW><ROW><id>21132960</id><snippet>allow_tags</snippet></ROW><ROW><id>21132960</id><snippet>class MyModel(models.Model):
    my_attribute = models.CharField(max_length=50)

    def my_link(self):
        return '&lt;a href=google.com&gt;google&lt;/a&gt;'
    my_link.allow_tags = True # &lt;---
</snippet></ROW><ROW><id>21132960</id><snippet>ModelAdmin.list_display</snippet></ROW><ROW><id>21133022</id><snippet>- url: /crons/startgooglepluscrawler/
  script: crons.startgooglepluscrawler.app
  login: admin
</snippet></ROW><ROW><id>21133022</id><snippet>backends: 
- name: google-plus-crawler
  class: B2
  start: backends.googlepluscrawler.app
  options: dynamic, failfast
  instances: 1
</snippet></ROW><ROW><id>21133022</id><snippet>cron:
- description: get daily google plus user followers and followings
  url: /crons/startgooglepluscrawler/
  schedule: every day 09:00
</snippet></ROW><ROW><id>21133022</id><snippet>total_storage_limit: 10M
queue:
- name: google-plus-daily-crawling
  rate: 1/s
  retry_parameters:
    task_retry_limit: 0
    task_age_limit: 1s
</snippet></ROW><ROW><id>21133022</id><snippet>class StartGooglePlusCrawlerHandler(webapp2.RequestHandler):

    def get(self):
        logging.info("Running daily Cron")
        taskqueue.add(queue_name = "google-plus-daily-crawling",
                    url="/_ah/start",
                    method='GET',
                    target=(None if self.is_dev_server() else 'google-plus-crawler'),
                    headers={"X-AppEngine-FailFast":"true"}
                    )
        logging.info("Daily Cron finished")

    def is_dev_server(self):
        return os.environ['SERVER_SOFTWARE'].startswith('Dev')


app = webapp2.WSGIApplication([
        ("/crons/startgooglepluscrawler/",StartGooglePlusCrawlerHandler)

    ],debug=True)
</snippet></ROW><ROW><id>21133022</id><snippet>backends/googlepluscrawler.py</snippet></ROW><ROW><id>21133022</id><snippet>/_ah/start</snippet></ROW><ROW><id>21133022</id><snippet>app = webapp2.WSGIApplication(
            [('/_ah/start', StartHandler)],
            debug=True,
            config=config.config)
</snippet></ROW><ROW><id>21133268</id><snippet>semicolon_pos = pos_word + len(word) # Possible position
if long_string[semicolon_pos:semicolon_pos+1] == ':':
   # Do something
else:
   # do something else 
</snippet></ROW><ROW><id>21133484</id><snippet>crop_img = [[255 for x in xrange(377)] for x in xrange(377) ]</snippet></ROW><ROW><id>21133484</id><snippet>crop_img = [[[255, 255, 255] for x in xrange(377)] for x in xrange(377) ]</snippet></ROW><ROW><id>21133490</id><snippet>__instance</snippet></ROW><ROW><id>21133490</id><snippet>cls.__instance</snippet></ROW><ROW><id>21133828</id><snippet># -*- coding: &lt;encoding name&gt; -*-
</snippet></ROW><ROW><id>21133828</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>21134095</id><snippet>sudo apt-get install python-imaging-tk
</snippet></ROW><ROW><id>21134095</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

from Tkinter import *
from PIL import Image, ImageTk
import tkFileDialog

appname = "example"

class App(object):
    def __init__(self, root=None):
        if not root:
            root = Tk()
        self.root = root
        self.initUI()

    def initUI(self):
        self.root.title(appname)
        menubar = Menu(self.root)
        self.root.config(menu=menubar)
        fileMenu = Menu(menubar, tearoff=0)
        fileMenu.add_command(label="Open File", command=self.fileOpen)
        fileMenu.add_command(label="Exit", command=self.onExit)
        menubar.add_cascade(label="File", menu=fileMenu)
        self.canvas = Canvas(self.root)
        self.canvas.pack(side=LEFT, fill=BOTH)
        self.scrollbar_vert = Scrollbar(self.root)
        self.scrollbar_vert.pack(side=RIGHT, fill=Y)
        self.scrollbar_hor = Scrollbar(self.root)
        self.scrollbar_hor.config(orient=HORIZONTAL)
        self.scrollbar_hor.pack(side=BOTTOM, fill=X)

    def onExit(self):
        self.root.quit()

    def fileOpen(self):
        filename = tkFileDialog.askopenfile(
                parent=self.root,
                mode='rb',
                title='Choose a file',
                filetypes=[ ( "Image files",("*.jpg", "*.jpeg", "*.png", "*.gif") ), ("All files", ("*.*"))] )

        if filename == None:
            return
        self.img = Image.open(filename)
        self.photo_image = ImageTk.PhotoImage(self.img)
        self.canvas.pack_forget()
        self.canvas = Canvas(self.root, width=self.img.size[0], height=self.img.size[1])
        self.canvas.create_image(10, 10, anchor=NW, image=self.photo_image)
        self.canvas.pack(side=LEFT, fill=BOTH)
        self.canvas.config(yscrollcommand=self.scrollbar_vert.set)
        self.canvas.config(xscrollcommand=self.scrollbar_hor.set)
        self.canvas.config(scrollregion=self.canvas.bbox(ALL))
        self.scrollbar_vert.config(command=self.canvas.yview)
        self.scrollbar_hor.config(command=self.canvas.xview)

    def run(self):
        self.root.mainloop()

def main():
    root = Tk()
    root.geometry("250x150+300+300")
    app = App(root)
    app.run()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>21134452</id><snippet>&gt;&gt;&gt; str[:str.find('\0')]
'string ends with null'
</snippet></ROW><ROW><id>21134452</id><snippet>str</snippet></ROW><ROW><id>21134452</id><snippet>str</snippet></ROW><ROW><id>21134809</id><snippet>thread = []
for i in range(3):
    try:
        new_thread = CoreRouterThread(count, args)
        new_thread.start()
        # we append the thread here so we don't get any failed threads in the list.
        thread.append(new_thread)
     except:
        logger.error("Error: unable to start thread ")
</snippet></ROW><ROW><id>21134857</id><snippet>import numpy as np

n = 10
#also works for non-square A
A = np.random.randint(2, size=(n*2,n)).astype(np.int8)
#force the inclusion of some hits, to keep our algorithm on its toes
##A[0] = A[1]


def base_pack_lazy(a, base, dtype=np.uint64):
    """
    pack the last axis of an array as minimal base representation
    lazily yields packed columns of the original matrix
    """
    a = np.ascontiguousarray( np.rollaxis(a, -1))
    init = np.zeros(a.shape[1:], dtype)
    packing = int(np.dtype(dtype).itemsize * 8 / (float(base) / 2))
    for columns in np.array_split(a, (len(a)-1)//packing+1):
        yield reduce(
            lambda acc,inc: acc*base+inc,
            columns,
            init)

def unique_count(a):
    """returns counts of unique elements"""
    unique, inverse = np.unique(a, return_inverse=True)
    count = np.zeros(len(unique), np.int)
    np.add.at(count, inverse, 1)        #note; this scatter operation requires numpy 1.8; use a sparse matrix otherwise!
    return unique, count, inverse

def has_identical_row_sums_lazy(A, combinations_index):
    """
    compute the existence of combinations of rows summing to the same vector,
    given an nxm matrix A and an index matrix specifying all combinations

    naively, we need to compute the sum of each row combination at least once, giving n^3 computations
    however, this isnt strictly required; we can lazily consider the columns, giving an early exit opportunity
    all nicely vectorized of course
    """

    multiplicity, combinations = combinations_index.shape
    #list of indices into combinations_index, denoting possibly interacting combinations
    active_combinations = np.arange(combinations, dtype=np.uint32)

    for packed_column in base_pack_lazy(A, base=multiplicity+1):       #loop over packed cols
        #compute rowsums only for a fixed number of columns at a time.
        #this is O(n^2) rather than O(n^3), and after considering the first column,
        #we can typically already exclude almost all rowpairs
        partial_rowsums = sum(packed_column[I[active_combinations]] for I in combinations_index)
        #find duplicates in this column
        unique, count, inverse = unique_count(partial_rowsums)
        #prune those pairs which we can exclude as having different sums, based on columns inspected thus far
        active_combinations = active_combinations[count[inverse] &gt; 1]
        #early exit; no pairs
        if len(active_combinations)==0:
            return False
    return True

def has_identical_triple_row_sums(A):
    n = len(A)
    idx = np.array( [(i,j,k)
        for i in xrange(n)
            for j in xrange(n)
                for k in xrange(n)
                    if i&lt;j and j&lt;k], dtype=np.uint16)
    idx = np.ascontiguousarray( idx.T)
    return has_identical_row_sums_lazy(A, idx)

def has_identical_double_row_sums(A):
    n = len(A)
    idx = np.array(np.tril_indices(n,-1), dtype=np.int32)
    return has_identical_row_sums_lazy(A, idx)


from time import clock
t = clock()
for i in xrange(10):
    print has_identical_double_row_sums(A)
    print has_identical_triple_row_sums(A)
print clock()-t
</snippet></ROW><ROW><id>21135159</id><snippet>from commandline_reader import Commandline_Reader
reader = Commandline_Reader('--get_serial_number')
output = reader.run()

print output
</snippet></ROW><ROW><id>21135159</id><snippet>class Commandline_Reader:
    def __init__(self,argString=''):
        self.output = []

    def run(self):
        # do stuff
        a = 'somevariable'
        self.output.append(a)
        return self.output 
</snippet></ROW><ROW><id>21135398</id><snippet>shell</snippet></ROW><ROW><id>21135398</id><snippet>(let ((explicit-shell-file-name "/usr/bin/ipython"))
  (shell))
</snippet></ROW><ROW><id>21135398</id><snippet>ansi-term</snippet></ROW><ROW><id>21135398</id><snippet>shell</snippet></ROW><ROW><id>21135398</id><snippet>term-line-mode</snippet></ROW><ROW><id>21135398</id><snippet>ansi-term</snippet></ROW><ROW><id>21135398</id><snippet>term-char-mode</snippet></ROW><ROW><id>21135398</id><snippet>term-line-mode</snippet></ROW><ROW><id>21135647</id><snippet>Include</snippet></ROW><ROW><id>21135647</id><snippet>Lib</snippet></ROW><ROW><id>21135647</id><snippet>Scripts</snippet></ROW><ROW><id>21135737</id><snippet>&gt;</snippet></ROW><ROW><id>21135737</id><snippet>subprocess.call()</snippet></ROW><ROW><id>21135737</id><snippet>args</snippet></ROW><ROW><id>21135737</id><snippet>shell=False</snippet></ROW><ROW><id>21135737</id><snippet>shell=True</snippet></ROW><ROW><id>21135737</id><snippet>subprocess.call("cat /path/to/file_A &gt; file_B", shell=True)
</snippet></ROW><ROW><id>21135737</id><snippet>subprocess</snippet></ROW><ROW><id>21135737</id><snippet>with open('file_B', 'w') as outfile:
    subprocess.call(["cat", "/path/to/file_A"], stdout=outfile)
</snippet></ROW><ROW><id>21135737</id><snippet>shutil.copyfile()</snippet></ROW><ROW><id>21135737</id><snippet>import shutil

shutil.copyfile('/path/to/file_A', 'file_B')
</snippet></ROW><ROW><id>21135815</id><snippet>Name of dept:{{=z[0].name}}
</snippet></ROW><ROW><id>21135853</id><snippet>&gt;&gt;&gt; test_str = "&lt;1&gt;dadad&lt;2&gt;gfdgf&lt;3&gt;"
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'(?=&lt;).*?(?&lt;=&gt;)', test_str)
['&lt;1&gt;', '&lt;2&gt;', '&lt;3&gt;']
</snippet></ROW><ROW><id>21135853</id><snippet>['&lt;1&gt;dadad&lt;2&gt;gfdgf&lt;3&gt;']</snippet></ROW><ROW><id>21135941</id><snippet>xlim((from, to))</snippet></ROW><ROW><id>21135941</id><snippet>ylim((from, to))</snippet></ROW><ROW><id>21135988</id><snippet>import numpy as np

def montage(imgarray, nrows=None, border=5, border_val=np.nan):
    """
    Returns an array of regularly spaced images in a regular grid, separated
    by a border

    imgarray: 
        3D array of 2D images (n_images, rows, cols)
    nrows:  
        the number of rows of images in the output array. if 
        unspecified, nrows = ceil(sqrt(n_images))
    border: 
        the border size separating images (px)
    border_val:
        the value of the border regions of the output array (np.nan
        renders as transparent with imshow)
    """

    dims = (imgarray.shape[0], imgarray.shape[1]+2*border,
        imgarray.shape[2] + 2*border)

    X = np.ones(dims, dtype=imgarray.dtype) * border_val
    X[:,border:-border,border:-border] = imgarray

    # array dims should be [imageno,r,c]
    count, m, n = X.shape

    if nrows != None:
        mm = nrows
        nn = int(np.ceil(count/nrows))
    else:
        mm = int(np.ceil(np.sqrt(count)))
        nn = mm

    M = np.ones((nn * n, mm * m)) * np.nan

    image_id = 0
    for j in xrange(mm):
        for k in xrange(nn):
            if image_id &gt;= count: 
                break
            sliceM, sliceN = j * m, k * n
            img = X[image_id,:, :].T
            M[sliceN:(sliceN + n), sliceM:(sliceM + m)] = img
            image_id += 1

    return np.flipud(np.rot90(M))
</snippet></ROW><ROW><id>21135988</id><snippet>from scipy.misc import lena
from matplotlib import pyplot as plt

img = lena().astype(np.float32)
img -= img.min()
img /= img.max()
imgarray = np.sin(np.linspace(0, 2*np.pi, 25)[:, None, None] + img)

m = montage(imgarray)
plt.imshow(m, cmap=plt.cm.jet)
</snippet></ROW><ROW><id>21136135</id><snippet>import csv
from itertools import izip_longest

with open('result.csv','wb') as out:
    keys = list_of_dict[0].keys()
    f1 = csv.DictWriter(out, keys)
    f1.writeheader()
    f1.writerows(dict(zip(keys, row)) for row in izip_longest(*list_of_dict[0].values()))
</snippet></ROW><ROW><id>21136135</id><snippet>&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; list_of_dict = [{'A': [1, 2, 3, 4, 5], 'B': [10, 11]}]
&gt;&gt;&gt; keys = list_of_dict[0].keys()
&gt;&gt;&gt; [dict(zip(keys, row)) for row in izip_longest(*list_of_dict[0].values())]
[{'A': 1, 'B': 10}, {'A': 2, 'B': 11}, {'A': 3, 'B': None}, {'A': 4, 'B': None}, {'A': 5, 'B': None}]
</snippet></ROW><ROW><id>21136434</id><snippet>class MenuMixin(object):
    def get_context_data(self, **kwargs):
        context = super(MenuMixin, self).get_context_data(**kwargs)
        context['menu'] = MenuModel.objects.all()
        return context


class MyListView(MenuMixin, ListView):
    ...
</snippet></ROW><ROW><id>21136434</id><snippet>{% include "partials/menu.html" %}
</snippet></ROW><ROW><id>21136434</id><snippet>{% for item in menu %}
    &lt;a href="{{ item.link }}"&gt;{{ item.name }}&lt;/a&gt;
{% empty %}
    Do something for empty...
{% endfor %}
</snippet></ROW><ROW><id>21136569</id><snippet>t = open(meno_suboru)
# open a file to read in 
j = 0
# initialise line counter
self.pole = []
# create list to hold things
self.dvere = {}  
# create dictionary to hold other things
while True:
# loop until condition met
    riadok = t.readline().strip()   
    # get the next line from t and strip the newline character, whitespace etc
    if newLine == '':
    # if we've reached a blank line
        break
        # we're done
    for i in range(len(riadok)):
    # count through the characters in the new line
        if riadok[i] == 'v': 
        # if current character is a 'v'
            self.vajce = Vajce(i*40+20, j*40+20)    
            # create a new Vjace object and set to self.vajce
            raidok = riadok.replace('v','.')
            # replace all 'v's in the line with '.'s to prevent further matches
            # so we only ever have one self.vjace
        if newLine[i] == 'z':
        # if current character is a 'z'
            self.dvere[j,i] = Dvere(i*40, j*40) 
            # same as before, but self.dvere is a dictionary so we 
            # keep any previous Dvere objects too - dictionary key
            # is a tuple (j, i)
    self.pole.append(list(riadok))
    # turn the line into a list of characters and add to the self.pole list
    j += 1
    # increment the line counter
</snippet></ROW><ROW><id>21136569</id><snippet>with open(meno_suboru) as t: not 'open()' and 'close()'
    for j, riadok in enumerate(t): # not 'while True:'
        # use index j and line riadok
        ...
        for i, char in riadok: # not 'for i in range(len(riadok)):'
            # use index i and character char
            ...
</snippet></ROW><ROW><id>21136575</id><snippet>StudentID</snippet></ROW><ROW><id>21136575</id><snippet>print("{:&gt;9} {:&lt;50} {:&lt;8}".format(*col_names))
for row in rows:    
    print("{:^9} {:&lt;50} {:&gt;8}".format(*row))
</snippet></ROW><ROW><id>21136590</id><snippet>self.ui.dateTimeEdit.calendarWidget().setLocale(...)
</snippet></ROW><ROW><id>21136721</id><snippet>class Node(object):

    def __init__(self, data, next=None):

        self.data = data
        self.next = next

    def __str__(self):
        return str(self.data)



class LinkedList(object):



    def __init__(self):

        self.head = None
        self.size = 0


    def append(self, data):
            if not self.head:
                n = Node(data)
                self.head = n
                return
            else:
                n = self.head

                while n.next != None:
                    n = n.next

                new_node = Node(data)
                n.next = new_node;
                return


    def isEmpty(self):
        return not self.head

    def printList(self):
        n = self.head

        while n:
            print str(n)
            n = n.next

ll = LinkedList()
elems = [1, 2, 3, 54, 6]
for elem in elems:
    ll.append(elem)

ll.printList()
</snippet></ROW><ROW><id>21136721</id><snippet>&gt;&gt;&gt; 
1
2
3
54
6
</snippet></ROW><ROW><id>21136722</id><snippet>variable1 = '1+2+3*2-1'
tokens = '+*-/'
for token in tokens:
    variable1 = variable1.replace(token, ')' + token)
variable1 += ')'
variable1 = variable1.replace(')', '', 1)
variable2 = variable1.count(')') * '(' + variable1
</snippet></ROW><ROW><id>21136722</id><snippet>')' + token</snippet></ROW><ROW><id>21136722</id><snippet>")%s" % token</snippet></ROW><ROW><id>21136951</id><snippet>LabelBinarizer</snippet></ROW><ROW><id>21136951</id><snippet>DictVectorizer</snippet></ROW><ROW><id>21136951</id><snippet>dict</snippet></ROW><ROW><id>21136951</id><snippet>True</snippet></ROW><ROW><id>21136951</id><snippet>&gt;&gt;&gt; def flatten_ingredients(d):
...     # in-place version
...     if isinstance(d.get('Ingredients'), list):
...         for ingredient in d.pop('Ingredients'):
...             d['Ingredients=%s' % ingredient] = True
...     return d
... 
&gt;&gt;&gt; RecipeData=[{'RecipeID':1,'Ingredients':['Flour','Milk'],'TimeToPrep':20}, {'RecipeID':2,'Ingredients':'Milk','TimeToPrep':5} ,{'RecipeID':3,'Ingredients':'Unobtainium','TimeToPrep':100}]
&gt;&gt;&gt; map(flatten_ingredients, RecipeData)
[{'Ingredients=Milk': True, 'RecipeID': 1, 'TimeToPrep': 20, 'Ingredients=Flour': True}, {'RecipeID': 2, 'TimeToPrep': 5, 'Ingredients': 'Milk'}, {'RecipeID': 3, 'TimeToPrep': 100, 'Ingredients': 'Unobtainium'}]
</snippet></ROW><ROW><id>21136951</id><snippet>&gt;&gt;&gt; from sklearn.feature_extraction import DictVectorizer
&gt;&gt;&gt; dv = DictVectorizer()
&gt;&gt;&gt; dv.fit_transform(flatten_ingredients(d) for d in RecipeData).toarray()
array([[   1.,    1.,    0.,    1.,   20.],
       [   0.,    1.,    0.,    2.,    5.],
       [   0.,    0.,    1.,    3.,  100.]])
&gt;&gt;&gt; dv.feature_names_
['Ingredients=Flour', 'Ingredients=Milk', 'Ingredients=Unobtainium', 'RecipeID', 'TimeToPrep']
</snippet></ROW><ROW><id>21136951</id><snippet>RecipeID</snippet></ROW><ROW><id>21137223</id><snippet>DD_Example_Simulator.py</snippet></ROW><ROW><id>21137223</id><snippet>DD_Example_Simulator.py</snippet></ROW><ROW><id>21137223</id><snippet>// inspectso.py
import inspect

for value in inspect.stack():
    print value[1]
</snippet></ROW><ROW><id>21137223</id><snippet>// inspect_so.py
import inspectso
</snippet></ROW><ROW><id>21137223</id><snippet>e:\Temp&gt;c:/Python27/python.exe E:/temp/inspect_so.py
E:\temp\inspectso.py
E:/temp/inspect_so.py

e:\Temp&gt;c:/Python27/python.exe E:\temp\inspect_so.py
E:\temp\inspectso.py
E:\temp\inspect_so.py

e:\Temp&gt;c:/Python27/python.exe inspect_so.py
e:\Temp\inspectso.py
inspect_so.py
</snippet></ROW><ROW><id>21137223</id><snippet>inspect_so.py</snippet></ROW><ROW><id>21137223</id><snippet>inspectso.py</snippet></ROW><ROW><id>21137261</id><snippet>&lt;B1-Motion&gt;</snippet></ROW><ROW><id>21137261</id><snippet>winfo_containing</snippet></ROW><ROW><id>21137261</id><snippet>event.x_root</snippet></ROW><ROW><id>21137261</id><snippet>event.y_root</snippet></ROW><ROW><id>21137261</id><snippet>winfo_containing</snippet></ROW><ROW><id>21137261</id><snippet>self.bind_all("&lt;B1-Motion&gt;", self.on_motion)
...
def on_motion(self, event):
    widget = self.winfo_containing(event.x_root, event.y_root)
    ...
</snippet></ROW><ROW><id>21137384</id><snippet>from bs4 import BeautifulSoup

data = '''
&lt;div class="day"&gt;&lt;div class="content"&gt;Idag&lt;span id='updatedby'&gt;, by &lt;b&gt;Karl&lt;/b&gt; (100)     &lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="link"&gt;&lt;a href="out.php?id=XXXXXX" target="_blank"&gt;&lt;img src="img/ikon-   Hemsida.gif" class="type" alt="Hemsida" /&gt;&lt;div class="text"&gt; Sample text1 &lt;/div&gt;&lt;/a&gt;&lt;br /&gt;   &lt;div class="sbar"&gt;&lt;img src="img/comment.gif" class="comment" alt="Kommentarer" /&gt; &lt;a    href="?p=komment&amp;id=xxxxx"&gt;18 comments&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="link"&gt;&lt;a href="out.php?id=XXXXXX" target="_blank"&gt;&lt;img src="img/ikon-Hemsida.gif" class="type" alt="Hemsida" /&gt;&lt;div class="text"&gt; Sample text2 &lt;/div&gt;&lt;/a&gt;&lt;br /&gt; &lt;div class="sbar"&gt;&lt;img src="img/comment.gif" class="comment" alt="Kommentarer" /&gt; &lt;a href="?p=komment&amp;id=xxxxx"&gt;18 comments&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="link"&gt;&lt;a href="out.php?id=XXXXXX" target="_blank"&gt;&lt;img src="img/ikon-Hemsida.gif" class="type" alt="Hemsida" /&gt;&lt;div class="text"&gt; Sample text3 &lt;/div&gt;&lt;/a&gt;&lt;br /&gt;  &lt;div class="sbar"&gt;&lt;img src="img/comment.gif" class="comment" alt="Kommentarer" /&gt; &lt;a   href="?p=komment&amp;id=xxxxx"&gt;18 comments&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="day"&gt;&lt;div class="content"&gt;2014-01-14&lt;span id='updatedby'&gt;, by&lt;b&gt;Person&lt;/b&gt;  (50)&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="link"&gt;&lt;a href="out.php?id=XXXXXX" target="_blank"&gt;&lt;img src="img/ikon-Hemsida.gif" class="type" alt="Hemsida" /&gt;&lt;div class="text"&gt; Sample text4 &lt;/div&gt;&lt;/a&gt;&lt;br /&gt; &lt;div class="sbar"&gt;&lt;img src="img/comment.gif" class="comment" alt="Kommentarer" /&gt; &lt;a href="?p=komment&amp;id=xxxxx"&gt;18 comments&lt;/a&gt;&lt;/div&gt;&lt;/div&gt; 
'''
soup = BeautifulSoup(data)

result = []
tag = soup.find_all('div', {'class': 'day'})[0]
while True:
    tag = tag.next_sibling
    if hasattr(tag, 'class') and 'day' in tag['class']:
        break
    result.append(tag)
for e in result:
    print(e)
</snippet></ROW><ROW><id>21137384</id><snippet>&lt;div class="link"&gt;&lt;a href="out.php?id=XXXXXX" target="_blank"&gt;&lt;img alt="Hemsida" class="type" src="img/ikon-   Hemsida.gif"/&gt;&lt;div class="text"&gt; Sample text1 &lt;/div&gt;&lt;/a&gt;&lt;br/&gt; &lt;div class="sbar"&gt;&lt;img alt="Kommentarer" class="comment" src="img/comment.gif"/&gt; &lt;a href="?p=komment&amp;id=xxxxx"&gt;18 comments&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;


&lt;div class="link"&gt;&lt;a href="out.php?id=XXXXXX" target="_blank"&gt;&lt;img alt="Hemsida" class="type" src="img/ikon-Hemsida.gif"/&gt;&lt;div class="text"&gt; Sample text2 &lt;/div&gt;&lt;/a&gt;&lt;br/&gt; &lt;div class="sbar"&gt;&lt;img alt="Kommentarer" class="comment" src="img/comment.gif"/&gt; &lt;a href="?p=komment&amp;id=xxxxx"&gt;18 comments&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;


&lt;div class="link"&gt;&lt;a href="out.php?id=XXXXXX" target="_blank"&gt;&lt;img alt="Hemsida" class="type" src="img/ikon-Hemsida.gif"/&gt;&lt;div class="text"&gt; Sample text3 &lt;/div&gt;&lt;/a&gt;&lt;br/&gt; &lt;div class="sbar"&gt;&lt;img alt="Kommentarer" class="comment" src="img/comment.gif"/&gt; &lt;a href="?p=komment&amp;id=xxxxx"&gt;18 comments&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>21137384</id><snippet>class="day"</snippet></ROW><ROW><id>21137384</id><snippet>class="day"</snippet></ROW><ROW><id>21137384</id><snippet>break</snippet></ROW><ROW><id>21137407</id><snippet>def alive():
    with open("log.txt", "w") as output:
        while True:
            time.sleep(5)
            output.write("X")
            output.flush() # important to ensure that long periods 
                       # of 'X' are not kept in buffer and lost on power down. 

p = Process(target=f, args=('bob',))
p.start()

time.sleep(40) # simulate real program
p.terminate() # eventually
</snippet></ROW><ROW><id>21137805</id><snippet>Theta1</snippet></ROW><ROW><id>21137805</id><snippet>Theta2</snippet></ROW><ROW><id>21137805</id><snippet>J</snippet></ROW><ROW><id>21137805</id><snippet>nn_params</snippet></ROW><ROW><id>21137805</id><snippet>return J</snippet></ROW><ROW><id>21138009</id><snippet>str.split()</snippet></ROW><ROW><id>21138009</id><snippet>int()</snippet></ROW><ROW><id>21138009</id><snippet>with open("info.txt", "r") as read:
    lines = []
    for item in read:
        row = item.split()
        row[:2] = map(int, row[:2])
        lines.append(row)
</snippet></ROW><ROW><id>21138056</id><snippet>    def find_tower(blocks, height):

def solve(groups, cur_group, index):
    if sum(cur_group) == height:
        new_group = list(groups)# if tower is on right height
        new_group.append(cur_group)# add to groups of towers
        return solve(new_group, [], 0)
    if index == len(blocks):# if index max
        return groups
    elif sum(cur_group) &gt; height:# if its higher than height
        return groups
    elif blocks[index] is None:# if its a None index skip
        return solve(groups, cur_group, index+1)

    temp = blocks[index]
    blocks[index] = None# changing used value to none
    r1 = solve(groups, cur_group + [temp], index+1)
    blocks[index] = temp# puttin back used value
    r2 = solve(groups, cur_group, index+1)
    return max(r1, r2, key=lambda x: len(x))# return longer group
return solve([], [], 0)
</snippet></ROW><ROW><id>21138130</id><snippet>g.user</snippet></ROW><ROW><id>21138130</id><snippet>g.user</snippet></ROW><ROW><id>21138130</id><snippet>before_request</snippet></ROW><ROW><id>21138130</id><snippet>before_request</snippet></ROW><ROW><id>21138130</id><snippet>g.user</snippet></ROW><ROW><id>21138130</id><snippet>app/views.py</snippet></ROW><ROW><id>21138130</id><snippet>@app.before_request
def before_request():
    g.user = current_user
</snippet></ROW><ROW><id>21138130</id><snippet>current_user</snippet></ROW><ROW><id>21138130</id><snippet>g</snippet></ROW><ROW><id>21138130</id><snippet>before_request</snippet></ROW><ROW><id>21138447</id><snippet>LUT(srcImage, lookupTable, dstImage)
</snippet></ROW><ROW><id>21138520</id><snippet>-1</snippet></ROW><ROW><id>21138520</id><snippet>0</snippet></ROW><ROW><id>21138520</id><snippet>sorted(inputlist, key=lambda t: -1 if t != (0, 0) else 0)
</snippet></ROW><ROW><id>21138520</id><snippet>sorted(inputlist, key=lambda t: t == (0, 0))
</snippet></ROW><ROW><id>21138520</id><snippet>False</snippet></ROW><ROW><id>21138520</id><snippet>True</snippet></ROW><ROW><id>21138520</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; r = lambda: random.randint(1, 10)
&gt;&gt;&gt; inputlist = [(0,0), (r(),r()), (r(),r()), (0,0), (0,0), (r(),r()), (0,0)]
&gt;&gt;&gt; sorted(inputlist, key=lambda t: t == (0, 0))
[(4, 5), (3, 2), (3, 3), (0, 0), (0, 0), (0, 0), (0, 0)]
</snippet></ROW><ROW><id>21138890</id><snippet>MyForm</snippet></ROW><ROW><id>21138890</id><snippet>__init__()</snippet></ROW><ROW><id>21138890</id><snippet>self.ui.lineEdit_URL.textChanged.connect(self.valueChanged)
</snippet></ROW><ROW><id>21138890</id><snippet>def valueChanged(self, text):
     if QtGui.QApplication.clipboard().text() == text:
         self.pasteEvent(text)
</snippet></ROW><ROW><id>21138890</id><snippet>def pasteEvent(self, text):
    # this is your paste event, whenever any text is pasted in the
    # 'lineEdit_URL', this method gets called.
    # 'text' is the newly pasted text.

    print text
</snippet></ROW><ROW><id>21138964</id><snippet>parseMock.parse_string.return_value = True
</snippet></ROW><ROW><id>21139115</id><snippet>file_lock</snippet></ROW><ROW><id>21139115</id><snippet>type(self).file_lock</snippet></ROW><ROW><id>21139115</id><snippet>self.file_lock</snippet></ROW><ROW><id>21139115</id><snippet>with open/lock</snippet></ROW><ROW><id>21139115</id><snippet>f=open(...)</snippet></ROW><ROW><id>21139115</id><snippet>lock.acquire()</snippet></ROW><ROW><id>21139115</id><snippet>file.close()</snippet></ROW><ROW><id>21139115</id><snippet>lock.release()</snippet></ROW><ROW><id>21139466</id><snippet>from models import finding
</snippet></ROW><ROW><id>21139466</id><snippet>import models.finding
</snippet></ROW><ROW><id>21139466</id><snippet>import .finding  # The . means "from the same directory as this module"
</snippet></ROW><ROW><id>21139563</id><snippet>def plane_ride_cost(city):
    choices = {                          # Make a dictionary of the choices.
        'Charlotte': 183,
        'Tampa': 220,
        'Pittsburgh': 222,
        'Los Angeles': 475
    }

    return choices.get(city, None)       # Look up the city in the dictionary.
                                         # Return None if the city isn't there.
</snippet></ROW><ROW><id>21139750</id><snippet>ps -ef | grep python
</snippet></ROW><ROW><id>21139803</id><snippet>O(n^2)</snippet></ROW><ROW><id>21140012</id><snippet>groupby</snippet></ROW><ROW><id>21140012</id><snippet>MultiIndex</snippet></ROW><ROW><id>21140012</id><snippet>In [36]: df = df.set_index(['code', 'colour']).sort_index()

In [37]: df
Out[37]: 
              id irrelevant1 irrelevant2 irrelevant3    amount
code  colour                                                  
one   black    1         foo         foo         foo  0.103045
      white    2         foo         foo         foo  0.751824
      white    7         bar         bar         bar -1.275114
three black    6         foo         foo         foo  0.311305
      white    4         bar         bar         bar -0.416722
two   black    5         bar         bar         bar  1.534859
      white    3         foo         foo         foo -1.068399
      white    8         bar         bar         bar -0.243893

[8 rows x 5 columns]
</snippet></ROW><ROW><id>21140012</id><snippet>In [38]: df.loc['one', 'white']
Out[38]: 
             id irrelevant1 irrelevant2 irrelevant3    amount
code colour                                                  
one  white    2         foo         foo         foo  0.751824
     white    7         bar         bar         bar -1.275114

[2 rows x 5 columns]
</snippet></ROW><ROW><id>21140012</id><snippet>.xs</snippet></ROW><ROW><id>21140012</id><snippet>In [39]: df.xs('white', level='colour')
Out[39]: 
       id irrelevant1 irrelevant2 irrelevant3    amount
code                                                   
one     2         foo         foo         foo  0.751824
one     7         bar         bar         bar -1.275114
three   4         bar         bar         bar -0.416722
two     3         foo         foo         foo -1.068399
two     8         bar         bar         bar -0.243893

[5 rows x 5 columns]
</snippet></ROW><ROW><id>21140108</id><snippet>Alias /static/ /home/user/djangoproject/djangoapp/static/
&lt;Directory /home/user/djangoproject/djangoapp/static&gt;
        Order deny,allow
        Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>21140108</id><snippet>WSGIScriptAlias / /home/user/djangoproject/djangoproject/wsgi.py
WSGIPythonPath /home/user/djangoproject

&lt;Directory /home/user/djangoproject/djangoproject&gt;
  &lt;Files wsgi.py&gt;
    Order deny,allow
    Allow from all
  &lt;/Files&gt;
&lt;/Directory&gt;

Alias /static/ /home/user/djangoproject/djangoapp/static/
&lt;Directory /home/user/djangoproject/djangoapp/static&gt;
  Order deny,allow
  Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>21140254</id><snippet>self.send_header("Content-type", "application/json")</snippet></ROW><ROW><id>21140254</id><snippet>self.send_header("Access-Control-Allow-Origin","*");
self.send_header("Access-Control-Expose-Headers: Access-Control-Allow-Origin");
self.send_header(("Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept");
</snippet></ROW><ROW><id>21140261</id><snippet>askquestion</snippet></ROW><ROW><id>21140261</id><snippet>withdraw</snippet></ROW><ROW><id>21140261</id><snippet>import tkinter.messagebox
tkinter.Tk().withdraw()
a=tkinter.messagebox.askquestion('','hi')
</snippet></ROW><ROW><id>21140339</id><snippet>In [25]: pd.set_option('display.float_format', lambda x: '%.3f' % x)

In [28]: Series(np.random.randn(3))*1000000000
Out[28]: 
0    -757322420.605
1   -1436160588.997
2   -1235116117.064
dtype: float64
</snippet></ROW><ROW><id>21140339</id><snippet>In [6]: Series(np.random.randn(3)).apply(lambda x: '%.3f' % x)
Out[6]: 
0     0.026
1    -0.482
2    -0.694
dtype: object
</snippet></ROW><ROW><id>21140406</id><snippet>2013/12/30</snippet></ROW><ROW><id>21140406</id><snippet>def lastweeknumber(year):
    return datetime.date(year, 12, 28).isocalendar()[1]
</snippet></ROW><ROW><id>21140530</id><snippet>class Bar(Foo):
    def __init__(self, *args, **kwargs):
        try:
            hello = kwargs.pop('hello')
        except KeyError:
            hello = False
        Foo.__init__(self, *args, **kwargs)
</snippet></ROW><ROW><id>21140598</id><snippet>import itertools

n = 4
data = range(n)
for item1 in itertools.combinations(data, 2):
    for item2 in itertools.combinations(data, 2):
        if item1 &lt; item2 and not set(item1) &amp; set(item2):
            print item1, item2
</snippet></ROW><ROW><id>21140598</id><snippet>(0, 1) (2, 3)
(0, 2) (1, 3)
(0, 3) (1, 2)
</snippet></ROW><ROW><id>21140650</id><snippet>[[19 19 30 30]
 [11 16 11 16]]
</snippet></ROW><ROW><id>21140650</id><snippet>[[19 30]
 [16 11]]
</snippet></ROW><ROW><id>21140650</id><snippet>import numpy as np

n = 20
#also works for non-square A
A = np.random.randint(2, size=(n*6,n)).astype(np.int8)
##A = np.array( [[0, 0, 0], [1, 1, 1], [1, 1 ,1]], np.uint8)
##A = np.zeros((6,6))
#force the inclusion of some hits, to keep our algorithm on its toes
##A[0] = A[1]


def base_pack_lazy(a, base, dtype=np.uint64):
    """
    pack the last axis of an array as minimal base representation
    lazily yields packed columns of the original matrix
    """
    a = np.ascontiguousarray( np.rollaxis(a, -1))
    packing = int(np.dtype(dtype).itemsize * 8 / (float(base) / 2))
    for columns in np.array_split(a, (len(a)-1)//packing+1):
        R = np.zeros(a.shape[1:], dtype)
        for col in columns:
            R *= base
            R += col
        yield R

def unique_count(a):
    """returns counts of unique elements"""
    unique, inverse = np.unique(a, return_inverse=True)
    count = np.zeros(len(unique), np.int)
    np.add.at(count, inverse, 1)        #note; this scatter operation requires numpy 1.8; use a sparse matrix otherwise!
    return unique, count, inverse

def voidview(arr):
    """view the last axis of an array as a void object. can be used as a faster form of lexsort"""
    return np.ascontiguousarray(arr).view(np.dtype((np.void, arr.dtype.itemsize * arr.shape[-1]))).reshape(arr.shape[:-1])


def has_identical_row_sums_lazy(A, combinations_index):
    """
    compute the existence of combinations of rows summing to the same vector,
    given an nxm matrix A and an index matrix specifying all combinations

    naively, we need to compute the sum of each row combination at least once, giving n^3 computations
    however, this isnt strictly required; we can lazily consider the columns, giving an early exit opportunity
    all nicely vectorized of course
    """

    multiplicity, combinations = combinations_index.shape
    #list of indices into combinations_index, denoting possibly interacting combinations
    active_combinations = np.arange(combinations, dtype=np.uint32)
    #keep all packed columns; we might need them later
    columns = []

    for packed_column in base_pack_lazy(A, base=multiplicity+1):       #loop over packed cols
        columns.append(packed_column)
        #compute rowsums only for a fixed number of columns at a time.
        #this is O(n^2) rather than O(n^3), and after considering the first column,
        #we can typically already exclude almost all combinations
        partial_rowsums = sum(packed_column[I[active_combinations]] for I in combinations_index)
        #find duplicates in this column
        unique, count, inverse = unique_count(partial_rowsums)
        #prune those combinations which we can exclude as having different sums, based on columns inspected thus far
        active_combinations = active_combinations[count[inverse] &gt; 1]
        #early exit; no pairs
        if len(active_combinations)==0:
            return False

    """
    we now have a small set of relevant combinations, but we have lost the details of their particulars
    to see which combinations of rows does sum to the same value, we do need to consider rows as a whole
    we can simply apply the same mechanism, but for all columns at the same time,
    but only for the selected subset of row combinations known to be relevant
    """
    #construct full packed matrix
    B = np.ascontiguousarray(np.vstack(columns).T)
    #perform all relevant sums, over all columns
    rowsums = sum(B[I[active_combinations]] for I in combinations_index)
    #find the unique rowsums, by viewing rows as a void object
    unique, count, inverse = unique_count(voidview(rowsums))
    #if not, we did something wrong in deciding on active combinations
    assert(np.all(count&gt;1))

    #loop over all sets of rows that sum to an identical unique value
    for i in xrange(len(unique)):
        #set of indexes into combinations_index;
        #note that there may be more than two combinations that sum to the same value; we grab them all here
        combinations_group = active_combinations[inverse==i]
        #associated row-combinations
        #array of shape=(mulitplicity,group_size)
        row_combinations = combinations_index[:,combinations_group]

        #if no duplicate rows involved, we have a match
        if len(np.unique(row_combinations[:,[0,-1]])) == multiplicity*2:
            print row_combinations
            return True

    #none of identical rowsums met uniqueness criteria
    return False


def has_identical_triple_row_sums(A):
    n = len(A)
    idx = np.array( [(i,j,k)
        for i in xrange(n)
            for j in xrange(n)
                for k in xrange(n)
                    if i&lt;j and j&lt;k], dtype=np.uint16)
    idx = np.ascontiguousarray( idx.T)
    return has_identical_row_sums_lazy(A, idx)

def has_identical_double_row_sums(A):
    n = len(A)
    idx = np.array(np.tril_indices(n,-1), dtype=np.int32)
    return has_identical_row_sums_lazy(A, idx)


from time import clock
t = clock()
for i in xrange(1):
##    print has_identical_double_row_sums(A)
    print has_identical_triple_row_sums(A)
print clock()-t
</snippet></ROW><ROW><id>21140698</id><snippet>fdes = open("ip.txt","r")

for line in fdes.readlines():
    try:
        print socket.gethostbyaddr(line)
    except socket.error:
        pass
</snippet></ROW><ROW><id>21140698</id><snippet>socket.error</snippet></ROW><ROW><id>21140714</id><snippet>csv.reader</snippet></ROW><ROW><id>21140714</id><snippet>csv.writer</snippet></ROW><ROW><id>21140714</id><snippet>list(csv.reader(...))</snippet></ROW><ROW><id>21140714</id><snippet>TemplateFileWriter.writerows()</snippet></ROW><ROW><id>21140834</id><snippet>ical = create_ics(thedata)
email_invite(ical, theuser)
</snippet></ROW><ROW><id>21140834</id><snippet>ics_form</snippet></ROW><ROW><id>21140834</id><snippet>HttpResponse</snippet></ROW><ROW><id>21140834</id><snippet>attach</snippet></ROW><ROW><id>21140834</id><snippet>create_ics</snippet></ROW><ROW><id>21140834</id><snippet>def email_invite(filename, ics, user_assigned):
    subject = 'You Have Been Assigned Schuduled Maintance/Calendar invite'
    from_address = 'foo@no-reply.com'
    body = "This is a invite"
    recip = [user_assigned]
    email = EmailMessage(subject, body, from_address, recip)
    email.attach(filename, ics, 'text/calendar')
    email.send()

def create_ics(data):
    start1 = data['date_due']
    utc = vobject.icalendar.utc
    start2 = datetime.datetime(start1.year, start1.month, start1.day, tzinfo = utc)
    start3 = data['action']
    cal = vobject.iCalendar()
    cal.add('method').value = 'PUBLISH'
    vevent = cal.add('vevent')
    vevent.add('dtstart').value = start2
    vevent.add('dtend').value = start2
    vevent.add('dtstamp').value = datetime.datetime.now()
    vevent.add('summary').value = data['action'].name
    return cal.serialize()

def download_ics(request):
    # do whatever you do to prepare thedata
    ics = create_ics(thedata)
    response = HttpResponse(ics, content_type='text/calendar')
    response['Filename'] = 'filename.ics'
    response['Content-Disposition'] = 'attachment; filename=filename.ics'
    return response

ical = create_ics(thedata)
email_invite('filename.ics', ical, theuser)
</snippet></ROW><ROW><id>21140882</id><snippet>^</snippet></ROW><ROW><id>21140882</id><snippet>$</snippet></ROW><ROW><id>21140882</id><snippet>^/\d+/\d+$</snippet></ROW><ROW><id>21141263</id><snippet>i</snippet></ROW><ROW><id>21141263</id><snippet>li</snippet></ROW><ROW><id>21141403</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>21141403</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; d['h'].append('GG')
&gt;&gt;&gt; d['f'].append('JJ')
&gt;&gt;&gt; d['h'].append('PP')
&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {'h': ['GG', 'PP'], 'f': ['JJ']})
</snippet></ROW><ROW><id>21141403</id><snippet>defaultdict()</snippet></ROW><ROW><id>21141403</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d['h'] = ['GG']
&gt;&gt;&gt; d['f'] = ['JJ']
&gt;&gt;&gt; d['h'].append('PP')
&gt;&gt;&gt; print d
{'h': ['GG', 'PP'], 'f': ['JJ']}
</snippet></ROW><ROW><id>21141403</id><snippet>dict.setdefault()</snippet></ROW><ROW><id>21141403</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d.setdefault('h', []).append('GG')
&gt;&gt;&gt; d.setdefault('f', []).append('JJ')
&gt;&gt;&gt; d.setdefault('h', []).append('PP')
</snippet></ROW><ROW><id>21141403</id><snippet>defaultdict()</snippet></ROW><ROW><id>21141615</id><snippet>re.findall</snippet></ROW><ROW><id>21141615</id><snippet>re.split</snippet></ROW><ROW><id>21141615</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'[a-z]+|\d+|_|\s', '  ab2c d_ef')
[' ', ' ', 'ab', '2', 'c', ' ', 'd', '_', 'ef']
</snippet></ROW><ROW><id>21141615</id><snippet>_</snippet></ROW><ROW><id>21141897</id><snippet>def get_datalength(self):
    try:
        return self.data_length
    except AttributeError:
        raise AttributeError("No length call create_fields first")
</snippet></ROW><ROW><id>21141897</id><snippet>AttributeError</snippet></ROW><ROW><id>21141897</id><snippet>@property</snippet></ROW><ROW><id>21141897</id><snippet>@property
def datalength(self):
   return do_some_stuff(self.data_length)
</snippet></ROW><ROW><id>21142259</id><snippet>SubFactory</snippet></ROW><ROW><id>21142259</id><snippet>factories.MyFactory(user__name="John")
</snippet></ROW><ROW><id>21142410</id><snippet>^(\+\d{2} |0)\d{4}[/ ]\d{3}[.-]\d{3}$
</snippet></ROW><ROW><id>21142447</id><snippet>re.escape()</snippet></ROW><ROW><id>21142447</id><snippet>pattern = re.compile(r'\b(' + '|'.join(map(re.escape, d)) + r')\b')
</snippet></ROW><ROW><id>21142465</id><snippet>def group_runs(li,tolerance=2):
    out = []
    last = li[0]
    for x in li:
        if x-last &gt; tolerance:
            yield out
            out = []
        out.append(x)
        last = x
    yield out
</snippet></ROW><ROW><id>21142465</id><snippet>list(group_runs(my_list))
Out[48]: [[0, 1, 2, 3, 5, 6], [10, 11], [15, 16, 18, 19, 20]]
</snippet></ROW><ROW><id>21142472</id><snippet>the pixel_color_set</snippet></ROW><ROW><id>21142472</id><snippet>iteration_detail</snippet></ROW><ROW><id>21142472</id><snippet>def pixel_color_set (iterx, itery, iterations):
    pixel_color = (0,0,0)
    if iterx &gt;= lim or itery &gt;= lim or iterx &lt;= limn or itery &lt;= limn:
        RGB =int(math.sqrt(iterations) * int(255.0 / math.sqrt(iteration_detail)))
        # RGB = iterations * int(255.0/ iteration_detail)
        pixel_color = (RGB, RGB, RGB)
    return(pixel_color)
</snippet></ROW><ROW><id>21142472</id><snippet>math.sqrt</snippet></ROW><ROW><id>21142569</id><snippet>(run_task auto_output &gt;/dev/null 2&gt;&amp;1) &amp;
</snippet></ROW><ROW><id>21142569</id><snippet>wait</snippet></ROW><ROW><id>21142569</id><snippet>run_task auto_output 2&gt;/dev/null &amp; backgroundPid=$!
...
echo "run_exp finished!"
wait "$backgroundPid"
</snippet></ROW><ROW><id>21142587</id><snippet>params = (userName, password, confirmPassword, firstName, lastName,
          companyName, email, phoneNumber, addressLine1, addressLine2, 
          addressLine3, zipCode, province, country, regDate)

c.execute("INSERT INTO People VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", params)
</snippet></ROW><ROW><id>21142587</id><snippet>NULL</snippet></ROW><ROW><id>21142587</id><snippet>p_ID</snippet></ROW><ROW><id>21142596</id><snippet>user = User.select().where(User.email == resp.email)</snippet></ROW><ROW><id>21142596</id><snippet>SelectQuery</snippet></ROW><ROW><id>21142596</id><snippet>User</snippet></ROW><ROW><id>21142596</id><snippet>.first()</snippet></ROW><ROW><id>21142596</id><snippet>first</snippet></ROW><ROW><id>21142596</id><snippet>User</snippet></ROW><ROW><id>21142596</id><snippet>None</snippet></ROW><ROW><id>21142596</id><snippet>user = User.select().where(User.email == resp.email).first()
if not user:  # or if user is None:
    nickname = resp.nickname
    ...
</snippet></ROW><ROW><id>21142718</id><snippet>class AddressSerializer(ModelSerializer):
    """
    A serializer for ``Address``.
    """
    class Meta(object):
        model = Address


class OrderSerializer(ModelSerializer):
    """
    A serializer for ``Order``.
    """
    address = AddressSerializer()

    class Meta(object):
        model = Order
</snippet></ROW><ROW><id>21143530</id><snippet>RAISE()</snippet></ROW><ROW><id>21143530</id><snippet>TRIGGER</snippet></ROW><ROW><id>21143530</id><snippet>UPDATE</snippet></ROW><ROW><id>21143530</id><snippet>INSERT</snippet></ROW><ROW><id>21143530</id><snippet>DELETE</snippet></ROW><ROW><id>21143530</id><snippet>SELECT</snippet></ROW><ROW><id>21143530</id><snippet>SELECT</snippet></ROW><ROW><id>21143530</id><snippet>CREATE TRIGGER CheckingDate
BEFORE INSERT ON MyTable
FOR EACH ROW
WHEN NEW.Start_date &gt; NEW.End_date
BEGIN
SELECT RAISE(ABORT, 'End_date must be in the future');
END;
</snippet></ROW><ROW><id>21143530</id><snippet>sqlite&gt; insert into mytable values ('2030-1-1 20:20:20', datetime('now'));
Error: End_date must be in the future
</snippet></ROW><ROW><id>21143670</id><snippet>set</snippet></ROW><ROW><id>21143670</id><snippet>id</snippet></ROW><ROW><id>21143670</id><snippet>import csv

with open('sg_cand.csv', 'rb') as csvfile:
    csvReader = csv.reader(csvfile)
    seen = set()
    for row in csvReader:
        if row[0] not in seen and row[11] != '\N':
            seen.add(row[0])
            print row[0], row[11]
</snippet></ROW><ROW><id>21143670</id><snippet>row[11]</snippet></ROW><ROW><id>21143670</id><snippet>\N</snippet></ROW><ROW><id>21143670</id><snippet>row[0]</snippet></ROW><ROW><id>21143802</id><snippet>t_s</snippet></ROW><ROW><id>21143802</id><snippet>train_perceptron</snippet></ROW><ROW><id>21143802</id><snippet>t_s = train_perceptron(threshold, learning_rate, w, t_s)
</snippet></ROW><ROW><id>21143802</id><snippet>t_s</snippet></ROW><ROW><id>21143802</id><snippet>train_perceptron</snippet></ROW><ROW><id>21143802</id><snippet>training_set</snippet></ROW><ROW><id>21143802</id><snippet>return training_set</snippet></ROW><ROW><id>21143802</id><snippet>t_s = [(a[1:], b) for a, b in t_s]

for a, b in t_s:
    print "input: " + str(a) + ", output: " + str(b)
</snippet></ROW><ROW><id>21143809</id><snippet>Executor.shutdown</snippet></ROW><ROW><id>21143809</id><snippet>shutdown(wait=True)</snippet></ROW><ROW><id>21143809</id><snippet>Executor.submit()</snippet></ROW><ROW><id>21143809</id><snippet>Executor.map()</snippet></ROW><ROW><id>21143809</id><snippet>RuntimeError</snippet></ROW><ROW><id>21143809</id><snippet>True</snippet></ROW><ROW><id>21143809</id><snippet>futures.wait()</snippet></ROW><ROW><id>21143809</id><snippet>concurrent.futures.wait(fs, timeout=None, return_when=ALL_COMPLETED)</snippet></ROW><ROW><id>21143809</id><snippet>Future</snippet></ROW><ROW><id>21143809</id><snippet>Executor</snippet></ROW><ROW><id>21143809</id><snippet>fs</snippet></ROW><ROW><id>21143809</id><snippet>timeout</snippet></ROW><ROW><id>21143809</id><snippet>futures.as_completed()</snippet></ROW><ROW><id>21144079</id><snippet>import time

# ...

def readCoefficients(self):
    global a0_MSB;
    global a0_LSB;
    global b1_MSB;
    global b1_LSB;
    global b2_MSB;
    global b2_LSB;
    global c12_MSB;
    global c12_LSB;

    max_retries = 15

    a0_MSB = self.readretry(Pressure.MPL115A2_REGISTER_A0_COEFF_MSB+0, max_retries)
    a0_LSB = self.readretry(Pressure.MPL115A2_REGISTER_A0_COEFF_LSB+0, max_retries)

    b1_MSB = self.readretry(Pressure.MPL115A2_REGISTER_B1_COEFF_MSB+0, max_retries)
    b1_LSB = self.readretry(Pressure.MPL115A2_REGISTER_B1_COEFF_LSB+0, max_retries)

    b2_MSB = self.readretry(Pressure.MPL115A2_REGISTER_B2_COEFF_MSB+0, max_retries)
    b2_LSB = self.readretry(Pressure.MPL115A2_REGISTER_B2_COEFF_LSB+0, max_retries)

    c12_MSB = self.readretry(Pressure.MPL115A2_REGISTER_C12_COEFF_MSB+0, max_retries)
    c12_LSB = self.readretry(Pressure.MPL115A2_REGISTER_C12_COEFF_LSB+0, max_retries)

    def readretry(self, address, max_retries):
        for i in range(max_retries):
            try:
                return Pressure.bus.read_byte_data(
                    Pressure.MPL115A2_ADDRESS,
                    address
                )
            except IOError as e:
                # print(e)
                time.sleep(0.1)
        else:
            raise IOError("Reading failed after multiple tries")
</snippet></ROW><ROW><id>21144142</id><snippet>UPDATE Oligos o
JOIN (SELECT oligoSequence
      FROM Oligos
      GROUP BY oligoSequence
      HAVING COUNT(*) &gt; 1) dups
ON o.oligoSequence = dups.oligoSequence
SET isUniqueProbe = 1
</snippet></ROW><ROW><id>21144142</id><snippet>oligoSequence</snippet></ROW><ROW><id>21144263</id><snippet>utf-8</snippet></ROW><ROW><id>21144263</id><snippet>with open('film.html', 'w', encoding='utf-8') as f:
    print(page, file=f)
</snippet></ROW><ROW><id>21144495</id><snippet>getElementsByTagName()</snippet></ROW><ROW><id>21144495</id><snippet>group_id_element =  next(element for element in xmldoc.getElementsByTagName("groupId")
                         if element.parentNode == xmldoc.documentElement)

print group_id_element.childNodes[0].nodeValue
</snippet></ROW><ROW><id>21144500</id><snippet>str</snippet></ROW><ROW><id>21144500</id><snippet>type</snippet></ROW><ROW><id>21144500</id><snippet>del str</snippet></ROW><ROW><id>21144500</id><snippet>del type</snippet></ROW><ROW><id>21144500</id><snippet>import __builtin__

print "Result type: " + __builtin__.str(__builtin__.type(res))
</snippet></ROW><ROW><id>21144773</id><snippet>\</snippet></ROW><ROW><id>21144773</id><snippet>x</snippet></ROW><ROW><id>21144773</id><snippet>&gt;&gt;&gt; x = "60 42 00 64 62 D6 52 20 4E 65 75 2D 55 6C 6D 20 2F 20 45 76 C4"
&gt;&gt;&gt; x_split = x.split(' ')    
&gt;&gt;&gt; x_split = ', '.join(x_split)
&gt;&gt;&gt; x_split = x_split.replace(', ', '\\x')
&gt;&gt;&gt; x_split = u'\\x'+ x_split   
&gt;&gt;&gt; x_split
u'\\x60\\x42\\x00\\x64\\x62\\xD6\\x52\\x20\\x4E\\x65\\x75\\x2D\\x55\\x6C\\x6D\\x20\\x2F\\x20\\x45\\x76\\xC4'
</snippet></ROW><ROW><id>21144773</id><snippet>&gt;&gt;&gt; bb = bytearray(int(b, 16) for b in x.split())
&gt;&gt;&gt; bb
bytearray(b'`B\x00db\xd6R Neu-Ulm / Ev\xc4')
</snippet></ROW><ROW><id>21144773</id><snippet>&gt;&gt;&gt; bb.decode("iso-8859-2")
u'`B\x00db\xd6R Neu-Ulm / Ev\xc4'
&gt;&gt;&gt; print bb.decode("iso-8859-2")
`Bdb√ñR Neu-Ulm / Ev√Ñ
</snippet></ROW><ROW><id>21144874</id><snippet>from PIL import Image
from StringIO import StringIO

LargeData = urllib2.urlopen(PosterURL).read()

# read data from string
LargePoster = Image.open(StringIO(LargeData))

# After editing the image, turn it back into a string
# for saving in the database:
result = StringIO()
format = 'JPEG' # or whatever you want
SmallPoster.save(result, format)
SmallPosterString = result.getvalue()
</snippet></ROW><ROW><id>21145155</id><snippet>pickle</snippet></ROW><ROW><id>21145155</id><snippet>__init__()</snippet></ROW><ROW><id>21145155</id><snippet>__init__</snippet></ROW><ROW><id>21145155</id><snippet>__getinitargs__</snippet></ROW><ROW><id>21145155</id><snippet>__getstate__</snippet></ROW><ROW><id>21145155</id><snippet>__setstate__</snippet></ROW><ROW><id>21145155</id><snippet>class Foo(dict):
    def __init__(self):
        self.counter = 0
    def __getstate__(self):
        return (self.counter, dict(self))
    def __setstate__(self, state):
        self.counter, data = state
        self.update(data)  # will *not* call __setitem__

    def __setitem__(self, key, value):
        self.counter += 1
        super(Foo, self).__setitem__(key, value)
</snippet></ROW><ROW><id>21145155</id><snippet>dict</snippet></ROW><ROW><id>21145155</id><snippet>dict</snippet></ROW><ROW><id>21145155</id><snippet>__getstate__</snippet></ROW><ROW><id>21145155</id><snippet>__setstate__</snippet></ROW><ROW><id>21145155</id><snippet>__reduce__</snippet></ROW><ROW><id>21145155</id><snippet>class Foo(dict):
    def __init__(self):
        self.counter = 0
    def __getstate__(self):
        return (self.counter, dict(self))
    def __setstate__(self, state):
        self.counter, data = state
        self.update(data)
    def __reduce__(self):
        return (Foo, (), self.__getstate__())

    def __setitem__(self, key, value):
        self.counter += 1
        super(Foo, self).__setitem__(key, value)
</snippet></ROW><ROW><id>21145165</id><snippet>datetime.datetime(2012,1,1)</snippet></ROW><ROW><id>21145165</id><snippet>fillna</snippet></ROW><ROW><id>21145165</id><snippet>Timestamp</snippet></ROW><ROW><id>21145165</id><snippet>In [3]: s = Series(date_range('20130101',periods=10))

In [4]: s.iloc[3] = pd.NaT

In [5]: s.iloc[7] = pd.NaT

In [6]: s
Out[6]: 
0   2013-01-01 00:00:00
1   2013-01-02 00:00:00
2   2013-01-03 00:00:00
3                   NaT
4   2013-01-05 00:00:00
5   2013-01-06 00:00:00
6   2013-01-07 00:00:00
7                   NaT
8   2013-01-09 00:00:00
9   2013-01-10 00:00:00
dtype: datetime64[ns]
</snippet></ROW><ROW><id>21145165</id><snippet>datetime.datetime</snippet></ROW><ROW><id>21145165</id><snippet>In [7]: s.fillna(Timestamp('20120101'))
Out[7]: 
0   2013-01-01 00:00:00
1   2013-01-02 00:00:00
2   2013-01-03 00:00:00
3   2012-01-01 00:00:00
4   2013-01-05 00:00:00
5   2013-01-06 00:00:00
6   2013-01-07 00:00:00
7   2012-01-01 00:00:00
8   2013-01-09 00:00:00
9   2013-01-10 00:00:00
dtype: datetime64[ns]
</snippet></ROW><ROW><id>21145405</id><snippet>from django.core import serializers
from django.http import HttpResponse   


def get_info(request):
    data = serializers.serialize('json', 
                                 Run.objects.all(), 
                                 fields=('nvp_build', 'lports', 'lswitch_stt'))
    return HttpResponse(data, content_type='application/json')
</snippet></ROW><ROW><id>21145509</id><snippet>def accept(event):
    global acceptInput
    acceptInput=messagebox.askquestion("Input Assessment","do you accept this input?")
</snippet></ROW><ROW><id>21145509</id><snippet>def accept(event):
    acceptInput=messagebox.askquestion("Input Assessment", "do you accept this input?")
    do_something(acceptInput)
</snippet></ROW><ROW><id>21145509</id><snippet>do_something</snippet></ROW><ROW><id>21145729</id><snippet>dateutil</snippet></ROW><ROW><id>21145729</id><snippet>from dateutil.relativedelta import relativedelta
from datetime import datetime

# Where day is the day you want in the following month
dt = datetime.now() + relativedelta(months=1, day=20)
</snippet></ROW><ROW><id>21145864</id><snippet>return</snippet></ROW><ROW><id>21145864</id><snippet>None</snippet></ROW><ROW><id>21145864</id><snippet>if len(L) == 1:
    if L[0] == val:
        # return True
        return 0
    else:
        # return False
        raise ValueError('not found')
else:
    hi = len(L)
    lo = 0
    mid = (hi + lo)//2
    if val == L[mid]:
        # return True
        return mid
    elif val &gt; L[mid]:
        # return bin_search(val,L[mid + 1:])
        return mid + 1 + bin_search(val,L[mid + 1:])
    elif val &lt; L[mid]:
        # no change here, because the offset is 0
        return bin_search(val,L[:mid])
</snippet></ROW><ROW><id>21145864</id><snippet>mid + 1</snippet></ROW><ROW><id>21146001</id><snippet>client, addr = sock.accept()
</snippet></ROW><ROW><id>21146001</id><snippet>data = client.recv(4096)
</snippet></ROW><ROW><id>21146001</id><snippet>sock.send("ktov")
</snippet></ROW><ROW><id>21146001</id><snippet>client.sendall(data)
</snippet></ROW><ROW><id>21146020</id><snippet>self</snippet></ROW><ROW><id>21146020</id><snippet>dist = Point.dist
pto_medio = Point.pto_medio

dist(p, q)
pto_medio(p, q)
</snippet></ROW><ROW><id>21146020</id><snippet>def</snippet></ROW><ROW><id>21146020</id><snippet>map</snippet></ROW><ROW><id>21146020</id><snippet>filter</snippet></ROW><ROW><id>21146020</id><snippet>with open(path) as f:
    strippedlines = map(str.strip, f)
</snippet></ROW><ROW><id>21146020</id><snippet>with open(path) as f:
    strippedlines = map(lambda line: line.strip(), f)
</snippet></ROW><ROW><id>21146020</id><snippet>None</snippet></ROW><ROW><id>21146020</id><snippet>(line.strip() for line in f)</snippet></ROW><ROW><id>21146020</id><snippet>map</snippet></ROW><ROW><id>21146117</id><snippet>args</snippet></ROW><ROW><id>21146117</id><snippet>class BooError(Exception):
    def __init__(self, *args):
        super(BooError, self).__init__(*args)
        self.args = ('Boo',)
        self.message = self.args[0]
</snippet></ROW><ROW><id>21146117</id><snippet>self.message</snippet></ROW><ROW><id>21146117</id><snippet>args</snippet></ROW><ROW><id>21146117</id><snippet>message</snippet></ROW><ROW><id>21146117</id><snippet>Exception</snippet></ROW><ROW><id>21146117</id><snippet>__init__</snippet></ROW><ROW><id>21146117</id><snippet>class BooError(Exception):
    def __init__(self, *args):
        super(BooError, self).__init__('Boo')
</snippet></ROW><ROW><id>21146246</id><snippet>data</snippet></ROW><ROW><id>21146246</id><snippet>import re

f = open("myfile.csv")
text = f.read()
data = re.findall("\n(DAT\d+.*)", text)
</snippet></ROW><ROW><id>21146246</id><snippet>import re

f = open("myfile.csv")
text = f.read()
lines = re.split(r"\n(?=DAT\d+)", text)
lines.pop(0)
</snippet></ROW><ROW><id>21146286</id><snippet>key</snippet></ROW><ROW><id>21146286</id><snippet>list.sort</snippet></ROW><ROW><id>21146286</id><snippet>import operator
mylist = [[2, 5, 3],
          [2, 4, 9],
          [0, 9, 1],
          [1, 1, 1],
          [4, 7, 5]]

mylist.sort(key=operator.itemgetter(1))
</snippet></ROW><ROW><id>21146286</id><snippet>&gt;&gt;&gt; mylist = [[2, 5, 3],
...           [2, 4, 9],
...           [0, 9, 1],
...           [1, 1, 1],
...           [4, 7, 5]]
&gt;&gt;&gt; 
&gt;&gt;&gt; mylist.sort(key=operator.itemgetter(1))
&gt;&gt;&gt; mylist
[[1, 1, 1], [2, 4, 9], [2, 5, 3], [4, 7, 5], [0, 9, 1]]
</snippet></ROW><ROW><id>21146430</id><snippet>\r</snippet></ROW><ROW><id>21146430</id><snippet>\n</snippet></ROW><ROW><id>21146430</id><snippet>max_len = max_size / bytes_per_char
s = ''
i = 0
while len(s) &lt; max_len:
    s += str(i) + '\r\n'
    i += 1
if len(s) &gt; max_len: # because it may not divide evenly
    s = s[:max_len]
open(filename, "wb").write(s)
</snippet></ROW><ROW><id>21146516</id><snippet>expanding_mean</snippet></ROW><ROW><id>21146516</id><snippet>In [11]: s = pd.Series([4, 5, 6, 7, 4, 5, 6, 7])

In [12]: pd.expanding_mean(s, 4)
Out[12]: 
0         NaN
1         NaN
2         NaN
3    5.500000
4    5.200000
5    5.166667
6    5.285714
7    5.500000
dtype: float64
</snippet></ROW><ROW><id>21146569</id><snippet>import</snippet></ROW><ROW><id>21146569</id><snippet>import</snippet></ROW><ROW><id>21146569</id><snippet>Loader</snippet></ROW><ROW><id>21146569</id><snippet>zip</snippet></ROW><ROW><id>21146569</id><snippet>zip</snippet></ROW><ROW><id>21146569</id><snippet>zip</snippet></ROW><ROW><id>21146569</id><snippet>zipimport</snippet></ROW><ROW><id>21146569</id><snippet>zip</snippet></ROW><ROW><id>21146569</id><snippet>sys.path</snippet></ROW><ROW><id>21146569</id><snippet>zip</snippet></ROW><ROW><id>21146569</id><snippet>zipimport</snippet></ROW><ROW><id>21146569</id><snippet>import</snippet></ROW><ROW><id>21146607</id><snippet>%D0%B5%D1%82</snippet></ROW><ROW><id>21146607</id><snippet>(?i)(?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)((?:\(?[^\s()&lt;&gt;]+\)?)*[^\s`!()\[\]{};:\'".,&lt;&gt;?\xab\xbb\u201c\u201d\u2018\u2019])
</snippet></ROW><ROW><id>21146917</id><snippet>import zerorpc, sys, gevent, signal, os

class MyClass:
      pass

if __name__ == '__main__':
  zpc = zerorpc.Server(MyClass)
  zpc.bind('ipc://./mysocket.sock')
  gevent.signal(signal.SIGTERM, zpc.stop)
  zpc.run()
  print("zpc stopped"); sys.stdout.flush()
</snippet></ROW><ROW><id>21147023</id><snippet>target = None</snippet></ROW><ROW><id>21147023</id><snippet>target</snippet></ROW><ROW><id>21147023</id><snippet>None</snippet></ROW><ROW><id>21147023</id><snippet>target</snippet></ROW><ROW><id>21147023</id><snippet>lChild</snippet></ROW><ROW><id>21147023</id><snippet>rChild</snippet></ROW><ROW><id>21147023</id><snippet>None</snippet></ROW><ROW><id>21147023</id><snippet>def delete(node,key):
    cNode = node
    target = parent = None
    while cNode:
        if cNode.value == key:
            target = cNode
            break
        elif cNode.value &gt; key:
            parent, cNode = cNode, cNode.lChild
        elif cNode.value &lt; key:
            parent, cNode = cNode, cNode.rChild

    if target:
        if parent:
            if parent.lChild is target:
                parent.lChild = None
            else:
                parent.rChild = None
        else:
            # target is top-level node; perhaps return None in that case?
    return node
</snippet></ROW><ROW><id>21147133</id><snippet>currencies = {}
currencies['USD'] = 1.64
currencies['EUR'] = 1.20552
currencies['JPY'] = 171.181
currencies['GBP'] = 1.

number = currencies[currency2]
</snippet></ROW><ROW><id>21147133</id><snippet>other_number = currencies[currency1]
exchange_rate = number / other_number # exchange rate BETWEEN the two currencies
</snippet></ROW><ROW><id>21147153</id><snippet>sleep</snippet></ROW><ROW><id>21147153</id><snippet>sleep(0.05)</snippet></ROW><ROW><id>21147153</id><snippet>sleep</snippet></ROW><ROW><id>21147153</id><snippet>def nextframe(i):
    nonlocal xxUL, yyUL
    xxUL = xxUL + 0  
    yyUL = yyUL - 5

    myText = screen.create_text( xxUL, yyUL, text = "+1", font = "Arial 25", fill = "black"  )
    screen.update()
    screen.delete( myText )
    i += 1
    if i != 25:
        screen.after(0.05, lambda: nextframe(i))
    else:
        screen.delete( myText )

nextframe(0)
</snippet></ROW><ROW><id>21147161</id><snippet>def parse(self, response):
    ...
    yield Request(Link, 
                  meta={'date': Date},
                  callback = self.parseOneCar)

def parseOneCar(self, response):
    ...
    Date = response.meta['date']
</snippet></ROW><ROW><id>21147195</id><snippet>render</snippet></ROW><ROW><id>21147195</id><snippet>+</snippet></ROW><ROW><id>21147228</id><snippet>quoting=csv.QUOTE_NONE</snippet></ROW><ROW><id>21147228</id><snippet>&gt;&gt;&gt; df.to_csv('foo.txt',index=False,header=False)
&gt;&gt;&gt; !cat foo.txt
123,"this is ""out text"""
&gt;&gt;&gt; import csv
&gt;&gt;&gt; df.to_csv('foo.txt',index=False,header=False, quoting=csv.QUOTE_NONE)
&gt;&gt;&gt; !cat foo.txt
123,this is "out text"
</snippet></ROW><ROW><id>21147477</id><snippet>list</snippet></ROW><ROW><id>21147477</id><snippet>list[0]</snippet></ROW><ROW><id>21147477</id><snippet>def quickSort(list):
    pivot = list[0]
    lesser = quickSort([x for x in list[1:] if x[1] &lt; pivot[1]])
    greater = quickSort([x for x in list[1:] if x[1] &gt;= pivot[1]])
    return lesser + [pivot] + greater
</snippet></ROW><ROW><id>21147477</id><snippet>TypeError</snippet></ROW><ROW><id>21147477</id><snippet>lesser</snippet></ROW><ROW><id>21147477</id><snippet>greater</snippet></ROW><ROW><id>21147477</id><snippet>quickSort</snippet></ROW><ROW><id>21147477</id><snippet>list[0][1]</snippet></ROW><ROW><id>21147477</id><snippet>IndexError</snippet></ROW><ROW><id>21147477</id><snippet>def quickSort(list):
    if not list:
        return list
    pivot = list[0]
    lesser = quickSort([x for x in list[1:] if x[1] &lt; pivot[1]])
    greater = quickSort([x for x in list[1:] if x[1] &gt;= pivot[1]])
    return lesser + [pivot] + greater
</snippet></ROW><ROW><id>21147477</id><snippet>list = [[2, 5, 3],
        [2, 4, 9],
        [0, 9, 1],
        [1, 1, 1],
        [4, 7, 5]]

print(quickSort(list))
</snippet></ROW><ROW><id>21147477</id><snippet>[[1, 1, 1], [2, 4, 9], [2, 5, 3], [4, 7, 5], [0, 9, 1]]
</snippet></ROW><ROW><id>21147559</id><snippet>while-loop</snippet></ROW><ROW><id>21147559</id><snippet>def run(self):

    clock = pygame.time.Clock()
    while True:
        if self.game_state == STATE_INGAME:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
            self.player_move()
            self.player.update()
            self.player.render(self.screen)

        clock.tick(100)
</snippet></ROW><ROW><id>21147593</id><snippet>def dtanh(x):
    return 1 - np.tan(x)**2
</snippet></ROW><ROW><id>21147593</id><snippet>def dtanh(x):
   return 1 - np.tanh(x)**2
</snippet></ROW><ROW><id>21147604</id><snippet>stat = CML_EVENT_STATUS.EVENT_STATUS_BRAKE
</snippet></ROW><ROW><id>21147604</id><snippet>stat = amp.ReadEventSticky(stat)
</snippet></ROW><ROW><id>21147604</id><snippet>ref</snippet></ROW><ROW><id>21147604</id><snippet>out</snippet></ROW><ROW><id>21147604</id><snippet>ref</snippet></ROW><ROW><id>21147604</id><snippet>out</snippet></ROW><ROW><id>21147604</id><snippet>ref</snippet></ROW><ROW><id>21147604</id><snippet>ref</snippet></ROW><ROW><id>21147604</id><snippet>out</snippet></ROW><ROW><id>21147604</id><snippet>ReadEventSticky</snippet></ROW><ROW><id>21147604</id><snippet>void</snippet></ROW><ROW><id>21147604</id><snippet>CML_EVENT_STATUS</snippet></ROW><ROW><id>21147711</id><snippet>self.values</snippet></ROW><ROW><id>21147711</id><snippet>next</snippet></ROW><ROW><id>21147711</id><snippet>'p'</snippet></ROW><ROW><id>21147711</id><snippet>p</snippet></ROW><ROW><id>21147711</id><snippet>from random import random

class AlleleGenerator(object):
    def __init__(self, p):
        """construct class and creates list to select from"""
        self.p = p
    def next(self):
        """Returns p or q based on allele frequency"""            
        return 'p' if random() &lt; self.p else 'q'
    def __call__(self):
        return self.next()
</snippet></ROW><ROW><id>21147711</id><snippet>from random import random

def allele_generator(p):
    while True:
        yield 'p' if random() &lt; p else 'q'

agen = allele_generator(0.001)
for i in range(3):
    print(next(agen))
</snippet></ROW><ROW><id>21147755</id><snippet>recursive=False</snippet></ROW><ROW><id>21147755</id><snippet>groupId = soup.project.find('groupid', recursive=False).text
</snippet></ROW><ROW><id>21147812</id><snippet>def exists_pair(seq):
    if len(seq) &lt; 2:
        return False
    a, b = seq[0]  # could be: seq.pop() if modifications are allowed
    a_group = set()
    b_group = set()
    for c, d in seq:
        if not ({a,b} &amp; {c,d}):
            return True
        elif {a,b} == {c,d}:
            continue
        elif a in {c,d}:
            a_group.add(c if c != a else d)
        else:
            b_group.add(c if c != b else d)

    if not a_group:
        return False

    # b_group - a_group: elements of b_group that do not appear in a_group
    return bool(b_group - a_group)
</snippet></ROW><ROW><id>21147812</id><snippet>b_group</snippet></ROW><ROW><id>21147812</id><snippet>b_group - a_group</snippet></ROW><ROW><id>21147812</id><snippet>b_group</snippet></ROW><ROW><id>21147812</id><snippet>b_group</snippet></ROW><ROW><id>21147812</id><snippet>bool</snippet></ROW><ROW><id>21147812</id><snippet>set</snippet></ROW><ROW><id>21147812</id><snippet>False</snippet></ROW><ROW><id>21147880</id><snippet>def replace_in_file(filename, oldtext, newtext):
    with open(filename, 'r+') as file:
        lines = file.read()
        new_lines = lines.replace(oldtext, newtext)
        file.seek(0)
        file.write(new_lines)
</snippet></ROW><ROW><id>21147880</id><snippet>def replace_in_file(filename, oldtext, newtext):
    with open(filename, 'r') as file, open(filename + ".temp", 'w') as temp:
        lines = file.read()
        new_lines = lines.replace(oldtext, newtext)
        temp.write(new_lines)
</snippet></ROW><ROW><id>21147918</id><snippet>import random
random_number = random.randint(start, end)
</snippet></ROW><ROW><id>21148000</id><snippet>cmds.button(label="My Life For Aiur!", command=stagger)
</snippet></ROW><ROW><id>21148000</id><snippet>0</snippet></ROW><ROW><id>21148000</id><snippet>count = cmds.floatFieldGrp(fieldgroup, query=True, value=True)
</snippet></ROW><ROW><id>21148000</id><snippet>fieldgroup</snippet></ROW><ROW><id>21148000</id><snippet>button = cmds.button(label="My Life For Aiur!")
</snippet></ROW><ROW><id>21148000</id><snippet>fieldgroup = cmds.floatFieldGrp(numberOfFields=1)
</snippet></ROW><ROW><id>21148000</id><snippet>cmds.button(button, edit=True, command=lambda _:stagger(fieldgroup))
</snippet></ROW><ROW><id>21148000</id><snippet>stagger(fieldgroup)</snippet></ROW><ROW><id>21148000</id><snippet>def stagger(fieldgroup):
</snippet></ROW><ROW><id>21148000</id><snippet>stagger</snippet></ROW><ROW><id>21148000</id><snippet>0</snippet></ROW><ROW><id>21148000</id><snippet>global</snippet></ROW><ROW><id>21148000</id><snippet>local</snippet></ROW><ROW><id>21148000</id><snippet>count = 0</snippet></ROW><ROW><id>21148000</id><snippet>import maya.cmds as cmds

spheres = cmds.ls(selection=True)

stagWin = cmds.window(title="Stagger Tool", wh=(300,100))
cmds.columnLayout()
button = cmds.button(label="My Life For Aiur!")
fieldgroup = cmds.floatFieldGrp(numberOfFields=1)
cmds.button(button, edit=True, command=lambda _:stagger(fieldgroup))
cmds.showWindow(stagWin)

def stagger(fieldgroup):
    count = 0
    increment = cmds.floatFieldGrp(fieldgroup, query=True, value=True)[0]
    print count
    for i in spheres:
        cmds.selectKey(i)
        cmds.keyframe(edit=True, relative=True, timeChange=count)
        count += increment
    print "BLAH"
</snippet></ROW><ROW><id>21148045</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>21148045</id><snippet>datetime</snippet></ROW><ROW><id>21148045</id><snippet>timedelta</snippet></ROW><ROW><id>21148045</id><snippet>stat</snippet></ROW><ROW><id>21148045</id><snippet>bytespersec = bytestransfered / (endtime - starttime).totalseconds()
</snippet></ROW><ROW><id>21148045</id><snippet>ftplib</snippet></ROW><ROW><id>21148045</id><snippet>SIZE</snippet></ROW><ROW><id>21148045</id><snippet>stat</snippet></ROW><ROW><id>21148045</id><snippet>SIZE</snippet></ROW><ROW><id>21148045</id><snippet>LIST</snippet></ROW><ROW><id>21148143</id><snippet>from django.contrib.auth.signals import user_logged_in, user_logged_out

def record_user_logged_in(sender, user, request, **kwargs):
    # Record the user logged in

def record_user_logged_out(sender, user, request, **kwargs):
    # Record the user logged out

user_logged_in.connect(record_user_logged_in)
user_logged_out.connect(record_user_logged_out)
</snippet></ROW><ROW><id>21148186</id><snippet>1*2*3*4*5*6*7*8*9*10*11*12*13*14*15*16*17*18*19*20*21*22*23*24*25*26*27*28*29*30*31*32*33*34*35*36*37*38*39*40*41*42*43*44*45*46*47*48*49*50*51*52*53*54*55*56*57*58*59*60*61*62*63*64*65*66*67*68*69*70*71*72*73*74*75*76*77*78*79*80*81*82*83*84*85*86*87*88*89*90*91*92*93*94*95*96*97*98*99*100
</snippet></ROW><ROW><id>21148186</id><snippet>2^97 * 3^48 * 5^24 * 7^16 * 11^9 * 13^7 * 17^5 * 19^5 * 23^4 * 29^3 * 31^3 * 37^2 * 41^2 * 43^2 * 47^2 * 53^1 * 59^1 * 61^1 * 67^1 * 71^1 * 73^1 * 79^1 * 83^1 * 89^1 * 97^1
</snippet></ROW><ROW><id>21148186</id><snippet>2</snippet></ROW><ROW><id>21148186</id><snippet>97</snippet></ROW><ROW><id>21148186</id><snippet>2^97 mod 2^63 == 0</snippet></ROW><ROW><id>21148186</id><snippet>d = Dict{Int,Int}()
for i=1:100
   for (k,v) in factor(i)
       d[k] = get(d,k,0) + v
   end
end
for k in sort(collect(keys(d)))
    print("$k^$(d[k])*")
end
</snippet></ROW><ROW><id>21148339</id><snippet>__get__</snippet></ROW><ROW><id>21148339</id><snippet>AttributeError</snippet></ROW><ROW><id>21148339</id><snippet>class WriteOnly(object):
    """A data descriptor that can't be read.
    """

    def __init__(self, initval=None, name='var'):
        self.val = initval
        self.name = name

    def __get__(self, obj, objtype):
        raise AttributeError("No peeking at attribute '{}'!".format(self.name))

    def __set__(self, obj, val):
        self.val = val

class MyClass(object):
    x = WriteOnly(0, 'x')

m = MyClass()
m.x = 20 # works
print(m.x) # raises AttributeError
</snippet></ROW><ROW><id>21148339</id><snippet>(object)</snippet></ROW><ROW><id>21148339</id><snippet>obj</snippet></ROW><ROW><id>21148339</id><snippet>class MyClass(object):
    def __getattribute__(self, name):
        if name in ('x', 'y', 'z'):
            raise AttributeError("No! Bad user! You cannot see my '{}'!".format(name))
        return super().__getattribute__(self, name)

m = MyClass()
m.x = 20
m.x # same exception
</snippet></ROW><ROW><id>21148339</id><snippet>__getattr__</snippet></ROW><ROW><id>21148339</id><snippet>__getattribute__</snippet></ROW><ROW><id>21148339</id><snippet>(object)</snippet></ROW><ROW><id>21148339</id><snippet>super</snippet></ROW><ROW><id>21148339</id><snippet>super()</snippet></ROW><ROW><id>21148339</id><snippet>PyTypeObject</snippet></ROW><ROW><id>21148339</id><snippet>tp_getset</snippet></ROW><ROW><id>21148339</id><snippet>@property</snippet></ROW><ROW><id>21148339</id><snippet>tp_descr_get</snippet></ROW><ROW><id>21148339</id><snippet>tp_descr_set</snippet></ROW><ROW><id>21148339</id><snippet>tp_getattro</snippet></ROW><ROW><id>21148339</id><snippet>tp_setattro</snippet></ROW><ROW><id>21148339</id><snippet>__getattr__</snippet></ROW><ROW><id>21148339</id><snippet>__setattr__</snippet></ROW><ROW><id>21148339</id><snippet>PyObject_GenericGetAttr</snippet></ROW><ROW><id>21148339</id><snippet>super()</snippet></ROW><ROW><id>21148339</id><snippet>_</snippet></ROW><ROW><id>21148339</id><snippet>cx_Oracle</snippet></ROW><ROW><id>21148565</id><snippet>command</snippet></ROW><ROW><id>21148565</id><snippet>lambda</snippet></ROW><ROW><id>21148565</id><snippet>self.button1 = Tkinter.Button(self, ..., command=lambda: self.OnButtonClick(1))
...
self.button2 = Tkinter.Button(self, ..., command=lambda: self.OnButtonClick(2))
</snippet></ROW><ROW><id>21148565</id><snippet>self.OnButtonClick</snippet></ROW><ROW><id>21148565</id><snippet>def OnButtonClick(self, button_id):
    if button_id == 1:
        # self.button1 was clicked; do something
    elif button_id == 2:
        # self.button2 was clicked; do something
</snippet></ROW><ROW><id>21149076</id><snippet>__file__</snippet></ROW><ROW><id>21149172</id><snippet>ending_index</snippet></ROW><ROW><id>21149172</id><snippet>id</snippet></ROW><ROW><id>21149172</id><snippet>ending_index</snippet></ROW><ROW><id>21149172</id><snippet>starting_index</snippet></ROW><ROW><id>21149172</id><snippet>cursor.execute("""UPDATE events SET id=id - ? WHERE id &gt; ?""", 
               ((ending_index - starting_index) + 1, ending_index))
</snippet></ROW><ROW><id>21149172</id><snippet>events</snippet></ROW><ROW><id>21149172</id><snippet>SQLITE_SEQUENCE</snippet></ROW><ROW><id>21149172</id><snippet>MAX(id)</snippet></ROW><ROW><id>21149172</id><snippet>events</snippet></ROW><ROW><id>21149172</id><snippet>UPDATE</snippet></ROW><ROW><id>21149172</id><snippet>PRIMARY KEY</snippet></ROW><ROW><id>21149218</id><snippet>import random

def playgame():
    s = random.randint(1,100) #grabs a random integer between 1 and 100
    POSS = range(1,7) #range ignores the last number, so this is [1,2,3,4,5,6]
    if not s % 7: #if s%7 != 0
        print("I lose")
        return #exit the function
    while s &gt; 0: #while s is still positive
        choice = 0 #set choice to 0 (this may as well have been "foo",
                   #                 I just needed it to not be in POSS)
        while choice not in POSS: #until the user picks a valid number
            choice = int(input("Select a number between 1 and 6: ")) #prompt for input
        s -= choice #subtract choice from s, then set the difference to s
        print("You subtracted {}, leaving {}".format(choice,s)) #print for the user
        comp_choice = s%7 #the computer's choice is always s%7
        s -= comp_choice #subtract the comp's choice from s, then set the diff to s
        print("I subtracted {}, leaving {}".format(comp_choice,s)) #print for user
    print("I win!") #since we know computer will always win, I don't have to do a check

playgame() #run the function
</snippet></ROW><ROW><id>21149218</id><snippet>class Entity(object):
    """Base class that should not be instantiated on its own -- only
       exists to be inherited from. Use Player() and Computer() instead"""
    def __init__(self,name=None):
        if name is None:
            name = input("What's your name? ")
        self.name = name
        self.myturn = False
    def __str__(self):
        # this magic function means calling str(self) returns str(self.name)
        # included so I can do print(player)
        return self.name

    def makemove(self,choice):
        """finds the global s and subtracts a given choice from it,
           printing the choice and the result to the user."""
        global s
        s -= choice
        print("{} chooses {}, leaving {}".format(self,choice,s))
        return choice
    def activate(self):
        self.myturn = True
        return self
    def deactivate(self):
        """does exactly self.myturn = False"""
        self.myturn = False

class Player(Entity):
    """A player-controlled Entity"""
    def getchoice(self):
        """Prompts the user for a choice, ensuring it's between 1 and 6, then
           calls Entity's makemove() with that as an argument"""
        choice = None
        while choice not in range(1,7):
            choice = int(input("Pick a number between 1 and 6: "))
        return super().makemove(choice)

class Computer(Entity):
    def __init__(self):
        super().__init__(name="Computer Player")
        #overrides to ensure every Computer object has the name Computer Player

    def getchoice(self):
        """grabs a number for the computer, and makes its move"""
        global s
        choice = s%7
        if choice == 0: #edge case where computer goes first on an s where s%7==0
            choice = random.randint(1,6)
        return super().makemove(choice)

class Game(object):
    """Class defining an instance of the Game

FUNCTIONS:
 Game.start() &lt;-- use this to start the game"""

    def __init__(self,playerArray=[]):
        """defines s as a global, ensures the players array is built
           correctly, and gives s a random int value between 1-100"""
        global s
        if type(playerArray) is Player:
            playerArray = [playerArray]
        while len(playerArray) &lt; 2:
            playerArray.append(Computer())
        self.players = playerArray
        s = random.randint(1,100)

    def start(self):
        """Let's play!"""

        global s
        print ("""
====================================
 THE GAME BEGINS NOW!!!
 We will begin with a value of: {:3}
====================================""".format(s).lstrip())
        turn = random.randint(1,len(self.players))-1

        while True:
            try:active_player = self.players[turn].activate()
            except IndexError: print(turn)
            choice = active_player.getchoice()
            if s &lt;= 0: break
            active_player.deactivate() # is active_player.myturn = False
            turn += 1
            if turn == len(self.players): turn = 0 #wrap the list
        for player in self.players:
            #this will execute the turn s becomes zero
            if player.myturn:
                winner = player
                break
        print("Winner: {}".format(winner))

import random

game = Game()
game.start()
</snippet></ROW><ROW><id>21149484</id><snippet>{k:v.encode('utf-8') if isinstance(v, basestring) else v for k,v in d.items()}
</snippet></ROW><ROW><id>21149539</id><snippet>Array</snippet></ROW><ROW><id>21149539</id><snippet>ctypes.Structure</snippet></ROW><ROW><id>21149539</id><snippet>Queue</snippet></ROW><ROW><id>21149539</id><snippet>Pipe</snippet></ROW><ROW><id>21149539</id><snippet>(list.append, data, [10, 14, 5])</snippet></ROW><ROW><id>21149744</id><snippet>import os
import time

'''Find if a file was modified in the last x seconds given by writeFrequency.'''
def isFileBeingWrittenInto(filename, 
                       writeFrequency = 180, overheadTimePercentage = 20):

    overhead = 1+float(overheadTimePercentage)/100 # Add some buffer time
    maxWriteFrequency = writeFrequency * overhead
    modifiedTimeStart = os.stat(filename).st_mtime # Time file last modified
    time.sleep(writeFrequency)                     # wait writeFrequency # of secs
    modifiedTimeEnd = os.stat(filename).st_mtime   # File modification time again
    if 0 &lt; (modifiedTimeEnd - modifiedTimeStart) &lt;= maxWriteFrequency:
        return True
    else:
        return False

if not isFileBeingWrittenInto('fileForSafeWrites.txt'):
    handle = open('fileForSafeWrites.txt', 'a')
    handle.write("Text written safely when no one else is writing to the file")
    handle.close()
</snippet></ROW><ROW><id>21149744</id><snippet>if 0 &lt; (modifiedTimeEnd - modifiedTimeStart) &lt; maxWriteFrequency 
</snippet></ROW><ROW><id>21149744</id><snippet>if 0 &lt; (modifiedTimeEnd - modifiedTimeStart) &lt;= maxWriteFrequency 
</snippet></ROW><ROW><id>21149863</id><snippet>find()</snippet></ROW><ROW><id>21149863</id><snippet>soup.project.find('parent')
</snippet></ROW><ROW><id>21149863</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>21149863</id><snippet>find</snippet></ROW><ROW><id>21149863</id><snippet>__getattr__()</snippet></ROW><ROW><id>21149863</id><snippet>Tag</snippet></ROW><ROW><id>21149893</id><snippet>func</snippet></ROW><ROW><id>21149893</id><snippet>ManClass.func2 = func</snippet></ROW><ROW><id>21149893</id><snippet>a.func2 = func</snippet></ROW><ROW><id>21149893</id><snippet>func</snippet></ROW><ROW><id>21149893</id><snippet>a</snippet></ROW><ROW><id>21149893</id><snippet>func2</snippet></ROW><ROW><id>21149893</id><snippet>MethodType</snippet></ROW><ROW><id>21149907</id><snippet>self</snippet></ROW><ROW><id>21149907</id><snippet>classmethod</snippet></ROW><ROW><id>21149907</id><snippet>class IMessageFactory(Interface):
     def __call__():
         """Produce an IMessage provider"""

     def parse(msg):
         """Parses `msg` into a IMessage provider"""


class IMessage(Interface):
     """A message interface"""

     # Optional, show the class method here too
     def parse(msg):
         """Parses `msg` into a IFoo provider"""
</snippet></ROW><ROW><id>21149907</id><snippet>Foo</snippet></ROW><ROW><id>21149907</id><snippet>IMessageFactory</snippet></ROW><ROW><id>21149907</id><snippet>IMessage</snippet></ROW><ROW><id>21150308</id><snippet>south_migrationhistory</snippet></ROW><ROW><id>21150308</id><snippet>manage.py syncdb</snippet></ROW><ROW><id>21150308</id><snippet>south_migrationhistory</snippet></ROW><ROW><id>21150308</id><snippet>south_migrationhistory</snippet></ROW><ROW><id>21150308</id><snippet>manage.py migrate appname 0001 --fake
</snippet></ROW><ROW><id>21150308</id><snippet>south_migrationhistory</snippet></ROW><ROW><id>21150308</id><snippet>manage.py migrate appname
</snippet></ROW><ROW><id>21150533</id><snippet>pandas.concat</snippet></ROW><ROW><id>21150533</id><snippet>from pandas import *
files = !ls *.csv # IPython magic
d = concat([read_csv(f, index_col=0, header=None, axis=1) for f in files], keys=files)
</snippet></ROW><ROW><id>21150533</id><snippet>read_csv</snippet></ROW><ROW><id>21150533</id><snippet>axis=1</snippet></ROW><ROW><id>21150533</id><snippet>d.T</snippet></ROW><ROW><id>21150533</id><snippet>def reader(f):
    d = read_csv(f, index_col=0, header=None, axis=1)
    d.columns = range(d.shape[1])
    return d

df = concat([reader(f) for f in files], keys=files)
</snippet></ROW><ROW><id>21150540</id><snippet>Month is None</snippet></ROW><ROW><id>21150540</id><snippet>None</snippet></ROW><ROW><id>21150540</id><snippet>"August"</snippet></ROW><ROW><id>21150540</id><snippet>def getMonthFromDate(s):
    months = ["January", "February", ...] # spell these correctly 
    for index, month in enumerate(months, 1):
        if month in s:
            return "{0:02d}".format(index)
    raise ValueError
</snippet></ROW><ROW><id>21150540</id><snippet>type(Year)
</snippet></ROW><ROW><id>21150540</id><snippet>type</snippet></ROW><ROW><id>21150540</id><snippet>print "Type of Year: " + str(type(Year))
</snippet></ROW><ROW><id>21150540</id><snippet>+</snippet></ROW><ROW><id>21150540</id><snippet>print "Type of Year: {}".format(type(Year))
</snippet></ROW><ROW><id>21150540</id><snippet>int</snippet></ROW><ROW><id>21150540</id><snippet>datetime.strptime</snippet></ROW><ROW><id>21150598</id><snippet>def quick_sort(list):
    if not list: 
        return list 
    pivot = list[0] 
    lesser = quick_sort([x for x in list[1:] if float(x[1]) &lt; float(pivot[1])], 1) 
    greater = quick_sort([x for x in list[1:] if float(x[1]) &gt;= float(pivot[1])], 1) 
    return lesser + [pivot] + greater
</snippet></ROW><ROW><id>21150937</id><snippet>import pkg_resources

def read():
    with pkg_resources.resource_stream(__name__, 'text.txt') as f:
        print f.read()

if __name__ == "__main__":
    read()
</snippet></ROW><ROW><id>21151030</id><snippet>encode_history = {}

def encode(str):
    """some calculations which lead to the code"""
    ... your calculations ...
    encode_history[code] = str
    return code


def decode(code):
    """function to convert a code to string"""
    if code in encode_history:
        return encode_history[code]
    else:
        return None
</snippet></ROW><ROW><id>21151213</id><snippet>**kwargs</snippet></ROW><ROW><id>21151213</id><snippet>dict</snippet></ROW><ROW><id>21151213</id><snippet>newfoo = foo.preprocess(resize=(100, 100), cutoff=55)
</snippet></ROW><ROW><id>21151213</id><snippet>newfoo = foo.resize(100, 100).cutoff(55)
</snippet></ROW><ROW><id>21151213</id><snippet>newfoo = foo.preprocess(Resize(100, 100), Cutoff(55))
</snippet></ROW><ROW><id>21151213</id><snippet>preprocess</snippet></ROW><ROW><id>21151213</id><snippet>*args</snippet></ROW><ROW><id>21151213</id><snippet>type(arg)</snippet></ROW><ROW><id>21151213</id><snippet>class DumbArgWrapper(object):
    def __init__(self, *args):
        self.args = args

class Resize(DumbArgWrapper): pass
class Cutoff(DumbArgWrapper): pass
class Blur(DumbArgWrapper): pass

class ImageProcessor(object):
    def preprocess(self, *args):
        for arg in args:
            if isinstance(arg, Resize):
                do_resize(*arg.args)
            # etc.
</snippet></ROW><ROW><id>21151213</id><snippet>do_resize</snippet></ROW><ROW><id>21151213</id><snippet>Resize</snippet></ROW><ROW><id>21151213</id><snippet>class SmartArgWrapper(object):
    def __init__(self, *args):
        self.args = args

class Resize(SmartArgWrapper):
    def __call__(self, target):
        do_resize(target, *self.args)
# etc.

class ImageProcessor(object):
    def preprocess(self, *args):
        for arg in args:
            arg(self)
</snippet></ROW><ROW><id>21151213</id><snippet>SmartArtWrapper</snippet></ROW><ROW><id>21151287</id><snippet>list = data_array
string = str(raw_input("Search keyword: "))
print string
for s in list:
    if string in str(s):
        print 'Yes'
        print list.index(s)
</snippet></ROW><ROW><id>21151341</id><snippet>[^.]+\.\w+$</snippet></ROW><ROW><id>21151341</id><snippet>import re

tgt='''\
e179206120.adsl.alicedsl.de
safecamp-plus-2098.unibw-hamburg.de
p5B30EBFE.dip0.t-ipconnect.de'''

print re.findall(r'([^.]+\.\w+$)', tgt, re.M | re.S)
# ['alicedsl.de', 'unibw-hamburg.de', 't-ipconnect.de']
</snippet></ROW><ROW><id>21151341</id><snippet>[^.]+</snippet></ROW><ROW><id>21151341</id><snippet>.</snippet></ROW><ROW><id>21151341</id><snippet>\.</snippet></ROW><ROW><id>21151341</id><snippet>.</snippet></ROW><ROW><id>21151341</id><snippet>\</snippet></ROW><ROW><id>21151341</id><snippet>\w+</snippet></ROW><ROW><id>21151341</id><snippet>[a-z] [A-Z] [0-9] [_]</snippet></ROW><ROW><id>21151341</id><snippet>[a-zA-Z]+</snippet></ROW><ROW><id>21151341</id><snippet>$</snippet></ROW><ROW><id>21151388</id><snippet>xrange</snippet></ROW><ROW><id>21151388</id><snippet>range(1, 21)</snippet></ROW><ROW><id>21151388</id><snippet>range</snippet></ROW><ROW><id>21151388</id><snippet>xrange</snippet></ROW><ROW><id>21151661</id><snippet>os.walk</snippet></ROW><ROW><id>21151661</id><snippet>os.stat</snippet></ROW><ROW><id>21151661</id><snippet>itertools.groupby</snippet></ROW><ROW><id>21151661</id><snippet>def keyfunc(value):
    base, ext, size = value
    # FILL THIS IN

def format_group(bases):
    # FILL THIS IN

def format_size(size):
    # you can use inspectorG4dget's code here

for root, dirs, names in os.walk(path):
    sizes = (os.stat(name).st_size for name in names)
    bases, exts = zip(*map(os.path.splitext, names))
    files = zip(bases, exts, sizes)
    # now sort by ext, and then by base within each ext
    files = sorted(files, key=operator.itemgetter(1, 0))
    results = []
    for key, group in itertools.groupby(files, key=keyfunc):
        bases, exts, sizes = zip(*list(group))
        results.append((format_group(bases), sum(size))
    for base, size in sorted(results):
        print('{}: {}, {}'.format(root, base, format_size(size)))
</snippet></ROW><ROW><id>21151661</id><snippet>cmp</snippet></ROW><ROW><id>21151661</id><snippet>def keycmp(x, y):
    if x should be in the same group as y:
        return 0
    return -1
</snippet></ROW><ROW><id>21151661</id><snippet>functools.cmp_to_key</snippet></ROW><ROW><id>21151661</id><snippet>for key, group in itertools.groupby(files, key=cmp_to_key(keycap)):
</snippet></ROW><ROW><id>21151661</id><snippet>stat</snippet></ROW><ROW><id>21151661</id><snippet>os.walk</snippet></ROW><ROW><id>21151661</id><snippet>fts</snippet></ROW><ROW><id>21151661</id><snippet>os.walk</snippet></ROW><ROW><id>21151661</id><snippet>nftw</snippet></ROW><ROW><id>21151661</id><snippet>ftw</snippet></ROW><ROW><id>21151661</id><snippet>FindFirstFile</snippet></ROW><ROW><id>21151661</id><snippet>os.listdir</snippet></ROW><ROW><id>21151661</id><snippet>key0000.jpg</snippet></ROW><ROW><id>21151661</id><snippet>key0001.jpg</snippet></ROW><ROW><id>21151661</id><snippet>key0000.jpg</snippet></ROW><ROW><id>21151661</id><snippet>key0002.jpg</snippet></ROW><ROW><id>21151661</id><snippet>key0000.jpg</snippet></ROW><ROW><id>21151661</id><snippet>key0001.tif</snippet></ROW><ROW><id>21151661</id><snippet>0009</snippet></ROW><ROW><id>21151661</id><snippet>pattern = re.compile('(.*?)(\d+)(.*)')
def splitname(name):
    prefix, number, suffix = pattern.match(name).groups()
    return prefix, int(number, 10), suffix
</snippet></ROW><ROW><id>21151661</id><snippet>key0000.jpg</snippet></ROW><ROW><id>21151661</id><snippet>'key'</snippet></ROW><ROW><id>21151661</id><snippet>0000</snippet></ROW><ROW><id>21151661</id><snippet>'.jpg'</snippet></ROW><ROW><id>21151661</id><snippet>def keycmp(a, b):
    abits, bbits = splitname(a), splitname(b)
    if abits[0] &lt; bbits[0]: return -1
    elif abits[0] &gt; bbits[0]: return 1
    if abits[1]+1 &lt; bbits[1]: return -1
    elif abits[1] &gt; bbits[1]: return 1
    if abits[2] &lt; bbits[2]: return -1
    elif abits[2] &gt; bbits[2]: return 1
    else: return 0
keyfunc = functools.cmp_to_key(keycmp)
</snippet></ROW><ROW><id>21151661</id><snippet>cmp</snippet></ROW><ROW><id>21151661</id><snippet>keycmp</snippet></ROW><ROW><id>21151661</id><snippet>re.match</snippet></ROW><ROW><id>21151661</id><snippet>'files.txt'</snippet></ROW><ROW><id>21151661</id><snippet>AttributeError: 'NoneType' has no attribute 'groups'</snippet></ROW><ROW><id>21151661</id><snippet>groupby</snippet></ROW><ROW><id>21151661</id><snippet>keyfunc</snippet></ROW><ROW><id>21151661</id><snippet>groupby</snippet></ROW><ROW><id>21151661</id><snippet>int(number, 10)</snippet></ROW><ROW><id>21151661</id><snippet>int('0123')</snippet></ROW><ROW><id>21151712</id><snippet>env_variables:
  FLASK_CONF: 'DEV'
</snippet></ROW><ROW><id>21151903</id><snippet>from datetime import datetime
date_posted = '2014-01-15T01:35:30.314Z'
datetime.strptime(date_posted, '%Y-%m-%dT%H:%M:%S.%fZ')
</snippet></ROW><ROW><id>21151911</id><snippet>find_elements_by_xpath('//div[@class="myclass"]/a').get_attribute("content")
</snippet></ROW><ROW><id>21152052</id><snippet>class Pizza(object):
    def __init__(self):
        self.toppings = self.getTopingsList()
        self.dough = self.getDough()
    def getToppingsList(self):
        return ['cheese']
    def getDough(self):
        return 'whatever regular dough is'

class PepperoniPizza(Pizza):
    def getToppingsList(self):
        base_toppings = super(Pizza, self).getToppingsList()
        base_toppings.append('pepperoni')
        return base_toppings

class HealthyPizza(Pizza):
    def getDough(self):
        return 'whole wheat dough'
</snippet></ROW><ROW><id>21152052</id><snippet>__init__</snippet></ROW><ROW><id>21152146</id><snippet>write</snippet></ROW><ROW><id>21152146</id><snippet>j(...)</snippet></ROW><ROW><id>21152146</id><snippet>import struct
v = 1500
x = 1000
C = range(v*x)
M = '&lt;QIIHHHH'
with open('M.bmp','wb') as fin
    fin.write('BM'+struct.pack(M, v*x*3+26, 26, 12, v, x, 1, 24))
    for X in C:
        ...
</snippet></ROW><ROW><id>21152197</id><snippet>try:
    float(line)
except ValueError:
    # not a number
</snippet></ROW><ROW><id>21152197</id><snippet>import csv
with open('/home/user/file.csv') as csvfile:
    for row in csv.reader(csvfile):
        for n in row:
            try:
                float(line)
            except ValueError:
                # not a number
</snippet></ROW><ROW><id>21152281</id><snippet>class Node:
    def __init__(self, cargo):
        self.cargo = cargo
        self.next  = None
</snippet></ROW><ROW><id>21152281</id><snippet>q = Queue()
</snippet></ROW><ROW><id>21152281</id><snippet>q.insert(42)
</snippet></ROW><ROW><id>21152281</id><snippet>q.insert(69)
</snippet></ROW><ROW><id>21152281</id><snippet>q.insert(613)
</snippet></ROW><ROW><id>21152281</id><snippet>x = q.remove()
</snippet></ROW><ROW><id>21152281</id><snippet>y = q.remove()
</snippet></ROW><ROW><id>21152377</id><snippet>&gt;&gt;&gt; import cv2
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.random.randint(1,10, (5,5))
&gt;&gt;&gt; x
array([[9, 5, 1, 3, 1],
       [7, 7, 2, 1, 7],
       [9, 1, 4, 7, 4],
       [3, 6, 6, 7, 2],
       [3, 4, 2, 3, 1]])
&gt;&gt;&gt; y = cv2.inRange(x,4,8)
&gt;&gt;&gt; y
array([[  0, 255,   0,   0,   0],
       [255, 255,   0,   0, 255],
       [  0,   0, 255, 255, 255],
       [  0, 255, 255, 255,   0],
       [  0, 255,   0,   0,   0]], dtype=uint8)

&gt;&gt;&gt; z = np.transpose(np.where(y&gt;0))
&gt;&gt;&gt; z
array([[0, 1],
       [1, 0],
       [1, 1],
       [1, 4],
       [2, 2],
       [2, 3],
       [2, 4],
       [3, 1],
       [3, 2],
       [3, 3],
       [4, 1]])
</snippet></ROW><ROW><id>21152418</id><snippet>class Test(object):
    def __init__(self, test_value):
        self.test_value = test_value

    def test(self):
        print "The value I need is", self.test_value
        self._inner_test()

    def _inner_test():
        print "running test"


if __name__ == '__main__':
    args = get_args()
    t = TestClass(args.test_value)
    t.test()
</snippet></ROW><ROW><id>21152418</id><snippet>import argparse

test_value = None

def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-t', '--test_value', dest='test_value', required=True, default="sample value")
    args = parser.parse_args()
    return args

def configure():
    global test_value
    args = get_args()
    test_value = args.test_value
</snippet></ROW><ROW><id>21152418</id><snippet>from functools import wraps
import config

def decorator_example(f):
    @wraps(f)
    def f_example(*args, **kwargs):
        print "The value I need is", config.test_value
        return f(*args, **kwargs) 
    return f_example

@decorator_example
def test():
    print "running test"


if __name__ == '__main__':
    config.configure()
    test()
</snippet></ROW><ROW><id>21152418</id><snippet>config.test_value</snippet></ROW><ROW><id>21152418</id><snippet>test</snippet></ROW><ROW><id>21152499</id><snippet>a = pd.io.parsers.StringIO("""  A       n      2000-01-01
  A       n      2000-03-02
  A       y      2000-04-10
  A       y      2001-01-01
  B       n      2000-02-20
  B       y      2000-03-15
  B       y      2000-04-27
  B       y      2001-01-10""")
b = "Group    bool    date".split()
d = DataFrame([i.split() for i in a], columns=b)
</snippet></ROW><ROW><id>21152499</id><snippet>dic = {'y':True, 'n':False}
d['bool'] = d['bool'].apply(lambda x: dic[x])
trigger = d[d['bool']].sort('date').drop_duplicates('Group').drop('bool', axis=1)
d = d.merge(trigger, how='left', on='Group', suffixes=['','_trigger'])
</snippet></ROW><ROW><id>21152499</id><snippet>def trigger(df):

    def min_y(d):
        return d[d['bool'] == 'y'].date.min()

    dt = df.groupby('Group').apply(min_y)
    dt = DataFrame(dt, columns=['trigger_date']).reset_index()
    ix = df.index.copy(deep=True)
    df = df.merge(dt, how='left', on='Group')
    ser = df['trigger_date']
    ser.index = ix
    return ser
</snippet></ROW><ROW><id>21152507</id><snippet>21</snippet></ROW><ROW><id>21152507</id><snippet>2l</snippet></ROW><ROW><id>21152507</id><snippet>l</snippet></ROW><ROW><id>21152507</id><snippet>l</snippet></ROW><ROW><id>21152507</id><snippet>long</snippet></ROW><ROW><id>21152507</id><snippet>struct</snippet></ROW><ROW><id>21152568</id><snippet>@window.event
def f(foo):
    return bar
</snippet></ROW><ROW><id>21152568</id><snippet>def f(foo):
    return bar
f = window.event(f)
</snippet></ROW><ROW><id>21152682</id><snippet>words = {X[i:i+kmer] for i in range(len(X)-kmer+1)}
for i in range(len(Y)-kmer+1):
    if Y[i:i+kmer] in words:
        print Y[i:i+kmer]
</snippet></ROW><ROW><id>21152682</id><snippet>kmer</snippet></ROW><ROW><id>21152682</id><snippet>from collections import defaultdict
wordmap = defaultdict(list)
for i in range(len(X)-kmer+1):
    wordmap[X[i:i+kmer]].append(i)

for i in range(len(Y)-kmer+1):
    word = Y[i:i+kmer]
    if word in wordmap:
        print word, wordmap[word], i
</snippet></ROW><ROW><id>21152683</id><snippet>username</snippet></ROW><ROW><id>21152683</id><snippet>INSERT</snippet></ROW><ROW><id>21152683</id><snippet>try ... catch ...</snippet></ROW><ROW><id>21152807</id><snippet>    from dateutil.rrule import *
    number_weekdays = rrule(WEEKLY, byweekday=(MO,TU,WE,TH,FR), dtstart=datetime.utcnow(),until=dt).count()
</snippet></ROW><ROW><id>21152845</id><snippet>#! /usr/bin/python2

import sys
from lxml import etree

result = etree.Element('root')
parser = etree.XMLParser(remove_blank_text=True)

# Add each file to the tree
for xmlfile in sys.argv[1:]:
  with open(xmlfile) as xmlfile:
    btree = etree.parse(xmlfile, parser)
  # Ensure that the resulting tree has the right root
  result.tag = btree.getroot().tag
  # Consider each 2nd-level item
  for bchild in btree.xpath("/*/*"):
    tags = result.xpath("./%s"%bchild.tag)
    if len(tags) == 0:
      # Add &lt;dog-list&gt;, for example
      #print "adding %s to %s"%(bchild.tag, result.tag)
      result.append(bchild)
    else:
      for bgrandchild in bchild:
        # add &lt;dog&gt;, for example
        #print "adding %s to %s"%(bgrandchild.tag, tags[0].tag)
        tags[0].append(bgrandchild)

with open("output.xml", "w") as output:
  output.write(etree.tostring(result, pretty_print = True))
</snippet></ROW><ROW><id>21152895</id><snippet>console</snippet></ROW><ROW><id>21152895</id><snippet>setup(console=...
</snippet></ROW><ROW><id>21152895</id><snippet>windows</snippet></ROW><ROW><id>21152895</id><snippet>setup(windows=...
</snippet></ROW><ROW><id>21152895</id><snippet>example.pyw</snippet></ROW><ROW><id>21152895</id><snippet># -*-coding: utf-8 -*-
#!python

# @file: example.pyw

import wx

class AppFrame(wx.Frame):
  def __init__(self, title, *args, **kwargs):
    super(AppFrame, self).__init__(None, title=title, *args, **kwargs)
    self.panel = wx.Panel(self)


class AppMain(wx.App):
  def OnInit(self):
    self.frame = AppFrame("Example")
    self.frame.Show()
    return True


AppMain(True).MainLoop()
</snippet></ROW><ROW><id>21152895</id><snippet>setup.py</snippet></ROW><ROW><id>21152895</id><snippet># -*-coding: utf-8 -*-
#!python

# @file: setup.py

from distutils.core import setup
import py2exe

# http://msdn.microsoft.com/en-us/library/ms648009%28v=vs.85%29.aspx
RT_MANIFEST = 24

# http://en.wikipedia.org/wiki/Side-by-side_assembly
manifest = """
&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"&gt;
&lt;dependency&gt;
  &lt;dependentAssembly&gt;
    &lt;assemblyIdentity
      type="win32"
      name="Microsoft.Windows.Common-Controls"
      version="6.0.0.0"
      processorArchitecture="*"
      publicKeyToken="6595b64144ccf1df"
      language="*"
    /&gt;
  &lt;/dependentAssembly&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
  &lt;dependentAssembly&gt;
    &lt;assemblyIdentity
      type="win32"
      name="Microsoft.VC90.CRT"
      version="9.0.21022.8"
      processorArchitecture="*"
      publicKeyToken="1fc8b3b9a1e18e3b"
      language="*"
    /&gt;
  &lt;/dependentAssembly&gt;
&lt;/dependency&gt;
&lt;/assembly&gt;
"""

setup(
  windows = [{
    "script" : "example.pyw",
    # "icon_resources" : [(1, "icon.ico")] # have an icon?
    "other_resources" : [(RT_MANIFEST, 1, manifest)]
  }]
)
</snippet></ROW><ROW><id>21152895</id><snippet>cd</snippet></ROW><ROW><id>21152895</id><snippet>python setup.py py2exe</snippet></ROW><ROW><id>21152895</id><snippet>&gt; python setup.py py2exe
running py2exe
creating C:\Users\XXX\build
creating C:\Users\XXX\build\bdist.win32
...
   KERNEL32.dll - C:\Windows\system32\KERNEL32.dll
   MSVCP90.dll - C:\Program Files\CMake 2.8\bin\MSVCP90.dll
   RPCRT4.dll - C:\Windows\system32\RPCRT4.dll
&gt; 
</snippet></ROW><ROW><id>21152895</id><snippet>dist</snippet></ROW><ROW><id>21152895</id><snippet>example.exe</snippet></ROW><ROW><id>21152980</id><snippet>Integer</snippet></ROW><ROW><id>21152980</id><snippet>BigInteger</snippet></ROW><ROW><id>21152980</id><snippet>SmallInteger</snippet></ROW><ROW><id>21153052</id><snippet>unsorted = range(len(numbers))</snippet></ROW><ROW><id>21153052</id><snippet>range()</snippet></ROW><ROW><id>21153052</id><snippet>unsorted_list = []
unsorted = range(10)
for item in unsorted:
    unsorted_list.append(item)
</snippet></ROW><ROW><id>21153052</id><snippet>tuple_list[cnt]</snippet></ROW><ROW><id>21153052</id><snippet>tuple_list[cnt+1]</snippet></ROW><ROW><id>21153052</id><snippet>&lt;</snippet></ROW><ROW><id>21153052</id><snippet>&gt;</snippet></ROW><ROW><id>21153052</id><snippet>tuple_list[cnt]</snippet></ROW><ROW><id>21153052</id><snippet>tuple_list[cnt+1]</snippet></ROW><ROW><id>21153159</id><snippet>self</snippet></ROW><ROW><id>21153159</id><snippet>getList</snippet></ROW><ROW><id>21153159</id><snippet>NameError</snippet></ROW><ROW><id>21153159</id><snippet>def getList(self, cursor=None):
    from pprint import pprint
    cursor = self.conn_uat.cursor() if cursor is None else cursor
    cursor.execute(...)
</snippet></ROW><ROW><id>21153287</id><snippet>~/.ivy2/cache</snippet></ROW><ROW><id>21153287</id><snippet>build.sbt</snippet></ROW><ROW><id>21153287</id><snippet>
libraryDependencies += "net.databinder.dispatch" %% "dispatch-core" % "0.11.0"
</snippet></ROW><ROW><id>21153287</id><snippet>build.sbt</snippet></ROW><ROW><id>21153368</id><snippet>c.send("""
    &lt;html&gt;
    &lt;body&gt;
    &lt;h1&gt;Hello World&lt;/h1&gt; this is my server!
    &lt;/body&gt;
    &lt;/html&gt;
""") # Use triple-quote string.
</snippet></ROW><ROW><id>21153368</id><snippet>while True:
    # Establish connection with client.    
    c, (client_host, client_port) = s.accept()
    print 'Got connection from', client_host, client_port
    #c.send('Server Online\n') # This is invalid HTTP header
    c.recv(1000) # should receive request from client. (GET ....)
    c.send('HTTP/1.0 200 OK\n')
    c.send('Content-Type: text/html\n')
    c.send('\n') # header and body should be separated by additional newline
    c.send("""
        &lt;html&gt;
        &lt;body&gt;
        &lt;h1&gt;Hello World&lt;/h1&gt; this is my server!
        &lt;/body&gt;
        &lt;/html&gt;
    """) # Use triple-quote string.
    c.close()
</snippet></ROW><ROW><id>21153370</id><snippet>cube_interface</snippet></ROW><ROW><id>21153370</id><snippet>gen_py</snippet></ROW><ROW><id>21153370</id><snippet>cd /path/to/all_spark_cube/software/thrift/
make
cp cube_interface.py /path/to/python/site-packages
</snippet></ROW><ROW><id>21153487</id><snippet>x</snippet></ROW><ROW><id>21153487</id><snippet>y</snippet></ROW><ROW><id>21153487</id><snippet>z</snippet></ROW><ROW><id>21153487</id><snippet>&gt;&gt;&gt; x=np.array([44.254, 44.114,  44.353,  44.899,  45.082])
&gt;&gt;&gt; y=np.array([-0.934, 0.506,   1.389,   0.938,   0.881])
&gt;&gt;&gt; z=np.array([44.864, 45.225,  44.005,  42.981,  46.356])
&gt;&gt;&gt; t1=np.array([0,  0.0005413307,  0.0010949014, 0.0015468832,    0.0027740823])
&gt;&gt;&gt; t2=np.array([0,  0.00392157,  0.00784314,  0.01176471,  0.01568627,  0.019607])
&gt;&gt;&gt; scipy.interp(t2, t1,x)
array([ 44.254,  45.082,  45.082,  45.082,  45.082,  45.082])
&gt;&gt;&gt; scipy.interp(t2, t1,y)
array([-0.934,  0.881,  0.881,  0.881,  0.881,  0.881])
&gt;&gt;&gt; scipy.interp(t2, t1,z)
array([ 44.864,  46.356,  46.356,  46.356,  46.356,  46.356])
&gt;&gt;&gt; indata=np.vstack((x,y,z))
&gt;&gt;&gt; np.apply_along_axis(lambda A: scipy.interp(t2,t1,A), 1, indata)
array([[ 44.254,  45.082,  45.082,  45.082,  45.082,  45.082],
       [ -0.934,   0.881,   0.881,   0.881,   0.881,   0.881],
       [ 44.864,  46.356,  46.356,  46.356,  46.356,  46.356]])
</snippet></ROW><ROW><id>21153594</id><snippet>obj</snippet></ROW><ROW><id>21153594</id><snippet>obj</snippet></ROW><ROW><id>21153594</id><snippet>obj = obj or myotherobj
</snippet></ROW><ROW><id>21153594</id><snippet>&gt;&gt;&gt; obj = []
&gt;&gt;&gt; obj = obj or 9000
&gt;&gt;&gt; obj
9000
&gt;&gt;&gt; obj = None
&gt;&gt;&gt; obj = obj or True
&gt;&gt;&gt; obj
True
</snippet></ROW><ROW><id>21153594</id><snippet>obj</snippet></ROW><ROW><id>21153594</id><snippet>return obj or otherobj
</snippet></ROW><ROW><id>21153594</id><snippet>&gt;&gt;&gt; def foo(x):
...  return x or 8
...
&gt;&gt;&gt; foo(4)
4
&gt;&gt;&gt; foo([])
8
&gt;&gt;&gt; foo(0)
8
</snippet></ROW><ROW><id>21153594</id><snippet>obj</snippet></ROW><ROW><id>21153594</id><snippet>&gt;&gt;&gt; obj=None
&gt;&gt;&gt; obj=[obj,9000][obj is None]  
&gt;&gt;&gt; obj
9000
</snippet></ROW><ROW><id>21153594</id><snippet>&gt;&gt;&gt; obj = None
&gt;&gt;&gt; obj = (obj,[1,2,3])[::cmp(bool(obj),0.5)]
&gt;&gt;&gt; obj
[1, 2, 3]
&gt;&gt;&gt; obj = True
&gt;&gt;&gt; obj = (obj,[1,2,3])[::cmp(bool(obj),0.5)]
&gt;&gt;&gt; obj
True
</snippet></ROW><ROW><id>21153938</id><snippet>AuthenticationMiddleware</snippet></ROW><ROW><id>21153938</id><snippet>class AuthenticationMiddleware(object):
    def process_request(self, request):
        assert hasattr(request, 'session'), "The Django authentication middleware requires session middleware to be installed. Edit your MIDDLEWARE_CLASSES setting to insert 'django.contrib.sessions.middleware.SessionMiddleware'."

        request.user = SimpleLazyObject(lambda: get_user(request))
</snippet></ROW><ROW><id>21154033</id><snippet>decode</snippet></ROW><ROW><id>21154033</id><snippet>communicate()</snippet></ROW><ROW><id>21154033</id><snippet>print(Popen(['ls'], stdout=PIPE).communicate()[0].decode('utf-8'))
</snippet></ROW><ROW><id>21154688</id><snippet>import sqlite3
import sqlalchemy.pool

sqlite = sqlalchemy.pool.manage(sqlite3, poolclass=sqlalchemy.pool.SingletonThreadPool)
connection = sqlite.connect(':memory:')
</snippet></ROW><ROW><id>21154818</id><snippet>A = [[44.254, 44.114, 44.353, 44.899, 45.082],[-0.934, 0.506, 1.389, 0.938, 0.881],[44.864, 45.225, 44.005, 42.981, 46.356]]
t1 = [0, 1.4911475447, 1.5248639284, 1.2450273089, 3.3804382852]
B = [[44.254, 48.4877582254, 43.0268091866,  47.3166368948,  47.7110371397], [-0.934, 1.0837036817, 4.8307913511, 6.2772868228, 9.6580229826],  [44.864,  47.1020391758,  43.0633715949,  42.1564814645,  42.0223003717]]
t2 = [0, 0.00392157, 0.00784314, 0.01176471, 0.01568627 ]

for i in range(len(A)):
    figure(1)
    plot(t1,A[i],'o')
    #figure(2)
    plot(t2,B[i],'o')
show()
</snippet></ROW><ROW><id>21154818</id><snippet>figure(x)</snippet></ROW><ROW><id>21154818</id><snippet>x</snippet></ROW><ROW><id>21154818</id><snippet>plot</snippet></ROW><ROW><id>21154818</id><snippet>plot(x,y,'marker_style')</snippet></ROW><ROW><id>21154818</id><snippet>'marker_style'</snippet></ROW><ROW><id>21154975</id><snippet>return WorkwithitemsItem(title = title[2:], link = link[2:], 
                                publish = publish, description = description[1:]
                                )
</snippet></ROW><ROW><id>21155108</id><snippet>win32com</snippet></ROW><ROW><id>21155108</id><snippet>from win32com.client import Dispatch

xl = Dispatch("Excel.Application")
filestr = "C:\blah\pytest.xlsx"
wbk = xl.Workbooks.Open(filestr)

wsht = wbk.Sheets(1)
wsht.Range("A1").Value = "Hello World!"
wsht.Columns(1).ColumnWidth = 50
wbk.SaveAs("C:\blah\pytested.xlsx")

xl.Application.Quit()
</snippet></ROW><ROW><id>21155108</id><snippet>openpyxl</snippet></ROW><ROW><id>21155270</id><snippet>list.insert</snippet></ROW><ROW><id>21155270</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; a.insert(0, 0)
&gt;&gt;&gt; a
[0, 1, 2, 3]
</snippet></ROW><ROW><id>21155270</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; a[:0] = [0]
&gt;&gt;&gt; a
[0, 1, 2, 3]
</snippet></ROW><ROW><id>21155270</id><snippet>numpy.insert</snippet></ROW><ROW><id>21155270</id><snippet>&gt;&gt;&gt; a = np.array([1, 2, 3])
&gt;&gt;&gt; np.insert(a, 0, 0)
array([0, 1, 2, 3])
</snippet></ROW><ROW><id>21155270</id><snippet>numpy.hstack</snippet></ROW><ROW><id>21155270</id><snippet>&gt;&gt;&gt; np.hstack([[0], a])
array([0, 1, 2, 3])
</snippet></ROW><ROW><id>21155370</id><snippet>from datetime import datetime, timedelta
old_time = '2014-01-07T09:29:35Z'

def time_converter(old_time, time_zone):
    time_zone = float(time_zone[:3] + ('.5' if time_zone[3] == '3' else '.0'))
    str_time = datetime.strptime(old_time, "%Y-%m-%dT%H:%M:%SZ")
    return (str_time + timedelta(hours=time_zone)).strftime("%Y-%m-%dT%H:%M:%SZ")

if __name__ == '__main__':
    for time_zone in ('+0400', '+0430', '-1400'):
        print(time_converter(old_time, time_zone))
</snippet></ROW><ROW><id>21155370</id><snippet>2014-01-07T13:29:35Z
2014-01-07T13:59:35Z
2014-01-06T19:29:35Z
</snippet></ROW><ROW><id>21155743</id><snippet>[i.something() for i in l]</snippet></ROW><ROW><id>21155743</id><snippet>.something()</snippet></ROW><ROW><id>21155743</id><snippet>i</snippet></ROW><ROW><id>21155881</id><snippet>set cover solver</snippet></ROW><ROW><id>21155903</id><snippet>&gt;&gt;&gt; y_true = np.array([0, 1, 0, 2, 1, 1])
&gt;&gt;&gt; y_pred = np.array([0, 0, 0, 2, 1, 2])
&gt;&gt;&gt; out = np.zeros((3, 3, len(y_true)), dtype=np.bool)
&gt;&gt;&gt; out[y_true, y_pred, np.arange(len(y_true))] = True
&gt;&gt;&gt; out
array([[[ True, False,  True, False, False, False],
        [False, False, False, False, False, False],
        [False, False, False, False, False, False]],

       [[False,  True, False, False, False, False],
        [False, False, False, False,  True, False],
        [False, False, False, False, False,  True]],

       [[False, False, False, False, False, False],
        [False, False, False, False, False, False],
        [False, False, False,  True, False, False]]], dtype=bool)
</snippet></ROW><ROW><id>21155903</id><snippet>np.bincount</snippet></ROW><ROW><id>21155903</id><snippet>&gt;&gt;&gt; np.bincount(y_pred + 3*y_true, minlength=9).reshape(3,3)
array([[2, 0, 0],
       [1, 1, 1],
       [0, 0, 1]], dtype=int64)
</snippet></ROW><ROW><id>21155903</id><snippet>sparse_coo</snippet></ROW><ROW><id>21155903</id><snippet>&gt;&gt;&gt; sps.coo_matrix((np.ones_like(y_true, dtype=np.intp),
---                 (y_true, y_pred)), shape=(3, 3)).A
array([[2, 0, 0],
       [1, 1, 1],
       [0, 0, 1]], dtype=int64)
</snippet></ROW><ROW><id>21156012</id><snippet>string-escape</snippet></ROW><ROW><id>21156012</id><snippet>unicode-escape</snippet></ROW><ROW><id>21156012</id><snippet>&gt;&gt;&gt; content = r'\xe87\x00\x10LOL'
&gt;&gt;&gt; print content
\xe87\x00\x10LOL
&gt;&gt;&gt; content
'\\xe87\\x00\\x10LOL'
&gt;&gt;&gt; content.decode('string-escape')
'\xe87\x00\x10LOL'
&gt;&gt;&gt; map(hex, map(ord, content.decode('string-escape')))
['0xe8', '0x37', '0x0', '0x10', '0x4c', '0x4f', '0x4c']

&gt;&gt;&gt; bytes(map(ord, content.decode('string-escape')))
'[232, 55, 0, 16, 76, 79, 76]'

&gt;&gt;&gt; bytearray(map(ord, content.decode('string-escape')))
bytearray(b'\xe87\x00\x10LOL')
</snippet></ROW><ROW><id>21156018</id><snippet>Student.objects.filter(~Q(old_school=F('new_school')))
</snippet></ROW><ROW><id>21156018</id><snippet>Q</snippet></ROW><ROW><id>21156018</id><snippet>not equal</snippet></ROW><ROW><id>21156018</id><snippet>F</snippet></ROW><ROW><id>21156334</id><snippet>-\w[.]+</snippet></ROW><ROW><id>21156334</id><snippet>-0.03</snippet></ROW><ROW><id>21156334</id><snippet>[.]</snippet></ROW><ROW><id>21156334</id><snippet>.</snippet></ROW><ROW><id>21156334</id><snippet>.</snippet></ROW><ROW><id>21156334</id><snippet>[...]</snippet></ROW><ROW><id>21156334</id><snippet>\w</snippet></ROW><ROW><id>21156334</id><snippet>dollars</snippet></ROW><ROW><id>21156334</id><snippet>sequence</snippet></ROW><ROW><id>21156334</id><snippet>dollars</snippet></ROW><ROW><id>21156334</id><snippet>(-?\d+\.\d+)</snippet></ROW><ROW><id>21156334</id><snippet>import re

sequence = 'i have -0.03 dollars in my hand'

m = re.search(r'(have )(-?\d+\.\d+)( dollars)', sequence)

print m.group(1) # captured group start from `1`.
print m.group(2) 
print m.group(3)
</snippet></ROW><ROW><id>21156334</id><snippet>1</snippet></ROW><ROW><id>21156334</id><snippet>group(0)</snippet></ROW><ROW><id>21156344</id><snippet>@</snippet></ROW><ROW><id>21156344</id><snippet>decorate</snippet></ROW><ROW><id>21156344</id><snippet>decorator</snippet></ROW><ROW><id>21156344</id><snippet>require_http_methods</snippet></ROW><ROW><id>21156344</id><snippet>my_view</snippet></ROW><ROW><id>21156529</id><snippet>dict = {}</snippet></ROW><ROW><id>21156529</id><snippet>/^\s*</snippet></ROW><ROW><id>21157136</id><snippet>[</snippet></ROW><ROW><id>21157136</id><snippet>]</snippet></ROW><ROW><id>21157136</id><snippet>is not in</snippet></ROW><ROW><id>21157136</id><snippet>not in</snippet></ROW><ROW><id>21157136</id><snippet>type</snippet></ROW><ROW><id>21157136</id><snippet>string</snippet></ROW><ROW><id>21157136</id><snippet>isinstance(item, int)</snippet></ROW><ROW><id>21157136</id><snippet>[lst.append(dict2obj(item)) if not isinstance(item, int) else lst.append(item)
 for item in v]
</snippet></ROW><ROW><id>21157136</id><snippet>for</snippet></ROW><ROW><id>21157136</id><snippet>for item in v:
    if not isinstance(item, int)
        lst.append(dict2obj(item))
    else:
        lst.append(item)
</snippet></ROW><ROW><id>21157378</id><snippet>class SystemAdmin(ModelAdmin):
    form = SystemAdminForm

    def get_form(self, request, obj=None, **kwargs):
        self.refresh()
        return super(SystemAdmin, self).get_form(request, obj, **kwargs)

    def refresh(self, request, obj):
        avahi = AvahiServiceDetector(self.update)

    def update(self, name, address, port):
        ip = IP.objects.get_or_create(address=address)
</snippet></ROW><ROW><id>21157453</id><snippet>run('''python -c "import os;os.mkdir('some dir')" ''')
</snippet></ROW><ROW><id>21157514</id><snippet>shift_towards_zero(number, delta)</snippet></ROW><ROW><id>21157514</id><snippet>math</snippet></ROW><ROW><id>21157514</id><snippet>reduce</snippet></ROW><ROW><id>21157514</id><snippet>def shift_towards_zero(number, delta):
    return sign(number) * (abs(number) - delta)
</snippet></ROW><ROW><id>21157514</id><snippet>number  delta result
 5        1     4  #delta&gt;0 means shift toward zero
 5       11    -6  #overshoot
 5       -1     6  #delta&lt;0 means shift away from zero
 5      -11    16
-5        1    -4
-5       11     6  #overshoot
-5       -1    -6
-5      -11   -16
 5        0     5
-5        0    -5
 0        1     0  #shift direction is undefined
 0       11     0
 0       -1     0
 0      -11     0
 0        0     0
</snippet></ROW><ROW><id>21157557</id><snippet>import threading

#1
lock = threading.Lock() # use this line if theadsafety for _cache is important

def memorize(key, period):
    """
    Memorizing decorator. Returning cached data
    if its validity period is not expired
    """
    #2
    lock = threading.Lock() # use this line if theadsafety for a key is important
    def _decoration_wrapper(func):
        #3
        lock = threading.Lock() # use this line if theadsafety for  the function is important
        def _caching_wrapper(*args, **kwargs):
            cache_key = key
            now = time.time()

            if _timestamps.get(cache_key, now) &gt; now:
                return _cache[cache_key]
            with lock:
                if _timestamps.get(cache_key, now) &gt; now:
                    return _cache[cache_key]
                ret = func(*args, **kwargs)
                _cache[cache_key] = ret
                _timestamps[cache_key] = now + period
                return ret
        return _caching_wrapper
    return _decoration_wrapper
</snippet></ROW><ROW><id>21157557</id><snippet>#</snippet></ROW><ROW><id>21157604</id><snippet>In [7]: a = np.array([[0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3], [0, 1, 2, 3]])                                                                            

In [8]: a[1::2] = a[1::2,::-1]

In [9]: a
Out[9]: 
array([[0, 1, 2, 3],                                                                             
       [3, 2, 1, 0],                                                                             
       [0, 1, 2, 3],                                                                             
       [3, 2, 1, 0]])     
</snippet></ROW><ROW><id>21157869</id><snippet>if all(example(foo, bar)):
    # do something
</snippet></ROW><ROW><id>21157892</id><snippet>iter</snippet></ROW><ROW><id>21157892</id><snippet>for job in iter(queue.get, None): # Replace `None` as you need.
    # do stuff with job
</snippet></ROW><ROW><id>21158137</id><snippet>TestCase.assertRegexpMatches</snippet></ROW><ROW><id>21158137</id><snippet>def assertRegexpMatches(self, text, expected_regexp, msg=None):
    """Fail the test unless the text matches the regular expression."""
    if isinstance(expected_regexp, basestring):
        expected_regexp = re.compile(expected_regexp)
    if not expected_regexp.search(text):
        msg = msg or "Regexp didn't match"
        msg = '%s: %r not found in %r' % (msg, expected_regexp.pattern, text) #&lt;-
        raise self.failureException(msg)
</snippet></ROW><ROW><id>21158137</id><snippet>import unittest

class CustomString(str):
    # XXX: implementation dependant
    # redefine `__repr__` because `assertRegexpMatches` use `%r`
    def __repr__(self):
        return '&lt;Huge string&gt;'

class TestFoo(unittest.TestCase):
    def test_foo(self):
        self.assertRegexpMatches(CustomString('1234'), 'abcd', msg='custom msg')

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>21158137</id><snippet>re.search</snippet></ROW><ROW><id>21158137</id><snippet>assertTrue</snippet></ROW><ROW><id>21158137</id><snippet>class TestFoo(unittest.TestCase):
    def test_foo(self):
        self.assertTrue(re.search(regexp, text), msg='custom msg')
</snippet></ROW><ROW><id>21158159</id><snippet>type(cur.fetchone())
</snippet></ROW><ROW><id>21158159</id><snippet>&lt;class 'psycopg2.extras.DictRow'&gt;
</snippet></ROW><ROW><id>21158159</id><snippet>cur.execute('SELECT id, msg FROM table;')
rec = cur.fectone()
print rec[0], rec['msg']
</snippet></ROW><ROW><id>21158159</id><snippet>res = [json.dumps(dict(record)) for record in cursor] # it calls .fecthone() in loop
</snippet></ROW><ROW><id>21158277</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; a = 'ace'
&gt;&gt;&gt; b = 'bdf'
&gt;&gt;&gt; s = string.maketrans(a,b)
&gt;&gt;&gt; l = 'ace'.translate(s)
&gt;&gt;&gt; l
'bdf'
</snippet></ROW><ROW><id>21158277</id><snippet>&gt;&gt;&gt; l = 'axcel'.translate(s,'xl')
&gt;&gt;&gt; l
'bdf'
</snippet></ROW><ROW><id>21158591</id><snippet>EXIF</snippet></ROW><ROW><id>21158591</id><snippet>IPTC</snippet></ROW><ROW><id>21158591</id><snippet>IPTC.Application.Caption</snippet></ROW><ROW><id>21158591</id><snippet>IPTC.Application.ImageDescription</snippet></ROW><ROW><id>21158591</id><snippet>IPTC.Application.Headline</snippet></ROW><ROW><id>21158591</id><snippet>IPTC.Application.ImageDescription</snippet></ROW><ROW><id>21158591</id><snippet>pyexiv2</snippet></ROW><ROW><id>21158591</id><snippet>import pyexiv2

# read image
metadata = pyexiv2.ImageMetadata(path_to_image)
metadata.read()

# now the metadata has been parsed and is ready to be extracted
title = metadata[Iptc.Application2.Caption][0]
imageDescription = metadata[Iptc.Application2.ImageDescription][0]
</snippet></ROW><ROW><id>21158591</id><snippet>IPTC</snippet></ROW><ROW><id>21158591</id><snippet>pyexiv2</snippet></ROW><ROW><id>21158617</id><snippet>for i in range (59, 12*59, 59):
    pygame.draw.line(window, black, (i, 500 ),(500, 500), 1)
</snippet></ROW><ROW><id>21158617</id><snippet>range</snippet></ROW><ROW><id>21158617</id><snippet>range</snippet></ROW><ROW><id>21158837</id><snippet>os.path.normpath</snippet></ROW><ROW><id>21158837</id><snippet>c:/fold1/fold2</snippet></ROW><ROW><id>21158837</id><snippet>c:\fold1\fold2</snippet></ROW><ROW><id>21158837</id><snippet>&gt;&gt;&gt; path1 = "c:/fold1/fold2"
&gt;&gt;&gt; list_of_paths = ["c:\\fold1\\fold2","c:\\temp\\temp123"]
&gt;&gt;&gt; os.path.normpath(path1)
'c:\\fold1\\fold2'
&gt;&gt;&gt; os.path.normpath(path1) in list_of_paths
True
&gt;&gt;&gt; os.path.normpath(path1) in (os.path.normpath(p) for p in list_of_paths)
True
</snippet></ROW><ROW><id>21158837</id><snippet>os.path.normpath(path1) in map(os.path.normpath, list_of_paths)</snippet></ROW><ROW><id>21159019</id><snippet>indicator = map(lambda x,y: int(x != y), y_train, y_pred) 
</snippet></ROW><ROW><id>21159019</id><snippet>indicator</snippet></ROW><ROW><id>21159019</id><snippet>True</snippet></ROW><ROW><id>21159019</id><snippet>False</snippet></ROW><ROW><id>21159019</id><snippet>indicator = map(lambda x,y: x != y, y_train, y_pred) 
</snippet></ROW><ROW><id>21159019</id><snippet>indicator =  map(operator.ne, y_train, y_pred) 
</snippet></ROW><ROW><id>21159118</id><snippet>patch_user</snippet></ROW><ROW><id>21159118</id><snippet>get_user_from_id</snippet></ROW><ROW><id>21159118</id><snippet>request</snippet></ROW><ROW><id>21159118</id><snippet>patch_user</snippet></ROW><ROW><id>21159118</id><snippet>get_user_from_id</snippet></ROW><ROW><id>21159118</id><snippet>patch_user</snippet></ROW><ROW><id>21159118</id><snippet>user</snippet></ROW><ROW><id>21159118</id><snippet>get_user_from_id</snippet></ROW><ROW><id>21159118</id><snippet>user</snippet></ROW><ROW><id>21159118</id><snippet>request</snippet></ROW><ROW><id>21159118</id><snippet>function_dictionary</snippet></ROW><ROW><id>21159118</id><snippet>(url + "/users/" + str(user["ID"]),),
</snippet></ROW><ROW><id>21159118</id><snippet>user</snippet></ROW><ROW><id>21159118</id><snippet>request</snippet></ROW><ROW><id>21159192</id><snippet>qry = session.query(SomeTable)
dt_column =(func.substr(SomeTable.date, 7) + "-" +
            func.substr(SomeTable.date, 4, 2) + "-" +
            func.substr(SomeTable.date, 1, 2) + " " + SomeTable.time)
dt_column = func.datetime(dt_column)
qry = qry.filter(dt_column &lt;= datetime(2013, 1, 1, 23, 59, 59))
</snippet></ROW><ROW><id>21159192</id><snippet>sqlalchemy</snippet></ROW><ROW><id>21159192</id><snippet>class SomeTable(Base):
    __tablename__ = 'some_table'
    id = Column(Integer, primary_key=True)
    name = Column(String)
    date = Column(String)
    time = Column(String)

    @hybrid_property
    def datetime(self):
        # @todo: add python parsing of date and time to produce the result
        str_value = self.date + self.time
        return datetime.strptime(str_value, "%d/%m/%Y%H:%M:%S")

    @datetime.expression
    def datetime(cls):
        # @note: query specific value
        dt_column =(func.substr(cls.date, 7) + "-" +
                    func.substr(cls.date, 4, 2) + "-" +
                    func.substr(cls.date, 1, 2) + " " + cls.time)
        dt_column = func.datetime(dt_column)
        return dt_column

...
qry = session.query(SomeTable)
qry = qry.filter(SomeTable.datetime &lt;= datetime(2013, 1, 1, 23, 59, 59))
</snippet></ROW><ROW><id>21159192</id><snippet>datetime</snippet></ROW><ROW><id>21159200</id><snippet>def green(brightness):
    brightness = round(255 * brightness) # convert from 0.0-1.0 to 0-255
    return [255 - brightness, 255, 255 - brightness]

def blue(brightness):
    brightness = round(255 * brightness) # convert from 0.0-1.0 to 0-255
    return [255 - brightness, 255 - brightness, 255]

# etc., green(1.0) -&gt; [0, 255, 0]
</snippet></ROW><ROW><id>21159551</id><snippet>rootItem = self.ui.comboBox.model().invisibleRootItem()
for rowNum in xrange(rootItem.rowCount()):
    item = rootItem.child(rowNum, 0)
    ...
</snippet></ROW><ROW><id>21160332</id><snippet>action</snippet></ROW><ROW><id>21160332</id><snippet>s</snippet></ROW><ROW><id>21160332</id><snippet>args = parser.parse_args()
args.action(args.s)
</snippet></ROW><ROW><id>21160332</id><snippet>-s</snippet></ROW><ROW><id>21160332</id><snippet>s</snippet></ROW><ROW><id>21160332</id><snippet>string</snippet></ROW><ROW><id>21160332</id><snippet>-s</snippet></ROW><ROW><id>21160370</id><snippet>.get()</snippet></ROW><ROW><id>21160370</id><snippet>data.get()</snippet></ROW><ROW><id>21160370</id><snippet>ht = data.get('hashtags')
</snippet></ROW><ROW><id>21160370</id><snippet>usr = data.get("user")
</snippet></ROW><ROW><id>21160370</id><snippet>'hashtags'</snippet></ROW><ROW><id>21160370</id><snippet>'user'</snippet></ROW><ROW><id>21160370</id><snippet>data</snippet></ROW><ROW><id>21160370</id><snippet>ht</snippet></ROW><ROW><id>21160370</id><snippet>usr</snippet></ROW><ROW><id>21160370</id><snippet>None</snippet></ROW><ROW><id>21160370</id><snippet>ht.get()</snippet></ROW><ROW><id>21160370</id><snippet>usr.get()</snippet></ROW><ROW><id>21160370</id><snippet>usr</snippet></ROW><ROW><id>21160370</id><snippet>None</snippet></ROW><ROW><id>21160370</id><snippet>ht = data.get('hashtags', {})  # return an empty dictionary if missing
</snippet></ROW><ROW><id>21160370</id><snippet>usr = data.get('user', {})  # return an empty dictionary if missing
</snippet></ROW><ROW><id>21160370</id><snippet>.get()</snippet></ROW><ROW><id>21160370</id><snippet>usr = data['user']
</snippet></ROW><ROW><id>21160370</id><snippet>data</snippet></ROW><ROW><id>21160370</id><snippet>hashtags</snippet></ROW><ROW><id>21160370</id><snippet>hashtags</snippet></ROW><ROW><id>21160370</id><snippet>data['entities']</snippet></ROW><ROW><id>21160370</id><snippet>ht = data['entities']['hashtags']
</snippet></ROW><ROW><id>21160370</id><snippet>ht.get('indices']</snippet></ROW><ROW><id>21160370</id><snippet>AttributeError: 'list' object has no attribute 'get'</snippet></ROW><ROW><id>21160382</id><snippet>def get_capslock_state():
    import ctypes
    hllDll = ctypes.WinDLL ("User32.dll")
    VK_CAPITAL = 0x14
    return hllDll.GetKeyState(VK_CAPITAL)
</snippet></ROW><ROW><id>21160438</id><snippet>from collections import defaultdict # using defaultdict makes the sums easier

correlations = defaultdict(int) # default to int (i.e. 0)

for i1, i2, correl in strScoresDict: # loop through data
    correlations[i1] += correl # add score for first item
    correlations[i2] += correl # and second item

output = sorted(correlations, 
                key=lambda x: correlations[x], 
                reverse=True) # sort keys by value
</snippet></ROW><ROW><id>21160438</id><snippet>output == ['item2', 'item1', 'item4', 'item3']
</snippet></ROW><ROW><id>21160438</id><snippet>{'item1': 220, 'item3': 100, 'item2': 240, 'item4': 200}
</snippet></ROW><ROW><id>21160438</id><snippet>defaultdict</snippet></ROW><ROW><id>21160452</id><snippet>describe_stacks</snippet></ROW><ROW><id>21160452</id><snippet>Stack</snippet></ROW><ROW><id>21160452</id><snippet>StackSummary</snippet></ROW><ROW><id>21160452</id><snippet>import boto.cloudformation
conn = boto.cloudformation.connect_to_region('us-west-2')  # or your favorite region
stacks = conn.describe_stacks('MyStackID')
if len(stacks) == 1:
    stack = stacks[0]
else:
    # Raise an exception or something because your stack isn't there
</snippet></ROW><ROW><id>21160452</id><snippet>stack</snippet></ROW><ROW><id>21160452</id><snippet>Stack</snippet></ROW><ROW><id>21160452</id><snippet>outputs</snippet></ROW><ROW><id>21160452</id><snippet>stack</snippet></ROW><ROW><id>21160452</id><snippet>Output</snippet></ROW><ROW><id>21160452</id><snippet>key</snippet></ROW><ROW><id>21160452</id><snippet>value</snippet></ROW><ROW><id>21160452</id><snippet>description</snippet></ROW><ROW><id>21160452</id><snippet>for output in stack.outputs:
    print('%s=%s (%s)' % (output.key, output.value, output.description))
</snippet></ROW><ROW><id>21161140</id><snippet>&gt;&gt;&gt; b_flat = pd.DataFrame([[i, x] 
...               for i, y in input['B'].apply(list).iteritems() 
...                    for x in y], columns=list('IB'))
&gt;&gt;&gt; b_flat = b_flat.set_index('I')
</snippet></ROW><ROW><id>21161140</id><snippet>&gt;&gt;&gt; input[['A']].merge(b_flat, left_index=True, right_index=True)
   A  B
0  1  a
0  1  b
1  2  c

[3 rows x 2 columns]
</snippet></ROW><ROW><id>21161140</id><snippet>.reset_index(drop=True)</snippet></ROW><ROW><id>21161451</id><snippet>import matplotlib.pyplot as plt

list1 = [1,2,3,4]
list2 = [4,3,2,1]
somecondition = True
plt.figure(1) #create one of the figures that must appear with the chart

if not somecondition:
    ax = plt.subplot(111) #create the first subplot that will ALWAYS be there
    ax.plot(list1) #populate the "main" subplot
else:
    ax = plt.subplot(211)
    ax.plot(list1)
    ax = plt.subplot(223) #create the second subplot, that MIGHT be there
    ax.plot(list2) #populate the second subplot
plt.show()
</snippet></ROW><ROW><id>21161451</id><snippet>matplotlib.gridspec</snippet></ROW><ROW><id>21161451</id><snippet>import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

list1 = [1,2,3,4]
list2 = [4,3,2,1]
somecondition = True
plt.figure(1) #create one of the figures that must appear with the chart

gs = gridspec.GridSpec(3,1)

if not somecondition:
    ax = plt.subplot(gs[:,:]) #create the first subplot that will ALWAYS be there
    ax.plot(list1) #populate the "main" subplot
else:
    ax = plt.subplot(gs[:2, :])
    ax.plot(list1)
    ax = plt.subplot(gs[2, :]) #create the second subplot, that MIGHT be there
    ax.plot(list2) #populate the second subplot
plt.show()
</snippet></ROW><ROW><id>21161464</id><snippet>?</snippet></ROW><ROW><id>21161464</id><snippet>https:\\\\.*?\.jpg</snippet></ROW><ROW><id>21161466</id><snippet>/id</snippet></ROW><ROW><id>21161466</id><snippet>/id/title/</snippet></ROW><ROW><id>21161466</id><snippet> r'^(?P&lt;id&gt;\d+)(?:/(?P&lt;title&gt;[\w-]+)/)?$'
</snippet></ROW><ROW><id>21161466</id><snippet>id</snippet></ROW><ROW><id>21161466</id><snippet>title</snippet></ROW><ROW><id>21161466</id><snippet>(?P&lt;name&gt;...)</snippet></ROW><ROW><id>21161466</id><snippet>id</snippet></ROW><ROW><id>21161466</id><snippet>name</snippet></ROW><ROW><id>21161466</id><snippet>(?:..)?</snippet></ROW><ROW><id>21161466</id><snippet>/title-part/</snippet></ROW><ROW><id>21161466</id><snippet>\d+</snippet></ROW><ROW><id>21161466</id><snippet>[\w-]+</snippet></ROW><ROW><id>21161466</id><snippet>-</snippet></ROW><ROW><id>21161466</id><snippet>^</snippet></ROW><ROW><id>21161466</id><snippet>$</snippet></ROW><ROW><id>21161466</id><snippet>/</snippet></ROW><ROW><id>21161511</id><snippet>VARIABLEHERE = "myToken"
import json,httplib
connection = httplib.HTTPSConnection('api.parse.com', 443)
connection.connect()
connection.request('GET', '/1/users/%s'%VARIABLEHERE, '', {
"X-Parse-Application-Id": "fBzdHC1OLCMBmOCvzBLAplhvTtT9BvlJepf3qbab",
"X-Parse-REST-API-Key": "bcgTZa4c7pxyls9k1r59X3B5s4kjF7kofH76nCiH"
})
result = json.loads(connection.getresponse().read())
print result
</snippet></ROW><ROW><id>21161511</id><snippet>connection.request('GET', '/1/users/{0}'.format(VARIABLEHERE),#more stuff
</snippet></ROW><ROW><id>21161576</id><snippet>range()</snippet></ROW><ROW><id>21161576</id><snippet>primes = list(range(3, limit, 2))
primes.append(2)
</snippet></ROW><ROW><id>21161576</id><snippet>list.append()</snippet></ROW><ROW><id>21161576</id><snippet>list.extend()</snippet></ROW><ROW><id>21161576</id><snippet>2</snippet></ROW><ROW><id>21161576</id><snippet>from itertools import chain

primes = chain([2], range(3, limit, 2))
</snippet></ROW><ROW><id>21161576</id><snippet>primes</snippet></ROW><ROW><id>21161576</id><snippet>2</snippet></ROW><ROW><id>21161799</id><snippet>A-Z</snippet></ROW><ROW><id>21161799</id><snippet>a-z</snippet></ROW><ROW><id>21161799</id><snippet>0-9</snippet></ROW><ROW><id>21161799</id><snippet>"_"</snippet></ROW><ROW><id>21161799</id><snippet>def s√§√§(args):</snippet></ROW><ROW><id>21161930</id><snippet>set_hour("1")</snippet></ROW><ROW><id>21161930</id><snippet>t</snippet></ROW><ROW><id>21161930</id><snippet>t = Time()</snippet></ROW><ROW><id>21162146</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>21162146</id><snippet>shutil</snippet></ROW><ROW><id>21162146</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>21162146</id><snippet>import codecs

for fd in source_fds_list:
   with open(destination_url, 'ab') as destn_fd:
       with fd:
           start = fd.read(2)
           if start != codecs.BOM_UTF16_LE:
               destn_fd.write(start)
           shutil.copyfileobj(fd, destn_fd)
</snippet></ROW><ROW><id>21162146</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>21162146</id><snippet>shutil.copyfileobj()</snippet></ROW><ROW><id>21162146</id><snippet>data = source.read(buffer)</snippet></ROW><ROW><id>21162146</id><snippet>destination.write(data)</snippet></ROW><ROW><id>21162146</id><snippet>codecs</snippet></ROW><ROW><id>21162146</id><snippet>for fd in source_fds_list:
   with open(destination_url, 'ab') as destn_fd:
       with fd:
           start = fd.read(4)

           if start not in (codecs.BOM_UTF32_LE, codecs.BOM_UTF32_BE):
               if start[:3] != BOM_UTF8:
                   if start[:2] in (codecs.BOM_UTF16_LE, codecs.BOM_UTF16_BE):
                       # UTF-16 BOM, skip 2 bytes
                       start = start[2:]
               else:
                   # UTF-8 BOM, skip 3 bytes
                   start = start[-1]
               # Not a UTF-32 BOM, write read bytes (minus skipped bytes)
               destn_fd.write(start)

           shutil.copyfileobj(fd, destn_fd)
</snippet></ROW><ROW><id>21162151</id><snippet>Cursor.executemany</snippet></ROW><ROW><id>21162151</id><snippet>&gt;&gt;&gt; int('9e107d9d372bb6826bd81d3542a419d6', 16)
210103647840849757586127012022035159510L
&gt;&gt;&gt; hex(int('9e107d9d372bb6826bd81d3542a419d6', 16))
'0x9e107d9d372bb6826bd81d3542a419d6L'
</snippet></ROW><ROW><id>21162151</id><snippet>md5list = ['9e107d9d372bb6826bd81d3542a419d6',
           'e4d909c290d0fb1ca068ffaddf22cbd0']
params = [[int(h, 16)] for h in md5list]
cursor.executemany("insert into hashes (md5) values (%s)", params)
</snippet></ROW><ROW><id>21162288</id><snippet>re.match()</snippet></ROW><ROW><id>21162288</id><snippet>\A</snippet></ROW><ROW><id>21162288</id><snippet>re.search()</snippet></ROW><ROW><id>21162288</id><snippet>&gt;&gt;&gt; re.search("[^0-9.]","50-100")
&lt;_sre.SRE_Match object at 0x10e2a5e00&gt;
&gt;&gt;&gt; re.search("[^0-9.]","50-100").group()
'-'
</snippet></ROW><ROW><id>21162501</id><snippet>import numpy as np
import cv2
import matplotlib.pyplot as plt

im2 = cv2.imread('norm1_zps89266edb.jpg')
im = im2.copy()

gray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)
blur = cv2.GaussianBlur(gray,(5,5),0)
ret3,thresh = cv2.threshold(blur,0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)

#we ony want the external contours
contours,hierarchy = cv2.findContours(thresh.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE) 
#extract the countours with area &gt; 50
squares = [cnt for cnt in contours if cv2.contourArea(cnt) &gt; 50]

#mask array with the same shape as img (but only 1 channel)
mask = np.zeros((im.shape[0], im.shape[1]))
#draw the contours filled with 255 values. 
cv2.drawContours(mask,squares,-1,255,-1)

newImage = np.where(mask==255, thresh, 255)

plt.imshow(newImage)
plt.show()

cv2.imwrite("cropped.jpg", newImage)
</snippet></ROW><ROW><id>21162948</id><snippet>textwrap</snippet></ROW><ROW><id>21162948</id><snippet>ABABABAB</snippet></ROW><ROW><id>21162948</id><snippet>&gt;&gt;&gt; import textwrap
&gt;&gt;&gt; lst = textwrap.wrap(raw_input("Enter message: "), 2)
Enter message: ABABABAB
&gt;&gt;&gt; lst
['AB', 'AB', 'AB', 'AB']
</snippet></ROW><ROW><id>21162948</id><snippet>ABCABCABC</snippet></ROW><ROW><id>21162948</id><snippet>&gt;&gt;&gt; lst = textwrap.wrap(raw_input("Enter message: "), 2)
Enter message: ABCABCABC
&gt;&gt;&gt; lst
['AB', 'CA', 'BC', 'AB', 'C']
</snippet></ROW><ROW><id>21163012</id><snippet>{# Footer copyright (right side) #}
{% block copyright %}
  Copyright ¬© 2013 Client&lt;br&gt;Developed by &lt;a href="http://yoursite.com" target="_blank"&gt;YourName&lt;/a&gt; 
{% endblock %}
</snippet></ROW><ROW><id>21163196</id><snippet>"{0:.20f}".format(0.1)</snippet></ROW><ROW><id>21163196</id><snippet>0.10000000000000000555</snippet></ROW><ROW><id>21163196</id><snippet>Decimal</snippet></ROW><ROW><id>21163196</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; "{0:.20f}".format(Decimal('0.1'))
'0.10000000000000000000'
</snippet></ROW><ROW><id>21163196</id><snippet>&gt;&gt;&gt; "{0:.20f}".format(Decimal('0.1'))
'0.10000000000000000000'
&gt;&gt;&gt; "{0:.20f}".format(Decimal(0.1))
'0.10000000000000000555'
</snippet></ROW><ROW><id>21163196</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>21163196</id><snippet>O(1)</snippet></ROW><ROW><id>21163918</id><snippet>from mpl_toolkits.mplot3d import Axes3D
from scipy.interpolate import griddata
import matplotlib.pyplot as plt
import numpy as np

data = [(60, 5, '121'), (61, 5, '103'), (62, 5, '14.8'), (63, 5, '48.5'), (64, 5, '57.5'), (65, 5, '75.7'), (66, 5, '89.6'), (67, 5, '55.3'), (68, 5, '63.3'), (69, 5, '118'), (70, 5, '128'), (71, 5, '105'), (72, 5, '115'), (73, 5, '104'), (74, 5, '134'), (75, 5, '123'), (76, 5, '66.3'), (77, 5, '132'), (78, 5, '145'), (79, 5, '115'), (80, 5, '38.2'), (81, 5, '10.4'), (82, 5, '18.4'), (83, 5, '87'), (84, 5, '86.7'), (85, 5, '78.9'), (86, 5, '89.9'), (87, 5, '108'), (88, 5, '57.1'), (89, 5, '51.1'), (90, 5, '69.1'), (91, 5, '59.8'), (60, 6, '48.9'), (61, 6, '33.3'), (62, 6, '-19.2'), (63, 6, '-17.5'), (64, 6, '-6.5'), (65, 6, '75.7'), (66, 6, '89.6'), (67, 6, '55.3'), (68, 6, '99.8'), (69, 6, '156'), (70, 6, '141'), (71, 6, '54.1'), (72, 6, '66.1'), (73, 6, '98.9'), (74, 6, '155'), (75, 6, '146'), (76, 6, '111'), (77, 6, '132'), (78, 6, '145'), (79, 6, '97.3'), (80, 6, '101'), (81, 6, '59.4'), (82, 6, '70.4'), (83, 6, '142'), (84, 6, '145'), (85, 6, '140'), (86, 6, '56.9'), (87, 6, '77.8'), (88, 6, '21.1'), (89, 6, '27.1'), (90, 6, '48.1'), (91, 6, '41.8')]
x, y, z = zip(*data)
z = map(float, z)
grid_x, grid_y = np.mgrid[min(x):max(x):100j, min(y):max(y):100j]
grid_z = griddata((x, y), z, (grid_x, grid_y), method='cubic')

fig = plt.figure()
ax = fig.gca(projection='3d')
ax.plot_surface(grid_x, grid_y, grid_z, cmap=plt.cm.Spectral)
plt.show()
</snippet></ROW><ROW><id>21163951</id><snippet>*</snippet></ROW><ROW><id>21163951</id><snippet>my_list = [[1, 2, 3], "abcd", (4, 5, 6)]
izip_longest(*my_list)
</snippet></ROW><ROW><id>21163951</id><snippet>from itertools import izip_longest

my_list = [[1, 2, 3], "abcd", (4, 5, 6)]
print list(izip_longest(*my_list))
</snippet></ROW><ROW><id>21163951</id><snippet>[(1, 'a', 4), (2, 'b', 5), (3, 'c', 6), (None, 'd', None)]
</snippet></ROW><ROW><id>21163951</id><snippet>list</snippet></ROW><ROW><id>21163951</id><snippet>list</snippet></ROW><ROW><id>21163951</id><snippet>None</snippet></ROW><ROW><id>21163951</id><snippet>print list(izip_longest(*my_list, fillvalue = -1))
</snippet></ROW><ROW><id>21163951</id><snippet>[(1, 'a', 4), (2, 'b', 5), (3, 'c', 6), (-1, 'd', -1)]
</snippet></ROW><ROW><id>21164226</id><snippet>Diff.diff</snippet></ROW><ROW><id>21164226</id><snippet>list</snippet></ROW><ROW><id>21164226</id><snippet>DiffList</snippet></ROW><ROW><id>21164226</id><snippet>list</snippet></ROW><ROW><id>21164226</id><snippet>class DiffList(object):
    def __init__(self):
        self.a = {}
        self.b = {}
        self.c = {}
</snippet></ROW><ROW><id>21164226</id><snippet>def __init__(self, a, b):
    self.a = dict(a)
    self.b = dict(b)
    self.diff = DiffList() # no need for a separate method
    self.diff.a # ...
</snippet></ROW><ROW><id>21164226</id><snippet>diff = Diff(a, b)
diff.diff.a # ...
</snippet></ROW><ROW><id>21164276</id><snippet>makemessages</snippet></ROW><ROW><id>21164276</id><snippet>tra()</snippet></ROW><ROW><id>21164276</id><snippet>makemessages</snippet></ROW><ROW><id>21164276</id><snippet>xgettext</snippet></ROW><ROW><id>21164276</id><snippet>gettext_noop</snippet></ROW><ROW><id>21164276</id><snippet>gettext_lazy</snippet></ROW><ROW><id>21164276</id><snippet>ngettext_lazy</snippet></ROW><ROW><id>21164276</id><snippet>ugettext_noop</snippet></ROW><ROW><id>21164276</id><snippet>ugettext_lazy</snippet></ROW><ROW><id>21164276</id><snippet>ungettext_lazy</snippet></ROW><ROW><id>21164276</id><snippet>pgettext</snippet></ROW><ROW><id>21164276</id><snippet>npgettext</snippet></ROW><ROW><id>21164276</id><snippet>pgettext_lazy</snippet></ROW><ROW><id>21164276</id><snippet>npgettext_lazy</snippet></ROW><ROW><id>21164276</id><snippet>_()</snippet></ROW><ROW><id>21164276</id><snippet>views.py</snippet></ROW><ROW><id>21164276</id><snippet>from django.utils.translation import ugettext as _
text = _("this is a text")
</snippet></ROW><ROW><id>21164276</id><snippet>gettext</snippet></ROW><ROW><id>21164276</id><snippet>from django.utils.translation import ugettext
text = ugettext("this is a text")
</snippet></ROW><ROW><id>21164276</id><snippet>translation.*</snippet></ROW><ROW><id>21164276</id><snippet>_()</snippet></ROW><ROW><id>21164485</id><snippet>dayfirst=True</snippet></ROW><ROW><id>21164631</id><snippet>C:\pyzo2013c\lib\site-packages\matplotlib\mathtext.py:46: UserWarning: Due to a bug in pyparsing &lt;= 2.0.0 on Python 3.x, packrat parsing has been disabled.  Mathtext rendering will be much slower as a result.  Install pyparsing 2.0.0 or later to improve performance.
  warn("Due to a bug in pyparsing &lt;= 2.0.0 on Python 3.x, packrat parsing "
TkAgg
TkAgg
</snippet></ROW><ROW><id>21164956</id><snippet>Errors should never pass silently.</snippet></ROW><ROW><id>21164956</id><snippet>None</snippet></ROW><ROW><id>21164956</id><snippet>AttributeError: 'NoneType' object has no attribute 'users'</snippet></ROW><ROW><id>21164956</id><snippet>class EmailConfirmation():
   @receiver(email_confirmed)
   def confirmed(sender, **kwargs):
       email = kwargs['email_address'].email
       keystone_id = User.objects.get_by_natural_key(email).keystone_id
       try:
           client = Client(token=settings.KEYSTONE_TOKEN,
                           endpoint=settings.KEYSTONE_URL)
       except CustomClientError as e:
           # Your Error Handling Code goes here
           raise CustomClientError("Your Error Message")
       else:
           if client.users:
               client.users.update(keystone_id, enabled=True)
           else:
               raise CustomEmailError("Your Error Message")
       finally:
           # Cleanup code goes here
</snippet></ROW><ROW><id>21165052</id><snippet>class BookForm(ModelForm):

    class Meta:
        model = Book
        fields = ['title', 'author', 'genre']
</snippet></ROW><ROW><id>21165052</id><snippet>class BookForm(ModelForm):

     class Meta:
         model = Book
         fields = ['title', 'author', 'genre']
         labels = {'title': 'Book title', }
</snippet></ROW><ROW><id>21165057</id><snippet>In [162]: x=[1,2,3]
     ...: from itertools import combinations
     ...: print [subset for i in range(len(x)+1) for subset in combinations(x, i)]

#outputs: [(), (1,), (2,), (3,), (1, 2), (1, 3), (2, 3), (1, 2, 3)]
</snippet></ROW><ROW><id>21165057</id><snippet>In [237]: import numpy as np
     ...: x=np.array([1,2,3])
     ...: n=2**len(x)
     ...: res=[]
     ...: for i in range(0, n):
     ...:     mask='{0:b}'.format(i).zfill(len(x))
     ...:     mask=np.array([int(idx) for idx in mask], bool)
     ...:     res.append(x[mask].tolist())
     ...: print res
#output: [[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]]
</snippet></ROW><ROW><id>21165116</id><snippet>df.ix[:,(df != 0).any(axis=0)]
</snippet></ROW><ROW><id>21165116</id><snippet>In [74]: import pandas as pd

In [75]: df = pd.DataFrame([[1,0,0,0], [0,0,1,0]])

In [76]: df
Out[76]: 
   0  1  2  3
0  1  0  0  0
1  0  0  1  0

[2 rows x 4 columns]
</snippet></ROW><ROW><id>21165116</id><snippet>df != 0</snippet></ROW><ROW><id>21165116</id><snippet>df</snippet></ROW><ROW><id>21165116</id><snippet>In [77]: df != 0
Out[77]: 
       0      1      2      3
0   True  False  False  False
1  False  False   True  False

[2 rows x 4 columns]
</snippet></ROW><ROW><id>21165116</id><snippet>(df != 0).any(axis=0)</snippet></ROW><ROW><id>21165116</id><snippet>In [78]: (df != 0).any(axis=0)
Out[78]: 
0     True
1    False
2     True
3    False
dtype: bool
</snippet></ROW><ROW><id>21165116</id><snippet>df.ix</snippet></ROW><ROW><id>21165116</id><snippet>In [79]: df.ix[:,(df != 0).any(axis=0)]
Out[79]: 
   0  2
0  1  0
1  0  1

[2 rows x 2 columns]
</snippet></ROW><ROW><id>21165116</id><snippet>df</snippet></ROW><ROW><id>21165116</id><snippet>df = df.ix[:,(df != 0).any(axis=0)]
</snippet></ROW><ROW><id>21165277</id><snippet>import this</snippet></ROW><ROW><id>21165384</id><snippet>imp.load_module</snippet></ROW><ROW><id>21165384</id><snippet>__import__</snippet></ROW><ROW><id>21165384</id><snippet>vars</snippet></ROW><ROW><id>21165384</id><snippet>import imp
path = '/path/to/file'
with open(path, 'U') as f:
    mod = imp.load_module('temporary', f, path, ('.py', 'U', imp.PY_SOURCE))

builtins = vars(__builtins__)
cls = next(value for name, value in vars(mod).items() if name not in builtins)
const_dict = {name: value for name, value in vars(mod.Constants).items()
                          if not name.startswith('_')}
print(const_dict)

# =&gt; {'OS': 'os', 'VERSION': 'version', 'PROGRAM': 'program'}
</snippet></ROW><ROW><id>21165464</id><snippet>from django.db.models import Count

#group by portfolios count
User.objects.annotate(portfolios=Count('portfolio')).order_by('portfolios')
#group by projects count
User.objects.annotate(projects=Count('portfolio__project')).order_by('projects')
</snippet></ROW><ROW><id>21165848</id><snippet>def convert_empty_to_none(func):
    def inner_function(*args, **kwargs):
        args = (None if item == "" else item for item in args)
        kwargs = {k:(None if v == "" else v) for k, v in kwargs.items()}
        return func(*args, **kwargs)
    return inner_function

@convert_empty_to_none
def test_function(a, b, c):
    print a, b, c

test_function("", "", "")
</snippet></ROW><ROW><id>21165848</id><snippet>None None None
</snippet></ROW><ROW><id>21165929</id><snippet>viewMenu.Check(..)</snippet></ROW><ROW><id>21165929</id><snippet>ToggleStatusBar</snippet></ROW><ROW><id>21165929</id><snippet>viewMenu.Check</snippet></ROW><ROW><id>21165929</id><snippet>def InitUI(self):    
    ....
    viewMenu.Check(self.shst.GetId(), False)
    self.ToggleStatusBar(None)
</snippet></ROW><ROW><id>21166018</id><snippet>from PyQt4 import QtGui, QtCore, QtNetwork
import sys
import time

def finished(reply):
  print "Finished: ", reply.readAll()
  app.quit()

def construct_multipart(data, files):
  multiPart = QtNetwork.QHttpMultiPart(QtNetwork.QHttpMultiPart.FormDataType)
  for key, value in data.items():
    textPart = QtNetwork.QHttpPart()
    textPart.setHeader(QtNetwork.QNetworkRequest.ContentDispositionHeader,
      "form-data; name=\"%s\"" % key)
    textPart.setBody(value)
    multiPart.append(textPart)

  for key, file in files.items():
    imagePart = QtNetwork.QHttpPart()
    #imagePart.setHeader(QNetworkRequest::ContentTypeHeader, ...);
    fileName = QtCore.QFileInfo(file.fileName()).fileName()
    imagePart.setHeader(QtNetwork.QNetworkRequest.ContentDispositionHeader,
      "form-data; name=\"%s\"; filename=\"%s\"" % (key, fileName))
    imagePart.setBodyDevice(file);
    multiPart.append(imagePart)
  return multiPart

app = QtGui.QApplication(sys.argv)
file1 = QtCore.QFile('/tmp/1.txt')
file1.open(QtCore.QFile.ReadOnly)
url = QtCore.QUrl('http://localhost:3000/qwertytest1');
data = { 'text1': 'test1', 'text2': 'test2' }
files = {'file1': file1 }
multipart = construct_multipart(data, files)
request_qt = QtNetwork.QNetworkRequest(url)
request_qt.setHeader(QtNetwork.QNetworkRequest.ContentTypeHeader,
  'multipart/form-data; boundary=%s' % multipart.boundary())
manager = QtNetwork.QNetworkAccessManager()
manager.finished.connect(finished)
request = manager.post(request_qt, multipart)

sys.exit(app.exec_())
</snippet></ROW><ROW><id>21166018</id><snippet>QHttpMultiPart</snippet></ROW><ROW><id>21166018</id><snippet>import sys
from PySide import QtCore, QtGui, QtNetwork
import requests

def finished(reply):
  print "Finished: ", reply.readAll()
  app.quit()

app = QtGui.QApplication(sys.argv)
url = 'http://localhost:3000/qwertytest1'
data = { 'text1': 'test1', 'text2': 'test2' }
files = {'file1': open('/tmp/1.txt') }
request = requests.Request('POST', url, data=data, files=files).prepare()
request_qt = QtNetwork.QNetworkRequest(url)
for header, value in request.headers.items():
  request_qt.setRawHeader(header, value)
manager = QtNetwork.QNetworkAccessManager()
manager.finished.connect(finished)
request = manager.post(request_qt, request.body)

sys.exit(app.exec_())
</snippet></ROW><ROW><id>21166121</id><snippet>import datetime

def search_results(request):
    from_age = form.cleaned_data['from_age']
    to_age = form.cleaned_data['to_age']

    now = datetime.date.today()
    from_date = datetime.date(now.year-int(to_age), now.month, now.day)
    to_date = datetime.date(now.year-int(from_age), now.month, now.day)

    query_set = profiles.objects.filter(gender=gender,
                                        birthday__range=(from_date, to_date))
</snippet></ROW><ROW><id>21166450</id><snippet>&gt;&gt;&gt; a = [5.0, 6.0, 8.0, 10.0, 15.0, 20.0, 25.0, 30.0, 40.0, 50.0, 60.0, 70.0, 80.0, 90.0, 100.0, 110.0, 120.0, 130.0, 140.0, 150.0, 160.0, 180.0, 200.0, 220.0, 240.0, 260.0, 280.0, 300.0, 330.0, 360.0, 400.0, 450.0, 500.0, 550.0, 600.0, 650.0, 700.0, 750.0, 800.0, 900.0, 1000.0, 1100.0, 1200.0, 1300.0, 1500.0, 1700.0, 2000.0, 2500.0, 3000.0, 4000.0, 5000.0, 6000.0, 7000.0, 8000.0, 9000.0, 10000.0, 12000.0, 15000.0, 20000.0, 30000.0, 50000.0, 100000.0]
&gt;&gt;&gt; b = [[2.8855960615102004e-05], [4.0701386519793902e-05], [6.6563800907013242e-05], [0.0001006393622421269], [0.00019862657113084296], [0.00032843266928887332], [0.00046438711039847576], [0.00060420820026262198], [0.00091858847275374405], [0.0012828446411529174], [0.0016307748004155418], [0.0020049092489578773], [0.0023859804990953733], [0.0027809435562397089], [0.0031914945950108709], [0.0036198713189993367], [0.004049356593219729], [0.058652386100581579], [0.080971818217450073], [0.10330986231789899], [0.13710341994459613], [0.20188314005754618], [0.2891914189026335], [0.37721295733783522], [0.47493929411417846], [0.57539389630897464], [0.70805980165022075], [0.85872215884312952], [1.0664252638663609], [1.2783399280844934], [1.564710616680836], [2.0375181832882485], [2.5037792909103884], [2.9693614352642328], [3.4461139299681416], [3.9753240755452568], [4.5112890074931942], [5.0575238552577968], [5.6116617190278557], [6.75034712149598], [7.9290625424458492], [9.1455816114675219], [10.393026346405367], [14.442148067840661], [18.539929482157905], [22.594593494117799], [28.852213268263831], [39.804824036584456], [51.348027754488449], [83.695041150108111], [118.92653801185628], [155.17895505284363], [192.83930746140334], [231.78928736553948], [271.95372644243321], [313.16712050353419], [398.50142684880342], [532.55760945531256], [768.84170621340957], [1276.9057251660611], [2387.368055624514], [5476.4080305101643]]
&gt;&gt;&gt; np.asarray(a).shape
(62,)
&gt;&gt;&gt; np.asarray(b).shape
(62, 1)
</snippet></ROW><ROW><id>21166450</id><snippet>.squeeze()</snippet></ROW><ROW><id>21166450</id><snippet>&gt;&gt;&gt; a = np.asarray(a)
&gt;&gt;&gt; b = np.asarray(b).squeeze()
&gt;&gt;&gt; b.shape
(62,)
</snippet></ROW><ROW><id>21166450</id><snippet>&gt;&gt;&gt; from scipy.interpolate import interp1d
&gt;&gt;&gt; i = interp1d(a,b)
&gt;&gt;&gt; i(2123)
array(31.546555517270704)
</snippet></ROW><ROW><id>21166672</id><snippet>    from django.conf.urls.i18n import i18n_patterns

    urlpatterns += i18n_patterns('',

    )
</snippet></ROW><ROW><id>21166672</id><snippet>    urlpatterns = i18n_patterns('',

    )
</snippet></ROW><ROW><id>21166672</id><snippet>    (r'^i18n/', include('django.conf.urls.i18n'))
</snippet></ROW><ROW><id>21166827</id><snippet>&lt;xsl:template match="span[contains(@style, 'font')]"&gt;...
&lt;xsl:template match="span[contains(@style, 'color')]"&gt;...
&lt;xsl:template match="span[contains(@style, 'size')]"&gt;...
</snippet></ROW><ROW><id>21166827</id><snippet>&lt;xsl:template match="span"&gt;
    &lt;xsl:choose&gt;
        &lt;xsl:when test="contains(@style, 'font')"&gt;...
        &lt;xsl:when test="contains(@style, 'color')"&gt;...
        &lt;xsl:when test="contains(@style, 'size')"&gt;...
</snippet></ROW><ROW><id>21167042</id><snippet>from webapp2_extra import jinja2
</snippet></ROW><ROW><id>21167042</id><snippet># You have a missing s!
from webapp2_extras import jinja2
</snippet></ROW><ROW><id>21167042</id><snippet>app = webapp2.WSGIApplication([
    ('/', MainHandler)
], debug=True)
</snippet></ROW><ROW><id>21167101</id><snippet>for</snippet></ROW><ROW><id>21167101</id><snippet>target = "some_string_key1_key3_key5_key6"

some_dict = {
    ('key1', 'key2'): 'value1',
    ('key3', 'key4'): 'value2',
    ('key5',): 'value3',
    ('key6',): 'value6',
}

for k, v in some_dict.iteritems():
    target = reduce(lambda x, y: x.replace(y, v), k, target)

print target
</snippet></ROW><ROW><id>21167101</id><snippet>some_string_value1_value2_value3_value6
</snippet></ROW><ROW><id>21167124</id><snippet>itertools</snippet></ROW><ROW><id>21167124</id><snippet>ListOfLists</snippet></ROW><ROW><id>21167124</id><snippet>for elt in itertools.product(*ListOfLists):
   ...
</snippet></ROW><ROW><id>21167124</id><snippet>product</snippet></ROW><ROW><id>21167443</id><snippet>import re
with open("giantfile.txt") as infile:
    print(re.findall("[A-Za-z]+", infile.read()))
</snippet></ROW><ROW><id>21167614</id><snippet>df[[colname1, colname2, colname3...]]</snippet></ROW><ROW><id>21167614</id><snippet>.product</snippet></ROW><ROW><id>21167614</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({"A": [2,2], "B": [3,3], "C": [5,5]})
&gt;&gt;&gt; df
   A  B  C
0  2  3  5
1  2  3  5

[2 rows x 3 columns]
&gt;&gt;&gt; df[["A", "C"]].product(axis=1)
0    10
1    10
dtype: int64
</snippet></ROW><ROW><id>21167633</id><snippet>(add-hook 'org-mode-hook (lambda ()
  (setq indent-tabs-mode t)
  (setq tab-stop-list (number-sequence 4 200 4))
  (setq tab-width 4)
  (setq indent-line-function 'insert-tab) ))
</snippet></ROW><ROW><id>21167875</id><snippet>my_text = """{ ATTR_u,
  READ_WRITE | ATR_DFLAG_SELEQ | ATR_DFLAG_SCGALT,
  ATR_TYPE_ARST,
  NULL_VERIFY_DATATYPE_FUNC,
  verify_value_user_list
 }"""

my_text = my_text.strip("{}")
my_list = [item.strip() for item in my_text.split(",")]
my_dict = {my_list[0]:my_list[1:]}
</snippet></ROW><ROW><id>21167889</id><snippet>.html</snippet></ROW><ROW><id>21167889</id><snippet>.htm</snippet></ROW><ROW><id>21167889</id><snippet>.xml</snippet></ROW><ROW><id>21167889</id><snippet>.xhtml</snippet></ROW><ROW><id>21167889</id><snippet>{% autoescape %}</snippet></ROW><ROW><id>21167889</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>21167889</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>21167889</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>21167889</id><snippet>nl2br</snippet></ROW><ROW><id>21167889</id><snippet>User text as paragraphs with line breaks:&lt;br/&gt;
{{ user_text | nl2br }}
</snippet></ROW><ROW><id>21168545</id><snippet>change_slider_value</snippet></ROW><ROW><id>21168545</id><snippet>Signal.connect(change_slider_value)
</snippet></ROW><ROW><id>21168545</id><snippet>Signal.connect(lambda data: my_slider.setValue(data))
</snippet></ROW><ROW><id>21168545</id><snippet>chang_slider_value</snippet></ROW><ROW><id>21168564</id><snippet>x</snippet></ROW><ROW><id>21168564</id><snippet>a</snippet></ROW><ROW><id>21168564</id><snippet>b</snippet></ROW><ROW><id>21168564</id><snippet>In [132]: pd.concat([a['x'], b['x']], axis=1)
Out[132]: 
   x  x
0  1  3
1  2  4

[2 rows x 2 columns]
</snippet></ROW><ROW><id>21168564</id><snippet>In [133]: pd.concat([a['x'], b['x']], axis=1).values
Out[133]: 
array([[1, 3],
       [2, 4]], dtype=int64)
</snippet></ROW><ROW><id>21168564</id><snippet>sol</snippet></ROW><ROW><id>21168564</id><snippet>In [134]: pd.concat([a['x'], b['x']], axis=1).values.reshape(2,2,1)
Out[134]: 
array([[[1],
        [3]],

       [[2],
        [4]]], dtype=int64)

In [136]: np.allclose(pd.concat([a['x'], b['x']], axis=1).values.reshape(2,2,1), sol)
Out[136]: True
</snippet></ROW><ROW><id>21168638</id><snippet>sl</snippet></ROW><ROW><id>21168638</id><snippet>/usr/games</snippet></ROW><ROW><id>21168638</id><snippet>which sl</snippet></ROW><ROW><id>21168638</id><snippet>sl</snippet></ROW><ROW><id>21168638</id><snippet>file $(which sl)</snippet></ROW><ROW><id>21168638</id><snippet>ls</snippet></ROW><ROW><id>21168682</id><snippet>import re

dateRegex = re.compile(r'^\w{3}\s\d\d?\s\d\d:\d\d:\d\d')
                             # ^^^^^^^ I added ? to cater for dates between 1 &amp; 9

f = open("logfile.log","r")

for line in f.readlines():
    matches = re.findall(dateRegex,line)
    if matches:                # Check if there are matches
        print matches[0]       # Print first element of list returned by findall
</snippet></ROW><ROW><id>21168682</id><snippet>re.match</snippet></ROW><ROW><id>21168682</id><snippet>import re

dateRegex = re.compile(r'\w{3}\s\d\d?\s\d\d:\d\d:\d\d')

f = open("logfile.log","r")

for line in f.readlines():
    matches = re.match(dateRegex,line)
    if matches:
        print matches.group()
</snippet></ROW><ROW><id>21168828</id><snippet>artista = produto.artista_id
</snippet></ROW><ROW><id>21168828</id><snippet>artista = Cliente.objects.get(produto.artista_id)
</snippet></ROW><ROW><id>21168828</id><snippet>produto</snippet></ROW><ROW><id>21169006</id><snippet>vec = cur.fetchone()</snippet></ROW><ROW><id>21169006</id><snippet>vec = (old_vec_p1, vec[1], vec_id)</snippet></ROW><ROW><id>21169177</id><snippet>x=2
y=3

def func(x,y):
    x=200
    y=300

func(x,y) #inside this function, x=200 and y=300
#but by this line the function is over and those new values are discarded
print(x,y) #so this is looking at the outer scope again
</snippet></ROW><ROW><id>21169177</id><snippet>global</snippet></ROW><ROW><id>21169177</id><snippet>def func(x,y):
    global x #these tell the function to look at the outer scope 
    global y #and use those references to x and y, not the inner scope
    x=200
    y=300

func(x,y)
print(x,y) #prints 200 300
</snippet></ROW><ROW><id>21169177</id><snippet>[].append()</snippet></ROW><ROW><id>21169177</id><snippet>def func(x,y):
    x = x+200 #this can be written x += 200
    y = y+300 #as above: y += 300
    return (x,y) #returns a tuple (x,y)

x = 2
y = 3
func(x,y) # returns (202, 303)
print(x,y) #prints 2 3
</snippet></ROW><ROW><id>21169177</id><snippet>(202, 303)</snippet></ROW><ROW><id>21169177</id><snippet>#func as defined above

x=2 ; y=3
x,y = func(x,y) #this unpacks the tuple (202,303) into two values and x and y
print(x,y) #prints 202 303
</snippet></ROW><ROW><id>21169415</id><snippet>def worker(t):
    d, i = t
    d[i % 10] += 1

if __name__ == "__main__":
    import multiprocessing as mp
    pool = mp.Pool()
    d = mp.Manager().dict()
    for i in range(10):
        d[i] = 0
    pool.map(worker, ((d, i) for i in xrange(1000)))
    pool.close()
    pool.join()
    print d, sum(d.values())
</snippet></ROW><ROW><id>21169415</id><snippet>{0: 97, 1: 96, 2: 98, 3: 96, 4: 96, 5: 99, 6: 97, 7: 96, 8: 96, 9: 94} 965
{0: 97, 1: 97, 2: 96, 3: 97, 4: 97, 5: 97, 6: 95, 7: 95, 8: 93, 9: 96} 960
{0: 98, 1: 97, 2: 98, 3: 96, 4: 97, 5: 95, 6: 97, 7: 97, 8: 97, 9: 98} 970
</snippet></ROW><ROW><id>21169415</id><snippet>mp.Manager().Lock()</snippet></ROW><ROW><id>21169415</id><snippet>worker()</snippet></ROW><ROW><id>21169648</id><snippet>for</snippet></ROW><ROW><id>21169648</id><snippet>break</snippet></ROW><ROW><id>21169648</id><snippet>for site in sites:
    if condition &lt; 8:
        # ...
    else:
        break
</snippet></ROW><ROW><id>21169648</id><snippet>for</snippet></ROW><ROW><id>21169648</id><snippet>parse</snippet></ROW><ROW><id>21169648</id><snippet>return None</snippet></ROW><ROW><id>21169648</id><snippet>return</snippet></ROW><ROW><id>21169648</id><snippet>break</snippet></ROW><ROW><id>21169648</id><snippet>break</snippet></ROW><ROW><id>21169648</id><snippet>for ...:
    if something:
        break
# do something else before finishing
</snippet></ROW><ROW><id>21169734</id><snippet>.</snippet></ROW><ROW><id>21169734</id><snippet>\.</snippet></ROW><ROW><id>21169734</id><snippet>\</snippet></ROW><ROW><id>21169734</id><snippet>IPRegex = re.compile(r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}")
ip = "192.168.1.1"

matches = IPRRegex.match(ip)
[OUT] &lt;_sre.SRE_Match object at 0x0000000003349578&gt;
</snippet></ROW><ROW><id>21169833</id><snippet>=IF(NOT(ISBLANK(A5)),C6&amp;", "&amp;C7&amp;", "&amp;C8&amp;", "&amp;C9)  
</snippet></ROW><ROW><id>21169833</id><snippet>-</snippet></ROW><ROW><id>21169917</id><snippet>In [1]: dates = pd.Series(['1/1/2014', 'A'])

In [2]: pd.to_datetime(dates)  # doesn't even convert first date
Out[2]: 
0    1/1/2014
1           A
dtype: object

In [3]: pd.to_datetime(dates, errors='raise')
...
ValueError: Given date string not likely a datetime.

In [4]: pd.to_datetime(dates, coerce=True)
Out[4]: 
0   2014-01-01
1          NaT
dtype: datetime64[ns]
</snippet></ROW><ROW><id>21169917</id><snippet>to_datetime</snippet></ROW><ROW><id>21169917</id><snippet>isnull</snippet></ROW><ROW><id>21169917</id><snippet>In [5]: dates[pd.isnull(pd.to_datetime(dates, coerce=True))]
Out[5]: 
1    A
dtype: object
</snippet></ROW><ROW><id>21169980</id><snippet>string = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', string)</snippet></ROW><ROW><id>21169980</id><snippet>string = re.sub('(.)([0-9]+)', r'\1_\2', string)</snippet></ROW><ROW><id>21169980</id><snippet>return re.sub('([a-z0-9])([A-Z])', r'\1_\2', string).lower()</snippet></ROW><ROW><id>21170284</id><snippet>str.replace</snippet></ROW><ROW><id>21170284</id><snippet>str.replace</snippet></ROW><ROW><id>21170284</id><snippet>message = message.replace('\u2013', '-')
</snippet></ROW><ROW><id>21170303</id><snippet>class Capture():
    def __init__(self):
        self.capturing = False
        self.c = cv2.VideoCapture(0)

    def startCapture(self):
        print "pressed start"
        self.capturing = True
        cap = self.c
        while(self.capturing):
            ret, frame = cap.read()
            cv2.imshow("Capture", frame)
            cv2.waitKey(5)
        cv2.destroyAllWindows()

    def endCapture(self):
        print "pressed End"
        self.capturing = False
        # cv2.destroyAllWindows()

    def quitCapture(self):
        print "pressed Quit"
        cap = self.c
        cv2.destroyAllWindows()
        cap.release()
        QtCore.QCoreApplication.quit()
</snippet></ROW><ROW><id>21170303</id><snippet>self.capture = Capture()
self.start_button = QtGui.QPushButton('Start',self)
self.start_button.clicked.connect(self.capture.startCapture)

self.end_button = QtGui.QPushButton('End',self)
self.end_button.clicked.connect(self.capture.endCapture)

self.quit_button = QtGui.QPushButton('Quit',self)
self.quit_button.clicked.connect(self.capture.quitCapture)
</snippet></ROW><ROW><id>21170427</id><snippet>numpy.ndarray.fill</snippet></ROW><ROW><id>21170427</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(10)
&gt;&gt;&gt; a
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
&gt;&gt;&gt; a.fill(0)
&gt;&gt;&gt; a
array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
</snippet></ROW><ROW><id>21170877</id><snippet>datetime.strftime()</snippet></ROW><ROW><id>21170877</id><snippet>1/16/2014</snippet></ROW><ROW><id>21170877</id><snippet>11/6/2014</snippet></ROW><ROW><id>21170877</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; datetime.datetime.strftime(now, '%m/%d/%Y')
'01/16/2014'
&gt;&gt;&gt; datetime.datetime.strftime(now, '%H:%M:%S')
'14:18:16'
&gt;&gt;&gt; datetime.datetime.strftime(now, '%I:%M:%S')
'02:18:16'
</snippet></ROW><ROW><id>21170877</id><snippet>datetime.strftime()</snippet></ROW><ROW><id>21170877</id><snippet>&gt;&gt;&gt; print '/'.join(map(str, [now.month, now.day, now.year]))
'1/16/2014'
</snippet></ROW><ROW><id>21170975</id><snippet>shared-import</snippet></ROW><ROW><id>21171028</id><snippet>list(product(*x))
Out[34]: 
[(1, 'a', 'B'),
 (1, 'a', 'C'),
 (2, 'a', 'B'),
 (2, 'a', 'C'),
 (3, 'a', 'B'),
 (3, 'a', 'C')]
</snippet></ROW><ROW><id>21171430</id><snippet>Association Proxy</snippet></ROW><ROW><id>21171430</id><snippet>class Item(Base, DBBase):
    __tablename__ = 'item'
    id = Column(Integer, primary_key = True)
    name = Column(String, nullable = True)
    comments = relationship('ItemComment')
    comms = association_proxy('comments', 'comment',
            creator=lambda comment: ItemComment(comment=comment),
            )

class ItemComment(Base, DBBase):
    __tablename__ = 'itemcomments'
    item_id = Column(Integer, ForeignKey('item.id'), nullable = False, primary_key=True)
    comment = Column(String, nullable = False, primary_key=True)
    def __init__(self, comment):
        self.comment = comment
</snippet></ROW><ROW><id>21171430</id><snippet>my_item.comms.append("super")
print "All Comments: ", my_item.comms
</snippet></ROW><ROW><id>21171430</id><snippet>creator</snippet></ROW><ROW><id>21171430</id><snippet>ItemComment</snippet></ROW><ROW><id>21171430</id><snippet>creator</snippet></ROW><ROW><id>21171430</id><snippet>comments</snippet></ROW><ROW><id>21171430</id><snippet>_comments</snippet></ROW><ROW><id>21171430</id><snippet>comms</snippet></ROW><ROW><id>21171430</id><snippet>comments</snippet></ROW><ROW><id>21171697</id><snippet>914</snippet></ROW><ROW><id>21171697</id><snippet>sum += dict[int(i/100)]+dict[100]
sum += dict[i%100-(i%10)]+dict[i%10]
</snippet></ROW><ROW><id>21171697</id><snippet>i</snippet></ROW><ROW><id>21171697</id><snippet>i=914</snippet></ROW><ROW><id>21171697</id><snippet>i%100-(i%10) == 914%100 - 914%10 == 14 - 4 == 10
</snippet></ROW><ROW><id>21171697</id><snippet>len("and")</snippet></ROW><ROW><id>21171697</id><snippet>i%100 == 0</snippet></ROW><ROW><id>21171697</id><snippet>dict[13] = 'thirteen')</snippet></ROW><ROW><id>21171697</id><snippet>len(dict[13])</snippet></ROW><ROW><id>21171697</id><snippet>914</snippet></ROW><ROW><id>21171810</id><snippet>self.save(update_fields=['objs'])
</snippet></ROW><ROW><id>21171810</id><snippet>objs</snippet></ROW><ROW><id>21171822</id><snippet>In [11]: week = df.groupby(pd.TimeGrouper('W'))

In [12]: is_week_min = week['value'].apply(lambda x: x == x.min()).astype(int)  # possibly the astype is not needed in 0.13

In [13]: is_week_min.resample('D', how='sum')  # count occurences in the day which are week min
Out[13]: 
2013-01-01    0
2013-01-02    0
2013-01-03    0
2013-01-04    1
Freq: D, dtype: int64
</snippet></ROW><ROW><id>21171822</id><snippet>In [14]: week['value'].apply(lambda x: ((x == x.min()).astype(int).groupby(x.index.dayofweek)).sum()).unstack(1)
Out[14]: 
            1  2  3  4
2013-01-06  0  0  0  1
</snippet></ROW><ROW><id>21171822</id><snippet>In [21]: df = pd.read_csv('http://pastebin.com/raw.php?i=SuyWZLj5', header=None, parse_dates=[[0, 1]])
         df.columns = ['date', 'value']
         df.set_index('date', inplace=True)

In [22]: df.groupby(pd.TimeGrouper('W')).value.apply(lambda x: ((x == x.min()).astype(int).groupby(x.index.dayofweek)).sum()).unstack(1)
Out[22]: 
             0  1  2  3   4
2013-01-06 NaN  0  0  0   1
2013-01-13   0  0  0  1   0
2013-01-20   0  0  0  1   0
2013-01-27   1  0  0  0   0
2013-02-03   0  1  0  0   0
2013-02-10   0  0  0  0   1
2013-02-17   0  0  0  0   1
2013-02-24   0  0  0  0   1
2013-03-03   0  0  1  0 NaN
</snippet></ROW><ROW><id>21171833</id><snippet>libgcj</snippet></ROW><ROW><id>21171833</id><snippet>Cython</snippet></ROW><ROW><id>21171833</id><snippet>gcj</snippet></ROW><ROW><id>21172000</id><snippet>Sprite</snippet></ROW><ROW><id>21172000</id><snippet>Group</snippet></ROW><ROW><id>21172000</id><snippet>draw</snippet></ROW><ROW><id>21172000</id><snippet>Group</snippet></ROW><ROW><id>21172000</id><snippet>window</snippet></ROW><ROW><id>21172000</id><snippet>pygame.sprite</snippet></ROW><ROW><id>21172000</id><snippet>flip</snippet></ROW><ROW><id>21172000</id><snippet>draw</snippet></ROW><ROW><id>21172000</id><snippet>thetorch = sprites.torch("torch.png", (50, 50))
everything = pygame.sprite.Group()
everything.add(thetorch)
everything.draw(window)
pygame.display.flip()
</snippet></ROW><ROW><id>21172000</id><snippet>add</snippet></ROW><ROW><id>21172000</id><snippet>Group</snippet></ROW><ROW><id>21172000</id><snippet>draw</snippet></ROW><ROW><id>21172000</id><snippet>draw</snippet></ROW><ROW><id>21172122</id><snippet>connect</snippet></ROW><ROW><id>21172122</id><snippet>getaddrinfo</snippet></ROW><ROW><id>21172122</id><snippet>connect</snippet></ROW><ROW><id>21172122</id><snippet>connect</snippet></ROW><ROW><id>21172155</id><snippet>Max</snippet></ROW><ROW><id>21172155</id><snippet>items = Item.objects.all()
items.aggregate(Max('cost'))
</snippet></ROW><ROW><id>21172155</id><snippet>order by</snippet></ROW><ROW><id>21172382</id><snippet>execute</snippet></ROW><ROW><id>21172382</id><snippet>name[0]</snippet></ROW><ROW><id>21172382</id><snippet>&gt;&gt;&gt; for ch in "abc":
...     print(ch)
a
b
c
</snippet></ROW><ROW><id>21172382</id><snippet>s[0]</snippet></ROW><ROW><id>21172382</id><snippet>s[-3:]</snippet></ROW><ROW><id>21172382</id><snippet>cursor.execute("INSERT INTO players (username) VALUES (?)", (name[0],))
</snippet></ROW><ROW><id>21172490</id><snippet>x</snippet></ROW><ROW><id>21172490</id><snippet>a, b, c, d</snippet></ROW><ROW><id>21172581</id><snippet>data_dict = {} # empty dict
data_list = [] # empty list

for i in range(50):
    data_list.append(np.loadtxt('{0}.txt'.format(i+1)))
    #or
    data_dict[i] = np.loadtxt('{0}.txt'.format(i+1))
</snippet></ROW><ROW><id>21172581</id><snippet>data_dict[9] # access data10
#or
data_list[9]
</snippet></ROW><ROW><id>21172657</id><snippet>BracketedRegex = re.compile(r'\[.*?\]')
</snippet></ROW><ROW><id>21172657</id><snippet>*?</snippet></ROW><ROW><id>21172657</id><snippet>*</snippet></ROW><ROW><id>21172657</id><snippet>.</snippet></ROW><ROW><id>21172657</id><snippet>BracketedRegex = re.compile(r'\[[^\]]*\]')
</snippet></ROW><ROW><id>21172657</id><snippet>[^..]</snippet></ROW><ROW><id>21172657</id><snippet>]</snippet></ROW><ROW><id>21172854</id><snippet>c</snippet></ROW><ROW><id>21172854</id><snippet>alpha</snippet></ROW><ROW><id>21172854</id><snippet>def percent(alpha, string):
    results = []
    for c in alpha:
        y = [e for e in string if e == c]
        x = len(y)
        results.append((c, round((float(x) / len(string)*100))))
    return results
</snippet></ROW><ROW><id>21172854</id><snippet>e == alpha</snippet></ROW><ROW><id>21172854</id><snippet>alpha</snippet></ROW><ROW><id>21172854</id><snippet>ab</snippet></ROW><ROW><id>21172854</id><snippet>e</snippet></ROW><ROW><id>21172854</id><snippet>x</snippet></ROW><ROW><id>21172854</id><snippet>float</snippet></ROW><ROW><id>21172854</id><snippet>3 / 4</snippet></ROW><ROW><id>21172854</id><snippet>0</snippet></ROW><ROW><id>21172854</id><snippet>0.75</snippet></ROW><ROW><id>21172854</id><snippet>float</snippet></ROW><ROW><id>21172854</id><snippet>float()</snippet></ROW><ROW><id>21172854</id><snippet>x / float(len(string)*100)</snippet></ROW><ROW><id>21172961</id><snippet>einsum</snippet></ROW><ROW><id>21172961</id><snippet>np.einsum('ij,jl-&gt;il', lowDimRepresentation, principalComponents)
</snippet></ROW><ROW><id>21172961</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = 1000
&gt;&gt;&gt; lowDimRepresentation = np.random.random((x, 100))
&gt;&gt;&gt; principalComponents = np.random.random((100, 784))
&gt;&gt;&gt; sameDimRepresentation = (lowDimRepresentation[:, np.newaxis] * principalComponents.T).sum(axis=2)
&gt;&gt;&gt; esum_same = np.einsum('ij,jl-&gt;il', lowDimRepresentation, principalComponents)
&gt;&gt;&gt; np.allclose(sameDimRepresentation, esum_same)
True
</snippet></ROW><ROW><id>21172961</id><snippet>&gt;&gt;&gt; %timeit sameDimRepresentation = (lowDimRepresentation[:, np.newaxis] * principalComponents.T).sum(axis=2)
1 loops, best of 3: 1.12 s per loop
&gt;&gt;&gt; %timeit esum_same = np.einsum('ij,jl-&gt;il', lowDimRepresentation, principalComponents)
10 loops, best of 3: 88.7 ms per loop
</snippet></ROW><ROW><id>21172961</id><snippet>x=60000</snippet></ROW><ROW><id>21172961</id><snippet>&gt;&gt;&gt; esum_same = np.einsum('ij,jl-&gt;il', lowDimRepresentation, principalComponents)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: iterator is too large
</snippet></ROW><ROW><id>21172982</id><snippet>groupby</snippet></ROW><ROW><id>21172982</id><snippet>def f(x):
    values = [v for vals in x.values for v in vals[2:]]
    return pd.Series(values,name=x.values[0][0])

res = df.groupby(["Activity", "Iteration"]).apply(f)
res = res.T.rename(columns={(t,i):t for t,i in res.index})
print df   
print res
</snippet></ROW><ROW><id>21172982</id><snippet>   Activity  Iteration  col_A  col_B  col_C  col_D
0     test1          1      4      6      5      7
1     test1          1      5      9      5      4
2     test1          1      1      8      7      9
3     test1          1      4      8      1      9
4     test1          2      4      5      5      6
5     test1          2      6      3      8      6
6     test1          2      8      1      1      2
7     test1          2      5      1      8      1
8     test2          1      6      3      9      9
9     test2          1      4      9      9      7
10    test2          1      5      0      1      3
11    test2          1      5      8      9      5
12    test2          2      4      8      3      2
13    test2          2      8      9      9      4
14    test2          2      6      1      1      8
15    test2          2      6      4      4      8
    test1  test1  test2  test2
0       4      4      6      4
1       6      5      3      8
2       5      5      9      3
3       7      6      9      2
4       5      6      4      8
5       9      3      9      9
6       5      8      9      9
7       4      6      7      4
8       1      8      5      6
9       8      1      0      1
10      7      1      1      1
11      9      2      3      8
12      4      5      5      6
13      8      1      8      4
14      1      8      9      4
15      9      1      5      8
</snippet></ROW><ROW><id>21172982</id><snippet>def g(x):
    values = [v for vals in x.values for v in vals[2:]]
    return pd.DataFrame({1: values[:N/2*len(x)], 2: values[N/2*len(x):]})

res = df.groupby(["Activity", "Iteration"]).apply(g).unstack()
r1 = res[1].T.rename(columns={(t,i):t+str(i)+"1" for t,i in res.index})
r2 = res[2].T.rename(columns={(t,i):t+str(i)+"2" for t,i in res.index})
res = pd.concat([r1,r2],axis=1).sort(axis=1)
res = res.rename(columns={t:t[:-2] for t in res.columns})

print df
print res
</snippet></ROW><ROW><id>21172982</id><snippet>   Activity  Iteration  col_A  col_B  col_C  col_D
0     test1          1      0      8      1      7
1     test1          1      2      0      5      0
2     test1          1      2      6      6      6
3     test1          1      5      0      1      4
4     test1          2      4      5      6      8
5     test1          2      8      0      1      6
6     test1          2      6      7      2      4
7     test1          2      3      2      2      3
8     test2          1      5      2      1      9
9     test2          1      8      3      5      9
10    test2          1      3      7      7      1
11    test2          1      7      4      5      1
12    test2          2      9      2      4      0
13    test2          2      3      1      8      7
14    test2          2      1      2      7      8
15    test2          2      4      9      7      0
   test1  test1  test1  test1  test2  test2  test2  test2
0      0      2      4      6      5      3      9      1
1      8      6      5      7      2      7      2      2
2      1      6      6      2      1      7      4      7
3      7      6      8      4      9      1      0      8
4      2      5      8      3      8      7      3      4
5      0      0      0      2      3      4      1      9
6      5      1      1      2      5      5      8      7
7      0      4      6      3      9      1      7      0
</snippet></ROW><ROW><id>21173298</id><snippet>grid_remove</snippet></ROW><ROW><id>21173298</id><snippet>self.button1</snippet></ROW><ROW><id>21173298</id><snippet>self.button1.grid_remove()
</snippet></ROW><ROW><id>21173298</id><snippet>from Tkinter import Tk, Button
root = Tk()
def click():
    button.grid_remove()
button = Button(text="click", command=click)
button.grid()
root.mainloop()
</snippet></ROW><ROW><id>21173298</id><snippet>OnButtonClick</snippet></ROW><ROW><id>21173298</id><snippet>self.button1</snippet></ROW><ROW><id>21173298</id><snippet>OnButtonClick</snippet></ROW><ROW><id>21173298</id><snippet>def OnButtonClick(self, button_id):
    if button_id == 1:
        self.entryVariable = Tkinter.StringVar()
        self.entry = Tkinter.Entry(self,textvariable=self.entryVariable)
        self.entry.grid(column=1,row=0,sticky='EW')
        self.entryVariable.set(u"Enter Decimal Number Here")

        self.button1.grid_remove() # Remove the button
</snippet></ROW><ROW><id>21173412</id><snippet>HttpRequest</snippet></ROW><ROW><id>21173412</id><snippet>args</snippet></ROW><ROW><id>21173412</id><snippet>request.GET.get('s3_object_name')
</snippet></ROW><ROW><id>21173412</id><snippet>s3_object_name value</snippet></ROW><ROW><id>21173412</id><snippet>HttpRequest</snippet></ROW><ROW><id>21173479</id><snippet>writerow</snippet></ROW><ROW><id>21173479</id><snippet>import csv
export=open('./images2/test.tfw', "wb")
writer=csv.writer(export, delimiter=',', quoting=csv.QUOTE_NONE)
writer.writerow(['0.06'])
writer.writerow(['0.00'])
writer.writerow(['0.00'])
writer.writerow(['-0.06'])
writer.writerow(['-10.59'])
writer.writerow(['38.49'])
export.close()
</snippet></ROW><ROW><id>21173528</id><snippet>set_xlim</snippet></ROW><ROW><id>21173528</id><snippet>set_ylim</snippet></ROW><ROW><id>21173528</id><snippet>import matplotlib.pyplot as pyp

pyp.gca().set_xlim((1,10))
pyp.gca().set_ylim((1,12))
pyp.plot([1,2],[1,2])
pyp.show()
</snippet></ROW><ROW><id>21173528</id><snippet>xlim=ylim=558</snippet></ROW><ROW><id>21173603</id><snippet>reader</snippet></ROW><ROW><id>21173603</id><snippet>CHR</snippet></ROW><ROW><id>21173603</id><snippet>reader</snippet></ROW><ROW><id>21173603</id><snippet>SNPs = {}
for r in reader:
    for n in CHR:
        if r[1]==n:
            SNPs.setdefault(n, []).append(r[2])        #append values into empty list SNP
for n in CHR:
    SNP = SNPs[n]
    # I didn't change anything below here..
    SNP = [try_int(x) for x in SNP] #convert to integers
    max_val=max(SNP)                #find the maximum value
    chr_max.append((n, max_val))    #append this maximum to a new list
</snippet></ROW><ROW><id>21173603</id><snippet>from itertools import defaultdict
SNPs = defaultdict(list)
</snippet></ROW><ROW><id>21173603</id><snippet>SNPs[n].append(r[2])
</snippet></ROW><ROW><id>21173743</id><snippet>z</snippet></ROW><ROW><id>21173743</id><snippet>from collections import defaultdict

circles = defaultdict(list):

for x, y, z in coor_input:
    circles[z].append((x, y, z))
</snippet></ROW><ROW><id>21173743</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>21173743</id><snippet>z</snippet></ROW><ROW><id>21173743</id><snippet>dict</snippet></ROW><ROW><id>21173743</id><snippet>z</snippet></ROW><ROW><id>21173743</id><snippet>z</snippet></ROW><ROW><id>21173743</id><snippet>for z, coords in circles.iteritems():
    # process circle
    # coords is a list of (x, y, z) coordinates where z is the same
</snippet></ROW><ROW><id>21173743</id><snippet>coords[1:]</snippet></ROW><ROW><id>21173743</id><snippet>z</snippet></ROW><ROW><id>21173786</id><snippet>Process</snippet></ROW><ROW><id>21173786</id><snippet>Barrier</snippet></ROW><ROW><id>21173876</id><snippet>&gt;&gt;&gt; print(chr(244).encode('utf8'))
b'\xc3\xb4'
&gt;&gt;&gt; print(chr(244).encode('latin1'))
b'\xf4'
&gt;&gt;&gt; print(chr(244).encode('cp500'))
b'\xcb'
</snippet></ROW><ROW><id>21173876</id><snippet>chr().encode()</snippet></ROW><ROW><id>21173876</id><snippet>chr()</snippet></ROW><ROW><id>21173876</id><snippet>bytes()</snippet></ROW><ROW><id>21173876</id><snippet>&gt;&gt;&gt; bytes([244])
b'\xf4'
</snippet></ROW><ROW><id>21173995</id><snippet>import sys
import cmd




message = cmd.raw_input("Enter something to encypt: ")
translated = '' 

for i in range(len(message)):
    translated = translated + message[i] 
    i = i - 1 
print(translated) 
</snippet></ROW><ROW><id>21174030</id><snippet>from mock import patch, PropertyMock

class Foo(object):
    f = {'a': 1}

new_foo = Foo()

with patch.object(Foo, 'f', new_callable=PropertyMock) as mock:
    mock.return_value = {'b': 2}
    print new_foo.f

print new_foo.f
</snippet></ROW><ROW><id>21174030</id><snippet>{'b': 2}
{'a': 1}
</snippet></ROW><ROW><id>21174496</id><snippet>ModelForm</snippet></ROW><ROW><id>21174496</id><snippet>BooleanField</snippet></ROW><ROW><id>21174624</id><snippet>object</snippet></ROW><ROW><id>21174624</id><snippet>&gt;&gt;&gt; class MyClass(object):
...   pass
... 
&gt;&gt;&gt; type(MyClass)
&lt;type 'type'&gt;
&gt;&gt;&gt; hasattr(MyClass, '__call__')
True
</snippet></ROW><ROW><id>21174672</id><snippet>spamwriter.writerow([outputz])</snippet></ROW><ROW><id>21174672</id><snippet>(key, value)</snippet></ROW><ROW><id>21174672</id><snippet>import csv
outputz = {'apples' : 'red', 'pears' : 'green', 'bananas' : 'yellow'}
with open(r'C:\test\foo.bar', 'w') as f:
    writer = csv.writer(f)
    for key, value in outputz.items(): # Iterate over the dictionary items
        writer.writerow([key, value]) # Write each pair to the csv file.
</snippet></ROW><ROW><id>21174672</id><snippet>else</snippet></ROW><ROW><id>21175097</id><snippet>cars</snippet></ROW><ROW><id>21175097</id><snippet>/</snippet></ROW><ROW><id>21175097</id><snippet>new</snippet></ROW><ROW><id>21175097</id><snippet>old</snippet></ROW><ROW><id>21175097</id><snippet>new</snippet></ROW><ROW><id>21175097</id><snippet>car</snippet></ROW><ROW><id>21175097</id><snippet>get_node_parent_info</snippet></ROW><ROW><id>21175097</id><snippet>import xml.etree.ElementTree as ET

def find_child(node, with_name):
    """Recursively find node with given name"""
    for element in list(node):
        if element.tag == with_name:
            return element
        elif list(element):
            return find_child(element, with_name)
    return None

def replace_node(from_tree, to_tree, node_name):
    """
    Replace node with given node_name in to_tree with
    the same-named node from the from_tree
    """
    # Find nodes of given name ('car' in the example) in each tree
    from_node = find_child(from_tree.getroot(), node_name)
    to_node = find_child(to_tree.getroot(), node_name)

    # Find where to substitute the from_node into the to_tree
    to_parent, to_index = get_node_parent_info(to_tree, to_node)

    # Replace to_node with from_node
    to_parent.remove(to_node)
    to_parent.insert(to_index, from_node)

def get_node_parent_info(tree, node):
    """
    Return tuple of (parent, index) where:
        parent = node's parent within tree
        index = index of node under parent
    """
    parent_map = {c:p for p in tree.iter() for c in p}
    parent = parent_map[node]
    return parent, list(parent).index(node)

from_tree = ET.ElementTree(file='sample1.xml')
to_tree = ET.ElementTree(file='sample2.xml')

replace_node(from_tree, to_tree, 'car')

# ET.dump(to_tree)
to_tree.write('output.xml')
</snippet></ROW><ROW><id>21175131</id><snippet>gevent</snippet></ROW><ROW><id>21175131</id><snippet>futures</snippet></ROW><ROW><id>21175131</id><snippet>import concurrent.futures
import requests

def get_url(url, other, args):
    # your existing requests-based code here

urls = [your, list, of, page, urls, here]

with concurrent.futures.ThreadPoolExecutor() as pool:
    pool.map(get_url, urls)
</snippet></ROW><ROW><id>21175131</id><snippet>grequests</snippet></ROW><ROW><id>21175131</id><snippet>curl</snippet></ROW><ROW><id>21175131</id><snippet>requests</snippet></ROW><ROW><id>21175174</id><snippet>In [11]: g = df1.groupby(level='Group')

In [12]: g.apply(lambda x: x &lt;= df2.loc[x.name])
Out[12]: 
              2000-01-04 2000-01-05
Group Element                      
1     A            False      False
      X            False      False
      C            False      False
      Y             True       True
      H            False      False
</snippet></ROW><ROW><id>21175591</id><snippet>...
@register.filter
def where_id(users,user_id):
    return filter(lambda u:u.pk==user_id,users)
...
</snippet></ROW><ROW><id>21175591</id><snippet>{%load my_tags %}
...
{% for user in users|where_id:10 %}
....
</snippet></ROW><ROW><id>21175736</id><snippet>Content-Type: text/html</snippet></ROW><ROW><id>21175736</id><snippet>echo GET / | nc server.host.name 80</snippet></ROW><ROW><id>21175736</id><snippet>curl -D- http://server.host.name/</snippet></ROW><ROW><id>21175982</id><snippet>InOrder_search_recursive(node.lChild)
</snippet></ROW><ROW><id>21175982</id><snippet>return</snippet></ROW><ROW><id>21175982</id><snippet>node.value == key</snippet></ROW><ROW><id>21175982</id><snippet>None</snippet></ROW><ROW><id>21175982</id><snippet>return</snippet></ROW><ROW><id>21175982</id><snippet>not None</snippet></ROW><ROW><id>21175982</id><snippet>key</snippet></ROW><ROW><id>21175982</id><snippet>TypeError</snippet></ROW><ROW><id>21175982</id><snippet>def Inorder_search_recursive(node, key):
    if not node:
        return None
    result = InOrder_search_recursive(node.lChild, key)
    if result is not None:
        return result
    if node.value==key:
        return node
    return InOrder_search_recursive(node.rChild, key)
</snippet></ROW><ROW><id>21175982</id><snippet>not None</snippet></ROW><ROW><id>21175982</id><snippet>None</snippet></ROW><ROW><id>21175982</id><snippet>None</snippet></ROW><ROW><id>21176019</id><snippet>tomcat_configuration:
  file.append:
    - name: /etc/default/tomcat7
    - text: export JAVA_HOME={{ pillar['java_home'] }}
</snippet></ROW><ROW><id>21176019</id><snippet>file.append</snippet></ROW><ROW><id>21176057</id><snippet>Matrix.applyfunc</snippet></ROW><ROW><id>21176057</id><snippet>In [6]: M = sympy.Matrix(sympy.symbols('a b c d'))

In [7]: M.applyfunc(sympy.log)
Out[7]:
‚é°log(a)‚é§
‚é¢      ‚é•
‚é¢log(b)‚é•
‚é¢      ‚é•
‚é¢log(c)‚é•
‚é¢      ‚é•
‚é£log(d)‚é¶
</snippet></ROW><ROW><id>21176057</id><snippet>np.log</snippet></ROW><ROW><id>21176057</id><snippet>sympy.log</snippet></ROW><ROW><id>21176074</id><snippet>m</snippet></ROW><ROW><id>21176074</id><snippet>[sympy.diff(sum(m*m.T), i) for i in m]
</snippet></ROW><ROW><id>21176074</id><snippet>np.sum</snippet></ROW><ROW><id>21176074</id><snippet>sum</snippet></ROW><ROW><id>21176220</id><snippet>class WikiPage(ndb.Model):
    your_id = ndb.StringProperty(required=True)
    content = ndb.TextProperty(required=True)
    history = ndb.DateTimeProperty(repeated=True)

entity = WikiPage(id='hello', your_id='hello', content=...., history=.....)
entity.put()

entity = WikiPage.get_by_id('hello')
</snippet></ROW><ROW><id>21176220</id><snippet>key = ndb.Key('WikiPage','hello')
entity = key.get()
entity = WikiPage.get_by_id(key.id())
</snippet></ROW><ROW><id>21176220</id><snippet>entity = WikiPage.query(WikiPage.your_id == 'hello').get()
</snippet></ROW><ROW><id>21176499</id><snippet>TRUE</snippet></ROW><ROW><id>21176499</id><snippet>None</snippet></ROW><ROW><id>21176499</id><snippet>import ctypes
from ctypes import wintypes

WNDENUMPROC = ctypes.WINFUNCTYPE(wintypes.BOOL,
                                 wintypes.HWND,
                                 wintypes.LPARAM)
user32 = ctypes.windll.user32
user32.EnumWindows.argtypes = [
    WNDENUMPROC,
    wintypes.LPARAM]
user32.GetWindowTextLengthW.argtypes = [
    wintypes.HWND]
user32.GetWindowTextW.argtypes = [
    wintypes.HWND,
    wintypes.LPWSTR,
    ctypes.c_int]

def worker(hwnd, lParam):
    length = user32.GetWindowTextLengthW(hwnd) + 1
    buffer = ctypes.create_unicode_buffer(length)
    user32.GetWindowTextW(hwnd, buffer, length)
    print("Buff: ", repr(buffer.value))
    return True

cb_worker = WNDENUMPROC(worker)
if not user32.EnumWindows(cb_worker, 42):
    raise ctypes.WinError()
</snippet></ROW><ROW><id>21176499</id><snippet>HWND</snippet></ROW><ROW><id>21176499</id><snippet>c_void_p</snippet></ROW><ROW><id>21176499</id><snippet>LPARAM</snippet></ROW><ROW><id>21176499</id><snippet>wintypes</snippet></ROW><ROW><id>21176499</id><snippet>if ctypes.sizeof(ctypes.c_long) == ctypes.sizeof(ctypes.c_void_p):
    WPARAM = ctypes.c_ulong
    LPARAM = ctypes.c_long
elif ctypes.sizeof(ctypes.c_longlong) == ctypes.sizeof(ctypes.c_void_p):
    WPARAM = ctypes.c_ulonglong
    LPARAM = ctypes.c_longlong
</snippet></ROW><ROW><id>21176585</id><snippet>7/1/2000</snippet></ROW><ROW><id>21176585</id><snippet>headers = next(reader)
print row[0], row[1], row[9], row[4], row[6], row[5], row[19]

for row in reader:
    if row[1]=="7/1/2000" or row[1]=="7/1/2010":
        print row[0], row[1], row[9], row[4], row[6], row[5], row[19]
</snippet></ROW><ROW><id>21176585</id><snippet>print</snippet></ROW><ROW><id>21176585</id><snippet>csv.writer</snippet></ROW><ROW><id>21176585</id><snippet>csv.reader</snippet></ROW><ROW><id>21176585</id><snippet>writer=csv.writer(outfile, dialect="excel", delimiter="\t",skipinitialspace=True)
# ‚Ä¶
writer.writerow(row[0], row[1], row[9], row[4], row[6], row[5], row[19])
</snippet></ROW><ROW><id>21176585</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>21176585</id><snippet>columns = 0, 1, 9, 4, 6, 5, 19
getter = operator.itemgetter(*columns)
# ...
writer.writerow(getter(row))
</snippet></ROW><ROW><id>21176585</id><snippet>append</snippet></ROW><ROW><id>21176585</id><snippet>list</snippet></ROW><ROW><id>21176585</id><snippet>writerow</snippet></ROW><ROW><id>21176585</id><snippet>csv.writer</snippet></ROW><ROW><id>21176585</id><snippet>headers</snippet></ROW><ROW><id>21176585</id><snippet>headers = getter(next(reader))

data = []
for row in reader:
    if row[1]=="7/1/2000" or row[1]=="7/1/2010":
        data.append(getter(row))
</snippet></ROW><ROW><id>21176585</id><snippet>data = [getter(row) for row in reader if row[1]=="7/1/2000" or row[1]=="7/1/2010"]
</snippet></ROW><ROW><id>21176585</id><snippet>DictReader</snippet></ROW><ROW><id>21176585</id><snippet>DictReader</snippet></ROW><ROW><id>21176585</id><snippet>name,email,rank
Joe,joe@example.com,7
Jim,jim@example.com,12
Jen,jane@example.com,2
</snippet></ROW><ROW><id>21176585</id><snippet>reader</snippet></ROW><ROW><id>21176585</id><snippet>reader = csv.reader(f)
headers = next(reader)
data = [row[1] for row in reader if int(row[2]) &lt; 10]
</snippet></ROW><ROW><id>21176585</id><snippet>DictReader</snippet></ROW><ROW><id>21176585</id><snippet>reader = csv.DictReader(f)
data = [row['email'] for row in reader if int(row['rank']) &lt; 10]
</snippet></ROW><ROW><id>21176991</id><snippet>import networkx as nx
G = nx.Graph([('A','B'),('C','D'),('B','C'),('D','E')])
path = nx.shortest_path(G, 'A', 'E')
</snippet></ROW><ROW><id>21176991</id><snippet>zip(path, path[1:])
[('A', 'B'), ('B', 'C'), ('C', 'D'), ('D', 'E')]
</snippet></ROW><ROW><id>21177129</id><snippet>_storage</snippet></ROW><ROW><id>21177129</id><snippet>deepcopy</snippet></ROW><ROW><id>21177129</id><snippet>def __init__(self):
    self._storage = []
</snippet></ROW><ROW><id>21177260</id><snippet>def method_of(instance):
    def method_adder(function):
        setattr(instance, function.__name__, function)
        return function
    return method_adder

@method_of(a)
def new_func(arg1, arg2):
    stuff()
</snippet></ROW><ROW><id>21177260</id><snippet>self</snippet></ROW><ROW><id>21177260</id><snippet>def method_of(instance):
    def method_adder(function):
        setattr(instance, function.__name__, function.__get__(instance))
        return function
    return method_adder

@method_of(a)
def new_func(self, arg1, arg2):
    stuff()
</snippet></ROW><ROW><id>21177365</id><snippet>source</snippet></ROW><ROW><id>21177365</id><snippet>destination</snippet></ROW><ROW><id>21177365</id><snippet>def replace(source, destination):
    local_source = src_tree.find(source)
    local_destination = dest_tree.find(destination)
    local_destination.extend(local_source)
</snippet></ROW><ROW><id>21177709</id><snippet>df.index
</snippet></ROW><ROW><id>21177709</id><snippet>In [13]: index = pd.DatetimeIndex(start='2012', end='2013', freq='1D')

In [14]: index
Out[14]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2012-01-17 00:00:00, ..., 2013-01-17 00:00:00]
Length: 367, Freq: D, Timezone: None


In [15]: df = pd.DataFrame(np.random.randn(len(index),1), index=index)

In [16]: df
Out[16]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
DatetimeIndex: 367 entries, 2012-01-17 00:00:00 to 2013-01-17 00:00:00
Freq: D
Data columns (total 1 columns):
0    367  non-null values
dtypes: float64(1)

In [17]: df.index
Out[17]: 
&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2012-01-17 00:00:00, ..., 2013-01-17 00:00:00]
Length: 367, Freq: D, Timezone: None
</snippet></ROW><ROW><id>21178498</id><snippet>Node</snippet></ROW><ROW><id>21178498</id><snippet>ref={}</snippet></ROW><ROW><id>21178498</id><snippet>{}</snippet></ROW><ROW><id>21178498</id><snippet>dict</snippet></ROW><ROW><id>21178498</id><snippet>Node()</snippet></ROW><ROW><id>21178498</id><snippet>ref</snippet></ROW><ROW><id>21178498</id><snippet>class Node:
    #                      vvvv
    def __init__(self, ref=None, num=0):
        if ref is None: # &lt;--
            ref = {} # &lt;--
        self.ref = ref
        self.num = num

def makeTrie(node,s):
    node.ref.setdefault(s[0],Node())
    if len(s) == 1:
        node.ref[s[0]].num += 1
        return
    makeTrie(node.ref[s[0]],s[1:])

trie = Node()
makeTrie(trie,'abcd')

try:
    print(trie.ref['d'].num)
except KeyError:
    print('KeyError occurred!')
print(trie.ref['a'].ref['b'].ref['c'].ref['d'].num)
</snippet></ROW><ROW><id>21178498</id><snippet>KeyError occurred!
1
</snippet></ROW><ROW><id>21178578</id><snippet>import re
print (re.IGNORECASE)
print (re.LOCALE)
print (re.MULTILINE)
print (re.DOTALL)
print (re.UNICODE)
print (re.VERBOSE)
print (re.DEBUG)
print (re.A)
</snippet></ROW><ROW><id>21178578</id><snippet>2
4
8
16
32
64
128
256
</snippet></ROW><ROW><id>21178578</id><snippet>docs</snippet></ROW><ROW><id>21178578</id><snippet>re.UNICODE</snippet></ROW><ROW><id>21178578</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>21178578</id><snippet>re.UNICODE</snippet></ROW><ROW><id>21178578</id><snippet>34</snippet></ROW><ROW><id>21178664</id><snippet>.*</snippet></ROW><ROW><id>21178664</id><snippet>len = numpy.sum(numpy.sqrt(numpy.sum(v[0] * v[0], axis=0))) / N 
</snippet></ROW><ROW><id>21178664</id><snippet>multiply</snippet></ROW><ROW><id>21178693</id><snippet>PyObject</snippet></ROW><ROW><id>21178704</id><snippet>re.I</snippet></ROW><ROW><id>21178704</id><snippet>count</snippet></ROW><ROW><id>21178704</id><snippet>count</snippet></ROW><ROW><id>21178704</id><snippet>flags</snippet></ROW><ROW><id>21178704</id><snippet>re.sub</snippet></ROW><ROW><id>21178704</id><snippet>&gt;&gt;&gt; string = 'a b c d e f g'
&gt;&gt;&gt; re.sub(r'\b\s+\b', '.', string, flags=re.I)
'a.b.c.d.e.f.g'
</snippet></ROW><ROW><id>21178704</id><snippet>&gt;&gt;&gt; string = 'a b c d e f g'
&gt;&gt;&gt; my_re = re.compile(r'\b\s+\b', re.I)
&gt;&gt;&gt; re.sub(my_re, '.', string)
'a.b.c.d.e.f.g'
</snippet></ROW><ROW><id>21178818</id><snippet>starmap</snippet></ROW><ROW><id>21178818</id><snippet>list(map(lambda t: foo(*t), listoftuples))
</snippet></ROW><ROW><id>21178818</id><snippet>list(starmap(foo, listoftuples))
</snippet></ROW><ROW><id>21178818</id><snippet>def unpackInto(func): return lambda t: func(*t)
list(map(unpackInto(lambda a, b, c: a*b%c), listoftuples))
</snippet></ROW><ROW><id>21178818</id><snippet>list(starmap(lambda a, b, c: a*b%c, listoftuples))
</snippet></ROW><ROW><id>21178818</id><snippet>list(map(lambda (a, b, c): a*b%c, listoftuples))
</snippet></ROW><ROW><id>21178818</id><snippet>[a*b%c for a, b, c in listoftuples]
</snippet></ROW><ROW><id>21178832</id><snippet>x</snippet></ROW><ROW><id>21178832</id><snippet>y</snippet></ROW><ROW><id>21178832</id><snippet>x = map(float, x)
y = map(float, y)
</snippet></ROW><ROW><id>21178858</id><snippet># create snail element
snail = dom.createElement('snail')
snail_text = dom.createTextNode('2')
snail.appendChild(snail_text)

# add it in the right place
profile = dom.getElementsByTagName('profile')[0]
pineapples = dom.getElementsByTagName('pineapples')[0]
profile.insertBefore(snail, pineapples)
</snippet></ROW><ROW><id>21178858</id><snippet>&lt;?xml version="1.0" ?&gt;&lt;profile&gt;
    &lt;dog&gt;1&lt;/dog&gt;
    &lt;halfdog&gt;0&lt;/halfdog&gt;
    &lt;cat&gt;545&lt;/cat&gt;
    &lt;lions&gt;0&lt;/lions&gt;
    &lt;bird&gt;23&lt;/bird&gt;
    &lt;dino&gt;0&lt;/dino&gt;
    &lt;snail&gt;2&lt;/snail&gt;&lt;pineapples&gt;2&lt;/pineapples&gt;
    &lt;people&gt;0&lt;/people&gt;
&lt;/profile&gt;
</snippet></ROW><ROW><id>21179557</id><snippet>numpy.dot</snippet></ROW><ROW><id>21179557</id><snippet>In [7]: a=np.array([1,2,3])

In [8]: b=np.array([4,5,6,])

In [9]: a.dot(b)
Out[9]: 32
</snippet></ROW><ROW><id>21179557</id><snippet>numpy.matrix</snippet></ROW><ROW><id>21179557</id><snippet>In [239]: ma=matrix([1,2,3])

In [240]: ma
Out[240]: matrix([[1, 2, 3]])

In [241]: mb=matrix([4,5,6])

In [242]: mb.T
Out[242]: 
matrix([[4],
        [5],
        [6]])

In [243]: ma*mb.T
Out[243]: matrix([[32]])
</snippet></ROW><ROW><id>21179557</id><snippet>a.shape</snippet></ROW><ROW><id>21179557</id><snippet>.T</snippet></ROW><ROW><id>21179557</id><snippet>ValueError: objects are not aligned</snippet></ROW><ROW><id>21179557</id><snippet>In [30]: a
Out[30]: array([[1, 2, 3]])
In [31]: b
Out[31]: array([[4, 5, 6]])
In [32]: a.dot(b.T)
Out[32]: array([[32]])
In [33]: a.dot(b)
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-33-9a1f5761fa9d&gt; in &lt;module&gt;()
----&gt; 1 a.dot(b)
ValueError: objects are not aligned
</snippet></ROW><ROW><id>21179669</id><snippet>self.property</snippet></ROW><ROW><id>21179669</id><snippet>&gt;&gt;&gt; class X:
    def __init__(self):
        self.name = "Me"
    def set_name(self, other):
        self.name = other
    def get_name(self):
        return self.name + "ABCDE"
    dynamicName = property(get_name, set_name)


&gt;&gt;&gt; inst = X()
&gt;&gt;&gt; inst.dynamicName
'MeABCDE'
&gt;&gt;&gt; inst.dynamicName = "You"
&gt;&gt;&gt; inst.dynamicName
'YouABCDE'
</snippet></ROW><ROW><id>21179669</id><snippet>dynamicName</snippet></ROW><ROW><id>21179669</id><snippet>@property</snippet></ROW><ROW><id>21179669</id><snippet>&gt;&gt;&gt; class Y:
    def __init__(self):
        self.name = "Me"
    @property
    def dynamicName(self):
        #This would be the getter function
        return self.name + "ABCDE"
    @dynamicName.setter
    def set_name(self):
        self.name = other


&gt;&gt;&gt; inst = Y()
&gt;&gt;&gt; inst.dynamicName
'MeABCDE'
</snippet></ROW><ROW><id>21179669</id><snippet>dynamicName</snippet></ROW><ROW><id>21179669</id><snippet>property</snippet></ROW><ROW><id>21179669</id><snippet>&gt;&gt;&gt; type(inst.dynamicName)
&lt;class 'str'&gt;
</snippet></ROW><ROW><id>21179819</id><snippet>convert_objects</snippet></ROW><ROW><id>21179819</id><snippet>import pandas as pd

x = [1.0, 2.0, "a", 3.0]
y = ["b", 5.0, 3.0, 7.0]

df = pd.DataFrame({"x":x, "y":y})
df.convert_objects(convert_numeric=True).dropna()
</snippet></ROW><ROW><id>21179819</id><snippet>applymap</snippet></ROW><ROW><id>21179819</id><snippet>mask = df.applymap(lambda x:isinstance(x, float)).all(1)
df[mask]
</snippet></ROW><ROW><id>21179819</id><snippet>import pandas as pd
import io

txt = """DATE,OPTION,SELL,BUY
2014-01-14 11:01:02.168146,Asx 200 [232],Asx 200 [112],47.7
2014-01-14 11:01:02.868105,Asx 200 [232],Asx 200 [112],47.8
2014-01-14 11:01:03.566983,Asx 200 [232],40.5,49.1
2014-01-14 11:01:04.279423,Asx 200 [232],40.5,49.0"""

df = pd.read_csv(io.BytesIO(txt))

df[["SELL","BUY"]] = df[["SELL","BUY"]].convert_objects(convert_numeric=True)
df.dropna()
</snippet></ROW><ROW><id>21179847</id><snippet>import pygtk
pygtk.require('2.0')
import gtk
</snippet></ROW><ROW><id>21179847</id><snippet>pygtk</snippet></ROW><ROW><id>21179847</id><snippet>gi.introspection</snippet></ROW><ROW><id>21179847</id><snippet>gtk2</snippet></ROW><ROW><id>21179847</id><snippet>gtk3</snippet></ROW><ROW><id>21179929</id><snippet>import re

from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions as EC
from selenium import webdriver
from selenium.webdriver.support.wait import WebDriverWait


browser = webdriver.Firefox()
browser.get('http://www.spokeo.com/search?q=Joe+Henderson,+Phoenix,+AZ&amp;sao7=t104#:18643819031')

WebDriverWait(browser, 10).until(EC.presence_of_element_located((By.ID, "profile_details_section_header")))
content = browser.page_source

m_obj = re.search(r"(\(\d{3}\)\s\d{3}-\*{4})", content)
if m_obj:    
    print m_obj.group(0)

browser.quit()
</snippet></ROW><ROW><id>21179929</id><snippet>time.sleep()</snippet></ROW><ROW><id>21179929</id><snippet>browser.implicitly_wait()</snippet></ROW><ROW><id>21179929</id><snippet>(623) 337-****</snippet></ROW><ROW><id>21180143</id><snippet>gi.introspection</snippet></ROW><ROW><id>21180143</id><snippet>pygtk</snippet></ROW><ROW><id>21180143</id><snippet>gtk+-2.0</snippet></ROW><ROW><id>21180143</id><snippet>pygtk3</snippet></ROW><ROW><id>21180143</id><snippet>GtkGrid</snippet></ROW><ROW><id>21180143</id><snippet>gtk+-3.0</snippet></ROW><ROW><id>21180143</id><snippet>gi.introspection</snippet></ROW><ROW><id>21180143</id><snippet>Python 3.x.y</snippet></ROW><ROW><id>21180143</id><snippet>pygtk2</snippet></ROW><ROW><id>21180143</id><snippet>Python 2.7.x</snippet></ROW><ROW><id>21180143</id><snippet>Python 3.3</snippet></ROW><ROW><id>21180143</id><snippet>gtk2</snippet></ROW><ROW><id>21180143</id><snippet>GtkGrid</snippet></ROW><ROW><id>21180143</id><snippet>GtkTable</snippet></ROW><ROW><id>21180456</id><snippet>import</snippet></ROW><ROW><id>21180456</id><snippet>a = 1
b = 2
</snippet></ROW><ROW><id>21180456</id><snippet>&gt;&gt;&gt; import foo # or, from foo import *
&gt;&gt;&gt; foo.a
1
&gt;&gt;&gt; foo.b
2
&gt;&gt;&gt; foo.a + foo.b
3
</snippet></ROW><ROW><id>21180736</id><snippet>posts4 = db4.posts
post_id4 = posts4.update({'id' : usr.get('id')}, dict4, upsert = True)
</snippet></ROW><ROW><id>21180960</id><snippet>str</snippet></ROW><ROW><id>21180960</id><snippet>split</snippet></ROW><ROW><id>21180960</id><snippet>for word in words.split():
    print(word)
</snippet></ROW><ROW><id>21181418</id><snippet>.string</snippet></ROW><ROW><id>21181418</id><snippet>uni_name = soup.title.string
</snippet></ROW><ROW><id>21181418</id><snippet>|</snippet></ROW><ROW><id>21181418</id><snippet>uni_name = soup.title.string.partition('|')[0].strip()
</snippet></ROW><ROW><id>21181418</id><snippet>str.partition()</snippet></ROW><ROW><id>21181418</id><snippet>&gt;&gt;&gt; soup.title
&lt;title&gt;College of Agriculture &amp; Life Sciences | The University of Arizona, Tucson, Arizona&lt;/title&gt;
&gt;&gt;&gt; soup.title.string
u'College of Agriculture &amp; Life Sciences | The University of Arizona, Tucson, Arizona'
&gt;&gt;&gt; soup.title.string.partition('|')[0].strip()
u'College of Agriculture &amp; Life Sciences'
</snippet></ROW><ROW><id>21181554</id><snippet>file.seek(0)
</snippet></ROW><ROW><id>21182212</id><snippet>def _recursive_extraction(node):
    for subnode in node.get_subnodes():
        yield subnode

        yield from _recursive_extraction(subnode)
</snippet></ROW><ROW><id>21182212</id><snippet>list()</snippet></ROW><ROW><id>21182445</id><snippet>Link = Link1.css('span[class=title] a::attr(href)').extract()[0]
</snippet></ROW><ROW><id>21182445</id><snippet>span</snippet></ROW><ROW><id>21182445</id><snippet>Link = Link1.css('span.title a::attr(href').extract()[0]
</snippet></ROW><ROW><id>21182445</id><snippet>::text</snippet></ROW><ROW><id>21182445</id><snippet>::attr(attributename)</snippet></ROW><ROW><id>21182894</id><snippet>[V(:,1) V(:,2) -V(:,3)]</snippet></ROW><ROW><id>21182894</id><snippet>&gt;&gt; [V(:,1) V(:,2) -V(:,3)]

ans =

    -1    -1     1
    -2    -2     2
    -3    -3     3
</snippet></ROW><ROW><id>21182894</id><snippet>In [90]: V = np.array([[-1, -1, -1], [-2, -2, -2], [-3, -3, -3]])
    ...: U = np.array([[1, 2, 3], [2, 3, 4], [3, 4, 5]])

In [91]: V[:, 2]*=-1

In [92]: Ot = U.dot(V.T)

In [93]: Ot
Out[93]: 
array([[ 0,  0,  0],
       [-1, -2, -3],
       [-2, -4, -6]])
</snippet></ROW><ROW><id>21183406</id><snippet>start_urls = ['mywebsite/?page=1']

def parse(self, response):
    sel = Selector(response)
    DateDifference= sel.xpath('xpath for date difference').extract()[0]

    i = response.meta['index'] if 'index' in response.meta else 1

    if DateDifference.days &lt; 8:
        yield Request(Link, meta={'date': Date}, callback = self.crawl)
        i += 1
        yield Request('mywebsite/?page='+str(i), meta={'index':i}, callback=self.parse)
</snippet></ROW><ROW><id>21183406</id><snippet>parse</snippet></ROW><ROW><id>21183406</id><snippet>response.meta['index']</snippet></ROW><ROW><id>21183406</id><snippet>response.meta['index']</snippet></ROW><ROW><id>21183570</id><snippet>y = vectorizer.fit_transform(test_corpus)
</snippet></ROW><ROW><id>21183570</id><snippet>transform</snippet></ROW><ROW><id>21183570</id><snippet>fit_transform</snippet></ROW><ROW><id>21183773</id><snippet>wildcard = "Python source(*.py)|*.py|"\"Compiled Python(*.pyc)|*.pyc|"\"All files(*.*)|*.*"
</snippet></ROW><ROW><id>21183773</id><snippet>wildcard = "Python source(*.py)|*.py|Compiled Python(*.pyc)|*.pyc|All files(*.*)|*.*"
</snippet></ROW><ROW><id>21183842</id><snippet>dumpdata</snippet></ROW><ROW><id>21183842</id><snippet>
python manage.py dumpdata --format=yaml &gt; /path/to/dump_file.yaml
</snippet></ROW><ROW><id>21184177</id><snippet>CGIHTTPServer.py</snippet></ROW><ROW><id>21184177</id><snippet>CGIHTTPServer.pyc</snippet></ROW><ROW><id>21184177</id><snippet>CGIHTTPServer</snippet></ROW><ROW><id>21184377</id><snippet>__builtin__</snippet></ROW><ROW><id>21184377</id><snippet>import __builtin__

vtype = getattr(__builtin__, subset[i])
</snippet></ROW><ROW><id>21184377</id><snippet>__builtins__</snippet></ROW><ROW><id>21184377</id><snippet>s</snippet></ROW><ROW><id>21184377</id><snippet>__builtin__</snippet></ROW><ROW><id>21184377</id><snippet>__builtins__</snippet></ROW><ROW><id>21184377</id><snippet>'s'</snippet></ROW><ROW><id>21184377</id><snippet>__builtins__</snippet></ROW><ROW><id>21184377</id><snippet>__dict__</snippet></ROW><ROW><id>21184496</id><snippet>with open('triangle.txt') as infh:
    D = [[int(w) for w in line.split()] for line in infh]
</snippet></ROW><ROW><id>21184496</id><snippet>map()</snippet></ROW><ROW><id>21184496</id><snippet>with open('triangle.txt') as infh:
    D = [map(int, line.split()) for line in infh]
</snippet></ROW><ROW><id>21184496</id><snippet>map()</snippet></ROW><ROW><id>21184618</id><snippet>reindex()</snippet></ROW><ROW><id>21184618</id><snippet>import pandas as pd

df_pivot = df.pivot(index='tenor', columns='date', values='value')

DayCounts = {"D":1, "M":365.0/12, "Y":365}
index = sorted(df_pivot.index, key=lambda v:int(v[:-1])*DayCounts[v[-1]])

df_pivot.reindex(index)
</snippet></ROW><ROW><id>21184618</id><snippet>date  2014-01-01  2014-01-02  2014-01-03
1D      0.517125    0.517874    0.518552
1M      0.517500    0.518100    0.518600
2M      0.518159    0.518451    0.518536
3M      0.518700    0.518800    0.518600
4M      0.519120    0.519113    0.518865
5M      0.519490    0.519418    0.519160
6M      0.519700    0.519600    0.519300
9M      0.519511    0.519377    0.519024
1Y      0.519800    0.519700    0.519300
18M     0.521228    0.521406    0.520882
2Y      0.523097    0.523405    0.522800
3Y      0.525054    0.525254    0.524647
4Y      0.527055    0.527151    0.526752
5Y      0.529054    0.529256    0.528957
6Y      0.531099    0.531543    0.531065
7Y      0.532852    0.533457    0.532856
8Y      0.534207    0.534802    0.534325
9Y      0.535314    0.535847    0.535558
</snippet></ROW><ROW><id>21184701</id><snippet>while</snippet></ROW><ROW><id>21184701</id><snippet>runningTotal</snippet></ROW><ROW><id>21184701</id><snippet>change</snippet></ROW><ROW><id>21184701</id><snippet>while</snippet></ROW><ROW><id>21184701</id><snippet>COINS = (("Dollars", 1.), 
         ("Quarters", .25), 
         ("Dimes",    .10), 
         ("Nickels",  .05), 
         ("Pennies",  .01))

def changeCalc(cost, pmt):
    change = pmt - cost
    print("Total Change: %.2f" % change)
    if (pmt - cost) &lt; 0:
        print("The customer needs to pay %.2f more." % abs(change))
    else:
        runningTotal = 0
        for (name, value) in COINS:
            number = int((change - runningTotal) / value)
            if number &gt; 0:
                print("Number of %s: %d" % (name, number))
                runningTotal += number * value
        print runningTotal, change, (runningTotal - change)
</snippet></ROW><ROW><id>21184712</id><snippet>from django.core import management
from YourProject import settings
management.setup_environ(settings)

from YourApp.models import YourModel
</snippet></ROW><ROW><id>21184712</id><snippet>import os

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "YourProject.settings")

from YourApp.models import YourModel
</snippet></ROW><ROW><id>21184914</id><snippet>import numpy as np
from numpy.random import rand, randint 

cm = rand(50, 100)
cm[randint(0, 50, 4000), randint(0, 100, 4000)] = np.nan

temp1 = max(value for (x, y), value in np.ndenumerate(cm) if x * y &lt; 100 and (x, y) != (0, 0) and not np.isnan(value))

x, y = np.indices(cm.shape)
mask = (x * y &lt; 100) &amp; (x + y != 0) &amp; (~np.isnan(cm))
temp2 = np.max(cm[mask])

assert temp1 == temp2
</snippet></ROW><ROW><id>21184914</id><snippet>max(x+y * value)</snippet></ROW><ROW><id>21184914</id><snippet>np.max((x + y * cm)[mask])
</snippet></ROW><ROW><id>21184914</id><snippet>np.max(x[mask] + y[mask] * cm[mask])
</snippet></ROW><ROW><id>21185012</id><snippet>propertyDict = {k: v for k, v in propertyDict.iteritems() if v}
</snippet></ROW><ROW><id>21185012</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>21185012</id><snippet>from collections import defaultdict

propertyDict = defaultdict(list)
properties = ('required', 'as_banner', 'min', 'chart_layout', 'client_name',
              'filter_text', 'sort_order', 'chart_type', 'chart_color',
              'position', 'order')

for i, subaxis in enumerate(table.Axes['Side'].SubAxes):
    nField = shatter_sae(subaxis.Specification)['varName']
    field = mdd.Fields[nField]
    for prop in properties:
        value = field.Properties.Item[prop]
        if value:
            propertyDict[prop].append(value)

# optional, turn `defaultdict` back into a `dict` object. This step is really
# not needed unless you need the `defaultdict.__missing__` behaviour to cease for
# later code.
# propertyDict = dict(propertyDict)
</snippet></ROW><ROW><id>21185357</id><snippet>import nltk
from nltk.collocations import *
bigram_measures = nltk.collocations.BigramAssocMeasures()
trigram_measures = nltk.collocations.TrigramAssocMeasures()

# Ngrams with 'creature' as a member
creature_filter = lambda *w: 'creature' not in w


## Bigrams
finder = BigramCollocationFinder.from_words(
   nltk.corpus.genesis.words('english-web.txt'))
# only bigrams that appear 3+ times
finder.apply_freq_filter(3)
# only bigrams that contain 'creature'
finder.apply_ngram_filter(creature_filter)
# return the 10 n-grams with the highest PMI
print finder.nbest(bigram_measures.likelihood_ratio, 10)


## Trigrams
finder = TrigramCollocationFinder.from_words(
   nltk.corpus.genesis.words('english-web.txt'))
# only trigrams that appear 3+ times
finder.apply_freq_filter(3)
# only trigrams that contain 'creature'
finder.apply_ngram_filter(creature_filter)
# return the 10 n-grams with the highest PMI
print finder.nbest(trigram_measures.likelihood_ratio, 10)
</snippet></ROW><ROW><id>21185567</id><snippet>tick_params()</snippet></ROW><ROW><id>21185567</id><snippet>cax.tick_params(labelsize=20)
</snippet></ROW><ROW><id>21185708</id><snippet>browser.find_elements_by_xpath('//input[@value="Download"]')[2].click()
</snippet></ROW><ROW><id>21185826</id><snippet>Form.clean()</snippet></ROW><ROW><id>21186255</id><snippet>sciscipy</snippet></ROW><ROW><id>21186255</id><snippet>from scilab import Scilab
sci = Scilab()
x = sci.rand(20, 20)
y = x*x.transpose()
y_inv = sci.inv(y)
</snippet></ROW><ROW><id>21186370</id><snippet>urlparse.urlsplit()</snippet></ROW><ROW><id>21186370</id><snippet>.netloc</snippet></ROW><ROW><id>21186370</id><snippet>:</snippet></ROW><ROW><id>21186370</id><snippet>@</snippet></ROW><ROW><id>21186370</id><snippet>import urlparse

def starPassword(route):
    parsed = urlparse.urlsplit(route)
    if '@' not in parsed.netloc:
        return route

    userinfo, _, location = parsed.netloc.partition('@')
    username, _, password = userinfo.partition(':')
    if not password:
        return route

    userinfo = ':'.join([username, '*****'])
    netloc = '@'.join([userinfo, location])
    parsed = parsed._replace(netloc=netloc)
    return urlparse.urlunsplit(parsed)
</snippet></ROW><ROW><id>21186370</id><snippet>&gt;&gt;&gt; starPassword('smtp://foobar%40example.com:abc@smtp.example.com:465')
'smtp://foobar%40example.com:*****@smtp.example.com:465'
&gt;&gt;&gt; starPassword('smtp://foobar:abc@smtp.example.com:25')
'smtp://foobar:*****@smtp.example.com:25'
&gt;&gt;&gt; starPassword('smtp://smtp.example.com:1234')
'smtp://smtp.example.com:1234'
&gt;&gt;&gt; starPassword('smtp://foo@smtp.example.com:42')
'smtp://foo@smtp.example.com:42'
</snippet></ROW><ROW><id>21186404</id><snippet>drop_duplicates()</snippet></ROW><ROW><id>21186404</id><snippet>concat()</snippet></ROW><ROW><id>21186404</id><snippet>part1 = pd.DataFrame({'id'    :[100,200,300,400,500], 
                   'amount': np.arange(5)
                    })

part2 = pd.DataFrame({'id'    :[700,100,800,500,300], 
                   'amount': np.random.randn(5)
                    })

concatenated = pd.concat([part1, part2], axis=0)
print concatenated.drop_duplicates(cols="id")
</snippet></ROW><ROW><id>21186465</id><snippet>username = selenium.find_element_by_id("username")
password = selenium.find_element_by_id("password")

username.send_keys("YourUsername")
password.send_keys("Pa55worD")

selenium.find_element_by_name("submit").click()
</snippet></ROW><ROW><id>21186465</id><snippet>find_element_by_name('Username')</snippet></ROW><ROW><id>21186465</id><snippet>Username</snippet></ROW><ROW><id>21186465</id><snippet>Select()</snippet></ROW><ROW><id>21186662</id><snippet>kek.html</snippet></ROW><ROW><id>21186662</id><snippet>{% include %}</snippet></ROW><ROW><id>21186662</id><snippet>&lt;section id='main_page'&gt;
    &lt;div id="main_div"&gt;
        {% include 'kek.html' %}
    &lt;/div&gt;
&lt;/section&gt;
</snippet></ROW><ROW><id>21186662</id><snippet>{% include template_to_include %}
</snippet></ROW><ROW><id>21186662</id><snippet>return render_to_response(
        'index.html', {'template_to_include': 'kek.html'},
)
</snippet></ROW><ROW><id>21186791</id><snippet>cumsum</snippet></ROW><ROW><id>21186791</id><snippet>&gt;&gt;&gt; df['dummy'] = df.groupby('group')['dummy'].transform(np.cumsum)
&gt;&gt;&gt; df.ix[df['dummy']!=0, 'dummy'] = 1
&gt;&gt;&gt; df
    dummy group
0       0    A1
1       0    A1
2       0    A1
3       1    A1
4       1    A1
5       1    A1
6       0    B2
7       0    B1
8       0    B2
9       0    B2
10      0    B2
11      0    B2

[12 rows x 2 columns]
</snippet></ROW><ROW><id>21186812</id><snippet>CORS_ORIGIN_WHITELIST</snippet></ROW><ROW><id>21186987</id><snippet># settings.py
DOWNLOAD_HANDLERS = {
    'http': 'scrapy.core.downloader.handlers.http10.HTTP10DownloadHandler',
    'https': 'scrapy.core.downloader.handlers.http10.HTTP10DownloadHandler',
}
</snippet></ROW><ROW><id>21187027</id><snippet>storelines</snippet></ROW><ROW><id>21187027</id><snippet>storebinary</snippet></ROW><ROW><id>21187027</id><snippet>def upload_file(self, file_from, file_to):
    if file_from.lower().endswith(('.txt', '.csv')):
        with open(file_from, 'r') as f:
            self.connection_id.storelines('STOR {}'.format(file_to), f)
    else:
        with open(file_from, 'rb') as f:
            self.connection_id.storebinary('STOR {}'.format(file_to), f)
</snippet></ROW><ROW><id>21187027</id><snippet>str.endswith</snippet></ROW><ROW><id>21187027</id><snippet>&gt;&gt;&gt; 'a.csv'.endswith(('.txt', '.csv'))
True
&gt;&gt;&gt; 'a.txt'.endswith(('.txt', '.csv'))
True
&gt;&gt;&gt; 'a.bin'.endswith(('.txt', '.csv'))
False
</snippet></ROW><ROW><id>21187027</id><snippet>FTP.login(self.connection_id, ...)</snippet></ROW><ROW><id>21187027</id><snippet>self.connection_id.login(...)</snippet></ROW><ROW><id>21187027</id><snippet>&gt;&gt;&gt; s = "STRING"
&gt;&gt;&gt; str.lower(s) # unbound method
'string'
&gt;&gt;&gt; s.lower()    # bound method
'string'
</snippet></ROW><ROW><id>21187080</id><snippet>import ctypes

lib = ctypes.CDLL(r'C:\Users\toto\FIProtocol.dll')
CommOpen = getattr(lib, "?CommOpen@CFIPcmd@@QAEJEJ@Z")
CommOpen.argtypes = [c_byte, c_long]
CommOpen.restype = c_long
</snippet></ROW><ROW><id>21187080</id><snippet>l = CommOpen(5 ,115200)
</snippet></ROW><ROW><id>21187080</id><snippet>CDLL</snippet></ROW><ROW><id>21187080</id><snippet>WinDLL</snippet></ROW><ROW><id>21187080</id><snippet>cdecl</snippet></ROW><ROW><id>21187080</id><snippet>getattr</snippet></ROW><ROW><id>21187080</id><snippet>argtypes</snippet></ROW><ROW><id>21187080</id><snippet>restype</snippet></ROW><ROW><id>21187080</id><snippet>ctypes</snippet></ROW><ROW><id>21187080</id><snippet>public: long __thiscall CFIPcmd::CommOpen(unsigned char,long)
</snippet></ROW><ROW><id>21187080</id><snippet>ctypes</snippet></ROW><ROW><id>21187207</id><snippet>random.shuffle()</snippet></ROW><ROW><id>21187207</id><snippet>lst = list(yielding(x))
random.shuffle(lst)
for i in lst:
    print i
</snippet></ROW><ROW><id>21187207</id><snippet>sorted()</snippet></ROW><ROW><id>21187207</id><snippet>random.random()</snippet></ROW><ROW><id>21187207</id><snippet>for i in sorted(yielding(x), key=lambda k: random.random()):
    print i
</snippet></ROW><ROW><id>21187207</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; x = [1,2,3,4,5,6,7,8,9]
&gt;&gt;&gt; sorted(iter(x), key=lambda k: random.random())
[9, 7, 3, 2, 5, 4, 6, 1, 8]
</snippet></ROW><ROW><id>21187545</id><snippet>test_models.py</snippet></ROW><ROW><id>21187545</id><snippet>Meta</snippet></ROW><ROW><id>21187545</id><snippet>class MyModel(Model):

    ...

    class Meta:
        app_label = 'app'
</snippet></ROW><ROW><id>21187793</id><snippet>import pandas as pd
df = pd.DataFrame({ 'Time'  : [1300, 1400, 1500, 1600, 1700, 1800],
                    'Level' : [ 200, 1300, 1500,  200, 1500, 1400],
                    'Data'  : range(6) })
df['Batch'] = (df['Level'] &lt; 1000).cumsum()
print(df)
</snippet></ROW><ROW><id>21187793</id><snippet>   Data  Level  Time  Batch
0     0    200  1300      1
1     1   1300  1400      1
2     2   1500  1500      1
3     3    200  1600      2
4     4   1500  1700      2
5     5   1400  1800      2
</snippet></ROW><ROW><id>21187793</id><snippet>NaN</snippet></ROW><ROW><id>21187793</id><snippet>import pandas as pd
import numpy as np
df = pd.DataFrame({ 'Time'  : [1300, 1400, 1500, 1600, 1700, 1800],
                    'Level' : [ 200, 1300, 1500,  200, 1500, 1400],
                    'Data'  : range(6) })

mask = df['Level'] &lt; 1000
df['Batch'] = mask.cumsum()
df.ix[mask, 'Batch'] = np.nan
print(df)
</snippet></ROW><ROW><id>21187793</id><snippet>   Data  Level  Time  Batch
0     0    200  1300    NaN
1     1   1300  1400      1
2     2   1500  1500      1
3     3    200  1600    NaN
4     4   1500  1700      2
5     5   1400  1800      2
</snippet></ROW><ROW><id>21187793</id><snippet>cumsum</snippet></ROW><ROW><id>21187793</id><snippet>int</snippet></ROW><ROW><id>21187793</id><snippet>cumsum</snippet></ROW><ROW><id>21187793</id><snippet>mask = (df['Level'] &lt; 1000)
df['Batch'] = mask.astype('int').cumsum()
df.ix[mask, 'Batch'] = np.nan
</snippet></ROW><ROW><id>21188262</id><snippet>incomplete_df['reason'] = "Reason is " + incomplete_df.T.idxmin()
</snippet></ROW><ROW><id>21188507</id><snippet>FILE_TO = ftp_obj.change_directory(dir)
</snippet></ROW><ROW><id>21188507</id><snippet>dir</snippet></ROW><ROW><id>21188507</id><snippet>dir</snippet></ROW><ROW><id>21188508</id><snippet>~/.ipython/profile_*</snippet></ROW><ROW><id>21188508</id><snippet>profile_default</snippet></ROW><ROW><id>21188508</id><snippet>ipython_notebook_config.py</snippet></ROW><ROW><id>21188508</id><snippet>ipython_config.py</snippet></ROW><ROW><id>21188508</id><snippet>ipython_notebook_config.py</snippet></ROW><ROW><id>21188508</id><snippet>c = get_config()
# ... Any other configurables you want to set
c.IPKernelApp.matplotlib = 'inline'
</snippet></ROW><ROW><id>21188508</id><snippet>%pylab</snippet></ROW><ROW><id>21188508</id><snippet>%matplotlib</snippet></ROW><ROW><id>21188508</id><snippet>import matplotlib.pyplot as plt
import numpy as np
</snippet></ROW><ROW><id>21188932</id><snippet>import</snippet></ROW><ROW><id>21188932</id><snippet>from my_classes import Myclass
</snippet></ROW><ROW><id>21188932</id><snippet>Myclass</snippet></ROW><ROW><id>21188932</id><snippet>from my_classes import Myclass, Mysubclass
</snippet></ROW><ROW><id>21188932</id><snippet>import</snippet></ROW><ROW><id>21188938</id><snippet>self.radio2
</snippet></ROW><ROW><id>21188938</id><snippet>self.radio1.
</snippet></ROW><ROW><id>21188938</id><snippet>self.radio1.Bind(wx.EVT_RADIOBUTTON, self.SetLab1)
</snippet></ROW><ROW><id>21188938</id><snippet>self.parent.change_timer(1000)
</snippet></ROW><ROW><id>21188938</id><snippet>import wx
import time


class SettingsFrame(wx.Frame):

    def __init__(self, parent):
        wx.Frame.__init__(self, None, wx.ID_ANY, size=(100, 200))
        self.parent = parent
        self.CenterOnParent()
        self.SetBackgroundColour('#e4e4e4')

        self.radio1 = wx.RadioButton(self, label="1 sec", pos=(40, 45))
        self.radio1.Bind(wx.EVT_RADIOBUTTON, self.SetLab1)

        self.radio2 = wx.RadioButton(self, label="5 sec", pos=(40, 65))
        self.radio2.Bind(wx.EVT_RADIOBUTTON, self.SetLab2)

        self.radio3 = wx.RadioButton(self, label="10 sec", pos=(40, 85))
        self.radio3.Bind(wx.EVT_RADIOBUTTON, self.SetLab3)

        extBtn = wx.Button(self, label="Exit", pos=(20, 110))
        extBtn.Bind(wx.EVT_BUTTON, self.extFrame)

    def SetLab1(self, event):
        self.parent.change_timer(1000)

    def SetLab2(self, event):
        self.parent.change_timer(5000)

    def SetLab3(self, event):
        self.parent.change_timer(10000)

    def extFrame(self, event):
        self.Close()


class MainPanel(wx.Panel):

    def __init__(self, parent):
        wx.Panel.__init__(self, parent=parent)
        self.frame = parent
        self.CenterOnParent()

        setBtn = wx.Button(self, label="Set", pos=(45, 10))
        setBtn.Bind(wx.EVT_BUTTON, self.setFrame)

        self.redraw_timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.on_redraw_timer, self.redraw_timer)
        self.redraw_timer.Start(milliseconds=1000)

    def setFrame(self, event):
        SettingsFrame(self).Show()

    def on_redraw_timer(self, event):
        print "Test: " + time.ctime()

    def change_timer(self, value):
        print 'Changing timer to:', value
        self.redraw_timer.Start(value)


class MainFrame(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, size=(200, 200))
        panel = MainPanel(self)
        self.CenterOnParent()

if __name__ == "__main__":
    app = wx.App(False)
    frame = MainFrame()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>21188938</id><snippet>import time

import wx
from wx.lib.newevent import NewCommandEvent


TimerChangeEvent, EVT_TIMER_CHANGE = NewCommandEvent()


class SettingsFrame(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, size=(100, 200))
        self.CenterOnParent()
        self.SetBackgroundColour('#e4e4e4')

        self.radio1 = wx.RadioButton(self, label="1 sec", pos=(40, 45))
        self.radio1.Bind(wx.EVT_RADIOBUTTON, self.SetLab1)

        self.radio2 = wx.RadioButton(self, label="5 sec", pos=(40, 65))
        self.radio2.Bind(wx.EVT_RADIOBUTTON, self.SetLab2)

        self.radio3 = wx.RadioButton(self, label="10 sec", pos=(40, 85))
        self.radio3.Bind(wx.EVT_RADIOBUTTON, self.SetLab3)

        extBtn = wx.Button(self, label="Exit", pos=(20, 110))
        extBtn.Bind(wx.EVT_BUTTON, self.extFrame)

    def SetLab1(self, event):
        self.post_timer_change_event(1000)

    def SetLab2(self, event):
        self.post_timer_change_event(5000)

    def SetLab3(self, event):
        self.post_timer_change_event(10000)

    def post_timer_change_event(self, value):
        evt = TimerChangeEvent(self.Id, value=value)
        wx.PostEvent(self, evt)

    def extFrame(self, event):
        self.Close()


class MainPanel(wx.Panel):

    def __init__(self, parent):
        wx.Panel.__init__(self, parent=parent)
        self.frame = parent
        self.CenterOnParent()

        setBtn = wx.Button(self, label="Set", pos=(45, 10))
        setBtn.Bind(wx.EVT_BUTTON, self.setFrame)

        self.redraw_timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.on_redraw_timer, self.redraw_timer)
        self.redraw_timer.Start(milliseconds=1000)

    def setFrame(self, event):
        settings_frame = SettingsFrame()
        settings_frame.Show()
        settings_frame.Bind(EVT_TIMER_CHANGE, self.on_change_timer)

    def on_redraw_timer(self, event):
        print "Test: " + time.ctime()

    def on_change_timer(self, event):
        value = event.value
        print 'Changing timer to:', value
        self.redraw_timer.Start(value)


class MainFrame(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, size=(200, 200))
        panel = MainPanel(self)
        self.CenterOnParent()

if __name__ == "__main__":
    app = wx.App(False)
    frame = MainFrame()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>21189121</id><snippet>print func.func_name, args, kwargs
</snippet></ROW><ROW><id>21189121</id><snippet>def decorate_logger(func):
    def inner(*args, **kwargs):
        print "Entering", func.func_name, "with Parameters :", args, kwargs
        temp = func(*args, **kwargs)
        print "Leaving ", func.func_name, "with :", temp, "for :", args, kwargs
        return temp
    return inner

@decorate_logger
def sum(a, b, c):
    return a + b + c

print sum(1, 2, 3)
print sum(1, 2, c = 3)
</snippet></ROW><ROW><id>21189121</id><snippet>Entering sum with Parameters : (1, 2, 3) {}
Leaving  sum with : 6 for : (1, 2, 3) {}
6
Entering sum with Parameters : (1, 2) {'c': 3}
Leaving  sum with : 6 for : (1, 2) {'c': 3}
6
</snippet></ROW><ROW><id>21189254</id><snippet>TypeError</snippet></ROW><ROW><id>21189254</id><snippet>lambda</snippet></ROW><ROW><id>21189254</id><snippet>x + y</snippet></ROW><ROW><id>21189254</id><snippet>args</snippet></ROW><ROW><id>21189254</id><snippet>int</snippet></ROW><ROW><id>21189254</id><snippet>(100)</snippet></ROW><ROW><id>21189254</id><snippet>In [10]: type((100))
Out[10]: int

In [11]: type((100,))
Out[11]: tuple
</snippet></ROW><ROW><id>21189254</id><snippet>In [12]: a['x'].apply(lambda x, y: x + y, args=(100,))
Out[12]: 
0    101
1    102
Name: x, dtype: int64
</snippet></ROW><ROW><id>21189383</id><snippet>#!/usr/bin/env python2.7
</snippet></ROW><ROW><id>21189383</id><snippet>python2.7 -m compileall .
</snippet></ROW><ROW><id>21189660</id><snippet>engine= create_engine('postgresql://user:pswd@localhost/db1')
DBSession = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))
DBSession.configure(bind=engine)

engine2= create_engine('postgresql://user:pswd@localhost/db2')
DBSession2 = scoped_session(sessionmaker(extension=ZopeTransactionExtension()))
DBSession2.configure(bind=engine2)
</snippet></ROW><ROW><id>21190069</id><snippet>with db.transaction():
  for user_name, user_password in data_to_save:
    user_data = Users.get_or_create(name=user_name, password=user_password)
    user_data.save()
</snippet></ROW><ROW><id>21190090</id><snippet>numpy.sort</snippet></ROW><ROW><id>21190090</id><snippet>numpy.argsort</snippet></ROW><ROW><id>21190090</id><snippet>&gt;&gt;&gt; arr
array([[ 105.,    4.],
       [  53.,  520.],
       [ 745.,  902.],
       [  19.,   nan],
       [ 184.,   nan],
       [  22.,   10.],
       [ 104.,   26.]])
&gt;&gt;&gt; arr[np.argsort(arr[:,1])]
array([[ 105.,    4.],
       [  22.,   10.],
       [ 104.,   26.],
       [  53.,  520.],
       [ 745.,  902.],
       [  19.,   nan],
       [ 184.,   nan]])
</snippet></ROW><ROW><id>21190431</id><snippet>def remove_accents(input_str):
    nkfd_form = unicodedata.normalize('NFKD', input_str)
    only_ascii = nkfd_form.encode('ASCII', 'ignore')
    return only_ascii

def normalize(text):
  text = re.sub(r'\s+', '', str(BeautifulSoup(text)), flags = re.MULTILINE)
  return str(remove_accents(text))

def compare_text(s1, s2):
  s1 = normalize(s1.lower())
  s2 = normalize(s2.lower())
  l1 = len(s1)
  l2 = len(s2)
  if l1 == l2:
    return  s1 == s2
  return False

t1="""      
&lt;p&gt;Bonjour aÃÄ tous,&lt;/p&gt;
&lt;p&gt;Je souhaite reÃÅcolter des informations sur les actions meneÃÅes en faveur des Seniors au sein du Groupe.&lt;/p&gt;
&lt;p&gt;Si vous menez ou avez meneÃÅ des actions en faveur des seniors et de leur insertion, pourriez-vous m‚Äôen faire part. Si je peux avoir des retours d‚Äôici demain matin, ce serait super ! Merci d‚Äôavance de vos retours.&lt;/p&gt;
"""
t2="""
&lt;p&gt;Bonjour √† tous,&lt;/p&gt;

&lt;p&gt;Je souhaite r√©colter des informations sur les actions men√©es en faveur des Seniors au sein du Groupe.&lt;/p&gt;

&lt;p&gt;Si vous menez ou avez men√© des actions en faveur des seniors et de leur insertion, pourriez-vous m&amp;rsquo;en faire part. Si je peux avoir des retours d&amp;rsquo;ici demain matin, ce serait super¬†! Merci d&amp;rsquo;avance de vos retours.&lt;/p&gt;  
"""

print(compare_text(t1, t2))
True
</snippet></ROW><ROW><id>21190761</id><snippet>div</snippet></ROW><ROW><id>21190761</id><snippet>form</snippet></ROW><ROW><id>21190761</id><snippet>name</snippet></ROW><ROW><id>21190761</id><snippet>import cookielib 
import urllib2 
import mechanize 

# Browser 
br = mechanize.Browser() 

# Enable cookie support for urllib2 
cookiejar = cookielib.LWPCookieJar() 
br.set_cookiejar( cookiejar ) 

# Broser options 
br.set_handle_equiv( True ) 
br.set_handle_gzip( True ) 
br.set_handle_redirect( True ) 
br.set_handle_referer( True ) 
br.set_handle_robots( False ) 

# ?? 
br.set_handle_refresh( mechanize._http.HTTPRefreshProcessor(), max_time = 1 ) 

br.addheaders = [ ( 'User-agent', 'Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.1) Gecko/2008071615 Fedora/3.0.1-1.fc9 Firefox/3.0.1' ) ] 

# authenticate 
br.open( the/page/you/want/to/login ) 
br.select_form( name="the name of the form from above" ) 
# these two come from the code you posted
# where you would normally put in your username and password
br[ "USERID" ] = yourLogin
br[ "PASSWDTXT" ] = yourPassword
res = br.submit() 

print "Success!\n"
</snippet></ROW><ROW><id>21190761</id><snippet>cookiejar</snippet></ROW><ROW><id>21190761</id><snippet>br</snippet></ROW><ROW><id>21190761</id><snippet>url = br.open( page/needed/after/login ) 
returnPage = url.read() 
</snippet></ROW><ROW><id>21191076</id><snippet>import numpy as np
import matplotlib.pyplot as plt
angles = np.random.rand(100)

length = 1.
vectors_2d = np.vstack((length * np.cos(angles), length * np.sin(angles))).T

for x, y in vectors_2d:
    plt.plot([0, x], [0, y])
plt.show()
</snippet></ROW><ROW><id>21191076</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
angles = np.random.rand(100)

length = 1.
heights = np.arange(len(angles))
vectors_3d = np.vstack((length * np.cos(angles), 
                        length * np.sin(angles), 
                        heights)).T

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
for x, y, z in vectors_3d:
    ax.plot([0, x], [0, y], zs=[z, z])
plt.show()
</snippet></ROW><ROW><id>21191076</id><snippet>pyplot.quiver</snippet></ROW><ROW><id>21191076</id><snippet>mplot3d</snippet></ROW><ROW><id>21191076</id><snippet>quiver</snippet></ROW><ROW><id>21191076</id><snippet>import numpy as np
import matplotlib.pyplot as plt

angles = np.random.rand(100)
# Define coords for arrow tails (the origin)
x0, y0 = np.zeros(100), np.zeros(100)
# Define coords for arrow tips (cos/sin)
x, y = np.cos(angles), np.sin(angles)

# in case you want colored arrows
colors = 'bgrcmyk'
colors *= colors * (len(x0) / len(colors) + 1)
plt.quiver(x0, y0, x, y, color=colors[:len(x0)], scale=1) #scale sets the length
plt.show()
</snippet></ROW><ROW><id>21191182</id><snippet>XML</snippet></ROW><ROW><id>21191182</id><snippet>JSON</snippet></ROW><ROW><id>21191182</id><snippet>Proto</snippet></ROW><ROW><id>21191182</id><snippet>message Person {
  required int32 id = 1;
  required string name = 2;
  optional string email = 3;
}
</snippet></ROW><ROW><id>21191286</id><snippet>def myfunc(a,b):
    c = a.intersection(b)
    return bool(c)
</snippet></ROW><ROW><id>21191286</id><snippet>bool()</snippet></ROW><ROW><id>21191286</id><snippet>not not</snippet></ROW><ROW><id>21191535</id><snippet>set.intersection(*(set(s) for s in list_of_lists if s))
</snippet></ROW><ROW><id>21191535</id><snippet>&gt;&gt;&gt; a=['aaaaa']
&gt;&gt;&gt; b=['aaaaa', 'bbbbb', 'ccccc']
&gt;&gt;&gt; c=['aaaaa']
&gt;&gt;&gt; d=['ppppp', 'aaaaa']
&gt;&gt;&gt; e=['aaaaa', 'uuuuu']
&gt;&gt;&gt; f=[]
&gt;&gt;&gt; list_of_lists = [a,b,c,d,e,f]
&gt;&gt;&gt; set.intersection(*(set(s) for s in list_of_lists if s))
set(['aaaaa'])
</snippet></ROW><ROW><id>21191715</id><snippet>import pyximport; pyximport.install()
import foo
</snippet></ROW><ROW><id>21191934</id><snippet>ax1.set_title('title1', color='c', rotation='vertical',x=-0.1,y=0.5)
ax2.set_title('title2', color='c', rotation='vertical',x=-0.1,y=0.5)
</snippet></ROW><ROW><id>21191994</id><snippet> my_dict = {my_list[0]:my_list[1:]}
</snippet></ROW><ROW><id>21191994</id><snippet>def fill_dictionary(d_list,n_pat):
    my_dict = {}
    for x in l:
         my_list =[item.strip() for item in x.split("|")]
         my_dict[my_list[0]] = my_list[1:]

    return my_dict
</snippet></ROW><ROW><id>21191994</id><snippet>&gt;&gt;&gt; l = ['Are|you', 'absolutely|sure']
&gt;&gt;&gt; print fill_dictionary(None, None)
{'Are': ['you']}
{'absolutely': ['sure']}
{'absolutely': ['sure']}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>21192181</id><snippet>class DateTime(datetime.datetime):
    def __new__(cls, **kwargs):
       my_attr = kwargs.pop('my_attr')
       dt = datetime.datetime.__new__(cls, **kwargs)
       dt.my_attr = my_attr
       return dt
</snippet></ROW><ROW><id>21192181</id><snippet>&gt;&gt;&gt; dt1 = DateTime(**{'year': 2014, 'month': 1, 'day': 17, 'hour': 18, 'minute': 10, 'my_attr': 'dt1'})
&gt;&gt;&gt; dt2 = DateTime(**{'year': 2015, 'month': 2, 'day': 18, 'hour': 19, 'minute': 11, 'my_attr': 'dt2'})
&gt;&gt;&gt; dt1.my_attr
'dt1'
&gt;&gt;&gt; dt2.my_attr
'dt2'
</snippet></ROW><ROW><id>21192197</id><snippet>for line in file:
    if username == line.strip():
       validusername = True
       break
</snippet></ROW><ROW><id>21192262</id><snippet>return</snippet></ROW><ROW><id>21192262</id><snippet>def is_palindrome(word):
    if len(word) &lt;= 1:
        return True
    elif first(word) == last(word):
        return is_palindrome(middle(word))  # &lt;--
    else:
        return False
</snippet></ROW><ROW><id>21192262</id><snippet>None</snippet></ROW><ROW><id>21192262</id><snippet>elif</snippet></ROW><ROW><id>21192262</id><snippet>is_palindrome(middle(word))</snippet></ROW><ROW><id>21192262</id><snippet>'aba'</snippet></ROW><ROW><id>21192262</id><snippet>word</snippet></ROW><ROW><id>21192262</id><snippet>'aba'</snippet></ROW><ROW><id>21192262</id><snippet>len(word) &lt;= 1</snippet></ROW><ROW><id>21192262</id><snippet>False</snippet></ROW><ROW><id>21192262</id><snippet>if</snippet></ROW><ROW><id>21192262</id><snippet>first(word) == last(word)</snippet></ROW><ROW><id>21192262</id><snippet>True</snippet></ROW><ROW><id>21192262</id><snippet>elif</snippet></ROW><ROW><id>21192262</id><snippet>word</snippet></ROW><ROW><id>21192262</id><snippet>'b'</snippet></ROW><ROW><id>21192262</id><snippet>len(word) &lt;= 1</snippet></ROW><ROW><id>21192262</id><snippet>True</snippet></ROW><ROW><id>21192262</id><snippet>if</snippet></ROW><ROW><id>21192262</id><snippet>True</snippet></ROW><ROW><id>21192262</id><snippet>return</snippet></ROW><ROW><id>21192262</id><snippet>elif</snippet></ROW><ROW><id>21192262</id><snippet>None</snippet></ROW><ROW><id>21192571</id><snippet>ftp.ftplib.FTP(ip)</snippet></ROW><ROW><id>21192571</id><snippet>ftplib.FTP(ip)</snippet></ROW><ROW><id>21192571</id><snippet>ftp.login("NINJA", password)</snippet></ROW><ROW><id>21192626</id><snippet>input</snippet></ROW><ROW><id>21192626</id><snippet>eval(raw_input())
</snippet></ROW><ROW><id>21192626</id><snippet>raw_input</snippet></ROW><ROW><id>21192626</id><snippet>class</snippet></ROW><ROW><id>21192626</id><snippet>NameError</snippet></ROW><ROW><id>21192626</id><snippet>Class</snippet></ROW><ROW><id>21192626</id><snippet>object</snippet></ROW><ROW><id>21192626</id><snippet>class Gui(object): # –±—É–¥—É—â–µ–µ –≥—É–∏, –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–µ
    # –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ –∫–ª–∞—Å—Å Person

    def input(self):
        self.inputName = raw_input("name")
        return self.inputName

the_app = Gui() 
print the_app.input()
</snippet></ROW><ROW><id>21192663</id><snippet>int</snippet></ROW><ROW><id>21192663</id><snippet>events</snippet></ROW><ROW><id>21192663</id><snippet>field1 = events[:,0]
</snippet></ROW><ROW><id>21192663</id><snippet>searchsorted</snippet></ROW><ROW><id>21192663</id><snippet>index = np.searchsorted(events[:,0], val)
</snippet></ROW><ROW><id>21192663</id><snippet>&gt;&gt;&gt; events.dtype 
[('start', '&lt;u8'), 
 ('length', '&lt;u4'), 
 ('mean', '&lt;f8'), 
 ('variance', '&lt;f8')]
</snippet></ROW><ROW><id>21192663</id><snippet>index = np.searchsorted(events["start"], val)
</snippet></ROW><ROW><id>21192663</id><snippet>events[event.dtype.names[0]]
</snippet></ROW><ROW><id>21192663</id><snippet>searchsorted</snippet></ROW><ROW><id>21192663</id><snippet>pandas.DataFrame</snippet></ROW><ROW><id>21192663</id><snippet>events = np.hstack([events[name] for name in events.dtype.names])
</snippet></ROW><ROW><id>21192663</id><snippet>int64</snippet></ROW><ROW><id>21192663</id><snippet>events = events.astype(int)</snippet></ROW><ROW><id>21192663</id><snippet>astype</snippet></ROW><ROW><id>21192677</id><snippet>def extra_datas(mydir,exclude=[]):
    def rec_glob(p, files):
        import os
        import glob
        for d in glob.glob(p):
            if os.path.isfile(d):
                files.append(d)
            rec_glob("%s/*" % d, files)
    files = []
    rec_glob("%s/*" % mydir, files)
    return [(f, f, 'DATA') for f om files if f not in exclude]

a.datas += extra_datas(some_dir,["something.txt","something.exe",...])
</snippet></ROW><ROW><id>21193460</id><snippet>with open("wfield.txt") as fp:
    rows = (dict(entry.split("=",1) for entry in row.strip().split("|")) for row in fp)
    df = pd.DataFrame.from_dict(rows)
</snippet></ROW><ROW><id>21193460</id><snippet>&gt;&gt;&gt; df
                       CHAN  DURS      EVNT  INPT LFEAT LMAX LUSED  \
0  FCJNJKDCAAANPCKEAAAAAAAA   NaN  NVOCinpt   NaN   NaN  NaN   NaN   
1  FCJNJKDCAAANPCKEAAAAAAAA  5120  NVOCsynd  1167   NaN  NaN   NaN   
2  FCJNJKDCAAANPCKEAAAAAAAA   NaN  NVOClise   NaN   tts  100     0   

                         MIME OMAX  RSTT SCPU               TIME  \
0  application/synthesis+ssml  NaN   NaN   15  20131203004552049   
1                         NaN  NaN  stop   15  20131203004552049   
2                         NaN   95   NaN    0  20131203004552049   

                                                TXID  TXSZ UCPU  
0  NUAN-20131203004552049-FCJNJKDCAAANPCKEAAAAAAA...  1167   31  
1                                                NaN   NaN   31  
2                                                NaN   NaN    0  

[3 rows x 15 columns]
</snippet></ROW><ROW><id>21193460</id><snippet>from_dict</snippet></ROW><ROW><id>21193460</id><snippet>df = pd.DataFrame(list(rows))
</snippet></ROW><ROW><id>21193578</id><snippet>color</snippet></ROW><ROW><id>21193578</id><snippet># Just set `colors` once
colors = ["black_flower.svg","blue_flower.svg", "brown_flower.svg","green_flower.svg","purple_flower.svg"]
for i in range(5): 
    # Do stuff
</snippet></ROW><ROW><id>21193578</id><snippet>j</snippet></ROW><ROW><id>21193578</id><snippet>for i in range(20):
    x = random.randint(20, (risar.maxX-20))
    y = random.randint(20, 300)
    flower = risar.picture(x, y, colors[i//4]) # 0, 1, 2, 3, 4
    flowers.append(flower)
</snippet></ROW><ROW><id>21193677</id><snippet>from tkinter import *
from tkinter import ttk

root = Tk()
board_frame = ttk.Frame(root, padding=5)
board_frame.grid(column=0,row=0)

COORDS_LIST = []
buttons_dict = {}

###########################################
def fire_here(x, y):
    print("column:{}, row:{}".format(x, y))
###########################################

for r in range(1,11):
    for c in range(1,11):
        coord = str(r)+"_"+str(c)
        COORDS_LIST.append(coord)
        buttons_dict[COORDS_LIST[-1]] = ttk.Button(board_frame, text="O", width="2")
        ###########################################################################
        buttons_dict[COORDS_LIST[-1]]["command"] = lambda x=c, y=r: fire_here(x, y)
        ###########################################################################
        buttons_dict[COORDS_LIST[-1]].grid(row=r,column=c)

root.mainloop()
</snippet></ROW><ROW><id>21193677</id><snippet>buttons_dict[COORDS_LIST[-1]]["command"] = lambda x=c, y=r: fire_here(x, y)
</snippet></ROW><ROW><id>21193677</id><snippet>lambda</snippet></ROW><ROW><id>21193677</id><snippet>command</snippet></ROW><ROW><id>21193677</id><snippet>x</snippet></ROW><ROW><id>21193677</id><snippet>y</snippet></ROW><ROW><id>21193677</id><snippet>fire_here</snippet></ROW><ROW><id>21193677</id><snippet>buttons_dict[COORDS_LIST[-1]] = ttk.Button(board_frame, text="O", width="2", command=lambda x=c, y=r: fire_here(x, y))
</snippet></ROW><ROW><id>21193799</id><snippet>my_dict = {"0": ["1", "2", "3", "4"], "1": ["0", "2", "3", "4", "27", "94", "95", "97", "128", "217", "218", "317"], "2": ["0", "1", "3", "4", "94", "95"], "3": ["0", "1", "2", "4", "377"], "4": ["0", "1", "2", "3", "27", "28"], "5": ["6", "7", "8"], "6": ["5", "7", "8"], "7": ["5", "6", "8", "14", "23", "40", "74", "75", "76", "362", "371", "372"], "8": ["5", "6", "7", "66"], "9": ["10", "11", "12"], "10": ["9", "11", "12", "56", "130", "131"]}

output_dict = {}
for key, value in my_dict.iteritems():
    output_dict[int(key)] = [int(item) for item in value]

output_dict
</snippet></ROW><ROW><id>21193799</id><snippet>{0: [1, 2, 3, 4],
 1: [0, 2, 3, 4, 27, 94, 95, 97, 128, 217, 218, 317],
 2: [0, 1, 3, 4, 94, 95],
 3: [0, 1, 2, 4, 377],
 4: [0, 1, 2, 3, 27, 28],
 5: [6, 7, 8],
 6: [5, 7, 8],
 7: [5, 6, 8, 14, 23, 40, 74, 75, 76, 362, 371, 372],
 8: [5, 6, 7, 66],
 9: [10, 11, 12],
 10: [9, 11, 12, 56, 130, 131]}
</snippet></ROW><ROW><id>21193799</id><snippet>In [34]: with open('a.txt', 'r') as f:
    theJson = { int(key) : [int(item) for item in value] for key, value in json.load(f).iteritems()}

In [35]: theJson
Out[35]: 
{0: [1, 2, 3, 4],
 1: [0, 2, 3, 4, 27, 94, 95, 97, 128, 217, 218, 317],
 2: [0, 1, 3, 4, 94, 95],
 3: [0, 1, 2, 4, 377],
 4: [0, 1, 2, 3, 27, 28],
 5: [6, 7, 8],
 6: [5, 7, 8],
 7: [5, 6, 8, 14, 23, 40, 74, 75, 76, 362, 371, 372],
 8: [5, 6, 7, 66],
 9: [10, 11, 12],
 10: [9, 11, 12, 56, 130, 131]}
</snippet></ROW><ROW><id>21193837</id><snippet>from PyQt4 import QtGui

app = QtGui.QApplication([])

w = QtGui.QWidget()
le = QtGui.QLineEdit(w)
lay = QtGui.QHBoxLayout()
w.setLayout(lay)
lay.addWidget(le)
le.setStyleSheet("border: 1px solid red;")
w.show()
app.exec_()
</snippet></ROW><ROW><id>21193837</id><snippet>ss = le.styleSheet() #original saved
le.setStyleSheet("border: 1px solid red;") #changed
le.setStyleSheet(ss) #back to original
</snippet></ROW><ROW><id>21193920</id><snippet>(a, b) = ("foo", 1)
</snippet></ROW><ROW><id>21193920</id><snippet>"foo"</snippet></ROW><ROW><id>21193920</id><snippet>a</snippet></ROW><ROW><id>21193920</id><snippet>1</snippet></ROW><ROW><id>21193920</id><snippet>b</snippet></ROW><ROW><id>21193920</id><snippet>def escape_html(s):
  for (i,o) in (("&amp;", "&amp;"),("&gt;","&gt;"),('&lt;','&lt;'),('"',""")):
    s = s.replace(i,o)
  return s
</snippet></ROW><ROW><id>21193920</id><snippet>def escape_html(s):
  s = s.replace("&amp;", "&amp;")
  s = s.replace("&gt;","&gt;")
  s = s.replace('&lt;','&lt;')
  s = s.replace('"',""")
  return s
</snippet></ROW><ROW><id>21194026</id><snippet>Numpy</snippet></ROW><ROW><id>21194026</id><snippet>pip</snippet></ROW><ROW><id>21194026</id><snippet>numpy</snippet></ROW><ROW><id>21194026</id><snippet>numpy</snippet></ROW><ROW><id>21194060</id><snippet>[55.000000, 14.000000, 34.727]
#0          1          2
</snippet></ROW><ROW><id>21194060</id><snippet>coordinates.sort(key=lambda x: x[1])                              
coordinates.sort(key=lambda x: x[0], reverse=True)
</snippet></ROW><ROW><id>21194311</id><snippet>if</snippet></ROW><ROW><id>21194311</id><snippet>def f(objects):
    list_type = "string_x"
    other = "string_y"
    hold = []
    for x in objects:
        hold.append((list_type if isinstance(x[1], list) else other, x[1]))
    return hold
</snippet></ROW><ROW><id>21194311</id><snippet>def f(objects):
    list_type = "string_x"
    other = "string_y"
    return [(list_type if isinstance(x[1], list) else other, x[1]) 
            for x in objects]
</snippet></ROW><ROW><id>21194311</id><snippet>def f(objects):
    return [("string_x" if isinstance(x[1], list) else "string_y", x[1]) 
            for x in objects]
</snippet></ROW><ROW><id>21194311</id><snippet>yield</snippet></ROW><ROW><id>21194311</id><snippet>def f(objects):
    yield from (("string_x" if isinstance(x[1], list) else "string_y", x[1]) 
                for x in objects)
</snippet></ROW><ROW><id>21194538</id><snippet>from collections import Counter

counted=Counter(iterable)
</snippet></ROW><ROW><id>21194538</id><snippet>&gt;&gt;&gt; myDict=dict(a=1,b=2,c=3)
&gt;&gt;&gt; myDict
{'a': 1, 'c': 3, 'b': 2}
&gt;&gt;&gt; Counter(myDict)
Counter({'c': 3, 'b': 2, 'a': 1})
</snippet></ROW><ROW><id>21194538</id><snippet>&gt;&gt;&gt; Counter('aabbccaabcaaa')
Counter({'a': 7, 'c': 3, 'b': 3})
</snippet></ROW><ROW><id>21194538</id><snippet>if var in myDictionary:              # loops over the KEYS of myDictionary
    myDictionary[var] += 1
else:
    myDictionary[var] = 1
</snippet></ROW><ROW><id>21194538</id><snippet>myDictionary</snippet></ROW><ROW><id>21194538</id><snippet>&gt;&gt;&gt; myDict={'a':[1], 'b':[1,2], 'c':[1,2,3]}
&gt;&gt;&gt; {k:len(v) for k, v in myDict.iteritems()}
{'a': 1, 'c': 3, 'b': 2}
</snippet></ROW><ROW><id>21194538</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dd=defaultdict(int)
&gt;&gt;&gt; for k, v in myDict.iteritems():
...    dd[k]=len(v)
... 
&gt;&gt;&gt; dd
defaultdict(&lt;type 'int'&gt;, {'a': 1, 'c': 3, 'b': 2})
</snippet></ROW><ROW><id>21194538</id><snippet>&gt;&gt;&gt; Counter([(k,len(v)) for k, v in myDict.iteritems()])
Counter({('a', 1): 1, ('b', 2): 1, ('c', 3): 1})
</snippet></ROW><ROW><id>21194538</id><snippet>dict</snippet></ROW><ROW><id>21194538</id><snippet>&gt;&gt;&gt; dict((k,len(v)) for k, v in myDict.iteritems())
{'a': 1, 'c': 3, 'b': 2}
</snippet></ROW><ROW><id>21194538</id><snippet>dict</snippet></ROW><ROW><id>21194603</id><snippet>pack</snippet></ROW><ROW><id>21194603</id><snippet>()</snippet></ROW><ROW><id>21194603</id><snippet>from Tkinter import *

master=Tk()

w=Canvas(master, width=200, height=100)
########
w.pack()
########

w.create_line(0,0,200,100)
w.create_line(0,100,200,0, fill="red", dash=(4,4))

w.create_rectangle(50,25,150,75, fill="blue")

mainloop()
</snippet></ROW><ROW><id>21194753</id><snippet>- kind: Player
  properties:
  - name: name
  - name: enabled
</snippet></ROW><ROW><id>21194825</id><snippet>class StopFunction(object):

    def __init__(self, stop_key):
        self.stop_key = stop_key

    def __call__(self, symbol, _):
        if symbol == getattr(pyglet.window.key, self.stop_key):
            pyglet.app.exit()

    def __eq__(self, other):
        try:
            return self.stop_key == other.stop_key
        except AttributeError:
            return False

StopFunciton('ENTER') == StopFunciton('ENTER')
# True
StopFunciton('ENTER') == StopFunciton('FOO')
# False
</snippet></ROW><ROW><id>21194893</id><snippet>Requirement already up-to-date: nltk in /Library/Frameworks/Python.framework/Versions/3.3/lib/python3.3/site-packages
</snippet></ROW><ROW><id>21194893</id><snippet>import ntlk</snippet></ROW><ROW><id>21194893</id><snippet>import nltk</snippet></ROW><ROW><id>21194893</id><snippet>sudo pip uninstall nltk</snippet></ROW><ROW><id>21194893</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>21195059</id><snippet>False</snippet></ROW><ROW><id>21195059</id><snippet>cf = pyrax.connect_to_cloudfiles(region=&lt;REGION&gt;, public=False)
</snippet></ROW><ROW><id>21195059</id><snippet>connect_to_cloudfiles</snippet></ROW><ROW><id>21195185</id><snippet>__name__</snippet></ROW><ROW><id>21195185</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>21195185</id><snippet>import os, sys; sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))</snippet></ROW><ROW><id>21195577</id><snippet>types.SimpleNamespace</snippet></ROW><ROW><id>21195577</id><snippet>argparse.Namespace</snippet></ROW><ROW><id>21195645</id><snippet>for ... in ...</snippet></ROW><ROW><id>21195645</id><snippet>[m for e in engine.engines for m in e.modules]
</snippet></ROW><ROW><id>21195645</id><snippet>lst = []
for e in engine.engines:
    for m in e.modules:
        lst.append(m)
</snippet></ROW><ROW><id>21195713</id><snippet>indent</snippet></ROW><ROW><id>21196014</id><snippet>values = [('tens', 10), ('fives', 5), ('ones', 1), ('tenths', 0.1)]


def get_digits(num):
    num = int(num * 10)
    num = float(num) / 10

    output_dict = {}
    for place, value in values:
        output_dict[place] = num // value
        num = num % value
    return(output_dict)

get_digits(123.456)
</snippet></ROW><ROW><id>21196014</id><snippet>{'fives': 0.0, 'tens': 12.0, 'tenths': 4.0, 'ones': 3.0}
</snippet></ROW><ROW><id>21196297</id><snippet>[some_function() if foo.bar else some_other_function() 
         for foo in foos if not setattr(foo, 'added',  "I was added in iteration")]
</snippet></ROW><ROW><id>21196567</id><snippet>for i in range(len(titles)):
    print titles[i]
    print desc[i]
    print links[i]
    print pub[i]
    print ""
</snippet></ROW><ROW><id>21196784</id><snippet>def get_context_data(self, **kwargs):
    context = super(SignUpView, self).get_context_data(**kwargs)
    something = something
    context['something'] = something
    return context
</snippet></ROW><ROW><id>21196784</id><snippet>class SomeMixin(object):

    def get_context_data(self, **kwargs):
        context = super(SomeMixin, self).get_context_data(**kwargs)
        something = something
        context['something'] = something
        return context
</snippet></ROW><ROW><id>21196784</id><snippet>class SignUpView(SomeMixin, FormView):

    def form_valid(self, form):
        ...
</snippet></ROW><ROW><id>21197014</id><snippet>from oct2py import octave
import numpy as np
a = np.array([[1, 2], [3, 4.]])  # notice the addition of the period
b = np.array([[5, 6], [1, 2], dtype=float])  # another way to specify floating point type
octave.call("/MATLAB/jk2.m", a, b)  # this call works just fine
</snippet></ROW><ROW><id>21197076</id><snippet>list</snippet></ROW><ROW><id>21197076</id><snippet>collections.MutableSequence</snippet></ROW><ROW><id>21197150</id><snippet>&gt;&gt;&gt; lst = ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr']
&gt;&gt;&gt; s1, s2 = map("".join, zip(lst[::3], lst[1::3], lst[2::3]))
&gt;&gt;&gt; s1
'abcdefghi'
&gt;&gt;&gt; s2
'jklmnopqr'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21197150</id><snippet>lst</snippet></ROW><ROW><id>21197183</id><snippet>def main():
    config = Configurator()
    config.add_route('action', '/action/{id}')
    config.scan()
    app = config.make_wsgi_app()
    return app
</snippet></ROW><ROW><id>21197183</id><snippet>config.add_route('foo')
config.scan()
</snippet></ROW><ROW><id>21197183</id><snippet>@view_config(route_name="foo")
</snippet></ROW><ROW><id>21197183</id><snippet>@view_config(route_name="action", renderer="json")
def run_action(request):
    id = request.matchdict['id']
    return {'id': id}
</snippet></ROW><ROW><id>21197183</id><snippet>class MyArbitraryClass():
    def __init__(self, request):
        self.request = request

    @view_config(route_name="action", renderer="json")
    def run_action(self):
        id = request.matchdict['id']
        return {'id': id}
</snippet></ROW><ROW><id>21197362</id><snippet>new_object = myclass(old_object.a, old_object.b, old_object.c)
</snippet></ROW><ROW><id>21197362</id><snippet>a = set([1, 2, 3])
b = set(a)
</snippet></ROW><ROW><id>21197362</id><snippet>__init__</snippet></ROW><ROW><id>21197362</id><snippet>set</snippet></ROW><ROW><id>21197362</id><snippet>set</snippet></ROW><ROW><id>21197362</id><snippet>set</snippet></ROW><ROW><id>21197362</id><snippet>__init__</snippet></ROW><ROW><id>21197362</id><snippet>_sentinel = object()
def __init__(myclass_or_a, b=_sentinel, c=_sentinel):
    if isinstance(a, myclass):
        self.a, self.b, self.c = myclass_or_a.a, myclass_or_a.b, myclass_or_a.c
    else:
        self.a, self.b, self.c = myclass_or_a, b, c
</snippet></ROW><ROW><id>21197362</id><snippet>b is _sentinel</snippet></ROW><ROW><id>21197362</id><snippet>constant_object = myclass(1,2,3)
variable_object = myclass(constant_object)
variable_object.a = 999
</snippet></ROW><ROW><id>21197422</id><snippet>q = request.form['name']
# do for 12 more fields
db.session.add(q)
</snippet></ROW><ROW><id>21197422</id><snippet>request.form['name']</snippet></ROW><ROW><id>21197422</id><snippet>db.session.add(q)
</snippet></ROW><ROW><id>21197422</id><snippet>User</snippet></ROW><ROW><id>21197422</id><snippet>a = MyEntity()
session.add(a)
session.commit() # Generates SQL to do an insert for the table that MyEntity is for
</snippet></ROW><ROW><id>21197422</id><snippet>db.execute('INSERT...', val1, val2)</snippet></ROW><ROW><id>21197511</id><snippet>import pickle  

d = {'key1':'value1'}
dd = {frozenset(d.items()):'my_value'}

# Save to dumpfile
pickle.dump(dd, open('dumpfile', 'wb'))

# Load again from dumpfile
dd = pickle.load(open('dumpfile', 'rb'))
</snippet></ROW><ROW><id>21197863</id><snippet>convert_objects</snippet></ROW><ROW><id>21197863</id><snippet>In [11]: df
Out[11]: 
   x  y
0  a  1
1  b  2

In [12]: df.dtypes
Out[12]: 
x    object
y    object
dtype: object

In [13]: df.convert_objects(convert_numeric=True)
Out[13]: 
   x  y
0  a  1
1  b  2

In [14]: df.convert_objects(convert_numeric=True).dtypes
Out[14]: 
x    object
y     int64
dtype: object
</snippet></ROW><ROW><id>21197918</id><snippet>def get_value(mapping, key, default_func, *args):
    try:
        return mapping[key]
    except KeyError:
        return default_func(*args)

# ...

test_model_data = {
    'fk1': get_value(kwargs, 'fk1', fk1_factory, i),
    'fk2': get_value(kwargs, 'fk2', fk2_factory, i),
    # etc.
}
</snippet></ROW><ROW><id>21197918</id><snippet>def map_data(mapping, key_factory_map, *args):
    return {key: get_value(mapping, key, factory, *args) 
            for key, factory in key_factory_map.items()}

# ‚Ä¶

test_model_data = map_data(kwargs, {
    'fk1': fk1_factory,
    'fk2': fk2_factory,
    # ‚Ä¶

    }, i)
</snippet></ROW><ROW><id>21198009</id><snippet>def recipe():
    """Create a list to store the recipe ingredients."""

    print "Enter 5 ingredients that could possibly go into a cake: "
    ingredients = raw_input("&gt; ").split()
    print ingredients

    if len(ingredients) == 5:
        print "Thanks"
    elif len(ingredients) &gt; 5:
        print "That's too much"
    elif len(ingredients) &lt; 5:
        print "That's too little"
    else:
        print "There's something wrong!"

recipe()
</snippet></ROW><ROW><id>21198009</id><snippet>ingredients = raw_input("&gt; ").split()
</snippet></ROW><ROW><id>21198009</id><snippet>raw_input</snippet></ROW><ROW><id>21198009</id><snippet>str.split</snippet></ROW><ROW><id>21198009</id><snippet>str.split</snippet></ROW><ROW><id>21198009</id><snippet>ingredients = raw_input("&gt; ").split(",")
</snippet></ROW><ROW><id>21198199</id><snippet>for indicator in indicators:
    try:
      indicator.append(region_info[indicator[0]])
    except:
      print "there is no region info for country name %s" % indicator[0]
</snippet></ROW><ROW><id>21198199</id><snippet>newrow={"country_name" : name, 
        "date": date, 
        "population": pop,
        #... etc
</snippet></ROW><ROW><id>21198199</id><snippet>for indicator in indicators:
    try:
      indicator["region_info"] = region_info[indicator["country_name"]]
    except:
      print "there is no region info for country name %s" % indicator["country_name"]
</snippet></ROW><ROW><id>21198368</id><snippet>countlist = {word:allwords.count(word) for word in allwords}
</snippet></ROW><ROW><id>21198368</id><snippet>defaultdict</snippet></ROW><ROW><id>21198368</id><snippet>from itertools import defaultdict
countlist = defaultdict(int)
for word in allwords:
    countlist[word] += 1
</snippet></ROW><ROW><id>21198368</id><snippet>,</snippet></ROW><ROW><id>21198368</id><snippet>sys.stdout.write(",".join(["{:}:{:}".format(key, value) for key, value in countlist .items()]))
</snippet></ROW><ROW><id>21198430</id><snippet>raw_input</snippet></ROW><ROW><id>21198430</id><snippet>money</snippet></ROW><ROW><id>21198430</id><snippet>mult=money*2</snippet></ROW><ROW><id>21198430</id><snippet>money*2</snippet></ROW><ROW><id>21198430</id><snippet>10</snippet></ROW><ROW><id>21198430</id><snippet>mult</snippet></ROW><ROW><id>21198430</id><snippet>'1010'</snippet></ROW><ROW><id>21198430</id><snippet>str(000)</snippet></ROW><ROW><id>21198430</id><snippet>000</snippet></ROW><ROW><id>21198430</id><snippet>0</snippet></ROW><ROW><id>21198430</id><snippet>str(000)</snippet></ROW><ROW><id>21198430</id><snippet>'0'</snippet></ROW><ROW><id>21198430</id><snippet>1010</snippet></ROW><ROW><id>21198430</id><snippet>'0'</snippet></ROW><ROW><id>21198430</id><snippet>10100</snippet></ROW><ROW><id>21198430</id><snippet># Question
money = int(raw_input("How much money do you earn per hour?"))

# Math Work
mult = money * 2
result = str(mult) + "000"
</snippet></ROW><ROW><id>21198430</id><snippet>result = 2000*int(raw_input("How much money do you earn per hour?"))
</snippet></ROW><ROW><id>21198547</id><snippet>cursor.fetchall()</snippet></ROW><ROW><id>21198547</id><snippet>findall()</snippet></ROW><ROW><id>21198547</id><snippet>for row in results: 
    hashtags = re.findall(r"#(\w+)", row[0])
</snippet></ROW><ROW><id>21198629</id><snippet>from sympy import *
from sympy.geometry import *
x1, y1, x2, y2, xc, yc = symbols("x1,y1,x2,y2,xc,yc")
p1 = Point(x1, y1)
p2 = Point(x2, y2)
pc = Point(xc, yc)

line = Line(p1, p2)
pline = line.perpendicular_line(pc)
p = line.intersection(pline)[0]
cse(p, symbols=numbered_symbols("t"))
</snippet></ROW><ROW><id>21198629</id><snippet>([(t0, x1 - x2), (t1, y1 - y2), (t2, x1*y2 - x2*y1), (t3, t0**2 + t1**2)],
 [Point((t0**2*xc + t0*t1*yc - t1*t2)/t3, (t0*t1*xc + t0*t2 + t1**2*yc)/t3)])
</snippet></ROW><ROW><id>21198629</id><snippet>t0 = x1 - x2
t1 = y1 - y2
t2 = x1*y2 - x2*y1
t3 = t0**2 + t1**2

xp = (t0**2*xc + t0*t1*yc - t1*t2)/t3
yp = (t0*t1*xc + t0*t2 + t1**2*yc)/t3    
</snippet></ROW><ROW><id>21198825</id><snippet>myvar = ""
while myvar != "quit":
    myvar = raw_input()
    print myvar
</snippet></ROW><ROW><id>21198825</id><snippet>"quit"</snippet></ROW><ROW><id>21198896</id><snippet>for i in itertools.product(string.ascii_letters + string.digits, repeat=8):
     print(''.join(i))
</snippet></ROW><ROW><id>21199005</id><snippet>Note Functionality within this package requires that the __main__ module be importable by the children. This is covered in Programming guidelines however it is worth pointing out here. This means that some examples, such as the multiprocessing.Pool examples will not work in the interactive interpreter.
</snippet></ROW><ROW><id>21199005</id><snippet>__main__</snippet></ROW><ROW><id>21199014</id><snippet>print fread.flist</snippet></ROW><ROW><id>21199014</id><snippet>fread()</snippet></ROW><ROW><id>21199014</id><snippet>def fread(file, *args):
   flist = open(file).readlines()
   return flist
</snippet></ROW><ROW><id>21199014</id><snippet>print fread(file)
</snippet></ROW><ROW><id>21199014</id><snippet>file</snippet></ROW><ROW><id>21199130</id><snippet>company = forms.ModelChoiceField(queryset=Company.objects.all(), required=False, help_text="Company")
</snippet></ROW><ROW><id>21199152</id><snippet>replace</snippet></ROW><ROW><id>21199152</id><snippet>string = 'abc\r\n\r\n\\\\'
string = string.replace('\r', '')
string = string.replace('\n', '')
string = string.replace('\\', '')
</snippet></ROW><ROW><id>21199152</id><snippet>string = re.sub('\\r*\\n*\\\\*', '', string)
</snippet></ROW><ROW><id>21199516</id><snippet>myvar = raw_input()
while myvar.lower() != "quit":
    print myvar 
    myvar = raw_input()
</snippet></ROW><ROW><id>21199626</id><snippet>re.sub</snippet></ROW><ROW><id>21199626</id><snippet>dict</snippet></ROW><ROW><id>21199626</id><snippet>import urllib2
import json
import re

def test(*args):
     f = urllib2.urlopen("http://api.urbandictionary.com/v0/define?term=%s" % '+'.join(args).lower())  # note urllib2.urlopen rather than urllib.request.urlopen
     data = json.loads(f.read().decode("utf-8"))  # note f.read() instead of f.readall()
     if len(data['list']) &gt; 0:
        definition = data['list'][0][u'definition']
        example = data['list'][0][u'example']
        permalink = data['list'][0][u'permalink']
        return "Urban Dictionary search for %s: %s Example: %s Link: %s" % (str(args), definition, example, permalink)  # returns a string

print test('mouth', 'hugging').replace('\n\n', '\n')  # prints the string after replacing '\n\n' with '\n'
</snippet></ROW><ROW><id>21199626</id><snippet>Urban Dictionary search for ('mouth', 'hugging'): When you put a beer bottle in your mouth, and keep your mouth wrapped around it all day. Example: Josh: "mhmgdfhwrmhhh (attempts to talk while drinking a beer)"
Ryan: "You know I can't hear you when you're mouth hugging."
Josh: "mmmffwrrggddsshh" Link: http://mouth-hugging.urbanup.com/7493517
</snippet></ROW><ROW><id>21199739</id><snippet>somelist.index(someval_not_in_the_list)</snippet></ROW><ROW><id>21199739</id><snippet>someval_not_in_the_list in somelist</snippet></ROW><ROW><id>21199739</id><snippet>x in somelist</snippet></ROW><ROW><id>21199739</id><snippet>x in somedict</snippet></ROW><ROW><id>21199739</id><snippet>somelist[index]</snippet></ROW><ROW><id>21199770</id><snippet>#Create a 2d lists with the smaller lists containing the rgb values and append lists of lists
def horizontal_flip(self):
    if int(self.columns) &gt; 1000:
        return "ERROR!! Number of columns is larger than what can be held in a buffer."
    else:
        temp_list = []
        for b in range(int(self.row)):
            column_list = []
            column_list += self.pixels[0:int(self.columns) * 3]
            self.pixels = self.pixels[int(self.columns) * 3 : ]
            temp_list.append(column_list)
        #print temp_list
        new_list = []
        for i in range(int(len(temp_list))):
            new_list.append (temp_list[i][0])
            new_list.append (temp_list[i][1])
            new_list.append (temp_list[i][2])
            temp_list[i] = temp_list[i][::-1]
</snippet></ROW><ROW><id>21199830</id><snippet>results = ...

inputs['open'] = np.array([r.get('open') for r in results], dtype=float)
...
</snippet></ROW><ROW><id>21199974</id><snippet>.args</snippet></ROW><ROW><id>21199974</id><snippet>density</snippet></ROW><ROW><id>21199974</id><snippet>D1(i).evalf()</snippet></ROW><ROW><id>21199974</id><snippet>D1</snippet></ROW><ROW><id>21199974</id><snippet>i</snippet></ROW><ROW><id>21199974</id><snippet>D1 = density(G1); D2 = density(G2); D3 = density(G3)
v1 = [D1(i).evalf() for i in u]
v2 = [D2(i).evalf() for i in u]
v3 = [D3(i).evalf() for i in u]
</snippet></ROW><ROW><id>21200111</id><snippet>print('{0:.3}'.format(1.0/3))
</snippet></ROW><ROW><id>21200111</id><snippet>0.333
</snippet></ROW><ROW><id>21200111</id><snippet>float</snippet></ROW><ROW><id>21200111</id><snippet>data = 1
print('{0:.3}'.format(float(data) / 3))
</snippet></ROW><ROW><id>21200883</id><snippet>the "other" side</snippet></ROW><ROW><id>21200883</id><snippet>state.customer_set.all()</snippet></ROW><ROW><id>21200883</id><snippet>customer</snippet></ROW><ROW><id>21200883</id><snippet>ManyToManyField</snippet></ROW><ROW><id>21200883</id><snippet>class Customer(models.Model):
    shop = models.ForeignKey(Shops)
    user = models.ForeignKey(User)
    uuid = UUIDField(auto=True)
    name = models.CharField(max_length=200)
    countries = models.ManyToManyField(Country)
    states = models.ManyToManyField(States)
    cities = models.ManyToManyField(Cities)
</snippet></ROW><ROW><id>21200883</id><snippet>customer.countries.all()</snippet></ROW><ROW><id>21200883</id><snippet>customer.states.all()</snippet></ROW><ROW><id>21200883</id><snippet>customer.cities.all()</snippet></ROW><ROW><id>21200883</id><snippet>ManyToManyField</snippet></ROW><ROW><id>21200883</id><snippet>ManyToManyField</snippet></ROW><ROW><id>21200883</id><snippet>customer = Customer(shop_id=shop_id, name=name)
customer.save()

# Add ManyToMany's
custome.states.add(state)
customer.cities.add(cities)
customer.countries.add(country)
</snippet></ROW><ROW><id>21200883</id><snippet>ManyToManyFields</snippet></ROW><ROW><id>21200923</id><snippet>def __init__(self, seed = "a string"):
    self.seed = seed
    myFetchQueue = fetchQueue.FETCHQueue()
</snippet></ROW><ROW><id>21200923</id><snippet>myFetchQueue</snippet></ROW><ROW><id>21200923</id><snippet>__init__</snippet></ROW><ROW><id>21200923</id><snippet>    self.myFetchQueue = fetchQueue.FETCHQueue()
</snippet></ROW><ROW><id>21200923</id><snippet>    self.myFetchQueue.push(self.seed)
    self.myFetchQueue.pop()
</snippet></ROW><ROW><id>21201245</id><snippet>ls</snippet></ROW><ROW><id>21201245</id><snippet>Foo</snippet></ROW><ROW><id>21201245</id><snippet>class Foo:
    ls = []
</snippet></ROW><ROW><id>21201245</id><snippet>&gt;&gt;&gt; f1 = Foo()
&gt;&gt;&gt; f2 = Foo()
&gt;&gt;&gt; Foo.ls.append(1)
&gt;&gt;&gt; Foo.ls
[1]
&gt;&gt;&gt; f1.ls
[1]
&gt;&gt;&gt; f2.ls
[1]
</snippet></ROW><ROW><id>21201245</id><snippet>__init__</snippet></ROW><ROW><id>21201245</id><snippet>class Foo:
    def __init__(self):
        self.ls = []
</snippet></ROW><ROW><id>21201245</id><snippet>ls</snippet></ROW><ROW><id>21201245</id><snippet>__init__</snippet></ROW><ROW><id>21201245</id><snippet>&gt;&gt;&gt; f1 = Foo()
&gt;&gt;&gt; f2 = Foo()
&gt;&gt;&gt; Foo.ls.append(1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: class Foo has no attribute 'ls'
&gt;&gt;&gt; f1.ls.append(1)
&gt;&gt;&gt; f1.ls
[1]
&gt;&gt;&gt; f2.ls
[]
</snippet></ROW><ROW><id>21201303</id><snippet>Nbrs[23][2] = [[1, 1], [1, 2], [2
#    ^  ^ you can't index   Nbrs before it created 
</snippet></ROW><ROW><id>21201303</id><snippet>Nbrs = [[1, 1], [1, 2], [2
# now after this statement, Nbrs a list of list you can access 
# its elements useng `Nbrs[i][j]`  for i &lt; len(Nbrs) and j &lt; 2 
</snippet></ROW><ROW><id>21201319</id><snippet>times = [{"Bob":14.05},{"Tim":15.09},{"Tim":17.01},{"Bob":16.81},{"Sarah":15.08}]
print sorted(times, key=lambda k: k.values())
</snippet></ROW><ROW><id>21201319</id><snippet>[{'Bob': 14.05},{'Sarah': 15.08}, {'Tim': 15.09}, {'Bob': 16.81}, {'Tim': 17.01}]
</snippet></ROW><ROW><id>21201319</id><snippet>values</snippet></ROW><ROW><id>21201319</id><snippet>print sorted(times, key=lambda k: k.values()[0])
</snippet></ROW><ROW><id>21201451</id><snippet>pip</snippet></ROW><ROW><id>21201451</id><snippet>/usr/bin/pip</snippet></ROW><ROW><id>21201451</id><snippet>pip</snippet></ROW><ROW><id>21201451</id><snippet>pip</snippet></ROW><ROW><id>21201451</id><snippet>site-packages</snippet></ROW><ROW><id>21201451</id><snippet>site-packages</snippet></ROW><ROW><id>21201451</id><snippet>pip</snippet></ROW><ROW><id>21201814</id><snippet>q</snippet></ROW><ROW><id>21201814</id><snippet>q</snippet></ROW><ROW><id>21201814</id><snippet>q</snippet></ROW><ROW><id>21201814</id><snippet>np.array(q)</snippet></ROW><ROW><id>21201814</id><snippet>q = np.array(q).T
</snippet></ROW><ROW><id>21201814</id><snippet>for</snippet></ROW><ROW><id>21201814</id><snippet>norm</snippet></ROW><ROW><id>21201814</id><snippet>axis</snippet></ROW><ROW><id>21201814</id><snippet>In [152]: np.set_printoptions(precision=3)

In [153]: np.random.seed(111)
</snippet></ROW><ROW><id>21201814</id><snippet>In [154]: v = 5e-9 * np.random.randint(0, 3, size=(3, 4))

In [155]: v
Out[155]: 
array([[  0.000e+00,   0.000e+00,   0.000e+00,   0.000e+00],
       [  1.000e-08,   5.000e-09,   1.000e-08,   1.000e-08],
       [  1.000e-08,   0.000e+00,   5.000e-09,   0.000e+00]])
</snippet></ROW><ROW><id>21201814</id><snippet>axis=0</snippet></ROW><ROW><id>21201814</id><snippet>numpy.linalg.norm</snippet></ROW><ROW><id>21201814</id><snippet>In [156]: L = np.sqrt(np.linalg.norm(v, axis=0))

In [157]: L
Out[157]: array([  1.189e-04,   7.071e-05,   1.057e-04,   1.000e-04])
</snippet></ROW><ROW><id>21201814</id><snippet>numpy.where</snippet></ROW><ROW><id>21201814</id><snippet>v</snippet></ROW><ROW><id>21201814</id><snippet>q</snippet></ROW><ROW><id>21201814</id><snippet>In [158]: scale = np.where(L &gt; 0.0001, L, 1000.0)

In [159]: scale
Out[159]: array([  1.189e-04,   1.000e+03,   1.057e-04,   1.000e+03])
</snippet></ROW><ROW><id>21201814</id><snippet>q</snippet></ROW><ROW><id>21201814</id><snippet>scale</snippet></ROW><ROW><id>21201814</id><snippet>q</snippet></ROW><ROW><id>21201814</id><snippet>scale</snippet></ROW><ROW><id>21201814</id><snippet>In [160]: q = v / scale

In [161]: q
Out[161]: 
array([[  0.000e+00,   0.000e+00,   0.000e+00,   0.000e+00],
       [  8.409e-05,   5.000e-12,   9.457e-05,   1.000e-11],
       [  8.409e-05,   0.000e+00,   4.729e-05,   0.000e+00]])
</snippet></ROW><ROW><id>21201814</id><snippet>L = np.sqrt(np.linalg.norm(v, axis=0))
scale = np.where(L &gt; 0.0001, L, 1000.0)
q = v / scale
</snippet></ROW><ROW><id>21201826</id><snippet>course_details = CourseDetail.objects.get(course__name='Django 101', date='2013-03-01')
cc_attendance = CourseDetailAttendance.objects.filter(course_details=course_details).count()
</snippet></ROW><ROW><id>21201826</id><snippet>course_details = CourseDetail.objects.filter(course__name='Django 101'))
cc_attendance = CourseDetailAttendance.objects.filter(course_details__in=course_details).count()
</snippet></ROW><ROW><id>21201826</id><snippet>class CourseDetail(models.Model):
    course      = models.ForeignKey(Course)
    date        = models.DateField(blank=True, null=True)
    renew_date  = models.DateField(blank=True, null=True, default=None)
    attendance  = models.ManyToManyField(Employee, through='CourseDetailAttendance')

    class Meta:
        unique_together = ('course', 'date')
</snippet></ROW><ROW><id>21202023</id><snippet>&gt;&gt;&gt; population = range(10)
</snippet></ROW><ROW><id>21202023</id><snippet>random.sample</snippet></ROW><ROW><id>21202023</id><snippet>&gt;&gt;&gt; names = random.sample(population, 5)
&gt;&gt;&gt; names
[4, 0, 1, 2, 8]
</snippet></ROW><ROW><id>21202023</id><snippet>random.randint</snippet></ROW><ROW><id>21202023</id><snippet>&gt;&gt;&gt; names = [population[random.randint(0, len(population)-1)] for x in range(5)]
&gt;&gt;&gt; names
[2, 8, 6, 6, 9]
</snippet></ROW><ROW><id>21202023</id><snippet>def custom_sample(population, count):
    names = []
    already_used = []
    for x in range(count):
        temp_index = random.randint(0, len(population)-1)
        while temp_index in already_used:
            temp_index = random.randint(0, len(population)-1)
        names.append(population[temp_index])
        already_used.append(temp_index)
    return names
</snippet></ROW><ROW><id>21202023</id><snippet>&gt;&gt;&gt; names = custom_sample(population, 5)
&gt;&gt;&gt; names
[7, 4, 8, 3, 0]
</snippet></ROW><ROW><id>21202172</id><snippet>*</snippet></ROW><ROW><id>21202172</id><snippet>&gt;&gt;&gt; a = [1,2,3]
&gt;&gt;&gt; b = [ ['a', 'b', 'c'], ['1', '2', '3']  ]
&gt;&gt;&gt; zip(a, *b)
[(1, 'a', '1'), (2, 'b', '2'), (3, 'c', '3')]
</snippet></ROW><ROW><id>21202208</id><snippet>self.visitedLinkDictionary[link] == 1</snippet></ROW><ROW><id>21202208</id><snippet>in</snippet></ROW><ROW><id>21202208</id><snippet>linkList[:] = [link for link in linkList 
               if self.visitedLinkDictionary[link] == 1 and 
                  "some string" in link.split('/')[2]]
</snippet></ROW><ROW><id>21202382</id><snippet>mainloop</snippet></ROW><ROW><id>21202382</id><snippet>import Tkinter as Tk
import pygame

root = Tk.Tk()
root.title('Intro')

playButton = Tk.Button(root, text='Play', command=root.destroy)
playButton.pack()

root.mainloop() # Rest of the script won't execute until playButton pressed

# Initialize pygame window
</snippet></ROW><ROW><id>21202483</id><snippet>itertools.combinations</snippet></ROW><ROW><id>21202483</id><snippet>&gt;&gt;&gt; {keys: 0 for keys in itertools.combinations(items, 2)}
{(1, 2): 0, (2, 4): 0, (1, 4): 0}
</snippet></ROW><ROW><id>21202483</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>21202483</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>21202483</id><snippet>&gt;&gt;&gt; dict.fromkeys(itertools.combinations(items, 2), 0)
{(1, 2): 0, (2, 4): 0, (1, 4): 0}

&gt;&gt;&gt; dict.fromkeys(itertools.combinations(items, 3), 0)
{(1, 2, 4): 0}
</snippet></ROW><ROW><id>21202562</id><snippet>indices = []
for x in range(5):
    index = random.randint(0, len(population)-1)
    while index in indices:
        index = random.randint(0, len(population)-1)
    indices.append(index)
names = [population[i] for i in indices]
</snippet></ROW><ROW><id>21202627</id><snippet>p</snippet></ROW><ROW><id>21202627</id><snippet>p</snippet></ROW><ROW><id>21202627</id><snippet>reverse(p)</snippet></ROW><ROW><id>21202627</id><snippet>p</snippet></ROW><ROW><id>21202627</id><snippet>p</snippet></ROW><ROW><id>21202627</id><snippet>p</snippet></ROW><ROW><id>21202627</id><snippet>p</snippet></ROW><ROW><id>21202627</id><snippet>reverse(p)</snippet></ROW><ROW><id>21202627</id><snippet>3797</snippet></ROW><ROW><id>21202627</id><snippet>7973</snippet></ROW><ROW><id>21202627</id><snippet>reverse</snippet></ROW><ROW><id>21202627</id><snippet>IndexError</snippet></ROW><ROW><id>21202627</id><snippet>p</snippet></ROW><ROW><id>21202627</id><snippet>p</snippet></ROW><ROW><id>21202627</id><snippet>reverse(p)</snippet></ROW><ROW><id>21202627</id><snippet>ctr &lt; 11</snippet></ROW><ROW><id>21202627</id><snippet>sieve[len(sieve)]</snippet></ROW><ROW><id>21202627</id><snippet>IndexError</snippet></ROW><ROW><id>21202886</id><snippet>python setup.py register
</snippet></ROW><ROW><id>21202886</id><snippet>python setup.py sdist bdist_wininst upload
</snippet></ROW><ROW><id>21203130</id><snippet>class Entry(models.Model):
    name = models.CharField()


class EntryForm(forms.ModelForm):
    class Meta:
        model = Entry

for line in lines:
    data = parse_line(line)
    form = EntryForm(data)
    if form.is_valid():
        form.save()
    else:
        print("form not valid: %s" % form.errors)
</snippet></ROW><ROW><id>21203511</id><snippet>trends1</snippet></ROW><ROW><id>21203511</id><snippet>trends1 = api.trends_place(1) # from the end of your code
# trends1 is a list with only one element in it, which is a 
# dict which we'll put in data.
data = trends1[0] 
# grab the trends
trends = data['trends']
# grab the name from each trend
names = [trend['name'] for trend in trends]
# put all the names together with a ' ' separating them
trendsName = ' '.join(names)
print(trendsName)
</snippet></ROW><ROW><id>21203511</id><snippet>#PolandNeedsWWATour #DownloadElyarFox #D√ºnM√ºrteciBug√ºnHa≈üha≈üi #Galatasaraylƒ±lƒ±kNedir #KnowTheTruth Tameni Video Anisa Rahma Mikaeel Manado JDT
</snippet></ROW><ROW><id>21203736</id><snippet>s</snippet></ROW><ROW><id>21203736</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(s)
print soup.find(attrs={'id' : 'postingbody'})
</snippet></ROW><ROW><id>21203736</id><snippet>&lt;section id="postingbody"&gt;
            some posting info
            &lt;br/&gt;
             more posting info
             &lt;br/&gt;
&lt;/section&gt;
</snippet></ROW><ROW><id>21203899</id><snippet># Add new to old and sort the whole lot...
old_hash_list.extend(new_hash_list)
old_hash_list.sort()

# Assuming new is already sorted than create new list of merged
import heapq
old_and_new = list(heapq.merge(old_hash_list, sorted(new_hash_list)))
</snippet></ROW><ROW><id>21203968</id><snippet>&gt;&gt;&gt; a = np.array([[1,255,3,255], [1,2,3,234], [1,2,3,255],])
&gt;&gt;&gt; a
array([[  1, 255,   3, 255],
       [  1,   2,   3, 234],
       [  1,   2,   3, 255]])

&gt;&gt;&gt; a[a[:,-1] == 255, -1] = 0  # &lt;---
&gt;&gt;&gt; a
array([[  1, 255,   3,   0],
       [  1,   2,   3, 234],
       [  1,   2,   3,   0]])
</snippet></ROW><ROW><id>21204818</id><snippet>_</snippet></ROW><ROW><id>21204818</id><snippet>_</snippet></ROW><ROW><id>21204818</id><snippet>_</snippet></ROW><ROW><id>21204818</id><snippet>uggettext</snippet></ROW><ROW><id>21204818</id><snippet>_</snippet></ROW><ROW><id>21204818</id><snippet>__builtin__</snippet></ROW><ROW><id>21204818</id><snippet>_</snippet></ROW><ROW><id>21204818</id><snippet>_</snippet></ROW><ROW><id>21204818</id><snippet>gettext</snippet></ROW><ROW><id>21204882</id><snippet>fmt="%g"</snippet></ROW><ROW><id>21204882</id><snippet>savetxt()</snippet></ROW><ROW><id>21204882</id><snippet>import numpy as np
a = np.random.randint(0, 100, 10)
b = np.random.rand(10, 3)

v = np.hstack((a[:,None],b))

import io

t = io.BytesIO()

np.savetxt(t, v, fmt="%g", delimiter=",")
print t.getvalue()
</snippet></ROW><ROW><id>21204882</id><snippet>58,0.565189,0.865103,0.508969
23,0.916723,0.921158,0.0831125
59,0.277719,0.0093567,0.842342
2,0.647174,0.841386,0.26473
98,0.397821,0.552821,0.16494
62,0.369808,0.146442,0.569618
35,0.703737,0.288476,0.433288
94,0.756107,0.396098,0.896038
67,0.638921,0.891554,0.680056
82,0.449198,0.978571,0.116202
</snippet></ROW><ROW><id>21204887</id><snippet>x</snippet></ROW><ROW><id>21204887</id><snippet>import pylab as p
import numpy as np
x = p.linspace(-1.0, 1.0, 1000)
y = (p.sin(2 * p.pi * x)) / (p.cos(2 * p.pi * x))
p.plot(x, y, 'g-', lw=1)
p.show()
</snippet></ROW><ROW><id>21204887</id><snippet>y-range</snippet></ROW><ROW><id>21204887</id><snippet>import pylab as p
import numpy as np
x = p.linspace(-1.0, 1.0, 1000)
y = (p.sin(2 * p.pi * x)) / (p.cos(2 * p.pi * x))

tol = 10
y[y &gt; tol] = np.nan
y[y &lt; -tol] = np.nan

p.plot(x, y, 'g-', lw=1)
p.show()
</snippet></ROW><ROW><id>21205036</id><snippet>tk_popup</snippet></ROW><ROW><id>21205036</id><snippet>post</snippet></ROW><ROW><id>21205089</id><snippet>&gt;&gt;&gt; s = '365\t179\r\n96\t-90\r\n48\t-138\r\n12\t-174\r\n30\t-156\r\n'
&gt;&gt;&gt; [map(int, x.split('\t')) for x in s.rstrip().split('\r\n')]
[[365, 179], [96, -90], [48, -138], [12, -174], [30, -156]]
</snippet></ROW><ROW><id>21205089</id><snippet>from ast import literal_eval
def solve(x):
    try:
        return literal_eval(x)
    except (ValueError, SyntaxError):
        return x

s = '365\tFoo\r\nBar\t-90.01\r\n48\tspam\r\n12e10\t-174\r\n30\t-156\r\n'
print [map(solve, x.split('\t')) for x in s.rstrip().split('\r\n')]
#[[365, 'Foo'], ['Bar', -90.01], [48, 'spam'], [120000000000.0, -174], [30, -156]]
</snippet></ROW><ROW><id>21205147</id><snippet>Sum</snippet></ROW><ROW><id>21205147</id><snippet>In [107]: grouped['Sum'] = grouped['C']+grouped['D']
</snippet></ROW><ROW><id>21205147</id><snippet>grouped</snippet></ROW><ROW><id>21205147</id><snippet>In [108]: grouped
Out[108]: 
          C   D  Sum
A   B               
bar one   2   2    4
    two  12  12   24
foo one  -1  -1   -2
    two   8   8   16

[4 rows x 3 columns]
</snippet></ROW><ROW><id>21205147</id><snippet>Sum</snippet></ROW><ROW><id>21205147</id><snippet>In [109]: grouped[['Sum']]
Out[109]: 
         Sum
A   B       
bar one    4
    two   24
foo one   -2
    two   16

[4 rows x 1 columns]
</snippet></ROW><ROW><id>21205619</id><snippet>csv</snippet></ROW><ROW><id>21205619</id><snippet>import csv

with open('file2.csv', 'rb') as updates_fh:
    updates = {tuple(r[:2]): r for r in csv.reader(updates_fh)}

with open('file1.csv', 'rb') as infh, open('output.csv', 'wb') as outfh:
    writer = csv.writer(outfh)
    writer.writerows((updates.get(tuple(r[:2]), r) for r in csv.reader(infh)))
</snippet></ROW><ROW><id>21205619</id><snippet>with</snippet></ROW><ROW><id>21205619</id><snippet>updates</snippet></ROW><ROW><id>21205807</id><snippet>title = soup.find('title')
if title:
    print title.text
</snippet></ROW><ROW><id>21205807</id><snippet>if len(titles) &lt; i: # Doens't have the index
    return
</snippet></ROW><ROW><id>21205851</id><snippet>from random import choice
def String(length):

   DNA=""
   for count in range(length):
      DNA+=choice("CGTA")
      return DNA
</snippet></ROW><ROW><id>21205851</id><snippet>return</snippet></ROW><ROW><id>21205851</id><snippet>for</snippet></ROW><ROW><id>21205851</id><snippet>return</snippet></ROW><ROW><id>21205851</id><snippet>return</snippet></ROW><ROW><id>21205851</id><snippet>return</snippet></ROW><ROW><id>21205851</id><snippet>def String(length):

       DNA=""
       for count in range(length):
          DNA+=choice("CGTA")
       return DNA
</snippet></ROW><ROW><id>21205851</id><snippet>def weightedchoice(items): # this doesn't require the numbers to add up to 100
    return choice("".join(x * y for x, y in items))
</snippet></ROW><ROW><id>21205851</id><snippet>weightedchoice</snippet></ROW><ROW><id>21205851</id><snippet>choice</snippet></ROW><ROW><id>21205851</id><snippet>DNA+=weightedchoice([("C", 10], ("G", 20), ("A", 40"), ("T", 30)])</snippet></ROW><ROW><id>21205979</id><snippet>pixels[(x, y)]</snippet></ROW><ROW><id>21205979</id><snippet>pixles[x, y]</snippet></ROW><ROW><id>21205979</id><snippet>#-*- coding: utf-8 -*-
#!python
from PIL import Image

width = 4
height = 4
background = (0, 0, 0, 255)

image = Image.new("RGBA", (width, height), background)
pixels = image.load()

pixels[0, 0] = (255, 0, 0, 255)
pixels[0, 3] = (0, 255, 0, 255)
pixels[3, 3] = (0, 0, 255, 255)
pixels[3, 0] = (255, 255, 255, 255)

image.save("image.png")
</snippet></ROW><ROW><id>21206132</id><snippet>termrelation_set__term_type</snippet></ROW><ROW><id>21206132</id><snippet>termrelation__term_type</snippet></ROW><ROW><id>21206132</id><snippet>As you are using an intermediate model, you can also query on its attributes:

# Find all the members of the Beatles that joined after 1 Jan 1961
&gt;&gt;&gt; Person.objects.filter(
...     group__name='The Beatles',
...     membership__date_joined__gt=date(1961,1,1))
[&lt;Person: Ringo Starr]
</snippet></ROW><ROW><id>21206556</id><snippet>for txt, val in languages:
    Radiobutton(root, 
                text=txt,
                padx = 20, 
                variable=v, 
                command=lambda: ShowChoice(root),
                value=val).pack(anchor=W)
</snippet></ROW><ROW><id>21206556</id><snippet>def ShowChoice(root):
    world = v.get()
    if world == 0:
       root.destroy()
</snippet></ROW><ROW><id>21207247</id><snippet>next()</snippet></ROW><ROW><id>21207247</id><snippet>with open('filename') as f:
    for line in f:
       if line.split()[0] == '256':
          for _ in xrange(500):
              line = next(f)
              #do something with line
</snippet></ROW><ROW><id>21207247</id><snippet>StopIteration</snippet></ROW><ROW><id>21207247</id><snippet>try-except</snippet></ROW><ROW><id>21207247</id><snippet>itertools.islice</snippet></ROW><ROW><id>21207247</id><snippet>from itertools import islice
with open('filename') as f:
    for line in f:
       if line.split()[0] == '256':
          XO =[line.split(None, 4)[3] for line in islice(f, 500)]
          #Write XO to a file
</snippet></ROW><ROW><id>21207247</id><snippet>line.split()[0] == '256'</snippet></ROW><ROW><id>21207247</id><snippet>line.startswith('256 ')</snippet></ROW><ROW><id>21207247</id><snippet>line.split(None, 1)[0] == '256'</snippet></ROW><ROW><id>21207631</id><snippet>from tornado import httpclient
from tornado.httpclient import HTTPRequest

    client = httpclient.HTTPClient()
    request = HTTPRequest(url='http://google.com/', method="GET")
    try:
        res = client.fetch(request)
        print(res.body)
    except HTTPError as err:
        res = err.response
        if res:
            print(res.body)
</snippet></ROW><ROW><id>21207641</id><snippet>sudo pip install --upgrade setuptools
</snippet></ROW><ROW><id>21207771</id><snippet>threads = []
for startX in xrange(0, width, threadChunk):
    t = Thread(target = threaded_chunk, args = (thread_num, startX, startX + threadChunk, 1, 0, height, 1))
    threads.append(t)
    print 'next thread'

[t.start() for t in threads]
[t.join() for t in threads]
</snippet></ROW><ROW><id>21207782</id><snippet>import pandas as pd
from StringIO import StringIO
import matplotlib.pyplot as plt

input = """2000;"SCHOOLS OF MEDICINE";416765.0
2000;"SCHOOLS OF ARTS AND SCIENCES";36000.0
2000;"SCHOOLS OF MEDICINE";2000.0
2000;"SCHOOLS OF MEDICINE";179728.0
2001;"SCHOOLS OF MEDICINE";1234.0
2001;"SCHOOLS OF ARTS AND SCIENCES";100.0
2002;"SCHOOLS OF MEDICINE";9999.0
2002;"SCHOOLS OF MEDICINE";8436.0"""

df = pd.read_csv(StringIO(input), sep=';', header=None, names=['year', 'division', 'award'])
print df
yeartotals = df.groupby(['year'])[['award']].sum()
print yeartotals
yeartotals.plot()
plt.show()
</snippet></ROW><ROW><id>21207795</id><snippet>import re
Z3N = re.sub(r"\b(?&lt;!\.)(\d+)(?!\.)\b", r"\1.0", Z3N)
</snippet></ROW><ROW><id>21207795</id><snippet>\b(?&lt;!\.|\[)(\d+)(?!\.|\])\b
</snippet></ROW><ROW><id>21207795</id><snippet>(\d+)</snippet></ROW><ROW><id>21207795</id><snippet>(?&lt;!\.|\[)</snippet></ROW><ROW><id>21207795</id><snippet>.0</snippet></ROW><ROW><id>21207795</id><snippet>\b</snippet></ROW><ROW><id>21207795</id><snippet>(?!\.|\[)</snippet></ROW><ROW><id>21207795</id><snippet>\b</snippet></ROW><ROW><id>21207795</id><snippet>\1.0</snippet></ROW><ROW><id>21207795</id><snippet>\1</snippet></ROW><ROW><id>21207795</id><snippet>.0</snippet></ROW><ROW><id>21207795</id><snippet>r</snippet></ROW><ROW><id>21207795</id><snippet>\</snippet></ROW><ROW><id>21207803</id><snippet>models</snippet></ROW><ROW><id>21207803</id><snippet>forms</snippet></ROW><ROW><id>21207803</id><snippet>#django</snippet></ROW><ROW><id>21207932</id><snippet>class CronJobExpire(BaseHandler):
    def get(self):
        jobs = Job.query(Job.published == "on").fetch()
        now = datetime.datetime.now()
        for job in jobs:
            if job.expire &lt;= now:
                job.published = "off"    
                job.put()
</snippet></ROW><ROW><id>21207932</id><snippet>now = datetime.datetime.now()    
jobs = Job.query(Job.published == "on", Job.expire &lt;= now).fetch()
for job in jobs:
    job.published = "off"
    job.put()
</snippet></ROW><ROW><id>21207932</id><snippet>now = datetime.datetime.now()    
jobs = Job.query(Job.published == "on", Job.expire &lt;= now).fetch()
for job in jobs:
    job.published = "off"
ndb.put_multi(jobs)
</snippet></ROW><ROW><id>21207932</id><snippet>published = ndb.BooleanProperty(default=True)
</snippet></ROW><ROW><id>21207957</id><snippet>groupby(['A', 'B'])</snippet></ROW><ROW><id>21207957</id><snippet>index=False</snippet></ROW><ROW><id>21207957</id><snippet>a.to_csv("test.csv", cols=['sum'])
</snippet></ROW><ROW><id>21208063</id><snippet>x</snippet></ROW><ROW><id>21208063</id><snippet>x = -1</snippet></ROW><ROW><id>21208063</id><snippet>((-1)**2)**(1/3) == 1**(1/3) == 1</snippet></ROW><ROW><id>21208063</id><snippet>(-1)**(2/3) = -1/2 + sqrt(3)/2*I</snippet></ROW><ROW><id>21208063</id><snippet>x</snippet></ROW><ROW><id>21208063</id><snippet>(x**a)**b == x**(a*b)</snippet></ROW><ROW><id>21208063</id><snippet>b</snippet></ROW><ROW><id>21208063</id><snippet>x</snippet></ROW><ROW><id>21208063</id><snippet>&gt;&gt;&gt; x = symbols('x', positive=True)
&gt;&gt;&gt; (x**2)**(S(1)/3)
x**(2/3)
</snippet></ROW><ROW><id>21208063</id><snippet>posify</snippet></ROW><ROW><id>21208063</id><snippet>&gt;&gt;&gt; posify((x**2)**(S(1)/3))
(_x**(2/3), {_x: x})
</snippet></ROW><ROW><id>21208063</id><snippet>locals</snippet></ROW><ROW><id>21208063</id><snippet>sympify</snippet></ROW><ROW><id>21208063</id><snippet>{'x': Symbol('x', positive=True}</snippet></ROW><ROW><id>21208063</id><snippet>powdenest</snippet></ROW><ROW><id>21208063</id><snippet>&gt;&gt;&gt; x = symbols('x') # No assumptions on x
&gt;&gt;&gt; (x**2)**(S(1)/3)
(x**2)**(1/3)
&gt;&gt;&gt; powdenest((x**2)**(S(1)/3), force=True)
x**(2/3)
</snippet></ROW><ROW><id>21208087</id><snippet>str.index</snippet></ROW><ROW><id>21208087</id><snippet>link = 'mysite.com?url=https://anothersite.com&amp;text=some text'

&gt;&gt;&gt; link[:link.index('=')] + '=' + urllib.quote(link[link.index('=')+1:])
'mysite.com?url=https%3A//anothersite.com%26text%3Dsome%20text'
</snippet></ROW><ROW><id>21208125</id><snippet>globals()</snippet></ROW><ROW><id>21208125</id><snippet>b.py</snippet></ROW><ROW><id>21208125</id><snippet>deepcopy</snippet></ROW><ROW><id>21208125</id><snippet>globals()</snippet></ROW><ROW><id>21208125</id><snippet>a.py</snippet></ROW><ROW><id>21208125</id><snippet>deepcopy</snippet></ROW><ROW><id>21208125</id><snippet>type()</snippet></ROW><ROW><id>21208125</id><snippet>a.py</snippet></ROW><ROW><id>21208125</id><snippet>from copy import deepcopy
import types
import a

def class_c(c):
    #To create a copy of class object
    return type(c.__name__, c.__bases__, dict(c.__dict__))

filtered_a_dict = {k:v for k, v in a.__dict__.items()
                                   if not (k.startswith('__') and k.endswith('__'))}

globals().update({k:deepcopy(v) if not isinstance(v, types.TypeType) 
                               else class_c(v) for k, v in filtered_a_dict.items()})

del a
</snippet></ROW><ROW><id>21208125</id><snippet>&gt;&gt;&gt; import a, b
&gt;&gt;&gt; b.Original.name = 'bar'
&gt;&gt;&gt; a.Original.name == 'bar'
False
</snippet></ROW><ROW><id>21208321</id><snippet>from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.animation as animation
map = Basemap(projection='robin', resolution = 'l', area_thresh = 1000.0,
          lat_0=0, lon_0=-130)
map.drawcoastlines()
map.drawcountries()
map.fillcontinents(color = 'gray')
map.drawmapboundary()
map.drawmeridians(np.arange(0, 360, 30))
map.drawparallels(np.arange(-90, 90, 30))

x,y = map(0, 0)
point = map.plot(x, y, 'ro', markersize=5)[0]

def init():
    point.set_data([], [])
    return point,

# animation function.  This is called sequentially
def animate(i):
    lons, lats =  np.random.random_integers(-130, 130, 2)
    x, y = map(lons, lats)
    point.set_data(x, y)
    return point,

# call the animator.  blit=True means only re-draw the parts that have changed.
anim = animation.FuncAnimation(plt.gcf(), animate, init_func=init,
                               frames=20, interval=500, blit=True)

plt.show()
</snippet></ROW><ROW><id>21208331</id><snippet>Toy</snippet></ROW><ROW><id>21208331</id><snippet>play</snippet></ROW><ROW><id>21208331</id><snippet>play</snippet></ROW><ROW><id>21208331</id><snippet>Dog</snippet></ROW><ROW><id>21208331</id><snippet>dog.call()</snippet></ROW><ROW><id>21208331</id><snippet>'Yip ' + self.toy.play()</snippet></ROW><ROW><id>21208331</id><snippet>None</snippet></ROW><ROW><id>21208331</id><snippet>Dog.call()</snippet></ROW><ROW><id>21208331</id><snippet>if n &lt;= 0:
    return ''
else:
    phrases = ['Yip ' + self.toy.play() for i in range(n)]
    return '\n'.join (phrases)
</snippet></ROW><ROW><id>21208331</id><snippet>phrases</snippet></ROW><ROW><id>21208331</id><snippet>n</snippet></ROW><ROW><id>21208331</id><snippet>'Yip ' + self.toy.play()</snippet></ROW><ROW><id>21208331</id><snippet>\n</snippet></ROW><ROW><id>21208410</id><snippet>import BeautifulSoup

negative_keywords = ['basement', 'unfinished', 'hardwood']

html = '''
&lt;section id="postingbody"&gt;
    Looking for a corporate rental, this beautiful decorated 5 BR,
    4.5 BA two story house is in a desirable location, 7 minutes off
    I 85. Beautiful solid cherry cabinets in kitchen and laundry room.
    All stainless steel appliances. Hardwood floors in kitchen and foyer,
    Ceramic tile floors in all bathrooms, laundry room, dining room and sunroom.

    &lt;br&gt;
    &lt;/br&gt;

&lt;/section&gt;
'''

soup = BeautifulSoup.BeautifulSoup(html)
bodyContents = soup.find(attrs={'id' : 'postingbody'})

if any([k in bodyContents.getText().lower() for k in negative_keywords]):
    print "keyword was found"
</snippet></ROW><ROW><id>21208425</id><snippet>cv2</snippet></ROW><ROW><id>21208425</id><snippet>import cv2

cv2.namedWindow("lll")
cap = cv2.VideoCapture(0)
while True:
    ret,img = cap.read()
    cv2.imshow("lll",img)
    k = cv2.waitKey(10)
    if k == 27:
        break
</snippet></ROW><ROW><id>21208526</id><snippet>getattr</snippet></ROW><ROW><id>21208526</id><snippet>self.button[i].clicked.connect(getattr(self, '_'.format(j)))
</snippet></ROW><ROW><id>21208780</id><snippet>itertools.product</snippet></ROW><ROW><id>21208780</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; list(product(range(1, 4), repeat=3))
[(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3, 2), (1, 3, 3), (2, 1, 1), (2, 1, 2), (2, 1, 3), (2, 2, 1), (2, 2, 2), (2, 2, 3), (2, 3, 1), (2, 3, 2), (2, 3, 3), (3, 1, 1), (3, 1, 2), (3, 1, 3), (3, 2, 1), (3, 2, 2), (3, 2, 3), (3, 3, 1), (3, 3, 2), (3, 3, 3)]
</snippet></ROW><ROW><id>21208973</id><snippet>A</snippet></ROW><ROW><id>21208973</id><snippet>B</snippet></ROW><ROW><id>21208973</id><snippet>B = (A/500.0) * 360
</snippet></ROW><ROW><id>21208973</id><snippet>def get_b(a):
    return (a/500.0) * 360

print get_b(500)
print get_b(250)
print get_b(125)
</snippet></ROW><ROW><id>21208973</id><snippet>360.0
180.0
90.0
</snippet></ROW><ROW><id>21209103</id><snippet>punctuation_i_care_about="?.!"
split_by_punc =  re.split("[%s]"%punctuation_i_care_about, some_big_block_of_text)
words_by_puct = [len(x.split()) for x in split_by_punc]
</snippet></ROW><ROW><id>21209161</id><snippet>[^\P{P}-]+
</snippet></ROW><ROW><id>21209161</id><snippet>\P</snippet></ROW><ROW><id>21209161</id><snippet>\p</snippet></ROW><ROW><id>21209161</id><snippet>\p{P}(?&lt;!-)</snippet></ROW><ROW><id>21209334</id><snippet>manager_that_queries_both.all</snippet></ROW><ROW><id>21209334</id><snippet>Material.objects.select_subclasses()
</snippet></ROW><ROW><id>21209456</id><snippet>d = {'a': 'x', 'b': 'y', 'c': 'x'}

def has_unique_value(k):
    return d.values().count(d[k]) == 1

def keys_with_same_value_as_key(k):
    return set([key for key in d.keys() if d[key] == d[k]])

print( {d[k]:k if has_unique_value(k) else keys_with_same_value_as_key(k) for k in d.keys()} )
</snippet></ROW><ROW><id>21209456</id><snippet>{'y': 'b', 'x': set(['a', 'c'])}
</snippet></ROW><ROW><id>21209456</id><snippet>d[k]:</snippet></ROW><ROW><id>21209456</id><snippet>a = val_if_true if test else val_if_false
</snippet></ROW><ROW><id>21209456</id><snippet>a = val_if_true if test else a = val_if_false
</snippet></ROW><ROW><id>21209456</id><snippet>m = {}
for k in d.keys():
    orig_key = k
    orig_val = d[k]

    if has_unique_value(k):
        m[orig_val] = orig_key
    else:
        m[orig_val] = keys_with_same_value_as_key(orig_key)

print m
</snippet></ROW><ROW><id>21209456</id><snippet>m</snippet></ROW><ROW><id>21209456</id><snippet>orig_key</snippet></ROW><ROW><id>21209456</id><snippet>orig_val</snippet></ROW><ROW><id>21209526</id><snippet>starts-with</snippet></ROW><ROW><id>21209526</id><snippet>hxs.select('.//div[starts-with(@id, 'edit')]')
</snippet></ROW><ROW><id>21209627</id><snippet>Clear</snippet></ROW><ROW><id>21209627</id><snippet>from kivy.app import App
from kivy.uix.widget import Widget
from kivy.lang import Builder

kv_string = '''
&lt;MyWidget&gt;:
    canvas:
        Color:
            rgb: 0.1, 0.6, 0.3
        Ellipse:
            size: self.size     
            pos: self.pos
        Clear
        Color:
            rgb: 0.6, 0.2, 0.1
        Ellipse:
            size: self.size     
            pos: self.center
'''

Builder.load_string(kv_string)

class MyWidget(Widget):
    pass

class TestApp(App):
    def build(self):
        return MyWidget()

if __name__ == '__main__':
    TestApp().run()
</snippet></ROW><ROW><id>21209627</id><snippet>Clear</snippet></ROW><ROW><id>21209627</id><snippet>class SomeWidget(Widget):
    def some_method(self):
        self.canvas.clear()
        with self.canvas:
            # ...
</snippet></ROW><ROW><id>21209703</id><snippet>dos2unix</snippet></ROW><ROW><id>21209703</id><snippet>\r\n</snippet></ROW><ROW><id>21209703</id><snippet>\n</snippet></ROW><ROW><id>21209747</id><snippet>sqlalchemy.inspection.inspect</snippet></ROW><ROW><id>21209747</id><snippet>inspect</snippet></ROW><ROW><id>21209747</id><snippet>Thing</snippet></ROW><ROW><id>21209747</id><snippet>Mapper</snippet></ROW><ROW><id>21209747</id><snippet>relationships</snippet></ROW><ROW><id>21209747</id><snippet>from sqlalchemy.inspection import inspect

thing_relations = inspect(Thing).relationships
</snippet></ROW><ROW><id>21209794</id><snippet>message</snippet></ROW><ROW><id>21209794</id><snippet>str</snippet></ROW><ROW><id>21209794</id><snippet>'–ü—Ä–∏–≤–µ—Ç ‰∏ñÁïå'</snippet></ROW><ROW><id>21209794</id><snippet>message.encode('utf-8')</snippet></ROW><ROW><id>21209794</id><snippet>message1.decode('urf-8')</snippet></ROW><ROW><id>21209996</id><snippet>def is_just_outside(fig, event):
    x,y = event.x, event.y
    print x, y
    for ax in fig.axes:
        xAxes, yAxes =  ax.transAxes.inverted().transform([x, y])
        print xAxes, yAxes
        if  (-0.02 &lt; xAxes &lt; 0) | (1 &lt; xAxes &lt; 1.02):
            print "just outside x-axis"
        if  (-0.02 &lt; yAxes &lt; 0) | (1 &lt; yAxes &lt; 1.02):
            print "just outside y-axis"

x = np.linspace(-np.pi,np.pi,100)
y = np.sin(x)
fig = plt.figure()
plt.plot(x,y)
ax = fig.add_subplot(111)
fig.canvas.mpl_connect('button_press_event', lambda e: is_just_outside(fig, e))
plt.show()
</snippet></ROW><ROW><id>21210673</id><snippet>map()</snippet></ROW><ROW><id>21210673</id><snippet>itertools</snippet></ROW><ROW><id>21210673</id><snippet>consume</snippet></ROW><ROW><id>21210673</id><snippet>from collections import deque

deque(map(somefunc, ((i,d) for i in range(10**3))), maxlen=0)
</snippet></ROW><ROW><id>21210673</id><snippet>collections.deque()</snippet></ROW><ROW><id>21210673</id><snippet>map()</snippet></ROW><ROW><id>21210673</id><snippet>deque</snippet></ROW><ROW><id>21210725</id><snippet>def both_decorators(func):
    return decorator1(decorator2(func))
</snippet></ROW><ROW><id>21210737</id><snippet>&gt;&gt;&gt; a, b, c = object(), object(), object()
&gt;&gt;&gt; lst0 = [a, b, c]
&gt;&gt;&gt; lst1 = list(reversed([c, b, a]))
&gt;&gt;&gt; id(lst0), id(lst1)
(4418696712, 4399675656)
&gt;&gt;&gt; id(lst0[0]), id(lst1[0])
(4298830320, 4298830320)
</snippet></ROW><ROW><id>21210737</id><snippet>old_list[:]</snippet></ROW><ROW><id>21210737</id><snippet>list(old_list)</snippet></ROW><ROW><id>21210737</id><snippet>copy.copy(old_list)</snippet></ROW><ROW><id>21210737</id><snippet>[copy.copy(x) for x in old_lst]</snippet></ROW><ROW><id>21210737</id><snippet>copy.deepcopy(old_lst)</snippet></ROW><ROW><id>21210737</id><snippet>id</snippet></ROW><ROW><id>21210737</id><snippet>new</snippet></ROW><ROW><id>21210737</id><snippet>int(x*2.0+0.1)//2</snippet></ROW><ROW><id>21210737</id><snippet>&gt;&gt;&gt; 123456 is 123456
True
&gt;&gt;&gt; a = 123456
&gt;&gt;&gt; a is 123456
False
</snippet></ROW><ROW><id>21210737</id><snippet>&gt;&gt;&gt; def f():
...     a = 123456
...     return a is 123456
&gt;&gt;&gt; f()
True
</snippet></ROW><ROW><id>21210737</id><snippet>None</snippet></ROW><ROW><id>21210737</id><snippet>id</snippet></ROW><ROW><id>21210737</id><snippet>id</snippet></ROW><ROW><id>21210737</id><snippet>id</snippet></ROW><ROW><id>21210737</id><snippet>id</snippet></ROW><ROW><id>21210737</id><snippet>PyObject*</snippet></ROW><ROW><id>21210737</id><snippet>id</snippet></ROW><ROW><id>21210953</id><snippet>277.9</snippet></ROW><ROW><id>21210953</id><snippet>277.9</snippet></ROW><ROW><id>21210953</id><snippet>print('%.40f' % a)
277.8999999999999772626324556767940521240234
</snippet></ROW><ROW><id>21210953</id><snippet>decimal</snippet></ROW><ROW><id>21210953</id><snippet>from decimal import Decimal

values = [
    ('tens',   Decimal(10)),
    ('fives',  Decimal(5)),
    ('ones',   Decimal(1)),
    ('tenths', Decimal('0.1'))
]

def get_digits(num):
    output_dict = {}
    for place, value in values:
        output_dict[place] = int(num // value)  # Cast from Decimal to int
        num = num % value
    return output_dict

num = Decimal('277.9')
print(get_digits(num))
# {'tens': 27, 'ones': 2, 'tenths': 9, 'fives': 1}

num = Decimal('277.6')
print(get_digits(num))
#{'tens': 27, 'ones': 2, 'tenths': 6, 'fives': 1}
</snippet></ROW><ROW><id>21211022</id><snippet>tastyfood.py</snippet></ROW><ROW><id>21211022</id><snippet>tastyfood/
    __init__.py
    chocolate.py
    sweets.py
    crisps.py
    tuna.py

example.py  # example file quoted above
</snippet></ROW><ROW><id>21211022</id><snippet>__init__.py</snippet></ROW><ROW><id>21211022</id><snippet>from chocolate import Chocolate
from sweets import Sweet
# ... import everything you want in the tastyfood namespace
</snippet></ROW><ROW><id>21211022</id><snippet>example.py</snippet></ROW><ROW><id>21211022</id><snippet>import tastyfood
choco = tastyfood.Chocolate()

from tastyfood import Chocolate
choco = Chocolate()

from tastyfood.chocolate import Chocolate  # still works too
choco = Chocolate()  
</snippet></ROW><ROW><id>21211140</id><snippet>Queue._put</snippet></ROW><ROW><id>21211140</id><snippet>Queue.put</snippet></ROW><ROW><id>21211140</id><snippet>_put</snippet></ROW><ROW><id>21211140</id><snippet>Queue</snippet></ROW><ROW><id>21211400</id><snippet>i</snippet></ROW><ROW><id>21211400</id><snippet>0</snippet></ROW><ROW><id>21211400</id><snippet>1</snippet></ROW><ROW><id>21211400</id><snippet>return lst[i][1]
</snippet></ROW><ROW><id>21211400</id><snippet>next()</snippet></ROW><ROW><id>21211400</id><snippet>def func(number):
    return next(t[1] for t in lst if t[0] == number)
</snippet></ROW><ROW><id>21211492</id><snippet>import matplotlib.pyplot as plt
import numpy as np

#Random sample data
x = np.random.random_integers(0, 5, 10)
y = np.random.random_integers(0, 5, 10)

plt.scatter(x,y, c='orange')
plt.ylim([0, y.max()])
plt.xlim([0, x.max()])
plt.grid()
plt.show()
</snippet></ROW><ROW><id>21211636</id><snippet>Baz.who_knows(self)</snippet></ROW><ROW><id>21211636</id><snippet>Baz</snippet></ROW><ROW><id>21211636</id><snippet>who_knows</snippet></ROW><ROW><id>21211636</id><snippet>Baz</snippet></ROW><ROW><id>21211636</id><snippet>Foo</snippet></ROW><ROW><id>21211636</id><snippet>Baz</snippet></ROW><ROW><id>21211636</id><snippet>Foo</snippet></ROW><ROW><id>21211641</id><snippet>x</snippet></ROW><ROW><id>21211641</id><snippet>import numpy as np
rows = 200000
cols = 66
new_cols = 69
x = np.random.rand(rows, cols)
x.sort(axis=-1)
y = np.random.rand(rows, cols)
nx = np.random.rand(new_cols)
nx.sort() 
</snippet></ROW><ROW><id>21211641</id><snippet>%%time
ny = np.empty((x.shape[0], len(nx)))
for i in range(len(x)):
    ny[i] = np.interp(nx, x[i], y[i])
</snippet></ROW><ROW><id>21211641</id><snippet>nx</snippet></ROW><ROW><id>21211641</id><snippet>nx</snippet></ROW><ROW><id>21211641</id><snippet>x</snippet></ROW><ROW><id>21211641</id><snippet>interp()</snippet></ROW><ROW><id>21211641</id><snippet>O(len(nx)*log2(len(x))</snippet></ROW><ROW><id>21211641</id><snippet>O(len(nx) + len(x))</snippet></ROW><ROW><id>21211641</id><snippet>import numba

@numba.jit("f8[::1](f8[::1], f8[::1], f8[::1], f8[::1])")
def interp2(x, xp, fp, f):
    n = len(x)
    n2 = len(xp)
    j = 0
    i = 0
    while x[i] &lt;= xp[0]:
        f[i] = fp[0]
        i += 1

    slope = (fp[j+1] - fp[j])/(xp[j+1] - xp[j])        
    while i &lt; n:
        if x[i] &gt;= xp[j] and x[i] &lt; xp[j+1]:
            f[i] = slope*(x[i] - xp[j]) + fp[j]
            i += 1
            continue
        j += 1
        if j + 1 == n2:
            break
        slope = (fp[j+1] - fp[j])/(xp[j+1] - xp[j])   

    while i &lt; n:
        f[i] = fp[n2-1]
        i += 1

@numba.jit("f8[:, ::1](f8[::1], f8[:, ::1], f8[:, ::1])")
def multi_interp(x, xp, fp):
    nrows = xp.shape[0]
    f = np.empty((nrows, x.shape[0]))
    for i in range(nrows):
        interp2(x, xp[i, :], fp[i, :], f[i, :])
    return f
</snippet></ROW><ROW><id>21211641</id><snippet>%%time
ny2 = multi_interp(nx, x, y)
</snippet></ROW><ROW><id>21211641</id><snippet>np.allclose(ny, ny2)
</snippet></ROW><ROW><id>21211641</id><snippet>python version: 3.41 s
numba version: 1.04 s
</snippet></ROW><ROW><id>21211641</id><snippet>interp()</snippet></ROW><ROW><id>21211783</id><snippet>hasattr()</snippet></ROW><ROW><id>21211783</id><snippet>for obj in all_objects:
    if hasattr(obj, 'gravity'):
        obj.gravity()
</snippet></ROW><ROW><id>21211783</id><snippet>gravity</snippet></ROW><ROW><id>21211783</id><snippet>for obj in all_objects:
    if isinstance(obj, Planet):
        obj.gravity()
</snippet></ROW><ROW><id>21211945</id><snippet>if (raw_input("Do you have the length of the password?") == 'y'):</snippet></ROW><ROW><id>21211945</id><snippet>if (input("Do you have the length of the password?") == 'y'):</snippet></ROW><ROW><id>21211945</id><snippet>input()</snippet></ROW><ROW><id>21211945</id><snippet>In [11]: run tt.py
Do you have the length of the password?y
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
C:\Program Files (x86)\ipython-0.12.1\IPython\utils\py3compat.py in execfile(fname, glob, loc)
    166             else:
    167                 filename = fname
--&gt; 168             exec compile(scripttext, filename, 'exec') in glob, loc
    169     else:
    170         def execfile(fname, *where):

D:\Users\sp\Desktop\tt.py in &lt;module&gt;()
     16 stuff = lowercaseletters + uppercaseletters + numbers
     17
---&gt; 18 if (input("Do you have the length of the password?") == 'y'):
     19     lengthstartingvalue = int(input("Password length: "))
     20 else:

D:\Users\sp\Desktop\&lt;string&gt; in &lt;module&gt;()

NameError: name 'y' is not defined
</snippet></ROW><ROW><id>21211945</id><snippet>raw_input()</snippet></ROW><ROW><id>21212062</id><snippet>ButtonBehavior</snippet></ROW><ROW><id>21212062</id><snippet>class ImageButton(ButtonBehavior, Image)</snippet></ROW><ROW><id>21212071</id><snippet>name</snippet></ROW><ROW><id>21212071</id><snippet>books</snippet></ROW><ROW><id>21212071</id><snippet>uzumaxy.name = "Maxim"</snippet></ROW><ROW><id>21212071</id><snippet>name</snippet></ROW><ROW><id>21212071</id><snippet>name</snippet></ROW><ROW><id>21212071</id><snippet>uzumaxy.books.append("Programming via .NET")</snippet></ROW><ROW><id>21212071</id><snippet>books</snippet></ROW><ROW><id>21212071</id><snippet>class Human(object):
    name = ''
    books = []

    def say_hello(self):
        sys.stdout.write("Hello!")
</snippet></ROW><ROW><id>21212071</id><snippet>Human</snippet></ROW><ROW><id>21212071</id><snippet>class Human(object):
    def __init__(self):
        self.name = ''
        self.books = []

    def say_hello(self):
        sys.stdout.write("Hello!")
</snippet></ROW><ROW><id>21212071</id><snippet>name</snippet></ROW><ROW><id>21212071</id><snippet>books</snippet></ROW><ROW><id>21212071</id><snippet>__init__</snippet></ROW><ROW><id>21212071</id><snippet>def init_human(self):
    self.name = ''
    self.books = []

attributes = { '__init__': init_human,
               'say_hello': lambda self: sys.stdout.write("Hello!") }
</snippet></ROW><ROW><id>21212243</id><snippet>if getDecision = "Hit":
</snippet></ROW><ROW><id>21212243</id><snippet>if getDecision == "Hit":
</snippet></ROW><ROW><id>21212243</id><snippet>=</snippet></ROW><ROW><id>21212243</id><snippet>==</snippet></ROW><ROW><id>21212243</id><snippet>def getDecision():
getDecision = raw_input("What will you do? \n - Hit \n - Stand")
if getDecision == "Hit": 
    return hit()
</snippet></ROW><ROW><id>21212515</id><snippet>maingame()</snippet></ROW><ROW><id>21212515</id><snippet>cardGenerator()</snippet></ROW><ROW><id>21212515</id><snippet>None</snippet></ROW><ROW><id>21212515</id><snippet>maingame()</snippet></ROW><ROW><id>21212515</id><snippet>print</snippet></ROW><ROW><id>21212515</id><snippet>def maingame():
    done = False
    cards = cardGenerator()
    print "{0:&gt;4} {01:&gt;18} {02:&gt;20} {03:&gt;18}".format("Player Money", (cards[0], cards[1]), "CPU Cards", "CPU Money")
</snippet></ROW><ROW><id>21212515</id><snippet>cards</snippet></ROW><ROW><id>21212515</id><snippet>cardGenerator()</snippet></ROW><ROW><id>21212515</id><snippet>maingame()</snippet></ROW><ROW><id>21212515</id><snippet>def cardGenerator():
    #Assign a random suit
    suit_card = ["Hearts", "Spades", "Clubs", "Diamond"]
    from random import choice
    #Assign a random number between 1-13 (Ace to King)
    number_card = random.randrange(1, 14)
    cards = choice(suit_card), (number_card)
    return cards
</snippet></ROW><ROW><id>21212515</id><snippet>opponentphase()</snippet></ROW><ROW><id>21212677</id><snippet>"r" - open text file for reading, starting from the beginning.
"r+" - open text file for reading and writing, starting from the beginning.
"a+" - create file if not exists; then open as a text file for reading and writing, starting from the end of file, plus you can only write to the end of the file.
</snippet></ROW><ROW><id>21212677</id><snippet>open</snippet></ROW></DATA>