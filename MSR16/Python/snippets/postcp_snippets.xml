<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>15050247</id><snippet>def conjunction(i,j): # conjunction i,j
    return (i and j)

def disjunction(i,j): # dis-junction i,j
    return (i or j)

def exclusive(i,j): # exclusive i,j
    return (i != j)

def conditional(i,j): # conditional i,j
    return j if i else True

def biconditional (i,j): # biconditional i,j
    return (i == j)

output = [[],[],[],[],[]]
titles = ["Conjunction", "Disjunction", "Exclusive", "Conditional", "Biconditional"]

for f1 in [True, False]:
    for f2 in [True, False]:
        output[0].append('{0:8s} | {1:8s} | {2:8s}'.format(str(f1), str(f2), str(conjunction(f1, f2))))
        output[1].append('{0:8s} | {1:8s} | {2:8s}'.format(str(f1), str(f2), str(disjunction(f1, f2))))
        output[2].append('{0:8s} | {1:8s} | {2:8s}'.format(str(f1), str(f2), str(exclusive(f1, f2))))
        output[3].append('{0:8s} | {1:8s} | {2:8s}'.format(str(f1), str(f2), str(conditional(f1, f2))))
        output[4].append('{0:8s} | {1:8s} | {2:8s}'.format(str(f1), str(f2), str(biconditional(f1, f2))))


for i in range(5):
    print "=" * 30
    print titles[i]
    print "-" * 30
    print "\n".join(output[i])
    print "-" * 30
</snippet></ROW><ROW><id>15050247</id><snippet>==============================
Conjunction
------------------------------
True     | True     | True    
True     | False    | False   
False    | True     | False   
False    | False    | False   
------------------------------
==============================
Disjunction
------------------------------
True     | True     | True    
True     | False    | True    
False    | True     | True    
False    | False    | False   
------------------------------
==============================
Exclusive
------------------------------
True     | True     | False   
True     | False    | True    
False    | True     | True    
False    | False    | False   
------------------------------
==============================
Conditional
------------------------------
True     | True     | True    
True     | False    | False   
False    | True     | True    
False    | False    | True    
------------------------------
==============================
Biconditional
------------------------------
True     | True     | True    
True     | False    | False   
False    | True     | False   
False    | False    | True    
------------------------------
</snippet></ROW><ROW><id>15050479</id><snippet>doseq</snippet></ROW><ROW><id>15050479</id><snippet>&gt;&gt;&gt; urllib.urlencode(q, doseq=1)
'wer=&amp;name=John+Doe&amp;seq=123412412412'
</snippet></ROW><ROW><id>15050819</id><snippet>for</snippet></ROW><ROW><id>15050819</id><snippet>titles = []

for item in channel.findall('item'):
    titles.append(item.find('title').text)
    description = item.find('description').text
    link = item.find('link').text

print random.choice(titles)
</snippet></ROW><ROW><id>15050949</id><snippet>NAME</snippet></ROW><ROW><id>15050949</id><snippet>r'E:\estudos\projetos\hangover\site\newsite\db.sqlite'</snippet></ROW><ROW><id>15050949</id><snippet>\newsite</snippet></ROW><ROW><id>15050949</id><snippet>r</snippet></ROW><ROW><id>15051152</id><snippet>set1 = set([1, 3, 5, 7])
set2 = set([3, 5])

result = set1 - set2
</snippet></ROW><ROW><id>15051844</id><snippet>items</snippet></ROW><ROW><id>15051844</id><snippet>for item in items[:3]:
    news.append((item.find('title').text, item.find('link').text))
</snippet></ROW><ROW><id>15051844</id><snippet>news</snippet></ROW><ROW><id>15051844</id><snippet>[('The Autism Gap: What Works', 'http://www.11alive.com/rss/article/278819/3/The-Autism-Gap-What-Works'), ('Adairsville effort continues with concert ', 'http://www.11alive.com/rss/article/279178/3/Adairsville-effort-continues-with-concert-'), ('Gold Coast Salads expands seafood salad recall on Listeria fears', 'http://www.11alive.com/rss/article/279147/3/Gold-Coast-Salads-expands-seafood-salad-recall-on-Listeria-fears')]
</snippet></ROW><ROW><id>15051844</id><snippet>item</snippet></ROW><ROW><id>15051844</id><snippet>items = root.findall('channel/item')
</snippet></ROW><ROW><id>15051886</id><snippet>import re
re.sub(r'\d', '', s) # or re.sub(r',\d', '', s) to remove the commas, too
</snippet></ROW><ROW><id>15051886</id><snippet>s</snippet></ROW><ROW><id>15052004</id><snippet>error: Unable to find vcvarsall.bat
</snippet></ROW><ROW><id>15052064</id><snippet>numpy.append</snippet></ROW><ROW><id>15052064</id><snippet>numpy.concatenate</snippet></ROW><ROW><id>15052064</id><snippet>nrows</snippet></ROW><ROW><id>15052064</id><snippet>results = np.zeros([nrows, 5])
</snippet></ROW><ROW><id>15052064</id><snippet>def function(x, i, results):
    &lt;.. snip ..&gt;
    results[i,0] = a
    results[i,1] = b
    results[i,2] = c[-1,0]
    results[i,3] = c[-1,1]
    results[0,4] = c[-1,2]
</snippet></ROW><ROW><id>15052064</id><snippet>results</snippet></ROW><ROW><id>15052064</id><snippet>results[i, x]</snippet></ROW><ROW><id>15052064</id><snippet>i</snippet></ROW><ROW><id>15052064</id><snippet>results</snippet></ROW><ROW><id>15052064</id><snippet>numpy.append</snippet></ROW><ROW><id>15052064</id><snippet>concatenate</snippet></ROW><ROW><id>15052064</id><snippet>OtherFunctionThatReturnsAThreeColumnArray</snippet></ROW><ROW><id>15052064</id><snippet>numpy</snippet></ROW><ROW><id>15052064</id><snippet>results = [function(x) for x in my_data]</snippet></ROW><ROW><id>15052360</id><snippet>export PYTHONPATH="/usr/local/lib/python2.7/site-packages"
</snippet></ROW><ROW><id>15052748</id><snippet>app.yaml</snippet></ROW><ROW><id>15052748</id><snippet>application: helloworld
version: 1
runtime: python27
api_version: 1
threadsafe: yes

handlers:
- url: .*
  script: helloworld.app

libraries:
- name: webapp2
  version: "2.5.2"
</snippet></ROW><ROW><id>15052823</id><snippet>from operator import itemgetter
sorted(L, key=itemgetter(1))
</snippet></ROW><ROW><id>15052823</id><snippet>L</snippet></ROW><ROW><id>15052823</id><snippet>key</snippet></ROW><ROW><id>15052823</id><snippet>L</snippet></ROW><ROW><id>15052833</id><snippet>zip()</snippet></ROW><ROW><id>15052833</id><snippet>c = [[aa[0], aa[1] + bb[1]] for aa, bb in zip(a, b)]
</snippet></ROW><ROW><id>15052871</id><snippet>&gt; print(u"ÄÖÜAOU".lower())

äöüaou
</snippet></ROW><ROW><id>15052871</id><snippet>&gt; olle = "ÅÄÖABC"
&gt; print(olle.lower())
ÅÄÖabc

&gt; olle = u"ÅÄÖABC"
&gt; print(olle.lower())
åäöabc
</snippet></ROW><ROW><id>15052876</id><snippet>&gt;&gt;&gt; import MySQLdb
</snippet></ROW><ROW><id>15052876</id><snippet>&gt; python manage.py shell
&gt;&gt;&gt; import MySQLdb
</snippet></ROW><ROW><id>15052876</id><snippet>_mysql.pyd</snippet></ROW><ROW><id>15052876</id><snippet>import _mysql</snippet></ROW><ROW><id>15053079</id><snippet>self.response.headers.add_header(str('Set-Cookie'), str('shops=%s; path=/; expires=%s') % (shoplist, expire_string))
</snippet></ROW><ROW><id>15053216</id><snippet>def Help(string):
    if string == 'Manifest':
        return Manifest()
    elif string == 'Intent':
        return Intent()
    else:
        print('The options available are:\n%s\nType Q to Quit\n' % '\n'.join(andHelp))
        x = input('What option do you choose: ')
        print('\n')
        if x != 'Q':
            Help(x)
</snippet></ROW><ROW><id>15053433</id><snippet>class DisorderCollection(object):
    def __getitem__(self, key):
        if key in FAKE_DATABASE:
            return FAKE_DATABASE[key]
        else:
            raise KeyError('Key not found: {}.'.format(key))

class MentalDisorders(DisorderCollection):
    # ... some methods and fields that make it worthwhile having a container class ...

class PhysicalDisorders(DisorderCollection):
    # Unless you plan to have multiple types of disorder collections with different methods, I struggle to see a point in the extra layer of classes.

def main():
    md = MentalDisorders()
    print(md['anxiety'])
    print(md['personality'])
    print(md['eating'])
    try:
        print(md['conduct'])
    except KeyError as exception:
        print(exception)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>15053486</id><snippet>myFile</snippet></ROW><ROW><id>15053486</id><snippet>        myFile = open(fileName, 'r')
</snippet></ROW><ROW><id>15053486</id><snippet>        myFile = myFile.readlines()
</snippet></ROW><ROW><id>15053486</id><snippet>myFile.readlines()</snippet></ROW><ROW><id>15053486</id><snippet>fileList</snippet></ROW><ROW><id>15053486</id><snippet>fileList</snippet></ROW><ROW><id>15053486</id><snippet>CursorBasedList</snippet></ROW><ROW><id>15053486</id><snippet>elif response == "N":
        fileName = input("What would you like to name your file?: ")
        fileList = CursorBasedList() # &lt;- Here
        myFile = open(fileName, "w")
</snippet></ROW><ROW><id>15054469</id><snippet>import os
def openFile():
    fileName = listbox_1.get(ACTIVE)
    os.system("start " + fileName)
</snippet></ROW><ROW><id>15054469</id><snippet>import os
def openFile():
    fileName = listbox_1.get(ACTIVE)
    os.system("notepad.exe " + fileName)
</snippet></ROW><ROW><id>15054474</id><snippet>backref('user', order_by=lambda: User.date_modified)
backref('user', order_by='User.date_modified')
</snippet></ROW><ROW><id>15054474</id><snippet>User.date_modified</snippet></ROW><ROW><id>15054482</id><snippet>PyRun_SimpleFile</snippet></ROW><ROW><id>15054482</id><snippet>FILE *fp = fopen("test.py", "r");
int ret = PyRun_SimpleFile(fp, "test.py");
if(ret &lt; 0) {
    /* exception occurred */
}
</snippet></ROW><ROW><id>15054679</id><snippet>transform</snippet></ROW><ROW><id>15054679</id><snippet>In [33]: cols = ['PetalLength', 'PetalWidth']

In [34]: transformed = grouped_iris[cols].transform(sum).sum(axis=1)

In [35]: iris['SumLengthWidth'] = transformed

In [36]: iris.head()
Out[36]: 
   SepalLength  SepalWidth  PetalLength  PetalWidth         Name  SumLengthWidth
0          5.1         3.5          1.4         0.2  Iris-setosa            85.4
1          4.9         3.0          1.4         0.2  Iris-setosa            85.4
2          4.7         3.2          1.3         0.2  Iris-setosa            85.4
3          4.6         3.1          1.5         0.2  Iris-setosa            85.4
4          5.0         3.6          1.4         0.2  Iris-setosa            85.4
</snippet></ROW><ROW><id>15054679</id><snippet>df</snippet></ROW><ROW><id>15054679</id><snippet>sum</snippet></ROW><ROW><id>15054679</id><snippet>In [47]: df
Out[47]: 
  Name  val1  val2
0  foo     6     3
1  bar    17     4
2  foo    16     6
3  bar     7     3
4  foo     6    13
5  bar     7     1

In [48]: grouped = df.groupby('Name')

In [49]: grouped.agg(sum)
Out[49]: 
      val1  val2
Name            
bar     31     8
foo     28    22
</snippet></ROW><ROW><id>15054679</id><snippet>In [50]: grouped.agg(sum).sum(axis=1)
Out[50]: 
Name
bar     39
foo     50
</snippet></ROW><ROW><id>15054679</id><snippet>transform</snippet></ROW><ROW><id>15054679</id><snippet>In [51]: grouped.transform(sum)
Out[51]: 
   val1  val2
0    28    22
1    31     8
2    28    22
3    31     8
4    28    22
5    31     8
</snippet></ROW><ROW><id>15054679</id><snippet>agg</snippet></ROW><ROW><id>15054679</id><snippet>df</snippet></ROW><ROW><id>15054679</id><snippet>In [52]: grouped.transform(sum).sum(axis=1)
Out[52]: 
0    50
1    39
2    50
3    39
4    50
5    39
</snippet></ROW><ROW><id>15054679</id><snippet>In [53]: df['val1 + val2 by Name'] = grouped.transform(sum).sum(axis=1)

In [54]: df
Out[54]: 
  Name  val1  val2  val1 + val2 by Name
0  foo     6     3                   50
1  bar    17     4                   39
2  foo    16     6                   50
3  bar     7     3                   39
4  foo     6    13                   50
5  bar     7     1                   39
</snippet></ROW><ROW><id>15054757</id><snippet>df1['label'] = 'df1'
</snippet></ROW><ROW><id>15054757</id><snippet>df1["label"] = len(df1.index) * ["df1"]</snippet></ROW><ROW><id>15054757</id><snippet>plot_dfs(dfs):
    for i, df in enumerate(dfs):
        df['label'] =  'df%s' % i+1 # note: this *changes* df
    melted_df = pd.concat(dfs)

    # plot parameters from melted_df and colour them by df1 or df2
    ggplot2.ggplot(melted_df) + ggplot2.ggplot(aes_string(..., colour="label"))

    return # the melted_df or ggplot ?
</snippet></ROW><ROW><id>15054791</id><snippet>import psutil
psutil.cpu_percent()
</snippet></ROW><ROW><id>15055252</id><snippet>system</snippet></ROW><ROW><id>15055252</id><snippet>os.system('notepad.exe {}'.format(fileName))
</snippet></ROW><ROW><id>15055363</id><snippet>s = ''
for i in word:
  if i in vowel:
     s += i*4
  else:
     s += i
s += '!'
</snippet></ROW><ROW><id>15055371</id><snippet>mailbox</snippet></ROW><ROW><id>15055371</id><snippet>from mailbox import mbox
import re

PAT_EMAIL = re.compile(r"[0-9A-Za-z._-]+\@[0-9A-Za-z._-]+")

mymbox = mbox("demo.txt")
for email in mymbox.values():
    from_address = PAT_EMAIL.findall(email["from"])
    to_address = PAT_EMAIL.findall(email["to"])
    date = [ email["date"], ]
    print ";".join(from_address + to_address + date)
</snippet></ROW><ROW><id>15055412</id><snippet>import random
import time

def generate_samples():
    while True:
        input('Press ENTER to simulate next sample...')
        yield random.random()

def period_elapsed(period_start, period_duration):
    return period_start + period_duration &lt; time.time()

def collect_buffers(samples, buffer_period):
    buffer_time = time.time()
    buffer_samples = []
    for sample in samples:
        buffer_samples.append(sample)
        if period_elapsed(buffer_time, buffer_period):
            yield buffer_samples
            buffer_samples = []
            buffer_time = time.time()

def post_buffers(buffers, url):
    for b in buffers:
        requests.post(url, data=json.dumps(buffer))

post_buffers(collect_buffers(generate_samples(), 300), 'http://localhost:3000')
</snippet></ROW><ROW><id>15055459</id><snippet>import sys
print sys.stdin.isattty()   # True if it's a terminal, False if it's redirected
</snippet></ROW><ROW><id>15055502</id><snippet>sqlite</snippet></ROW><ROW><id>15055502</id><snippet>sqlite</snippet></ROW><ROW><id>15055502</id><snippet>def adapt_tuple(tpl):
    return repr(tpl)

def get_tuple(s):
    if len(s) &gt; 2:
        return tuple(int(x) for x in s[1:-1].split(','))
    return ()
</snippet></ROW><ROW><id>15055502</id><snippet>register_converter</snippet></ROW><ROW><id>15055502</id><snippet>sqlite3_column_blob</snippet></ROW><ROW><id>15055502</id><snippet>pysqlite</snippet></ROW><ROW><id>15055502</id><snippet>if (!sqlite3_column_blob(...)) converted_col = Py_None;
</snippet></ROW><ROW><id>15055502</id><snippet>pysqlite</snippet></ROW><ROW><id>15055502</id><snippet>sqlite3_column_blob</snippet></ROW><ROW><id>15055502</id><snippet>sqlite</snippet></ROW><ROW><id>15055502</id><snippet>sqlite3_column_blob</snippet></ROW><ROW><id>15055639</id><snippet>stdin</snippet></ROW><ROW><id>15055639</id><snippet>import sys
import StringIO

oldstdin = sys.stdin
sys.stdin = StringIO.StringIO('asdlkj')

print raw_input('.')       #  .asdlkj
</snippet></ROW><ROW><id>15055651</id><snippet>GET /repositories</snippet></ROW><ROW><id>15055891</id><snippet>def changebg(x,y):
    entryList[x][y]['bg']='yellow'

for x in range(4):
    for y in range(4):
        entryList[x][y].after(300,changebg(x,y))
        #Same result with root.after(300,changebg(x,y))
</snippet></ROW><ROW><id>15055891</id><snippet>changebg</snippet></ROW><ROW><id>15055891</id><snippet>None</snippet></ROW><ROW><id>15055891</id><snippet>root.after</snippet></ROW><ROW><id>15055891</id><snippet>for x in range(4):
    for y in range(4):
        entryList[x][y].after(300,lambda x=x,y=y : changebg(x,y))
</snippet></ROW><ROW><id>15055891</id><snippet>import itertools
all_entries = itertools.chain.from_iterable(entryList)
def changebg(ientries):
    ientries = iter(ientries) #allow passing a list in as well ...
    entry = next(ientries,None)
    if entry is not None:
        entry['bg'] = 'yellow' #change the color of this widget
        root.after(300,lambda : changebg(ientries)) #wait 300ms and change color of next one.

changebg(all_entries)
</snippet></ROW><ROW><id>15055930</id><snippet>try:
    argslistcheck = argslist[0]
    if argslistcheck[0:4] != "http://":
        argslist[0] = "http://" + argslist[0]
    with urllib.request.urlopen(argslist[0]) as url:
        source = url.read()
        source = str(source, "utf-8")
except IndexError:
    print("Couln't connect")
    source = ""
</snippet></ROW><ROW><id>15055930</id><snippet>IndexError</snippet></ROW><ROW><id>15055930</id><snippet>argslist[0]</snippet></ROW><ROW><id>15055930</id><snippet>urlopen</snippet></ROW><ROW><id>15055930</id><snippet>IndexError</snippet></ROW><ROW><id>15055930</id><snippet>urllib.error.URLError</snippet></ROW><ROW><id>15055930</id><snippet>urllib.error.HTTPError</snippet></ROW><ROW><id>15055930</id><snippet>except IndexError</snippet></ROW><ROW><id>15055930</id><snippet>urlopen</snippet></ROW><ROW><id>15055930</id><snippet>except</snippet></ROW><ROW><id>15055930</id><snippet>except IndexError:
    print('Argument is missing')
except urllib.error.URLError:
    print('Could not connect to the URL.')
</snippet></ROW><ROW><id>15055999</id><snippet>-&gt;</snippet></ROW><ROW><id>15055999</id><snippet>&gt;&gt;&gt; def kinetic_energy(m:'in KG', v:'in M/S')-&gt;'Joules': 
...    return 1/2*m*v**2
... 
&gt;&gt;&gt; kinetic_energy.__annotations__
{'return': 'Joules', 'v': 'in M/S', 'm': 'in KG'}
</snippet></ROW><ROW><id>15055999</id><snippet>&gt;&gt;&gt; '{:,} {}'.format(kenetic_energy(20,3000),
      kenetic_energy.__annotations__['return'])
'90,000,000.0 Joules'
</snippet></ROW><ROW><id>15055999</id><snippet>def validate(func, locals):
    for var, test in func.__annotations__.items():
        value = locals[var]
        try: 
            pr=test.__name__+': '+test.__docstring__
        except AttributeError:
            pr=test.__name__   
        msg = '{}=={}; Test: {}'.format(var, value, pr)
        assert test(value), msg

def between(lo, hi):
    def _between(x):
            return lo &lt;= x &lt;= hi
    _between.__docstring__='must be between {} and {}'.format(lo,hi)       
    return _between

def f(x: between(3,10), y:lambda _y: isinstance(_y,int)):
    validate(f, locals())
    print(x,y)
</snippet></ROW><ROW><id>15055999</id><snippet>&gt;&gt;&gt; f(2,2) 
AssertionError: x==2; Test: _between: must be between 3 and 10
&gt;&gt;&gt; f(3,2.1)
AssertionError: y==2.1; Test: &lt;lambda&gt;
</snippet></ROW><ROW><id>15056323</id><snippet>import os
import re

def query():
    f = open('company.txt', 'r')    
    names = re.findall(r"&lt;h2&gt;(.+?)&lt;/h2&gt;.*?area_code = '(.+?)'", f.read(), re.DOTALL)
    for name in names:
        print name[0] + " | " + name[1]

if __name__=="__main__":
    query()
</snippet></ROW><ROW><id>15056323</id><snippet>names = re.findall(your names regex)
area_codes = re.findall(your area code regex)

for i in range(len(names)):  //very dangerous, if there's one failed match many entries may be mismatched!
    print names[i] + " | " + area_codes[i]  
</snippet></ROW><ROW><id>15056525</id><snippet>@classmethod</snippet></ROW><ROW><id>15056525</id><snippet>as_view()</snippet></ROW><ROW><id>15056525</id><snippet>self</snippet></ROW><ROW><id>15056525</id><snippet>cls</snippet></ROW><ROW><id>15056525</id><snippet>WelcomeView.as_view()</snippet></ROW><ROW><id>15056525</id><snippet>as_view</snippet></ROW><ROW><id>15056525</id><snippet>cls</snippet></ROW><ROW><id>15056525</id><snippet>self</snippet></ROW><ROW><id>15056525</id><snippet>as_view</snippet></ROW><ROW><id>15056525</id><snippet>view</snippet></ROW><ROW><id>15056525</id><snippet>__init__</snippet></ROW><ROW><id>15056525</id><snippet>initargs</snippet></ROW><ROW><id>15056525</id><snippet>self.whatever</snippet></ROW><ROW><id>15056692</id><snippet>.replace()</snippet></ROW><ROW><id>15056692</id><snippet>NavigableString</snippet></ROW><ROW><id>15056692</id><snippet>replace_with()</snippet></ROW><ROW><id>15056692</id><snippet>.replace()</snippet></ROW><ROW><id>15056692</id><snippet>findtoure = commentary.find_all(text = re.compile('Gnegneri Toure Yaya'))
for comment in findtoure:
    fixed_text = unicode(comment).replace('Gnegneri Toure Yaya', 'Yaya Toure')
    comment.replace_with(fixed_text)
</snippet></ROW><ROW><id>15056692</id><snippet>findtoure = commentary.find(text = re.compile('Yaya Toure'))
</snippet></ROW><ROW><id>15056692</id><snippet>NavigableString</snippet></ROW><ROW><id>15056692</id><snippet>fixed_text</snippet></ROW><ROW><id>15056692</id><snippet>findtoure = commentary.find_all(text = re.compile('Gnegneri Toure Yaya'))
fixed_comments = []
for comment in findtoure:
    fixed_text = unicode(comment).replace('Gnegneri Toure Yaya', 'Yaya Toure')
    comment.replace_with(fixed_text)
    fixed_comments.append(fixed_text)
</snippet></ROW><ROW><id>15056742</id><snippet>pygame.time.set_timer</snippet></ROW><ROW><id>15056742</id><snippet>pygame.USEREVENT</snippet></ROW><ROW><id>15056742</id><snippet>pygame.NUMEVENTS</snippet></ROW><ROW><id>15056742</id><snippet>24</snippet></ROW><ROW><id>15056742</id><snippet>32</snippet></ROW><ROW><id>15056742</id><snippet>eventid</snippet></ROW><ROW><id>15056742</id><snippet>pygame.time.set_timer</snippet></ROW><ROW><id>15056742</id><snippet>24</snippet></ROW><ROW><id>15056742</id><snippet>32</snippet></ROW><ROW><id>15056742</id><snippet>pygame.USEREVENT+1</snippet></ROW><ROW><id>15056742</id><snippet>33</snippet></ROW><ROW><id>15056742</id><snippet>pygame.time.set_timer(USEREVENT+1,7000)</snippet></ROW><ROW><id>15056742</id><snippet>33</snippet></ROW><ROW><id>15056742</id><snippet>pygame.time.set_timer</snippet></ROW><ROW><id>15056742</id><snippet>None</snippet></ROW><ROW><id>15056742</id><snippet>nyansecond = pygame.time.set_timer(USEREVENT+1,7000)
</snippet></ROW><ROW><id>15056742</id><snippet>nyansecond</snippet></ROW><ROW><id>15056742</id><snippet>None</snippet></ROW><ROW><id>15056742</id><snippet>if nyansecond &lt; 200 ...
</snippet></ROW><ROW><id>15056742</id><snippet>pygame.time.set_timer</snippet></ROW><ROW><id>15056742</id><snippet>PLAYSOUNDEVENT = USEREVENT + 1
...
pygame.time.set_timer(PLAYSOUNDEVENT, 6500)
</snippet></ROW><ROW><id>15056742</id><snippet>while whatever: # main loop
    ...
    # event handling
    if pygame.event.get(PLAYSOUNDEVENT): # check event queue contains PLAYSOUNDEVENT 
        nyansoundm.play() # play the sound
</snippet></ROW><ROW><id>15056807</id><snippet>*args*</snippet></ROW><ROW><id>15056807</id><snippet>p = MetricArg(*somelist)
</snippet></ROW><ROW><id>15056807</id><snippet>somelist</snippet></ROW><ROW><id>15056807</id><snippet>MetricArg</snippet></ROW><ROW><id>15056807</id><snippet>print()</snippet></ROW><ROW><id>15056807</id><snippet>os.path.join()</snippet></ROW><ROW><id>15056930</id><snippet>class dance(object):
    dance_move=staticmethod(fish_slap)
</snippet></ROW><ROW><id>15056930</id><snippet>staticmethod</snippet></ROW><ROW><id>15056930</id><snippet>&gt;&gt;&gt; def move():
...     print "disco party!"
... 
&gt;&gt;&gt; class dance(object):
...     dance_move = staticmethod(move)
... 
&gt;&gt;&gt; d = dance()
&gt;&gt;&gt; d.dance_move()
disco party!
&gt;&gt;&gt; d.break_it_down = move
&gt;&gt;&gt; d.break_it_down()
disco party!
</snippet></ROW><ROW><id>15057036</id><snippet>source = str(source, encoding='utf-8', errors = 'ignore')</snippet></ROW><ROW><id>15057191</id><snippet>py-tkinter</snippet></ROW><ROW><id>15057191</id><snippet>sudo port install py27-tkinter
</snippet></ROW><ROW><id>15057358</id><snippet>import multiprocessing

multiprocessing.cpu_count()
</snippet></ROW><ROW><id>15057358</id><snippet>multiprocessing</snippet></ROW><ROW><id>15057358</id><snippet>Pool</snippet></ROW><ROW><id>15057358</id><snippet>.cpu_count()</snippet></ROW><ROW><id>15057380</id><snippet>any</snippet></ROW><ROW><id>15057380</id><snippet>&gt;&gt;&gt; list = [('foo', 'bar'), ('bar', 'foo')]
&gt;&gt;&gt; any('foo' in e for e in list)
True
</snippet></ROW><ROW><id>15057400</id><snippet>db_column</snippet></ROW><ROW><id>15057400</id><snippet>_id</snippet></ROW><ROW><id>15057400</id><snippet>category</snippet></ROW><ROW><id>15057400</id><snippet>category_id</snippet></ROW><ROW><id>15057400</id><snippet>category = models.ForeignKey(Category, db_column='category')
</snippet></ROW><ROW><id>15057523</id><snippet>--enable-framework</snippet></ROW><ROW><id>15057523</id><snippet>--enable-framework</snippet></ROW><ROW><id>15057523</id><snippet>/usr/local/</snippet></ROW><ROW><id>15057523</id><snippet>--prefix=</snippet></ROW><ROW><id>15057523</id><snippet>./configure</snippet></ROW><ROW><id>15057523</id><snippet>--enable-framework</snippet></ROW><ROW><id>15057523</id><snippet>/Library/Frameworks</snippet></ROW><ROW><id>15057523</id><snippet>--enable-framework</snippet></ROW><ROW><id>15057523</id><snippet>/Library/Frameworks</snippet></ROW><ROW><id>15057523</id><snippet>Distribute</snippet></ROW><ROW><id>15057523</id><snippet>setuptools</snippet></ROW><ROW><id>15057523</id><snippet>pip</snippet></ROW><ROW><id>15057523</id><snippet>virtualenv</snippet></ROW><ROW><id>15057523</id><snippet>easy_install</snippet></ROW><ROW><id>15057523</id><snippet>/usr/bin/</snippet></ROW><ROW><id>15057523</id><snippet>/System/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>15057523</id><snippet>/path/to/your/python -c "import sys, pprint; print(sys.version); print(sys.executable); pprint.pprint(sys.path)"
</snippet></ROW><ROW><id>15057523</id><snippet>configure</snippet></ROW><ROW><id>15057523</id><snippet>make</snippet></ROW><ROW><id>15057523</id><snippet>--enable-framework=/path/to</snippet></ROW><ROW><id>15057523</id><snippet>configure</snippet></ROW><ROW><id>15057523</id><snippet>Library/Frameworks</snippet></ROW><ROW><id>15057523</id><snippet>./configure --enable-framework=/baz/quux/Library/Frameworks &amp;&amp; make &amp;&amp; make install
</snippet></ROW><ROW><id>15057523</id><snippet>/baz
    quux
        Applications
            Python 2.7
                Build Applet.app
                IDLE.app
                ...
        Library
            Frameworks
                Python
                    Version
                        2.7
                            Headers/
                            Python
                            ...
                            Resources/
                            bin
                                ...
                                2to3
                                idle2.7
                                ...
                                python
                                python2
                                python2.7
                                ...
                            include/
                            lib/
                            share/
        bin
            2to3 -&gt; ...bin/2to3
            ...
            idle2.7 -&gt; ...bin/idle2.7
            ...
            python -&gt; ...bin/python
            ...
</snippet></ROW><ROW><id>15057523</id><snippet>bin</snippet></ROW><ROW><id>15057523</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>15057523</id><snippet>bin</snippet></ROW><ROW><id>15057523</id><snippet>bin</snippet></ROW><ROW><id>15057523</id><snippet>PATH</snippet></ROW><ROW><id>15057523</id><snippet>bin</snippet></ROW><ROW><id>15057523</id><snippet>--prefix=/foo/bar</snippet></ROW><ROW><id>15057523</id><snippet>configure</snippet></ROW><ROW><id>15057523</id><snippet>bin</snippet></ROW><ROW><id>15057523</id><snippet>/foo
    bar
        bin
            2to3 -&gt; ...bin/2to3
            ...
            idle2.7 -&gt; ...bin/idle2.7
            ...
            python -&gt; ...bin/python
            ...
</snippet></ROW><ROW><id>15057589</id><snippet>__init__</snippet></ROW><ROW><id>15057589</id><snippet># static consts - outside so that every instance of Particle doesn't take them along
# for the ride...
MAX_X = 150,000
X_STEP = 8000
# etc.

class Particle(object):

    def __init__(self, data):
        self.x = data[xvalue]
        self.y = data[yvalue]
        self.z = data[zvalue]
        self.compute_box_label()

    def compute_box_label(self):
        import math

        x_label = math.floor(self.x / X_STEP)
        y_label = math.floor(self.y / Y_STEP)
        z_label = math.floor(self.z / Z_STEP) 
        self.box_label = str(x_label) + '-' + str(y_label) + '-' + str(z_label)
</snippet></ROW><ROW><id>15057589</id><snippet>sigma8</snippet></ROW><ROW><id>15057589</id><snippet>def sigma8(data):
    import collections as col

    particles = [Particle(x) for x in data]
    boxes = col.Counter([x.box_label for x in particles])
    counts = boxes.most_common()

    #some other stuff
</snippet></ROW><ROW><id>15057589</id><snippet>counts</snippet></ROW><ROW><id>15057774</id><snippet>impor urllib2
urllib2.urlopen("http://google.com").read()
</snippet></ROW><ROW><id>15057799</id><snippet>255, 0, 0</snippet></ROW><ROW><id>15057799</id><snippet>255</snippet></ROW><ROW><id>15057799</id><snippet>f.write("%d, 0, 0 \n" % x)
</snippet></ROW><ROW><id>15057858</id><snippet>format-entry-text</snippet></ROW><ROW><id>15057901</id><snippet>readwrite</snippet></ROW><ROW><id>15058027</id><snippet>items_by_start = dict((i.start, i) for i in your_items)

ordered_items = [your_items[0]]
for _ in xrange(len(your_items)-1):
    ordered_items.append(items_by_start[ordered_items[-1].end])
</snippet></ROW><ROW><id>15058038</id><snippet>array.__contains__()</snippet></ROW><ROW><id>15058038</id><snippet>in</snippet></ROW><ROW><id>15058038</id><snippet>__contains__()</snippet></ROW><ROW><id>15058038</id><snippet>a in b</snippet></ROW><ROW><id>15058038</id><snippet>b.__contains__(a)</snippet></ROW><ROW><id>15058038</id><snippet>&gt;&gt;&gt; b[:,0]
array([(0, 0), (1, 0), (2, 0)], dtype=object)
&gt;&gt;&gt; (0,0) in b[:,0] # we expect it to be true
False
&gt;&gt;&gt; (0,0) in list(b[:,0]) # this shouldn't be different from the above but it is
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15058038</id><snippet>a[x]</snippet></ROW><ROW><id>15058038</id><snippet>b[:,:]</snippet></ROW><ROW><id>15058038</id><snippet>in</snippet></ROW><ROW><id>15058038</id><snippet>==</snippet></ROW><ROW><id>15058038</id><snippet>b</snippet></ROW><ROW><id>15058038</id><snippet>array.__contains()</snippet></ROW><ROW><id>15058038</id><snippet>bb = list(b.reshape(b.size))
</snippet></ROW><ROW><id>15058038</id><snippet>set</snippet></ROW><ROW><id>15058038</id><snippet>in</snippet></ROW><ROW><id>15058038</id><snippet>&gt;&gt;&gt; bb = set(b.reshape(b.size))
&gt;&gt;&gt; print bb
set([(0, 1), (1, 2), (0, 0), (2, 1), (1, 1), (2, 0), (2, 2), (1, 0), (0, 2)])
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15058038</id><snippet>&gt;&gt;&gt; truth_table = [tuple(aa) in bb for aa in a]
&gt;&gt;&gt; print truth_table
[True, True, True]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15058038</id><snippet>def contained(a,b):
    bb = set(b.flatten())
    return [tuple(aa) in bb for aa in a]
</snippet></ROW><ROW><id>15058047</id><snippet>min</snippet></ROW><ROW><id>15058047</id><snippet>max</snippet></ROW><ROW><id>15058047</id><snippet>sum</snippet></ROW><ROW><id>15058047</id><snippet>from collections import Sized

def avg(*obs):
    if len(obs) == 1 and isinstance(obs[0], Sized):
        obs = obs[0]
    return (1. / len(obs)) * sum(obs)
</snippet></ROW><ROW><id>15058047</id><snippet>Sized</snippet></ROW><ROW><id>15058047</id><snippet>len</snippet></ROW><ROW><id>15058158</id><snippet>on_key_release()</snippet></ROW><ROW><id>15058158</id><snippet>stop()</snippet></ROW><ROW><id>15058158</id><snippet>stop()</snippet></ROW><ROW><id>15058158</id><snippet>def __init__(self):
    super(TestLayer, self).__init__()
    self.sprite = cocos.sprite.Sprite('grossini.png')
    self.sprite.position = 320, 340
    self.add(sprite)
    self.sprite_move_action = None

def on_key_press(self, symbol, modifiers):
    if symbol ==key.RIGHT:
        move = MoveBy((1, 0), 0.1)
        repeat = Repeat(move)
        self.sprite_move_action = repeat
        self.sprite.do(repeat)

def on_key_release(self, symbol, modifiers):
    if symbol == key.RIGHT and self.sprite_move_action is not None:
        self.sprite.remove_action(self.sprite_move_action)
        self.sprite_move_action = None
</snippet></ROW><ROW><id>15058428</id><snippet>struct</snippet></ROW><ROW><id>15058428</id><snippet>def reverse(a,size):
    b = 0
    for i in range(size):
        b &lt;&lt;= 1
        b |= a &gt;&gt; i &amp; 1
    return b
</snippet></ROW><ROW><id>15058428</id><snippet>&gt;&gt;&gt; reverse(3,3) # 011 =&gt; 110
6
&gt;&gt;&gt; invert(6,3) # 110 =&gt; 011
3
&gt;&gt;&gt; invert(4,3) # 100 =&gt; 001
1
&gt;&gt;&gt; invert(5,3) # 101 =&gt; 111
5
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15058473</id><snippet>s(t) = x</snippet></ROW><ROW><id>15058473</id><snippet>s(t)</snippet></ROW><ROW><id>15058473</id><snippet>def ...</snippet></ROW><ROW><id>15058473</id><snippet>def g(s):
    def s(t):
        return -0.5*g(s)*t^2+v0*t
    return G*M/(R+s(t))^2
</snippet></ROW><ROW><id>15058473</id><snippet>s(t)</snippet></ROW><ROW><id>15058473</id><snippet>g(s)</snippet></ROW><ROW><id>15058473</id><snippet>g(s)</snippet></ROW><ROW><id>15058473</id><snippet>s(t)</snippet></ROW><ROW><id>15058473</id><snippet>s(t)</snippet></ROW><ROW><id>15058473</id><snippet>g(s)</snippet></ROW><ROW><id>15058473</id><snippet>t</snippet></ROW><ROW><id>15058473</id><snippet>**</snippet></ROW><ROW><id>15058473</id><snippet>^</snippet></ROW><ROW><id>15058473</id><snippet>return</snippet></ROW><ROW><id>15058473</id><snippet>G = 6.6742*10**(-11)
M = 5.9736*10**24
R = 6371000
s0 = 0
v0 = 300
t = 0
dt = 0.005

sc = s0 # Current position of the particle, initially at s0

def g(s):
    return -G*M/(R+s)**2

def s(t):
    return 0.5*g(sc)*t**2 + v0*t + s0

count = 0
while s(t) &gt;= 0:
    if count % 200 == 0:
        print(sc)
    sc = s(t)
    count += 1
    t = dt*count
</snippet></ROW><ROW><id>15058521</id><snippet>import pickle
import selenium.webdriver 

driver = selenium.webdriver.Firefox()
driver.get("http://www.google.com")
pickle.dump( driver.get_cookies() , open("cookies.pkl","wb"))
</snippet></ROW><ROW><id>15058521</id><snippet>import pickle
import selenium.webdriver 

driver = selenium.webdriver.Firefox()
driver.get("http://www.google.com")
cookies = pickle.load(open("cookies.pkl", "rb"))
for cookie in cookies:
    driver.add_cookie(cookie)
</snippet></ROW><ROW><id>15058530</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'(?&lt;!\.)\b\d+\b(?!\.)', "x^3+0.125x+2")
['3', '2']
</snippet></ROW><ROW><id>15058530</id><snippet>\b\d+\b</snippet></ROW><ROW><id>15058544</id><snippet>Button</snippet></ROW><ROW><id>15058544</id><snippet>import time
import threading
import Tkinter as tk

class App():
    def __init__(self, root):
        self.button = tk.Button(root)
        self.button.pack()
        self._resetbutton()
    def _resetbutton(self):
        self.running = False
        self.button.config(text="Start", command=self.startthread)
    def startthread(self):
        self.running = True
        newthread = threading.Thread(target=self.printints)
        newthread.start()
        self.button.config(text="Stop", command=self._resetbutton)
    def printints(self):
        x = 0
        while self.running:
            print(x)
            x += 1
            time.sleep(1) # Simulate harder task
</snippet></ROW><ROW><id>15058544</id><snippet>self.running</snippet></ROW><ROW><id>15058544</id><snippet>printints</snippet></ROW><ROW><id>15058692</id><snippet>map_coordinates</snippet></ROW><ROW><id>15058692</id><snippet>(height, width)</snippet></ROW><ROW><id>15058692</id><snippet>from scipy.ndimage.interpolation import map_coordinates
from mpl_toolkits.basemap import interp
import numpy

in_data = numpy.array([[ 25.89125824,  25.88840675],[ 25.90930748,  25.90640068]], dtype=numpy.float32)

print map_coordinates(in_data.T, [[0.0],[0.125]], order=1, mode='nearest')
print interp(in_data, numpy.array([0,1]), numpy.array([0,1]), numpy.array([0.0]), numpy.array([0.125]), order=1)
</snippet></ROW><ROW><id>15058692</id><snippet>[ 25.89351463]
[ 25.89351439]
</snippet></ROW><ROW><id>15058748</id><snippet>cName</snippet></ROW><ROW><id>15058748</id><snippet>wingUtils.wingUtil</snippet></ROW><ROW><id>15058795</id><snippet>django.test.TestCase</snippet></ROW><ROW><id>15058795</id><snippet>TEST_NAME</snippet></ROW><ROW><id>15058795</id><snippet>testdb.sqlite</snippet></ROW><ROW><id>15058795</id><snippet>/Work/database.sqlite</snippet></ROW><ROW><id>15058795</id><snippet>manage.py</snippet></ROW><ROW><id>15058795</id><snippet>settings</snippet></ROW><ROW><id>15058928</id><snippet>a</snippet></ROW><ROW><id>15058928</id><snippet>.cs</snippet></ROW><ROW><id>15058928</id><snippet>text</snippet></ROW><ROW><id>15059014</id><snippet>x += 1</snippet></ROW><ROW><id>15059014</id><snippet>import threading
x = 0
def foo():
    global x
    for i in xrange(1000000):
        x += 1
threads = [threading.Thread(target=foo), threading.Thread(target=foo)]
for t in threads:
    t.daemon = True
    t.start()
for t in threads:
    t.join()
print(x)
</snippet></ROW><ROW><id>15059014</id><snippet>foo</snippet></ROW><ROW><id>15059014</id><snippet>In [80]: import dis

In [81]: dis.dis(foo)
  4           0 SETUP_LOOP              30 (to 33)
              3 LOAD_GLOBAL              0 (xrange)
              6 LOAD_CONST               1 (1000000)
              9 CALL_FUNCTION            1
             12 GET_ITER            
        &gt;&gt;   13 FOR_ITER                16 (to 32)
             16 STORE_FAST               0 (i)

  5          19 LOAD_GLOBAL              1 (x)
             22 LOAD_CONST               2 (1)
             25 INPLACE_ADD         
             26 STORE_GLOBAL             1 (x)
             29 JUMP_ABSOLUTE           13
        &gt;&gt;   32 POP_BLOCK           
        &gt;&gt;   33 LOAD_CONST               0 (None)
             36 RETURN_VALUE        
</snippet></ROW><ROW><id>15059014</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>15059014</id><snippet>x</snippet></ROW><ROW><id>15059014</id><snippet>INPLACE_ADD</snippet></ROW><ROW><id>15059014</id><snippet>STORE_GLOBAL</snippet></ROW><ROW><id>15059014</id><snippet>LOAD_GLOBAL</snippet></ROW><ROW><id>15059014</id><snippet>x</snippet></ROW><ROW><id>15059014</id><snippet>x</snippet></ROW><ROW><id>15059014</id><snippet>import threading
lock = threading.Lock()
x = 0
def foo():
    global x
    for i in xrange(1000000):
        with lock:
            x += 1
threads = [threading.Thread(target=foo), threading.Thread(target=foo)]
for t in threads:
    t.daemon = True
    t.start()
for t in threads:
    t.join()
print(x)
</snippet></ROW><ROW><id>15059014</id><snippet>2000000
</snippet></ROW><ROW><id>15059014</id><snippet>for i in range(1000):
    t = threading.Thread(target = worker)
    threads.append(t)
    t.start()
</snippet></ROW><ROW><id>15059014</id><snippet>worker</snippet></ROW><ROW><id>15059014</id><snippet>foo</snippet></ROW><ROW><id>15059114</id><snippet>break</snippet></ROW><ROW><id>15059114</id><snippet>#Call get_column_number
column_num = get_column_number()
</snippet></ROW><ROW><id>15059114</id><snippet>for column_number in file obj:</snippet></ROW><ROW><id>15059114</id><snippet>content = ''
file_obj = open('table.csv','r')
content = fle_obj.split(',')
print(content[column_number])
</snippet></ROW><ROW><id>15059225</id><snippet>{% for %}</snippet></ROW><ROW><id>15059241</id><snippet>pygal.MyGauge</snippet></ROW><ROW><id>15059241</id><snippet>pygal.</snippet></ROW><ROW><id>15059241</id><snippet>pygal</snippet></ROW><ROW><id>15059241</id><snippet>MyGauge</snippet></ROW><ROW><id>15059241</id><snippet>MyGauge(...)</snippet></ROW><ROW><id>15059241</id><snippet>MyGauge</snippet></ROW><ROW><id>15059241</id><snippet>MyGraph</snippet></ROW><ROW><id>15059486</id><snippet>for c in theString:
    if c == '"':
        print 'Aha!'
</snippet></ROW><ROW><id>15059486</id><snippet>theString.index('"')
</snippet></ROW><ROW><id>15059526</id><snippet>test</snippet></ROW><ROW><id>15059526</id><snippet>foo</snippet></ROW><ROW><id>15059526</id><snippet>print max([test[i] for i in foo])
</snippet></ROW><ROW><id>15059806</id><snippet>canvas.print_png(img_buffer)
</snippet></ROW><ROW><id>15059806</id><snippet>img_buffer.read()</snippet></ROW><ROW><id>15059806</id><snippet>img_buffer.seek(0)</snippet></ROW><ROW><id>15059806</id><snippet>canvas.print_png(img_buffer)</snippet></ROW><ROW><id>15059806</id><snippet>out</snippet></ROW><ROW><id>15059806</id><snippet>base64.encode(img_buffer, out)
img_str = out.getvalue()
</snippet></ROW><ROW><id>15059806</id><snippet>img_str = base64.encodestring(img_buffer.getvalue())
</snippet></ROW><ROW><id>15059806</id><snippet>img_str = base64.b64encode(s.getvalue())
</snippet></ROW><ROW><id>15059882</id><snippet>this</snippet></ROW><ROW><id>15059882</id><snippet>self</snippet></ROW><ROW><id>15059882</id><snippet>Reverse</snippet></ROW><ROW><id>15059882</id><snippet>self.reverse(var[:-1])
</snippet></ROW><ROW><id>15059882</id><snippet>reverse</snippet></ROW><ROW><id>15059882</id><snippet>return var[-1] + self.reverse(var[:-1])
</snippet></ROW><ROW><id>15059915</id><snippet>config.add_renderer('.html', 'pyramid_jinja2.renderer_factory')
</snippet></ROW><ROW><id>15060007</id><snippet>compile(s, COMPILE_STRING_FN, "single")</snippet></ROW><ROW><id>15060007</id><snippet>def interactive_py_compile(source, filename="&lt;interactive&gt;"):
    c = compile(source, filename, "single")

    # we expect this at the end:
    #   PRINT_EXPR     
    #   LOAD_CONST
    #   RETURN_VALUE    
    import dis
    if ord(c.co_code[-5]) != dis.opmap["PRINT_EXPR"]:
        return c
    assert ord(c.co_code[-4]) == dis.opmap["LOAD_CONST"]
    assert ord(c.co_code[-1]) == dis.opmap["RETURN_VALUE"]

    code = c.co_code[:-5]
    code += chr(dis.opmap["RETURN_VALUE"])

    CodeArgs = [
        "argcount", "nlocals", "stacksize", "flags", "code",
        "consts", "names", "varnames", "filename", "name",
        "firstlineno", "lnotab", "freevars", "cellvars"]
    c_dict = dict([(arg, getattr(c, "co_" + arg)) for arg in CodeArgs])
    c_dict["code"] = code

    import types
    c = types.CodeType(*[c_dict[arg] for arg in CodeArgs])
    return c
</snippet></ROW><ROW><id>15060020</id><snippet>class Dealer(object):

    def __init__(self,name):
        super(Dealer,self).__init__() 
        self.name = name
        self.__hand = Hand() # Instance Hand so you can use its contents.
        pass

    def takeCards(self,cards):
        self.__hand.takeCards(cards)
        pass

    def clearHand(self):
        # self.Hand.clear(card)
        self.__hand.clear(card) # fixed this to point to our instance
        pass
</snippet></ROW><ROW><id>15060205</id><snippet>import collections
import functools

class memoized(object):
   '''Decorator. Caches a function's return value each time it is called.
   If called later with the same arguments, the cached value is returned
   (not reevaluated).
   '''
   def __init__(self, func):
      self.func = func
      self.cache = {}
   def __call__(self, *args):
      if not isinstance(args, collections.Hashable):
         # uncacheable. a list, for instance.
         # better to not cache than blow up.
         return self.func(*args)
      if args in self.cache:
         return self.cache[args]
      else:
         value = self.func(*args)
         self.cache[args] = value
         return value
   def __repr__(self):
      '''Return the function's docstring.'''
      return self.func.__doc__
   def __get__(self, obj, objtype):
      '''Support instance methods.'''
      return functools.partial(self.__call__, obj)
</snippet></ROW><ROW><id>15060205</id><snippet>@memoized
def fun(x1, y1, x2, y2, n, r=[]):
    ...
</snippet></ROW><ROW><id>15060205</id><snippet>r = []</snippet></ROW><ROW><id>15060205</id><snippet>def fun(x1, y1, x2, y2, n, r=None):
    r = [] if r is None else r
</snippet></ROW><ROW><id>15060205</id><snippet>print len(fun(200, 400, 200, 0, 9))
</snippet></ROW><ROW><id>15060291</id><snippet>inspect.signature()</snippet></ROW><ROW><id>15060291</id><snippet>import functools
import inspect

def verbose(wrapped):
    @functools.wraps(wrapped)  # optional - make wrapper look like wrapped
    def wrapper(*args):
        print('inside wrapper:')
        fsig = inspect.signature(wrapped)
        parameters = ', '.join('{}={}'.format(*pair)
                               for pair in zip(fsig.parameters, args))
        print('  wrapped call to {}({})'.format(wrapped.__name__, parameters))
        for parameter in fsig.parameters.values():
            print("  {} param's annotation: {!r}".format(parameter.name,
                                                         parameter.annotation))
        result = wrapped(*args)
        print('  returning {!r} with annotation: {!r}'.format(result,
                                                         fsig.return_annotation))
        return result
    return wrapper

@verbose
def xXy(x: 'x in X\'s', y: 'y in Y\'s') -&gt; ('x times y','in X and Y units'):
    return x*y

xy = xXy(10, 3)
print('xXy(10, 3) -&gt; {!r}'.format(xy))
</snippet></ROW><ROW><id>15060291</id><snippet>inside wrapper:
  wrapped call to xXy(x=10, y=3)
  x param's annotation: "x in X's"
  y param's annotation: "y in Y's"
  returning 30 with annotation: ('x times y', 'in X and Y units')
xXy(10, 3) -&gt; 30
</snippet></ROW><ROW><id>15060327</id><snippet>exec code in dictionary</snippet></ROW><ROW><id>15060327</id><snippet>globals()</snippet></ROW><ROW><id>15060327</id><snippet># The submission test must be a function.
def test_code(code, CC, error, code_vars):

    # unpack the student code namespace into the globals()
    globs = globals()
    for var, val in code_vars.items():
        globs[var] = val

    # Use information from errors in student code
    if error:
        return "Yada yada %s" %error

    # Use information in the raw student code
    if len(code.split("\n")) is not 2:
        return "This should be accomplished in 2 lines"

    # Have direct access to variables from the student code
    # I'd like to avoid params['y'] if possible.
    try:
        y
    except NameError:
        return "Please use the variable y"

    if y is not 8:
        return "Wrong! Check stuff"

    # Use information from print output
    if str(y) not in CC:
        return "Remember to print your variable!"

    return True

# Read in student code
student_code = """y = 8
                  print y
                  potato"""

# Catch print output
CC = StringIO.StringIO()
sys.stdout = CC

# create the namespace for the student code
code_vars = {}

# Execute student code and catch errors
try:
    # execute the student code in the created namespace
    exec student_code in code_vars
except Exception as e:
    error = e

# Start outputting to the terminal again
sys.stdout = sys.__stdout__

# Run the submission test
submission_test = test_code(student_code, CC.split("\n"), error, code_vars)

# Output the result of the submission test
if submission_test is True:
    print("Well done!")
elif submission_test is False:
    print("Oops! You failed... Try again!")
else:
    print(submission_test)
</snippet></ROW><ROW><id>15060504</id><snippet>if</snippet></ROW><ROW><id>15060504</id><snippet>or</snippet></ROW><ROW><id>15060504</id><snippet>and</snippet></ROW><ROW><id>15060569</id><snippet>default_factory</snippet></ROW><ROW><id>15060569</id><snippet>defaultdict(lambda: [0,0])
</snippet></ROW><ROW><id>15060569</id><snippet>list([0,0])</snippet></ROW><ROW><id>15060569</id><snippet>[0,0]</snippet></ROW><ROW><id>15060637</id><snippet>fileinput</snippet></ROW><ROW><id>15060644</id><snippet>argparse</snippet></ROW><ROW><id>15060644</id><snippet>ArgumentParser</snippet></ROW><ROW><id>15060644</id><snippet>sys.argv</snippet></ROW><ROW><id>15060644</id><snippet>import argparse
import sys

parser = argparse.ArgumentParser(description="Does some awesome things.")
parser.add_argument('message', type=str, help="pass a message into the script")

if __name__ == '__main__':
    args = parser.parse_args(sys.argv[1:])
    print args.message
</snippet></ROW><ROW><id>15061358</id><snippet>iter</snippet></ROW><ROW><id>15061358</id><snippet>for num in iter(lambda: int(raw_input('Your number is: ')), 0):
    print 'You entered', num
</snippet></ROW><ROW><id>15061604</id><snippet>- np.isnan(df)</snippet></ROW><ROW><id>15061604</id><snippet>pd.notnull(df)</snippet></ROW><ROW><id>15061604</id><snippet>In [1]: import pandas as pd

In [2]: import numpy as np

In [3]: df = pd.DataFrame({'a':[1,2,3,4,np.nan],'b':[np.nan,np.nan,np.nan,5,np.nan]})


In [4]: - np.isnan(df)
Out[4]: 
       a      b
0   True  False
1   True  False
2   True  False
3   True   True
4  False  False

In [5]: %timeit - np.isnan(df)
10000 loops, best of 3: 159 us per loop

In [6]: %timeit pd.notnull(df)
1000 loops, best of 3: 1.22 ms per loop
</snippet></ROW><ROW><id>15061808</id><snippet>def parse_items_1(self, response):
        items = []
        print ('*** response:', response.url)
        hxs = HtmlXPathSelector(response)
        titles = hxs.select('//h3')
        for title in titles:
            item = AmazeItem()
            item["title"] = title.select('.//a[@class="title"]/text()').extract()
            item["link"] = title.select('.//a[@class="title"]/@href').extract()
            print ('**parse-items_1:', item["title"], item["link"])
            items.append(item)
        return items
</snippet></ROW><ROW><id>15061808</id><snippet>.</snippet></ROW><ROW><id>15061808</id><snippet>title</snippet></ROW><ROW><id>15061870</id><snippet>object.__getattribute__()</snippet></ROW><ROW><id>15061870</id><snippet>b.x</snippet></ROW><ROW><id>15061870</id><snippet>type(b).__dict__['x'].__get__(b, type(b))</snippet></ROW><ROW><id>15061870</id><snippet>b</snippet></ROW><ROW><id>15061870</id><snippet>type(b)</snippet></ROW><ROW><id>15061870</id><snippet>object.__getattribute__</snippet></ROW><ROW><id>15061870</id><snippet>__getattribute__</snippet></ROW><ROW><id>15061870</id><snippet>class Foo(object):
    def __getattribute__(self, attr):
        myDict = object.__getattribute__(self, '__dict__')
        if attr in myDict and hasattr(myDict[attr], '__get__'):
            return myDict[attr].__get__(self, type(self))
        else:
            return super(Foo, self).__getattribute__(attr)

class D(object):
    def __init__(self, fget=None, fset=None, fdel=None, doc=None):
        pass
    def __get__(self, obj, objtype=None):
        return 5
</snippet></ROW><ROW><id>15061870</id><snippet>&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.x = D()
&gt;&gt;&gt; f.x
5
</snippet></ROW><ROW><id>15062779</id><snippet>sca(s, v)</snippet></ROW><ROW><id>15062803</id><snippet>sys.path.append(path_to_src_directory)</snippet></ROW><ROW><id>15062803</id><snippet>No module named src</snippet></ROW><ROW><id>15062803</id><snippet>__init__.py</snippet></ROW><ROW><id>15062953</id><snippet>1. n = 1
2. 1 == -99 ?
3. n = new input
4. set new minimum from n
5. n == -99?
</snippet></ROW><ROW><id>15062953</id><snippet>n</snippet></ROW><ROW><id>15062953</id><snippet>n==-99</snippet></ROW><ROW><id>15062953</id><snippet>while True</snippet></ROW><ROW><id>15062953</id><snippet>s = -99
n = 1
minimum = None
maximum = None
print ("Enter a series of numbers")
print ("Enter -99 to quit.")
while True:
    n = float(input("Number: "))
    if n == s:
        break
    if minimum is None or n &lt; minimum:
        minimum = n
    if maximum is None or n &gt; maximum:
        maximum = n
    print ("The maximum is: ", maximum)
    print ("The minimum is: ", minimum)
</snippet></ROW><ROW><id>15063220</id><snippet>&gt;&gt;&gt; dirname='2009' #or the full path.
&gt;&gt;&gt; for filename in os.listdir(dirname):
...     with open(os.path.join(dirname, filename)) as f:
...         for line in f.readlines():
...             print line
...
</snippet></ROW><ROW><id>15063344</id><snippet>import requests
data = {'Category' : '2', 'suid' : '19', 'deletetree' : '6', 'pushed' : 'Delete+Tree' }
response = requests.post('http://mysite.com/management.php', data=data)

print response.text
</snippet></ROW><ROW><id>15063344</id><snippet>login_data = data={'username': 'user', 'password': 'pass'
post_data = {
    'Category' : '2', 'suid' : '19', 'deletetree' : '6', 'pushed' : 'Delete+Tree'
}
login_response = requests.get('http://mysite.com/myprofile.php', data=login_data)
form_response = requests.post(
    'http://mysite.com/management.php',
     data=post_data, 
     cookies=login_response.cookies
)
</snippet></ROW><ROW><id>15063548</id><snippet>num - 1</snippet></ROW><ROW><id>15063548</id><snippet>num</snippet></ROW><ROW><id>15063548</id><snippet>num</snippet></ROW><ROW><id>15063548</id><snippet>num -= 1</snippet></ROW><ROW><id>15063548</id><snippet>num</snippet></ROW><ROW><id>15063548</id><snippet>num = num - 1</snippet></ROW><ROW><id>15063548</id><snippet>num</snippet></ROW><ROW><id>15063548</id><snippet>num - 1</snippet></ROW><ROW><id>15063548</id><snippet>foo = num - 1</snippet></ROW><ROW><id>15063548</id><snippet>print(num - 1)</snippet></ROW><ROW><id>15063548</id><snippet>num -= 1</snippet></ROW><ROW><id>15063719</id><snippet>import matplotlib
import matplotlib.pyplot

# force headless backend, or set 'backend' to 'Agg'
# in your ~/.matplotlib/matplotlibrc
matplotlib.use('Agg')

# force non-interactive mode, or set 'interactive' to False
# in your ~/.matplotlib/matplotlibrc
matplotlib.pyplot.ioff()
</snippet></ROW><ROW><id>15063849</id><snippet>zy = y * (SCALED_HEIGHT)/(HEIGHT-1) + SCALED_Y_MIN;
</snippet></ROW><ROW><id>15063849</id><snippet>zy = y * SCALED_HEIGHT * 1.0/(HEIGHT-1) + SCALED_Y_MIN;
</snippet></ROW><ROW><id>15063849</id><snippet>const int EPSILON = 1e-3;
</snippet></ROW><ROW><id>15063941</id><snippet>field_size_limit</snippet></ROW><ROW><id>15063941</id><snippet>import sys
import csv

csv.field_size_limit(sys.maxsize)
</snippet></ROW><ROW><id>15063941</id><snippet>sys.maxsize</snippet></ROW><ROW><id>15063941</id><snippet>sys.maxint</snippet></ROW><ROW><id>15063941</id><snippet>OverflowError: Python int too large to convert to C long</snippet></ROW><ROW><id>15063941</id><snippet>import sys
import csv
maxInt = sys.maxsize
decrement = True

while decrement:
    # decrease the maxInt value by factor 10 
    # as long as the OverflowError occurs.

    decrement = False
    try:
        csv.field_size_limit(maxInt)
    except OverflowError:
        maxInt = int(maxInt/10)
        decrement = True
</snippet></ROW><ROW><id>15064406</id><snippet>count</snippet></ROW><ROW><id>15064406</id><snippet>[0,1,...,N]</snippet></ROW><ROW><id>15064406</id><snippet>p=[p0,p1,...,pN]</snippet></ROW><ROW><id>15064406</id><snippet>p0+...+pN==1</snippet></ROW><ROW><id>15064406</id><snippet>c_k</snippet></ROW><ROW><id>15064406</id><snippet>k</snippet></ROW><ROW><id>15064406</id><snippet>c[k] = p[k]*count
</snippet></ROW><ROW><id>15064410</id><snippet>kill</snippet></ROW><ROW><id>15064410</id><snippet>SIGTERM</snippet></ROW><ROW><id>15064410</id><snippet>kill</snippet></ROW><ROW><id>15064410</id><snippet>SIGUSR*</snippet></ROW><ROW><id>15064410</id><snippet>man &lt;commandname&gt;</snippet></ROW><ROW><id>15064410</id><snippet>man kill</snippet></ROW><ROW><id>15064410</id><snippet>kill -l</snippet></ROW><ROW><id>15064410</id><snippet>SIG</snippet></ROW><ROW><id>15064410</id><snippet>kill -10</snippet></ROW><ROW><id>15064410</id><snippet>kill -USR1</snippet></ROW><ROW><id>15064410</id><snippet>kill -SIGUSR1</snippet></ROW><ROW><id>15064410</id><snippet>kill</snippet></ROW><ROW><id>15064436</id><snippet>t1 = threading.Thread(target=my_function, args=())
t1.start()
</snippet></ROW><ROW><id>15064436</id><snippet>z = t1.isAlive()
</snippet></ROW><ROW><id>15064436</id><snippet>l = threading.enumerate()
</snippet></ROW><ROW><id>15064436</id><snippet>t1 = threading.Thread(target=my_function, args=())
t1.start()
t1.join()
# Will only get to here once t1 has returned.
</snippet></ROW><ROW><id>15064604</id><snippet>#!/usr/bin/python
import csv
import MySQLdb
import os

mydb = MySQLdb.connect(host='localhost',
user='root',
passwd='*******',
db='kestrel_keep')

cursor = mydb.cursor()

csv_data = csv.reader(file('data_csv.log'))

start_row = 0

def getSize(fileobject):
fileobject.seek(0,2) # move the cursor to the end of the file
size = fileobject.tell()
return size

file = open('data_csv.log', 'rb')
curr_file_size = getSize(file)

# Get the last file Size
if os.path.exists("file_size"):
with open("file_size") as f:
    saved_file_size = int(f.read())


# Get the last processed line
if os.path.exists("lastline"):
with open("lastline") as f:
    start_row = int(f.read())


if curr_file_size &lt; saved_file_size: start_row = 0

cur_row = 0
for row in csv_data:
 if cur_row &gt;= start_row:
     cursor.execute('INSERT INTO `heating` VALUES ( %s, %s, %s, %s, %s, %s, %s, %s, %s,    %s, %s, %s, %s, %s, %s, %s ,%s)', row)

     # Other processing if necessary

 cur_row += 1

 mydb.commit()
 cursor.close()


# Store the last processed line
with open("lastline", 'w') as f:
start_line = f.write(str(cur_row + 1)) # you want to start at the **next** line
                                      # next time
# Store Current  File Size To Find File Flush    
with open("file_size", 'w') as f:
start_line = f.write(str(curr_file_size))

# not necessary but good for debug
print (str(cur_row))



 print "Done"
</snippet></ROW><ROW><id>15064885</id><snippet>class DeviceProperty(Model):
    …
    class Meta:
        unique_together = ['device', 'name']
</snippet></ROW><ROW><id>15064927</id><snippet>datetime.date.today()</snippet></ROW><ROW><id>15064927</id><snippet>datetime.date.today()</snippet></ROW><ROW><id>15064927</id><snippet>today()</snippet></ROW><ROW><id>15064927</id><snippet>headers</snippet></ROW><ROW><id>15064966</id><snippet>websocket-4173-2</snippet></ROW><ROW><id>15065152</id><snippet>&gt;&gt;&gt; zip(*a)[0]
(1, 4)
</snippet></ROW><ROW><id>15065152</id><snippet>zip(*a)</snippet></ROW><ROW><id>15065152</id><snippet>&gt;&gt;&gt; zip(*a)
[(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>15065152</id><snippet>[0]</snippet></ROW><ROW><id>15065152</id><snippet>&gt;&gt;&gt; zip(*a)[0]
(1, 4)
</snippet></ROW><ROW><id>15065152</id><snippet>zip</snippet></ROW><ROW><id>15065152</id><snippet>&gt;&gt;&gt; [i for l in a for i in l[1:]]
[2, 3, 5, 6, 8]
</snippet></ROW><ROW><id>15065152</id><snippet>&gt;&gt;&gt; [l[1:] for l in a]
[[2, 3], [5, 6], [8]]
</snippet></ROW><ROW><id>15065257</id><snippet>with open('file1.txt', 'r+'), open('file2.txt') as file1, file2:
    list = file1.readlines()
    list.insert(3, file2.readlines())
    file1.writelines(list)
</snippet></ROW><ROW><id>15065257</id><snippet>3</snippet></ROW><ROW><id>15065257</id><snippet>4</snippet></ROW><ROW><id>15065324</id><snippet>itertools.product</snippet></ROW><ROW><id>15065324</id><snippet>from itertools import product

for x1, x2, x3, x4 in product(*(range(i+1) for i in maxvalues)):
    t.append((x1, x2, x3, x4))
</snippet></ROW><ROW><id>15065324</id><snippet>product</snippet></ROW><ROW><id>15065324</id><snippet>t = list(product(*(range(i+1) for i in maxvalues)))
</snippet></ROW><ROW><id>15065324</id><snippet>if</snippet></ROW><ROW><id>15065324</id><snippet>t = [i for i in product(*(range(i+1) for i in maxvalues)) if sum(i) == k]
</snippet></ROW><ROW><id>15065482</id><snippet>word</snippet></ROW><ROW><id>15065482</id><snippet>word = str(len(re.findall('\Wable#1\W', lines)))
# or
if str(word) in lines:
    total += 1
</snippet></ROW><ROW><id>15065726</id><snippet>else</snippet></ROW><ROW><id>15065726</id><snippet>if</snippet></ROW><ROW><id>15065726</id><snippet>if a &lt;= 40:
    print('True')
else:
    print('False')
</snippet></ROW><ROW><id>15065825</id><snippet>def rmblock(path, block):                           
    lines = open(path).readlines()                  
    blockstart = lines.index(block + "\n")          
    blockend = lines.index(r"\n" + "\n", blockstart)
    del(lines[blockstart:blockend+1])               
    open(path, 'w+').writelines(lines)              
</snippet></ROW><ROW><id>15065925</id><snippet>defaultdict</snippet></ROW><ROW><id>15065925</id><snippet>'b'</snippet></ROW><ROW><id>15065925</id><snippet>3</snippet></ROW><ROW><id>15065925</id><snippet>3</snippet></ROW><ROW><id>15065925</id><snippet>from collections import defaultdict

d = defaultdict(list)
for item in list_of_list:
  d[item[0]].append(item[1])
</snippet></ROW><ROW><id>15066201</id><snippet>import re

def translate_pattern(pattern):
    res = []
    for c in pattern:
        if c == '*':
            res.append('.+')  # 1 or more
        elif c == '.':
            res.append('.')   # exactly 1
        else:
            res.append(re.escape(c))  # anything else is a literal character
    return re.compile(''.join(res))
</snippet></ROW><ROW><id>15066201</id><snippet>&gt;&gt;&gt; translate_pattern('baduser*@gmail.com').search('baduser12345@gmail.com')
&lt;_sre.SRE_Match object at 0x107467780&gt;
&gt;&gt;&gt; translate_pattern('baduser*@gmail.com').search('gooduser@gmail.com')
</snippet></ROW><ROW><id>15066201</id><snippet>.</snippet></ROW><ROW><id>15066201</id><snippet>&gt;&gt;&gt; translate_pattern('baduser*@gmail.com').search('baduser12345@gmail-com')
&lt;_sre.SRE_Match object at 0x1074677e8&gt;
</snippet></ROW><ROW><id>15066201</id><snippet>.</snippet></ROW><ROW><id>15066201</id><snippet>-</snippet></ROW><ROW><id>15066201</id><snippet>gmail-com</snippet></ROW><ROW><id>15066379</id><snippet>svn info path/to/working/copy
</snippet></ROW><ROW><id>15066379</id><snippet>Path: path/to/working/copy
Working Copy Root Path: blah blah
URL: https://blah blah
Repository Root: https://blah blah
Repository UUID: blah blah
Revision: 42
Node Kind: directory
Schedule: normal
Last Changed Author: blah blah
Last Changed Rev: 42
Last Changed Date: 2013-02-25 09:52:55 +0000 (Mon, 25 Feb 2013)
</snippet></ROW><ROW><id>15066379</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>15066379</id><snippet>svn</snippet></ROW><ROW><id>15066379</id><snippet>re</snippet></ROW><ROW><id>15066553</id><snippet>create_engine()</snippet></ROW><ROW><id>15066553</id><snippet>connect_args</snippet></ROW><ROW><id>15066553</id><snippet>connect()</snippet></ROW><ROW><id>15066553</id><snippet>connect()</snippet></ROW><ROW><id>15066553</id><snippet>sqlite3.connect()</snippet></ROW><ROW><id>15066553</id><snippet>timeout</snippet></ROW><ROW><id>15066553</id><snippet>create_engine('sqlite:///some.db', connect_args={'timeout': 15})
</snippet></ROW><ROW><id>15066604</id><snippet>Queue</snippet></ROW><ROW><id>15066604</id><snippet>multiprocessing.Pipe()</snippet></ROW><ROW><id>15066604</id><snippet>._reader</snippet></ROW><ROW><id>15066604</id><snippet>._writer</snippet></ROW><ROW><id>15066604</id><snippet>.fileno()</snippet></ROW><ROW><id>15066604</id><snippet>&gt;&gt;&gt; import multiprocessing
&gt;&gt;&gt; queue = multiprocessing.Queue()
&gt;&gt;&gt; queue._reader.fileno()
3
&gt;&gt;&gt; queue._writer.fileno()
4
</snippet></ROW><ROW><id>15066604</id><snippet>._reader</snippet></ROW><ROW><id>15066604</id><snippet>._writer</snippet></ROW><ROW><id>15066640</id><snippet>logging</snippet></ROW><ROW><id>15066640</id><snippet>logging</snippet></ROW><ROW><id>15066834</id><snippet>requests.get('https://accounts.google.com/ServiceLogin?lp=1&amp;hl=en')
</snippet></ROW><ROW><id>15067404</id><snippet>dependency_links</snippet></ROW><ROW><id>15067404</id><snippet>setup(
    ...
    dependency_links=[
        'git+https://example.com/spamneggs/foobar.git#egg=foobar-1.2.3'
    ]
    install_requires=[
        'foobar',
    ]
)
</snippet></ROW><ROW><id>15067404</id><snippet>dependency_links</snippet></ROW><ROW><id>15067404</id><snippet>#egg=package-version</snippet></ROW><ROW><id>15067553</id><snippet>threading.Thread.__init__</snippet></ROW><ROW><id>15067553</id><snippet>group</snippet></ROW><ROW><id>15067553</id><snippet>target</snippet></ROW><ROW><id>15067553</id><snippet>name</snippet></ROW><ROW><id>15067553</id><snippet>args</snippet></ROW><ROW><id>15067553</id><snippet>kwargs</snippet></ROW><ROW><id>15067553</id><snippet>verbose</snippet></ROW><ROW><id>15067553</id><snippet>threading.Thread.__init__</snippet></ROW><ROW><id>15067553</id><snippet>self.__dict__.update(**kwargs)
</snippet></ROW><ROW><id>15067553</id><snippet>import threading

class Test(threading.Thread):
    def __init__(self, **kwargs):
        super(Test, self).__init__(
            **{k: v for k in 'group target name args kwargs verbose'.split()
               if k in kwargs})
        self.__dict__.update(**kwargs)

A = None
B = 1
test = Test(A=A, B=B)
print test.A
print test.B
</snippet></ROW><ROW><id>15067553</id><snippet>__init__</snippet></ROW><ROW><id>15067553</id><snippet>super(Test, self).__init__()
</snippet></ROW><ROW><id>15067553</id><snippet>threading.Thread</snippet></ROW><ROW><id>15067553</id><snippet>class Thread(_Verbose):    
    def __init__(self, group=None, target=None, name=None,
                 args=(), kwargs=None, verbose=None):
        assert group is None, "group argument must be None for now"
        _Verbose.__init__(self, verbose)
        if kwargs is None:
            kwargs = {}
        self.__target = target
        self.__name = str(name or _newname())
        self.__args = args
        self.__kwargs = kwargs
        self.__daemonic = self._set_daemon()
        self.__ident = None
        self.__started = Event()
        self.__stopped = False
        self.__block = Condition(Lock())
        self.__initialized = True
        # sys.stderr is not stored in the class like
        # sys.exc_info since it can be changed between instances
        self.__stderr = _sys.stderr
</snippet></ROW><ROW><id>15067854</id><snippet>ax = plt.gca()
</snippet></ROW><ROW><id>15067854</id><snippet>import matplotlib.pyplot as plt
import matplotlib.finance
quotes = [(1, 5, 6, 7, 4), (2, 6, 9, 9, 6), (3, 9, 8, 10, 8), (4, 8, 8, 9, 8), (5, 8, 11, 13, 7)]
ax = plt.gca()
h = matplotlib.finance.candlestick(ax, quotes)
plt.show()
</snippet></ROW><ROW><id>15068017</id><snippet>try:
    import cPickle as pickle
except ImportError:
    import pickle

class MyClass(object):

    def __init__(self, file_name):
        self.array = []
        self.file_name = file_name
        self.load_data()

    def add_element(self, element):
        self.array.append(element)
        self.save_data()

    def load_data(self):
        try:
            with open(self.file_name, "r") as f:
                self.array = pickle.load(f)
        except IOError:
            pass

    def save_data(self):
        with open(self.file_name, "w") as f:
            pickle.dump(self.array, f)

def main():
    FILE_NAME = "test.pkl"
    a = MyClass(FILE_NAME)
    print "elements in array are", a.array
    for i in range(5):
        a.add_element(i)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>15068461</id><snippet>NumCommas = 0  

File = open(InFileName)  
for line in File:  
    if line.count(',') &gt; NumCommas:  
        NumCommas = line.count(',')
</snippet></ROW><ROW><id>15068461</id><snippet>for (lineno, row) in enumerate(reader):
    if len(row) &gt;= 3:
        OutFile.write("insert into table_name values(",row[0],", 2, to_date(",   row[1],",'YYYY-MM-DD'), 1, 1, -1, 0, ",row[2],", ",row[2],", 0, 0, 0, sysdate, 0);" +   '\n')
    else:
        print("Line {0} does not contain at least three columns: {1}".format(lineno, row))
</snippet></ROW><ROW><id>15068830</id><snippet>:abbreviate</snippet></ROW><ROW><id>15068830</id><snippet>:ia pdb import pdb; pdb.set_trace()&lt;ESC&gt;
</snippet></ROW><ROW><id>15069093</id><snippet>ndb</snippet></ROW><ROW><id>15069093</id><snippet>db</snippet></ROW><ROW><id>15069093</id><snippet>.order()</snippet></ROW><ROW><id>15069093</id><snippet>query = datamodel.Feedback.all().order('-created')
</snippet></ROW><ROW><id>15069233</id><snippet>from flask.ext.sqlalchemy import SQLAlchemy
db = SQLAlchemy()

class Contact(db.Model):
    ...
</snippet></ROW><ROW><id>15069233</id><snippet>from models import db
from flask import Flask
import unittest

class TestExample(unittest.TestCase):

    def setUp(self):
        self.app = Flask(__name__)
        db.init_app(self.app)
        with self.app.app_context():
            db.create_all()
</snippet></ROW><ROW><id>15069447</id><snippet>lst_lvl1 = [] # Top level list

for i, project in enumerate(root):
    projects[i] = project

    print(project.get('name'))
    lst_lvl1.append(project.get('name')) # Append to the top level list

    lst_lvl2 = [] # Create an empty 2nd level list

    for u, design in enumerate(project):
        designs[u] = design
        print(design.get('name'))
        lst_lvl2.append(design.get('name')) # Append to the 2nd level list

        lst_lvl3 = [] # Create a 3rd level list...
        for x, param in enumerate(design):
            params[x] = param
            print(param.get('name'))
            lst_lvl3.append(param.get('name'))
            lst_lvl4 = []
            for x, info in enumerate(param):
                print(info.text)
                lst_lvl4.append(info.text)
            lst_lvl3.append(lst_lvl4) # At the end of level 4, append what you got to the level-3 list
        lst_lvl2.append(lst_lvl3) # At the end of level 3, append what you got to the level-2 list... etc
    lst_lvl1.append(lst_lvl2)

print lst_lvl1
</snippet></ROW><ROW><id>15069580</id><snippet>numpy.random</snippet></ROW><ROW><id>15069580</id><snippet>numpy.random.seed</snippet></ROW><ROW><id>15069580</id><snippet>SOME_FIXED_SEED = 42

# before training/inference:
np.random.seed(SOME_FIXED_SEED)
</snippet></ROW><ROW><id>15070004</id><snippet>module = __import__('module_name')
</snippet></ROW><ROW><id>15070021</id><snippet>super()</snippet></ROW><ROW><id>15070021</id><snippet>__init__()</snippet></ROW><ROW><id>15070021</id><snippet>__init__()</snippet></ROW><ROW><id>15070021</id><snippet>__init__()</snippet></ROW><ROW><id>15070021</id><snippet>super()</snippet></ROW><ROW><id>15070021</id><snippet>__init__()</snippet></ROW><ROW><id>15070021</id><snippet>&gt;&gt;&gt; class A(object):
...   def __init__(self):
...     print "A"
... 
&gt;&gt;&gt; class B(A):
...   def __init__(self):
...     A.__init__(self)
...     print "B"
... 
&gt;&gt;&gt; class C(A):
...   def __init__(self):
...     A.__init__(self)
...     print "C"
... 
&gt;&gt;&gt; class D(B,C):
...   def __init__(self):
...     B.__init__(self)
...     C.__init__(self)
...     print "D"
... 
&gt;&gt;&gt; D()
A
B
A
C
D
&lt;__main__.D object at 0x106de1d10&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15070021</id><snippet>super()</snippet></ROW><ROW><id>15070021</id><snippet>&gt;&gt;&gt; class A(object):
...   def __init__(self):
...     print "A"
... 
&gt;&gt;&gt; class B(A):
...   def __init__(self):
...     super(B,self).__init__()
...     print "B"
... 
&gt;&gt;&gt; class C(A):
...   def __init__(self):
...     super(C,self).__init__()
...     print "C"
... 
&gt;&gt;&gt; class D(B,C):
...   def __init__(self):
...     super(D,self).__init__()
...     print "D"
... 
&gt;&gt;&gt; D()
A
C
B
D
&lt;__main__.D object at 0x10d34ec90&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15070047</id><snippet>eventFilter</snippet></ROW><ROW><id>15070047</id><snippet>class Filter(QtCore.QObject):
    def eventFilter(self, widget, event):
        # FocusOut event
        if event.type() == QtCore.QEvent.FocusOut:
            # do custom stuff
            print 'focus out'
            # return False so that the widget will also handle the event
            # otherwise it won't focus out
            return False
        else:
            # we don't care about other events
            return False
</snippet></ROW><ROW><id>15070047</id><snippet># ...
self._filter = Filter()
# adjust for your QLineEdit
self.ui.lineEdit.installEventFilter(self._filter)
</snippet></ROW><ROW><id>15070110</id><snippet>In [11]: df
Out[11]: 
              c1        c2
first   0.821354  0.936703
second  0.138376  0.482180

In [12]: print df.to_latex()
\begin{tabular}{|l|c|c|c|}
\hline
{} &amp;        c1 &amp;        c2 \\
\hline
first  &amp;  0.821354 &amp;  0.936703 \\
second &amp;  0.138376 &amp;  0.482180 \\
\hline
\end{tabular}
</snippet></ROW><ROW><id>15070110</id><snippet>[12]</snippet></ROW><ROW><id>15070110</id><snippet>f1</snippet></ROW><ROW><id>15070110</id><snippet>f2</snippet></ROW><ROW><id>15070110</id><snippet>to_latex</snippet></ROW><ROW><id>15070110</id><snippet>formatters</snippet></ROW><ROW><id>15070110</id><snippet>def f1(x):
    return 'blah_%1.2f' % x

def f2(x):
    return 'f2_%1.2f' % x

In [15]: print df.to_latex(formatters=[f1, f2])
\begin{tabular}{|l|c|c|c|}
\hline
{} &amp;        c1 &amp;      c2 \\
\hline
first  &amp; blah\_0.82 &amp; f2\_0.94 \\
second &amp; blah\_0.14 &amp; f2\_0.48 \\
\hline
\end{tabular}
</snippet></ROW><ROW><id>15070110</id><snippet>f1</snippet></ROW><ROW><id>15070110</id><snippet>f2</snippet></ROW><ROW><id>15070723</id><snippet>attrib</snippet></ROW><ROW><id>15070723</id><snippet>for i in m:
    print (i.attrib['property'], i.attrib['content'])
</snippet></ROW><ROW><id>15070981</id><snippet>*args</snippet></ROW><ROW><id>15070981</id><snippet>def get_percentile(obs,*args):
    if len(args) == 0:
        args = [25,50,75] # default to quartiles
    lstper = []
    for arg in args:
        lstper.append(np.percentile(obs,arg))
    return lstper

class Metric(object):
    def __init__(self, values=[], percentiles=[]):
        self.max = max(values)
        self.median =np.median(values)
        self.min = min(values)
        self.percentile = get_percentile(values, percentiles)
</snippet></ROW><ROW><id>15070981</id><snippet>&gt;&gt;&gt; m = Metric(range(30,300,13), [20,40,60,80])
&gt;&gt;&gt; m.max
290
&gt;&gt;&gt; m.percentile
[[82.0, 134.0, 186.0, 238.0]]
</snippet></ROW><ROW><id>15070981</id><snippet>args</snippet></ROW><ROW><id>15070981</id><snippet>class Metric(object):
    def __init__(self, *args):
        if not len(args) == 2:
            raise ValueError("Usage: Metric([values],[percentiles])")
        values, percentiles = args
        self.max = max(values)
        self.median =np.median(values)
        self.min = min(values)
        self.percentile = get_percentile(values, percentiles)
</snippet></ROW><ROW><id>15071065</id><snippet>def convert(value):                                                                                                                                                               
    number, multiplier = value.split()                                                                                                                                            
    if multiplier == 'bytes':                                                                                                                                                     
        multiplier = 1                                                                                                                                                            
    elif multiplier == 'KB':                                                                                                                                                      
        multiplier = 2**10                                                                                                                                                        
    elif multiplier == 'MB':                                                                                                                                                      
        multiplier = 2**20                                                                                                                                                        
    elif multiplier == 'GB':                                                                                                                                                      
        multiplier = 2**30                                                                                                                                                        
    else:                                                                                                                                                                         
        raise RuntimeError('Unknown unit %r in %r' % (multiplier, value))                                                                                                         

    return float(number) * multiplier                                                                                                                                             
</snippet></ROW><ROW><id>15071276</id><snippet>import os.path
from configobj import ConfigObj

BASE = os.path.dirname(os.path.abspath(__file__))


class myHelper:

    def __init__(self):
        self.config = ConfigObj(os.path.join(BASE, 'config.cfg'))
</snippet></ROW><ROW><id>15071276</id><snippet>__file__</snippet></ROW><ROW><id>15071276</id><snippet>helper.py</snippet></ROW><ROW><id>15071276</id><snippet>/home/thisuser/project/common/helper.py</snippet></ROW><ROW><id>15071276</id><snippet>os.path.abspath()</snippet></ROW><ROW><id>15071276</id><snippet>os.path.dirname</snippet></ROW><ROW><id>15071276</id><snippet>/helper.py</snippet></ROW><ROW><id>15071451</id><snippet>self</snippet></ROW><ROW><id>15071451</id><snippet>add()</snippet></ROW><ROW><id>15071451</id><snippet>mylist</snippet></ROW><ROW><id>15071451</id><snippet>def display(self):
    mylist = self.add()
    z = min(mylist)
    w = mylist.index(z)

def add(self):
    list=[]
    mylist=[]

    for i in range(2):

        self.name = raw_input("Enter name: ")
        self.fastest_time = input("time: ")
        list.append(self.name)
        mylist.append(self.fastest_time)
    print "Names: ",list
    print "Fastest times: ",mylist

    return mylist
</snippet></ROW><ROW><id>15071451</id><snippet>self</snippet></ROW><ROW><id>15071451</id><snippet>list</snippet></ROW><ROW><id>15071468</id><snippet>import os
import re

def build_files_set(rootdir):
    root_to_subtract = re.compile(r'^.*?' + rootdir + r'[\\/]{0,1}')

    files_set = set()
    for (dirpath, dirnames, filenames) in os.walk(rootdir):
        for filename in filenames + dirnames:
            full_path = os.path.join(dirpath, filename)
            relative_path = root_to_subtract.sub('', full_path, count=1)
            files_set.add(relative_path)

    return files_set

def compare_directories(dir1, dir2):
    files_set1 = build_files_set(dir1)
    files_set2 = build_files_set(dir2)
    return (files_set1 - files_set2, files_set2 - files_set1)

if __name__ == '__main__':
    dir1 = 'old'
    dir2 = 'new'
    in_dir1, in_dir2 = compare_directories(dir1, dir2)

    print '\nFiles only in {}:'.format(dir1)
    for relative_path in in_dir1:
        print '* {0}'.format(relative_path)

    print '\nFiles only in {}:'.format(dir2)
    for relative_path in in_dir2:
        print '* {0}'.format(relative_path)
</snippet></ROW><ROW><id>15071614</id><snippet>islice</snippet></ROW><ROW><id>15071614</id><snippet>from itertools import islice
picked = set(on_teams)
players = list(islice((p for p in players if p[0] not in picked), 5))
</snippet></ROW><ROW><id>15072223</id><snippet>from flask.ext.sqlalchemy import SQLAlchemy
db = SQLAlchemy()
</snippet></ROW><ROW><id>15072223</id><snippet>from ..database import db

class User(db.Model):
    ...
</snippet></ROW><ROW><id>15072339</id><snippet>open(2)</snippet></ROW><ROW><id>15072339</id><snippet>open()</snippet></ROW><ROW><id>15072339</id><snippet>open()</snippet></ROW><ROW><id>15072339</id><snippet>open</snippet></ROW><ROW><id>15072339</id><snippet>open()</snippet></ROW><ROW><id>15072339</id><snippet>open</snippet></ROW><ROW><id>15072339</id><snippet>O_EXCL</snippet></ROW><ROW><id>15072339</id><snippet>open(..., O_EXCL, ...)</snippet></ROW><ROW><id>15072446</id><snippet>from copy import deepcopy

pastmoves.append(deepcopy(gamelist))
</snippet></ROW><ROW><id>15072880</id><snippet>http://...../filepath=abc~def~ghi

def SomePage(self, filepath=None):
    filepath.replace('~', '/')
    return 'HelloWorld'
</snippet></ROW><ROW><id>15073106</id><snippet>def all_five_vowels(word):
    vowels = ['a','e','o','i','u']
    for letter in word:
        if letter in vowels:
            vowels.remove(letter)
            if len(vowels) == 0:
                return True
    return False
</snippet></ROW><ROW><id>15073320</id><snippet>#imports here

class YourTestCase(TestCase):
    fixtures = ['user-data.json']

    def setUp(self):
        self.client = Client()

    def test_empty_datas(self):
        self.client.login(username='something', password='something')
        response = self.client.get('/path/to/view/')  # or reverse by name
        self.assertEqual(response.status_code, 302,
            'View did not redirect on empty queryset.')

    def test_populated_datas(self):
        self.client.login(username='something', password='something')
        Data.objects.create(some_field=some_value)
        response = self.client.get('/path/to/view/')  # or reverse by name
        self.assertEqual(response.status_code, 200,
            'View did not return a 200.')
</snippet></ROW><ROW><id>15073441</id><snippet>all(e['type'] == L[0]['type'] for e in L)
</snippet></ROW><ROW><id>15073441</id><snippet>len(set(e['type'] for e in L)) == 1
</snippet></ROW><ROW><id>15073441</id><snippet>all</snippet></ROW><ROW><id>15073441</id><snippet>&gt;&gt;&gt; %timeit all(e['type'] == l[0]['type'] for e in l)
1000000 loops, best of 3: 784 ns per loop

&gt;&gt;&gt; %timeit len(set(e['type'] for e in l)) == 1
1000000 loops, best of 3: 676 ns per loop

&gt;&gt;&gt; %timeit all([e['type'] == l[0]['type'] for e in l])
1000000 loops, best of 3: 602 ns per loop
</snippet></ROW><ROW><id>15073441</id><snippet>l[0]['type']</snippet></ROW><ROW><id>15073441</id><snippet>&gt;&gt;&gt; t1 = l[0]['type']
&gt;&gt;&gt; %timeit all([e['type'] == t1 for e in l])
1000000 loops, best of 3: 447 ns per loop

&gt;&gt;&gt; %timeit all(e['type'] == t1 for e in l)
1000000 loops, best of 3: 655 ns per loop
</snippet></ROW><ROW><id>15073441</id><snippet>set</snippet></ROW><ROW><id>15073441</id><snippet>&gt;&gt;&gt; %timeit len(set([gettype(e) for e in l])) == 1
1000000 loops, best of 3: 735 ns per loop
</snippet></ROW><ROW><id>15073441</id><snippet>set</snippet></ROW><ROW><id>15073441</id><snippet>&gt;&gt;&gt; %timeit [e['type'] for e in l].count(t1) == len(l)
1000000 loops, best of 3: 421 ns per loop
</snippet></ROW><ROW><id>15073441</id><snippet>In [31]: def same_type(L):
   ....:     t1 = L[0]['type']
   ....:     for e in L:
   ....:         if e['type'] != t1:
   ....:             return False
   ....:     return True
   ....:

In [32]: %timeit same_type(l)
1000000 loops, best of 3: 352 ns per loop
</snippet></ROW><ROW><id>15073441</id><snippet>In [47]: l = [{'type': 1} for _ in range(1000)]

In [48]: %timeit same_type(l)
10000 loops, best of 3: 37.6 us per loop

In [49]: %timeit  all(e['type'] == l[0]['type'] for e in l)
10000 loops, best of 3: 112 us per loop

In [50]: %timeit all([e['type'] == l[0]['type'] for e in l])
10000 loops, best of 3: 103 us per loop

In [51]: %timeit len(set(e['type'] for e in l)) == 1
10000 loops, best of 3: 63.3 us per loop
</snippet></ROW><ROW><id>15073441</id><snippet>In [40]: l = [{'type': x} for x in range(1000)]

In [43]: %timeit same_type(l)
1000000 loops, best of 3: 337 ns per loop

In [44]: %timeit  all(e['type'] == l[0]['type'] for e in l)
1000000 loops, best of 3: 656 ns per loop

In [45]: %timeit all([e['type'] == l[0]['type'] for e in l])
10000 loops, best of 3: 99.4 us per loop

In [46]: %timeit len(set(e['type'] for e in l)) == 1
10000 loops, best of 3: 68.6 us per loop
</snippet></ROW><ROW><id>15073956</id><snippet>print(fibonacci(8))
</snippet></ROW><ROW><id>15073956</id><snippet>print()</snippet></ROW><ROW><id>15073956</id><snippet>fibonacci(8)
</snippet></ROW><ROW><id>15073977</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; df = pd.DataFrame(np.random.randn(5, 10))
&gt;&gt;&gt; df[list(df.columns[:2]) + [7]]
          0         1         7
0  0.210139  0.533249  1.780426
1  0.382136  0.083999 -0.392809
2 -0.237868  0.493646 -1.208330
3  1.242077 -0.781558  2.369851
4  1.910740 -0.643370  0.982876
</snippet></ROW><ROW><id>15073977</id><snippet>list</snippet></ROW><ROW><id>15073977</id><snippet>Index</snippet></ROW><ROW><id>15073977</id><snippet>r_</snippet></ROW><ROW><id>15073977</id><snippet>df[col_[:2, "col5", 3:6]]
</snippet></ROW><ROW><id>15074158</id><snippet>packages=['mypackage'],
</snippet></ROW><ROW><id>15074158</id><snippet>setup()</snippet></ROW><ROW><id>15074158</id><snippet>py-bootstrap</snippet></ROW><ROW><id>15074158</id><snippet>bin</snippet></ROW><ROW><id>15074158</id><snippet>scripts</snippet></ROW><ROW><id>15074158</id><snippet>scripts=['bin/myscript']
</snippet></ROW><ROW><id>15074229</id><snippet>from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# an Engine, which the Session will use for connection
# resources
some_engine = create_engine('postgresql://scott:tiger@localhost/')

# create a configured "Session" class
Session = sessionmaker(bind=some_engine)

# create a Session
session = Session()

@celery.task
def mytask(data):
  session.commit(data)
</snippet></ROW><ROW><id>15074419</id><snippet>/* The str() precision PyFloat_STR_PRECISION is chosen so that in most cases,
   the rounding noise created by various operations is suppressed, while
   giving plenty of precision for practical use. */

#define PyFloat_STR_PRECISION 12
</snippet></ROW><ROW><id>15074748</id><snippet>import cv2
import numpy as np
import matplotlib.pyplot as plt

img = cv2.imread('messi4.jpg')
b,g,r = cv2.split(img)
img2 = cv2.merge([r,g,b])
plt.subplot(121);plt.imshow(img) # expects distorted color
plt.subplot(122);plt.imshow(img2) # expect true color
plt.show()

cv2.imshow('bgr image',img) # expects true color
cv2.imshow('rgb image',img2) # expects distorted color
cv2.waitKey(0)
cv2.destroyAllWindows()
</snippet></ROW><ROW><id>15074848</id><snippet>def func(arg1, arg2, ..., kwarg1=default, kwarg2=default, ..., *args, **kwargs):
    ...
</snippet></ROW><ROW><id>15074848</id><snippet>*</snippet></ROW><ROW><id>15074848</id><snippet>**</snippet></ROW><ROW><id>15074848</id><snippet>*</snippet></ROW><ROW><id>15074848</id><snippet>def func(arg1, arg2, *args, kwonlyarg=default):
    ...
</snippet></ROW><ROW><id>15074848</id><snippet>*</snippet></ROW><ROW><id>15074848</id><snippet>def func(a1, a2, *, kw=d):</snippet></ROW><ROW><id>15074848</id><snippet>def myFun3(*, name, lname, **other_info):
    ...
</snippet></ROW><ROW><id>15074848</id><snippet>name</snippet></ROW><ROW><id>15074848</id><snippet>lname</snippet></ROW><ROW><id>15074848</id><snippet>**kwargs</snippet></ROW><ROW><id>15074933</id><snippet>global</snippet></ROW><ROW><id>15074933</id><snippet>aa = 1
bb = 2
cc = [ 1, 2, 3 ]

def test():
    global aa
    aa = -1
    bb = -1
    cc[2] = -1

test()
print "aa:", aa
print "bb:", bb
print "cc:", cc
</snippet></ROW><ROW><id>15074933</id><snippet>aa: -1
bb: 2
cc: [1, 2, -1]
</snippet></ROW><ROW><id>15074933</id><snippet>test()</snippet></ROW><ROW><id>15074933</id><snippet>aa</snippet></ROW><ROW><id>15074933</id><snippet>global</snippet></ROW><ROW><id>15074933</id><snippet>aa = -1</snippet></ROW><ROW><id>15074933</id><snippet>aa</snippet></ROW><ROW><id>15074933</id><snippet>-1</snippet></ROW><ROW><id>15074933</id><snippet>bb</snippet></ROW><ROW><id>15074933</id><snippet>test()</snippet></ROW><ROW><id>15074933</id><snippet>bb = -1</snippet></ROW><ROW><id>15074933</id><snippet>bb</snippet></ROW><ROW><id>15074933</id><snippet>-1</snippet></ROW><ROW><id>15074933</id><snippet>bb</snippet></ROW><ROW><id>15074933</id><snippet>2</snippet></ROW><ROW><id>15074933</id><snippet>cc</snippet></ROW><ROW><id>15074933</id><snippet>cc</snippet></ROW><ROW><id>15074933</id><snippet>test()</snippet></ROW><ROW><id>15074933</id><snippet>cc</snippet></ROW><ROW><id>15075032</id><snippet>&gt;&gt;&gt; int('fff',16)
4095
&gt;&gt;&gt; da_number = 'fff'
&gt;&gt;&gt; int(da_number, 16)
4095
</snippet></ROW><ROW><id>15075032</id><snippet>&gt;&gt;&gt; base = '16'
&gt;&gt;&gt; int(da_number, base) # wrong! base should be an int.
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: an integer is required
&gt;&gt;&gt; int(da_number, int(base)) # correct
4095
</snippet></ROW><ROW><id>15075321</id><snippet>class B(A):
     __init__ = my_init
</snippet></ROW><ROW><id>15075530</id><snippet>class Model(**kwargs)</snippet></ROW><ROW><id>15075530</id><snippet>class Model(SomeBaseClass):
    pass
</snippet></ROW><ROW><id>15075530</id><snippet>Model(**kwargs)
</snippet></ROW><ROW><id>15075595</id><snippet>seq = Sequence('some_sequence')
nextid = connection.execute(seq)
</snippet></ROW><ROW><id>15075908</id><snippet>While True</snippet></ROW><ROW><id>15075908</id><snippet>guess</snippet></ROW><ROW><id>15075908</id><snippet>break</snippet></ROW><ROW><id>15075908</id><snippet>While month &lt; 13</snippet></ROW><ROW><id>15075908</id><snippet>guess</snippet></ROW><ROW><id>15075908</id><snippet>while True</snippet></ROW><ROW><id>15075908</id><snippet>while month &lt; 13:
   unpaidBalance= unpaidBalance-guess 
   if unpaidBalance &lt;= -0.1:
         low = guess
   elif unpaidBalance &gt;= 0.1:
         high = guess
   month += 1
   guess = (low + high)/2 
</snippet></ROW><ROW><id>15076061</id><snippet>shops = memcache.get('shops')
    if shops is not None:
        shops = memcache.get('shops')
    else:
        allshops =  Shop.all().filter('active = ', True).order('abbrev')
        memcache.set('shops', list(allshops))
        shops = memcache.get('shops')
</snippet></ROW><ROW><id>15076064</id><snippet>resp,data = mail.uid('FETCH', '1:*' , '(RFC822)')
</snippet></ROW><ROW><id>15076064</id><snippet>id</snippet></ROW><ROW><id>15076064</id><snippet>result, data = mail.uid('search', None, "ALL")
print data[0].split()
</snippet></ROW><ROW><id>15076064</id><snippet>['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', ... etc ]
</snippet></ROW><ROW><id>15076064</id><snippet>resp,data = mail.uid('FETCH', '1:*' , '(RFC822)')
messages = [data[i][1].strip() for i in xrange(0, len(data), 2)] 
for msg in messages:
    msg_str = email.message_from_string(msg)
    print msg_str.get('Date')
</snippet></ROW><ROW><id>15076118</id><snippet>small volcanic islet
Navtilos
Santorini
</snippet></ROW><ROW><id>15076346</id><snippet>format()</snippet></ROW><ROW><id>15076346</id><snippet>&gt;&gt;&gt; for dec in decimals:
...    print format(dec, '.2f')
... 
0.00
11.11
222.22
3333.33
1234.57
</snippet></ROW><ROW><id>15076346</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>15076346</id><snippet>Decimal</snippet></ROW><ROW><id>15076346</id><snippet>.__format__()</snippet></ROW><ROW><id>15076421</id><snippet>ServerThread</snippet></ROW><ROW><id>15076421</id><snippet>class ServerThread(threading.Thread):
    def __init__(self):
         threading.Thread.__init__(self)
         self.localServer = SimpleThreadedXMLRPCServer(("localhost",10007))
         self.localServer.register_function(getTextA) #just return a string

    def run(self):
         self.localServer.serve_forever()
</snippet></ROW><ROW><id>15076421</id><snippet>server = ServerThread()
server.start() # The server is now running
print "I want to continue my code after this..."
</snippet></ROW><ROW><id>15076637</id><snippet>MySQLdb.connect()</snippet></ROW><ROW><id>15076637</id><snippet>self.db</snippet></ROW><ROW><id>15076637</id><snippet>None</snippet></ROW><ROW><id>15076637</id><snippet>except</snippet></ROW><ROW><id>15076637</id><snippet>db = None

def __init__(self):
    self.host     = "localhost"
    self.database = "my_database"
    self.username = "username"
    self.password = "password"

    try:
        self.db = MySQLdb.connect(
            self.host,
            self.username,
            self.password,
            self.database
        )
        self.cursor = self.db.cursor()
    except MySQLdb.Error:
        print "There was an error while connecting to the database"
        if self.db is not None:
            self.db.rollback()
</snippet></ROW><ROW><id>15076637</id><snippet>except</snippet></ROW><ROW><id>15076775</id><snippet>pyinstaller</snippet></ROW><ROW><id>15076775</id><snippet>print "Hello World!"
</snippet></ROW><ROW><id>15076775</id><snippet>f = open('test.txt','w')
f.write("Hello World!")
f.close()
</snippet></ROW><ROW><id>15076775</id><snippet>math</snippet></ROW><ROW><id>15076775</id><snippet>import math
x = 10.0
y = math.sqrt(x)
print "square_root({}) = {}".format(x,y)
</snippet></ROW><ROW><id>15076775</id><snippet>numpy</snippet></ROW><ROW><id>15076775</id><snippet>sin(x)</snippet></ROW><ROW><id>15076775</id><snippet>from numpy import *
x = linspace(0,2*pi,20)
print sin(x)
</snippet></ROW><ROW><id>15076775</id><snippet>show</snippet></ROW><ROW><id>15076775</id><snippet>savefig</snippet></ROW><ROW><id>15076775</id><snippet>from matplotlib.pyplot import *
from numpy import *
x=linspace(0,2*pi,200)
plot(x,sin(x))
savefig("/tmp/testfig.png")
</snippet></ROW><ROW><id>15076775</id><snippet>import matplotlib
matplotlib.use("Agg")
from matplotlib.pyplot import *
from numpy import *
x=linspace(0,2*pi,200)
plot(x,sin(x))
savefig("/tmp/testfig.png")
</snippet></ROW><ROW><id>15076830</id><snippet>np.fromiter</snippet></ROW><ROW><id>15076830</id><snippet>import numpy as np


def gendata():
    # You, of course, have a different gendata...
    for i in xrange(N):
        yield (np.random.random(), str(i))

N = 100

arr = np.fromiter(gendata(), dtype='&lt;f8,|S20')
</snippet></ROW><ROW><id>15076830</id><snippet>arr.sort(order=['f0','f1'])
</snippet></ROW><ROW><id>15076830</id><snippet>searchsorted</snippet></ROW><ROW><id>15076830</id><snippet># Some pseudo-random value in arr['f0']
val = arr['f0'][10]
print(arr[10])
# (0.049875262239617246, '46')

idx = arr['f0'].searchsorted(val)
print(arr[idx])
# (0.049875262239617246, '46')
</snippet></ROW><ROW><id>15076830</id><snippet>float16</snippet></ROW><ROW><id>15076830</id><snippet>'f0'</snippet></ROW><ROW><id>15076830</id><snippet>'f1'</snippet></ROW><ROW><id>15076830</id><snippet>'&lt;f8,|S20'</snippet></ROW><ROW><id>15076830</id><snippet>'f0'</snippet></ROW><ROW><id>15076830</id><snippet>'f1'</snippet></ROW><ROW><id>15076830</id><snippet>dtype='[('fval','&lt;f8'), ('text','|S20')]
</snippet></ROW><ROW><id>15076830</id><snippet>arr</snippet></ROW><ROW><id>15076830</id><snippet>'fval'</snippet></ROW><ROW><id>15076830</id><snippet>'text'</snippet></ROW><ROW><id>15076830</id><snippet>np.fromiter</snippet></ROW><ROW><id>15076830</id><snippet>gendata</snippet></ROW><ROW><id>15076830</id><snippet>np.fromiter</snippet></ROW><ROW><id>15076830</id><snippet>gendata</snippet></ROW><ROW><id>15076830</id><snippet>|S20</snippet></ROW><ROW><id>15076830</id><snippet>dtype</snippet></ROW><ROW><id>15076830</id><snippet>object</snippet></ROW><ROW><id>15076830</id><snippet>np.fromiter</snippet></ROW><ROW><id>15076830</id><snippet>object</snippet></ROW><ROW><id>15076830</id><snippet>np.fromiter</snippet></ROW><ROW><id>15076830</id><snippet>count</snippet></ROW><ROW><id>15076830</id><snippet>count</snippet></ROW><ROW><id>15076830</id><snippet>dtype</snippet></ROW><ROW><id>15076830</id><snippet>count</snippet></ROW><ROW><id>15076979</id><snippet>float(sum([a==b for a,b in zip(my_string1,my_string2)]))/len(my_string1)



&gt;&gt;&gt; s1,s2 = "abcdabcd","abcdabEd"
&gt;&gt;&gt; print float(sum([a==b for a,b in zip(s1,s2)]))/len(s1)
0.875
</snippet></ROW><ROW><id>15077029</id><snippet>from django.core.management.base import BaseCommand

class Command(BaseCommand):
    help = 'prints no args if there are no args'

    def handle(self, *args, **options):
        if len(args) == 0:
            print 'no args'
        else:
            for pkid in args:
                print pkid
</snippet></ROW><ROW><id>15077333</id><snippet>canvas = Canvas(main, width=850, height=400)</snippet></ROW><ROW><id>15077333</id><snippet>canvas = Canvas(main, width=850, height=400, bg="red")</snippet></ROW><ROW><id>15077333</id><snippet>pack()</snippet></ROW><ROW><id>15077382</id><snippet>class App(...):
  def __init__(self, a, b):
    pass

  def do_something(self, a):
    pass


app_instance = App()


def do_something_else(self, b):
  pass

App.do_something_else = do_something_else


app_instance.do_something_else('b')
</snippet></ROW><ROW><id>15077382</id><snippet>yourclass</snippet></ROW><ROW><id>15077382</id><snippet>__mro__</snippet></ROW><ROW><id>15077382</id><snippet>type(yourclass)</snippet></ROW><ROW><id>15077382</id><snippet>object</snippet></ROW><ROW><id>15077382</id><snippet>&gt;&gt;&gt; class foo():
...     pass
...
&gt;&gt;&gt; x = foo()
&gt;&gt;&gt;
&gt;&gt;&gt; # Define a function and attach it
&gt;&gt;&gt;
&gt;&gt;&gt; def bar(self, a):
...     print(a)
...
&gt;&gt;&gt; foo.bar = bar
&gt;&gt;&gt;
&gt;&gt;&gt; x.bar('a')
a
</snippet></ROW><ROW><id>15077441</id><snippet>os.path.exists</snippet></ROW><ROW><id>15077441</id><snippet>True</snippet></ROW><ROW><id>15077441</id><snippet>os.path.isdir</snippet></ROW><ROW><id>15077441</id><snippet>True</snippet></ROW><ROW><id>15077494</id><snippet>new_list = [x * y * z for x, y, z in zip(a, b, c)]
</snippet></ROW><ROW><id>15077494</id><snippet>import operator
new_list = [reduce(operator.mul, lst, 1) for lst in zip(a, b, c)]
</snippet></ROW><ROW><id>15077565</id><snippet>test</snippet></ROW><ROW><id>15077603</id><snippet>month</snippet></ROW><ROW><id>15077603</id><snippet>13</snippet></ROW><ROW><id>15077603</id><snippet>balance = 320000
annualInterestRate = 0.2

originalBalance = balance
month = 1
monthly_interest = annualInterestRate / 12
low = originalBalance/12
high = (originalBalance*(1 + monthly_interest)**12)/12
epsilon = 0.01
min_payment = (high + low)/2.0

while min_payment*12 - originalBalance &gt; epsilon:
    month = 1          # &lt; -- do this
    while month &lt; 13:
        balance = (originalBalance - min_payment)/10 * (1+ monthly_interest)
        if balance &lt; 0.00:
            low = min_payment
            min_payment = (high + low)/2.0
        elif balance &gt; 0.00:
            high = min_payment
            min_payment = (high + low)/2.0
        month += 1
print "Lowest payment: " + str(round(min_payment, 2))
</snippet></ROW><ROW><id>15077635</id><snippet>float()</snippet></ROW><ROW><id>15077635</id><snippet>sum()</snippet></ROW><ROW><id>15077635</id><snippet>len()</snippet></ROW><ROW><id>15077635</id><snippet>def average_data(list_of_tuples):

    stock_data = [float(t[1]) for t in list_of_tuples]
    stock_sum = sum(stock_data)
    return stock_sum / len(list_of_tuples)
</snippet></ROW><ROW><id>15077635</id><snippet>list_of_tuples = [('2012-03-24' , '122.10'), ('2012-03-25' , '117.30'), ('2012-03-26' ,  '126.9')]

print average_data(list_of_tuples)
&gt;&gt;&gt; 122.1
</snippet></ROW><ROW><id>15077687</id><snippet>x</snippet></ROW><ROW><id>15077687</id><snippet>unicode</snippet></ROW><ROW><id>15077687</id><snippet>cols[0].string</snippet></ROW><ROW><id>15077687</id><snippet>unicode</snippet></ROW><ROW><id>15077950</id><snippet>url = 'http://ws.geonames.org/searchJSON?q=%s&amp;country=FR&amp;featureClass=A&amp;continentCode=&amp;fuzzy=0.6'
gn.geocode_url(url % city)
</snippet></ROW><ROW><id>15077950</id><snippet>urlencode</snippet></ROW><ROW><id>15077950</id><snippet>geocode</snippet></ROW><ROW><id>15077950</id><snippet>from urllib import urlencode
params = {
    'q': 'roman',
    'featureClass': 'A',
    'fuzzy': '0.6',
    'country': 'FR'
}
gn.geocode_url(gn.url % urlencode(params))
</snippet></ROW><ROW><id>15078061</id><snippet>break</snippet></ROW><ROW><id>15078061</id><snippet>while True:
    try:
        score = pickle.load(score_list)
        name = pickle.load(score_list)
        score_name.append([score, name])
    except EOFError as e:
        break
</snippet></ROW><ROW><id>15078061</id><snippet>def main():
    e = None
    print(locals())
    while not e:
        try:
            raise Exception
        except Exception as e:
            pass
        print(locals())

main()
</snippet></ROW><ROW><id>15078061</id><snippet>{'e': None}
{}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 4, in main
UnboundLocalError: local variable 'e' referenced before assignment
</snippet></ROW><ROW><id>15078061</id><snippet>def main():
   e = None
   print(locals())
   while not e:
      try:
         raise Exception
      except Exception as ex:
         e = ex
      print(locals())

main()
</snippet></ROW><ROW><id>15078061</id><snippet>{'e': None}
{'e': Exception()}
</snippet></ROW><ROW><id>15078163</id><snippet>sources.sort(key=lambda source: source.quality - source.distance, reverse=true)
</snippet></ROW><ROW><id>15078163</id><snippet>reverse=true</snippet></ROW><ROW><id>15078163</id><snippet>source.distance</snippet></ROW><ROW><id>15078192</id><snippet>class Worker(threading.Thread):
    def __init__(self, group=None, target=None, name=None,
             args=(), kwargs={}, verbose=None, onCompleteCb=None):
        ...
        super(Worker, self).__init__(group=group, target=target, name=name, 
                                     args=args, kwargs=kwargs)
</snippet></ROW><ROW><id>15078192</id><snippet>kwargs</snippet></ROW><ROW><id>15078192</id><snippet>verbose</snippet></ROW><ROW><id>15078192</id><snippet>Worker(target=threadTargMethod, name="thread1").start()
</snippet></ROW><ROW><id>15078192</id><snippet>kwargs</snippet></ROW><ROW><id>15078307</id><snippet>def __setitem__(self, key, value):
    if isinstance(key, tuple):
        node = self
        for i in key[:-1]:
            try:
                node = dict.__getitem__(node, i)
            except KeyError:
                node = node[i] = type(self)()
        return dict.__setitem__(node, i, value)
    return dict.__setitem__(self, key, value)
</snippet></ROW><ROW><id>15078615</id><snippet>dict</snippet></ROW><ROW><id>15078658</id><snippet>class _Units :
    def __init__(self):
        self._metric_unit_names   = {'metric'}
        self._standard_unit_names = {'standard'}

class TemperatureUnits (_Units) :
    def __init__(self):
        _Units.__init__(self)
        self._metric_unit_names.update({'celsius', 'c'})
        self._standard_unit_names.update({'fahrenheit', 'f'})

TemperatureUnits()
</snippet></ROW><ROW><id>15078658</id><snippet>__init__</snippet></ROW><ROW><id>15078658</id><snippet>_Units._metric_unit_names</snippet></ROW><ROW><id>15078658</id><snippet>init</snippet></ROW><ROW><id>15078658</id><snippet>my_units_instance._metric_unit_names</snippet></ROW><ROW><id>15078676</id><snippet>#include &lt;Python.h&gt;
#undef B0
#include &lt;QWhatEver&gt;
</snippet></ROW><ROW><id>15078883</id><snippet>parser = argparser.ArgumentParser
subparsers = parser.add_subparsers('-bowtie')
subparser = subparsers.add_parser()
subparser.add_argument('new argument')
</snippet></ROW><ROW><id>15079104</id><snippet>.pdbrc</snippet></ROW><ROW><id>15079162</id><snippet>url = 'http://www.zein.se/patrick/3000char.html'
soup = bs4.BeautifulSoup(urllib2.urlopen(url).read(), from_encoding='gb18030')
</snippet></ROW><ROW><id>15079162</id><snippet>soup = bs4.BeautifulSoup(urllib2.urlopen(url).read(), from_encoding='gbk')
</snippet></ROW><ROW><id>15079203</id><snippet>to_html</snippet></ROW><ROW><id>15079203</id><snippet>In [11]: df = pd.DataFrame([1])

In [12]: s = df.to_html()

In [13]: print (s[:7] + 'id="my_dfs_id" ' + s[7:])
&lt;table id="my_df_id" border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;0&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt; 1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>15079203</id><snippet>def df_to_html_with_id(df, id):
    s = df.to_html()
    return s[:7] + 'id="%s" ' % id + s[7:]
</snippet></ROW><ROW><id>15079203</id><snippet>df_to_html_with_id(df, "hello")</snippet></ROW><ROW><id>15079223</id><snippet>Arr1 = Arr1.reshape((100, 10, 1))
Arr2 = Arr2.reshape((100, 1, 5))
Arr3 = Arr1 + Arr2
</snippet></ROW><ROW><id>15079247</id><snippet>java -dname="TheAboveString"</snippet></ROW><ROW><id>15079247</id><snippet>echo "TheAboveString" | java</snippet></ROW><ROW><id>15079289</id><snippet>class YourForm(forms.Form):
   ...
   image = forms.ImageField(validators=[validate_image_with_dimensions])
</snippet></ROW><ROW><id>15079499</id><snippet>graph = {'A':{'B','C'}, 'B':{'D'}, 'C':{'D'}}
</snippet></ROW><ROW><id>15079499</id><snippet>A</snippet></ROW><ROW><id>15079499</id><snippet>B</snippet></ROW><ROW><id>15079499</id><snippet>C</snippet></ROW><ROW><id>15079499</id><snippet>B</snippet></ROW><ROW><id>15079499</id><snippet>D</snippet></ROW><ROW><id>15079499</id><snippet>C</snippet></ROW><ROW><id>15079499</id><snippet>D</snippet></ROW><ROW><id>15079499</id><snippet>def find_all_paths(start, end, graph, visited=None):
    if visited is None:
        visited = set()

    visited |= {start}
    for node in graph[start]:
        if node in visited:
            continue
        if node == end:
            yield [start,end]
        else:
            for path in find_all_paths(node, end, graph, visited):
                yield [start] + path
</snippet></ROW><ROW><id>15079499</id><snippet>&gt;&gt;&gt; graph = {'A':{'B','C'}, 'B':{'D'}, 'C':{'D'}}
&gt;&gt;&gt; for path in find_all_paths('A','D', graph):
...   print path
... 
['A', 'C', 'D']
['A', 'B', 'D']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15079499</id><snippet>def change_graph_representation(graph):
    reverse_graph = {}
    for node, links in graph.items():
        for link in links:
            if link not in reverse_graph:
                reverse_graph[link] = set()
            reverse_graph[link].add(node)

    result = {}
    for node,links in graph.items():
        adj = set()
        for link in links:
            adj |= reverse_graph[link]
        adj -= {node}
        result[node] = adj
    return result
</snippet></ROW><ROW><id>15079499</id><snippet>def change_graph_representation(graph):
    reverse_graph = {}
    for node, links in graph.items():
        for link in links:
            if link not in reverse_graph:
                reverse_graph[link] = set()
            reverse_graph[link].add(node)

    result = {}
    for node,links in graph.items():
        adj = {}
        for link in links:
            for n in reverse_graph[link]:
                adj[n] = link
        del(adj[node])
        result[node] = adj
    return result
</snippet></ROW><ROW><id>15079499</id><snippet>def find_all_paths(start, end, graph, visited=None):
    if visited is None:
        visited = set()

    visited |= {start}
    for node,link in graph[start].items():
        if node in visited:
            continue
        if node == end:
            yield [link]
        else:
            for path in find_all_paths(node, end, graph, visited):
                yield [link] + path
</snippet></ROW><ROW><id>15079857</id><snippet>objStreamReader.ReadLine</snippet></ROW><ROW><id>15079857</id><snippet>file.readline</snippet></ROW><ROW><id>15079857</id><snippet>\n</snippet></ROW><ROW><id>15079857</id><snippet>rstrip('\n')</snippet></ROW><ROW><id>15079872</id><snippet>strMonth</snippet></ROW><ROW><id>15079872</id><snippet>strMonth[counter]</snippet></ROW><ROW><id>15079872</id><snippet>IndexError</snippet></ROW><ROW><id>15079872</id><snippet>In [29]: strMonth = []

In [30]: counter = 0

In [31]: strMonth[counter]
IndexError: list index out of range
</snippet></ROW><ROW><id>15079872</id><snippet>dict</snippet></ROW><ROW><id>15079872</id><snippet>import collections
def average_data(strMonth):
    result = collections.defaultdict(float)
    for yearmonth, val in strMonth:
        result[yearmonth] += float(val)
    return dict(result)

def main(): 
    result2 = [('1985-08', '15.00'), ('1985-08', '14.88'), ('1985-08', '15.25'), ('1985-08', '15.25'), ('1985-08', '15.13'), ('1985-08', '14.75'), ('1985-08', '14.88'), ('1985-08', '15.25'), ('1985-08', '15.25'), ('1985-08', '15.00'), ('1985-08', '14.63'), ('1985-08', '14.50'), ('1985-08', '14.63'), ('1985-08', '15.25'), ('1985-08', '15.00'), ('1985-08', '15.25'), ('1985-08', '15.13'), ('1985-08', '14.88'), ('1985-08', '15.25'), ('1985-08', '15.38'), ('1985-08', '15.75'), ('1985-08', '15.88'), ('1985-07', '15.88'), ('1985-07', '16.25'), ('1985-07', '16.00'), ('1985-07', '16.62'), ('1985-07', '16.62'), ('1985-07', '16.25'), ('1985-07', '16.50'), ('1985-07', '16.87'), ('1985-07', '17.37'), ('1985-07', '17.25'), ('1985-07', '17.62'), ('1985-07', '17.50'), ('1985-07', '17.75'), ('1985-07', '17.87'), ('1985-07', '18.00'), ('1985-07', '18.00'), ('1985-07', '17.62'), ('1985-07', '17.62'), ('1985-07', '17.62'), ('1985-07', '17.50'), ('1985-07', '17.25'), ('1985-07', '18.12')]
    print(average_data(result2))
main()
</snippet></ROW><ROW><id>15079872</id><snippet>{'1985-07': 378.08000000000004, '1985-08': 332.16999999999996}
</snippet></ROW><ROW><id>15080093</id><snippet>re.search</snippet></ROW><ROW><id>15080093</id><snippet>None</snippet></ROW><ROW><id>15080093</id><snippet>fmtre.group</snippet></ROW><ROW><id>15080093</id><snippet>fmtre</snippet></ROW><ROW><id>15080093</id><snippet>None</snippet></ROW><ROW><id>15080093</id><snippet>AttributeError</snippet></ROW><ROW><id>15080093</id><snippet>def getVideoUrl(content):
    fmtre = re.search('(?&lt;=fmt_url_map=).*', content)
    if fmtre is None:
        return None
    grps = fmtre.group(0).split('&amp;')
    vurls = urllib2.unquote(grps[0])
    videoUrl = None
    for vurl in vurls.split('|'):
        if vurl.find('itag=5') &gt; 0:
            return vurl
    return None
</snippet></ROW><ROW><id>15080157</id><snippet>RenderTemplateView</snippet></ROW><ROW><id>15080157</id><snippet>ListView</snippet></ROW><ROW><id>15080157</id><snippet>app.add_url_rule('/categories', view_func=RenderTemplateView  # ... snip ...
</snippet></ROW><ROW><id>15080157</id><snippet>app.add_url_rule('/categories', view_func=CategoryView.as_view("category"))
</snippet></ROW><ROW><id>15080157</id><snippet>CategoryView</snippet></ROW><ROW><id>15080157</id><snippet>dispatch_request</snippet></ROW><ROW><id>15080171</id><snippet>{}</snippet></ROW><ROW><id>15080171</id><snippet>I have to eliminate the cities which have less than 10,000 people.</snippet></ROW><ROW><id>15080171</id><snippet>def Dictionary():
    d={}
    with open("population.tsv") as f:
        for line in f:
            (key, value)=line.split()
            key = int(val)
            #I have to eliminate the cities which have less than 10,000 people
            if key &lt; 10000: 
                d[int(key)]=val
    #return {}
    #You want to return the created dictionary
    return d
#list=Dictionary()
# You do not wan't to name a variable to a built-in
lst = Dictionary()

print(lst)
</snippet></ROW><ROW><id>15080171</id><snippet>dict</snippet></ROW><ROW><id>15080171</id><snippet>def Dictionary():
    with open("population.tsv") as f:
        {k: v for k,v in (map(int, line.split()) for line in f) if k &lt; 10000}
        #If using Py &lt; Py 2.7
        #dict((k, v) for k,v in (map(int, line.split()) for line in f) if k &lt; 10000)
</snippet></ROW><ROW><id>15080205</id><snippet>In [1]:

#load the data
import numpy as np
from StringIO import StringIO
data = StringIO("""131  673 234 103 18
201 96  342 965 150
630 803 746 422 111
537 699 497 121 956
805 732 524 37  331""")
m = np.loadtxt(data, dtype=int)
m

Out[1]:

array([[131, 673, 234, 103,  18],
       [201,  96, 342, 965, 150],
       [630, 803, 746, 422, 111],
       [537, 699, 497, 121, 956],
       [805, 732, 524,  37, 331]])

In [2]:

# give every element an index
idx = np.arange(m.size).reshape(m.shape)
idx

Out[2]:

array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19],
       [20, 21, 22, 23, 24]])

In [3]:

# create edges
left_edges = np.concatenate([idx[:, :-1, None], idx[:, 1:, None], m[:, 1:, None]], axis=2).reshape(-1, 3)
right_edges = np.concatenate([idx[:, 1:, None], idx[:, :-1, None], m[:, :-1, None]], axis=2).reshape(-1, 3)
down_edges = np.concatenate([idx[:-1, :, None], idx[1:, :, None], m[1:, :, None]], axis=2).reshape(-1, 3)
up_edges = np.concatenate([idx[1:, :, None], idx[:-1, :, None], m[:-1, :, None]], axis=2).reshape(-1, 3)
edges = np.vstack((left_edges, right_edges, down_edges, up_edges))
edges

Out[3]:

array([[  0,   1, 673],
       [  1,   2, 234],
       [  2,   3, 103],
       [  3,   4,  18],
       [  5,   6,  96],
       [  6,   7, 342],
       [  7,   8, 965],
       [  8,   9, 150],
       [ 10,  11, 803],
       [ 11,  12, 746],
       [ 12,  13, 422],
       [ 13,  14, 111],
       [ 15,  16, 699],
       [ 16,  17, 497],
       [ 17,  18, 121],
       [ 18,  19, 956],
       [ 20,  21, 732],
       [ 21,  22, 524],
       [ 22,  23,  37],
       [ 23,  24, 331],
       [  1,   0, 131],
       [  2,   1, 673],
       [  3,   2, 234],
       [  4,   3, 103],
       [  6,   5, 201],
       [  7,   6,  96],
       [  8,   7, 342],
       [  9,   8, 965],
       [ 11,  10, 630],
       [ 12,  11, 803],
       [ 13,  12, 746],
       [ 14,  13, 422],
       [ 16,  15, 537],
       [ 17,  16, 699],
       [ 18,  17, 497],
       [ 19,  18, 121],
       [ 21,  20, 805],
       [ 22,  21, 732],
       [ 23,  22, 524],
       [ 24,  23,  37],
       [  0,   5, 201],
       [  1,   6,  96],
       [  2,   7, 342],
       [  3,   8, 965],
       [  4,   9, 150],
       [  5,  10, 630],
       [  6,  11, 803],
       [  7,  12, 746],
       [  8,  13, 422],
       [  9,  14, 111],
       [ 10,  15, 537],
       [ 11,  16, 699],
       [ 12,  17, 497],
       [ 13,  18, 121],
       [ 14,  19, 956],
       [ 15,  20, 805],
       [ 16,  21, 732],
       [ 17,  22, 524],
       [ 18,  23,  37],
       [ 19,  24, 331],
       [  5,   0, 131],
       [  6,   1, 673],
       [  7,   2, 234],
       [  8,   3, 103],
       [  9,   4,  18],
       [ 10,   5, 201],
       [ 11,   6,  96],
       [ 12,   7, 342],
       [ 13,   8, 965],
       [ 14,   9, 150],
       [ 15,  10, 630],
       [ 16,  11, 803],
       [ 17,  12, 746],
       [ 18,  13, 422],
       [ 19,  14, 111],
       [ 20,  15, 537],
       [ 21,  16, 699],
       [ 22,  17, 497],
       [ 23,  18, 121],
       [ 24,  19, 956]])
</snippet></ROW><ROW><id>15080205</id><snippet>edges</snippet></ROW><ROW><id>15080205</id><snippet>scipy.sparse.coo_matrix</snippet></ROW><ROW><id>15080355</id><snippet>do_magic</snippet></ROW><ROW><id>15080355</id><snippet>get_app_name</snippet></ROW><ROW><id>15080355</id><snippet>import os
import inspect

def get_app_name():
    return os.path.dirname(
               os.path.abspath(
                   inspect.stack()[-1][1])).split(os.path.sep)[-1]
</snippet></ROW><ROW><id>15080381</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>15080381</id><snippet>^</snippet></ROW><ROW><id>15080381</id><snippet>\d</snippet></ROW><ROW><id>15080381</id><snippet>for c in re.finditer(r'^(\d+(\.\d+)+)', f, re.MULTILINE):
    print c.group(1)
</snippet></ROW><ROW><id>15080519</id><snippet>for key in names:
   print field.get(key)
</snippet></ROW><ROW><id>15080519</id><snippet>getattr</snippet></ROW><ROW><id>15080519</id><snippet>for key in names:
    print getattr(field,key)
</snippet></ROW><ROW><id>15080519</id><snippet>get_value_for_datastore(model_instance)</snippet></ROW><ROW><id>15080603</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>15080603</id><snippet>^</snippet></ROW><ROW><id>15080603</id><snippet>$</snippet></ROW><ROW><id>15080603</id><snippet>matches = re.findall('^\s{3}(.*)$', contents, re.MULTILINE)
</snippet></ROW><ROW><id>15080603</id><snippet>matches = re.findall('\s{3}(.*)', contents)
</snippet></ROW><ROW><id>15080603</id><snippet>.</snippet></ROW><ROW><id>15080884</id><snippet>string_at</snippet></ROW><ROW><id>15080884</id><snippet>free</snippet></ROW><ROW><id>15080884</id><snippet>pointer = my_dll.get_str()
some_str = ctypes.string_at(pointer)
# This is windows specific - 
# on Posix, one have to load "libc.so" and use "free" from there:
ctypes.cdll.msvcrt.free(pointer)
</snippet></ROW><ROW><id>15080918</id><snippet>Python 2.7.2 (default, Jun 20 2012, 16:23:33) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from io import BytesIO,StringIO
&gt;&gt;&gt; print(BytesIO(b'hello\n'*10).readlines(6))
['hello\n']
&gt;&gt;&gt; print(StringIO(u'hello\n'*10).readlines(6))
[u'hello\n', u'hello\n']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15080918</id><snippet>620     while (1) {
621         PyObject *line = PyIter_Next(self);
622         if (line == NULL) {
623             if (PyErr_Occurred()) {
624                 Py_DECREF(result);
625                 return NULL;
626             }
627             else
628                 break; /* StopIteration raised */
629         }
630 
631         if (PyList_Append(result, line) &lt; 0) {
632             Py_DECREF(line);
633             Py_DECREF(result);
634             return NULL;
635         }
636         length += PyObject_Size(line);
637         Py_DECREF(line);
638 
639         if (length &gt; hint)
640             break;
641     }
</snippet></ROW><ROW><id>15080918</id><snippet>413     while ((n = get_line(self, &amp;output)) != 0) {
414         line = PyBytes_FromStringAndSize(output, n);
415         if (!line)
416             goto on_error;
417         if (PyList_Append(result, line) == -1) {
418             Py_DECREF(line);
419             goto on_error;
420         }
421         Py_DECREF(line);
422         size += n;
423         if (maxsize &gt; 0 &amp;&amp; size &gt;= maxsize)
424             break;
425     }
426     return result;
</snippet></ROW><ROW><id>15081072</id><snippet>def foo(x, k=None):
    if k is None:
        k = len(x)
    ...
</snippet></ROW><ROW><id>15081072</id><snippet>def foo(x, k=None):
    k = k or len(x)
</snippet></ROW><ROW><id>15081114</id><snippet>stdin</snippet></ROW><ROW><id>15081114</id><snippet>print_something</snippet></ROW><ROW><id>15081114</id><snippet>#!/usr/bin/env python

import time, sys 

def main():
    result = 1 
    print 'starting time: ' , time.ctime()

    while(result):
        result = raw_input('press g to start timer, ctrl+c to stop.\n')

        if result is 'g':
            print_something()
            result = ''
        else:
            result = None
            time.stop()
            sys.exit()

def print_something():
    while 1:
        try:
            print 'the time: ' , time.ctime()
            time.sleep(1);
        except KeyboardInterrupt:            
            break
main()
</snippet></ROW><ROW><id>15081114</id><snippet>s</snippet></ROW><ROW><id>15081114</id><snippet>g</snippet></ROW><ROW><id>15081483</id><snippet>ipython</snippet></ROW><ROW><id>15081483</id><snippet>import scipy 
scipy.stats.cauchy.pdf
</snippet></ROW><ROW><id>15081483</id><snippet>AttributeError</snippet></ROW><ROW><id>15081483</id><snippet>ipython</snippet></ROW><ROW><id>15081483</id><snippet>python</snippet></ROW><ROW><id>15081483</id><snippet>import scipy.stats
</snippet></ROW><ROW><id>15081483</id><snippet>scipy.stats</snippet></ROW><ROW><id>15081483</id><snippet>ipython</snippet></ROW><ROW><id>15081483</id><snippet>ipython</snippet></ROW><ROW><id>15081483</id><snippet>run</snippet></ROW><ROW><id>15081667</id><snippet>class Student(object):
    name = ""
    age = 0
    major = ""

    # The class "constructor" - It's actually an initializer 
    def __init__(self, name, age, major):
        self.name = name
        self.age = age
        self.major = major

def make_student(name, age, major):
    student = Student(name, age, major)
    return student
</snippet></ROW><ROW><id>15081667</id><snippet>class Student(object):
    name = ""
    age = 0
    major = ""

def make_student(name, age, major):
    student = Student()
    student.name = name
    student.age = age
    student.major = major
    # Note: I didn't need to create a variable in the class definition before doing this.
    student.gpa = float(4.0)
    return student
</snippet></ROW><ROW><id>15081767</id><snippet>ConfigParser</snippet></ROW><ROW><id>15081767</id><snippet>[MYSECTION]
mylist = item1,item2,item3
</snippet></ROW><ROW><id>15081767</id><snippet>config.get('MYSECTION', 'mylist').split(',')</snippet></ROW><ROW><id>15081767</id><snippet>[MYSECTION]
mylist = 
    item1
    item2
</snippet></ROW><ROW><id>15081767</id><snippet>str.splitlines()</snippet></ROW><ROW><id>15081801</id><snippet>dis.dis(foo)</snippet></ROW><ROW><id>15081801</id><snippet>def foo(x):
    if x:
        pass
    else:
        return x+2
</snippet></ROW><ROW><id>15081801</id><snippet>5           0 LOAD_FAST                0 (x)
            3 POP_JUMP_IF_FALSE        9

6           6 JUMP_FORWARD             8 (to 17)

8     &gt;&gt;    9 LOAD_FAST                0 (x)
           12 LOAD_CONST               1 (2)
           15 BINARY_ADD          
           16 RETURN_VALUE        
      &gt;&gt;   17 LOAD_CONST               0 (None)
           20 RETURN_VALUE        
</snippet></ROW><ROW><id>15081801</id><snippet>def foo(x):
    if not x:
        return x+2
</snippet></ROW><ROW><id>15081801</id><snippet>11           0 LOAD_FAST                0 (x)
             3 POP_JUMP_IF_TRUE        14

12           6 LOAD_FAST                0 (x)
             9 LOAD_CONST               1 (2)
            12 BINARY_ADD          
            13 RETURN_VALUE        
       &gt;&gt;   14 LOAD_CONST               0 (None)
</snippet></ROW><ROW><id>15082062</id><snippet>{% load static %}

&lt;link rel="stylesheet" href="{% static 'css/personnel_blog_hm.css' %}" type="text/css"&gt;
</snippet></ROW><ROW><id>15082062</id><snippet>PROJECT_DIR  = os.path.dirname(__file__) 

MEDIA_ROOT = os.path.join(PROJECT_DIR,'media')
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(PROJECT_DIR,'static')
STATIC_URL = '/static/'

STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(PROJECT_DIR, 'staticfiles'),
)
</snippet></ROW><ROW><id>15082062</id><snippet>from django.conf.urls.defaults import *
from django.conf import settings
from django.contrib.staticfiles.urls import staticfiles_urlpatterns
from django.conf.urls.static import static
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
     url(r'^$', 'personnel_blog.views.home_page'),
     url(r'^admin/', include(admin.site.urls)),
)+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

urlpatterns += staticfiles_urlpatterns()
</snippet></ROW><ROW><id>15082083</id><snippet>import ping, time

def found():
    print("FOUND INTERNET! :)")
def lost():
    print("LOST INTERNET! :(")

def wait_and_notify_connection(found, lost, already_found=False):
    while True:
        # Ping Google DNS Server (99.999% Uptime)
        if ping.do_one('8.8.8.8', timeout=2, psize=64) is not None:                
            if not already_found:
                found()
                already_found = True
        else:
            if already_found:
                lost()
                already_found = False
        time.sleep(1)

wait_and_notify_connection(found, lost)
</snippet></ROW><ROW><id>15082083</id><snippet>import subprocess, time

def found():
    print("FOUND INTERNET! :)")
def lost():
    print("LOST INTERNET! :(")

def ping(target):
    return True if subprocess.call(['ping', '-c 1', target]) == 0 else False

def wait_and_notify_connection(found, lost, already_found=False):
    while True:
        # Ping Google DNS Server (99.999% Uptime)
        # and check return code
        if ping('8.8.8.8'):
            if not already_found:
                found()
                already_found = True
        else:
            if already_found:
                lost()
                already_found = False
        time.sleep(1)

wait_and_notify_connection(found, lost)
</snippet></ROW><ROW><id>15082345</id><snippet>2to3</snippet></ROW><ROW><id>15082345</id><snippet>2to3 --fix=print [yourfiles]
</snippet></ROW><ROW><id>15082345</id><snippet>sed</snippet></ROW><ROW><id>15082649</id><snippet>\'\d{2}\.\d[A-Z]\/\d\.\d[A-Z]\',\'[\w]+\'
</snippet></ROW><ROW><id>15082816</id><snippet>element.split(' ')</snippet></ROW><ROW><id>15082816</id><snippet>element.split()</snippet></ROW><ROW><id>15082816</id><snippet>&gt;&gt;&gt; for element in fcuArrayTemp:
...     print element.split()
...
['101', 'ON', '070F', '070F', 'Low', 'Heat', 'OK', '0']
['102', 'ON', '069F', '069F', 'Low', 'Heat', 'OK', '0']
['103', 'ON', '069F', '069F', 'Low', 'Heat', 'OK', '0']
['104', 'ON', '069F', '070F', 'Low', 'Heat', 'OK', '0']
['105', 'OFF', '072F', '064F', 'High', 'Heat', 'U5', '0']
</snippet></ROW><ROW><id>15082833</id><snippet>from pandas import DataFrame
import pandas.rpy.common as com

df = DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C':[7,8,9]},
                index=["one", "two", "three"])
r_dataframe = com.convert_to_r_dataframe(df)

print type(r_dataframe)
 &lt;class 'rpy2.robjects.vectors.DataFrame'&gt;

print r_dataframe
      A B C
one   1 4 7
two   2 5 8
three 3 6 9
</snippet></ROW><ROW><id>15083029</id><snippet>itertools.product</snippet></ROW><ROW><id>15083029</id><snippet>for</snippet></ROW><ROW><id>15083029</id><snippet>import itertools

items = [...]

for grouping in itertools.product(*items):
    print ' '.join(grouping)
</snippet></ROW><ROW><id>15083210</id><snippet>update</snippet></ROW><ROW><id>15083210</id><snippet>from collections import Counter

data = '''\
ashwin programmer india
amith programmer india'''

c = Counter()
for line in data.splitlines():
    c.update(line.split())
print(c)
</snippet></ROW><ROW><id>15083210</id><snippet>Counter({'india': 2, 'programmer': 2, 'amith': 1, 'ashwin': 1})
</snippet></ROW><ROW><id>15083271</id><snippet>thr_core0 = (thr_core0 + [fpid[thread]])[:2]
</snippet></ROW><ROW><id>15083271</id><snippet>the_core0</snippet></ROW><ROW><id>15083897</id><snippet>imp</snippet></ROW><ROW><id>15083897</id><snippet>load_source</snippet></ROW><ROW><id>15083897</id><snippet>static PyObject *
load_source_module(char *name, char *pathname, FILE *fp)
{
    ......
    m = PyImport_ExecCodeModuleEx(name, (PyObject *)co, pathname);
    Py_DECREF(co);

    return m;
}
</snippet></ROW><ROW><id>15083897</id><snippet>PyImport_ExecCodeModuleEx</snippet></ROW><ROW><id>15083897</id><snippet>PyObject *
PyImport_ExecCodeModuleEx(char *name, PyObject *co, char *pathname)
{
    PyObject *modules = PyImport_GetModuleDict();
    PyObject *m, *d, *v;

    m = PyImport_AddModule(name);
    ......
    d = PyModule_GetDict(m);
    ......
    v = PyEval_EvalCode((PyCodeObject *)co, d, d);
    ......
}
</snippet></ROW><ROW><id>15083897</id><snippet>PyImport_AddModule</snippet></ROW><ROW><id>15083897</id><snippet>PyObject *
PyImport_AddModule(const char *name)
{
    PyObject *modules = PyImport_GetModuleDict();
    PyObject *m;

    if ((m = PyDict_GetItemString(modules, name)) != NULL &amp;&amp;
        PyModule_Check(m))
        return m;
    m = PyModule_New(name);
    if (m == NULL)
        return NULL;
    if (PyDict_SetItemString(modules, name, m) != 0) {
        Py_DECREF(m);
        return NULL;
    }
    Py_DECREF(m); /* Yes, it still exists, in modules! */

    return m;
}
</snippet></ROW><ROW><id>15083897</id><snippet>name</snippet></ROW><ROW><id>15083897</id><snippet>name</snippet></ROW><ROW><id>15083897</id><snippet>name in sys.modules</snippet></ROW><ROW><id>15084000</id><snippet>In [53]: mydict = {'12345': '11', '45678': '11', '11': '2', '2': '6', '6': '6', '789': '2'}

In [54]: answer = []

In [55]: for key in mydict:
   ....:     path = [key]
   ....:     while mydict[key] != key:
   ....:         key = mydict[key]
   ....:         path.append(key)
   ....:     answer.append(path)
   ....:     

In [56]: answer
Out[56]: 
[['11', '2', '6'],
 ['789', '2', '6'],
 ['45678', '11', '2', '6'],
 ['2', '6'],
 ['6'],
 ['12345', '11', '2', '6']]
</snippet></ROW><ROW><id>15084047</id><snippet>&lt;q,aggScore&gt;</snippet></ROW><ROW><id>15084047</id><snippet>&lt;q,aggScore&gt;</snippet></ROW><ROW><id>15084047</id><snippet>&lt;q,list&lt;aggScore1,aggScore2,...&gt;</snippet></ROW><ROW><id>15084047</id><snippet>wordcount</snippet></ROW><ROW><id>15084047</id><snippet>public void reduce(Text q, Iterable&lt;IntWritable&gt; aggScore, Context context) throws IOException, InterruptedException {
   int sum = 0;
   for (IntWritable val : aggScore) {
      sum += val.get();
   }
   context.write(q, new IntWritable(sum));
}
</snippet></ROW><ROW><id>15084047</id><snippet>aggScores</snippet></ROW><ROW><id>15084047</id><snippet>q</snippet></ROW><ROW><id>15084047</id><snippet>q</snippet></ROW><ROW><id>15084047</id><snippet>aggScores</snippet></ROW><ROW><id>15084047</id><snippet>def reduce(self, key, values, output, reporter):
    sum = 0
    while values.hasNext():
        sum += values.next().get()
    output.collect(key, IntWritable(sum))
</snippet></ROW><ROW><id>15084102</id><snippet>int Py_eval_input</snippet></ROW><ROW><id>15084102</id><snippet>Py_CompileString()</snippet></ROW><ROW><id>15084102</id><snippet>int Py_file_input</snippet></ROW><ROW><id>15084102</id><snippet>Py_CompileString()</snippet></ROW><ROW><id>15084102</id><snippet>int Py_single_input</snippet></ROW><ROW><id>15084102</id><snippet>Py_CompileString()</snippet></ROW><ROW><id>15084102</id><snippet>Py_single_input</snippet></ROW><ROW><id>15084102</id><snippet>None</snippet></ROW><ROW><id>15084102</id><snippet>PyRun_String</snippet></ROW><ROW><id>15084102</id><snippet>Py_eval_input</snippet></ROW><ROW><id>15084444</id><snippet>\sable#1\s*$</snippet></ROW><ROW><id>15084444</id><snippet>able</snippet></ROW><ROW><id>15084444</id><snippet>import re
regex = re.compile(r'\sable#1\s*$')
count = 0
with open("pro.txt") as file:
    for line in file:
        if regex.search(line):
            count += 1
print count
</snippet></ROW><ROW><id>15084444</id><snippet>sum()</snippet></ROW><ROW><id>15084444</id><snippet>with open("pro.txt") as file:
    count = sum(1 for line in file if regex.search(line))
</snippet></ROW><ROW><id>15084636</id><snippet>from main import matrix
</snippet></ROW><ROW><id>15084893</id><snippet>from sqlalchemy.orm import backref
class Node(db.Model):
    # ...
    children = db.relationship('Node', backref=backref('parent', remote_side=[id]))
</snippet></ROW><ROW><id>15084893</id><snippet>class Node(db.Model):
    # ...
    parent = db.relationship("Node", backref='children', remote_side=[id])
</snippet></ROW><ROW><id>15085152</id><snippet>created_on = models.DateTimeField('Created On', auto_now_add=True)
last_modified = models.DateTimeField('Last Modified', auto_now=True)
</snippet></ROW><ROW><id>15085170</id><snippet>StringIO</snippet></ROW><ROW><id>15085170</id><snippet>import StringIO

output = StringIO.StringIO()
</snippet></ROW><ROW><id>15085170</id><snippet>output</snippet></ROW><ROW><id>15085170</id><snippet>prettyprint</snippet></ROW><ROW><id>15085215</id><snippet> envelopes = Envelope.objects.filter(user=request.user).exclude_unallocated()
</snippet></ROW><ROW><id>15085298</id><snippet>print</snippet></ROW><ROW><id>15085298</id><snippet>python -u</snippet></ROW><ROW><id>15085298</id><snippet>open(file, mode='r', buffering=-1 ....)
</snippet></ROW><ROW><id>15085298</id><snippet>stdout</snippet></ROW><ROW><id>15085298</id><snippet>sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 1)</snippet></ROW><ROW><id>15085619</id><snippet>self.a</snippet></ROW><ROW><id>15085619</id><snippet>self.a</snippet></ROW><ROW><id>15085783</id><snippet>from django.views.generic import TemplateView

urlpatterns = patterns('',
    (r'^dashboard/', login_required(TemplateView.as_view(template_name="dashboard.html"))),
)
</snippet></ROW><ROW><id>15085965</id><snippet>int</snippet></ROW><ROW><id>15085965</id><snippet>.__new__()</snippet></ROW><ROW><id>15085965</id><snippet>class MyInt(int):
    def __new__(cls, value):
        new_myint = super(MyInt, cls).__new__(cls, value)
        return new_myint
</snippet></ROW><ROW><id>15085965</id><snippet>__new__</snippet></ROW><ROW><id>15085965</id><snippet>super()</snippet></ROW><ROW><id>15085965</id><snippet>class MyInt(int):
    def __new__(cls, value):
        new_myint = super().__new__(cls, value)
        return new_myint
</snippet></ROW><ROW><id>15085965</id><snippet>value</snippet></ROW><ROW><id>15085965</id><snippet>super().__new__()</snippet></ROW><ROW><id>15085965</id><snippet>new_myint</snippet></ROW><ROW><id>15085965</id><snippet>__new__</snippet></ROW><ROW><id>15085965</id><snippet>class MyInt(int): pass</snippet></ROW><ROW><id>15086113</id><snippet>without join:
+---+---+------------------                     main-thread
    |   |
    |   +...........                            child-thread(short)
    +..................................         child-thread(long)

with join
+---+---+------------------***********+###      main-thread
    |   |                             |
    |   +...........join()            |         child-thread(short)
    +......................join()......         child-thread(long)

with join and demon thread
+-+--+---+------------------***********+###     parent-thread
  |  |   |                             |
  |  |   +...........join()            |        child-thread(short)
  |  +......................join()......        child-thread(long)
  +,,,,,,,,,,,,,join(),,,,,,,,,,,,,,,,,,,,,,,,, child-thread(long+demonized)

'-' main-thread/parent-thread/main-program execution
'.' child-thread execution
'#' optional parent-thread execution after join()-blocked parent-thread could 
    continue
'*' main-thread 'sleeping' in join-method, waiting for child-thread to finish
',' demonized thread - 'ignores' lifetime of other threads 
</snippet></ROW><ROW><id>15086740</id><snippet>si = sunburnt.SolrInterface("url","schema.xml")
query = si.query(arg1).facet(arg2)

if sort_flag:
  query = query.sort(arg3)
if exclude_flag:
  query = query.exclude(arg4)

response = query.execute()
</snippet></ROW><ROW><id>15086958</id><snippet>$HTTP["url"] =~ "^/blog(.*)$" {
            server.indexfiles = ("/")
            server.document-root = "/var/www"
    }


 url.rewrite-once = (
            "^/blog(.*)$" =&gt; "$0", &lt;-- as @dhunter suggested 
            "^(/.+?/static/.+)$" =&gt; "/applications$1",
            "(^|/.*)$" =&gt; "/fcgihandler.fcgi$1",
    )

fastcgi.server = (
            ".fcgi" =&gt; ("localhost" =&gt; (
                    "check-local" =&gt; "disable",
                    "min-procs" =&gt; "1",
                    "max-procs" =&gt; "2",
                    "socket" =&gt; "/tmp/web2py.sock"
            )),
            ".php" =&gt; ((
                    "bin-path" =&gt; "/usr/bin/php-cgi",
                    "socket" =&gt; "/tmp/php.socket"
            ))
</snippet></ROW><ROW><id>15087302</id><snippet>setItemSelected()</snippet></ROW><ROW><id>15087302</id><snippet>from PyQt4 import QtGui, QtCore
import sys, random

def clear(listwidget):
    for i in range(listwidget.count()):
        item = listwidget.item(i)
        listwidget.setItemSelected(item, False)

app = QtGui.QApplication([])
top = QtGui.QWidget()

# list widget
myListWidget = QtGui.QListWidget(top)
myListWidget.setSelectionMode(2)
myListWidget.resize(200,300)
for i in range(10):
    item = QtGui.QListWidgetItem("item %i" % i, myListWidget)
    myListWidget.addItem(item)
    if random.random() &gt; 0.5: 
        # randomly select half of the items in the list
        item.setSelected(True)

# clear button
myButton = QtGui.QPushButton("Clear", top)
myButton.resize(60,30)
myButton.move(70,300)
myButton.clicked.connect(lambda: clear(myListWidget))
top.show()

sys.exit(app.exec_())
</snippet></ROW><ROW><id>15087355</id><snippet>exec</snippet></ROW><ROW><id>15087355</id><snippet>exec()</snippet></ROW><ROW><id>15087355</id><snippet>exec</snippet></ROW><ROW><id>15087355</id><snippet>locals()</snippet></ROW><ROW><id>15087355</id><snippet>def foo():
    a = 'spam'
    locals()['a'] = 'ham'
    print(a)              # prints 'spam'
</snippet></ROW><ROW><id>15087355</id><snippet>exec</snippet></ROW><ROW><id>15087355</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>15087355</id><snippet>LOAD_NAME</snippet></ROW><ROW><id>15087355</id><snippet>exec()</snippet></ROW><ROW><id>15087355</id><snippet>exec</snippet></ROW><ROW><id>15087355</id><snippet>locals()</snippet></ROW><ROW><id>15087355</id><snippet>PyFrame_LocalsToFast</snippet></ROW><ROW><id>15087435</id><snippet>ElementTree</snippet></ROW><ROW><id>15087435</id><snippet>from xml.etree import ElementTree as etree

urlset = etree.fromstring(xml)
if urlset.find('url') is None:
   print("sitemap has no urls") 
</snippet></ROW><ROW><id>15087809</id><snippet>id</snippet></ROW><ROW><id>15087809</id><snippet>m.key.id()
</snippet></ROW><ROW><id>15088136</id><snippet>$.ajax({
    type: 'POST',
    // Provide correct Content-Type, so that Flask will know how to process it.
    contentType: 'application/json',
    // Encode your data as JSON.
    data: JSON.stringify(post_obj),
    // This is the type of data you're expecting back from the server.
    dataType: 'json',
    url: '/some/url',
    success: function (e) {
        console.log(e);
    }
});
</snippet></ROW><ROW><id>15088136</id><snippet>request.json</snippet></ROW><ROW><id>15088136</id><snippet>content = request.json['content']
</snippet></ROW><ROW><id>15088810</id><snippet>rows</snippet></ROW><ROW><id>15088810</id><snippet>pydodbc.Row</snippet></ROW><ROW><id>15088810</id><snippet>pydodbc.Row</snippet></ROW><ROW><id>15088810</id><snippet>rows = cursor.fetchall()   # rows is a list
rows = random.choice(rows) # now rows is a single object
</snippet></ROW><ROW><id>15088810</id><snippet>()</snippet></ROW><ROW><id>15088810</id><snippet>label1 = Tkinter.Label(self, text = (rows(1).Question))
</snippet></ROW><ROW><id>15088810</id><snippet>ERROR: TypeError: ‘pydodbc.Row’ object is not callable
</snippet></ROW><ROW><id>15088810</id><snippet>rows = cursor.fetchall()   
random_row = random.choice(rows) 

...

label1 = Tkinter.Label(self, text = (random_row.Question))
</snippet></ROW><ROW><id>15090077</id><snippet>alist</snippet></ROW><ROW><id>15090077</id><snippet>alist = [(0.7897897,'this is a foo bar sentence'),
(0.653234, 'this is a foo bar sentence'),
(0.353234, 'this is a foo bar sentence'),
(0.325345, 'this is not really a foo bar'),
(0.323234, 'this is a foo bar sentence'),]

seen = set()
out = []
for a,b in alist:
    if b not in seen:
        out.append((a,b))
        seen.add(b)
</snippet></ROW><ROW><id>15090077</id><snippet>out</snippet></ROW><ROW><id>15090077</id><snippet>[(0.7897897, 'this is a foo bar sentence'),
 (0.325345, 'this is not really a foo bar')]
</snippet></ROW><ROW><id>15090302</id><snippet>except</snippet></ROW><ROW><id>15090302</id><snippet>try:
    some_code()
    try:
        some_more_code()
    except Exception as exc:
        fix_some_stuff()
        raise exc
except Exception as exc:
    fix_more_stuff()
</snippet></ROW><ROW><id>15090886</id><snippet>__double_leading_and_trailing_underscore__</snippet></ROW><ROW><id>15090886</id><snippet>__init__</snippet></ROW><ROW><id>15090886</id><snippet>__import__</snippet></ROW><ROW><id>15090886</id><snippet>__file__</snippet></ROW><ROW><id>15090886</id><snippet>__module__</snippet></ROW><ROW><id>15090886</id><snippet>module</snippet></ROW><ROW><id>15090886</id><snippet>&gt;&gt;&gt; __foo__ = 42
&gt;&gt;&gt; print foo
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'foo' is not defined

&gt;&gt;&gt; print _foo
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name '_foo' is not defined

&gt;&gt;&gt; print __foo
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name '__foo' is not defined

&gt;&gt;&gt; print __foo__
42

&gt;&gt;&gt; type(__foo__)
&lt;type 'int'&gt;
</snippet></ROW><ROW><id>15090886</id><snippet>from __future__ import...</snippet></ROW><ROW><id>15090893</id><snippet>from datetime import datetime
from threading import Timer

x=datetime.today()
y=x.replace(day=x.day+1, hour=1, minute=0, second=0, microsecond=0)
delta_t=y-x

secs=delta_t.seconds+1

def hello_world():
    print "hello world"
    #...

t = Timer(secs, hello_world)
t.start()
</snippet></ROW><ROW><id>15090924</id><snippet>value, error = IS_EMAIL()('someone@example.com')
</snippet></ROW><ROW><id>15090924</id><snippet>None</snippet></ROW><ROW><id>15090924</id><snippet>def validate():
    value, error = globals()[request.vars.validator]()(request.vars.value)
    return error if error else 'OK'
</snippet></ROW><ROW><id>15090924</id><snippet>/myapp/mycontroller/validate?validator=IS_EMAIL&amp;value=someone@example.com.
</snippet></ROW><ROW><id>15091043</id><snippet>for d in b:
    print d['id']
    for desc in d['desc']:
        print desc
</snippet></ROW><ROW><id>15091043</id><snippet>a =[{'id': 1,'desc': 'smth'},{'id': 2,'desc': 'smthelse'},{'id': 1,'desc': 'smthelse2'},{'id': 1,'desc': 'smthelse3'}]

c = {}
for d in a:
    c.setdefault(d['id'], []).append(d['desc'])
b = [{'id': k, 'desc': v} for k,v in c.iteritems()]
</snippet></ROW><ROW><id>15091043</id><snippet>b</snippet></ROW><ROW><id>15091043</id><snippet>[{'desc': ['smth', 'smthelse2', 'smthelse3'], 'id': 1},
 {'desc': ['smthelse'], 'id': 2}]
</snippet></ROW><ROW><id>15091483</id><snippet>r_</snippet></ROW><ROW><id>15091483</id><snippet>basename</snippet></ROW><ROW><id>15091483</id><snippet>...
# basename is actually set to "circle" ("arc" is commented out) in that example.
# this saves the figure to "circle_residu2.png" or "circle_residu1.png"
p.savefig('%s_residu%d.png' % (basename, 2 if residu2 else 1))
</snippet></ROW><ROW><id>15091604</id><snippet>attrs</snippet></ROW><ROW><id>15091604</id><snippet>attr_data = data["U"][:] # gets a copy of the array
min = attr_data.min()
max = attr_data.max()
</snippet></ROW><ROW><id>15091604</id><snippet>for attr_name,attr_value in data.items():
    min = attr_value[:].min()
</snippet></ROW><ROW><id>15091604</id><snippet>the_file.keys()</snippet></ROW><ROW><id>15091604</id><snippet>the_file = h5py.File("myfile.h5","r")
print the_file.keys()
# this will result in a list of keys maybe ["raw_data","meta_data"] or something
print the_file["raw_data"].keys()
# this will result in another list of keys maybe ["temperature","humidity"]
# eventually you'll get to the dataset that actually has the data or attributes you are looking for
# think of this process as going through a directory structure or a path to get to a file (or a dataset/variable in this case)
the_data_var = the_file["raw_data"]["temperature"]
the_data_array = the_data_var[:]

print the_data_var.attrs.keys()
# this will result in a list of attribute names/keys
an_attr_of_the_data = data_var.attrs["measurement_time"][:]

# So now you have "the_data_array" which is a numpy array and "an_attr_of_the_data" which is whatever it happened to be
# you can get the min/max of the data by doing like before
print the_data_array.min()
print the_data_array.max()
</snippet></ROW><ROW><id>15091604</id><snippet>data.keys()</snippet></ROW><ROW><id>15091604</id><snippet>"U","T",etc.</snippet></ROW><ROW><id>15091604</id><snippet># Get a handle to the "data" Group
data = the_file["data"]
# As you can see from the dump this data group has 3 attributes and 1 dataset
# The name of the attributes are "datafield_names","dimensions","time_variables"
# This should result in a list of those names:
print data.attrs.keys()

# The name of the dataset is "Temperature" and should be the only item in the list returned by:
print data.keys()
</snippet></ROW><ROW><id>15091604</id><snippet>datafield_names</snippet></ROW><ROW><id>15091604</id><snippet>dimensions</snippet></ROW><ROW><id>15091604</id><snippet>time_variables</snippet></ROW><ROW><id>15091604</id><snippet>Temperature</snippet></ROW><ROW><id>15091604</id><snippet>datafield_names</snippet></ROW><ROW><id>15091604</id><snippet>Temperature</snippet></ROW><ROW><id>15091604</id><snippet>Temperature</snippet></ROW><ROW><id>15091604</id><snippet>Temperature</snippet></ROW><ROW><id>15091604</id><snippet>datafield_names</snippet></ROW><ROW><id>15091604</id><snippet># Get the temperature array (I can't remember if the 3 sets of colons is required, but try it and if not just use one)
temp_array = data["Temperature"][:,:,:]
# Get all of the datafield_names (list of strings of length 62)
datafields = data.attrs["datafield_names"][:]
# Get all of the dimensions (list of integers of length 4)
dims = data.attrs["dimensions"][:]
# Get all of the time variables (list of floats of length 2)
time_variables = data.attrs["time_variables"]

# If you want the min/max of the entire temperature array this should work:
print temp_array.min()
print temp_array.max()
# If you knew that row 0 of the array had the temperatures you wanted to analyze
# then this would work, but it all depends on how the creator organized the data/file:
print temp_array[0].min()
print temp_array[1].max()
</snippet></ROW><ROW><id>15092243</id><snippet>b</snippet></ROW><ROW><id>15092302</id><snippet>numpy.random.exponential</snippet></ROW><ROW><id>15092302</id><snippet>f(x=0)=lambda=1/beta</snippet></ROW><ROW><id>15092302</id><snippet>import numpy as np
import pylab as plt

target = 250
beta = 1.0/target

Y = np.random.exponential(beta, 5000)
plt.hist(Y, normed=True, bins=200,lw=0,alpha=.8)
plt.plot([0,max(Y)],[target,target],'r--')
plt.ylim(0,target*1.1)
plt.show()
</snippet></ROW><ROW><id>15092302</id><snippet>normed=true</snippet></ROW><ROW><id>15092682</id><snippet>gobject.type_register</snippet></ROW><ROW><id>15092682</id><snippet>__gtype_name__</snippet></ROW><ROW><id>15092682</id><snippet>class Completer(gtk.Bin):
    __gtype_name__= "Completer"

    def __init__(self, exts, *args, **kwargs):
        super(Completer, self).__init__(*args, **kwargs)
        child = gtk.VBox(spacing=15)
        self.add(child)
</snippet></ROW><ROW><id>15093393</id><snippet>__name__</snippet></ROW><ROW><id>15093393</id><snippet>__parent__</snippet></ROW><ROW><id>15093393</id><snippet>/
|- login
|- users
   |- 1
      |- edit
</snippet></ROW><ROW><id>15093393</id><snippet>User(id=1)</snippet></ROW><ROW><id>15093393</id><snippet>@view_config(context=Root, name='login')</snippet></ROW><ROW><id>15093393</id><snippet>request.resource_url(request.root, 'login')</snippet></ROW><ROW><id>15093393</id><snippet>User</snippet></ROW><ROW><id>15093393</id><snippet>request.resource_url(user, 'edit')</snippet></ROW><ROW><id>15093393</id><snippet>user</snippet></ROW><ROW><id>15093393</id><snippet>User(id=1)</snippet></ROW><ROW><id>15093393</id><snippet>__name__</snippet></ROW><ROW><id>15093393</id><snippet>__parent__</snippet></ROW><ROW><id>15093393</id><snippet>__parent__</snippet></ROW><ROW><id>15093393</id><snippet>/</snippet></ROW><ROW><id>15093393</id><snippet>__parent__</snippet></ROW><ROW><id>15093393</id><snippet>__name__</snippet></ROW><ROW><id>15093741</id><snippet>easy_install reindent</snippet></ROW><ROW><id>15093741</id><snippet>pip install reindent</snippet></ROW><ROW><id>15093741</id><snippet>reindent</snippet></ROW><ROW><id>15093777</id><snippet>print seq(y), '\t', ', '.join('%s' % i if i == j else '%s-%s' % (i, j)
                              for i in holetbl[y])
</snippet></ROW><ROW><id>15093777</id><snippet>str.join</snippet></ROW><ROW><id>15094052</id><snippet>floats</snippet></ROW><ROW><id>15094052</id><snippet>__str__</snippet></ROW><ROW><id>15094052</id><snippet>__repr__</snippet></ROW><ROW><id>15094052</id><snippet>repr</snippet></ROW><ROW><id>15094052</id><snippet>&gt;&gt;&gt; print 0.26912666717306399
0.269126667173
&gt;&gt;&gt; print repr(0.26912666717306399)
0.269126667173064
&gt;&gt;&gt; print("%.16f" % 0.26912666717306399)
0.2691266671730640
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15094074</id><snippet>dialect = csv.Sniffer().sniff(csvfile.readline(), [',',';'])
csvfile.seek(0)  
data = csv.reader(csvfile, dialect)
</snippet></ROW><ROW><id>15094743</id><snippet>global currentTok</snippet></ROW><ROW><id>15094743</id><snippet>currentTok=0                     

def demand(s):
    global currentTok
    if tokenObjects[currentTok+1].category==s:
        # etc.
</snippet></ROW><ROW><id>15094743</id><snippet>global</snippet></ROW><ROW><id>15094883</id><snippet>set shiftwidth=4
set tabstop=4
set expandtab
</snippet></ROW><ROW><id>15094883</id><snippet>shiftwidth</snippet></ROW><ROW><id>15094883</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>15094883</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>15094883</id><snippet>tabstop</snippet></ROW><ROW><id>15094883</id><snippet>expandtab</snippet></ROW><ROW><id>15094883</id><snippet>set shiftwidth=4
set softtabstop=4
set tabstop=8
set expandtab
</snippet></ROW><ROW><id>15094883</id><snippet>tab</snippet></ROW><ROW><id>15094941</id><snippet>class FileInfo(ndb.Model):     
    ....
    blob_ref = ndb.BlobKeyProperty() 
....

file_info = models.FileInfo.get_by_id(... key_name ....)
self.send_blob(blobstore.BlobInfo.get(file_info.blob_ref), save_as=True)
</snippet></ROW><ROW><id>15095129</id><snippet>list(fcn())
</snippet></ROW><ROW><id>15095129</id><snippet>iter(fcn())
</snippet></ROW><ROW><id>15095145</id><snippet>re.DOTALL</snippet></ROW><ROW><id>15095145</id><snippet>import re

data = """
fault-filtertime 5
foo
bar
baz
! TH
"""

regex_str = "fault-filtertime 5(.*?)! TH"
regex = re.compile(regex_str, re.DOTALL)
result = re.search(regex, data)
print result.group(1)
</snippet></ROW><ROW><id>15095749</id><snippet>else</snippet></ROW><ROW><id>15095749</id><snippet>return</snippet></ROW><ROW><id>15095749</id><snippet>if</snippet></ROW><ROW><id>15095749</id><snippet>word</snippet></ROW><ROW><id>15095749</id><snippet>def vowel_index(word):
    for i, letters in enumerate(word):
        if letters in VOWELS:
            vowel_index = i
            return word[vowel_index:] + word[:vowel_index] + "ay"
    return word
</snippet></ROW><ROW><id>15095749</id><snippet>translated_text</snippet></ROW><ROW><id>15095749</id><snippet>pig_latin_words</snippet></ROW><ROW><id>15095749</id><snippet>translated_text = " ".join(pig_latin_words)
</snippet></ROW><ROW><id>15095749</id><snippet>&gt;&gt;&gt; pig_latin_words = ['atcay', 'ogday']
&gt;&gt;&gt; print "".join(str(pig_latin_words))  # your version
['atcay', 'ogday']
&gt;&gt;&gt; print " ".join(pig_latin_words)      # my version
atcay ogday
</snippet></ROW><ROW><id>15095777</id><snippet>glob.blog</snippet></ROW><ROW><id>15095777</id><snippet>glob.glob</snippet></ROW><ROW><id>15095777</id><snippet>for infile in sorted(glob.glob("*.txt")):
    # do stuff here
</snippet></ROW><ROW><id>15095777</id><snippet>sorted</snippet></ROW><ROW><id>15095777</id><snippet>~/coding/fill$ more *.txt
::::::::::::::
0129A.txt
::::::::::::::
1 2 3
1 2 3
1 2 3
::::::::::::::
0201A.txt
::::::::::::::
4 5 6
4 5 6
4 5 6

::::::::::::::
0210A.txt
::::::::::::::
7 8 9
7 8 9

::::::::::::::
0215A.txt
::::::::::::::
10 11 12
10 11 12
10 11 12
</snippet></ROW><ROW><id>15095777</id><snippet>import os, glob
import numpy as np

datadirectory = '.'
os.chdir(datadirectory)
listing = sorted(os.listdir(datadirectory))
my_array = np.zeros(shape=(0,3))

for infile in sorted(glob.glob('*.txt')):
    dataset = open(infile).readlines()
    data = np.genfromtxt(dataset, usecols=(0,1,2))
    lta = data
    my_array = np.vstack([my_array, lta])

print my_array
</snippet></ROW><ROW><id>15095777</id><snippet>[[  1.   2.   3.]
 [  1.   2.   3.]
 [  1.   2.   3.]
 [  4.   5.   6.]
 [  4.   5.   6.]
 [  4.   5.   6.]
 [  7.   8.   9.]
 [  7.   8.   9.]
 [ 10.  11.  12.]
 [ 10.  11.  12.]
 [ 10.  11.  12.]]
</snippet></ROW><ROW><id>15095900</id><snippet>def _foo():
    """You can call this function from your own code, but you
    really shouldn't because I might change or remove it at
    any time without warning"""
    modify_guts_of_module()

def __bar():
    """Hands off. This is for the module implementation, not for
    public consumption. You can't even see this unless you go out
    of your way, and why would you do that?"""
    release_the_hounds()
</snippet></ROW><ROW><id>15096140</id><snippet>os.path.normpath(os.curdir)</snippet></ROW><ROW><id>15096140</id><snippet>file=open(os.path.join(os.path.dirname(__file__),'holdstextfiles',text),'r')
</snippet></ROW><ROW><id>15096140</id><snippet>os.chdir(os.path.dirname(__file__))
...
</snippet></ROW><ROW><id>15096147</id><snippet>&gt;&gt;&gt; data = [(212, u'comment', 0L), (205, u'main', 0L)]
&gt;&gt;&gt; tuple(x[2] for x in data)
(0L, 0L)
</snippet></ROW><ROW><id>15096147</id><snippet>&gt;&gt;&gt; zip(*data)   # just showing what zip(*data) does
[(212, 205), (u'comment', u'main'), (0L, 0L)]
&gt;&gt;&gt; zip(*data)[2]
(0L, 0L)
</snippet></ROW><ROW><id>15096147</id><snippet>itertools.imap()</snippet></ROW><ROW><id>15096147</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>15096147</id><snippet>&gt;&gt;&gt; from itertools import imap
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; tuple(imap(itemgetter(2), data))
(0L, 0L)
</snippet></ROW><ROW><id>15096181</id><snippet>s = "able#1"

for line in open("pro.txt").readlines():
    if s == line.split()[3].strip():
        print line.rsplit(' ',1)[0].strip()
</snippet></ROW><ROW><id>15096181</id><snippet>&gt;&gt;&gt; 
0         6          9
9         12         22
</snippet></ROW><ROW><id>15096181</id><snippet>print ' '.join(line.split()[:3])
</snippet></ROW><ROW><id>15096181</id><snippet>s = raw_input("enter the word you want to find in text file : ")

f = False
for line in open("pro.txt").readlines():
    if s == line.split()[3].strip():
        if not f:
            print "word found !!"
            f = True
        print ' '.join(line.split()[:3])
</snippet></ROW><ROW><id>15096181</id><snippet>&gt;&gt;&gt; 
enter the word you want to find in text file : able#1
word found !!
0 6 9
9 12 22
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15096189</id><snippet>optparse</snippet></ROW><ROW><id>15096189</id><snippet>argparse</snippet></ROW><ROW><id>15096189</id><snippet>import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-f')
parser.add_argument('-c')

parser.parse_args(['-f', 'f_val', '-c', 'c_val'])   #works as expected
parser.parse_args(['-f', '-c'])                     #errors as expected
</snippet></ROW><ROW><id>15096189</id><snippet>optparse</snippet></ROW><ROW><id>15096189</id><snippet>parser = OptionParser('usage')
parser.add_option("-f", "--ff", dest="f_value")
parser.add_option("-c", "--cc", dest="c_value")

(options, args) = parser.parse_args()

if options.f_value == '-c':
    print 'error: -f requires an argument'
    exit(1)
</snippet></ROW><ROW><id>15096466</id><snippet>import numpy as np
from numpy.lib.stride_tricks import as_strided

def concatenated_ranges(ranges_list) :
    ranges_list = np.array(ranges_list, copy=False)
    base_range = np.arange(ranges_list.max())
    base_range =  as_strided(base_range,
                             shape=ranges_list.shape + base_range.shape,
                             strides=(0,) + base_range.strides)
    return base_range[base_range &lt; ranges_list[:, None]]
</snippet></ROW><ROW><id>15096466</id><snippet>def junuxx(a) :
    b = np.array([], dtype=np.uint8)
    for x in a:
        b = np.append(b, np.arange(x))
    return b

def mr_e(a) :
    return reduce(lambda x, y: x + range(y), a, [])
</snippet></ROW><ROW><id>15096466</id><snippet>In [2]: a = [2, 1, 4, 0 ,2] # the OP's original example

In [3]: concatenated_ranges(a) # show it works!
Out[3]: array([0, 1, 0, 0, 1, 2, 3, 0, 1])

In [4]: %timeit concatenated_ranges(a)
10000 loops, best of 3: 31.6 us per loop

In [5]: %timeit junuxx(a)
10000 loops, best of 3: 34 us per loop

In [6]: %timeit mr_e(a)
100000 loops, best of 3: 2.58 us per loop

In [7]: a = np.random.randint(1, 10, size=(10,))

In [8]: %timeit concatenated_ranges(a)
10000 loops, best of 3: 27.1 us per loop

In [9]: %timeit junuxx(a)
10000 loops, best of 3: 79.8 us per loop

In [10]: %timeit mr_e(a)
100000 loops, best of 3: 7.82 us per loop

In [11]: a = np.random.randint(1, 10, size=(100,))

In [12]: %timeit concatenated_ranges(a)
10000 loops, best of 3: 57.4 us per loop

In [13]: %timeit junuxx(a)
1000 loops, best of 3: 756 us per loop

In [14]: %timeit mr_e(a)
10000 loops, best of 3: 149 us per loop

In [15]: a = np.random.randint(1, 10, size=(1000,))

In [16]: %timeit concatenated_ranges(a)
1000 loops, best of 3: 358 us per loop

In [17]: %timeit junuxx(a)
100 loops, best of 3: 9.38 ms per loop

In [18]: %timeit mr_e(a)
100 loops, best of 3: 8.93 ms per loop
</snippet></ROW><ROW><id>15096536</id><snippet>&lt;form id="buscaForm" name="buscaForm" method="post" action="/dataEscolaBrasil/home.seam;jsessionid=EFB3D6270E69EAE71733137219C3026B" enctype=""&gt;
</snippet></ROW><ROW><id>15097331</id><snippet>$ nohup python app.py 8080 &amp;
</snippet></ROW><ROW><id>15097493</id><snippet>def</snippet></ROW><ROW><id>15097493</id><snippet>def</snippet></ROW><ROW><id>15097493</id><snippet>POSITION</snippet></ROW><ROW><id>15097493</id><snippet>SIZE</snippet></ROW><ROW><id>15097493</id><snippet>def</snippet></ROW><ROW><id>15097493</id><snippet>def</snippet></ROW><ROW><id>15097592</id><snippet>a=10
b=10
c=10

def D():
    return a+b+c

print D()

a=1

print D()
</snippet></ROW><ROW><id>15097698</id><snippet>import</snippet></ROW><ROW><id>15097698</id><snippet>lxml</snippet></ROW><ROW><id>15097698</id><snippet>bs4</snippet></ROW><ROW><id>15097698</id><snippet>sys.setrecusionlimit(50)</snippet></ROW><ROW><id>15097722</id><snippet>{{'&lt;br&gt;'.join(list)|safe}}
</snippet></ROW><ROW><id>15097722</id><snippet>list</snippet></ROW><ROW><id>15097722</id><snippet>join</snippet></ROW><ROW><id>15097722</id><snippet>list</snippet></ROW><ROW><id>15097722</id><snippet>{{ list|join('&lt;br&gt;'|safe) }}
</snippet></ROW><ROW><id>15097957</id><snippet>\\\\</snippet></ROW><ROW><id>15097957</id><snippet>\s</snippet></ROW><ROW><id>15097957</id><snippet>\s</snippet></ROW><ROW><id>15097957</id><snippet>\s</snippet></ROW><ROW><id>15097957</id><snippet>re.match(pattern, r'string1\string2\string3')
</snippet></ROW><ROW><id>15097957</id><snippet>pattern = re.compile(r'(.*)\\(.*)\\(.*)')
</snippet></ROW><ROW><id>15097957</id><snippet>m.groups</snippet></ROW><ROW><id>15097957</id><snippet>m.groups()</snippet></ROW><ROW><id>15097957</id><snippet>pattern = re.compile(r'(.*)\\(.*)\\(.*)')
m = re.match(pattern, r'string1\string2\string3')
m.groups()
# ('string1', 'string2', 'string3')
</snippet></ROW><ROW><id>15097991</id><snippet>read()</snippet></ROW><ROW><id>15097991</id><snippet>self._stream</snippet></ROW><ROW><id>15097991</id><snippet>@property</snippet></ROW><ROW><id>15097991</id><snippet>self.body</snippet></ROW><ROW><id>15097991</id><snippet>self.body()</snippet></ROW><ROW><id>15098029</id><snippet>my_functions = (
    (my_func1, [2, 5], {'kwarg1': 'val1'}),
    # ...
)

for function, args, kwargs in my_functions:
    if not function(*args, **kwargs):
        break
</snippet></ROW><ROW><id>15098368</id><snippet>x = "I use computers"
print len(x.split())
</snippet></ROW><ROW><id>15098400</id><snippet>givenY</snippet></ROW><ROW><id>15098400</id><snippet>start</snippet></ROW><ROW><id>15098400</id><snippet>end</snippet></ROW><ROW><id>15098400</id><snippet>bisect</snippet></ROW><ROW><id>15098400</id><snippet>start</snippet></ROW><ROW><id>15098400</id><snippet>end</snippet></ROW><ROW><id>15098400</id><snippet>end-start</snippet></ROW><ROW><id>15098400</id><snippet>list[start:end]</snippet></ROW><ROW><id>15098400</id><snippet>end-start</snippet></ROW><ROW><id>15098400</id><snippet>start==end</snippet></ROW><ROW><id>15098400</id><snippet>import unittest

from bisect import bisect_left, bisect_right


def find_range(array, a, b):
    start = bisect_right(array,a)
    end = bisect_left(array,b)
    return (start, end)


class TestCase(unittest.TestCase):
    Y = [1, 3, 5, 10, 15]
    givenY = [3, 4, 5, 6, 7, 8, 9, 10, 11]

    def test_empty_array(self):
        self.assertEqual( (0, 0), find_range([], 1, 2) )

    def test_all_values_larger(self):
        self.assertEqual( (0, 0), find_range([4,5,6], 1, 3) )

    def test_all_values_larger_or_equal(self):
        self.assertEqual( (0, 0), find_range(self.givenY, self.Y[0], self.Y[1]) )

    def test_both_endpoints_inside_list(self):
        self.assertEqual( (1, 2), find_range(self.givenY, self.Y[1], self.Y[2]))
        self.assertEqual( [4], self.givenY[1:2])

    def test_2(self):
        self.assertEqual( (3, 7), find_range(self.givenY, self.Y[2], self.Y[3]) )
        self.assertEqual( [6, 7, 8, 9], self.givenY[3:7])

    def test_no_values_larger_or_equal_to_upper_limit(self):
        self.assertEqual( (8, 9), find_range(self.givenY, self.Y[3], self.Y[4]) )
        self.assertEqual( [11], self.givenY[8:9])


if __name__=="__main__":
    unittest.main()
</snippet></ROW><ROW><id>15098400</id><snippet>find_range()</snippet></ROW><ROW><id>15098400</id><snippet>import unittest

from bisect import bisect_left, bisect_right


def find_range(array, a, b):
    """Find elements that are greater than a and less than b.
    Returns a tuple (start,end) where array[start] is the first
    value and array[end] is the last value.
    If no value is found, returns start=end=-1.
    """
    start = bisect_right(array,a)
    end = bisect_left(array,b)
    if start==end:
        return (-1,-1)
    else:
        return (start, end-1)


class TestCase(unittest.TestCase):
    Y = [1, 3, 5, 10, 15]
    givenY = [3, 4, 5, 6, 7, 8, 9, 10, 11]

    def test_empty_array(self):
        self.assertEqual( (-1, -1), find_range([], 1, 2) )

    def test_all_values_larger(self):
        self.assertEqual( (-1, -1), find_range([4,5,6], 1, 3) )

    def test_all_values_larger_or_equal(self):
        self.assertEqual( (-1, -1), find_range(self.givenY, self.Y[0], self.Y[1]) )

    def test_both_endpoints_inside_list(self):
        self.assertEqual( (1, 1), find_range(self.givenY, self.Y[1], self.Y[2]))

    def test_2(self):
        self.assertEqual( (3, 6), find_range(self.givenY, self.Y[2], self.Y[3]) )

    def test_no_values_larger_or_equal_to_upper_limit(self):
        self.assertEqual( (8, 8), find_range(self.givenY, self.Y[3], self.Y[4]) )

    def test_sample(self):
        self.assertEqual( (3,3), find_range([1,3,5,7], 5, 8)  )
        self.assertEqual( (3,3), find_range([1,3,5,7], 6, 8)  )


if __name__=="__main__":
    unittest.main()
</snippet></ROW><ROW><id>15098417</id><snippet>In [6]: p=phrases.strip().split('\n')

In [7]: p
Out[7]: ['hello', 'name', 'john doe']
</snippet></ROW><ROW><id>15098417</id><snippet>\b</snippet></ROW><ROW><id>15098417</id><snippet>re.I</snippet></ROW><ROW><id>15098417</id><snippet>In [11]: import re

In [14]: re.findall(r'\b%s\b' % p[0], text1)
Out[14]: ['hello', 'hello', 'hello']

In [15]: re.findall(r'\b%s\b' % p[0], text1, re.I)
Out[15]: ['hello', 'hello', 'hello']

In [16]: re.findall(r'\b%s\b' % p[1], text1, re.I)
Out[16]: ['name']

In [17]: re.findall(r'\b%s\b' % p[2], text1, re.I)
Out[17]: ['john doe']
</snippet></ROW><ROW><id>15098417</id><snippet>len()</snippet></ROW><ROW><id>15098438</id><snippet>connect()</snippet></ROW><ROW><id>15098438</id><snippet>sqlite3</snippet></ROW><ROW><id>15098438</id><snippet>mysql</snippet></ROW><ROW><id>15098438</id><snippet>for (data) in cursor:</snippet></ROW><ROW><id>15098438</id><snippet>Row</snippet></ROW><ROW><id>15098438</id><snippet>str(data)</snippet></ROW><ROW><id>15098438</id><snippet>%s</snippet></ROW><ROW><id>15098438</id><snippet>str(data)</snippet></ROW><ROW><id>15098438</id><snippet>str</snippet></ROW><ROW><id>15098438</id><snippet>data</snippet></ROW><ROW><id>15098438</id><snippet>for (data) in cursor:
</snippet></ROW><ROW><id>15098438</id><snippet>for data in cursor:
</snippet></ROW><ROW><id>15098438</id><snippet>tuple</snippet></ROW><ROW><id>15098438</id><snippet>for data, in cursor:
</snippet></ROW><ROW><id>15098438</id><snippet>__iter__</snippet></ROW><ROW><id>15098438</id><snippet>next</snippet></ROW><ROW><id>15098438</id><snippet>fetchone()</snippet></ROW><ROW><id>15098438</id><snippet>fetchone</snippet></ROW><ROW><id>15098438</id><snippet>sqlite3.Row</snippet></ROW><ROW><id>15098438</id><snippet>tuple</snippet></ROW><ROW><id>15098701</id><snippet>def locate_min(a):
    smallest = min(a)
    return smallest, [index for index, element in enumerate(a) 
                      if smallest == element]
</snippet></ROW><ROW><id>15098701</id><snippet>&gt;&gt;&gt; locate_min([1, 2, 1, 1, 4, 5, 6])
(1, [0, 2, 3])
</snippet></ROW><ROW><id>15098701</id><snippet>def locate_min(a):
    min_indicies = []
    smallest = min(a)
    for index, element in enumerate(a):
            if smallest == element: # check if this element is the minimum_value
                    min_indicies.append(index) # add the index to the list if it is

    return smallest, min_indicies
</snippet></ROW><ROW><id>15098764</id><snippet>@paginated_instance_method
def get_attending_users(self, *args, **kwargs):
    return User.objects.filter(pk__in=self.attending_list)
</snippet></ROW><ROW><id>15098764</id><snippet>def get_attending_users(self, *args, **kwargs):
    return User.objects.filter(pk__in=self.attending_list)
get_attending_users = paginated_instance_method(get_attending_users)
</snippet></ROW><ROW><id>15098764</id><snippet>paginated_instance_method</snippet></ROW><ROW><id>15098764</id><snippet>get_attending_users</snippet></ROW><ROW><id>15098764</id><snippet>default_page_size</snippet></ROW><ROW><id>15098764</id><snippet>paginated_instance_method</snippet></ROW><ROW><id>15098764</id><snippet>wrap</snippet></ROW><ROW><id>15098764</id><snippet>get_attending_users</snippet></ROW><ROW><id>15098764</id><snippet>wrap</snippet></ROW><ROW><id>15098764</id><snippet>Event().get_attending_users()</snippet></ROW><ROW><id>15098764</id><snippet>wrap(self)</snippet></ROW><ROW><id>15098764</id><snippet>self</snippet></ROW><ROW><id>15098764</id><snippet>wrap</snippet></ROW><ROW><id>15098764</id><snippet>Event</snippet></ROW><ROW><id>15098764</id><snippet>functools.wrap</snippet></ROW><ROW><id>15098764</id><snippet>@paginated_instance_method()
def get_attending_users(self, *args, **kwargs):
    return User.objects.filter(pk__in=self.attending_list)
</snippet></ROW><ROW><id>15098764</id><snippet>paginated_instance_method</snippet></ROW><ROW><id>15098764</id><snippet>paginated_instance_method</snippet></ROW><ROW><id>15098764</id><snippet>paginated_instance_method</snippet></ROW><ROW><id>15098764</id><snippet>__name__</snippet></ROW><ROW><id>15098859</id><snippet>url_for('posts.list')</snippet></ROW><ROW><id>15098891</id><snippet>accounts = {}
account[x] = Account()
</snippet></ROW><ROW><id>15098942</id><snippet>#!/bin/sh
cd /usr/lib/pyis-uploader/
python2 pyis_uploader.py $@
</snippet></ROW><ROW><id>15098942</id><snippet>#!/bin/sh
python2 /usr/lib/pyis-uploader/pyis_uploader.py $@
</snippet></ROW><ROW><id>15099130</id><snippet>import cv2
</snippet></ROW><ROW><id>15099130</id><snippet>image_array = cv2.imread('image.png')
</snippet></ROW><ROW><id>15099130</id><snippet>image_array</snippet></ROW><ROW><id>15099130</id><snippet>image_array[0,0] = 100
</snippet></ROW><ROW><id>15099130</id><snippet>cv2</snippet></ROW><ROW><id>15099130</id><snippet>import cv2</snippet></ROW><ROW><id>15099130</id><snippet>opencv</snippet></ROW><ROW><id>15099130</id><snippet>numpy</snippet></ROW><ROW><id>15099141</id><snippet>d2 = dict(t2)
res = [[k[0], d2.get(k[0], 0)] for k in t1]
</snippet></ROW><ROW><id>15099262</id><snippet>d</snippet></ROW><ROW><id>15099262</id><snippet>d = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']

# ...
for n in range(7):
    day = d[n]
</snippet></ROW><ROW><id>15099262</id><snippet>n</snippet></ROW><ROW><id>15099262</id><snippet>d</snippet></ROW><ROW><id>15099262</id><snippet>d = {
    1: 'Monday', 
    2: 'Tuesday', 
    3: 'Wednesday', 
    4: 'Thursday', 
    5: 'Friday', 
    6: 'Saturday', 
    7: 'Sunday'
}
</snippet></ROW><ROW><id>15099341</id><snippet>mergeData</snippet></ROW><ROW><id>15099341</id><snippet>allData = open( "myinput.txt","r" ).read()</snippet></ROW><ROW><id>15099341</id><snippet>.read()</snippet></ROW><ROW><id>15099341</id><snippet>with open( "myinput.txt","r" ) as mergeData:
    allData = mergeData.read()
</snippet></ROW><ROW><id>15099341</id><snippet>.close()</snippet></ROW><ROW><id>15099341</id><snippet>mergeData</snippet></ROW><ROW><id>15099341</id><snippet>file.open()</snippet></ROW><ROW><id>15099341</id><snippet>with</snippet></ROW><ROW><id>15099780</id><snippet>os.listdir</snippet></ROW><ROW><id>15099780</id><snippet>EnumProcesses</snippet></ROW><ROW><id>15099780</id><snippet>os.listir</snippet></ROW><ROW><id>15099780</id><snippet>EniumProcesses</snippet></ROW><ROW><id>15099780</id><snippet>self</snippet></ROW><ROW><id>15099780</id><snippet>return</snippet></ROW><ROW><id>15099780</id><snippet>os.listdir</snippet></ROW><ROW><id>15099780</id><snippet>def getLinuxProcess(self):
    try:
        processDirectories = os.listdir(self.PROCESS_DIRECTORY)
    except IOError:
        return []
    return [pid for pid in processDirectories if pid.isdigit()]
</snippet></ROW><ROW><id>15099780</id><snippet>import unittest
from fudge import patched_context
import os
import LinuxProcessClass # class that contains getLinuxProcess method

def test_LinuxProcess(self):
    """Test the logic of our getLinuxProcess.

       We patch os.listdir and return our own list, because os.listdir
       returns a list. We do this so that we can control the output 
       (we test *our* logic, not a built-in library's functionality).
    """

    # Test we can parse our pdis
    fakeProcessIds = ['1', '2', '3']
    with patched_context(os, 'listdir', lamba x: fakeProcessIds):
        myClass = LinuxProcessClass()
        ....
        result = myClass.getLinuxProcess()

        expected = [1, 2, 3]
        self.assertEqual(result, expected)

    # Test we can handle IOERROR
    with patched_context(os, 'listdir', lamba x: raise IOError):
        myClass = LinuxProcessClass()
        ....
        result = myClass.getLinuxProcess()

        expected = []
        self.assertEqual(result, expected)

    # Test we only get pids
    fakeProcessIds = ['1', '2', '3', 'do', 'not', 'parse']
    .....
</snippet></ROW><ROW><id>15099780</id><snippet>def prepareWindowsObjects(self):
    """Create and set up objects needed to get the windows process"
    ...
    Psapi = ctypes.WinDLL('Psapi.dll')
    EnumProcesses = self.Psapi.EnumProcesses
    EnumProcesses.restype = ctypes.wintypes.BOOL

    self.EnumProcessses = EnumProcess
    ...

def getWindowsProcess(self):

    count = 50
    while True:
       .... # Build arguments to EnumProcesses and call enun process
       if self.EnumProcesses(ctypes.byref(processIds),...
       ..
       else:
           return []
</snippet></ROW><ROW><id>15099780</id><snippet>EnumProcesses</snippet></ROW><ROW><id>15099780</id><snippet>count</snippet></ROW><ROW><id>15099780</id><snippet>EnumProcesses</snippet></ROW><ROW><id>15099780</id><snippet>getWindowsProcess</snippet></ROW><ROW><id>15099780</id><snippet>getLinuxProcess</snippet></ROW><ROW><id>15099780</id><snippet>def getWindowsProcesses(self, ...):
   '''Call Windows API function EnumProcesses and
      return the list of processes
   '''
   # ... call EnumProcesses ...
   return listOfProcesses

def getLinuxProcesses(self, ...):
   '''Look in /proc dir and return list of processes'''
   # ... look in /proc ...
   return listOfProcessses
</snippet></ROW><ROW><id>15099780</id><snippet>def getProcesses(...):
   '''Get the processes running.'''
   isLinux = # ... logic for determining OS ...
   if isLinux:
      processes = getLinuxProcesses(...)
   else:
      processes = getWindowsProcesses(...)
   # ... do something with processes, write to log file, etc ...
</snippet></ROW><ROW><id>15099780</id><snippet>from fudge import patched_context
...

def test_getProcesses(self, ...):

     monitor = MonitorTool(..)

     # Patch the method that gets the processes. Whenever it gets called, return
     # our predetermined list.
     originalProcesses = [....pids...]
     with patched_context(monitor, "getLinuxProcesses", lamba x: originalProcesses):
         monitor.getProcesses()
         # ... assert logic is right ...


     # Let's "add" some new processes and test that our logic realizes new 
     # processes were added.
     newProcesses = [...]
     updatedProcesses = originalProcessses + (newProcesses) 
     with patched_context(monitor, "getLinuxProcesses", lamba x: updatedProcesses):
         monitor.getProcesses()
         # ... assert logic caught new processes ...


     # Let's "kill" our new processes and test that our logic can handle it
     with patched_context(monitor, "getLinuxProcesses", lamba x: originalProcesses):
         monitor.getProcesses()
         # ... assert logic caught processes were 'killed' ...
</snippet></ROW><ROW><id>15099894</id><snippet>&gt;&gt;&gt; len(zlib.compress('ab'))
10
</snippet></ROW><ROW><id>15099894</id><snippet>&gt;&gt;&gt; len(zlib.compress('Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit' * 100))
123
</snippet></ROW><ROW><id>15099896</id><snippet>randy = [randint(0, 1) for i in range(x)]
</snippet></ROW><ROW><id>15099896</id><snippet>[someFunc()] * someNum</snippet></ROW><ROW><id>15099896</id><snippet>someFunc()</snippet></ROW><ROW><id>15100033</id><snippet>('Other', {'fields': ('notes')
</snippet></ROW><ROW><id>15100033</id><snippet>('Other', {'fields': ('notes',)
</snippet></ROW><ROW><id>15100063</id><snippet>countries = {}

# ... other code as before

    for row in reader:
        countries[row[0]] = (row[1], row[2])
</snippet></ROW><ROW><id>15100063</id><snippet>for country, (area, population) in countries.iteritems():
    # ... Do stuff with country, area and population
</snippet></ROW><ROW><id>15100063</id><snippet>area, population = countries["USA"]
</snippet></ROW><ROW><id>15100063</id><snippet>class Country(object):

    def __init__(self, name, area, population):
        self.name = name
        self.area = area
        self.population = population
</snippet></ROW><ROW><id>15100063</id><snippet>for row in reader:
    countries[row[0]] = Country(row[0], row[1], row[2])
</snippet></ROW><ROW><id>15100063</id><snippet>country = countries["USA"]
print "Area is: %s" % (country.area,)
</snippet></ROW><ROW><id>15100063</id><snippet>class Country(object):

# ...

    def get_density(self):
        return self.population / self.area
</snippet></ROW><ROW><id>15100102</id><snippet>"news"</snippet></ROW><ROW><id>15100102</id><snippet>"ejournals"</snippet></ROW><ROW><id>15100102</id><snippet>"theses"</snippet></ROW><ROW><id>15100102</id><snippet>"ejournals"</snippet></ROW><ROW><id>15100225</id><snippet>ent = tk.Entry(...)
var = tk.IntVar()
chk = tk.Checkbutton(..., command=lambda e=ent, v=var: self.naccheck(e,v))
</snippet></ROW><ROW><id>15100225</id><snippet>def naccheck(self, entry, var):
    if var.get() == 0:
        entry.configure(state='disabled')
    else:
        entry.configure(state='normal')
</snippet></ROW><ROW><id>15100352</id><snippet>__some_name</snippet></ROW><ROW><id>15100352</id><snippet>_YourClass__some_name</snippet></ROW><ROW><id>15100352</id><snippet>dir()</snippet></ROW><ROW><id>15100352</id><snippet>&gt;&gt;&gt; class MyClass(object):
...     __var = 1
... 
&gt;&gt;&gt; dir(MyClass)
['_MyClass__var', '__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']
</snippet></ROW><ROW><id>15100352</id><snippet>__var</snippet></ROW><ROW><id>15100352</id><snippet>_MyClass__var</snippet></ROW><ROW><id>15100352</id><snippet>&gt;&gt;&gt; class MyClass(object):
...     def __init__(self, val):
...             self._value = val
... 
&gt;&gt;&gt; class MySubclass(object):
...     def __init__(self, val):
...             super(MyClass, self).__init__(val)
...             self._value = val ** 2  #this hides the base class attribute!
... 
</snippet></ROW><ROW><id>15100352</id><snippet>dir</snippet></ROW><ROW><id>15100352</id><snippet>__something__</snippet></ROW><ROW><id>15100669</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; e = 'echo "perp -t ../data/ReviewTest.text | ./eva -b ../data/6.binlm'
&gt;&gt;&gt; subprocess.call(e, shell=true)
</snippet></ROW><ROW><id>15100669</id><snippet>subprocess.call</snippet></ROW><ROW><id>15100669</id><snippet>shell=True</snippet></ROW><ROW><id>15100669</id><snippet>subprocess.call</snippet></ROW><ROW><id>15100925</id><snippet>2|9|4
7|5|3
6|1|8
</snippet></ROW><ROW><id>15101229</id><snippet>g</snippet></ROW><ROW><id>15101229</id><snippet>g</snippet></ROW><ROW><id>15101229</id><snippet>g</snippet></ROW><ROW><id>15101229</id><snippet>teardown_request</snippet></ROW><ROW><id>15101229</id><snippet>before_request</snippet></ROW><ROW><id>15101229</id><snippet>after_request</snippet></ROW><ROW><id>15101234</id><snippet>NSProxy</snippet></ROW><ROW><id>15101234</id><snippet>self = NSPanel.initWithContentRect_styleMask_backing_defer_(rect, NSBorderlessWindowMask, buf, flag)
</snippet></ROW><ROW><id>15101234</id><snippet>self = [NSPanel initWithContentRect:rect 
                          styleMask:NSBorderlessWindowMask
                            backing:buf
                              defer:flag]
</snippet></ROW><ROW><id>15101234</id><snippet>self = [super initWithContentRect:rect 
                        styleMask:NSBorderlessWindowMask
                          backing:buf
                            defer:flag]
</snippet></ROW><ROW><id>15101234</id><snippet>self = super().initWithContentRect_styleMask_backing_defer_(rect, NSBorderlessWindowMask, buf, flag)
</snippet></ROW><ROW><id>15101234</id><snippet>self = super(HUDWindow, self).initWithContentRect_styleMask_backing_defer_(rect, NSBorderlessWindowMask, buf, flag)
</snippet></ROW><ROW><id>15101234</id><snippet>super</snippet></ROW><ROW><id>15101234</id><snippet>super()</snippet></ROW><ROW><id>15101234</id><snippet>super</snippet></ROW><ROW><id>15101234</id><snippet>NSPanel</snippet></ROW><ROW><id>15101234</id><snippet>NSPanel</snippet></ROW><ROW><id>15101234</id><snippet>rect</snippet></ROW><ROW><id>15101234</id><snippet>NSPanel</snippet></ROW><ROW><id>15101234</id><snippet>self</snippet></ROW><ROW><id>15101234</id><snippet>self</snippet></ROW><ROW><id>15101234</id><snippet>self</snippet></ROW><ROW><id>15101234</id><snippet>self</snippet></ROW><ROW><id>15101234</id><snippet>NSPanel</snippet></ROW><ROW><id>15101374</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; data = ['n', 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 82, 83, 84, 85, 86, 87, 88, 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 'n', 178, 179, 180]
&gt;&gt;&gt; [list(g) for k, g in itertools.groupby(data, lambda x: x != 'n') if k]                                                                                                
[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37],
 [82, 83, 84, 85, 86, 87, 88],
 [178, 179, 180]]
</snippet></ROW><ROW><id>15101481</id><snippet>import csv
desiredMonth = 3
with open('people.csv', 'rb') as csvfile:
    content = csv.reader(csvfile, delimiter=',')
    for row in content:
        month = int(row[3].split('/')[1])
        if month == desiredMonth:
            # print the row or store it in a list for later printing
</snippet></ROW><ROW><id>15101481</id><snippet>row</snippet></ROW><ROW><id>15101481</id><snippet>row[3]</snippet></ROW><ROW><id>15101481</id><snippet>split()</snippet></ROW><ROW><id>15101481</id><snippet>[1]</snippet></ROW><ROW><id>15101481</id><snippet>int</snippet></ROW><ROW><id>15101520</id><snippet>cv2.cvtColor(src, code[, dst[, dstCn]])</snippet></ROW><ROW><id>15101520</id><snippet>cv.CvtColor(src, dst, code)</snippet></ROW><ROW><id>15101537</id><snippet>class ObjectResource(ModelResource):

class Meta:
    queryset = Object.objects.all()
    resource_name = 'object'
    filtering = {
        "published": ['gte', 'lte', 'exact'],
        }
link: .../api/v1/object/?format=json&amp;published__gte=2012-02-18&amp;published__lte=2013-02-24
</snippet></ROW><ROW><id>15101551</id><snippet>while True:
    # this will block until at least one socket is ready
    ready_socks,_,_ = select.select(socks, [], []) 
    for sock in ready_socks:
        data, addr = sock.recvfrom(1024) # This is will not block
        print "received message:", data
</snippet></ROW><ROW><id>15101551</id><snippet>select.select()</snippet></ROW><ROW><id>15101641</id><snippet>SIGUSR1</snippet></ROW><ROW><id>15101641</id><snippet>SIGUSR2</snippet></ROW><ROW><id>15101822</id><snippet>PAT_EMAIL = re.compile(r"[0-9A-Za-z._-]+\@[0-9A-Za-z._-]+")
temp_list = []
mymbox = mbox("data.txt")
for email in mymbox.values():
    try:
        from_address = PAT_EMAIL.findall(email["from"])
    except(TypeError):
        print "TypeError!"
    try:
        to_address = PAT_EMAIL.findall(email["to"])
    except(TypeError):
        print "TypeError!"
    for item in from_address:
        temp_list.append(item) #items are added to a temporary list where they are sorted then written to file
</snippet></ROW><ROW><id>15101891</id><snippet>from xml.etree import ElementTree

with open('test.xml', 'rt') as f:
    tree = ElementTree.parse(f)

for node in tree.iter('sequence'):
    sequenceid = node.attrib.get('id')
    name = node.findtext('name')
</snippet></ROW><ROW><id>15101984</id><snippet>cmd</snippet></ROW><ROW><id>15101984</id><snippet>tkinter</snippet></ROW><ROW><id>15101984</id><snippet>cmd</snippet></ROW><ROW><id>15102079</id><snippet>set</snippet></ROW><ROW><id>15102229</id><snippet>for item in row[0]:
    self.wfile.write("%s"% item)
</snippet></ROW><ROW><id>15102229</id><snippet>self.wlfile.write(row[0])
</snippet></ROW><ROW><id>15102229</id><snippet>row[x]</snippet></ROW><ROW><id>15102229</id><snippet>row[2]</snippet></ROW><ROW><id>15102229</id><snippet>self.wlfile.write(row[2].strftime("%Y/%m/%d %H:%M:%s"))
</snippet></ROW><ROW><id>15102233</id><snippet>chmod ugo+rw file1 file2 file3 file4 ...
</snippet></ROW><ROW><id>15102248</id><snippet>try:
    f1()
except NameError as error:  # Change as needed
    print "Error caught:", error  # Or simply "raise", in order to raise the error caught
finally:
    raise Exception("segfault here")
    print "finally"
</snippet></ROW><ROW><id>15102415</id><snippet>map</snippet></ROW><ROW><id>15102415</id><snippet>&gt;&gt;&gt; a = np.array([[np.array([1,2,3]), np.array([2])], [np.array([0,1,2,3,4]), np.array([0,4])]])
&gt;&gt;&gt; vmean = np.vectorize(np.mean)
&gt;&gt;&gt; vmean(a)
array([[ 2.,  2.],
       [ 2.,  2.]])
</snippet></ROW><ROW><id>15102487</id><snippet>id = line.split(' ')[-1]
</snippet></ROW><ROW><id>15102487</id><snippet>outFile.write(rowdata)
</snippet></ROW><ROW><id>15102510</id><snippet>lowercase_with_underscores</snippet></ROW><ROW><id>15102510</id><snippet>CamelCase</snippet></ROW><ROW><id>15102510</id><snippet>FileManager</snippet></ROW><ROW><id>15102510</id><snippet>Pythia</snippet></ROW><ROW><id>15102510</id><snippet>FileManager</snippet></ROW><ROW><id>15102510</id><snippet>self.file_manager</snippet></ROW><ROW><id>15102510</id><snippet>Pythia</snippet></ROW><ROW><id>15102510</id><snippet>FileManager</snippet></ROW><ROW><id>15102510</id><snippet>Pythia</snippet></ROW><ROW><id>15102510</id><snippet>_recursivelyOpen(x)</snippet></ROW><ROW><id>15102510</id><snippet>self.</snippet></ROW><ROW><id>15102510</id><snippet>max</snippet></ROW><ROW><id>15102510</id><snippet>isinstance</snippet></ROW><ROW><id>15102510</id><snippet>Pythia.raw_files[fname]</snippet></ROW><ROW><id>15102510</id><snippet>FileManager</snippet></ROW><ROW><id>15102510</id><snippet>Pythia</snippet></ROW><ROW><id>15102510</id><snippet>raw_files</snippet></ROW><ROW><id>15102510</id><snippet>recurse</snippet></ROW><ROW><id>15102510</id><snippet>True</snippet></ROW><ROW><id>15102510</id><snippet>False</snippet></ROW><ROW><id>15102510</id><snippet>is</snippet></ROW><ROW><id>15102510</id><snippet>==</snippet></ROW><ROW><id>15102869</id><snippet>itertools</snippet></ROW><ROW><id>15102869</id><snippet>groupby()</snippet></ROW><ROW><id>15102869</id><snippet>class Yoga():
    def __init__(self,weekday,name,teacher,description):
        self.weekday=weekday
        self.name=name
        self.teacher=teacher
        self.description=description
    def __str__(self):
        return "%s yoga with %s %s" % (self.name,self.teacher,self.description)
    def __repr__(self):
        return str(self)

# just make up some data to work with
yoga_classes = (Yoga(1,"dynamic","mary","6pm"),
                Yoga(1,"soft","susie","8pm"),
                Yoga(3,"hatha","bob","5pm"),
                Yoga(3,"hot","alice","7pm"))

daylookup = (None,"Monday","Tuesday","Wednesday",
            "Thursday","Friday","Saturday","Sunday")

import itertools
def get_classes():
    weekly_classes = []
    ycsorted = sorted(yoga_classes,key=lambda x: x.weekday)
    for k,g in itertools.groupby(ycsorted,key=lambda x: x.weekday):
        weekly_classes.append((daylookup[k],tuple(g)))
    return weekly_classes

import pprint
pprint.pprint(get_classes())
</snippet></ROW><ROW><id>15102972</id><snippet> </snippet></ROW><ROW><id>15102972</id><snippet>from StringIO import StringIO
import lxml.html as LH
if __name__ == '__main__':
    xml_str = StringIO('&lt;?xml version="1.0" encoding="UTF-8"?&gt;\r\n&lt;!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"&gt;\r\n\r\n&lt;en-note style="word-wrap: break-word; -webkit-nbsp-mode: space; -webkit-line-break: after-white-space;"&gt;\nA really simple example.  Another sentence.\n&lt;/en-note&gt;')
    tree = LH.parse(xml_str)
    print(LH.tostring(tree))
</snippet></ROW><ROW><id>15103083</id><snippet>parser = argparse.ArgumentParser(description="Auto-segments a text based on "
    "the TANGO algorithm (Rie Kubota Ando and Lillian Lee, 'Mostly-Unsupervised "
    "Statistical Segmentation of Japanese Kanji Sequences' (Natural Language "
    "Engineering, 9(2):127-149, 2003)).")
</snippet></ROW><ROW><id>15103134</id><snippet>class TestClass:
    def test_case(self):
        # ...

    def _get_categories(self):
        return [...]
    test_case.get_categories = _get_categories
    del _get_categories
</snippet></ROW><ROW><id>15103249</id><snippet>import re
import urllib2


url = 'http://www.sidley.com/people/results.aspx?lastname=B'
regexp = 'Babb(?!&lt;+?&gt;).+?Jonathan(?!&lt;+?&gt;).+?C(?!&lt;+?&gt;)'

page = urllib2.urlopen(url).read()
re.findall(regexp, page, re.DOTALL)
</snippet></ROW><ROW><id>15103249</id><snippet>Babb</snippet></ROW><ROW><id>15103249</id><snippet>(?!)</snippet></ROW><ROW><id>15103249</id><snippet>.+?&gt;</snippet></ROW><ROW><id>15103249</id><snippet>&lt;+?&gt;</snippet></ROW><ROW><id>15103249</id><snippet>.+?</snippet></ROW><ROW><id>15103249</id><snippet>Jonathan</snippet></ROW><ROW><id>15103249</id><snippet>C</snippet></ROW><ROW><id>15103761</id><snippet>re.findall</snippet></ROW><ROW><id>15103761</id><snippet>re.finditer</snippet></ROW><ROW><id>15103761</id><snippet>&gt;&gt;&gt; re.findall("(([0-9]+)([A-Z]))", "20M10000N80M")
[('20M', '20', 'M'), ('10000N', '10000', 'N'), ('80M', '80', 'M')]
</snippet></ROW><ROW><id>15103761</id><snippet>&gt;&gt;&gt; re.findall("([0-9]+)([A-Z])", "20M10000N80M")
[('20', 'M'), ('10000', 'N'), ('80', 'M')]
</snippet></ROW><ROW><id>15103761</id><snippet>&gt;&gt;&gt; re.findall("([0-9]+|[A-Z])", "20M10000N80M")
['20', 'M', '10000', 'N', '80', 'M']
</snippet></ROW><ROW><id>15103796</id><snippet>&gt;&gt;&gt; a,b = (1,2)
&gt;&gt;&gt; print a
1
&gt;&gt;&gt; print b
2
&gt;&gt;&gt; c, = (3,)
&gt;&gt;&gt; print c
3
&gt;&gt;&gt; d = (4,)
&gt;&gt;&gt; print d
(4,)
</snippet></ROW><ROW><id>15103796</id><snippet>a, = (1,2)
</snippet></ROW><ROW><id>15103796</id><snippet>Python 3.2.3 (v3.2.3:3d0686d90f55, Apr 10 2012, 11:09:56) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a,*rest = (1,2,3)
&gt;&gt;&gt; a
1
&gt;&gt;&gt; rest
[2, 3]
</snippet></ROW><ROW><id>15103875</id><snippet>[[1,2,3],[4,5,6]]</snippet></ROW><ROW><id>15103875</id><snippet>&gt;&gt;&gt; a = [[1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; print a
[[1, 2, 3], [4, 5, 6]]
</snippet></ROW><ROW><id>15103875</id><snippet>&gt;&gt;&gt; a = [[1, 2, 3]]
&gt;&gt;&gt; a.append([4, 5, 6])
&gt;&gt;&gt; a
[[1, 2, 3], [4, 5, 6]]
</snippet></ROW><ROW><id>15103875</id><snippet>&gt;&gt;&gt; a = [[1, 2, 3]]
&gt;&gt;&gt; a[0]
[1, 2, 3]
&gt;&gt;&gt; a.append(a[0])
&gt;&gt;&gt; a
[[1, 2, 3], [1, 2, 3]]
</snippet></ROW><ROW><id>15103875</id><snippet>&gt;&gt;&gt; a[0] is a[1]
True
&gt;&gt;&gt; a[0][0] = 4
&gt;&gt;&gt; a
[[4, 2, 3], [4, 2, 3]]
</snippet></ROW><ROW><id>15103875</id><snippet>list(a[0])</snippet></ROW><ROW><id>15103875</id><snippet>&gt;&gt;&gt; a = [[1, 2, 3]]
&gt;&gt;&gt; a[0]
[1, 2, 3]
&gt;&gt;&gt; a[0] is a[0]
True
&gt;&gt;&gt; list(a[0])
[1, 2, 3]
&gt;&gt;&gt; a[0] is list(a[0])
False
&gt;&gt;&gt; a.append(list(a[0]))
&gt;&gt;&gt; a
[[1, 2, 3], [1, 2, 3]] 
&gt;&gt;&gt; a[0] is a[1]
False
&gt;&gt;&gt; a[0][0] = 4
&gt;&gt;&gt; a
[[4, 2, 3], [1, 2, 3]]
</snippet></ROW><ROW><id>15104000</id><snippet>final = sentence[0].capitalize() , sentence[1:]
</snippet></ROW><ROW><id>15104000</id><snippet>final = [sentence[0].capitalize()] + sentence[1:]
</snippet></ROW><ROW><id>15104000</id><snippet>'single"'</snippet></ROW><ROW><id>15104000</id><snippet>"this\""</snippet></ROW><ROW><id>15104187</id><snippet>wcw</snippet></ROW><ROW><id>15104187</id><snippet>wcw'</snippet></ROW><ROW><id>15104187</id><snippet>'</snippet></ROW><ROW><id>15104187</id><snippet>matchPreviousExpr()</snippet></ROW><ROW><id>15104187</id><snippet>matchPreviousLiteral()</snippet></ROW><ROW><id>15104187</id><snippet>w = Word("ab")
s = w + "c" + matchPreviousExpr(w)
</snippet></ROW><ROW><id>15104187</id><snippet>table_name = Word(alphas, alphanums)
object = Literal("OBJECT") + "=" + table_name + ... +
  Literal("END_OBJECT") + "=" +matchPreviousExpr(table_name)
</snippet></ROW><ROW><id>15104285</id><snippet>some_string = "this will " "be one string"
</snippet></ROW><ROW><id>15104285</id><snippet>+</snippet></ROW><ROW><id>15104285</id><snippet>bad_uber_string = '&lt;(us-patent-grant)' + attribute_pattern + '&gt;(.*?)(&lt;/\1&gt;)'
</snippet></ROW><ROW><id>15104308</id><snippet>utf8_encode</snippet></ROW><ROW><id>15104308</id><snippet>&lt;?php

$filename = 'images/'.$_POST['filename'];

$fp = fopen($filename, 'wb');
fwrite($fp, base64_decode($_POST['image']));
fclose($fp);

?&gt;
</snippet></ROW><ROW><id>15104444</id><snippet>&gt;&gt;&gt; import gmpy2                                                                                                                  
&gt;&gt;&gt; gmpy2.set_context(gmpy2.ieee(32))
&gt;&gt;&gt; ctx=gmpy2.get_context()
&gt;&gt;&gt; ctx
context(precision=24, real_prec=Default, imag_prec=Default,
        round=RoundToNearest, real_round=Default, imag_round=Default,
        emax=128, emin=-148,
        subnormalize=True,
        trap_underflow=False, underflow=False,
        trap_overflow=False, overflow=False,
        trap_inexact=False, inexact=False,
        trap_invalid=False, invalid=False,
        trap_erange=False, erange=False,
        trap_divzero=False, divzero=False,
        trap_expbound=False,
        allow_complex=False)
&gt;&gt;&gt; gmpy2.const_pi().digits(2)
('110010010000111111011011', 2, 24)
&gt;&gt;&gt; ctx.round=gmpy2.RoundDown
&gt;&gt;&gt; gmpy2.const_pi().digits(2)
('110010010000111111011010', 2, 24)
&gt;&gt;&gt; ctx.round=gmpy2.RoundUp
&gt;&gt;&gt; gmpy2.const_pi().digits(2)
('110010010000111111011011', 2, 24)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15104820</id><snippet>window.getShell().setText( 'Custom shell text' )
</snippet></ROW><ROW><id>15104820</id><snippet>customWindowTitles.eclipse.js</snippet></ROW><ROW><id>15104820</id><snippet>Packages.org.eclipse.ui.PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().setText('Foo');</snippet></ROW><ROW><id>15104820</id><snippet>Alt+R</snippet></ROW><ROW><id>15104877</id><snippet>import networkx as nx
G = nx.Graph()
# build your Graph
# G.add_node(), G.add_nodes_from(), G.add_edge(), G.add_edges_from()...

nodes = [(g, G.degree(g)) for g in G.nodes()]
# nodes like this: [(338, 4), (340, 7)...]
# item one is the node, and item two is the edges connected with this node

nodes.sort(key=lambda n: n[1], reverse=True)

# you wanna delete the third node and other nodes which edges at most 5, right?
G.remove_node(nodes[2][1])
for n, e in nodes:
    if e &gt; 5:
        G.remove_node(n)
</snippet></ROW><ROW><id>15104877</id><snippet>from collections import Counter

sources = []
for edge in edges:
    source.append(edge['source'])
    source.append(edge['target'])

sources_count = Counter(sources)
sources_count = sorted(source_count.items(), key=lambda s: s[1], reverse=True)

sources_count.pop(2)
valid_nodes = filter(lambda s: s[1] &lt;= 5, sources_count)

link_list = filter(
    lambda e: e['source'] not in valid_nodes and e['target'] not in valid_nodes, 
    edges
)
</snippet></ROW><ROW><id>15105014</id><snippet>virtualenv --system-site-packages
</snippet></ROW><ROW><id>15105149</id><snippet>defaultdict</snippet></ROW><ROW><id>15105149</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; items = [['food','fish'],['food','meat'],['food','veg'],['sports','football']]
&gt;&gt;&gt; for key, value in items:
...     d[key].append(value)
...     
&gt;&gt;&gt; [[key] + values for key, values in d.items()]
    [['food', 'fish', 'meat', 'veg'], ['sports', 'football']]
</snippet></ROW><ROW><id>15105924</id><snippet>j += 1
if j == 9:
  return True
</snippet></ROW><ROW><id>15105924</id><snippet>if</snippet></ROW><ROW><id>15105924</id><snippet>j += 1</snippet></ROW><ROW><id>15105924</id><snippet>if (++j == 9):
    return True
</snippet></ROW><ROW><id>15106152</id><snippet>python3.3-config --cflags</snippet></ROW><ROW><id>15106152</id><snippet>python3.3-config --ldflags</snippet></ROW><ROW><id>15106152</id><snippet>clang -v einformer.c -o einformer $(python3.3-config --cflags) $(python3.3-config --ldflags)
</snippet></ROW><ROW><id>15106548</id><snippet>decorator(func)</snippet></ROW><ROW><id>15106548</id><snippet>func</snippet></ROW><ROW><id>15106548</id><snippet>decorator(func)</snippet></ROW><ROW><id>15106548</id><snippet>func = decorator(func)</snippet></ROW><ROW><id>15106548</id><snippet>func</snippet></ROW><ROW><id>15106620</id><snippet>mylist = re.findall(r'''(?x)                    # verbose mode
                        &lt;span\ info=".+&lt;/span&gt;| # allows you to comment the regex
                        Name:\ .+&lt;br&gt;|          # for even better readability
                        &lt;span\ id="Phone"\ info="phonenumber"&gt;.+&lt;/span&gt;''', file)
</snippet></ROW><ROW><id>15106806</id><snippet>pow</snippet></ROW><ROW><id>15107041</id><snippet>import re

pattern = re.compile(r'\b(?:' + '|'.join(re.escape(s) for s in seed) + r')\b')
pattern.findall(line)
</snippet></ROW><ROW><id>15107041</id><snippet>\b</snippet></ROW><ROW><id>15107041</id><snippet>&gt;&gt;&gt; for line in docs:
...     print pattern.findall(line)
... 
['words with spaces', 'bar']
['foo', 'bar']
['bar', 'bar']
[]
[]
</snippet></ROW><ROW><id>15107138</id><snippet>flask.jsonify</snippet></ROW><ROW><id>15107138</id><snippet>dict</snippet></ROW><ROW><id>15107138</id><snippet>dict</snippet></ROW><ROW><id>15107138</id><snippet>@app.route('/')
def hello_world():
    # note key is an int, not just a string with leading digits
    # in your case this could be a mongodb object
    return jsonify({1: {'name': 'bob'}})
</snippet></ROW><ROW><id>15107138</id><snippet>{
  "1": {
    "name": "bob"
  }
}
</snippet></ROW><ROW><id>15107360</id><snippet>{% macro input(name, value='', type='text', size=20) -%}
    &lt;input type="{{ type }}" name="{{ name }}" value="{{value|e }}" size="{{ size }}"&gt;
{%- endmacro %}


&lt;p&gt;{{ input('username') }}&lt;/p&gt;
&lt;p&gt;{{ input('password', type='password') }}&lt;/p&gt;
</snippet></ROW><ROW><id>15107544</id><snippet>cmd.exe</snippet></ROW><ROW><id>15107544</id><snippet>python</snippet></ROW><ROW><id>15107544</id><snippet>pip install ...</snippet></ROW><ROW><id>15108096</id><snippet>Popen</snippet></ROW><ROW><id>15108096</id><snippet>.wait()</snippet></ROW><ROW><id>15108096</id><snippet>subprocess.call()</snippet></ROW><ROW><id>15108096</id><snippet>subprocess.check_call()</snippet></ROW><ROW><id>15108096</id><snippet>check_</snippet></ROW><ROW><id>15108096</id><snippet>call()</snippet></ROW><ROW><id>15108096</id><snippet>exit_codes = [p.wait() for p in p1, p2]
</snippet></ROW><ROW><id>15108109</id><snippet>showopen</snippet></ROW><ROW><id>15108109</id><snippet>update_grp = User_Groups.objects.get(user_id=request.user.id)
    showopen = update_grp.profilegroup
    print showopen
    #..
</snippet></ROW><ROW><id>15108274</id><snippet>try:
  ratings = restDOM.by_id("RestPopLabel_ReviewsFormat")[0].attributes
  ratings = ratings['title']
except TypeError:
  ratings = 'not available'
</snippet></ROW><ROW><id>15108774</id><snippet>xmpp.Client('gmail.com')</snippet></ROW><ROW><id>15108774</id><snippet>username = 'randomtest603'
</snippet></ROW><ROW><id>15109205</id><snippet>with open('filename.txt', 'r') as f:
    numbers = [float(x.strip()) for x in f]
</snippet></ROW><ROW><id>15109265</id><snippet>X-Content-Duration</snippet></ROW><ROW><id>15109265</id><snippet>Content-length</snippet></ROW><ROW><id>15109397</id><snippet>dict1</snippet></ROW><ROW><id>15109397</id><snippet>rev = {v:k for k,vs in dict1.iteritems() for v in vs}
</snippet></ROW><ROW><id>15109397</id><snippet>rev</snippet></ROW><ROW><id>15109397</id><snippet>{'Hardness': 'Hard',
 'Hardy': 'Hard',
 'Hardy Boys': 'Hard',
 'Johnny': 'John',
 'Ron': 'Ron',
 'Ronald': 'Ron',
 'Ronaldo': 'Ron',
 'Ronny': 'Ron',
 'john': 'John',
 'johnny Bravo': 'John'}
</snippet></ROW><ROW><id>15109397</id><snippet>dict2</snippet></ROW><ROW><id>15109397</id><snippet>resultant_dict = {rev[k]:v for k,v in dict2.iteritems()}
</snippet></ROW><ROW><id>15109397</id><snippet>{'John': ['Canada', 'Ottawa'], 'Ron': ['America', 'New York']}
</snippet></ROW><ROW><id>15109506</id><snippet>d = {'a': 1, 'b': 2, 'c': 3, 'd': 4 }
l = ['a', 'd']

new_d = {k:d[k] for k in l}
</snippet></ROW><ROW><id>15109506</id><snippet>new_d</snippet></ROW><ROW><id>15109506</id><snippet>{'a': 1, 'd': 4}</snippet></ROW><ROW><id>15109633</id><snippet>.partition()</snippet></ROW><ROW><id>15109633</id><snippet> &gt;&gt;&gt; '1+1'.partition('*')
 ('1+1', '', '')
</snippet></ROW><ROW><id>15109633</id><snippet>s.partition('*')</snippet></ROW><ROW><id>15109633</id><snippet>ret()</snippet></ROW><ROW><id>15109633</id><snippet>ret(parts[0]) * ret(parts[2])</snippet></ROW><ROW><id>15109633</id><snippet>*</snippet></ROW><ROW><id>15109633</id><snippet>s</snippet></ROW><ROW><id>15109633</id><snippet>.partition()</snippet></ROW><ROW><id>15109633</id><snippet>for c in ('+','-','*','/'):
    parts = s.partition(c)
    if parts[1] == '*':
        return ret(parts[0]) * ret(parts[2])
    elif parts[1] == '/':
        return ret(parts[0]) / ret(parts[2])
    elif parts[1] == '+':
        return ret(parts[0]) + ret(parts[2])
    elif parts[1] == '-':
        return ret(parts[0]) - ret(parts[2])
</snippet></ROW><ROW><id>15109633</id><snippet>.partition()</snippet></ROW><ROW><id>15109633</id><snippet>for c in ('+','-','*','/'):
    left, operator, right = s.partition(c)
    if operator == '*':
        return ret(left) * ret(right)
    elif operator == '/':
        return ret(left) / ret(right)
    elif operator == '+':
        return ret(left) + ret(right)
    elif operator == '-':
        return ret(left) - ret(right)
</snippet></ROW><ROW><id>15109633</id><snippet>operator</snippet></ROW><ROW><id>15109633</id><snippet>import operator
ops = {'*': operator.mul, '/': operator.div, '+': operator.add, '-': operator.sub}

for c in ('+','-','*','/'):
    left, operator, right = s.partition(c)
    if operator in ops:
        return ops[operator](ret(left), ret(right))
</snippet></ROW><ROW><id>15109660</id><snippet>import sys
sys.path.append("/tmp/TEST")
</snippet></ROW><ROW><id>15109660</id><snippet>import sys
import time
while True:
  print sys.path
  time.sleep(1)
</snippet></ROW><ROW><id>15109660</id><snippet>python loop.py &amp;</snippet></ROW><ROW><id>15109660</id><snippet>python set.py</snippet></ROW><ROW><id>15109660</id><snippet>loop.py</snippet></ROW><ROW><id>15109660</id><snippet>set.py</snippet></ROW><ROW><id>15109660</id><snippet>loop.py</snippet></ROW><ROW><id>15109660</id><snippet>sys.path.append...</snippet></ROW><ROW><id>15109733</id><snippet>#-*- coding: utf-8 -*-
import csv
# Use of tempfile instead of hard-coded path, to be cross-platform :)
import tempfile
_, tmppath = tempfile.mkstemp()
out = open(tmppath, 'w')
writer = csv.writer(out)
input = "Te×t Ðåtå".decode('utf-8')
tup = (input.encode('utf-8'), 42, False)
tup
# OUT: ('Te\xc3\x97t \xc3\x90\xc3\xa5t\xc3\xa5', 42, False)
writer.writerow(tup)
out.close()
print(u"Look at me : {}".format(tmppath))
</snippet></ROW><ROW><id>15109775</id><snippet>serverlist</snippet></ROW><ROW><id>15109775</id><snippet>print('Connecting with "%s"...' % (line))
</snippet></ROW><ROW><id>15109775</id><snippet>hostname = line.strip()
print('Connecting with "%s"...' % (hostname))
s.connect(hostname, 22, username.strip(), passwd.strip())
</snippet></ROW><ROW><id>15109775</id><snippet>username</snippet></ROW><ROW><id>15109775</id><snippet>passwd</snippet></ROW><ROW><id>15109775</id><snippet>strip()</snippet></ROW><ROW><id>15109775</id><snippet>rstrip()</snippet></ROW><ROW><id>15109783</id><snippet>import numpy as np
mydata = np.genfromtext(filename, delimiter=",")
</snippet></ROW><ROW><id>15109783</id><snippet>import pandas as pd
mydata = pd.read_csv(filename)
target = mydata["Label"]  #provided your csv has header row, and the label column is named "Label"

#select all but the last column as data
data = mydata.ix[:,:-1]
</snippet></ROW><ROW><id>15109975</id><snippet>subprocess</snippet></ROW><ROW><id>15109975</id><snippet>args</snippet></ROW><ROW><id>15109975</id><snippet>args</snippet></ROW><ROW><id>15109975</id><snippet>args</snippet></ROW><ROW><id>15109975</id><snippet>args</snippet></ROW><ROW><id>15109975</id><snippet>shell</snippet></ROW><ROW><id>15109975</id><snippet>executable</snippet></ROW><ROW><id>15109975</id><snippet>args</snippet></ROW><ROW><id>15109975</id><snippet>shell</snippet></ROW><ROW><id>15109975</id><snippet>args</snippet></ROW><ROW><id>15109975</id><snippet>shell=False</snippet></ROW><ROW><id>15109975</id><snippet>args</snippet></ROW><ROW><id>15109975</id><snippet>args</snippet></ROW><ROW><id>15109975</id><snippet>CreateProcess()</snippet></ROW><ROW><id>15109975</id><snippet>shell=True</snippet></ROW><ROW><id>15109975</id><snippet>shell=True</snippet></ROW><ROW><id>15109975</id><snippet>/bin/sh</snippet></ROW><ROW><id>15109975</id><snippet>args</snippet></ROW><ROW><id>15109975</id><snippet>shell=True</snippet></ROW><ROW><id>15109975</id><snippet>COMSPEC</snippet></ROW><ROW><id>15109975</id><snippet>shell=True</snippet></ROW><ROW><id>15109975</id><snippet>dir</snippet></ROW><ROW><id>15109975</id><snippet>copy</snippet></ROW><ROW><id>15109975</id><snippet>shell=True</snippet></ROW><ROW><id>15110319</id><snippet>class MacroInput(object):
    def __init__(self, protein, carb, fat):
        self.protein, self.carb, self.fat = protein, carb, fat

    def sum(self):
        return self.protein + self.carb + self.fat
</snippet></ROW><ROW><id>15110319</id><snippet>Macro_input()</snippet></ROW><ROW><id>15110319</id><snippet>def Total_macro_check(Macro_sum)</snippet></ROW><ROW><id>15110319</id><snippet>def Total_macro_check(input):
    sum = input.sum()
    if sum == 100:
        print "You macronutrients percentages are \n Protein:", input.protein, "%"    #list for P/C/F --&gt; %d
    ...
</snippet></ROW><ROW><id>15110548</id><snippet>Python 3.3.0 (v3.3.0:bd8afb90ebf2, Sep 29 2012, 10:57:17) [MSC v.1600 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import re
&gt;&gt;&gt; rawdata="""&lt;select name="F4542661421192HPAUS" onchange="liftAjax.lift_ajaxHandler('F4542661421185WLRZY=' + encodeURIComponent(this.value), null, null, null)"&gt;[... blabla ...]&lt;/select&gt;"""
&gt;&gt;&gt; re.search("ajaxHandler\('(?P&lt;fp&gt;[A-Z0-9]+)",rawdata).group("fp")
'F4542661421185WLRZY'
</snippet></ROW><ROW><id>15110722</id><snippet>In [7]: import collections
In [10]: count = collections.Counter(zip(l1,l2))

In [11]: count
Out[11]: Counter({('l', 't'): 2, ('k', 'h'): 2, ('s', 't'): 1, ('t', 's'): 1, ('k', 's'): 1})
</snippet></ROW><ROW><id>15110722</id><snippet>collection.Counter</snippet></ROW><ROW><id>15110722</id><snippet>dict</snippet></ROW><ROW><id>15110722</id><snippet>dict</snippet></ROW><ROW><id>15110722</id><snippet>elements</snippet></ROW><ROW><id>15110722</id><snippet>most_common</snippet></ROW><ROW><id>15110722</id><snippet>subtract</snippet></ROW><ROW><id>15110722</id><snippet>l1 = ['k', 'l', 'k', 's', 'l', 't', 'k']
l2 = ['h', 't', 'h', 't', 't', 's', 's']
tupleList = zip(l1,l2)
myDict = {}
for item in tupleList:
    if item in myDict:
        myDict[ item ] += 1
    else:
        myDict[ item ] = 1
print(myDict)       
</snippet></ROW><ROW><id>15110722</id><snippet>dict</snippet></ROW><ROW><id>15110722</id><snippet>for item in tupleList:
    myDict[item] = myDict.get(item, 0) + 1
</snippet></ROW><ROW><id>15110722</id><snippet>myDict = collections.defaultdict(int)
for item in tupleList:
    myDict[item] += 1
</snippet></ROW><ROW><id>15111168</id><snippet>getent passwd | grep &lt;UID&gt; | awk -F: '{ print $1; }'
</snippet></ROW><ROW><id>15111168</id><snippet>ps</snippet></ROW><ROW><id>15111168</id><snippet>top</snippet></ROW><ROW><id>15111278</id><snippet>hstack()</snippet></ROW><ROW><id>15111278</id><snippet>vstack()</snippet></ROW><ROW><id>15111278</id><snippet>numpy.array()</snippet></ROW><ROW><id>15111278</id><snippet>numpy.frombuffer()</snippet></ROW><ROW><id>15111278</id><snippet>numpy.fromiter()</snippet></ROW><ROW><id>15111278</id><snippet>loadtxt()</snippet></ROW><ROW><id>15111340</id><snippet>pid = Popen(["internals/applog.sh",])

while True:
    answer = raw_input("Press Y when you are done: ")
    if answer == 'Y':
        pid.kill()
        break
</snippet></ROW><ROW><id>15111348</id><snippet>python script.py &gt;&gt; /logdir/script.py.log 2&gt;&amp;1
</snippet></ROW><ROW><id>15111427</id><snippet>yield</snippet></ROW><ROW><id>15111427</id><snippet>yield</snippet></ROW><ROW><id>15111427</id><snippet>yield</snippet></ROW><ROW><id>15111427</id><snippet>yield</snippet></ROW><ROW><id>15111427</id><snippet>neighbors</snippet></ROW><ROW><id>15111427</id><snippet>neighbors(position)</snippet></ROW><ROW><id>15111427</id><snippet>next()</snippet></ROW><ROW><id>15111427</id><snippet>yield</snippet></ROW><ROW><id>15111427</id><snippet>x, y = point</snippet></ROW><ROW><id>15111427</id><snippet>x + 1, y</snippet></ROW><ROW><id>15111427</id><snippet>yield</snippet></ROW><ROW><id>15111427</id><snippet>x - 1, y</snippet></ROW><ROW><id>15111427</id><snippet>set(itertools.chain(*map(neighbors, board)))</snippet></ROW><ROW><id>15111427</id><snippet>map(neighbors, board)</snippet></ROW><ROW><id>15111427</id><snippet>board</snippet></ROW><ROW><id>15111427</id><snippet>neighbors</snippet></ROW><ROW><id>15111427</id><snippet>neighbors()</snippet></ROW><ROW><id>15111427</id><snippet>*parameter</snippet></ROW><ROW><id>15111427</id><snippet>parameter</snippet></ROW><ROW><id>15111427</id><snippet>parameter</snippet></ROW><ROW><id>15111427</id><snippet>param = [1, 2, 3]; foo(*param)</snippet></ROW><ROW><id>15111427</id><snippet>foo(1, 2, 3)</snippet></ROW><ROW><id>15111427</id><snippet>itertools.chain(*map(..))</snippet></ROW><ROW><id>15111427</id><snippet>itertools.chain()</snippet></ROW><ROW><id>15111427</id><snippet>positions = set()
for board_position in board:
    for neighbor in neighbors(board):
        positions.add(neighbor)
</snippet></ROW><ROW><id>15111427</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>15111427</id><snippet>map()</snippet></ROW><ROW><id>15111427</id><snippet>.from_iterable()</snippet></ROW><ROW><id>15111427</id><snippet>map()</snippet></ROW><ROW><id>15111427</id><snippet>map()</snippet></ROW><ROW><id>15111907</id><snippet>&gt;&gt;&gt; mylist = [['zzz', 100], ['sss', 100], ['555',100], ['222',100], ['333',90]]
&gt;&gt;&gt; sorted(mylist, key = lambda e: (-e[1], e[0]))
[['222', 100], ['555', 100], ['sss', 100], ['zzz', 100], ['333', 90]]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15112264</id><snippet>df.values.T.tolist()
</snippet></ROW><ROW><id>15112461</id><snippet>class History(Article, IHasAttachments):
    date = DateField(default=datetime.date.today)
</snippet></ROW><ROW><id>15112563</id><snippet>P(y|X) = 1 / (1 + exp(A * f(X) + B))
</snippet></ROW><ROW><id>15112563</id><snippet>f(X)</snippet></ROW><ROW><id>15112563</id><snippet>decision_function</snippet></ROW><ROW><id>15112563</id><snippet>B</snippet></ROW><ROW><id>15112563</id><snippet>f</snippet></ROW><ROW><id>15112563</id><snippet>f(X) = 10</snippet></ROW><ROW><id>15112563</id><snippet>X</snippet></ROW><ROW><id>15112563</id><snippet>B = -9.9</snippet></ROW><ROW><id>15112563</id><snippet>A = 1</snippet></ROW><ROW><id>15112563</id><snippet>P(y|X) = .475</snippet></ROW><ROW><id>15112563</id><snippet>probability=True</snippet></ROW><ROW><id>15112879</id><snippet>class WidgetAdmin(admin.ModelAdmin):
    def list_view(self, request):
        widget = Widget.objects.all()[0]
        return HttpResponseRedirect('/admin/my_site/widget/%s' % widget.id)

    def get_urls(self):
        from django.conf.urls.defaults import *
        urls = super(WidgetAdmin, self).get_urls()
        my_urls = patterns('',
                    (r'^$', admin.site.admin_view(self.list_view))
                )
        return my_urls + urls
</snippet></ROW><ROW><id>15112957</id><snippet>P.ylabel("$\\sin{(x)}$", labelpad=20)
</snippet></ROW><ROW><id>15112957</id><snippet>P.ylabel("$\\cos{(x)}\cdot{}10^4$", labelpad=20)
</snippet></ROW><ROW><id>15112957</id><snippet>ax.yaxis.labelpad = 20
</snippet></ROW><ROW><id>15112957</id><snippet>y</snippet></ROW><ROW><id>15112957</id><snippet>y</snippet></ROW><ROW><id>15112957</id><snippet>y</snippet></ROW><ROW><id>15112957</id><snippet>from matplotlib.ticker import FuncFormatter

def thousands(x, pos):
    'The two args are the value and tick position'
    return '%4.1f' % (x*1e-3)

formatter = FuncFormatter(thousands)

ax = fig.add_subplot(211)
ax.yaxis.set_major_formatter(formatter)
</snippet></ROW><ROW><id>15112957</id><snippet>y</snippet></ROW><ROW><id>15112957</id><snippet>y</snippet></ROW><ROW><id>15112957</id><snippet>thousands()</snippet></ROW><ROW><id>15112957</id><snippet>ax.yaxis.set_label_coords(0.5, 0.5)
</snippet></ROW><ROW><id>15113013</id><snippet>type("4", KeyModifier.CMD+KeyModifier.SHIFT)
</snippet></ROW><ROW><id>15113013</id><snippet>import shutil
import os
screenshotsDir = "absolute-path-to-a-folder"
img = capture(some_region)
shutil.move(img, os.path.join(screenshotsDir, "some-name.png"))
</snippet></ROW><ROW><id>15113013</id><snippet>some_region = SCREEN # for whole screen
</snippet></ROW><ROW><id>15113013</id><snippet>someRegion = App.focusedWindow() # for the frontmost window
</snippet></ROW><ROW><id>15113606</id><snippet>apply</snippet></ROW><ROW><id>15113606</id><snippet>cumsum</snippet></ROW><ROW><id>15113606</id><snippet>def cumulative_ols(
                   data_frame,
                   lhs_column,
                   rhs_column,
                   date_column,
                   min_obs=60,
                  ):
    """
    Function to perform a cumulative OLS on a Pandas data frame. It is
    meant to be used with `apply` after grouping the data frame by categories
    and sorting by date, so that the regression below applies to the time
    series of a single category's data and the use of `cumsum` will work    
    appropriately given sorted dates. It is also assumed that the date 
    conventions of the left-hand-side and right-hand-side variables have been 
    arranged by the user to match up with any lagging conventions needed.

    This OLS is implicitly univariate and relies on the simplification to the
    formula:

    Cov(x,y) ~ (1/n)*sum(x*y) - (1/n)*sum(x)*(1/n)*sum(y)
    Var(x)   ~ (1/n)*sum(x^2) - ((1/n)*sum(x))^2
    beta     ~ Cov(x,y) / Var(x)

    and the code makes a further simplification be cancelling one factor 
    of (1/n).

    Notes: one easy improvement is to change the date column to a generic sort
    column since there's no special reason the regressions need to be time-
    series specific.
    """
    data_frame["xy"]         = (data_frame[lhs_column] * data_frame[rhs_column]).fillna(0.0)
    data_frame["x2"]         = (data_frame[rhs_column]**2).fillna(0.0)
    data_frame["yobs"]       = data_frame[lhs_column].notnull().map(int)
    data_frame["xobs"]       = data_frame[rhs_column].notnull().map(int)
    data_frame["cum_yobs"]   = data_frame["yobs"].cumsum()
    data_frame["cum_xobs"]   = data_frame["xobs"].cumsum()
    data_frame["cumsum_xy"]  = data_frame["xy"].cumsum()
    data_frame["cumsum_x2"]  = data_frame["x2"].cumsum()
    data_frame["cumsum_x"]   = data_frame[rhs_column].fillna(0.0).cumsum()
    data_frame["cumsum_y"]   = data_frame[lhs_column].fillna(0.0).cumsum()
    data_frame["cum_cov"]    = data_frame["cumsum_xy"] - (1.0/data_frame["cum_yobs"])*data_frame["cumsum_x"]*data_frame["cumsum_y"]
    data_frame["cum_x_var"]  = data_frame["cumsum_x2"] - (1.0/data_frame["cum_xobs"])*(data_frame["cumsum_x"])**2
    data_frame["FactorBeta"] = data_frame["cum_cov"]/data_frame["cum_x_var"]
    data_frame["FactorBeta"][data_frame["cum_yobs"] &lt; min_obs] = np.NaN
    return data_frame[[date_column, "FactorBeta"]].set_index(date_column)
### End cumulative_ols
</snippet></ROW><ROW><id>15113606</id><snippet>linalg.lstsq</snippet></ROW><ROW><id>15113640</id><snippet>parser.add_argument('-b',help='Specify length of the district code')   
businessformat=args.d 
businessformat=businessformat.strip() 

df2['business_code']=df2['business_code'].apply(lambda x: str(x)) 

def formatBusinessCodes(code): 
bus=code bus.zfill(4) 
return bus 

formatBusinessCodes(businessformat)  
</snippet></ROW><ROW><id>15114062</id><snippet>__len__()</snippet></ROW><ROW><id>15114062</id><snippet>len()</snippet></ROW><ROW><id>15114062</id><snippet>__len__</snippet></ROW><ROW><id>15114062</id><snippet>len()</snippet></ROW><ROW><id>15114062</id><snippet>.len</snippet></ROW><ROW><id>15114062</id><snippet>self.data</snippet></ROW><ROW><id>15114062</id><snippet>.__len__()</snippet></ROW><ROW><id>15114062</id><snippet>class foo(object):
    def __init__(self, obs=None):
        if obs is None:  # provide a default if no list was passed in.
            obs = []
        self.data = obs
        self.max = max(obs)
        self.min = min(obs)
        self._data_len = len(obs)

    def __len__(self):
        return self._data_len
</snippet></ROW><ROW><id>15114368</id><snippet>f = 32.4321413432
i = 34121
print('float {ff:&gt;20.4f} and integer {ii:&gt;10}'.format(ff=f, ii=i))
</snippet></ROW><ROW><id>15114368</id><snippet>float              32.4321 and integer      34121
</snippet></ROW><ROW><id>15114440</id><snippet>subset = objects[(param1&gt;10) &amp; (param2-param3&gt;5) &amp; (param2-param3&lt;6) &amp; (param4==1)]
</snippet></ROW><ROW><id>15114896</id><snippet>value_at_index = dic.values()[index]
</snippet></ROW><ROW><id>15114952</id><snippet>from __future__ import division

import numpy as np


def find_transition_times(t, y, threshold):
    """
    Given the input signal `y` with samples at times `t`,
    find the times where `y` increases through the value `threshold`.

    `t` and `y` must be 1-D numpy arrays.

    Linear interpolation is used to estimate the time `t` between
    samples at which the transitions occur.
    """
    # Find where y crosses the threshold (increasing).
    lower = y &lt; threshold
    higher = y &gt;= threshold
    transition_indices = np.where(lower[:-1] &amp; higher[1:])[0]

    # Linearly interpolate the time values where the transition occurs.
    t0 = t[transition_indices]
    t1 = t[transition_indices + 1]
    y0 = y[transition_indices]
    y1 = y[transition_indices + 1]
    slope = (y1 - y0) / (t1 - t0)
    transition_times = t0 + (threshold - y0) / slope

    return transition_times


def periods(t, y, threshold):
    """
    Given the input signal `y` with samples at times `t`,
    find the time periods between the times at which the
    signal `y` increases through the value `threshold`.

    `t` and `y` must be 1-D numpy arrays.
    """
    transition_times = find_transition_times(t, y, threshold)
    deltas = np.diff(transition_times)
    return deltas


if __name__ == "__main__":
    import matplotlib.pyplot as plt

    # Time samples
    t = np.linspace(0, 50, 501)
    # Use a noisy time to generate a noisy y.
    tn = t + 0.05 * np.random.rand(t.size)
    y = 0.6 * ( 1 + np.sin(tn) + (1./3) * np.sin(3*tn) + (1./5) * np.sin(5*tn) +
               (1./7) * np.sin(7*tn) + (1./9) * np.sin(9*tn))

    threshold = 0.5
    deltas = periods(t, y, threshold)
    print "Measured periods at threshold %g:" % threshold
    print deltas
    print "Min:  %.5g" % deltas.min()
    print "Max:  %.5g" % deltas.max()
    print "Mean: %.5g" % deltas.mean()
    print "Std dev: %.5g" % deltas.std()

    trans_times = find_transition_times(t, y, threshold)

    plt.plot(t, y)
    plt.plot(trans_times, threshold * np.ones_like(trans_times), 'ro-')
    plt.show()
</snippet></ROW><ROW><id>15114952</id><snippet>Measured periods at threshold 0.5:
[ 6.29283207  6.29118893  6.27425846  6.29580066  6.28310224  6.30335003]
Min:  6.2743
Max:  6.3034
Mean: 6.2901
Std dev: 0.0092793
</snippet></ROW><ROW><id>15114952</id><snippet>numpy.histogram</snippet></ROW><ROW><id>15114952</id><snippet>matplotlib.pyplot.hist</snippet></ROW><ROW><id>15114952</id><snippet>periods(t, y, threshold)</snippet></ROW><ROW><id>15115149</id><snippet>#!/bin/bash
printf "a\tz\nb\ty\nc\tx" | sort -k 2 -t $'\t'
</snippet></ROW><ROW><id>15115149</id><snippet>#!/usr/bin/env python
import random
import sys
from itertools import chain, groupby

def choose_random(iterator, fraction, random=random.random):
    """Lazy analog of:

        L = list(iterator)
        k = int(len(L) * fraction + .5) or 1 # get at least one
        result = random.sample(L, k)

    Note: this function doesn't randomize the order of elements
          that would require to keep selected elements in memory
          and number of output elements is not exactly k
    """
    # always yield at least one item if input is not empty
    item = next(iterator)
    it = (x for x in chain([item], iterator) if random() &lt; fraction)
    for x in chain([next(it, item)], it):
        yield x

def getkey(line):
    return line.split("\t")[1] # 2nd column

for key, group in groupby(sys.stdin, key=getkey):
    sys.stdout.writelines(choose_random(group, fraction=0.25))
</snippet></ROW><ROW><id>15115345</id><snippet>'http://192.168.1.61:8080/api/call'
</snippet></ROW><ROW><id>15115345</id><snippet>http://</snippet></ROW><ROW><id>15115345</id><snippet>requests</snippet></ROW><ROW><id>15115431</id><snippet>my_table = [elem for elem in my_table if elem[1:] != ('bananas', 1)]
</snippet></ROW><ROW><id>15115747</id><snippet>pickle</snippet></ROW><ROW><id>15115747</id><snippet>shelve</snippet></ROW><ROW><id>15115747</id><snippet>dict</snippet></ROW><ROW><id>15115747</id><snippet>import shelve

d = shelve.open(filename) # open -- file may get suffix added by low-level
                          # library

d[key] = data   # store data at key (overwrites old data if
                # using an existing key)
data = d[key]   # retrieve a COPY of data at key (raise KeyError if no
                # such key)
del d[key]      # delete data stored at key (raises KeyError
                # if no such key)
flag = key in d        # true if the key exists
klist = list(d.keys()) # a list of all existing keys (slow!)

# as d was opened WITHOUT writeback=True, beware:
d['xx'] = [0, 1, 2]    # this works as expected, but...
d['xx'].append(3)      # *this doesn't!* -- d['xx'] is STILL [0, 1, 2]!

# having opened d without writeback=True, you need to code carefully:
temp = d['xx']      # extracts the copy
temp.append(5)      # mutates the copy
d['xx'] = temp      # stores the copy right back, to persist it

# or, d=shelve.open(filename,writeback=True) would let you just code
# d['xx'].append(5) and have it work as expected, BUT it would also
# consume more memory and make the d.close() operation slower.

d.close()       # close it
</snippet></ROW><ROW><id>15115747</id><snippet>ndbm</snippet></ROW><ROW><id>15115747</id><snippet>gdbm</snippet></ROW><ROW><id>15115747</id><snippet>shelve</snippet></ROW><ROW><id>15115837</id><snippet>.profile</snippet></ROW><ROW><id>15115837</id><snippet>/usr/local/bin/psql</snippet></ROW><ROW><id>15115837</id><snippet>bash</snippet></ROW><ROW><id>15115837</id><snippet>echo $0</snippet></ROW><ROW><id>15115837</id><snippet>tcsh</snippet></ROW><ROW><id>15115837</id><snippet>~/.tcshrc</snippet></ROW><ROW><id>15115837</id><snippet>~/.cshrc</snippet></ROW><ROW><id>15115837</id><snippet>~/.login</snippet></ROW><ROW><id>15115837</id><snippet>setenv PATH=/usr/local/bin:$PATH
</snippet></ROW><ROW><id>15115989</id><snippet>A[1,:]</snippet></ROW><ROW><id>15115989</id><snippet>In [12]: a = csc_matrix([[1,0,0,0],[0,0,10,11],[0,0,0,99]])

In [13]: a.todense()
Out[13]: 
matrix([[ 1,  0,  0,  0],
        [ 0,  0, 10, 11],
        [ 0,  0,  0, 99]])

In [14]: print a[1,:]
  (0, 2)    10
  (0, 3)    11

In [15]: print a
  (0, 0)    1
  (1, 2)    10
  (1, 3)    11
  (2, 3)    99

In [16]: print a[1,:].toarray()
[[ 0  0 10 11]]
</snippet></ROW><ROW><id>15115989</id><snippet>print</snippet></ROW><ROW><id>15115989</id><snippet>In [18]: a[:,3].toarray()
Out[18]: 
array([[ 0],
       [11],
       [99]])

In [19]: print a[:,3]
  (1, 0)    11
  (2, 0)    99

In [20]: a[:,1].toarray()
Out[20]: 
array([[0],
       [0],
       [0]])

In [21]: print a[:,1]
</snippet></ROW><ROW><id>15116150</id><snippet>sys.display_hook</snippet></ROW><ROW><id>15116179</id><snippet>entity.key().id_or_name()
</snippet></ROW><ROW><id>15116179</id><snippet>entity.key.id()
</snippet></ROW><ROW><id>15116273</id><snippet>DatetimeIndex.asof</snippet></ROW><ROW><id>15116273</id><snippet>Series.asof</snippet></ROW><ROW><id>15116273</id><snippet>at_time</snippet></ROW><ROW><id>15116273</id><snippet>In [10]: np.abs(df.time - image_time)
Out[10]: 
0    27 days, 13:39:02
1    26 days, 13:39:02
2    25 days, 13:39:02
3    24 days, 13:39:02
4    23 days, 13:39:02
5    22 days, 13:39:02
</snippet></ROW><ROW><id>15116293</id><snippet>In [12]: s1 = pd.Series(np.random.randint(-10, 10, 5))

In [13]: s2 = pd.Series(np.random.randint(-10, 10, 5))

In [14]: s1.combine(s2, f)
Out[14]:
0    1000
1    1000
2      -2
3    1000
4    1000
Dtype: int64
</snippet></ROW><ROW><id>15116300</id><snippet>while items:
    foo()
</snippet></ROW><ROW><id>15116330</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>15116330</id><snippet>chart_dict</snippet></ROW><ROW><id>15116330</id><snippet>&lt;value&gt;</snippet></ROW><ROW><id>15116330</id><snippet>chart_dict = defaultdict(lambda:defaultdict(lambda:defaultdict(dict)))
</snippet></ROW><ROW><id>15116330</id><snippet>a, b, c = passed_seq
chart_dict[a][b][c].update(err_sub_dict)
</snippet></ROW><ROW><id>15116330</id><snippet>a</snippet></ROW><ROW><id>15116330</id><snippet>b</snippet></ROW><ROW><id>15116330</id><snippet>c</snippet></ROW><ROW><id>15116378</id><snippet>heapq</snippet></ROW><ROW><id>15116378</id><snippet>import heapq

return heapq.nlargest(n, l)        
</snippet></ROW><ROW><id>15116378</id><snippet>n</snippet></ROW><ROW><id>15116378</id><snippet>n</snippet></ROW><ROW><id>15116378</id><snippet>sorted(l)[-n:]</snippet></ROW><ROW><id>15116378</id><snippet>heapq.nlargest()</snippet></ROW><ROW><id>15116378</id><snippet>sorted()</snippet></ROW><ROW><id>15116378</id><snippet>n</snippet></ROW><ROW><id>15116378</id><snippet>len(l)</snippet></ROW><ROW><id>15116378</id><snippet>heapq</snippet></ROW><ROW><id>15116378</id><snippet>heapq.heapify()</snippet></ROW><ROW><id>15116519</id><snippet>data</snippet></ROW><ROW><id>15116519</id><snippet>(Nx1 * Nx2 * Nx3, 6)</snippet></ROW><ROW><id>15116519</id><snippet>data = np.loadtxt('data.txt', dtype=float, delimiter=',')
</snippet></ROW><ROW><id>15116519</id><snippet>f</snippet></ROW><ROW><id>15116519</id><snippet>g</snippet></ROW><ROW><id>15116519</id><snippet>h</snippet></ROW><ROW><id>15116519</id><snippet>f = data[:, 3].reshape(Nx1, Nx2, Nx3)
g = data[:, 4].reshape(Nx1, Nx2, Nx3)
h = data[:, 5].reshape(Nx1, Nx2, Nx3)
</snippet></ROW><ROW><id>15116519</id><snippet>Nx1</snippet></ROW><ROW><id>15116519</id><snippet>Nx2</snippet></ROW><ROW><id>15116519</id><snippet>Nx3</snippet></ROW><ROW><id>15116519</id><snippet>np.unique</snippet></ROW><ROW><id>15116519</id><snippet>Nx1 = np.unique(data[:, 0]).shape[0]
Nx2 = np.unique(data[:, 1]).shape[0]
Nx3 = np.unique(data[:, 2]).shape[0]
</snippet></ROW><ROW><id>15116519</id><snippet>np.unique</snippet></ROW><ROW><id>15116519</id><snippet>Nx1, idx1 = np.unique(data[:, 0], return_inverse=True)
Nx1 = Nx1.shape[0]
Nx2, idx2 = np.unique(data[:, 1], return_inverse=True)
Nx2 = Nx2.shape[1]
Nx3, idx3 = np.unique(data[:, 2], return_inverse=True)
Nx3 = Nx3.shape[0]

f = np.empty((Nx1, Nx2, Nx3))
f[idx1, idx2, idx3] = data[:, 3]
g = np.empty((Nx1, Nx2, Nx3))
g[idx1, idx2, idx3] = data[:, 4]
h = np.empty((Nx1, Nx2, Nx3))
h[idx1, idx2, idx3] = data[:, 5]
</snippet></ROW><ROW><id>15116519</id><snippet>f</snippet></ROW><ROW><id>15116519</id><snippet>g</snippet></ROW><ROW><id>15116519</id><snippet>h</snippet></ROW><ROW><id>15116519</id><snippet>data</snippet></ROW><ROW><id>15116765</id><snippet>x-forwarded-proto</snippet></ROW><ROW><id>15116766</id><snippet>PATH="/Library/Frameworks/Python.framework/Versions/3.3/bin:${PATH}:/Development/android-sdk-macosx/platform-tools:/Development/android-sdk-macosx/tools"
export PATH
</snippet></ROW><ROW><id>15116766</id><snippet>/Library/Frameworks/Python.framework/Versions/3.3/bin</snippet></ROW><ROW><id>15117060</id><snippet>%deset
</snippet></ROW><ROW><id>15117150</id><snippet>$arr = array(0,1,2,3,4);
unset($arr[3]);
echo $arr[3];  // undefined index warning, execution continues;
echo isset($arr[3]) ? $arr[3] : '';
print_r($arr);
</snippet></ROW><ROW><id>15117150</id><snippet>print_r()</snippet></ROW><ROW><id>15117150</id><snippet>Array
(
    [0] =&gt; 0
    [1] =&gt; 1
    [2] =&gt; 2
    [4] =&gt; 4
 )
</snippet></ROW><ROW><id>15117464</id><snippet>@app.route('/', defaults={'path': ''})
@app.route('/&lt;path:path&gt;')
</snippet></ROW><ROW><id>15117464</id><snippet>&lt;int:stuff&gt; # accepts integers (typecasts)
&lt;float:stuff&gt; # like int but for floating point values
&lt;path:stuff&gt; # like the default but also accepts slashes
&lt;stuff&gt; # Default
</snippet></ROW><ROW><id>15117793</id><snippet>uncertainties.Variable()</snippet></ROW><ROW><id>15117793</id><snippet>__slots__</snippet></ROW><ROW><id>15117793</id><snippet>__getstate__</snippet></ROW><ROW><id>15117793</id><snippet>__getstate__</snippet></ROW><ROW><id>15117793</id><snippet>__slot__</snippet></ROW><ROW><id>15117793</id><snippet>from uncertainties import Variable

class value(Variable):
    __slots__ = ('show',)  # only list *additional* slots

    def __init__(self, args, showing=False):
        self.show = showing
        super(value, self).__init__(args[0], args[1])

    def __getstate__(self):
        obj_slot_values = {}
        for cls in type(self).mro():
            obj_slot_values.update((k, getattr(self, k)) for k in getattr(cls, '__slots__', ()))
        # Conversion to a usual dictionary:
        return obj_slot_values
</snippet></ROW><ROW><id>15117793</id><snippet>__getstate__</snippet></ROW><ROW><id>15117793</id><snippet>Variable.__getstate__</snippet></ROW><ROW><id>15117793</id><snippet>__slots__</snippet></ROW><ROW><id>15117793</id><snippet>uncertainties</snippet></ROW><ROW><id>15117793</id><snippet>__getstate__</snippet></ROW><ROW><id>15118266</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; matches = [(t,p) for t,p in product(targets,prefixes) if t.startswith(p)]
&gt;&gt;&gt; print(matches)
[('abar', 'a'), ('cbar', 'c')]
</snippet></ROW><ROW><id>15118266</id><snippet>&gt;&gt;&gt; nextmatch = next(((t,p) for t,p in product(targets,prefixes) if t.startswith(p)), None)
&gt;&gt;&gt; print(nextmatch)
[('abar', 'a')]
</snippet></ROW><ROW><id>15118491</id><snippet>:%s/,\([^ ]\)/, \1/g
</snippet></ROW><ROW><id>15118491</id><snippet>^</snippet></ROW><ROW><id>15118491</id><snippet>[]</snippet></ROW><ROW><id>15118491</id><snippet>[^ ]</snippet></ROW><ROW><id>15118491</id><snippet>\(\)</snippet></ROW><ROW><id>15118491</id><snippet>\1</snippet></ROW><ROW><id>15118534</id><snippet># urls.py
(r"^([^/]*?(19|20)\d{2}[^/]*?)/?$", RemoveYearRedirect.as_view()),

# views.py
from django.views.generic.base import RedirectView
import re

class RemoveYearRedirect(RedirectView):
    query_string = True

    def get_redirect_url(self, **kwargs):
        """
        This has been overriden to remove any year from 1900 to 2099 from the URL
        """
        url = re.sub("(19|20)\d{2}", "", self.args[0])
        return "/" + re.sub("-+", "-", url).strip("-")
</snippet></ROW><ROW><id>15118657</id><snippet>attrib</snippet></ROW><ROW><id>15118657</id><snippet>category</snippet></ROW><ROW><id>15118657</id><snippet>elt.attrib['category']</snippet></ROW><ROW><id>15118679</id><snippet>QRadioButton</snippet></ROW><ROW><id>15118679</id><snippet>.sender()</snippet></ROW><ROW><id>15118679</id><snippet>QObject</snippet></ROW><ROW><id>15118679</id><snippet>QRadioButton</snippet></ROW><ROW><id>15118679</id><snippet>import sys
from PyQt4.QtGui import QApplication, QWidget, QVBoxLayout, \
    QLineEdit, QRadioButton

class Widget(QWidget):
    def __init__(self, parent=None):
        QWidget.__init__(self, parent)

        self.widget_layout = QVBoxLayout()

        self.radio1 = QRadioButton('Radio 1')
        self.radio2 = QRadioButton('Radio 2')
        self.line_edit = QLineEdit()

        self.radio1.toggled.connect(self.radio1_clicked)
        self.radio2.toggled.connect(self.radio2_clicked)

        self.widget_layout.addWidget(self.radio1)
        self.widget_layout.addWidget(self.radio2)
        self.widget_layout.addWidget(self.line_edit)
        self.setLayout(self.widget_layout)

    def radio1_clicked(self, enabled):
        if enabled:
            self.line_edit.setText('Radio 1')

    def radio2_clicked(self, enabled):
        if enabled:
            self.line_edit.setText('Radio 2')


if __name__ == '__main__':
  app = QApplication(sys.argv)
  widget = Widget()
  widget.show()

  sys.exit(app.exec_())  
</snippet></ROW><ROW><id>15118777</id><snippet>holes_between()</snippet></ROW><ROW><id>15118777</id><snippet>def holes_between(intervals):
    prec = intervals[0][1] + 1 # Bootstrap the iteration
    result = []
    for low, high in intervals[1:]:
        if prec &lt;= low - 1:
            result.append((prec, low - 1))
        prec = high + 1
    return result
</snippet></ROW><ROW><id>15118777</id><snippet>timeit</snippet></ROW><ROW><id>15118777</id><snippet>import timeit

def holes_between_list(intervals):
    prec = intervals[0][1] + 1 # Bootstrap the iteration
    result = []
    for low, high in intervals[1:]:
        if prec &lt;= low - 1:
            result.append((prec, low - 1))
        prec = high + 1
    return result

def holes_between_generate(intervals):
    prec = intervals[0][1] + 1 # Bootstrap the iteration
    for low, high in intervals[1:]:
        if prec &lt;= low - 1:
            yield (prec, low - 1)
        prec = high + 1

intervals = [ ... ] # fill in some test data

print 'As list:', timeit.timeit(
    'holes_between(intervals)',
    'from __main__ import intervals, holes_between_list as holes_between')

print 'Using a generator:', timeit.timeit(
    'list(holes_between(intervals))',
    'from __main__ import intervals, holes_between_generate as holes_between')
</snippet></ROW><ROW><id>15118928</id><snippet>&gt;&gt;&gt; a = np.random.rand(3, 3)
&gt;&gt;&gt; a
array([[ 0.31837307,  0.11282832,  0.70878689],
       [ 0.32481098,  0.94713997,  0.5034967 ],
       [ 0.391264  ,  0.58149983,  0.34353628]])
&gt;&gt;&gt; np.linalg.inv(a)
array([[-0.29964242, -3.43275347,  5.64936743],
       [-0.78524966,  1.54400931, -0.64281108],
       [ 1.67045482,  1.29614174, -2.43525829]])

&gt;&gt;&gt; a_sps = scipy.sparse.csc_matrix(a)
&gt;&gt;&gt; lu_obj = scipy.sparse.linalg.splu(a_sps)
&gt;&gt;&gt; lu_obj.solve(np.eye(3))
array([[-0.29964242, -0.78524966,  1.67045482],
       [-3.43275347,  1.54400931,  1.29614174],
       [ 5.64936743, -0.64281108, -2.43525829]])
</snippet></ROW><ROW><id>15118928</id><snippet>&gt;&gt;&gt; for k in xrange(3) :
...     b = np.zeros((3,))
...     b[k] = 1
...     print lu_obj.solve(b)
... 
[-0.29964242 -0.78524966  1.67045482]
[-3.43275347  1.54400931  1.29614174]
[ 5.64936743 -0.64281108 -2.43525829]
</snippet></ROW><ROW><id>15119034</id><snippet>p = ArgumentParser()
p.add_argument("-m", "--mac", action="store_const", const="mac_address")
p.add_argument("addresses", nargs="*")

args = p.parse_args()

if args.mac is not None and len(args.addresses) &gt; 1:
    p.error("Only one argument allowed in conjunction with --mac")
</snippet></ROW><ROW><id>15119034</id><snippet>p = argparse.ArgumentParser()
g = p.add_mutually_exclusive_group(required=True) 
g.add_argument("-m", "--mac", dest="addresses")
g.add_argument("--nonmac", nargs="*", dest="addresses")
args = parser.parse_args()
</snippet></ROW><ROW><id>15119034</id><snippet>args.addresses</snippet></ROW><ROW><id>15119034</id><snippet>--mac</snippet></ROW><ROW><id>15119034</id><snippet>--nonmac</snippet></ROW><ROW><id>15119151</id><snippet>Logger.log()</snippet></ROW><ROW><id>15119151</id><snippet>import sys

# Map accel values to log levels
levels = (
    (10.0, logging.CRITICAL),
    (2.0, logging.WARNING), 
    (1.0, logging.INFO),
    (-sys.maxsize, logging.DEBUG)
)

logging.log(next(lev[1] for lev in levels if lev[0] &lt;= accel),
    "Collision with %0.1fG impact.", accel)
</snippet></ROW><ROW><id>15119151</id><snippet>def level_for_accel(accel):
    # return next matching log level for the given accel value
    return next(lev[1] for lev in levels if lev[0] &lt;= accel)

logging.log(level_for_accel(accel), "Collision with %0.1fG impact.", accel)
</snippet></ROW><ROW><id>15119151</id><snippet>CRITICAL</snippet></ROW><ROW><id>15119151</id><snippet>WARNING</snippet></ROW><ROW><id>15119151</id><snippet>accel</snippet></ROW><ROW><id>15119151</id><snippet>if</snippet></ROW><ROW><id>15119151</id><snippet>else</snippet></ROW><ROW><id>15119403</id><snippet>__doc__</snippet></ROW><ROW><id>15119403</id><snippet>import foo

foo.__doc__ = '''My docstring for this module'''
</snippet></ROW><ROW><id>15119454</id><snippet>&gt;&gt;&gt; form=cgi.FieldStorage()
&gt;&gt;&gt; dir(form)
['FieldStorageClass', '_FieldStorage__write', '__contains__', '__doc__', '__getattr__', '__getitem__', '__init__', '__iter__', '__len__', '__module__', '__nonzero__', '__repr__', 'bufsize', 'disposition', 'disposition_options', 'done', 'fi
le', 'filename', 'fp', 'getfirst', 'getlist', 'getvalue', 'has_key', 'headers', 'innerboundary', 'keep_blank_values', 'keys', 'length', 'list', 'make_file', 'name', 'outerboundary', 'qs_on_post', 'read_binary', 'read_lines', 'read_lines_to
_eof', 'read_lines_to_outerboundary', 'read_multi', 'read_single', 'read_urlencoded', 'skip_lines', 'strict_parsing', 'type', 'type_options']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15119470</id><snippet>def ballone():
    # ...

if workout == "y":
    ballone()
elif workout == "n":
    print("Okay.")
    sys.exit("Not working out if you won")
else:
    sys.exit("Could not understand")
</snippet></ROW><ROW><id>15119470</id><snippet>workout</snippet></ROW><ROW><id>15119762</id><snippet>#include &lt;Python.h&gt;
</snippet></ROW><ROW><id>15119762</id><snippet>P</snippet></ROW><ROW><id>15119762</id><snippet>*pSelf</snippet></ROW><ROW><id>15119762</id><snippet>PyObject *Add(PyObject *pArgs)
</snippet></ROW><ROW><id>15119762</id><snippet>MyDll.Add(1,2)
</snippet></ROW><ROW><id>15119762</id><snippet>MyDll.Add</snippet></ROW><ROW><id>15119762</id><snippet>1</snippet></ROW><ROW><id>15119762</id><snippet>2</snippet></ROW><ROW><id>15119762</id><snippet>MyDll.Add((1,2))
</snippet></ROW><ROW><id>15119762</id><snippet>Add</snippet></ROW><ROW><id>15119762</id><snippet>import ctypes

MyDll = ctypes.cdll.LoadLibrary("PyToCppTest.dll")
MyCFunc = ctypes.PYFUNCTYPE(
    ctypes.py_object,     # return val: a python object
    ctypes.py_object      # argument 1: a tuple
)
MyFunc = MyCFunc(('Add', MyDll))

jj = MyFunc((1,2))
</snippet></ROW><ROW><id>15119956</id><snippet>def acquire_data(list_or_filename):
    # assuming py3 here, for py2 use 'isinstance(list_or_filename, basestring)
    if isinstance(list_or_filename, str):
        with open(list_or_filename,"r") as f:
            return acquire_data_from_file(f)
    else:
        return acquire_data_from_list(list_or_filename)
</snippet></ROW><ROW><id>15120014</id><snippet>def some_view(request, *args, **kwargs):
    # more code here
</snippet></ROW><ROW><id>15120014</id><snippet>None</snippet></ROW><ROW><id>15120014</id><snippet>request.GET</snippet></ROW><ROW><id>15120014</id><snippet>None</snippet></ROW><ROW><id>15120173</id><snippet>numInversions = 0
for i in range(16):
    for j in range(i):
        if state.index(START[j]) &gt; state.index(START[i]):
            numInversions += 1
</snippet></ROW><ROW><id>15120173</id><snippet>&gt;</snippet></ROW><ROW><id>15120173</id><snippet>bool</snippet></ROW><ROW><id>15120173</id><snippet>0</snippet></ROW><ROW><id>15120173</id><snippet>1</snippet></ROW><ROW><id>15120197</id><snippet>textwrap</snippet></ROW><ROW><id>15120197</id><snippet>textwrap.fill(text, width)
</snippet></ROW><ROW><id>15120881</id><snippet>&gt;&gt;&gt; lats = np.array([43.2, 43.2, 43.2, 45.5, 45.5, 45.5, 65.3, 65.3, 65.3])
&gt;&gt;&gt; lons = np.array([5.5, 102.5, 116.2, 5.5, 102.5, 116.2, 5.5, 102.5, 116.2])
&gt;&gt;&gt; vals = np.array([3, 4, 5, 6, 7, 7, 9, 1, 0])
</snippet></ROW><ROW><id>15120881</id><snippet>vals[j]</snippet></ROW><ROW><id>15120881</id><snippet>lats[j]</snippet></ROW><ROW><id>15120881</id><snippet>lons[j]</snippet></ROW><ROW><id>15120881</id><snippet>&gt;&gt;&gt; indices = np.arange(9)
&gt;&gt;&gt; np.random.shuffle(indices)
&gt;&gt;&gt; lats = lats[indices]
&gt;&gt;&gt; lons = lons[indices]
&gt;&gt;&gt; vals = vals[indices]
&gt;&gt;&gt; lats
array([ 45.5,  43.2,  65.3,  45.5,  43.2,  65.3,  45.5,  65.3,  43.2])
&gt;&gt;&gt; lons
array([   5.5,  116.2,  102.5,  116.2,    5.5,  116.2,  102.5,    5.5,  102.5])
&gt;&gt;&gt; vals
array([6, 5, 1, 7, 3, 0, 7, 9, 4])
</snippet></ROW><ROW><id>15120881</id><snippet>&gt;&gt;&gt; lat_vals, lat_idx = np.unique(lats, return_inverse=True)
&gt;&gt;&gt; lon_vals, lon_idx = np.unique(lons, return_inverse=True)
&gt;&gt;&gt; vals_array = np.empty(lat_vals.shape + lon_vals.shape)
&gt;&gt;&gt; vals_array.fill(np.nan) # or whatever yor desired missing data flag is
&gt;&gt;&gt; vals_array[lat_idx, lon_idx] = vals
&gt;&gt;&gt; vals_array
array([[ 3.,  4.,  5.],
       [ 6.,  7.,  7.],
       [ 9.,  1.,  0.]])
</snippet></ROW><ROW><id>15120923</id><snippet>class SizeCheckFile(file):
    def __init__(self, size, *args, **kwargs):
        file.__init__(self, *args, **kwargs)
        self.size = size
        self.data_read = 0

    def read(self, *args, **kwargs):
        data = file.read(self, *args, **kwargs)
        self.data_read += len(data)
        if self.data_read &gt; self.size:
            raise UploadSizeMismatchError("File has grown!")
        elif not data and self.data_read != self.size:
            raise UploadSizeMismatchError("File has shrunk!")
        return data

    def seek(self, *args, **kwargs):
        current_pos = self.tell()
        file.seek(self, *args, **kwargs)
        if current_pos != self.tell():
            raise NotImplementedError("%s currently assumes the file is being read from start to finish!" % self.__class__.__name__)
</snippet></ROW><ROW><id>15120923</id><snippet>MultipartParam</snippet></ROW><ROW><id>15120923</id><snippet>filesize</snippet></ROW><ROW><id>15120923</id><snippet>seek</snippet></ROW><ROW><id>15120997</id><snippet>__cmp__</snippet></ROW><ROW><id>15120997</id><snippet>NotImplemented</snippet></ROW><ROW><id>15120997</id><snippet>class MyStr(str):
    def __gt__(self, other):
        print '(was called)',
        return int(self) &gt; int(other)


print MyStr(16) &gt; MyStr(7)   # True
</snippet></ROW><ROW><id>15120997</id><snippet>class MyStr(str):
    def __gt__(self, other):
        try:
            return int(self) &gt; int(other)
        except ValueError:
            return False
</snippet></ROW><ROW><id>15121226</id><snippet>adb shell cat /proc/version
</snippet></ROW><ROW><id>15121226</id><snippet>Linux version 2.6.35.7-g3cc95e3 (peter@boris) (gcc version 4.4.3 (GCC) ) #3 PREEMPT Thu Aug 18 14:34:17 EDT 2011
</snippet></ROW><ROW><id>15121488</id><snippet>import sys
sys.stdout.isatty()
</snippet></ROW><ROW><id>15121488</id><snippet>os.isatty</snippet></ROW><ROW><id>15121488</id><snippet>import os
os.isatty(sys.stdout.fileno())
</snippet></ROW><ROW><id>15121552</id><snippet>multiprocessing</snippet></ROW><ROW><id>15121552</id><snippet>threading</snippet></ROW><ROW><id>15121552</id><snippet>multiprocessing</snippet></ROW><ROW><id>15121552</id><snippet>threading</snippet></ROW><ROW><id>15121552</id><snippet>concurrent.futures.ThreadPoolExecutor</snippet></ROW><ROW><id>15121552</id><snippet>ProcessPoolExecutor</snippet></ROW><ROW><id>15121719</id><snippet>file</snippet></ROW><ROW><id>15121719</id><snippet>class CountingWrapper(object):
    def __init__(self, *args, **kwargs):
        self.segment_count = 0
        self.f = open(*args, **kwargs)
    def write(self, *args, **kwargs):
        self.segment_count += 1
        return self.f.write(*args, **kwargs)

payloadRecon = CountingWrapper('TCPStreamPayload.txt', 'a')
payloadRecon.write('dsfsd')
assert payloadRecon.count == 1
</snippet></ROW><ROW><id>15121719</id><snippet>segmentCount = 0
def payload_write(f, *args, **kwargs):
    global segmentCount
    segmentCount += 1
    return f.write(*args, **kwargs)
</snippet></ROW><ROW><id>15121719</id><snippet>payload_write(payloadRecon, '####TCP PAYLOAD STREAM RECONSTRUCTION. Segment ' + str(segmentCount) + '######' '\n\n\n\n')
assert segmentCount == 1
</snippet></ROW><ROW><id>15121719</id><snippet>__getattr__</snippet></ROW><ROW><id>15121719</id><snippet>file</snippet></ROW><ROW><id>15121719</id><snippet>io</snippet></ROW><ROW><id>15121719</id><snippet>file</snippet></ROW><ROW><id>15121719</id><snippet>io.whatever</snippet></ROW><ROW><id>15121719</id><snippet>open</snippet></ROW><ROW><id>15121719</id><snippet>open</snippet></ROW><ROW><id>15121719</id><snippet>__new__</snippet></ROW><ROW><id>15121719</id><snippet>__init__</snippet></ROW><ROW><id>15121719</id><snippet>file.write</snippet></ROW><ROW><id>15121719</id><snippet>payloadRecon = open('TCPStreamPayload.txt', 'a')
segmentCount = 0
write_original = payloadRecon.write
def write_and_count(self, *args, **kwargs):
    global segmentCount
    segmentCount += 1
    write_original(self, *args, **kwargs)
payloadRecon.write = write_and_count
</snippet></ROW><ROW><id>15121916</id><snippet>multiprocessing</snippet></ROW><ROW><id>15121916</id><snippet>print</snippet></ROW><ROW><id>15121933</id><snippet>list.append()</snippet></ROW><ROW><id>15121933</id><snippet>typedef struct {
    PyObject_VAR_HEAD
    /* Vector of pointers to list elements.  list[0] is ob_item[0], etc. */
    PyObject **ob_item;

    /* ob_item contains space for 'allocated' elements.  The number
     * currently in use is ob_size.
     * Invariants:
     *     0 &lt;= ob_size &lt;= allocated
     *     len(list) == ob_size
     *     ob_item == NULL implies ob_size == allocated == 0
     * list.sort() temporarily sets allocated to -1 to detect mutations.
     *
     * Items must normally not be NULL, except during construction when
     * the list is not yet visible outside the function that builds it.
     */
    Py_ssize_t allocated;
} PyListObject;
</snippet></ROW><ROW><id>15121933</id><snippet>ob_item</snippet></ROW><ROW><id>15121933</id><snippet>/* This over-allocates proportional to the list size, making room
 * for additional growth.  The over-allocation is mild, but is
 * enough to give linear-time amortized behavior over a long
 * sequence of appends() in the presence of a poorly-performing
 * system realloc().
 * The growth pattern is:  0, 4, 8, 16, 25, 35, 46, 58, 72, 88, ...
 */
new_allocated = (newsize &gt;&gt; 3) + (newsize &lt; 9 ? 3 : 6);
</snippet></ROW><ROW><id>15122019</id><snippet>import sys

print(sys.argv)
</snippet></ROW><ROW><id>15122019</id><snippet>&gt;python q15121717.py 127.0.0.1
</snippet></ROW><ROW><id>15122019</id><snippet>['q15121717.py', '127.0.0.1']
</snippet></ROW><ROW><id>15122019</id><snippet>if len(sys.argv) &gt; 1:
    print(sys.argv[1])
else:
    print(input("Enter address:"))
</snippet></ROW><ROW><id>15122133</id><snippet>first, sep, rest = line.partition(",")
if rest: # don't write lines with less than 2 columns
   output_handle.write(rest)
</snippet></ROW><ROW><id>15122259</id><snippet>scss</snippet></ROW><ROW><id>15122259</id><snippet>LOAD_PATHS</snippet></ROW><ROW><id>15122259</id><snippet>__init__.py</snippet></ROW><ROW><id>15122259</id><snippet>config.py</snippet></ROW><ROW><id>15122259</id><snippet>pyramid_scss</snippet></ROW><ROW><id>15122259</id><snippet>pyramid_scss/__init__.py</snippet></ROW><ROW><id>15122259</id><snippet>scss.config.LOAD_PATHS = ','.join([scss.config.LOAD_PATHS, ','.join(load_paths)])
</snippet></ROW><ROW><id>15122330</id><snippet>#!/path/to/2.7/python
</snippet></ROW><ROW><id>15122330</id><snippet>./path/to/2.7/python python_projects
</snippet></ROW><ROW><id>15122330</id><snippet>alias py27=/path/to/2.7/python
</snippet></ROW><ROW><id>15122330</id><snippet>py27 python_projects
</snippet></ROW><ROW><id>15122840</id><snippet>r</snippet></ROW><ROW><id>15122840</id><snippet>\n</snippet></ROW><ROW><id>15122840</id><snippet>\r</snippet></ROW><ROW><id>15122840</id><snippet>\</snippet></ROW><ROW><id>15122840</id><snippet>n</snippet></ROW><ROW><id>15122840</id><snippet>r</snippet></ROW><ROW><id>15122840</id><snippet>\</snippet></ROW><ROW><id>15122840</id><snippet>\</snippet></ROW><ROW><id>15122840</id><snippet>\\</snippet></ROW><ROW><id>15122840</id><snippet>"\$"</snippet></ROW><ROW><id>15122840</id><snippet>"$"</snippet></ROW><ROW><id>15122840</id><snippet>\</snippet></ROW><ROW><id>15122840</id><snippet>\</snippet></ROW><ROW><id>15122840</id><snippet>"\$"</snippet></ROW><ROW><id>15122840</id><snippet>\</snippet></ROW><ROW><id>15122840</id><snippet>$</snippet></ROW><ROW><id>15122840</id><snippet>\</snippet></ROW><ROW><id>15122840</id><snippet>"\$"</snippet></ROW><ROW><id>15122840</id><snippet>$</snippet></ROW><ROW><id>15123061</id><snippet>cur.execute("GRANT SELECT ON `project1`.`%s` TO `odbc`@`localhost`;" % row)
cur.execute("GRANT SELECT ON `project1`.`%s` TO `odbc`@`%%`;" % row)
</snippet></ROW><ROW><id>15123061</id><snippet>%</snippet></ROW><ROW><id>15123061</id><snippet>%%</snippet></ROW><ROW><id>15123074</id><snippet>string = file("prCounties.txt","r").read().decode('utf-8')
</snippet></ROW><ROW><id>15123074</id><snippet>simplejson</snippet></ROW><ROW><id>15123074</id><snippet>prCounties.txt</snippet></ROW><ROW><id>15123074</id><snippet>u"Añasco"</snippet></ROW><ROW><id>15123074</id><snippet>open('prCounties.txt', 'w').write(repr(my_dict))</snippet></ROW><ROW><id>15123074</id><snippet>repr</snippet></ROW><ROW><id>15123074</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>15123074</id><snippet>{"type":"FeatureCollection","properties":{"kind":"state","state":"PR"},"features":[
{"type":"Feature","properties":{"kind":"county","name":"Añasco","state":"PR"},"geometry":{"type":"MultiPolygon","coordinates":[[[[-67.1220,18.3239],[-67.0508,18.3075],[-67.0398,18.2910],[-67.0837,18.2527],[-67.1220,18.2417],[-67.1603,18.2746],[-67.1877,18.2691],[-67.2261,18.2965],[-67.1822,18.3129],[-67.1275,18.3184]]]]}}
]}
</snippet></ROW><ROW><id>15123074</id><snippet>"name": u"Añasco"</snippet></ROW><ROW><id>15123074</id><snippet>"name": u"A\xf1asco"</snippet></ROW><ROW><id>15123074</id><snippet>read</snippet></ROW><ROW><id>15123074</id><snippet>simplejson.loads</snippet></ROW><ROW><id>15123074</id><snippet>$ curl -O https://raw.github.com/johan/world.geo.json/master/countries/USA/PR/Añasco.geo.json
$ cp Añasco.geo.json prCounties.txt
$ python
&gt;&gt;&gt; import simplejson
&gt;&gt;&gt; string = file("prCounties.txt","r").read()
&gt;&gt;&gt; d = simplejson.loads(string)
&gt;&gt;&gt; print d
{u'type': u'FeatureCollection', u'properties': {u'kind': u'state', u'state': u'PR'}, u'features': [{u'geometry': {u'type': u'MultiPolygon', u'coordinates': [[[[-67.122, 18.3239], [-67.0508, 18.3075], [-67.0398, 18.291], [-67.0837, 18.2527], [-67.122, 18.2417], [-67.1603, 18.2746], [-67.1877, 18.2691], [-67.2261, 18.2965], [-67.1822, 18.3129], [-67.1275, 18.3184]]]]}, u'type': u'Feature', u'properties': {u'kind': u'county', u'name': u'A\xf1asco', u'state': u'PR'}}]}
</snippet></ROW><ROW><id>15123074</id><snippet>decode</snippet></ROW><ROW><id>15123074</id><snippet>encode</snippet></ROW><ROW><id>15123074</id><snippet>simplejson.loads</snippet></ROW><ROW><id>15123074</id><snippet>simplejson.loads</snippet></ROW><ROW><id>15123074</id><snippet>repr</snippet></ROW><ROW><id>15123074</id><snippet>dict</snippet></ROW><ROW><id>15123074</id><snippet>dict</snippet></ROW><ROW><id>15123074</id><snippet>prCounties.txt</snippet></ROW><ROW><id>15123248</id><snippet>yeardict = {}
for key in monthdict:
    try:
        dyear, dmonth = map(int, key.split('-'))
    except Exception:
        continue  # you may want to log something about the format not matching
    if dyear not in yeardict:
        yeardict[dyear] = [0]*12
    yeardict[dyear][dmonth-1] = monthdict[key]
</snippet></ROW><ROW><id>15123248</id><snippet>01</snippet></ROW><ROW><id>15123248</id><snippet>00</snippet></ROW><ROW><id>15123248</id><snippet>dmonth</snippet></ROW><ROW><id>15123248</id><snippet>dmonth-1</snippet></ROW><ROW><id>15123373</id><snippet>value = type(self)()
self[key] = value
</snippet></ROW><ROW><id>15123373</id><snippet>&gt;&gt;&gt; class FakeDict(object):
...  def __setitem__(self, k, v):
...   pass
...  def __getitem__(self, k):
...   raise KeyError("boom!")
... 
&gt;&gt;&gt; d = FakeDict()
&gt;&gt;&gt; x = d[1] = 42
&gt;&gt;&gt; d[1] = 42
&gt;&gt;&gt; x = d[1]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in __getitem__
KeyError: boom!
</snippet></ROW><ROW><id>15123373</id><snippet>dict</snippet></ROW><ROW><id>15123373</id><snippet>self[key] = type(self)()
value = self[key]
</snippet></ROW><ROW><id>15123373</id><snippet>dict</snippet></ROW><ROW><id>15123373</id><snippet>__some_temporary = type(self)()
value = __some_temporary
self[key] = __some_temporary
</snippet></ROW><ROW><id>15123373</id><snippet>value = type(self)(); self[key] = value</snippet></ROW><ROW><id>15123373</id><snippet>value</snippet></ROW><ROW><id>15123373</id><snippet>value</snippet></ROW><ROW><id>15123373</id><snippet>container[key]</snippet></ROW><ROW><id>15123375</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>15123558</id><snippet>raise NewException() from None</snippet></ROW><ROW><id>15123558</id><snippet>exc = NewException(); exc.__context__ = None; raise exc</snippet></ROW><ROW><id>15123558</id><snippet>def suppress_context(exc):
    exc.__context__ = None
    return exc
</snippet></ROW><ROW><id>15123558</id><snippet>raise suppress_context(TheErrorClass())
</snippet></ROW><ROW><id>15123558</id><snippet>raise exc from cause</snippet></ROW><ROW><id>15123558</id><snippet>exc.__cause__ = cause
raise exc
</snippet></ROW><ROW><id>15123558</id><snippet>__context__</snippet></ROW><ROW><id>15123558</id><snippet>None</snippet></ROW><ROW><id>15123558</id><snippet>__cause__</snippet></ROW><ROW><id>15123558</id><snippet>None</snippet></ROW><ROW><id>15123558</id><snippet>sys.excepthook</snippet></ROW><ROW><id>15123558</id><snippet>try:
    raise error from None
except TypeError:
    raise error
</snippet></ROW><ROW><id>15123558</id><snippet>excepthook</snippet></ROW><ROW><id>15123558</id><snippet>raise error from None</snippet></ROW><ROW><id>15123726</id><snippet>for x in range (len(map)):
    for y in range(len(map[x])):
        map[x][y] = counterPosition(x,y)
</snippet></ROW><ROW><id>15123726</id><snippet>counterPosition</snippet></ROW><ROW><id>15123726</id><snippet>counterPosition</snippet></ROW><ROW><id>15123726</id><snippet>IndexError:...</snippet></ROW><ROW><id>15123726</id><snippet>x=5,y-5</snippet></ROW><ROW><id>15123726</id><snippet>map[6][6]</snippet></ROW><ROW><id>15123726</id><snippet>def counterPosition(x, y):
    bombs = 0
    for i in range(x-1, x+2):
        for j in range(y-1, y+2):
            # check bounds:
            if 0 &lt;= i &lt; len(map) and 0 &lt;= j &lt; len(map[i]):
                if map[i][j] == True:
                    bombs += 1
    return bombs
</snippet></ROW><ROW><id>15123726</id><snippet>counterPosition</snippet></ROW><ROW><id>15123726</id><snippet>map</snippet></ROW><ROW><id>15123726</id><snippet>counterPosition</snippet></ROW><ROW><id>15123726</id><snippet>map[x][y]</snippet></ROW><ROW><id>15123726</id><snippet>map</snippet></ROW><ROW><id>15123907</id><snippet>ax.set_adjustable('box-forced')
ax2.set_adjustable('box-forced')
</snippet></ROW><ROW><id>15123955</id><snippet>set_active()</snippet></ROW><ROW><id>15123955</id><snippet>props.active</snippet></ROW><ROW><id>15123955</id><snippet>Gtk.RadioButton</snippet></ROW><ROW><id>15123955</id><snippet>draw_indicator</snippet></ROW><ROW><id>15123955</id><snippet>False</snippet></ROW><ROW><id>15123976</id><snippet>a = [1,2,[4,6],3,4]
ret = None
def f(x):
    global ret
    if isinstance(x, list):
        f(x[0])
    else:
        ret = x
        return x

var = f(a)
print(var, ret)
</snippet></ROW><ROW><id>15124023</id><snippet>ConfigParser</snippet></ROW><ROW><id>15124023</id><snippet>StringIO</snippet></ROW><ROW><id>15124023</id><snippet>io</snippet></ROW><ROW><id>15124023</id><snippet>from io import StringIO
...
s = configfile.read()
s.replace("#","_")
f = StringIO(unicode(s))
configparser.readfp(f)
</snippet></ROW><ROW><id>15124023</id><snippet>json</snippet></ROW><ROW><id>15124023</id><snippet>my_config={
  "channels":["#mychannel", "#yourchannel"],
  "user"="bob",
  "buddy-list":["alice","eve"],
  }

import json
with open(configfile, 'rw') as cfg:
  cfg.write(json.dumps(my_config))
</snippet></ROW><ROW><id>15124086</id><snippet>import pandas as pd
import io

data = '''\
GENE    DIRECTION   POS1    POS2    SOURCE
TT-1    +   1   16  A1
TT-1    +   130 289 A1
TT-1    +   353 438 A1
TT-1    +   519 580 A1
TT-1    +   665 742 A1
TT-1    +   813 864 A1
TT-1    +   931 975 A1
TT-1    +   1053    1166    A1
TT-1    +   1   16  B2
TT-1    +   130 289 B2
TT-1    +   353 438 B2
TT-1    +   519 580 B2
TT-1    +   665 742 B2
TT-1    +   813 864 B2
TT-1    +   931 975 B2
TT-1    +   1053    1161    B2
BB-2    +   3   659 C3
BB-2    +   3   640 D4
BB-2    -   1093    426 E5
BB-2    -   1093    508 F6
EE-3    +   1   95  G7
EE-3    +   155 377 G7
EE-3    +   439 513 G7
EE-3    +   577 840 G7
EE-3    +   1   95  H8
EE-3    +   155 377 H8
EE-3    +   439 513 H8
EE-3    -   840 577 I9
EE-3    -   513 439 I9
EE-3    -   377 155 I9
EE-3    -   840 577 J10
EE-3    -   513 458 J10'''

df = pd.read_table(io.BytesIO(data), sep='\t')
</snippet></ROW><ROW><id>15124086</id><snippet>RANGE</snippet></ROW><ROW><id>15124086</id><snippet>SUMRANGE</snippet></ROW><ROW><id>15124086</id><snippet>df['RANGE'] = abs(df['POS2']-df['POS1'])
df['SUMRANGE'] = df.groupby(["GENE", "DIRECTION", "SOURCE"])['RANGE'].cumsum()
print(df)
#     GENE DIRECTION  POS1  POS2 SOURCE  RANGE  SUMRANGE
# 0   TT-1         +     1    16     A1     15        15
# 1   TT-1         +   130   289     A1    159       174
# 2   TT-1         +   353   438     A1     85       259
# 3   TT-1         +   519   580     A1     61       320
# 4   TT-1         +   665   742     A1     77       397
# 5   TT-1         +   813   864     A1     51       448
# 6   TT-1         +   931   975     A1     44       492
# 7   TT-1         +  1053  1166     A1    113       605
# 8   TT-1         +     1    16     B2     15        15
# 9   TT-1         +   130   289     B2    159       174
# 10  TT-1         +   353   438     B2     85       259
# 11  TT-1         +   519   580     B2     61       320
# 12  TT-1         +   665   742     B2     77       397
# 13  TT-1         +   813   864     B2     51       448
# 14  TT-1         +   931   975     B2     44       492
# 15  TT-1         +  1053  1161     B2    108       600
# 16  BB-2         +     3   659     C3    656       656
# 17  BB-2         +     3   640     D4    637       637
# 18  BB-2         -  1093   426     E5    667       667
# 19  BB-2         -  1093   508     F6    585       585
# 20  EE-3         +     1    95     G7     94        94
# 21  EE-3         +   155   377     G7    222       316
# 22  EE-3         +   439   513     G7     74       390
# 23  EE-3         +   577   840     G7    263       653
# 24  EE-3         +     1    95     H8     94        94
# 25  EE-3         +   155   377     H8    222       316
# 26  EE-3         +   439   513     H8     74       390
# 27  EE-3         -   840   577     I9    263       263
# 28  EE-3         -   513   439     I9     74       337
# 29  EE-3         -   377   155     I9    222       559
# 30  EE-3         -   840   577    J10    263       263
# 31  EE-3         -   513   458    J10     55       318
</snippet></ROW><ROW><id>15124086</id><snippet>idx = df.groupby(["GENE", "DIRECTION"])['SUMRANGE'].agg(lambda col: col.idxmax())
print(idx)
# GENE  DIRECTION
# BB-2  +            16
#       -            18
# EE-3  +            23
#       -            29
# TT-1  +             7
# Name: SUMRANGE
</snippet></ROW><ROW><id>15124086</id><snippet>df</snippet></ROW><ROW><id>15124086</id><snippet>idx</snippet></ROW><ROW><id>15124086</id><snippet>dfm = df.ix[idx, ['GENE','DIRECTION','SOURCE']]
print(dfm)
#     GENE DIRECTION SOURCE
# 16  BB-2         +     C3
# 18  BB-2         -     E5
# 23  EE-3         +     G7
# 29  EE-3         -     I9
# 7   TT-1         +     A1
</snippet></ROW><ROW><id>15124086</id><snippet>df</snippet></ROW><ROW><id>15124086</id><snippet>dfm</snippet></ROW><ROW><id>15124086</id><snippet>df</snippet></ROW><ROW><id>15124086</id><snippet>dfm</snippet></ROW><ROW><id>15124086</id><snippet>df</snippet></ROW><ROW><id>15124086</id><snippet>dfm</snippet></ROW><ROW><id>15124086</id><snippet>df</snippet></ROW><ROW><id>15124086</id><snippet>dfm</snippet></ROW><ROW><id>15124086</id><snippet>result = pd.merge(df, dfm, how = 'inner')
print(result)
#     GENE DIRECTION  POS1  POS2 SOURCE  RANGE  SUMRANGE
# 0   TT-1         +     1    16     A1     15        15
# 1   TT-1         +   130   289     A1    159       174
# 2   TT-1         +   353   438     A1     85       259
# 3   TT-1         +   519   580     A1     61       320
# 4   TT-1         +   665   742     A1     77       397
# 5   TT-1         +   813   864     A1     51       448
# 6   TT-1         +   931   975     A1     44       492
# 7   TT-1         +  1053  1166     A1    113       605
# 8   BB-2         +     3   659     C3    656       656
# 9   BB-2         -  1093   426     E5    667       667
# 10  EE-3         +     1    95     G7     94        94
# 11  EE-3         +   155   377     G7    222       316
# 12  EE-3         +   439   513     G7     74       390
# 13  EE-3         +   577   840     G7    263       653
# 14  EE-3         -   840   577     I9    263       263
# 15  EE-3         -   513   439     I9     74       337
# 16  EE-3         -   377   155     I9    222       559
</snippet></ROW><ROW><id>15124115</id><snippet>sys.maxint</snippet></ROW><ROW><id>15124115</id><snippet>queue.put((-priority, item))
</snippet></ROW><ROW><id>15124160</id><snippet>pnd.Series(df.lookup(df.index, s4), df.index)
</snippet></ROW><ROW><id>15124296</id><snippet>target = "dir where you want to copy contents of source"
basedir = "source dir containing content to be copied"
env.Accumulate(target, [os.path.join(basedir ,x) for x in os.listdir(basedir)])
</snippet></ROW><ROW><id>15124347</id><snippet> yu = lambda x: i + yu(x)
</snippet></ROW><ROW><id>15124347</id><snippet>yu</snippet></ROW><ROW><id>15124347</id><snippet>yu</snippet></ROW><ROW><id>15124347</id><snippet>i</snippet></ROW><ROW><id>15124347</id><snippet>for</snippet></ROW><ROW><id>15124347</id><snippet>yu</snippet></ROW><ROW><id>15124347</id><snippet>i</snippet></ROW><ROW><id>15124347</id><snippet>lambda</snippet></ROW><ROW><id>15124347</id><snippet>def</snippet></ROW><ROW><id>15124347</id><snippet>def yu(x): return 0
def make_new_yu(yu, i):
    def new_yu(x): return i + yu(x)
    return new_yu
for i in range(0, 5):
    yu = make_new_yu(yu, i)
</snippet></ROW><ROW><id>15124347</id><snippet>lambda</snippet></ROW><ROW><id>15124347</id><snippet>make_new_yu</snippet></ROW><ROW><id>15124347</id><snippet>def make_new_yu(yu, i):
    return lambda x: i + yu(x)
</snippet></ROW><ROW><id>15124347</id><snippet>lambda</snippet></ROW><ROW><id>15124347</id><snippet>def</snippet></ROW><ROW><id>15124347</id><snippet>lambda</snippet></ROW><ROW><id>15124347</id><snippet>def</snippet></ROW><ROW><id>15124416</id><snippet>request.GET.getlist()</snippet></ROW><ROW><id>15124416</id><snippet>request.POST.getlist()</snippet></ROW><ROW><id>15124477</id><snippet>command = # function</snippet></ROW><ROW><id>15124477</id><snippet>Button(master, width=8, height=4, text=file,command=my_funct).grid(row=row, column=column, padx=10, sticky=W)
# note how the function does not have parentheses (after command=) 

def my_funct():
    # code
</snippet></ROW><ROW><id>15124478</id><snippet>np.argsort</snippet></ROW><ROW><id>15124478</id><snippet>&gt;&gt;&gt; np.argsort(a[:,0])[::-1][:2]
array([2, 4])
</snippet></ROW><ROW><id>15124478</id><snippet>def trim_rows(a, n) :
    idx = np.argsort(a[:,0])[:-n]
    a[idx] = 0

&gt;&gt;&gt; a = np.random.rand(10, 4)
&gt;&gt;&gt; a

array([[ 0.34416425,  0.89021968,  0.06260404,  0.0218131 ],
       [ 0.72344948,  0.79637177,  0.70029863,  0.20096129],
       [ 0.27772833,  0.05372373,  0.00372941,  0.18454153],
       [ 0.09124461,  0.38676351,  0.98478492,  0.72986697],
       [ 0.84789887,  0.69171688,  0.97718206,  0.64019977],
       [ 0.27597241,  0.26705301,  0.62124467,  0.43337711],
       [ 0.79455424,  0.37024814,  0.93549275,  0.01130491],
       [ 0.95113795,  0.32306471,  0.47548887,  0.20429272],
       [ 0.3943888 ,  0.61586129,  0.02776393,  0.2560126 ],
       [ 0.5934556 ,  0.23093912,  0.12550062,  0.58542137]])
&gt;&gt;&gt; trim_rows(a, 3)
&gt;&gt;&gt; a

array([[ 0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.84789887,  0.69171688,  0.97718206,  0.64019977],
       [ 0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.79455424,  0.37024814,  0.93549275,  0.01130491],
       [ 0.95113795,  0.32306471,  0.47548887,  0.20429272],
       [ 0.        ,  0.        ,  0.        ,  0.        ],
       [ 0.        ,  0.        ,  0.        ,  0.        ]])
</snippet></ROW><ROW><id>15124478</id><snippet>In [7]: a = np.random.rand(1000, 100)

In [8]: %timeit -n1 -r1 trim_rows(a, 50)
1 loops, best of 1: 7.65 ms per loop
</snippet></ROW><ROW><id>15124785</id><snippet>FuncFormatter</snippet></ROW><ROW><id>15124785</id><snippet>import matplotlib as mpl
import matplotlib.pyplot as plt

def mjrFormatter(x, pos):
    return "$2^{{{0}}}$".format(x)

def mjrFormatter_no_TeX(x, pos):
    return "2^{0}".format(x)

ax = plt.gca()
ax.yaxis.set_major_formatter(mpl.ticker.FuncFormatter(mjrFormatter))
plt.draw()
</snippet></ROW><ROW><id>15124785</id><snippet>{}</snippet></ROW><ROW><id>15124843</id><snippet>any()</snippet></ROW><ROW><id>15124843</id><snippet>if any('apple' in code for code in CODES):
    ...
</snippet></ROW><ROW><id>15124843</id><snippet>True</snippet></ROW><ROW><id>15124843</id><snippet>'apple'</snippet></ROW><ROW><id>15124843</id><snippet>any()</snippet></ROW><ROW><id>15124843</id><snippet>True</snippet></ROW><ROW><id>15124843</id><snippet>True</snippet></ROW><ROW><id>15124843</id><snippet>False</snippet></ROW><ROW><id>15124843</id><snippet>'apple'</snippet></ROW><ROW><id>15124843</id><snippet>cache = set(itertools.chain.from_iterable(CODES)))
</snippet></ROW><ROW><id>15124973</id><snippet>counterPosition</snippet></ROW><ROW><id>15124973</id><snippet>for i in range(x-1, x+2):
    for j in range(y-1, y+2):
        …
        elif camp[i][j] == True:
</snippet></ROW><ROW><id>15124973</id><snippet>x</snippet></ROW><ROW><id>15124973</id><snippet>0</snippet></ROW><ROW><id>15124973</id><snippet>len(camp)-1</snippet></ROW><ROW><id>15124973</id><snippet>i</snippet></ROW><ROW><id>15124973</id><snippet>-1</snippet></ROW><ROW><id>15124973</id><snippet>len(camp)-1+2</snippet></ROW><ROW><id>15124973</id><snippet>x=5</snippet></ROW><ROW><id>15124973</id><snippet>i</snippet></ROW><ROW><id>15124973</id><snippet>-1</snippet></ROW><ROW><id>15124973</id><snippet>6</snippet></ROW><ROW><id>15124973</id><snippet>camp[6]</snippet></ROW><ROW><id>15124973</id><snippet>IndexError</snippet></ROW><ROW><id>15124973</id><snippet>y</snippet></ROW><ROW><id>15124973</id><snippet>j</snippet></ROW><ROW><id>15124973</id><snippet>if i&lt;0 or j&lt;0: continue
</snippet></ROW><ROW><id>15124973</id><snippet>elif i&gt;=len(camp) or j&gt;=len(camp[i]): continue
</snippet></ROW><ROW><id>15124973</id><snippet>for i in range(max(x-1, 0), min(x+2, len(camp)):</snippet></ROW><ROW><id>15124973</id><snippet>True</snippet></ROW><ROW><id>15124973</id><snippet>False</snippet></ROW><ROW><id>15124973</id><snippet>camp[i][j] == True</snippet></ROW><ROW><id>15124973</id><snippet>i&lt;=x and j&lt;=y</snippet></ROW><ROW><id>15124973</id><snippet>[[2, 2, 2, 1, 3, 2],
 [2, 2, 3, 2, 4, 2],
 [3, 2, 1, 2, 1, 2],
 [1, 3, 2, 3, 1, 2],
 [1, 3, 1, 2, 1, 2],
 [1, 3, 1, 3, 1, 2]]
</snippet></ROW><ROW><id>15124973</id><snippet>[[1, 1, 0, 0, 2, 2],
 [3, 3, 2, 1, 4, 3],
 [3, 3, 2, 1, 3, 2],
 [3, 4, 3, 2, 2, 1],
 [1, 2, 1, 1, 0, 0],
 [0, 1, 1, 1, 0, 0]]
</snippet></ROW><ROW><id>15124973</id><snippet>camp</snippet></ROW><ROW><id>15124973</id><snippet>list</snippet></ROW><ROW><id>15124973</id><snippet>newcamp = copy.deepcopy(camp)
for x in range (len(camp)):
   for y in range (len(camp[x])):
       newcamp[x][y] = counterPosition(x,y)
print newcamp
</snippet></ROW><ROW><id>15124973</id><snippet>camp = [[counterPosition(x, y) for y in range(len(camp[x]))] 
        for x in range(len(camp))]
print camp
</snippet></ROW><ROW><id>15124973</id><snippet>bombcamp</snippet></ROW><ROW><id>15124973</id><snippet>flagcamp</snippet></ROW><ROW><id>15125001</id><snippet>def max_sim(d1, d2):
    # assume that's the same for both dicts
    length = sum(d1.values())
    matches = 0
    for letter in set(d1.keys() + d2.keys()):
        matches += min(d1.get(letter, 0), d2.get(letter, 0))
    return matches / float(length)
</snippet></ROW><ROW><id>15125001</id><snippet>d1 = {"a":1, "b":2}
d2 = {"c": 3} 
d3 = {"a":1, "d":2}
d4 = {"a": 1, "b": 1, "c": 1 }

max_sim(d1, d2) # 0.0
max_sim(d1, d3) # 0.333
max_sim(d1, d4) # 0.666
max_sim(d1, d1) # 1.0
</snippet></ROW><ROW><id>15125142</id><snippet>import time

while True:
    # sleep up until then next 1/2 hour
    time.sleep(1800-time.time()%1800)

    temp = bmp.readTemperature()
    pressure = bmp.readPressure()
    altitude = bmp.readAltitude()

    print "Temperature: %.2f C" % temp
    print "Pressure:    %.2f hPa" % (pressure / 100.0)
    print "Altitude:    %.2f" % altitude
</snippet></ROW><ROW><id>15125257</id><snippet>)</snippet></ROW><ROW><id>15125257</id><snippet>_defences = relationship("Character_Defences", backref=backref('character')</snippet></ROW><ROW><id>15125257</id><snippet>def __init__</snippet></ROW><ROW><id>15125302</id><snippet>from sqlalchemy.orm import class_mapper
mapper = class_mapper(MySubClass)
mapper.polymorphic_identity = "some_identity"
mapper.polymorphic_map["some_identity"] = mapper
# in 0.8, might try to fix this for 0.9
mapper._identity_class = mapper.inherits._identity_class
</snippet></ROW><ROW><id>15125302</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *
from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy.orm import class_mapper

Base= declarative_base()


class A(Base):
    __tablename__ = "a"

    id = Column(Integer, primary_key=True)
    type = Column(String)
    __mapper_args__ = {"polymorphic_on": type, "polymorphic_identity": "a"}

class B(A):
    pass

mapper = class_mapper(B)
mapper.polymorphic_identity = "b"
mapper.polymorphic_map["b"] = mapper

e = create_engine("sqlite://", echo=True)

Base.metadata.create_all(e)

s = Session(e)

s.add_all([A(), B(), B(), A(), A()])
s.commit()

s.close()

assert [obj.type for obj in s.query(B).order_by(A.id)] \
            == ['b', 'b']

assert [type(obj) for obj in s.query(B).order_by(A.id)] \
            == [B, B]

assert [obj.type for obj in s.query(A).order_by(A.id)] \
            == ['a', 'b', 'b', 'a', 'a']
</snippet></ROW><ROW><id>15125447</id><snippet>a.user</snippet></ROW><ROW><id>15125447</id><snippet>user = '0'
xml = '&lt;int&gt;%s&lt;/int&gt;'

def foo():
    return xml % (user,)
</snippet></ROW><ROW><id>15125447</id><snippet>import a
a.user = '4343'
print a.foo()
</snippet></ROW><ROW><id>15125447</id><snippet>$ python b.py
&lt;int&gt;4343&lt;/int&gt;
</snippet></ROW><ROW><id>15125512</id><snippet>In [213]: print(u'\N{COPYRIGHT SIGN} \N{TRADE MARK SIGN} \N{REGISTERED SIGN}')
© ™ ®
</snippet></ROW><ROW><id>15125512</id><snippet>In [223]: content = u'\N{TRADE MARK SIGN}'.encode('utf-8')
</snippet></ROW><ROW><id>15125512</id><snippet>In [224]: text = content.decode('utf-8')
</snippet></ROW><ROW><id>15125512</id><snippet>In [225]: re.search(u'(\N{COPYRIGHT SIGN}|\N{TRADE MARK SIGN}|\N{REGISTERED SIGN})', text)
Out[225]: &lt;_sre.SRE_Match at 0x9a1ebe0&gt;
</snippet></ROW><ROW><id>15125512</id><snippet>import sys
import unicodedata as ud
import re
import argparse
import functools

__usage__ = '''\
unicode_lookup.py -u '\d'    # Shows all unicode symbols that regex match '\d'
unicode_lookup.py number     # Shows all unicode symbols whose name regex matches 'number'
'''


def lookup(name_pat=None, from_num=0, to_num=0x10ffff, unicode_pattern=None,
           category_pattern=None, ignore_unnamed=True,
           combining=False):
    fmt = u"{symbol} {num} {cat} {bi} {w} {comb} {mir} '{name}'"
    print(fmt.format(
        symbol='Symbol', num='Num', name='NAME',
        cat='Category', bi='Bidirectional', w='Width',
        comb='Combining', mir='Mirrored'))
    for num in range(from_num, to_num + 1):
        s = unichr(num)
        if unicode_pattern and not unicode_pattern.match(s):
            continue
        category = ud.category(s)
        if category_pattern and not category_pattern.match(category):
            continue
        try:
            name = ud.name(s)
            if name_pat and not name_pat.search(name):
                continue
        except ValueError:
            if ignore_unnamed:
                continue
            else:
                name = '?'
        bidirectional = ud.bidirectional(s)
        combining_class = ud.combining(s)
        if combining and not combining_class:
            continue
        mirrored = ud.mirrored(s)
        width = ud.east_asian_width(s)
        data = dict(num=num, symbol=s, name=name,
                    cat=category, bi=bidirectional, w=width,
                    comb=combining_class, mir=mirrored)
        print(fmt.format(**data).encode('utf-8'))


def parse_options():
    parser = argparse.ArgumentParser(
        epilog=__usage__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('name_pat',
                        type=functools.partial(re.compile, flags=re.IGNORECASE))
    parser.add_argument('-f', '--from_num', default=0, type=int)
    parser.add_argument('-t', '--to_num', default=0x10ffff, type=int)
    parser.add_argument('-u', '--unicode_pattern',
                        type=functools.partial(re.compile, flags=re.UNICODE))
    parser.add_argument('--category_pattern', type=re.compile)
    parser.add_argument('--show_unnamed', action='store_true')
    parser.add_argument('--combining', action='store_true')
    return parser.parse_args()

if __name__ == '__main__':
    opt = parse_options()
    lookup(name_pat=opt.name_pat, from_num=opt.from_num, to_num=opt.to_num,
           unicode_pattern=opt.unicode_pattern,
           category_pattern=opt.category_pattern,
           ignore_unnamed=not opt.show_unnamed,
           combining=opt.combining)
</snippet></ROW><ROW><id>15125512</id><snippet>% unicode_lookup.py "copyright|trade|registered"
</snippet></ROW><ROW><id>15125512</id><snippet>Symbol Num Category Bidirectional Width Combining Mirrored 'NAME'
© 169 So ON N 0 0 'COPYRIGHT SIGN'
® 174 So ON A 0 0 'REGISTERED SIGN'
℗ 8471 So ON N 0 0 'SOUND RECORDING COPYRIGHT'
™ 8482 So ON A 0 0 'TRADE MARK SIGN'
</snippet></ROW><ROW><id>15125538</id><snippet>DataFrame.itertuples()</snippet></ROW><ROW><id>15125538</id><snippet>for a, b in test.itertuples(index=False):
    print a, b
</snippet></ROW><ROW><id>15125695</id><snippet>proc = subprocess.Popen(['prog', 'arg'], shell=False, stdin=subprocess.PIPE)
out, err = proc.communicate('some input')
</snippet></ROW><ROW><id>15125695</id><snippet>call</snippet></ROW><ROW><id>15125695</id><snippet>communicate</snippet></ROW><ROW><id>15125695</id><snippet>proc.returncode</snippet></ROW><ROW><id>15125695</id><snippet>PIPE</snippet></ROW><ROW><id>15125695</id><snippet>None</snippet></ROW><ROW><id>15125793</id><snippet>def calculate(s):
    a = s['path'] + 2*s['row'] # Simple calc for example
    b = s['path'] * 0.153
    return pd.Series(dict(col1=a, col2=b))
</snippet></ROW><ROW><id>15125793</id><snippet>st.ix[i]['a'] = a
</snippet></ROW><ROW><id>15125793</id><snippet>st.ix[i, 'a'] = a
</snippet></ROW><ROW><id>15126040</id><snippet>ix</snippet></ROW><ROW><id>15126040</id><snippet>In [191]: b[:3][0]
Out[191]: 
0   -0.209386
1    0.050345
2    0.318414
Name: 0
</snippet></ROW><ROW><id>15126040</id><snippet>'A', 'B', 'C', 'D'</snippet></ROW><ROW><id>15126040</id><snippet>0, 1, 2, 3</snippet></ROW><ROW><id>15126040</id><snippet>b.ix[:3]</snippet></ROW><ROW><id>15126040</id><snippet>b.ix[:3]</snippet></ROW><ROW><id>15126040</id><snippet>ix</snippet></ROW><ROW><id>15126040</id><snippet>ix</snippet></ROW><ROW><id>15126041</id><snippet>Event</snippet></ROW><ROW><id>15126041</id><snippet>EventItem</snippet></ROW><ROW><id>15126041</id><snippet>events = Event.objects.filter(active=True)
events = events.exclude(eventitem__rev1__isnull=True)
events = events.exclude(eventitem__rev1='')
events = events.exclude(eventitem__rev2__isnull=True)
events = events.exclude(eventitem__rev2='')
</snippet></ROW><ROW><id>15126041</id><snippet>Event</snippet></ROW><ROW><id>15126041</id><snippet>EventItem</snippet></ROW><ROW><id>15126041</id><snippet>events = events.exclude(eventitem__isnull=True)
</snippet></ROW><ROW><id>15126041</id><snippet>events</snippet></ROW><ROW><id>15126041</id><snippet>events.distinct()</snippet></ROW><ROW><id>15126041</id><snippet>User</snippet></ROW><ROW><id>15126041</id><snippet>users = User.objects.filter(event__in=events)
</snippet></ROW><ROW><id>15126041</id><snippet>.filter(field__in=QuerySet)</snippet></ROW><ROW><id>15126041</id><snippet>users = User.objects.filter(event__in=list(events.values_list('pk', flat=True)))
</snippet></ROW><ROW><id>15126041</id><snippet>Event</snippet></ROW><ROW><id>15126041</id><snippet>from django.db.models import Count
active_users = users.annotate(num_events=Count('event')).order_by('-num_events')
</snippet></ROW><ROW><id>15126062</id><snippet>print "\\" # You need to escape the \ character
</snippet></ROW><ROW><id>15126180</id><snippet>gyp ERR! stack Error: Can't find Python executable "python", you can set the PYTHON env variable.
</snippet></ROW><ROW><id>15126180</id><snippet>set PYTHONPATH=%PYTHONPATH%;C:\My_python_lib
</snippet></ROW><ROW><id>15126180</id><snippet>PYTHON</snippet></ROW><ROW><id>15126180</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15126180</id><snippet>set</snippet></ROW><ROW><id>15126180</id><snippet>cmd</snippet></ROW><ROW><id>15126180</id><snippet>cmd</snippet></ROW><ROW><id>15126180</id><snippet>set</snippet></ROW><ROW><id>15126180</id><snippet>npm</snippet></ROW><ROW><id>15126180</id><snippet>npm</snippet></ROW><ROW><id>15126180</id><snippet>%PYTHON%</snippet></ROW><ROW><id>15126180</id><snippet>set PYTHON=%PYTHON%;D:\Python
</snippet></ROW><ROW><id>15126180</id><snippet>PYTHON</snippet></ROW><ROW><id>15126180</id><snippet>;D:\Python</snippet></ROW><ROW><id>15126180</id><snippet>PATH</snippet></ROW><ROW><id>15126180</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15126180</id><snippet>PYTHON</snippet></ROW><ROW><id>15126180</id><snippet>set PYTHON=D:\Python</snippet></ROW><ROW><id>15126180</id><snippet>D:\Python</snippet></ROW><ROW><id>15126180</id><snippet>D:\Python\Python.exe</snippet></ROW><ROW><id>15126180</id><snippet>D:\Python\bin\Python.exe</snippet></ROW><ROW><id>15126180</id><snippet>D:\Python\bin\Python.exe</snippet></ROW><ROW><id>15126223</id><snippet>set_cookie</snippet></ROW><ROW><id>15126223</id><snippet>response['Set-Cookie'] = ('food=bread; drink=water; Path=/; max_age=10')
</snippet></ROW><ROW><id>15126223</id><snippet>Set-Cookie</snippet></ROW><ROW><id>15126223</id><snippet>response</snippet></ROW><ROW><id>15126223</id><snippet>Set-Cookie</snippet></ROW><ROW><id>15126223</id><snippet>set_cookie</snippet></ROW><ROW><id>15126223</id><snippet>class HttpResponseBase:

    def __init__(self, content_type=None, status=None, mimetype=None):
        # _headers is a mapping of the lower-case name to the original case of
        # the header (required for working with legacy systems) and the header
        # value. Both the name of the header and its value are ASCII strings.
        self._headers = {}
        self._charset = settings.DEFAULT_CHARSET
        self._closable_objects = []
        # This parameter is set by the handler. It's necessary to preserve the
        # historical behavior of request_finished.
        self._handler_class = None
        if mimetype:
            warnings.warn("Using mimetype keyword argument is deprecated, use"
                          " content_type instead",
                          DeprecationWarning, stacklevel=2)
            content_type = mimetype
        if not content_type:
            content_type = "%s; charset=%s" % (settings.DEFAULT_CONTENT_TYPE,
                    self._charset)
        self.cookies = SimpleCookie()
        if status:
            self.status_code = status

        self['Content-Type'] = content_type

    ...

    def set_cookie(self, key, value='', max_age=None, expires=None, path='/',
                   domain=None, secure=False, httponly=False):
        """
        Sets a cookie.

        ``expires`` can be:
        - a string in the correct format,
        - a naive ``datetime.datetime`` object in UTC,
        - an aware ``datetime.datetime`` object in any time zone.
        If it is a ``datetime.datetime`` object then ``max_age`` will be calculated.

        """
        self.cookies[key] = value
        if expires is not None:
            if isinstance(expires, datetime.datetime):
                if timezone.is_aware(expires):
                    expires = timezone.make_naive(expires, timezone.utc)
                delta = expires - expires.utcnow()
                # Add one second so the date matches exactly (a fraction of
                # time gets lost between converting to a timedelta and
                # then the date string).
                delta = delta + datetime.timedelta(seconds=1)
                # Just set max_age - the max_age logic will set expires.
                expires = None
                max_age = max(0, delta.days * 86400 + delta.seconds)
            else:
                self.cookies[key]['expires'] = expires
        if max_age is not None:
            self.cookies[key]['max-age'] = max_age
            # IE requires expires, so set it if hasn't been already.
            if not expires:
                self.cookies[key]['expires'] = cookie_date(time.time() +
                                                           max_age)
        if path is not None:
            self.cookies[key]['path'] = path
        if domain is not None:
            self.cookies[key]['domain'] = domain
        if secure:
            self.cookies[key]['secure'] = True
        if httponly:
            self.cookies[key]['httponly'] = True
</snippet></ROW><ROW><id>15126223</id><snippet>set_cookie</snippet></ROW><ROW><id>15126223</id><snippet>datetime</snippet></ROW><ROW><id>15126223</id><snippet>expires</snippet></ROW><ROW><id>15126223</id><snippet>self.cookie</snippet></ROW><ROW><id>15126223</id><snippet>key</snippet></ROW><ROW><id>15126223</id><snippet>["Set-Cookie"]</snippet></ROW><ROW><id>15126223</id><snippet>cookies</snippet></ROW><ROW><id>15126223</id><snippet>HttpResponse</snippet></ROW><ROW><id>15126223</id><snippet>WSGIHandler</snippet></ROW><ROW><id>15126223</id><snippet>response_headers = [(str(k), str(v)) for k, v in response.items()]
for c in response.cookies.values():
    response_headers.append((str('Set-Cookie'), str(c.output(header=''))))
</snippet></ROW><ROW><id>15126223</id><snippet>set_cookie()</snippet></ROW><ROW><id>15126223</id><snippet>Set-Cookie</snippet></ROW><ROW><id>15126223</id><snippet>Response</snippet></ROW><ROW><id>15126223</id><snippet>Set-Cookie</snippet></ROW><ROW><id>15126355</id><snippet>heroku labs:enable user-env-compile</snippet></ROW><ROW><id>15126639</id><snippet>[::2]</snippet></ROW><ROW><id>15126639</id><snippet>[::-2]</snippet></ROW><ROW><id>15126639</id><snippet>&gt;&gt;&gt; x = [1, 4, 6, 8, 3, 5, 7, 1, 5, 8, 3, 9, 2, 8]
&gt;&gt;&gt; x = sorted(x)
&gt;&gt;&gt; x[len(x)%2::2] + x[::-2]
[1, 2, 3, 5, 6, 8, 8, 9, 8, 7, 5, 4, 3, 1]
</snippet></ROW><ROW><id>15126704</id><snippet>\</snippet></ROW><ROW><id>15126704</id><snippet>/</snippet></ROW><ROW><id>15126704</id><snippet>\WebServices\</snippet></ROW><ROW><id>15126704</id><snippet>os.path.join</snippet></ROW><ROW><id>15126704</id><snippet>WSdirname = os.path.join(dirname, "WebServices")
</snippet></ROW><ROW><id>15126815</id><snippet>n</snippet></ROW><ROW><id>15126815</id><snippet>n</snippet></ROW><ROW><id>15126815</id><snippet>,g</snippet></ROW><ROW><id>15126868</id><snippet>s = df.groupby("keys").ids.agg(lambda x:len(x.unique()))
pd.value_counts(s).plot(kind="bar")
</snippet></ROW><ROW><id>15126936</id><snippet>static.File</snippet></ROW><ROW><id>15126936</id><snippet>rangedFile = static.File('/path/to/file.mp4',
                         defaultType='video/octet-stream')
return rangedFile.render_GET(request)
</snippet></ROW><ROW><id>15127237</id><snippet>y = np.array([5.4,6.3,6.5,6.2,8.1,7.9,6.7,6.8,4.9,5.8])
</snippet></ROW><ROW><id>15127237</id><snippet>X^T = U*S*V^T ([compact svd][1])
</snippet></ROW><ROW><id>15127237</id><snippet>b = V*S^-1*U^T*y
</snippet></ROW><ROW><id>15127266</id><snippet>for x in gradebook:
    print x[0], x[1]
</snippet></ROW><ROW><id>15127266</id><snippet>a, b, c = ('a','b','c')
</snippet></ROW><ROW><id>15127349</id><snippet>is</snippet></ROW><ROW><id>15127349</id><snippet>''</snippet></ROW><ROW><id>15127349</id><snippet>str</snippet></ROW><ROW><id>15127349</id><snippet>str</snippet></ROW><ROW><id>15127349</id><snippet>None</snippet></ROW><ROW><id>15127349</id><snippet>NoneType</snippet></ROW><ROW><id>15127452</id><snippet>&gt;&gt;&gt; first_name = 'Test'
&gt;&gt;&gt; last_name = 'Name'

&gt;&gt;&gt; %timeit "%s %s" % (first_name, last_name)
10000000 loops, best of 3: 168 ns per loop

&gt;&gt;&gt; %timeit ' '.join((first_name, last_name))
10000000 loops, best of 3: 157 ns per loop

&gt;&gt;&gt; %timeit first_name + ' ' + last_name
10000000 loops, best of 3: 103 ns per loop
</snippet></ROW><ROW><id>15127452</id><snippet>&gt;&gt;&gt; name_tuple = (first_name, last_name)

&gt;&gt;&gt; %timeit "%s %s" % name_tuple
10000000 loops, best of 3: 125 ns per loop

&gt;&gt;&gt; %timeit ' '.join(name_tuple)
10000000 loops, best of 3: 114 ns per loop
</snippet></ROW><ROW><id>15127803</id><snippet>from numpy.random import randn
import numpy as np
import pandas as pd

index = pd.date_range(start="18:10",periods=20,freq='min')
df = pd.DataFrame(randn(20,3),columns=list('abc'),index=index)
calindex = pd.date_range("18:12:30",periods=4,freq='5min')
caldata = pd.Series([10,20,30,40],index = calindex)

# if you use numpy 1.7
real_time = df.index.values
cali_time = caldata.index.values

# if you use numpy 1.6
real_time = np.array(df.index.values.view("i8") / 1000, dtype="datetime64[us]")
cali_time = np.array(caldata.index.values.view("i8") / 1000, dtype="datetime64[us]")

right_index = cali_time.searchsorted(real_time, side="left")
left_index = np.clip(right_index - 1, 0, len(caldata)-1)
right_index = np.clip(right_index, 0, len(caldata)-1)
left_time = cali_time[left_index]
right_time = cali_time[right_index]
left_diff = np.abs(left_time - real_time)
right_diff = np.abs(right_time - real_time)
caldata2 = caldata[np.where(left_diff &lt; right_diff, left_time, right_time)]
df["offset"] = caldata2.values
</snippet></ROW><ROW><id>15127946</id><snippet>file</snippet></ROW><ROW><id>15127946</id><snippet>seek()</snippet></ROW><ROW><id>15127946</id><snippet>IOError</snippet></ROW><ROW><id>15127946</id><snippet>file</snippet></ROW><ROW><id>15127946</id><snippet>try:
    f = open("nosuchfile.txt")
except IOError as e:
    print e.errno
</snippet></ROW><ROW><id>15127946</id><snippet>2</snippet></ROW><ROW><id>15127946</id><snippet>No such file or directory</snippet></ROW><ROW><id>15127946</id><snippet>No space left on device</snippet></ROW><ROW><id>15128096</id><snippet> /application.py
 /templates
     /hello.html
</snippet></ROW><ROW><id>15128096</id><snippet> /application
     /__init__.py
     /templates
         /hello.html
</snippet></ROW><ROW><id>15128096</id><snippet>templates</snippet></ROW><ROW><id>15128316</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; a = " Kingston-(USB) = 1GB, 2GB, 32GB . . . "
&gt;&gt;&gt; re.sub(r'[^a-z0-9]', '', a.lower())
'kingstonusb1gb2gb32gb'
</snippet></ROW><ROW><id>15128316</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; allowed = string.lowercase + string.digits
&gt;&gt;&gt; ''.join(c for c in a.lower() if c in allowed)
'kingstonusb1gb2gb32gb'
</snippet></ROW><ROW><id>15128316</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; allowed = set(string.lowercase + string.digits)
&gt;&gt;&gt; ''.join(filter(allowed.__contains__, a.lower()))
'kingstonusb1gb2gb32gb'
</snippet></ROW><ROW><id>15128567</id><snippet>def _fact(n):
    if n == 0:   # still need to handle the basis case
        return 1
    return n*_fact(n-1)

def fact(n):
    n0 = int(n)
    if n0 != n:
        raise ValueError("argument must make sense as an int")
    if n &lt; 0:
        raise ValueError("negative numbers not allowed")
    return _fact(n)
</snippet></ROW><ROW><id>15128567</id><snippet>!=</snippet></ROW><ROW><id>15128567</id><snippet>int</snippet></ROW><ROW><id>15128567</id><snippet>float</snippet></ROW><ROW><id>15128567</id><snippet>self.head</snippet></ROW><ROW><id>15128567</id><snippet>forward</snippet></ROW><ROW><id>15128567</id><snippet>None</snippet></ROW><ROW><id>15128567</id><snippet>key</snippet></ROW><ROW><id>15128567</id><snippet>__contains__()</snippet></ROW><ROW><id>15128567</id><snippet>None</snippet></ROW><ROW><id>15128567</id><snippet>valueOf()</snippet></ROW><ROW><id>15128567</id><snippet>self._root</snippet></ROW><ROW><id>15128567</id><snippet>__contains__()</snippet></ROW><ROW><id>15128567</id><snippet>__contains__()</snippet></ROW><ROW><id>15128567</id><snippet>self._root</snippet></ROW><ROW><id>15128567</id><snippet>self._root</snippet></ROW><ROW><id>15128567</id><snippet>class UniqueValue:
    pass

def __contains__(self, key, subtree=UniqueValue):
    if subtree is UniqueValue:
        subtree = self._root

    if subtree is None:  # base case
        return None
    elif key &lt; subtree.key: # target is left of the subtree root
        return self.__contains__(key, subtree.left) 
    elif key &gt; subtree.key: # target is right of the subtree root
        return self.__contains__(key, subtree.right) 
    else:                      # base case
        return subtree
</snippet></ROW><ROW><id>15128567</id><snippet>subtree is UniqueValue</snippet></ROW><ROW><id>15128629</id><snippet>stdout=subprocess.PIPE</snippet></ROW><ROW><id>15128629</id><snippet>result</snippet></ROW><ROW><id>15128629</id><snippet>communicate</snippet></ROW><ROW><id>15128629</id><snippet>sshpass -[args] rsync [source] [dest]
</snippet></ROW><ROW><id>15128629</id><snippet>sshpass -[args] rsync [source] [dest] | sort
</snippet></ROW><ROW><id>15128629</id><snippet>tee</snippet></ROW><ROW><id>15128629</id><snippet>stdout</snippet></ROW><ROW><id>15128629</id><snippet># Caution! untested code
result = []
process = subprocess.Popen(['sshpass', '-p', password, 'rsync', '-avz',
                            '--info=progress2', source12, destination], 
                           stdout=subprocess.PIPE)
while process.poll() is None:
    line = process.stdout.readline()
    print line
    result.append(line)
print sort(result)
</snippet></ROW><ROW><id>15128777</id><snippet>request = tornado.httpclient.HTTPRequest(url=url, method='POST', body=body, **validate_cert=False**)
</snippet></ROW><ROW><id>15128777</id><snippet>#tornado.httpclient.AsyncHTTPClient.configure("tornado.curl_httpclient.CurlAsyncHTTPClient")
</snippet></ROW><ROW><id>15128788</id><snippet>.py</snippet></ROW><ROW><id>15128788</id><snippet>imp.load_source</snippet></ROW><ROW><id>15128788</id><snippet>load_source</snippet></ROW><ROW><id>15128788</id><snippet>importlib.SourceFileLoader(name, path).load_module(name)
</snippet></ROW><ROW><id>15128971</id><snippet>frozenset of item lists</snippet></ROW><ROW><id>15128971</id><snippet>frozenset of item lists</snippet></ROW><ROW><id>15129621</id><snippet>&gt;&gt;&gt; lines = [l.rstrip('\n') for l in open('words.txt')]
&gt;&gt;&gt; print('\n'.join(sorted(lines, key=lambda l:int(l.split()[0]))))
2 dinosaur
3 moose
6 apple
7 dog
</snippet></ROW><ROW><id>15129641</id><snippet>writerow</snippet></ROW><ROW><id>15129641</id><snippet>spamwriter.writerow([u' '.join(model.a.stripped_strings).encode('utf8').strip()])
</snippet></ROW><ROW><id>15129641</id><snippet>unicode()</snippet></ROW><ROW><id>15130070</id><snippet>CScript.exe</snippet></ROW><ROW><id>15130070</id><snippet>CScript example.vbs //NoLogo &gt; output.txt
</snippet></ROW><ROW><id>15130070</id><snippet>WScript.StdOut</snippet></ROW><ROW><id>15130070</id><snippet>.Write</snippet></ROW><ROW><id>15130070</id><snippet>.WriteLine</snippet></ROW><ROW><id>15130070</id><snippet>' example.vbs
Main

Sub Main()
    Dim result
    result = 1 / Cos(25)
    WScript.StdOut.Write result
End Sub
</snippet></ROW><ROW><id>15130070</id><snippet>WScript.exe</snippet></ROW><ROW><id>15130070</id><snippet>WScript example2.vbs
</snippet></ROW><ROW><id>15130070</id><snippet>FileSystemObject</snippet></ROW><ROW><id>15130070</id><snippet>' example2.vbs
Main

Sub Main()
    Dim result, fso, fs
    result = 1 / Cos(25)
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set fs  = fso.CreateTextFile("output.txt", True)
    fs.Write result
    fs.Close
End Sub
</snippet></ROW><ROW><id>15130322</id><snippet>"statt 29,95 â‚¬ nur "
</snippet></ROW><ROW><id>15130322</id><snippet>text = re.sub(r'statt \d+,\d+ â‚¬ nur ', '', text)
</snippet></ROW><ROW><id>15130392</id><snippet>def gen_user_random():
    from Fourganizical import pack8
    import time,sys
    print 'Hey there user, start a-bashing that keyboard to make some randomness.'
    keystimes = []
    lasttime = None
    while len(keystimes) &lt; 20:
            key = getch()
            timenow = (time.time() + time.clock())
            if lasttime:
                    timesince = timenow-lasttime
                    keystimes.append(int(timesince*100000000000000000))
            lasttime = timenow
    print 'Check out this *nasty* random number you made!'
    rnum = int(''.join([str(x) for x in keystimes]))
    print rnum
    print 'And OMG here is that *nasty* set of bytes it made!'
    rbytes = pack8(rnum)
    print
    sys.stdout.write(''.join(rbytes))
    print
    print
    return keystimes
</snippet></ROW><ROW><id>15130750</id><snippet>'(\d+)'</snippet></ROW><ROW><id>15130750</id><snippet>'[^\d]*'</snippet></ROW><ROW><id>15130750</id><snippet>9511</snippet></ROW><ROW><id>15130750</id><snippet>findall</snippet></ROW><ROW><id>15130750</id><snippet>@TEXT</snippet></ROW><ROW><id>15130750</id><snippet>my_values = re.findall("&lt;POPULARITY(?:\D+=\"\S*\")*\s+TEXT=\"(\d*)\"", xml) # returning a list btw
</snippet></ROW><ROW><id>15130750</id><snippet>@TEXT</snippet></ROW><ROW><id>15130750</id><snippet> re.findall("&lt;POPULARITY\s+(?:\S+\s+)*\w+=\"(\d+)\"", xml)
</snippet></ROW><ROW><id>15130750</id><snippet>(?:...)</snippet></ROW><ROW><id>15130750</id><snippet>(...)</snippet></ROW><ROW><id>15130750</id><snippet>\S</snippet></ROW><ROW><id>15130750</id><snippet>\D</snippet></ROW><ROW><id>15131315</id><snippet>re</snippet></ROW><ROW><id>15131315</id><snippet>itertools</snippet></ROW><ROW><id>15131315</id><snippet>import csv
import re

re_AISD = re.compile(r'(AISD)\s+(\S+)')
re_WKU = re.compile(r'(WKU)\s+(\S+)')
re_Filed = re.compile(r'(Filed)\s+(.*?\d{4})')
re_Int = re.compile(r'(Int.)  Cl.\s+(\w+ \d+)')

FLD_REGEXPES = (re_AISD, re_WKU, re_Filed, re_Int)

def get_field(line):
    for ree in FLD_REGEXPES:
        rx = ree.search(line)
        if rx:
            return (rx.group(1), rx.group(2))
    return (None, None)

def convert_file(fname):
    fields = 'WKU Filed Int. AISD'.split()
    f = open(fname, 'r')
    lines = f.readlines()
    f.close()
    with open(fname + '.csv', 'wb') as oufile:
        writer = csv.DictWriter(oufile, fieldnames=fields, restval = '?', dialect='excel-tab')
        writer.writerow(dict((h, h) for h in fields))
        rec = {}
        for line in lines:
            k, v = get_field(line)
            if k:
                print('[%s]=[%s]' % (k, v))
                if k == 'WKU': # start of new record
                    if rec:
                        writer.writerow(rec)
                    rec = {}
                rec[k] = v
        if rec:
            writer.writerow(rec)
</snippet></ROW><ROW><id>15131315</id><snippet>C:/Users/Na/Desktop/example.txt</snippet></ROW><ROW><id>15131315</id><snippet>\</snippet></ROW><ROW><id>15131315</id><snippet>\n</snippet></ROW><ROW><id>15131315</id><snippet>\t</snippet></ROW><ROW><id>15131315</id><snippet>\\</snippet></ROW><ROW><id>15131315</id><snippet>/</snippet></ROW><ROW><id>15131315</id><snippet>r</snippet></ROW><ROW><id>15131315</id><snippet>re_AISD</snippet></ROW><ROW><id>15131489</id><snippet>[A-Z][a-z]*</snippet></ROW><ROW><id>15131489</id><snippet>Old McDonald</snippet></ROW><ROW><id>15131489</id><snippet>[A-Z][A-Za-z ]*</snippet></ROW><ROW><id>15131489</id><snippet>import re
line = '|person=[[Old McDonald]]'
matchLine = re.match ('\|[a-z]+=(?:\[\[)?([A-Z][A-Za-z ]*)\]\]', line)
print matchLine.group (1)
</snippet></ROW><ROW><id>15131489</id><snippet>Old McDonald</snippet></ROW><ROW><id>15131489</id><snippet>re.search</snippet></ROW><ROW><id>15131489</id><snippet>re.match</snippet></ROW><ROW><id>15131489</id><snippet>import re
line = 'blahblahblah|person=[[Old McDonald]]blahblahblah'
matchLine = re.search ('\|[a-z]+=(?:\[\[)?([A-Z][A-Za-z ]*)\]\]', line)
print matchLine.group (1)
</snippet></ROW><ROW><id>15131588</id><snippet>$</snippet></ROW><ROW><id>15131588</id><snippet>regex = re.findall(r'(?:[\d]{1,3})\.(?:[\d]{1,3})\.(?:[\d]{1,3})\.(?:[\d]{1,3})', text)
</snippet></ROW><ROW><id>15131588</id><snippet>regex = re.findall(r'(?:\d{1,3}\.){3}\d{1,3}', text)
</snippet></ROW><ROW><id>15131658</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>15131658</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>15131658</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>15131658</id><snippet>~/.profile</snippet></ROW><ROW><id>15131658</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>15131658</id><snippet>/etc/profile</snippet></ROW><ROW><id>15132458</id><snippet>int</snippet></ROW><ROW><id>15132458</id><snippet>longinteger    ::=  integer ("l" | "L")
integer        ::=  decimalinteger | octinteger | hexinteger | bininteger
decimalinteger ::=  nonzerodigit digit* | "0"
octinteger     ::=  "0" ("o" | "O") octdigit+ | "0" octdigit+
hexinteger     ::=  "0" ("x" | "X") hexdigit+
bininteger     ::=  "0" ("b" | "B") bindigit+
nonzerodigit   ::=  "1"..."9"
octdigit       ::=  "0"..."7"
bindigit       ::=  "0" | "1"
hexdigit       ::=  digit | "a"..."f" | "A"..."F"
</snippet></ROW><ROW><id>15132458</id><snippet>.</snippet></ROW><ROW><id>15132530</id><snippet>&lt;html&gt;

&lt;table&gt;
  %for item in res:
    title:{{item[1]}}
    &lt;br/&gt;
    Decription:{{item[2]}}
    &lt;br/&gt;
    Picture:{{item[3]}}
    &lt;br/&gt;
    posted by:{{item[4]}}
    &lt;br/&gt;
    &lt;br/&gt;
  %end
&lt;/table&gt;

&lt;/html&gt;
</snippet></ROW><ROW><id>15132568</id><snippet>t1 = time.gmtime(1358252743.927)
print t1
</snippet></ROW><ROW><id>15132568</id><snippet>time.struct_time(tm_year=2013, tm_mon=1, tm_mday=15, tm_hour=12, tm_min=25, tm_sec=43, tm_wday=1, tm_yday=15, tm_isdst=0)
</snippet></ROW><ROW><id>15132641</id><snippet>class Enum(object):
    @classmethod
    def tostring(cls, val):
        for k,v in vars(cls).iteritems():
            if v==val:
                return k

    @classmethod
    def fromstring(cls, str):
        return getattr(cls, str.upper(), None)

    @classmethod
    def build(cls, str):
        for val, name in enumerate(str.split()):
            setattr(cls, name, val)
class MyEnum(Enum):
    VAL1, VAL2, VAL3 = range(3)

class YourEnum(Enum):
    CAR, BOAT, TRUCK = range(3)

class MoreEnum(Enum):
    pass

print MyEnum.fromstring('Val1')
print MyEnum.tostring(2)
print MyEnum.VAL1 

print YourEnum.BOAT
print YourEnum.fromstring('TRUCK')

# Dodgy semantics for creating enums.
# Should really be
# MoreEnum = Enum.build("CIRCLE SQUARE")
MoreEnum.build("CIRCLE SQUARE")
print MoreEnum.CIRCLE
print MoreEnum.tostring(1)
print MoreEnum.tostring(MoreEnum.CIRCLE)
</snippet></ROW><ROW><id>15132715</id><snippet>import datetime
import time

user_reg_time = datetime.datetime.strptime("20091129060140", "%Y%M%d%H%m%S")
epochs_time = time.mktime(user_time_reg.timetuple())
</snippet></ROW><ROW><id>15132715</id><snippet>import datetime
import time

user_reg_time = datetime.datetime.strptime("20091129060140", "%Y%M%d%H%m%S")
if datetime.datetime.now() - user_reg_time &gt; datetime.timedelta(weeks=4):
    print "User was registered more than 4 weeks ago"
</snippet></ROW><ROW><id>15132719</id><snippet>def _total(self, cr, uid, ids, name, args, context=None):
    res = {}
    for record in self.browse(cr, uid, ids, context=context):
        res[record.id] =  record.hour_from + record.hour_to
    return res
</snippet></ROW><ROW><id>15132719</id><snippet>def _total(self, cr, uid, ids, name, args, context=None):
    res = {}
    for record in self.browse(cr, uid, ids, context=context):
        res[record.id] = {'totalhour' : 0.0}
        res[record.id]['totalhour'] = record.hour_from + record.hour_to
    return res
</snippet></ROW><ROW><id>15133640</id><snippet>list</snippet></ROW><ROW><id>15133640</id><snippet>set</snippet></ROW><ROW><id>15133640</id><snippet>set</snippet></ROW><ROW><id>15133640</id><snippet>#-*- encoding: utf8 -*-
from collections import defaultdict

INPUT = """you have requested a debate on this subject in the course of the next few days , during this part-session . {##} sus señorías han solicitado un debate sobre el tema para los próximos días , en el curso de este período de sesiones . {##} 0-0 0-1 1-2 2-3 3-4 4-5 5-6 6-7 7-8 8-9 12-10 13-11 14-11 15-12 16-13 17-14 9-15 10-16 11-17 18-18 17-19 19-21 20-22"""

if __name__ == "__main__":
    english, spanish, trans = INPUT.split(" {##} ")
    eng_words = english.split(' ')
    spa_words = spanish.split(' ')
    transtable = defaultdict(list)
    for e, s in [i.split('-') for i in trans.split(' ')]:
        transtable[eng_words[int(e)]].append(spa_words[int(s)])

    print(transtable['course'])
    print(transtable['you'])
    print(" ".join(transtable['course']))
    print(" ".join(transtable['you']))
</snippet></ROW><ROW><id>15133640</id><snippet>transtable</snippet></ROW><ROW><id>15133640</id><snippet>print(" ".join(transtable['this'])</snippet></ROW><ROW><id>15133640</id><snippet>el este</snippet></ROW><ROW><id>15133640</id><snippet>'this'</snippet></ROW><ROW><id>15133640</id><snippet>transtable['this'][0]</snippet></ROW><ROW><id>15133640</id><snippet>tt = defaultdict(set)
for e, s in [i.split('-') for i in trans.split(' ')]:
    tt[int(e)].add(int(s))

query = 'this'
for i in tt[eng_words.index(query)]:
    print i
</snippet></ROW><ROW><id>15133640</id><snippet>7</snippet></ROW><ROW><id>15133809</id><snippet>pydoc.plain</snippet></ROW><ROW><id>15133809</id><snippet>pydoc.plain(pydoc.render_doc(help))
</snippet></ROW><ROW><id>15133809</id><snippet>&gt;&gt;&gt; help(pydoc.plain)
Help on function plain in module pydoc:

plain(text)
    Remove boldface formatting from text.
</snippet></ROW><ROW><id>15133809</id><snippet>pydoc.render_doc</snippet></ROW><ROW><id>15133809</id><snippet>renderer</snippet></ROW><ROW><id>15133809</id><snippet>pydoc.render_doc(help, renderer=pydoc.plaintext)
</snippet></ROW><ROW><id>15133905</id><snippet>def PID(value):
    ''' Mixin Class Generator For Polymorphic Identity Inheritance '''
    class MixinClassForPolymorphicIdentityInheritance: 
        __mapper_args__ = {'polymorphic_identity': value}
    return MixinClassForPolymorphicIdentityInheritance
</snippet></ROW><ROW><id>15133905</id><snippet>class InheritingClass(PID(pidv), Parent): pass
</snippet></ROW><ROW><id>15133935</id><snippet>cv2.findContours()</snippet></ROW><ROW><id>15133935</id><snippet>contours,hierarchy = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
</snippet></ROW><ROW><id>15133935</id><snippet>contours</snippet></ROW><ROW><id>15133935</id><snippet>cv2.arcLength()</snippet></ROW><ROW><id>15133935</id><snippet>   for contour in contours:
        perimeter = cv2.arcLength(contour, True)
</snippet></ROW><ROW><id>15134129</id><snippet>from PyQt4.QtCore import *
from PyQt4.QtGui import *

import time
import matplotlib as mpl
import matplotlib.pyplot as plt

import numpy as np
import scipy.optimize as opt


class Imline(QObject):
    '''
    Plot interactive line
    '''

    def __init__(self, plt, image = None, scale = 1, *args, **kwargs):
        '''
        Initialize imline
        '''
        super(Imline, self).__init__(None)

        # set plot        
        self.__plt = plt
        self.scale = scale        

        # initialize start and end points        
        self.startX = None
        self.startY = None
        self.endX = None
        self.endY = None  

        # initialize line2d        
        self.__line2d = None
        self.mask = None

        # store information to generate mask
        if(image is not None):        
            height, width = image.shape

        else:
            height = None
            width = None            

        self.__width = width
        self.__height = height

        # set signals and slots        
        self.__c1 = self.__plt.figure.canvas.mpl_connect('button_press_event', self.__mousePressEvent)
        self.__c2 = self.__plt.figure.canvas.mpl_connect('motion_notify_event', self.__mouseMoveEvent)
        self.__c3 = self.__plt.figure.canvas.mpl_connect('button_release_event', self.__mouseReleaseEvent)       

        self.imlineEventFinished = SIGNAL('imlineEventFinished')        


    def __mousePressEvent(self, event):
        '''
        Starting point
        '''

        # get xy data        
        xdata = event.xdata
        ydata = event.ydata

        # check if mouse is outside the figure        
        if((xdata is None) | (ydata is None) | (self.startX is not None) | (self.startY is not None) | (self.endX is not None) | (self.endY is not None)):
            return       

        # start point        
        self.startX = xdata
        self.startY = ydata


    def __mouseMoveEvent(self, event):
        '''
        Draw interactive line
        '''

        # get xy data        
        xdata = event.xdata
        ydata = event.ydata

        # check if mouse is outside the figure        
        if((xdata is None) | (ydata is None) | (self.startX is None) | (self.startY is None) | (self.endX is not None) | (self.endY is not None)):
            return      

        # remove line        
        if(self.__line2d is not None):
            self.__line2d[0].remove()

        # set x, t
        x = [self.startX, xdata]
        y = [self.startY, ydata]        

        # plot line
        self.__plt.axes.hold(True)
        xlim = self.__plt.axes.get_xlim()
        ylim = self.__plt.axes.get_ylim()
        self.__line2d = self.__plt.axes.plot(x, y, color = [1, 0, 0])
        self.__plt.axes.set_xlim(xlim)
        self.__plt.axes.set_ylim(ylim)

        # update plot        
        self.__plt.draw()
        self.__plt.show()


    def __mouseReleaseEvent(self, event):
        '''
        End point
        '''     

        # get xy data        
        xdata = event.xdata
        ydata = event.ydata

        # check if mouse is outside the figure        
        if((xdata is None) | (ydata is None) | (self.endX is not None) | (self.endY is not None)):
            return             

        # remove line        
        if(self.__line2d is not None):
            self.__line2d[0].remove()

        self.endX = xdata
        self.endY = ydata   

        P = np.polyfit([self.startX, self.endX], [self.startY, self.endY],1 )
        self.__m = P[0]
        self.__q = P[1]

        # update plot        
        self.__plt.draw()
        self.__plt.show()

        # disconnect the vents        
        self.__plt.figure.canvas.mpl_disconnect(self.__c1)
        self.__plt.figure.canvas.mpl_disconnect(self.__c2)
        self.__plt.figure.canvas.mpl_disconnect(self.__c3)

        # emit SIGNAL        
        self.emit(SIGNAL('imlineEventFinished'))


    def createMask(self):
        '''
        Create mask from painted line
        '''

        # check height width        
        if((self.__height is None) | (self.__width is None)):
            return None

        # initialize mask        
        mask = np.zeros((self.__height, self.__width))        

        # get m q        
        m = self.__m
        q = self.__q        

        print m, q

        # get points        
        startX = np.int(self.startX)   
        startY = np.int(self.startY) 
        endX = np.int(self.endX) 
        endY = np.int(self.endY)

        # ensure startX &lt; endX
        tempStartX = startX
        if(startX &gt; endX):
            startX = endX
            endX = tempStartX

        # ensure startY &lt; endY
        tempStartY = startY
        if(startY &gt; endY):
            startY = endY
            endY = tempStartY

        # save points
        self.startX = startX
        self.endX = endX
        self.startY = startY
        self.endY = endY

        # intialize data        
        xData = np.arange(startX, endX)
        yData = np.arange(startY, endY)

        # scan on x        
        for x in xData:
            row = round(m*x + q)
            if(row &lt; startY):
                row = startY
            if(row &gt; endY):
                row = endY
            mask[row, x] = 1

        # scan on y
        for y in yData:
            col = round((y - q) / m)
            if(col &lt; startX):
                col = startX
            if(col &gt; endX):
                col = endX
            mask[y, col] = 1

        # get boolean mask        
        mask = mask == 1        

        # return boolean mask
        return mask
</snippet></ROW><ROW><id>15134251</id><snippet>_, FILENAME = os.path.split(infile)
</snippet></ROW><ROW><id>15134251</id><snippet>_</snippet></ROW><ROW><id>15134388</id><snippet>Bottle.match</snippet></ROW><ROW><id>15134388</id><snippet>path</snippet></ROW><ROW><id>15134388</id><snippet>'/show_magic'</snippet></ROW><ROW><id>15134388</id><snippet>method</snippet></ROW><ROW><id>15134388</id><snippet>GET</snippet></ROW><ROW><id>15134388</id><snippet>POST</snippet></ROW><ROW><id>15134388</id><snippet>Route</snippet></ROW><ROW><id>15134388</id><snippet>default_app().match({'PATH_INFO': path, 'REQUEST_METHOD': method})
</snippet></ROW><ROW><id>15134388</id><snippet>Route</snippet></ROW><ROW><id>15134388</id><snippet>callback</snippet></ROW><ROW><id>15134388</id><snippet>call</snippet></ROW><ROW><id>15134388</id><snippet>build</snippet></ROW><ROW><id>15134388</id><snippet>rule</snippet></ROW><ROW><id>15134388</id><snippet>default_app().router.build(route.rule, name='me')
</snippet></ROW><ROW><id>15134549</id><snippet>try...except</snippet></ROW><ROW><id>15134549</id><snippet>d = datetime.datetime(targetYear,targetMonth,1,hour,min,sec)
d = d + datetime.timedelta(days=targetDayOfMonth-1)
</snippet></ROW><ROW><id>15134549</id><snippet>d = datetime.datetime(2013, 2, 1, 10, 15) # day of the month is 1
# since the target day is the 29th and that is 28 days after the first
# subtract 1 before creating the timedelta.
d = d + datetime.timedelta(days=28) 
print d
# datetime.datetime(2013, 3, 1, 10, 15)
</snippet></ROW><ROW><id>15134708</id><snippet>class Book(models.Model):
   book_name = models.CharField(max_length = 32, unique = True)
   author_name = models.CharField(max_length = 32, unique = True)
   publisher_name = models.CharField(max_length = 32, unique = True
</snippet></ROW><ROW><id>15134708</id><snippet>def save_book(request):  
 if request.POST:
   book_name       = request.GET.get('book_name')
   author_name   = request.GET.get('author_name')
   publisher_name = request.GET.get('publisher_name') 
   Book.object.creat(book_name, author_name,publisher_name)
</snippet></ROW><ROW><id>15134710</id><snippet>save_screenshot(r"C:\Temp\picture.jpg", "JPG")
</snippet></ROW><ROW><id>15134710</id><snippet>save_screenshot("""C:\Temp\picture.jpg""", "JPG")
</snippet></ROW><ROW><id>15134855</id><snippet>np.polyfit</snippet></ROW><ROW><id>15134855</id><snippet>if-else</snippet></ROW><ROW><id>15134855</id><snippet>np.where</snippet></ROW><ROW><id>15135229</id><snippet>b = np.array([True,True,True,False,False,True,True,False,True,True,True,True,False])
idx = np.argwhere(np.diff(np.r_[False, b, False])).reshape(-1, 2)
idx[:, 1] -= 1
print idx
</snippet></ROW><ROW><id>15135229</id><snippet>[[ 0  2]
 [ 5  6]
 [ 8 11]]
</snippet></ROW><ROW><id>15135546</id><snippet>from StringIO import StringIO

txt = """a       b       c       d
eggs    ham     1.0     0.0
eggs    ham     0.0     0.5
spam    eggs    0.0     1.0
spam    eggs    0.0     1.0"""

df = pd.read_csv(StringIO(txt), sep="\\s+")
df.groupby(["a","b"], as_index=False).mean()
</snippet></ROW><ROW><id>15135870</id><snippet>labeltext</snippet></ROW><ROW><id>15135870</id><snippet>StringVar</snippet></ROW><ROW><id>15135870</id><snippet>str</snippet></ROW><ROW><id>15135870</id><snippet>list</snippet></ROW><ROW><id>15135870</id><snippet>labeltext</snippet></ROW><ROW><id>15135870</id><snippet>m + e</snippet></ROW><ROW><id>15135870</id><snippet>e</snippet></ROW><ROW><id>15135870</id><snippet>labeltext</snippet></ROW><ROW><id>15135870</id><snippet>m</snippet></ROW><ROW><id>15135870</id><snippet>def onButton(self):
    m=self.entryvar.get()
    e=self.labeltext.get()
    self.labeltext.set(m + e)
</snippet></ROW><ROW><id>15135978</id><snippet>urllib2</snippet></ROW><ROW><id>15135978</id><snippet>urllib2</snippet></ROW><ROW><id>15135978</id><snippet>httplib</snippet></ROW><ROW><id>15136059</id><snippet>cv2.isContourConvex(contour)</snippet></ROW><ROW><id>15136318</id><snippet>cv2.dilate</snippet></ROW><ROW><id>15136318</id><snippet>import numpy as np
import cv2

img = cv2.imread("e_5.jpg",0)
size = np.size(img)
skel = np.zeros(img.shape,np.uint8)

ret,img = cv2.threshold(img,127,255,0)
element = cv2.getStructuringElement(cv2.MORPH_CROSS,(3,3))
img = 255 - img
img = cv2.dilate(img, element, iterations=3)

done = False

while( not done):
    eroded = cv2.erode(img,element)
    temp = cv2.dilate(eroded,element)
    temp = cv2.subtract(img,temp)
    skel = cv2.bitwise_or(skel,temp)
    img = eroded.copy()

    zeros = size - cv2.countNonZero(img)
    if zeros==size:
        done = True
</snippet></ROW><ROW><id>15136318</id><snippet>scipy.ndimage.morphology</snippet></ROW><ROW><id>15136318</id><snippet>import scipy.ndimage.morphology as m
import numpy as np
import cv2

def skeletonize(img):
    h1 = np.array([[0, 0, 0],[0, 1, 0],[1, 1, 1]]) 
    m1 = np.array([[1, 1, 1],[0, 0, 0],[0, 0, 0]]) 
    h2 = np.array([[0, 0, 0],[1, 1, 0],[0, 1, 0]]) 
    m2 = np.array([[0, 1, 1],[0, 0, 1],[0, 0, 0]])    
    hit_list = [] 
    miss_list = []
    for k in range(4): 
        hit_list.append(np.rot90(h1, k))
        hit_list.append(np.rot90(h2, k))
        miss_list.append(np.rot90(m1, k))
        miss_list.append(np.rot90(m2, k))    
    img = img.copy()
    while True:
        last = img
        for hit, miss in zip(hit_list, miss_list): 
            hm = m.binary_hit_or_miss(img, hit, miss) 
            img = np.logical_and(img, np.logical_not(hm)) 
        if np.all(img == last):  
            break
    return img

img = cv2.imread("e_5.jpg",0)
ret,img = cv2.threshold(img,127,255,0)
element = cv2.getStructuringElement(cv2.MORPH_CROSS,(3,3))
img = 255 - img
img = cv2.dilate(img, element, iterations=3)

skel = skeletonize(img)
imshow(skel, cmap="gray", interpolation="nearest")
</snippet></ROW><ROW><id>15136559</id><snippet>Column('created_on', DateTime, default=datetime.datetime.now)

Column('last_updated', DateTime, onupdate=datetime.datetime.now)
</snippet></ROW><ROW><id>15136572</id><snippet>urllib.request.urlopen(requrl)</snippet></ROW><ROW><id>15136572</id><snippet>httpreq</snippet></ROW><ROW><id>15136572</id><snippet>None</snippet></ROW><ROW><id>15136572</id><snippet>try</snippet></ROW><ROW><id>15136572</id><snippet>None</snippet></ROW><ROW><id>15136572</id><snippet>httpreq = None

try:
    httpreq = urllib.request.urlopen(requrl)

# ...

if httpreq is not None and httpreq.getcode() == 200:
</snippet></ROW><ROW><id>15136597</id><snippet>getsize</snippet></ROW><ROW><id>15136597</id><snippet>glob.glob</snippet></ROW><ROW><id>15136597</id><snippet>os.path.getsize(glob.glob('/home/zurelsoft/*'))
</snippet></ROW><ROW><id>15136597</id><snippet>glob</snippet></ROW><ROW><id>15136597</id><snippet>getsize</snippet></ROW><ROW><id>15136597</id><snippet>for filename in glob.glob('/home/zurelsoft/*'):
   print(os.path.getsize(filename))
</snippet></ROW><ROW><id>15136684</id><snippet>&lt;?xml</snippet></ROW><ROW><id>15136684</id><snippet>svg</snippet></ROW><ROW><id>15136684</id><snippet>import xml.etree.cElementTree as et

def is_svg(filename):
    tag = None
    with open(filename, "r") as f:
        try:
            for event, el in et.iterparse(f, ('start',)):
                tag = el.tag
                break
        except et.ParseError:
            pass
    return tag == '{http://www.w3.org/2000/svg}svg'
</snippet></ROW><ROW><id>15136684</id><snippet>cElementTree</snippet></ROW><ROW><id>15136684</id><snippet>timeit</snippet></ROW><ROW><id>15136684</id><snippet>iterparse</snippet></ROW><ROW><id>15136720</id><snippet>myNewJSONData = json.dumps({'data': list1, 'info': list2})
</snippet></ROW><ROW><id>15136720</id><snippet>list1</snippet></ROW><ROW><id>15136720</id><snippet>list2</snippet></ROW><ROW><id>15136826</id><snippet>n</snippet></ROW><ROW><id>15136826</id><snippet>heapq.nlargest</snippet></ROW><ROW><id>15136826</id><snippet>def highest(L, n):
    return heapq.nlargest(n, enumerate(L), key=operator.itemgetter(1))

&gt;&gt;&gt; M = [102, 56, 2355, 3, 25, 78, 19, 25, 1002, -54, 0, 23, -1]
&gt;&gt;&gt; highest(M,5)
[(2, 2355), (8, 1002), (0, 102), (5, 78), (1, 56)]
</snippet></ROW><ROW><id>15136826</id><snippet>N</snippet></ROW><ROW><id>15136826</id><snippet>n</snippet></ROW><ROW><id>15136885</id><snippet>property</snippet></ROW><ROW><id>15136885</id><snippet>class Point(object):
    __slots__= ("x", "y", "z", "data", "_classification")
    def __init__(self, x, y, z):
        self.x = float(x)
        self.y = float(y)
        self.z = float(z)
        self.data = [self.x,self.y,self.z]

    @property
    def classification(self):
        return getattr(self, '_classification', None)

    @classification.setter
    def classification(self, value):
        self._classification = value
        if value:
            self.data = self.data[:3] + [value]
        else:
            self.data = self.data[:3]
</snippet></ROW><ROW><id>15136885</id><snippet>classification</snippet></ROW><ROW><id>15136885</id><snippet>classification</snippet></ROW><ROW><id>15136885</id><snippet>classification</snippet></ROW><ROW><id>15136885</id><snippet>p = Point(1, 2, 3)
p.classification = 50  # calls the second `classification` method, the setter, for you.
print p.classification # calls the first `classification` method, the getter.
</snippet></ROW><ROW><id>15136885</id><snippet>classification</snippet></ROW><ROW><id>15136885</id><snippet>data</snippet></ROW><ROW><id>15136885</id><snippet>classification</snippet></ROW><ROW><id>15136914</id><snippet>str(('4.3.0-18107', 1)) = "('4.3.0-18107', 1)"
</snippet></ROW><ROW><id>15136914</id><snippet>if "('4.3.0-18107', 1)" in '4.3.0-18107' # False
</snippet></ROW><ROW><id>15136914</id><snippet>if '4.3.0-18107' in "('4.3.0-18107', 1)" # True 
</snippet></ROW><ROW><id>15136914</id><snippet>if '4.3.0-18107' in ('4.3.0-18107', 1)[0] # True
</snippet></ROW><ROW><id>15136914</id><snippet>buildno=buildno[0] 
version=str(version.strip()) 
buildno=str(buildno.strip()) 
if version == buildno
</snippet></ROW><ROW><id>15136914</id><snippet>if str(version).strip() == str(buildno[0]).strip():
if str(version).strip() in str(buildno[0]).strip():
</snippet></ROW><ROW><id>15137170</id><snippet>0</snippet></ROW><ROW><id>15137170</id><snippet>-0</snippet></ROW><ROW><id>15137170</id><snippet>from __future__ import division

from numpy import *

Radius=10
N=1024
dx=2*Radius/N
dy=dx
x=r_[-Radius:Radius:dx]
y=r_[-Radius:Radius:dy]
X, Y = meshgrid(x,y)
R = sqrt(X**2+Y**2)
PHI = arctan2(Y,X)

ringthing = R &lt; Radius
ring = zeros((2,N,N),dtype=complex)
ring[0] = ringthing
ring[1] = ringthing*exp(1j*PHI)

print ring[1][-1, 0], angle(ring[1][-1, 0])
print ring[1][0, -1], angle(ring[1][0, -1])
</snippet></ROW><ROW><id>15137170</id><snippet>(-0+0j) 3.14159265359
0j 0.0
</snippet></ROW><ROW><id>15137646</id><snippet>-1</snippet></ROW><ROW><id>15137646</id><snippet>def add_release(self, release, index=-1):
    self.releases.insert(index, release)
</snippet></ROW><ROW><id>15137646</id><snippet>.insert()</snippet></ROW><ROW><id>15137714</id><snippet>os.readlink</snippet></ROW><ROW><id>15137714</id><snippet>os.path.basename</snippet></ROW><ROW><id>15137714</id><snippet>os.path.basename(os.readlink('/jffs2/a.bin'))
</snippet></ROW><ROW><id>15138061</id><snippet>class Server(object):
    _cp_config = {
        'tools.sessions.on': True,
        'tools.auth.on': True
    }   
    auth = AuthController()      
    @cherrypy.expose
    @require()
    def index(self):
        f = open ("file.txt","r")
        link = f.read()
        f.close()
        myText = "Hello World" 
        html = """
        &lt;html&gt;
            &lt;body&gt;
                &lt;p&gt;%s&lt;/p&gt;          
                &lt;a href="%s" &gt;&lt;img src="images/go_online.png"&gt;&lt;/a&gt;
            &lt;/body&gt;
        &lt;/html&gt;
        """ %(myText, link)        
        return html
    index.exposed = True
</snippet></ROW><ROW><id>15138090</id><snippet>numpy.argsort()</snippet></ROW><ROW><id>15138090</id><snippet>from StringIO import StringIO
import numpy as np
import pandas as pd

txt = """RUN_START_DATE,PUSHUP_START_DATE,SITUP_START_DATE,PULLUP_START_DATE
2013-01-24,2013-01-02,2013-01-30,2013-02-03
2013-01-30,2013-01-21,2013-01-13,2013-01-06
2013-01-29,2013-01-28,2013-01-01,2013-01-29
2013-02-16,2013-02-12,2013-01-04,2013-02-11
2013-01-06,2013-02-07,2013-02-25,2013-02-12
2013-01-26,2013-01-28,2013-02-12,2013-01-10
2013-01-26,2013-02-10,2013-01-12,2013-01-30
2013-01-03,2013-01-24,2013-01-19,2013-01-02
2013-01-22,2013-01-13,2013-02-03,2013-02-05
2013-02-06,2013-01-16,2013-02-07,2013-01-11"""
df = pd.read_csv(StringIO(txt))
idx = np.argsort(df, axis=1)
buf = StringIO()
idx.to_csv(buf, index=False, header=False)
print buf.getvalue()
</snippet></ROW><ROW><id>15138090</id><snippet>1,0,2,3
3,2,1,0
2,1,0,3
2,3,1,0
0,1,3,2
3,0,1,2
2,0,3,1
3,0,2,1
1,0,2,3
3,1,0,2
</snippet></ROW><ROW><id>15138558</id><snippet>order = ['item 4.1', 'item 2.1', 'item 3.1', 'item 1.1']
my_list.sort(key=lambda x: order.index(x[0]))
</snippet></ROW><ROW><id>15138558</id><snippet>my_list</snippet></ROW><ROW><id>15138558</id><snippet>[['item 4.1', 'item 4.2', 'item 4.3', 'item 4.4', 'item 4.5'],
 ['item 2.1', 'item 2.2', 'item 2.3', 'item 2.4', 'item 2.5'],
 ['item 3.1', 'item 3.2', 'item 3.3', 'item 3.4', 'item 3.5'],
 ['item 3.1', 'item 3.2', 'item 3.2', 'item 3.2', 'item 3.2'],
 ['item 3.1', 'item 3.2', 'item 3.2', 'item 3.6', 'item 3.2'],
 ['item 3.1', 'item 2.2', 'item 2.4', 'item 2.7', 'item 2.5'],
 ['item 1.1', 'item 1.2', 'item 1.3', 'item 1.4', 'item 1.5'],
 ['item 1.1', 'item 1.2', 'item 1.3', 'item 1.5', 'item 1.5']]
</snippet></ROW><ROW><id>15138558</id><snippet>key</snippet></ROW><ROW><id>15138558</id><snippet>my_list.sort(key=lambda x: (order.index(x[0]), x[2], x[3]))
</snippet></ROW><ROW><id>15138558</id><snippet>[['item 4.1', 'item 4.2', 'item 4.3', 'item 4.4', 'item 4.5'],
 ['item 2.1', 'item 2.2', 'item 2.3', 'item 2.4', 'item 2.5'],
 ['item 3.1', 'item 2.2', 'item 2.4', 'item 2.7', 'item 2.5'],
 ['item 3.1', 'item 3.2', 'item 3.2', 'item 3.2', 'item 3.2'],
 ['item 3.1', 'item 3.2', 'item 3.2', 'item 3.6', 'item 3.2'],
 ['item 3.1', 'item 3.2', 'item 3.3', 'item 3.4', 'item 3.5'],
 ['item 1.1', 'item 1.2', 'item 1.3', 'item 1.4', 'item 1.5'],
 ['item 1.1', 'item 1.2', 'item 1.3', 'item 1.5', 'item 1.5']]
</snippet></ROW><ROW><id>15138611</id><snippet>outfile.write(myEncoder().encode(jsonToEncode))
</snippet></ROW><ROW><id>15138702</id><snippet>import urllib

link = "http://www.somesite.com/details.pl?urn=2344"
f = urllib.urlopen(link)
myfile = f.read()
print myfile
</snippet></ROW><ROW><id>15138702</id><snippet>read()</snippet></ROW><ROW><id>15138702</id><snippet>readline()</snippet></ROW><ROW><id>15138702</id><snippet>import requests

link = "http://www.somesite.com/details.pl?urn=2344"
f = requests.get(link)

print f.text
</snippet></ROW><ROW><id>15138709</id><snippet>1.234e+56</snippet></ROW><ROW><id>15138709</id><snippet>1.234 * 10**56</snippet></ROW><ROW><id>15138729</id><snippet> </snippet></ROW><ROW><id>15139208</id><snippet>__dict__</snippet></ROW><ROW><id>15139208</id><snippet>__slots__</snippet></ROW><ROW><id>15139208</id><snippet>__get__()</snippet></ROW><ROW><id>15139208</id><snippet>__set__()</snippet></ROW><ROW><id>15139208</id><snippet>__delete__()</snippet></ROW><ROW><id>15139208</id><snippet>__get__()</snippet></ROW><ROW><id>15139208</id><snippet>__set__()</snippet></ROW><ROW><id>15139208</id><snippet>__delete__()</snippet></ROW><ROW><id>15139208</id><snippet>__get__()</snippet></ROW><ROW><id>15139208</id><snippet>__set__()</snippet></ROW><ROW><id>15139208</id><snippet>__get__()</snippet></ROW><ROW><id>15139208</id><snippet>__set__()</snippet></ROW><ROW><id>15139208</id><snippet>__get__()</snippet></ROW><ROW><id>15139208</id><snippet>__slots__</snippet></ROW><ROW><id>15139208</id><snippet>__slots__</snippet></ROW><ROW><id>15139408</id><snippet> self.sample['x'].astype(int)
</snippet></ROW><ROW><id>15139408</id><snippet>self.sample['x'].map(_pos_cnvrt) 
self.sample['msg'].map(lambda s:s.strip())
</snippet></ROW><ROW><id>15139408</id><snippet>self.sample['msg'].str.strip()
</snippet></ROW><ROW><id>15139616</id><snippet>ipython_config.py</snippet></ROW><ROW><id>15139616</id><snippet>c.InteractiveShellApp.exec_lines = [
'import sys,os; sys.path.append(os.getcwd())'
]
</snippet></ROW><ROW><id>15139628</id><snippet> rc = subprocess.call(['ping', '-c1', 'google.com'],stdout=open('/var/log/test','a'))
</snippet></ROW><ROW><id>15139628</id><snippet>print &gt;&gt; sys.stderr, rc
</snippet></ROW><ROW><id>15140118</id><snippet>cm.hot(0.3)</snippet></ROW><ROW><id>15140118</id><snippet>(0.82400814813704837, 0.0, 0.0, 1.0)</snippet></ROW><ROW><id>15140118</id><snippet>import matplotlib.cm as cm

print cm.hot(0.3)
</snippet></ROW><ROW><id>15140118</id><snippet>import matplotlib as mpl
import matplotlib.cm as cm

norm = mpl.colors.Normalize(vmin=-20, vmax=10)
cmap = cm.hot
x = 0.3

m = cm.ScalarMappable(norm=norm, cmap=cmap)
print m.to_rgba(x)
</snippet></ROW><ROW><id>15140141</id><snippet>.reversed()</snippet></ROW><ROW><id>15140141</id><snippet>def reversed(self):
    """Creates a cursor for use in a query with a reversed sort order."""
    for pos in self.__compiled_cursor.position_list():
        if pos.has_start_key():
            raise datastore_errors.BadRequestError('Cursor cannot be reversed.')

    rev_pb = datastore_pb.CompiledCursor()
    rev_pb.CopyFrom(self.__compiled_cursor)
    for pos in rev_pb.position_list():
        pos.set_start_inclusive(not pos.start_inclusive())
    return Cursor(_cursor_pb=rev_pb)
</snippet></ROW><ROW><id>15140154</id><snippet>hexbin</snippet></ROW><ROW><id>15140154</id><snippet>np.ndarray</snippet></ROW><ROW><id>15140154</id><snippet>numpy</snippet></ROW><ROW><id>15140154</id><snippet>hexbin</snippet></ROW><ROW><id>15140154</id><snippet>accum</snippet></ROW><ROW><id>15140154</id><snippet>accum</snippet></ROW><ROW><id>15140202</id><snippet>input()</snippet></ROW><ROW><id>15140202</id><snippet>add1 = int(input())
</snippet></ROW><ROW><id>15140202</id><snippet>add1 = float(input())
</snippet></ROW><ROW><id>15140616</id><snippet>class Father():
    def __init__(self):
        self.name=self.__getName()
        print "from Father -&gt;", self.name
    def __getName(self):
        return "father"

class Child(Father):
    def __init__(self):         
        Father.__init__(self)
        self.name=self.__getName()
        print "from Child -&gt;", self.name

    def __getName(self):
        return "child"

if __name__ == "__main__":
    import sys, pprint

    someone=Child()
</snippet></ROW><ROW><id>15140616</id><snippet>from Father -&gt; father
from Child -&gt; child
</snippet></ROW><ROW><id>15140925</id><snippet>(subseq_id_to_intervals_dict,
 subseq_id_to_ccid_formats_dict,
 subseq_id_to_min_max_count_dict) = map_cases(opts,
                                            format_to_ccid_funcs,
                                            sys.stdin)
</snippet></ROW><ROW><id>15140925</id><snippet>subseq_id_to_intervals_dict,
</snippet></ROW><ROW><id>15140961</id><snippet>csv</snippet></ROW><ROW><id>15140961</id><snippet>date,time,milliseconds,value
20120201,41206,300,1
20120201,151117,770,2
</snippet></ROW><ROW><id>15140961</id><snippet>parse_dates</snippet></ROW><ROW><id>15140961</id><snippet>index_cols</snippet></ROW><ROW><id>15140961</id><snippet>date_parser</snippet></ROW><ROW><id>15140961</id><snippet>read_csv</snippet></ROW><ROW><id>15140961</id><snippet>pandas</snippet></ROW><ROW><id>15140961</id><snippet>DataFrame</snippet></ROW><ROW><id>15140961</id><snippet>import datetime as dt
import pandas as pd
parse = lambda x: dt.datetime.strptime(x, '%Y%m%d %H%M%S %f')
df = pd.read_csv('test.csv', parse_dates=[['date', 'time', 'milliseconds']],
                 index_col=0, date_parser=parse)
</snippet></ROW><ROW><id>15140961</id><snippet>                            value
date_time_milliseconds           
2012-02-01 04:12:06.300000      1
2012-02-01 15:11:17.770000      2
</snippet></ROW><ROW><id>15140961</id><snippet>df.index</snippet></ROW><ROW><id>15140961</id><snippet>&lt;class 'pandas.tseries.index.DatetimeIndex'&gt;
[2012-02-01 04:12:06.300000, 2012-02-01 15:11:17.770000]
Length: 2, Freq: None, Timezone: None
</snippet></ROW><ROW><id>15141107</id><snippet>font</snippet></ROW><ROW><id>15141107</id><snippet>turtle.write()</snippet></ROW><ROW><id>15141107</id><snippet>turtle.write(</snippet></ROW><ROW><id>15141107</id><snippet>)</snippet></ROW><ROW><id>15141107</id><snippet>turtle.write("messi fan", font=("Arial", 16, "normal"))</snippet></ROW><ROW><id>15141165</id><snippet>self.V</snippet></ROW><ROW><id>15141165</id><snippet>A.V</snippet></ROW><ROW><id>15141165</id><snippet>getV</snippet></ROW><ROW><id>15141165</id><snippet>getVbis</snippet></ROW><ROW><id>15141165</id><snippet>class A:
    V = 3
    def getV(self):
        return self.V
    def getVbis(self):
        return A.V
    def setV(self, newVal):
        self.V = newVal

aInst = A()
print aInst.getV()
print aInst.getVbis()
aInst.setV(5)
print aInst.getV()
print aInst.getVbis()
</snippet></ROW><ROW><id>15141165</id><snippet>3
3
5
3
</snippet></ROW><ROW><id>15141541</id><snippet>idx = dict((k, i) for i, k in enumerate(fields))
</snippet></ROW><ROW><id>15141541</id><snippet>lst = [None] * len(fields)
for k, v in values.iteritems():
    lst[idx[k]] = v
</snippet></ROW><ROW><id>15141541</id><snippet>dict</snippet></ROW><ROW><id>15141541</id><snippet>fields</snippet></ROW><ROW><id>15141541</id><snippet>dict</snippet></ROW><ROW><id>15141642</id><snippet>bpy.ops.object.duplicate_move(OBJECT_OT_duplicate=(linked:false, TRANSFORM_OT_translate=(transform)</snippet></ROW><ROW><id>15141642</id><snippet>import bpy

bpy.ops.object.select_all(action='DESELECT')
bpy.ops.mesh.primitive_uv_sphere_add()
sphere = bpy.context.object


for i in range(-1000, 1000, 2):
    ob = sphere.copy()
    ob.location.y = i
    #ob.data = sphere.data.copy() # uncomment this, if you want full copies and no linked duplicates
    bpy.context.scene.objects.link(ob)
bpy.context.scene.update()
</snippet></ROW><ROW><id>15141642</id><snippet>obj.location = location_dict[i]
</snippet></ROW><ROW><id>15141676</id><snippet>#include &lt;boost/filesystem.hpp&gt;
#include &lt;iostream&gt;

int main()
{
 boost::filesystem::path path = boost::filesystem::current_path();
 boost::filesystem::recursive_directory_iterator itr(path);
 while (itr != boost::filesystem::recursive_directory_iterator())
 {
   std::cout &lt;&lt; itr-&gt;path().string() &lt;&lt; std::endl;
   ++itr;
 }
}
</snippet></ROW><ROW><id>15141741</id><snippet>print</snippet></ROW><ROW><id>15141741</id><snippet>upenn_tagset</snippet></ROW><ROW><id>15141741</id><snippet>_format_tagset</snippet></ROW><ROW><id>15141741</id><snippet>_print_entries</snippet></ROW><ROW><id>15141741</id><snippet>print</snippet></ROW><ROW><id>15141741</id><snippet>sys.stdout</snippet></ROW><ROW><id>15141741</id><snippet>import sys
print "Hello"
cons_out = sys.stdout
sys.stdout = (other writable handle you can get result of)

do_printing_function()

sys.stdout = cons_out
print "World!"
</snippet></ROW><ROW><id>15141783</id><snippet>for item in db:
    print(item)
</snippet></ROW><ROW><id>15141799</id><snippet>'path/regionlog.txt'
</snippet></ROW><ROW><id>15141799</id><snippet>r'path\regionlog.txt'
</snippet></ROW><ROW><id>15141799</id><snippet>'path\\regionlog.txt'
</snippet></ROW><ROW><id>15141799</id><snippet>\r</snippet></ROW><ROW><id>15141799</id><snippet>os.path.join</snippet></ROW><ROW><id>15141799</id><snippet>output = os.path.abspath(os.path.join('path', 'regionlog.txt'))
</snippet></ROW><ROW><id>15141880</id><snippet>haystack</snippet></ROW><ROW><id>15141880</id><snippet>needle</snippet></ROW><ROW><id>15141880</id><snippet>haystack= open("haystack.wav",'r').read()
</snippet></ROW><ROW><id>15141880</id><snippet>with open("haystack.wav",'r') as inf:
    haystack = inf.read()
</snippet></ROW><ROW><id>15141908</id><snippet>hull = cv2.convexHull(unicocnt,returnPoints = False)
</snippet></ROW><ROW><id>15141908</id><snippet>returnPoints</snippet></ROW><ROW><id>15141908</id><snippet>True</snippet></ROW><ROW><id>15141908</id><snippet>False</snippet></ROW><ROW><id>15141908</id><snippet>hull = cv2.convexHull(unicocnt)
</snippet></ROW><ROW><id>15141908</id><snippet>this article</snippet></ROW><ROW><id>15141927</id><snippet>coinresult = random.randint(1,2)
</snippet></ROW><ROW><id>15141991</id><snippet>import csv

def make_billing_dict(csv_dict_reader):
    bdict = {}
    for entry in csv_dict_reader:
        key = entry['BillingNumber']
        bdict[key] = entry
    return bdict

with open('old.csv') as csv_file:
    old = csv.DictReader(csv_file)
    old_bills = make_billing_dict(old)
</snippet></ROW><ROW><id>15141991</id><snippet>old_bills</snippet></ROW><ROW><id>15141991</id><snippet>{'2': {'BillingNumber': '2',
       'City': 'Reading',
       'CustomerName': 'CHARLIE RYAN',
       'IsActive': 'Yes',
       'IsCreditHold': 'No',
       'IsPayScan': 'Yes',
       'State': 'PA'},
 '3': {'BillingNumber': '3',
       'City': '',
       'CustomerName': 'INSURANCE BILLS',
       'IsActive': '',
       'IsCreditHold': '',
       'IsPayScan': '',
       'State': ''},
 '4': {'BillingNumber': '4',
       'City': '',
       'CustomerName': 'AAA',
       'IsActive': '',
       'IsCreditHold': '',
       'IsPayScan': '',
       'State': ''}}
</snippet></ROW><ROW><id>15141991</id><snippet># Keys that are in old_bills, but not new_bills
print set(old_bills.keys()) - set(new_bills.keys())

# Keys that are in new_bills, but not old_bills
print set(new_bills.keys()) - set(old_bills.keys())

# Compare columns for same billing records
# Will print True or False
print old_bills['2']['CustomerName'] == new_bills['2']['CustomerName']
print old_bills['2']['IsActive'] == new_bills['2']['IsActive']
</snippet></ROW><ROW><id>15142575</id><snippet>DBSession.query()</snippet></ROW><ROW><id>15142575</id><snippet>.all()</snippet></ROW><ROW><id>15142575</id><snippet>search =DBSession.query(
    func.count(ExtendedCDR.uniqueid).label("CallCount"),
    func.sum(ExtendedCDR.duration).label("TotalSeconds"),
    ExtendedCDR,ExtensionMap)
search = search.filter(or_(
    ExtensionMap.exten == ExtendedCDR.extension,
    ExtensionMap.prev_exten == ExtendedCDR.extension))
search = search.filter(between(ExtendedCDR.start, datebegin, dateend))
search = search.filter(ExtendedCDR.extension.in_(SelectedExtension))
search = search.group_by(ExtendedCDR.extension)
search = search.order_by(func.count(ExtendedCDR.uniqueid).desc())
</snippet></ROW><ROW><id>15142575</id><snippet>order_by</snippet></ROW><ROW><id>15142575</id><snippet>search_order = func.count(ExtendedCDR.uniqueid).desc()
</snippet></ROW><ROW><id>15142575</id><snippet>search = search.order_by(search_order)
</snippet></ROW><ROW><id>15142575</id><snippet>.all()</snippet></ROW><ROW><id>15142575</id><snippet>SearchList = search.all()
</snippet></ROW><ROW><id>15142615</id><snippet>numpy.set_printoptions(precision=20)
print myarray`
</snippet></ROW><ROW><id>15142615</id><snippet>print ('%.20f' % myarray[0])
</snippet></ROW><ROW><id>15142722</id><snippet>datetime</snippet></ROW><ROW><id>15142722</id><snippet>float</snippet></ROW><ROW><id>15142722</id><snippet>total_seconds</snippet></ROW><ROW><id>15142722</id><snippet>import calendar
timestamp = calendar.timegm(datetime.utcnow().timetuple())
</snippet></ROW><ROW><id>15143060</id><snippet>r"(\d+,?)"
</snippet></ROW><ROW><id>15143060</id><snippet>findall</snippet></ROW><ROW><id>15143060</id><snippet>300,</snippet></ROW><ROW><id>15143060</id><snippet>20,</snippet></ROW><ROW><id>15143060</id><snippet>500</snippet></ROW><ROW><id>15143060</id><snippet>r"(\d+),?"
</snippet></ROW><ROW><id>15143060</id><snippet>&gt;&gt;&gt; s = '300,20,500'
&gt;&gt;&gt; r = re.compile(r"(\d+),?")
&gt;&gt;&gt; r.findall(s)
['300', '20', '500']
</snippet></ROW><ROW><id>15143060</id><snippet>s.split(',')</snippet></ROW><ROW><id>15143060</id><snippet>filter(str.isdigit, s.split(','))</snippet></ROW><ROW><id>15143060</id><snippet>tuple</snippet></ROW><ROW><id>15143060</id><snippet>int</snippet></ROW><ROW><id>15143060</id><snippet>list</snippet></ROW><ROW><id>15143060</id><snippet>str</snippet></ROW><ROW><id>15143060</id><snippet>&gt;&gt;&gt; tuple(map(int, r.findall(s)))
(300, 20, 500)
</snippet></ROW><ROW><id>15143060</id><snippet>map</snippet></ROW><ROW><id>15143060</id><snippet>filter</snippet></ROW><ROW><id>15143060</id><snippet>&gt;&gt;&gt; tuple(int(x) for x in r.findall(s))
(300, 20, 500)
</snippet></ROW><ROW><id>15143060</id><snippet>&gt;&gt;&gt; tuple(int(x) for x in s.split(',') if x.isdigit())
(300, 20, 500)
</snippet></ROW><ROW><id>15143060</id><snippet>(300, 20, 500)</snippet></ROW><ROW><id>15143060</id><snippet>repr</snippet></ROW><ROW><id>15143060</id><snippet>tuple</snippet></ROW><ROW><id>15143060</id><snippet>&gt;&gt;&gt; '(' + s + ')'
'(300, 20, 500)'
</snippet></ROW><ROW><id>15143060</id><snippet>'^(\d+,)*(\d+)$'
</snippet></ROW><ROW><id>15143060</id><snippet>^</snippet></ROW><ROW><id>15143060</id><snippet>$</snippet></ROW><ROW><id>15143060</id><snippet>findall</snippet></ROW><ROW><id>15143060</id><snippet>match</snippet></ROW><ROW><id>15143145</id><snippet>def</snippet></ROW><ROW><id>15143145</id><snippet>dictionary={}</snippet></ROW><ROW><id>15143145</id><snippet>dictionary=None</snippet></ROW><ROW><id>15143145</id><snippet>if dictionary is None:
    self.dict = {}
else:
    self.dict = dictionary
</snippet></ROW><ROW><id>15143333</id><snippet>/usr/bin/python2.5</snippet></ROW><ROW><id>15143333</id><snippet>/usr/bin/python2.6</snippet></ROW><ROW><id>15143333</id><snippet>/usr/bin/python2.7</snippet></ROW><ROW><id>15143333</id><snippet>import PyObjCTools</snippet></ROW><ROW><id>15143333</id><snippet>easy_install PyObjC</snippet></ROW><ROW><id>15143333</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>15143333</id><snippet>mkdir ~/my_shared_python
# Add the following line to your .bash_profile or equivalent
export PYTHONPATH=$HOME/my_shared_python:$PYTHONPATH
# You can install packages into there by doing (not sure on the pip syntax):
easy_install -d ~/my_shared_python a_package_im_installing
</snippet></ROW><ROW><id>15143421</id><snippet>'rb'</snippet></ROW><ROW><id>15143421</id><snippet>bytes</snippet></ROW><ROW><id>15143421</id><snippet>.index</snippet></ROW><ROW><id>15143421</id><snippet>haystack = open("haystack.wav", 'rb').read()
needle = open("needle.wav", 'rb').read()

print(haystack.index(needle[:46]))
</snippet></ROW><ROW><id>15143421</id><snippet>&gt;&gt;&gt; b'hello world'.index(b'world')
6
&gt;&gt;&gt; b'hello world'.index(b'goodbye')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: substring not found
</snippet></ROW><ROW><id>15143523</id><snippet>def autoproperty(name, can_get=True, can_set=True, allow_null=False, default_value=0):
    attribute_name = '_' + name
    def getter(self):
        return getattr(self, attribute_name, default_value)
    def setter(self, value):
        if not allow_null and value is None:
            raise ValueError('Cannot set {} to None'.format(name))
        setattr(self, attribute_name, value)

    prop = property(getter if can_get else None, setter if can_set else None)

    def decorator(cls):
        setattr(cls, name, prop)
        return cls

    return decorator
</snippet></ROW><ROW><id>15143523</id><snippet>def autoproperty(attribute_name, can_get=True, can_set=True, allow_null=False, default_value=0):
    def getter(self):
        return getattr(self, attribute_name, default_value)
    def setter(self, value):
        if not allow_null and value is None:
            raise ValueError('Cannot set {} to None'.format(name))
        setattr(self, attribute_name, value)
    return property(getter if can_get else None, setter if can_set else None)
</snippet></ROW><ROW><id>15143523</id><snippet>class SomeNonTrivialClass(object):
    # ...

    foo = autoproperty('_foo', can_get=True, can_set=True, allow_null=False, default_value=0)
</snippet></ROW><ROW><id>15143534</id><snippet>def time_to_int(time):
    mins,secs = time.split(':')
    return int(mins)*60 + int(secs)

def line_to_tuple(line):
    return tuple(time_to_int(t) for t in line.split())

natimes = [line_to_tuple(line) for line in sys.stdin]
</snippet></ROW><ROW><id>15143966</id><snippet>destroy()</snippet></ROW><ROW><id>15143966</id><snippet>bn1 = Button(app, text="Back", command=app.destroy)
</snippet></ROW><ROW><id>15143994</id><snippet>multiprocessing</snippet></ROW><ROW><id>15143994</id><snippet>concurrent.futures</snippet></ROW><ROW><id>15143994</id><snippet>futures</snippet></ROW><ROW><id>15143994</id><snippet>multiprocessing</snippet></ROW><ROW><id>15143994</id><snippet>futures</snippet></ROW><ROW><id>15143994</id><snippet>pip install futures</snippet></ROW><ROW><id>15143994</id><snippet>map</snippet></ROW><ROW><id>15143994</id><snippet>def try_my_operation(item):
    try:
        api.my_operation(item)
    except:
        print('error with item')
</snippet></ROW><ROW><id>15143994</id><snippet>executor = concurrent.futures.ProcessPoolExecutor(10)
futures = [executor.submit(try_my_operation, item) for item in items]
concurrent.futures.wait(futures)
</snippet></ROW><ROW><id>15143994</id><snippet>grouper</snippet></ROW><ROW><id>15143994</id><snippet>itertools</snippet></ROW><ROW><id>15143994</id><snippet>more-itertools</snippet></ROW><ROW><id>15143994</id><snippet>def try_multiple_operations(items):
    for item in items:
        try:
            api.my_operation(item)
        except:
            print('error with item')

executor = concurrent.futures.ProcessPoolExecutor(10)
futures = [executor.submit(try_multiple_operations, group) 
           for group in grouper(5, items)]
concurrent.futures.wait(futures)
</snippet></ROW><ROW><id>15143994</id><snippet>ProcessPoolExecutor</snippet></ROW><ROW><id>15143994</id><snippet>ThreadPoolExecutor</snippet></ROW><ROW><id>15144030</id><snippet>in</snippet></ROW><ROW><id>15144030</id><snippet>[1,2] in [[1,2],[3,4]]
</snippet></ROW><ROW><id>15144030</id><snippet>True</snippet></ROW><ROW><id>15144030</id><snippet>[1,2] in [1,2,3]
</snippet></ROW><ROW><id>15144030</id><snippet>False</snippet></ROW><ROW><id>15144030</id><snippet>[1,2] in [1,2]
</snippet></ROW><ROW><id>15144030</id><snippet>[1,2] == [1,2]
</snippet></ROW><ROW><id>15144030</id><snippet>True</snippet></ROW><ROW><id>15144030</id><snippet>set</snippet></ROW><ROW><id>15144030</id><snippet>a = [1,2]
b = [1,2,3]
c = [3,2,1]
d = [1,1,1]
e = set(a)
len(e.intersection(b)) == len(a)  #True
len(e.intersection(c)) == len(a)  #True -- Order of elements does not matter
len(e.intersection(d)) == len(a)  #False
</snippet></ROW><ROW><id>15144371</id><snippet>json.load</snippet></ROW><ROW><id>15144371</id><snippet>json.loads</snippet></ROW><ROW><id>15144427</id><snippet>re.findall('^([A-Z]*\s?[0-9]*)[\s_-]*([1-9][1-9]*$)?', str)
</snippet></ROW><ROW><id>15144427</id><snippet>^</snippet></ROW><ROW><id>15144427</id><snippet>$</snippet></ROW><ROW><id>15144427</id><snippet>$</snippet></ROW><ROW><id>15144653</id><snippet>T_dmg</snippet></ROW><ROW><id>15144653</id><snippet>T_dmg = crit(T_dmg)
</snippet></ROW><ROW><id>15144653</id><snippet>T_dmg</snippet></ROW><ROW><id>15144653</id><snippet>critchance</snippet></ROW><ROW><id>15144653</id><snippet>crit</snippet></ROW><ROW><id>15144653</id><snippet>T_dmg</snippet></ROW><ROW><id>15144653</id><snippet>def critchance(cr):
    if random.randrange(1, 10) == 3:
        return crit(cr)
    return cr
</snippet></ROW><ROW><id>15144653</id><snippet>T_dmg = critchance(T_dmg)
</snippet></ROW><ROW><id>15144733</id><snippet>&lt;pydev_project&gt;
....
&lt;pydev_variables_property name="org.python.pydev.PROJECT_VARIABLE_SUBSTITUTION"&gt;
&lt;key&gt;GOOGLE_APP_ENGINE&lt;/key&gt;
&lt;value&gt;/usr/Local/google_appengine&lt;/value&gt;
&lt;/pydev_variables_property&gt;
&lt;pydev_pathproperty name="org.python.pydev.PROJECT_EXTERNAL_SOURCE_PATH"&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/antlr3&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/enum&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/fancy_urllib&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/google-api-python-client&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/graphy&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/grizzled&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/httplib2&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/ipaddr&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/oauth2&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/prettytable&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/protorpc&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/python-gflags/tests&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/simplejson&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/sqlcmd&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/yaml/lib&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/django-1.4&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/webapp2-2.5.2&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/markupsafe-0.15&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/jinja2-2.6&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}/lib/webob-1.1.1&lt;/path&gt;
&lt;path&gt;${GOOGLE_APP_ENGINE}&lt;/path&gt;
&lt;/pydev_pathproperty&gt;
&lt;/pydev_project&gt;
</snippet></ROW><ROW><id>15144782</id><snippet>figure.scene.interactor.interactor_style =  tvtk.InteractorStyleImage()
</snippet></ROW><ROW><id>15144806</id><snippet>256491738471238569893765421534876192629143875718529643945387216162954387387612954
</snippet></ROW><ROW><id>15144806</id><snippet>python solver.py file.txt &gt; output.txt
</snippet></ROW><ROW><id>15144844</id><snippet>split</snippet></ROW><ROW><id>15144844</id><snippet>$</snippet></ROW><ROW><id>15144844</id><snippet>''</snippet></ROW><ROW><id>15144844</id><snippet>(...)</snippet></ROW><ROW><id>15144844</id><snippet>re.match(regex, string)</snippet></ROW><ROW><id>15144844</id><snippet>MatchObject</snippet></ROW><ROW><id>15144844</id><snippet>groups()</snippet></ROW><ROW><id>15144844</id><snippet># additional group up front
reg='(\S*)_([a-z]{2,8})_?(\d{1,2})?(\.|_)(\d{3,10})\.([a-z]{2,6})$' 
print re.match(reg, filename).groups() # request tuple of group matches
</snippet></ROW><ROW><id>15144844</id><snippet>split()</snippet></ROW><ROW><id>15144847</id><snippet>import pandas as pd
import numpy as np
df = pd.DataFrame({'A':[9,10]*6,
                   'B':range(23,35),
                   'C':range(-6,6)})

print(df)
#      A   B  C
# 0    9  23 -6
# 1   10  24 -5
# 2    9  25 -4
# 3   10  26 -3
# 4    9  27 -2
# 5   10  28 -1
# 6    9  29  0
# 7   10  30  1
# 8    9  31  2
# 9   10  32  3
# 10   9  33  4
# 11  10  34  5
</snippet></ROW><ROW><id>15144847</id><snippet>idx = (df['C']!=0) &amp; (df['A']==10) &amp; (df['B']&lt;30)
</snippet></ROW><ROW><id>15144847</id><snippet>subdf</snippet></ROW><ROW><id>15144847</id><snippet>df</snippet></ROW><ROW><id>15144847</id><snippet>subdf = df[idx]
print(subdf)
#     A   B  C
# 1  10  24 -5
# 3  10  26 -3
# 5  10  28 -1
</snippet></ROW><ROW><id>15144847</id><snippet>subdf</snippet></ROW><ROW><id>15144847</id><snippet>subdf['A'] += subdf['B'] * subdf['C']
print(subdf)
#      A   B  C
# 1 -110  24 -5
# 3  -68  26 -3
# 5  -18  28 -1
</snippet></ROW><ROW><id>15144847</id><snippet>update</snippet></ROW><ROW><id>15144847</id><snippet>df</snippet></ROW><ROW><id>15144847</id><snippet>df.update(subdf)
print(df)
#       A   B  C
# 0     9  23 -6
# 1  -110  24 -5
# 2     9  25 -4
# 3   -68  26 -3
# 4     9  27 -2
# 5   -18  28 -1
# 6     9  29  0
# 7    10  30  1
# 8     9  31  2
# 9    10  32  3
# 10    9  33  4
# 11   10  34  5
</snippet></ROW><ROW><id>15144864</id><snippet>input = input("Enter status: ")
</snippet></ROW><ROW><id>15144864</id><snippet>input</snippet></ROW><ROW><id>15144864</id><snippet>input</snippet></ROW><ROW><id>15144864</id><snippet>continue</snippet></ROW><ROW><id>15144864</id><snippet>input</snippet></ROW><ROW><id>15144864</id><snippet>TypeError: 'str' object is not callable 
</snippet></ROW><ROW><id>15144864</id><snippet>continue</snippet></ROW><ROW><id>15145719</id><snippet># Run standalone server with "--log-level debug"
./standalone.py -p 12345 --allow-draft75 -d example --log-level debug

# For apache module version, add LogLevel directive to httpd.conf
LogLevel debug
</snippet></ROW><ROW><id>15145730</id><snippet>text_content()</snippet></ROW><ROW><id>15145730</id><snippet>x.text</snippet></ROW><ROW><id>15145730</id><snippet>x.text_content()</snippet></ROW><ROW><id>15145805</id><snippet>1601 * 1601 * 253 =&gt; 648489853 items</snippet></ROW><ROW><id>15145805</id><snippet>class SparseDict(dict):
  def __init__(self, default_value):
    dict.__init__(self)
    self._value = default_value
  def __getitem__(self, key):
    try:
      return dict.__getitem__(self, key)
    except KeyError:
      return self._value
  def __setitem__(self, key, val):
    # I'm sure this can go faster if I were smarter
    if val == self._value:
      if  key in self:
        del self[key]
    else:
      dict.__setitem__(self, key, val)

def test(galaxy):
  import sys
  print len(galaxy), sys.getsizeof(galaxy)

  # test is 1/10th size in each dimension,
  # so 1/1000th of the volume
  for x in range(160):
    for y in range(160):
      for z in range (25):
        import random
        # 90% of space is essentially a vacuum
        if random.random() &lt; .1:
          galaxy[x,y,z] = 1502100
        else:
          galaxy[x,y,z] = 0

  print len(galaxy), sys.getsizeof(galaxy)

test(SparseDict(0))
</snippet></ROW><ROW><id>15145833</id><snippet>and</snippet></ROW><ROW><id>15145833</id><snippet>In [10]: %timeit '1234'.isdigit() and '4567'.isdigit() and '7890'.isdigit()
1000000 loops, best of 3: 186 ns per loop

In [11]: %timeit all(['1234'.isdigit(), '4567'.isdigit(), '7890'.isdigit()])
1000000 loops, best of 3: 323 ns per loop
</snippet></ROW><ROW><id>15145833</id><snippet>and</snippet></ROW><ROW><id>15145833</id><snippet>In [1]: def x():
   ...:     print 'call'
   ...:     return False
   ...:

In [2]: x() and x()
call
Out[2]: False

In [3]: all([x(), x()])
call
call
Out[3]: False
</snippet></ROW><ROW><id>15145895</id><snippet>scopes</snippet></ROW><ROW><id>15146029</id><snippet>filling_values="0"</snippet></ROW><ROW><id>15146029</id><snippet>In [19]: !cat test.txt
a,b,c,d
1,2,3,4
5,,7,8
9,10,,12

In [20]: a = numpy.genfromtxt('test.txt', delimiter=',', names=True, filling_values="0")

In [21]: print a
[(1.0, 2.0, 3.0, 4.0) (5.0, 0.0, 7.0, 8.0) (9.0, 10.0, 0.0, 12.0)]
</snippet></ROW><ROW><id>15146193</id><snippet>&lt;__main__.Cars object at 0x027FB970&gt;</snippet></ROW><ROW><id>15146193</id><snippet>.__str__()</snippet></ROW><ROW><id>15146193</id><snippet>class Cars:
    # ....

    def __str__(self):
        return 'Car instance with variables: {!r}'.format(self.variables)
</snippet></ROW><ROW><id>15146346</id><snippet>filter()</snippet></ROW><ROW><id>15146346</id><snippet>for ssid in filter(lambda s: s != subseq_id and s not in merged, overlaps):
    # ...
</snippet></ROW><ROW><id>15146346</id><snippet>for ssid in overlaps:
    if ssid == subseq_id or ssid in merged:
      continue
    # ...
</snippet></ROW><ROW><id>15146427</id><snippet>logger = logging.getLogger('myproject')
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)
</snippet></ROW><ROW><id>15146427</id><snippet>logger.info('foo bar')
logging.getLogger('myproject').info('foo bar')
</snippet></ROW><ROW><id>15146427</id><snippet>logging.info('foo bar')
</snippet></ROW><ROW><id>15146427</id><snippet>logger</snippet></ROW><ROW><id>15146427</id><snippet>logger = logging.getLogger(__name__)
</snippet></ROW><ROW><id>15146427</id><snippet>logger</snippet></ROW><ROW><id>15146427</id><snippet>self.logger = logging.getLogger('{}.{}'.format(__name__, cls.__name__))
</snippet></ROW><ROW><id>15146427</id><snippet>logger</snippet></ROW><ROW><id>15146427</id><snippet>self.logger</snippet></ROW><ROW><id>15146427</id><snippet>logger = logging.getLogger()
</snippet></ROW><ROW><id>15146427</id><snippet>logger</snippet></ROW><ROW><id>15146477</id><snippet>from IPython.config import Application
log = Application.instance().log
</snippet></ROW><ROW><id>15146584</id><snippet>import os.path
BASE = os.path.dirname(os.path.abspath(__file__))

data = open(os.path.join(BASE, "snp_data.txt"))
</snippet></ROW><ROW><id>15146584</id><snippet>open()</snippet></ROW><ROW><id>15146584</id><snippet>file()</snippet></ROW><ROW><id>15146651</id><snippet>import pandas as pd
dataset = pd.read_table("toplot.txt", sep="\t")
#make D index (automatically puts it on the x axis)
dataset.set_index("D", inplace=True)
#plotting R vs. D
dataset.R.plot()
#plotting F vs. D
dataset.F.plot()
</snippet></ROW><ROW><id>15146651</id><snippet>dataset</snippet></ROW><ROW><id>15146651</id><snippet>DataFrame</snippet></ROW><ROW><id>15146651</id><snippet>DataFrame.plot</snippet></ROW><ROW><id>15146651</id><snippet># get where F == 1000
maskF = dataset.F == 1000
# get the values where F == 1000
rows = dataset[maskF]
# get the values where A12 is in column E
rows = rows[rows.E == "A12"]
#remove the we don't want to see
del rows["E"]
del rows["F"]
#Plot the result
rows.plot(xlim=(0,None), ylim=(-1,2))
</snippet></ROW><ROW><id>15146827</id><snippet>&gt;&gt;&gt; str.join = lambda x: None
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: can't set attributes of built-in/extension type 'str'
</snippet></ROW><ROW><id>15146827</id><snippet>str</snippet></ROW><ROW><id>15146827</id><snippet>''.join</snippet></ROW><ROW><id>15146827</id><snippet>str</snippet></ROW><ROW><id>15146827</id><snippet>str</snippet></ROW><ROW><id>15146827</id><snippet>__builtin__</snippet></ROW><ROW><id>15146827</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def test():
...     ''.join([1,2,3])
... 
&gt;&gt;&gt; dis.dis(test)
  2           0 LOAD_CONST               1 ('')
              3 LOAD_ATTR                0 (join)
              6 LOAD_CONST               2 (1)
              9 LOAD_CONST               3 (2)
             12 LOAD_CONST               4 (3)
             15 BUILD_LIST               3
             18 CALL_FUNCTION            1
             21 POP_TOP             
             22 LOAD_CONST               0 (None)
             25 RETURN_VALUE
</snippet></ROW><ROW><id>15146827</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>15146827</id><snippet>''</snippet></ROW><ROW><id>15146827</id><snippet>str</snippet></ROW><ROW><id>15146827</id><snippet>str</snippet></ROW><ROW><id>15146827</id><snippet>str()</snippet></ROW><ROW><id>15146827</id><snippet>''</snippet></ROW><ROW><id>15146827</id><snippet>mock</snippet></ROW><ROW><id>15146827</id><snippet>str</snippet></ROW><ROW><id>15146827</id><snippet>join</snippet></ROW><ROW><id>15147171</id><snippet># celery_experiment.py

from celery import task, group, chain, chord
from celery.signals import task_sent, task_postrun, task_prerun

import time
import logging

import random
random.seed()

logging.basicConfig(level=logging.DEBUG)

### HANDLERS ###    
@task_prerun.connect()
def task_starting_handler(sender=None, task_id=None, task=None, args=None, kwargs=None, **kwds):    
    try:
        logging.info('[%s] starting' % kwargs['id'])
    except KeyError:
        pass

@task_postrun.connect()
def task_finished_handler(sender=None, task_id=None, task=None, args=None, kwargs=None, retval=None, state=None, **kwds):
    try:    
        logging.info('[%s] finished' % kwargs['id'])
    except KeyError:
        pass


def random_sleep(id):
    slp = random.randint(1, 3)
    logging.info('[%s] sleep for %ssecs' % (id, slp))
    time.sleep(slp)

@task()
def thing(id):
    logging.info('[%s] begin' % id)
    random_sleep(id)
    logging.info('[%s] end' % id)


def exec_exp():
    st = thing.si(id='st')
    st_arr = [thing.si(id='st_arr1_a'), thing.si(id='st_arr1_b'), thing.si(id='st_arr1_c'),]
    st_arr2 = [thing.si(id='st_arr2_a'), thing.si(id='st_arr2_b'),]
    st2 = thing.si(id='st2')
    st3 = thing.si(id='st3')
    st4 = thing.si(id='st4')

    grp1 = group(st_arr)
    grp2 = group(st_arr2)

    # chn can chain two groups together because they are seperated by a single subtask
    chn = (st | grp1 | st2 | grp2 | st3 | st4)

    # in chn2 you can't chain two groups together. what will happen is st3 will start before grp2 finishes
    #chn2 = (st | st2 | grp1 | grp2 | st3 |  st4)

    r = chn()
    #r2 = chn2()
</snippet></ROW><ROW><id>15147393</id><snippet>Server.message</snippet></ROW><ROW><id>15147393</id><snippet>@classmethod</snippet></ROW><ROW><id>15147393</id><snippet>class Server(protocol.Protocol):
    clients = set()

    def dataReceived(self, data):
        #do something on the server side
        pass

    def connectionMade(self):
        Server.clients.add(self)

    def connectionLost(self):
        Server.clients.remove(self)

    @classmethod
    def message(cls):
        for client in cls.clients:
            client.transport.write('got GET request\n')
</snippet></ROW><ROW><id>15147393</id><snippet>Server.message()</snippet></ROW><ROW><id>15147393</id><snippet>render_GET</snippet></ROW><ROW><id>15147434</id><snippet>import re

ss = '''qslkjqskqsdhf
#start
REPLACE ANYTHING IN HERE
#end
2135468761265
'''

reg = re.compile('(?&lt;=#start)(\r?\n)'
                 '(.*?)'
                 '(?=\r?\n#end)',re.DOTALL)

print ss
print '----'
print reg.sub('\\1Ia orana',ss)
</snippet></ROW><ROW><id>15147434</id><snippet>qslkjqskqsdhf
#start
REPLACE ANYTHING IN HERE
#end
2135468761265

----
qslkjqskqsdhf
#start
Ia orana
#end
2135468761265
</snippet></ROW><ROW><id>15147531</id><snippet>radiogroup = Frame(master)
# self.mit = Radiobutton(radiogroup, ...)
# ...
self.mit.grid(row=0, column=0)
self.gpl2.grid(row=0, column=1)
self.gpl3.grid(row=0, column=2)
radiogroup.grid(row=4, column=0)
</snippet></ROW><ROW><id>15147702</id><snippet>a = ['house', 'bikeCT', 'car', 'bike', 'houseCT']
b = [x for x in a if 'CT' not in x]
</snippet></ROW><ROW><id>15147795</id><snippet>cp1252</snippet></ROW><ROW><id>15147795</id><snippet> print '\x80'.decode('cp1252')
</snippet></ROW><ROW><id>15147895</id><snippet>csv</snippet></ROW><ROW><id>15147895</id><snippet>import csv
with open('mydata.txt', 'rb') as f:
    for row in csv.DictReader(f, delimiter='\t'):
        print row
</snippet></ROW><ROW><id>15147895</id><snippet>{'geneid': 'hello', 'tx_id': 'NR432', 'col_name1': '4.5', 'col_name2': 6.7}
{'geneid': 'bye', 'tx_id': 'NR439', 'col_name1': '4.5', 'col_name2': 6.7}
</snippet></ROW><ROW><id>15147895</id><snippet>geneid</snippet></ROW><ROW><id>15147895</id><snippet>dict</snippet></ROW><ROW><id>15147895</id><snippet>tx_id</snippet></ROW><ROW><id>15147895</id><snippet>geneid</snippet></ROW><ROW><id>15147895</id><snippet>setdefault</snippet></ROW><ROW><id>15147895</id><snippet>import csv
genes = {}
with open('mydata.txt', 'rb') as f:
    for row in csv.DictReader(f, delimiter='\t'):
        gene = genes.setdefault(row['geneid'], {})
        transcript = gene.setdefault(row['tx_id'], {})
        transcript['colname1'] = row['colname1']
        transcript['colname2'] = row['colname2']
</snippet></ROW><ROW><id>15147895</id><snippet>defaultdict</snippet></ROW><ROW><id>15147895</id><snippet>import csv
from collections import defaultdict
from functools import partial
genes = defaultdict(partial(defaultdict, dict))
with open('mydata.txt', 'rb') as f:
    for row in csv.DictReader(f, delimiter='\t'):
        genes[row['geneid']][row['tx_id']]['colname1'] = row['colname1']
        genes[row['geneid']][row['tx_id']]['colname2'] = row['colname2']
</snippet></ROW><ROW><id>15147895</id><snippet>dict</snippet></ROW><ROW><id>15147895</id><snippet>dict</snippet></ROW><ROW><id>15147895</id><snippet>dict</snippet></ROW><ROW><id>15147895</id><snippet>dict</snippet></ROW><ROW><id>15147895</id><snippet>defaultdict</snippet></ROW><ROW><id>15147895</id><snippet>defaultdict(dict)</snippet></ROW><ROW><id>15147895</id><snippet>partial</snippet></ROW><ROW><id>15147895</id><snippet>lambda</snippet></ROW><ROW><id>15147929</id><snippet>searchline = 'Text4'
lines = f.readlines() # f being the file handle
i = lines.index(searchline) # Make sure searchline is actually in the file
</snippet></ROW><ROW><id>15147929</id><snippet>i</snippet></ROW><ROW><id>15147929</id><snippet>Text4</snippet></ROW><ROW><id>15147929</id><snippet>list.insert(i,x)</snippet></ROW><ROW><id>15147929</id><snippet>lines.insert(i, 'Random text to insert')
</snippet></ROW><ROW><id>15147929</id><snippet>lines.insert(i+1, 'Different random text')
</snippet></ROW><ROW><id>15147929</id><snippet>lines.insert(i+3, 'Last example text')
</snippet></ROW><ROW><id>15147929</id><snippet>IndexError</snippet></ROW><ROW><id>15148031</id><snippet>&gt;&gt;&gt; x=requests.get("http://apple.adam.gs")
&gt;&gt;&gt; x.reason
'OK'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15148031</id><snippet>header("HTTP/1.1 200 Testing")
</snippet></ROW><ROW><id>15148031</id><snippet>&gt;&gt;&gt; x=requests.get("http://apple.adam.gs/custom.php")
&gt;&gt;&gt; print x.reason
Testing
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15148055</id><snippet>In [40]: x = pd.date_range('20130101',periods=5)

In [41]: td = pd.Series(x,index=x)-pd.Timestamp('20130101')

In [43]: td
Out[43]: 
2013-01-01           00:00:00
2013-01-02   1 days, 00:00:00
2013-01-03   2 days, 00:00:00
2013-01-04   3 days, 00:00:00
2013-01-05   4 days, 00:00:00
Freq: D, Dtype: timedelta64[ns]

In [44]: td.apply(lambda x: x.item().days)
Out[44]: 
2013-01-01    0
2013-01-02    1
2013-01-03    2
2013-01-04    3
2013-01-05    4
Freq: D, Dtype: int64
</snippet></ROW><ROW><id>15148179</id><snippet>form_valid()</snippet></ROW><ROW><id>15148179</id><snippet>beller</snippet></ROW><ROW><id>15148179</id><snippet>Bericht</snippet></ROW><ROW><id>15148179</id><snippet>BerichtForm</snippet></ROW><ROW><id>15148179</id><snippet>Bericht</snippet></ROW><ROW><id>15148179</id><snippet>class Meta:
    model = Bericht
    fields = ('lijn', 'tijdstip', 'bericht')
</snippet></ROW><ROW><id>15148195</id><snippet>rfft</snippet></ROW><ROW><id>15148195</id><snippet>fft</snippet></ROW><ROW><id>15148195</id><snippet>&gt;&gt;&gt; x = np.linspace(0, 2 * np.pi, 128)
&gt;&gt;&gt; y = 1 - np.sin(x)
&gt;&gt;&gt; fft = np.fft.fft(y)
&gt;&gt;&gt; np.mean((fft * fft.conj()).real)
191.49999999999991
&gt;&gt;&gt; np.mean(y**2)
1.4960937500000004
&gt;&gt;&gt; fft = fft / np.sqrt(len(fft))
&gt;&gt;&gt; np.mean((fft * fft.conj()).real)
1.4960937499999991
</snippet></ROW><ROW><id>15148195</id><snippet>rfft</snippet></ROW><ROW><id>15148195</id><snippet>&gt;&gt;&gt; rfft = np.fft.rfft(y)
&gt;&gt;&gt; np.mean((rfft * rfft.conj()).real)
314.58462009358772
&gt;&gt;&gt; rfft /= np.sqrt(len(rfft))
&gt;&gt;&gt; np.mean((rfft * rfft.conj()).real)
4.8397633860551954
65
&gt;&gt;&gt; np.mean((rfft * rfft.conj()).real) / len(rfft)
4.8397633860551954
</snippet></ROW><ROW><id>15148195</id><snippet>&gt;&gt;&gt; (rfft[0] * rfft[0].conj() +
...  2 * np.sum(rfft[1:] * rfft[1:].conj())).real / len(y)
1.4960937873636722
</snippet></ROW><ROW><id>15148195</id><snippet>rfft</snippet></ROW><ROW><id>15148221</id><snippet>evens = []
odds = []
out = [evens,odds]
for elem in numbers:
    out[elem%2].append(elem)

print evens
</snippet></ROW><ROW><id>15148221</id><snippet>for even in evens:
    print even
</snippet></ROW><ROW><id>15148308</id><snippet>requests</snippet></ROW><ROW><id>15148308</id><snippet>urllib3</snippet></ROW><ROW><id>15148308</id><snippet>http.client</snippet></ROW><ROW><id>15148308</id><snippet>httplib</snippet></ROW><ROW><id>15148308</id><snippet>socket.create_connection</snippet></ROW><ROW><id>15148308</id><snippet>http.client.connect</snippet></ROW><ROW><id>15148308</id><snippet>socket.create_connection</snippet></ROW><ROW><id>15148308</id><snippet>orig_connect = http.client.HTTPConnection.connect
def monkey_connect(self):
    orig_connect(self)
    self.sock.setsockopt(…)
http.client.HTTPConnection.connect = monkey_connect
</snippet></ROW><ROW><id>15148308</id><snippet>httplib</snippet></ROW><ROW><id>15148308</id><snippet>http.client</snippet></ROW><ROW><id>15148522</id><snippet>soup = BeautifulSoup(doc)
tags = soup.fetch('td')
for tag in tags:
    if tag.contents[0] and tag.contents[0].strip() == 'Preferred Name':
        return tag
</snippet></ROW><ROW><id>15148557</id><snippet>def change(x):
    x[0] = 3

x = [1]
change(x)
print x
</snippet></ROW><ROW><id>15148557</id><snippet>=</snippet></ROW><ROW><id>15148557</id><snippet>def multiply_by_2(x):
    return 2*x

x = 1
x = multiply_by_2(x)
</snippet></ROW><ROW><id>15148557</id><snippet>3</snippet></ROW><ROW><id>15148557</id><snippet>x.__setitem__</snippet></ROW><ROW><id>15148625</id><snippet>import</snippet></ROW><ROW><id>15148625</id><snippet>bash -c "./django.fcgi" # file must have execution permission
python django.fcgi
./django.fcgi           # also
</snippet></ROW><ROW><id>15148625</id><snippet>DEBUG=True</snippet></ROW><ROW><id>15148625</id><snippet>settings.py</snippet></ROW><ROW><id>15148625</id><snippet>os.environ['DJANGO_SETTINGS_MODULE'] = "mysite.settings"
</snippet></ROW><ROW><id>15148625</id><snippet>public/settings.py</snippet></ROW><ROW><id>15148625</id><snippet>os.environ['DJANGO_SETTINGS_MODULE'] = os.path.join(PROJECT_DIR, "mysite", "settings")
</snippet></ROW><ROW><id>15148699</id><snippet>class No:
    def __init__(self,a,b):
       self.val = a
       self.next = b
    def __str__(self):
       return "%s-&gt;%s"%(self.val,self.next)

def swapandReverse(lista):
   n2 = lista.next #2nd element
   n2.val,n2.next.val = n2.next.val,n2.val #swap 2,3
   n = lista #root node
   v = [] #hold our values
   while n.next:
      v.append(n.val) #add our value to list
      n = n.next #move to next node
   v.append(n.val) #append value of last node in the list
   while len(v): #as long as we have values left in list
      n.next = No(v.pop(-1),None) #set next to new node with our val
      n = n.next


lista = No(3,No(1,No(4,No(2,None))))
print lista
swapandReverse(lista)
print lista
</snippet></ROW><ROW><id>15148766</id><snippet>min(filter(lambda t: not math.isnan(t[1]), l), key=itemgetter(1))
</snippet></ROW><ROW><id>15148766</id><snippet>itemgetter</snippet></ROW><ROW><id>15148766</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>15148924</id><snippet>configure</snippet></ROW><ROW><id>15148924</id><snippet>make distclean</snippet></ROW><ROW><id>15148924</id><snippet>--with-pydebug</snippet></ROW><ROW><id>15148924</id><snippet>PyObject</snippet></ROW><ROW><id>15149025</id><snippet>sort</snippet></ROW><ROW><id>15149025</id><snippet>data = list(csv.reader(fn))
data.sort(key=lambda line:line[0])
csv.writer(outfn).writerows(data)
</snippet></ROW><ROW><id>15149025</id><snippet>.sort</snippet></ROW><ROW><id>15149047</id><snippet> from random import random:
</snippet></ROW><ROW><id>15149047</id><snippet>poem_init = int(random()*(len(text)-140))
poem = text[poem_init:poem_init+140].split(" ")

if text.find(" "+ poem[0]) &lt; 0:
    del poem[0]

if text.find(poem[-1] + " ") &lt; 0 or text.find(poem[-1]) != len(text):
    del poem[-1]

poem = " ".join(poem)
print poem
</snippet></ROW><ROW><id>15149084</id><snippet>super(Thread, self).__init__()</snippet></ROW><ROW><id>15149084</id><snippet>Thread.__init__(self)</snippet></ROW><ROW><id>15149084</id><snippet>Thread</snippet></ROW><ROW><id>15149084</id><snippet>super</snippet></ROW><ROW><id>15149084</id><snippet>Thread</snippet></ROW><ROW><id>15149084</id><snippet>Thread</snippet></ROW><ROW><id>15149084</id><snippet>threading.Thread</snippet></ROW><ROW><id>15149084</id><snippet>AssertionError: Thread.__init__() was not called
</snippet></ROW><ROW><id>15149084</id><snippet>super</snippet></ROW><ROW><id>15149084</id><snippet>super(Worker, self).__init__()
</snippet></ROW><ROW><id>15149110</id><snippet>range</snippet></ROW><ROW><id>15149110</id><snippet>&gt;&gt;&gt; list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>15149110</id><snippet>range(10,1,-1)</snippet></ROW><ROW><id>15149110</id><snippet>reversed</snippet></ROW><ROW><id>15149110</id><snippet>for i in reversed(range(10)): # iterates from 9 down to 0
</snippet></ROW><ROW><id>15149110</id><snippet>for item in reversed(myNumbers):
    print(item)
</snippet></ROW><ROW><id>15149139</id><snippet>.format</snippet></ROW><ROW><id>15149139</id><snippet>&gt;&gt;&gt; class order(object) : pass
... 
&gt;&gt;&gt; a = order()
&gt;&gt;&gt; a.id=3
&gt;&gt;&gt; "{order.id}".format(order=a)
'3'
&gt;&gt;&gt; "{order.id} and then a {foo} hit the {baz} ".format(baz="fan",foo="rocket",order=a) 
'3 and then a rocket hit the fan '
</snippet></ROW><ROW><id>15149238</id><snippet>u'•' == u'\u2022'
</snippet></ROW><ROW><id>15149238</id><snippet>from reportlab.pdfgen import canvas

c = canvas.Canvas("test.pdf")
c.drawString(100, 100, u'\u2022 First sentence')
c.save()
</snippet></ROW><ROW><id>15149257</id><snippet>import collections
with open('grid_file.txt', 'r') as f:
    columns = next(f).split()
    matrix = collections.defaultdict(dict)
    for line in f:
        items = line.split()
        row, vals = items[0], items[1:]
        for col, val in zip(columns, vals):
            matrix[col][row] = int(val)
print(matrix)
</snippet></ROW><ROW><id>15149257</id><snippet>defaultdict(&lt;type 'dict'&gt;, {'A': {'A': 0, 'C': 6, 'B': 3}, 'C': {'A': 2, 'C': 0, 'B': 5}, 'B': {'A': 1, 'C': 7, 'B': 0}})
</snippet></ROW><ROW><id>15149257</id><snippet>with open(...) as f
    ...
</snippet></ROW><ROW><id>15149257</id><snippet>f = open(...)
f.close()
</snippet></ROW><ROW><id>15149257</id><snippet>with-block</snippet></ROW><ROW><id>15149257</id><snippet>with</snippet></ROW><ROW><id>15149257</id><snippet>with-block</snippet></ROW><ROW><id>15149257</id><snippet>f.readlines()</snippet></ROW><ROW><id>15149257</id><snippet>with open(...) as f:
    for line in f:
</snippet></ROW><ROW><id>15149257</id><snippet>matrix</snippet></ROW><ROW><id>15149257</id><snippet>matrix[field]</snippet></ROW><ROW><id>15149257</id><snippet>dict</snippet></ROW><ROW><id>15149257</id><snippet>for key in keys:
    matrix[key] = {}
</snippet></ROW><ROW><id>15149257</id><snippet>defaultdict</snippet></ROW><ROW><id>15149257</id><snippet>dict</snippet></ROW><ROW><id>15149257</id><snippet>dict</snippet></ROW><ROW><id>15149257</id><snippet>matrix</snippet></ROW><ROW><id>15149257</id><snippet>matrix[key]</snippet></ROW><ROW><id>15149257</id><snippet>key</snippet></ROW><ROW><id>15149257</id><snippet>dict</snippet></ROW><ROW><id>15149257</id><snippet>matrix = dict(matrix)
</snippet></ROW><ROW><id>15149257</id><snippet>for-loops</snippet></ROW><ROW><id>15149257</id><snippet>for i, c in enumerate(chars[1:]):
</snippet></ROW><ROW><id>15149257</id><snippet>for col, val in zip(columns, vals):
</snippet></ROW><ROW><id>15149257</id><snippet>keys[i-1]</snippet></ROW><ROW><id>15149257</id><snippet>keys[i-1]</snippet></ROW><ROW><id>15149257</id><snippet>with open('grid_file.txt', 'r') as f:
    columns = next(f).split()
    matrix = {}
    for line in f:
        items = line.split()
        row, vals = items[0], items[1:]
        for col, val in zip(columns, vals):
            matrix[col, row] = int(val)
print(matrix)
</snippet></ROW><ROW><id>15149257</id><snippet>{('B', 'C'): 7, ('A', 'A'): 0, ('B', 'B'): 0, ('B', 'A'): 1, ('C', 'A'): 2, ('C', 'B'): 5, ('C', 'C'): 0, ('A', 'B'): 3, ('A', 'C'): 6}
</snippet></ROW><ROW><id>15149257</id><snippet>print(matrix['A','C'])
# 6
</snippet></ROW><ROW><id>15149257</id><snippet>import pandas as pd
import io

text = '''\
A  B  C
A 0  1  2
B 3  0  5
C 6  7  0'''

df = pd.read_table(io.BytesIO(text), sep='\s+')
print(df.to_dict())
</snippet></ROW><ROW><id>15149257</id><snippet>{'A': {'A': 0, 'B': 3, 'C': 6},
 'B': {'A': 1, 'B': 0, 'C': 7},
 'C': {'A': 2, 'B': 5, 'C': 0}}
</snippet></ROW><ROW><id>15149338</id><snippet>import pandas as pd
import numpy.random as rd

df = pd.DataFrame(rd.randn(1e6).reshape(1e5,10),columns=list('abcdefghij'))
store = pd.HDFStore('newstore.h5')

# only data columns can serve as indices to select for on-disk, but there's a 
# speed penalty involved, so it's a conscious decision what becomes data_column!
store.append('df',df,data_columns=['a','b'])
</snippet></ROW><ROW><id>15149338</id><snippet>In [14]: store.select('df',['a &gt; 0','b&gt;0'])
Out[14]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 24747 entries, 2 to 99998
Data columns:
a    24747  non-null values
b    24747  non-null values
c    24747  non-null values
d    24747  non-null values
e    24747  non-null values
f    24747  non-null values
g    24747  non-null values
h    24747  non-null values
i    24747  non-null values
j    24747  non-null values
dtypes: float64(10)

In [15]: store.select('df',['a &gt; 0'])
Out[15]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 50043 entries, 0 to 99999
Data columns:
a    50043  non-null values
b    50043  non-null values
c    50043  non-null values
d    50043  non-null values
e    50043  non-null values
f    50043  non-null values
g    50043  non-null values
h    50043  non-null values
i    50043  non-null values
j    50043  non-null values
dtypes: float64(10)
</snippet></ROW><ROW><id>15149360</id><snippet>#This part of the code gets the entire fibonacci sequence
list_of_numbers = []
even_fibs = []
x,y = 0,1 #sets x to 0, y to 1
while y &lt;= 4000000: #Gets numbers till 4 million
    list_of_numbers.append(y)
    x, y = y, x+y #updates the fib sequence
</snippet></ROW><ROW><id>15149360</id><snippet>list_of_numbers</snippet></ROW><ROW><id>15149360</id><snippet>even_fibs</snippet></ROW><ROW><id>15149360</id><snippet>coord = 0
for number in range(len(list_of_numbers)):
    test_number = list_of_numbers [coord]

    if (test_number % 2) == 0:
        even_fibs.append(test_number)
    coord+=1
</snippet></ROW><ROW><id>15149360</id><snippet>list_of_numbers</snippet></ROW><ROW><id>15149360</id><snippet>even_fibs</snippet></ROW><ROW><id>15149360</id><snippet>print "Normal:  ", list_of_numbers #outputs full sequence
print "\nEven Numbers: ", even_fibs #outputs even numbers
print "\nSum of Even Numbers:  ", sum(even_fibs) #outputs the sum of even numbers
</snippet></ROW><ROW><id>15149360</id><snippet>#This part of the code gets the entire fibonacci sequence
list_of_numbers = []
even_fibs = []

def fib(list_of_numbers):

    x,y = 0,1 #sets x to 0, y to 1
    while x+y &lt;= 4000000: #Gets numbers till 4 million
        list_of_numbers.append(y)
        x, y = y, x+y #updates the fib sequence
    return list_of_numbers

def even(list_of_numbers, even_fibs):
    coord = 0
    for number in range(len(list_of_numbers)):
        test_number = list_of_numbers [coord]

        if (test_number % 2) == 0:
            even_fibs.append(test_number)
        coord+=1
    return even_fibs

fib(list_of_numbers) #call fib function

even(list_of_numbers, even_fibs) #Call the even function
#Output
print "Normal:  ", list_of_numbers
print "\nEven Numbers: ", even_fibs
print "\nSum of Even Numbers:  ", sum(even_fibs)
</snippet></ROW><ROW><id>15149387</id><snippet>while</snippet></ROW><ROW><id>15149387</id><snippet>break</snippet></ROW><ROW><id>15149387</id><snippet>sum()</snippet></ROW><ROW><id>15149387</id><snippet>Jon Clements</snippet></ROW><ROW><id>15149387</id><snippet>eval()</snippet></ROW><ROW><id>15149387</id><snippet>eval</snippet></ROW><ROW><id>15149387</id><snippet>eval()</snippet></ROW><ROW><id>15149387</id><snippet>total = total + 1</snippet></ROW><ROW><id>15149387</id><snippet>for x in range(n)</snippet></ROW><ROW><id>15149387</id><snippet>else</snippet></ROW><ROW><id>15149387</id><snippet>nneonneo</snippet></ROW><ROW><id>15149387</id><snippet>+=</snippet></ROW><ROW><id>15149387</id><snippet>for total in range(n)</snippet></ROW><ROW><id>15149387</id><snippet>total = 1
while total &lt;= n:
    x = random.randrange(0,10)
    y = random.randrange(0,10)
    numbers = x + y
    print (x, "+", y)
    guess = eval(input("Enter your guess: "))
    total = total + 1
    if guess == numbers:
        count = count + 1
        print("Correct.")
    else:
        print("Incorrect")
 print("You got", count, "correct answers out of", total)
</snippet></ROW><ROW><id>15149495</id><snippet>index.get_level_values(level)</snippet></ROW><ROW><id>15149495</id><snippet>dropna(how='all')</snippet></ROW><ROW><id>15149495</id><snippet>index.get_level_values(level)</snippet></ROW><ROW><id>15149495</id><snippet>index.levels</snippet></ROW><ROW><id>15149521</id><snippet>C:\\path\\to\\Resources\\html\\brand_value</snippet></ROW><ROW><id>15149521</id><snippet>/*.*</snippet></ROW><ROW><id>15149642</id><snippet>from path.to.view import Custom404
handler404 = Custom404.as_view()
</snippet></ROW><ROW><id>15149682</id><snippet>s == "Yes" or "yes" or "YES"
</snippet></ROW><ROW><id>15149682</id><snippet>(s == "Yes") or ("yes") or ("YES")
</snippet></ROW><ROW><id>15149682</id><snippet>True</snippet></ROW><ROW><id>15149682</id><snippet>True</snippet></ROW><ROW><id>15149682</id><snippet>s</snippet></ROW><ROW><id>15149682</id><snippet>(s == "Yes") or (s == "yes") or (s == "YES")  # brackets just for clarification
</snippet></ROW><ROW><id>15149682</id><snippet>def shut_down(s):
    if s == "Yes" or s == "yes" or s == "YES":
        return "Shutting down..."
    elif s == "No" or s == "no" or s == "NO":
        return "Shutdown aborted!"
    else:
        return "Sorry, I didn't understand you."
</snippet></ROW><ROW><id>15149710</id><snippet>def changeImage(num):
    global buttonOn, buttonOff, button1
    if num == 1:
        newimage = buttonOff if button1.image == buttonOn else buttonOn
        button1.image = newimage
        button1.config(image=newimage)

# ...
button1 = Button(image=buttonOn, width=20, height=20, command=lambda:changeImage(1))
button1.image = buttonOn
</snippet></ROW><ROW><id>15149721</id><snippet>ELF</snippet></ROW><ROW><id>15149721</id><snippet>DWARF</snippet></ROW><ROW><id>15149753</id><snippet>+</snippet></ROW><ROW><id>15149753</id><snippet>a + b
</snippet></ROW><ROW><id>15149842</id><snippet>key</snippet></ROW><ROW><id>15149842</id><snippet>range(1, len(a) + 1)</snippet></ROW><ROW><id>15149842</id><snippet>a</snippet></ROW><ROW><id>15149842</id><snippet>sorted(range(1, len(a) + 1), key=lambda i: a[i-1], reverse=True)
</snippet></ROW><ROW><id>15149907</id><snippet>numpy.delete</snippet></ROW><ROW><id>15149907</id><snippet>import numpy as np
arr = np.array([234, 235, 23, 6, 3, 6, 23])
elim = [3, 5, 6]
np.delete(arr, elim)
</snippet></ROW><ROW><id>15150140</id><snippet>&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
 &lt;xsl:output omit-xml-declaration="yes" indent="yes"/&gt;
 &lt;xsl:strip-space elements="*"/&gt;

 &lt;xsl:key name="kFolderByPath" match="Folder" use="Path"/&gt;

 &lt;xsl:template match="/*"&gt;
  &lt;xsl:copy&gt;
   &lt;xsl:apply-templates select=
    "Folder[generate-id()=generate-id(key('kFolderByPath',Path)[1])]"/&gt;
  &lt;/xsl:copy&gt;
 &lt;/xsl:template&gt;

 &lt;xsl:template match="Folder"&gt;
  &lt;Folder&gt;
   &lt;xsl:copy-of select=
   "Path | key('kFolderByPath',Path)/*[not(self::Path)]"/&gt;
  &lt;/Folder&gt;
 &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</snippet></ROW><ROW><id>15150140</id><snippet>&lt;root&gt;
    &lt;Folder&gt;
        &lt;Path&gt;\\path\to\folder\_Shared Data\&lt;/Path&gt;
        &lt;Group&gt;
            &lt;Account&gt;Shared_Data_RW&lt;/Account&gt;
            &lt;FullName&gt;&lt;/FullName&gt;
            &lt;AccountType&gt;GROUP&lt;/AccountType&gt;
            &lt;Permission&gt;Modify&lt;/Permission&gt;
        &lt;/Group&gt;
    &lt;/Folder&gt;
    &lt;Folder&gt;
        &lt;Path&gt;\\path\to\folder\_Shared Data\&lt;/Path&gt;
        &lt;Group&gt;
            &lt;Account&gt;Shared_Data_RO&lt;/Account&gt;
            &lt;FullName&gt;&lt;/FullName&gt;
            &lt;AccountType&gt;GROUP&lt;/AccountType&gt;
            &lt;Permission&gt;Read &amp; Execute&lt;/Permission&gt;
        &lt;/Group&gt;
    &lt;/Folder&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>15150140</id><snippet>&lt;root&gt;
   &lt;Folder&gt;
      &lt;Path&gt;\\path\to\folder\_Shared Data\&lt;/Path&gt;
      &lt;Group&gt;
         &lt;Account&gt;Shared_Data_RW&lt;/Account&gt;
         &lt;FullName/&gt;
         &lt;AccountType&gt;GROUP&lt;/AccountType&gt;
         &lt;Permission&gt;Modify&lt;/Permission&gt;
      &lt;/Group&gt;
      &lt;Group&gt;
         &lt;Account&gt;Shared_Data_RO&lt;/Account&gt;
         &lt;FullName/&gt;
         &lt;AccountType&gt;GROUP&lt;/AccountType&gt;
         &lt;Permission&gt;Read &amp; Execute&lt;/Permission&gt;
      &lt;/Group&gt;
   &lt;/Folder&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>15150314</id><snippet>selection</snippet></ROW><ROW><id>15150314</id><snippet>selection = ''
while selection.lower() not in ("r","t"):
    print("This program can operate in random mode (fluctuations will randomly occur) or it can operate in test mode (fluctuations are fixed).")
    print("(r)andom mode")
    print("(t)est mode")
    selection = input("Mode of operation:")
    if selection.lower() not in ("r","t"):
         print("\nPlease select 'r' or 't' for mode selection\n")
    elif (selection.lower() == "r"):
        print("Random mode enabled")
        n = random.randrange(1,101)
        selection = '' # redefined here
        while selection not in ("1","2","3"): 
            print("\tInvestment options:")
            print("(1)Fly-By-Night Investments (FBN): high risk, high potential returns")
            print("(2)Blue Chips INC. (BCI): moderate risk, good potential yearly returns")
            print("(3)Slow-And-Steady-Corp. (SNS), mature industry stock: no risk but low returns")
            selection = input("Please enter your investment option 1, 2, or 3:")
            if selection not in ("1","2","3"):
                print("\nPlease enter an investment option from the menu using 1, 2, or 3 as valid selections:\n")
</snippet></ROW><ROW><id>15150314</id><snippet>selection</snippet></ROW><ROW><id>15150314</id><snippet>while</snippet></ROW><ROW><id>15150314</id><snippet>selection</snippet></ROW><ROW><id>15150314</id><snippet>selection = ''
while selection.lower() not in ("r","t"):
    print("This program can operate in random mode (fluctuations will randomly occur) or it can operate in test mode (fluctuations are fixed).")
    print("(r)andom mode")
    print("(t)est mode")
    selection = input("Mode of operation:")
    if selection.lower() not in ("r","t"):
         print("\nPlease select 'r' or 't' for mode selection\n")
    elif (selection.lower() == "r"):
        print("Random mode enabled")
        n = random.randrange(1,101)
        investmentChoice = ''
        while investmentChoice not in ("1","2","3"): 
            print("\tInvestment options:")
            print("(1)Fly-By-Night Investments (FBN): high risk, high potential returns")
            print("(2)Blue Chips INC. (BCI): moderate risk, good potential yearly returns")
            print("(3)Slow-And-Steady-Corp. (SNS), mature industry stock: no risk but low returns")
            investmentChoice = input("Please enter your investment option 1, 2, or 3:")
            if investmentChoice not in ("1","2","3"):
                print("\nPlease enter an investment option from the menu using 1, 2, or 3 as valid selections:\n")
</snippet></ROW><ROW><id>15150352</id><snippet>def prod(terms, expansions):
    if not terms: # base case
        yield ()
        return

    t = terms[0] # take the first term

    for v in expansions[t]: # expand the term, to get values
        if v not in expansions: # can the value can be expanded?
            gen = prod(terms[1:], expansions) # if not, we do a basic recursion
        else:
            gen = prod(terms[1:] + [v], expansions) # if so, we add it to terms

        for p in gen: # now we get iterate over the results of the recursive call
            yield (v,) + p # and add our value to the start
</snippet></ROW><ROW><id>15150352</id><snippet>expansions = {
        'colors':['red', 'blue', 'green'],
        'fruits':['apple', 'orange', 'banana'],
        'locations':['indoors', 'outdoors'],
        'indoors':['bathroom', 'bedroom', 'kitchen'],
        'green':['forest', 'light', 'dark']
    }

terms = ["colors", "locations"] # fruits omitted, to reduce the number of lines

for p in prod(terms, expansions):
    print(p)
</snippet></ROW><ROW><id>15150352</id><snippet>('red', 'indoors', 'bathroom')
('red', 'indoors', 'bedroom')
('red', 'indoors', 'kitchen')
('red', 'outdoors')
('blue', 'indoors', 'bathroom')
('blue', 'indoors', 'bedroom')
('blue', 'indoors', 'kitchen')
('blue', 'outdoors')
('green', 'indoors', 'forest', 'bathroom')
('green', 'indoors', 'forest', 'bedroom')
('green', 'indoors', 'forest', 'kitchen')
('green', 'indoors', 'light', 'bathroom')
('green', 'indoors', 'light', 'bedroom')
('green', 'indoors', 'light', 'kitchen')
('green', 'indoors', 'dark', 'bathroom')
('green', 'indoors', 'dark', 'bedroom')
('green', 'indoors', 'dark', 'kitchen')
('green', 'outdoors', 'forest')
('green', 'outdoors', 'light')
('green', 'outdoors', 'dark')
</snippet></ROW><ROW><id>15150473</id><snippet>for</snippet></ROW><ROW><id>15150473</id><snippet>[os.path.getsize(f) for i in conversion for f in glob.glob(i)]
</snippet></ROW><ROW><id>15150548</id><snippet>import pandas as pd

# read in a fixed-width file
df = pd.read_fwf("crime.tsv", widths=[14] + [10]*8, header=None)
# clean up the strings
df = df.applymap(lambda x: x.strip() if isinstance(x, basestring) else x)

# make a new column
df["County"] = None
# move over the county information
df["County"][df[5] == "COUNTY"] = df[6]
# fill the county info forwards into the empty places
df["County"].fillna(method='ffill', inplace=True)

# fill the crime information forwards
df[0].fillna(method='ffill', inplace=True)

# reset the columns from one of the examples
df.columns = ["Crime"] + list(df.ix[3,1:-1]) + ["County"]
# get rid of any of the headings left in the table
df = df[~(df["Gender"] == "Gender")]

# toss anything which still has empty cells
df = df.dropna()

# reset the index, and fix the types
df = df.set_index(["Crime", "Gender", "County"]).astype(int)
df = df.reset_index()
</snippet></ROW><ROW><id>15150548</id><snippet>&gt;&gt;&gt; df
      Crime Gender County  Age_20  Age_21  Age_22  Age_23  Asian  Hispanic  White
0   Robbery      F    001       1       2       2       2      3         3      3
1   Robbery      M    001       3       3       2       2      4         3      3
2     Fraud      F    001       1       2       2       2      3         3      2
3     Fraud      M    001       2       3       2       2      4         3      3
4     Arson      F    001       1       2       2       2      3         3      3
5     Arson      M    001       4       3       2       2      4         3      4
6   Robbery      F    002       1       2       2       2      3         3      3
7   Robbery      M    002       2       3       2       2      4         4      3
8     Fraud      F    002       1       2       2       2      3         3      2
9     Fraud      M    002       2       3       2       2      4         6      3
10    Arson      F    002       1       2       2       2      3         3      3
11    Arson      M    002       4       3       2       2      4         3      4
12  Robbery      F    003       1       2       2       2      3         3      3
13  Robbery      M    003       3       3       2       2      4         3      3
14    Fraud      F    003       1       2       1       4      3         3      2
15    Fraud      M    003       2       3       2       2      4         3      3
16    Arson      F    003       1       2       4       2      3         3      3
17    Arson      M    003       4       3       2       2      4         3      4
</snippet></ROW><ROW><id>15150614</id><snippet>&gt;&gt;&gt; from string import ascii_lowercase
&gt;&gt;&gt; lower = list(ascii_lowercase)
&gt;&gt;&gt; for i in range(1, len(lower) + 1):
    print lower[-i:]


['z']
['y', 'z']
['x', 'y', 'z']
['w', 'x', 'y', 'z']
['v', 'w', 'x', 'y', 'z']
...
</snippet></ROW><ROW><id>15150614</id><snippet>range</snippet></ROW><ROW><id>15150614</id><snippet>len</snippet></ROW><ROW><id>15150614</id><snippet>for test in (lower[-i:] for i, j in enumerate(lower, start=1)):
    print test
</snippet></ROW><ROW><id>15150917</id><snippet>        process.join(timeout=0.2)
        if process.is_alive():
            util.info('manager still alive')
            if hasattr(process, 'terminate'):
                util.info('trying to `terminate()` manager process')
                process.terminate()
                process.join(timeout=0.1)
                if process.is_alive():
                    util.info('manager still alive after terminate')
</snippet></ROW><ROW><id>15151027</id><snippet>&gt;&gt;&gt; from itertools import compress
&gt;&gt;&gt; list(compress("abcdefg", [1, 1, 0, 0, 1, 1, 0]))
['a', 'b', 'e', 'f']
</snippet></ROW><ROW><id>15151027</id><snippet>&gt;&gt;&gt; [e for e, i in zip("abcdefg", [1, 1, 0, 0, 1, 1, 0]) if i]
['a', 'b', 'e', 'f']
</snippet></ROW><ROW><id>15151027</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; st = "abcdefghijklm"
&gt;&gt;&gt; some_list = [1,1,0,0,0,1,1,1,0,0,0,1,0]
&gt;&gt;&gt; it_l = iter(some_list)
&gt;&gt;&gt; [''.join(v) for k, v in groupby(st, key = lambda e:next(it_l)) if k]
['ab', 'fgh', 'l']
</snippet></ROW><ROW><id>15151027</id><snippet>&gt;&gt;&gt; [''.join(zip(*v)[-1]) for k, v in groupby(zip(some_list, st), key = itemgetter(0)) if k]
['ab', 'fgh', 'l']
</snippet></ROW><ROW><id>15151155</id><snippet>with clause</snippet></ROW><ROW><id>15151155</id><snippet>with open(from_file) as fin:
    indata = fin.read()
</snippet></ROW><ROW><id>15151155</id><snippet>infile = open(from_file)
indata = infile.read()
infile.close()
</snippet></ROW><ROW><id>15151310</id><snippet>fileinput</snippet></ROW><ROW><id>15151310</id><snippet>inplace=True</snippet></ROW><ROW><id>15151310</id><snippet>set</snippet></ROW><ROW><id>15151310</id><snippet>import fileinput

with open('file2.txt') as fin:
    exclude = set(line.rstrip() for line in fin)

for line in fileinput.input('file1.txt', inplace=True):
    if line.rstrip() not in exclude:
        print line,
</snippet></ROW><ROW><id>15151379</id><snippet>test</snippet></ROW><ROW><id>15151379</id><snippet>test</snippet></ROW><ROW><id>15151379</id><snippet>import ctypes as c

class test(c.Structure):
   _fields_ = [("example" , c.c_long)]

t = test(5)
print(t.example) # -&gt; 5
print("%d" % t.example) # -&gt; 5
</snippet></ROW><ROW><id>15151465</id><snippet>http://blog.myblog.com/tag/{{ tag }}/feed/
</snippet></ROW><ROW><id>15151465</id><snippet>http://blog.myblog.com/tag/somethingToTest/feed/
</snippet></ROW><ROW><id>15151788</id><snippet>itertools.product</snippet></ROW><ROW><id>15151788</id><snippet>repeat</snippet></ROW><ROW><id>15151788</id><snippet>from string import ascii_letters
from itertools import product

for i in range(1, 3): # do 1 and 2 chars
    chars = product(ascii_letters, repeat=i)
    for combo in chars:
        print(''.join(combo))
</snippet></ROW><ROW><id>15151795</id><snippet>from datetime import date

def not_on(dates):
    def noop(): pass
    def decor(fn):
        if date.today() in dates:
            return noop
        else:
            return fn
    return decor


@not_on( ( date(2013, 03, 01), ) )
def job():
    print "yeah"
</snippet></ROW><ROW><id>15151795</id><snippet>apscheduler</snippet></ROW><ROW><id>15151884</id><snippet>import re
from pprint import pprint

s ="&lt; one &gt; &lt; two &gt; &lt; three &gt; &lt; four : 1 &gt; &lt; five : 2 &gt; &lt; six : 3 &gt; &lt; seven : 4 &gt; &lt; eight : 5 &gt; &lt; nine : 6 &gt;"
res = re.findall('&lt; (.*?) &gt;', s)
pprint(res)
</snippet></ROW><ROW><id>15151884</id><snippet>['one',
 'two',
 'three',
 'four : 1',
 'five : 2',
 'six : 3',
 'seven : 4',
 'eight : 5',
 'nine : 6']
</snippet></ROW><ROW><id>15151910</id><snippet>vertex_set</snippet></ROW><ROW><id>15151910</id><snippet>vertex_set</snippet></ROW><ROW><id>15151910</id><snippet>def vertex_set(graph):
   """Set's the vertex based on the graph passed.

      Returns set of vertices.
      Raises ValueError if graph is not a tuple of sets.
    """
</snippet></ROW><ROW><id>15151910</id><snippet>vertex_set</snippet></ROW><ROW><id>15151910</id><snippet>import unittest
import undirected_graph

class UndirectedGraphTestCase(unittest.testCase):
    def test_vertex_set(self):

        # Test we can set a vertex
        graph = ({1, 2}, {3, 4})
        result = undirected_graph.vertex_set(graph)
        self.assertEqual(result. {3, 4})

        # Test we can handle a negative vertex
        graph = ({1, 2}, {-3, -4})
        result = undirected_graph.vertex_set(graph)
        self.assertEqual(result, {-3, -4})

        # Test we can handle when we give an invalid graph
        graph = ()
        self.assertRaises(ValueError, undirected_graph.vertex_set, graph)
</snippet></ROW><ROW><id>15152006</id><snippet>from xml.etree import ElementTree
from xml.etree.ElementTree import iterparse

level = 0

for (event, node) in iterparse( fileName, ['start', 'end', 'start-ns', 'end-ns'] ):

    if event == 'end':
        level -= 1

    if event == 'start':
        level += 1

    # do soething with node ...
</snippet></ROW><ROW><id>15152113</id><snippet>for route in LiveRoutes.objects.filter(calculated=False).iterator():
    # Do your calculation

    route.calculated = True
    route.save()
</snippet></ROW><ROW><id>15152113</id><snippet>NullBooleanField</snippet></ROW><ROW><id>15152113</id><snippet>False</snippet></ROW><ROW><id>15152146</id><snippet>firsts = [set([pair[0] for pair in v]) for v in dict.values()]
</snippet></ROW><ROW><id>15152146</id><snippet>similar = reduce(lambda x,y: x.intersection(y), firsts)
</snippet></ROW><ROW><id>15152146</id><snippet>filtered = { k:[pair for pair in v if pair[0] in similar] \
             for k,v in dict.items() }
</snippet></ROW><ROW><id>15152208</id><snippet>output.split('\n')[1].split()[1]
</snippet></ROW><ROW><id>15152324</id><snippet>import webbrowser

webbrowser.get("open -a C:\\Program F~\\Mozilla Firefox\\firefox.exe %s")
webbrowser.open('http://google.com')
</snippet></ROW><ROW><id>15152546</id><snippet>#Creating a list
my_numbers = []
r = range(5)
for i in r:
    try:
        my_numbers.append(int(input("Enter a number: ")))
    except:
        print( 'You must enter an integer' )
        r.append(i)

#Finding sum
Total = sum(my_numbers)

#Finding the average
Average = Total/5
print ("The average is: ")
print (Average)
print ("The numbers greater than the average are: ")
print ([x for x in my_numbers if x&gt;Average])
</snippet></ROW><ROW><id>15152546</id><snippet>try   except</snippet></ROW><ROW><id>15152546</id><snippet>i</snippet></ROW><ROW><id>15152546</id><snippet>r</snippet></ROW><ROW><id>15152546</id><snippet>r</snippet></ROW><ROW><id>15152592</id><snippet>fastcgi_param SCRIPT_NAME $fastcgi_script_name;</snippet></ROW><ROW><id>15152895</id><snippet>eval</snippet></ROW><ROW><id>15152895</id><snippet>&gt;&gt;&gt; d = {'x':3, 'y':2, 'z':5}
&gt;&gt;&gt; eval("x + y + z", d)
    10
</snippet></ROW><ROW><id>15152895</id><snippet>eval</snippet></ROW><ROW><id>15152895</id><snippet>rm -Rf /</snippet></ROW><ROW><id>15152921</id><snippet>list.count</snippet></ROW><ROW><id>15152921</id><snippet>your_list.count(0)
</snippet></ROW><ROW><id>15152921</id><snippet>&gt;&gt;&gt; help(list.count)
Help on method_descriptor:

count(...)
    L.count(value) -&gt; integer -- return number of occurrences of value
</snippet></ROW><ROW><id>15152945</id><snippet>string.punctuation</snippet></ROW><ROW><id>15152945</id><snippet>import string
x = "This is my text, this is a nice way to input text."
y = "".join([i for i in x if not in string.punctuation]).split(" ")
print y
</snippet></ROW><ROW><id>15153243</id><snippet>try:
    while mydeque:
        alpha = mydeque.popleft()
        beta = mydeque.popleft()
        gamma = mydeque.popleft()
except IndexError:
    # handle empty mydeque
</snippet></ROW><ROW><id>15153330</id><snippet>sklearn.svm.SVC</snippet></ROW><ROW><id>15153330</id><snippet>LinearSVC</snippet></ROW><ROW><id>15153330</id><snippet>LogisticRegression</snippet></ROW><ROW><id>15153330</id><snippet>PassiveAggressiveClassifier</snippet></ROW><ROW><id>15153330</id><snippet>SGDClassifier</snippet></ROW><ROW><id>15153330</id><snippet>scipy.sparse</snippet></ROW><ROW><id>15153521</id><snippet>scipy.ndimage.binary_dilation</snippet></ROW><ROW><id>15153521</id><snippet>scipy.ndimage.binary_erosion</snippet></ROW><ROW><id>15153521</id><snippet>import numpy as np
from scipy import ndimage
b = np.array([True,True,True,False,False,True,True,False,False,False,True,False,True])
ndimage.binary_erosion(ndimage.binary_dilation(b), border_value=1)
</snippet></ROW><ROW><id>15153597</id><snippet>url(r'(?P&lt;category&gt;[a-z]+)$', 'display', name='dyn_display')
reverse('dyn_display', kwargs={'category': 'first'})
</snippet></ROW><ROW><id>15153597</id><snippet>from django.http import HttpResponseRedirect
return HttpResponseRedirect(reverse('dyn_display', kwargs={'category': 'first'}))
</snippet></ROW><ROW><id>15153597</id><snippet>url(r'$', 'display', name='dyn_dysplay')
reverse('dyn_display')
</snippet></ROW><ROW><id>15153597</id><snippet>from django.http import HttpResponseRedirect
return HttpResponseRedirect(reverse('dyn_display'))
</snippet></ROW><ROW><id>15153597</id><snippet>url(r'$', 'display', name='dyn_optional_display')    
url(r'(?P&lt;category&gt;[a-z]+)$', 'display', name='dyn_display')
</snippet></ROW><ROW><id>15153597</id><snippet>def courses_display(request, category=None):
    ctx = {}
    if category:
        ctx.update({category: 'in'})
    return render_to_response('display/basic.html', ctx,    context_instance=RequestContext(request))
</snippet></ROW><ROW><id>15153653</id><snippet>s</snippet></ROW><ROW><id>15153811</id><snippet>sphinx</snippet></ROW><ROW><id>15153811</id><snippet>sphinx-quickstart</snippet></ROW><ROW><id>15153811</id><snippet>sphinx</snippet></ROW><ROW><id>15153811</id><snippet>project</snippet></ROW><ROW><id>15153811</id><snippet>conf.py</snippet></ROW><ROW><id>15153811</id><snippet>.rst</snippet></ROW><ROW><id>15153811</id><snippet>conf.py</snippet></ROW><ROW><id>15153811</id><snippet>rst_epilog</snippet></ROW><ROW><id>15153875</id><snippet>run()</snippet></ROW><ROW><id>15153875</id><snippet>run()</snippet></ROW><ROW><id>15153875</id><snippet>def run(self):
    logging.debug('running with %s and %s', self.args, self.kwargs)
    super(MyTh, self).run()
    return
</snippet></ROW><ROW><id>15153875</id><snippet>Thread.run</snippet></ROW><ROW><id>15153875</id><snippet>target</snippet></ROW><ROW><id>15153875</id><snippet>args</snippet></ROW><ROW><id>15153875</id><snippet>kwargs</snippet></ROW><ROW><id>15153875</id><snippet>Thread</snippet></ROW><ROW><id>15153875</id><snippet>threading.Thread.__init__(self, group=group, target=target, name=name,
                              verbose=verbose, args=args, kwargs=kwargs)
</snippet></ROW><ROW><id>15153875</id><snippet>my_func</snippet></ROW><ROW><id>15153875</id><snippet>def my_func(arg1, a, b):
    print arg1, a, b
    print 'Everything OK'
</snippet></ROW><ROW><id>15153875</id><snippet>MyTh</snippet></ROW><ROW><id>15153875</id><snippet>Thread.__init__</snippet></ROW><ROW><id>15153875</id><snippet>def __init__(self, *args, **kwargs):
    threading.Thread.__init__(self, *args, **kwargs)
    self.args = kwargs['args']
    self.kwargs = kwargs['kwargs']
</snippet></ROW><ROW><id>15153875</id><snippet>args</snippet></ROW><ROW><id>15153875</id><snippet>kwargs</snippet></ROW><ROW><id>15153875</id><snippet>kwargs['args']</snippet></ROW><ROW><id>15153875</id><snippet>kwargs['kwargs']</snippet></ROW><ROW><id>15154057</id><snippet>extend</snippet></ROW><ROW><id>15154057</id><snippet>append</snippet></ROW><ROW><id>15154057</id><snippet>heading.extend((s['name'],s['price'],s['note']) for s in services)
</snippet></ROW><ROW><id>15154057</id><snippet>append</snippet></ROW><ROW><id>15154057</id><snippet>extend</snippet></ROW><ROW><id>15154057</id><snippet>a = [1, 2, 3]
a.append([4,5])
# a == [1, 2, 3, [4, 5]]

a = [1, 2, 3]
a.extend([4,5])
# a == [1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>15154272</id><snippet>f.seek(f.tell())
</snippet></ROW><ROW><id>15154272</id><snippet>read()</snippet></ROW><ROW><id>15154272</id><snippet>write()</snippet></ROW><ROW><id>15154272</id><snippet>f</snippet></ROW><ROW><id>15154272</id><snippet>+</snippet></ROW><ROW><id>15154272</id><snippet>bhaarat.seek(bhaarat.tell())</snippet></ROW><ROW><id>15154272</id><snippet>bhaarat_read = bhaarat.read()</snippet></ROW><ROW><id>15154272</id><snippet>bhaarat.write('\n23. English\n')</snippet></ROW><ROW><id>15154272</id><snippet>out</snippet></ROW><ROW><id>15154272</id><snippet>bhaarat.txt</snippet></ROW><ROW><id>15154272</id><snippet>out.txt</snippet></ROW><ROW><id>15154272</id><snippet>bhaarat = open('bhaarat.txt', 'r+')
bhaarat_read = bhaarat.read()
bhaarat.seek(bhaarat.tell())
out = open('out.txt', 'r+')
out_read = out.read()
out.seek(out.tell())
bhaarat_split = bhaarat_read.split()

for word in bhaarat_split:
    if word.startswith('S') or word.startswith('H'):
        out.write(word + "\n")

bhaarat.write('\n23. English\n')
print out_read
print bhaarat_read

bhaarat.close()
out.close()
</snippet></ROW><ROW><id>15154834</id><snippet> color   shape   fruit
 orange  oblong  orange
 red     round   apple
 orange  round   orange
 red     oblong  apple
 red     round   apple
</snippet></ROW><ROW><id>15154834</id><snippet>feature   class  |  feature  class
orange    orange |  oblong   orange
red       apple  |  round    apple
orange    orange |  round    orange
red       apple  |  oblong   apple
red       apple  |  round    apple
</snippet></ROW><ROW><id>15154834</id><snippet>        shape
___________________
|                 |
|                 |
red               orange
apple             orange
</snippet></ROW><ROW><id>15154834</id><snippet>num &gt; .52</snippet></ROW><ROW><id>15154834</id><snippet>from sklearn.trees import DecisionTreeClassifier
#make your sample matrix 
samples = [[1,1], [0,0], [1,0], [0,1], [0,0]]
#make your target vector ( in this case fruit)
fruitname = [1, 0, 1, 0, 0]
#create and fit the model
dtree =  DecisionTreeClassifier()
dtree =  dtree.fit(samples, fruitname)
#test an unknown red fruit that is oblong
dtree.predict([0,1])
</snippet></ROW><ROW><id>15154876</id><snippet>Places.objects.insert</snippet></ROW><ROW><id>15154876</id><snippet>Places</snippet></ROW><ROW><id>15154876</id><snippet>Places</snippet></ROW><ROW><id>15154876</id><snippet>Places(name="test", loc=[-87, 101]).save()
Places(name="test 2", loc=[-87, 101]).save()
</snippet></ROW><ROW><id>15154876</id><snippet>Places</snippet></ROW><ROW><id>15154876</id><snippet>insert</snippet></ROW><ROW><id>15154876</id><snippet>objects</snippet></ROW><ROW><id>15154876</id><snippet>Places.objects.insert([Places(name="test", loc=[-87, 101]), 
                       Places(name="test 2", loc=[-87, 101])])
</snippet></ROW><ROW><id>15154942</id><snippet>'\n'.join(a.strip() for a in s1.split(':'))
</snippet></ROW><ROW><id>15154942</id><snippet>One
Two
Three
Four  Value
Five  Value
Six  Value
Seven  Value
Eight  Value
</snippet></ROW><ROW><id>15154942</id><snippet>'\n\n'.join(a.strip() for a in s1.split(':'))
</snippet></ROW><ROW><id>15154984</id><snippet>import requests
import suds    

r = requests.get(SERVICE_WSDL_HTTPS_URL)
with open('/tmp/service.wsdl', 'w') as file:
    file.write(r.text)
client = suds.client.Client('file:///tmp/service.wsdl', location=SERVICE_HTTP_URL)
</snippet></ROW><ROW><id>15155111</id><snippet>from xml.etree import ElementTree

tree = ElementTree.parse('filename.xml')
for elem in tree.findall('lex'):
    print elem.attrib['marker']
</snippet></ROW><ROW><id>15155259</id><snippet>collections.Counter()</snippet></ROW><ROW><id>15155259</id><snippet>from collections import Counter
counts = Counter(main_list)

duplicate_list, unique_list = [], []
for entry in main_list:
    if counts[entry] &gt; 1:
        duplicate_list.append(entry)
    else:
        unique_list.append(entry)
</snippet></ROW><ROW><id>15155259</id><snippet>counts</snippet></ROW><ROW><id>15155259</id><snippet>main_list</snippet></ROW><ROW><id>15155259</id><snippet>main_list</snippet></ROW><ROW><id>15155284</id><snippet>sklearn.svm.LinearSVC</snippet></ROW><ROW><id>15155284</id><snippet>liblinear</snippet></ROW><ROW><id>15155284</id><snippet>svm.sparse.SVC</snippet></ROW><ROW><id>15155284</id><snippet>sklearn.naive_bayes.*</snippet></ROW><ROW><id>15155284</id><snippet>sklearn.linear_model.LogisticRegression</snippet></ROW><ROW><id>15155500</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>15155500</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; s = [(3, 4), (1, 2)]
&gt;&gt;&gt; list(itertools.chain.from_iterable(s))
[3, 4, 1, 2]
</snippet></ROW><ROW><id>15155500</id><snippet>&gt;&gt;&gt; s = [(3, 4), (1, 2)]
&gt;&gt;&gt; [i for sub in s for i in sub]
[3, 4, 1, 2]
</snippet></ROW><ROW><id>15155576</id><snippet>@timer_dec
class A(object):
  pass
</snippet></ROW><ROW><id>15155576</id><snippet>class A(object):
  pass
A = timer_dec(A)
</snippet></ROW><ROW><id>15155576</id><snippet>timer_dec</snippet></ROW><ROW><id>15155576</id><snippet>A</snippet></ROW><ROW><id>15156012</id><snippet>from django.utils.translation import ugettext as _

heading = (_('Service'), _('Price'), _('Note'))
table = Table([heading])
</snippet></ROW><ROW><id>15156075</id><snippet>list()</snippet></ROW><ROW><id>15156075</id><snippet>links = tree.xpath('//li[@class=""]//a/@href')

found = False

for link in links:
    if url in link:
        found = True
        break

print found
</snippet></ROW><ROW><id>15156075</id><snippet>any(url in link for link in links)
</snippet></ROW><ROW><id>15156075</id><snippet>any()</snippet></ROW><ROW><id>15156075</id><snippet>url in link</snippet></ROW><ROW><id>15156075</id><snippet>for link in links</snippet></ROW><ROW><id>15156236</id><snippet>targetNamespace</snippet></ROW><ROW><id>15156236</id><snippet>SomeObject.__namespace__ = 'spyne.examples.hello.soap'</snippet></ROW><ROW><id>15156236</id><snippet>'aaa'</snippet></ROW><ROW><id>15156635</id><snippet>self.newList, self.timeStamp = zip(*((x.rstrip(), '0') for i, x in enumerate(rawFile) if i%2==0))
</snippet></ROW><ROW><id>15156734</id><snippet>import fileinput
import sys
import re

newline = '''\
{l}
    public static final String CO_ID = "XXXXX"
'''

filename = '/path/to/file.java'
for line in fileinput.input([filename], inplace=True, backup='.bak'):
    if re.match(r'public class', line):
        sys.stdout.write(newline.format(l=line))
    else:
        sys.stdout.write(line)
</snippet></ROW><ROW><id>15156734</id><snippet>inplace=True,</snippet></ROW><ROW><id>15156734</id><snippet>backup='.bak'</snippet></ROW><ROW><id>15156734</id><snippet>fileinput.input</snippet></ROW><ROW><id>15156734</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>15156734</id><snippet>print</snippet></ROW><ROW><id>15156734</id><snippet>print</snippet></ROW><ROW><id>15156734</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>15156865</id><snippet>import csv

data_heading = {'Date': [(3,2)],
            'Rate': [(3,3)],
            'Product': [(3,7)]}

rdr = csv.reader(open(csvpath, 'rb'))
columns = [{key:row[pos[0][1]] for key,pos in data_heading.items()} for row in rdr]
# finally trim to desired row startpoints:
data = {key:[col[key] for col in columns[pos[0][0]:]] for key,pos in  data_heading.items()}
print data
</snippet></ROW><ROW><id>15156865</id><snippet>data_heading</snippet></ROW><ROW><id>15156865</id><snippet>data</snippet></ROW><ROW><id>15156931</id><snippet>class FooClass(object):
    ...

def __init__(self, nm='John Doe'):
    ...
</snippet></ROW><ROW><id>15156931</id><snippet>FooClass</snippet></ROW><ROW><id>15156931</id><snippet>__init__</snippet></ROW><ROW><id>15156931</id><snippet>class FooClass(object):
    ...
    def __init__(self, nm='John Doe'):
        ...
</snippet></ROW><ROW><id>15156931</id><snippet>FooClass</snippet></ROW><ROW><id>15156931</id><snippet>__init__</snippet></ROW><ROW><id>15157200</id><snippet>cursor.fetchall()</snippet></ROW><ROW><id>15157200</id><snippet>def nest(rows):
    root = {}
    for row in rows:
        d = root
        for item in row[:-2]:
            d = d.setdefault(item, {})
        d[row[-2]] = row[-1]
    return root
</snippet></ROW><ROW><id>15157200</id><snippet>import collections

def nesteddict():
    return collections.defaultdict(nesteddict)

nd = nesteddict()
for a, b, c in rows:
    nd[a][b] = c
</snippet></ROW><ROW><id>15157315</id><snippet>message</snippet></ROW><ROW><id>15157315</id><snippet>File</snippet></ROW><ROW><id>15157315</id><snippet>class</snippet></ROW><ROW><id>15157315</id><snippet># saved as greeting.py
import Pyro4

class GreetingMaker(object):
    def get_fortune(self, name):
        return "Hello, {0}. Here is your fortune message:\n" \
               "Tomorrow's lucky number is 12345678.".format(name)

greeting_maker=GreetingMaker()

daemon=Pyro4.Daemon()                 # make a Pyro daemon
ns=Pyro4.locateNS()                   # find the name server
uri=daemon.register(greeting_maker)   # register the greeting object as a Pyro object
ns.register("example.greeting", uri)  # register the object with a name in the name server

print "Ready."
daemon.requestLoop()                  # start the event loop of the server to wait for calls
</snippet></ROW><ROW><id>15157315</id><snippet># saved as client.py
import Pyro4

name=raw_input("What is your name? ").strip()

greeting_maker=Pyro4.Proxy("PYRONAME:example.greeting")    # use name server object lookup uri shortcut
print greeting_maker.get_fortune(name)
</snippet></ROW><ROW><id>15157389</id><snippet>Lx = [[1,2,5], [5,2,7], [7,0,4], [9,2,0], [1,8,5], [3,4,5], [3,2,7], [2,9,7]]
Ly = ['A', 'C', 'A', 'B', 'A', 'B', 'C', 'C']
d = {}
for x,y in zip(Lx,Ly):
    d.setdefault(y, []).append(x)
</snippet></ROW><ROW><id>15157389</id><snippet>d</snippet></ROW><ROW><id>15157389</id><snippet>{'A': [[1, 2, 5], [7, 0, 4], [1, 8, 5]],
 'B': [[9, 2, 0], [3, 4, 5]],
 'C': [[5, 2, 7], [3, 2, 7], [2, 9, 7]]}
</snippet></ROW><ROW><id>15157559</id><snippet>is_displayed</snippet></ROW><ROW><id>15157559</id><snippet>//label[text()='Yes']/preceding-sibling::input
</snippet></ROW><ROW><id>15157559</id><snippet>//label[text()='No']/preceding-sibling::input
</snippet></ROW><ROW><id>15157901</id><snippet>&lt;script&gt;
    function redirect(){
       window.location.href = "supply_url_here";
    }

    setTimeout(redirect, 2000); //2000 is equivalent to 2 seconds
&lt;/script&gt;
</snippet></ROW><ROW><id>15158056</id><snippet>scene = QGraphicsScene();
scene.addEllipse( 100, 100, 50, 50 )
scene.addRect( 200, 12, 120, 50 )
scene.addLine( 50, 70, 100, 400 )

for item in scene.items():
    if item.type() == QGraphicsEllipseItem().type():
        print "Ellipse",  item.rect()
    elif item.type() == QGraphicsRectItem().type():
        print "Rectangle",  item.rect()
    elif item.type() == QGraphicsLineItem().type():
        print "Line", item.line().p1(), item.line().p2()
</snippet></ROW><ROW><id>15158430</id><snippet>pynum2word</snippet></ROW><ROW><id>15158430</id><snippet>&gt;&gt;&gt; import num2word
&gt;&gt;&gt; dir(num2word)
['__builtins__', '__doc__', '__file__', '__name__', '__package__',
'_lang', '_loc', '_locale', '_locdict', '_module', '_modules',
'n2w', 'n2wmod', 'to_card', 'to_ord', 'to_ordnum', 'to_year']
&gt;&gt;&gt; num2word.to_card(1111)
'one thousand, one hundred and eleven'
</snippet></ROW><ROW><id>15158637</id><snippet>&gt;&gt;&gt; { k:v for k, v in hand.items() if v }
{'m': 1, 'l': 1}
</snippet></ROW><ROW><id>15158637</id><snippet>dict</snippet></ROW><ROW><id>15158637</id><snippet>&gt;&gt;&gt; dict((k, v) for k, v in hand.items() if v)
{'m': 1, 'l': 1}
</snippet></ROW><ROW><id>15158881</id><snippet>System.Collections.Specialized.OrderedDictionary</snippet></ROW><ROW><id>15159082</id><snippet>0 7 * * 5 sh -c " if [ $(expr $(expr $(date +\%s) \/ 604800) \% 2) -eq 0 ]; then command; fi "
</snippet></ROW><ROW><id>15159322</id><snippet>from xlrd import XLRDError
</snippet></ROW><ROW><id>15159322</id><snippet>Error</snippet></ROW><ROW><id>15159322</id><snippet>try:
    libro_dia = xlrd.open_workbook(file_contents = libro_dia)
except xlrd.XLRDError: #&lt;-- Qualified error here
    no_termina = False
</snippet></ROW><ROW><id>15159322</id><snippet>import xlrd
</snippet></ROW><ROW><id>15159322</id><snippet>import xlrd</snippet></ROW><ROW><id>15159322</id><snippet>from xlrd import *</snippet></ROW><ROW><id>15159322</id><snippet>from xlrd import XLRDError</snippet></ROW><ROW><id>15159322</id><snippet>except XLRDError</snippet></ROW><ROW><id>15159580</id><snippet>os.walk</snippet></ROW><ROW><id>15159580</id><snippet>for root, dirs, files in os.walk(top):
    # do stuff with root, dirs, and files
</snippet></ROW><ROW><id>15159580</id><snippet>    In [7]: os.walk('.')
    Out[7]: &lt;generator object walk at 0x1707050&gt;

    In [8]: next(os.walk('.'))
    Out[8]:
    ('.',
     ['.vim',
      '.git',
       ...],
     ['.inputrc',
      ...])
</snippet></ROW><ROW><id>15159600</id><snippet>cached_obj_get</snippet></ROW><ROW><id>15159600</id><snippet>def cached_obj_get(self, request=None, **kwargs):
</snippet></ROW><ROW><id>15159600</id><snippet>def cached_obj_get(self, bundle, **kwargs):
</snippet></ROW><ROW><id>15159600</id><snippet>request</snippet></ROW><ROW><id>15159600</id><snippet>bundle.request</snippet></ROW><ROW><id>15159600</id><snippet>basic_bundle = self.build_bundle(request=request)
</snippet></ROW><ROW><id>15159600</id><snippet>cached_obj_get</snippet></ROW><ROW><id>15159600</id><snippet>Resource.get_detail</snippet></ROW><ROW><id>15159600</id><snippet>obj = self.cached_obj_get(bundle=basic_bundle, **self.remove_api_resource_names(kwargs))
</snippet></ROW><ROW><id>15159600</id><snippet>self</snippet></ROW><ROW><id>15159600</id><snippet>self</snippet></ROW><ROW><id>15159600</id><snippet>self</snippet></ROW><ROW><id>15159600</id><snippet>bundle</snippet></ROW><ROW><id>15159775</id><snippet>random.randint</snippet></ROW><ROW><id>15159883</id><snippet>[Desktop Entry] 
Type=Application
Exec=python /path/to/your/application.py arguments
</snippet></ROW><ROW><id>15159893</id><snippet>__len__</snippet></ROW><ROW><id>15159893</id><snippet>len(ob)</snippet></ROW><ROW><id>15159893</id><snippet>type(ob).__len__(ob)</snippet></ROW><ROW><id>15159893</id><snippet>ob.__len__()</snippet></ROW><ROW><id>15159994</id><snippet>In [9]: import ast
In [10]: ast.literal_eval("[2,1,3,4]")
Out[10]: [2, 1, 3, 4]
</snippet></ROW><ROW><id>15160046</id><snippet>overlaps</snippet></ROW><ROW><id>15160046</id><snippet>for</snippet></ROW><ROW><id>15160046</id><snippet>overlaps</snippet></ROW><ROW><id>15160046</id><snippet>for ssid in overlaps:
  if ssid != subseq_id:
     overlaps = subseq_id_to_overlap_ssids_dict[ssid]
</snippet></ROW><ROW><id>15160046</id><snippet>overlaps</snippet></ROW><ROW><id>15160046</id><snippet>for</snippet></ROW><ROW><id>15160227</id><snippet>def __init__(self, name, password, email):
    self.name = name
    self.password = password
    self.email = email   
</snippet></ROW><ROW><id>15160269</id><snippet>extent</snippet></ROW><ROW><id>15160269</id><snippet>imshow</snippet></ROW><ROW><id>15160269</id><snippet>[left, right, bottom, top]</snippet></ROW><ROW><id>15160269</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy.misc import imread
import matplotlib.cbook as cbook

np.random.seed(0)
x = np.random.uniform(0.0,10.0,15)
y = np.random.uniform(0.0,10.0,15)

datafile = cbook.get_sample_data('lena.jpg')
img = imread(datafile)
plt.scatter(x,y,zorder=1)
plt.imshow(img, zorder=0, extent=[0.5, 8.0, 1.0, 7.0])
plt.show()
</snippet></ROW><ROW><id>15160494</id><snippet>&gt;&gt;&gt; re.match(r'^Two:.*$')
</snippet></ROW><ROW><id>15160723</id><snippet>class Bar:
    # fields...

    @classmethod
    def _validate_unique(cls, self):
        try:
            obj = cls._default_manager.get(attr1=self.attr1, attr3=self.attr3)
            if not obj == self:
                raise IntegrityError('Duplicate')
        except cls.DoesNotExist:
            pass

    def clean(self):
        self._validate_unique(self)
        super(Bar, self).clean()
</snippet></ROW><ROW><id>15160726</id><snippet>livesettings</snippet></ROW><ROW><id>15160726</id><snippet>index.html</snippet></ROW><ROW><id>15160805</id><snippet>getObject()</snippet></ROW><ROW><id>15160805</id><snippet>obj = brain.getObject()
</snippet></ROW><ROW><id>15160805</id><snippet>setCreators()</snippet></ROW><ROW><id>15160805</id><snippet>obj.setCreators([creator])
</snippet></ROW><ROW><id>15160805</id><snippet>Owner</snippet></ROW><ROW><id>15160805</id><snippet>roles = list(obj.get_local_roles_for_userid(crtor_obj))
if 'Owner' not in roles:
    roles.append('Owner')
    obj.manage_setLocalRoles(crtor_obj, roles)
</snippet></ROW><ROW><id>15160805</id><snippet>plone.app.changeownership</snippet></ROW><ROW><id>15160846</id><snippet>CTRL + C</snippet></ROW><ROW><id>15160846</id><snippet># WORKER_NAME.py
import os

PID = os.getpid()

@atexit.register
def clean_shut():
    print "Clean shut performed"

    try:
        os.unlink("WORKER_NAME.%d" % PID)
    except:
        pass

# Worker main
def main():
    f = open("WORKER_NAME.%d" % PID, "w")
    f.write("Delete this to end WORKER_NAME gracefully")
    f.close()

    while os.path.exists("WORKER_NAME.%d" % PID):
        # Worker working
</snippet></ROW><ROW><id>15160846</id><snippet>os.unlink("path/to/WORKER_NAME.%d" % worker_PID)</snippet></ROW><ROW><id>15161248</id><snippet>self.finish()</snippet></ROW><ROW><id>15161248</id><snippet>if command in ['ON', 'OFF', 'TOGGLE']:
    ret['success'] = "The %s command has been succesfully sent!" % (command.upper())
    self.write(tornado.escape.json_encode(ret))
    self.finish()
    return           # self.finish() finishes the request - doesn't return
else ...
</snippet></ROW><ROW><id>15161361</id><snippet>&gt;&gt;&gt; defined_args = {k:v for k,v in args._get_kwargs() if v is not None}
&gt;&gt;&gt; foo = Foo(**defined_args)
</snippet></ROW><ROW><id>15161361</id><snippet>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; args = argparse.Namespace(key1=None,key2='value')
&gt;&gt;&gt; {k:v for k,v in args._get_kwargs() if v is not None}
{'key2': 'value'}
</snippet></ROW><ROW><id>15161361</id><snippet>_get_kwargs()</snippet></ROW><ROW><id>15161369</id><snippet>d</snippet></ROW><ROW><id>15161369</id><snippet>d</snippet></ROW><ROW><id>15161405</id><snippet>pad</snippet></ROW><ROW><id>15161405</id><snippet>fields = ["ident", "make", "model", "disp", "power", "luxury"]
max_len = {"name": max(map(len, car_objects)) + 1}
for f in fields:
    max_len[f] = max(map(len, [f] + [str(car[f]) for car in car_objects.values()]))
pad = lambda s, f: str(s).ljust(max_len[f])
</snippet></ROW><ROW><id>15161405</id><snippet>car_objects</snippet></ROW><ROW><id>15161405</id><snippet>pad</snippet></ROW><ROW><id>15161405</id><snippet>print pad("", "name") + " ".join(pad(f.upper(), f) for f in fields)
for name, car in car_objects.items():
    print pad(name, "name") + " ".join(pad(car[f], f) for f in fields)
</snippet></ROW><ROW><id>15161405</id><snippet>car_objects</snippet></ROW><ROW><id>15161405</id><snippet>car[f]</snippet></ROW><ROW><id>15161405</id><snippet>getattr(c, f)</snippet></ROW><ROW><id>15161405</id><snippet>for</snippet></ROW><ROW><id>15161405</id><snippet>print (" " * 20) + " ".join(f.upper().ljust(10) for f in fields)
</snippet></ROW><ROW><id>15161405</id><snippet>yield</snippet></ROW><ROW><id>15161405</id><snippet>print name.ljust(20) + " ".join(str(getattr(car, f)).ljust(10) for f in fields)
</snippet></ROW><ROW><id>15161405</id><snippet>str.ljust(n)</snippet></ROW><ROW><id>15161405</id><snippet>n</snippet></ROW><ROW><id>15161405</id><snippet>rjust</snippet></ROW><ROW><id>15161405</id><snippet>center</snippet></ROW><ROW><id>15161405</id><snippet>getattr(&lt;object&gt;, &lt;attribute name&gt;)</snippet></ROW><ROW><id>15161405</id><snippet>getVariable</snippet></ROW><ROW><id>15161629</id><snippet>class Parent(models.Model)
    field_a =  models.CharField(primary_key = True, max_length = 24)
    field_b =  models.CharField(primary_key = True, max_length = 24)

    class Meta:
        abstract = True

class A(Parent)
    pass

class B(Parent)
    pass
</snippet></ROW><ROW><id>15161753</id><snippet>for</snippet></ROW><ROW><id>15161753</id><snippet>for(int i=10; i&gt;0; i-=1)
</snippet></ROW><ROW><id>15161824</id><snippet>for thing in (Thing1,Thing2,Thing3):
    try:
       thing()
       break  #break out of loop, don't execute else clause
    except:   #BARE EXCEPT IS USUALLY A BAD IDEA!
       pass
else:
    print "nothing worked"
</snippet></ROW><ROW><id>15161905</id><snippet>sys.path</snippet></ROW><ROW><id>15161905</id><snippet>rmod.py</snippet></ROW><ROW><id>15161905</id><snippet>__init__.py</snippet></ROW><ROW><id>15161905</id><snippet>rmod</snippet></ROW><ROW><id>15161905</id><snippet>rmod</snippet></ROW><ROW><id>15161905</id><snippet>from rmod2 import rmod2
</snippet></ROW><ROW><id>15161937</id><snippet>break</snippet></ROW><ROW><id>15161937</id><snippet>elif</snippet></ROW><ROW><id>15161937</id><snippet>elif guess == the_number:
    print("You guessed it!  The number was", the_number)
    print("And it only took you", tries, "tries!\n")
break
</snippet></ROW><ROW><id>15161937</id><snippet>break</snippet></ROW><ROW><id>15161937</id><snippet>elif</snippet></ROW><ROW><id>15162013</id><snippet>vars()[rate] = 'k' + str(i)
</snippet></ROW><ROW><id>15162013</id><snippet>vars()['k' + str(i)]=rate
</snippet></ROW><ROW><id>15162041</id><snippet>pyrax</snippet></ROW><ROW><id>15162699</id><snippet>np.s_</snippet></ROW><ROW><id>15162699</id><snippet>import numpy as np
np.s_[1:2:3]
Out[1]: slice(1, 2, 3)
</snippet></ROW><ROW><id>15162738</id><snippet>self.mainWindow.mainBox.mainToolbar.set_style(Gtk.ToolbarStyle.*)
</snippet></ROW><ROW><id>15162738</id><snippet>self.mainWindow.mainBox.mainToolbar.set_style(Gtk.ToolbarStyle.BOTH_HORIZ)
self.mainWindow.mainBox.mainToolbar.overviewRadio.set_is_important(True)
</snippet></ROW><ROW><id>15162738</id><snippet>Gtk.ToolbarStyle</snippet></ROW><ROW><id>15162738</id><snippet>dir(Gtk.ToolbarStyle)</snippet></ROW><ROW><id>15163171</id><snippet>A-Z</snippet></ROW><ROW><id>15163171</id><snippet>ohn</snippet></ROW><ROW><id>15163171</id><snippet>oe</snippet></ROW><ROW><id>15163171</id><snippet>com</snippet></ROW><ROW><id>15163171</id><snippet>re.I</snippet></ROW><ROW><id>15163171</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; email_add = "John@Doe.com &lt;John@Doe.com&gt;"
&gt;&gt;&gt; re.match(r"(\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b) &lt;(\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b)", email_add)
&gt;&gt;&gt; re.match(r"(\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b) &lt;(\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b)", email_add, re.I)
&lt;_sre.SRE_Match object at 0x1030d4f10&gt;
&gt;&gt;&gt; _.groups()
('John@Doe.com', 'John@Doe.com')
</snippet></ROW><ROW><id>15163171</id><snippet>a-z</snippet></ROW><ROW><id>15163171</id><snippet>&gt;&gt;&gt; re.match(r"(\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}\b) &lt;(\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}\b)", email_add)
&lt;_sre.SRE_Match object at 0x1030d4f10&gt;
&gt;&gt;&gt; _.groups()
('John@Doe.com', 'John@Doe.com')
</snippet></ROW><ROW><id>15163203</id><snippet>(word[-1])</snippet></ROW><ROW><id>15163203</id><snippet>[word[-1]]</snippet></ROW><ROW><id>15163203</id><snippet>&gt;&gt;&gt; def stringRev (word):
...     worLen = len(word)
...     if worLen == 1:
...         return word
...     return [word[-1]] + stringRev(word[:-1])
... 
&gt;&gt;&gt; listWord = ["hey", "there", "jim"]
&gt;&gt;&gt; print(stringRev(listWord))
['jim', 'there', 'hey']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15163203</id><snippet>TypeError: Can't convert 'list' object to str implicitly</snippet></ROW><ROW><id>15163412</id><snippet>f_int</snippet></ROW><ROW><id>15163412</id><snippet>&gt;&gt;&gt; x = np.arange(1, 100, 0.1)
&gt;&gt;&gt; f = 2 * x # a simple function to see the results are good
&gt;&gt;&gt; f_int = scipy.interpolate.InterpolatedUnivariateSpline(x, f, k=2)

&gt;&gt;&gt; x = np.arange(25).reshape(5, 5) + 1
&gt;&gt;&gt; x
array([[ 1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10],
       [11, 12, 13, 14, 15],
       [16, 17, 18, 19, 20],
       [21, 22, 23, 24, 25]])
&gt;&gt;&gt; x_int = f_int(x.reshape(-1)).reshape(x.shape)
&gt;&gt;&gt; x_int
array([[  2.,   4.,   6.,   8.,  10.],
       [ 12.,  14.,  16.,  18.,  20.],
       [ 22.,  24.,  26.,  28.,  30.],
       [ 32.,  34.,  36.,  38.,  40.],
       [ 42.,  44.,  46.,  48.,  50.]])
</snippet></ROW><ROW><id>15163412</id><snippet>x.reshape(-1)</snippet></ROW><ROW><id>15163412</id><snippet>.reshape(x.shape)</snippet></ROW><ROW><id>15163418</id><snippet>1</snippet></ROW><ROW><id>15163418</id><snippet>7</snippet></ROW><ROW><id>15163418</id><snippet>7B</snippet></ROW><ROW><id>15163418</id><snippet>0</snippet></ROW><ROW><id>15163418</id><snippet>0x7B</snippet></ROW><ROW><id>15163418</id><snippet>1</snippet></ROW><ROW><id>15163418</id><snippet>173</snippet></ROW><ROW><id>15163418</id><snippet>0</snippet></ROW><ROW><id>15163418</id><snippet>0173</snippet></ROW><ROW><id>15163418</id><snippet>1</snippet></ROW><ROW><id>15163418</id><snippet>1111011</snippet></ROW><ROW><id>15163418</id><snippet>1</snippet></ROW><ROW><id>15163418</id><snippet>1101111</snippet></ROW><ROW><id>15163418</id><snippet>S</snippet></ROW><ROW><id>15163418</id><snippet>123</snippet></ROW><ROW><id>15163447</id><snippet>print</snippet></ROW><ROW><id>15163447</id><snippet>FirstName = raw_input("Please enter your first name: ")
Scores = map(int, raw_input("Please enter your four golf scores: ").split())
print "Score analysis for %s:" % FirstName
print "Your golf scores are:", Scores
print "The lowest score is %d" % min(Scores)
print "The highest score is %d" % max(Scores)
</snippet></ROW><ROW><id>15163490</id><snippet>short_description</snippet></ROW><ROW><id>15163490</id><snippet>Contact.short_description = 'foo'</snippet></ROW><ROW><id>15163524</id><snippet>&gt;&gt; import facs
&gt;&gt; dir (facs)
['__builtins__', '__doc__', '__file__', '__name__', '__package__', '__path__']
</snippet></ROW><ROW><id>15163524</id><snippet>__init__.py</snippet></ROW><ROW><id>15163524</id><snippet>.so</snippet></ROW><ROW><id>15163524</id><snippet>import facs</snippet></ROW><ROW><id>15163524</id><snippet>__init__.py</snippet></ROW><ROW><id>15163524</id><snippet>&gt;&gt; from _facs import function_name, function_name .....
</snippet></ROW><ROW><id>15163524</id><snippet>import facs</snippet></ROW><ROW><id>15163524</id><snippet>facs.so</snippet></ROW><ROW><id>15163524</id><snippet>_facs.so</snippet></ROW><ROW><id>15163774</id><snippet>&gt;&gt;&gt; d = OrderedDict((x,x) for x in reversed(range(10)) )
&gt;&gt;&gt; d
OrderedDict([(9, 9), (8, 8), (7, 7), (6, 6), (5, 5), (4, 4), (3, 3), (2, 2), (1, 1), (0, 0)])
&gt;&gt;&gt; regular = dict((x,x) for x in reversed(range(10)))
&gt;&gt;&gt; regular
{0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9}
</snippet></ROW><ROW><id>15163774</id><snippet>OrderedDict</snippet></ROW><ROW><id>15163774</id><snippet>dict</snippet></ROW><ROW><id>15163774</id><snippet>&gt;&gt;&gt; OrderedDict([('dog','dom'),('tiger','EN'), ('panda','EN')])
OrderedDict([('dog', 'dom'), ('tiger', 'EN'), ('panda', 'EN')])
</snippet></ROW><ROW><id>15163774</id><snippet>.update</snippet></ROW><ROW><id>15163774</id><snippet>&gt;&gt;&gt; OrderedDict(dog='dom',tiger='EN',panda='EN')  #doesn't preserve order
OrderedDict([('tiger', 'EN'), ('panda', 'EN'), ('dog', 'dom')])
</snippet></ROW><ROW><id>15163849</id><snippet>#define X509_get_notAfter(x) ((x)-&gt;cert_info-&gt;validity-&gt;notAfter)
</snippet></ROW><ROW><id>15163849</id><snippet>struct x509_st
{
X509_CINF *cert_info;
X509_ALGOR *sig_alg;
ASN1_BIT_STRING *signature;
int valid;
int references;
char *name;
CRYPTO_EX_DATA ex_data;
/* These contain copies of various extension values */
long ex_pathlen;
long ex_pcpathlen;
unsigned long ex_flags;
unsigned long ex_kusage;
unsigned long ex_xkusage;
unsigned long ex_nscert;
ASN1_OCTET_STRING *skid;
AUTHORITY_KEYID *akid;
X509_POLICY_CACHE *policy_cache;
STACK_OF(DIST_POINT) *crldp;
STACK_OF(GENERAL_NAME) *altname;
NAME_CONSTRAINTS *nc;
#ifndef OPENSSL_NO_RFC3779
STACK_OF(IPAddressFamily) *rfc3779_addr;
struct ASIdentifiers_st *rfc3779_asid;
#endif
#ifndef OPENSSL_NO_SHA
unsigned char sha1_hash[SHA_DIGEST_LENGTH];
#endif
X509_CERT_AUX *aux;
} /* X509 */;
</snippet></ROW><ROW><id>15163849</id><snippet>typedef struct x509_cinf_st
{
ASN1_INTEGER *version;      /* [ 0 ] default of v1 */
ASN1_INTEGER *serialNumber;
X509_ALGOR *signature;
X509_NAME *issuer;
X509_VAL *validity;
X509_NAME *subject;
X509_PUBKEY *key;
ASN1_BIT_STRING *issuerUID;     /* [ 1 ] optional in v2 */
ASN1_BIT_STRING *subjectUID;        /* [ 2 ] optional in v2 */
STACK_OF(X509_EXTENSION) *extensions;   /* [ 3 ] optional in v3 */
ASN1_ENCODING enc;
} X509_CINF;
</snippet></ROW><ROW><id>15163849</id><snippet>typedef struct X509_val_st
{
ASN1_TIME *notBefore;
ASN1_TIME *notAfter;
} X509_VAL;
</snippet></ROW><ROW><id>15163849</id><snippet>class X509_val_st(ctypes.Structure):

_fields_ = [('notBefore',       ctypes.c_void_p),
            ('notAfter',        ctypes.c_void_p)]


class X509_cinf_st(ctypes.Structure):

_fields_ = [('version',         ctypes.c_void_p),
            ('serialNumber',    ctypes.c_void_p),
            ('signature',       ctypes.c_void_p),
            ('issuer',          ctypes.c_void_p),
            ('validity',        X509_val_st),
            ('subject',         ctypes.c_void_p),
            ('key',             ctypes.c_void_p),
            ('issuerUID',       ctypes.c_void_p),
            ('subjectUID',      ctypes.c_void_p),
            ('extensions',      ctypes.c_void_p),
            ('enc',             ctypes.c_uint)]


class X509_st(ctypes.Structure):

_fields_ = [('cert_info',     X509_cinf_st),
            ('sig_alg',       ctypes.c_void_p),
            ('signature',     ctypes.c_void_p),
            ('valid',         ctypes.c_int),
            ('references',    ctypes.c_int),
            ('name',          ctypes.c_void_p),
            ('ex_data',       ctypes.c_int),
            ('ex_pathlen',    ctypes.c_long),
            ('ex_pcpathlen',  ctypes.c_long),
            ('ex_flags',      ctypes.c_ulong),
            ('ex_kusage',     ctypes.c_ulong),
            ('ex_xkusage',    ctypes.c_ulong),
            ('ex_nscert',     ctypes.c_ulong),
            ('skid',          ctypes.c_void_p),
            ('akid',          ctypes.c_void_p),
            ('policy_cache',  ctypes.c_void_p),
            ('crldp',         ctypes.c_void_p),
            ('altname',       ctypes.c_void_p),
            ('nc',            ctypes.c_void_p),
            ('rfc3779_addr',  ctypes.c_void_p),
            ('rfc3779_asid',  ctypes.c_void_p),
            ('sha1_hash',     ctypes.c_char),
            ('aux',           ctypes.c_void_p)]
</snippet></ROW><ROW><id>15163849</id><snippet>self.X509_new = self._lib.X509_new
self.X509_new.restype = ctypes.POINTER(X509_st)
self.X509_new.argtypes = []
</snippet></ROW><ROW><id>15163849</id><snippet>def X509_get_notBefore(self):
    return self.X509[0].cert_info.validity.notBefore
</snippet></ROW><ROW><id>15163982</id><snippet>for j in range (0, n)
</snippet></ROW><ROW><id>15163982</id><snippet>A = [86, 2,4 ,5, 6122, 87]
def selectionSort(a):
    # Go through all positions except the last one 
    # (that one will automatically be correct)
    for index in range(len(a)-1):
        value = a[index]
        # enumerate all (index, value) pairs from the rest of the list 
        # and take the pair with the smallest value
        min_subindex, min_value = min(enumerate(a[index+1:]), key=lambda x: x[1])
        if min_value &lt; value:
            a[index] = min_value
            a[min_subindex + index + 1] = value

selectionSort(A)
print(A) # [2, 4, 5, 86, 87, 6122]
</snippet></ROW><ROW><id>15163991</id><snippet>time.sleep()</snippet></ROW><ROW><id>15163991</id><snippet>join()</snippet></ROW><ROW><id>15163991</id><snippet>gevent.spawn(a)</snippet></ROW><ROW><id>15163991</id><snippet>gevent.spawn(b)</snippet></ROW><ROW><id>15163991</id><snippet>.join()</snippet></ROW><ROW><id>15163991</id><snippet>a</snippet></ROW><ROW><id>15163991</id><snippet>a</snippet></ROW><ROW><id>15163991</id><snippet>time.sleep(4)</snippet></ROW><ROW><id>15163991</id><snippet>a</snippet></ROW><ROW><id>15163991</id><snippet>time.sleep()</snippet></ROW><ROW><id>15163991</id><snippet>a</snippet></ROW><ROW><id>15163991</id><snippet>b</snippet></ROW><ROW><id>15163991</id><snippet>b</snippet></ROW><ROW><id>15163991</id><snippet>.join()</snippet></ROW><ROW><id>15163991</id><snippet>gevent.sleep()</snippet></ROW><ROW><id>15164073</id><snippet>pyhk.py</snippet></ROW><ROW><id>15164073</id><snippet>Lib</snippet></ROW><ROW><id>15164073</id><snippet>Lib</snippet></ROW><ROW><id>15164073</id><snippet>&lt;PATH TO PYTHON&gt;\Lib
</snippet></ROW><ROW><id>15164073</id><snippet>c:\python\Lib
</snippet></ROW><ROW><id>15164073</id><snippet>/usr/lib/python2.7/
</snippet></ROW><ROW><id>15164213</id><snippet>from matplotlib import pyplot as plt
import numpy as np
</snippet></ROW><ROW><id>15164213</id><snippet>image = np.empty((1376,960), np.uint16)
</snippet></ROW><ROW><id>15164213</id><snippet>image.data[:] = open('20_1-20ms.raw').read()
</snippet></ROW><ROW><id>15164213</id><snippet>plt.imshow(image)
</snippet></ROW><ROW><id>15164238</id><snippet>IPython.frontend.terminal.embed.InteractiveShellEmbed.__call__</snippet></ROW><ROW><id>15164253</id><snippet>calcBackProject</snippet></ROW><ROW><id>15164253</id><snippet>uint8</snippet></ROW><ROW><id>15164253</id><snippet>float32</snippet></ROW><ROW><id>15164253</id><snippet>float32</snippet></ROW><ROW><id>15164253</id><snippet>calcBackProject</snippet></ROW><ROW><id>15164253</id><snippet>backProj = cv2.calcBackProject([im_converted.astype('float32')], channels, hist, ranges,scale)</snippet></ROW><ROW><id>15164253</id><snippet>uint8</snippet></ROW><ROW><id>15164253</id><snippet>255. / hist.max()</snippet></ROW><ROW><id>15164255</id><snippet>import pickle

def test1():        #Function to be send
    return True


with open('data.pickle', 'wb') as f:    #On server you pickling function
    pickle.dump(test1.__code__, f)
</snippet></ROW><ROW><id>15164255</id><snippet>import pickle
import types

with open('data.pickle', 'rb') as f:    #On client you load and unpickle function
    code = pickle.load(f)

test2 = types.FunctionType(code, globals())


print(test2())    #Result will be True
</snippet></ROW><ROW><id>15164433</id><snippet>width = 5 * button1.get_allocation().width
height = 5 * button1.get_allocation().height

button1.set_size_request(width, height)
</snippet></ROW><ROW><id>15164541</id><snippet>Myclass</snippet></ROW><ROW><id>15164541</id><snippet>from core import check_below_threshold
</snippet></ROW><ROW><id>15164541</id><snippet>core</snippet></ROW><ROW><id>15164541</id><snippet>import core

# ...
    return core.check_below_threshold(self.z,threshold)
</snippet></ROW><ROW><id>15164639</id><snippet>&gt;&gt;&gt; n = 234567
&gt;&gt;&gt; ("%04d"%n)[-4:]
'4567'
</snippet></ROW><ROW><id>15164639</id><snippet>"%04d"%n --&gt; get a string from the (d)ecimal n, putting leading 0s to reach 4 digits (if needed)
</snippet></ROW><ROW><id>15164639</id><snippet>&gt;&gt;&gt; n = 7
&gt;&gt;&gt; "%04d"%n
'0007'   
&gt;&gt;&gt; n = 234567
&gt;&gt;&gt; "%04d"%n
'234567'
</snippet></ROW><ROW><id>15164639</id><snippet>&gt;&gt;&gt; n = 234567
&gt;&gt;&gt; ("%04d"%n)[-4:]
'4567'
</snippet></ROW><ROW><id>15164692</id><snippet>python-id3</snippet></ROW><ROW><id>15164692</id><snippet>from ID3 import *
try:
    id3info = ID3('/some/file/moxy.mp3')
    print id3info
    id3info['TITLE'] = "Green Eggs and Ham"
    id3info['ARTIST'] = "Moxy Früvous"
    for k, v in id3info.items():
        print k, ":", v
except InvalidTagError, message:
    print "Invalid ID3 tag:", message
</snippet></ROW><ROW><id>15164767</id><snippet>xString = input("What attack will you do?! (Type the attack name to pick an attack) :")
# xString = 0
# xString = str(xString)
</snippet></ROW><ROW><id>15164767</id><snippet>xString = str(input("What attack will you do?! (Type the attack name to pick an attack) :"))
# xString = 0
# xString = str(xString)
</snippet></ROW><ROW><id>15164767</id><snippet># sword = set_sword()
# magic = set_magic()
# block = set_block()
# rock = set_rock()
# run = set_run()
# done = set_finish()

if xString == "sword":
        xString = 60 # I hope you know why you changed the value of xString
        print(set_sword())

elif xString == "magic":
        print(set_magic())

elif xString == "block":
        print(set_block())

elif xString == "rock":
        print(set_rock())

elif xString == "run":
        print(set_run())

elif xString == "done":
        print(set_finish())

else:
        print("Pick an option please.")
        quit
</snippet></ROW><ROW><id>15164876</id><snippet>if</snippet></ROW><ROW><id>15164876</id><snippet>numpy</snippet></ROW><ROW><id>15164876</id><snippet>&gt;&gt;&gt; a = np.array([True, False]) 
&gt;&gt;&gt; a == True
array([ True, False], dtype=bool)
&gt;&gt;&gt; a is True
False
</snippet></ROW><ROW><id>15164876</id><snippet>a is True</snippet></ROW><ROW><id>15164876</id><snippet>False</snippet></ROW><ROW><id>15164876</id><snippet>a</snippet></ROW><ROW><id>15164876</id><snippet>is</snippet></ROW><ROW><id>15164876</id><snippet>True is True</snippet></ROW><ROW><id>15164876</id><snippet>None is not True</snippet></ROW><ROW><id>15165048</id><snippet>findSectionHeader</snippet></ROW><ROW><id>15165048</id><snippet>Title</snippet></ROW><ROW><id>15165048</id><snippet>&gt;&gt;&gt; soup.find(text='Title').parent
&lt;a href="/find?q=batman&amp;s=tt&amp;ref_=fn_tt"&gt;Title&lt;/a&gt;
</snippet></ROW><ROW><id>15165048</id><snippet>Titles</snippet></ROW><ROW><id>15165048</id><snippet>&gt;&gt;&gt; soup.find(text='Titles').parent
&lt;option value="tt"&gt;Titles&lt;/option&gt;
&gt;&gt;&gt; for elem in soup.find_all(text='Titles'):
...     parent_h3 = elem.find_parent('h3')
...     if parent_h3 is None:
...         continue
...     print parent_h3
... 
&lt;h3 class="findSectionHeader"&gt;&lt;a name="tt"&gt;&lt;/a&gt;Titles&lt;/h3&gt;
</snippet></ROW><ROW><id>15165048</id><snippet>find(text='...')</snippet></ROW><ROW><id>15165048</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; soup.find_all(text='Title')
[u'Title']
&gt;&gt;&gt; soup.find_all(text=re.compile('Title'))
[u'Titles', u'Titles', u'Titles', u'Title', u'Advanced Title Search']
</snippet></ROW><ROW><id>15165112</id><snippet>py2exe</snippet></ROW><ROW><id>15165112</id><snippet>python</snippet></ROW><ROW><id>15165112</id><snippet>python</snippet></ROW><ROW><id>15165112</id><snippet>cmd</snippet></ROW><ROW><id>15165112</id><snippet>python</snippet></ROW><ROW><id>15165112</id><snippet>C:\Python27\bin\Python.exe</snippet></ROW><ROW><id>15165112</id><snippet>python</snippet></ROW><ROW><id>15165112</id><snippet>cmd</snippet></ROW><ROW><id>15165112</id><snippet>set PATH=%PATH%;C:\Python27\bin</snippet></ROW><ROW><id>15165112</id><snippet>cmd</snippet></ROW><ROW><id>15165367</id><snippet>dice1 != 7 or dice1 != dice</snippet></ROW><ROW><id>15165367</id><snippet>dice</snippet></ROW><ROW><id>15165367</id><snippet>dice</snippet></ROW><ROW><id>15165367</id><snippet>while dice1 != 7 or dice1 != dice:
</snippet></ROW><ROW><id>15165367</id><snippet>dice1 = roll()
while True: # Loop until either lost or won
    if dice1 == 7:
        break # Player lost, don't do anything
    elif dice1 == dice:
        count += 1 # Player won, increase count
        break
    else:
        dice1 = roll()
</snippet></ROW><ROW><id>15165416</id><snippet>Y = X[:,4:]
</snippet></ROW><ROW><id>15165416</id><snippet>a[4]</snippet></ROW><ROW><id>15165416</id><snippet>a</snippet></ROW><ROW><id>15165416</id><snippet>a[4]</snippet></ROW><ROW><id>15165416</id><snippet>a</snippet></ROW><ROW><id>15165416</id><snippet>a[4]</snippet></ROW><ROW><id>15165416</id><snippet>a:b</snippet></ROW><ROW><id>15165416</id><snippet>a</snippet></ROW><ROW><id>15165416</id><snippet>b</snippet></ROW><ROW><id>15165416</id><snippet>a</snippet></ROW><ROW><id>15165416</id><snippet>b</snippet></ROW><ROW><id>15165416</id><snippet>X[:,4]</snippet></ROW><ROW><id>15165416</id><snippet>X</snippet></ROW><ROW><id>15165416</id><snippet>X[:,4:5]</snippet></ROW><ROW><id>15165416</id><snippet>X[3:5,5:8]</snippet></ROW><ROW><id>15165477</id><snippet>bindparam()</snippet></ROW><ROW><id>15165477</id><snippet>from sqlalchemy.sql.expression import bindparam

bindparam('text', 'string').op('~')(column)
</snippet></ROW><ROW><id>15165477</id><snippet>'text'</snippet></ROW><ROW><id>15165477</id><snippet>'string'</snippet></ROW><ROW><id>15165608</id><snippet>con = MySQLdb.connect(
    host='127.0.0.1',
    user='root', passwd='',
    db='vendors', 
    port=3306)
</snippet></ROW><ROW><id>15165608</id><snippet>port</snippet></ROW><ROW><id>15165812</id><snippet>os.walk()</snippet></ROW><ROW><id>15165812</id><snippet>os.listdir()</snippet></ROW><ROW><id>15165812</id><snippet>os.path.isfile()</snippet></ROW><ROW><id>15165812</id><snippet>os.path.isdir()</snippet></ROW><ROW><id>15165812</id><snippet>def files_and_subdirectories(root_path):
    files = []
    directories = []
    for f in os.listdir(root_path):
        if os.path.isfile(f):
            files.append(f)
        elif os.path.isdir(f):
            directories.append(f)
    return directories, files
</snippet></ROW><ROW><id>15165812</id><snippet>directories,files = files_and_subdirectories(path)
</snippet></ROW><ROW><id>15165894</id><snippet>get_loc</snippet></ROW><ROW><id>15165894</id><snippet>In [5]: t = pd.Timestamp("2013-02-27 00:00:00+00:00")

In [6]: df1.index.get_loc(t)
Out[6]: 3
</snippet></ROW><ROW><id>15165894</id><snippet>irow</snippet></ROW><ROW><id>15165894</id><snippet>In [7]: loc = df1.index.get_loc(t)

In [8]: df.irow(loc - 1)
Out[8]: 
Date    2013-02-26 00:00:00
                      -0.15
Name: 2, Dtype: object

In [9]: df1.irow(slice(max(0, loc-3), min(loc, len(df))))
        # the min and max feel slightly hacky (!) but needed incase it's within top or bottom 3
Out[9]:                         
Date                    
2013-02-22  0.280001
2013-02-25  0.109999
2013-02-26 -0.150000
</snippet></ROW><ROW><id>15165894</id><snippet>In [1]: df = pd.read_clipboard(sep='\s\s+', header=None, parse_dates=[0], names=['Date', None])

In [2]: df
Out[2]: 
                 Date          
0 2013-02-22 00:00:00  0.280001
1 2013-02-25 00:00:00  0.109999
2 2013-02-26 00:00:00 -0.150000
3 2013-02-27 00:00:00  0.130001
4 2013-02-28 00:00:00  0.139999

In [3]: df1 = df.set_index('Date')

In [4]: df1
Out[4]:                
Date                
2013-02-22  0.280001
2013-02-25  0.109999
2013-02-26 -0.150000
2013-02-27  0.130001
2013-02-28  0.139999
</snippet></ROW><ROW><id>15166148</id><snippet>import re
infilename = 'myfile.fasta'
outfilename = 'myfile_nodots.fasta'
regex = re.compile("[.-]+")    

with open(infilename, 'r') as infile, open(outfilename, 'w') as outfile:
    for line in infile:
        outfile.write(regex.sub("", line))
</snippet></ROW><ROW><id>15166148</id><snippet>regex = re.compile("[.-]+ *")    
</snippet></ROW><ROW><id>15166187</id><snippet>feedparser.parse()['feed']</snippet></ROW><ROW><id>15166187</id><snippet>&gt;&gt;&gt; feedparser.parse(PROTO + USERNAME + ":" + INCORRECT_PASSWORD + "@" + SERVER + PATH)['feed']
{'summary': u'&lt;h1&gt;Unauthorized&lt;/h1&gt;\n&lt;h2&gt;Error 401&lt;/h2&gt;'}
&gt;&gt;&gt;  
</snippet></ROW><ROW><id>15166187</id><snippet>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(feedparser.parse(PROTO + USERNAME + ":" + PASSWORD + "@" + SERVER + PATH)['feed'])
{'fullcount': u'0',
 'link': u'http://mail.google.com/mail',
 'links': [{'href': u'http://mail.google.com/mail',
            'rel': u'alternate',
            'type': u'text/html'}],
 'subtitle': u'New messages in your Gmail Inbox',
 'subtitle_detail': {'base': u'https://mail.google.com/mail/feed/atom',
                     'language': None,
                     'type': u'text/plain',
                     'value': u'New messages in your Gmail Inbox'},
 'title': u'Gmail - Inbox for xxxxxxx@gmail.com',
 'title_detail': {'base': u'https://mail.google.com/mail/feed/atom',
                  'language': None,
                  'type': u'text/plain',
                  'value': u'Gmail - Inbox for xxxxxxx@gmail.com'},
 'updated': u'2013-03-01T20:11:03Z',
 'updated_parsed': time.struct_time(tm_year=2013, tm_mon=3, tm_mday=1, tm_hour=20, tm_min=11, tm_sec=3, tm_wday=4, tm_yday=60, tm_isdst=0)}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15166187</id><snippet>feedparser.parse()</snippet></ROW><ROW><id>15166233</id><snippet>bar1</snippet></ROW><ROW><id>15166233</id><snippet>bar2</snippet></ROW><ROW><id>15166233</id><snippet>bar3</snippet></ROW><ROW><id>15166233</id><snippet>allInstancesOfFoo = []

class foo(object):
    def __init__(self):
        allInstancesOfFoo.append(self)

bar1=foo()
bar2=foo()
bar3=foo()
print bar1 is allInstancesOfFoo[0]  #True
</snippet></ROW><ROW><id>15166233</id><snippet>allInstancesOfFoo</snippet></ROW><ROW><id>15166233</id><snippet>all_instances_of_foo = allInstancesOfFoo[:]
print all(x is y for x,y in zip(all_instances_of_foo,allInstancesOfFoo))  #True
</snippet></ROW><ROW><id>15166401</id><snippet>QThread</snippet></ROW><ROW><id>15166401</id><snippet>MovieMaker</snippet></ROW><ROW><id>15166401</id><snippet>run</snippet></ROW><ROW><id>15166401</id><snippet>make_movie</snippet></ROW><ROW><id>15166401</id><snippet>class MovieMaker(QThread):
    def __init__(self, uAppStatus, uFilename):
        QtCore.QThread.__init__(self, parent=None)
        self.appStatus = uAppStatus
        self.filename = uFilename

    def run(self):
        ## make the movie and save it on file
</snippet></ROW><ROW><id>15166401</id><snippet>saveMovie</snippet></ROW><ROW><id>15166401</id><snippet>make_movie</snippet></ROW><ROW><id>15166401</id><snippet>self.mm = MovieMaker(self.appStatus,
                     filename)

self.connect(self.mm, QtCore.SIGNAL("Progress(int)"),
             self.updateProgressDialog)

self.mm.start()
</snippet></ROW><ROW><id>15166401</id><snippet>Progress(int)</snippet></ROW><ROW><id>15166401</id><snippet>MovieMaker</snippet></ROW><ROW><id>15166477</id><snippet>@mod.route('/pariicipate/&lt;survey_id&gt;/&lt;work_id&gt;', methods = ['GET', 'POST'])
</snippet></ROW><ROW><id>15166477</id><snippet>@mod.route('/participate/&lt;survey_id&gt;/&lt;work_id&gt;', methods = ['GET', 'POST'])
</snippet></ROW><ROW><id>15166539</id><snippet>if __name__ == '__main__':
    computed_result = computeInfoPooled(G)
</snippet></ROW><ROW><id>15166539</id><snippet>script.py</snippet></ROW><ROW><id>15166539</id><snippet>python script.py
</snippet></ROW><ROW><id>15166539</id><snippet>pool.map</snippet></ROW><ROW><id>15166539</id><snippet>f</snippet></ROW><ROW><id>15166539</id><snippet>computeInfoPooled</snippet></ROW><ROW><id>15166539</id><snippet>def f(k):
    curr_stat = slow_function(k, G)
    return k, curr_stat


def computeInfoPooled(G, num_list):
    pool = Pool(processes=4)
    result = pool.map(f, num_list)
    return dict(result)

if __name__ == '__main__':
    computed_result = computeInfoPooled(G)
</snippet></ROW><ROW><id>15166539</id><snippet>f</snippet></ROW><ROW><id>15166539</id><snippet>pool.map(f, ...)</snippet></ROW><ROW><id>15166539</id><snippet>f</snippet></ROW><ROW><id>15166539</id><snippet>pool.map(f, ...)</snippet></ROW><ROW><id>15166539</id><snippet>dict(result)</snippet></ROW><ROW><id>15166924</id><snippet>rss_result.append(rss)</snippet></ROW><ROW><id>15166924</id><snippet>import feedparser
tags = profile.tags.all()
context['tag_rss'] = [feedparser.parse(tag.tag_rss) for tag in tags]
# if you don't need to re-use rss_result, this should work okay
</snippet></ROW><ROW><id>15167045</id><snippet>balance</snippet></ROW><ROW><id>15167045</id><snippet>inf</snippet></ROW><ROW><id>15167045</id><snippet>bootsam[mn-1,bs]</snippet></ROW><ROW><id>15167045</id><snippet>xxbal</snippet></ROW><ROW><id>15167045</id><snippet>bootsam</snippet></ROW><ROW><id>15167045</id><snippet>for bs in xrange(0,nboot):
   for mn in xrange(1,horizon+1):
        row = bootsam[mn-1,bs]-1
        if (mn % 12) == 1:  
            bondbal = 24*balance
            sp500bal=34*balance
            russbal = 44*balance
            eafebal=55*balance
            cashbal =66*balance

            bondbal=bondbal*(1+float(filedata[row,2]))  
            sp500bal=sp500bal*(1+float(filedata[row,3]))  
            russbal=russbal*(1+float(filedata[row,4]))  
            eafebal=eafebal*(1+float(filedata[row,5]))  
            cashbal=cashbal*(1+float(filedata[row,6]))  
            balance=bondbal + sp500bal + russbal + eafebal + cashbal
        else:  
            bondbal=bondbal*(1+float(filedata[row,2]))  
            sp500bal=sp500bal*(1+float(filedata[row,3]))  
            russbal=russbal*(1+float(filedata[row,4]))  
            eafebal=eafebal*(1+float(filedata[row,5]))  
            cashbal=cashbal*(1+float(filedata[row,6]))  
</snippet></ROW><ROW><id>15167045</id><snippet>balance</snippet></ROW><ROW><id>15167045</id><snippet>filedata</snippet></ROW><ROW><id>15167045</id><snippet>filedata=np.genfromtxt('monthlydata1970to2010.txt',dtype='str') # this will creae 980 * 7 matrix
my_list = (np.float(1) + filedata.astype(np.float)).tolist() # np.float is converted to Python float
nboot=5000
results=np.zeros((11,nboot))   #this will create 11*5000 matrix
results[0,:]=600  
horizon=360
balance=200
bootsam=np.random.randint(5, size=(984, nboot)) # this will create 984*5000 matrix
for bs in xrange(0,nboot):
   for mn in xrange(1,horizon+1):
        row = int(bootsam[mn-1,bs]-1)
        if (mn % 12) == 1:
            bondbal = 24*balance
            sp500bal=34*balance
            russbal = 44*balance
            eafebal=55*balance
            cashbal =66*balance

            bondbal=bondbal*(my_list[row][2])  
            sp500bal=sp500bal*(my_list[row][3])  
            russbal=russbal*(my_list[row][4])  
            eafebal=eafebal*(my_list[row][5])  
            cashbal=cashbal*(my_list[row][6])  
            balance=bondbal + sp500bal + russbal + eafebal + cashbal
        else:  
            bondbal=bondbal*(my_list[row][2])  
            sp500bal=sp500bal*(my_list[row][3])  
            russbal=russbal*(my_list[row][4])  
            eafebal=eafebal*(my_list[row][5])  
            cashbal=cashbal*(my_list[row][6])  
            balance=bondbal + sp500bal + russbal + eafebal + cashbal  
</snippet></ROW><ROW><id>15167369</id><snippet>threading.Timer</snippet></ROW><ROW><id>15167369</id><snippet>time.sleep</snippet></ROW><ROW><id>15167369</id><snippet>my_function</snippet></ROW><ROW><id>15167369</id><snippet>threading.Timer(60, my_function).start()
</snippet></ROW><ROW><id>15167369</id><snippet>my_function</snippet></ROW><ROW><id>15167369</id><snippet>Timer</snippet></ROW><ROW><id>15167369</id><snippet>Timer</snippet></ROW><ROW><id>15167369</id><snippet>Timer</snippet></ROW><ROW><id>15167369</id><snippet>matplotlib</snippet></ROW><ROW><id>15167369</id><snippet>tkinter</snippet></ROW><ROW><id>15167369</id><snippet>tkinter</snippet></ROW><ROW><id>15167369</id><snippet>root</snippet></ROW><ROW><id>15167369</id><snippet>root.after(60000, my_function)</snippet></ROW><ROW><id>15167369</id><snippet>threading.Timer(60, my_function).start()</snippet></ROW><ROW><id>15167569</id><snippet>download</snippet></ROW><ROW><id>15167569</id><snippet>import urllib
import threading

class Downloader:

    def __init__(self):
        self.stop_down = False
        self.thread = None

    def download(self, url, destination):
        self.thread = threading.Thread(target=self.__down, args=(url, destination))
        self.thread.start()

    def __down(self, url, dest):
        _continue = True
        handler = urllib.urlopen(url)
        self.fp = open(dest, "w")
        while not self.stop_down and _continue:
            data = handler.read(4096)
            self.fp.write(data)
            _continue = data
        handler.close()
        self.fp.close()

    def cancel(self):
        self.stop_down = True
</snippet></ROW><ROW><id>15167569</id><snippet>cancel()</snippet></ROW><ROW><id>15167569</id><snippet>os.unlink()</snippet></ROW><ROW><id>15167569</id><snippet>import time
if __name__ == "__main__":
    url = "http://ftp.postgresql.org/pub/source/v9.2.3/postgresql-9.2.3.tar.gz"
    down = Downloader()
    down.download(url, "file")
    print "Download started..."
    time.sleep(5)
    down.cancel()
    print "Download canceled"
</snippet></ROW><ROW><id>15167730</id><snippet>key</snippet></ROW><ROW><id>15167730</id><snippet>.sort()</snippet></ROW><ROW><id>15167730</id><snippet>from operator import attrgetter
pop.population.sort(key=attrgetter('score'))
</snippet></ROW><ROW><id>15167730</id><snippet>operator.attrgetter()</snippet></ROW><ROW><id>15167862</id><snippet>basicConfig()</snippet></ROW><ROW><id>15167862</id><snippet>logging.getLogger('').handlers = []

logging.basicConfig(
    filename = "a.log",
    filemode="w",
    level = logging.DEBUG)
</snippet></ROW><ROW><id>15167947</id><snippet>memcache_connection = # however you set this up
sock = socket.socket()
sock.bind(('', 6789))
sock.listen(5)
while True:
    conn, addr = sock.accept()
    with contextlib.closing(conn) as client:
        with client.makefile() as f:
            param1, param2, param3 = f
        result = do_memcache_stuff(memcache_connection, param1, param2, param3)
        client.sendall(result)
</snippet></ROW><ROW><id>15167947</id><snippet>def handle_client(conn):
    with contextlib.closing(conn) as client:
        with client.makefile() as f:
            param1, param2, param3 = f
        result = do_memcache_stuff(memcache_connection, param1, param2, param3)
        client.sendall(result)

memcache_connection = # however you set this up
sock = socket.socket()
sock.bind(('', 6789))
sock.listen(5)
while True:
    conn, addr = sock.accept()
    t = threading.Thread(target=handle_client, args=(conn,))
    t.daemon = True
    t.start()
</snippet></ROW><ROW><id>15168101</id><snippet>combat</snippet></ROW><ROW><id>15168101</id><snippet>main</snippet></ROW><ROW><id>15168101</id><snippet>main</snippet></ROW><ROW><id>15168101</id><snippet>combat</snippet></ROW><ROW><id>15168101</id><snippet>main</snippet></ROW><ROW><id>15168101</id><snippet>combat</snippet></ROW><ROW><id>15168101</id><snippet>main</snippet></ROW><ROW><id>15168101</id><snippet>import common
x = common.some_method_in_common()
y = common.SomeClass()
</snippet></ROW><ROW><id>15168101</id><snippet>from common import SomeClass
y = SomeClass()
</snippet></ROW><ROW><id>15168101</id><snippet>from common import some_method_in_common
x = some_method_in_common()
</snippet></ROW><ROW><id>15168101</id><snippet>from common import *
y = SomeClass()
</snippet></ROW><ROW><id>15168101</id><snippet>_</snippet></ROW><ROW><id>15168101</id><snippet>from common import *
from some_other_module import *
y = SomeClass()
</snippet></ROW><ROW><id>15168101</id><snippet>SomeClass</snippet></ROW><ROW><id>15168101</id><snippet>SomeClass</snippet></ROW><ROW><id>15168101</id><snippet>SomeClass</snippet></ROW><ROW><id>15168101</id><snippet>some_other_module</snippet></ROW><ROW><id>15168237</id><snippet>cget()</snippet></ROW><ROW><id>15168237</id><snippet>PhotoImage</snippet></ROW><ROW><id>15168237</id><snippet>b = Button(...)
b.image = c_black
print(b.image.cget('file'))
</snippet></ROW><ROW><id>15168380</id><snippet>import re

number1 = 33
number2 = 1
print re.sub('(foo)%i' % number1, '\g&lt;1&gt;%i' % number2, 'foo33')
</snippet></ROW><ROW><id>15168380</id><snippet>re.sub(pattern, repl, string, count=0, flags=0)</snippet></ROW><ROW><id>15168380</id><snippet>\g&lt;name&gt;</snippet></ROW><ROW><id>15168380</id><snippet>(?P&lt;name&gt;...)</snippet></ROW><ROW><id>15168380</id><snippet>\g&lt;number&gt;</snippet></ROW><ROW><id>15168380</id><snippet>\g&lt;2&gt;</snippet></ROW><ROW><id>15168380</id><snippet>\2</snippet></ROW><ROW><id>15168380</id><snippet>\g&lt;2&gt;0</snippet></ROW><ROW><id>15168380</id><snippet>\20</snippet></ROW><ROW><id>15168380</id><snippet>\g&lt;0&gt;</snippet></ROW><ROW><id>15168694</id><snippet>super(DateTemplates, self).__init__()</snippet></ROW><ROW><id>15168694</id><snippet>Bot.__init__</snippet></ROW><ROW><id>15168694</id><snippet>self.setup()</snippet></ROW><ROW><id>15168694</id><snippet>DateTemplates.setup()</snippet></ROW><ROW><id>15168694</id><snippet>self._to_date</snippet></ROW><ROW><id>15168694</id><snippet>super</snippet></ROW><ROW><id>15168694</id><snippet>DateTemplates.__init__</snippet></ROW><ROW><id>15168702</id><snippet>boost::python::scope</snippet></ROW><ROW><id>15168702</id><snippet>scope</snippet></ROW><ROW><id>15168702</id><snippet>scope</snippet></ROW><ROW><id>15168702</id><snippet>BOOST_PYTHON_MODULE(foo)              // set scope to foo
{
  using namespace boost::python;
  {
    scope in_Foo = class_&lt;Foo&gt;        // define foo.Foo and set scope to foo.Foo
        ("Foo", init&lt;Foo::Choose&gt;())
        .def("rovalue", &amp;Foo::get)
        ;

    enum_&lt;Foo::Choose&gt;("Choose")     // define foo.Foo.Choose
        .value("Foo", Foo::eFoo)
        .value("Bar", Foo::eBar)
        ;
  }                                  // revert scope, setting scope to foo

  class_&lt;Bar&gt;("Bar", init&lt;&gt;())       // define foo.Bar
      ;
}
</snippet></ROW><ROW><id>15168702</id><snippet>scope</snippet></ROW><ROW><id>15168702</id><snippet>scope</snippet></ROW><ROW><id>15168755</id><snippet>fork()</snippet></ROW><ROW><id>15168755</id><snippet>### A helper for letting the forked processes use data without pickling.
_data_name_cands = (
    '_data_' + ''.join(random.sample(string.ascii_lowercase, 10))
    for _ in itertools.count())
class ForkedData(object):
    '''
    Class used to pass data to child processes in multiprocessing without
    really pickling/unpickling it. Only works on POSIX.

    Intended use:
        - The master process makes the data somehow, and does e.g.
            data = ForkedData(the_value)
        - The master makes sure to keep a reference to the ForkedData object
          until the children are all done with it, since the global reference
          is deleted to avoid memory leaks when the ForkedData object dies.
        - Master process constructs a multiprocessing.Pool *after*
          the ForkedData construction, so that the forked processes
          inherit the new global.
        - Master calls e.g. pool.map with data as an argument.
        - Child gets the real value through data.value, and uses it read-only.
    '''
    # TODO: does data really need to be used read-only? don't think so...
    # TODO: more flexible garbage collection options
    def __init__(self, val):
        g = globals()
        self.name = next(n for n in _data_name_cands if n not in g)
        g[self.name] = val
        self.master_pid = os.getpid()

    @property
    def value(self):
        return globals()[self.name]

    def __del__(self):
        if os.getpid() == self.master_pid:
            del globals()[self.name]
</snippet></ROW><ROW><id>15168823</id><snippet>Choose_Item = eval(input("Select your item:  "))
</snippet></ROW><ROW><id>15168823</id><snippet>items = {'item1': 'bill', 'item2': 'cows', 'item3': 'abcdef'}
choice = input("Select your item: ")
if choice in items:
    the_choice = items[choice]
else:
    print("Uh oh, I don't know about that item")
</snippet></ROW><ROW><id>15168847</id><snippet>zip()</snippet></ROW><ROW><id>15168847</id><snippet>numpy.broadcast()</snippet></ROW><ROW><id>15168847</id><snippet>In [5]:

list(np.broadcast([1,2,3], 10))

Out[5]:

[(1, 10), (2, 10), (3, 10)]

In [6]:

list(np.broadcast([1,2,3], [10, 20, 30]))

Out[6]:

[(1, 10), (2, 20), (3, 30)]

In [8]:

list(np.broadcast([1,2,3], 100, [10, 20, 30]))

Out[8]:

[(1, 100, 10), (2, 100, 20), (3, 100, 30)]
</snippet></ROW><ROW><id>15168891</id><snippet>row</snippet></ROW><ROW><id>15168891</id><snippet>['</snippet></ROW><ROW><id>15168891</id><snippet>']</snippet></ROW><ROW><id>15168891</id><snippet>$ cat /tmp/dennis.csv
['GB0002875804,ABIH RIAN TCO ORD,"191,560.00000"']
['GB0002374006,DIO ORD 28 101/108P,"440,274.00000"']
['GB00B03MLX29,ROY DUH ELL PLC,"310,437.00000"']
['GB0008762899,BG GP PC OD G0.10,"486,049.00000"']
['GB0008762899,BG GUP C ORD P0.10,"504,867.00000"']
['GB0005405286,BC HL OR D0.50 (K),"1,751,079.00000"']
['GB0009252882,GAITHNE OD P0.25,"806,535.00000"']
['GB00B16GWD56,VNE GRP,"7,254,981.00000"']
</snippet></ROW><ROW><id>15168891</id><snippet>import csv

LoL=[]
with open('/tmp/Dennis.csv', 'rb') as csvfile:
    reader = csv.reader(csvfile)
    try:
        for row in reader:
            row[0]=row[0].replace("['","")
            row[2]=float(row[2].replace("']","").replace(',',''))
            LoL.append(row)
            print ''.join('{}[{}]:{} '.format('row',i,e) for i,e in enumerate(row))

    except (csv.Error, ValueError) as e:
        print 'something bad happened...\ndying now...\n',e

print LoL
</snippet></ROW><ROW><id>15168891</id><snippet>row[0]:GB0002875804 row[1]:ABIH RIAN TCO ORD row[2]:191560.0 
row[0]:GB0002374006 row[1]:DIO ORD 28 101/108P row[2]:440274.0 
row[0]:GB00B03MLX29 row[1]:ROY DUH ELL PLC row[2]:310437.0 
row[0]:GB0008762899 row[1]:BG GP PC OD G0.10 row[2]:486049.0 
row[0]:GB0008762899 row[1]:BG GUP C ORD P0.10 row[2]:504867.0 
row[0]:GB0005405286 row[1]:BC HL OR D0.50 (K) row[2]:1751079.0 
row[0]:GB0009252882 row[1]:GAITHNE OD P0.25 row[2]:806535.0 
row[0]:GB00B16GWD56 row[1]:VNE GRP row[2]:7254981.0 
[['GB0002875804', 'ABIH RIAN TCO ORD', 191560.0], ['GB0002374006', 'DIO ORD 28 101/108P', 440274.0], ['GB00B03MLX29', 'ROY DUH ELL PLC', 310437.0], ['GB0008762899', 'BG GP PC OD G0.10', 486049.0], ['GB0008762899', 'BG GUP C ORD P0.10', 504867.0], ['GB0005405286', 'BC HL OR D0.50 (K)', 1751079.0], ['GB0009252882', 'GAITHNE OD P0.25', 806535.0], ['GB00B16GWD56', 'VNE GRP', 7254981.0]]
</snippet></ROW><ROW><id>15168896</id><snippet>data_and_time = {"time": ['2:30', '2:45', '3:25', '5:15', '7:21', '8:22'],
                 "data": [5., 7., 2., 3., 8., 10.]}

#it builds list like a [True, True, False, ...]    
index = map(lambda x: x &gt;= 5, data_and_time['data'])
#and then 'applies' it to 'columns' of data_and_time
data_and_time = {k: [e for e in itertools.compress(v, index)]
                 for k, v in data_and_time.iteritems()}
</snippet></ROW><ROW><id>15168896</id><snippet>{'data': [5.0, 7.0, 8.0, 10.0],
 'time': ['2:30', '2:45', '7:21', '8:22']}
</snippet></ROW><ROW><id>15168925</id><snippet>mime = magic.from_buffer(data, mime=True)
if mime == None:
    # Workaround for issue with libmagic1==5.09-2 in Ubuntu 12.04. Fixed in libmagic 5.11-2.
    file_str = magic.from_buffer(data)
    if file_str.startswith('Composite Document File V2 Document'):
        mime = 'application/msword'
</snippet></ROW><ROW><id>15169062</id><snippet>def payload_to_json(payload, max_size = 256):
    json_string = json.dumps(payload, separators = (',', ':'))
    chars_to_strip = len(json_string) - max_size
    if chars_to_strip &lt;= 0:
        return json_string
    key_count = len(payload)
    chars_per_key, extras = divmod(chars_to_strip, key_count)
    leftover = 0
    for i, key in enumerate(payload):
        to_strip = chars_per_key + (i &lt; extras)
        orig_len = len(payload[key])
        if orig_len &lt; to_strip:
            payload[key] = ''
            leftover += to_strip - orig_len
        else:
            payload[key] = payload[key][:-to_strip]
    if leftover:
        return slow_payload_to_json(payload, max_size)
    else:
        return json.dumps(payload, separators = (',', ':'))
</snippet></ROW><ROW><id>15169193</id><snippet>sudo -u postgres psql</snippet></ROW><ROW><id>15169193</id><snippet>\l</snippet></ROW><ROW><id>15169193</id><snippet>GRANT ALL ON db TO postgres;</snippet></ROW><ROW><id>15169193</id><snippet>\l</snippet></ROW><ROW><id>15169350</id><snippet>bash</snippet></ROW><ROW><id>15169350</id><snippet>python</snippet></ROW><ROW><id>15169350</id><snippet>shutil</snippet></ROW><ROW><id>15169350</id><snippet>shutil.copyfile('file.txt', '/dev/usb/lp0')
</snippet></ROW><ROW><id>15169350</id><snippet>import shutil

while True:
    line = raw_input() # or just input() if you're on Python 3.x
    if line == 'certain input':
        shutil.copyfile('file.txt', '/dev/usb/lp0')
</snippet></ROW><ROW><id>15169350</id><snippet>cmd</snippet></ROW><ROW><id>15169421</id><snippet>In [64]: matrix = [["username", "name", "password"],["username2","name2","password2"]]

In [65]: matrix
Out[65]: [['username', 'name', 'password'], ['username2', 'name2', 'password2']]
</snippet></ROW><ROW><id>15169421</id><snippet>In [66]: matrix[0]
Out[66]: ['username', 'name', 'password']
</snippet></ROW><ROW><id>15169421</id><snippet>In [67]: matrix[0][1]
Out[67]: 'name'
</snippet></ROW><ROW><id>15169421</id><snippet>matrix</snippet></ROW><ROW><id>15169421</id><snippet>matrix = {
    'capitano': {'name':'Othello', 'password':'desi123'}
    'thewife': {'name':'Desdemona', 'password':'3apples'}
    }
</snippet></ROW><ROW><id>15169421</id><snippet>'capitano'</snippet></ROW><ROW><id>15169421</id><snippet>'thewife'</snippet></ROW><ROW><id>15169421</id><snippet>'capitano'</snippet></ROW><ROW><id>15169421</id><snippet>matrix['capitano']['name']
</snippet></ROW><ROW><id>15169421</id><snippet>'Othello'</snippet></ROW><ROW><id>15169421</id><snippet>from __future__ import print_function    
matrix = {'hello': {'action': lambda: print('hello')} }
</snippet></ROW><ROW><id>15169421</id><snippet>matrix['hello']['action']()
# hello
</snippet></ROW><ROW><id>15169477</id><snippet>twinx</snippet></ROW><ROW><id>15169477</id><snippet>import numpy as np
from matplotlib.pyplot import *

def layer(y,height):
    neg=0.0;pos=0.0
    if y&gt;0:
        if y-height&gt;=0:
            pos=height
            y-= pos
        else : 
            pos = y
    elif y&lt;0:
        if y+height&lt;=0:
            neg=height
            y += neg
        else : 
            neg = -y
    return pos,neg

def horizonPlot(x,y,height=50.0,colors=['CornflowerBlue','DarkGreen']):
    alpha = .10
    vlayer = np.vectorize(layer)
    while (y != 0).any():
        l = vlayer(y,height)
        y -= l[0];y += l[1]
        fill_between(x,0,l[0],color=colors[0], alpha=alpha)
        fill_between(x,height-l[1],height,color=colors[1], alpha=alpha)

def main():
    x = np.linspace(0, np.pi*4, 137)
    y = (2*np.random.normal(size=137) + x**2)
    xx = np.hstack([-1*x[::-1], x])
    yy = np.hstack([-1*y[::-1], y])
    horizonPlot(xx,yy)
    show()
</snippet></ROW><ROW><id>15169523</id><snippet>l1</snippet></ROW><ROW><id>15169584</id><snippet># Move these outside of the class declaration or make them class variables

stopwords = set(stopwords.words('english'))
grammar = "NP: {}"
cp = nltk.RegexpParser(grammar)
</snippet></ROW><ROW><id>15169584</id><snippet>from itertools import ifilterfalse

...

keywords_without_stopwords = ifilterfalse(stopwords.__contains__, keywords)

return list(keywords_without_stopwords + set(tags))  # Can you cache `set(tags`)?
</snippet></ROW><ROW><id>15169603</id><snippet>new_list = set()
outfile = open("final_downloads/malicious_ips", "w")
for line in open("final_downloads/ip_list_clean", "r"):
        if line in open("/var/www/botwatch.txt", "r"):
                outfile.write(line)
                new_list.add(line)
outfile.close()
</snippet></ROW><ROW><id>15169887</id><snippet>ForeignKey</snippet></ROW><ROW><id>15169887</id><snippet>Student</snippet></ROW><ROW><id>15169887</id><snippet>default=False</snippet></ROW><ROW><id>15169887</id><snippet>False</snippet></ROW><ROW><id>15169887</id><snippet>ForeignKey</snippet></ROW><ROW><id>15169952</id><snippet>it = iter([0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0])
s = 'stackoverflow'

output = [''.join(('-' for i in b) if not a else b)
          for a,b in 
          itertools.groupby(s, key=lambda x: next(it))]
</snippet></ROW><ROW><id>15169952</id><snippet>['-', 't', '-', 'c', '-', 'over', '----']
</snippet></ROW><ROW><id>15170011</id><snippet>('a','1')</snippet></ROW><ROW><id>15170342</id><snippet>import objc
objc.loadBundle('CoreWLAN',
                bundle_path='/System/Library/Frameworks/CoreWLAN.framework',
                module_globals=globals())

for iname in CWInterface.interfaceNames():
  interface = CWInterface.interfaceWithName_(iname)
  print """
Interface:      %s
SSID:           %s
Transmit Rate:  %s
Transmit Power: %s
RSSI:           %s""" % (iname, interface.ssid(), interface.transmitRate(),
                         interface.transmitPower(), interface.rssi())
</snippet></ROW><ROW><id>15170499</id><snippet>hash.update(arg)</snippet></ROW><ROW><id>15170499</id><snippet>m.update(a); m.update(b)</snippet></ROW><ROW><id>15170499</id><snippet>m.update(a+b)</snippet></ROW><ROW><id>15170499</id><snippet>hasher</snippet></ROW><ROW><id>15170499</id><snippet>Hashes = {
    'MD5': hashlib.md5,
    'SHA1': hashlib.sha1,
    'SHA224': hashlib.sha224,
    'SHA256': hashlib.sha256,
    'SHA384': hashlib.sha384,
    'SHA512': hashlib.sha512
}

...

return Hash(data.encode("utf8")).hexdigest()
</snippet></ROW><ROW><id>15170555</id><snippet>python test.py "http://link.com/index.php?title=tesst&amp;action=raw"
</snippet></ROW><ROW><id>15170555</id><snippet>&amp;</snippet></ROW><ROW><id>15170571</id><snippet>   conn.voidcmd("NOOP")
</snippet></ROW><ROW><id>15170571</id><snippet>while (retry):
    try:
        conn = FTP('blah')
        conn.connect()
        for item in list_of_items:
            myfile = open('filename', 'w')
            conn.retrbinary('stuff', myfile)   
            ### do some parsing ###

    except IOError as e:
        print "I/O error({0}): {1}".format(e.errno, e.strerror)
        print "Retrying..."
</snippet></ROW><ROW><id>15170667</id><snippet>&gt;&gt;&gt; from itertools import product, izip
</snippet></ROW><ROW><id>15170667</id><snippet>&gt;&gt;&gt; def allele(e):
    return [list(v) for _, v in groupby(e, key = str.lower)]
</snippet></ROW><ROW><id>15170667</id><snippet>&gt;&gt;&gt; def punnett(a, b):
    return [''.join(e)
        for e in product(*([''.join(e) for e in product(*e)]
                    for e in izip(allele(a), allele(b))))]

&gt;&gt;&gt; punnett('AaBbCc', 'AaBbCc')
['AABBCC', 'AABBCc', 'AABBcC', 'AABBcc', 'AABbCC', 'AABbCc', 'AABbcC', 'AABbcc', 'AAbBCC', 'AAbBCc', 'AAbBcC', 'AAbBcc', 'AAbbCC', 'AAbbCc', 'AAbbcC', 'AAbbcc', 'AaBBCC', 'AaBBCc', 'AaBBcC', 'AaBBcc', 'AaBbCC', 'AaBbCc', 'AaBbcC', 'AaBbcc', 'AabBCC', 'AabBCc', 'AabBcC', 'AabBcc', 'AabbCC', 'AabbCc', 'AabbcC', 'Aabbcc', 'aABBCC', 'aABBCc', 'aABBcC', 'aABBcc', 'aABbCC', 'aABbCc', 'aABbcC', 'aABbcc', 'aAbBCC', 'aAbBCc', 'aAbBcC', 'aAbBcc', 'aAbbCC', 'aAbbCc', 'aAbbcC', 'aAbbcc', 'aaBBCC', 'aaBBCc', 'aaBBcC', 'aaBBcc', 'aaBbCC', 'aaBbCc', 'aaBbcC', 'aaBbcc', 'aabBCC', 'aabBCc', 'aabBcC', 'aabBcc', 'aabbCC', 'aabbCc', 'aabbcC', 'aabbcc']
&gt;&gt;&gt; punnett('AaBb', 'AaBb')
['AABB', 'AABb', 'AAbB', 'AAbb', 'AaBB', 'AaBb', 'AabB', 'Aabb', 'aABB', 'aABb', 'aAbB', 'aAbb', 'aaBB', 'aaBb', 'aabB', 'aabb']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15170698</id><snippet>    body = {
     'title': filename,
     'description': 'A test document',
     'mimeType': 'text/plain'
  }  
  file = drive_service.files().insert(body=body, media_body=media_body).execute()
  pprint.pprint(file)
</snippet></ROW><ROW><id>15170698</id><snippet>    body = {
     'title': filename,
     'description': 'A test document',
     'mimeType': 'text/plain'
    }
    file = drive_service.files().insert(body=body, media_body=media_body).execute()
    pprint.pprint(file)
</snippet></ROW><ROW><id>15170698</id><snippet>file =</snippet></ROW><ROW><id>15170698</id><snippet>body = ...</snippet></ROW><ROW><id>15170916</id><snippet>&gt;&gt;&gt; aa = [["a", "aa", "aaa"],
          ["b", "bb", "bbb"],
          ["c", "cc", "ccc"]]
&gt;&gt;&gt; b = zip(*aa)[2]
&gt;&gt;&gt; print b
['aaa', 'bbb', 'ccc']
</snippet></ROW><ROW><id>15170916</id><snippet>zip</snippet></ROW><ROW><id>15170916</id><snippet>zip</snippet></ROW><ROW><id>15170916</id><snippet>list(zip(*aa))[2]
</snippet></ROW><ROW><id>15170916</id><snippet>[i[2] for i in aa]
</snippet></ROW><ROW><id>15171319</id><snippet>&gt;&gt;&gt; s = u"Hey I\u2019m Bob"
&gt;&gt;&gt; print s
Hey I’m Bob
&gt;&gt;&gt; print s.encode('utf8')
Hey Iâ€™m Bob
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdout.encoding
'cp1252'
&gt;&gt;&gt; print s.encode('cp1252')
Hey I’m Bob
</snippet></ROW><ROW><id>15171541</id><snippet>/usr</snippet></ROW><ROW><id>15171541</id><snippet>/usr/local</snippet></ROW><ROW><id>15171541</id><snippet>/System/Library</snippet></ROW><ROW><id>15171541</id><snippet>/Library/Frameworks</snippet></ROW><ROW><id>15171541</id><snippet>PATH</snippet></ROW><ROW><id>15171541</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>15171541</id><snippet>export PATH=/Library/Frameworks/Python.framework/Versions/2.7/bin:$PATH
</snippet></ROW><ROW><id>15171718</id><snippet>m</snippet></ROW><ROW><id>15171718</id><snippet>&lt;/font&gt;</snippet></ROW><ROW><id>15171718</id><snippet>re</snippet></ROW><ROW><id>15171718</id><snippet>p = re.compile(r'&gt;Combo&lt;.*({.*})');
</snippet></ROW><ROW><id>15171718</id><snippet>r</snippet></ROW><ROW><id>15171718</id><snippet>raw</snippet></ROW><ROW><id>15171718</id><snippet>m = p.match();
</snippet></ROW><ROW><id>15171718</id><snippet>&gt;Combo&lt;</snippet></ROW><ROW><id>15171718</id><snippet>myText = m.group(1);
</snippet></ROW><ROW><id>15171718</id><snippet>group</snippet></ROW><ROW><id>15171718</id><snippet>match</snippet></ROW><ROW><id>15171865</id><snippet>class First_Year(models.Model):
    year = models.CharField(max_length=4)
    def __unicode__(self):
        return self.year
</snippet></ROW><ROW><id>15171936</id><snippet>class Book(models.Model):
    book_name=models.CharField(max_length=30)
    author_name=models.CharField(max_length=30)
    publisher_name=models.CharField(max_length=40)
    author=models.ForeignKey(Author)

    def __unicode__(self):
        ..........

class Author(models.Model):
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=40)
    email = models.EmailField()
    age=models.IntegerField()

    def __unicode__(self):
        ........

    def books(self):
        return Book.objects.filter(author=self)
</snippet></ROW><ROW><id>15171936</id><snippet>def index(request):
    authors = Author.objects.all()
    context={'authors':authors}
    return render(request,'index.html', context)
</snippet></ROW><ROW><id>15171936</id><snippet>{% for author in authors %}
    Author: {{author.first_name}} {{author.last_name}}&lt;br/&gt;
    Email: {{author.email}}
    Age: {{author.age}}
    Books:
        {% for book in author.books %}
            .......
        {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>15172182</id><snippet>[-5, 256]</snippet></ROW><ROW><id>15172182</id><snippet>&gt;&gt;&gt; a = 257
&gt;&gt;&gt; b = 257
&gt;&gt;&gt; a is b
False
</snippet></ROW><ROW><id>15172182</id><snippet>$ echo 'a = 257
&gt; b = 257
&gt; print a is b' &gt; testing.py
$ python testing.py
True
</snippet></ROW><ROW><id>15172182</id><snippet>&gt;&gt;&gt; def test():
...     a = 257
...     b = 257
...     print a is b
... 
&gt;&gt;&gt; dis.dis(test)
  2           0 LOAD_CONST               1 (257)
              3 STORE_FAST               0 (a)

  3           6 LOAD_CONST               1 (257)
              9 STORE_FAST               1 (b)

  4          12 LOAD_FAST                0 (a)
             15 LOAD_FAST                1 (b)
             18 COMPARE_OP               8 (is)
             21 PRINT_ITEM          
             22 PRINT_NEWLINE       
             23 LOAD_CONST               0 (None)
             26 RETURN_VALUE        
&gt;&gt;&gt; test()
True
&gt;&gt;&gt; test.func_code.co_consts
(None, 257)
</snippet></ROW><ROW><id>15172182</id><snippet>257</snippet></ROW><ROW><id>15172182</id><snippet>&gt;&gt;&gt; a = 5.0
&gt;&gt;&gt; b = 5.0
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; a = 5.0; b = 5.0
&gt;&gt;&gt; a is b
True
</snippet></ROW><ROW><id>15172182</id><snippet>tuple</snippet></ROW><ROW><id>15172182</id><snippet>&gt;&gt;&gt; a = (1,2)
&gt;&gt;&gt; b = (1,2)
&gt;&gt;&gt; a is b
False
&gt;&gt;&gt; a = (1,2); b = (1,2)
&gt;&gt;&gt; a is b
False
</snippet></ROW><ROW><id>15172182</id><snippet>tuple</snippet></ROW><ROW><id>15172182</id><snippet>&gt;&gt;&gt; a = (257, 258)
&gt;&gt;&gt; b = (257, 258)
&gt;&gt;&gt; a[0] is b[0]
False
&gt;&gt;&gt; a[1] is b[1]
False
&gt;&gt;&gt; a = (257, 258); b = (257, 258)
&gt;&gt;&gt; a[0] is b[0]
True
&gt;&gt;&gt; a[1] is b[1]
True
</snippet></ROW><ROW><id>15172182</id><snippet>PyInt_Object</snippet></ROW><ROW><id>15172182</id><snippet>257</snippet></ROW><ROW><id>15172182</id><snippet>&gt;&gt;&gt; 257
257
&gt;&gt;&gt; 0x101
257
&gt;&gt;&gt; 0b100000001
257
&gt;&gt;&gt; 0o401
257
</snippet></ROW><ROW><id>15172182</id><snippet>float</snippet></ROW><ROW><id>15172182</id><snippet>Python/ast.c</snippet></ROW><ROW><id>15172182</id><snippet>parsenumber</snippet></ROW><ROW><id>15172182</id><snippet>PyOS_strtoul</snippet></ROW><ROW><id>15172182</id><snippet>PyLong_FromString</snippet></ROW><ROW><id>15172182</id><snippet>    x = (long) PyOS_strtoul((char *)s, (char **)&amp;end, 0);
    if (x &lt; 0 &amp;&amp; errno == 0) {
        return PyLong_FromString((char *)s,
                                 (char **)0,
                                 0);
    }
</snippet></ROW><ROW><id>15172182</id><snippet>Python/compile.c</snippet></ROW><ROW><id>15172182</id><snippet>Python/peephole.c</snippet></ROW><ROW><id>15172182</id><snippet>compiler_add_o</snippet></ROW><ROW><id>15172182</id><snippet>compiler_lambda</snippet></ROW><ROW><id>15172182</id><snippet>/* Make None the first constant, so the lambda can't have a
   docstring. */
if (compiler_add_o(c, c-&gt;u-&gt;u_consts, Py_None) &lt; 0)
    return 0;
</snippet></ROW><ROW><id>15172182</id><snippet>compiler_add_o</snippet></ROW><ROW><id>15172182</id><snippet>compiler_add_o</snippet></ROW><ROW><id>15172182</id><snippet>dict</snippet></ROW><ROW><id>15172710</id><snippet> pyplot.bar(x2,y2, color='b', width=2, alpha=0.5)
 pyplot.bar(x1,y1, color='r', width=2, alpha=0.5)
 pyplot.show()
</snippet></ROW><ROW><id>15172768</id><snippet>d = dict(zip(x, y))
</snippet></ROW><ROW><id>15172768</id><snippet>zip</snippet></ROW><ROW><id>15172768</id><snippet>dict</snippet></ROW><ROW><id>15172768</id><snippet>zip(x, y)</snippet></ROW><ROW><id>15172768</id><snippet>[('q', 'a'), ('w', 's'), ('e', 'd'), ('r', 'f'), ('t', 'g')]
</snippet></ROW><ROW><id>15172768</id><snippet>dict()</snippet></ROW><ROW><id>15172768</id><snippet>{'q': 'a', 'r': 'f', 'e': 'd', 't': 'g', 'w': 's'}
</snippet></ROW><ROW><id>15172972</id><snippet>class MyModelAdmin(admin.ModelAdmin):
    def get_urls(self):
        urls = super(MyModelAdmin, self).get_urls()
        my_urls = patterns('',
            (r'^my_view/$', self.my_view)
        )
        return my_urls + urls

    def my_view(self, request):
        # custom view which should return an HttpResponse
        pass
</snippet></ROW><ROW><id>15172977</id><snippet>dwSharedMode</snippet></ROW><ROW><id>15172977</id><snippet>FILE_SHARE_READ</snippet></ROW><ROW><id>15172977</id><snippet>CreateFile()</snippet></ROW><ROW><id>15173005</id><snippet>import</snippet></ROW><ROW><id>15173005</id><snippet>main</snippet></ROW><ROW><id>15173005</id><snippet>print(lib.config.main)
</snippet></ROW><ROW><id>15173005</id><snippet>from ... import ...</snippet></ROW><ROW><id>15173005</id><snippet>from lib.config import main
</snippet></ROW><ROW><id>15173081</id><snippet>d.update({k.upper(): v.upper() for k, v in d.iteritems()})
</snippet></ROW><ROW><id>15173081</id><snippet>d.update({k.upper(): v.upper() for k, v in d.items()})
</snippet></ROW><ROW><id>15173081</id><snippet>d.update([(k.upper(), v.upper()) for k, v in d.iteritems()])
</snippet></ROW><ROW><id>15173081</id><snippet>d</snippet></ROW><ROW><id>15173169</id><snippet>&lt;form id="formHook" action="/addbook/" method="post"&gt;
    {% csrf_token %}
    &lt;p style="font-family:Courier New"&gt;
        Name &lt;input type="text" name="name" placeholder="Name of the book"&gt;&lt;/input&gt;
    &lt;/p&gt;

    &lt;p style="font-family:Courier New"&gt;
        Author &lt;input type="text" name="author" placeholder="Author of the book"&gt;&lt;/input&gt;
    &lt;/p&gt;

    &lt;p style="font-family:Courier New"&gt; 
        Status
        &lt;select name="status"&gt;
            &lt;option value="Read"&gt;Read&lt;/option&gt;
            &lt;option value="Unread"&gt;Unread&lt;/option&gt;
        &lt;/select&gt;
    &lt;/p&gt;
    &lt;input type="submit" id="booksubmit" value="Submit"&gt;&lt;/input&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>15173169</id><snippet>def addbook(request):
    if request.method == 'POST':
        name = request.POST['name']
        author = request.POST['author']
        bookInfo.objects.create(Name = name, Author=author)
        return render(request, 'index.html', {'Name': name, 'Author': author})
</snippet></ROW><ROW><id>15173169</id><snippet>from django.conf.urls import patterns, include, url
from django.contrib import admin
admin.autodiscover()

urlpatterns = patterns('',
    url(r'^$', 'project_name.views.index'),
    url(r'^addbook/$', 'project_name.views.addbook'),

    # Uncomment the next line to enable the admin:
    url(r'^admin/', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>15173371</id><snippet>def client_add(request):
   books = Book.objects.all()
   return render_to_response('book_details.html', locals(),    context_instance=RequestContext(request))
</snippet></ROW><ROW><id>15173371</id><snippet>&lt;body&gt;
{% for book in books %}
{{book.book_name}}
{{book.publisher_name}}
{{book.author.first_name}}
{{book.author.last_name}}
{{book.author.email}}
{{book.author.age}}
{% endif %}
&lt;/body&gt;
</snippet></ROW><ROW><id>15173371</id><snippet>def client_add(request):
   books = Book.objects.all(author_last_name ="author_last_name")
   return render_to_response('book_details.html', locals(),    context_instance=RequestContext(request))
</snippet></ROW><ROW><id>15173371</id><snippet>&lt;body&gt;
{% for book in books %}
{{book.book_name}}
{{book.publisher_name}}
{{book.author.first_name}}
{{book.author.last_name}}
{{book.author.email}}
{{book.author.age}}
{% endif %}
&lt;/body&gt;
</snippet></ROW><ROW><id>15173735</id><snippet>sqrt</snippet></ROW><ROW><id>15173735</id><snippet>range</snippet></ROW><ROW><id>15173735</id><snippet>for b in range(3, int(sqrt) + 1, 2):
</snippet></ROW><ROW><id>15173985</id><snippet>q.join</snippet></ROW><ROW><id>15173985</id><snippet>q.task_done</snippet></ROW><ROW><id>15173985</id><snippet>task_done()</snippet></ROW><ROW><id>15173985</id><snippet>join()</snippet></ROW><ROW><id>15174237</id><snippet>e.wait()</snippet></ROW><ROW><id>15174237</id><snippet>True</snippet></ROW><ROW><id>15174237</id><snippet>wait([timeout])</snippet></ROW><ROW><id>15174301</id><snippet>request.script_root + request.path</snippet></ROW><ROW><id>15174497</id><snippet>LazyUser</snippet></ROW><ROW><id>15174497</id><snippet>user</snippet></ROW><ROW><id>15174497</id><snippet>request.user</snippet></ROW><ROW><id>15174497</id><snippet>request.__class__.user.__get__(request)</snippet></ROW><ROW><id>15174497</id><snippet>__get__</snippet></ROW><ROW><id>15174497</id><snippet>user</snippet></ROW><ROW><id>15174497</id><snippet>SimpeLazyObject</snippet></ROW><ROW><id>15174497</id><snippet>get_user</snippet></ROW><ROW><id>15174497</id><snippet>request.user</snippet></ROW><ROW><id>15174497</id><snippet>request.user.attr1</snippet></ROW><ROW><id>15174497</id><snippet>request.user.__getattr__('attr1')</snippet></ROW><ROW><id>15174497</id><snippet>request.user._setup()</snippet></ROW><ROW><id>15174497</id><snippet>get_user</snippet></ROW><ROW><id>15174534</id><snippet>return</snippet></ROW><ROW><id>15174534</id><snippet>def func(primes):
    for a in range(3, 500, 2):
        for b in range(2, int(a ** 0.5 + 0.5)):
            if a % b != 0:
                primes.append(a)
            if a % b == 0:
                [x for x in primes if x != a]
                return

primes = [2]
func(primes)
</snippet></ROW><ROW><id>15174569</id><snippet>import re, math
from collections import Counter

WORD = re.compile(r'\w+')

def get_cosine(vec1, vec2):
     intersection = set(vec1.keys()) &amp; set(vec2.keys())
     numerator = sum([vec1[x] * vec2[x] for x in intersection])

     sum1 = sum([vec1[x]**2 for x in vec1.keys()])
     sum2 = sum([vec2[x]**2 for x in vec2.keys()])
     denominator = math.sqrt(sum1) * math.sqrt(sum2)

     if not denominator:
        return 0.0
     else:
        return float(numerator) / denominator

def text_to_vector(text):
     words = WORD.findall(text)
     return Counter(words)

text1 = 'This is a foo bar sentence .'
text2 = 'This sentence is similar to a foo bar sentence .'

vector1 = text_to_vector(text1)
vector2 = text_to_vector(text2)

cosine = get_cosine(vector1, vector2)

print 'Cosine:', cosine
</snippet></ROW><ROW><id>15174569</id><snippet>Cosine: 0.861640436855
</snippet></ROW><ROW><id>15174579</id><snippet>node :: word composed of alphas, digits, '_'
verb :: one of several defined keywords
binop :: '-&gt;' | '&lt;-' | '&lt;-&gt;'
nodeFactor :: node '^' node | node
nodeExpr :: nodeFactor op nodeFactor
nodeCommand :: verb nodeExpr [',' nodeExpr]...
</snippet></ROW><ROW><id>15174579</id><snippet>from pyparsing import (Word,alphas,alphanums,Keyword,
    infixNotation,opAssoc,oneOf,delimitedList)

nodeRef = Word(alphas,alphanums+'_')
GO, TURN, FOLLOW = map(Keyword, "GO TURN FOLLOW".split())
verb = GO | TURN | FOLLOW
binop = oneOf('-&gt; &lt;- &lt;-&gt;')
</snippet></ROW><ROW><id>15174579</id><snippet>infixNotation</snippet></ROW><ROW><id>15174579</id><snippet>operatorPrecedence</snippet></ROW><ROW><id>15174579</id><snippet>infixNotation</snippet></ROW><ROW><id>15174579</id><snippet>'^'</snippet></ROW><ROW><id>15174579</id><snippet>'-&gt;'</snippet></ROW><ROW><id>15174579</id><snippet>infixNotation</snippet></ROW><ROW><id>15174579</id><snippet>infixNotation</snippet></ROW><ROW><id>15174579</id><snippet>opAssoc.LEFT</snippet></ROW><ROW><id>15174579</id><snippet>RIGHT</snippet></ROW><ROW><id>15174579</id><snippet>nodeExpr = infixNotation(nodeRef,
    [
    ('^', 2, opAssoc.LEFT),
    (binop, 2, opAssoc.LEFT),
    ])
</snippet></ROW><ROW><id>15174579</id><snippet>nodeExpr + ZeroOrMore(Suppress(',') + nodeExpr)</snippet></ROW><ROW><id>15174579</id><snippet>delimitedList</snippet></ROW><ROW><id>15174579</id><snippet>nodeCommand = verb('verb') + delimitedList(nodeExpr)('nodes')
</snippet></ROW><ROW><id>15174579</id><snippet>tests = """\
    GO node1,node2
    TURN node1-&gt;node2-&gt;node3
    GO node1,node2^node3,node4
    FOLLOW node1-&gt;node2&lt;-&gt;node3
    GO node5,node1-&gt;node2^node4&lt;-&gt;node3,node6
    """.splitlines()
for test in tests:
    test = test.strip()
    if not test:
        continue
    print (test)
    try:
        result = nodeCommand.parseString(test, parseAll=True)
        print (result.dump())
    except ParseException as pe:
        print ("Failed:", test)
        print (pe)
</snippet></ROW><ROW><id>15174579</id><snippet>dump()</snippet></ROW><ROW><id>15174579</id><snippet>GO node1,node2
['GO', 'node1', 'node2']
- nodes: ['node1', 'node2']
- verb: GO
TURN node1-&gt;node2-&gt;node3
['TURN', ['node1', '-&gt;', 'node2', '-&gt;', 'node3']]
- nodes: [['node1', '-&gt;', 'node2', '-&gt;', 'node3']]
- verb: TURN
GO node1,node2^node3,node4
['GO', 'node1', ['node2', '^', 'node3'], 'node4']
- nodes: ['node1', ['node2', '^', 'node3'], 'node4']
- verb: GO
FOLLOW node1-&gt;node2&lt;-&gt;node3
['FOLLOW', ['node1', '-&gt;', 'node2', '&lt;-&gt;', 'node3']]
- nodes: [['node1', '-&gt;', 'node2', '&lt;-&gt;', 'node3']]
- verb: FOLLOW
GO node5,node1-&gt;node2^node4&lt;-&gt;node3,node6
['GO', 'node5', ['node1', '-&gt;', ['node2', '^', 'node4'], '&lt;-&gt;', 'node3'], 'node6']
- nodes: ['node5', ['node1', '-&gt;', ['node2', '^', 'node4'], '&lt;-&gt;', 'node3'], 'node6']
- verb: GO
</snippet></ROW><ROW><id>15174579</id><snippet>verb</snippet></ROW><ROW><id>15174579</id><snippet>doCommand</snippet></ROW><ROW><id>15174579</id><snippet># base class
class Command(object):
    def __init__(self, tokens):
        self.cmd = tokens.verb
        self.nodeExprs = tokens.nodes

    def doCommand(self):
        """
        Execute command logic, using self.cmd and self.nodeExprs.
        To be overridden in sub classes.
        """
        print (self.cmd, '::', self.nodeExprs.asList())

# these should implement doCommand, but not needed for this example
class GoCommand(Command): pass
class TurnCommand(Command): pass
class FollowCommand(Command): pass
</snippet></ROW><ROW><id>15174579</id><snippet>verbClassMap = {
    'GO' : GoCommand,
    'TURN' : TurnCommand,
    'FOLLOW' : FollowCommand,
    }
def tokensToCommand(tokens):
    cls = verbClassMap[tokens.verb]
    return cls(tokens)
</snippet></ROW><ROW><id>15174579</id><snippet>doCommand</snippet></ROW><ROW><id>15174579</id><snippet>tokensToCommand</snippet></ROW><ROW><id>15174579</id><snippet>nodeCommand</snippet></ROW><ROW><id>15174579</id><snippet>nodeCommand.setParseAction(tokensToCommand)
</snippet></ROW><ROW><id>15174579</id><snippet>for test in tests:
    test = test.strip()
    if not test:
        continue
    try:
        result = nodeCommand.parseString(test, parseAll=True)
        result[0].doCommand()
    except ParseException as pe:
        print ("Failed:", test)
        print (pe)
</snippet></ROW><ROW><id>15174579</id><snippet>doCommand</snippet></ROW><ROW><id>15174579</id><snippet>GO :: ['node1', 'node2']
TURN :: [['node1', '-&gt;', 'node2', '-&gt;', 'node3']]
GO :: ['node1', ['node2', '^', 'node3'], 'node4']
FOLLOW :: [['node1', '-&gt;', 'node2', '&lt;-&gt;', 'node3']]
GO :: ['node5', ['node1', '-&gt;', ['node2', '^', 'node4'], '&lt;-&gt;', 'node3'], 'node6']
</snippet></ROW><ROW><id>15174579</id><snippet>a op b op c</snippet></ROW><ROW><id>15174579</id><snippet>[a,op,b], [b, op, c]</snippet></ROW><ROW><id>15174579</id><snippet>infixNotation</snippet></ROW><ROW><id>15174579</id><snippet>def expandChainedExpr(tokens):
    ret = ParseResults([])
    tokeniter = iter(tokens[0])
    lastexpr = next(tokeniter)
    for op,nextexpr in zip(tokeniter,tokeniter):
        ret += ParseResults([[lastexpr, op, nextexpr]])
        lastexpr = nextexpr
    return ret
</snippet></ROW><ROW><id>15174579</id><snippet>lastexpr op nextexpr</snippet></ROW><ROW><id>15174579</id><snippet>nextexpr</snippet></ROW><ROW><id>15174579</id><snippet>lastexpr</snippet></ROW><ROW><id>15174579</id><snippet>infixNotation</snippet></ROW><ROW><id>15174579</id><snippet>nodeExpr = infixNotation(nodeRef,
    [
    ('^', 2, opAssoc.LEFT),
    (binop, 2, opAssoc.LEFT, expandChainedExpr),
    ])
</snippet></ROW><ROW><id>15174579</id><snippet>FOLLOW node1-&gt;node2&lt;-&gt;node3
</snippet></ROW><ROW><id>15174579</id><snippet>('FOLLOW', '::', [['node1', '-&gt;', 'node2'], ['node2', '&lt;-&gt;', 'node3']])
</snippet></ROW><ROW><id>15174760</id><snippet>{
"cmd": ["python3", "-u", "$file"],
"file_regex": "^[ ]*File \"(...*?)\", line ([0-9]*)",
"selector": "source.python",
"env": {"LANG": "en_US.UTF-8"}
}
</snippet></ROW><ROW><id>15174787</id><snippet>place()</snippet></ROW><ROW><id>15174787</id><snippet>labels = []
welcome = Tkinter.Label(root,text= "Welcome to Fobby")
welcome.place(x=250,y=250)
labels.append(welcome)
print labels
</snippet></ROW><ROW><id>15174881</id><snippet>def add_author(request):
    if request.method == 'POST':
        fname = request.POST.get('fname')
        lname = request.POST.get('lname')
        email = request.POST.get('email')
        age = request.POST.get('age')

        author = Author(
            first_name = fname,
            last_name = lname,
            email=email,
            age=age
            )
        new_author = author.save()

        book = request.POST.get('book')
        publisher = request.POST.get('publisher')

        fullname = "{0} {1}".format(new_author.first_name, 
                                    new_author.last_name)

        Book.objects.create(
            book_name=book, 
            author_name=fullname, 
            publisher_name=publisher
            author = new_author
            )

    return render(request, 'add_author.html')
</snippet></ROW><ROW><id>15174881</id><snippet>&lt;form method="post"&gt;
    {% csrf_token %}
    &lt;h5&gt;Author Info: &lt;/h5&gt;
    First name: &lt;input type="text" name="fname"&gt;&lt;br/&gt;
    Last name: &lt;input type="text" name="lname"&gt;&lt;br/&gt;
    Email: &lt;input type="text" name="email"&gt;&lt;br/&gt;
    Age: &lt;input type="text" name="age"&gt;&lt;br/&gt;

    &lt;h5&gt;Book Info: &lt;/h5&gt;
    Name: &lt;input type="text" name="book"&gt;&lt;br/&gt;
    Publisher: &lt;input type="text" name="publisher"&gt;&lt;br/&gt;

    &lt;input type="submit" value="Save"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>15175043</id><snippet>2</snippet></ROW><ROW><id>15175043</id><snippet>primeList()</snippet></ROW><ROW><id>15175043</id><snippet>primes</snippet></ROW><ROW><id>15175043</id><snippet>primeList</snippet></ROW><ROW><id>15175043</id><snippet>range(3, int(n ** 0.5 + 0.5), 2)</snippet></ROW><ROW><id>15175043</id><snippet>n==9</snippet></ROW><ROW><id>15175043</id><snippet>3</snippet></ROW><ROW><id>15175202</id><snippet>image1= models.ImageField(upload_to=images)


from django.conf.urls import patterns, include, url
from django.conf.urls.static import static
from django.contrib import admin
from django.contrib.staticfiles.urls import staticfiles_urlpatterns
from project_name import settings

admin.autodiscover()
urlpatterns = patterns('',
    ...........
) + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)

urlpatterns += staticfiles_urlpatterns()


&lt;img src="{{MEDIA_URL}}{{beer.image1}}"&gt;
</snippet></ROW><ROW><id>15175202</id><snippet>import os

PROJECT_ROOT = os.path.join(os.path.dirname(__file__), '..')
SITE_ROOT = PROJECT_ROOT


MEDIA_ROOT = os.path.join(SITE_ROOT, 'media')
MEDIA_URL = '/media/'


STATIC_ROOT = os.path.join(SITE_ROOT, 'static')
STATIC_URL = '/static/'


STATICFILES_DIRS = (
    # Put strings here, like "/home/html/static" or "C:/www/django/static".
    # Always use forward slashes, even on Windows.
    os.path.join(SITE_ROOT, 'staticfiles'),
)

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(SITE_ROOT, 'templates'),
)
</snippet></ROW><ROW><id>15175239</id><snippet>import re 

def multiple_replace(dict, text):
  # Create a regular expression  from the dictionary keys
  regex = re.compile("(%s)" % "|".join(map(re.escape, dict.keys())))

  # For each match, look-up corresponding value in dictionary
  return regex.sub(lambda mo: dict[mo.string[mo.start():mo.end()]], text) 

if __name__ == "__main__": 

  text = "Larry Wall is the creator of Perl"

  dict = {
    "Larry Wall" : "Guido van Rossum",
    "creator" : "Benevolent Dictator for Life",
    "Perl" : "Python",
  } 

  print multiple_replace(dict, text)
</snippet></ROW><ROW><id>15175239</id><snippet>trans = {"a": "aa", "b": "bb"}</snippet></ROW><ROW><id>15175239</id><snippet>multiple_replace</snippet></ROW><ROW><id>15175239</id><snippet>regex.sub</snippet></ROW><ROW><id>15175239</id><snippet>with open("notes.txt") as text:
    new_text = multiple_replace(replacements, text.read())
with open("notes2.txt", "w") as result:
    result.write(new_text)
</snippet></ROW><ROW><id>15175494</id><snippet>set_title</snippet></ROW><ROW><id>15175494</id><snippet>set_ylabel</snippet></ROW><ROW><id>15175494</id><snippet>y</snippet></ROW><ROW><id>15175494</id><snippet> set_ylabel('blabla')
</snippet></ROW><ROW><id>15175494</id><snippet>position</snippet></ROW><ROW><id>15175494</id><snippet>(0, 0) == (x=0, y=0)</snippet></ROW><ROW><id>15175494</id><snippet> set_title('blabla', position=(0, 0))
</snippet></ROW><ROW><id>15175494</id><snippet>colorbar</snippet></ROW><ROW><id>15175494</id><snippet>title</snippet></ROW><ROW><id>15175607</id><snippet>aggregate</snippet></ROW><ROW><id>15175607</id><snippet>filter</snippet></ROW><ROW><id>15175607</id><snippet>aggregate</snippet></ROW><ROW><id>15175607</id><snippet>sum(car.price for car in cars)</snippet></ROW><ROW><id>15175793</id><snippet>re.sub(r'([a-z])\1', 'science', inputString)
</snippet></ROW><ROW><id>15175793</id><snippet>AA</snippet></ROW><ROW><id>15175793</id><snippet>aA</snippet></ROW><ROW><id>15175793</id><snippet>re.sub(r'([a-zA-Z])\1', 'science', inputString)
</snippet></ROW><ROW><id>15175793</id><snippet>AA</snippet></ROW><ROW><id>15175793</id><snippet>aA</snippet></ROW><ROW><id>15175793</id><snippet>re.I</snippet></ROW><ROW><id>15175793</id><snippet>re.sub(r'([a-z])\1', 'science', inputString, flags = re.I)
</snippet></ROW><ROW><id>15175793</id><snippet>[]</snippet></ROW><ROW><id>15175793</id><snippet>(...)</snippet></ROW><ROW><id>15175793</id><snippet>(</snippet></ROW><ROW><id>15175793</id><snippet>?</snippet></ROW><ROW><id>15175793</id><snippet>(?P&lt;name&gt;..)</snippet></ROW><ROW><id>15175793</id><snippet>\number</snippet></ROW><ROW><id>15175793</id><snippet>number</snippet></ROW><ROW><id>15175793</id><snippet>(?P=name)</snippet></ROW><ROW><id>15175793</id><snippet>([a-z])\1</snippet></ROW><ROW><id>15175793</id><snippet>[a-z]</snippet></ROW><ROW><id>15175793</id><snippet>()</snippet></ROW><ROW><id>15175793</id><snippet>\1</snippet></ROW><ROW><id>15175793</id><snippet>([a-z])</snippet></ROW><ROW><id>15175822</id><snippet>from Queue import Queue
q = Queue() #You can also specify the maximum size of the Queue here
# Assume your Queue was filled
while not q.empty():
    # It won;t block if there are no items to pop
    item = q.get(block = False) 
    if is_item_mature(item):
        #process
    else:
        #In case your Queue has a maxsize, consider making it non blocking
        q.put(item) 
</snippet></ROW><ROW><id>15175852</id><snippet>combinations</snippet></ROW><ROW><id>15175852</id><snippet>['a', 'b', 'c', 'd', 'e']</snippet></ROW><ROW><id>15175852</id><snippet>['a', 'b', 'c', 'd', 'e']
  ^    ^
</snippet></ROW><ROW><id>15175852</id><snippet>[0, 1]</snippet></ROW><ROW><id>15175852</id><snippet>['a', 'b', 'c', 'd', 'e']
  ^         ^
</snippet></ROW><ROW><id>15175852</id><snippet>[0, 2]</snippet></ROW><ROW><id>15175852</id><snippet>1</snippet></ROW><ROW><id>15175852</id><snippet>2</snippet></ROW><ROW><id>15175852</id><snippet>['a', 'b', 'c', 'd', 'e']
       ^    ^
</snippet></ROW><ROW><id>15175852</id><snippet>['a', 'b', 'c', 'd', 'e']
                 ^    ^
</snippet></ROW><ROW><id>15175852</id><snippet>[3, 4]</snippet></ROW><ROW><id>15175852</id><snippet>i + n - r</snippet></ROW><ROW><id>15175852</id><snippet>i</snippet></ROW><ROW><id>15175852</id><snippet>n</snippet></ROW><ROW><id>15175852</id><snippet>5</snippet></ROW><ROW><id>15175852</id><snippet>r</snippet></ROW><ROW><id>15175852</id><snippet>2</snippet></ROW><ROW><id>15175852</id><snippet>def combinations(iterable, r):
    pool = tuple(iterable)
    n = len(pool)
</snippet></ROW><ROW><id>15175852</id><snippet>pool</snippet></ROW><ROW><id>15175852</id><snippet>n</snippet></ROW><ROW><id>15175852</id><snippet>if r &gt; n:
    return
</snippet></ROW><ROW><id>15175852</id><snippet>n</snippet></ROW><ROW><id>15175852</id><snippet>n</snippet></ROW><ROW><id>15175852</id><snippet>indices = range(r)
</snippet></ROW><ROW><id>15175852</id><snippet>[0, 1]</snippet></ROW><ROW><id>15175852</id><snippet>yield tuple(pool[i] for i in indices)
</snippet></ROW><ROW><id>15175852</id><snippet>while True:
</snippet></ROW><ROW><id>15175852</id><snippet>i + n - r</snippet></ROW><ROW><id>15175852</id><snippet>    for i in reversed(range(r)):
        if indices[i] != i + n - r:
            break
</snippet></ROW><ROW><id>15175852</id><snippet>for-else</snippet></ROW><ROW><id>15175852</id><snippet>else</snippet></ROW><ROW><id>15175852</id><snippet>for</snippet></ROW><ROW><id>15175852</id><snippet>    else:
        return
</snippet></ROW><ROW><id>15175852</id><snippet>i</snippet></ROW><ROW><id>15175852</id><snippet>    indices[i] += 1
</snippet></ROW><ROW><id>15175852</id><snippet>i</snippet></ROW><ROW><id>15175852</id><snippet>    for j in range(i+1, r):
        indices[j] = indices[j-1] + 1
</snippet></ROW><ROW><id>15175852</id><snippet>    yield tuple(pool[i] for i in indices)
</snippet></ROW><ROW><id>15175945</id><snippet>app = webapp2.WSGIApplication([(r'/case/(\w+)', ViewCase)],
                              debug=True)
</snippet></ROW><ROW><id>15175945</id><snippet>^</snippet></ROW><ROW><id>15175945</id><snippet>/case/</snippet></ROW><ROW><id>15176014</id><snippet>adjacent = hypothenuse * math.cos(angle)
opposite = hypothenuse * math.sin(angle)
</snippet></ROW><ROW><id>15176014</id><snippet>angle</snippet></ROW><ROW><id>15176114</id><snippet>declarative_base()</snippet></ROW><ROW><id>15176114</id><snippet>Base</snippet></ROW><ROW><id>15176114</id><snippet>User</snippet></ROW><ROW><id>15176114</id><snippet>Base.metadata.create_all()</snippet></ROW><ROW><id>15176114</id><snippet>Base</snippet></ROW><ROW><id>15176114</id><snippet>from user import User, Base
</snippet></ROW><ROW><id>15176114</id><snippet>Base</snippet></ROW><ROW><id>15176145</id><snippet>__name__</snippet></ROW><ROW><id>15176145</id><snippet>"__main__"</snippet></ROW><ROW><id>15176145</id><snippet>__name__</snippet></ROW><ROW><id>15176145</id><snippet>"__main__"</snippet></ROW><ROW><id>15176186</id><snippet>list[i].bind()</snippet></ROW><ROW><id>15176186</id><snippet>insert_num(i+1)</snippet></ROW><ROW><id>15176186</id><snippet>None</snippet></ROW><ROW><id>15176186</id><snippet>insert_num</snippet></ROW><ROW><id>15176186</id><snippet>def insert_num(i):
    return lambda event: text.insert(100, i)
</snippet></ROW><ROW><id>15176204</id><snippet>str.join()</snippet></ROW><ROW><id>15176204</id><snippet>for line in fList[:20]:
    print(line)
</snippet></ROW><ROW><id>15176204</id><snippet>print('\n'.join(fList[:20])
</snippet></ROW><ROW><id>15176204</id><snippet>fList</snippet></ROW><ROW><id>15176204</id><snippet>\n</snippet></ROW><ROW><id>15176363</id><snippet>__eq__</snippet></ROW><ROW><id>15176363</id><snippet>__hash__</snippet></ROW><ROW><id>15176363</id><snippet>class Obj(object):
    def __init__(self,val):
        self.val=val

    def __repr__(self):
        return self.val

li=['i am uniq','i am uniq','i am uniq','not really','not really','not really']        
print set(Obj(e) for e in li)
</snippet></ROW><ROW><id>15176363</id><snippet>set([i am uniq, i am uniq, not really, not really, i am uniq, not really])
</snippet></ROW><ROW><id>15176363</id><snippet>__eq__</snippet></ROW><ROW><id>15176363</id><snippet>__hash__</snippet></ROW><ROW><id>15176363</id><snippet>class Obj(object):
    def __init__(self,val):
        self.val=val
        self.hash=hash(val)

    def __repr__(self):
        return self.val

    def __eq__(self,other):
        return self.hash==other.hash    

    def __hash__(self):
        return self.hash        

li=['i am uniq','i am uniq','i am uniq','really','really','really']        
print set(Obj(e) for e in li) 
</snippet></ROW><ROW><id>15176363</id><snippet>set([i am uniq, really])
</snippet></ROW><ROW><id>15176363</id><snippet>Jobs</snippet></ROW><ROW><id>15176363</id><snippet>lines X records</snippet></ROW><ROW><id>15176403</id><snippet>plot</snippet></ROW><ROW><id>15176403</id><snippet>ImageSurface</snippet></ROW><ROW><id>15176403</id><snippet>plot</snippet></ROW><ROW><id>15176403</id><snippet>plot(gp, target=my_surface, **visual_style)
</snippet></ROW><ROW><id>15176403</id><snippet>plot()</snippet></ROW><ROW><id>15176403</id><snippet>Plot</snippet></ROW><ROW><id>15176403</id><snippet>show()</snippet></ROW><ROW><id>15176403</id><snippet>Plot</snippet></ROW><ROW><id>15176403</id><snippet>save()</snippet></ROW><ROW><id>15176768</id><snippet>import encodings.big5</snippet></ROW><ROW><id>15176768</id><snippet>undefined reference</snippet></ROW><ROW><id>15176768</id><snippet>PyInitialize()</snippet></ROW><ROW><id>15176768</id><snippet>dlopen("libpython2.7.so", RTLD_LAZY | RTLD_GLOBAL);</snippet></ROW><ROW><id>15176918</id><snippet>destroy()</snippet></ROW><ROW><id>15176918</id><snippet>def remove_checkbuttons():
    # Remove the checkbuttons you want
    for chk_bx in checkbuttons:
        chk_bx.destroy()

def create_checkbutton(name):
    return Checkbutton(root, text=name, command=lambda: box_select(name),
                       onvalue=1, offvalue=0, height=1, width=20)

#...
checkbuttons = [create_checkbutton(name) for name in test_name]
</snippet></ROW><ROW><id>15176918</id><snippet>IntVar</snippet></ROW><ROW><id>15176918</id><snippet>onvalue</snippet></ROW><ROW><id>15176918</id><snippet>offvalue</snippet></ROW><ROW><id>15176918</id><snippet>def printcheckbuttons():
    for chk_bx in checkbuttons:
        print chk_bx.var.get()

def create_checkbutton(name):
    var = IntVar()
    cb = Checkbutton(root, variable=var, ...)
    cb.var = var
    return cb
</snippet></ROW><ROW><id>15176956</id><snippet>from itertools import groupby

new_list = [sublist + [sum(1 for _ in g)] for sublist, g in groupby(list_1)]
# -&gt; [['a', 'b', 1], ['a', 'c', 3], ['b', 'e', 1], ['d', 'q', 2]]
</snippet></ROW><ROW><id>15177097</id><snippet>MyClass()</snippet></ROW><ROW><id>15177097</id><snippet>vars()</snippet></ROW><ROW><id>15177097</id><snippet>'%(a)s' % vars(m)
</snippet></ROW><ROW><id>15177097</id><snippet>__slots__</snippet></ROW><ROW><id>15177097</id><snippet>''.format()</snippet></ROW><ROW><id>15177097</id><snippet>'{0.a}'.format(m)
</snippet></ROW><ROW><id>15177097</id><snippet>.__format__(format_spec)</snippet></ROW><ROW><id>15177097</id><snippet>format()</snippet></ROW><ROW><id>15177097</id><snippet>.__getitem__()</snippet></ROW><ROW><id>15177097</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __getitem__(self, name):
...         if name == 'bar': return 'baz'
...         raise AttributeError(name)
... 
&gt;&gt;&gt; '%(bar)s' % Foo()
'baz'
</snippet></ROW><ROW><id>15177119</id><snippet>except fileformats.Uknown_File_Type, e</snippet></ROW><ROW><id>15177119</id><snippet>as</snippet></ROW><ROW><id>15177119</id><snippet>try</snippet></ROW><ROW><id>15177119</id><snippet>except</snippet></ROW><ROW><id>15177119</id><snippet>except fileformats.Uknown_File_Type as e</snippet></ROW><ROW><id>15177119</id><snippet>as</snippet></ROW><ROW><id>15177624</id><snippet>from ghost import Ghost
ghost = Ghost()
page, extra_resources = ghost.open("http://jeanphi.fr")
assert page.http_status==200 and 'jeanphix' in ghost.content
</snippet></ROW><ROW><id>15177843</id><snippet>.set_alpha()</snippet></ROW><ROW><id>15177964</id><snippet>import xml.sax

class myHandler(xml.sax.ContentHandler):
    def __init__(self):
        self.text = []
        self.keeping_text = False
        self.attributes = []

    def startElement(self, name, attrs):
        if name.lower() in ('tag2', 'tag4'):
            self.keeping_text = True

        try:
            # must attribute1 be on a tag2 or anywhere?
            attr = attrs.getValue('attribute1')
            self.attributes.append(attr)
        except KeyError:
            pass

    def endElement(self, name):
        self.keeping_text = False

    def characters(self, content):
        if self.keeping_text:
            self.text.append(content)

parser = xml.sax.make_parser()
handler = myHandler()
parser.setContentHandler(handler)
parser.parse(open("sample.xml", "r"))

print handler.text
print handler.attributes

# [u'\n', u'      Text I want to use', u'\n', u'   ',
#  u'\n', u'      More text I want to use', u'\n', u'   ']
# [u'attribute_i_need']
</snippet></ROW><ROW><id>15177964</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>15177964</id><snippet>lxml</snippet></ROW><ROW><id>15177991</id><snippet>from PIL import Image

file_in = "image.png"
img = Image.open(file_in)
file_out = 'test1.bmp'
print len(img.split()) # test
if len(img.split()) == 4:
    # prevent IOError: cannot write mode RGBA as BMP
    r, g, b, a = img.split()
    img = Image.merge("RGB", (r, g, b))
    img.save(file_out)
else:
    img.save(file_out)

from xlwt import Workbook
w = Workbook()
ws = w.add_sheet('Image')
ws.insert_bitmap(file_out, 0, 0)
w.save('images.xls')
</snippet></ROW><ROW><id>15178115</id><snippet>def process_packets():
    pkts = rdpcap(infile)
    cooked=[]
    timestamp = 1234567890.000000
    for p in pkts:
        p.time = timestamp
        timestamp += 0.000001
        pmod=p
        cooked.append(pmod)
    wrpcap("dump.pcap", cooked)
</snippet></ROW><ROW><id>15178196</id><snippet>u.feed_entry.author</snippet></ROW><ROW><id>15178196</id><snippet>[&lt;spinn3rApi_pb2.Author object at 0x362e6d0&gt;]
</snippet></ROW><ROW><id>15178196</id><snippet>print data.feed_entry.author[0].name
</snippet></ROW><ROW><id>15178245</id><snippet>with urllib.request.urlopen(BASE_URL) as url:
    body = url.read()
    parser = ET.XMLParser()
    parser.parser.UseForeignDTD(True)
    parser.entity.update(entitydefs)
    parser.feed(body)
    root = parser.close()   # this returns you the tree
</snippet></ROW><ROW><id>15178262</id><snippet>Gtk.RadioToolButton.new_with_stock_from_widget(first_button, Gtk.STOCK_PROPERTIES)
</snippet></ROW><ROW><id>15178262</id><snippet>Notebook</snippet></ROW><ROW><id>15178265</id><snippet>cv.CaptureFromCAM(0)</snippet></ROW><ROW><id>15178265</id><snippet>cv2.waitKey()</snippet></ROW><ROW><id>15178265</id><snippet>time.sleep()</snippet></ROW><ROW><id>15178265</id><snippet>import cv, cv2, time, sys

camcapture = cv.CaptureFromCAM(0)
cv.SetCaptureProperty(camcapture,cv.CV_CAP_PROP_FRAME_WIDTH, 1280)
cv.SetCaptureProperty(camcapture,cv.CV_CAP_PROP_FRAME_HEIGHT, 720)

while True:
    frame = cv.QueryFrame(camcapture)
    ... GUI stuff ...
    time.sleep(.05)
</snippet></ROW><ROW><id>15178265</id><snippet>camcapture = cv2.VideoCapture(0)
while True:
    _, frame = camcapture.read()
    ... GUI stuff ...
    time.sleep(.05)
</snippet></ROW><ROW><id>15178353</id><snippet>l10n</snippet></ROW><ROW><id>15178353</id><snippet>import l10n.utils</snippet></ROW><ROW><id>15178353</id><snippet>l10n</snippet></ROW><ROW><id>15178353</id><snippet>l10n</snippet></ROW><ROW><id>15178353</id><snippet>import l10n.utils</snippet></ROW><ROW><id>15178353</id><snippet>sys.path</snippet></ROW><ROW><id>15178353</id><snippet>sys.path</snippet></ROW><ROW><id>15178353</id><snippet>import l10n.utils</snippet></ROW><ROW><id>15178624</id><snippet>connect()</snippet></ROW><ROW><id>15178624</id><snippet>session</snippet></ROW><ROW><id>15178624</id><snippet>connect()</snippet></ROW><ROW><id>15178624</id><snippet>ssh</snippet></ROW><ROW><id>15178624</id><snippet>None</snippet></ROW><ROW><id>15178718</id><snippet>smoothed=[0.0,0.0]*(len(list1)-window)
print smoothed

for i in range(len(smoothed)):
    smoothing=[0.0,0.0]
    for e,w in zip(list1[i:i+window],weight):
        smoothing=smoothing+numpy.multiply(e,w)
    smoothed[i]=smoothing/sum(weight)
</snippet></ROW><ROW><id>15178785</id><snippet>autoshow_index</snippet></ROW><ROW><id>15178785</id><snippet>def get_queryset(self):
    return AutoShow.objects.exclude(id=1)
</snippet></ROW><ROW><id>15178797</id><snippet>   translate(
             concat(//span[@itemprop = 'price']/text()[normalize-space()],
                    //span[@itemprop = 'price']/span[@class='offer_price_fraction']
                    ),
             ',',
             '.'
             )
</snippet></ROW><ROW><id>15178797</id><snippet>&lt;xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"&gt;
 &lt;xsl:output omit-xml-declaration="yes" indent="yes"/&gt;

 &lt;xsl:template match="/"&gt;
  &lt;xsl:copy-of select=
  "translate(
          concat(//span[@itemprop = 'price']/text()[normalize-space()],
                  //span[@itemprop = 'price']/span[@class='offer_price_fraction']
                 ),
           ',',
           '.'
            )"/&gt;
 &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</snippet></ROW><ROW><id>15178797</id><snippet>&lt;span itemprop="price" class="offer_price"&gt;
  &lt;span class="currency"&gt;\u20ac&lt;/span&gt;
16&lt;span class="offer_price_fraction"&gt;,95&lt;/span&gt;
&lt;/span&gt;
</snippet></ROW><ROW><id>15178797</id><snippet>16.95
</snippet></ROW><ROW><id>15179205</id><snippet>bit.ly</snippet></ROW><ROW><id>15179205</id><snippet>iswtc.la</snippet></ROW><ROW><id>15179205</id><snippet>$ nslookup bit.ly

Non-authoritative answer:
Name:   bit.ly
Address: 69.58.188.39
Name:   bit.ly
Address: 69.58.188.40


$ nslookup iswtc.la

** server can't find iswtc.la: NXDOMAIN
</snippet></ROW><ROW><id>15179226</id><snippet>os.path.join</snippet></ROW><ROW><id>15179226</id><snippet>path = os.path.join(sys.argv[1], '1.exe')
</snippet></ROW><ROW><id>15179226</id><snippet>os.sep</snippet></ROW><ROW><id>15179274</id><snippet>object[index]</snippet></ROW><ROW><id>15179274</id><snippet>getValue</snippet></ROW><ROW><id>15179274</id><snippet>getValue</snippet></ROW><ROW><id>15179274</id><snippet>__getitem__</snippet></ROW><ROW><id>15179464</id><snippet>pkgin</snippet></ROW><ROW><id>15179464</id><snippet>pkgsrc</snippet></ROW><ROW><id>15179464</id><snippet>pkgsrc</snippet></ROW><ROW><id>15179554</id><snippet>text</snippet></ROW><ROW><id>15179554</id><snippet>"science"</snippet></ROW><ROW><id>15179554</id><snippet>multiple_replace</snippet></ROW><ROW><id>15179554</id><snippet>"science"</snippet></ROW><ROW><id>15179554</id><snippet>sub</snippet></ROW><ROW><id>15179554</id><snippet>"science"</snippet></ROW><ROW><id>15179554</id><snippet>multiple_replace</snippet></ROW><ROW><id>15179554</id><snippet>regex = re.compile("science|(?&lt;!science)(%s)" % "|".join(map(re.escape, dict.keys())))
</snippet></ROW><ROW><id>15179554</id><snippet>"science" : "science",</snippet></ROW><ROW><id>15179554</id><snippet>dict</snippet></ROW><ROW><id>15179554</id><snippet>"science"</snippet></ROW><ROW><id>15179554</id><snippet>"science"</snippet></ROW><ROW><id>15179554</id><snippet>(?&lt;!science)</snippet></ROW><ROW><id>15179554</id><snippet>import re

def multiple_replace(dict, text):

    def repl(match):
        single, double = match.groups()
        if double:
            return 'science' + single
        else:
            return dict[single] if single in dict else single

    return re.sub(r'([bcdfghj-np-tv-z])(\1)?', repl, text, flags=re.I)    

if __name__ == "__main__":     
    text = "This is my d's first try at cing, yahooa yahoouuee bbbiirdd"   
    dict = { "b" : "blah", "c" : "cook", "d" : "dog" }   

    print multiple_replace(dict, text)
    # This is my dog's first try at cooking, yahooa yahoouuee sciencebblahiirscienced
</snippet></ROW><ROW><id>15179558</id><snippet>__getitem__</snippet></ROW><ROW><id>15179558</id><snippet>/Articles/123</snippet></ROW><ROW><id>15179558</id><snippet>/Articles</snippet></ROW><ROW><id>15179558</id><snippet>@view_config(context='resource.ArticleDispatcher')
def article_list(context, request):
    all_articles_ids = context.magically_get_ids_of_all_articles()
    articles = [context[id] for id in all_articles_ids]
    return {'articles': articles}
</snippet></ROW><ROW><id>15179558</id><snippet>@view_config(context='resource.ArticleDispatcher')
def article_list(context, request):
    articles = context.adopt_children(request.db.query(Article))
    return {'articles': articles}

class ArticleDispatcher(object):
    def adopt_children(self, children):
        for child in children:
            child.__name__ = child.id # actually I'd made __name__ a property of the Article model
            child.__parent__ = self
        return children
</snippet></ROW><ROW><id>15179558</id><snippet>req.resource_url(ARTICLE_DISPATCHER) + '/' + article.id
</snippet></ROW><ROW><id>15179558</id><snippet>@view_config(context='resource.ArticleDispatcher')
def article_list(context, resource):
    name_id_tuples = request.db.query(Article.id, Article.name).all()
    return {'articles': name_id_tuples}
</snippet></ROW><ROW><id>15179633</id><snippet>with open(filename, 'r') as f:
    for line in f:
        value = mydict.get(line.strip())
        if value is not None:
            print value
</snippet></ROW><ROW><id>15179633</id><snippet>with open(infilename, 'r') as infile, open(outfilename, 'w') as outfile:
    for line in infile:
        value = mydict.get(line.strip())
        if value is not None:
            outfile.write(value + '\n')
</snippet></ROW><ROW><id>15179761</id><snippet>datetime.datetime.fromtimestamp()</snippet></ROW><ROW><id>15179761</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.fromtimestamp(1362236400000/1000)
datetime.datetime(2013, 3, 2, 16, 0)
</snippet></ROW><ROW><id>15179845</id><snippet>u = User()
g = [Group(), Group(), Group()]

u.groups = g
</snippet></ROW><ROW><id>15179845</id><snippet>g1 = Group()
u.groups.append(g)
</snippet></ROW><ROW><id>15179845</id><snippet>g.users.append(User())
</snippet></ROW><ROW><id>15179845</id><snippet>User</snippet></ROW><ROW><id>15179845</id><snippet>Group</snippet></ROW><ROW><id>15179845</id><snippet>users</snippet></ROW><ROW><id>15179845</id><snippet>Group</snippet></ROW><ROW><id>15179845</id><snippet>User</snippet></ROW><ROW><id>15179845</id><snippet>groups</snippet></ROW><ROW><id>15179920</id><snippet>float</snippet></ROW><ROW><id>15179920</id><snippet>In [38]: '%.20f' % 2.2
Out[38]: '2.20000000000000017764'
</snippet></ROW><ROW><id>15179920</id><snippet>In [45]: '%.20f' % (2.2 - 2)
Out[45]: '0.20000000000000017764'

In [46]: '%.20f' % (1 / (2.2 - 2))
Out[46]: '4.99999999999999555911'
</snippet></ROW><ROW><id>15179961</id><snippet>data</snippet></ROW><ROW><id>15179961</id><snippet>(a,b)</snippet></ROW><ROW><id>15179961</id><snippet>data.insert</snippet></ROW><ROW><id>15179961</id><snippet>bisect(data,(a,LARGE_NUMBER))</snippet></ROW><ROW><id>15179961</id><snippet>a</snippet></ROW><ROW><id>15179961</id><snippet>&gt;&gt;&gt; from bisect import bisect
&gt;&gt;&gt; from random import randint
&gt;&gt;&gt; data = []
&gt;&gt;&gt; for x in range(20):
...   a,b = randint(1,10),randint(1,100)
...   data.insert(bisect(data,(a,1000)),(a,b))
...
&gt;&gt;&gt; for d in data: print (d)
...
(1, 67)
(1, 85)
(1, 38)
(2, 78)
(3, 57)
(3, 37)
(4, 76)
(4, 74)
(5, 47)
(5, 24)
(5, 59)
(5, 91)
(6, 85)
(6, 41)
(7, 18)
(7, 41)
(7, 24)
(9, 48)
(9, 77)
(9, 82)
(10, 80)
</snippet></ROW><ROW><id>15180236</id><snippet>int('{0:b}'.format(n)[::-1], 2)
</snippet></ROW><ROW><id>15180236</id><snippet>int(bin(n)[:1:-1], 2)
</snippet></ROW><ROW><id>15180236</id><snippet>import timeit

print timeit.timeit("int('{0:b}'.format(n)[::-1], 2)", 'n = 123456')

print timeit.timeit("int(bin(n)[:1:-1], 2)", 'n = 123456')

print timeit.timeit("int(''.join(reversed(bin(n)[2:])),2)", 'n = 123456')
</snippet></ROW><ROW><id>15180249</id><snippet>&gt;&gt;&gt; lst = ['A', '1', '2', 'B', '1', 'C', 'D', '4', '1', '4', '5', 'Z', 'D']
&gt;&gt;&gt; lst = [int(s) if s.isdigit() else s for s in lst]
&gt;&gt;&gt; lst
['A', 1, 2, 'B', 1, 'C', 'D', 4, 1, 4, 5, 'Z', 'D']
</snippet></ROW><ROW><id>15180372</id><snippet>out = open('magnum-opus.txt', 'w')</snippet></ROW><ROW><id>15180372</id><snippet>out = open('magnum-opus.txt', 'wb')</snippet></ROW><ROW><id>15180553</id><snippet>numpy.cov</snippet></ROW><ROW><id>15180553</id><snippet>np.cov(data.T)</snippet></ROW><ROW><id>15180553</id><snippet>X</snippet></ROW><ROW><id>15180553</id><snippet>X</snippet></ROW><ROW><id>15180553</id><snippet>In [58]: N, X = 100, 3

In [59]: data = np.random.random((N,X))

In [60]: mean = np.mean(data, axis = 0)

In [61]: mean
Out[61]: array([ 0.4913433 ,  0.49484566,  0.52463666])

In [62]: np.cov(data.T).shape
Out[62]: (3, 3)

In [63]: cov = np.cov(data.T)

In [64]: np.random.multivariate_normal(mean, cov)
Out[64]: array([ 0.27194062,  0.65995531,  0.67367201])
</snippet></ROW><ROW><id>15180553</id><snippet>rowval=False</snippet></ROW><ROW><id>15180553</id><snippet>In [68]: cov = np.cov(data, rowvar=False)

In [69]: cov.shape
Out[69]: (3, 3)
</snippet></ROW><ROW><id>15180654</id><snippet>TElement</snippet></ROW><ROW><id>15180654</id><snippet>class TElement:
    def __init__(self):
        self.vec = []
</snippet></ROW><ROW><id>15180721</id><snippet>import os
import Image
import numpy as np
import scipy.stats.mstats as mstats

f = os.path.expanduser('~/tmp/image.png')
name, ext = os.path.splitext(f)
out = name+"_adjusted.png"

oldImage = Image.open(f).convert('L')
imageArray = np.array(oldImage)

vmin, vmax = mstats.mquantiles(imageArray.flatten(), prob=[0.01,0.99])

np.clip(imageArray, vmin, vmax, out=imageArray)
imageArray = (imageArray-vmin)*255/(vmax-vmin)
img = Image.fromarray(imageArray.astype('uint8'), 'L')
img.save(out)
</snippet></ROW><ROW><id>15180938</id><snippet>sys.path</snippet></ROW><ROW><id>15180938</id><snippet>requests</snippet></ROW><ROW><id>15180938</id><snippet>  import sys 
  import os

  # request-dists is the folder in our plugin
  sys.path.append(os.path.join(os.path.dirname(__file__), "requests-dist"))

  import requests
</snippet></ROW><ROW><id>15180938</id><snippet>requests</snippet></ROW><ROW><id>15180938</id><snippet>setup.py</snippet></ROW><ROW><id>15180938</id><snippet>easy_install</snippet></ROW><ROW><id>15180938</id><snippet>pip</snippet></ROW><ROW><id>15180938</id><snippet>requests</snippet></ROW><ROW><id>15181035</id><snippet>nltk.ConditionalFreqDist</snippet></ROW><ROW><id>15181035</id><snippet>def cond_freq_dist(data):
    """ Takes a list of tuples and returns a conditional frequency distribution as a pandas dataframe. """

    cfd = {}
    for cond, freq in data:
        try:
            cfd[cond][freq] += 1
        except KeyError:
            try:
                cfd[cond][freq] = 1
            except KeyError:
                cfd[cond] = {freq: 1}

    return pd.DataFrame(cfd).fillna(0)
</snippet></ROW><ROW><id>15181100</id><snippet>import random

width = 5
height = 5

class Brain(object):

    def __init__(self):
        self.w = [[1]]
        self.ix = [[1]]

    def mutate(self):
        self.w[0].append(1)

class Animal(object):

    def __init__(self):
        self.brain = Brain()
        self.x = random.randint(0, width)
        self.y = random.randint(0, height)
        self.age = 0
        self.fitness = 10

def reproduce(parent):
    child = Animal()
    child.brain.w= parent.brain.w[:]
    child.brain.ix= parent.brain.ix[:]
    child.x,child.y = random.randint(0,width),random.randint(0,height)
    child.age = 0
    child.fitness= 9 + parent.fitness/10 #parent.fitness/2

    mutation = random.choice([0,1,1,1,1,1,1,1,1,2,3,4,5])
    for b in range(mutation):
      child.brain.mutate()
    animals.append(child)

animals = []
parent = Animal()

animals.append(parent)
print parent.brain.w
#reproduce(parent)
import copy
reproduce(copy.deepcopy(parent))

for each in animals:
    print each.brain.w
</snippet></ROW><ROW><id>15181100</id><snippet>parent.brain.w</snippet></ROW><ROW><id>15181100</id><snippet>child.brain.w</snippet></ROW><ROW><id>15181100</id><snippet>copy</snippet></ROW><ROW><id>15181100</id><snippet>&gt;&gt;&gt; a = [1, 2, 3, 4, 5]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b.append(6)
&gt;&gt;&gt; b
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; a
[1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; a is b
True
</snippet></ROW><ROW><id>15181100</id><snippet>a</snippet></ROW><ROW><id>15181100</id><snippet>b</snippet></ROW><ROW><id>15181100</id><snippet>&gt;&gt;&gt; a = [[1, 2, 3]]
&gt;&gt;&gt; b = []
&gt;&gt;&gt; b = a[:] # What you are doing
&gt;&gt;&gt; b is a
False
&gt;&gt;&gt; b[0] is a[0]
True
&gt;&gt;&gt; b[0].append(4)
&gt;&gt;&gt; b[0]
[1, 2, 3, 4]
&gt;&gt;&gt; a[0]
[1, 2, 3, 4]
</snippet></ROW><ROW><id>15181100</id><snippet>&gt;&gt;&gt; a = [(1, 2, 3)]
&gt;&gt;&gt; b = []
&gt;&gt;&gt; b = a[:]
&gt;&gt;&gt; b is a
False
&gt;&gt;&gt; b[0] is a[0] # Initially the objects are the same
True
&gt;&gt;&gt; b[0] += (4,) # Now a new object is created and overwrites b[0]
&gt;&gt;&gt; b[0] is a[0]
False
&gt;&gt;&gt; b[0]
(1, 2, 3, 4)
&gt;&gt;&gt; a[0]
(1, 2, 3)
</snippet></ROW><ROW><id>15181397</id><snippet>port info libharu</snippet></ROW><ROW><id>15181397</id><snippet>/opt/local/etc/macports/sources.conf</snippet></ROW><ROW><id>15181397</id><snippet>file:///path/to/your/clone</snippet></ROW><ROW><id>15181602</id><snippet>x</snippet></ROW><ROW><id>15181602</id><snippet>for x in range</snippet></ROW><ROW><id>15181602</id><snippet>for i in range(iteration)
</snippet></ROW><ROW><id>15181602</id><snippet>variableletter, variablevalue = random.choice(newdict.items())
</snippet></ROW><ROW><id>15181613</id><snippet>def fill_array(a, b, N, out=None):
    if out is None:
        out = np.zeros(N, N)
    out[0] = a
    out[-1] = b
    return out
</snippet></ROW><ROW><id>15181613</id><snippet>out</snippet></ROW><ROW><id>15181613</id><snippet>out</snippet></ROW><ROW><id>15181613</id><snippet>out</snippet></ROW><ROW><id>15181696</id><snippet>test</snippet></ROW><ROW><id>15181696</id><snippet>Server</snippet></ROW><ROW><id>15181696</id><snippet>class Server:
  def serve(self):
    # Client processing, etc.
    self.game.game_loop(self)
</snippet></ROW><ROW><id>15181696</id><snippet>test</snippet></ROW><ROW><id>15181696</id><snippet>game_loop</snippet></ROW><ROW><id>15181696</id><snippet>class Game:
  def game_loop(self, server):
    print server.test
</snippet></ROW><ROW><id>15181754</id><snippet>date</snippet></ROW><ROW><id>15181754</id><snippet>date</snippet></ROW><ROW><id>15181754</id><snippet>dict</snippet></ROW><ROW><id>15181754</id><snippet>dict</snippet></ROW><ROW><id>15181754</id><snippet>set</snippet></ROW><ROW><id>15181754</id><snippet>date</snippet></ROW><ROW><id>15181754</id><snippet>obs</snippet></ROW><ROW><id>15181754</id><snippet>obs</snippet></ROW><ROW><id>15181754</id><snippet>date</snippet></ROW><ROW><id>15181754</id><snippet>In [4]: dobs = dict()
In [5]: for o in obs:
   ...:     d = o['date']
   ...:     if d not in dobs:
   ...:         dobs[d] = []
   ...:     dobs[d].append(o)
   ...: 
</snippet></ROW><ROW><id>15181754</id><snippet>dict.setdefault</snippet></ROW><ROW><id>15181754</id><snippet>for</snippet></ROW><ROW><id>15181754</id><snippet>In [7]: for o in obs:
   ...:     dobs.setdefault(o['date'], []).append(o)
   ...: 
</snippet></ROW><ROW><id>15181754</id><snippet>In [9]: dobs = dict([(d, []) for d in set([e['date'] for e in obs])])
In [10]: for o in obs:
   ....:     dobs[o['date']].append(o)
   ....: 
</snippet></ROW><ROW><id>15181754</id><snippet>dobs</snippet></ROW><ROW><id>15181754</id><snippet>date</snippet></ROW><ROW><id>15181754</id><snippet>obs</snippet></ROW><ROW><id>15181754</id><snippet>date</snippet></ROW><ROW><id>15181754</id><snippet>date</snippet></ROW><ROW><id>15181754</id><snippet>realtime_start</snippet></ROW><ROW><id>15181754</id><snippet>In [11]: rts = lambda x: x['realtime_start']
In [12]: [sorted(e, key=rts)[-1] for e in dobs.values() if e]
Out[12]: 
[{'date': '2013-01-01',
  'realtime_end': '9999-12-31',
  'realtime_start': '2013-03-21',
  'value': '231.222'},
 {'date': '2012-12-01',
  'realtime_end': '9999-12-31',
  'realtime_start': '2013-03-19',
  'value': '231.197'},
 {'date': '2012-10-01',
  'realtime_end': '9999-12-31',
  'realtime_start': '2012-12-19',
  'value': '231.623'},
 {'date': '2012-11-01',
  'realtime_end': '9999-12-31',
  'realtime_start': '2013-01-19',
  'value': '231.071'}]
</snippet></ROW><ROW><id>15181754</id><snippet>if e</snippet></ROW><ROW><id>15181754</id><snippet>dobs</snippet></ROW><ROW><id>15181754</id><snippet>dobs</snippet></ROW><ROW><id>15181754</id><snippet>realtime_start</snippet></ROW><ROW><id>15181754</id><snippet>2013-02-21</snippet></ROW><ROW><id>15181754</id><snippet>dobs</snippet></ROW><ROW><id>15181754</id><snippet>realtime_start</snippet></ROW><ROW><id>15181754</id><snippet>In [13]: dobs2 = dict([(k, [d for d in v if d['realtime_start'] &lt;= maxDate])
   ....:               for k, v in dobs.items()])
In [14]: [sorted(e, key=rts)[-1] for e in dobs2.values() if e]
Out[14]: 
[{'date': '2013-01-01',
  'realtime_end': '9999-12-31',
  'realtime_start': '2013-02-21',
  'value': '231.198'},
 {'date': '2012-12-01',
  'realtime_end': '9999-12-31',
  'realtime_start': '2013-02-19',
  'value': '231.137'},
 {'date': '2012-10-01',
  'realtime_end': '9999-12-31',
  'realtime_start': '2012-12-19',
  'value': '231.623'},
 {'date': '2012-11-01',
  'realtime_end': '9999-12-31',
  'realtime_start': '2013-01-19',
  'value': '231.071'}]
</snippet></ROW><ROW><id>15181754</id><snippet>if e</snippet></ROW><ROW><id>15181754</id><snippet>maxDate</snippet></ROW><ROW><id>15181754</id><snippet>IndexError</snippet></ROW><ROW><id>15181754</id><snippet>dict</snippet></ROW><ROW><id>15181754</id><snippet>obs</snippet></ROW><ROW><id>15181754</id><snippet>dict</snippet></ROW><ROW><id>15181754</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>15181754</id><snippet>In [15]: from collections import OrderedDict
In [16]: dobs = OrderedDict()
In [17]: for o in obs:
   ....:     dobs.setdefault(o['date'], []).append(o)
   ....: 
In [18]: [sorted(e, key=rts)[-1] for e in dobs.values()]
Out[18]: 
[{'date': '2012-10-01',
  'realtime_end': '9999-12-31',
  'realtime_start': '2012-12-19',
  'value': '231.623'},
 {'date': '2012-11-01',
  'realtime_end': '9999-12-31',
  'realtime_start': '2013-01-19',
  'value': '231.071'},
 {'date': '2012-12-01',
  'realtime_end': '9999-12-31',
  'realtime_start': '2013-03-19',
  'value': '231.197'},
 {'date': '2013-01-01',
  'realtime_end': '9999-12-31',
  'realtime_start': '2013-03-21',
  'value': '231.222'}]
</snippet></ROW><ROW><id>15181812</id><snippet>for row in rows:
        #printing second &amp; third column(See tuples)
        #sets the variable
        self.labelVariable.set(row[1])
        #sets the variable again to a different value
        self.labelVariable.set(row[2])
</snippet></ROW><ROW><id>15181812</id><snippet> label = ""
 for row in rows:
    label += row[1] + ":" + row[2] + "\n"
 self.labelVariable.set(label)
 #print to check the label string
 print label
</snippet></ROW><ROW><id>15181903</id><snippet>sorted(set(y))
</snippet></ROW><ROW><id>15181903</id><snippet>set</snippet></ROW><ROW><id>15181942</id><snippet>%</snippet></ROW><ROW><id>15181942</id><snippet>*</snippet></ROW><ROW><id>15181942</id><snippet>print("First item: {:d}, second item: {:d} and third item: {:d}.".format(*tuple))
</snippet></ROW><ROW><id>15181961</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; mylist = [('a',1),('a',2),('a',3),('b',1),('b',2),('b',3)]
&gt;&gt;&gt; result = collections.defaultdict(list)
&gt;&gt;&gt; for item in mylist:
        result[item[0]].append(item[1])
&gt;&gt;&gt; dict(result)
{'a': [1, 2, 3], 'b': [1, 2, 3]}
</snippet></ROW><ROW><id>15181961</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>15181961</id><snippet>list</snippet></ROW><ROW><id>15181961</id><snippet>defaultdict</snippet></ROW><ROW><id>15181961</id><snippet>dict</snippet></ROW><ROW><id>15181961</id><snippet>defaultdict</snippet></ROW><ROW><id>15181961</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; mylist = [('a',1),('a',2),('c',1),('c',2),('b',1),('b',2)]
&gt;&gt;&gt; result = collections.OrderedDict()
&gt;&gt;&gt; for item in mylist:
        if item[0] not in result:
             result[item[0]] = list()
        result[item[0]].append(item[1])
&gt;&gt;&gt; result
OrderedDict([('a', [1, 2]), ('c', [1, 2]), ('b', [1, 2])])
&gt;&gt;&gt; result.keys()
['a', 'c', 'b']
</snippet></ROW><ROW><id>15181961</id><snippet>dict(result)</snippet></ROW><ROW><id>15181961</id><snippet>dict</snippet></ROW><ROW><id>15182079</id><snippet> url(r'^(?P&lt;submit&gt;.*)/$', 'vote', name='vote'),
</snippet></ROW><ROW><id>15182255</id><snippet>text</snippet></ROW><ROW><id>15182255</id><snippet>inp</snippet></ROW><ROW><id>15182255</id><snippet>len(text)</snippet></ROW><ROW><id>15182255</id><snippet>#!/usr/bin/python
# coding=utf-8
def inp(text):
    tmp = str()
    utext = text.decode('utf-8')
    l = len(utext)
    arr = ['.' for x in range(1, 40 - l)]
    tmp += text + ''.join(arr)
    print tmp

s=['tester', 'om', 'sup', 'jope']
sr=['тестер', 'ом', 'суп', 'жопа']
for i in s:
    inp(i)
for i in sr:
    inp(i)
</snippet></ROW><ROW><id>15182255</id><snippet>    utext = text.decode('utf-8')
    l = len(utext)
</snippet></ROW><ROW><id>15182255</id><snippet>len</snippet></ROW><ROW><id>15182291</id><snippet>interning</snippet></ROW><ROW><id>15182291</id><snippet>'dog' is 'dog'</snippet></ROW><ROW><id>15182291</id><snippet>id()</snippet></ROW><ROW><id>15182291</id><snippet># different id when not assigned
In [146]: id('dog')
Out[146]: 4380547672

In [147]: id('dog')
Out[147]: 4380547552

# if assigned, the strings will be interned (though depends on implementation)
In [148]: a = 'dog'

In [149]: b = 'dog'

In [150]: id(a)
Out[150]: 4380547352

In [151]: id(b)
Out[151]: 4380547352

In [152]: a is b
Out[152]: True
</snippet></ROW><ROW><id>15182291</id><snippet>In [18]: id(256)
Out[18]: 140511109257408

In [19]: id(256)
Out[19]: 140511109257408

In [20]: id(257)
Out[20]: 140511112156576

In [21]: id(257)
Out[21]: 140511110188504
</snippet></ROW><ROW><id>15182291</id><snippet>'a string'</snippet></ROW><ROW><id>15182373</id><snippet>[</snippet></ROW><ROW><id>15182373</id><snippet>]</snippet></ROW><ROW><id>15182373</id><snippet>{"consumer_key":["12092-2970cc0e27ce9a25cb39f1dd"],</snippet></ROW><ROW><id>15182435</id><snippet>attrsToCopy = ['name', 'inventory', 'maxhp', 'thrust', 'ftlspeed']
for attr in attrsToCopy:
    setattr(self, attr, getattr(theshiptype, attr))
</snippet></ROW><ROW><id>15182435</id><snippet>getattr</snippet></ROW><ROW><id>15182435</id><snippet>setattr</snippet></ROW><ROW><id>15182481</id><snippet>RedirectRoute(r'/',handler=IndexHandler,strict_slash=True,name='some_name')
</snippet></ROW><ROW><id>15182571</id><snippet>:: List item
   (this is the second line of the first list item)
 :: List item level 2
 :: List item level 2
    :: List item level 3
      :: List item level 4
 :: List item level 2
:: List item top leve
</snippet></ROW><ROW><id>15182571</id><snippet>:: List item (this is the second line of the first list item)
 :: List item level 2
 :: List item level 2
  :: List item level 3
   :: List item level 4
 :: List item level 2
:: List item top level
</snippet></ROW><ROW><id>15182571</id><snippet>import sys

def findIndent (lst):
    # given a list of text strings, returns a list containing the
    # indentation levels for each string
    spcCount = [len(s)-len(s.lstrip(' ')) for s in lst]
    indent = sorted(set(spcCount))
    levelRef = {indent[i]:i for i in range(len(indent))}
    return [levelRef[i]+1 for i in spcCount]

lst = []
for li in sys.stdin:
    if li.lstrip(' ').find('::') == 0:
        lst.append(li.rstrip())
    else:
        lst[-1] = lst[-1].rstrip() + ' ' + li.lstrip(' ').rstrip()

for i,li in zip(findIndent(lst),lst):
    print (' '*i + li.lstrip())
</snippet></ROW><ROW><id>15182582</id><snippet>from django.db import models
from mptt.models import MPTTModel, TreeForeignKey


class Category(MPTTModel):
    name = models.CharField(max_length=255)
    parent = TreeForeignKey('self', null=True, blank=True, related_name='children')

    def __unicode__(self):
        ancestors = self.get_ancestors(ascending=False, include_self=True)
        return ' -&gt; '.join(category.name
                           for category in ancestors)
</snippet></ROW><ROW><id>15182635</id><snippet>test.txt</snippet></ROW><ROW><id>15182635</id><snippet>import re

a = open('test.txt').read()

a = a.replace('\n', '').replace('\t', ' ')
a = a.replace('{', ':{').replace('}', '},\n')

b =  re.sub('(\".*?\") *(\".*?\")', r'\1:\2,', a)

b = "{%s}" % b

dictName = eval(b)
for key in dictName['items_game']['community_market_item_remaps']['Decoder Ring']:
    print key
</snippet></ROW><ROW><id>15182635</id><snippet>Fall Key 2012
Eerie Key
Nice Winter Key 2011
Nice Winter Key 2012
Summer Key
Scorched Key
Winter Key
Naughty Winter Key 2011
Naughty Winter Key 2012
</snippet></ROW><ROW><id>15182743</id><snippet>/proc/stat</snippet></ROW><ROW><id>15182743</id><snippet>&gt;&gt;&gt; for l in open("/proc/stat"):
...   l = l.split()
...   if l[0] == 'procs_running':
...     result = int(l[1])
... 
&gt;&gt;&gt; print result
6
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15182743</id><snippet>/proc/loadavg</snippet></ROW><ROW><id>15182743</id><snippet>&gt;&gt;&gt; print int(open("/proc/loadavg").next().split()[3].split('/')[0])
6
</snippet></ROW><ROW><id>15182780</id><snippet>def canonicalize(s):
    return min(s[i:]+s[:i] for i in xrange(len(s)))

canonical_strings = {canonicalize(s) for s in my_strings}
for cs in canonical_strings:
    process(cs)
</snippet></ROW><ROW><id>15182940</id><snippet>python manage.py schemamigration myapp --merge
</snippet></ROW><ROW><id>15182940</id><snippet>--update</snippet></ROW><ROW><id>15183296</id><snippet>This is line 1. This 
is line 2. This is 
line 3.
</snippet></ROW><ROW><id>15183296</id><snippet>[ "This is line 1", "This", "is line 2", "This is", "line 3", ""]
</snippet></ROW><ROW><id>15183296</id><snippet>sen_prog = " ".join(f.readlines()).split(".")
</snippet></ROW><ROW><id>15183296</id><snippet>[ "This is line 1", "This is line 2", "This is line 3", ""]
</snippet></ROW><ROW><id>15183430</id><snippet>lst = [1,2,3,4,5]
</snippet></ROW><ROW><id>15183430</id><snippet>lst = [str(e) for e in lst]
</snippet></ROW><ROW><id>15183430</id><snippet>map</snippet></ROW><ROW><id>15183430</id><snippet>map(str,lst)</snippet></ROW><ROW><id>15183430</id><snippet>&lt;TRUE-STATEMENT&gt; if &lt;condition&gt; else &lt;FALSE-STATEMENT&gt;
</snippet></ROW><ROW><id>15183430</id><snippet>"{},{}".format(a,b)
</snippet></ROW><ROW><id>15183430</id><snippet>list</snippet></ROW><ROW><id>15183430</id><snippet>**</snippet></ROW><ROW><id>15183430</id><snippet>math</snippet></ROW><ROW><id>15183430</id><snippet>sqrt</snippet></ROW><ROW><id>15183451</id><snippet>loop</snippet></ROW><ROW><id>15183451</id><snippet>void loop() {
    temp = analogRead(4) * .4882812 - 273.15;
    lumen = analogRead(0);
    Serial.print(temp);
    Serial.print("|");
    Serial.print(lumen);
    Serial.println();
    delay(10);
}
</snippet></ROW><ROW><id>15183451</id><snippet>run.py</snippet></ROW><ROW><id>15183451</id><snippet>picocom</snippet></ROW><ROW><id>15183451</id><snippet>Serial.available()</snippet></ROW><ROW><id>15183569</id><snippet>&gt;&gt;&gt; a
array([(1.5, 2.5, [[1.0, 2.0], [1.0, 2.0]]),
       (3.0, 4.0, [[4.0, 5.0], [4.0, 5.0]]),
       (1.0, 3.0, [[2.0, 6.0], [2.0, 6.0]])], 
      dtype=[('x', '&lt;f8'), ('y', '&lt;f8'), ('value', '&lt;f8', (2, 2))])
&gt;&gt;&gt; a.view(float)
array([ 1.5,  2.5,  1. ,  2. ,  1. ,  2. ,  3. ,  4. ,  4. ,  5. ,  4. ,
        5. ,  1. ,  3. ,  2. ,  6. ,  2. ,  6. ])
</snippet></ROW><ROW><id>15183569</id><snippet>'x'</snippet></ROW><ROW><id>15183569</id><snippet>'y'</snippet></ROW><ROW><id>15183569</id><snippet>&gt;&gt;&gt; from numpy.lib.stride_tricks import as_strided
&gt;&gt;&gt; b = as_strided(a.view(float), shape=a.shape + (2,),
                   strides=a.strides + a.view(float).strides)
&gt;&gt;&gt; b
array([[ 1.5,  2.5],
       [ 3. ,  4. ],
       [ 1. ,  3. ]])
</snippet></ROW><ROW><id>15183569</id><snippet>as_strided</snippet></ROW><ROW><id>15183569</id><snippet>&gt;&gt;&gt; bb = a.view(float).reshape(a.shape + (-1,))[:, :2]
&gt;&gt;&gt; bb
array([[ 1.5,  2.5],
       [ 3. ,  4. ],
       [ 1. ,  3. ]])
</snippet></ROW><ROW><id>15183569</id><snippet>a</snippet></ROW><ROW><id>15183569</id><snippet>&gt;&gt;&gt; b[0,0] =0
&gt;&gt;&gt; a
array([(0.0, 2.5, [[0.0, 2.0], [1.0, 2.0]]),
       (3.0, 4.0, [[4.0, 5.0], [4.0, 5.0]]),
       (1.0, 3.0, [[2.0, 6.0], [2.0, 6.0]])], 
      dtype=[('x', '&lt;f8'), ('y', '&lt;f8'), ('value', '&lt;f8', (2, 2))])
&gt;&gt;&gt; bb[2, 1] = 0
&gt;&gt;&gt; a
array([(0.0, 2.5, [[0.0, 2.0], [1.0, 2.0]]),
       (3.0, 4.0, [[4.0, 5.0], [4.0, 5.0]]),
       (1.0, 0.0, [[2.0, 6.0], [2.0, 6.0]])], 
      dtype=[('x', '&lt;f8'), ('y', '&lt;f8'), ('value', '&lt;f8', (2, 2))])
</snippet></ROW><ROW><id>15183569</id><snippet>&gt;&gt;&gt; b.view([('x',float), ('y',float)])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: new type not compatible with array.
</snippet></ROW><ROW><id>15183569</id><snippet>'x'</snippet></ROW><ROW><id>15183569</id><snippet>'y'</snippet></ROW><ROW><id>15183569</id><snippet>'x'</snippet></ROW><ROW><id>15183569</id><snippet>'value'</snippet></ROW><ROW><id>15183594</id><snippet>numpy.inf</snippet></ROW><ROW><id>15183594</id><snippet>infinity</snippet></ROW><ROW><id>15183623</id><snippet>uuid</snippet></ROW><ROW><id>15183623</id><snippet>import uuid

uuid.uuid5(uuid.NAMESPACE_OID, 'your string here')
</snippet></ROW><ROW><id>15183729</id><snippet>One.get()</snippet></ROW><ROW><id>15183729</id><snippet>class One:
    @staticmethod
    def get():
        return 1

class Two:
    def __init__(self):
        val = One.get()
</snippet></ROW><ROW><id>15183729</id><snippet>@staticmethod</snippet></ROW><ROW><id>15183729</id><snippet>One</snippet></ROW><ROW><id>15183729</id><snippet>get()</snippet></ROW><ROW><id>15183729</id><snippet>class One:
    def get(self):
        return 1

class Two:
    def __init__(self):
        one = One()
        val = one.get()
</snippet></ROW><ROW><id>15183846</id><snippet>re</snippet></ROW><ROW><id>15183846</id><snippet>"^keyword$"</snippet></ROW><ROW><id>15183846</id><snippet>"^keyword|hello$"</snippet></ROW><ROW><id>15183846</id><snippet>^</snippet></ROW><ROW><id>15183846</id><snippet>$</snippet></ROW><ROW><id>15183846</id><snippet>\b</snippet></ROW><ROW><id>15183846</id><snippet>r"\b(keyword|hello)\b"</snippet></ROW><ROW><id>15183846</id><snippet>r</snippet></ROW><ROW><id>15183846</id><snippet>r</snippet></ROW><ROW><id>15183846</id><snippet>sub</snippet></ROW><ROW><id>15183846</id><snippet>\1</snippet></ROW><ROW><id>15183846</id><snippet>keywordMatcher = re.compile(r"\b(keyword|hello)\b")
value = keywordMatcher.sub(r"&lt;b&gt;\1&lt;/b&gt;", value)
</snippet></ROW><ROW><id>15183846</id><snippet>from django.utils import html
html_safe = html.escape(my_text)
</snippet></ROW><ROW><id>15183846</id><snippet>&lt;</snippet></ROW><ROW><id>15183846</id><snippet>&lt;</snippet></ROW><ROW><id>15183846</id><snippet>&lt;</snippet></ROW><ROW><id>15183846</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>15183846</id><snippet>&lt;script&gt;</snippet></ROW><ROW><id>15183846</id><snippet>re.escape</snippet></ROW><ROW><id>15183846</id><snippet>import re
my_regexp = re.compile(r"\b%s\b" % (re.escape(my_word),))
</snippet></ROW><ROW><id>15183846</id><snippet>value = "this is my super duper testing thingy"
keywords = "super|my|test"

from django.utils import html
import re
# first we must split up the keywords
keywords = keywords.split("|")
# Next we must make each keyword safe for use in a regular expression,
# this is similar to the HTML escaping we discussed above but not to
# be confused with it.
keywords = [re.escape(k) for k in keywords]
# Now we reform the keywordTags string, but this time we know each keyword is regexp-safe
keywords = "|".join(keywords)
# Finally we create a regular expression that matches *any* of the keywords
keywordMatcher = re.compile(r'\b(%s)\b' % (keywords,))
# We are going to make the value into HTML (by adding &lt;b&gt; tags) so must first escape it
value = html.escape(value)
# We can then apply the regular expression to the value. We use a "back reference" `\0` to say
# that each keyword found should be replace with itself wrapped in a &lt;b&gt; tag
value = keywordMatcher.sub(r"&lt;b&gt;\1&lt;/b&gt;", value)

print value
</snippet></ROW><ROW><id>15183867</id><snippet>select_related</snippet></ROW><ROW><id>15183867</id><snippet>'features__feature'</snippet></ROW><ROW><id>15183867</id><snippet>select_related</snippet></ROW><ROW><id>15183867</id><snippet>prefetch_related</snippet></ROW><ROW><id>15183867</id><snippet>Phone.objects.select_related('brand').prefetch_related('features__feature')
</snippet></ROW><ROW><id>15183867</id><snippet>prefetch_related</snippet></ROW><ROW><id>15184046</id><snippet>alist = [(0.7897897,'this is a foo bar sentence'),
(0.653234, 'this is a foo bar sentence'),
(0.353234, 'this is a foo bar sentence'),
(0.325345, 'this is not really a foo bar'),
(0.323234, 'this is a foo bar sentence'),]

blist = [(0.64637,'this is a foo bar sentence'),
(0.534234, 'i am going to foo bar this sentence'),
(0.453234, 'this is a foo bar sentence'),
(0.323445, 'this is not really a foo bar')]

bdict = {k:v for v,k in reversed(blist)}
clist = []
cset = set()
for v,k in alist:
   if k not in cset:
      b = bdict.get(k, None)
      if b is not None:
        clist.append((v * b, k))
        cset.add(k)
print(clist)
</snippet></ROW><ROW><id>15184046</id><snippet>blist</snippet></ROW><ROW><id>15184046</id><snippet>clist</snippet></ROW><ROW><id>15184046</id><snippet>bdict = {k:v for v,k in reversed(blist)}
cdict = {}
for v,k in alist:
   if k not in cdict:
      b = bdict.get(k, None)
      if b is not None:
        cdict[k] = v * b
print(list((k,v) for v,k in cdict.items()))
</snippet></ROW><ROW><id>15184174</id><snippet>rq.Worker.all()</snippet></ROW><ROW><id>15184174</id><snippet>os.kill(worker.pid, signal.SIGINT)</snippet></ROW><ROW><id>15184205</id><snippet>    currency = r"((USD)|(GBP)(...))"
</snippet></ROW><ROW><id>15184205</id><snippet>    numbers = r"([0-9]+[0-9\.,]*)"
</snippet></ROW><ROW><id>15184205</id><snippet>    matcher = re.compile(numbers+r"[\s]*+"currency)
</snippet></ROW><ROW><id>15184205</id><snippet>    matcher2 = re.compile(currency+r"[\s]*"+numbers)
</snippet></ROW><ROW><id>15184205</id><snippet>    curren = m.group(1)
    amount = m.group(2)
</snippet></ROW><ROW><id>15184234</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; train = pd.DataFrame({'a' : ['a', 'b', 'a'], 'd' : ['e', 'e', 'f'],
...                       'b' : [0, 1, 1], 'c' : ['b', 'c', 'b']})
&gt;&gt;&gt; samples = [dict(enumerate(sample)) for sample in train]
&gt;&gt;&gt; samples
[{0: 'a'}, {0: 'b'}, {0: 'c'}, {0: 'd'}]
</snippet></ROW><ROW><id>15184234</id><snippet>&gt;&gt;&gt; train_as_dicts = [dict(r.iteritems()) for _, r in train.iterrows()]
&gt;&gt;&gt; train_as_dicts
[{'a': 'a', 'c': 'b', 'b': 0, 'd': 'e'},
 {'a': 'b', 'c': 'c', 'b': 1, 'd': 'e'},
 {'a': 'a', 'c': 'b', 'b': 1, 'd': 'f'}]
</snippet></ROW><ROW><id>15184234</id><snippet>&gt;&gt;&gt; from sklearn.feature_extraction import DictVectorizer

&gt;&gt;&gt; vectorizer = DictVectorizer()
&gt;&gt;&gt; vectorized_sparse = vectorizer.fit_transform(train_as_dicts)
&gt;&gt;&gt; vectorized_sparse
&lt;3x7 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
    with 12 stored elements in Compressed Sparse Row format&gt;

&gt;&gt;&gt; vectorized_array = vectorized_sparse.toarray()
&gt;&gt;&gt; vectorized_array
array([[ 1.,  0.,  0.,  1.,  0.,  1.,  0.],
       [ 0.,  1.,  1.,  0.,  1.,  1.,  0.],
       [ 1.,  0.,  1.,  1.,  0.,  0.,  1.]])
</snippet></ROW><ROW><id>15184234</id><snippet>&gt;&gt;&gt; vectorizer.get_feature_names()
['a=a', 'a=b', 'b', 'c=b', 'c=c', 'd=e', 'd=f']
</snippet></ROW><ROW><id>15184441</id><snippet>set_property()</snippet></ROW><ROW><id>15184441</id><snippet>set_style_property()</snippet></ROW><ROW><id>15184441</id><snippet>props</snippet></ROW><ROW><id>15184441</id><snippet>btn1.props.label = 'StackOverflow'</snippet></ROW><ROW><id>15184441</id><snippet>btn1.props.use_underline = False</snippet></ROW><ROW><id>15184441</id><snippet>props</snippet></ROW><ROW><id>15184441</id><snippet>allocation</snippet></ROW><ROW><id>15184441</id><snippet>btn1.allocation</snippet></ROW><ROW><id>15184447</id><snippet>eval</snippet></ROW><ROW><id>15184447</id><snippet>*</snippet></ROW><ROW><id>15184447</id><snippet>my_function</snippet></ROW><ROW><id>15184447</id><snippet>my_function(*eval(a))
</snippet></ROW><ROW><id>15184447</id><snippet>eval</snippet></ROW><ROW><id>15184666</id><snippet>\uxxxx</snippet></ROW><ROW><id>15184666</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; print('aar\u00f3nico')
aarónico
&gt;&gt;&gt; print(json.dumps('aar\u00f3nico'))
"aar\u00f3nico"
&gt;&gt;&gt; print(json.loads(json.dumps('aar\u00f3nico')))
aarónico
</snippet></ROW><ROW><id>15184666</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; print u'aar\u00f3nico'
aarónico
&gt;&gt;&gt; print(json.dumps(u'aar\u00f3nico'))
"aar\u00f3nico"
&gt;&gt;&gt; print(json.loads(json.dumps(u'aar\u00f3nico')))
aarónico
</snippet></ROW><ROW><id>15184666</id><snippet>"héllö"</snippet></ROW><ROW><id>15184666</id><snippet>"héllö"</snippet></ROW><ROW><id>15184666</id><snippet>&gt;&gt;&gt; print u'h\xe9ll\xf6'
héllö
</snippet></ROW><ROW><id>15184889</id><snippet>corpora.XCorpus</snippet></ROW><ROW><id>15184889</id><snippet>&gt;&gt;&gt; from gensim import corpora, models
&gt;&gt;&gt; import numpy.random
&gt;&gt;&gt; numpy.random.seed(10)
&gt;&gt;&gt; 
&gt;&gt;&gt; doc0 = [(0, 1), (1, 1)]
&gt;&gt;&gt; doc1 = [(0,1)]
&gt;&gt;&gt; doc2 = [(0, 1), (1, 1)]
&gt;&gt;&gt; doc3 = [(0, 3), (1, 1)]
&gt;&gt;&gt; corpus = [doc0,doc1,doc2,doc3]
&gt;&gt;&gt; dictionary = corpora.Dictionary(corpus)
&gt;&gt;&gt; 
&gt;&gt;&gt; tfidf = models.TfidfModel(corpus)
&gt;&gt;&gt; corpus_tfidf = tfidf[corpus]
&gt;&gt;&gt; 
&gt;&gt;&gt; lda = models.ldamodel.LdaModel(corpus_tfidf, id2word=dictionary, num_topics=3)
&gt;&gt;&gt; corpus_lda = lda[corpus]
&gt;&gt;&gt; corpus_lda.save('x.corpus_lda')
&gt;&gt;&gt; 
&gt;&gt;&gt; for i,j in enumerate(corpus_lda):
...   print j, corpus[i]
... 
[(0, 0.15441373560695118), (1, 0.56498524668290762), (2, 0.28060101771014123)] [(0, 1), (1, 1)]
[(0, 0.59512220481946487), (1, 0.22817873367464175), (2, 0.17669906150589348)] [(0, 1)]
[(0, 0.52219543266162705), (1, 0.15449347037173339), (2, 0.32331109696663957)] [(0, 1), (1, 1)]
[(0, 0.83364632205849853), (1, 0.086514534997754619), (2, 0.079839142943746944)] [(0, 3), (1, 1)]
&gt;&gt;&gt;
&gt;&gt;&gt; lda_corpus = corpora.BleiCorpus.load('x.corpus_lda')
&gt;&gt;&gt; for i,j in enumerate(lda_corpus):
...   print j, corpus[i]
... 
[(0, 0.154413735607), (1, 0.564985246683), (2, 0.280601017710)] [(0, 1), (1, 1)]
[(0, 0.595122204819), (1, 0.228178733675), (2, 0.176699061506)] [(0, 1)]
[(0, 0.522195432662), (1, 0.154493470372), (2, 0.323311096967)] [(0, 1), (1, 1)]
[(0, 0.833646322058), (1, 0.086514534998), (2, 0.079839142944)] [(0, 3), (1, 1)]
</snippet></ROW><ROW><id>15185035</id><snippet>!help(numpy.random.randn)</snippet></ROW><ROW><id>15185035</id><snippet>!</snippet></ROW><ROW><id>15185532</id><snippet>import threading

def work(): 
    threading.Timer(0.25, work).start()
    print "stackoverflow"

work()
</snippet></ROW><ROW><id>15186015</id><snippet>__month</snippet></ROW><ROW><id>15186015</id><snippet>Q</snippet></ROW><ROW><id>15186015</id><snippet>from django.db.models import Q

def month_in(months, field='date'):
    q = Q()
    for m in months:
       q |= Q(**{field + '__month': m})
    return q

Sample.objects.filter(month_in([2, 7, 9, 12]), date__year=2013)
</snippet></ROW><ROW><id>15186015</id><snippet>def month_in(year, months, field='date'):
    q = Q(**{field + '__year': year})
    for m in months:
       q |= Q(**{field + '__month': m})
    return q

Sample.objects.filter(month_in(2013, [2, 7, 9, 12]))
</snippet></ROW><ROW><id>15186015</id><snippet>Sample.objects.filter(month_in(2013, [2, 7, 9, 12]) | month_in(2012, [9, 11]))
</snippet></ROW><ROW><id>15186020</id><snippet>__init__</snippet></ROW><ROW><id>15186020</id><snippet>def __init__(self):
    self.rect = Ball.image.get_rect()
    self.speed = 0
    self.direction = [1, 1]
</snippet></ROW><ROW><id>15186063</id><snippet>(name, type, shape)</snippet></ROW><ROW><id>15186063</id><snippet>In [9]:

import numpy as np

x = np.array([((1.0,2,3), "C"), ((3.0,2,3), "H")], dtype=[('xyz', "float64", (3,)), ('type', object)])

In [11]:

np.delete(x, 0)

Out[11]:

array([([3.0, 2.0, 3.0], 'H')], 
      dtype=[('xyz', '&lt;f8', (3,)), ('type', 'O')])

In [12]:

x["xyz"]

Out[12]:

array([[ 1.,  2.,  3.],
       [ 3.,  2.,  3.]])

In [14]:

x["xyz"] + (10, 20, 30)

Out[14]:

array([[ 11.,  22.,  33.],
       [ 13.,  22.,  33.]])
</snippet></ROW><ROW><id>15186063</id><snippet>def translate(data,vec):
    tmp = data.copy()
    tmp["xyz"] += vect
    return tmp
</snippet></ROW><ROW><id>15186063</id><snippet>Pandas.DataFrame</snippet></ROW><ROW><id>15186172</id><snippet># generator expression over all values for keys that contain `key2`.
key2values = (v for lst in my_dicts.itervalues() 
                    for dct in lst
                        for k, v in dct.iteritems()
                            if 'key2' in k)

for value in key2values:
    # loops over `value2`, `value4`, `value6`, `value8` in an arbitrary order.
</snippet></ROW><ROW><id>15186172</id><snippet>&gt;&gt;&gt; key2values = (v for lst in my_dicts.itervalues() 
...                     for dct in lst
...                         for k, v in dct.iteritems()
...                             if 'key2' in k)
&gt;&gt;&gt; for value in key2values:
...     print value
... 
value2
value4
value6
value8
</snippet></ROW><ROW><id>15186172</id><snippet>key2values = (dct, k, v for lst in my_dicts.itervalues() 
                    for dct in lst
                        for k, v in dct.iteritems()
                            if 'key2' in k)
</snippet></ROW><ROW><id>15186172</id><snippet>for parent, key, value in key2values:
    # parent[key] is equal to value.
</snippet></ROW><ROW><id>15186944</id><snippet>scikits.audiolab</snippet></ROW><ROW><id>15186944</id><snippet>libsndfile</snippet></ROW><ROW><id>15186944</id><snippet>audiolab</snippet></ROW><ROW><id>15186944</id><snippet>PyPi</snippet></ROW><ROW><id>15186944</id><snippet>scikits.audiolab</snippet></ROW><ROW><id>15186944</id><snippet>libsndfile</snippet></ROW><ROW><id>15186992</id><snippet>%newobject</snippet></ROW><ROW><id>15186992</id><snippet>%typemap(newfree)</snippet></ROW><ROW><id>15186992</id><snippet>Foo *blah() {
   Foo *f = new Foo();
   return f;
}
</snippet></ROW><ROW><id>15186992</id><snippet>%newobject blah;
Foo *blah();
</snippet></ROW><ROW><id>15186992</id><snippet>%newobject ::blah();                   // Only applies to global blah
%newobject Object::blah(int,double);   // Only blah(int,double) in Object
%newobject *::copy;                    // Copy method in all classes
...
</snippet></ROW><ROW><id>15186992</id><snippet>%typemap(newfree) char * "free($1);";
...
%newobject strdup;
...
char *strdup(const char *s);
</snippet></ROW><ROW><id>15187052</id><snippet>isinstance()</snippet></ROW><ROW><id>15187052</id><snippet>isinstance(x, int)
</snippet></ROW><ROW><id>15187052</id><snippet>isinstance()</snippet></ROW><ROW><id>15187052</id><snippet>isinstance(x, (float, complex, int))
</snippet></ROW><ROW><id>15187269</id><snippet>self.dir_q.get()</snippet></ROW><ROW><id>15187269</id><snippet>self.stoprequest.set()</snippet></ROW><ROW><id>15187317</id><snippet>$PATH</snippet></ROW><ROW><id>15187317</id><snippet>.bash_profile</snippet></ROW><ROW><id>15187317</id><snippet> export PATH=`echo $PATH | cut -d":" -f1,2,4-`
</snippet></ROW><ROW><id>15187509</id><snippet>itertools.combinations</snippet></ROW><ROW><id>15187509</id><snippet>collections.Counter</snippet></ROW><ROW><id>15187509</id><snippet>for i, j in itertools.combinations(range(len(s.T)), 2):
    c = s[:, [i,j]]
    counts = collections.Counter(map(tuple,c))
    print 'columns {} and {}'.format(i,j)
    for k in sorted(counts):
        print 'Frequency of {} = {}/{}'.format(k, counts[k], len(c))
    print
</snippet></ROW><ROW><id>15187509</id><snippet>columns 0 and 1
Frequency of ('A', 'A') = 2/4
Frequency of ('G', 'L') = 1/4
Frequency of ('L', 'G') = 1/4

columns 0 and 2
Frequency of ('A', 'S') = 2/4
Frequency of ('G', 'T') = 1/4
Frequency of ('L', 'T') = 1/4

[...]
</snippet></ROW><ROW><id>15187553</id><snippet>x</snippet></ROW><ROW><id>15187553</id><snippet>y</snippet></ROW><ROW><id>15187553</id><snippet>'</snippet></ROW><ROW><id>15187553</id><snippet>FT(f(x, y), x) -&gt; f'(k, y)
FT(f'(k, y), y) -&gt; f''(k, w)
</snippet></ROW><ROW><id>15187553</id><snippet>f(x, y) -&gt; f'(k, y)</snippet></ROW><ROW><id>15187553</id><snippet>f'(k, y) -&gt; f''(k, w)</snippet></ROW><ROW><id>15187705</id><snippet>__init__</snippet></ROW><ROW><id>15187705</id><snippet>__class__</snippet></ROW><ROW><id>15187932</id><snippet>hdrs = ("A","B","C","D","E","F","G","H","% Done")
fmt_string = ''.join("%%-%is" % (len(h)+2) for h in hdrs)
print(fmt_string % hdrs)
print(fmt_string % tuple("-"*(len(h)+1) for h in hdrs))
</snippet></ROW><ROW><id>15188006</id><snippet>Page.objects.filter(chapter__book=my_book)
</snippet></ROW><ROW><id>15188171</id><snippet>arr.sort(key=operator.itemgetter('name'))
</snippet></ROW><ROW><id>15188326</id><snippet>python setup.py install
</snippet></ROW><ROW><id>15188326</id><snippet>pip install sqlalchemy
</snippet></ROW><ROW><id>15188326</id><snippet>&gt;&gt;&gt; from sqlalchemy import create_engine
&gt;&gt;&gt; engine = create_engine('mysql+mysqlconnector://myuser:mypassword@localhost/test')                                                                                                                        
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15188326</id><snippet>mysql+mysqlconnector</snippet></ROW><ROW><id>15188449</id><snippet>from django.conf.urls.defaults import *
from wkhtmltopdf.views import PDFTemplateView


urlpatterns = patterns('',
    # ...
    url(r'^pdf/$', PDFTemplateView.as_view(template_name='my_template.html',
                                           filename='my_pdf.pdf'), name='pdf'),
    # ...
)
</snippet></ROW><ROW><id>15188483</id><snippet>.replace(tzinfo=tz)</snippet></ROW><ROW><id>15188483</id><snippet>tz.localize()</snippet></ROW><ROW><id>15188483</id><snippet>aware = timezone.get_current_timezone().localize(self.dtstart)
</snippet></ROW><ROW><id>15188483</id><snippet>pytz</snippet></ROW><ROW><id>15188483</id><snippet>&gt;&gt;&gt; loc_dt = eastern.localize(datetime(2002, 10, 27, 6, 0, 0))
&gt;&gt;&gt; print(loc_dt.strftime(fmt))
2002-10-27 06:00:00 EST-0500
</snippet></ROW><ROW><id>15188483</id><snippet>from pytz import UTC

aware = UTC.localize(timezone.get_current_timezone())
dt = aware.astimezone(timezone.get_current_timezone()).strftime('%Y-%m-%d %H:%M')
</snippet></ROW><ROW><id>15188590</id><snippet>import numpy as np
my_grid =  np.zeros((5, 5))

parse = ["max","min","avg"]

d = {}
for arg in parse:
    d[arg] = my_grid
</snippet></ROW><ROW><id>15188877</id><snippet>volkswagen = tree.find('.//model[@id="Volkswagen"]')
</snippet></ROW><ROW><id>15188877</id><snippet>stereo</snippet></ROW><ROW><id>15188877</id><snippet>volkswagen.set('stereo', 'Blaupunkt')
</snippet></ROW><ROW><id>15188877</id><snippet>model</snippet></ROW><ROW><id>15188877</id><snippet>stereo</snippet></ROW><ROW><id>15188877</id><snippet>models_with_stereos = tree.findall('.//model[@stereo]')
</snippet></ROW><ROW><id>15188877</id><snippet>lxml</snippet></ROW><ROW><id>15188877</id><snippet>model</snippet></ROW><ROW><id>15188877</id><snippet>id="Volkswagen"</snippet></ROW><ROW><id>15188877</id><snippet>stereo</snippet></ROW><ROW><id>15188973</id><snippet>c = list(set(a).difference(set(b))
</snippet></ROW><ROW><id>15189023</id><snippet>Thread</snippet></ROW><ROW><id>15189023</id><snippet>args</snippet></ROW><ROW><id>15189023</id><snippet>t =  Thread (target = X, args = (ip,))
</snippet></ROW><ROW><id>15189023</id><snippet>t =  Thread (target = X, args = [ip])
</snippet></ROW><ROW><id>15189097</id><snippet>__init__</snippet></ROW><ROW><id>15189097</id><snippet>self</snippet></ROW><ROW><id>15189097</id><snippet>class Slot: #slot class&lt;------------------------------------------------
  def __init__(self,n):    
    self.U = [1,2,"gridPosition"] #1 up
    self.D = [2,1,"gridPosition"] #2 down
    self.L = [3,4,"gridPosition"] #3 left
    self.R = [4,3,"gridPosition"] #4 right
    self.handles = [U,D,L,R] #handles 0/1/2/3

    self.tileValue = 0; #value 0 - 8
    self.tilePosition = 0; #slot 1 - 9
    self.overallStrain = 0; # |0--&gt;+
</snippet></ROW><ROW><id>15189097</id><snippet>def __init__(self):
    self.slots = [Slot(i+1) for i in range(10)]

    print("\nprinting slot objects in list 'slot'\n");
    for slot in self.slots:
        print("slot number :%s" % slot.getPosition());
        print("slot value :%d" slot.getHandles());
</snippet></ROW><ROW><id>15189097</id><snippet>self.position</snippet></ROW><ROW><id>15189114</id><snippet>a = [(0, 0, 0), (1, 0, 0), (2, 0, 0), (3, 0, 0)]

def add_to_list(item1, item2, item3, the_list):
    the_list.append((item1, item2, item3))
    return sorted(the_list)    

print(add_to_list(0, 1, 0, a))
</snippet></ROW><ROW><id>15189285</id><snippet>self</snippet></ROW><ROW><id>15189285</id><snippet>None</snippet></ROW><ROW><id>15189285</id><snippet>def doSomething(self, a=None):
    if a is None:
        a = self.z
    self.z = 3
    self.b = a
</snippet></ROW><ROW><id>15189519</id><snippet>{% if messages %}
    {% for message in messages %}
        {{ message }}
    {% endfor %}
{% endif %}
</snippet></ROW><ROW><id>15189519</id><snippet>from django.contrib import messages
messages.success(request, 'Form submitted successfully')
</snippet></ROW><ROW><id>15189547</id><snippet>levle = level + 1
</snippet></ROW><ROW><id>15189547</id><snippet>self</snippet></ROW><ROW><id>15189547</id><snippet>self.set_level</snippet></ROW><ROW><id>15189547</id><snippet>set_level(self, self.next, level)
</snippet></ROW><ROW><id>15189547</id><snippet>self.next.set_level(level)
</snippet></ROW><ROW><id>15189547</id><snippet>level</snippet></ROW><ROW><id>15189547</id><snippet>__init__</snippet></ROW><ROW><id>15189547</id><snippet>self.next</snippet></ROW><ROW><id>15189547</id><snippet>self.left</snippet></ROW><ROW><id>15189581</id><snippet>val = serialA.readline()
</snippet></ROW><ROW><id>15189714</id><snippet>for arg in parse:
    grid_stat[arg] = my_grid.copy()
</snippet></ROW><ROW><id>15189714</id><snippet>for arg in parse:
    grid_stat[arg] = my_grid
</snippet></ROW><ROW><id>15189714</id><snippet>grid_stat</snippet></ROW><ROW><id>15189714</id><snippet>my_grid</snippet></ROW><ROW><id>15189714</id><snippet>id</snippet></ROW><ROW><id>15189714</id><snippet>is</snippet></ROW><ROW><id>15189714</id><snippet>&gt;&gt;&gt; id(my_grid)
4325774752
&gt;&gt;&gt; id(grid_stat['max'])
4325774752
&gt;&gt;&gt; id(grid_stat['avg'])
4325774752
&gt;&gt;&gt; id(grid_stat['min'])
4325774752
&gt;&gt;&gt; my_grid is grid_stat['max']
True
&gt;&gt;&gt; grid_stat['max'] is grid_stat['avg']
True
</snippet></ROW><ROW><id>15189919</id><snippet>#! /usr/bin/python3.2

def trackable (cls):
    cls._tracked = {}

    oSetter = cls.__setattr__
    def setter (self, k, v):
        try: self.initialized
        except: return oSetter (self, k, v)
        try: self.k
        except:
            if not self in self.__class__._tracked:
                self.__class__._tracked [self] = []
            self.__class__._tracked [self].append (k)
        return oSetter (self, k, v)
    cls.__setattr__ = setter

    oInit = cls.__init__
    def init (self, *args, **kwargs):
        o = oInit (self, *args, **kwargs)
        self.initialized = 42
        return o
    cls.__init__ = init

    oGetter = cls.__getattribute__
    def getter (self, k):
        if k == 'tracked': return self.__class__._tracked [self]
        return oGetter (self, k)
    cls.__getattribute__ = getter

    return cls

@trackable
class Team:
    def __init__ (self, name, region):
        self.name = name
        self.region = region

#set name and region during initialization
t = Team ('A', 'EU')

#set rank and ELO outside (hence trackable)
#in your "aggregate" functions
t.rank = 4 # a new team attribute
t.ELO = 14 # a new team attribute

#see witch attributes have been created after initialization
print (t.tracked)
</snippet></ROW><ROW><id>15189965</id><snippet>happy</snippet></ROW><ROW><id>15189965</id><snippet>return</snippet></ROW><ROW><id>15190160</id><snippet>### Suggested one runs the above code first.
### Unknowns we are interested in


est_centroid_one = mc.Uniform("est_centroid_one", 5000, 5050 )
est_centroid_two = mc.Uniform("est_centroid_two", 5000, 5050 )

est_sigma_one = mc.Uniform( "est_sigma_one", 0, 5 )
est_sigma_two = mc.Uniform( "est_sigma_two", 0, 5 )

est_height_one = mc.Uniform( "est_height_one", 0, 5 ) 
est_height_two = mc.Uniform( "est_height_two", 0, 5 ) 

#std deviation of the noise, converted to precision by tau = 1/sigma**2
precision= 1./mc.Uniform("std", 0, 1)**2

#Set up the model's relationships.

@mc.deterministic( trace = False) 
def est_profile_1(x = wavelength, centroid = est_centroid_one, sigma = est_sigma_one, height= est_height_one):
    return GaussFunc( x, height, centroid, sigma )


@mc.deterministic( trace = False) 
def est_profile_2(x = wavelength, centroid = est_centroid_two, sigma = est_sigma_two, height= est_height_two):
    return GaussFunc( x, height, centroid, sigma )


@mc.deterministic( trace = False )
def mean( profile_1 = est_profile_1, profile_2 = est_profile_2 ):
    return profile_1 + profile_2


observations = mc.Normal("obs", mean, precision, value = combined, observed = True)


model = mc.Model([est_centroid_one, 
              est_centroid_two, 
                est_height_one,
                est_height_two,
                est_sigma_one,
                est_sigma_two,
                precision])

#always a good idea to MAP it prior to MCMC, so as to start with good initial values
map_ = mc.MAP( model )
map_.fit()

mcmc = mc.MCMC( model )
mcmc.sample( 50000,40000 ) #try running for longer if not happy with convergence.
</snippet></ROW><ROW><id>15190160</id><snippet>profile1</snippet></ROW><ROW><id>15190160</id><snippet>profile2</snippet></ROW><ROW><id>15190191</id><snippet>''''echo hello from bash
exit
'''

print('hello from python')
</snippet></ROW><ROW><id>15190191</id><snippet>$ python polyglot
hello from python
$ bash polyglot
hello from bash
</snippet></ROW><ROW><id>15190257</id><snippet>Lua</snippet></ROW><ROW><id>15190257</id><snippet>io</snippet></ROW><ROW><id>15190328</id><snippet>../../</snippet></ROW><ROW><id>15190328</id><snippet>~/a/c/b</snippet></ROW><ROW><id>15190328</id><snippet>a</snippet></ROW><ROW><id>15190328</id><snippet>~/a</snippet></ROW><ROW><id>15190328</id><snippet>os.path.join</snippet></ROW><ROW><id>15190328</id><snippet>os.path.normpath</snippet></ROW><ROW><id>15190539</id><snippet>import re 

tu = ('This is my first regex python example '
      'yahooa yahoouuee bbbiirdd',

      'bbbiirdd',

      'fookirooksooktook',

      'crrsciencezxxxxxscienceokjjsciencq')

reg   = re.compile(r'([bcdfghj-np-tv-z])(\1?)')
dereg = re.compile('science([^aeiou])|([^aeiou])ook')

def Frepl(ma):
    g1,g2 = ma.groups()
    if g2:  return 'science' + g2
    else:   return g1 + 'ook'

def Fderepl(ma):
    g = ma.group(2)
    if g:  return g
    else:  return 2*ma.group(1)

for strt in tu:
    resu =   reg.sub(Frepl  , strt)
    bakk = dereg.sub(Fderepl, resu)
    print ('----------------------------------\n'
           'strt = %s\n'    'resu == %s\n'
           'bakk == %s\n'   'bakk == start : %s'
           % (strt, resu, bakk, bakk==strt))
</snippet></ROW><ROW><id>15190539</id><snippet>re.I</snippet></ROW><ROW><id>15190539</id><snippet>import re 

d = {'b':'BAR','c':'CORE','d':'DEAD','f':'FAN',
     'g':'GO','h':'HHH','j':'JIU','k':'KOAN',
     'l':'LOW','m':'MY','n':'NERD','p':'PI',
     'q':'QIM','r':'ROAR','s':'SING','t':'TIP',
     'v':'VIEW','w':'WAVE','x':'XOR',
     'y':'YEAR','z':'ZOO',
     'T':'tears','Y':'yearling','X':'xylophone'}

ded = dict((v,k) for k,v in d.iteritems())
print ded

tu = ('This is my first regex python example '
       'Yahooa yahoouuee bbbiirdd',

      'bbbiirdd',

      'fookirooksooktook',

      'crrsciencezxxxxxXscienceokjjsciencq')

reg   = re.compile(r'([bcdfghj-np-tv-zBCDFGHJ-NP-TV-Z])(\1?)')

othergr = '|'.join(ded.keys())
dereg = re.compile('science([^aeiouAEIOU])|(%s)' % othergr)

def Frepl(ma, d=d):
    g1,g2 = ma.groups()
    if g2:  return 'science' + g2
    else:   return d[g1]

def Fderepl(ma,ded=ded):
    g = ma.group(2)
    if g:  return ded[g]
    else:  return 2*ma.group(1)

for strt in tu:
    resu =   reg.sub(Frepl  , strt)
    bakk = dereg.sub(Fderepl, resu)
    print ('----------------------------------\n'
           'strt = %s\n'    'resu == %s\n'
           'bakk == %s\n'   'bakk == start : %s'
           % (strt, resu, bakk, bakk==strt))
</snippet></ROW><ROW><id>15190539</id><snippet>----------------------------------
strt = This is my first regex python example Yahooa yahoouuee bbbiirdd
resu == tearsHHHiSING iSING MYYEAR FANiROARSINGTIP ROAReGOeXOR PIYEARTIPHHHoNERD eXORaMYPILOWe yearlingaHHHooa YEARaHHHoouuee sciencebBARiiROARscienced
bakk == This is my first regex python example Yahooa yahoouuee bbbiirdd
bakk == start : True
----------------------------------
strt = bbbiirdd
resu == sciencebBARiiROARscienced
bakk == bbbiirdd
bakk == start : True
----------------------------------
strt = fookirooksooktook
resu == FANooKOANiROARooKOANSINGooKOANTIPooKOAN
bakk == fookirooksooktook
bakk == start : True
----------------------------------
strt = crrsciencezxxxxxXscienceokjjsciencq
resu == COREsciencerSINGCOREieNERDCOREeZOOsciencexsciencexXORxylophoneSINGCOREieNERDCOREeoKOANsciencejSINGCOREieNERDCOREQIM
bakk == crrsciencezxxxxxXscienceokjjsciencq
bakk == start : True
</snippet></ROW><ROW><id>15190646</id><snippet>raw_input()</snippet></ROW><ROW><id>15190646</id><snippet>input()</snippet></ROW><ROW><id>15190646</id><snippet>eval()</snippet></ROW><ROW><id>15190646</id><snippet>raw_input()</snippet></ROW><ROW><id>15190646</id><snippet>input()</snippet></ROW><ROW><id>15190646</id><snippet>eval()</snippet></ROW><ROW><id>15190860</id><snippet>threading.Thread(target=self.print_time("I am in print_time"))
</snippet></ROW><ROW><id>15190860</id><snippet>self.print_time</snippet></ROW><ROW><id>15190860</id><snippet>threading.Thread</snippet></ROW><ROW><id>15190860</id><snippet>t = threading.Thread(target=self.print_time, args=("I am in print_time",))
</snippet></ROW><ROW><id>15190931</id><snippet>awk</snippet></ROW><ROW><id>15190931</id><snippet>awk '$2 == "crop" { print $0 }' myfile
</snippet></ROW><ROW><id>15190931</id><snippet>$2</snippet></ROW><ROW><id>15190931</id><snippet>-V</snippet></ROW><ROW><id>15190931</id><snippet>!=</snippet></ROW><ROW><id>15190931</id><snippet>==</snippet></ROW><ROW><id>15190931</id><snippet>awk '$2 ~ /crop/ { print $0 }' myfile
</snippet></ROW><ROW><id>15190931</id><snippet>!~</snippet></ROW><ROW><id>15191124</id><snippet>str.replace()</snippet></ROW><ROW><id>15191124</id><snippet>a.replace("8", "", 1)
</snippet></ROW><ROW><id>15191124</id><snippet>1</snippet></ROW><ROW><id>15191124</id><snippet>'8'</snippet></ROW><ROW><id>15191124</id><snippet>&gt;&gt;&gt; a = "843845ab38"
&gt;&gt;&gt; a.replace("8", "", 1)
'43845ab38'
</snippet></ROW><ROW><id>15191183</id><snippet>step</snippet></ROW><ROW><id>15191183</id><snippet>linestyle</snippet></ROW><ROW><id>15191183</id><snippet>step</snippet></ROW><ROW><id>15191183</id><snippet>plot</snippet></ROW><ROW><id>15191183</id><snippet>import matplotlib.pyplot as plt

plt.plot(range(5), range(5), linestyle='--', drawstyle='steps')
plt.plot(range(5), range(5)[::-1], linestyle=':', drawstyle='steps')
plt.xlim([-1, 5])
plt.ylim([-1, 5])
</snippet></ROW><ROW><id>15191183</id><snippet>['steps', 'steps-pre', 'steps-mid', 'steps-post']</snippet></ROW><ROW><id>15191183</id><snippet>drawstyle</snippet></ROW><ROW><id>15191242</id><snippet>sets</snippet></ROW><ROW><id>15191242</id><snippet>dict</snippet></ROW><ROW><id>15191242</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; d.pop('foo')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: 'pop(): dictionary is empty'
</snippet></ROW><ROW><id>15191242</id><snippet>IndexError</snippet></ROW><ROW><id>15191405</id><snippet>from flask import make_response, redirect, url_for

response = make_response(redirect('/'))

lat = request.form['lat']
lon = request.form['lon']
response.set_cookie('lat', lat)
response.set_cookie('lon', lon)

return response
</snippet></ROW><ROW><id>15191405</id><snippet>lat = float(request.cookies['lat'])
lon = float(request.cookies['lon'])
</snippet></ROW><ROW><id>15191478</id><snippet>{% if %}</snippet></ROW><ROW><id>15191478</id><snippet>{% endif %}</snippet></ROW><ROW><id>15191478</id><snippet>&lt;select name="posts_per_page"&gt;                        
    {% for counter in range(5, 20, 5) %}
        &lt;option value="{{counter}}" {% if counter == g.blogOptions['posts_per_page']  %} selected="selected" {% endif %}&gt; {{ counter }}&lt;/option&gt;
    {% endfor %}
&lt;/select&gt;
</snippet></ROW><ROW><id>15191478</id><snippet>g.blogOptions['posts_per_page']</snippet></ROW><ROW><id>15191478</id><snippet>{% set posts_per_page = int(g.blogOptions['posts_per_page']) %}
&lt;select name="posts_per_page"&gt;                        
    {% for counter in range(5, 20, 5) %}
        &lt;option value="{{counter}}" {% if counter == posts_per_page  %} selected="selected" {% endif %}&gt; {{ counter }}&lt;/option&gt;
    {% endfor %}
&lt;/select&gt;
</snippet></ROW><ROW><id>15191503</id><snippet>Element.attrib</snippet></ROW><ROW><id>15191503</id><snippet>.attrib</snippet></ROW><ROW><id>15191503</id><snippet>&gt;&gt;&gt; elem = ET.Element('Level0', text='test text')
&gt;&gt;&gt; ET.tostring(elem)
'&lt;Level0 text="test text" /&gt;'
</snippet></ROW><ROW><id>15191503</id><snippet>**keywords</snippet></ROW><ROW><id>15191503</id><snippet>ElementTree.Element()</snippet></ROW><ROW><id>15191503</id><snippet>ET.Element('Level0', text='test text')

ET.Element('Level0', {'text': 'test text'})
</snippet></ROW><ROW><id>15191736</id><snippet>for i in letter_str:
    if  not(i in Alist):
        Alist.append(i)
    print(Alist))
</snippet></ROW><ROW><id>15191736</id><snippet>Set</snippet></ROW><ROW><id>15191736</id><snippet>aSet = set(letter_str)
</snippet></ROW><ROW><id>15191821</id><snippet>line.split()
</snippet></ROW><ROW><id>15191821</id><snippet>str.split()</snippet></ROW><ROW><id>15191821</id><snippet>&gt;&gt;&gt; '10      AccessibleComputing     0       381202555       2010-08-26T22:38:36Z    OlEnglish       7181920 #F3#    [[Help:Reverting|Reverted]] edits by [[Special:Contributions/76.28.186.133|76.28.186.133]] ([[User talk:76.28.186.133|talk]]) to last version by Gurch  #REDIRECT#F0#[[Computer#F0#accessibility]]#F0#{{R#F0#from#F0#CamelCase}}        lo15ponaybcg2sf49sstw9gdjmdetnk ,Computer_accessibility'.split()
['10', 'AccessibleComputing', '0', '381202555', '2010-08-26T22:38:36Z', 'OlEnglish', '7181920', '#F3#', '[[Help:Reverting|Reverted]]', 'edits', 'by', '[[Special:Contributions/76.28.186.133|76.28.186.133]]', '([[User', 'talk:76.28.186.133|talk]])', 'to', 'last', 'version', 'by', 'Gurch', '#REDIRECT#F0#[[Computer#F0#accessibility]]#F0#{{R#F0#from#F0#CamelCase}}', 'lo15ponaybcg2sf49sstw9gdjmdetnk', ',Computer_accessibility']
</snippet></ROW><ROW><id>15192095</id><snippet>O(n)</snippet></ROW><ROW><id>15192095</id><snippet>O(n)</snippet></ROW><ROW><id>15192095</id><snippet>O(n)</snippet></ROW><ROW><id>15192095</id><snippet>set</snippet></ROW><ROW><id>15192095</id><snippet>dict</snippet></ROW><ROW><id>15192095</id><snippet>key:value</snippet></ROW><ROW><id>15192095</id><snippet>sqlite3</snippet></ROW><ROW><id>15192095</id><snippet>":memory:"</snippet></ROW><ROW><id>15192095</id><snippet>con = sqlite3.connect(":memory:")
</snippet></ROW><ROW><id>15192363</id><snippet>x % b
</snippet></ROW><ROW><id>15192363</id><snippet>x // b</snippet></ROW><ROW><id>15192522</id><snippet>&gt;&gt;&gt; import pymunk
&gt;&gt;&gt; b = pymunk.Body()
&gt;&gt;&gt; b2 = pymunk.Body()
&gt;&gt;&gt; j = pymunk.PivotJoint(b,b2,(0,0))
&gt;&gt;&gt; s = pymunk.Circle(b,3)
&gt;&gt;&gt; b.constraints
set([&lt;pymunk.constraint.PivotJoint object at 0x02521890&gt;])
&gt;&gt;&gt; b.shapes
set([&lt;pymunk.Circle object at 0x025218F0&gt;])
</snippet></ROW><ROW><id>15192619</id><snippet>python test_prog.py --conf=sample
</snippet></ROW><ROW><id>15192619</id><snippet> SERVER    = rally1.rallydev.com  
 USER      = your_Rally_user_name@your_company.com
 PASSWORD  = your_Rally_password
 WORKSPACE = Your Rally Workspace 
 PROJECT   = Your Rally Project
</snippet></ROW><ROW><id>15192809</id><snippet>from scipy import signal
cor = signal.correlate2d (im1, im2)
</snippet></ROW><ROW><id>15192828</id><snippet># from django.contrib.auth.views import login
from django.contrib.auth import authenticate, logout, login
</snippet></ROW><ROW><id>15192860</id><snippet>import collections
import random
import bisect

def sample(xs, sample_size = None, replace=False, sample_probabilities = None):
    """Mimics the functionality of http://statistics.ats.ucla.edu/stat/r/library/bootstrap.htm sample()"""

    if not isinstance(xs, collections.Iterable):
        xs = range(xs)
    if not sample_size:
        sample_size = len(xs)            

    if not sample_probabilities:
        if replace:
            return [random.choice(xs) for _ in range(sample_size)]
        else:
            return random.sample(xs, sample_size)
    else:
        if replace:
            total, cdf = 0, []
            for x, p in zip(xs, sample_probabilities):
                total += p
                cdf.append(total)

            return [ xs[ bisect.bisect(cdf, random.uniform(0, total)) ] 
                    for _ in range(sample_size) ]
        else:            
            assert len(sample_probabilities) == len(xs)
            xps = list(zip(xs, sample_probabilities))           
            total = sum(sample_probabilities)
            result = []
            for _ in range(sample_size):
                # choose an item based on weights, and remove it from future iterations.
                # this is slow (N^2), a tree structure for xps would be better (NlogN)
                target = random.uniform(0, total)
                current_total = 0                
                for index, (x,p) in enumerate(xps):
                    current_total += p
                    if current_total &gt; target:
                        xps.pop(index)
                        result.append(x)
                        total -= p
                        break
            return result
</snippet></ROW><ROW><id>15192928</id><snippet>'a'</snippet></ROW><ROW><id>15192928</id><snippet>import h5py
with h5py.File('myfile.hdf5','w') as f:
    dset = f.create_dataset("MyDataset", (100, 100), 'i')
    dset[...] = 42

with h5py.File('myfile.hdf5','r+') as ff:
    dset = ff.create_group("MyGroup")
</snippet></ROW><ROW><id>15193026</id><snippet>numpy.c_[]</snippet></ROW><ROW><id>15193026</id><snippet>np.savetxt('myfile.txt', np.c_[x,y,z])
</snippet></ROW><ROW><id>15193039</id><snippet>f.write("%d %d %d/n"% (red[i], green[i],blue[i]))
</snippet></ROW><ROW><id>15193111</id><snippet>antialiased=True</snippet></ROW><ROW><id>15193111</id><snippet>x, y = np.mgrid[-1:1:100j, -1:1:100j]
contourf(x, y, x**2+y**2 + np.random.rand(100, 100)*0.1, 10, alpha=0.3, antialiased=True)
</snippet></ROW><ROW><id>15193375</id><snippet>mystuff</snippet></ROW><ROW><id>15193375</id><snippet>mystuff.append</snippet></ROW><ROW><id>15193375</id><snippet>append</snippet></ROW><ROW><id>15193375</id><snippet>mystuff</snippet></ROW><ROW><id>15193375</id><snippet>self</snippet></ROW><ROW><id>15193375</id><snippet>mystuff</snippet></ROW><ROW><id>15193375</id><snippet>split</snippet></ROW><ROW><id>15193375</id><snippet>split</snippet></ROW><ROW><id>15193375</id><snippet>str.split(str="", num=string.count(str))</snippet></ROW><ROW><id>15193501</id><snippet>file()</snippet></ROW><ROW><id>15193501</id><snippet>Content-Type: text/html</snippet></ROW><ROW><id>15193501</id><snippet>'application/pdf'</snippet></ROW><ROW><id>15193571</id><snippet>cmds.ls(sl=1, fl=1)
</snippet></ROW><ROW><id>15193870</id><snippet>def iflfactor(eq):
    """Return the "I'm feeling lucky" factored form of eq."""
    e = Mul(*[horner(e) if e.is_Add else e for e in
        Mul.make_args(factor_terms(expand(eq)))])
    r, e = cse(e)
    s = [ri[0] for ri in r]
    e = Mul(*[collect(ei.expand(), s) if ei.is_Add else ei for ei in
        Mul.make_args(e[0])]).subs(r)
    return e

&gt;&gt;&gt; iflfactor(eq)  # using your equation as eq
2*x*y*z*(x**2 + x*y + y**2 + (z - 3)*(x + y + z) + 3)
&gt;&gt;&gt; _.count_ops()
15
</snippet></ROW><ROW><id>15193870</id><snippet>&gt;&gt;&gt; factor_terms(x/(z+z*y)+x/z)
x*(1 + 1/(y + 1))/z
&gt;&gt;&gt; gcd_terms(x/(z+z*y)+x/z)
x*(y*z + 2*z)/(z*(y*z + z))
</snippet></ROW><ROW><id>15193901</id><snippet>bidf()</snippet></ROW><ROW><id>15193901</id><snippet>if g=="y":
    bid = bidf()
</snippet></ROW><ROW><id>15193951</id><snippet>even_num = [] # these should be at module level, but I'm not showing the class
odd_num = []  # so you'll have to imagine the indentation being correct

def odd_or_even(self):
    """(LinkNode) -&gt; ([object], [object])
    Return a pair of lists: (odd number, even number.
    """
    if self.item % 2 == 1:
        odd_num.append(self.item)
    else:
        even_num.append(self.item)

    if self.next is not None:
        self.next.odd_or_even()
</snippet></ROW><ROW><id>15193951</id><snippet>return</snippet></ROW><ROW><id>15193951</id><snippet>self</snippet></ROW><ROW><id>15193951</id><snippet>None</snippet></ROW><ROW><id>15193951</id><snippet>odd_num</snippet></ROW><ROW><id>15193951</id><snippet>even_num</snippet></ROW><ROW><id>15193951</id><snippet>odd_or_even</snippet></ROW><ROW><id>15193951</id><snippet>def odd_or_even(self):
    even_num = []
    odd_num = []

    if self.item % 2 == 1:
        odd_num.append(self.item)
    else:
        even_num.append(self.item)

    if self.next is not None:
        next_even, next_odd = self.next.odd_or_even()
        even_num.extend(next_even)
        odd_num.extend(next_odd)

    return even_num, odd_num
</snippet></ROW><ROW><id>15193951</id><snippet>def odd_or_even(self, lists=None):
    if lists is not None:
        even_num, odd_num = lists
    else:
        even_num = []
        odd_num = []

    if self.item % 2 == 1:
        odd_num.append(self.item)
    else:
        even_num.append(self.item)

    if self.next is not None:
        return self.next.odd_or_even((even_num, odd_num))
    else:
        return even_num, odd_num
</snippet></ROW><ROW><id>15193951</id><snippet>return</snippet></ROW><ROW><id>15193961</id><snippet>**</snippet></ROW><ROW><id>15193961</id><snippet>^</snippet></ROW><ROW><id>15193961</id><snippet>%</snippet></ROW><ROW><id>15193961</id><snippet>//</snippet></ROW><ROW><id>15194030</id><snippet>__eq__</snippet></ROW><ROW><id>15194030</id><snippet>False</snippet></ROW><ROW><id>15194030</id><snippet>.items()</snippet></ROW><ROW><id>15194030</id><snippet>in</snippet></ROW><ROW><id>15194030</id><snippet>getattr</snippet></ROW><ROW><id>15194055</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>15194055</id><snippet>from collections import defaultdict

invalid_pictures = defaultdict(list)
for picture in pictures:
    if picture_invalid(picture):
        invalid_pictures[picture.album.id].append(picture)
</snippet></ROW><ROW><id>15194089</id><snippet>server = "rally1.rallydev.com"
user = "user@company.com"
password = "topsecret"
workspace = "My Workspace"
project = "My Project"
rally = Rally(server, user, password, workspace=workspace, project=project)
rally.enableLogging("rally.history.showtasks")

fields    = "FormattedID,State,Name,WorkProduct,Name,LastUpdateDate",
criterion = 'Workproduct.Name = "My Tasks User Story"'

response = rally.get('Task', fetch=fields, query=criterion, order="LastUpdateDate Desc",pagesize=200, limit=400)

most_current_task = response.next()
print "%-8.8s  %-52.52s  %s" % (most_current_task.FormattedID, most_current_task.Name, most_current_task.State)
</snippet></ROW><ROW><id>15194124</id><snippet>desired_range</snippet></ROW><ROW><id>15194124</id><snippet>import csv

desired_range = 1000007
reader = csv.reader(open('fill_range_data.txt'), delimiter=' ')

data_map = dict()
for row in reader:
    frequency = int(row[0])
    value = int(row[1])

    data_map[value] = frequency

for i in range(desired_range):
    if i in data_map:
        print data_map[i], i
    else:
        print 0, i
</snippet></ROW><ROW><id>15194172</id><snippet>collections.Counter</snippet></ROW><ROW><id>15194172</id><snippet>import collections
infile = open(filename,'r')
grades = [g.strip() for g in infile.readlines()]
grade_counter = collections.Counter(grades)
for g, n in sorted(grade_counter.items()):
    print n, "students got", g
</snippet></ROW><ROW><id>15194242</id><snippet>results</snippet></ROW><ROW><id>15194242</id><snippet>&gt;&gt;&gt; results = [
...     {'name': 'Sam', 'code': 'CDZ', 'cat_name': 'category1', 'cat_code': 'GROUP1'},
...     {'name': 'James', 'code': 'CDF', 'cat_name': 'category1', 'cat_code': 'GROUP1'},
...     {'name': 'Ellie', 'code': 'CDT', 'cat_name': 'category2', 'cat_code': 'GROUP2'}] 
&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; D = defaultdict(list)
&gt;&gt;&gt; for item in results:
...  D[item['cat_code'], item['cat_name']].append((item['code'], item['name']))
... 
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pprint.pprint(dict(D))
{('GROUP1', 'category1'): [('CDZ', 'Sam'), ('CDF', 'James')],
 ('GROUP2', 'category2'): [('CDT', 'Ellie')]}
</snippet></ROW><ROW><id>15194512</id><snippet>numpy</snippet></ROW><ROW><id>15194512</id><snippet>numpy.random</snippet></ROW><ROW><id>15194512</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.random.uniform(-10,10)
7.435802529756465
&gt;&gt;&gt; np.random.uniform(-10,10,size=(2,3))
array([[-0.40137954, -1.01510912, -0.41982265],
       [-8.12662965,  6.25365713, -8.093228  ]])
&gt;&gt;&gt; np.random.uniform(-10,10,size=(1,5,1))
array([[[-3.31802611],
        [ 4.60814984],
        [ 1.82297046],
        [-0.47581074],
        [-8.1432223 ]]])
</snippet></ROW><ROW><id>15194512</id><snippet>size</snippet></ROW><ROW><id>15194595</id><snippet>for l in _lst:
    l.append(7)
</snippet></ROW><ROW><id>15194683</id><snippet>def check_name(x):
   names_to_check = ('Jenson','Amra','McCay','Spinner','Jones')
   for i in names_to_check:
       if i == x:
          return True
   return False
</snippet></ROW><ROW><id>15194683</id><snippet>x = 'Jenson'</snippet></ROW><ROW><id>15194683</id><snippet>x == ('Jenson' or 'Amra' or 'McCay' or 'Jones')</snippet></ROW><ROW><id>15194683</id><snippet>Jenson</snippet></ROW><ROW><id>15194683</id><snippet>True</snippet></ROW><ROW><id>15194683</id><snippet>('Jenson' or 'Amra' or 'McCay' or 'Jones')</snippet></ROW><ROW><id>15194683</id><snippet>Jenson</snippet></ROW><ROW><id>15194683</id><snippet>Amra</snippet></ROW><ROW><id>15194683</id><snippet>McCay</snippet></ROW><ROW><id>15194683</id><snippet>Jones</snippet></ROW><ROW><id>15194683</id><snippet>True</snippet></ROW><ROW><id>15194683</id><snippet>Jenson</snippet></ROW><ROW><id>15194683</id><snippet>True</snippet></ROW><ROW><id>15194683</id><snippet>Jenson</snippet></ROW><ROW><id>15194683</id><snippet>Jenson</snippet></ROW><ROW><id>15194683</id><snippet>&gt;&gt;&gt; ('a' or 'b' or 'c')
'a'
&gt;&gt;&gt; ('b' or 'a' or 'c')
'b'
&gt;&gt;&gt; ('' or '' or 'a')
'a'
&gt;&gt;&gt; (0 or 0 or 1)
1
&gt;&gt;&gt; (False or False or True)
True
</snippet></ROW><ROW><id>15194683</id><snippet>'a'</snippet></ROW><ROW><id>15194683</id><snippet>False</snippet></ROW><ROW><id>15194683</id><snippet>'a'</snippet></ROW><ROW><id>15194683</id><snippet>0</snippet></ROW><ROW><id>15194683</id><snippet>1</snippet></ROW><ROW><id>15194701</id><snippet>[^a-zA-Z\d\s]
</snippet></ROW><ROW><id>15195370</id><snippet>yes</snippet></ROW><ROW><id>15195370</id><snippet>&lt;for loop:&gt;
    os.system('yes Y | &lt;external command&gt;')
</snippet></ROW><ROW><id>15195460</id><snippet>inputready</snippet></ROW><ROW><id>15195460</id><snippet>outputready</snippet></ROW><ROW><id>15195460</id><snippet>exceptready</snippet></ROW><ROW><id>15195460</id><snippet>self.inputs</snippet></ROW><ROW><id>15195460</id><snippet>self.outputs</snippet></ROW><ROW><id>15195460</id><snippet>outputready</snippet></ROW><ROW><id>15195460</id><snippet>self.outputs</snippet></ROW><ROW><id>15195804</id><snippet>numpy.exp()</snippet></ROW><ROW><id>15195804</id><snippet>Decimal.decimal.exp()</snippet></ROW><ROW><id>15195804</id><snippet>&gt;&gt;&gt; x = np.linspace(-2*np.pi, 2*np.pi, 100)
&gt;&gt;&gt; xx = x + 1j * x[:, np.newaxis] # a + ib over complex plane
&gt;&gt;&gt; out = np.exp(xx)
</snippet></ROW><ROW><id>15195804</id><snippet>&gt;&gt;&gt; decimal.Decimal(1).exp()
Decimal('2.718281828459045235360287471')
</snippet></ROW><ROW><id>15195866</id><snippet>glob</snippet></ROW><ROW><id>15195866</id><snippet>import glob

dir_to_search = '/some/path/to/images/'

files_in_dir = glob.glob("{}{}".format(dir_to_search,'*.jpg'))

list_of_files = ['1.jpg','2.jpg','3.jpg']

missing_files = [x for x in list_of_files if x not in files_in_dir]
</snippet></ROW><ROW><id>15195942</id><snippet>def maskWord(state, word, guess):
    state = list(state)
    for i in range(len(word)):
        if word[i] == guess:
             state[i] = guess
    return "".join(state)


# Lets test if it works..:
word = "electricity"
state = "-" * len(word)
tries = 0

play = True
while play:
    if tries == len(word)*2: 
        print "Fail..."; 
        play = False
    guess = raw_input("Guess: ")
    tries +=1
    state = maskWord(state, word, guess)
    print state
    if maskWord(state, word, guess) == word:  
        print "WIN, WIN!!"; 
        play = False
</snippet></ROW><ROW><id>15196097</id><snippet>import re

text = """
    I also found another solution using 
    regex, but I'm still a novice and 
    really can't understand that solution. 
    Any help would be appreciated.
"""

print re.sub(r'\b\w{4}\b', 'xxxx', text)
</snippet></ROW><ROW><id>15196097</id><snippet>\b</snippet></ROW><ROW><id>15196097</id><snippet>\w{4}</snippet></ROW><ROW><id>15196097</id><snippet>a-z</snippet></ROW><ROW><id>15196097</id><snippet>A-Z</snippet></ROW><ROW><id>15196097</id><snippet>0-9</snippet></ROW><ROW><id>15196097</id><snippet>_</snippet></ROW><ROW><id>15196097</id><snippet>\b</snippet></ROW><ROW><id>15196097</id><snippet>I xxxx found another solution using 
regex, but I'm still a novice and 
really can't understand xxxx solution. 
Any xxxx would be appreciated.
</snippet></ROW><ROW><id>15196248</id><snippet>import os

def file_data_and_path(filename):
    if os.path.isfile(filename):
        path = os.path.dirname(filename)
        with open(filename,"rU") as f:
            lines = f.readlines()
        return lines,path
    else:
        print "Invalid File Path, File Doesn't exist"
        return None,None

msg = 'Absolute Path to file: '
f_name = raw_input(msg).strip()

lines,path = file_data_and_path(f_name)
if lines != None and path != None:
    for line in lines:
        print lines
    print 'Path:',path
</snippet></ROW><ROW><id>15196410</id><snippet>self</snippet></ROW><ROW><id>15196410</id><snippet>def deco(func):
    def wrapper(self, *args, **kwargs):
        print "I am the decorator, I know that self is", self, "and I can do whatever I want with it!"
        print "I also got other args:", args, kwargs
        func(self)
    return wrapper

class Foo(object):
    @deco
    def meth(self):
        print "I am the method, my self is", self
</snippet></ROW><ROW><id>15196410</id><snippet>&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.meth()
I am the decorator, I know that self is &lt;__main__.Foo object at 0x0000000002BCBE80&gt; and I can do whatever I want with it!
I also got other args: () {}
I am the method, my self is &lt;__main__.Foo object at 0x0000000002BCBE80&gt;
&gt;&gt;&gt; f.meth('blah', stuff='crud')
I am the decorator, I know that self is &lt;__main__.Foo object at 0x0000000002BCBE80&gt; and I can do whatever I want with it!
I also got other args: (u'blah',) {'stuff': u'crud'}
I am the method, my self is &lt;__main__.Foo object at 0x0000000002BCBE80&gt;
</snippet></ROW><ROW><id>15196428</id><snippet>.tar.gz</snippet></ROW><ROW><id>15196428</id><snippet>db48</snippet></ROW><ROW><id>15196428</id><snippet>/opt/local/include/db48</snippet></ROW><ROW><id>15196428</id><snippet>/opt/local/lib/db48</snippet></ROW><ROW><id>15196428</id><snippet>bsddb3</snippet></ROW><ROW><id>15196428</id><snippet>python setup.py --berkeley-db-incdir=/opt/local/include/db48 --berkeley-db-libdir=/opt/local/lib/db48 install
</snippet></ROW><ROW><id>15196428</id><snippet>bsddb3</snippet></ROW><ROW><id>15196428</id><snippet>bsddb</snippet></ROW><ROW><id>15196428</id><snippet>bsddb3</snippet></ROW><ROW><id>15196536</id><snippet>str.replace("'","\\'")
</snippet></ROW><ROW><id>15196553</id><snippet>import operator

def apply_a(func):
    def inner(self, other):
        return Foo(func(self.a, other.a))
    return inner

class Foo(object):
    def __init__(self, a=0):
        self.a = a

for name in ['__add__','__mul__','__sub__']:
    setattr(Foo, name, apply_a(getattr(operator, name)))
</snippet></ROW><ROW><id>15196684</id><snippet>class node:
    #Construction of Node with component,status and children
    def _init_(self,component=None,status=None,children=None):
        self.component = component
        self.status = status
        if children is None:
            self.children = [] 
        else:
            self.children = children

#Construction of tree through recursion            
class implementation:
    def buildnode(self,ob):
        node1= node()
        node1.component=ob['component']
        node1.status=ob['status']
        node1.children=[]
        print 'component',node1.component,'','status',node1.status
        for children in ob['children']:
            node1.children.append(self.buildnode(children)) 

        return node1

#Building Json object from text file            
class start:
    import json

    f=open("json_file.txt")
    data=json.load(f)
    builder = implementation()
    builder.buildnode(data)
</snippet></ROW><ROW><id>15196684</id><snippet>component A  status 0
component AA  status 0
component AAA  status 0
component AAB  status 0
component AB  status 0
component ABA  status 0
component ABB  status 0
</snippet></ROW><ROW><id>15196684</id><snippet>dictionary['key']</snippet></ROW><ROW><id>15196684</id><snippet>.append()</snippet></ROW><ROW><id>15196684</id><snippet>.add()</snippet></ROW><ROW><id>15197274</id><snippet>data</snippet></ROW><ROW><id>15197274</id><snippet>indices</snippet></ROW><ROW><id>15197274</id><snippet>def sparse_row_normalize(sps_mat) :
    if sps_mat.format != 'csc' :
        msg = 'Can only row-normalize in place with csc format, not {0}.'
        msg = msg.format(sps_mat.format)
        raise ValueError(msg)
    row_norm = np.sqrt(np.bincount(sps_mat.indices, weights=mat.data * mat_data))
    sps_mat.data /= np.take(row_norm, sps_mat.indices)
</snippet></ROW><ROW><id>15197274</id><snippet>&gt;&gt;&gt; mat = scipy.sparse.rand(4, 4, density=0.5, format='csc')
&gt;&gt;&gt; mat.toarray()
array([[ 0.        ,  0.        ,  0.58931687,  0.31070526],
       [ 0.24024639,  0.02767106,  0.22635696,  0.85971295],
       [ 0.        ,  0.        ,  0.13613897,  0.        ],
       [ 0.        ,  0.13766507,  0.        ,  0.        ]])
&gt;&gt;&gt; mat.toarray() / np.sqrt(np.sum(mat.toarray()**2, axis=1))[:, None]
array([[ 0.        ,  0.        ,  0.88458487,  0.46637926],
       [ 0.26076366,  0.03003419,  0.24568806,  0.93313324],
       [ 0.        ,  0.        ,  1.        ,  0.        ],
       [ 0.        ,  1.        ,  0.        ,  0.        ]])
&gt;&gt;&gt; sparse_row_normalize(mat)
&gt;&gt;&gt; mat.toarray()
array([[ 0.        ,  0.        ,  0.88458487,  0.46637926],
       [ 0.26076366,  0.03003419,  0.24568806,  0.93313324],
       [ 0.        ,  0.        ,  1.        ,  0.        ],
       [ 0.        ,  1.        ,  0.        ,  0.        ]])
</snippet></ROW><ROW><id>15197274</id><snippet>In [2]: mat = scipy.sparse.rand(10000, 10000, density=0.005, format='csc')

In [3]: mat
Out[3]: 
&lt;10000x10000 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
    with 500000 stored elements in Compressed Sparse Column format&gt;

In [4]: %timeit sparse_row_normalize(mat)
100 loops, best of 3: 14.1 ms per loop
</snippet></ROW><ROW><id>15197542</id><snippet>dict2 = {}
listElem = []
for key,value in dict1.iteritems():
    for listelem_dict in value:
        for sub_k, sub_v in listelem_dict.iteritems():
            if sub_k.startswith(('key1','key3')) and sub_v == '':
                continue
            else:
                listElem.append(listelem_dict)
                break
        break
    dict2[key] = listElem
print dict2
</snippet></ROW><ROW><id>15197542</id><snippet>dict1 = {"A": [
                     { 'key1 a' : 'value1',
                       'key2 a' : 'A',
                       'key3 a' : 'xyz'
                     },

                     { 'key1 a' : '',
                       'key2 a' : 'B',
                       'key3 a' : '' 
                     },

                     { 'key1 a' : 'value3',  
                       'key2 a' : 'value4',
                       'key3 a' : 'xyz' 
                     }
              ],
         "B": [
                     { 'key1 b' : 'value1',
                       'key2 b' : 'A',
                       'key3 b' : 'xyz'
                     },

                     { 'key1 b' : '',
                       'key2 b' : 'C',
                       'key3 b' : '' 
                     },

                     { 'key1 b' : 'value3',  
                       'key2 b' : 'value4',
                       'key3 b' : 'xyz' 
                     }
              ]
        }
</snippet></ROW><ROW><id>15197585</id><snippet>In [1]: from mayavi import mlab

In [2]: import numpy as np

In [3]: mlab.plot3d(np.random.rand(10), np.random.rand(10), np.random.rand(10))
Out[3]: &lt;mayavi.modules.surface.Surface at 0x2a4eade0&gt;

In [4]: mlab.plot3d(np.random.rand(10), np.random.rand(10), np.random.rand(10))
Out[4]: &lt;mayavi.modules.surface.Surface at 0x28218ab0&gt;

In [5]: mlab.plot3d(np.random.rand(10), np.random.rand(10), np.random.rand(10))
Out[5]: &lt;mayavi.modules.surface.Surface at 0x2a51db40&gt;

In [6]: mlab.plot3d(np.random.rand(10), np.random.rand(10), np.random.rand(10))
Out[6]: &lt;mayavi.modules.surface.Surface at 0x2a840bd0&gt;
</snippet></ROW><ROW><id>15197585</id><snippet>figure</snippet></ROW><ROW><id>15197697</id><snippet>return HttpResponseRedirect(reverse('foo-direct')
</snippet></ROW><ROW><id>15197697</id><snippet>wo_id</snippet></ROW><ROW><id>15197697</id><snippet>wo_id</snippet></ROW><ROW><id>15197697</id><snippet>args</snippet></ROW><ROW><id>15197697</id><snippet>kwargs</snippet></ROW><ROW><id>15197697</id><snippet>name</snippet></ROW><ROW><id>15197697</id><snippet>args</snippet></ROW><ROW><id>15197697</id><snippet>kwargs</snippet></ROW><ROW><id>15197697</id><snippet>name</snippet></ROW><ROW><id>15197697</id><snippet>reverse</snippet></ROW><ROW><id>15197698</id><snippet>datamap = eval(raw_input('Provide some data here: ')</snippet></ROW><ROW><id>15197698</id><snippet>eval</snippet></ROW><ROW><id>15197698</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>15197698</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>15197698</id><snippet>eval</snippet></ROW><ROW><id>15197895</id><snippet>from Tkinter import *
main = Tk() #New Tk window
variable = 0

def function():
    global variable
    variable = 1
    newThing()

def newThing(): 
   global variable
   if variable==1:
       Checkbutton(main, text="test").pack()
   variable = 0

Button(main, text="Change", command=function).pack()
main.mainloop()
</snippet></ROW><ROW><id>15198062</id><snippet>subprocess</snippet></ROW><ROW><id>15198062</id><snippet>process.wait()</snippet></ROW><ROW><id>15198062</id><snippet>process = subprocess.Popen(...)</snippet></ROW><ROW><id>15198062</id><snippet>subprocess.call</snippet></ROW><ROW><id>15198062</id><snippet>Popen</snippet></ROW><ROW><id>15198062</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>15198062</id><snippet>Popen</snippet></ROW><ROW><id>15198200</id><snippet>set.union()</snippet></ROW><ROW><id>15198200</id><snippet>set_update_internal()</snippet></ROW><ROW><id>15198200</id><snippet>set</snippet></ROW><ROW><id>15198200</id><snippet>/* Do one big resize at the start, rather than
 * incrementally resizing as we insert new keys.  Expect
 * that there will be no (or few) overlapping keys.
 */
</snippet></ROW><ROW><id>15198200</id><snippet>set</snippet></ROW><ROW><id>15198200</id><snippet>set</snippet></ROW><ROW><id>15198200</id><snippet>In [20]: rhs = list(range(1000))

In [21]: %timeit set().union(rhs)
10000 loops, best of 3: 30 us per loop

In [22]: rhs = set(range(1000))

In [23]: %timeit set().union(rhs)
100000 loops, best of 3: 14 us per loop
</snippet></ROW><ROW><id>15198200</id><snippet>set</snippet></ROW><ROW><id>15198200</id><snippet>rhs</snippet></ROW><ROW><id>15198527</id><snippet>numpy.append</snippet></ROW><ROW><id>15198527</id><snippet>np.diff</snippet></ROW><ROW><id>15198527</id><snippet>np.diff(np.unique(a))</snippet></ROW><ROW><id>15198527</id><snippet>In [1]: import numpy as np

In [2]: a = np.random.randint(0,100,size=50)

In [4]: np.unique(a)
Out[4]: 
array([ 0,  2,  3,  5,  7,  8, 15, 18, 20, 22, 23, 27, 30, 31, 32, 33, 37,
       38, 42, 43, 45, 48, 49, 57, 59, 62, 65, 70, 74, 75, 76, 78, 79, 80,
       83, 84, 88, 91, 93, 94, 96, 98])

In [5]: np.diff(np.unique(a))
Out[5]: 
array([2, 1, 2, 2, 1, 7, 3, 2, 2, 1, 4, 3, 1, 1, 1, 4, 1, 4, 1, 2, 3, 1, 8,
       2, 3, 3, 5, 4, 1, 1, 2, 1, 1, 3, 1, 4, 3, 2, 1, 2, 2])

In [6]: np.diff(np.unique(a)).min()
Out[6]: 1
</snippet></ROW><ROW><id>15198589</id><snippet>servers = []
for row in results:
   result = {}
   result['server_name'] = row[1])
   p = calculations_metric (core_number, clock_speed, ram, hdd, video_card)
   result['server_price'] = p
   servers.append(result)
</snippet></ROW><ROW><id>15198654</id><snippet>class Button(QPushButton):
    def __init__(self, text, parent, TextObject):
        super().__init__(text, parent=parent or None)
        self.setSizePolicy ( QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.clicked.connect(TextObject.SLOT_TextInsert('%s' %(text)))
</snippet></ROW><ROW><id>15198729</id><snippet>float_time</snippet></ROW><ROW><id>15198729</id><snippet>fields.float</snippet></ROW><ROW><id>15198729</id><snippet>float_time</snippet></ROW><ROW><id>15198729</id><snippet>8:30</snippet></ROW><ROW><id>15198729</id><snippet>8.5</snippet></ROW><ROW><id>15198729</id><snippet>_columns: {
    'duration': fields.float('Duration (in hours)'),
}
</snippet></ROW><ROW><id>15198729</id><snippet>&lt;field name="duration" widget="float_time"/&gt;
</snippet></ROW><ROW><id>15198729</id><snippet>project</snippet></ROW><ROW><id>15198764</id><snippet>List Comprehension</snippet></ROW><ROW><id>15198764</id><snippet>for offset in offsets2:
    _tmp = []
    for dx, dy in offset:
        _tmp.append((int(x + lane.width * dx), 
                     int(y + self.canvas.row_height * dy))
    offset = _tmp
</snippet></ROW><ROW><id>15198764</id><snippet>offset</snippet></ROW><ROW><id>15198764</id><snippet>for dx, dy in offset</snippet></ROW><ROW><id>15198764</id><snippet>for coord in offset:
    if len(coord) != 2:
        raise ValueError
    dx = coord[0]
    dy = coord[1]
    ...
</snippet></ROW><ROW><id>15198886</id><snippet>import re

invalid_escape = re.compile(r'\\[0-7]{1,3}')  # up to 3 digits for byte values up to FF

def replace_with_byte(match):
    return chr(int(match.group(0)[1:], 8))

def repair(brokenjson):
    return invalid_escape.sub(replace_with_byte, brokenjson)
</snippet></ROW><ROW><id>15198886</id><snippet>&gt;&gt;&gt; data1 = r"""{"search engine":"Google","_n":"search engine hit","_p":"z392cpdpnm6silblq5mac8kiugq=","search terms":"happy new year animation 1920\303\2271080 hd","_t":1356390128}"""
&gt;&gt;&gt; json.loads(repair(data1))
{u'_n': u'search engine hit', u'search terms': u'happy new year animation 1920\xd71080 hd', u'_p': u'z392cpdpnm6silblq5mac8kiugq=', u'_t': 1356390128, u'search engine': u'Google'}
&gt;&gt;&gt; print json.loads(repair(data1))['search terms']
happy new year animation 1920×1080 hd
&gt;&gt;&gt; data2 = r"""{"search engine":"Google","_n":"ad campaign hit","_p":"byskpczsw6sorbmzqi0tk1uimgw=","search terms":"\331\203\330\261\330\252\331\207 \331\201\331\212\330\257\331\212\330\244\331\211 \330\256\331\212\331\204\330\247\330\255\331\211 \331\203\331\210\330\261\330\257\331\211","_t":1356483052}"""
&gt;&gt;&gt; json.loads(repair(data2)){u'_n': u'ad campaign hit', u'search terms': u'\u0643\u0631\u062a\u0647 \u0641\u064a\u062f\u064a\u0624\u0649 \u062e\u064a\u0644\u0627\u062d\u0649 \u0643\u0648\u0631\u062f\u0649', u'_p': u'byskpczsw6sorbmzqi0tk1uimgw=', u'_t': 1356483052, u'search engine': u'Google'}
&gt;&gt;&gt; print json.loads(repair(data2))['search terms']
كرته فيديؤى خيلاحى كوردى
</snippet></ROW><ROW><id>15199379</id><snippet>bitext = [[sentence.strip().split() for sentence in pair if len(sentence) &lt; 100] for pair in zip(open(c_data), open(e_data)) [:opts.num_sents]]
</snippet></ROW><ROW><id>15199379</id><snippet>bitext = []
for i, pair in enumerate(zip(open(c_data), open(e_data))):
    if i &lt; opts.num_sents:
        sentence_pair = []
        for sentence in pair:
            if len(sentence) &lt; 100:
                sentence_pair.append(sentence.strip().split())
        if len(sentence_pair) &gt; 1:  # ie both sentences are &lt; 100
            bitext.append(sentence_pair)
</snippet></ROW><ROW><id>15199379</id><snippet>&gt; 100</snippet></ROW><ROW><id>15199379</id><snippet>if len(sentence) &lt; 100:
</snippet></ROW><ROW><id>15199628</id><snippet>fun = lambda x: x**2 # Example function
N = 10 # Number of data points
x = np.linspace(0., 200., N) # Creates an array of N points
bins = fun(x) # Applies fun to all values in array x
</snippet></ROW><ROW><id>15199927</id><snippet>print t.search.tweets(q='hello', count=3, until='2013-03-01')
</snippet></ROW><ROW><id>15200132</id><snippet>def strict(fun):
    # inspect annotations and check types on call

@strict
def funcA(a: int, b: int) -&gt; int:
    return a + b 
</snippet></ROW><ROW><id>15200296</id><snippet>author = Author(first_name = first_name,last_name = last_name,email=email,age=age)
author=author.save()
</snippet></ROW><ROW><id>15200296</id><snippet>save()</snippet></ROW><ROW><id>15200296</id><snippet>author = Author(first_name = first_name,last_name = last_name,email=email,age=age)
author.save()
book.author = author
book.save()
</snippet></ROW><ROW><id>15200296</id><snippet>book.author</snippet></ROW><ROW><id>15200296</id><snippet>def books(self):
    return Book.objects.filter(author=self)
</snippet></ROW><ROW><id>15200296</id><snippet>author.book_set.all()
</snippet></ROW><ROW><id>15200339</id><snippet>from kivy.app import App
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.dropdown import DropDown
from kivy.uix.button import Button
from kivy.uix.textinput import TextInput
from kivy.properties import ListProperty, StringProperty

import re

from kivy.lang import Builder

Builder.load_string('''
&lt;MainView&gt;:
    ComboEdit:
        size_hint: .5, .3
        pos_hint: {'center':(.5, .5)}
        # `args` is the keyword for arguments passed to `on_text` in kv language
        on_text: root.on_text(self, args[1])
''')

class ComboEdit(TextInput):
    '''
    This class defines a Editable Combo-Box in the traditional sense
    that shows it's options 
    '''

    options = ListProperty(('', ))
    '''
    :data:`options` defines the list of options that will be displayed when
    touch is released from this widget.
    '''

    def __init__(self, **kw):
        ddn = self.drop_down = DropDown()
        ddn.bind(on_select=self.on_select)
        super(ComboEdit, self).__init__(**kw)

    def on_options(self, instance, value):
        ddn = self.drop_down
        # clear old options
        ddn.clear_widgets()
        for option in value:
            # create a button for each option
            but = Button(text=option,
                        size_hint_y=None,
                        height='36sp',
                        # and make sure the press of the button calls select
                        # will results in calling `self.on_select`
                        on_release=lambda btn: ddn.select(btn.text))
            ddn.add_widget(but)

    def on_select(self, instance, value):
        # on selection of Drop down Item... do what you want here
        # update text of selection to the edit box
        self.text = value

class MainView(FloatLayout):

    rtsstr = StringProperty("".join(("Substrate1,,,Substrate1,,,Substrate1,,,",
                            "Substrate1,,,Substrate1,,,Substrate_coating",
                            ",,,silicon,,,silicon_Substrate,,,substrate_",
                            "silicon,,,")))

    def on_text(self, instance, value):
        if value == '':
            instance.options=[]
        else:
            match = re.findall("(?&lt;=,{3})(?:(?!,{3}).)*?%s.*?(?=,{3})" % value,\
                                self.rtsstr, re.IGNORECASE)
            #using a set to remove duplicates, if any.
            instance.options = list(set(match))
        instance.drop_down.open(instance)

class TestApp(App):

    def build(self):
        return MainView()

if __name__ == '__main__':
    TestApp().run()
</snippet></ROW><ROW><id>15200385</id><snippet>def get_nans_blocks_length(a):
    """
    Returns 1D length of np.nan s block in sequence depth wise (last axis).
    """
    nan_mask = np.isnan(a)
    start_nans_mask = np.concatenate((np.resize(nan_mask[...,0],a.shape[:-1]+(1,)),
                                 np.logical_and(np.logical_not(nan_mask[...,:-1]), nan_mask[...,1:])
                                 ), axis=a.ndim-1)
    stop_nans_mask = np.concatenate((np.logical_and(nan_mask[...,:-1], np.logical_not(nan_mask[...,1:])),
                                np.resize(nan_mask[...,-1], a.shape[:-1]+(1,))
                                ), axis=a.ndim-1)

    start_idxs = np.where(start_nans_mask)
    stop_idxs = np.where(stop_nans_mask)
    return stop_idxs[-1] - start_idxs[-1] + 1
</snippet></ROW><ROW><id>15200385</id><snippet>a = np.array([
        [1, np.nan, np.nan, np.nan],
        [np.nan, 1, np.nan, 2], 
        [np.nan, np.nan, np.nan, np.nan]
    ])
get_nans_blocks_length(a)
array([3, 1, 1, 4], dtype=int64)
</snippet></ROW><ROW><id>15200385</id><snippet>a = np.array([
        [[1, np.nan], [np.nan, np.nan]],
        [[np.nan, 1], [np.nan, 2]], 
        [[np.nan, np.nan], [np.nan, np.nan]]
    ])
get_nans_blocks_length(a)
array([1, 2, 1, 1, 2, 2], dtype=int64)
</snippet></ROW><ROW><id>15200407</id><snippet># build a table mapping lead byte to expected follow-byte count
# bytes 00-BF have 0 follow bytes, F5-FF is not legal UTF8
# C0-DF: 1, E0-EF: 2 and F0-F4: 3 follow bytes.
# leave F5-FF set to 0 to minimize reading broken data.
_lead_byte_to_count = []
for i in range(256):
    _lead_byte_to_count.append(
        1 + (i &gt;= 0xe0) + (i &gt;= 0xf0) if 0xbf &lt; i &lt; 0xf5 else 0)

def readUTF8(f, count):
    """Read `count` UTF-8 bytes from file `f`, return as unicode"""
    # Assumes UTF-8 data is valid; leaves it up to the `.decode()` call to validate
    res = []
    while count:
        count -= 1
        lead = f.read(1)
        res.append(lead)
        readcount = _lead_byte_to_count[ord(lead)]
        if readcount:
            res.append(f.read(readcount))
    return (''.join(res)).decode('utf8')
</snippet></ROW><ROW><id>15200407</id><snippet>&gt;&gt;&gt; test = StringIO(u'This is a test containing Unicode data: \ua000'.encode('utf8'))
&gt;&gt;&gt; readUTF8(test, 41)
u'This is a test containing Unicode data: \ua000'
</snippet></ROW><ROW><id>15200442</id><snippet>textvariable</snippet></ROW><ROW><id>15200937</id><snippet>from modulefinder import ModuleFinder
finder = ModuleFinder()
finder.run_script('bacon.py')

print 'Loaded modules:'
for name, mod in finder.modules.iteritems():
    print '%s: ' % name,
    print ','.join(mod.globalnames.keys()[:3])

print '-'*50
print 'Modules not imported:'
print '\n'.join(finder.badmodules.iterkeys())
</snippet></ROW><ROW><id>15201054</id><snippet>NULL != 1</snippet></ROW><ROW><id>15201054</id><snippet>Session.query(Table).filter(or_(
    Table.column == None,
    Table.column != 1,
))
</snippet></ROW><ROW><id>15201054</id><snippet>Session.query(Table).filter(
    func.coalesce(Table.column, -1) != 1)
</snippet></ROW><ROW><id>15201054</id><snippet>-1 != 1</snippet></ROW><ROW><id>15201161</id><snippet>with open("HiScores.txt") as hiscores:
    scores = [line.split(',') for line in hiscores if line.strip()]
scores = [(name.strip(), int(score)) for name, score in scores]
scores.sort(key=lambda s: s[1], reversed=True)

for name, score in scores:
    print('{:&lt;20} {:&gt;10}'.format(name, score))
</snippet></ROW><ROW><id>15201161</id><snippet>with ... as ...</snippet></ROW><ROW><id>15201252</id><snippet>os.chdir</snippet></ROW><ROW><id>15201252</id><snippet>os.chdir("../result/files/")</snippet></ROW><ROW><id>15201252</id><snippet>"../result/files/"</snippet></ROW><ROW><id>15201268</id><snippet>def permutateMap(X):
    result = []
    for key, value in X.items():
        splitted = value.split(',')
        if len(splitted) &gt; 1:
            for s in splitted:
                new_dict = X.copy()
                new_dict[key] = s.strip()
                result += [new_dict]
            return splitList(result)
    return [X]

def splitList(X):
    result = []
    for entry in X:
        result += permutateMap(entry)
    return result


my_dicts = {"A": [
            { 'key1 a' : 'value1, value2', 
              'key2 a' : 'A, B, C' }, 
            { 'key1 a' : 'value3',  
              'key2 a' : 'D, E' }]}

new_dict = {}
for key, value in my_dicts.items():
    new_dict[key] = splitList(value)

print new_dict
</snippet></ROW><ROW><id>15201268</id><snippet>('A', 'B', 'C')</snippet></ROW><ROW><id>15201268</id><snippet>split()</snippet></ROW><ROW><id>15201268</id><snippet>strip()</snippet></ROW><ROW><id>15201282</id><snippet>print u'ÆØÅ'
</snippet></ROW><ROW><id>15201448</id><snippet>length</snippet></ROW><ROW><id>15201448</id><snippet>pos = messenger(window.SCI_SEARCHINTARGET, len("world"), "world")
</snippet></ROW><ROW><id>15201474</id><snippet>from gevent import sleep, socket
from gevent.server import StreamServer

class Connection:
    def __init__(self, host, port):
        self.server = StreamServer((host, port), self.handle)
        self.data = []
        self.socks = []
        self.pointer = 0

    def handle(self, sock, address):
        self.socks.append(sock)
        while True:
            line = sock.recv(1024)
            if line:
                self.data += [line]
            else:
                break
        sock.close()
        self.socks.remove(sock)

    def send(self, msg):
        if self.socks:
            sock2send = self.socks[-1]
            try:
                sock2send.send(msg)
            except IOError, e:
                print "Can't send message '%s'! Exception:" % msg, e
        else:
            print "No sockets to send the message to"

    def start(self):
        self.server.start()

    def serve_forever(self):
        self.server.serve_forever()

    def close(self):
        self.server.stop()
        for sock in self.socks:
            sock.close()

    def new_data(self):
        newest = self.data[self.pointer:]
        self.pointer = len(self.data)
        return newest
</snippet></ROW><ROW><id>15201474</id><snippet>def testTCPClient(self):    
    j = lambda x: "".join(x)

    server = Connection("", 5555)            
    server.start()
    client.run()
    sleep(3)
    data = j(server.new_data())
    self.assertTrue("login" in data)
    sleep(2)
    server.send("login approve")
    sleep(2)
    data = j(server.new_data())
    self.assertTrue("after_login" in data)
    server.send("logout")
    sleep(2)
    data = j(server.new_data())
    self.assertTrue("received_logout" in data)
    server.close()
    self.assertTrue("disconnected" in client.logs)
</snippet></ROW><ROW><id>15201985</id><snippet>In [29]: datetime.datetime.fromtimestamp(0x5134519A)
Out[29]: datetime.datetime(2013, 3, 4, 11, 47, 38)

In [30]: datetime.datetime.fromtimestamp(0x51332955)
Out[30]: datetime.datetime(2013, 3, 3, 14, 43, 33)
</snippet></ROW><ROW><id>15201985</id><snippet>0000-FFFF</snippet></ROW><ROW><id>15201985</id><snippet>0x3e8</snippet></ROW><ROW><id>15202007</id><snippet>with open('r.0', 'r') as IRR, open('tt', 'w') as fd_w:
    lines = []
    for line in IRR:
        line = line.strip()
        if line:
            lines.append(line)
        else:
            # empty line, found a complete block, test for status line
            if 'status:         ASSIGNED PA' in lines:
                for line in lines:
                    fd_w.write(line + '\n')
            lines = []
</snippet></ROW><ROW><id>15202029</id><snippet>a</snippet></ROW><ROW><id>15202029</id><snippet>a</snippet></ROW><ROW><id>15202029</id><snippet>a</snippet></ROW><ROW><id>15202029</id><snippet>a</snippet></ROW><ROW><id>15202029</id><snippet>a</snippet></ROW><ROW><id>15202029</id><snippet>a</snippet></ROW><ROW><id>15202060</id><snippet>itertools.groupby</snippet></ROW><ROW><id>15202060</id><snippet>counter = 1
suffixes = {1: 'st', 2:'nd', 3:'rd'}
for key, group in itertools.groupby(the_sequence):
    if key == 0:
        print 'The length of {}{} sequence of zeros is: {}'.format(counter,
                                                                   suffixes.get(counter, 'th'),
                                                                   len(tuple(group)))
        counter += 1
</snippet></ROW><ROW><id>15202060</id><snippet>The length of 1st sequence of zeros is: 4
The length of 2nd sequence of zeros is: 2
The length of 3rd sequence of zeros is: 1
The length of 4th sequence of zeros is: 7
The length of 5th sequence of zeros is: 3
</snippet></ROW><ROW><id>15202174</id><snippet>initialize</snippet></ROW><ROW><id>15202174</id><snippet>self.application</snippet></ROW><ROW><id>15202323</id><snippet>print "%s's value is X." % Var1
</snippet></ROW><ROW><id>15202613</id><snippet>from django.template.defaultfilters import slugify
def get_nickname(self):
    nick = self.name
    vowels = ('a','e','i','o','u')
    first_letter = nick[:1]
    nick = nick[1:]

    for vowel in vowels: nick = nick.replace(vowel,'')
    nick = first_letter + nick
    if len(nick) &gt; 8:
        nick = nick[:7]
    return nick

def save(self, force_insert=False, force_update=False, using=None):
    if not self.nickname:
        self.nickname = self.get_nickname() if len(self.name)&gt;8 else self.name
    self.slug = slugify(self.nickname)
    slug_test = SomeModel.objects.filter(slug=self.slug, id=self.id) # corrected to use a generic model name
    if slug_test:
        count = slug_test.count
        self.slug = "{}{}".format(self.slug[:len(self.slug)-1], count)

    super(SomeModel, self).save()
</snippet></ROW><ROW><id>15202613</id><snippet>&gt;&gt;&gt; name = 'alabama'
&gt;&gt;&gt; vowels = {'a', 'e', 'i', 'o', 'u'}
&gt;&gt;&gt; nick = name[0] + ''.join(l for l in name[1:] if l not in vowels)
&gt;&gt;&gt; nick
'albm'
</snippet></ROW><ROW><id>15202613</id><snippet>get_nickname</snippet></ROW><ROW><id>15202613</id><snippet>lambda</snippet></ROW><ROW><id>15202613</id><snippet>save</snippet></ROW><ROW><id>15202613</id><snippet>vowels = {'a','e','i','o','u'}
create_nick = lambda name: name[0] + ''.join(l for l in name[1:] if l not in vowels)[:7]
if not self.nickname:
    self.nickname = create_nick(self.name) if len(self.name)&gt;8 else self.name
...
</snippet></ROW><ROW><id>15202629</id><snippet>.description</snippet></ROW><ROW><id>15202629</id><snippet>.fetchall()</snippet></ROW><ROW><id>15202629</id><snippet>SELECT</snippet></ROW><ROW><id>15202629</id><snippet>SELECT</snippet></ROW><ROW><id>15202779</id><snippet>[[words for words in some_list if kw in words.split()] for kw in search_strings]
</snippet></ROW><ROW><id>15202779</id><snippet>[['red apple', 'red banana'], ['house is green']]
</snippet></ROW><ROW><id>15202779</id><snippet>some_list</snippet></ROW><ROW><id>15202779</id><snippet>search_strings</snippet></ROW><ROW><id>15202779</id><snippet>search_strings = set(search_strings)</snippet></ROW><ROW><id>15202844</id><snippet>link_exception() takes at most 3 arguments (4 given)
</snippet></ROW><ROW><id>15202844</id><snippet>def link_exception(self, callback, SpawnedLink=FailureSpawnedLink):
        """Like :meth:`link` but *callback* is only notified when the greenlet dies because of unhandled exception"""
        self.link(callback, SpawnedLink=SpawnedLink)
</snippet></ROW><ROW><id>15202844</id><snippet>    file_path = os.path.abspath(os.path.dirname(__file__))
    url_count = len(urls)

    def progress_bar(green):
        width = 32
        current_count = getattr(progress_bar, 'current_count', 0) + 1
        percentage = current_count * 100 / url_count
        current_width = width * percentage/100
        print('% 3d%% [%s%s] %s/s \r' % (percentage, '#' * current_width, ' ' * (width - current_width), current_count))
        setattr(progress_bar, 'current_count', current_count)

        url, exc = green.value
        if exc:
            print 'Download {} failed with error {}'.format(url, exc)
        else:
            print 'Download {} success'.format(url)

    def print_head(url):
        exc = None
        try:
            data = urllib2.urlopen(url)
            htmlFile = open(''.join([file_path, '/', clearFileName(url), '.html']), 'wb+')
            htmlFile.write(data.read())
            htmlFile.close()
        except Exception, ex:
            exc = ex
        return url,exc

    def clearFileName(url):
        return url.replace('/', '_').replace(':', '_').replace('.', '_').replace('#', '_').replace('=', '_')

    jobs = [gevent.spawn(print_head, url) for url in urls]
    [g.link(progress_bar) for g in jobs]
    gevent.joinall(jobs)
</snippet></ROW><ROW><id>15202873</id><snippet>source = source.replace(i,"")
</snippet></ROW><ROW><id>15202873</id><snippet>for i in mustDelWord</snippet></ROW><ROW><id>15202873</id><snippet>mustDelWord[i]</snippet></ROW><ROW><id>15202938</id><snippet>start.*?end</snippet></ROW><ROW><id>15203241</id><snippet>apt-get install sudo
Edit: /etc/sudoers
Add line: my_user(uses for the setuid) ALL = NOPASSWD : /etc/init.d/webapplication
And in my python script:
commands.getoutput('sudo /etc/init.d/webapplication restart')    
</snippet></ROW><ROW><id>15203265</id><snippet>str.join</snippet></ROW><ROW><id>15203265</id><snippet>for key, value in dict1.iteritems():
    outfile.write(key +": ")
    outfile.write(', '.join([str(item) for item in value]))
    outfile.write("\n")
</snippet></ROW><ROW><id>15203447</id><snippet>.virtualenvs</snippet></ROW><ROW><id>15203447</id><snippet>/home/ubuntu/.virtualenvs/yourenv/bin/python</snippet></ROW><ROW><id>15203447</id><snippet>workon</snippet></ROW><ROW><id>15203447</id><snippet>supervisor.conf</snippet></ROW><ROW><id>15203447</id><snippet>command=/home/ubuntu/.virtualenvs/myapp/bin/python /usr/share/nginx/www/myapp/application.py --port=%(process_num)s
</snippet></ROW><ROW><id>15203520</id><snippet>for row in range(len(dbf)):
    for col in range(len(dbf.fieldNames)):
        sheet1.row(row+1).write(col, dbf[row][col])
</snippet></ROW><ROW><id>15203637</id><snippet>edit.find ('/xff/xd8')
</snippet></ROW><ROW><id>15203637</id><snippet>edit.find ('\xff\xd8')
</snippet></ROW><ROW><id>15203955</id><snippet>type</snippet></ROW><ROW><id>15203955</id><snippet>import argparse
import os.path

parser = argparse.ArgumentParser()

def file_choices(choices,fname):
    ext = os.path.splitext(fname)[1][1:]
    if ext not in choices:
       parser.error("file doesn't end with one of {}".format(choices))
    return fname

parser.add_argument('fn',type=lambda s:file_choices(("csv","tab"),s))

parser.parse_args()
</snippet></ROW><ROW><id>15203955</id><snippet>temp $ python test.py test.csv
temp $ python test.py test.foo
usage: test.py [-h] fn
test.py: error: file doesn't end with one of ('csv', 'tab')
</snippet></ROW><ROW><id>15203955</id><snippet>import argparse
import os.path

def CheckExt(choices):
    class Act(argparse.Action):
        def __call__(self,parser,namespace,fname,option_string=None):
            ext = os.path.splitext(fname)[1][1:]
            if ext not in choices:
                option_string = '({})'.format(option_string) if option_string else ''
                parser.error("file doesn't end with one of {}{}".format(choices,option_string))
            else:
                setattr(namespace,self.dest,fname)

    return Act

parser = argparse.ArgumentParser()
parser.add_argument('fn',action=CheckExt({'csv','txt'}))

print parser.parse_args()
</snippet></ROW><ROW><id>15203981</id><snippet>mpz_probab_prime_p</snippet></ROW><ROW><id>15203981</id><snippet>mpz_probab_prime_p</snippet></ROW><ROW><id>15203981</id><snippet>gmpy2</snippet></ROW><ROW><id>15204235</id><snippet>DatetimeIndex</snippet></ROW><ROW><id>15204235</id><snippet>ndarray</snippet></ROW><ROW><id>15204235</id><snippet>In [1]: import numpy as np

In [2]: import pandas as pd

In [3]: from datetime import datetime

In [4]: dates = [datetime(2012, 5, 1), datetime(2012, 5, 2), datetime(2012, 5, 3)]
   ...: index = pd.DatetimeIndex(dates)
   ...: 
In [5]: index.astype(np.int64)
Out[5]: array([1335830400000000000, 1335916800000000000, 1336003200000000000], 
        dtype=int64)

In [6]: index.astype(np.int64) // 10**9
Out[6]: array([1335830400, 1335916800, 1336003200], dtype=int64)

%timeit [t.value // 10 ** 9 for t in index]
10000 loops, best of 3: 119 us per loop

%timeit index.astype(np.int64) // 10**9
100000 loops, best of 3: 18.4 us per loop
</snippet></ROW><ROW><id>15204318</id><snippet>.extract()</snippet></ROW><ROW><id>15204318</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>15204318</id><snippet>&gt;&gt;&gt; for br in soup.find_all('br'): br.extract()
... 
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&gt;&gt;&gt; soup
&lt;html&gt;&lt;body&gt;&lt;p&gt;
foo
&lt;a href="http://...html" target="_blank"&gt;foo&lt;/a&gt; | bar
&lt;a href="http://...html" target="_blank"&gt;foo&lt;/a&gt; | bar
&lt;a href="http://...html" target="_blank"&gt;foo&lt;/a&gt; | bar
&lt;a href="http://...html" target="_blank"&gt;foo&lt;/a&gt; | bar
&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>15204318</id><snippet>&gt;&gt;&gt; soup.p
&lt;p&gt;
foo
&lt;a href="http://...html" target="_blank"&gt;foo&lt;/a&gt; | bar
&lt;a href="http://...html" target="_blank"&gt;foo&lt;/a&gt; | bar
&lt;a href="http://...html" target="_blank"&gt;foo&lt;/a&gt; | bar
&lt;a href="http://...html" target="_blank"&gt;foo&lt;/a&gt; | bar
&lt;/p&gt;
&gt;&gt;&gt; soup.p.a
&lt;a href="http://...html" target="_blank"&gt;foo&lt;/a&gt;
</snippet></ROW><ROW><id>15204318</id><snippet>for link in soup.find_all('a'):
    print link['href'], ''.join(link.stripped_strings), link.next_sibling
</snippet></ROW><ROW><id>15204318</id><snippet>&gt;&gt;&gt; for link in soup.find_all('a'):
...     print link['href'], ''.join(link.stripped_strings), link.next_sibling
... 
http://...html foo  | bar
http://...html foo  | bar
http://...html foo  | bar
http://...html foo  | bar
</snippet></ROW><ROW><id>15204318</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>15204409</id><snippet>f_in=open("file_in.txt", "r")       #opens a file in the reading mode
in_lines=f_in.readlines()           #reads it line by line
out=[]
for line in in_lines:
    list_values=line.split()        #separate elements by the spaces, returning a list with the numbers as strings
    for i in range(len(list_values)):
        list_values[i]=eval(list_values[i])     #converts them to floats
#       print list_values[i],
        if list_values[i]&lt;0.05:     #your condition
#           print "&gt;&gt;", 1
            list_values[i]=1
        else:
#           print "&gt;&gt;", 0
            list_values[i]=0
    out.append(list_values)         #stores the numbers in a list, where each list corresponds to a lines' content
f_in.close()                        #closes the file

f_out=open("file_out.txt", "w")     #opens a new file in the writing mode
for cur_list in out:
    for i in cur_list:
        f_out.write(str(i)+"\t")    #writes each number, plus a tab
    f_out.write("\n")               #writes a newline
f_out.close()                       #closes the file
</snippet></ROW><ROW><id>15204942</id><snippet>&gt;&gt;&gt; def search(needle, haystack):
        for element in haystack:
            if not isinstance(element, list):
                if element == needle:
                    return True
            else:
                found = search(needle, element)
                if found:
                    return element[0]

&gt;&gt;&gt; a_list = [1,2,3,4,[42,'Meaning of life']]
&gt;&gt;&gt; print search('Meaning of life', a_list)
42
&gt;&gt;&gt; print search('Anything else', a_list)
None
</snippet></ROW><ROW><id>15204944</id><snippet>from ctypes import *

ibc = cdll.LoadLibrary('./libibc.so.1.0.1')
ibc.hash_id_G1.restype = c_char_p
hash = ibc.hash_id_G1(c_char_p('sometext to hash'))
</snippet></ROW><ROW><id>15204944</id><snippet>static</snippet></ROW><ROW><id>15204944</id><snippet>hash_id_G1</snippet></ROW><ROW><id>15204944</id><snippet>char *hash_id_G1(char *str)
{
    static char hash[20];
    ...
    return hash;
}
</snippet></ROW><ROW><id>15204944</id><snippet>char *hash_id_G1(char *str)
{
    char *hash = malloc(20);
    ...
    return hash;
}
</snippet></ROW><ROW><id>15204944</id><snippet>free</snippet></ROW><ROW><id>15204996</id><snippet>np.zeros(0)</snippet></ROW><ROW><id>15205214</id><snippet>numpy.searchsorted()</snippet></ROW><ROW><id>15205214</id><snippet>In [15]: a = np.array([1, 2, 3, 5, 10, 20, 25])

In [16]: b = np.array([1, 5, 20, 25])

In [17]: a.searchsorted(b)
Out[17]: array([0, 3, 5, 6])
</snippet></ROW><ROW><id>15205214</id><snippet>b</snippet></ROW><ROW><id>15205214</id><snippet>a</snippet></ROW><ROW><id>15205374</id><snippet>with open('file.jpg', 'rb') as jpgFile:
    contents = jpgFile.read()

contents = (some operations here)

with open('file2.jpg', 'wb') as jpgFile:
    jpgFile.write(contents)
</snippet></ROW><ROW><id>15205695</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>15205695</id><snippet>Popen</snippet></ROW><ROW><id>15205695</id><snippet>wait()</snippet></ROW><ROW><id>15205695</id><snippet>poll()</snippet></ROW><ROW><id>15205695</id><snippet>Popen</snippet></ROW><ROW><id>15205695</id><snippet>from subprocess import Popen, PIPE
p = Popen (['/bin/sh'], stdout=PIPE, stderr=PIPE, stdin=PIPE)
sout, serr = p.communicate('ls\n')
print 'OUT:'
print sout
print 'ERR:'
print serr
</snippet></ROW><ROW><id>15205695</id><snippet>communicate()</snippet></ROW><ROW><id>15205695</id><snippet>communicate</snippet></ROW><ROW><id>15205695</id><snippet>communicate</snippet></ROW><ROW><id>15205695</id><snippet>Popen.stdin</snippet></ROW><ROW><id>15205695</id><snippet>Popen.stdout</snippet></ROW><ROW><id>15205695</id><snippet>Popen.stderr</snippet></ROW><ROW><id>15205695</id><snippet>communicate</snippet></ROW><ROW><id>15205695</id><snippet>p.stdout.fileno()</snippet></ROW><ROW><id>15205695</id><snippet>select.select()</snippet></ROW><ROW><id>15205695</id><snippet>select</snippet></ROW><ROW><id>15205785</id><snippet>return len(p) != len(set(p))
</snippet></ROW><ROW><id>15205785</id><snippet>set</snippet></ROW><ROW><id>15205785</id><snippet>for i in range(len(p)):
   if p[i] in p[i+1:]:
      return True
return False
</snippet></ROW><ROW><id>15205785</id><snippet>while p:
   e = p.pop()
   if e in p:
      return True
return False
</snippet></ROW><ROW><id>15205785</id><snippet>s = sorted(p)
for i in range(1, len(s)):
   if s[i] == s[i - 1]:
      return True
return False
</snippet></ROW><ROW><id>15205785</id><snippet>p</snippet></ROW><ROW><id>15205853</id><snippet>frameGeometry</snippet></ROW><ROW><id>15205853</id><snippet>geometry</snippet></ROW><ROW><id>15206058</id><snippet>vars(args)</snippet></ROW><ROW><id>15206058</id><snippet>M(**vars(args))
</snippet></ROW><ROW><id>15206058</id><snippet>vars()</snippet></ROW><ROW><id>15206058</id><snippet>__dict__</snippet></ROW><ROW><id>15206058</id><snippet>M.__init__()</snippet></ROW><ROW><id>15206058</id><snippet>message_type</snippet></ROW><ROW><id>15206379</id><snippet>def myfunction(myarray = np.zeros(0)):
    print "myfunction : before = ", myarray    # This line should not be modified
    data = np.loadtxt("test.txt", unpack=True) # This line should not be modified
    concatenated = np.concatenate((myarray, data))
    print "myfunction : after = ", myarray     # This line should not be modified
    return  concatenated
</snippet></ROW><ROW><id>15206379</id><snippet>result = myfunction(myarray)
</snippet></ROW><ROW><id>15206487</id><snippet>{elem.split('=', 1)[0]: elem.split('=', 1)[1].strip() for elem in x} 
</snippet></ROW><ROW><id>15206487</id><snippet>&gt;&gt;&gt; x = ('var1=abc\n', 'var2=xyz\n', 'var3=10')
&gt;&gt;&gt; {elem.split('=', 1)[0]: elem.split('=', 1)[1].strip() for elem in x} 
{'var1': 'abc', 'var3': '10', 'var2': 'xyz'}
</snippet></ROW><ROW><id>15206487</id><snippet>dict()</snippet></ROW><ROW><id>15206487</id><snippet>dict(elem.strip().split('=', 1) for elem in x)
</snippet></ROW><ROW><id>15206717</id><snippet>CalledProcessError</snippet></ROW><ROW><id>15206717</id><snippet>with self.assertRaises(subprocess.CalledProcessError) as context:
</snippet></ROW><ROW><id>15206985</id><snippet>colormap</snippet></ROW><ROW><id>15206985</id><snippet>from matplotlib import pyplot as pl
from matplotlib import cm

pl.scatter(times, values, c = cm.spectral(1.*values/max(values)))
</snippet></ROW><ROW><id>15206985</id><snippet>cm.spectral</snippet></ROW><ROW><id>15206985</id><snippet>colormap</snippet></ROW><ROW><id>15206985</id><snippet>zip</snippet></ROW><ROW><id>15206985</id><snippet>import numpy as np
from matplotlib import pyplot as pl
from matplotlib import cm

measurements = np.array([[0, "a"], [1, "b"], [2, "c"]])
times = np.arange(3)
values = np.array(measurements[:,0], dtype=float)
parameters = np.array(measurements[:,1], dtype='S1')

pl.scatter(times, values, c = cm.spectral(values/max(values)))
pl.show()
</snippet></ROW><ROW><id>15207028</id><snippet>dataset = ['Sensor_01', 'Sensor_02', 'Sensor_03']
for i in range(len(dataset)):
    dataset[i] = dataset[i].replace('Sensor_', '')
print dataset
</snippet></ROW><ROW><id>15207142</id><snippet>a = [[1,2,4,2],[3,8,3,3],[8,7,7,3],[n,n,n,n]]
</snippet></ROW><ROW><id>15207142</id><snippet>matrix[row][col]</snippet></ROW><ROW><id>15207142</id><snippet>a[i]</snippet></ROW><ROW><id>15207142</id><snippet>i</snippet></ROW><ROW><id>15207142</id><snippet>a[i][j]</snippet></ROW><ROW><id>15207142</id><snippet>np.array(a)</snippet></ROW><ROW><id>15207396</id><snippet>class pdf(object):
    def __init__(self,path):
      self.S_Linc = []
      self.Short_Legal = []
      self.Title_Number = []
      self.Legal_Description = []

       operations, mostly appends onto the above variables
    ....
</snippet></ROW><ROW><id>15207509</id><snippet>starlist=list(stardict.keys())
...
    theplanet.star=stardict[random.choice(starlist)]     #Choose a random star
</snippet></ROW><ROW><id>15207567</id><snippet>Word(printables)</snippet></ROW><ROW><id>15207567</id><snippet>selection = QuotedString('"') | Word(printables, excludeChars='*') | Literal('*') 
</snippet></ROW><ROW><id>15207643</id><snippet>import re

def regexize(cntry):
    def doot(x):
        return '\.?'.join(ch for ch in x) + '\.?'
    to_join = []
    for c in cntry:
        cspl = c.split(' ',1)
        if len(cspl)==1: # 'Singapore','Austria',...
            to_join.append('(%s)%s'
                           % (doot(c[0]), doot(c[1:])))
        else: # 'Den LMM','LMM Den',....
            to_join.append('(%s) +%s'
                           % (doot(cspl[0]),
                              doot(cspl[1].strip(' ').lower())))
    pattern = '|'.join(to_join).join('()')
    return re.compile(pattern,re.I)

def code(X,CNTR,r = regexize):
    r = regexize(CNTR)
    for ma in r.finditer(X):
        beg = ma.group(1).split(' ')[0]
        if beg==ma.group(1):
            GV = countries[beg[0]+beg[1:].replace('.','').lower()] \
                 if beg[0].upper()==beg[0] else '- bad match -'
        else:
            try:
                k = (ki for ki in countries.iterkeys()
                     if beg.replace('.','')==ki.split(' ')[0]).next()
                GV = countries[k]
            except StopIteration:
                GV = '- bad match -'
        yield '  {!s:15}  {!s:^13}'.format(ma.group(1), GV)

countries = {'Singapore':'SG','Austria':'AU',
             'Swiss':'CH','Chile':'CL',
             'Den LMM':'DN','LMM Den':'LM'}

s = ('  Singapore  SIngapore  SiNgapore  SinGapore'
     '  SI.Ngapore  SIngaPore  SinGaporE  SinGAPore'
     '  SINGaporE  SiNg.aPoR   singapore  sIngapore'
     '  siNgapore  sinGapore  sINgap.ore  sIngaPore'
     '  sinGaporE  sinGAPore  sINGaporE  siNgaPoRe'
     '    Austria    Aus.trIA    aUSTria    AUSTRiA'
     '  Den L.M.M     Den   Lm.M    DEn Lm.M.'
     '  DEN L.MM      De.n L.M.M.     Den LmM'
     '    L.MM   DEn      LMM DeN     LM.m  Den')

print '\n'
print '\n'.join(res for res in code(s,countries))
</snippet></ROW><ROW><id>15207643</id><snippet>assert(.....]</snippet></ROW><ROW><id>15207643</id><snippet>import re

def doot(x):
    return '\.?'.join(ch for ch in x) + '\.?'

def regexize(labels,doot=doot,
             wg2 = '(%s) *( %s)',wnog2 = '(%s)(%s)',
             ri = re.compile('(.(?!.*? )|[^ ]+)( ?) *(.+\Z)')):
    to_join = []
    modlabs = {}
    for K in labels.iterkeys():
        g1,g2,g3 = ri.match(K).groups()
        to_join.append((wg2 if g2 else wnog2)
                       % (doot(g1), doot(g3.lower())))
        modlabs[g1+g2+g3.lower()] = labels[K]
    return (re.compile('|'.join(to_join), re.I), modlabs)



def code(X,labels,regexize = regexize):
    reglab,modlabs = regexize(labels)
    for ma in reglab.finditer(X):
        a,b = tuple(x for x in ma.groups() if x)
        k = (a + b.lower()).replace('.','')
        GV = modlabs[k] if k in modlabs else '- bad match -'
        yield '  {!s:15}  {!s:^13}'.format(a+b, GV)

countries = {'Singapore':'SG','Austria':'AU',
             'Swiss':'CH','Chile':'CL',
             'Den LMM':'DN','LMM Den':'LM'}

assert(all('.' not in k and
          (k.count(' ')==1 or k[0].upper()==k[0])
          for k in countries))

s = ('  Singapore  SIngapore  SiNgapore  SinGapore'
     '  SI.Ngapore  SIngaPore  SinGaporE  SinGAPore'
     '  SINGaporE  SiNg.aPoR   singapore  sIngapore'
     '  siNgapore  sinGapore  sINgap.ore  sIngaPore'
     '  sinGaporE  sinGAPore  sINGaporE  siNgaPoRe'
     '    Austria    Aus.trIA    aUSTria    AUSTRiA'
     '  Den L.M.M     Den   Lm.M    DEn Lm.M.'
     '  DEN L.MM      De.n L.M.M.     Den LmM'
     '    L.MM   DEn      LMM DeN     LM.m  Den')

print '\n'.join(res for res in code(s,countries))
</snippet></ROW><ROW><id>15207727</id><snippet>{% if request.user == object.manager %} 
</snippet></ROW><ROW><id>15207727</id><snippet>{% if request.user.username == object.manager.username %}
</snippet></ROW><ROW><id>15207727</id><snippet>(int) == (int)
('str') == ('str')
(FK or PK) == (int)
(FK or PK) == (FK or PK)
</snippet></ROW><ROW><id>15207873</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; list1
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
&gt;&gt;&gt; list2
[0, 0, 3, 4, 5, 0, 0, 8, 9, 0]
&gt;&gt;&gt; [[e[0] for e in v]
     for k,v in groupby(((a ,b, a==b)
             for a,b in zip(list1, list2)), itemgetter(2))
      if k]
[[3, 4, 5], [8, 9]]
</snippet></ROW><ROW><id>15207873</id><snippet>&gt;&gt;&gt; [list1[match.a: match.a + match.size]
     for match in SequenceMatcher(None,list1,list2).get_matching_blocks()[:-1]]
</snippet></ROW><ROW><id>15207997</id><snippet>spam = __import__('spam.ham', globals(), locals(), [], -1)</snippet></ROW><ROW><id>15207997</id><snippet>__import__()</snippet></ROW><ROW><id>15207997</id><snippet>importlib.import_module()</snippet></ROW><ROW><id>15207997</id><snippet>importlib.import_module()</snippet></ROW><ROW><id>15207997</id><snippet>importlib.import_module()</snippet></ROW><ROW><id>15207997</id><snippet>len(x)</snippet></ROW><ROW><id>15207997</id><snippet>x.__len__()</snippet></ROW><ROW><id>15207997</id><snippet>vars(x)</snippet></ROW><ROW><id>15207997</id><snippet>dir(x)</snippet></ROW><ROW><id>15207997</id><snippet>x.__dict__</snippet></ROW><ROW><id>15208026</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; 
&gt;&gt;&gt; df0 = pd.ExcelFile("id_data1.xls").parse("Sheet1")
&gt;&gt;&gt; df1 = pd.ExcelFile("id_data2.xls").parse("Sheet1")
&gt;&gt;&gt; df0 = df0.set_index("ID")
&gt;&gt;&gt; df1 = df1.set_index("ID")
&gt;&gt;&gt; df0
    A  B
ID      
1   a  e
2   b  f
3   c  g
4   d  h
&gt;&gt;&gt; df1
    A          B
ID              
1   a          e
2   b  nolongerf
4   d          h
5   g          h
</snippet></ROW><ROW><id>15208026</id><snippet>&gt;&gt;&gt; a0, a1 = df0.align(df1)
&gt;&gt;&gt; different = (a0 != a1).any(axis=1)
&gt;&gt;&gt; comp = a0[different].join(a1[different], lsuffix='_old', rsuffix='_new')
&gt;&gt;&gt; comp
   A_old B_old A_new      B_new
ID                             
2      b     f     b  nolongerf
3      c     g   NaN        NaN
5    NaN   NaN     g          h
&gt;&gt;&gt; comp.to_excel("comparison.xls")
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15208302</id><snippet>options.py</snippet></ROW><ROW><id>15208302</id><snippet>fix_old_job_admin</snippet></ROW><ROW><id>15208302</id><snippet>job_admin = admin.site._registry[Job]
# save old values so that you can go back to them later
old_list_display = job_admin.list_display
old_list_filter = job_admin.list_filter
old_ordering = job_admin.model._meta.ordering
job_admin.list_editable = ("time", "what", "approved")
cl = ChangeList(request, job_admin.model, job_admin.list_display, job_admin.list_display_links, job_admin.list_filter, job_admin.date_hierarchy, job_admin.search_fields, job_admin.list_select_related, job_admin.list_per_page, job_admin.list_editable,job_admin.admin_site, job_admin)
# options.py from django framework lines 1181-1208 (v. 1.4) 
if request.POST:
    FormSet = job_admin.get_changelist_formset(request)
    formset =FormSet(request.POST, request.FILES, queryset=cl.result_list)
    if formset.is_valid():
        changecount = 0
        for form in formset.forms:
            if form.has_changed():
                obj = job_admin.save_form(request, form, change=True)
                job_admin.save_model(request, obj, form, change=True)
                job_admin.save_related(request, form, formsets=[], change=True)
                change_msg = job_admin.construct_change_message(request, form, None)
                job_admin.log_change(request, obj, change_msg)
                changecount += 1 

        if changecount:
            if changecount == 1:
                name = force_unicode(job_admin.model._meta.verbose_name)
            else:
                name = force_unicode(job_admin.model._meta.verbose_name_plural)
            msg = ungettext("%(count)s %(name)s was changed successfully.",
                                "%(count)s %(name)s were changed successfully.",
                                changecount) % {'count': changecount,
                                                'name': name,
                                                'obj': force_unicode(obj)}
            job_admin.message_user(request, msg)
        # call function that sets admin with original values
        fix_old_job_admin(job_admin, old_list_display, old_ordering, old_list_filter)
        return HttpResponseRedirect(request.get_full_path())


FormSet = job_admin.get_changelist_formset(request)
cl.formset = FormSet(queryset=cl.result_list)

context = Context({
    'app_label': ContentType.objects.get_for_model(Lawyer).app_label,
    'verbose_name_plural': Job._meta.verbose_name_plural.title(),
    "cl": cl,
    'request': request,

                   })
# call function that sets admin with original values
fix_old_job_admin(job_admin, old_list_display, old_ordering, old_list_filter)
return render_to_response('yourtemplate/similar_to_changelist.html', context, RequestContext(request))
</snippet></ROW><ROW><id>15208429</id><snippet>from distutils.core import setup
import py2exe
setup(windows=['source_static.py'], options={
          "py2exe": {
              "excludes": ["OpenGL.GL", "Numeric", "copyreg", "itertools.imap", "numpy", "pkg_resources", "queue", "winreg", "pygame.SRCALPHA", "pygame.sdlmain_osx"],
              }
          }
      )
</snippet></ROW><ROW><id>15208429</id><snippet>font1 = pygame.font.SysFont(None, 13)
</snippet></ROW><ROW><id>15208429</id><snippet>font1 = pygame.font.SysFont("Arial", 13)
</snippet></ROW><ROW><id>15208570</id><snippet>rotate()</snippet></ROW><ROW><id>15208570</id><snippet>from collections import deque

deque_crc = deque([0,0,0,0,0],maxlen=5)

myID.extend(deque_crc)

for x in myID:
    deque_crc.rotate(-1)
    deque_crc[2] = (deque_crc[2] + deque_crc[4]) % 2
    deque_crc[4] = (deque_crc[4] + x) % 2

myID[-5:] = deque_crc

print myID
</snippet></ROW><ROW><id>15208723</id><snippet>sudo yum-builddep python-matplotlib</snippet></ROW><ROW><id>15208723</id><snippet>cd matplotlib // wherever the .tar.gz was extracted to.
python setup.py build
python setup.py install
</snippet></ROW><ROW><id>15208779</id><snippet>&gt;&gt;&gt; class Multi_set(Counter):
    def __le__(self, rhs):
        return all(v == rhs[k] for k,v in self.items())


&gt;&gt;&gt; Multi_set(['a','b','c']) &lt;= Multi_set(['a','b','c','d','e'])
True
&gt;&gt;&gt; Multi_set(['a','a','b','c']) &lt;= Multi_set(['a','b','c','d','e'])
False
&gt;&gt;&gt; Multi_set(['a','a','b','c']) &lt;= Multi_set(['a','a','b','c','d','e'])
True
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15208828</id><snippet>numpy.argsort</snippet></ROW><ROW><id>15208828</id><snippet>apply</snippet></ROW><ROW><id>15208828</id><snippet>In [2]: df_sequence[['RUN_START_DATE', 'PUSHUP_START_DATE', 'SITUP_START_DATE', 'PULLUP_START_DATE']].apply(numpy.argsort, axis=1)
Out[2]: 
                RUN_START_DATE  PUSHUP_START_DATE  SITUP_START_DATE  PULLUP_START_DATE
0               1                  0               NaN               2
(etc.)
</snippet></ROW><ROW><id>15208846</id><snippet>In [27]: import re

In [28]: s = "Bill's dog was born in 2010"

In [29]: [w.lower() for w in re.findall(r'\b[A-Za-z]{4,}\b', s)]
Out[29]: ['bill', 'born']
</snippet></ROW><ROW><id>15208846</id><snippet>r'\b[A-Za-z]{4,}\b'</snippet></ROW><ROW><id>15208846</id><snippet>r'...'</snippet></ROW><ROW><id>15208846</id><snippet>\b</snippet></ROW><ROW><id>15208846</id><snippet>\b</snippet></ROW><ROW><id>15208846</id><snippet>[A-Za-z]{4,}</snippet></ROW><ROW><id>15208846</id><snippet>[A-Za-z]</snippet></ROW><ROW><id>15208846</id><snippet>A</snippet></ROW><ROW><id>15208846</id><snippet>Z</snippet></ROW><ROW><id>15208846</id><snippet>a</snippet></ROW><ROW><id>15208846</id><snippet>z</snippet></ROW><ROW><id>15208846</id><snippet>{4,}</snippet></ROW><ROW><id>15208846</id><snippet>[w.lower() for w in ...]</snippet></ROW><ROW><id>15208886</id><snippet>import re

xml = re.search(r"&lt;(\w+).*&lt;/\1&gt;", console_output, flags=re.DOTALL).group()
</snippet></ROW><ROW><id>15208928</id><snippet>cursor = self.ui.editor_window.textCursor()
textSelected = cursor.selectedText()
</snippet></ROW><ROW><id>15208928</id><snippet>self.ui.editor_window.append(s) 
</snippet></ROW><ROW><id>15208928</id><snippet>def mytext(self):
        cursor = self.ui.editor_window.textCursor()
        textSelected = cursor.selectedText()
        s = textSelected.upper()
        self.ui.editor_window.append(s)  
</snippet></ROW><ROW><id>15209011</id><snippet>while True:
    try:
        convert = int(raw_input('Convert: '))
        base = int(raw_input('Base: '))
        if (64 &lt; convert &lt; 2 or 64 &lt; base &lt; 2):
            print "Error! Base must be between 2 and 32."
            continue
        break
    except Exception, e:
        print '&gt;&gt; Error: %s' % e
</snippet></ROW><ROW><id>15209116</id><snippet>sys.path</snippet></ROW><ROW><id>15209116</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>15209116</id><snippet>sitecustomize.py</snippet></ROW><ROW><id>15209116</id><snippet>import site
site.addsitedir('/some/dir/you/want/on/the/path')
</snippet></ROW><ROW><id>15209116</id><snippet>site-packages</snippet></ROW><ROW><id>15209116</id><snippet>sys.path</snippet></ROW><ROW><id>15209116</id><snippet># makepath.py
import sys
sys.path.append('/whatever/dir/you/want')

# script.py
import makepath
</snippet></ROW><ROW><id>15209116</id><snippet>%APPDATA%\Python\PythonXY\site-packages</snippet></ROW><ROW><id>15209171</id><snippet>__str__</snippet></ROW><ROW><id>15209171</id><snippet>threading.RLock</snippet></ROW><ROW><id>15209461</id><snippet>json</snippet></ROW><ROW><id>15209461</id><snippet>$.post("/metrics", {
   data: JSON.stringify({
      'program': 'AWebsite',
      'marketplace': 'Japan',
      'metrics': {'pageLoadTime': '1024'}
   })
});
</snippet></ROW><ROW><id>15209461</id><snippet>import json
def metrics(request):
    data = json.loads(request.POST.get('data'))
    program = data.get('program','')
    marketplace = data.get('marketplace','')
    metrics = data.get('metrics','')
</snippet></ROW><ROW><id>15209461</id><snippet>.get()</snippet></ROW><ROW><id>15209564</id><snippet>lambda</snippet></ROW><ROW><id>15209564</id><snippet>def func(x,keyword='bar'):
    return (x,keyword)
</snippet></ROW><ROW><id>15209564</id><snippet>func = lambda x,keyword='bar':(x,keyword)
</snippet></ROW><ROW><id>15209564</id><snippet>my_list = [lambda x:x**2,lambda x:x**3]
print my_list[0](2)  #4
print my_list[1](2)  #8
</snippet></ROW><ROW><id>15209629</id><snippet>python setup.py install</snippet></ROW><ROW><id>15209629</id><snippet>pip install foo</snippet></ROW><ROW><id>15209629</id><snippet>setup.py</snippet></ROW><ROW><id>15209629</id><snippet>setup.py</snippet></ROW><ROW><id>15209733</id><snippet>extra</snippet></ROW><ROW><id>15209902</id><snippet>import subprocess
from time import sleep
p = subprocess.Popen(["java", "-jar", "example.jar", "run", "myFunction", "'inFile.txt'", "'outFile.txt'")
while not check_my_conditions():
    sleep(my_timeout)
p.kill()
</snippet></ROW><ROW><id>15209914</id><snippet>path</snippet></ROW><ROW><id>15209914</id><snippet>file</snippet></ROW><ROW><id>15209914</id><snippet>file</snippet></ROW><ROW><id>15209914</id><snippet>files</snippet></ROW><ROW><id>15209914</id><snippet>for path,dirs,files in os.walk('data/'):
    for f in files:
        fname = os.path.join(path,f)
        assert(os.path.exists(fname))
</snippet></ROW><ROW><id>15209914</id><snippet>dirs</snippet></ROW><ROW><id>15209914</id><snippet>list</snippet></ROW><ROW><id>15209914</id><snippet>path</snippet></ROW><ROW><id>15209914</id><snippet>dirs</snippet></ROW><ROW><id>15209914</id><snippet>os.walk</snippet></ROW><ROW><id>15210025</id><snippet>&gt;&gt;&gt; import rpy2
&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; import pandas.rpy.common as com
&gt;&gt;&gt; rpy2.__version__
'2.3.1'
&gt;&gt;&gt; pd.__version__
'0.10.0'
&gt;&gt;&gt; datframe = pd.DataFrame({'a' : [1, 2, 3], 'b' : [3, 4, 5]})
&gt;&gt;&gt; r_df = com.convert_to_r_dataframe(datframe)
&gt;&gt;&gt; r_df
&lt;DataFrame - Python:0x105b12710 / R:0x7fa8131d7918&gt;
[IntVector, IntVector]
  a: &lt;class 'rpy2.robjects.vectors.IntVector'&gt;
  &lt;IntVector - Python:0x105b12ab8 / R:0x7fa8131d7838&gt;
[       1,        2,        3]
  b: &lt;class 'rpy2.robjects.vectors.IntVector'&gt;
  &lt;IntVector - Python:0x105b12950 / R:0x7fa8131d7800&gt;
[       3,        4,        5]
</snippet></ROW><ROW><id>15210240</id><snippet>class Vector(object):
    """
    &gt;&gt;&gt; Vector(angle, speed)  # initialize with angle and speed
    &gt;&gt;&gt; Vector(x, y, speed)   # or initialize with x, y, and speed
    """
    def __init__(first, second, third=None):
        if third is None:
            angle, speed = first, second
        else:
            x, y, speed = first, second, third
</snippet></ROW><ROW><id>15210240</id><snippet>third</snippet></ROW><ROW><id>15210240</id><snippet>None</snippet></ROW><ROW><id>15210240</id><snippet>angle</snippet></ROW><ROW><id>15210240</id><snippet>speed</snippet></ROW><ROW><id>15210240</id><snippet>x</snippet></ROW><ROW><id>15210240</id><snippet>y</snippet></ROW><ROW><id>15210240</id><snippet>speed</snippet></ROW><ROW><id>15210240</id><snippet>Vector</snippet></ROW><ROW><id>15210253</id><snippet>example_dict = { 'key1' : 'value1',
                 'key2' : 'value2',
                 'key3' : { 'key3a': 'value3a' },
                 'key4' : { 'key4a': { 'key4aa': 'value4aa',
                                       'key4ab': 'value4ab',
                                       'key4ac': 'value4ac'},
                            'key4b': 'value4b'}
                }

def find_key(d,key):
    for k,v in d.items():
        if isinstance(v,dict):
            p = find_key(v,key)
            if p:
                return [k] + p
        elif v == key:
            return [k]

print find_key(example_dict,'value4ac')
</snippet></ROW><ROW><id>15210258</id><snippet>os.environ['DJANGO_SETTINGS_MODULE'] = 'project1.settings'
from django.core.management import setup_environ
from project1 import settings
setup_environ(settings)
import app1.models

class MyChildmodel(app1.models.Mymodel):
     class Meta:
          app_label = 'app1'

     def myfunction():
          ....
</snippet></ROW><ROW><id>15210508</id><snippet>split</snippet></ROW><ROW><id>15210508</id><snippet>s.split("@")[0]
</snippet></ROW><ROW><id>15210655</id><snippet>if  x % n == 0:
    #print "passed {}".format(n)
    return recursive_factor_test(x,n-1)
</snippet></ROW><ROW><id>15210655</id><snippet>return</snippet></ROW><ROW><id>15210655</id><snippet>None</snippet></ROW><ROW><id>15210655</id><snippet>return</snippet></ROW><ROW><id>15210655</id><snippet>&gt;&gt;&gt; print recursive_factor_test(5040,7)
True
</snippet></ROW><ROW><id>15210658</id><snippet>comint-interrupt-subjob</snippet></ROW><ROW><id>15210658</id><snippet>Python 2.7.2 (default, Jun 20 2012, 16:23:33) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; help(f
...   ^C ^C
KeyboardInterrupt
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15210658</id><snippet>quoted-insert</snippet></ROW><ROW><id>15210658</id><snippet>Python 2.7.2 (default, Jun 20 2012, 16:23:33) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; help(f
... ^C
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyboardInterrupt
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>15210763</id><snippet>%5B</snippet></ROW><ROW><id>15210763</id><snippet>[</snippet></ROW><ROW><id>15210763</id><snippet>%40</snippet></ROW><ROW><id>15210763</id><snippet>@</snippet></ROW><ROW><id>15210763</id><snippet>&gt;&gt;&gt; import urllib
&gt;&gt;&gt; unescaped_url = '%5BB%40463336a0'
&gt;&gt;&gt; escaped_url = urllib.quote(unescaped_url)
'%255BB%2540463336a0'
&gt;&gt;&gt; unescaped_url == urllib.unquote(escaped_url)
True
</snippet></ROW><ROW><id>15211006</id><snippet>a.   $1000 abcde!? B.     December 
31, 1993 c.  8/1/2013 D.   $690 * 10% = 
69 Blah blah
</snippet></ROW><ROW><id>15211006</id><snippet>a.   $1000 abcde!?</snippet></ROW><ROW><id>15211006</id><snippet>B.     December \n31, 1993</snippet></ROW><ROW><id>15211006</id><snippet>c.  8/1/2013</snippet></ROW><ROW><id>15211006</id><snippet>D.   $690 * 10% = \n69 Blah blah</snippet></ROW><ROW><id>15211006</id><snippet>reg = re.compile(r''' 
     (?xs)               # no need for i, but for s (dot matches newlines)
     (\b\w\.\s*)         # e.g. A. or b. (word boundary to restrict to 1 letter)
     ((?:(?!\b\w\.).)+)  # everything until the next A. or b.
     ''')
</snippet></ROW><ROW><id>15211006</id><snippet>findall()</snippet></ROW><ROW><id>15211006</id><snippet>&gt;&gt;&gt; reg.findall(s)
[('a.   ', '$1000 abcde!? '), ('B.     ', 'December \n   31, 1993 '), 
 ('c.  ', '8/1/2013 '), ('D.   ', '$690 * 10% = \n   69 Blah blah\n')]
</snippet></ROW><ROW><id>15211006</id><snippet>a.</snippet></ROW><ROW><id>15211006</id><snippet>reg = re.compile(r''' 
     (?xs)               # no need for i, but for s (dot matches newlines)
     (?:\b\w\.\s*)       # e.g. A. or b. (word boundary to restrict to 1 letter)
     ((?:(?!\b\w\.).)+)  # everything until the next A. or b.
     ''')
</snippet></ROW><ROW><id>15211032</id><snippet>eval</snippet></ROW><ROW><id>15211032</id><snippet>def newFunct(str, test):
    return (lambda x: str if eval(test, {"x": x}) else "")
is_even = newFunct("even", "x % 2 == 0")
is_even(4)
# "even"
is_even(10)
# "even"
is_even(13)
# ""
</snippet></ROW><ROW><id>15211032</id><snippet>eval</snippet></ROW><ROW><id>15211032</id><snippet>test</snippet></ROW><ROW><id>15211032</id><snippet>def newFunct(str, test):
    return (lambda x: str if test(x) else "")
is_even = newFunct("even", lambda x: x % 2 == 0)
</snippet></ROW><ROW><id>15211043</id><snippet>E</snippet></ROW><ROW><id>15211043</id><snippet>import re
for a in data.values():
    for d in a:
        d['E'] = re.sub(r'[^\d,]', '', d['E'])
</snippet></ROW><ROW><id>15211197</id><snippet>django.core.context_processors.static</snippet></ROW><ROW><id>15211197</id><snippet>python django-admin.py startapp</snippet></ROW><ROW><id>15211197</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>15211345</id><snippet>ZipInputStream zis = new ZipInputStream(new FileInputStream("fileName"));
ZipEntry entry;
while ((entry = zis.getNextEntry())!=null) {
    if (entry.isDirectory()) {
        continue;
    }
    if (!entry.getName().endsWith(".class")) {
        continue;
    }
    Class theClass = Class.forName(entry.getName());
    Endpoint targetAnnotation = theClass.getAnnotation(Endpoint.class);
    if (targetAnnotation == null) {
        continue;
    }
    //probably what youre looking for
}
</snippet></ROW><ROW><id>15211345</id><snippet>Class.forName()</snippet></ROW><ROW><id>15211509</id><snippet>from itertools import chain
import csv

_header_translate = {
    'StartPoint': ('start1', 'start2', 'start3'),
    'EndPoint': ('end1', 'end2', 'end3')
}

def header(col):
    header = col.strip('{}').split('::', 1)[0]
    return _header_translate.get(header, (header,))

def cleancolumn(col):
    col = col.strip('{}').split('::', 1)[1]
    return col.split('[%2C]')

def chainedmap(func, row):
    return list(chain.from_iterable(map(func, row)))

with open('input.txt', 'rb') as fin, open('output.csv', 'wb') as fout:
    reader = csv.reader(fin)
    writer = csv.writer(fout)
    for i, row in enumerate(reader):
        if not i:  # first row, write header first
            writer.writerow(chainedmap(header, row))
        writer.writerow(chainedmap(cleancolumn, row))
</snippet></ROW><ROW><id>15211509</id><snippet>cleancolumn</snippet></ROW><ROW><id>15211509</id><snippet>::</snippet></ROW><ROW><id>15211509</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>15211509</id><snippet>StartPoint</snippet></ROW><ROW><id>15211509</id><snippet>EndPoint</snippet></ROW><ROW><id>15211725</id><snippet>LINESENCLOSED</snippet></ROW><ROW><id>15211725</id><snippet> sqlLoadData += 'IGNORE 1 LINES \n'
 sqlLoadData += ''ENCLOSED BY '"' ESCAPED BY "\" ''
</snippet></ROW><ROW><id>15211745</id><snippet>    menubar = tk.Menu(self)
    file_menu = tk.Menu(menubar)
    file_menu.add_command(label='Quit', command=sys.exit)
    menubar.add_cascade(label='File', menu=file_menu)
    self.config(menu=menubar)
</snippet></ROW><ROW><id>15211745</id><snippet>SampleApp.__init__</snippet></ROW><ROW><id>15211745</id><snippet>import sys
import tkinter as tk
TITLE_FONT = ("Helvetica", 18, "bold")


class SampleApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        menubar = tk.Menu(self)
        file_menu = tk.Menu(menubar)
        file_menu.add_command(label='Quit', command=sys.exit)
        menubar.add_cascade(label='File', menu=file_menu)
        self.config(menu=menubar)

        self.frames = {}
        for F in (StartPage, PageOne,
                  # PageTwo
                  ):
            frame = F(container, self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(StartPage)

    def show_frame(self, c):
        frame = self.frames[c]
        frame.tkraise()


class StartPage(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="This is the start page", font=TITLE_FONT)
        label.pack(side="top", fill="x", pady=10)
        button1 = tk.Button(self, text="Go to Page One",
                                command=lambda: controller.show_frame(PageOne))
        button1.pack()


class PageOne(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        label = tk.Label(self, text="This is page 1", font=TITLE_FONT)
        label.pack(side="top", fill="x", pady=10)
        button = tk.Button(self, text="Go to the start page",
                           command=lambda: controller.show_frame(StartPage))
        button.pack()

if __name__ == "__main__":
    app = SampleApp()
    app.mainloop()
</snippet></ROW><ROW><id>15211805</id><snippet>itertools.product</snippet></ROW><ROW><id>15211805</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; d = {'Color': ['Red', 'Yellow'], 'Size': ['Small', 'Medium', 'Large']}
&gt;&gt;&gt; [dict(zip(d, v)) for v in product(*d.values())]
[{'Color': 'Red', 'Size': 'Small'}, {'Color': 'Red', 'Size': 'Medium'}, {'Color': 'Red', 'Size': 'Large'}, {'Color': 'Yellow', 'Size': 'Small'}, {'Color': 'Yellow', 'Size': 'Medium'}, {'Color': 'Yellow', 'Size': 'Large'}]
</snippet></ROW><ROW><id>15212142</id><snippet>list_select_related = True</snippet></ROW><ROW><id>15212142</id><snippet>select_related()</snippet></ROW><ROW><id>15212142</id><snippet>null=True</snippet></ROW><ROW><id>15212142</id><snippet>class EventAdmin(admin.ModelAdmin):
    list_display = ('__str__', 'device')
    def queryset(self, request):
        return super(EventAdmin, self).queryset(request).select_related('device')
</snippet></ROW><ROW><id>15212561</id><snippet>Maildir._toc</snippet></ROW><ROW><id>15212561</id><snippet>Maildir._refresh()</snippet></ROW><ROW><id>15212997</id><snippet>self.canvas.xview_moveto(...)</snippet></ROW><ROW><id>15212997</id><snippet>.123455.234123 xview moveto ...</snippet></ROW><ROW><id>15212997</id><snippet># use 'tkinter' instead of 'Tkinter' if using python 3.x
import Tkinter as tk 

class CustomCanvas(tk.Canvas):
    def __init__(self, *args, **kwargs):
        '''A custom canvas that generates &lt;&lt;ScrollEvent&gt;&gt; events whenever
           the canvas scrolls by any means (scrollbar, key bindings, etc)
        '''
        tk.Canvas.__init__(self, *args, **kwargs)

        # replace the underlying tcl object with our own function
        # so we can generate virtual events when the object scrolls
        tcl='''
            proc widget_proxy {actual_widget args} {
                set result [$actual_widget {*}$args]
                set command [lindex $args 0]
                set subcommand [lindex $args 1]
                if {$command in {xview yview} &amp;&amp; $subcommand in {scroll moveto}} {
                    # widget has been scrolled; generate an event
                    event generate {widget} &lt;&lt;ScrollEvent&gt;&gt;
                }
                return $result
            }

            rename {widget} _{widget}
            interp alias {} ::{widget} {} widget_proxy _{widget}
        '''.replace("{widget}", str(self))
        self.tk.eval(tcl)

class Example(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)

        # create an instance of the custom canvas. Make sure it
        # has a largeish scroll region, for demonstration purposes
        self.canvas = CustomCanvas(self, width=400, height=400, 
                                   borderwidth=0, scrollregion=(0,0,1000,1000))
        self.vsb = tk.Scrollbar(self, orient="vertical", command=self.canvas.yview)
        self.hsb = tk.Scrollbar(self, orient="horizontal", command=self.canvas.xview)
        self.canvas.configure(xscrollcommand=self.hsb.set, yscrollcommand=self.vsb.set)

        self.canvas.grid(row=0, column=0, sticky="nsew")
        self.vsb.grid(row=0, column=1, sticky="ns")
        self.hsb.grid(row=1, column=0, sticky="ew")
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        # this binds to the virtual event that is sent by the proxy
        self.canvas.bind("&lt;&lt;ScrollEvent&gt;&gt;", self.on_scroll)

        # some data, just so that we can see that the canvas
        # really is scrolling
        for y in range(0, 1000, 100):
            for x in range(0, 1000, 100):
                self.canvas.create_text(x, y, text="%s/%s" % (x,y), anchor="nw")

    def on_scroll(self, event):
        print "widget scrolled..."

if __name__ == "__main__":
    root = tk.Tk()
    view = Example(root)
    view.pack(side="top", fill="both", expand=True)
    root.mainloop()
</snippet></ROW><ROW><id>15212997</id><snippet>&lt;Configure&gt;</snippet></ROW><ROW><id>15213042</id><snippet>for i, j in itertools.combinations(range(len(matrix.T)), 2):
    c = matrix[:, [i,j]]
    combined_counts = collections.Counter(map(tuple,c))
    first_column_counts = collections.Counter(c[:,0])
    second_column_counts = collections.Counter(c[:,1])
    print 'columns {} and {}'.format(i,j)
    for AB in combined_counts:
      freq_AB = float(float(combined_counts[AB])/len(c))
      print 'Frequency of {} = {}'.format(AB, freq_AB)
      freq_A = float(first_column_counts[AB[0]])/len(c)
      print "  Freq of '{}' in column {} = {}".format(AB[0], i, freq_A)
      freq_B = float(second_column_counts[AB[1]])/len(c)
      print "  Freq of '{}' in column {} = {}".format(AB[1], i, freq_B)
    print
</snippet></ROW><ROW><id>15213125</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>15213125</id><snippet>&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; print subprocess.check_output(['ls', '/etc'])
adjtime
adobe
anacrontab
apparmor.d
arch-release
ati
at-spi2
avahi
axelrc
bash.bash_logout
</snippet></ROW><ROW><id>15213253</id><snippet>def user_add(self, user, email, passwd):

    insert = "INSERT INTO users (username, email, passwd) VALUES " + \
            "(\'%s\', \'%s\', \'%s\')" % (user, email, passwd)

    rowid = 0
    try:
        rowid = self.__dbh.execute(insert)
    except Exception as e:
        print e

    if rowid is 0:
        return (False, 'User exists');

    return (True, None)
</snippet></ROW><ROW><id>15213293</id><snippet>os.fork()</snippet></ROW><ROW><id>15213293</id><snippet>handle_client_connection()</snippet></ROW><ROW><id>15213293</id><snippet>import socket
import os

class ForkingServer:
    def serve_forever(self):
        self.s = socket.socket()
        try:
            self.s.bind(("", 9000))
            self.s.listen(1)
        except socket.error, (value,message):
            print "error:", message
            if self.s:
                self.s.close()
            return

        while True:
            client,address = self.s.accept()
            pid = os.fork()
            # You should read the documentation for how fork() works if you don't
            # know it already
            # The short version is that at this point in the code, there are 2 processes
            # completely identical to each other which are simulatenously executing
            # The only difference is that the parent process gets the pid of the child
            # returned from fork() and the child process gets a value of 0 returned
            if pid == 0:
                # only the newly spawned process will execute this
                self.handle_client_connection(client, address)
                break
            # In the meantime the parent process will continue on to here
            # thus it will go back to the beginning of the loop and accept a new connection

    def handle_client_connection(self, client,address):
        #simple echo server
        print "Got a connection from:", address
        while True:
            data = client.recv(5)
            if not data:
                # client closed the connection
                break
            client.send(data)
        print "Connection from", address, "closed"


server = ForkingServer()
server.serve_forever()
</snippet></ROW><ROW><id>15213438</id><snippet>xml = x.toxml()
with open('foo.xml', 'w') as f:
    f.write(xml.partition('&gt;')[2])
</snippet></ROW><ROW><id>15213438</id><snippet>class SkipFirstWriter(object):
    def __init__(self, f):
        self.f = f
        self.firstline = True
    def write(self, buf):
        if self.firstline:
            if '&gt;' in buf:
                self.f.write(buf.partition('&gt;')[2])
                self.firstline = False
        else:
            self.f.write(buf)
with open('foo.xml', 'w') as f:
    skipper = SkipFirstWriter(f)
    x.writexml(skipper)
</snippet></ROW><ROW><id>15213438</id><snippet>&gt;</snippet></ROW><ROW><id>15213438</id><snippet>with open('foo.xml', 'w') as f:
    x.firstChild.writexml(f)
</snippet></ROW><ROW><id>15213475</id><snippet>def match_display_hook(self, substitution, matches, longest_match_length):
    print ''
    for match in matches:
        print match
    print self.prompt.rstrip(),
    print readline.get_line_buffer(),
    readline.redisplay()
</snippet></ROW><ROW><id>15213862</id><snippet>import re
referrer = "http://myapp.com/other/page/aaa"
m = re.match("^http://myapp.com/other/page/(.*)", referrer)
if m:
    print m.group(1)
</snippet></ROW><ROW><id>15214066</id><snippet>if (not "string1" in item 
    and not "string2" in item 
    and not "string3" in item 
    and not "string4" in item):
    doSomething(item)
</snippet></ROW><ROW><id>15214066</id><snippet>if not any(s in item for s in ("string1", "string2", "string3", "string4")):
    doSomething(item)
</snippet></ROW><ROW><id>15214245</id><snippet>np.linspace</snippet></ROW><ROW><id>15214245</id><snippet>&gt;&gt;&gt; a = [1, 1.1, 1.2, 1.3, 1.4, 1.5]

&gt;&gt;&gt; b = [np.linspace(0, j, 11) for j in a]
&gt;&gt;&gt; b
[array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ]),
 array([ 0.  ,  0.11,  0.22,  0.33,  0.44,  0.55,  0.66,  0.77,  0.88,  0.99,
         1.1 ]),
 ...
 array([ 0.  ,  0.15,  0.3 ,  0.45,  0.6 ,  0.75,  0.9 ,  1.05,  1.2 ,  1.35,
         1.5 ])]

&gt;&gt;&gt; c = [np.linspace(j, 2, 6) for j in a]
&gt;&gt;&gt; c
[array([ 1. ,  1.2,  1.4,  1.6,  1.8,  2. ]),
 array([ 1.1 ,  1.28,  1.46,  1.64,  1.82,  2.  ]),
 ...
 array([ 1.5,  1.6,  1.7,  1.8,  1.9,  2. ])]
</snippet></ROW><ROW><id>15214245</id><snippet>c</snippet></ROW><ROW><id>15214245</id><snippet>b</snippet></ROW><ROW><id>15214245</id><snippet>c</snippet></ROW><ROW><id>15214245</id><snippet>&gt;&gt;&gt; b = [np.linspace(0, j, 10, endpoint=False) for j in a]

&gt;&gt;&gt; d = map(np.concatenate, zip(b, c))
&gt;&gt;&gt; d
[array([ 0. ,  0.1,  0.2,  0.3,  0.4,  0.5,  0.6,  0.7,  0.8,  0.9,  1. ,
         1.2,  1.4,  1.6,  1.8,  2. ]),
 array([ 0.  ,  0.11,  0.22,  0.33,  0.44,  0.55,  0.66,  0.77,  0.88,
         0.99,  1.1 ,  1.28,  1.46,  1.64,  1.82,  2.  ]),
 ...
 array([ 0.  ,  0.15,  0.3 ,  0.45,  0.6 ,  0.75,  0.9 ,  1.05,  1.2 ,
         1.35,  1.5 ,  1.6 ,  1.7 ,  1.8 ,  1.9 ,  2.  ])]
</snippet></ROW><ROW><id>15214245</id><snippet>&gt;&gt;&gt; d = map(list, d)
</snippet></ROW><ROW><id>15214309</id><snippet>p = re.compile('\[.*\](\s.*\s)\[.*\].*\.jpg')
l = p.findall("[Anime-Koi] GJ-bu - 07 [h264-720p][A8557259].mkv-00_07_33_00001.jpg")
print l
</snippet></ROW><ROW><id>15214319</id><snippet>cmsplugin_rt.button</snippet></ROW><ROW><id>15214319</id><snippet>site-packages/cmsplugin_rt/button</snippet></ROW><ROW><id>15214319</id><snippet>button</snippet></ROW><ROW><id>15214319</id><snippet>button/migrations/</snippet></ROW><ROW><id>15214319</id><snippet>button</snippet></ROW><ROW><id>15214319</id><snippet>settings.py</snippet></ROW><ROW><id>15214319</id><snippet>./manage.py schemamigration --init button</snippet></ROW><ROW><id>15214319</id><snippet>./manage.py migrate button</snippet></ROW><ROW><id>15214319</id><snippet>model.py</snippet></ROW><ROW><id>15214319</id><snippet>./manage.py schemamigration --auto button</snippet></ROW><ROW><id>15214319</id><snippet>button/migrations/0002_auto__...</snippet></ROW><ROW><id>15214319</id><snippet>0001_initial.py</snippet></ROW><ROW><id>15214508</id><snippet>def instancer(cls):
    return cls()

@instancer
class SysProps(object):
    def __getattribute__(self, key):
        return key # dummy
</snippet></ROW><ROW><id>15214508</id><snippet>SysProps</snippet></ROW><ROW><id>15214508</id><snippet>SysProps</snippet></ROW><ROW><id>15214551</id><snippet>import pandas
import matplotlib.pyplot as plt
import numpy as np

df = pandas.DataFrame(dict(graph=['Item one', 'Item two', 'Item three'],
                           n=[3, 5, 2], m=[6, 1, 3])) 

ind = np.arange(len(df))
width = 0.4

fig, ax = plt.subplots()
ax.barh(ind, df.n, width, color='red', label='N')
ax.barh(ind + width, df.m, width, color='green', label='M')

ax.set(yticks=ind + width, yticklabels=df.graph, ylim=[2*width - 1, len(df)])
ax.legend()

plt.show()
</snippet></ROW><ROW><id>15214619</id><snippet>Line 105: missing closing parenthesis
Line 120: extra trailing colon
Line 160: missing colon
Line 172: missing closing parenthesis
Line 220: Needs == not =
</snippet></ROW><ROW><id>15214929</id><snippet>ListedColormap</snippet></ROW><ROW><id>15214929</id><snippet>import matplotlib.pyplot as plt
from matplotlib.colors import ListedColormap

cmap = ListedColormap(['red', 'green', 'blue', 'black'], 'indexed')

fig, ax = plt.subplots()
im = ax.imshow([range(4)], interpolation='none', cmap=cmap)
fig.colorbar(im)
plt.show()
</snippet></ROW><ROW><id>15215155</id><snippet>class Food(object):
    def kimchi(self):
        return 'mmm'

class country(object):
    def __init__(self):
        self.food = Food()
</snippet></ROW><ROW><id>15215178</id><snippet>rows</snippet></ROW><ROW><id>15215178</id><snippet>cols</snippet></ROW><ROW><id>15215178</id><snippet>rows/2-1</snippet></ROW><ROW><id>15215178</id><snippet>rows/2</snippet></ROW><ROW><id>15215178</id><snippet>rows==12</snippet></ROW><ROW><id>15215178</id><snippet>cols/2-1</snippet></ROW><ROW><id>15215178</id><snippet>cols/2</snippet></ROW><ROW><id>15215178</id><snippet>lr =(rows+1)*cols//2</snippet></ROW><ROW><id>15215178</id><snippet>lr-1</snippet></ROW><ROW><id>15215178</id><snippet>lr-cols</snippet></ROW><ROW><id>15215178</id><snippet>lr-cols-1</snippet></ROW><ROW><id>15215178</id><snippet>for rows in (4,6,8):
    for cols in (4,6,8):
        lr = (rows+1)*cols//2
        r = rows//2
        c = cols//2
        print rows, cols, ':\t', r,c, '\t', lr-cols-1, '\t', lr-cols, '\t', lr-1, '\t', lr, '\t', r*cols+c
</snippet></ROW><ROW><id>15215178</id><snippet>4 4 :   2 2     5   6   9   10  10
4 6 :   2 3     8   9   14  15  15
4 8 :   2 4     11  12  19  20  20
6 4 :   3 2     9   10  13  14  14
6 6 :   3 3     14  15  20  21  21
6 8 :   3 4     19  20  27  28  28
8 4 :   4 2     13  14  17  18  18
8 6 :   4 3     20  21  26  27  27
8 8 :   4 4     27  28  35  36  36
</snippet></ROW><ROW><id>15215178</id><snippet>//</snippet></ROW><ROW><id>15215178</id><snippet>rows</snippet></ROW><ROW><id>15215178</id><snippet>cols</snippet></ROW><ROW><id>15215178</id><snippet>(rows|cols)&amp;1</snippet></ROW><ROW><id>15215239</id><snippet>for kk in xrange(0,1000):
    list500steps = []
    for jj in range(0,500):
         list500steps.append(...)
    list1000walks.append(list500steps)
</snippet></ROW><ROW><id>15215280</id><snippet>print "First is: %f" % (first)
print "Second is: %f" % (second)
</snippet></ROW><ROW><id>15215280</id><snippet>print "DONE: %f DIVIDED BY %f EQUALS %f, SWEET MATH BRO!" % (first, second, ans)
</snippet></ROW><ROW><id>15215280</id><snippet>print "First is: %s" % (first)
</snippet></ROW><ROW><id>15215562</id><snippet>NSString * src = @"X.X.X.X";
NSString * mac = @"XX-XX-XX-XX-XX-XX";


const unsigned char byte64[] = {0x64};
const unsigned char byte00[] = {0x00};

NSString * srcString = [src base64EncodedString];
int srcDataLength = [srcString length];
char* srcDataLengthAsByte = (char*) &amp;srcDataLength;

NSString * macString = [mac base64EncodedString];
int macDataLength = [macString length];
char* macDataLengthAsByte = (char*) &amp;macDataLength;

NSString * remoteString = [remote base64EncodedString];
int remoteDataLength = [remoteString length];
char* remoteDataLengthAsByte = (char*) &amp;remoteDataLength;

NSString * appString = [app base64EncodedString];
int appDataLength = [appString length];
char* appDataLengthAsByte = (char*) &amp;appDataLength;

NSMutableData * msgData = [NSMutableData data];
[msgData appendBytes:byte64 length:1];
[msgData appendBytes:byte00 length:1];
[msgData appendBytes:srcDataLengthAsByte length:1];
[msgData appendBytes:byte00 length:1];
[msgData appendData:[srcString dataUsingEncoding:NSASCIIStringEncoding]];
[msgData appendBytes:macDataLengthAsByte length:1];
[msgData appendBytes:byte00 length:1];
[msgData appendData:[macString dataUsingEncoding:NSASCIIStringEncoding]];
[msgData appendBytes:remoteDataLengthAsByte length:1];
[msgData appendBytes:byte00 length:1];
[msgData appendData:[remoteString dataUsingEncoding:NSASCIIStringEncoding]];
int msgDataLength = [msgData length];
char* msgDataLengthAsByte = (char*) &amp;msgDataLength;

NSMutableData * packet = [NSMutableData data];
[packet appendBytes:byte00 length:1];
[packet appendBytes:appDataLengthAsByte length:1];
[packet appendBytes:byte00 length:1];
[packet appendData:[appString dataUsingEncoding:NSASCIIStringEncoding]];
[packet appendBytes:msgDataLengthAsByte length:1];
[packet appendBytes:byte00 length:1];
[packet appendData:msgData];
[self send:packet];
</snippet></ROW><ROW><id>15215562</id><snippet>- (BOOL)connect
{
    struct sockaddr_in addr;
    sockfd = socket( AF_INET, SOCK_STREAM, 0 );
    addr.sin_family = AF_INET;
    addr.sin_addr.s_addr = inet_addr([TV_IP UTF8String]);
    addr.sin_port = htons(TV_PORT);
    return connect(sockfd, (struct sockaddr*)&amp;addr, sizeof(addr))==0;
}

- (long)send:(NSData*)data
{
    long sent = send(sockfd, [data bytes], [data length], 0);

    VADebugLog(@"sent data:(%ld bytes) = [%@]",sent,[data description]);

    return sent;
}

-(void)close
{
    close(sockfd);
}
</snippet></ROW><ROW><id>15215562</id><snippet>#include &lt;netinet/in.h&gt;
#include &lt;arpa/inet.h&gt;
#import "Base64.h"
</snippet></ROW><ROW><id>15215565</id><snippet>all_challenges = session.query(Challenge).all()

for user in some_users:    # however you got these
    for attempt in user.attempts:   # however you got these
        do_something_with(attempt.challenge)  # no SQL will be emitted
</snippet></ROW><ROW><id>15215565</id><snippet>all_challenges = session.query(Challenge).\
                  filter(Challenge.id.in_(session.query(UserAttempt.challenge_id))).all()
</snippet></ROW><ROW><id>15215565</id><snippet>all_challenges = session.query(Challenge).\
                  join(Challenge.attempts).all()
</snippet></ROW><ROW><id>15215565</id><snippet>all_challenges = session.query(Challenge).distinct().\
                  join(Challenge.attempts).all()
</snippet></ROW><ROW><id>15215565</id><snippet>users = session.query(User).\
              options(subqueryload_all(User.attempts, UserAttempt.challenge)).all()
</snippet></ROW><ROW><id>15215565</id><snippet>users = session.query(User).\
                  options(subqueryload(User.attempts), joinedload(UserAttempt.challenge)).all()
</snippet></ROW><ROW><id>15215565</id><snippet>attempts = session.query(UserAttempt).\
                  options(joinedload(UserAttempt.challenge)).all()
</snippet></ROW><ROW><id>15215800</id><snippet>nums = [100,200,300,400,500]
nums = [e+1 for e in nums]
# etc
</snippet></ROW><ROW><id>15215800</id><snippet>&gt;&gt;&gt; nums=range(100,600,100)
&gt;&gt;&gt; nums
[100, 200, 300, 400, 500]
&gt;&gt;&gt; nums=[e+1 for e in nums]
&gt;&gt;&gt; nums
[101, 201, 301, 401, 501]
&gt;&gt;&gt; nums=[e+1 for e in nums]
&gt;&gt;&gt; nums
[102, 202, 302, 402, 502]
</snippet></ROW><ROW><id>15215800</id><snippet>&gt;&gt;&gt; nums=range(100,600,100)
&gt;&gt;&gt; moreNums=[e+1 for e in nums]
&gt;&gt;&gt; evenMoreNums=[e+1 for e in moreNums]
&gt;&gt;&gt; print nums,moreNums,evenMoreNums
[100, 200, 300, 400, 500] [101, 201, 301, 401, 501] [102, 202, 302, 402, 502]
</snippet></ROW><ROW><id>15215876</id><snippet>C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\bin\vcvars64.bat</snippet></ROW><ROW><id>15215876</id><snippet>C:\Program Files (x86)\Microsoft Visual Studio 9.0\VC\bin\vcvars32.bat</snippet></ROW><ROW><id>15215876</id><snippet>set MSSdk=1
set DISTUTILS_USE_SDK=1
</snippet></ROW><ROW><id>15215876</id><snippet>python setup.py install</snippet></ROW><ROW><id>15216499</id><snippet>system</snippet></ROW><ROW><id>15216499</id><snippet>Engine</snippet></ROW><ROW><id>15216499</id><snippet>class Engine():
    @classmethod
    def register(cls, type):
        ...
</snippet></ROW><ROW><id>15216499</id><snippet>from engine import Engine

class System1():
    ...

Engine.register(System1)
</snippet></ROW><ROW><id>15216499</id><snippet>Engine</snippet></ROW><ROW><id>15216689</id><snippet>rules = (
    # Extract all links and follow links from them 
    # (since no callback means follow=True by default)
    # (If "allow" is not given, it will match all links.)
    Rule(SgmlLinkExtractor()), 

    # Extract links matching the "ad/any-words/67-anynumber.html" pattern
    # and parse them with the spider's method parse_item (NOT FOLLOW THEM)
    Rule(SgmlLinkExtractor(allow=r'ad/.+/67-\d+\.html'), callback='parse_item'),
)
</snippet></ROW><ROW><id>15216992</id><snippet>calc_x</snippet></ROW><ROW><id>15216992</id><snippet>calc = calc_x(angles)
next(calc)
next(calc)
# etc.
</snippet></ROW><ROW><id>15217130</id><snippet>DTEP</snippet></ROW><ROW><id>15217130</id><snippet>main</snippet></ROW><ROW><id>15217130</id><snippet>TAU</snippet></ROW><ROW><id>15217130</id><snippet>ref_X</snippet></ROW><ROW><id>15217130</id><snippet>DTEP</snippet></ROW><ROW><id>15217130</id><snippet>main</snippet></ROW><ROW><id>15217130</id><snippet>DTEP = {}

def main():
    DTEP['1'] = 1.22222

main()
</snippet></ROW><ROW><id>15217130</id><snippet>global</snippet></ROW><ROW><id>15217130</id><snippet>main</snippet></ROW><ROW><id>15217130</id><snippet>main()</snippet></ROW><ROW><id>15217130</id><snippet>def main():
    global DTEP
    DTEP = {}
    DTEP['1'] = 1.22222

main()
</snippet></ROW><ROW><id>15217130</id><snippet>main</snippet></ROW><ROW><id>15217130</id><snippet>TAU = 5.55555

ref_X =  95.047
ref_Y = 100.000
ref_Z = 108.883

DTEP = {}
DTEP['1'] = 1.22222
</snippet></ROW><ROW><id>15217194</id><snippet>def editbook(request, book_id):
    log.debug("test....")
    author = Author.objects.filter(author_id=author_info.author_id)
    books=Book.objects.filter(book_id=book_id)
    if request.POST:
        book_name =request.POST['book_name']
        publisher_name =request.POST['publisher_name']
        books=Book.objects.filter(book_id=book_id).update(book_name=book_name, publisher_name=publisher_name)
        first_name = request.POST('first_name')
        last_name = request.POST('last_name')
        email = request.POST('email')
        age = request.POST('age')

        author_info = Author.objects.latest('author_id')
        log.debug("test:%s",author_info.author_id)
        author = Author.objects.filter(author_id=author_info.author_id).update(first_name = first_name,last_name = last_name,email=email,age=age)
        return redirect('/index/')
    else:
        books = Book.objects.get(pk=book_id)
        return render_to_response('editbook.html',{'books':books},{'author':author},context_instance=RequestContext(request))
</snippet></ROW><ROW><id>15217256</id><snippet>data = re.findall(r'\((\[(\d+,?\s?)+\]),\s*(\d+)\)', sample_string)

# data:
# [('[0, 22, 23, 24, 25, 47, 59]', '59', '36155'),
#  ('[0, 1, 22, 23, 24, 25, 47, 59, 7]', '7', '36154'),
#  ('[0, 1, 22, 23, 24, 25, 47, 50, 59, 7]', '7', '36153')]

for d in data:
    int_list_str = d[0]
    trailing_int_str = d[2]
</snippet></ROW><ROW><id>15217301</id><snippet>#!/bin/bash
python setup.py develop
python runapp.py
</snippet></ROW><ROW><id>15218146</id><snippet>linkInstructions = {
  "url1": {
    "title": lambda n: n.find('h4', 'title').text,
    "date": lambda n: n.find('li', 'when').em.text
  },
  "url2": {
    "title": lambda n: n.find('h3', 'title').text,
    "date": lambda n: n.find('li', 'when').strong.text
  }
  # and so forth
} 

def parseNode(node, url):
  # let 'node' be the result of BeautifulSoup(html)
  # and 'url' be the url of the site    

  result = {}

  for key,func in linkInstructions[url].iteritems():
    result[key] = func(node)

  # would return a dict with the structure {'title': &lt;title&gt;, 'date': &lt;date&gt;}
  return result
</snippet></ROW><ROW><id>15218151</id><snippet>text = "Products in these categories Nr 24432 in Kitchen ( Bestsellers ) Nr 11 in Home Improvement &gt; Garden Nr 25 in Hobby &gt; Gärtnerei "
for m in re.finditer(r"Nr [0-9]{1,} in ([0-9A-z &gt;&amp;äÄüÜöÖ]{1,})", text):
  print m.group(1)
</snippet></ROW><ROW><id>15218151</id><snippet>Nr [0-9]+ in (.+?)(?=[^0-9A-z &gt;&amp;äÄüÜöÖ]|$| Nr )
</snippet></ROW><ROW><id>15218151</id><snippet>+</snippet></ROW><ROW><id>15218151</id><snippet>{1,}</snippet></ROW><ROW><id>15218151</id><snippet>.+?</snippet></ROW><ROW><id>15218151</id><snippet>?=</snippet></ROW><ROW><id>15218151</id><snippet>" Nr "</snippet></ROW><ROW><id>15218507</id><snippet>script_dir = os.path.dirname(__file__)
</snippet></ROW><ROW><id>15218507</id><snippet>__file__</snippet></ROW><ROW><id>15218507</id><snippet>script_dir</snippet></ROW><ROW><id>15218507</id><snippet># If script_dir is relative, the current working directory is used, here. This is correct if the current
# working directory is the same as when the script was read by the Python interpreter (which is
# when __file__ was set):
script_dir = os.path.abspath(script_dir)
</snippet></ROW><ROW><id>15218507</id><snippet>media</snippet></ROW><ROW><id>15218507</id><snippet>os.path.join(script_dir, os.path.pardir, 'media')
</snippet></ROW><ROW><id>15218507</id><snippet>os.path.pardir</snippet></ROW><ROW><id>15218507</id><snippet>os.pardir</snippet></ROW><ROW><id>15218507</id><snippet>os.path.join()</snippet></ROW><ROW><id>15218652</id><snippet>AND</snippet></ROW><ROW><id>15218652</id><snippet>OR</snippet></ROW><ROW><id>15218652</id><snippet>WHERE Cond1 AND Cond2 OR Cond3 AND Cond4</snippet></ROW><ROW><id>15218652</id><snippet>WHERE (Cond1 AND Cond2) OR (Cond3 AND Cond4)</snippet></ROW><ROW><id>15218652</id><snippet>or_</snippet></ROW><ROW><id>15218652</id><snippet>and_</snippet></ROW><ROW><id>15218652</id><snippet>sqlalchemy</snippet></ROW><ROW><id>15218913</id><snippet>os.walk()</snippet></ROW><ROW><id>15218913</id><snippet>#!/usr/bin/env python

import re
from os import walk
from os.path import join

def main():
    for (dirpath, _, filenames) in walk('/path/to/root'):
        for filename in filenames:
            # Build the path to the current file.
            path_to_file = join(dirpath, filename)
            content = None
            # Open the file.
            with open(path_to_file, 'r') as myfile:
                print 'Reading {0}'.format(path_to_file)
                # Read the file's contents.
                content = myfile.read()
                content = re.sub(r'.+(?=@.+\.(com|edu))', "xxxx", content)

            with open(path_to_file, 'w') as myfile:
                myfile.write(content)

main()
</snippet></ROW><ROW><id>15218990</id><snippet>class User(object):
    def __repr__(self):
        return 'User: ' + self.username

    # property
    @property
    def devices_filtered(self):
        return object_session(self).query(Device).with_parent(self).filter(Device.platform==1).all()

    # or simply a method
    def devices_filtered(self, platform):
        return object_session(self).query(Device).with_parent(self).filter(Device.platform==platform).all()
</snippet></ROW><ROW><id>15218990</id><snippet>orm.mapper(User, user_table, properties={
  'devices': orm.relation(Device, backref='owner', lazy='dynamic')
})

# ...
user = session.query(User).get(_some_user_id)
devices = user.devices.filter(Device.platform==platform).all()
</snippet></ROW><ROW><id>15219038</id><snippet>&gt;&gt;&gt; np.array(['Hello', 'World'], dtype='S')
array([b'Hello', b'World'], 
      dtype='|S5')
</snippet></ROW><ROW><id>15219038</id><snippet>str</snippet></ROW><ROW><id>15219038</id><snippet>bytes</snippet></ROW><ROW><id>15219038</id><snippet>np.bytes_</snippet></ROW><ROW><id>15219038</id><snippet>&gt;&gt;&gt; np.dtype((bytes, 1)) # 2.7
dtype('|S1')
&gt;&gt;&gt; np.dtype((bytes, 1)) # 3.2
dtype('|S1')
</snippet></ROW><ROW><id>15219038</id><snippet>b''</snippet></ROW><ROW><id>15219038</id><snippet>&gt;&gt;&gt; np.array([b'Hello', b'World']) # 2.7
array(['Hello', 'World'], 
      dtype='|S5')
&gt;&gt;&gt; np.array([b'Hello', b'World']) # 3.2
array([b'Hello', b'World'], 
      dtype='|S5')
</snippet></ROW><ROW><id>15219136</id><snippet>django-shop</snippet></ROW><ROW><id>15219136</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>15219136</id><snippet>python manage.py syncdb</snippet></ROW><ROW><id>15219250</id><snippet>users['user1']['age'] = 21
users['user2'] = {'name': 'John Doe', 'age': 30, 'password': 'qwerty'}
</snippet></ROW><ROW><id>15219250</id><snippet>pickle</snippet></ROW><ROW><id>15219250</id><snippet>import pickle
with open('data.p', 'wb') as out:
    pickle.dump(users, out)
</snippet></ROW><ROW><id>15219250</id><snippet>with open('data.p', 'rb') as data:
    users = pickle.load(data)
</snippet></ROW><ROW><id>15219352</id><snippet>norm.isf</snippet></ROW><ROW><id>15219352</id><snippet>from scipy.stats import norm, zscore

def sample_power_probtest(p1, p2, power=0.8, sig=0.05):
    z = norm.isf([sig/2]) #two-sided t test
    zp = -1 * norm.isf([power]) 
    d = (p1-p2)
    s =2*((p1+p2) /2)*(1-((p1+p2) /2))
    n = s * ((zp + z)**2) / (d**2)
    return int(round(n[0]))

def sample_power_difftest(d, s, power=0.8, sig=0.05):
    z = norm.isf([sig/2])
    zp = -1 * norm.isf([power])
    n = s * ((zp + z)**2) / (d**2)
    return int(round(n[0]))

if __name__ == '__main__':

    n = sample_power_probtest(0.1, 0.11, power=0.8, sig=0.05)
    print n  #14752

    n = sample_power_difftest(0.1, 0.5, power=0.8, sig=0.05)
    print n  #392
</snippet></ROW><ROW><id>15219592</id><snippet>tags</snippet></ROW><ROW><id>15219592</id><snippet>&lt;C-]&gt;</snippet></ROW><ROW><id>15219592</id><snippet>:tag foo</snippet></ROW><ROW><id>15219592</id><snippet>g]</snippet></ROW><ROW><id>15219592</id><snippet>:ts foo</snippet></ROW><ROW><id>15219658</id><snippet>self.__baseurl</snippet></ROW><ROW><id>15219658</id><snippet>baseurl()</snippet></ROW><ROW><id>15219658</id><snippet>self.baseurl</snippet></ROW><ROW><id>15219916</id><snippet>place = places.objects(name="test").first()
if place:
    #update here
    place.loc = [88,102]
else:
    #create new here
    place = places(loc = [-87,101], name="test")
place.save()
</snippet></ROW><ROW><id>15220288</id><snippet>step1ab()</snippet></ROW><ROW><id>15220288</id><snippet>PorterStemmer</snippet></ROW><ROW><id>15220288</id><snippet>myPorterStemmer = nltk.stem.porter.PorterStemmer()
...
myPorterStemmer.step1ab()
</snippet></ROW><ROW><id>15220288</id><snippet>myPorterStemmer.stem(word)</snippet></ROW><ROW><id>15220288</id><snippet>step1ab()</snippet></ROW><ROW><id>15220288</id><snippet>step1ab</snippet></ROW><ROW><id>15220288</id><snippet>&gt;&gt;&gt; word = "countries"
&gt;&gt;&gt; myStemmer = nltk.stem.porter.PorterStemmer()
&gt;&gt;&gt; myStemmer.b = word
&gt;&gt;&gt; myStemmer.k = len(word) - 1
&gt;&gt;&gt; myStemmer.k0 = 0
&gt;&gt;&gt; myStemmer.step1ab()
&gt;&gt;&gt; myStemmer.b[myStemmer.k0:myStemmer.k+1]
'countri'
</snippet></ROW><ROW><id>15220497</id><snippet>import select

connections = []

while True:
    rlist,wlist,xlist = select.select(connections + [s],[],[])
    for i in rlist:
        if i == s:
            conn,addr = s.accept()
            connections.append(conn)
            continue
        data = i.recv(1024)
        for q in connections:
            if q != i and q != s:
                q.send(data)
</snippet></ROW><ROW><id>15220674</id><snippet>ROUTER</snippet></ROW><ROW><id>15220674</id><snippet>-Q queue</snippet></ROW><ROW><id>15220674</id><snippet>queue</snippet></ROW><ROW><id>15220674</id><snippet>celery -A add_tasks worker --loglevel=info -n worker1 -Q addition</snippet></ROW><ROW><id>15220674</id><snippet>add.apply_async(queue='addition',priority=0,args=[1,4])</snippet></ROW><ROW><id>15220674</id><snippet>sub.apply_async(queue='subtraction',priority=0,args=[1,4])</snippet></ROW><ROW><id>15221111</id><snippet>feature_extraction.text</snippet></ROW><ROW><id>15221111</id><snippet>vectorizer = CountVectorizer(stop_words=stopWords, min_df=1)
</snippet></ROW><ROW><id>15221111</id><snippet>min_df</snippet></ROW><ROW><id>15221111</id><snippet>CountVectorizer</snippet></ROW><ROW><id>15221156</id><snippet>@Memoized</snippet></ROW><ROW><id>15221156</id><snippet>GetData2()</snippet></ROW><ROW><id>15221156</id><snippet>*args</snippet></ROW><ROW><id>15221156</id><snippet>**kwargs</snippet></ROW><ROW><id>15221156</id><snippet>def __call__(self, *args, **kwargs):
    print args
    with Locker:
        kwitems = tuple(sorted(kwargs.items()))
        try:
            return self.cache[args, kwitems]
        except KeyError:
            self.cache[args, kwitems] = value = self.func(*args)
            return value
</snippet></ROW><ROW><id>15221156</id><snippet>GetData2(1, 2, 3)
</snippet></ROW><ROW><id>15221156</id><snippet>GetData2(arg1=1, arg2=2, arg3=3)
</snippet></ROW><ROW><id>15221156</id><snippet>    wrapped GetData2()
--&gt; Memoized.__call__()
--&gt; self.func()
--&gt; original GetData2()
</snippet></ROW><ROW><id>15221587</id><snippet>i=0

while i &lt; len(text):
    print text[i]
    i += 1
</snippet></ROW><ROW><id>15221821</id><snippet>if ($line =~ /Ticket\D+(\d+)/)
{
    $ticket_number = $1;
}
</snippet></ROW><ROW><id>15221821</id><snippet>matchObj = re.match( r'Ticket\D+(\d+)', child.findtext('msg').encode('utf-8'))

if matchObj:
   print matchObj.group(1)
</snippet></ROW><ROW><id>15221821</id><snippet>Ticket\D+(\d+)</snippet></ROW><ROW><id>15221821</id><snippet>\D+</snippet></ROW><ROW><id>15221821</id><snippet>\d+</snippet></ROW><ROW><id>15221821</id><snippet>(\d{8})</snippet></ROW><ROW><id>15221821</id><snippet>if</snippet></ROW><ROW><id>15222235</id><snippet>dir</snippet></ROW><ROW><id>15222235</id><snippet>globals()</snippet></ROW><ROW><id>15222235</id><snippet>[name for name, value in globals().items() if isinstance(value, basestring)]
</snippet></ROW><ROW><id>15222588</id><snippet>get_object</snippet></ROW><ROW><id>15222588</id><snippet>DetailView</snippet></ROW><ROW><id>15222588</id><snippet>class CurrentUserDetailView(UserDetailView):
    def get_object(self):
        return self.request.user
</snippet></ROW><ROW><id>15222588</id><snippet>pk</snippet></ROW><ROW><id>15222588</id><snippet>urlpatterns = patterns('',
    url(r"^users/(?P&lt;pk&gt;\d+)/$", UserDetailView.as_view(), name="user_detail"),
    url(r"^users/current/$", CurrentUserDetailView.as_view(), name="current_user_detail"),
    url(r"^users/$", UserListView.as_view(), name="user_list"),
)
</snippet></ROW><ROW><id>15222588</id><snippet>UserDetailView</snippet></ROW><ROW><id>15222593</id><snippet># do my edits in a secon time...</snippet></ROW><ROW><id>15222593</id><snippet>edit_data= str (data.read () )
</snippet></ROW><ROW><id>15222593</id><snippet>edit_data = data.read()
</snippet></ROW><ROW><id>15222593</id><snippet>with</snippet></ROW><ROW><id>15222593</id><snippet>with open(my_file, 'rb+') as fo:
    edit_data = fo.read()
</snippet></ROW><ROW><id>15222593</id><snippet>edit_data</snippet></ROW><ROW><id>15222593</id><snippet>with open(my_out_file, 'wb') as fo:
    fo.write(edit_data)
</snippet></ROW><ROW><id>15222732</id><snippet>    import sys, os, operator, re
    def filesMatching(pattern, top):
        return [f for f in os.listdir(top) if os.path.isfile(os.path.join(top,f)) and re.match(pattern, f)] + reduce (operator.__concat__, [filesMatching (pattern, os.path.join(top,f)) for f in os.listdir (top) if os.path.isdir(os.path.join(top,f))], [])

    print (filesMatching (sys.argv[1], sys.argv[2]))
</snippet></ROW><ROW><id>15223034</id><snippet>value_counts()</snippet></ROW><ROW><id>15223034</id><snippet>import pandas as pd

source = pd.DataFrame({'Country' : ['USA', 'USA', 'Russia','USA'], 
                  'City' : ['New-York', 'New-York', 'Sankt-Petersburg', 'New-York'],
                  'Short name' : ['NY','New','Spb','NY']})

source.groupby(['Country','City']).agg(lambda x:x.value_counts().index[0])
</snippet></ROW><ROW><id>15223266</id><snippet>#print "Exit value ", pygame.QUIT
for et in pygame.event.get():
    #print "Event type ", et.type
    #-----------------------------------------------------------------#
    if et.type == pygame.KEYDOWN:
            if (et.key == pygame.K_ESCAPE) or (et.type == pygame.QUIT):
    #-----------------------------------------------------------------#
                    print "In Here"
                    return True;
pygame.event.pump()  # not quite sure why we do this
return False;
</snippet></ROW><ROW><id>15223266</id><snippet>#------------#</snippet></ROW><ROW><id>15223266</id><snippet>et.type == KEYDOWN</snippet></ROW><ROW><id>15223266</id><snippet>QUIT</snippet></ROW><ROW><id>15223266</id><snippet>if et.type == KEYDOWN</snippet></ROW><ROW><id>15223266</id><snippet>et.type</snippet></ROW><ROW><id>15223266</id><snippet>KEYDOWN</snippet></ROW><ROW><id>15223266</id><snippet>QUIT</snippet></ROW><ROW><id>15223266</id><snippet>et.type == QUIT</snippet></ROW><ROW><id>15223266</id><snippet>QUIT</snippet></ROW><ROW><id>15223266</id><snippet>KEYDOWN</snippet></ROW><ROW><id>15223266</id><snippet>done = False
while not done:
    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                done = True
                break # break out of the for loop
        elif event.type == pygame.QUIT:
            done = True
            break # break out of the for loop
    if done:
        break # to break out of the while loop

    # your game stuff
</snippet></ROW><ROW><id>15223266</id><snippet>;</snippet></ROW><ROW><id>15223266</id><snippet>event.type</snippet></ROW><ROW><id>15223266</id><snippet>if event.type == pygame.QUIT:
     #...
elif event.type == pygame.KEYDOWN:
     #...
</snippet></ROW><ROW><id>15223266</id><snippet>pygame.event.pump()</snippet></ROW><ROW><id>15223289</id><snippet> //migrate the changes of all models of the app
 ./manage.py schemamigration app --auto

 //migrate only the changes of the given model or 1 model
 python manage.py schemamigration app_name extend_modelname --auto
</snippet></ROW><ROW><id>15223296</id><snippet>pip</snippet></ROW><ROW><id>15223296</id><snippet>pip install --upgrade pip
</snippet></ROW><ROW><id>15223550</id><snippet>_get_data</snippet></ROW><ROW><id>15223550</id><snippet>proxy_alive()</snippet></ROW><ROW><id>15223550</id><snippet>insert_in_alives()</snippet></ROW><ROW><id>15223550</id><snippet>proxy_alive()</snippet></ROW><ROW><id>15223550</id><snippet>None</snippet></ROW><ROW><id>15223550</id><snippet>def proxy_alive(proxy):
    test = _get_data('http://m.naukri.com', proxy=proxy, silent=True)
    if test is not None:
        insert_in_alives(proxy)
</snippet></ROW><ROW><id>15223550</id><snippet>insert_in_alives()</snippet></ROW><ROW><id>15223680</id><snippet>[loggers]
keys=root, ws_in_log, ws_out_log

[handlers]
keys=consoleHandler, ws_in_hand, ws_out_hand

[formatters]
keys=generic_form

[logger_root]
handlers=consoleHandler
level=NOTSET

[logger_ws_in_log]
level=NOTSET
handlers=ws_in_hand
qualname=ws_in_log

[logger_ws_out_log]
level=NOTSET
handlers=ws_out_hand
qualname=ws_out_log

[handler_ws_in_hand]
class=logging.handlers.TimedRotatingFileHandler
level=NOTSET
formatter=generic_form
args=('/path/ws_in_.log', 'h', 1, 0, None, False, True)

[handler_ws_out_hand]
class=logging.handlers.TimedRotatingFileHandler
level=NOTSET
formatter=generic_form
args=('/path/em/ws_out_.log', 'h', 1, 0, None, False, True)

[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=generic_form
args=(sys.stdout,)

[formatter_generic_form]
format='%(asctime)s - %(levelname)s - %(message)s'
datefmt='%Y-%m-%d %H:%M:%S'
class=
</snippet></ROW><ROW><id>15223775</id><snippet>__init__.py</snippet></ROW><ROW><id>15223775</id><snippet>student</snippet></ROW><ROW><id>15223775</id><snippet>from . import *
</snippet></ROW><ROW><id>15223775</id><snippet>import student.module.py
</snippet></ROW><ROW><id>15223844</id><snippet>x = (np.arange(5 * 4) % 4).reshape(5, 4) * 1.
x[x==3] = np.nan
y = x + (np.arange(5 * 4)/4).reshape(5,4)*1.
line2d = plt.plot(x.flatten(),y.flatten()) [0]
print x,y
&gt; [[  0.,   1.,   2.,  nan],
&gt; [  0.,   1.,   2.,  nan],
&gt; [  0.,   1.,   2.,  nan],
&gt; [  0.,   1.,   2.,  nan],
&gt; [  0.,   1.,   2.,  nan]]
&gt; [[  0.   1.   2.  nan]
&gt; [  1.   2.   3.  nan]
&gt; [  2.   3.   4.  nan]
&gt; [  3.   4.   5.  nan]
&gt; [  4.   5.   6.  nan]]
</snippet></ROW><ROW><id>15223844</id><snippet>line2d.set_data(y.flatten()+3)
</snippet></ROW><ROW><id>15223961</id><snippet>type('object')
</snippet></ROW><ROW><id>15223961</id><snippet>class Person(object):
    def opinion(self):
        print(type(self))
        print ("Time for a cup of tea")

class Programmer(Person):
    def opinion(self):
        super(Programmer, self).opinion()
        print ("There is no spoon")

if '__name__' == '__main__':
    programmer = Programmer()
    programmer.opinion()

p = Person()
p.opinion()
print('\n')
pg = Programmer()
pg.opinion()
</snippet></ROW><ROW><id>15223961</id><snippet>&lt;class '__main__.Person'&gt;
Time for a cup of tea


&lt;class '__main__.Programmer'&gt;
Time for a cup of tea
There is no spoon
</snippet></ROW><ROW><id>15223974</id><snippet>x = [1]
z = [x.append(x[i]*2) for i in range(10)]
</snippet></ROW><ROW><id>15223974</id><snippet>&gt;&gt;&gt; print z
[None, None, None, None, None, None, None, None, None, None]
</snippet></ROW><ROW><id>15223974</id><snippet>x</snippet></ROW><ROW><id>15223974</id><snippet>&gt;&gt;&gt; print x
[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]
</snippet></ROW><ROW><id>15223974</id><snippet>x = [some_init_value]
[x.append((b[i] - sum([(a[i][j] * x[j]) for j in range(i)])) / a[i][i]) for i in range(n)]
</snippet></ROW><ROW><id>15223974</id><snippet>x</snippet></ROW><ROW><id>15223974</id><snippet>x</snippet></ROW><ROW><id>15223974</id><snippet>None</snippet></ROW><ROW><id>15223974</id><snippet>fib = [[0,1][j] if j&lt;2 else locals()['_[1]'][j-1] + locals()['_[1]'][j-2] for j in range(10)]
</snippet></ROW><ROW><id>15224250</id><snippet>class Team(models.Model):
    name = models.CharField(max_length=100)
    # other attributes that do not change over time

class Player(models.Model):
    name = models.CharField(max_length=100)
    team = models.ForeignKey(Team)
    # other attributes that do not change over time

class Match(models.Model):
    venue = models.CharField(max_length=100)
    date = models.DateField()
    # other non-redundant attributes

class PlayerMatch(models.Model):
    player = models.ForeignKey(Player)
    match = models.ForeignKey(Match)

    points = models.IntegerField()
    assists = models.IntegerField()
    rebounds = models.IntegerField()
</snippet></ROW><ROW><id>15224250</id><snippet>PlayerMatch</snippet></ROW><ROW><id>15224250</id><snippet>Player</snippet></ROW><ROW><id>15224250</id><snippet>Match</snippet></ROW><ROW><id>15224295</id><snippet>[In 1]: import regex
[In 2]: t = u"Meu cão é #paraplégico$."
[In 3]: regex.sub(r"[^\p{Alpha} ]","",t,flags=regex.UNICODE)
[In 4]: print(regex.sub(r"[^\p{Alpha} ]","",t,flags=regex.UNICODE))
</snippet></ROW><ROW><id>15224335</id><snippet>cacert.pem</snippet></ROW><ROW><id>15224335</id><snippet>verify=path</snippet></ROW><ROW><id>15224335</id><snippet>verify=True</snippet></ROW><ROW><id>15224335</id><snippet>include-files</snippet></ROW><ROW><id>15224335</id><snippet>setup.py</snippet></ROW><ROW><id>15224335</id><snippet>import requests.certs
build_exe_options = {"include_files":[(requests.certs.where(),'cacert.pem')]}

#...
</snippet></ROW><ROW><id>15224447</id><snippet>pyinstaller</snippet></ROW><ROW><id>15224447</id><snippet>py2exe</snippet></ROW><ROW><id>15224447</id><snippet>pyinstaller</snippet></ROW><ROW><id>15224447</id><snippet>exe = EXE(pyz,
          a.scripts,
          a.binaries,
          a.datas,
          name=os.path.join('..\\path\\to\\output', 'AppName.exe'),
          icon='C:\\abs\\path\\to\\icon\\icon.ico',
          debug=False,
          strip=False,
          upx=False,
          console=False )
</snippet></ROW><ROW><id>15224447</id><snippet>icon=...</snippet></ROW><ROW><id>15224501</id><snippet>validSortOrders = {'ascending': ASCENDING, 'descending': DESCENDING}
</snippet></ROW><ROW><id>15224501</id><snippet>data = collection.find().sort(fieldname, validSortOrders[sortOrder])
</snippet></ROW><ROW><id>15224504</id><snippet>mul(4, 16)</snippet></ROW><ROW><id>15224504</id><snippet>upload_ftp_image</snippet></ROW><ROW><id>15224504</id><snippet>def upload_ftp_image(download_result, ftp_server, username , password , file , directory):
</snippet></ROW><ROW><id>15224546</id><snippet>except MySQLdb.OperationalError as err:

    if err.errno == errorcode.CR_SERVER_LOST:
        # This is the error you're looking for
    else:
        # This is not the error you're looking for
        raise        
</snippet></ROW><ROW><id>15224921</id><snippet>json.dump(data)</snippet></ROW><ROW><id>15224921</id><snippet>str()</snippet></ROW><ROW><id>15225010</id><snippet>numpy.interp</snippet></ROW><ROW><id>15225010</id><snippet>numpy.interp(value_x,array_x,array_y)
</snippet></ROW><ROW><id>15225010</id><snippet>value_x</snippet></ROW><ROW><id>15225257</id><snippet>Pool.apply_async()</snippet></ROW><ROW><id>15225257</id><snippet>&gt;&gt;&gt; from multiprocessing import Pool
&gt;&gt;&gt; def test(obj):
...   print obj
... 
&gt;&gt;&gt; class A():
...   def __getstate__(self):
...     print "pickling"
...     return {}
... 
&gt;&gt;&gt; pool = Pool()
&gt;&gt;&gt; pool.apply_async(test, [A()])
&lt;multiprocessing.pool.ApplyResult object at 0x10bbe82d0&gt;
pickling

&gt;&gt;&gt; &lt;__main__.A instance at 0x10bbe83b0&gt;
</snippet></ROW><ROW><id>15225257</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>15225257</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>15225257</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>15225264</id><snippet>endpoints_proto_datastore</snippet></ROW><ROW><id>15225403</id><snippet>import time
from threading import Thread # This is the right package name

class UpdateThread(Thread):
    def __init__(self):
        self.stopped = False
        Thread.__init__(self) # Call the super construcor (Thread's one)
    def run(self):
        while not self.stopped:
            self.downloadValue()
            time.sleep(15)
    def downloadValue(self):
        print "Hello"

myThread = UpdateThread()
myThread.start()

for i in range(10):
    print "MainThread"
    time.sleep(2)
</snippet></ROW><ROW><id>15225582</id><snippet>fp.name</snippet></ROW><ROW><id>15225582</id><snippet>&gt;&gt;&gt; f = open('Data.py')
&gt;&gt;&gt; f.name
'Data.py'
</snippet></ROW><ROW><id>15225657</id><snippet>class Link(Base):
    ...

    @property
    def pdf(self):
        path = '/pdf/%d.pdf' % self.id
        if os.path.isfile(path):
            return path
</snippet></ROW><ROW><id>15225782</id><snippet>llvm-3.1</snippet></ROW><ROW><id>15225782</id><snippet>$ llvm-config --libs vectorize
-lLLVMVectorize -lLLVMInstCombine -lLLVMTransformUtils -lLLVMipa -lLLVMAnalysis -lLLVMTarget -lLLVMMC -lLLVMObject -lLLVMCore -lLLVMSupport
$ llvm-config --version
3.1
</snippet></ROW><ROW><id>15225782</id><snippet>llvmpy-0.11.0</snippet></ROW><ROW><id>15225782</id><snippet>llvm-3.2</snippet></ROW><ROW><id>15225782</id><snippet>pip install -I llvmpy==0.10.0
</snippet></ROW><ROW><id>15225782</id><snippet>llvm-3.1</snippet></ROW><ROW><id>15225782</id><snippet>$ lsb_release -a
No LSB modules are available.
Distributor ID: Ubuntu
Description:    Ubuntu 12.10
Release:        12.10
Codename:       quantal
</snippet></ROW><ROW><id>15226145</id><snippet>host</snippet></ROW><ROW><id>15226145</id><snippet>format_pat= re.compile( 
    r"(?P&lt;host&gt;(?:[\d\.]|[\da-fA-F:])+)\s" 
    r"(?P&lt;identity&gt;\S*)\s" 
    r"(?P&lt;user&gt;\S*)\s"
    r"\[(?P&lt;time&gt;.*?)\]\s"
    r'"(?P&lt;request&gt;.*?)"\s'
    r"(?P&lt;status&gt;\d+)\s"
    r"(?P&lt;bytes&gt;\S*)\s"
    r'"(?P&lt;referer&gt;.*?)"\s'
    r'"(?P&lt;user_agent&gt;.*?)"\s*' 
)
</snippet></ROW><ROW><id>15226145</id><snippet>&gt;&gt;&gt; format_pat.match(log).groupdict()
{'status': '200', 'bytes': '4', 'request': 'POST /setConnectionXml HTTP/1.1', 'host': '2001:470:1f14:169:15f3:824f:8a61:7b59', 'referer': '-', 'user': 'ABC-15414', 'time': '14/Nov/2012:09:32:31 +0100', 'identity': '-', 'user_agent': '-'}
</snippet></ROW><ROW><id>15226368</id><snippet>import Image
import redis
import StringIO

output = StringIO.StringIO()
im = Image.open("/home/cwgem/Pictures/portrait.png")
im.save(output, format=im.format)

r = redis.StrictRedis(host='localhost')
r.set('imagedata', output.getvalue())
output.close()
</snippet></ROW><ROW><id>15226368</id><snippet>Image.tostring</snippet></ROW><ROW><id>15226368</id><snippet>StringIO</snippet></ROW><ROW><id>15226368</id><snippet>format=im.format</snippet></ROW><ROW><id>15226368</id><snippet>StringIO</snippet></ROW><ROW><id>15226368</id><snippet>redis-cli --raw get 'imagedata' &gt;test.png
</snippet></ROW><ROW><id>15226425</id><snippet>W</snippet></ROW><ROW><id>15226443</id><snippet>def rm_suffix(s,suffixes):
    for suf in suffixes:
       if s.endswith(suf):
          return s[:-len(suf)]
    return s

alist = ['bar','barbar','foo','foos','barbares','foofoos','bares']
salist = set(alist)
suffixes = ('es','s')
blist = [x for x in alist 
         if (not x.endswith(suffixes)) or (rm_suffix(x,suffixes) not in salist)]
print blist  # ['bar', 'barbar', 'foo', 'foofoos']
</snippet></ROW><ROW><id>15226725</id><snippet>setecho</snippet></ROW><ROW><id>15226725</id><snippet>getecho</snippet></ROW><ROW><id>15226725</id><snippet>setecho(self, state)
    This sets the terminal echo mode on or off. Note that anything the
    child sent before the echo will be lost, so you should be sure that
    your input buffer is empty before you call setecho().
</snippet></ROW><ROW><id>15226725</id><snippet>readline</snippet></ROW><ROW><id>15226725</id><snippet>readlines</snippet></ROW><ROW><id>15226749</id><snippet>f</snippet></ROW><ROW><id>15226749</id><snippet>f.name</snippet></ROW><ROW><id>15226813</id><snippet>@property</snippet></ROW><ROW><id>15226813</id><snippet>class MyMetaClass(type):
    @property
    def my_data(cls):
        if getattr(cls, '_MY_DATA', None) is None:
            my_data = ...  # costly database call
            cls._MY_DATA = my_data
        return cls._MY_DATA


class MyClass(object):
    __metaclass__ = MyMetaClass
</snippet></ROW><ROW><id>15226813</id><snippet>my_data</snippet></ROW><ROW><id>15226813</id><snippet>MyClass.my_data</snippet></ROW><ROW><id>15226813</id><snippet>MyClass._MY_DATA</snippet></ROW><ROW><id>15226813</id><snippet>class MyClass(metaclass=MyMetaClass)</snippet></ROW><ROW><id>15226813</id><snippet>__metaclass__</snippet></ROW><ROW><id>15226813</id><snippet>&gt;&gt;&gt; class MyMetaClass(type):
...     @property
...     def my_data(cls):
...         if getattr(cls, '_MY_DATA', None) is None:
...             print "costly database call executing"
...             my_data = 'bar'
...             cls._MY_DATA = my_data
...         return cls._MY_DATA
... 
&gt;&gt;&gt; class MyClass(object):
...     __metaclass__ = MyMetaClass
... 
&gt;&gt;&gt; MyClass.my_data
costly database call executing
'bar'
&gt;&gt;&gt; MyClass.my_data
'bar'
</snippet></ROW><ROW><id>15226813</id><snippet>property</snippet></ROW><ROW><id>15226813</id><snippet>type</snippet></ROW><ROW><id>15226813</id><snippet>type</snippet></ROW><ROW><id>15226988</id><snippet>input()</snippet></ROW><ROW><id>15226988</id><snippet>input()</snippet></ROW><ROW><id>15226988</id><snippet>year = int(input('Enter a year'))
month = int(input('Enter a month'))
day = int(input('Enter a day'))
date1 = datetime.date(year, month, day)
</snippet></ROW><ROW><id>15226988</id><snippet>date_entry = input('Enter a date in YYYY-MM-DD format')
year, month, day = map(int, date_entry.split('-'))
date1 = datetime.date(year, month, day)
</snippet></ROW><ROW><id>15227289</id><snippet>variableTest</snippet></ROW><ROW><id>15227289</id><snippet>r'\18.8.8.8\2'
</snippet></ROW><ROW><id>15227289</id><snippet>re</snippet></ROW><ROW><id>15227289</id><snippet>\g&lt;n&gt;</snippet></ROW><ROW><id>15227289</id><snippet>r'\g&lt;1&gt;' + variableTest + r'\g&lt;2&gt;'
</snippet></ROW><ROW><id>15227289</id><snippet>r'\g&lt;1&gt;8.8.8.8\g&lt;2&gt;'</snippet></ROW><ROW><id>15227419</id><snippet>sort</snippet></ROW><ROW><id>15227419</id><snippet>def temp_file_name(l):
    id0, id1 = l.split()[:2]
    return "tile_%s_%s.tmp" % (id0, id1)

def split_file(name):
    ofiles = {}
    try:
        with open(name) as f:
            for l in f:
                if l:
                    fn = temp_file_name(l)
                    if fn not in ofiles:
                        ofiles[fn] = open(fn, 'w')
                    ofiles[fn].write(l)
    finally:
        for of in ofiles.itervalues():
            of.close()

split_file('srcdata1.txt')
</snippet></ROW><ROW><id>15227419</id><snippet>def split_file(name):
    with open(name) as f:
        for l in f:
            if l:
                fn = temp_file_name(l)
                with open(fn, 'a') as of:
                    of.write(l)
</snippet></ROW><ROW><id>15227424</id><snippet>print """Content-type: text/html; charset=utf-8\n\n
&lt;!DOCTYPE html&gt;
...
</snippet></ROW><ROW><id>15227551</id><snippet>y = polyroots([int(row["scaleA"]), int(row["scaleB"]), int(row["scaleC"]), int(row["scaleD"])-value])
for root in y:
   if "j" not in str(root):
       value = root
</snippet></ROW><ROW><id>15227913</id><snippet>[(u'koko',), (u'lolo',)]</snippet></ROW><ROW><id>15227913</id><snippet>["koko","lolo"]</snippet></ROW><ROW><id>15228136</id><snippet>split</snippet></ROW><ROW><id>15228136</id><snippet>&gt;&gt;&gt; "asdasd".split('.')
    ['asdasd']
</snippet></ROW><ROW><id>15228136</id><snippet>with open('words.txt', 'r') as file:
    file_contents = file.read()

    print('Total words:   ', len(file_contents.split()))
    print('total stops:    ', file_contents.count('.'))
</snippet></ROW><ROW><id>15228167</id><snippet>datetime</snippet></ROW><ROW><id>15228167</id><snippet>win32com</snippet></ROW><ROW><id>15228167</id><snippet>datetime</snippet></ROW><ROW><id>15228699</id><snippet>http.pid</snippet></ROW><ROW><id>15228699</id><snippet>read</snippet></ROW><ROW><id>15228699</id><snippet>pid</snippet></ROW><ROW><id>15228699</id><snippet>"12345\n"</snippet></ROW><ROW><id>15228699</id><snippet>"/proc/12345\n"</snippet></ROW><ROW><id>15228699</id><snippet>strip()</snippet></ROW><ROW><id>15228699</id><snippet>os.path.exists(os.path.join('/proc', pid.strip()))
</snippet></ROW><ROW><id>15228779</id><snippet>pyx</snippet></ROW><ROW><id>15228779</id><snippet>cdef</snippet></ROW><ROW><id>15228779</id><snippet>cpdef</snippet></ROW><ROW><id>15228779</id><snippet>fun</snippet></ROW><ROW><id>15228779</id><snippet>def fun(P, x, y):
    parse_args(P, x, y)
    getattr(my_c_library, name)(&amp;D)
    return y
</snippet></ROW><ROW><id>15228779</id><snippet>parse_args</snippet></ROW><ROW><id>15228779</id><snippet>getattr</snippet></ROW><ROW><id>15228779</id><snippet>cimport</snippet></ROW><ROW><id>15228779</id><snippet>import</snippet></ROW><ROW><id>15228779</id><snippet>ctypedef</snippet></ROW><ROW><id>15229044</id><snippet>&gt;&gt;&gt; l=[v for (k,v) in Transitions.iteritems() if k[1] == 3]
&gt;&gt;&gt; sum(l)
1.9196986029286058
</snippet></ROW><ROW><id>15229044</id><snippet>k[1]</snippet></ROW><ROW><id>15229044</id><snippet>k[2]</snippet></ROW><ROW><id>15229044</id><snippet>&gt;&gt;&gt; l=[sum([v for (k,v) in Transitions.iteritems() if k[1] == i]) for i in range(1,4,1)]
&gt;&gt;&gt; l
[1.3678794411714423, 1.7357588823428847, 1.9196986029286058]
</snippet></ROW><ROW><id>15229044</id><snippet>Transitions[0,i,j] = sum([Transitions[0,i,k] for k in range(1,i+1,1)])
</snippet></ROW><ROW><id>15229244</id><snippet>reduce()</snippet></ROW><ROW><id>15229244</id><snippet>def resolve_object(name):
    names = name.split('.')
    return reduce(getattr, names[1:], globals()[names[0]])
</snippet></ROW><ROW><id>15229244</id><snippet>names[0]</snippet></ROW><ROW><id>15229244</id><snippet>getattr</snippet></ROW><ROW><id>15229244</id><snippet>&gt;&gt;&gt; class Foo(object): pass
... 
&gt;&gt;&gt; first_class = Foo()
&gt;&gt;&gt; first_class.second_class = Foo()
&gt;&gt;&gt; first_class.second_class.third_class = Foo
&gt;&gt;&gt; first_class.second_class.third_class.id = 'baz'
&gt;&gt;&gt; resolve_object('first_class.second_class.third_class.id')
'baz'
</snippet></ROW><ROW><id>15229304</id><snippet>hasNext</snippet></ROW><ROW><id>15229304</id><snippet>class IteratorEx(object):
    def __init__(self, it):
        self.it = iter(it)
        self.sentinel = object()
        self.nextItem = next(self.it, self.sentinel)
        self.hasNext = self.nextItem is not self.sentinel

    def next(self):
        ret, self.nextItem = self.nextItem, next(self.it, self.sentinel)
        self.hasNext = self.nextItem is not self.sentinel
        return ret

    def __iter__(self):
        while self.hasNext:
            yield self.next()
</snippet></ROW><ROW><id>15229304</id><snippet>iterex = IteratorEx(xrange(10)) 
for i in iterex:
    print i, iterex.hasNext
</snippet></ROW><ROW><id>15229304</id><snippet>0 True
1 True
2 True
3 True
4 True
5 True
6 True
7 True
8 True
9 False
</snippet></ROW><ROW><id>15229332</id><snippet>def parse_signed_request(signed_request, app_secret):
    try:
        l = signed_request.split('.', 2)
        encoded_sig = str(l[0])
        payload = str(l[1])
    except IndexError:
        raise ValueError("'signed_request' malformed")

    sig = base64.urlsafe_b64decode(encoded_sig + "=" * ((4 - len(encoded_sig) % 4) % 4))
    data = base64.urlsafe_b64decode(payload + "=" * ((4 - len(payload) % 4) % 4))

    data = json.loads(data)

    if data.get('algorithm').upper() != 'HMAC-SHA256':
        raise ValueError("'signed_request' is using an unknown algorithm")
    else:
        expected_sig = hmac.new(app_secret, msg=payload, digestmod=hashlib.sha256).digest()

    if sig != expected_sig:
        raise ValueError("'signed_request' signature mismatch")
    else:
        return data


def fb_registration(request):
    if request.POST:
        if 'signed_request' in request.POST:
            # parse and check data
            data = parse_signed_request(request.POST['signed_request'], settings.FACEBOOK_APP_SECRET)

            # lets try to check if user exists based on username or email
            try:
                check_user = User.objects.get(username=data['registration']['name'])
            except:
                state = "Username is already exist. Please try other account."
                return HttpResponseRedirect(reverse('accounts:register'))

            try:
                check_user = User.objects.get(email=data['registration']['email'])
            except:
                state = "Email is already exist. Please use other account."
                return HttpResponseRedirect(reverse('accounts:register'))

            #lets create now the user
            randompass = ''.join([choice('1234567890qwertyuiopasdfghjklzxcvbnm') for i in range(7)])
            user = User.objects.create_user(data['registration']['name'], data['registration']['email'], randompass)
            user.save()

            user = authenticate(username=data['registration']['name'], password=randompass)

            if user is not None:
                # save in user profile his facebook id
                fbid = 'http://www.facebook.com/profile.php?id=%s' % data['user_id']
                r = RPXAssociation(user=user, identifier=fbid)
                r.save()
                login(request, user)
            return HttpResponseRedirect(reverse('accounts:choose_plan'))
        else:
            state = "Registration request failed!"

    return HttpResponseRedirect(reverse('accounts:register'))
</snippet></ROW><ROW><id>15229353</id><snippet>None</snippet></ROW><ROW><id>15229353</id><snippet>False</snippet></ROW><ROW><id>15229353</id><snippet>not my_var</snippet></ROW><ROW><id>15229353</id><snippet>False</snippet></ROW><ROW><id>15229353</id><snippet>bool()</snippet></ROW><ROW><id>15229353</id><snippet>False</snippet></ROW><ROW><id>15229353</id><snippet>False</snippet></ROW><ROW><id>15229353</id><snippet>my_var is False</snippet></ROW><ROW><id>15229353</id><snippet>None</snippet></ROW><ROW><id>15229353</id><snippet>my_var is None</snippet></ROW><ROW><id>15229402</id><snippet>.first()</snippet></ROW><ROW><id>15229402</id><snippet>x_char = session.query(Character).filter(and_(Character.user_id == u_id, Character.lock == None))
x_char = x_char.first()
</snippet></ROW><ROW><id>15229402</id><snippet>x_char</snippet></ROW><ROW><id>15229402</id><snippet>None</snippet></ROW><ROW><id>15229402</id><snippet>x_char = session.query(Character).filter(and_(Character.user_id == u_id, Character.lock == None))
print x_char
</snippet></ROW><ROW><id>15229678</id><snippet>session.query(testtable.c.password, testtable.c.username)</snippet></ROW><ROW><id>15229678</id><snippet>session.query(testtable)</snippet></ROW><ROW><id>15229678</id><snippet>def TestConnection():
    data = None
    loopCounter = 0 
    for data in session.query(testtable.c.password, testtable.c.username).filter_by(is_active=1, is_deleted=0): 
        pwd, usr = data
        print(loopCounter + 1, pwd, usr)
        loopCounter += 1
    if data is None:
        raise Exception ("Could not find any data that matches your query")        
    else:
        print("It worked!")
</snippet></ROW><ROW><id>15229700</id><snippet>join</snippet></ROW><ROW><id>15229700</id><snippet>df1.set_index("SubID", inplace=True)
df2.set_index("Subject Number", inplace=True)
df3 = df1.join(df2, how="left")
</snippet></ROW><ROW><id>15229700</id><snippet>merge</snippet></ROW><ROW><id>15229700</id><snippet>df3 = df1.merge(df2, left_on="SubID", right_on="Subject Number", how="left")
</snippet></ROW><ROW><id>15229785</id><snippet>def _example_id_default():
    return HMAC("{}".format(urandom(32).encode('base_64'))).hexdigest()

class ExampleMixin(object):
    """Mixin for `AnExample`"""

    example_id = Column(String(255), default=_example_id_default)
</snippet></ROW><ROW><id>15230015</id><snippet>In [5]: '\xd9\x85\xd9\x86\xd8\xa7\xd8\xb8\xd8\xb1\xd9\x87'.decode('utf-8')
Out[5]: u'\u0645\u0646\u0627\u0638\u0631\u0647'

In [6]: print '\xd9\x85\xd9\x86\xd8\xa7\xd8\xb8\xd8\xb1\xd9\x87'.decode('utf-8')         
مناظره
</snippet></ROW><ROW><id>15230082</id><snippet>--logger</snippet></ROW><ROW><id>15230082</id><snippet># mylogger.py
from twisted.python import log

def logger():
    return log.PythonLoggingObserver().emit
</snippet></ROW><ROW><id>15230082</id><snippet>twistd --logger=mylogger.logger</snippet></ROW><ROW><id>15230214</id><snippet>itertools</snippet></ROW><ROW><id>15230214</id><snippet>&gt;&gt;&gt; a = np.array([True, True, True, True, False, False, False, True, True, True, True, True])
&gt;&gt;&gt; np.diff(a)
array([False, False, False,  True, False, False,  True, False, False,
       False, False], dtype=bool)
&gt;&gt;&gt; _.nonzero()
(array([3, 6]),)
</snippet></ROW><ROW><id>15230214</id><snippet>groupby</snippet></ROW><ROW><id>15230214</id><snippet>&gt;&gt;&gt; %%timeit a = np.random.randint(2, size=1000000)
... np.diff(a).nonzero()
...
100 loops, best of 3: 12.2 ms per loop
&gt;&gt;&gt; def cluster_changes(array):
...     changes = []
...     last = None
...     for i, elt in enumerate(array):
...         if elt != last:
...             last = elt
...             changes.append(i)
...     return changes
...
&gt;&gt;&gt; %%timeit a = np.random.randint(2, size=1000000)
cluster_changes(a)
...
1 loops, best of 3: 348 ms per loop
</snippet></ROW><ROW><id>15230360</id><snippet>or</snippet></ROW><ROW><id>15230360</id><snippet>useranswer == "A" or useranswer == "B" or useranswer == "C" or useranswer == "D"
</snippet></ROW><ROW><id>15230360</id><snippet>useranswer in ("A", "B", "C", "D")
</snippet></ROW><ROW><id>15230360</id><snippet>useranswer in "ABCD"
</snippet></ROW><ROW><id>15230558</id><snippet>'    def rotations(lst):'
'            newlist = []'
'            for i in lst:                                              # Take each int item in list. '
'            \t    s = [int(j) for j in str(i)]                           # Turn each item into a list of digit strings'
'            \t    num = ([s[k:]+s[:-len(s)+k] for k in range(len(s))])   # Generate list of rotations of strings '
'            \t    tmplst = [] '
'            \t    for l in num:                                          # For each string rotation'
"                \t        tmplst.append(int(''.join(map(str,l))))            # Turn it into an integer, add that int to tmplst"
"                \t    newlist.append(tmplst)                                 # Add each tmplist to 'newlist'"
'                    return newlist'
'        '
</snippet></ROW><ROW><id>15230558</id><snippet>python -tt your_program_name.py
</snippet></ROW><ROW><id>15230558</id><snippet>\t</snippet></ROW><ROW><id>15230900</id><snippet>/bin/appload myapp</snippet></ROW><ROW><id>15230900</id><snippet>/bin/appload myapp</snippet></ROW><ROW><id>15230900</id><snippet>VARIABLENAME=someword</snippet></ROW><ROW><id>15230900</id><snippet>appload myapp</snippet></ROW><ROW><id>15230900</id><snippet>$BASH_ENV</snippet></ROW><ROW><id>15230900</id><snippet>eval</snippet></ROW><ROW><id>15230900</id><snippet>Popen</snippet></ROW><ROW><id>15230900</id><snippet>shell=True</snippet></ROW><ROW><id>15230900</id><snippet>Popen</snippet></ROW><ROW><id>15230900</id><snippet>bash</snippet></ROW><ROW><id>15230900</id><snippet>$SHELL</snippet></ROW><ROW><id>15230900</id><snippet>-c</snippet></ROW><ROW><id>15230900</id><snippet>appload myapp</snippet></ROW><ROW><id>15230900</id><snippet>create_shell_process</snippet></ROW><ROW><id>15230900</id><snippet>appload myapp</snippet></ROW><ROW><id>15230900</id><snippet>create_shell_process</snippet></ROW><ROW><id>15230900</id><snippet>cwd</snippet></ROW><ROW><id>15230900</id><snippet>on_success</snippet></ROW><ROW><id>15230900</id><snippet>on_failure</snippet></ROW><ROW><id>15230900</id><snippet>None</snippet></ROW><ROW><id>15231187</id><snippet>from mpl_toolkits.mplot3d import *
import matplotlib.pyplot as plt
import numpy as np
from random import random, seed
from matplotlib import cm


fig = plt.figure()
ax = fig.gca(projection='3d')               # to work in 3d
plt.hold(True)

x_surf=np.arange(0, 1, 0.01)                # generate a mesh
y_surf=np.arange(0, 1, 0.01)
x_surf, y_surf = np.meshgrid(x_surf, y_surf)
z_surf = np.sqrt(x_surf+y_surf)             # ex. function, which depends on x and y
ax.plot_surface(x_surf, y_surf, z_surf, cmap=cm.hot);    # plot a 3d surface plot

n = 100
seed(0)                                     # seed let us to have a reproducible set of random numbers
x=[random() for i in range(n)]              # generate n random points
y=[random() for i in range(n)]
z=[random() for i in range(n)]
ax.scatter(x, y, z);                        # plot a 3d scatter plot

ax.set_xlabel('x label')
ax.set_ylabel('y label')
ax.set_zlabel('z label')

plt.show()
</snippet></ROW><ROW><id>15231187</id><snippet>ax.plot_surface(x_surf, y_surf, z_surf, cmap=cm.hot);    # plot a 3d surface plot
</snippet></ROW><ROW><id>15231187</id><snippet>ax.plot_surface(x_surf, y_surf, z_surf, cmap=theCM);
</snippet></ROW><ROW><id>15231623</id><snippet>from flask import Flask
from AccountAPI import account_api

app = Flask(__name__)

app.register_blueprint(account_api)

@app.route("/")
def hello():
    return "Hello World!"

if __name__ == "__main__":
    app.run()
</snippet></ROW><ROW><id>15231623</id><snippet>from flask import Blueprint

account_api = Blueprint('account_api', __name__)

@account_api.route("/account")
def accountList():
    return "list of accounts"
</snippet></ROW><ROW><id>15231623</id><snippet>register_blueprint</snippet></ROW><ROW><id>15231623</id><snippet>app.register_blueprint(account_api, url_prefix='/accounts')
</snippet></ROW><ROW><id>15232472</id><snippet>super</snippet></ROW><ROW><id>15232472</id><snippet>class B(A):
    def methodA(self):
        super(B, self).methodA()
        print 'Im method B' 
</snippet></ROW><ROW><id>15232484</id><snippet>imp</snippet></ROW><ROW><id>15232484</id><snippet>try</snippet></ROW><ROW><id>15232484</id><snippet>NameError</snippet></ROW><ROW><id>15232484</id><snippet>while True:
  try:
    imp = int(input("Importance:\n\t1: High\n\t2: Normal\n\t3: Low"))

    # ... Do stuff dependant on "imp"

    break # Only triggered if input is valid...
  except ValueError:
    print("Error: Invalid number")
</snippet></ROW><ROW><id>15232519</id><snippet>property</snippet></ROW><ROW><id>15232519</id><snippet>myAttrib</snippet></ROW><ROW><id>15232519</id><snippet>def __init__(self):
    self._myAttrib = "I'm the read-only property."

def getx(self):
    return self._myAttrib

myAttrib = property(getx)
</snippet></ROW><ROW><id>15232519</id><snippet>myAttrib</snippet></ROW><ROW><id>15232519</id><snippet>_myAttrib</snippet></ROW><ROW><id>15232519</id><snippet>"I'm the read-only property."</snippet></ROW><ROW><id>15232519</id><snippet>property</snippet></ROW><ROW><id>15232519</id><snippet>_myAttrib</snippet></ROW><ROW><id>15232519</id><snippet>_myAttrib</snippet></ROW><ROW><id>15232519</id><snippet>_myAttrib</snippet></ROW><ROW><id>15232555</id><snippet>netwkorkx</snippet></ROW><ROW><id>15232555</id><snippet>plt.gca()</snippet></ROW><ROW><id>15232555</id><snippet>nx.drawing.nx_pylab.draw_networkx_nodes(..., ax=Axes[0])
nx.drawing.nx_pylab.draw_networkx_nodes(..., ax=Axes[1])
</snippet></ROW><ROW><id>15232555</id><snippet>matplotlib.axes.Axes</snippet></ROW><ROW><id>15232608</id><snippet>print()</snippet></ROW><ROW><id>15232608</id><snippet>&gt;&gt;&gt; if 2 == 2:
...     print ("YES")
...
YES
</snippet></ROW><ROW><id>15232679</id><snippet>&gt;&gt;&gt; salaryGrades = [list(range(s, s + 10000, 1000)) for s in range(10000, 100000, 10000)]
&gt;&gt;&gt; salaryGrades
[[10000, 11000, 12000, 13000, 14000, 15000, 16000, 17000, 18000, 19000],
 [20000, 21000, 22000, 23000, 24000, 25000, 26000, 27000, 28000, 29000],
 [30000, 31000, 32000, 33000, 34000, 35000, 36000, 37000, 38000, 39000],
 [40000, 41000, 42000, 43000, 44000, 45000, 46000, 47000, 48000, 49000],
 [50000, 51000, 52000, 53000, 54000, 55000, 56000, 57000, 58000, 59000],
 [60000, 61000, 62000, 63000, 64000, 65000, 66000, 67000, 68000, 69000],
 [70000, 71000, 72000, 73000, 74000, 75000, 76000, 77000, 78000, 79000],
 [80000, 81000, 82000, 83000, 84000, 85000, 86000, 87000, 88000, 89000],
 [90000, 91000, 92000, 93000, 94000, 95000, 96000, 97000, 98000, 99000]]
</snippet></ROW><ROW><id>15233066</id><snippet>Sentence = detail2[1].rstrip('\n')
</snippet></ROW><ROW><id>15233320</id><snippet>verifyData</snippet></ROW><ROW><id>15233320</id><snippet>featureID</snippet></ROW><ROW><id>15233320</id><snippet>baseClassifier</snippet></ROW><ROW><id>15233320</id><snippet>train</snippet></ROW><ROW><id>15233320</id><snippet>if data.__class__.__name__ == 'VectorDataSet' :
        self.featureID = data.featureID[:]
</snippet></ROW><ROW><id>15233320</id><snippet>data.__class__.__name__</snippet></ROW><ROW><id>15233320</id><snippet>"SparseDataSet"</snippet></ROW><ROW><id>15233320</id><snippet>False</snippet></ROW><ROW><id>15233320</id><snippet>demo2d.decisionSurface</snippet></ROW><ROW><id>15233320</id><snippet>gridData = VectorDataSet(gridX)
gridData.attachKernel(data.kernel)
results = classifier.test(gridData)
</snippet></ROW><ROW><id>15233320</id><snippet>VectorDataSet</snippet></ROW><ROW><id>15233320</id><snippet>classifier.test</snippet></ROW><ROW><id>15233320</id><snippet>assess.test</snippet></ROW><ROW><id>15233320</id><snippet>baseClassifier.verifyData</snippet></ROW><ROW><id>15233320</id><snippet>def verifyData(self, data) :
  if data.__class__.__name__ != 'VectorDataSet' :
      return
  if len(misc.intersect(self.featureID, data.featureID)) != len(self.featureID) :
       raise ValueError, 'missing features in test data'
</snippet></ROW><ROW><id>15233320</id><snippet>"VectorDataSet"</snippet></ROW><ROW><id>15233320</id><snippet>featureID</snippet></ROW><ROW><id>15233320</id><snippet>VectorDataSet</snippet></ROW><ROW><id>15233320</id><snippet>SVM.featureID</snippet></ROW><ROW><id>15233320</id><snippet>setData</snippet></ROW><ROW><id>15233320</id><snippet>def setData(data_) :
    global data
    data = data_
</snippet></ROW><ROW><id>15233320</id><snippet>data</snippet></ROW><ROW><id>15233320</id><snippet>decisionSurface</snippet></ROW><ROW><id>15233320</id><snippet>setData</snippet></ROW><ROW><id>15233320</id><snippet>VectorDataSet</snippet></ROW><ROW><id>15233511</id><snippet>def translate(translation_map):
    #use raw input and split the sentence into a list of words
    input_list = raw_input('Enter a phrase: ').split()
    output_list = []

    #iterate the input words and append translation
    #(or word if no translation) to the output
    for word in input_list:
        translation = translation_map.get(word)
        output_list.append(translation if translation else word)

    #convert output list back to string
    return ' '.join(output_list)
</snippet></ROW><ROW><id>15233566</id><snippet>cam = AVTCamera()
cam = Camera('ximea')
</snippet></ROW><ROW><id>15233566</id><snippet>cmake -DWITH_XIMEA=ON ..
</snippet></ROW><ROW><id>15233677</id><snippet>import functools

def mydeco(function):
    def wrapper(*args, **kwargs):
        return function(*args, **kwargs) 
    return functools.update_wrapper(wrapper, function)

class BaseClass(object):
    @classmethod
    @mydeco
    def foo(cls):
        return "42" 

print BaseClass.foo()
42
</snippet></ROW><ROW><id>15233830</id><snippet>_preamble</snippet></ROW><ROW><id>15233830</id><snippet>sys.path</snippet></ROW><ROW><id>15233837</id><snippet>import facebook as facebooksd
cookie = facebooksd.get_user_from_cookie(self.request.cookies, 
    FACEBOOK_APP_ID, FACEBOOK_APP_SECRET)
</snippet></ROW><ROW><id>15233837</id><snippet>import facebook as facebooksd
cookies = self.request.cookies
cookie = facebooksd.get_user_from_cookie(cookies, 
    FACEBOOK_APP_ID, FACEBOOK_APP_SECRET)
</snippet></ROW><ROW><id>15233837</id><snippet>cookies = self.request.cookies
import facebook as facebooksd
cookie = facebooksd.get_user_from_cookie(cookies, 
    FACEBOOK_APP_ID, FACEBOOK_APP_SECRET)
</snippet></ROW><ROW><id>15233837</id><snippet>cookies = self.request.cookies
</snippet></ROW><ROW><id>15233837</id><snippet>self</snippet></ROW><ROW><id>15233837</id><snippet>self.request.cookies</snippet></ROW><ROW><id>15233837</id><snippet>self</snippet></ROW><ROW><id>15233960</id><snippet>COLLATE</snippet></ROW><ROW><id>15233960</id><snippet>SHOW LC_COLLATE</snippet></ROW><ROW><id>15233960</id><snippet>"C"</snippet></ROW><ROW><id>15233960</id><snippet>here</snippet></ROW><ROW><id>15233960</id><snippet>here</snippet></ROW><ROW><id>15234107</id><snippet>import os
import sys
import shutil

source = raw_input("Enter source file path: ")
dest = raw_input("Enter destination path: ")

if not os.path.isfile(source):
    print "Source file %s does not exist." % source
    sys.exit(3)

try:
    shutil.copy(source, dest)
except IOError, e:
    print "Could not copy file %s to destination %s" % (source, dest)
    print e
    sys.exit(3)
</snippet></ROW><ROW><id>15234369</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {'charset': 'utf8mb4'},
        (...)
</snippet></ROW><ROW><id>15234435</id><snippet>target.reverse()
target.append(element)
target.reverse()
</snippet></ROW><ROW><id>15234435</id><snippet>target.insert(0, element)
</snippet></ROW><ROW><id>15234435</id><snippet>source.pop()</snippet></ROW><ROW><id>15234435</id><snippet>for value in source:
  ...
</snippet></ROW><ROW><id>15234435</id><snippet>else:
   for i in range(0,len(target)-1):
     if element &gt;= target[i] and element &lt;= target[i+1]:
        target.insert(i+1,element)
        break
</snippet></ROW><ROW><id>15234544</id><snippet>tuple</snippet></ROW><ROW><id>15234544</id><snippet>close_enough</snippet></ROW><ROW><id>15234544</id><snippet>(mean, stdev)</snippet></ROW><ROW><id>15234544</id><snippet>close_enough</snippet></ROW><ROW><id>15234544</id><snippet>def mean_stdev(a):
    return mean(a), stdev(a)

def close_enough(mean_stdev_a, mean_stdev_b):
    mean_a, stdev_a = mean_stdev_a
    mean_b, stdev_b = mean_stdev_b
    diff = abs(mean_a - mean_b)
    return (diff &lt; 0.25 * stdev_a and diff &lt; 0.25 * stdev_b)
</snippet></ROW><ROW><id>15234544</id><snippet>diffs = [elem[0] - elem[1] for elem in zip(seq, sorted(seq))]
</snippet></ROW><ROW><id>15234557</id><snippet>"&lt;\/a&gt;"</snippet></ROW><ROW><id>15234557</id><snippet>"&lt;/a&gt;"</snippet></ROW><ROW><id>15234557</id><snippet>print r'&lt;a href="{0}"&gt;{1}&lt;/a&gt;&lt;br&gt;'.format(url_list[i], question[i])
</snippet></ROW><ROW><id>15234557</id><snippet>for url, q in zip(url_list, question):
  print r'&lt;a href="{0}"&gt;{1}&lt;/a&gt;&lt;br&gt;'.format(url, q)
</snippet></ROW><ROW><id>15234557</id><snippet>import urllib
for url, q in zip(url_list, question):
  url = urllib.quote_plus(url)
  print r'&lt;a href="{0}"&gt;{1}&lt;/a&gt;&lt;br&gt;'.format(url, q)
</snippet></ROW><ROW><id>15234561</id><snippet>find_nth()</snippet></ROW><ROW><id>15234561</id><snippet>rstrip()</snippet></ROW><ROW><id>15234561</id><snippet>def find_nth(body, s_term, n):
    start = body[::-1].find(s_term)
    print '------------------------------------------------'
    print 'body[::-1]\n',body[::-1]
    print '\nstart == %s' % start
    while start &gt;= 0 and n &gt; 1:
        start = body[::-1].find(s_term, start+len(s_term))
        print 'n == %s    start == %s' % (n,start)
        n -= 1
    print '\n (body[::-1])[start:]\n',(body[::-1])[start:]
    print '\n((body[::-1])[start:])[::-1]\n',((body[::-1])[start:])[::-1]
    print '---------------\n'
    return ((body[::-1])[start:])[::-1]


def cool_find_nth(body, s_term, n):
    assert(len(s_term)==1)
    return body.rsplit(s_term,n)[0] + s_term


ss = 'One / Two / Three / Four / Five / Six / End'
print 'the string\n%s\n' % ss

print ('================================\n'
       "find_nth(ss, '/', 3)\n%s" % find_nth(ss, '/', 3) )

print '================================='
print "cool_find_nth(ss, '/', 3)\n%s" % cool_find_nth(ss, '/', 3)
</snippet></ROW><ROW><id>15234561</id><snippet>the string
One / Two / Three / Four / Five / Six / End

------------------------------------------------
body[::-1]
dnE / xiS / eviF / ruoF / eerhT / owT / enO

start == 4
n == 3    start == 10
n == 2    start == 17

 (body[::-1])[start:]
/ ruoF / eerhT / owT / enO

((body[::-1])[start:])[::-1]
One / Two / Three / Four /
---------------

================================
find_nth(ss, '/', 3)
One / Two / Three / Four /
=================================
cool_find_nth(ss, '/', 3)
One / Two / Three / Four /
</snippet></ROW><ROW><id>15234561</id><snippet>import re

reg = re.compile('/'
                 '([^/.]*?)/'
                 '([^/.]*?)\.'
                 '([^/.]*?)\.'
                 '([^/.]*?)\.'
                 '([^/.]*?)\.'
                 '([^/.]*?)\.'
                 '[^/.]+\Z')

def main():
    #file = open('~/Desktop/client_docs.csv', "rb")
    #output = open('~/Desktop/client_docs_parsed.txt', "wb")
    li = ['/Household/LastName.FirstName.Account.Doctype.Date.extension',
          '- /Volumes/HD/Organized Files/Cosby, Bill/Cosby.Bill..Profile.2006.doc']
    for line in li:
        print "line == %r" % line
        household,lastn,firstn,acct,doctype,date = reg.search(line).groups('')       
        print ('household == %r\n'
               'lastn     == %r\n'
               'firstn    == %r\n'
               'acct      == %r\n'
               'doctype   == %r\n'
               'date      == %r\n'
               % (household,lastn,firstn,acct,doctype,date))

if __name__ == "__main__": main() 
</snippet></ROW><ROW><id>15234561</id><snippet>line == '/Household/LastName.FirstName.Account.Doctype.Date.extension'
household == 'Household'
lastn     == 'LastName'
firstn    == 'FirstName'
acct      == 'Account'
doctype   == 'Doctype'
date      == 'Date'

line == '- /Volumes/HD/Organized Files/Cosby, Bill/Cosby.Bill..Profile.2006.doc'
household == 'Cosby, Bill'
lastn     == 'Cosby'
firstn    == 'Bill'
acct      == ''
doctype   == 'Profile'
date      == '2006'
</snippet></ROW><ROW><id>15234561</id><snippet>rig = re.compile('[/.]')
rig.split(line)[-7:-1] 
</snippet></ROW><ROW><id>15234721</id><snippet>if lightbase &lt;= EE.EBaseDodge:
    print 'You rolled', lightbase, ', Miss!', 0, 'Damage!'
elif lightbase &gt; EE.ENickRange:
    print 'You rolled', lightbase, ', Hit!', EE.LightAttackDamage, 'Damage!'
elif lightbase &lt; EE.ENickRange:
    print 'You rolled', lightbase, ', Nicked!', EE.LightNicked, 'Damage!'
else:
    print lightbase
</snippet></ROW><ROW><id>15234721</id><snippet>lightbase &lt;= EE.EBaseDodge</snippet></ROW><ROW><id>15234721</id><snippet>EBase...</snippet></ROW><ROW><id>15234721</id><snippet> def EBaseDodge(self):
    return base_dodge
</snippet></ROW><ROW><id>15234721</id><snippet> if lightbase &lt;= EE.EBaseDodge():
    ...
</snippet></ROW><ROW><id>15234721</id><snippet>Enemystats</snippet></ROW><ROW><id>15234721</id><snippet>class EnemyStats:
    def Estats(self):
        #Keep this method to set all of the stats and add self. before them like this
        self.Ename = raw_input('Target Enemy Name: ');
        self.EBaseDodge = int(raw_input('Enter Enemy Dodge: '));
        self.EnemyEvasion = int(raw_input('Enter Enemy Evasion: '));
        self.ENickRange = (self.EBaseDodge + self.EnemyEvasion);
        ....
</snippet></ROW><ROW><id>15234721</id><snippet>self.</snippet></ROW><ROW><id>15234721</id><snippet>EnemyStats</snippet></ROW><ROW><id>15234721</id><snippet>EE = EnemyStats()
EE.Estats() # will prompt you for the values
</snippet></ROW><ROW><id>15234721</id><snippet>if lightbase &lt;= EE.EBaseDodge:
   ...
</snippet></ROW><ROW><id>15234919</id><snippet>sorted(str,key=lambda x: int(x[0]))
</snippet></ROW><ROW><id>15234919</id><snippet>lambda</snippet></ROW><ROW><id>15234919</id><snippet>digit_key</snippet></ROW><ROW><id>15235184</id><snippet>test2.py</snippet></ROW><ROW><id>15235184</id><snippet>myobj = getattr(module, "moduleclass")()
</snippet></ROW><ROW><id>15235287</id><snippet>.py</snippet></ROW><ROW><id>15235396</id><snippet>source = [4,2,1,10,5,3,100]
for i in range(len(source)):
    mini = min(source[i:]) #find minimum element
    min_index = source[i:].index(mini) #find index of minimum element
    source[i + min_index] = source[i] #replace element at min_index with first element
    source[i] = mini                  #replace first element with min element
print source
</snippet></ROW><ROW><id>15235396</id><snippet>[1, 2, 3, 4, 5, 10, 100]
</snippet></ROW><ROW><id>15235475</id><snippet>socket.setdefaulttimeout()</snippet></ROW><ROW><id>15235475</id><snippet>RobotFileParser</snippet></ROW><ROW><id>15235475</id><snippet>from urllib.robotparser import RobotFileParser
import urllib.request

class TimoutRobotFileParser(RobotFileParser):
    def __init__(self, url='', timeout=60):
        super().__init__(url)
        self.timeout = 60

    def read(self):
        """Reads the robots.txt URL and feeds it to the parser."""
        try:
            f = urllib.request.urlopen(self.url, timeout=self.timeout)
        except urllib.error.HTTPError as err:
            if err.code in (401, 403):
                self.disallow_all = True
            elif err.code &gt;= 400:
                self.allow_all = True
        else:
            raw = f.read()
            self.parse(raw.decode("utf-8").splitlines())
</snippet></ROW><ROW><id>15235606</id><snippet>.select</snippet></ROW><ROW><id>15235606</id><snippet>.select()</snippet></ROW><ROW><id>15235606</id><snippet>self</snippet></ROW><ROW><id>15235606</id><snippet>class Page(object):
    def __init__(self, name, title):
        self.name   = name
        self.title  = title
        self.selected = False

    def select(self):
        for Page in Pages:
            Page.selected = False
        self.selected = True
</snippet></ROW><ROW><id>15235606</id><snippet>&gt;&gt;&gt; Pages = Pages()
&gt;&gt;&gt; Pages.index
&lt;__main__.Page object at 0x10a0b6cd0&gt;
&gt;&gt;&gt; Pages.index.selected
False
&gt;&gt;&gt; Pages.index.select()
&gt;&gt;&gt; Pages.index.selected
True
&gt;&gt;&gt; Pages.faq.select()
&gt;&gt;&gt; Pages.index.selected
False
</snippet></ROW><ROW><id>15235606</id><snippet>Pages</snippet></ROW><ROW><id>15235606</id><snippet>Pages</snippet></ROW><ROW><id>15235606</id><snippet>Pages</snippet></ROW><ROW><id>15235718</id><snippet>percent = (int(pyc) / int(tpy)) * 100;
</snippet></ROW><ROW><id>15235718</id><snippet>input()</snippet></ROW><ROW><id>15235718</id><snippet>raw_input()</snippet></ROW><ROW><id>15235718</id><snippet>input()</snippet></ROW><ROW><id>15235853</id><snippet>.</snippet></ROW><ROW><id>15235853</id><snippet>import os

root = "/Users/Siddhartha/Desktop/py scripts"
for item in os.listdir(root):
    if not item.startswith('.') and os.path.isfile(os.path.join(root, item)):
        print item
</snippet></ROW><ROW><id>15235873</id><snippet>controller</snippet></ROW><ROW><id>15235873</id><snippet>self</snippet></ROW><ROW><id>15235873</id><snippet>__init__</snippet></ROW><ROW><id>15235873</id><snippet>LoginPage</snippet></ROW><ROW><id>15235873</id><snippet>self.controller = controller
</snippet></ROW><ROW><id>15236282</id><snippet>results_matrix[j] = (line.rstrip('\n'))</snippet></ROW><ROW><id>15236282</id><snippet>results_matrix[j]</snippet></ROW><ROW><id>15236282</id><snippet>results_matrix[j] = ""</snippet></ROW><ROW><id>15236282</id><snippet>for</snippet></ROW><ROW><id>15236282</id><snippet>results_matrix[j] = results_matrix[j] + line</snippet></ROW><ROW><id>15236282</id><snippet>rstrip</snippet></ROW><ROW><id>15236334</id><snippet>from matplotlib.pylab import *
import matplotlib.cm as cm
import matplotlib.patches as patches

min_val = 0
max_val = 50

my_cmap = cm.get_cmap('jet') # or any other one
norm = matplotlib.colors.Normalize(min_val, max_val) # the color maps work for [0, 1]

x_i = 15
color_i = my_cmap(norm(x_i)) # returns an rgba value

rect = patches.Rectangle((.5, .5), .25, .25, color=color_i) # make your rectangle

cmmapable = cm.ScalarMappable(norm, my_cmap)
cmmapable.set_array(range(min_val, max_val))

figure()
ax = gca()
ax.add_patch(rect)
colorbar(cmmapable)
show()
</snippet></ROW><ROW><id>15236401</id><snippet>return True</snippet></ROW><ROW><id>15236401</id><snippet>else</snippet></ROW><ROW><id>15236401</id><snippet>isPrime</snippet></ROW><ROW><id>15236528</id><snippet>Toplevel</snippet></ROW><ROW><id>15236528</id><snippet>Frame</snippet></ROW><ROW><id>15236528</id><snippet>class MainWindow:
    #...
    def edit(self):
        EditWindow()

class EditWindow(Toplevel):
    def __init__(self):
        Toplevel.__init__(self)
        self.add = Button(self, text="ADD", command=self.add)
        self.remove = Button(self, text="REMOVE", command=self.remove)
        self.add.pack()
        self.remove.pack()
</snippet></ROW><ROW><id>15236545</id><snippet>http://localhost:8000/MyApplicationName/controller</snippet></ROW><ROW><id>15236545</id><snippet>http://localhost:8000/myapplicationname/controller</snippet></ROW><ROW><id>15236597</id><snippet>re.IGNORECASE</snippet></ROW><ROW><id>15236597</id><snippet>import re
re.search('name', 'Name', re.IGNORECASE)
re.search('name', 'nAMe', re.IGNORECASE)
re.search('name', 'NAme', re.IGNORECASE)
</snippet></ROW><ROW><id>15236630</id><snippet>BiddingList</snippet></ROW><ROW><id>15236630</id><snippet>job_id</snippet></ROW><ROW><id>15236630</id><snippet>contractor_id</snippet></ROW><ROW><id>15236630</id><snippet>job = JobListing(jobname="Test Job")
job.contractors.append(joe)
job.contractors.append(bob)
print bob.jobs
&gt; [&lt;JobListing "Test Job"&gt;]
bob.jobs.append(another_job)
print bob.jobs
&gt; [&lt;JobListing "Test Job"&gt;, &lt;JobListing "Another Job"&gt;]
</snippet></ROW><ROW><id>15236630</id><snippet>role</snippet></ROW><ROW><id>15236630</id><snippet>JobListing</snippet></ROW><ROW><id>15236630</id><snippet>__init__</snippet></ROW><ROW><id>15236630</id><snippet>class JobListing(Base):
    __tablename__ = 'joblist'
    id = Column(Integer, primary_key=True)
    jobname = Column(String(80), unique=True)
    biddate = Column(DateTime)

obj = JobListing(jobname="Test Job", biddate=datetime.now())
</snippet></ROW><ROW><id>15236695</id><snippet>select</snippet></ROW><ROW><id>15236695</id><snippet>recv()</snippet></ROW><ROW><id>15236695</id><snippet>select</snippet></ROW><ROW><id>15236695</id><snippet>select.select()</snippet></ROW><ROW><id>15236695</id><snippet>select.select()</snippet></ROW><ROW><id>15236695</id><snippet>select.select()</snippet></ROW><ROW><id>15236695</id><snippet>select.select()</snippet></ROW><ROW><id>15236695</id><snippet>s</snippet></ROW><ROW><id>15236695</id><snippet>accept()</snippet></ROW><ROW><id>15236695</id><snippet>connections</snippet></ROW><ROW><id>15236695</id><snippet>continue</snippet></ROW><ROW><id>15236695</id><snippet>select.select()</snippet></ROW><ROW><id>15236695</id><snippet>recv()</snippet></ROW><ROW><id>15236695</id><snippet>1024</snippet></ROW><ROW><id>15236695</id><snippet>select.select()</snippet></ROW><ROW><id>15236695</id><snippet>recv()</snippet></ROW><ROW><id>15236695</id><snippet>select.select()</snippet></ROW><ROW><id>15236695</id><snippet>send()</snippet></ROW><ROW><id>15236695</id><snippet>q != i</snippet></ROW><ROW><id>15236695</id><snippet>s</snippet></ROW><ROW><id>15236695</id><snippet>connections</snippet></ROW><ROW><id>15236695</id><snippet>select.select()</snippet></ROW><ROW><id>15236695</id><snippet>select.select()</snippet></ROW><ROW><id>15236695</id><snippet>send()</snippet></ROW><ROW><id>15236695</id><snippet>send()</snippet></ROW><ROW><id>15236695</id><snippet>recv()</snippet></ROW><ROW><id>15236695</id><snippet>connections</snippet></ROW><ROW><id>15236695</id><snippet>connections = []
buffered_output = {}

while True:
    rlist,wlist,xlist = select.select(connections + [s],buffered_output.keys(),[])
    for i in rlist:
        if i == s:
            conn,addr = s.accept()
            connections.append(conn)
            continue
        try:
            data = i.recv(1024)
        except socket.error:
            data = ""
        if data:
            for q in connections:
                if q != i:
                    buffered_output[q] = buffered_output.get(q, b"") + data
        else:
            i.close()
            connections.remove(i)
            if i in buffered_output:
                del buffered_output[i]
    for i in wlist:
        if i not in buffered_output:
            continue
        bytes_sent = i.send(buffered_output[i])
        buffered_output[i] = buffered_output[i][bytes_sent:]
        if not buffered_output[i]:
            del buffered_output[i]
</snippet></ROW><ROW><id>15236695</id><snippet>select</snippet></ROW><ROW><id>15236695</id><snippet>recv()</snippet></ROW><ROW><id>15236695</id><snippet>send()</snippet></ROW><ROW><id>15236695</id><snippet>select.select()</snippet></ROW><ROW><id>15236695</id><snippet>send()</snippet></ROW><ROW><id>15236695</id><snippet>recv()</snippet></ROW><ROW><id>15236695</id><snippet>select.select()</snippet></ROW><ROW><id>15236695</id><snippet>accept()</snippet></ROW><ROW><id>15236695</id><snippet>libev</snippet></ROW><ROW><id>15236695</id><snippet>select.select()</snippet></ROW><ROW><id>15236695</id><snippet>select</snippet></ROW><ROW><id>15236695</id><snippet>select</snippet></ROW><ROW><id>15236955</id><snippet>ln: /usr/bin/python: File exists
</snippet></ROW><ROW><id>15236955</id><snippet>-bash: /usr/bin/python: No such file or directory
</snippet></ROW><ROW><id>15236955</id><snippet>sudo rm /usr/bin/python    # because that's a corrupted file
sudo ln -s /usr/bin/python2.7 /usr/bin/python    # this line will work if your file /usr/bin/python2.7 is OK.
</snippet></ROW><ROW><id>15237018</id><snippet>mkdirs("my new dir")</snippet></ROW><ROW><id>15237018</id><snippet>python directory-create.py mydirname</snippet></ROW><ROW><id>15237018</id><snippet>import os
import sys

def mkdirs(newdir):
    os.makedirs('/Users/bob/PycharmProjects/server-scripts/test/' + newdir)
    os.rename('/Users/bob/PycharmProjects/server-scripts/test/' + newdir, '/Users/bob/PycharmProjects/server-scripts/test/www.' + newdir + '.com')
    print 'test output'

if len(sys.argv) &lt; 2:
    print "No directory name specified!"
    sys.exit(1)
else:
    dirname = sys.argv[1]
    mkdirs(dirname)
</snippet></ROW><ROW><id>15237023</id><snippet>romberg</snippet></ROW><ROW><id>15237196</id><snippet>resize</snippet></ROW><ROW><id>15237196</id><snippet>get_data_as_array</snippet></ROW><ROW><id>15237196</id><snippet>a.shape</snippet></ROW><ROW><id>15237196</id><snippet>get_data_as_array</snippet></ROW><ROW><id>15237196</id><snippet>self._arr.copy()</snippet></ROW><ROW><id>15237196</id><snippet>resize</snippet></ROW><ROW><id>15237196</id><snippet>class DynamicArray(object):

    _data = np.empty(1)
    data = _data[:0]
    len = 0
    scale_factor = 2

    def append(self, values):
        old_data = len(self.data)
        total_data = len(values) + old_data
        total_storage = len(self._data)
        if total_storage &lt; total_data:
            while total_storage &lt; total_data:
                total_storage = np.ceil(total_storage * self.scale_factor)
            self._data = np.empty(total_storage)
            self._data[:old_data] = self.data

        self._data[old_data:total_data] = values
        self.data = self._data[:total_data]
</snippet></ROW><ROW><id>15237196</id><snippet>_data</snippet></ROW><ROW><id>15237244</id><snippet>if (str(self.e3.config('textvariable')[-1]) == 'Off'):
</snippet></ROW><ROW><id>15237282</id><snippet>class Record(object):
    def __init__(self, x, y, z):
        pass # code goes here
    def get_record(id):
        pass # code goes here
</snippet></ROW><ROW><id>15237282</id><snippet>get_record()</snippet></ROW><ROW><id>15237282</id><snippet>__index__()</snippet></ROW><ROW><id>15237566</id><snippet>Thread</snippet></ROW><ROW><id>15237566</id><snippet>import time
from threading import Thread

def foo():
    while True:
        print "Hello Matt"
        time.sleep(5)

def bar():
    while True:
        print "Hello world"
        time.sleep(1)

a = Thread(target=foo)
b = Thread(target=bar)
a.start()
b.start()
</snippet></ROW><ROW><id>15237883</id><snippet>mymodule.py</snippet></ROW><ROW><id>15237883</id><snippet>mymodule</snippet></ROW><ROW><id>15237883</id><snippet>__init__.py</snippet></ROW><ROW><id>15237883</id><snippet>__init__.py</snippet></ROW><ROW><id>15237883</id><snippet>mypackage/__init__.py</snippet></ROW><ROW><id>15237883</id><snippet>mypackage</snippet></ROW><ROW><id>15237883</id><snippet>__init__.py</snippet></ROW><ROW><id>15237883</id><snippet>__init__</snippet></ROW><ROW><id>15237883</id><snippet>toplevel/
    mymodule/
        __init__.py     # put code here for mymodule
        submodule.py    # put code here for mymodule.submodule
</snippet></ROW><ROW><id>15237883</id><snippet>toplevel</snippet></ROW><ROW><id>15237976</id><snippet>def addr(x,y,m,n):
  """
  Given an MxN matrix stored in a 1-d sequence,
  return the index of (possibly wrapped) X,Y
  """
  return (y%n)*m+(x%m)
</snippet></ROW><ROW><id>15237976</id><snippet>def getAdjacentCells(x,y):
  adjacentlist = []
  for dx in (-1, 0, +1):
    for dy in (-1, 0, +1):
      if(dx != 0 or dy != 0):
        adjacentlist.append(addr(x+dx, y+dy, 4, 4))
  return adjacentlist
</snippet></ROW><ROW><id>15237976</id><snippet># 5
assert sorted(getAdjacentCells(1,1)) == [0,1,2,4,6,8,9,10]
# 7
assert sorted(getAdjacentCells(3,1)) == [0, 2, 3, 4, 6, 8, 10, 11]
# 15
assert sorted(getAdjacentCells(3,3)) == [0, 2, 3, 8, 10, 11, 12, 14]
</snippet></ROW><ROW><id>15237981</id><snippet>open</snippet></ROW><ROW><id>15237981</id><snippet>import codecs
fout = codecs.open('data.txt','w','utf-8')
</snippet></ROW><ROW><id>15238097</id><snippet>seq = (1, 2, 4, 8, 16, 32, 64)

def compare(a, b):
    print('%s ~ %s' % (a, b))

if __name__ == '__main__':
    for i, item in enumerate(seq, start=1):
        for other in seq[i:]:
            compare(item, other)
</snippet></ROW><ROW><id>15238097</id><snippet>1 ~ 2
1 ~ 4
1 ~ 8
1 ~ 16
1 ~ 32
1 ~ 64
2 ~ 4
2 ~ 8
2 ~ 16
2 ~ 32
2 ~ 64
4 ~ 8
4 ~ 16
4 ~ 32
4 ~ 64
8 ~ 16
8 ~ 32
8 ~ 64
16 ~ 32
16 ~ 64
32 ~ 64
</snippet></ROW><ROW><id>15238097</id><snippet>import itertools

# ...

for a, b in itertools.combinations(seq, 2):
    compare(a, b)
</snippet></ROW><ROW><id>15238323</id><snippet>fetchall()</snippet></ROW><ROW><id>15238323</id><snippet>for</snippet></ROW><ROW><id>15238323</id><snippet>fetchall</snippet></ROW><ROW><id>15238323</id><snippet>execute</snippet></ROW><ROW><id>15238323</id><snippet>i = 0
C = []    
for row in cursor.fetchall() :
    c[i] = row[0]
    i += 1
</snippet></ROW><ROW><id>15238323</id><snippet>for el in C</snippet></ROW><ROW><id>15238323</id><snippet>for row in cursor.fetchall()</snippet></ROW><ROW><id>15238332</id><snippet>from collections import Counter
import re

reg = re.compile('\S{4,}')

s = "hello this is hello this is baby baby baby baby hello"
c = Counter(ma.group() for ma in reg.finditer(s))
print c
</snippet></ROW><ROW><id>15238332</id><snippet>Counter({'baby': 4, 'hello': 3, 'this': 2})
</snippet></ROW><ROW><id>15238332</id><snippet>from collections import defaultdict
d = defaultdict(int)

s = "hello this is hello this is baby baby baby baby hello"

for w in s.split():
    if len(w)&gt;=4:
        d[w] += 1

print d
</snippet></ROW><ROW><id>15238410</id><snippet>exp = 20 # the line where text need to be added or exp that calculates it for ex %2

with open(filename, 'r') as f:
    lines = f.readlines()

with open(filename, 'w') as f:
    for i,line in enumerate(lines):
        if i == exp:
            f.write('------')
        f.write(line)
</snippet></ROW><ROW><id>15238410</id><snippet>def update_file(filename, ln):
    with open(filename, 'r') as f:
        lines = f.readlines()

    with open(filename, 'w') as f:
        for idx,line in enumerate(lines):
            (idx in ln and f.write('------'))
            f.write(line)
</snippet></ROW><ROW><id>15238449</id><snippet>total += int(entry)</snippet></ROW><ROW><id>15238449</id><snippet>num += 1</snippet></ROW><ROW><id>15238449</id><snippet>while</snippet></ROW><ROW><id>15238738</id><snippet>arc = open('file_name.txt').readlines()[0].split('\r')

#Do what you want with the 7th line i.e. arc[6]

new_arc = open('file_name.txt','w')
for line in arc:
    new_arc.write(line)
    new_arc.write('\n')

new_arc.close()
</snippet></ROW><ROW><id>15238942</id><snippet>form_valid</snippet></ROW><ROW><id>15238942</id><snippet>form_valid</snippet></ROW><ROW><id>15239022</id><snippet>width, height = im.size
pixels = [pix[i, j] for i in range(width) for j in range(height)]
</snippet></ROW><ROW><id>15239074</id><snippet>run</snippet></ROW><ROW><id>15239074</id><snippet>run</snippet></ROW><ROW><id>15239074</id><snippet>def run():
    global run
    run = True
    pass
</snippet></ROW><ROW><id>15239074</id><snippet>run()</snippet></ROW><ROW><id>15239074</id><snippet>    self.menu = makeMenu(["START GAME", lambda: run()], ["CONTROLS", lambda: Help(screen)], ["QUIT GAME", sys.exit])
</snippet></ROW><ROW><id>15239074</id><snippet>is_running</snippet></ROW><ROW><id>15239074</id><snippet>start_running</snippet></ROW><ROW><id>15239178</id><snippet>&gt;&gt;&gt; def foo(f):
...   def bar(i):
...     if i == 1:
...       raise Exception()
...     return f(i)
...   return bar
...
&gt;&gt;&gt; @foo
... def sumtil(i):
...     if i == 1:
...         return 1
...     else:
...         return i+sumtil(i-1)
...
&gt;&gt;&gt; sumtil(3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 5, in bar
  File "&lt;stdin&gt;", line 6, in sumtil
  File "&lt;stdin&gt;", line 5, in bar
  File "&lt;stdin&gt;", line 6, in sumtil
  File "&lt;stdin&gt;", line 4, in bar
Exception
&gt;&gt;&gt;
</snippet></ROW><ROW><id>15239178</id><snippet>def foo(f):
  def bar(*args,**kwargs):
    return f(*args,**kwargs)
  return bar
</snippet></ROW><ROW><id>15239178</id><snippet>1000</snippet></ROW><ROW><id>15239178</id><snippet>500</snippet></ROW><ROW><id>15239178</id><snippet>334</snippet></ROW><ROW><id>15239345</id><snippet>my_str = "/projects/myproject/"
matches = re.findall("/(.+?)/(.+)/",my_str)
print matches  #prints ['projects','myproject']
</snippet></ROW><ROW><id>15239644</id><snippet>lxml</snippet></ROW><ROW><id>15239644</id><snippet>from lxml import etree

with open('test.xml') as f:
    tree = etree.parse(f)

# At this point, we can step through the xml file
# and parse it, here is an example of the `cntinfo` tag

for element in tree.iter('cntinfo'):
    for child in element.getchildren():
        print "{0.tag}: {0.text}".format(child)
</snippet></ROW><ROW><id>15239644</id><snippet>cntorg: Atherton Tablelands GIS
cntpos: GIS Coordinator
address: PO Box 1616, 8 Tolga Rd
city: Atherton
state: QLD
country: AUSTRALIA
postal: 4883
cntvoice: 07 40918600
cntfax: 07 40917035
cntemail: info@atgis.com.au
</snippet></ROW><ROW><id>15239644</id><snippet># First, we load the stylesheet
with open(r'd:\test.xsl') as f:
    temp = etree.parse(f)
    style_sheet = etree.XSLT(temp)

# Apply it to the previously parsed document tree:
converted_xml = style_sheet(tree)

# Print the results:
str(converted_xml)
</snippet></ROW><ROW><id>15239644</id><snippet>'"",    "&lt;&gt;",    "ATGISTablelands Regional Council"\r"&lt;&gt;",    "EPSG",
  "GDA94GRS80Map Grid of AustraliaZone 55 (144E - 150E)"\r"2012",    "Completed"
\r"OngoingCompleted",    "As RequiredAs Required"\r"FileType:",    "Format:Size"
,    "Internal Use Only"\r"~TBC~",    "Metadata imported.L:\\Data_Admin\\Metadat
aGenerator\\trc_Metadata_Template.xml2012120615341400",    "~TBC~",    "~TBC~",
   "~TBC~",    "~TBC~"\r"Atherton Tablelands GIS",    "GIS Coordinator",    "PO
Box 1616, 8 Tolga Rd",    "Atherton",    "QLD",    "AUSTRALIA",    "4883",    "0
7 40918600",    "07 40917035",    "info@atgis.com.au"\r""\r'
</snippet></ROW><ROW><id>15240323</id><snippet>di = [('Dates', 'Rates', 'Items'),
      ('2013/03/07', '$114', 'Tissot'),
      ('2013/03/07', '$140', 'Adidas'),
      ('2013/03/07', '$344', 'Nike'),
      ('', '', ''),
      ('', '', ''),
      ('','The rate for EVERY item is FIXED', 'No RETURN or EXCHANGE!')]

d2 = []
for x in di:
    if len(''.join(x)) == 0:
        break
    else:
        d2.append(x)

print (d2)
</snippet></ROW><ROW><id>15240323</id><snippet>[('Dates', 'Rates', 'Items'), ('2013/03/07', '$114', 'Tissot'), ('2013/03/07', '
$140', 'Adidas'), ('2013/03/07', '$344', 'Nike')]
</snippet></ROW><ROW><id>15240486</id><snippet>import string

from collections import Counter

some_text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque fringilla augue ac metus laoreet quis imperdiet velit congue. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Quisque tincidunt lorem ut justo fermentum adipiscing. Nullam ullamcorper eros in arcu tincidunt non scelerisque ligula molestie. Vestibulum imperdiet facilisis nisi, et sodales leo sodales at. In hac habitasse platea dictumst."

letters = []
for i in some_text:
   # Each "i" is a letter or space
   if i in string.letters:
      # only collect letters, not punctuation marks or spaces
      letters.append(i)

# count how many of each
letter_count = Counter(letters)

# For each letter, print the count:

for letter,count in letter_count.iteritems():
    print "{}: {}".format(letter,count)
</snippet></ROW><ROW><id>15240486</id><snippet>C: 1
I: 1
L: 1
N: 1
Q: 1
P: 1
V: 2
a: 24
c: 19
b: 5
e: 44
d: 10
g: 6
f: 4
i: 44
h: 2
j: 1
m: 17
l: 27
o: 17
n: 18
q: 4
p: 10
s: 32
r: 19
u: 34
t: 31
v: 1
</snippet></ROW><ROW><id>15240486</id><snippet>letters = []

cur.execute(some_query) # See the Python database API for what is going on here
results = cur.fetchone()

while results:
   the_text = results[0] # if its the first column
   for i in the_text.split():
       # By default, split() will separate on whitespace,
       # so each i is a word.
       for letter in i:
           if letter in string.letters:
               letters.append(letter)

    results = cur.fetchone() # get the next result
</snippet></ROW><ROW><id>15241427</id><snippet>category</snippet></ROW><ROW><id>15241427</id><snippet>@category(Test)
def f():
    ...
</snippet></ROW><ROW><id>15241427</id><snippet>def f():
   ...
f = category(Test)(f)
</snippet></ROW><ROW><id>15241427</id><snippet>category</snippet></ROW><ROW><id>15241465</id><snippet>def done(self, request, form_list, id=None)</snippet></ROW><ROW><id>15241484</id><snippet>myStr = '{0} int and {1} string and {2} list...'
mystr.format(10, 'string value', range(10)
</snippet></ROW><ROW><id>15241484</id><snippet>def print_data(age, name):
    print '{0} is {1} years old'.format(name, age) 
    print 'Who is {0}?'.format(name)

print_data(22, 'Depak')
</snippet></ROW><ROW><id>15241542</id><snippet>eval</snippet></ROW><ROW><id>15241542</id><snippet>s = "&gt; 4"
if eval("5"+s):
    print("Yes it is.")
</snippet></ROW><ROW><id>15241542</id><snippet>eval</snippet></ROW><ROW><id>15241542</id><snippet>eval</snippet></ROW><ROW><id>15241570</id><snippet>list(chain(*(product(*imap(str.split, e)) for e in data)))
</snippet></ROW><ROW><id>15241570</id><snippet>&gt;&gt;&gt; from pprint import PrettyPrinter
&gt;&gt;&gt; pp = PrettyPrinter(indent = 4)
&gt;&gt;&gt; data = [('Date', 'Type', 'Product'),
        ('2013/03/07', 'Electronic', 'TV, Radio, Microwave'),
        ('2013/03/07', 'leather', 'Gucci Wallet')]
&gt;&gt;&gt; from itertools import izip, imap, product, chain
&gt;&gt;&gt; data = list(chain(*(product(*imap(str.split, e)) for e in data)))
&gt;&gt;&gt; pp.pprint(data)
[   ('Date', 'Type', 'Product'),
    ('2013/03/07', 'Electronic', 'TV,'),
    ('2013/03/07', 'Electronic', 'Radio,'),
    ('2013/03/07', 'Electronic', 'Microwave'),
    ('2013/03/07', 'leather', 'Gucci'),
    ('2013/03/07', 'leather', 'Wallet')]
</snippet></ROW><ROW><id>15241570</id><snippet>&gt;&gt;&gt; from operator import methodcaller
&gt;&gt;&gt; list(chain(*(product(*imap(methodcaller("split", ","), e)) for e in data)))
</snippet></ROW><ROW><id>15241570</id><snippet>&gt;&gt;&gt; list(chain(*(product(*(s.split(",") for s in e)) for e in data)))
</snippet></ROW></DATA>