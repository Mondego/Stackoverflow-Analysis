<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>14077467</id><snippet>#open the file
f = open('file.txt')
lines = f.readlines()
lineNum = -1

#find the line to modify
for i, line in enumerate(lines):
    if line.strip() == "John":
        lineNum = i
        break

if lineNum == -1:
    #Line not found, handle the error..

#modify the buffer with the new data
newtasklist = [taskentry, hexstr, monthentry, dayentry, dateentry, activityentry]
for task in newtasklist:
    lines[lineNum] = task
    lineNum += 1

#or if you want to remove the task list :
lines = lines[:lineNum] + [lineNum + 7:]

# and write everything back
with open('file.txt', 'w') as file:
    file.writelines(lines)
</snippet></ROW><ROW><id>14077469</id><snippet>set_index</snippet></ROW><ROW><id>14077469</id><snippet>In [11]: df.set_index('date')
Out[11]: 
                     AAPL  GOOG   IBM   XOM
date                                  
2011-01-13 16:00:00     0     0  4000     0
2011-01-26 16:00:00     0  1000  4000     0
2011-02-02 16:00:00     0  1000  4000     0
2011-02-10 16:00:00     0  1000  4000  4000
2011-03-03 16:00:00     0     0  1800  4000
2011-06-03 16:00:00     0     0  3300  4000
2011-05-03 16:00:00     0     0     0  4000
2011-06-10 16:00:00  1200     0     0  4000
2011-08-01 16:00:00  1200     0     0  4000
2011-12-20 16:00:00     0     0     0  4000
</snippet></ROW><ROW><id>14077536</id><snippet>dict</snippet></ROW><ROW><id>14077536</id><snippet>dict</snippet></ROW><ROW><id>14077536</id><snippet>dict</snippet></ROW><ROW><id>14077536</id><snippet>dict1 = {k:v for (k, v) in dict1.iteritems() if all('my_string' in e for e in v)}
</snippet></ROW><ROW><id>14077536</id><snippet>dict</snippet></ROW><ROW><id>14077536</id><snippet>for k, v in dict1.copy():
    if all('my_string' in e for e in v):
        del dict1[k]
</snippet></ROW><ROW><id>14077536</id><snippet>list</snippet></ROW><ROW><id>14077536</id><snippet>tuple</snippet></ROW><ROW><id>14077536</id><snippet>for k, v in dict1.items():
    if all('my_string' in e for e in v):
        del dict1[k]
</snippet></ROW><ROW><id>14077536</id><snippet>list</snippet></ROW><ROW><id>14077536</id><snippet>for k in dict1.keys():
    if all('my_string' in e for e in dict1[k]):
        del dict1[k]
</snippet></ROW><ROW><id>14077536</id><snippet>list</snippet></ROW><ROW><id>14077536</id><snippet>dict</snippet></ROW><ROW><id>14077536</id><snippet>dict</snippet></ROW><ROW><id>14077536</id><snippet>items</snippet></ROW><ROW><id>14077536</id><snippet>keys</snippet></ROW><ROW><id>14077536</id><snippet>dict</snippet></ROW><ROW><id>14077536</id><snippet>list(dict1.items())</snippet></ROW><ROW><id>14077536</id><snippet>list(dict1.keys())</snippet></ROW><ROW><id>14077658</id><snippet>six</snippet></ROW><ROW><id>14077658</id><snippet>3to2</snippet></ROW><ROW><id>14077658</id><snippet>__future__</snippet></ROW><ROW><id>14077658</id><snippet>os.system</snippet></ROW><ROW><id>14077658</id><snippet>subprocess</snippet></ROW><ROW><id>14077658</id><snippet>subprocess.check_call(["python", "py2.py"])
</snippet></ROW><ROW><id>14077658</id><snippet>os.system</snippet></ROW><ROW><id>14077658</id><snippet>py2.py</snippet></ROW><ROW><id>14077658</id><snippet>stdin</snippet></ROW><ROW><id>14077658</id><snippet>stdout</snippet></ROW><ROW><id>14077658</id><snippet>subprocess</snippet></ROW><ROW><id>14077658</id><snippet>py2.py</snippet></ROW><ROW><id>14077658</id><snippet>py2.py</snippet></ROW><ROW><id>14077658</id><snippet>py3.py</snippet></ROW><ROW><id>14077658</id><snippet>py3.py</snippet></ROW><ROW><id>14077658</id><snippet>py2output = subprocess.check_output(["python", "py2.py", my_args[0]])
</snippet></ROW><ROW><id>14077658</id><snippet>py2.py</snippet></ROW><ROW><id>14077658</id><snippet>print</snippet></ROW><ROW><id>14077727</id><snippet>self</snippet></ROW><ROW><id>14077727</id><snippet>__init__</snippet></ROW><ROW><id>14077727</id><snippet>self</snippet></ROW><ROW><id>14077727</id><snippet>do</snippet></ROW><ROW><id>14077727</id><snippet>self</snippet></ROW><ROW><id>14077951</id><snippet>everything.sort(key=lambda x: (
    '/'.join(x['path'].split('/')[:-1]),
    x['type'],
    ''.join(x['path'].split('/')[-1:]),
  )
)
</snippet></ROW><ROW><id>14077983</id><snippet>year = 2012
month = 09
Departure_Date.objects.filter(date_from__year__gte=year,
                              date_from__month__gte=month,
                              date_to__year__lte=year,
                              date_to__month__lte=month)
</snippet></ROW><ROW><id>14077983</id><snippet>.extra</snippet></ROW><ROW><id>14077983</id><snippet>where = '%(year)s &gt;= YEAR(date_from) AND %(month)s &gt;= MONTH(date_from) \
        AND %(year)s &lt;= YEAR(date_to) AND %(month)s &lt;= MONTH(date_to)' % \
        {'year': year, 'month': month}
Departure_Date.objects.extra(where=[where])
</snippet></ROW><ROW><id>14077983</id><snippet>date_from='2012-11-01'
date_to='2013-03-17'
and input is
year=2013
month=1
</snippet></ROW><ROW><id>14077983</id><snippet>%(month)s &gt;= MONTH(date_from)</snippet></ROW><ROW><id>14077983</id><snippet>date_from</snippet></ROW><ROW><id>14077983</id><snippet>IF</snippet></ROW><ROW><id>14077983</id><snippet>where = '%(year)s &gt;= YEAR(date_from) AND IF(%(year)s &gt; YEAR(date_from), \
     IF(%(month)s &gt; MONTH(date_from), %(month)s &gt;= MONTH(date_from), %(month)s &lt; MONTH(date_from)), \
     IF(%(month)s &lt; MONTH(date_from), %(month)s &lt; MONTH(date_from), %(month)s &gt;= MONTH(date_from))) \
     AND %(year)s &lt;= YEAR(date_to) \
     AND %(month)s &lt;= MONTH(date_to)' % \
     {'year': year, 'month': month}
Departure_Date.objects.extra(where=[where])
</snippet></ROW><ROW><id>14078125</id><snippet>in</snippet></ROW><ROW><id>14078125</id><snippet>COMPARE_OP 6</snippet></ROW><ROW><id>14078125</id><snippet>d['foo'] = 3</snippet></ROW><ROW><id>14078125</id><snippet>del d['foo']</snippet></ROW><ROW><id>14078125</id><snippet>'foo' in d</snippet></ROW><ROW><id>14078125</id><snippet>dict</snippet></ROW><ROW><id>14078125</id><snippet>hash</snippet></ROW><ROW><id>14078125</id><snippet>==</snippet></ROW><ROW><id>14078125</id><snippet>dict</snippet></ROW><ROW><id>14078134</id><snippet>2012-12-24T00:00:00Z</snippet></ROW><ROW><id>14078134</id><snippet>datetime</snippet></ROW><ROW><id>14078134</id><snippet>%A</snippet></ROW><ROW><id>14078134</id><snippet>strptime</snippet></ROW><ROW><id>14078134</id><snippet>In [1]: from datetime import datetime

In [2]: s = '2012-12-24T00:00:00Z'

In [3]: d = datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')

In [4]: '{0:%A}'.format(d)
Out[4]: 'Monday'
</snippet></ROW><ROW><id>14078134</id><snippet>In [8]: def createDayName(s):
   ...:     d = datetime.strptime(s, '%Y-%m-%dT%H:%M:%SZ')
   ...:     return '{0:%A}'.format(d)
   ...: 

In [9]: createDayName('2012-12-24T00:00:00Z')
Out[9]: 'Monday'

In [10]: createDayName('2012-12-30T23:59:59Z')
Out[10]: 'Sunday'
</snippet></ROW><ROW><id>14078134</id><snippet>timedelta</snippet></ROW><ROW><id>14078134</id><snippet>from datetime import datetime, timedelta

# This structure will allow us to append to our dictionary without
# there needing to be a key first (comes in handy)
from collections import defaultdict


def days_in_range(start, end, daysDict):
    # Convert your start/end dates
    start_d = datetime.strptime(start, '%Y-%m-%dT%H:%M:%SZ')
    end_d = datetime.strptime(end, '%Y-%m-%dT%H:%M:%SZ')

    # Now iterate over the days between those two dates, adding
    # an arbitrary value to the 'day' key of our dict
    for i in range((end_d - start_d).days + 1):
        day_name = '{0:%A}'.format(start_d + timedelta(days=i))
        daysDict[day_name].append(i)
    return daysDict


# Create your dictionary that will have a list as the default value
daysDict = defaultdict(list)

start = '2012-12-24T00:00:00Z'
end = '2012-12-30T23:59:59Z'

# I would probably reevaluate this part, but the reason for
# passing the dictionary itself to the function is so that
# it can better fit into situations where you have multiple events
# (although a class structure may be well-suited for this, but
# that may be overcomplicating things a bit :) )
daysDict = days_in_range(start, end, daysDict)

for day, value in daysDict.iteritems():
  print day, value
</snippet></ROW><ROW><id>14078134</id><snippet>Monday [0]
Tuesday [1]
Friday [4]
Wednesday [2]
Thursday [3]
Sunday [6]
Saturday [5]
</snippet></ROW><ROW><id>14078258</id><snippet>py2output = subprocess.check_output(['python','py2.py','-i', 'test.txt'])
</snippet></ROW><ROW><id>14078258</id><snippet>import sys
print sys.argv
</snippet></ROW><ROW><id>14078258</id><snippet>import subprocess
py2output = subprocess.check_output(['python', 'py2.py', '-i', 'test.txt'])
print('py2 said:', py2output)
</snippet></ROW><ROW><id>14078258</id><snippet>$ python3 py3.py
py2 said: b"['py2.py', '-i', 'test.txt']\n"
</snippet></ROW><ROW><id>14078258</id><snippet>py2output = subprocess.check_output([str('python py2.py '),'-i', 'test.txt'])
</snippet></ROW><ROW><id>14078258</id><snippet>str('python py2.py')</snippet></ROW><ROW><id>14078258</id><snippet>'python py2.py'</snippet></ROW><ROW><id>14078258</id><snippet>str</snippet></ROW><ROW><id>14078258</id><snippet>str</snippet></ROW><ROW><id>14078258</id><snippet>str</snippet></ROW><ROW><id>14078258</id><snippet>python py2.py</snippet></ROW><ROW><id>14078258</id><snippet>/usr/bin/python\ py2.py</snippet></ROW><ROW><id>14078258</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>14078258</id><snippet>py2.py</snippet></ROW><ROW><id>14078258</id><snippet>'</snippet></ROW><ROW><id>14078258</id><snippet>test.txt'</snippet></ROW><ROW><id>14078258</id><snippet>SyntaxError</snippet></ROW><ROW><id>14078258</id><snippet>EOL while scanning string literal</snippet></ROW><ROW><id>14078258</id><snippet>&gt;&gt;&gt; subprocess.check_output(["echo", "Hello World!"])
b'Hello World!\n'
</snippet></ROW><ROW><id>14078258</id><snippet>"echo"</snippet></ROW><ROW><id>14078258</id><snippet>"Hello World!"</snippet></ROW><ROW><id>14078258</id><snippet>-i</snippet></ROW><ROW><id>14078267</id><snippet>send</snippet></ROW><ROW><id>14078267</id><snippet>__get__()</snippet></ROW><ROW><id>14078267</id><snippet>&gt;&gt;&gt; dir(socket._socketobject.send)
['__class__', '__delattr__', '__delete__', '__doc__', '__format__', '__get__', '__getattribute__', '__hash__', '__init__', '__name__', '__new__', '__objclass__', '__reduce__', '__reduce_ex__', '__repr__', '__set__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__']
&gt;&gt;&gt; type(socket._socketobject.send)
&lt;type 'member_descriptor'&gt;
</snippet></ROW><ROW><id>14078276</id><snippet>cPickle.Pickler.dump</snippet></ROW><ROW><id>14078276</id><snippet>pickle</snippet></ROW><ROW><id>14078276</id><snippet>cPickle</snippet></ROW><ROW><id>14078276</id><snippet>import pickle
pickle.dumps(tracker)
</snippet></ROW><ROW><id>14078276</id><snippet>__reduce_ex__</snippet></ROW><ROW><id>14078276</id><snippet>__reduce__</snippet></ROW><ROW><id>14078365</id><snippet>Python 2.7.3 (default, Sep 26 2012, 21:51:14) 
&gt;&gt;&gt; def injected(self):
...     print 'injected'
... 
&gt;&gt;&gt; class A(object):
...     pass
... 
&gt;&gt;&gt; A.injected = injected
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.injected()
injected
&gt;&gt;&gt; def func2(self):
...     print 'func2'
... 
&gt;&gt;&gt; setattr(A, 'injected2', func2)
&gt;&gt;&gt; a.injected2()
func2
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14078596</id><snippet>numrefs</snippet></ROW><ROW><id>14078596</id><snippet>numrefs_index</snippet></ROW><ROW><id>14078596</id><snippet>in</snippet></ROW><ROW><id>14078596</id><snippet>def p4(base_num):
    numrefs = ['nums/89/202089/4', 'nums/39/205739/2', 'nums/94/203455/6']
    num_ignore = [150362, 147117]
    numrefs_index = dict((int(x.split('/')[2]), x) for x in numrefs)
    for line in file("num_ids.txt"):
        num = int(line)
        if num &gt; base_num and num not in num_ignore and num in numrefs_index:
            print numrefs_index[num]

if __name__ == "__main__":
    p4(203456)

# prints:
# nums/39/205739/2
</snippet></ROW><ROW><id>14078596</id><snippet>numrefs_index</snippet></ROW><ROW><id>14078596</id><snippet>{202089: 'nums/89/202089/4',
 203455: 'nums/94/203455/6',
 205739: 'nums/39/205739/2'}
</snippet></ROW><ROW><id>14078909</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-

import bisect
import math

primes = [2,3,5,7] 
searchedPrime=11
lookedPosition = 1 + int(math.sqrt(searchedPrime)) 

checkUntil = primes[:bisect.bisect_left(primes, lookedPosition)]
print "I just have to check %s positions: %s" % (len(checkUntil), checkUntil)
</snippet></ROW><ROW><id>14078909</id><snippet>I just have to check 2 positions: [2, 3]
</snippet></ROW><ROW><id>14078909</id><snippet>sqrt</snippet></ROW><ROW><id>14078909</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import bisect
import math

foundPrimes = [] 
def isPrime(number, otherPrimes):
  global foundPrimes
  lookedPosition = 1 + int(math.sqrt(number)) 
  formerPrimes = foundPrimes[:bisect.bisect_left(foundPrimes, lookedPosition)]
  for prime in formerPrimes:
    if prime &gt; 1 and number % prime == 0:
      return False
  return True

def getPrimes(upperLimit):
  for i in range(1, upperLimit):
      if isPrime(i, foundPrimes):
        foundPrimes.append(i)
  return foundPrimes

print "Primes: %s" % getPrimes(1000)
</snippet></ROW><ROW><id>14078909</id><snippet>Primes: [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]
</snippet></ROW><ROW><id>14078945</id><snippet>connectvpn()</snippet></ROW><ROW><id>14078945</id><snippet>disconnectvpn()</snippet></ROW><ROW><id>14079152</id><snippet>3</snippet></ROW><ROW><id>14079152</id><snippet>buly</snippet></ROW><ROW><id>14079152</id><snippet>screen.get_height()</snippet></ROW><ROW><id>14079152</id><snippet>buly</snippet></ROW><ROW><id>14079152</id><snippet>0</snippet></ROW><ROW><id>14079152</id><snippet>bulletGroup = [i for i in bulletGroup if i.buly &gt;= 0]
for shot in bulletGroup:
    shot.buly -= 3
</snippet></ROW><ROW><id>14079152</id><snippet>buly</snippet></ROW><ROW><id>14079152</id><snippet>bulletGroup = [i for i in bulletGroup if i.buly &lt; screen.get_height()]
for shot in bulletGroup:
    shot.buly += 3
</snippet></ROW><ROW><id>14079233</id><snippet>import numpy as np
a = np.empty((5000, 5000)
a = a[:, 3000:]
</snippet></ROW><ROW><id>14079233</id><snippet>In [31]: a = np.zeros((5000, 5000), dtype='d')
In [32]: whos
Variable   Type       Data/Info
-------------------------------
a          ndarray    5000x5000: 25000000 elems, type `float64`, 200000000 bytes (190 Mb)
In [33]: a = a[:, 3000:]
In [34]: whos
Variable   Type       Data/Info
-------------------------------
a          ndarray    5000x2000: 10000000 elems, type `float64`, 80000000 bytes (76 Mb)
</snippet></ROW><ROW><id>14079233</id><snippet>%timeit a=np.empty((5000,5000), dtype='d');  a=np.delete(a, np.r_[:3000], 1)
1 loops, best of 3: 404 ms per loop
%timeit a=np.empty((5000,5000), dtype='d');  a=a[:, 3000:]
10000 loops, best of 3: 39.3 us per loop
</snippet></ROW><ROW><id>14079328</id><snippet>locale</snippet></ROW><ROW><id>14079328</id><snippet>export LANG=en_US.UTF-8
</snippet></ROW><ROW><id>14079546</id><snippet>netsh wlan connect &lt;profile-name&gt; [name=&lt;ssid-name&gt;]
</snippet></ROW><ROW><id>14079546</id><snippet>name=&lt;ssid-name&gt;</snippet></ROW><ROW><id>14079546</id><snippet>import subprocess

def connect_to_network(name):
    p = subprocess.Popen(
        'netsh wlan connect {0}'.format(name),
        shell=True,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE)
    stdout, stderr = p.communicate()
    if 'Connection request was completed successfully' in stdout:
        # successfully connected
        return True
    else:
        # failed for some reason
        return False
</snippet></ROW><ROW><id>14079691</id><snippet>intro.rst</snippet></ROW><ROW><id>14079691</id><snippet>intro.rst</snippet></ROW><ROW><id>14079691</id><snippet>My Title</snippet></ROW><ROW><id>14079691</id><snippet>intro.rst</snippet></ROW><ROW><id>14079691</id><snippet>My Title
*********
</snippet></ROW><ROW><id>14079691</id><snippet>*</snippet></ROW><ROW><id>14080274</id><snippet>CREATE TABLE bikes (
    bike_id INTEGER AUTOINCREMENT PRIMARY KEY,
    manufacturer VARCHAR(20),
    price   FLOAT,
    ...
);

CREATE TABLE terrains (
    terrain_id INTEGER AUTOINCREMENT PRIMARY KEY,
    terrain VARCHAR(20),
    ...
);

CREATE TABLE handlebars (
    handlebar_id INTEGER AUTOINCREMENT PRIMARY KEY,
    handlebar VARCHAR(20),
    ...
);

CREATE TABLE bike_terrain (
    bike_id INTEGER,
    terrain_id INTEGER
);

CREATE TABLE bike_handlebar (
    bike_id INTEGER,
    handlebar_id INTEGER
);
</snippet></ROW><ROW><id>14080274</id><snippet>bikes</snippet></ROW><ROW><id>14080274</id><snippet>bike_terrain</snippet></ROW><ROW><id>14080274</id><snippet>SELECT
    b.manufacturer,
    b.price
FROM bikes b,
     terrains t,
     bike_terrain bt
WHERE b.bike_id    = bt.bike_id
  AND t.terrain_id = bt.terrain_id      
  AND t.terrain IN ('mountain', 'dirt', ...) -- this will be built dynamically
  ... -- add more for handlebars, etc...
</snippet></ROW><ROW><id>14080274</id><snippet>sqliteman</snippet></ROW><ROW><id>14080740</id><snippet>message_set</snippet></ROW><ROW><id>14080740</id><snippet>message_set</snippet></ROW><ROW><id>14080740</id><snippet>'1'</snippet></ROW><ROW><id>14080740</id><snippet>'2:4'</snippet></ROW><ROW><id>14080740</id><snippet>'1:3,6:9'</snippet></ROW><ROW><id>14080740</id><snippet>'3:*'</snippet></ROW><ROW><id>14080740</id><snippet>result, data = mail.fetch(str(message_id), "(RFC822)")
</snippet></ROW><ROW><id>14080840</id><snippet>def crawler():
    while True:
        x = tasks.get()
        try:
            print "Crawler: ",x
        finally:
            tasks.task_done()
</snippet></ROW><ROW><id>14080980</id><snippet>is</snippet></ROW><ROW><id>14080980</id><snippet>&gt;&gt;&gt; foo is bar
True
&gt;&gt;&gt; foo is other
False
</snippet></ROW><ROW><id>14080980</id><snippet>is</snippet></ROW><ROW><id>14080980</id><snippet>is not</snippet></ROW><ROW><id>14080980</id><snippet>x is y</snippet></ROW><ROW><id>14080980</id><snippet>x</snippet></ROW><ROW><id>14080980</id><snippet>y</snippet></ROW><ROW><id>14080980</id><snippet>x is not y</snippet></ROW><ROW><id>14080980</id><snippet>id()</snippet></ROW><ROW><id>14080980</id><snippet>&gt;&gt;&gt; id(foo)
4432316608
&gt;&gt;&gt; id(bar)
4432316608
&gt;&gt;&gt; id(other)
4432420232
</snippet></ROW><ROW><id>14081095</id><snippet>table.append(cursor.fetchall())
</snippet></ROW><ROW><id>14081180</id><snippet>»</snippet></ROW><ROW><id>14081180</id><snippet># -*- coding: utf-8 -*-
import re
...
</snippet></ROW><ROW><id>14081180</id><snippet>'''</snippet></ROW><ROW><id>14081180</id><snippet>"""</snippet></ROW><ROW><id>14081180</id><snippet>'</snippet></ROW><ROW><id>14081180</id><snippet>"</snippet></ROW><ROW><id>14081180</id><snippet>r'''(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()&lt;&gt;]+|\(([^\s()&lt;&gt;]+|(\([^\s()&lt;&gt;]+\)))*\))+(?:\(([^\s()&lt;&gt;]+|(\([^\s()&lt;&gt;]+\)))*\)|[^\s`!()\[\]{};:'".,&lt;&gt;?«»“”‘’]))'''
</snippet></ROW><ROW><id>14081214</id><snippet>__metaclass__</snippet></ROW><ROW><id>14081214</id><snippet>class CardContainerField(models.CommaSeparatedIntegerField, metaclass=models.SubfieldBase):
   ...
</snippet></ROW><ROW><id>14081402</id><snippet>struct</snippet></ROW><ROW><id>14081402</id><snippet>import struct

struct.pack('qii', # Format string  here.
            100, # Your 64-bit integer
            50, # Your first 32-bit integer
            25) # Your second 32-bit integer

# This will return the following:
'd\x00\x00\x00\x00\x00\x00\x002\x00\x00\x00\x19\x00\x00\x00'
</snippet></ROW><ROW><id>14081428</id><snippet>unicode</snippet></ROW><ROW><id>14081428</id><snippet>unicode</snippet></ROW><ROW><id>14081428</id><snippet>unicode</snippet></ROW><ROW><id>14081428</id><snippet>u'some unicode'</snippet></ROW><ROW><id>14081428</id><snippet>str</snippet></ROW><ROW><id>14081428</id><snippet>'some str'</snippet></ROW><ROW><id>14081428</id><snippet>unicode</snippet></ROW><ROW><id>14081428</id><snippet>str</snippet></ROW><ROW><id>14081428</id><snippet>str</snippet></ROW><ROW><id>14081428</id><snippet>bytes</snippet></ROW><ROW><id>14081428</id><snippet>unicode</snippet></ROW><ROW><id>14081428</id><snippet>str</snippet></ROW><ROW><id>14081428</id><snippet>input_string.decode('encoding')</snippet></ROW><ROW><id>14081428</id><snippet>unicode</snippet></ROW><ROW><id>14081428</id><snippet>output_string.encode('encoding')</snippet></ROW><ROW><id>14081428</id><snippet>cp-1252</snippet></ROW><ROW><id>14081428</id><snippet>utf-8</snippet></ROW><ROW><id>14081428</id><snippet>unicode</snippet></ROW><ROW><id>14081428</id><snippet>unicode</snippet></ROW><ROW><id>14081428</id><snippet>output.encode('cp1252')</snippet></ROW><ROW><id>14081428</id><snippet>str</snippet></ROW><ROW><id>14081428</id><snippet>str</snippet></ROW><ROW><id>14081428</id><snippet>unicode</snippet></ROW><ROW><id>14081428</id><snippet>utf-8</snippet></ROW><ROW><id>14081428</id><snippet>ascii</snippet></ROW><ROW><id>14081428</id><snippet>str</snippet></ROW><ROW><id>14081428</id><snippet>unicode</snippet></ROW><ROW><id>14081428</id><snippet>ascii</snippet></ROW><ROW><id>14081428</id><snippet>str</snippet></ROW><ROW><id>14081428</id><snippet>unicode</snippet></ROW><ROW><id>14081428</id><snippet>encode</snippet></ROW><ROW><id>14081428</id><snippet>decode</snippet></ROW><ROW><id>14081428</id><snippet>encode</snippet></ROW><ROW><id>14081544</id><snippet>:help map-expression</snippet></ROW><ROW><id>14081544</id><snippet>:noremap &lt;expr&gt; &lt;C-f&gt; empty(bufname('')) ? ':edit ' : ':tabnew '
</snippet></ROW><ROW><id>14081639</id><snippet>A = [[1,'a'],[1,'b'],[2,'c'],[2,'d'],[1,'e'],[2,'f']]
stack = [ [] ]
for level, item in A:
    while len(stack) &gt; level:
        stack.pop()
    while len(stack) &lt;= level:
        node = (item, [])
        stack[-1].append(node)
        stack.append(node[1])

result = stack[0]
</snippet></ROW><ROW><id>14081639</id><snippet>[('a', []), ('b', [('c', []), ('d', [])]), ('e', [('f', [])])]
</snippet></ROW><ROW><id>14081639</id><snippet>def convert(lst):
    return [ [x, convert(y)] if y else x for x, y in lst]

result = convert(stack[0])
print result
# ['a', ['b', ['c', 'd']], ['e', ['f']]]
</snippet></ROW><ROW><id>14081660</id><snippet>:vnoremap</snippet></ROW><ROW><id>14081660</id><snippet>:call</snippet></ROW><ROW><id>14081660</id><snippet>'&lt;,'&gt;</snippet></ROW><ROW><id>14081660</id><snippet>:help function-range-example</snippet></ROW><ROW><id>14081660</id><snippet>&lt;C-u&gt;</snippet></ROW><ROW><id>14081660</id><snippet>&lt;</snippet></ROW><ROW><id>14081660</id><snippet>&gt;</snippet></ROW><ROW><id>14081660</id><snippet>vim.current.buffer[lnum]</snippet></ROW><ROW><id>14081660</id><snippet>:vnoremap &lt;Leader&gt;s :&lt;C-u&gt;call Sort()&lt;CR&gt;
function! Sort()
    ...
    start = vim.current.buffer.mark('&lt;')[0]
    end = vim.current.buffer.mark('&gt;')[0]
</snippet></ROW><ROW><id>14081813</id><snippet>{{  list|get_number:value }}
</snippet></ROW><ROW><id>14081813</id><snippet>{{list.0}} or {{list.1}}
</snippet></ROW><ROW><id>14081945</id><snippet>whirlpool.py</snippet></ROW><ROW><id>14081945</id><snippet>AbstractChecksum encode = JacksumAPI.getChecksumInstance("whirlpool2");
</snippet></ROW><ROW><id>14082286</id><snippet>minidom</snippet></ROW><ROW><id>14082286</id><snippet>minidom</snippet></ROW><ROW><id>14082286</id><snippet>from xml.sax.handlers import ContentHandler
from xml.sax import parse

class MyContentHandler(ContentHandler):
    # override various ContentHandler methods as needed...


handler = MyContentHandler()
parse("mydata.xml", handler)
</snippet></ROW><ROW><id>14082286</id><snippet>ContentHandler</snippet></ROW><ROW><id>14082286</id><snippet>startElement</snippet></ROW><ROW><id>14082286</id><snippet>startElementNS</snippet></ROW><ROW><id>14082286</id><snippet>endElement</snippet></ROW><ROW><id>14082286</id><snippet>endElementNS</snippet></ROW><ROW><id>14082286</id><snippet>characters</snippet></ROW><ROW><id>14082390</id><snippet>gc.set_threshold()</snippet></ROW><ROW><id>14082390</id><snippet>In [2]: gc.get_threshold()
Out[2]: (700, 10, 10)
</snippet></ROW><ROW><id>14082390</id><snippet>gc.collect()</snippet></ROW><ROW><id>14082441</id><snippet>u'\x99\x8c\x85\x8d'</snippet></ROW><ROW><id>14082441</id><snippet>'\x99\x8c\x85\x8d'</snippet></ROW><ROW><id>14082441</id><snippet>latin-1</snippet></ROW><ROW><id>14082441</id><snippet>In [9]: x = u'\x99\x8c\x85\x8d'

In [10]: x.encode('latin-1')
Out[10]: '\x99\x8c\x85\x8d'
</snippet></ROW><ROW><id>14082441</id><snippet>'\xf9\xec\xe5\xed'</snippet></ROW><ROW><id>14082441</id><snippet>In [22]: x = u'\xf9\xec\xe5\xed'

In [23]: x.encode('latin-1').decode('cp1255')
Out[23]: u'\u05e9\u05dc\u05d5\u05dd'
</snippet></ROW><ROW><id>14082441</id><snippet>u'\xf9\xec\xe5\xed'</snippet></ROW><ROW><id>14082441</id><snippet>u'\u05e9\u05dc\u05d5\u05dd'</snippet></ROW><ROW><id>14082441</id><snippet>u'\x99\x8c\x85\x8d'</snippet></ROW><ROW><id>14082441</id><snippet>u'\u05e9\u05dc\u05d5\u05dd'</snippet></ROW><ROW><id>14082441</id><snippet>In [27]: u'\x99\x8c\x85\x8d'.encode('latin-1').decode('cp862')
Out[27]: u'\u05e9\u05dc\u05d5\u05dd'
</snippet></ROW><ROW><id>14082441</id><snippet>"""
Usage example: guess_chain_encodings.py "u'баба'" "u'\xe1\xe0\xe1\xe0'"
"""
import argparse
import binascii
import zlib
import ast
import collections
import itertools
import random

Errors = (IOError, UnicodeEncodeError, UnicodeError, LookupError,
          TypeError, ValueError, binascii.Error, zlib.error)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('start', type = ast.literal_eval, help = 'starting unicode')
    parser.add_argument('stop', type = ast.literal_eval, help = 'ending unicode')
    parser.add_argument('--all', '-a', action = 'store_true')    
    args = parser.parse_args()
    min_len = None
    for encs, text in breadth_first_search(args.start, args.all):
        if min_len is not None and len(encs) &gt; min_len:
            break
        if type(text) == type(args.stop) and text == args.stop:
            print(fmt(encs, args.start))
            min_len = len(encs)

def breadth_first_search(text, all = False):
    seen = set()
    tasks = collections.deque()
    tasks.append(([], text))
    while tasks:
        encs, text = tasks.popleft()
        for enc, newtext in candidates(text):
            if repr(newtext) not in seen:
                if not all:
                    seen.add(repr(newtext))
                newtask = encs+[enc], newtext
                tasks.append(newtask)
                yield newtask

def fmt(encs, text):
    encode_decode = itertools.cycle(['encode', 'decode'])
    if not isinstance(text, unicode):
        next(encode_decode)
    chain = '.'.join( "{f}('{e}')".format(f = func, e = enc)
                     for enc, func in zip(encs, encode_decode) )
    return '{t!r}.{c}'.format(t = text, c = chain)

def candidates(text):
    f = text.encode if isinstance(text, unicode) else text.decode
    results = []
    for enc in encodings:
        try:
            results.append((enc, f(enc)))
        except Errors as err:
            pass
    random.shuffle(results)
    for r in results:
        yield r

def all_encodings():
    modnames = set([modname for importer, modname, ispkg in pkgutil.walk_packages(
        path = [os.path.dirname(encodings.__file__)], prefix = '')])
    aliases = set(encodings.aliases.aliases.values())
    return modnames.union(aliases)

encodings = us.all_encodings()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>14082441</id><snippet>% guess_chain_encodings.py "u'\x99\x8c\x85\x8d'" "u'\u05e9\u05dc\u05d5\u05dd'" --all
</snippet></ROW><ROW><id>14082441</id><snippet>u'\x99\x8c\x85\x8d'.encode('latin_1').decode('cp862')
u'\x99\x8c\x85\x8d'.encode('charmap').decode('cp862')
u'\x99\x8c\x85\x8d'.encode('rot_13').decode('cp856')
</snippet></ROW><ROW><id>14082676</id><snippet>QGridLayout</snippet></ROW><ROW><id>14082676</id><snippet>QVBoxLayout</snippet></ROW><ROW><id>14082676</id><snippet>QHBoxLayout</snippet></ROW><ROW><id>14082676</id><snippet>addStretch</snippet></ROW><ROW><id>14082676</id><snippet>import sys
from PyQt4 import QtCore, QtGui


class TextEditorDlg(QtGui.QDialog):
    def __init__(self, parent=None):
        super(TextEditorDlg, self).__init__(parent)
        self.resize(500, 400)

        self.button = QtGui.QPushButton(self)
        self.lineEdit = QtGui.QLineEdit(self)
        self.textEdit = QtGui.QTextEdit(self)

        self.button_layout = QtGui.QHBoxLayout()
        self.button_layout.addStretch()
        self.button_layout.addWidget(self.button)
        self.button_layout.addStretch()

        self.grid = QtGui.QGridLayout(self)

        self.grid.addLayout(self.button_layout, 0, 0)
        self.grid.addWidget(self.lineEdit, 1, 0)
        self.grid.addWidget(self.textEdit, 2, 0)

        # Alternative using QVBoxLayout:
        #self.layout = QtGui.QVBoxLayout(self)
        #self.layout.addLayout(self.button_layout)
        #self.layout.addWidget(self.line_edit)
        #self.layout.addWidget(self.text_edit)



if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    myapp = TextEditorDlg()
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14082676</id><snippet>addStretch</snippet></ROW><ROW><id>14082676</id><snippet>QGridLayout</snippet></ROW><ROW><id>14082676</id><snippet>import sys
from PyQt4 import QtCore, QtGui


class TextEditorDlg(QtGui.QDialog):
    def __init__(self, parent=None):
        super(TextEditorDlg, self).__init__(parent)
        self.resize(500, 400)

        self.button = QtGui.QPushButton(self)
        self.lineEdit = QtGui.QLineEdit(self)
        self.textEdit = QtGui.QTextEdit(self)

        self.grid = QtGui.QGridLayout(self)

        # Use the row-span and column-span arguments!
        self.grid.addWidget(self.button, 0, 0, 1, 1)
        self.grid.addWidget(self.lineEdit, 1, 0, 1, 3)
        self.grid.addWidget(self.textEdit, 2, 0, 1, 3)



if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    myapp = TextEditorDlg()
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14082676</id><snippet>QPushButton</snippet></ROW><ROW><id>14082676</id><snippet>QSizePolicy</snippet></ROW><ROW><id>14082676</id><snippet>QTextEdit</snippet></ROW><ROW><id>14082676</id><snippet>import sys
from PyQt4 import QtCore, QtGui


class TextEditorDlg(QtGui.QDialog):
    def __init__(self, parent=None):
        super(TextEditorDlg, self).__init__(parent)
        self.resize(500, 400)

        self.button = QtGui.QPushButton(self)
        self.button.setSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Expanding)
        self.lineEdit = QtGui.QLineEdit(self)
        self.textEdit = QtGui.QTextEdit(self)
        self.textEdit.setSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Minimum)

        self.grid = QtGui.QGridLayout(self)

        # Use the row-span and column-span arguments!
        self.grid.addWidget(self.button, 0, 0, 3, 1)
        self.grid.addWidget(self.lineEdit, 3, 0, 1, 3)
        self.grid.addWidget(self.textEdit, 4, 0, 1, 3)



if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    myapp = TextEditorDlg()
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14082676</id><snippet>self.grid.addWidget(self.button, 0, 0, 3, 1)</snippet></ROW><ROW><id>14082676</id><snippet>3</snippet></ROW><ROW><id>14082676</id><snippet>1</snippet></ROW><ROW><id>14082676</id><snippet>0</snippet></ROW><ROW><id>14082676</id><snippet>3</snippet></ROW><ROW><id>14082729</id><snippet>start</snippet></ROW><ROW><id>14082729</id><snippet>position</snippet></ROW><ROW><id>14082729</id><snippet>position</snippet></ROW><ROW><id>14083012</id><snippet>combinations</snippet></ROW><ROW><id>14083012</id><snippet>itertools</snippet></ROW><ROW><id>14083012</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; [x  for x in itertools.combinations("ABC", 2)]
[('A', 'B'), ('A', 'C'), ('B', 'C')]
</snippet></ROW><ROW><id>14083050</id><snippet>names = []
values = []
data = []
with open('yourfile') as lines:
    for line in lines:
        first, rest = line.split(' ', 1)

        if first == 'name':
            names.append(rest)

        elif first == 'values':
            floats = map(float, rest.split())
            values.append(tuple(floats))

        elif first == 'data':
            int_str, floats_str = rest.split(' ', 1)
            floats = map(float, floats_str.split())
            data.append( (int(int_str),) + tuple(floats) )
</snippet></ROW><ROW><id>14083166</id><snippet>&gt;&gt;&gt; [w for w in words if sorted(w) == letters]
['australia']
</snippet></ROW><ROW><id>14083166</id><snippet>letters</snippet></ROW><ROW><id>14084030</id><snippet>from django.db import models

class Value(models.Model):
    val = models.IntegerField(unique=True)

class Key(models.Model):
    key = models.CharField(max_length=50)
    value = models.ManyToManyField(Value, related_name='values')
</snippet></ROW><ROW><id>14084030</id><snippet>from myApp.models import Key, Value # where myApp is your app name

key = Key.objects.get(key='my_key')
values = key.values.all()
</snippet></ROW><ROW><id>14084080</id><snippet>import os
print(os.path.abspath(__file__))
print(os.path.split(os.path.abspath(__file__)))
</snippet></ROW><ROW><id>14084080</id><snippet>os.path.join</snippet></ROW><ROW><id>14084169</id><snippet>.decode()</snippet></ROW><ROW><id>14084169</id><snippet>your_string.decode('ascii', errors='ignore')
</snippet></ROW><ROW><id>14084196</id><snippet>from datetime import date, timedelta

def get_month(year, week, day):
    january_first = date(year, 1, 1)
    monday_date = january_first + timedelta(days=week * 7 - january_first.weekday())

    for d in range(7):
        weekday_date = monday_date + timedelta(days=d)
        if weekday_date.day == day:
            return weekday_date.month
</snippet></ROW><ROW><id>14084217</id><snippet># This layer bit is for balls colliding with other balls
# I'm only guessing that you want this though.
ball_layer = 1
# This layer bit is for things that collide with red balls only.
red_ball_layer = 2
# This layer bit is for things that collide with blue balls only.
blue_ball_layer = 4

# Bitwise OR the layer bits together
red_ball_shape.layers = ball_layer | red_ball_layer
blue_ball_shape.layers = ball_layer | blue_ball_layer

# Lower border should collide with red only
upper_border_shape.layers = red_ball_layer

#Upper border with blue balls only
lower_border_shape.layers = blue_ball_layer
</snippet></ROW><ROW><id>14084366</id><snippet>&gt;&gt;&gt; l1 = [1, 2, 3]
&gt;&gt;&gt; l2 = [3, 4, 5]
&gt;&gt;&gt; set([l1, l2])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</snippet></ROW><ROW><id>14084366</id><snippet>&gt;&gt;&gt; t1 = (1, 2, 3)
&gt;&gt;&gt; t2 = (3, 4, 5)
&gt;&gt;&gt; set([t1, t2])
set([(3, 4, 5), (1, 2, 3)])
</snippet></ROW><ROW><id>14084369</id><snippet>try</snippet></ROW><ROW><id>14084369</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>14084454</id><snippet>import foo</snippet></ROW><ROW><id>14084454</id><snippet>__future__</snippet></ROW><ROW><id>14084454</id><snippet>Programming Language :: Python :: 3</snippet></ROW><ROW><id>14084454</id><snippet>setup.py</snippet></ROW><ROW><id>14084454</id><snippet>rtree</snippet></ROW><ROW><id>14084715</id><snippet># License: Creative Commons Zero (almost public domain) http://scpyce.org/cc0

import numpy as np

def sample_function(func, points, tol=0.05, min_points=16, max_level=16,
                    sample_transform=None):
    """
    Sample a 1D function to given tolerance by adaptive subdivision.

    The result of sampling is a set of points that, if plotted,
    produces a smooth curve with also sharp features of the function
    resolved.

    Parameters
    ----------
    func : callable
        Function func(x) of a single argument. It is assumed to be vectorized.
    points : array-like, 1D
        Initial points to sample, sorted in ascending order.
        These will determine also the bounds of sampling.
    tol : float, optional
        Tolerance to sample to. The condition is roughly that the total
        length of the curve on the (x, y) plane is computed up to this
        tolerance.
    min_point : int, optional
        Minimum number of points to sample.
    max_level : int, optional
        Maximum subdivision depth.
    sample_transform : callable, optional
        Function w = g(x, y). The x-samples are generated so that w
        is sampled.

    Returns
    -------
    x : ndarray
        X-coordinates
    y : ndarray
        Corresponding values of func(x)

    Notes
    -----
    This routine is useful in computing functions that are expensive
    to compute, and have sharp features --- it makes more sense to
    adaptively dedicate more sampling points for the sharp features
    than the smooth parts.

    Examples
    --------
    &gt;&gt;&gt; def func(x):
    ...     '''Function with a sharp peak on a smooth background'''
    ...     a = 0.001
    ...     return x + a**2/(a**2 + x**2)
    ...
    &gt;&gt;&gt; x, y = sample_function(func, [-1, 1], tol=1e-3)

    &gt;&gt;&gt; import matplotlib.pyplot as plt
    &gt;&gt;&gt; xx = np.linspace(-1, 1, 12000)
    &gt;&gt;&gt; plt.plot(xx, func(xx), '-', x, y[0], '.')
    &gt;&gt;&gt; plt.show()

    """
    return _sample_function(func, points, values=None, mask=None, depth=0,
                            tol=tol, min_points=min_points, max_level=max_level,
                            sample_transform=sample_transform)

def _sample_function(func, points, values=None, mask=None, tol=0.05,
                     depth=0, min_points=16, max_level=16,
                     sample_transform=None):
    points = np.asarray(points)

    if values is None:
        values = np.atleast_2d(func(points))

    if mask is None:
        mask = Ellipsis

    if depth &gt; max_level:
        # recursion limit
        return points, values

    x_a = points[...,:-1][...,mask]
    x_b = points[...,1:][...,mask]

    x_c = .5*(x_a + x_b)
    y_c = np.atleast_2d(func(x_c))

    x_2 = np.r_[points, x_c]
    y_2 = np.r_['-1', values, y_c]
    j = np.argsort(x_2)

    x_2 = x_2[...,j]
    y_2 = y_2[...,j]

    # -- Determine the intervals at which refinement is necessary

    if len(x_2) &lt; min_points:
        mask = np.ones([len(x_2)-1], dtype=bool)
    else:
        # represent the data as a path in N dimensions (scaled to unit box)
        if sample_transform is not None:
            y_2_val = sample_transform(x_2, y_2)
        else:
            y_2_val = y_2

        p = np.r_['0',
                  x_2[None,:],
                  y_2_val.real.reshape(-1, y_2_val.shape[-1]),
                  y_2_val.imag.reshape(-1, y_2_val.shape[-1])
                  ]

        sz = (p.shape[0]-1)//2

        xscale = x_2.ptp(axis=-1)
        yscale = abs(y_2_val.ptp(axis=-1)).ravel()

        p[0] /= xscale
        p[1:sz+1] /= yscale[:,None]
        p[sz+1:]  /= yscale[:,None]

        # compute the length of each line segment in the path
        dp = np.diff(p, axis=-1)
        s = np.sqrt((dp**2).sum(axis=0))
        s_tot = s.sum()

        # compute the angle between consecutive line segments
        dp /= s
        dcos = np.arccos(np.clip((dp[:,1:] * dp[:,:-1]).sum(axis=0), -1, 1))

        # determine where to subdivide: the condition is roughly that
        # the total length of the path (in the scaled data) is computed
        # to accuracy `tol`
        dp_piece = dcos * .5*(s[1:] + s[:-1])
        mask = (dp_piece &gt; tol * s_tot)

        mask = np.r_[mask, False]
        mask[1:] |= mask[:-1].copy()


    # -- Refine, if necessary

    if mask.any():
        return _sample_function(func, x_2, y_2, mask, tol=tol, depth=depth+1,
                                min_points=min_points, max_level=max_level,
                                sample_transform=sample_transform)
    else:
        return x_2, y_2
</snippet></ROW><ROW><id>14084719</id><snippet>#! /usr/bin/python3.2

import random

class Rectangle:
    def __init__ (self, width, height, parent = None):
        self.width = width
        self.height = height
        self.parent = parent
        self.children = []

    @property
    def level (self):
        return 0 if not self.parent else 1 + self.parent.level

    def split (self):
        if self.children: raise Exception ('Already split')
        ratio = random.random () * .5 + .25 #split between 1/4 and 3/4
        if self.width &gt; self.height:
            width = int (ratio * self.width)
            self.children = [Rectangle (width, self.height, self),
                Rectangle (self.width - width, self.height, self) ]
        else:
            height = int (ratio * self.height)
            self.children = [Rectangle (self.width, height, self),
                Rectangle (self.width, self.height - height, self) ]

    def splitUntilLevel (self, maxLevel):
        if maxLevel &lt;= self.level: return
        self.split ()
        for child in self.children: child.splitUntilLevel (maxLevel)

    def __str__ (self):
        s = '{}{} x {}\n'.format (' ' * (2 * self.level), self.width, self.height)
        for child in self.children: s += str (child)
        return s

r = Rectangle (100, 100)
r.splitUntilLevel (3)
print (r)
</snippet></ROW><ROW><id>14084732</id><snippet>f1</snippet></ROW><ROW><id>14084732</id><snippet>f1</snippet></ROW><ROW><id>14084732</id><snippet>f1</snippet></ROW><ROW><id>14084732</id><snippet>f1</snippet></ROW><ROW><id>14084732</id><snippet>f1</snippet></ROW><ROW><id>14084732</id><snippet>f2</snippet></ROW><ROW><id>14084732</id><snippet>f1</snippet></ROW><ROW><id>14084732</id><snippet>f2</snippet></ROW><ROW><id>14084745</id><snippet>itertools.product</snippet></ROW><ROW><id>14084745</id><snippet>from itertools import product
from random import shuffle

suits = ["C","D","H","S"] 
ranks = ["2","3","4","5","4","6","7","8","9","J","Q","K","A"]

cards = list(r + s for r, s in product(ranks, suits))
shuffle(cards)

print cards[:5], cards[5:10] # change this into a suitable for loop to slice
['4D', 'KC', '5H', '9H', '7D'] ['2D', '4S', '8D', '8S', '4C']
</snippet></ROW><ROW><id>14084745</id><snippet>itertools</snippet></ROW><ROW><id>14084745</id><snippet>def grouper(n, iterable, fillvalue=None):
    from itertools import izip_longest
    "Collect data into fixed-length chunks or blocks"
    # grouper(3, 'ABCDEFG', 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

hand = grouper(5, cards) 
for i in xrange(5): # deal for 5 players...
    print next(hand) # each time we call this, we get another 5 cards

('4D', 'KC', '5H', '9H', '7D')
('2D', '4S', '8D', '8S', '4C')
('AD', '2H', '4S', 'KS', '9S')
('6H', 'AH', '4H', '5S', 'KD')
('6S', 'QD', '3C', 'QC', '8H')
</snippet></ROW><ROW><id>14084801</id><snippet>for item in temp_list['data']:  # Add latest pulled data to our list
    members.append(item)
</snippet></ROW><ROW><id>14084801</id><snippet>members = members + temp_list['data'] # Add latest pulled data to our list
</snippet></ROW><ROW><id>14084801</id><snippet>return_members</snippet></ROW><ROW><id>14084917</id><snippet>getattr()</snippet></ROW><ROW><id>14084917</id><snippet>__dict__</snippet></ROW><ROW><id>14084917</id><snippet>__dict__</snippet></ROW><ROW><id>14084917</id><snippet>__slots__</snippet></ROW><ROW><id>14084917</id><snippet>__getattr__</snippet></ROW><ROW><id>14084917</id><snippet>__getattribute__</snippet></ROW><ROW><id>14084917</id><snippet>property</snippet></ROW><ROW><id>14084917</id><snippet>timeit</snippet></ROW><ROW><id>14084917</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; class Foo(object):
...     pass
... 
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; foo.bar = 'spam'
&gt;&gt;&gt; timeit.timeit("getattr(foo, 'bar')", 'from __main__ import foo')
0.2125859260559082
&gt;&gt;&gt; timeit.timeit("foo.__dict__['bar']", 'from __main__ import foo')
0.1328279972076416
</snippet></ROW><ROW><id>14084917</id><snippet>__dict__</snippet></ROW><ROW><id>14084917</id><snippet>getattr()</snippet></ROW><ROW><id>14085058</id><snippet>botForm</snippet></ROW><ROW><id>14085058</id><snippet>request.POST</snippet></ROW><ROW><id>14085058</id><snippet>user</snippet></ROW><ROW><id>14085058</id><snippet>panel = botForm(request.user, data=request.POST) 
</snippet></ROW><ROW><id>14085063</id><snippet>a += b</snippet></ROW><ROW><id>14085063</id><snippet>a = a + b</snippet></ROW><ROW><id>14085063</id><snippet>someList += otherList</snippet></ROW><ROW><id>14085063</id><snippet>someList</snippet></ROW><ROW><id>14085063</id><snippet>someList.extend(otherList)</snippet></ROW><ROW><id>14085063</id><snippet>someList</snippet></ROW><ROW><id>14085063</id><snippet>someList = someList + otherList</snippet></ROW><ROW><id>14085063</id><snippet>someList</snippet></ROW><ROW><id>14085063</id><snippet>+=</snippet></ROW><ROW><id>14085063</id><snippet>+</snippet></ROW><ROW><id>14085063</id><snippet>+=</snippet></ROW><ROW><id>14085092</id><snippet>l = [{'label_1': 'labelone', 'value_1': 'valueone', 'label_2': 'label two', 'value_2':'v2'}]

values = int(len(l[0])/2)
dicts = []
for i in range(values):
    label_name = 'label_%s' % (i+1)
    value_name = 'value_%s' % (i+1)
    dicts.append({'label':l[0][label_name], 'value':l[0][value_name]})
</snippet></ROW><ROW><id>14085381</id><snippet>rc = Popen("cmd1 &amp;&amp; cmd2", shell=True).wait()
if rc != 0:
   raise Error(rc)
</snippet></ROW><ROW><id>14085381</id><snippet>rc = Popen(["git", "fetch", "ssh://...", change_ref]).wait()
if rc != 0:
   raise Error("git fetch failed: %d" % rc)
rc = Popen("git cherry-pick FETCH_HEAD".split()).wait()
if rc != 0:
   raise Error("git cherry-pick failed: %d" % rc)
</snippet></ROW><ROW><id>14085381</id><snippet>stderr</snippet></ROW><ROW><id>14085381</id><snippet>proc_fetch = Popen(["git", "fetch", "ssh://...", change_ref], stderr=PIPE)
stderr = proc_fetch.communicate()[1]
if p.returncode == 0: # success
   p = Popen("git cherry-pick FETCH_HEAD".split(), stderr=PIPE)
   stderr = p.communicate()[1]
   if p.returncode != 0: # cherry-pick failed
      # handle stderr here
      ...
else: # fetch failed
    # handle stderr here
    ...
</snippet></ROW><ROW><id>14085442</id><snippet>os.system("echo 'echo 'p' &gt;&gt; /home/pi/.config/pianobar/ctl'")
</snippet></ROW><ROW><id>14085442</id><snippet>echo</snippet></ROW><ROW><id>14085442</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>14085442</id><snippet>os.system("echo 'p' &gt;&gt; /home/pi/.config/pianobar/ctl")
</snippet></ROW><ROW><id>14085649</id><snippet>some_identifier</snippet></ROW><ROW><id>14085649</id><snippet>from some_module import some_identifier</snippet></ROW><ROW><id>14085649</id><snippet>some_module.some_identifier</snippet></ROW><ROW><id>14085649</id><snippet>from module import *</snippet></ROW><ROW><id>14085649</id><snippet>#fourth.py
import first
import second
import third
</snippet></ROW><ROW><id>14085649</id><snippet>#another.py
import fourth

fourth.first.some_function()
#etc.
</snippet></ROW><ROW><id>14085730</id><snippet>&lt;script&gt;
    var age = "{{ pk|pk_into_age }}";
&lt;/script&gt;
</snippet></ROW><ROW><id>14085730</id><snippet>pk</snippet></ROW><ROW><id>14085730</id><snippet>var age = "{{ '123'|pk_into_age }}";
</snippet></ROW><ROW><id>14086002</id><snippet>import io
import pandas as pd
import numpy as np

text = '''\
SEGM1\tDESC\tDistribuzione Ponderata\tRotazioni a volume
AD\tACCADINAROLO\t74.040\t140249.693409
AD\tZYMIL AMALAT Z\t90.085\t321529.053570
FUN\tSPECIALMALAT S\t88.650\t120711.182177
NORM\tSTD INNAROLO\t49.790\t162259.216710
NORM\tSTD P.NAROLO\t52.125\t1252174.695695
NORM\tSTD PLNAROLO\t54.230\t213257.829615
NORM\tBONTA' MALAT B\t79.280\t520454.366419
NORM\tDA STD RILGARD\t35.290\t554927.497875
NORM\tOVANE VT.MANTO\t15.040\t466232.639628
NORM\tWEIGHT MALAT W\t79.170\t118628.572692
'''

df = pd.read_csv(io.BytesIO(text), delimiter = '\t',
                 index_col = (0,1),)

key1 = df.index.labels[0]
key2 = df['Distribuzione Ponderata'].rank(ascending=False)
sorter = np.lexsort((key2, key1))

sorted_df = df.take(sorter)
print(sorted_df)
</snippet></ROW><ROW><id>14086002</id><snippet>                      Distribuzione Ponderata  Rotazioni a volume
SEGM1 DESC                                                       
AD    ZYMIL AMALAT Z                   90.085       321529.053570
      ACCADINAROLO                     74.040       140249.693409
FUN   SPECIALMALAT S                   88.650       120711.182177
NORM  BONTA' MALAT B                   79.280       520454.366419
      WEIGHT MALAT W                   79.170       118628.572692
      STD PLNAROLO                     54.230       213257.829615
      STD P.NAROLO                     52.125      1252174.695695
      STD INNAROLO                     49.790       162259.216710
      DA STD RILGARD                   35.290       554927.497875
      OVANE VT.MANTO                   15.040       466232.639628
</snippet></ROW><ROW><id>14086070</id><snippet>key</snippet></ROW><ROW><id>14086070</id><snippet>sort</snippet></ROW><ROW><id>14086070</id><snippet>L.sort(key=lambda e: max(e))
</snippet></ROW><ROW><id>14086070</id><snippet>L.sort(key=max)
</snippet></ROW><ROW><id>14086184</id><snippet>odeint(deriv_x, xinit, t)
</snippet></ROW><ROW><id>14086184</id><snippet>xinit</snippet></ROW><ROW><id>14086184</id><snippet>x</snippet></ROW><ROW><id>14086184</id><snippet>x</snippet></ROW><ROW><id>14086184</id><snippet>deriv_x</snippet></ROW><ROW><id>14086184</id><snippet>deriv_x(xinit, t)
</snippet></ROW><ROW><id>14086184</id><snippet>x[0] = xinit[0]</snippet></ROW><ROW><id>14086184</id><snippet>deriv_x</snippet></ROW><ROW><id>14086184</id><snippet>x[0]</snippet></ROW><ROW><id>14086184</id><snippet>r'' = - C rhat
      ---------
        |r|**2
</snippet></ROW><ROW><id>14086184</id><snippet>x</snippet></ROW><ROW><id>14086184</id><snippet>y</snippet></ROW><ROW><id>14086184</id><snippet>x'' = - C             y'' = - C
      -----    and          -----
       x**2                  y**2
</snippet></ROW><ROW><id>14086184</id><snippet>x0 = 0</snippet></ROW><ROW><id>14086184</id><snippet>x''</snippet></ROW><ROW><id>14086184</id><snippet>r''</snippet></ROW><ROW><id>14086184</id><snippet>x0 = 0</snippet></ROW><ROW><id>14086184</id><snippet>y0 = 20056</snippet></ROW><ROW><id>14086184</id><snippet>r0 = (x**2+y**2)**(1/2)</snippet></ROW><ROW><id>14086184</id><snippet>r''</snippet></ROW><ROW><id>14086184</id><snippet>x''</snippet></ROW><ROW><id>14086184</id><snippet>y''</snippet></ROW><ROW><id>14086184</id><snippet>r''</snippet></ROW><ROW><id>14086184</id><snippet>z = [x, y, x', y']</snippet></ROW><ROW><id>14086184</id><snippet>z'</snippet></ROW><ROW><id>14086184</id><snippet>x</snippet></ROW><ROW><id>14086184</id><snippet>y</snippet></ROW><ROW><id>14086184</id><snippet>x'</snippet></ROW><ROW><id>14086184</id><snippet>y'</snippet></ROW><ROW><id>14086184</id><snippet>integrate.odeint</snippet></ROW><ROW><id>14086255</id><snippet>grade=raw_input("Please enter your marks for Maths : ")</snippet></ROW><ROW><id>14086255</id><snippet>grade</snippet></ROW><ROW><id>14086255</id><snippet>grade = int(raw_input("Please enter your marks for Maths : "))
</snippet></ROW><ROW><id>14086255</id><snippet>grade = 110
invalid_input = 1
while grade&lt; 0 or grade&gt; 100:
    if invalid_input &gt;=2:
        print "This is an invalid entry"
        print "Please enter a number between 0 and 100"
    try:
      grade= int(raw_input("Please enter your marks for Maths : "))
    except ValueError:
      grade = -1  # just to enter another iteration
    invalid_input +=1
</snippet></ROW><ROW><id>14086309</id><snippet>repr</snippet></ROW><ROW><id>14086477</id><snippet>numpy.float</snippet></ROW><ROW><id>14086477</id><snippet>float</snippet></ROW><ROW><id>14086477</id><snippet>float</snippet></ROW><ROW><id>14086477</id><snippet>In [1]: type((-0.2)**0.8)
Out[1]: builtins.complex
</snippet></ROW><ROW><id>14086477</id><snippet>float</snippet></ROW><ROW><id>14086477</id><snippet>nan</snippet></ROW><ROW><id>14086477</id><snippet>float</snippet></ROW><ROW><id>14086477</id><snippet>numpy</snippet></ROW><ROW><id>14086477</id><snippet>In [3]: np.complex(-0.2)**0.8
Out[3]: (-0.2232449487530631+0.16219694943147778j)
</snippet></ROW><ROW><id>14086590</id><snippet>[v[-2:] for v in test[::10]]
</snippet></ROW><ROW><id>14086590</id><snippet>&gt;&gt;&gt; [v[-2:] for v in test[::10]]
['11', '21', '31', '41', '51', '61', '71', '81', '91']
</snippet></ROW><ROW><id>14086590</id><snippet>test[::10]</snippet></ROW><ROW><id>14086590</id><snippet>[-2::]</snippet></ROW><ROW><id>14086678</id><snippet>import module
print module.__file__
</snippet></ROW><ROW><id>14086678</id><snippet>dir(module)</snippet></ROW><ROW><id>14086849</id><snippet>Item.objects.filter(field="criteria")
</snippet></ROW><ROW><id>14086857</id><snippet>self</snippet></ROW><ROW><id>14086857</id><snippet>class A(object):
    def foo(self):
        print 'Foo'

    def bar(self, an_argument):
        print 'Bar', an_argument
</snippet></ROW><ROW><id>14086857</id><snippet>a = A()
a.foo() #prints 'Foo'
a.bar('Arg!') #prints 'Bar Arg!'
</snippet></ROW><ROW><id>14086857</id><snippet>self</snippet></ROW><ROW><id>14086857</id><snippet>class B(object):
    def foo(self):
        print 'Foo'

    def bar(this_object):
        this_object.foo()
</snippet></ROW><ROW><id>14086857</id><snippet>b = B()
b.bar() # prints 'Foo'
</snippet></ROW><ROW><id>14086857</id><snippet>dangerous_device = MissileDevice(some_battery)
dangerous_device.move(dangerous_device.RIGHT) 
</snippet></ROW><ROW><id>14086857</id><snippet>MissileDevice.RIGHT</snippet></ROW><ROW><id>14086857</id><snippet>dangerous_device.move(RIGHT)
</snippet></ROW><ROW><id>14086865</id><snippet>back.png</snippet></ROW><ROW><id>14086865</id><snippet>backgroundfile</snippet></ROW><ROW><id>14086865</id><snippet>"background.png"</snippet></ROW><ROW><id>14086865</id><snippet>backgroudfile.get_rect()</snippet></ROW><ROW><id>14086865</id><snippet>screen.blit(backgroundfile, backgroundfile.get_rect()
</snippet></ROW><ROW><id>14086865</id><snippet>backgroundfile = "back.png"
</snippet></ROW><ROW><id>14086865</id><snippet>backgroundfile = pygame.image.load("back.png")
</snippet></ROW><ROW><id>14086950</id><snippet>class A(object):
    def __init__(self):
        self.b = B(self)
        self.c = C(self)

class B(object):
    def __init__(self, parent):
        self.parent = parent

    def call_c(self):
        self.parent.c.a_method_of_c()

class C(object):
    def __init__(self, parent):
        self.parent = parent

    # whatever...
</snippet></ROW><ROW><id>14086950</id><snippet>class A(object):
    def __init__(self):
        self.c = C()
        self.b = B(self.c)

class B(object):
    def __init__(self, c):
        self.cobj = c

    def call_c(self):
        self.cobj.a_method_of_c()

class C(object):
    # whatever...
</snippet></ROW><ROW><id>14086950</id><snippet>b</snippet></ROW><ROW><id>14086950</id><snippet>c</snippet></ROW><ROW><id>14086950</id><snippet>class A(object):
    def __init__(self):
        self.b = B()
        self.c = C()
        self.b.cobj = self.c
        self.c.bobj = self.b

class B(object):
    def __init__(self, c):
        self.cobj = None

    def call_c(self):
        if self.cobj is not None:
            self.cobj.a_method_of_c()
        else:
            raise Exception("B instance not fully initialized")

class C(object):
    # similar to B
</snippet></ROW><ROW><id>14087017</id><snippet>import urllib, urllib2, cookielib

username = 'myuser'
password = 'mypassword'

cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
login_data = urllib.urlencode({'username' : username, 'j_password' : password})
opener.open('http://www.example.com/login.php', login_data)
resp = opener.open('http://www.example.com/hiddenpage.php')
print resp.read()
</snippet></ROW><ROW><id>14087019</id><snippet>setup.py</snippet></ROW><ROW><id>14087019</id><snippet>python setup.py install
</snippet></ROW><ROW><id>14087142</id><snippet>from</snippet></ROW><ROW><id>14087142</id><snippet>"from" relative_module "import" identifier ["as" name] ( "," identifier ["as" name] )*
</snippet></ROW><ROW><id>14087142</id><snippet>"from" module "import" "*"
</snippet></ROW><ROW><id>14087142</id><snippet>module ::=  (identifier ".")* identifier
</snippet></ROW><ROW><id>14087511</id><snippet>get_current_folder()</snippet></ROW><ROW><id>14087511</id><snippet>file-set</snippet></ROW><ROW><id>14087511</id><snippet>FileChooserButton</snippet></ROW><ROW><id>14087511</id><snippet>FileChooser</snippet></ROW><ROW><id>14087511</id><snippet>get_filename()</snippet></ROW><ROW><id>14087511</id><snippet>get_filenames()</snippet></ROW><ROW><id>14087511</id><snippet>run()</snippet></ROW><ROW><id>14087511</id><snippet>FileChooserDialog</snippet></ROW><ROW><id>14087511</id><snippet>get_filename()</snippet></ROW><ROW><id>14087574</id><snippet>@require_uid</snippet></ROW><ROW><id>14087574</id><snippet>def require_uid(fn):
    def check_uid(**kwargs):   
        cookie_uid = request.get_cookie('cookieName', secret='cookieSignature')

        if cookie_uid:
            //do stuff with a user object
            return fn(**kwargs)
        else:
            redirect("/loginagain")

    return check_uid



@route('/userstuff', method='GET')
@require_uid
@view('app')
def app_userstuff():
    //doing things is what i like to do
    return dict(foo="bar")
</snippet></ROW><ROW><id>14087582</id><snippet>(require 'flymake)

(defun flymake-get-file-name-mode-and-masks (file-name)
  "Return the corresponding entry from `flymake-allowed-file-name-masks'."
  (unless (stringp file-name)
    (error "Invalid file-name"))
  (let ((fnm flymake-allowed-file-name-masks)
        (mode-and-masks nil)
        (matcher nil))
    (while (and (not mode-and-masks) fnm)
      (setq matcher (car (car fnm)))
      (if (or (and (stringp matcher) (string-match matcher file-name))
              (and (symbolp matcher) (equal matcher major-mode)))
          (setq mode-and-masks (cdr (car fnm))))
      (setq fnm (cdr fnm)))
    (flymake-log 3 "file %s, init=%s" file-name (car mode-and-masks))
    mode-and-masks))
</snippet></ROW><ROW><id>14087582</id><snippet>(add-to-list 'flymake-allowed-file-name-masks '("\\.py\\'" flymake-pylint-init))
</snippet></ROW><ROW><id>14087582</id><snippet>(add-to-list 'flymake-allowed-file-name-masks '(python-mode flymake-pylint-init))
</snippet></ROW><ROW><id>14087664</id><snippet>changed</snippet></ROW><ROW><id>14087664</id><snippet>TextBuffer</snippet></ROW><ROW><id>14087664</id><snippet>autorun</snippet></ROW><ROW><id>14087664</id><snippet>changed</snippet></ROW><ROW><id>14087705</id><snippet>ConfigParser</snippet></ROW><ROW><id>14087705</id><snippet>configparser</snippet></ROW><ROW><id>14087726</id><snippet>KEYDOWN</snippet></ROW><ROW><id>14087726</id><snippet>KEYUP</snippet></ROW><ROW><id>14087726</id><snippet>while True:
    DISPLAYSURF.blit(background,(0,0))

    DISPLAYSURF.blit(sprite,(spritex,spritey))

    for event in pygame.event.get():
        if event.type==QUIT:
            pygame.quit()
            sys.exit()

        if event.type == KEYDOWN:
            if (event.key == K_LEFT):
                sprite=pygame.image.load('left.png')
            elif (event.key == K_RIGHT):
                sprite=pygame.image.load('right.png')
            elif (event.key == K_UP):
                sprite=pygame.image.load('up.png')
            elif (event.key == K_DOWN):
                sprite=pygame.image.load('down.png')

    keys_pressed = key.get_pressed()

    if keys_pressed[K_LEFT]:
        spritex -= 5

    if keys_pressed[K_RIGHT]:
        spritex += 5

    if keys_pressed[K_UP]:
        spritey -= 5

    if keys_pressed[K_DOWN]:
        spritey += 5

    pygame.display.update()
    fpsClock.tick(FPS)
</snippet></ROW><ROW><id>14087799</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split(r'(\w+)', '(a1 b2 c3)')
['(', 'a1', ' ', 'b2', ' ', 'c3', ')']
</snippet></ROW><ROW><id>14087799</id><snippet>findall</snippet></ROW><ROW><id>14087799</id><snippet>_</snippet></ROW><ROW><id>14087799</id><snippet>&gt;&gt;&gt; re.findall(r'\W+|\w+', '(a1 b2 c3)')
['(', 'a1', ' ', 'b2', ' ', 'c3', ')']
</snippet></ROW><ROW><id>14087799</id><snippet>(</snippet></ROW><ROW><id>14087799</id><snippet/></ROW><ROW><id>14087799</id><snippet>)</snippet></ROW><ROW><id>14087799</id><snippet>&gt;&gt;&gt; re.split(r'([^\(\) ]+)', '(a1 b2 c3)')
['(', 'a1', ' ', 'b2', ' ', 'c3', ')']
</snippet></ROW><ROW><id>14087814</id><snippet>simplify()</snippet></ROW><ROW><id>14088415</id><snippet>cmyk_scale = 100

def rgb_to_cmyk(r,g,b):
    if (r == 0) and (g == 0) and (b == 0):
        # black
        return 0, 0, 0, cmyk_scale

    # rgb [0,255] -&gt; cmy [0,1]
    c = 1 - r / 255.
    m = 1 - g / 255.
    y = 1 - b / 255.

    # extract out k [0,1]
    min_cmy = min(c, m, y)
    c = (c - min_cmy) / (1 - min_cmy)
    m = (m - min_cmy) / (1 - min_cmy)
    y = (y - min_cmy) / (1 - min_cmy)
    k = min_cmy

    # rescale to the range [0,cmyk_scale]
    return c*cmyk_scale, m*cmyk_scale, y*cmyk_scale, k*cmyk_scale
</snippet></ROW><ROW><id>14088431</id><snippet>r""</snippet></ROW><ROW><id>14088431</id><snippet>r"\x"</snippet></ROW><ROW><id>14088431</id><snippet>"\\x"</snippet></ROW><ROW><id>14088431</id><snippet>print " ".join(map(ord, raw_input("input something")))
</snippet></ROW><ROW><id>14088431</id><snippet>"string-escape"</snippet></ROW><ROW><id>14088431</id><snippet>print raw_input("input something")
</snippet></ROW><ROW><id>14088431</id><snippet>def identity(obj):
    return obj
</snippet></ROW><ROW><id>14088431</id><snippet>"\x20\x01"</snippet></ROW><ROW><id>14088431</id><snippet>"2001"</snippet></ROW><ROW><id>14088482</id><snippet>[0]</snippet></ROW><ROW><id>14088482</id><snippet>print result['results'][0]['name']
</snippet></ROW><ROW><id>14088531</id><snippet>[Recipe]
value0 = ..

[Recipe2]
value0 = ..
</snippet></ROW><ROW><id>14088531</id><snippet>{ "Recipe": { "value0": ".." }, "Recipe2": { "value0": ".." } }
</snippet></ROW><ROW><id>14088568</id><snippet>a = wd.execute_script("return checkdata('" + code + "');")
</snippet></ROW><ROW><id>14088609</id><snippet>import spynner

if __name__=='__main__':
    url = "http://angular.github.com/angular-phonecat/step-10/app/#/phones"
    browser = spynner.Browser()
    browser.create_webview(True)
    browser.load(url, load_timeout=60)
    print browser._get_html()
    # ^ Can pipe this to a file, POST it to my server or return it as a string
    browser.close()
</snippet></ROW><ROW><id>14088863</id><snippet>print 'Status: 301 Moved Permanently'
print 'Location: http://www.finalurl.com'
print 'Content-Type: text/html'
print # end of header
... # short html with the url
</snippet></ROW><ROW><id>14088877</id><snippet>\w</snippet></ROW><ROW><id>14088877</id><snippet>re</snippet></ROW><ROW><id>14088877</id><snippet>False</snippet></ROW><ROW><id>14088877</id><snippet>not</snippet></ROW><ROW><id>14088877</id><snippet>if not re.search(r'^[\w- ]+$', name):
</snippet></ROW><ROW><id>14088877</id><snippet>\n</snippet></ROW><ROW><id>14088877</id><snippet>\t</snippet></ROW><ROW><id>14088877</id><snippet>if not re.search(r'^[\w\s- ]+$', name):
</snippet></ROW><ROW><id>14088877</id><snippet># assuming name_list is a list of name strings
for name in name_list:
    if not re.search(r'^[\w- ]+$', name):
        # do whatever
</snippet></ROW><ROW><id>14089046</id><snippet>frame = pd.DataFrame(np.arange(12).reshape((4, 3)), index = list('aabb'), columns = [['Ohio', 'Ohio', 'Colorado'], ['Green', 'Red', 'Green']])
</snippet></ROW><ROW><id>14089046</id><snippet>'Colorado']</snippet></ROW><ROW><id>14089046</id><snippet>['Green'</snippet></ROW><ROW><id>14089108</id><snippet>Python 2.7.3 (default, Sep 26 2012, 21:51:14) 
&gt;&gt;&gt; ll = [('bear', 1),
... ('is', 1),
... ('in', 1),
... ('gugledarc', 1),
... ('the', 1),
... ('sdpij', 2),
... ('emdf', 2),
... ('sai', 2),
... ('sd', 3),
... ('fuggle', 4),
... ('in', 4),
... ('gugledarc', 4),
... ('df', 4)]
&gt;&gt;&gt; dd = {}
&gt;&gt;&gt; for key, value in ll:
...     dd.setdefault(key, []).append(value)
... 
&gt;&gt;&gt; dd.items()
[('sai', [2]), ('emdf', [2]), ('df', [4]), ('is', [1]), ('bear', [1]), ('gugledarc', [1, 4]), ('in', [1, 4]), ('the', [1]), ('sdpij', [2]), ('fuggle', [4]), ('sd', [3])]
</snippet></ROW><ROW><id>14089108</id><snippet>defaultdict</snippet></ROW><ROW><id>14089108</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; dd = defaultdict(list)
&gt;&gt;&gt; for key, value in ll:
...     dd[key].append(value)
... 
&gt;&gt;&gt; dd.items()
[('sai', [2]), ('emdf', [2]), ('df', [4]), ('is', [1]), ('bear', [1]), ('gugledarc', [1, 4]), ('in', [1, 4]), ('the', [1]), ('sdpij', [2]), ('fuggle', [4]), ('sd', [3])]
</snippet></ROW><ROW><id>14089123</id><snippet>for</snippet></ROW><ROW><id>14089123</id><snippet>infile</snippet></ROW><ROW><id>14089123</id><snippet>for line in infile.readline()</snippet></ROW><ROW><id>14089123</id><snippet>infile</snippet></ROW><ROW><id>14089123</id><snippet>with open("Input.txt", "r") as infile, open("Output.txt", "w") as outfile:
    for line in infile:
        outfile.write(line.split("&lt;_|_&gt;")[0])
</snippet></ROW><ROW><id>14089123</id><snippet>for line in infile.readlines()</snippet></ROW><ROW><id>14089123</id><snippet>readlines</snippet></ROW><ROW><id>14089123</id><snippet>readline</snippet></ROW><ROW><id>14089123</id><snippet>infile</snippet></ROW><ROW><id>14089182</id><snippet>STATIC_URL</snippet></ROW><ROW><id>14089182</id><snippet>STATIC_URL = '/mydjangoproject/static/'</snippet></ROW><ROW><id>14089182</id><snippet>STATIC_ROOT = '/home2/usr/public_html/mydjangoproject/static'</snippet></ROW><ROW><id>14089182</id><snippet>/home2/usr/public_html/</snippet></ROW><ROW><id>14089182</id><snippet>STATIC_URL</snippet></ROW><ROW><id>14089182</id><snippet>/static/</snippet></ROW><ROW><id>14089358</id><snippet>(local-set-key (kbd "C-c C-n") 'flymake-goto-next-error)
</snippet></ROW><ROW><id>14089358</id><snippet>(define-key python-mode-map (kbd "C-c C-n") 'flymake-goto-next-error)
</snippet></ROW><ROW><id>14089358</id><snippet>(require 'python-mode)
</snippet></ROW><ROW><id>14089373</id><snippet>for entry in j['feed']['entry']:
    print entry['title']['$t']
</snippet></ROW><ROW><id>14089427</id><snippet>   http_server = tornado.httpserver.HTTPServer(application,ssl_options={
    "certfile": "cert.cer",
    "keyfile":  "key.key",
})
</snippet></ROW><ROW><id>14089449</id><snippet>from pycparser import c_parser
parser = c_parser.CParser()
text = 'int x; int y; float z;'
ast = parser.parse(text, filename='&lt;none&gt;')
ast.show()
FileAST: 
  Decl: x, [], [], []
    TypeDecl: x, []
      IdentifierType: ['int']
  Decl: y, [], [], []
    TypeDecl: y, []
      IdentifierType: ['int']
  Decl: z, [], [], []
    TypeDecl: z, []
      IdentifierType: ['float']
</snippet></ROW><ROW><id>14089457</id><snippet>from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler
from SocketServer import ThreadingMixIn
import threading

class Handler(BaseHTTPRequestHandler):

    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        message =  threading.currentThread().getName()
        self.wfile.write(message)
        self.wfile.write('\n')
        return

class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    """Handle requests in a separate thread."""

if __name__ == '__main__':
    server = ThreadedHTTPServer(('localhost', 8080), Handler)
    print 'Starting server, use &lt;Ctrl-C&gt; to stop'
    server.serve_forever()
</snippet></ROW><ROW><id>14089586</id><snippet>In [1]: from pandas import *

In [2]: import numpy as np

In [3]: a = np.array([[1, 1], [2, 3], [1, 1], [5, 4], [2, 3]])

In [4]: DataFrame(a).drop_duplicates().values
Out[4]: 
array([[1, 1],
       [2, 3],
       [5, 4]], dtype=int64)
</snippet></ROW><ROW><id>14089976</id><snippet>self</snippet></ROW><ROW><id>14089976</id><snippet>this</snippet></ROW><ROW><id>14089976</id><snippet>self</snippet></ROW><ROW><id>14090031</id><snippet>m = Message.objects.create(*args)
recipients = []
for email in ModelWithEmails.active.values_list('email', flat=True):
    recipients.append(Recipient(message=m, email=email))

Recipient.objects.bulk_create(recipients)
</snippet></ROW><ROW><id>14090031</id><snippet>m = Message.objects.create(*args)
emails = ModelWithEmails.active.values_list('email', flat=True)
Recipient.objects.bulk_create([Recipient(message=m, email=email) for email in emails])
</snippet></ROW><ROW><id>14090423</id><snippet>rqworker</snippet></ROW><ROW><id>14090437</id><snippet>BeaufifulSoup</snippet></ROW><ROW><id>14090645</id><snippet>val houses = List(1, 2, 3, 4, 5)
val List(first, _, middle, _, _) = houses
</snippet></ROW><ROW><id>14090645</id><snippet>for (List(red, green, ivory, yellow, blue) &lt;- orderings)
</snippet></ROW><ROW><id>14090649</id><snippet>.writerows()</snippet></ROW><ROW><id>14090649</id><snippet>dict</snippet></ROW><ROW><id>14090649</id><snippet>data</snippet></ROW><ROW><id>14090649</id><snippet>writer = csv.DictWriter(open(out, "wb"), fields, dialect='excel')
# write the header at the top of the file
writer.writeheader()
writer.writerows(data.values())
</snippet></ROW><ROW><id>14090649</id><snippet>id, url</snippet></ROW><ROW><id>14090649</id><snippet>url</snippet></ROW><ROW><id>14090649</id><snippet>import csv

with open('urls.csv', 'rb') as urls:
    reader = csv.reader(urls)
    reader.next()  # skip the header, won't need that here
    urls = {id: url for id, url in reader}

with open('other.csv', 'rb') as other:
    with open(out, 'wb') as output:
        reader = csv.reader(other)
        writer = csv.writer(output)
        writer.writerow(reader.next() + ['url'])  # read old header, add urls and write out
        for row in reader:
            # write out original row plus url if we can find one
            writer.writerow(row + [urls.get(row[0], '')])
</snippet></ROW><ROW><id>14091464</id><snippet>Date,Foo,Bar
123,456,789
abc,def,ghi
</snippet></ROW><ROW><id>14091464</id><snippet>import csv
reader = csv.reader(open('test.csv'))

result = {}
for row in reader:
    key = row[0]
    if key in result:
        # implement your duplicate row handling here
        pass
    result[key] = row[1:]
print result
</snippet></ROW><ROW><id>14091464</id><snippet>{'Date': ['Foo', 'Bar'], '123': ['456', '789'], 'abc': ['def', 'ghi']}
</snippet></ROW><ROW><id>14091464</id><snippet>import csv
reader = csv.DictReader(open('test.csv'))

result = {}
for row in reader:
    key = row.pop('Date')
    if key in result:
        # implement your duplicate row handling here
        pass
    result[key] = row
print result
</snippet></ROW><ROW><id>14091464</id><snippet>{'123': {'Foo': '456', 'Bar': '789'}, 'abc': {'Foo': 'def', 'Bar': 'ghi'}}
</snippet></ROW><ROW><id>14091464</id><snippet>import csv
reader = csv.DictReader(open('test.csv'))

result = {}
for row in reader:
    for column, value in row.iteritems():
        result.setdefault(column, []).append(value)
print result
</snippet></ROW><ROW><id>14091464</id><snippet>{'Date': ['123', 'abc'], 'Foo': ['456', 'def'], 'Bar': ['789', 'ghi']}
</snippet></ROW><ROW><id>14091645</id><snippet>key</snippet></ROW><ROW><id>14091645</id><snippet>max()</snippet></ROW><ROW><id>14091645</id><snippet>max(d, key=d.get)
</snippet></ROW><ROW><id>14091645</id><snippet>&gt;&gt;&gt; d= {'a':2,'b':5,'c':3}
&gt;&gt;&gt; max(d, key=d.get)
'b'
</snippet></ROW><ROW><id>14091645</id><snippet>key</snippet></ROW><ROW><id>14091645</id><snippet>key</snippet></ROW><ROW><id>14091647</id><snippet>name</snippet></ROW><ROW><id>14091647</id><snippet>def memoize(self, timeout=None, keyfunc=self.make_key):
    ...
    key = keyfunc(function.__name__, *args, **kwargs)
    ...
</snippet></ROW><ROW><id>14091647</id><snippet>cache</snippet></ROW><ROW><id>14091647</id><snippet>def cache(self, timeout=None):
    return self.memoize(timeout, keyfunc=lambda f, *args, **kwargs: f.__name__)
</snippet></ROW><ROW><id>14091768</id><snippet>if ord(h[11]) != check_byte:
    raise RuntimeError("Bad password for file", name)
</snippet></ROW><ROW><id>14091797</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtCore, QtGui

class widgetB(QtGui.QWidget):
    procDone = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):
        super(widgetB, self).__init__(parent)

        self.lineEdit = QtGui.QLineEdit(self)
        self.button = QtGui.QPushButton("Send Message to A", self)
        self.layout = QtGui.QHBoxLayout(self)
        self.layout.addWidget(self.lineEdit)
        self.layout.addWidget(self.button)

        self.button.clicked.connect(self.on_button_clicked)

    @QtCore.pyqtSlot()
    def on_button_clicked(self):
        self.procDone.emit(self.lineEdit.text())

    @QtCore.pyqtSlot(str)
    def on_procStart(self, message):
        self.lineEdit.setText("From A: " + message)

        self.raise_()

class widgetA(QtGui.QWidget):
    procStart = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):
        super(widgetA, self).__init__(parent)

        self.lineEdit = QtGui.QLineEdit(self)
        self.lineEdit.setText("Hello!")

        self.button = QtGui.QPushButton("Send Message to B", self)
        self.button.clicked.connect(self.on_button_clicked)

        self.layout = QtGui.QHBoxLayout(self)
        self.layout.addWidget(self.lineEdit)
        self.layout.addWidget(self.button)

    @QtCore.pyqtSlot()
    def on_button_clicked(self):
        self.procStart.emit(self.lineEdit.text())

    @QtCore.pyqtSlot(str)
    def on_widgetB_procDone(self, message):
        self.lineEdit.setText("From B: " + message)

        self.raise_()


class mainwindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(mainwindow, self).__init__(parent)

        self.button = QtGui.QPushButton("Click Me", self)
        self.button.clicked.connect(self.on_button_clicked)

        self.setCentralWidget(self.button)

        self.widgetA = widgetA()
        self.widgetB = widgetB()

        self.widgetA.procStart.connect(self.widgetB.on_procStart)
        self.widgetB.procDone.connect(self.widgetA.on_widgetB_procDone)

    @QtCore.pyqtSlot()
    def on_button_clicked(self):
        self.widgetA.show()
        self.widgetB.show()

        self.widgetA.raise_()


if __name__ == "__main__":
    import sys

    app  = QtGui.QApplication(sys.argv)
    main = mainwindow()
    main.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14091913</id><snippet>djangoapp.tasks</snippet></ROW><ROW><id>14091985</id><snippet>import re

#if its fixed:  [  Key ( Value1 , Value2 , Value3 )  ]
regex = re.compile(r'([A-Za-z0-9]+) \( (.+?) , (.+?) , (.+?) \)')
s = "stringOfAlphaNumeric1 ( stringOfAnyCharacter1 , stringOfAnyCharacter2 , stringOfAnyCharacter3 ) stringOfAlphaNumeric2 ( stringOfAnyCharacter4 , stringOfAnyCharacter5 , stringOfAnyCharacter6 )"

d = dict((i[0], i[1:]) for i in regex.findall(s))
</snippet></ROW><ROW><id>14091985</id><snippet>{'stringOfAlphaNumeric2': ('stringOfAnyCharacter4', 'stringOfAnyCharacter5', 'stringOfAnyCharacter6'), 
'stringOfAlphaNumeric1': ('stringOfAnyCharacter1', 'stringOfAnyCharacter2', 'stringOfAnyCharacter3')}
</snippet></ROW><ROW><id>14091985</id><snippet>[(k, i) for k, v in d.items() for i in v]
</snippet></ROW><ROW><id>14091985</id><snippet>[('stringOfAlphaNumeric2', 'stringOfAnyCharacter4'), 
('stringOfAlphaNumeric2', 'stringOfAnyCharacter5'), 
('stringOfAlphaNumeric2', 'stringOfAnyCharacter6'), 
('stringOfAlphaNumeric1', 'stringOfAnyCharacter1'), 
('stringOfAlphaNumeric1', 'stringOfAnyCharacter2'), 
('stringOfAlphaNumeric1', 'stringOfAnyCharacter3')]
</snippet></ROW><ROW><id>14092131</id><snippet>runCMD</snippet></ROW><ROW><id>14092131</id><snippet>self</snippet></ROW><ROW><id>14092282</id><snippet>if(Serial.available()) {    
...
}
</snippet></ROW><ROW><id>14092282</id><snippet>char serIn; //var that will hold the bytes in read from the serialBuffer
</snippet></ROW><ROW><id>14092282</id><snippet>char serIn[40]; //buffer that will hold the bytes in read from the serialBuffer
</snippet></ROW><ROW><id>14092282</id><snippet>if(Serial.available()) {  
    int chars_in = 0;
    //keep reading and printing from serial untill there are bytes in the serial buffer
    while (Serial.available()&gt;0 &amp;&amp; chars_in&lt;39){
        serIn[chars_in] = Serial.read();    //read Serial   
        Serial.write( byte(serIn[chars_in]));
        chars_in++;
    }
    serIn[chars_in] = 0;
    //the serial buffer is over just go to the line (or pass your favorite stop char)               
    Serial.println();
}
</snippet></ROW><ROW><id>14092505</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>14092583</id><snippet>reactor.addSystemEventTrigger("before", "shutdown", f)</snippet></ROW><ROW><id>14092583</id><snippet>"during"</snippet></ROW><ROW><id>14092583</id><snippet>"after"</snippet></ROW><ROW><id>14092583</id><snippet>Service</snippet></ROW><ROW><id>14092583</id><snippet>stopService</snippet></ROW><ROW><id>14092583</id><snippet>application</snippet></ROW><ROW><id>14092681</id><snippet>navigator</snippet></ROW><ROW><id>14092681</id><snippet>connect(myPage-&gt;mainFrame(), SIGNAL(javaScriptWindowObjectCleared()),
  this, SLOT(tweakNavigatorObject()));
</snippet></ROW><ROW><id>14092681</id><snippet>window.navigator = {
  appCodeName: 'Mozilla',
  appName: 'Netscape',
  vendor: 'My Company'
}
</snippet></ROW><ROW><id>14092692</id><snippet>get_absolute_url</snippet></ROW><ROW><id>14092692</id><snippet>class Car(models.Model):
    name = models.CharField('Name', max_length=10)
    active = models.BooleanField()

    def __unicode__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('car_details', kwargs={'name':self.name})
</snippet></ROW><ROW><id>14092726</id><snippet>__add__</snippet></ROW><ROW><id>14092726</id><snippet>__eq__</snippet></ROW><ROW><id>14092726</id><snippet>__inner__</snippet></ROW><ROW><id>14092726</id><snippet>other.x, other.y, other.z</snippet></ROW><ROW><id>14092726</id><snippet>__mul__</snippet></ROW><ROW><id>14092726</id><snippet>if type(scalar)!=int or float:</snippet></ROW><ROW><id>14092726</id><snippet>if not isinstance(scalar, (int, float)):</snippet></ROW><ROW><id>14092840</id><snippet>&lt;type ...&gt;</snippet></ROW><ROW><id>14092999</id><snippet>cls</snippet></ROW><ROW><id>14092999</id><snippet>double_x</snippet></ROW><ROW><id>14092999</id><snippet>tripple_x</snippet></ROW><ROW><id>14092999</id><snippet>ObjectOne</snippet></ROW><ROW><id>14092999</id><snippet>ObjectTwo</snippet></ROW><ROW><id>14092999</id><snippet>BaseObject.x</snippet></ROW><ROW><id>14092999</id><snippet>&gt;&gt;&gt; obj_1 = ObjectOne()
cls.initialized = False
&gt;&gt;&gt; obj_1.double_x()
2
&gt;&gt;&gt; obj_2 = ObjectTwo()
cls.initialized = False
&gt;&gt;&gt; obj_2.triple_x()
3
&gt;&gt;&gt; BaseObject.x
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: type object 'BaseObject' has no attribute 'x'
&gt;&gt;&gt; BaseObject.initialized, ObjectOne.initialized, ObjectOne.x, ObjectTwo.initialized, ObjectTwo.x
(False, True, 2, True, 3)
</snippet></ROW><ROW><id>14092999</id><snippet>_initialize()</snippet></ROW><ROW><id>14092999</id><snippet>cls</snippet></ROW><ROW><id>14092999</id><snippet>ObjectOne</snippet></ROW><ROW><id>14092999</id><snippet>ObjectTwo</snippet></ROW><ROW><id>14092999</id><snippet>initialized</snippet></ROW><ROW><id>14092999</id><snippet>x</snippet></ROW><ROW><id>14092999</id><snippet>BaseObject._initialize()</snippet></ROW><ROW><id>14092999</id><snippet>BaseObject</snippet></ROW><ROW><id>14092999</id><snippet>&gt;&gt;&gt; obj_1 = ObjectOne()
cls.initialized = False
&gt;&gt;&gt; obj_1.double_x()
2
&gt;&gt;&gt; obj_2 = ObjectTwo()
cls.initialized = True
&gt;&gt;&gt; obj_2.triple_x()
3
&gt;&gt;&gt; BaseObject.x, ObjectOne.x, ObjectTwo.x
(1, 2, 3)
&gt;&gt;&gt; BaseObject.initialized
True
&gt;&gt;&gt; 'x' in ObjectOne.__dict__
True
&gt;&gt;&gt; 'initialized' in ObjectOne.__dict__
False
&gt;&gt;&gt; 'initialized' in ObjectTwo.__dict__
False
</snippet></ROW><ROW><id>14092999</id><snippet>_initialize()</snippet></ROW><ROW><id>14092999</id><snippet>BaseObject</snippet></ROW><ROW><id>14092999</id><snippet>initialized</snippet></ROW><ROW><id>14092999</id><snippet>x</snippet></ROW><ROW><id>14092999</id><snippet>double_x</snippet></ROW><ROW><id>14092999</id><snippet>triple_x</snippet></ROW><ROW><id>14092999</id><snippet>x</snippet></ROW><ROW><id>14092999</id><snippet>BaseObject</snippet></ROW><ROW><id>14092999</id><snippet>class BaseObject(object):
    initialized = False
    def __init__(self):
        BaseObject._initialize()

    @classmethod
    def _initialize(cls):
        print "cls.initialized = "+str(cls.initialized)
        if not cls.initialized:
            cls.x = 1
            cls.initialized = True
class ObjectOne(BaseObject):
    @classmethod
    def double_x(cls):
        BaseObject.x = BaseObject.x * 2
        print cls.x

class ObjectTwo(BaseObject):
    @classmethod
    def triple_x(cls):
        BaseObject.x = BaseObject.x * 3
        print cls.x
</snippet></ROW><ROW><id>14092999</id><snippet>&gt;&gt;&gt; obj_1 = ObjectOne()
cls.initialized = False
&gt;&gt;&gt; obj_1.double_x()
2
&gt;&gt;&gt; obj_2 = ObjectTwo()
cls.initialized = True
&gt;&gt;&gt; obj_2.triple_x()
6
</snippet></ROW><ROW><id>14092999</id><snippet>BaseObject._initialize()</snippet></ROW><ROW><id>14092999</id><snippet>cls</snippet></ROW><ROW><id>14092999</id><snippet>BasObject</snippet></ROW><ROW><id>14092999</id><snippet>x</snippet></ROW><ROW><id>14092999</id><snippet>double_x</snippet></ROW><ROW><id>14092999</id><snippet>triple_x</snippet></ROW><ROW><id>14092999</id><snippet>BaseObject</snippet></ROW><ROW><id>14092999</id><snippet>x</snippet></ROW><ROW><id>14092999</id><snippet>cls</snippet></ROW><ROW><id>14092999</id><snippet>x</snippet></ROW><ROW><id>14093125</id><snippet>get_loc</snippet></ROW><ROW><id>14093125</id><snippet>d = pd.to_datetime('2008-06-06')
loc = s.index.get_loc(d)

In [12]: loc
Out[12]: 4

In [13]: s[loc-2:loc+3]
Out[13]: 
2008-06-04    124.40
2008-06-05    126.89
2008-06-06    122.84
2008-06-09    123.14
2008-06-10    122.53
Name: SPY
</snippet></ROW><ROW><id>14093125</id><snippet>In [14]: dt = datetime.timedelta(1)

In [15]: s[d - 2*dt:d + 2*dt]
Out[15]: 
2008-06-04    124.40
2008-06-05    126.89
2008-06-06    122.84
Name: SPY
</snippet></ROW><ROW><id>14093346</id><snippet>//text()</snippet></ROW><ROW><id>14093346</id><snippet>text = filtered_html.xpath('//text()')
print ''.join(t.strip() for t in text)  # prints "www.helloonline.com/"
</snippet></ROW><ROW><id>14093680</id><snippet>__unicode__</snippet></ROW><ROW><id>14093832</id><snippet>&lt;script&gt;
    var pub_date = '{{my_list.0.pub_date}}';
    alert(pub_date);

    //this will also work
    alert('{{my_list.0.pub_date}}') # enclosed in single or double quotes
&lt;/script&gt;
</snippet></ROW><ROW><id>14093832</id><snippet>for loop</snippet></ROW><ROW><id>14093832</id><snippet>{% for obj in my_list %}
   &lt;span&gt;{{obj.pub_date}}&lt;/span&gt;
   &lt;span&gt;{{obj.size}}&lt;/span&gt;
   ---
{% endfor %}
</snippet></ROW><ROW><id>14093854</id><snippet>while True:
    for i in xrange(100000):
        pass
</snippet></ROW><ROW><id>14094082</id><snippet>screen.blit(background(0, 0))</snippet></ROW><ROW><id>14094082</id><snippet>screen.blit(background,(0, 0))</snippet></ROW><ROW><id>14094082</id><snippet>background</snippet></ROW><ROW><id>14094082</id><snippet>background</snippet></ROW><ROW><id>14094082</id><snippet>(0, 0)</snippet></ROW><ROW><id>14094082</id><snippet>screen.blit</snippet></ROW><ROW><id>14094082</id><snippet>source</snippet></ROW><ROW><id>14094082</id><snippet>destination</snippet></ROW><ROW><id>14094082</id><snippet>background</snippet></ROW><ROW><id>14094082</id><snippet>source</snippet></ROW><ROW><id>14094082</id><snippet>background</snippet></ROW><ROW><id>14094082</id><snippet>destination</snippet></ROW><ROW><id>14094082</id><snippet>(0, 0)</snippet></ROW><ROW><id>14094320</id><snippet>__init__.py</snippet></ROW><ROW><id>14094320</id><snippet>baz</snippet></ROW><ROW><id>14094320</id><snippet>foo.py</snippet></ROW><ROW><id>14094320</id><snippet>from baz import bar
</snippet></ROW><ROW><id>14094320</id><snippet>baz</snippet></ROW><ROW><id>14094384</id><snippet>-lboost_python -lpython27
</snippet></ROW><ROW><id>14094384</id><snippet>main()</snippet></ROW><ROW><id>14094384</id><snippet>BOOST_PYTHON_MODULE(...)</snippet></ROW><ROW><id>14094384</id><snippet>.pyd</snippet></ROW><ROW><id>14094384</id><snippet>-shared -o hello_ext.pyd
</snippet></ROW><ROW><id>14094384</id><snippet>libboost_python.a</snippet></ROW><ROW><id>14094384</id><snippet>libboost_python-mgw??-mt-1_??.a</snippet></ROW><ROW><id>14094384</id><snippet>c:\boost_1_52&gt; b2 toolset=gcc --with-python
</snippet></ROW><ROW><id>14094384</id><snippet>user-config.jam</snippet></ROW><ROW><id>14094384</id><snippet>%HOMEDRIVE%%HOMEPATH%</snippet></ROW><ROW><id>14094384</id><snippet>boost_1_52_0\tools\build\v2</snippet></ROW><ROW><id>14094384</id><snippet>Python configuration</snippet></ROW><ROW><id>14094384</id><snippet>using python : python_version : python_base : python_incl : python_lib ;
</snippet></ROW><ROW><id>14094384</id><snippet>using python : 2.7 : c:/Python27 : c:/Python27/include : c:/Python27/libs ;
</snippet></ROW><ROW><id>14094384</id><snippet>-DBOOST_PYTHON_STATIC_LIB
</snippet></ROW><ROW><id>14094384</id><snippet>::hypot</snippet></ROW><ROW><id>14094384</id><snippet>#include &lt;cmath&gt;</snippet></ROW><ROW><id>14094746</id><snippet>environ['wsgi.input'].read()</snippet></ROW><ROW><id>14095164</id><snippet>import sys
sys.path.append('c:\\myprojects\\MyProjDir\\')

from MyModule import MyClass 
</snippet></ROW><ROW><id>14095164</id><snippet>__init__.py</snippet></ROW><ROW><id>14095164</id><snippet>MyProjDir</snippet></ROW><ROW><id>14095164</id><snippet>__init__.py</snippet></ROW><ROW><id>14095310</id><snippet>mall=Fin.objects.get(name)</snippet></ROW><ROW><id>14095310</id><snippet>name</snippet></ROW><ROW><id>14095310</id><snippet>place_me</snippet></ROW><ROW><id>14095310</id><snippet>.get</snippet></ROW><ROW><id>14095310</id><snippet>mall=Fin.objects.get(name='any name')
# or you can do
mall=Fin.objects.get(user=request.user)
</snippet></ROW><ROW><id>14095351</id><snippet>stdint.h</snippet></ROW><ROW><id>14095570</id><snippet>soup.findAll('table')</snippet></ROW><ROW><id>14095570</id><snippet>secondtable = soup.findAll('table')[1]
</snippet></ROW><ROW><id>14095585</id><snippet>functools.wraps()</snippet></ROW><ROW><id>14095585</id><snippet>import contextlib
import functools

def file_reader(func):
    @functools.wraps(func)
    @contextlib.contextmanager
    def wrapper(file, *args, **kwargs):
        close = kwargs.pop('close', True) # remove `close` argument if present
        f = open(file)
        try:
            yield func(f, *args, **kwargs)
        finally:
            if close:
               f.close()
    return wrapper
</snippet></ROW><ROW><id>14095585</id><snippet>@file_reader
def f(file):
    print(repr(file.read(10)))
    return file

with f('prog.py') as file:
    print(repr(file.read(10)))
</snippet></ROW><ROW><id>14095585</id><snippet>def file_reader(func):
    @functools.wraps(func)
    def helper(*args, **kwds):
        return File(func, *args, **kwds)
    return helper
</snippet></ROW><ROW><id>14095585</id><snippet>self</snippet></ROW><ROW><id>14095585</id><snippet>__enter__()</snippet></ROW><ROW><id>14095585</id><snippet>import sys

class File(object):

    def __init__(self, file, func, *args, **kwargs):
        self.close_file = kwargs.pop('close', True)
        # accept either filename or file-like object
        self.file = file if hasattr(file, 'read') else open(file)

        try:
            # func is responsible for self.file if it doesn't return it
            self.file = func(self.file, *args, **kwargs)
        except:  # clean up on any error
            self.__exit__(*sys.exc_info())
            raise

    # context manager support
    def __enter__(self):
        return self

    def __exit__(self, *args, **kwargs):
        if not self.close_file:
            return  # do nothing
        # clean up
        exit = getattr(self.file, '__exit__', None)
        if exit is not None:
            return exit(*args, **kwargs)
        else:
            exit = getattr(self.file, 'close', None)
            if exit is not None:
                exit()

    # iterator support
    def __iter__(self):
        return self

    def __next__(self):
        return next(self.file)

    next = __next__  # Python 2 support

    # delegate everything else to file object
    def __getattr__(self, attr):
        return getattr(self.file, attr)
</snippet></ROW><ROW><id>14095585</id><snippet>file = f('prog.py')  # use as ordinary function
print(repr(file.read(20)))
file.seek(0)
for line in file:
    print(repr(line))
    break
file.close()
</snippet></ROW><ROW><id>14095663</id><snippet>pd.DatetimeIndex(dates.Dates).month</snippet></ROW><ROW><id>14095728</id><snippet>@deco
def foo():
    # blah
</snippet></ROW><ROW><id>14095728</id><snippet>def foo():
    # blah
foo = deco(foo)
</snippet></ROW><ROW><id>14095728</id><snippet>@</snippet></ROW><ROW><id>14095728</id><snippet>__init__</snippet></ROW><ROW><id>14095728</id><snippet>smilewarmly(meth)</snippet></ROW><ROW><id>14095728</id><snippet>__init__</snippet></ROW><ROW><id>14095728</id><snippet>def smileDeco(func):
    def wrapped(*args, **kw):
        print ":-)"
        func(*args, **kw)
    return classmethod(wrapped)

def makeSmiley(cls):
    for attr, val in cls.__dict__.iteritems():
        if callable(val) and not attr.startswith("__"):
            setattr(cls, attr, smileDeco(val))
    return cls

@makeSmiley
class Foo(object):
    def sayStuff(self):
        print "Blah blah"

&gt;&gt;&gt; Foo().sayStuff()
:-)
Blah blah
</snippet></ROW><ROW><id>14095728</id><snippet>smileDeco</snippet></ROW><ROW><id>14095728</id><snippet>makeSmiley</snippet></ROW><ROW><id>14095728</id><snippet>makeSmiley</snippet></ROW><ROW><id>14095728</id><snippet>smileDeco(classmethod(val))</snippet></ROW><ROW><id>14095728</id><snippet>@classmethod</snippet></ROW><ROW><id>14095728</id><snippet>makeSmiley</snippet></ROW><ROW><id>14095728</id><snippet>@classmethod</snippet></ROW><ROW><id>14095728</id><snippet>__dict__</snippet></ROW><ROW><id>14095781</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; ar = np.array([['replaceme', 1,2], ['replaceme', 3,4],['replaceme', 5,6]], dtype=object)
&gt;&gt;&gt; ar
array([[replaceme, 1, 2],
       [replaceme, 3, 4],
       [replaceme, 5, 6]], dtype=object)
&gt;&gt;&gt; ar == "replaceme"
array([[ True, False, False],
       [ True, False, False],
       [ True, False, False]], dtype=bool)
</snippet></ROW><ROW><id>14095781</id><snippet>&gt;&gt;&gt; ar[ar == "replaceme"] = 2012
&gt;&gt;&gt; ar
array([[2012, 1, 2],
       [2012, 3, 4],
       [2012, 5, 6]], dtype=object)
</snippet></ROW><ROW><id>14095783</id><snippet>\n</snippet></ROW><ROW><id>14095783</id><snippet>print</snippet></ROW><ROW><id>14095860</id><snippet>Numeric</snippet></ROW><ROW><id>14095860</id><snippet>DEC2FLOAT = psycopg2.extensions.new_type(
    psycopg2.extensions.DECIMAL.values,
    'DEC2FLOAT',
    lambda value, curs: float(value) if value is not None else None)
psycopg2.extensions.register_type(DEC2FLOAT)
</snippet></ROW><ROW><id>14095928</id><snippet>open</snippet></ROW><ROW><id>14095928</id><snippet>file</snippet></ROW><ROW><id>14095928</id><snippet>type(open)
# OUT: &lt;type 'builtin_function_or_method'&gt;
type(file)
# OUT: &lt;type 'type'&gt;
</snippet></ROW><ROW><id>14096082</id><snippet>MyBase</snippet></ROW><ROW><id>14096082</id><snippet>@event.listens_for(MyBase, 'mapper_configured')
def get_special_columns(mapper, cls):
    for attrname in dir(cls):
        val = getattr(cls, attrname)
        if isinstance(val, SpecialColumn):
             name1, name2 = "_%s_1" % attrname, "_%s_2" % attrname
             setattr(cls, name1, Column(...))
             setattr(cls, name2, Column(...))

             @hybrid_property
             def myhybrid(self):
                 return getattr(self, name1), getattr(self, name2)

             @myhybrid.setter
             def myhybrid(self, value):
                 setattr(self, name1, value[0])
                 setattr(self, name2, value[1])

             setattr(cls, attrname, myhybrid)
</snippet></ROW><ROW><id>14096136</id><snippet>In [1]: l=[['a1','a2','a3'],['a4','a5','a6'],['a7','a8','a9']]

In [2]: from __future__ import print_function

In [3]: print(*l,sep='\n')
['a1', 'a2', 'a3']
['a4', 'a5', 'a6']
['a7', 'a8', 'a9']
</snippet></ROW><ROW><id>14096275</id><snippet>xml.etree</snippet></ROW><ROW><id>14096275</id><snippet>lxml</snippet></ROW><ROW><id>14096275</id><snippet>import lxml.etree as et
tree = et.XML(yourxml)
print tree.nsmap
</snippet></ROW><ROW><id>14096328</id><snippet>SIOCGIFCONF</snippet></ROW><ROW><id>14096339</id><snippet>sort_keys</snippet></ROW><ROW><id>14096567</id><snippet>image/jpeg</snippet></ROW><ROW><id>14096567</id><snippet>open</snippet></ROW><ROW><id>14096567</id><snippet>import re

mimetypes = {}
with open('mime.types') as mimedata:
    for line in [line.strip() for line in mimedata.readlines()]:
        if line[0] == '#':
            continue

        # This pattern will only get the first extension in the list
        pattern = re.compile(r'([^\s]+)\s+([^\s]+)')
        result  = pattern.match(line)
        mime    = result.group(1)
        ext     = result.group(2)
        mimetypes[mime] = ext
</snippet></ROW><ROW><id>14096567</id><snippet>mime = d.info().gettype()
ext = ''
if mime in mimetypes:
    ext = mimetypes[mime]

o = open('data' + ext, 'w')
o.write(d.read())
</snippet></ROW><ROW><id>14096751</id><snippet>apt-get</snippet></ROW><ROW><id>14096751</id><snippet>apt-get</snippet></ROW><ROW><id>14096751</id><snippet>pip</snippet></ROW><ROW><id>14096751</id><snippet>virtualenv ENV
source ENV/bin/activate
pip install django 
</snippet></ROW><ROW><id>14096751</id><snippet>./ENV</snippet></ROW><ROW><id>14096751</id><snippet>apt-get install python-django</snippet></ROW><ROW><id>14096804</id><snippet>random.random</snippet></ROW><ROW><id>14096804</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; [random.uniform(0, 7) for i in range(4)]
[3.36879678022553, 1.3262017420571945, 2.961415926838038, 6.409486371437773]
</snippet></ROW><ROW><id>14096969</id><snippet>(setq flymake-gui-warnings-enabled nil)
</snippet></ROW><ROW><id>14097130</id><snippet>k,v = shlex.split(line.strip())
</snippet></ROW><ROW><id>14097130</id><snippet>In [1]: import shlex

In [2]: line = 'one two'

In [3]: k,v = shlex.split(line.strip())

In [4]: print k, v
one two

In [5]: line = 'one two three'

In [6]: k,v = shlex.split(line.strip())
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)

/&lt;ipython console&gt; in &lt;module&gt;()

ValueError: too many values to unpack
</snippet></ROW><ROW><id>14097130</id><snippet>In [7]: line = 'one two three'

In [8]: k,v = shlex.split(line.strip())[:2]

In [9]: print k, v
one two
</snippet></ROW><ROW><id>14097130</id><snippet>In [5]: d = {}

In [6]: with open('mime.txt', 'rb') as f:
   ...:     for line in f:
   ...:         mime, val = line.strip().split()[:2]
   ...:         d[mime] = val
   ...:         
   ...:         

In [7]: d
Out[7]: 
{'application/andrew-inset': 'ez',
 'application/applixware': 'aw',
 'application/atom+xml': 'atom',
 'application/atomcat+xml': 'atomcat',
 'application/atomsvc+xml': 'atomsvc',
 'application/ccxml+xml': 'ccxml',
 'application/cdmi-capability': 'cdmia',
 'application/cdmi-container': 'cdmic',
 'image/jpeg': 'jpeg'}

In [8]: d['image/jpeg']
Out[8]: 'jpeg'
</snippet></ROW><ROW><id>14097130</id><snippet>In [1]: d = {}

In [2]: with open('mime.txt', 'rb') as f:
   ...:     for line in f:
   ...:         line = line.strip().split()
   ...:         d[line[0]] = line[1:]
   ...:         
   ...:         

In [3]: d
Out[3]: 
{'application/andrew-inset': ['ez'],
 'application/applixware': ['aw'],
 'application/atom+xml': ['atom'],
 'application/atomcat+xml': ['atomcat'],
 'application/atomsvc+xml': ['atomsvc'],
 'application/ccxml+xml': ['ccxml'],
 'application/cdmi-capability': ['cdmia'],
 'application/cdmi-container': ['cdmic'],
 'image/jpeg': ['jpeg', 'jpg', 'jpe']}
</snippet></ROW><ROW><id>14097130</id><snippet>In [4]: d['image/jpeg'][0]
Out[4]: 'jpeg
</snippet></ROW><ROW><id>14097188</id><snippet>range(1)</snippet></ROW><ROW><id>14097188</id><snippet>[0]</snippet></ROW><ROW><id>14097188</id><snippet>[0, 1]</snippet></ROW><ROW><id>14097188</id><snippet>y == 1</snippet></ROW><ROW><id>14097188</id><snippet>Myclass</snippet></ROW><ROW><id>14097188</id><snippet>myclass</snippet></ROW><ROW><id>14097188</id><snippet>a</snippet></ROW><ROW><id>14097188</id><snippet>b</snippet></ROW><ROW><id>14097390</id><snippet>socket</snippet></ROW><ROW><id>14097390</id><snippet>select</snippet></ROW><ROW><id>14097390</id><snippet>poll</snippet></ROW><ROW><id>14097390</id><snippet>fork</snippet></ROW><ROW><id>14097390</id><snippet>exec()</snippet></ROW><ROW><id>14097390</id><snippet>stdin</snippet></ROW><ROW><id>14097390</id><snippet>stdout</snippet></ROW><ROW><id>14097390</id><snippet>print</snippet></ROW><ROW><id>14097390</id><snippet>sys.stdin.read()</snippet></ROW><ROW><id>14097390</id><snippet>fork()</snippet></ROW><ROW><id>14097390</id><snippet>exec()</snippet></ROW><ROW><id>14097390</id><snippet>select</snippet></ROW><ROW><id>14097390</id><snippet>socket</snippet></ROW><ROW><id>14097445</id><snippet>global</snippet></ROW><ROW><id>14097445</id><snippet>def func2():
    global var1
    print var1

    var1 = "World"

def func1():
    func2()

def main():
    global var1
    var1 = "Hello"
    func1()

    print var1
</snippet></ROW><ROW><id>14097445</id><snippet>Hello
World
</snippet></ROW><ROW><id>14097445</id><snippet>func2</snippet></ROW><ROW><id>14097445</id><snippet>func2</snippet></ROW><ROW><id>14097445</id><snippet>class</snippet></ROW><ROW><id>14097449</id><snippet>ln, = ax.plot(x,y,z)
# some code that updates the x,y,z values -&gt; new_x,new_y,new_z
ln.remove
ln, = ax.plot(new_x,new_y,new_z)
plt.draw()
</snippet></ROW><ROW><id>14097449</id><snippet>matplotlib</snippet></ROW><ROW><id>14097449</id><snippet>ln._verts3d = new_x,new_y,new_z
</snippet></ROW><ROW><id>14097449</id><snippet>Line3D</snippet></ROW><ROW><id>14097449</id><snippet>Line2D</snippet></ROW><ROW><id>14097721</id><snippet>%</snippet></ROW><ROW><id>14097721</id><snippet>"rm -rf %s/%s/*" % (SCRIPT_ROOT, W_ROOT)
</snippet></ROW><ROW><id>14097937</id><snippet>.get()</snippet></ROW><ROW><id>14097937</id><snippet>.accept()</snippet></ROW><ROW><id>14097937</id><snippet>.accept()</snippet></ROW><ROW><id>14097937</id><snippet>get()</snippet></ROW><ROW><id>14097937</id><snippet>.get(timeout=someSeconds)</snippet></ROW><ROW><id>14098035</id><snippet>wx.MessageDialog</snippet></ROW><ROW><id>14098035</id><snippet>wx.MessageBox</snippet></ROW><ROW><id>14098035</id><snippet>wx.lib.agw.genericmessagedialog.GenericMessageDialog</snippet></ROW><ROW><id>14098172</id><snippet> makecommand=Popen('source build/envsetup.sh',stderr=PIPE, shell=True)
</snippet></ROW><ROW><id>14098172</id><snippet> cmd_out, cmd_err = Popen('source build/envsetup.sh', stdout=PIPE, stderr=PIPE, shell=True).communicate()
</snippet></ROW><ROW><id>14098306</id><snippet>&gt; cat verbose.py 
#!/usr/bin/env python

import argparse
import logging

parser = argparse.ArgumentParser(
    description='A test script for http://stackoverflow.com/q/14097061/78845'
)
parser.add_argument("-v", "--verbose", help="increase output verbosity",
                    action="store_true")

args = parser.parse_args()
if args.verbose:
    logging.basicConfig(level=logging.DEBUG)

logging.debug('Only shown in debug mode')
</snippet></ROW><ROW><id>14098306</id><snippet>&gt; ./verbose.py -h
usage: verbose.py [-h] [-v]

A test script for http://stackoverflow.com/q/14097061/78845

optional arguments:
  -h, --help     show this help message and exit
  -v, --verbose  increase output verbosity
</snippet></ROW><ROW><id>14098306</id><snippet>&gt; ./verbose.py -v
DEBUG:root:Only shown in debug mode
</snippet></ROW><ROW><id>14098306</id><snippet>&gt; ./verbose.py   
&gt; 
</snippet></ROW><ROW><id>14098531</id><snippet>html = lxml.html.tostring(node)
</snippet></ROW><ROW><id>14098664</id><snippet>str.split</snippet></ROW><ROW><id>14098664</id><snippet>str</snippet></ROW><ROW><id>14098664</id><snippet>unicode</snippet></ROW><ROW><id>14098664</id><snippet>ipSplit = self.serverVars[0].split('.')</snippet></ROW><ROW><id>14098664</id><snippet>str</snippet></ROW><ROW><id>14098664</id><snippet>unicode</snippet></ROW><ROW><id>14098664</id><snippet>split</snippet></ROW><ROW><id>14099248</id><snippet>for termID, value in docTermDic[docID].iteritems() :
</snippet></ROW><ROW><id>14099248</id><snippet>for termID in docTermDic[docID].keys() :
    value = docTermDic[docID][termID]
</snippet></ROW><ROW><id>14099302</id><snippet>sys.modules</snippet></ROW><ROW><id>14099302</id><snippet>sys.path</snippet></ROW><ROW><id>14099302</id><snippet>import sympy</snippet></ROW><ROW><id>14099302</id><snippet>from sympy import *</snippet></ROW><ROW><id>14099302</id><snippet>class Session(object):
    def __init__(self, gref):
        self.init()
        self.gref = gref

    def init(self):
        self.modules = {}
        self.path = None
        self.glob = {}

    def start(self):
        import sys
        self.modules = sys.modules.copy()
        self.path = sys.path[:]
        self.glob = self.gref.copy()
        self.gref['test'] = 'abc'

    def stop(self):
        import sys
        sys.modules = self.modules.copy()
        sys.path = self.path[:]
        for k in self.gref.keys():
            del self.gref[k]
        self.gref.update(self.glob)

    def __repr__(self):
        return repr(self.glob)
</snippet></ROW><ROW><id>14099302</id><snippet>Python 2.7.3 (default, Aug  1 2012, 05:16:07) 
[GCC 4.6.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from sessionpy import Session
&gt;&gt;&gt; s = Session(globals())
&gt;&gt;&gt; before = 123
&gt;&gt;&gt; s.start()
&gt;&gt;&gt; after = 456
&gt;&gt;&gt; s.stop()
&gt;&gt;&gt; after
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'after' is not defined
Error in sys.excepthook:
Traceback (most recent call last):
  File "/usr/lib/python2.7/dist-packages/apport_python_hook.py", line 66, in apport_excepthook
    from apport.fileutils import likely_packaged, get_recent_crashes
  File "/usr/lib/python2.7/dist-packages/apport/__init__.py", line 1, in &lt;module&gt;
    from apport.report import Report
  File "/usr/lib/python2.7/dist-packages/apport/report.py", line 18, in &lt;module&gt;
    import problem_report
  File "/usr/lib/python2.7/dist-packages/problem_report.py", line 15, in &lt;module&gt;
    from email.encoders import encode_base64
  File "/usr/lib/python2.7/email/__init__.py", line 115, in &lt;module&gt;
    setattr(sys.modules['email'], _name, importer)
KeyError: 'email'

Original exception was:
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'after' is not defined
&gt;&gt;&gt; before
123
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14099302</id><snippet>after</snippet></ROW><ROW><id>14099302</id><snippet>NameError</snippet></ROW><ROW><id>14099302</id><snippet>sys.excepthook</snippet></ROW><ROW><id>14099302</id><snippet>sympy</snippet></ROW><ROW><id>14099302</id><snippet>numpy</snippet></ROW><ROW><id>14099469</id><snippet>self</snippet></ROW><ROW><id>14099469</id><snippet>class Activity(EmbeddedDocument):
    user = ReferenceField('Profile')
    user_unrelated = ReferenceField('Profile')
    created_date = DateTimeField(default=datetime.datetime.now, required=True)
</snippet></ROW><ROW><id>14099650</id><snippet>copyfile</snippet></ROW><ROW><id>14099650</id><snippet>import shutil

php_ini_path_replace = '/etc/php5/cgi/php.ini'
php_ini_path_source = os.path.join(destination, 'production', 'config', 'main-php.ini')

try:
    shutil.copyfile(php_ini_path_source, php_ini_path_replace)
except (Error,IOError):
    print('Error copying the file')

os.system('service php-fastcgi restart')
</snippet></ROW><ROW><id>14099768</id><snippet>line</snippet></ROW><ROW><id>14099768</id><snippet>\n</snippet></ROW><ROW><id>14099768</id><snippet>strip</snippet></ROW><ROW><id>14099768</id><snippet>numrefs</snippet></ROW><ROW><id>14099768</id><snippet>line in numrefs</snippet></ROW><ROW><id>14099768</id><snippet>numrefs</snippet></ROW><ROW><id>14099768</id><snippet>p4()</snippet></ROW><ROW><id>14099768</id><snippet>def p4(base_num):
    numrefs = ['nums/89/202089/4', 'nums/39/205739/2', 'nums/94/195594/6']
    num_ignore = [150362, 147117, 147441, 143446, 200914]

    with open('./num_ids.txt', 'rb') as f:
        for line in f:
            text = line.strip()  # Trim trailing whitespace and newline
            num = int(text)
            if (num &gt; base_num
                    and num not in num_ignore
                    # Check for any substring in list of strings
                    and any(text in numref for numref in numrefs)):
                print text
</snippet></ROW><ROW><id>14099768</id><snippet>numref</snippet></ROW><ROW><id>14099768</id><snippet>if</snippet></ROW><ROW><id>14099768</id><snippet>            if num &gt; base_num and num not in num_ignore:
                result = [numref for numref in numrefs if text in numref]
                if result:
                    print result[0]
</snippet></ROW><ROW><id>14099768</id><snippet>if</snippet></ROW><ROW><id>14100124</id><snippet>Manager</snippet></ROW><ROW><id>14100124</id><snippet>https://github.com/django/django/blob/master/django/db/models/sql/compiler.py</snippet></ROW><ROW><id>14100124</id><snippet>get_ordering()</snippet></ROW><ROW><id>14100124</id><snippet>USING</snippet></ROW><ROW><id>14100173</id><snippet>import networkx as nx
import matplotlib.pyplot as plt

data = (('a','b',50), ('b','c',60), ('b','e',25),
        ('e','f',20), ('z','n',10), ('x','m',25),
        ('v','p',15))

G = nx.DiGraph()
for node1, node2, weight1 in data:
    G.add_edge(node1, node2, weight=-1)

min_lenght = 2
F = nx.DiGraph()   #filtered graphs

# check all edges with bellman_ford
for u, v in G.edges():
    vals, distances = nx.bellman_ford(G, u)
    if min(distances.values()) &lt; - min_lenght:
        for u, v in vals.items():
            if v:
                F.add_edge(v, u)

nx.draw(F)
plt.show()
</snippet></ROW><ROW><id>14100173</id><snippet>G = nx.DiGraph()
for node1, node2, weight1 in data:
    G.add_edge(node1, node2, weight=weight1)

min_lenght = 100  

H = nx.DiGraph(G)  # intermediate graph
# change sign of weights
for u, v in H.edges():
    H[u][v]['weight'] *= -1

# check all edges with bellman_ford
for u, v in G.edges():
    vals, distances = nx.bellman_ford(H, u)
    if min(distances.values()) &lt; - min_lenght:
        #--- whatever ----
</snippet></ROW><ROW><id>14100221</id><snippet>  val houses = List(1, 2, 3, 4, 5)
  val orderings = houses.permutations.toList
  val List(first, _, middle, _, _) = houses

  def imright(h1: Int, h2: Int) = h1 - h2 == 1

  def nextto(h1: Int, h2: Int) = math.abs(h1 - h2) == 1

  for (List(red, green, ivory, yellow, blue) &lt;- orderings if imright(green, ivory))
    for(List(englishman, spaniard, ukranian, japanese, norwegian) &lt;- orderings
      if (englishman == red)
    ) println(Map(
      "englishman" -&gt; englishman
      ,"red" -&gt; red
      ,"norwegian" -&gt; norwegian
      ,"first" -&gt; first
    ))   
</snippet></ROW><ROW><id>14100772</id><snippet>import httplib
</snippet></ROW><ROW><id>14100865</id><snippet>labelpad</snippet></ROW><ROW><id>14100865</id><snippet>set_ylabel</snippet></ROW><ROW><id>14100865</id><snippet>set_xlabel</snippet></ROW><ROW><id>14100865</id><snippet>Definition: ax.set_ylabel(self, ylabel, fontdict=None, labelpad=None, **kwargs)
Docstring:
Call signature::

  set_ylabel(ylabel, fontdict=None, labelpad=None, **kwargs)

Set the label for the yaxis

*labelpad* is the spacing in points between the label and the y-axis
</snippet></ROW><ROW><id>14100865</id><snippet>ax.xaxis.LABELPAD = 8  # default is 5
</snippet></ROW><ROW><id>14100865</id><snippet>ax.xaxis.labelpad = 8
</snippet></ROW><ROW><id>14100971</id><snippet>r_list = [re.compile("..."),
          re.compile("..."),
          re.compile("..."), 
          re.compile("...")]
if any(r.match(string) for r in r_list):
    # if at least one of the regex's matches do smth
</snippet></ROW><ROW><id>14101035</id><snippet>target.close</snippet></ROW><ROW><id>14101035</id><snippet>txt.close</snippet></ROW><ROW><id>14101035</id><snippet>()</snippet></ROW><ROW><id>14101035</id><snippet>file.close()</snippet></ROW><ROW><id>14101035</id><snippet>file.flush()</snippet></ROW><ROW><id>14101035</id><snippet>target.truncate()</snippet></ROW><ROW><id>14101035</id><snippet>write</snippet></ROW><ROW><id>14101035</id><snippet>with</snippet></ROW><ROW><id>14101035</id><snippet>f = open("test.txt", "r")
s = f.read()
f.close()
</snippet></ROW><ROW><id>14101035</id><snippet>with</snippet></ROW><ROW><id>14101035</id><snippet>with open("test.txt", "r") as f:
    s = f.read()
</snippet></ROW><ROW><id>14101089</id><snippet>$LD_LIBRARY_PATH</snippet></ROW><ROW><id>14101090</id><snippet>strftime</snippet></ROW><ROW><id>14101090</id><snippet>${post.date.strftime('%Y/%m/%d %H:%M')
</snippet></ROW><ROW><id>14101090</id><snippet>&lt;%! from time import strftime as time %&gt;
It is the ${"%d of %B" | time}
</snippet></ROW><ROW><id>14101096</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtCore, QtGui

class Settings(QtGui.QDialog):
    def __init__(self, parent=None):
        super(Settings, self).__init__(parent)

        self.parent = parent

        self.setWindowTitle(u'Préférences')

        self.list_pathes = QtGui.QListWidget(self)

        self.label_directories = QtGui.QLabel(self)
        self.label_directories.setText(u"Dossiers surveillés :")

        self.rm_directory_button = QtGui.QPushButton(self)
        self.rm_directory_button.setText(u"Enlever")
        self.rm_directory_button.clicked.connect(self.removePath)

        self.add_directory_button = QtGui.QPushButton(self)
        self.add_directory_button.setText(u"Ajouter")
        self.add_directory_button.clicked.connect(self.addPath)

        self.gridLayout = QtGui.QGridLayout(self)
        self.gridLayout.addWidget(self.label_directories, 0, 0, 1, 1)
        self.gridLayout.addWidget(self.list_pathes, 2, 0, 2, 2)
        self.gridLayout.addWidget(self.rm_directory_button, 3, 2, 1, 1)
        self.gridLayout.addWidget(self.add_directory_button, 2, 2, 1, 1)

        self.show()    
    #    self.connexion()

    def connexion(self):
        self.parent.options.beginGroup("Watching")
        pathes = self.parent.options.allKeys()
        if pathes:
            for each_key in pathes:
                self.list_pathes.addItem(self.parent.options.value(each_key))

        self.parent.options.endGroup()

    def removePath(self):
        try:
            path = self.list_pathes.selectedItems()[0].text()
            item = self.list_pathes.takeItem(self.list_pathes.currentRow())
            del item

        except IndexError:
            print(u"Aucun path sélectionné")

    def addPath(self):
        path = QtGui.QFileDialog.getExistingDirectory(self, 'Open file', '/home')
        self.list_pathes.addItem(path)

class MainWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        self.settingsAction = QtGui.QAction(u'Préférences', self)
        self.settingsAction.triggered.connect(lambda: Settings(self))

        self.toolBar = QtGui.QToolBar(self)
        self.toolBar.addAction(self.settingsAction)

        self.addToolBar(QtCore.Qt.ToolBarArea(QtCore.Qt.TopToolBarArea), self.toolBar)

if __name__ == "__main__":
    import  sys

    app  = QtGui.QApplication(sys.argv)
    main = MainWindow()
    main.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14101178</id><snippet>ndarray</snippet></ROW><ROW><id>14101178</id><snippet>coords = np.zeros((5, 5, 30, 2, 4))
coords[..., 0] = np.array(mapLatitude).reshape(5, 1, 1, 1)
coords[..., 1] = np.array(mapLongitude).reshape(1, 5, 1, 1)
coords[..., 2] = np.array(mapAltitude).reshape(1, 1, 30, 1)
coords[..., 3] = np.array(mapTime).reshape(1, 1, 1, 2)
</snippet></ROW><ROW><id>14101178</id><snippet>def makeCoordinateMatrix(*coords) :
    dims = len(coords)
    coords = [np.array(a) for a in coords]
    shapes = tuple([len(a) for a in coords])
    ret = np.zeros(shapes + (dims,))
    for j, a in enumerate(coords) :
        ret[..., j] = a.reshape((len(a),) + (1,) * (dims - j - 1))
    return ret

coordinateMatrix = makeCoordinateMatrix(mapLatitude, mapLongitude,
                                        mapAltitude, mapTime)
</snippet></ROW><ROW><id>14101592</id><snippet>'\d{4,}'</snippet></ROW><ROW><id>14101592</id><snippet>import re

str='123abc1234def12'
print re.findall('\d{4,}',str)

&gt;&gt;&gt; '[1234]'
</snippet></ROW><ROW><id>14101592</id><snippet>{0,3}</snippet></ROW><ROW><id>14101592</id><snippet>str='123456'
print re.findall('\d{0,3}',str)

&gt;&gt;&gt; ['123', '456', '']
</snippet></ROW><ROW><id>14101592</id><snippet>regex</snippet></ROW><ROW><id>14101592</id><snippet>str='1234'

if re.match('\d{4,}',str):
    print 'Max digit string too long!'

&gt;&gt;&gt; Max digit string too long!
</snippet></ROW><ROW><id>14101686</id><snippet>import dbus
import dbus.service
import gobject
from dbus.mainloop.glib import DBusGMainLoop

def event_factory(event_name):
    class Event(dbus.service.Object):
        def __init__(self):
            self.busName = dbus.service.BusName('com.acme.EventManager',
                                                bus=dbus.SessionBus())
            dbus.service.Object.__init__(self,
                                         self.busName,
                                         '/com/acme/EventManager/'+event_name)

        @dbus.service.signal(dbus_interface='com.acme.EventManager.'+event_name,
                             signature='v')
        def emit(self, data):
            print "In %s event, got: %s " % (event_name, data)

    return Event() # return an instance of the class

if __name__ == "__main__":
    DBusGMainLoop(set_as_default=True)
    bus = dbus.SessionBus()
    loop = gobject.MainLoop()
    connect = event_factory('Connect')
    disconnect = event_factory('Disconnect')
    loop.run()
</snippet></ROW><ROW><id>14102003</id><snippet>def multicolor_message(msgs, colors=None):
  if colors is None:
    colors=[libtcod.white for x in len(msgs)]
</snippet></ROW><ROW><id>14102167</id><snippet>email.py</snippet></ROW><ROW><id>14102167</id><snippet>email</snippet></ROW><ROW><id>14102167</id><snippet>email.pyc</snippet></ROW><ROW><id>14102197</id><snippet>list</snippet></ROW><ROW><id>14102197</id><snippet>add</snippet></ROW><ROW><id>14102197</id><snippet>target</snippet></ROW><ROW><id>14102197</id><snippet>domain</snippet></ROW><ROW><id>14102197</id><snippet>forwarding</snippet></ROW><ROW><id>14102197</id><snippet>transport</snippet></ROW><ROW><id>14102197</id><snippet>user</snippet></ROW><ROW><id>14102197</id><snippet>if..then..else</snippet></ROW><ROW><id>14102197</id><snippet>('domain','list')</snippet></ROW><ROW><id>14102197</id><snippet>('transport','add')</snippet></ROW><ROW><id>14102197</id><snippet>import itertools as IT

targets = 'domain forwarding transport user'.split()
actions = 'list add'.split()

dispatch = {key:globals()['%s_%s' % key] for key in IT.product(targets, actions)}

# This calls the function specified by (target, action).
# The `dict.get` method is used so that if the key is not in `dispatch`, the `all_list` function is called.
dispatch.get((args.target, args.action), all_list)()
</snippet></ROW><ROW><id>14102373</id><snippet>+</snippet></ROW><ROW><id>14102373</id><snippet>for cell in sh1c1: xmlData.write(str(cell) + "\n")
</snippet></ROW><ROW><id>14102373</id><snippet>for cell in sh1c1: xmlData.write("{0}\n".format(cell)) 
</snippet></ROW><ROW><id>14102373</id><snippet>for cell in sh1c1: xmlData.write("%s\n" % cell)
</snippet></ROW><ROW><id>14102566</id><snippet>__hash__()</snippet></ROW><ROW><id>14102566</id><snippet>__repr__()</snippet></ROW><ROW><id>14102566</id><snippet>hash(int)</snippet></ROW><ROW><id>14102566</id><snippet>hash(1)</snippet></ROW><ROW><id>14102566</id><snippet>__hash__()</snippet></ROW><ROW><id>14102566</id><snippet>hash(int)</snippet></ROW><ROW><id>14102566</id><snippet>int.__hash__()</snippet></ROW><ROW><id>14102566</id><snippet>int.__hash__()</snippet></ROW><ROW><id>14102566</id><snippet>int()</snippet></ROW><ROW><id>14102566</id><snippet>1</snippet></ROW><ROW><id>14102566</id><snippet>hash(int)</snippet></ROW><ROW><id>14102566</id><snippet>type.__hash__()</snippet></ROW><ROW><id>14102566</id><snippet>&gt;&gt;&gt; hash(1) == int.__hash__(1)
True
&gt;&gt;&gt; hash(int) == type.__hash__(int)
True
&gt;&gt;&gt; int.__hash__()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: descriptor '__hash__' of 'int' object needs an argument
</snippet></ROW><ROW><id>14102882</id><snippet>td.days</snippet></ROW><ROW><id>14102882</id><snippet>td.seconds</snippet></ROW><ROW><id>14102882</id><snippet>td.microseconds</snippet></ROW><ROW><id>14102891</id><snippet>import pandas as pd
df = pd.DataFrame(range(4), columns = ['col'])

print(df['col'] - df['col'].shift())
# 0   NaN
# 1     1
# 2     1
# 3     1
# Name: col

print(df['col'] + df['col'].shift())
# 0   NaN
# 1     1
# 2     3
# 3     5
# Name: col
</snippet></ROW><ROW><id>14102891</id><snippet>NaN</snippet></ROW><ROW><id>14102891</id><snippet>NaN</snippet></ROW><ROW><id>14102891</id><snippet>add</snippet></ROW><ROW><id>14102891</id><snippet>sub</snippet></ROW><ROW><id>14102891</id><snippet>fill_value = 0</snippet></ROW><ROW><id>14102891</id><snippet>print(df['col'].sub(df['col'].shift(), fill_value = 0))
# 0    0
# 1    1
# 2    1
# 3    1
# Name: col

print(df['col'].add(df['col'].shift(), fill_value = 0))
# 0    0
# 1    1
# 2    3
# 3    5
# Name: col
</snippet></ROW><ROW><id>14103163</id><snippet>from nltk.tokenize.punkt import PunktSentenceTokenizer, PunktParameters
punkt_param = PunktParameters()
punkt_param.abbrev_types = set(['dr', 'vs', 'mr', 'mrs', 'prof', 'inc'])
sentence_splitter = PunktSentenceTokenizer(punkt_param)
text = "is THAT what you mean, Mrs. Hussey?"
sentences = sentence_splitter.tokenize(text)
</snippet></ROW><ROW><id>14103163</id><snippet>['is THAT what you mean, Mrs. Hussey?']
</snippet></ROW><ROW><id>14103163</id><snippet>text = text.replace('?"', '? "').replace('!"', '! "').replace('."', '. "')
</snippet></ROW><ROW><id>14103180</id><snippet>/etc/adduser.conf</snippet></ROW><ROW><id>14103180</id><snippet>GROUPHOMES=yes</snippet></ROW><ROW><id>14103180</id><snippet>adduser</snippet></ROW><ROW><id>14103180</id><snippet>/home/groupname/user.</snippet></ROW><ROW><id>14103180</id><snippet>LETTERHOMES=yes</snippet></ROW><ROW><id>14103180</id><snippet>/home/u/user</snippet></ROW><ROW><id>14103180</id><snippet>from os.path import join, expanduser
join(expanduser('~'), '.config') # You could have something more funky if you want to. 
</snippet></ROW><ROW><id>14103354</id><snippet>loadtxt</snippet></ROW><ROW><id>14103354</id><snippet>lambda</snippet></ROW><ROW><id>14103354</id><snippet>-</snippet></ROW><ROW><id>14103354</id><snippet>int</snippet></ROW><ROW><id>14103354</id><snippet>data = np.loadtxt('delnorte.dat',
         usecols=(2,3),
         converters={2: lambda s: int(s.split('-')[0])},
         skiprows=27)

array([[ 2000.,   190.],
       [ 2000.,   170.],
       [ 2000.,   160.],
       ..., 
       [ 2010.,   185.],
       [ 2010.,   175.],
       [ 2010.,   165.]])
</snippet></ROW><ROW><id>14103354</id><snippet>2005</snippet></ROW><ROW><id>14103354</id><snippet>data_2005 = data[data[:,0] == 2005]

array([[ 2005.,   210.],
       [ 2005.,   190.],
       [ 2005.,   190.],
       [ 2005.,   200.],
        ....])
</snippet></ROW><ROW><id>14103631</id><snippet>&gt;&gt;&gt; x.sort(key=lambda item: (len(item), item))
&gt;&gt;&gt; x
['a', 'b', 'c', 'aa', 'ab', 'ba', 'aaa']
</snippet></ROW><ROW><id>14103801</id><snippet>self.port</snippet></ROW><ROW><id>14103801</id><snippet>sudo netstat -anp | grep LISTEN</snippet></ROW><ROW><id>14103835</id><snippet>&gt;&gt;&gt; for n in (25, 100, 1234567890):
        print('{:0&gt;8}'.format(n)[-8:])

00000025
00000100
34567890
</snippet></ROW><ROW><id>14103835</id><snippet>&gt;&gt;&gt; 'Spams spam and spam'[:15]
'Spams spam and '
&gt;&gt;&gt; 'viking inc'[:15]
'viking inc'
</snippet></ROW><ROW><id>14103835</id><snippet>&gt;&gt;&gt; '{:&lt;15}'.format('Spams spam and spam'[:15])
'Spams spam and '
&gt;&gt;&gt; '{:&lt;15}'.format('viking inc'[:15])
'viking inc     '
</snippet></ROW><ROW><id>14104109</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'foo(?:$|\n)', "foo\nbar\nfood\nfoo")
['foo\n', 'foo']
</snippet></ROW><ROW><id>14104109</id><snippet>(?:...)</snippet></ROW><ROW><id>14104374</id><snippet>None</snippet></ROW><ROW><id>14104374</id><snippet>def __init__(self, newdata=None):
    if newdata is None:
        newdata = {}
    # ...
</snippet></ROW><ROW><id>14104743</id><snippet>&gt;&gt;&gt; s = "this/is/a/test23.123456789.bin"
&gt;&gt;&gt; s.split( "/" )[-1][:6]
'test23'
</snippet></ROW><ROW><id>14104743</id><snippet>-1</snippet></ROW><ROW><id>14104743</id><snippet>&gt;&gt;&gt; s = "this/is/a/test23.123456789.bin"
&gt;&gt;&gt; last_part = s.split( "/" )[-1].split( "." )
&gt;&gt;&gt; if len( last_part ) != 6:
...  print "Improper file format"
&gt;&gt;&gt; else:
...  print "Correct: %s" % last_format
</snippet></ROW><ROW><id>14104743</id><snippet>mac</snippet></ROW><ROW><id>14104799</id><snippet>import os
os.chmod("my_script.sh", 0744)
</snippet></ROW><ROW><id>14105145</id><snippet>Test</snippet></ROW><ROW><id>14105145</id><snippet>TestManger</snippet></ROW><ROW><id>14105145</id><snippet>objects</snippet></ROW><ROW><id>14105145</id><snippet>Test</snippet></ROW><ROW><id>14105145</id><snippet>_tests</snippet></ROW><ROW><id>14105145</id><snippet>TestManger</snippet></ROW><ROW><id>14105145</id><snippet>class TestManager:
    def __init__(self, *args, **kwargs):
        print('creating TestManager')

    def get(self, id):
        return self._tests[id]

class TestMetaClass(type):
    def __new__(mcl, name, bases, classdict):
        # add an "objects" attribute to the class being created
        classdict['objects'] = tm = TestManager()
        cls = type.__new__(mcl, name, bases, classdict)
        # add a "_tests" attribute to the TestManager instance just created
        # (can't use class's name, since it hasn't been returned yet)
        tm._tests = [cls(name='Name {}'.format(i)) for i in range(100)]
        return cls

class Test(metaclass=TestMetaClass):
    def __init__(self, name=''):
        self.name = name

t = Test.objects.get(3)
print(t.name)
</snippet></ROW><ROW><id>14105306</id><snippet>def filecreation(alist, filename):
    #print "alist"
    with open(filename, 'w') as d:
        d.writelines(alist)
</snippet></ROW><ROW><id>14105389</id><snippet>class InheritedPlus(object):
    def __init__(self, toAdd):
        self.toAdd = toAdd

def addInherited(cls):
    for attr, val in vars(cls).iteritems():
        if isinstance(val, InheritedPlus):
            setattr(cls, attr, getattr(super(cls, cls), attr)+val.toAdd)
    return cls

class A(object):
    x = 2

@addInherited
class B(A):
    x = InheritedPlus(3)

&gt;&gt;&gt; B.x
5
</snippet></ROW><ROW><id>14105389</id><snippet>+=</snippet></ROW><ROW><id>14105389</id><snippet>Inherited()</snippet></ROW><ROW><id>14105389</id><snippet>x = Inherited() + 3</snippet></ROW><ROW><id>14105389</id><snippet>a.a + 4</snippet></ROW><ROW><id>14105612</id><snippet>value = info.findNext("b")
value = value if value else "Oompa Loompa"
</snippet></ROW><ROW><id>14105612</id><snippet>value = info.findNext("b")
if not value:
    value = "Oompa Loompa"
</snippet></ROW><ROW><id>14105612</id><snippet>value = info.findNext("b") or "Oompa Loompa"
</snippet></ROW><ROW><id>14105612</id><snippet>findNext</snippet></ROW><ROW><id>14105612</id><snippet>None</snippet></ROW><ROW><id>14105612</id><snippet>def findNext(self, needle, defvalue=None):
    # same code as before, but instead of return None or falling off the end,
    # just return defvalue.
</snippet></ROW><ROW><id>14105612</id><snippet>value = info.findNext("b", "Oompa Loompa")
</snippet></ROW><ROW><id>14105630</id><snippet>session.query(func.max(Table.title), Table.slug).group_by(Table.slug).all()
</snippet></ROW><ROW><id>14105661</id><snippet>def func2 (list1,list2):
     value=10
     list1.append(value)
     list2.append(value)

listA = [1,2,3]
listB = [7,8,9]

func2(listA,listB)

print listA
print listB
</snippet></ROW><ROW><id>14105670</id><snippet>_initial_</snippet></ROW><ROW><id>14105670</id><snippet>form = UserForm(initial={'username': 'please enter username', 'password':'enter password'})</snippet></ROW><ROW><id>14105670</id><snippet>username = forms.CharField(initial='please enter username')</snippet></ROW><ROW><id>14105717</id><snippet>inner_qs = table2.objects.all()
results = table1.objects.exclude(field1__in=inner_qs)
</snippet></ROW><ROW><id>14105827</id><snippet>if ("x","y","z") in aarr:
</snippet></ROW><ROW><id>14105827</id><snippet>.keys()</snippet></ROW><ROW><id>14105827</id><snippet>&gt;&gt;&gt; aarr = {}
&gt;&gt;&gt; aarr["x","y","z"]=1
&gt;&gt;&gt; if ("x","y","z") in aarr:
...     print 'success!'
... 
success!
&gt;&gt;&gt; aarr.keys()
[('x', 'y', 'z')]
&gt;&gt;&gt; aarr.keys()[0]
('x', 'y', 'z')
</snippet></ROW><ROW><id>14105831</id><snippet>Message</snippet></ROW><ROW><id>14105831</id><snippet>tkMessageBox.Message</snippet></ROW><ROW><id>14105831</id><snippet>Tkinter.Message</snippet></ROW><ROW><id>14105831</id><snippet>Dialog</snippet></ROW><ROW><id>14105831</id><snippet>tkCommonDialog</snippet></ROW><ROW><id>14105831</id><snippet>pack</snippet></ROW><ROW><id>14105831</id><snippet>from Tkinter import *
from tkMessageBox import *
</snippet></ROW><ROW><id>14105831</id><snippet>Message</snippet></ROW><ROW><id>14105831</id><snippet>Message</snippet></ROW><ROW><id>14105831</id><snippet>from Tkinter import *
import tkMessageBox
</snippet></ROW><ROW><id>14105844</id><snippet>maxlen = len(max(l, key=len)) 
maxlist = [s for s in l if len(s) == maxlen]
</snippet></ROW><ROW><id>14105970</id><snippet>class</snippet></ROW><ROW><id>14105970</id><snippet>{'class': 'posted-on'}</snippet></ROW><ROW><id>14105970</id><snippet>currentDate = soup.find('span', {'class': 'posted-on'})
</snippet></ROW><ROW><id>14105970</id><snippet>class_</snippet></ROW><ROW><id>14105970</id><snippet>currentDate = soup.find('span', class_='posted-on')
</snippet></ROW><ROW><id>14106308</id><snippet>with_="linespoints lt 1 lw 6 pt 1 linecolor rgb 'black'" #put this inside Gnuplot.PlotItems.Data() command
</snippet></ROW><ROW><id>14106308</id><snippet>with_="linespoints lt rgb 'black' ..."</snippet></ROW><ROW><id>14106308</id><snippet>linespoints</snippet></ROW><ROW><id>14106308</id><snippet>linecolor</snippet></ROW><ROW><id>14106308</id><snippet>linetype</snippet></ROW><ROW><id>14106308</id><snippet>with_</snippet></ROW><ROW><id>14106308</id><snippet>linespoints (args to linespoints) linecolor (args to linecolor)</snippet></ROW><ROW><id>14106334</id><snippet>In [16]: pandas.NaT.year
Out[16]: -1
</snippet></ROW><ROW><id>14106334</id><snippet>DatetimeIndex</snippet></ROW><ROW><id>14106334</id><snippet>NaT</snippet></ROW><ROW><id>14106334</id><snippet>numpy</snippet></ROW><ROW><id>14106334</id><snippet>pandas.NaT.isoformat()</snippet></ROW><ROW><id>14106334</id><snippet>year</snippet></ROW><ROW><id>14106334</id><snippet>numpy</snippet></ROW><ROW><id>14106334</id><snippet>int</snippet></ROW><ROW><id>14106334</id><snippet>None</snippet></ROW><ROW><id>14106334</id><snippet>year</snippet></ROW><ROW><id>14106334</id><snippet>array(dtype=object)</snippet></ROW><ROW><id>14106334</id><snippet>NaT.year</snippet></ROW><ROW><id>14106334</id><snippet>NaN</snippet></ROW><ROW><id>14106334</id><snippet>NaT.year</snippet></ROW><ROW><id>14106334</id><snippet>array</snippet></ROW><ROW><id>14106334</id><snippet>numpy</snippet></ROW><ROW><id>14106334</id><snippet>numpy</snippet></ROW><ROW><id>14106334</id><snippet>datetime</snippet></ROW><ROW><id>14106334</id><snippet>numpy</snippet></ROW><ROW><id>14106334</id><snippet>datetime64</snippet></ROW><ROW><id>14106334</id><snippet>pandas.NaT</snippet></ROW><ROW><id>14106334</id><snippet>datetime64(-1)</snippet></ROW><ROW><id>14106334</id><snippet>numpy</snippet></ROW><ROW><id>14106334</id><snippet>np.datetime64('NaT')</snippet></ROW><ROW><id>14106678</id><snippet>class Case(Base):
    version = Column(Integer, info={'description': 'Version Number'})
</snippet></ROW><ROW><id>14106678</id><snippet>desc = Case.__table__.c.version.info.get('description', '&lt;no description&gt;')
</snippet></ROW><ROW><id>14106678</id><snippet>class Case(Base):
    # Column definitions go here...

    def as_dict(self):
        return {c.name: (getattr(self, c.name), c.info.get('description'))
                for c in self.__table__.c}
</snippet></ROW><ROW><id>14106681</id><snippet>asyncore.loop()</snippet></ROW><ROW><id>14106681</id><snippet>asyncore.loop(timeout=0.1)</snippet></ROW><ROW><id>14106681</id><snippet>self.loop = threading.Thread(target=asyncore.loop)</snippet></ROW><ROW><id>14106681</id><snippet>self.loop = threading.Thread(target=asyncore.loop, kwargs={'timeout':0.1})</snippet></ROW><ROW><id>14106843</id><snippet>while</snippet></ROW><ROW><id>14106843</id><snippet>for</snippet></ROW><ROW><id>14106843</id><snippet>for character in x:
    print(test[character])
</snippet></ROW><ROW><id>14106843</id><snippet>characters = []
for character in x:
    characters.append(str(test[character]))
</snippet></ROW><ROW><id>14106843</id><snippet>int</snippet></ROW><ROW><id>14106843</id><snippet>int("".join(characters))
</snippet></ROW><ROW><id>14106843</id><snippet>characters = [str(test[character]) for character in x]
</snippet></ROW><ROW><id>14106843</id><snippet>test = {'a': 1, 'b': 2 , 'c': 3 , 'd': 4}

user_input = raw_input("Type 'abcd':")

number = int("".join(str(test[character]) for character in user_input))
</snippet></ROW><ROW><id>14106843</id><snippet>number = sum((10 ** power) * test[character] 
             for power, character in enumerate(reversed(user_input)))
</snippet></ROW><ROW><id>14106929</id><snippet>allcolors = range(0xFFFFFF+1):
</snippet></ROW><ROW><id>14106963</id><snippet>func</snippet></ROW><ROW><id>14106963</id><snippet>func2</snippet></ROW><ROW><id>14106963</id><snippet># Internal function used by func2 and func1
def func2_(value):
    list1=[]
    list2=[]
    value=10
    #do some operations based on value
    (list3,list4)=func3(value)
    return list1, list2, list3, list4

# Real func2 with the desired public API
def func2(value):
    list1, list2, _, _ = func2_(value)
    return list1, list2

def func1() :
    value =20
    (list1,list2,list3,list4)= func2_(value)
    #func1 _has_ list3 and list4
</snippet></ROW><ROW><id>14106963</id><snippet>func2</snippet></ROW><ROW><id>14106963</id><snippet>func3</snippet></ROW><ROW><id>14106963</id><snippet>func1</snippet></ROW><ROW><id>14106963</id><snippet>list3</snippet></ROW><ROW><id>14106963</id><snippet>list4</snippet></ROW><ROW><id>14106963</id><snippet>func1</snippet></ROW><ROW><id>14106963</id><snippet>func3</snippet></ROW><ROW><id>14106963</id><snippet>[]</snippet></ROW><ROW><id>14106963</id><snippet>None</snippet></ROW><ROW><id>14106963</id><snippet>def func2():
    list1=[]
    list2=[]
    value=10
    if somePredicate():
        (list3,list4)=func3(value)
        return list1, list2, list3, list4
    else:
        return list1, list2, None, None
</snippet></ROW><ROW><id>14106963</id><snippet>func2</snippet></ROW><ROW><id>14106963</id><snippet>func3</snippet></ROW><ROW><id>14106963</id><snippet>func1</snippet></ROW><ROW><id>14106963</id><snippet>def func2():
    list1=[]
    list2=[]
    value=10
    if somePredicate():
        (list3,list4)=func3(value)
        return list1, list2, list3, list4
    else:
        return list1, list2
</snippet></ROW><ROW><id>14106963</id><snippet>list</snippet></ROW><ROW><id>14106963</id><snippet>lists = function2(value)
if len(lists) == 4:
    list1, list2, list3, list4 = lists
    # do stuff will all 4 lists
else:
    list1, list2 = lists
    # do stuff with just 2 lists—or, if you needed the others, complain
</snippet></ROW><ROW><id>14106963</id><snippet>class Class1(object):
    def __init__(self):
        self.list1, self.list2, self.list3, self.list4 = [], [], [], []
    def func3 (value):
        self.list3=[]
        self.list4=[]
        #do some operations based on value (that presumably modify list3/list4)
    def func2(self, value):
        self.list1=[]
        self.list2=[]
        #do some operations based on value (that presumably modify list1/list2)
        self.func3(value) # this sets self.list3 and self.list4
    def func1(self):
        value =20
        self.func2(value)
        #func1 now has access to the same self.list3 and self.list4 as func2
</snippet></ROW><ROW><id>14107332</id><snippet>&amp;</snippet></ROW><ROW><id>14107332</id><snippet>and</snippet></ROW><ROW><id>14107332</id><snippet>np.where((a==5) &amp; (b==16))
</snippet></ROW><ROW><id>14107377</id><snippet>from Cookie import SimpleCookie

def my_app(environ, start_response):
    session_cookie = SimpleCookie()
    session_cookie['session'] = "somedata"
    session_cookie['session']["Path"] = '/'

    headers = []
    headers.extend(("set-cookie", morsel.OutputString())
                    for morsel
                    in session_cookie.values())

    start_response("200 OK", headers)
</snippet></ROW><ROW><id>14107528</id><snippet>NoSQLStore = {}

class NoSQL(object):
    """ fake """
    def query(self, key): 
        return '%s\n' % NoSQLStore.get(key, 'no such key')
    def put(self, key, value):
        NoSQLStore[key] = value

def with_database(fn):
    """ Decorator for functions, that need database access.
        NoSQL object will be stored under ``g.db``. 
    """
    def connect_and_close(*args, **kwargs):
        g.db = NoSQL()
        __result = fn(*args, **kwargs)
        # a real database should be somehow ``closed()`` here
        return __result
    return connect_and_close

class StoreAPI(MethodView):

    @with_database
    def get(self):
        return g.db.query(request.args.get('key'))

    @with_database
    def post(self):
        key, value = str(random.randint(0, 1000)), str(random.randint(0, 1000))
        g.db.put(key, value)
        return 'set %s =&gt; %s\n' % (key, value)
</snippet></ROW><ROW><id>14107593</id><snippet>3&gt;&gt; bytes.fromhex('1234567890ABCDEF')
b'\x124Vx\x90\xab\xcd\xef'
</snippet></ROW><ROW><id>14107689</id><snippet>[ x for x in itertools.takewhile(
    lambda line: sync(line) == 0,    # &lt;- predicate
    open("file.txt")) ]              # &lt;- iterable
</snippet></ROW><ROW><id>14107689</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; def sync(n):
...   if n == 3: return -1 # error
...   return 0

&gt;&gt;&gt; lines = [1, 2, 3, 4, 5, 6]
&gt;&gt;&gt; [ x for x in itertools.takewhile(lambda x: sync(x) == 0, lines) ]
[1, 2]
</snippet></ROW><ROW><id>14107689</id><snippet>with open("file") as fh:
    for line in fh:
        if not sync(int(line)) == 0:
            break
</snippet></ROW><ROW><id>14107802</id><snippet>def find_pass(fname,target_title):
    with open(fname) as f:
        for ln in f:
            # some test to see if this is the line you want
            if ln.startswith(target_title):
                return ln[len(target_title):].strip()
</snippet></ROW><ROW><id>14107819</id><snippet>import os, sys, subprocess

def nameandpath():
    try:
        subprocess.call([os.getcwd() + '/lumberjack']) 
        # change the word lumberjack on the line above to get an error
    except OSError:
        print('\nCould not find lumberjack, please reinstall.\n')
        # if you're using python 2.x, change the () to spaces on the line above

try:
    subprocess.call(['lumberjack'])
    # change the word lumberjack on the line above to get an error
except OSError:
    nameandpath()
</snippet></ROW><ROW><id>14108062</id><snippet>from datetime import datetime
import time
while True:
    if datetime.datetime.now().minute == 53:
        # do this
        if datetime.datetime.now().minute == 53:  # if still 53 then sleep for rest of the seconds
            time.sleep(60-datetime.datetime.now().second)
    else:
        # do that
</snippet></ROW><ROW><id>14108062</id><snippet>#do this</snippet></ROW><ROW><id>14108062</id><snippet>#do that</snippet></ROW><ROW><id>14108259</id><snippet>for i in URL:
    a = i.split('/')[0]
    #do something
</snippet></ROW><ROW><id>14108259</id><snippet>URL = [i.split('/')[0] for i in URL]
</snippet></ROW><ROW><id>14108383</id><snippet>_s3_bucket.list(prefix=basename)</snippet></ROW><ROW><id>14108383</id><snippet>object_regex.findall(obj.name)</snippet></ROW><ROW><id>14108423</id><snippet>msg["Content-Type"] = "text/html"
</snippet></ROW><ROW><id>14108423</id><snippet>text/plain</snippet></ROW><ROW><id>14108554</id><snippet>dict</snippet></ROW><ROW><id>14108554</id><snippet>CREATE TABLE</snippet></ROW><ROW><id>14108554</id><snippet>dict</snippet></ROW><ROW><id>14108554</id><snippet>dict</snippet></ROW><ROW><id>14108554</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>14108554</id><snippet>values.values()</snippet></ROW><ROW><id>14108554</id><snippet>list</snippet></ROW><ROW><id>14108554</id><snippet>tuple</snippet></ROW><ROW><id>14108554</id><snippet>list</snippet></ROW><ROW><id>14108554</id><snippet>dict</snippet></ROW><ROW><id>14108554</id><snippet>columns = ', '.join(values.keys())
placeholders = ', '.join('?' * len(values))
sql = 'INSERT INTO Media ({}) VALUES ({})'.format(columns, placeholders)
cur.execute(sql, values.values())
</snippet></ROW><ROW><id>14108554</id><snippet>exec</snippet></ROW><ROW><id>14108554</id><snippet>MediaProperties</snippet></ROW><ROW><id>14108554</id><snippet>shelve</snippet></ROW><ROW><id>14108554</id><snippet>columns = ', '.join(my_dict.keys())
placeholders = ':'+', :'.join(my_dict.keys())
query = 'INSERT INTO my_table (%s) VALUES (%s)' % (columns, placeholders)
print query
cur.execute(query, my_dict)
con.commit()
</snippet></ROW><ROW><id>14108651</id><snippet>load_files</snippet></ROW><ROW><id>14108651</id><snippet>.</snippet></ROW><ROW><id>14108651</id><snippet>load_content</snippet></ROW><ROW><id>14108651</id><snippet>False</snippet></ROW><ROW><id>14108651</id><snippet>filenames = (filename for filename in ret.filenames if not filename.startswith('.'))</snippet></ROW><ROW><id>14108651</id><snippet>load_files</snippet></ROW><ROW><id>14108651</id><snippet>categories</snippet></ROW><ROW><id>14108651</id><snippet>shuffle</snippet></ROW><ROW><id>14108651</id><snippet>os.walk</snippet></ROW><ROW><id>14108651</id><snippet>os.listdir</snippet></ROW><ROW><id>14108651</id><snippet>def getfilenames(category):
    return [filename for filename in os.listdir(category)
            if not filename.endswith('.')]
categoryfiles = [getcategory(os.path.join(rootpath, category)
                 for category in os.listdir(rootpath)]
</snippet></ROW><ROW><id>14109508</id><snippet>child</snippet></ROW><ROW><id>14109508</id><snippet>offspring</snippet></ROW><ROW><id>14109508</id><snippet>offspring.append(child[:])
</snippet></ROW><ROW><id>14109508</id><snippet>child[:]</snippet></ROW><ROW><id>14109508</id><snippet>child</snippet></ROW><ROW><id>14109508</id><snippet>child</snippet></ROW><ROW><id>14109508</id><snippet>child[:]</snippet></ROW><ROW><id>14109508</id><snippet>offspring</snippet></ROW><ROW><id>14109508</id><snippet>child</snippet></ROW><ROW><id>14109508</id><snippet>offspring</snippet></ROW><ROW><id>14109508</id><snippet>offspring</snippet></ROW><ROW><id>14109508</id><snippet>child</snippet></ROW><ROW><id>14109679</id><snippet>pip</snippet></ROW><ROW><id>14109679</id><snippet>pyserial</snippet></ROW><ROW><id>14109679</id><snippet>sudo apt-get install python-pip
</snippet></ROW><ROW><id>14109679</id><snippet>pyserial</snippet></ROW><ROW><id>14109679</id><snippet>sudo pip install pyserial
</snippet></ROW><ROW><id>14109690</id><snippet>mydata = json.dumps({'json': list}, indent=0)
</snippet></ROW><ROW><id>14110056</id><snippet>new.py</snippet></ROW><ROW><id>14110056</id><snippet>  File "/usr/lib/python2.7/dist-packages/scipy/stats/distributions.py", line 87, in &lt;module&gt;
    from new import instancemethod
  File "new.py", line 3
</snippet></ROW><ROW><id>14110056</id><snippet>new.py</snippet></ROW><ROW><id>14110056</id><snippet>scipy.stats.distributions</snippet></ROW><ROW><id>14110464</id><snippet>for listInvoice in root.findall('.//{http://www.stormware.cz/schema/version_2/invoice.xsd}invoiceHeader'):
    invoiceHeader = listInvoice.find('.//{http://www.stormware.cz/schema/version_2/invoice.xsd}id').text
    print invoiceHeader
</snippet></ROW><ROW><id>14110643</id><snippet>from google.appengine.ext import deferred

def do_something_expensive(a, b, c=None):
  logging.info("Doing something expensive!")
  # Do your work here

# Somewhere else
deferred.defer(do_something_expensive, "Hello, world!", 42, c=True)
</snippet></ROW><ROW><id>14110643</id><snippet>def post(self):
  deferred.defer(collectSomeStatistics,args)
  self.response.out.write("some output")
</snippet></ROW><ROW><id>14110785</id><snippet>store_const</snippet></ROW><ROW><id>14110785</id><snippet>-ab</snippet></ROW><ROW><id>14110785</id><snippet>parse_args</snippet></ROW><ROW><id>14110785</id><snippet>import argparse
import sys

def parse_args(argv = sys.argv[1:]):
    parser = argparse.ArgumentParser()
    parser.add_argument('-a', action = 'append_const', dest = 'letter', const = 'a')
    parser.add_argument('-b', action = 'append_const', dest = 'letter', const = 'b')
    args = parser.parse_args(argv)
    if args.letter is None:
        args.letter = ['a','b']
    return args

print(parse_args('-a'.split()))
print(parse_args('-b'.split()))
print(parse_args('-ab'.split()))
print(parse_args(''.split()))
</snippet></ROW><ROW><id>14110785</id><snippet>Namespace(letter=['a'])
Namespace(letter=['b'])
Namespace(letter=['a', 'b'])
Namespace(letter=['a', 'b'])
</snippet></ROW><ROW><id>14110888</id><snippet>something.new_attr = some_value</snippet></ROW><ROW><id>14110888</id><snippet>setattr(something, 'new_attr', some_value)</snippet></ROW><ROW><id>14110888</id><snippet>def add_method(target, method_name): 
    """add class method to a target class or attach a function to a target object"""
    setattr(target, method_name, types.MethodType(lambda x:x, target))
def add_instance_method(target, method_name):
    """add instance method to a target class"""
    setattr(target, method_name, types.MethodType(lambda x:x, None, target))
</snippet></ROW><ROW><id>14110888</id><snippet>add_method(Something, 'new_method')</snippet></ROW><ROW><id>14110888</id><snippet>Something</snippet></ROW><ROW><id>14110888</id><snippet>add_method(something, 'new_method')</snippet></ROW><ROW><id>14110888</id><snippet>something</snippet></ROW><ROW><id>14110888</id><snippet>Something</snippet></ROW><ROW><id>14110888</id><snippet>Something</snippet></ROW><ROW><id>14110888</id><snippet>add_instance_method(Something, 'new_method')</snippet></ROW><ROW><id>14110888</id><snippet>Something</snippet></ROW><ROW><id>14110888</id><snippet>Something</snippet></ROW><ROW><id>14110888</id><snippet>__dict__</snippet></ROW><ROW><id>14110888</id><snippet>object</snippet></ROW><ROW><id>14110906</id><snippet>invite=newgent.save()
</snippet></ROW><ROW><id>14110906</id><snippet>newgent.save()
</snippet></ROW><ROW><id>14110906</id><snippet>send_mail(Subject, message.render(Context()),from_email,[newgent.e_mail])
</snippet></ROW><ROW><id>14110955</id><snippet>import pandas as pd
import io

text = '''\
STK_ID RPT_Date sales cash
000568 20120930 80.093 57.488
000596 20120930 32.585 26.177
000799 20120930 14.784 8.157
'''

df = pd.read_csv(io.BytesIO(text), delimiter = ' ', 
                 converters = {0:str})
df.set_index(['STK_ID','RPT_Date'], inplace = True)
</snippet></ROW><ROW><id>14110955</id><snippet>df.index</snippet></ROW><ROW><id>14110955</id><snippet>MultiIndex</snippet></ROW><ROW><id>14110955</id><snippet>index = df.index
names = index.names
index = [('000999','20121231')] + df.index.tolist()[1:]
df.index = pd.MultiIndex.from_tuples(index, names = names)
print(df)
#                   sales    cash
# STK_ID RPT_Date                
# 000999 20121231  80.093  57.488
# 000596 20120930  32.585  26.177
# 000799 20120930  14.784   8.157
</snippet></ROW><ROW><id>14110955</id><snippet>df.reset_index(inplace = True)
df.ix[0, ['STK_ID', 'RPT_Date']] = ('000999','20121231')
df.set_index(['STK_ID','RPT_Date'], inplace = True)
print(df)

#                   sales    cash
# STK_ID RPT_Date                
# 000999 20121231  80.093  57.488
# 000596 20120930  32.585  26.177
# 000799 20120930  14.784   8.157
</snippet></ROW><ROW><id>14110955</id><snippet>%timeit</snippet></ROW><ROW><id>14110955</id><snippet>In [2]: %timeit reassign_index(df)
10000 loops, best of 3: 158 us per loop

In [3]: %timeit reassign_columns(df)
1000 loops, best of 3: 843 us per loop
</snippet></ROW><ROW><id>14111194</id><snippet>print repr(string1)</snippet></ROW><ROW><id>14111194</id><snippet>7</snippet></ROW><ROW><id>14111194</id><snippet>print repr(temp_string2)</snippet></ROW><ROW><id>14111194</id><snippet>"7"</snippet></ROW><ROW><id>14111194</id><snippet>string1</snippet></ROW><ROW><id>14111194</id><snippet>string1    = element.__dict__.get('layer')
</snippet></ROW><ROW><id>14111194</id><snippet>string1</snippet></ROW><ROW><id>14111194</id><snippet>integer</snippet></ROW><ROW><id>14111194</id><snippet>if str(string1) == temp_string2:
     print "data found"
</snippet></ROW><ROW><id>14111194</id><snippet>string1 = str(element.__dict__.get('layer'))
</snippet></ROW><ROW><id>14111194</id><snippet>.</snippet></ROW><ROW><id>14111194</id><snippet>string1    = element.get('layer')
</snippet></ROW><ROW><id>14111469</id><snippet>elif option.lower() == 'decode':
    num = (raw_input("Enter your text to be decoded: "))
    result = ''
    index = 0
    while index &lt; len(num) -1:
        result += decodec[int(num[index:index +2])]
        index += 2
    print result
</snippet></ROW><ROW><id>14111469</id><snippet>222426</snippet></ROW><ROW><id>14111469</id><snippet>abc</snippet></ROW><ROW><id>14111590</id><snippet>shlex.split()</snippet></ROW><ROW><id>14111590</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; shlex.split('Some whitespace "separated string"')
['Some', 'whitespace', 'separated string']
</snippet></ROW><ROW><id>14111762</id><snippet>imshow(imageArray, cmap="Greys_r")
</snippet></ROW><ROW><id>14111876</id><snippet>.split()</snippet></ROW><ROW><id>14111876</id><snippet>import string

s = '@x arg-xa, arg. xb, arg xc @y arg-ya, arg. yb, arg yc @z arg-za, arg. zb, arg zc'

result = []

for part in s.split('@')[1:]:  # `[1:]` skips the first (empty) element
    command, _, arguments = part.partition(' ')

    result.append({
        'command': command,
        'args': map(string.strip, arguments.split(', '))
    })
</snippet></ROW><ROW><id>14111891</id><snippet>0 0  * * * cd /my/project; /opt/python-2.7/bin/python bin/myscript.py
</snippet></ROW><ROW><id>14111984</id><snippet>if...for...else</snippet></ROW><ROW><id>14111984</id><snippet># instead of this original code...

for pname, stats_by_year in parsed_stats.items():
  if pname in self.raw_players_with_stats[tour]:
    #...
  elif pname in self.new_player_urls[tour]:
    self.new_stats[tour][pname] = stats_by_year

# you get something like this

for player_name, stats_by_year in parser_stats.iteritems():
  if self.has_raw_player(player_name):
    self.process_new_raw_player(player_name, stats_by_year)
  elif self.is_player_new(player_name):
     self.insert_new_stat_for_player( player_name, stats_by_year )
</snippet></ROW><ROW><id>14111984</id><snippet>#...
self.new_stats[tour].setdefault(pname,{}).setdefault(y,{}).setdefault(cat,{})[prop] = val
#...
</snippet></ROW><ROW><id>14111984</id><snippet>def insert_new_stat(self, tour, pname, y, cat, prop, val):
  player_stat = self.new_stats[tour].setdefault(pname, {})
  y_param = player_stat.setdefault(y, {}) # what is y??
  category_stats = ...
  prop_stats = ...
  ... = val
</snippet></ROW><ROW><id>14112027</id><snippet>MySQL</snippet></ROW><ROW><id>14112027</id><snippet>PostgreSQL</snippet></ROW><ROW><id>14112027</id><snippet>FK</snippet></ROW><ROW><id>14112027</id><snippet>Book</snippet></ROW><ROW><id>14112027</id><snippet>Author</snippet></ROW><ROW><id>14112027</id><snippet>Author</snippet></ROW><ROW><id>14112027</id><snippet>Category</snippet></ROW><ROW><id>14112027</id><snippet>SELECT * FROM (
    SELECT book_table.*, row_number() OVER (PARTITION BY category_id ORDER BY RANDOM()) AS rn 
    FROM book_table INNER JOIN author_table ON book_table.author_id = author_table.id
) AS sq 
WHERE rn &lt;= 5 
</snippet></ROW><ROW><id>14112027</id><snippet>RawQuerySet</snippet></ROW><ROW><id>14112027</id><snippet>Book</snippet></ROW><ROW><id>14112027</id><snippet>from collections import defaultdict
qs = Book.objects.raw("""The above sql suited for your tables...""")
collection = defaultdict(list)
for obj in qs:
    collection[obj.category_id].append(obj)

categories_w_rand_books = []
for category in c:
    categories_w_rand_books.append((category, collection[category.id]))
</snippet></ROW><ROW><id>14112027</id><snippet>Book</snippet></ROW><ROW><id>14112027</id><snippet>book.author</snippet></ROW><ROW><id>14112027</id><snippet>prefetch_related_objects</snippet></ROW><ROW><id>14112027</id><snippet>from django.db.models.query import prefetch_related_objects
qs = list(qs) # have to evaluate at first
prefetch_related_objects(qs, ['author'])
# now instances inside qs already contain cached author instances, and
qs[0].author # will not trigger an extra query
</snippet></ROW><ROW><id>14112027</id><snippet>qs</snippet></ROW><ROW><id>14112077</id><snippet>login</snippet></ROW><ROW><id>14112077</id><snippet>login_view</snippet></ROW><ROW><id>14112077</id><snippet>django.contrib.auth.login</snippet></ROW><ROW><id>14112100</id><snippet>In [1]: import pandas as pd

In [2]: idx1 = pd.date_range('2010-01-01','2010-12-31',freq='D')

In [3]: idx2 = pd.date_range('2010-01-01','2010-11-01',freq='D')

In [4]: idx3 = pd.date_range('2010-01-01','2010-12-31',freq='D')

In [5]: help(idx1.equals)
Help on method equals in module pandas.tseries.index:

equals(self, other) method of pandas.tseries.index.DatetimeIndex instance
    Determines if two Index objects contain the same elements.


In [6]: print(idx1.equals(idx2))
False

In [7]: print(idx1.equals(idx3))
True
</snippet></ROW><ROW><id>14112342</id><snippet>empty</snippet></ROW><ROW><id>14112342</id><snippet>.fill()</snippet></ROW><ROW><id>14112342</id><snippet>&gt;&gt;&gt; timeit m = np.zeros((3,3)); m += -1
100000 loops, best of 3: 6.9 us per loop
&gt;&gt;&gt; timeit m = np.ones((3,3)); m *= -1
100000 loops, best of 3: 9.49 us per loop
&gt;&gt;&gt; timeit m = np.zeros((3,3)); m.fill(-1)
100000 loops, best of 3: 2.31 us per loop
&gt;&gt;&gt; timeit m = np.empty((3,3)); m[:] = -1
100000 loops, best of 3: 3.18 us per loop

&gt;&gt;&gt; timeit m = np.empty((3,3)); m.fill(-1)
100000 loops, best of 3: 2.09 us per loop
</snippet></ROW><ROW><id>14112370</id><snippet>name</snippet></ROW><ROW><id>14112370</id><snippet>import pygame
from pygame.locals import *

def name():
    pygame.init()
    screen = pygame.display.set_mode((480, 360))
    name = ""
    font = pygame.font.Font(None, 50)
    while True:
        for evt in pygame.event.get():
            if evt.type == KEYDOWN:
                if evt.unicode.isalpha():
                    name += evt.unicode
                elif evt.key == K_BACKSPACE:
                    name = name[:-1]
                elif evt.key == K_RETURN:
                    name = ""
            elif evt.type == QUIT:
                return
        screen.fill((0, 0, 0))
        block = font.render(name, True, (255, 255, 255))
        rect = block.get_rect()
        rect.center = screen.get_rect().center
        screen.blit(block, rect)
        pygame.display.flip()

if __name__ == "__main__":
    name()
    pygame.quit()
</snippet></ROW><ROW><id>14112400</id><snippet>import json

@menus.route('/', methods=["PUT", "POST"])
def new():
    return jsonify(json.loads(request.data))
</snippet></ROW><ROW><id>14112406</id><snippet>super()</snippet></ROW><ROW><id>14112406</id><snippet>__class__</snippet></ROW><ROW><id>14112406</id><snippet>super()</snippet></ROW><ROW><id>14112406</id><snippet>Position</snippet></ROW><ROW><id>14112406</id><snippet>type(self)</snippet></ROW><ROW><id>14112406</id><snippet>type(self)</snippet></ROW><ROW><id>14112406</id><snippet>self.__class__</snippet></ROW><ROW><id>14112406</id><snippet>def __add__(self, other):
    return type(self)(self.x + other.x, self.y + other.y)
</snippet></ROW><ROW><id>14112406</id><snippet>Position</snippet></ROW><ROW><id>14112406</id><snippet>__class__</snippet></ROW><ROW><id>14112406</id><snippet>Position</snippet></ROW><ROW><id>14112406</id><snippet>&gt;&gt;&gt; class Foo:
...     def method(self):
...         print(__class__)
...         print(type(self))
... 
&gt;&gt;&gt; class Bar(Foo):
...     pass
... 
&gt;&gt;&gt; Bar().method()
&lt;class '__main__.Foo'&gt;
&lt;class '__main__.Bar'&gt;
</snippet></ROW><ROW><id>14112406</id><snippet>__class__</snippet></ROW><ROW><id>14112421</id><snippet>class Bunch(yaml.YAMLObject):
    yaml_tag = u'!Bunch'
    def __init__(self, **kwargs):
        self.__dict__.update(kwargs)
    def __repr__(self):
        return '{c}({a})'.format(
            c = self.__class__.__name__,
            a = ', '.join(
                ['='.join(map(str,item)) for item in self.__dict__.items()]))
tag_names = ['define', 'action']
namespace = {}
for name in tag_names:
    namespace[name] = type(name, (Bunch,), {'yaml_tag':u'!{n}'.format(n = name)})

definitions = {"one" : 1, "two" : 2, "three" : 3}
actions = {"run" : "yes", "print" : "no", "report" : "maybe"}
text = yaml.dump_all([namespace['define'](**definitions),
                      namespace['action'](**actions)],
                     default_flow_style = False,
                     explicit_start = True)
print(text)
</snippet></ROW><ROW><id>14112421</id><snippet>--- !define
one: 1
three: 3
two: 2
--- !action
print: 'no'
report: maybe
run: 'yes'
</snippet></ROW><ROW><id>14112421</id><snippet>for item in  yaml.load_all(text):
    print(item)
    # define(one=1, three=3, two=2)
    # action(print=no, report=maybe, run=yes)
</snippet></ROW><ROW><id>14112465</id><snippet>abc</snippet></ROW><ROW><id>14113157</id><snippet>crypt</snippet></ROW><ROW><id>14113157</id><snippet>package main

import (
    "fmt"
    "unsafe"
)

// #cgo LDFLAGS: -lcrypt
// #define _GNU_SOURCE
// #include &lt;crypt.h&gt;
// #include &lt;stdlib.h&gt;
import "C"

// crypt wraps C library crypt_r
func crypt(key, salt string) string {
    data := C.struct_crypt_data{}
    ckey := C.CString(key)
    csalt := C.CString(salt)
    out := C.GoString(C.crypt_r(ckey, csalt, &amp;data))
    C.free(unsafe.Pointer(ckey))
    C.free(unsafe.Pointer(csalt))
    return out
}

func main() {
    fmt.Println(crypt("abcdefg", "aa"))
}
</snippet></ROW><ROW><id>14113157</id><snippet>aaTcvO819w3js
</snippet></ROW><ROW><id>14113157</id><snippet>crypt.crypt</snippet></ROW><ROW><id>14113157</id><snippet>&gt;&gt;&gt; from crypt import crypt
&gt;&gt;&gt; crypt("abcdefg","aa")
'aaTcvO819w3js'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14113159</id><snippet>from bs4 import BeautifulSoup
import urllib2
text = urllib2.urlopen("http://yourwebpage.com/").read()
soup = BeautifulSoup(text)
img = soup.find_all('img',{'id':'next'})
if img:
    a_tag = img[0].parent
    href = a_tag.get('href')
    print href
</snippet></ROW><ROW><id>14113159</id><snippet>.parent</snippet></ROW><ROW><id>14113159</id><snippet>find_all</snippet></ROW><ROW><id>14113159</id><snippet>find_all</snippet></ROW><ROW><id>14113159</id><snippet>if img:</snippet></ROW><ROW><id>14113197</id><snippet>if isinstance(x, int):
</snippet></ROW><ROW><id>14113197</id><snippet>sum(z for z in y if isinstance(z, int))
</snippet></ROW><ROW><id>14113235</id><snippet>options(joinedload('pieces'))</snippet></ROW><ROW><id>14113235</id><snippet>lazy='joined'</snippet></ROW><ROW><id>14113235</id><snippet># We do the filtering on AppLike in the subquery and later join
# Application to it.
applike_subq = DBSession.query(AppLike).\
    filter(AppLike.artist_id == artistID).subquery()
query = DBSession.query(Application).\
    outerjoin(applike_subq, Application.vote).\
    filter(Application.approved == 0).all()
</snippet></ROW><ROW><id>14113405</id><snippet>key</snippet></ROW><ROW><id>14113405</id><snippet>.sort()</snippet></ROW><ROW><id>14113405</id><snippet>sorted()</snippet></ROW><ROW><id>14113405</id><snippet>def my_key_function(original_name):
    ## do something to extract the last name, for example:
    try:
        return original_name.split(',')[1].strip()
    except IndexError:
        return original_name

my_sorted_values = sorted(my_original_values, key=my_key_function)
</snippet></ROW><ROW><id>14113405</id><snippet>(last, first)</snippet></ROW><ROW><id>14113405</id><snippet>last</snippet></ROW><ROW><id>14113405</id><snippet>first</snippet></ROW><ROW><id>14113405</id><snippet>def my_key_function(original_name):
    return original_name.splitlines()[0].split()[-1]
</snippet></ROW><ROW><id>14113705</id><snippet>d</snippet></ROW><ROW><id>14113705</id><snippet>demo</snippet></ROW><ROW><id>14113705</id><snippet>demo.__setitem__(c, "")</snippet></ROW><ROW><id>14113705</id><snippet>a = 'foo'
id(a)  # 4313267976
a = 'bar'
id(a)  # 4313268016

l = ['foo']
id(l)  # 4328132552
l[0] = 'bar'
id(l)  # 4328132552
</snippet></ROW><ROW><id>14113706</id><snippet>Python 3.3.0 (default, Dec 22 2012, 21:02:07) 
[GCC 4.7.2] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a = 'shouldn't'
  File "&lt;stdin&gt;", line 1
    a = 'shouldn't'
                 ^
SyntaxError: invalid syntax
&gt;&gt;&gt; a = 'shouldn\'t'
&gt;&gt;&gt; a
"shouldn't"
&gt;&gt;&gt; a = '"shouldn\'t'
&gt;&gt;&gt; a
'"shouldn\'t'
&gt;&gt;&gt; print(a)
"shouldn't
</snippet></ROW><ROW><id>14113733</id><snippet>"""
your HTML stuff here
""" % (hostname, change, pwd, changeref, changeref)
</snippet></ROW><ROW><id>14113928</id><snippet>/home/&lt;nick&gt;/bin</snippet></ROW><ROW><id>14113958</id><snippet>&lt;input name="question1_field" placeholder="question one"&gt;
</snippet></ROW><ROW><id>14113958</id><snippet>...request.form['question1']
</snippet></ROW><ROW><id>14113958</id><snippet>request.form['question1_field1']</snippet></ROW><ROW><id>14114050</id><snippet>self.sizer.Fit(self.panel)</snippet></ROW><ROW><id>14114050</id><snippet>self.SetSizer(self.sizer)</snippet></ROW><ROW><id>14114050</id><snippet>import wx

class ForgotPass(wx.Dialog):

    def __init__(self, *args, **kwargs):
        super(ForgotPass, self).__init__(*args, **kwargs) 

        self.InitUI()

    def InitUI(self):
        self.panel = wx.Panel(self)
        self.sizer = wx.BoxSizer(wx.VERTICAL)

        self.title = wx.StaticText(self.panel, label='Forgotten Your Password?', style=wx.ALIGN_CENTER)
        self.title.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, underline=True))  # Underlined &amp; Bold
        self.sizer.Add(self.title)

        self.text = wx.StaticText(self.panel, label="Contact 'TheHiguty' via ingame PM to have your password reset!", style=wx.ALIGN_CENTER)
        self.sizer.Add(self.text)

        self.SetSizer(self.sizer)
        self.sizer.Fit(self.panel)
        self.SetSize((400, 150))
        self.SetTitle('Forgotten Your Password')
        self.Center()
        self.Show(True)

def main():
    app = wx.App(False)
    ForgotPass(None)
    app.MainLoop()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>14114050</id><snippet>import wx

class MainWindow(wx.Frame):
    def __init__(self, parent):
        super(MainWindow, self).__init__(parent)

        self.sizer = wx.BoxSizer(wx.VERTICAL)

        self.button = wx.Button(self, wx.ID_ANY, label="Test")
        self.sizer.Add(self.button)
        self.Bind(wx.EVT_BUTTON, self.password_dialog, self.button)

        self.SetSizer(self.sizer)
        self.sizer.Fit(self)
        self.SetTitle('Test')
        self.SetSize((100, 100))
        self.Centre()
        self.Show(True)

    def password_dialog(self, event):
        wx.MessageBox(
            'Contact `TheHiguty` blah blah blah',
            'Forgotten your password?',
            wx.OK|wx.ICON_ERROR)

if __name__ == '__main__':
    app = wx.App()
    MainWindow(None)
    app.MainLoop()
</snippet></ROW><ROW><id>14114088</id><snippet>matplotlib</snippet></ROW><ROW><id>14114088</id><snippet>from mpl_toolkits.axes_grid1 import ImageGrid

def get_demo_image():
    import numpy as np
    from matplotlib.cbook import get_sample_data
    f = get_sample_data("axes_grid/bivariate_normal.npy", asfileobj=False)
    z = np.load(f)
    # z is a numpy array of 15x15
    return z, (-3,4,-4,3)

def demo_grid_with_single_cbar(fig):
    """
    A grid of 2x2 images with a single colorbar
    """
    grid = ImageGrid(fig, 132, # similar to subplot(132)
                    nrows_ncols = (2, 2),
                    axes_pad = 0.0,
                    share_all=True,
                    label_mode = "L",
                    cbar_location = "top",
                    cbar_mode="single",
                    )

    Z, extent = get_demo_image()
    for i in range(4):
        im = grid[i].imshow(Z, extent=extent, interpolation="nearest")
    #plt.colorbar(im, cax = grid.cbar_axes[0])
    grid.cbar_axes[0].colorbar(im)

    for cax in grid.cbar_axes:
        cax.toggle_label(False)

    # This affects all axes as share_all = True.
    grid.axes_llc.set_xticks([-2, 0, 2])
    grid.axes_llc.set_yticks([-2, 0, 2])

    for i in range(4):
        ax = grid[i]
        ax.yaxis.set_minor_locator(MultipleLocator(.5))
</snippet></ROW><ROW><id>14114139</id><snippet>6-len(str(index))</snippet></ROW><ROW><id>14114200</id><snippet>import os
import glob

dir = os.getcwd()

for (path, subdirs, files) in os.walk(dir):
    os.chdir(path)
    if glob.glob("*.mp3") != []:
        _m3u = open( os.path.split(path)[1] + ".m3u" , "w" )
        for song in glob.glob("*.mp3"):
            _m3u.write(song + "\n")
        _m3u.close()

os.chdir(dir) # Not really needed.. 
</snippet></ROW><ROW><id>14114400</id><snippet>def func(a, b, c, **kwargs):
    if 'd' in kwargs:
        ....
    elif 'c' in kwargs:
        ....
</snippet></ROW><ROW><id>14114400</id><snippet>d</snippet></ROW><ROW><id>14114400</id><snippet>e</snippet></ROW><ROW><id>14114400</id><snippet>def func(a, b, c, d=None, e=None):
    if d is not None and e is None:
        ....
    elif e is not None and d is None:
        ....
</snippet></ROW><ROW><id>14114600</id><snippet>Courses</snippet></ROW><ROW><id>14114600</id><snippet>class Courses(db.Model):
    user = db.StringProperty(required = True)
    title = db.StringProperty(required = True)
    created = db.DateTimeProperty(auto_now_add = True)
</snippet></ROW><ROW><id>14114600</id><snippet>class Courses(Handler):
    # code
</snippet></ROW><ROW><id>14114600</id><snippet>Courses</snippet></ROW><ROW><id>14114600</id><snippet>In [1]: class Courses(object):
   ...:     a = 'First Courses'
   ...:     
   ...:     

In [2]: class Courses(object):
   ...:     a = 'Second Courses'
   ...:     
   ...:     

In [3]: Courses.a
Out[3]: 'Second Courses'
</snippet></ROW><ROW><id>14114600</id><snippet>Courses(user=user)</snippet></ROW><ROW><id>14114606</id><snippet>decorator()</snippet></ROW><ROW><id>14114606</id><snippet>index</snippet></ROW><ROW><id>14114606</id><snippet>wraps()</snippet></ROW><ROW><id>14114606</id><snippet>functools</snippet></ROW><ROW><id>14114606</id><snippet>from functools import wraps

def logged_in(fn):
    @wraps(fn)
    def decorator(*args, **kwargs):
        if 'email' in session:
            return fn(*args, **kwargs)
        else:
            # IMO it's nicer to abort here and handle it in errorhandler.
            abort(401)
    return decorator
</snippet></ROW><ROW><id>14114606</id><snippet>@logged_in
def index(): pass
</snippet></ROW><ROW><id>14114606</id><snippet>def index(): pass
index = logged_in(index)
</snippet></ROW><ROW><id>14114606</id><snippet>logged_in</snippet></ROW><ROW><id>14114606</id><snippet>decorator</snippet></ROW><ROW><id>14114606</id><snippet>decorator</snippet></ROW><ROW><id>14114606</id><snippet>app.route()</snippet></ROW><ROW><id>14114606</id><snippet>logged_in</snippet></ROW><ROW><id>14114606</id><snippet>decorator</snippet></ROW><ROW><id>14114606</id><snippet>index</snippet></ROW><ROW><id>14114606</id><snippet>url_for()</snippet></ROW><ROW><id>14114606</id><snippet>decorator.__name__ = fn.__name__
</snippet></ROW><ROW><id>14114606</id><snippet>update_wrapper</snippet></ROW><ROW><id>14114606</id><snippet>wraps</snippet></ROW><ROW><id>14114606</id><snippet>functools</snippet></ROW><ROW><id>14114633</id><snippet>operator.itemgetter()</snippet></ROW><ROW><id>14114633</id><snippet>from operator import itemgetter

itemgetter(1, 5, 6, 8, 9, 12)(lst)
</snippet></ROW><ROW><id>14114633</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
&gt;&gt;&gt; itemgetter(1, 5, 6, 8, 9, 12)(lst)
(2, 6, 7, 9, 10, 13)
</snippet></ROW><ROW><id>14114633</id><snippet>list(itemgetter(...)(lst))</snippet></ROW><ROW><id>14114633</id><snippet>lst[start:stop]</snippet></ROW><ROW><id>14114633</id><snippet>lst[start:stop] = some_iterable</snippet></ROW><ROW><id>14114703</id><snippet>default</snippet></ROW><ROW><id>14114703</id><snippet>save</snippet></ROW><ROW><id>14114703</id><snippet>class TimeLogForm(forms.ModelForm):
    class Meta:
        exclude = ['begin_sec']
        model = TimeLog

    def __init__(self, *args, **kw):
        super(TimeLogForm).__init__(self, *args, **kw)

    def save(self, *args, **kw):
        instance = super(TimeLogForm, self).save(commit=False)
        last_entry = TimeLog.objects.all().order_by('-id')[0]
        if last_entry:
            instance.begin_sec = last_entry.begin_sec
        else:
            # this is the very first record do something
            pass
        instance.save()
        return instance
</snippet></ROW><ROW><id>14114703</id><snippet>auto_now=False</snippet></ROW><ROW><id>14114703</id><snippet>auto_now_add=False</snippet></ROW><ROW><id>14114703</id><snippet>False</snippet></ROW><ROW><id>14114741</id><snippet>with open('output.jpg', 'wb') as handle:
    request = requests.get('http://www.example.com/image.jpg', stream=True)

    for block in request.iter_content(1024):
        if not block:
            break

        handle.write(block)
</snippet></ROW><ROW><id>14114741</id><snippet>urllib.urlretrieve()</snippet></ROW><ROW><id>14114931</id><snippet>None</snippet></ROW><ROW><id>14114931</id><snippet>error</snippet></ROW><ROW><id>14114931</id><snippet>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;Home&lt;/title&gt; 
        &lt;script src="http://code.jquery.com/jquery-1.8.2.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;div&gt;&lt;/div&gt;
        &lt;div&gt;
            Test
        &lt;/div&gt;
        &lt;!-- Here we check to see 'error' is not null; if not, print --&gt;
        {% if error %}
            &lt;div&gt;{{ error }}&lt;/div&gt;
        {% endif %}
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>14115010</id><snippet>gl3w_gen.py</snippet></ROW><ROW><id>14115010</id><snippet>$ python3.3
Python 3.3.0 (default, Sep 29 2012, 08:16:08) 
[GCC 4.2.1 Compatible Apple Clang 3.1 (tags/Apple/clang-318.0.58)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; print 'Hello world!'
  File "&lt;stdin&gt;", line 1
    print 'Hello world!'
                       ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>14115148</id><snippet>\x01</snippet></ROW><ROW><id>14115148</id><snippet>\x00</snippet></ROW><ROW><id>14115148</id><snippet>BooleanField</snippet></ROW><ROW><id>14115148</id><snippet>class MyBooleanField(models.BooleanField):

    __metaclass__ = models.SubfieldBase

    def get_internal_type(self):
        return "MyBooleanField"

    def db_type(self):
        return 'bit(1)'

    def to_python(self, value):
        if value in (True, False): return value
        if value in ('t', 'True', '1', '\x01'): return True  
        if value in ('f', 'False', '0', '\x00'): return False

    def get_db_prep_value(self, value):  
        return 0x01 if value else 0x00
</snippet></ROW><ROW><id>14115148</id><snippet>class Company(models.Model):
    active = models.MyBooleanField(default=False)
</snippet></ROW><ROW><id>14115286</id><snippet>import os, datetime
mydir = os.path.join(os.getcwd(), datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S'))
os.makedirs(mydir)
with open(os.path.join(mydir, 'filename.txt'), 'w') as d:
    pass # ... etc ...
</snippet></ROW><ROW><id>14115286</id><snippet>import os, datetime

def filecreation(list, filename):
    mydir = os.path.join(os.getcwd(), datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S'))
    try:
        os.makedirs(mydir)
    except OSError, e:
        if e.errno != 17:
            raise # This was not a "directory exist" error..
    with open(os.path.join(mydir, filename), 'w') as d:
        d.writelines(list)
</snippet></ROW><ROW><id>14115433</id><snippet>MiniBatchDictionaryLearning</snippet></ROW><ROW><id>14115433</id><snippet>MiniBatchKMeans</snippet></ROW><ROW><id>14115433</id><snippet>RandomizedPCA</snippet></ROW><ROW><id>14115494</id><snippet>import math

def area_for_polygon(polygon):
    result = 0
    imax = len(polygon) - 1
    for i in range(0,imax):
        result += (polygon[i]['x'] * polygon[i+1]['y']) - (polygon[i+1]['x'] * polygon[i]['y'])
    result += (polygon[imax]['x'] * polygon[0]['y']) - (polygon[0]['x'] * polygon[imax]['y'])
    return result / 2.

def centroid_for_polygon(polygon):
    area = area_for_polygon(polygon)
    imax = len(polygon) - 1

    result_x = 0
    result_y = 0
    for i in range(0,imax):
        result_x += (polygon[i]['x'] + polygon[i+1]['x']) * ((polygon[i]['x'] * polygon[i+1]['y']) - (polygon[i+1]['x'] * polygon[i]['y']))
        result_y += (polygon[i]['y'] + polygon[i+1]['y']) * ((polygon[i]['x'] * polygon[i+1]['y']) - (polygon[i+1]['x'] * polygon[i]['y']))
    result_x += (polygon[imax]['x'] + polygon[0]['x']) * ((polygon[imax]['x'] * polygon[0]['y']) - (polygon[0]['x'] * polygon[imax]['y']))
    result_y += (polygon[imax]['y'] + polygon[0]['y']) * ((polygon[imax]['x'] * polygon[0]['y']) - (polygon[0]['x'] * polygon[imax]['y']))
    result_x /= (area * 6.0)
    result_y /= (area * 6.0)

    return {'x': result_x, 'y': result_y}

def bottommost_index_for_polygon(polygon):
    bottommost_index = 0
    for index, point in enumerate(polygon):
        if (point['y'] &lt; polygon[bottommost_index]['y']):
            bottommost_index = index
    return bottommost_index

def angle_for_vector(start_point, end_point):
    y = end_point['y'] - start_point['y']
    x = end_point['x'] - start_point['x']
    angle = 0

    if (x == 0):
        if (y &gt; 0):
            angle = 90.0
        else:
            angle = 270.0
    elif (y == 0):
        if (x &gt; 0):
            angle = 0.0
        else:
            angle = 180.0
    else:
        angle = math.degrees(math.atan((y+0.0)/x))
        if (x &lt; 0):
            angle += 180
        elif (y &lt; 0):
            angle += 360

    return angle

def convex_hull_for_polygon(polygon):
    starting_point_index = bottommost_index_for_polygon(polygon)
    convex_hull = [polygon[starting_point_index]]
    polygon_length = len(polygon)

    hull_index_candidate = 0 #arbitrary
    previous_hull_index_candidate = starting_point_index
    previous_angle = 0
    while True:
        smallest_angle = 360

        for j in range(0,polygon_length):
            if (previous_hull_index_candidate == j):
                continue
            current_angle = angle_for_vector(polygon[previous_hull_index_candidate], polygon[j])
            if (current_angle &lt; smallest_angle and current_angle &gt; previous_angle):
                hull_index_candidate = j
                smallest_angle = current_angle

        if (hull_index_candidate == starting_point_index): # we've wrapped all the way around
            break
        else:
            convex_hull.append(polygon[hull_index_candidate])
            previous_angle = smallest_angle
            previous_hull_index_candidate = hull_index_candidate

    return convex_hull
</snippet></ROW><ROW><id>14115494</id><snippet>def midpoint(edge):
    x1 = edge[0][0]
    y1 = edge[0][9]
    x2 = edge[1][0]
    y2 = edge[1][10]

    mid_x = x1+((x2-x1)/2.0)
    mid_y = y1+((y2-y1)/2.0)

    return (mid_x, mid_y)

def ccw(A,B,C): # from http://www.bryceboe.com/2006/10/23/line-segment-intersection-algorithm/
    return (C[1]-A[1])*(B[0]-A[0]) &gt; (B[1]-A[1])*(C[0]-A[0])

def intersect(segment1, segment2): # from http://www.bryceboe.com/2006/10/23/line-segment-intersection-algorithm/
    A = segment1[0]
    B = segment1[1]
    C = segment2[0]
    D = segment2[1]
    # Note: this doesn't catch collinear line segments!
    return ccw(A,C,D) != ccw(B,C,D) and ccw(A,B,C) != ccw(A,B,D)

def points_from_edges(edges):
    point_set = set()
    for i in range(0,len(edges)):
          point_set.add(edges[i][0])
          point_set.add(edges[i][11])

    points = []
    for point in point_set:
          points.append({'x':point[0], 'y':point[1]})

    return list(points)

def centroids_for_points_and_edges(points, edges):

    centroids = []

    # for each voronoi_node,
    for i in range(0,len(points)):
        cell_edges = []

        # for each edge
        for j in range(0,len(edges)):
            is_cell_edge = True

            # let vector be the line from voronoi_node to the midpoint of edge
            vector = (points[i],midpoint(edges[j]))

            # for each other_edge
            for k in range(0,len(edges)):

                # if vector crosses other_edge
                if (k != j and intersect(edges[k], vector)):
                    # edge is not in voronoi_node's polygon
                    is_cell_edge = False
                    break

            # if the vector didn't cross any other edges, it's an edge for the current node
            if (is_cell_edge):
                cell_edges.append(edges[j])

        # find the hull for the cell
        convex_hull = convex_hull_for_polygon(points_from_edges(cell_edges))

        # calculate the centroid of the hull
        centroids.append(centroid_for_polygon(convex_hull))

    return centroids

edges = [
  ((10,  200),(30,  50 )),
  ((10,  200),(100, 140)),
  ((10,  200),(200, 180)),
  ((30,  50 ),(100, 140)),
  ((30,  50 ),(150, 75 )),
  ((30,  50 ),(200, 10 )),
  ((100, 140),(150, 75 )),
  ((100, 140),(200, 180)),
  ((150, 75 ),(200, 10 )),
  ((150, 75 ),(200, 180)),
  ((150, 75 ),(220, 80 )),
  ((200, 10 ),(220, 80 )),
  ((200, 10 ),(350, 100)),
  ((200, 180),(220, 80 )),
  ((200, 180),(350, 100)),
  ((220, 80 ),(350, 100))
]

points = [
  (50,130),
  (100,95),
  (100,170),
  (130,45),
  (150,130),
  (190,55),
  (190,110),
  (240,60),
  (245,120)
]

centroids = centroids_for_points_and_edges(points, edges)
print "centroids:"
for centroid in centroids:
    print "  (%s, %s)" % (centroid['x'], centroid['y'])
</snippet></ROW><ROW><id>14115494</id><snippet>&lt;html&gt;
&lt;head&gt;
  &lt;script&gt;
    window.onload = draw;
    function draw() {
      var canvas = document.getElementById('canvas').getContext('2d');

      // draw polygon points
      var polygon = [ 
        {'x':220, 'y':80},
        {'x':200, 'y':180},
        {'x':350, 'y':100},
        {'x':30, 'y':50}, 
        {'x':100, 'y':140},
        {'x':200, 'y':10},
        {'x':10, 'y':200},
        {'x':150, 'y':75}
      ];  
      plen=polygon.length;
      for(i=0; i&lt;plen; i++) {
        canvas.fillStyle = 'red';
        canvas.fillRect(polygon[i].x-4,polygon[i].y-4,8,8);
        canvas.fillStyle = 'yellow';
        canvas.fillRect(polygon[i].x-2,polygon[i].y-2,4,4);
      }   

      // draw edges
      var edges = [ 
        [[10,  200],[30,  50 ]], 
        [[10,  200],[100, 140]],
        [[10,  200],[200, 180]],
        [[30,  50 ],[100, 140]], 
        [[30,  50 ],[150, 75 ]], 
        [[30,  50 ],[200, 10 ]], 
        [[100, 140],[150, 75 ]], 
        [[100, 140],[200, 180]],
        [[150, 75 ],[200, 10 ]], 
        [[150, 75 ],[200, 180]],
        [[150, 75 ],[220, 80 ]], 
        [[200, 10 ],[220, 80 ]], 
        [[200, 10 ],[350, 100]],
        [[200, 180],[220, 80 ]], 
        [[200, 180],[350, 100]],
        [[220, 80 ],[350, 100]]
      ];  
      elen=edges.length;
      canvas.beginPath();
      for(i=0; i&lt;elen; i++) {
        canvas.moveTo(edges[i][0][0], edges[i][0][1]);
        canvas.lineTo(edges[i][13][0], edges[i][14][1]);
      }   
      canvas.closePath();
      canvas.strokeStyle = 'blue';
      canvas.stroke();

      // draw center points
      var points = [ 
        [50,130],
        [100,95],
        [100,170],
        [130,45],
        [150,130],
        [190,55],
        [190,110],
        [240,60],
        [245,120]
      ]   
      plen=points.length;
      for(i=0; i&lt;plen; i++) {
        canvas.fillStyle = 'black';
        canvas.fillRect(points[i][0]-3,points[i][15]-3,6,6);
        canvas.fillStyle = 'white';
        canvas.fillRect(points[i][0]-1,points[i][16]-1,2,2);
      }   

      // draw centroids
      var centroids = [ 
        [46.6666666667, 130.0],
        [93.3333333333, 88.3333333333],
        [103.333333333, 173.333333333],
        [126.666666667, 45.0],
        [150.0, 131.666666667],
        [190.0, 55.0],
        [190.0, 111.666666667],
        [256.666666667, 63.3333333333],
        [256.666666667, 120.0]
      ]
      clen=centroids.length;
      canvas.beginPath();
      for(i=0; i&lt;clen; i++) {
        canvas.moveTo(centroids[i][0], centroids[i][17]-5);
        canvas.lineTo(centroids[i][0], centroids[i][18]+5);
        canvas.moveTo(centroids[i][0]-5, centroids[i][19]);
        canvas.lineTo(centroids[i][0]+5, centroids[i][20]);
      }
      canvas.closePath();
      canvas.strokeStyle = 'red';
      canvas.stroke();
    }
  &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;canvas id='canvas' width="400px" height="250px"&lt;/canvas&gt;
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>14116007</id><snippet>def change_filename(name):
    filename = name.split('.')
    wordlist = filename[:-4]
    extension = '.' + filename[-1]
    wordlist[-1] = '{' + wordlist[-1] + '}'
    os.rename(name, ' '.join(wordlist) + extension)
</snippet></ROW><ROW><id>14116007</id><snippet>def filename_cleanup(name):
    filename = name.replace('{', '').replace('}', '')
    wordlist = filename.split(' ')
    extension = '.' + wordlist.pop()
    wordlist[-1] = '{' + wordlist[-1] + '}'
    os.rename(name, ' '.join(wordlist) + extension)
</snippet></ROW><ROW><id>14116139</id><snippet>repr</snippet></ROW><ROW><id>14116139</id><snippet>&lt;class 'cards.Card'&gt;(1,'hearts')</snippet></ROW><ROW><id>14116139</id><snippet>Card(1, 'hearts')</snippet></ROW><ROW><id>14116139</id><snippet>self.__class__.__name__</snippet></ROW><ROW><id>14116139</id><snippet>__repr__</snippet></ROW><ROW><id>14116139</id><snippet>self.__class__</snippet></ROW><ROW><id>14116139</id><snippet>eval(repr(...))</snippet></ROW><ROW><id>14116139</id><snippet>eval(repr(...))</snippet></ROW><ROW><id>14116188</id><snippet>.*(def)</snippet></ROW><ROW><id>14116188</id><snippet>abc defg</snippet></ROW><ROW><id>14116188</id><snippet>.*</snippet></ROW><ROW><id>14116188</id><snippet>(def)</snippet></ROW><ROW><id>14116188</id><snippet>.*</snippet></ROW><ROW><id>14116188</id><snippet>abc </snippet></ROW><ROW><id>14116188</id><snippet>.*(def)?</snippet></ROW><ROW><id>14116188</id><snippet>.*</snippet></ROW><ROW><id>14116188</id><snippet>(def)?</snippet></ROW><ROW><id>14116188</id><snippet>.*</snippet></ROW><ROW><id>14116188</id><snippet>(def)?</snippet></ROW><ROW><id>14116188</id><snippet>.*?(def)</snippet></ROW><ROW><id>14116188</id><snippet>.*?(def)?</snippet></ROW><ROW><id>14116188</id><snippet>.*?</snippet></ROW><ROW><id>14116188</id><snippet>(def)</snippet></ROW><ROW><id>14116188</id><snippet>(def)?</snippet></ROW><ROW><id>14116188</id><snippet>(def)</snippet></ROW><ROW><id>14116188</id><snippet>.*?</snippet></ROW><ROW><id>14116188</id><snippet>(def)?</snippet></ROW><ROW><id>14116267</id><snippet>geo_args</snippet></ROW><ROW><id>14116267</id><snippet>{
        'address': address,
        'sensor': sensor&lt;br&gt;
    }</snippet></ROW><ROW><id>14116267</id><snippet>geo_args</snippet></ROW><ROW><id>14116267</id><snippet>address</snippet></ROW><ROW><id>14116267</id><snippet>sensor</snippet></ROW><ROW><id>14116267</id><snippet>.update()</snippet></ROW><ROW><id>14116267</id><snippet>urllib.urlencode</snippet></ROW><ROW><id>14116553</id><snippet>import colorsys

DEG30 = 30/360.
def adjacent_colors((r, g, b), d=DEG30): # Assumption: r, g, b in [0, 255]
    r, g, b = map(lambda x: x/255., [r, g, b]) # Convert to [0, 1]
    h, l, s = colorsys.rgb_to_hls(r, g, b)     # RGB -&gt; HLS
    h = [(h+d) % 1 for d in (-d, d)]           # Rotation by d
    adjacent = [map(lambda x: int(round(x*255)), colorsys.hls_to_rgb(hi, l, s))
            for hi in h] # H'LS -&gt; new RGB
    return adjacent
</snippet></ROW><ROW><id>14116553</id><snippet>def _cubic(t, a, b):
    weight = t * t * (3 - 2*t)
    return a + weight * (b - a)

def ryb_to_rgb(r, y, b): # Assumption: r, y, b in [0, 1]
    # red
    x0, x1 = _cubic(b, 1.0, 0.163), _cubic(b, 1.0, 0.0)
    x2, x3 = _cubic(b, 1.0, 0.5), _cubic(b, 1.0, 0.2)
    y0, y1 = _cubic(y, x0, x1), _cubic(y, x2, x3)
    red = _cubic(r, y0, y1)

    # green
    x0, x1 = _cubic(b, 1.0, 0.373), _cubic(b, 1.0, 0.66)
    x2, x3 = _cubic(b, 0., 0.), _cubic(b, 0.5, 0.094)
    y0, y1 = _cubic(y, x0, x1), _cubic(y, x2, x3)
    green = _cubic(r, y0, y1)

    # blue
    x0, x1 = _cubic(b, 1.0, 0.6), _cubic(b, 0.0, 0.2)
    x2, x3 = _cubic(b, 0.0, 0.5), _cubic(b, 0.0, 0.0)
    y0, y1 = _cubic(y, x0, x1), _cubic(y, x2, x3)
    blue = _cubic(r, y0, y1)

    return (red, green, blue)
</snippet></ROW><ROW><id>14116614</id><snippet>THIS_VAR = {}
for i in range(n):
    THIS_VAR[i] = 2 ** i
</snippet></ROW><ROW><id>14116719</id><snippet>def parse(self, response):
       hxs = HtmlXPathSelector(response)
       urls = hxs.select('//a[contains(@href, "content")]/@href').extract()  ## only grab url with content in url name
       for i in urls:
           yield Request(urlparse.urljoin(response.url, i[1:]),callback=self.parse_url)


def parse_url(self, response):
   hxs = HtmlXPathSelector(response)
   item = ZipgrabberItem()
   item['zip'] = hxs.select("//div[contains(@class,'odd')]/text()").extract() ## this bitch grabs it
   return item
</snippet></ROW><ROW><id>14116880</id><snippet>for host in hostlist:
    pool.apply_async(worker, args = (host,), callback = on_return)
</snippet></ROW><ROW><id>14116880</id><snippet>import multiprocessing as mp
import time
import logging

logger = mp.log_to_stderr(logging.INFO)

hostlist = ['h1', 'h2', 'h3', 'h4']*3
poolsize = 2

class HClass:
    def __init__(self, hostname="default"):
        self.hostname = hostname

    def go(self):
        logger.info('processing {h}'.format(h = self.hostname))
        time.sleep(1)
        return self.hostname

def worker(host):
    h = HClass(hostname = host)
    return h.go()

result = []
def on_return(retval):
    result.append(retval)

if __name__ == "__main__":
    pool = mp.Pool(poolsize)
    for host in hostlist:
        pool.apply_async(worker, args = (host,), callback = on_return)
    pool.close()
    pool.join()
    logger.info(result)
</snippet></ROW><ROW><id>14116897</id><snippet>re.escape(url)</snippet></ROW><ROW><id>14116897</id><snippet>In [15]: import re

In [16]: url = 'http://stackoverflow.com'

In [17]: pat = re.compile(re.escape(url))

In [18]: pat.match('http://stackoverflow.com')
Out[18]: &lt;_sre.SRE_Match object at 0x8fd4c28&gt;

In [19]: pat.match('http://foo.com') is None
Out [19]: True
</snippet></ROW><ROW><id>14116905</id><snippet>list1</snippet></ROW><ROW><id>14116905</id><snippet>list2</snippet></ROW><ROW><id>14116905</id><snippet>list1 = list2
list2 = [0]*len(list2)
</snippet></ROW><ROW><id>14116905</id><snippet>list1, list2 = list2, [0]*len(list2)
</snippet></ROW><ROW><id>14116905</id><snippet>list_of_lists</snippet></ROW><ROW><id>14116905</id><snippet>list_of_lists = [list2, [0]*len(list2)]
</snippet></ROW><ROW><id>14116905</id><snippet>list1, list2 = list_of_lists = [list2, [0]*len(list2)]
</snippet></ROW><ROW><id>14117098</id><snippet>pip install requests
</snippet></ROW><ROW><id>14117098</id><snippet>easy_install requests
</snippet></ROW><ROW><id>14117167</id><snippet>import shlex
from subprocess import Popen

the_command = '/path/to/lunch 12'
result = Popen(shlex.split(the_command))
</snippet></ROW><ROW><id>14117167</id><snippet>12</snippet></ROW><ROW><id>14117167</id><snippet>lunch</snippet></ROW><ROW><id>14117167</id><snippet>shlex</snippet></ROW><ROW><id>14117167</id><snippet>Popen</snippet></ROW><ROW><id>14117167</id><snippet>shell=True</snippet></ROW><ROW><id>14117511</id><snippet>type</snippet></ROW><ROW><id>14117511</id><snippet>def check_negative(value):
    ivalue = int(value)
    if ivalue &lt; 0:
         raise argparse.ArgumentTypeError("%s is an invalid positive int value" % value)
    return ivalue

parser = argparse.ArgumentParser(...)
parser.add_argument('foo', type=check_negative)
</snippet></ROW><ROW><id>14118271</id><snippet>import socket

def DoesServiceExist(host, port):
    captive_dns_addr = ""
    host_addr = ""

    try:
        captive_dns_addr = socket.gethostbyname("BlahThisDomaynDontExist22.com")
    except:
        pass

    try:
        host_addr = socket.gethostbyname(host)

        if (captive_dns_addr == host_addr):
            return False

        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(1)
        s.connect((host, port))
        s.close()
    except:
        return False

    return True
</snippet></ROW><ROW><id>14118281</id><snippet>allData[i]['cleanFDF']</snippet></ROW><ROW><id>14118501</id><snippet>check_call(['./test.sh'],shell=True)
</snippet></ROW><ROW><id>14118524</id><snippet>class AbstractDecorator(object):
    """
    This seems like the more natural way, but won't work
    because the instance to which the wrapped function
    is attached will never be in scope.
    """
    def __new__(cls,f,*args,**kwargs):
        return wraps(f)(object.__new__(cls,*args,**kwargs))

    def __init__(decorator_self, f):
        decorator_self.f = f
        decorator_self.punctuation = "..."

    def __call__(decorator_self, obj_self, *args, **kwargs):
        decorator_self.very_important_prep()
        return decorator_self.f(obj_self, *args, **kwargs)

    def __get__(decorator_self, obj_self, objtype):
        return functools.partial(decorator_self.__call__, obj_self)      

class SillyDecorator(AbstractDecorator):
    def very_important_prep(decorator_self):
        print "My apartment was infested with koalas%s"%(decorator_self.punctuation)

class UsefulObject(object):
    def __init__(useful_object_self, noun):
        useful_object_self.noun = noun

    @SillyDecorator
    def red(useful_object_self):
        print "red %s"%(useful_object_self.noun)

&gt;&gt;&gt; u = UsefulObject("balloons")
... u.red()
My apartment was infested with koalas...
red balloons
</snippet></ROW><ROW><id>14118524</id><snippet>__get__</snippet></ROW><ROW><id>14118524</id><snippet>obj_self</snippet></ROW><ROW><id>14118524</id><snippet>__call__</snippet></ROW><ROW><id>14118524</id><snippet>functools.partial</snippet></ROW><ROW><id>14118524</id><snippet>obj_self</snippet></ROW><ROW><id>14118524</id><snippet>decorator_self</snippet></ROW><ROW><id>14118524</id><snippet>def decoMaker(msg):
    def deco(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            print msg
            return func(*args, **kwargs)
        return wrapper
    return deco

class UsefulObject(object):
    def __init__(useful_object_self, noun):
        useful_object_self.noun = noun

    @decoMaker('koalas...')
    def red(useful_object_self):
        print "red %s"%(useful_object_self.noun)

&gt;&gt;&gt; u = UsefulObject("balloons")
... u.red()
koalas...
red balloons
</snippet></ROW><ROW><id>14118524</id><snippet>sillyDecorator = decoMaker("Some really long message about koalas that you don't want to type over and over")

class UsefulObject(object):
    def __init__(useful_object_self, noun):
        useful_object_self.noun = noun

    @sillyDecorator
    def red(useful_object_self):
        print "red %s"%(useful_object_self.noun)

&gt;&gt;&gt; u = UsefulObject("balloons")
... u.red()
Some really long message about koalas that you don't want to type over and over
red balloons
</snippet></ROW><ROW><id>14118815</id><snippet>os.path.getmtime()</snippet></ROW><ROW><id>14118815</id><snippet>/var/lib/dpkg/info/PACKAGE</snippet></ROW><ROW><id>14118815</id><snippet>datetime.datetime.fromtimestamp(os.path.getmtime("PATH"))
</snippet></ROW><ROW><id>14119024</id><snippet>__slots__</snippet></ROW><ROW><id>14119024</id><snippet>&gt;&gt;&gt; class Foo(object):
...     __slots__ = ('spam',)
...     def __init__(self):
...         self.spam = 'eggs'
... 
&gt;&gt;&gt; class Bar(object):
...     def __init__(self):
...         self.spam = 'eggs'
... 
&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit('t.spam', 'from __main__ import Foo; t=Foo()')
0.07030296325683594
&gt;&gt;&gt; timeit.timeit('t.spam', 'from __main__ import Bar; t=Bar()')
0.07646608352661133
</snippet></ROW><ROW><id>14119024</id><snippet>__slots__</snippet></ROW><ROW><id>14119024</id><snippet>.__dict__</snippet></ROW><ROW><id>14119024</id><snippet>__slots__</snippet></ROW><ROW><id>14119024</id><snippet>&gt;&gt;&gt; class Foo(object):
...     __slots__ = ('spam',)
... 
&gt;&gt;&gt; dir(Foo())
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', 'spam']
&gt;&gt;&gt; Foo().spam
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: spam
&gt;&gt;&gt; Foo.spam
&lt;member 'spam' of 'Foo' objects&gt;
&gt;&gt;&gt; type(Foo.spam)
&lt;type 'member_descriptor'&gt;
</snippet></ROW><ROW><id>14119024</id><snippet>Foo</snippet></ROW><ROW><id>14119024</id><snippet>Foo.ham</snippet></ROW><ROW><id>14119024</id><snippet>&gt;&gt;&gt; Foo.ham = 'eggs'
&gt;&gt;&gt; dir(Foo)
['__class__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__slots__', '__str__', '__subclasshook__', 'ham', 'spam']
&gt;&gt;&gt; Foo().ham
'eggs'
</snippet></ROW><ROW><id>14119178</id><snippet>interp</snippet></ROW><ROW><id>14119178</id><snippet>f = lambda t,y: interp(y, yvalues, fvalues)
</snippet></ROW><ROW><id>14119178</id><snippet>numpy.interp</snippet></ROW><ROW><id>14119178</id><snippet>import numpy
from scipy import integrate
yvalues = numpy.arange(-2,3,0.1)
fvalues = - numpy.sin(yvalues)
f = lambda t,y: numpy.interp(y, yvalues, fvalues)
r = integrate.ode(f)
r.set_initial_value(1)
t1 = 10
dt = 0.1
while r.successful() and r.t &lt; t1:
    r.integrate(r.t+dt)
    print r.t, r.y
</snippet></ROW><ROW><id>14119933</id><snippet>cdef double f[500][500]
</snippet></ROW><ROW><id>14119933</id><snippet>f</snippet></ROW><ROW><id>14119933</id><snippet>f</snippet></ROW><ROW><id>14119933</id><snippet>float</snippet></ROW><ROW><id>14119933</id><snippet>for</snippet></ROW><ROW><id>14119933</id><snippet>cdef</snippet></ROW><ROW><id>14119933</id><snippet>list</snippet></ROW><ROW><id>14119933</id><snippet>object</snippet></ROW><ROW><id>14120125</id><snippet>mpd</snippet></ROW><ROW><id>14120125</id><snippet>mpc</snippet></ROW><ROW><id>14120125</id><snippet>ncmpc</snippet></ROW><ROW><id>14120125</id><snippet>ncmpcpp</snippet></ROW><ROW><id>14120125</id><snippet>mpd</snippet></ROW><ROW><id>14120125</id><snippet>mpc</snippet></ROW><ROW><id>14120125</id><snippet>mpc</snippet></ROW><ROW><id>14120125</id><snippet>python-mpd</snippet></ROW><ROW><id>14120234</id><snippet>In admin.py as 'from projectname.filename.models import *'
</snippet></ROW><ROW><id>14120234</id><snippet>projectname</snippet></ROW><ROW><id>14120234</id><snippet>from filename.models import *
</snippet></ROW><ROW><id>14120234</id><snippet>projectname</snippet></ROW><ROW><id>14120234</id><snippet>filename</snippet></ROW><ROW><id>14120234</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>14120234</id><snippet>projectname.filename</snippet></ROW><ROW><id>14120234</id><snippet>projectname</snippet></ROW><ROW><id>14120234</id><snippet>projectname/projectname/filename.py</snippet></ROW><ROW><id>14120234</id><snippet>filename</snippet></ROW><ROW><id>14120234</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>14120323</id><snippet>&gt;&gt;&gt; def testfunc():
...     """ My Docstrings """
...     print "test"
... 

&gt;&gt;&gt; testfunc.__doc__
' My Docstrings '
</snippet></ROW><ROW><id>14120343</id><snippet>.. autoclass:: &lt;ClassName&gt;
</snippet></ROW><ROW><id>14120369</id><snippet>print "%0.1f" % floating_point_value
</snippet></ROW><ROW><id>14120601</id><snippet>Raw</snippet></ROW><ROW><id>14120601</id><snippet>https://raw.github.com/someguy/brilliant/master/somefile.txt
</snippet></ROW><ROW><id>14120601</id><snippet>blob/</snippet></ROW><ROW><id>14120601</id><snippet>requests</snippet></ROW><ROW><id>14120601</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; r = requests.get('https://github.com/kennethreitz/requests/blob/master/README.rst')
&gt;&gt;&gt; 'Requests:' in r.text
True
&gt;&gt;&gt; r.headers['Content-Type']
'text/html; charset=utf-8'
&gt;&gt;&gt; r = requests.get('https://raw.github.com/kennethreitz/requests/master/README.rst')
&gt;&gt;&gt; 'Requests:' in r.text
True
&gt;&gt;&gt; r.headers['Content-Type']
'text/plain; charset=utf-8'
&gt;&gt;&gt; print r.text
Requests: HTTP for Humans
=========================


.. image:: https://travis-ci.org/kennethreitz/requests.png?branch=master
[... etc. ...]
</snippet></ROW><ROW><id>14120731</id><snippet>for user in allUsers:
  (dn, entry) = user
  mail = entry['mail'][0]

  print &gt;&gt; "%s, " % (mail)

  count += 1
</snippet></ROW><ROW><id>14120731</id><snippet>print &gt;&gt; sys.stdout, "%s, " %(mail)</snippet></ROW><ROW><id>14120731</id><snippet>print &gt;&gt; File "%s, "%mail</snippet></ROW><ROW><id>14120911</id><snippet>QTimer.singleShot(60000, self.RefreshData)
</snippet></ROW><ROW><id>14121175</id><snippet>&lt;form action="." method="post"&gt;{% csrf_token %}
</snippet></ROW><ROW><id>14121196</id><snippet>.compile()</snippet></ROW><ROW><id>14121196</id><snippet>p_number = re.compile(r'(\d{15}|\d{16}|\d{4}[\s-]\d{4}[\s-]\d{4}[\s-]\d{4})', re.M|re.I)
</snippet></ROW><ROW><id>14121196</id><snippet>.search()</snippet></ROW><ROW><id>14121196</id><snippet>matchObj = p_number.search(a)
</snippet></ROW><ROW><id>14121196</id><snippet>import re

p_number = re.compile(r'(\d{15}|\d{16}|\d{4}[\s-]\d{4}[\s-]\d{4}[\s-]\d{4})', re.M|re.I)
c=["1234567891234567","123456789123456","1234 5678 9123 4567","1234-5678-9123-4567","1234567891111111tytyyyy"]

for a in c:
    matchObj = p_number.search(a)
    if matchObj:
        print "match found"
    else:
        print "No match!!"
</snippet></ROW><ROW><id>14121196</id><snippet>match found</snippet></ROW><ROW><id>14121353</id><snippet>if (_meta != NULL) {
  // do stuff with _meta, like loop over the void*s
}
</snippet></ROW><ROW><id>14121353</id><snippet>_meta = NULL;</snippet></ROW><ROW><id>14121541</id><snippet>MySQL-python</snippet></ROW><ROW><id>14121541</id><snippet>easy_install MySQL-python
</snippet></ROW><ROW><id>14121541</id><snippet>mysql-devel</snippet></ROW><ROW><id>14121678</id><snippet>wget</snippet></ROW><ROW><id>14121678</id><snippet>wget</snippet></ROW><ROW><id>14121678</id><snippet>my_unicode</snippet></ROW><ROW><id>14121678</id><snippet>import unicodedata
output = unicodedata.normalize('NFD', my_unicode).encode('ascii', 'ignore')
</snippet></ROW><ROW><id>14121678</id><snippet>&gt;&gt;&gt; myfoo = u'àà'
&gt;&gt;&gt; myfoo
u'\xe0\xe0'
&gt;&gt;&gt; unicodedata.normalize('NFD', myfoo).encode('ascii', 'ignore')
'aa'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>14121808</id><snippet>with open('file.txt') as f:
    for line in f:
        if '[too long]' in line:
            line = line.rstrip('\r\n') + next(f)
        print line
</snippet></ROW><ROW><id>14121808</id><snippet>[001]This is line 1.

[002][too long]This is line 2 but it's Tooooooooo long!

[003]This is line 3.
</snippet></ROW><ROW><id>14121808</id><snippet>[too long]</snippet></ROW><ROW><id>14121808</id><snippet>[xxx]</snippet></ROW><ROW><id>14121855</id><snippet>filename='myfile.doc'
</snippet></ROW><ROW><id>14122327</id><snippet>a</snippet></ROW><ROW><id>14122327</id><snippet>b1</snippet></ROW><ROW><id>14122327</id><snippet>        5         6         7
b1:  0.04147   0.44421   4.46508
b2:  0.03399   0.43321   4.41121
b3:  0.03258   0.41821   4.25542

b1:  0.03240   0.42998   4.39774
b2:  0.03320   0.43465   4.42229
b3:  0.03155   0.42109   4.23669

b1:  0.03273   0.43321   4.37266
b2:  0.03326   0.43551   4.42208
b3:  0.03137   0.42356   4.25341

b1:  0.03253   0.43104   4.40466
b2:  0.03401   0.43719   4.42996
b3:  0.03155   0.41681   4.24132

b1:  0.03244   0.42965   4.37192
b2:  0.03310   0.43629   4.42727
b3:  0.03117   0.41701   4.23932
</snippet></ROW><ROW><id>14122491</id><snippet>interp1d</snippet></ROW><ROW><id>14122491</id><snippet>kind='linear'</snippet></ROW><ROW><id>14122491</id><snippet>interp1d</snippet></ROW><ROW><id>14122491</id><snippet>LinearNDInterpolator</snippet></ROW><ROW><id>14122491</id><snippet>LinearNDInterpolator</snippet></ROW><ROW><id>14122491</id><snippet>LinearNDInterpolator</snippet></ROW><ROW><id>14122491</id><snippet>from itertools import product

def interpolator(coords, data, point) :
    dims = len(point)
    indices = []
    sub_coords = []
    for j in xrange(dims) :
        idx = np.digitize([point[j]], coords[j])[0]
        indices += [[idx - 1, idx]]
        sub_coords += [coords[j][indices[-1]]]
    indices = np.array([j for j in product(*indices)])
    sub_coords = np.array([j for j in product(*sub_coords)])
    sub_data = data[list(np.swapaxes(indices, 0, 1))]
    li = LinearNDInterpolator(sub_coords, sub_data)
    return li([point])[0]

&gt;&gt;&gt; point = np.array([12.3,-4.2, 500.5, 2.5])
&gt;&gt;&gt; interpolator((lats, lons, alts, time), data, point)
0.386082399091
</snippet></ROW><ROW><id>14122491</id><snippet>LinearNDInterpolator</snippet></ROW><ROW><id>14122642</id><snippet>BeatifulSoap</snippet></ROW><ROW><id>14122642</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

page = urllib2.urlopen('http://facebook.com').read()
soup = BeautifulSoup(page)
soup.prettify()
for anchor in soup.findAll('a', href=True):
   print anchor['href']
</snippet></ROW><ROW><id>14122877</id><snippet>print</snippet></ROW><ROW><id>14122877</id><snippet>print '*', # note the trailing comma
</snippet></ROW><ROW><id>14122877</id><snippet>print('*', end='')
</snippet></ROW><ROW><id>14122877</id><snippet># The diamond size
l = 9

# Initialize first row; this will create a list with a
# single element, the first row containing a single star
rows = ['*']

# Add half of the rows; we loop over the odd numbers from
# 1 to l, and then append a star followed by `i` spaces and
# again a star. Note that range will not include `l` itself.
for i in range(1, l, 2):
    rows.append('*' + ' ' * i + '*')

# Mirror the rows and append; we get all but the last row
# (the middle row) from the list, and inverse it (using
# `[::-1]`) and add that to the original list. Now we have
# all the rows we need. Print it to see what's inside.
rows += rows[:-1][::-1]

# center-align each row, and join them
# We first define a function that does nothing else than
# centering whatever it gets to `l` characters. This will
# add the spaces we need around the stars
align = lambda x: ('{:^%s}' % l).format(x)

# And then we apply that function to all rows using `map`
# and then join the rows by a line break.
diamond = '\n'.join(map(align, rows))

# and print
print(diamond)
</snippet></ROW><ROW><id>14123277</id><snippet>'{:%m}'.format(datetime.datetime.now())
</snippet></ROW><ROW><id>14123277</id><snippet>'{:02d}'.format(datetime.datetime.now().month)
</snippet></ROW><ROW><id>14123277</id><snippet>'%02d' % (datetime.datetime.now().month)
</snippet></ROW><ROW><id>14123277</id><snippet>.strftime</snippet></ROW><ROW><id>14123277</id><snippet>datetime.datetime.now().strftime('%m')
</snippet></ROW><ROW><id>14123277</id><snippet>int</snippet></ROW><ROW><id>14123277</id><snippet> class MyInt(int):
     def __str__(self):
         return '%02d' % self

 a = MyInt(3)
 print (a)
</snippet></ROW><ROW><id>14123806</id><snippet>focusInEvent()</snippet></ROW><ROW><id>14123806</id><snippet> def focusInEvent(self,...):
     QParent.focusInEvent(self,...)
     # the rest of your code
</snippet></ROW><ROW><id>14123806</id><snippet>QParent</snippet></ROW><ROW><id>14123806</id><snippet>focusInEvent()</snippet></ROW><ROW><id>14123806</id><snippet>QLineEdit</snippet></ROW><ROW><id>14123806</id><snippet>focusInEvent</snippet></ROW><ROW><id>14123806</id><snippet>focusInEvent</snippet></ROW><ROW><id>14123806</id><snippet>type(self).focusInEvent(self,..)
</snippet></ROW><ROW><id>14123836</id><snippet>blah/setup.py</snippet></ROW><ROW><id>14123836</id><snippet>from setuptools import setup, find_packages

setup(name='blah',
      version='0.1',
      packages=find_packages(exclude=['ez_setup', 'examples', 'tests']),
      include_package_data=True,
      zip_safe=False,
      entry_points={'paste.global_paster_command': [ "xxx_new = blah.xxx:NewXxx", ] },
      )
</snippet></ROW><ROW><id>14123836</id><snippet>blah/blah/xxx.py</snippet></ROW><ROW><id>14123836</id><snippet>from paste.script import command

class NewXxx(command.Command):
    usage = "PREFIX"
    summary = "some command"
    group_name = "my group"
</snippet></ROW><ROW><id>14123836</id><snippet>blah/blah/__init__.py</snippet></ROW><ROW><id>14123836</id><snippet>$ pwd
/tmp
$ virtualenv paster
New python executable in paster/bin/python
Installing setuptools............done.
Installing pip...............done.
$ . paster/bin/activate
(paster)$ pip install PasteScript
Downloading/unpacking PasteScript
[... skipping long pip output here ...]
(paster)$ paster
[...]
Commands:
  create       Create the file layout for a Python distribution
  help         Display help
  make-config  Install a package and create a fresh config file/directory
  points       Show information about entry points
  post         Run a request for the described application
  request      Run a request for the described application
  serve        Serve the described application
  setup-app    Setup an application, given a config file

(paster)$ cd blah/
(paster)$ python setup.py develop
running develop
[... skipping setup.py output...]
(paster)$ paster
[...]
Commands:
  create       Create the file layout for a Python distribution
  help         Display help
  make-config  Install a package and create a fresh config file/directory
  points       Show information about entry points
  post         Run a request for the described application
  request      Run a request for the described application
  serve        Serve the described application
  setup-app    Setup an application, given a config file

my group:
  xxx_new      some command
(paster)$ cd ~
(paster)$ paster
[...]
Commands:
[...]
  setup-app    Setup an application, given a config file

my group:
  xxx_new      some command
</snippet></ROW><ROW><id>14124085</id><snippet>for key,value in dict_snps_genes:
</snippet></ROW><ROW><id>14124085</id><snippet>.items()</snippet></ROW><ROW><id>14124085</id><snippet>for key,value in dict_snps_genes.items():
</snippet></ROW><ROW><id>14124085</id><snippet>for key,value in dict_snps_genes.iteritems():
</snippet></ROW><ROW><id>14124085</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>14124085</id><snippet>set</snippet></ROW><ROW><id>14124085</id><snippet>import glob
import collections

file_list = glob.glob('annotations.*')
snps_genes = collections.defaultdict(set)
for filename in file_list:
    with open(filename) as fileA:
        for line in fileA:
            snpid, gene = line.strip().split(None, 1)
            snps_genes[snpid].add(gene)
</snippet></ROW><ROW><id>14124085</id><snippet>snps_genes</snippet></ROW><ROW><id>14124085</id><snippet>.split(None, 1)</snippet></ROW><ROW><id>14124085</id><snippet>&gt;&gt;&gt; 'id gene with whitespace'.split(None, 1)
['id', 'gene with whitespace']
</snippet></ROW><ROW><id>14124085</id><snippet>snps_genes</snippet></ROW><ROW><id>14124085</id><snippet>for id in sorted(snps_genes):
    print id, ', '.join(sorted(snps_genes[id]))
</snippet></ROW><ROW><id>14124317</id><snippet>C:\path\to\python.exe -m idlelib.idle
</snippet></ROW><ROW><id>14124444</id><snippet>arr</snippet></ROW><ROW><id>14124444</id><snippet>arr</snippet></ROW><ROW><id>14124444</id><snippet>-1</snippet></ROW><ROW><id>14124444</id><snippet>-1</snippet></ROW><ROW><id>14124444</id><snippet>import numpy as np                                                              
import numpy.ma as ma

x = np.array([1,2,3,4,5],dtype=np.double)                                       
arr = [[1,2],[0,4,3],[1,4,0],[0,3,4],[1,4]]                                     

max_arr_length = max([ len(item) for item in arr ])                          

arr_padded = [ np.pad(i,(0,max_arr_length-len(i)), mode='constant', 
    constant_values=-1) for i in arr ]
arr_masked = ma.masked_equal(arr_padded,-1)

ans_masked = ma.masked_array(x[arr_masked] - x[:, None], mask=arr_masked.mask)
</snippet></ROW><ROW><id>14124453</id><snippet>def find_recursive(needle, haystack):
    for index, item in enumerate(haystack):
        if not isinstance(item, str):
            try:
                path = find_recursive(needle, item)
                if path is not None:
                    return (index, ) + path
            except TypeError:
                pass
        if needle == item:
            return index,
    return None
</snippet></ROW><ROW><id>14124453</id><snippet>basestring</snippet></ROW><ROW><id>14124491</id><snippet>-m memory_profiler</snippet></ROW><ROW><id>14124491</id><snippet>$ python -m memory_profiler example.py
</snippet></ROW><ROW><id>14124491</id><snippet>Line #    Mem usage  Increment   Line Contents
==============================================
     3                           @profile
     4      5.97 MB    0.00 MB   def my_func():
     5     13.61 MB    7.64 MB       a = [1] * (10 ** 6)
     6    166.20 MB  152.59 MB       b = [2] * (2 * 10 ** 7)
     7     13.61 MB -152.59 MB       del b
     8     13.61 MB    0.00 MB       return a
</snippet></ROW><ROW><id>14124554</id><snippet>popt, pcov = curve_fit(goal.__call__, xdata, ydata)
</snippet></ROW><ROW><id>14124554</id><snippet>curve_fit</snippet></ROW><ROW><id>14124554</id><snippet>curve_fit</snippet></ROW><ROW><id>14124554</id><snippet>popt,pcov = curve_fit(goal, xdata, ydata, p0=[1]*5)
</snippet></ROW><ROW><id>14124554</id><snippet>p0</snippet></ROW><ROW><id>14124554</id><snippet>scipy</snippet></ROW><ROW><id>14124554</id><snippet>scipy</snippet></ROW><ROW><id>14124768</id><snippet>javascript:nextPage(document.paging.totalPages.value)
</snippet></ROW><ROW><id>14124768</id><snippet>import requests
r = requests.post('http://money.rediff.com/indices/bse/bsesmallcap',
              data={'currentPageNo': 3, 'RowPerPage': 100})
print r.text
</snippet></ROW><ROW><id>14124768</id><snippet>'currentPageNo'</snippet></ROW><ROW><id>14124768</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>14124768</id><snippet>'dataTable'</snippet></ROW><ROW><id>14124768</id><snippet>import requests
from bs4 import BeautifulSoup as BS
for page in range(1, 7):
    r = requests.post('http://money.rediff.com/indices/bse/bsesmallcap',
                      data={'currentPageNo': page, 'RowPerPage': 100})
    soup = BS(r.text)
    table = soup.find(class_='dataTable')
    # Add table information to whatever output you plan to use
</snippet></ROW><ROW><id>14124861</id><snippet>import sys, functools

def givelocals(func):

    localsdict = {}

    def profilefunc(frame, event, arg):
        if event == "call":
            localsdict.clear()
        elif event == "return":
            localsdict.update(frame.f_locals)
        return profilefunc    

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        oldprofilefunc = sys.getprofile()
        sys.setprofile(profilefunc)
        try:
            return func(*args, **kwargs), dict(localsdict)
        except Exception as e:
            e.locals = dict(localsdict)
            raise
        finally:
            sys.setprofile(oldprofilefunc)

    return wrapper
</snippet></ROW><ROW><id>14124861</id><snippet>@givelocals
def foo(x, y):
    a = x + y
    return x * y

&gt;&gt;&gt; foo(3, 4)
(12, {'y': 4, 'x': 3, 'a': 7})
</snippet></ROW><ROW><id>14124861</id><snippet>def foo(x, y):
    a = x + y
    return x * y

&gt;&gt;&gt; givelocals(foo)(3, 4)
(12, {'y': 4, 'x': 3, 'a': 7})
</snippet></ROW><ROW><id>14124861</id><snippet>locals_foo = givelocals(foo)
&gt;&gt;&gt; locals_foo(3, 4)
(12, {'y': 4, 'x': 3, 'a': 7})
</snippet></ROW><ROW><id>14124861</id><snippet>.locals</snippet></ROW><ROW><id>14124861</id><snippet>gettrace()</snippet></ROW><ROW><id>14124861</id><snippet>settrace()</snippet></ROW><ROW><id>14125116</id><snippet>set()</snippet></ROW><ROW><id>14125116</id><snippet>In [28]: %timeit set(np.append(df[0],df[1]))
100000 loops, best of 3: 19.6 us per loop

In [29]: %timeit np.append(df[0].unique(), df[1].unique())
10000 loops, best of 3: 55 us per loop
</snippet></ROW><ROW><id>14125180</id><snippet>option</snippet></ROW><ROW><id>14125180</id><snippet>for d in yourlst[0]:
    option = d['option']
    # do something with option
</snippet></ROW><ROW><id>14125180</id><snippet>for option in (d['option'] for d in yourlst[0]):
    # do something with option
</snippet></ROW><ROW><id>14125218</id><snippet>py-postgresql</snippet></ROW><ROW><id>14125218</id><snippet>pg_hba.conf</snippet></ROW><ROW><id>14125218</id><snippet>SSL</snippet></ROW><ROW><id>14125218</id><snippet>SSL</snippet></ROW><ROW><id>14125412</id><snippet>staticWords[i] = malloc(sizeof(char) * strlen(word));
strcpy(staticWords[i], word);
</snippet></ROW><ROW><id>14125412</id><snippet>{
  int isNull = !word;

  staticWords[i] = calloc(sizeof(char), (isNull ?0 :strlen(word)) + 1);
  strcpy(staticWords[i], isNull ?"" :word);
}
</snippet></ROW><ROW><id>14125487</id><snippet>def make_triangle(size, siblings, step): 
    return [['*' * (i-(step*sib)) + ' ' * ((size-(step*sib)) - ((i-(step*sib)) if (i-(step*sib) &gt; 0) else 0)) for sib in xrange(siblings)] for i in xrange(1, size+1)]
</snippet></ROW><ROW><id>14125487</id><snippet>&gt;&gt;&gt; for i in make_triangle(9,3,3):
    print ''.join(i)


*                        
**                     
***                  
****     *          
*****    **        
******   ***      
*******  ****  *  
******** ***** ** 
******************
</snippet></ROW><ROW><id>14125487</id><snippet>def make_triangle(size, siblings, step): 
    return '\n'.join([''.join(line) for line in [['*' * (i-(step*sib)) + ' ' * ((size-(step*sib)) - ((i-(step*sib)) if (i-(step*sib) &gt; 0) else 0)) for sib in xrange(siblings)] for i in xrange(1, size+1)]])

&gt;&gt;&gt; print make_triangle(9,3,3)
*                        
**                     
***                  
****     *          
*****    **        
******   ***      
*******  ****  *  
******** ***** ** 
******************
</snippet></ROW><ROW><id>14125487</id><snippet>def make_triangle(size, siblings, step): 
    return '\n'.join([' '.join(line) for line in [['*' * (i-(step*sib)) + ' ' * ((size-(step*sib)) - ((i-(step*sib)) if (i-(step*sib) &gt; 0) else 0)) for sib in xrange(siblings)] for i in xrange(1, size+1)]])

&gt;&gt;&gt; print make_triangle(9,3,3)
*                          
**                       
***                    
****      *           
*****     **         
******    ***       
*******   ****   *  
********  *****  ** 
********* ****** ***
</snippet></ROW><ROW><id>14125487</id><snippet>&gt;&gt;&gt; print make_triangle(13,5,2)
*                                                                
**                                                           
***           *                                           
****          **                                       
*****         ***         *                          
******        ****        **                       
*******       *****       ***       *             
********      ******      ****      **           
*********     *******     *****     ***     *    
**********    ********    ******    ****    **   
***********   *********   *******   *****   ***  
************  **********  ********  ******  **** 
************* *********** ********* ******* *****
</snippet></ROW><ROW><id>14125487</id><snippet>&gt;&gt;&gt; print make_triangle(13,5,2)[::-1]
***** ******* ********* *********** *************
 ****  ******  ********  **********  ************
  ***   *****   *******   *********   ***********
   **    ****    ******    ********    **********
    *     ***     *****     *******     *********
           **      ****      ******      ********
            *       ***       *****       *******
                     **        ****        ******
                      *         ***         *****
                                 **          ****
                                  *           ***
                                               **
                                                *
</snippet></ROW><ROW><id>14125487</id><snippet>def make_triangle(size, siblings, step): 
    out_list = []
    for i in xrange(1, size+1):
        in_list = []
        for sib in xrange(siblings):
            if i-(step*sib) &gt; 0: 
                in_list.append('*' * (i-(step*sib)) + ' ' * ((size-(step*sib)) - (i-(step*sib))))
            else:
                in_list.append('*' * (i-(step*sib)) + ' ' * (size-(step*sib))
        out_list.append(in_list)
    line_list = []
    for in_list in out_list:
        line_list.append(' '.join(in_list))
    result = '\n'.join(line_list)
    return result
</snippet></ROW><ROW><id>14125503</id><snippet>In [75]: df = DataFrame({'col1':['A','A','B','B'], 'col2':[1,2,3,4]})

In [76]: df
Out[76]:
  col1  col2
0    A     1
1    A     2
2    B     3
3    B     4

In [77]: df.groupby('col1').quantile()
ValueError: ('could not convert string to float: A', u'occurred at index col1')
</snippet></ROW><ROW><id>14125503</id><snippet>In [78]: df.groupby('col1')['col2'].quantile()
Out[78]:
col1
A       1.5
B       3.5
</snippet></ROW><ROW><id>14125613</id><snippet>import schedule
schedgen = schedule.SchedGen()
schedgen.set_rand_red()
</snippet></ROW><ROW><id>14125613</id><snippet>from schedule import SchedGen
schedgen = SchedGen()
schedgen.set_rand_red()
</snippet></ROW><ROW><id>14125944</id><snippet>os.path.join</snippet></ROW><ROW><id>14125944</id><snippet>In [1]: import os.path

In [2]: os.path.join('first_part', 'second_part')
Out[2]: 'first_part/second_part'

In [3]: os.path.join('first_part', r'/second_part')
Out[3]: '/second_part'
</snippet></ROW><ROW><id>14125944</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; os.path.join('first_part', 'second_part')
'first_part\\second_part'
&gt;&gt;&gt; os.path.join('first_part', '/second_part')
'/second_part'
</snippet></ROW><ROW><id>14125944</id><snippet>/</snippet></ROW><ROW><id>14125944</id><snippet>join</snippet></ROW><ROW><id>14125944</id><snippet>/</snippet></ROW><ROW><id>14125944</id><snippet>/</snippet></ROW><ROW><id>14125944</id><snippet>os.path.join</snippet></ROW><ROW><id>14125944</id><snippet>os.sep</snippet></ROW><ROW><id>14125944</id><snippet>os.path.join('first_part', 'second_part'</snippet></ROW><ROW><id>14126042</id><snippet>def possible_solution(remaining, sol=None):
    sol = sol or []
    if not remaining:
        yield sol
    else:
        for i, candidate in enumerate(remaining):
            if not sol or abs(sol[-1] - candidate) != 1:
                new_sol = sol + [candidate]
                new_remaining = remaining[:i] + remaining[i+1:]
                for x in possible_solution(new_remaining, new_sol):
                    yield x
</snippet></ROW><ROW><id>14126042</id><snippet>def possible_solutions(neighbors):
    for solution in possible_solution(neighbors):
        print solution

print '-' * 30
possible_solutions([1, 2, 3])

print '-' * 30
possible_solutions([1, 2, 3, 4])

print '-' * 30
possible_solutions([1, 2, 3, 4, 5])
</snippet></ROW><ROW><id>14126042</id><snippet>------------------------------
------------------------------
[2, 4, 1, 3]
[3, 1, 4, 2]
------------------------------
[1, 3, 5, 2, 4]
[1, 4, 2, 5, 3]
[2, 4, 1, 3, 5]
[2, 4, 1, 5, 3]
[2, 5, 3, 1, 4]
[3, 1, 4, 2, 5]
[3, 1, 5, 2, 4]
[3, 5, 1, 4, 2]
[3, 5, 2, 4, 1]
[4, 1, 3, 5, 2]
[4, 2, 5, 1, 3]
[4, 2, 5, 3, 1]
[5, 2, 4, 1, 3]
[5, 3, 1, 4, 2]
</snippet></ROW><ROW><id>14126184</id><snippet>my_function(test, this, out, like, so,
                   something, indent)
</snippet></ROW><ROW><id>14126184</id><snippet>a = [1,2,3,4,5]
my_function(*a)
</snippet></ROW><ROW><id>14126184</id><snippet>result = my_function(big, long, list, 
                      of, args)
a,b,c,d = result
</snippet></ROW><ROW><id>14126377</id><snippet>images</snippet></ROW><ROW><id>14126377</id><snippet>def main ():
    images=['test1.img','test2.img','test3.img']
    ROOT="/local/mnt/workspace"
    target="wc3123"
    for image in images:
        #Construct ROOT + "/out/target/product/" + target + "/test1.img 
        #for each image mentioned in imageslist remove if it exist"
        test1= ROOT + "out/target/product/" + target + "/" + image
        check_call("rm -rf %s" %test1,shell=True)
</snippet></ROW><ROW><id>14126377</id><snippet>os.unlink</snippet></ROW><ROW><id>14126377</id><snippet>os.path.join</snippet></ROW><ROW><id>14126377</id><snippet>import os

def main(images, root='/local/mnt/workspace', target='wc3123'):
    for image in images:
        os.unlink(os.path.join(root, target, image))

if __name__ == '__main__':
    main(['test1.img', 'test2.img', 'test3.img'])
</snippet></ROW><ROW><id>14126476</id><snippet>text = '[@a eee, fff fff, ggg @b eee, fff, ggg @c eee eee, fff fff,ggg ggg@d]'

from pyparsing import *

LBRACK,RBRACK,AT = map(Suppress,"[]@")

key = AT + Word(alphas)

# use originalTextFor to preserve whitespace between words between commas
list_item = originalTextFor(OneOrMore(Word(alphas)))

# define a key_value pair using Group to preserve structure
key_value = Group(key + Optional(delimitedList(list_item)))

parser = LBRACK + OneOrMore(key_value) + RBRACK
print parser.parseString(text)
</snippet></ROW><ROW><id>14126476</id><snippet>[['a', 'eee', 'fff fff', 'ggg'], 
 ['b', 'eee', 'fff', 'ggg'], 
 ['c', 'eee eee', 'fff fff', 'ggg ggg'], 
 ['d']]
</snippet></ROW><ROW><id>14126476</id><snippet># Extra credit:
# use Dict to auto-define named groups using each '@x' as a key
parser = LBRACK + Dict(OneOrMore(key_value)) + RBRACK
result = parser.parseString(text)

# print the parsed keys
print result.keys()

# print a value for a particular key
print result['c']

# print a value for a particular key using object notation
print result.b

# dump out the whole structure to see just what we got
print result.dump()
</snippet></ROW><ROW><id>14126476</id><snippet>['a', 'c', 'b', 'd']
['eee eee', 'fff fff', 'ggg ggg']
['eee', 'fff', 'ggg']
[['a', 'eee', 'fff fff', 'ggg'], ['b', 'eee', 'fff', 'ggg'], ['c', 'eee eee', 'fff fff', 'ggg ggg'], ['d']]
- a: ['eee', 'fff fff', 'ggg']
- b: ['eee', 'fff', 'ggg']
- c: ['eee eee', 'fff fff', 'ggg ggg']
- d: 
</snippet></ROW><ROW><id>14126752</id><snippet>n</snippet></ROW><ROW><id>14126752</id><snippet>(1, n)</snippet></ROW><ROW><id>14126752</id><snippet>(n, 1)</snippet></ROW><ROW><id>14126752</id><snippet>matrix</snippet></ROW><ROW><id>14126752</id><snippet>a</snippet></ROW><ROW><id>14126752</id><snippet>(m, n)</snippet></ROW><ROW><id>14126752</id><snippet>a[0]</snippet></ROW><ROW><id>14126752</id><snippet>(n,)</snippet></ROW><ROW><id>14126752</id><snippet>ndarray</snippet></ROW><ROW><id>14126752</id><snippet>(1, n)</snippet></ROW><ROW><id>14126752</id><snippet>matrix</snippet></ROW><ROW><id>14126752</id><snippet>a[0, 0]</snippet></ROW><ROW><id>14126752</id><snippet>(n,)</snippet></ROW><ROW><id>14126752</id><snippet>a.reshape(-1, 1) # shape (n, 1)
a[:, None] # shape (n, 1)
a.reshape(1, -1) # shape (1, n)
a[None, :] # shape (1, n)
</snippet></ROW><ROW><id>14126752</id><snippet>(1, n)</snippet></ROW><ROW><id>14127092</id><snippet>f = csv.reader(open('genotypes.csv','rbU'))
key_index = 22  # assuming that this column contains something like 'CASE156'
for rownum, row in enumerate(f):
    if row[key_index] == 'CASE156':
         print row[16]
</snippet></ROW><ROW><id>14127092</id><snippet>DictReader</snippet></ROW><ROW><id>14127268</id><snippet>#first write column headers
csvWriter.writerow(list(mydict.keys())

#now data, assuming each column has the same # of values
for i in xrange(len(mydict['Date'])):
    csvWriter.writerow([mydict[k][i] for k in mydict.keys()])
</snippet></ROW><ROW><id>14127614</id><snippet>a</snippet></ROW><ROW><id>14127614</id><snippet>None</snippet></ROW><ROW><id>14127614</id><snippet>if not a:
    return 1
</snippet></ROW><ROW><id>14127614</id><snippet>if a == None</snippet></ROW><ROW><id>14127614</id><snippet>[]</snippet></ROW><ROW><id>14127614</id><snippet>None</snippet></ROW><ROW><id>14127614</id><snippet>None</snippet></ROW><ROW><id>14127614</id><snippet>is</snippet></ROW><ROW><id>14127614</id><snippet>if a is None:
</snippet></ROW><ROW><id>14127614</id><snippet>not a</snippet></ROW><ROW><id>14127614</id><snippet>a</snippet></ROW><ROW><id>14127614</id><snippet>None</snippet></ROW><ROW><id>14127614</id><snippet>a</snippet></ROW><ROW><id>14127614</id><snippet>for b in a:
    b = reduce(mul, a)
    if b == None:
        return 1
    return b  # exit the function here, having only looked at the first element in `a`.
</snippet></ROW><ROW><id>14127614</id><snippet>return</snippet></ROW><ROW><id>14127614</id><snippet>NameError</snippet></ROW><ROW><id>14128208</id><snippet>None</snippet></ROW><ROW><id>14128208</id><snippet>title</snippet></ROW><ROW><id>14128208</id><snippet>elem.clear()</snippet></ROW><ROW><id>14128208</id><snippet>iterparse()</snippet></ROW><ROW><id>14128208</id><snippet>page</snippet></ROW><ROW><id>14128208</id><snippet>title</snippet></ROW><ROW><id>14128208</id><snippet>elem.clear()</snippet></ROW><ROW><id>14128208</id><snippet>iterparse(f)</snippet></ROW><ROW><id>14128208</id><snippet>iterparse(f, events=["start"])</snippet></ROW><ROW><id>14128208</id><snippet>node.text()</snippet></ROW><ROW><id>14128208</id><snippet>node.text</snippet></ROW><ROW><id>14128208</id><snippet>iterparse()</snippet></ROW><ROW><id>14128208</id><snippet>&lt;mediawiki xmlns="http://www.mediawiki.org/xml/export-0.3/"&gt;
  &lt;page&gt;
    &lt;title&gt;Unique Page title 1&lt;/title&gt;
    &lt;id&gt;11&lt;/id&gt;
    &lt;restrictions&gt;sysop&lt;/restrictions&gt;
    &lt;revision&gt;
      &lt;id&gt;11&lt;/id&gt;
      &lt;timestamp&gt;2005-10-26T02:23:03Z&lt;/timestamp&gt;
      &lt;contributor&gt;
       &lt;username&gt;Alice&lt;/username&gt;
      &lt;/contributor&gt;
      &lt;text xml:space="preserve"&gt;i&lt;/text&gt;
    &lt;/revision&gt;
  &lt;/page&gt;

  &lt;page&gt;
    &lt;title&gt;Unique Page title 2&lt;/title&gt;
    &lt;id&gt;11&lt;/id&gt;
    &lt;restrictions&gt;sysop&lt;/restrictions&gt;
    &lt;revision&gt;
      &lt;id&gt;11&lt;/id&gt;
      &lt;timestamp&gt;2005-10-26T02:23:03Z&lt;/timestamp&gt;
      &lt;contributor&gt;
       &lt;username&gt;Bob&lt;/username&gt;
      &lt;/contributor&gt;
      &lt;text xml:space="preserve"&gt;j&lt;/text&gt;
    &lt;/revision&gt;
  &lt;/page&gt;
&lt;/mediawiki&gt;
</snippet></ROW><ROW><id>14128208</id><snippet>from xml.etree.ElementTree import iterparse

NS = '{http://www.mediawiki.org/xml/export-0.3/}'

with open('mw.xml') as f:
    for event, elem in iterparse(f):
        if elem.tag == '{0}page'.format(NS):
            title = elem.find("{0}title".format(NS))
            contr = elem.find(".//{0}username".format(NS))

            if title is not None:
                print title.text
            if contr is not None:
                print contr.text

            elem.clear()
</snippet></ROW><ROW><id>14128208</id><snippet>Unique Page title 1 
Alice
Unique Page title 2 
Bob
</snippet></ROW><ROW><id>14128208</id><snippet>contributor</snippet></ROW><ROW><id>14128208</id><snippet>username</snippet></ROW><ROW><id>14128208</id><snippet>ip</snippet></ROW><ROW><id>14128208</id><snippet>id</snippet></ROW><ROW><id>14128336</id><snippet>result = df[df.pct_change &lt; -0.015].reindex(filtered_dates, method='bfill')</snippet></ROW><ROW><id>14128476</id><snippet>atexit.register</snippet></ROW><ROW><id>14128476</id><snippet>import atexit
process = subprocess.Popen(args.server_file_path)
atexit.register(process.terminate)
pid = process.pid
</snippet></ROW><ROW><id>14128476</id><snippet>import atexit
process = subprocess.Popen(args.server_file_path)
@atexit.register
def kill_process():
    try:
        process.terminate()
    except OSError:
        pass #ignore the error.  The OSError doesn't seem to be documented(?)
             #as such, it *might* be better to process.poll() and check for 
             #`None` (meaning the process is still running), but that 
             #introduces a race condition.  I'm not sure which is better,
             #hopefully someone that knows more about this than I do can 
             #comment.

pid = process.pid
</snippet></ROW><ROW><id>14128476</id><snippet>os._exit</snippet></ROW><ROW><id>14128476</id><snippet>SegmentationFault</snippet></ROW><ROW><id>14128476</id><snippet>BusError</snippet></ROW><ROW><id>14128602</id><snippet>/etc/postfix/virtual</snippet></ROW><ROW><id>14128602</id><snippet>example.com anything
django@example.com django-mail-in
</snippet></ROW><ROW><id>14128602</id><snippet>/etc/aliases</snippet></ROW><ROW><id>14128602</id><snippet>django-mail-in: "|/usr/local/bin/mta2django.py http://127.0.0.1:8000/mail-inbound"
</snippet></ROW><ROW><id>14128602</id><snippet>/usr/local/bin/mta2django.py</snippet></ROW><ROW><id>14128602</id><snippet>mail-inbound</snippet></ROW><ROW><id>14128602</id><snippet>mta2django.py</snippet></ROW><ROW><id>14128602</id><snippet>#!/usr/bin/python

import sys, urllib
import os


def post_message(url, recipient, message_txt):
    """ post an email message to the given url
    """

    if not url:
        print "Invalid url."
        print "usage: mta2django.py url &lt;recipient&gt;"
        sys.exit(64)

    data = {'mail': message_txt}
    if recipient and len(recipient) &gt; 0:
        data ['recipient'] = recipient

    try:
        result = urllib.urlopen(url, urllib.urlencode(data)).read()
    except (IOError,EOFError),e:
        print "error: could not connect to server",e
        sys.exit(73)

    try:
        exitcode, errormsg = result.split(':')
        if exitcode != '0':
            print 'Error %s: %s' % (exitcode, errormsg)
            sys.exit(int(exitcode))
    except ValueError:
        print 'Unknown error.'
        sys.exit(69)

    sys.exit(0)


if __name__ == '__main__':
    # This gets called by the MTA when a new message arrives.
    # The mail message file gets passed in on the stdin

    # Get the raw mail
    message_txt = sys.stdin.read()

    url = ''
    if len(sys.argv)&gt;1:
        url = sys.argv[1]

    recipient = ''
    # If mta2django is executed as external command by the MTA, the
    # environment variable ORIGINAL_RECIPIENT contains the entire
    # recipient address, before any address rewriting or aliasing
    recipient = os.environ.get('ORIGINAL_RECIPIENT')

    if len(sys.argv)&gt;2:
        recipient = sys.argv[2]

    post_message(url, recipient, message_txt)
</snippet></ROW><ROW><id>14128602</id><snippet>/mail-inbound</snippet></ROW><ROW><id>14128602</id><snippet>mail</snippet></ROW><ROW><id>14128602</id><snippet>recipient</snippet></ROW><ROW><id>14128602</id><snippet>email</snippet></ROW><ROW><id>14128602</id><snippet>import email

msg = email.message_from_string(request.get('mail'))
</snippet></ROW><ROW><id>14128602</id><snippet>/etc/postfix/virtual</snippet></ROW><ROW><id>14128602</id><snippet>/etc/aliases</snippet></ROW><ROW><id>14128743</id><snippet>import csv
with open('test.csv', 'rb') as myFile:
    reader = csv.reader(myFile, delimiter=',', quotechar='|')
    for row in reader:
            print row[4] + ' 1:' + row[0] + ' 2:' + row[1] + ' 3:' + row[2] + ' 4:' + row[3]
</snippet></ROW><ROW><id>14128743</id><snippet>a 1:43 2:674 3:345 4:547
b 1:788 2:474 3:687 4:290
c 1:44 2:567 3:1 4:89
</snippet></ROW><ROW><id>14129057</id><snippet>awk</snippet></ROW><ROW><id>14129057</id><snippet>awk '{ print $5, $6 }' text
</snippet></ROW><ROW><id>14129153</id><snippet>im</snippet></ROW><ROW><id>14129153</id><snippet>def main():
    seed(1234)
    x = uniform(-2,2,100)
    y = uniform(-2,2,100)
    data = vstack((x*exp(-x**2-y**2),0.5*x*exp(-x**2-y**2),0.2*x*exp(-x**2-y**2)))
    xi = linspace(min(x), max(x))
    yi = linspace(min(y), max(y))
    zi = []
    numframes = data.shape[0]
    for ii in range(numframes):
        zi.append(griddata((x, y), data[ii], (xi[None,:], yi[:,None]), method='cubic'))

    fig = plt.figure()
    im = plt.contour(xi, yi, zi[0], 15, linewidths=0.5, colors='k')
    ax = fig.gca()
    ani = animation.FuncAnimation(fig, update_contour_plot, frames=xrange(numframes), fargs=(zi, ax, fig, xi, yi), interval=100)
    plt.colorbar(im)
    plt.show()
    return ani


def update_contour_plot(i, data,  ax, fig, xi, yi):
    ax.cla()
    im = ax.contour(xi, yi, data[i], 15, linewidths=0.5, colors='k')
    plt.title(str(i))
    return im,
</snippet></ROW><ROW><id>14129153</id><snippet>im</snippet></ROW><ROW><id>14129321</id><snippet>stdout</snippet></ROW><ROW><id>14129321</id><snippet>subprocess.call()</snippet></ROW><ROW><id>14129321</id><snippet>with open('myoutfilename', 'w') as myoutfile:
    subprocess.call(cmd, stdout=myoutfile)
</snippet></ROW><ROW><id>14129581</id><snippet>f</snippet></ROW><ROW><id>14129581</id><snippet>import csv

with open('initialData.csv', 'rb') as f_in, open('newData', 'w') as f_out:
    reader = csv.reader(f_in, delimiter=',', quotechar='|')
    for row in reader:
        print row[13] + ' 1:' + row[0] + ' 2:' + row[1]
        f_out.write(row[13] + ' 1:' + row[0] + ' 2:' + row[1])
</snippet></ROW><ROW><id>14129635</id><snippet>self.factory.clients[24].transport.write("You are client 24!")
</snippet></ROW><ROW><id>14129869</id><snippet>file</snippet></ROW><ROW><id>14129869</id><snippet>subprocess.call("/home/lukasz/bashdate.sh")</snippet></ROW><ROW><id>14129869</id><snippet>subprocess.call(['/home/lukasz/bashdate.sh', year, month, month_name])</snippet></ROW><ROW><id>14129869</id><snippet>cat ... rm</snippet></ROW><ROW><id>14129869</id><snippet>y=$1; m=$2; mn=$3</snippet></ROW><ROW><id>14129907</id><snippet>./</snippet></ROW><ROW><id>14129907</id><snippet>_</snippet></ROW><ROW><id>14129907</id><snippet>.sh</snippet></ROW><ROW><id>14129907</id><snippet>copyfile("./test_" + target + ".sh", ROOT)
</snippet></ROW><ROW><id>14129907</id><snippet>ROOT = '/local/mnt/workspace'
target = 'wsc1234'
</snippet></ROW><ROW><id>14129907</id><snippet>copyfile</snippet></ROW><ROW><id>14129907</id><snippet>from shutil import copyfile
</snippet></ROW><ROW><id>14129907</id><snippet>shutil.copyfile(...)</snippet></ROW><ROW><id>14129907</id><snippet>workspace.</snippet></ROW><ROW><id>14129907</id><snippet>ROOT + "/test_" + target + ".sh"</snippet></ROW><ROW><id>14130022</id><snippet>perl -MWWW::Mechanize -e '
  $m = WWW::Mechanize-&gt;new;
  $m-&gt;get($ARGV[0]);
  $m-&gt;dump_images(undef, 1)' file://`pwd`/image_urls.txt
</snippet></ROW><ROW><id>14130022</id><snippet>sed -n 's%.*src="\([^"]*\)".*%\1%p'
</snippet></ROW><ROW><id>14130022</id><snippet>\1</snippet></ROW><ROW><id>14130022</id><snippet>sed -n 's%.*src="%%; s%".*%%p'
</snippet></ROW><ROW><id>14130077</id><snippet>pylab.quiver</snippet></ROW><ROW><id>14130077</id><snippet>pylab.quiverkey</snippet></ROW><ROW><id>14130077</id><snippet>quiver</snippet></ROW><ROW><id>14130077</id><snippet>quiverkey</snippet></ROW><ROW><id>14130077</id><snippet>quiver</snippet></ROW><ROW><id>14130094</id><snippet>Polygon</snippet></ROW><ROW><id>14130094</id><snippet>poly.area</snippet></ROW><ROW><id>14130094</id><snippet>poly.length</snippet></ROW><ROW><id>14130094</id><snippet>Polygon</snippet></ROW><ROW><id>14130094</id><snippet>coords = poly.exterior.coords[:]
coords[1] = (2.0, 6.0) # coordinate to change

new_poly = Polygon(coords)
</snippet></ROW><ROW><id>14130094</id><snippet>poly.interior</snippet></ROW><ROW><id>14130120</id><snippet># some toy example data - I understand you want the first 2 sub_list
# to be "merged" because BOTH strings in pos 0 and 2 match
data = [['42x120x1800', 50, '50x90x800', 60],
        ['42x120x1800', 8, '50x90x800', 10],
        ['2x10x800', 5, '5x9x80', 6]]


from collections import defaultdict

# I'm using a lambda to initialize the items of the dict
# to a two-element list of zeros
d = defaultdict(lambda :[0, 0])
for sub_list in data:
    key = (sub_list[0], sub_list[2])
    d[key][0] += sub_list[1]
    d[key][1] += sub_list[3]

for key in d:
    print key, d[key]   
# ('2x10x800', '5x9x80') [5, 6]
# ('42x120x1800', '50x90x800') [58, 70]
</snippet></ROW><ROW><id>14130120</id><snippet>new_data = [[key[0], val[0], key[1], val[1]] for key, val in d.iteritems()]
# [['2x10x800', 5, '5x9x80', 6], ['42x120x1800', 58, '50x90x800', 70]]
</snippet></ROW><ROW><id>14130246</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; import warnings
&gt;&gt;&gt; numpy.log(0.)
__main__:1: RuntimeWarning: divide by zero encountered in log
-inf
&gt;&gt;&gt; warnings.simplefilter("error", RuntimeWarning)    # not "RuntimeWarning"
&gt;&gt;&gt; try:
...     numpy.log(0.)
... except RuntimeWarning:
...     print "caught"
...
caught
</snippet></ROW><ROW><id>14130246</id><snippet>numpy.seterr</snippet></ROW><ROW><id>14130246</id><snippet>RuntimeWarning</snippet></ROW><ROW><id>14130246</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; numpy.seterr(all='raise')
{'over': 'warn', 'divide': 'warn', 'invalid': 'warn', 'under': 'ignore'}
&gt;&gt;&gt; try:
...     numpy.log(0.)
... except FloatingPointError:
...     print "caught"
... 
caught
</snippet></ROW><ROW><id>14130246</id><snippet>warnings.simplefilter</snippet></ROW><ROW><id>14130269</id><snippet>Campaign</snippet></ROW><ROW><id>14130269</id><snippet>Company</snippet></ROW><ROW><id>14130269</id><snippet>companyid</snippet></ROW><ROW><id>14130269</id><snippet>def related_company(self, obj):
    return obj.companyid.name
related_company.short_description = 'Company'
</snippet></ROW><ROW><id>14130269</id><snippet>__unicode__()</snippet></ROW><ROW><id>14130269</id><snippet>list_display = ['name', 'companyid', 'active', 'modified', 'created']
</snippet></ROW><ROW><id>14130423</id><snippet>now_at_import = datetime.now(utc)
MyModel
  ...
  ts = models.DateTimeField(default = now_at_import)

#is exactly the same as
MyModel
  ...
  ts = models.DateTimeField(default = datetime.now(utc))
</snippet></ROW><ROW><id>14130423</id><snippet>def get_utc_now():
  return datetime.now(utc)


MyModel
  ...
  ts = models.DateTimeField(default = get_utc_now)
</snippet></ROW><ROW><id>14130514</id><snippet>dest</snippet></ROW><ROW><id>14130514</id><snippet>Surface.blit()</snippet></ROW><ROW><id>14130514</id><snippet>class ScrollBar:
    # ... code ...
    def render(self, display, x, y):
        self.subSurface.blit(self.handle_image, (0, self.handle_pos))
        self.subSurface.blit(self.upbtn_image, (0, 0))
        self.subSurface.blit(self.dnbtn_image, (0, self.height - self.btn_height))
        # ... other rendering operations
        display.blit(self.subSurface, (x, y))
</snippet></ROW><ROW><id>14130598</id><snippet>dtype=object</snippet></ROW><ROW><id>14130790</id><snippet>inpfile</snippet></ROW><ROW><id>14130790</id><snippet>outfile</snippet></ROW><ROW><id>14130790</id><snippet>run</snippet></ROW><ROW><id>14130790</id><snippet>Thread</snippet></ROW><ROW><id>14130790</id><snippet>target</snippet></ROW><ROW><id>14130790</id><snippet>args</snippet></ROW><ROW><id>14130790</id><snippet>run</snippet></ROW><ROW><id>14130790</id><snippet>target(*args)</snippet></ROW><ROW><id>14130790</id><snippet>t = threading.Thread(target=workermethod, args=(inpfile, outfile))
</snippet></ROW><ROW><id>14130790</id><snippet>workermethod(inpfile, outfile)</snippet></ROW><ROW><id>14130790</id><snippet>Thread</snippet></ROW><ROW><id>14130790</id><snippet>inpfile</snippet></ROW><ROW><id>14130790</id><snippet>outfile</snippet></ROW><ROW><id>14130790</id><snippet>run</snippet></ROW><ROW><id>14130790</id><snippet>workermethod</snippet></ROW><ROW><id>14130790</id><snippet>self.inpfile</snippet></ROW><ROW><id>14130790</id><snippet>self.outfile</snippet></ROW><ROW><id>14130790</id><snippet>class ThreadUrl(threading.Thread):
    def __init__(self, inpfile, outfile):
        threading.Thread.__init__(self)
        self.inpfile, self.outfile = inpfile, outfile

    def run(self):
        f1 = open(self.inpfile,'r')
        f2 = open(self.outfile,'w')
        x = f1.readlines()
        for each in x:
            f2.write(each)
        f1.close()
        f2.close()
</snippet></ROW><ROW><id>14130790</id><snippet>with</snippet></ROW><ROW><id>14130790</id><snippet>open</snippet></ROW><ROW><id>14130790</id><snippet>close</snippet></ROW><ROW><id>14130790</id><snippet>readlines</snippet></ROW><ROW><id>14130790</id><snippet>    def run(self):
        with open(self.inpfile,'r') as f1, open(self.outfile,'w') as f2:
            for line in f1:
                f2.write(line)
</snippet></ROW><ROW><id>14130790</id><snippet>class ThreadUrl(threading.Thread):
    def __init__(self,queue):
        threading.Thread.__init__(self)
        self.queue = queue

    def run(self):
        while True:
            inpfile, outfile = self.queue.get()
            workermethod(inpfile, outfile)
</snippet></ROW><ROW><id>14130790</id><snippet>queue</snippet></ROW><ROW><id>14130790</id><snippet>q = queue.Queue
threadpool = [ThreadUrl(q) for i in range(poolsize)]
</snippet></ROW><ROW><id>14130790</id><snippet>q.put((inpfile, outfile))
</snippet></ROW><ROW><id>14130790</id><snippet>ThreadPoolExecutor</snippet></ROW><ROW><id>14130790</id><snippet>Future</snippet></ROW><ROW><id>14130790</id><snippet>ThreadPool</snippet></ROW><ROW><id>14130790</id><snippet>multiprocessing</snippet></ROW><ROW><id>14130790</id><snippet>queue</snippet></ROW><ROW><id>14130790</id><snippet>workermethod</snippet></ROW><ROW><id>14130790</id><snippet>shutil</snippet></ROW><ROW><id>14130790</id><snippet>t = threading.Thread(target=workermethod, args=(inpfile, outfile))
</snippet></ROW><ROW><id>14130790</id><snippet>t = threading.Thread(target=shutil.copyfile, args=(inpfile, outfile))
</snippet></ROW><ROW><id>14130790</id><snippet>threads = [threading.Thread(target=shutil.copyfile, args=(inpfile, outfile))
           for (inpfile, outfile) in zip(filelistread, filelistwrte)]
for thread in threads:
    thread.start()
for thread in threads:
    thread.join()
</snippet></ROW><ROW><id>14130923</id><snippet>class ImageHandler(Handler):
    def get(self):
        character = db.get(self.request.get('img_id'))
        if character.avatar:
            self.response.headers['Content-Type'] = 'image/png'
            self.response.out.write(character.avatar)
        else:
            self.response.out.write("No image")
</snippet></ROW><ROW><id>14131104</id><snippet>vocab_tage = {value: key for key, value in tag_vocab.items()}
</snippet></ROW><ROW><id>14131104</id><snippet>dict()</snippet></ROW><ROW><id>14131104</id><snippet>vocab_tage = dict((value, key) for key, value in tag_vocab.items())
</snippet></ROW><ROW><id>14131185</id><snippet>class CustomUserManager(UserManager):

    def get_query_set(self):
        return super(CustomUserManager, self).get_query_set().
          filter(is_active=True)


class MyUser(User):
    objects = CustomUserManager()

# get an active user which username is 'foo'
MyUser.objects.get(username='foo')
</snippet></ROW><ROW><id>14131614</id><snippet>os.mkdir(os.path.expanduser('~/Desktop/mp3-organizer/%s')) % song_info.tag.artist
</snippet></ROW><ROW><id>14131614</id><snippet>os.mkdir(os.path.expanduser('~/Desktop/mp3-organizer/%s' % song_info.tag.artist))
</snippet></ROW><ROW><id>14131614</id><snippet>expanded = os.path.expanduser('~/Desktop/mp3-organizer/%s')
dir = os.mkdir(expanded)
formatted = dir % song_info.tag.artist
</snippet></ROW><ROW><id>14131614</id><snippet>/Users/ntoscano/Desktop/mp3-organizer/%s</snippet></ROW><ROW><id>14131614</id><snippet>None</snippet></ROW><ROW><id>14131614</id><snippet>None % song_info.tag.artist</snippet></ROW><ROW><id>14131614</id><snippet>NoneType</snippet></ROW><ROW><id>14131614</id><snippet>unicode</snippet></ROW><ROW><id>14131614</id><snippet>%</snippet></ROW><ROW><id>14131614</id><snippet>expanduser</snippet></ROW><ROW><id>14131614</id><snippet>mkdir</snippet></ROW><ROW><id>14131614</id><snippet>%</snippet></ROW><ROW><id>14131614</id><snippet>'~/Desktop/mp3-organizer/%s' % (song_info.tag.artist,)'</snippet></ROW><ROW><id>14131614</id><snippet>{}</snippet></ROW><ROW><id>14131614</id><snippet>'~/Desktop/mp3-organizer/{}'.format(song_info.tag.artist)</snippet></ROW><ROW><id>14131614</id><snippet>os.path</snippet></ROW><ROW><id>14131614</id><snippet>root_folder</snippet></ROW><ROW><id>14131614</id><snippet>expanduser</snippet></ROW><ROW><id>14131614</id><snippet>~</snippet></ROW><ROW><id>14131614</id><snippet>/Users/ntoscano</snippet></ROW><ROW><id>14131614</id><snippet>root_folder = os.path.expanduser('~/Desktop/mp3-organizer')

files = os.listdir(root_folder) #lists all files in specified directory

for file_name in files:
    #if file_name.endswith('.mp3'): continue #if file ends with ".mp3" it continues onto the next line

    abs_location = os.path.join(root_folder, file_name)

    song_info = eyed3.load(abs_location) #loads each file into eyed3 and assignes the return value to song_info
    if song_info is None:
        print 'Skippig %s' % abs_location
        continue
     os.mkdir(os.path.join(root_folder, song_info.tag.artist))
     print song_info
     print song_info.tag.artist
</snippet></ROW><ROW><id>14131646</id><snippet>x.extend(y+z)
</snippet></ROW><ROW><id>14131646</id><snippet>x += y+z
</snippet></ROW><ROW><id>14131646</id><snippet>x = x+y+z
</snippet></ROW><ROW><id>14131692</id><snippet>with open('number-file') as f:
    x,y = zip(*(map(int, line.split()) for line in f))
</snippet></ROW><ROW><id>14131692</id><snippet>with open('number-file') as f:
</snippet></ROW><ROW><id>14131692</id><snippet>(line.split() for line in f)
</snippet></ROW><ROW><id>14131692</id><snippet>map(int, line.split())</snippet></ROW><ROW><id>14131692</id><snippet>[[1, 99], [2, 33], [3, 90], [4, 25], [5, 89]]
</snippet></ROW><ROW><id>14131692</id><snippet>zip</snippet></ROW><ROW><id>14131692</id><snippet>x</snippet></ROW><ROW><id>14131692</id><snippet>y</snippet></ROW><ROW><id>14131692</id><snippet>x,y = list(x), list(y)
</snippet></ROW><ROW><id>14131694</id><snippet>subsets = [{attr: getattr(x, attr) for attr in ["a", "d"]} 
           for x in someObjects]
</snippet></ROW><ROW><id>14131694</id><snippet>def pick(*attrs):
    return {attr: getattr(x, attr) for attr in attrs} 

subsets = [pick("a", "d") for x in someObjects]
</snippet></ROW><ROW><id>14131772</id><snippet>re.match('&lt;some_match_symbols&gt;' + '&lt;my_match&gt;' + '&lt;some_other_match_symbols&gt;', mystring)
</snippet></ROW><ROW><id>14131772</id><snippet>r'…'</snippet></ROW><ROW><id>14131772</id><snippet>r'\n'</snippet></ROW><ROW><id>14131772</id><snippet>'\\n'</snippet></ROW><ROW><id>14131772</id><snippet>n</snippet></ROW><ROW><id>14131772</id><snippet>'\n'</snippet></ROW><ROW><id>14131813</id><snippet>ans = raw_input().lower()("This is one of those times when only Yes/No will do!"
                          "\n"  "So what will it be? Yes? No?")
</snippet></ROW><ROW><id>14131813</id><snippet>lower()</snippet></ROW><ROW><id>14131813</id><snippet>ans = raw_input("This is one of those times when only Yes/No will do!\n"
                "So what will it be? Yes? No?").lower()
</snippet></ROW><ROW><id>14131813</id><snippet>if ans() == 'yes' or 'no':
</snippet></ROW><ROW><id>14131813</id><snippet>ans</snippet></ROW><ROW><id>14131813</id><snippet>or</snippet></ROW><ROW><id>14131813</id><snippet>ans</snippet></ROW><ROW><id>14131813</id><snippet>if (ans == 'yes') or ('no'):
</snippet></ROW><ROW><id>14131813</id><snippet>'no'</snippet></ROW><ROW><id>14131813</id><snippet>if ans in ('yes', 'no'):
</snippet></ROW><ROW><id>14131813</id><snippet>name = raw_input("Welcome soldier. What is your name? ")
print('Ok, ' + name + ' we need your help.')
ans = raw_input("Do you want to help us? (Yes/No)").lower()
while True:
    if ans in ('yes', 'no'):
        break
    print("This is one of those times when only Yes/No will do!\n")
    ans = raw_input("So what will it be? Yes? No?").lower()

if ans == "yes":
    print("Good!")
elif ans == "no":
    print("I guess I was wrong about you..." '\n' "Game over.")
</snippet></ROW><ROW><id>14131840</id><snippet>In [1]: corr
Out[1]:
          a         b         c         d         e
a  1.000000  0.022246  0.018614  0.022592  0.008520
b  0.022246  1.000000  0.033029  0.049714 -0.008243
c  0.018614  0.033029  1.000000 -0.016244  0.049010
d  0.022592  0.049714 -0.016244  1.000000 -0.015428
e  0.008520 -0.008243  0.049010 -0.015428  1.000000

In [2]: corr.values[np.triu_indices_from(corr.values,1)].mean()
Out[2]: 0.016381
</snippet></ROW><ROW><id>14131840</id><snippet>In [3]: %timeit corr.values[np.triu_indices_from(corr.values,1)].mean()
10000 loops, best of 3: 48.1 us per loop
</snippet></ROW><ROW><id>14131840</id><snippet>In [4]: %timeit corr.unstack().ix[zip(*np.triu_indices_from(corr, 1))].mean()
1000 loops, best of 3: 823 us per loop
</snippet></ROW><ROW><id>14131840</id><snippet>In [5]: def method1(df):
   ...:     df2 = df.copy()
   ...:     df2.values[np.tril_indices_from(df2)] = np.nan
   ...:     return df2.unstack().mean()
   ...:

In [5]: %timeit method1(corr)
1000 loops, best of 3: 242 us per loop
</snippet></ROW><ROW><id>14132014</id><snippet>getpml(http://www.mysite.com)</snippet></ROW><ROW><id>14132273</id><snippet>from nose.plugins import Plugin
import datetime

class SeparateReports(Plugin):
  "Log the results of each test into a separate file."
  def afterTest(self, test):
    logname = test.id() + '.log'
    success = test.passed
    date = datetime.datetime.now()
    # print logname, datetime.datetime.now(), success
    with open(logname, 'a') as log:
        log.write("%s: %s\n" % (date, success))
</snippet></ROW><ROW><id>14132305</id><snippet>PATH</snippet></ROW><ROW><id>14132305</id><snippet>C:\Python27\</snippet></ROW><ROW><id>14132305</id><snippet>PATH</snippet></ROW><ROW><id>14132305</id><snippet>C:\Python27\;C:\Python27\Scripts;
</snippet></ROW><ROW><id>14132618</id><snippet>accumulate</snippet></ROW><ROW><id>14132618</id><snippet>reduce</snippet></ROW><ROW><id>14132618</id><snippet>list(accumulate([1,2,3], operator.plus))</snippet></ROW><ROW><id>14132618</id><snippet>[1,3,6]</snippet></ROW><ROW><id>14132618</id><snippet>6</snippet></ROW><ROW><id>14132618</id><snippet>accumulate</snippet></ROW><ROW><id>14132618</id><snippet>reduce</snippet></ROW><ROW><id>14132618</id><snippet>def accumulate(xs, f):
    return reduce(lambda a, x: a + [f(a[-1], x)], xs[1:], [xs[0]]) 
</snippet></ROW><ROW><id>14132773</id><snippet>return</snippet></ROW><ROW><id>14132773</id><snippet>yield</snippet></ROW><ROW><id>14132773</id><snippet>import csv 

def pass_username():
    with open('test.csv', 'r') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=',')
        for row in spamreader:
            yield row[0]

username_generator = pass_username()

# iterate through the usernames with a for loop
for name in username_generator:
    print name
# call the list constructor which causes it to produce all of the names
print list(pass_username())
</snippet></ROW><ROW><id>14132773</id><snippet>username_generator.next()</snippet></ROW><ROW><id>14132912</id><snippet>python myfile.py</snippet></ROW><ROW><id>14132912</id><snippet>python -m myfile</snippet></ROW><ROW><id>14132912</id><snippet>import</snippet></ROW><ROW><id>14132912</id><snippet>__name__</snippet></ROW><ROW><id>14132912</id><snippet>__main__</snippet></ROW><ROW><id>14132912</id><snippet>moduleX</snippet></ROW><ROW><id>14132912</id><snippet>package.subpackage1.moduleX</snippet></ROW><ROW><id>14132912</id><snippet>moduleA</snippet></ROW><ROW><id>14132912</id><snippet>package.moduleA</snippet></ROW><ROW><id>14132912</id><snippet>moduleX</snippet></ROW><ROW><id>14132912</id><snippet>__main__</snippet></ROW><ROW><id>14132912</id><snippet>moduleA</snippet></ROW><ROW><id>14132912</id><snippet>__main__</snippet></ROW><ROW><id>14132912</id><snippet>__main__</snippet></ROW><ROW><id>14132912</id><snippet>package/subpackage1</snippet></ROW><ROW><id>14132912</id><snippet>import moduleX</snippet></ROW><ROW><id>14132912</id><snippet>moduleX</snippet></ROW><ROW><id>14132912</id><snippet>moduleX</snippet></ROW><ROW><id>14132912</id><snippet>package.subpackage1.moduleX</snippet></ROW><ROW><id>14132912</id><snippet>python</snippet></ROW><ROW><id>14132912</id><snippet>__main__</snippet></ROW><ROW><id>14132912</id><snippet>from .. import foo</snippet></ROW><ROW><id>14132912</id><snippet>package.subpackage1.moduleX</snippet></ROW><ROW><id>14132912</id><snippet>..moduleA</snippet></ROW><ROW><id>14132912</id><snippet>package.moduleA</snippet></ROW><ROW><id>14132912</id><snippet>from .. import</snippet></ROW><ROW><id>14132912</id><snippet>import</snippet></ROW><ROW><id>14132912</id><snippet>__main__</snippet></ROW><ROW><id>14132912</id><snippet>from .. import</snippet></ROW><ROW><id>14132912</id><snippet>moduleX</snippet></ROW><ROW><id>14132912</id><snippet>__main__</snippet></ROW><ROW><id>14132912</id><snippet>__main__</snippet></ROW><ROW><id>14132912</id><snippet>moduleX</snippet></ROW><ROW><id>14132912</id><snippet>python -m package.subpackage.moduleX</snippet></ROW><ROW><id>14132912</id><snippet>-m</snippet></ROW><ROW><id>14132912</id><snippet>moduleX</snippet></ROW><ROW><id>14132912</id><snippet>myfile.py</snippet></ROW><ROW><id>14132912</id><snippet>moduleX</snippet></ROW><ROW><id>14132912</id><snippet>myfile.py</snippet></ROW><ROW><id>14132912</id><snippet>package</snippet></ROW><ROW><id>14132912</id><snippet>myfile.py</snippet></ROW><ROW><id>14132912</id><snippet>from package.moduleA import spam</snippet></ROW><ROW><id>14132912</id><snippet>package</snippet></ROW><ROW><id>14132912</id><snippet>sys.path</snippet></ROW><ROW><id>14132912</id><snippet>__name__</snippet></ROW><ROW><id>14132912</id><snippet>__package__</snippet></ROW><ROW><id>14132912</id><snippet>__name__</snippet></ROW><ROW><id>14132912</id><snippet>__package__ + '.' + __name__</snippet></ROW><ROW><id>14132912</id><snippet>__name__</snippet></ROW><ROW><id>14132912</id><snippet>__package__</snippet></ROW><ROW><id>14132912</id><snippet>None</snippet></ROW><ROW><id>14133125</id><snippet>def pass_uname_passwd :
    with open('test.csv', 'r') as csvfile:
                spamreader = csv.reader(csvfile, delimiter=',')
                a = [(row[0], row[1]) for row in spamreader] #Make it a list of 2d tuples
                return a
</snippet></ROW><ROW><id>14133125</id><snippet>list = pass_uname_passwd()

for i in list :
#Use as desired, processing each (uname,passwd) at a time
</snippet></ROW><ROW><id>14133277</id><snippet>SELECT DateTime FROM MyTable
ORDER BY CASE WHEN Status IS 'new' THEN 1 ELSE 0 END DESC, DateTime DESC LIMIT 1;
</snippet></ROW><ROW><id>14133277</id><snippet>SELECT mydate FROM MyTable
WHERE type=4
ORDER BY FIELD(status, 'new', 'waited', 'old'), mydate DESC
LIMIT 1;
</snippet></ROW><ROW><id>14133383</id><snippet>frequency.get</snippet></ROW><ROW><id>14133383</id><snippet>frequency.get()</snippet></ROW><ROW><id>14133383</id><snippet>frequency = {"a": 1, "b": 2}
x = frequency.get("a")
</snippet></ROW><ROW><id>14133383</id><snippet>x</snippet></ROW><ROW><id>14133383</id><snippet>1</snippet></ROW><ROW><id>14133383</id><snippet>x = frequency.get
</snippet></ROW><ROW><id>14133383</id><snippet>x</snippet></ROW><ROW><id>14133383</id><snippet>print x("a")
# 1
print x("b")
# 2
</snippet></ROW><ROW><id>14133383</id><snippet>sorted</snippet></ROW><ROW><id>14133533</id><snippet>uwsgi_param</snippet></ROW><ROW><id>14133533</id><snippet>environ</snippet></ROW><ROW><id>14133533</id><snippet>HTTP_</snippet></ROW><ROW><id>14133533</id><snippet>proxy_set_header</snippet></ROW><ROW><id>14133533</id><snippet>uwsgi_param HTTP_X_GEOIP_COUNTRY $geoip_country_code;
</snippet></ROW><ROW><id>14133533</id><snippet>request.environ</snippet></ROW><ROW><id>14133533</id><snippet>request.environ['GEOIP_COUNTRY_CODE']</snippet></ROW><ROW><id>14133768</id><snippet>            outputcsv.writerow([url])
</snippet></ROW><ROW><id>14133837</id><snippet>a**d % n</snippet></ROW><ROW><id>14133837</id><snippet>a**d</snippet></ROW><ROW><id>14133837</id><snippet>a**d % n</snippet></ROW><ROW><id>14133837</id><snippet>a**d</snippet></ROW><ROW><id>14133837</id><snippet>pow</snippet></ROW><ROW><id>14133837</id><snippet>**</snippet></ROW><ROW><id>14134281</id><snippet>writer.writerow(data)</snippet></ROW><ROW><id>14134281</id><snippet>writer.writerow([data])</snippet></ROW><ROW><id>14134281</id><snippet>.writerow</snippet></ROW><ROW><id>14134281</id><snippet>for word in header:
    writer.writerow([word])
</snippet></ROW><ROW><id>14134574</id><snippet>type()</snippet></ROW><ROW><id>14134574</id><snippet>Table</snippet></ROW><ROW><id>14134574</id><snippet>type()</snippet></ROW><ROW><id>14134574</id><snippet>def define_table(columns):
    attrs = dict((c, tables.Column()) for c in columns)
    klass = type('DynamicTable', (tables.Table,), attrs)
    return klass
</snippet></ROW><ROW><id>14134948</id><snippet>current</snippet></ROW><ROW><id>14134948</id><snippet>voltage</snippet></ROW><ROW><id>14134948</id><snippet>float</snippet></ROW><ROW><id>14134948</id><snippet>windowCurrent</snippet></ROW><ROW><id>14134948</id><snippet>windowVoltage</snippet></ROW><ROW><id>14134948</id><snippet>line.split</snippet></ROW><ROW><id>14134961</id><snippet>import lxml.etree as et
html=\
"""
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Hello HTML&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;Hello 1&lt;/p&gt;
    &lt;p&gt;Hello 2&lt;/p&gt;
    &lt;p&gt;Hello 3&lt;/p&gt;
    &lt;p&gt;Hello 4&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
"""
doc = et.fromstring(html)
for i in doc.xpath('.//p[contains(.,"Hello") and not(contains(.,"4"))]'):
    i.text='replaced'
print et.tostring(doc,pretty_print=True)
</snippet></ROW><ROW><id>14134961</id><snippet>&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Hello HTML&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;replaced&lt;/p&gt;
    &lt;p&gt;replaced&lt;/p&gt;
    &lt;p&gt;replaced&lt;/p&gt;
    &lt;p&gt;Hello 4&lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>14135212</id><snippet>tuple</snippet></ROW><ROW><id>14135212</id><snippet>&gt;&gt;&gt; l = [(1, 1, 2), (2, 1, 1), (1, 1, 3), (2, 1, 2)]
&gt;&gt;&gt; sorted(l)
[(1, 1, 2), (1, 1, 3), (2, 1, 1), (2, 1, 2)]
</snippet></ROW><ROW><id>14135351</id><snippet>process_item</snippet></ROW><ROW><id>14135351</id><snippet>class MyImagesPipeline(ImagesPipeline):
    spider = None

    def process_item(self, item, spider):
        setattr(self, 'spider', spider)
        if self.spider.name in ['first']:
            get_media_requests(item, info)
        return item

    def get_media_requests(self, item, info):
        # whatever
</snippet></ROW><ROW><id>14135351</id><snippet>SpiderInfo</snippet></ROW><ROW><id>14135517</id><snippet>class Cache:
     myvar = 1

def foo():
    Cache.myvar = 2
</snippet></ROW><ROW><id>14135517</id><snippet>Cache.myvar</snippet></ROW><ROW><id>14135569</id><snippet>multiprocessing</snippet></ROW><ROW><id>14135569</id><snippet>multiprocessing.Value</snippet></ROW><ROW><id>14135569</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>14135569</id><snippet>l1</snippet></ROW><ROW><id>14135569</id><snippet>l2</snippet></ROW><ROW><id>14135569</id><snippet>l3</snippet></ROW><ROW><id>14135569</id><snippet>multiprocessing</snippet></ROW><ROW><id>14135569</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>14135569</id><snippet>lock=False</snippet></ROW><ROW><id>14135893</id><snippet>PyTuple_MAXSAVESIZE</snippet></ROW><ROW><id>14135893</id><snippet>PyTuple_MAXSAVESIZE</snippet></ROW><ROW><id>14135893</id><snippet>PyTuple_MAXFREELIST</snippet></ROW><ROW><id>14135893</id><snippet>PyTuple_MAXSAVESIZE</snippet></ROW><ROW><id>14135969</id><snippet>size        info...</snippet></ROW><ROW><id>14136192</id><snippet>while moduleName != "-1":</snippet></ROW><ROW><id>14136192</id><snippet>while True:</snippet></ROW><ROW><id>14136192</id><snippet>if moduleName == '-1':
    break
</snippet></ROW><ROW><id>14136192</id><snippet>append</snippet></ROW><ROW><id>14136192</id><snippet>else</snippet></ROW><ROW><id>14136192</id><snippet>while</snippet></ROW><ROW><id>14136192</id><snippet>while</snippet></ROW><ROW><id>14136192</id><snippet>else</snippet></ROW><ROW><id>14136192</id><snippet>student</snippet></ROW><ROW><id>14136192</id><snippet>while True:
    moduleName = raw_input("Please enter module name: ")
    if moduleName == '-1':
        break
    grade = raw_input("Please enter students grade for " + moduleName+": ")
    students.append(student)
</snippet></ROW><ROW><id>14136235</id><snippet>gtk.gdk</snippet></ROW><ROW><id>14136235</id><snippet>from gi.repository import Gdk</snippet></ROW><ROW><id>14136235</id><snippet>gtk.gdk</snippet></ROW><ROW><id>14136235</id><snippet>gtk.gdk.DELETE</snippet></ROW><ROW><id>14136235</id><snippet>Gdk.EventType.DELETE</snippet></ROW><ROW><id>14136235</id><snippet>window.emit('delete-event', Gdk.Event(Gdk.EventType.DELETE))
</snippet></ROW><ROW><id>14136235</id><snippet>window.event(Gdk.Event(Gdk.EventType.DELETE))
</snippet></ROW><ROW><id>14136235</id><snippet>window.destroy()</snippet></ROW><ROW><id>14136235</id><snippet>Gtk.main_quit</snippet></ROW><ROW><id>14136519</id><snippet>&lt;verify&gt;&lt;TestName&gt;[\w\s]+&lt;/TestName&gt;&lt;/verify&gt;
</snippet></ROW><ROW><id>14136519</id><snippet>.......&lt;TestName&gt;ABCd Hijk&lt;/TestName&gt;.....
</snippet></ROW><ROW><id>14136821</id><snippet>'(\w.+) '</snippet></ROW><ROW><id>14136821</id><snippet>+</snippet></ROW><ROW><id>14136821</id><snippet>()</snippet></ROW><ROW><id>14136821</id><snippet>.</snippet></ROW><ROW><id>14136821</id><snippet>   # Extra tail whitepace removed   
   mO = re.search ('([0-9][0-9]:[0-9][0-9]:[0-9][0-9]) (\w*) (\w.+)',s)
</snippet></ROW><ROW><id>14136852</id><snippet>import scraperwiki
import lxml.html

html = scraperwiki.scrape('http://ahr13.mapyourshow.com/5_0/exhibitor_results.cfm?  alpha=%40&amp;type=alpha&amp;page=1')

root = lxml.html.fromstring(html)
# get the links
hrefs = root.xpath('//td[@class="mys-elastic mys-left"]/a')

for href in hrefs:
   print 'http://ahr13.mapyourshow.com' + href.attrib['href'] 
</snippet></ROW><ROW><id>14137002</id><snippet>Y</snippet></ROW><ROW><id>14137002</id><snippet>Y = [["foo", "bar"],          # the first sample is a foo and a bar
     ["foo"],                 # the second is only a foo
     ["bar", "baz"]]          # the third is a bar and a baz
</snippet></ROW><ROW><id>14137002</id><snippet>Y</snippet></ROW><ROW><id>14137002</id><snippet>OneVsRestClassifier</snippet></ROW><ROW><id>14137002</id><snippet>from sklearn.multiclass import OneVsRestClassifier
clf = OneVsRestClassifier(LogisticRegression())
</snippet></ROW><ROW><id>14137002</id><snippet>clf.fit(X, Y)</snippet></ROW><ROW><id>14137002</id><snippet>clf.predict</snippet></ROW><ROW><id>14137316</id><snippet>sub</snippet></ROW><ROW><id>14137316</id><snippet>'date'</snippet></ROW><ROW><id>14137316</id><snippet>df['dif'] = a1.sub(h, fill_value=0)
g = df.groubpy('date')['dif'].sum()
</snippet></ROW><ROW><id>14137316</id><snippet>read_csv</snippet></ROW><ROW><id>14137316</id><snippet>parse_dates</snippet></ROW><ROW><id>14137316</id><snippet>df = pd.read_csv("file.csv",
                 names="date time price mag signal".split()
                 parse_dates=[['date','time']])
</snippet></ROW><ROW><id>14137638</id><snippet>try:
    lock.acquire()
finally:
    lock.release()
</snippet></ROW><ROW><id>14137638</id><snippet>acquire()</snippet></ROW><ROW><id>14137638</id><snippet>release()</snippet></ROW><ROW><id>14137638</id><snippet>acquire()</snippet></ROW><ROW><id>14137638</id><snippet>release()</snippet></ROW><ROW><id>14137638</id><snippet>with</snippet></ROW><ROW><id>14137638</id><snippet>lock.acquire()
try:
    ...
finally:
    lock.release()
</snippet></ROW><ROW><id>14137654</id><snippet>list1</snippet></ROW><ROW><id>14137654</id><snippet>list2</snippet></ROW><ROW><id>14137654</id><snippet>locals()</snippet></ROW><ROW><id>14137654</id><snippet>l1</snippet></ROW><ROW><id>14137654</id><snippet>l2</snippet></ROW><ROW><id>14137654</id><snippet>calculate()</snippet></ROW><ROW><id>14137654</id><snippet>l1[0]</snippet></ROW><ROW><id>14137654</id><snippet>__getitem__</snippet></ROW><ROW><id>14137654</id><snippet>BINARY_SUBSCR</snippet></ROW><ROW><id>14137654</id><snippet>Py_INCREF</snippet></ROW><ROW><id>14137654</id><snippet>Py_DECREF</snippet></ROW><ROW><id>14138065</id><snippet>n = 600851475143
i = 2
while i * i &lt; n:
    while n % i == 0:
        n = n / i
    i = i + 1
print n
</snippet></ROW><ROW><id>14138419</id><snippet>PATH_CELL = 'the path you individuate in document.xml'

docbody = document.xpath('/w:document/w:body'+PATH_CELL, 
namespaces=nsprefixes)[0]

print 'Replacing ...',
docbody = replace(docbody,'Welcome','Hello') 
</snippet></ROW><ROW><id>14138609</id><snippet>@property</snippet></ROW><ROW><id>14138609</id><snippet>@original.getter</snippet></ROW><ROW><id>14138609</id><snippet>.setter</snippet></ROW><ROW><id>14138609</id><snippet>.deleter</snippet></ROW><ROW><id>14138609</id><snippet>@BaseClass.original.getter</snippet></ROW><ROW><id>14138609</id><snippet>&gt;&gt;&gt; class Foo(object):
...     @property
...     def spam(self):
...         print 'Foo.spam called'
...         return 'spam'
...     @spam.setter
...     def spam(self, value):
...         print 'Foo.spam.setter called'
...     @property
...     def ham(self):
...         print 'Foo.ham called'
...         return 'ham'
...     @ham.setter
...     def ham(self, value):
...         print 'Foo.ham.setter called'
... 
&gt;&gt;&gt; class Bar(Foo):
...     @Foo.spam.getter
...     def spam(self):
...         print 'Bar.spam override'
...         return 'eggs and spam'
...     @property
...     def ham(self):
...         print 'Bar.ham override'
...         return 'eggs and ham'
... 
&gt;&gt;&gt; Bar().spam
Bar.spam override
'eggs and spam'
&gt;&gt;&gt; Bar().spam = 'foo'
Foo.spam.setter called
&gt;&gt;&gt; Bar().ham
Bar.ham override
'eggs and ham'
&gt;&gt;&gt; Bar().ham = 'foo'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: can't set attribute
</snippet></ROW><ROW><id>14138609</id><snippet>spam</snippet></ROW><ROW><id>14138609</id><snippet>Bar.ham</snippet></ROW><ROW><id>14138609</id><snippet>Foo.ham</snippet></ROW><ROW><id>14138696</id><snippet>def get_db_prep_value(self, value, connection, prepared=False)</snippet></ROW><ROW><id>14138696</id><snippet>*args, **kwargs</snippet></ROW><ROW><id>14138727</id><snippet>lastentry</snippet></ROW><ROW><id>14138727</id><snippet>func1</snippet></ROW><ROW><id>14138727</id><snippet>func2</snippet></ROW><ROW><id>14138727</id><snippet>lastentry = "something"

def func1():
    global lastentry #tell python to treat references to lastentry as global
    lastentry = "somethingelse"
</snippet></ROW><ROW><id>14139221</id><snippet>tuple()</snippet></ROW><ROW><id>14139228</id><snippet>&gt;&gt;&gt; x = 8
&gt;&gt;&gt; if x in (1, 2, 3, 5, 8, 13, 21, 34, 55):
        print('x is an early Fibonacci number')
x is an early Fibonacci number
</snippet></ROW><ROW><id>14139249</id><snippet>pythonw</snippet></ROW><ROW><id>14139800</id><snippet>import smtplib
from email.mime.text import MIMEText

# define content
recipients = ["recipient_id@yahoo.com"]
sender = "sender_id@gmail.com"
subject = "report reminder"
body = """
Dear Student,
Please send your report
Thank you for your attention
"""

# make up message
msg = MIMEText(body)
msg['Subject'] = subject
msg['From'] = sender
msg['To'] = ", ".join(recipients)

# sending
session = smtplib.SMTP('smtp.gmail.com', 587)
session.ehlo()
session.starttls()
session.ehlo
session.login(sender, 'my password')
send_it = session.sendmail(sender, recipients, msg.as_string())
session.quit()
</snippet></ROW><ROW><id>14139878</id><snippet>matplotlib.pyplot.axvline()</snippet></ROW><ROW><id>14139878</id><snippet>import matplotlib.pyplot as plt

plt.figure()
plt.axvline(x=0.2)
plt.axvline(x=0.5)
plt.show()
</snippet></ROW><ROW><id>14139914</id><snippet>virtualenv</snippet></ROW><ROW><id>14139914</id><snippet>-p</snippet></ROW><ROW><id>14139914</id><snippet>PYTHON_EXE</snippet></ROW><ROW><id>14140232</id><snippet>while True:
        moduleName = raw_input("Please enter module name: ") 
        if moduleName == "-1":
            break
        grade = raw_input ("Please enter students grade for " + moduleName+": ")
</snippet></ROW><ROW><id>14140232</id><snippet>modules = []

while True:
        moduleName = raw_input("Please enter module name: ") 
        if moduleName == "-1":
            break
        grade = raw_input ("Please enter students grade for " + moduleName+": ")
        modules.append((moduleName, grade))
</snippet></ROW><ROW><id>14140232</id><snippet>student</snippet></ROW><ROW><id>14140232</id><snippet>modules</snippet></ROW><ROW><id>14140232</id><snippet>(moduleName, grade)</snippet></ROW><ROW><id>14140232</id><snippet>viewstudent</snippet></ROW><ROW><id>14140232</id><snippet>        print "Module: " + person.getModuleName()
        print "Grades: " + person.getGrade()
</snippet></ROW><ROW><id>14140232</id><snippet>for module, grade in person.getModules():
       print "Module: " + module
       print "Grades: " + grade
</snippet></ROW><ROW><id>14140339</id><snippet>ignore</snippet></ROW><ROW><id>14140339</id><snippet>b 9
Breakpoint 2 at ...
ignore 1 1000
Will ignore next 1000 crossings of breakpoint 1.
c
</snippet></ROW><ROW><id>14140783</id><snippet>'\x1b[92m'</snippet></ROW><ROW><id>14140783</id><snippet>print repr(line)</snippet></ROW><ROW><id>14140783</id><snippet>\x1b</snippet></ROW><ROW><id>14140796</id><snippet>pil_image = PIL.Image.open('Image.jpg').convert('RGB') 
open_cv_image = numpy.array(pil_image) 
# Convert RGB to BGR 
open_cv_image = open_cv_image[:, :, ::-1].copy() 
</snippet></ROW><ROW><id>14140809</id><snippet># Setting PATH for EPD_free-7.3-2
# The orginal version is saved in .bash_profile.pysave
PATH="/Library/Frameworks/Python.framework/Versions/Current/bin:/Users/LMS/Documents/pydata-book:/Users/LMS/Documents/python_scripts:${PATH}"

export PATH
</snippet></ROW><ROW><id>14141217</id><snippet>display</snippet></ROW><ROW><id>14141217</id><snippet>pow</snippet></ROW><ROW><id>14141217</id><snippet>   powF = frame(self, BOTTOM)
   button(powF, LEFT, 'pow', lambda w=display: w.set(pow(float(w.get()),2)))
</snippet></ROW><ROW><id>14141345</id><snippet>glob.glob</snippet></ROW><ROW><id>14141345</id><snippet>os.listdir</snippet></ROW><ROW><id>14141345</id><snippet>os.walk</snippet></ROW><ROW><id>14141345</id><snippet>def check_file_for_string(filename,string):
    with open(filename) as fin:
         return string in fin.read()
</snippet></ROW><ROW><id>14141345</id><snippet>os.remove</snippet></ROW><ROW><id>14141345</id><snippet>os.unlink</snippet></ROW><ROW><id>14141345</id><snippet>check_file_for_string</snippet></ROW><ROW><id>14141345</id><snippet>True</snippet></ROW><ROW><id>14141473</id><snippet>scope :older_than_one_year, where('date &lt; ?', 1.year.ago)
</snippet></ROW><ROW><id>14141563</id><snippet>subq = self.session.query(DataMeasurement).\
    filter_by(data_source='Sensor1').subquery()
q = self.session.query(
    DataMeasurement.timestamp,
    # Use labels to distinguish between identically named columns.
    # This is optional.
    subq.c.sensor_output.label('output1'),
    DataMeasurement.sensor_output.label('output2')
).filter(
    (DataMeasurement.data_source == 'Sensor2') &amp;
    (DataMeasurement.timestamp == subq.c.timestamp)
)

# Simply get a list of named tuples.
print q.all()
# Or access each column using properties.
for row in q:
    print row.timestamp, row.output1, row.output2
</snippet></ROW><ROW><id>14141563</id><snippet>DataMeasurement</snippet></ROW><ROW><id>14141563</id><snippet>subq = self.session.query(DataMeasurement).\
    filter_by(data_source='Sensor1').subquery()
# Use alias to associate mapped class to a subquery.
dmalias = aliased(DataMeasurement, subq)
q = self.session.query(dmalias, DataMeasurement).filter(
    (DataMeasurement.data_source == 'Sensor2') &amp;
    (DataMeasurement.timestamp == dmalias.timestamp)
)

# For each row you get a tuple containing two DataMeasurement objects.
for dm1, dm2 in q:
    print dm1.timestamp, dm1.sensor_output, dm2.sensor_output
</snippet></ROW><ROW><id>14142004</id><snippet># coding: utf-8
import numpy as np
from matplotlib.pyplot import imshow,show

A=np.empty((64,64,64)) #This is the data array
def f(x,y):
    return np.sin(x/(2*np.pi))+np.cos(y/(2*np.pi))
xx,yy= np.meshgrid(range(64), range(64))
for x in range(64):
    A[:,:,x]=f(xx,yy)*np.cos(x/np.pi)

N=np.zeros((64,64)) 
"""This is the plane we cut from A. 
It should be larger than 64, due to diagonal planes being larger. 
Will be fixed."""

normal=np.array([-1,-1,1]) #Define cut plane here. Normal vector components restricted to integers
point=np.array([0,0,0])
d = -np.sum(point*normal)

def plane(x,y): # Get plane's z values
    return (-normal[0]*x-normal[1]*y-d)/normal[2]

def getZZ(x,y): #Get z for all values x,y. If z&gt;64 it's out of range
    for i in x:
        for j in y:
            if plane(i,j)&lt;64:
                N[i,j]=A[i,j,plane(i,j)]

getZZ(range(64),range(64))
imshow(N, interpolation="Nearest")
show()
</snippet></ROW><ROW><id>14142372</id><snippet>token   = cookies['token'].value #this will not exist
</snippet></ROW><ROW><id>14142611</id><snippet>execute()</snippet></ROW><ROW><id>14142611</id><snippet>IN (id1, id2, id3)</snippet></ROW><ROW><id>14142611</id><snippet>cur.execute('SELECT * FROM Genre WHERE id in ({0})'.format(', '.join('?' for _ in ids)), ids)
</snippet></ROW><ROW><id>14142616</id><snippet>fields.py</snippet></ROW><ROW><id>14142616</id><snippet>django.contrib</snippet></ROW><ROW><id>14142616</id><snippet>models.py</snippet></ROW><ROW><id>14142616</id><snippet>fields.py</snippet></ROW><ROW><id>14142616</id><snippet>views.py</snippet></ROW><ROW><id>14142616</id><snippet>middleware.py</snippet></ROW><ROW><id>14142665</id><snippet> def get_expr_id(e):
     return Z3_get_ast_id(e.ctx.ref(), e.ast)

 def is_term_aux(a, seen):
    if get_expr_id(a) in seen:
        return True
    else:
        seen[get_expr_id(a)] = True
        r = (is_app(a) and \
             a.decl().kind() not in CONNECTIVE_OPS + REL_OPS and \
             all(is_term_aux(c, seen) for c in a.children()))
        return r

 def is_term(a):
     return is_term_aux(a, {})
</snippet></ROW><ROW><id>14142901</id><snippet>ifchanged</snippet></ROW><ROW><id>14142901</id><snippet>regroup</snippet></ROW><ROW><id>14143152</id><snippet>dates</snippet></ROW><ROW><id>14143152</id><snippet>bisect</snippet></ROW><ROW><id>14143152</id><snippet>&gt;&gt;&gt; import bisect
&gt;&gt;&gt; bisect.bisect_right(dates, datetime.datetime(2007,1,3))
1
&gt;&gt;&gt; bisect.bisect_left(dates, datetime.datetime(2007,1,6))
4
</snippet></ROW><ROW><id>14143152</id><snippet>.bisect_*</snippet></ROW><ROW><id>14143152</id><snippet>dates</snippet></ROW><ROW><id>14143152</id><snippet>&gt;&gt;&gt; lower = bisect.bisect_right(dates, datetime.datetime(2007,1,3))
&gt;&gt;&gt; upper = bisect.bisect_left(dates, datetime.datetime(2007,1,6))
&gt;&gt;&gt; mask = dates[lower:upper]
&gt;&gt;&gt; mask
[datetime.datetime(2007, 1, 3, 0, 2), datetime.datetime(2007, 1, 4, 0, 3), datetime.datetime(2007, 1, 5, 0, 4)]
</snippet></ROW><ROW><id>14143156</id><snippet>vector</snippet></ROW><ROW><id>14143156</id><snippet>distance</snippet></ROW><ROW><id>14143156</id><snippet>vector</snippet></ROW><ROW><id>14143156</id><snippet>diff</snippet></ROW><ROW><id>14143156</id><snippet>d^2 = dx^2 + dy^2
d = sqrt(dx^2 + dy^2)
</snippet></ROW><ROW><id>14143156</id><snippet>distance</snippet></ROW><ROW><id>14143156</id><snippet>diff</snippet></ROW><ROW><id>14143156</id><snippet>distance = math.sqrt(diff[0]**2, diff[1]**2) # instead of `vector = ...`
diff_norm = (diff[0] / distance, diff[1] / distance) # instead of `distance = ...`
</snippet></ROW><ROW><id>14143156</id><snippet>distance</snippet></ROW><ROW><id>14143156</id><snippet>vector</snippet></ROW><ROW><id>14143156</id><snippet>diff_norm</snippet></ROW><ROW><id>14143156</id><snippet>diff_norm</snippet></ROW><ROW><id>14143156</id><snippet>(self.xPos, self.yPos)</snippet></ROW><ROW><id>14143156</id><snippet>(self.xPos, self.yPos) == mouse_pos</snippet></ROW><ROW><id>14143156</id><snippet>if distance &lt;= 2: return
</snippet></ROW><ROW><id>14143156</id><snippet>diff_norm</snippet></ROW><ROW><id>14143156</id><snippet>self.xPos -= diff[0]
self.yPos -= diff[1]
</snippet></ROW><ROW><id>14143197</id><snippet>scene = GameLogic.getCurrentScene();
pingMeter = scene.objects['Ping Meter'];
red = mathutils.Vector((1.0, 0.0, 0.0, 1.0));
pingMeter.color = red;
</snippet></ROW><ROW><id>14143197</id><snippet>Object Color</snippet></ROW><ROW><id>14143197</id><snippet>Vertex Color Paint</snippet></ROW><ROW><id>14143229</id><snippet>&gt;&gt;&gt; '%0.10f'% 6.1248979238e-05 
'0.0000612490'
</snippet></ROW><ROW><id>14143229</id><snippet>&gt;&gt;&gt; '{:.10f}'.format(6.1248979238e-05)
'0.0000612490'
</snippet></ROW><ROW><id>14143229</id><snippet>&gt;&gt;&gt; '{0:.10f}'.format(6.1248979238e-05)
'0.0000612490'
</snippet></ROW><ROW><id>14143662</id><snippet>DEFAULT</snippet></ROW><ROW><id>14143662</id><snippet>CREATE TABLE FOO (
    BAR TEXT DEFAULT "N/A"
)
</snippet></ROW><ROW><id>14143662</id><snippet>TABLE</snippet></ROW><ROW><id>14143733</id><snippet>user.entities.filter_by(id=X)
</snippet></ROW><ROW><id>14143733</id><snippet>user = dbsession.query(User).get(session["userID"])</snippet></ROW><ROW><id>14144078</id><snippet>@register.assignment_tag
def zip_tag(arg1, arg2):
    return zip(arg1, arg2)
</snippet></ROW><ROW><id>14144078</id><snippet>{% zip_tag arg1 arg2 as zipped %}
&lt;ul&gt;
{% for x, y in zipped %}
  &lt;li&gt;x, y&lt;li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>14144100</id><snippet>k</snippet></ROW><ROW><id>14144100</id><snippet>l = dict(locals())</snippet></ROW><ROW><id>14144422</id><snippet>1,`Flat 5, Park Street`
</snippet></ROW><ROW><id>14144422</id><snippet>import csv

with open('14144315.csv', 'rb') as csvfile:
    rowreader = csv.reader(csvfile, delimiter=',', quotechar='`')
    for row in rowreader:
        print row
</snippet></ROW><ROW><id>14144422</id><snippet>['1', 'Flat 5, Park Street']
</snippet></ROW><ROW><id>14144496</id><snippet>import sys

sys.setrecursionlimit(5000)
</snippet></ROW><ROW><id>14144496</id><snippet>Set the maximum depth of the Python interpreter stack to limit. 
This limit prevents infinite recursion from causing an overflow of the C 
stack and crashing Python.
The highest possible limit is platform-dependent. A user may need to set the
limit higher when she  has a program that requires deep recursion and a 
platform that supports a higher limit. This should bedone with care, because
a too-high limit can lead to a crash.
</snippet></ROW><ROW><id>14144582</id><snippet>x1 = [14, 1, 16, 4, 153, 21]
x2 = [14, 2, 16, 3, 18, 9]

# turn into dictionaries (could write a function to convert)
d1 = dict([(x1[i], x1[i + 1]) for i in range(0, len(x1), 2)])
d2 = dict([(x2[i], x2[i + 1]) for i in range(0, len(x2), 2)])

print d1
# {16: 4, 153: 21, 14: 1}
</snippet></ROW><ROW><id>14144582</id><snippet>import collections

def d_sum(a, b):
    d = collections.defaultdict(int, a)
    for k, v in b.items():
        d[k] += v
    return dict(d)

print d_sum(d1, d2)
# {16: 7, 153: 21, 18: 9, 14: 3}
</snippet></ROW><ROW><id>14144631</id><snippet>QNetworkAccessManager.setCookieJar</snippet></ROW><ROW><id>14144631</id><snippet>QNetworkCookieJar</snippet></ROW><ROW><id>14144631</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtGui, QtCore, QtWebKit, QtNetwork

cookieJar = QtNetwork.QNetworkCookieJar()

networkAccessManager = QtNetwork.QNetworkAccessManager()
networkAccessManager.setCookieJar(cookieJar)

class myWebView(QtWebKit.QWebView):
    _windows = set()

    def __init__(self, parent=None):
        super(myWebView, self).__init__(parent)
        self.settings().setAttribute(QtWebKit.QWebSettings.JavascriptEnabled, True)
        self.settings().setAttribute(QtWebKit.QWebSettings.JavascriptCanOpenWindows, True)

        self.page().setNetworkAccessManager(networkAccessManager)

        self.load(QtCore.QUrl("http://www.example.com"))

    @classmethod
    def _removeWindow(cls, window):
        if window in cls._windows:
            cls._windows.remove(window)

    @classmethod
    def newWindow(cls):
        window = cls()
        cls._windows.add(window)
        return window

    def closeEvent(self, event):
        self._removeWindow(self)
        event.accept()

    def createWindow(self, webWindowType):
        window = self.newWindow()
        if webWindowType == QtWebKit.QWebPage.WebModalDialog:
            window.setWindowModality(QtCore.Qt.ApplicationModal)

        window.show()

        return window

class myWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(myWindow, self).__init__(parent)

        self.centralwidget = QtGui.QWidget(self)

        self.webView = myWebView(self.centralwidget)

        self.pushButton = QtGui.QPushButton(self.centralwidget)
        self.pushButton.setText("New Window")
        self.pushButton.clicked.connect(lambda: self.webView.createWindow(QtWebKit.QWebPage.WebBrowserWindow))

        self.verticalLayout = QtGui.QVBoxLayout(self.centralwidget)
        self.verticalLayout.addWidget(self.pushButton)
        self.verticalLayout.addWidget(self.webView)

        self.setCentralWidget(self.centralwidget)

if __name__ == "__main__":
    import  sys

    app  = QtGui.QApplication(sys.argv)
    main = myWindow()
    main.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14144640</id><snippet>import urllib2
import re
data = urllib2.urlopen('http://marvel.wikia.com/api.php?action=query&amp;prop=revisions&amp;titles=All-New%20X-Men%20Vol%201%201&amp;rvprop=content')
regex = re.compile('(Writer1_1|Penciler1_1)')
for line in data.read().split('|'):
    if regex.search(line):
        #assume everything after = is the full name
        print ' '.join(line.split()[2:])
</snippet></ROW><ROW><id>14144774</id><snippet>count,Gender,Age,Location,Name 
24,Female,25-34,Edinburgh,abcde
</snippet></ROW><ROW><id>14144774</id><snippet>scrapy crawl dmoz -o items.csv -t csv
</snippet></ROW><ROW><id>14144774</id><snippet>include_headers_line</snippet></ROW><ROW><id>14144816</id><snippet>is</snippet></ROW><ROW><id>14144816</id><snippet>==</snippet></ROW><ROW><id>14144816</id><snippet>__eq__()</snippet></ROW><ROW><id>14144816</id><snippet>is</snippet></ROW><ROW><id>14144816</id><snippet>==</snippet></ROW><ROW><id>14145118</id><snippet>next()</snippet></ROW><ROW><id>14145118</id><snippet>next()</snippet></ROW><ROW><id>14145118</id><snippet>readline()</snippet></ROW><ROW><id>14145118</id><snippet>seek()</snippet></ROW><ROW><id>14145118</id><snippet>.tell()</snippet></ROW><ROW><id>14145118</id><snippet>.readline()</snippet></ROW><ROW><id>14145118</id><snippet>for line in iter(f.readline, ''):
    print f.tell()
</snippet></ROW><ROW><id>14145118</id><snippet>iter()</snippet></ROW><ROW><id>14145118</id><snippet>sentinel</snippet></ROW><ROW><id>14145325</id><snippet>"abcd"</snippet></ROW><ROW><id>14145325</id><snippet>"abcd"</snippet></ROW><ROW><id>14145361</id><snippet>list comprehension</snippet></ROW><ROW><id>14145361</id><snippet>In [66]: with open("data.txt") as f:
    print [[line[0:i+1] for i in range(len(line))] for line in f]
   ....:     
[['L', 'Li', 'Lin', 'Line', 'Line ', 'Line 1', 'Line 1\n'], 
 ['L', 'Li', 'Lin', 'Line', 'Line ', 'Line 2', 'Line 2\n'],
 ['L', 'Li', 'Lin', 'Line', 'Line ', 'Line 3', 'Line 3\n']]
</snippet></ROW><ROW><id>14145557</id><snippet>ValueError: could not convert string to float:
</snippet></ROW><ROW><id>14145557</id><snippet>gene_array=[float(e) for e in gene_array if e]
phen_array=[float(e) for e in phen_array if e]
</snippet></ROW><ROW><id>14145557</id><snippet>float(" ")</snippet></ROW><ROW><id>14145557</id><snippet>float("")</snippet></ROW><ROW><id>14145557</id><snippet>gene_array</snippet></ROW><ROW><id>14145557</id><snippet>phen_array</snippet></ROW><ROW><id>14145686</id><snippet>my_halfedge</snippet></ROW><ROW><id>14145686</id><snippet>vertex</snippet></ROW><ROW><id>14145686</id><snippet>my_halfedge.vertex</snippet></ROW><ROW><id>14145747</id><snippet>Dowser</snippet></ROW><ROW><id>14145804</id><snippet>instance = {"project":"platform/vendor/company-proprietary/radio","branch":"master","id":"I2d46a51ea94d66eefe044e633b15c6eaa7dbb2af","number":"147441","subject":"radio: Update radio driver version","owner":{"name":"Shailender bary","email":"bary@ca.company.com","username":"bary"},"url":"https://company/147441","commitMessage":"radio: Update radio driver version\n\nUpdate radio driver version for the FC release\n\nChange-Id: I2d46a51ea94d66eefe044e633b15c6eaa7dbb2af\n","createdOn":1344628179,"lastUpdated":1357170699,"sortKey":"00222ad700023ff1","open":true,"status":"NEW","currentPatchSet":{"number":"2","revision":"18bb2f7af0dc7cad7b3959c23d886a1a48c8f728","parents":["96968973a0dfa1ce105cdec7c91d3304af0d8393"],"ref":"refs/changes/41/147441/2","uploader":{"name":"Shailender bary","email":"bary@ca.company.com","username":"bary"},"createdOn":1344628312,"approvals":[{"type":"VRIF","description":"Verified","value":"-1","grantedOn":1344654401,"by":{"name":"Linux Build Service Account","email":"lnxbuild@localhost","username":"lnxbuild"}},{"type":"CRVW","description":"Code Review","value":"-2","grantedOn":1357170699,"by":{"name":"tom Johnson","email":"jjohnson@ca.company.com","username":"jjohnson"}},{"type":"CRVW","description":"Code Review","value":"1","grantedOn":1344628453,"by":{"name":"Shailender bary","email":"bary@ca.company.com","username":"bary"}},{"type":"TEST","description":"Developer Verified","value":"1","grantedOn":1344628453,"by":{"name":"Shailender bary","email":"bary@ca.company.com","username":"bary"}},{"type":"CRVW","description":"Code Review","value":"2","grantedOn":1344629368,"by":{"name":"johnb Bhatia","email":"johnbb@ca.company.com","username":"johnbb"}}],"files":[{"file":"/COMMIT_MSG","type":"ADDED"},{"file":"rime/CORE/MAC/inc/qradio_version.h","type":"MODIFIED"}]}}


#Say data is the dictionary you want to save the data to.
data = {}

def sanitize_data(variable):
    """ A simple function to sanitize data"""
    instance_data = {}

    level_one = ("url", "commitMessage")
    level_two = ("name", "email")

    for x in level_one:
        instance_data[x] = variable[x]

    for x in level_two:
        instance_data[x] = variable["owner"][x]

    index = len(data)
    data[index] = instance_data
    print data


&gt;&gt;&gt;sanitize_data(instance)
{0: {'url': 'https://company/147441', 'commitMessage': 'radio: Update radio driver version\n\nUpdate radio driver', 'name': 'Shailenderbary', 'email': 'bary@ca.company.com'}}
</snippet></ROW><ROW><id>14145810</id><snippet>db.relationship()</snippet></ROW><ROW><id>14145810</id><snippet>Person</snippet></ROW><ROW><id>14145810</id><snippet>WorkGroup</snippet></ROW><ROW><id>14145810</id><snippet>backref</snippet></ROW><ROW><id>14145810</id><snippet>Person</snippet></ROW><ROW><id>14145810</id><snippet>WorkGroup</snippet></ROW><ROW><id>14145810</id><snippet>workgroup_id</snippet></ROW><ROW><id>14145810</id><snippet>Person</snippet></ROW><ROW><id>14145810</id><snippet>members_id</snippet></ROW><ROW><id>14145810</id><snippet>members</snippet></ROW><ROW><id>14145810</id><snippet>WorkGroup</snippet></ROW><ROW><id>14145810</id><snippet>CircularDependencyError</snippet></ROW><ROW><id>14145810</id><snippet>prevPairings_id</snippet></ROW><ROW><id>14145810</id><snippet>post_update=True</snippet></ROW><ROW><id>14145810</id><snippet>prevPairings</snippet></ROW><ROW><id>14145810</id><snippet>class Person(db.Model):
    # ...
    workgroup_id = db.Column(db.Integer, db.ForeignKey('workgroup.id'))
    # No need to set uselist=False, it will be determined automatically by
    # type of relationship (many-to-one in this case).
    workGroup = db.relationship("WorkGroup", backref='members')
    # ...
    prevPairings = db.relationship('Person', post_update=True)
    # ...

class WorkGroup(db.Model):
    # ...
    # Removed members_id and members.
    # ...
</snippet></ROW><ROW><id>14146031</id><snippet>from requests.adapters import HTTPAdapter
from requests.packages.urllib3.poolmanager import PoolManager
import ssl

class MyAdapter(HTTPAdapter):
    def init_poolmanager(self, connections, maxsize, block=False):
        self.poolmanager = PoolManager(num_pools=connections,
                                       maxsize=maxsize,
                                       block=block,
                                       ssl_version=ssl.PROTOCOL_TLSv1)
</snippet></ROW><ROW><id>14146031</id><snippet>import requests
s = requests.Session()
s.mount('https://', MyAdapter())
</snippet></ROW><ROW><id>14146142</id><snippet>a = 5</snippet></ROW><ROW><id>14146142</id><snippet>global</snippet></ROW><ROW><id>14146142</id><snippet>a = 5</snippet></ROW><ROW><id>14146142</id><snippet>a</snippet></ROW><ROW><id>14146142</id><snippet>global a; a = 5</snippet></ROW><ROW><id>14146142</id><snippet>global</snippet></ROW><ROW><id>14146151</id><snippet>test_app.py</snippet></ROW><ROW><id>14146151</id><snippet>from flask import Flask, g

app = Flask(__name__)

def connect_db():
    print 'I ended up inside the actual function'
    return object()

@app.before_request
def before_request():
    g.db = connect_db()


@app.route('/')
def root():
    return 'Hello, World'
</snippet></ROW><ROW><id>14146151</id><snippet>test.py</snippet></ROW><ROW><id>14146151</id><snippet>from mock import patch
import unittest

from test_app import app


def not_a_db_hit():
    print 'I did not hit the db'

class FlaskTest(unittest.TestCase):

    @patch('test_app.connect_db')
    def test_root(self, mock_connect_db):
        mock_connect_db.side_effect = not_a_db_hit
        response = app.test_client().get('/')
        self.assertEqual(response.status_code, 200)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>14146202</id><snippet>bson.BSON.encode</snippet></ROW><ROW><id>14146202</id><snippet>__dict__</snippet></ROW><ROW><id>14146202</id><snippet>&gt;&gt;&gt; import bson
&gt;&gt;&gt; class Example(object):
...     def __init__(self):
...             self.a = 'a'
...             self.b = 'b'
...     def set_c(self, c):
...             self.c = c
... 
&gt;&gt;&gt; e = Example()
&gt;&gt;&gt; e
&lt;__main__.Example object at 0x7f9448fa9150&gt;
&gt;&gt;&gt; e.__dict__
{'a': 'a', 'b': 'b'}
&gt;&gt;&gt; e.set_c(123)
&gt;&gt;&gt; e.__dict__
{'a': 'a', 'c': 123, 'b': 'b'}
&gt;&gt;&gt; bson.BSON.encode(e.__dict__)
'\x1e\x00\x00\x00\x02a\x00\x02\x00\x00\x00a\x00\x10c\x00{\x00\x00\x00\x02b\x00\x02\x00\x00\x00b\x00\x00'
&gt;&gt;&gt; bson.BSON.encode(e)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python2.7/dist-packages/bson/__init__.py", line 566, in encode
    return cls(_dict_to_bson(document, check_keys, uuid_subtype))
TypeError: encoder expected a mapping type but got: &lt;__main__.Example object at         0x7f9448fa9150&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14146270</id><snippet>import socket
request = b"GET / HTTP/1.1\nHost: stackoverflow.com\n\n"
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect(("stackoverflow.com", 80))
s.send(request)
result = s.recv(10000)
while (len(result) &gt; 0):
    print(result)
    result = s.recv(10000)   
</snippet></ROW><ROW><id>14146304</id><snippet>context.triangles</snippet></ROW><ROW><id>14146304</id><snippet>triangles</snippet></ROW><ROW><id>14146304</id><snippet>vertices</snippet></ROW><ROW><id>14146304</id><snippet>p</snippet></ROW><ROW><id>14146304</id><snippet>edges</snippet></ROW><ROW><id>14146304</id><snippet>from voronoi import voronoi
import random
from collections import defaultdict

num_points = 50
points = [(random.uniform(0,10), random.uniform(0,10)) for i in xrange(num_points)]
c = voronoi(points)

# For each point find triangles (vertices) of a cell
point_in_triangles = defaultdict(set)
for t_ind, ps in enumerate(c.triangles):
    for p in ps:
        point_in_triangles[p].add(t_ind)

# Vertex connectivity graph
vertex_graph = defaultdict(set)
for e_ind, (_, r, l) in enumerate(c.edges):
    vertex_graph[r].add(l)
    vertex_graph[l].add(r)

def cell(point):
    if point not in point_in_triangles:
        return None
    vertices = set(point_in_triangles[point]) # copy
    v_cell = [vertices.pop()]
    vertices.add(-1)  # Simulate infinity :-)
    while vertices:
        neighbours = vertex_graph[v_cell[-1]] &amp; vertices
        if not neighbours:
            break
        v_cell.append(neighbours.pop())
        vertices.discard(v_cell[-1])
    return v_cell

for p in xrange(num_points):
    print p, cell(p)
</snippet></ROW><ROW><id>14146385</id><snippet>from django.views.generic import UpdateView
from myapp.forms import InfoForm
urlpatterns = patterns('',
    url(r'^info/(?P&lt;pk&gt;[-_\w]+)/update/$', UpdateView.as_view(model= Info,template_name="hello/home.html",form_class=InfoForm), name='info_update'), 
)
# you might need to include a success url in the **kwargs i.e. success_url="/thankyou/"
</snippet></ROW><ROW><id>14146551</id><snippet>import re
test = '"Properties" : { "Col_Row": "1 - 145", ... "Col_Row": "130 - 240" ... }}'
def repl(m):
  num = "%d%d" % (int(m.group(1))+1000,int(m.group(2))+1000)
  string = '"Geo_ID": "%s", "Col_Row": "%s - %s",' % (num,m.group(1),m.group(2))
  return string
output = re.sub(r'"Col_Row": "(.*?) - (.*?)",', repl, test)
</snippet></ROW><ROW><id>14146551</id><snippet>'"Properties" : { "Geo_ID": "10011145", "Col_Row": "1 - 145", ... "Geo_ID": "11301240", "Col_Row": "130 - 240" ... }}'</snippet></ROW><ROW><id>14146551</id><snippet>input = open('fishnet.json','r')
input_list = input.readlines()
output = open('updated.json','w')
for line in input_list:
  updated = re.sub(r'"Col_Row": "(.*?) - (.*?)",', repl, line)  
  output.write(updated)
output.close()
input.close()
</snippet></ROW><ROW><id>14146575</id><snippet>nohup</snippet></ROW><ROW><id>14146575</id><snippet>nohup</snippet></ROW><ROW><id>14146575</id><snippet>cron</snippet></ROW><ROW><id>14146575</id><snippet>nohup scrapy crawl first &amp;
</snippet></ROW><ROW><id>14146575</id><snippet>scrapy crawl first &gt; first.txt &amp;
</snippet></ROW><ROW><id>14146575</id><snippet>hup</snippet></ROW><ROW><id>14146762</id><snippet>cmap</snippet></ROW><ROW><id>14146762</id><snippet> plt.scatter(...,cmap='hot')
</snippet></ROW><ROW><id>14146762</id><snippet>from pylab import *
from numpy import outer
rc('text', usetex=False)
a=outer(arange(0,1,0.01),ones(10))
figure(figsize=(10,5))
subplots_adjust(top=0.8,bottom=0.05,left=0.01,right=0.99)
maps=[m for m in cm.datad if not m.endswith("_r") ]
maps.sort()
l=len(maps)+1
for i, m in enumerate(maps):
    subplot(1,l,i+1)
    axis("off")
    imshow(a,aspect='auto',cmap=get_cmap(m),origin="lower")
    title(m,rotation=90,fontsize=10)
</snippet></ROW><ROW><id>14146785</id><snippet>Level_2_Heading</snippet></ROW><ROW><id>14146785</id><snippet>all()</snippet></ROW><ROW><id>14146785</id><snippet>Level_2_Headings.all()</snippet></ROW><ROW><id>14146785</id><snippet>ancestor</snippet></ROW><ROW><id>14146785</id><snippet>q2</snippet></ROW><ROW><id>14146785</id><snippet>q2 = Level_2_Headings.all().ancestor(q.key()).filter("name2 =",heading2).get()
</snippet></ROW><ROW><id>14146938</id><snippet>connect</snippet></ROW><ROW><id>14146938</id><snippet>netcat</snippet></ROW><ROW><id>14146938</id><snippet>telnet</snippet></ROW><ROW><id>14146938</id><snippet>abarnert$ nc -v localhost 111
nc: connect to localhost port 111 (tcp) failed: Connection refused
nc: connect to localhost port 111 (tcp) failed: Connection refused
nc: connect to localhost port 111 (tcp) failed: Connection refused
</snippet></ROW><ROW><id>14146938</id><snippet>bind((gethostname(), 111))</snippet></ROW><ROW><id>14146938</id><snippet>10.0.0.3:111</snippet></ROW><ROW><id>14146938</id><snippet>serversocket.bind(('', 111))
</snippet></ROW><ROW><id>14147120</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; conn = sqlite3.connect(FILENAME)
&gt;&gt;&gt; cur = conn.cursor()
&gt;&gt;&gt; cur.execute("PRAGMA cache_size = -512") # Negative value means use N * 1024 bytes of memory.
&lt;sqlite3.Cursor object at 0x01F14260&gt;
</snippet></ROW><ROW><id>14147188</id><snippet>InitOnceExecuteOnce</snippet></ROW><ROW><id>14147200</id><snippet>def recur(n):
    n.append(len(n))
    print '&gt;',n
    if n[-1]&lt;5: recur(n[:])  # &lt;&lt;&lt;&lt; Note the [:]
    print '&lt;',n
</snippet></ROW><ROW><id>14147439</id><snippet>str.splitines()</snippet></ROW><ROW><id>14147439</id><snippet>str.split()</snippet></ROW><ROW><id>14147439</id><snippet>In [126]: strs="""A1023 CRT
   .....: A1029 Regulator
   .....: A1030 Therm"""

In [127]: dict(x.split() for x in strs.splitlines())
Out[127]: {'A1023': 'CRT', 'A1029': 'Regulator', 'A1030': 'Therm'}
</snippet></ROW><ROW><id>14147615</id><snippet>import json
import requests

# protected
_accessCode = "someaccesscode"
_accessStr = "?access_token=" + _accessCode
_myID = "someidnumber"

r = requests.get("https://graph.facebook.com/" 
    + _myID + "/friends/" + _accessStr)
raw = json.loads(r.text)

terminate = len(raw["data"])

a = list()
for k in range(0, terminate - 1):
    friendID = raw["data"][k]["id"]
    friendName = raw["data"][k]["name"]
    url = ("https://graph.facebook.com/me/mutualfriends/" 
        + friendID + _accessStr)
    req = requests.get(url)
    temp = json.loads(req.text)
    print("Processing: " + str(k + 1) + " of " + str(terminate))
    for j in range(0, len(temp["data"])):
        a.append(friendID + "," + temp["data"][j]["id"] + "," 
            + friendName + "," + temp["data"][j]["name"])

# dump contents to file:
outputFile = "C:/Users/franklin/Documents/gen/friendsRaw.csv"
output = open(outputFile, "w")
print("Dumping to file...")
# write all me/friend relationships to file
for k in range(0, terminate):
    output.write(_myID + "," + raw["data"][k]["id"] 
        + ",me," + str(raw["data"][k]["name"].encode("utf-8", "ignore")) + "\n")

# write all friend/friend relationships to file
for i in range(0, len(a)):
    output.write(str(a[i].encode("utf-8", "ignore")) + "\n")

output.close()  
</snippet></ROW><ROW><id>14147776</id><snippet>d = {"a": [(1, "x"), (2, "y")], "b": [(10, "w"), (1, "z")]}

new_d = {k: dict(v) for k, v in d.items()}

print new_d
# {'a': {1: 'x', 2: 'y'}, 'b': {1: 'z', 10: 'w'}}
</snippet></ROW><ROW><id>14147960</id><snippet>print ''.join(re.findall('[A-Za-z]', decrypt))
</snippet></ROW><ROW><id>14147960</id><snippet>decrypt = open("crypt.txt").read()
</snippet></ROW><ROW><id>14148016</id><snippet>math</snippet></ROW><ROW><id>14148016</id><snippet>__init__.py</snippet></ROW><ROW><id>14148016</id><snippet>import math</snippet></ROW><ROW><id>14148016</id><snippet>math</snippet></ROW><ROW><id>14148016</id><snippet>math</snippet></ROW><ROW><id>14148016</id><snippet>math</snippet></ROW><ROW><id>14148016</id><snippet>math</snippet></ROW><ROW><id>14148016</id><snippet>__init__.py</snippet></ROW><ROW><id>14148016</id><snippet>__init__.py</snippet></ROW><ROW><id>14148016</id><snippet>string</snippet></ROW><ROW><id>14148016</id><snippet>string</snippet></ROW><ROW><id>14148016</id><snippet>str</snippet></ROW><ROW><id>14148261</id><snippet>T.replace(K,K+' ( '+O[K]+' )',1)
</snippet></ROW><ROW><id>14148261</id><snippet>T.replace(K,K+' ( '+O[K]+' )')
</snippet></ROW><ROW><id>14148270</id><snippet>def append_doc_of(fun):
    def decorator(f):
        f.__doc__ += fun.__doc__
        return f

    return decorator


def A():
    '''
    I am doctring for function A
    '''
    pass


@append_doc_of(A)
def B1():
    '''
    I am doctring for function B1,

    followed by the same docstring as function A, which is:

    '''
    pass
</snippet></ROW><ROW><id>14148292</id><snippet>import pysvn
svncl = pysvn.Client()
entries = svncl.list("http://rabbitvcs.googlecode.com/svn/trunk/")
# Gives you a list of directories:
dirs = (entry[0].repos_path for entry in entries if entry[0].kind == pysvn.node_kind.dir)
list(dirs)
</snippet></ROW><ROW><id>14148576</id><snippet>self.myGrid.ForceRefresh()</snippet></ROW><ROW><id>14148654</id><snippet>__builtin__</snippet></ROW><ROW><id>14148654</id><snippet>from __builtin__ import len
</snippet></ROW><ROW><id>14148654</id><snippet>len</snippet></ROW><ROW><id>14148654</id><snippet>import time
time.asctime()
asctime = 4253
time.asctime() # Notice that asctime here is unaffected as its inside the time module(s) namespace
</snippet></ROW><ROW><id>14148680</id><snippet>word.ActiveDocument.Sections(1).Headers(win32.constants.wdHeaderFooterPrimary).Range.Text='test text'
</snippet></ROW><ROW><id>14148727</id><snippet>bucket.get_key(file_title)</snippet></ROW><ROW><id>14148727</id><snippet>None</snippet></ROW><ROW><id>14148727</id><snippet>file_title</snippet></ROW><ROW><id>14148896</id><snippet>cv</snippet></ROW><ROW><id>14148896</id><snippet>cv2</snippet></ROW><ROW><id>14148896</id><snippet>cv2</snippet></ROW><ROW><id>14148896</id><snippet>cv2</snippet></ROW><ROW><id>14148896</id><snippet>cv2.CascadeClassifier.detectMultiScale()</snippet></ROW><ROW><id>14148896</id><snippet>cv2</snippet></ROW><ROW><id>14148896</id><snippet>detectMultiScale</snippet></ROW><ROW><id>14148896</id><snippet>detect_faces()</snippet></ROW><ROW><id>14148896</id><snippet>import cv2
import cv2.cv as cv

HAAR_CASCADE_PATH = "/home/OpenCV-2.3.1/data/haarcascades/haarcascade_frontalface_default.xml";

CAMERA_INDEX = 0;

if __name__ == "__main__":

    # Open window, load webcam and load Haar cascade classifier
    cv2.namedWindow("Video", cv.CV_WINDOW_AUTOSIZE)
    capture = cv2.VideoCapture(CAMERA_INDEX);
    cascade = cv2.CascadeClassifier(HAAR_CASCADE_PATH);

    i = 0;

    while True:
        # Grab frame from webcam
        retVal, image = capture.read(); # note: ignore retVal

        # Only run the Detection algorithm every 5 frames to improve performance
        #if i%5==0:
        faces = cascade.detectMultiScale(image, scaleFactor=1.2, 
                                        minNeighbors=2, minSize=(100,100), 
                                        flags=cv.CV_HAAR_DO_CANNY_PRUNING);

        # Draw rectangles on image, and then show it
        for (x,y,w,h) in faces:
            cv2.rectangle(image, (x,y), (x+w,y+h), 255)
        cv2.imshow("Video", image)

        i += 1;
</snippet></ROW><ROW><id>14149040</id><snippet>x_, x_idx = np.unique(np.ravel(dataX), return_inverse=True)
y_, y_idx = np.unique(np.ravel(dataY), return_inverse=True)
newArray = np.zeros((len(x_), len(y_)), dtype=dataMag.dtype)
newArray[x_idx, y_idx] = np.ravel(dataMag)
&gt;&gt;&gt; newArray
array([[  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, 777,   0,   0],
       [ 22,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0,   0,   0],
       [  9,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,  19,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,  29,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  5,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,  26,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,  14,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  13,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,  10,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  11,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  16,   0,   0,   0,   0,   0],
       [  0,   0,   4,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  25,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [ 16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]])
</snippet></ROW><ROW><id>14149040</id><snippet>dataX</snippet></ROW><ROW><id>14149040</id><snippet>dataY</snippet></ROW><ROW><id>14149040</id><snippet>from __future__ import division

x_step, y_step = 25, 0.10
x = np.round(dataX / x_step).astype(int)
y = np.round(dataY / y_step).astype(int)
x_m, x_M = np.min(x), np.max(x)
y_m, y_M = np.min(y), np.max(y)
newArray = np.zeros((x_M - x_m + 1, y_M - y_m + 1), dtype=dataMag.dtype)
newArray[x - x_m, y - y_m] = dataMag

&gt;&gt;&gt; newArray
array([[ 22,   0,   0,   0,   0,   0,   0,   0, 777,   0,   0],
       [  0,   0,   0,   0,   9,   0,   0,   0,   0,   0,   0],
       [  9,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,  19,   0,   0,   0,  29,   0,   0,   0,   0,   0],
       [  5,   0,  18,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,  26,   0,   0,   0,  14,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,  13,   0,   0],
       [  0,   0,   0,   0,   0,  10,   0,  11,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   4,   0,   0,   0,   0,  16,  25,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
       [ 16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]])
</snippet></ROW><ROW><id>14149040</id><snippet>x_step, y_step = 50, 0.10
...
&gt;&gt;&gt; newArray
array([[ 22,   0,   0,   0,   9,   0,   0,   0, 777,   0,   0],
       [  9,   0,   0,   0,   0,   0,   8,   0,   0,   0,   0],
       [  0,  19,   0,   0,   0,  29,   0,   0,   0,   0,   0],
       [  5,   0,  26,   0,   0,   0,  14,   0,   0,   0,   0],
       [  0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   9],
       [  0,   0,   0,   0,   0,  10,   0,   0,  13,   0,   0],
       [  0,   0,   0,   0,   0,   0,  16,  11,   0,   0,   0],
       [  0,   4,   0,   0,   0,   0,   0,  25,   0,   0,   0],
       [  0,   0,   0,  17,   0,   0,   0,   0,   0,   0,   0],
       [ 16,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0]])
</snippet></ROW><ROW><id>14149040</id><snippet>[3, 2]</snippet></ROW><ROW><id>14149226</id><snippet>sudo</snippet></ROW><ROW><id>14149268</id><snippet>comments</snippet></ROW><ROW><id>14149268</id><snippet>USE_I18N = True

LANGUAGES = (
  ('zh_CN', 'Chinese'),
)
</snippet></ROW><ROW><id>14149268</id><snippet>django/contrib/comments/forms.py</snippet></ROW><ROW><id>14149319</id><snippet>get_level_values</snippet></ROW><ROW><id>14149319</id><snippet>firsts = df1.index.get_level_values('first')
df1['value2'] = df2.ix[firsts].values
</snippet></ROW><ROW><id>14149319</id><snippet>join</snippet></ROW><ROW><id>14149319</id><snippet>df1 = pd.DataFrame([['a', 'x', 0.123], ['a','x', 0.234],
                    ['a', 'y', 0.451], ['b', 'x', 0.453]],
                   columns=['first', 'second', 'value1']
                   ).set_index(['first', 'second'])
df2 = pd.DataFrame([['a', 10],['b', 20]],
                   columns=['first', 'value']).set_index(['first'])

firsts = df1.index.get_level_values('first')
df1['value2'] = df2.ix[firsts].values

In [5]: df1
Out[5]: 
              value1  value2
first second                
a     x        0.123      10
      x        0.234      10
      y        0.451      10
b     x        0.453      20
</snippet></ROW><ROW><id>14149325</id><snippet>file()</snippet></ROW><ROW><id>14149325</id><snippet>open</snippet></ROW><ROW><id>14149597</id><snippet>query is ''</snippet></ROW><ROW><id>14149597</id><snippet>query!=None</snippet></ROW><ROW><id>14149597</id><snippet>query is None</snippet></ROW><ROW><id>14149597</id><snippet>if q is None:
  a = "without query"
  #custQuery = Customer.all()
elif q is '':
  a = "with blank"
elif q!=None:
  a = "with query"
</snippet></ROW><ROW><id>14149597</id><snippet>query is None</snippet></ROW><ROW><id>14149597</id><snippet>q = self.request.get('q')
if q is '':
  custQuery = db.Query(Customer)
elif q is None:
  q = '' #Force it! (Previously: q is '' - and it works.)
  custQuery = db.Query(Customer)
elif q!=None:
  custQuery = db.Query(Customer)
  custQuery.filter('license = ',q)
</snippet></ROW><ROW><id>14149725</id><snippet>&gt;&gt;&gt; import twitter
&gt;&gt;&gt; api = twitter.Api()
&gt;&gt;&gt; print api.GetStatus('286952044814794753').text
“How do you change mindsets at a societal level, in a country of 1.2bn people?” - Viewpoints from India http://t.co/RiP4t71q #Delhigangrape
</snippet></ROW><ROW><id>14149777</id><snippet>if isinstance(radius, (int, float)):
    #do stuff
else:
    raise TypeError  #or whatever you wanna do
</snippet></ROW><ROW><id>14149866</id><snippet>self.listbox=Listbox(Toplevel(self.master,width=150).overrideredirect(True),width=150).pack)
</snippet></ROW><ROW><id>14149866</id><snippet>new_top = Toplevel(self.master,width=150)
new_top.overrideredirect(True)
self.listbox = Listbox(new_top,width=150)
self.listbox.pack()
</snippet></ROW><ROW><id>14149866</id><snippet>.grid</snippet></ROW><ROW><id>14149866</id><snippet>.pack</snippet></ROW><ROW><id>14149866</id><snippet>Tkinter</snippet></ROW><ROW><id>14149866</id><snippet>Tk</snippet></ROW><ROW><id>14149866</id><snippet>.grid</snippet></ROW><ROW><id>14149866</id><snippet>.pack</snippet></ROW><ROW><id>14149949</id><snippet>temp $ python zombie.py zombie.z 
Hello World!
</snippet></ROW><ROW><id>14149949</id><snippet>zombie.py</snippet></ROW><ROW><id>14149949</id><snippet>~/temp</snippet></ROW><ROW><id>14149949</id><snippet>zombie.z</snippet></ROW><ROW><id>14149949</id><snippet>Hello World!</snippet></ROW><ROW><id>14149949</id><snippet>zombie.z</snippet></ROW><ROW><id>14149949</id><snippet>python zombie.z</snippet></ROW><ROW><id>14149949</id><snippet>.z</snippet></ROW><ROW><id>14149949</id><snippet>zombie</snippet></ROW><ROW><id>14150081</id><snippet>produce_cursors</snippet></ROW><ROW><id>14150081</id><snippet>produces_cursors</snippet></ROW><ROW><id>14150081</id><snippet>map()</snippet></ROW><ROW><id>14150361</id><snippet>    if int(page_number) &gt; 500:
       raise CloseSpider('Search Exceeded 500')
</snippet></ROW><ROW><id>14150578</id><snippet>from random import choice
random_function_selector = [foo, foobar, fudge]

print choice(random_function_selector)()
</snippet></ROW><ROW><id>14150816</id><snippet>dict(zip(S, L))
</snippet></ROW><ROW><id>14150869</id><snippet>{
  "_id": {
      "$oid": "xxxxxxxxxxxxxxxxxx"
  },
  "sections": [{
        "name": "Some Cool Section",
        "sources" : ["source1", "source2", "source3"]
      }, {
        "name": "An Awesome Section",
        "sources" : ["source1", "source2", "source3"]
      }
  ],
  "username": "boatzart"
}
</snippet></ROW><ROW><id>14150980</id><snippet>&gt;&gt;&gt; print doc('h1').html(doc('h1')('span').outerHtml())
&lt;h1 class="price"&gt;&lt;span class="strike"&gt;$325.00&lt;/span&gt;&lt;/h1&gt;
</snippet></ROW><ROW><id>14150980</id><snippet>&gt;&gt;&gt; print doc('h1').remove('span')
&lt;h1 class="price"&gt;
  $295.00
&lt;/h1&gt;
</snippet></ROW><ROW><id>14151009</id><snippet>&gt;&gt;&gt; some_list = [0, 1, 2, 3]
&gt;&gt;&gt; some_list[:1] = [5]*1
&gt;&gt;&gt; some_list[1:] = [6]*3
&gt;&gt;&gt; some_list
[5, 6, 6, 6]
</snippet></ROW><ROW><id>14151009</id><snippet>&gt;&gt;&gt; [5]*1 + [6]*3
[5, 6, 6, 6]
</snippet></ROW><ROW><id>14151009</id><snippet>&gt;&gt;&gt; def YourAnswer(lst, repl, index, size):
    lst[index:index + size] = [repl] * size


&gt;&gt;&gt; some_list = [0, 1, 2, 3]
&gt;&gt;&gt; YourAnswer(some_list, 6, 1, 3)
&gt;&gt;&gt; some_list
[0, 6, 6, 6]
</snippet></ROW><ROW><id>14151217</id><snippet>loadFinished</snippet></ROW><ROW><id>14151217</id><snippet>QNetworkCookieJar</snippet></ROW><ROW><id>14151217</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sip
sip.setapi('QString', 2)
sip.setapi('QVariant', 2)

from PyQt4 import QtCore, QtGui, QtWebKit, QtNetwork

class cookieJar(QtNetwork.QNetworkCookieJar):
    def __init__(self, cookiesKey, parent=None):
        super(cookieJar, self).__init__(parent)

        self.mainWindow = parent
        self.cookiesKey = cookiesKey
        cookiesValue    = self.mainWindow.settings.value(self.cookiesKey)       

        if cookiesValue:
            cookiesList = QtNetwork.QNetworkCookie.parseCookies(cookiesValue)
            self.setAllCookies(cookiesList)

    def setCookiesFromUrl (self, cookieList, url):
        cookiesValue = self.mainWindow.settings.value(self.cookiesKey)
        cookiesArray = cookiesValue if cookiesValue else QtCore.QByteArray()

        for cookie in cookieList:
            cookiesArray.append(cookie.toRawForm() + "\n")

        self.mainWindow.settings.setValue(self.cookiesKey, cookiesArray)

        return super(cookieJar, self).setCookiesFromUrl(cookieList, url)

class webView(QtWebKit.QWebView):
    def __init__(self, cookiesKey, url, parent=None):
        super(webView, self).__init__(parent)

        self.cookieJar = cookieJar(cookiesKey, parent)

        self.page().networkAccessManager().setCookieJar(self.cookieJar)

class myWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(myWindow, self).__init__(parent)

        self.cookiesKey = "cookies"

        self.centralwidget = QtGui.QWidget(self)

        self.tabWidget = QtGui.QTabWidget(self.centralwidget)
        self.tabWidget.setTabsClosable(True)

        self.verticalLayout = QtGui.QVBoxLayout(self.centralwidget)
        self.verticalLayout.addWidget(self.tabWidget)

        self.actionTabAdd = QtGui.QAction(self)
        self.actionTabAdd.setText("Add Tab")
        self.actionTabAdd.triggered.connect(self.on_actionTabAdd_triggered)

        self.lineEdit = QtGui.QLineEdit(self)
        self.lineEdit.setText("http://www.example.com")

        self.toolBar = QtGui.QToolBar(self)
        self.toolBar.addAction(self.actionTabAdd)
        self.toolBar.addWidget(self.lineEdit)

        self.addToolBar(QtCore.Qt.ToolBarArea(QtCore.Qt.TopToolBarArea), self.toolBar)
        self.setCentralWidget(self.tabWidget)

        self.settings = QtCore.QSettings()

    @QtCore.pyqtSlot()
    def on_actionShowCookies_triggered(self):
        webView = self.tabWidget.currentWidget()
        listCookies = webView.page().networkAccessManager().cookieJar().allCookies()

        for cookie in  listCookies:
            print cookie.toRawForm()

    @QtCore.pyqtSlot()
    def on_actionTabAdd_triggered(self):
        url = self.lineEdit.text()
        self.addNewTab(url if url else 'about:blank')

    def addNewTab(self, url):
        tabName = u"Tab {0}".format(str(self.tabWidget.count()))

        tabWidget= webView(self.cookiesKey, url, self)
        tabWidget.loadFinished.connect(self.on_tabWidget_loadFinished)
        tabWidget.load(QtCore.QUrl(url))

        tabIndex = self.tabWidget.addTab(tabWidget, tabName)

        self.tabWidget.setCurrentIndex(tabIndex)

    @QtCore.pyqtSlot()
    def on_tabWidget_loadFinished(self):
        print self.settings.value(self.cookiesKey)

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('myWindow')

    main = myWindow()
    main.resize(666, 333)
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14151228</id><snippet>IMAP4Client.fetchAll()</snippet></ROW><ROW><id>14151228</id><snippet>fetchFull()</snippet></ROW><ROW><id>14151354</id><snippet>bytes</snippet></ROW><ROW><id>14151354</id><snippet>extend</snippet></ROW><ROW><id>14151354</id><snippet>bytes</snippet></ROW><ROW><id>14151354</id><snippet>deque</snippet></ROW><ROW><id>14151354</id><snippet>extend</snippet></ROW><ROW><id>14151354</id><snippet>for byte in x1</snippet></ROW><ROW><id>14151828</id><snippet>4</snippet></ROW><ROW><id>14151828</id><snippet>discriminant = (b ** 2) - 4(a * c)
</snippet></ROW><ROW><id>14151828</id><snippet>*</snippet></ROW><ROW><id>14151828</id><snippet>discriminant = (b ** 2) - 4 * (a * c)
</snippet></ROW><ROW><id>14151828</id><snippet>&gt;&gt;&gt; X_1, X_2 = Quadratic(2, 1, 1)
imaginary
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 9, in Quadratic
UnboundLocalError: local variable 'First_Root' referenced before assignment
</snippet></ROW><ROW><id>14151828</id><snippet>return</snippet></ROW><ROW><id>14151828</id><snippet>def Quadratic(a, b, c):
    discriminant = (b ** 2) - 4(a * c)
    if discriminant &lt; 0:
        raise ValueError("imaginary")
    elif discriminant &gt;= 0:
        Sqrt_Disc = Square_Root(discriminant)
        First_Root = (-b + Sqrt_Disc) / (2 * a)
        Second_Root = (-b - Sqrt_Disc) / (2 * a)

    return First_Root, Second_Root
</snippet></ROW><ROW><id>14151828</id><snippet>Square_Root()</snippet></ROW><ROW><id>14151828</id><snippet>x</snippet></ROW><ROW><id>14151828</id><snippet>def Square_Root(n, x=1):
</snippet></ROW><ROW><id>14151828</id><snippet>&gt;&gt;&gt; Quadratic(1, 3, -4)
(1, -4)
</snippet></ROW><ROW><id>14152178</id><snippet>some_list = [l + [10, 11] for l in some_list]
</snippet></ROW><ROW><id>14152181</id><snippet>curl</snippet></ROW><ROW><id>14152181</id><snippet>curl</snippet></ROW><ROW><id>14152181</id><snippet>-k</snippet></ROW><ROW><id>14152181</id><snippet>--insecure</snippet></ROW><ROW><id>14152297</id><snippet>def OnChoice1(evt):
   print self.ch1.SelectedString()
   self.ch2 = wx.Choice(panel,-1,(x,y),choices=["ABC".split()]
def __init__(self):
...
   self.ch1 =  wx.Choice(panel, -1, (15, 85), choices=sampleList)
   self.ch1.Bind(wx.EVT_CHOICE,OnChoice1)
</snippet></ROW><ROW><id>14152370</id><snippet>'__init__.py'</snippet></ROW><ROW><id>14152370</id><snippet>'/module/__init__.py'</snippet></ROW><ROW><id>14152370</id><snippet>os.stat()</snippet></ROW><ROW><id>14152370</id><snippet>&gt;&gt;&gt; folder = '/Python27/Doc'
&gt;&gt;&gt; files = os.listdir(folder)
&gt;&gt;&gt; for filename in files:
    fullname = os.path.join(folder, filename)
    print fullname, os.path.getsize(fullname)


/Python27/Doc\python27.chm 5754439
</snippet></ROW><ROW><id>14152557</id><snippet>SELECT *</snippet></ROW><ROW><id>14152557</id><snippet>CREATE TABLE summary(id, status, value, time, aperson);
INSERT INTO "summary" VALUES(1,'old',23,'time0','joe');
INSERT INTO "summary" VALUES(2,'new',42,'time1','bob');
INSERT INTO "summary" VALUES(3,'new',32,'time2','mike');
CREATE TABLE long_summary(id, who, comment, alltext);
INSERT INTO "long_summary" VALUES(1,'someone','i say!','some text');
INSERT INTO "long_summary" VALUES(1,'joe','joe likes','some text');
INSERT INTO "long_summary" VALUES(2,'joe','joe likes bob','some text');
INSERT INTO "long_summary" VALUES(3,'joe','joe likes mike','some text');
INSERT INTO "long_summary" VALUES(1,'bob','nice one, joe','some text');
INSERT INTO "long_summary" VALUES(2,'bob','nice one, me','some text');
INSERT INTO "long_summary" VALUES(2,'bob','double nice one, me','some text');
INSERT INTO "long_summary" VALUES(3,'bob','nice one, mike','some text');
COMMIT;
</snippet></ROW><ROW><id>14152557</id><snippet>SELECT l.id,summary.status
FROM  long_summary l INNER JOIN summary ON l.id = summary.id INNER JOIN long_summary ON summary.aperson = long_summary.who 
WHERE summary.status IN('old','new','waiting')
</snippet></ROW><ROW><id>14152557</id><snippet>1|old</snippet></ROW><ROW><id>14152557</id><snippet>2|new</snippet></ROW><ROW><id>14152557</id><snippet>SELECT *
FROM  long_summary l INNER JOIN summary ON l.id = summary.id INNER JOIN long_summary ON summary.aperson = long_summary.who 
WHERE summary.status IN('old','new','waiting')

1|bob|nice one, joe|some text|1|old|23|time0|joe|1|joe|joe likes|some text
1|bob|nice one, joe|some text|1|old|23|time0|joe|2|joe|joe likes bob|some text
1|bob|nice one, joe|some text|1|old|23|time0|joe|3|joe|joe likes mike|some text
1|joe|joe likes|some text|1|old|23|time0|joe|1|joe|joe likes|some text
1|joe|joe likes|some text|1|old|23|time0|joe|2|joe|joe likes bob|some text
1|joe|joe likes|some text|1|old|23|time0|joe|3|joe|joe likes mike|some text
1|someone|i say!|some text|1|old|23|time0|joe|1|joe|joe likes|some text
1|someone|i say!|some text|1|old|23|time0|joe|2|joe|joe likes bob|some text
1|someone|i say!|some text|1|old|23|time0|joe|3|joe|joe likes mike|some text
2|bob|double nice one, me|some text|2|new|42|time1|bob|1|bob|nice one, joe|some text
2|bob|double nice one, me|some text|2|new|42|time1|bob|2|bob|double nice one, me|some text
2|bob|double nice one, me|some text|2|new|42|time1|bob|2|bob|nice one, me|some text
2|bob|double nice one, me|some text|2|new|42|time1|bob|3|bob|nice one, mike|some text
2|bob|nice one, me|some text|2|new|42|time1|bob|1|bob|nice one, joe|some text
2|bob|nice one, me|some text|2|new|42|time1|bob|2|bob|double nice one, me|some text
2|bob|nice one, me|some text|2|new|42|time1|bob|2|bob|nice one, me|some text
2|bob|nice one, me|some text|2|new|42|time1|bob|3|bob|nice one, mike|some text
2|joe|joe likes bob|some text|2|new|42|time1|bob|1|bob|nice one, joe|some text
2|joe|joe likes bob|some text|2|new|42|time1|bob|2|bob|double nice one, me|some text
2|joe|joe likes bob|some text|2|new|42|time1|bob|2|bob|nice one, me|some text
2|joe|joe likes bob|some text|2|new|42|time1|bob|3|bob|nice one, mike|some text
</snippet></ROW><ROW><id>14152557</id><snippet>1|old</snippet></ROW><ROW><id>14152557</id><snippet>WHERE</snippet></ROW><ROW><id>14152557</id><snippet>JOIN</snippet></ROW><ROW><id>14152557</id><snippet>GROUP BY</snippet></ROW><ROW><id>14152557</id><snippet>OR</snippet></ROW><ROW><id>14152557</id><snippet>GROUP BY</snippet></ROW><ROW><id>14152557</id><snippet>SELECT DISTINCT</snippet></ROW><ROW><id>14152557</id><snippet>JOIN</snippet></ROW><ROW><id>14152557</id><snippet>JOIN</snippet></ROW><ROW><id>14152557</id><snippet>JOIN</snippet></ROW><ROW><id>14152557</id><snippet>JOIN</snippet></ROW><ROW><id>14152557</id><snippet>sqlite3</snippet></ROW><ROW><id>14152557</id><snippet>mysql</snippet></ROW><ROW><id>14152557</id><snippet>mysql</snippet></ROW><ROW><id>14152643</id><snippet>models.py</snippet></ROW><ROW><id>14152643</id><snippet>import datetime

year_dropdown = []
for y in range(2011, (datetime.datetime.now().year + 5)):
    year_dropdown.append((y, y))
</snippet></ROW><ROW><id>14152643</id><snippet>year_dropdown</snippet></ROW><ROW><id>14152643</id><snippet>year = models.IntegerField(_('year'), max_length=4, choices=year_dropdown, default=datetime.datetime.now().year)
</snippet></ROW><ROW><id>14152643</id><snippet>&lt;select id="year"&gt;
{% for y in range(2011, (datetime.datetime.now().year + 5)) %}
    &lt;option value="{{ y }}"&gt;{{ y }}&lt;/option&gt;
{% endfor %}
&lt;/select&gt;
</snippet></ROW><ROW><id>14152646</id><snippet>u</snippet></ROW><ROW><id>14152646</id><snippet>__future__</snippet></ROW><ROW><id>14152646</id><snippet>bytes</snippet></ROW><ROW><id>14152646</id><snippet>unicode</snippet></ROW><ROW><id>14152646</id><snippet>str</snippet></ROW><ROW><id>14152646</id><snippet>encode</snippet></ROW><ROW><id>14152646</id><snippet>decode</snippet></ROW><ROW><id>14152646</id><snippet>2to3</snippet></ROW><ROW><id>14152646</id><snippet>d.keys()</snippet></ROW><ROW><id>14152646</id><snippet>map(f, l)</snippet></ROW><ROW><id>14152646</id><snippet>list</snippet></ROW><ROW><id>14152646</id><snippet>2to3</snippet></ROW><ROW><id>14152646</id><snippet>2to3</snippet></ROW><ROW><id>14152646</id><snippet>setup.py</snippet></ROW><ROW><id>14152646</id><snippet>if sys.version_info &gt;= (3, 0):</snippet></ROW><ROW><id>14152646</id><snippet>2to3</snippet></ROW><ROW><id>14152646</id><snippet>/usr/bin/env python
</snippet></ROW><ROW><id>14152646</id><snippet>env</snippet></ROW><ROW><id>14152646</id><snippet>python</snippet></ROW><ROW><id>14152646</id><snippet>python</snippet></ROW><ROW><id>14152646</id><snippet>python</snippet></ROW><ROW><id>14152646</id><snippet>python</snippet></ROW><ROW><id>14152646</id><snippet>python</snippet></ROW><ROW><id>14152646</id><snippet>python3</snippet></ROW><ROW><id>14152646</id><snippet>./check.sh</snippet></ROW><ROW><id>14152646</id><snippet>./check.py</snippet></ROW><ROW><id>14152646</id><snippet>check.sh</snippet></ROW><ROW><id>14152646</id><snippet>$python ./check.py</snippet></ROW><ROW><id>14152646</id><snippet>./check.sh</snippet></ROW><ROW><id>14152918</id><snippet>myjson = [{"name":"bla", "value":111}, 
          {"name":"ble", "value":222}, 
          {"name":"bli", "value":333}, 
          {"name":"blo", "value":444}]

kwargs = dict(map(lambda x: (x["name"], x["value"]), myjson))    
kwargs["name"] = "lalala"

table = myTable(**kwargs)
table.save()
</snippet></ROW><ROW><id>14152918</id><snippet>query</snippet></ROW><ROW><id>14152918</id><snippet>table</snippet></ROW><ROW><id>14152950</id><snippet>sw = wx.ScrolledWindow(self)
for child in sw.GetChildren():
  if isinstance(child, wx.ScrollBar):
    print child
    child.SetBackgroundColour(...)
</snippet></ROW><ROW><id>14152950</id><snippet>python
&gt;&gt;&gt; import wx
&gt;&gt;&gt; help(wx.ScrollBar)
</snippet></ROW><ROW><id>14152991</id><snippet>Watchdog</snippet></ROW><ROW><id>14153062</id><snippet>read</snippet></ROW><ROW><id>14153062</id><snippet>tex_file.seek(0)</snippet></ROW><ROW><id>14153062</id><snippet>write</snippet></ROW><ROW><id>14153062</id><snippet>tex_file.close()</snippet></ROW><ROW><id>14153062</id><snippet>with</snippet></ROW><ROW><id>14153062</id><snippet>with open(sys.argv[-1], 'r+') as tex_file:
    tex_file_data - tex_file.read()
    tex_file_data = re.sub(r"\_(.*)\_", r"\\emph{\1}", tex_file_data)
    tex_file.seek(0)
    tex_file.write(tex_file_data)

os.system("xelatex --shell-escape " + tex_file.name)
</snippet></ROW><ROW><id>14153234</id><snippet>qpycore</snippet></ROW><ROW><id>14153264</id><snippet>ping</snippet></ROW><ROW><id>14153264</id><snippet>telnet</snippet></ROW><ROW><id>14153264</id><snippet>80</snippet></ROW><ROW><id>14153264</id><snippet>80</snippet></ROW><ROW><id>14153297</id><snippet>lxml</snippet></ROW><ROW><id>14153297</id><snippet>pip</snippet></ROW><ROW><id>14153297</id><snippet>sudo pip uninstall lxml
sudo pip install lxml
</snippet></ROW><ROW><id>14153297</id><snippet>lxml</snippet></ROW><ROW><id>14153297</id><snippet>libxml2</snippet></ROW><ROW><id>14153297</id><snippet>libxslt2</snippet></ROW><ROW><id>14153297</id><snippet>install_name_tool</snippet></ROW><ROW><id>14153297</id><snippet>lxml</snippet></ROW><ROW><id>14153297</id><snippet>pip</snippet></ROW><ROW><id>14153297</id><snippet>pip</snippet></ROW><ROW><id>14153297</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>14153297</id><snippet>sudo easy_install lxml</snippet></ROW><ROW><id>14153297</id><snippet>sudo pip install lxml</snippet></ROW><ROW><id>14153297</id><snippet>libxml2</snippet></ROW><ROW><id>14153297</id><snippet>sudo rm -rf /Library/Python/2.7/site-packages/*
rm -rf ~/Library/Python/2.7/site-packages/*
</snippet></ROW><ROW><id>14153297</id><snippet>pip</snippet></ROW><ROW><id>14153297</id><snippet>sudo easy_install pip</snippet></ROW><ROW><id>14153297</id><snippet>pip</snippet></ROW><ROW><id>14153297</id><snippet>ls</snippet></ROW><ROW><id>14153297</id><snippet>pip install git+https://some.site/some/repo</snippet></ROW><ROW><id>14153335</id><snippet>-ord(x[1][0])</snippet></ROW><ROW><id>14153335</id><snippet>In [15]: X = None

In [16]: some_list = [[X, '4x01'], [X, '3x02'], [X, '4x02'], [X, '3x01']]

In [17]: l = sorted(some_list, key=lambda (x,y):y[-2:])

In [18]: l = sorted(l, key=lambda (x,y):y[:1], reverse=True)

In [19]: l
Out[19]: [[None, '4x01'], [None, '4x02'], [None, '3x01'], [None, '3x02']]
</snippet></ROW><ROW><id>14153335</id><snippet>def f((x1,y1), (x2,y2)):
    c = cmp(y1[:1], y2[:1])
    if c != 0: return -c
    return cmp(y1[-2:], y2[-2:])
</snippet></ROW><ROW><id>14153335</id><snippet>In [39]: sorted(some_list, cmp=f)
Out[39]: [[None, '4x01'], [None, '4x02'], [None, '3x01'], [None, '3x02']]
</snippet></ROW><ROW><id>14153414</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "I went out on 1 sep 2012 and it was better than 15 jan 2012"
&gt;&gt;&gt; r = re.compile('(^.*)(1 sep 2012 )(.*$)')
&gt;&gt;&gt; r.sub(r'\2\1\3',s)
'1 sep 2012 I went out on and it was better than 15 jan 2012'
</snippet></ROW><ROW><id>14153414</id><snippet>(^.*)          # Capture everything from the start of the string
(1 sep 2012 )  # Upto the part we are interested in (captured)
(.*$)          # Capture everything else
</snippet></ROW><ROW><id>14153414</id><snippet>`\2\1\3'</snippet></ROW><ROW><id>14153414</id><snippet>r'\2\1\3'</snippet></ROW><ROW><id>14153414</id><snippet>(1 sep 2012 )</snippet></ROW><ROW><id>14153414</id><snippet>\s</snippet></ROW><ROW><id>14153414</id><snippet>(\d+\s(?:jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)\s\d{4}\s)

&gt;&gt;&gt; r = re.compile(r'(^.*)(\d+\s(?:aug|sep|oct|nov)\s\d{4}\s)(.*$)')
&gt;&gt;&gt; r.sub(r'\2\1\3',s)
'1 sep 2012 I went out on and it was better than 15 jan 2012'
</snippet></ROW><ROW><id>14153870</id><snippet>pip install virtualenv
virtualenv django_buildout
cd django_buildout
bin/pip install zc.buildout
bin/buildout init
</snippet></ROW><ROW><id>14153870</id><snippet>zc.buildout</snippet></ROW><ROW><id>14153870</id><snippet>[buildout]
versions = versions
allow-picked-versions = false

[versions]
zc.buildout = 1.6.3
# etc.
</snippet></ROW><ROW><id>14154002</id><snippet>sys.argv</snippet></ROW><ROW><id>14154002</id><snippet>import sys
path = sys.argv[1]
sys.path.append(path)
import urllib
import httplib
</snippet></ROW><ROW><id>14154002</id><snippet>py.exe myscript.py
</snippet></ROW><ROW><id>14154002</id><snippet>py.exe myscript.py "C:\Program Files (x86)\IronPython 2.7\Lib"
</snippet></ROW><ROW><id>14154002</id><snippet>PYthon_Script.SetVariable("path", "C:\Program Files (x86)\IronPython 2.7\Lib")
</snippet></ROW><ROW><id>14154002</id><snippet>sys.path</snippet></ROW><ROW><id>14154002</id><snippet>Runtime</snippet></ROW><ROW><id>14154002</id><snippet>paths = sys.argv[1:]
sys.path.extend(paths)
</snippet></ROW><ROW><id>14154002</id><snippet>IRONPYTHONPATH</snippet></ROW><ROW><id>14154002</id><snippet>cmd.exe</snippet></ROW><ROW><id>14154002</id><snippet>myscript.py</snippet></ROW><ROW><id>14154002</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14154002</id><snippet>IRONPYTHONPATH</snippet></ROW><ROW><id>14154002</id><snippet>import os
import sys
path = os.environ['MY_IRONPYTHON_EXTRA_PATH']
sys.path.append(path)
import urllib
import httplib
</snippet></ROW><ROW><id>14154002</id><snippet>MY_IRONPYTHON_EXTRA_PATH</snippet></ROW><ROW><id>14154002</id><snippet>IRONPYTHON_PATH</snippet></ROW><ROW><id>14154002</id><snippet>paths = os.environ['MY_IRONPYTHON_EXTRA_PATH'].split(';')
sys.path.extend(paths)
</snippet></ROW><ROW><id>14154164</id><snippet>root = ET.fromstring(xmlData)
print root.find('{http://example.com}Sent',)
print root.find('{http://example.com}MessageID')
</snippet></ROW><ROW><id>14154164</id><snippet>&lt;Element '{http://example.com}Sent' at 0x1043e0690&gt;
&lt;Element '{http://example.com}MessageID' at 0x1043e0350&gt;
</snippet></ROW><ROW><id>14154164</id><snippet>find()</snippet></ROW><ROW><id>14154164</id><snippet>findall()</snippet></ROW><ROW><id>14154164</id><snippet>nsmap = {'n': 'http://example.com'}
print root.find('n:Sent', namespaces=nsmap)
print root.find('n:MessageID', namespaces=nsmap)
</snippet></ROW><ROW><id>14154503</id><snippet>c_char_p</snippet></ROW><ROW><id>14154503</id><snippet>restype</snippet></ROW><ROW><id>14154503</id><snippet>c_void_p</snippet></ROW><ROW><id>14154503</id><snippet>ctypes.string_at</snippet></ROW><ROW><id>14154618</id><snippet>Gtk.IconView</snippet></ROW><ROW><id>14154618</id><snippet>Gtk.CellLayout</snippet></ROW><ROW><id>14154618</id><snippet>renderers = iconview.get_cells()
iconview.clear()
for r in renderers:
    if not isinstance(r, Gtk.TextRenderer):
        iconview.pack_start(r)
    else:
        iconview.pack_start(my_custom_renderer)
</snippet></ROW><ROW><id>14155191</id><snippet>submit_data_entry_view</snippet></ROW><ROW><id>14155191</id><snippet>def submit_data_entry_view(request):

    if request.method == 'POST': #form submit
        form_main      = MainForm(request.POST)
        form_bicyclead = BicycleAdForm(request.POST)

        #now process and save the form

        return &lt;whatever_you_want&gt;
    elif request.method == 'GET': #first time rendering the form
        form_main      = MainForm()
        form_bicyclead = BicycleAdForm()

        return render_to_response('app/submit_data_entry.html', {'form_main': form_main, 'form_bicyclead': form_bicyclead}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>14155217</id><snippet>a = Arrow3D([0,1],[0,1],[0,1], mutation_scale=20, lw=1, arrowstyle="-|&gt;", color="k", linestyle="dashed")
</snippet></ROW><ROW><id>14155217</id><snippet>linestyle = "--"</snippet></ROW><ROW><id>14155332</id><snippet>touch filename_`/bin/date +%Y%m%d%H%M%S`.txt
</snippet></ROW><ROW><id>14155332</id><snippet>filename_20130104112845.txt
</snippet></ROW><ROW><id>14155403</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>14155403</id><snippet>d=collections.defaultdict(list)
for item in lst:
    d[item[1]].append(item)
d[min(key for key in d.keys() if key!=0)]
</snippet></ROW><ROW><id>14155403</id><snippet>[('NORTHLANDER', 3), ('VOLT', 3)]
</snippet></ROW><ROW><id>14155403</id><snippet>#unwind's solution

def f(lst):
    return [y for y in lst if y[1] == min([x for x in lst if x[1] &gt; 0],
                                             key = lambda x: x[1])[1]]

def f2(lst):
    d=collections.defaultdict(list)
    for item in lst:
        d[item[1]].append(item)
    return d[min(key for key in d.keys() if key!=0)]

%timeit f(lst)
100000 loops, best of 3: 12.1 us per loop
%timeit f2(lst)
100000 loops, best of 3: 5.42 us per loop
</snippet></ROW><ROW><id>14155403</id><snippet>defaultdict</snippet></ROW><ROW><id>14155403</id><snippet>def f3(lst):
    lstm = min((x for x in lst if x[1]), key = lambda x: x[1])[1]
    return [y for y in lst if y[1] == lstm]

%timeit f3(lst)
100000 loops, best of 3: 4.19 us per loop
</snippet></ROW><ROW><id>14155403</id><snippet>dict</snippet></ROW><ROW><id>14155403</id><snippet>set.default</snippet></ROW><ROW><id>14155403</id><snippet>def f4(lst):
    d={}
    for item in lst:
        if item[1] != 0:
            d.setdefault(item[1],{})[item]=0
    return d[min(d.keys())].keys()

%timeit f4(lst)
100000 loops, best of 3: 3.76 us per loop
</snippet></ROW><ROW><id>14155479</id><snippet>conn.cmd('NOTICE', [nick, msg])
</snippet></ROW><ROW><id>14155701</id><snippet>python python_script.py filename
</snippet></ROW><ROW><id>14155701</id><snippet>import sys
print sys.argv[1]
</snippet></ROW><ROW><id>14155942</id><snippet>c_list = a_list.values_list('c', flat=True)
</snippet></ROW><ROW><id>14156290</id><snippet>fileinput = open('tweets.txt', 'r')
lines = [line.lower() for line in fileinput]
</snippet></ROW><ROW><id>14156638</id><snippet>variable = subprocess.check_output(['cat', 'text'])
</snippet></ROW><ROW><id>14156638</id><snippet>check_output</snippet></ROW><ROW><id>14156638</id><snippet>variable = subprocess.check_output(['sh', '-c', command])
</snippet></ROW><ROW><id>14156638</id><snippet>variable = subprocess.check_output(command, shell=True)
</snippet></ROW><ROW><id>14157159</id><snippet>test.close()
</snippet></ROW><ROW><id>14157159</id><snippet>()</snippet></ROW><ROW><id>14157159</id><snippet>with</snippet></ROW><ROW><id>14157159</id><snippet>with</snippet></ROW><ROW><id>14157159</id><snippet>close()</snippet></ROW><ROW><id>14157159</id><snippet>with open("tmp.addr2line", "w") as test:
    for i in __coverage_information__:
        test.write(i.address + "\n")
</snippet></ROW><ROW><id>14157159</id><snippet>shell=True</snippet></ROW><ROW><id>14157159</id><snippet>subprocess.call(["wc", "tmp.addr2line"])
</snippet></ROW><ROW><id>14157691</id><snippet>for i in data.find():
    a=[]
    somename = i["name"][??]        #maybe you can extract your label from here ?
    for element in i["counts"]:
        a.append(element["total"])
    P.plot(a, label=somename)       # and use it here
P.legend()
P.show()
</snippet></ROW><ROW><id>14157691</id><snippet>legend()</snippet></ROW><ROW><id>14157691</id><snippet>for i in data.find():
    a = [element['total'] for element in i['counts']]
    P.plot(a, label=somename)
P.legend()
P.show() 
</snippet></ROW><ROW><id>14158386</id><snippet>locals()</snippet></ROW><ROW><id>14158386</id><snippet>globals()</snippet></ROW><ROW><id>14158386</id><snippet>nonlocal</snippet></ROW><ROW><id>14158386</id><snippet>global</snippet></ROW><ROW><id>14158386</id><snippet>nonLocalVariable</snippet></ROW><ROW><id>14158386</id><snippet>anotherFunction</snippet></ROW><ROW><id>14158386</id><snippet>LocalClass</snippet></ROW><ROW><id>14158386</id><snippet>nonLocalVariable</snippet></ROW><ROW><id>14158386</id><snippet>&gt;&gt;&gt; def foo(x):
...     y = None
...     def bar():
...         return x
...     return bar
... 
&gt;&gt;&gt; bar = foo('spam')
&gt;&gt;&gt; foo.__code__.co_cellvars
('x',)
&gt;&gt;&gt; bar.__code__.co_freevars
('x',)
&gt;&gt;&gt; dir(bar.func_closure[0])
['__class__', '__cmp__', '__delattr__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'cell_contents']
&gt;&gt;&gt; bar.func_closure[0].cell_contents
'spam'
</snippet></ROW><ROW><id>14158386</id><snippet>foo</snippet></ROW><ROW><id>14158386</id><snippet>x</snippet></ROW><ROW><id>14158386</id><snippet>co_cellvars</snippet></ROW><ROW><id>14158386</id><snippet>bar</snippet></ROW><ROW><id>14158386</id><snippet>x</snippet></ROW><ROW><id>14158386</id><snippet>co_freevars</snippet></ROW><ROW><id>14158386</id><snippet>y</snippet></ROW><ROW><id>14158386</id><snippet>bar</snippet></ROW><ROW><id>14158386</id><snippet>bar</snippet></ROW><ROW><id>14158386</id><snippet>func_closure</snippet></ROW><ROW><id>14158386</id><snippet>x</snippet></ROW><ROW><id>14158386</id><snippet>bar</snippet></ROW><ROW><id>14158386</id><snippet>func_closure</snippet></ROW><ROW><id>14158386</id><snippet>freevars</snippet></ROW><ROW><id>14158386</id><snippet>cellvars</snippet></ROW><ROW><id>14158676</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>14158676</id><snippet>In [16]: d = collections.OrderedDict.fromkeys(zip(alist, blist))

In [17]: [k[0] for k in d]
Out[17]: [1, 2, 3, 4, 5, 6, 7, 8, 9]

In [18]: [k[1] for k in d]
Out[18]: ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']
</snippet></ROW><ROW><id>14158869</id><snippet>filter</snippet></ROW><ROW><id>14158869</id><snippet>import csv
fp = file('samples.csv')
rdr = csv.DictReader(filter(lambda row: row[0]!='#', fp))
for row in rdr:
    print row
fp.close()
</snippet></ROW><ROW><id>14158991</id><snippet>open()</snippet></ROW><ROW><id>14158991</id><snippet>buffering</snippet></ROW><ROW><id>14158991</id><snippet>0</snippet></ROW><ROW><id>14158991</id><snippet>1</snippet></ROW><ROW><id>14158991</id><snippet>buffering</snippet></ROW><ROW><id>14158991</id><snippet>with</snippet></ROW><ROW><id>14158991</id><snippet>with</snippet></ROW><ROW><id>14158991</id><snippet>with open("test.txt", 'w', buffering=20*(1024**2)) as myfile:
    for line in mydata:
        myfile.write(line + '\n')
</snippet></ROW><ROW><id>14159081</id><snippet>def hmm(self):
    return 'ok'
requests.models.Response.hmm = hmm
</snippet></ROW><ROW><id>14159081</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; def hmm(self):
...     return 'ok'
... 
&gt;&gt;&gt; requests.models.Response.hmm = hmm
&gt;&gt;&gt; r = requests.get('http://bbc.co.uk')
&gt;&gt;&gt; print r
&lt;Response [200]&gt;
&gt;&gt;&gt; r.hmm()
'ok'
&gt;&gt;&gt; requests.__version__
'1.0.4'
</snippet></ROW><ROW><id>14159141</id><snippet>import pdb; pdb.Pdb().set_trace()</snippet></ROW><ROW><id>14159141</id><snippet>pos</snippet></ROW><ROW><id>14159141</id><snippet>pos</snippet></ROW><ROW><id>14159141</id><snippet>graph_tool.PropertyMap</snippet></ROW><ROW><id>14159141</id><snippet>(Pdb) pos
&lt;PropertyMap object with key type 'Vertex' and value type 'vector&lt;double&gt;', for Graph 0x2efbf90
</snippet></ROW><ROW><id>14159141</id><snippet>(Pdb) pos.get_graph().vertices()
&lt;graph_tool.libgraph_tool_core.VertexIterator object at 0x2f99950&gt;
</snippet></ROW><ROW><id>14159141</id><snippet>pos</snippet></ROW><ROW><id>14159141</id><snippet>(Pdb) pos[pos.get_graph().vertices().next()]
array([-37.40184702,  25.3717068 ])
</snippet></ROW><ROW><id>14159141</id><snippet>for vertex in g.vertices():
    print pos[vertex]
</snippet></ROW><ROW><id>14159141</id><snippet>array([-37.40184702,  25.3717068 ])
array([-37.5790565 ,  26.77548156])
array([-35.57640651,  24.60125253])
array([-38.90262591,  24.30374   ])
array([-33.72945377,  24.31891936])
array([-32.68247364,  25.85861809])
[...]
</snippet></ROW><ROW><id>14159157</id><snippet>win32api</snippet></ROW><ROW><id>14159157</id><snippet>win32pdhutil</snippet></ROW><ROW><id>14159157</id><snippet>win32con</snippet></ROW><ROW><id>14159157</id><snippet>tasklist</snippet></ROW><ROW><id>14159157</id><snippet>tasklist</snippet></ROW><ROW><id>14159157</id><snippet>C:\Documents and Settings\Administrator&gt;tasklist

Image Name                   PID Session Name     Session#    Mem Usage
========================= ====== ================ ======== ============
System Idle Process            0 Console                 0         28 K
System                         4 Console                 0        236 K
smss.exe                     812 Console                 0        388 K
csrss.exe                    860 Console                 0      3,720 K
winlogon.exe                 884 Console                 0      4,148 K
services.exe                 928 Console                 0      3,356 K
lsass.exe                    940 Console                 0      5,904 K
vmacthlp.exe                1100 Console                 0      2,348 K
...
</snippet></ROW><ROW><id>14159372</id><snippet>gobject</snippet></ROW><ROW><id>14159372</id><snippet>self.shutdown_item.connect("activate",self.shutdown)
self.shutdown_item.connect("activate",self.sensitiveshutdown)


def sensitiveshutdown(self, widget):
    self.shutdown_item.set_sensitive(False)
    gobject.timeout_add(5000, self.reviveShutDown)

def reviveShutDown(self):
    self.shutdown_item.set_sensitive(True)
    return False
</snippet></ROW><ROW><id>14159514</id><snippet>pip</snippet></ROW><ROW><id>14159514</id><snippet>site-packages</snippet></ROW><ROW><id>14159514</id><snippet>import</snippet></ROW><ROW><id>14159514</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14159644</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>14159644</id><snippet>from collections import defaultdict

index = defaultdict(list)

for line in file:
    # ...code that loops through file finding ID lines...
    index[id_value].append((fileposn,length))
</snippet></ROW><ROW><id>14159645</id><snippet>&gt;&gt;&gt; import imdb    
&gt;&gt;&gt; ia = imdb.IMDb()    
&gt;&gt;&gt; movies = ia.search_movie(title='The Hobbit: An Unexpected Journey')    
&gt;&gt;&gt; movies[0].movieID    
'0903624'
</snippet></ROW><ROW><id>14159697</id><snippet>&lt;a ...&gt;</snippet></ROW><ROW><id>14159697</id><snippet>.next_element</snippet></ROW><ROW><id>14159697</id><snippet>u'Tillie'</snippet></ROW><ROW><id>14159697</id><snippet>&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were
&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,
&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and
&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;
and they lived at the bottom of a well.&lt;/p&gt;
</snippet></ROW><ROW><id>14159697</id><snippet>p
\
  a
  \
    "Elsie"
  ", "
  a
  \
    "Lacie"
  " and "
  a
  \
    "Tillie"
  "; and they lived at the bottom of a well."
</snippet></ROW><ROW><id>14159697</id><snippet>a</snippet></ROW><ROW><id>14159697</id><snippet>" and "</snippet></ROW><ROW><id>14159697</id><snippet>"Tillie"</snippet></ROW><ROW><id>14159697</id><snippet>"Tillie"</snippet></ROW><ROW><id>14159697</id><snippet>"; and they lived at the bottom of a well."</snippet></ROW><ROW><id>14159697</id><snippet>" and "</snippet></ROW><ROW><id>14159697</id><snippet>"Lacie"</snippet></ROW><ROW><id>14159719</id><snippet>Unrecognized or unsupported array type in function cvGetMat</snippet></ROW><ROW><id>14159719</id><snippet>cvGetMat()</snippet></ROW><ROW><id>14159719</id><snippet>Mat</snippet></ROW><ROW><id>14159719</id><snippet>Mat</snippet></ROW><ROW><id>14159719</id><snippet>Mat</snippet></ROW><ROW><id>14159719</id><snippet>im</snippet></ROW><ROW><id>14159719</id><snippet>cv2.imshow()</snippet></ROW><ROW><id>14159719</id><snippet>im</snippet></ROW><ROW><id>14159719</id><snippet>imshow()</snippet></ROW><ROW><id>14159719</id><snippet>cv2.imshow()</snippet></ROW><ROW><id>14159719</id><snippet>while True:
    # Grab frame from webcam
    retVal, image = capture.read(); # note: ignore retVal

#   faces = cascade.detectMultiScale(image, scaleFactor=1.2, minNeighbors=2, minSize=(100,100),flags=cv.CV_HAAR_DO_CANNY_PRUNING);

    # Draw rectangles on image, and then show it
#   for (x,y,w,h) in faces:
#       cv2.rectangle(image, (x,y), (x+w,y+h), 255)
    cv2.imshow("Video", image)

    i += 1;
</snippet></ROW><ROW><id>14160228</id><snippet>&gt;&gt;&gt; platform.system = lambda: "whatever"
&gt;&gt;&gt; platform.system()
'whatever'
</snippet></ROW><ROW><id>14160699</id><snippet>name</snippet></ROW><ROW><id>14160699</id><snippet>my_objects = MyObject.objects.all()
obj_dict = {obj.name: obj for obj in my_objects}
print obj_dict['any_name']
</snippet></ROW><ROW><id>14160699</id><snippet>obj = MyObject.objects.get(pk=id)
or
obj = MyObject.objects.get(name='unique_name')
</snippet></ROW><ROW><id>14160773</id><snippet>\n\n</snippet></ROW><ROW><id>14160773</id><snippet>\r\n\r\n</snippet></ROW><ROW><id>14160773</id><snippet>print ("Content-Type: text/html\n\n")
</snippet></ROW><ROW><id>14160804</id><snippet>QScrollArea</snippet></ROW><ROW><id>14160804</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtCore, QtGui

class myDialog(QtGui.QDialog):
    _buttons = 0

    def __init__(self, parent=None):
        super(myDialog, self).__init__(parent)

        self.pushButton = QtGui.QPushButton(self)
        self.pushButton.setText(QtGui.QApplication.translate("self", "Add Button!", None, QtGui.QApplication.UnicodeUTF8))
        self.pushButton.clicked.connect(self.on_pushButton_clicked)

        self.scrollArea = QtGui.QScrollArea(self)
        self.scrollArea.setWidgetResizable(True)
        self.scrollAreaWidgetContents = QtGui.QWidget(self.scrollArea)
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 380, 247))
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)

        self.verticalLayout = QtGui.QVBoxLayout(self)
        self.verticalLayout.addWidget(self.pushButton)
        self.verticalLayout.addWidget(self.scrollArea)

        self.verticalLayoutScroll = QtGui.QVBoxLayout(self.scrollAreaWidgetContents)

    @QtCore.pyqtSlot()
    def on_pushButton_clicked(self):
        self._buttons  += 1
        pustButtonName = u"Button {0}".format(self._buttons)

        pushButton = QtGui.QPushButton(self.scrollAreaWidgetContents)
        pushButton.setText(pustButtonName)

        self.verticalLayoutScroll.addWidget(pushButton)


if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('myDialog')

    main = myDialog()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14160979</id><snippet>self.fields['someVal'].required = True
</snippet></ROW><ROW><id>14161082</id><snippet>locals()</snippet></ROW><ROW><id>14161082</id><snippet>&gt;&gt;&gt; def foo():
...     import sys
...     flocals = sys._getframe(1).f_locals
...     flocals['ham'] = 'eggs'
... 
&gt;&gt;&gt; class Bar:
...     foo()
... 
&gt;&gt;&gt; dir(Bar)
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__locals__', '__lt__', '__module__', '__ne__', '__new__', '__qualname__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'ham']
&gt;&gt;&gt; Bar.ham
'eggs'
</snippet></ROW><ROW><id>14161207</id><snippet>&lt;field name="fiscal_position" attrs="{'required':[('state','in',['pending','open'])]}"/&gt;
</snippet></ROW><ROW><id>14161228</id><snippet>plt.rc('font', **{'size':'30'})
</snippet></ROW><ROW><id>14161598</id><snippet>webdriver.Remote</snippet></ROW><ROW><id>14161735</id><snippet>contours = [numpy.array([[1,1],[10,50],[50,50]], dtype=numpy.int32) , numpy.array([[99,99],[99,60],[60,99]], dtype=numpy.int32)]
</snippet></ROW><ROW><id>14161735</id><snippet>import numpy
import cv2

contours = [numpy.array([[1,1],[10,50],[50,50]], dtype=numpy.int32) , numpy.array([[99,99],[99,60],[60,99]], dtype=numpy.int32)]

drawing = numpy.zeros([100, 100],numpy.uint8)
for cnt in contours:
    cv2.drawContours(drawing,[cnt],0,(255,255,255),2)

cv2.imshow('output',drawing)
cv2.waitKey(0)
</snippet></ROW><ROW><id>14161882</id><snippet>enumerate()</snippet></ROW><ROW><id>14161882</id><snippet>cat_sorted = [
    [e for i, e in sorted(enumerate(cat[0]), key=lambda p: cat[2][p[0]])],
    [e for i, e in sorted(enumerate(cat[1]), key=lambda p: cat[2][p[0]])],
    sorted(cat[2])
]
</snippet></ROW><ROW><id>14161882</id><snippet>cat[2]</snippet></ROW><ROW><id>14161882</id><snippet>sorted()</snippet></ROW><ROW><id>14161882</id><snippet>sorted()</snippet></ROW><ROW><id>14161882</id><snippet>zip()</snippet></ROW><ROW><id>14161882</id><snippet>zip()</snippet></ROW><ROW><id>14161882</id><snippet>from operator import itemgetter
cat_sorted = zip(*sorted(zip(*cat), key=itemgetter(2)))
</snippet></ROW><ROW><id>14162120</id><snippet>MySQLdb</snippet></ROW><ROW><id>14162120</id><snippet>int</snippet></ROW><ROW><id>14162120</id><snippet>long</snippet></ROW><ROW><id>14162120</id><snippet>DATE</snippet></ROW><ROW><id>14162120</id><snippet>datetime</snippet></ROW><ROW><id>14162120</id><snippet>import csv  
with open('file.csv', 'wb') as csvfile:
    csv_ = csv.writer(csvfile)
    csv_.writerow(csv_list)
</snippet></ROW><ROW><id>14162120</id><snippet>quotechar="'", quoting = csv.CONSTANTHERE</snippet></ROW><ROW><id>14162120</id><snippet>1,41,out,20091030_135711-out.wav,264684,1,2009-10-30 13:57:31,Some user &lt;01273123456&gt;,20,1256911031.5482,,
</snippet></ROW><ROW><id>14162120</id><snippet>None</snippet></ROW><ROW><id>14162121</id><snippet>&gt;&gt;&gt; arr = np.array([100.10, 200.42, 4.14, 89.00, 34.55, 1.12])
&gt;&gt;&gt; arr[[1,4,5]]
array([ 200.42,   34.55,    1.12])
</snippet></ROW><ROW><id>14162121</id><snippet>&gt;&gt;&gt; arr = np.arange(9).reshape(3,3)
&gt;&gt;&gt; arr
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
&gt;&gt;&gt; arr[[0, 1, 1], [1, 0, 2]]
array([1, 3, 5])
</snippet></ROW><ROW><id>14162132</id><snippet>class Empty(ndb.Model):
    pass

e = Empty(id="somestring")
e.put()
</snippet></ROW><ROW><id>14162403</id><snippet>limit</snippet></ROW><ROW><id>14162403</id><snippet>oo</snippet></ROW><ROW><id>14162403</id><snippet>inf</snippet></ROW><ROW><id>14162403</id><snippet>n = Symbol("n")
limit((1 + 3/n)**n, n, oo)
</snippet></ROW><ROW><id>14162475</id><snippet>prettyprint=true</snippet></ROW><ROW><id>14162475</id><snippet>from urllib import urlopen
import xml.etree.cElementTree as ET

url = 'http://gdata.youtube.com/feeds/api/videos?q=samsung+mobile&amp;orderby=relevance&amp;start-index=1&amp;max-results=5&amp;v=2'

root = ET.parse(urlopen(url))

def qname(prefix, name, map={'atom':'http://www.w3.org/2005/Atom'}):
    """Helper function for namespaced element names"""
    return '{{{}}}{}'.format(map[prefix], name)


for e in root.findall(qname('atom','entry')):
    print e.findtext(qname('atom','id')), e.findtext(qname('atom','published'))
</snippet></ROW><ROW><id>14162800</id><snippet>command script import /path/to/CustomSummaries.py
</snippet></ROW><ROW><id>14162800</id><snippet>~/.lldbinit</snippet></ROW><ROW><id>14162800</id><snippet>import lldb

def myobject_summary(valueObject, dictionary):

    return 'MyCustomDescription'

def __lldb_init_module(debugger, dict):

    debugger.HandleCommand('type summary add MyObject -F CustomSummaries.myobject_summary')
</snippet></ROW><ROW><id>14162895</id><snippet>import re

def atoi(text):
    return int(text) if text.isdigit() else text.lower()

def natural_keys(text):
    '''
    alist.sort(key=natural_keys) sorts in human order
    http://nedbatchelder.com/blog/200712/human_sorting.html
    (See Toothy's implementation in the comments)
    '''    
    return [ atoi(c) for c in re.split('(\d+)', text) ]

names = ('IMG0.png', 'img12.png', 'img10.png', 'img2.png', 'img1.png', 'IMG3.png')
</snippet></ROW><ROW><id>14162895</id><snippet>print(sorted(names))
# ['IMG0.png', 'IMG3.png', 'img1.png', 'img10.png', 'img12.png', 'img2.png']
</snippet></ROW><ROW><id>14162895</id><snippet>print(sorted(names, key = natural_keys))
# ['IMG0.png', 'img1.png', 'img2.png', 'IMG3.png', 'img10.png', 'img12.png']
</snippet></ROW><ROW><id>14163131</id><snippet>import pylab

formula = r'$x=3^2, y = \frac{1}{\frac{2}{3}}, %s$' % ('test' * 20)

fig = pylab.figure()
text = fig.text(0, 0, formula)

# Saving the figure will render the text.
dpi = 300
fig.savefig('formula.png', dpi=dpi)

# Now we can work with text's bounding box.
bbox = text.get_window_extent()
width, height = bbox.size / float(dpi) + 0.005
# Adjust the figure size so it can hold the entire text.
fig.set_size_inches((width, height))

# Adjust text's vertical position.
dy = (bbox.ymin/float(dpi))/height
text.set_position((0, -dy))

# Save the adjusted text.
fig.savefig('formula.png', dpi=dpi)
</snippet></ROW><ROW><id>14163131</id><snippet>0.005</snippet></ROW><ROW><id>14163131</id><snippet>width</snippet></ROW><ROW><id>14163131</id><snippet>height</snippet></ROW><ROW><id>14163145</id><snippet>regex</snippet></ROW><ROW><id>14163145</id><snippet>import re

p2 = "&lt;x=-0.5478253364562988, y=-0.5376561880111694, z=1.7154035568237305, w=1.0&gt;"
p2 = re.findall("-?\d+.\d+",p2)
p2_xy = p2[0],p2[1]
print ("p2",p2_xy)
</snippet></ROW><ROW><id>14163145</id><snippet>('ps', ('-0.5478253364562988', '-0.5376561880111694'))
</snippet></ROW><ROW><id>14163145</id><snippet>import re

p2 = "&lt;x=-0.5478253364562988, y=-0.5376561880111694, z=1.7154035568237305, w=1.0&gt;"
p2 = re.findall("-?\d+.\d+",p2)
print ("p2",p2[0],p2[1])
</snippet></ROW><ROW><id>14163145</id><snippet>('p2', '-0.5478253364562988', '-0.5376561880111694')
</snippet></ROW><ROW><id>14163162</id><snippet>$.ajax({
  type: "POST",
  contentType: "application/json; charset=utf-8",
  url: "/blog/add/ajax",
  data: '{ "title": "hallo", "article": "test" }',
  success: function (data) {
    console.log(data.title);
    console.log(data.article);
  },
  dataType: "json"
});
</snippet></ROW><ROW><id>14163283</id><snippet>'^[0-9]{2,4}$'
</snippet></ROW><ROW><id>14163283</id><snippet>def is2To4Numbers(q):
    try:
        return 10 &lt;= int(q) &lt;= 9999
    except:
        return False
</snippet></ROW><ROW><id>14163559</id><snippet>sys.path.append('C:\file')
import script
</snippet></ROW><ROW><id>14163955</id><snippet>file</snippet></ROW><ROW><id>14163955</id><snippet>file</snippet></ROW><ROW><id>14163955</id><snippet>filenames</snippet></ROW><ROW><id>14163955</id><snippet>for</snippet></ROW><ROW><id>14163955</id><snippet>print('The bands found (or matches) are', end=' ')
for band in bant:
    for filename in filenames:
        if band == filename:
            print(band + ',', end=' ')
            break
print()
</snippet></ROW><ROW><id>14163955</id><snippet>in</snippet></ROW><ROW><id>14163955</id><snippet>print('The bands found (or matches) are', end=' ')
for band in bant:
    if band in filenames:
        print(band + ',', end=' ')
print()
</snippet></ROW><ROW><id>14163955</id><snippet>print 'The bands found (or matches) are',
for band in bant:
    if band in filenames:
        print band + ',',
print
</snippet></ROW><ROW><id>14163955</id><snippet>enumerate</snippet></ROW><ROW><id>14163955</id><snippet>print('The bands found (or matches) are', end=' ')
for i, band in enumerate(bant):
    if band in filenames:
        print('bant{},'.format(i), end=' ')
print()
</snippet></ROW><ROW><id>14163955</id><snippet>,</snippet></ROW><ROW><id>14163955</id><snippet>,</snippet></ROW><ROW><id>14163955</id><snippet>join</snippet></ROW><ROW><id>14163955</id><snippet>matches = []
for i, band in enumerate(bant):
    if band in filenames:
        matches.append('bant{}'.format(i))
print('The bands found (or matches) are', ', '.join(matches))
</snippet></ROW><ROW><id>14163955</id><snippet>matches = ['bant{}'.format(i) for i, band in enumerate(bant) if band in filenames] 
print('The bands found (or matches) are', ', '.join(matches))
</snippet></ROW><ROW><id>14163955</id><snippet>append</snippet></ROW><ROW><id>14163955</id><snippet>filenames</snippet></ROW><ROW><id>14163955</id><snippet>band</snippet></ROW><ROW><id>14163955</id><snippet>filenames</snippet></ROW><ROW><id>14163955</id><snippet>set</snippet></ROW><ROW><id>14163955</id><snippet>band in filenames</snippet></ROW><ROW><id>14163955</id><snippet>filenameset = set(filename)
matches = ['bant{}.format(i) for i, band in enumerate(bant) if band in filenameset]
print('The bands found (or matches) are', ', '.join(matches))
</snippet></ROW><ROW><id>14163992</id><snippet>pip install mysql-python
</snippet></ROW><ROW><id>14164287</id><snippet># to xyz export a, b, c
import xyz
xyz.a = a
xyz.b = b
xyz.c = c
</snippet></ROW><ROW><id>14164287</id><snippet># to xyz export *
exports = [(k, v) for (k, v) in globals().iteritems() if not k.startswith("_")]
import xyz
for k, v in exports: setattr(xyz, k, v)
</snippet></ROW><ROW><id>14164947</id><snippet>custQuery = db.Query(Customer)
birthdate = datetime.strptime(q,"%Y-%m-%d").date()
custQuery.filter('birthdate = ',birthdate)
</snippet></ROW><ROW><id>14165188</id><snippet>[ param.replace("|", "/") if param is not None else None for param in iterable ]
</snippet></ROW><ROW><id>14165188</id><snippet>[ None if param is None else param.replace("|", "/") for param in iterable ]
</snippet></ROW><ROW><id>14165188</id><snippet>None else None</snippet></ROW><ROW><id>14165188</id><snippet>None</snippet></ROW><ROW><id>14165188</id><snippet>value_if_true if conditional_expression else value_if_false
</snippet></ROW><ROW><id>14165269</id><snippet>describe_stacks</snippet></ROW><ROW><id>14165269</id><snippet>outputs</snippet></ROW><ROW><id>14165269</id><snippet>Output</snippet></ROW><ROW><id>14165937</id><snippet>pbstring = pb.stringForType_(NSString *)dataType
</snippet></ROW><ROW><id>14165937</id><snippet>SyntaxError</snippet></ROW><ROW><id>14165937</id><snippet>pbstring = pb.stringForType_(dataType)
</snippet></ROW><ROW><id>14165937</id><snippet>pbstring = pb.stringForType_(NSString.stringWithString_(dataType))
</snippet></ROW><ROW><id>14165937</id><snippet>NameError</snippet></ROW><ROW><id>14165937</id><snippet>dataType</snippet></ROW><ROW><id>14165937</id><snippet>dataType</snippet></ROW><ROW><id>14165937</id><snippet>stringForType:</snippet></ROW><ROW><id>14165937</id><snippet>pb.types()</snippet></ROW><ROW><id>14165937</id><snippet>Out[153]: 
(
    "NeXT smart paste pasteboard type",
    "com.apple.webarchive",
    "NeXT Rich Text Format v1.0 pasteboard type",
    "public.utf8-plain-text",
    NSStringPboardType,
    …
)
</snippet></ROW><ROW><id>14165937</id><snippet>u"public.utf8-plain-text", but as string constants from one of the Cocoa libraries, like</snippet></ROW><ROW><id>14165937</id><snippet>. If you've done</snippet></ROW><ROW><id>14165937</id><snippet>,</snippet></ROW><ROW><id>14165937</id><snippet>, or similar, you can just refer to it as</snippet></ROW><ROW><id>14165937</id><snippet>In [156]: pb.stringForType_(NSStringPboardType)
Out[156]: u'some text'
</snippet></ROW><ROW><id>14165937</id><snippet>"u'some text'"</snippet></ROW><ROW><id>14165937</id><snippet>u'some text'</snippet></ROW><ROW><id>14165937</id><snippet>setClip</snippet></ROW><ROW><id>14165937</id><snippet>getClip</snippet></ROW><ROW><id>14165937</id><snippet>repr(s)</snippet></ROW><ROW><id>14165937</id><snippet>In [165]: s=u'some text'

In [166]: repr(s)
Out[166]: "u'some text'"

In [167]: s
Out[167]: u'some text'
</snippet></ROW><ROW><id>14165937</id><snippet>Out[166]</snippet></ROW><ROW><id>14165937</id><snippet>getClip()</snippet></ROW><ROW><id>14165937</id><snippet>list</snippet></ROW><ROW><id>14165937</id><snippet>def getClip():
    pb = NSPasteboard.generalPasteboard()
    best_type = pb.availableTypeFromArray_(myFavoriteTypes)
    if best_type:
        return pb.stringForType_(best_type)
</snippet></ROW><ROW><id>14165937</id><snippet>return pb.stringForType_(best_type[0])</snippet></ROW><ROW><id>14165937</id><snippet>availableTypeFromArray_</snippet></ROW><ROW><id>14165937</id><snippet>getClip()</snippet></ROW><ROW><id>14165937</id><snippet>u'some text'</snippet></ROW><ROW><id>14165937</id><snippet>'u"some text"'</snippet></ROW><ROW><id>14165937</id><snippet>In [182]: s=u'some text'

In [183]: s
Out[183]: u'some text'

In [184]: print s
some text
</snippet></ROW><ROW><id>14165937</id><snippet>In [185]: s='some text'

In [186]: s
Out[186]: 'some text'

In [187]: print s
some text
</snippet></ROW><ROW><id>14165937</id><snippet>print</snippet></ROW><ROW><id>14165937</id><snippet>In [332]: getClip()
Out[332]: u"some text"
</snippet></ROW><ROW><id>14165937</id><snippet>s=u'some text'</snippet></ROW><ROW><id>14165937</id><snippet>u</snippet></ROW><ROW><id>14165937</id><snippet>print</snippet></ROW><ROW><id>14165937</id><snippet>In [332]: print getClip()
some text
</snippet></ROW><ROW><id>14165937</id><snippet>In [188]: with open('test.txt', 'w') as f:
   .....:     f.write(getClip())
   .....:
</snippet></ROW><ROW><id>14165937</id><snippet>test.txt</snippet></ROW><ROW><id>14165937</id><snippet>u</snippet></ROW><ROW><id>14165955</id><snippet>object</snippet></ROW><ROW><id>14165955</id><snippet>super</snippet></ROW><ROW><id>14166015</id><snippet>class BufferedFile(object):
    ''' A buffered file that preserves the beginning of a stream up to buffer_size
    '''
    def __init__(self, fp, buffer_size=1024):
        self.data = cStringIO.StringIO()
        self.fp = fp
        self.offset = 0
        self.len = 0
        self.fp_offset = 0
        self.buffer_size = buffer_size

    @property
    def _buffer_full(self):
        return self.len &gt;= self.buffer_size

    def readline(self):
        if self.len &lt; self.offset &lt; self.fp_offset:
            raise BufferError('Line is not available anymore')
        if self.offset &gt;= self.len:
            line = self.fp.readline()
            self.fp_offset += len(line)

            self.offset += len(line)

            if not self._buffer_full:
                self.data.write(line)
                self.len += len(line)
        else:
            line = self.data.readline()
            self.offset += len(line)
        return line

    def seek(self, offset):
        if self.len &lt; offset &lt; self.fp_offset:
            raise BufferError('Cannot seek because data is not buffered here')
        self.offset = offset
        if offset &lt; self.len:
            self.data.seek(offset)
</snippet></ROW><ROW><id>14166244</id><snippet>=</snippet></ROW><ROW><id>14166244</id><snippet>import tokenize
import io
import token
import collections
import keyword

kwset = set(keyword.kwlist)
class Token(collections.namedtuple('Token', 'num val start end line')):
    @property
    def name(self):
        return token.tok_name[self.num]

source = '''
C = A+B
D = C * 4
'''

lastname = None
names = set()
not_dep = set()
for tok in tokenize.generate_tokens(io.BytesIO(source).readline):
    tok = Token(*tok)
    print(tok.name, tok.val)
    if tok.name == 'NAME':
        names.add(tok.val)
        lastname = tok.val
    if tok.name == 'OP' and tok.val == '=':
        not_dep.add(lastname)

print(names)
# set(['A', 'C', 'B', 'D'])
print(not_dep)
# set(['C', 'D'])

deps = dict.fromkeys(names - not_dep - kwset, 1)
print(deps)
# {'A': 1, 'B': 1}
</snippet></ROW><ROW><id>14166244</id><snippet>names</snippet></ROW><ROW><id>14166244</id><snippet>import numpy
</snippet></ROW><ROW><id>14166244</id><snippet>'import'</snippet></ROW><ROW><id>14166244</id><snippet>'numpy'</snippet></ROW><ROW><id>14166244</id><snippet>names</snippet></ROW><ROW><id>14166244</id><snippet>E, F = 1, 2
</snippet></ROW><ROW><id>14166244</id><snippet>F</snippet></ROW><ROW><id>14166301</id><snippet>for subdir, dirs, files in os.walk(rootdir):
    for file in files:
        output=[]
        with open(file, 'r') as inF:
            for line in inF:
                output.append(line)
                if 'criteria' in line: break
        f=open(file, 'a')
        Lorem_list=['Lorem Ipsum','Lorem Ipsum','Lorem Ipsum']
        #The '\n' may look strange, but I am using your previous syntax.
        #This also will result in a blank line. I would suggest revising the
        #way you place text to follow the (x+'\n') format.
        [f.write(x) for x in output]
        [f.write('\n      '+x) for x in Lorem_list]
        f.close()
</snippet></ROW><ROW><id>14166301</id><snippet>Lorem_list=['Lorem Ipsum','Lorem Ipsum','Lorem Ipsum']
[f.write('\n      '+x) for x in Lorem_list]
</snippet></ROW><ROW><id>14166301</id><snippet>    f.write("\n      Lorem Ipsum")
    f.write("\n      Lorem Ipsum")
    f.write("\n      Lorem Ipsum")
</snippet></ROW><ROW><id>14166311</id><snippet>202 Accepted</snippet></ROW><ROW><id>14166346</id><snippet>setattr(self, item, property(...
</snippet></ROW><ROW><id>14166346</id><snippet>__getattr__()</snippet></ROW><ROW><id>14166346</id><snippet>__setattr__()</snippet></ROW><ROW><id>14166346</id><snippet>__delattr__()</snippet></ROW><ROW><id>14166631</id><snippet>current_url</snippet></ROW><ROW><id>14166631</id><snippet>from selenium import webdriver
browser = webdriver.Firefox()
browser.get('http://www.google.com')
print browser.current_url
</snippet></ROW><ROW><id>14166646</id><snippet>i = {v: k for (k, v) in d.items()}
</snippet></ROW><ROW><id>14166646</id><snippet>d</snippet></ROW><ROW><id>14166646</id><snippet>iteritems</snippet></ROW><ROW><id>14166646</id><snippet>dict</snippet></ROW><ROW><id>14166646</id><snippet>dicts</snippet></ROW><ROW><id>14166646</id><snippet>dict</snippet></ROW><ROW><id>14166646</id><snippet>i = {}
for k, v in d.items():
    for k2, v2 in v.items():
        i[v2] = (k, k2)
</snippet></ROW><ROW><id>14166661</id><snippet>public void execute(GraphModel graphModel, AttributeModel attributeModel);

public void execute(HierarchicalGraph hgraph, AttributeModel attributeModel);
</snippet></ROW><ROW><id>14166709</id><snippet>str</snippet></ROW><ROW><id>14166709</id><snippet>repr</snippet></ROW><ROW><id>14166709</id><snippet>list</snippet></ROW><ROW><id>14166709</id><snippet>repr</snippet></ROW><ROW><id>14166709</id><snippet>repr(team)</snippet></ROW><ROW><id>14166709</id><snippet>Teams</snippet></ROW><ROW><id>14166709</id><snippet>&lt;main.Teams object at 0x02953230&gt;</snippet></ROW><ROW><id>14166709</id><snippet>__repr__</snippet></ROW><ROW><id>14166709</id><snippet>Teams</snippet></ROW><ROW><id>14166709</id><snippet>TeamList</snippet></ROW><ROW><id>14166709</id><snippet>Teams</snippet></ROW><ROW><id>14166709</id><snippet>TeamName</snippet></ROW><ROW><id>14166709</id><snippet>list comprehension</snippet></ROW><ROW><id>14166709</id><snippet>TeamNameList = [team.TeamName for team in TeamList]
</snippet></ROW><ROW><id>14166709</id><snippet>&gt;&gt;&gt; print TeamNameList
['North Carolina', 'South Carolina', 'West Carolina', 'East Carolina', 'Underground Carolina', 'Cloud-level Carolina', 'Past Carolina', 'Future Carolina'] # those are all states, right?
</snippet></ROW><ROW><id>14166709</id><snippet>&gt;&gt;&gt; print ', '.join(TeamNameList)
North Carolina, South Carolina, West Carolina, East Carolina, Underground Carolina, Cloud-level Carolina, Past Carolina, Future Carolina
</snippet></ROW><ROW><id>14166709</id><snippet>TeamList</snippet></ROW><ROW><id>14166709</id><snippet>dict</snippet></ROW><ROW><id>14166709</id><snippet>Teams</snippet></ROW><ROW><id>14166709</id><snippet>TeamDict = {team.TeamName: team for team in TeamList}
</snippet></ROW><ROW><id>14166709</id><snippet>simGame(TeamDict['North Carolina'], TeamDict['South Carolina'])
</snippet></ROW><ROW><id>14166709</id><snippet>simGame</snippet></ROW><ROW><id>14166709</id><snippet>Teams</snippet></ROW><ROW><id>14166709</id><snippet>teamA</snippet></ROW><ROW><id>14166709</id><snippet>teamB</snippet></ROW><ROW><id>14166709</id><snippet>def simGame(teamA, teamB):
    scoreA = int(teamA.FT * 1 * 20) + int(teamA.FG * 2 * 40) + int(teamA.Three * 3 * 10)
    scoreB = int(teamB.FT * 1 * 20) + int(teamB.FG * 2 * 40) + int(teamB.Three * 3 * 10)
    if scoreA &gt; scoreB:
        print 'Home team {} beats visitor {} by {}!'.format(teamA.TeamName,
                                                            teamB.TeamName,
                                                            scoreA - scoreB)
    else:
        print 'Visitors {} win by {} over {} at home!'.format(teamB.TeamName,
                                                              scoreB - scoreA,
                                                              teamA.TeamName)
</snippet></ROW><ROW><id>14166709</id><snippet>map</snippet></ROW><ROW><id>14166709</id><snippet>team</snippet></ROW><ROW><id>14166709</id><snippet>TeamNameList = map(operator.attrgetter('TeamName'), TeamList)
</snippet></ROW><ROW><id>14166709</id><snippet>map</snippet></ROW><ROW><id>14166709</id><snippet>lambda</snippet></ROW><ROW><id>14166709</id><snippet>team</snippet></ROW><ROW><id>14166709</id><snippet>TeamNameList = map(lambda team: team.teamName, TeamList)
</snippet></ROW><ROW><id>14166709</id><snippet>map</snippet></ROW><ROW><id>14166709</id><snippet>list</snippet></ROW><ROW><id>14166709</id><snippet>print TeamNameList</snippet></ROW><ROW><id>14166709</id><snippet>&lt;builtins.map at 0x108022350&gt;</snippet></ROW><ROW><id>14166709</id><snippet>', '.join(TeamNameList)</snippet></ROW><ROW><id>14166709</id><snippet>TeamName</snippet></ROW><ROW><id>14166709</id><snippet>  name = info[0]
  FT = info[1]
  FG = info[2]
  Three = info[3]
  newTeam = (name, FT, FG, Three)
</snippet></ROW><ROW><id>14166709</id><snippet>info</snippet></ROW><ROW><id>14166709</id><snippet>newTeam</snippet></ROW><ROW><id>14166709</id><snippet>  newTeam2 = Teams(newTeam[0],newTeam[1],newTeam[2],newTeam[3])
</snippet></ROW><ROW><id>14166709</id><snippet>  newTeam2 = Teams(info[0],info[1],newTeam[2],newTeam[3])
</snippet></ROW><ROW><id>14166709</id><snippet>  newTeam2 = Teams(*info)
</snippet></ROW><ROW><id>14166709</id><snippet>newTeam</snippet></ROW><ROW><id>14166709</id><snippet>  newTeam2 = Teams(name, FT, FG, Three)
</snippet></ROW><ROW><id>14166888</id><snippet>In [47]: def with_indexing(dstr):                              
   ....:     return datetime.datetime(*map(int, [dstr[:4], dstr[5:7], dstr[8:10],
   ....:                               dstr[11:13], dstr[14:16], dstr[17:]])) 

In [48]: p = re.compile('[-T:]')

In [49]: def with_regex(dt_str):
   ....:     return datetime.datetime(*map(int, p.split(dt_str)))

In [50]: %timeit with_regex(dstr)
100000 loops, best of 3: 3.84 us per loop

In [51]: %timeit with_indexing(dstr)
100000 loops, best of 3: 2.98 us per loop
</snippet></ROW><ROW><id>14166888</id><snippet>numpy.genfromtxt</snippet></ROW><ROW><id>14166888</id><snippet>converters</snippet></ROW><ROW><id>14166888</id><snippet>import numpy as np
import pandas as pd

def create_data():
    # create dates
    dates = pd.date_range('2010-01-01T00:30', '2013-01-04T23:30', freq='H')
    # convert to iso
    iso_dates = dates.map(lambda x: x.strftime('%Y-%m-%dT%H:%M:%S'))
    # create data
    data = pd.DataFrame(np.random.random((iso_dates.size, 10)) * 100,
                        index=iso_dates)
    # write to file
    data.to_csv('dates.csv', header=False)
</snippet></ROW><ROW><id>14166888</id><snippet>In [54]: %timeit a = np.genfromtxt('dates.csv', delimiter=',',
                                   converters={0:with_regex})
1 loops, best of 3: 430 ms per loop

In [55]: %timeit a = np.genfromtxt('dates.csv', delimiter=',',
                                   converters={0:with_indexing})
1 loops, best of 3: 391 ms per loop
</snippet></ROW><ROW><id>14166888</id><snippet>In [56]: %timeit df = pd.read_csv('dates.csv', header=None, index_col=0, 
                                  parse_dates=True, date_parser=with_indexing)
10 loops, best of 3: 167 ms per loop
</snippet></ROW><ROW><id>14166895</id><snippet>from subprocess import call
call(["ls", "-l"])
</snippet></ROW><ROW><id>14166895</id><snippet>subprocess</snippet></ROW><ROW><id>14166895</id><snippet>system</snippet></ROW><ROW><id>14166934</id><snippet>d</snippet></ROW><ROW><id>14166934</id><snippet>self.d()</snippet></ROW><ROW><id>14167240</id><snippet>pip search bdd
</snippet></ROW><ROW><id>14167304</id><snippet>import sys
print sys.argv[1]
</snippet></ROW><ROW><id>14167497</id><snippet>e = ['spam', ['aa','bb','cc','dd']]

def format(keyword, entries):
    return [(keyword, x) for x in entries[1][0]]

format(e[0], e[1])
[('spam', 'b')]
</snippet></ROW><ROW><id>14167497</id><snippet>def format(keyword, entries):
    return [(keyword, x) for x in entries]

format(e[0], e[1])
[('spam', 'aa'), ('spam', 'bb'), ('spam', 'cc'), ('spam', 'dd')]
</snippet></ROW><ROW><id>14167671</id><snippet>if request.method == 'POST':
    form = MyForm(request.POST, request.FILES)
    if form.is_valid():
        uploaded_file = request.FILES['html-file-attribute-name']

        # Write the file to disk
        fout = open("path/to/save/file/to/%s" % uploaded_file.name, 'wb')
        for chunk in uploaded_file.chunks():
            fout.write(chunk)
        fout.close()
</snippet></ROW><ROW><id>14167690</id><snippet>connection_timeout</snippet></ROW><ROW><id>14167710</id><snippet>INSERT or REPLACE ...</snippet></ROW><ROW><id>14167710</id><snippet>name</snippet></ROW><ROW><id>14167710</id><snippet>name</snippet></ROW><ROW><id>14167710</id><snippet>name</snippet></ROW><ROW><id>14167710</id><snippet>CREATE UNIQUE INDEX IF NOT EXISTS iname ON t1 (name)
</snippet></ROW><ROW><id>14167710</id><snippet>id</snippet></ROW><ROW><id>14167710</id><snippet>ROWID</snippet></ROW><ROW><id>14167765</id><snippet>Run</snippet></ROW><ROW><id>14167825</id><snippet>a = b = c = 0</snippet></ROW><ROW><id>14167916</id><snippet>headers</snippet></ROW><ROW><id>14167916</id><snippet>&lt;th&gt;</snippet></ROW><ROW><id>14167916</id><snippet>&lt;td&gt;</snippet></ROW><ROW><id>14167916</id><snippet>table</snippet></ROW><ROW><id>14167916</id><snippet>find</snippet></ROW><ROW><id>14167916</id><snippet>headers</snippet></ROW><ROW><id>14167916</id><snippet>th</snippet></ROW><ROW><id>14167916</id><snippet>rows</snippet></ROW><ROW><id>14167916</id><snippet>td</snippet></ROW><ROW><id>14167916</id><snippet>tr</snippet></ROW><ROW><id>14167916</id><snippet>text</snippet></ROW><ROW><id>14167916</id><snippet>headers</snippet></ROW><ROW><id>14167916</id><snippet>rows, but using</snippet></ROW><ROW><id>14167916</id><snippet>In [117]: import csv

In [118]: from bs4 import BeautifulSoup

In [119]: from urllib2 import urlopen

In [120]: soup = BeautifulSoup(urlopen('http://www.fsa.gov.uk/about/media/facts/fines/2002'))

In [121]: table = soup.find('table', attrs={ "class" : "table-horizontal-line"})

In [122]: headers = [header.text for header in table.find_all('th')]

In [123]: rows = []

In [124]: for row in table.find_all('tr'):
   .....:     rows.append([val.text.encode('utf8') for val in row.find_all('td')])
   .....: 

In [125]: with open('output_file.csv', 'wb') as f:
   .....:     writer = csv.writer(f)
   .....:     writer.writerow(headers)
   .....:     writer.writerows(row for row in rows if row)
   .....: 

In [126]: cat output_file.csv
Amount,Company or person fined,Date,What was the fine for?,Compensation
" £4,000,000",Credit Suisse First Boston International ,19/12/02,Attempting to mislead the Japanese regulatory and tax authorities, 
"£750,000",Royal Bank of Scotland plc,17/12/02,Breaches of money laundering rules, 
"£1,000,000",Abbey Life Assurance Company ltd,04/12/02,Mortgage endowment mis-selling and other failings,Compensation estimated to be between £120 and £160 million
"£1,350,000",Royal &amp; Sun Alliance Group,27/08/02,Pension review failings,Redress exceeding £32 million
"£4,000",F T Investment &amp; Insurance Consultants,07/08/02,Pensions review failings, 
"£75,000",Seymour Pierce Ellis ltd,18/06/02,"Breaches of FSA Principles (""skill, care and diligence"" and ""internal organization"")", 
"£120,000",Ward Consultancy plc,14/05/02,Pension review failings, 
"£140,000",Shawlands Financial Services ltd - formerly Frizzell Life &amp; Financial Planning ltd),11/04/02,Record keeping and associated compliance breaches, 
"£5,000",Woodward's Independent Financial Advisers,04/04/02,Pensions review failings, 
</snippet></ROW><ROW><id>14167942</id><snippet>substitute</snippet></ROW><ROW><id>14167942</id><snippet>substitute</snippet></ROW><ROW><id>14167942</id><snippet>Z3_substitute</snippet></ROW><ROW><id>14167942</id><snippet>th_rewriter</snippet></ROW><ROW><id>14167979</id><snippet>historyE = ET.Element('historical data')
</snippet></ROW><ROW><id>14168010</id><snippet>for obj in bpy.data.objects:
    obj.tag = True

bpy.import_scene.obj(filepath="somefile.obj")

imported_objects = [obj for obj in bpy.data.objects if obj.tag is False]
</snippet></ROW><ROW><id>14168012</id><snippet>uwsgi_read_timeout</snippet></ROW><ROW><id>14168052</id><snippet>&gt;&gt;&gt; tag = u'\xc1\xf3\xf0\xe6\xf3\xe9\xf1\xea\xe8\xe5 \xef\xeb\xff\xf1\xea\xe8'
&gt;&gt;&gt; raw = tag.encode('latin-1'); raw
'\xc1\xf3\xf0\xe6\xf3\xe9\xf1\xea\xe8\xe5 \xef\xeb\xff\xf1\xea\xe8'
</snippet></ROW><ROW><id>14168052</id><snippet>&gt;&gt;&gt; fixed = raw.decode('cp1251'); print fixed
Буржуйские пляски
</snippet></ROW><ROW><id>14168176</id><snippet>def recv(sock, size):
    data = ''
    to_receive = size
    while to_receive &gt; 0:
        data += sock.recv(to_receive)
        to_receive = size - len(data)
    return data
</snippet></ROW><ROW><id>14168176</id><snippet>import sys
import socket
import struct

serv_host = ''
serv_port = 29876

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((serv_host, serv_port))

# Tell the server how many triplets I want.
amount = int(sys.argv[1])
s.sendall(struct.pack('!i', amount))
pack_size = struct.calcsize('!bbb')
while amount:
    status, dx, dy = struct.unpack('!bbb', recv(s, pack_size))
    print status, dx, dy
    amount -= 1

s.close()
</snippet></ROW><ROW><id>14168176</id><snippet>import socket
import struct

def to_signed(n):
    return n - ((0x80 &amp; n) &lt;&lt; 1)

mouse = open('/dev/input/mouse0')

host = ''
port = 29876
backlog = 5

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind((host, port))
s.listen(backlog)
print 'Listening'
while True:
    client, address = s.accept()

    # Obtain the number of triplets the client wants.
    amount = struct.unpack('!i', recv(client, 4))[0]
    while amount: # Send the triplets as they become available.
        status, dx, dy = map(ord, mouse.read(3))
        dx, dy = to_signed(dx), to_signed(dy)
        print status, dx, dy
        client.sendall(struct.pack('!bbb', status, dx, dy))
        amount -= 1

    client.close()
</snippet></ROW><ROW><id>14168219</id><snippet>requirements.txt</snippet></ROW><ROW><id>14168219</id><snippet>MyApp
BeautifulSoup==3.2.1
SomeOtherLib==0.9.4
YetAnother&gt;=0.2
</snippet></ROW><ROW><id>14168219</id><snippet>$ pip install -r requirements.txt
</snippet></ROW><ROW><id>14168398</id><snippet>cat ~raxacoricofallapatorius/foo.txt</snippet></ROW><ROW><id>14168398</id><snippet>cat</snippet></ROW><ROW><id>14168398</id><snippet>lvc@tiamat:~/Projects$ echo ~
/home/lvc
</snippet></ROW><ROW><id>14168398</id><snippet>.</snippet></ROW><ROW><id>14168398</id><snippet>..</snippet></ROW><ROW><id>14168398</id><snippet>lvc@tiamat:~/Projects$ file ..
..: directory
lvc@tiamat:~/Projects$ file ~
/home/lvc: directory
</snippet></ROW><ROW><id>14168398</id><snippet>file</snippet></ROW><ROW><id>14168398</id><snippet>..</snippet></ROW><ROW><id>14168398</id><snippet>~</snippet></ROW><ROW><id>14168398</id><snippet>expanduser</snippet></ROW><ROW><id>14168398</id><snippet>expandvars</snippet></ROW><ROW><id>14168398</id><snippet>abspath</snippet></ROW><ROW><id>14168455</id><snippet>from BeautifulSoup import BeautifulSoup as Soup

file = 'data.xml'
handler = open(file).read()

soup = Soup(handler)

data = soup.find('aws:temp')
print data.text
</snippet></ROW><ROW><id>14168455</id><snippet>import feedparser
import string

d = feedparser.parse(
    'http://api.wxbug.net/getLiveCompactWeatherRSS.aspx?ACode=A6787859817&amp;zipcode=18657&amp;unittype=0')

print str(d.feed['aws_weather']).translate(None, string.ascii_letters)
</snippet></ROW><ROW><id>14168486</id><snippet>colorMap</snippet></ROW><ROW><id>14168486</id><snippet>int</snippet></ROW><ROW><id>14168486</id><snippet>lambda</snippet></ROW><ROW><id>14168486</id><snippet>int</snippet></ROW><ROW><id>14168486</id><snippet>colorMap = []
...
    dist = dist_3d(colors[i], source)
    colorMap.append((dist, colors[i]))
</snippet></ROW><ROW><id>14168486</id><snippet>kdtree</snippet></ROW><ROW><id>14168486</id><snippet>from kdtree import KDTree

colors = [(10,10,10),(250,50,5),(100,50,20)]
query_color = (175, 25, 50)

tree = KDTree.construct_from_data(data)
# query the 2 closest colors
nearest = tree.query(query_point=query_color, t=2)
</snippet></ROW><ROW><id>14168516</id><snippet>bytes</snippet></ROW><ROW><id>14168516</id><snippet>bytes([initialValue])*width
</snippet></ROW><ROW><id>14168661</id><snippet>#!/usr/bin/env python

import sys
from collections import Counter
from itertools import islice
from pprint import pprint

def split_every(n, iterable):
    i = iter(iterable)
    piece = ''.join(list(islice(i, n)))
    while piece:
        yield piece
        piece = ''.join(list(islice(i, n)))

def main(text):
    """ return ngrams for text """
    freqs = Counter()
    for pair in split_every(2, text): # adjust n here
        freqs[pair] += 1
    return freqs

if __name__ == '__main__':
    with open(sys.argv[1]) as handle:
        freqs = main(handle.read()) 
        pprint(freqs.most_common(10))
</snippet></ROW><ROW><id>14168661</id><snippet>$ python 14168601.py lorem.txt
[('t ', 32),
 (' e', 20),
 ('or', 18),
 ('at', 16),
 (' a', 14),
 (' i', 14),
 ('re', 14),
 ('e ', 14),
 ('in', 14),
 (' c', 12)]
</snippet></ROW><ROW><id>14168846</id><snippet>l=['A1','A2','A3','B1','B2','B3','C1','C2','C3','D1','D2','D3']
result = [i + j for i in l for j in l if int(j[1]) == int(i[1]) + 1 or (j[1] == '1' and i[1] == '3')]
print(result)
</snippet></ROW><ROW><id>14168846</id><snippet>['A1A2', 'A1B2', 'A1C2', 'A1D2', 'A2A3', 'A2B3', 'A2C3', 'A2D3', 'A3A1', 'A3B1', 'A3C1', 'A3D1', 'B1A2', 'B1B2', 'B1C2', 'B1D2', 'B2A3', 'B2B3', 'B2C3', 'B2D3', 'B3A1', 'B3B1', 'B3C1', 'B3D1', 'C1A2', 'C1B2', 'C1C2', 'C1D2', 'C2A3', 'C2B3', 'C2C3', 'C2D3', 'C3A1', 'C3B1', 'C3C1', 'C3D1', 'D1A2', 'D1B2', 'D1C2', 'D1D2', 'D2A3', 'D2B3', 'D2C3', 'D2D3', 'D3A1', 'D3B1', 'D3C1', 'D3D1']
</snippet></ROW><ROW><id>14168846</id><snippet>l=['A1','A2','A3','B1','B2','B3','C1','C2','C3','D1','D2','D3']
result = []
for i in l:
    for j in l:
        if int(j[1]) == int(i[1]) + 1 or (j[1] == '1' and i[1] == '3'):
            result.append(i+j)
print(result)
</snippet></ROW><ROW><id>14168889</id><snippet>class Meta:
    permissions = [('can_add', 'Add product to company'), etc...]
</snippet></ROW><ROW><id>14168889</id><snippet>def save():
    # Create a permission group named %s_group % company_name
    # assign(permission, group) - add the permissions to this group.
</snippet></ROW><ROW><id>14169044</id><snippet>&gt;&gt;&gt; nums = (13, 42)
&gt;&gt;&gt; '{0} is {1}'.format('my stuff', ''.join('{:02X}'.format(a) for a in nums))
'my stuff is 0D2A'
</snippet></ROW><ROW><id>14169044</id><snippet>myFormatter.format('{0} is {1:list}', 'my stuff', (13, 42))</snippet></ROW><ROW><id>14169044</id><snippet>class ListFormatter(string.Formatter):
    def format_field(self, value, spec):
        if spec == 'list':
            return ''.join('{:02X}'.format(a) for a in value)
        else:
            return super(ListFormatter, self).format_field(value, spec)

&gt;&gt;&gt; lf = ListFormatter()
&gt;&gt;&gt; lf.format('{0} is {1:list}', 'my stuff', [1, 43])
'my stuff is 012B'
</snippet></ROW><ROW><id>14169472</id><snippet>query = Game.objects.all().query
query.group_by = ['date']
results = QuerySet(query=query, model=Game)
</snippet></ROW><ROW><id>14169558</id><snippet>datetime.datetime</snippet></ROW><ROW><id>14169558</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>14169558</id><snippet>In [6]: start_end = pd.DataFrame({'status': [0, 0]},
                                 index=[pd.datetools.parse('1/1/2012'),
                                        pd.datetools.parse('12/31/2012')])

In [7]: df = df.append(start_end).sort()

In [8]: df
Out[8]: 
                     status
2012-01-01 00:00:00       0
2012-01-01 12:43:35       1
2012-03-12 15:46:43       0
2012-09-26 18:35:11       1
2012-11-11 02:34:59       0
2012-12-31 00:00:00       0

In [9]: pydatetime = pd.Series(df.index.to_pydatetime(), index=df.index)

In [11]: df['duration'] = pydatetime.diff().shift(-1).\
              map(datetime.timedelta.total_seconds, na_action='ignore')

In [16]: df
Out[16]: 
                     status  duration
2012-01-01 00:00:00       0     45815
2012-01-01 12:43:35       1   6145388
2012-03-12 15:46:43       0  17117308
2012-09-26 18:35:11       1   3916788
2012-11-11 02:34:59       0   4310701
2012-12-31 00:00:00       0       NaN

In [17]: (df.status * df.duration).sum() / df.duration.sum()
Out[17]: 0.31906950786402843
</snippet></ROW><ROW><id>14169558</id><snippet>status</snippet></ROW><ROW><id>14169558</id><snippet>df1</snippet></ROW><ROW><id>14169558</id><snippet>timedelta.total_seconds()</snippet></ROW><ROW><id>14169558</id><snippet>In [8]: timeit delta_method(df)
1000 loops, best of 3: 1.3 ms per loop

In [9]: timeit redindexing(df)
1 loops, best of 3: 2.78 s per loop
</snippet></ROW><ROW><id>14169781</id><snippet>getattr(self, task_name)</snippet></ROW><ROW><id>14169781</id><snippet>(task_name, task_args)</snippet></ROW><ROW><id>14169781</id><snippet>task_args</snippet></ROW><ROW><id>14169781</id><snippet>next_task_name, next_task_args = self.task_q.get()
if next_task_name:
  task = getattr(self, next_task_name)
  answer = task(**next_task_args)
  ...
else:
  # poison pill, shut down
  break
</snippet></ROW><ROW><id>14169997</id><snippet>define_units()</snippet></ROW><ROW><id>14169997</id><snippet>predefined</snippet></ROW><ROW><id>14169997</id><snippet>import units
import units.predefined

units.predefined.define_units()
one_liter = unit('L')(1)
unit('mL')(one_liter)
</snippet></ROW><ROW><id>14170094</id><snippet>s.sendall(b"mkd '/" + folder + b"/New Folder/'\r\n")
</snippet></ROW><ROW><id>14170094</id><snippet>shlex.quote()</snippet></ROW><ROW><id>14170094</id><snippet>pipes.quote()</snippet></ROW><ROW><id>14170094</id><snippet>cmd = "mkd {}".format(shlex.quote(posixpath.join(folder, "New Folder")))
s.sendall(cmd.encode() + b"\r\n") # send as utf-8
</snippet></ROW><ROW><id>14170094</id><snippet>folder</snippet></ROW><ROW><id>14170094</id><snippet>folder</snippet></ROW><ROW><id>14170094</id><snippet>folder.decode()</snippet></ROW><ROW><id>14170094</id><snippet>folder</snippet></ROW><ROW><id>14170094</id><snippet>os.fsdecode()</snippet></ROW><ROW><id>14170094</id><snippet>folder</snippet></ROW><ROW><id>14170476</id><snippet>#!/usr/bin/env python3
#-*- coding:utf-8 -*-

import os.path
import urllib.request
from urllib.parse import urlencode
from http.cookiejar import CookieJar,MozillaCookieJar

cj = MozillaCookieJar()
opener = urllib.request.build_opener(urllib.request.HTTPCookieProcessor(cj))
urllib.request.install_opener(opener)

cookie_file=os.path.abspath('./cookies.txt')

def load_cookies(cj,cookie_file):
    cj.load(cookie_file)
def save_cookies(cj,cookie_file):
    cj.save(cookie_file,ignore_discard=True,ignore_expires=True)

def dorequest(url,cj=None,data=None,timeout=10,encoding='UTF-8'):
    data = urlencode(data).encode(encoding) if data else None

    request = urllib.request.Request(url)
    request.add_header('User-Agent','Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)')
    f = urllib.request.urlopen(request,data,timeout=timeout)
    return f.read()

def dopost(url,cj=None,data=None,timeout=10,encoding='UTF-8'):
    body = dorequest(url,cj,data,timeout,encoding)
    return body.decode(encoding)
</snippet></ROW><ROW><id>14170707</id><snippet>from xml.etree import ElementTree as ET

def get_items(elements):
    D = {elem.get("id"): dict((child.tag, child.text) for child in elem) 
         for elem in elements}
    return D

tree = ET.parse("item.xml")
options = tree.findall(".//option")
sections = tree.findall(".//section")

print "options:"
print get_items(options)
print "sections:"
print get_items(sections)
</snippet></ROW><ROW><id>14170707</id><snippet>options:
{'aeb12f-91b3-57': {'name': 'Foo', 'number': '92309'}, '123b25-1323-2f': {'name': 'Bla', 'number': '0123987'}}
sections:
{'928374-11b3-51': {'name': 'oof', 'number': '92309'}, 'aeee72-0965-66': {'name': 'alb', 'number': '0123987'}}
</snippet></ROW><ROW><id>14170749</id><snippet>akom</snippet></ROW><ROW><id>14170749</id><snippet>import akom.ini</snippet></ROW><ROW><id>14170749</id><snippet>import ini</snippet></ROW><ROW><id>14170749</id><snippet>ini.py</snippet></ROW><ROW><id>14170749</id><snippet>Configuration</snippet></ROW><ROW><id>14170749</id><snippet>import akom.Configuration.ini</snippet></ROW><ROW><id>14170804</id><snippet>notecard.settings</snippet></ROW><ROW><id>14170830</id><snippet>i_workbook_id</snippet></ROW><ROW><id>14170830</id><snippet>OR</snippet></ROW><ROW><id>14170830</id><snippet>i_workbook_id</snippet></ROW><ROW><id>14170830</id><snippet>i_workbook_id</snippet></ROW><ROW><id>14170830</id><snippet>prefix</snippet></ROW><ROW><id>14170830</id><snippet>SELECT</snippet></ROW><ROW><id>14170830</id><snippet>WHERE</snippet></ROW><ROW><id>14170874</id><snippet>.stripped_strings</snippet></ROW><ROW><id>14170874</id><snippet>rows = table.find_all('tr', class_=('rowLight', 'rowDark'))
for row in rows:
    print list(row.stripped_strings)
</snippet></ROW><ROW><id>14170874</id><snippet>[u'Task1', u'Assigned to', u'Harry']
[u'Task2', u'Rejected by', u'Lopa']
[u'Task5', u'Accepted By', u'Mathew']
</snippet></ROW><ROW><id>14170874</id><snippet>data = [list(r.stripped_strings) for r in rows[:-1]]
</snippet></ROW><ROW><id>14170874</id><snippet>data = [[u'Task1', u'Assigned to', u'Harry'], [u'Task2', u'Rejected by', u'Lopa']]
</snippet></ROW><ROW><id>14170874</id><snippet>.find_all()</snippet></ROW><ROW><id>14170874</id><snippet>ResultSet</snippet></ROW><ROW><id>14171220</id><snippet>ImportError</snippet></ROW><ROW><id>14171220</id><snippet>dev_appserver.py</snippet></ROW><ROW><id>14171220</id><snippet>def fix_sys_path(extra_extra_paths=()):
  """Fix the sys.path to include our extra paths."""
  extra_paths = EXTRA_PATHS[:]
  extra_paths.extend(extra_extra_paths)
  sys.path = extra_paths + sys.path
</snippet></ROW><ROW><id>14171220</id><snippet>sys.path</snippet></ROW><ROW><id>14171220</id><snippet>webapp2</snippet></ROW><ROW><id>14171220</id><snippet>EXTRA_PATHS = [
  # ...other similar setups...
  os.path.join(DIR_PATH, 'lib', 'webapp2'),
  # ...other similar setups...
]
</snippet></ROW><ROW><id>14171220</id><snippet>import webapp2</snippet></ROW><ROW><id>14171220</id><snippet>webapp2</snippet></ROW><ROW><id>14171220</id><snippet>try/except</snippet></ROW><ROW><id>14171220</id><snippet>ImportError</snippet></ROW><ROW><id>14171220</id><snippet>"""Module information."""
import sys

try:
    import webapp2
except ImportError:
    if __name__ == '__main__':
        print __doc__
    else:
        print 'Webapp2 not found'
    sys.exit(1)


class MainPage(webapp2.RequestHandler):
    def get(self):
        self.response.headers['Content-Type'] = 'text/plain'
        self.response.out.write('Hello, webapp World!')

app = webapp2.WSGIApplication([('/', MainPage)],
                              debug=True)
</snippet></ROW><ROW><id>14171220</id><snippet>Module information</snippet></ROW><ROW><id>14171272</id><snippet>help(pie)</snippet></ROW><ROW><id>14171272</id><snippet>  *autopct*: [ *None* | format string | format function ]
    If not *None*, is a string or function used to label the
    wedges with their numeric value.  The label will be placed inside
    the wedge.  If it is a format string, the label will be ``fmt%pct``.
    If it is a function, it will be called.
</snippet></ROW><ROW><id>14171272</id><snippet>figure(1, figsize=(6,6))
ax = axes([0.1, 0.1, 0.8, 0.8])
labels = 'Frogs', 'Hogs', 'Dogs', 'Logs'
fracs = [15, 30, 45, 10]
total = sum(fracs)
explode=(0, 0.05, 0, 0)
pie(fracs, explode=explode, labels=labels,
    autopct=lambda(p): '{:.0f}'.format(p * total / 100),
    shadow=True, startangle=90)
show()
</snippet></ROW><ROW><id>14171325</id><snippet>url(r'/category/(?P&lt;slug&gt;\w+)/$', CategoryView.as_view(), name='category_view'),
</snippet></ROW><ROW><id>14171325</id><snippet>@models.permalink
def get_absolute_url(self):
    return ('category_view', (), {'slug': self.slug})
</snippet></ROW><ROW><id>14171325</id><snippet>reverse</snippet></ROW><ROW><id>14171433</id><snippet>&lt;</snippet></ROW><ROW><id>14171433</id><snippet>&lt;</snippet></ROW><ROW><id>14171433</id><snippet>lxml</snippet></ROW><ROW><id>14171433</id><snippet>lxml</snippet></ROW><ROW><id>14171433</id><snippet>lxml</snippet></ROW><ROW><id>14171433</id><snippet>html5lib</snippet></ROW><ROW><id>14171433</id><snippet>html5lib</snippet></ROW><ROW><id>14171433</id><snippet>&lt;</snippet></ROW><ROW><id>14171433</id><snippet>&lt;</snippet></ROW><ROW><id>14171433</id><snippet>&gt;&gt;&gt; BeautifulSoup("&lt;div&gt; &lt; 20 &lt;/div&gt;", "html5lib")
&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;div&gt; &lt; 20 &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>14171486</id><snippet>import time
from datetime import datetime

t = datetime.now()
t1 = t.timetuple()

print time.mktime(t1)
</snippet></ROW><ROW><id>14171735</id><snippet>tweets = data['results']
tweets.sort(key=lambda tw: tw['from_user_name'], reverse=True)
</snippet></ROW><ROW><id>14171735</id><snippet>tw['from_user_name']</snippet></ROW><ROW><id>14171735</id><snippet>tw['from_user_name']</snippet></ROW><ROW><id>14171735</id><snippet>from collections import Counter

tweets = data['results']
count = Counter(tw['from_user_name'] for tw in tweets)
tweets.sort(key=lambda tw: count[tw['from_user_name']], reverse=True)
</snippet></ROW><ROW><id>14171735</id><snippet>print("\n".join(count.most_common(10)))
</snippet></ROW><ROW><id>14171782</id><snippet>deque</snippet></ROW><ROW><id>14171782</id><snippet>from collections import deque

def round_robin_even(d, n):
    for i in range(n - 1):
        yield [[d[j], d[-j-1]] for j in range(n/2)]
        d[0], d[-1] = d[-1], d[0]
        d.rotate()

def round_robin_odd(d, n):
    for i in range(n):
        yield [[d[j], d[-j-1]] for j in range(n/2)]
        d.rotate()

def round_robin(n):
    d = deque(range(n))
    if n % 2 == 0:
        return list(round_robin_even(d, n))
    else:
        return list(round_robin_odd(d, n))


print round_robin(5)
  [[[0, 4], [1, 3]],
   [[4, 3], [0, 2]],
   [[3, 2], [4, 1]],
   [[2, 1], [3, 0]],
   [[1, 0], [2, 4]]]


print round_robin(2)
   [[[0, 1]]]
</snippet></ROW><ROW><id>14171782</id><snippet> round 1     round 2       # pairs are those numbers that sit
----------  ---------      # on top of each other
0 1 2 3 4   8 0 1 2 3
8 7 6 5     7 6 5 4
</snippet></ROW><ROW><id>14171782</id><snippet>0</snippet></ROW><ROW><id>14171782</id><snippet> round 1     round 2       # pairs are those numbers that sit
----------  ---------      # on top of each other
0 1 2 3     0 7 1 2
7 6 5 4     6 5 4 3
</snippet></ROW><ROW><id>14171782</id><snippet>def round_robin(n):
    is_even = (n % 2 == 0)
    schedule = []
    d = deque(range(n))
    for i in range(2 * ((n - 1) / 2) + 1):
        schedule.append(
                        [[d[j], d[-j-1]] for j in range(n/2)])
        if is_even:
            d[0], d[-1] = d[-1], d[0]
        d.rotate()
    return schedule
</snippet></ROW><ROW><id>14171782</id><snippet>round_robin_odd(d, n)</snippet></ROW><ROW><id>14171782</id><snippet>def round_robin_odd(d, n):
    for i in range(n):
        h = [[d[j], d[-j-1]] for j in range(n/2)]
        h[-1].append(d[n/2])
        yield h
        d.rotate()
</snippet></ROW><ROW><id>14171782</id><snippet>print round_robin(5)
[[[0, 4], [1, 3, 2]],
 [[4, 3], [0, 2, 1]],
 [[3, 2], [4, 1, 0]],
 [[2, 1], [3, 0, 4]],
 [[1, 0], [2, 4, 3]]]
</snippet></ROW><ROW><id>14171846</id><snippet>=</snippet></ROW><ROW><id>14171846</id><snippet>^=</snippet></ROW><ROW><id>14171846</id><snippet>$=</snippet></ROW><ROW><id>14171846</id><snippet>*=</snippet></ROW><ROW><id>14171846</id><snippet>a[href="http://example.com/elsie"]</snippet></ROW><ROW><id>14171846</id><snippet>a</snippet></ROW><ROW><id>14171846</id><snippet>href</snippet></ROW><ROW><id>14171846</id><snippet>http://example.com/elsie</snippet></ROW><ROW><id>14171846</id><snippet>a[href^="http://example.com/"]</snippet></ROW><ROW><id>14171846</id><snippet>a</snippet></ROW><ROW><id>14171846</id><snippet>href</snippet></ROW><ROW><id>14171846</id><snippet>http://example.com/</snippet></ROW><ROW><id>14171846</id><snippet>a[href$="tillie"]</snippet></ROW><ROW><id>14171846</id><snippet>a</snippet></ROW><ROW><id>14171846</id><snippet>href</snippet></ROW><ROW><id>14171846</id><snippet>tillie</snippet></ROW><ROW><id>14171846</id><snippet>a[href*=".com/el"]</snippet></ROW><ROW><id>14171846</id><snippet>a</snippet></ROW><ROW><id>14171846</id><snippet>href</snippet></ROW><ROW><id>14171846</id><snippet>.com/el</snippet></ROW><ROW><id>14172091</id><snippet>(?P&lt;colour_list&gt;(\w+(\-or\-)?)+)</snippet></ROW><ROW><id>14172091</id><snippet>-or-</snippet></ROW><ROW><id>14172091</id><snippet>blue-or-</snippet></ROW><ROW><id>14172091</id><snippet>filter(bool, colour_list.split('-or-'))</snippet></ROW><ROW><id>14172302</id><snippet>grid = [["Z","9","G","Q","T","3"],
    ["Y","8","F","P","S","2"],
    ["X","7","E","O","R","1"],
    ["W","6","D","N","M","0"],
    ["V","5","C","L","K","U"],
    ["J","4","B","I","H","A"]]

search = 'D'

for rownum, row in enumerate(grid):
    for colnum, value in enumerate(row):
       if value == search:
           print "Found value at (%d,%d)" % (rownum, colnum)
</snippet></ROW><ROW><id>14172302</id><snippet>def findvalue(grid, value):
    for rownum, row in enumerate(grid):
        for colnum, itemvalue in enumerate(row):
            if itemvalue == value:
                return (rownum, colnum)
    raise ValueError("Value not found in grid")
</snippet></ROW><ROW><id>14172302</id><snippet>ValueError</snippet></ROW><ROW><id>14172302</id><snippet>def numbertoletter(number):
    if number &gt;= 0 and number &lt;= 26:
        return chr(65 + number)
    else:
        raise ValueError('Number out of range')
</snippet></ROW><ROW><id>14172302</id><snippet>&gt;&gt;&gt; numbertoletter(0)
'A'
&gt;&gt;&gt; numbertoletter(1)
'B'
</snippet></ROW><ROW><id>14172302</id><snippet>value = 'B'
row, col = map(numbertoletter, findvalue(grid, value))
print "Value '%s' found at location (%s, %s)" % (value, row, col)
</snippet></ROW><ROW><id>14172410</id><snippet>function updatehtml(e){
        for (var i = 0; i &lt; e.length; i++) {
            var html= "{{ "+e[i]['imageid']+".get().render() | safe }}";
            $('.hero-unit').append(html);
        }
    }
</snippet></ROW><ROW><id>14172410</id><snippet>var html= "{{ "+e[i]['imageid']+".get().render() | safe }}";</snippet></ROW><ROW><id>14172410</id><snippet>html= "{{ "+e[i]['imageid']+".get().render() | safe }}";</snippet></ROW><ROW><id>14172410</id><snippet>e</snippet></ROW><ROW><id>14172584</id><snippet>QueueHandler</snippet></ROW><ROW><id>14172695</id><snippet>from java.util import ArrayList

for interface in ArrayList.getInterfaces():
    print interface.getName()
</snippet></ROW><ROW><id>14172974</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>14172974</id><snippet>sys.stdout.encoding</snippet></ROW><ROW><id>14172974</id><snippet>chcp</snippet></ROW><ROW><id>14173057</id><snippet>&gt;&gt;&gt; from BeautiulSoup import NavigableString
&gt;&gt;&gt; soup = BeautifulSoup("&lt;a&gt;Foo&lt;/a&gt;")
&gt;&gt;&gt; soup.a.contents = [NavigableString(str(soup.a.contents[0]) + 'Bar')]
&gt;&gt;&gt; soup
&lt;a&gt;FooBar&lt;/a&gt;
</snippet></ROW><ROW><id>14173131</id><snippet>if choice == 'x' or 'X'</snippet></ROW><ROW><id>14173131</id><snippet>if choice == 'x' or choice == 'X'</snippet></ROW><ROW><id>14173131</id><snippet>if choice in ('X', 'x')</snippet></ROW><ROW><id>14173131</id><snippet>if (choice == 'x') or ('X')</snippet></ROW><ROW><id>14173131</id><snippet>'X'</snippet></ROW><ROW><id>14173131</id><snippet>if choice.lower() == 'x':
    ...
</snippet></ROW><ROW><id>14173371</id><snippet>in</snippet></ROW><ROW><id>14173371</id><snippet>if keyWord in message:
    #keyWord exists in message
</snippet></ROW><ROW><id>14173371</id><snippet>keywords = ["bomb", "nuclear", "terrorist", "gordon brown"]

for keyword in keywords:
    if keyword in message:
        #Bad message!
</snippet></ROW><ROW><id>14173371</id><snippet>any()</snippet></ROW><ROW><id>14173371</id><snippet>bad = any(keyword in message for keyword in keywords)
</snippet></ROW><ROW><id>14173371</id><snippet>find()</snippet></ROW><ROW><id>14173371</id><snippet>position = message.find(keyword) 
if position &gt; -1:
    #Bad message
</snippet></ROW><ROW><id>14173535</id><snippet>maketrans</snippet></ROW><ROW><id>14173535</id><snippet>ord(search)-&gt;ord(replace)</snippet></ROW><ROW><id>14173535</id><snippet>symbols = (u"абвгдеёзийклмнопрстуфхъыьэАБВГДЕЁЗИЙКЛМНОПРСТУФХЪЫЬЭ",
           u"abvgdeezijklmnoprstufh'y'eABVGDEEZIJKLMNOPRSTUFH'Y'E")

tr = {ord(a):ord(b) for a, b in zip(*symbols)}

text = u'Добрый Ден'
print text.translate(tr)  # looks good
</snippet></ROW><ROW><id>14173576</id><snippet>os.walk</snippet></ROW><ROW><id>14173576</id><snippet>import os

find = ['x.txt', 'y.txt']

found_dirs = []
for root, dirs, files in os.walk('/path/to/folder'):
    if any(filename in files for filename in find):
        found_dirs.append(root)

#found_dirs now contains all of the directories which matched
</snippet></ROW><ROW><id>14173579</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import wx, os

script = "/path/to/script"

class myFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, 'wxButton')
        self.button = wx.Button(self, id=-1, label='Click Me!')
        self.button.Bind(wx.EVT_BUTTON, self.on_button_click)

        self.Show(True)

    def on_button_click(self, event):
        os.system(script)

app  = wx.PySimpleApp()
main = myFrame()
app.MainLoop()
</snippet></ROW><ROW><id>14173579</id><snippet>script</snippet></ROW><ROW><id>14173929</id><snippet>city.cities</snippet></ROW><ROW><id>14173929</id><snippet>a = Route()
a.Generate(city.cities[:])

b = Route()
b.Generate(city.cities[:])
</snippet></ROW><ROW><id>14173947</id><snippet>function test($var1 = 'default1', $var2 = 'default2')
{

}
</snippet></ROW><ROW><id>14173947</id><snippet>test(); // works
test('arg1'); // works
test('arg1', 'arg2'); // works
test('arg2'); // this will set the first argument, not the second.
</snippet></ROW><ROW><id>14173947</id><snippet>function test($options)
{

}
</snippet></ROW><ROW><id>14173947</id><snippet>$options = array('var1' =&gt; 'arg1', 'var2' =&gt; 'arg2');
test($options);
</snippet></ROW><ROW><id>14174029</id><snippet>macports</snippet></ROW><ROW><id>14174029</id><snippet>/opt/local/</snippet></ROW><ROW><id>14174029</id><snippet>homebrew</snippet></ROW><ROW><id>14174029</id><snippet>/usr/local/</snippet></ROW><ROW><id>14174029</id><snippet>PATH</snippet></ROW><ROW><id>14174029</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14174029</id><snippet>sudo python setup.py install</snippet></ROW><ROW><id>14174029</id><snippet>PATH</snippet></ROW><ROW><id>14174029</id><snippet>import</snippet></ROW><ROW><id>14174029</id><snippet>python -c "import it"</snippet></ROW><ROW><id>14174029</id><snippet>PATH</snippet></ROW><ROW><id>14174029</id><snippet>virtualenv</snippet></ROW><ROW><id>14174029</id><snippet>PATH</snippet></ROW><ROW><id>14174145</id><snippet>imp</snippet></ROW><ROW><id>14174145</id><snippet>imp.&lt;b&gt;find_module&lt;/b&gt;(&lt;i&gt;name[, path]&lt;/i&gt;)</snippet></ROW><ROW><id>14174145</id><snippet>imp.&lt;b&gt;load_module&lt;/b&gt;(&lt;i&gt;name, file, pathname, description&lt;/i&gt;)</snippet></ROW><ROW><id>14174155</id><snippet>xpath2</snippet></ROW><ROW><id>14174155</id><snippet>'//*[@id="listContainer_row:0"]/td'</snippet></ROW><ROW><id>14174155</id><snippet>find_elements_by_xpath</snippet></ROW><ROW><id>14174155</id><snippet>get_text()</snippet></ROW><ROW><id>14174423</id><snippet>sys.argv</snippet></ROW><ROW><id>14174423</id><snippet>sys.executable</snippet></ROW><ROW><id>14174423</id><snippet>sys.argv</snippet></ROW><ROW><id>14174423</id><snippet>os.execlp()</snippet></ROW><ROW><id>14174423</id><snippet>os.execlp()</snippet></ROW><ROW><id>14174423</id><snippet>sys.argv</snippet></ROW><ROW><id>14174424</id><snippet>hangmanpics</snippet></ROW><ROW><id>14174424</id><snippet>hangmanpics[0]</snippet></ROW><ROW><id>14174424</id><snippet>IndexError</snippet></ROW><ROW><id>14174460</id><snippet>self.wfile.write(u'''\
    &lt;html&gt;
    &lt;headers&gt;
    &lt;meta http-equiv="content-type" content="text/html;charset=UTF-8"&gt;
    &lt;/headers&gt;
    &lt;body&gt;
    {} : {}
    &lt;/body&gt;
    &lt;/html&gt;'''.format(rKey,db[rKey]).encode('utf8'))
</snippet></ROW><ROW><id>14174460</id><snippet>self.send_response(200)
self.send_header('Content-Type','text/html; charset=utf-8')
self.end_headers()
</snippet></ROW><ROW><id>14174679</id><snippet>colliderect</snippet></ROW><ROW><id>14174679</id><snippet>rect.colliderect(rect): Return bool
</snippet></ROW><ROW><id>14174708</id><snippet>initUI()</snippet></ROW><ROW><id>14174708</id><snippet>onOpen()</snippet></ROW><ROW><id>14174708</id><snippet>initUI()</snippet></ROW><ROW><id>14174708</id><snippet>self.fn</snippet></ROW><ROW><id>14174708</id><snippet>def setImage(self):
    print self.fn #prints something now!
    self.img=Image.open(self.fn)
</snippet></ROW><ROW><id>14174708</id><snippet>onOpen()</snippet></ROW><ROW><id>14174708</id><snippet>def onOpen(self):
    ...
    self.setImage()
</snippet></ROW><ROW><id>14174725</id><snippet>lives = 6

def change():
    global lives
    lives = 0
</snippet></ROW><ROW><id>14174726</id><snippet>sh</snippet></ROW><ROW><id>14174726</id><snippet>#!/usr/bin/env python
from subprocess import check_call as x

x("""pwd
cd /
pwd""", shell=True)
</snippet></ROW><ROW><id>14174726</id><snippet>x(["bash", "-c", '''shopt -s nullglob
dirs=(*/)
pwd
cd -- "${dirs[RANDOM%${#dirs[@]}]}"
pwd'''])
</snippet></ROW><ROW><id>14174726</id><snippet>cd</snippet></ROW><ROW><id>14174726</id><snippet>#!/usr/bin/env python
import os
import random

print(os.getcwd())
os.chdir(random.choice([d for d in os.listdir(os.curdir) if os.path.isdir(d)]))
print(os.getcwd())
</snippet></ROW><ROW><id>14174726</id><snippet>glob</snippet></ROW><ROW><id>14174726</id><snippet>from glob import glob

randomdir = random.choice(glob("*/"))
</snippet></ROW><ROW><id>14174726</id><snippet>os.listdir()</snippet></ROW><ROW><id>14174726</id><snippet>glob()</snippet></ROW><ROW><id>14174726</id><snippet>.</snippet></ROW><ROW><id>14174726</id><snippet>randomdir = random.choice([d for d in os.listdir(os.curdir)
                           if (not d.startswith(".")) and os.path.isdir(d)])
</snippet></ROW><ROW><id>14175011</id><snippet>class hookable(object):
  def __init__(self, fn):
    self.pre = []
    self.post = []
    self.fn = fn
  def add_pre(self, hook):
    self.pre.append(hook)
  def add_post(self, hook):
    self.post.append(hook)
  def __call__(self, *args, **kwargs):
    for hook in self.pre:
      hook(*args, **kwargs)
    ret = self.fn(*args, **kwargs)
    for hook in self.post:
      hook(*args, **kwargs)
    return ret
</snippet></ROW><ROW><id>14175011</id><snippet>@hookable
def square(x):
  return x**2
</snippet></ROW><ROW><id>14175011</id><snippet>square.add_pre()</snippet></ROW><ROW><id>14175011</id><snippet>square.add_post()</snippet></ROW><ROW><id>14175011</id><snippet>square()</snippet></ROW><ROW><id>14175011</id><snippet>print square(2)

def pre(x): print 'pre', x
def post(x): print 'post', x

square.add_pre(pre)
print square(2)
print square(3)

square.add_post(post)
print square(4)
print square(5)
</snippet></ROW><ROW><id>14175142</id><snippet>os.path.relpath()</snippet></ROW><ROW><id>14175142</id><snippet>print os.path.relpath(root, directory)
</snippet></ROW><ROW><id>14175142</id><snippet>directory</snippet></ROW><ROW><id>14175142</id><snippet>os.path.relpath()</snippet></ROW><ROW><id>14175142</id><snippet>root</snippet></ROW><ROW><id>14175142</id><snippet>directory</snippet></ROW><ROW><id>14175142</id><snippet>directory</snippet></ROW><ROW><id>14175142</id><snippet>myFolderB</snippet></ROW><ROW><id>14175142</id><snippet>directory = "C:\\myfolderA"</snippet></ROW><ROW><id>14175211</id><snippet>self</snippet></ROW><ROW><id>14175211</id><snippet>self.object1</snippet></ROW><ROW><id>14175211</id><snippet>self.object2</snippet></ROW><ROW><id>14175211</id><snippet>TriggerX</snippet></ROW><ROW><id>14175211</id><snippet>def evaluate(self, obj):
    return self.object1.evaluate(self) and self.object2.evaluate(self)
</snippet></ROW><ROW><id>14175211</id><snippet>def evaluate(self, obj):
    return TriggerX.evaluate(self.object1, self) and TriggerX.evaluate(self.object2, self)
</snippet></ROW><ROW><id>14175211</id><snippet>def evaluate(self, obj):
    return self.object1.evaluate(self) and self.object2.evaluate(self)
</snippet></ROW><ROW><id>14175211</id><snippet>def evaluate(self, obj):
    return self.object1.evaluate(obj) and self.object2.evaluate(obj)
</snippet></ROW><ROW><id>14175211</id><snippet>object</snippet></ROW><ROW><id>14175415</id><snippet>urllib2</snippet></ROW><ROW><id>14175415</id><snippet>requests</snippet></ROW><ROW><id>14175415</id><snippet>while True:
    for proxy in proxies:
        r = request.get(my_url, proxies={'http': proxy})
        print r.text
        time.sleep(float(sleep))
</snippet></ROW><ROW><id>14176179</id><snippet>files = (file for file in os.listdir(path) 
         if os.path.isfile(os.path.join(path, file)))
for file in files: # You could shorten this to one line, but it runs on a bit.
    ...
</snippet></ROW><ROW><id>14176179</id><snippet>def files(path):
    for file in os.listdir(path):
        if os.path.isfile(os.path.join(path, file)):
            yield file
</snippet></ROW><ROW><id>14176179</id><snippet>for file in files(path):
    ...
</snippet></ROW><ROW><id>14176460</id><snippet>import collections
with open(p) as f:
    indx = collections.Counter(f.read())
</snippet></ROW><ROW><id>14176460</id><snippet>import collections
with open(p) as f:
    indx = collections.Counter()
    buffer = f.read(1024)
    while buffer:
        indx.update(buffer)
        buffer = f.read(1024)
</snippet></ROW><ROW><id>14176578</id><snippet>lambda</snippet></ROW><ROW><id>14176578</id><snippet>func</snippet></ROW><ROW><id>14176578</id><snippet>lambda func=self.test:func() 
</snippet></ROW><ROW><id>14176578</id><snippet>currentIndexChanged(int)</snippet></ROW><ROW><id>14176578</id><snippet>func</snippet></ROW><ROW><id>14176578</id><snippet>currentIndexChanged</snippet></ROW><ROW><id>14176578</id><snippet>func()</snippet></ROW><ROW><id>14176578</id><snippet>lambda</snippet></ROW><ROW><id>14176578</id><snippet>func</snippet></ROW><ROW><id>14176578</id><snippet>cmd = lambda value, func=self.test: func(value)
</snippet></ROW><ROW><id>14176578</id><snippet>test</snippet></ROW><ROW><id>14176578</id><snippet>func()</snippet></ROW><ROW><id>14176578</id><snippet>clicked()</snippet></ROW><ROW><id>14176609</id><snippet>shutil.copytree</snippet></ROW><ROW><id>14176609</id><snippet>dst</snippet></ROW><ROW><id>14176609</id><snippet>\\ref\builds\out</snippet></ROW><ROW><id>14176609</id><snippet>mkdir</snippet></ROW><ROW><id>14176609</id><snippet>shutil.rmtree</snippet></ROW><ROW><id>14176818</id><snippet>"@"</snippet></ROW><ROW><id>14176818</id><snippet>str.split()</snippet></ROW><ROW><id>14176818</id><snippet>str.partition</snippet></ROW><ROW><id>14176818</id><snippet>email_username, _, email_host = email.partition("@")
</snippet></ROW><ROW><id>14176846</id><snippet>if</snippet></ROW><ROW><id>14176846</id><snippet>while</snippet></ROW><ROW><id>14176846</id><snippet>        if month &gt; 12:
            month = 0
            g += 1
            Cbalance = Balance
</snippet></ROW><ROW><id>14176846</id><snippet>        if month &gt; 12:
            month = 0
            g += 1
            CBalance = Balance  # note corrected spelling of variable name on left
</snippet></ROW><ROW><id>14176861</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>14176861</id><snippet>if __name__ == '__main__':
   import formain as bumpf
else:
   import forscripts as bumpf

bumpf.domagic()
</snippet></ROW><ROW><id>14177040</id><snippet>from Twython import Twython

TWITTER_APP_KEY = 'xxxxx' #supply the appropriate value
TWITTER_APP_KEY_SECRET = 'xxxxx' 
TWITTER_ACCESS_TOKEN = 'xxxxxx'
TWITTER_ACCESS_TOKEN_SECRET = 'xxxxx'

t = Twython(app_key=TWITTER_APP_KEY, 
            app_secret=TWITTER_APP_KEY_SECRET, 
            oauth_token=TWITTER_ACCESS_TOKEN, 
            oauth_token_secret=TWITTER_ACCESS_TOKEN_SECRET)

search = t.search(q='#omg',   #**supply whatever query you want here**
                  count=100)

tweets = search['statuses']

for tweet in tweets:
  print tweet['id_str'], '\n', tweet['text'], '\n\n\n'
</snippet></ROW><ROW><id>14177040</id><snippet>from twython import Twython
twitter = Twython()
search_results = twitter.search(q="#somehashtag", rpp="50")

for tweet in search_results["results"]:
    print "Tweet from @%s Date: %s" % (tweet['from_user'].encode('utf-8'),tweet['created_at'])
    print tweet['text'].encode('utf-8'),"\n"
</snippet></ROW><ROW><id>14177339</id><snippet>fields</snippet></ROW><ROW><id>14177339</id><snippet>from django.db import models

class Person(models.Model):
    name = models.CharField(max_length=100)
    age = models.PositiveIntegerField(blank=True, null=True)
    hobbies = models.CharField(max_length=200, blank=True, null=True)
</snippet></ROW><ROW><id>14177339</id><snippet>LimitedCreateForm</snippet></ROW><ROW><id>14177339</id><snippet>from django.shortcuts import render
from django import forms

from testapp.models import Person

class LimitedCreateForm(forms.ModelForm):
    class Meta:
        model = Person
        fields = ('name', 'hobbies')

def create_limited(request):
    submitted = ""
    new_user = None

    if request.method == 'POST':
        submitted = str(request.POST)
        form = LimitedCreateForm(request.POST)
        if form.is_valid():
            new_user = form.save()

    else:
        form = LimitedCreateForm()

    data = {
        'form': form,
        'submitted': submitted,
        'new_user': new_user,
    }

    return render(request, 'create_limited.html', data)
</snippet></ROW><ROW><id>14177339</id><snippet>&lt;html&gt;

&lt;body&gt;

&lt;h1&gt;
Submitted data:
&lt;/h1&gt;

&lt;p&gt;
{{ submitted|default:"Nothing submitted" }}
&lt;/p&gt;

&lt;h1&gt;
Created user
&lt;/h1&gt;

&lt;p&gt;
Name: {{ new_user.name|default:"Nothing" }}
&lt;br /&gt;
Age: {{ new_user.age|default:"Nothing" }}
&lt;br /&gt;
Hobbies: {{ new_user.hobbies|default:"Nothing" }}
&lt;/p&gt;

&lt;h1&gt;
Form
&lt;/h1&gt;

&lt;form method="post"&gt;
    {% csrf_token %}
    Name: &lt;input type="text" name="name" id="id_name"&gt;
    &lt;br /&gt;
    Age: &lt;input type="text" name="age" id="id_age"&gt;
    &lt;br /&gt;
    Hobbies: &lt;input type="text" name="hobbies" id="id_hobbies"&gt;
    &lt;br /&gt;
    &lt;input type="submit" value="Create" /&gt;
&lt;/form&gt;

&lt;/body&gt;

&lt;/html&gt;
</snippet></ROW><ROW><id>14177339</id><snippet>&lt;QueryDict: 
{u'age': [u'27'], 
u'csrfmiddlewaretoken': [u'ed576dd024e98b4c1f99d29c64052c15'], 
u'name': [u'Bruce'], 
u'hobbies': [u'Dancing through fields of flowers']}&gt;`
</snippet></ROW><ROW><id>14177339</id><snippet>Name: Bruce 
Age: Nothing 
Hobbies: Dancing through fields of flowers
</snippet></ROW><ROW><id>14177339</id><snippet>exclude = ('age',)</snippet></ROW><ROW><id>14177339</id><snippet>fields = ('name', 'hobbies')</snippet></ROW><ROW><id>14177414</id><snippet>numbers = IT.cycle(numbers)</snippet></ROW><ROW><id>14177414</id><snippet>1</snippet></ROW><ROW><id>14177414</id><snippet>3</snippet></ROW><ROW><id>14177414</id><snippet>2</snippet></ROW><ROW><id>14177414</id><snippet>1</snippet></ROW><ROW><id>14177414</id><snippet>repeat</snippet></ROW><ROW><id>14177414</id><snippet>zip</snippet></ROW><ROW><id>14177414</id><snippet>itertools.product</snippet></ROW><ROW><id>14177414</id><snippet>lets</snippet></ROW><ROW><id>14177414</id><snippet>numbers</snippet></ROW><ROW><id>14177414</id><snippet>itertools.cycle</snippet></ROW><ROW><id>14177414</id><snippet>''.join(IT.chain.from_iterable</snippet></ROW><ROW><id>14177414</id><snippet>zip</snippet></ROW><ROW><id>14177414</id><snippet>import itertools as IT

def neighbor_product(letters, numbers, repeat = 2):
    N = len(numbers)
    numbers = collections.deque(numbers)
    for lets in IT.product(letters, repeat = repeat):
        for i in range(N):
            yield ''.join(IT.chain.from_iterable(zip(lets, IT.cycle(numbers))))
            numbers.rotate(-1)

letters = 'ABCD'
numbers = '123'
for item in neighbor_product(letters, numbers, repeat = 3):
    print(item)
</snippet></ROW><ROW><id>14177414</id><snippet>A1A2A3
A2A3A1
A3A1A2
A1A2B3
...
D3D1C2
D1D2D3
D2D3D1
D3D1D2
</snippet></ROW><ROW><id>14177529</id><snippet>from PySide import QtCore, QtGui
</snippet></ROW><ROW><id>14177529</id><snippet>def closeEvent(self, event):
    self.results.addResultsToDB()
    event.accept()
</snippet></ROW><ROW><id>14177673</id><snippet>s = "((words:0.23)75:0.55(morewords:0.1)2:0.55);"

s = re.sub("\)(\d+)", lambda m: ")" + str(float(m.groups()[0]) / 100), s)

print s
# ((words:0.23)0.75:0.55(morewords:0.1)0.02:0.55);
</snippet></ROW><ROW><id>14177673</id><snippet>from Bio import Phylo
# assuming you want to read from a string rather than a file
from StringIO import StringIO

tree = Phylo.read(StringIO(s), "newick")

for c in tree.get_nonterminals():
    if c.confidence != None:
        c.confidence = c.confidence / 100

print tree.format("newick")
</snippet></ROW><ROW><id>14177692</id><snippet>num</snippet></ROW><ROW><id>14177692</id><snippet>split(',')</snippet></ROW><ROW><id>14177692</id><snippet>In [1]: num = '1'

In [2]: num.split(',')
Out[2]: ['1']

In [3]: num = '1,2,3,4'

In [4]: num.split(',')
Out[4]: ['1', '2', '3', '4']
</snippet></ROW><ROW><id>14177692</id><snippet>def inputnumber():
    num = raw_input('Enter number(s): ').split(',')
    number = map(int,num)
    return number

x = inputnumber()
print x
</snippet></ROW><ROW><id>14177692</id><snippet>map</snippet></ROW><ROW><id>14177692</id><snippet>number</snippet></ROW><ROW><id>14177692</id><snippet>map</snippet></ROW><ROW><id>14177692</id><snippet>def inputnumber():
    num = raw_input('Enter number(s): ').split(',')
    return [int(n) for n in num]

x = inputnumber()
print x
</snippet></ROW><ROW><id>14177692</id><snippet>try/except</snippet></ROW><ROW><id>14177692</id><snippet>ValueError</snippet></ROW><ROW><id>14177692</id><snippet>def inputnumber():
    num = raw_input('Enter number(s): ').split(',')
    return [int(n) for n in num if n.isdigit()]

x = inputnumber()
print x
</snippet></ROW><ROW><id>14177692</id><snippet>if n.isdigit()</snippet></ROW><ROW><id>14177692</id><snippet>print [int(n) for n in raw_input('Number(s): ').split(',') if n.isdigit()]
</snippet></ROW><ROW><id>14177917</id><snippet>pygame.image.fromstring(string, size, format, flipped=False)</snippet></ROW><ROW><id>14178004</id><snippet>import paramiko, base64
import StringIO
import os

key = paramiko.RSAKey.from_private_key(StringIO.StringIO(str(os.environ.get("AWS_PRIVATE_KEY"))))
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect(str(os.environ.get("EC2_PUBLIC_DNS")), username='ec2-user', pkey=key)
stdin, stdout, stderr = ssh.exec_command('ps')

for line in stdout:
    print '... ' + line.strip('\n')
ssh.close()
</snippet></ROW><ROW><id>14178023</id><snippet>x</snippet></ROW><ROW><id>14178023</id><snippet>if re.match("[0-9a-fA-F]{2}([.-: ][0-9a-fA-F]{2}){%d}$" % x, self.input_value):
</snippet></ROW><ROW><id>14178023</id><snippet>if re.match("[0-9a-fA-F]\{2\}([.-: ][0-9a-fA-F]\{2\}){0}$".format(x), self.input_value):
</snippet></ROW><ROW><id>14178023</id><snippet>if re.match("[0-9a-fA-F]{2}([.-: ][0-9a-fA-F]{2})" + x + "$", self.input_value):
</snippet></ROW><ROW><id>14178023</id><snippet>{x}</snippet></ROW><ROW><id>14178088</id><snippet>generateParent</snippet></ROW><ROW><id>14178309</id><snippet>objects[i].SetMinSize((width,height))
</snippet></ROW><ROW><id>14178309</id><snippet>objects[i].SetSize((width,height))
</snippet></ROW><ROW><id>14178319</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>14178319</id><snippet>import inspect
from sympy import *

def get_derivatives(func):
    arg_symbols = symbols(inspect.getargspec(func).args)
    sym_func = func(*arg_symbols)

    return [lambdify(arg_symbols, sym_func.diff(a)) for a in arg_symbols]
</snippet></ROW><ROW><id>14178319</id><snippet>def f(x, y):
    return sin(x)*cos(y)

all_derivatives = get_derivatives(f)
</snippet></ROW><ROW><id>14178453</id><snippet>level1rects.remove(x)
</snippet></ROW><ROW><id>14178453</id><snippet>level1rects</snippet></ROW><ROW><id>14178453</id><snippet>level1rects[x]</snippet></ROW><ROW><id>14178453</id><snippet>x</snippet></ROW><ROW><id>14178453</id><snippet>for b in level1blocks:
     mainwindow.blit(b, b.get_rect())

for x in level1blocks[:]:
    if ballrect.colliderect(x.get_rect()):
        level1blocks.remove(x)
</snippet></ROW><ROW><id>14178453</id><snippet>level1rects</snippet></ROW><ROW><id>14178453</id><snippet>for b in level1blocks:</snippet></ROW><ROW><id>14178653</id><snippet>$('.submit.btn.primary-btn').eq(0).attr('id', 'foobar');
</snippet></ROW><ROW><id>14178654</id><snippet>range()</snippet></ROW><ROW><id>14178654</id><snippet>range(1, 101)
</snippet></ROW><ROW><id>14178654</id><snippet>range()</snippet></ROW><ROW><id>14178654</id><snippet>0</snippet></ROW><ROW><id>14178654</id><snippet>1</snippet></ROW><ROW><id>14178654</id><snippet>101</snippet></ROW><ROW><id>14178654</id><snippet>100</snippet></ROW><ROW><id>14178654</id><snippet>range(1, n+1)</snippet></ROW><ROW><id>14178654</id><snippet>1</snippet></ROW><ROW><id>14178654</id><snippet>n</snippet></ROW><ROW><id>14178654</id><snippet>list()</snippet></ROW><ROW><id>14178654</id><snippet>range()</snippet></ROW><ROW><id>14178654</id><snippet>xrange()</snippet></ROW><ROW><id>14178682</id><snippet>for</snippet></ROW><ROW><id>14178682</id><snippet>for y in x:
    if y &gt;= 50:
        print("Good")
    else:
        print("Bad")
</snippet></ROW><ROW><id>14178682</id><snippet>drawBar</snippet></ROW><ROW><id>14178682</id><snippet>fillcolor</snippet></ROW><ROW><id>14178682</id><snippet>def drawBar(t, height):
    if height &gt;= 50:
        t.fillcolor("blue")
    elif height &lt; 50 and height &gt;= 30:
        t.fillcolor("yellow")
    else:
        t.fillcolor("red")

    t.begin_fill()
    t.left(90)
    t.forward(height)
    t.write('  '+ str(height))
    t.right(90)
    t.forward(40)
    t.right(90)
    t.forward(height)
    t.left(90)
    t.end_fill()
</snippet></ROW><ROW><id>14178717</id><snippet>import numpy

def find_coeffs(pa, pb):
    matrix = []
    for p1, p2 in zip(pa, pb):
        matrix.append([p1[0], p1[1], 1, 0, 0, 0, -p2[0]*p1[0], -p2[0]*p1[1]])
        matrix.append([0, 0, 0, p1[0], p1[1], 1, -p2[1]*p1[0], -p2[1]*p1[1]])

    A = numpy.matrix(matrix, dtype=numpy.float)
    B = numpy.array(pb).reshape(8)

    res = numpy.dot(numpy.linalg.inv(A.T * A) * A.T, B)
    return numpy.array(res).reshape(8)
</snippet></ROW><ROW><id>14178717</id><snippet>pb</snippet></ROW><ROW><id>14178717</id><snippet>pa</snippet></ROW><ROW><id>14178717</id><snippet>import sys
from PIL import Image

img = Image.open(sys.argv[1])
width, height = img.size
m = -0.5
xshift = abs(m) * width
new_width = width + int(round(xshift))
img = img.transform((new_width, height), Image.AFFINE,
        (1, m, -xshift if m &gt; 0 else 0, 0, 1, 0), Image.BICUBIC)
img.save(sys.argv[2])
</snippet></ROW><ROW><id>14178717</id><snippet>coeffs = find_coeffs(
        [(0, 0), (256, 0), (256, 256), (0, 256)],
        [(0, 0), (256, 0), (new_width, height), (xshift, height)])

img.transform((width, height), Image.PERSPECTIVE, coeffs,
        Image.BICUBIC).save(sys.argv[3])
</snippet></ROW><ROW><id>14179016</id><snippet>&lt;/title&gt;</snippet></ROW><ROW><id>14179016</id><snippet>&lt;html&gt;
    &lt;head&gt;
        &lt;title&gt;{{head_title}}&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;{{page_title}}&lt;/h1&gt;
        &lt;p&gt;{{page_body}}&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>14179041</id><snippet>form</snippet></ROW><ROW><id>14179041</id><snippet>form</snippet></ROW><ROW><id>14179041</id><snippet>getlist</snippet></ROW><ROW><id>14179064</id><snippet>&gt;&gt;&gt; np.cross(a[None], b[:, None])
array([[ 0.68047849,  0.63863842, -0.0497843 ,  0.38640316],
       [ 0.94445125,  0.92469424,  0.42385605,  0.77342875],
       [ 0.85324981,  0.82290048,  0.22209648,  0.62137629],
       [ 0.5620032 ,  0.51509455, -0.20005522,  0.24267187],
       [ 0.99102692,  0.98205036,  0.59599795,  0.88432301]])
</snippet></ROW><ROW><id>14179073</id><snippet>with transaction.commit_on_success():
    query = Log.objects.raw("SELECT * FROM ...log WHERE time BETWEEN %s and %s", [lastUpdate, now])
</snippet></ROW><ROW><id>14179073</id><snippet>commit_on_success</snippet></ROW><ROW><id>14179121</id><snippet>import</snippet></ROW><ROW><id>14179121</id><snippet>import csv
import datetime

class PriceProcesseor(object):
#etc.
</snippet></ROW><ROW><id>14179155</id><snippet>mkdir</snippet></ROW><ROW><id>14179155</id><snippet>errno</snippet></ROW><ROW><id>14179155</id><snippet>try:
    os.mkdir(os.path.expanduser('~/Desktop/mp3-organizer/%s' % song_info.tag.artist))
except OSError as e:
    if e.errno != errno.EEXIST:
        raise
</snippet></ROW><ROW><id>14179155</id><snippet>os.path.isdir()</snippet></ROW><ROW><id>14179352</id><snippet>libsqlite3-dev</snippet></ROW><ROW><id>14179352</id><snippet>$ pip freeze -l &gt; requirements.txt
</snippet></ROW><ROW><id>14179352</id><snippet>$ pythonbrew uninstall 2.7.3
$ pythonbrew install 2.7.3
</snippet></ROW><ROW><id>14179352</id><snippet>$ pythonbrew switch 2.7.3
$ pythonbrew venv create sci
$ pythonbrew venv use sci
</snippet></ROW><ROW><id>14179352</id><snippet>$ pip install -r requirements.txt
</snippet></ROW><ROW><id>14179352</id><snippet>$ ipython --pylab

Python 2.7.3 (default, Jan  5 2013, 18:48:27) 
Type "copyright", "credits" or "license" for more information.

IPython 0.13.1 -- An enhanced Interactive Python.
?         -&gt; Introduction and overview of IPython's features.
%quickref -&gt; Quick reference.
help      -&gt; Python's own help system.
object?   -&gt; Details about 'object', use 'object??' for extra details.
</snippet></ROW><ROW><id>14179610</id><snippet>os.walk</snippet></ROW><ROW><id>14179610</id><snippet>os.rename</snippet></ROW><ROW><id>14179610</id><snippet>directname</snippet></ROW><ROW><id>14179610</id><snippet>filename_zero</snippet></ROW><ROW><id>14179610</id><snippet>os.path.join</snippet></ROW><ROW><id>14179610</id><snippet>os.rename(os.path.join(directname, filename_zero), 
          os.path.join(directname, filename_zero.replace(".", "")))
</snippet></ROW><ROW><id>14179610</id><snippet>filename_split</snippet></ROW><ROW><id>14179610</id><snippet>filename_zero</snippet></ROW><ROW><id>14179610</id><snippet>filename_zero = os.path.splitext(file)[0]</snippet></ROW><ROW><id>14179610</id><snippet>customer_folders_path = r"C:\Users\All\Documents\Cust"</snippet></ROW><ROW><id>14179610</id><snippet>customer_folders_path = "C:/Users/All/Documents/Cust"</snippet></ROW><ROW><id>14179610</id><snippet>import os

customer_folders_path = "C:/Users/All/Documents/Cust"
for directname, directnames, files in os.walk(customer_folders_path):
    for f in files:
        # Split the file into the filename and the extension, saving
        # as separate variables
        filename, ext = os.path.splitext(f)
        if "." in filename:
            # If a '.' is in the name, rename, appending the suffix
            # to the new file
            new_name = filename.replace(".", "")
            os.rename(
                os.path.join(directname, f),
                os.path.join(directname, new_name + ext))
</snippet></ROW><ROW><id>14179826</id><snippet>import os,shutil,errno

def copytree(src, dst, symlinks=False, ignore=None):
    if os.path.exists(dst):
        shutil.rmtree(dst)

    os.mkdir(dst)

    for item in os.listdir(src):
        s = os.path.join(src, item)
        d = os.path.join(dst, item)
        print s + " &gt;&gt; " + d

        if ".git" in s:
            return

        if os.path.isdir(s):
            print "Copying directory..."

            try:
                copytree(s, d, symlinks, ignore)

            except OSError as e: 
                # File already exist
                if e.errno == errno.EEXIST:
                    print "Path exists : " + d
        else:
            shutil.copy2(s, d)

def main ():
    src="//local/mnt/workspace/loc/04.01.01.00.303_HY11"
    dst="//local/mnt/workspace/test"
    copytree(src,dst)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>14179892</id><snippet>QtGui.QMessageBox.question(self, 
         'Message',
         "Are you sure to quit?",
         QtGui.QMessageBox.Yes, 
         QtGui.QMessageBox.No)
</snippet></ROW><ROW><id>14179892</id><snippet>wx.MessageBox('Download completed',
       'Info', 
        wx.OK | wx.ICON_INFORMATION)
</snippet></ROW><ROW><id>14179906</id><snippet>ValueError: A value in x_new is above the interpolation range.
</snippet></ROW><ROW><id>14179906</id><snippet>invcdf = interp1d(obscdf, x)</snippet></ROW><ROW><id>14179906</id><snippet>obscdf</snippet></ROW><ROW><id>14179906</id><snippet>&gt;&gt;&gt; obscdf[0]
0.0
&gt;&gt;&gt; obscdf[-1]
0.977852889924409
</snippet></ROW><ROW><id>14179906</id><snippet>invcdf</snippet></ROW><ROW><id>14179906</id><snippet>invcdf(simcdf)</snippet></ROW><ROW><id>14179906</id><snippet>&gt;&gt;&gt; simcdf[-1]
0.99326205300091452
</snippet></ROW><ROW><id>14179906</id><snippet>interp1d</snippet></ROW><ROW><id>14179906</id><snippet>invcdf = interp1d(obscdf, x, bounds_error=False)
</snippet></ROW><ROW><id>14179906</id><snippet>plt.plot(x, transfer_func,'g-')</snippet></ROW><ROW><id>14179954</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

testdataframe = pd.DataFrame(np.arange(12).reshape(4,3), columns=['A', 'B', 'C'])
styles = ['bs-','ro-','y^-']
linewidths = [2, 1, 4]
fig, ax = plt.subplots()
for col, style, lw in zip(testdataframe.columns, styles, linewidths):
    testdataframe[col].plot(style=style, lw=lw, ax=ax)
</snippet></ROW><ROW><id>14179954</id><snippet>plot</snippet></ROW><ROW><id>14179954</id><snippet>matplotlib.axes</snippet></ROW><ROW><id>14179954</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

testdataframe1 = pd.DataFrame(np.arange(12).reshape(4,3), columns=['A', 'B', 'C'])
testdataframe2 = pd.DataFrame(np.random.normal(size=(4,3)), columns=['D', 'E', 'F'])
styles1 = ['bs-','ro-','y^-']
styles2 = ['rs-','go-','b^-']
fig, ax = plt.subplots()
testdataframe1.plot(style=styles1, ax=ax)
testdataframe2.plot(style=styles2, ax=ax)
</snippet></ROW><ROW><id>14180007</id><snippet>u</snippet></ROW><ROW><id>14180007</id><snippet>\u</snippet></ROW><ROW><id>14180115</id><snippet>import sys ; sys.path</snippet></ROW><ROW><id>14180115</id><snippet>c:\python27\lib\site-packages\</snippet></ROW><ROW><id>14180115</id><snippet>from xlwt import easyxf</snippet></ROW><ROW><id>14180167</id><snippet>ip = "78.129.221.58"
port = 7777
</snippet></ROW><ROW><id>14180167</id><snippet>query = Query.Query(ip, port)
</snippet></ROW><ROW><id>14180227</id><snippet>#!/usr/bin/env python 

from flask import Flask 
import time 
import eventlet 

eventlet.monkey_patch() 

app = Flask(__name__) 
app.debug = True 

def background(): 
    """ do something in the background """ 
    print('[background] working in the background...') 
    time.sleep(2) 
    print('[background] done.') 
    return 42 

def callback(gt, *args, **kwargs): 
    """ this function is called when results are available """ 
    result = gt.wait() 
    print("[cb] %s" % result) 

@app.route('/') 
def index(): 
    greenth = eventlet.spawn(background) 
    greenth.link(callback) 
    return "Hello World" 

if __name__ == '__main__': 
    app.run() 
</snippet></ROW><ROW><id>14180271</id><snippet>def _pkg_exists_in_list(self, the_list, pkg_name):
    return pkg_name in the_list
</snippet></ROW><ROW><id>14180271</id><snippet>def _pkg_exists_in_list(self, list, pkg_name):  # don't call it list; don't overwrite built-ins
        if len(list) &gt;= 1:   # Unnecessary; [] resolves Boolean to False
            if any(pkg_name in item for item in list): # can just check if an item is in a list using the `in` statement; no need to match every string to every string
                return True # Can just return the evaluation of an expression; poor form to explicitly return True/False after if statement
            else:
                return False
    else:
        return False
</snippet></ROW><ROW><id>14180271</id><snippet>item in mylist</snippet></ROW><ROW><id>14180271</id><snippet>any(mystring in item for item in mylist)</snippet></ROW><ROW><id>14180271</id><snippet>any(mystring == item for item in mylist)</snippet></ROW><ROW><id>14180271</id><snippet>==</snippet></ROW><ROW><id>14180271</id><snippet>in</snippet></ROW><ROW><id>14180271</id><snippet>import re
def _pkg_exists_in_list(self, the_list, pkg_name):
    return any(re.search(r'name = ' + pkg_name, item) for item in the_list)
</snippet></ROW><ROW><id>14180271</id><snippet>C:\Users\JJ&gt;python -m timeit -s "p = ['''name = git\nversion = 1.0\nd
escription = git package''', '''name = opengl\nversion = 1.25\ndescription = gra
phics''']; import re" "dictlist = []" "for item in p:" " d = {}" " for line in i
tem.splitlines():" "  k, v = line.split('=')" "  d[k.strip()] = v.strip()" " dic
tlist.append(d)" "any('git' == x['name'] for x in dictlist)"
100000 loops, best of 3: 5.38 usec per loop

C:\Users\JJ&gt;python -m timeit -s "p = ['''name = git\nversion = 1.0\nd
escription = git package''', '''name = opengl\nversion = 1.25\ndescription = gra
phics''']; import re" "any(re.search(r'name = ' + 'git', item) for item in p)"
1000000 loops, best of 3: 1.36 usec per loop
</snippet></ROW><ROW><id>14180683</id><snippet>  bp::exec(
    "from math import *\n"
    "def f1(x):\n"
    "  return  sin(x)*cos(x)\n"
    "def f2(x):\n"
    "  return  sin(x)*cos(x)\n"
    "f=[f1, f2]",
    main_dict
  );
</snippet></ROW><ROW><id>14180683</id><snippet>  typedef std::function&lt;double (double, double, double)&gt; CPP_Function; // (a bad name)
</snippet></ROW><ROW><id>14180683</id><snippet>  typedef vector&lt; CPP_Function &gt; CPP_Function_vector;
</snippet></ROW><ROW><id>14180683</id><snippet>#include &lt;boost/python.hpp&gt;

#include &lt;functional&gt;
#include &lt;vector&gt;

using namespace std;
namespace bp = boost::python;

typedef function&lt;double(double, double, double)&gt; CPP_Function;
typedef vector&lt; CPP_Function &gt; CPP_Function_vector; 

CPP_Function_vector convert_functions( bp::object const&amp; functions ) 
{
    int l = bp::len( functions );
    CPP_Function_vector result;
    for (int i=0; i &lt; l; i++ )
    {
        bp::object f = functions[i];
        result.push_back( [f]( double a, double b, double c)-&gt;double { return bp::extract&lt;double&gt;(f(a,b,c)); } );
    }
    return result;
}

int main( int argc, char* argv[] )
{

    Py_Initialize();

    bp::object main_module = bp::import("__main__");
    bp::object main_dict   = main_module.attr("__dict__");

    bp::exec(
        "from math import *\n"
        "def f1(x,y,z):\n"
        "  return  sin(x)*cos(y)*tan(z)\n"
        "def f2(x,y,z):\n"
        "  return  sin(x)*cos(z)\n"
        "f=[f1, f2]",
        main_dict
    );

    bp::object f = main_dict["f"];

    CPP_Function_vector function_vector = convert_functions( f );

    cout &lt;&lt; function_vector[1](1.0, 0.2, 0.3) &lt;&lt; endl;

    return 0;

}
</snippet></ROW><ROW><id>14180826</id><snippet>from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol

from hbase import Hbase
from hbase.ttypes import *

from random import randrange
from pprint import pprint

socket = TSocket.TSocket('localhost', 9090)
transport = TTransport.TBufferedTransport(socket)
transport.open()
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Hbase.Client(protocol)

table_name = 'test_table'
row_key = 'test_row1'
colfamily1 = 'test_colfamily1'
column1 = 'test_col1'
fullcol1 = ('%s:%s' % (colfamily1, column1))
value = ('%d' % randrange(1000, 9999))

num_versions = 3

try:
    desc = ColumnDescriptor(colfamily1)
    client.createTable(table_name, [desc])
except AlreadyExists:
    pass

client.mutateRow(table_name, row_key, [Mutation(column=fullcol1, value=value)], {})
results = client.getVer(table_name, row_key, fullcol1, num_versions, {})

pprint(results)
</snippet></ROW><ROW><id>14180826</id><snippet>$ python test.py 
[TCell(timestamp=1357463438825L, value='9842')]
$ python test.py 
[TCell(timestamp=1357463439700L, value='9166'),
 TCell(timestamp=1357463438825L, value='9842')]
$ python test.py 
[TCell(timestamp=1357463440359L, value='2978'),
 TCell(timestamp=1357463439700L, value='9166'),
 TCell(timestamp=1357463438825L, value='9842')]
</snippet></ROW><ROW><id>14180875</id><snippet>zip()</snippet></ROW><ROW><id>14180875</id><snippet>sum()</snippet></ROW><ROW><id>14180875</id><snippet>In [1]: l = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 0)]

In [2]: [sum(x) for x in zip(*l)]
Out[2]: [25, 20]
</snippet></ROW><ROW><id>14180875</id><snippet>In [4]: map(sum,zip(*l))
Out[4]: [25, 20]
</snippet></ROW><ROW><id>14180875</id><snippet>timeit</snippet></ROW><ROW><id>14180875</id><snippet>In [16]: l = [(1, 2), (3, 4), (5, 6), (7, 8), (9, 0)]*1000

In [17]: %timeit [sum(x) for x in zip(*l)]
1000 loops, best of 3: 1.46 ms per loop

In [18]: %timeit [sum(x) for x in izip(*l)]       #prefer itertools.izip
1000 loops, best of 3: 1.28 ms per loop

In [19]: %timeit map(sum,zip(*l))
100 loops, best of 3: 1.48 ms per loop

In [20]: %timeit map(sum,izip(*l))                #prefer itertools.izip
1000 loops, best of 3: 1.29 ms per loop
</snippet></ROW><ROW><id>14180970</id><snippet>mysql -e "set autocommit=1"
</snippet></ROW><ROW><id>14180970</id><snippet>c.execute("commit ")
</snippet></ROW><ROW><id>14181067</id><snippet>sudo apt-get install python2.7-dev.</snippet></ROW><ROW><id>14181099</id><snippet>%</snippet></ROW><ROW><id>14181099</id><snippet>?</snippet></ROW><ROW><id>14181099</id><snippet>%</snippet></ROW><ROW><id>14181099</id><snippet>%</snippet></ROW><ROW><id>14181099</id><snippet>%%</snippet></ROW><ROW><id>14181099</id><snippet>match = re.match("%%[?]", line)
</snippet></ROW><ROW><id>14181099</id><snippet>%%?</snippet></ROW><ROW><id>14181099</id><snippet>if line.startswith("%%?"):
</snippet></ROW><ROW><id>14181158</id><snippet> if guess_row &lt; 0 or guess_row &gt;= len(board) or guess_col &lt; 0 or guess_col &gt;= len(board):
</snippet></ROW><ROW><id>14181158</id><snippet> if not (0 &lt;= guess_row &lt; len(board)) or not (0 &lt;= guess_col &lt; len(board)):
</snippet></ROW><ROW><id>14181158</id><snippet>not</snippet></ROW><ROW><id>14181158</id><snippet>    guess_row = "X"
    guess_col = "X"
</snippet></ROW><ROW><id>14181158</id><snippet>    board[guess_row][guess_col] = "X"
</snippet></ROW><ROW><id>14181158</id><snippet>if board[guess_row][guess_col] == "X":</snippet></ROW><ROW><id>14181158</id><snippet>board[guess_row][guess_col]</snippet></ROW><ROW><id>14181158</id><snippet>"X"</snippet></ROW><ROW><id>14181158</id><snippet>guess_row</snippet></ROW><ROW><id>14181158</id><snippet>guess_col</snippet></ROW><ROW><id>14181391</id><snippet>print</snippet></ROW><ROW><id>14181391</id><snippet>        print "%s :: %s" % (self.num, text)
</snippet></ROW><ROW><id>14181391</id><snippet>         24 LOAD_CONST               1 ('%s :: %s')
         27 LOAD_FAST                0 (self)
         30 LOAD_ATTR                3 (num)
         33 LOAD_FAST                1 (text)
         36 BUILD_TUPLE              2
         39 BINARY_MODULO       
         40 PRINT_ITEM          
         41 PRINT_NEWLINE       
</snippet></ROW><ROW><id>14181391</id><snippet>PRINT_ITEM</snippet></ROW><ROW><id>14181391</id><snippet>PRINT_NEWLINE</snippet></ROW><ROW><id>14181391</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>14181391</id><snippet>print</snippet></ROW><ROW><id>14181391</id><snippet>print a, b, c,</snippet></ROW><ROW><id>14181391</id><snippet>print</snippet></ROW><ROW><id>14181473</id><snippet>_</snippet></ROW><ROW><id>14181473</id><snippet>__init__</snippet></ROW><ROW><id>14181629</id><snippet>DataFrame</snippet></ROW><ROW><id>14181629</id><snippet>import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv('tmp.csv', sep = '\s')
df.plot(kind='bar')
locs, labels = plt.xticks()
plt.xticks(locs, [d if d==d else '' for d in df.index], rotation = 25)
plt.show()
</snippet></ROW><ROW><id>14181741</id><snippet>  9 def initialize_model(Base):
 10     
 11     class Food(Base, Mixin):
 12         __tablename__ = 'food'
 13         __table_args__ = {'schema': 'food', 'autoload': True}
 14     globals()['Food'] = Food
</snippet></ROW><ROW><id>14181816</id><snippet>if isinstance(x, (list, tuple)) and all(isinstance(i, basestring) for i in x):
    #do whatever
</snippet></ROW><ROW><id>14181867</id><snippet>fab prepare_deployment:v0.1
</snippet></ROW><ROW><id>14182053</id><snippet>socket.gethostname()</snippet></ROW><ROW><id>14182053</id><snippet>hostname</snippet></ROW><ROW><id>14182053</id><snippet>socket.gethostbyname(socket.gethostname())
</snippet></ROW><ROW><id>14182053</id><snippet>192.168.1.247 raspberrypi</snippet></ROW><ROW><id>14182140</id><snippet>outputStr = "\\printCodeFromFile[{startline}{{{endline}}}{{{name}}}]".format(startline=lineStart, endline=lineEnd, name=filename)
</snippet></ROW><ROW><id>14182140</id><snippet>{{</snippet></ROW><ROW><id>14182140</id><snippet>}}</snippet></ROW><ROW><id>14182140</id><snippet>{endline}</snippet></ROW><ROW><id>14182140</id><snippet>{name}</snippet></ROW><ROW><id>14182201</id><snippet>ws = set(ws)

# ...
    ssx = [w if w not in ws else ' ' for w in ssx]    
</snippet></ROW><ROW><id>14182201</id><snippet>with open('C:/test01.txt') as words:
    ws = set(words.read().splitlines())

with open('C:/test02.txt') as file_modify4:
    for x in file_modify4:
        ssx = [w if w not in ws else ' ' for w in x.strip().split('\t')[0].split()]
        print ssx
</snippet></ROW><ROW><id>14182233</id><snippet>'\\?'</snippet></ROW><ROW><id>14182233</id><snippet>list</snippet></ROW><ROW><id>14182233</id><snippet>In [34]: list('\\?')
Out[34]: ['\\', '?']
</snippet></ROW><ROW><id>14182233</id><snippet>'\\?'</snippet></ROW><ROW><id>14182233</id><snippet>In [35]: print('\\')
\
</snippet></ROW><ROW><id>14182233</id><snippet>'\\'</snippet></ROW><ROW><id>14182233</id><snippet>In [36]: print(tuple('\\?'))
('\\', '?')
</snippet></ROW><ROW><id>14182233</id><snippet>'\?'</snippet></ROW><ROW><id>14182233</id><snippet>'\\?'</snippet></ROW><ROW><id>14182233</id><snippet>In [38]: list('\?')
Out[38]: ['\\', '?']

In [39]: list('\\?')
Out[39]: ['\\', '?']    

In [42]: '\?' is '\\?'
Out[44]: True
</snippet></ROW><ROW><id>14182300</id><snippet>&gt;&gt;&gt; input_string = "FE CC ED ED CD"

# Convert input string into integers
# `ord()` converts 'A' to 65, 'B' to 66, etc
&gt;&gt;&gt; pairs = [tuple(ord(letter) - ord('A') for letter in pair) for pair in input_string.split()]
[(5, 4), (2, 2), (4, 3), (4, 3), (2, 3)]

# Now just retrieve the tuples from the list of pairs
# And look up the index in the grid
&gt;&gt;&gt; output = ''.join(grid[x][y] for x, y in pairs)
'HELLO'
</snippet></ROW><ROW><id>14182329</id><snippet>&gt;&gt;&gt; s1 = 'D\xf6rfli'
&gt;&gt;&gt; s1
'D\xf6rfli'
&gt;&gt;&gt; s2 = s1.decode("iso-8859-1")
&gt;&gt;&gt; s2
u'D\xf6rfli'
&gt;&gt;&gt; print s2
Dörfli
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14182389</id><snippet>re.findall</snippet></ROW><ROW><id>14182389</id><snippet>(.*?)</snippet></ROW><ROW><id>14182389</id><snippet>&gt;&gt;&gt; re.findall(r'\((.*?)\)|(\w)', '(zyx)bc')
[('zyx', ''), ('', 'b'), ('', 'c')]
</snippet></ROW><ROW><id>14182389</id><snippet>&gt;&gt;&gt; re.findall(r'\(.*?\)|\w', '(zyx)bc')
['(zyx)', 'b', 'c']
</snippet></ROW><ROW><id>14182438</id><snippet>VB</snippet></ROW><ROW><id>14182438</id><snippet>SquarePython</snippet></ROW><ROW><id>14182438</id><snippet>ScriptEngine py = Python.CreateEngine();

ScriptScope scope = py.ExecuteFile("Square.py");

dynamic square = scope.GetVariable("SquarePython");

int result = (int)square(5);

Console.WriteLine(result.sq); //prints 25 as you might expected
</snippet></ROW><ROW><id>14182438</id><snippet>class SquarePython:
    def Square(self, number):
        return number * number
</snippet></ROW><ROW><id>14182438</id><snippet>ScriptEngine py = Python.CreateEngine();

ScriptScope scope = py.ExecuteFile("Square.py");
//get variable and then create and object. Could be stored somewhere between computations
dynamic squareInstance = scope.GetVariable("SquarePython")(); 

int result = (int) squareInstance.Square(5);

Console.WriteLine(result);
</snippet></ROW><ROW><id>14182438</id><snippet>dynamic</snippet></ROW><ROW><id>14182473</id><snippet>subprocess.DEVNULL</snippet></ROW><ROW><id>14182473</id><snippet>call(["/some/path/and/exec","arg"], stdout=DEVNULL, stderr=DEVNULL)
</snippet></ROW><ROW><id>14182473</id><snippet>stdout</snippet></ROW><ROW><id>14182473</id><snippet>stderr</snippet></ROW><ROW><id>14182473</id><snippet>stdout</snippet></ROW><ROW><id>14182473</id><snippet>sh</snippet></ROW><ROW><id>14182473</id><snippet>stderr=DEVNULL</snippet></ROW><ROW><id>14182473</id><snippet>os.devnull</snippet></ROW><ROW><id>14182473</id><snippet>with open(os.devnull, 'w') as devnull:
    call(["/some/path/and/exec","arg"], stdout=devnull, stderr=devnull)
</snippet></ROW><ROW><id>14182473</id><snippet>devnull = open(os.devnull, 'w')
try:
    call(["/some/path/and/exec","arg"], stdout=devnull, stderr=devnull)
finally:
    devnull.close()
</snippet></ROW><ROW><id>14182473</id><snippet>subprocess</snippet></ROW><ROW><id>14182516</id><snippet>.*</snippet></ROW><ROW><id>14182516</id><snippet>.*?</snippet></ROW><ROW><id>14182516</id><snippet>re_pattern = '''
    \{t[ ]{1}           # start tag name
    d="                 # "d" attribute
    ([a-zA-Z0-9]*)      # "d" attribute content
    ".*?\}              # end of "d" attribute
    (.+?)               # tag content
    \{/t\}              # end tag
'''
</snippet></ROW><ROW><id>14182518</id><snippet>simplejson.loads</snippet></ROW><ROW><id>14182518</id><snippet>unicode</snippet></ROW><ROW><id>14182518</id><snippet>web_fetch()</snippet></ROW><ROW><id>14182518</id><snippet>response_json</snippet></ROW><ROW><id>14182518</id><snippet>response_json = response_json.decode('utf-8')
</snippet></ROW><ROW><id>14182616</id><snippet>poll</snippet></ROW><ROW><id>14182616</id><snippet>select</snippet></ROW><ROW><id>14182616</id><snippet>select</snippet></ROW><ROW><id>14182616</id><snippet>epoll</snippet></ROW><ROW><id>14182616</id><snippet>kqueue</snippet></ROW><ROW><id>14182616</id><snippet>Twisted</snippet></ROW><ROW><id>14182616</id><snippet>Tornado</snippet></ROW><ROW><id>14182616</id><snippet>select</snippet></ROW><ROW><id>14182616</id><snippet>imapclient</snippet></ROW><ROW><id>14182616</id><snippet>select</snippet></ROW><ROW><id>14182616</id><snippet>Monocle</snippet></ROW><ROW><id>14182616</id><snippet>Twisted</snippet></ROW><ROW><id>14182616</id><snippet>Tornado</snippet></ROW><ROW><id>14182616</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>14182616</id><snippet>imapclient</snippet></ROW><ROW><id>14182616</id><snippet>Twisted</snippet></ROW><ROW><id>14182616</id><snippet>Twisted</snippet></ROW><ROW><id>14182616</id><snippet>gevent</snippet></ROW><ROW><id>14182616</id><snippet>imapclient</snippet></ROW><ROW><id>14182616</id><snippet>gevent</snippet></ROW><ROW><id>14182799</id><snippet># Define a new type for a function-type that accepts an integer and
# a string, returning an integer.
ctypedef int (*f_type)(int, str)

# Extern a function of that type from foo.h
cdef extern from "foo.h":
    int do_this(int, str)

# Passing this function will not work.
cpdef int do_that(int a, str b):
    return 0

# However, this will work.
cdef int do_stuff(int a, str b):
    return 0

# This functio uses a function of that type. Note that it cannot be a
# cpdef function because the function-type is not available from Python.
cdef void foo(f_type f):
    print f(0, "bar")

# Works:
foo(do_this)
foo(do_stuff)

# Error:
# Cannot assign type 'int (int, str, int __pyx_skip_dispatch)' to 'f_type'
foo(do_that)
</snippet></ROW><ROW><id>14182911</id><snippet>x</snippet></ROW><ROW><id>14182911</id><snippet>0</snippet></ROW><ROW><id>14182911</id><snippet>org.size[0]-1</snippet></ROW><ROW><id>14182911</id><snippet>a</snippet></ROW><ROW><id>14182911</id><snippet>org.size[0]</snippet></ROW><ROW><id>14182911</id><snippet>1</snippet></ROW><ROW><id>14182911</id><snippet>a=org.size[0]</snippet></ROW><ROW><id>14182911</id><snippet>new.putpixel((a,y),pixel)
</snippet></ROW><ROW><id>14182911</id><snippet>for x in range(org.size[0]):
    a=org.size[0]
    for y in range(org.size[1]):
        pixel=org.getpixel((x,y))
        new.putpixel((a,y),pixel)
        a-=1
</snippet></ROW><ROW><id>14182911</id><snippet>for x in range(org.size[0]):
    a=org.size[0]-1
    for y in range(org.size[1]):
        pixel=org.getpixel((x,y))
        new.putpixel((a,y),pixel)
        a-=1
</snippet></ROW><ROW><id>14182911</id><snippet>a</snippet></ROW><ROW><id>14182911</id><snippet>org.size[0]</snippet></ROW><ROW><id>14182911</id><snippet>a</snippet></ROW><ROW><id>14182911</id><snippet>a=org.size[0]-1
for x in range(org.size[0]):
    for y in range(org.size[1]):
        pixel=org.getpixel((x,y))
        new.putpixel((a,y),pixel)
    a-=1
</snippet></ROW><ROW><id>14182911</id><snippet>for x in range(org.size[0]):
    flipped_x = org.size[0] - x - 1
    for y in range(org.size[1]):
        pixel=org.getpixel((x,y))
        new.putpixel((flipped_x,y),pixel)
</snippet></ROW><ROW><id>14182911</id><snippet>Image.load()</snippet></ROW><ROW><id>14182911</id><snippet>orgpixels, newpixels = org.load(), new.load()
for x in range(org.size[0]):
    flipped_x = org.size[0] - x - 1
    for y in range(org.size[1]):
        pixel=orgpixels[x, y]
        newpixels[flipped_x, y] = pixel
</snippet></ROW><ROW><id>14182911</id><snippet>getdata</snippet></ROW><ROW><id>14182911</id><snippet>list</snippet></ROW><ROW><id>14182911</id><snippet>map</snippet></ROW><ROW><id>14182911</id><snippet>numpy</snippet></ROW><ROW><id>14182911</id><snippet>np.array(org.getdata()).reshape(org.size)</snippet></ROW><ROW><id>14182911</id><snippet>putdata</snippet></ROW><ROW><id>14182911</id><snippet>getdata</snippet></ROW><ROW><id>14182911</id><snippet>putdata</snippet></ROW><ROW><id>14182911</id><snippet>grouper</snippet></ROW><ROW><id>14182911</id><snippet>itertools</snippet></ROW><ROW><id>14182911</id><snippet>pip install more-itertool</snippet></ROW><ROW><id>14182911</id><snippet>orgrows = more_itertools.grouper(org.size[0], org.getdata())
newrows = [list(reversed(row)) for row in orgrows]
new.putdata(newrows)
</snippet></ROW><ROW><id>14182911</id><snippet>Image.open(im)</snippet></ROW><ROW><id>14182911</id><snippet>print org.mode</snippet></ROW><ROW><id>14182911</id><snippet>print org.pixel((0, 0))</snippet></ROW><ROW><id>14182911</id><snippet>org</snippet></ROW><ROW><id>14182911</id><snippet>org=Image.open(im).convert('RGB')
</snippet></ROW><ROW><id>14182911</id><snippet>ValueError</snippet></ROW><ROW><id>14183060</id><snippet>threading.py</snippet></ROW><ROW><id>14183060</id><snippet>threading</snippet></ROW><ROW><id>14183060</id><snippet>threading.__file__</snippet></ROW><ROW><id>14183060</id><snippet>import threading
print threading.__file__
</snippet></ROW><ROW><id>14183151</id><snippet>pip install --user numpy
</snippet></ROW><ROW><id>14183151</id><snippet>python setup.py install --prefix=~/.local
</snippet></ROW><ROW><id>14183151</id><snippet>pip</snippet></ROW><ROW><id>14183151</id><snippet>easy_install</snippet></ROW><ROW><id>14183352</id><snippet>finish</snippet></ROW><ROW><id>14183352</id><snippet>save</snippet></ROW><ROW><id>14183352</id><snippet>def finish(self, event):
    self.save()
    self.Destroy()
    sys.exit()

def save(self):
    windtitle = self.windtitle.GetLabelText()
    checkboxes = [{'checked': child.IsChecked(),
                   'label': child.GetLabel()}
                  for child in self.panel.GetChildren()
                  if isinstance(child, wx.CheckBox)]
    data = {
        'windtitle':windtitle,
        'checkboxes':checkboxes,
        }
    with open(CONFIGFILE, 'w') as f:
        json.dump(data, f)
</snippet></ROW><ROW><id>14183352</id><snippet>def load(self):
    if os.path.exists(CONFIGFILE):
        with open(CONFIGFILE, 'r') as f:
            data = json.load(f)
        title = data['windtitle']
        self.windtitle = wx.StaticText(self.panel, -1, title)
        self.vbox.Add(self.windtitle)
        for checkbox in data['checkboxes']:
            label = checkbox['label']
            cb = wx.CheckBox(
                self.panel, -1, checkbox['label'])
            self.vbox.Add(cb)                
            cb.SetValue(checkbox['checked'])
    else:
        self.create_windtitle()
    self.create_buttons()
</snippet></ROW><ROW><id>14183352</id><snippet>import wx, sys, os
import json

CONFIGFILE = os.path.expanduser('~/tasklist.json')
class test(wx.Frame):
    def __init__(self, parent, id):
        frame = wx.Frame.__init__(self, parent, id, 'List', size = (200,500))
        self.panel = wx.Panel(self)
        self.panelbox = wx.BoxSizer(wx.VERTICAL)                

        self.vbox = wx.BoxSizer(wx.VERTICAL)        
        self.load()

        self.panelbox.Add(self.vbox)        
        self.panelbox.Add(self.buttonbox)

        self.panel.SetSizer(self.panelbox)
        self.panelbox.Fit(self)

        self.Bind(wx.EVT_BUTTON, self.addtomenu, self.addButton)
        self.Bind(wx.EVT_BUTTON, self.finish, self.finishButton)
        self.Bind(wx.EVT_CLOSE, self.finish)

    def create_buttons(self):
        self.buttonbox = wx.BoxSizer(wx.VERTICAL)                
        self.addButton = wx.Button(
            self.panel, label = "+ Add")
        self.finishButton = wx.Button(
            self.panel, label = "Finish")
        self.buttonbox.Add(self.addButton)
        self.buttonbox.Add(self.finishButton)

    def create_windtitle(self):
        item = wx.TextEntryDialog(None, "List Title")
        if item.ShowModal() == wx.ID_OK:
            answer = item.GetValue()
            self.windtitle = wx.StaticText(self.panel, -1, answer)
            self.windtitle.SetForegroundColour("blue")

    def addtomenu(self, event):
        newitem = wx.TextEntryDialog(None, "New Item")
        if newitem.ShowModal() == wx.ID_OK:
            if len(self.mylist) &gt; 5:
                wx.StaticText(self.panel, -1, "List To Full")
            else:
                answer = newitem.GetValue()
                cb = wx.CheckBox(self.panel, -1, answer)
                self.vbox.Add(cb)
        self.panelbox.Fit(self)

    def finish(self, event):
        self.save()
        self.Destroy()
        sys.exit()

    @property
    def mylist(self):
        return [ child.GetLabel()
                 for child in self.panel.GetChildren()
                 if isinstance(child, wx.CheckBox) ]

    def save(self):
        windtitle = self.windtitle.GetLabelText()
        checkboxes = [{'checked': child.IsChecked(),
                       'label': child.GetLabel()}
                      for child in self.panel.GetChildren()
                      if isinstance(child, wx.CheckBox)]
        data = {
            'windtitle':windtitle,
            'checkboxes':checkboxes,
            }
        with open(CONFIGFILE, 'w') as f:
            json.dump(data, f)

    def load(self):
        if os.path.exists(CONFIGFILE):
            with open(CONFIGFILE, 'r') as f:
                data = json.load(f)
            title = data['windtitle']
            self.windtitle = wx.StaticText(self.panel, -1, title)
            self.vbox.Add(self.windtitle)
            for checkbox in data['checkboxes']:
                label = checkbox['label']
                cb = wx.CheckBox(
                    self.panel, -1, checkbox['label'])
                self.vbox.Add(cb)                
                cb.SetValue(checkbox['checked'])
        else:
            self.create_windtitle()
        self.create_buttons()

if __name__ == "__main__":
    app = wx.PySimpleApp()  #Blood
    frame = test(parent = None, id = -1)  #Skin
    frame.Show()
    app.MainLoop()  #Heart
</snippet></ROW><ROW><id>14183352</id><snippet>pos = (10,yaxis)</snippet></ROW><ROW><id>14183352</id><snippet>wxpython</snippet></ROW><ROW><id>14183352</id><snippet>BoxSizers</snippet></ROW><ROW><id>14183352</id><snippet>def describe(obj):
    for key in dir(obj):
        try:
            val = getattr(obj, key)
        except AttributeError:
            continue
        if callable(val):
            help(val)
        else:
            print('{k} =&gt; {v}'.format(k = key, v = val))
        print('-'*80)

describe(self.panel)
</snippet></ROW><ROW><id>14183575</id><snippet>classmethod</snippet></ROW><ROW><id>14183575</id><snippet>a</snippet></ROW><ROW><id>14183575</id><snippet>class a:
    @classmethod
    def b(cls):
        print("hello")

a.b() #'hello'
</snippet></ROW><ROW><id>14183632</id><snippet>__add__</snippet></ROW><ROW><id>14183632</id><snippet>int</snippet></ROW><ROW><id>14183632</id><snippet>In [126]: class myint(int):
    def __add__(self,a):
        print "{0} plus {1}".format(self,a)
   .....:         

In [127]: a=myint(5)

In [128]: b=myint(6)

In [129]: a+b
5 plus 6
</snippet></ROW><ROW><id>14183847</id><snippet>StopIteration</snippet></ROW><ROW><id>14183847</id><snippet>return</snippet></ROW><ROW><id>14183847</id><snippet>return</snippet></ROW><ROW><id>14183962</id><snippet>python a.py</snippet></ROW><ROW><id>14183962</id><snippet>__main__</snippet></ROW><ROW><id>14183962</id><snippet>sys.modules</snippet></ROW><ROW><id>14183962</id><snippet>python a.py</snippet></ROW><ROW><id>14183962</id><snippet>__main__</snippet></ROW><ROW><id>14183962</id><snippet>the file being parsed
  |
  |       the module being imported       
  |         |     
./a.py  __main__  1:  import b
</snippet></ROW><ROW><id>14183962</id><snippet>a.py</snippet></ROW><ROW><id>14183962</id><snippet>b.py</snippet></ROW><ROW><id>14183962</id><snippet>    ./b.py  b  1:  from a import orig
</snippet></ROW><ROW><id>14183962</id><snippet>b.py</snippet></ROW><ROW><id>14183962</id><snippet>a</snippet></ROW><ROW><id>14183962</id><snippet>a</snippet></ROW><ROW><id>14183962</id><snippet>a.py</snippet></ROW><ROW><id>14183962</id><snippet>        ./a.py  a  1:  import b
</snippet></ROW><ROW><id>14183962</id><snippet>b</snippet></ROW><ROW><id>14183962</id><snippet>        ./a.py  a  2:  class orig:
        ./a.py  a  3:      def test(self):
        ./a.py  a  4:          print("hello")
        ./a.py  a  5:  
        ./a.py  a  6:  
        ./a.py  a  7:  o = orig()
        ./a.py  a  8:  o.a()
</snippet></ROW><ROW><id>14183962</id><snippet>a</snippet></ROW><ROW><id>14183962</id><snippet>b</snippet></ROW><ROW><id>14183962</id><snippet>orig</snippet></ROW><ROW><id>14183962</id><snippet>    ./b.py  b  2:  orig.test=lambda self: print("wrong")
</snippet></ROW><ROW><id>14183962</id><snippet>b</snippet></ROW><ROW><id>14183962</id><snippet>a.orig</snippet></ROW><ROW><id>14183962</id><snippet>__main__.orig</snippet></ROW><ROW><id>14183962</id><snippet>b</snippet></ROW><ROW><id>14183962</id><snippet>./a.py  __main__  2:  class orig:
./a.py  __main__  3:      def test(self):
./a.py  __main__  4:          print("hello")
./a.py  __main__  5:  
./a.py  __main__  6:  
./a.py  __main__  7:  o = orig()
./a.py  __main__  8:  o.a()
</snippet></ROW><ROW><id>14183962</id><snippet>__main__</snippet></ROW><ROW><id>14183962</id><snippet>__main__.orig</snippet></ROW><ROW><id>14183962</id><snippet>a.orig</snippet></ROW><ROW><id>14184016</id><snippet>dirname = dirpath.split(os.path.sep)[-1]
</snippet></ROW><ROW><id>14184443</id><snippet>try...except</snippet></ROW><ROW><id>14184443</id><snippet>NameError</snippet></ROW><ROW><id>14184443</id><snippet>try:
    L[0]
except NameError:
    L = ["Example",2]
    L[0]
</snippet></ROW><ROW><id>14184582</id><snippet>all</snippet></ROW><ROW><id>14184582</id><snippet>map</snippet></ROW><ROW><id>14184582</id><snippet>all_list_something = all(map(is_valid, list_something))
</snippet></ROW><ROW><id>14184582</id><snippet>itertools.imap</snippet></ROW><ROW><id>14184582</id><snippet>import itertools
all_list_something = all(itertools.imap(is_valid, list_something))
</snippet></ROW><ROW><id>14184670</id><snippet>dict</snippet></ROW><ROW><id>14184670</id><snippet>self.bot = servo.Robot(dict(
        waist = servo.Servo(3, 90, .02, 0),
        shoulder = servo.Servo(4, 130, .03, 15),
        elbow = servo.Servo(5, 110, .02, 19),
        wrist = servo.Servo(6, 20, .01, 9),
        claw = servo.Servo(7, 40, .01, 0)
    ), [5, 15, 25])
</snippet></ROW><ROW><id>14184670</id><snippet>def servos(**kwargs):
    for k, v in kwargs.iteritems():
        kwargs[k] = servo.Servo(*v)
    return kwargs
</snippet></ROW><ROW><id>14184670</id><snippet>self.bot = servo.Robot(servos(
        waist = (3, 90, .02, 0),
        shoulder = (4, 130, .03, 15),
        elbow = (5, 110, .02, 19),
        wrist = (6, 20, .01, 9),
        claw = (7, 40, .01, 0)
    ), [5, 15, 25])
</snippet></ROW><ROW><id>14184670</id><snippet>def instance_dict(typ, **kwargs):
    for k, v in kwargs.iteritems():
        kwargs[k] = typ(*v)
    return kwargs

# later...
self.bot = servo.Robot(
               instance_dict(servo.Servo,
                   waist = (3, 90, .02, 0),
                   shoulder = (4, 130, .03, 15),
                   elbow = (5, 110, .02, 19),
                   wrist = (6, 20, .01, 9),
                   claw = (7, 40, .01, 0) ),
               [5, 15, 25])
</snippet></ROW><ROW><id>14184757</id><snippet>mtime = os.stat(filename).st_mtime
if mtime != mtimes.get(filename):
    mtimes[filename] = mtime

    changed = True

    try:
        code = compile(open(filename, 'U').read(), filename, 'exec')
        namespace = {}
        eval(code, namespace)
    except Exception:
        traceback.print_exc()
        continue
</snippet></ROW><ROW><id>14184757</id><snippet>touch /path/to/flightsinfo.py</snippet></ROW><ROW><id>14184757</id><snippet>def reload(filename):
     try:
         code = compile(open(filename, 'U').read(), filename, 'exec')
         namespace = {}
         eval(code, namespace)
      ...
</snippet></ROW><ROW><id>14184974</id><snippet>print</snippet></ROW><ROW><id>14184974</id><snippet>print</snippet></ROW><ROW><id>14184974</id><snippet>print()</snippet></ROW><ROW><id>14184974</id><snippet>print 'hello'</snippet></ROW><ROW><id>14184974</id><snippet>print('hello')</snippet></ROW><ROW><id>14184974</id><snippet>print('''
Hello, 
World
''')
</snippet></ROW><ROW><id>14185016</id><snippet>def check(attr):
    temp, pulse = attr.temperature_value, attr.heartbeat_value
    def check_range(value, low, high):
        return value &lt; low or value &gt; high
    return check_range(temp, rates[0], rates[1]) or \
        check_range(pulse, rates[2], rates[3])
</snippet></ROW><ROW><id>14185016</id><snippet>class DataPool(object):
    def __init__(self, series):
        self.series = series

values = list(range(5))

data = \
  DataPool(
    series=
    [{'options': {
     'source': values},
       'terms': [
        'current_time',
        'temperature_value',
        'heartbeat_value']}
    ])
</snippet></ROW><ROW><id>14185016</id><snippet>def check_range(value, low, high):
    return value &lt; low or value &gt; high
</snippet></ROW><ROW><id>14185016</id><snippet>def check_range(value, low, high):
    return not (low &lt;= value &lt;= high)
</snippet></ROW><ROW><id>14185115</id><snippet>hg clone https://bitbucket.org/ericgazoni/openpyxl
</snippet></ROW><ROW><id>14185115</id><snippet>cd openpyxl/
python2.7 setup.py install
</snippet></ROW><ROW><id>14185242</id><snippet>set follow-fork-mode child</snippet></ROW><ROW><id>14185242</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>14185472</id><snippet>unicodedata.normalize('NFD', pattern)</snippet></ROW><ROW><id>14185472</id><snippet>import unicodedata

glob.glob(unicodedata.normalize('NFD', '*/Bärlauch*'))
</snippet></ROW><ROW><id>14185533</id><snippet>project.save()</snippet></ROW><ROW><id>14185658</id><snippet>"string: %s\ndecimal: %d\nfloat: %f" % ("hello", 123, 23.45)
</snippet></ROW><ROW><id>14185935</id><snippet>ffmpeg</snippet></ROW><ROW><id>14185935</id><snippet>youtube-dl</snippet></ROW><ROW><id>14185935</id><snippet>FFmpegExtractAudioPP</snippet></ROW><ROW><id>14185935</id><snippet>subprocess.Popen([exe, '-version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
</snippet></ROW><ROW><id>14185935</id><snippet>ffmpeg</snippet></ROW><ROW><id>14185935</id><snippet>.exe</snippet></ROW><ROW><id>14186010</id><snippet>bbox</snippet></ROW><ROW><id>14186010</id><snippet>import networkx as nx
from lxml import html
import matplotlib.pyplot as plt

raw = "...your raw html"

def traverse(parent, graph, labels):
    labels[parent] = parent.tag
    for node in parent.getchildren():
        graph.add_edge(parent, node)
        traverse(node, graph, labels)

G = nx.DiGraph()
labels = {}     # needed to map from node to tag
html_tag = html.document_fromstring(raw)
traverse(html_tag, G, labels)

pos = nx.graphviz_layout(G, prog='dot')

label_props = {'size': 16,
               'color': 'black',
               'weight': 'bold',
               'horizontalalignment': 'center',
               'verticalalignment': 'center',
               'clip_on': True}
bbox_props = {'boxstyle': "round, pad=0.2",
              'fc': "grey",
              'ec': "b",
              'lw': 1.5}

nx.draw_networkx_edges(G, pos, arrows=False)
ax = plt.gca()

for node, label in labels.items():
        x, y = pos[node]
        ax.text(x, y, label,
                bbox=bbox_props,
                **label_props)

ax.xaxis.set_visible(False)
ax.yaxis.set_visible(False)
plt.show()
</snippet></ROW><ROW><id>14186010</id><snippet>#from lxml import html
from bs4 import BeautifulSoup
from bs4.element import NavigableString

...

def traverse(parent, graph, labels):
    labels[hash(parent)] = parent.name
    for node in parent.children:
        if isinstance(node, NavigableString):
            continue
        graph.add_edge(hash(parent), hash(node))
        traverse(node, graph, labels)

...

#html_tag = html.document_fromstring(raw)
soup = BeautifulSoup(raw)
html_tag = next(soup.children)

...
</snippet></ROW><ROW><id>14186182</id><snippet>@classmethod</snippet></ROW><ROW><id>14186182</id><snippet>@staticmethod</snippet></ROW><ROW><id>14186182</id><snippet>class Superclass(object):
    @classmethod
    def get_instance(cls):
        #This should return an instance of subclass1 or subclass2
        return cls()

class Subclass1(Superclass):
    pass
class Subclass2(Superclass):
    pass
</snippet></ROW><ROW><id>14186233</id><snippet>gmtime(0)</snippet></ROW><ROW><id>14186439</id><snippet>django</snippet></ROW><ROW><id>14186439</id><snippet>=&gt; ALTER USER django CREATEDB;
</snippet></ROW><ROW><id>14186439</id><snippet>ALTER USER &lt;username&gt; CREATEDB;</snippet></ROW><ROW><id>14186439</id><snippet>django</snippet></ROW><ROW><id>14186492</id><snippet>main()</snippet></ROW><ROW><id>14186492</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>14186492</id><snippet>main()</snippet></ROW><ROW><id>14186621</id><snippet>rc[:]['MyClass'] = MyClass
</snippet></ROW><ROW><id>14186621</id><snippet>'\x80\x02c__main__\nMyClass\nq\x01.'</snippet></ROW><ROW><id>14186621</id><snippet>%%px</snippet></ROW><ROW><id>14186621</id><snippet>def pxlocal(line, cell):
    ip = get_ipython()
    ip.run_cell_magic("px", line, cell)
    ip.run_cell(cell)
get_ipython().register_magic_function(pxlocal, "cell")
</snippet></ROW><ROW><id>14186621</id><snippet>%%pxlocal</snippet></ROW><ROW><id>14186621</id><snippet>%%px</snippet></ROW><ROW><id>14186621</id><snippet>%%pxlocal

class MyClass(object):
    # etc
</snippet></ROW><ROW><id>14186621</id><snippet>--local</snippet></ROW><ROW><id>14186621</id><snippet>%%px</snippet></ROW><ROW><id>14186753</id><snippet>from pandas import read_table
data = read_table('table.txt', sep='|', skiprows=[0,2]).dropna(axis=1)
</snippet></ROW><ROW><id>14186753</id><snippet>     Name    Address    PhoneNumber  Age
0    Matt    B3/24       8475968     25
1    John    A1-A2 Wing  3335968     44
</snippet></ROW><ROW><id>14186753</id><snippet>data.csv()</snippet></ROW><ROW><id>14186753</id><snippet>data.to_excel()</snippet></ROW><ROW><id>14186753</id><snippet>data.columns = data.columns.map(str.strip)
</snippet></ROW><ROW><id>14186753</id><snippet>data['Name']</snippet></ROW><ROW><id>14186753</id><snippet>data['Address']</snippet></ROW><ROW><id>14186753</id><snippet>.dropna()</snippet></ROW><ROW><id>14186753</id><snippet>.dropna()</snippet></ROW><ROW><id>14186768</id><snippet>ThreadList = sorted(ThreadList, key=lambda Entry: (Entry[1], Entry[2]), reverse=True)
</snippet></ROW><ROW><id>14186768</id><snippet>operator</snippet></ROW><ROW><id>14186768</id><snippet>key=operator.itemgetter(1, 2)</snippet></ROW><ROW><id>14186935</id><snippet>Counter()</snippet></ROW><ROW><id>14186935</id><snippet>O(n)</snippet></ROW><ROW><id>14186935</id><snippet>Counter()</snippet></ROW><ROW><id>14186935</id><snippet>s.count()</snippet></ROW><ROW><id>14186935</id><snippet>Counter()</snippet></ROW><ROW><id>14186935</id><snippet>    while (1) {
        key = PyIter_Next(it);
        if (key == NULL)
            break;
        oldval = PyObject_GetItem(mapping, key);
        if (oldval == NULL) {
            if (!PyErr_Occurred() || !PyErr_ExceptionMatches(PyExc_KeyError))
                break;
            PyErr_Clear();
            Py_INCREF(one);
            newval = one;
        } else {
            newval = PyNumber_Add(oldval, one);
            Py_DECREF(oldval);
            if (newval == NULL)
                break;
        }
        if (PyObject_SetItem(mapping, key, newval) == -1)
            break;
        Py_CLEAR(newval);
        Py_DECREF(key);
    }
</snippet></ROW><ROW><id>14186935</id><snippet>FASTSEARCH()</snippet></ROW><ROW><id>14186935</id><snippet>    for (i = 0; i &lt; n; i++)
        if (s[i] == p[0]) {
           count++;
           if (count == maxcount)
              return maxcount;
        }
    return count;
</snippet></ROW><ROW><id>14186945</id><snippet>settings = sublime.load_settings("&lt;project-filename&gt;.sublime-settings")
</snippet></ROW><ROW><id>14186972</id><snippet>open("myfile.txt").read() == open("myotherfile.txt").read()
</snippet></ROW><ROW><id>14186972</id><snippet>import difflib
difflib.SequenceMatcher(None, file1.read(), file2.read())
</snippet></ROW><ROW><id>14187205</id><snippet>print sorted(example_dict,key=lambda x: len(set(example_dict[x])))
</snippet></ROW><ROW><id>14187205</id><snippet>[2, 0, 1]
</snippet></ROW><ROW><id>14187205</id><snippet>print sorted(example_dict.items(),key=lambda x: len(set(x[1])))
</snippet></ROW><ROW><id>14187205</id><snippet>[(2, [(4, 5), (7, 8)]), (0, [(1, 2), (3, 4), (3, 4), (4, 5)]), (1, [(1, 2), (3, 4), (5, 6), (7, 8)])]
</snippet></ROW><ROW><id>14187299</id><snippet>__iter__</snippet></ROW><ROW><id>14187299</id><snippet>iter()</snippet></ROW><ROW><id>14187299</id><snippet>__iter__</snippet></ROW><ROW><id>14187299</id><snippet>myGenerator</snippet></ROW><ROW><id>14187299</id><snippet>StopIteration</snippet></ROW><ROW><id>14187299</id><snippet>class myIterator:
    def __init__(self, n):
        self.last = n

    def __iter__(self):
        prev = 0
        fib = 1
        while fib &lt; self.last:
            res = fib
            yield res
            fib += prev
            prev = res
</snippet></ROW><ROW><id>14187299</id><snippet>iter(myIterator(10))</snippet></ROW><ROW><id>14187299</id><snippet>.next()</snippet></ROW><ROW><id>14187299</id><snippet>__iter__</snippet></ROW><ROW><id>14187299</id><snippet>self</snippet></ROW><ROW><id>14187299</id><snippet>.next()</snippet></ROW><ROW><id>14187299</id><snippet>.next()</snippet></ROW><ROW><id>14187299</id><snippet>return somevalue</snippet></ROW><ROW><id>14187299</id><snippet>yield</snippet></ROW><ROW><id>14187299</id><snippet>.next()</snippet></ROW><ROW><id>14187299</id><snippet>.next()</snippet></ROW><ROW><id>14187299</id><snippet>class myIterator:
    def __init__(self, n):
        self.last = n
        self.prev = 0
        self.fib = 1

    def __iter__(self):
        return self

    def next(self):
        if self.fib &lt; self.last:
            res = self.fib
            self.fib += self.prev
            self.prev = res
            return res

        raise StopIteration
</snippet></ROW><ROW><id>14187299</id><snippet>.next()</snippet></ROW><ROW><id>14187299</id><snippet>class myIterator:
    def __init__(self, n):
        self.last = n
        self.next = self.myGenerator().next  # Use the generator `.next`

    def __iter__(self):
        return self

    def myGenerator(self):
        prev = 0
        fib = 1
        while fib &lt; self.last:
            res = fib
            yield res
            fib += prev
            prev = res
</snippet></ROW><ROW><id>14187315</id><snippet>comtypes</snippet></ROW><ROW><id>14187315</id><snippet>openpyxl</snippet></ROW><ROW><id>14187511</id><snippet>__init__()</snippet></ROW><ROW><id>14187511</id><snippet>show()</snippet></ROW><ROW><id>14187511</id><snippet>import sys
from PyQt4 import QtGui


class Example(QtGui.QWidget):
    def __init__(self):
        super(Example, self).__init__()
        self.setupUI()
        self.show()
        # normal __init__ done

        if len(sys.argv) &gt; 1:
            with open(sys.argv[1]) as f:
                # do stuff with file


if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14187549</id><snippet>from . import some_module</snippet></ROW><ROW><id>14187549</id><snippet>from ..</snippet></ROW><ROW><id>14187549</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>14187549</id><snippet>import xyz.tests.t</snippet></ROW><ROW><id>14187549</id><snippet>import sys
print('sys.path = %s' % sys.path) # see that the parent of "xyz" is on sys.path
print("importing xyz.tests")
import xyz.a
</snippet></ROW><ROW><id>14187549</id><snippet># solution A: absolute_import by __future__  (or use Python 3)
#from __future__ import absolute_import
print("importing xyz.a")
# solution B: explicit relative import
#from . import b    # and remove "import xyz.b"
# solution C: relative import (not recommended)
#import b           # and remove "import xyz.b"
import xyz.b
</snippet></ROW><ROW><id>14187549</id><snippet>print("imported xyz.b")</snippet></ROW><ROW><id>14187549</id><snippet>print("Imported xyz.xyz  !!!")</snippet></ROW><ROW><id>14187549</id><snippet>parent_of_xyz=...  # The parent directory of "xyz" - absolute path
cd $parent_of_xyz
python -m xyz.tests.t
PYTHONPATH=$parent_of_xyz/xyz python -m unittest tests
PYTHONPATH=$parent_of_xyz     python xyz/tests/t.py
</snippet></ROW><ROW><id>14187549</id><snippet>Imported xyz.xyz  !!!
...
ImportError...
</snippet></ROW><ROW><id>14187627</id><snippet>__slots__</snippet></ROW><ROW><id>14187627</id><snippet>__init__</snippet></ROW><ROW><id>14187627</id><snippet>XPathSelector</snippet></ROW><ROW><id>14187627</id><snippet>super(XPathSelector, self)</snippet></ROW><ROW><id>14187627</id><snippet>super(CSSSelector, self)</snippet></ROW><ROW><id>14187627</id><snippet>class CSSSelector(XPathSelector):
    def __init__(self, *args, **kwargs):
        # ...
        super(CSSSelector, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>14187627</id><snippet>__slots__</snippet></ROW><ROW><id>14187627</id><snippet>__slots__</snippet></ROW><ROW><id>14187627</id><snippet>__slots__</snippet></ROW><ROW><id>14187627</id><snippet>__slots__</snippet></ROW><ROW><id>14187627</id><snippet>__dict__</snippet></ROW><ROW><id>14187627</id><snippet>__slots__</snippet></ROW><ROW><id>14187749</id><snippet>rstrip</snippet></ROW><ROW><id>14187749</id><snippet>rstrip</snippet></ROW><ROW><id>14187749</id><snippet>'abczyx'.rstrip('xyz')</snippet></ROW><ROW><id>14187749</id><snippet>'abc'</snippet></ROW><ROW><id>14187749</id><snippet>'abczyx'.rstrip('zyx')</snippet></ROW><ROW><id>14187749</id><snippet>'abc'</snippet></ROW><ROW><id>14187765</id><snippet>brcd_ncclient.py</snippet></ROW><ROW><id>14187765</id><snippet>#!/usr/bin/env python

from ncclient import manager
from ncclient.xml_ import *

brcd_new_ele = lambda tag, ns, attrs={}, **extra: ET.Element(qualify(tag, ns), attrs, **extra)
brcd_sub_ele = lambda parent, tag, ns, attrs={}, **extra: ET.SubElement(parent, qualify(tag, ns), attrs, **extra)

BROCADE_1_0 = "http://brocade.com/ns/netconf/config/netiron-config/"
register_namespace('brcd', BROCADE_1_0)

@staticmethod
def brcd_build(capabilities):
    hello = brcd_new_ele("hello", None, {'xmlns':"urn:ietf:params:xml:ns:netconf:base:1.0"})
    caps = brcd_sub_ele(hello, "capabilities", None)
    def fun(uri): brcd_sub_ele(caps, "capability", None).text = uri
    map(fun, capabilities)
    return to_xml(hello)

def brcd_build_filter(spec, capcheck=None):
    type = None
    if isinstance(spec, tuple):
        type, criteria = spec
        # brocades want the netconf prefix on subtree filter attribute
        rep = new_ele("filter", {'nc:type':type})
        if type == "xpath":
            rep.attrib["select"] = criteria
        elif type == "subtree":
            rep.append(to_ele(criteria))
        else:
            raise OperationError("Invalid filter type")
    else:
        rep = validated_element(spec, ("filter", qualify("filter")),
                                attrs=("type",))
    if type == "xpath" and capcheck is not None:
        capcheck(":xpath")
    return rep

manager.transport.session.HelloHandler.build = brcd_build
manager.operations.util.build_filter = brcd_build_filter
</snippet></ROW><ROW><id>14187765</id><snippet>netconftest.py</snippet></ROW><ROW><id>14187765</id><snippet>#!/usr/bin/env python

from brcd_ncclient import *

manager.logging.basicConfig(filename='ncclient.log', level=manager.logging.DEBUG)

manager.CAPABILITIES = ['urn:ietf:params:netconf:capability:writeable-running:1.0', 'urn:ietf:params:netconf:base:1.0']

with manager.connect(host='host', username='user', password='password') as m:
    netironcfg = brcd_new_ele('netiron-config', BROCADE_1_0)
    mplsconfig = brcd_sub_ele(netironcfg, 'mpls-config', BROCADE_1_0)
    filterstr = to_xml(netironcfg)
    c2 = m.get_config(source='running', filter=('subtree', filterstr))
    print c2
</snippet></ROW><ROW><id>14187765</id><snippet>uuid1().urn</snippet></ROW><ROW><id>14187765</id><snippet>__init__</snippet></ROW><ROW><id>14187765</id><snippet>ncclient/operations/rpc.py</snippet></ROW><ROW><id>14187765</id><snippet>class RPC(object):
    DEPENDS = []
    REPLY_CLS = RPCReply
    def __init__(self, session, async=False, timeout=30, raise_mode=RaiseMode.NONE):
        self._session = session
        try:
            for cap in self.DEPENDS:
                self._assert(cap)
        except AttributeError:
            pass
        self._async = async
        self._timeout = timeout
        self._raise_mode = raise_mode
        self._id = uuid1().urn # Keeps things simple instead of having a class attr with running ID that has to be locked
</snippet></ROW><ROW><id>14188142</id><snippet>&gt;&gt;&gt; round(359.955)
360.0

def m2d(a):
    print "Enter azimuth in mils (ex. 6400)"
    b = 17.78
    c = round((a / b),0) #This would round the value to zero decimal places.
    print a, " mils = ", c, "degrees"

&gt;&gt;&gt; m2d(6400)
Enter azimuth in mils (ex. 6400)
6400  mils =  360.0 degrees
</snippet></ROW><ROW><id>14188142</id><snippet>c</snippet></ROW><ROW><id>14188142</id><snippet>int(c)</snippet></ROW><ROW><id>14188142</id><snippet>    print a, "mils =", c, "degrees"
</snippet></ROW><ROW><id>14188155</id><snippet>http://127.0.0.1:3128</snippet></ROW><ROW><id>14188155</id><snippet>cntlm –c cntlm.ini –H</snippet></ROW><ROW><id>14188155</id><snippet>cntlm -v -H -c /etc/cntlm.conf</snippet></ROW><ROW><id>14188155</id><snippet>cntlm –M http://www.google.com</snippet></ROW><ROW><id>14188155</id><snippet>sudo cntlm -M http://www.google.com/</snippet></ROW><ROW><id>14188192</id><snippet>class A:
  def f(self):
    return 'this is f'

  @staticmethod
  def g():
    return 'this is g'
print(type(A.__dict__['g']))
print(type(A.g))

&lt;class 'staticmethod'&gt;
&lt;class 'function'&gt;
</snippet></ROW><ROW><id>14188243</id><snippet>john_from_db = User.objects(email='jdoe@example.com').first()
</snippet></ROW><ROW><id>14188492</id><snippet>key</snippet></ROW><ROW><id>14188492</id><snippet>data</snippet></ROW><ROW><id>14188492</id><snippet>value</snippet></ROW><ROW><id>14188492</id><snippet>internalName</snippet></ROW><ROW><id>14188492</id><snippet>int</snippet></ROW><ROW><id>14188492</id><snippet>In [1]: import json

In [2]: s = '{"data":{"internalName":"value","int":1}}'

In [3]: data = json.loads(s)

In [4]: print data
{u'data': {u'int': 1, u'internalName': u'value'}}

In [5]: data['data']['internalName']
Out[5]: u'value'
</snippet></ROW><ROW><id>14188492</id><snippet>data</snippet></ROW><ROW><id>14188492</id><snippet>with</snippet></ROW><ROW><id>14188492</id><snippet>import json

# 'with' is called a context manager, and it handles closing for you when
# you leave the indented block
with open('data.txt', 'r') as f:
    data = json.load(f)

# When the code leaves the indented block, the file is closed for you

# Print the entire structure
print json.dumps(data)

# Print out a piece of the data
print data['data']['internalName']
</snippet></ROW><ROW><id>14188493</id><snippet>dict</snippet></ROW><ROW><id>14188493</id><snippet>lists</snippet></ROW><ROW><id>14188493</id><snippet>animals = {}
while True:
    print(', '.join(i for i in animals))
    animal = input('Choose an animal, or pick a newe one: ')
    if animal == "":
        break
    item = input('enter item: ')    
    animals.setdefault(animal,[]).append(item)

print(animals)

Choose an animal, or pick a newe one: rat
enter item: foo
rat
Choose an animal, or pick a newe one: dog
enter item: bar
rat, dog
Choose an animal, or pick a newe one: 
{'rat': ['foo'], 'dog': ['bar']}
</snippet></ROW><ROW><id>14188496</id><snippet>getlist</snippet></ROW><ROW><id>14188496</id><snippet>getList</snippet></ROW><ROW><id>14188496</id><snippet>return str(request.values.getlist('param'))
</snippet></ROW><ROW><id>14188496</id><snippet>[u'a', u'bbb']
</snippet></ROW><ROW><id>14188517</id><snippet>&lt;!-- image link template --&gt;
&lt;a href=".../html_form?image_id={{img_id}}"&gt;&lt;img src=".../imgs/{{img_id}}"&gt;&lt;/a&gt; 

&lt;!-- form template; the img_id variable should be accessible from the request 
object of your view, like request["image_id"] --&gt;
&lt;form name="form_name" action="serverpath/django_script_function"&gt;
    &lt;input name="image_id" type="hidden" value="{{img_id}}"&gt;&lt;/input&gt;
    &lt;!-- other form fields.. --&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>14188818</id><snippet>ScriptingBridge</snippet></ROW><ROW><id>14188818</id><snippet>appscript</snippet></ROW><ROW><id>14188818</id><snippet>WM_*</snippet></ROW><ROW><id>14188818</id><snippet>pywin32</snippet></ROW><ROW><id>14188818</id><snippet>appscript</snippet></ROW><ROW><id>14188818</id><snippet>sysev = appscript.app('System Events')
dropbox = sysev.application_processes['Dropbox']
menu = dropbox.menu_bars[1].menu_bar_items[-1].menus[1]
item = menu.items['Pause Syncing']
item.click()
</snippet></ROW><ROW><id>14188818</id><snippet>WM_*</snippet></ROW><ROW><id>14188818</id><snippet>subprocess</snippet></ROW><ROW><id>14188818</id><snippet>open</snippet></ROW><ROW><id>14188818</id><snippet>shell=True</snippet></ROW><ROW><id>14188968</id><snippet>xlrd</snippet></ROW><ROW><id>14188968</id><snippet>xlwt</snippet></ROW><ROW><id>14188968</id><snippet>fname = "sample.xls"
bk = xlrd.open_workbook(fname)
shxrange = range(bk.nsheets)
try:
    sh = bk.sheet_by_name("Sheet1")
except:
    print "no sheet in %s named Sheet1" % fname
    return None
nrows = sh.nrows
ncols = sh.ncols
print "nrows %d, ncols %d" % (nrows,ncols)

cell_value = sh.cell_value(1,1)
print cell_value

row_list = []
for i in range(1,nrows):
    row_data = sh.row_values(i)
    row_list.append(row_data)
</snippet></ROW><ROW><id>14188968</id><snippet>openpyxl</snippet></ROW><ROW><id>14189374</id><snippet>#! /usr/bin/python3.2

pages_id_list = [ (22, 4),(45,1),(1,1), (4,4),(566,45),(7,7),(783,566), (66,1),(300,8),(8,4),(101,7),(80,22), (17,17),(911,66) ]

class Node:
    def __init__ (self, article):
        self.article = article
        self.children = []
        self.parent = None

    def print (self, level = 0):
        print ('{}{}'.format ('\t' * level, self.article) )
        for child in self.children: child.print (level + 1)

class Tree:
    def __init__ (self): self.nodes = {}

    def push (self, item):
        article, parent = item
        if parent not in self.nodes: self.nodes [parent] = Node (parent)
        if article not in self.nodes: self.nodes [article] = Node (article)
        if parent == article: return
        self.nodes [article].parent = self.nodes [parent]
        self.nodes [parent].children.append (self.nodes [article] )

    @property
    def roots (self): return (x for x in self.nodes.values () if not x.parent)

t = Tree ()
for i in pages_id_list: t.push (i)
for node in t.roots: node.print ()
</snippet></ROW><ROW><id>14189374</id><snippet>t.nodes [article]</snippet></ROW><ROW><id>14189374</id><snippet>t.nodes [article].children</snippet></ROW><ROW><id>14189374</id><snippet>1
    45
        566
            783
    66
        911
4
    22
        80
    8
        300
7
    101
17
</snippet></ROW><ROW><id>14189430</id><snippet>i = 0
while not it.finished:
    i += 1
print i
</snippet></ROW><ROW><id>14189430</id><snippet>while not it.finished:
    print '&gt;', it.operands[0], it[0]
    indices = np.arange(it[0],(it[0]+4), dtype=int)
    info = array.take(indices)
    info = info + 81
    it.operands[1][...]=info
    print '&lt;', it.operands[1], it[1]
</snippet></ROW><ROW><id>14189430</id><snippet>[0 4 8 12 16]</snippet></ROW><ROW><id>14189430</id><snippet>[[81 82 83 84]]</snippet></ROW><ROW><id>14189430</id><snippet>[[85 86 87 88]]</snippet></ROW><ROW><id>14189430</id><snippet>c_index</snippet></ROW><ROW><id>14189430</id><snippet>it.index</snippet></ROW><ROW><id>14189430</id><snippet>it.operands[1]</snippet></ROW><ROW><id>14189430</id><snippet>it.operands[1][...]=info</snippet></ROW><ROW><id>14189430</id><snippet>it.operands[1]</snippet></ROW><ROW><id>14189430</id><snippet>nditer</snippet></ROW><ROW><id>14189430</id><snippet>it[1]</snippet></ROW><ROW><id>14189430</id><snippet>it.operands[1]</snippet></ROW><ROW><id>14189430</id><snippet>it = np.nditer([array.reshape(5, -1), None],
               op_flags=[['readonly'],
                         ['readwrite','allocate']])
for a, b in it:
    b = a+81
return it.operands[1]
</snippet></ROW><ROW><id>14189430</id><snippet>return array+81
</snippet></ROW><ROW><id>14189430</id><snippet>reshape</snippet></ROW><ROW><id>14189430</id><snippet>reshape</snippet></ROW><ROW><id>14189430</id><snippet>allocate</snippet></ROW><ROW><id>14189430</id><snippet>outarray = np.zeros((5,4), dtype=array.dtype)
offset = np.array([0, 4, 8, 12, 16])
it = np.nditer([offset, outarray],
               flags=['reduce_ok'],
               op_flags=[['readonly'],
                         ['readwrite']],
               op_axes=[None, [0]],
               itershape=[5])

while not it.finished:
    indices = np.arange(it[0],(it[0]+4), dtype=int)
    info = array.take(indices)
    '''Just for fun, we'll perform an operation on data.\
       Let's shift it to 100'''
    info = info + 81
    it.operands[1][it.index][...]=info
    it.iternext()
return it.operands[1]
</snippet></ROW><ROW><id>14189430</id><snippet>npiter</snippet></ROW><ROW><id>14189430</id><snippet>nditer</snippet></ROW><ROW><id>14189430</id><snippet>for a, b in nditer([x, y], …)</snippet></ROW><ROW><id>14189430</id><snippet>x</snippet></ROW><ROW><id>14189430</id><snippet>y</snippet></ROW><ROW><id>14189430</id><snippet>for a, b in zip(x, y)</snippet></ROW><ROW><id>14189430</id><snippet>numpy</snippet></ROW><ROW><id>14189430</id><snippet>nditer</snippet></ROW><ROW><id>14189430</id><snippet>[0, 4, 8, 16, 20]</snippet></ROW><ROW><id>14189430</id><snippet>array</snippet></ROW><ROW><id>14189430</id><snippet>numpy</snippet></ROW><ROW><id>14189430</id><snippet>numpy</snippet></ROW><ROW><id>14189430</id><snippet>array</snippet></ROW><ROW><id>14189430</id><snippet>import numpy as np
import timeit

def add10_numpy(array):
    return array + 10

def add10_nditer(array):
    it = np.nditer([array, None], [],
                   [['readonly'], ['writeonly', 'allocate']])
    for a, b in it:
        np.add(a, 10, b)
    return it.operands[1]

def add10_py(array):
    x, y = array.shape
    outarray = array.copy()
    for i in xrange(x):
        for j in xrange(y):
            outarray[i, j] = array[i, j] + 10
    return out array

myArray = np.arange(100000).reshape(250,-1)

for f in add10_numpy, add10_nditer, add10_py:
    print '%12s: %s' % (f.__name__, timeit.timeit(lambda: f(myArray), number=1))
</snippet></ROW><ROW><id>14189430</id><snippet> add10_numpy: 0.000458002090454
add10_nditer: 0.292730093002
    add10_py: 0.127345085144
</snippet></ROW><ROW><id>14189430</id><snippet>nditer</snippet></ROW><ROW><id>14189570</id><snippet>def skip(seconds):
    samples = int(seconds * RATE)
    count = 0
    while count &lt; samples:
        stream.read(chunk)
        count += chunk
        time.sleep(0.01)
</snippet></ROW><ROW><id>14189726</id><snippet>open()</snippet></ROW><ROW><id>14189726</id><snippet>.call()</snippet></ROW><ROW><id>14189726</id><snippet>Popen</snippet></ROW><ROW><id>14189726</id><snippet>&gt;&gt;&gt; p = subprocess.Popen(['python', '-c', 'print "test"'], stdout=subprocess.PIPE)
&gt;&gt;&gt; p.stdout.read()
'test\r\n'
</snippet></ROW><ROW><id>14189912</id><snippet>df.columns</snippet></ROW><ROW><id>14189912</id><snippet>levels = df.columns.levels
labels = df.columns.labels
df.columns = levels[1][labels[1]]
</snippet></ROW><ROW><id>14189912</id><snippet>import pandas as pd

columns = pd.MultiIndex.from_arrays([['basic_amt']*4,
                                     ['NSW','QLD','VIC','All']])
index = pd.Index(['All', 'Full Time', 'Part Time'], name = 'Faculty')
df = pd.DataFrame([(1,1,2,4),
                   (0,01,0,1),
                   (1,0,2,3)])
df.columns = columns
df.index = index
</snippet></ROW><ROW><id>14189912</id><snippet>print(df)

           basic_amt               
                 NSW  QLD  VIC  All
Faculty                            
All                1    1    2    4
Full Time          0    1    0    1
Part Time          1    0    2    3
</snippet></ROW><ROW><id>14189912</id><snippet>levels = df.columns.levels
labels = df.columns.labels
df.columns = levels[1][labels[1]]
print(df)

           NSW  QLD  VIC  All
Faculty                      
All          1    1    2    4
Full Time    0    1    0    1
Part Time    1    0    2    3
</snippet></ROW><ROW><id>14189962</id><snippet>list1 = range(10)
list2 = range(10) + range(11,15) # no in place modification here.
nolist1 = list1.extend(range(11,15)) # list1 is now (0 ... 14)
nolist2 = range(10).extend(range(11,15)) # Nothing actually happens here.
</snippet></ROW><ROW><id>14189962</id><snippet>range</snippet></ROW><ROW><id>14189962</id><snippet>None</snippet></ROW><ROW><id>14190108</id><snippet>class forwardTo(object):
    """
    A descriptor based recipe that makes it possible to write shorthands
    that forward attribute access from one object onto another.

    &gt;&gt;&gt; class C(object):
    ...     def __init__(self):
    ...         class CC(object):
    ...             def xx(self, extra):
    ...                 return 100 + extra
    ...             foo = 42
    ...         self.cc = CC()
    ...
    ...     localcc = forwardTo('cc', 'xx')
    ...     localfoo = forwardTo('cc', 'foo')
    ...
    &gt;&gt;&gt; print C().localcc(10)
    110
    &gt;&gt;&gt; print C().localfoo
    42

    Arguments: objectName - name of the attribute containing the second object.
               attrName - name of the attribute in the second object.
    Returns:   An object that will forward any calls as described above.
    """
    def __init__(self, objectName, attrName):
        self.objectName = objectName
        self.attrName = attrName
    def __get__(self, instance, owner=None):
        return getattr(getattr(instance, self.objectName), self.attrName)
    def __set__(self, instance, value):
        setattr(getattr(instance, self.objectName), self.attrName, value)
    def __delete__(self, instance):
        delattr(getattr(instance, self.objectName), self.attrName)
</snippet></ROW><ROW><id>14190108</id><snippet>getattr(instance, self.objectName)</snippet></ROW><ROW><id>14190108</id><snippet>operator.attrgetter(self.objectName)(instance)</snippet></ROW><ROW><id>14190108</id><snippet>objectName</snippet></ROW><ROW><id>14190108</id><snippet>A.c</snippet></ROW><ROW><id>14190108</id><snippet>A.x.y.z.d</snippet></ROW><ROW><id>14190143</id><snippet>timedelta</snippet></ROW><ROW><id>14190143</id><snippet>days, seconds = duration.days, duration.seconds
hours = days * 24 + seconds // 3600
minutes = (seconds % 3600) // 60
seconds = seconds % 60
</snippet></ROW><ROW><id>14190143</id><snippet>seconds = duration.total_seconds()
hours = seconds // 3600
minutes = (seconds % 3600) // 60
seconds = seconds % 60
</snippet></ROW><ROW><id>14190143</id><snippet>'{} minutes, {} hours'.format(minutes, hours)
</snippet></ROW><ROW><id>14190143</id><snippet>def convert_timedelta(duration):
    days, seconds = duration.days, duration.seconds
    hours = days * 24 + seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = (seconds % 60)
    return hours, minutes, seconds
td = datetime.timedelta(2, 7743, 12345)
hours, minutes, seconds = convert_timedelta(td)
print '{} minutes, {} hours'.format(minutes, hours)
</snippet></ROW><ROW><id>14190143</id><snippet>9 minutes, 50 hours
</snippet></ROW><ROW><id>14190143</id><snippet>print '{} minute{}, {} hour{}'.format(minutes, 's' if minutes != 1 else '',
                                      hours, 's' if minutes != 1 else '')
</snippet></ROW><ROW><id>14190143</id><snippet>english_plural</snippet></ROW><ROW><id>14190143</id><snippet>'s'</snippet></ROW><ROW><id>14190143</id><snippet>def convert_timedelta(duration):
    days, seconds = duration.days, duration.seconds
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    seconds = (seconds % 60)
    return days, hours, minutes, seconds
</snippet></ROW><ROW><id>14190143</id><snippet>def dhms_to_seconds(days, hours, minutes, seconds):
    return (((days * 24) + hours) * 60 + minutes) * 60 + seconds

def seconds_to_dhms(seconds):
    days = seconds // (3600 * 24)
    hours = (seconds // 3600) % 24
    minutes = (seconds // 60) % 60
    seconds = seconds % 60
    return days, hours, minutes, seconds
</snippet></ROW><ROW><id>14190143</id><snippet>def store_timedelta_in_database(thingy, duration):
    seconds = dhms_to_seconds(*convert_timedelta(duration))
    db.execute('INSERT INTO foo (thingy, duration) VALUES (?, ?)',
               thingy, seconds)
    db.commit()

def print_timedelta_from_database(thingy):
    cur = db.execute('SELECT duration FROM foo WHERE thingy = ?', thingy)
    seconds = int(cur.fetchone()[0])
    days, hours, minutes, seconds = seconds_to_dhms(seconds)
    print '{} took {} minutes, {} hours, {} days'.format(thingy, minutes, hours, days)
</snippet></ROW><ROW><id>14190202</id><snippet># On the top of the file:
from django.db.models import Q

# Game instance method:
def get_all_players(self):
    return Player.objects.filter(Q(games1__pk=self.pk) | Q(games2__pk=self.pk))
</snippet></ROW><ROW><id>14190202</id><snippet>Q</snippet></ROW><ROW><id>14190248</id><snippet>from bs4 import BeautifulSoup as BS
text = '''&lt;a href="/p/123411/"&gt;&lt;img src="/p_img/411/123411/639469aa9f_123411_100.jpg" alt="ABCDXYZ" /&gt;'''
soup = BS(text)
print soup.find('img').attrs['alt']
</snippet></ROW><ROW><id>14190311</id><snippet>cgi</snippet></ROW><ROW><id>14190335</id><snippet>open</snippet></ROW><ROW><id>14190335</id><snippet>FileObjects</snippet></ROW><ROW><id>14190335</id><snippet>for filename in os.listdir('C:\project'):
    bigfile = open(filename, 'r').read()
    # Now the file contents are saved within bigfile, and you can do as you please,
    #  accessing multiple times.
</snippet></ROW><ROW><id>14190335</id><snippet>open</snippet></ROW><ROW><id>14190335</id><snippet>csv</snippet></ROW><ROW><id>14190543</id><snippet>HT = [ [] ] * size</snippet></ROW><ROW><id>14190543</id><snippet>size</snippet></ROW><ROW><id>14190543</id><snippet>add_HT</snippet></ROW><ROW><id>14190543</id><snippet>HT</snippet></ROW><ROW><id>14190543</id><snippet>[[] for i in xrange(size)]</snippet></ROW><ROW><id>14190693</id><snippet>&gt;&gt;&gt; grid = [[True]]*10
&gt;&gt;&gt; grid = [True]*10
&gt;&gt;&gt; [id(e) for e in grid]
[505379788, 505379788, 505379788, 505379788, 505379788, 505379788, 505379788, 505379788, 505379788, 505379788]
</snippet></ROW><ROW><id>14190693</id><snippet>&gt;&gt;&gt; [id(e) for e in grid]
[66523744, 66523744, 66523744, 66523744, 66523744, 66523744, 66523744, 66523744, 66523744, 66523744]
&gt;&gt;&gt; grid[0][0]=False
&gt;&gt;&gt; [id(e) for e in grid]
[66523744, 66523744, 66523744, 66523744, 66523744, 66523744, 66523744, 66523744, 66523744, 66523744]
&gt;&gt;&gt; grid
[[False], [False], [False], [False], [False], [False], [False], [False], [False], [False]]
</snippet></ROW><ROW><id>14190693</id><snippet>[[False]*N for _ in range(N)]
</snippet></ROW><ROW><id>14190908</id><snippet>typeone = SelectField("Question1", coerce=str, choices=QUESTION_LIST['QuestionOne'])
</snippet></ROW><ROW><id>14190908</id><snippet>coerce</snippet></ROW><ROW><id>14190908</id><snippet>coerce</snippet></ROW><ROW><id>14191085</id><snippet>name="development"</snippet></ROW><ROW><id>14191085</id><snippet>execfile('development_settings.py')</snippet></ROW><ROW><id>14191299</id><snippet>init_q.append(map(list, p))    # Initialize a new list from p's element lists
</snippet></ROW><ROW><id>14191407</id><snippet># requires numpy and PyMix (matplotlib is just for making a histogram)
import random
import numpy as np
from matplotlib import pyplot as plt
import mixture

random.seed(010713)  # to make it reproducible

# create a mixture of normals:
#  1000 from N(0, 1)
#  2000 from N(6, 2)
mix = np.concatenate([np.random.normal(0, 1, [1000]),
                      np.random.normal(6, 2, [2000])])

# histogram:
plt.hist(mix, bins=20)
plt.savefig("mixture.pdf")
</snippet></ROW><ROW><id>14191407</id><snippet>data = mixture.DataSet()
data.fromArray(mix)

# start them off with something arbitrary (probably based on a guess from the figure)
n1 = mixture.NormalDistribution(-1,1)
n2 = mixture.NormalDistribution(1,1)
m = mixture.MixtureModel(2,[0.5,0.5], [n1,n2])

# perform expectation maximization
m.EM(data, 40, .1)
print m
</snippet></ROW><ROW><id>14191407</id><snippet>G = 2
p = 1
pi =[ 0.33307859  0.66692141]
compFix = [0, 0]
Component 0:
  ProductDist: 
  Normal:  [0.0360178848449, 1.03018725918]

Component 1:
  ProductDist: 
  Normal:  [5.86848468319, 2.0158608802]
</snippet></ROW><ROW><id>14191407</id><snippet>N(0, 1)</snippet></ROW><ROW><id>14191407</id><snippet>N(6, 2)</snippet></ROW><ROW><id>14191407</id><snippet>pi</snippet></ROW><ROW><id>14191407</id><snippet>[ 0.33307859  0.66692141]</snippet></ROW><ROW><id>14191407</id><snippet>m.pi</snippet></ROW><ROW><id>14191407</id><snippet>[(1.4, 2), (2.6, 3)]</snippet></ROW><ROW><id>14191407</id><snippet>[1.4, 1.4, 2.6, 2.6, 2.6]</snippet></ROW><ROW><id>14191456</id><snippet>'''</snippet></ROW><ROW><id>14191456</id><snippet>"""</snippet></ROW><ROW><id>14191456</id><snippet>"</snippet></ROW><ROW><id>14191456</id><snippet>"""</snippet></ROW><ROW><id>14191456</id><snippet>'</snippet></ROW><ROW><id>14191456</id><snippet>"</snippet></ROW><ROW><id>14191456</id><snippet>format</snippet></ROW><ROW><id>14191456</id><snippet>str</snippet></ROW><ROW><id>14191456</id><snippet>unicode</snippet></ROW><ROW><id>14191456</id><snippet>s = """This is a string with a {variable} to fill in.
Here's a {second} one
""".format(variable="field", second="'nother")
</snippet></ROW><ROW><id>14191456</id><snippet>This is a string with a field to fill in.
Here's a 'nother one
</snippet></ROW><ROW><id>14191456</id><snippet>{0}</snippet></ROW><ROW><id>14191456</id><snippet>{variable}</snippet></ROW><ROW><id>14191456</id><snippet>{}</snippet></ROW><ROW><id>14191456</id><snippet>repr</snippet></ROW><ROW><id>14191456</id><snippet>str</snippet></ROW><ROW><id>14191456</id><snippet>%</snippet></ROW><ROW><id>14191456</id><snippet>printf</snippet></ROW><ROW><id>14191456</id><snippet>s = """This is a string with a %(variable)s to fill in.
Here's a %(second)s one
""" % {"variable": "field", "second": "'nother"}
</snippet></ROW><ROW><id>14191456</id><snippet>printf</snippet></ROW><ROW><id>14191915</id><snippet>monday1</snippet></ROW><ROW><id>14191915</id><snippet>d1</snippet></ROW><ROW><id>14191915</id><snippet>from datetime import datetime, timedelta

monday1 = (d1 - timedelta(days=d1.weekday()))
monday2 = (d2 - timedelta(days=d2.weekday()))

print (monday2 - monday1).days() / 7
</snippet></ROW><ROW><id>14191933</id><snippet>^</snippet></ROW><ROW><id>14191933</id><snippet>$</snippet></ROW><ROW><id>14191933</id><snippet>regexp=re.compile(r'[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,6}', re.IGNORECASE)
</snippet></ROW><ROW><id>14192381</id><snippet>post.user_key = shuffle(users)[0].key
</snippet></ROW><ROW><id>14192461</id><snippet>var required_data = {deleted_nodes:tr_id};
$.ajax({
    type:"POST",
    cache:false,
    url:$('#items_form').attr('action'),
    data:required_data,
    success:function () {
    }
});
</snippet></ROW><ROW><id>14192461</id><snippet>var table = $('#itemsTable').dataTable({"bRetrieve":true});
var nodes = table.fnGetNodes();
table.fnDeleteRow(nodes[parseInt(tr_number) - 1], null, true);
nodes = table.fnGetNodes();
var data = [];
for (var i = 0; i &lt; nodes.length; i++) {
    data.push(
            {
                count:(i + 1).toString(),
                name:nodes[i].cells[1].innerHTML,
                type:nodes[i].cells[2].innerHTML,
                specialName:nodes[i].cells[3].innerHTML,
                status:nodes[i].cells[4].innerHTML,
                manage:nodes[i].cells[5].attributes['id']
            }
    );
}
var oSettings = {
    "aaData":data,
    "aoColumns":[
        {"sTitle":"number", "mDataProp":"count", "style":"width:10px;"},
        {"sTitle":"name", "mDataProp":"name", "style":"width:50px;"},
        {"sTitle":"type", "mDataProp":"type", "style":"width:50px;"},
        {"sTitle":"special name", "mDataProp":"specialName", "style":"width:50px;"},
        {"sTitle":"status", "mDataProp":"status", "style":"width:50px;"},
        {"sTitle":"management", "mDataProp":"manage", "style":"width:25px; text-align: center;"}
    ],
    "sScrollY":"500px",
    "bPaginate":false,
    "bScrollCollapse":true,
    "bFilter":false,
    "bDestroy":true,
    "fnRowCallback":function (nRow, aData, iDisplayIndex, iDisplayIndexFull) {
        var str = '&lt;span&gt;&lt;img src="' + 'error.png' +
                '" name="delete"' + ' style="width:20px;height:20px;cursor:pointer" ' +
                'onclick="' + "delete_item('" + aData.count + "', '" + aData.manage.value + "');" +
                '" class="small-icon"' + ' title="delete this" /&gt;&lt;/span&gt;' +
                '&lt;span&gt;&lt;img src="' + 'warning.png' +
                '" name="edit"' + ' style="width:20px;height:20px;cursor:pointer" ' +
                'onclick="' + "report_problem('" + aData.count + "', '" + aData.manage.value + "', '" + aData.type + "');" +
                '" class="small-icon"' + ' title="edit this" /&gt;&lt;/span&gt;';
        $('td:eq(5)', nRow).html(str);
        $('td:eq(5)', nRow)[0].setAttribute('id', aData.manage.value);
    }
};
table.dataTable('#itemsTable', oSettings);
</snippet></ROW><ROW><id>14192461</id><snippet>manage:nodes[i].cells[5].attributes['id']
</snippet></ROW><ROW><id>14192461</id><snippet>$('td:eq(5)', nRow).html(str);
</snippet></ROW><ROW><id>14192461</id><snippet>$('td:eq(5)', nRow)[0].setAttribute('id', aData.manage.value);
</snippet></ROW><ROW><id>14192708</id><snippet>"""Use custom meta hook to import modules available as strings. 
Cp. PEP 302 http://www.python.org/dev/peps/pep-0302/#specification-part-2-registering-hooks"""
import sys
import imp

modules = {"a" : 
"""def hello():
    return 'Hello World A!'""",
"b":
"""def hello():
    return 'Hello World B!'"""}    

class StringImporter(object):

   def __init__(self, modules):
       self._modules = dict(modules)


   def find_module(self, fullname, path):
      if fullname in self._modules.keys():
         return self
      return None

   def load_module(self, fullname):
      if not fullname in self._modules.keys():
         raise ImportError(fullname)

      new_module = imp.new_module(fullname)
      exec self._modules[fullname] in new_module.__dict__
      return new_module


if __name__ == '__main__':
   sys.meta_path.append(StringImporter(modules))

   # Let's use our import hook
   from a import hello
   print hello()
   from b import hello
   print hello()
</snippet></ROW><ROW><id>14193170</id><snippet>df[df.key==1]['D']</snippet></ROW><ROW><id>14193170</id><snippet>df.D[df.key==1] = 3.4</snippet></ROW><ROW><id>14193170</id><snippet>__getitem__</snippet></ROW><ROW><id>14193170</id><snippet>__setitem__</snippet></ROW><ROW><id>14193349</id><snippet>twitterAPI.User().SetProfileImageUrl("http://website.com/image.jpg")
twitterAPI.User().SetDescription("Hello there")
</snippet></ROW><ROW><id>14193420</id><snippet>import unicodedata

tag = "#tag"
text = u"test string with #tág inserted and a #tag"
text=unidecode(text)
re.findall(tag, text, re.IGNORECASE)
</snippet></ROW><ROW><id>14193420</id><snippet>['#tag', '#tag']
</snippet></ROW><ROW><id>14193473</id><snippet>&gt;&gt;&gt;&gt; x = set([1, 2, 3])
&gt;&gt;&gt;&gt; y = x
&gt;&gt;&gt;&gt; 
&gt;&gt;&gt;&gt; y |= set([4, 5, 6])

&gt;&gt;&gt;&gt; print x
set([1, 2, 3, 4, 5, 6])
&gt;&gt;&gt;&gt; print y
set([1, 2, 3, 4, 5, 6])
</snippet></ROW><ROW><id>14194681</id><snippet>questions_fname = "Test.txt"

with open(questions_fname) as f:
    for line in f:
        line = line.rstrip().replace('\\n', '\n')
        print(line)
</snippet></ROW><ROW><id>14194681</id><snippet>.rstrip()</snippet></ROW><ROW><id>14194681</id><snippet>\n</snippet></ROW><ROW><id>14194681</id><snippet>.replace()</snippet></ROW><ROW><id>14194681</id><snippet>\n</snippet></ROW><ROW><id>14194681</id><snippet>\</snippet></ROW><ROW><id>14194681</id><snippet>n</snippet></ROW><ROW><id>14194681</id><snippet>with</snippet></ROW><ROW><id>14194681</id><snippet>f.close()</snippet></ROW><ROW><id>14194986</id><snippet>cursor.execute</snippet></ROW><ROW><id>14194986</id><snippet>cursor.fetchall</snippet></ROW><ROW><id>14194986</id><snippet>db = MySQLdb.connect(user='root', db='galaxy', passwd='devil', host='localhost')
cursor = db.cursor()
cursor.execute('SELECT username, password FROM galaxy_user')
names, passw = zip(*cursor.fetchall())
db.close()
</snippet></ROW><ROW><id>14194986</id><snippet>records = cursor.fetchall()
names = [record[0] for record in records]
passw = [record[1] for record in records]
</snippet></ROW><ROW><id>14194986</id><snippet>user_pass = dict(cursor.fetchall())
</snippet></ROW><ROW><id>14194986</id><snippet>user_pass = dict(cursor)
</snippet></ROW><ROW><id>14194993</id><snippet>second_dict</snippet></ROW><ROW><id>14194993</id><snippet>resi = {k: dict(second_dict) for k in res}
</snippet></ROW><ROW><id>14194993</id><snippet>dict(second_dict)</snippet></ROW><ROW><id>14194993</id><snippet>second_dict</snippet></ROW><ROW><id>14195064</id><snippet>python</snippet></ROW><ROW><id>14195064</id><snippet>process = subprocess.Popen(['/usr/sbin/telepath','engine','start'], shell=False, stdout=subprocess.PIPE)
print process.stdout.read()
</snippet></ROW><ROW><id>14195064</id><snippet>apache</snippet></ROW><ROW><id>14195064</id><snippet>userid</snippet></ROW><ROW><id>14195064</id><snippet>/usr/sbin/telepath</snippet></ROW><ROW><id>14195163</id><snippet>__setitem__</snippet></ROW><ROW><id>14195163</id><snippet>class MyDict(dict):
    def __setitem__(self, key, val):
        #Test for proper interface
        if val.pass_the_test:
            dict.__setitem__(self, key, val)
        else:
            raise SomeKindOfException() 
</snippet></ROW><ROW><id>14195811</id><snippet>Database Exceptions</snippet></ROW><ROW><id>14195911</id><snippet>Exception.args</snippet></ROW><ROW><id>14195911</id><snippet>__set__</snippet></ROW><ROW><id>14195911</id><snippet>self.args</snippet></ROW><ROW><id>14195911</id><snippet>self.args</snippet></ROW><ROW><id>14195911</id><snippet>list()</snippet></ROW><ROW><id>14195911</id><snippet>Exception.args</snippet></ROW><ROW><id>14195911</id><snippet>BaseException.args</snippet></ROW><ROW><id>14195911</id><snippet>&gt;&gt;&gt; ex = Exception(1, 2)
&gt;&gt;&gt; ex.args
(1, 2)
&gt;&gt;&gt; ex[0]
1
</snippet></ROW><ROW><id>14195911</id><snippet>.args</snippet></ROW><ROW><id>14195911</id><snippet>__str__</snippet></ROW><ROW><id>14195911</id><snippet>.args</snippet></ROW><ROW><id>14196077</id><snippet>d = {}
wb = xlrd.open_workbook('foo.xls')
sh = wb.sheet_by_index(2)   
for i in range(138):
    cell_value_class = sh.cell(i,2).value
    cell_value_id = sh.cell(i,0).value
    d[cell_value_class] = cell_value_id
</snippet></ROW><ROW><id>14196194</id><snippet>abc.ABCMeta</snippet></ROW><ROW><id>14196194</id><snippet>ABCMeta</snippet></ROW><ROW><id>14196194</id><snippet>&gt;&gt;&gt; from abc import ABCMeta, abstractmethod
&gt;&gt;&gt; class Foo(object):
    __metaclass__ = ABCMeta
    @abstractmethod
    def bar(self): pass


&gt;&gt;&gt; class BadFoo(Foo):
    pass

&gt;&gt;&gt; BadFoo()

Traceback (most recent call last):
  File "&lt;pyshell#9&gt;", line 1, in &lt;module&gt;
    BadFoo()
TypeError: Can't instantiate abstract class BadFoo with abstract methods bar
&gt;&gt;&gt; class GoodFoo(Foo):
    def bar(self):
        return 42


&gt;&gt;&gt; GoodFoo()
&lt;__main__.GoodFoo object at 0x027354B0&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14196195</id><snippet>home</snippet></ROW><ROW><id>14196195</id><snippet>home=/path/to/venv/
</snippet></ROW><ROW><id>14196195</id><snippet>uwsgi --ini django.ini --protocol=http
</snippet></ROW><ROW><id>14196197</id><snippet>select *</snippet></ROW><ROW><id>14196197</id><snippet>select *</snippet></ROW><ROW><id>14196246</id><snippet>selenium</snippet></ROW><ROW><id>14196246</id><snippet>'.//tag/@href'
</snippet></ROW><ROW><id>14196246</id><snippet>for elem in elems:
    elem.click()
    print browser.current_url
    browser.back()
</snippet></ROW><ROW><id>14196401</id><snippet>a, b, c, d = max(a, x), max(b, x), max(c, x), max(d, x)
</snippet></ROW><ROW><id>14196401</id><snippet>list</snippet></ROW><ROW><id>14196401</id><snippet>values = [0.03,0.4,0.055,0.7]
x = 0.2

values = [max(v, x) for v in values]
</snippet></ROW><ROW><id>14196562</id><snippet>view</snippet></ROW><ROW><id>14196562</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; dt = np.dtype([('name',np.str_,2),('val',np.float_)])
&gt;&gt;&gt; constants = np.array([('pi',3.14),('e',2.72)],dtype=dt)
&gt;&gt;&gt; 
&gt;&gt;&gt; numbers = constants.view([('constants',dt)])
&gt;&gt;&gt; 
&gt;&gt;&gt; numbers['constants']
array([('pi', 3.14), ('e', 2.72)], 
      dtype=[('name', '|S2'), ('val', '&lt;f8')])
</snippet></ROW><ROW><id>14196562</id><snippet>numbers</snippet></ROW><ROW><id>14196631</id><snippet>POSTs to /_ah/channel/connected/ 
POSTs to /_ah/channel/disconnected/ 
</snippet></ROW><ROW><id>14196631</id><snippet>onerror</snippet></ROW><ROW><id>14196676</id><snippet>s.sendmail</snippet></ROW><ROW><id>14196676</id><snippet>s.login('user', 'password')</snippet></ROW><ROW><id>14196695</id><snippet>for a in soup.find_all('a', {"style": "display:inline; position:relative;"}, href=True):
    href = a['href'].strip()
    href = "http://example.com" + href
print(href)

'http://example.com/aems/file/filegetrevision.do?fileEntityId=8120070&amp;cs=LU31NT9us5P9Pvkb1BrtdwaCrEraskiCJcY6E2ucP5s.xyz'
</snippet></ROW><ROW><id>14196695</id><snippet>strip()</snippet></ROW><ROW><id>14196742</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; import functools
&gt;&gt;&gt; 
&gt;&gt;&gt; old1 = [[1,2],[3,4,5],[6,7,8],[9]]
&gt;&gt;&gt; old2 = [[1,2,3],[4,5,7],[6,8,10]]
&gt;&gt;&gt; 
&gt;&gt;&gt; unique1 = functools.reduce(lambda a,b: set(a).union(set(b)),old1)
&gt;&gt;&gt; unique2 = functools.reduce(lambda a,b: set(a).union(set(b)),old2)
&gt;&gt;&gt; new = [list(set(a).intersection(set(b))) for a,b in itertools.product(old1,old2) if len(set(a).intersection(set(b))) != 0]
&gt;&gt;&gt; new.extend([x] for x in unique1.symmetric_difference(unique2))
&gt;&gt;&gt; 
&gt;&gt;&gt; new
[[1, 2], [3], [4, 5], [7], [8, 6], [9], [10]]
</snippet></ROW><ROW><id>14196742</id><snippet>(a|b)-(a&amp;b)</snippet></ROW><ROW><id>14196742</id><snippet>new = filter(None, [list(set(a) &amp; set(b)) for a in old1 for b in old2)])</snippet></ROW><ROW><id>14197846</id><snippet>def set_extra_forms(extra_forms, **kwargs):
    EmploymentFormSet = inlineformset_factory(Profile, Employment, form=EmploymentForm, extra=extra_forms)
    return EmploymentFormSet(**kwargs)
</snippet></ROW><ROW><id>14198133</id><snippet>asof</snippet></ROW><ROW><id>14198133</id><snippet>prices.asof('2013-01-01 13:37:42')
</snippet></ROW><ROW><id>14198133</id><snippet>prices['2013-01-01 13:00:00']
</snippet></ROW><ROW><id>14198133</id><snippet>prices.asof(amounts.index) * amounts
</snippet></ROW><ROW><id>14198133</id><snippet>&gt;&gt;&gt; prices
2013-01-01 12:00:00    0.943607
2013-01-01 13:00:00   -1.019452
2013-01-01 14:00:00   -0.279136
2013-01-01 15:00:00    1.013548
2013-01-01 16:00:00    0.929920

&gt;&gt;&gt; prices.asof(amounts.index)
2013-01-01 13:37:00   -1.019452
2013-01-01 13:57:00   -1.019452
2013-01-01 14:05:00   -0.279136

&gt;&gt;&gt; prices.asof(amounts.index) * amounts
2013-01-01 13:37:00   -1.019452
2013-01-01 13:57:00   -2.038904
2013-01-01 14:05:00   -0.558272
</snippet></ROW><ROW><id>14198163</id><snippet>StyledTextCtrl</snippet></ROW><ROW><id>14198163</id><snippet>import wx
import wx.stc as stc

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.panel = wx.Panel(self)

        self.text = stc.StyledTextCtrl(self.panel)
        self.text.SetWindowStyle(self.text.GetWindowStyle() | wx.DOUBLE_BORDER)
        self.text.StyleSetSpec(stc.STC_STYLE_DEFAULT, "size:15,face:Courier New")
        self.text.SetWrapMode(stc.STC_WRAP_WORD)        

        self.menu = wx.Menu()
        self.menu.Append(wx.ID_ABOUT, "&amp;About", "Information about this program")
        self.menu_bar = wx.MenuBar()
        self.menu_bar.Append(self.menu, "&amp;File")
        self.SetMenuBar(self.menu_bar)

        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.text, 1, wx.TOP | wx.EXPAND, 50)

        self.panel.SetSizerAndFit(self.sizer)

        self.text.Bind(stc.EVT_STC_CHANGE, self.OnChange)
        self.Show()

        self.text.SetText("Line!\n"*98)

    def OnChange(self, e):
        lines = self.text.GetLineCount()
        width = self.text.TextWidth(stc.STC_STYLE_LINENUMBER, str(lines)+" ")
        self.text.SetMarginWidth(0, width)


if __name__ == "__main__":
    app = wx.App(False)
    win = MainWindow(None)
    app.MainLoop()
</snippet></ROW><ROW><id>14198216</id><snippet>func_code</snippet></ROW><ROW><id>14198216</id><snippet>co_argcount</snippet></ROW><ROW><id>14198216</id><snippet>boost::python::extract&lt;std::size_t&gt;(fn.attr("func_code").attr("co_argcount"));
</snippet></ROW><ROW><id>14198216</id><snippet>#include &lt;iostream&gt;
#include &lt;boost/python.hpp&gt;

void print_arity(boost::python::object fn)
{
  std::size_t arity = boost::python::extract&lt;std::size_t&gt;(
                        fn.attr("func_code").attr("co_argcount"));
  std::cout &lt;&lt; arity &lt;&lt; std::endl;
}

BOOST_PYTHON_MODULE(example)
{
  def("print_arity", &amp;print_arity);
}
</snippet></ROW><ROW><id>14198216</id><snippet>&gt;&gt;&gt; from example import print_arity
&gt;&gt;&gt; def f1(x,y,z): pass
... 
&gt;&gt;&gt; print_arity(f1)
3
&gt;&gt;&gt; def f1(x): pass
... 
&gt;&gt;&gt; print_arity(f1)
1
</snippet></ROW><ROW><id>14198417</id><snippet>my_entries_list.sort(key=lambda v:
                           datetime.datetime.combine(v.created_date, v.created_time))
</snippet></ROW><ROW><id>14198417</id><snippet>datetime.datetime.combine(created_date, created_time)</snippet></ROW><ROW><id>14198417</id><snippet>combine</snippet></ROW><ROW><id>14198417</id><snippet>created_date</snippet></ROW><ROW><id>14198417</id><snippet>created_time</snippet></ROW><ROW><id>14198417</id><snippet>lambda</snippet></ROW><ROW><id>14198417</id><snippet>created_date</snippet></ROW><ROW><id>14198417</id><snippet>created_time</snippet></ROW><ROW><id>14198515</id><snippet>newstr = oldstr[:4] + oldst[5:]
</snippet></ROW><ROW><id>14198809</id><snippet>xpath</snippet></ROW><ROW><id>14198809</id><snippet>json</snippet></ROW><ROW><id>14198809</id><snippet>import jsonpath
import json
with open('/test.json', 'r') as f:
    data = json.load(f)
path = "$.[?(@.playerStatSummaryType == 'RankedSolo5x5')].rating"
jsonpath.jsonpath(data,path)
</snippet></ROW><ROW><id>14198809</id><snippet>[1505]
</snippet></ROW><ROW><id>14198817</id><snippet>import re    
csvfile = open('abc.csv','r')
csv = [line.split(',') for line in csvfile.readlines()]
</snippet></ROW><ROW><id>14198817</id><snippet>for i in csv[1:]:
    if len(i) &gt; len(csv[0]):
        print("found a data row that is longer then the header row.")
</snippet></ROW><ROW><id>14198817</id><snippet>blank = re.compile(r'\s*')
for i in csv[0]:
    if blank.match(i).end() == len(i):
        print("found an empty header item")
</snippet></ROW><ROW><id>14198817</id><snippet>charset = re.compile(r'\w*')
for i in csv[0]:
    if charset.match(i).end() != len(i):
        print("found a header item that contains special characters.")
</snippet></ROW><ROW><id>14198883</id><snippet>player</snippet></ROW><ROW><id>14198883</id><snippet>dict</snippet></ROW><ROW><id>14198883</id><snippet>list</snippet></ROW><ROW><id>14198883</id><snippet>&gt;&gt;&gt; player=[1,2,3]
&gt;&gt;&gt; player["score"]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: list indices must be integers, not str
&gt;&gt;&gt; player={'score':1, 'age': 2, "foo":3}
&gt;&gt;&gt; player['score']
1
</snippet></ROW><ROW><id>14199008</id><snippet>[app:main]
...
config_file = %(here)s/path/to/file.txt
</snippet></ROW><ROW><id>14199008</id><snippet>def your_view(request):
    config_file = request.registry.settings['config_file']
</snippet></ROW><ROW><id>14199348</id><snippet>with</snippet></ROW><ROW><id>14199348</id><snippet>def test_add(self):
    with self.assertRaises(TypeError):
        self.calculator.add('hello', 4)
</snippet></ROW><ROW><id>14199348</id><snippet>assertRaises</snippet></ROW><ROW><id>14199348</id><snippet>with</snippet></ROW><ROW><id>14199449</id><snippet>def save(self, *args, **kwargs):
        if not self.campaignid:
            self.campaignid = hashlib.sha1(str(random.random())).hexdigest()
        super(Campaign, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>14199488</id><snippet>def leafs_of_branch(node):
    if len(node.children()) == 0:
       return [str(node)]
    else:
       x = []
       for des in node.children():
           x += leafs_of_branch(des)  #x.extend(leafs_of_branch(des)) would work too :-)
       return x
</snippet></ROW><ROW><id>14199488</id><snippet>heads</snippet></ROW><ROW><id>14199489</id><snippet>update</snippet></ROW><ROW><id>14199489</id><snippet>self</snippet></ROW><ROW><id>14199489</id><snippet>def update(self, newdict):
    if len(newdict) &lt;= 10: raise Exception
    dict.update(self, newdict)
</snippet></ROW><ROW><id>14199489</id><snippet>super()</snippet></ROW><ROW><id>14199489</id><snippet>def update(self, newdict):
    if len(newdict) &lt;= 10: raise Exception
    super(MyDict, self).update(newdict)
</snippet></ROW><ROW><id>14199489</id><snippet>super()</snippet></ROW><ROW><id>14199489</id><snippet>def update(self, newdict):
    if len(newdict) &lt;= 10: raise Exception
    super().update(newdict)
</snippet></ROW><ROW><id>14199524</id><snippet>import hashlib
s = "plain"
h = hashlib.sha1(s).hexdigest()
</snippet></ROW><ROW><id>14199555</id><snippet>ABCMeta</snippet></ROW><ROW><id>14199555</id><snippet>__new__</snippet></ROW><ROW><id>14199555</id><snippet>type()</snippet></ROW><ROW><id>14199555</id><snippet>type()</snippet></ROW><ROW><id>14199555</id><snippet>__module__</snippet></ROW><ROW><id>14199555</id><snippet>type</snippet></ROW><ROW><id>14199555</id><snippet>abc</snippet></ROW><ROW><id>14199555</id><snippet>__module__</snippet></ROW><ROW><id>14199555</id><snippet>abc</snippet></ROW><ROW><id>14199555</id><snippet>type()</snippet></ROW><ROW><id>14199555</id><snippet>__main__</snippet></ROW><ROW><id>14199555</id><snippet>__module__</snippet></ROW><ROW><id>14199555</id><snippet>MyClass2 = type('MyClass2', (PackageClass, ), {})
MyClass2.__module__ = __name__
</snippet></ROW><ROW><id>14199555</id><snippet>type</snippet></ROW><ROW><id>14199555</id><snippet>__name__</snippet></ROW><ROW><id>14199555</id><snippet>__module__</snippet></ROW><ROW><id>14199903</id><snippet>x.knob('name_of_the_knob')</snippet></ROW><ROW><id>14199903</id><snippet>x['name_of_the_knob']</snippet></ROW><ROW><id>14199903</id><snippet># select all the nodes
curSel = nuke.selectedNodes() 

# nuke.thisNode() returns the script's context 
# i.e. the node from which the script was invoked
knobToChange = nuke.thisNode()['knobname'].getValue() 
codeIn = nuke.thisNode()['codeinput'].getValue() 

for x in curSel: 
    x.knob(knobToChange).setValue(codeIn) 
</snippet></ROW><ROW><id>14199903</id><snippet>.getValue()</snippet></ROW><ROW><id>14199903</id><snippet>.toScript()</snippet></ROW><ROW><id>14199903</id><snippet># select all the nodes
curSel = nuke.selectedNodes() 

# nuke.thisNode() returns the script's context 
# i.e. the node from which the script was invoked
knobToChange = nuke.thisNode()['knobname'].toScript() 
codeIn = nuke.thisNode()['codeinput'].toScript() 

for x in curSel: 
    x.knob(knobToChange).setValue(codeIn) 
</snippet></ROW><ROW><id>14199903</id><snippet>globals()</snippet></ROW><ROW><id>14199903</id><snippet>eval()</snippet></ROW><ROW><id>14199985</id><snippet>import urllib
urllib.urlretrieve(href, filename)
</snippet></ROW><ROW><id>14200045</id><snippet>?</snippet></ROW><ROW><id>14200045</id><snippet>LIKE</snippet></ROW><ROW><id>14200045</id><snippet>search_string</snippet></ROW><ROW><id>14200045</id><snippet>%</snippet></ROW><ROW><id>14200045</id><snippet>...
search_string = 'bob'
query = 'SELECT * FROM Players WHERE PlayerName LIKE ?'
cur.execute(query, ('%' + search_string + '%'))
</snippet></ROW><ROW><id>14200289</id><snippet>In [1]: df = DataFrame({'ID':[1,1,1,1,1,2,2],'TS':[10,20,25,30,50,10,40],'Stat
us':['G','G','B','B','B','B','B']}, columns=['ID','TS','Status'])

In [2]: f = lambda x: x.diff().sum()

In [3]: df['diff'] = df[df.Status=='B'].groupby('ID')['TS'].transform(f)

In [4]: df
Out[4]:
   ID  TS Status  diff
0   1  10      G   NaN
1   1  20      G   NaN
2   1  25      B    25
3   1  30      B    25
4   1  50      B    25
5   2  10      B    30
6   2  40      B    30
</snippet></ROW><ROW><id>14200289</id><snippet>dataframe</snippet></ROW><ROW><id>14200289</id><snippet>Groupby</snippet></ROW><ROW><id>14200289</id><snippet>diff().sum()</snippet></ROW><ROW><id>14200289</id><snippet>transform</snippet></ROW><ROW><id>14200289</id><snippet>apply</snippet></ROW><ROW><id>14200289</id><snippet>transform</snippet></ROW><ROW><id>14200289</id><snippet>In [1]: df
Out[1]:
   ID   TS Status
0   1   10      G
1   1   20      G
2   1   25      B
3   1   30      B
4   1   50      B
5   1  600      G
6   2   40      G

In [2]: df['shift'] = -df['TS'].diff(-1)

In [3]: df['diff'] = df[df.Status=='B'].groupby('ID')['shift'].transform('sum')
In [4]: df
Out[4]:
   ID   TS Status  shift  diff
0   1   10      G     10   NaN
1   1   20      G      5   NaN
2   1   25      B      5   575
3   1   30      B     20   575
4   1   50      B    550   575
5   1  600      G   -560   NaN
6   2   40      G    NaN   NaN
</snippet></ROW><ROW><id>14200496</id><snippet>v.sort().constructor(0)</snippet></ROW><ROW><id>14200496</id><snippet>v.sort().constructor(0)()</snippet></ROW><ROW><id>14200496</id><snippet>is_func_decl</snippet></ROW><ROW><id>14200496</id><snippet>is_expr</snippet></ROW><ROW><id>14200496</id><snippet>print is_func_decl(v.sort().constructor(0))
print is_expr(v.sort().constructor(0))
print is_expr(v.sort().constructor(0)())
</snippet></ROW><ROW><id>14200530</id><snippet>some_data</snippet></ROW><ROW><id>14200530</id><snippet>create_default_data</snippet></ROW><ROW><id>14200530</id><snippet>some_data</snippet></ROW><ROW><id>14200530</id><snippet>@property</snippet></ROW><ROW><id>14200530</id><snippet>class SomeConcreteClass(object):
    @property
    def some_data():
        return 'Foo'
</snippet></ROW><ROW><id>14200530</id><snippet>some_data</snippet></ROW><ROW><id>14200530</id><snippet>__init__</snippet></ROW><ROW><id>14200571</id><snippet>video_entry = yt_service.GetYouTubeVideoEntry('https://gdata.youtube.com/feeds/api/users/default/uploads/VIDEO_ID')</snippet></ROW><ROW><id>14200571</id><snippet>youtube.videos().delete(id=VIDEO_ID).execute()</snippet></ROW><ROW><id>14200571</id><snippet>youtube</snippet></ROW><ROW><id>14200618</id><snippet>def someFunc():
    return "message"

class IOThread(QtCore.QThread):

    statusUpdate = QtCore.pyqtSignal(str)

    def __init__(self, func):
        QtCore.QThread.__init__(self)
        self.io_func = func

    def run(self):
        msg = self.io_func()
        self.statusUpdate.emit(msg)
</snippet></ROW><ROW><id>14200618</id><snippet>io_thread = IOThread(someFunc)
io_thread.statusUpdate.connect(self.status_label.setText)
</snippet></ROW><ROW><id>14200946</id><snippet>CloudContainer</snippet></ROW><ROW><id>14200946</id><snippet>class CloudContainers(object):
    def __init__(self, username, key, originContainerName, targetContainerName):
        self.username = username
        self.key = key     
        self.originContainerName = originContainerName
        self.targetContainerName = targetContainerName

    def cloudConnect(self):
        print "Creating connection"
        self.connection = cloudfiles.get_connection(self.username,self.key,servicenet=True)
        print "-- [DONE]"
        print "Accessing containers"
        self.originContainer = connection.create_container(self.originContainerName)
        self.targetContainer = connection.create_container(self.targetContainerName)
        print "-- [DONE]"
        return

    def uploadImg(self, new_name):
        new_obj = self.targetContainer.create_object(new_name)
        new_obj.content_type = 'image/jpeg'
        new_obj.load_from_filename("up/"+new_name)

    def getImg(name):
        obj = self.originContainer.get_object(name)
        obj.save_to_filename("down/"+name)
</snippet></ROW><ROW><id>14200946</id><snippet>getImg</snippet></ROW><ROW><id>14200946</id><snippet>uploadImg</snippet></ROW><ROW><id>14201027</id><snippet>QApplication::setStyle ( QStyle * style )</snippet></ROW><ROW><id>14201057</id><snippet>create</snippet></ROW><ROW><id>14201057</id><snippet>write</snippet></ROW><ROW><id>14201057</id><snippet>create</snippet></ROW><ROW><id>14201057</id><snippet>write</snippet></ROW><ROW><id>14201057</id><snippet>write</snippet></ROW><ROW><id>14201057</id><snippet>openerp-server</snippet></ROW><ROW><id>14201057</id><snippet>--log-level=debug_rpc_answer</snippet></ROW><ROW><id>14201394</id><snippet>Solver()</snippet></ROW><ROW><id>14201394</id><snippet>check()</snippet></ROW><ROW><id>14201394</id><snippet>nlsat</snippet></ROW><ROW><id>14201394</id><snippet>solver = Tactic('qfnra-nlsat').solver()
</snippet></ROW><ROW><id>14201394</id><snippet>push()</snippet></ROW><ROW><id>14201394</id><snippet>pop()</snippet></ROW><ROW><id>14201394</id><snippet>check()</snippet></ROW><ROW><id>14201394</id><snippet>nlsat</snippet></ROW><ROW><id>14201394</id><snippet>check()</snippet></ROW><ROW><id>14201534</id><snippet>huh</snippet></ROW><ROW><id>14201534</id><snippet>def confused(stuff):
    global huh
    print huh
    huh += 1
    return stuff
</snippet></ROW><ROW><id>14201534</id><snippet>global</snippet></ROW><ROW><id>14201534</id><snippet>huh</snippet></ROW><ROW><id>14201534</id><snippet>confused</snippet></ROW><ROW><id>14201534</id><snippet>global</snippet></ROW><ROW><id>14201534</id><snippet>list</snippet></ROW><ROW><id>14201534</id><snippet>__setitem__</snippet></ROW><ROW><id>14201534</id><snippet>append</snippet></ROW><ROW><id>14201534</id><snippet>dis</snippet></ROW><ROW><id>14201534</id><snippet>&gt;&gt;&gt; def confused(stuff):
...    print huh
... 

&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(confused)
  2           0 LOAD_GLOBAL              0 (huh)
              3 PRINT_ITEM          
              4 PRINT_NEWLINE       
              5 LOAD_CONST               0 (None)
              8 RETURN_VALUE

&gt;&gt;&gt; def confused2(stuff):
...    print huh
...    huh += 1
... 

&gt;&gt;&gt; dis.dis(confused2)
  2           0 LOAD_FAST                1 (huh)
              3 PRINT_ITEM          
              4 PRINT_NEWLINE       

  3           5 LOAD_FAST                1 (huh)
              8 LOAD_CONST               1 (1)
             11 INPLACE_ADD         
             12 STORE_FAST               1 (huh)
             15 LOAD_CONST               0 (None)
             18 RETURN_VALUE   
</snippet></ROW><ROW><id>14201534</id><snippet>confused2</snippet></ROW><ROW><id>14201534</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>14201534</id><snippet>huh</snippet></ROW><ROW><id>14201655</id><snippet>from StringIO import StringIO
import pandas as pd

df = pd.read_csv(StringIO('your_data'),
        delim_whitespace=True)

df.groupby('Ref').mean()

       X    Y
Ref          
11   2.5  8.5
12   6.0  5.0
13   8.5  2.5
</snippet></ROW><ROW><id>14201687</id><snippet>fName.endswith()</snippet></ROW><ROW><id>14201687</id><snippet>True</snippet></ROW><ROW><id>14201687</id><snippet>fName</snippet></ROW><ROW><id>14201687</id><snippet>audio = ('.mp3','.mov','.mpg','.mp4','.flv','.avi','.mpeg4','.mkv','.mpeg','.mpg2','.wav')
if fName.endswith(audio) and ' ' in fName:
    return fName.replace(' ', '_')
return fName
</snippet></ROW><ROW><id>14201687</id><snippet>os.path.splitext()</snippet></ROW><ROW><id>14201687</id><snippet>audio = set(('.mp3','.mov','.mpg','.mp4','.flv','.avi','.mpeg4','.mkv','.mpeg','.mpg2','.wav'))
if os.path.splitext(fName)[1] in audio and ' ' in fName:
    return fName.replace(' ', '_')
return fName
</snippet></ROW><ROW><id>14201860</id><snippet>REMOTE_USER</snippet></ROW><ROW><id>14201860</id><snippet>BasicAuthentication</snippet></ROW><ROW><id>14201860</id><snippet>class UserApiTest(WebTest):                                                     

    auth_password = base64.encodestring('admin:default').strip()               
    extra_environ = {                                                           
        'AUTH_TYPE': 'Basic',                                                   
        'HTTP_AUTHORIZATION': 'Basic {}'.format(auth_password),                 
        'REMOTE_USER': 'admin'}                                                

    def setUp(self):                                                            
        AdminFactory()                                                          

    def test_accessing_user_list_shows_one_user(self):                          
        user_list = self.app.get('/quickstart/users/')                          
        assert_that(user_list.json, has_entry('count', 1))                      

    def test_posting_new_user_returns_url_for_user_detail(self):                
        post_data = {'username': 'john', 'email': 'john.doe@example.com'}     
        user_create = self.app.post('/quickstart/users/', post_data)            
        url = 'http://localhost:80/quickstart/users/2/'                         
        assert_that(user_create.json, has_entry('url', url))
</snippet></ROW><ROW><id>14201860</id><snippet>is_staff</snippet></ROW><ROW><id>14202243</id><snippet>urllib.urlretrieve</snippet></ROW><ROW><id>14202243</id><snippet>re</snippet></ROW><ROW><id>14202243</id><snippet>#!/usr/bin/python

"""
This script would scrape and download files using the anchor links.
"""


#Imports

import os, re, sys
import urllib, urllib2

#Config
base_url = "http://www.google.com/"
destination_directory = "downloads"


def _usage():
    """
    This method simply prints out the Usage information.
    """

    print "USAGE: %s &lt;url&gt;" %sys.argv[0]


def _create_url_list(url):
    """
    This method would create a list of downloads, using the anchor links
    found on the URL passed.
    """

    raw_data = urllib2.urlopen(url).read()
    raw_list = re.findall('&lt;a style="display:inline; position:relative;" href="(.+?)"', raw_data)
    url_list = [base_url + x for x in raw_list]
    return url_list


def _get_file_name(url):
    """
    This method will return the filename extracted from a passed URL
    """

    parts = url.split('/')
    return parts[len(parts) - 1]


def _download_file(url, filename):
    """
    Given a URL and a filename, this method will save a file locally to the»
    destination_directory path.
    """
    if not os.path.exists(destination_directory):
        print 'Directory [%s] does not exist, Creating directory...' % destination_directory
        os.makedirs(destination_directory)
    try:
        urllib.urlretrieve(url, os.path.join(destination_directory, filename))
        print 'Downloading File [%s]' % (filename)
    except:
        print 'Error Downloading File [%s]' % (filename)


def _download_all(main_url):
    """
    Given a URL list, this method will download each file in the destination
    directory.
    """

    url_list = _create_url_list(main_url)
    for url in url_list:
        _download_file(url, _get_file_name(url))


def main(argv):
    """
    This is the script's launcher method.
    """

    if len(argv) != 1:
        _usage()
        sys.exit(1)
    _download_all(sys.argv[1])
    print 'Finished Downloading.'


if __name__ == '__main__':
    main(sys.argv[1:])
</snippet></ROW><ROW><id>14202243</id><snippet>base_url</snippet></ROW><ROW><id>14202243</id><snippet>destination_directory</snippet></ROW><ROW><id>14202243</id><snippet>download.py</snippet></ROW><ROW><id>14202243</id><snippet>python download.py http://www.example.com/?page=1
</snippet></ROW><ROW><id>14202258</id><snippet>(//a[@style = 'color:green;'])[1]/@href
</snippet></ROW><ROW><id>14202453</id><snippet>Pool</snippet></ROW><ROW><id>14202453</id><snippet>def process_reference_object(index):
      ref_feature = ref_layer.GetFeature(index)
      # all your code goes here
      return (" ".join(["%s" %i for i in [FID, ref_Area,seg_Area_average,intersect_Area_average]])+ "\n")
</snippet></ROW><ROW><id>14202453</id><snippet>ref_layer</snippet></ROW><ROW><id>14202453</id><snippet>ref_geometry</snippet></ROW><ROW><id>14202453</id><snippet>process_reference_object</snippet></ROW><ROW><id>14202453</id><snippet>Pool.imap_unordered</snippet></ROW><ROW><id>14202453</id><snippet>from multiprocessing import Pool
p = Pool()  # run multiple processes
for l in p.imap_unordered(process_reference_object, range(ref_layer.GetFeatureCount())):
    file_out.write(l)
</snippet></ROW><ROW><id>14202499</id><snippet>f = open('data.txt', 'rb')
</snippet></ROW><ROW><id>14202499</id><snippet>'b'</snippet></ROW><ROW><id>14202499</id><snippet>'b'</snippet></ROW><ROW><id>14202499</id><snippet>f1 = open('data.txt', 'rb')
</snippet></ROW><ROW><id>14202499</id><snippet>bytes</snippet></ROW><ROW><id>14202499</id><snippet>str</snippet></ROW><ROW><id>14202499</id><snippet>decode</snippet></ROW><ROW><id>14202499</id><snippet>str</snippet></ROW><ROW><id>14202499</id><snippet>str</snippet></ROW><ROW><id>14202499</id><snippet>f2 = open('data.txt', 'r', newline='')
</snippet></ROW><ROW><id>14202499</id><snippet>str</snippet></ROW><ROW><id>14202499</id><snippet>readline</snippet></ROW><ROW><id>14202499</id><snippet>'\r\n'</snippet></ROW><ROW><id>14202499</id><snippet>f3 = open('data.txt', 'rb', encoding=locale.getpreferredencoding(False))
</snippet></ROW><ROW><id>14202499</id><snippet>str</snippet></ROW><ROW><id>14202499</id><snippet>f3</snippet></ROW><ROW><id>14202499</id><snippet>locale.getpreferredencoding(False)</snippet></ROW><ROW><id>14202499</id><snippet>bytes</snippet></ROW><ROW><id>14202499</id><snippet>str</snippet></ROW><ROW><id>14202499</id><snippet>ValueError: binary mode doesn't take an encoding argument</snippet></ROW><ROW><id>14202499</id><snippet>bytes</snippet></ROW><ROW><id>14202499</id><snippet>f</snippet></ROW><ROW><id>14202499</id><snippet>are the same. But if you want to deal in</snippet></ROW><ROW><id>14202499</id><snippet>, as appropriate for each version, the simplest answer is to write different code for each, probably</snippet></ROW><ROW><id>14202499</id><snippet>and</snippet></ROW><ROW><id>14202499</id><snippet>if sys.version_info &gt;= (3, 0):
    def crlf_open(path, mode):
        return open(path, mode, newline='')
else:
    def crlf_open(path, mode):
        return open(path, mode+'b')
</snippet></ROW><ROW><id>14202499</id><snippet>locale.getpreferredencoding(False)</snippet></ROW><ROW><id>14202499</id><snippet>'US-ASCII'</snippet></ROW><ROW><id>14202499</id><snippet>locale.getpreferredencoding(True)</snippet></ROW><ROW><id>14202499</id><snippet>'r'</snippet></ROW><ROW><id>14202499</id><snippet>'r'</snippet></ROW><ROW><id>14202499</id><snippet>'rb'</snippet></ROW><ROW><id>14202852</id><snippet>struct ip_mreq</snippet></ROW><ROW><id>14202852</id><snippet>INADDR_ANY</snippet></ROW><ROW><id>14202852</id><snippet>netstat -ng</snippet></ROW><ROW><id>14202852</id><snippet>if_nameindex(3)</snippet></ROW><ROW><id>14202852</id><snippet>bind(2)</snippet></ROW><ROW><id>14202852</id><snippet>setsockopt(2)</snippet></ROW><ROW><id>14202852</id><snippet>select</snippet></ROW><ROW><id>14203169</id><snippet>__file__</snippet></ROW><ROW><id>14203169</id><snippet>module_dir = os.path.dirname(__file__)
CFG = SafeConfigParser()
cfg_full_path = os.path.join(module_dir, ARGS['--cfg'])
if not CFG.read(cfg_full_path): 
    ...
</snippet></ROW><ROW><id>14203237</id><snippet>x = brower.select_element_by_xpath('//option[contains(text(), "CO"]')
x.text (print the div text) 
x.click() clicks the div
</snippet></ROW><ROW><id>14203237</id><snippet>brower.select_element_by_xpath('//option[contains(text(), "CO"]').click()
</snippet></ROW><ROW><id>14203237</id><snippet>for i in browers.select_elements_by_xpath('//select[@name="selectionField"]//option'):
    print i.text
</snippet></ROW><ROW><id>14203259</id><snippet>def simple_app(environ, start_response):
    # environ is a dict, start_response is a callable.
    # This function should call start_response, then return an iterable of strings
    # that make up the body of the response.
</snippet></ROW><ROW><id>14203750</id><snippet> *ActivePython is fully binary compatible with python.org Python builds to ensure that 3rd-party binary extensions just work*
</snippet></ROW><ROW><id>14203884</id><snippet>xgettext</snippet></ROW><ROW><id>14203884</id><snippet>_(varaible)</snippet></ROW><ROW><id>14203884</id><snippet>_("literal string that xgettext understands")</snippet></ROW><ROW><id>14203884</id><snippet>xgettext</snippet></ROW><ROW><id>14203884</id><snippet>print _("the value of the thing you want to translate")</snippet></ROW><ROW><id>14203884</id><snippet>xgettext</snippet></ROW><ROW><id>14203884</id><snippet>import csv
import gettext

t = gettext.translation('api_trans', '/path/to/locale/', fallback=True)
_ = t.ugettext

string_list = []
with open('/path/to/csv/file') as csvfile:
  with open('/path/to/some/other/file', 'w') as out:
    reader = csv.reader(csvfile, delimiter=',', quotechar='"')
    for row in reader:
      if row:
          if row[0] != '':
              out.write("print _(%s)\n" % (repr(row[0],))
</snippet></ROW><ROW><id>14203884</id><snippet>xgettext -d api_trans -o api_trans.pot /path/to/that/file</snippet></ROW><ROW><id>14203884</id><snippet>def extract_csv(fileobj, keywords, comment_tags, options):
    """Extract messages from XXX files.
    :param fileobj: the file-like object the messages should be extracted
                    from
    :param keywords: a list of keywords (i.e. function names) that should
                     be recognized as translation functions
    :param comment_tags: a list of translator tags to search for and
                         include in the results
    :param options: a dictionary of additional options (optional)
    :return: an iterator over ``(lineno, funcname, message, comments)``
             tuples
    :rtype: ``iterator``
    """
    import csv

    reader = csv.reader(fileobj, delimiter=',', quotechar='"')
    for row in reader:
        if row and row[0] != '':
            yield (lineno, ',', row[0], 'No comment')
</snippet></ROW><ROW><id>14203884</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14203884</id><snippet># Some custom extraction method
[extractors]
csv = mypackage.module:extract_csv
[csv: **.ctm]
some_option = foo
</snippet></ROW><ROW><id>14203958</id><snippet>re.match</snippet></ROW><ROW><id>14203958</id><snippet>re.search</snippet></ROW><ROW><id>14203958</id><snippet>re.findall</snippet></ROW><ROW><id>14203958</id><snippet>None</snippet></ROW><ROW><id>14203958</id><snippet>tests = [
    re.compile(r'...'),
    re.compile(r'...'),
    re.compile(r'...'),
    re.compile(r'...')
]

for test in tests:
    matches = test.findall(your_string):

    if matches:
        print test, 'works'
</snippet></ROW><ROW><id>14204484</id><snippet>print</snippet></ROW><ROW><id>14204484</id><snippet>from __future__ import print_function

p = print         # now you can store the function reference to a variable
p('I am a function now!')

&gt;&gt;&gt; I am a function now!

def get_print():
    return print   # or return it :)

get_print()

&gt;&gt;&gt; &lt;function print&gt;
</snippet></ROW><ROW><id>14204581</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>14204581</id><snippet>dict</snippet></ROW><ROW><id>14204581</id><snippet>list</snippet></ROW><ROW><id>14204581</id><snippet>dict</snippet></ROW><ROW><id>14204581</id><snippet>list</snippet></ROW><ROW><id>14204581</id><snippet>list</snippet></ROW><ROW><id>14204581</id><snippet>string</snippet></ROW><ROW><id>14204581</id><snippet>list</snippet></ROW><ROW><id>14204581</id><snippet>M</snippet></ROW><ROW><id>14204581</id><snippet>deepcopy</snippet></ROW><ROW><id>14204708</id><snippet>The following types can be pickled:


None, True, and False
integers, long integers, floating point numbers, complex numbers
normal and Unicode strings
tuples, lists, sets, and dictionaries containing only picklable objects
functions defined at the top level of a module
built-in functions defined at the top level of a module
classes that are defined at the top level of a module
instances of such classes whose __dict__ or the result of calling __getstate__() is 
picklable (see section The pickle protocol for details).
</snippet></ROW><ROW><id>14204859</id><snippet>X.T.dot(L)</snippet></ROW><ROW><id>14204859</id><snippet>&gt;&gt;&gt; X.T.dot(L).shape
(50, 100)
&gt;&gt;&gt; X.T.dot(L)[0,0]
&lt;100x100 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
    with 100 stored elements in Compressed Sparse Column format&gt;
</snippet></ROW><ROW><id>14204859</id><snippet>X</snippet></ROW><ROW><id>14204859</id><snippet>dot</snippet></ROW><ROW><id>14204859</id><snippet>todense</snippet></ROW><ROW><id>14204859</id><snippet>toarray</snippet></ROW><ROW><id>14204859</id><snippet>matrix</snippet></ROW><ROW><id>14204859</id><snippet>array</snippet></ROW><ROW><id>14204859</id><snippet>&gt;&gt;&gt; X.T.dot(L.todense()).dot(X)
matrix([[  81.85399873,    3.75640482,    1.62443625, ...,    6.47522251,
            3.42719396,    2.78630873],
        [   3.75640482,  109.45428475,   -2.62737229, ...,   -0.31310651,
            2.87871548,    8.27537382],
        [   1.62443625,   -2.62737229,  101.58919604, ...,    3.95235372,
            1.080478  ,   -0.16478654],
        ..., 
        [   6.47522251,   -0.31310651,    3.95235372, ...,   95.72988689,
          -18.99209596,   17.31774553],
        [   3.42719396,    2.87871548,    1.080478  , ...,  -18.99209596,
          108.90045569,  -16.20312682],
        [   2.78630873,    8.27537382,   -0.16478654, ...,   17.31774553,
          -16.20312682,  105.37102461]])
</snippet></ROW><ROW><id>14204859</id><snippet>dot</snippet></ROW><ROW><id>14204859</id><snippet>&gt;&gt;&gt; X.T.dot(L.dot(X))
array([[  81.85399873,    3.75640482,    1.62443625, ...,    6.47522251,
           3.42719396,    2.78630873],
       [   3.75640482,  109.45428475,   -2.62737229, ...,   -0.31310651,
           2.87871548,    8.27537382],
       [   1.62443625,   -2.62737229,  101.58919604, ...,    3.95235372,
           1.080478  ,   -0.16478654],
       ..., 
       [   6.47522251,   -0.31310651,    3.95235372, ...,   95.72988689,
         -18.99209596,   17.31774553],
       [   3.42719396,    2.87871548,    1.080478  , ...,  -18.99209596,
         108.90045569,  -16.20312682],
       [   2.78630873,    8.27537382,   -0.16478654, ...,   17.31774553,
         -16.20312682,  105.37102461]])
</snippet></ROW><ROW><id>14205319</id><snippet>data</snippet></ROW><ROW><id>14205319</id><snippet>encrypt()</snippet></ROW><ROW><id>14205319</id><snippet>AES.MODE_CBC</snippet></ROW><ROW><id>14205319</id><snippet>AES.MODE_CFB</snippet></ROW><ROW><id>14205319</id><snippet>segment_size</snippet></ROW><ROW><id>14205319</id><snippet>X</snippet></ROW><ROW><id>14205319</id><snippet>length = 16 - (len(data) % 16)
data += bytes([length])*length
</snippet></ROW><ROW><id>14205319</id><snippet>length = 16 - (len(data) % 16)
data += chr(length)*length
</snippet></ROW><ROW><id>14205319</id><snippet>data = data[:-data[-1]]
</snippet></ROW><ROW><id>14205494</id><snippet>#!/usr/bin/env python2                                                       

import curses                                                                
from curses import panel                                                     

class Menu(object):                                                          

    def __init__(self, items, stdscreen):                                    
        self.window = stdscreen.subwin(0,0)                                  
        self.window.keypad(1)                                                
        self.panel = panel.new_panel(self.window)                            
        self.panel.hide()                                                    
        panel.update_panels()                                                

        self.position = 0                                                    
        self.items = items                                                   
        self.items.append(('exit','exit'))                                   

    def navigate(self, n):                                                   
        self.position += n                                                   
        if self.position &lt; 0:                                                
            self.position = 0                                                
        elif self.position &gt;= len(self.items):                               
            self.position = len(self.items)-1                                

    def display(self):                                                       
        self.panel.top()                                                     
        self.panel.show()                                                    
        self.window.clear()                                                  

        while True:                                                          
            self.window.refresh()                                            
            curses.doupdate()                                                
            for index, item in enumerate(self.items):                        
                if index == self.position:                                   
                    mode = curses.A_REVERSE                                  
                else:                                                        
                    mode = curses.A_NORMAL                                   

                msg = '%d. %s' % (index, item[0])                            
                self.window.addstr(1+index, 1, msg, mode)                    

            key = self.window.getch()                                        

            if key in [curses.KEY_ENTER, ord('\n')]:                         
                if self.position == len(self.items)-1:                       
                    break                                                    
                else:                                                        
                    self.items[self.position][1]()                           

            elif key == curses.KEY_UP:                                       
                self.navigate(-1)                                            

            elif key == curses.KEY_DOWN:                                     
                self.navigate(1)                                             

        self.window.clear()                                                  
        self.panel.hide()                                                    
        panel.update_panels()                                                
        curses.doupdate()

class MyApp(object):                                                         

    def __init__(self, stdscreen):                                           
        self.screen = stdscreen                                              
        curses.curs_set(0)                                                   

        submenu_items = [                                                    
                ('beep', curses.beep),                                       
                ('flash', curses.flash)                                      
                ]                                                            
        submenu = Menu(submenu_items, self.screen)                           

        main_menu_items = [                                                  
                ('beep', curses.beep),                                       
                ('flash', curses.flash),                                     
                ('submenu', submenu.display)                                 
                ]                                                            
        main_menu = Menu(main_menu_items, self.screen)                       
        main_menu.display()                                                  

if __name__ == '__main__':                                                       
    curses.wrapper(MyApp)   
</snippet></ROW><ROW><id>14205689</id><snippet>IP_HDRINCL</snippet></ROW><ROW><id>14205689</id><snippet>recvfrom</snippet></ROW><ROW><id>14205689</id><snippet>SOCK_RAW</snippet></ROW><ROW><id>14205689</id><snippet>SOCK_DGRAM</snippet></ROW><ROW><id>14205689</id><snippet>IPPROTO_UDP</snippet></ROW><ROW><id>14205689</id><snippet>SOCK_RAW</snippet></ROW><ROW><id>14205689</id><snippet>bind</snippet></ROW><ROW><id>14205689</id><snippet>''</snippet></ROW><ROW><id>14205689</id><snippet>INADDR_ANY</snippet></ROW><ROW><id>14205689</id><snippet>'0.0.0.0'</snippet></ROW><ROW><id>14205689</id><snippet>pcap</snippet></ROW><ROW><id>14205689</id><snippet>struct</snippet></ROW><ROW><id>14205689</id><snippet>pcap_hdr = struct.pack('=IHHiIII',
                       0xa1b2c3d4, # magic number
                       2, 4,       # pcap 2.4 format
                       0,          # UTC timezone for timestamps
                       0,          # "in practice, all tools set it to 0"
                       65535,      # max packet length
                       228)        # LINKTYPE_IPV4, or maybe you want LINKTYPE_RAW
pcapfile.write(pcap_hdr)
</snippet></ROW><ROW><id>14205689</id><snippet>scapy</snippet></ROW><ROW><id>14205689</id><snippet>python-libpcap</snippet></ROW><ROW><id>14205689</id><snippet>libpcap</snippet></ROW><ROW><id>14205689</id><snippet>WinPcap</snippet></ROW><ROW><id>14205797</id><snippet>encloses_point</snippet></ROW><ROW><id>14206036</id><snippet>feedparser</snippet></ROW><ROW><id>14206036</id><snippet>mechanize</snippet></ROW><ROW><id>14206036</id><snippet>urllib2</snippet></ROW><ROW><id>14206036</id><snippet>httplib</snippet></ROW><ROW><id>14206036</id><snippet>urllib2</snippet></ROW><ROW><id>14206036</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; url = 'http://hattiesburg.legistar.com/Feed.ashx?M=Calendar&amp;ID=543375&amp;GUID=83d4a09c-6b40-4300-a04b-f88884048d49&amp;Mode=2013&amp;Title=City+of+Hattiesburg%2c+MS+-+Calendar+(2013)'
&gt;&gt;&gt; f = urllib2.urlopen(url)
&gt;&gt;&gt; f.headers.headers
['Cache-Control: private\r\n',
 'Content-Type: text/xml; charset=utf-8\r\n',
 'Server: Microsoft-IIS/7.5\r\n',
 'X-AspNet-Version: 4.0.30319\r\n',
 'X-Powered-By: ASP.NET\r\n',
 'Date: Mon, 07 Jan 2013 23:21:51 GMT\r\n',
 'Via: 1.1 BC1-ACLD\r\n',
 'Transfer-Encoding: chunked\r\n',
 'Connection: close\r\n']
&gt;&gt;&gt; f.read()
&lt; Full traceback cut &gt;
IncompleteRead: IncompleteRead(1854 bytes read)
</snippet></ROW><ROW><id>14206036</id><snippet>&gt;&gt;&gt; f = urllib2.urlopen(url)
&gt;&gt;&gt; f.read(1854)
'\xef\xbb\xbf&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"&gt;...snip...&lt;/rss&gt;'
</snippet></ROW><ROW><id>14206036</id><snippet>&gt;&gt;&gt; try:
...     contents = f.read()
... except httplib.IncompleteRead as e:
...     contents = e.partial
...
&gt;&gt;&gt; print contents
'\xef\xbb\xbf&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"&gt;...snip...&lt;/rss&gt;'
</snippet></ROW><ROW><id>14206036</id><snippet>httplib.HTTPResponse.read()</snippet></ROW><ROW><id>14206036</id><snippet>try..except</snippet></ROW><ROW><id>14206036</id><snippet>feedparser</snippet></ROW><ROW><id>14206036</id><snippet>&gt;&gt;&gt; import feedparser
&gt;&gt;&gt; url = 'http://hattiesburg.legistar.com/Feed.ashx?M=Calendar&amp;ID=543375&amp;GUID=83d4a09c-6b40-4300-a04b-f88884048d49&amp;Mode=2013&amp;Title=City+of+Hattiesburg%2c+MS+-+Calendar+(2013)'
&gt;&gt;&gt; feedparser.parse(url)
{'bozo': 0,
 'encoding': 'utf-8',
 'entries': ...
 'status': 200,
 'version': 'rss20'}
</snippet></ROW><ROW><id>14206036</id><snippet>httplib</snippet></ROW><ROW><id>14206070</id><snippet>class ASDF(ASDF1, ASDF2, ASDF3):
    def __init__(self):
        ASDF2.__init__(self)
</snippet></ROW><ROW><id>14206115</id><snippet>PyRun_SimpleFileExFlags</snippet></ROW><ROW><id>14206115</id><snippet>foo</snippet></ROW><ROW><id>14206115</id><snippet>foo.py</snippet></ROW><ROW><id>14206115</id><snippet>foo.pyc</snippet></ROW><ROW><id>14206115</id><snippet>PyImport_GetMagicNumber()</snippet></ROW><ROW><id>14206115</id><snippet>marshal.loads</snippet></ROW><ROW><id>14206115</id><snippet>PyMarshal_ReadObjectFromString</snippet></ROW><ROW><id>14206115</id><snippet>&gt;&gt;&gt; with open('foo.pyc', 'rb') as f:
...     data = f.read()
&gt;&gt;&gt; code = marshal.loads(data[8:])
&gt;&gt;&gt; code
&lt;code object &lt;module&gt; at 0x110118730, file "foo.py", line 1&gt;
</snippet></ROW><ROW><id>14206175</id><snippet>_</snippet></ROW><ROW><id>14206312</id><snippet>finished</snippet></ROW><ROW><id>14206312</id><snippet>urlRequest</snippet></ROW><ROW><id>14206312</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sip
sip.setapi('QString', 2)
sip.setapi('QVariant', 2)

from PyQt4 import QtCore, QtGui, QtWebKit, QtNetwork

urlTranslate = "http://translate.google.com/translate?hl=en&amp;sl=auto&amp;tl=en&amp;u=http://arabic-media.com/arabicnews.htm"
urlRequest   = "http://www.google.com/cse/intl/ar/images/google_custom_search_watermark.gif"

class myWindow(QtWebKit.QWebView):
    def __init__(self, parent=None):
        super(myWindow, self).__init__(parent)

        self.page().mainFrame().setScrollBarPolicy(QtCore.Qt.Horizontal, QtCore.Qt.ScrollBarAlwaysOff)
        self.page().mainFrame().setScrollBarPolicy(QtCore.Qt.Vertical, QtCore.Qt.ScrollBarAlwaysOff)

        self.page().networkAccessManager().finished.connect(self.on_networkAccessManager_loadFinished)

        self.load(QtCore.QUrl(urlTranslate))

    @QtCore.pyqtSlot(QtNetwork.QNetworkReply)
    def on_networkAccessManager_loadFinished(self, reply):
        if urlRequest in reply.url().toString():
            self.takeScreenshot()

    def takeScreenshot(self):
        fileName = self.title() + ".png"

        self.page().setViewportSize(QtCore.QSize(1000, 2000))

        image   = QtGui.QImage(self.page().viewportSize(), QtGui.QImage.Format_ARGB32)
        painter = QtGui.QPainter(image)

        self.page().mainFrame().render(painter)
        painter.end()

        if not image.isNull():
            image.save(fileName)
            print "Succesfully saved '{0}'".format(fileName)

        else:
            print "Failed to save '{0}'".format(fileName)

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('myWindow')

    main = myWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14206327</id><snippet>plt.plot(a)</snippet></ROW><ROW><id>14206327</id><snippet>plt.plot(np.arange(len(a)),a)</snippet></ROW><ROW><id>14206327</id><snippet>fill_between</snippet></ROW><ROW><id>14206327</id><snippet>where = np.zeros(len(a),dtype=bool)
where[3:21] = True
plt.fill_between(np.arange(len(a)),a,where=where)
</snippet></ROW><ROW><id>14206327</id><snippet>a=[]
for element in i["counts"]:
    a.append(element["total"])
</snippet></ROW><ROW><id>14206327</id><snippet>a = [element['total'] for element in i['counts']]
</snippet></ROW><ROW><id>14206594</id><snippet>import pickle

lst = [[ {'d3': 936.0, 'd2': 1041.0, 'd4': 495.0} ]]

print 'pickle_string = """'+ pickle.dumps(lst) +'"""'
</snippet></ROW><ROW><id>14206594</id><snippet>pickle_string = """(lp0
(lp1
(dp2
S'd4'
p3
F495.0
sS'd2'
p4
F1041.0
sS'd3'
p5
F936.0
saa."""
</snippet></ROW><ROW><id>14206594</id><snippet>lst = pickle.loads(pickle_string)
</snippet></ROW><ROW><id>14206630</id><snippet>intersection</snippet></ROW><ROW><id>14206630</id><snippet>loc3 = set(loc1).intersection(loc2)
</snippet></ROW><ROW><id>14206630</id><snippet>set</snippet></ROW><ROW><id>14206630</id><snippet>loc2</snippet></ROW><ROW><id>14206630</id><snippet>sloc2 = set(loc2)
loc3 = [ item for item in loc1 if item in sloc2 ]  #still O(m)
</snippet></ROW><ROW><id>14206630</id><snippet>set</snippet></ROW><ROW><id>14206818</id><snippet>shell-quote</snippet></ROW><ROW><id>14206818</id><snippet>nshell</snippet></ROW><ROW><id>14206818</id><snippet>shlex</snippet></ROW><ROW><id>14206818</id><snippet>shlex.split</snippet></ROW><ROW><id>14206818</id><snippet>npm</snippet></ROW><ROW><id>14207197</id><snippet>mmain.cpp:133: error: no matching function for call to ‘__shedskin__::list&lt;__shedskin__::list&lt;int&gt;*&gt;::append(__shedskin__::list&lt;double&gt;*)’
</snippet></ROW><ROW><id>14207197</id><snippet>shedskin</snippet></ROW><ROW><id>14207197</id><snippet>list</snippet></ROW><ROW><id>14207197</id><snippet>list</snippet></ROW><ROW><id>14207197</id><snippet>int</snippet></ROW><ROW><id>14207197</id><snippet>list</snippet></ROW><ROW><id>14207197</id><snippet>float</snippet></ROW><ROW><id>14207197</id><snippet>a = [[1], [2]]
b = 1.0
a.append([b])
</snippet></ROW><ROW><id>14207197</id><snippet>list_comp_3</snippet></ROW><ROW><id>14207197</id><snippet>list_comp_3</snippet></ROW><ROW><id>14207197</id><snippet>a = [1, 2, 3.0]
b = [[i] for i in a]
</snippet></ROW><ROW><id>14207197</id><snippet>a</snippet></ROW><ROW><id>14207197</id><snippet>b</snippet></ROW><ROW><id>14207516</id><snippet>body</snippet></ROW><ROW><id>14207516</id><snippet>JsonModel</snippet></ROW><ROW><id>14207516</id><snippet>serialize</snippet></ROW><ROW><id>14207516</id><snippet>dumps</snippet></ROW><ROW><id>14207516</id><snippet>class JsonModel(BaseModel):
  ...
  def serialize(self, body_value):
    if (isinstance(body_value, dict) and 'data' not in body_value and
        self._data_wrapper):
      body_value = {'data': body_value}
    return simplejson.dumps(body_value)
</snippet></ROW><ROW><id>14207516</id><snippet>&gt;&gt;&gt; json.dumps({'a': 'b'})
'{"a": "b"}'
&gt;&gt;&gt; json.dumps('{"a": "b"}')
'"{\\"a\\": \\"b\\"}"'
</snippet></ROW><ROW><id>14207516</id><snippet>'"{\\"snippet\\":{\\"title\\":\\"2013newTest\\"}}"'
</snippet></ROW><ROW><id>14207524</id><snippet>A</snippet></ROW><ROW><id>14207524</id><snippet>B</snippet></ROW><ROW><id>14207524</id><snippet>B</snippet></ROW><ROW><id>14207524</id><snippet>A</snippet></ROW><ROW><id>14207524</id><snippet>sys.modules</snippet></ROW><ROW><id>14207524</id><snippet>sys.modules</snippet></ROW><ROW><id>14207524</id><snippet>if __name__ == '__main__':
</snippet></ROW><ROW><id>14207524</id><snippet>__main__</snippet></ROW><ROW><id>14207524</id><snippet>A</snippet></ROW><ROW><id>14207524</id><snippet>A</snippet></ROW><ROW><id>14207524</id><snippet>__main__</snippet></ROW><ROW><id>14207524</id><snippet>main</snippet></ROW><ROW><id>14207524</id><snippet>sys.modules</snippet></ROW><ROW><id>14207524</id><snippet>sys.modules['A'] = sys.modules[__name__]
</snippet></ROW><ROW><id>14207664</id><snippet>Object</snippet></ROW><ROW><id>14207664</id><snippet>MyClass</snippet></ROW><ROW><id>14207664</id><snippet>Object</snippet></ROW><ROW><id>14207664</id><snippet>object</snippet></ROW><ROW><id>14207869</id><snippet>import os
os._exit(0)
</snippet></ROW><ROW><id>14208026</id><snippet>matching = [system for system in systems if 'foo' in system.mgmt_classes]
</snippet></ROW><ROW><id>14208026</id><snippet>if</snippet></ROW><ROW><id>14208026</id><snippet>'foo'</snippet></ROW><ROW><id>14208026</id><snippet>mgmt_classes</snippet></ROW><ROW><id>14208026</id><snippet>matching = [system for system in systems if any(re.search('foo', i) for i in system.mgmt_classes)]
</snippet></ROW><ROW><id>14208233</id><snippet>&gt;&gt;&gt; timeit("all(b.read(20) for x in xrange(0, 20000000,20)  ) ", "b=open('data.dat')", number=1)
0.2856929302215576
&gt;&gt;&gt; c = open("data.dat").read()
&gt;&gt;&gt; len(c)
380000172
</snippet></ROW><ROW><id>14208261</id><snippet>stdout</snippet></ROW><ROW><id>14208261</id><snippet>print</snippet></ROW><ROW><id>14208261</id><snippet>import sys
with open('a.txt', 'r') as f1:
    for line in f1:
        sys.stdout.write(line)
</snippet></ROW><ROW><id>14208261</id><snippet>stdout</snippet></ROW><ROW><id>14208261</id><snippet>import sys, errno
try:
    with open('a.txt', 'r') as f1:
        for line in f1:
            sys.stdout.write(line)
except IOError as e:
    if e.errno == errno.EPIPE:
        # Handle error
</snippet></ROW><ROW><id>14208261</id><snippet>othercommand</snippet></ROW><ROW><id>14208276</id><snippet>SORT_ORDER = {"DINT": 0, "INT": 1, "BOOL": 2}

mylist.sort(key=lambda val: SORT_ORDER[val[1]])
</snippet></ROW><ROW><id>14208348</id><snippet>p</snippet></ROW><ROW><id>14208348</id><snippet>In [1]: from bs4 import BeautifulSoup

In [2]: html = """\
   ...: &lt;p&gt;aaa&lt;/p&gt;bbb
   ...: &lt;p&gt;ccc&lt;/p&gt;ddd"""

In [3]: soup = BeautifulSoup(html)

In [4]: [p.next_sibling for p in soup.findAll('p')]
Out[4]: [u'bbb\n', u'ddd']
</snippet></ROW><ROW><id>14208348</id><snippet>In [5]: [p.next_sibling.strip() for p in soup.findAll('p')]
Out[5]: [u'bbb', u'ddd']
</snippet></ROW><ROW><id>14208608</id><snippet>&gt;&gt;&gt; from pympler.asizeof import asizeof
&gt;&gt;&gt; obj = [1, 2, (3, 4), 'text']
&gt;&gt;&gt; asizeof(obj)
176
</snippet></ROW><ROW><id>14208608</id><snippet>asizeof</snippet></ROW><ROW><id>14208643</id><snippet>hello()</snippet></ROW><ROW><id>14208643</id><snippet>None</snippet></ROW><ROW><id>14208643</id><snippet>return</snippet></ROW><ROW><id>14208643</id><snippet>&gt;&gt;&gt; result = hello('test')
Hello 'test' 

&gt;&gt;&gt; print result
None
</snippet></ROW><ROW><id>14208643</id><snippet>hello()</snippet></ROW><ROW><id>14208643</id><snippet>def hello(name):
    return "Hello %r \n" % name

king = hello
print "%r, King of Geeks" % king("Arthur")
</snippet></ROW><ROW><id>14208643</id><snippet>%</snippet></ROW><ROW><id>14208643</id><snippet>print "{}, King of Geeks".format(king("Arthur"))
</snippet></ROW><ROW><id>14208948</id><snippet>try</snippet></ROW><ROW><id>14208948</id><snippet>except</snippet></ROW><ROW><id>14208948</id><snippet>for j, i in enumerate(alist[:-1]):
   iplus1 = i + alist[j + 1]
</snippet></ROW><ROW><id>14208948</id><snippet>from itertools import islice

for j, i in enumerate(islice(alist, -1)):
    iplus1 = i + alist[j + 1]
</snippet></ROW><ROW><id>14208948</id><snippet>itertools.iziplongest</snippet></ROW><ROW><id>14208948</id><snippet>for i, x in itertools.izip_longest(alist, alist[1:], fillvalue=None):
    iplus1 = i + x if x is not None else ""
</snippet></ROW><ROW><id>14208948</id><snippet>i</snippet></ROW><ROW><id>14208948</id><snippet>for i, j in enumerate(…)</snippet></ROW><ROW><id>14209084</id><snippet>key</snippet></ROW><ROW><id>14209084</id><snippet>import operator

max([a, b, c, d], key=operator.itemgetter(1))
</snippet></ROW><ROW><id>14209084</id><snippet>max()</snippet></ROW><ROW><id>14209084</id><snippet>'a'</snippet></ROW><ROW><id>14209084</id><snippet>'A'</snippet></ROW><ROW><id>14209084</id><snippet>ord('a')</snippet></ROW><ROW><id>14209084</id><snippet>ord('A')</snippet></ROW><ROW><id>14209084</id><snippet>(241,"foobar")</snippet></ROW><ROW><id>14209084</id><snippet>'f'</snippet></ROW><ROW><id>14209084</id><snippet>'b'</snippet></ROW><ROW><id>14209084</id><snippet>'foobar'</snippet></ROW><ROW><id>14209084</id><snippet>'foo'</snippet></ROW><ROW><id>14209084</id><snippet>'b'</snippet></ROW><ROW><id>14209084</id><snippet>''</snippet></ROW><ROW><id>14209084</id><snippet>b</snippet></ROW><ROW><id>14209084</id><snippet>foo</snippet></ROW><ROW><id>14209316</id><snippet>from pdfminer.pdfparser import PDFParser, PDFDocument    

fp = open('diveintopython.pdf', 'rb')
parser = PDFParser(fp)
doc = PDFDocument()
parser.set_document(doc)
doc.set_parser(parser)
doc.initialize()

print doc.info  # The "Info" metadata
</snippet></ROW><ROW><id>14209316</id><snippet>&gt;&gt;&gt; [{'CreationDate': 'D:20040520151901-0500',
  'Creator': 'DocBook XSL Stylesheets V1.52.2',
  'Keywords': 'Python, Dive Into Python, tutorial, object-oriented, programming, documentation, book, free',
  'Producer': 'htmldoc 1.8.23 Copyright 1997-2002 Easy Software Products, All Rights Reserved.',
  'Title': 'Dive Into Python'}]
</snippet></ROW><ROW><id>14209413</id><snippet>from django.db.models import F

comments = Comment.objects.filter(
        blog__author=request.user
    ).filter(
        timestamp__gte=F('blog__lastview')
    ).select_related('blog').order_by('blog')
</snippet></ROW><ROW><id>14209413</id><snippet>timestamp__gte=blog__lastview</snippet></ROW><ROW><id>14209413</id><snippet>select_related</snippet></ROW><ROW><id>14209413</id><snippet>blog</snippet></ROW><ROW><id>14209413</id><snippet>order_by('blog')</snippet></ROW><ROW><id>14209413</id><snippet>from collections import defaultdict
d = defaultdict(list)
for comment in comments:
    d[comment.blog.name].append(comment)
</snippet></ROW><ROW><id>14209437</id><snippet>#!/usr/bin/env python
import subprocess
from operator import itemgetter

ps = subprocess.Popen(['ps', 'aux'], stdout=subprocess.PIPE).communicate()[0]
processes = [p for p in ps.split('\n') if p]
split_processes = [p.split() for p in processes]
</snippet></ROW><ROW><id>14209437</id><snippet>for row in sorted(split_processes[1:], key=itemgetter(10)):
    print " ".join(row)
</snippet></ROW><ROW><id>14209437</id><snippet>for row in sorted(split_processes[1:], key=itemgetter(10)):
    print " ".join(row[10:])
</snippet></ROW><ROW><id>14209629</id><snippet>from itertools import izip_longest

alist = ['foo','bar','duh']
blist = ['ofo','ardavak','dot','dotdat']

combined_list = list(izip_longest(alist, blist, fillvalue=""))

for (i,j),(iplus1,jplus1) in izip_longest(combined_list, combined_list[1:], fillvalue=("", "")):
    print i,j
    print i,j+jplus1
    print i+iplus1,j
    print i+iplus1,j+jplus1
</snippet></ROW><ROW><id>14209629</id><snippet>min(len(alist),len(blist))</snippet></ROW><ROW><id>14209684</id><snippet>open(destfile,"wb")
</snippet></ROW><ROW><id>14209705</id><snippet>python -c "print 'Hello World!'"</snippet></ROW><ROW><id>14209705</id><snippet>#! /usr/bin/python
</snippet></ROW><ROW><id>14209705</id><snippet>./file.py 1, 2, 3
</snippet></ROW><ROW><id>14209705</id><snippet>python file.py 1, 2, 3
</snippet></ROW><ROW><id>14209708</id><snippet>type(self)</snippet></ROW><ROW><id>14209708</id><snippet>def create_another(self):
    return type(self)()
</snippet></ROW><ROW><id>14209708</id><snippet>self.__class__</snippet></ROW><ROW><id>14209708</id><snippet>type()</snippet></ROW><ROW><id>14209708</id><snippet>object</snippet></ROW><ROW><id>14209708</id><snippet>type()</snippet></ROW><ROW><id>14209708</id><snippet>self.__class__</snippet></ROW><ROW><id>14209708</id><snippet>def create_another(self):
    return self.__class__()
</snippet></ROW><ROW><id>14209898</id><snippet>$ ls *.db
ls: *.db: No such file or directory

$ python test.py

$ ls *.db
mydatabase.db

$ sqlite3 mydatabase.db 
SQLite version 3.7.7 2011-06-25 16:35:41
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&gt; select * from sqlite_master;
table|albums|albums|2|CREATE TABLE albums
             (title text, artist text, release_date text, 
              publisher text, media_type text)
sqlite&gt; 
</snippet></ROW><ROW><id>14209968</id><snippet>zip()</snippet></ROW><ROW><id>14209968</id><snippet>for elem1, elem2 in zip(list1, list2):
</snippet></ROW><ROW><id>14209968</id><snippet>zip()</snippet></ROW><ROW><id>14209968</id><snippet>itertools.izip()</snippet></ROW><ROW><id>14209968</id><snippet>zip()</snippet></ROW><ROW><id>14209968</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>14209968</id><snippet>from itertools import izip_longest

for elem1, elem2 in izip_longest(list1, list2):
</snippet></ROW><ROW><id>14210382</id><snippet>os.system</snippet></ROW><ROW><id>14210382</id><snippet>os.system('clear')</snippet></ROW><ROW><id>14210382</id><snippet>os.system('CLS')</snippet></ROW><ROW><id>14210382</id><snippet>clear()</snippet></ROW><ROW><id>14210422</id><snippet>through</snippet></ROW><ROW><id>14210422</id><snippet>class User(models.Model):
    username = models.CharField(max_length=100) #Id is automatically generated by Django
    password = models.CharField(max_length=100)

    def __unicode__(self):
        return self.username

class File(models.Model):
    users = models.ManyToManyField(User, through='UserFile')
    file_name = models.CharField(max_length=100)
    type = models.CharField(max_length=10)


class UserFile(models.Model):
    user = models.ForeignKey(User)
    file = models.ForeignKey(File)
    # Should probably use CharField if you know the length
    session_id = models.TextField()
</snippet></ROW><ROW><id>14210758</id><snippet>auto_increment</snippet></ROW><ROW><id>14210758</id><snippet>lastrowid</snippet></ROW><ROW><id>14210758</id><snippet>c.execute("""INSERT INTO Website (website_name, enabled) VALUES (%s, 0)""", (store_name))
my_last_id = c.lastrowid  # cursor.lastrowid
</snippet></ROW><ROW><id>14210872</id><snippet>import re
s = '''===========================BEGIN=========================================  
2012-12-05  12:03  
XYZ 123(0)  654(2)  232(4)  
MON  23(0)   54(2)   32(4)  
POR  13(0)   64(1)   92(2)  
=========================== END =========================================  
===========================BEGIN=========================================  
2012-12-05  12:04  
XYZ 123(0)  654(2)  232(4)  
MON  23(0)   54(2)   32(4)  
POR  13(0)   64(1)   92(2)  
=========================== END =========================================  
===========================BEGIN=========================================  
2012-12-05  12:05  
XYZ 523(0)  654(2)  235(4)  
MON  83(0)   54(2)   32(4)  
POR  13(0)   64(1)   92(2)  
=========================== END =========================================  
===========================BEGIN=========================================  
2012-12-05  12:03  
XYZ 193(0)  644(2)  232(4)  
MON  23(0)   54(2)   32(4)  
POR  13(0)   64(1)   92(2)  
=========================== END =========================================
'''
print re.findall(r'=+BEGIN=+\s+(\d+-\d+-\d+\s+\d+:\d+)\s+(((XYZ|MON|POR).*\s+){3})', s)
</snippet></ROW><ROW><id>14210872</id><snippet>[('2012-12-05  12:03', 'XYZ 123(0)  654(2)  232(4)  \nMON  23(0)   54(2)   32(4)  \nPOR  13(0)   64(1)   92(2)  \n'), 
 ('2012-12-05  12:04', 'XYZ 123(0)  654(2) 232(4)  \nMON  23(0)   54(2)   32(4)  \nPOR  13(0)   64(1)   92(2)  \n'), 
 ('2012-12-05  12:05', 'XYZ 523(0)  654(2)  235(4)  \nMON  83(0)   54(2)   32(4)  \nPOR  13(0)   64(1)   92(2)  \n'), 
 ('2012-12-05  12:03', 'XYZ 193(0)  644(2)  232(4)  \nMON  23(0)   54(2)   32(4)  \nPOR  13(0)   64(1)   92(2)  \n')]
</snippet></ROW><ROW><id>14210963</id><snippet>v</snippet></ROW><ROW><id>14210963</id><snippet>v['a']</snippet></ROW><ROW><id>14210963</id><snippet>import collections

node = collections.namedtuple('node', 'a b c d')

# Tom = ...

v = node(Tom, 100, 3.14, {'x':1, 'y':2, 'z':3})
print node  # node(a=…, b=100, c=3.14, d={'x':1, 'y':2, 'z':3})
print node.c  # 3.14
print node[2]  # 3.14 (works too, but is less meaningful and robust than something like node.last_name)
</snippet></ROW><ROW><id>14210963</id><snippet>type(v) == node</snippet></ROW><ROW><id>14210963</id><snippet>namedtuple</snippet></ROW><ROW><id>14210963</id><snippet>namedtuple</snippet></ROW><ROW><id>14210963</id><snippet>class node(object):
    def __init__(self, *arg_list):
        for (name, arg) in zip('a b c d'.split(), arg_list):
            setattr(self, name, arg)

v = node(1, 20, 300, "Eric")
print v.d  # "Eric"
v.d = "Ajay"  # Works
</snippet></ROW><ROW><id>14210963</id><snippet>node[3]</snippet></ROW><ROW><id>14210963</id><snippet>node.last_name</snippet></ROW><ROW><id>14210963</id><snippet>node</snippet></ROW><ROW><id>14210963</id><snippet>all_nodes = [node(…), node(…),…]
</snippet></ROW><ROW><id>14210963</id><snippet>all_nodes = []
for … in …:
    all_nodes.append(node(…))
</snippet></ROW><ROW><id>14210963</id><snippet>all_nodes = [node(…) for … in …]
</snippet></ROW><ROW><id>14210963</id><snippet>node</snippet></ROW><ROW><id>14211592</id><snippet>os.path.join</snippet></ROW><ROW><id>14211592</id><snippet>request_number = 82673

# base dir
_dir = "D:\Current Download"       

# create dynamic name, like "D:\Current Download\Attachment82673"
_dir = os.path.join(_dir, 'Attachment%s' % request_number)

# create 'dynamic' dir, if it does not exist
if not os.path.exists(_dir):
    os.makedirs(_dir)
</snippet></ROW><ROW><id>14211600</id><snippet>sys.prefix</snippet></ROW><ROW><id>14211600</id><snippet>setuptools</snippet></ROW><ROW><id>14211600</id><snippet>distutils</snippet></ROW><ROW><id>14211600</id><snippet>pkg_resources</snippet></ROW><ROW><id>14211600</id><snippet>setuptools</snippet></ROW><ROW><id>14211600</id><snippet>resource_string</snippet></ROW><ROW><id>14211600</id><snippet>from pkg_resources import resource_string

foo_config = resource_string(__name__, 'foo.conf')
</snippet></ROW><ROW><id>14211674</id><snippet>a</snippet></ROW><ROW><id>14211674</id><snippet>list</snippet></ROW><ROW><id>14211674</id><snippet>list</snippet></ROW><ROW><id>14211674</id><snippet>import itertools as it

a = [('2013-01-04', u'crid2557171372', 1),
     ('2013-01-04', u'crid9904536154', 719677),
     ('2013-01-04', u'crid7990924609', 577352),
     ('2013-01-04', u'crid7990924609', 399058),
     ('2013-01-04', u'crid9904536154', 385260),
     ('2013-01-04', u'crid2557171372', 78873)]

b = []
for k,v in it.groupby(sorted(a, key=lambda x: x[:2]), key=lambda x: x[:2]):
    b.append(k + (sum(x[2] for x in v),))
</snippet></ROW><ROW><id>14211674</id><snippet>b</snippet></ROW><ROW><id>14211674</id><snippet>[('2013-01-04', u'crid2557171372', 78874),
 ('2013-01-04', u'crid7990924609', 976410),
 ('2013-01-04', u'crid9904536154', 1104937)]
</snippet></ROW><ROW><id>14211727</id><snippet>import Image
import numpy as np

image=Image.open('L_2d.png')
image.load()

image_data = np.asarray(image)
image_data_bw = image_data.max(axis=2)
non_empty_columns = np.where(image_data_bw.max(axis=0)&gt;0)[0]
non_empty_rows = np.where(image_data_bw.max(axis=1)&gt;0)[0]
cropBox = (min(non_empty_rows), max(non_empty_rows), min(non_empty_columns), max(non_empty_columns))

image_data_new = image_data[cropBox[0]:cropBox[1]+1, cropBox[2]:cropBox[3]+1 , :]

new_image = Image.fromarray(image_data_new)
new_image.save('L_2d_cropped.png')
</snippet></ROW><ROW><id>14211891</id><snippet>GtkSourceView</snippet></ROW><ROW><id>14212139</id><snippet>sys.setcheckinterval()</snippet></ROW><ROW><id>14212139</id><snippet>sys.setcheckinterval(count)</snippet></ROW><ROW><id>14212139</id><snippet>count</snippet></ROW><ROW><id>14212140</id><snippet>my_time = my_tedit.dateTime()
my_time = my_time.toPyDateTime()
</snippet></ROW><ROW><id>14212327</id><snippet>tagger = ClassifierBasedPOSTagger(train=training_sentences, cutoff_prob=0.95)
</snippet></ROW><ROW><id>14212533</id><snippet>RandomForestClassifier</snippet></ROW><ROW><id>14212533</id><snippet>RandomForestRegressor</snippet></ROW><ROW><id>14212533</id><snippet>6.2</snippet></ROW><ROW><id>14212533</id><snippet>predict</snippet></ROW><ROW><id>14212533</id><snippet>print rf.predict([testdataset[-1]])
</snippet></ROW><ROW><id>14212533</id><snippet>print rf.predict(testdataset[-1:])
</snippet></ROW><ROW><id>14212533</id><snippet>&gt;&gt;&gt; print np.asarray(train).shape

&gt;&gt;&gt; print np.asarray(target).shape

&gt;&gt;&gt; print np.asarray(testdataset).shape
</snippet></ROW><ROW><id>14212842</id><snippet>,</snippet></ROW><ROW><id>14212842</id><snippet>&gt;&gt;&gt; "'a','b'".replace("'", "").split(",")
['a', 'b']
</snippet></ROW><ROW><id>14212842</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r"\w", "'a','b'")
['a', 'b']
</snippet></ROW><ROW><id>14212842</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; list(ast.literal_eval("'a','b'"))
['a', 'b']
</snippet></ROW><ROW><id>14212842</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; import io
&gt;&gt;&gt; next(csv.reader(io.StringIO(u"'a','b'"), quotechar="'"))
['a', 'b']
</snippet></ROW><ROW><id>14212842</id><snippet>&gt;&gt;&gt; from timeit import timeit

&gt;&gt;&gt; def crude(): "'a','b'".replace("'", "").split(",")
&gt;&gt;&gt; def regex(): re.findall(r"\w", "'a','b'")
&gt;&gt;&gt; def _eval(): list(ast.literal_eval("'a','b'")) 
&gt;&gt;&gt; def csvio(): next(csv.reader(io.StringIO(u"'a','b'"), quotechar="'"))

&gt;&gt;&gt; timeit(crude)
1.2010400295257568

&gt;&gt;&gt; timeit(regex)
2.745753049850464

&gt;&gt;&gt; timeit(_eval)
17.016868114471436

&gt;&gt;&gt; timeit(csvio)
3.7680318355560303
</snippet></ROW><ROW><id>14213401</id><snippet>myWindow</snippet></ROW><ROW><id>14213401</id><snippet>self</snippet></ROW><ROW><id>14213401</id><snippet>evaluateJavaScript</snippet></ROW><ROW><id>14213401</id><snippet>loadFinished</snippet></ROW><ROW><id>14213401</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtCore, QtGui, QtWebKit  

getJsValue = """ 
w = document.getElementsByTagName('p')[0];
myWindow.showMessage(w.innerHTML);
"""  

class myWindow(QtWebKit.QWebView):  
    def __init__(self, parent=None):
        super(myWindow, self).__init__(parent)

        self.page().mainFrame().addToJavaScriptWindowObject("myWindow", self)

        self.loadFinished.connect(self.on_loadFinished)

        self.load(QtCore.QUrl('http://jquery.com'))

    @QtCore.pyqtSlot(str)  
    def showMessage(self, message):
        print "Message from website:", message

    @QtCore.pyqtSlot()
    def on_loadFinished(self):
        self.page().mainFrame().evaluateJavaScript(getJsValue) 

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('myWindow')

    main = myWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14213518</id><snippet>from rpy2.robjects import *
r("library('ltm')")
r.assign('r_var_name',py_var_name)
r("r_var_name&lt;-as.desired.data.type(r_var_name)")
</snippet></ROW><ROW><id>14213518</id><snippet>In [30]: py_obj = r("coef(ltm(Abortion ~ z1, control = list(GHk = 20, iter.em = 20)))")
In [32]: py_obj
Out[32]: 
&lt;Matrix - Python:0x4db0290 / R:0x52f04f0&gt;
[0.188998, -0.256378, -0.367623, ..., 4.542567, 5.840821, 3.243826]
</snippet></ROW><ROW><id>14214024</id><snippet>max()</snippet></ROW><ROW><id>14214024</id><snippet>min()</snippet></ROW><ROW><id>14214024</id><snippet>def get_hot_pages(self, radius = 2):
    if self.page is None or self.max_pages is None: return []
    return range(max(self.page-radius, 0), min(self.page+radius+1, self.max_pages))
</snippet></ROW><ROW><id>14214802</id><snippet>import apt

apt_cache = apt.Cache() #High level

apt_cache.update()
apt_cache.open()

list_pkgs = []

for package_name in apt_cache.keys():
    selected_package = apt_cache[package_name]

    #Verify that the package can be upgraded
    if selected_package.isUpgradable:
        pkg = dict(
            name=selected_package.name,
            version= selected_package.installedVersion,
            desc= selected_package.description,
            homepage= selected_package.homepage,
            severity= selected_package.priority)
        list_pkgs.append(pkg)

print list_pkgs
</snippet></ROW><ROW><id>14214995</id><snippet>sum(sys.getsizeof(i) for i in gc.get_objects())
</snippet></ROW><ROW><id>14214995</id><snippet>gc.get_objects()</snippet></ROW><ROW><id>14214995</id><snippet>__sizeof__()</snippet></ROW><ROW><id>14214995</id><snippet>gc.collect()</snippet></ROW><ROW><id>14214995</id><snippet>gc.garbage</snippet></ROW><ROW><id>14214995</id><snippet>__del__()</snippet></ROW><ROW><id>14214995</id><snippet>gc.set_debug(gc.DEBUG_UNCOLLECTABLE | gc.DEBUG_INSTANCES | gc.DEBUG_OBJECTS)
</snippet></ROW><ROW><id>14214995</id><snippet>stderr</snippet></ROW><ROW><id>14214995</id><snippet>/usr/lib/valgrind/python.supp</snippet></ROW><ROW><id>14215034</id><snippet>{{ 'Update' if files else 'Continue' }}
</snippet></ROW><ROW><id>14215042</id><snippet>Image</snippet></ROW><ROW><id>14215042</id><snippet>pil.Image</snippet></ROW><ROW><id>14215042</id><snippet>open</snippet></ROW><ROW><id>14215042</id><snippet>img</snippet></ROW><ROW><id>14215042</id><snippet>None</snippet></ROW><ROW><id>14215042</id><snippet>photo</snippet></ROW><ROW><id>14215042</id><snippet>display</snippet></ROW><ROW><id>14215042</id><snippet>display</snippet></ROW><ROW><id>14215192</id><snippet>len()</snippet></ROW><ROW><id>14215192</id><snippet>if len(districts_list) == 1:
    ...
</snippet></ROW><ROW><id>14215192</id><snippet>seq.count()</snippet></ROW><ROW><id>14215366</id><snippet>shutil</snippet></ROW><ROW><id>14215366</id><snippet>gshadow</snippet></ROW><ROW><id>14215366</id><snippet>os.chmod()</snippet></ROW><ROW><id>14215384</id><snippet>str.strip()</snippet></ROW><ROW><id>14215384</id><snippet>str.lstrip()</snippet></ROW><ROW><id>14215384</id><snippet>In [1]: x = ['+5556', '-1539', '-99','+1500']
</snippet></ROW><ROW><id>14215384</id><snippet>list comprehension</snippet></ROW><ROW><id>14215384</id><snippet>In [3]: [y.strip('+-') for y in x]
Out[3]: ['5556', '1539', '99', '1500']
</snippet></ROW><ROW><id>14215384</id><snippet>map()</snippet></ROW><ROW><id>14215384</id><snippet>In [2]: map(lambda x:x.strip('+-'),x)
Out[2]: ['5556', '1539', '99', '1500']
</snippet></ROW><ROW><id>14215384</id><snippet>str.translate()</snippet></ROW><ROW><id>14215384</id><snippet>+</snippet></ROW><ROW><id>14215384</id><snippet>-</snippet></ROW><ROW><id>14215387</id><snippet>worker</snippet></ROW><ROW><id>14215387</id><snippet>import time
import threading

class CoolThing(object):

    def __init__(self):
        self.thread = None

    def run_in_background(self, callback, period=0.5):
        wait_count = 0
        while True:
            if self.thread:
                if self.thread[1].running or wait_count&gt;10:
                    raise RuntimeError()
                time.sleep(0.5)
                wait_count += 1
            else:
                break

        def worker():
            t0 = time.time()
            worker.running = True
            while worker.running:
                if time.time()-t0&gt;2:
                    callback()
                    t0 = time.time()
                time.sleep(period)
            worker.callback()

        worker.callback = self.dispose
        self.thread = (threading.Thread(target=worker), worker)
        self.thread[0].start()

    def stop_background(self, join=False):
        if not self.thread:
            raise RuntimeError
        self.thread[1].running = False
        if join:
            self.thread[0].join()
        self.stopping = True

    def dispose(self):
        self.thread = None
        self.stopping

def my_callback():
    print "Beep"

if __name__=="__main__":
    cool_thing = CoolThing()
    cool_thing.run_in_background(my_callback, 0.5)
    time.sleep(10)
    cool_thing.stop_background()
    # Immediatley restart process
    cool_thing.run_in_background(my_callback, 0.5)
    time.sleep(10)
    cool_thing.stop_background()
    print cool_thing.thread
    time.sleep(3)
    print cool_thing.thread
</snippet></ROW><ROW><id>14215387</id><snippet>Beep
Beep
Beep
(&lt;Thread(Thread-2, started 10760)&gt;, &lt;function worker at 0x02DEDD70&gt;)
None
</snippet></ROW><ROW><id>14215387</id><snippet>None</snippet></ROW><ROW><id>14215387</id><snippet>run_background(...)</snippet></ROW><ROW><id>14215387</id><snippet>stop_background()</snippet></ROW><ROW><id>14215387</id><snippet>import time
import threading

class Worker(threading.Thread):
    def __init__(self, callback, period=0.5, finished_callback = None):
        threading.Thread.__init__(self)
        self.callback = callback
        self.period = period
        self._stop_requested = False
        self._finished_callback = finished_callback

    def run(self):
        t0 = time.time()
        while not self._stop_requested:
            if time.time()-t0&gt;2:
                self.callback()
                t0 = time.time()
            time.sleep(self.period)
        if self._finished_callback:
            self._finished_callback(self)

    def request_stop(self):
        self._stop_requested = True

    @property
    def stopping(self):
        return self._stop_requested

class CoolThing(object):

    def __init__(self):
        self.workers = []
        self.workers_lock = threading.Lock()

    def run_in_background(self, callback, period=0.5):
        if len([w for w in self.workers if not w.stopping])&gt;0:
            raise RuntimeError()
        worker = Worker(callback, period, finished_callback=self.dispose)
        with self.workers_lock:
            self.workers.append(worker)
        worker.start()

    def stop_background(self, join=False):
        if len(self.workers) == 0:
            raise RuntimeError()
        for worker in self.workers:
            worker.request_stop()
        if join:
            for worker in self.workers:
                worker.join()

    def dispose(self, worker):
        with self.workers_lock:
            self.workers.remove(worker)

def my_callback():
    print "Beep"

if __name__=="__main__":
    cool_thing = CoolThing()
    cool_thing.run_in_background(my_callback, 0.5)
    time.sleep(10) 
    print cool_thing.workers
    cool_thing.stop_background()
    # Immediatley restart process
    cool_thing.run_in_background(my_callback, 0.5)    
    print cool_thing.workers
    time.sleep(5)
    print cool_thing.workers
    time.sleep(5)
    cool_thing.stop_background()
    print cool_thing.workers
    time.sleep(3)
    print cool_thing.workers
</snippet></ROW><ROW><id>14215699</id><snippet>input()</snippet></ROW><ROW><id>14215699</id><snippet>eval()</snippet></ROW><ROW><id>14215699</id><snippet>raw_input()</snippet></ROW><ROW><id>14215753</id><snippet>struct</snippet></ROW><ROW><id>14215753</id><snippet>struct.unpack('=HHf255s', bytes)
</snippet></ROW><ROW><id>14215753</id><snippet>bytes</snippet></ROW><ROW><id>14215753</id><snippet>itertools</snippet></ROW><ROW><id>14215753</id><snippet>from itertools import izip_longest, imap
from struct import unpack, calcsize

fmt_s = '=5i'
fmt_spec = '=256i'
size_s = calcsize(fmt_s)
size = size_s + calcsize(fmt_spec)

def chunked(iterable, n, fillvalue=''):
    args = [iter(iterable)] * n
    return imap(''.join, izip_longest(*args, fillvalue=fillvalue))

data = [unpack(fmt_s, section[:size_s]) + (unpack(fmt_spec, section[size_s:]),)
    for section in chunked(bytes, size)]
</snippet></ROW><ROW><id>14215753</id><snippet>data = [list(unpack(fmt_s, section[:size_s])) + [list(unpack(fmt_spec, section[size_s:]))]
    for section in chunked(bytes, size)]
</snippet></ROW><ROW><id>14215921</id><snippet>infile = "listdata.txt"
data = open(infile, "r").readlines()

dataDict = []
columns = []

# Create a dictionary list
for line in data:
    row = line.split(";");
    rowData = {}
    for cell in row:
        cell = cell.strip()[1:-1].split(",")
        if len(cell) &gt; 1:
            rowData[cell[0].strip().strip('"').strip("'")] = cell[1].strip().strip('"').strip("'")
    keys = rowData.keys()
    dataDict.append(rowData)
    columns = list(set(columns) | set(keys))

# Write dictionary list to file
outfile = "listdata.csv"
fp = open(outfile, "w")

for key in columns:
    fp.write(key + ", ")

fp.write("\n")

for data in dataDict:
    for key in columns:
        if key in data:
            fp.write(data[key] + ",")
        else:
            fp.write(",")
    fp.write("\n")

fp.close()
</snippet></ROW><ROW><id>14215921</id><snippet>[' Message  1 '];['Status', 'Read'];['Message ID', '012434'];['Message Truncation', 'OK'];['Priority', 'Low'];['Sent Time', '15/12/2010 05:56:36']
[' Message  2 '];['ColumnName', 'Read'];['ColumnName2', '012434'];['Message Truncation', 'OK'];['Priority', 'Low'];['Sent Time', '15/12/2010 05:56:36']
[' Message  3 '];['To', 'Mr Smith'];['To', 'Mrs green'];['Message Truncation', 'OK'];['Priority', 'Low'];['Sent Time', '15/12/2013 05:56:36']
</snippet></ROW><ROW><id>14215921</id><snippet>Status, Sent Time, To, ColumnName2, Message ID, Message Truncation, Priority, ColumnName, 
Read,15/12/2010 05:56:36,,,012434,OK,Low,,
,15/12/2010 05:56:36,,012434,,OK,Low,Read,
,15/12/2013 05:56:36,Mrs green,,,OK,Low,,
</snippet></ROW><ROW><id>14215921</id><snippet>":"</snippet></ROW><ROW><id>14215921</id><snippet>key = cell[0].strip().strip('"').strip("'")
value = cell[1].strip().strip('"').strip("'")
if key in rowData:
    rowData[key] = rowData[key] + ":" + value
else:
    rowData[key] = value
</snippet></ROW><ROW><id>14216174</id><snippet>try:
    s = '\xFEFEF'
    u = s.decode('utf8')
except UnicodeDecodeError as e:
    for p in dir(e):
        if not p.startswith('_'):
            print '%s=%r' % (p, getattr(e, p))
</snippet></ROW><ROW><id>14216174</id><snippet>args=('utf8', '\xfeFEF', 0, 1, 'invalid start byte')
encoding='utf8'
end=1
message=''
object='\xfeFEF'
reason='invalid start byte'
start=0
</snippet></ROW><ROW><id>14216214</id><snippet>from django.views.generic import DetailView

urlpatterns += patterns('',
    url(r'^logbook/(?P&lt;year&gt;\d+)/(?P&lt;month&gt;[-\w]+)/(?P&lt;slug&gt;[\w-]+)/$',
        DetailView.as_view(model=Entry),
        name="entry_detail"),
)
</snippet></ROW><ROW><id>14216214</id><snippet># nothing needed here for the detail view to work, though in the future 
# I would like to have the generic view code here instead to accomplish 
# the same thing as `DetailView.as_view(model=Entry), name="entry_detail"` 
# in urls.py, and would appreciate an example of this.
</snippet></ROW><ROW><id>14216937</id><snippet>b</snippet></ROW><ROW><id>14216937</id><snippet>a</snippet></ROW><ROW><id>14216937</id><snippet>b</snippet></ROW><ROW><id>14216937</id><snippet>import a
</snippet></ROW><ROW><id>14217058</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; url = "http://www.exmaple.com/boo/a.php?a=jsd"
&gt;&gt;&gt; url[:url.rfind("/")+1]
'http://www.exmaple.com/boo/'
</snippet></ROW><ROW><id>14217058</id><snippet>urlparse</snippet></ROW><ROW><id>14217058</id><snippet>rfind</snippet></ROW><ROW><id>14217058</id><snippet>import re, urlparse
def url_cutter(url):
    up = urlparse.urlparse(url)
    url2 = up[0]+"://"+up[1]+up[2]
    if url.rfind("/")&gt;6:
            url2 = url2[:url2.rfind("/")+1]
    return url2
</snippet></ROW><ROW><id>14217058</id><snippet>In [36]: url_cutter("http://www.exmaple.com/boo/a.php?a=jsd")
Out[36]: 'http://www.exmaple.com/boo/'

In [37]: url_cutter("http://www.exmaple.com/boo/a.php?a=jsd#dvt_on")
Out[37]: 'http://www.exmaple.com/boo/'

In [38]: url_cutter("http://www.exmaple.com")
Out[38]: 'http://www.exmaple.com'
</snippet></ROW><ROW><id>14217561</id><snippet>data = [d for d in data if d['id'] not in remove_ids]
</snippet></ROW><ROW><id>14217594</id><snippet>models.py</snippet></ROW><ROW><id>14217594</id><snippet>class MyModel(models.Model):
    ...

    def save(self):
        super(DocumentTemplate, self).save(*args, **kwargs)

        # retrieve the old version of the object
        try:
           old = DocumentTemplate.objects.get(id=self.id)
        except MyModel.DoesNotExist:
           # object is being created
           customize_function_create(self)

        # check if something has changed
        if self.interesting_field != old.interesting_field:
            # the field has been changed
            customize_function_update(self)

        return
</snippet></ROW><ROW><id>14217641</id><snippet>list</snippet></ROW><ROW><id>14217641</id><snippet>import csv
from collections import defaultdict

d = defaultdict(list)
fields = ["USER","URL","LOADS","ACT"]

with open('file.csv', 'rU') as the_file:
    rows = csv.DictReader(the_file, delimiter=",",fieldnames=fields)
    rows.next()

    for row in rows:
        data = (int(row['LOADS']),int(row['ACT']))
        d[row['URL']].append(data)
</snippet></ROW><ROW><id>14217641</id><snippet>d['someurl'] = [(5,17),(7,14)]
</snippet></ROW><ROW><id>14217641</id><snippet>loads</snippet></ROW><ROW><id>14217641</id><snippet>load_sums = {k:sum(i[0] for i in d[k]) for k in d}
</snippet></ROW><ROW><id>14217661</id><snippet>results[0][1]
</snippet></ROW><ROW><id>14217661</id><snippet>row1_value2</snippet></ROW><ROW><id>14217661</id><snippet>row2_value3</snippet></ROW><ROW><id>14217661</id><snippet>results[1][2]</snippet></ROW><ROW><id>14218357</id><snippet>def LoadMyDLL():
    dll = ctypes.CDLL("libmydll.so")
    dll.HelperFunction = HelperFunction
    dll.HelperFunction.dll = dll
    return dll
</snippet></ROW><ROW><id>14218357</id><snippet>dll.HelperFunction.dll is HelperFunction.dll</snippet></ROW><ROW><id>14218357</id><snippet>LoadMyDLL</snippet></ROW><ROW><id>14218357</id><snippet>CDLL</snippet></ROW><ROW><id>14218357</id><snippet>HelperFunction</snippet></ROW><ROW><id>14218357</id><snippet>dll.HelperFunction()</snippet></ROW><ROW><id>14218357</id><snippet>HelperFunc</snippet></ROW><ROW><id>14218357</id><snippet>dll</snippet></ROW><ROW><id>14218357</id><snippet>HelperFunction(dll)</snippet></ROW><ROW><id>14218357</id><snippet>dll</snippet></ROW><ROW><id>14218357</id><snippet>CDLL</snippet></ROW><ROW><id>14218357</id><snippet>self.dll</snippet></ROW><ROW><id>14218357</id><snippet>HelperFunction</snippet></ROW><ROW><id>14218357</id><snippet>self.dll</snippet></ROW><ROW><id>14218357</id><snippet>class DLLHelper(object):
    def __init__(self, static_object=None, helper_function=None):
        self.dll = ctypes.CDLL(static_object or "libmydll.so")

    def HelperFunction(self):
        # do stuff with self.dll

    def OtherRelatedFunction(self):
        # do stuff with self.dll and self.HelperFunction


dll = DLLHelper()
dll.HelperFunction()
</snippet></ROW><ROW><id>14218467</id><snippet>for i in range(10):
    principal = principal * (1 + apr)

print "The value in 10 years will be: $", principal
</snippet></ROW><ROW><id>14218480</id><snippet>[x[3] for x in cool_list]
</snippet></ROW><ROW><id>14218480</id><snippet>[[4, 5, 6, 7], [4, 5, 6, 7]]
</snippet></ROW><ROW><id>14218626</id><snippet>to_excel</snippet></ROW><ROW><id>14218626</id><snippet># first convert Series to DataFrame
df_segmenti_t0 = DataFrame(segmenti_t0)

# save as excel spreadsheet
df_segmenti_t0.to_excel('prova.xls')
</snippet></ROW><ROW><id>14218688</id><snippet>&gt;&gt;&gt; x = [['True_304', 'false_2'], ['True_702', 'false_2_1'], ['True_204', 'false_222_2']]
&gt;&gt;&gt; [[b, a] for [a, b] in x]
[['false_2', 'True_304'], ['false_2_1', 'True_702'], ['false_222_2', 'True_204']]
</snippet></ROW><ROW><id>14218858</id><snippet>spring-integration-scripting</snippet></ROW><ROW><id>14218858</id><snippet>&lt;service-activator input-channel="referencedScriptInput"&gt;
    &lt;script:script 
            lang="python"
            location="org/springframework/integration/scripting/config/jsr223/Jsr223ServiceActivatorTests.py"&gt;
        &lt;script:variable name="foo" value="foo"/&gt;
        &lt;script:variable name="bar" value="bar"/&gt;
        &lt;script:variable name="date" ref="date"/&gt;
    &lt;/script:script&gt;
&lt;/service-activator&gt;
</snippet></ROW><ROW><id>14218858</id><snippet>&lt;transformer input-channel="referencedScriptInput"&gt;
    &lt;script:script
    lang="ruby" 
    location="org/springframework/integration/scripting/config/jsr223/Jsr223TransformerTests.rb"/&gt;
&lt;/transformer&gt;
</snippet></ROW><ROW><id>14218930</id><snippet>applymap</snippet></ROW><ROW><id>14218930</id><snippet>powers = {'B': 10 ** 9, 'M': 10 ** 6, 'T': 10 ** 12}
# add some more to powers as necessary

def f(s):
    try:
        power = s[-1]
        return int(s[:-1]) * powers[power]
    except TypeError:
        return s

df.applymap(f)
</snippet></ROW><ROW><id>14218971</id><snippet>x[1]</snippet></ROW><ROW><id>14218971</id><snippet>sorted(unsorted_list, key=lambda x: (-x[1], x[0]))
</snippet></ROW><ROW><id>14218971</id><snippet>key</snippet></ROW><ROW><id>14218971</id><snippet>-x[1]</snippet></ROW><ROW><id>14218971</id><snippet>x[0]</snippet></ROW><ROW><id>14219060</id><snippet>href</snippet></ROW><ROW><id>14219060</id><snippet>def filter(href):
    return '/aems/file/filegetrevision' in href

soup.find_all('a', href=filter)
</snippet></ROW><ROW><id>14219060</id><snippet>RegexObject</snippet></ROW><ROW><id>14219060</id><snippet>filter = re.compile(some_regular_expression)
soup.find_all('a', href=filter)
</snippet></ROW><ROW><id>14219143</id><snippet>lambda</snippet></ROW><ROW><id>14219143</id><snippet>&gt;&gt;&gt; x = None
&gt;&gt;&gt; y = None
&gt;&gt;&gt; r = lambda : x*y
&gt;&gt;&gt; r()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 1, in &lt;lambda&gt;
TypeError: unsupported operand type(s) for *: 'NoneType' and 'NoneType'
&gt;&gt;&gt; x = 1
&gt;&gt;&gt; y = 2
&gt;&gt;&gt; r()
2
</snippet></ROW><ROW><id>14219143</id><snippet>class DeferredEval(object):
    def __init__(self,func):
        self.func = func

    def __call__(self):
        return self.func()

    def __add__(self,other):
        return self.func() + other

    def __radd__(self,other):
        return other + self.func()


x = None
y = None
r = DeferredEval(lambda:x*y)

try:
    a = 1 + r
except TypeError as err:
    print "Oops, can't calculate r yet -- Reason:",err

x = 1
y = 2
print 1 + r
print r + 1
</snippet></ROW><ROW><id>14219143</id><snippet>Oops, can't calculate r yet -- Reason: unsupported operand type(s) for *: 'NoneType' and 'NoneType'
3
3
</snippet></ROW><ROW><id>14219143</id><snippet>r</snippet></ROW><ROW><id>14219159</id><snippet>shlex.split()</snippet></ROW><ROW><id>14219159</id><snippet>unicode()</snippet></ROW><ROW><id>14219159</id><snippet>str()</snippet></ROW><ROW><id>14219159</id><snippet>StringIO()</snippet></ROW><ROW><id>14219159</id><snippet>shlex.split()</snippet></ROW><ROW><id>14219159</id><snippet>unicode()</snippet></ROW><ROW><id>14219159</id><snippet>&gt;&gt;&gt; map(lambda s: s.decode('UTF8'), shlex.split(command_full.encode('utf8')))
[u'software.py', u'-fileA=sequence.fasta', u'-fileB=\u65b0\u5efa\u6587\u672c\u6587\u6863.fasta.txt', u'-output_dir=...', u'-FORMtitle=tst']
</snippet></ROW><ROW><id>14219159</id><snippet>iso-8859-1</snippet></ROW><ROW><id>14219159</id><snippet>UTF-8</snippet></ROW><ROW><id>14219244</id><snippet>setattr</snippet></ROW><ROW><id>14219244</id><snippet>type</snippet></ROW><ROW><id>14219244</id><snippet>import inspect
from abc import ABCMeta, abstractmethod

class Interface(metaclass=ABCMeta):
    pass

def interface(cls):
    attrs = {n: abstractmethod(f)
             for n, f in inspect.getmembers(cls, predicate=inspect.isfunction)}

    return type(cls.__name__, (Interface, cls), attrs)

@interface
class X(metaclass=ABCMeta):
    def test(self):
        pass

x = X()
# does fail:
# Traceback (most recent call last):
#   File "test.py", line 19, in &lt;module&gt;
#     x = X() # should fail, because test will be abstract method.
# TypeError: Can't instantiate abstract class X with abstract methods test
</snippet></ROW><ROW><id>14219328</id><snippet>while</snippet></ROW><ROW><id>14219328</id><snippet>input()</snippet></ROW><ROW><id>14219328</id><snippet> while True:
    age = input('&gt;&gt; Age: ')
    if age:
        break
    print('Please enter your age')
</snippet></ROW><ROW><id>14219328</id><snippet>age</snippet></ROW><ROW><id>14219328</id><snippet>ValueError</snippet></ROW><ROW><id>14219328</id><snippet>while True:
    try:
        age = int(input('&gt;&gt; Age: '))
    except ValueError:
        print('Incorrect input')
        continue
    else:
        break
</snippet></ROW><ROW><id>14219368</id><snippet>nginx</snippet></ROW><ROW><id>14219368</id><snippet>gunicorn</snippet></ROW><ROW><id>14220001</id><snippet>exclude</snippet></ROW><ROW><id>14220001</id><snippet>all_users = list(UserProfile.objects.attribute.exclude(type=given).exists())
</snippet></ROW><ROW><id>14220001</id><snippet>filter(**kwargs)</snippet></ROW><ROW><id>14220001</id><snippet>exclude</snippet></ROW><ROW><id>14220448</id><snippet>notebook = wx.Notebook(self, style=wx.BK_DEFAULT, size=(640,480))
</snippet></ROW><ROW><id>14220448</id><snippet>panel</snippet></ROW><ROW><id>14220448</id><snippet>panel</snippet></ROW><ROW><id>14220516</id><snippet>SIGKILL</snippet></ROW><ROW><id>14220649</id><snippet>sys.argv = []</snippet></ROW><ROW><id>14220649</id><snippet>sys.argv = ['scriptname']</snippet></ROW><ROW><id>14220649</id><snippet>sys.argv = ['']</snippet></ROW><ROW><id>14220649</id><snippet>sys</snippet></ROW><ROW><id>14220649</id><snippet>sys.argv</snippet></ROW><ROW><id>14220649</id><snippet>~$ python
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.argv
['']
</snippet></ROW><ROW><id>14220808</id><snippet>str.join()</snippet></ROW><ROW><id>14220808</id><snippet>&gt;&gt;&gt; ", ".join([1, 2, 3])
1, 2, 3
</snippet></ROW><ROW><id>14220808</id><snippet>threading.Thread.join()</snippet></ROW><ROW><id>14220808</id><snippet>Thread</snippet></ROW><ROW><id>14220808</id><snippet>join()</snippet></ROW><ROW><id>14220893</id><snippet>from distutils.core import setup
</snippet></ROW><ROW><id>14220893</id><snippet>distutils.core</snippet></ROW><ROW><id>14220893</id><snippet>setuptools</snippet></ROW><ROW><id>14220896</id><snippet>DATABASES = {
    'app_data': {
        'NAME': 'app_data',
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'USER': 'postgres_user',
        'PASSWORD': 's3krit'
    },
    'DBNAME_1': {
        'NAME': 'user_data',
        'ENGINE': 'django.db.backends.mysql',
        'USER': 'mysql_user',
        'PASSWORD': 'priv4te'
    }
}
</snippet></ROW><ROW><id>14220896</id><snippet>using()</snippet></ROW><ROW><id>14220896</id><snippet>&gt;&gt;&gt; user = Auth.objects.using('app_data').get(user=user)
&gt;&gt;&gt; print user.database
DBNAME_0
&gt;&gt;&gt;Data = SomeTable.objects.using(user.database).all()
</snippet></ROW><ROW><id>14220933</id><snippet>if cmd == "e" or cmd == "east" or "go east":
    print room8()
if cmd == "s" or cmd == "south" or "go south":
    print room1()
if cmd == "forest" or cmd == "explore" or cmd == "explore forest" or cmd == "explore the forest":
    print room13()
else:
    print error()
    print room4()
</snippet></ROW><ROW><id>14220933</id><snippet>if</snippet></ROW><ROW><id>14220933</id><snippet>or "go east"</snippet></ROW><ROW><id>14220933</id><snippet>or cmd == "go east"</snippet></ROW><ROW><id>14220933</id><snippet>if</snippet></ROW><ROW><id>14220933</id><snippet>if cmd == "e" or cmd == "east" or cmd == "go east"</snippet></ROW><ROW><id>14220933</id><snippet>if cmd in {"e", "east", "go east"}:
    ...
</snippet></ROW><ROW><id>14220933</id><snippet>{"e", "east", "go east"}</snippet></ROW><ROW><id>14220933</id><snippet>set(("e", "east", "go east"))</snippet></ROW><ROW><id>14220939</id><snippet>cbar = grid.cbar_axes[0].colorbar(im)
cbar.ax.set_label_text("$[a.u.]$")
</snippet></ROW><ROW><id>14221295</id><snippet>with open("filename") as f:
    nsize = {el.strip(): len(el.strip()) for el in f}
</snippet></ROW><ROW><id>14221295</id><snippet>f</snippet></ROW><ROW><id>14221295</id><snippet>strips()</snippet></ROW><ROW><id>14221295</id><snippet>collection.Counter</snippet></ROW><ROW><id>14221295</id><snippet>from collections import Counter

with open("filename") as f:
    nsize = Counter(el.strip() for el in f)
</snippet></ROW><ROW><id>14221295</id><snippet>strip()</snippet></ROW><ROW><id>14221295</id><snippet>Counter</snippet></ROW><ROW><id>14221295</id><snippet>foo</snippet></ROW><ROW><id>14221295</id><snippet>nsize['foo']</snippet></ROW><ROW><id>14221389</id><snippet>simplejson</snippet></ROW><ROW><id>14221389</id><snippet>json</snippet></ROW><ROW><id>14221389</id><snippet>import json</snippet></ROW><ROW><id>14221389</id><snippet>import simplejson</snippet></ROW><ROW><id>14221389</id><snippet>simplejson</snippet></ROW><ROW><id>14221389</id><snippet>simplejson</snippet></ROW><ROW><id>14221389</id><snippet>json</snippet></ROW><ROW><id>14221389</id><snippet>try:
    import simplejson
except ImportError:
    import json as simplejson
</snippet></ROW><ROW><id>14221389</id><snippet>json</snippet></ROW><ROW><id>14221389</id><snippet>simplejson</snippet></ROW><ROW><id>14221638</id><snippet>python manage.py sqlall
</snippet></ROW><ROW><id>14221733</id><snippet>from datetime import datetime
from sqlalchemy import *
from sqlalchemy.dialects.postgresql import ARRAY

meta = MetaData()
surveys_table = Table('surveys', meta,
    Column('surveys_id', Integer, primary_key=True),
    Column('questions_ids_ordered', ARRAY(Integer)),
    Column('created_at', DateTime, nullable=False, default=datetime.utcnow)
)
</snippet></ROW><ROW><id>14221733</id><snippet>engine = create_engine('postgresql://localhost')
conn = engine.connect()
u = surveys_table.update().where(surveys_table.c.id == 46).\
     values(questions_ids_ordered=[237, 238, 239, 240, 241, 242, 243])
conn.execute(u)
conn.close()
</snippet></ROW><ROW><id>14221733</id><snippet>text()</snippet></ROW><ROW><id>14221733</id><snippet>with engine.connect() as conn:
    u = text('UPDATE surveys SET questions_ids_ordered = :q WHERE id = :id')
    conn.execute(u, q=[237, 238, 239, 240, 241, 242, 243], id=46)
</snippet></ROW><ROW><id>14221991</id><snippet>pygame.display.flip</snippet></ROW><ROW><id>14221991</id><snippet>idraw</snippet></ROW><ROW><id>14222012</id><snippet>for player in basicPlayers:
    return #anything
</snippet></ROW><ROW><id>14222012</id><snippet>yield</snippet></ROW><ROW><id>14222012</id><snippet>if basicPlayers:
    return ", ".join(("{0} {1}".format(player['name'], player['score'])))
</snippet></ROW><ROW><id>14222086</id><snippet>scrapy.contrib.spidermiddleware.referer.RefererMiddleware</snippet></ROW><ROW><id>14222086</id><snippet>SPIDER_MIDDLEWARES = {
'scrapy.contrib.spidermiddleware.referer.RefererMiddleware': True,
}
</snippet></ROW><ROW><id>14222086</id><snippet>response.request.headers.get('Referrer', None)</snippet></ROW><ROW><id>14222228</id><snippet># You might need to do this to get X as an ndarray (for example if X is a list)
X = numpy.asarray(X)

# Then you can simply do
X[s, [0, 1, 2]]

# Or more generally
X_argmax = X[s, numpy.arange(X.shape[1])]
</snippet></ROW><ROW><id>14222569</id><snippet>range()</snippet></ROW><ROW><id>14222569</id><snippet>for i in (c1, c2, c3):
</snippet></ROW><ROW><id>14222569</id><snippet>(c1, c2, c3)</snippet></ROW><ROW><id>14222569</id><snippet>range()</snippet></ROW><ROW><id>14222569</id><snippet>print</snippet></ROW><ROW><id>14222569</id><snippet>c1, c2, c3 = input("Provide 3 Celsius temps. separated with a comma: ")
print "The temperatures are", 
for i in range(c1, c2, c3):
    fahrenheit = (9.0 / 5.0) * i + 32
    print fahrenheit,
print "degrees Fahrenheit."
</snippet></ROW><ROW><id>14222790</id><snippet>import multiprocessing
import os
import time

import cherrypy

def run_in_sub_proc(size):
    for i in range(size):
        print os.getpid(), i
        time.sleep(1)

pool = multiprocessing.Pool(2)

class Root(object):
    @cherrypy.expose
    def index(self):
        pool.map_async(run_in_sub_proc, (3, 5))

if __name__ == '__main__':
    cherrypy.engine.subscribe('stop', pool.join)
    cherrypy.quickstart(Root())
</snippet></ROW><ROW><id>14222852</id><snippet>arr[i]</snippet></ROW><ROW><id>14222852</id><snippet>arr[i]</snippet></ROW><ROW><id>14222852</id><snippet>multiprocessing.manager</snippet></ROW><ROW><id>14222852</id><snippet>import multiprocessing as mp

class Consumer(mp.Process):
    def __init__(self, task_queue, result_queue, lock, lst):
            mp.Process.__init__(self)
            self.task_queue = task_queue
            self.result_queue = result_queue
            self.lock = lock
            self.lst = lst

    def run(self):
            proc_name = self.name
            while True:
                next_task = self.task_queue.get()
                if next_task is None:
                    self.task_queue.task_done()
                    break            
                answer = next_task(lock = self.lock, lst = self.lst)
                self.task_queue.task_done()
                self.result_queue.put(answer)
            return

class Task(object):
    def __init__(self, i):
        self.i = i

    def __call__(self, lock, lst):
        with lock:
            lst[self.i] = "test {}".format(self.i)
            print([lst[i] for i in range(3)])

if __name__ == '__main__':
   tasks = mp.JoinableQueue()
   results = mp.Queue()
   manager = mp.Manager()
   lst = manager.list(['']*3)

   lock = mp.Lock()
   num_consumers = mp.cpu_count() * 2
   consumers = [Consumer(tasks, results, lock, lst) for i in xrange(num_consumers)]

   for w in consumers:
      w.start()

   for i in xrange(3):
      tasks.put(Task(i))

   for i in xrange(num_consumers):
      tasks.put(None)

   tasks.join()
</snippet></ROW><ROW><id>14222852</id><snippet>mp.Array('c', 10)</snippet></ROW><ROW><id>14222852</id><snippet>import multiprocessing as mp

class Consumer(mp.Process):
    def __init__(self, task_queue, result_queue, arr, lock):
            mp.Process.__init__(self)
            self.task_queue = task_queue
            self.result_queue = result_queue
            self.arr = arr
            self.lock = lock

    def run(self):
            proc_name = self.name
            while True:
                next_task = self.task_queue.get()
                if next_task is None:
                    self.task_queue.task_done()
                    break            
                answer = next_task(arr = self.arr, lock = self.lock)
                self.task_queue.task_done()
                self.result_queue.put(answer)
            return

class Task(object):
    def __init__(self, i):
        self.i = i

    def __call__(self, arr, lock):
        with lock:
            arr[self.i].value = "test {}".format(self.i)
            print([a.value for a in arr])

if __name__ == '__main__':
   tasks = mp.JoinableQueue()
   results = mp.Queue()
   arr = [mp.Array('c', 10) for i in range(3)]

   lock = mp.Lock()
   num_consumers = mp.cpu_count() * 2
   consumers = [Consumer(tasks, results, arr, lock) for i in xrange(num_consumers)]

   for w in consumers:
      w.start()

   for i in xrange(3):
      tasks.put(Task(i))

   for i in xrange(num_consumers):
      tasks.put(None)

   tasks.join()
</snippet></ROW><ROW><id>14222852</id><snippet>mp.Array(ctypes.c_char_p, 3)</snippet></ROW><ROW><id>14222852</id><snippet>mp.Array('c', 10)</snippet></ROW><ROW><id>14222852</id><snippet>mp.Array(ctypes.c_char_p, 3)</snippet></ROW><ROW><id>14222852</id><snippet>arr[i]</snippet></ROW><ROW><id>14223080</id><snippet>p = Popen(['hg', 'verify', '-R', 'natrium-master', '-q'], stdout=PIPE, stdin=PIPE)
out, err = p.communicate()
print p.returncode
</snippet></ROW><ROW><id>14223101</id><snippet>from scipy.weave import inline, converters

_code = open("outline.c", "r").read()

def outline(data, every):
    width, height = data.shape
    return inline(_code, ['data', 'width', 'height', 'every'], type_converters=converters.blitz)
</snippet></ROW><ROW><id>14223101</id><snippet>/*
Modifioitu pygame.mask.Mask.outline
Input: data, width, height, every
*/

PyObject *plist, *value;
int x, y, e, firstx, firsty, secx, secy, currx, curry, nextx, nexty, n;
int a[14], b[14];
a[0] = a[1] = a[7] = a[8] = a[9] = b[1] = b[2] = b[3] = b[9] = b[10] = b[11]= 1;
a[2] = a[6] = a[10] = b[4] = b[0] = b[12] = b[8] = 0;
a[3] = a[4] = a[5] = a[11] = a[12] = a[13] = b[5] = b[6] = b[7] = b[13] = -1;

plist = NULL;
plist = PyList_New (0);
/*if (!plist) En ymmärrä mihin tätä tarvii
    return NULL;*/

every = 1;
n = firstx = firsty = secx = x = 0;

/*if(!PyArg_ParseTuple(args, "|i", &amp;every)) {
    return NULL;
}

 by copying to a new, larger mask, we avoid having to check if we are at
   a border pixel every time.  
bitmask_draw(m, c, 1, 1); */

e = every;

/* find the first set pixel in the mask */
for (y = 1; y &lt; height-1; y++) {
    for (x = 1; x &lt; width-1; x++) {
        if (data(x, y)) {
             firstx = x;
             firsty = y;
             value = Py_BuildValue("(ii)", x-1, y-1);
             PyList_Append(plist, value);
             Py_DECREF(value);
             break;
        }
    }
    if (data(x, y))
        break;
}



/* covers the mask having zero pixels or only the final pixel
Pikseleitä on ainakin kymmenen
if ((x == width-1) &amp;&amp; (y == height-1)) {
    return plist;
}        */

/* check just the first pixel for neighbors */
for (n = 0;n &lt; 8;n++) {
    if (data(x+a[n], y+b[n])) {
        currx = secx = x+a[n];
        curry = secy = y+b[n];
        e--;
        if (!e) {
            e = every;
            value = Py_BuildValue("(ii)", secx-1, secy-1);
            PyList_Append(plist, value);
            Py_DECREF(value);
        }
        break;
    }
}       

/* if there are no neighbors, return
Pikseleitä on ainakin kymmenen
if (!secx) {
    return plist;
}*/

/* the outline tracing loop */
for (;;) {
    /* look around the pixel, it has to have a neighbor */
    for (n = (n + 6) &amp; 7;;n++) {
        if (data(currx+a[n], curry+b[n])) {
            nextx = currx+a[n];
            nexty = curry+b[n];
            e--;
            if (!e) {
                e = every;
                if ((curry == firsty &amp;&amp; currx == firstx) &amp;&amp; (secx == nextx &amp;&amp; secy == nexty)) {
                    break;
                }
                value = Py_BuildValue("(ii)", nextx-1, nexty-1);
                PyList_Append(plist, value);
                Py_DECREF(value);
            }
            break;
        }
    }
    /* if we are back at the first pixel, and the next one will be the
       second one we visited, we are done */
    if ((curry == firsty &amp;&amp; currx == firstx) &amp;&amp; (secx == nextx &amp;&amp; secy == nexty)) {
        break;
    }

    curry = nexty;
    currx = nextx;
}

return_val = plist;
</snippet></ROW><ROW><id>14223635</id><snippet>__doc__</snippet></ROW><ROW><id>14223635</id><snippet>ctypes</snippet></ROW><ROW><id>14223635</id><snippet>VCS_OpenDevice.__doc__ = 'My docstring'
</snippet></ROW><ROW><id>14223635</id><snippet>__doc__</snippet></ROW><ROW><id>14223635</id><snippet>ctypes</snippet></ROW><ROW><id>14223635</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; libc = cdll.LoadLibrary("libc.dylib") 
&gt;&gt;&gt; libc.time.__doc__ = 'time -- get time of day'
&gt;&gt;&gt; print libc.time.__doc__
time -- get time of day
</snippet></ROW><ROW><id>14223635</id><snippet>In [4]: libc.time?
Type:       _FuncPtr
String Form:&lt;_FuncPtr object at 0x1054b8ef0&gt;
File:       /opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/ctypes/__init__.py
Docstring:  time -- get time of day
</snippet></ROW><ROW><id>14224045</id><snippet>os.mkdir("C:/Users/David/Files/TestFiles2")
</snippet></ROW><ROW><id>14224045</id><snippet>open("C:/Users/David/Files/TestFiles2", "w")
</snippet></ROW><ROW><id>14224045</id><snippet>x</snippet></ROW><ROW><id>14224045</id><snippet>with open(os.path.join("C:/Users/David/Files/TestFiles2", os.path.basename(x)), 'w') as outputFile:
</snippet></ROW><ROW><id>14224045</id><snippet>shutil.move()</snippet></ROW><ROW><id>14224045</id><snippet>if "facebook.com" in content.lower():
     shutil.move(x, "C:/Users/David/Files/TestFiles2")
</snippet></ROW><ROW><id>14224045</id><snippet>def test():
    src = "C:/Users/David/Files/TestFiles"
    dst = "C:/Users/David/Files/TestFiles2"
    os.mkdir(dst)
    for filename in os.listdir(src):
        path = os.path.join(src, filename)
        with open(path, "r") as inputFile:
            content = inputFile.read()
        if "facebook.com" in content.lower():
            shutil.move(path, dst)
</snippet></ROW><ROW><id>14224110</id><snippet>converted = map(tuple, points) # Python 2
converted = list(map(tuple, points)) # or BlackBear's answer for Python 3
converted = [tuple(x) for x in points] # another variation of the same
</snippet></ROW><ROW><id>14224259</id><snippet>wget</snippet></ROW><ROW><id>14224259</id><snippet>import requests

def download_file_from_url(url, file_save_path):
    r = requests.get(url)
    if r.ok: # checks if the download succeeded
        with file(file_save_path, 'w') as f: 
           f.write(r.content)
        return True
    else:
        return r.status_code

download_file_from_url('http://imgs.xkcd.com/comics/tech_support_cheat_sheet.png', 'new_image.png')
# will download image and save to current directory as 'new_image.png'
</snippet></ROW><ROW><id>14224259</id><snippet>pip install requests</snippet></ROW><ROW><id>14224268</id><snippet>set</snippet></ROW><ROW><id>14224268</id><snippet>__hash__</snippet></ROW><ROW><id>14224268</id><snippet>__eq__</snippet></ROW><ROW><id>14224268</id><snippet>__hash__</snippet></ROW><ROW><id>14224268</id><snippet>__eq__</snippet></ROW><ROW><id>14224268</id><snippet>True</snippet></ROW><ROW><id>14224268</id><snippet>__hash__</snippet></ROW><ROW><id>14224268</id><snippet>set</snippet></ROW><ROW><id>14224268</id><snippet>__hash__</snippet></ROW><ROW><id>14224268</id><snippet>In [73]: a = "one"
In [74]: b = "one"
In [75]: c = "two"

In [76]: a.__hash__()
Out[76]: -261223665

In [77]: b.__hash__()
Out[77]: -261223665

In [78]: c.__hash__()
Out[78]: 323309869

In [79]: set([a,b,c])
Out[79]: set(['two', 'one'])
</snippet></ROW><ROW><id>14224268</id><snippet>In [81]: import numpy as np
In [82]: W = np.matrix('1, 1, 1, 1; 1, 1, -1, -1; 1, -1, 2, -2; 1, -1, -2, 2')
In [83]: E = np.matrix('1, 1, 1, 1; 1, 1, -1, -1; 1, -1, 2, -2; 1, -1, -2, 2')

In [84]: W.__hash__()
Out[84]: 4879307

In [85]: E.__hash__()
Out[85]: 4879135
</snippet></ROW><ROW><id>14224268</id><snippet>E</snippet></ROW><ROW><id>14224268</id><snippet>W</snippet></ROW><ROW><id>14224268</id><snippet>W = E</snippet></ROW><ROW><id>14224268</id><snippet>W</snippet></ROW><ROW><id>14224268</id><snippet>E</snippet></ROW><ROW><id>14224268</id><snippet>In [86]: set(['1, 1, 1, 1; 1, 1, -1, -1; 1, -1, 2, -2; 1, -1, -2, 2',
              '1, 1, 1, 1; 1, 1, -1, -1; 1, -1, 2, -2; 1, -1, -2, 2'])
Out[86]: set(['1, 1, 1, 1; 1, 1, -1, -1; 1, -1, 2, -2; 1, -1, -2, 2'])
</snippet></ROW><ROW><id>14224404</id><snippet>class Test():
    def run(self):        
        arr = np.zeros((25,25))
        arr[:]=255
        print arr.dtype
        flatarr = np.reshape(arr,25*25)
        vfunc = np.vectorize(self.func)
        flatres = vfunc(flatarr)
        print flatres.dtype
        shouldbewhite = np.reshape(flatres,(25,25))
        print shouldbewhite.dtype
    def func(self,a):
        return 255
</snippet></ROW><ROW><id>14224404</id><snippet>float64
int32
int32
</snippet></ROW><ROW><id>14224404</id><snippet>vfunc = np.vectorize(self.func,otypes=[np.uint8])
</snippet></ROW><ROW><id>14224404</id><snippet>arr = np.zeros((25,25), dtype='uint8')
</snippet></ROW><ROW><id>14224416</id><snippet>cv2.CV_WINDOW_AUTOSIZE</snippet></ROW><ROW><id>14224416</id><snippet>FULLSIZE</snippet></ROW><ROW><id>14224416</id><snippet>cv2.cv</snippet></ROW><ROW><id>14224416</id><snippet>cv2.setWindowProperty("Image", cv2.WND_PROP_FULLSCREEN, cv2.cv.CV_WINDOW_FULLSCREEN)
</snippet></ROW><ROW><id>14224458</id><snippet>repo</snippet></ROW><ROW><id>14224458</id><snippet>git</snippet></ROW><ROW><id>14224458</id><snippet>repo</snippet></ROW><ROW><id>14224458</id><snippet>repo</snippet></ROW><ROW><id>14224489</id><snippet>sort</snippet></ROW><ROW><id>14224489</id><snippet>df1.sort(axis=1) == df2.sort(axis=1)
</snippet></ROW><ROW><id>14224489</id><snippet>True</snippet></ROW><ROW><id>14224605</id><snippet>dict()</snippet></ROW><ROW><id>14224605</id><snippet>   [
       ["date", "2013-01-08"],
       ["group.groupname", "customerService"],
       ["user.NameSurname", "Romāns Tiščenko"],
       ["forwarding_number", "66055002"],
       ["reciver_number", "66055002"],
       ["CallerNameSurname", false],
       ["alert", "00:00:14"],
       ["connection", "00:00:53"],
       ["call_summ", "00:01:07"]
   ],
   # ... etc.
</snippet></ROW><ROW><id>14224605</id><snippet>data['header'][0]</snippet></ROW><ROW><id>14224605</id><snippet>dict()</snippet></ROW><ROW><id>14224605</id><snippet>rows = data['body']
i = 1
for row in rows:
    x = sheet.row(i)
    y = 0
    for col in headers:
        x.write(y, row.get(col, ''))
        y += 1
    i += 1
</snippet></ROW><ROW><id>14224875</id><snippet>class Item(object):
    def __init__(self, param1):
        # do something with param1

class ItemChild(Item):
    def __init__(self, param1, param2, param3, param4):
        super(ItemChild, self).__init__(param1)
        # do something with params
</snippet></ROW><ROW><id>14224875</id><snippet>Item</snippet></ROW><ROW><id>14224875</id><snippet>object</snippet></ROW><ROW><id>14224875</id><snippet>super()</snippet></ROW><ROW><id>14224875</id><snippet>super()</snippet></ROW><ROW><id>14224875</id><snippet>super().__init__(param1)</snippet></ROW><ROW><id>14224943</id><snippet>__hash__</snippet></ROW><ROW><id>14225031</id><snippet>from multiprocessing import Pool

def connectAndCollect(server):
    c = Connection(server)
    return c.MyData.MyCollection.find_one()

pool = Pool(processes=10)
res = pool.map(connectAndCollect,servers)
map(lambda x: all_data.append(x),res)
pool.close()
</snippet></ROW><ROW><id>14225031</id><snippet>map</snippet></ROW><ROW><id>14225250</id><snippet>with open(inpath, 'r') as infile, open(outpath, 'w') as outfile:
    for line in infile:
        if 'NDC,' in line:
            outfile.write(line)
</snippet></ROW><ROW><id>14225250</id><snippet>'NDC,'</snippet></ROW><ROW><id>14225250</id><snippet>'NDC,'</snippet></ROW><ROW><id>14225250</id><snippet>re</snippet></ROW><ROW><id>14225350</id><snippet>event.unicode</snippet></ROW><ROW><id>14225350</id><snippet>event.unicode</snippet></ROW><ROW><id>14225350</id><snippet>event.key</snippet></ROW><ROW><id>14225350</id><snippet>...
if (event.type==pygame.KEYDOWN):
    if (event.unicode==pygame.K_COLON): #to match a colon
        pass
    elif (event.unicode== (pygame.K_Z | pygame.KMOD_SHIFT)): #to explicitly match a capital Z instead of just a z
       pass
...
</snippet></ROW><ROW><id>14225392</id><snippet>ipList</snippet></ROW><ROW><id>14225392</id><snippet>[u'172.16.60.92', u'172.16.60.89', u'\n              ', u'172.16.60.90', u'172.16.60.91', u'172.16.60.93']
</snippet></ROW><ROW><id>14225392</id><snippet>In [51]: ipList = [u'172.16.60.92', u'172.16.60.89', u'\n              ', u'172.16.60.90', u'172.16.60.91', u'172.16.60.93']

In [52]: ipList = [ip for ip in ipList if ip.strip()]

In [53]: ipList
Out[53]: 
['172.16.60.92',
 '172.16.60.89',
 '172.16.60.90',
 '172.16.60.91',
 '172.16.60.93']
</snippet></ROW><ROW><id>14225392</id><snippet>ip.strip()</snippet></ROW><ROW><id>14225392</id><snippet>if</snippet></ROW><ROW><id>14225392</id><snippet>append</snippet></ROW><ROW><id>14225392</id><snippet>def parseHosts(xmldoc):
  hostsNode = xmldoc.firstChild
  xmlList = hostsNode.getElementsByTagName("ip")

  ipList = []
  for ip in xmlList:
    ipstr = ip.childNodes[0].nodeValue
    if ipstr.strip():
      ipList.append(ipstr)
</snippet></ROW><ROW><id>14225392</id><snippet>ipList</snippet></ROW><ROW><id>14225392</id><snippet>def parseHosts(xmldoc):
  hostsNode = xmldoc.firstChild
  xmlList = hostsNode.getElementsByTagName("ip")
  ipList = [ip.childNodes[0].nodeValue for ip in xmlList
            if ip.childNodes[0].nodeValue.strip()]
</snippet></ROW><ROW><id>14225392</id><snippet>[m.group(0) for l in ipList for m in [regex.search(1)] if m]
</snippet></ROW><ROW><id>14225392</id><snippet>result = []
for l in ipList:
    for m in [regex.search(1)]:
        if m:
            result.append(m.group(0))
</snippet></ROW><ROW><id>14225592</id><snippet>flush</snippet></ROW><ROW><id>14225592</id><snippet>save</snippet></ROW><ROW><id>14225597</id><snippet>&lt;!-- project/templates/base.html --&gt;
&lt;html&gt;
  ...
  &lt;ul&gt;
      {% include 'fragments/own_menu.html' %}
  &lt;/ul&gt;
  ...
&lt;/html&gt;
</snippet></ROW><ROW><id>14225597</id><snippet>fragments/own_menu.html</snippet></ROW><ROW><id>14225597</id><snippet>app1
   templates/
     fragments/
         own_menu.html
</snippet></ROW><ROW><id>14225597</id><snippet>&lt;li&gt;&lt;a href="/app1/" class="home"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/app1/help" class="help"&gt;Help&lt;/a&gt;&lt;/li&gt;
</snippet></ROW><ROW><id>14225597</id><snippet>app2
   templates/
      fragments/
         own_menu.html
</snippet></ROW><ROW><id>14225597</id><snippet>&lt;li&gt;&lt;a href="/app2/" class="home"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/app2/help" class="help"&gt;Help&lt;/a&gt;&lt;/li&gt;
</snippet></ROW><ROW><id>14225664</id><snippet>if re.match(regex, content) is not None:
  blah..
</snippet></ROW><ROW><id>14225664</id><snippet>re.search</snippet></ROW><ROW><id>14225838</id><snippet>ExcelWriter</snippet></ROW><ROW><id>14225838</id><snippet>from pandas import ExcelWriter
# from pandas.io.parsers import ExcelWriter
</snippet></ROW><ROW><id>14225838</id><snippet>save_xls</snippet></ROW><ROW><id>14225838</id><snippet>def save_xls(list_dfs, xls_path):
    writer = ExcelWriter(xls_path)
    for n, df in enumerate(list_dfs):
        df.to_excel(writer,'sheet%s' % n)
    writer.save()
</snippet></ROW><ROW><id>14225856</id><snippet>&gt; $('form#search').serialize()
"q="
</snippet></ROW><ROW><id>14225856</id><snippet>POST</snippet></ROW><ROW><id>14225856</id><snippet>import requests  # Install `requests` if you want to use my example code

session = requests.session()  # So your cookies persist across requests
response = session.post('your_url', data={
    'q': 'search string'
}).text
</snippet></ROW><ROW><id>14226166</id><snippet>localhost</snippet></ROW><ROW><id>14226166</id><snippet>/usr/local/bin/openerp-server --conf /path/to/config_file
</snippet></ROW><ROW><id>14226192</id><snippet>(x &amp;&amp; y) || (x &amp;&amp; z)</snippet></ROW><ROW><id>14226192</id><snippet>x &amp;&amp; (y || z)</snippet></ROW><ROW><id>14226192</id><snippet>if self.name in event and ('AL' in event or 'FH' in event):
    #...
</snippet></ROW><ROW><id>14226251</id><snippet>'(asctime)'</snippet></ROW><ROW><id>14226251</id><snippet>formatTime()</snippet></ROW><ROW><id>14226251</id><snippet>datefmt</snippet></ROW><ROW><id>14226251</id><snippet>Formatter</snippet></ROW><ROW><id>14226251</id><snippet>formatTime</snippet></ROW><ROW><id>14226251</id><snippet>format</snippet></ROW><ROW><id>14226251</id><snippet>datefmt</snippet></ROW><ROW><id>14226251</id><snippet>basicConfig</snippet></ROW><ROW><id>14226251</id><snippet>Formatter</snippet></ROW><ROW><id>14226251</id><snippet>converter</snippet></ROW><ROW><id>14226251</id><snippet>logging.basicConfig(format='%(asctime)s %(message)s',
                    datefmt='%Y-%m-%d %H:%M:%S')
log = logging.getLogger(__name__)
log.error('Out of cheese!')
</snippet></ROW><ROW><id>14226251</id><snippet>2013-01-08 16:11:30 Out of cheese!
</snippet></ROW><ROW><id>14226251</id><snippet>logging.basicConfig(format='%(asctime)-.19s %(message)s')
</snippet></ROW><ROW><id>14226374</id><snippet>&gt;&gt;&gt; class Foo(Base):
...     __tablename__ = 'foo'
...     id = Column(Integer, primary_key=True)
...     bar = Column(Integer)
...
&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; f.bar = "not a number!"
&gt;&gt;&gt; f.bar
'not a number!'
</snippet></ROW><ROW><id>14226374</id><snippet>Integer</snippet></ROW><ROW><id>14226374</id><snippet>Check</snippet></ROW><ROW><id>14226374</id><snippet>class Foo(Base):
    __tablename__ = 'foo'
    id = Column(Integer, primary_key=True)
    bar = Column(Integer)
    __table_args__ = (
        CheckConstraint(bar &gt;= 0, name='check_bar_positive'),
        {})
</snippet></ROW><ROW><id>14226382</id><snippet>types = dict('cat' = CatType, 'dog' = DogType)
newobj = types[type](user = user, cat_id = thing_id)
</snippet></ROW><ROW><id>14226482</id><snippet>hello(i)</snippet></ROW><ROW><id>14226482</id><snippet>Radiobutton</snippet></ROW><ROW><id>14226482</id><snippet>    c.append(Radiobutton(frameData, text=InputBox.get(i), variable=inputVar, value = i, background="grey", command= hello(i)))
</snippet></ROW><ROW><id>14226482</id><snippet>hello</snippet></ROW><ROW><id>14226482</id><snippet>None</snippet></ROW><ROW><id>14226482</id><snippet>command=None</snippet></ROW><ROW><id>14226482</id><snippet>hello</snippet></ROW><ROW><id>14226482</id><snippet>lambda</snippet></ROW><ROW><id>14226482</id><snippet>partial</snippet></ROW><ROW><id>14226482</id><snippet>    c.append(Radiobutton(frameData, text=InputBox.get(i), 
                         variable=inputVar, value = i, background="grey",
                         command=functools.partial(hello, i)))
</snippet></ROW><ROW><id>14226482</id><snippet>partial</snippet></ROW><ROW><id>14226482</id><snippet>lambda</snippet></ROW><ROW><id>14226482</id><snippet>i</snippet></ROW><ROW><id>14226482</id><snippet>i</snippet></ROW><ROW><id>14226482</id><snippet>i</snippet></ROW><ROW><id>14226482</id><snippet>4</snippet></ROW><ROW><id>14226482</id><snippet>lambda x=i: hello(x)</snippet></ROW><ROW><id>14226482</id><snippet>lambda: hello(i)</snippet></ROW><ROW><id>14226482</id><snippet>partial</snippet></ROW><ROW><id>14226524</id><snippet>def addOptions(parser):
    parser.add_option('-b', '--bootcount', type='string', dest='bootcount', default='', help='Number of times to repeat booting and testing, if applicable')
    parser.add_option('-d', '--duration', type='string', dest='duration', default='', help='Number of hours to run the test.  Decimals OK')
</snippet></ROW><ROW><id>14226524</id><snippet>import optparse
def build_parser(parser_options):
    parser = optparse.OptionParser('MyTest Options')
    if parser_options:
        parser_options(parser)
</snippet></ROW><ROW><id>14226524</id><snippet>import file_a
import file_b
file_b.build_parser(file_a.addOptions)
</snippet></ROW><ROW><id>14226781</id><snippet>{"test_id1" : (resultValue, timeChecked)}
</snippet></ROW><ROW><id>14226781</id><snippet>{"test_id1" : {"resultValue": resultValue, "timeChecked" : timeChecked }}
</snippet></ROW><ROW><id>14226906</id><snippet>class myDialog(QtGui.QDialog, Ui_DialogCalibration):
    def __init__(self, parent=None):
        super(myDialog, self).__init__(parent)

        self.setupUi(self)
</snippet></ROW><ROW><id>14226906</id><snippet>Dialog = myDialog(self)
</snippet></ROW><ROW><id>14226906</id><snippet>Dialog.show()</snippet></ROW><ROW><id>14226906</id><snippet>Dialog.exec_()</snippet></ROW><ROW><id>14226917</id><snippet>  import cv2
  image = cv2.imread('imagefile.jpg')
  image = 255 - image
  cv2.imwrite('inverted.jpg')
</snippet></ROW><ROW><id>14227227</id><snippet>temp_fname = "temp_file"
# the next line doesn't work in Python 2.5, 2.6, or 3.0
with open(fullname, "r") as in_file, open(temp_fname, "w") as out_file:
    out_file.write(appendtext)
    for line in in_file:
        out_file.write(line)
os.rename(temp_fname, fullname)
</snippet></ROW><ROW><id>14227227</id><snippet>temp_fname = "temp_file"
with open(temp_fname, "w") as out_file:
    with open(fullname, "r") as in_file:
        out_file.write(appendtext)
        for line in in_file:
            out_file.write(line)
os.rename(temp_fname, fullname)
</snippet></ROW><ROW><id>14227227</id><snippet>"temp_file"</snippet></ROW><ROW><id>14227227</id><snippet>tempfile</snippet></ROW><ROW><id>14227227</id><snippet>tempfile</snippet></ROW><ROW><id>14227227</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>14227227</id><snippet>import fnmatch
import os
import sys
import tempfile

headertext = "# header text\n\n"

def want_this_file(fname):
    for pat in ['*']:
        if fnmatch.fnmatch(fname, pat):
            return True
    return False

def prepend_file(fullname, path):
    # with statement means temp file is written and closed at end of with
    with tempfile.NamedTemporaryFile(dir=path, delete=False) as out_file:
        with open(fullname, "r") as in_file:
                out_file.write(headertext)
                for line in in_file:
                    out_file.write(line)
        # before temp file is closed, get its name
        temp_fname = out_file.name
    # rename temp file to fullname, clobbering original
    os.rename(temp_fname, fullname)


start_directory = sys.argv[1]

for dirpath, dirnames, filenames in os.walk(start_directory):
    for fname in filenames:
        if want_this_file(fname):
            fullname = os.path.join(dirpath, fname)
            prepend_file(fullname, dirpath)
</snippet></ROW><ROW><id>14227227</id><snippet>os.rename()</snippet></ROW><ROW><id>14227227</id><snippet>/tmp</snippet></ROW><ROW><id>14227227</id><snippet>tempfile</snippet></ROW><ROW><id>14227227</id><snippet>import fnmatch
import os
import shutil
import sys
import tempfile

file_patterns_to_match = ['*']

headertext = "# header text\n\n"
# make any newlines in headertext match the system line ending
headertext = headertext.replace('\n', os.linesep)

def want_this_file(fname):
    for pat in file_patterns_to_match:
        if fnmatch.fnmatch(fname, pat):
            return True
    return False

def prepend_file(fullname, path):
    # with statement means temp file is written and closed at end of with
    with tempfile.NamedTemporaryFile(dir=path, delete=False) as out_file:
        # get the name immediately
        temp_fname = out_file.name

        try:
            # use binary mode to avoid newline translations
            with open(fullname, "rb") as in_file:
                out_file.write(headertext)
                shutil.copyfileobj(in_file, out_file)
        except Exception:
            # on any error, clean up temp file and re-raise exception
            try:
                os.remove(temp_fname)
            except Exception:
                print("unable to clean up temp file: " + temp_fname)
                pass
            raise
    # rename temp file to fullname, clobbering original
    os.rename(temp_fname, fullname)


start_directory = sys.argv[1]

for dirpath, dirnames, filenames in os.walk(start_directory):
    for fname in filenames:
        if want_this_file(fname):
            fullname = os.path.join(dirpath, fname)
            prepend_file(fullname, dirpath)
</snippet></ROW><ROW><id>14227229</id><snippet>return switch(b,a)
</snippet></ROW><ROW><id>14227229</id><snippet>switch</snippet></ROW><ROW><id>14227229</id><snippet>None</snippet></ROW><ROW><id>14227373</id><snippet>argparse</snippet></ROW><ROW><id>14227373</id><snippet>import argparse

p = argparse.ArgumentParser(description="My great script")
p.add_argument("sourceDir", type=str, help="source directory")
p.add_argument("destDir", type=str, help="destination directory")
p.add_argument("--match", type=str, dest="match", help="search pattern")

args = p.parse_args()

print args.sourceDir, args.destDir, args.match
</snippet></ROW><ROW><id>14227373</id><snippet>args.match</snippet></ROW><ROW><id>14227373</id><snippet>None</snippet></ROW><ROW><id>14227373</id><snippet>Davids-MacBook-Air:BarNone dgrtwo$ python mycode.py ~/a/ ~/b/
/Users/dgrtwo/a/ /Users/dgrtwo/b/ None
Davids-MacBook-Air:BarNone dgrtwo$ python mycode.py --match "pattern" ~/a/ ~/b/
/Users/dgrtwo/a/ /Users/dgrtwo/b/ pattern
</snippet></ROW><ROW><id>14227373</id><snippet>usage: mycode.py [-h] [--match MATCH] sourceDir destDir
mycode.py: error: too few arguments
</snippet></ROW><ROW><id>14227373</id><snippet>Davids-MacBook-Air:BarNone dgrtwo$ python mycode.py -h
usage: mycode.py [-h] [--match MATCH] sourceDir destDir

My great script

positional arguments:
  sourceDir      source directory
  destDir        destination directory

optional arguments:
  -h, --help     show this help message and exit
  --match MATCH  search pattern
</snippet></ROW><ROW><id>14227399</id><snippet>re.match(pattern, string, flags=0)
</snippet></ROW><ROW><id>14227399</id><snippet>re.match(string, pattern)
</snippet></ROW><ROW><id>14227399</id><snippet> re.match('(")?http(s)?://(.*?)/', ts).group(0)
</snippet></ROW><ROW><id>14227410</id><snippet>mirror</snippet></ROW><ROW><id>14227410</id><snippet>history</snippet></ROW><ROW><id>14227410</id><snippet>history</snippet></ROW><ROW><id>14227495</id><snippet>datetime</snippet></ROW><ROW><id>14227495</id><snippet>mod_hour = datetime.datetime(*mod_time.timetuple()[:4])
</snippet></ROW><ROW><id>14227495</id><snippet>mod_time.timetuple()[:4]</snippet></ROW><ROW><id>14227495</id><snippet>(2013, 1, 8, 21</snippet></ROW><ROW><id>14227495</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>14227495</id><snippet>import collections

by_hour = collections.defaultdict(list)
for f in dir_files:
    t = os.path.getmtime(dir + '/' + f)
    mod_time = datetime.datetime.fromtimestamp(t)
    mod_hour = datetime.datetime(*mod_time.timetuple()[:4])
    # for example, (2013, 1, 8, 21)
    by_hour[mod_hour].append(f)
</snippet></ROW><ROW><id>14227532</id><snippet>t = ["a", "b", "c"]
s = "%s.%s.%s" % tuple(t)
</snippet></ROW><ROW><id>14227532</id><snippet>'.'.join(t)
</snippet></ROW><ROW><id>14227532</id><snippet>"abc" + "cde"
</snippet></ROW><ROW><id>14227627</id><snippet>In [1]: import json

In [2]: s = """\
   ...: {
   ...:   "A": {
   ...:     "B": {
   ...:       "unknown": {
   ...:         "1": "F",
   ...:         "maindata": [
   ...:           {
   ...:             "Info": "TEXT"
   ...:           }
   ...:         ]
   ...:       }
   ...:     }
   ...:   }
   ...: }"""

In [3]: data = json.loads(s)

In [4]: data['A']['B']['unknown']['maindata'][0]['Info']
Out[4]: u'TEXT'
</snippet></ROW><ROW><id>14227627</id><snippet>maindata</snippet></ROW><ROW><id>14227627</id><snippet>[0]</snippet></ROW><ROW><id>14227627</id><snippet>Info</snippet></ROW><ROW><id>14227627</id><snippet>TEXT</snippet></ROW><ROW><id>14227627</id><snippet>unknown</snippet></ROW><ROW><id>14227627</id><snippet>my_variable = 'some_name'
data['A']['B'][my_variable]['maindata'][0]['Info']
</snippet></ROW><ROW><id>14227627</id><snippet>unknown</snippet></ROW><ROW><id>14227627</id><snippet>data['A']['B'].values()[0]['maindata'][0]['Info']
</snippet></ROW><ROW><id>14227627</id><snippet>values()</snippet></ROW><ROW><id>14227627</id><snippet>[{u'1': u'F', u'maindata': [{u'Info': u'TEXT'}]}]
</snippet></ROW><ROW><id>14227627</id><snippet>[0]</snippet></ROW><ROW><id>14227702</id><snippet>import tornado.ioloop
import tornado.web

class UserHandler(tornado.web.RequestHandler):
    def get(self, user_id):
        self.set_status(401)
        self.set_header('WWW-Authenticate', 'Basic realm=Users')

application = tornado.web.Application([
    (r"/users/(\w+)", UserHandler),
],debug=True)

if __name__ == "__main__":
    application.listen(8888)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>14228206</id><snippet>set MSSdk=1
set DISTUTILS_USE_SDK=1 
setenv /Release
</snippet></ROW><ROW><id>14228450</id><snippet>Config</snippet></ROW><ROW><id>14228450</id><snippet>from_object</snippet></ROW><ROW><id>14228450</id><snippet># class Config(dict):
# ...
    for key in dir(obj):
        if key.isupper():
            self[key] = getattr(obj, key)
</snippet></ROW><ROW><id>14228450</id><snippet>&gt;&gt;&gt; from flask import config
&gt;&gt;&gt; class X(object):
...     REGULAR = True
...     ignored = "not uppercase"
...     def __init__(self):
...         self.not_used = "because lowercase"
...         self.OK = True
...     
...     @property
...     def UPPER_PROP(self):
...         return True
...     
...     @property
...     def MIXED_case(self):
...         return "wont work"
... 
&gt;&gt;&gt; x = X()
&gt;&gt;&gt; c = config.Config(None)
&gt;&gt;&gt; c.from_object(x)
&gt;&gt;&gt; c
&lt;Config {'REGULAR': True, 'OK': True, 'UPPER_PROP': True}&gt;
</snippet></ROW><ROW><id>14228450</id><snippet>Config</snippet></ROW><ROW><id>14228589</id><snippet>if 'Bob' in text or 'Hello' in text:
    print 'IF'
else:
    print 'ELSE'
</snippet></ROW><ROW><id>14228589</id><snippet>if ('Bob') or ('Hello' in text):
</snippet></ROW><ROW><id>14228589</id><snippet>'Bob'</snippet></ROW><ROW><id>14228589</id><snippet>True</snippet></ROW><ROW><id>14228589</id><snippet>'IF'</snippet></ROW><ROW><id>14228589</id><snippet>str</snippet></ROW><ROW><id>14228589</id><snippet>string</snippet></ROW><ROW><id>14228589</id><snippet>str()</snippet></ROW><ROW><id>14228589</id><snippet>string</snippet></ROW><ROW><id>14228870</id><snippet>bk-tree</snippet></ROW><ROW><id>14228870</id><snippet>def __init__(self, items, distance, usegc=False):
</snippet></ROW><ROW><id>14228870</id><snippet>def __init__(self, items, distance, threshold=0, usegc=False):
</snippet></ROW><ROW><id>14228870</id><snippet>        if el not in self.nodes: # do not add duplicates
</snippet></ROW><ROW><id>14228870</id><snippet>        if (el not in self.nodes and
            (threshold == None or len(self.find(el, threshold)) == 0)):
</snippet></ROW><ROW><id>14228870</id><snippet>from Levenshtein import distance
from bktree import BKtree
def remove_duplicates(lst, threshold):
    tr = BKtree(iter(lst), distance, threshold)
    return tr.nodes.keys()
</snippet></ROW><ROW><id>14228870</id><snippet>/usr/share/dict/words</snippet></ROW><ROW><id>14228870</id><snippet>import random
import time
from Levenshtein import distance
from bktree import BKtree

with open("/usr/share/dict/words") as inf:
    word_list = [l[:-1] for l in inf]

def remove_duplicates(lst, threshold):
    tr = BKtree(iter(lst), distance, threshold)
    return tr.nodes.keys()

def time_remove_duplicates(n, threshold):
    """Test using n words"""
    nwords = random.sample(word_list, n)
    t = time.time()
    newlst = remove_duplicates(nwords, threshold)
    return len(newlst), time.time() - t

ns = range(1000, 16000, 2000)
results = [time_remove_duplicates(n, 3) for n in ns]
lengths, timings = zip(*results)

from matplotlib import pyplot as plt

plt.plot(ns, timings)
plt.xlabel("Number of strings")
plt.ylabel("Time (s)")
plt.savefig("number_vs_time.pdf")
</snippet></ROW><ROW><id>14228870</id><snippet>n log n</snippet></ROW><ROW><id>14229152</id><snippet>real    0m2.038s
user    0m2.009s
sys     0m0.024s
</snippet></ROW><ROW><id>14229152</id><snippet>#include &lt;regex&gt;
#include &lt;vector&gt;
#include &lt;string&gt;

std::vector&lt;std::string&gt; split(const std::string &amp;s, const std::regex &amp;r)
{
    return {
        std::sregex_token_iterator(s.begin(), s.end(), r, -1),
        std::sregex_token_iterator()
    };
}

int main()
{
    const std::regex r(" +");
    for(auto i=0; i &lt; 1000000; ++i)
       split("a b c", r);
    return 0;
}
</snippet></ROW><ROW><id>14229152</id><snippet>real    0m5.786s
user    0m5.779s
sys     0m0.005s
</snippet></ROW><ROW><id>14229152</id><snippet>#include &lt;regex&gt;
#include &lt;vector&gt;
#include &lt;string&gt;

void split(const std::string &amp;s, const std::regex &amp;r, std::vector&lt;std::string&gt; &amp;v)
{
    auto rit = std::sregex_token_iterator(s.begin(), s.end(), r, -1);
    auto rend = std::sregex_token_iterator();
    v.clear();
    while(rit != rend)
    {
        v.push_back(*rit);
        ++rit;
    }
}

int main()
{
    const std::regex r(" +");
    std::vector&lt;std::string&gt; v;
    for(auto i=0; i &lt; 1000000; ++i)
       split("a b c", r, v);
    return 0;
}
</snippet></ROW><ROW><id>14229152</id><snippet>real    0m3.034s
user    0m3.029s
sys     0m0.004s
</snippet></ROW><ROW><id>14229152</id><snippet>clear()</snippet></ROW><ROW><id>14229152</id><snippet>std::string</snippet></ROW><ROW><id>14229152</id><snippet>#include &lt;regex&gt;
#include &lt;vector&gt;
#include &lt;string&gt;

void split(const char *s, const std::regex &amp;r, std::vector&lt;std::string&gt; &amp;v)
{
    auto rit = std::cregex_token_iterator(s, s + std::strlen(s), r, -1);
    auto rend = std::cregex_token_iterator();
    v.clear();
    while(rit != rend)
    {
        v.push_back(*rit);
        ++rit;
    }
}
</snippet></ROW><ROW><id>14229152</id><snippet>real    0m2.509s
user    0m2.503s
sys     0m0.004s
</snippet></ROW><ROW><id>14229152</id><snippet>std::vector</snippet></ROW><ROW><id>14229152</id><snippet>const char *</snippet></ROW><ROW><id>14229152</id><snippet>s</snippet></ROW><ROW><id>14229152</id><snippet>string_ref</snippet></ROW><ROW><id>14229152</id><snippet>#include &lt;regex&gt;
#include &lt;vector&gt;
#include &lt;string&gt;

void split(const std::string &amp;s, const std::regex &amp;r, std::vector&lt;std::string&gt; &amp;v)
{
    auto rit = std::cregex_token_iterator(&amp;*s.begin(), &amp;*s.end(), r, -1);
    auto rend = std::cregex_token_iterator();
    v.clear();
    while(rit != rend)
    {
        v.push_back(*rit);
        ++rit;
    }
}

int main()
{
    const std::regex r(" +");
    std::vector&lt;std::string&gt; v;
    for(auto i=0; i &lt; 1000000; ++i)
       split("a b c", r, v); // the constant string("a b c") should be optimized
                             // by the compiler. I got the same performance as
                             // if it was an object outside the loop
    return 0;
}
</snippet></ROW><ROW><id>14229152</id><snippet>boost::regex</snippet></ROW><ROW><id>14229152</id><snippet>real    0m1.284s
user    0m1.278s
sys     0m0.005s
</snippet></ROW><ROW><id>14229152</id><snippet>boost::regex</snippet></ROW><ROW><id>14229152</id><snippet>std::regex</snippet></ROW><ROW><id>14229152</id><snippet>std::vector&lt;std::string&gt; &amp;v</snippet></ROW><ROW><id>14229152</id><snippet>#include &lt;regex&gt;
#include &lt;vector&gt;
#include &lt;string&gt;

template&lt;typename Iterator&gt; class intrusive_substring
{
private:
    Iterator begin_, end_;

public:
    intrusive_substring(Iterator begin, Iterator end) : begin_(begin), end_(end) {}

    Iterator begin() {return begin_;}
    Iterator end() {return end_;}
};

using intrusive_char_substring = intrusive_substring&lt;const char *&gt;;

void split(const std::string &amp;s, const std::regex &amp;r, std::vector&lt;intrusive_char_substring&gt; &amp;v)
{
    auto rit = std::cregex_token_iterator(&amp;*s.begin(), &amp;*s.end(), r, -1);
    auto rend = std::cregex_token_iterator();
    v.clear(); // This can potentially be optimized away by the compiler because
               // the intrusive_char_substring destructor does nothing, so
               // resetting the internal size is the only thing to be done.
               // Formerly allocated memory is maintained.
    while(rit != rend)
    {
        v.emplace_back(rit-&gt;first, rit-&gt;second);
        ++rit;
    }
}

int main()
{
    const std::regex r(" +");
    std::vector&lt;intrusive_char_substring&gt; v;
    for(auto i=0; i &lt; 1000000; ++i)
       split("a b c", r, v);

    return 0;
}
</snippet></ROW><ROW><id>14229152</id><snippet>#include &lt;regex&gt;
#include &lt;vector&gt;
#include &lt;string&gt;
#include &lt;string_ref&gt;

void split(const std::string &amp;s, const std::regex &amp;r, std::vector&lt;std::string_ref&gt; &amp;v)
{
    auto rit = std::cregex_token_iterator(&amp;*s.begin(), &amp;*s.end(), r, -1);
    auto rend = std::cregex_token_iterator();
    v.clear();
    while(rit != rend)
    {
        v.emplace_back(rit-&gt;first, rit-&gt;length());
        ++rit;
    }
}

int main()
{
    const std::regex r(" +");
    std::vector&lt;std::string_ref&gt; v;
    for(auto i=0; i &lt; 1000000; ++i)
       split("a b c", r, v);

    return 0;
}
</snippet></ROW><ROW><id>14229152</id><snippet>string_ref</snippet></ROW><ROW><id>14229152</id><snippet>string</snippet></ROW><ROW><id>14229152</id><snippet>split</snippet></ROW><ROW><id>14229662</id><snippet>&gt;&gt;&gt; if '':
...     print 'empty'
...
&gt;&gt;&gt; if 'I entered something':
...     print 'not empty'
...
not empty
&gt;&gt;&gt; raw_input('just hit enter: ')  # just hinting 'enter' results in the empty string
just hit enter:
''
</snippet></ROW><ROW><id>14229703</id><snippet>\r</snippet></ROW><ROW><id>14229703</id><snippet>\b</snippet></ROW><ROW><id>14229703</id><snippet>sys.stdout.write()</snippet></ROW><ROW><id>14229703</id><snippet>\b</snippet></ROW><ROW><id>14229703</id><snippet>import sys
import time
sys.stdout.write('Some text [\\]')
for i in ['-', '/', '|', '\\'] * 10:
    sys.stdout.write('\b\b\b[{0}]'.format(i))
    sys.stdout.flush()
    time.sleep(1)
</snippet></ROW><ROW><id>14229703</id><snippet>\r</snippet></ROW><ROW><id>14229703</id><snippet>import sys
import time
for i in ['-', '/', '|', '\\'] * 10:
    sys.stdout.write('\rSome text [{0}]'.format(i))
    sys.stdout.flush()
    time.sleep(1)
</snippet></ROW><ROW><id>14229781</id><snippet>re.split()</snippet></ROW><ROW><id>14229781</id><snippet>filter(None,re.split(r'\\x0\d',s))</snippet></ROW><ROW><id>14230169</id><snippet>from datetime import datetime
val = '2013-01-09 06:13:51,464'.split(',')[0]  # Remove milliseconds
date_object = datetime.strptime(val, '%Y-%m-%d %H:%M:%S')
</snippet></ROW><ROW><id>14230307</id><snippet>True</snippet></ROW><ROW><id>14230307</id><snippet>False</snippet></ROW><ROW><id>14230307</id><snippet>1 and 2 and 3</snippet></ROW><ROW><id>14230307</id><snippet>True and True and True</snippet></ROW><ROW><id>14230307</id><snippet>True</snippet></ROW><ROW><id>14230307</id><snippet>True</snippet></ROW><ROW><id>14230307</id><snippet>True</snippet></ROW><ROW><id>14230402</id><snippet>#lis = some list with NoneType's
filter(None, lis)
</snippet></ROW><ROW><id>14230537</id><snippet>program.txt</snippet></ROW><ROW><id>14230537</id><snippet>/*
 * This is a test, script written
 * This is a comment line
 * Multi-line comment
 * Last comment
 *
 */

some code

/*
 * This is a comment line
 * And should 
 *     not be removed
 *
 */

more code
</snippet></ROW><ROW><id>14230537</id><snippet>needle</snippet></ROW><ROW><id>14230537</id><snippet>import re

def find_and_remove(haystack, needle):
    pattern = re.compile(r'/\*.*?'+ needle + '.*?\*/', re.DOTALL)
    return re.sub(pattern, "", haystack)

# assuming your program is in a file called program.txt
program = open("program.txt", "r").read()

print find_and_remove(program, r"This is a test, script written")
</snippet></ROW><ROW><id>14230537</id><snippet>some code

/*
 * This is a comment line
 * And should 
 * not be removed
 *
 */

more code
</snippet></ROW><ROW><id>14230537</id><snippet>for path,dirs,files in os.walk(sys.argv[1]):
    for fname in files:
        for pat in ['*.cpp','*.c','*.h','*.txt']:
            if fnmatch.fnmatch(fname,pat):
                fullname = os.path.join(path,fname)
                # put all the text into f and read and replace...
                f = open(fullname).read()
                result = find_and_remove(f, r"This is a test, script written")

                new_name = fullname + ".new"
                # After testing, then replace newname with fullname in the 
                # next line in order to replace the original file.
                handle = open(new_name, 'w')
                handle.write(result)
                handle.close()
</snippet></ROW><ROW><id>14230537</id><snippet>needle</snippet></ROW><ROW><id>14230537</id><snippet>().</snippet></ROW><ROW><id>14230537</id><snippet>(any text)</snippet></ROW><ROW><id>14230537</id><snippet>needle</snippet></ROW><ROW><id>14230537</id><snippet>\(any text\)</snippet></ROW><ROW><id>14230710</id><snippet>attribute</snippet></ROW><ROW><id>14230710</id><snippet>property</snippet></ROW><ROW><id>14230710</id><snippet>self</snippet></ROW><ROW><id>14230710</id><snippet>property</snippet></ROW><ROW><id>14230710</id><snippet>class PermissionChecker(object):
    @property
    def permissions(self):
        return [self.is_superuser(), self.is_god()]

    def is_superuser(self):
        # use self.property just like self.name...
        return True

    def is_god(self):
        return True
</snippet></ROW><ROW><id>14230710</id><snippet>property</snippet></ROW><ROW><id>14230710</id><snippet>@</snippet></ROW><ROW><id>14230710</id><snippet>&gt;&gt;&gt; pcheck = PermissionChecker()
&gt;&gt;&gt; pcheck.permissions
[True, True]
</snippet></ROW><ROW><id>14230710</id><snippet>permissions</snippet></ROW><ROW><id>14230710</id><snippet>.permissions</snippet></ROW><ROW><id>14230710</id><snippet>__init__</snippet></ROW><ROW><id>14230710</id><snippet>class PermissionChecker(object):
    def __init__(self):
        self.permissions = [self.is_superuser(), self.is_god()]

    def is_superuser(self):
        # use self.property just like self.name...
        return True

    def is_god(self):
        return True
</snippet></ROW><ROW><id>14230715</id><snippet>pip</snippet></ROW><ROW><id>14230715</id><snippet>git clone https://github.com/numpy/numpy.git
python3 setup.py build
python3 setup.py install
</snippet></ROW><ROW><id>14230715</id><snippet>brew switch python3 &lt;version&gt;
</snippet></ROW><ROW><id>14230915</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>14230915</id><snippet>mynamedtuple = collections.namedtuple('mynamedtuple', ('val1', 'val2', 'val3', 'box'))

somenamedtuple = mynamedtuple('a1', 'a2', 'a3', ['d1', 'e1', 'f1'])
somenamedtuple.box  # returns ['d1', 'e1', 'f1']
</snippet></ROW><ROW><id>14230915</id><snippet>a = [mynamedtuple(*el) for el in a]
</snippet></ROW><ROW><id>14231051</id><snippet>main.py</snippet></ROW><ROW><id>14231051</id><snippet>from evaluate import actual_things
def run():
    ...
    actual_things()
    ...

if __name__ == '__main__':
    init()
    load_from_config()
    run()
</snippet></ROW><ROW><id>14231051</id><snippet>utilities.py</snippet></ROW><ROW><id>14231051</id><snippet>utils.py</snippet></ROW><ROW><id>14231514</id><snippet>FG</snippet></ROW><ROW><id>14231514</id><snippet>slow_cmd</snippet></ROW><ROW><id>14231514</id><snippet>lines = []
p = slow_cmd.popen()
while p.poll() is None:
    line = p.stdout.readline()
    lines.append(line)
    print line
if p.returncode != 0:
    print "see log file..."
</snippet></ROW><ROW><id>14231514</id><snippet>FG</snippet></ROW><ROW><id>14231514</id><snippet>TEE</snippet></ROW><ROW><id>14231514</id><snippet>select</snippet></ROW><ROW><id>14231514</id><snippet>class TEE(ExecutionModifier):
    def __init__(self, retcode = 0, dupstream = sys.stdout):
        ExecutionModifier.__init__(self, retcode)
        self.dupstream = dupstream
    def __rand__(self, cmd):
        p = cmd.popen()
        stdout = []
        stderr = []
        while p.poll():
            # note: you should probably select() on the two pipes, or make the pipes nonblocking,
            # otherwise readline would block
            so = p.stdout.readline()
            se = p.stderr.readline()
            if so:
                stdout.append(so)
                dupstream.write(so)
            if se:
                stderr.append(se)
                dupstream.write(se)
        stdout = "".join(stdout)
        stderr = "".join(stderr)
        if p.returncode != self.retcode:
            raise ProcessExecutionError(p.argv, p.returncode, stdout, stderr)
        return stdout, stderr

try:
    stdout, stderr = slow_cmd &amp; TEE()
except ProcessExecutionError as e:
    pass # find the log file, etc.
</snippet></ROW><ROW><id>14231696</id><snippet>import fractions
print fractions.gcd(4,8)
&gt;&gt;&gt; 4
</snippet></ROW><ROW><id>14231696</id><snippet>def gcd(a, b):
    """Calculate the Greatest Common Divisor of a and b.

    Unless b==0, the result will have the same sign as b (so that when
    b is divided by it, the result comes out positive).
    """
    while b:
        a, b = b, a%b
    return a
</snippet></ROW><ROW><id>14231797</id><snippet>results = [pool.apply_async(run_test_n, t) for t in tasks]</snippet></ROW><ROW><id>14231797</id><snippet>results = [pool.apply_async(run_test_n, (t, )) for t in tasks]</snippet></ROW><ROW><id>14232097</id><snippet>RandomForestRegressor</snippet></ROW><ROW><id>14232097</id><snippet>In [3]: rf = RandomForestRegressor(n_estimators=10, min_samples_split=2, n_jobs=-1)

In [4]: rf.fit([[1,2,3],[4,5,6]],[-1,1])
Out[4]: 
RandomForestRegressor(bootstrap=True, compute_importances=False,
           criterion='mse', max_depth=None, max_features='auto',
           min_density=0.1, min_samples_leaf=1, min_samples_split=2,
           n_estimators=10, n_jobs=-1, oob_score=False,
           random_state=&lt;mtrand.RandomState object at 0x7fd894d59528&gt;,
           verbose=0)

In [5]: rf.predict([1,2,3])
Out[5]: array([-0.6])

In [6]: rf.predict([[1,2,3],[4,5,6]])
Out[6]: array([-0.6,  0.4])
</snippet></ROW><ROW><id>14232097</id><snippet>(-0.6)[1]</snippet></ROW><ROW><id>14232285</id><snippet>self.update_count()
</snippet></ROW><ROW><id>14232285</id><snippet>self.bttn["command"] = self.update_count()
</snippet></ROW><ROW><id>14232285</id><snippet>self.bttn</snippet></ROW><ROW><id>14232285</id><snippet>self.bttn["command"] = self.update_count
</snippet></ROW><ROW><id>14232285</id><snippet>self.bttn</snippet></ROW><ROW><id>14232285</id><snippet>def print_decimal(n):
    print(n)

def print_hex(n):
    print(hex(n))

# in Python 2.x, use raw_input
hex_output_wanted = input("do you want hex output? ")

if hex_output_wanted.lower() in ('y', 'yes'):
    printint = print_hex
else:
    printint = print_decimal

# the variable printint now holds a function that can be used to print an integer
printint(42)
</snippet></ROW><ROW><id>14232871</id><snippet>a = ['Hello'+b for b in a]
</snippet></ROW><ROW><id>14232871</id><snippet>a = ['Hello{}'.format(b) for b in a]
</snippet></ROW><ROW><id>14232871</id><snippet>a = ["Hi", "Sam", "How", 1, {'x': 123}, None]
a = ['Hello{}'.format(b) for b in a]
# ['HelloHi', 'HelloSam', 'HelloHow', 'Hello1', "Hello{'x': 123}", 'HelloNone']
</snippet></ROW><ROW><id>14232952</id><snippet>results = set()    
for node in nodes:
    results.update(foo(node))
</snippet></ROW><ROW><id>14232952</id><snippet>results = set.union(*[foo(node) for node in nodes])
</snippet></ROW><ROW><id>14232952</id><snippet>nodes</snippet></ROW><ROW><id>14232952</id><snippet>results = set.union(set(), *[foo(node) for node in nodes])
</snippet></ROW><ROW><id>14233050</id><snippet>//text[@link="no"]
</snippet></ROW><ROW><id>14233118</id><snippet>B</snippet></ROW><ROW><id>14233118</id><snippet>A</snippet></ROW><ROW><id>14233118</id><snippet>copy()</snippet></ROW><ROW><id>14233118</id><snippet>B = A[:]  #makes a copy of only the first level of the mutable
B = copy(A)  #same as above, returns a 'shallow copy' of A
B = deepcopy(A)  #copies every element in the mutable, on every level
</snippet></ROW><ROW><id>14233118</id><snippet>copy</snippet></ROW><ROW><id>14233118</id><snippet>deepcopy</snippet></ROW><ROW><id>14233118</id><snippet>copy</snippet></ROW><ROW><id>14233458</id><snippet>ffile = blobstore.BlobReader(blob_key)</snippet></ROW><ROW><id>14233458</id><snippet>if ffile and "read" in dir( ffile )</snippet></ROW><ROW><id>14233544</id><snippet>left,right = a.split('=', 1)
answer = left.split('::')[1:] + [right]
</snippet></ROW><ROW><id>14233610</id><snippet>print word[::-1]
</snippet></ROW><ROW><id>14234100</id><snippet>opt_param = request.args.get("somethin")
if opt_param is None:
    print "Argumenet not provided"
</snippet></ROW><ROW><id>14234173</id><snippet>list1 = {}</snippet></ROW><ROW><id>14234173</id><snippet>print("param = " + list1[param] + ", value = " + value)
</snippet></ROW><ROW><id>14234173</id><snippet>list1[param]</snippet></ROW><ROW><id>14234173</id><snippet>value</snippet></ROW><ROW><id>14234173</id><snippet>list1[param]</snippet></ROW><ROW><id>14234173</id><snippet>print(list1)
</snippet></ROW><ROW><id>14234374</id><snippet>.SetMarginLeft(width)</snippet></ROW><ROW><id>14234374</id><snippet>import wx
import wx.stc as stc

class MainWindow(wx.Frame):
    def __init__(self, *args, **kwargs):
        wx.Frame.__init__(self, *args, **kwargs)

        self.panel = wx.Panel(self)

        self.text = stc.StyledTextCtrl(self.panel)
        self.text.SetWindowStyle(self.text.GetWindowStyle() | wx.DOUBLE_BORDER)
        self.text.StyleSetSpec(stc.STC_STYLE_DEFAULT, "size:15,face:Courier New")
        self.text.SetWrapMode(stc.STC_WRAP_WORD)
        self.text.SetMarginLeft(50)

        self.menu = wx.Menu()
        self.menu.Append(wx.ID_ABOUT, "&amp;About", "Information about this program")
        self.menu_bar = wx.MenuBar()
        self.menu_bar.Append(self.menu, "&amp;File")
        self.SetMenuBar(self.menu_bar)

        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.text, 1, wx.ALL | wx.EXPAND, 5)

        self.panel.SetSizerAndFit(self.sizer)

        self.text.Bind(stc.EVT_STC_CHANGE, self.OnChange)
        self.Show()

        self.text.SetText("Line!\n"*98)

    def OnChange(self, e):
        lines = self.text.GetLineCount()
        width = self.text.TextWidth(stc.STC_STYLE_LINENUMBER, str(lines)+" ")
        self.text.SetMarginWidth(0, width)


if __name__ == "__main__":
    app = wx.App(False)
    win = MainWindow(None)
    app.MainLoop()
</snippet></ROW><ROW><id>14234400</id><snippet>.git/config</snippet></ROW><ROW><id>14234400</id><snippet>git aws.push</snippet></ROW><ROW><id>14234400</id><snippet>git aws.remote</snippet></ROW><ROW><id>14234400</id><snippet>git aws.push</snippet></ROW><ROW><id>14234400</id><snippet>&lt;api&gt;/&lt;app&gt;/&lt;commitid&gt;(/&lt;envname&gt;)</snippet></ROW><ROW><id>14234400</id><snippet>&lt;app&gt;</snippet></ROW><ROW><id>14234400</id><snippet>&lt;commitid&gt;</snippet></ROW><ROW><id>14234400</id><snippet>&lt;envname&gt;</snippet></ROW><ROW><id>14234400</id><snippet>pom.xml</snippet></ROW><ROW><id>14234430</id><snippet>UNIQUE</snippet></ROW><ROW><id>14234430</id><snippet>class SomeTrait(Base):
    __tablename__ = 'sometrait'
    id = Column(Integer, primary_key=True)
    detail1 = Column(String)
    detail2 = Column(String)
    __table_args__ = (
        UniqueConstraint('detail1', 'detail2'),
    )
</snippet></ROW><ROW><id>14234611</id><snippet>X_train</snippet></ROW><ROW><id>14234611</id><snippet>X_test</snippet></ROW><ROW><id>14234611</id><snippet>X_train</snippet></ROW><ROW><id>14234611</id><snippet>X_test</snippet></ROW><ROW><id>14234611</id><snippet>&gt;&gt;&gt; print repr(X_train)
&gt;&gt;&gt; print repr(X_test)
</snippet></ROW><ROW><id>14234611</id><snippet>&gt;&gt;&gt; from sklearn.datasets import fetch_20newsgroups
&gt;&gt;&gt; from sklearn.feature_extraction.text import TfidfVectorizer
&gt;&gt;&gt; twenty = fetch_20newsgroups()
&gt;&gt;&gt; %time X = TfidfVectorizer().fit_transform(twenty.data)
CPU times: user 10.74 s, sys: 0.32 s, total: 11.06 s
Wall time: 11.04 s

&gt;&gt;&gt; X
&lt;11314x56436 sparse matrix of type '&lt;type 'numpy.float64'&gt;'
    with 1713894 stored elements in Compressed Sparse Row format&gt;
&gt;&gt;&gt; from sklearn.linear_model import SGDClassifier

&gt;&gt;&gt; %time clf = SGDClassifier().fit(X, twenty.target)
CPU times: user 0.50 s, sys: 0.01 s, total: 0.51 s
Wall time: 0.51 s

&gt;&gt;&gt; %time clf.predict(X)
CPU times: user 0.10 s, sys: 0.00 s, total: 0.11 s
Wall time: 0.11 s
array([7, 4, 4, ..., 3, 1, 8])
</snippet></ROW><ROW><id>14234705</id><snippet>utf8</snippet></ROW><ROW><id>14234705</id><snippet>0xFFFF</snippet></ROW><ROW><id>14234705</id><snippet>0x1F3C9</snippet></ROW><ROW><id>14234705</id><snippet>0xFFFF</snippet></ROW><ROW><id>14234705</id><snippet>utf8</snippet></ROW><ROW><id>14234705</id><snippet>utf8</snippet></ROW><ROW><id>14234705</id><snippet>utf8mb4</snippet></ROW><ROW><id>14234705</id><snippet>utf8mb4</snippet></ROW><ROW><id>14234705</id><snippet>utf8</snippet></ROW><ROW><id>14234705</id><snippet>utf8mb4</snippet></ROW><ROW><id>14235005</id><snippet>CACHE_TYPE = 'simple'</snippet></ROW><ROW><id>14235005</id><snippet>SimpleCache</snippet></ROW><ROW><id>14235005</id><snippet>memcached</snippet></ROW><ROW><id>14235005</id><snippet>redis</snippet></ROW><ROW><id>14235005</id><snippet>filesystem</snippet></ROW><ROW><id>14235270</id><snippet>pyexiv2.py</snippet></ROW><ROW><id>14235410</id><snippet>int(level)</snippet></ROW><ROW><id>14235410</id><snippet>if</snippet></ROW><ROW><id>14235410</id><snippet>level = int(level)
</snippet></ROW><ROW><id>14235410</id><snippet>in</snippet></ROW><ROW><id>14235410</id><snippet>if level in (1,2,3):
   print("level is ...")
else:
   print("pick again!")
   #other code ...
</snippet></ROW><ROW><id>14235507</id><snippet>with open('/Users/jessieinchauspe/Dropbox/Smesh/TMT/zipf.csv') as text:
    print ','.join('"{0}"'.format(word.strip()) for word in text)
</snippet></ROW><ROW><id>14235507</id><snippet>\n</snippet></ROW><ROW><id>14235507</id><snippet>.strip()</snippet></ROW><ROW><id>14235507</id><snippet>.format()</snippet></ROW><ROW><id>14235507</id><snippet>'word'</snippet></ROW><ROW><id>14235507</id><snippet>'"word"'</snippet></ROW><ROW><id>14235507</id><snippet>','.join()</snippet></ROW><ROW><id>14235631</id><snippet>dis</snippet></ROW><ROW><id>14235631</id><snippet>&gt;&gt;&gt; dis.dis(method1)
  2           0 LOAD_CLOSURE             0 (el)
              3 BUILD_TUPLE              1
              6 LOAD_CONST               1 (&lt;code object &lt;lambda&gt; at 0x102000230, file "&lt;stdin&gt;", line 2&gt;)
              9 MAKE_CLOSURE             0
             12 STORE_FAST               2 (p)

  3          15 BUILD_LIST               0
             18 LOAD_FAST                0 (xs)
             21 GET_ITER            
        &gt;&gt;   22 FOR_ITER                24 (to 49)
             25 STORE_FAST               3 (x)
             28 LOAD_FAST                2 (p)
             31 LOAD_FAST                3 (x)
             34 CALL_FUNCTION            1
             37 POP_JUMP_IF_FALSE       22
             40 LOAD_FAST                3 (x)
             43 LIST_APPEND              2
             46 JUMP_ABSOLUTE           22
        &gt;&gt;   49 RETURN_VALUE        
&gt;&gt;&gt; dis.dis(method2)
  2           0 BUILD_LIST               0
              3 LOAD_FAST                0 (xs)
              6 GET_ITER            
        &gt;&gt;    7 FOR_ITER                33 (to 43)
             10 STORE_FAST               2 (x)
             13 LOAD_CLOSURE             0 (el)
             16 BUILD_TUPLE              1
             19 LOAD_CONST               1 (&lt;code object &lt;lambda&gt; at 0x101fd37b0, file "&lt;stdin&gt;", line 2&gt;)
             22 MAKE_CLOSURE             0
             25 LOAD_FAST                2 (x)
             28 CALL_FUNCTION            1
             31 POP_JUMP_IF_FALSE        7
             34 LOAD_FAST                2 (x)
             37 LIST_APPEND              2
             40 JUMP_ABSOLUTE            7
        &gt;&gt;   43 RETURN_VALUE        
</snippet></ROW><ROW><id>14235631</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>14235631</id><snippet>MAKE_CLOSURE</snippet></ROW><ROW><id>14235631</id><snippet>method1</snippet></ROW><ROW><id>14235631</id><snippet>method2</snippet></ROW><ROW><id>14235631</id><snippet>FOR_ITER</snippet></ROW><ROW><id>14235631</id><snippet>JUMP_ABSOLUTE</snippet></ROW><ROW><id>14235631</id><snippet>LOAD_FAST</snippet></ROW><ROW><id>14235631</id><snippet>p</snippet></ROW><ROW><id>14235631</id><snippet>method1</snippet></ROW><ROW><id>14235682</id><snippet>str1.split('\t', n)[:-1]
</snippet></ROW><ROW><id>14235682</id><snippet>str.split</snippet></ROW><ROW><id>14235682</id><snippet>a = 'foo,bar,baz,hello,world'
print(a.split(',', 2))
# ['foo', 'bar', 'baz,hello,world']  #only splits string twice
print(a.split(',', 2)[:-1])  #removes last element (leftover)
# ['foo', 'bar']
</snippet></ROW><ROW><id>14235744</id><snippet>dtype</snippet></ROW><ROW><id>14235744</id><snippet>astype</snippet></ROW><ROW><id>14235744</id><snippet>In [11]: a = a.astype(object)

In [12]: a['a'] = b

In [13]: a
Out[13]: 
a    [lol, lol, lol]
b                NaN
c                NaN
</snippet></ROW><ROW><id>14235744</id><snippet>astype</snippet></ROW><ROW><id>14235744</id><snippet>a</snippet></ROW><ROW><id>14235744</id><snippet>dtype</snippet></ROW><ROW><id>14235744</id><snippet>In [14]: a = Series(None, index=['a','b','c'], dtype=object)
</snippet></ROW><ROW><id>14235744</id><snippet>float64</snippet></ROW><ROW><id>14235744</id><snippet>Series</snippet></ROW><ROW><id>14235744</id><snippet>a['a'] = 'lol'</snippet></ROW><ROW><id>14235744</id><snippet>ValueError</snippet></ROW><ROW><id>14235744</id><snippet>In [21]: a = Series(None, index=['a','b','c'])

In [22]: a.dtype
Out[22]: dtype('float64')
</snippet></ROW><ROW><id>14235957</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Norm = namedtuple('Norm', 'mu variance')
&gt;&gt;&gt; def pickle_norm(n):
...     return pickle.dumps(Norm(*n.args))
... 
&gt;&gt;&gt; def unpickle_norm(s):
...     return scipy.stats.norm(*pickle.loads(s))
... 
&gt;&gt;&gt; s = pickle_norm(scipy.stats.norm(5, 10))
&gt;&gt;&gt; d = unpickle_norm(s)
</snippet></ROW><ROW><id>14236217</id><snippet>listobject.c</snippet></ROW><ROW><id>14236239</id><snippet>DataFrames</snippet></ROW><ROW><id>14236239</id><snippet>DataFrame</snippet></ROW><ROW><id>14236673</id><snippet>requests</snippet></ROW><ROW><id>14236673</id><snippet>ConnectionError</snippet></ROW><ROW><id>14236673</id><snippet>MaxRetryError</snippet></ROW><ROW><id>14236673</id><snippet>except MaxRetryError, e:
    if not self.config.get('safe_mode', False):
        raise ConnectionError(e)
</snippet></ROW><ROW><id>14236673</id><snippet>HTTPError</snippet></ROW><ROW><id>14236673</id><snippet>ConnectionError</snippet></ROW><ROW><id>14236673</id><snippet>except requests.ConnectionError</snippet></ROW><ROW><id>14236673</id><snippet>from requests import ConnectionError, HTTPError</snippet></ROW><ROW><id>14236755</id><snippet>ancestor::*[@transform]
</snippet></ROW><ROW><id>14236755</id><snippet>transform</snippet></ROW><ROW><id>14236755</id><snippet>transform</snippet></ROW><ROW><id>14236755</id><snippet>ancestor::*/@transform
</snippet></ROW><ROW><id>14236755</id><snippet>transform</snippet></ROW><ROW><id>14236755</id><snippet>ancestor::*/@transform[starts-with(normalize-space(@transform),'translate(')]
</snippet></ROW><ROW><id>14236846</id><snippet>&gt;&gt;&gt; foo = '{a:1,b:2}'
&gt;&gt;&gt; dict(e.split(":") for e in foo.translate(None,"{}").split(","))
{'a': '1', 'b': '2'}
</snippet></ROW><ROW><id>14236846</id><snippet>&gt;&gt;&gt; {k: int(v) for e in foo.translate(None,"{}").split(",") 
     for k, v in [e.split(":")]}
{'a': 1, 'b': 2}
</snippet></ROW><ROW><id>14236903</id><snippet>OneOrMore</snippet></ROW><ROW><id>14236903</id><snippet>ParserElement.setDefaultWhitespaceChars(' \t')
</snippet></ROW><ROW><id>14236903</id><snippet>['A', 'valid', 'message', 'has', 'been', 'received', 'from', 'a', 'peer']</snippet></ROW><ROW><id>14236903</id><snippet>originalTextFor</snippet></ROW><ROW><id>14237133</id><snippet>unicode</snippet></ROW><ROW><id>14237133</id><snippet>localizable</snippet></ROW><ROW><id>14237133</id><snippet>if language == "hun":
    LOGIN_LABEL_USERNAME_STR                    = u'Felhasználó'
    LOGIN_LABEL_PASSWORD_STR                    = u'Jelszó'
</snippet></ROW><ROW><id>14237531</id><snippet>import psutil
my_process = psutil.Process(os.getpid())
parent = my_process.parent
print "Parent process name: " + parent.name
</snippet></ROW><ROW><id>14237531</id><snippet>psutil</snippet></ROW><ROW><id>14237531</id><snippet>psutil</snippet></ROW><ROW><id>14237562</id><snippet>(?&lt;=\d)(?=(\d{2}){0,2}\d{3}(\d{7})*(?!\d))
</snippet></ROW><ROW><id>14237562</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; inp = ["1" + "0"*i for i in range(20)]
&gt;&gt;&gt; [re.sub(r"(?&lt;=\d)(?=(\d{2}){0,2}\d{3}(\d{7})*(?!\d))", ",", i) 
     for i in inp]
['1', '10', '100', '1,000', '10,000', '1,00,000', '10,00,000', '1,00,00,000', 
 '10,00,00,000', '100,00,00,000', '1,000,00,00,000', '10,000,00,00,000', 
 '1,00,000,00,00,000', '10,00,000,00,00,000', '1,00,00,000,00,00,000', 
 '10,00,00,000,00,00,000', '100,00,00,000,00,00,000', 
 '1,000,00,00,000,00,00,000', '10,000,00,00,000,00,00,000',
 '1,00,000,00,00,000,00,00,000']
</snippet></ROW><ROW><id>14237562</id><snippet>result = re.sub(
    r"""(?x)       # Enable verbose mode (comments)
    (?&lt;=\d)        # Assert that we're not at the start of the number.
    (?=            # Assert that it's possible to match:
     (\d{2}){0,2}  # 0, 2 or 4 digits,
     \d{3}         # followed by 3 digits,
     (\d{7})*      # followed by 0, 7, 14, 21 ... digits,
     (?!\d)        # and no more digits after that.
    )              # End of lookahead assertion.""", 
    ",", subject)
</snippet></ROW><ROW><id>14237565</id><snippet>len(str1.split('\tCart')[0].split())
</snippet></ROW><ROW><id>14237565</id><snippet>\tCart</snippet></ROW><ROW><id>14237565</id><snippet>\tCart</snippet></ROW><ROW><id>14237565</id><snippet>\t</snippet></ROW><ROW><id>14237714</id><snippet>matrix</snippet></ROW><ROW><id>14237714</id><snippet>[n, :, :]</snippet></ROW><ROW><id>14237714</id><snippet>n</snippet></ROW><ROW><id>14237714</id><snippet>matrix</snippet></ROW><ROW><id>14237714</id><snippet>*</snippet></ROW><ROW><id>14237714</id><snippet>np.dot</snippet></ROW><ROW><id>14237714</id><snippet>matrix</snippet></ROW><ROW><id>14237714</id><snippet>ndarray</snippet></ROW><ROW><id>14237714</id><snippet>def interpolate360(d, p)
    p = np.array(p)
    angles = np.arange(0, 2 * np.pi, d * np.pi / 180)
    sin = np.sin(angles)
    cos = np.cos(angles)

    rot_matrices = np.empty((angles.shape[0], 2, 2))
    rot_matrices[..., 0, 0] = cos
    rot_matrices[..., 0, 1] = -sin
    rot_matrices[..., 1, 0] = sin
    rot_matrices[..., 1, 1] = cos

    return np.dot(rot_matrices, p)
</snippet></ROW><ROW><id>14237714</id><snippet>&gt;&gt;&gt; interpolate360(90, [0, 1])
array([[  0.00000000e+00,   1.00000000e+00],
       [ -1.00000000e+00,   6.12323400e-17],
       [ -1.22464680e-16,  -1.00000000e+00],
       [  1.00000000e+00,  -1.83697020e-16]])
&gt;&gt;&gt; interpolate360(90, [[0], [1]])
array([[[  0.00000000e+00],
        [  1.00000000e+00]],

       [[ -1.00000000e+00],
        [  6.12323400e-17]],

       [[ -1.22464680e-16],
        [ -1.00000000e+00]],

       [[  1.00000000e+00],
        [ -1.83697020e-16]]])
&gt;&gt;&gt; interpolate360(90, [[1, 0], [0, 1]])
array([[[  1.00000000e+00,   0.00000000e+00],
        [  0.00000000e+00,   1.00000000e+00]],

       [[  6.12323400e-17,  -1.00000000e+00],
        [  1.00000000e+00,   6.12323400e-17]],

       [[ -1.00000000e+00,  -1.22464680e-16],
        [  1.22464680e-16,  -1.00000000e+00]],

       [[ -1.83697020e-16,   1.00000000e+00],
        [ -1.00000000e+00,  -1.83697020e-16]]])
</snippet></ROW><ROW><id>14237824</id><snippet>list_a = [la for la in list_a if la[:1] not in list_b]
</snippet></ROW><ROW><id>14237824</id><snippet>la[:1]</snippet></ROW><ROW><id>14237824</id><snippet>la[0]</snippet></ROW><ROW><id>14237824</id><snippet>list_b</snippet></ROW><ROW><id>14237824</id><snippet>set_b = set(list_b)
</snippet></ROW><ROW><id>14237949</id><snippet>gcd</snippet></ROW><ROW><id>14237949</id><snippet>a/b + c/d</snippet></ROW><ROW><id>14237949</id><snippet>(ad+bc)/bd</snippet></ROW><ROW><id>14237949</id><snippet>c</snippet></ROW><ROW><id>14237949</id><snippet>(ad+b)/bd</snippet></ROW><ROW><id>14237949</id><snippet>a</snippet></ROW><ROW><id>14237949</id><snippet>b</snippet></ROW><ROW><id>14237949</id><snippet>d</snippet></ROW><ROW><id>14237949</id><snippet>n</snippet></ROW><ROW><id>14237949</id><snippet>a</snippet></ROW><ROW><id>14237949</id><snippet>1/1</snippet></ROW><ROW><id>14237949</id><snippet>b</snippet></ROW><ROW><id>14237949</id><snippet>d</snippet></ROW><ROW><id>14237949</id><snippet>n</snippet></ROW><ROW><id>14237949</id><snippet>1/2</snippet></ROW><ROW><id>14237949</id><snippet>1/n</snippet></ROW><ROW><id>14237949</id><snippet>a</snippet></ROW><ROW><id>14237949</id><snippet>a*d + b</snippet></ROW><ROW><id>14237949</id><snippet>b</snippet></ROW><ROW><id>14237949</id><snippet>b*d</snippet></ROW><ROW><id>14237949</id><snippet>x</snippet></ROW><ROW><id>14237949</id><snippet>gcd(a,b)</snippet></ROW><ROW><id>14237949</id><snippet>a</snippet></ROW><ROW><id>14237949</id><snippet>a/x</snippet></ROW><ROW><id>14237949</id><snippet>b</snippet></ROW><ROW><id>14237949</id><snippet>b/x</snippet></ROW><ROW><id>14237949</id><snippet>a</snippet></ROW><ROW><id>14237949</id><snippet>b</snippet></ROW><ROW><id>14238229</id><snippet>doc</snippet></ROW><ROW><id>14238229</id><snippet>for word in doc.Words:
    print word
</snippet></ROW><ROW><id>14238229</id><snippet>word</snippet></ROW><ROW><id>14238229</id><snippet>Word</snippet></ROW><ROW><id>14238229</id><snippet>for word in doc.Words:
    print word.Style
</snippet></ROW><ROW><id>14238229</id><snippet>Heading 1
Heading 1
Heading 1
Heading 1
Heading 1
Normal
Normal
Normal
Normal
Normal
</snippet></ROW><ROW><id>14238229</id><snippet>itertools.groupby</snippet></ROW><ROW><id>14238229</id><snippet>str()</snippet></ROW><ROW><id>14238229</id><snippet>word.Style</snippet></ROW><ROW><id>14238229</id><snippet>from itertools import groupby
import win32com.client as win32

# All the same as yours
word = win32.Dispatch("Word.Application")
word.Visible = 0
word.Documents.Open("testdoc.doc")
doc = word.ActiveDocument

# Here we use itertools.groupby (without sorting anything) to
# find groups of words that share the same heading (note it picks
# up newlines). The tricky/confusing thing here is that you can't
# just group on the Style itself - you have to group on the str(). 
# There was some other interesting behavior, but I have zero 
# experience with COMObjects so I'll leave it there :)
# All of these comments for two lines of code :)
for heading, grp_wrds in groupby(doc.Words, key=lambda x: str(x.Style)):
  print heading, ''.join(str(word) for word in grp_wrds)
</snippet></ROW><ROW><id>14238229</id><snippet>Heading 1 Here is some text

Normal 
No header
</snippet></ROW><ROW><id>14238229</id><snippet>join</snippet></ROW><ROW><id>14238229</id><snippet>Heading 1 ['Here ', 'is ', 'some ', 'text', '\r']
Normal ['\r', 'No ', 'header', '\r', '\r']
</snippet></ROW><ROW><id>14238291</id><snippet>classC</snippet></ROW><ROW><id>14238291</id><snippet>classA</snippet></ROW><ROW><id>14238291</id><snippet>class = type('classname', (superclass_1, superclass_2, superclass_3), said_dict})</snippet></ROW><ROW><id>14238291</id><snippet>class classA:
    pass
class classB(object):
    def __init__(self):
        self.b = 3
class classC(classB):
    def __init__(self):
        super(classC, self).__init__()
        self.c = 4
classA.classB = classB
classB.classC = classC
</snippet></ROW><ROW><id>14238352</id><snippet>|</snippet></ROW><ROW><id>14238352</id><snippet>set()</snippet></ROW><ROW><id>14238352</id><snippet>def get_tenants_or_johns(house):
    johns = Person.objects.filter(name='John')
    tenants = house.tenants.all()
    return johns | tenants
</snippet></ROW><ROW><id>14238621</id><snippet>json_docs = json.dumps(list(result), default=json_util.default, sort_keys=True, indent=4)
</snippet></ROW><ROW><id>14238839</id><snippet>def setEnvironment():
""" GrGenSignature:  setEnvironment(): boolean     """

import sys
import os

# Asking your computer for its name
computer_name = os.getenv("COMPUTERNAME")   

# Define path for PC1. That's where your modules are.
# Make sure to use two backslashes!
if computer_name == "PC1":
    source_path = "D:\\path\\to\\your\\project\\source" 

# Add src folder to python enironment
sys.path += [ os.path.join(source_path) ]


# For those who want some info during the transformation
print(("----------- Setting the environment for your project -----------"))
print("This is computer:" + computer_name)
print("Source path: " + str(source_path))
print("----------------------------------------------------------------------")
</snippet></ROW><ROW><id>14238839</id><snippet>import myHelper
reload(myHelper)
</snippet></ROW><ROW><id>14240038</id><snippet>settings_example.py</snippet></ROW><ROW><id>14240038</id><snippet>AUTH_USER_MODEL = 'users.User'</snippet></ROW><ROW><id>14240038</id><snippet>menu.bookmark</snippet></ROW><ROW><id>14240038</id><snippet>django.contrib.auth.User</snippet></ROW><ROW><id>14240038</id><snippet>AUTH_USER_MODEL</snippet></ROW><ROW><id>14241195</id><snippet>dict</snippet></ROW><ROW><id>14241195</id><snippet>fruits = {k:[] for k in names}
</snippet></ROW><ROW><id>14241195</id><snippet>fruits['apple']</snippet></ROW><ROW><id>14241258</id><snippet>exec_</snippet></ROW><ROW><id>14241258</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtCore, QtGui

class myDialog(QtGui.QDialog):
    def __init__(self, parent=None):
        super(myDialog, self).__init__(parent)

        self.dialog = None

        self.buttonShow = QtGui.QPushButton(self)
        self.buttonShow.setText("Show Dialog")
        self.buttonShow.clicked.connect(self.on_buttonShow_clicked)

        self.buttonHide = QtGui.QPushButton(self)
        self.buttonHide.setText("Close")
        self.buttonHide.clicked.connect(self.on_buttonHide_clicked)

        self.layout = QtGui.QVBoxLayout(self)
        self.layout.addWidget(self.buttonShow)
        self.layout.addWidget(self.buttonHide)

    @QtCore.pyqtSlot()
    def on_buttonHide_clicked(self):
        self.accept()

    @QtCore.pyqtSlot()
    def on_buttonShow_clicked(self):
        self.dialog = myDialog(self)
        self.dialog.exec_()

class myWindow(QtGui.QWidget):  
    def __init__(self, parent=None):
        super(myWindow, self).__init__(parent)

        self.buttonShow = QtGui.QPushButton(self)
        self.buttonShow.setText("Show Dialog")
        self.buttonShow.clicked.connect(self.on_buttonShow_clicked)

        self.layout = QtGui.QVBoxLayout(self)
        self.layout.addWidget(self.buttonShow)

        self.dialog = myDialog(self)

    @QtCore.pyqtSlot()
    def on_buttonHide_clicked(self):
        self.dialog.accept()

    @QtCore.pyqtSlot()
    def on_buttonShow_clicked(self):
        self.dialog.exec_()

if __name__ == "__main__":
    import sys

    app = QtGui.QApplication(sys.argv)
    app.setApplicationName('myWindow')

    main = myWindow()
    main.show()

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14241436</id><snippet>price = 0
for key, value in data.items():
    if key.startswith(u'sku') and isinstance(value, dict): 
        price += value.get(u'e', 0)
</snippet></ROW><ROW><id>14241436</id><snippet>.get()</snippet></ROW><ROW><id>14241653</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b.append(4)
&gt;&gt;&gt; a
[1, 2, 3, 4]
</snippet></ROW><ROW><id>14241653</id><snippet>&gt;&gt;&gt; c = list(a)
&gt;&gt;&gt; c.append(5)
&gt;&gt;&gt; c
[1, 2, 3, 4, 5]
&gt;&gt;&gt; a
[1, 2, 3, 4]
</snippet></ROW><ROW><id>14241653</id><snippet>&gt;&gt;&gt; c = a[:]
</snippet></ROW><ROW><id>14241881</id><snippet>./manage.py syncdb</snippet></ROW><ROW><id>14241881</id><snippet>'NAME': '~/my_test_db.db',
</snippet></ROW><ROW><id>14241881</id><snippet>settings.py</snippet></ROW><ROW><id>14241881</id><snippet>from os import path

SETTINGS_ROOT = path.dirname(path.realpath(__file__)) # Folder where settings.py is
PROJECT_ROOT = path.normpath(path.join(SETTINGS_ROOT, '..')) # Django 1.4 project structure

...

    'NAME': path.join(PROJECT_ROOT, 'project.db'),
</snippet></ROW><ROW><id>14241881</id><snippet>'ENGINE': 'django.db.backends.sqlite3', 'sqlite3'
</snippet></ROW><ROW><id>14241881</id><snippet>'ENGINE': 'django.db.backends.sqlite3','
</snippet></ROW><ROW><id>14241932</id><snippet>def my_func(context, data):
    try:
        reference, saved = my_func.cache
    except AttributeError:
        reference, saved = None, None
    computed = saved if reference == context else foo(context)
    my_func.cache = context, computed
    return bar(computed, data)
</snippet></ROW><ROW><id>14242058</id><snippet>super()</snippet></ROW><ROW><id>14242058</id><snippet>super(FullTime, self).__init__(name)
</snippet></ROW><ROW><id>14242058</id><snippet>super()</snippet></ROW><ROW><id>14242058</id><snippet>Employee</snippet></ROW><ROW><id>14242058</id><snippet>object.__init__()</snippet></ROW><ROW><id>14242058</id><snippet>super()</snippet></ROW><ROW><id>14242163</id><snippet>--system-site-packages</snippet></ROW><ROW><id>14242169</id><snippet>difflib</snippet></ROW><ROW><id>14242169</id><snippet>from difflib import SequenceMatcher

def merge_sequences(seq1,seq2):
    sm=SequenceMatcher(a=seq1,b=seq2)
    res = []
    for (op, start1, end1, start2, end2) in sm.get_opcodes():
        if op == 'equal' or op=='delete':
            #This range appears in both sequences, or only in the first one.
            res += seq1[start1:end1]
        elif op == 'insert':
            #This range appears in only the second sequence.
            res += seq2[start2:end2]
        elif op == 'replace':
            #There are different ranges in each sequence - add both.
            res += seq1[start1:end1]
            res += seq2[start2:end2]
    return res
</snippet></ROW><ROW><id>14242169</id><snippet>&gt;&gt;&gt; keys1 = ['A', 'B', 'C', 'D', 'E',           'H', 'I']
&gt;&gt;&gt; keys2 = ['A', 'B',           'E', 'F', 'G', 'H',      'J', 'K']
&gt;&gt;&gt; merge_sequences(keys1, keys2)
['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K']
</snippet></ROW><ROW><id>14242169</id><snippet>&gt;&gt;&gt; merge_sequences(keys2, keys1)
['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'J', 'K', 'I']
</snippet></ROW><ROW><id>14242363</id><snippet>request</snippet></ROW><ROW><id>14242363</id><snippet>__init__</snippet></ROW><ROW><id>14242363</id><snippet>my_form.request = request</snippet></ROW><ROW><id>14242363</id><snippet>validate_name</snippet></ROW><ROW><id>14242363</id><snippet>request</snippet></ROW><ROW><id>14242363</id><snippet>self.request</snippet></ROW><ROW><id>14242397</id><snippet>strace</snippet></ROW><ROW><id>14242397</id><snippet>_psycopg.cpython-32mu.so</snippet></ROW><ROW><id>14242397</id><snippet>open("/home/chris/.virtualenvs/python3env/lib/python3.2/site-packages/psycopg2/_psycopg.cpython-32mu.so", O_RDONLY|O_CLOEXEC) = 8
</snippet></ROW><ROW><id>14242397</id><snippet>psycopg2._psycopg.so</snippet></ROW><ROW><id>14242397</id><snippet>open("/path/to/psycopg2._psycopg.so", O_RDONLY|O_CLOEXEC) = 3
</snippet></ROW><ROW><id>14242397</id><snippet>md5sum</snippet></ROW><ROW><id>14242397</id><snippet>dist</snippet></ROW><ROW><id>14242401</id><snippet>time.time()</snippet></ROW><ROW><id>14242401</id><snippet>T</snippet></ROW><ROW><id>14242401</id><snippet>time.time()</snippet></ROW><ROW><id>14242401</id><snippet>time.time() - T</snippet></ROW><ROW><id>14242401</id><snippet>X</snippet></ROW><ROW><id>14242469</id><snippet>sys.path.append('/path/to')
import lib
</snippet></ROW><ROW><id>14243024</id><snippet>fromstring</snippet></ROW><ROW><id>14243024</id><snippet>XML</snippet></ROW><ROW><id>14243024</id><snippet>##
# Parses an XML document from a string constant.  Same as {@link #XML}.
#
# @def fromstring(text)
# @param source A string containing XML data.
# @return An Element instance.
# @defreturn Element

fromstring = XML
</snippet></ROW><ROW><id>14243024</id><snippet>tostring</snippet></ROW><ROW><id>14243340</id><snippet>for i in range(list.getLength()):
    node = list.item(i)
    if node != None and node.getNodeName() == "book":
        children = node.getChildNodes()
        for j in range(children.getLength()):
            print "Looking for J K. Rowling in book"
            child = children.item(j)
            if  child.getNodeName() == "author" and child.getTextContent() == "J K. Rowling":
                print "************"
                print "Found!!!!!"
                print child.getNodeName()
                print node.getTextContent()
                node1= node.getParentNode().removeChild(child.getParentNode())
</snippet></ROW><ROW><id>14243344</id><snippet>graph_sort = sorted(graph.iteritems(), key=lambda x: x[0][0])
</snippet></ROW><ROW><id>14243344</id><snippet>def angle(x):
   key, value = x
   source, destination = key
   return &lt;insert angle calculation here&gt;

graph_sort = sorted(graph.iteritems(), key=angle)
</snippet></ROW><ROW><id>14243344</id><snippet>class Graph(object):
    def __init__(self, source, destination, weight, angle):
        self.source = source
        self.destination = destination
        self.weight = weight
        self.angle = angle
</snippet></ROW><ROW><id>14243646</id><snippet>    s = self.lib.openSession(self.slot, PyKCS11.CKF_RW_SESSION)
    s.login(user_pin)
    Engine.load_dynamic()
</snippet></ROW><ROW><id>14243646</id><snippet>    a.finish()
    Engine.cleanup()        
    s.logout()
    s.closeAllSessions()
</snippet></ROW><ROW><id>14243646</id><snippet>def closeAllSessions(self):
    """
    C_CloseAllSessions
    """
    rv = self.lib.C_CloseAllSessions(self.slot)
    if rv != CKR_OK:
        raise PyKCS11Error(rv)
</snippet></ROW><ROW><id>14243877</id><snippet>xk</snippet></ROW><ROW><id>14243877</id><snippet>resid</snippet></ROW><ROW><id>14243877</id><snippet>cg</snippet></ROW><ROW><id>14243877</id><snippet>inspect</snippet></ROW><ROW><id>14243877</id><snippet>import inspect
import numpy as np
import scipy as sp
import scipy.sparse as sparse
import scipy.sparse.linalg as splinalg
import random

def report(xk):
    frame = inspect.currentframe().f_back
    print(frame.f_locals['resid'])

N = 200
A = sparse.lil_matrix( (N, N) )
for _ in xrange(N):
    A[random.randint(0, N-1), random.randint(0, N-1)] = random.randint(1, 100)

b = np.random.randint(0, N-1, size = N)
x, info = splinalg.cg(A, b, callback = report)
</snippet></ROW><ROW><id>14243915</id><snippet>socket</snippet></ROW><ROW><id>14243915</id><snippet>INADDR_ANY</snippet></ROW><ROW><id>14243915</id><snippet>socket</snippet></ROW><ROW><id>14243949</id><snippet>if monsterChoice == "Goblin":
    Monster = Goblin()
elif monsterChoice == "Troll":
    Monster = Troll()
elif monsterChoice == "Orc":
    Monster = Orc()
</snippet></ROW><ROW><id>14243949</id><snippet>Monster = DefaultRace
if monsterChoice == "Goblin":
    Monster = Goblin()
elif monsterChoice == "Troll":
    Monster = Troll()
elif monsterChoice == "Orc":
    Monster = Orc()
</snippet></ROW><ROW><id>14243949</id><snippet>while True:
    monsterChoice = input("What kind of monster do you want to fight? (Goblin, Troll, Orc)? ")
    if monsterChoice in ["Goblin","Troll","Orc"]:
        break
    else:
        print "Unrecognized race requested, please select one of Goblin, Troll, Orc."
</snippet></ROW><ROW><id>14244293</id><snippet>#Returns a set of matches from the given list. Its a tuple, containing
#the match location of both the Sequence followed by the size
matches = SequenceMatcher(None, a , b).get_matching_blocks()[:-1]
#Now its straight forward, just extract the info and represent in the manner
#that suits you
[a[e.a: e.a + e.size] for e in matches]
[[1, 2], [5, 6]]
</snippet></ROW><ROW><id>14244382</id><snippet>Py_DECREF(args);</snippet></ROW><ROW><id>14244382</id><snippet>Py_DECREF(arg);</snippet></ROW><ROW><id>14244382</id><snippet>arg</snippet></ROW><ROW><id>14244382</id><snippet>Py_DECREF(args)</snippet></ROW><ROW><id>14244649</id><snippet>jpype</snippet></ROW><ROW><id>14244649</id><snippet>from jpype import *

jvm = None

def start_jpype():
    global jvm
    if (jvm is None):
        cpopt="-Djava.class.path={cp}".format(cp=classpath)
        startJVM(jvmlib,"-ea",cpopt)
        jvm="started"
</snippet></ROW><ROW><id>14245059</id><snippet>rjust</snippet></ROW><ROW><id>14245059</id><snippet>''.join</snippet></ROW><ROW><id>14245059</id><snippet>''.join(elem.rjust(8) for elem in (i,j))
</snippet></ROW><ROW><id>14245059</id><snippet>def join_line(line_iter):
    """
    Take a iterable containing strings and right justify each 
    at 8 spaces before joining
    """
    return ''.join(elem.rjust(8) for elem in line_iter)

with open('output','w') as f:
    f.writelines((join_line(row)+'\n') for row in csv_file)
</snippet></ROW><ROW><id>14245130</id><snippet>Project.cpp</snippet></ROW><ROW><id>14245130</id><snippet>int *myArr;</snippet></ROW><ROW><id>14245130</id><snippet>Project.h</snippet></ROW><ROW><id>14245130</id><snippet>Project.cpp</snippet></ROW><ROW><id>14245130</id><snippet>Project.cpp</snippet></ROW><ROW><id>14245130</id><snippet>extern</snippet></ROW><ROW><id>14245130</id><snippet>Project.cpp</snippet></ROW><ROW><id>14245130</id><snippet>Project.cpp</snippet></ROW><ROW><id>14245130</id><snippet>extern</snippet></ROW><ROW><id>14245130</id><snippet>Project.cpp</snippet></ROW><ROW><id>14245130</id><snippet>cdef extern from "project.h"</snippet></ROW><ROW><id>14245130</id><snippet>.h</snippet></ROW><ROW><id>14245130</id><snippet>cdef extern from "project_extras.h"</snippet></ROW><ROW><id>14245130</id><snippet>cdef extern</snippet></ROW><ROW><id>14245130</id><snippet>cdef extern from</snippet></ROW><ROW><id>14245130</id><snippet>int *</snippet></ROW><ROW><id>14245130</id><snippet>int []</snippet></ROW><ROW><id>14245130</id><snippet>cdef extern</snippet></ROW><ROW><id>14245134</id><snippet>try/except</snippet></ROW><ROW><id>14245134</id><snippet>ValueError</snippet></ROW><ROW><id>14245134</id><snippet>my_date</snippet></ROW><ROW><id>14245134</id><snippet>try/except</snippet></ROW><ROW><id>14245134</id><snippet>ValueError</snippet></ROW><ROW><id>14245134</id><snippet>from datetime import datetime

DATE_FORMATS = ['%m/%d/%Y %I:%M:%S %p', '%Y/%m/%d %H:%M:%S', '%d/%m/%Y %H:%M', '%m/%d/%Y', '%Y/%m/%d']
test_date = '2012/1/1 12:32:11'

for date_format in DATE_FORMATS:
    try:
        my_date = datetime.strptime(test_date, date_format)
    except ValueError:
        pass
    else:
      break
else:
  my_date = None

print my_date # 2012-01-01 12:32:11
print type(my_date) # &lt;type 'datetime.datetime'&gt;
</snippet></ROW><ROW><id>14245252</id><snippet>stdout</snippet></ROW><ROW><id>14245252</id><snippet>sys.__stdout__</snippet></ROW><ROW><id>14245293</id><snippet>from scipy import interpolate
tck,u=interpolate.splprep([x,y],s=0.0)
x_i,y_i= interpolate.splev(np.linspace(0,1,100),tck)
</snippet></ROW><ROW><id>14245311</id><snippet>unicodedata.category</snippet></ROW><ROW><id>14245311</id><snippet>Zs</snippet></ROW><ROW><id>14245311</id><snippet>&gt;&gt;&gt; for c in xrange(sys.maxunicode+1):
...     u = unichr(c)
...     if unicodedata.category(u) == 'Zs':
...         sys.stdout.write("U+{:04X} {}\n".format(c, unicodedata.name(u)))
... 
U+0020 SPACE
U+00A0 NO-BREAK SPACE
U+1680 OGHAM SPACE MARK
U+180E MONGOLIAN VOWEL SEPARATOR
U+2000 EN QUAD
U+2001 EM QUAD
U+2002 EN SPACE
U+2003 EM SPACE
U+2004 THREE-PER-EM SPACE
U+2005 FOUR-PER-EM SPACE
U+2006 SIX-PER-EM SPACE
U+2007 FIGURE SPACE
U+2008 PUNCTUATION SPACE
U+2009 THIN SPACE
U+200A HAIR SPACE
U+202F NARROW NO-BREAK SPACE
U+205F MEDIUM MATHEMATICAL SPACE
U+3000 IDEOGRAPHIC SPACE
</snippet></ROW><ROW><id>14245311</id><snippet>Zl</snippet></ROW><ROW><id>14245311</id><snippet>Zp</snippet></ROW><ROW><id>14245311</id><snippet>U+2028 LINE SEPARATOR
U+2029 PARAGRAPH SEPARATOR
</snippet></ROW><ROW><id>14245311</id><snippet>Cc</snippet></ROW><ROW><id>14245311</id><snippet>U+0009 CHARACTER TABULATION  ('\t')
U+000A LINE FEED (LF)        ('\n')
U+000B LINE TABULATION       ('\v')
U+000C FORM FEED (FF)        ('\r')
U+000D CARRIAGE RETURN (CR)  ('\f')
</snippet></ROW><ROW><id>14245311</id><snippet>Cc</snippet></ROW><ROW><id>14245311</id><snippet>U+0085 NEXT LINE</snippet></ROW><ROW><id>14245311</id><snippet>U+2026 HORIZONTAL ELLIPSIS</snippet></ROW><ROW><id>14245421</id><snippet>statement = "SELECT * FROM tab WHERE obj IN ({0})".format(', '.join(['?' * len(list_of_vars)]))
c.execute(statement, list_of_vars)
</snippet></ROW><ROW><id>14245421</id><snippet>list_of_vars</snippet></ROW><ROW><id>14245421</id><snippet>', '.join()</snippet></ROW><ROW><id>14245421</id><snippet>?</snippet></ROW><ROW><id>14245421</id><snippet>.format()</snippet></ROW><ROW><id>14245451</id><snippet>leeway = 1.10

XX = X.reshape((1, X.size))
dX = np.abs(XX - XX.T).reshape((1, X.size ** 2))
dxs = dX[np.where(np.logical_and(dX &gt; expected_distance / leeway,
                                 dX &lt; expected_distance * leeway))]
dx = dxs.mean()

YY = Y.reshape((1, Y.size))
dY = np.abs(YY - YY.T).reshape((1, Y.size ** 2))
dys = dY[np.where(np.logical_and(dY &gt; expected_distance / leeway,
                                 dY &lt; expected_distance * leeway))]
dy = dys.mean()
</snippet></ROW><ROW><id>14245451</id><snippet>Ndx = np.array([np.arange(grid_size[0])]) * dx
x_offsets = XX - Ndx.T
x_offset = np.median(x_offsets)

Ndy = np.array([np.arange(grid_size[1])]) * dy
y_offsets = YY - Ndy.T
y_offset = np.median(y_offsets)
</snippet></ROW><ROW><id>14245451</id><snippet>X</snippet></ROW><ROW><id>14245451</id><snippet>NX = grid_size[0]</snippet></ROW><ROW><id>14245451</id><snippet>X - n * dx</snippet></ROW><ROW><id>14245451</id><snippet>n = 0</snippet></ROW><ROW><id>14245451</id><snippet>n = 1</snippet></ROW><ROW><id>14245451</id><snippet>dx</snippet></ROW><ROW><id>14245490</id><snippet>share_x=False
</snippet></ROW><ROW><id>14245546</id><snippet>def transpose(lines):
    code =  """
            for(int i = 0; i &lt; x; i++) {
                for(int j = 0; j &lt; N; j++) {
                    out[j + i * N] = atof(lines[j][i]);
                    // OUT2(i, j) = atof(lines[j][i]);
                }
            }
            """
    N = len(lines)
    x = len(lines[0])
    out = np.empty((x, N), dtype=np.float64)
    weave.inline(code, ['lines', 'N', 'x', 'out'])
    return out

&gt;&gt;&gt; matrix = [['0.5', '0.1', '0.7'],['0.2','0.2', '0.4']]
&gt;&gt;&gt; matrix
[['0.5', '0.1', '0.7'], ['0.2', '0.2', '0.4']]
&gt;&gt;&gt; transpose(matrix)
array([[ 0.5,  0.2],
       [ 0.1,  0.2],
       [ 0.7,  0.4]])
</snippet></ROW><ROW><id>14245546</id><snippet>;</snippet></ROW><ROW><id>14245546</id><snippet>out</snippet></ROW><ROW><id>14245546</id><snippet>PyArrayObject</snippet></ROW><ROW><id>14245546</id><snippet>out_array</snippet></ROW><ROW><id>14245546</id><snippet>py_out</snippet></ROW><ROW><id>14245546</id><snippet>PyArrayObject*</snippet></ROW><ROW><id>14245546</id><snippet>PyObject*</snippet></ROW><ROW><id>14245546</id><snippet>&lt;VAR&gt;1</snippet></ROW><ROW><id>14245546</id><snippet>&lt;VAR&gt;2</snippet></ROW><ROW><id>14245546</id><snippet>&lt;VAR&gt;3</snippet></ROW><ROW><id>14245546</id><snippet>&lt;VAR&gt;4</snippet></ROW><ROW><id>14245580</id><snippet>fromfile</snippet></ROW><ROW><id>14245580</id><snippet>import numpy as np
import os

data = np.arange(100, dtype=np.int)
data.tofile("temp")  # save the data

f = open("temp", "rb")  # reopen the file
f.seek(256, os.SEEK_SET)  # seek

x = np.fromfile(f, dtype=np.int)  # read the data into numpy
print x 
# [64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88
# 89 90 91 92 93 94 95 96 97 98 99]
</snippet></ROW><ROW><id>14245739</id><snippet>print "Surpress me!"
</snippet></ROW><ROW><id>14245987</id><snippet>c.execute(statement, list_of_vars + [0, 100])
</snippet></ROW><ROW><id>14246022</id><snippet>Unknown directive</snippet></ROW><ROW><id>14246022</id><snippet>\begin{equation*}</snippet></ROW><ROW><id>14246022</id><snippet>\end{equation*}</snippet></ROW><ROW><id>14246022</id><snippet>&lt;script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"&gt;&lt;/script&gt;</snippet></ROW><ROW><id>14246030</id><snippet>urllib2</snippet></ROW><ROW><id>14246030</id><snippet>requests</snippet></ROW><ROW><id>14246030</id><snippet>ThreadPoolExecutor</snippet></ROW><ROW><id>14246030</id><snippet>concurrent.futures</snippet></ROW><ROW><id>14246030</id><snippet>urllib</snippet></ROW><ROW><id>14246030</id><snippet>requests</snippet></ROW><ROW><id>14246030</id><snippet>futures</snippet></ROW><ROW><id>14246030</id><snippet>gevent</snippet></ROW><ROW><id>14246030</id><snippet>greenlet</snippet></ROW><ROW><id>14246030</id><snippet>Thread</snippet></ROW><ROW><id>14246030</id><snippet>grequests</snippet></ROW><ROW><id>14246030</id><snippet>requests</snippet></ROW><ROW><id>14246030</id><snippet>gevent</snippet></ROW><ROW><id>14246030</id><snippet>requests</snippet></ROW><ROW><id>14246030</id><snippet>gevent</snippet></ROW><ROW><id>14246030</id><snippet>twisted</snippet></ROW><ROW><id>14246030</id><snippet>tornado</snippet></ROW><ROW><id>14246030</id><snippet>tulip</snippet></ROW><ROW><id>14246030</id><snippet>tulip</snippet></ROW><ROW><id>14246147</id><snippet>list_a</snippet></ROW><ROW><id>14246147</id><snippet>set</snippet></ROW><ROW><id>14246147</id><snippet>{}</snippet></ROW><ROW><id>14246147</id><snippet>set</snippet></ROW><ROW><id>14246147</id><snippet>[...]</snippet></ROW><ROW><id>14246147</id><snippet>{...}</snippet></ROW><ROW><id>14246147</id><snippet>list_a = map(str, list_a)
</snippet></ROW><ROW><id>14246147</id><snippet>\n</snippet></ROW><ROW><id>14246147</id><snippet>list_b= { item.replace('\n','') for item in list_b }
</snippet></ROW><ROW><id>14246147</id><snippet>with open('c:\file.txt', 'w') as file:
    file.write('\n'.join(list_a)) 
    file.write('\n'.join(list_b)) 
</snippet></ROW><ROW><id>14246147</id><snippet>with open('c:\file.txt', 'w') as file:
    file.write('\n'.join(list_a + list_b)) 
</snippet></ROW><ROW><id>14246174</id><snippet>python my_unit_test_launcher.py 2&gt; log.txt
</snippet></ROW><ROW><id>14246396</id><snippet>subprocess</snippet></ROW><ROW><id>14246396</id><snippet>call</snippet></ROW><ROW><id>14246396</id><snippet>def call(*popenargs, timeout=None, **kwargs):
    """Run command with arguments.  Wait for command to complete or
    timeout, then return the returncode attribute.

    The arguments are the same as for the Popen constructor.  Example:

    retcode = call(["ls", "-l"])
    """
    with Popen(*popenargs, **kwargs) as p:
        try:
            return p.wait(timeout=timeout)
        except:
            p.kill()
            p.wait()
            raise
</snippet></ROW><ROW><id>14246396</id><snippet>wait</snippet></ROW><ROW><id>14246396</id><snippet>Popen</snippet></ROW><ROW><id>14246396</id><snippet>wait</snippet></ROW><ROW><id>14246495</id><snippet>pip install --ignore-installed ipython
</snippet></ROW><ROW><id>14246529</id><snippet>'next'</snippet></ROW><ROW><id>14246529</id><snippet>&gt;&gt;&gt; a = {}
&gt;&gt;&gt; b = {}
&gt;&gt;&gt; a['next'] = b
&gt;&gt;&gt; b['next'] = a
&gt;&gt;&gt; a == b
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
RuntimeError: maximum recursion depth exceeded in cmp
</snippet></ROW><ROW><id>14246529</id><snippet>...</snippet></ROW><ROW><id>14246529</id><snippet>&gt;&gt;&gt; a
{'next': {'next': {...}}}
</snippet></ROW><ROW><id>14246647</id><snippet>super()</snippet></ROW><ROW><id>14246647</id><snippet>.__get__()</snippet></ROW><ROW><id>14246647</id><snippet>a</snippet></ROW><ROW><id>14246647</id><snippet>.__get__()</snippet></ROW><ROW><id>14246647</id><snippet>a</snippet></ROW><ROW><id>14246647</id><snippet>Foo</snippet></ROW><ROW><id>14246647</id><snippet>class Foo(object):
    __slots__ = ('a',)
    def __init__(self):
        self.a = 'spam'
</snippet></ROW><ROW><id>14246647</id><snippet>__slots__</snippet></ROW><ROW><id>14246647</id><snippet>AttributeError</snippet></ROW><ROW><id>14246647</id><snippet>&gt;&gt;&gt; class Foo(object):
...     __slots__ = ('a',)
... 
&gt;&gt;&gt; Foo.a
&lt;member 'a' of 'Foo' objects&gt;
&gt;&gt;&gt; Foo().a
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: a
&gt;&gt;&gt; Foo.a.__get__(Foo(), Foo)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: a
</snippet></ROW><ROW><id>14246647</id><snippet>AttributeError</snippet></ROW><ROW><id>14246647</id><snippet>&gt;&gt;&gt; class Foo(object):
...     __slots__ = ('a',)
...     def __init__(self):
...         self.a = 'spam'
... 
&gt;&gt;&gt; Foo.a.__get__(Foo(), Foo)
'spam'
</snippet></ROW><ROW><id>14246647</id><snippet>super()</snippet></ROW><ROW><id>14246647</id><snippet>self.a</snippet></ROW><ROW><id>14246647</id><snippet>&gt;&gt;&gt; class Bar(Foo):
...     __slots__ = ('b',)
...     @property
...     def b(self):
...         return super(Bar, self).a
... 
&gt;&gt;&gt; Bar().a
'spam'
</snippet></ROW><ROW><id>14246777</id><snippet>squiguy</snippet></ROW><ROW><id>14246777</id><snippet>while True:
    Myfile = raw_input( '''Specify filename (o) or use default chain (d)? ''')

   if Myfile == 'd':
        print 'default choosen '
        Myfile = 'M:/test/testchains_a.csv'
        break

    elif Myfile == 'o':
        print 'own file choosen '
        Myfile = raw_input('Enter absolute path to the .csv file:')
        break
</snippet></ROW><ROW><id>14246777</id><snippet>break</snippet></ROW><ROW><id>14246777</id><snippet>'d'</snippet></ROW><ROW><id>14246777</id><snippet>'o'</snippet></ROW><ROW><id>14247036</id><snippet>In [1]: df.groupby('one').agg(lambda x: "|".join(x.tolist()))
Out[1]:
     two
one
1    x|y
2    y|z
3      z
</snippet></ROW><ROW><id>14247036</id><snippet>In [1]: df = DataFrame({'one':[1,1,2,2,3], 'two':list('xyyzz'), 'three':list('eecba')}, index=list('abcde'), columns=['one','two','three'])

In [2]: df
Out[2]:
   one two three
a    1   x     e
b    1   y     e
c    2   y     c
d    2   z     b
e    3   z     a

In [3]: df.groupby('one').agg(lambda x: "|".join(x.order().unique().tolist()))
Out[3]:
     two three
one
1    x|y     e
2    y|z   b|c
3      z     a
</snippet></ROW><ROW><id>14247180</id><snippet>if 1 &lt;= my_number &lt;= 100:
</snippet></ROW><ROW><id>14247180</id><snippet>int</snippet></ROW><ROW><id>14247180</id><snippet>try:
    my_number = int(raw_number)
except ValueError:
    print "%s not an integer value." % raw_number
else:
    if 1 &lt;= raw_number &lt;= 100:
</snippet></ROW><ROW><id>14247180</id><snippet>base_prompt = 'Enter number of random points'
user_input = raw_input(base_prompt)
while True:
    try:
        input_number = int(user_input)
    except ValueError:
        user_input = raw_input('%s not an interger\n%s' % (user_input, base_prompt))
    else:
        if 1 &lt;= input_number &lt;= 100:
            break
        else:
            user_input = raw_input('%d out of range (1 to 100)\n%s' % (input_number, base_prompt))
</snippet></ROW><ROW><id>14247249</id><snippet>while</snippet></ROW><ROW><id>14247249</id><snippet>break</snippet></ROW><ROW><id>14247249</id><snippet>return</snippet></ROW><ROW><id>14247249</id><snippet>raise</snippet></ROW><ROW><id>14247249</id><snippet>except</snippet></ROW><ROW><id>14247249</id><snippet>for</snippet></ROW><ROW><id>14247249</id><snippet>self.count</snippet></ROW><ROW><id>14247249</id><snippet>self.count</snippet></ROW><ROW><id>14247249</id><snippet>append</snippet></ROW><ROW><id>14247249</id><snippet>workDays</snippet></ROW><ROW><id>14247249</id><snippet>self.count -= 1</snippet></ROW><ROW><id>14247249</id><snippet>if len(workDays) &gt;= 5: break
</snippet></ROW><ROW><id>14247249</id><snippet>yield</snippet></ROW><ROW><id>14247249</id><snippet>list</snippet></ROW><ROW><id>14247249</id><snippet>list</snippet></ROW><ROW><id>14247249</id><snippet>def setWorkDays(dayNameList):
    while self.count &gt; 0: #continue loop until all 5 work days have been filled or the loop breaks at the end 
        for day in dayNameList: #iterate over days, adding days to work days if they are not free days, AL days, preferred days, or free Saturdays 
            if day in self.freeDays or day in self.alDays or (day == 'Saturday' and self.satOff is True):
                continue
            elif day in self.programDays:
                yield day
            elif self.preferredDay is not None and day in self.preferredDay:
                continue
            else:
                yield day
        if self.preferredDay not in self.workDays: #if iteration completes, 5 work days have not been filled, and the preferred day has not been added, add the preferred day 
            yield day

workDays = [setWorkDays(dayNameList) for _ in range(5)]
</snippet></ROW><ROW><id>14247249</id><snippet>list</snippet></ROW><ROW><id>14247249</id><snippet>for workDay in (setWorkDays(dayNameList) for _ in range(5)):
</snippet></ROW><ROW><id>14247249</id><snippet>for workDay in itertools.islice(setWorkDays(dayNameList), 5):
</snippet></ROW><ROW><id>14247383</id><snippet>my_var == None</snippet></ROW><ROW><id>14247383</id><snippet>True</snippet></ROW><ROW><id>14247383</id><snippet>class Negator(object):
    def __eq__(self,other):
        return not other

thing = Negator()
print thing == None    #True
print thing is None    #False
</snippet></ROW><ROW><id>14247383</id><snippet>is</snippet></ROW><ROW><id>14247383</id><snippet>None</snippet></ROW><ROW><id>14247383</id><snippet>my_var is None</snippet></ROW><ROW><id>14247383</id><snippet>==</snippet></ROW><ROW><id>14247383</id><snippet>is</snippet></ROW><ROW><id>14247383</id><snippet>lst = [1,2,3]
lst == lst[:]  # This is True since the lists are "equivalent"
lst is lst[:]  # This is False since they're actually different objects
</snippet></ROW><ROW><id>14247718</id><snippet>def connectToSiteFunction(ip):
    # your code to bind ip (if it's a source) or connect to it (if it's a dst) 
    # and do your thing here

def connectAndWait():
    for ip in ips:
        t = threading.Thread(target=connectToSiteFunction, args=(ip,))
        yield t
        t.start()
        os.sleep(15)

threads = [t for t in connectAndWait()]
for t in threads:
    t.join()
</snippet></ROW><ROW><id>14247718</id><snippet>def connectToSiteFunction(ip):
    url = 'http://{}/path/to/page.html'.format(ip)
    # now open url as normal
</snippet></ROW><ROW><id>14247718</id><snippet>socket</snippet></ROW><ROW><id>14247718</id><snippet>socket.socket</snippet></ROW><ROW><id>14247718</id><snippet>socket</snippet></ROW><ROW><id>14247718</id><snippet>def make_socket_factory(srcip):
    def socket_factory():
        s = socket.socket()
        s.bind((srcip, 0))
        return s
    return socket_factory
</snippet></ROW><ROW><id>14247718</id><snippet>make_socket_factory(srcip)</snippet></ROW><ROW><id>14247718</id><snippet>urllib2</snippet></ROW><ROW><id>14247718</id><snippet>requests</snippet></ROW><ROW><id>14247718</id><snippet>pycurl</snippet></ROW><ROW><id>14247718</id><snippet>twisted</snippet></ROW><ROW><id>14247813</id><snippet>button1.config( height = WHATEVER, width = WHATEVER2 )
</snippet></ROW><ROW><id>14247813</id><snippet>button1 = Button(self, text = "Send", command = self.response1, height=100, width=100) 
</snippet></ROW><ROW><id>14247913</id><snippet>import requests
from bs4 import BeautifulSoup

r = requests.get("http://pl.bab.la/slownik/polski-niemiecki/zgodnie-z")

soup = BeautifulSoup(r.text, fromEncoding="UTF-8")
soup.find(id="showMoreCSDiv").text
</snippet></ROW><ROW><id>14247913</id><snippet>&lt;div id="showMoreCSDiv"&gt;&lt;a class="btn" id="showMoreCS" href="javascript:babGetMoreCS(20,'zgodnie z');"&gt;więcej&lt;/a&gt;&lt;/div&gt;
</snippet></ROW><ROW><id>14247913</id><snippet>więcej
</snippet></ROW><ROW><id>14247972</id><snippet>join</snippet></ROW><ROW><id>14247972</id><snippet>','.join(str(instance.public_dns_name) for instance in instances)
</snippet></ROW><ROW><id>14247972</id><snippet>','.join([str(instance.public_dns_name) for instance in instances])
</snippet></ROW><ROW><id>14248025</id><snippet>flag = False
</snippet></ROW><ROW><id>14248025</id><snippet>import thread
import time

import config


def test1():
    while 1:
        config.flag = True
        time.sleep(0.7)
        print 'test1:', config.flag
        time.sleep(1)

def test2():
    while 1:
        config.flag = False
        time.sleep(1.1)
        print 'test2:', config.flag
        time.sleep(1)

thread.start_new(test1, ())
test2()
</snippet></ROW><ROW><id>14248057</id><snippet>def qname(prefix, element, map={'xml':'http://www.w3.org/XML/1998/namespace'}):
    return "{{{}}}{}".format(map[prefix], element)
</snippet></ROW><ROW><id>14248057</id><snippet>ElementTree</snippet></ROW><ROW><id>14248057</id><snippet>xml:lang</snippet></ROW><ROW><id>14248057</id><snippet>xml:base</snippet></ROW><ROW><id>14248057</id><snippet>xmlns</snippet></ROW><ROW><id>14248057</id><snippet>xml_lang = qname('xml', 'lang')

def set_xml_lang(root, defaultlang=''):
    xml_lang = qname('xml', 'lang')
    for item in root:
        try:
            lang = item.attrib[xml_lang]
        except KeyError, err:
            item.set(xml_lang, defaultlang)
            lang = defaultlang
        set_xml_lang(item, lang)

set_xml_lang(root)

namespaces = {'xml':'http://www.w3.org/XML/1998/namespace'}
# Every element in root now has an xml:lang attribute
# so XPath is easy now:
alts_with_no_lang = root.findall('alt[@{{{xml}}}lang=""]'.format(**namespaces))
</snippet></ROW><ROW><id>14248057</id><snippet>lxml</snippet></ROW><ROW><id>14248057</id><snippet>lang()</snippet></ROW><ROW><id>14248057</id><snippet>import lxml.etree as ET

root = ET.fromstring(xml)

print root.xpath('//alt[lang("fr")]')
</snippet></ROW><ROW><id>14248057</id><snippet>lang()</snippet></ROW><ROW><id>14248057</id><snippet>lang('en')</snippet></ROW><ROW><id>14248057</id><snippet>xml:lang="en-US"</snippet></ROW><ROW><id>14248057</id><snippet>lang()</snippet></ROW><ROW><id>14248057</id><snippet>xml:lang</snippet></ROW><ROW><id>14248057</id><snippet>mylang = node.xpath('(ancestor-or-self::*/@xml:lang)[1]')
</snippet></ROW><ROW><id>14248057</id><snippet>tree.xpath('//alt[not((ancestor-or-self::*/@xml:lang)[1])]')
</snippet></ROW><ROW><id>14248158</id><snippet>page, created = Page.objects.get_or_create(
    user=request.user,
    link=link,
    title=BeautifulSoup.BeautifulSoup(urllib.urlopen(link)).title.string
  )
</snippet></ROW><ROW><id>14248188</id><snippet>doStuff</snippet></ROW><ROW><id>14248188</id><snippet>test</snippet></ROW><ROW><id>14248188</id><snippet>main()</snippet></ROW><ROW><id>14248188</id><snippet>def doStuff(test):
    test = "hello world"
    return test

def main():
    test = None
    test = doStuff(test)
    print(test)
</snippet></ROW><ROW><id>14248188</id><snippet>doStuff()</snippet></ROW><ROW><id>14248188</id><snippet>def doStuff():
    test = "hello world" # These 2 lines could be one
    return test          # return "hello world"

def main():
    test = doStuff()
    print(test)
</snippet></ROW><ROW><id>14248248</id><snippet>xlwt</snippet></ROW><ROW><id>14248248</id><snippet>import xlwt
workbook = xlwt.Workbook()
sheet = workbook.add_sheet('Sheet 1')
sheet.write(0,1,'First text')
workbook.save('test.xls')
</snippet></ROW><ROW><id>14248309</id><snippet>with open("file1") as f1,open("file2") as f2:
    for x,y in zip(f1,f2):
        if x !=y :
           print " dissimilar lines "
</snippet></ROW><ROW><id>14248309</id><snippet>zip()</snippet></ROW><ROW><id>14248309</id><snippet>In [12]: a=[1,2,3]

In [13]: b=[4,2,6]

In [14]: for i,(x,y) in enumerate(zip(a,b)):
    if x !=y :
        print "line :{0} ==&gt;  comparing {1} and {2}".format(i,x,y)

line :0 ==&gt;  comparing 1 and 4
line :2 ==&gt;  comparing 3 and 6
</snippet></ROW><ROW><id>14248616</id><snippet>seq0010</snippet></ROW><ROW><id>14248616</id><snippet>1</snippet></ROW><ROW><id>14248616</id><snippet>dirName = 'seq%03d0' % 1
</snippet></ROW><ROW><id>14248616</id><snippet>1</snippet></ROW><ROW><id>14248616</id><snippet>i</snippet></ROW><ROW><id>14248708</id><snippet>HIGHEST_PROTOCOL</snippet></ROW><ROW><id>14248708</id><snippet>__new__</snippet></ROW><ROW><id>14248708</id><snippet>str</snippet></ROW><ROW><id>14248708</id><snippet>__new__</snippet></ROW><ROW><id>14248708</id><snippet>pickle</snippet></ROW><ROW><id>14248708</id><snippet>str</snippet></ROW><ROW><id>14248708</id><snippet>__getnewargs__</snippet></ROW><ROW><id>14248708</id><snippet>(self.__class__, self.bar)</snippet></ROW><ROW><id>14248708</id><snippet>pickle</snippet></ROW><ROW><id>14248784</id><snippet>urlretrieve</snippet></ROW><ROW><id>14248784</id><snippet>import os, urllib, yaml


os_url = "http://planet.openstreetmap.org/replication/"
base_dir = "./"

try:
    with open('download.log', 'r') as f:
        last_set = int(f.readlines()[-1].strip())
except:
    last_set = int(raw_input("Enter latest set:"))

stream = urllib.urlopen(os_url+"changesets/state.yaml")
latest_set = yaml.load(stream)['sequence']


for seq in range(last_set+1,latest_set+1):
    changeset_dir = "changesets/000/%03d/"%(seq/1000)
    changeset_file = "%03d.osm.gz"%(seq%1000)
    remote_file = os_url + changeset_dir + changeset_file
    local_dir = base_dir + changeset_dir
    local_file = local_dir + changeset_file

    if not os.path.exists(local_dir):
        os.makedirs(local_dir)

    try:
        with open(local_file) as f: pass
        print "Already downloaded",seq
    except:
        urllib.urlretrieve(remote_file, local_file)
        print "Downloaded changeset",seq

print "Up-to-date"


with open('download.log', 'a') as f:
    f.write('%s\n'%latest_set)
</snippet></ROW><ROW><id>14248851</id><snippet>list comprehension</snippet></ROW><ROW><id>14248851</id><snippet>ternary operator</snippet></ROW><ROW><id>14248851</id><snippet>In [16]: lis = ['heeeeellllooo','world','low','higggghhh']

In [17]: [x.upper() if len(x)&gt;5 else x for x in lis] # this is a new list

Out[17]: ['HEEEEELLLLOOO', 'world', 'low', 'HIGGGGHHH']
</snippet></ROW><ROW><id>14248851</id><snippet>enumerate()</snippet></ROW><ROW><id>14248851</id><snippet>enumerate</snippet></ROW><ROW><id>14248851</id><snippet>tuple</snippet></ROW><ROW><id>14248851</id><snippet>In [18]: for index,elem in enumerate(lis):
   ....:     if len(elem)&gt;5:
   ....:         lis[index]=elem.upper()  #access element by index
   ....:         

In [19]: lis
Out[19]: ['HEEEEELLLLOOO', 'world', 'low', 'HIGGGGHHH']
</snippet></ROW><ROW><id>14248957</id><snippet>class Application(Frame):
    def __init__(self, master=None):
        Frame.__init__(self, master)
        self.pack()

        coords = StringVar()

        Label(master=self, textvariable=coords).pack()

        def GetCoords():
            coords.set(str(win32api.GetCursorPos()))

        root.bind_all("&lt;Scroll_Lock&gt;", self.GetCoords)
</snippet></ROW><ROW><id>14248957</id><snippet>GetCoords</snippet></ROW><ROW><id>14248957</id><snippet>Application.__init__</snippet></ROW><ROW><id>14248957</id><snippet>Application</snippet></ROW><ROW><id>14248957</id><snippet>self.GetCoords</snippet></ROW><ROW><id>14248957</id><snippet>GetCoords</snippet></ROW><ROW><id>14248957</id><snippet>self</snippet></ROW><ROW><id>14248957</id><snippet>AttributeError: Application instance has no attribute 'GetCoords'</snippet></ROW><ROW><id>14248957</id><snippet>GetCoords</snippet></ROW><ROW><id>14248957</id><snippet>self.</snippet></ROW><ROW><id>14248957</id><snippet>StringVar</snippet></ROW><ROW><id>14248957</id><snippet>GetCoords</snippet></ROW><ROW><id>14248957</id><snippet>def __init__</snippet></ROW><ROW><id>14248957</id><snippet>self</snippet></ROW><ROW><id>14248957</id><snippet>self.GetCoords</snippet></ROW><ROW><id>14248957</id><snippet>coords</snippet></ROW><ROW><id>14248957</id><snippet>__init__</snippet></ROW><ROW><id>14248957</id><snippet>self.coords</snippet></ROW><ROW><id>14248957</id><snippet>__init__</snippet></ROW><ROW><id>14248957</id><snippet>GetCoords</snippet></ROW><ROW><id>14248957</id><snippet>coords</snippet></ROW><ROW><id>14249036</id><snippet>import shutil
from contextlib import closing

with closing(opener.open(request)) as src, open(filename, "wb") as dest:
    shutil.copyfileobj(src, dest)
</snippet></ROW><ROW><id>14249276</id><snippet>select emailaddress, sum(number) as total
from t
group by emailaddress
</snippet></ROW><ROW><id>14249341</id><snippet>quopri</snippet></ROW><ROW><id>14249341</id><snippet>utf-8</snippet></ROW><ROW><id>14249341</id><snippet>&gt;&gt;&gt; b = quopri.decodestring('=C4=EE=E1=F0=FB=E9 =E4=E5=ED=FC')
&gt;&gt;&gt; print(b.decode('windows-1251'))
Добрый день
</snippet></ROW><ROW><id>14249379</id><snippet>~/lldb</snippet></ROW><ROW><id>14249379</id><snippet>~/.lldbinit</snippet></ROW><ROW><id>14249379</id><snippet>~/lldb/stopifcaller.py</snippet></ROW><ROW><id>14249379</id><snippet>import lldb

# Use this like
# (lldb) command script import ~/lldb/stopifcaller.py
# (lldb) br s -n bar
# (lldb) br comm add --script-type python -o "stopifcaller.stop_if_caller(frame, 'foo')" 1

def stop_if_caller(current_frame, function_of_interest):
  thread = current_frame.GetThread()
  if thread.GetNumFrames() &gt; 1:
    if thread.GetFrameAtIndex(1).GetFunctionName() != function_of_interest:
      thread.GetProcess().Continue()
</snippet></ROW><ROW><id>14249379</id><snippet>command script import</snippet></ROW><ROW><id>14249379</id><snippet>~/.lldbinit</snippet></ROW><ROW><id>14249379</id><snippet>foo</snippet></ROW><ROW><id>14249379</id><snippet>command script import ~/...</snippet></ROW><ROW><id>14249379</id><snippet>/Users/benwad/</snippet></ROW><ROW><id>14249379</id><snippet>~/.lldbinit</snippet></ROW><ROW><id>14249379</id><snippet>ConstString</snippet></ROW><ROW><id>14249379</id><snippet>type summary add -w lldb lldb_private::ConstString -s "${var.m_string}"
</snippet></ROW><ROW><id>14249379</id><snippet>addr_t</snippet></ROW><ROW><id>14249379</id><snippet>type format add -f x lldb::addr_t
</snippet></ROW><ROW><id>14249379</id><snippet>~/lldb/sayhello.py</snippet></ROW><ROW><id>14249379</id><snippet>import lldb

def say_hello(debugger, command, result, dict):
  print 'hello'

def __lldb_init_module (debugger, dict):
  debugger.HandleCommand('command script add -f sayhello.say_hello hello')
</snippet></ROW><ROW><id>14249379</id><snippet>(lldb) comma script import  ~/lldb/sayhello.py
(lldb) hello
hello
(lldb)
</snippet></ROW><ROW><id>14249379</id><snippet>shlex</snippet></ROW><ROW><id>14249379</id><snippet>optparse</snippet></ROW><ROW><id>14249379</id><snippet>__doc__</snippet></ROW><ROW><id>14249434</id><snippet>map()</snippet></ROW><ROW><id>14249434</id><snippet>filter()</snippet></ROW><ROW><id>14249434</id><snippet>for</snippet></ROW><ROW><id>14249434</id><snippet>map()</snippet></ROW><ROW><id>14249434</id><snippet>filter()</snippet></ROW><ROW><id>14249434</id><snippet>list(map(...))</snippet></ROW><ROW><id>14249479</id><snippet>bar</snippet></ROW><ROW><id>14249479</id><snippet>class Foo(object):
    def bar():   # &lt;-- missing self parameter
        return [1,2,3]
</snippet></ROW><ROW><id>14249479</id><snippet>&gt;&gt;&gt; Foo().bar()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: bar() takes no arguments (1 given)
</snippet></ROW><ROW><id>14249504</id><snippet>heapq</snippet></ROW><ROW><id>14249504</id><snippet>min</snippet></ROW><ROW><id>14249504</id><snippet>max</snippet></ROW><ROW><id>14249504</id><snippet>heapq</snippet></ROW><ROW><id>14249504</id><snippet>O(n)</snippet></ROW><ROW><id>14249504</id><snippet>O(1)</snippet></ROW><ROW><id>14249504</id><snippet>O(n)</snippet></ROW><ROW><id>14249504</id><snippet>O(log n)</snippet></ROW><ROW><id>14249504</id><snippet>def push(self, value):
    insert into both normal and reversed heaps
def minpop(self):
    check that the min value of normal hasn't reached the min value of reversed
    pop and return the min value of normal
def maxpop(self):
    check that the min value of reversed hasn't reached the min value of normal
    pop and return the min value of reversed
</snippet></ROW><ROW><id>14249504</id><snippet>normal</snippet></ROW><ROW><id>14249504</id><snippet>reversed</snippet></ROW><ROW><id>14249504</id><snippet>bintrees</snippet></ROW><ROW><id>14249504</id><snippet>skiplist</snippet></ROW><ROW><id>14249504</id><snippet>blist</snippet></ROW><ROW><id>14249504</id><snippet>A * log Bn + C</snippet></ROW><ROW><id>14249504</id><snippet>A</snippet></ROW><ROW><id>14249504</id><snippet>C</snippet></ROW><ROW><id>14249504</id><snippet>B</snippet></ROW><ROW><id>14249504</id><snippet>blist.sortedlist</snippet></ROW><ROW><id>14249504</id><snippet>sl[0]</snippet></ROW><ROW><id>14249504</id><snippet>sl[-1]</snippet></ROW><ROW><id>14249504</id><snippet>sl.pop(0)</snippet></ROW><ROW><id>14249504</id><snippet>sl.pop(-1)</snippet></ROW><ROW><id>14249504</id><snippet>sl.add(x)</snippet></ROW><ROW><id>14249504</id><snippet>class MyQueue(object):
    def __init__(self):
        self.sl = blist.sortedlist(key=operator.itemgetter(0))
    def add(self, priority, task):
        self.sl.add((priority, task))
    def step(self):
        if self.sl[-1][0] - self.sl[0][0] &lt; MyQueue.EPSILON:
            return
        minprio, mintask = self.sl.pop(0)
        maxprio, maxtask = self.sl.pop(-1)
        newminprio, newmaxprio = recalc_priorities(minprio, maxprio)
        self.add(newminprio, mintask)
        self.add(newmaxprio, maxtask)
</snippet></ROW><ROW><id>14249504</id><snippet>O(log N)</snippet></ROW><ROW><id>14249504</id><snippet>O(1)</snippet></ROW><ROW><id>14249504</id><snippet>class MyQueue(object):
    def __init__(self):
        self.sl = blist.sortedlist(key=operator.itemgetter(0))
        self.minprio, self.maxprio = None, None
    def add(self, priority, task):
        self.sl.add((priority, task))
        if prio &lt; self.minprio: self.minprio = prio
        elif prio &gt; self.maxprio: self.maxprio = prio
    def step(self):
        if self.maxprio - self.minprio &lt; MyQueue.EPSILON:
            return
        minprio, mintask = self.sl.pop(0)
        maxprio, maxtask = self.sl.pop(-1)
        newminprio, newmaxprio = recalc_priorities(minprio, maxprio)
        self.add(newminprio, mintask)
        self.add(newmaxprio, maxtask)
        self.minprio, self.maxprio = sl[0][0], sl[-1][0]
</snippet></ROW><ROW><id>14249504</id><snippet>step</snippet></ROW><ROW><id>14249504</id><snippet>O(1)</snippet></ROW><ROW><id>14249504</id><snippet>O(log n)</snippet></ROW><ROW><id>14249504</id><snippet>O(log n)</snippet></ROW><ROW><id>14249504</id><snippet>O(log n)</snippet></ROW><ROW><id>14249504</id><snippet>O(n)</snippet></ROW><ROW><id>14249504</id><snippet>n</snippet></ROW><ROW><id>14249846</id><snippet>class Child():
    nmbrMovies = 0
    nmbrBooks  = 3

class Adult():
    nmbrMovies = 2
    nmbrBooks  = 5

class Member(Child):
    pass

x = Member()
</snippet></ROW><ROW><id>14249846</id><snippet>Member</snippet></ROW><ROW><id>14249846</id><snippet>Child</snippet></ROW><ROW><id>14249846</id><snippet>print(Member.__bases__)
# (&lt;class __main__.Child at 0xb74a141c&gt;,)
</snippet></ROW><ROW><id>14249846</id><snippet>Adult</snippet></ROW><ROW><id>14249846</id><snippet>Member.__bases__ = (Adult,)
print(Member.__bases__)
# (&lt;class __main__.Adult at 0xb74a144c&gt;,)
</snippet></ROW><ROW><id>14249846</id><snippet>x.nmbrMovies</snippet></ROW><ROW><id>14249846</id><snippet>Adult.nmbrMovies</snippet></ROW><ROW><id>14249846</id><snippet>print(x.nmbrMovies)
# 2
</snippet></ROW><ROW><id>14249846</id><snippet>x</snippet></ROW><ROW><id>14249846</id><snippet>Member</snippet></ROW><ROW><id>14249846</id><snippet>print(x.__class__)
# __main__.Member
</snippet></ROW><ROW><id>14249846</id><snippet>Child</snippet></ROW><ROW><id>14249846</id><snippet>x.__class__ = Child
print(x.nmbrMovies)
# 0
</snippet></ROW><ROW><id>14249875</id><snippet>dict</snippet></ROW><ROW><id>14249875</id><snippet>class Config(object):
    def save(self):
        merged = {'variable_{}'.format(key): value for key, value 
                  in self.variable_dict.items()}
        merged.update({'routine_{}'.format(key): value for key, value 
                       in self.routine_dict.items()}
        # now save merged
</snippet></ROW><ROW><id>14249875</id><snippet>merged</snippet></ROW><ROW><id>14249875</id><snippet>@property</snippet></ROW><ROW><id>14249875</id><snippet>merged</snippet></ROW><ROW><id>14249875</id><snippet>dict</snippet></ROW><ROW><id>14249875</id><snippet>builtins.dict_items</snippet></ROW><ROW><id>14249875</id><snippet>dict</snippet></ROW><ROW><id>14249875</id><snippet>class PrefixedDict(object):
    def __init__(self, prefix, d):
        self.prefix, self.d = prefix, d
    def prefixify(self, key):
        return '{}_{}'.format(self.prefix, key)
    def __getitem__(self, key):
        return self.d.__getitem__(self.prefixify(key))
    def __setitem__(self, key, value):
        return self.d.__setitem__(self.prefixify(key), value)
    def __delitem__(self, key):
        return self.d.__delitem__(self.prefixify(key))
    def __iter__(self):
        return (key[len(self.prefix):] for key in self.d 
                if key.startswith(self.prefix)])
</snippet></ROW><ROW><id>14249875</id><snippet>dict</snippet></ROW><ROW><id>14249875</id><snippet>__getattr__</snippet></ROW><ROW><id>14249875</id><snippet>PrefixDict</snippet></ROW><ROW><id>14249875</id><snippet>dict</snippet></ROW><ROW><id>14249875</id><snippet>Config</snippet></ROW><ROW><id>14249875</id><snippet>def __init__(self):
    self.d = {}
    self.variable = PrefixedDict('Variable', self.d)
    self.routine = PrefixedDict('Routine', self.d)
</snippet></ROW><ROW><id>14249875</id><snippet>def load(self):
    # load up self.d
    prefixes = set(key.split('_')[0] for key in self.d)
    for prefix in prefixes:
        setattr(self, prefix, PrefixedDict(prefix, self.d)
</snippet></ROW><ROW><id>14249875</id><snippet>config.newprefix['foo'] = 3</snippet></ROW><ROW><id>14249875</id><snippet>'Newprefix_foo'</snippet></ROW><ROW><id>14249875</id><snippet>def __getattr__(self, name):
    return PrefixedDict(name.title(), self.d)
</snippet></ROW><ROW><id>14249875</id><snippet>config['newprefix']['foo']</snippet></ROW><ROW><id>14249875</id><snippet>'global'</snippet></ROW><ROW><id>14249875</id><snippet>attrdict</snippet></ROW><ROW><id>14249875</id><snippet>config.newprefix</snippet></ROW><ROW><id>14249875</id><snippet>config['newprefix']</snippet></ROW><ROW><id>14249959</id><snippet>def flatten_list(l):
    new_l = []
    for item in l:
        if type(item) == type([]):
            new_l += flatten_list(item)
        else:
            new_l.append(item)
    return new_l
</snippet></ROW><ROW><id>14249961</id><snippet>import sys
import numpy
from PIL import Image, ImageOps, ImageDraw
from scipy.ndimage import morphology, label

def boxes(orig):
    img = ImageOps.grayscale(orig)
    im = numpy.array(img)

    # Inner morphological gradient.
    im = morphology.grey_dilation(im, (3, 3)) - im

    # Binarize.
    mean, std = im.mean(), im.std()
    t = mean + std
    im[im &lt; t] = 0
    im[im &gt;= t] = 1

    # Connected components.
    lbl, numcc = label(im)
    # Size threshold.
    min_size = 200 # pixels
    box = []
    for i in range(1, numcc + 1):
        py, px = numpy.nonzero(lbl == i)
        if len(py) &lt; min_size:
            im[lbl == i] = 0
            continue

        xmin, xmax, ymin, ymax = px.min(), px.max(), py.min(), py.max()
        # Four corners and centroid.
        box.append([
            [(xmin, ymin), (xmax, ymin), (xmax, ymax), (xmin, ymax)],
            (numpy.mean(px), numpy.mean(py))])

    return im.astype(numpy.uint8) * 255, box


orig = Image.open(sys.argv[1])
im, box = boxes(orig)

# Boxes found.
Image.fromarray(im).save(sys.argv[2])

# Draw perfect rectangles and the component centroid.
img = Image.fromarray(im)
visual = img.convert('RGB')
draw = ImageDraw.Draw(visual)
for b, centroid in box:
    draw.line(b + [b[0]], fill='yellow')
    cx, cy = centroid
    draw.ellipse((cx - 2, cy - 2, cx + 2, cy + 2), fill='red')
visual.save(sys.argv[3])
</snippet></ROW><ROW><id>14250080</id><snippet>round()</snippet></ROW><ROW><id>14250080</id><snippet>round(2.675, 2)</snippet></ROW><ROW><id>14250080</id><snippet>2.67</snippet></ROW><ROW><id>14250080</id><snippet>2.68</snippet></ROW><ROW><id>14250080</id><snippet>round()</snippet></ROW><ROW><id>14250080</id><snippet>2.675</snippet></ROW><ROW><id>14250080</id><snippet>2.67</snippet></ROW><ROW><id>14250080</id><snippet>2.68</snippet></ROW><ROW><id>14250080</id><snippet>2.68</snippet></ROW><ROW><id>14250080</id><snippet>2.675</snippet></ROW><ROW><id>14250080</id><snippet>2.67499999999999982236431605997495353221893310546875
</snippet></ROW><ROW><id>14250080</id><snippet>&gt;&gt;&gt; '{:0.2f}'.format(1.555)
'1.55'
</snippet></ROW><ROW><id>14250080</id><snippet>decimal</snippet></ROW><ROW><id>14250080</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; n = Decimal('1.555')
&gt;&gt;&gt; round(n, 2)
Decimal('1.56')
</snippet></ROW><ROW><id>14250153</id><snippet>A.I</snippet></ROW><ROW><id>14250153</id><snippet>numpy.linalg.inv</snippet></ROW><ROW><id>14250153</id><snippet>A.I</snippet></ROW><ROW><id>14250153</id><snippet>def getI(self):
    M,N = self.shape
    if M == N:
        from numpy.dual import inv as func
    else:
        from numpy.dual import pinv as func
    return asmatrix(func(self))
</snippet></ROW><ROW><id>14250153</id><snippet>getI</snippet></ROW><ROW><id>14250153</id><snippet>numpy.dual.inv</snippet></ROW><ROW><id>14250153</id><snippet>numpy.linalg.inv</snippet></ROW><ROW><id>14250153</id><snippet>numpy.dual.pinv</snippet></ROW><ROW><id>14250153</id><snippet>numpy.linalg.pinv</snippet></ROW><ROW><id>14250153</id><snippet>In [69]: s = np.random.random((3,4))

In [70]: t = np.matrix(s)

In [71]: t.I
Out[71]: 
matrix([[ 1.09509751, -0.56685735,  0.51704085],
        [-1.59777153,  0.2777383 ,  1.25579378],
        [ 0.81899054,  0.7594223 , -0.82760378],
        [ 0.02845906,  0.50418885, -0.2091376 ]])

In [72]: np.linalg.inv(t)
...
LinAlgError: Array must be square
</snippet></ROW><ROW><id>14250153</id><snippet>np.linalg.inv</snippet></ROW><ROW><id>14250153</id><snippet>matrix.I</snippet></ROW><ROW><id>14250153</id><snippet>In [60]: x = np.random.random((3,3))

In [62]: y = np.matrix(x)    

In [64]: type(y.I)
Out[64]: &lt;class 'numpy.matrixlib.defmatrix.matrix'&gt;

In [65]: type(np.linalg.inv(x))
Out[65]: &lt;type 'numpy.ndarray'&gt;
</snippet></ROW><ROW><id>14250153</id><snippet>A.I</snippet></ROW><ROW><id>14250153</id><snippet>A.getI</snippet></ROW><ROW><id>14250153</id><snippet>A.I</snippet></ROW><ROW><id>14250153</id><snippet>A.getI()</snippet></ROW><ROW><id>14250200</id><snippet>def remove_names(names_to_remove, info_list):
    return [info
            for info in info_list
            if info.getName() not in names_to_remove]
</snippet></ROW><ROW><id>14250244</id><snippet>next</snippet></ROW><ROW><id>14250244</id><snippet>next(...)
    next(iterator[, default])

    Return the next item from the iterator. If default is given and the iterator
    is exhausted, it is returned instead of raising StopIteration.
</snippet></ROW><ROW><id>14250244</id><snippet>&gt;&gt;&gt; print next(i for i in range(10) if i**2 == 9)
3
&gt;&gt;&gt; print next(i for i in range(10) if i**2 == 17)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
&gt;&gt;&gt; print next((i for i in range(10) if i**2 == 17), None)
None
</snippet></ROW><ROW><id>14250244</id><snippet>&gt;&gt;&gt; print next(i for i in range(10) if i**2 == 17, None)
  File "&lt;stdin&gt;", line 1
SyntaxError: Generator expression must be parenthesized if not sole argument
</snippet></ROW><ROW><id>14250478</id><snippet>totalCost</snippet></ROW><ROW><id>14250478</id><snippet>for fruit, n in orderList:
    if fruit in fruitPrices:
        totalCost += fruitPrices[fruit] * n
    else:
        print fruit, 'not here!'
</snippet></ROW><ROW><id>14250478</id><snippet>sum(fruitPrices.get(fruit, 0) * n for fruit, n in orderList)
</snippet></ROW><ROW><id>14250478</id><snippet>fruitPrices.get(fruit, 0)</snippet></ROW><ROW><id>14250478</id><snippet>fruitPrices[fruit]</snippet></ROW><ROW><id>14250478</id><snippet>fruit</snippet></ROW><ROW><id>14250478</id><snippet>fruitPrices</snippet></ROW><ROW><id>14250478</id><snippet>0</snippet></ROW><ROW><id>14250701</id><snippet>--system-site-packages</snippet></ROW><ROW><id>14250701</id><snippet>test</snippet></ROW><ROW><id>14250701</id><snippet>~/.local</snippet></ROW><ROW><id>14250701</id><snippet>--user</snippet></ROW><ROW><id>14250765</id><snippet>#! /usr/bin/python3.2

import sys

if __name__ == '__main__':
    if len (sys.argv) &lt; 4:
        print ( ['Usage: myscript [Dir] [Old] [New]',
            'Please enter Old and New',
            'Please enter New'] [len (sys.argv) - 1] )
</snippet></ROW><ROW><id>14250765</id><snippet>#! /usr/bin/python3.2

import argparse

if __name__ == '__main__':
    p = argparse.ArgumentParser (description = 'What your program does.')
    p.add_argument ('dir', metavar = 'dir', type = str, help = 'The directory')
    p.add_argument ('old', metavar = 'old', type = str, help = 'The old value')
    p.add_argument ('new', metavar = 'new', type = str, help = 'The new value')
    args = p.parse_args ()
</snippet></ROW><ROW><id>14250932</id><snippet>event</snippet></ROW><ROW><id>14250932</id><snippet>def open_new_figure(event):
    if event.inaxes is not None:
        ax = event.inaxes
        # you now have the axes object for that the user clicked on
        # you can use ax.children() to figure out which img artist is in this
        # axes and extract the data from it

cid = fig.canvas.mpl_connect('button_press_event', open_new_figure)
</snippet></ROW><ROW><id>14251046</id><snippet>os.environ['NLS_LANG'] = 'AMERICAN_AMERICA.UTF8'
</snippet></ROW><ROW><id>14251046</id><snippet>file = codecs.open("lol", "w", "utf-8")
</snippet></ROW><ROW><id>14251397</id><snippet>pythonscript.py --in_delimiter $'\t' --in_file input.txt
</snippet></ROW><ROW><id>14251406</id><snippet>connect</snippet></ROW><ROW><id>14251406</id><snippet>def single_shot_connect(signal, slot):
    def disconnect(*args, **kwargs):
        signal.disconnect(slot)
        signal.disconnect(disconnect)
    signal.connect(slot)
    signal.connect(disconnect)
</snippet></ROW><ROW><id>14251406</id><snippet>signal</snippet></ROW><ROW><id>14251406</id><snippet>slot</snippet></ROW><ROW><id>14251406</id><snippet>disconnect</snippet></ROW><ROW><id>14251406</id><snippet>slot</snippet></ROW><ROW><id>14251406</id><snippet>import sys
from PySide import QtCore

class Foo(QtCore.QObject):
    sig = QtCore.Signal(int)

def bar():
    print 'running bar'


def single_shot_connect(signal, slot):
    def disconnect(*args, **kwargs):
        signal.disconnect(slot)
        signal.disconnect(disconnect)
    signal.connect(slot)
    signal.connect(disconnect)



if __name__ == '__main__':
    app = QtCore.QCoreApplication(sys.argv)

    foo = Foo()
    single_shot_connect(foo.sig, bar)

    foo.sig.emit(1)
    foo.sig.emit(2)

    QtCore.QTimer.singleShot(1000, app.exit)

    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14251640</id><snippet>permutations</snippet></ROW><ROW><id>14251640</id><snippet>itertools</snippet></ROW><ROW><id>14251640</id><snippet>&gt;&gt;&gt; from itertools import permutations
&gt;&gt;&gt;
&gt;&gt;&gt; l = [1,2,3]
&gt;&gt;&gt; all_permutations = []
&gt;&gt;&gt; for i in range(2, len(l) + 1):
...     all_permutations.extend(list(permutations(l, i)))
...
&gt;&gt;&gt; all_permutations.extend(l)
&gt;&gt;&gt; all_permutations
[(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2), (1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1), 1, 2, 3]
</snippet></ROW><ROW><id>14251795</id><snippet>instance</snippet></ROW><ROW><id>14251795</id><snippet>def model_saved(sender, **kwargs):
    send_mail('Subject here', 'Here is the message.', 'from@example.com',
    ['ndhiman08@gmail.com'], fail_silently=False)
    abc_obj = kwargs['instance']
    #can use fields as 
    #abc_obj.somefield
    print "SAVED",sender,kwargs
</snippet></ROW><ROW><id>14251919</id><snippet>format</snippet></ROW><ROW><id>14251919</id><snippet>import sys
import math
import winsound

#Define menu function
def menu():                     
    '''This function prints the main menu''' # this is a docstring for your method
    print "\nMils / Degrees Conversion Calculator"
    print "-" * 38
    print "\nOptions: "
    print "1. Degrees to Mils\n"
    print "2. Mils to Degrees\n"
    print "3. Quit\n"
    print "-" * 20
    print "\n"


#Define mils to degrees function    
def mils_to_degrees(a): # use method names that make sense
    '''This function takes mils and converts them into degrees'''
    b = 17.78
    c = round((a / b),0)    #convert and round to nearest degree  
    if c &gt; 359 or c &lt; 1:    #change 0 degrees to 360               
        c = 360
    return (a,int(c))

#define degrees to mils function        
def degrees_to_mils(b):
    '''This method converts degrees to mils'''
    a = 17.78
    if b == 0:
        b = 360
    c = round((b * a),0)        #math, same as above
    if c &gt; 6400:               #set limit to 6400 mils
        c = 6400
    return (b,c)

def check_input(user_input):
    '''Checks if the input is a number'''
    try:
        converted_number = int(user_input)
    except ValueError:
        return -1
    return converted_number

#Begin program
loop = True
while loop:
    menu()
    choice = int(raw_input("Choose your option: "))
    if choice not in [1,2,3]:
        winsound.Beep(440, 500)
        print choice, "is not a valid choice.\n"
        print "Please choose from the available options.\n"
        menu()
        choice = int(raw_input('Choose your option: '))

    if choice == 1:
        print "\nEnter your azimuth in degrees (0 - 360)\n"
        degrees = check_input(raw_input('Degrees: '))
        if degrees &gt; 360 or degrees &lt; 0:
            print 'Please enter a value between 0 and 360'
        else:
            result = degrees_to_mils(degrees) # function call
            print '{} degrees = {} mils'.format(*result)
            print "-" * 38

    elif choice == 2:               #If user chooses mils to degrees:
        print "\nEnter your azimuth in mils (1 - 6400)\n"
        mils = check_input(raw_input('Mils: '))
        if mils &gt; 6400 or mils &lt; 1:
            print 'Please enter a value between 1 and 6400'
        else:
            result = mils_to_degrees(mils)        #function call
            print '{} mils = {} degrees'.format(*result)
            print "-" * 38

    elif choice == 3: 
        loop = False

print "\n"
print "-" * 38
print "\nThank you for using Mil-Deg.py\n\n"
</snippet></ROW><ROW><id>14251922</id><snippet>for filename in ("%smanifest-%s.txt" % (prefix, a)
    for prefix in ['', 'tag'] for a in checksum_algos):
</snippet></ROW><ROW><id>14252346</id><snippet>hexpand</snippet></ROW><ROW><id>14252346</id><snippet>vexpand</snippet></ROW><ROW><id>14252346</id><snippet>GtkScrolledWindow</snippet></ROW><ROW><id>14252346</id><snippet>True</snippet></ROW><ROW><id>14252346</id><snippet>scroll = Gtk.ScrolledWindow(hexpand=True, vexpand=True)
</snippet></ROW><ROW><id>14253022</id><snippet># a is some list
b2 = [0]*len(a[0])
for x in a:
    for y in range(len(x)):
         b2[y] += x[y]
print(b2)
</snippet></ROW><ROW><id>14253414</id><snippet>Gerrit</snippet></ROW><ROW><id>14253414</id><snippet>repo</snippet></ROW><ROW><id>14253414</id><snippet>manifest.xml</snippet></ROW><ROW><id>14253414</id><snippet>repo upload</snippet></ROW><ROW><id>14253425</id><snippet>root = "testfolder/"</snippet></ROW><ROW><id>14253425</id><snippet>root = zipfile.ZipFile("/home/testuser/docs/testzip.zip", "r")</snippet></ROW><ROW><id>14253425</id><snippet>except Exception, ex:</snippet></ROW><ROW><id>14253425</id><snippet>ex.message</snippet></ROW><ROW><id>14253585</id><snippet>help('modules')</snippet></ROW><ROW><id>14253585</id><snippet>$ sw_vers -productVersion 
10.6.8
$ /usr/bin/python
Python 2.6.1 (r261:67515, Jun 24 2010, 21:47:49) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; help('modules')

Please wait a moment while I gather a list of all available modules...

/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/pkgutil.py:110: DeprecationWarning: twisted.flow is unmaintained.
  __import__(name)
/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/twisted/python/filepath.py:12: DeprecationWarning: the sha module is deprecated; use the hashlib module instead
  import sha
/System/Library/Frameworks/Python.framework/Versions/2.6/Extras/lib/python/twisted/words/im/__init__.py:8: UserWarning: twisted.im will be undergoing a rewrite at some point in the future.
  warnings.warn("twisted.im will be undergoing a rewrite at some point in the future.")
2013-01-10 09:36:31.224 Python[68800:b07] Error loading /Developer/Library/Frameworks/InterfaceBuilderKit.framework/InterfaceBuilderKit:  dlopen(/Developer/Library/Frameworks/InterfaceBuilderKit.framework/InterfaceBuilderKit, 265): Library not loaded: @rpath/DevToolsRemoteClient.framework/Versions/A/DevToolsRemoteClient
  Referenced from: /Developer/Library/Frameworks/InterfaceBuilderKit.framework/InterfaceBuilderKit
  Reason: image not found
/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/pkgutil.py:110: DeprecationWarning: The wxPython compatibility package is no longer automatically generated or actively maintained.  Please switch to the wx package as soon as possible.
  __import__(name)
AddressBook         _Win                dumbdbm             py2app
AppKit              __builtin__         dummy_thread        py_compile
AppleScriptKit      __future__          dummy_threading     pyclbr
Audio_mac           _abcoll             easy_install        pydoc
Automator           _ast                email               pydoc_topics
BaseHTTPServer      _bisect             encodings           pyexpat
Bastion             _builtinSuites      errno               pygame
CFNetwork           _bytesio            exceptions          quopri
CGIHTTPServer       _codecs             ez_setup            random
CalendarStore       _codecs_cn          fcntl               re
Canvas              _codecs_hk          fetchmailconf       readline
Carbon              _codecs_iso2022     filecmp             repr
Cocoa               _codecs_jp          fileinput           resource
CodeWarrior         _codecs_kr          findertools         rexec
Collaboration       _codecs_tw          fnmatch             rfc822
ColorPicker         _collections        formatter           rlcompleter
ConfigParser        _csv                fpformat            robotparser
Cookie              _ctypes             fractions           runpy
CoreData            _ctypes_test        ftplib              sched
CoreFoundation      _curses             functools           select
CoreGraphics        _curses_panel       future_builtins     sets
CoreText            _elementtree        gc                  setuptools
Dialog              _fileio             genericpath         sgmllib
DictionaryServices  _functools          gensuitemodule      sha
DocXMLRPCServer     _hashlib            gestalt             shelve
EasyDialogs         _heapq              getopt              shlex
ExceptionHandling   _hotshot            getpass             shutil
Explorer            _json               gettext             signal
FSEvents            _locale             glob                site
FileDialog          _lsprof             grp                 smtpd
Finder              _multibytecodec     gzip                smtplib
FixTk               _multiprocessing    hashlib             sndhdr
Foundation          _random             heapq               socket
FrameWork           _socket             hmac                sqlite3
HTMLParser          _sqlite3            hotshot             sre
IN                  _sre                htmlentitydefs      sre_compile
InputMethodKit      _ssl                htmllib             sre_constants
InstallerPlugins    _strptime           httplib             sre_parse
InstantMessage      _struct             ic                  ssl
InterfaceBuilderKit _symtable           icglue              stat
JavaScriptCore      _testcapi           icopen              statvfs
LatentSemanticMapping _threading_local    idlelib             string
LaunchServices      _tkinter            ihooks              stringold
MacOS               _warnings           imageop             stringprep
Message             _weakref            imaplib             strop
MimeWriter          abc                 imghdr              struct
MiniAEFrame         aepack              imp                 subprocess
Nav                 aetools             imputil             sunau
Netscape            aetypes             inspect             sunaudio
OSATerminology      aifc                io                  svn
OpenSSL             altgraph            itertools           symbol
PixMapWrapper       anydbm              json                symtable
PreferencePanes     applesingle         keyword             sys
PubSub              appletrawmain       lib2to3             syslog
PyObjCTools         appletrunner        libsvn              tabnanny
PyRSS2Gen           argvemulator        linecache           tarfile
QTKit               array               locale              telnetlib
Quartz              ast                 logging             tempfile
Queue               asynchat            macerrors           terminalcommand
ScreenSaver         asyncore            macholib            termios
ScriptingBridge     atexit              macostools          test
ScrolledText        audiodev            macpath             textwrap
SearchKit           audioop             macresource         this
SimpleDialog        autoGIL             macurl2path         thread
SimpleHTTPServer    base64              mailbox             threading
SimpleXMLRPCServer  bdb                 mailcap             time
SocketServer        bdist_mpkg          markupbase          timeit
StdSuites           bgenlocations       marshal             tkColorChooser
StringIO            binascii            math                tkCommonDialog
SyncServices        binhex              md5                 tkFileDialog
SystemConfiguration bisect              mhlib               tkFont
SystemEvents        bonjour             mimetools           tkMessageBox
Tix                 bsddb               mimetypes           tkSimpleDialog
Tkconstants         bsddb185            mimify              toaiff
Tkdnd               buildtools          mmap                token
Tkinter             bundlebuilder       modulefinder        tokenize
UserDict            bz2                 modulegraph         trace
UserList            cPickle             multifile           traceback
UserString          cProfile            multiprocessing     tty
VBoxPython2_5       cStringIO           mutex               turtle
VBoxPython2_6       calendar            netrc               twisted
WebKit              cfmfile             new                 types
XgridFoundation     cgi                 nis                 unicodedata
_AE                 cgitb               nntplib             unittest
_AH                 chunk               ntpath              urllib
_App                cmath               nturl2path          urllib2
_CF                 cmd                 numbers             urlparse
_CG                 code                numpy               user
_CarbonEvt          codecs              objc                uu
_Cm                 codeop              opcode              uuid
_Ctl                collections         operator            vboxapi
_Dlg                colorsys            optparse            vboxshell
_Drag               commands            os                  videoreader
_Evt                compileall          os2emxpath          warnings
_File               compiler            parser              wave
_Fm                 contextlib          pdb                 weakref
_Folder             cookielib           pickle              webbrowser
_Help               copy                pickletools         whichdb
_IBCarbon           copy_reg            pimp                wsgiref
_Icn                crypt               pipes               wx
_LWPCookieJar       csv                 pkg_resources       wxPython
_Launch             ctypes              pkgutil             wxaddons
_List               curses              platform            wxversion
_Menu               datetime            plistlib            xattr
_Mlte               dateutil            popen2              xdrlib
_MozillaCookieJar   dbhash              poplib              xml
_OSA                dbm                 posix               xmllib
_Qd                 decimal             posixfile           xmlrpclib
_Qdoffs             difflib             posixpath           xxsubtype
_Qt                 dircache            pprint              zipfile
_Res                dis                 profile             zipimport
_Scrap              distutils           pstats              zlib
_Snd                dl                  pty                 zope
_TE                 doctest             pwd                 

Enter any module name to get more help.  Or, type "modules spam" to search
for modules whose descriptions contain the word "spam".
</snippet></ROW><ROW><id>14253585</id><snippet>pygame</snippet></ROW><ROW><id>14253585</id><snippet>vboxapi</snippet></ROW><ROW><id>14253585</id><snippet>VBoxPython2_5</snippet></ROW><ROW><id>14253585</id><snippet>VBoxPython2_6</snippet></ROW><ROW><id>14253585</id><snippet>vboxapi</snippet></ROW><ROW><id>14253585</id><snippet>vboxshell</snippet></ROW><ROW><id>14253801</id><snippet>\(</snippet></ROW><ROW><id>14253801</id><snippet>\)</snippet></ROW><ROW><id>14253801</id><snippet>&gt;&gt;&gt; re.escape(text)
'devkit\\ \\\\\\(c\\\\\\)\\ 2012\\,\\ ARM\\-3\\.4\\.\\ aLL\\ DATA\\ conf'
</snippet></ROW><ROW><id>14253801</id><snippet>text</snippet></ROW><ROW><id>14253801</id><snippet>text="devkit (c) 2012, ARM-3.4. aLL DATA conf"
</snippet></ROW><ROW><id>14253801</id><snippet>/*</snippet></ROW><ROW><id>14253801</id><snippet>*/</snippet></ROW><ROW><id>14253801</id><snippet>pattern = re.compile(r'/\*(?:[^/]|(?&lt;!\*)/)*?' + re.escape(text) + r'(?:[^/]|/(?!\*))*?\*/')
</snippet></ROW><ROW><id>14253801</id><snippet>/*</snippet></ROW><ROW><id>14253801</id><snippet>/</snippet></ROW><ROW><id>14253801</id><snippet>*</snippet></ROW><ROW><id>14253801</id><snippet>/*</snippet></ROW><ROW><id>14253801</id><snippet>*</snippet></ROW><ROW><id>14253801</id><snippet>re.DOTALL</snippet></ROW><ROW><id>14253801</id><snippet>.</snippet></ROW><ROW><id>14253801</id><snippet>&gt;&gt;&gt; text = "devkit (c) 2012, ARM-3.4. aLL DATA conf"
&gt;&gt;&gt; pattern = re.compile(r'/\*(?:[^/]|(?&lt;!\*)/)*?' + re.escape(text) + r'(?:[^/]|/(?!\*))*?\*/')
&gt;&gt;&gt; pattern.sub("", string)
'/*\n * devkit (c) 2012-2013, ARM-3.4. aLL DATA conf.\n *\n\n *\n */\n\n\n#ifndef code_abc_WDI_H\n#define code_abc_WDI_H\n'
&gt;&gt;&gt; print pattern.sub("", input)
/*
 * devkit (c) 2012-2013, ARM-3.4. aLL DATA conf.
 *

 *
 */


#ifndef code_abc_WDI_H
#define code_abc_WDI_H
</snippet></ROW><ROW><id>14253886</id><snippet>from collections import namedtuple
MyType= namedtuple("MyType", "field1 method1")
x = MyType(field1="3", method1=lambda x: x+1)
print x.field1, x.method1(3)
</snippet></ROW><ROW><id>14254151</id><snippet>username:vim-scripts</snippet></ROW><ROW><id>14254151</id><snippet>language:python</snippet></ROW><ROW><id>14254212</id><snippet>os.system()</snippet></ROW><ROW><id>14254212</id><snippet>os.system()</snippet></ROW><ROW><id>14254212</id><snippet>system()</snippet></ROW><ROW><id>14254212</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>14254212</id><snippet>os.system("sleep 10")</snippet></ROW><ROW><id>14254212</id><snippet>subprocess.call(["sleep", "10"])</snippet></ROW><ROW><id>14254212</id><snippet>subprocess.call()</snippet></ROW><ROW><id>14254240</id><snippet>td</snippet></ROW><ROW><id>14254240</id><snippet>row.find('td')</snippet></ROW><ROW><id>14254240</id><snippet>a</snippet></ROW><ROW><id>14254240</id><snippet>.find('a')</snippet></ROW><ROW><id>14254240</id><snippet>dict</snippet></ROW><ROW><id>14254240</id><snippet>href</snippet></ROW><ROW><id>14254240</id><snippet>cell = row.find('td')
link = cell.find('a') if cell else None
if link is not None and 'href' in link:
    result[-1].append(link['href'])
</snippet></ROW><ROW><id>14254497</id><snippet>csv_type21 = Button(csvfiles, text = "Browse ...", command = lambda obj = var21, tid = 21: find_csvfile(obj, tid))
</snippet></ROW><ROW><id>14254518</id><snippet>from collections import defaultdict

d = defaultdict(list)
for m, x in main_dict.items():
    for k, v in x.items():
        d[k].append((m, v))
</snippet></ROW><ROW><id>14254671</id><snippet>print nx.dfs_successors(G,'A')

&gt;&gt; {A: [H,B], B:[C]}
</snippet></ROW><ROW><id>14254701</id><snippet>list comprehension</snippet></ROW><ROW><id>14254701</id><snippet>In [66]: with open("example.cnf") as f:
        print [map(int,line.split("0")[0].split()) for line in f if line and \
                            not (line.startswith("c") or line.startswith("p"))]
   ....:     
[[1, -3], [2, 3, -1]]
</snippet></ROW><ROW><id>14254701</id><snippet>with open("example.cnf") as f:
         x= lambda y,c:y.startswith(c)
         print [map(int,line.split("0")[0].split()) for line in f if line and \
                                not any(x(line,z) for z in ("c","p"))]
   ....:     
[[1, -3], [2, 3, -1]]
</snippet></ROW><ROW><id>14254791</id><snippet>contour</snippet></ROW><ROW><id>14254791</id><snippet>fig1 = figure(figsize=(4, 4), facecolor='white')
ax = fig1.add_subplot(111)
ax.contour(X, Y, Z)
</snippet></ROW><ROW><id>14254791</id><snippet>plt.subplots</snippet></ROW><ROW><id>14254791</id><snippet>import matplotlib.pyplot as plt

fig, ax = plt.subplots()
</snippet></ROW><ROW><id>14255281</id><snippet>rsync</snippet></ROW><ROW><id>14255281</id><snippet>rsync</snippet></ROW><ROW><id>14255281</id><snippet>destDir</snippet></ROW><ROW><id>14255281</id><snippet>exclude_list.txt</snippet></ROW><ROW><id>14255281</id><snippet>rsync -r --exclude-from 'exclude_list.txt' src dst
</snippet></ROW><ROW><id>14255281</id><snippet>-r</snippet></ROW><ROW><id>14255281</id><snippet>exclude_list.txt</snippet></ROW><ROW><id>14255281</id><snippet>rsync</snippet></ROW><ROW><id>14255281</id><snippet>-v</snippet></ROW><ROW><id>14255281</id><snippet>exclude_list.txt</snippet></ROW><ROW><id>14255281</id><snippet>exclude_list.txt</snippet></ROW><ROW><id>14255281</id><snippet>rsync</snippet></ROW><ROW><id>14255281</id><snippet>rsync</snippet></ROW><ROW><id>14255284</id><snippet>predict_proba</snippet></ROW><ROW><id>14255284</id><snippet>np.hstack((multinomial_probas, gaussian_probas))</snippet></ROW><ROW><id>14255887</id><snippet>class CharFieldWrapper(forms.CharField):

   def init(self, *args, **kwargs):
       kwargs['error_messages'] = {'required' : 'XXXX: YOU SHOULD PUT SOMETHING!' }
       super(CharFieldWrapper, self).init(*args, **kwargs)       
</snippet></ROW><ROW><id>14256002</id><snippet>cursor.execute("SELECT * FROM foo;")
for row in cursor:
    return row
# No row handling behind the loop.
return "No rows found"
</snippet></ROW><ROW><id>14256002</id><snippet>1</snippet></ROW><ROW><id>14256002</id><snippet>for</snippet></ROW><ROW><id>14256002</id><snippet>None</snippet></ROW><ROW><id>14256909</id><snippet>ord()</snippet></ROW><ROW><id>14256909</id><snippet>In [35]: str1="0Cell Phones: Smartphone,\x02\x05\x0e\x02\x05Mobile Phone - Best Buy13AT&amp;T Wireless: AT&amp;T Phones &amp; Cell Phone Plans - Best Buy4\x02\x05\x0e\x02\x05Cell Phones: Smartphone, Mobile Phone - Best Buy1\x02\x05\x0e\x02\x05AT&amp;T Wireless: AT&amp;T Phones &amp; Cell Phone Plans - Best Buy"

In [36]: "".join(x for x in str1 if 31 &lt; ord(x) &lt;127)

Out[36]: '0Cell Phones: Smartphone,Mobile Phone - Best Buy13AT&amp;T Wireless: AT&amp;T Phones &amp; Cell Phone Plans - Best Buy4Cell Phones: Smartphone, Mobile Phone - Best Buy1AT&amp;T Wireless: AT&amp;T Phones &amp; Cell Phone Plans - Best Buy'
</snippet></ROW><ROW><id>14256909</id><snippet>return</snippet></ROW><ROW><id>14256909</id><snippet>backspace</snippet></ROW><ROW><id>14256909</id><snippet>32-127</snippet></ROW><ROW><id>14256909</id><snippet>128-255</snippet></ROW><ROW><id>14256909</id><snippet>ord()</snippet></ROW><ROW><id>14256909</id><snippet>31 &lt; ord(x) &lt;127</snippet></ROW><ROW><id>14257036</id><snippet>In [27]: with open("test.txt") as fp:
   ....:     for line in fp:
   ....:         print repr(line)
   ....:         
'Aaa\tBbb\n'
'Foo\t0\n'
'Bar\t1\n'
'Baz\tNULL\n'

In [28]: pd.read_table("test.txt")
Out[28]: 
   Aaa  Bbb
0  Foo    0
1  Bar    1
2  Baz  NaN

In [29]: pd.__version__
Out[29]: '0.10.1.dev-f7f7e13'
</snippet></ROW><ROW><id>14257486</id><snippet>import</snippet></ROW><ROW><id>14257486</id><snippet>import</snippet></ROW><ROW><id>14257486</id><snippet>foo</snippet></ROW><ROW><id>14257486</id><snippet>foo</snippet></ROW><ROW><id>14257486</id><snippet>foo.module</snippet></ROW><ROW><id>14257486</id><snippet>foo</snippet></ROW><ROW><id>14257486</id><snippet>reload()</snippet></ROW><ROW><id>14257486</id><snippet>import</snippet></ROW><ROW><id>14257486</id><snippet>import foo</snippet></ROW><ROW><id>14257486</id><snippet>import bar</snippet></ROW><ROW><id>14257486</id><snippet>foo</snippet></ROW><ROW><id>14257486</id><snippet>bar</snippet></ROW><ROW><id>14257486</id><snippet>foo</snippet></ROW><ROW><id>14257486</id><snippet>bar</snippet></ROW><ROW><id>14257486</id><snippet>foo.bar</snippet></ROW><ROW><id>14257486</id><snippet>import bar</snippet></ROW><ROW><id>14257486</id><snippet>bar</snippet></ROW><ROW><id>14257486</id><snippet>import</snippet></ROW><ROW><id>14257486</id><snippet>ImportError</snippet></ROW><ROW><id>14257573</id><snippet>var = 'I need to be accessed by id!'
address = id(var)
print(address)
var2 = [x for x in globals().values() if id(x)==address]
</snippet></ROW><ROW><id>14257573</id><snippet>def get_by_address(address):
    return [x for x in globals().values() if id(x)==address]

var = 'I need to be accessed by id!'
address = id(var)
print(address)
var2 = get_by_address(address)
</snippet></ROW><ROW><id>14257599</id><snippet>reader</snippet></ROW><ROW><id>14257599</id><snippet>next(reader, None)</snippet></ROW><ROW><id>14257599</id><snippet>with open("tmob_notcleaned.csv", "rb") as infile, open("tmob_cleaned.csv", "wb") as outfile:
   reader = csv.reader(in_file)
   next(reader, None)  # skip the headers
   writer = csv.writer(out_file)
   for row in reader:
       # process each row
       writer.write(row)

# no need to close, the files are closed automatically when you get to this point.
</snippet></ROW><ROW><id>14257599</id><snippet>next()</snippet></ROW><ROW><id>14257599</id><snippet>writer.write()</snippet></ROW><ROW><id>14257599</id><snippet>headers = next(reader, None)  # returns the headers or `None` if the input is empty
if headers:
    writer.write(headers)
</snippet></ROW><ROW><id>14257743</id><snippet>dates = soup.findAll("div", {"id" : lambda L: L and L.startswith('date')})
</snippet></ROW><ROW><id>14257743</id><snippet>dates = soup.findAll("div", {"id" : re.compile('date.*')})
</snippet></ROW><ROW><id>14257743</id><snippet>.match()</snippet></ROW><ROW><id>14257756</id><snippet>from matplotlib.patches import Rectangle
import numpy as np
import pylab as P

xs = np.arange(0,10,0.1)
line1 = P.plot(xs,np.sin(xs),"r-", label="lower limit")[0]
line2 = P.plot(xs,np.sin(xs-1)+3,"b-", label="upper limit")[0]
P.fill_between(xs,np.sin(xs), np.sin(xs-1)+3,color='green', alpha=0.5, label="test")
rect = Rectangle((0, 0), 1, 1, fc="g", alpha=0.5)
P.legend([line1, line2, rect], ["lower limit", "upper limit", "green area"])
P.show()
</snippet></ROW><ROW><id>14257969</id><snippet>import threading

lock = threading.Lock()
...

with lock:
    #Open the file and write to it
</snippet></ROW><ROW><id>14257969</id><snippet>logging</snippet></ROW><ROW><id>14257969</id><snippet>Handler</snippet></ROW><ROW><id>14258069</id><snippet>from django.db import models

class VerboseName(str):
    def __init__(self, func):
        self.func = func

    def decode(self, encoding, erros):
        return self.func().decode(encoding, erros)

class UsedCoupons(models.Model):
    name = models.CharField(max_length=10)

    class Meta:
        verbose_name_plural = VerboseName(lambda: u"Used Coupons (%d)" % UsedCoupons.objects.all().count())
</snippet></ROW><ROW><id>14258151</id><snippet>eval()</snippet></ROW><ROW><id>14258151</id><snippet>NameError</snippet></ROW><ROW><id>14258151</id><snippet>SyntaxError</snippet></ROW><ROW><id>14258151</id><snippet>try:
    print(eval(line))
except (NameError, SyntaxError):
    print(line)
</snippet></ROW><ROW><id>14258151</id><snippet>eval()</snippet></ROW><ROW><id>14258151</id><snippet>except:</snippet></ROW><ROW><id>14258151</id><snippet>except Exception:</snippet></ROW><ROW><id>14258151</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>14258151</id><snippet>try:
    print(ast.literal_eval(line))
except ValueError:
    print(line)
</snippet></ROW><ROW><id>14258151</id><snippet>literal_eval</snippet></ROW><ROW><id>14258151</id><snippet>'string'</snippet></ROW><ROW><id>14258151</id><snippet>123</snippet></ROW><ROW><id>14258151</id><snippet>('some', 'more', [1, 2, 4.5], 'complex structure')</snippet></ROW><ROW><id>14258151</id><snippet>ValueError</snippet></ROW><ROW><id>14258151</id><snippet>eval()</snippet></ROW><ROW><id>14258151</id><snippet>ValueError</snippet></ROW><ROW><id>14258511</id><snippet>python --help</snippet></ROW><ROW><id>14258511</id><snippet>-u     : unbuffered binary stdout and stderr; also PYTHONUNBUFFERED=x
         see man page for details on internal buffering relating to '-u'
</snippet></ROW><ROW><id>14258511</id><snippet>-u     Force  stdin,  stdout and stderr to be totally unbuffered.  On systems where it matters, also put stdin,
       stdout and stderr in binary mode.  Note that there is internal buffering  in  xreadlines(),  readlines()
       and  file-object  iterators  ("for  line in sys.stdin") which is not influenced by this option.  To work
       around this, you will want to use "sys.stdin.readline()" inside a "while 1:" loop.
</snippet></ROW><ROW><id>14258511</id><snippet>-u</snippet></ROW><ROW><id>14258511</id><snippet>-u</snippet></ROW><ROW><id>14258511</id><snippet>\r\n</snippet></ROW><ROW><id>14258511</id><snippet>rb</snippet></ROW><ROW><id>14258511</id><snippet>wb</snippet></ROW><ROW><id>14258511</id><snippet>open()</snippet></ROW><ROW><id>14258764</id><snippet>states = {'draft':[('readonly','=',True)]}
</snippet></ROW><ROW><id>14258764</id><snippet>[('article','Product'),
            ('title','Title'),
            ('text','Note'),
            ('subtotal','Sub Total'),
            ('line','Separator Line'),
            ('break','Page Break'),]
</snippet></ROW><ROW><id>14258764</id><snippet>res = super(account_invoice_line, self).fields_get(cr, uid, fields, context)
for field in res:
    if states.has_key(field):
        for key,value in states[field].items():
            res[field].setdefault('states',{})
            res[field]['states'][key] = value
return res
</snippet></ROW><ROW><id>14258767</id><snippet>import re

isbn = re.compile("(?:[0-9]{3}-)?[0-9]{1,5}-[0-9]{1,7}-[0-9]{1,6}-[0-9]")

matches = []

with open("text_isbn") as isbn_lines:
    for line in isbn_lines:
        matches.extend(isbn.findall(line))
</snippet></ROW><ROW><id>14258802</id><snippet>ElementTree.py</snippet></ROW><ROW><id>14258802</id><snippet>_serialize_xml</snippet></ROW><ROW><id>14258802</id><snippet>        ##for k, v in sorted(items):  # remove the sorted here
        for k, v in items:
            if isinstance(k, QName):
                k = k.text
            if isinstance(v, QName):
                v = qnames[v.text]
            else:
                v = _escape_attrib(v, encoding)
            write(" %s=\"%s\"" % (qnames[k], v))
</snippet></ROW><ROW><id>14258802</id><snippet>sorted(items)</snippet></ROW><ROW><id>14258802</id><snippet>items</snippet></ROW><ROW><id>14258802</id><snippet>{}</snippet></ROW><ROW><id>14258802</id><snippet>collections.OrderedDict()</snippet></ROW><ROW><id>14258802</id><snippet>ElementTree.py</snippet></ROW><ROW><id>14258802</id><snippet>ElementTree.py</snippet></ROW><ROW><id>14259052</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>14259052</id><snippet>dict-comprehension</snippet></ROW><ROW><id>14259052</id><snippet>fromkeys()</snippet></ROW><ROW><id>14259052</id><snippet>In [27]: lis=['a','b','c','d']

In [28]: dic={x:0 for x in lis}

In [29]: dic
Out[29]: {'a': 0, 'b': 0, 'c': 0, 'd': 0}
</snippet></ROW><ROW><id>14259052</id><snippet>In [30]: dic=dict((x,0) for x in lis)

In [31]: dic
Out[31]: {'a': 0, 'b': 0, 'c': 0, 'd': 0}
</snippet></ROW><ROW><id>14259052</id><snippet>timeit</snippet></ROW><ROW><id>14259052</id><snippet>In [38]: %timeit dict.fromkeys(xrange(10000),0)         # winner
1000 loops, best of 3: 1.4 ms per loop

In [39]: %timeit {x:0 for x in xrange(10000)}
100 loops, best of 3: 2.08 ms per loop

In [40]: %timeit dict((x,0) for x in xrange(10000))
100 loops, best of 3: 4.63 ms per loop
</snippet></ROW><ROW><id>14259052</id><snippet>fromkeys()</snippet></ROW><ROW><id>14259052</id><snippet>dict-comprehensions</snippet></ROW><ROW><id>14259052</id><snippet>In [42]: dic=dict.fromkeys(lis,[])

In [43]: [id(x) for x in dic.values()]
Out[43]: [165420716, 165420716, 165420716, 165420716] # all point to a same object

In [44]: dic= {x:[] for x in lis}

In [45]: [id(x) for x in dic.values()]
Out[45]: [165420780, 165420940, 163062700, 163948812]  # unique objects
</snippet></ROW><ROW><id>14259108</id><snippet>import numpy as np
grid_shape = (4,5)
N = np.prod(grid_shape)

y = np.add.outer(np.arange(grid_shape[0]),np.arange(grid_shape[1]))
print(y)

# [[0 1 2 3 4]
#  [1 2 3 4 5]
#  [2 3 4 5 6]
#  [3 4 5 6 7]]
</snippet></ROW><ROW><id>14259108</id><snippet>np.argsort</snippet></ROW><ROW><id>14259108</id><snippet>idx = np.argsort(y.ravel())
print(idx)
# [ 0  1  5  2  6 10  3  7 11 15  4  8 12 16  9 13 17 14 18 19]
</snippet></ROW><ROW><id>14259108</id><snippet>idx</snippet></ROW><ROW><id>14259108</id><snippet>A</snippet></ROW><ROW><id>14259108</id><snippet>argsort</snippet></ROW><ROW><id>14259108</id><snippet>print(np.argsort(idx).reshape(grid_shape[0],-1))
# [[ 0  1  3  6 10]
#  [ 2  4  7 11 14]
#  [ 5  8 12 15 17]
#  [ 9 13 16 18 19]]
</snippet></ROW><ROW><id>14259108</id><snippet>A</snippet></ROW><ROW><id>14259108</id><snippet>A = np.zeros(grid_shape)
A1d = A.ravel()
A1d[idx] = np.arange(N)  # you can change np.arange(N) to any 1D array of shape (N,)
print(A)
# [[  0.   1.   3.   6.  10.]
#  [  2.   4.   7.  11.  15.]
#  [  5.   8.  12.  16.  18.]
#  [  9.  13.  14.  17.  19.]]
</snippet></ROW><ROW><id>14259108</id><snippet>for i, j in enumerate(idx):
   A1d[j] = i

print(A)
# [[  0.   1.   3.   6.  10.]
#  [  2.   4.   7.  11.  15.]
#  [  5.   8.  12.  16.  18.]
#  [  9.  13.  14.  17.  19.]]
</snippet></ROW><ROW><id>14259322</id><snippet>GObject.threads_init()</snippet></ROW><ROW><id>14259408</id><snippet>header = "Header！\n"
header_bytes = bytes(header, 'utf-8')
socketData.sendall(header_bytes + image_data)
</snippet></ROW><ROW><id>14259408</id><snippet>bytes</snippet></ROW><ROW><id>14259408</id><snippet>bytes</snippet></ROW><ROW><id>14260013</id><snippet>exlimit</snippet></ROW><ROW><id>14260241</id><snippet>xpath</snippet></ROW><ROW><id>14260241</id><snippet>root=LH.fromstring(html)
[t.xpath('.//td[not(contains(.,"\n"))]/text()')
    for t in root.xpath('.//table[@bgcolor="#dddddd"]')]
</snippet></ROW><ROW><id>14260241</id><snippet>[['Admins', 'me', 'myself', 'irene'], ['guests', 'hin', 'hinself', 'bacon']]
</snippet></ROW><ROW><id>14260441</id><snippet>collections.Counter</snippet></ROW><ROW><id>14260441</id><snippet>import collections

with open('results.txt') as infile:
    counts = collections.Counter(l.strip() for l in infile)
for line, count in counts.most_common():
    print line, count
</snippet></ROW><ROW><id>14260512</id><snippet>\x00</snippet></ROW><ROW><id>14260512</id><snippet>self.rfile.readline().decode("utf_16_be").strip()
</snippet></ROW><ROW><id>14260533</id><snippet>recv()</snippet></ROW><ROW><id>14260533</id><snippet>while</snippet></ROW><ROW><id>14260533</id><snippet>msg = ''
while True:
    msg += server.recv(8192)
    while True:
        aSplit = msg.partition("&lt;/packet&gt;")
        if not aSplit[1]:
            break
        messagehandler(aSplit[0] + "&lt;/packet&gt;")
        msg = aSplit[2]
</snippet></ROW><ROW><id>14260533</id><snippet>&lt;/packet&gt;</snippet></ROW><ROW><id>14260533</id><snippet>partition()</snippet></ROW><ROW><id>14260533</id><snippet>partition()</snippet></ROW><ROW><id>14260533</id><snippet>msg</snippet></ROW><ROW><id>14260533</id><snippet>msg</snippet></ROW><ROW><id>14260533</id><snippet>msg</snippet></ROW><ROW><id>14260533</id><snippet>&lt;/packet&gt;</snippet></ROW><ROW><id>14260631</id><snippet>queue_feed</snippet></ROW><ROW><id>14260631</id><snippet>return</snippet></ROW><ROW><id>14260631</id><snippet>def queue_feed(work, job):
    source = simplejson.loads(job.data)
    print source
    return source
</snippet></ROW><ROW><id>14260631</id><snippet>None</snippet></ROW><ROW><id>14260631</id><snippet>NoneType</snippet></ROW><ROW><id>14260683</id><snippet>requests</snippet></ROW><ROW><id>14260683</id><snippet>requests</snippet></ROW><ROW><id>14260683</id><snippet>flask</snippet></ROW><ROW><id>14261070</id><snippet>from StringIO import StringIO
import unittest
import urllib

import cherrypy

local = cherrypy.lib.httputil.Host('127.0.0.1', 50000, "")
remote = cherrypy.lib.httputil.Host('127.0.0.1', 50001, "")

class Root(object):
    @cherrypy.expose
    def index(self):
        return "hello world"

    @cherrypy.expose
    def echo(self, msg):
        return msg

def setUpModule():
    cherrypy.config.update({'environment': "test_suite"})

    # prevent the HTTP server from ever starting
    cherrypy.server.unsubscribe()

    cherrypy.tree.mount(Root(), '/')
    cherrypy.engine.start()
setup_module = setUpModule

def tearDownModule():
    cherrypy.engine.exit()
teardown_module = tearDownModule

class BaseCherryPyTestCase(unittest.TestCase):
    def webapp_request(self, path='/', method='GET', **kwargs):
        headers = [('Host', '127.0.0.1')]
        qs = fd = None

        if method in ['POST', 'PUT']:
            qs = urllib.urlencode(kwargs)
            headers.append(('content-type', 'application/x-www-form-urlencoded'))
            headers.append(('content-length', '%d' % len(qs)))
            fd = StringIO(qs)
            qs = None
        elif kwargs:
            qs = urllib.urlencode(kwargs)

        # Get our application and run the request against it
        app = cherrypy.tree.apps['']
        # Let's fake the local and remote addresses
        # Let's also use a non-secure scheme: 'http'
        request, response = app.get_serving(local, remote, 'http', 'HTTP/1.1')
        try:
            response = request.run(method, path, qs, 'HTTP/1.1', headers, fd)
        finally:
            if fd:
                fd.close()
                fd = None

        if response.output_status.startswith('500'):
            print response.body
            raise AssertionError("Unexpected error")

        # collapse the response into a bytestring
        response.collapse_body()
        return response

class TestCherryPyApp(BaseCherryPyTestCase):
    def test_index(self):
        response = self.webapp_request('/')
        self.assertEqual(response.output_status, '200 OK')
        # response body is wrapped into a list internally by CherryPy
        self.assertEqual(response.body, ['hello world'])

    def test_echo(self):
        response = self.webapp_request('/echo', msg="hey there")
        self.assertEqual(response.output_status, '200 OK')
        self.assertEqual(response.body, ["hey there"])

        response = self.webapp_request('/echo', method='POST', msg="hey there")
        self.assertEqual(response.output_status, '200 OK')
        self.assertEqual(response.body, ["hey there"])

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>14261126</id><snippet>with open('test.txt') as f:
    print [line.strip().split(']')[-1] for i,line in enumerate(f) if i in [1,8]]
</snippet></ROW><ROW><id>14261126</id><snippet>['BBBBBB', '2222222']
</snippet></ROW><ROW><id>14261163</id><snippet>ObjectDoesNotExist</snippet></ROW><ROW><id>14261163</id><snippet>DoesNotExist</snippet></ROW><ROW><id>14261163</id><snippet>self.DoesNotExist</snippet></ROW><ROW><id>14261163</id><snippet>Exception</snippet></ROW><ROW><id>14261163</id><snippet>from django.core.exceptions import ObjectDoesNotExist</snippet></ROW><ROW><id>14261366</id><snippet>for r in db.hello.find(fields=['text', 'timestamp']):
     print '"%s","%s"' % (r['text'], r['timestamp'].strftime('%H:%M:%S'))
</snippet></ROW><ROW><id>14261366</id><snippet>with open(output, 'w') as fp:
   for r in db.hello.find(fields=['text', 'timestamp']):
       print &gt;&gt;fp, '"%s","%s"' % (r['text'], r['timestamp'].strftime('%H:%M:%S'))
</snippet></ROW><ROW><id>14261366</id><snippet>recs = {}
for r in d.foo.find(fields=['data', 'timestamp']):
    text, time = r['data']['text'], r['timestamp']
    if text not in recs or recs[text] &lt; time:
        recs[text] = time
</snippet></ROW><ROW><id>14261366</id><snippet>for text, time in recs.items():
    print '"%s","%s"' % (text, time.strftime('%H:%M:%S'))
</snippet></ROW><ROW><id>14261403</id><snippet>shape</snippet></ROW><ROW><id>14261403</id><snippet>IntVar</snippet></ROW><ROW><id>14261403</id><snippet>from Tkinter import *
master = Tk()
shape = IntVar() # ensure you use an instance of IntVar
Radiobutton(text='Circle', variable=shape, indicatoron=0, value=1, master=master).pack()
Radiobutton(text='Rectangle', variable=shape, indicatoron=0, value=2, master=master).pack()
Radiobutton(text='Arc', variable=shape, indicatoron=0, value=3, master=master).pack()
</snippet></ROW><ROW><id>14261403</id><snippet>shape.get()</snippet></ROW><ROW><id>14262055</id><snippet>In [79]: '{:.{s}f}'.format(1.234, s = 2)
Out[79]: '1.23'

In [80]: '{:.{s}f}'.format(1.234, s = 3)
Out[80]: '1.234'
</snippet></ROW><ROW><id>14262118</id><snippet>QObject</snippet></ROW><ROW><id>14262118</id><snippet>QObject</snippet></ROW><ROW><id>14262151</id><snippet>EINTR</snippet></ROW><ROW><id>14262151</id><snippet>sleep()</snippet></ROW><ROW><id>14262151</id><snippet>EINTR</snippet></ROW><ROW><id>14262151</id><snippet>get()</snippet></ROW><ROW><id>14262151</id><snippet>import errno

def my_queue_get(queue, block=True, timeout=None):
    while True:
        try:
            return queue.get(block, timeout)
        except IOError, e:
            if e.errno != errno.EINTR:
                raise
</snippet></ROW><ROW><id>14262151</id><snippet>EINTR</snippet></ROW><ROW><id>14262151</id><snippet>SIGHUP</snippet></ROW><ROW><id>14262151</id><snippet>EINTR</snippet></ROW><ROW><id>14262151</id><snippet>EINTR</snippet></ROW><ROW><id>14262272</id><snippet>dict</snippet></ROW><ROW><id>14262272</id><snippet>max</snippet></ROW><ROW><id>14262272</id><snippet>key</snippet></ROW><ROW><id>14262272</id><snippet>sum</snippet></ROW><ROW><id>14262272</id><snippet>&gt;&gt;&gt; shops = dict()
&gt;&gt;&gt; shops['foodmart'] = [12.33,5.55]
&gt;&gt;&gt; shops['nike'] = [42.20,69.99]
&gt;&gt;&gt; shops['gas_station'] = [0.89,45.22]
&gt;&gt;&gt; shops['toy_store'] = [10.99,15.32]
&gt;&gt;&gt; max(shops, key = lambda k:sum(shops[k]))
'nike'
</snippet></ROW><ROW><id>14262411</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm
x = np.linspace(-4,4,150)
# plot density with shaded area showing Pr(-2 &lt;= x &lt;= 1)
lb = -2
ub = 1
d = norm.pdf(x)
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.plot(x, d)

idx = np.searchsorted(x,[lb,ub])
sx = x[idx[0]:idx[1]]
sd = d[idx[0]:idx[1]]
plt.fill_between(sx, sd, 0, color = 'b')
plt.show()
</snippet></ROW><ROW><id>14262462</id><snippet>$ pip search yaml
</snippet></ROW><ROW><id>14262462</id><snippet>$ pip install pyyaml
</snippet></ROW><ROW><id>14262462</id><snippet>aptitude</snippet></ROW><ROW><id>14262462</id><snippet>yum</snippet></ROW><ROW><id>14262462</id><snippet>$ sudo apt-get install python-yaml
$ sudo yum install python-yaml
</snippet></ROW><ROW><id>14262529</id><snippet>append()</snippet></ROW><ROW><id>14262529</id><snippet>coordList.append([segmentedLine[xValueIndex], segmentedLine[yValueIndex]])
</snippet></ROW><ROW><id>14262529</id><snippet># Append separately
coordList.append(segmentedLine[xValueIndex])
coordList.append(segmentedLine[yValueIndex])

# Use extend()
coordList.extend([segmentedLine[xValueIndex], segmentedLine[yValueIndex]])
</snippet></ROW><ROW><id>14262529</id><snippet>coordList2 = [[x.strip(' ') for x in y] for y in coordList]
</snippet></ROW><ROW><id>14262743</id><snippet>&gt;&gt;&gt; A=np.random.randint(5,size=(10,3))
&gt;&gt;&gt; A
array([[1, 3, 0],
       [3, 2, 0],
       [0, 2, 1],
       [1, 1, 4],
       [3, 2, 2],
       [0, 1, 0],
       [1, 3, 1],
       [0, 4, 1],
       [2, 4, 2],
       [3, 3, 1]])
&gt;&gt;&gt; B=np.random.randint(10,size=2)
&gt;&gt;&gt; B
array([7, 6])
&gt;&gt;&gt; A[B,:]
array([[0, 4, 1],
       [1, 3, 1]])
&gt;&gt;&gt; A[np.random.randint(10,size=2),:]
array([[3, 2, 2],
       [0, 2, 1]])
</snippet></ROW><ROW><id>14262743</id><snippet>A[np.random.randint(A.shape[0],size=2),:]
</snippet></ROW><ROW><id>14262743</id><snippet>a[np.random.choice(A.shape[0], 2, replace=False),:]
</snippet></ROW><ROW><id>14262856</id><snippet>__init__.py</snippet></ROW><ROW><id>14262856</id><snippet>import subdirectory.foo
</snippet></ROW><ROW><id>14262856</id><snippet>from subdirectory import foo
</snippet></ROW><ROW><id>14262955</id><snippet>'mydatabase'</snippet></ROW><ROW><id>14262955</id><snippet>'mydatabase'</snippet></ROW><ROW><id>14263486</id><snippet>request_type</snippet></ROW><ROW><id>14263486</id><snippet>categories = (
    (category1, dispatch1method), 
    (category2, dispatch2method),
    (category3, dispatch3method),
    (category4, dispatch4method),
    (category5, dispatch5method),
)

next(method for cat, method in categories if request_type in cat)(arguments)
</snippet></ROW><ROW><id>14263486</id><snippet>dict()</snippet></ROW><ROW><id>14263486</id><snippet>category_dispatch = {}
for cat, dispatch in categories:
    category_dispatch.update(dict.fromkeys(cat.keys(), dispatch))
</snippet></ROW><ROW><id>14263486</id><snippet>category_dispatch[request_type](arguments)
</snippet></ROW><ROW><id>14263486</id><snippet>category_dispatch = {}
for cat, dispatch in reversed(categories):
    category_dispatch.update(dict.fromkeys(cat.keys(), dispatch))
</snippet></ROW><ROW><id>14263486</id><snippet>request_type</snippet></ROW><ROW><id>14263486</id><snippet>category_dispatch</snippet></ROW><ROW><id>14263486</id><snippet>category*</snippet></ROW><ROW><id>14263486</id><snippet>category_dispatch</snippet></ROW><ROW><id>14263531</id><snippet>shops['foodmart'].remove(min(shops["foodmart"]))
</snippet></ROW><ROW><id>14263531</id><snippet>for shop in shops :
    shops[shop].remove(min(shops[shop]))
</snippet></ROW><ROW><id>14263531</id><snippet>shops[shop]</snippet></ROW><ROW><id>14263531</id><snippet>for prices in shops.values():
    prices.remove(min(prices))
</snippet></ROW><ROW><id>14263566</id><snippet>In [100]: tuplelist = [(4, 180, 21), (5, 90, 10), (3, 270, 8), (4, 0, 7)]

In [101]: tuplelist2dict = {a:{b:c} for a,b,c in tuplelist}

In [102]: tuplelist2dict
Out[102]: {3: {270: 8}, 4: {0: 7}, 5: {90: 10}}
</snippet></ROW><ROW><id>14263566</id><snippet>In [26]: tuplelist2dict = dict((a,{b:c}) for a,b,c in tuplelist)
</snippet></ROW><ROW><id>14263566</id><snippet>tuplelist2dict</snippet></ROW><ROW><id>14263606</id><snippet>httplib.HTTPConnection.send()</snippet></ROW><ROW><id>14263606</id><snippet>In [13]: httplib.HTTPConnection.send??
Type:       instancemethod
String Form:&lt;unbound method HTTPConnection.send&gt;
File:       /usr/local/lib/python2.7/httplib.py
Definition: httplib.HTTPConnection.send(self, data)
Source:
    def send(self, data):
        """Send `data' to the server."""
        if self.sock is None:
            if self.auto_open:
                self.connect()
            else:
                raise NotConnected()

        if self.debuglevel &gt; 0:
            print "send:", repr(data)
        blocksize = 8192
        if hasattr(data,'read') and not isinstance(data, array):
            if self.debuglevel &gt; 0: print "sendIng a read()able"
            datablock = data.read(blocksize)
            while datablock:
                self.sock.sendall(datablock)
                datablock = data.read(blocksize)
        else:
            self.sock.sendall(data)
</snippet></ROW><ROW><id>14263606</id><snippet>request()</snippet></ROW><ROW><id>14263606</id><snippet>HTTPConnection</snippet></ROW><ROW><id>14263606</id><snippet>import httplib
conn = httplib.HTTPConnection('127.0.0.1')
conn.send(open(filename))
response = conn.getresponse()
</snippet></ROW><ROW><id>14263606</id><snippet>httplib</snippet></ROW><ROW><id>14263606</id><snippet>http.client</snippet></ROW><ROW><id>14263606</id><snippet>import httplib
conn = httplib.HTTPConnection('www.google.com')
conn.send('GET / HTTP/1.1\r\nHost: www.google.com\r\n\r\n')
conn._HTTPConnection__state = httplib._CS_REQ_SENT
response = conn.getresponse()
</snippet></ROW><ROW><id>14263606</id><snippet>conn.__state</snippet></ROW><ROW><id>14263606</id><snippet>httplib._CS_REQ_SENT</snippet></ROW><ROW><id>14263606</id><snippet>send()</snippet></ROW><ROW><id>14263905</id><snippet>dict</snippet></ROW><ROW><id>14263905</id><snippet>params = {'apple': apple}
if orange is not None:
    params['orange'] = orange
params = urllib.urlencode(params)
</snippet></ROW><ROW><id>14263905</id><snippet>params = urllib.urlencode({k: v for k, v in (('orange', orange), ('apple', apple)) if v is not None})
</snippet></ROW><ROW><id>14264095</id><snippet>import sys
import math
from PIL import Image, ImageOps, ImageDraw

orig = ImageOps.grayscale(Image.open(sys.argv[1]))
orig_bin = orig.point(lambda x: 0 if x &lt; 128 else 255)
im = orig_bin.load()

border = Image.new('1', orig.size, 'white')
width, height = orig.size
bim = border.load()
# Keep only border points
for x in xrange(width):
    for y in xrange(height):
        if im[x, y] == 255:
            continue
        if im[x+1, y] or im[x-1, y] or im[x, y+1] or im[x, y-1]:
            bim[x, y] = 0
        else:
            bim[x, y] = 255

# Find each border (the trivial dummy way).
def follow_border(im, x, y, used):
    work = [(x, y)]
    border = []
    while work:
        x, y = work.pop()
        used.add((x, y))
        border.append((x, y))
        for dx, dy in ((1, 0), (-1, 0), (0, 1), (0, -1),
                (1, 1), (-1, -1), (1, -1), (-1, 1)):
            px, py = x + dx, y + dy
            if im[px, py] == 255 or (px, py) in used:
                continue
            work.append((px, py))

    return border

used = set()
border = []
for x in xrange(width):
    for y in xrange(height):
        if bim[x, y] == 255 or (x, y) in used:
            continue
        b = follow_border(bim, x, y, used)
        border.append(b)

# Find the corners and centroid of each rectangle.
rectangle = []
for b in border:
    xmin, xmax, ymin, ymax = width, 0, height, 0
    mean_x, mean_y = 0, 0
    b = sorted(b)
    top_left, bottom_right = b[0], b[-1]
    for x, y in b:
        mean_x += x
        mean_y += y
    centroid = (mean_x / float(len(b)), mean_y / float(len(b)))
    b = sorted(b, key=lambda x: x[1])
    curr = 0
    while b[curr][1] == b[curr + 1][1]:
        curr += 1
    top_right = b[curr]
    curr = len(b) - 1
    while b[curr][1] == b[curr - 1][1]:
        curr -= 1
    bottom_left = b[curr]

    rectangle.append([
        [top_left, top_right, bottom_right, bottom_left], centroid])


result = orig.convert('RGB')
draw = ImageDraw.Draw(result)
for corner, centroid in rectangle:
    draw.line(corner + [corner[0]], fill='red', width=2)
    cx, cy = centroid
    draw.ellipse((cx - 2, cy - 2, cx + 2, cy + 2), fill='red')
    rotation = math.atan2(corner[0][1] - corner[1][1],
            corner[1][0] - corner[0][0])
    rdeg = math.degrees(rotation)
    draw.text((cx + 10, cy), text='%.2f' % rdeg)

result.save(sys.argv[2])
</snippet></ROW><ROW><id>14264141</id><snippet>.stripped_strings</snippet></ROW><ROW><id>14264141</id><snippet>print u' '.join(link.stripped_strings)
</snippet></ROW><ROW><id>14264141</id><snippet>str()</snippet></ROW><ROW><id>14264141</id><snippet>unicode()</snippet></ROW><ROW><id>14264141</id><snippet>print u''.join(unicode(item) for item in link)
</snippet></ROW><ROW><id>14264141</id><snippet>Element</snippet></ROW><ROW><id>14264141</id><snippet>NavigableString</snippet></ROW><ROW><id>14264306</id><snippet>filename</snippet></ROW><ROW><id>14264306</id><snippet>content</snippet></ROW><ROW><id>14264306</id><snippet>class MyParser(object):
    def __setattr__(self, k, v):
        if k in ['filename', 'content']:
            super(MyParser, self).__setattr__(k, v)
        else:
                # mydict.update(mynewattr) # dict handles other attrs
</snippet></ROW><ROW><id>14264325</id><snippet>nonlocal</snippet></ROW><ROW><id>14264325</id><snippet>nonlocal</snippet></ROW><ROW><id>14264325</id><snippet>$ python3.3
Python 3.3.0 (default, Sep 29 2012, 08:16:08) 
[GCC 4.2.1 Compatible Apple Clang 3.1 (tags/Apple/clang-318.0.58)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def outer():
...    x = 1
...    def inner():
...        nonlocal x
...        x = 2
...        print("inner:", x)
...    inner()
...    print("outer:", x)
... 
</snippet></ROW><ROW><id>14264885</id><snippet>        cursor = connection.cursor()
        cursor.execute(my_select)
        results = cursor.fetchall()

        x = cursor.description
        resultsList = []   
        for r in results:
            i = 0
            d = {}
            while i &lt; len(x):
                d[x[i][0]] = r[i]
                i = i+1
            resultsList.append(d)

        return render_to_response(my_template, {"results":resultsList})
</snippet></ROW><ROW><id>14264961</id><snippet>Hover1.bind("&lt;Enter&gt;", lambda event, h=Hover1: h.configure(bg="red"))
</snippet></ROW><ROW><id>14265003</id><snippet>r'^\!+'</snippet></ROW><ROW><id>14265003</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; regex = re.compile(r'^\!+')
&gt;&gt;&gt; regex.match("!foo")
&lt;_sre.SRE_Match object at 0xcb6b0&gt;
&gt;&gt;&gt; regex.match("!!foo")
&lt;_sre.SRE_Match object at 0xcb6e8&gt;
&gt;&gt;&gt; regex.match("!!!foo")
&lt;_sre.SRE_Match object at 0xcb6b0&gt;
</snippet></ROW><ROW><id>14265003</id><snippet>!</snippet></ROW><ROW><id>14265003</id><snippet>r'^\!{1,2}'</snippet></ROW><ROW><id>14265003</id><snippet>&gt;&gt;&gt; regex = re.compile(r'^\!{1,2}')
&gt;&gt;&gt; regex.match('!!!foo').group(0)  #only matches 2 of the exclamation points.
'!!'
&gt;&gt;&gt; regex.match('!foo').group(0)
'!'
&gt;&gt;&gt; regex.match('!!foo').group(0)
'!!'
</snippet></ROW><ROW><id>14265086</id><snippet>import gtk
import urllib2
class Display(object):

    def __init__(self):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.connect('destroy', self.destroy)
        self.window.set_border_width(10)

        # a box underneath would be added every time you do 
        # vbox.pack_start(new_widget)

        vbox = gtk.VBox()
        self.image = gtk.Image()
        response = urllib2.urlopen('http://1.bp.blogspot.com/-e-rzcjuCpk8/T3H-mSry7PI/AAAAAAAAOrc/Z3XrqSQNrSA/s1600/rubberDuck.jpg').read()

        pbuf = gtk.gdk.PixbufLoader()
        pbuf.write(response)
        pbuf.close()
        self.image.set_from_pixbuf(pbuf.get_pixbuf())

        self.window.add(vbox)
        vbox.pack_start(self.image, False)
        self.entry = gtk.Entry()
        vbox.pack_start(self.entry, False)

        self.image.show()
        self.window.show_all()

    def main(self):
        gtk.main()

    def destroy(self, widget, data=None):
        gtk.main_quit()

a=Display()
a.main()
</snippet></ROW><ROW><id>14265226</id><snippet>header</snippet></ROW><ROW><id>14265226</id><snippet>import audiotools

f = audiotools.open(filename)
try:
    result = f.verify()
except audiotools.InvalidFile:
    # Invalid file.
    print("Invalid File")
else:
    # Valid file.
    print("Valid File")
</snippet></ROW><ROW><id>14265226</id><snippet>verify</snippet></ROW><ROW><id>14265229</id><snippet>window.phones
window.rates
window.discounts
window.goodies
window.promotions
</snippet></ROW><ROW><id>14265229</id><snippet>windows.phones</snippet></ROW><ROW><id>14265229</id><snippet>window.phones = {
    sku1224225:{
        name:"Samsung Galaxy SIII Blau 16 GB",
        image:"/images/m1057472_300599.jpg",
        deliveryTime:"Lieferbar innerhalb 48 Stunden",
        sku1444275:{p:"prod1334441",e:"49.90"}, // "Vodafone Red S"
        sku1444283:{p:"prod1334441",e:"9.90"},  // "Vodafone Red M"
        sku1444291:{p:"prod1334441",e:"9.90"},  // "Vodafone Red Premium"
        sku1444286:{p:"prod1334441",e:"9.90"},  // "Vodafone Red L"
        sku1104261:{p:"prod1334441",e:"99.90"}  // "Vodafone Basic 100"
    },
    // . . .
}
</snippet></ROW><ROW><id>14265229</id><snippet>window.rates</snippet></ROW><ROW><id>14265229</id><snippet>window.rates = {
    sku1444279:{
        label:"Vodafone Red M",
        propId:"prod1564453",
        subsku:{
            sku1444283:{    // "Samsung Galaxy SIII Blau 16 GB", etc.
                monthlyChargest:"59.99",
                activationCharge:"29.99",
                discounts:[
                    "sku140988",    // "Ich bin 18-25 Jahre jung" (-10)
                    "sku140989",    // "Ich habe einen Schwerbehindertenausweis" (-10)
                    "sku140990"     // "Ich bin Student und jünger als 30" (-10)
                ],
                promotions:["27"],  // "24 x 5 Euro Smartphone-Rabatt" (-5)
                Goodies:[
                    "prod1674486"   // "24 x 10 % Rabatt" (-6)
                ]
            },
            // more subskus here . . .
        }
    },
    // . . .
}
</snippet></ROW><ROW><id>14265229</id><snippet>Goodies</snippet></ROW><ROW><id>14265229</id><snippet>windows.goodies</snippet></ROW><ROW><id>14265229</id><snippet>prod</snippet></ROW><ROW><id>14265229</id><snippet>window.goodies = {
    prod1674486:{
        SkuId:"prod1674486",
        Name:"24 x 10 % Rabatt",
        Value:"-6",
        Type:"absolute",
        DurationInMonth:"24"
    },
    // . . .
}
</snippet></ROW><ROW><id>14265229</id><snippet>window.rates</snippet></ROW><ROW><id>14265229</id><snippet>windows.promotions</snippet></ROW><ROW><id>14265229</id><snippet>subsku</snippet></ROW><ROW><id>14265229</id><snippet>promotions</snippet></ROW><ROW><id>14265229</id><snippet>window.promotions = {
    27:{
        promotionId:"27",
        promotionName:"24 x 5 Euro Smartphone-Rabatt",
        promotionValue:"-5",
        Type:"absolute",
        duration_in_months:"24",
        deeplinkParameter:""
    },
    // . . .
}
</snippet></ROW><ROW><id>14265229</id><snippet>windows.discounts</snippet></ROW><ROW><id>14265229</id><snippet>window.discounts = {
    sku140988:{
        SkuId:"sku140988",
        Name:"Ich bin 18-25 Jahre jung",
        Type:"absolute",
        DurationInMonth:"24",
        Value:{
            sku1444295:"-10",   // "Vodafone Red Premium"
            sku1444279:"-10",   // "Vodafone Red M"
            sku1444290:"-20"}   // "Vodafone Red L"
    },
    sku140989:{
        SkuId:"sku140989",
        Name:"Ich habe einen Schwerbehindertenausweis",
        Type:"absolute",
        DurationInMonth:"24",
        Value:{
            sku1444295:"-10",   // "Vodafone Red Premium"
            sku1444279:"-10",   // "Vodafone Red M"
            sku1444290:"-20"}   // "Vodafone Red L"
    },
    sku140990:{
        SkuId:"sku140990",
        Name:"Ich bin Student und jünger als 30",
        Type:"absolute",
        DurationInMonth:"24",
        Value:{
            sku1444295:"-10",   // "Vodafone Red Premium"
            sku1444279:"-10",   // "Vodafone Red M"
            sku1444290:"-20"}   // "Vodafone Red L"
    }
};
</snippet></ROW><ROW><id>14265229</id><snippet>value</snippet></ROW><ROW><id>14265284</id><snippet>setup()</snippet></ROW><ROW><id>14265284</id><snippet>entry_points</snippet></ROW><ROW><id>14265284</id><snippet>'console_scripts'</snippet></ROW><ROW><id>14265284</id><snippet>setup</snippet></ROW><ROW><id>14265284</id><snippet> setup(
    name='MyPackage',
    ...
    packages=['mypackage'],
    entry_points={
        'console_scripts': [
            'myprogram = mypackage.myprogram:main'
        ]
    }
    ...
)
</snippet></ROW><ROW><id>14265284</id><snippet>scripts</snippet></ROW><ROW><id>14265284</id><snippet>myprogram</snippet></ROW><ROW><id>14265284</id><snippet>C:\PythonXX\Scripts</snippet></ROW><ROW><id>14265284</id><snippet>myprogram-script.py</snippet></ROW><ROW><id>14265284</id><snippet>myprogram.exe</snippet></ROW><ROW><id>14265284</id><snippet>myprogram</snippet></ROW><ROW><id>14265306</id><snippet>sudo pip install scrapy</snippet></ROW><ROW><id>14265306</id><snippet> $ . /path/to/venv/bin/activate
 $ pip install scrapy
</snippet></ROW><ROW><id>14265322</id><snippet>daemon</snippet></ROW><ROW><id>14265322</id><snippet>daemon</snippet></ROW><ROW><id>14265322</id><snippet>True</snippet></ROW><ROW><id>14265521</id><snippet>%s</snippet></ROW><ROW><id>14265521</id><snippet>return "test_%s@test.tm" % counter()
</snippet></ROW><ROW><id>14265608</id><snippet>append</snippet></ROW><ROW><id>14265608</id><snippet>[]</snippet></ROW><ROW><id>14265608</id><snippet>class FluentList(list):
    def append(self, value):
        super(FluentList,self).append(value)
        return self

    def extend(self, iterable):
        super(FluentList,self).extend(iterable)
        return self

    def remove(self, value):
        super(FluentList,self).remove(value)
        return self

    def insert(self, index, value):
        super(FluentList,self).insert(index, value)
        return self 

    def reverse(self):
        super(FluentList,self).reverse()
        return self

    def sort(self, cmp=None, key=None, reverse=False):
        super(FluentList,self).sort(cmp, key, reverse)
        return self

li = FluentList()
li.extend([1,4,6]).remove(4).append(7).insert(1,10).reverse().sort(key=lambda x:x%2)
print li
</snippet></ROW><ROW><id>14265668</id><snippet>require 'time'

xmas = DateTime.new(2013, 12, 25)
puts x = xmas + 1 # 2013-12-26T00:00:00+00:00
d = DateTime.now
puts x &gt; d        # true
puts x - d        # 30167183979194791/86400000000000 (a Rational)
puts d &gt;&gt; 12      # 2014-01-10T21:15:20+01:00
</snippet></ROW><ROW><id>14265673</id><snippet>__lt__()</snippet></ROW><ROW><id>14265673</id><snippet>__le__()</snippet></ROW><ROW><id>14265673</id><snippet>__gt__()</snippet></ROW><ROW><id>14265673</id><snippet>__ge__()</snippet></ROW><ROW><id>14265673</id><snippet>__eq__</snippet></ROW><ROW><id>14265673</id><snippet>if self.index &lt;= other.index:
    return True
return False
</snippet></ROW><ROW><id>14265673</id><snippet>return self.index &lt;= other.index
</snippet></ROW><ROW><id>14265930</id><snippet>-[draggingEntered:]</snippet></ROW><ROW><id>14265930</id><snippet>nextResponder()</snippet></ROW><ROW><id>14265930</id><snippet>self</snippet></ROW><ROW><id>14265930</id><snippet>print</snippet></ROW><ROW><id>14265930</id><snippet>logging.log</snippet></ROW><ROW><id>14265930</id><snippet>NSLog</snippet></ROW><ROW><id>14265930</id><snippet>-[draggingEntered:]</snippet></ROW><ROW><id>14265930</id><snippet>draggingEntered_</snippet></ROW><ROW><id>14265930</id><snippet>@IBAction</snippet></ROW><ROW><id>14265930</id><snippet>(IBAction)</snippet></ROW><ROW><id>14265930</id><snippet>(reason '&lt;type 'exceptions.TypeError'&gt;: 'NoneType' object is not callable') was raised     during a dragging session
</snippet></ROW><ROW><id>14265930</id><snippet>try</snippet></ROW><ROW><id>14265930</id><snippet>except</snippet></ROW><ROW><id>14265930</id><snippet>print</snippet></ROW><ROW><id>14265939</id><snippet>volumePit_google</snippet></ROW><ROW><id>14265939</id><snippet>class volumePit_google(object):
    def __init__(self):
        self.data = []
        self.data_final = []

        self.day_volume = []
        self.data_ticks = [] #list contains indexes of the data_final separating days
        self.dates = []

        self.plotter_tick_pos = []
        self.plotter_edges = [0]
</snippet></ROW><ROW><id>14266049</id><snippet>fromkeys()</snippet></ROW><ROW><id>14266049</id><snippet>id()</snippet></ROW><ROW><id>14266049</id><snippet>In [16]: dic=dict.fromkeys("spam",[])

In [17]: [id(x) for x in dic.values()]    #all of them are same objects
Out[17]: [141885196, 141885196, 141885196, 141885196]

In [18]: dic['s'].append(1)   #changing one changes others as well

In [19]: dic
Out[19]: {'a': [1], 'm': [1], 'p': [1], 's': [1]}
</snippet></ROW><ROW><id>14266049</id><snippet>dict-comprehensions</snippet></ROW><ROW><id>14266049</id><snippet>In [20]: dic={x:[] for x in "spam"}

In [21]: [id(x) for x in dic.values()]               #unique objects
Out[21]: [141884972, 141848300, 142262988, 141895980]

In [22]: dic['s'].append(1)

In [23]: dic
Out[23]: {'a': [], 'm': [], 'p': [], 's': [1]}
</snippet></ROW><ROW><id>14266545</id><snippet>import csv

header = None
idfld = None
sourcefld = None

record_table = {}

with open('input.csv', 'rb') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        row = [x.strip() for x in row]

        if header is None:
            header = row
            for i, fld in enumerate(header):
                if fld == 'ID':
                    idfld = i
                elif fld == 'Source':
                    sourcefld = i
            continue

        key = row[idfld]
        sourcename = row[sourcefld]

        if key not in record_table:
            record_table[key] = {sourcename: row, "all_rows": [row]}
        else:
            if sourcename in record_table[key]:
                cur_row = record_table[key][sourcename]
                for i, fld in enumerate(row):
                    if cur_row[i] == '':
                        record_table[key][sourcename][i] = fld
            else:
                record_table[key][sourcename] = row
            record_table[key]["all_rows"].append(row)

print ', '.join(header) + ', duplicate_flag'

for recordid in record_table:
    rowdict = record_table[recordid]

    final_row = [''] * len(header)

    rowcount = len(rowdict)

    for sourcetype in ['NY Times', 'ESPN', 'Wall Street Journal']:
        if sourcetype in rowdict:
            row = rowdict[sourcetype]
            for i, fld in enumerate(row):
                if final_row[i] != '':
                    continue
                if fld != '':
                    final_row[i] = fld

    if rowcount &gt; 1:
        for row in rowdict["all_rows"]:
            print ', '.join(row) + ', duplicate'

    print ', '.join(final_row) + ', not_duplicate'
</snippet></ROW><ROW><id>14266942</id><snippet>zip()</snippet></ROW><ROW><id>14266942</id><snippet>'a'</snippet></ROW><ROW><id>14266942</id><snippet>In [44]: list_a=['abc','abc','fox','abc']
In [45]: list_b=['campus shooting', 'Congress sucks', 'debt ceiling','1% rich']

In [46]: for x,y in zip(list_a,list_b):
   ....:     with open(x+".txt" , "a") as f:
   ....:         f.write(y+'\n')
</snippet></ROW><ROW><id>14267048</id><snippet>x = raw_input('Number?')
try:
    x = float(x)
except ValueError:
    print "This doesn't look like a number!"
</snippet></ROW><ROW><id>14267161</id><snippet>wx.BoxSizer</snippet></ROW><ROW><id>14267161</id><snippet>class MyFrame1 (wx.Frame):
    def __init__(self):
        super(MyFrame1, self).__init__()

        fluid_sizer = wx.BoxSizer(wx.HORIZONTAL)
        fluid_sizer.AddSpacer((0, 0), 1, wx.EXPAND, 5)
        #                             ^--- proportion = 1

        self.fixed_panel = wx.Panel(self, wx.ID_ANY, wx.DefaultPosition, wx.Size(-1,-1), wx.TAB_TRAVERSAL)
        self.fixed_panel.SetBackgroundColour(wx.SystemSettings.GetColour(wx.SYS_COLOUR_HIGHLIGHT))
        fixed_sizer = wx.BoxSizer(wx.VERTICAL)
        fixed_sizer.SetMinSize(wx.Size(150,-1)) 
        self.m_button1 = wx.Button(self.fixed_panel, wx.ID_ANY, u"MyButton", wx.DefaultPosition, wx.DefaultSize, 0)
        fixed_sizer.Add(self.m_button1, 0, wx.ALL, 5)
        self.fixed_panel.SetSizer(fixed_sizer)
        self.fixed_panel.Layout()
        fixed_sizer.Fit(self.fixed_panel)

        fluid_sizer.Add(self.fixed_panel, 0, wx.EXPAND |wx.ALL, 5)
        #                                 ^--- proportion = 0


        fluid_sizer.AddSpacer((0, 0), 1, wx.EXPAND, 5)
        #                             ^--- proportion = 1

        self.SetSizer(fluid_sizer)
        self.Layout()
</snippet></ROW><ROW><id>14267230</id><snippet>receivetext</snippet></ROW><ROW><id>14267230</id><snippet>wx.TextCtrl</snippet></ROW><ROW><id>14267230</id><snippet>panel</snippet></ROW><ROW><id>14267230</id><snippet>class MyFrame1 (wx.Frame):
    def __init__(self):
        super(MyFrame1, self).__init__()
        fluid_sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.m_textCtrl1 = wx.TextCtrl(self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, 0)
        fluid_sizer.Add(self.m_textCtrl1, 0, wx.ALL, 5)
        self.SetSizer(fluid_sizer)
        self.Layout()
</snippet></ROW><ROW><id>14267230</id><snippet>wx.BoxSizer</snippet></ROW><ROW><id>14267230</id><snippet>wx.TextCtrl</snippet></ROW><ROW><id>14267230</id><snippet>self.m_textCtrl</snippet></ROW><ROW><id>14267316</id><snippet># How to load a text file as a corpus.
import nltk
from nltk.corpus import PlaintextCorpusReader
from nltk.corpus.util import LazyCorpusLoader
afrikaans = LazyCorpusLoader('afrikaans', PlaintextCorpusReader, r'(?!\.).*\.txt')
afrikaans.sents()[1]
af = nltk.Text(afrikaans.words())
af.concordance("mense")
</snippet></ROW><ROW><id>14267477</id><snippet>indent-region</snippet></ROW><ROW><id>14267477</id><snippet>M-x</snippet></ROW><ROW><id>14267477</id><snippet>indent-region</snippet></ROW><ROW><id>14267477</id><snippet>C-M-\</snippet></ROW><ROW><id>14267477</id><snippet>tab-width</snippet></ROW><ROW><id>14267477</id><snippet>tab-width</snippet></ROW><ROW><id>14267477</id><snippet>tabify</snippet></ROW><ROW><id>14267477</id><snippet>tab-width</snippet></ROW><ROW><id>14267477</id><snippet>tab-width</snippet></ROW><ROW><id>14267477</id><snippet>untabify</snippet></ROW><ROW><id>14267730</id><snippet>a = [ ('2','c'), ('2','d'), ('2','h'), ('2','s'), ('3','c'), ('3','d'), ... ,('A','h'),('A','s') ]

for e in range(0, len(a), 4):
    for i in a[e:e+4]:
        print i,
    print
</snippet></ROW><ROW><id>14267825</id><snippet>import collections
import math
import timeit

def power_bit_length(x):
    return 2**(x-1).bit_length()

def shift_bit_length(x):
    return 1&lt;&lt;(x-1).bit_length()

def power_log(x):
    return 2**(math.ceil(math.log(x, 2)))

def test(f):
    collections.deque((f(i) for i in range(1, 1000001)), maxlen=0)

def timetest(f):
    print('{}: {}'.format(timeit.timeit(lambda: test(f), number=10),
                          f.__name__))

timetest(power_bit_length)
timetest(shift_bit_length)
timetest(power_log)
</snippet></ROW><ROW><id>14267825</id><snippet>range(1, 1000001)</snippet></ROW><ROW><id>14267825</id><snippet>range(1000000)</snippet></ROW><ROW><id>14267825</id><snippet>power_log</snippet></ROW><ROW><id>14267825</id><snippet>0</snippet></ROW><ROW><id>14267825</id><snippet>4.38817000389: power_bit_length
3.69475698471: shift_bit_length
7.91623902321: power_log
</snippet></ROW><ROW><id>14267825</id><snippet>6.566169916652143: power_bit_length
3.098236607853323: shift_bit_length
9.982460380066186: power_log
</snippet></ROW><ROW><id>14267825</id><snippet>2.8580930233: power_bit_length
2.49524712563: shift_bit_length
3.4371240139: power_log
</snippet></ROW><ROW><id>14267825</id><snippet>2**</snippet></ROW><ROW><id>14267825</id><snippet>bit_length</snippet></ROW><ROW><id>14267825</id><snippet>log</snippet></ROW><ROW><id>14267825</id><snippet>1&lt;&lt;</snippet></ROW><ROW><id>14267825</id><snippet>2**</snippet></ROW><ROW><id>14267825</id><snippet>shift_bit_length</snippet></ROW><ROW><id>14267825</id><snippet>power_log</snippet></ROW><ROW><id>14267935</id><snippet>str</snippet></ROW><ROW><id>14267935</id><snippet>L = [bytes_obj[i:i+1] for i in range(len(bytes_obj))]
</snippet></ROW><ROW><id>14268070</id><snippet>curses</snippet></ROW><ROW><id>14268070</id><snippet>1</snippet></ROW><ROW><id>14268070</id><snippet>0</snippet></ROW><ROW><id>14268070</id><snippet>X</snippet></ROW><ROW><id>14268070</id><snippet>.</snippet></ROW><ROW><id>14268070</id><snippet> print("Please enter your matrix as 1s and 0s, with spaces between the columns.")
 print("Use one row per line, and a blank row when you're done.")
 matrix = []
 while True:
     line = input()
     if not line: break
     values = line.split()
     row = [int(value) for value in values]
     matrix.append(row)
</snippet></ROW><ROW><id>14268070</id><snippet>q</snippet></ROW><ROW><id>14268070</id><snippet>1</snippet></ROW><ROW><id>14268418</id><snippet>connect()</snippet></ROW><ROW><id>14268418</id><snippet>ping()</snippet></ROW><ROW><id>14268418</id><snippet>ping()</snippet></ROW><ROW><id>14268604</id><snippet>{'PLOTTING': 
    {'par': 
        [OrderedDict([('PLOT', ['T']), ('PLOT(2) =', ['12'])])],
    'raw': ['PLOT=T', 'PLOT(2)=12']},
 'VEHICLES': 
    {'par': 
        [OrderedDict([('TRUCKS', ['0']), ('PLAINS', ['0']), ('TRAINS', ['0']), ('LIB', ['AUTO.DAT']), ('DATA', ['1.2', '2.34', '3.12', '4.56E-2', '6.78'])])],
  'raw': 
                ['TRUCKS = 0',
                  'PLAINS= 0, TRAINS = 0',
                  "LIB='AUTO.DAT'",
                  'DATA=1.2,2.34,3.12',
                  '4.56E-2,6.78']}}
</snippet></ROW><ROW><id>14268804</id><snippet>0.10.1</snippet></ROW><ROW><id>14268804</id><snippet>import numpy as np
import pandas as pd

# create a store
store = pd.HDFStore('mystore.h5')

# this is the key to your storage:
#    this maps your fields to a specific group, and defines 
#    what you want to have as data_columns.
#    you might want to create a nice class wrapping this
#    (as you will want to have this map and its inversion)  
group_map = dict(
    A = dict(fields = ['field_1','field_2'..... ], dc = ['field_1'....'field_5']),
    B = dict(fields = ['field_10'......         ], dc = ['field_10']),
    .....
    REPORTING_ONLY = dict(fields = ['field_1000','field_1001'...], dc = []),

)

group_map_inverted = dict()
for g, v in group_map.items():
    group_map_inverted.update(dict([ (f,g) for f in v['fields'] ]))
</snippet></ROW><ROW><id>14268804</id><snippet>append_to_multiple</snippet></ROW><ROW><id>14268804</id><snippet>for f in files:
   # read in the file, additional options hmay be necessary here
   # the chunksize is not strictly necessary, you may be able to slurp each 
   # file into memory in which case just eliminate this part of the loop 
   # (you can also change chunksize if necessary)
   for chunk in pd.read_table(f, chunksize=50000):
       # we are going to append to each table by group
       # we are not going to create indexes at this time
       # but we *ARE* going to create (some) data_columns

       # figure out the field groupings
       for g, v in group_map.items():
             # create the frame for this group
             frame = chunk.reindex(columns = v['fields', copy = False)    

             # append it
             store.append(g, frame, index=False, data_columns = v['dc'])
</snippet></ROW><ROW><id>14268804</id><snippet>frame = store.select(group_that_I_want)
# you can optionally specify:
# columns = a list of the columns IN THAT GROUP (if you wanted to
#     select only say 3 out of the 20 columns in this sub-table)
# and a where clause if you want a subset of the rows

# do calculations on this frame
new_frame = cool_function_on_frame(frame)

# to 'add columns', create a new group (you probably want to
# limit the columns in this new_group to be only NEW ones
# (e.g. so you don't overlap from the other tables)
# add this info to the group_map
store.append(new_group, new_frame.reindex(columns = new_columns_created, copy = False), data_columns = new_columns_created)
</snippet></ROW><ROW><id>14268804</id><snippet># This may be a bit tricky; and depends what you are actually doing.
# I may need to modify this function to be a bit more general:
report_data = store.select_as_multiple([ groups_1, groups_2.....etc ], where =['field_1&gt;0', 'field_1000=foo'], selector = group_1)
</snippet></ROW><ROW><id>14268804</id><snippet>store.select(group, where = [ 'field_1000=foo', 'field_1001&gt;0' ])
</snippet></ROW><ROW><id>14269118</id><snippet>csv</snippet></ROW><ROW><id>14269118</id><snippet>import csv

# make a dictionary to store the data
data = {}

# first, read it in
with open("curves.csv", "rb") as fp:

    # make a csv reader object
    reader = csv.reader(fp)

    # skip initial line
    next(reader)

    for row in reader:
        # for each triplet, store it in the dictionary
        for i in range(len(row)//3):
            CL, D, PD = row[3*i:3*i+3]
            data[D, CL] = PD

# see what we've got
print data

with open("newcurves.csv", "wb") as fp:
    # get the labels in order
    row_labels = sorted(set(k[0] for k in data), key=int)
    col_labels = sorted(set(k[1] for k in data))

    writer = csv.writer(fp)
    # write header
    writer.writerow([''] + col_labels)

    # write data rows
    for row_label in row_labels:
        # start with the label
        row = [row_label]

        # then extend a list of the data in order, using the empty string '' if
        # there's no such value
        row.extend([data.get((row_label, col_label), '') for col_label in col_labels])

        # dump it out
        writer.writerow(row)
</snippet></ROW><ROW><id>14269118</id><snippet>{('1', 'D'): 'd', ('1', 'E'): 'e', ('5', 'C'): 'm', ('1', 'B'): 'b', ('2', 'E'): 'j', ('1', 'C'): 'c', ('5', 'A'): 'k', ('6', 'B'): 'l', ('2', 'C'): 'h', ('1', 'A'): 'a', ('4', 'D'): 'i', ('8', 'D'): 'n', ('2', 'A'): 'f', ('3', 'B'): 'g', ('5', 'E'): 'o'}
</snippet></ROW><ROW><id>14269118</id><snippet>~/coding$ cat newcurves.csv 
,A,B,C,D,E
1,a,b,c,d,e
2,f,,h,,j
3,,g,,,
4,,,,i,
5,k,,m,,o
6,,l,,,
8,,,,n,
</snippet></ROW><ROW><id>14269160</id><snippet>threading.Lock</snippet></ROW><ROW><id>14269160</id><snippet>threading.Lock</snippet></ROW><ROW><id>14269160</id><snippet>multiprocessing.Lock</snippet></ROW><ROW><id>14269160</id><snippet>flock</snippet></ROW><ROW><id>14269160</id><snippet>lockf</snippet></ROW><ROW><id>14269160</id><snippet>joblib</snippet></ROW><ROW><id>14269160</id><snippet>multiprocessing.Lock</snippet></ROW><ROW><id>14269208</id><snippet>define("logging", default="info",
       help=("Set the Python log level. If 'none', tornado won't touch the "
             "logging configuration."),
       metavar="debug|info|warning|error|none")
</snippet></ROW><ROW><id>14269483</id><snippet>def b(self):
    if self.a() == 'Buy':
        return 'BUY SET'
    elif self.a() == 'Sell':
        return 'SELL SET''
</snippet></ROW><ROW><id>14269483</id><snippet>'</snippet></ROW><ROW><id>14269483</id><snippet>SyntaxError</snippet></ROW><ROW><id>14269483</id><snippet>def b(self):
    if self.a() == 'Buy':
        return 'BUY SET'
    elif self.a() == 'Sell':
        return 'SELL SET'
</snippet></ROW><ROW><id>14269483</id><snippet>self.a()</snippet></ROW><ROW><id>14269483</id><snippet>def b(self):
    order = self.a()
    if order == 'Buy':
        return 'BUY SET'
    elif order == 'Sell':
        return 'SELL SET'
</snippet></ROW><ROW><id>14269483</id><snippet>a</snippet></ROW><ROW><id>14269483</id><snippet>'Buy'</snippet></ROW><ROW><id>14269483</id><snippet>'Sell'</snippet></ROW><ROW><id>14269483</id><snippet>None</snippet></ROW><ROW><id>14269483</id><snippet>def b(self):
    order = self.a()
    if order == 'Buy':
        return 'BUY SET'
    elif order == 'Sell':
        return 'SELL SET'
    else:
        raise ValueError("Unexpected order type '{}'".format(order))
</snippet></ROW><ROW><id>14269483</id><snippet>def b(self):
    order = self.a()
    if order == 'Buy':
        return 'BUY SET'
    else: # We know there's nothing else it could be
        return 'SELL SET'
</snippet></ROW><ROW><id>14269483</id><snippet>dict</snippet></ROW><ROW><id>14269483</id><snippet>if</snippet></ROW><ROW><id>14269483</id><snippet>elif</snippet></ROW><ROW><id>14269483</id><snippet>def b(self):
    return {'Buy': 'BUY SET', 'Sell': 'SELL SET', 'Trade': 'TRADE SET',
            'Barter': 'BARTER SET', 'Steal': 'STEAL SET'}[self.a()]

def b(self):
    return '{} SET'.format(order.upper())
</snippet></ROW><ROW><id>14269483</id><snippet>dict</snippet></ROW><ROW><id>14269483</id><snippet>KeyError</snippet></ROW><ROW><id>14269483</id><snippet>format</snippet></ROW><ROW><id>14269483</id><snippet>dict</snippet></ROW><ROW><id>14269483</id><snippet>b</snippet></ROW><ROW><id>14269483</id><snippet>def get_formatted_order(self):
    order = self.calculate_order()
    if order == 'Buy':
        return 'BUY SET'
    elif order == 'Sell':
        return 'SELL SET''
</snippet></ROW><ROW><id>14269981</id><snippet>font = wx.Font(...)
dc = wx.DC()
dc.SetFont(font)
w,h = dc.GetTextExtent("test string")
</snippet></ROW><ROW><id>14270043</id><snippet>from itertools import groupby
from operator import itemgetter

[max(g) for _,g in groupby(sorted(l),key=itemgetter(0))]
</snippet></ROW><ROW><id>14270043</id><snippet>[[2, 2, 2, 2], [3, 3], [5], [7], [11], [13], [17], [19]]
</snippet></ROW><ROW><id>14270087</id><snippet>def download(self, url, name):
    request = self.client.get(url, stream=True)  # `prefetch=False` for older
                                                 # versions of requests
    with open(name, "wb") as code:
        for chunk in request.iter_content(1024):
            if not chunk:
                break

            code.write(chunk)
</snippet></ROW><ROW><id>14270092</id><snippet>a = {}
b = {}
c = [a, b]
</snippet></ROW><ROW><id>14270092</id><snippet>for d in c:
    d['ID'] = d
</snippet></ROW><ROW><id>14270092</id><snippet>d = c[0]
d['ID'] = d
d = c[1]
d['ID'] = 1
</snippet></ROW><ROW><id>14270092</id><snippet>d = a
d['ID'] = d
d = b
d['ID'] = d
</snippet></ROW><ROW><id>14270092</id><snippet>a['ID'] = a
b['ID'] = a
</snippet></ROW><ROW><id>14270092</id><snippet>&gt;&gt;&gt; a = {}
&gt;&gt;&gt; a['ID'] = a
&gt;&gt;&gt; a
{'ID': {...}}
</snippet></ROW><ROW><id>14270092</id><snippet>dict</snippet></ROW><ROW><id>14270092</id><snippet>ID</snippet></ROW><ROW><id>14270092</id><snippet>{'ID': {'ID': {'ID': { …
</snippet></ROW><ROW><id>14270092</id><snippet>{'ID': a}
</snippet></ROW><ROW><id>14270092</id><snippet>a</snippet></ROW><ROW><id>14270092</id><snippet>dict</snippet></ROW><ROW><id>14270092</id><snippet>d</snippet></ROW><ROW><id>14270092</id><snippet>a</snippet></ROW><ROW><id>14270092</id><snippet>d</snippet></ROW><ROW><id>14270092</id><snippet>&gt;&gt;&gt; e = a
&gt;&gt;&gt; a = 0
&gt;&gt;&gt; e
???
</snippet></ROW><ROW><id>14270230</id><snippet>numpy</snippet></ROW><ROW><id>14270230</id><snippet>numpy.version.version</snippet></ROW><ROW><id>14270230</id><snippet>same_kind</snippet></ROW><ROW><id>14270230</id><snippet>img[:middle] *= (bg[0]/np.tile(topCol, (middle,1))).astype(img.dtype)
</snippet></ROW><ROW><id>14270395</id><snippet>to_string()</snippet></ROW><ROW><id>14270395</id><snippet>def to_string(self):
    return """&lt;{tag}{attributes}&gt;{content}&lt;/{tag}&gt;""".format(
        tag=self.tag,
        attributes=' '.join('%s="%s"' % (attr, val) for
                            attr, val in self.attributes),
        content=''.join(
            (n if isinstance(n, basestring) else n.to_string()) for
            n in self.contents))
</snippet></ROW><ROW><id>14270395</id><snippet>attr_g</snippet></ROW><ROW><id>14270395</id><snippet>object</snippet></ROW><ROW><id>14270395</id><snippet>super()</snippet></ROW><ROW><id>14270395</id><snippet>class TAG(object):
    def __init__(self, contents=None, **attributes):
        self.contents = contents
        self.attributes = attributes

class H1(TAG):
    tag = 'H1'

class H2(TAG):
    tag = 'H2'
</snippet></ROW><ROW><id>14270395</id><snippet>StringIO</snippet></ROW><ROW><id>14270395</id><snippet>.write()</snippet></ROW><ROW><id>14270395</id><snippet>StringBuffer</snippet></ROW><ROW><id>14270395</id><snippet>StringBuilder</snippet></ROW><ROW><id>14270445</id><snippet>&gt;&gt;&gt; # create some fake data--a 2D NumPy array having 10,000 rows and 10 columns
&gt;&gt;&gt; D = NP.random.randn(10000 * 10).reshape(1000, 10)

&gt;&gt;&gt; # import the BallTree class (here bound to a local variable of same name)
&gt;&gt;&gt; from sklearn.neighbors import BallTree as BallTree

&gt;&gt;&gt; # call the constructor, passing in the data array and a 'leaf size'
&gt;&gt;&gt; # the ball tree is instantiated and populated in the single step below:

&gt;&gt;&gt; BT = BallTree(D, leaf_size=5, p=2)

&gt;&gt;&gt; # 'leaf size' specifies the data (number of points) at which 
&gt;&gt;&gt; # point brute force search is triggered
&gt;&gt;&gt; # 'p' specifies the distance metric, p=2 (the default) for Euclidean;
&gt;&gt;&gt; # setting p equal to 1, sets Manhattan (aka 'taxi cab' or 'checkerboard' dist)

&gt;&gt;&gt; type(BT)
    &lt;type 'sklearn.neighbors.ball_tree.BallTree'&gt;
</snippet></ROW><ROW><id>14270445</id><snippet>&gt;&gt;&gt; with Timer() as t:
        BT = BallTree(D, leaf_size=5)

&gt;&gt;&gt; "ball tree instantiated &amp; populated in {0:2f} milliseconds".format(t.elapsed)
        'ball tree instantiated &amp; populated in 13.90 milliseconds'
</snippet></ROW><ROW><id>14270445</id><snippet>&gt;&gt;&gt; # ball tree has an instance method, 'query' which returns pair-wise distance
&gt;&gt;&gt; # and an index; one distance and index is returned per 'pair' of data points

&gt;&gt;&gt; dx, idx = BT.query(D[500,:], k=3)

&gt;&gt;&gt; dx    # distance
    array([[ 0.   ,  1.206,  1.58 ]])

&gt;&gt;&gt; idx    # index
    array([[500, 556, 373]], dtype=int32)

&gt;&gt;&gt; with Timer() as t:
    dx, idx = BT.query(D[500,:], k=3)


&gt;&gt;&gt; "query results returned in {0:2f} milliseconds".format(t.elapsed)
        'query results returned in 15.85 milliseconds'
</snippet></ROW><ROW><id>14270596</id><snippet>import matplotlib.pyplot as plt
from matplotlib.dates import date2num
import datetime

x = [datetime.datetime(2011, 1, 4, 0, 0),
     datetime.datetime(2011, 1, 5, 0, 0),
     datetime.datetime(2011, 1, 6, 0, 0)]
x = date2num(x)

y = [4, 9, 2]
z=[1,2,3]
k=[11,12,13]

ax = plt.subplot(111)
ax.bar(x-0.2, y,width=0.2,color='b',align='center')
ax.bar(x, z,width=0.2,color='g',align='center')
ax.bar(x+0.2, k,width=0.2,color='r',align='center')
ax.xaxis_date()

plt.show()
</snippet></ROW><ROW><id>14270596</id><snippet>ax = plt.subplot(111)
w = 0.3
ax.bar(x-w, y,width=w,color='b',align='center')
ax.bar(x, z,width=w,color='g',align='center')
ax.bar(x+w, k,width=w,color='r',align='center')
ax.xaxis_date()
ax.autoscale(tight=True)

plt.show()
</snippet></ROW><ROW><id>14270654</id><snippet>request.data</snippet></ROW><ROW><id>14270727</id><snippet>a = [[1, 2, 3], [2, 3, 4]]
result = zip(*a)[0]
print result
</snippet></ROW><ROW><id>14270756</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; request = requests.head('http://example.com')
&gt;&gt;&gt; request.headers
    {'connection': 'close',
 'content-encoding': 'gzip',
 'content-length': '606',
 'content-type': 'text/html; charset=UTF-8',
 'date': 'Fri, 11 Jan 2013 02:32:34 GMT',
 'last-modified': 'Fri, 04 Jan 2013 01:17:22 GMT',
 'server': 'Apache/2.2.3 (CentOS)',
 'vary': 'Accept-Encoding'}
</snippet></ROW><ROW><id>14271013</id><snippet>vertices.append([[line[1],line[2],line[3]])
                                          ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>14271013</id><snippet>[</snippet></ROW><ROW><id>14271013</id><snippet>]</snippet></ROW><ROW><id>14271013</id><snippet>SyntaxError</snippet></ROW><ROW><id>14271013</id><snippet>vertex 5.6354345 3.34344 7.345345 
</snippet></ROW><ROW><id>14271013</id><snippet>with open("test.stl") as file:
    vertices = [map(float, line.split()[1:4])
                for line in file
                if line.lstrip().startswith('vertex')]
print vertices
</snippet></ROW><ROW><id>14271106</id><snippet>import math
def make_cylinder_volume_func(r):
    def volume(h):
        return math.pi * r * r * h
    return volume
</snippet></ROW><ROW><id>14271106</id><snippet>radius=10</snippet></ROW><ROW><id>14271106</id><snippet>height=5</snippet></ROW><ROW><id>14271106</id><snippet>volume_radius_10 = make_cylinder_volume_func(10)
volume_radius_10(5)
=&gt; 1570.7963267948967
</snippet></ROW><ROW><id>14271294</id><snippet>THREAD_LIMIT</snippet></ROW><ROW><id>14271294</id><snippet>None</snippet></ROW><ROW><id>14271294</id><snippet>run()</snippet></ROW><ROW><id>14271294</id><snippet>.name</snippet></ROW><ROW><id>14271294</id><snippet>.ident</snippet></ROW><ROW><id>14271294</id><snippet>multiprocessing.dummy.Pool</snippet></ROW><ROW><id>14271294</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>14271294</id><snippet>#!/usr/bin/env python
import logging
from multiprocessing.dummy import Pool

debug = logging.getLogger(__name__).debug

def work(x_y):
    try:
        x, y = x_y # do some work here
        debug('got %r', x_y)
        return x / y, None
    except Exception as e:
        logging.getLogger(__name__).exception('work%r failed', x_y) 
        return None, e

def main():
    logging.basicConfig(level=logging.DEBUG,
        format="%(levelname)s:%(threadName)s:%(asctime)s %(message)s")

    inputlist = [ (5,5),(10,4),(78,5),(87,2),(65,4),(10,10), (1,0), (0,1) ]
    pool = Pool(3)
    s = 0.
    for result, error in pool.imap_unordered(work, inputlist):
        if error is None:
           s += result
    print("sum=%s" % (s,))
    pool.close()
    pool.join()

if __name__ == "__main__":
   main()
</snippet></ROW><ROW><id>14271294</id><snippet>DEBUG:Thread-1:2013-01-14 15:37:37,253 got (5, 5)
DEBUG:Thread-1:2013-01-14 15:37:37,253 got (87, 2)
DEBUG:Thread-1:2013-01-14 15:37:37,253 got (65, 4)
DEBUG:Thread-1:2013-01-14 15:37:37,254 got (10, 10)
DEBUG:Thread-1:2013-01-14 15:37:37,254 got (1, 0)
ERROR:Thread-1:2013-01-14 15:37:37,254 work(1, 0) failed
Traceback (most recent call last):
  File "prog.py", line 11, in work
    return x / y, None
ZeroDivisionError: integer division or modulo by zero
DEBUG:Thread-1:2013-01-14 15:37:37,254 got (0, 1)
DEBUG:Thread-3:2013-01-14 15:37:37,253 got (10, 4)
DEBUG:Thread-2:2013-01-14 15:37:37,253 got (78, 5)
sum=78.0
</snippet></ROW><ROW><id>14271376</id><snippet>&gt;&gt;&gt; f=open("a","r+")
&gt;&gt;&gt; f.read()
'Test abc\nfasdfafasdfa\nsdfgsd\n'
&gt;&gt;&gt; f.write("foooooooooooooo")
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; f=open("a","r+")
&gt;&gt;&gt; f.read()
'Test abc\nfasdfafasdfa\nsdfgsd\nfoooooooooooooo'
</snippet></ROW><ROW><id>14271454</id><snippet>x = arange(3*3*3).reshape(3,3,3)

s = (slice(None),) + (0,)*(x.ndim-1)

print x[s]  # array([ 0,  9, 18])
print x[:,0,0] # array([ 0,  9, 18])
</snippet></ROW><ROW><id>14271454</id><snippet>x.transpose().flat[:3]
</snippet></ROW><ROW><id>14271454</id><snippet>x[:,0,0]</snippet></ROW><ROW><id>14271944</id><snippet>In [1]: import datetime

In [2]: s = '2012265'

In [3]: datetime.datetime.strptime(s, '%Y%j')
Out[3]: datetime.datetime(2012, 9, 21, 0, 0)

In [4]: d = '41213'

In [5]: datetime.date(1900, 1, 1) + datetime.timedelta(int(d))
Out[5]: datetime.date(2012, 11, 2)
</snippet></ROW><ROW><id>14271944</id><snippet>%j</snippet></ROW><ROW><id>14271944</id><snippet>%Y</snippet></ROW><ROW><id>14272534</id><snippet>boostmpi-1.38.0.1-py2.7-linux-x86_64.egg/boostmpi/_internal.so  libboost_python.so.1.52.0 =&gt; /projects/nrel/cid/lada.2013/pkgi/lib/libboost_python.so.1.52.0 
</snippet></ROW><ROW><id>14272750</id><snippet>myList[2] = 5</snippet></ROW><ROW><id>14272750</id><snippet>&gt;&gt;&gt; del myList[2]
&gt;&gt;&gt; myList
[1, 2]
&gt;&gt;&gt; myList[2] = 5
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list assignment index out of range  
</snippet></ROW><ROW><id>14272750</id><snippet>del myList[2]</snippet></ROW><ROW><id>14272750</id><snippet>myList</snippet></ROW><ROW><id>14272750</id><snippet>1</snippet></ROW><ROW><id>14272750</id><snippet>myList[2] = 5</snippet></ROW><ROW><id>14272750</id><snippet>&gt;&gt;&gt; del myList[2]
&gt;&gt;&gt; myList
[1, 2]
&gt;&gt;&gt; myList.append(5); 
&gt;&gt;&gt;  myList
[1, 2, 5]  
</snippet></ROW><ROW><id>14272750</id><snippet>myList[2] = 5</snippet></ROW><ROW><id>14273093</id><snippet>inv = []

inv.append('Item1')
</snippet></ROW><ROW><id>14273093</id><snippet>itemvalues = {'Item1':[0,0,0]
}
</snippet></ROW><ROW><id>14273380</id><snippet>from random import random

class Rectangle(object):
    def __init__(self, x1, y1, x2, y2):
        self._p1 = (x1, y1)
        self._p2 = (x2,y2)
        self._children = []

    def __str__(self):
        return "Rectangle defined by %s, %s, %i children" % (self._p1, self._p2, len(self._children))

    def is_child_of(self, other):
        return (self is not other and 
            self._p1[0] &gt; other._p1[0] and 
            self._p2[0] &lt; other._p2[0] and 
            self._p1[1] &gt; other._p1[1] and 
            self._p2[1] &lt; other._p2[1])

    def add_child(self, other):
        self._children.append(other)

    def check_relation_and_connect(self, other):
        if self.is_child_of(other):
            other.add_child(self)
        elif other.is_child_of(self):
            self.add_child(other)


if __name__=="__main__":
    rectangles = [Rectangle(random()*5, random()*5, random()*5+5, random()*5+5) for i in range(10)]

    for i in range(len(rectangles)):
        for j in range(i):
            rectangles[i].check_relation_and_connect(rectangles[j])

    for rectangle in rectangles:
        print rectangle
</snippet></ROW><ROW><id>14273380</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>14273380</id><snippet>if __name__=="__main__":
    import matplotlib.pyplot as plt
    from matplotlib import patches

    rectangles = [Rectangle(random()*5, random()*5, random()*5+5, random()*5+5) for i in range(5)]

    for i in range(len(rectangles)):
        for j in range(i):
            rectangles[i].check_relation_and_connect(rectangles[j])

    for rectangle in rectangles:
        print rectangle

    colormap = plt.get_cmap("Paired")
    for i, rect in enumerate(rectangles):
        ax = plt.axes()
        color = colormap((1.*i)/len(rectangles))
        patch = patches.Rectangle(rect.p1, rect.p2[0]-rect.p1[0], rect.p2[1]-rect.p1[1], fc="none", ec=color, lw=2)
        ax.add_patch(patch)
    plt.xlim(-1,11)
    plt.ylim(-1,11)
    plt.show()
</snippet></ROW><ROW><id>14273507</id><snippet>PyDLL</snippet></ROW><ROW><id>14273507</id><snippet>PYFUNCTYPE</snippet></ROW><ROW><id>14273507</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>14273507</id><snippet>import threading

t = threading.Thread(target=ctypes_call, args=[arg1, arg2, ...])
t.daemon = True
t.start()
while t.is_alive(): # wait for the thread to exit
    t.join(.1)
</snippet></ROW><ROW><id>14274153</id><snippet>if std_out.strip("\"").strip() == "":
</snippet></ROW><ROW><id>14274153</id><snippet>'""'</snippet></ROW><ROW><id>14274153</id><snippet>'    ""'</snippet></ROW><ROW><id>14274235</id><snippet>from scrapy.cmdline import execute
</snippet></ROW><ROW><id>14274279</id><snippet>from math import floor

if (output - floor(output))&gt;0: # skip
    continue
</snippet></ROW><ROW><id>14274322</id><snippet>Q*Button</snippet></ROW><ROW><id>14274322</id><snippet>autoRepeat</snippet></ROW><ROW><id>14274322</id><snippet>clicked</snippet></ROW><ROW><id>14274322</id><snippet>autoRepeatDelay</snippet></ROW><ROW><id>14274322</id><snippet>autoRepeatInterval</snippet></ROW><ROW><id>14274534</id><snippet>import numpy as np

# create your matrix. If it's not yet a numpy array, make it one
ar = np.array(matrix)
indices = np.tril_indices_from(ar)
</snippet></ROW><ROW><id>14274534</id><snippet>indices = [list(x) for x in np.tril_indices_from(ar)]
</snippet></ROW><ROW><id>14274534</id><snippet>np.tril_indices</snippet></ROW><ROW><id>14274534</id><snippet>def getLowerTriangularIndices(n):
    return [list(x) for x in np.tril_indices(n)]
</snippet></ROW><ROW><id>14274534</id><snippet>def getLowerTriangularIndices(n):
    return zip(*np.tril_indices(n)]
</snippet></ROW><ROW><id>14274577</id><snippet>platform.get_devices(device_type=cl.device_type.ALL)
</snippet></ROW><ROW><id>14274804</id><snippet>.close()</snippet></ROW><ROW><id>14274804</id><snippet>close</snippet></ROW><ROW><id>14274804</id><snippet>try... finally</snippet></ROW><ROW><id>14274804</id><snippet>with</snippet></ROW><ROW><id>14274804</id><snippet>.close</snippet></ROW><ROW><id>14274804</id><snippet>finally</snippet></ROW><ROW><id>14274804</id><snippet>try... except</snippet></ROW><ROW><id>14275081</id><snippet>whoosh</snippet></ROW><ROW><id>14275081</id><snippet>whoosh</snippet></ROW><ROW><id>14275081</id><snippet>sqlite3</snippet></ROW><ROW><id>14275134</id><snippet>except</snippet></ROW><ROW><id>14275134</id><snippet>Thread</snippet></ROW><ROW><id>14275134</id><snippet>while(1):</snippet></ROW><ROW><id>14275134</id><snippet>while not self.stop_requested:</snippet></ROW><ROW><id>14275134</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>14275134</id><snippet>join()</snippet></ROW><ROW><id>14275134</id><snippet>while(1)</snippet></ROW><ROW><id>14275134</id><snippet>while True</snippet></ROW><ROW><id>14275134</id><snippet>bool</snippet></ROW><ROW><id>14275134</id><snippet>bool</snippet></ROW><ROW><id>14275269</id><snippet>for</snippet></ROW><ROW><id>14275269</id><snippet>.remove()</snippet></ROW><ROW><id>14275269</id><snippet>def remove_odd(1):
    for i in l[:]:
        if i % 2 != 0:
            l.remove(i)
    return l
</snippet></ROW><ROW><id>14275269</id><snippet>l[:]</snippet></ROW><ROW><id>14275269</id><snippet>l</snippet></ROW><ROW><id>14275269</id><snippet>def remove_odd(l):
    return [x for x in l if x % 2 == 0]
</snippet></ROW><ROW><id>14275405</id><snippet>import os

for item in os.listdir(path):
    if not os.path.isfile(os.path.join(path, item)):
        print "Folder"
    else:
        print "File"
</snippet></ROW><ROW><id>14276049</id><snippet>for i in a[:]:
    if i in b:
        a.remove(i)
        b.remove(i)
</snippet></ROW><ROW><id>14276049</id><snippet>def removeCommonElements(a, b):
    for e in a[:]:
        if e in b:
            a.remove(e)
            b.remove(e)
</snippet></ROW><ROW><id>14276049</id><snippet>def getWithoutCommonElements(a, b): # Name subject to change
    a2 = a.copy()
    b2 = b.copy()
    for e in a:
        if e not in b:
            a2.remove(e)
            b2.remove(e)
    return a2, b2
</snippet></ROW><ROW><id>14276049</id><snippet>removeCommonElements</snippet></ROW><ROW><id>14276049</id><snippet>a2, b2 = a.copy(), b.copy()
removeCommonElements(a2, b2)
</snippet></ROW><ROW><id>14276059</id><snippet>import random
a = random.randrange(0,50)
b = random.randrange(0,a)
while b &gt; a:
    b = random.randrange(0,a)
</snippet></ROW><ROW><id>14276059</id><snippet>if Airplane == 1:
while ....
</snippet></ROW><ROW><id>14276059</id><snippet>if Airplane == 1:
    while ....
</snippet></ROW><ROW><id>14276423</id><snippet>f.write(struct.pack("=I",random.randint(0,sys.maxint*2+1)))
</snippet></ROW><ROW><id>14276423</id><snippet>struct.pack</snippet></ROW><ROW><id>14276423</id><snippet>import os

with open('output_file', 'wb') as fout:
    fout.write(os.urandom(1024)) # replace 1024 with size_kb if not unreasonably large
</snippet></ROW><ROW><id>14276423</id><snippet>struct.unpack</snippet></ROW><ROW><id>14276654</id><snippet>CRAM-MD5</snippet></ROW><ROW><id>14276654</id><snippet>PLAIN</snippet></ROW><ROW><id>14276654</id><snippet>SMTP_SSL</snippet></ROW><ROW><id>14276654</id><snippet>login</snippet></ROW><ROW><id>14276654</id><snippet>login</snippet></ROW><ROW><id>14276654</id><snippet>preferred_auths = [AUTH_CRAM_MD5, AUTH_PLAIN, AUTH_LOGIN]
</snippet></ROW><ROW><id>14276654</id><snippet>preferred_auths = [AUTH_PLAIN, AUTH_LOGIN]
</snippet></ROW><ROW><id>14276877</id><snippet>wrapper</snippet></ROW><ROW><id>14276877</id><snippet>sayYourAge</snippet></ROW><ROW><id>14276877</id><snippet>(self, lie)</snippet></ROW><ROW><id>14276877</id><snippet>wrapper</snippet></ROW><ROW><id>14276877</id><snippet>l.sayYouAge(-3)</snippet></ROW><ROW><id>14276877</id><snippet>wrapper</snippet></ROW><ROW><id>14276877</id><snippet>self</snippet></ROW><ROW><id>14276877</id><snippet>-3</snippet></ROW><ROW><id>14276877</id><snippet>lie</snippet></ROW><ROW><id>14276877</id><snippet>wrapper</snippet></ROW><ROW><id>14276877</id><snippet>method_to_decorate(self, lie)</snippet></ROW><ROW><id>14276877</id><snippet>self</snippet></ROW><ROW><id>14276877</id><snippet>lie</snippet></ROW><ROW><id>14276877</id><snippet>wrapper()</snippet></ROW><ROW><id>14276877</id><snippet>def method_friendly_decorator(method_to_decorate):
     def wrapper(self, lie, offset=-3):
         lie += offset # very friendly, adjust age even more!
         return method_to_decorate(self, lie)
     return wrapper
</snippet></ROW><ROW><id>14276877</id><snippet>l.sayYourAge(-1, offset=1)  # will say "I am 32, what did you think?"
</snippet></ROW><ROW><id>14276901</id><snippet>class SaneEqualityArray(np.ndarray):
    def __eq__(self, other):
        return (isinstance(other, np.ndarray) and self.shape == other.shape and 
            np.allclose(self, other))
</snippet></ROW><ROW><id>14276901</id><snippet>SaneEqualityArray</snippet></ROW><ROW><id>14276901</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>14276901</id><snippet>SaneEqualityArray(my_array.shape, my_array.dtype, my_array)
</snippet></ROW><ROW><id>14276901</id><snippet>ndarray</snippet></ROW><ROW><id>14276901</id><snippet>ndarray(shape, dtype=float, buffer=None, offset=0,
        strides=None, order=None)
</snippet></ROW><ROW><id>14276901</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>14276915</id><snippet>if True:
[ ][ ][ ][ ]print ("Four spaces")

if True:
[t]print ("Tab")
[t]if True:
[t][ ][ ][ ]print ("Tab and three spaces")

if True:
[ ][t][ ]print ("Mixture")
</snippet></ROW><ROW><id>14276971</id><snippet>connection_factory</snippet></ROW><ROW><id>14276971</id><snippet>connect()</snippet></ROW><ROW><id>14276971</id><snippet>connect_args</snippet></ROW><ROW><id>14276971</id><snippet>create_engine</snippet></ROW><ROW><id>14276971</id><snippet>engine = create_engine(
    dsn.engine_info(), connect_args={'connection_factory': ConnectionEx})
</snippet></ROW><ROW><id>14276993</id><snippet>PackageLoader</snippet></ROW><ROW><id>14276993</id><snippet>myapp/
  __init__.py
  …
  templates/
    mytemplate.html
</snippet></ROW><ROW><id>14276993</id><snippet>myapp</snippet></ROW><ROW><id>14277132</id><snippet>payload = {'key1': 'value1', 'key2': 'value2'}
&gt;&gt;&gt; r = requests.post("http://www.example.com/webservice", data=payload)
&gt;&gt;&gt; print r.text
</snippet></ROW><ROW><id>14277138</id><snippet>soup.findAll</snippet></ROW><ROW><id>14277138</id><snippet>anchor</snippet></ROW><ROW><id>14277138</id><snippet>.append()</snippet></ROW><ROW><id>14277138</id><snippet>box.append(anchor['href'])
</snippet></ROW><ROW><id>14277138</id><snippet>href</snippet></ROW><ROW><id>14277138</id><snippet>box = [a['href'] for a in soup.findAll('a', href=True, attrs = {'rel' : 'nofollow'})]
</snippet></ROW><ROW><id>14277298</id><snippet>pypi.python.org</snippet></ROW></DATA>