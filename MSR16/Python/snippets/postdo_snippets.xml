<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>19762783</id><snippet>myscript.py myname 22
</snippet></ROW><ROW><id>19762896</id><snippet>for ... in</snippet></ROW><ROW><id>19762896</id><snippet>in</snippet></ROW><ROW><id>19762896</id><snippet>notes.one(user.name)</snippet></ROW><ROW><id>19762896</id><snippet>['charles', 'test', time.time()]</snippet></ROW><ROW><id>19762896</id><snippet>charles</snippet></ROW><ROW><id>19762896</id><snippet>for sender, message, rawtime in notes.one(user.name):
    room.message("Note from &lt;i&gt;%s&lt;/i&gt; to &lt;i&gt;%s&lt;/i&gt;: %s (%s)" % sender.title(), user.name.title(), message, self.LongTimeStampFull(rawtime))
</snippet></ROW><ROW><id>19762896</id><snippet>sender, message, rawtime = notes.one(user.name)
room.message("Note from &lt;i&gt;%s&lt;/i&gt; to &lt;i&gt;%s&lt;/i&gt;: %s (%s)" % sender.title(), user.name.title(), message, self.LongTimeStampFull(rawtime))
</snippet></ROW><ROW><id>19763023</id><snippet>print [key
          for people in peoples
          for key, value in people.items()
          if value == criteria]
</snippet></ROW><ROW><id>19763023</id><snippet>people</snippet></ROW><ROW><id>19763023</id><snippet>print [key
          for key, value in people.items()
          if value == criteria]
</snippet></ROW><ROW><id>19763148</id><snippet>reduce</snippet></ROW><ROW><id>19763148</id><snippet>a = [(1, 2), (1, 4), (1, 6)]
print reduce(lambda x, y: (x[0] + y[0], x[1] + y[1]), a)
</snippet></ROW><ROW><id>19763148</id><snippet>(3, 12)
</snippet></ROW><ROW><id>19763148</id><snippet>(0, 0)</snippet></ROW><ROW><id>19763148</id><snippet>a = []
print reduce(lambda x, y: (x[0] + y[0], x[1] + y[1]), [(0, 0)] + a)
</snippet></ROW><ROW><id>19763148</id><snippet>(0, 0)
</snippet></ROW><ROW><id>19763148</id><snippet>a = []
print reduce(lambda x, y: (x[0] + y[0], x[1] + y[1]), a, (0, 0))
</snippet></ROW><ROW><id>19764072</id><snippet>pyc</snippet></ROW><ROW><id>19764072</id><snippet>print(dir(GenericFunctions))</snippet></ROW><ROW><id>19764072</id><snippet>print(GenericFunctions.__file__)</snippet></ROW><ROW><id>19764072</id><snippet>Sample.py</snippet></ROW><ROW><id>19764072</id><snippet>GenericFunctions</snippet></ROW><ROW><id>19764072</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19764119</id><snippet>imsave</snippet></ROW><ROW><id>19764119</id><snippet>imsave(path, image)
</snippet></ROW><ROW><id>19764119</id><snippet>bmp</snippet></ROW><ROW><id>19764119</id><snippet>path</snippet></ROW><ROW><id>19764119</id><snippet>scipy.toimage(image, cmin=0, cmax=255, mode='I').save("image.png")
</snippet></ROW><ROW><id>19764119</id><snippet>mode'I'</snippet></ROW><ROW><id>19764119</id><snippet>uint16</snippet></ROW><ROW><id>19764746</id><snippet>__import__</snippet></ROW><ROW><id>19764746</id><snippet>importlib.import_module</snippet></ROW><ROW><id>19764746</id><snippet>import importlib

def genecirCall(package_name, module_name, function_name):
    # import module you need
    module = importlib.import_module('%s.%s' % (package_name, module_name))
    getarrt(module, function_name)() # make a call
</snippet></ROW><ROW><id>19764746</id><snippet>module</snippet></ROW><ROW><id>19765213</id><snippet>year</snippet></ROW><ROW><id>19765213</id><snippet>extra()</snippet></ROW><ROW><id>19765213</id><snippet>def index(request):
    class_list = SchoolClass.objects.extra(select={'year_created': 'YEAR(date_created)'}, 
                                           order_by=['year_created'])
</snippet></ROW><ROW><id>19765213</id><snippet>YEAR(date_created)</snippet></ROW><ROW><id>19765620</id><snippet>fab=TCO(fab)
</snippet></ROW><ROW><id>19765620</id><snippet>fab</snippet></ROW><ROW><id>19765620</id><snippet>inner</snippet></ROW><ROW><id>19765620</id><snippet>yield fab(n-1,s*n)
</snippet></ROW><ROW><id>19765620</id><snippet>fab</snippet></ROW><ROW><id>19765620</id><snippet>inner</snippet></ROW><ROW><id>19765620</id><snippet>fab</snippet></ROW><ROW><id>19765620</id><snippet>maximum recursion limit exceeded</snippet></ROW><ROW><id>19765741</id><snippet>:set list</snippet></ROW><ROW><id>19765741</id><snippet>fileformat</snippet></ROW><ROW><id>19765741</id><snippet>:set fileformat
:set ff
</snippet></ROW><ROW><id>19765741</id><snippet>dos</snippet></ROW><ROW><id>19765741</id><snippet>unix</snippet></ROW><ROW><id>19765741</id><snippet>unix</snippet></ROW><ROW><id>19765741</id><snippet>:w ++ff=unix
</snippet></ROW><ROW><id>19765741</id><snippet>:set ff=unix
</snippet></ROW><ROW><id>19765741</id><snippet>:help fileformat</snippet></ROW><ROW><id>19765741</id><snippet>:help file-formats</snippet></ROW><ROW><id>19765741</id><snippet>:help fileformats</snippet></ROW><ROW><id>19765880</id><snippet>\f</snippet></ROW><ROW><id>19765880</id><snippet>NoPadding</snippet></ROW><ROW><id>19765880</id><snippet>\f</snippet></ROW><ROW><id>19766037</id><snippet>to_datetime</snippet></ROW><ROW><id>19766037</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; df = pd.DataFrame({'Time':['02/Apr/2013:23:55:00 +0530']},index=['tst'])
&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; to_datetime_fmt = partial(pd.to_datetime, format='%d/%b/%Y:%H:%M:%S %z')
</snippet></ROW><ROW><id>19766037</id><snippet>&gt;&gt;&gt; df['Time'] = df['Time'].apply(to_datetime_fmt)
&gt;&gt;&gt; df.dtypes
Time    datetime64[ns]
dtype: object
</snippet></ROW><ROW><id>19766037</id><snippet>%z</snippet></ROW><ROW><id>19766037</id><snippet>&gt;&gt;&gt; from datetime import timedelta
&gt;&gt;&gt; df = pd.DataFrame({'Time':['02/Apr/2013:23:55:00 +0530']},index=['tst'])
</snippet></ROW><ROW><id>19766037</id><snippet>&gt;&gt;&gt; def strptime_with_offset(string, format='%d/%b/%Y:%H:%M:%S'):
...    base_dt = datetime.strptime(string[:-6], format)
...    offset = int(string[-6:])
...    delta = timedelta(hours=offset/100, minutes=offset%100)
...    return base_dt + delta
...
</snippet></ROW><ROW><id>19766037</id><snippet>&gt;&gt;&gt; df['Time'] = df['Time'].apply(strptime_with_offset)
&gt;&gt;&gt; df['Time']
tst   2013-04-03 05:25:00
Name: Time, dtype: datetime64[ns]
&gt;&gt;&gt; df.dtypes
Time    datetime64[ns]
dtype: object
</snippet></ROW><ROW><id>19766056</id><snippet>logging</snippet></ROW><ROW><id>19766056</id><snippet>import logging</snippet></ROW><ROW><id>19766056</id><snippet>logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)</snippet></ROW><ROW><id>19766056</id><snippet>logging.debug('This message should appear on the console')</snippet></ROW><ROW><id>19766056</id><snippet>logging.info('So should this')</snippet></ROW><ROW><id>19766056</id><snippet>logging.warning('And this, too')</snippet></ROW><ROW><id>19766056</id><snippet>:</snippet></ROW><ROW><id>19766056</id><snippet>,</snippet></ROW><ROW><id>19766071</id><snippet>results = reg_list.__len__()*[[]]</snippet></ROW><ROW><id>19766071</id><snippet>[[] for reg in reg_list]
</snippet></ROW><ROW><id>19766306</id><snippet>cat 'file.txt' | while read ENTRY
do
  python -c "import sys; print sys.stdin.isatty()" &lt; /dev/tty
done
</snippet></ROW><ROW><id>19766602</id><snippet>deleteLater()</snippet></ROW><ROW><id>19766602</id><snippet>[]</snippet></ROW><ROW><id>19766602</id><snippet>class DynamicComboBoxes(QtGui.QWidget):
    def __init__(self, parent=None):
        super(DynamicComboBoxes, self).__init__(parent)
        vbox = QtGui.QVBoxLayout(self)
        spinbox = QtGui.QSpinBox(self)
        spinbox.setRange(0,10)
        spinbox.valueChanged.connect(self.onChangeValue)
        vbox.addWidget(spinbox)
        self.grid = QtGui.QGridLayout()
        self.itemlist = []
        vbox.addLayout(self.grid)
        vbox.addStretch(1)


    def onChangeValue(self, val):
        for label, combobox in self.itemlist:
            label.deleteLater()
            combobox.deleteLater()
        self.itemlist = []
        for i in range(val):
            label = QtGui.QLabel('This is Label {}'.format(i))
            combobox = QtGui.QComboBox()
            self.grid.addWidget(label, i, 0)
            self.grid.addWidget(combobox, i, 1)
            self.itemlist.append([label, combobox])
</snippet></ROW><ROW><id>19766730</id><snippet>class Category(models.Model):
    name = models.CharField('Name', max_length=255)

    class Meta:
        db_table = 'tbl_category'

class Entry(models.Model):
    category = models.ForeignKey(Category, db_column='id_tbl_category')
    contents = models.TextField('Contents')

    class Meta:
        db_table = 'tbl_entry'
</snippet></ROW><ROW><id>19766857</id><snippet>plt.pause(0.0001)</snippet></ROW><ROW><id>19766857</id><snippet>import matplotlib.pyplot as plt
import time
import random
from collections import deque
import numpy as np

# simulates input from serial port
def random_gen():
    while True:
        val = random.randint(1,10)
        yield val
        time.sleep(0.1)


a1 = deque([0]*100)
ax = plt.axes(xlim=(0, 20), ylim=(0, 10))
d = random_gen()

line, = plt.plot(a1)
plt.ion()
plt.ylim([0,10])
plt.show()

for i in range(0,20):
    a1.appendleft(next(d))
    datatoplot = a1.pop()
    line.set_ydata(a1)
    plt.draw()
    print a1[0]
    i += 1
    time.sleep(0.1)
    plt.pause(0.0001)                       #add this it will be OK.
</snippet></ROW><ROW><id>19767039</id><snippet>option_list = BaseCommand.option_list + (
    make_option(
        "-i",
        "--user_id",
        dest="user_id",
    ),
    make_option(
        "-f",
        "--fields",
        dest="fields",
        action="append",
    ),
)
</snippet></ROW><ROW><id>19767039</id><snippet>./my_program -u my_user -f field1 -f field2 -f field3
</snippet></ROW><ROW><id>19767039</id><snippet>options['fields']</snippet></ROW><ROW><id>19767052</id><snippet>str(lines)</snippet></ROW><ROW><id>19767052</id><snippet>&gt;&gt;&gt; lst = ['This', 'is a\n', 'fancy\n', 'list']
&gt;&gt;&gt; print(str(lst))
['This', 'is a\n', 'fancy\n', 'list']
</snippet></ROW><ROW><id>19767052</id><snippet>str.join</snippet></ROW><ROW><id>19767052</id><snippet>lines[usernum] = str(user)
with open('users.txt', 'w') as f:
    f.write('\n'.join(lines))
</snippet></ROW><ROW><id>19767052</id><snippet>'\n'</snippet></ROW><ROW><id>19767052</id><snippet>with</snippet></ROW><ROW><id>19767068</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.random.randint(0, 5, size=(5, 4))
&gt;&gt;&gt; a
array([[4, 2, 1, 1],
       [3, 0, 1, 2],
       [2, 0, 1, 1],
       [4, 0, 2, 3],
       [0, 0, 0, 2]])
&gt;&gt;&gt; b = a &lt; 3
&gt;&gt;&gt; b
array([[False,  True,  True,  True],
       [False,  True,  True,  True],
       [ True,  True,  True,  True],
       [False,  True,  True, False],
       [ True,  True,  True,  True]], dtype=bool)
&gt;&gt;&gt; 
&gt;&gt;&gt; c = b.astype(int)
&gt;&gt;&gt; c
array([[0, 1, 1, 1],
       [0, 1, 1, 1],
       [1, 1, 1, 1],
       [0, 1, 1, 0],
       [1, 1, 1, 1]])
</snippet></ROW><ROW><id>19767068</id><snippet>&gt;&gt;&gt; c = (a &lt; 3).astype(int)
</snippet></ROW><ROW><id>19767208</id><snippet>\\</snippet></ROW><ROW><id>19767208</id><snippet>\\</snippet></ROW><ROW><id>19767208</id><snippet>'\t'</snippet></ROW><ROW><id>19767208</id><snippet>&gt;&gt;&gt; print 'C:\Users\spemmara\Desktop\test'
C:\Users\spemmara\Desktop   est
</snippet></ROW><ROW><id>19767208</id><snippet>&gt;&gt;&gt; print r'C:\Users\spemmara\Desktop\test'
C:\Users\spemmara\Desktop\test
</snippet></ROW><ROW><id>19767208</id><snippet>&gt;&gt;&gt; print 'C:\\Users\\spemmara\\Desktop\\test'
C:\Users\spemmara\Desktop\test
</snippet></ROW><ROW><id>19767208</id><snippet>\</snippet></ROW><ROW><id>19767208</id><snippet>/</snippet></ROW><ROW><id>19767208</id><snippet>os.path.join</snippet></ROW><ROW><id>19767208</id><snippet>path = os.path.join(subdir, file)
</snippet></ROW><ROW><id>19767613</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>19767613</id><snippet>func(*sys.argv[1:])</snippet></ROW><ROW><id>19767613</id><snippet>args</snippet></ROW><ROW><id>19767613</id><snippet>sys.argv[1:]</snippet></ROW><ROW><id>19767678</id><snippet>brew</snippet></ROW><ROW><id>19767678</id><snippet>brew install postgresql
</snippet></ROW><ROW><id>19767743</id><snippet>save_model</snippet></ROW><ROW><id>19767743</id><snippet>redirect(...)</snippet></ROW><ROW><id>19767743</id><snippet>None</snippet></ROW><ROW><id>19767743</id><snippet>def response_add(self, request, new_object):
    pass
</snippet></ROW><ROW><id>19767743</id><snippet>def response_change(self, request, new_object):
    pass
</snippet></ROW><ROW><id>19767743</id><snippet>def response_change(self, request, obj):
    """
    Determines the HttpResponse for the change_view stage.
    """
</snippet></ROW><ROW><id>19767743</id><snippet>def response_add(self, request, obj, post_url_continue=None):
    """
    Determines the HttpResponse for the add_view stage.
    """
</snippet></ROW><ROW><id>19767911</id><snippet>=</snippet></ROW><ROW><id>19767911</id><snippet>==</snippet></ROW><ROW><id>19767911</id><snippet>csv</snippet></ROW><ROW><id>19767911</id><snippet>csv.reader()</snippet></ROW><ROW><id>19767911</id><snippet>with open(csvfilename, 'rb') as csvfh:
    reader = csv.reader(csvfh)
    for row in reader:
</snippet></ROW><ROW><id>19768099</id><snippet>genfromtxt</snippet></ROW><ROW><id>19768099</id><snippet>import numpy as np
col1 = np.genfromtxt('yourfile.txt',usecols=(0),delimiter=',',dtype=None)
col2 = np.genfromtxt('yourfile.txt',usecols=(1),delimiter=',',dtype=None)
</snippet></ROW><ROW><id>19768099</id><snippet>np.genfromtxt('yourfile.txt',usecols=(0,1),delimiter=',',dtype=None)
</snippet></ROW><ROW><id>19768277</id><snippet>member in someset
</snippet></ROW><ROW><id>19768277</id><snippet>member</snippet></ROW><ROW><id>19768277</id><snippet>in</snippet></ROW><ROW><id>19768277</id><snippet>in</snippet></ROW><ROW><id>19768277</id><snippet>not in</snippet></ROW><ROW><id>19768381</id><snippet>xpath</snippet></ROW><ROW><id>19768381</id><snippet>//h1[contains(text(), 'Text 1')]/following-sibling::div[1]/text()
</snippet></ROW><ROW><id>19768426</id><snippet>huffman_tree = encode(tree)
complete_tree = huffman_tree

get_intermediate_node = lambda val, arr :   ''.join( [ char for char,binary in itertools.ifilter( lambda node : node[1].startswith( val ),arr)] ) 

for val in range( next_power_of_two( len(huffman_tree) ) ):
    bvalue = bin(val)[2:] 
    node = [ get_intermediate_node( bvalue , huffman_tree) , bvalue ] 
    if node not in complete_tree:
        complete_tree.append( node)

print sorted( complete_tree , key=lambda p: (len(p[-1]), p) )

&gt;&gt;&gt; [['ab', '0'], ['cde', '1'], ['a', '00'], ['b', '01'], ['c', '10'],
    ['de', '11'], ['', '100'], ['', '101'], ['d', '110'], ['e', '111']]
</snippet></ROW><ROW><id>19768571</id><snippet>lambda: el</snippet></ROW><ROW><id>19768571</id><snippet>loop_one</snippet></ROW><ROW><id>19768571</id><snippet>el</snippet></ROW><ROW><id>19768571</id><snippet>lambda</snippet></ROW><ROW><id>19768571</id><snippet>lambda seq: [lambda: el for el in seq]
</snippet></ROW><ROW><id>19768571</id><snippet>lambda: el</snippet></ROW><ROW><id>19768571</id><snippet>el</snippet></ROW><ROW><id>19768571</id><snippet>el</snippet></ROW><ROW><id>19768571</id><snippet>lambda: el</snippet></ROW><ROW><id>19768571</id><snippet>el</snippet></ROW><ROW><id>19768571</id><snippet>lambda: el</snippet></ROW><ROW><id>19768571</id><snippet>el</snippet></ROW><ROW><id>19768571</id><snippet>for el in seq</snippet></ROW><ROW><id>19768571</id><snippet>el</snippet></ROW><ROW><id>19768571</id><snippet>'spam'</snippet></ROW><ROW><id>19768571</id><snippet>seq</snippet></ROW><ROW><id>19768571</id><snippet>loop_two</snippet></ROW><ROW><id>19768571</id><snippet>el</snippet></ROW><ROW><id>19768571</id><snippet>loop_one = lambda seq: [lambda el=el: el for el in seq]
</snippet></ROW><ROW><id>19768732</id><snippet>&gt;&gt;&gt; class MyError(Exception):
...    def __init__(self, message, data=None):
...       self.msg = message
...       self.data = data or {}
...
&gt;&gt;&gt; raise MyError
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: __init__() takes at least 2 arguments (1 given)
</snippet></ROW><ROW><id>19769027</id><snippet>response = urllib2.urlopen("http://www.rasekhoon.net/media/3882/page1/")
html = file.read().decode('UTF8')
</snippet></ROW><ROW><id>19769027</id><snippet>UnicodeEncode</snippet></ROW><ROW><id>19769385</id><snippet>os</snippet></ROW><ROW><id>19769385</id><snippet>import os
ROOT = lambda base : os.path.join(os.path.dirname(__file__), base).replace('\\','/')
</snippet></ROW><ROW><id>19769385</id><snippet>ROOT('users.txt') 
</snippet></ROW><ROW><id>19770054</id><snippet>match</snippet></ROW><ROW><id>19770054</id><snippet>Project.objects.filter(participants__match={"status"="accepted",
                                            "invitee.id"=str(request.user.id)})
</snippet></ROW><ROW><id>19770140</id><snippet>class SecuredStaticFlask(Flask):
    def send_static_file(self, filename):
        # Get user from session
        if current_user.is_authenticated():
            return super(SecuredStaticFlask, self).send_static_file(filename)

        else:
            abort(403)
</snippet></ROW><ROW><id>19770140</id><snippet>app = SecuredStaticFlask(__name__, static_folder="static", static_path="")
</snippet></ROW><ROW><id>19770673</id><snippet>self.latitude = latitude
self.longitude = longitude
</snippet></ROW><ROW><id>19770673</id><snippet>latitude</snippet></ROW><ROW><id>19770673</id><snippet>longitude</snippet></ROW><ROW><id>19770673</id><snippet>float</snippet></ROW><ROW><id>19770734</id><snippet>username = factory.Sequence(lambda n: 'user' + str(n))
</snippet></ROW><ROW><id>19770734</id><snippet>username = factory.Sequence(lambda n: "user{0}".format(n))
</snippet></ROW><ROW><id>19771064</id><snippet>$ cat /tmp/test.py 
example = '☃'
$ python2.7 /tmp/test.py 
  File "/tmp/test.py", line 1
SyntaxError: Non-ASCII character '\xe2' in file /tmp/test.py on line 1, but no encoding declared; see http://www.python.org/peps/pep-0263.html for details
</snippet></ROW><ROW><id>19771064</id><snippet>unicode_snowman = '\xe2\x98\x83'.decode('utf8')
unicode_snowman = unichr(0x2603)
</snippet></ROW><ROW><id>19771260</id><snippet> try {
     URL myURL = new URL("http://test.com/");
     URLConnection myURLConnection = myURL.openConnection();
     myURLConnection.connect(); 
}  catch (MalformedURLException e) {  }  
catch (IOException e) {    //end test }
</snippet></ROW><ROW><id>19771356</id><snippet>import datetime as dt
mydatetimes = [dt.datetime(x[2], x[1], x[0]) + dt.timedelta(hours=x[3]) for x in myarray]
</snippet></ROW><ROW><id>19771356</id><snippet>numpy.array( ... )</snippet></ROW><ROW><id>19771356</id><snippet>dtype=object</snippet></ROW><ROW><id>19771446</id><snippet>from sqlalchemy.dialects.mysql import BIGINT</snippet></ROW><ROW><id>19771538</id><snippet>gcmodule.c</snippet></ROW><ROW><id>19771538</id><snippet>is_tracked(obj)</snippet></ROW><ROW><id>19771538</id><snippet>#4688</snippet></ROW><ROW><id>19771538</id><snippet>#14775</snippet></ROW><ROW><id>19771538</id><snippet>tuple</snippet></ROW><ROW><id>19771538</id><snippet>dict</snippet></ROW><ROW><id>19771538</id><snippet>/* Try to untrack all currently tracked dictionaries */
static void
untrack_dicts(PyGC_Head *head)
{
    PyGC_Head *next, *gc = head-&gt;gc.gc_next;
    while (gc != head) {
        PyObject *op = FROM_GC(gc);
        next = gc-&gt;gc.gc_next;
        if (PyDict_CheckExact(op))
            _PyDict_MaybeUntrack(op);
        gc = next;
    }
}
</snippet></ROW><ROW><id>19771538</id><snippet>PyDict_CheckExact</snippet></ROW><ROW><id>19771538</id><snippet>static void
move_unreachable(PyGC_Head *young, PyGC_Head *unreachable)
{
    PyGC_Head *gc = young-&gt;gc.gc_next;

  /* omissis */
            if (PyTuple_CheckExact(op)) {
                _PyTuple_MaybeUntrack(op);
            }
</snippet></ROW><ROW><id>19771538</id><snippet>PyTuple_CheckExact</snippet></ROW><ROW><id>19771538</id><snippet>tuple</snippet></ROW><ROW><id>19771538</id><snippet>tuple</snippet></ROW><ROW><id>19771538</id><snippet>dict</snippet></ROW><ROW><id>19771538</id><snippet>is_immutable</snippet></ROW><ROW><id>19771538</id><snippet>tuple</snippet></ROW><ROW><id>19771538</id><snippet>namedtuple</snippet></ROW><ROW><id>19771538</id><snippet>namedtuple</snippet></ROW><ROW><id>19771538</id><snippet>class MyTuple(namedtuple('A', 'a b')):
    # whatever code you want
    pass
</snippet></ROW><ROW><id>19771538</id><snippet>MyTuple</snippet></ROW><ROW><id>19771538</id><snippet>namedtuple</snippet></ROW><ROW><id>19771538</id><snippet>namedtuple</snippet></ROW><ROW><id>19771538</id><snippet>namedtuple</snippet></ROW><ROW><id>19771595</id><snippet>Annotation</snippet></ROW><ROW><id>19771595</id><snippet>class Annotation(models.Model):
    index = models.IntegerField()
    name = models.CharField(max_length = 100)
</snippet></ROW><ROW><id>19771595</id><snippet>Annotation</snippet></ROW><ROW><id>19771799</id><snippet>unidecode</snippet></ROW><ROW><id>19771799</id><snippet>def toascii():
    with open(r'C:\log.convert', 'r', encoding='utf8') as origfile, open(r'C:\log.toascii', 'w', encoding='ascii') as convertfile:
        for line in origfile:
            line = unidecode(line)
            convertfile.write(line)
</snippet></ROW><ROW><id>19771799</id><snippet>locale.getpreferredencoding(False)</snippet></ROW><ROW><id>19771809</id><snippet>QThread</snippet></ROW><ROW><id>19771809</id><snippet>QThread</snippet></ROW><ROW><id>19771809</id><snippet>QObject</snippet></ROW><ROW><id>19771809</id><snippet>finished()</snippet></ROW><ROW><id>19771809</id><snippet>class CustomThread(QtCore.QThread):
    def __init__(self, target, slotOnFinished=None):
        super(CustomThread, self).__init__()
        self.target = target
        if slotOnFinished:
            self.finished.connect(slotOnFinished)

    def run(self, *args, **kwargs):
        self.target(*args, **kwargs)
</snippet></ROW><ROW><id>19771809</id><snippet>class MyCustomWidget(QtGui.QWidget):

    def __init__(self, parent=None):
        super(MyCustomWidget, self).__init__(parent)
        layout = QtGui.QVBoxLayout(self)
        button = QtGui.QPushButton("Start", self)
        layout.addWidget(button)    
        button.clicked.connect(self.onStart)
        self.actionthread = CustomThread(target=self.longAction, self.onFinished)

    def onFinished(self):
        # Do Something

    def longAction(self):
        time.sleep(3)

    def onStart(self): 
        self.actionthread.start()
</snippet></ROW><ROW><id>19772037</id><snippet>subprocess.Popen([
    r'C:\Program Files (x86)\Notepad++\notepad++.exe', 
    r'C:\Python27\Django_Templates\QC\postits.html'
])
</snippet></ROW><ROW><id>19772037</id><snippet>subprocess.Popen([
    'C:\\Program Files (x86)\\Notepad++\\notepad++.exe', 
    'C:\\Python27\\Django_Templates\\QC\\postits.html'
])
</snippet></ROW><ROW><id>19772037</id><snippet>os.path.join</snippet></ROW><ROW><id>19772046</id><snippet>/tmp</snippet></ROW><ROW><id>19772046</id><snippet>/foo</snippet></ROW><ROW><id>19772046</id><snippet>import os
for top in ['/tmp/bar', '/tmp/baz', '/tmp/bat']:
    for dirpath, dirs, files in os.walk(top):
        for filename in files:
            with open(os.path.join(dirpath, filename), 'a') as fp:
                fp.write("Kilroy\n")
</snippet></ROW><ROW><id>19772130</id><snippet>Regexp(u'^[^/\\]\.jpg$')</snippet></ROW><ROW><id>19772130</id><snippet>import re
re.compile(u'^[^/\\]\.jpg$')
</snippet></ROW><ROW><id>19772130</id><snippet>\</snippet></ROW><ROW><id>19772130</id><snippet>[]</snippet></ROW><ROW><id>19772130</id><snippet>u'^[^/\\\\]\.jpg$'</snippet></ROW><ROW><id>19772130</id><snippet>ur'^[^/\\]\.jpg$'</snippet></ROW><ROW><id>19772429</id><snippet>x</snippet></ROW><ROW><id>19772429</id><snippet>t = time.utcnow()
map(lambda x: x.update({'created_at': t}), objects)
</snippet></ROW><ROW><id>19772488</id><snippet>.append()</snippet></ROW><ROW><id>19772488</id><snippet>big['small'] = small
</snippet></ROW><ROW><id>19772488</id><snippet>.append()</snippet></ROW><ROW><id>19772488</id><snippet>big</snippet></ROW><ROW><id>19772488</id><snippet>&gt;&gt;&gt; big = []
&gt;&gt;&gt; small = [10, 20, 30]
&gt;&gt;&gt; big.append(small)
&gt;&gt;&gt; big
[[10, 20, 30]]
</snippet></ROW><ROW><id>19772488</id><snippet>list.append()</snippet></ROW><ROW><id>19772488</id><snippet>None</snippet></ROW><ROW><id>19772488</id><snippet>big.append(small)</snippet></ROW><ROW><id>19772488</id><snippet>list.append()</snippet></ROW><ROW><id>19772488</id><snippet>small</snippet></ROW><ROW><id>19772488</id><snippet>small</snippet></ROW><ROW><id>19772488</id><snippet>big</snippet></ROW><ROW><id>19772488</id><snippet>list.extend()</snippet></ROW><ROW><id>19772488</id><snippet>&gt;&gt;&gt; big = []
&gt;&gt;&gt; small = [10, 20, 30]
&gt;&gt;&gt; big.append(small)
&gt;&gt;&gt; big
[10, 20, 30]
</snippet></ROW><ROW><id>19772648</id><snippet>object of type 'int' has no len()
</snippet></ROW><ROW><id>19772648</id><snippet>IntegerField('Telephone', [validators.NumberRange(min=0, max=10)])
</snippet></ROW><ROW><id>19772744</id><snippet>'-'</snippet></ROW><ROW><id>19772744</id><snippet>order_by</snippet></ROW><ROW><id>19772744</id><snippet>def index(request):
    table = OrderTable(Order.objects.all(), order_by="-order_date")
    RequestConfig(request, paginate={"per_page": 10}).configure(table)
    return render(request, 'orders_app/index.html', {'table': table})
</snippet></ROW><ROW><id>19772744</id><snippet>order_by</snippet></ROW><ROW><id>19772744</id><snippet>('name', '-age')</snippet></ROW><ROW><id>19772744</id><snippet>-</snippet></ROW><ROW><id>19772911</id><snippet>re.finditer</snippet></ROW><ROW><id>19772911</id><snippet>frm</snippet></ROW><ROW><id>19772911</id><snippet>import re
from random import choice

def replace_random(src, frm, to):
    matches = list(re.finditer(frm, src))
    replace = choice(matches)
    return src[:replace.start()] + to + src[replace.end():]
</snippet></ROW><ROW><id>19772911</id><snippet>&gt;&gt;&gt; [replace_random('x x x x x', r'\bx\b', 'y') for _ in range(10)]
['y x x x x', 'x x x x y', 'x x y x x', 'x y x x x', 'x x x y x', 'x x x y x', 'x x y x x', 'x y x x x', 'x x x x y', 'x x y x x']
</snippet></ROW><ROW><id>19773011</id><snippet>x[1]</snippet></ROW><ROW><id>19773011</id><snippet> print x[1]
 #output: Zayas de B?
</snippet></ROW><ROW><id>19773011</id><snippet>data</snippet></ROW><ROW><id>19773011</id><snippet>data = u"&amp;city=Zayas de Báscones;Zayas de Báscones;" # set it as unicode
</snippet></ROW><ROW><id>19773011</id><snippet>x[1]</snippet></ROW><ROW><id>19773011</id><snippet>print x[1]
#output: Zayas de Báscones
</snippet></ROW><ROW><id>19773158</id><snippet>datetime</snippet></ROW><ROW><id>19773158</id><snippet>pytz</snippet></ROW><ROW><id>19773158</id><snippet>datetime</snippet></ROW><ROW><id>19773158</id><snippet>def parse_datetime(a_datetime, account):
    tz = pytz.timezone(account.timezone_name)
    return parser.parse(a_datetime).astimezone(tz)
</snippet></ROW><ROW><id>19773158</id><snippet>datetime</snippet></ROW><ROW><id>19773158</id><snippet>.localize()</snippet></ROW><ROW><id>19773158</id><snippet>def parse_datetime(a_datetime, account):
    tz = pytz.timezone(account.timezone_name)
    return tz.localize(parser.parse(a_datetime))
</snippet></ROW><ROW><id>19773158</id><snippet>datetime</snippet></ROW><ROW><id>19773158</id><snippet>def parse_datetime(a_datetime, account):
    dt = parser.parse(a_datetime)
    if dt.tzinfo is None:
        tz = pytz.timezone(account.timezone_name)
        dt = tz.localize(dt)
    return dt
</snippet></ROW><ROW><id>19773158</id><snippet>datetime</snippet></ROW><ROW><id>19773230</id><snippet>os.walk()</snippet></ROW><ROW><id>19773230</id><snippet>directory</snippet></ROW><ROW><id>19773230</id><snippet>directory</snippet></ROW><ROW><id>19773230</id><snippet>all_files = [] 
for root, directories, files in os.walk(directory):
    filenames = [os.path.join(root, filename) for filename in files]
    all_files.extend(filenames)
</snippet></ROW><ROW><id>19773235</id><snippet>%(default)s</snippet></ROW><ROW><id>19773235</id><snippet>group.add_argument('--startFreq', default=400, type=int, help="Start Frequency (default: %(default)s MHz)", dest="calStart")
</snippet></ROW><ROW><id>19773235</id><snippet>`group.add_argument('-c', '--calibration', action="store_true", help="Calibrate Gear (default: False)", dest="calibrate")
</snippet></ROW><ROW><id>19773235</id><snippet>store_true</snippet></ROW><ROW><id>19773235</id><snippet>%(default)s</snippet></ROW><ROW><id>19773235</id><snippet>argparse.ArgumentDefaultsHelpFormatter</snippet></ROW><ROW><id>19773235</id><snippet>help</snippet></ROW><ROW><id>19773235</id><snippet>%(default)s</snippet></ROW><ROW><id>19773235</id><snippet>help</snippet></ROW><ROW><id>19773263</id><snippet>with open("file1.txt", "r") as f1:
    lines1 = f1.readlines()

with open("file2.txt", "r") as f2:
    lines2 = f2.readlines()

bound = max(len(lines1), len(lines2))
for idx, line1, line2 in zip(xrange(bound), lines1, lines2):
    if line1 != line2:
        diff_line = idx
        break

bound = max(len(line1), len(line2))
for idx, c1, c2 in zip(xrange(bound), list(line1), list(line2)):
    if c1 != c2:
        diff_char = idx
        break

print "first difference is on line {0:g} and character {1:g}".format(diff_line, diff_char)
</snippet></ROW><ROW><id>19773273</id><snippet>import re

result = re.match("\{\{((if|else|endif).*?)\}\}","{{if 100 &gt; 1}}",re.I)
print result.groups()

result = re.match("\{\{((if|else|endif).*?)\}\}","{{else}}",re.I)
print result.groups()

result = re.match("\{\{((if|else|endif).*?)\}\}","{{endif}}",re.I)
print result.groups()
</snippet></ROW><ROW><id>19773315</id><snippet>import xml.etree.ElementTree as ET
tree = ET.parse('data.xml')
root = tree.getroot()
with open('my_text_file.txt', 'w') as f:
    f.write('ArticleID|CreatedDate|MeSH|IsMajor\n')
for pubmed_article in root.findall('PubmedArticle'):
    ArticleID = pubmed_article.find('MedlineCitation').find('PMID').text
    year = pubmed_article.find('MedlineCitation').find('DateCreated').find('Year').text
    month = pubmed_article.find('MedlineCitation').find('DateCreated').find('Month').text
    day = pubmed_article.find('MedlineCitation').find('DateCreated').find('Day').text
    CreatedDate = year + month + day
    for mesh_heading in pubmed_article.find('MedlineCitation').find('MeshHeadingList').findall('MeshHeading'):
        MeSH = mesh_heading.find('DescriptorName').text
        IsMajor = mesh_heading.find('DescriptorName').get('MajorTopicYN')
        line_to_write = ArticleID + '|' + CreatedDate + '|' + MeSH + '|' + IsMajor + '\n'
        with open('my_text_file.txt', 'a') as f:
            f.write(line_to_write)
</snippet></ROW><ROW><id>19773315</id><snippet>ArticleID|CreatedDate|MeSH|IsMajor
23458631|20130408|Animals|N
23458631|20130408|Calcium|N
23458631|20130408|Calcium Chloride|N
23458629|20130320|Adolescent|N
23458629|20130320|Adult|N
23458629|20130320|Anthropometry|N
</snippet></ROW><ROW><id>19773444</id><snippet>quit</snippet></ROW><ROW><id>19773444</id><snippet>while True:
    x1 = raw_input("please enter a number x1=")
    x2 = raw_input("please enter a number x2=")
    quit = ('q','Q')
    if x1 in quit or x2 in quit:
        break
    else:
        try:
            x1, x2 = int(x1), int(x2)
        except:
            print("please enter only numbers")
            continue
    # The mathematical part... (for completeness) (not my code)
    if x1&gt;x2:
        x1,x2=x2,x1
    for n in xrange(x1,x2):
        i=n/100
        j=n/10%10
        k=n%10
        if i*100+j*10+k==i+j**2+k**3:
            print "%-5d"%n
</snippet></ROW><ROW><id>19773444</id><snippet>pass</snippet></ROW><ROW><id>19773444</id><snippet>if some_thing: # don't do anything
else:
    some_thing = some_thing_else
</snippet></ROW><ROW><id>19773444</id><snippet>pass</snippet></ROW><ROW><id>19773444</id><snippet>if</snippet></ROW><ROW><id>19773444</id><snippet>pass</snippet></ROW><ROW><id>19773444</id><snippet>if some_thing: # don't do anything
    pass
else:
    some_thing = some_thing_else
</snippet></ROW><ROW><id>19773581</id><snippet>getattr</snippet></ROW><ROW><id>19773581</id><snippet>level_X_id = "level"+id+"_id"
level_name = getattr(Level.objects.all(level_name = name)[0], level_X_id)
</snippet></ROW><ROW><id>19773661</id><snippet>from scrapy.contrib.spiders import CrawlSpider, Rule
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.selector import HtmlXPathSelector
from scrapy.item import Item, Field

class Product(Item):
    name = Field()

class siteSpider(CrawlSpider):
    name = "domain-name.com"
    allowed_domains = ['www.domain-name.com']
    start_urls = ["https://www.domain-name.com/en/"]
    rules = (
        Rule(SgmlLinkExtractor(allow=('\/en\/item\-[a-z0-9\-]+\-scrap\.html')), process_links='process_links', callback='parse_item', follow=True),
        Rule(SgmlLinkExtractor(allow=('')), process_links='process_links', follow=True),
    )

    def parse_item(self, response):
        x = HtmlXPathSelector(response)
        product = Product()
        product['name'] = ''
        name = x.select('//title/text()').extract()
        if type(name) is list:
            for s in name:
                if s != ' ' and s != '':
                    product['name'] = s
                    break
        return product

    def process_links(self,links):
        for i, w in enumerate(links):
            w.url = w.url.replace("../", "")
            links[i] = w
        return links
</snippet></ROW><ROW><id>19773702</id><snippet>while (c2sk &gt; 0 &amp;&amp; c1sk &gt; 0)
    //do complete everything up until the if statements
if c1st &lt;0
    print "c1st died" 
elif c2st &lt;0
    print "c2st died"
</snippet></ROW><ROW><id>19773725</id><snippet>&gt;&gt;&gt; re.search(r"a{1,65535}", 'aaa')
&lt;_sre.SRE_Match object at 0x2a9a68&gt;
&gt;&gt;&gt; 
&gt;&gt;&gt; re.search(r"a{1,65536}", 'aaa')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Library/Frameworks/Python.framework/Versions/7.3/lib/python2.7/re.py", line 142, in search
    return _compile(pattern, flags).search(string)
  File "/Library/Frameworks/Python.framework/Versions/7.3/lib/python2.7/re.py", line 240, in _compile
    p = sre_compile.compile(pattern, flags)
  File "/Library/Frameworks/Python.framework/Versions/7.3/lib/python2.7/sre_compile.py", line 523, in compile
    groupindex, indexgroup
OverflowError: regular expression code size limit exceeded
</snippet></ROW><ROW><id>19773725</id><snippet>_sre.c</snippet></ROW><ROW><id>19773725</id><snippet>MAXREPEAT</snippet></ROW><ROW><id>19773725</id><snippet>sre_constants.py</snippet></ROW><ROW><id>19773725</id><snippet>&gt;&gt;&gt; import sre_constants
&gt;&gt;&gt; 
&gt;&gt;&gt; sre_constants.MAXREPEAT
65535
</snippet></ROW><ROW><id>19773822</id><snippet>private_key = private_key.replace('-----BEGIN RSA PRIVATE KEY-----', '')
private_key = private_key.replace('-----END RSA PRIVATE KEY-----', '')
</snippet></ROW><ROW><id>19773913</id><snippet>re.findall</snippet></ROW><ROW><id>19773913</id><snippet>&gt; (a{3,5})
0000: ['aaaaa', 'aaaaa', 'aaaa']
&gt; (aaa)(...)
0000: [('aaa', 'aaa'), ('aaa', 'aaa')]
</snippet></ROW><ROW><id>19774499</id><snippet>current_dict = {'corse': 378, 'cielo': 209, 'mute': 16}
print(current_dict)
def replace_value_with_definition(key_to_find, definition):
    for key in current_dict.keys():
        if key == key_to_find:
            current_dict[key] = definition

replace_value_with_definition('corse', 'Definition of "corse"')
print(current_dict)
</snippet></ROW><ROW><id>19774499</id><snippet>{'corse': 378, 'cielo': 209, 'mute': 16}
{'corse': 'Definition of "corse"', 'cielo': 209, 'mute': 16}
</snippet></ROW><ROW><id>19774499</id><snippet>def gen_replace_value_with_definition(key_to_find, definition):
    for key in current_dict.keys():
        if key == key_to_find:
            current_dict[key] = definition
            yield True
    yield False

found = False
while not found:
    found = next(gen_replace_value_with_definition('corse', 'Definition of "corse" via generator'))

print(current_dict)
</snippet></ROW><ROW><id>19774499</id><snippet>{'corse': 'Definition of "corse" via generator', 'cielo': 209, 'mute': 16}
</snippet></ROW><ROW><id>19774508</id><snippet>os.path</snippet></ROW><ROW><id>19774508</id><snippet>import os
import numpy as np

fname = os.path.normpath('C:/Users/Michael/SkyDrive/Documents/university/third_year/uni_work/labs/bandgap_spectro/bandgap_spectro_GaAs_1nm/bandgap_GaAs_v_vs_lambda_1nm.txt')
np.loadtxt(fname, float)
</snippet></ROW><ROW><id>19774508</id><snippet>loadtxt(ur'C:\Users\Michael\SkyDrive\Documents\university\third_year\uni_work\labs\bandgap_spectro\bandgap_spectro_GaAs_1nm\bandgap_GaAs_v_vs_lambda_1nm.txt', float)
</snippet></ROW><ROW><id>19774508</id><snippet>ur</snippet></ROW><ROW><id>19774508</id><snippet>r</snippet></ROW><ROW><id>19774508</id><snippet>In [132]: r'C:\Users\Michael\SkyDrive\Documents\university\third_year\uni_work\labs\bandgap_spectro\bandgap_spectro_GaAs_1nm\bandgap_GaAs_v_vs_lambda_1nm.txt'
Out[132]: 'C:\\Users\\Michael\\SkyDrive\\Documents\\university\\third_year\\uni_work\\labs\\bandgap_spectro\\bandgap_spectro_GaAs_1nm\\bandgap_GaAs_v_vs_lambda_1nm.txt'
</snippet></ROW><ROW><id>19774508</id><snippet>u</snippet></ROW><ROW><id>19774508</id><snippet>x08</snippet></ROW><ROW><id>19774508</id><snippet>\b</snippet></ROW><ROW><id>19774508</id><snippet>In [133]: '\b'
Out[133]: '\x08'
</snippet></ROW><ROW><id>19775145</id><snippet>file1 = open("example.txt", "r")
alldatainfile1 = file1.read()
file1.close()

file2 = open("example.txt", "r")
alldatainfile2 = file2.read()
file2.close()
</snippet></ROW><ROW><id>19775145</id><snippet>file1 = open("example.txt", "w")
file1.write(alldatainfile2)
file1.close()
</snippet></ROW><ROW><id>19775145</id><snippet>For line in yourfile</snippet></ROW><ROW><id>19775145</id><snippet>total = 0
for line in alldatainfile1:
  linesplit.split("   ") #3 whitespaces, since you got it that way
  total = total + line[1]
print("total of column1: " + total)
</snippet></ROW><ROW><id>19775171</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.tree1 = QtGui.QTreeWidget(self)
        self.tree2 = QtGui.QTreeWidget(self)
        layout = QtGui.QHBoxLayout(self)
        for tree in (self.tree1, self.tree2):
            tree.header().hide()
            tree.itemExpanded.connect(self.handleExpanded)
            tree.itemCollapsed.connect(self.handleCollapsed)
            for text in 'one two three four'.split():
                item = QtGui.QTreeWidgetItem(tree, [text])
                for text in 'red blue green'.split():
                    child = QtGui.QTreeWidgetItem(item, [text])
            layout.addWidget(tree)

    def handleExpanded(self, item):
        self.syncExpansion(item, True)

    def handleCollapsed(self, item):
        self.syncExpansion(item, False)

    def syncExpansion(self, item, expand=True):
        if item is not None:
            tree = item.treeWidget()
            if tree is self.tree1:
                tree = self.tree2
            else:
                tree = self.tree1
            text = item.text(0)
            for other in tree.findItems(text, QtCore.Qt.MatchFixedString):
                other.setExpanded(expand)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.setGeometry(300, 500, 300, 300)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>19775461</id><snippet>random.choice</snippet></ROW><ROW><id>19775461</id><snippet>letter_to_replace = random.choice(['A', 'C', 'G', 'T'])
</snippet></ROW><ROW><id>19775461</id><snippet>'AAA'</snippet></ROW><ROW><id>19775461</id><snippet>'A'</snippet></ROW><ROW><id>19775461</id><snippet>random.randrange(3)</snippet></ROW><ROW><id>19775461</id><snippet>for codon in codons:
    index_to_replace = random.randrange(3)
    codon[index_to_replace] = letter_to_replace
</snippet></ROW><ROW><id>19775461</id><snippet>codon</snippet></ROW><ROW><id>19775461</id><snippet>def string_replace(s, index, char):
    return s[:index] + char + s[index+1:]
</snippet></ROW><ROW><id>19775461</id><snippet>s[:index]</snippet></ROW><ROW><id>19775461</id><snippet>index</snippet></ROW><ROW><id>19775461</id><snippet>s[i:j]</snippet></ROW><ROW><id>19775461</id><snippet>i</snippet></ROW><ROW><id>19775461</id><snippet>i+1</snippet></ROW><ROW><id>19775461</id><snippet>j-1</snippet></ROW><ROW><id>19775461</id><snippet>j</snippet></ROW><ROW><id>19775461</id><snippet>s[index+1]</snippet></ROW><ROW><id>19775461</id><snippet>index+1</snippet></ROW><ROW><id>19775461</id><snippet>index</snippet></ROW><ROW><id>19775461</id><snippet>char</snippet></ROW><ROW><id>19775461</id><snippet>index</snippet></ROW><ROW><id>19775461</id><snippet>index</snippet></ROW><ROW><id>19775461</id><snippet>codons = [string_replace(codon, random.randrange(3), letter_to_replace)
          for codon in codons]
</snippet></ROW><ROW><id>19775461</id><snippet>a = [1, 2, 3, 4]
b = [2 * element for element in a]
assert b == [2, 4, 6, 8]

c = []
for element in a:
    c.append(2 * element)
assert c == b
</snippet></ROW><ROW><id>19775461</id><snippet>if</snippet></ROW><ROW><id>19775461</id><snippet>for</snippet></ROW><ROW><id>19775461</id><snippet>set</snippet></ROW><ROW><id>19775461</id><snippet>dict</snippet></ROW><ROW><id>19775461</id><snippet>list</snippet></ROW><ROW><id>19775461</id><snippet>with</snippet></ROW><ROW><id>19775461</id><snippet># Read the codons into a list
with open(scgenome) as f:
    codons = [line.split('\t')[12] for line in f]

# Create a new list of mutated codons
def string_replace(s, index, char):
    return s[:index] + char + s[index+1:]
letter_to_replace = random.choice(['A', 'C', 'G', 'T'])
codons = [string_replace(codon, random.randrange(3), letter_to_replace)
          for codon in codons]
</snippet></ROW><ROW><id>19775461</id><snippet>def string_replace(s, index, char):
    return s[:index] + char + s[index+1:]

def mutate_codon(codon):
    index = random.randrange(3)        
    new_base = random.choice(list({'A', 'C', 'T', 'G'} - {codon[index]}))
    return string_replace(codon, index, new_base)

codons = [mutate_codon(codon) for codon in codons]
</snippet></ROW><ROW><id>19775461</id><snippet>-</snippet></ROW><ROW><id>19775461</id><snippet>{'A', 'C', 'T', 'G'} - {'T'}</snippet></ROW><ROW><id>19775461</id><snippet>{'A', 'C', 'G'}</snippet></ROW><ROW><id>19775461</id><snippet>codon[index]</snippet></ROW><ROW><id>19775461</id><snippet>choice</snippet></ROW><ROW><id>19775461</id><snippet>new_base = random.choice([base for base in codon if base != codon[index]])
</snippet></ROW><ROW><id>19775766</id><snippet>next</snippet></ROW><ROW><id>19775766</id><snippet>in</snippet></ROW><ROW><id>19775766</id><snippet>&gt;&gt;&gt; "in" in "indigo"
True
&gt;&gt;&gt; "in" in "violet"
False
&gt;&gt;&gt; "0" in "10"
True
&gt;&gt;&gt; "1" in "10"
True
</snippet></ROW><ROW><id>19775766</id><snippet>in</snippet></ROW><ROW><id>19775766</id><snippet>&gt;&gt;&gt; "in" in ["in", "out"]
True
&gt;&gt;&gt; "in" in ["indigo", "violet"]
False
</snippet></ROW><ROW><id>19775766</id><snippet>&gt;&gt;&gt; "in" in {"in": "out"}
True
&gt;&gt;&gt; "in" in {"out": "in"}
False
</snippet></ROW><ROW><id>19775773</id><snippet>collections.abc</snippet></ROW><ROW><id>19775773</id><snippet>Mapping</snippet></ROW><ROW><id>19775773</id><snippet>Sequence</snippet></ROW><ROW><id>19775773</id><snippet>Mapping</snippet></ROW><ROW><id>19775773</id><snippet>class MyMapping(collections.abc.Mapping):
    def __getitem__(self, item)
    def __iter__(self)
    def __len__(self)
</snippet></ROW><ROW><id>19775773</id><snippet>Mapping</snippet></ROW><ROW><id>19775773</id><snippet>dict</snippet></ROW><ROW><id>19775773</id><snippet>__contains__</snippet></ROW><ROW><id>19775773</id><snippet>keys</snippet></ROW><ROW><id>19775773</id><snippet>items</snippet></ROW><ROW><id>19775773</id><snippet>values</snippet></ROW><ROW><id>19775773</id><snippet>get</snippet></ROW><ROW><id>19775773</id><snippet>__eq__</snippet></ROW><ROW><id>19775773</id><snippet>__ne__</snippet></ROW><ROW><id>19775773</id><snippet>MutableMapping</snippet></ROW><ROW><id>19775773</id><snippet>class MyMutableMapping(collections.abc.MutableMapping):
    def __getitem__(self, item)
    def __setitem__(self, item)
    def __delitem__(self, item)
    def __iter__(self)
    def __len__(self)
</snippet></ROW><ROW><id>19775773</id><snippet>MutableMapping</snippet></ROW><ROW><id>19775773</id><snippet>Mapping</snippet></ROW><ROW><id>19775773</id><snippet>pop</snippet></ROW><ROW><id>19775773</id><snippet>popitem</snippet></ROW><ROW><id>19775773</id><snippet>clear</snippet></ROW><ROW><id>19775773</id><snippet>update</snippet></ROW><ROW><id>19775773</id><snippet>setdefault</snippet></ROW><ROW><id>19775773</id><snippet>dict</snippet></ROW><ROW><id>19775810</id><snippet>scatter</snippet></ROW><ROW><id>19775810</id><snippet>event.artist.get_offsets()</snippet></ROW><ROW><id>19775810</id><snippet>get_offsets</snippet></ROW><ROW><id>19775810</id><snippet>self._offsets</snippet></ROW><ROW><id>19775810</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def onpick3(event):
    index = event.ind
    xy = event.artist.get_offsets()
    print '--------------'
    print xy[index]


fig, ax = plt.subplots()

x, y = np.random.random((2, 10))
x1, y1 = np.random.random((2, 10))

p = ax.scatter(x, y, marker='*', s=60, color='r', picker=True)
p1 = ax.scatter(x1, y1, marker='*', s=60, color='b', picker=True)

fig.canvas.mpl_connect('pick_event', onpick3)
plt.show()
</snippet></ROW><ROW><id>19775810</id><snippet>scatter</snippet></ROW><ROW><id>19775810</id><snippet>plot</snippet></ROW><ROW><id>19775810</id><snippet>scatter</snippet></ROW><ROW><id>19775810</id><snippet>Line2D</snippet></ROW><ROW><id>19775810</id><snippet>plot</snippet></ROW><ROW><id>19775810</id><snippet>plot</snippet></ROW><ROW><id>19775810</id><snippet>x, y = artist.get_data()</snippet></ROW><ROW><id>19775810</id><snippet>mpldatacursor</snippet></ROW><ROW><id>19776035</id><snippet>for _ in range(20):   # value is not used, it is not an angle, but the number of squares
    brandon.left(18)  # pick some fixed angle to turn by
    drawsq(brandon, 50)
</snippet></ROW><ROW><id>19776143</id><snippet>self.__class__</snippet></ROW><ROW><id>19776143</id><snippet>type(self)</snippet></ROW><ROW><id>19776143</id><snippet>super()</snippet></ROW><ROW><id>19776143</id><snippet>super()</snippet></ROW><ROW><id>19776143</id><snippet>super(B, self)</snippet></ROW><ROW><id>19776143</id><snippet>B</snippet></ROW><ROW><id>19776143</id><snippet>__class__</snippet></ROW><ROW><id>19776143</id><snippet>super()</snippet></ROW><ROW><id>19776143</id><snippet>super(self.__class__, self)</snippet></ROW><ROW><id>19776143</id><snippet>super(type(self), self)</snippet></ROW><ROW><id>19776143</id><snippet>self.__class__</snippet></ROW><ROW><id>19776143</id><snippet>class B(A):
    def __init__(self):
        print("B __init__")
        super().__init__()

    def foo(self):
        print("B foo")
        super().foo()
</snippet></ROW><ROW><id>19776143</id><snippet>class B(A):
    def __init__(self):
        print("B __init__")
        super(B, self).__init__()

    def foo(self):
        print("B foo")
        super(B, self).foo()
</snippet></ROW><ROW><id>19776143</id><snippet>bind_foo()</snippet></ROW><ROW><id>19776143</id><snippet>foo</snippet></ROW><ROW><id>19776143</id><snippet>def bind_foo(self, klass=None):
    old_foo = self.foo
    if klass is None:
        klass = type(self)

    def new_foo():
        old_foo()
        super(klass, self).foo()

    self.foo = new_foo
</snippet></ROW><ROW><id>19776143</id><snippet>__class__</snippet></ROW><ROW><id>19776143</id><snippet>self</snippet></ROW><ROW><id>19776143</id><snippet>A</snippet></ROW><ROW><id>19776143</id><snippet>C</snippet></ROW><ROW><id>19776143</id><snippet>foo</snippet></ROW><ROW><id>19776143</id><snippet>C</snippet></ROW><ROW><id>19776143</id><snippet>D</snippet></ROW><ROW><id>19776143</id><snippet>C</snippet></ROW><ROW><id>19776143</id><snippet>bind_foo()</snippet></ROW><ROW><id>19776143</id><snippet>super()</snippet></ROW><ROW><id>19776143</id><snippet>D</snippet></ROW><ROW><id>19776143</id><snippet>C</snippet></ROW><ROW><id>19776143</id><snippet>bind_foo()</snippet></ROW><ROW><id>19776143</id><snippet>__class__</snippet></ROW><ROW><id>19776143</id><snippet>self.</snippet></ROW><ROW><id>19776143</id><snippet>class C(A):
    def __init__(self):
        print("C __init__")
        super().__init__()
        self.bind_foo(__class__)
</snippet></ROW><ROW><id>19776143</id><snippet>super()</snippet></ROW><ROW><id>19776143</id><snippet>__init__</snippet></ROW><ROW><id>19776143</id><snippet>super()</snippet></ROW><ROW><id>19776143</id><snippet>new_foo()</snippet></ROW><ROW><id>19776143</id><snippet>C</snippet></ROW><ROW><id>19776143</id><snippet>bind_foo()</snippet></ROW><ROW><id>19776143</id><snippet>super()</snippet></ROW><ROW><id>19776143</id><snippet>self.bind_foo()</snippet></ROW><ROW><id>19776184</id><snippet>fminimax</snippet></ROW><ROW><id>19776184</id><snippet>fgoalattain</snippet></ROW><ROW><id>19776184</id><snippet>gamultiobj</snippet></ROW><ROW><id>19776199</id><snippet>B</snippet></ROW><ROW><id>19776199</id><snippet>arange</snippet></ROW><ROW><id>19776199</id><snippet>A[((0,),(1,)), B]
</snippet></ROW><ROW><id>19776199</id><snippet>A[np.arange(2)[:, None], B]
</snippet></ROW><ROW><id>19776199</id><snippet>i</snippet></ROW><ROW><id>19776199</id><snippet>j</snippet></ROW><ROW><id>19776199</id><snippet>i = np.array([[0, 0],
              [1, 1]])
j = B
</snippet></ROW><ROW><id>19776199</id><snippet>i = np.array([[0],
              [1]])
</snippet></ROW><ROW><id>19776199</id><snippet>B</snippet></ROW><ROW><id>19776199</id><snippet>np.arange(2)[:,None]</snippet></ROW><ROW><id>19776199</id><snippet>2</snippet></ROW><ROW><id>19776199</id><snippet>arange</snippet></ROW><ROW><id>19776199</id><snippet>i</snippet></ROW><ROW><id>19776199</id><snippet>B</snippet></ROW><ROW><id>19776199</id><snippet>i = np.indices(B.shape)[0]
</snippet></ROW><ROW><id>19776199</id><snippet>i</snippet></ROW><ROW><id>19776199</id><snippet>j</snippet></ROW><ROW><id>19776199</id><snippet>&gt;&gt;&gt; A[i, j]
array([[ 25.,  13.],
       [ 18.,  25.]])
</snippet></ROW><ROW><id>19776413</id><snippet>os.path.getmtime</snippet></ROW><ROW><id>19776413</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; import time
&gt;&gt;&gt; tmp_fname = '/tmp/tst'
&gt;&gt;&gt; with open(tmp_fname, 'w') as f:
...     pass
...
&gt;&gt;&gt; os.path.getctime('/tmp/tst')
1383596461.0
&gt;&gt;&gt; time.ctime(os.path.getctime(tmp_fname))
'Mon Nov  4 20:21:01 2013' # changed 
</snippet></ROW><ROW><id>19776496</id><snippet>self.PAUSED = False

while True:
    for event in pygame.event.get():
        if event.type==KEYDOWN:
            if event.key==K_q:
                self.PAUSED = not self.PAUSED


    if not self.PAUSED:

        x+=movex
        y+=movey
        screen.fill((r,0,0))
        screen.blit(bif,(0,0))
        screen.blit(player,(x,y)) 

        pygame.display.update() 
</snippet></ROW><ROW><id>19776496</id><snippet>PAUSED</snippet></ROW><ROW><id>19776496</id><snippet>self.</snippet></ROW><ROW><id>19776496</id><snippet>import pygame, sys
from pygame.locals import * 

try:
    import Android
except ImportError:
    Android = None

pygame.init()

if Android:
    android.init()
    android.map_key(android.KEYCODE_BACK, pygame.K_ESCAPE)

size = width, height = 1276,650
screen = pygame.display.set_mode(size)

r = 0
bif = pygame.image.load("map.png") 
pygame.display.set_caption("Pygame 2D RPG !")
x,y=0,0
movex, movey=0,0
character="boy.png"
player=pygame.image.load(character).convert_alpha()

PAUSED = False
font = pygame.font.SysFont("serif", 72)
text_paused = font.render("PAUSED", True, (255, 0, 0))

while True:

    # --- events ---

    for event in pygame.event.get():

        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

        if event.type==KEYDOWN:
            if event.key == K_ESCAPE:
                pygame.quit()
                sys.exit()
            elif event.key==K_q:
                PAUSED = not PAUSED

        if not PAUSED:
            if event.type==KEYDOWN:
                if event.key==K_a:
                    movex=-1
                elif event.key==K_d:
                    movex=+1
                elif event.key==K_w:
                    movey=-1
                elif event.key==K_s:
                    movey=+1
            if event.type==KEYUP:
                if event.key==K_a:
                    movex=0
                elif event.key==K_d:
                    movex=0
                elif event.key==K_w:
                    movey=0
                elif event.key==K_s:
                    movey=0

    # --- changing values ---

    if not PAUSED:
        x+=movex
        y+=movey

    # --- drawing ---

    screen.fill((r,0,0))
    screen.blit(bif,(0,0))
    screen.blit(player,(x,y)) 

    if PAUSED:
        screen.blit(text_paused, (100, 100))

    pygame.display.update() 
</snippet></ROW><ROW><id>19776496</id><snippet>import pygame, sys
from pygame.locals import * 

try:
    import Android
except ImportError:
    Android = None


#----------------------------------------------------------------------

class Background():

    def __init__(self, screen):

        self.screen = screen

        self.x = 0
        self.y = 0

        self.r = 0

        filename = "maps.png" # "start_screen.jpg" #

        self.image = pygame.image.load(filename).convert_alpha()

    def draw(self):
        self.screen.fill((self.r,0,0))
        self.screen.blit(self.image, (self.x, self.y))


#----------------------------------------------------------------------

class Player():

    def __init__(self, screen):

        self.screen = screen

        self.x = 0
        self.y = 0
        self.movex = 0
        self.movey = 0

        filename = "boy.png" # "jar.png" # 

        self.image = pygame.image.load(filename).convert_alpha()

    def move(self):
        self.x += self.movex
        self.y += self.movey        

    def draw(self):
        self.screen.blit(self.image, (self.x, self.y))

    def events(self, event):

        if event.type == KEYDOWN:
            if event.key == K_a:
                self.movex = -1
            elif event.key == K_d:
                self.movex = +1
            elif event.key == K_w:
                self.movey = -1
            elif event.key == K_s:
                self.movey = +1

        if event.type==KEYUP:
            if event.key == K_a:
                self.movex = 0
            elif event.key == K_d:
                self.movex = 0
            elif event.key == K_w:
                self.movey = 0
            elif event.key == K_s:
                self.movey = 0

#----------------------------------------------------------------------

class Game():

    def __init__(self):

        pygame.init()

        if Android:
            android.init()
            android.map_key(android.KEYCODE_BACK, pygame.K_ESCAPE)

        self.size = self.width, self.height = 1276, 650
        self.screen = pygame.display.set_mode(self.size)

        pygame.display.set_caption("Pygame 2D RPG !")

        self.background = Background(self.screen)
        self.player = Player(self.screen)

        font = pygame.font.SysFont("serif", 72)
        self.text_paused = font.render("PAUSED", True, (255, 0, 0))

    def run(self):

        PAUSED = False

        RUNNING = True

        while RUNNING:

            # --- events ---

            for event in pygame.event.get():

                if event.type == pygame.QUIT:
                    RUNNING = False

                if event.type==KEYDOWN:
                    if event.key == K_ESCAPE:
                        RUNNING = False
                    elif event.key==K_q:
                        PAUSED = not PAUSED

                if not PAUSED:
                    self.player.events(event)

            # --- changing values ---

            if not PAUSED:
                self.player.move()

            # --- drawing ---

            self.background.draw()
            self.player.draw()

            if PAUSED:
                self.screen.blit(self.text_paused, (100, 100))

            pygame.display.update() 

        pygame.quit()
        sys.exit()

#----------------------------------------------------------------------

if __name__ == '__main__':
    Game().run()
</snippet></ROW><ROW><id>19776591</id><snippet>def get_context_data(self, **kwargs):
    context = super(StateListView, self).get_context_data(**kwargs)
    context.update({'state': self.kwargs['location_state']})
    return context
</snippet></ROW><ROW><id>19776591</id><snippet>{{ state }}</snippet></ROW><ROW><id>19776591</id><snippet>{{ school.location_state }}</snippet></ROW><ROW><id>19776809</id><snippet>[value for key in dictA for value in dictA[key]]
</snippet></ROW><ROW><id>19776809</id><snippet>dictA.itervalues()</snippet></ROW><ROW><id>19776809</id><snippet>[value for lst in dictA.itervalues() for value in lst]
</snippet></ROW><ROW><id>19776809</id><snippet>for lst in dictA.itervalues():
    for value in lst:
        # append value to the output list
</snippet></ROW><ROW><id>19776809</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>19776809</id><snippet>from itertools import chain

list(chain.from_iterable(dictA.itervalues()))
</snippet></ROW><ROW><id>19776809</id><snippet>dictA.itervalues()</snippet></ROW><ROW><id>19776809</id><snippet>chain()</snippet></ROW><ROW><id>19776809</id><snippet>list()</snippet></ROW><ROW><id>19776809</id><snippet>any()</snippet></ROW><ROW><id>19776809</id><snippet>any('a' in lst for lst in dictA.itervalues())
</snippet></ROW><ROW><id>19776809</id><snippet>True</snippet></ROW><ROW><id>19776809</id><snippet>dictA</snippet></ROW><ROW><id>19776809</id><snippet>'a'</snippet></ROW><ROW><id>19776809</id><snippet>.itervalues()</snippet></ROW><ROW><id>19776860</id><snippet>l</snippet></ROW><ROW><id>19776860</id><snippet>l[716:716] = [l[716]]
</snippet></ROW><ROW><id>19776972</id><snippet>six</snippet></ROW><ROW><id>19776972</id><snippet>tox</snippet></ROW><ROW><id>19776972</id><snippet>tox</snippet></ROW><ROW><id>19776990</id><snippet>import wx

########################################################################
class MyPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)

        choices = ["", "1", "2", "3"]
        self.choices = choices
        self.cbo = wx.ComboBox(self, value="1", choices=choices)
        btn = wx.Button(self, label="Reset")
        btn.Bind(wx.EVT_BUTTON, self.onReset)

        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.Add(self.cbo, 0, wx.ALL, 5)
        sizer.Add(btn, 0, wx.ALL, 5)
        self.SetSizer(sizer)

    #----------------------------------------------------------------------
    def onReset(self, event):
        """"""
        print "resetting"
        self.cbo.SetValue("")


########################################################################
class MyFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="CombBox")
        panel = MyPanel(self)
        self.Show()

if __name__ == "__main__":
    app = wx.App(False)
    frame = MyFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>19777081</id><snippet>"s/(::\s+ni\s+=)[^=]*$/\1 512/"</snippet></ROW><ROW><id>19777081</id><snippet>r"s/(::\s+ni\s+=)[^=]*$/\1 512/",
</snippet></ROW><ROW><id>19777392</id><snippet>user="rakesh"</snippet></ROW><ROW><id>19777392</id><snippet>User</snippet></ROW><ROW><id>19777392</id><snippet>User</snippet></ROW><ROW><id>19777392</id><snippet>filter(user__username='rakesh')</snippet></ROW><ROW><id>19777392</id><snippet>User</snippet></ROW><ROW><id>19777462</id><snippet>sin(Aexp(Bt))</snippet></ROW><ROW><id>19777462</id><snippet>A</snippet></ROW><ROW><id>19777462</id><snippet>B</snippet></ROW><ROW><id>19777462</id><snippet>0</snippet></ROW><ROW><id>19777462</id><snippet>C</snippet></ROW><ROW><id>19777462</id><snippet>sin(g(t))</snippet></ROW><ROW><id>19777462</id><snippet>f</snippet></ROW><ROW><id>19777462</id><snippet>2 * pi * f = dg / dt</snippet></ROW><ROW><id>19777462</id><snippet>f0</snippet></ROW><ROW><id>19777462</id><snippet>0</snippet></ROW><ROW><id>19777462</id><snippet>fC</snippet></ROW><ROW><id>19777462</id><snippet>C</snippet></ROW><ROW><id>19777462</id><snippet>B = 1/C * log(fC/f0)
A = 2 * pi * f0 / B
</snippet></ROW><ROW><id>19777462</id><snippet>from math import pi, sin, log, exp

def sweep(f_start, f_end, interval, n_steps):
    b = log(f_end/f_start) / interval
    a = 2 * pi * f_start / b
    for i in range(n_steps):
        delta = i / float(n_steps)
        t = interval * delta
        g_t = a * exp(b * t)
        print t, 3 * sin(g_t)

sweep(1, 10, 5, 1000)
</snippet></ROW><ROW><id>19777462</id><snippet>sin(g_t + k)</snippet></ROW><ROW><id>19777462</id><snippet>from math import pi, sin, log, exp

def sweep(f_start, f_end, interval, n_steps, n_oversample=1):
    b = log(f_end/f_start) / interval
    a = 2 * pi * f_start / b
    for i in range(n_steps):
        for oversample in range(n_oversample):
            fractional_step = oversample / float(n_oversample)
            delta = (i + fractional_step) / float(n_steps)
            t = interval * delta
            g_t = a * exp(b * t)
            print t, 3 * sin(g_t)

sweep(16000.0, 16500.0, 256.0/48000.0, 256)      # looks strange
sweep(16000.0, 16500.0, 256.0/48000.0, 256, 4)   # looks fine with better resolution
</snippet></ROW><ROW><id>19777462</id><snippet>n_oversample</snippet></ROW><ROW><id>19777462</id><snippet>oversample = 0</snippet></ROW><ROW><id>19777462</id><snippet>fractional_step = 0</snippet></ROW><ROW><id>19777520</id><snippet>MakeWidget</snippet></ROW><ROW><id>19777520</id><snippet>    self.treeServiceSelection = MakeWidget()
</snippet></ROW><ROW><id>19777520</id><snippet>XmlReader</snippet></ROW><ROW><id>19777520</id><snippet>__init__</snippet></ROW><ROW><id>19777520</id><snippet>    self.treeServiceSelection.setHeaderLabels(['Servers and Services'])
    self.treeServiceSelection.source = QtXml.QXmlInputSource()
    self.treeServiceSelection.source.setData(xml)
    ...
</snippet></ROW><ROW><id>19777520</id><snippet>MakeWidget</snippet></ROW><ROW><id>19777520</id><snippet>__init__</snippet></ROW><ROW><id>19777520</id><snippet>    self.treeServiceSelection.handler = XmlHandler(self)
</snippet></ROW><ROW><id>19777520</id><snippet>Ui_MainWindow</snippet></ROW><ROW><id>19777520</id><snippet>XmlHandler</snippet></ROW><ROW><id>19777520</id><snippet>QTreeWidget</snippet></ROW><ROW><id>19777520</id><snippet>from ui import Ui_MainWindow

class MainWindow(QtGui.QMainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self)
        ui = Ui_MainWindow()
        ui.setupUi(self)
        # other setup code goes here
        ...
</snippet></ROW><ROW><id>19777520</id><snippet>MakeWidget</snippet></ROW><ROW><id>19777520</id><snippet>class MakeWidget(QtGui.QTreeWidget):
    def __init__(self, xml, parent=None):
        QtGui.QTreeWidget.__init__(self, parent)
</snippet></ROW><ROW><id>19777520</id><snippet>MainWindow.__init__</snippet></ROW><ROW><id>19777520</id><snippet>        self.treeServiceSelection = MakeWidget(xml, self)
</snippet></ROW><ROW><id>19777525</id><snippet>In [4]: timezone.now() == timezone.now()
Out[4]: False

In [5]: a = timezone.now()
In [6]: a == a
Out[6]: True


In [11]: print timezone.now() - timezone.now()
-1 day, 23:59:59.999984

In [12]: print a - a
0:00:00
</snippet></ROW><ROW><id>19777525</id><snippet>timezone.now()</snippet></ROW><ROW><id>19777528</id><snippet>deque</snippet></ROW><ROW><id>19777528</id><snippet>maxlen=days</snippet></ROW><ROW><id>19777528</id><snippet>range()</snippet></ROW><ROW><id>19777528</id><snippet>import collections

class MovingAverage(object)::

    def calculate(self, alist, days=2):

        averages = []
        signals  = []
        days     = float(days)   # make sure average is always float
        prices   = [float(n) for n in alist[1::2]]
        window   = collections.deque(maxlen=days)

        # generate moving averages and signals
        for price in prices:
           window.append(price)
           averages.append(0)
           signals.append("")
           if len(window) == days:   # window is full, we can calc moving avg
               mavg = sum(window) / days
               averages[-1] = mavg
               if price &lt; mavg:
                    signals[-1] = "SELL"
                elif price &gt; mavg:
                    signals[-1] = "BUY"

        averages[:] = ("%.2f" % a for a in averages)
        averages[:days] = [""] * days

        return averages, signals
</snippet></ROW><ROW><id>19777622</id><snippet>IPv6</snippet></ROW><ROW><id>19777622</id><snippet>&gt;&gt;&gt; P = sniff(filter='ip6', count=0)
… make sure to capture an IPv6 UDP packet …
&gt;&gt;&gt; UDP in P
False
&gt;&gt;&gt; IPv6 in P
False
&gt;&gt;&gt; UDP in P[0]
True
&gt;&gt;&gt; IPv6 in P[0]
True
&gt;&gt;&gt; P[0][IPv6]
&lt;IPv6  version=6L tc=0L fl=0L plen=98 nh=UDP …
&gt;&gt;&gt; ICMPv6EchoRequest in P[0]
False
&gt;&gt;&gt; ICMPv6EchoRequest
&lt;class 'scapy.layers.inet6.ICMPv6EchoRequest'&gt;
</snippet></ROW><ROW><id>19777643</id><snippet>xrange</snippet></ROW><ROW><id>19777643</id><snippet>itertools.izip</snippet></ROW><ROW><id>19777643</id><snippet>list</snippet></ROW><ROW><id>19777643</id><snippet>list(range(10))</snippet></ROW><ROW><id>19777643</id><snippet>list(zip(...))</snippet></ROW><ROW><id>19777663</id><snippet>__isnull</snippet></ROW><ROW><id>19777663</id><snippet>a_qs = Album.objects.filter(parent__isnull=True)
</snippet></ROW><ROW><id>19777663</id><snippet>extra</snippet></ROW><ROW><id>19777663</id><snippet>a_qs = Album.objects.extra(where=["parent_id is null"])
</snippet></ROW><ROW><id>19777768</id><snippet>self.nb.AddPage(page1, "page3")
self.sizer.Add(self.nb, 1, wx.EXPAND)
self.p.SetSizer(self.sizer)
</snippet></ROW><ROW><id>19777768</id><snippet>page3 = PageThree(self.nb)
self.nb.AddPage(page3, "page3")
</snippet></ROW><ROW><id>19777864</id><snippet>put</snippet></ROW><ROW><id>19777864</id><snippet>put(self, localpath, remotepath, callback=None, confirm=True)
Copy a local file (localpath) to the SFTP server as remotepath.
</snippet></ROW><ROW><id>19777864</id><snippet>sftp.put(filepath, localpath)
</snippet></ROW><ROW><id>19777864</id><snippet>'/brass/prod/bin/chris/test1/km_cust'</snippet></ROW><ROW><id>19777864</id><snippet>f = sftp.open(filepath)
sftp.putfo(f, localpath)
</snippet></ROW><ROW><id>19777864</id><snippet>f = sftp.open(localpath, 'wx')
sftp.getfo(filepath, f)
</snippet></ROW><ROW><id>19777864</id><snippet>filepath</snippet></ROW><ROW><id>19777864</id><snippet>/</snippet></ROW><ROW><id>19777864</id><snippet>s.exec_command("cp '{}' '{}'".format(filepath, localfile))
s.close()
</snippet></ROW><ROW><id>19777864</id><snippet>Channel</snippet></ROW><ROW><id>19778203</id><snippet>class MyClass():
    data = some_data
    def test(self):
        for i in data:
            if data is this:
                data[1] = something
            if data is that:
                data[1] = something
            else:
                data[1] = something else
            return data
</snippet></ROW><ROW><id>19778203</id><snippet>test2.py</snippet></ROW><ROW><id>19778203</id><snippet>from test1 import MyClass
my_instance = MyClass()
data = my_instance.test()
print(data[1])
</snippet></ROW><ROW><id>19778203</id><snippet>MyClass</snippet></ROW><ROW><id>19778203</id><snippet>class MyClass():
    data = some_data
    def test(self):
        for i in self.data:
            if self.data is this:
                self.data[1] = something
            if data is that:
                self.data[1] = something
            else:
                self.data[1] = something else
</snippet></ROW><ROW><id>19778203</id><snippet>test2.py</snippet></ROW><ROW><id>19778203</id><snippet>my_instance</snippet></ROW><ROW><id>19778203</id><snippet>from test1 import MyClass
my_instance = MyClass()
my_instance.test()
print(my_instance.data[1])
</snippet></ROW><ROW><id>19778203</id><snippet>test1</snippet></ROW><ROW><id>19778203</id><snippet>test2</snippet></ROW><ROW><id>19778203</id><snippet>class MyClass():
        data = some_data
        def test(self):
            for i in data:
                if data is this:
                    data[1] = something
                if data is that:
                    data[1] = something
                else:
                    data[1] = something else
            with open('data.txt', 'w') as f:
                f.writelines(data)
</snippet></ROW><ROW><id>19778203</id><snippet>with open('data.txt') as f:
    data = f.readlines()
print (data[1])
</snippet></ROW><ROW><id>19778306</id><snippet>pylast</snippet></ROW><ROW><id>19778306</id><snippet>pylast</snippet></ROW><ROW><id>19778306</id><snippet>getInfo</snippet></ROW><ROW><id>19778306</id><snippet>event.get_venue()</snippet></ROW><ROW><id>19778306</id><snippet>venue.getInfo</snippet></ROW><ROW><id>19778306</id><snippet>pylast</snippet></ROW><ROW><id>19778306</id><snippet># TODO: waiting for a venue.getInfo web service to use.
</snippet></ROW><ROW><id>19778306</id><snippet>pylast</snippet></ROW><ROW><id>19778306</id><snippet>Venue</snippet></ROW><ROW><id>19778306</id><snippet>Event</snippet></ROW><ROW><id>19778306</id><snippet>location</snippet></ROW><ROW><id>19778306</id><snippet>Event</snippet></ROW><ROW><id>19778306</id><snippet>def get_location(self):
    """Returns the location of the venue where the event is held."""
    doc = self._request("event.getInfo", True)
    loc = doc.getElementsByTagName("location")[0]
    return {node.nodeName: child.data
            for node in loc.childNodes
            for child in node.childNodes
            if child.nodeType == child.TEXT_NODE and child.data.strip()}        
pylast.Event.get_location = get_location
</snippet></ROW><ROW><id>19778306</id><snippet>artist = network.get_artist("Skinny Puppy")
event = artist.get_upcoming_events()[0]
print event.get_location()
</snippet></ROW><ROW><id>19778306</id><snippet>{'city': 'Santa Ana, CA', 'postalcode': '92704', 
 'street': '3503 S. Harbor Blvd.', 'country': 'United States'}
</snippet></ROW><ROW><id>19778332</id><snippet>array</snippet></ROW><ROW><id>19778332</id><snippet>&gt;&gt;&gt; import array
&gt;&gt;&gt; a = array.array('l', range(20))
</snippet></ROW><ROW><id>19778332</id><snippet>&gt;&gt;&gt; a.itemsize
4
</snippet></ROW><ROW><id>19778332</id><snippet>&gt;&gt;&gt; f = open('array.dat', "wb")
&gt;&gt;&gt; a.tofile(f)
&gt;&gt;&gt; f.close()
</snippet></ROW><ROW><id>19778332</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.stat('array.dat').st_size
80L
&gt;&gt;&gt; len(a) * a.itemsize
80
</snippet></ROW><ROW><id>19778332</id><snippet>&gt;&gt;&gt; f = open('array.dat', 'rb')
&gt;&gt;&gt; f.seek(7 * a.itemsize)
&gt;&gt;&gt; raw = f.read(a.itemsize)
&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack(a.typecode, raw)
(7,)
</snippet></ROW><ROW><id>19778351</id><snippet>Planificador</snippet></ROW><ROW><id>19778351</id><snippet>StringVar</snippet></ROW><ROW><id>19778351</id><snippet>StringVar</snippet></ROW><ROW><id>19778351</id><snippet>row</snippet></ROW><ROW><id>19778351</id><snippet>column</snippet></ROW><ROW><id>19778351</id><snippet>grid()</snippet></ROW><ROW><id>19778351</id><snippet>Frames</snippet></ROW><ROW><id>19778351</id><snippet>class Planificador(Frame):
    def __init__(self,master):
        Frame.__init__(self, master)
        self.master = master
        self.initUI()

    def initUI(self):
        self.master.title("Planner")
        self.frameOne = Frame(self.master)
        self.frameOne.grid(row=0,column=0)
        self.frameTwo = Frame(self.master)
        self.frameTwo.grid(row=0, column=1)
        self.frameThree = Frame(self.master)
        self.frameThree.grid(row=0, column=2)

        self.frameFour = Frame(self.master)
        self.frameFour.grid(row=1,column=0, sticky=N)
        self.frameFive = Frame(self.master)
        self.frameFive.grid(row=1, column=1)
        self.frameSix = Frame(self.master)
        self.frameSix.grid(row=1, column=2, sticky=N)

        self.frameSeven = Frame(self.master)
        self.frameSeven.grid(row=2,column=0)
        self.frameEight = Frame(self.master)
        self.frameEight.grid(row=2, column=1, sticky=S)
        self.frameNine = Frame(self.master)
        self.frameNine.grid(row=2, column=2)

        self.start_date_menu()

    def start_date_menu(self):
        initial_num_dates = int(raw_input("Number of dates?"))
#        initial_num_dates = 5
        self.DATE_MENU_ROW = 0  # initial date menu grid row
        self.COL_WIDTH = 10  # width of each subcolumn of dates

        for frame in (self.frameFour, self.frameSix):
            self.textoprioridad = Label(frame, text="Day in",
                                        width=self.COL_WIDTH, justify="center")
            self.textoprioridad.grid(row=self.DATE_MENU_ROW, column=0)
            self.lotestext = Label(frame, text="Day out", width=self.COL_WIDTH,
                                   justify="center")
            self.lotestext.grid(row=self.DATE_MENU_ROW, column=1)

        self.dates = [self.create_date_entry(date_index)
                        for date_index in xrange(initial_num_dates)]

        self.anadirpiezas = Button(self.frameEight, text="add more",
                                   command=self.addpieza, width=self.COL_WIDTH)
        self.anadirpiezas.grid(row=0, column=3)

    def addpieza(self):
        self.dates.append(self.create_date_entry(len(self.dates)))

    def create_date_entry(self, date_index):
        # create and return seq of two pairs of button, stringvar for a date
        menu_col = date_index % 2  # left/right column of the date frame
        menu_row = self.DATE_MENU_ROW + date_index/2 + 1
        frame = self.frameSix if menu_col else self.frameFour
        pairs = []
        for col in 0, 1:
            pairs.append(StringVar(value="--------"))
            pairs.append(Button(frame, textvariable=pairs[-1],
                                width=self.COL_WIDTH,
                                command=lambda v=pairs[-1]: self.fnCalendar(v)))
            pairs[-1].grid(row=menu_row, column=col)
        return tuple(pairs)

    def fnCalendar(self, datebar):
        tkCalendar(self.master, year, month, day, datebar)
</snippet></ROW><ROW><id>19778351</id><snippet>fnClickNumber()</snippet></ROW><ROW><id>19778351</id><snippet>class tkCalendar</snippet></ROW><ROW><id>19778351</id><snippet>    def fnClickNumber(self,event):
        owntags =self.canvas.gettags(CURRENT)
        for x in owntags:
            if (x == "current") or (x == "DayButton"): pass
            else:
                strdate = (str(self.year_var.get()) + "/" +
                           '%02d' % self.intmonth + "/" +
                           '%02d' % int(x))
                self.update_var.set(strdate)
                self.top.withdraw()
</snippet></ROW><ROW><id>19778355</id><snippet>import termios
attr = termios.tcgetattr(1)
attr[3] = attr[3] | termios.ECHO
termios.tcsetattr(1, termios.TCSANOW, attr)
</snippet></ROW><ROW><id>19778381</id><snippet>for..else</snippet></ROW><ROW><id>19778381</id><snippet>for line in f:
  if bar(line):
    break
else:
  # will only be called if for loop terminates (all lines read)
  baz()
</snippet></ROW><ROW><id>19778423</id><snippet>#get idealDate  
items = idealDate.split("-")
your_tuple =  (items[2],month[items[1]],items[0])
#convert from strings to ints if you wish
</snippet></ROW><ROW><id>19778593</id><snippet>actdf = pd.read_csv(StringIO(dataact), index_col=0, parse_dates=['date'], thousands=',')
</snippet></ROW><ROW><id>19778823</id><snippet>Foo</snippet></ROW><ROW><id>19778823</id><snippet>class Foo(object):
    def __init__(self):
    # ....

Foo.default_instance = Foo()
</snippet></ROW><ROW><id>19778823</id><snippet>def defaultinstance(Class):
    Class.default_instance = Class()

@defaultinstance
class Foo(object):
    # ...
</snippet></ROW><ROW><id>19778823</id><snippet>def defaultmeta(name, bases, attrs):
    Class = type(name, bases, attrs)
    Class.default_instance = Class()
    return Class

# Python 2.x usage
class Foo(object):
    __metaclass__ = defaultmeta
    # ...

# Python 3.x usage
class Foo(metaclass=defaultmeta):
    # ...
</snippet></ROW><ROW><id>19778938</id><snippet>pig_words = []

for word in sentence.split():
    if word[0] in VOWELS:
        pig_latin = word + "ay"
    else:
        pig_latin = word[1:] + word[0] + "ay"
    pig_words.append(pig_latin)

return pig_words
</snippet></ROW><ROW><id>19778938</id><snippet>split</snippet></ROW><ROW><id>19778938</id><snippet>join</snippet></ROW><ROW><id>19778938</id><snippet>return ' '.join(pig_words)
</snippet></ROW><ROW><id>19779121</id><snippet>example = {}
example[1] = "whatever"
example[99] = "whatever"
example[-12] = "something else"
example['cow'] = 'pie'
#delete
example.pop(99)
</snippet></ROW><ROW><id>19779121</id><snippet>example = [0 for _ in range(MAX_ITEMS)]
#delete
example[x-1] = 0
#add
example[x-1] = data
</snippet></ROW><ROW><id>19779362</id><snippet>&gt;&gt;&gt; x = sm.add_constant(ts12.index)
&gt;&gt;&gt; x
array([[ 1.,  1.],
       [ 1.,  2.],
       [ 1.,  3.],
       [ 1.,  4.],
       [ 1.,  5.]])
&gt;&gt;&gt; ts12_ols_fit = sm.OLS(ts12.values, ts12.index).fit()
&gt;&gt;&gt; ts12_ols_fit.params
array([ 0.63636364])
&gt;&gt;&gt; ts12_ols_fit = sm.OLS(ts12.values, x).fit()
&gt;&gt;&gt; ts12_ols_fit.params
array([ 6., -1.])
&gt;&gt;&gt; ts12_ols_fit.fittedvalues
array([ 5.,  4.,  3.,  2.,  1.])
</snippet></ROW><ROW><id>19779362</id><snippet>&gt;&gt;&gt; ts12_rlm_fit = sm.RLM(ts12.values+ 1e-4*np.random.randn(5), x).fit()
&gt;&gt;&gt; print ts12_rlm_fit.summary()
                    Robust linear Model Regression Results                    
==============================================================================
Dep. Variable:                      y   No. Observations:                    5
Model:                            RLM   Df Residuals:                        3
Method:                          IRLS   Df Model:                            1
Norm:                          HuberT                                         
Scale Est.:                       mad                                         
Cov Type:                          H1                                         
Date:                Mon, 04 Nov 2013                                         
Time:                        20:38:00                                         
No. Iterations:                    50                                         
==============================================================================
                 coef    std err          z      P&gt;|z|      [95.0% Conf. Int.]
------------------------------------------------------------------------------
const          5.9999    9.8e-05   6.12e+04      0.000         6.000     6.000
x1            -1.0000   2.96e-05  -3.38e+04      0.000        -1.000    -1.000
==============================================================================
</snippet></ROW><ROW><id>19779373</id><snippet>import win32api
win32api.ShellExecute(0,'open','mailto:',None,None ,0)
</snippet></ROW><ROW><id>19779373</id><snippet>mailto</snippet></ROW><ROW><id>19779373</id><snippet>import webbrowser
webbrowser.open('mailto:', new=1)
</snippet></ROW><ROW><id>19779413</id><snippet>str.split(pos)</snippet></ROW><ROW><id>19779413</id><snippet>if foo == 1 or 2</snippet></ROW><ROW><id>19779413</id><snippet>foo</snippet></ROW><ROW><id>19779413</id><snippet>(foo == 1) or 2</snippet></ROW><ROW><id>19779413</id><snippet>2</snippet></ROW><ROW><id>19779413</id><snippet>foo in (1, 2)</snippet></ROW><ROW><id>19779413</id><snippet>position</snippet></ROW><ROW><id>19779413</id><snippet>for part, positions in position.items():
    for pos in positions:
        if pos.split('-')[0] in ('A25', 'A26', 'A27'):
            print(part, "can be found on shelves A25 through A27")
            break
</snippet></ROW><ROW><id>19779413</id><snippet>any</snippet></ROW><ROW><id>19779449</id><snippet>a.conj().transpose()</snippet></ROW><ROW><id>19779449</id><snippet>a'</snippet></ROW><ROW><id>19779449</id><snippet>a.transpose()</snippet></ROW><ROW><id>19779449</id><snippet>a.'</snippet></ROW><ROW><id>19779449</id><snippet>transpose(a)</snippet></ROW><ROW><id>19779578</id><snippet>self._data</snippet></ROW><ROW><id>19779578</id><snippet>self._internal_data</snippet></ROW><ROW><id>19779578</id><snippet>self._data</snippet></ROW><ROW><id>19779938</id><snippet> d = {'one':1, 'two':2, 'three':3}
</snippet></ROW><ROW><id>19779938</id><snippet> dict((key,val) for key,val in enumerate(sorted(d))
</snippet></ROW><ROW><id>19779952</id><snippet>option = Select(self.driver.find_element_by_id("offer.sections.edit.jobHighlights.permanentLocationId")).first_selected_option
</snippet></ROW><ROW><id>19779973</id><snippet>plt.annotate(' ',xy=(0, 0),  # theta, radius
            xytext = (-np.pi/10,len(data)/6.),
            textcoords='data',
            arrowprops=dict(facecolor='red', shrink=0.05))
plt.annotate(' ',xy=(np.pi/4.2, 1.355*max(r)),  # theta, radius
            xytext = (np.pi/4.2, 1.2*max(r)),
            textcoords='data',
            arrowprops=dict(facecolor='blue', shrink=0.05))
</snippet></ROW><ROW><id>19779973</id><snippet>rmax = ax.get_rmax()
theta_startstop = [2*[-np.pi/10],2*[np.pi/4.2]]
r_startstop = [[0,0.1*rmax],[0.9*rmax,rmax]]
notchcolor = ['red', 'blue']
for i in range(len(r_startstop)):
    ax.plot(np.array(theta_startstop[i]), np.array(r_startstop[i]),
            lw=3, c=notchcolor[i])
ax.set_rmax(rmax)
</snippet></ROW><ROW><id>19780110</id><snippet>scrapy.utils.markup</snippet></ROW><ROW><id>19780110</id><snippet>from scrapy.utils.markup import remove_tags, remove_tags_with_content

input = hxs.select('//div[@id="content"]').extract()
output = remove_tags(remove_tags_with_content(input, ('script', )))
</snippet></ROW><ROW><id>19780279</id><snippet>from re import match
def coordinate(coord):   
    return bool(match("\s*\(\s*-?\d+(?:\.\d+)?\s*,\s*-?\d+(?:\.\d+)?\s*\)\s*$", coord))
</snippet></ROW><ROW><id>19780279</id><snippet>\s*         # Zero or more whitespace characters
\(          # An opening parenthesis
\s*         # Zero or more whitespace characters
-?          # An optional hyphen (for negative numbers)
\d+         # One or more digits
(?:\.\d+)?  # An optional period followed by one or more digits (for fractions)
\s*         # Zero or more whitespace characters
,           # A comma
\s*         # Zero or more whitespace characters
-?          # An optional hyphen (for negative numbers)
\d+         # One or more digits
(?:\.\d+)?  # An optional period followed by one or more digits (for fractions)
\s*         # Zero or more whitespace characters
\)          # A closing parenthesis
\s*         # Zero or more whitespace characters
$           # End of the string
</snippet></ROW><ROW><id>19780285</id><snippet>class Teacher(db.Model):
    school_name = associationproxy('school', 'name')
</snippet></ROW><ROW><id>19780285</id><snippet>==</snippet></ROW><ROW><id>19780285</id><snippet>select()</snippet></ROW><ROW><id>19780354</id><snippet>max(foo.itervalues())
</snippet></ROW><ROW><id>19780354</id><snippet>max(foo.values())
</snippet></ROW><ROW><id>19780722</id><snippet>from mechanize import Browser
    br = Browser()
    br.set_handle_robots(False)
    br.addheaders = [('User-agent', 'Firefox')]
    br.open("http://www.londoncoffeeguide.com")
    for form in br.forms():
        if form.attrs['id'] == 'form':
            br.form = form
    br.form['p$lt$zoneContent$PagePlaceholder$p$lt$zoneRight$logonform$Login1$UserName'] = 'username goes here'
    br.form['p$lt$zoneContent$PagePlaceholder$p$lt$zoneRight$logonform$Login1$Password'] = 'password goes here'
    response = br.submit()
</snippet></ROW><ROW><id>19780722</id><snippet>response.read()</snippet></ROW><ROW><id>19780794</id><snippet>Car</snippet></ROW><ROW><id>19780794</id><snippet>def __init__(self, year, make, speed):
</snippet></ROW><ROW><id>19780794</id><snippet>my_car = Car()
</snippet></ROW><ROW><id>19780794</id><snippet>my_car = Car(year, make, speed)
</snippet></ROW><ROW><id>19780794</id><snippet>my_car</snippet></ROW><ROW><id>19780863</id><snippet>x = [['a', 'b'], ['a', 'd'], ['b', 'd']]
y = [[['a', 'b'], 0.2], [['a', c], 0.5], [['a', 'd'], 0.3], [['b', 'd'], 0.1]]
total = sum([b for a, b in y if a in x])
</snippet></ROW><ROW><id>19780863</id><snippet>&gt;&gt;&gt; x = [['a','b'], ['a', 'd'], ['b', 'd']]
&gt;&gt;&gt; y = [[['a', 'b'], 0.2], [['a', 'c'], 0.5], [['a', 'd'], 0.3], [['b', 'd'], 0.1]]
&gt;&gt;&gt; [b for a, b in y if a in x]
[0.2, 0.3, 0.1]
&gt;&gt;&gt; sum([b for a, b in y if a in x])
0.6
</snippet></ROW><ROW><id>19781126</id><snippet>cardValue = { 'J': 11, 'Q': '12', 'K': 13, 'A': 14}
def getCardValue(c)
    return cardValue[c] if c in cardValue else c

while i &lt;= len(aDeck):
    print("Player A: {}\nPlayer B: {}".format(aDeck[i],bDeck[i]))
    cardA = getCardValue(aDeck[i])
    cardB = getCardValue(bDeck[i])
    if  cardA &gt; cardB:
        print("Player A wins!\n")
    elif cardA &lt; cardB:
        print("Player B wins!\n")
    else:
        print("It's a tie!\n")
    i += 1
</snippet></ROW><ROW><id>19781437</id><snippet>readlines</snippet></ROW><ROW><id>19781437</id><snippet>acceleration_mode</snippet></ROW><ROW><id>19781437</id><snippet>print(repr(show_coordinates))
</snippet></ROW><ROW><id>19781437</id><snippet>print(config_lines)
</snippet></ROW><ROW><id>19781437</id><snippet>show_coordinates</snippet></ROW><ROW><id>19781437</id><snippet>'true\n'</snippet></ROW><ROW><id>19781437</id><snippet>strip()</snippet></ROW><ROW><id>19781437</id><snippet>show_coordinates = config_lines[9].strip()
acceleration_mode = config_lines[11].strip()
</snippet></ROW><ROW><id>19781467</id><snippet>$(..)</snippet></ROW><ROW><id>19781467</id><snippet>tcpd = subprocess.Popen(["bash", "-c", "timeout 2 tcpdump -i eth1 -s 96 -w /usr/src/pcapFiles/dump$(date +%y%m%d-%H%M%S).pcap"], stdout=subprocess.PIPE)
output, err = tcpd.communicate()
</snippet></ROW><ROW><id>19781467</id><snippet>import datetime
filename=datetime.datetime.now().strftime("/usr/src/pcapFiles/dump%y%m%d-%H%M%S.pcap")
tcpd = subprocess.Popen(["timeout", "2", "tcpdump", "-i", "eth1", "-s", "96", "-w", filename, stdout=subprocess.PIPE)
output, err = tcpd.communicate()
</snippet></ROW><ROW><id>19781641</id><snippet>class Fruit:
    """ An Eatables Class"""
    def __init__(self, color="Black", shape="Round"): # Initailization
        self.color = color    # Set Class Variables to passed values
        self.shape = shape    # If no value passed, default to hard-coded ones.

Mango = Fruit("Raw Green", "Mangool")
# Above statement instantiates Class Fruit by passing variables as arguments.
# Thus, Mango is an **instance** of class **Fruit**
</snippet></ROW><ROW><id>19781641</id><snippet>&gt;&gt;&gt;print Mango.color
Raw Green
</snippet></ROW><ROW><id>19781641</id><snippet>class My_List:
    """My List Implementation"""
    def __init__(self, *args):
        self.data = list(args)
        self.Length = len(args)

    def GetMean(self):
        return 1.0*sum(self.data)/len(self.data)

    def Add(self, *args):
        self.data.extend(list(args))
        self.Length += len(args)

whole_num = My_List(0,1,2,3,4,5)
# Made an **instance** of class **My_List**
</snippet></ROW><ROW><id>19781641</id><snippet>&gt;&gt;&gt;print whole_num.GetMean()
2.5
&gt;&gt;&gt;whole_num.Add(6, 7)
&gt;&gt;&gt;print whole_num.data
[0, 1, 2, 3, 4, 5, 6, 7]
</snippet></ROW><ROW><id>19781755</id><snippet>lastrowid</snippet></ROW><ROW><id>19781755</id><snippet>...
cur.execute(query, args)
id = cur.lastrowid
</snippet></ROW><ROW><id>19781820</id><snippet>artist</snippet></ROW><ROW><id>19781820</id><snippet>remove</snippet></ROW><ROW><id>19781820</id><snippet>aspan = self.axes.axvspan(x0,event.xdata, facecolor='y', alpha=0.5)
# do stuff
aspan.remove()
plt.draw()
</snippet></ROW><ROW><id>19781820</id><snippet>self.aspan_list = []
self.aspan_list.append(self.axes.axvspan(x0,event.xdata, facecolor='y', alpha=0.5))
#...
for aspan in self.aspan_list:
    aspan.remove()
</snippet></ROW><ROW><id>19781881</id><snippet>bLoad = Button(app, text = "Load Table", command = loadTable)
bCourse = Button(app, text = "Add Course", command = addCourse)
bTime = Button(app, text = "Add Time", command = addTime)
bReset = Button(app, text = "Reset Time", command = resetTable)
bComment = Button(app, text = "Add Comment", command = addComment)
bView = Button(app, text = "View Table", command = viewTable)
</snippet></ROW><ROW><id>19781913</id><snippet>$output = passthru("python wordgame2.py $start_word $end_word");
</snippet></ROW><ROW><id>19781913</id><snippet>$output = passthru("python wordgame2.py ".$start_word." ".$end_word);
</snippet></ROW><ROW><id>19782023</id><snippet>print ("BALANCE: $%.2f" % sum)
</snippet></ROW><ROW><id>19782023</id><snippet>%</snippet></ROW><ROW><id>19782023</id><snippet>.2f</snippet></ROW><ROW><id>19782023</id><snippet>str.format()</snippet></ROW><ROW><id>19782023</id><snippet>print("BALANCE: {:.2f}".format(sum))
</snippet></ROW><ROW><id>19782079</id><snippet>scope</snippet></ROW><ROW><id>19782079</id><snippet>def split(lis):
    global lis
    lis = lis[3:] + lis[:3]
</snippet></ROW><ROW><id>19782079</id><snippet>def split(lis):
    lis[:] = lis[3:] + lis[:3] # Credits go to drewk for pointing this out
</snippet></ROW><ROW><id>19782079</id><snippet>def split(lis):
    lis = lis[3:] + lis[:3]
</snippet></ROW><ROW><id>19782079</id><snippet>split</snippet></ROW><ROW><id>19782079</id><snippet>id()</snippet></ROW><ROW><id>19782079</id><snippet>lis = [1, 2, 3]
def split(lis):
    lis = lis[3:] + lis[:3]
    print id(lis)
split(lis)
print id(lis)
</snippet></ROW><ROW><id>19782079</id><snippet>40785920
40785600
</snippet></ROW><ROW><id>19782272</id><snippet>list1 = [['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'], ['a', 'a', 'b', 'c'], ['a', 'b', 'c', 'd'], ['a', 'a', 'b', 'c']]

print max(list1.count(e) for e in list1)
</snippet></ROW><ROW><id>19782338</id><snippet>core.skillModService.addSkillMod(actor, 'movement', int(0.5))
</snippet></ROW><ROW><id>19782459</id><snippet>os.path.join()</snippet></ROW><ROW><id>19782459</id><snippet>&gt;&gt;&gt; mypath = "foo"
&gt;&gt;&gt; myfile = "bar.ext"
&gt;&gt;&gt; os.path.join( mypath, myfile) 
'foo/bar.ext'
&gt;&gt;&gt; os.path.join( "many", "path", "components", "beforethefile.ext" )
'many/path/components/beforethefile.ext'
</snippet></ROW><ROW><id>19782496</id><snippet>def _get_unit_cost(self, cr, uid, ids, field_name, arg, context):
    result = {}

    for bom_line_obj in self.browse(cr, uid, ids, context=context):
        result[bom_line_obj.id] = bom_line_obj.product_id.product_tmpl_id.standard_price or 0.00
    return result
</snippet></ROW><ROW><id>19782500</id><snippet>from os import path
base_path = "C:\\texts\\*.txt"  #RENAMED
for file in files:
    with open (file) as in_file:
        with open(path.join(base_path,"%s_tokenized.txt" % file)) as out_file:  #ATTENTION
            for line in in_file:
                words = line.split()
                for word in words:
                out_file.write(word)
                out_file.write("\n")
</snippet></ROW><ROW><id>19782500</id><snippet>($file_name)_tokenized.txt</snippet></ROW><ROW><id>19782500</id><snippet>path.join</snippet></ROW><ROW><id>19782500</id><snippet>&gt;&gt;&gt; path.join("~/Documents","out.txt")
'~/Documents/out.txt'
</snippet></ROW><ROW><id>19782549</id><snippet>events</snippet></ROW><ROW><id>19782549</id><snippet>events</snippet></ROW><ROW><id>19782549</id><snippet>wn.mainloop()</snippet></ROW><ROW><id>19782549</id><snippet>import turtle
wn = turtle.Screen()

tess = turtle.Turtle()

def draw(x, y): # x, y are mouse position arguments passed by onclick()

    tess.clear() # Clear out the drawing (if any)
    tess.reset() # Reset the turtle to original position
    tess.hideturtle()

    tess.left(36)
    tess.forward(100)
    for a in range(4):
        tess.left(144)
        tess.forward(100)
    tess.right(36) # to go to original place

draw(0, 0) # Draw the first time

wn.onclick(draw) # Register function draw to the event mouse_click
wn.onkey(wn.bye, "q") # Register function exit to event key_press "q"

wn.listen() # Begin listening to events like key_press &amp; mouse_clicks
wn.mainloop()
</snippet></ROW><ROW><id>19782643</id><snippet>'B'</snippet></ROW><ROW><id>19782643</id><snippet>1:2</snippet></ROW><ROW><id>19782643</id><snippet>['B']</snippet></ROW><ROW><id>19782643</id><snippet>apply</snippet></ROW><ROW><id>19782643</id><snippet>apply</snippet></ROW><ROW><id>19782643</id><snippet>upper</snippet></ROW><ROW><id>19782835</id><snippet>replace</snippet></ROW><ROW><id>19782835</id><snippet>datetime.timedelta(hours=24)</snippet></ROW><ROW><id>19783232</id><snippet>bdist</snippet></ROW><ROW><id>19783232</id><snippet>setup.py install</snippet></ROW><ROW><id>19783232</id><snippet>setup.py install</snippet></ROW><ROW><id>19783550</id><snippet>multi=True</snippet></ROW><ROW><id>19783550</id><snippet>conn  = session.connection().connection
cursor = conn.cursor()  # get mysql db-api cursor
cursor.execute(sql, multi=True)
</snippet></ROW><ROW><id>19783781</id><snippet>fit_transform</snippet></ROW><ROW><id>19783781</id><snippet>transform</snippet></ROW><ROW><id>19784069</id><snippet>numpy.split</snippet></ROW><ROW><id>19784069</id><snippet>import numpy as np

def findsplit(a):
    diff = a[1:] != a[:-1]
    edges = np.where(diff)[0]
    return edges + 1

array = np.array([0,0,0,1,1,1,1,2,2,3,4,4,4])
s = np.split(array, findsplit(array))
for a in s:
    print a
# [0 0 0]
# [1 1 1 1]
# [2 2]
# [3]
# [4 4 4]
</snippet></ROW><ROW><id>19784069</id><snippet>byFront = np.split(array, findsplit(array['Front']))
front_dict = {}
for sameFront in byFront:
    back_dict = {}
    byBack = np.split(sameFront, findsplit(sameFront['Back']))
    for sameBack in byBack:
        back_dict[sameBack['Back'][0]] = sameBack
    front_dict[sameFront['Front'][0]] = back_dict
</snippet></ROW><ROW><id>19784132</id><snippet>liquorID.BottleSize='750 ML'</snippet></ROW><ROW><id>19784132</id><snippet>SyntaxError</snippet></ROW><ROW><id>19784132</id><snippet>filter</snippet></ROW><ROW><id>19784132</id><snippet>StoreLiquor.objects.filter(storeID=ID_Store, 
                           liquorID__BottleSize='750 ML',
                           custom=False).update(StorePrice=liquorID__ShelfPrice)
</snippet></ROW><ROW><id>19784223</id><snippet>C:\Python27\Lib\site-packages\pip</snippet></ROW><ROW><id>19784223</id><snippet>%PATH%</snippet></ROW><ROW><id>19784223</id><snippet>echo %PATH%</snippet></ROW><ROW><id>19784223</id><snippet>C:\Python27\Scripts</snippet></ROW><ROW><id>19784223</id><snippet>pip.exe</snippet></ROW><ROW><id>19784496</id><snippet>IsAuthenticatedOrReadOnly</snippet></ROW><ROW><id>19784496</id><snippet>SAFE_METHODS = ['GET', 'HEAD', 'OPTIONS']

class IsAuthenticatedOrReadOnly(BasePermission):
    """
    The request is authenticated as a user, or is a read-only request.
    """

    def has_permission(self, request, view):
        if (request.method in SAFE_METHODS or
            request.user and
            request.user.is_authenticated()):
            return True
        return False
</snippet></ROW><ROW><id>19785146</id><snippet>sumof2dice = {}
</snippet></ROW><ROW><id>19785146</id><snippet>dice1 = 1 = []
while dice1 &lt;= 6:
    dice2 = 1
    while dice2 &lt;= 6:
         listofallcombinations.append((dice1,dice2))
         dice2 = dice2 + 1
    dice1 = dice1 + 1

sumof2dice = {}
sumation = 2
while sumation &lt;= 12:
    sumof2dice[str(sumation)] = []
    sumation = sumation + 1

for i in listofallcombinations:
    sumofdice = 2
    while sumofdice &lt;= 12:
        if i[0] + i[1] == sumofdice:
            sumof2dice[str(sumofdice)].append(i)
        sumofdice = sumofdice + 1


for i, s in sumof2dice.items():
    print i, s
</snippet></ROW><ROW><id>19785146</id><snippet>11 [(5, 6), (6, 5)]
10 [(4, 6), (5, 5), (6, 4)]
12 [(6, 6)]
3 [(1, 2), (2, 1)]
2 [(1, 1)]
5 [(1, 4), (2, 3), (3, 2), (4, 1)]
4 [(1, 3), (2, 2), (3, 1)]
7 [(1, 6), (2, 5), (3, 4), (4, 3), (5, 2), (6, 1)]
6 [(1, 5), (2, 4), (3, 3), (4, 2), (5, 1)]
9 [(3, 6), (4, 5), (5, 4), (6, 3)]
8 [(2, 6), (3, 5), (4, 4), (5, 3), (6, 2)]
</snippet></ROW><ROW><id>19785996</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

import wx

class Example(wx.Frame):

    def __init__(self):
        wx.Frame.__init__(self, None, wx.ID_ANY, 'wxButton', pos=(300, 150), size=(320, 250))
        self.panel = wx.Panel(self, -1)
        self.button1 = wx.Button(self.panel, id=-1, label='Button1', pos=(8, 8), size=(100, 20))
        self.button1.Bind(wx.EVT_BUTTON, self.button1Click)
        self.Centre()
        self.Show()

    def button1Click(self,event):
        self.SetTitle("Button1 clicked")

if __name__ == '__main__':

    app = wx.App()
    Example()
    app.MainLoop()
</snippet></ROW><ROW><id>19786041</id><snippet>os.walk()</snippet></ROW><ROW><id>19786041</id><snippet>os.path.islink(f)</snippet></ROW><ROW><id>19786041</id><snippet>os.path.islink</snippet></ROW><ROW><id>19786041</id><snippet>os.path.join(root, f)</snippet></ROW><ROW><id>19786041</id><snippet>dirs</snippet></ROW><ROW><id>19786041</id><snippet>followlinks=True</snippet></ROW><ROW><id>19786041</id><snippet>files</snippet></ROW><ROW><id>19786181</id><snippet>from fabric.api import cd,sudo
with cd('somepath'):
    sudo('./execute_script.sh')
</snippet></ROW><ROW><id>19786201</id><snippet>manipulate</snippet></ROW><ROW><id>19786201</id><snippet>False</snippet></ROW><ROW><id>19786201</id><snippet>col.insert(f, manipulate=False)
</snippet></ROW><ROW><id>19786243</id><snippet>&gt;&gt;&gt; df1 = pd.DataFrame({1: [1,2,3]})
&gt;&gt;&gt; df2 = pd.DataFrame({1: [1,2,3]})
&gt;&gt;&gt; hash(tuple(tuple(x) for x in df1.values)) == hash(tuple(tuple(x) for x in df2.values))
True
&gt;&gt;&gt; id(df1) == id(df2)
False
</snippet></ROW><ROW><id>19786243</id><snippet>tuple(map(tuple, df1.values))
</snippet></ROW><ROW><id>19786243</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; df = pd.DataFrame({1: [1,2,3], 2:[3,4,5]})
&gt;&gt;&gt; df['index'] = df.index
&gt;&gt;&gt; df
   1  2  index
0  1  3      0
1  2  4      1
2  3  5      2
&gt;&gt;&gt;
&gt;&gt;&gt; dfr = namedtuple('row', map(lambda x: 'col_' + str(x), df.columns))
&gt;&gt;&gt; res = tuple(map(lambda x: dfr(*x), df.values))
&gt;&gt;&gt; pprint(res)
(row(col_1=1, col_2=3, col_index=0),
 row(col_1=2, col_2=4, col_index=1),
 row(col_1=3, col_2=5, col_index=2))
</snippet></ROW><ROW><id>19786501</id><snippet>.execute_script("changeTree();")</snippet></ROW><ROW><id>19786501</id><snippet>.submit()</snippet></ROW><ROW><id>19786501</id><snippet>ActionChains</snippet></ROW><ROW><id>19786501</id><snippet>onclick</snippet></ROW><ROW><id>19786501</id><snippet>el = driver.find-element_by_id("someid")
webdriver.ActionChains(driver).move_to_element(el).click(el).perform()
</snippet></ROW><ROW><id>19787216</id><snippet>from bs4 import BeautifulSoup
import requests

resp = requests.get('http://dl.acm.org/results.cfm', 
                    params={'CFID': '376026650', 'CFTOKEN': '88529867'})
soup = BeautifulSoup(resp.content, from_encoding=resp.encoding)

for title_link in soup.find_all('a', target='_self'):
    # find parent row to base rest of search of
    row = next(p for p in title_link.parents if p.name == 'tr')
    title = title_link.get_text()
    authors = row.find('div', class_='authors').get_text()
    journal = row.find('div', class_='addinfo').get_text()
    abstract = row.find('div', class_='abstract2').get_text()
</snippet></ROW><ROW><id>19787216</id><snippet>next()</snippet></ROW><ROW><id>19787216</id><snippet>&lt;tr&gt;</snippet></ROW><ROW><id>19787539</id><snippet>mail.get_payload(decode=1).decode('utf-8')
</snippet></ROW><ROW><id>19787571</id><snippet>UserAccount.objects.filter(pk__in=friends, name=regex)
</snippet></ROW><ROW><id>19787715</id><snippet>in</snippet></ROW><ROW><id>19787715</id><snippet>UserAccount.objects.filter(id__in=friends)
</snippet></ROW><ROW><id>19787724</id><snippet>sys.path</snippet></ROW><ROW><id>19787724</id><snippet>subdir1</snippet></ROW><ROW><id>19787724</id><snippet>subdir1</snippet></ROW><ROW><id>19787724</id><snippet>subdir2</snippet></ROW><ROW><id>19787724</id><snippet>import mypkg.sibling
from mypkg import sibling
from mypkg.sibling import example
</snippet></ROW><ROW><id>19787724</id><snippet>from . import sibling
from .sibling import example
</snippet></ROW><ROW><id>19788332</id><snippet>group, created = Group.objects.get_or_create(name='Admin')
if created:
    log.info("Admin Group already exists")
group_id = group.pk
</snippet></ROW><ROW><id>19788332</id><snippet>pk</snippet></ROW><ROW><id>19788711</id><snippet>split</snippet></ROW><ROW><id>19788711</id><snippet>join</snippet></ROW><ROW><id>19788711</id><snippet>with open("Input.txt") as f:
    for line in f:
        print line, "".join(line.split()[:2])
</snippet></ROW><ROW><id>19788711</id><snippet>string_one    string_two string_onestring_two
</snippet></ROW><ROW><id>19788711</id><snippet>lines = []
with open("Input.txt", "r") as f:
    lines = f.readlines()
with open("Input.txt", "w") as f:
    for line in lines:
        line = line.strip()
        f.write(line + "".join(line.split()[:2]) + "\n")
</snippet></ROW><ROW><id>19789156</id><snippet>WSGIPythonPath /path/to/mysite.com:/path/to/your/venv/lib/python2.X/site-packages
</snippet></ROW><ROW><id>19789359</id><snippet>tanh activation function</snippet></ROW><ROW><id>19789501</id><snippet>new_list = my_list
</snippet></ROW><ROW><id>19789501</id><snippet>new_list = my_list[:]
</snippet></ROW><ROW><id>19789501</id><snippet>my_list[:]</snippet></ROW><ROW><id>19789501</id><snippet>replace Test
s, h, r, u, g, g, e, d
s, h, r, u, g, g, e, d
s, h, r, u, g, g, e, d
</snippet></ROW><ROW><id>19789501</id><snippet>id</snippet></ROW><ROW><id>19789501</id><snippet>new_list = my_list
print id(new_list), id(my_list)
</snippet></ROW><ROW><id>19789501</id><snippet>new_list = my_list[:]
print id(new_list), id(my_list)
</snippet></ROW><ROW><id>19789859</id><snippet>if message.body == "!r alist":
  room.message("I recommend: " + choice(alist))
  print("did it work?")
</snippet></ROW><ROW><id>19789859</id><snippet>myAList = myVars['alist']
choice(myAList[0])
</snippet></ROW><ROW><id>19789986</id><snippet>_</snippet></ROW><ROW><id>19789986</id><snippet>&gt;&gt;&gt; _, b = method1()
</snippet></ROW><ROW><id>19789986</id><snippet>_ignore</snippet></ROW><ROW><id>19789986</id><snippet>del _ignore</snippet></ROW><ROW><id>19789986</id><snippet>&gt;&gt;&gt; def method():
...    return 1, 2, 3

&gt;&gt;&gt; *_, b = foo()
&gt;&gt;&gt; b
3
</snippet></ROW><ROW><id>19790001</id><snippet>20131029</snippet></ROW><ROW><id>19790001</id><snippet>extras</snippet></ROW><ROW><id>19790001</id><snippet>import sys, os

here = os.path.dirname(os.path.abspath(__file__))

sys.path.insert(0, os.path.normpath(os.path.join(here, '../extras')))
</snippet></ROW><ROW><id>19790001</id><snippet>extras</snippet></ROW><ROW><id>19790001</id><snippet>import decorators
</snippet></ROW><ROW><id>19790001</id><snippet>__init__.py</snippet></ROW><ROW><id>19790001</id><snippet>from package_20131029.somethingelse import main

main()
</snippet></ROW><ROW><id>19790181</id><snippet>if any((password_needs_uppercase, password_needs_lowercase, 
password_needs_number)):
</snippet></ROW><ROW><id>19790392</id><snippet>num</snippet></ROW><ROW><id>19790392</id><snippet>traversal = np.linspace(0.0, 1.0,
                        num=max(alpha_beta_dist/float(precision), 2))
</snippet></ROW><ROW><id>19790392</id><snippet>np.linspace</snippet></ROW><ROW><id>19790392</id><snippet>num</snippet></ROW><ROW><id>19790392</id><snippet>In [23]: np.linspace(0, 1, num=0)
Out[23]: array([], dtype=float64)

In [24]: np.linspace(0, 1, num=1)
Out[24]: array([ 0.])

In [25]: np.linspace(0, 1, num=2)
Out[25]: array([ 0.,  1.])
</snippet></ROW><ROW><id>19790572</id><snippet>f(x,y)</snippet></ROW><ROW><id>19790572</id><snippet>x</snippet></ROW><ROW><id>19790572</id><snippet>y</snippet></ROW><ROW><id>19790572</id><snippet>from math import *

def f(x, y):
    return (3 * x) + (10 * y)

for x in range(5):
    for y in range(8):
        print "f(%d, %d) = %d" % (x, y, f(x, y))
</snippet></ROW><ROW><id>19790605</id><snippet>grep Rec STOM.log | grep 1887283 | grep 2013-07 | grep -oh "'.*'" | wc -c
</snippet></ROW><ROW><id>19790605</id><snippet>165
</snippet></ROW><ROW><id>19790605</id><snippet>'.*'</snippet></ROW><ROW><id>19790605</id><snippet>'</snippet></ROW><ROW><id>19790605</id><snippet>'</snippet></ROW><ROW><id>19790669</id><snippet>rawData = yaml.safe_load(f)</snippet></ROW><ROW><id>19790669</id><snippet>yaml.load(f)</snippet></ROW><ROW><id>19790669</id><snippet>testObj.__dict__ = rawData</snippet></ROW><ROW><id>19790669</id><snippet>__dict__</snippet></ROW><ROW><id>19790669</id><snippet>YAML.load</snippet></ROW><ROW><id>19790669</id><snippet>safe_load</snippet></ROW><ROW><id>19790701</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.genfromtxt("file.dat", skip_header=1, delimiter='\t')
array([[ 10. ,   0. ],
       [ 10.1,   0. ],
       [ 10.2,   0. ],
       [ 10.3,   0. ],
       [ 10.4,   0. ],
       [ 10.5,   0. ]])
</snippet></ROW><ROW><id>19790803</id><snippet>a</snippet></ROW><ROW><id>19790803</id><snippet>thread2</snippet></ROW><ROW><id>19790803</id><snippet>a</snippet></ROW><ROW><id>19790803</id><snippet>def thread2(threadname):
    global a
    while True:
        a += 1
        time.sleep(1)
</snippet></ROW><ROW><id>19790803</id><snippet>thread1</snippet></ROW><ROW><id>19790803</id><snippet>a</snippet></ROW><ROW><id>19790803</id><snippet>global a</snippet></ROW><ROW><id>19790803</id><snippet>def thread1(threadname):
    #global a       # Optional if you treat a as read-only
    while a &lt; 10:
        print a
</snippet></ROW><ROW><id>19790976</id><snippet>result = []
while n != 1: 
      result.append(n) 
      if n % 2 == 0:
          n //= 2
      else:
          n = n * 3 + 1
result.append(n) 

print result
</snippet></ROW><ROW><id>19791109</id><snippet>wsgiref.WSGIServer</snippet></ROW><ROW><id>19791314</id><snippet>import sys,os
import subprocess
import traceback
import re
import ast




try :
        cat = subprocess.Popen(["hadoop", "dfs", "-cat", "PATH TO FILE"], stdout=subprocess.PIPE)
        for data in cat.stdout:
                data = re.sub(' +',' ',data)
                try:
                    msg= ast.literal_eval(data)
                    if  msg['some_string'] == 'some_string' :
                        print msg['status']
                    else :
                        continue
                except SyntaxError:
                    continue #skip this line

except :
        print traceback.format_exc()
        pass
exit()
</snippet></ROW><ROW><id>19791492</id><snippet>def get_slice(my_list, start, stop):
        return my_list[start:stop][:]

def to_string(my_list):
        return 'List is: %s' % ''.join(my_list[:])

str_list = ['s', 'h', 'r', 'u', 'g', 'g', 'e', 'd']

print("\nget_slice Test")
my_slice = get_slice(str_list, 2, 100)
print(to_string(str_list))
print(to_string(my_slice))

my_slice = get_slice(str_list, 6, 1)
print(to_string(my_slice))

my_slice = get_slice(str_list, 2, 5)
print(to_string(str_list))
print(to_string(my_slice))
</snippet></ROW><ROW><id>19791553</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>19791553</id><snippet>/home/alfe/bin/factorial.py</snippet></ROW><ROW><id>19791553</id><snippet>/usr/python/lib/math.py</snippet></ROW><ROW><id>19791553</id><snippet>/usr/python/lib/math.pyc</snippet></ROW><ROW><id>19791553</id><snippet>/usr/python/lib/math.py</snippet></ROW><ROW><id>19791553</id><snippet>.pyc</snippet></ROW><ROW><id>19791556</id><snippet>lil</snippet></ROW><ROW><id>19791556</id><snippet>import scipy.sparse
import numpy
import time

def csr_row_set_nz_to_val(csr, row, value=0):
    """Set all nonzero elements (elements currently in the sparsity pattern)
    to the given value. Useful to set to 0 mostly.
    """
    if not isinstance(csr, scipy.sparse.csr_matrix):
        raise ValueError('Matrix given must be of CSR format.')
    csr.data[csr.indptr[row]:csr.indptr[row+1]] = value

def csr_rows_set_nz_to_val(csr, rows, value=0):
    for row in rows:
        csr_row_set_nz_to_val(csr, row)
    if value == 0:
        csr.eliminate_zeros()
</snippet></ROW><ROW><id>19791556</id><snippet>def evaluate(size):
    degs = [1]*size
    inVs = list(xrange(1, size, size/25))
    outVs = list(xrange(5, size, size/25))
    where = numpy.hstack((inVs, outVs)).astype(int)
    start_time = time.time()
    A = scipy.sparse.csc_matrix((size, size))
    M = scipy.sparse.diags([degs], [0]) - A
    csr_rows_set_nz_to_val(M, where)
    return time.time()-start_time
</snippet></ROW><ROW><id>19791556</id><snippet>&gt;&gt;&gt; print 'elapsed %.5f seconds' % evaluate(334863)
elapsed 0.53054 seconds
</snippet></ROW><ROW><id>19791590</id><snippet>list(some_array)</snippet></ROW><ROW><id>19791590</id><snippet>numpy.int64</snippet></ROW><ROW><id>19791590</id><snippet>tolist()</snippet></ROW><ROW><id>19791590</id><snippet>int</snippet></ROW><ROW><id>19791590</id><snippet>In [21]: import numpy as np

In [22]: ar = np.array([1,2,3])

In [23]: list(ar)
Out[23]: [1, 2, 3]

In [24]: type(list(ar)[0])
Out[24]: numpy.int64

In [25]: type(ar.tolist()[0])
Out[25]: builtins.int
</snippet></ROW><ROW><id>19791590</id><snippet>100 ** (size - 1)</snippet></ROW><ROW><id>19791590</id><snippet>In [26]: 100 ** (np.int64(50) - 1)
Out[26]: 0

In [27]: 100 ** (50 - 1)
Out[27]: 100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

In [28]: type(100 ** (np.int64(50) - 1))
Out[28]: numpy.int64
</snippet></ROW><ROW><id>19791590</id><snippet>int64</snippet></ROW><ROW><id>19791590</id><snippet>int</snippet></ROW><ROW><id>19791590</id><snippet>numpy</snippet></ROW><ROW><id>19791590</id><snippet>array.tolist()</snippet></ROW><ROW><id>19791590</id><snippet>numpy</snippet></ROW><ROW><id>19791590</id><snippet>numpy</snippet></ROW><ROW><id>19791590</id><snippet>numpy</snippet></ROW><ROW><id>19791714</id><snippet>with</snippet></ROW><ROW><id>19791714</id><snippet>myfile = open(file, "r")
try:
    data = myfile.read()
    p = re.compile(exp)
    matches = p.findall(data)
    for match in matches:
        print " ".join("{0:02x}".format(ord(c)) for c in match)
finally:
    myfile.close()
</snippet></ROW><ROW><id>19791714</id><snippet>file</snippet></ROW><ROW><id>19791830</id><snippet>In [1]: foo = DataFrame([[1,'a'],[2,'b'],[3,'c']],columns=['a','z'])

In [3]: foo
Out[3]: 
   a  z
0  1  a
1  2  b
2  3  c

In [4]: foo.dtypes
Out[4]: 
a     int64
z    object
dtype: object

In [5]: foo.ix[0,'a'] += 1

In [6]: foo
Out[6]: 
   a  z
0  2  a
1  2  b
2  3  c
</snippet></ROW><ROW><id>19791883</id><snippet>a, _ = f()</snippet></ROW><ROW><id>19791883</id><snippet>a, *_ = f()</snippet></ROW><ROW><id>19791883</id><snippet>a = f()[0]</snippet></ROW><ROW><id>19792424</id><snippet>\</snippet></ROW><ROW><id>19792424</id><snippet>r'raw string'</snippet></ROW><ROW><id>19792424</id><snippet>&gt;&gt;&gt; print re.sub(r"\\\[(.*?)\\\]", repl, "frfrfr\nfrrffr&lt;p&gt;\[something\]&lt;/p&gt;frff\nfrfrr", flags=re.S)
frfrfr
frrffr&lt;p&gt;&lt;img src='something'&gt;&lt;/p&gt;frff
frfrr

&gt;&gt;&gt; print re.sub("\\\\\\[(.*?)\\\\\\]", repl, "frfrfr\nfrrffr&lt;p&gt;\[something\]&lt;/p&gt;frff\nfrfrr", flags=re.S)
frfrfr
frrffr&lt;p&gt;&lt;img src='something'&gt;&lt;/p&gt;frff
frfrr
</snippet></ROW><ROW><id>19792424</id><snippet>re.sub</snippet></ROW><ROW><id>19792424</id><snippet>count</snippet></ROW><ROW><id>19792424</id><snippet>flags</snippet></ROW><ROW><id>19792424</id><snippet>re.S</snippet></ROW><ROW><id>19792424</id><snippet>count</snippet></ROW><ROW><id>19792424</id><snippet>&gt;&gt;&gt; print re.sub(r"\\\[(.*?)\\\]", repl, "frfrfr\nfrrffr&lt;p&gt;\[something\nblah\]&lt;/p&gt;frff\nfrfrr", re.S)
frfrfr
frrffr&lt;p&gt;\[something
blah\]&lt;/p&gt;frff
frfrr
&gt;&gt;&gt; print re.sub(r"\\\[(.*?)\\\]", repl, "frfrfr\nfrrffr&lt;p&gt;\[something\nblah\]&lt;/p&gt;frff\nfrfrr", flags=re.S)
frfrfr
frrffr&lt;p&gt;&lt;img src='something
blah'&gt;&lt;/p&gt;frff
frfrr
</snippet></ROW><ROW><id>19792549</id><snippet>Item(name=...)</snippet></ROW><ROW><id>19792549</id><snippet>name</snippet></ROW><ROW><id>19792549</id><snippet>name</snippet></ROW><ROW><id>19792728</id><snippet>&lt;script&gt; 
    $(document).ready(function() { 
        // bind 'myForm' and provide a simple callback function 
        $('#myForm').ajaxForm(function(response) { 
            var result = jQuery.parseJSON(response);
            $('#someDiv').innerHTML = result.res
        }); 
    }); 
&lt;/script&gt;
</snippet></ROW><ROW><id>19792839</id><snippet>pip</snippet></ROW><ROW><id>19792839</id><snippet>easy_install</snippet></ROW><ROW><id>19792839</id><snippet>pip</snippet></ROW><ROW><id>19792839</id><snippet>pip</snippet></ROW><ROW><id>19792839</id><snippet>pip install Scrapy
</snippet></ROW><ROW><id>19793010</id><snippet>axarr[0]</snippet></ROW><ROW><id>19793010</id><snippet>x tick labels</snippet></ROW><ROW><id>19793010</id><snippet>[1,2,3,4]</snippet></ROW><ROW><id>19793010</id><snippet>Axes</snippet></ROW><ROW><id>19793010</id><snippet>set_xticklabels</snippet></ROW><ROW><id>19793010</id><snippet>axarr[0].set_xticklabels(['a', 'b', 'c', 'd'])
</snippet></ROW><ROW><id>19793010</id><snippet>xticks</snippet></ROW><ROW><id>19793010</id><snippet>Axes</snippet></ROW><ROW><id>19793010</id><snippet>matplotlib.pyplot</snippet></ROW><ROW><id>19793010</id><snippet>set/get_xticks</snippet></ROW><ROW><id>19793010</id><snippet>set/get_xtickslabels</snippet></ROW><ROW><id>19793019</id><snippet>raw_input()</snippet></ROW><ROW><id>19793019</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>19793019</id><snippet>threading.Thread</snippet></ROW><ROW><id>19793186</id><snippet>xml.sax.ContentHandler.characters</snippet></ROW><ROW><id>19793186</id><snippet>.characters()</snippet></ROW><ROW><id>19793186</id><snippet>endElement</snippet></ROW><ROW><id>19793186</id><snippet>#! /usr/bin/python

import xml
import xml.sax
import StringIO

class NIHXMLparser:
  class XMLContentHandler(xml.sax.ContentHandler):
    def __init__(self):
        self.name = False
        self.content = ''
    def startElement(self, name, attrs):
        if name == 'name':
            self.name = True
    def characters(self,content):
        self.content += content
    def endElement(self,name):
        if self.name and name == 'name':
            self.name = False
            print self.content
            self.content = ''

xmlText = r'&lt;name&gt;D &amp; C YELLOW NO. 10&lt;/name&gt;'
xmlFile = StringIO.StringIO(xmlText)

XMLContentHandler=NIHXMLparser.XMLContentHandler()
xml.sax.parse(xmlFile,XMLContentHandler)
</snippet></ROW><ROW><id>19793276</id><snippet>input</snippet></ROW><ROW><id>19793276</id><snippet>&gt;&gt;&gt; input() + 1
3 # I entered that
4
</snippet></ROW><ROW><id>19793276</id><snippet>raw_input()</snippet></ROW><ROW><id>19793276</id><snippet>input</snippet></ROW><ROW><id>19793276</id><snippet>&gt;&gt;&gt; raw_input() + 1
3 # I entered that
Traceback (most recent call last):
   File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: cannot concatenate 'str' and 'int' objects
</snippet></ROW><ROW><id>19793276</id><snippet>&gt;&gt;&gt; x = raw_input()
3
&gt;&gt;&gt; type(x)
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>19793276</id><snippet>x</snippet></ROW><ROW><id>19793276</id><snippet>distinct(x+1)</snippet></ROW><ROW><id>19793276</id><snippet>&gt;&gt;&gt; x = int(input())
...
</snippet></ROW><ROW><id>19793325</id><snippet>&gt;&gt;&gt; sentence = 'A brown cat jumps over a person'
&gt;&gt;&gt; MyModel.objects.extra(where={"%s like CONCAT('%%', `name` ,'%%')"}, 
...                       params=[sentence]).values()
[{'id': 1L, 'name': u'brown cat'}, {'id': 3L, 'name': u'person'}]
</snippet></ROW><ROW><id>19793395</id><snippet>accept</snippet></ROW><ROW><id>19793395</id><snippet>Accept</snippet></ROW><ROW><id>19793395</id><snippet>Content-Type</snippet></ROW><ROW><id>19793395</id><snippet>class ContentTypePredicate(object):
    def __init__(self, val, config):
        self.val = val

    def text(self):
        return 'content type = %s' % self.val
    phash = text

    def __call__(self, context, request):
        return request.content_type == self.val

config.add_view_predicate('content_type', ContentTypePredicate)

@view_config(content_type='application/json')
# ...
</snippet></ROW><ROW><id>19793838</id><snippet>json.loads(tweet)</snippet></ROW><ROW><id>19793838</id><snippet>dictionary</snippet></ROW><ROW><id>19793838</id><snippet>tweet_obj = json.loads(tweet)
if not tweet_obj['in_reply_to_user_id']: # replies has `None` in this field
    pass                                 # add some processing here
</snippet></ROW><ROW><id>19794089</id><snippet>item = re.sub(r" \(\w+\)", "", item)
</snippet></ROW><ROW><id>19794089</id><snippet>&gt;&gt;&gt; items = ["x (LOC)", "ds ds (32C)", "d'ds ds (LeC)", "ds-d da(LOQ)", "12345 (deC)"]
&gt;&gt;&gt; for item in items:
...     print re.sub(r" \(\w+\)", "", item)
... 
x
ds ds
d'ds ds
ds-d da(LOQ)
12345
</snippet></ROW><ROW><id>19794089</id><snippet>(</snippet></ROW><ROW><id>19794089</id><snippet>item = re.sub(r" ?\(\w+\)", "", item)
</snippet></ROW><ROW><id>19794089</id><snippet>item = re.sub(r" ?\([^)]+\)", "", item)
</snippet></ROW><ROW><id>19794089</id><snippet>\w</snippet></ROW><ROW><id>19794089</id><snippet>[...]</snippet></ROW><ROW><id>19794089</id><snippet>[ \(w+\)]</snippet></ROW><ROW><id>19794089</id><snippet>\w</snippet></ROW><ROW><id>19794089</id><snippet>+</snippet></ROW><ROW><id>19794198</id><snippet> if form.data['first_name'] is None:
</snippet></ROW><ROW><id>19794198</id><snippet>if form.data['first_name]:
</snippet></ROW><ROW><id>19794198</id><snippet>None</snippet></ROW><ROW><id>19794198</id><snippet>''</snippet></ROW><ROW><id>19794198</id><snippet>False</snippet></ROW><ROW><id>19794198</id><snippet>return bool(form.data.get('first_name', False))
</snippet></ROW><ROW><id>19794198</id><snippet>form.data['first_name']</snippet></ROW><ROW><id>19794198</id><snippet>return False</snippet></ROW><ROW><id>19794198</id><snippet>None</snippet></ROW><ROW><id>19794198</id><snippet>''</snippet></ROW><ROW><id>19794198</id><snippet>return False</snippet></ROW><ROW><id>19794198</id><snippet>True</snippet></ROW><ROW><id>19794198</id><snippet>'a string'</snippet></ROW><ROW><id>19794198</id><snippet>return True</snippet></ROW><ROW><id>19794324</id><snippet>os.rename()</snippet></ROW><ROW><id>19794324</id><snippet>tkinter</snippet></ROW><ROW><id>19794324</id><snippet>newname = ("completed- "+ currentproject)
</snippet></ROW><ROW><id>19794324</id><snippet>currentproject</snippet></ROW><ROW><id>19794324</id><snippet>StringVar()</snippet></ROW><ROW><id>19794324</id><snippet>currentproject = StringVar()
</snippet></ROW><ROW><id>19794324</id><snippet>.get()</snippet></ROW><ROW><id>19794324</id><snippet>StringVar()</snippet></ROW><ROW><id>19794324</id><snippet>newname = "completed-" + currentproject.get()
</snippet></ROW><ROW><id>19794324</id><snippet>self_Browse()</snippet></ROW><ROW><id>19794324</id><snippet>def sel_Browse():
    fldr = filedialog.askdirectory()
    currentproject.set(fldr)
</snippet></ROW><ROW><id>19794599</id><snippet>**</snippet></ROW><ROW><id>19794599</id><snippet>^</snippet></ROW><ROW><id>19794656</id><snippet>digit_letter_letter_digit = r'\d\w\w\d'
</snippet></ROW><ROW><id>19794656</id><snippet>match("{0},{0}".format(digit_letter_letter_digit), inputtext)
</snippet></ROW><ROW><id>19794701</id><snippet>1-(2*variable_value)
</snippet></ROW><ROW><id>19794701</id><snippet>In [3]: %timeit x= 1 if not random.randint(0,1) else -1 #if statement
1000000 loops, best of 3: 1.31 us per loop

In [4]: %timeit x= 1-(2*random.randint(0,1)) #simple math
1000000 loops, best of 3: 1.32 us per loop

In [5]: %timeit x= [1,-1][random.randint(0,1)] #array lookup
1000000 loops, best of 3: 1.41 us per loop

In [7]: %timeit x= arr[random.randint(0,1)]
1000000 loops, best of 3: 1.31 us per loop
</snippet></ROW><ROW><id>19794878</id><snippet>&lt;input type="submit" name="submit" value="Do Something"&gt;
&lt;input type="submit" name="submit" value="Do Something Else"&gt;
</snippet></ROW><ROW><id>19794878</id><snippet>def contact():
    if request.method == 'POST':
        if request.form['submit'] == 'Do Something':
            pass # do something
        elif request.form['submit'] == 'Do Something Else':
            pass # do something else
        else:
            pass # unknown
    elif request.method == 'GET':
        return render_template('contact.html', form=form)
</snippet></ROW><ROW><id>19794948</id><snippet>.xticks()</snippet></ROW><ROW><id>19794948</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from time import mktime
from datetime import datetime

ticks = [ "2013-9-28 11:00:00.234", "2013-9-28 11:10:00.123", "2013-9-28 11:40:00.654", "2013-9-28 11:50:00.341", "2013-9-28 12:00:00.773"]
y = np.array([10, 12, 9, 15, 11])
x = [mktime(datetime.strptime(i, "%Y-%m-%d %H:%M:%S.%f").timetuple()) for i in ticks]

plt.stem(x,y)
plt.xticks(x, ticks)
plt.show()
</snippet></ROW><ROW><id>19795051</id><snippet>json</snippet></ROW><ROW><id>19795051</id><snippet>import json

with open(outputfilename, 'wb') as outfile:
    json.dump(row, outfile)
</snippet></ROW><ROW><id>19795051</id><snippet>json.dumps()</snippet></ROW><ROW><id>19795051</id><snippet>s</snippet></ROW><ROW><id>19795051</id><snippet>json_string = json.dumps(row)
</snippet></ROW><ROW><id>19795051</id><snippet>L</snippet></ROW><ROW><id>19795051</id><snippet>json</snippet></ROW><ROW><id>19795051</id><snippet>L</snippet></ROW><ROW><id>19795051</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; row = [1L,[0.1,0.2],[[1234L,1],[134L,2]]]
&gt;&gt;&gt; json.dumps(row)
'[1, [0.1, 0.2], [[1234, 1], [134, 2]]]'
</snippet></ROW><ROW><id>19795348</id><snippet>l3</snippet></ROW><ROW><id>19795348</id><snippet>&gt;&gt;&gt; l3 = dict( zip(l1.split(','), l2.split(',')) )
&gt;&gt;&gt; l3
{'brand': 'car', 'color': 'red', 'model': '2009', 'value': '100000'}
</snippet></ROW><ROW><id>19795348</id><snippet>join</snippet></ROW><ROW><id>19795348</id><snippet>&gt;&gt;&gt; l3 = ','.join([ '%s:%s' % (k, v) for k, v in zip(l1.split(','), l2.split(',')) ])
&gt;&gt;&gt; l3
'model:2009,color:red,brand:car,value:100000'
</snippet></ROW><ROW><id>19795348</id><snippet>l1</snippet></ROW><ROW><id>19795348</id><snippet>l2</snippet></ROW><ROW><id>19795348</id><snippet>list</snippet></ROW><ROW><id>19795348</id><snippet>l1.split(',')</snippet></ROW><ROW><id>19795720</id><snippet>In [28]: df
Out[28]: 
   category  val sensitivity_level
0         x   20                 A
1         x   31                 B
2         x   60                 C
3         x   20                 A
4         x   25                 B
5         x   60                 C
6         y   20                 A
7         y   40                 B
8         y   60                 C
9         y   20                 A
10        y   24                 B
11        y   30                 C

In [29]: 

In [29]: res = df.groupby(['category', 'sensitivity_level']).max()

In [30]: res
Out[30]: 
                            val
category sensitivity_level     
x        A                   20
         B                   31
         C                   60
y        A                   20
         B                   40
         C                   60

In [31]: res[res.val &lt;= 30]
Out[31]: 
                            val
category sensitivity_level     
x        A                   20
y        A                   20
</snippet></ROW><ROW><id>19795720</id><snippet>x=31</snippet></ROW><ROW><id>19795720</id><snippet>In [33]: df.val.iloc[1] = 20

In [34]: df
Out[34]: 
   category  val sensitivity_level
0         x   20                 A
1         x   20                 B
2         x   60                 C
3         x   20                 A
4         x   25                 B
5         x   60                 C
6         y   20                 A
7         y   40                 B
8         y   60                 C
9         y   20                 A
10        y   24                 B
11        y   30                 C
</snippet></ROW><ROW><id>19795720</id><snippet>In [51]: res = df.groupby(['category', 'sensitivity_level']).max()
In [48]: x = res[res.val &lt;= 30]

In [49]: 

In [49]: x
Out[49]: 
                            val
category sensitivity_level     
x        A                   20
         B                   25
y        A                   20

In [71]: x.reset_index('category').sort_index(ascending=False).groupby(level='sensitivity_level').first()
Out[71]: 
                  category  val
sensitivity_level              
A                        y   20
B                        x   25
</snippet></ROW><ROW><id>19795820</id><snippet>def postorder(tree):
    data = []

    def recurse(node)
        if not node:
            return
        recurse(node.left)
        recurse(node.right)
        data.append(node.data)

    recurse(tree)
    return data
</snippet></ROW><ROW><id>19795820</id><snippet>recurse</snippet></ROW><ROW><id>19795820</id><snippet>data</snippet></ROW><ROW><id>19795955</id><snippet>.*?</snippet></ROW><ROW><id>19795955</id><snippet>a</snippet></ROW><ROW><id>19795955</id><snippet>,</snippet></ROW><ROW><id>19795955</id><snippet>,</snippet></ROW><ROW><id>19795955</id><snippet>.*?</snippet></ROW><ROW><id>19795955</id><snippet>,</snippet></ROW><ROW><id>19795955</id><snippet>.*?</snippet></ROW><ROW><id>19795955</id><snippet>b</snippet></ROW><ROW><id>19795955</id><snippet>.*?</snippet></ROW><ROW><id>19795955</id><snippet>re.findall()</snippet></ROW><ROW><id>19795955</id><snippet>&gt;&gt;&gt; re.findall("(?:^|(?&lt;=,))[^,]*", "a,b,,c")
['a', 'b', '', 'c']
</snippet></ROW><ROW><id>19796041</id><snippet>ATN</snippet></ROW><ROW><id>19796041</id><snippet>np.arctan2</snippet></ROW><ROW><id>19796041</id><snippet>def ATN(y, x):
    atn = np.arctan2(y, x)
    atn[atn &lt; 0] += 2*np.pi
    return atn
</snippet></ROW><ROW><id>19796076</id><snippet>sniff</snippet></ROW><ROW><id>19796076</id><snippet>&gt;&gt;&gt; print sniff.__doc__
Sniff packets
sniff([count=0,] [prn=None,] [store=1,] [offline=None,] [lfilter=None,] + L2ListenSocket args) -&gt; list of packets

  count: number of packets to capture. 0 means infinity
  store: wether to store sniffed packets or discard them
    prn: function to apply to each packet. If something is returned,
         it is displayed. Ex:
         ex: prn = lambda x: x.summary()
lfilter: python function applied to each packet to determine
         if further action may be done
         ex: lfilter = lambda x: x.haslayer(Padding)
offline: pcap file to read packets from, instead of sniffing them
timeout: stop sniffing after a given time (default: None)
L2socket: use the provided L2socket
opened_socket: provide an object ready to use .recv() on
stop_filter: python function applied to each packet to determine
             if we have to stop the capture after this packet
             ex: stop_filter = lambda x: x.haslayer(TCP)
</snippet></ROW><ROW><id>19796076</id><snippet>timeout</snippet></ROW><ROW><id>19796076</id><snippet>count</snippet></ROW><ROW><id>19796076</id><snippet>len()</snippet></ROW><ROW><id>19796076</id><snippet>len(packets)

for i in range(len(packets)):
    print packets[i].summary()

# or better:
for i in packets:
    print i.summary()
</snippet></ROW><ROW><id>19796113</id><snippet>deepcopy()</snippet></ROW><ROW><id>19796113</id><snippet>exec()</snippet></ROW><ROW><id>19796113</id><snippet> for field in photo._meta.get_all_field_names:
        setattr(self, field, getattr(photo, field))
</snippet></ROW><ROW><id>19796167</id><snippet>mypoly</snippet></ROW><ROW><id>19796167</id><snippet>is_empty</snippet></ROW><ROW><id>19796167</id><snippet>from shapely.geometry import Point

if mypoly.is_empty:
    mypoly = Point(0, 0)
</snippet></ROW><ROW><id>19796208</id><snippet>"my request url was {0}".format(request.get_full_path())
</snippet></ROW><ROW><id>19796338</id><snippet>total = 0
for num in values:
    total = total + num
</snippet></ROW><ROW><id>19796338</id><snippet>def list_stats(values, num_int, low_range, high_range):
    values = generate_integer_list(num_int, low_range, high_range)
    total = 0
    low_val = high_val = values[0]  # something to start with
    for num in values:
        total += num
        if num &lt; low_val:
            low_val = num
        if num &gt; high_val:
            high_val = num
    avg = total / num_int
    return total, low_val, high_val, avg
</snippet></ROW><ROW><id>19796338</id><snippet>total = total + num</snippet></ROW><ROW><id>19796338</id><snippet>total += num</snippet></ROW><ROW><id>19796338</id><snippet>low_val</snippet></ROW><ROW><id>19796338</id><snippet>high_val</snippet></ROW><ROW><id>19796389</id><snippet>format</snippet></ROW><ROW><id>19796389</id><snippet>%</snippet></ROW><ROW><id>19796389</id><snippet>print " ".join('%02x' % ord(c) for c in match)
</snippet></ROW><ROW><id>19796411</id><snippet>user_typed = raw_input()
try:
    user_number = float(user_typed)
except ValueError:
    print "Couldn't convert this to a number, please try again: %r" % user_typed
</snippet></ROW><ROW><id>19796645</id><snippet>q</snippet></ROW><ROW><id>19796645</id><snippet>fetch</snippet></ROW><ROW><id>19796645</id><snippet>companies</snippet></ROW><ROW><id>19796846</id><snippet>n = ["1ab", "2an", "3bca", "4adc"]
l = ["1", "2", "3"]
for m in n:
    if "a" in m:
        if not any([k in m for k in l]):
            print m

4adc
</snippet></ROW><ROW><id>19796867</id><snippet>&amp;</snippet></ROW><ROW><id>19796867</id><snippet>&amp;</snippet></ROW><ROW><id>19796906</id><snippet>for file in os.listdir('path/to/parent'):
    move('path/to/parent'+os.path.sep+file, '/path/to/new_parent')
</snippet></ROW><ROW><id>19796909</id><snippet>response = requests.get(...)
json_str = response.content
json_str = json_str.replace('},', '},\n')
with open('fb_remodel.txt', 'w') as json_file:
    json.file.write(json_str)
</snippet></ROW><ROW><id>19796909</id><snippet>with</snippet></ROW><ROW><id>19796909</id><snippet>},</snippet></ROW><ROW><id>19796909</id><snippet>},\n</snippet></ROW><ROW><id>19796987</id><snippet>s = 'Hello World'
rev = []
for i in s.split(' '):
    rev.append(i[::-1])

print ' '.join(rev)
</snippet></ROW><ROW><id>19797268</id><snippet>return</snippet></ROW><ROW><id>19797268</id><snippet>def findNextZero(x, y, board):
    if board[x][y] == 0:
        return (x, y)
    else:
        if y == (SIZE-1):
            # if its at the edge of the "board", the 2d matrix
            return findNextZero(x+1, 0, board)
        else:
            return findNextZero(x, y+1, board)
</snippet></ROW><ROW><id>19797268</id><snippet>return</snippet></ROW><ROW><id>19797268</id><snippet>findNextZero()</snippet></ROW><ROW><id>19797343</id><snippet>==</snippet></ROW><ROW><id>19797343</id><snippet>&gt;&gt;&gt; a.value[a['words'].isin(b)] = 0
&gt;&gt;&gt; a
      value words
0  0.340138    w1
1  0.533770    w2
2  0.000000    w3
3  0.000000    w4
4  0.002314    w5
</snippet></ROW><ROW><id>19797343</id><snippet>ix</snippet></ROW><ROW><id>19797343</id><snippet>&gt;&gt;&gt; a.ix[a['words'].isin(b), 'value'] = 0
&gt;&gt;&gt; a
      value words
0  0.340138    w1
1  0.533770    w2
2  0.000000    w3
3  0.000000    w4
4  0.002314    w5
</snippet></ROW><ROW><id>19797343</id><snippet>.ix</snippet></ROW><ROW><id>19797343</id><snippet>.loc</snippet></ROW><ROW><id>19797428</id><snippet>from sqlalchemy import select, func

col = getattr(obj_table.c, attr_name)
q = select([func.max(col)], obj_table)
with self._engine.connect() as conn:
    res = conn.execute(q)
    max_value = res.fetchone()[0]
</snippet></ROW><ROW><id>19797428</id><snippet>obj_table.c</snippet></ROW><ROW><id>19797428</id><snippet>obj_table.columns</snippet></ROW><ROW><id>19797598</id><snippet>encoding</snippet></ROW><ROW><id>19797598</id><snippet>encoding</snippet></ROW><ROW><id>19797598</id><snippet>help</snippet></ROW><ROW><id>19797598</id><snippet>i</snippet></ROW><ROW><id>19797598</id><snippet>for</snippet></ROW><ROW><id>19797598</id><snippet>+2</snippet></ROW><ROW><id>19797598</id><snippet>ilen</snippet></ROW><ROW><id>19797598</id><snippet>sum(1 for _ in iterable)</snippet></ROW><ROW><id>19797598</id><snippet>lien</snippet></ROW><ROW><id>19797598</id><snippet>pip install more-itertools</snippet></ROW><ROW><id>19797598</id><snippet>more_itertools.ilen(f)</snippet></ROW><ROW><id>19797598</id><snippet>def len(fname):
    for encoding in 'mbcs', 'utf8', None:
        try:
            with open(fname, encoding=encoding) as f:
                return sum(1 for line in f)
        except UnicodeDecodeError as e:
            pass
    raise e
</snippet></ROW><ROW><id>19797894</id><snippet>int x[] = {1, 2, 3};
int &amp;y = x[0];
</snippet></ROW><ROW><id>19797894</id><snippet>x</snippet></ROW><ROW><id>19797894</id><snippet>int</snippet></ROW><ROW><id>19797894</id><snippet>y</snippet></ROW><ROW><id>19797894</id><snippet>x</snippet></ROW><ROW><id>19797894</id><snippet>y</snippet></ROW><ROW><id>19797894</id><snippet>x = [1, 2, 3]
y = x[0]
</snippet></ROW><ROW><id>19797894</id><snippet>x</snippet></ROW><ROW><id>19797894</id><snippet>list</snippet></ROW><ROW><id>19797894</id><snippet>int</snippet></ROW><ROW><id>19797894</id><snippet>y</snippet></ROW><ROW><id>19797894</id><snippet>int</snippet></ROW><ROW><id>19797894</id><snippet>x</snippet></ROW><ROW><id>19797894</id><snippet>list</snippet></ROW><ROW><id>19797894</id><snippet>2</snippet></ROW><ROW><id>19797894</id><snippet>3</snippet></ROW><ROW><id>19797894</id><snippet>1</snippet></ROW><ROW><id>19797894</id><snippet>int z = x[0]</snippet></ROW><ROW><id>19797894</id><snippet>int</snippet></ROW><ROW><id>19797894</id><snippet>x[0]</snippet></ROW><ROW><id>19797894</id><snippet>z = copy.copy(x[0])</snippet></ROW><ROW><id>19797949</id><snippet>text size = 64512
</snippet></ROW><ROW><id>19798016</id><snippet>f.close()</snippet></ROW><ROW><id>19798016</id><snippet>f = open('test124.txt', 'a') # use the append flag so that it creates the file. 
f.write('testing')
f.close()
</snippet></ROW><ROW><id>19798243</id><snippet>div</snippet></ROW><ROW><id>19798243</id><snippet>div</snippet></ROW><ROW><id>19798243</id><snippet>contents[3]</snippet></ROW><ROW><id>19798243</id><snippet>if len(cells) &gt; 1:
    a = cells[1].find('a')
    href = a['href']
</snippet></ROW><ROW><id>19798329</id><snippet>url(r'^en/accounts/change_profile/', 'app.views.change_profile', name='change_profile'),
</snippet></ROW><ROW><id>19798329</id><snippet>{% url change_profile %}
</snippet></ROW><ROW><id>19798349</id><snippet>import pandas
df = pandas.DataFrame.from_dict(
    {
     'category': {0: 'Love', 1: 'Love', 2: 'Fashion', 3: 'Fashion', 4: 'Hair', 5: 'Movies', 6: 'Movies', 7: 'Health', 8: 'Health', 9: 'Celebs', 10: 'Celebs', 11: 'Travel', 12: 'Weightloss', 13: 'Diet', 14: 'Bags'}, 
     'impressions': {0: 380, 1: 374242, 2: 197, 3: 13363, 4: 4, 5: 189, 6: 60632, 7: 269, 8: 40189, 9: 138, 10: 66590, 11: 2227, 12: 22668, 13: 21707, 14: 229}, 
     'date': {0: '2013-11-04', 1: '2013-11-04', 2: '2013-11-04', 3: '2013-11-04', 4: '2013-11-04', 5: '2013-11-04', 6: '2013-11-04', 7: '2013-11-04', 8: '2013-11-04', 9: '2013-11-04', 10: '2013-11-04', 11: '2013-11-04', 12: '2013-11-04', 13: '2013-11-04', 14: '2013-11-04'}, 'cpc_cpm_revenue': {0: 0.36823, 1: 474.81522000000001, 2: 0.19434000000000001, 3: 18.264220000000002, 4: 0.00080000000000000004, 5: 0.23613000000000001, 6: 81.391139999999993, 7: 0.27171000000000001, 8: 51.258200000000002, 9: 0.11536, 10: 83.966859999999997, 11: 3.43248, 12: 31.695889999999999, 13: 28.459320000000002, 14: 0.43524000000000002}, 'clicks': {0: 0, 1: 183, 2: 0, 3: 9, 4: 0, 5: 1, 6: 20, 7: 0, 8: 21, 9: 0, 10: 32, 11: 1, 12: 12, 13: 9, 14: 2}, 'size': {0: '300x250', 1: '300x250', 2: '300x250', 3: '300x250', 4: '300x250', 5: '300x250', 6: '300x250', 7: '300x250', 8: '300x250', 9: '300x250', 10: '300x250', 11: '300x250', 12: '300x250', 13: '300x250', 14: '300x250'}
    }
)
df.set_index(['date', 'category'], inplace=True)
df.groupby(level=[0,1]).sum()
</snippet></ROW><ROW><id>19798349</id><snippet>N</snippet></ROW><ROW><id>19798349</id><snippet>N</snippet></ROW><ROW><id>19798349</id><snippet>groupby</snippet></ROW><ROW><id>19798349</id><snippet>df.groupby(by=['date', category']).sum()</snippet></ROW><ROW><id>19798438</id><snippet>INADDR_ANY</snippet></ROW><ROW><id>19798438</id><snippet>INADDR_LOOPBACK</snippet></ROW><ROW><id>19798438</id><snippet>ENETUNREACH</snippet></ROW><ROW><id>19798438</id><snippet>ENETDOWN</snippet></ROW><ROW><id>19798438</id><snippet>EADDRNOTAVAIL</snippet></ROW><ROW><id>19798528</id><snippet>In [116]: frame = DataFrame(np.random.randn(4, 3), columns=list('bde'), index=['Utah', 'Ohio', 'Texas', 'Oregon'])

In [117]: frame
Out[117]: 
               b         d         e
Utah   -0.029638  1.081563  1.280300
Ohio    0.647747  0.831136 -1.549481
Texas   0.513416 -0.884417  0.195343
Oregon -0.485454 -0.477388 -0.309548

In [118]: f = lambda x: x.max() - x.min()

In [119]: frame.apply(f)
Out[119]: 
b    1.133201
d    1.965980
e    2.829781
dtype: float64
</snippet></ROW><ROW><id>19798528</id><snippet>In [120]: format = lambda x: '%.2f' % x

In [121]: frame.applymap(format)
Out[121]: 
            b      d      e
Utah    -0.03   1.08   1.28
Ohio     0.65   0.83  -1.55
Texas    0.51  -0.88   0.20
Oregon  -0.49  -0.48  -0.31
</snippet></ROW><ROW><id>19798528</id><snippet>In [122]: frame['e'].map(format)
Out[122]: 
Utah       1.28
Ohio      -1.55
Texas      0.20
Oregon    -0.31
Name: e, dtype: object
</snippet></ROW><ROW><id>19798528</id><snippet>apply</snippet></ROW><ROW><id>19798528</id><snippet>applymap</snippet></ROW><ROW><id>19798528</id><snippet>map</snippet></ROW><ROW><id>19798689</id><snippet>import numpy as np
out_dict[filename]=np.array(arr, dtype=np.float64)
</snippet></ROW><ROW><id>19799062</id><snippet>a = np.array([[np.array([[2, 2]]), np.array([[3, 3]])]])
</snippet></ROW><ROW><id>19799062</id><snippet>np.array</snippet></ROW><ROW><id>19799062</id><snippet>&gt;&gt;&gt; a
array([[[[2, 2]],

        [[3, 3]]]])

&gt;&gt;&gt; a.shape
(1, 2, 1, 2)
</snippet></ROW><ROW><id>19799062</id><snippet>dtype=object</snippet></ROW><ROW><id>19799062</id><snippet>three = array([[array([[2, 2, 2]]), array([[3, 3]])]])
two = np.empty(three.shape, dtype=object)
two[0,0,0] = np.array([[2,2]])
two[0,1,0] = np.array([[3,3]])
</snippet></ROW><ROW><id>19799062</id><snippet>sio.savemat('two.mat', {'two': two})
</snippet></ROW><ROW><id>19799062</id><snippet>&gt;&gt;&gt; two
array([[[array([[2, 2]])],
        [array([[3, 3]])]]], dtype=object)

&gt;&gt;&gt; two.shape
(1, 2, 1)
</snippet></ROW><ROW><id>19799113</id><snippet>import re

polygons = []

with open('inputfilename') as datafile:
    for line in datafile:

        if 'psxy' in line:
#This is the beginning of a new polygon. Start with an empty set of points
#and parse out the color, and store it in a tuple
            points = []
            m = re.search('-G([\d\.]+)/([\d\.]+)/([\d\.]+) ', line)
            r,g,b = m.group(1,2,3)
            r = int(r)
            g = int(g)
            b = int(b)
            color = (r,g,b)

        elif 'eof' in line:
#This is the end of a polygon. Take the list of points, and the last color
#put them in a tuple and append that to the list of polygons
            polygons.append((points, color))

        elif '#' in line:
#do nothing with this line
            pass

        else:
#This is a pair of x,y coordinates. Turn them into floats, put them in a tuple
#and append the tuple to the list of points for this polygon.
            x,y = line.split()
            x = float(x)
            y = float(y)
            points.append((x,y))


#Now to plot the polygons
for poly in polygons:
    drawPolygon(poly[0], poly[1])
</snippet></ROW><ROW><id>19799253</id><snippet>__cmp__</snippet></ROW><ROW><id>19799253</id><snippet>class Report(object):
    """
    Contains all information contained in a report
    """
    def __init__(self, periodStart, periodEnd, sendTime):
        self.period_start = periodStart
        self.period_end = periodEnd
        self.send_time = sendTime
        self.send_timestamp = (sendTime - datetime(1970, 1, 1)).total_seconds()
        self.period_length = (periodEnd - periodStart).total_seconds()

    def __cmp__(self, other):
        return cmp(self.send_time, other.send_time)
</snippet></ROW><ROW><id>19799253</id><snippet>list.sort()</snippet></ROW><ROW><id>19799253</id><snippet>sorted(list)</snippet></ROW><ROW><id>19799253</id><snippet>sorted(deque)</snippet></ROW><ROW><id>19799253</id><snippet>__getitem__</snippet></ROW><ROW><id>19799253</id><snippet>sorted()</snippet></ROW><ROW><id>19799253</id><snippet>sorted(iterable)</snippet></ROW><ROW><id>19799253</id><snippet>deque.sort()</snippet></ROW><ROW><id>19799253</id><snippet>class ReportDeque(deque):
    """
    Container for processing, sorting Report objects
    """

    def sort(self, *args, **kwargs):        
        items = [self.pop() for x in xrange(len(self))]
        items.sort(*args, **kwargs)
        self.extend(items)
</snippet></ROW><ROW><id>19799253</id><snippet>period_length</snippet></ROW><ROW><id>19799253</id><snippet>__cmp__</snippet></ROW><ROW><id>19799253</id><snippet>    def __cmp__(self, other):
         cmp((self.send_time, self.period_length), 
             (other.send_time, other.period_length))
</snippet></ROW><ROW><id>19799355</id><snippet>\t</snippet></ROW><ROW><id>19799355</id><snippet>{"My_string": "Foo bar.\t Bar foo."}
</snippet></ROW><ROW><id>19799355</id><snippet>foo = '{"My_string": "Foo bar.\\t Bar foo."}' # in a Python source
</snippet></ROW><ROW><id>19799355</id><snippet>foo = r'{"My_string": "Foo bar.\t Bar foo."}' # in a Python source
</snippet></ROW><ROW><id>19799468</id><snippet>nonlocal</snippet></ROW><ROW><id>19799468</id><snippet>&gt;&gt;&gt; def uniqueId ():
        x = -1
        def inner ():
            nonlocal x
            x += 1
            return x
        return inner

&gt;&gt;&gt; f = uniqueId()
&gt;&gt;&gt; f()
0
&gt;&gt;&gt; f()
1
&gt;&gt;&gt; f()
2
</snippet></ROW><ROW><id>19799468</id><snippet>x</snippet></ROW><ROW><id>19799468</id><snippet>&gt;&gt;&gt; def uniqueId ():
        x = [-1]
        def inner ():
            x[0] += 1
            return x[0]
        return inner

&gt;&gt;&gt; f = uniqueId()
&gt;&gt;&gt; f()
0
&gt;&gt;&gt; f()
1
</snippet></ROW><ROW><id>19799468</id><snippet>__call__</snippet></ROW><ROW><id>19799468</id><snippet>&gt;&gt;&gt; class UniqueId:
        def __init__ (self):
            self.x = -1
        def __call__ (self):
            self.x += 1
            return self.x

&gt;&gt;&gt; f = UniqueId()
&gt;&gt;&gt; f()
0
&gt;&gt;&gt; f()
1
</snippet></ROW><ROW><id>19799538</id><snippet># Decorator Function
def login_required(something):
    @wraps(something)
    def wrap(*args, **kwargs):
        if "some_admin_name" in session:
            return something(*args, **kwargs)
        else:
            flash("\"You shall not pass!\" - Gandalf")
            return redirect(url_for("login"))
    return wrap

# Function Being Decorated
@app.route("/some/restricted/stuff")
@login_required
def main():
    return render_template("overview.html",
                       stuff = getstuff() )
</snippet></ROW><ROW><id>19799538</id><snippet>def login_required(function_to_wrap):
    @wraps(function_to_wrap)
    def wrap(*args, **kwargs):
        if "some_admin_name" in session:
            return function_to_wrap(*args, **kwargs)
        else:
            flash("\"You shall not pass!\" - Gandalf")
            return redirect(url_for("login"))
    return wrap
</snippet></ROW><ROW><id>19799538</id><snippet>def add_these_numbers(number_1, number_2):
    return number_1 + number_2
</snippet></ROW><ROW><id>19799538</id><snippet>def add_these_numbers(*args):
    return args[0] + args[1]

def add_these_numbers_too(**kwargs):
    return kwargs['first_number'] + kwargs['second_number']
</snippet></ROW><ROW><id>19799538</id><snippet>*args/**kwargs</snippet></ROW><ROW><id>19799538</id><snippet>args/**kwargs</snippet></ROW><ROW><id>19799538</id><snippet># Function Being Decorated
@app.route("/some/restricted/stuff")
@login_required
def main(html_template):
    return render_template(html_template, stuff = getstuff())
</snippet></ROW><ROW><id>19799538</id><snippet>@login_required
def main():
    ....

main = login_required(main)
</snippet></ROW><ROW><id>19799538</id><snippet>def main(*args, **kwargs):
    if "some_admin_name" in session:
        return predecorator_main_function(*args, **kwargs)
    else:
        flash("\"You shall not pass!\" - Gandalf")
        return redirect(url_for("login"))
</snippet></ROW><ROW><id>19799826</id><snippet>return super(MessageResource, self).get_object_list(request).filter(Q(sender__user = request.user) | Q(recipient__user = request.user)).distinct('conversation_id').annotate(last_created=MAX(created)).order_by('-last_created')
</snippet></ROW><ROW><id>19799826</id><snippet>from django.db.models import MAX
</snippet></ROW><ROW><id>19799826</id><snippet>return super(MessageResource, self).get_object_list(request).filter(Q(sender__user = request.user) | Q(recipient__user = request.user)).values('conversation_id').annotate(last_created=MAX(created), distinct=True).order_by('-last_created')
</snippet></ROW><ROW><id>19799842</id><snippet>file.seek(0)</snippet></ROW><ROW><id>19799842</id><snippet>totaltake()</snippet></ROW><ROW><id>19799842</id><snippet>infilehandle</snippet></ROW><ROW><id>19799842</id><snippet>infilehandle</snippet></ROW><ROW><id>19799842</id><snippet>computetax()</snippet></ROW><ROW><id>19799842</id><snippet>totaltake()</snippet></ROW><ROW><id>19799842</id><snippet>totaltake()</snippet></ROW><ROW><id>19799842</id><snippet>computetax()</snippet></ROW><ROW><id>19799842</id><snippet>infilehandle</snippet></ROW><ROW><id>19799842</id><snippet>totaltake()</snippet></ROW><ROW><id>19799842</id><snippet>total</snippet></ROW><ROW><id>19799842</id><snippet>0</snippet></ROW><ROW><id>19799842</id><snippet>totaltake()</snippet></ROW><ROW><id>19799842</id><snippet>computetax()</snippet></ROW><ROW><id>19799842</id><snippet>total</snippet></ROW><ROW><id>19799842</id><snippet>totaltake()</snippet></ROW><ROW><id>19799842</id><snippet>tips</snippet></ROW><ROW><id>19799842</id><snippet>computetake()</snippet></ROW><ROW><id>19799842</id><snippet>infilehandle</snippet></ROW><ROW><id>19799842</id><snippet>infilehandle.seek(0)</snippet></ROW><ROW><id>19799842</id><snippet>totaltake()</snippet></ROW><ROW><id>19800153</id><snippet>username</snippet></ROW><ROW><id>19800153</id><snippet>blank=True</snippet></ROW><ROW><id>19800153</id><snippet>Meta</snippet></ROW><ROW><id>19800153</id><snippet>class UploadedTextFileForm(ModelForm):                
    class Meta:                                       
        model = UploadedTextFile
        fields = ['file', 'filename']
</snippet></ROW><ROW><id>19800153</id><snippet>username</snippet></ROW><ROW><id>19800160</id><snippet>http://storage.googleapis.com/&lt;bucket-name&gt;/&lt;object-path&gt;</snippet></ROW><ROW><id>19800160</id><snippet>open()</snippet></ROW><ROW><id>19800481</id><snippet>cose</snippet></ROW><ROW><id>19800481</id><snippet>cose = math.cos(rad)
</snippet></ROW><ROW><id>19800481</id><snippet>cose(angle)</snippet></ROW><ROW><id>19800481</id><snippet>y_rot == Ys*cose(angle)-Zs*(angle)
</snippet></ROW><ROW><id>19800481</id><snippet>cose(angle)</snippet></ROW><ROW><id>19800481</id><snippet>Ys * cose * angle - Zs * angle
</snippet></ROW><ROW><id>19800481</id><snippet>==</snippet></ROW><ROW><id>19800481</id><snippet>=</snippet></ROW><ROW><id>19800481</id><snippet>y_rot = Ys * cose * angle - Zs * angle
z_rot = Ys * sine * angle - Zs * cose * angle
x_rot = Xs
</snippet></ROW><ROW><id>19800481</id><snippet>Ys</snippet></ROW><ROW><id>19800481</id><snippet>Zs</snippet></ROW><ROW><id>19800481</id><snippet>y_rot = tuple(y * cose * angle - z * angle for y, z in zip(Ys, Zs))
z_rot = tuple(y * sine * angle - z * cose * angle for y, z in zip(Ys, Zs))
x_rot = Xs
</snippet></ROW><ROW><id>19800481</id><snippet>Ys</snippet></ROW><ROW><id>19800481</id><snippet>Zs</snippet></ROW><ROW><id>19800481</id><snippet>&gt;&gt;&gt; tuple(y * cose * angle - z * angle for y, z in zip(Ys, Zs))
(-19.000304609687216, -8.002284572654132, 10.998172341876696, 14.995887769222563)
&gt;&gt;&gt; tuple(y * sine * angle - z * cose * angle for y, z in zip(Ys, Zs))
(-20.96189678540965, -22.734710892037747, -0.7904188179089892, -11.526957368070041)
</snippet></ROW><ROW><id>19800481</id><snippet>Ys</snippet></ROW><ROW><id>19800481</id><snippet>Zs</snippet></ROW><ROW><id>19800594</id><snippet>itertools.groupby</snippet></ROW><ROW><id>19800594</id><snippet>from itertools import groupby

data = {
    ('9', '0000022', 'LRA'),
    ('45', '0000016', 'PBM'),
    ('16', '0000048', 'PBL'),
    ...
}

def group_by_name_and_id(s):
    grouped = groupby(sorted(s), key=lambda (name, id_, type_): (name_, id))
    for (name, id_), items in grouped:
        types = tuple(type_ for _, _, type_ in items)
        if len(types) &gt; 1:
            yield (name, id_) + types

print '\n'.join(str(x) for x in group_by_name_and_id(data))
</snippet></ROW><ROW><id>19800594</id><snippet>('10', '0000007', 'PBM', 'IBL')
('12', '0000051', 'LRA', 'PBL')
('7', '0000014', 'LRA', 'PBL', 'IBL')
('9', '0000022', 'LRA', 'PBL', 'IBL')
</snippet></ROW><ROW><id>19800594</id><snippet>        types = tuple(type_ for _, _, type_ in items)
        yield (name, id_) + types
</snippet></ROW><ROW><id>19800594</id><snippet>        types = [type_ for _, _, type_ in items]
        yield (name, id_, types)
</snippet></ROW><ROW><id>19800594</id><snippet>('10', '0000007', ['IBL', 'PBM'])
('12', '0000051', ['LRA', 'PBL'])
('7', '0000014', ['IBL', 'LRA', 'PBL'])
('9', '0000022', ['IBL', 'LRA', 'PBL'])
</snippet></ROW><ROW><id>19800594</id><snippet>for name, id, types in transformed_data:</snippet></ROW><ROW><id>19800610</id><snippet>import string

class BlankFormatter(string.Formatter):
    def __init__(self, default=''):
        self.default=default

    def get_value(self, key, args, kwds):
        if isinstance(key, str):
            return kwds.get(key, self.default)
        else:
            Formatter.get_value(key, args, kwds)

kwargs = {"name": "mark", "adj": "mad"}     
fmt=BlankFormatter()
print fmt.format("My name is {name} and I'm really {adj}.", **kwargs)
# My name is mark and I'm really mad.
print fmt.format("My name is {name} and I'm really {adjective}.", **kwargs)
# My name is mark and I'm really .  
</snippet></ROW><ROW><id>19800737</id><snippet>pywin32</snippet></ROW><ROW><id>19800737</id><snippet>c:\Python33\Lib\site-packages\win32\</snippet></ROW><ROW><id>19800737</id><snippet>Packages/MyPlugin</snippet></ROW><ROW><id>19800737</id><snippet>site-packages</snippet></ROW><ROW><id>19800737</id><snippet>win32com</snippet></ROW><ROW><id>19800737</id><snippet>win32comext</snippet></ROW><ROW><id>19800737</id><snippet>pywin32_system32</snippet></ROW><ROW><id>19800737</id><snippet>pythonwin</snippet></ROW><ROW><id>19800737</id><snippet>import win32</snippet></ROW><ROW><id>19800737</id><snippet>import .win32</snippet></ROW><ROW><id>19800787</id><snippet>from netCDF4 import Dataset

# a dictionary of lists that hold all the datasets from a given day
grouped_datasets = {}

for f in listdir(path):
    if isfile(join(path,f)):
        full_path = join(path,f)
        f = Dataset(full_path, 'r')
        basetime = f.variables['base_time'][:]
        altitude = f.variables['alt'][:]
        temp = f.variables['tdry'][:]
        actual_date =  strftime("%Y-%m-%d %H:%M:%S", gmtime(basetime))
        measurement_day =  strftime("%Y-%m-%d", gmtime(basetime))

        # if we haven't encountered any datasets from this day yet...
        if measurement_day not in grouped_datasets:
            # add that day to our dict
            grouped_datasets[measurement_day] = []

        # now append our dataset to the correct day (list)
        grouped_datasets[measurement_day].append(f)
</snippet></ROW><ROW><id>19800797</id><snippet>foo_default</snippet></ROW><ROW><id>19800797</id><snippet>MyClass</snippet></ROW><ROW><id>19800797</id><snippet>self.foo = kwargs.get('foo', self.foo_default) or self.foo_default
</snippet></ROW><ROW><id>19800912</id><snippet>myprops = {}
with open('filename.properties', 'r') as f:
    for line in f:
        line = line.rstrip() #removes trailing whitespace and '\n' chars

        if "=" not in line: continue #skips blanks and comments w/o =
        if line.startswith("#"): continue #skips comments which contain =

        k, v = line.split("=", 1)
        myprops[k] = v
</snippet></ROW><ROW><id>19800912</id><snippet>myprops = dict(line.strip().split('=') 
               for line in open('/Path/filename.properties'))
               if ("=" in line and 
                   not line.startswith("#") and
                   &lt;extra constraint&gt; and
                   &lt;another extra constraint&gt;))
</snippet></ROW><ROW><id>19800952</id><snippet>stDigs[len(stDigs)]</snippet></ROW><ROW><id>19800952</id><snippet>num &lt; len(stDigs)</snippet></ROW><ROW><id>19800952</id><snippet>sum(digits)</snippet></ROW><ROW><id>19800952</id><snippet>digits</snippet></ROW><ROW><id>19800952</id><snippet>while</snippet></ROW><ROW><id>19800952</id><snippet>def avgUntilLetter(stDigs):
    total = i = 0
    for i, each_char in enumerate(stDigs):
        if not each_char.isdigit():
            break
        total += float(each_char)
    if i:
        return total / i
    return 0.0
</snippet></ROW><ROW><id>19800952</id><snippet>&gt;&gt;&gt; avgUntilLetter('0123a456')
1.5
&gt;&gt;&gt; avgUntilLetter('')
0.0
&gt;&gt;&gt; avgUntilLetter('abc')
0.0
</snippet></ROW><ROW><id>19801201</id><snippet>shutil.rmtree(eg.globals.tvzip)
shutil.rmtree(eg.globals.tvproc)
</snippet></ROW><ROW><id>19801201</id><snippet>os.walk</snippet></ROW><ROW><id>19801201</id><snippet>os.listdir</snippet></ROW><ROW><id>19801201</id><snippet>for p in os.listdir(eg.globals.tvzip):
    shutil.rmtree(os.path.join(eg.globals.tvzip, p)
for p in os.listdir(eg.globals.tvproc):
    shutil.rmtree(os.path.join(eg.globals.tvproc, p)
</snippet></ROW><ROW><id>19801201</id><snippet>WindowsError: [Error 5] Access is denied: 'C:\\zDump\\TVzip\\Elem.avi'
</snippet></ROW><ROW><id>19801201</id><snippet>C:\zDump\TVzip</snippet></ROW><ROW><id>19801224</id><snippet>def auth_header(creds, http_session):
    auth = 'OAuth ' + 'oauth_consumer_key=\"' + creds['oauth_consumer_key']
    auth = auth + '\",oauth_nonce=\"' + creds['oauth_nonce']
    auth = auth + '\",oauth_signature=\"' + creds['oauth_signature']
    auth = auth + '\",oauth_signature_method=\"' + creds['oauth_signature_method']
    auth = auth + '\",oauth_timestamp=\"' + creds['oauth_timestamp']
    auth = auth + '\",oauth_version=\"' + creds['oauth_version'] + '\"'
    http_session.headers['Authorization'] = auth
</snippet></ROW><ROW><id>19801298</id><snippet>func</snippet></ROW><ROW><id>19801298</id><snippet>PostTweet</snippet></ROW><ROW><id>19801298</id><snippet>None</snippet></ROW><ROW><id>19801298</id><snippet>add_cron_job</snippet></ROW><ROW><id>19801298</id><snippet>lambda:</snippet></ROW><ROW><id>19801298</id><snippet>sched.add_cron_job(lambda: postTweet(messages[random.randint(0, len(messages))]),
                   day_of_week="0-6/6", hour='2-6/3')
</snippet></ROW><ROW><id>19801538</id><snippet>tour</snippet></ROW><ROW><id>19801538</id><snippet>class Tour(object):
    tour = something
</snippet></ROW><ROW><id>19801538</id><snippet>tour</snippet></ROW><ROW><id>19801538</id><snippet>class Tour(object):
    def __init__(self, cities):
        self.tour = cities
</snippet></ROW><ROW><id>19801538</id><snippet>Tour</snippet></ROW><ROW><id>19801538</id><snippet>shuffle</snippet></ROW><ROW><id>19801538</id><snippet>class Tour(object):
    def __init__(self, cities):
        self.tour = cities[:]
</snippet></ROW><ROW><id>19801538</id><snippet>shuffled</snippet></ROW><ROW><id>19801538</id><snippet>def shuffled(iterable):
    result = list(iterable)
    shuffle(result)
    return result
</snippet></ROW><ROW><id>19801538</id><snippet>tours = [Tour(shuffled(cities)) for _ in xrange(PopulationSize)]
</snippet></ROW><ROW><id>19801538</id><snippet>for tour in tours:
    print ','.join(city.id for city in tour)
</snippet></ROW><ROW><id>19801538</id><snippet>for</snippet></ROW><ROW><id>19801538</id><snippet>for tour in tours</snippet></ROW><ROW><id>19801538</id><snippet>join</snippet></ROW><ROW><id>19801635</id><snippet>if element.strip() &gt; (lowest):
</snippet></ROW><ROW><id>19801635</id><snippet>str</snippet></ROW><ROW><id>19801635</id><snippet>int</snippet></ROW><ROW><id>19801635</id><snippet>int</snippet></ROW><ROW><id>19801635</id><snippet>int('   1  ') is 1</snippet></ROW><ROW><id>19801635</id><snippet>if int(element.string()) &gt; lowest:
</snippet></ROW><ROW><id>19801635</id><snippet># Assuming test.txt is a file with a number on each line.
with open('test.txt') as f:
    nums = [int(x) for x in f.readlines()]
    print 'Max: {0}'.format(max(nums))
    print 'Min: {0}'.format(min(nums))
    print 'Average: {0}'.format(sum(nums) / float(len(nums)))
</snippet></ROW><ROW><id>19801806</id><snippet>datetime</snippet></ROW><ROW><id>19801806</id><snippet>utcfromtimestamp</snippet></ROW><ROW><id>19801806</id><snippet>fromtimestamp</snippet></ROW><ROW><id>19801806</id><snippet>datetime.fromtimestamp(0)</snippet></ROW><ROW><id>19801806</id><snippet>timestamp</snippet></ROW><ROW><id>19802005</id><snippet>x</snippet></ROW><ROW><id>19802005</id><snippet>2</snippet></ROW><ROW><id>19802005</id><snippet>fib(4000)</snippet></ROW><ROW><id>19802005</id><snippet>3998 &gt; sys.getcursionlimit()</snippet></ROW><ROW><id>19802201</id><snippet>def squeeze(myList, num):
    if myList == []:
        return [num]
    elif num &gt; myList[0]:
        return [myList[0]] + squeeze(myList[1:], num)
    else:
        return [num] + myList

print squeeze([1,4,7,9], 10)
print squeeze([1,4,7,9], 8)
print squeeze([1,4,7,9], 0)
</snippet></ROW><ROW><id>19802201</id><snippet>[1, 4, 7, 9, 10]
[1, 4, 7, 8, 9]
[0, 1, 4, 7, 9]
</snippet></ROW><ROW><id>19802201</id><snippet>myList</snippet></ROW><ROW><id>19802201</id><snippet>num</snippet></ROW><ROW><id>19802201</id><snippet>num</snippet></ROW><ROW><id>19802201</id><snippet>myList</snippet></ROW><ROW><id>19802201</id><snippet>num</snippet></ROW><ROW><id>19802201</id><snippet>myList</snippet></ROW><ROW><id>19802201</id><snippet>myList[1:]</snippet></ROW><ROW><id>19802201</id><snippet>myList</snippet></ROW><ROW><id>19802201</id><snippet>[4, 7, 9]</snippet></ROW><ROW><id>19802201</id><snippet>num</snippet></ROW><ROW><id>19802201</id><snippet>[7, 9]</snippet></ROW><ROW><id>19802201</id><snippet>[9]</snippet></ROW><ROW><id>19802201</id><snippet>[8, 9]</snippet></ROW><ROW><id>19802201</id><snippet>[7, 8, 9]</snippet></ROW><ROW><id>19802201</id><snippet>[4, 7, 8, 9]</snippet></ROW><ROW><id>19802201</id><snippet>num</snippet></ROW><ROW><id>19802201</id><snippet>myList</snippet></ROW><ROW><id>19802201</id><snippet>num</snippet></ROW><ROW><id>19802201</id><snippet>num</snippet></ROW><ROW><id>19802201</id><snippet>myList</snippet></ROW><ROW><id>19802246</id><snippet>append</snippet></ROW><ROW><id>19802246</id><snippet>data_complete.append (data)
</snippet></ROW><ROW><id>19802246</id><snippet>extend</snippet></ROW><ROW><id>19802246</id><snippet>data</snippet></ROW><ROW><id>19802246</id><snippet>data_complete.extend (data)
</snippet></ROW><ROW><id>19802335</id><snippet>x_result</snippet></ROW><ROW><id>19802335</id><snippet>ysym</snippet></ROW><ROW><id>19802335</id><snippet>subs()</snippet></ROW><ROW><id>19802335</id><snippet>evalf()</snippet></ROW><ROW><id>19802335</id><snippet>[e.subs({ysym:ylist[randmid]}).evalf() for e in x_result]
</snippet></ROW><ROW><id>19802335</id><snippet>[0.0871073310916539 - 8.0e-17*I,
 1.36864647418387 + 4.37e-17*I,
 -1.45575380527552 + 3.63e-17*I]
</snippet></ROW><ROW><id>19802379</id><snippet>from graphics import *
win = GraphWin('', 600,500)
text_x, text_y = 200, 50
with open("input.txt","r") as file:
    for line in file:
        print(line)
        label = Text(Point(text_x, text_y), line)
        label.draw(win)
        text_y += 50 # distance between 2 lines
</snippet></ROW><ROW><id>19802490</id><snippet>massaged.append(((g, c), v % fparms_dict))</snippet></ROW><ROW><id>19802490</id><snippet>.append()</snippet></ROW><ROW><id>19802490</id><snippet>.append()</snippet></ROW><ROW><id>19802516</id><snippet>candidates = ifilter(lambda n, prime=prime: n % prime, candidates)
</snippet></ROW><ROW><id>19802668</id><snippet>A</snippet></ROW><ROW><id>19802668</id><snippet>self</snippet></ROW><ROW><id>19802668</id><snippet>sub_B = A(host = 'example.com', port = 22, user = 'root', password = 'testing')
</snippet></ROW><ROW><id>19802711</id><snippet>k &lt; 5</snippet></ROW><ROW><id>19802711</id><snippet>5</snippet></ROW><ROW><id>19802711</id><snippet>k</snippet></ROW><ROW><id>19802711</id><snippet>4</snippet></ROW><ROW><id>19802711</id><snippet>0</snippet></ROW><ROW><id>19802711</id><snippet>k</snippet></ROW><ROW><id>19802711</id><snippet>3</snippet></ROW><ROW><id>19802711</id><snippet>list_title[4]</snippet></ROW><ROW><id>19802711</id><snippet>IndexError</snippet></ROW><ROW><id>19802711</id><snippet>k &lt; 5</snippet></ROW><ROW><id>19802711</id><snippet>k &lt; 4</snippet></ROW><ROW><id>19802711</id><snippet>for j in i:
            print (j)
            if k &lt; 4: 
                print (list_title[k],) #Move it to the condition here
                k+=1
            else:
                k = 0
</snippet></ROW><ROW><id>19802711</id><snippet>k</snippet></ROW><ROW><id>19802711</id><snippet>4</snippet></ROW><ROW><id>19802711</id><snippet>k</snippet></ROW><ROW><id>19802711</id><snippet>0</snippet></ROW><ROW><id>19802836</id><snippet>location</snippet></ROW><ROW><id>19802936</id><snippet>DataFrame.query()</snippet></ROW><ROW><id>19802936</id><snippet>DataFrame.eval()</snippet></ROW><ROW><id>19802936</id><snippet>&gt;&gt;&gt; df = DataFrame({"A": range(10), "B": range(0, 20, 2)})
&gt;&gt;&gt; df
   A   B
0  0   0
1  1   2
2  2   4
3  3   6
4  4   8
5  5  10
6  6  12
7  7  14
8  8  16
9  9  18

&gt;&gt;&gt; df.query("A &lt; 5 and B in (1, 2, 3, 5, 6)")
   A  B
1  1  2
3  3  6
&gt;&gt;&gt; df.eval("A + B")
0     0
1     3
2     6
3     9
4    12
5    15
6    18
7    21
8    24
9    27
dtype: int64
</snippet></ROW><ROW><id>19802973</id><snippet>enumerate</snippet></ROW><ROW><id>19802973</id><snippet>for index, node in enumerate(child_nodes):
</snippet></ROW><ROW><id>19802973</id><snippet>enumerate</snippet></ROW><ROW><id>19802973</id><snippet>&gt;&gt;&gt; l = ['a', 'b', 'c']
&gt;&gt;&gt; for index, value in enumerate(l):
    print index, value


0 a
1 b
2 c
</snippet></ROW><ROW><id>19802984</id><snippet>sudo touch /var/lib/my_shared_db.sqlite3
sudo chmod 666 /var/lib/my_shared_db.sqlite3
</snippet></ROW><ROW><id>19802984</id><snippet>/var/lib/my_shared_db.sqlite3</snippet></ROW><ROW><id>19802984</id><snippet>/var/lib</snippet></ROW><ROW><id>19803038</id><snippet>\w</snippet></ROW><ROW><id>19803038</id><snippet>/</snippet></ROW><ROW><id>19803038</id><snippet>^(\w|/)+(-(\w|/)+)*$
</snippet></ROW><ROW><id>19803038</id><snippet>\</snippet></ROW><ROW><id>19803038</id><snippet>self.regex_string = re.compile(r'^(\w|/)+(-(\w|/)+)*$')
</snippet></ROW><ROW><id>19803038</id><snippet>//</snippet></ROW><ROW><id>19803038</id><snippet>self.regex_string = re.compile(r'^(\w|/(?!/))+(-(\w|/(?!/))+)*$')
</snippet></ROW><ROW><id>19803038</id><snippet>/(?!/)</snippet></ROW><ROW><id>19803078</id><snippet>inFile = open(inFilename, "r")
outFile = open(outFilename, "w")
skipping = False
for line in infile:
    if skipping:
        # don't print this line no matter what,
        # hut stop skipping if "]" in line
        if "]" in line:
            skipping = False
    elif line.startswith("["):
        # don't print this line either no matter what,
        # and start skipping if "]" _not_ in the line
        skipping = "]" not in line
    else:
        outfile.write(line)
infile.close()
outfile.close()
if skipping:
    raise ValueError("hit end of file with unclosed '['!")
</snippet></ROW><ROW><id>19803284</id><snippet>import csv

def get_html_table(data):
    s = """&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
    &lt;body&gt;
        &lt;table id="gradient-style"&gt;
            &lt;tbody&gt;\n"""
    for row in data:
        s += '        &lt;tr&gt;'
        for counter, cell in enumerate(row):
            s += r'&lt;td&gt;{}&lt;/td&gt;'.format(cell)
        s += '&lt;/tr&gt;\n'
    s += """            &lt;/tbody&gt;
        &lt;/table&gt;
    &lt;/body&gt;
&lt;/html&gt;"""
    return s

with open('testoutput.html', 'rb') as old_html:
    old_html = old_html.read()

with open('random.csv') as ifile:
    data = []

    for counter, row in enumerate(csv.reader(ifile)):
        if counter != 0:
            datatoapp = [row[0], row[1], row[2], row[3]]
            data.append(datatoapp)    

    html_data = get_html_table(data)

if old_html != html_data:
    if html_data:
        with open('testoutput.html', "wb") as ofile:
            ofile.write(html_data)
</snippet></ROW><ROW><id>19803491</id><snippet>x[2::3], y[2::3]
</snippet></ROW><ROW><id>19803491</id><snippet>x[4::5], y[4::5]
</snippet></ROW><ROW><id>19803724</id><snippet>pandas</snippet></ROW><ROW><id>19803724</id><snippet>import pandas as pd
df = pd.read_csv("stuff.dat",sep=r"\s+")
df["ranks"] = df.reset_index().groupby("Name")["index"].rank("first")
df2 = df.pivot_table(rows=["Name", "URL", "Email"],
                     cols="ranks",
                     aggfunc=lambda x: x, fill_value='')
df2.columns = [c[0] + str(int(c[1])) for c in df2.columns.get_values()]
df2 = df2.reset_index()
</snippet></ROW><ROW><id>19803724</id><snippet>&gt;&gt;&gt; print df2.to_string()
   Name        URL    Email Price1 Price2 Price3  Text1   Text2  Text3 Number1 Number2 Number3 Choice1 Choice2 Choice3
0   Bar  www.c.com  c@c.com   $100   $250         Dudes    Guys            999     200               Y       Y        
1   Foo  www.a.com  a@a.com    $40    $60    $20  Stuff  Things  Other     560     280     120       Y       N       Y
2  John  www.b.com  b@b.com    $25                 Gals                   1222                       N                
</snippet></ROW><ROW><id>19803724</id><snippet>ranks</snippet></ROW><ROW><id>19803724</id><snippet>reset_index()</snippet></ROW><ROW><id>19803724</id><snippet>"index"</snippet></ROW><ROW><id>19803724</id><snippet>[0, 1, .., 5]</snippet></ROW><ROW><id>19803724</id><snippet>groupby</snippet></ROW><ROW><id>19803724</id><snippet>Name</snippet></ROW><ROW><id>19803724</id><snippet>rank</snippet></ROW><ROW><id>19803724</id><snippet>ranks</snippet></ROW><ROW><id>19803724</id><snippet>&gt;&gt;&gt; df[["Name", "ranks"]]
   Name  ranks
0   Foo      1
1   Foo      2
2   Foo      3
3  John      1
4   Bar      1
5   Bar      2
</snippet></ROW><ROW><id>19803724</id><snippet>DataFrame</snippet></ROW><ROW><id>19803724</id><snippet>MultiIndex</snippet></ROW><ROW><id>19803724</id><snippet>                       Price              Text                Number           Choice      
ranks                      1     2    3      1       2      3      1    2    3      1  2  3
Name URL       Email                                                                       
Bar  www.c.com c@c.com  $100  $250       Dudes    Guys           999  200           Y  Y   
Foo  www.a.com a@a.com   $40   $60  $20  Stuff  Things  Other    560  280  120      Y  N  Y
John www.b.com b@b.com   $25              Gals                  1222                N      
</snippet></ROW><ROW><id>19803724</id><snippet>&gt;&gt;&gt; df2.columns
MultiIndex(levels=[[u'Price', u'Text', u'Number', u'Choice'], [1.0, 2.0, 3.0]],
           labels=[[0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3], [0, 1, 2, 0, 1, 2, 0, 1, 2, 0, 1, 2]],
           names=[None, u'ranks'])
&gt;&gt;&gt; df2.columns.get_values()
array([('Price', 1.0), ('Price', 2.0), ('Price', 3.0), ('Text', 1.0),
       ('Text', 2.0), ('Text', 3.0), ('Number', 1.0), ('Number', 2.0),
       ('Number', 3.0), ('Choice', 1.0), ('Choice', 2.0), ('Choice', 3.0)], dtype=object)
</snippet></ROW><ROW><id>19803724</id><snippet>email</snippet></ROW><ROW><id>19803724</id><snippet>ffill()</snippet></ROW><ROW><id>19803724</id><snippet>groupby</snippet></ROW><ROW><id>19803787</id><snippet>HTMLParser.HTMLParser.unescape</snippet></ROW><ROW><id>19803787</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; parser = HTMLParser.HTMLParser()
&gt;&gt;&gt; parser.unescape('í')
u'\xed'
&gt;&gt;&gt; print parser.unescape('í')
í
</snippet></ROW><ROW><id>19803787</id><snippet>&gt;&gt;&gt; import html.parser
&gt;&gt;&gt; parser = html.parser.HTMLParser()
&gt;&gt;&gt; parser.unescape('í')
'í'
</snippet></ROW><ROW><id>19803880</id><snippet>result.cal = CALORIES[name]
</snippet></ROW><ROW><id>19804120</id><snippet># generate individual converted dictionaries 
# not tested with sys.stdin
def gen_with_appropriate_name():
    for n, line in enumerate(sys.stdin, 1):
        d = ast.literal_eval(line)
        sub_d = d.values()[0]
        yield {n : {'1' : sub_d['name'],
                     '2' : sub_d['count'],
                     '3' : sub_d['top']}}
</snippet></ROW><ROW><id>19804120</id><snippet># generate individual converted dictionaries 
# not tested with sys.stdin
def gen_with_appropriate_name():
    for n, line in enumerate(sys.stdin, 1):
        d = ast.literal_eval(line)
        items = d.values()[0].items()
        items.sort(key = lambda itm: itm[0])
        yield {n: {i+1:item[1] for i, item in enumerate(items)}} 
</snippet></ROW><ROW><id>19804120</id><snippet>d = gen_with_appropriate_name()
for thing in d:
    first =  str(thing.keys()[0])
    second =  thing.values()[0]
    print first + ' ' + ' '.join('{}: {}'.format(*item) for item in second.iteritems())
</snippet></ROW><ROW><id>19804120</id><snippet>1 1: 5 3: 0 2: 6
2 1: 6 3: 0 2: 4
3 1: 2 3: 1 2: 9
</snippet></ROW><ROW><id>19804120</id><snippet>1 1: 6 2: 5 3: 0
2 1: 4 2: 6 3: 0
3 1: 9 2: 2 3: 1
</snippet></ROW><ROW><id>19804120</id><snippet>gen_with appropriate_name()
</snippet></ROW><ROW><id>19804120</id><snippet>yield {n: {i+1:item[1] for i, item in enumerate(items)}}
</snippet></ROW><ROW><id>19804120</id><snippet>{n: {i+1:item[1] for i, item in enumerate(items)}}
</snippet></ROW><ROW><id>19804130</id><snippet>.append()</snippet></ROW><ROW><id>19804130</id><snippet>.append()</snippet></ROW><ROW><id>19804130</id><snippet>==</snippet></ROW><ROW><id>19804130</id><snippet>=</snippet></ROW><ROW><id>19804130</id><snippet>SyntaxError</snippet></ROW><ROW><id>19804138</id><snippet>obj_2 = type (obj)(2)
</snippet></ROW><ROW><id>19804138</id><snippet>l2 = [type(obj)(2) for obj in l]
</snippet></ROW><ROW><id>19804201</id><snippet>def</snippet></ROW><ROW><id>19804201</id><snippet>class</snippet></ROW><ROW><id>19804201</id><snippet>bar</snippet></ROW><ROW><id>19804201</id><snippet>foo()</snippet></ROW><ROW><id>19804243</id><snippet>np.argsort</snippet></ROW><ROW><id>19804243</id><snippet>In [59]: arr = [5,3,7,2,6,34,46,344,545,32,5,22]

In [60]: np.argsort(arr)
Out[60]: array([ 3,  1,  0, 10,  4,  2, 11,  9,  5,  6,  7,  8])
</snippet></ROW><ROW><id>19804243</id><snippet>[3, 1, 0, ...]</snippet></ROW><ROW><id>19804243</id><snippet>3</snippet></ROW><ROW><id>19804243</id><snippet>2</snippet></ROW><ROW><id>19804243</id><snippet>2</snippet></ROW><ROW><id>19804243</id><snippet>3</snippet></ROW><ROW><id>19804243</id><snippet>0</snippet></ROW><ROW><id>19804243</id><snippet>5</snippet></ROW><ROW><id>19804243</id><snippet>arr</snippet></ROW><ROW><id>19804243</id><snippet>In [61]: arr
Out[61]: [5, 3, 7, 2, 6, 34, 46, 344, 545, 32, 5, 22]
</snippet></ROW><ROW><id>19804243</id><snippet>np.sort</snippet></ROW><ROW><id>19804243</id><snippet>In [62]: np.sort(arr)
Out[62]: array([  2,   3,   5,   5,   6,   7,  22,  32,  34,  46, 344, 545])
</snippet></ROW><ROW><id>19804243</id><snippet>arr</snippet></ROW><ROW><id>19804243</id><snippet>In [68]: arr
Out[68]: [5, 3, 7, 2, 6, 34, 46, 344, 545, 32, 5, 22]
</snippet></ROW><ROW><id>19804243</id><snippet>In [69]: arr.sort()

In [70]: arr
Out[70]: [2, 3, 5, 5, 6, 7, 22, 32, 34, 46, 344, 545]
</snippet></ROW><ROW><id>19804445</id><snippet>yyy</snippet></ROW><ROW><id>19804445</id><snippet>dateuse</snippet></ROW><ROW><id>19804445</id><snippet>station</snippet></ROW><ROW><id>19804445</id><snippet>transform</snippet></ROW><ROW><id>19804445</id><snippet>dateuse</snippet></ROW><ROW><id>19804445</id><snippet>station</snippet></ROW><ROW><id>19804445</id><snippet>&amp;</snippet></ROW><ROW><id>19804445</id><snippet>yyy</snippet></ROW><ROW><id>19804445</id><snippet>&gt;&gt;&gt; multiple = df.groupby(["dateuse", "station"])["variable1"].transform(len) &gt; 1
&gt;&gt;&gt; must_be_isolated = df["variable1"] == "yyy"
&gt;&gt;&gt; df[~(multiple &amp; must_be_isolated)]
               dateuse   station variable1
0  2012-08-12 00:00:00  station1       xxx
2  2012-08-23 00:00:00  station2       aaa
3  2012-08-23 00:00:00  station3       bbb
4  2012-08-25 00:00:00  station4       ccc
5  2012-08-25 00:00:00  station4       ccc
6  2012-08-25 00:00:00  station4       ccc
</snippet></ROW><ROW><id>19804771</id><snippet>printRootStructure</snippet></ROW><ROW><id>19804771</id><snippet>import os
def printRootStructure(dirname,indent=0):
    for i in range(indent):
        print "   ",
    print os.path.basename(dirname) # changed
    if os.path.isdir(dirname):
        for files in os.listdir(dirname):
            printRootStructure(os.path.join(dirname,files),indent+1) # changed
</snippet></ROW><ROW><id>19804771</id><snippet>printRootStructure</snippet></ROW><ROW><id>19804771</id><snippet>os.path.isdir</snippet></ROW><ROW><id>19804771</id><snippet>os.path.isdir("test1")</snippet></ROW><ROW><id>19804771</id><snippet>os.path.basename</snippet></ROW><ROW><id>19804777</id><snippet>fcond = threading.Condition()
fargs = set()

def f(x):
    with fcond:
        while x in fargs:
            fcond.wait()
        fargs.add(x)  # this thread has exclusive rights to use `x`

    # do useful stuff with x
    # any other thread trying to call f(x) will
    # block in the .wait above()

    with fcond:
        fargs.remove(x)      # we're done with x
        fcond.notify_all()   # let blocked threads (if any) proceed
</snippet></ROW><ROW><id>19804777</id><snippet>defaultdict</snippet></ROW><ROW><id>19804777</id><snippet>defaultdict</snippet></ROW><ROW><id>19804777</id><snippet>withlock_dict[x]</snippet></ROW><ROW><id>19804777</id><snippet>x</snippet></ROW><ROW><id>19804777</id><snippet>x</snippet></ROW><ROW><id>19804777</id><snippet>x</snippet></ROW><ROW><id>19804777</id><snippet>x</snippet></ROW><ROW><id>19804777</id><snippet>f(x)</snippet></ROW><ROW><id>19804777</id><snippet>defaultdict</snippet></ROW><ROW><id>19804777</id><snippet>threading.Lock</snippet></ROW><ROW><id>19804777</id><snippet>defaultdict</snippet></ROW><ROW><id>19804777</id><snippet>threading.Lock</snippet></ROW><ROW><id>19804777</id><snippet>threading.Condition</snippet></ROW><ROW><id>19804777</id><snippet>x</snippet></ROW><ROW><id>19804777</id><snippet>farglocker = ArgLocker() # for function `f()`
</snippet></ROW><ROW><id>19804777</id><snippet>f()</snippet></ROW><ROW><id>19804777</id><snippet>def f(x):
    with farglocker(x):
        # only one thread at a time can run with argument `x`
</snippet></ROW><ROW><id>19804777</id><snippet>import threading

class ArgLocker:
    def __init__(self):
        self.xs = dict() # maps x to (lock, count) pair
        self.lock = threading.Lock()

    def __call__(self, x):
        return AllMine(self.xs, self.lock, x)

class AllMine:
    def __init__(self, xs, lock, x):
        self.xs = xs
        self.lock = lock
        self.x = x

    def __enter__(self):
        x = self.x
        with self.lock:
            xlock = self.xs.get(x)
            if xlock is None:
                xlock = threading.Lock()
                xlock.acquire()
                count = 0
            else:
                xlock, count = xlock
            self.xs[x] = xlock, count + 1

        if count: # x was already known - wait for it
            xlock.acquire()
        assert xlock.locked

    def __exit__(self, *args):
        x = self.x
        with self.lock:
            xlock, count = self.xs[x]
            assert xlock.locked
            assert count &gt; 0
            count -= 1
            if count:
                self.xs[x] = xlock, count
            else:
                del self.xs[x]
            xlock.release()
</snippet></ROW><ROW><id>19804777</id><snippet>x</snippet></ROW><ROW><id>19804777</id><snippet>x</snippet></ROW><ROW><id>19804777</id><snippet>.notify_all()</snippet></ROW><ROW><id>19804777</id><snippet>x</snippet></ROW><ROW><id>19804777</id><snippet>x in fargs</snippet></ROW><ROW><id>19804777</id><snippet>.wait()</snippet></ROW><ROW><id>19804861</id><snippet>import os
import glob
source_pattern = 'c:/texts/*.txt'
output_directory = 'c:/texts/tokenized'

# Iterate over files matching source_pattern
for input_file in glob.glob(source_pattern):

    # build the output filename
    base,ext = os.path.splitext(os.path.basename(input_file))
    output_file = os.path.join(output_directory,base + '_tokenized' + ext)

    with open(input_file) as in_file, open(output_file,'w') as out_file:
        for line in in_file:
            out_file.write(','.join(line.split()) + '\n')
</snippet></ROW><ROW><id>19804987</id><snippet># easy_install argparse

# pip install argparse
</snippet></ROW><ROW><id>19805017</id><snippet>|length</snippet></ROW><ROW><id>19805017</id><snippet>{% if dato.titulo|length &gt; 35 %} {{dato.titulo[:35] + '...'}} {% else %} {{ dato.titulo }}{% endif %}
</snippet></ROW><ROW><id>19805017</id><snippet>|truncatechars</snippet></ROW><ROW><id>19805017</id><snippet>{{ dato.titulo|truncatechars:35 }}
</snippet></ROW><ROW><id>19805017</id><snippet>truncatechars</snippet></ROW><ROW><id>19805017</id><snippet>|slice</snippet></ROW><ROW><id>19805017</id><snippet>...</snippet></ROW><ROW><id>19805017</id><snippet>{{ dato.titulo|slice:35 }}
</snippet></ROW><ROW><id>19805076</id><snippet>codon_lookup</snippet></ROW><ROW><id>19805076</id><snippet>mutated_codon</snippet></ROW><ROW><id>19805076</id><snippet>for codon in mutated_codon:
    print codon_lookup[codon]
</snippet></ROW><ROW><id>19805076</id><snippet>for codon in mutated_codon:
    print(codon_lookup[codon])
</snippet></ROW><ROW><id>19805076</id><snippet>mutated_codons</snippet></ROW><ROW><id>19805076</id><snippet>mutated_codon</snippet></ROW><ROW><id>19805076</id><snippet>acids = [codon_lookup[codon] for codon in mutated_codon]
</snippet></ROW><ROW><id>19805076</id><snippet>acids = []
for codon in mutated_codon:
    acids.append(codon_lookup[codon])
</snippet></ROW><ROW><id>19805076</id><snippet>for acid in acids:
    print acid
</snippet></ROW><ROW><id>19805076</id><snippet>get</snippet></ROW><ROW><id>19805076</id><snippet>KeyError</snippet></ROW><ROW><id>19805076</id><snippet>codon_lookup</snippet></ROW><ROW><id>19805076</id><snippet>mutated_codon</snippet></ROW><ROW><id>19805076</id><snippet>get</snippet></ROW><ROW><id>19805076</id><snippet>None</snippet></ROW><ROW><id>19805076</id><snippet>for codon in mutated_codon:
    print codon_lookup.get(codon, '*')
</snippet></ROW><ROW><id>19805076</id><snippet>translate</snippet></ROW><ROW><id>19805076</id><snippet>&gt;&gt;&gt; from Bio.Seq import Seq
&gt;&gt;&gt; from Bio.Alphabet import generic_dna
&gt;&gt;&gt; coding_dna = Seq("ATGGCCATTGTAATGGGCCGCTGAAAGGGTGCCCGATAG", generic_dna)
&gt;&gt;&gt; coding_dna.translate()
Seq('MAIVMGR*KGAR*', HasStopCodon(ExtendedIUPACProtein(), '*'))
</snippet></ROW><ROW><id>19805126</id><snippet>global g_TargetEnvironment
global g_TargetRegion
global g_TargetSystem
global g_TCDataSheet
global g_Remarks
</snippet></ROW><ROW><id>19805126</id><snippet>g_TargetEnvironment = None
g_TargetRegion = None
g_TargetSystem = None
g_TCDataSheet = None
g_Remarks = None
</snippet></ROW><ROW><id>19805252</id><snippet>.get()</snippet></ROW><ROW><id>19805252</id><snippet>try:
    uid = request.session['mid']
    userobj = User.objects.get(id=uid)
except User.DoesNotExist:
   #handle case when user with that id does not exist

...
</snippet></ROW><ROW><id>19805412</id><snippet>sorted</snippet></ROW><ROW><id>19805412</id><snippet>def find_range(a,b):
    print range(*sorted((a,b)))
</snippet></ROW><ROW><id>19805412</id><snippet>&gt;&gt;&gt; find_range(4, 2)
[2, 3]
&gt;&gt;&gt; find_range(2, 4)
[2, 3]
</snippet></ROW><ROW><id>19805441</id><snippet>lines = []
lines.append(line('Math', '3', '12', 'Hello World!'))
...
</snippet></ROW><ROW><id>19805441</id><snippet>lines[i]
</snippet></ROW><ROW><id>19805441</id><snippet>dict</snippet></ROW><ROW><id>19805441</id><snippet>lines = []
lines.append({'course': 'Math', ...})
</snippet></ROW><ROW><id>19805713</id><snippet>r</snippet></ROW><ROW><id>19805713</id><snippet>r</snippet></ROW><ROW><id>19805713</id><snippet>re.I</snippet></ROW><ROW><id>19805713</id><snippet>(?&lt;!see)(?&lt;!under)\s+(section 7[\s.:-]+(?:deliver(?:ing)?).*?terminal\s+diagnosis(?:'s)?)
</snippet></ROW><ROW><id>19805713</id><snippet>live demo</snippet></ROW><ROW><id>19805713</id><snippet>re.I</snippet></ROW><ROW><id>19805713</id><snippet>matches = re.findall(r"(?&lt;!see)(?&lt;!under)\s+(section 7[\s.:-]+(?:deliver(?:ing)?).*?terminal\s+diagnosis(?:'s)?)", s, re.I)
print matches
</snippet></ROW><ROW><id>19806309</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>19806309</id><snippet>&gt;&gt;&gt; a =  "[{'index': '1', 'selected': 'true', 'length': '0', 'completedLength': '0', 'path': '', 'uris': [{'status': 'used', 'uri': 'http://www.single.com'}]}]"
&gt;&gt;&gt; b = "[{'index': '1', 'selected': 'true', 'length': '0', 'completedLength': '0', 'path': '', 'uris': [{'status': 'used', 'uri': 'http://www.mirrors.com'}, {'status': 'used', 'uri': 'http://www.mirrors2.com'}]}]"
&gt;&gt;&gt; c = "[{'index': '1', 'selected': 'true', 'length': '103674793', 'completedLength': '0', 'path': '/home/dr/Maher_Al-Muaiqly_(MP3_Quran)/002.mp3', 'uris': []}, {'index': '2', 'selected': 'true', 'length': '62043128', 'completedLength': '0', 'path': '/home/dr/Maher_Al-Muaiqly_(MP3_Quran)/004.mp3', 'uris': []}, {'index': '3', 'selected': 'true', 'length': '57914945', 'completedLength': '0', 'path': '/home/dr/Maher_Al-Muaiqly_(MP3_Quran)/003.mp3', 'uris': []}]"
</snippet></ROW><ROW><id>19806309</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; [x['uris'] for x in ast.literal_eval(a)]
[[{'status': 'used', 'uri': 'http://www.single.com'}]]
&gt;&gt;&gt; [x['uris'] for x in ast.literal_eval(b)]
[[{'status': 'used', 'uri': 'http://www.mirrors.com'}, {'status': 'used', 'uri': 'http://www.mirrors2.com'}]]
&gt;&gt;&gt; [x['uris'] for x in ast.literal_eval(c)]
[[], [], []]
</snippet></ROW><ROW><id>19806570</id><snippet>class FullHC:
    def __init__(self):
        self.id_clusters = []
        self.blockmodels = []

    def create_hc(G, t=1.0):
        labels=G.nodes()
</snippet></ROW><ROW><id>19806662</id><snippet>&gt; editedfile.txt</snippet></ROW><ROW><id>19806662</id><snippet>elements[2:]</snippet></ROW><ROW><id>19806662</id><snippet>elements[2]</snippet></ROW><ROW><id>19806662</id><snippet># This must have the same number of values as lines in the file
L = ['2.3','1.2']
with open("file1.txt", "r") as f:
    # skip the first line but output it?
    print f.readline().rstrip('\n') 

    for value,line in zip(L,f):
        elements = line.split()
        print "{}\t{}\t{}".format(elements[0],value,elements[2])
</snippet></ROW><ROW><id>19806662</id><snippet>2.3</snippet></ROW><ROW><id>19806662</id><snippet>1.2</snippet></ROW><ROW><id>19806662</id><snippet> x     y    z
1.1    2.3    1.4
1.9    1.2    2.1
</snippet></ROW><ROW><id>19806759</id><snippet>if</snippet></ROW><ROW><id>19806759</id><snippet>[i if len(i) == 9 for i in words]
</snippet></ROW><ROW><id>19806759</id><snippet>[i for i in words if len(i) == 9]
</snippet></ROW><ROW><id>19806798</id><snippet>def equal3(a, b, c):
  return (c &lt;= a == b) or (b &lt;= a == c) or (a &lt;= b == c)
</snippet></ROW><ROW><id>19806798</id><snippet>equal3(*[0.9, 0.8, 0.8])</snippet></ROW><ROW><id>19806798</id><snippet>*</snippet></ROW><ROW><id>19806809</id><snippet>begin = 0
end = -1
ret = 1
while (begin &gt; end and ret &gt; 0):
    items = []
    items.append(['text',ITEM_TEXT,"Automatically save the evaluation in data file(s)\n",""])
    items.append(['text',ITEM_TEXT,"Determine the range of timesteps that you want to save:",""])
    items.append(['step_begin',ITEM_INT,"Start timestep:","Start timestep",first_step,first_step,timesteps])
    items.append(['step_end',ITEM_INT,"End timestep:","End timestep",timesteps,first_step,timesteps])
    a = CeiQtGenericDialog(items,None,"Save evaluation","Ok","Cancel")
    ret = a.doit()

    if (ret &gt; 0):
        for i in a.getValues():
            if (i=='step_begin'):
                begin = a.getValue(i)
            if (i=='step_end'):
                end = a.getValue(i)

        if (begin &gt; end):
            items2 = []
            items2.append(['text',ITEM_TEXT,"Start timestep must be smaller than end timestep!!",""])
            a = CeiQtGenericDialog(items2,None,"Error","Ok","Cancel")
            ret = a.doit()
</snippet></ROW><ROW><id>19806960</id><snippet>sh</snippet></ROW><ROW><id>19806960</id><snippet>rm -rf /path/to/your/folder
</snippet></ROW><ROW><id>19806960</id><snippet>chmod</snippet></ROW><ROW><id>19806960</id><snippet>chmod a+x my-remove.sh
</snippet></ROW><ROW><id>19806960</id><snippet>/path/to/your/folder</snippet></ROW><ROW><id>19806960</id><snippet>my-remove.sh</snippet></ROW><ROW><id>19806960</id><snippet>cd ~/Desktop</snippet></ROW><ROW><id>19806960</id><snippet>touch my-remove.sh</snippet></ROW><ROW><id>19806960</id><snippet>echo "rm -rf /path/to/your/folder" &gt; my-remove.sh</snippet></ROW><ROW><id>19806960</id><snippet>chmod a+x my-remove.sh</snippet></ROW><ROW><id>19806960</id><snippet>my-remove.sh</snippet></ROW><ROW><id>19806960</id><snippet>/path/to/your/folder</snippet></ROW><ROW><id>19806960</id><snippet>chmod</snippet></ROW><ROW><id>19807060</id><snippet>pattern = r'(\(?(\d{3})\)?(?P&lt;A&gt;-)?(\d{3})(?(A)-?|-)(\d{4}))'
</snippet></ROW><ROW><id>19807060</id><snippet>import re
regex = re.compile(pattern)
check = ['123-333-1111', '(123)111-2222', '123-2221111', '1232221111']
for number in check:
    match = regex.match(number)
    print number, bool(match)
    if match:
        # show the numbers
        print 'nums:', filter(lambda x: x and x.isalnum(), match.groups())

&gt;&gt;&gt; 
123-333-1111 True
nums: ('123', '333', '1111')
(123)111-2222 True
nums: ('123', '111', '2222')
123-2221111 True
nums: ('123', '222', '1111')
1232221111 False
</snippet></ROW><ROW><id>19807060</id><snippet>(?P&lt;A&gt;-)</snippet></ROW><ROW><id>19807060</id><snippet>(?(A)-?|-)</snippet></ROW><ROW><id>19807060</id><snippet>(?P&lt;A&gt;-)</snippet></ROW><ROW><id>19807060</id><snippet>A</snippet></ROW><ROW><id>19807060</id><snippet>(?P&lt;NAME&gt; ... )</snippet></ROW><ROW><id>19807060</id><snippet>(?(A)-?|-)</snippet></ROW><ROW><id>19807060</id><snippet>A</snippet></ROW><ROW><id>19807060</id><snippet>(?(NAME)YES|NO)</snippet></ROW><ROW><id>19807060</id><snippet>help(re)</snippet></ROW><ROW><id>19807171</id><snippet>DatetimeIndex</snippet></ROW><ROW><id>19807171</id><snippet>hour = pd.DatetimeIndex(df["Date"]).hour
df[(hour &gt;= 12) &amp; (hour &lt;= 16)]
</snippet></ROW><ROW><id>19807659</id><snippet>from app import db

def ClassFactory(name):
    tabledict={'id':db.Column(db.Integer, primary_key = True),
               'trans_id':db.Column(db.Integer),
               'timestamp':db.Column(db.Integer),
               'order_type':db.Column(db.String(25)),
               'price':db.Column(db.Numeric(25,8)),
               'quantity':db.Column(db.Numeric(25,8)),}

    newclass = type(name, (db.Model,), tabledict)
    return newclass
</snippet></ROW><ROW><id>19807906</id><snippet>None</snippet></ROW><ROW><id>19807906</id><snippet>NULL</snippet></ROW><ROW><id>19807906</id><snippet>"None"</snippet></ROW><ROW><id>19808106</id><snippet>nogil</snippet></ROW><ROW><id>19808106</id><snippet>Workers</snippet></ROW><ROW><id>19808106</id><snippet>list</snippet></ROW><ROW><id>19808106</id><snippet>cdef list workers
workers = [Worker(), Worker(), Worker(), Worker()]
</snippet></ROW><ROW><id>19808106</id><snippet>nogil</snippet></ROW><ROW><id>19808106</id><snippet>cdef PyObject ** workers
cdef int * buf_sizes
cdef FLOAT_t ** buffers
</snippet></ROW><ROW><id>19808106</id><snippet>malloc</snippet></ROW><ROW><id>19808106</id><snippet>libc.stdlib</snippet></ROW><ROW><id>19808106</id><snippet># distutils: language = c
# cython: cdivision = True
# cython: boundscheck = False
# cython: wraparound = False
# cython: profile = False

cimport numpy as cnp
import numpy as np
from cython.parallel import parallel, prange
from libc.math cimport sin
cimport openmp
cnp.import_array()

ctypedef cnp.float64_t FLOAT_t
ctypedef cnp.intp_t INT_t
ctypedef cnp.ulong_t INDEX_t
ctypedef cnp.uint8_t BOOL_t

# Pyobject is the C representation of a Python object
# This allows casts in both ways...
cimport cython
from cpython cimport PyObject

# C memory alloc features
from libc.stdlib cimport malloc, free


cdef FLOAT_t MAXfloat64  = np.float64(np.inf)


cdef class Parent:
    cdef cnp.ndarray numbers
    cdef unsigned int i
    cdef PyObject ** workers
    cdef int nb_workers

    cdef int * buf_sizes
    cdef FLOAT_t ** buffers

    def __init__(Parent self, list numbers, int n_workers):
        self.numbers = &lt;cnp.ndarray[FLOAT_t, ndim=1]&gt; np.array(numbers,dtype=float)

        # Define number of workers
        self.nb_workers = n_workers
        self.workers = &lt;PyObject **&gt;malloc(self.nb_workers*cython.sizeof(cython.pointer(PyObject)))

        # Populate pool
        cdef int i
        cdef PyObject py_obj
        cdef object py_workers
        py_workers = []                     # For correct ref count
        for i in xrange(self.nb_workers):
            py_workers.append(Worker())
            self.workers[i] = &lt;PyObject*&gt;py_workers[i]

        self.init_buffers()

    cdef init_buffers(Parent self):
        cdef int i, j
        cdef int num_threads
        cdef int pos, pos_end
        cdef int buf_size

        num_threads = self.nb_workers
        buf_size    = len(self.numbers) // num_threads

        # Init buffers
        self.buffers   = &lt;FLOAT_t **&gt;malloc(self.nb_workers * cython.sizeof(cython.pointer(FLOAT_t)))
        self.buf_sizes = &lt;int *&gt;malloc(self.nb_workers * cython.sizeof(int))
        pos = 0
        buf_size = len(self.numbers) // num_threads

        for i in xrange(self.nb_workers):

            # If we are treating the last worker do everything left
            if (i == self.nb_workers-1):
                buf_size = len(self.numbers) - pos

            self.buf_sizes[i] = buf_size
            pos_end = pos + buf_size

            self.buffers[i] = &lt;FLOAT_t *&gt;malloc(buf_size * cython.sizeof(FLOAT_t))

            for j in xrange(pos, pos_end):
                self.buffers[i][j-pos] = &lt;FLOAT_t&gt;self.numbers[j]

            pos = pos + buf_size



    cpdef run(Parent self, bint use_parallel):

        cdef int i
        cdef FLOAT_t best

        # Run the workers
        if use_parallel:
            print 'parallel'
            with nogil:
                for i in prange(self.nb_workers, num_threads=self.nb_workers):
                    # Changed "FLOAT_t[:]" python object to C array "FLOAT_t *"
                    (&lt;Worker&gt;self.workers[i]).run(&lt;FLOAT_t *&gt;self.buffers[i], self.buf_sizes[i])

        else:
            print 'serial'
            for i in xrange(self.nb_workers):
                (&lt;Worker&gt;self.workers[i]).run(&lt;FLOAT_t *&gt;self.buffers[i], self.buf_sizes[i])

        # Make sure they ran
        for i in xrange(self.nb_workers):
            print (&lt;Worker&gt;self.workers[i]).output

        # Choose the worker that had the best solution
        best = MAXfloat64
        for i in xrange(self.nb_workers):
            if ((&lt;Worker&gt;self.workers[i]).output &lt; best):
                best = (&lt;Worker&gt;self.workers[i]).output

        return best


cdef class Worker:
    cdef public float output
    def __init__(Worker self):
        self.output = 0.0


    # Changed "FLOAT_t[:]" python object to C dyn array "FLOAT_t *"
    cdef void run(Worker self, FLOAT_t * numbers, unsigned int buffer_size) nogil:
        cdef unsigned int i, j
        cdef unsigned int n = buffer_size
        cdef FLOAT_t best
        cdef bint first = True
        cdef FLOAT_t value

        # Added initialization
        best = MAXfloat64
        for i in range(n):
            for j in range(n):
                value = sin(numbers[i]*numbers[j])
                if first or (value &lt; best):
                    best = value
                    first = False
        self.output = best
</snippet></ROW><ROW><id>19808106</id><snippet>from parallel import Parent
import time
data = list(range(20000))
parent = Parent(data, 7)

t0 = time.time()
output = parent.run(False)
t1 = time.time()

print 'Serial Result: %f' % output
print 'Serial Time: %f' % (t1-t0)

t0 = time.time()
output = parent.run(True)
t1 = time.time()

print 'Parallel Result: %f' % output
print 'Parallel Time: %f' % (t1-t0)
</snippet></ROW><ROW><id>19808106</id><snippet>serial
-1.0
-1.0
-1.0
-1.0
-1.0
-1.0
-1.0
Serial Result: -1.000000
Serial Time: 2.741364
parallel
-1.0
-1.0
-1.0
-1.0
-1.0
-1.0
-1.0
Parallel Result: -1.000000
Parallel Time: 0.536419
</snippet></ROW><ROW><id>19808149</id><snippet>from sympy.core.cache import *
</snippet></ROW><ROW><id>19808149</id><snippet>clear_cache()
</snippet></ROW><ROW><id>19808186</id><snippet>t = Twitter(
        auth=OAuth(OAUTH_TOKEN, OAUTH_SECRET,
                   CONSUMER_KEY, CONSUMER_SECRET))
</snippet></ROW><ROW><id>19808198</id><snippet>inst = getattr(mod, strs)()   #creates an instance of the class
inst.PlayAround_Play(a, b, c) #call `PlayAround_Play` method on the instance.
</snippet></ROW><ROW><id>19808198</id><snippet>60
</snippet></ROW><ROW><id>19808198</id><snippet>__init__</snippet></ROW><ROW><id>19808198</id><snippet>class PlayAround_Play():

    def __init__(self, a, b, c):
        d = a+b+c
        print d
</snippet></ROW><ROW><id>19808198</id><snippet>getattr(mod, strs)(a, b, c)
#prints 60
</snippet></ROW><ROW><id>19808198</id><snippet>__init__</snippet></ROW><ROW><id>19808198</id><snippet>self</snippet></ROW><ROW><id>19808225</id><snippet>self.on_change_expected_qty(cr, uid, [rec.id], rec.finish_product_quantity)
</snippet></ROW><ROW><id>19808694</id><snippet>picketools</snippet></ROW><ROW><id>19808694</id><snippet>with open('your_pickle_file', 'rb') as fin:
    op, fst, snd = next(pickletools.genops(fin))
    proto = op.proto
</snippet></ROW><ROW><id>19808694</id><snippet>pops = pickletools.genops(pickle_source)
proto = 2 if next(pops)[0].proto == 2 else int(any(op.proto for op, fst, snd in pops))
</snippet></ROW><ROW><id>19809254</id><snippet>dump</snippet></ROW><ROW><id>19809254</id><snippet>load</snippet></ROW><ROW><id>19809254</id><snippet>import pickle

score = 12

def scor_func(score):
  scores = []
  name = input("Please enter your name: ")
  entry = (name, score)
  scores.append(entry)
  f = open("Triviascores.bat", "wb")
  pickle.dump(scores, f)

  f.close()

  f = open("Triviascores.bat", "rb")
  scores = pickle.load(f)
  f.close()
  return scores

scor_func(score)
</snippet></ROW><ROW><id>19809254</id><snippet>shelve</snippet></ROW><ROW><id>19809510</id><snippet>distutils.version</snippet></ROW><ROW><id>19809510</id><snippet>&gt;&gt;&gt; from distutils.version import StrictVersion
&gt;&gt;&gt; fromVersion="5.5.0"
&gt;&gt;&gt; toVersion="7.0.0"
&gt;&gt;&gt; if ( StrictVersion(fromVersion) &lt; StrictVersion(toVersion) ):
...   print "From is less than to version"
... 
From is less than to version
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19809510</id><snippet>pydoc distutils.version</snippet></ROW><ROW><id>19809510</id><snippet>distutils.version</snippet></ROW><ROW><id>19809616</id><snippet>'name'</snippet></ROW><ROW><id>19809616</id><snippet># sort the dataframe
df.sort(columns=['name'], inplace=True)
# set the index to be this and don't drop
df.set_index(keys=['name'], drop=False,inplace=True)
# get a list of names
names=df['name'].unique().to_list()
# now we can perform a lookup on a 'view' of the dataframe
joe = df.loc[df.name=='joe']
# now you can query all 'joes'
</snippet></ROW><ROW><id>19809663</id><snippet>__init__</snippet></ROW><ROW><id>19809663</id><snippet>def __init__(self, arg_set = set()):
   print id(arg_set)
   self.my_set = arg_set 
</snippet></ROW><ROW><id>19809663</id><snippet>id</snippet></ROW><ROW><id>19809799</id><snippet>np.savetxt('test.csv',(title1, title2),fmt="%s", newline='\r\n')

import csv
with open('test.csv', 'a') as f:
    np.savetxt(f, I, delimiter=';', fmt='%s,'newline='\r\n')
f.close()
</snippet></ROW><ROW><id>19809799</id><snippet>line 1047, in savetxt
    fh.write(asbytes(format % tuple(row) + newline))
TypeError: must be str, not bytes
</snippet></ROW><ROW><id>19809895</id><snippet>if number % 3 == 0:
</snippet></ROW><ROW><id>19809895</id><snippet>print(9 % 3)
print(9 / 3)
</snippet></ROW><ROW><id>19809895</id><snippet>0
3.0
</snippet></ROW><ROW><id>19810074</id><snippet>import pandas as pd
import io

one="""iq, name
69, joe
120, james"""

two="""iq_start, iq_end, category
130,500, Very Superior
120,129,    Superior
110,119,    High Average
90,109, Average
80,89,  Low Average
70,79,  Borderline
0,69,   Extremely Low"""

three="""iq, career
69 , manual work
120, doctor"""

df1 = pd.read_csv(io.BytesIO(one), skipinitialspace=True)
df2 = pd.read_csv(io.BytesIO(two), skipinitialspace=True)
df3 = pd.read_csv(io.BytesIO(three), skipinitialspace=True)

iqmap = pd.Series(df2.category.values, index=df2.iq_start).sort_index()

df = pd.merge(df1, df3)
df["category"] = iqmap.asof(df.iq).values
df.set_index("iq", inplace=True)
df.T.to_dict()
</snippet></ROW><ROW><id>19810074</id><snippet>{69: {'career': 'manual work', 'category': 'Extremely Low', 'name': 'joe'},
 120: {'career': 'doctor', 'category': 'Superior', 'name': 'james'}}
</snippet></ROW><ROW><id>19810182</id><snippet>import re

edges = {}

with open(dot_file) as fr:
    for line in fr:
        key = tuple(sorted(re.findall('"([a-z ]+)"', line)[:2]))
        edges.setdefault(key, []).append(line.strip())

for v in edges.values():
    if len(v) &gt; 1:
        print re.sub("\[(.+)\]", '[\\1, dir="both"]', v[0])
    else:
        print v[0]
</snippet></ROW><ROW><id>19810182</id><snippet>concentrate=true</snippet></ROW><ROW><id>19810242</id><snippet>downloadGet</snippet></ROW><ROW><id>19810242</id><snippet>limit</snippet></ROW><ROW><id>19810242</id><snippet>limit</snippet></ROW><ROW><id>19810242</id><snippet>retry &lt; self.limit</snippet></ROW><ROW><id>19810242</id><snippet>True</snippet></ROW><ROW><id>19810242</id><snippet>&gt;&gt;&gt; retry = 4280
&gt;&gt;&gt; limit = '3'
&gt;&gt;&gt; retry &lt; limit
True
</snippet></ROW><ROW><id>19810242</id><snippet>limit</snippet></ROW><ROW><id>19810258</id><snippet>ser.write("command")</snippet></ROW><ROW><id>19810258</id><snippet>ser.read(n)</snippet></ROW><ROW><id>19810258</id><snippet>ser.readline()</snippet></ROW><ROW><id>19810258</id><snippet>\n</snippet></ROW><ROW><id>19810395</id><snippet>fig.add_subplots(2,2,1)</snippet></ROW><ROW><id>19810395</id><snippet>fig = plt.figure()

# a 2x2 grid and create the fourth (bottom-right) one
ax1 = fig.add_subplot(2,2,4)
ax1.text(.5,.5,'ax1')

# a 2x1 grid and create the top one
ax2 = fig.add_subplot(2,1,1)
ax2.text(.5,.5,'ax2')
</snippet></ROW><ROW><id>19810498</id><snippet>sin</snippet></ROW><ROW><id>19810498</id><snippet>df["long_1"] = df["long_1"].astype(np.float64)
</snippet></ROW><ROW><id>19810498</id><snippet>np.sin(df["long_1"].astype(np.float64))
</snippet></ROW><ROW><id>19810502</id><snippet>tree.xpath("//ul[@dir='ltr']/li/text()")
</snippet></ROW><ROW><id>19810502</id><snippet>unique_keys = ['datum', 'uitspraak']
for x in uitspraak:
  data = {'datum': datum, 'uitspraak': x}
  scraperwiki.sql.save(unique_keys, data)
</snippet></ROW><ROW><id>19810993</id><snippet>return u'&lt;a href="/im_troubleticket/media/%s"&gt;&lt;img src="/im_troubleticket/media/%s"&gt;&lt;/a&gt;' % (s, s)
</snippet></ROW><ROW><id>19810993</id><snippet>thumb_small = get_thumbnail(obj.screenshot,"x200",crop='center', quality=99)
thumb_large = get_thumbnail(obj.screenshot,"x500",crop='center', quality=99)                

return u'&lt;a href="/im_troubleticket/media/%s"&gt;&lt;img src="/im_troubleticket/media/%s"&gt;&lt;/a&gt;' % (thumb_small, thumb_large)
</snippet></ROW><ROW><id>19811374</id><snippet>MyPlot([Usual stuff], xrange = None, yrange = None):
   if xrange != None and yrange != None:
       do special stuff
   else:
       ordinary stuff
</snippet></ROW><ROW><id>19811374</id><snippet>xrange</snippet></ROW><ROW><id>19811374</id><snippet>yrange</snippet></ROW><ROW><id>19811374</id><snippet>None</snippet></ROW><ROW><id>19811374</id><snippet>None</snippet></ROW><ROW><id>19811517</id><snippet>import numpy as np
import cv2

im = cv2.imread('sun0016.bmp')
height, width, depth = im.shape
print height, width, depth
thresh = 132
imgray = cv2.cvtColor(im,cv2.COLOR_BGR2GRAY)
blur = cv2.GaussianBlur(imgray,(5,5),0)
edges = cv2.Canny(blur,thresh,thresh*2)
contours, hierarchy = cv2.findContours(edges,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
cnt = contours[0]
cv2.drawContours(im,contours,-1,(0,255,0),-1)

#centroid_x = M10/M00 and centroid_y = M01/M00
M = cv2.moments(cnt)
x = int(M['m10']/M['m00'])
y = int(M['m01']/M['m00'])
print x,y
print width/2.0,height/2.0
print width/2-x,height/2-y


cv2.circle(im,(x,y),1,(0,0,255),2)
cv2.putText(im,"center of Sun contour", (x,y), cv2.FONT_HERSHEY_SIMPLEX, 1, (0,0,255))
cv2.circle(im,(width/2,height/2),1,(255,0,0),2)
cv2.putText(im,"center of image", (width/2,height/2), cv2.FONT_HERSHEY_SIMPLEX, 1, (255,0,0))
cv2.imshow('contour',im)
cv2.waitKey(0)
</snippet></ROW><ROW><id>19811646</id><snippet>totals = {}
for k,v in original_list:
  totals[k] = totals.get(k,0) + v

# totals = {'a': 2, 'c': 2, 'b': 7}
</snippet></ROW><ROW><id>19811646</id><snippet>items</snippet></ROW><ROW><id>19811646</id><snippet>totals.items()
# =&gt; [('a', 2), ('c', 2), ('b', 7)]
</snippet></ROW><ROW><id>19811646</id><snippet>list</snippet></ROW><ROW><id>19811646</id><snippet>map(list, totals.items())
# =&gt; [['a', 2], ['c', 2], ['b', 7]]
</snippet></ROW><ROW><id>19811646</id><snippet>sorted(map(list, totals.items()))
# =&gt; [['a', 2], ['b', 7], ['c', 2]]
</snippet></ROW><ROW><id>19811711</id><snippet>PATH</snippet></ROW><ROW><id>19811711</id><snippet>$) echo $PATH
/some/path:/some/other/path
</snippet></ROW><ROW><id>19811711</id><snippet>* * * * * export PATH="/some/path:/some/other/path" &amp;&amp; /usr/bin/php /path/to/script.php &gt;&gt; /path/to/log.log
</snippet></ROW><ROW><id>19811711</id><snippet>DISPLAY</snippet></ROW><ROW><id>19811711</id><snippet>xvfb</snippet></ROW><ROW><id>19811831</id><snippet>mylist = {'apples', 'oranges', 'bananas'}
def part_one () :
    answer_one = raw_input ('&gt;&gt;&gt; ').lower()
    if answer_one in mylist:
        chapter_one()
</snippet></ROW><ROW><id>19811911</id><snippet>image = load_image("/path/to/image")[:,:,0] 
</snippet></ROW><ROW><id>19811945</id><snippet>Recipient</snippet></ROW><ROW><id>19811945</id><snippet>ForeignKey</snippet></ROW><ROW><id>19811945</id><snippet>Conversation</snippet></ROW><ROW><id>19811945</id><snippet>conversation</snippet></ROW><ROW><id>19811945</id><snippet>receipient_set</snippet></ROW><ROW><id>19811945</id><snippet>{% for i in rows %}
    {%for recp in i.conversation.recipient_set.all %}
        {# do something with each recipient object
        {% if not recp.is_read %}
            &lt;tr class="set_bold"&gt;
        {% else %}
        &lt;tr&gt;
       ....
    {%endfor%}

{%endfor%}
</snippet></ROW><ROW><id>19811967</id><snippet>all()</snippet></ROW><ROW><id>19811967</id><snippet>filter(id=report_id)</snippet></ROW><ROW><id>19811967</id><snippet>all()</snippet></ROW><ROW><id>19811967</id><snippet>report_qs = CustomReport.objects.all()
</snippet></ROW><ROW><id>19812021</id><snippet>sudo</snippet></ROW><ROW><id>19812205</id><snippet>HttpRequestNotFound</snippet></ROW><ROW><id>19812205</id><snippet>Http404</snippet></ROW><ROW><id>19812205</id><snippet>django.views.defaults.page_not_found</snippet></ROW><ROW><id>19812205</id><snippet>django.conf.urls.handler404</snippet></ROW><ROW><id>19812298</id><snippet>@class_decorator
class Class2(object):
</snippet></ROW><ROW><id>19812298</id><snippet>class Class2(object):
    ...
Class2 = class_decorator(Class2)
</snippet></ROW><ROW><id>19812298</id><snippet>AttributeError, NoneType has no attribute generator
</snippet></ROW><ROW><id>19812298</id><snippet>Class2.generator()</snippet></ROW><ROW><id>19812298</id><snippet>Class2</snippet></ROW><ROW><id>19812298</id><snippet>None</snippet></ROW><ROW><id>19812298</id><snippet>generator</snippet></ROW><ROW><id>19812298</id><snippet>Class2</snippet></ROW><ROW><id>19812298</id><snippet>None</snippet></ROW><ROW><id>19812298</id><snippet>class_decorator</snippet></ROW><ROW><id>19812298</id><snippet>None</snippet></ROW><ROW><id>19812298</id><snippet>Class2</snippet></ROW><ROW><id>19812298</id><snippet>None</snippet></ROW><ROW><id>19812298</id><snippet>Class2 = class_decorator(Class2)
</snippet></ROW><ROW><id>19812298</id><snippet>class_decorator</snippet></ROW><ROW><id>19812298</id><snippet>def class_decorator(cls):
    # modify cls
    return cls      # The error could be due to this line being missing
</snippet></ROW><ROW><id>19812314</id><snippet>itertools.izip_longest</snippet></ROW><ROW><id>19812314</id><snippet>fillvalue</snippet></ROW><ROW><id>19812314</id><snippet>In [1]: from itertools import chain, izip_longest

In [2]: a = [1]

In [3]: b = []

In [5]: list(chain(*izip_longest(a, b, fillvalue='foo')))
Out[5]: [1, 'foo']
</snippet></ROW><ROW><id>19812314</id><snippet>fillvalue</snippet></ROW><ROW><id>19812314</id><snippet>None</snippet></ROW><ROW><id>19812373</id><snippet>urlpatterns = patterns('',
    url(r'^mysite/polls/', include('polls.urls', namespace="polls")),
    url(r'^mysite/admin/', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>19812412</id><snippet>colors</snippet></ROW><ROW><id>19812412</id><snippet>random.choice</snippet></ROW><ROW><id>19812412</id><snippet>import random

colors = ['red', 'green', 'blue', 'yellow', 'orange', 'white', 'cyan', 'purple']
#your class declaration, __init__ declaration and more
def initUI(self):
        randomized = []
        for i in range(3):
            #this will pick three of the colors to be the color
            randomized.append(random.choice(colors))

        self.parent.title("Credits")
        self.pack(fill=BOTH, expand=1)
        label1 = Label(self, text="Code by blaba", fg=randomized[0], bg=randomized[0])
        label1.pack()
        label2 = Label(self, text="Idea by noctize", fg=randomized[1], bg=randomized[1])
        label2.pack()
        label3 = Label(self, text="Packed using py2exe", fg=randomized[2], bg=randomized[2]
        label3.pack()
        colorbutton = Button
</snippet></ROW><ROW><id>19812412</id><snippet>label1</snippet></ROW><ROW><id>19812504</id><snippet>reduce</snippet></ROW><ROW><id>19812504</id><snippet>print reduce(lambda x, y: x[y], city_field, person)
</snippet></ROW><ROW><id>19812504</id><snippet>Miami
</snippet></ROW><ROW><id>19812551</id><snippet>elif choice == 2:
    with open("x.txt") as f:
        f.readline()     # skip the first line
        for lines in f:  # loop through the rest of the lines   
            name, level = line.split()   # split each line into two variables
            if name == playername:       # assumes your player has entered their name
                playlevel(int(level))         # alternatively: setlevel = level or something
                break                    # assumes you don't need to read more lines
</snippet></ROW><ROW><id>19812961</id><snippet>function_to_be_mocked</snippet></ROW><ROW><id>19812961</id><snippet>mock_function</snippet></ROW><ROW><id>19812961</id><snippet>test_decoratorated_mocked</snippet></ROW><ROW><id>19812961</id><snippet>function_to_be_mocked</snippet></ROW><ROW><id>19812961</id><snippet>mydecorator.function_to_be_mocked = mydecorator.my_decorator(mock_function)
</snippet></ROW><ROW><id>19813018</id><snippet>setup.py</snippet></ROW><ROW><id>19813018</id><snippet>Makefile</snippet></ROW><ROW><id>19813018</id><snippet>Py2Exe</snippet></ROW><ROW><id>19813018</id><snippet>PyInstaller</snippet></ROW><ROW><id>19813159</id><snippet>zip()</snippet></ROW><ROW><id>19813159</id><snippet>&gt;&gt;&gt; a = ["question1", "question2", "question3", "question4", "question5"]
&gt;&gt;&gt; b = ["php html", "html", "html", "java", "php"]
&gt;&gt;&gt; merged = zip(a, b)
&gt;&gt;&gt; merged[0:2]
[('question1', 'php html'), ('question2', 'html')]
</snippet></ROW><ROW><id>19813269</id><snippet>_Element.text</snippet></ROW><ROW><id>19813269</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; xmlFile = '''
... &lt;xml&gt;
... &lt;maintag&gt;
... &lt;content&gt; lorem ipsum &lt;strong&gt; dolor sit &lt;/strong&gt; and so on &lt;/content&gt;
... &lt;/maintag&gt;
... &lt;/xml&gt;
... '''
&gt;&gt;&gt; parser = etree.XMLParser(remove_blank_text=False)
&gt;&gt;&gt; tree = etree.parse(StringIO(xmlFile), parser)
&gt;&gt;&gt; for my_content in tree.xpath('maintag/content//text()'):
...       print my_content
...
 lorem ipsum
 dolor sit
 and so on
</snippet></ROW><ROW><id>19813269</id><snippet>&gt;&gt;&gt; for my_content in tree.find('maintag/content').itertext():
...     print my_content
...
 lorem ipsum
 dolor sit
 and so on


&gt;&gt;&gt; ' '.join(tree.find('maintag/content').itertext())
' lorem ipsum   dolor sit   and so on '
&gt;&gt;&gt; ' '.join(t.strip() for t in tree.find('maintag/content').itertext())
'lorem ipsum dolor sit and so on'
</snippet></ROW><ROW><id>19813428</id><snippet>    typedef struct pcap_hdr_s {
        guint32 magic_number;   /* magic number */
        guint16 version_major;  /* major version number */
        guint16 version_minor;  /* minor version number */
        gint32  thiszone;       /* GMT to local correction */
        guint32 sigfigs;        /* accuracy of timestamps */
        guint32 snaplen;        /* max length of captured packets, in octets */
        guint32 network;        /* data link type */
} pcap_hdr_t;
</snippet></ROW><ROW><id>19813554</id><snippet>dt = timedelta(days=26, hours=0, minutes=16, seconds=53)
secs_per_day = 24*60*60    # hours * mins * secs
dt.total_seconds()/secs_per_day
&gt;&gt;&gt;26.011724537037036
</snippet></ROW><ROW><id>19813608</id><snippet>x = x.reshape(-1, 2)
</snippet></ROW><ROW><id>19813608</id><snippet>arange</snippet></ROW><ROW><id>19813608</id><snippet>dtype</snippet></ROW><ROW><id>19813608</id><snippet>x = np.repeat(0.5*np.arange(N, dtype=np.float32), 2).reshape(-1, 2)
</snippet></ROW><ROW><id>19813608</id><snippet>astype</snippet></ROW><ROW><id>19813608</id><snippet>copy</snippet></ROW><ROW><id>19813608</id><snippet>x.astype(np.int8, copy=False)
</snippet></ROW><ROW><id>19813608</id><snippet>numpy</snippet></ROW><ROW><id>19813608</id><snippet>OWNDATA</snippet></ROW><ROW><id>19813608</id><snippet>flags</snippet></ROW><ROW><id>19813608</id><snippet>ndarray</snippet></ROW><ROW><id>19813714</id><snippet>DELETE https://graph.facebook.com/ID?access_token=... HTTP/1.1
</snippet></ROW><ROW><id>19813733</id><snippet>mydir
|
|--setup.sh # global setup script
|
|--xlrd
|  |
|  |--...
|  |--setup.py
|  |--...
|
|--xlwt
   |
   |--...
   |--setup.py
   |--...
</snippet></ROW><ROW><id>19813733</id><snippet>#!/bin/sh
python ./xlrd/setup.py install
python ./xlwt/setup.py install
</snippet></ROW><ROW><id>19813733</id><snippet>xlrd\setup.py install
xlwt\setup.py install
</snippet></ROW><ROW><id>19814036</id><snippet>M-: (executable-find "flake8")</snippet></ROW><ROW><id>19814036</id><snippet>nil</snippet></ROW><ROW><id>19814036</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>19814036</id><snippet>exec-path</snippet></ROW><ROW><id>19814036</id><snippet>$PATH</snippet></ROW><ROW><id>19814036</id><snippet>flake8</snippet></ROW><ROW><id>19814333</id><snippet>np.save</snippet></ROW><ROW><id>19814333</id><snippet>np.load</snippet></ROW><ROW><id>19814333</id><snippet>import numpy as np

arr = np.random.randint(1, 200000, (180000, 47))

np.save('test.npy', arr)  # 250 milisec on my system
loaded_arr = np.load('test.npy')  # 55 milisec on my system


# alternatively using text based files:
np.savetxt('test.txt', arr)  # 19 seconds
loaded_arr = np.loadtxt('test.txt', dtype=np.int)  # 32 seconds
</snippet></ROW><ROW><id>19814424</id><snippet>from itertools import product

text = 'value1 value2 value3_0,value3_1 value4 value5_0,value5_1,value5_2,value5_3 value6'
items = [el.split(',') for el in text.split()]
for item in product(*items):
    print item # use ' '.join(item) to get a string back
</snippet></ROW><ROW><id>19814424</id><snippet>('value1', 'value2', 'value3_0', 'value4', 'value5_0', 'value6')
('value1', 'value2', 'value3_0', 'value4', 'value5_1', 'value6')
('value1', 'value2', 'value3_0', 'value4', 'value5_2', 'value6')
('value1', 'value2', 'value3_0', 'value4', 'value5_3', 'value6')
('value1', 'value2', 'value3_1', 'value4', 'value5_0', 'value6')
('value1', 'value2', 'value3_1', 'value4', 'value5_1', 'value6')
('value1', 'value2', 'value3_1', 'value4', 'value5_2', 'value6')
('value1', 'value2', 'value3_1', 'value4', 'value5_3', 'value6')
</snippet></ROW><ROW><id>19814610</id><snippet>python2.7-dev</snippet></ROW><ROW><id>19814610</id><snippet>sudo apt-get install python2.7-dev
</snippet></ROW><ROW><id>19814610</id><snippet>pip</snippet></ROW><ROW><id>19814620</id><snippet>frame = wx.Frame( None, title="Hello wxPython", style = wx.CLOSE_BOX | wx.CAPTION | wx.RESIZE_BORDER )
</snippet></ROW><ROW><id>19814756</id><snippet>{% if request.user.is_authenticated  %}
</snippet></ROW><ROW><id>19814756</id><snippet>from django.template import RequestContext

def view(request):
    my_data_dictionary = {}
    # code here
    return render_to_response('template.html',
                          my_data_dictionary,
                          context_instance=RequestContext(request))


def view(request):
    # code here
    return render_to_response('template.html', {},
                          context_instance=RequestContext(request))
</snippet></ROW><ROW><id>19814968</id><snippet>fil = open('path/to/file.txt','w')
fil.write(text)
fil.close()
code = os.system("perl rbtokenize.pl path/to/file.txt tmp.out")
if code == 0:
    return ... #Success

# Failed
raise SomethingSensible 
</snippet></ROW><ROW><id>19815385</id><snippet>color_marker = [(c, m) for c in "rgbc" for m in "123"] #assuming there are 12 types of pizza
for cm, i, target_name in zip(color_marker, range(12), pizza_names):
    pl.scatter(X_r[pizza_target == target_name, 0], X_r[pizza_target == target_name, 1], c=cm[0], marker=cm[1], label=target_name)
</snippet></ROW><ROW><id>19815385</id><snippet>pl.scatter</snippet></ROW><ROW><id>19815685</id><snippet>def check(ok, msg, msg_args=()):
  if not ok:
    print msg % msg_args

check(a == 1, "a=1 expected")
check(bugFile == None, "We still have a bugfile = %s", bugFile)
</snippet></ROW><ROW><id>19815685</id><snippet>def check(ok, msg_f):
  if not ok:
    print msg_f()

check(a == 1, lambda: "a=1 expected")
check(bugFile == None, lambda : "We still have a bugfile = %s" % bugFile)
</snippet></ROW><ROW><id>19815685</id><snippet>%</snippet></ROW><ROW><id>19816024</id><snippet>QVBoxLayout</snippet></ROW><ROW><id>19816024</id><snippet>QWidget</snippet></ROW><ROW><id>19816024</id><snippet>    v_widget = QWidget()
    v_widget.setLayout(vlayout)
    v_widget.setFixedWidth(80)
</snippet></ROW><ROW><id>19816086</id><snippet>StringIO</snippet></ROW><ROW><id>19816086</id><snippet>from cStringIO import StringIO

imgfile = StringIO(self.request.get('datafile'))
img = Image.open(imgfile)
</snippet></ROW><ROW><id>19816086</id><snippet>StringIO</snippet></ROW><ROW><id>19816086</id><snippet>PIL</snippet></ROW><ROW><id>19816086</id><snippet>StringIO</snippet></ROW><ROW><id>19816086</id><snippet>imgfile = StringIO()
img.save(imgfile, format='PNG')
imagestring = imgfile.getvalue()
</snippet></ROW><ROW><id>19816311</id><snippet>re.findall</snippet></ROW><ROW><id>19816311</id><snippet>any</snippet></ROW><ROW><id>19816311</id><snippet>theIP = re.findall(r"\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}", request)
if any(ip == '211.125.122.192' for ip in theIP):
    print "You are OK"
else:
    print "BAAD"  

#or simply:

if '211.125.122.192' in theIp:
    print "You are OK"
else:
    print "BAAD"  
</snippet></ROW><ROW><id>19816311</id><snippet>re.search</snippet></ROW><ROW><id>19816311</id><snippet>theIP = re.search(r"\d{1,3}\.\d{1,3}\.\d{1,3}.\d{1,3}", request)
if theIP and (theIP.group() == '211.125.122.192'):
    print "You are OK"
else:
    print "BAAD"  
</snippet></ROW><ROW><id>19816866</id><snippet>label= "Change the\n Address"
</snippet></ROW><ROW><id>19816971</id><snippet>result = session.query(TableA, TableB). \
    join(TableB). \
    filter(TableA.ColumnA == 'something').one()
</snippet></ROW><ROW><id>19816971</id><snippet>del_result_A = session.delete(result.TableA)
del_result_B = session.delete(result.TableB)
session.commit()
</snippet></ROW><ROW><id>19817028</id><snippet>__unicode__</snippet></ROW><ROW><id>19817148</id><snippet>foo = &lt;something complicated&gt;
if foo is None: foo = foo_default
</snippet></ROW><ROW><id>19817148</id><snippet>foo = &lt;something complicated&gt;
foo = foo_default if foo is None else foo
</snippet></ROW><ROW><id>19817148</id><snippet>foo = foo</snippet></ROW><ROW><id>19817148</id><snippet>if foo is None: foo = foo_default</snippet></ROW><ROW><id>19817287</id><snippet>new_file_with_header</snippet></ROW><ROW><id>19817287</id><snippet>ctrl-n</snippet></ROW><ROW><id>19817287</id><snippet>cmd-n</snippet></ROW><ROW><id>19817287</id><snippet># Hello world</snippet></ROW><ROW><id>19817287</id><snippet># -*- coding: utf-8 -*-

def run():
    code_task = get_active_task()
    code_task.new_file(factory_id='canopy.editor.code_editor', editor_type='Python')
    code_editor = code_task.active_editor
    cursor = code_editor.cursor
    cursor.write(u'# Hello world')
    code_editor.autoindent_newline()
</snippet></ROW><ROW><id>19817287</id><snippet># -*- coding: utf-8 -*-
import datetime
def run():
    code_task = get_active_task()
    code_task.new_file(factory_id='canopy.editor.code_editor', editor_type='Python')
    code_editor = code_task.active_editor
    cursor = code_editor.cursor
    cursor.write(u'# Hello world %s' % datetime.datetime.now().strftime("%H-%M-%S"))
    code_editor.autoindent_newline()
</snippet></ROW><ROW><id>19817333</id><snippet>==</snippet></ROW><ROW><id>19817333</id><snippet>a == b
</snippet></ROW><ROW><id>19817333</id><snippet>is</snippet></ROW><ROW><id>19817333</id><snippet>a is b
</snippet></ROW><ROW><id>19817333</id><snippet>is</snippet></ROW><ROW><id>19817333</id><snippet>str(a)==str(b)</snippet></ROW><ROW><id>19817470</id><snippet>\xHH</snippet></ROW><ROW><id>19817470</id><snippet>A</snippet></ROW><ROW><id>19817470</id><snippet>&gt;&gt;&gt; b'\x41'
b'A'
</snippet></ROW><ROW><id>19817470</id><snippet>*</snippet></ROW><ROW><id>19817470</id><snippet>/</snippet></ROW><ROW><id>19817470</id><snippet>&gt;&gt;&gt; hex(ord(b'*'))
'0x2a'
&gt;&gt;&gt; hex(ord(b'/'))
'0x2f'
</snippet></ROW><ROW><id>19817470</id><snippet>binascii.hexlify()</snippet></ROW><ROW><id>19817470</id><snippet>&gt;&gt;&gt; from binascii import hexlify
&gt;&gt;&gt; hexlify(b'\xff\xd8\xff\xe1/\xfeExif\x00\x00MM\x00*\x00\x00\x00\x08\x00\x0b\x01\x0f\x00\x02\x00\x00\x00\x06\x00\x00')
b'ffd8ffe12ffe4578696600004d4d002a00000008000b010f0002000000060000'
</snippet></ROW><ROW><id>19817472</id><snippet>extruded = np.zeros((N, 10,10))
extruded[range(N), cords[:,2], cords[:,0]] = 1

grid = np.zeros((10,10))
for atom, proj in atom_proj.iteritems():
    centers = extruded[atoms==atom].sum(0)
    projected = nd.convolve(centers, proj)
    grid += projected
</snippet></ROW><ROW><id>19817472</id><snippet>2</snippet></ROW><ROW><id>19817472</id><snippet>N</snippet></ROW><ROW><id>19817472</id><snippet>for rot in []</snippet></ROW><ROW><id>19817472</id><snippet>atoms</snippet></ROW><ROW><id>19817472</id><snippet>OP_simplified</snippet></ROW><ROW><id>19817472</id><snippet>import numpy as np
import scipy.ndimage as nd

N = 1000
cords = np.random.randint(3, 7, (N, 3)) #np.array([[5,4,5],[5,4,3],[6,4,6]])
atoms = np.random.choice(list('HC'), N) #np.array([['C'],['H'],['C']])
atom_proj = {'H': np.array([[0,0,0,0,0],
                            [0,0,1,0,0],
                            [0,1,1,1,0],
                            [0,0,1,0,0],
                            [0,0,0,0,0]]),
             'C': np.array([[0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0],
                            [0,0,1,1,1,0,0],
                            [0,0,1,1,1,0,0],
                            [0,0,1,1,1,0,0],
                            [0,0,0,0,0,0,0],
                            [0,0,0,0,0,0,0]])}

def project_atom(cords, atoms, atom_proj):
    extruded = np.zeros((N, 10,10))
    extruded[range(N), cords[:,2], cords[:,0]] = 1
    grid = np.zeros((10,10))
    for atom, proj in atom_proj.iteritems():
        grid += nd.convolve(extruded[atoms.squeeze()==atom].sum(0), proj, mode='constant')
    return grid

def OP_simplified(cords, atoms, atom_proj):
    rads = {atom: (proj.shape[0] - 1)/2 for atom, proj in atom_proj.iteritems()}
    grid = np.zeros((10,10))
    for (x,y,z), atom in zip(cords, atoms):
        rad = rads[atom]
        grid[z-rad:z+rad+1, x-rad:x+rad+1] += atom_proj[atom]
    return grid

def OP(cords, atoms, atom_proj):
    grid = np.zeros((10,10))
    for values in zip(cords, atoms):
        atom_shape = np.shape(atom_proj[values[1][0]])
        rad = (atom_shape[0]-1)/2
        grid[values[0][2]-rad:values[0][2]+rad+1,values[0][0]-rad:values[0][0]+rad+1] += atom_proj[values[1][0]]
    return grid
</snippet></ROW><ROW><id>19817472</id><snippet>In [957]: np.allclose(OP(cords, atoms, atom_proj), project_atom(cords, atoms, atom_proj))
Out[957]: True
</snippet></ROW><ROW><id>19817472</id><snippet>In [907]: N = 1000

In [910]: timeit OP(cords, atoms, atom_proj)
10 loops, best of 3: 30.7 ms per loop

In [911]: timeit project_atom(cords, atoms, atom_proj)
100 loops, best of 3: 2.97 ms per loop

In [913]: N = 10000

In [916]: timeit project_atom(cords, atoms, atom_proj)
10 loops, best of 3: 33.3 ms per loop

In [917]: timeit OP(cords, atoms, atom_proj)
1 loops, best of 3: 314 ms per loop
</snippet></ROW><ROW><id>19817573</id><snippet>figure</snippet></ROW><ROW><id>19817573</id><snippet>axes</snippet></ROW><ROW><id>19817573</id><snippet>fig.axes[1]</snippet></ROW><ROW><id>19817573</id><snippet>fig.axes[1]</snippet></ROW><ROW><id>19817573</id><snippet>colorbar</snippet></ROW><ROW><id>19817573</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = np.random.random((10,10)) # Generate some random data to plot

fig, ax = plt.subplots() # Create a figure with a single axes.
im = ax.imshow(data)     # Display the image data
cbar = fig.colorbar(im)  # Add a colorbar to the figure based on the image
</snippet></ROW><ROW><id>19817573</id><snippet>update_normal</snippet></ROW><ROW><id>19817573</id><snippet>ScalarMappable</snippet></ROW><ROW><id>19817573</id><snippet>imshow</snippet></ROW><ROW><id>19817573</id><snippet>scatter</snippet></ROW><ROW><id>19817573</id><snippet>ContourSet</snippet></ROW><ROW><id>19817573</id><snippet>contour</snippet></ROW><ROW><id>19817573</id><snippet>cbar.update_normal(im)</snippet></ROW><ROW><id>19817573</id><snippet>AxesImage</snippet></ROW><ROW><id>19817573</id><snippet>cbar.set_clim(newimg.min(), newimg.max())
</snippet></ROW><ROW><id>19817681</id><snippet>parser=argparse.ArgumentParser()
parser.add_argument('--dates', nargs=2, metavar=('START DATE','END_DATE'),
                   help='start date and end date in YYYY-MM-DD')
print(parser.format_help())
</snippet></ROW><ROW><id>19817681</id><snippet>usage: stock19805170.py [-h] [--dates START DATE END_DATE]

optional arguments:
  -h, --help            show this help message and exit
  --dates START DATE END_DATE
                        start date and end date in YYYY-MM-DD
</snippet></ROW><ROW><id>19817681</id><snippet>'require these 2  arguments together'</snippet></ROW><ROW><id>19817681</id><snippet>nargs=2</snippet></ROW><ROW><id>19817681</id><snippet>nargs=[0,2]</snippet></ROW><ROW><id>19817681</id><snippet>--dates</snippet></ROW><ROW><id>19817681</id><snippet>tuple metavar</snippet></ROW><ROW><id>19817681</id><snippet>optionals</snippet></ROW><ROW><id>19817826</id><snippet>import mock

ClassMock = mock.MagicMock

class RealClass(ClassMock):

    def lol(self):
        print 'lol'

real = RealClass()
real.lol()  # Does not print lol, but returns another mock

print real # prints &lt;MagicMock id='...'&gt;
</snippet></ROW><ROW><id>19817826</id><snippet>mock.MagicMock</snippet></ROW><ROW><id>19817826</id><snippet>In [2]: inspect.isclass(mock.MagicMock)
Out[2]: True
</snippet></ROW><ROW><id>19817864</id><snippet>\s+$</snippet></ROW><ROW><id>19817864</id><snippet>\s</snippet></ROW><ROW><id>19817864</id><snippet>+</snippet></ROW><ROW><id>19817864</id><snippet>$</snippet></ROW><ROW><id>19817940</id><snippet>L[0]</snippet></ROW><ROW><id>19817940</id><snippet>L[1]</snippet></ROW><ROW><id>19817940</id><snippet>for a, b in itertools.izip_longest(L[0], L[1]):
    print a, b
</snippet></ROW><ROW><id>19817940</id><snippet>a</snippet></ROW><ROW><id>19817940</id><snippet>None</snippet></ROW><ROW><id>19817940</id><snippet>L[1]</snippet></ROW><ROW><id>19817940</id><snippet>L[0]</snippet></ROW><ROW><id>19817940</id><snippet>L[1]</snippet></ROW><ROW><id>19817940</id><snippet>L[0]</snippet></ROW><ROW><id>19817940</id><snippet>2 8
1 4
None 2
None 1
</snippet></ROW><ROW><id>19818057</id><snippet>np.where</snippet></ROW><ROW><id>19818057</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.array([1,2,31,32,4,0,3,0,0,0])
&gt;&gt;&gt; z = np.array([99] * len(x))
&gt;&gt;&gt; y = np.where(x != 0, x, z)
&gt;&gt;&gt; y
array([ 1,  2, 31, 32,  4, 99,  3, 99, 99, 99])
</snippet></ROW><ROW><id>19818462</id><snippet>L1x,,,,,,,
0,1,0,0,0,1,1,
0,0,1,0,0,1,0,
0,0,0,1,0,0,1,
0,0,0,0,1,0,0,
1,1,1,1,1,1,1,
1,1,1,1,1,1,1,
1,1,1,1,1,1,1,
1,1,1,1,1,1,1,
</snippet></ROW><ROW><id>19818462</id><snippet>import pandas
a = pandas.read_csv('temp.csv', names = ["c%d" % i for i in range(8)], skiprows = 1)
a
</snippet></ROW><ROW><id>19818462</id><snippet>   c0  c1  c2  c3  c4  c5  c6  c7
0   0   1   0   0   0   1   1 NaN
1   0   0   1   0   0   1   0 NaN
2   0   0   0   1   0   0   1 NaN
3   0   0   0   0   1   0   0 NaN
4   1   1   1   1   1   1   1 NaN
5   1   1   1   1   1   1   1 NaN
6   1   1   1   1   1   1   1 NaN
7   1   1   1   1   1   1   1 NaN
</snippet></ROW><ROW><id>19818462</id><snippet>a</snippet></ROW><ROW><id>19818462</id><snippet>a.c3
</snippet></ROW><ROW><id>19818462</id><snippet>a[c3]
</snippet></ROW><ROW><id>19818462</id><snippet>0    0
1    0
2    1
3    0
4    1
5    1
6    1
7    1
Name: c3
</snippet></ROW><ROW><id>19818462</id><snippet>a.c0^a.c2
</snippet></ROW><ROW><id>19818462</id><snippet>0    0
1    1
2    0
3    0
4    0
5    0
6    0
7    0
Name: c0
</snippet></ROW><ROW><id>19818518</id><snippet>findall</snippet></ROW><ROW><id>19818518</id><snippet>&gt;&gt;&gt; substring = '(?=AAA)' #or "(?=AAA)"
&gt;&gt;&gt; len(re.findall(substring, string))
&gt;&gt;&gt; 2
</snippet></ROW><ROW><id>19818538</id><snippet>csv1_dict = {  ...,
            "CompanyA productA" : 0,
            "CompanyA productB" : 0,
            ...
            }

csv2_dict = { ...,
            "CompanyA productA" : 10,
              ...
            }
for key,value in csv2_dict.iteritems():
    try:
        csv1_dict[key] = csv2_dict[key]
    except:
        #Key not in csv1
</snippet></ROW><ROW><id>19818585</id><snippet>gatherResults</snippet></ROW><ROW><id>19818585</id><snippet>Deferred</snippet></ROW><ROW><id>19818585</id><snippet>Deferred</snippet></ROW><ROW><id>19818585</id><snippet>addCallback</snippet></ROW><ROW><id>19818585</id><snippet>gatherResults</snippet></ROW><ROW><id>19818585</id><snippet>Deferred</snippet></ROW><ROW><id>19818585</id><snippet>Deferred</snippet></ROW><ROW><id>19818585</id><snippet>gatherResults</snippet></ROW><ROW><id>19818585</id><snippet>Deferred</snippet></ROW><ROW><id>19818585</id><snippet>twisted.internet.task.react</snippet></ROW><ROW><id>19818585</id><snippet>main</snippet></ROW><ROW><id>19818585</id><snippet>def main(reactor):
    """makes a collection of deffered calls and then fires them. Stops reactor at end"""
    deferred_calls = [getDummyData(r) for r in range(0,100)]
    d = defer.gatherResults(deferred_calls, consumeErrors = True)
    d.addCallback(printData)
    return d

if __name__ == "__main__":
    from twisted.internet import task
    task.react(main, [])
</snippet></ROW><ROW><id>19818585</id><snippet>getDummyData</snippet></ROW><ROW><id>19818585</id><snippet>def getDummyData(reactor, x):
    """returns a deferred object that will have a value in some random seconds
    sets up a callLater on the reactor to trgger the callback of d"""
    d = defer.Deferred()
    pause = random.randint(1,10)
    reactor.callLater(pause, d.callback, (x, pause))
    return d

def main(reactor):
    """makes a collection of deffered calls and then fires them. Stops reactor at end"""
    deferred_calls = [getDummyData(reactor, r) for r in range(0,100)]
    d = defer.gatherResults(deferred_calls, consumeErrors = True)
    d.addCallback(printData)
    return d
</snippet></ROW><ROW><id>19818585</id><snippet>twisted.internet.reactor</snippet></ROW><ROW><id>19818585</id><snippet>twisted.internet.task.deferLater</snippet></ROW><ROW><id>19818585</id><snippet>getDummyData</snippet></ROW><ROW><id>19818585</id><snippet>def getDummyData(reactor, x):
    """returns a deferred object that will have a value in some random seconds
    sets up a callLater on the reactor to trgger the callback of d"""
    pause = random.randint(1,10)
    return deferLater(reactor, pause, lambda: (x, pause))
</snippet></ROW><ROW><id>19818671</id><snippet>rules = (
    #categories
        Rule(SgmlLinkExtractor(restrict_xpaths=('//div[@id="categories_block_left"]/div/ul/li/a') ), callback='process', process_links= 'appendDummy', follow=True),

    def process(self,response):
        print 'response is called'
        print response

    def appendDummy(self, links):
        for link in links:
            link.url = link.url +"?dummy=true"
        return links
</snippet></ROW><ROW><id>19818686</id><snippet>random</snippet></ROW><ROW><id>19818686</id><snippet>random = none</snippet></ROW><ROW><id>19818686</id><snippet>global random
</snippet></ROW><ROW><id>19818839</id><snippet>In [31]: df = pd.DataFrame([ {'kw_0' : 0, 'kw_1' : 0, 'kw_2' : 0, 'x' : i, 'y': i} for i in range(10) ])

In [32]: df
Out[32]: 
   kw_0  kw_1  kw_2  x  y
0     0     0     0  0  0
1     0     0     0  1  1
2     0     0     0  2  2
3     0     0     0  3  3
4     0     0     0  4  4
5     0     0     0  5  5
6     0     0     0  6  6
7     0     0     0  7  7
8     0     0     0  8  8
9     0     0     0  9  9

In [33]: df.columns = MultiIndex.from_tuples([('kw',0),('kw',1),('kw',2),('value','x'),('value','y')])

In [34]: df
Out[34]: 
   kw        value   
    0  1  2      x  y
0   0  0  0      0  0
1   0  0  0      1  1
2   0  0  0      2  2
3   0  0  0      3  3
4   0  0  0      4  4
5   0  0  0      5  5
6   0  0  0      6  6
7   0  0  0      7  7
8   0  0  0      8  8
9   0  0  0      9  9
</snippet></ROW><ROW><id>19818839</id><snippet>In [35]: df['kw']
Out[35]: 
   0  1  2
0  0  0  0
1  0  0  0
2  0  0  0
3  0  0  0
4  0  0  0
5  0  0  0
6  0  0  0
7  0  0  0
8  0  0  0
9  0  0  0
</snippet></ROW><ROW><id>19818839</id><snippet>In [36]: df.loc[1,'kw'] = [4,5,6]

In [37]: df
Out[37]: 
   kw        value   
    0  1  2      x  y
0   0  0  0      0  0
1   4  5  6      1  1
2   0  0  0      2  2
3   0  0  0      3  3
4   0  0  0      4  4
5   0  0  0      5  5
6   0  0  0      6  6
7   0  0  0      7  7
8   0  0  0      8  8
9   0  0  0      9  9
</snippet></ROW><ROW><id>19818942</id><snippet>first</snippet></ROW><ROW><id>19818942</id><snippet>In [14]: df.groupby('Mt').first()
Out[14]: 
   Sp  Value  count
Mt                 
s1  a      1      3
s2  c      3      5
s3  f      6      6
</snippet></ROW><ROW><id>19818942</id><snippet>as_index=False</snippet></ROW><ROW><id>19818942</id><snippet>In [28]: df.groupby('Mt', as_index=False).first()
Out[28]: 
   Mt Sp  Value  count
0  s1  a      1      3
1  s2  c      3      5
2  s3  f      6      6 
</snippet></ROW><ROW><id>19818942</id><snippet>In [196]: df.sort('count', ascending=False).groupby('Mt', as_index=False).first()
Out[196]: 
   Mt Sp  Value  count
0  s1  a      1      3
1  s2  e      5     10
2  s3  f      6      6
</snippet></ROW><ROW><id>19818966</id><snippet>any()</snippet></ROW><ROW><id>19818966</id><snippet>any(func(i) for i in big_list)
</snippet></ROW><ROW><id>19818966</id><snippet>func(i)</snippet></ROW><ROW><id>19818966</id><snippet>True</snippet></ROW><ROW><id>19818966</id><snippet>and</snippet></ROW><ROW><id>19818966</id><snippet>all()</snippet></ROW><ROW><id>19818966</id><snippet>all(func(i) for i in big_list)
</snippet></ROW><ROW><id>19818966</id><snippet>False</snippet></ROW><ROW><id>19818966</id><snippet>func(i)</snippet></ROW><ROW><id>19818966</id><snippet>(func(i) for i in big_list)
</snippet></ROW><ROW><id>19818966</id><snippet>func(i)</snippet></ROW><ROW><id>19818966</id><snippet>reduce(operator.or_, [func(1), func(0)])</snippet></ROW><ROW><id>19818966</id><snippet>reduce()</snippet></ROW><ROW><id>19818966</id><snippet>reduce()</snippet></ROW><ROW><id>19818966</id><snippet>reduce()</snippet></ROW><ROW><id>19818966</id><snippet>or</snippet></ROW><ROW><id>19818966</id><snippet>and</snippet></ROW><ROW><id>19818966</id><snippet>reduce()</snippet></ROW><ROW><id>19819200</id><snippet>userDecimals</snippet></ROW><ROW><id>19819200</id><snippet>precision</snippet></ROW><ROW><id>19819200</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; userDecimals = 6
&gt;&gt;&gt; '{:.{}f}'.format(math.sqrt(1 - .1 **2), userDecimals)
'0.994987'
&gt;&gt;&gt; userDecimals = 10
&gt;&gt;&gt; '{:.{}f}'.format(math.sqrt(1 - .1 **2), userDecimals)
'0.9949874371'
</snippet></ROW><ROW><id>19819472</id><snippet>OrderedDict</snippet></ROW><ROW><id>19819472</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; import collections
&gt;&gt;&gt; for item in itertools.permutations(test.items()):
...     print collections.OrderedDict(item)
...
OrderedDict([('three', 3), ('two', 2), ('one', 1)])
OrderedDict([('three', 3), ('one', 1), ('two', 2)])
OrderedDict([('two', 2), ('three', 3), ('one', 1)])
OrderedDict([('two', 2), ('one', 1), ('three', 3)])
OrderedDict([('one', 1), ('three', 3), ('two', 2)])
OrderedDict([('one', 1), ('two', 2), ('three', 3)])
</snippet></ROW><ROW><id>19819545</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; l = os.listdir()
&gt;&gt;&gt; print (l)
['DLLs', 'Doc', 'google-python-exercises', 'include', 'Lib', 'libs', 'LICENSE.txt', 'NEWS.txt', 'python.exe', 'pythonw.e
xe', 'README.txt', 'tcl', 'Tools', 'VS2010Cmd.lnk']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19819545</id><snippet>result = []
process = subprocess.Popen('dir', 
    shell=True, 
    stdout=subprocess.PIPE, 
    stderr=subprocess.PIPE )
for line in process.stdout:
    result.append(line)
errcode = process.returncode
for line in result:
    print(line)
</snippet></ROW><ROW><id>19819788</id><snippet>def start():
   print ("hello")
def litroom():
   start()
start()
</snippet></ROW><ROW><id>19819788</id><snippet>ex36</snippet></ROW><ROW><id>19819788</id><snippet>import ex36</snippet></ROW><ROW><id>19819788</id><snippet>from ex36 import litroom</snippet></ROW><ROW><id>19819788</id><snippet>def start():
   print ("hello")
def litroom():
   start()

if __name__=='__main__':
   # magix trick : name value is the name of the file 
   # unless run as the "main" script where it's __main__
   start()
</snippet></ROW><ROW><id>19819855</id><snippet>i</snippet></ROW><ROW><id>19819855</id><snippet>l[i-1] &lt; l[i]</snippet></ROW><ROW><id>19819855</id><snippet>l[i] &gt; l[i+1]</snippet></ROW><ROW><id>19819855</id><snippet>N -&gt; N</snippet></ROW><ROW><id>19819855</id><snippet>#! /usr/bin/python3.2

def sign(x): return 0 if not x else x // abs(x)

def extrema (l):
    return [l[0]] + [e for i, e in enumerate(l[:-1]) if i and sign(e-l[i-1])==sign(e-l[i+1])] + [l[-1]]

l1 = [1, 3, 9, 1, 2, 7, 8]
print (extrema (l1))
</snippet></ROW><ROW><id>19819883</id><snippet>ord('\xff')
</snippet></ROW><ROW><id>19819883</id><snippet>\x##</snippet></ROW><ROW><id>19819883</id><snippet>"FF"</snippet></ROW><ROW><id>19819883</id><snippet>int(my_string,16)</snippet></ROW><ROW><id>19819883</id><snippet>ord</snippet></ROW><ROW><id>19819883</id><snippet>len('\xFF')</snippet></ROW><ROW><id>19819989</id><snippet>&gt;&gt;&gt; alist = [6,8,3,4,5]
&gt;&gt;&gt; [x for x in alist if x != 8]
[6, 3, 4, 5]
&gt;&gt;&gt; alist = [6,8,8,3,4,5]
&gt;&gt;&gt; [x for x in alist if x != 8]
[6, 3, 4, 5]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19820137</id><snippet>def column_label(column_number):
    column_labels = []
    column_number = column_number + 1
    while column_number &gt; 0:
        column_number, modulo = divmod(column_number - 1, 26)
        column_labels.append(string.uppercase[modulo])
    return ''.join(reversed(column_labels))
</snippet></ROW><ROW><id>19820160</id><snippet>try..except</snippet></ROW><ROW><id>19820160</id><snippet>except</snippet></ROW><ROW><id>19820160</id><snippet>try</snippet></ROW><ROW><id>19820160</id><snippet>if</snippet></ROW><ROW><id>19820160</id><snippet>    if encrypt == 'e':
        ...
    elif encrypt == 'd':
        ...
    elif encrypt == 'q':
        break
    else:
        print("")
        print("INCORRECT INPUT!")
        print("")
</snippet></ROW><ROW><id>19820160</id><snippet>else</snippet></ROW><ROW><id>19820160</id><snippet>elif</snippet></ROW><ROW><id>19820160</id><snippet>elif</snippet></ROW><ROW><id>19820160</id><snippet>if</snippet></ROW><ROW><id>19820160</id><snippet>elif</snippet></ROW><ROW><id>19820160</id><snippet>if</snippet></ROW><ROW><id>19820160</id><snippet>else</snippet></ROW><ROW><id>19820160</id><snippet>encrypt != "q"</snippet></ROW><ROW><id>19820206</id><snippet>def safe_decorator(func):
    def wrapper(self, *args):
        result = func(self, *args)
        if result is None:
            raise ValueError()
        return result
    return wrapper

MyClass.my_method = safe_decorator(MyClass.my_method)
</snippet></ROW><ROW><id>19820206</id><snippet>@</snippet></ROW><ROW><id>19820210</id><snippet>sort</snippet></ROW><ROW><id>19820210</id><snippet>#! /usr/bin/python3.2

#here you should actually use the csv module for parsing your data
#make sure that there are actually tabs between the columns
a = '''Row Box Description
17\t3\tC. trach clone
14\t6\tOMP A E Coli
1\t6\tR 19 15
2\t5\t11 Black Ring
1\t1\tL. Pneumo'''
data = [x.split('\t') for x in a.split('\n')[1:]]

data = sorted(data, key = lambda x: (int(x[0]), int(x[1])))
print('\n'.join('\t'.join(row) for row in data))
</snippet></ROW><ROW><id>19820380</id><snippet>class Pane():

    def __init__(self, textToDisplay, coordinates, screen):
         ...
        self.screen = screen

    def drawPane(self):
        self.Screen.... # &lt;&lt;&lt; HERE
</snippet></ROW><ROW><id>19820387</id><snippet>&gt;&gt;&gt; df = pd.DataFrame(np.random.randn(6),index=dates,columns=list('A'))
&gt;&gt;&gt; df.index = df.index + pd.DateOffset(days=15)
&gt;&gt;&gt; df
                   A
2013-01-16  0.015282
2013-01-17  1.214255
2013-01-18  1.023534
2013-01-19  1.355001
2013-01-20  1.289749
2013-01-21  1.484291
</snippet></ROW><ROW><id>19820399</id><snippet>str.format</snippet></ROW><ROW><id>19820399</id><snippet>.*</snippet></ROW><ROW><id>19820399</id><snippet>&gt;&gt;&gt; from re import findall
&gt;&gt;&gt; name = 'Kalvo'
&gt;&gt;&gt; info = 'PC1:\nKalvo (Read)(Write)\nKL27 (Read)(Write)'
&gt;&gt;&gt; findall("{}.*".format(name), info)[0]
'Kalvo (Read)(Write)'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19820480</id><snippet>d = {a: [b for b in listB if function(a, b)] for a in listA}
</snippet></ROW><ROW><id>19820480</id><snippet>def function(a, b): return a &lt; b</snippet></ROW><ROW><id>19820495</id><snippet>In [35]: ts
Out[35]: 
2012-01-01 00:00:00    127
2012-01-01 00:00:01    452
2012-01-01 00:00:02    231
2012-01-01 00:00:03    434
2012-01-01 00:00:04    139
2012-01-01 00:00:05    223
2012-01-01 00:00:06    409
2012-01-01 00:00:07    101
2012-01-01 00:00:08      3
2012-01-01 00:00:09    393
2012-01-01 00:00:10    208
2012-01-01 00:00:11    416
2012-01-01 00:00:12    136
2012-01-01 00:00:13    343
2012-01-01 00:00:14    387
...
2012-01-01 00:01:25    307
2012-01-01 00:01:26    267
2012-01-01 00:01:27    199
2012-01-01 00:01:28    479
2012-01-01 00:01:29    423
2012-01-01 00:01:30    334
2012-01-01 00:01:31    442
2012-01-01 00:01:32    282
2012-01-01 00:01:33    289
2012-01-01 00:01:34    166
2012-01-01 00:01:35      4
2012-01-01 00:01:36    306
2012-01-01 00:01:37    165
2012-01-01 00:01:38    415
2012-01-01 00:01:39    316
Freq: S, Length: 100

In [37]: ts.resample('t', how='mean')
Out[37]: 
2012-01-01 00:00:00    270.166667
2012-01-01 00:01:00    221.400000
Freq: T, dtype: float64
</snippet></ROW><ROW><id>19820495</id><snippet>hour</snippet></ROW><ROW><id>19820495</id><snippet>In [38]: g = ts.groupby(lambda x: x.minute)

In [39]: g
Out[39]: &lt;pandas.core.groupby.SeriesGroupBy object at 0x107045150&gt;
</snippet></ROW><ROW><id>19820613</id><snippet>nature</snippet></ROW><ROW><id>19820691</id><snippet>from PyQt4 import QtGui, QtCore

class Window(QtGui.QWidget):
    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.list = QtGui.QTreeWidget(self)
        self.list.setRootIsDecorated(False)
        self.list.setUniformRowHeights(True)
        self.list.setAllColumnsShowFocus(True)
        self.list.setItemsExpandable(False)
        self.list.header().hide()
        self.list.setColumnCount(2)
        for label, color in (
            ('v=x**2', 'red'),
            ('v=x/2', 'blue'),
            ('v=2*x', 'green'),
            ('v=3*2', 'orange'),
            ('v=5-x', 'purple'),
            ):
            item = QtGui.QTreeWidgetItem([label, '------------'])
            item.setForeground(1, QtGui.QColor(color))
            self.list.addTopLevelItem(item)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.list)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.setGeometry(500, 300, 300, 200)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>19820725</id><snippet>__str__</snippet></ROW><ROW><id>19820725</id><snippet>Test</snippet></ROW><ROW><id>19820725</id><snippet>object</snippet></ROW><ROW><id>19820725</id><snippet>&gt;&gt;&gt; print type(t)
&lt;type 'instance'&gt;
</snippet></ROW><ROW><id>19820725</id><snippet>object</snippet></ROW><ROW><id>19820725</id><snippet>object</snippet></ROW><ROW><id>19820725</id><snippet>__str__</snippet></ROW><ROW><id>19820725</id><snippet>instance</snippet></ROW><ROW><id>19820725</id><snippet>__str__</snippet></ROW><ROW><id>19820725</id><snippet>&gt;&gt;&gt; print type(t).__str__
&lt;slot wrapper '__str__' of 'object' objects&gt;
</snippet></ROW><ROW><id>19821147</id><snippet>set(open(filename) for filename in new_filenames)
</snippet></ROW><ROW><id>19821296</id><snippet>t_DOUBLE_VAL</snippet></ROW><ROW><id>19821296</id><snippet>t_DOUBLE_VAL</snippet></ROW><ROW><id>19821296</id><snippet>def t_DOUBLE_VAL(t):
    '[-+]?[0-9]+(\.([0-9]+)?([eE][-+]?[0-9]+)?|[eE][-+]?[0-9]+)'
    return t
</snippet></ROW><ROW><id>19821347</id><snippet>while</snippet></ROW><ROW><id>19821347</id><snippet>shift = 0
while 1 &gt; shift or 26 &lt; shift:
    try:
        # Swap raw_input for input in Python 3.x
        shift = int(raw_input("Please enter your shift (1 - 26) : "))
    except ValueError:
        # Remember, print is a function in 3.x
        print "That wasn't an integer :("
</snippet></ROW><ROW><id>19821347</id><snippet>try-except</snippet></ROW><ROW><id>19821347</id><snippet>int()</snippet></ROW><ROW><id>19821347</id><snippet>ValueError</snippet></ROW><ROW><id>19821347</id><snippet>a</snippet></ROW><ROW><id>19821347</id><snippet>raw_input()</snippet></ROW><ROW><id>19821347</id><snippet>input()</snippet></ROW><ROW><id>19821466</id><snippet>filter_indices = [1,3,5]
print numpy.array([11,13,155,22,0xff,32,56,88])[filter_indices] 
</snippet></ROW><ROW><id>19821568</id><snippet>/foo/</snippet></ROW><ROW><id>19821568</id><snippet>/foo</snippet></ROW><ROW><id>19821568</id><snippet>WSGIApplication</snippet></ROW><ROW><id>19821568</id><snippet>www.bar.com/foo</snippet></ROW><ROW><id>19821568</id><snippet>www.bar.com/foo.html</snippet></ROW><ROW><id>19821568</id><snippet>/foo</snippet></ROW><ROW><id>19821568</id><snippet>/foo.*</snippet></ROW><ROW><id>19821568</id><snippet>WSGIApplication</snippet></ROW><ROW><id>19821568</id><snippet>- url: /foo\.html</snippet></ROW><ROW><id>19821721</id><snippet>MUTATE</snippet></ROW><ROW><id>19821721</id><snippet>Call</snippet></ROW><ROW><id>19821721</id><snippet>__throwaway_service</snippet></ROW><ROW><id>19821721</id><snippet>self</snippet></ROW><ROW><id>19821721</id><snippet>MUTATE</snippet></ROW><ROW><id>19821721</id><snippet>@celery.task
def mutate(service_settings, operations):
    service = Service(**service_settings)
    return service.mutate(operations)
</snippet></ROW><ROW><id>19821774</id><snippet>(?:</snippet></ROW><ROW><id>19821774</id><snippet>re.I</snippet></ROW><ROW><id>19821774</id><snippet>import re

def find_t(text):
    return re.search(r'\d{2}:\d{2}(?:am|pm)', text, re.I).group()
</snippet></ROW><ROW><id>19821774</id><snippet>re.findall()</snippet></ROW><ROW><id>19821774</id><snippet>def find_t(text):
    return re.findall(r'\d{2}:\d{2}(?:am|pm)', text, re.I)
</snippet></ROW><ROW><id>19821774</id><snippet>demo</snippet></ROW><ROW><id>19821921</id><snippet>def linspace(start, stop, num=50, endpoint=True, retstep=False):
    ...
    if endpoint:
        if num == 1:
            return array([float(start)])
        step = (stop-start)/float((num-1))
        y = _nx.arange(0, num) * step + start   #&lt;-- the first point is `start`
        y[-1] = stop   # &lt;-- the last point is `stop`
    ...
    return y
</snippet></ROW><ROW><id>19821921</id><snippet>endpoints</snippet></ROW><ROW><id>19821921</id><snippet>start</snippet></ROW><ROW><id>19821921</id><snippet>stop</snippet></ROW><ROW><id>19821921</id><snippet>endpoints=True</snippet></ROW><ROW><id>19821921</id><snippet>np.linspace</snippet></ROW><ROW><id>19821921</id><snippet>num</snippet></ROW><ROW><id>19821921</id><snippet>In [8]: np.linspace(0, 1, num=0)
Out[8]: array([], dtype=float64)

In [9]: np.linspace(0, 1, num=1)
Out[9]: array([ 0.])
</snippet></ROW><ROW><id>19821961</id><snippet>&gt;&gt;&gt; showslist = ("test 2", "test 4", "test 1", "test 9", "test 10", "test 11", "test 6", "test 3")
&gt;&gt;&gt; sorted(showslist, key=lambda item: int(item.split()[1]))
['test 1', 'test 2', 'test 3', 'test 4', 'test 6', 'test 9', 'test 10', 'test 11']
</snippet></ROW><ROW><id>19821961</id><snippet>partition</snippet></ROW><ROW><id>19821961</id><snippet>&gt;&gt;&gt; sorted(showslist, key=lambda item: int(item.partition(' ')[2]))
['test 1', 'test 2', 'test 3', 'test 4', 'test 6', 'test 9', 'test 10', 'test 11']
</snippet></ROW><ROW><id>19821961</id><snippet>item</snippet></ROW><ROW><id>19821961</id><snippet>&gt;&gt;&gt; showslist = ("test 2", "test 4", "oops no number here", "test 3")
&gt;&gt;&gt; sorted(showslist, key=lambda item: int(item.partition(' ')[2]) if ' ' in item and item.partition(' ')[2].isdigit() else float('inf'))
['test 2', 'test 3', 'test 4', 'oops no number here']
</snippet></ROW><ROW><id>19821961</id><snippet>def getValue(x):
    a,_,b = x.partition(" ")
    if not b.isdigit():
        return (float("inf"), x)
    return (a, int(b))

showslist = ("Atest 2", "Atest 4", "Atest 1", "Atest 9", "Atest 10", "Btest 11", "Btest 6", "Ctest 3")
print sorted(showslist, key=getValue)
#result: ['Atest 1', 'Atest 2', 'Atest 4', 'Atest 9', 'Atest 10', 'Btest 6', 'Btest 11', 'Ctest 3']
</snippet></ROW><ROW><id>19821961</id><snippet>print sorted(showslist, key= lambda x: (lambda a, _, b: (a, int(b)) if b.isdigit() else (float("inf"), x))(*x.partition(" ")))
</snippet></ROW><ROW><id>19821996</id><snippet>split()</snippet></ROW><ROW><id>19821996</id><snippet>first_list, secnd_list = [], []
for line in file:
    first, second = line.split('/')
    first_list.append(first)
    secnd_list.append(second)
</snippet></ROW><ROW><id>19821996</id><snippet>/</snippet></ROW><ROW><id>19821996</id><snippet>split('/')</snippet></ROW><ROW><id>19821996</id><snippet>split('/', 1)</snippet></ROW><ROW><id>19822033</id><snippet>for tr in soup.find_all('tr')[1:]:
    tds = tr.find_all('td')
    print tds[1].text.strip()
</snippet></ROW><ROW><id>19822033</id><snippet>domains = [tr.find_all('td')[1].text.strip() for tr in soup.find_all('tr')[1:]]
</snippet></ROW><ROW><id>19822094</id><snippet>import csv

data={}
with open('/tmp/text.txt') as fin:
    reader=csv.reader(fin, skipinitialspace=True, quotechar="'")
    for row in reader:
        data[row[0]]=row[1:]

print(data)       
# {'Lisa plowed ': ['1A', 'field', 'field', 'field', 'field', 'field'], 'Tracy freed ': ['1A', 'animals', 'fish', 'slaves', 'slaves', 'slaves'], 'Paul alleged ': ['1A', 'truth', 'crime', 'facts', 'infidelity', 'incident'], 'John greased ': ['1A', 'axle', 'wheel', 'wheels', 'wheel', 'engine']}
</snippet></ROW><ROW><id>19822112</id><snippet>{x.pk:x for x in Blog.objects.all()}
</snippet></ROW><ROW><id>19822112</id><snippet>dict((x.pk, x) for x in Blog.objects.all())
</snippet></ROW><ROW><id>19822175</id><snippet>class Tools(object):

    def __init__(self):
        self.ZERO = self.toFloat('0.0')

    def toFloat(self, val):
        return float(val)

tools=Tools()
print tools.ZERO
</snippet></ROW><ROW><id>19822290</id><snippet>post_save</snippet></ROW><ROW><id>19822290</id><snippet>NewMessage</snippet></ROW><ROW><id>19822290</id><snippet>from django.db.models.signals import post_save

def update_thread(sender, **kwargs):
    instance = kwargs['instance']
    created = kwargs['created']
    raw = kwargs['raw']
    if created and not raw:
        instance.thread.last_message_time = instance.datetime
        instance.thread.save()

post_save.connect(update_thread, sender=NewMessage)
</snippet></ROW><ROW><id>19822290</id><snippet>save</snippet></ROW><ROW><id>19822290</id><snippet>NewMessage</snippet></ROW><ROW><id>19822366</id><snippet>urllib.pyc</snippet></ROW><ROW><id>19822366</id><snippet>Python/lib</snippet></ROW><ROW><id>19822424</id><snippet>q = 'MV0346FDG-PFHTGE-CFSGD-22205-C0'
q[:q.rfind('-')]
'MV0346FDG-PFHTGE-CFSGD-22205'
</snippet></ROW><ROW><id>19822729</id><snippet>warnings.filterwarnings('ignore', category=MySQLdb.Warning)
</snippet></ROW><ROW><id>19822729</id><snippet>SHOW WARNINGS;</snippet></ROW><ROW><id>19822729</id><snippet>warnings.py</snippet></ROW><ROW><id>19823001</id><snippet>__getattr__</snippet></ROW><ROW><id>19823001</id><snippet>class Monster(object):
    def __init__(self, traits):
        self._traits = traits

    def __getattr__(self, name):
        if name in self._traits:
            return self._traits[name]
        raise AttributeError(name)
</snippet></ROW><ROW><id>19823001</id><snippet>class Monster(object):
    def __init__(self, traits):
        self.__dict__.update(traits)
</snippet></ROW><ROW><id>19823120</id><snippet>import fcntl, serial

s = serial.Serial(0)
fcntl.flock(s.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
</snippet></ROW><ROW><id>19823120</id><snippet>LOCK_EX</snippet></ROW><ROW><id>19823120</id><snippet>LOCK_NB</snippet></ROW><ROW><id>19823120</id><snippet>IOError</snippet></ROW><ROW><id>19823120</id><snippet>BlockingIOError</snippet></ROW><ROW><id>19823120</id><snippet>def available_ttys():
    for tty in serial.tools.list_ports.comports():
        try:
            port = serial.Serial(port=tty[0])
            if port.isOpen():
                try:
                    fcntl.flock(port.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
                except IOError:
                    print 'Port {0} is busy'.format(tty)
                else:
                    yield port
        except serial.SerialException as ex:
            print 'Port {0} is unavailable: {1}'.format(tty, ex)
</snippet></ROW><ROW><id>19823178</id><snippet>&lt;?php
$con=mysqli_connect("yourServerUrl","username","password","databaseName");

// Check connection
if (mysqli_connect_errno($con))
{
    echo "Failed to connect to MySQL: " . mysqli_connect_error();
}
else
{
    // Do Queries and output here

    /* Part 1, output Serial Numbers - note this will output all serial numbers, 
       which might not be desirable */

    // Get the serial numbers
    $result = mysqli_query($con,"SELECT serialNumberColumnName FROM SerialNumberTable");

    // count results, you need this later for the data/stat portion
    $totalResults = mysqli_num_rows($result);

    // Output Serial Numbers
    while($row = mysqli_fetch_array($result))
    {
        echo $row['serialNumberColumnName'];
        echo '&lt;br /&gt;';
    }

    /* Part 2, output Serial Number prefix percentages - repeat this for each 'class' */

    // Do the Query
    $result = mysqli_query($con,"SELECT serialNumberColumnName FROM SerialNumberTable WHERE serialNumberColumnName like 'HHH%'");
    $resultQty = mysqli_num_rows($result);

    // Output Figure
    $percentage = ($resultQty / $totalResults) * 100;
    echo "$percentage s/n is HHH class. &lt;br /&gt;";

}

// Close Connection to database
mysqli_close($con);
?&gt;
</snippet></ROW><ROW><id>19823186</id><snippet>import json
import urllib2
#Read file and print a line
webFD = urllib2.urlopen("http://rasinsrv07.cstcis.cti.depaul.edu/CSC455/assignment4.txt")
tweets = webFD.readlines()

for tweet in tweets:
    print tweet


    #create dictionary
    try:
        dictt = json.loads(tweet)
    except ValueError:
        continue

    #print dictionary
    print dictt.keys()

    #print values
    print dictt.values()



    #loop through tweets
    for (key, value) in dictt.items():
        print key, '-&gt;', value


    #Created the DB
    import sqlite3

    conn = sqlite3.connect('twitter.db')
    c = conn.cursor()

    #Created the table for the tweets
    c.execute("CREATE TABLE IF NOT EXISTS Tweet(created_at, id, text, source,    in_reply_to_user_ID,retweet_Count)")

    #*** Here is a possible solution ***
    c.execute('INSERT INTO Tweet VALUES (?, ?, ?, ?, ?, ?)',
          (dictt['created_at'], dictt["id"], dictt["text"], dictt['source'], dictt['in_reply_to_user_id'],
           dictt['retweet_count']))
    conn.commit()
    conn.close()
</snippet></ROW><ROW><id>19823231</id><snippet>addres</snippet></ROW><ROW><id>19823231</id><snippet>pep</snippet></ROW><ROW><id>19823231</id><snippet>&gt;&gt;&gt; mylist = [[0, 4, 6, 1], 102]
&gt;&gt;&gt; list2 = [[3, 1, 2], 205]
&gt;&gt;&gt; addres(mylist, list2)
[[0, 4, 6, 1, 3, 1, 2], 307]
&gt;&gt;&gt; mylist
[[0, 4, 6, 1, 3, 1, 2], 307]
</snippet></ROW><ROW><id>19823231</id><snippet>addres</snippet></ROW><ROW><id>19823408</id><snippet>GetModuleHandle</snippet></ROW><ROW><id>19823408</id><snippet>LoadLibrary</snippet></ROW><ROW><id>19823464</id><snippet>#!/usr/local/cpython-3.3/bin/python

# "A1","Address2"          "A1","Address2"
# 0138,"DEERFIELD AVE"     0138,"DEERFIELD"
# 0490,"REMMINGTON COURT"  0490,"REMMINGTON"
# 2039,"SANDHILL DR"       2039,"SANDHILL"

import re
import csv

with open('aa_street.txt', 'r') as infile, open('actual-output', 'w') as outfile:
    reader = csv.reader(infile)
    writer = csv.writer(outfile)
    for row in reader:
        row_zero = row[0]
        row_one = re.sub('\s+(DR|COURT|AVE|)\s*$', '', row[1])
        writer.writerow([row_zero, row_one])
</snippet></ROW><ROW><id>19823714</id><snippet>import subprocess
f = open('b','a')
subprocess.call('ls', stdout=f)
print f.closed
</snippet></ROW><ROW><id>19823714</id><snippet>False
</snippet></ROW><ROW><id>19823757</id><snippet>fastaseq</snippet></ROW><ROW><id>19823757</id><snippet>with open(fastaname,'r') as fastafile:
    with open(blastfilename,'r') as blastfile:
        for line in blastfile:
            fastaseq = '' # or whatever data type this is 
            while True:  
                fastaline = fastafile.readline()[:-1]  
                if fastaline[0]=='&gt;':  
                    break  
            fastaseq += fastaline
        somefunction(line,fastaseq)
</snippet></ROW><ROW><id>19823923</id><snippet>pd.merge</snippet></ROW><ROW><id>19823923</id><snippet>import pandas as pd

df1 = pd.DataFrame({'c1':['a','b','c','d'], 'c2':['x','y','y','x']})
df2 = pd.DataFrame({'c1':['d','c','a','b'], 'val1':[12,31,14,34], 'val2':[4,3,1,2]})

df1 = pd.merge(df1, df2, on=['c1'])
print(df1)
</snippet></ROW><ROW><id>19823923</id><snippet>  c1 c2  val1  val2
0  a  x    14     1
1  b  y    34     2
2  c  y    31     3
3  d  x    12     4
</snippet></ROW><ROW><id>19824002</id><snippet>select()</snippet></ROW><ROW><id>19824002</id><snippet>PeriodicCallback</snippet></ROW><ROW><id>19824004</id><snippet>1. {News: 0.8, Sports: 0.5}
2. {News: 0.1, Sports: 0.8}
</snippet></ROW><ROW><id>19824004</id><snippet>w1</snippet></ROW><ROW><id>19824004</id><snippet>w1</snippet></ROW><ROW><id>19824004</id><snippet>P(w1 | News) = (5*0.8 + 2*0.1) / (#of weighted occurrences of all words in all your News docs)
P(w1 | Sports) = (5*0.5 + 2*0.8) / (# weighted occurrences of all words in all your Sports docs)
</snippet></ROW><ROW><id>19824065</id><snippet>controller.stdin.write('\n')
</snippet></ROW><ROW><id>19824065</id><snippet>controller.stdin.flush()
</snippet></ROW><ROW><id>19824285</id><snippet>np.frompyfunc</snippet></ROW><ROW><id>19824285</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def f(x, y):

    DD = np.matrix([[0., 0.],[0., 0.]]) + 0.j
    omega = x + 1.j * y

    # set up dispersion matrix
    DD[0,0] = 1 + omega
    DD[1,0] = omega
    DD[0,1] = omega
    DD[1,1] = 1 - omega

    metric = np.linalg.det(DD)

    return metric
f = np.frompyfunc(f, 2, 1)

xx = np.arange(1., 2., 0.1)
yy = np.arange(1., 2., 0.1)
x, y = np.meshgrid(xx, yy)

FPlot = f(x, y)

plt.contourf(x, y, FPlot)  # Note that this is only using the real part of FPlot
plt.show()
</snippet></ROW><ROW><id>19824491</id><snippet>b1</snippet></ROW><ROW><id>19824491</id><snippet>&gt;&gt;&gt; '88  89 '.split(' ')
['88', '', '89', '']
</snippet></ROW><ROW><id>19824491</id><snippet>int()</snippet></ROW><ROW><id>19824491</id><snippet>&gt;&gt;&gt; int('')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: ''
</snippet></ROW><ROW><id>19824491</id><snippet>str.split()</snippet></ROW><ROW><id>19824491</id><snippet>&gt;&gt;&gt; '88  89 '.split()
['88', '89']
</snippet></ROW><ROW><id>19824491</id><snippet>def lab8():
    userinput= "Lab8.txt"
    lenoffile= len(userinput)
    print "There is", lenoffile, "lines"
    File= open (userinput, "r")
    studentscores1= File.read()
    studentlist= studentscores1.split("\n")
    return studentlist, lenoffile
</snippet></ROW><ROW><id>19824491</id><snippet>lenoffile</snippet></ROW><ROW><id>19824491</id><snippet>'Lab8.txt'</snippet></ROW><ROW><id>19824491</id><snippet>8</snippet></ROW><ROW><id>19824491</id><snippet>outputfile = raw_input("What is the output filename? :")

with open('Lab8.txt') as infile, open(outputfile, 'w') as outtfile:
    for name in infile:
        scores = next(infile).split()  # next() grabs the next line from infile here
        scores = map(int, scores)

        quiztotal = sum(scores[:4]) / 5
        midtermtotal = sum(scores[5:7]) / 2
        finaltotal = scores[7]
        score = quiztotal * .3 + midtermtotal * .4 + finaltotal * .3

        outfile.write(name)
        outfile.write('{0:0.2f}\n'.format(score))
</snippet></ROW><ROW><id>19824604</id><snippet>x</snippet></ROW><ROW><id>19824604</id><snippet>the_list"</snippet></ROW><ROW><id>19824604</id><snippet>the_list</snippet></ROW><ROW><id>19824604</id><snippet>x</snippet></ROW><ROW><id>19824604</id><snippet>" ".join(c)</snippet></ROW><ROW><id>19824604</id><snippet>"a b c d e f g"</snippet></ROW><ROW><id>19824604</id><snippet>the_valid_words</snippet></ROW><ROW><id>19824604</id><snippet>if the_join==the_valid_words</snippet></ROW><ROW><id>19824604</id><snippet>the_valid_words,</snippet></ROW><ROW><id>19824604</id><snippet>any_word</snippet></ROW><ROW><id>19824604</id><snippet>x</snippet></ROW><ROW><id>19824604</id><snippet>x</snippet></ROW><ROW><id>19824604</id><snippet>x</snippet></ROW><ROW><id>19824604</id><snippet>x</snippet></ROW><ROW><id>19824604</id><snippet>the_list</snippet></ROW><ROW><id>19824604</id><snippet>x</snippet></ROW><ROW><id>19824604</id><snippet>for every in the_list:</snippet></ROW><ROW><id>19824604</id><snippet>x</snippet></ROW><ROW><id>19824624</id><snippet>glob</snippet></ROW><ROW><id>19824624</id><snippet>import os
import glob

filename = glob.glob(os.path.join(folder, name + '.*'))[0]
</snippet></ROW><ROW><id>19824624</id><snippet>filename = next(glob.iglob(os.path.join(folder, name + '.*')))
</snippet></ROW><ROW><id>19824994</id><snippet>supervisor-py3k</snippet></ROW><ROW><id>19824994</id><snippet>supervisord</snippet></ROW><ROW><id>19824994</id><snippet>supervisord</snippet></ROW><ROW><id>19825052</id><snippet>infile = open('entrada', 'r')

animals = 0
safe_animals = 0
dangerous_animals = 0

for line in infile:
    line_components = line.strip().split()
    if line_components:
        animals += 1

        if line_components[3] == 'dangerous':
            dangerous_animals += 1
        elif line_components[3] == 'safe' and line_components[1] == 'large':
            safe_animals += 1

print "%i animals" % animals
print "%i safe animals" % safe_animals
print "%i dangerous animals" % dangerous_animals
</snippet></ROW><ROW><id>19825126</id><snippet>random.sample(xrange(0,1000000000000), 100000000001)</snippet></ROW><ROW><id>19825126</id><snippet>&gt;&gt;&gt; sys.getsizeof(1)
24
</snippet></ROW><ROW><id>19825127</id><snippet>images = Image.objects.all().prefetch_related('favorited')
for image in images:
    image.favorited = image.favorited.filter(user=current_user).exists()
</snippet></ROW><ROW><id>19825127</id><snippet>.extra()</snippet></ROW><ROW><id>19825127</id><snippet>image.objects.extra(select={'favorited': 'EXISTS(SELECT * FROM app_favorite WHERE image_id = app_image.id AND user_id = %s)'}, select_params=[current_user.pk])
</snippet></ROW><ROW><id>19825163</id><snippet>__del__</snippet></ROW><ROW><id>19825163</id><snippet>GeneratorExit</snippet></ROW><ROW><id>19825163</id><snippet>generator.close()</snippet></ROW><ROW><id>19825163</id><snippet>__exit__</snippet></ROW><ROW><id>19825163</id><snippet>generator.close()</snippet></ROW><ROW><id>19825163</id><snippet>b.close()
</snippet></ROW><ROW><id>19825187</id><snippet>def function_writer():
    print "I am a function writer"  

    def new_function():
        print "I am a new function"

    return new_function

fn_dynamic = function_writer()
fn_dynamic() #call new_function
</snippet></ROW><ROW><id>19825187</id><snippet>def function_writer():
    print "I am a function writer"      
    def new_function():
        print "I am a new function"
    globals()['new_function'] = new_function

function_writer()
new_function()
</snippet></ROW><ROW><id>19825265</id><snippet>**</snippet></ROW><ROW><id>19825265</id><snippet>graph_retriever(str(page), 'posts', **{'since': since, 'until': until})
</snippet></ROW><ROW><id>19825265</id><snippet>graph_retriever(str(page), 'posts', since= since, until= until)
</snippet></ROW><ROW><id>19825358</id><snippet>concrete_for_model</snippet></ROW><ROW><id>19825358</id><snippet>concrete_for_model=False</snippet></ROW><ROW><id>19825387</id><snippet>LoadLibrary</snippet></ROW><ROW><id>19825387</id><snippet>ctypes</snippet></ROW><ROW><id>19825387</id><snippet>ctypes</snippet></ROW><ROW><id>19825387</id><snippet>ctypes</snippet></ROW><ROW><id>19825387</id><snippet>_ctypes</snippet></ROW><ROW><id>19825387</id><snippet>ctypes</snippet></ROW><ROW><id>19825387</id><snippet>help(_ctypes)</snippet></ROW><ROW><id>19825387</id><snippet>_ctypes.dlclose(mydll._handle)</snippet></ROW><ROW><id>19825387</id><snippet>_ctypes.FreeLibrary(mydll._handle)</snippet></ROW><ROW><id>19825387</id><snippet>mydll</snippet></ROW><ROW><id>19825387</id><snippet>FreeLibrary</snippet></ROW><ROW><id>19825387</id><snippet>dlclose(3)</snippet></ROW><ROW><id>19825464</id><snippet>datetime.now</snippet></ROW><ROW><id>19825464</id><snippet>from datetime import datetime

d = datetime.now()
d.strftime('%m/%d/%Y %H:%M:%S')
Out[7]: '11/06/2013 18:59:38'
</snippet></ROW><ROW><id>19825464</id><snippet>ctime</snippet></ROW><ROW><id>19825464</id><snippet>datetime.strptime</snippet></ROW><ROW><id>19825464</id><snippet>strftime</snippet></ROW><ROW><id>19825464</id><snippet>time</snippet></ROW><ROW><id>19825464</id><snippet>from datetime import datetime
import time
d = datetime.strptime(time.ctime(),"%a %b %d %H:%M:%S %Y")

d.strftime('%m/%d/%Y %H:%M:%S')
Out[9]: '11/06/2013 19:01:11'
</snippet></ROW><ROW><id>19825521</id><snippet>C:\Documents\file</snippet></ROW><ROW><id>19825521</id><snippet>archive.write(fileName, fileNameWithoutPath)
</snippet></ROW><ROW><id>19825535</id><snippet>filter</snippet></ROW><ROW><id>19825535</id><snippet>list</snippet></ROW><ROW><id>19825535</id><snippet>&gt;&gt;&gt; lname1 = [(1, 'one'), (3, 'three'), (5, 'five'), (7, 'seven')]
&gt;&gt;&gt; sKeys = [1, 2, 3]
&gt;&gt;&gt; [(x, y) for x, y in lname1 if x in sKeys]
[(1, 'one'), (3, 'three')]
</snippet></ROW><ROW><id>19825550</id><snippet>repr</snippet></ROW><ROW><id>19825550</id><snippet>eval</snippet></ROW><ROW><id>19825550</id><snippet>pickle</snippet></ROW><ROW><id>19825550</id><snippet>with open("task_list2.dat", "wb") as outFile:
    pickle.dump(task_list, outFile)

with open("task_list2.dat", "rb") as file:
    task_list = pickle.load(file)
</snippet></ROW><ROW><id>19825550</id><snippet>__repr__</snippet></ROW><ROW><id>19825550</id><snippet>repr</snippet></ROW><ROW><id>19825550</id><snippet>repr</snippet></ROW><ROW><id>19825550</id><snippet>repr</snippet></ROW><ROW><id>19825550</id><snippet>str</snippet></ROW><ROW><id>19825550</id><snippet>%</snippet></ROW><ROW><id>19825550</id><snippet>%r</snippet></ROW><ROW><id>19825550</id><snippet>%s</snippet></ROW><ROW><id>19825550</id><snippet>def __repr__(self):
    return 'Task(%r, %r)' % (self.name, self.timespent))
</snippet></ROW><ROW><id>19825550</id><snippet>&gt;&gt;&gt; t = Task('task name', 23.4)
&gt;&gt;&gt; t
Task('task name', 23.4)
&gt;&gt;&gt; eval(repr(t))
Task('task name', 23.4)
</snippet></ROW><ROW><id>19825550</id><snippet>repr</snippet></ROW><ROW><id>19825550</id><snippet>eval</snippet></ROW><ROW><id>19825550</id><snippet>eval(s[1:-1])</snippet></ROW><ROW><id>19825550</id><snippet>eval(s.strip("'"))</snippet></ROW><ROW><id>19825559</id><snippet>dict()</snippet></ROW><ROW><id>19825559</id><snippet>dict((i, factorize_naive(i)) for i in nums)
</snippet></ROW><ROW><id>19825876</id><snippet>list.sort()</snippet></ROW><ROW><id>19825876</id><snippet>None</snippet></ROW><ROW><id>19825876</id><snippet>nameList.sort()
</snippet></ROW><ROW><id>19825876</id><snippet>nameList = sorted(nameList)
</snippet></ROW><ROW><id>19825876</id><snippet>result = nameList[n].rstrip('\n')
</snippet></ROW><ROW><id>19825876</id><snippet>for</snippet></ROW><ROW><id>19825876</id><snippet>n</snippet></ROW><ROW><id>19825876</id><snippet>result = n.rstrip('\n')
</snippet></ROW><ROW><id>19825876</id><snippet>enumerate()</snippet></ROW><ROW><id>19825876</id><snippet>for i, n in enumerate(nameList):
</snippet></ROW><ROW><id>19825876</id><snippet>list</snippet></ROW><ROW><id>19825876</id><snippet>lst</snippet></ROW><ROW><id>19825876</id><snippet>L</snippet></ROW><ROW><id>19825934</id><snippet>one should not.</snippet></ROW><ROW><id>19825934</id><snippet>m = re.sub(r'\.\W([^\.]*?) (he|she|it) said.', r'. "\1," \2 said.', s)
</snippet></ROW><ROW><id>19825934</id><snippet>"Dr. Seuss likes to eat, she said"</snippet></ROW><ROW><id>19826100</id><snippet>url = url.split("?",1)[0]
</snippet></ROW><ROW><id>19826236</id><snippet>#name of file is python_script.py

class myapp()
 def __init___(self,root):
   self.root = root
   main_menu = ttk.Frame(self.root)
   ttk.Button(main_menu,text="REFRESH",command=lambda self=self:self._update())

 def _update(self):
   import python_script
   python_script.main_refresh(self.root,python_script)

def main_refresh(root,python_script):
   reload(python_script)
   root.destroy()
   python_script.main()

def main():
   root = Tkinter.Tk()
   myapp = myapp(root)
   root.mainloop()

if __name__ == '__main__':
   main() 
</snippet></ROW><ROW><id>19826293</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class Example(QtGui.QWidget):

    def __init__(self):
        super(Example, self).__init__()

        self.initUI()

    def mousePressEvent(self, QMouseEvent):
        print QMouseEvent.pos()

    def mouseReleaseEvent(self, QMouseEvent):
        cursor =QtGui.QCursor()
        print cursor.pos()        

    def initUI(self):               

        qbtn = QtGui.QPushButton('Quit', self)
        #qbtn.clicked.connect(QtCore.QCoreApplication.instance().quit)
        #qbtn.clicked.connect(self.test)
        qbtn.resize(qbtn.sizeHint())
        qbtn.move(50, 50)       

        self.setGeometry(0, 0, 1024, 768)
        self.setWindowTitle('Quit button')    
        self.setWindowFlags(self.windowFlags() | QtCore.Qt.FramelessWindowHint)
        #self.connect("clicked", self.test)
        self.show()
    def test(self):
      print "test"

def main():

    app = QtGui.QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19826293</id><snippet>PyQt4.QtCore.QPoint(242, 285)
PyQt4.QtCore.QPoint(1741, 423)
PyQt4.QtCore.QPoint(439, 372)
PyQt4.QtCore.QPoint(1509, 549)
PyQt4.QtCore.QPoint(90, 6)
PyQt4.QtCore.QPoint(1468, 50)
PyQt4.QtCore.QPoint(302, 372)
PyQt4.QtCore.QPoint(1674, 382)
PyQt4.QtCore.QPoint(501, 416)
PyQt4.QtCore.QPoint(1867, 416)
PyQt4.QtCore.QPoint(605, 391)
PyQt4.QtCore.QPoint(1971, 391)
PyQt4.QtCore.QPoint(18, 16)
PyQt4.QtCore.QPoint(1384, 16)
PyQt4.QtCore.QPoint(12, 12)
PyQt4.QtCore.QPoint(1378, 12)
PyQt4.QtCore.QPoint(12, 12)
PyQt4.QtCore.QPoint(1378, 12)
PyQt4.QtCore.QPoint(12, 12)
PyQt4.QtCore.QPoint(1378, 12)
PyQt4.QtCore.QPoint(1019, 14)
PyQt4.QtCore.QPoint(2385, 14)
</snippet></ROW><ROW><id>19826678</id><snippet>pygame.sprite.collide_rect(self.ball, self.player1)</snippet></ROW><ROW><id>19826678</id><snippet>player</snippet></ROW><ROW><id>19826678</id><snippet>ball</snippet></ROW><ROW><id>19826678</id><snippet>self.rect</snippet></ROW><ROW><id>19826678</id><snippet>self.rect.x</snippet></ROW><ROW><id>19826678</id><snippet>self.rect.y</snippet></ROW><ROW><id>19826678</id><snippet>self.rect.width</snippet></ROW><ROW><id>19826678</id><snippet>self.rect.height</snippet></ROW><ROW><id>19826678</id><snippet>pygame.sprite.collide_rect()</snippet></ROW><ROW><id>19826678</id><snippet>class Player(pygame.sprite.Sprite):</snippet></ROW><ROW><id>19826678</id><snippet>self.rect</snippet></ROW><ROW><id>19826678</id><snippet>self.rect</snippet></ROW><ROW><id>19826678</id><snippet>self.rect.x</snippet></ROW><ROW><id>19826678</id><snippet>self.rect.y</snippet></ROW><ROW><id>19826678</id><snippet>import sys

import pygame
from pygame.locals import *

#----------------------------------------------------------------------

UP   = 1
DOWN = 2 

#----------------------------------------------------------------------

class Player():

    def __init__(self, screen, x, y):

        self.screen = screen

        self.rect = pygame.Rect(0,0,0,0)

        self.image = pygame.image.load('player.png')

        self.rect.size = self.image.get_size()

        self.rect.center = (x, y)

        self.speed_x = 0
        self.speed_y = 15

        self.direction = None

    def draw(self):
        self.screen.blit(self.image,(self.rect.x,self.rect.y))

    def move(self):
        if self.direction:
            if self.direction == UP :
                self.rect.y -= self.speed_y
                if self.rect.y &lt; 0 :
                    self.rect.y = 0
            elif self.direction == DOWN :
                self.rect.y += self.speed_y
                if self.rect.y &gt; self.screen.get_size()[1] - self.rect.height :
                    self.rect.y = self.screen.get_size()[1] - self.rect.height

#----------------------------------------------------------------------

class Ball():

    def __init__(self, screen, x, y):

        self.screen = screen

        self.rect = pygame.Rect(0,0,0,0)

        self.image = pygame.image.load('ball.png')

        self.rect.size = self.image.get_size()

        self.rect.center = (x, y)

        self.speed_x = 15
        self.speed_y = 15

    def draw(self):
        self.screen.blit(self.image,(self.rect.x,self.rect.y))

    def move(self):
        self.rect.x += self.speed_x
        self.rect.y += self.speed_y

        if self.rect.left &lt; 0 or self.rect.right &gt; self.screen.get_size()[0]:
            self.speed_x = -self.speed_x
        if self.rect.top &lt; 0 or self.rect.bottom &gt; self.screen.get_size()[1]:
            self.speed_y = -self.speed_y

#----------------------------------------------------------------------

class Game():

    def __init__(self):

        self.FPS = 25

        pygame.init()


        self.fpsClock = pygame.time.Clock()

        self.background = pygame.image.load('background.jpg')
        self.size = self.width, self.height = self.background.get_size()

        self.screen = pygame.display.set_mode(self.size,0,32)

        self.ball = Ball(self.screen, 100, 100)

        self.player1 = Player(self.screen, 35, self.height/2)
        self.player2 = Player(self.screen, self.width-35, self.height/2)

        print self.screen.get_rect().center


        font = pygame.font.SysFont("", 72)

        self.text_paused = font.render("PAUSE", True, (255, 0, 0))

        print self.text_paused.get_rect()

        screen_rect = self.screen.get_rect()
        self.text_rect = self.text_paused.get_rect()
        self.text_rect.center = screen_rect.center

        print self.text_rect

    def run(self):

        RUNNING = True

        PAUSED = False
        while RUNNING:

            # --- events ---

            for event in pygame.event.get():
                if event.type==QUIT:
                    RUNNING = False

                if event.type == KEYDOWN:
                    if event.key == K_ESCAPE:
                        RUNNING = False
                    elif event.key == K_SPACE:
                        PAUSED = not PAUSED
                    elif not PAUSED:
                        if event.key == K_w:
                            self.player1.direction = UP
                        elif event.key == K_s:
                            self.player1.direction = DOWN
                        elif event.key == K_UP:
                            self.player2.direction = UP
                        elif event.key == K_DOWN:
                            self.player2.direction = DOWN

                if event.type == KEYUP:
                    if not PAUSED:
                        if event.key in (K_w, K_s):
                            self.player1.direction = None
                        elif event.key in (K_UP, K_DOWN):
                            self.player2.direction = None

            # --- recalculations ---

            if not PAUSED:      
                self.player1.move()
                self.player2.move()
                self.ball.move()

            #~ print self.ball.get_rect()

            if pygame.sprite.collide_rect(self.ball, self.player1):
                self.ball.speed_x = -self.ball.speed_x

            if pygame.sprite.collide_rect(self.ball, self.player2):
                self.ball.speed_x = -self.ball.speed_x

            # --- drawing ---

            self.screen.blit(self.background,(0,0))
            self.player1.draw()
            self.player2.draw()
            self.ball.draw()

            if PAUSED:

                self.screen.blit(self.text_paused, self.text_rect.topleft)

            pygame.display.update()

            # --- FPS ---

            self.fpsClock.tick(self.FPS)

        # --- finish ---

        pygame.quit()
        sys.exit()

#----------------------------------------------------------------------

Game().run()
</snippet></ROW><ROW><id>19826934</id><snippet>myList = [25,3,26,27,56]
myList[3], myList[4] = myList[4], myList[3]
print myList
</snippet></ROW><ROW><id>19826934</id><snippet>[25, 3, 26, 56, 27]
</snippet></ROW><ROW><id>19826934</id><snippet>myList[4]</snippet></ROW><ROW><id>19826934</id><snippet>myList[3]</snippet></ROW><ROW><id>19826934</id><snippet>myList[3]</snippet></ROW><ROW><id>19826934</id><snippet>myList[4]</snippet></ROW><ROW><id>19826934</id><snippet>myList = [25,3,26,27,56]
for i in range(0, len(myList) - 1, 2):
    myList[i], myList[i + 1] = myList[i + 1], myList[i]
print myList
</snippet></ROW><ROW><id>19826934</id><snippet>[3, 25, 27, 26, 56]
</snippet></ROW><ROW><id>19826934</id><snippet>index</snippet></ROW><ROW><id>19826934</id><snippet>27</snippet></ROW><ROW><id>19826934</id><snippet>myList = [25,3,26,27,56]
idx = myList.index(27)
if idx == len(myList) - 1: # If 27 is the last element, swap with the previous
    myList[idx], myList[idx - 1] = myList[idx - 1], myList[idx]
else:
    myList[idx], myList[idx + 1] = myList[idx + 1], myList[idx]
print myList
</snippet></ROW><ROW><id>19827108</id><snippet>int</snippet></ROW><ROW><id>19827108</id><snippet>isinstance</snippet></ROW><ROW><id>19827108</id><snippet>int</snippet></ROW><ROW><id>19827108</id><snippet>check2</snippet></ROW><ROW><id>19827108</id><snippet>def check(n):
    if int(n) != n:
        print("int(n) != n")
    else:
        print("int(n) == n")

def check2(n):
    if not isinstance(n, int):
        print("n is not an int")
    else:
        print("n is an int")


class myInt(int):
    pass

check(1)
check("1")
#check({})      #Will throw error
#check([])      #Will throw error
check(myInt()) 
print ""
check2(1)
check2("1")
check2({})
check2(myInt())
check2([])
</snippet></ROW><ROW><id>19827108</id><snippet>int(n) == n
int(n) != n
int(n) == n

n is an int
n is not an int
n is not an int
n is an int
n is not an int
</snippet></ROW><ROW><id>19827326</id><snippet>L = [1, 2, 3, 4, 5]
for item in L:
    if item == 1 or item == 2 or item == 3:
        L.remove(item)
print L
</snippet></ROW><ROW><id>19827326</id><snippet>[2, 4, 5]
</snippet></ROW><ROW><id>19827326</id><snippet>2</snippet></ROW><ROW><id>19827326</id><snippet>item</snippet></ROW><ROW><id>19827326</id><snippet>1
3
5
</snippet></ROW><ROW><id>19827326</id><snippet>1</snippet></ROW><ROW><id>19827326</id><snippet>2</snippet></ROW><ROW><id>19827326</id><snippet>3</snippet></ROW><ROW><id>19827326</id><snippet>4</snippet></ROW><ROW><id>19827326</id><snippet>duplicates_del = duplicates</snippet></ROW><ROW><id>19827326</id><snippet>def remove_duplicates(duplicates):
    for i in duplicates[:]: # Creates a copy of the list
        if duplicates.count(i) &gt; 1:
            duplicates.remove(i)
    return duplicates
</snippet></ROW><ROW><id>19827374</id><snippet>print("You find yourself in a dark room, do you... (1) Try to find a way out... or... (2) Sit down and think.")
A1 = input('&gt;&gt;')
if A1 == '1':
    print ("You go into panic, you begin to feel dizzy and lightheaded...")
    print ("Do you (1) Sit down and try to relax... or... (2) Slow down, but keep      searching.")
elif A2 == '2':
    A4 = input('&gt;&gt;')
    etc
</snippet></ROW><ROW><id>19827374</id><snippet>elif</snippet></ROW><ROW><id>19827374</id><snippet>A4</snippet></ROW><ROW><id>19827394</id><snippet>"..."</snippet></ROW><ROW><id>19827394</id><snippet>'...'</snippet></ROW><ROW><id>19827394</id><snippet>true</snippet></ROW><ROW><id>19827394</id><snippet>false</snippet></ROW><ROW><id>19827394</id><snippet>True</snippet></ROW><ROW><id>19827394</id><snippet>False</snippet></ROW><ROW><id>19827423</id><snippet>password</snippet></ROW><ROW><id>19827423</id><snippet>&gt;&gt;&gt; user = User.objects.create_user(username='asdf', email='asdf@example.com', password='xxxx')
&gt;&gt;&gt; user.password
'sha1$166e7$4028738f0c0df0e7ec3cec06843c35d2b5a1aae8'
</snippet></ROW><ROW><id>19827423</id><snippet>user.password</snippet></ROW><ROW><id>19827423</id><snippet>xxxx</snippet></ROW><ROW><id>19827423</id><snippet>create_user</snippet></ROW><ROW><id>19827423</id><snippet>create_user</snippet></ROW><ROW><id>19827423</id><snippet>client.login</snippet></ROW><ROW><id>19827423</id><snippet>def setUp(self):
    """
    Initializes the test client and logs it in.
    """
    password = 'secret'
    self.user = create_user(password=password)
    self.logged_in = self.client.login(username=self.user.username, password=password)
</snippet></ROW><ROW><id>19827423</id><snippet>create_user</snippet></ROW><ROW><id>19827423</id><snippet>User.objects.create_user</snippet></ROW><ROW><id>19827423</id><snippet>User.objects.create</snippet></ROW><ROW><id>19827423</id><snippet>def create_user(username=None, password=None, email=None, is_superuser=False):
    if username is None:
        username = "user%d" % Static.user_count
        while User.objects.filter(username=username).count() != 0:
            Static.user_count += 1
            username = "user%d" % Static.user_count
    if password is None:
        password = "password"
    if email is None:
        email="user%d@test.com" % Static.user_count

    Static.user_count += 1
    user = User.objects.create_user(username=username, password=password)
    #                   ^^^^^^^^^^^
    user.is_superuser = is_superuser
    user.save()
    return user # &lt;---
</snippet></ROW><ROW><id>19827579</id><snippet>df.groupby(["groupA", "groupB"]).sum()
</snippet></ROW><ROW><id>19827579</id><snippet>df.groupby('A').apply(lambda x: x[x['B'] &gt; 0]['B'].sum())
</snippet></ROW><ROW><id>19827579</id><snippet>df.groupby('A').agg(lambda x: np.sum(x[x &gt; 0]))
</snippet></ROW><ROW><id>19827579</id><snippet>&gt;&gt;&gt; df = pd.DataFrame({'A':list('aaabbbbccc'), 'B':[1,1,0,1,1,0,0,1,0,0]})
&gt;&gt;&gt; df.groupby('A').sum()
   B
A   
a  2
b  2
c  1
&gt;&gt;&gt; df.groupby('A').apply(lambda x: x[x['B'] &gt; 0]['B'].sum())
A
a    2
b    2
c    1
&gt;&gt;&gt; df.groupby('A').agg(lambda x: np.sum(x[x &gt; 0]))
     B
A     
a  2
b  2
c  1
</snippet></ROW><ROW><id>19827623</id><snippet>void vetor_char2D(std::vector&lt;std::string&gt;&amp; vetorchar)
{
   for (int i = 0; i &lt; vetorchar.size(); i++)
       vetorchar[i] = "b";
};
</snippet></ROW><ROW><id>19827623</id><snippet>#include &lt;string&gt;</snippet></ROW><ROW><id>19827633</id><snippet>bytes.startswith()</snippet></ROW><ROW><id>19827633</id><snippet>str.startswith()</snippet></ROW><ROW><id>19827633</id><snippet>line.startswith(b'&gt;')</snippet></ROW><ROW><id>19827633</id><snippet>'&gt;'</snippet></ROW><ROW><id>19827819</id><snippet>lists</snippet></ROW><ROW><id>19827819</id><snippet>numpy.array</snippet></ROW><ROW><id>19827819</id><snippet>array</snippet></ROW><ROW><id>19827819</id><snippet>array</snippet></ROW><ROW><id>19827819</id><snippet>object</snippet></ROW><ROW><id>19827819</id><snippet>numpy</snippet></ROW><ROW><id>19827819</id><snippet>x = [['foo', '333', 32.3],
     ['bar', 4.0],
     ['baz', '555', '2232',  -1.9]]

result = sorted(x, key=lambda k : k[-1], reverse=True)
</snippet></ROW><ROW><id>19827819</id><snippet>&gt;&gt;&gt; result
[['foo', '333', 32.3], ['bar', 4.0], ['baz', '555', '2232', -1.9]]
</snippet></ROW><ROW><id>19827824</id><snippet>WinMain()</snippet></ROW><ROW><id>19827824</id><snippet>main()</snippet></ROW><ROW><id>19827833</id><snippet>queryString = "SELECT * FROM dbo.IPAM_Node as A \
    FULL OUTER JOIN IPAM_NodeAttrData as B ON A.IPNodeId = B.IPNodeId \
    FULL OUTER JOIN IPAM_Group as C on A.SubnetId = C.GroupId \
    FULL OUTER JOIN IPAM_GroupAttrData as D on C.GroupId = D.GroupId \
    WHERE IPAddress IN (%s);" % (Hosts_as_Tuples,)

print queryString

cur.execute(queryString)
</snippet></ROW><ROW><id>19828352</id><snippet>&gt;&gt;&gt; int(datetime.datetime.strptime("2013-11-07 00:10:27", "%Y-%m-%d %H:%M:%S").strftime('%s')) * 1000
1383811827000
</snippet></ROW><ROW><id>19828422</id><snippet>import pandas as pd
import io
data = io.BytesIO("""    ID RT
0  foo  1
1  foo  2
2  bar  3
3  bar  4
4  foo  1
5  foo  2
6  bar  3
7  bar  4
8  bar  4""")

df = pd.read_csv(data, delim_whitespace=True)
df.groupby("ID").RT.apply(pd.Series.reset_index, drop=True).unstack()
</snippet></ROW><ROW><id>19828422</id><snippet>    0  1  2  3   4
ID                 
bar  3  4  3  4   4
foo  1  2  1  2 NaN
</snippet></ROW><ROW><id>19828438</id><snippet>with</snippet></ROW><ROW><id>19828438</id><snippet>from __future__ import print_function
import decimal
import sys

if sys.version_info.major&lt;3: 
    ic=long
else:
    ic=int    

def ri(i, places=6):
    with decimal.localcontext() as lct:
        lct.prec=places
        n=ic(decimal.Decimal(i,)+decimal.Decimal('0'))
    return format(n,',')

print(ri(2**99, 4)) 
# 633,800,000,000,000,000,000,000,000,000
print(ri(12349159111, 7))    
# 12,349,160,000
print(ri(12349111111, 3))  
# 12,300,000,000
</snippet></ROW><ROW><id>19828438</id><snippet>&gt;&gt;&gt; format(round(12349999999999999,-6),',')
'1.235e+16'    # wrong....
</snippet></ROW><ROW><id>19828438</id><snippet>def rir(i, places=6):
    return format(round(i, places-len(str(i))), ',')

print(rir(2**99, 4))   
# 633,800,000,000,000,000,000,000,000,000
print(rir(12349159111, 7))   
# 12,349,160,000
</snippet></ROW><ROW><id>19828438</id><snippet>ndigits</snippet></ROW><ROW><id>19828438</id><snippet>&gt;&gt;&gt; round(123456789,-4)
123456789123460000
</snippet></ROW><ROW><id>19828438</id><snippet>&gt;&gt;&gt; round(123456789123456789,-8)
123456789100000000
</snippet></ROW><ROW><id>19828438</id><snippet>&gt;&gt;&gt; round(123456789,-4)
123460000.0
&gt;&gt;&gt; round(123456789123456789,-4)
1.2345678912346e+17
</snippet></ROW><ROW><id>19828562</id><snippet>a</snippet></ROW><ROW><id>19828562</id><snippet>a</snippet></ROW><ROW><id>19828569</id><snippet>from string import Template
a = Template("$name is my friend")
b=a.substitute(name="Sara")
print b
#output: Sara is my friend
</snippet></ROW><ROW><id>19828569</id><snippet>table_items = table_items + "&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;"%(project,branch)
</snippet></ROW><ROW><id>19828569</id><snippet>table_items += "&lt;tr&gt;&lt;td&gt;%(p)s&lt;/td&gt;&lt;td&gt;%(b)s&lt;/td&gt;&lt;/tr&gt;" % {'p':project,'b':branch}
</snippet></ROW><ROW><id>19828569</id><snippet>table_items = Template("&lt;tr&gt;&lt;td&gt;$p&lt;/td&gt;&lt;td&gt;$b&lt;/td&gt;&lt;/tr&gt;")
table_items += table_items.substitute(p=project,b=branch)
</snippet></ROW><ROW><id>19828605</id><snippet>reader</snippet></ROW><ROW><id>19828605</id><snippet>['10\t"Record 1"\t"hi"']
['20\t"Record 2"\t"bye"']
['30\t"Record 3"\t"test"']
</snippet></ROW><ROW><id>19828605</id><snippet>reader=csv.reader(f, delimiter="\t")
</snippet></ROW><ROW><id>19828605</id><snippet>with statement</snippet></ROW><ROW><id>19828605</id><snippet>writerows</snippet></ROW><ROW><id>19828605</id><snippet>import csv

DATA=((10, 'Record 1', 'hi'),
      (20, 'Record 2', 'bye'),
      (30, 'Record 3', 'test'))

with open('bookdata.csv', 'w') as f:
    # writer=csv.writer(f) - this line is not required
    writer=csv.writer(f,delimiter='\t',quotechar='"',quoting=csv.QUOTE_ALL)
    writer.writerows(DATA) # note here I am using writerows

with open('bookdata.csv', 'r') as f:
    reader=csv.reader(f, delimiter="\t")
    for chap, title, pack in reader:
        print("%s, %s, %s" % (chap, title, pack))
</snippet></ROW><ROW><id>19828613</id><snippet>s = raw_input("What word do you want translated?").strip()
vowel = set("aeiou")
if vowel &amp; set(s):
    while s[0] not in vowel:
        s = s[1:] + s[0]
    print s
else:
    print "Input has no vowels"
</snippet></ROW><ROW><id>19828753</id><snippet>transform</snippet></ROW><ROW><id>19828753</id><snippet>Circle</snippet></ROW><ROW><id>19828753</id><snippet>%matplotlib inline
import pylab as pl
import numpy as np

N = 100
theta = np.random.rand(N)*np.pi*2
r = np.cos(theta*2) + np.random.randn(N)*0.1

ax = pl.subplot(111, polar=True)
ax.scatter(theta, r)
circle = pl.Circle((0.5, 0.3), 0.2, transform=ax.transData._b, color="red", alpha=0.4)
ax.add_artist(circle)
</snippet></ROW><ROW><id>19828753</id><snippet>transform=ax.transProjectionAffine + ax.transAxes</snippet></ROW><ROW><id>19828967</id><snippet>df.empty</snippet></ROW><ROW><id>19828967</id><snippet>if df.empty:
    print('DataFrame is empty!')
</snippet></ROW><ROW><id>19828978</id><snippet>class Myclass:
    def __init__(self, param1, param2):
        self.param1 = param1
        self.param2 = param2
        self._datacache = {}

    def getData(self, date):
        if date not in self._datacache:
            self._datacache[date] = # here goes the query result converted to dict
        return self._datacache[date]
</snippet></ROW><ROW><id>19828984</id><snippet>x</snippet></ROW><ROW><id>19828984</id><snippet>y</snippet></ROW><ROW><id>19828984</id><snippet>halfWidthSprite1 = sprite1.width//2
halfWidthSprite2 = sprite2.width//2
halfHeightSprite1 = sprite1.height//2
halfHeightSprite2 = sprite2.height//2
distanceX = abs(sprite1.center[0] - sprite2.center[0])
distanceY = abs(sprite2.center[1] - sprite2.center[1])

collision = (distanceX &lt; (halfWidthSprite1 + halfWidthSprite2)) and
            (distanceY &lt; (halfHeightSprite1 + halfHeightSprite2))
</snippet></ROW><ROW><id>19829004</id><snippet>os.path.isfile('/;l$/AboutThisBuild.txt')</snippet></ROW><ROW><id>19829004</id><snippet>$ strings /usr/bin/rawtherapee | grep '^/'
/lib/ld-linux.so.2
/H=!
/;l$
/9T$,
/.ba
/usr/share/rawtherapee
/usr/share/doc/rawtherapee
/themes/
/themes/slim
/options
/usr/share/color/icc
/cache
/languages/default
/languages/
/languages
/themes
/batch/queue
/batch/
/dcpprofiles
/@q=
/N6rtexif16NAISOInterpreterE
</snippet></ROW><ROW><id>19829004</id><snippet>locate</snippet></ROW><ROW><id>19829004</id><snippet>strings</snippet></ROW><ROW><id>19829004</id><snippet>&gt;&gt;&gt; from string import printable, whitespace
&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; pathchars = set(printable) - set(whitespace)
&gt;&gt;&gt; with open("/usr/bin/rawtherapee") as fp:
...     data = fp.read()
... 
&gt;&gt;&gt; for k, g in groupby(data, pathchars.__contains__):
...     if not k: continue
...     g = ''.join(g)
...     if len(g) &gt; 3 and g.startswith("/"):
...         print g
... 
/lib64/ld-linux-x86-64.so.2
/^W0Kq[
/pW$&lt;
/3R8
/)wyX
/WUO
/w=H
/t_1
/.badpixH
/d$(
/\$P
/D$Pv
/D$@
/D$(
/l$@
/d$@v?H
/usr/share/rawtherapee
/usr/share/doc/rawtherapee
/themes/
/themes/slim
/options
/usr/share/color/icc
/cache
/languages/default
/languages/
/languages
/themes
/batch/queue.csv
/batch/
/dcpprofiles
/@q=
/N6rtexif16NAISOInterpreterE
</snippet></ROW><ROW><id>19829263</id><snippet>'^(?!summary)(?!config)[\w_-]+$'
</snippet></ROW><ROW><id>19829263</id><snippet>&gt;&gt;&gt; re.match('^(?!summary)(?!config)[\w_-]+$','config_test')
&gt;&gt;&gt; (None)
&gt;&gt;&gt; re.match('^(?!summary)(?!config)[\w_-]+$','confi_test')
&gt;&gt;&gt; &lt;_sre.SRE_Match object at 0x21d34a8&gt;
</snippet></ROW><ROW><id>19829263</id><snippet>(?!&lt;word here&gt;)</snippet></ROW><ROW><id>19829263</id><snippet>^</snippet></ROW><ROW><id>19829263</id><snippet>^</snippet></ROW><ROW><id>19829263</id><snippet>$</snippet></ROW><ROW><id>19829263</id><snippet>ummary</snippet></ROW><ROW><id>19829263</id><snippet>summary</snippet></ROW><ROW><id>19829483</id><snippet>def announce_start(): 
    # code to connect to irc server and announce deployment begins
    pass

def announce_finish(): 
    # code to connect to irc server and announce deployment finishes
    pass

@hosts(...)
def deploy_machine1():
    pass

@hosts(...)
def deploy_machine2():
    pass

def deploy():
    announce_start()
    execute(deploy_machine1)
    execute(deploy_machine2)
    announce_finish()
</snippet></ROW><ROW><id>19829533</id><snippet>dateutil</snippet></ROW><ROW><id>19829533</id><snippet>&gt;&gt;&gt; from dateutil.relativedelta import relativedelta
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; delta = relativedelta(months=6)
&gt;&gt;&gt; six_month_away = datetime.date.today() - delta
&gt;&gt;&gt; abs((six_month_away - datetime.date.today()).days)
184
</snippet></ROW><ROW><id>19829542</id><snippet>cmd</snippet></ROW><ROW><id>19829542</id><snippet>where python
</snippet></ROW><ROW><id>19829542</id><snippet>python</snippet></ROW><ROW><id>19829590</id><snippet>lis = [8,9,27,4,5,28,15,13,11,12]
ind1 = lis.index(27)
ind2 = lis.index(28)
if ind1 &lt; ind2:
    lis = lis[ind2+1:] + lis[ind1:ind2+1] + lis[:ind1]
else:
    #do something else
print lis
#[15, 13, 11, 12, 27, 4, 5, 28, 8, 9]
</snippet></ROW><ROW><id>19829800</id><snippet>-(e**someNum)</snippet></ROW><ROW><id>19829800</id><snippet>(-e)**someNum</snippet></ROW><ROW><id>19829800</id><snippet>public static double f(float x) {
    return 7 - Math.pow(Math.E, -((-Math.log(7)/100)*(100-x)));
}
</snippet></ROW><ROW><id>19830048</id><snippet>.... if predicate</snippet></ROW><ROW><id>19830048</id><snippet>if not message: raise ValueError("message must be a string")
</snippet></ROW><ROW><id>19830048</id><snippet>isinstance</snippet></ROW><ROW><id>19830048</id><snippet>&gt;&gt;&gt; isinstance('aa', str) # OR  isinstance(.., basestring) in Python 2.x
True
&gt;&gt;&gt; isinstance(11, str)
False
&gt;&gt;&gt; isinstance('', str)
True
</snippet></ROW><ROW><id>19830048</id><snippet>not message</snippet></ROW><ROW><id>19830048</id><snippet>&gt;&gt;&gt; not 'a string'
False
&gt;&gt;&gt; not ''
True
&gt;&gt;&gt; not [1]
False
&gt;&gt;&gt; not []
True
</snippet></ROW><ROW><id>19830048</id><snippet>if not message and message != '':
    raise ValueError("message is invalid: {!r}".format(message))
</snippet></ROW><ROW><id>19830131</id><snippet>unit</snippet></ROW><ROW><id>19830131</id><snippet>X's</snippet></ROW><ROW><id>19830131</id><snippet>unitv_query = P.query() 
mv = unitv_query.fetch() 
    # mv is a list of P
    for a in mv: 

        # now loop over each entity in unit property.
        for i in a.unit:

            logging.info ("content=[%s]", i.content) 
</snippet></ROW><ROW><id>19830131</id><snippet>mv</snippet></ROW><ROW><id>19830131</id><snippet>P</snippet></ROW><ROW><id>19830131</id><snippet>unit</snippet></ROW><ROW><id>19830389</id><snippet>A</snippet></ROW><ROW><id>19830389</id><snippet>&gt;&gt;&gt; type(A)
&lt;class 'bs4.element.Tag'&gt;
</snippet></ROW><ROW><id>19830389</id><snippet>A</snippet></ROW><ROW><id>19830389</id><snippet>&gt;&gt;&gt; type(B)
&lt;class 'bs4.element.NavigableString'&gt;
</snippet></ROW><ROW><id>19830389</id><snippet>bs4.element.NavigableString</snippet></ROW><ROW><id>19830389</id><snippet>renderContents</snippet></ROW><ROW><id>19830389</id><snippet>&gt;&gt;&gt; dir(B)
['HTML_FORMATTERS', 'PREFIX', 'SUFFIX', 'XML_FORMATTERS', '__add__', '__class__', '__contains__', '__copy__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__ge__', '__getattr__', '__getattribute__', '__getitem__', '__getnewargs__', '__getslice__', '__gt__', '__hash__', '__init__', '__le__', '__len__', '__lt__', '__mod__', '__module__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_attr_value_as_string', '_attribute_checker', '_find_all', '_find_one', '_formatter_field_name_split', '_formatter_for_name', '_formatter_parser', '_is_xml', '_lastRecursiveChild', '_last_descendant', '_tag_name_matches_and', 'append', 'attribselect_re', 'capitalize', 'center', 'count', 'decode', 'encode', 'endswith', 'expandtabs', 'extract', 'fetchNextSiblings', 'fetchParents', 'fetchPrevious', 'fetchPreviousSiblings', 'find', 'findAllNext', 'findAllPrevious', 'findNext', 'findNextSibling', 'findNextSiblings', 'findParent', 'findParents', 'findPrevious', 'findPreviousSibling', 'findPreviousSiblings', 'find_all_next', 'find_all_previous', 'find_next', 'find_next_sibling', 'find_next_siblings', 'find_parent', 'find_parents', 'find_previous', 'find_previous_sibling', 'find_previous_siblings', 'format', 'format_string', 'index', 'insert', 'insert_after', 'insert_before', 'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'islower', 'isnumeric', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'name', 'next', 'nextGenerator', 'nextSibling', 'nextSiblingGenerator', 'next_element', 'next_elements', 'next_sibling', 'next_siblings', 'output_ready', 'parent', 'parentGenerator', 'parents', 'partition', 'previous', 'previousGenerator', 'previousSibling', 'previousSiblingGenerator', 'previous_element', 'previous_elements', 'previous_sibling', 'previous_siblings', 'replace', 'replaceWith', 'replaceWithChildren', 'replace_with', 'replace_with_children', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'setup', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'tag_name_re', 'title', 'translate', 'unwrap', 'upper', 'wrap', 'zfill']
</snippet></ROW><ROW><id>19830389</id><snippet>A = soup.findAll('strong',{'class':'name fn'})  # Notice there is no [0] slice notation here.
for B in A:
    print B.renderContents()
</snippet></ROW><ROW><id>19830472</id><snippet>words</snippet></ROW><ROW><id>19830472</id><snippet>words</snippet></ROW><ROW><id>19830472</id><snippet>for word in lines:
    words=word.rstrip()
</snippet></ROW><ROW><id>19830472</id><snippet>lines=input_file.readlines()
for word in lines:
    words=word.rstrip()
</snippet></ROW><ROW><id>19830472</id><snippet>words = input_file.read().rstrip()
</snippet></ROW><ROW><id>19830472</id><snippet>import codecs
import re

with codecs.open("corpus3_tst","r",encoding="utf-8") as f:
    words = f.read().rstrip()
    pattern = r'dog|cat|pigeon'
    #pattern = '|'.join(map(re.escape, ['dog', 'cat', 'pigeon']))
    print re.sub(pattern, 'ANIMAL', words)
</snippet></ROW><ROW><id>19830830</id><snippet>post</snippet></ROW><ROW><id>19830830</id><snippet>import urllib
from bs4 import BeautifulSoup

import requests

url = "http://www.padtube.com/Audio-Files-Player/30-01-1-2.html"
#pageurl = urllib.urlopen(url)

pageurl = requests.post(url, data = {
    'page': 2
})


pageurl = pageurl.text

soup = BeautifulSoup(pageurl)

for b in soup.select("table#dl-tbl-list th a[href]"):
    print b['href']
</snippet></ROW><ROW><id>19830894</id><snippet>for a in range (13)</snippet></ROW><ROW><id>19830894</id><snippet>a = 5
for i in range(12):
    a = (a*2)-3

print a
</snippet></ROW><ROW><id>19831008</id><snippet>a = array([[5],
           [0],
           [4],
           ..., 
           [5],
           [6],
           [8]], dtype=int8)

new_y = np.eye(a.max()+1)[a.ravel()]
</snippet></ROW><ROW><id>19831008</id><snippet>a</snippet></ROW><ROW><id>19831008</id><snippet>new_y = np.zeros((a.shape[0], a.max()+1))
new_y[np.indices(a.ravel().shape)[0], a.ravel()] = 1.
</snippet></ROW><ROW><id>19831360</id><snippet>easy_install zipline</snippet></ROW><ROW><id>19831360</id><snippet>easy_install</snippet></ROW><ROW><id>19831401</id><snippet>wxPython</snippet></ROW><ROW><id>19831401</id><snippet>Tkinter</snippet></ROW><ROW><id>19831401</id><snippet>matplotlib</snippet></ROW><ROW><id>19831703</id><snippet>import datetime
import numpy

time_string = '2012-10-26'

date_object = datetime.datetime.strptime(time_string, '%Y-%m-%d')

print str(date_object)
later_date_object = date_object + datetime.timedelta(0,3) # days, seconds, then other fields.
print str(later_date_object)

pad = numpy.zeros((1,2), dtype='object')
pad[0,0] = time_string

print pad[0,0]
</snippet></ROW><ROW><id>19831703</id><snippet>dtype='object'</snippet></ROW><ROW><id>19832132</id><snippet>proxy.soapproxy.config.dumpSOAPOut = 1
proxy.soapproxy.config.dumpSOAPIn = 1
</snippet></ROW><ROW><id>19832132</id><snippet>proxy.GetCursOnDate(input)
</snippet></ROW><ROW><id>19832132</id><snippet>suds.TypeNotFound: Type not found: '(schema, http://www.w3.org/2001/XMLSchema, )'</snippet></ROW><ROW><id>19832132</id><snippet>from suds.client import Client
from suds.xsd.doctor import ImportDoctor, Import
import datetime

imp = Import('http://www.w3.org/2001/XMLSchema') # the schema to import.
imp.filter.add('http://web.cbr.ru/')             # the schema to import into.
d = ImportDoctor(imp)
s = Client("http://www.cbr.ru/DailyInfoWebServ/DailyInfo.asmx?wsdl", doctor=d)
result = s.service.GetCursOnDate(datetime.datetime.now())
</snippet></ROW><ROW><id>19832264</id><snippet>setup.py</snippet></ROW><ROW><id>19832264</id><snippet>deb</snippet></ROW><ROW><id>19832336</id><snippet>mark_safe</snippet></ROW><ROW><id>19832336</id><snippet>from django.utils.safestring import mark_safe
from django.db import models
class Test(models.Model):
    area = models.FloatField(choices=((0, mark_safe('0 mm²')), (0.5, mark_safe('0.5 mm²'))), default=0)
</snippet></ROW><ROW><id>19832657</id><snippet>class TestForm(forms.Form):
    def __init__(self, *args, **kwargs):
        super(TestForm, self).__init__(auto_id=True, *args, **kwargs)
</snippet></ROW><ROW><id>19833101</id><snippet>&gt;&gt;&gt; '\\'
'\\'
&gt;&gt;&gt; len('\\')
1
&gt;&gt;&gt; print '\\'
\
&gt;&gt;&gt; '\('
'\\('
&gt;&gt;&gt; len('\(')
2
&gt;&gt;&gt; print '\('
\(
</snippet></ROW><ROW><id>19833143</id><snippet>str.find</snippet></ROW><ROW><id>19833143</id><snippet>&gt;&gt;&gt; 'abcd'.find('c')
2
&gt;&gt;&gt; 'abcd'.find('e')
-1
 # returns 1 because the first matching sub-string starts at the index 1
&gt;&gt;&gt; "aheyqwert".find('hey')
1
</snippet></ROW><ROW><id>19833143</id><snippet>str.find</snippet></ROW><ROW><id>19833143</id><snippet>&gt;&gt;&gt; help(str.find)
Help on method_descriptor:

find(...)
    S.find(sub [,start [,end]]) -&gt; int

    Return the lowest index in S where substring sub is found,
    such that sub is contained within S[start:end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.
</snippet></ROW><ROW><id>19833520</id><snippet>            file1 = open("FILE1.TXT", "r")
            a={}
            for line1 in file1:
                str = line1[:59] + line1[68:-1]
                a[str] = 1
            file1.close()

            file2 = open("FILE2.TXT", "r")
            out = open("OUTPUT.TXT", "w")
            for line2 in file2:
                str = line2[:59] + line2[68:-1]
                if not a.has_key(str):
                    out.write(line2[:-1])
            out.close()
            file2.close()
</snippet></ROW><ROW><id>19833698</id><snippet>3&gt;&gt; [int(x, 16) for x in b'002151BF,FFFF9F86'.split(b',')]
[2183615, 4294942598]

3&gt;&gt; [(int(x, 16) + 0x80000000) % 0x100000000 - 0x80000000 for x in b'002151BF,FFFF9F86'.split(b',')]
[2183615, -24698]
</snippet></ROW><ROW><id>19833822</id><snippet>{&lt;record_id&gt;: &lt;record functional field value&gt;}</snippet></ROW><ROW><id>19833822</id><snippet>def _get_total_cost(self, cr, uid, ids, field_name, arg, context):', the argument ids contain list of ids of the records for which the functional field is being calculated. So if you try to browse using the ids as</snippet></ROW><ROW><id>19833822</id><snippet>def _get_total_cost(self, cr, uid, ids, field_name, arg, context):
    res = {}        
    for bom_point in self.browse(cr, uid, ids, context=context):
        total_cost = bom_point.bom_id.total_cost or 0.00
        product_qty = bom_point.bom_id.product_qty or 0.00
        total_cost = 0.00
        if product_qty &gt; 1:
            total_cost = total_cost / product_qty
        res[bom_point.id] = total_cost
    return res
</snippet></ROW><ROW><id>19833901</id><snippet>list1 = [1,2,3,4,5,6]
dict1 = {'a':[1,11],'b':[2,234],'c':[34,6]}
set1 = set(list1)
set2 = set(t for _, v in dict1.items() for t in v)
print list(set1 - set2)
</snippet></ROW><ROW><id>19833901</id><snippet>[3, 4, 5]
</snippet></ROW><ROW><id>19833901</id><snippet>list1 = [1,2,3,4,5,6]
dict1 = {'a':[1,11],'b':[2,234],'c':[34,6]}
from itertools import chain
set1 = set(list1)
set2 = set(v for v in chain.from_iterable(dict1.values()))
print list(set1 - set2)
</snippet></ROW><ROW><id>19833926</id><snippet>QSplitter</snippet></ROW><ROW><id>19833926</id><snippet>setSizes</snippet></ROW><ROW><id>19833926</id><snippet>def onLeft(self):
    self.splitter.setSizes([1, 0])

def onBoth(self):
    self.splitter.setSizes([1, 1])

def onRight(self):
    self.splitter.setSizes([0, 1])
</snippet></ROW><ROW><id>19833926</id><snippet>stylesheet = "QSplitter::handle{background: gray; width: 2px; height: 2px;}"
self.splitter.setStyleSheet(stylesheet )
</snippet></ROW><ROW><id>19834470</id><snippet>hxs</snippet></ROW><ROW><id>19834630</id><snippet>dist([4.0, 7.0], [2.0, 9.0]) - 2.0
</snippet></ROW><ROW><id>19834740</id><snippet>try:

    [...]
except StripeError as e:
    form.payment.errors.append('the error message')
else:
    db.session.commit()
    return redirect(url_for('home'))
</snippet></ROW><ROW><id>19834873</id><snippet>hadoop jar contrib/streaming/hadoop-streaming-1.1.1.jar -file ./mapper.py \
  -mapper ./mapper.py -file ./reducer.py -reducer ./reducer.py \
  -input test/input.txt  -output test/output -file '../user_ids'
</snippet></ROW><ROW><id>19834873</id><snippet>f = open('user_ids','r')
</snippet></ROW><ROW><id>19834947</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([1,2,3,4,5])
&gt;&gt;&gt; np.mean(a)
3.0
&gt;&gt;&gt; np.mean(a[a&lt;=3])
2.0
&gt;&gt;&gt; np.mean(a[a!=4])
2.75
</snippet></ROW><ROW><id>19834947</id><snippet>np.mean(A[A!=-999])
</snippet></ROW><ROW><id>19834947</id><snippet>np.mean</snippet></ROW><ROW><id>19834947</id><snippet>masked_array</snippet></ROW><ROW><id>19834947</id><snippet>from timeit import timeit
setup = 'import numpy as np; a=np.arange(0, 1000000)'
snippets = [
    'assert np.mean(a[a!=999999]) == 499999.0',
    'm=np.ma.masked_array(a,a==999999); assert np.ma.mean(m) == 499999.0',
    'assert sum(x for x in a if x != 999999)/999999 == 499999'
]
timings = [timeit(x, setup=setup, number=10) for x in snippets]
print('\n'.join(str(x) for x in timings))
</snippet></ROW><ROW><id>19834947</id><snippet>0.0840559005737
0.0890350341797
10.4104599953
</snippet></ROW><ROW><id>19834947</id><snippet>np.mean</snippet></ROW><ROW><id>19834947</id><snippet>masked_array</snippet></ROW><ROW><id>19835028</id><snippet>getattr</snippet></ROW><ROW><id>19835028</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; getattr(sys,'exc_info')
&lt;built-in function exc_info&gt;
&gt;&gt;&gt; getattr(sys,'exc_info')()
(None, None, None)
</snippet></ROW><ROW><id>19835134</id><snippet>seen = set(item_list)

# [...]

if item not in seen:
    seen.add(item)
    item_list.append(item)
</snippet></ROW><ROW><id>19835150</id><snippet>numpy</snippet></ROW><ROW><id>19835150</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; 
&gt;&gt;&gt; A = [[4,5,7,8,-999],[3,8,5,7,-999]]
&gt;&gt;&gt; M = [np.mean([x for x in L if x &gt; -999]) for L in A]
&gt;&gt;&gt; print M
[6.0, 5.75]
</snippet></ROW><ROW><id>19835150</id><snippet>&gt;&gt;&gt; B = np.array(A)
&gt;&gt;&gt; np.average(B, axis=1, weights=B!=-999)
array([ 6.  ,  5.75])
</snippet></ROW><ROW><id>19835150</id><snippet>np.mean(A, axis=1)</snippet></ROW><ROW><id>19835150</id><snippet>np.average(A, axis=1)</snippet></ROW><ROW><id>19835150</id><snippet>average</snippet></ROW><ROW><id>19835150</id><snippet>B!=-999</snippet></ROW><ROW><id>19835150</id><snippet>1</snippet></ROW><ROW><id>19835150</id><snippet>0</snippet></ROW><ROW><id>19835150</id><snippet>False</snippet></ROW><ROW><id>19835355</id><snippet>&gt;&gt;&gt; df.loc[:, df.columns &lt;= datetime(2013, 1, 3)]
   2013-01-01  2013-01-02  2013-01-03
A    1.058112    0.883429   -1.939846
B    0.753125    1.664276   -0.619355
C    0.014437    1.125824   -1.421609
D    1.879229    1.594623   -1.499875
</snippet></ROW><ROW><id>19835355</id><snippet>map</snippet></ROW><ROW><id>19835355</id><snippet>lambda</snippet></ROW><ROW><id>19835461</id><snippet>def replace(thelist,a,b):

 assert type(thelist)==list, `thelist` + ' is not a list'

 assert type(a)==int, `a` + ' is not an integer'

 assert type(b)==int, `b` + ' is not an integer'
 if len(thelist)==0:
     return []
 return ([b] if thelist[0]==a else [thelist[0]])+replace(thelist[1:],a,b)
</snippet></ROW><ROW><id>19835726</id><snippet>#</snippet></ROW><ROW><id>19835726</id><snippet>print# ###"Testing"
</snippet></ROW><ROW><id>19835726</id><snippet>print
</snippet></ROW><ROW><id>19835726</id><snippet>#</snippet></ROW><ROW><id>19835726</id><snippet>print</snippet></ROW><ROW><id>19835852</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>19835852</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; ast.literal_eval("['11', '20', '0']")
['11', '20', '0']
</snippet></ROW><ROW><id>19835852</id><snippet>eval()</snippet></ROW><ROW><id>19835852</id><snippet>&gt;&gt;&gt; eval("__import__('sys').version")
'2.7.5 (default, Oct 28 2013, 20:45:48) \n[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2336.11.00)]'
&gt;&gt;&gt; ast.literal_eval("__import__('sys').version")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/mj/Development/Library/buildout.python/parts/opt/lib/python2.7/ast.py", line 80, in literal_eval
    return _convert(node_or_string)
  File "/Users/mj/Development/Library/buildout.python/parts/opt/lib/python2.7/ast.py", line 79, in _convert
    raise ValueError('malformed string')
ValueError: malformed string
</snippet></ROW><ROW><id>19836137</id><snippet>__init__</snippet></ROW><ROW><id>19836137</id><snippet>class A(object):
    def __init__(self):
        self.dict = {}

    def stuff(self, name):
        self.dict[name] = 'toto'
</snippet></ROW><ROW><id>19836262</id><snippet>&gt;&gt;&gt; foo = ('spam', 'ham')
&gt;&gt;&gt; bar, baz = foo
&gt;&gt;&gt; bar
'spam'
&gt;&gt;&gt; baz
'ham'
</snippet></ROW><ROW><id>19836262</id><snippet>for</snippet></ROW><ROW><id>19836262</id><snippet>list_of_tuples = [('foo', 'bar'), ('spam', 'ham')]
for value1, value2 in list_of_tuples:
    print value1, value2
</snippet></ROW><ROW><id>19836262</id><snippet>foo bar
spam ham
</snippet></ROW><ROW><id>19836262</id><snippet>enumerate()</snippet></ROW><ROW><id>19836262</id><snippet>&gt;&gt;&gt; seasons = ['Spring', 'Summer', 'Fall', 'Winter']
&gt;&gt;&gt; list(enumerate(seasons))
[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
</snippet></ROW><ROW><id>19836273</id><snippet>In [1]: df = pd.DataFrame([['a', 'x'], ['b', 'y'], ['c', 'z']],  
   ...:                           index=[10, 20, 30],  
   ...:                           columns=['first', 'second'])

In [2]: df
Out[2]: 
   first second
10     a      x
20     b      y
30     c      z

In [3]: to_change = df.index &lt;= 20

In [4]: df[to_change]['first'] = df[to_change]['second']
pandas/core/generic.py:1008: SettingWithCopyWarning: A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_index,col_indexer] = value instead
  warnings.warn(t,SettingWithCopyWarning)

In [5]: df['first'][to_change] = df['second'][to_change]
</snippet></ROW><ROW><id>19836462</id><snippet>&gt;&gt;&gt; data= ['hello','world','# ignorethis','xlable: somethingx','ylable: somethingy']
&gt;&gt;&gt; x, y, z = [item.split(':')[-1].strip() for item in data 
                                                  if not item.startswith('#')][:3]
&gt;&gt;&gt; x
'hello'
&gt;&gt;&gt; y
'world'
&gt;&gt;&gt; z
'somethingx'
</snippet></ROW><ROW><id>19836462</id><snippet>item.startswith('#')</snippet></ROW><ROW><id>19836462</id><snippet>'#'</snippet></ROW><ROW><id>19836462</id><snippet>'#'</snippet></ROW><ROW><id>19836462</id><snippet>if '#' not in item</snippet></ROW><ROW><id>19836462</id><snippet>item.split(':')</snippet></ROW><ROW><id>19836462</id><snippet>':'</snippet></ROW><ROW><id>19836462</id><snippet>&gt;&gt;&gt; 'xlable: somethingx'.split(':')
['xlable', ' somethingx']
&gt;&gt;&gt; 'hello'.split(':')
['hello']
</snippet></ROW><ROW><id>19836462</id><snippet>x, y, z, *rest = [item.split(':')[-1].strip() for item in data 
                                                 if not item.startswith('#')]
</snippet></ROW><ROW><id>19836509</id><snippet>MAX_TIMEOUT = 100 # Max seconds before we abort

stop_time = time.time() + MAX_TIMEOUT

nw=1000
abort = False
for i in range(nw):
    w_list.append(-3+0.006*i)
    chi_1=0
    chi_2=0
    k=1
    while k&lt;10 and not abort:
        l=1
        while l&lt;10 and not abort:
            n_1=0
            while n_1&lt;10 and not abort:
                n_2=0
                while n_2&lt;5 and not abort:
                    chi_2+=(e1_vecs[n_1,0]*e1_vecs[n_1,k]*e_vecs[2*n_2,0]*e_vecs[2*n_2,l])**2*(1.0/(w_list[i]+(E0-e_vals[l]-k*w_b+b*w_b)-0.001j))+(e1_vecs[n_1,0]*e1_vecs[n_1,k]*e_vecs[2*n_2+1,0]*e_vecs[2*n_2+1,l])**2*(1.0/(w_list[i]-(E0-e_vals[l]-k*w_b+b*w_b)+0.001j))
                    n_2+=1

                    # We check here if we need to abort
                    if time.time() &gt;= stop_time:
                        abort = True # This will force the while loops to end
                        print 'Aborted because we took too long!' #Probably a good idea to log this somewhere
                n_1+=1
            l+=1
        k+=1
    chi_on.append(chi_2.imag)

    if abort:
         break #No point staying in the forloop if we need to abort
</snippet></ROW><ROW><id>19836588</id><snippet>False</snippet></ROW><ROW><id>19836588</id><snippet>None</snippet></ROW><ROW><id>19836588</id><snippet>&gt;&gt;&gt; type(None)
&lt;type 'NoneType'&gt;
&gt;&gt;&gt; type('')
&lt;type 'str'&gt;
&gt;&gt;&gt; bool(None) == bool('')
True
&gt;&gt;&gt; None == ''
False
</snippet></ROW><ROW><id>19837018</id><snippet>def prepend_urls(self):
        return [
            url(
                r"^(?P&lt;resource_name&gt;%s)/(?P&lt;my_id&gt;\d+)/$"
                % self._meta.resource_name, self.wrap_view('dispatch_detail'),
                name="api_dispatch_detail_id"),
            url(
                r"^(?P&lt;resource_name&gt;%s)/(?P&lt;name&gt;[\w\d_.-]+)/$"
                % self._meta.resource_name, self.wrap_view('dispatch_detail'),
                name="api_dispatch_detail_name"),
        ]
</snippet></ROW><ROW><id>19837339</id><snippet>from django.utils.importlib import import_module
for app in settings.INSTALLED_APPS:

    try:
        mod = import_module('%s.urls' % app)
        # possibly cleanup the after the imported module?
        #  might fuss up the `include(...)` or leave a polluted namespace
    except:
        # cleanup after module import if fails,
        #  maybe you can let the `include(...)` report failures
        pass
    else:
        urlpatterns += patterns('',
            url(r'^%s/' % slugify(app), include('%s.urls' % app)
        )
</snippet></ROW><ROW><id>19837339</id><snippet>slugify</snippet></ROW><ROW><id>19837339</id><snippet>example.com/nice_looking_appname/</snippet></ROW><ROW><id>19837339</id><snippet># plugin settings conf
url_namespace = 'my_nice_plugin_url/'

# root urls.py:
url(r'^%s/' % mod.url_namespace, include(...))
# or:
url(r'^%s/' % app.settings.url_namespace, inc..
</snippet></ROW><ROW><id>19837404</id><snippet>:set tabstop=8 shiftwidth=4 softtabstop=4 expandtab shiftround
</snippet></ROW><ROW><id>19837404</id><snippet>tabstop=8</snippet></ROW><ROW><id>19837404</id><snippet>shiftwidth=4</snippet></ROW><ROW><id>19837404</id><snippet>softtabstop=4</snippet></ROW><ROW><id>19837404</id><snippet>expandtab</snippet></ROW><ROW><id>19837404</id><snippet>&gt;</snippet></ROW><ROW><id>19837404</id><snippet>&lt;</snippet></ROW><ROW><id>19837404</id><snippet>shiftround</snippet></ROW><ROW><id>19837404</id><snippet>:autocmd</snippet></ROW><ROW><id>19837404</id><snippet>autocmd FileType python setlocal ts=8 sw=4 sts=4 et sr
</snippet></ROW><ROW><id>19837683</id><snippet>lambda d=d: self.root.change_directory(d)
</snippet></ROW><ROW><id>19837683</id><snippet>lambda bound_d=d: self.root.change_directory(bound_d)
</snippet></ROW><ROW><id>19837683</id><snippet>(lambda d=d: lambda: self.root.change_directory(d))()
# or
(lambda d: lambda: self.root.change_directory(d))(d)
</snippet></ROW><ROW><id>19837756</id><snippet>&gt;&gt;&gt; [('-1' if item not in list_B else item) for item in list_A]
['-1', '-1', '2', '-1', '-1', '-1', '6', '7']
</snippet></ROW><ROW><id>19837817</id><snippet>request.host or request.host_url
</snippet></ROW><ROW><id>19837905</id><snippet>diff</snippet></ROW><ROW><id>19837905</id><snippet>df['new_column'] = df['source_column'].diff()
</snippet></ROW><ROW><id>19837936</id><snippet>IndexError</snippet></ROW><ROW><id>19837936</id><snippet>&gt;&gt;&gt; for x in range(1,11):
...     print '{0:2d} {1:3d}{2:4d}'.format(x), (x*x), (x*x*x)
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
IndexError: tuple index out of range
</snippet></ROW><ROW><id>19837936</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>19837936</id><snippet>&gt;&gt;&gt; from __future__ import print_function
&gt;&gt;&gt; for x in range(1,11):
...     print '{0:2d} {1:3d}{2:4d}'.format(x, x*x, x*x*x)
  File "&lt;stdin&gt;", line 2
    print '{0:2d} {1:3d}{2:4d}'.format(x, x*x, x*x*x)
                              ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>19837936</id><snippet>&gt;&gt;&gt; for x in range(1,11):
...     print('{0:2d} {1:3d} {2:4d}'.format(x, x*x, x*x*x))
...
 1   1    1
 2   4    8
 3   9   27
 4  16   64
 5  25  125
 6  36  216
 7  49  343
 8  64  512
 9  81  729
10 100 1000
</snippet></ROW><ROW><id>19837963</id><snippet>stdio</snippet></ROW><ROW><id>19837963</id><snippet>pexpect</snippet></ROW><ROW><id>19837963</id><snippet>subprocess</snippet></ROW><ROW><id>19837963</id><snippet>pexpect</snippet></ROW><ROW><id>19837963</id><snippet>p = pexpect.spawn(cmd,args,timeout=None) 
line = p.readline() 
while line:
    sys.stdout.write(line)
    sys.stdout.flush()
    # DO OTHER STUFF
    line = p.readline()
</snippet></ROW><ROW><id>19837963</id><snippet>p = pexpect.spawn(cmd,args,timeout=None,logfile=sys.stdout)
line = p.readline() 
while line:
    # DO OTHER STUFF
    line = p.readline()
</snippet></ROW><ROW><id>19837985</id><snippet>config.add_static_view('static', 'static', cache_max_age=3600)
</snippet></ROW><ROW><id>19837985</id><snippet>contentName.attrib["icon"] = "/static/edit.png"
</snippet></ROW><ROW><id>19838018</id><snippet>Playback</snippet></ROW><ROW><id>19838090</id><snippet>from flask import Flask
from flask.ext.sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'your db uri'

db = SQLAlchemy(app)
</snippet></ROW><ROW><id>19838090</id><snippet>from flask import Flask
from flask.ext.sqlalchemy import SQLAlchemy

db = SQLAlchemy()

def create_app():
    app = Flask(__name__)
    app.config['SQLALCHEMY_DATABASE_URI'] = 'your db uri'

    db.init_app(app)
</snippet></ROW><ROW><id>19838090</id><snippet>db.Model</snippet></ROW><ROW><id>19838090</id><snippet>db.session</snippet></ROW><ROW><id>19838122</id><snippet>class HtmlBuilder(object):

    def __init__(self):
        self.doc = None

    def createHtml(self):
        name = input("\nEnter the name for your HTML-page: ")   
        self.doc = open(name + ".html", 'w')

    def createTitle(self):
        print (t[0], file=self.doc) #&lt;!DOCTYPE html&gt;
        print (t[1], file=self.doc) #&lt;html&gt;
        print (t[2], file=self.doc) #&lt;head&gt;
        title = input("Enter your title here: ")
        print ("  &lt;title&gt;",title,"&lt;/title&gt;", file=doc)
        print (t[3], file=self.doc) #&lt;/head&gt;

    def Dispose(self):
        self.doc.flush()
        self.doc.close()
</snippet></ROW><ROW><id>19838122</id><snippet>hb = HtmlBuilder()
while True:
    menu = input("\nPress 1 to enter the file name for the HTML-page"
                 "\nPress 2 to enter title for the HTML-page"
                 "\nPress 3 to start entering code in body"
                 "\nPress 4 to exit\n")
    if menu == "1":
        hb.createHtml()
    elif menu == "2":
        hb.createTitle()
    elif menu == "3":
        hb.createBody()
    else:
        print ("Good bye!")
        break

hb.Dispose()
</snippet></ROW><ROW><id>19838122</id><snippet>print</snippet></ROW><ROW><id>19838125</id><snippet>import subprocess
subprocess.call("shell commands go in here")
</snippet></ROW><ROW><id>19838125</id><snippet>import subprocess
subprocess.call(["ping", "www.google.com"])
PING www.google.com (178.59.100.242) 56(84) bytes of data.
64 bytes from cache.google.com (178.59.100.242): icmp_req=1 ttl=54 time=19.1 ms
</snippet></ROW><ROW><id>19838231</id><snippet>temp</snippet></ROW><ROW><id>19838231</id><snippet>np.sqrt</snippet></ROW><ROW><id>19838231</id><snippet>math.sqrt</snippet></ROW><ROW><id>19838231</id><snippet>array</snippet></ROW><ROW><id>19838231</id><snippet>np.array</snippet></ROW><ROW><id>19838231</id><snippet>import numpy as np

width = 512
height = 512
scalar1 = 1
scalar2 = 2

a = np.random.random((height, width, 3))
tmp = np.zeros((height, width))
for i in xrange(width):
    for j in xrange(height):
        tmp[j,i] = np.sqrt((scalar1-a[j,i,1])**2+(scalar2-a[j,i,2])**2)

tmp2 = np.sqrt((scalar1-a[:,:,1])**2+(scalar2-a[:,:,2])**2)

np.allclose(tmp, tmp2)
</snippet></ROW><ROW><id>19838513</id><snippet>#Fibonacci number generator
a=0
b=1
print("Fibonacci number generator.")
stopNumber=input("How high do you want to go? If you want to go forever, put n.")
print(1)
while stopNumber=="n" or int(stopNumber) &gt; a+b:
    a, b = b, a+b
    print(b)
</snippet></ROW><ROW><id>19838662</id><snippet>"UPDATE randomdata SET randomString = " + readserial +" WHERE id = " + num
</snippet></ROW><ROW><id>19838662</id><snippet>i</snippet></ROW><ROW><id>19838662</id><snippet>1</snippet></ROW><ROW><id>19838816</id><snippet>def levenshtein(seq1, seq2):
    oneago = None
    thisrow = range(1, len(seq2) + 1) + [0]
    for x in xrange(len(seq1)):
        twoago, oneago, thisrow = oneago, thisrow, [0] * len(seq2) + [x + 1]
        for y in xrange(len(seq2)):
            delcost = oneago[y] + 1
            addcost = thisrow[y - 1] + 1
            subcost = oneago[y - 1] + (seq1[x] != seq2[y])
            thisrow[y] = min(delcost, addcost, subcost)
    return thisrow[len(seq2) - 1]


print levenshtein(a,b) &lt; 2
</snippet></ROW><ROW><id>19839006</id><snippet>.</snippet></ROW><ROW><id>19839006</id><snippet>,</snippet></ROW><ROW><id>19839006</id><snippet>for x in range(1.11):</snippet></ROW><ROW><id>19839006</id><snippet>for x in range(1,11):
    print ('Number: {0:2d} Square: {1:3d} Cube: {2:4d}'.format(x, x*x, x*x*x))
</snippet></ROW><ROW><id>19839075</id><snippet>plt.contour</snippet></ROW><ROW><id>19839075</id><snippet>jpg</snippet></ROW><ROW><id>19839075</id><snippet>cm.gray</snippet></ROW><ROW><id>19839075</id><snippet>imshow</snippet></ROW><ROW><id>19839075</id><snippet>gray = img.sum(-1)  # sums along the last (color) axis
</snippet></ROW><ROW><id>19839075</id><snippet>gray = np.sqrt((img*img).sum(-1)) # to do a magnitude of the color vector
</snippet></ROW><ROW><id>19839075</id><snippet>from PIL import Image
img = Image.open("/home/subhradeep/Desktop/test.jpg")
gray = img.convert('L')   # 'L' stands for 'luminosity'
gray = np.asarray(gray)
</snippet></ROW><ROW><id>19839075</id><snippet>r, g, b = np.rollaxis(img, -1)
plt.contour(r, cmap=plt.cm.Reds)
plt.contour(g, cmap=plt.cm.Greens)
plt.contour(b, cmap=plt.cm.Blues)
</snippet></ROW><ROW><id>19839075</id><snippet>scipy.misc.imread</snippet></ROW><ROW><id>19839075</id><snippet>arr = np.asarray(img)</snippet></ROW><ROW><id>19839075</id><snippet>img</snippet></ROW><ROW><id>19839075</id><snippet>PIL.Image</snippet></ROW><ROW><id>19839075</id><snippet>PIL.Image</snippet></ROW><ROW><id>19839075</id><snippet>img.convert</snippet></ROW><ROW><id>19839075</id><snippet>from scipy import misc
import scipy.misc
</snippet></ROW><ROW><id>19839294</id><snippet>class StudentResource(ModelResource):
    course = fields.ForeignKey('website.api.course.CourseResource', "course")

class CourseResource(ModelResource):
    student = fields.ForeignKey('website.api.student.StudentResource', "student")
</snippet></ROW><ROW><id>19839331</id><snippet>for POI in POIs:
    print POI, POIs[POI]
</snippet></ROW><ROW><id>19839338</id><snippet>print ", ".join(data[:-2] + [" and ".join(data[-2:])])
</snippet></ROW><ROW><id>19839338</id><snippet>&gt;&gt;&gt; data
    ['foo', 'bar', 'baaz', 'bah']
&gt;&gt;&gt; while data:
...     print ", ".join(data[:-2] + [" and ".join(data[-2:])])
...     data.pop()
...
foo, bar, baaz and bah
foo, bar and baaz
foo and bar
foo
</snippet></ROW><ROW><id>19839365</id><snippet>==</snippet></ROW><ROW><id>19839365</id><snippet>=</snippet></ROW><ROW><id>19839365</id><snippet>if char in 'aeiou':
    ...
</snippet></ROW><ROW><id>19839448</id><snippet>cnt = contours[0] # you're only checking the 1st contour here
</snippet></ROW><ROW><id>19839448</id><snippet>for cnt in contours:

    leftmost = tuple(cnt[cnt[:,:,0].argmin()][0])
    rightmost = tuple(cnt[cnt[:,:,0].argmax()][0])
    topmost = tuple(cnt[cnt[:,:,1].argmin()][0])
    bottommost = tuple(cnt[cnt[:,:,1].argmax()][0])

    rect = cv2.minAreaRect(cnt)
    box = cv2.cv.BoxPoints(rect)
    box = np.int0(box)



    M = cv2.moments(cnt)
    centroid_x = int(M['m10']/M['m00'])
    centroid_y = int(M['m01']/M['m00'])

    print (leftmost)
    print (rightmost)
    print (topmost)
    print (bottommost)

    print(centroid_x)
    print(centroid_y)

    print(rect)
    print(box)
</snippet></ROW><ROW><id>19839467</id><snippet>range(N, -1, -1) is better
</snippet></ROW><ROW><id>19839467</id><snippet>N = 10000

%timeit range(N+1)[::-1]
1000000 loops, best of 3: 767 ns per loop

%timeit range(N, -1, -1)
1000000 loops, best of 3: 334 ns per loop
</snippet></ROW><ROW><id>19839467</id><snippet>range(N+1)[::-1]</snippet></ROW><ROW><id>19839467</id><snippet>range(N, -1, -1)</snippet></ROW><ROW><id>19839485</id><snippet>EventManagement.Listen()</snippet></ROW><ROW><id>19839485</id><snippet># added constants
LEFT_KEY = K_a
RIGHT_KEY = K_d
LURU, LDRU, LURD, LDRD = range(4)  # velocity states
LD, RD, LU, RU = range(4)  # velocity key events
VEL_EVENTS = {LD, RD, LU, RU}  # all possible velocity key events
MAX_VELOCITY = 200

class EventManagement(object):
''' Handles keyboard event's.
Toggles player variables according to the event's.
'''
    def __init__(self, player):
        self.player = player
        self.state = LURU

    def is_doneloop(self, flag):
        global is_doneloop
        is_doneloop = flag
        return is_doneloop

    def listen(self):
        ''' Toggles player variables according to keyboard/mouse input.
        '''
        for event in pygame.event.get():
            vel_event = None

            if event.type == QUIT:
                self.is_doneloop(True)
                break

            if event.type == KEYDOWN:
                if event.key == LEFT_KEY:
                    vel_event = LD
                elif event.key == RIGHT_KEY:
                    vel_event = RD

            if event.type == KEYUP:
                if event.key == K_ESCAPE:
                    self.is_doneloop(True)
                    break
                if event.key == LEFT_KEY:
                    vel_event = LU
                elif event.key == RIGHT_KEY:
                    vel_event = RU

            if vel_event in VEL_EVENTS:
                if self.state == LURU:
                    if vel_event == LD:
                        self.player.velocity_goal.x = -MAX_VELOCITY
                        self.state = LDRU
                    elif vel_event == RD:
                        self.player.velocity_goal.x = MAX_VELOCITY
                        self.state = LURD
                elif self.state == LDRU:
                    if vel_event == RD:
                        self.state = LDRD
                    elif vel_event == LU:
                        self.state = LURU
                        self.player.velocity_goal.x = 0
                elif self.state == LURD:
                    if vel_event == LD:
                        self.state = LDRD
                    elif vel_event == RU:
                        self.state = LURU
                        self.player.velocity_goal.x = 0
                elif self.state == LDRD:
                    if vel_event == LU:
                        self.state = LURD
                        self.player.velocity_goal.x = MAX_VELOCITY
                    elif vel_event == RU:
                        self.state = LDRU
                        self.player.velocity_goal.x = -MAX_VELOCITY

    #-------------------------------------------------------------------------
</snippet></ROW><ROW><id>19839485</id><snippet>update()</snippet></ROW><ROW><id>19839485</id><snippet>    # self.position = self.position.add(self.velocity) * dt
</snippet></ROW><ROW><id>19839485</id><snippet>    box.vecPosition = box.vecPosition + box.vecVelocity * dt;
</snippet></ROW><ROW><id>19839485</id><snippet>position</snippet></ROW><ROW><id>19839485</id><snippet>velocity</snippet></ROW><ROW><id>19839485</id><snippet>dt</snippet></ROW><ROW><id>19839485</id><snippet>    self.position.x = self.position.x + (self.velocity.x * dt)
</snippet></ROW><ROW><id>19839485</id><snippet>self.velocity.x * dt</snippet></ROW><ROW><id>19839485</id><snippet>self.position.x</snippet></ROW><ROW><id>19839485</id><snippet>velocity_goal.x</snippet></ROW><ROW><id>19839485</id><snippet>200</snippet></ROW><ROW><id>19839485</id><snippet>MAX_VELOCITY = 200</snippet></ROW><ROW><id>19839485</id><snippet>Vector</snippet></ROW><ROW><id>19839485</id><snippet>class Vector(object):
    ''' Performs vector aritmetic
    '''
    def __init__(self, x, y):
        self.x, self. y = x, y

    def add(self, v):
        return Vector(self.x + v.x, self.y + v.y)

    def mult(self, s):
        return Vector(s * self.x, s * self.y)
</snippet></ROW><ROW><id>19839485</id><snippet>Vector.__add__()</snippet></ROW><ROW><id>19839485</id><snippet>Vector.__mul__()</snippet></ROW><ROW><id>19839485</id><snippet>self.ground = {'shape': self.rect, 'color': self.color}</snippet></ROW><ROW><id>19839485</id><snippet>self.player = {'shape': self.rect, 'color': self.color}</snippet></ROW><ROW><id>19839485</id><snippet>self.shape</snippet></ROW><ROW><id>19839485</id><snippet>self.color</snippet></ROW><ROW><id>19839485</id><snippet># added constants
LEFT_KEY = K_a
RIGHT_KEY = K_d
LURU, LDRU, LURD, LDRD = range(4)  # velocity states
LD, RD, LU, RU = range(4)  # velocity key events
VEL_EVENTS = {LD, RD, LU, RU}  # every velocity key event value
NEW_VELOCITY_GOAL, NEW_STATE = range(2)  # indices of EVENT_DECISION_TABLE entries
MAX_VELOCITY = 200

# non-None entries represent new velocity_goal and state value for each event for each state
EVENT_DECISION_TABLE = [
# event       LD                     RD                    LU                    RU             # cur state
    [[-MAX_VELOCITY, LDRU], [MAX_VELOCITY, LURD], [None,         None], [None,          None]], # LURU
    [[None,          None], [None,         LDRD], [0,            LURU], [None,          None]], # LDRU
    [[None,          LDRD], [None,         None], [None,         None], [0,             LURU]], # LURD
    [[None,          None], [None,         None], [MAX_VELOCITY, LURD], [-MAX_VELOCITY, LDRU]], # LDRD
]

class EventManagement(object):
    ''' Handles keyboard event's.
    Toggles player variables according to the event's.
    '''
    def __init__(self, player):
        self.player = player
        self.state = LURU

    def is_doneloop(self, flag):
        global is_doneloop
        is_doneloop = flag
        return is_doneloop

    def listen(self):
        ''' Toggles player variables according to keyboard/mouse input.
        '''
        for event in pygame.event.get():
            vel_event = None

            if event.type == QUIT:
                self.is_doneloop(True)
                break
            elif event.type == KEYDOWN:
                if event.key == LEFT_KEY:
                    vel_event = LD
                elif event.key == RIGHT_KEY:
                    vel_event = RD
            elif event.type == KEYUP:
                if event.key == K_ESCAPE:
                    self.is_doneloop(True)
                    break
                elif event.key == LEFT_KEY:
                    vel_event = LU
                elif event.key == RIGHT_KEY:
                    vel_event = RU

            if vel_event in VEL_EVENTS:
                entry = EVENT_DECISION_TABLE[self.state][vel_event]
                if entry[NEW_VELOCITY_GOAL] is not None:
                    self.player.velocity_goal.x = entry[NEW_VELOCITY_GOAL]
                if entry[NEW_STATE] is not None:
                    self.state = entry[NEW_STATE]

    #-------------------------------------------------------------------------
</snippet></ROW><ROW><id>19839485</id><snippet>PlayerData.approach()</snippet></ROW><ROW><id>19839485</id><snippet>dt</snippet></ROW><ROW><id>19839485</id><snippet>PlayerData.update()</snippet></ROW><ROW><id>19839485</id><snippet>dt</snippet></ROW><ROW><id>19839485</id><snippet>PlayerData.update()</snippet></ROW><ROW><id>19839485</id><snippet>dt</snippet></ROW><ROW><id>19839485</id><snippet># more constants
MAX_VELOCITY = 200
ACCEL_TIME = 1  # secs to accelerate to max velocity (or slow down from it)
AVG_ACCEL = MAX_VELOCITY / float(ACCEL_TIME)  # per sec
ACCEL_PER_FRAME = AVG_ACCEL / FPS

class PlayerData(object):

    ### showing updated methods only

    def approach(self, vel_goal, vel_curr, accel):
        difference = vel_goal - vel_curr
        if difference &gt; accel:
            return vel_curr + accel
        if difference &lt; -accel:
            return vel_curr - accel
        return vel_goal

    def update(self, dt):
        self.velocity.x = self.approach(self.velocity_goal.x,
                                        self.velocity.x, ACCEL_PER_FRAME)
        self.position.x = self.position.x + (self.velocity.x * dt)

        self.player['shape'].top = self.position.y
        self.player['shape'].left = self.position.x
</snippet></ROW><ROW><id>19839492</id><snippet>Other</snippet></ROW><ROW><id>19839492</id><snippet>df.replace(df.groupby('Version').sum().sort('Value', ascending=False).index[2:], 'Other').groupby('Version').sum()

         Value
Version       
Other        3
Top1        19
Top2        13
</snippet></ROW><ROW><id>19839492</id><snippet>not_top2 = df.groupby('Version').sum().sort('Value', ascending=False).index[2:]
</snippet></ROW><ROW><id>19839492</id><snippet>not_top2</snippet></ROW><ROW><id>19839492</id><snippet>Other1</snippet></ROW><ROW><id>19839492</id><snippet>Other2</snippet></ROW><ROW><id>19839492</id><snippet>Versions</snippet></ROW><ROW><id>19839492</id><snippet>dfnew  = df.replace(not_top2, 'Other')
print dfnew

  Version  Value
0    Top1     14
1    Top1      3
2    Top1      2
3    Top2      6
4    Top2      7
5   Other      1
6   Other      2
</snippet></ROW><ROW><id>19839492</id><snippet>not_top2</snippet></ROW><ROW><id>19839492</id><snippet>Version</snippet></ROW><ROW><id>19839492</id><snippet>dfnew.groupby('Version').sum()
</snippet></ROW><ROW><id>19839492</id><snippet>         Value
Version       
Other        3
Top1        19
Top2        13
</snippet></ROW><ROW><id>19839621</id><snippet>else</snippet></ROW><ROW><id>19839621</id><snippet>[(val,col) if val in span[k] else (val,row) for val in G[k] if val in span[k] or S[val][k] != 'col']
</snippet></ROW><ROW><id>19839621</id><snippet>val in G[k]</snippet></ROW><ROW><id>19839621</id><snippet>G[k]</snippet></ROW><ROW><id>19839621</id><snippet>val in span[k]</snippet></ROW><ROW><id>19839621</id><snippet>True</snippet></ROW><ROW><id>19839621</id><snippet>val not in span[k]</snippet></ROW><ROW><id>19839621</id><snippet>True</snippet></ROW><ROW><id>19839621</id><snippet>for</snippet></ROW><ROW><id>19839621</id><snippet>for val in G[k]:
    if val in span[k]:
        result.append((val,col))
    elif S[val][k] != 'col':
        result.append((val,row))
</snippet></ROW><ROW><id>19839985</id><snippet>np.dot</snippet></ROW><ROW><id>19839985</id><snippet>float32</snippet></ROW><ROW><id>19839985</id><snippet>float64</snippet></ROW><ROW><id>19839985</id><snippet>complex32</snippet></ROW><ROW><id>19839985</id><snippet>complex64</snippet></ROW><ROW><id>19839985</id><snippet>_dotblas.so</snippet></ROW><ROW><id>19839985</id><snippet>multiprocessing</snippet></ROW><ROW><id>19839985</id><snippet>flags</snippet></ROW><ROW><id>19839985</id><snippet>np.dot</snippet></ROW><ROW><id>19839985</id><snippet>&gt;&gt;&gt; X = np.random.randn(10, 4)
&gt;&gt;&gt; Y = np.random.randn(7, 4).T
&gt;&gt;&gt; X.flags
  C_CONTIGUOUS : True
  F_CONTIGUOUS : False
  OWNDATA : True
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
&gt;&gt;&gt; Y.flags
  C_CONTIGUOUS : False
  F_CONTIGUOUS : True
  OWNDATA : False
  WRITEABLE : True
  ALIGNED : True
  UPDATEIFCOPY : False
</snippet></ROW><ROW><id>19839985</id><snippet>gemm</snippet></ROW><ROW><id>19839985</id><snippet>&gt;&gt;&gt; from scipy.linalg import get_blas_funcs
&gt;&gt;&gt; gemm = get_blas_funcs("gemm", [X, Y])
&gt;&gt;&gt; np.all(gemm(1, X, Y) == np.dot(X, Y))
True
</snippet></ROW><ROW><id>19840086</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(your_html)
div = soup.findAll("div", {"class": "content"})

for tag in div: print tag.findAll("td")
#printed:
[&lt;td&gt;
                Platteb....
                &lt;br/&gt;44497 SVE....
            &lt;/td&gt;, &lt;td&gt;
                01-.......

            &lt;/td&gt;]
</snippet></ROW><ROW><id>19840099</id><snippet>write()</snippet></ROW><ROW><id>19840099</id><snippet>unicode</snippet></ROW><ROW><id>19840099</id><snippet>text</snippet></ROW><ROW><id>19840185</id><snippet>pip install extras
</snippet></ROW><ROW><id>19840264</id><snippet>soup.find()</snippet></ROW><ROW><id>19840264</id><snippet>None</snippet></ROW><ROW><id>19840264</id><snippet>[...]</snippet></ROW><ROW><id>19840264</id><snippet>__getitem__</snippet></ROW><ROW><id>19840264</id><snippet>AttributeError</snippet></ROW><ROW><id>19840264</id><snippet>&gt;&gt;&gt; None[1]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'NoneType' object has no attribute '__getitem__'
</snippet></ROW><ROW><id>19840264</id><snippet>None</snippet></ROW><ROW><id>19840264</id><snippet>Version = soup.find("meta", {"name":"generator"})
if Version is not None:
    Version = Version['content']
else:
    print "Not found"
</snippet></ROW><ROW><id>19840264</id><snippet>try:
    Version = soup.find("meta", {"name":"generator"})['content']
except (NameError, TypeError):
    print "Not found"
</snippet></ROW><ROW><id>19840264</id><snippet>NameError</snippet></ROW><ROW><id>19840264</id><snippet>TypeError</snippet></ROW><ROW><id>19840264</id><snippet>except Exception, name:</snippet></ROW><ROW><id>19840264</id><snippet>NameError</snippet></ROW><ROW><id>19840264</id><snippet>try:
    Version = soup.find("meta", {"name":"generator"})['content']
except TypeError:
    # No such meta tag found.
    print "Not found"
</snippet></ROW><ROW><id>19840349</id><snippet>distutils</snippet></ROW><ROW><id>19840349</id><snippet>from distutils.version import StrictVersion # Or LooseVersion, if you prefer

if StrictVersion('10.2.3') &gt; StrictVersion('10.2'):
    print "10.2.3 is newer"
</snippet></ROW><ROW><id>19840524</id><snippet>pip uninstall numpy
</snippet></ROW><ROW><id>19840524</id><snippet>Successfully uninstalled numpy
</snippet></ROW><ROW><id>19840524</id><snippet>pip install numpy
</snippet></ROW><ROW><id>19840524</id><snippet>Requirement already satisfied (use --upgrade to upgrade): numpy in /home/gabriel/.local/lib/python2.7/site-packages
Cleaning up...
</snippet></ROW><ROW><id>19840524</id><snippet>sudo pip install numpy
</snippet></ROW><ROW><id>19840524</id><snippet>NumPy 1.8.0, SciPy 0.12.0, Matplotlib 1.2.1</snippet></ROW><ROW><id>19840569</id><snippet>namedtuple</snippet></ROW><ROW><id>19840569</id><snippet>namedtuple._asdict()</snippet></ROW><ROW><id>19840569</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; MyStruct = namedtuple("MyStruct", "Var1 Var2 Var3")
&gt;&gt;&gt; value = MyStruct('foo', 'bar', 'baz')
&gt;&gt;&gt; value._asdict()
OrderedDict([('Var1', 'foo'), ('Var2', 'bar'), ('Var3', 'baz')])
</snippet></ROW><ROW><id>19840569</id><snippet>print 'Var1: {}'.format(value.Var1)
</snippet></ROW><ROW><id>19840569</id><snippet>str.format()</snippet></ROW><ROW><id>19840569</id><snippet>print 'Var1: {0.Var1}, Var3: {0.Var3}'.format(value)
</snippet></ROW><ROW><id>19840575</id><snippet>zip</snippet></ROW><ROW><id>19840575</id><snippet>&gt;&gt;&gt; lis = range(10)
&gt;&gt;&gt; [x+y for x, y in zip(lis, lis[1:])]
[1, 3, 5, 7, 9, 11, 13, 15, 17]
</snippet></ROW><ROW><id>19840575</id><snippet>itertools.izip</snippet></ROW><ROW><id>19840575</id><snippet>iter</snippet></ROW><ROW><id>19840575</id><snippet>from itertools import izip, tee
it1, it2 = tee(lis)   #creates two iterators from the list(or any iterable)
next(it2)             #drop the first item
print [x+y for x, y in izip(it1, it2)]
#[1, 3, 5, 7, 9, 11, 13, 15, 17]
</snippet></ROW><ROW><id>19840700</id><snippet>sys.stdout = EmittingStream(textWritten=self.normalOutputWritten) 
</snippet></ROW><ROW><id>19840700</id><snippet>stdout</snippet></ROW><ROW><id>19840816</id><snippet>def floodfill(matrix, x, y):
    #"hidden" stop clause - not reinvoking for "c" or "b", only for "a".
    if matrix[x][y] == "a":  
        matrix[x][y] = "c" 
        #recursively invoke flood fill on all surrounding cells:
        if x &gt; 0:
            floodfill(matrix,x-1,y)
        if x &lt; len(matrix[y]) - 1:
            floodfill(matrix,x+1,y)
        if y &gt; 0:
            floodfill(matrix,x,y-1)
        if y &lt; len(matrix) - 1:
            floodfill(matrix,x,y+1)
</snippet></ROW><ROW><id>19840893</id><snippet>None</snippet></ROW><ROW><id>19840893</id><snippet>Form</snippet></ROW><ROW><id>19840893</id><snippet>ModelForm</snippet></ROW><ROW><id>19840893</id><snippet>UTF-8</snippet></ROW><ROW><id>19840893</id><snippet>charset=ISO-8859-1" to have less problems with unicode characters later.</snippet></ROW><ROW><id>19840893</id><snippet>is a little bit outdated (it's used for HTML 4.01), use</snippet></ROW><ROW><id>19840893</id><snippet>def test_page(request):

    if request.method == 'POST':
        fname = request.POST.get('fname')
        display_form = False
    else:
        fname = None
        display_form = True

    variables = RequestContext(request,{'display_form': display_form, 'fname': fname})
    return render_to_response('test_page.html', variables)
</snippet></ROW><ROW><id>19840893</id><snippet>    &lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;Test Page&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
This is a test page
{% if display_form %}
    &lt;form action="." method="post"&gt;{% csrf_token %}
        FIRST NAME : &lt;input type="text" name="fname"&gt;
        &lt;input type="submit" value="register"/&gt;
    &lt;/form&gt;
{% else %}
    {{ fname }}
{% endif %}

&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>19841162</id><snippet>isinstance(basestring)</snippet></ROW><ROW><id>19841162</id><snippet>class Nameable(HasTraits)

  def __repr__(self): return "Some String Representation"

  def __getitem__(self,key):
    if key==0: return self
    elif key==1: return self.__repr__()
    else: raise KeyError
</snippet></ROW><ROW><id>19841168</id><snippet>.select</snippet></ROW><ROW><id>19841168</id><snippet>with open('file_output.html', 'w') as f:
  for tag in soup.select("#ModelTable"):
    f.write(tag.prettify())
</snippet></ROW><ROW><id>19841400</id><snippet>classes = {'Apprentice':Apprentice,'Warrior':Warrior, ...}
</snippet></ROW><ROW><id>19841400</id><snippet>selected_class = None

while True:
    charClass = raw_input('What type of training have you had (Class)? ')
    if charClass in classes:
        selected_class = classes[charClass]
        break
    else:
        print 'That is not a valid class.'
</snippet></ROW><ROW><id>19841464</id><snippet>  def reportsTo(eid, mid):
       m2 = company[eid]
       if m2 == "NULL": return False
       return m2 == mid or reportsTo(m2, mid)
</snippet></ROW><ROW><id>19841718</id><snippet>#!/usr/bin/python

from ctypes import *

class Message(Structure):

    MSG_MAX_SIZE=128
    CLT_MAX_SIZE=64

    _fields_ = [
        ("m_level", c_int),
        ("m_text",  type(create_string_buffer(MSG_MAX_SIZE))),
        ("m_client", type(create_string_buffer(CLT_MAX_SIZE)))
    ]

print Message.m_text
print Message.m_client


t = Message(100, 'abcdef' ,'flurp')

print t
print t.m_text
</snippet></ROW><ROW><id>19841718</id><snippet>&lt;Field type=c_char_Array_128, ofs=4, size=128&gt;
&lt;Field type=c_char_Array_64, ofs=132, size=64&gt;
</snippet></ROW><ROW><id>19841728</id><snippet>import pylab as plt
from matplotlib_venn import venn3, venn3_circles

v = venn3(subsets=(1,1,0,1,0,0,0))
v.get_label_by_id('100').set_text('First')
v.get_label_by_id('010').set_text('Second')
v.get_label_by_id('001').set_text('Third')
plt.title("Not a Venn diagram")
plt.show()
</snippet></ROW><ROW><id>19841810</id><snippet> def mainGrid(self,stack):
     # ...
    self.pushButton.clicked.connect(self.pushStack(self.stack))
</snippet></ROW><ROW><id>19841810</id><snippet>def pushStack(self,stack):
    # ...
    self.mainViewWidget.setLayout(self.mainGrid(self.stack))
</snippet></ROW><ROW><id>19841810</id><snippet>self.mainGrid()</snippet></ROW><ROW><id>19841810</id><snippet>self.mainGrid()</snippet></ROW><ROW><id>19841810</id><snippet>self.pushStack()</snippet></ROW><ROW><id>19841810</id><snippet>self.mainViewWidget</snippet></ROW><ROW><id>19841810</id><snippet>self.pushStack</snippet></ROW><ROW><id>19841810</id><snippet>pushButton</snippet></ROW><ROW><id>19841810</id><snippet>self.pushButton.clicked.connect(self.pushStack)
</snippet></ROW><ROW><id>19841810</id><snippet>self.pushStack</snippet></ROW><ROW><id>19841810</id><snippet>self.stack</snippet></ROW><ROW><id>19841810</id><snippet>self.pushStack()</snippet></ROW><ROW><id>19841810</id><snippet>self.stack</snippet></ROW><ROW><id>19841810</id><snippet>stack</snippet></ROW><ROW><id>19841810</id><snippet>def pushStack(self):
    # ...
    self.stack.push(item)
</snippet></ROW><ROW><id>19841875</id><snippet>Scanner_vulnfuzz</snippet></ROW><ROW><id>19841875</id><snippet>syncdb</snippet></ROW><ROW><id>19841875</id><snippet>migrate</snippet></ROW><ROW><id>19842047</id><snippet>import csv 
import sys #used for passing in the argument
file_name = sys.argv[1] #filename is argument 1
with open(file_name, 'rU') as f:  #opens PW file
    reader = csv.reader(f)
    data = list(list(rec) for rec in csv.reader(f, delimiter=',')) #reads csv into a list of lists

    for row in data:
        print row[0] #this alone will print all the computer names
        for username in row: #Trying to run another for loop to print the usernames
            print username
</snippet></ROW><ROW><id>19842047</id><snippet>for x in range(1, len(row)):
    print row[x]
</snippet></ROW><ROW><id>19842047</id><snippet>import csv 
import sys #used for passing in the argument
file_name = sys.argv[1] #filename is argument 1
with open(file_name, 'rU') as f:  #opens PW file
    reader = csv.reader(f)
    # Print every value of every row. 
    for row in reader:
        for value in row: 
            print value
</snippet></ROW><ROW><id>19842141</id><snippet>import string
import re
a = '&gt;&gt;some_crazy_string..!'
print re.sub('[%s]' % string.punctuation,'',a)
</snippet></ROW><ROW><id>19842173</id><snippet>Dictionaries</snippet></ROW><ROW><id>19842173</id><snippet>class Node</snippet></ROW><ROW><id>19842173</id><snippet>class Node:
    """Referential Structure used to create new nodes"""
    def __init__(self, data):
        """Constructor."""
        self.data = data
        self.left = None
        self.right = None
</snippet></ROW><ROW><id>19842186</id><snippet>self.methodA()</snippet></ROW><ROW><id>19842186</id><snippet>self.A</snippet></ROW><ROW><id>19842186</id><snippet>ClassA.A</snippet></ROW><ROW><id>19842186</id><snippet>ClassA.A</snippet></ROW><ROW><id>19842283</id><snippet>ssh -C -L 27017:127.0.0.1:27017 remote_user@mongohost
</snippet></ROW><ROW><id>19842315</id><snippet>a = """
one
two

three
"""
</snippet></ROW><ROW><id>19842315</id><snippet>'\none\ntwo\n\nthree\n'
</snippet></ROW><ROW><id>19842315</id><snippet>re.sub('\n([^\n])', ' \g&lt;1&gt;', a)
</snippet></ROW><ROW><id>19842315</id><snippet>' one two\n three\n'
</snippet></ROW><ROW><id>19842315</id><snippet>#!/usr/bin/python

import pydoc
import re

t = re.sub('\n([^\n])', ' \g&lt;1&gt;', pydoc.__doc__)
pydoc.__doc__ = t
help(pydoc)
</snippet></ROW><ROW><id>19842315</id><snippet>#!/usr/bin/python

import inspect
import os
import sys
import webbrowser
from pydoc import Helper

__all__ = ['MyHelper', 'old_help', 'help']


class MyHelper(Helper):

    def __init__(self):
        Helper.__init__(self)

    def getdocloc(self, object):
        global old_help
        """Return the location of module docs or None"""
        try:
            file = inspect.getabsfile(object)
        except TypeError:
            file = '(built-in)'

        docloc = os.environ.get("PYTHONDOCS", "http://docs.python.org/library")
        basedir = os.path.join(sys.exec_prefix, "lib", "python"+sys.version[0:3])
        BUILTINS_LIST = ( 'errno', 'exceptions', 'gc', 'imp', 'marshal', 'posix', 'signal', 'sys', 'thread', 'zipimport')
        if (isinstance(object, type(os)) and (object.__name__ in BUILTINS_LIST or file.startswith(basedir)) and object.__name__ not in ('xml.etree', 'test.pydoc_mod')):
            if docloc.startswith("http://"):
                docloc = "%s/%s" % (docloc.rstrip("/"), object.__name__)
            else:
                docloc = os.path.join(docloc, object.__name__ + ".html")
        else:
            docloc = None
        return docloc

    def __repr__(self):
        global old_help
        if inspect.stack()[1][3] == '?':
            return self()
            return ''
        else:
            return '&lt;HHhelp instance&gt;'

    def help(self, *args):
        print args
        global old_help
        if isinstance(args[0], object):
            docloc = self.getdocloc(args[0])
            print '********',docloc,type(docloc)
            if isinstance(docloc, str):
                if docloc.find('http://') == 0:
                    webbrowser.open(docloc)
        else: 
            old_help(args)

global old_help, help
old_help = help
help = MyHelper()
</snippet></ROW><ROW><id>19842321</id><snippet>eval</snippet></ROW><ROW><id>19842321</id><snippet>def repl(match):
    return eval(match.group(0)[3:-3])

print re.sub(r'&lt;&lt;&lt;\w+&gt;&gt;&gt;', repl, usage)
</snippet></ROW><ROW><id>19842321</id><snippet>My favorite restaurant is pizza hut
My favorite person is my sister
</snippet></ROW><ROW><id>19842524</id><snippet>%run</snippet></ROW><ROW><id>19842524</id><snippet>-i</snippet></ROW><ROW><id>19842524</id><snippet>%run -i myscript.py
</snippet></ROW><ROW><id>19842646</id><snippet>self.image_on_canvas = self.canvas.create_image(0, 0, image = ...)</snippet></ROW><ROW><id>19842646</id><snippet>self.canvas.itemconfig(self.image_on_canvas, image = ...)</snippet></ROW><ROW><id>19842646</id><snippet>from Tkinter import *

#----------------------------------------------------------------------

class MainWindow():

    #----------------

    def __init__(self, main):

        # canvas for image
        self.canvas = Canvas(main, width=60, height=60)
        self.canvas.grid(row=0, column=0)

        # images
        self.my_images = []
        self.my_images.append(PhotoImage(file = "ball1.gif"))
        self.my_images.append(PhotoImage(file = "ball2.gif"))
        self.my_images.append(PhotoImage(file = "ball3.gif"))
        self.my_image_number = 0

        # set first image on canvas
        self.image_on_canvas = self.canvas.create_image(0, 0, anchor = NW, image = self.my_images[self.my_image_number])

        # button to change image
        self.button = Button(main, text="Change", command=self.onButton)
        self.button.grid(row=1, column=0)

    #----------------

    def onButton(self):

        # next image
        self.my_image_number += 1

        # return to first image
        if self.my_image_number == len(self.my_images):
            self.my_image_number = 0

        # change image
        self.canvas.itemconfig(self.image_on_canvas, image = self.my_images[self.my_image_number])

#----------------------------------------------------------------------

root = Tk()
MainWindow(root)
root.mainloop()
</snippet></ROW><ROW><id>19842759</id><snippet>melt</snippet></ROW><ROW><id>19842759</id><snippet> pd.melt(df,id_vars=['A']) 

     A variable  value
0    1        B      2
1    5        B      6
2    9        B     10
3   13        B     14
4    1        C      3
5    5        C      7
6    9        C     11
7   13        C     15
8    1        D      4
9    5        D      8
10   9        D     12
11  13        D     16
</snippet></ROW><ROW><id>19842759</id><snippet>A</snippet></ROW><ROW><id>19842759</id><snippet> pd.melt(df,id_vars=['A']).sort('A')  

      A variable  value
 0    1        B      2
 4    1        C      3
 8    1        D      4
 1    5        B      6
 5    5        C      7
 9    5        D      8
 2    9        B     10
 6    9        C     11
 10   9        D     12
 3   13        B     14
 7   13        C     15
 11  13        D     16
</snippet></ROW><ROW><id>19842800</id><snippet>class FactoryObject(object):
    # ... Code Here ...

    def list(self, **kwargs):
         if 'some_parameter' not in kwargs:
             raise Exception('some_parameter required argument')
         # ... code that uses kwargs['some_parameter']
         return True
</snippet></ROW><ROW><id>19842800</id><snippet>&gt;&gt;&gt; orgunits.list()
Exception: some_parameter required argument
&gt;&gt;&gt; orgunits.list('my_customer')
TypeError: list() takes exactly 1 argument (2 given)
&gt;&gt;&gt; orgunits.list(some_parameter='my_customer')
True
</snippet></ROW><ROW><id>19842807</id><snippet>&gt;&gt;&gt; haystack = "abcdefabc. asdli! ndsf acba saa abe?"
&gt;&gt;&gt; needle = "abc"
&gt;&gt;&gt; for i, _ in enumerate(haystack):
...     if haystack[i:i + len(needle)] == needle:
...         print (i)
...
0
6
</snippet></ROW><ROW><id>19842974</id><snippet>Loop Begin
Check the value of a and b
If a or b is less than 0 then ask for input again
Otherwise, continue
</snippet></ROW><ROW><id>19842974</id><snippet>do-while</snippet></ROW><ROW><id>19842974</id><snippet>import math


def take_in():
    a = raw_input("Enter the value of side a -&gt; ")
    b = raw_input("Enter the value of side b -&gt; ")

    # Trying to convert to a float
    try:
        a, b = float(a), float(b)
        # If successfully converted, then we return
        if a &gt; 0 and b &gt; 0:
            return a, b
    except ValueError:
        pass
    # If we cannot return, then we return false, with a nice comment

    print "Invalid input"
    return False


def main():
    # Calling the function at least once
    valid = take_in()

    # While we are not getting valid input, we keep calling the function
    while not valid:
        # Assigning the value to valid
        valid = take_in()

    # Breaking the return tuple into a and b
    a, b = valid
    print math.sqrt(a ** 2 + b ** 2)


if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>19843088</id><snippet>In [22]: import numpy as np

In [23]: x = np.array([[-0.77947021,  0.83822138],
    ...: [ 0.15563491,  0.89537743],
    ...: [-0.0599077,  -0.71777995],
    ...: [ 0.20759636,  0.75893338]])

In [24]: np.c_[x, x[:,0] * x[:,1]]
Out[24]: 
array([[-0.77947021,  0.83822138, -0.6533686 ],
       [ 0.15563491,  0.89537743,  0.13935199],
       [-0.0599077 , -0.71777995,  0.04300055],
       [ 0.20759636,  0.75893338,  0.15755181]])
</snippet></ROW><ROW><id>19843088</id><snippet>numpy.c_</snippet></ROW><ROW><id>19843088</id><snippet>hstack</snippet></ROW><ROW><id>19843088</id><snippet>vstack</snippet></ROW><ROW><id>19843088</id><snippet>concatenate</snippet></ROW><ROW><id>19843088</id><snippet>row_stack</snippet></ROW><ROW><id>19843088</id><snippet>column_stack</snippet></ROW><ROW><id>19843088</id><snippet>r_</snippet></ROW><ROW><id>19843088</id><snippet>c_</snippet></ROW><ROW><id>19843113</id><snippet>with open(your_file_path) as f:
    lines = f.read_lines()
    lines[1] = '#MOAB -l walltime={0}'.format(new_walltime_str)

with open(your_file_path, 'w') as f:
    f.write('\n'.join(lines))
</snippet></ROW><ROW><id>19843138</id><snippet>cipher_functions = lambda afile:swap_joker2(swap_joker1(afile))
def cipher_functions(afile):
    return swap_joker2(swap_joker1(afile))

import functional #third party, not maintained. Alternatives exist
cipher_functions = functional.compose(swap_joker1, swap_joker2)
</snippet></ROW><ROW><id>19843511</id><snippet>print(key, len([item for item in value if item])) 
</snippet></ROW><ROW><id>19843511</id><snippet>ITEMS = {
    'John greased ': ['axle', 'wheel', 'wheels', 'wheel', 'engine', ''],
    'Paul alleged ': ['truth', 'crime', 'facts', 'infidelity', 'incident', ''],
    'Tracy freed ': ['animals', 'fish', 'slaves', 'slaves', 'slaves', 'pizza'],
    'Lisa plowed ': ['field', 'field', '', '', '', ''],
}

for key, value in ITEMS.items():
    #print value
    print(key, len([item for item in value if item]))
</snippet></ROW><ROW><id>19843511</id><snippet>filter</snippet></ROW><ROW><id>19843511</id><snippet>bool</snippet></ROW><ROW><id>19843511</id><snippet>print(key, len(filter(bool, value)))
</snippet></ROW><ROW><id>19843511</id><snippet>for key, value in ITEMS.items():
    #print value
    print(key, len(filter(bool, value)))
</snippet></ROW><ROW><id>19843511</id><snippet>list</snippet></ROW><ROW><id>19843511</id><snippet>filter</snippet></ROW><ROW><id>19843511</id><snippet>print(key, len(list(filter(bool, value))))</snippet></ROW><ROW><id>19843556</id><snippet>def collectDict():

     # first initialize your final_dict and dante_dict dictionary
     final_dict={}
     with open('/Users/admin/Desktop/Dante Dictionary/experimental_dict.txt','r', encoding = "utf-8") as dic:
             dante_dict = ast.literal_eval(dic.read())# reads text as a dictionary


     # loop as many times you want:
     (dante_dict,final_dict) = define_words(dante_dict,final_dict)    # call the define_words function to update your dictionaries


     # write your dictionaries

     with open('/Users/admin/Desktop/Dante Dictionary/experimental_dict.txt', 'w', encoding = 'utf-8') as outfile:
             outfile.write(str(dante_dict)) # writes source dictionary minus newly-defined term

     with open('/Users/admin/Desktop/Dante Dictionary/trial_dictionary.txt', 'w', encoding = 'utf-8') as finalfile:
             finalfile.write(str(final_dict)) 



 def define_words(dante_dict,final_dict):
      # your already written function without the initialization (first 3 lines) and file writing part

      return(dante_dict,final_dict)  # you return the dictionaries for the other function
</snippet></ROW><ROW><id>19843711</id><snippet>sql = "CREATE TABLE IF NOT EXISTS {} ( name TEXT, street TEXT, time REAL, age INTEGER )".format(*values)
</snippet></ROW><ROW><id>19843744</id><snippet>map(lambda exp: map(symbol, f(exp,symbol), expiration)
</snippet></ROW><ROW><id>19843821</id><snippet>from modules import SmallClass
from modules import AnotherClass

class BigClass(object):
    def __init__(self, server=None):
        """construct the big class"""
        self.reset_class(server)

    def reset_class(self, server=None):
        """reset the big class"""
        self.server = server
        self.small_class = SmallClass(self.server)
        self.another_class = AnotherClass(small_class)
</snippet></ROW><ROW><id>19843821</id><snippet>__init__</snippet></ROW><ROW><id>19843935</id><snippet>%</snippet></ROW><ROW><id>19843935</id><snippet>findall("%s.*" % name, info)[0]
</snippet></ROW><ROW><id>19843935</id><snippet>findall(name + ".*", info)[0]
</snippet></ROW><ROW><id>19843935</id><snippet>re</snippet></ROW><ROW><id>19843935</id><snippet>re.escape()</snippet></ROW><ROW><id>19843935</id><snippet>findall("%s.*" % re.escape(name), info)[0]
</snippet></ROW><ROW><id>19844115</id><snippet>css = """
/*
author : name
uri : link
etc
*/

bla bla bla. Blah blah
x: 10;
color: red;

/* header */
/* footer */
"""

import re

pat = r'\/\*([\S\s]*?)\*\/'

print re.findall(pat, css)
print re.search(pat, css).group()
</snippet></ROW><ROW><id>19844210</id><snippet>lines_to_add</snippet></ROW><ROW><id>19844210</id><snippet>loc</snippet></ROW><ROW><id>19844210</id><snippet>lines = fp.readlines()
new_lines = lines[:loc] + lines_to_add + lines[loc:]
</snippet></ROW><ROW><id>19844253</id><snippet>__init__</snippet></ROW><ROW><id>19844253</id><snippet>class CompanyForm(forms.ModelForm):
    s_address = forms.CharField(label='Address', max_length=500, required=False)

    def __init__(self, *args, **kwargs):
        super(CompanyForm, self).__init__(*args, **kwargs)
        self.fields['s_address'].initial = self.instance.address.address1

    def save(self, commit=True):
        model = super(CompanyForm, self).save(commit=False)
        saddr = self.cleaned_data['s_address']
        if saddr:
            if model.address:
                model.address.address1 = saddr
                model.address.save()
            else:
                model.address = Address.objects.create(address1=saddr)
                # or you can try to look for appropriate address in Address table first
                # try:
                #     model.address = Address.objects.get(address1=saddr)
                # except Address.DoesNotExist:
                #     model.address = Address.objects.create(address1=saddr)

        if commit:
            model.save()

        return model

    class Meta:
        exclude = ('address',) # exclude form own address field
</snippet></ROW><ROW><id>19844253</id><snippet>&lt;div class="control-group"&gt;
    {{ form.s_address }}
&lt;/div&gt;
</snippet></ROW><ROW><id>19844463</id><snippet>r'&lt;\/div&gt; &lt;img src="[.]{3}" title"(.*)"&gt;$'
</snippet></ROW><ROW><id>19844463</id><snippet>.</snippet></ROW><ROW><id>19844463</id><snippet>\</snippet></ROW><ROW><id>19844463</id><snippet>/ /</snippet></ROW><ROW><id>19844463</id><snippet>*.</snippet></ROW><ROW><id>19844463</id><snippet>.*</snippet></ROW><ROW><id>19844463</id><snippet>re.match</snippet></ROW><ROW><id>19844463</id><snippet>re.search</snippet></ROW><ROW><id>19844463</id><snippet>re.search()</snippet></ROW><ROW><id>19844463</id><snippet>re.match()</snippet></ROW><ROW><id>19844463</id><snippet>&gt;&gt;&gt; pattern = r'&lt;\/div&gt; &lt;img src="[.]{3}" title"(.*)"&gt;$'
&gt;&gt;&gt; prog = re.compile(pattern)
&gt;&gt;&gt; prog.search(string)
&lt;_sre.SRE_Match object at 0xb5dcf920&gt;
</snippet></ROW><ROW><id>19844490</id><snippet>def set_path(someDict, path, value):
    for x in path[::-1]:
        value = {x: value}
    return deepupdate(someDict, value)


def deepupdate(original, update):
    for key, value in original.items(): 
        if not key in update:
            update[key] = value
        elif isinstance(value, dict):
            deepupdate(value, update[key]) 
    return update


person = {}
person = set_path(person, ['name'], 'Shalom')
person = set_path(person, ['address', 'city'], 'Toronto')
person = set_path(person, ['address', 'street'], 'Baddessa')

pprint(person)
</snippet></ROW><ROW><id>19844490</id><snippet>{
    'address': {
        'city': 'Toronto',
        'street': 'Baddessa'
    },
    'name': 'Shalom'
}
</snippet></ROW><ROW><id>19844604</id><snippet>enumerate</snippet></ROW><ROW><id>19844604</id><snippet>list comprehension</snippet></ROW><ROW><id>19844604</id><snippet>&gt;&gt;&gt; s = "asd#1-2#qwe"
&gt;&gt;&gt; [i for i, c in enumerate(s) if c=='#']
[3, 7]
</snippet></ROW><ROW><id>19844604</id><snippet>'#'</snippet></ROW><ROW><id>19844604</id><snippet>str.rfind</snippet></ROW><ROW><id>19844604</id><snippet>&gt;&gt;&gt; s.rfind('#')
7
</snippet></ROW><ROW><id>19844604</id><snippet>regex</snippet></ROW><ROW><id>19844604</id><snippet>&gt;&gt;&gt; s = "asd##1-2####qwe"
&gt;&gt;&gt; import re
#Find index of all '##' in s
&gt;&gt;&gt; [m.start() for m in re.finditer(r'(?=##)', s)]
[3, 8, 9, 10]
</snippet></ROW><ROW><id>19844819</id><snippet>\\server\share\distribution\python.exe \\server\share\scripts\my_script.py
</snippet></ROW><ROW><id>19844973</id><snippet>&gt;&gt;&gt; df
                      Website                               Notes Other
0    http://stackoverflow.com                 home away from home     a
1  http://mapleleafs.nhl.com/                                1967     b
2                    see over  http://www.example.com/not_so_long     c
3       http://www.colts.com/            the Luck of the Hoosiers     d
</snippet></ROW><ROW><id>19844973</id><snippet>&gt;&gt;&gt; to_shift_over = df.Website.str.lower().str.contains("see over")
&gt;&gt;&gt; df.loc[to_shift_over, "Website"] = df["Notes"]
&gt;&gt;&gt; df.loc[to_shift_over, "Notes"] = ""
</snippet></ROW><ROW><id>19844973</id><snippet>&gt;&gt;&gt; df
                              Website                     Notes Other
0            http://stackoverflow.com       home away from home     a
1          http://mapleleafs.nhl.com/                      1967     b
2  http://www.example.com/not_so_long                               c
3               http://www.colts.com/  the Luck of the Hoosiers     d
</snippet></ROW><ROW><id>19844973</id><snippet>str</snippet></ROW><ROW><id>19844973</id><snippet>Series</snippet></ROW><ROW><id>19844973</id><snippet>&gt;&gt;&gt; df["Website"].str
&lt;pandas.core.strings.StringMethods object at 0xa9dcfac&gt;
&gt;&gt;&gt; df["Website"].str.lower()
0      http://stackoverflow.com
1    http://mapleleafs.nhl.com/
2                      see over
3         http://www.colts.com/
Name: Website, dtype: object
&gt;&gt;&gt; df["Website"].str.lower().str.contains("see over")
0    False
1    False
2     True
3    False
Name: Website, dtype: bool
</snippet></ROW><ROW><id>19844973</id><snippet>df</snippet></ROW><ROW><id>19844973</id><snippet>.loc</snippet></ROW><ROW><id>19844973</id><snippet>&gt;&gt;&gt; df.loc[to_shift_over]
    Website                               Notes Other
2  see over  http://www.example.com/not_so_long     c
&gt;&gt;&gt; df.loc[to_shift_over, "Website"]
2    see over
Name: Website, dtype: object
</snippet></ROW><ROW><id>19844998</id><snippet>\r</snippet></ROW><ROW><id>19844998</id><snippet>for</snippet></ROW><ROW><id>19844998</id><snippet>readline()</snippet></ROW><ROW><id>19844998</id><snippet>'rU'</snippet></ROW><ROW><id>19844998</id><snippet>f =  open('filename', 'rU')
</snippet></ROW><ROW><id>19844998</id><snippet>\r</snippet></ROW><ROW><id>19844998</id><snippet>f = open('test.txt','r')  # Opening the "wrong" way
for line in f:
    print line
</snippet></ROW><ROW><id>19844998</id><snippet>abcdef
</snippet></ROW><ROW><id>19844998</id><snippet>rU</snippet></ROW><ROW><id>19844998</id><snippet>f = open('test.txt','rU')
for line in f:
    print line
</snippet></ROW><ROW><id>19844998</id><snippet>abcdef

abcdef

abcdef

abcdef

abcdef
</snippet></ROW><ROW><id>19844998</id><snippet>f = open('test.txt','r')     #  Opening the "wrong" way again
for line in f:
    print "XXX{}YYY".format(line)
</snippet></ROW><ROW><id>19844998</id><snippet>YYYdefdef
</snippet></ROW><ROW><id>19845049</id><snippet>In [10]: df.iloc[df.index.get_indexer([2,7])]
Out[10]: 
     A    B
2  2.2  7.2
7  1.4  6.3
</snippet></ROW><ROW><id>19845093</id><snippet>second = re.search(r'(.(?!son))+', str_to_search)
#output: 'ababa'
</snippet></ROW><ROW><id>19845135</id><snippet>G</snippet></ROW><ROW><id>19845135</id><snippet>(D_neg, D, and C)</snippet></ROW><ROW><id>19845135</id><snippet>args</snippet></ROW><ROW><id>19845135</id><snippet>scipy.optimize.minimize</snippet></ROW><ROW><id>19845135</id><snippet>fun(x)</snippet></ROW><ROW><id>19845135</id><snippet>x</snippet></ROW><ROW><id>19845135</id><snippet>scipy.optimize.minimize</snippet></ROW><ROW><id>19845135</id><snippet>xp</snippet></ROW><ROW><id>19845135</id><snippet>fun(xp)</snippet></ROW><ROW><id>19845135</id><snippet>fun(x)</snippet></ROW><ROW><id>19845135</id><snippet>x</snippet></ROW><ROW><id>19845135</id><snippet>x</snippet></ROW><ROW><id>19845135</id><snippet>fun</snippet></ROW><ROW><id>19845135</id><snippet>fun(x, y)</snippet></ROW><ROW><id>19845135</id><snippet>y</snippet></ROW><ROW><id>19845135</id><snippet>args</snippet></ROW><ROW><id>19845135</id><snippet>scipy.optimize.minimize</snippet></ROW><ROW><id>19845135</id><snippet>args</snippet></ROW><ROW><id>19845135</id><snippet>fun</snippet></ROW><ROW><id>19845135</id><snippet>fun(x, *args)</snippet></ROW><ROW><id>19845135</id><snippet>x</snippet></ROW><ROW><id>19845135</id><snippet>args</snippet></ROW><ROW><id>19845135</id><snippet>G</snippet></ROW><ROW><id>19845135</id><snippet>G</snippet></ROW><ROW><id>19845135</id><snippet>(D_neg, D, C)</snippet></ROW><ROW><id>19845287</id><snippet>max</snippet></ROW><ROW><id>19845287</id><snippet>&gt;&gt;&gt; max(testDict, key=lambda x:len(testDict[x]))
32
</snippet></ROW><ROW><id>19845287</id><snippet>&gt;&gt;&gt; testDict = {76: [4], 32: [2, 4, 7, 3], 56: [2, 58, 59], 10: [1, 2, 3, 4]}
&gt;&gt;&gt; mx = max(len(x) for x in testDict.itervalues())
&gt;&gt;&gt; [k for k, v in testDict.iteritems() if len(v)==mx]
[32, 10]
</snippet></ROW><ROW><id>19845522</id><snippet>i = i + "%ray" % (i[0]) 
</snippet></ROW><ROW><id>19845522</id><snippet>i = i + "%say" % (i[0]) 
</snippet></ROW><ROW><id>19845602</id><snippet>from numpy import sqrt   # leave this outside the function
from scipy.optimize import fsolve

#  here it is     V
def terminalV(Vt, *data):
    ro_p, ro, D_p, mi, g = data   # automatic unpacking, no need for the 'i for i'
    return sqrt((4*g*(ro_p - ro)*D_p)/(3*C_d(Re(data, Vt))*ro)) - Vt

data = (1800, 994.6, 0.208e-3, 8.931e-4, 9.80665)
Vt0 = 1
Vt = fsolve(terminalV, Vt0, args=data)
</snippet></ROW><ROW><id>19845602</id><snippet>fsolve</snippet></ROW><ROW><id>19845602</id><snippet>terminalV</snippet></ROW><ROW><id>19845602</id><snippet>Vt0</snippet></ROW><ROW><id>19845602</id><snippet>data</snippet></ROW><ROW><id>19845602</id><snippet>data = (1800, 994.6, 0.208e-3, 8.931e-4, 9.80665)
Vt0 = 1
terminalV(Vt0, *data)
</snippet></ROW><ROW><id>19845602</id><snippet>terminalV(Vt0, 1800, 994.6, 0.208e-3, 8.931e-4, 9.80665)
</snippet></ROW><ROW><id>19845629</id><snippet>json</snippet></ROW><ROW><id>19845665</id><snippet>def home(request):
    if request.method == 'POST':
        data = request.POST['variable']
</snippet></ROW><ROW><id>19845665</id><snippet>variable</snippet></ROW><ROW><id>19845780</id><snippet>a = [x1, x2, x3]
b = [y1, y2, y3]
c = ['g^', 'g-', 'g+']
</snippet></ROW><ROW><id>19845780</id><snippet>zip(a, b, c)</snippet></ROW><ROW><id>19845780</id><snippet>[(x1, y1, 'g^'), (x2, y2, 'g-'), (x3, y3, 'g+')]
</snippet></ROW><ROW><id>19845780</id><snippet>list_of_tuples = zip(a, b, c)
denormalized = [x for tup in list_of_tuples for x in tup]
plot(*denormalized)
</snippet></ROW><ROW><id>19845780</id><snippet>[x for tup in list_of_tuples for x in tup]</snippet></ROW><ROW><id>19845780</id><snippet>for x in tup</snippet></ROW><ROW><id>19845780</id><snippet>tup</snippet></ROW><ROW><id>19845780</id><snippet>list_of_tuples</snippet></ROW><ROW><id>19845780</id><snippet>denormalized</snippet></ROW><ROW><id>19845780</id><snippet>[x1, y2, 'g^', x2, y2, 'g-', x3, y3, 'g+']
</snippet></ROW><ROW><id>19845780</id><snippet>denormalized = []
for tup in list_of_tuples:
    for x in tup:
        denormalized.append(x)
</snippet></ROW><ROW><id>19846041</id><snippet>class UserProfile(models.Model):
    user = models.OneToOneField(User)
    .....


class UserProfileForm(ModelForm):
    pass
    class Meta:
        model = UserProfile
        exclude = (user,) # you need to exclude user
</snippet></ROW><ROW><id>19846041</id><snippet>def user_profile_update(request):
    if not request.user.is_authenticated():
        return HttpResponseRedirect('/keenhome/accounts/login/')
    UserProfile = request.user.get_profile()
    if request.method == 'POST':
        form=UserProfileForm(request.POST)
        if form.is_valid():
            UserProfile.name = form.cleaned_data["name"]
            UserProfile.productNo = form.cleaned_data["productNo"]
            UserProfile.location = form.cleaned_data["location"]
            UserProfile.average_temp = form.cleaned_data["average_temp"]

            #problem happens here:
            UserProfile.home_type = form.cleaned_data["home_type"]

            UserProfile.save()
            return HttpResponseRedirect('/keenhome/accounts/user_profile/')
        else:
            form = UserProfileForm()      
            return render_to_response("polls/user_profile_update.html", {'form':form}, context_instance=RequestContext(request))

    else:
        form = UserProfileForm()
        return render_to_response("polls/user_profile_update.html", {'form':form}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>19846041</id><snippet>def user_profile_update(request):
    if not request.user.is_authenticated():
        return HttpResponseRedirect('/keenhome/accounts/login/')

    form = UserProfileForm(request.POST or None)

    if form.is_valid():
        form = form.save(commit=False) 
        form.user = request.user# because user is excluded
        form.save()
        #code
    else:
        #code

    return render_to_response("polls/user_profile_update.html", {'form':form}, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>19846104</id><snippet>if</snippet></ROW><ROW><id>19846104</id><snippet>else</snippet></ROW><ROW><id>19846104</id><snippet>if</snippet></ROW><ROW><id>19846104</id><snippet>(define (fib n)
  (if (= n 1)
      0
      (if (= n 2)
          1
          (+ (fib (- n 1)) (fib (- n 2))))))
</snippet></ROW><ROW><id>19846104</id><snippet>cond</snippet></ROW><ROW><id>19846104</id><snippet>if</snippet></ROW><ROW><id>19846104</id><snippet>(define (fib n)
  (cond ((= n 1) 0)
        ((= n 2) 1)
        (else (+ (fib (- n 1)) (fib (- n 2))))))
</snippet></ROW><ROW><id>19846104</id><snippet>if</snippet></ROW><ROW><id>19846104</id><snippet>else</snippet></ROW><ROW><id>19846104</id><snippet>when</snippet></ROW><ROW><id>19846104</id><snippet>fibonacci</snippet></ROW><ROW><id>19846104</id><snippet>0</snippet></ROW><ROW><id>19846104</id><snippet>n</snippet></ROW><ROW><id>19846104</id><snippet>0</snippet></ROW><ROW><id>19846104</id><snippet>1</snippet></ROW><ROW><id>19846104</id><snippet>n</snippet></ROW><ROW><id>19846104</id><snippet>1</snippet></ROW><ROW><id>19846227</id><snippet>--always-copy</snippet></ROW><ROW><id>19846227</id><snippet>shutil.copyfile(py_executable_base, full_pth)</snippet></ROW><ROW><id>19846227</id><snippet>shutil.copyfile(py_executable, full_pth)</snippet></ROW><ROW><id>19846377</id><snippet>return [[x/10] for x in tup]
</snippet></ROW><ROW><id>19846377</id><snippet>&gt;&gt;&gt; def div(*tup):
...     return [[x/10] for x in tup]
...
&gt;&gt;&gt; div(100,50,30)
[[10], [5], [3]]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19846451</id><snippet>&gt;&gt;&gt; cluster_count = np.max(clusters)+1
&gt;&gt;&gt; doc_freq = np.zeros((cluster_count, dataset.shape[1]), dtype=dataset.dtype)
&gt;&gt;&gt; for j in xrange(cluster_count):
...     doc_freq[j] = np.sum(dataset[clusters == j], axis=0)
... 
&gt;&gt;&gt; doc_freq
array([[1, 2, 2, 6, 0],
       [4, 7, 2, 3, 3]])
</snippet></ROW><ROW><id>19846458</id><snippet>scipy.spatial.ConvexHull</snippet></ROW><ROW><id>19846667</id><snippet>b='4'
formula = "2*x"
formula = formula.replace("x", "%d")
Result = eval(formula % int(b))
</snippet></ROW><ROW><id>19846691</id><snippet>class MyClass:
    somevar = 'someval'

    def _func_to_be_threaded(self):
        # main body

    def func_to_be_threaded(self):
        threading.Thread(target=self._func_to_be_threaded).start()
</snippet></ROW><ROW><id>19846691</id><snippet>def threaded(fn):
    def wrapper(*args, **kwargs):
        threading.Thread(target=fn, args=args, kwargs=kwargs).start()
    return wrapper

class MyClass:
    somevar = 'someval'

    @threaded
    def func_to_be_threaded(self):
        # main body
</snippet></ROW><ROW><id>19846710</id><snippet>json.load()</snippet></ROW><ROW><id>19846710</id><snippet>import json

with open('D:/Users/Vik/Downloads/exampleData.json') as data_file:
    data = json.load(data_file)
</snippet></ROW><ROW><id>19846710</id><snippet>[</snippet></ROW><ROW><id>19846731</id><snippet>pip freeze</snippet></ROW><ROW><id>19846731</id><snippet>pip freeze</snippet></ROW><ROW><id>19846731</id><snippet>requirements.txt</snippet></ROW><ROW><id>19846731</id><snippet>egrep -h -R --include='*.py' '^(import|from) ' myproject/ | cut -d. -f1 | awk '{ print $2 }' | sort -u
</snippet></ROW><ROW><id>19846760</id><snippet>None</snippet></ROW><ROW><id>19846760</id><snippet>alist</snippet></ROW><ROW><id>19846760</id><snippet>sum &lt; x</snippet></ROW><ROW><id>19846760</id><snippet>True</snippet></ROW><ROW><id>19846760</id><snippet>global sum</snippet></ROW><ROW><id>19846760</id><snippet>sum</snippet></ROW><ROW><id>19846760</id><snippet>elif sum &gt; y:</snippet></ROW><ROW><id>19846760</id><snippet>sum &lt; x</snippet></ROW><ROW><id>19846760</id><snippet>sum &gt;= x</snippet></ROW><ROW><id>19846760</id><snippet>True</snippet></ROW><ROW><id>19846878</id><snippet>telnetlib.Telnet.expect()</snippet></ROW><ROW><id>19846878</id><snippet>import telnetlib

t = telnetlib.Telnet()
t.open('horizons.jpl.nasa.gov', 6775)

expect = ( ( r'Horizons&gt;', 'DES=C/2012 X1\n' ),
           ( r'Continue.*:', 'y\n' ),
           ( r'Select.*E.phemeris.*:', 'E\n'),
           ( r'Observe.*:', 'o\n' ),
           ( r'Coordinate center.*:', 'H06\n' ),
           ( r'Confirm selected station.*&gt;', 'y\n'),
           ( r'Accept default output.*:', 'y\n'),
           ( r'Starting *UT.* :', '2013-Nov-7 09:00\n' ),
           ( r'Ending *UT.* :', '2013-Nov-17 09:00\n' ),
           ( r'Output interval.*:', '1d\n' ),
           ( r'Select table quant.* :', '1,4,9,19,20,24\n' ),
           ( r'Scroll . Page: .*%', ' '),
           ( r'Select\.\.\. .A.gain.* :', 'X\n' )
)

with open('results.txt', 'w') as fp:
    while True:
        try:
            answer = t.expect(list(i[0] for i in expect), 10)
        except EOFError:
            break
        fp.write(answer[2])
        fp.flush()
        t.write(expect[answer[0]][1])
</snippet></ROW><ROW><id>19847186</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>19847186</id><snippet>urls.py</snippet></ROW><ROW><id>19847186</id><snippet>/path/to/PROJECT/manage.py
/path/to/PROJECT/urls.py
/path/to/PROJECT/APP/views.py

url(r'^$', 'APP.views.index', name='index'), # when index is a function in APP.views

INSTALLED_APPS = (
    'APP',
)
</snippet></ROW><ROW><id>19847186</id><snippet>/path/to/PROJECT/manage.py
/path/to/PROJECT/urls.py
/path/to/PROJECT/PROJECT/APP/views.py

url(r'^$', 'PROJECT.APP.views.index', name='index'), # when index is a function in APP.views
INSTALLED_APPS = (
    'PROJECT.APP',
)
</snippet></ROW><ROW><id>19847186</id><snippet>manage.py</snippet></ROW><ROW><id>19847186</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>19847186</id><snippet>urls.py</snippet></ROW><ROW><id>19847186</id><snippet>/path/to/pythonProjects/truprecision_us/manage.py
/path/to/pythonProjects/truprecision_us/urls.py
/path/to/pythonProjects/truprecision_us/settings.py
/path/to/pythonProjects/truprecision_us/polls/views.py
/path/to/pythonProjects/truprecision_us/polls/models.py
</snippet></ROW><ROW><id>19847186</id><snippet>truprecision_us</snippet></ROW><ROW><id>19847186</id><snippet>views.py</snippet></ROW><ROW><id>19847186</id><snippet>python manage.py startapp truprecision_us
</snippet></ROW><ROW><id>19847186</id><snippet>/path/to/pythonProjects/truprecision_us/truprecision_us/views.py
/path/to/pythonProjects/truprecision_us/truprecision_us/models.py
</snippet></ROW><ROW><id>19847186</id><snippet>INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'truprecision_us',
    'polls'
)
</snippet></ROW><ROW><id>19847186</id><snippet>urlpatterns = patterns('',
     url(r'^$', 'truprecision_us.views.index', name='main_index'),
     url(r'^polls/$', 'polls.views.index', name='poll_index'),    
)
</snippet></ROW><ROW><id>19847186</id><snippet>index</snippet></ROW><ROW><id>19847186</id><snippet>views.py</snippet></ROW><ROW><id>19847186</id><snippet>def index(request):
    # do something
    return render_to('truprecision/index.html', {'context_key':'value'})
</snippet></ROW><ROW><id>19847186</id><snippet>def index(request):
    # do something
    return render_to('truprecision/index.html', {'context_key':'value'})
</snippet></ROW><ROW><id>19847186</id><snippet>python manage.py runserver
</snippet></ROW><ROW><id>19847337</id><snippet> In [13]: s = Series(pd.to_datetime(['20130101',None]))

 In [14]: s
 0   2013-01-01 00:00:00 
 1                   NaT
 dtype: datetime64[ns]

 In [15]: def f(x):
             if isnull(x): 
                return 'null'
             return x.isoformat()    ....: 

 In [16]: s.apply(f).to_json() 

 Out[16]:
 '{"0":"2013-01-01T00:00:00","1":"null"}'
</snippet></ROW><ROW><id>19847374</id><snippet>x</snippet></ROW><ROW><id>19847374</id><snippet>wDict[item]=int(wDict[item])+...
</snippet></ROW><ROW><id>19847374</id><snippet>wDict[item]</snippet></ROW><ROW><id>19847374</id><snippet>KeyError</snippet></ROW><ROW><id>19847374</id><snippet>wDict[item] = wDict.get(item, 0) + int(x[item.index(" "):item.index(" ")+1])
</snippet></ROW><ROW><id>19847374</id><snippet>.get()</snippet></ROW><ROW><id>19847374</id><snippet>Counter</snippet></ROW><ROW><id>19847374</id><snippet>collections</snippet></ROW><ROW><id>19847396</id><snippet>List1 = []
List1.append("Blah")
List1.append("Blah1")
List1.append("Blah2")
List1.append("Blah3")
</snippet></ROW><ROW><id>19847396</id><snippet>import settings
print settings.List1
</snippet></ROW><ROW><id>19847396</id><snippet>from settings import List1
print List1
</snippet></ROW><ROW><id>19847482</id><snippet>def get_context_data(self, **kwargs):
    context = super(StateListView, self).get_context_data(**kwargs)
    context.update({'state': self.kwargs['location_state']})

    context['schools_highschool'] = context['schools_by_state'].filter(grades='9-12')

    return context
</snippet></ROW><ROW><id>19847482</id><snippet>schools_highschool</snippet></ROW><ROW><id>19847482</id><snippet>{% extends 'base.html' %}

{% block content %}

&lt;h2&gt;{{ state }}&lt;/h2&gt; #This works and shows the state based on the URL

&lt;div class="row"&gt;
    &lt;div class="col-12 col-sm-12 col-lg-12"&gt;
        &lt;ul class="nav nav-tabs" id="myTab"&gt;
            &lt;li class="active"&gt;&lt;a href="#all"&gt;All&lt;/a&gt;&lt;/li&gt;
            &lt;li&gt;&lt;a href="#high"&gt;High School&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;


    &lt;div id="content" class="tab-content"&gt;

        &lt;div class="tab-pane active" id="all"&gt;
            &lt;ul&gt;
                {% for school in schools_by_state %}
                    &lt;li&gt;{{ school.school_name }}&lt;/li&gt;
                {% endfor %}
            &lt;/ul&gt;
        &lt;/div&gt;

        &lt;div class="tab-pane" id="high"&gt;
            &lt;ul&gt;
                {% for school in schools_highschool %}
                    &lt;li&gt;{{ school.school_name }}&lt;/li&gt;
                {% endfor %}
            &lt;/ul&gt;
        &lt;/div&gt;  

    &lt;/div&gt;&lt;!-- end content --&gt;

&lt;/div&gt;&lt;!-- end row --&gt;

{% endblock content %}
</snippet></ROW><ROW><id>19847489</id><snippet>total = total + (q*1.3)
</snippet></ROW><ROW><id>19847489</id><snippet>total += (q*1.3)
</snippet></ROW><ROW><id>19847489</id><snippet>total + (q*1.3)</snippet></ROW><ROW><id>19847489</id><snippet>total</snippet></ROW><ROW><id>19847489</id><snippet>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; x + 2   # Simply returns a new value, doesn't affects `x`
3
&gt;&gt;&gt; x       # `x` is still unchanged
1
&gt;&gt;&gt; x += 1  # Assign the new value back to `x`
&gt;&gt;&gt; x       # `x` is now updated.
2
</snippet></ROW><ROW><id>19847600</id><snippet>dict.fromkeys</snippet></ROW><ROW><id>19847600</id><snippet>&gt;&gt;&gt; d = dict.fromkeys('abcdef', [])
&gt;&gt;&gt; [id(x) for x in d.values()]
[164654156, 164654156, 164654156, 164654156, 164654156, 164654156]
</snippet></ROW><ROW><id>19847600</id><snippet>dict comprehension</snippet></ROW><ROW><id>19847600</id><snippet>&gt;&gt;&gt; d = {k:[] for k in  'abcdef'}
&gt;&gt;&gt; [id(x) for x in d.values()]
[164621484, 164653580, 164331340, 164653804, 164653900, 164653836]
</snippet></ROW><ROW><id>19847600</id><snippet>a = {round(x*0.1,1): [0, 0] for _ in range(10)}
</snippet></ROW><ROW><id>19847654</id><snippet>%Z</snippet></ROW><ROW><id>19847654</id><snippet>datetime.strptime('2013-11-05T20:24:51+0000', '%Y-%m-%dT%H:%M:%S+%f')
</snippet></ROW><ROW><id>19847654</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.strptime('2013-11-05T20:24:51+0000', '%Y-%m-%dT%H:%M:%S%Z')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/_strptime.py", line 325, in _strptime
    (data_string, format))
ValueError: time data '2013-11-05T20:24:51+0000' does not match format '%Y-%m-%dT%H:%M:%S%Z'
&gt;&gt;&gt; datetime.strptime('2013-11-05T20:24:51+0000', '%Y-%m-%dT%H:%M:%S+%f')
datetime.datetime(2013, 11, 5, 20, 24, 51)
</snippet></ROW><ROW><id>19847728</id><snippet>raw_input</snippet></ROW><ROW><id>19847728</id><snippet>while index &lt; len(stringToCount):
      # if an element in the string is in the vowels
    if stringToCount[index] in vowels:
          # then add 1 to the vowel count
        vowels += 1
        index += 1
    # otherwise, add 1 to the consonant count
    elif stringToCount[index] != vowels:
        consonants += 1
        index += 1
      # any other entry is invalid
    else:
        print "Your entry should only include letters."
        getSelection()
</snippet></ROW><ROW><id>19847728</id><snippet>for character in stringToCount:
    if character in vowelSet : # Careful with variable names, one is a list and one an integer, same for consonants.
        vowels += 1
    elif character in consonantsSet: # Need this, if something is not in vowels it could be a number.
         consonants += 1
    else:
        print "Your entry should only include letters."
</snippet></ROW><ROW><id>19847728</id><snippet>while</snippet></ROW><ROW><id>19847728</id><snippet>imho</snippet></ROW><ROW><id>19847943</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>19847943</id><snippet>syncdb</snippet></ROW><ROW><id>19848168</id><snippet>x = 'before'
a = [x for x in 1, 2, 3]
print x # this prints '3', not 'before'
</snippet></ROW><ROW><id>19848382</id><snippet>s.find('bob')</snippet></ROW><ROW><id>19848382</id><snippet>string.find</snippet></ROW><ROW><id>19848382</id><snippet>string.find</snippet></ROW><ROW><id>19848382</id><snippet>s.find</snippet></ROW><ROW><id>19848382</id><snippet>start=0</snippet></ROW><ROW><id>19848382</id><snippet>find</snippet></ROW><ROW><id>19848382</id><snippet>srch = 'bob'
start = numBobs = 0 while start &gt;= 0:
    pos = s.find(srch, start)
    if pos &lt; 0:
      break
    numBobs += 1
    start = pos + len(srch)
</snippet></ROW><ROW><id>19848472</id><snippet>NZEC</snippet></ROW><ROW><id>19848472</id><snippet>Non Zero Exit Code</snippet></ROW><ROW><id>19848472</id><snippet>KeyError</snippet></ROW><ROW><id>19848472</id><snippet>a</snippet></ROW><ROW><id>19848472</id><snippet>0</snippet></ROW><ROW><id>19848472</id><snippet>m%10</snippet></ROW><ROW><id>19848472</id><snippet>a[10]</snippet></ROW><ROW><id>19848472</id><snippet>a[0]</snippet></ROW><ROW><id>19848552</id><snippet>curl -i --form docfile=@localfilename http://wings.spectrumserver/sdm/lists
</snippet></ROW><ROW><id>19848552</id><snippet>-i</snippet></ROW><ROW><id>19848757</id><snippet>url = appscript.app("Google Chrome").windows[1].get.tabs[dt.windows[1].get.active_tab_index.get].get.URL.get
</snippet></ROW><ROW><id>19848763</id><snippet>background</snippet></ROW><ROW><id>19848763</id><snippet>if BMI &lt; 18.5:
    self.catBMI["text"] = "Grab a cheeseburger! You are underweight."
    self.catBMI["background"] = "yellow"
elif BMI &gt;= 18.5 and BMI &lt;= 24.9:
    self.catBMI["text"] = "Congratulations! You are normal!"
    self.catBMI["background"] = "green"
elif BMI &gt;= 25.0 and BMI &lt;= 29.9:
    self.catBMI["text"] = "Maybe eat some salad! You are overweight."
    self.catBMI["background"] = "orange"
elif BMI &gt;= 30.0:
    self.catBMI["text"] = "Hit the treadmills! You are obese."
    self.catBMI["background"] = "red"
else:
    pass
</snippet></ROW><ROW><id>19848763</id><snippet>self.mainloop</snippet></ROW><ROW><id>19848763</id><snippet>__init__</snippet></ROW><ROW><id>19848763</id><snippet>mainloop</snippet></ROW><ROW><id>19848763</id><snippet>def main():
    a = App()
    a.mainloop()
</snippet></ROW><ROW><id>19848763</id><snippet>BMI &lt; 18.5</snippet></ROW><ROW><id>19848763</id><snippet>BMI &gt;= 18.5</snippet></ROW><ROW><id>19848763</id><snippet>elif</snippet></ROW><ROW><id>19848763</id><snippet>else</snippet></ROW><ROW><id>19848763</id><snippet>if BMI &lt; 18.5:
    self.catBMI["text"] = "Grab a cheeseburger! You are underweight."
    self.catBMI["background"] = "yellow"
elif BMI &lt;= 24.9:
    self.catBMI["text"] = "Congratulations! You are normal!"
    self.catBMI["background"] = "green"
elif BMI &lt;= 29.9:
    self.catBMI["text"] = "Maybe eat some salad! You are overweight."
    self.catBMI["background"] = "orange"
else:
    self.catBMI["text"] = "Hit the treadmills! You are obese."
    self.catBMI["background"] = "red"
</snippet></ROW><ROW><id>19848914</id><snippet>matrix = [rowMatrix]*4
</snippet></ROW><ROW><id>19848914</id><snippet>matrix[0][0]</snippet></ROW><ROW><id>19848920</id><snippet>food_location</snippet></ROW><ROW><id>19848920</id><snippet>[x,y,0,0,0]</snippet></ROW><ROW><id>19848920</id><snippet>[x,y,0,0,0]</snippet></ROW><ROW><id>19848920</id><snippet>random.sample(grid_list, 4)
</snippet></ROW><ROW><id>19848970</id><snippet>from google.appengine.api import datastore
from google.appengine.api import datastore_errors

def get_entities(keys):
    rpc = datastore.GetRpcFromKwargs({})
    keys, multiple = datastore.NormalizeAndTypeCheckKeys(keys)
    entities = None
    try:
        entities = datastore.Get(keys, rpc=rpc)
    except datastore_errors.EntityNotFoundError:
        assert not multiple

    return entities

def put_entities(entities):
    rpc = datastore.GetRpcFromKwargs({})
    keys = datastore.Put(entities, rpc=rpc)
    return keys
</snippet></ROW><ROW><id>19848970</id><snippet>x = Car.query(keys_only=True).fetch(100)
results = get_entities([i.to_old_key() for i in x])

for i in results:
    i['production_year'] = unicode(i['production_year'])

put_entities(results)
</snippet></ROW><ROW><id>19848970</id><snippet>datastore.NormalizeAndTypeCheckKeys</snippet></ROW><ROW><id>19849042</id><snippet>n_samples, n_features = X.shape
</snippet></ROW><ROW><id>19849042</id><snippet>featureMat = np.array([[ 10, 30, 40, 50],
                       [ 5,  6,  7,  8],
                       [ 54, 75, 6,  56],
                       [ 65, 34, 23, 22]])
</snippet></ROW><ROW><id>19849078</id><snippet>from matplotlib.pyplot import axes, pie, show, figure, subplot
import matplotlib.gridspec as gridspec

fig = figure(facecolor = 'k')

ax1 = subplot(111, axisbg='k')
ax1.pie([1,2,3,4])
ax1.set_frame_on(True)
ax1.spines['bottom'].set_color('w')
ax1.spines['left'].set_color('w')
ax1.spines['top'].set_color('w')
ax1.spines['right'].set_color('w')
</snippet></ROW><ROW><id>19849117</id><snippet>In [1]: import networkx as nx

In [2]: G = nx.read_gexf('first.gexf')

In [3]: G.edges(data=True)
Out[3]: [('1', '0', {'id': '0'})]

In [4]: G.add_edge(1,2,id=1)

In [5]: G.edges(data=True)
Out[5]: [('1', '0', {'id': '0'}), (2, 1, {'id': 1})]
</snippet></ROW><ROW><id>19849180</id><snippet>FancyFooBar</snippet></ROW><ROW><id>19849180</id><snippet>FancyFooBarException</snippet></ROW><ROW><id>19849180</id><snippet>class FancyFooBarException (Exeption):
    pass
</snippet></ROW><ROW><id>19849180</id><snippet>A</snippet></ROW><ROW><id>19849180</id><snippet>B</snippet></ROW><ROW><id>19849180</id><snippet>class AException (FancyFooBarException):
    pass

class BException (FancyFooBarException):
    pass

# ...
</snippet></ROW><ROW><id>19849180</id><snippet>try:
    fancyfoobar.someMethod()
except fancyfoobar.AException:
    print('AException!')
except fancyfoobar.FancyFooBarException:
    print('One of the other exceptions')
except Exception:
    Print('Any other exception.. we do not really want to catch this though')
</snippet></ROW><ROW><id>19849483</id><snippet>plt.rcParams['xtick.labelsize'] = "xx-small"
plt.rcParams['ytick.labelsize'] = "xx-small"
</snippet></ROW><ROW><id>19849584</id><snippet>dict</snippet></ROW><ROW><id>19849584</id><snippet>system_a_devices = {"host1.test.local": "Test 1 Group", "host5.testing.lan": "LAN Test Group", "server5.hello.local": "Hello Corporation, Inc.", "desktop1.corp.tld": "Corporate TLD, Ltd."}
system_b_devices = {"desktop1.corp.tld": "Corporate TLD, Ltd.", "host1.test.local": "Test One Group", "server6.hello.local": "Hello Corporation, Inc."}
</snippet></ROW><ROW><id>19849584</id><snippet>system_a_unique = [tup for tup in system_a_devices.items() if tup[0] not in system_b_devices]
system_b_unique = [tup for tup in system_b_devices.items() if tup[0] not in system_a_devices]
both_systems = [tup for tup in system_b_devices.items() if tup[0] in system_a_devices]
</snippet></ROW><ROW><id>19849593</id><snippet>Frameworks</snippet></ROW><ROW><id>19849593</id><snippet>Resources</snippet></ROW><ROW><id>19849593</id><snippet>python</snippet></ROW><ROW><id>19849593</id><snippet>Frameworks</snippet></ROW><ROW><id>19849593</id><snippet>Resources</snippet></ROW><ROW><id>19849593</id><snippet>MacOS</snippet></ROW><ROW><id>19849593</id><snippet>py2app</snippet></ROW><ROW><id>19849593</id><snippet>ruby2app</snippet></ROW><ROW><id>19849593</id><snippet>lua2app</snippet></ROW><ROW><id>19849593</id><snippet>Applications</snippet></ROW><ROW><id>19849593</id><snippet>Library</snippet></ROW><ROW><id>19849593</id><snippet>py2exe</snippet></ROW><ROW><id>19849593</id><snippet>py2app</snippet></ROW><ROW><id>19849654</id><snippet>df1.total[df2.index] += df2.total
</snippet></ROW><ROW><id>19849756</id><snippet>&gt;&gt;&gt; type(find)
&lt;type 'list'&gt;
&gt;&gt;&gt; find
[&lt;Element td at 0x101401e30&gt;, &lt;Element td at 0x101401e90&gt;, &lt;Element td at 0x101401ef0&gt;, &lt;Element td at 0x101401f50&gt;, &lt;Element td at 0x101401fb0&gt;, &lt;Element td at 0x101404050&gt;, &lt;Element td at 0x1014040b0&gt;, &lt;Element td at 0x101404110&gt;, &lt;Element td at 0x101404170&gt;, &lt;Element td at 0x1014041d0&gt;, &lt;Element td at 0x101404230&gt;, &lt;Element td at 0x101404290&gt;, &lt;Element td at 0x1014042f0&gt;, &lt;Element td at 0x101404350&gt;, &lt;Element td at 0x1014043b0&gt;, &lt;Element td at 0x101404410&gt;]
&gt;&gt;&gt; type(find[0])
&lt;class 'lxml.html.HtmlElement'&gt;
</snippet></ROW><ROW><id>19849756</id><snippet>find</snippet></ROW><ROW><id>19849756</id><snippet>&lt;class 'lxml.html.HtmlElement'&gt;</snippet></ROW><ROW><id>19849756</id><snippet>output.writerows</snippet></ROW><ROW><id>19849756</id><snippet>find</snippet></ROW><ROW><id>19849756</id><snippet>find</snippet></ROW><ROW><id>19849756</id><snippet>for item in find:
    print item.text
    output.writerows([item.text])
</snippet></ROW><ROW><id>19849756</id><snippet>for link in br.links(url_regex="product"):
    follow = br.follow_link(link)
    url = br.response().read()
    find = lh.document_fromstring(url)
    find = find.findall('.//td')
    print find
    results = []  # Create a place to store the text names
    for item in find:
        results.append(item.text)  # Store the text name of the item in the results list.
    output.writerows(results)  # Now, write the results out.  # EDITED to use correct variable here.
</snippet></ROW><ROW><id>19849756</id><snippet>results = [item.text for item in find]
output.writerows(results)
</snippet></ROW><ROW><id>19849760</id><snippet>import collections

char, num = collections.Counter(stringToData).most_common(1)[0]
print "In your string, the most frequent character is %s, which occurred %d times" % (char, num)
</snippet></ROW><ROW><id>19849760</id><snippet>collections.Counter(stringToData).most_common(1)[0]
#output: for example: ('f', 5)
</snippet></ROW><ROW><id>19849760</id><snippet>stringToData = "aaa bbb ffffffff eeeee"
char, num = collections.Counter(stringToData).most_common(1)[0]
print "In your string, the most frequent character is %s, which occurred %d times" % (char, num)
</snippet></ROW><ROW><id>19849760</id><snippet>In your string, the most frequent character is f, which occurred 8 times
</snippet></ROW><ROW><id>19849769</id><snippet>import itertools
with open('output.txt', 'w') as f:
    for n in range(1,5):
        for p in itertools.permutations('ab@F3',n):
            print(''.join(p), file=f)
</snippet></ROW><ROW><id>19849862</id><snippet>from __future__ import division
import scipy as sp
from scipy import stats
import pylab as pl

x = [1.81,1.715,1.78,1.613,1.629,1.714,1.62,1.738,1.495,1.669,1.57,1.877,1.385,2.129, \
     2.016,1.606,1.444,2.103,1.397,1.854,1.327,1.377,1.798,1.684,2.186,2.079,1.32, \
     1.452,2.272,1.313,1.762,2.308,2.285,2.328,2.288,2.345,2.237,2.078,2.057,1.505, \
     2.595,2.176,2.501,0.942,2.424,2.49,2.65,1.303,2.43,2.241,0.897,1.731,2.464,1.638, \
     0.867,2.392,3.248,2.608,2.733,0.745,2.715,3.078,2.571,0.771,1.071,2.574,3.343, \
     2.835,2.629,3.421,0.642,2.571,2.698,0.595,2.912,0.563,2.832,2.636,3.149,2.522, \
     0.836,0.894,0.447,1.304,1.132,2.488,3.363,2.961,1.317,2.387,0.036,2.199,0.356, \
     3.036,2.103,2.894,-0.097,0.069,2.688,-0.083,0.653,3.247,3.045,3.197,2.963,2.473, \
     2.571,3.333,3.009,1.281,3.257,3.116,2.673,2.901,2.903,2.634,-0.291,-0.29,0.212]
y = [0.924,0.915,0.914,0.91,0.909,0.905,0.905,0.893,0.886,0.881,0.873,0.873,0.844, \
     0.838,0.83,0.817,0.811,0.809,0.807,0.803,0.802,0.792,0.777,0.774,0.774,0.77,0.748, \
     0.746,0.742,0.734,0.729,0.726,0.722,0.677,0.676,0.672,0.635,0.62,0.62,0.608,0.605, \
     0.587,0.586,0.578,0.571,0.569,0.549,0.544,0.535,0.53,0.529,0.513,0.499,0.497, \
     0.496,0.496,0.49,0.486,0.482,0.476,0.474,0.473,0.471,0.47,0.459,0.444,0.438,0.435, \
     0.428,0.419,0.411,0.4,0.396,0.384,0.378,0.368,0.362,0.362,0.361,0.357,0.347,0.346, \
     0.344,0.33,0.322,0.319,0.318,0.305,0.296,0.296,0.289,0.288,0.288,0.288,0.287, \
     0.286,0.283,0.283,0.278,0.274,0.264,0.259,0.248,0.244,0.241,0.239,0.238,0.237, \
     0.23,0.222,0.221,0.218,0.214,0.212,0.207,0.205,0.196,0.19,0.182]

xmin, xmax = min(x), max(x)
ymin, ymax = min(y), max(y)

# Generate KDE
x1, y1 = sp.mgrid[xmin:xmax:100j, ymin:ymax:100j]
positions = sp.vstack([x1.ravel(), y1.ravel()])
values = sp.vstack([x, y])
kernel = stats.gaussian_kde(values)
kde = sp.reshape(kernel(positions).T, x1.shape)

# plotting
CS = pl.contour(x1,y1,kde)

# ----------------------------------- our solution ------------------------------------
# processing the distances
for i,clc in enumerate(CS.collections):
    for j,pth in enumerate(clc.get_paths()):
        cts = pth.vertices
        d = sp.spatial.distance.cdist(cts,cts)
        x,y = cts[list(sp.unravel_index(sp.argmax(d),d.shape))].T
        pl.plot(x,y,':o')
        print 'Contour Level %d, Part %d'%(i,j)
# ----------------------------------- our solution ------------------------------------

pl.clabel(CS, inline=1, fontsize=10, zorder=6)
pl.axis('image')                   # don't forget using this to fix aspect ratio to 1,1

pl.show()
</snippet></ROW><ROW><id>19849891</id><snippet>min(animals, key=lambda x: animals[x]["cool_factor"]*animals[x]["popularity"])
'echidna'
max(animals, key=lambda x: animals[x]["cool_factor"]*animals[x]["popularity"])
'ostrich'
</snippet></ROW><ROW><id>19849953</id><snippet>print z_matrix</snippet></ROW><ROW><id>19849953</id><snippet>[ (18.712, 64.903, ..., -138.173)
  (17.679, 48.015, ..., -66.5854)]
</snippet></ROW><ROW><id>19849953</id><snippet>z_matrix[:,0]</snippet></ROW><ROW><id>19849953</id><snippet>print z_matrix.dtype
</snippet></ROW><ROW><id>19849953</id><snippet>z_matrix[k]</snippet></ROW><ROW><id>19849953</id><snippet>k</snippet></ROW><ROW><id>19849953</id><snippet>z_matrix['name']</snippet></ROW><ROW><id>19849953</id><snippet>'name'</snippet></ROW><ROW><id>19849953</id><snippet>np.float64</snippet></ROW><ROW><id>19849953</id><snippet>view</snippet></ROW><ROW><id>19849953</id><snippet>z_2d = z_matrix.view(np.float64).reshape(-1, len(z_matrix.dtype.names))
</snippet></ROW><ROW><id>19849953</id><snippet>col = 8  # The column number (zero-based).
col_data = z_matrix[z_matrix.dtype.names[col]]
</snippet></ROW><ROW><id>19850012</id><snippet>message = request.POST.getlist("message")
</snippet></ROW><ROW><id>19850012</id><snippet>django.http.QueryDict</snippet></ROW><ROW><id>19850012</id><snippet>getlist</snippet></ROW><ROW><id>19850012</id><snippet>HttpRequest</snippet></ROW><ROW><id>19850032</id><snippet>testSpace</snippet></ROW><ROW><id>19850032</id><snippet>sentence = sentence.split()</snippet></ROW><ROW><id>19850032</id><snippet>testStartWord</snippet></ROW><ROW><id>19850032</id><snippet>for word in sentence:
  if word[0] in ["a","e","i","o","u"]:
    word[:(len(word)-1)] = word[0]
  #More Code...
</snippet></ROW><ROW><id>19850032</id><snippet>print sentence.join()</snippet></ROW><ROW><id>19850054</id><snippet>C:\Programs Files</snippet></ROW><ROW><id>19850054</id><snippet>C:\Program Files</snippet></ROW><ROW><id>19850054</id><snippet>Program</snippet></ROW><ROW><id>19850054</id><snippet>Programs</snippet></ROW><ROW><id>19850054</id><snippet>WindowsError</snippet></ROW><ROW><id>19850066</id><snippet>{
   "kind": "drive#permission",
   "etag": "\"SQFIsIrlQ4j3H07nwR6GyVXbP4s/4mfL2lpQkyuoRKmfVUHuvQuo5DI\"",
   "id": "yyyyyyyyyyyy",
   "selfLink": "https://content.googleapis.com/drive/v2/files/1ypzfcjfxIusRz0rLoDYh49DqPUj9DdZJI3lCGLtCkn8/permissions/yyyyyyyyyyyyy",
   "name": "NAME Surname",
   "emailAddress": "KKKKK.XXXXX@gmail.com",
   "domain": "gmail.com",
   "role": "owner",
   "type": "user",
   "photoLink": "https://lh4.googleusercontent.com/-DRgxkD0Vigg/AAAAAAAAAAI/AAAAAAAAZ0g/dszVFwA6bUo/s64/photo.jpg"
}
</snippet></ROW><ROW><id>19850066</id><snippet>{
   "kind": "drive#permission",
   "etag": "\"SQFIsIrlQ4j3H07nwR6GyVXbP4s/eUBKpMiVeQhLf3_Rf4Us5qisOqU\"",
   "id": "ooooooooookkkkkkk",
   "selfLink": "https://content.googleapis.com/drive/v2/files/1IpGtyYgJ_K6b0Xp2TWuYrcCTfPrIGJoUrStMPCyWGgM/permissions/kkkkkkkkkk",
   "name": "lkajdlkj oiuaoiuoi",
   "domain": "gmail.com",
   "role": "owner",
   "type": "user",
   "photoLink": "https://lh3.googleusercontent.com/-SUCY0jPNqsA/AAAAAAAAAAI/AAAAAAAAMEk/8Y7SD9VNhHE/s64/photo.jpg"
  }
</snippet></ROW><ROW><id>19850066</id><snippet>emailAddress</snippet></ROW><ROW><id>19850111</id><snippet>if grid_list[grid_list.index(ant_position)[0] == grid_size or grid_list[grid_list.index(ant_position)][1] == grid_size:
</snippet></ROW><ROW><id>19850111</id><snippet>grid_list[grid_list.index(ant_position)[0]</snippet></ROW><ROW><id>19850111</id><snippet>grid_list[grid_list.index(ant_position)][0]</snippet></ROW><ROW><id>19850111</id><snippet>grid_list.index(ant_position)</snippet></ROW><ROW><id>19850180</id><snippet>sendall</snippet></ROW><ROW><id>19850180</id><snippet>recv</snippet></ROW><ROW><id>19850180</id><snippet>socket.on('close')</snippet></ROW><ROW><id>19850180</id><snippet>console.log(body)</snippet></ROW><ROW><id>19850180</id><snippet>data = client.recv(50)</snippet></ROW><ROW><id>19850180</id><snippet>print</snippet></ROW><ROW><id>19850180</id><snippet>on('data')</snippet></ROW><ROW><id>19850180</id><snippet>socket.on('data', function(data) {
    // your existing code here
    socket.write("Here's a response", function() {
        console.log('finish writing...');
    });
});
</snippet></ROW><ROW><id>19850183</id><snippet>myMod = compile(mySrc, '', 'exec')
exec(myMod)
foo()
</snippet></ROW><ROW><id>19850183</id><snippet>exec</snippet></ROW><ROW><id>19850183</id><snippet>foo</snippet></ROW><ROW><id>19850183</id><snippet>types.ModuleType</snippet></ROW><ROW><id>19850183</id><snippet>from types import ModuleType
…
compiled = compile(mySrc, '', 'exec')
module = ModuleType("testmodule")
exec(compiled, module.__dict__)
</snippet></ROW><ROW><id>19850372</id><snippet>    assignments = vq( dataset, centroids_list )[0]
    clusters = [[] for i in range( len( assignments ) )
    for item, clustNum in zip( dataset, assignments ):
        clusters[clustNum].append( item )
</snippet></ROW><ROW><id>19850372</id><snippet>    for cluster in clusters:
        plt.scatter([item[0] for item in cluster],[item[1] for item in cluster],color=randomColor() ) 
</snippet></ROW><ROW><id>19850481</id><snippet>len(lines)</snippet></ROW><ROW><id>19850481</id><snippet>infile.readlines()</snippet></ROW><ROW><id>19850481</id><snippet>infile.read()</snippet></ROW><ROW><id>19850481</id><snippet>infile.seek(0)</snippet></ROW><ROW><id>19850481</id><snippet>    data = infile.read()
    infile.seek(0)

    lines = infile.readlines()
    numLines = len(lines)

    x = numLines * 50
    y = numLines * 50
</snippet></ROW><ROW><id>19850520</id><snippet>legend(loc=1)
</snippet></ROW><ROW><id>19850525</id><snippet>print('Please specify a shape to draw. Type S for square')
shape = raw_input('Please specify a shape to draw:')
size = input('Please enter a size:')
chr = raw_input('Please enter a drawing character:')
valid_shape_codes ={"S":square, "T":triangle, "R":reversetriangle, "D":diagonal, "A":angle}

if shape in valid_shape_codes:
    valid_shape_codes[shape](size, chr)
else:
    print "Shape is not defined"
print''
</snippet></ROW><ROW><id>19850624</id><snippet>__pos__</snippet></ROW><ROW><id>19850800</id><snippet>nohup python -u /root/projects/myscript/myscript.py &gt; /var/tmp/stdout.log &amp;
</snippet></ROW><ROW><id>19850820</id><snippet>details</snippet></ROW><ROW><id>19850820</id><snippet>with open("/path/to/file") as myfile:
    print({"details" : myfile.read().split()})
</snippet></ROW><ROW><id>19850820</id><snippet>{'details': ['Hello', 'Bye', 'five', '98', 'G', 'mail']}
</snippet></ROW><ROW><id>19850820</id><snippet>Hello
Bye
five
98
G
mail
</snippet></ROW><ROW><id>19850820</id><snippet>with open("/path/to/file") as myfile:
    for line in myfile.readlines():
        print(line.rstrip())
</snippet></ROW><ROW><id>19850820</id><snippet>Hello
Bye
five
98
G
mail
</snippet></ROW><ROW><id>19850866</id><snippet>import numpy as np
from scipy.optimize import fmin_slsqp

# some fake data
d = 3 # dimensionality of the problem
P0 = np.arange(d*d).reshape(d, d)
P0 /= P0.sum(1, keepdims=True) # so that each row sums to 1
q = np.random.rand(2, d)       # assuming this is the structure of your q
q /= q.sum(1, keepdims=True)

# the function to minimize
def func(P, q):
    n = q.shape[-1] # or n = np.sqrt(P.size)
    P = P.reshape(n, n)
    return np.linalg.norm(np.dot(q[0], P) - q[1])**2  # no changes here, just simplified syntax

def row_sum(P0, q):
    """ row sums - 1 are zero """
    n = np.sqrt(P0.size)
    return P0.reshape(n,n).sum(1) - 1.

def non_neg(P0, q):
    """ all elements &gt;= 0 """
    return P0

P_opt = fmin_slsqp(func, P0.ravel(), args=(q,), f_eqcons=row_sum, f_ieqcons=non_neg).reshape(d, d)

assert np.allclose(P_opt.sum(1), 1)
assert np.all(P_opt &gt;= 0)
</snippet></ROW><ROW><id>19850868</id><snippet>property</snippet></ROW><ROW><id>19850868</id><snippet>class Quish(object):
    def __init__(self, value):
        self.blub = value

    @property
    def blub(self):
        print('Blub gets ' + self._blub)
        return self._blub

    @blub.setter
    def blub(self, value):
        print('Blub becomes ' + value)
        self._blub = value
</snippet></ROW><ROW><id>19850868</id><snippet>class Blub(object):
    def __get__(self, instance, owner):
        print('Blub gets ' + instance._blub)
        return instance._blub

    def __set__(self, instance, value):
        print('Blub becomes ' + value)
        instance._blub = value


class Quish(object):
    blub = Blub()

    def __init__(self, value):
        self.blub = value
</snippet></ROW><ROW><id>19850915</id><snippet>print</snippet></ROW><ROW><id>19850915</id><snippet>print(dict[name])</snippet></ROW><ROW><id>19851017</id><snippet>map</snippet></ROW><ROW><id>19851017</id><snippet>var numbers = [1, 2, 3];
var incrementedNumbers = numbers.map(function(n) { return n + 1 });
console.log(incrementedNumbers);  // =&gt; [2, 3, 4]
</snippet></ROW><ROW><id>19851017</id><snippet>map</snippet></ROW><ROW><id>19851047</id><snippet>except IOError:
    print("Error reading file! Program ends here")
    endofprogram = True
    if (endofprogram == False):
</snippet></ROW><ROW><id>19851047</id><snippet>if</snippet></ROW><ROW><id>19851047</id><snippet>endofprogram = True</snippet></ROW><ROW><id>19851047</id><snippet>endofprogram == False</snippet></ROW><ROW><id>19851047</id><snippet>if</snippet></ROW><ROW><id>19851047</id><snippet>if</snippet></ROW><ROW><id>19851363</id><snippet>&gt;&gt;&gt; True == 1
True
&gt;&gt;&gt; 
&gt;&gt;&gt; False == 0
True
</snippet></ROW><ROW><id>19851363</id><snippet>&gt;&gt;&gt; hash(True), hash(1)
(1, 1)
&gt;&gt;&gt; 
&gt;&gt;&gt; hash(False), hash(0)
(0, 0)
</snippet></ROW><ROW><id>19851363</id><snippet>True</snippet></ROW><ROW><id>19851363</id><snippet>1</snippet></ROW><ROW><id>19851363</id><snippet>False</snippet></ROW><ROW><id>19851363</id><snippet>0</snippet></ROW><ROW><id>19851363</id><snippet>True</snippet></ROW><ROW><id>19851363</id><snippet>False</snippet></ROW><ROW><id>19851363</id><snippet>1</snippet></ROW><ROW><id>19851363</id><snippet>0</snippet></ROW><ROW><id>19851363</id><snippet>1</snippet></ROW><ROW><id>19851363</id><snippet>0</snippet></ROW><ROW><id>19851363</id><snippet>-1</snippet></ROW><ROW><id>19851363</id><snippet>True</snippet></ROW><ROW><id>19851363</id><snippet>-2</snippet></ROW><ROW><id>19851363</id><snippet>False</snippet></ROW><ROW><id>19851372</id><snippet>from datetime import date, timedelta

yesterday = date.today() - timedelta(days=1)
if item_to_check.date() == yesterday:
    # yup!
</snippet></ROW><ROW><id>19851372</id><snippet>item_to_check &lt; datetime.datetime.today()
</snippet></ROW><ROW><id>19851372</id><snippet>datetime.datetime.today()</snippet></ROW><ROW><id>19851372</id><snippet>date.today()</snippet></ROW><ROW><id>19851521</id><snippet>df.index.names = ['Date']
</snippet></ROW><ROW><id>19851521</id><snippet>In [1]: df = pd.DataFrame([[1, 2, 3], [4, 5 ,6]], columns=list('ABC'))

In [2]: df
Out[2]: 
   A  B  C
0  1  2  3
1  4  5  6

In [3]: df1 = df.set_index('A')

In [4]: df1
Out[4]: 
   B  C
A      
1  2  3
4  5  6
</snippet></ROW><ROW><id>19851521</id><snippet>In [5]: df1.rename(index={1: 'a'})
Out[5]: 
   B  C
A      
a  2  3
4  5  6

In [6]: df1.rename(columns={'B': 'BB'})
Out[6]: 
   BB  C
A       
1   2  3
4   5  6
</snippet></ROW><ROW><id>19851521</id><snippet>In [7]: df1.index.names = ['index']
        df1.columns.names = ['column']
</snippet></ROW><ROW><id>19851521</id><snippet>In [8]: df1
Out[8]: 
column  B  C
index       
1       2  3
4       5  6
</snippet></ROW><ROW><id>19851600</id><snippet>import numpy as np

my_array = np.array([[1,1,1],[2,2,2],[3,3,3],[4,4,4],[5,5,5],[6,6,6]])

reshaped = my_array.reshape(2, -1)    
result = np.mean(reshaped, axis=1)
</snippet></ROW><ROW><id>19851600</id><snippet>&gt;&gt;&gt; reshaped
array([[1, 1, 1, 2, 2, 2, 3, 3, 3],
       [4, 4, 4, 5, 5, 5, 6, 6, 6]])
&gt;&gt;&gt; result
array([ 2.,  5.])
</snippet></ROW><ROW><id>19851600</id><snippet>&gt;&gt;&gt; np.mean(my_array, axis=1) # gives you a mean for each row
array([ 1.,  2.,  3.,  4.,  5.,  6.])
&gt;&gt;&gt; np.mean(my_array, axis=0) # gives you a mean for each column
array([ 3.5,  3.5,  3.5])
</snippet></ROW><ROW><id>19851601</id><snippet>.get()</snippet></ROW><ROW><id>19851601</id><snippet>    return self.apply_async(func, args, kwds).get()
</snippet></ROW><ROW><id>19851601</id><snippet>apply_async()</snippet></ROW><ROW><id>19851601</id><snippet>apply_async()</snippet></ROW><ROW><id>19851601</id><snippet>AsyncResult</snippet></ROW><ROW><id>19851601</id><snippet>.get()</snippet></ROW><ROW><id>19851601</id><snippet>func(*args, **kwds)</snippet></ROW><ROW><id>19851601</id><snippet>apply()</snippet></ROW><ROW><id>19851601</id><snippet>apply()</snippet></ROW><ROW><id>19851601</id><snippet>apply_async()</snippet></ROW><ROW><id>19851617</id><snippet>chr = "*"
size = 5
row = 1
while row &lt;= size:
    col = size - row + 1
    while col &lt;= size:
        print ' ', 
        col = col + 1
    col = 0
    while col &lt;= size-row:
        print chr, 
        col = col + 1
    row = row + 1
    print ''
print ''
</snippet></ROW><ROW><id>19851733</id><snippet>user@user:~$ django-admin startproject mysite
</snippet></ROW><ROW><id>19851797</id><snippet>import socket
host_map = client[:].apply_async(socket.gethostname).get_dict()
r = { v:k for k,v in host_map.items() }
one_id_per_machine = list(r.values())
one_per_machine = client[one_id_per_machine]
lb_per_machine = client.load_balanced_view(one_id_per_machine)
</snippet></ROW><ROW><id>19851842</id><snippet>def pheromone():
    grid_dict[(ant_position[0], ant_position[1])]
</snippet></ROW><ROW><id>19851842</id><snippet>grid_dict[(x, y)] = data
</snippet></ROW><ROW><id>19851842</id><snippet>del grid_dict[(x, y)]
</snippet></ROW><ROW><id>19852001</id><snippet>result = summaryStats()
print result
</snippet></ROW><ROW><id>19852075</id><snippet>1</snippet></ROW><ROW><id>19852075</id><snippet>1.0</snippet></ROW><ROW><id>19852075</id><snippet>"</snippet></ROW><ROW><id>19852075</id><snippet>\</snippet></ROW><ROW><id>19852075</id><snippet>\uXXXX</snippet></ROW><ROW><id>19852503</id><snippet>dict</snippet></ROW><ROW><id>19852503</id><snippet>l = ['Toyota','Ferrery','Ford','Nisshan']
d = {'Car Names': l}
</snippet></ROW><ROW><id>19852503</id><snippet>l = ['Toyota', 'Ferrery', 'Ford', 'Nisshan']
d = {'Car Names': l}

for key, value in d.items():
    print(key, ':', str(value)[1:-1])
</snippet></ROW><ROW><id>19852549</id><snippet>cbar_blit</snippet></ROW><ROW><id>19852549</id><snippet>PatchCollection</snippet></ROW><ROW><id>19852549</id><snippet>import numpy as np
import matplotlib
matplotlib.use("TkAgg")
import matplotlib.pyplot as plt
import matplotlib.animation as manim
from matplotlib.collections import PatchCollection

Nx = 30
Ny = 20
numtimes = 100

size = 0.5

x, y = np.ogrid[-1:1:30j, -1:1:20j]

data = np.zeros((numtimes, Nx, Ny))

for i in range(numtimes):
    data[i] = (x-i*0.02+1)**2 + y**2

colors = plt.cm.rainbow(data)

fig, ax = plt.subplots()

rects = []
for (i,j),c in np.ndenumerate(data[0]):
    rect = plt.Rectangle([i - size / 2, j - size / 2],size, size)
    rects.append(rect)

collection = PatchCollection(rects, animated=True)

ax.add_collection(collection)
ax.autoscale_view(True)


def animate(tind):
    c = colors[tind].reshape(-1, 4)
    collection.set_facecolors(c)    
    return (collection,)

ani = manim.FuncAnimation(fig, animate, frames=numtimes,
        interval=10, blit=True, repeat=False)

plt.show()        
</snippet></ROW><ROW><id>19852601</id><snippet>numpy.isnan</snippet></ROW><ROW><id>19852601</id><snippet>&gt;&gt;&gt; import numpy as np 
&gt;&gt;&gt; A = np.array([5, np.nan, np.nan, np.nan, np.nan, 10])
&gt;&gt;&gt; np.isnan(A)
array([False,  True,  True,  True,  True, False], dtype=bool)
&gt;&gt;&gt; ~np.isnan(A)
array([ True, False, False, False, False,  True], dtype=bool)
&gt;&gt;&gt; A[~np.isnan(A)]
array([  5.,  10.])
&gt;&gt;&gt; A[~np.isnan(A)].mean()
7.5
</snippet></ROW><ROW><id>19852601</id><snippet>nan</snippet></ROW><ROW><id>19852601</id><snippet>nan</snippet></ROW><ROW><id>19852601</id><snippet>&gt;&gt;&gt; np.nan == np.nan
False
&gt;&gt;&gt; np.nan != np.nan
True
&gt;&gt;&gt; np.isnan(np.nan)
True
</snippet></ROW><ROW><id>19852675</id><snippet>self</snippet></ROW><ROW><id>19852675</id><snippet>UseNN</snippet></ROW><ROW><id>19852675</id><snippet>(NN, InputList)</snippet></ROW><ROW><id>19852675</id><snippet>def UseNN(self, NN,InputList):
</snippet></ROW><ROW><id>19852675</id><snippet>CamelCase</snippet></ROW><ROW><id>19852697</id><snippet>whole_names = list()
for line in infile.readlines():
    objects = line.split(" ")
    whole_names.append(' '.join(objects[0:2]))
</snippet></ROW><ROW><id>19852697</id><snippet>whole_name</snippet></ROW><ROW><id>19852697</id><snippet>whole_names</snippet></ROW><ROW><id>19852697</id><snippet>whole_names</snippet></ROW><ROW><id>19852734</id><snippet>for line in _splitline:
    _line = line.split()
    Inventory.setdefault(_line[0]+","+_line[1], [])
    Inventory[_line[0]+","+_line[1]].append(_line[2:])
</snippet></ROW><ROW><id>19852840</id><snippet>for num in xrange(999, -1, -1):
    print i
</snippet></ROW><ROW><id>19852840</id><snippet>python3</snippet></ROW><ROW><id>19852840</id><snippet>for num in range(999, -1, -1):
    print(i)
</snippet></ROW><ROW><id>19853069</id><snippet>from tkinter import *
from tkinter import ttk

# Create Tk Interface root
root = Tk()

# Initialize mainFrame
mainFrame = ttk.Frame( root )
mainFrame.grid()

# Initialize label of mainframe
theLabel = ttk.Label( mainFrame, text='Current Message' )
theLabel.grid( padx=10, pady=10 )

def createPopup():
    # Initialize popup window
    popup = Toplevel( mainFrame )
    popup.grid()
    # Initialize text box of popup window
    textBox = Text( popup, width=20, height=5 )
    textBox.grid( column = 0, row = 0 )
    textBox.insert( END, 'New Message Here' )
    # Initialize button of popup window
    button = ttk.Button( master  = popup,
                         command = lambda: theLabel.config(text=textBox.get(0.0, END)),
                         text = 'Update')
    button.grid( column=0, row=1, padx=5, pady=5 )

# Initialize button of main frame
theButton = ttk.Button( mainFrame, command=createPopup, text='Click' )
theButton.grid( padx=10, pady=10 )

# Enter event loop
mainFrame.mainloop()
</snippet></ROW><ROW><id>19853128</id><snippet>&gt;&gt;&gt; teams = {'Cagliari': [3, 1, 0, 0, 2, 1, 1, 1], 'Torino': [0, 0, 0, 1, 1, 2, -1, 1], 
... 'Lazio': [3, 1, 0, 0, 4, 2, 2, 1], 'AC Milan': [1, 0, 1, 0, 1, 1, 0, 1], 
... 'Napoli': [0, 0, 0, 1, 2, 4, -2, 1], 'Inter Milan': [1, 0, 1, 0, 1, 1, 0, 1]}
&gt;&gt;&gt; sorted(teams, key=lambda t : (teams[t][0], teams[t][-1]*-1, teams[t][1], teams[t][-2], teams[t][4], t))
['Napoli', 'Torino', 'AC Milan', 'Inter Milan', 'Cagliari', 'Lazio']
</snippet></ROW><ROW><id>19853322</id><snippet>collections.Counter</snippet></ROW><ROW><id>19853322</id><snippet>from collections import Counter
def solve(lis):
    c = Counter(lis)
    mx = c.most_common()[0][1]
    #or mx = max(c.values())
    return [k for k, v in c.items() if v == mx]

print (solve(['a','b','c','b','d','a']))
print (solve(['a','a','b','b','c','c','d']))
print (solve(['a','a','a','b','b','b','c','c','d','d','d'] ))
</snippet></ROW><ROW><id>19853322</id><snippet>['a', 'b']
['a', 'c', 'b']
['a', 'b', 'd']
</snippet></ROW><ROW><id>19853322</id><snippet>itertools.takewhile</snippet></ROW><ROW><id>19853322</id><snippet>from collections import Counter
from itertools import takewhile
def solve(lis):
    c = Counter(lis)
    mx = max(c.values())
    return [k for k, v in takewhile(lambda x: x[1]==mx, c.most_common())]
</snippet></ROW><ROW><id>19853417</id><snippet>print table.find('meta',{'itemprop':'datePublished'})

&lt;meta content="2012-03-01T00:00:00-05:00" itemprop="datePublished"/&gt;
</snippet></ROW><ROW><id>19853417</id><snippet>itemprop='datePublished'</snippet></ROW><ROW><id>19853417</id><snippet>content</snippet></ROW><ROW><id>19853417</id><snippet>print table.find('meta',{'itemprop':'datePublished'})['content']

2012-03-01T00:00:00-05:00
</snippet></ROW><ROW><id>19853459</id><snippet>&gt;&gt;&gt; class MyClass:
...     def __init__(self, value):
...         self.value = value
...     def __repr__(self):
...         return 'MyClass({0.value})'.format(self)
...     def key_function(self):
...         return -self.value
... 
&gt;&gt;&gt; my_list = [MyClass(2), MyClass(1), MyClass(3)]
&gt;&gt;&gt; my_list
[MyClass(2), MyClass(1), MyClass(3)]
&gt;&gt;&gt; sorted(my_list, key=lambda mc: mc.value)
[MyClass(1), MyClass(2), MyClass(3)]
&gt;&gt;&gt; min(my_list, key=lambda mc: mc.value) # by attribute
MyClass(1)
&gt;&gt;&gt; sorted(my_list, key=lambda mc: mc.key_function()) # by method call
[MyClass(3), MyClass(2), MyClass(1)]
&gt;&gt;&gt; sorted(my_list, key=MyClass.key_function) # using unbound method
[MyClass(3), MyClass(2), MyClass(1)]
</snippet></ROW><ROW><id>19853459</id><snippet>&gt;&gt;&gt; class MyClass:
...     def __init__(self, value):
...         self.value = value
...     def __repr__(self):
...         return 'MyClass({0.value})'.format(self)
...     def delta(self, other):
...         return abs(self.value - other.value)
... 
&gt;&gt;&gt; def foo(a_list, key):
...     return [key(a, b) for a, b in zip(a_list, a_list[1:])]
... 
&gt;&gt;&gt; my_list = [MyClass(1), MyClass(10), MyClass(100)]
&gt;&gt;&gt; print foo(my_list, key=lambda x, y: abs(x.value - y.value)) # Using lambda
[9, 90]
&gt;&gt;&gt; print foo(my_list, key=MyClass.delta) # Using unbound method
[9, 90]
</snippet></ROW><ROW><id>19853560</id><snippet># define a database connection
database = peewee.SqliteDatabase('my.db')

class BaseModel(peewee.Model):
    class Meta:
        # this is likely the missing part of your model
        # you need to tell the model which database connection to use.
        database = database

class User(BaseModel):
    first_name = peewee.CharField()
    last_name = peewee.CharField()
    email = peewee.CharField()
    subject = peewee.CharField()
    message = peewee.CharField()
</snippet></ROW><ROW><id>19853804</id><snippet>In [11]: x1 = x.values.T

In [12]: x1
Out[12]: 
array([[ 1.,  3.],
       [ 2.,  4.],
       [ 3.,  5.]])

In [13]: x1 /= x1.sum(0)

In [14]: x
Out[14]: 
          A         B         C
0  0.166667  0.333333  0.500000
1  0.250000  0.333333  0.416667
</snippet></ROW><ROW><id>19853846</id><snippet>def N(d, memoize = dict()):
    if d == 1 or d == 2: return 1
    if d in memoize: return memoize[d]
    result = 0
    for i in xrange(1, d):
        result += (d - i) * (i) * N(d - i) * N(i)
    memoize[d] = result
    return result

print N(1000)
</snippet></ROW><ROW><id>19853846</id><snippet>def N(d, memo={1:1, 2:1}):
    # http://oeis.org/A112915
    if d not in memo:
        memo[d] = sum(i * (d - i) * N(i) * N(d - i) for i in range(1, d))
    return memo[d]
</snippet></ROW><ROW><id>19853898</id><snippet>not_yet_bought_set.add(item)
</snippet></ROW><ROW><id>19853898</id><snippet>None</snippet></ROW><ROW><id>19853898</id><snippet>not_yet_bought_set</snippet></ROW><ROW><id>19853898</id><snippet>not_yet_bought_set</snippet></ROW><ROW><id>19853898</id><snippet>None</snippet></ROW><ROW><id>19853898</id><snippet>not_yet_bought_set = not_yet_bought_set.add(item)
</snippet></ROW><ROW><id>19853898</id><snippet>add</snippet></ROW><ROW><id>19853898</id><snippet>None</snippet></ROW><ROW><id>19853898</id><snippet> not_yet_bought_set.add(item)
</snippet></ROW><ROW><id>19854104</id><snippet>Distribute</snippet></ROW><ROW><id>19854104</id><snippet>pip</snippet></ROW><ROW><id>19854104</id><snippet>distribute_setup.py</snippet></ROW><ROW><id>19854104</id><snippet>easy_install pip</snippet></ROW><ROW><id>19854104</id><snippet>python setup.py install</snippet></ROW><ROW><id>19854269</id><snippet>Tags</snippet></ROW><ROW><id>19854269</id><snippet>NavigableStrings</snippet></ROW><ROW><id>19854269</id><snippet>findAll(name, attrs, recursive, text, limit, **kwargs)</snippet></ROW><ROW><id>19854269</id><snippet>findAll</snippet></ROW><ROW><id>19854269</id><snippet>Tag</snippet></ROW><ROW><id>19854269</id><snippet>NavigableString</snippet></ROW><ROW><id>19854269</id><snippet>findall</snippet></ROW><ROW><id>19854269</id><snippet>findAll(name=None, attrs={}, recursive=True, text=None, limit=None, **kwargs)
</snippet></ROW><ROW><id>19854269</id><snippet>name</snippet></ROW><ROW><id>19854269</id><snippet>class</snippet></ROW><ROW><id>19854269</id><snippet>soup.find("tagName", { "class" : "cssClass" })</snippet></ROW><ROW><id>19854269</id><snippet>attrs</snippet></ROW><ROW><id>19854337</id><snippet>Document</snippet></ROW><ROW><id>19854337</id><snippet>def delete(request):
    if request.method != 'POST':
        raise HTTP404 # don't forget to import
    else:
        docId = request.POST.get('doc-id', None)

    if docId is not None:
        docToDel = Document.objects.get(pk=docId)

        # delete the file using docToDel.docfile

        docToDel.delete()

    return HttpResponse('Whatever message you want.')
</snippet></ROW><ROW><id>19854366</id><snippet>eval</snippet></ROW><ROW><id>19854366</id><snippet>import sys
for arg in sys.argv:
    print(eval('"' + arg.replace('"', '\\"') + '"'))
</snippet></ROW><ROW><id>19854410</id><snippet>iter</snippet></ROW><ROW><id>19854410</id><snippet>Get an iterator from an object.  In the first form, the argument must
supply its own iterator, or be a sequence.
In the second form, the callable is called until it returns the sentinel.
</snippet></ROW><ROW><id>19854410</id><snippet>iter</snippet></ROW><ROW><id>19854410</id><snippet>help</snippet></ROW><ROW><id>19854410</id><snippet>help(iter)</snippet></ROW><ROW><id>19854410</id><snippet>list</snippet></ROW><ROW><id>19854563</id><snippet>dict</snippet></ROW><ROW><id>19854563</id><snippet>from itertools import count, groupby

def make_login_key():
    counter = count()
    current_key = None
    def key(line):
        nonlocal current_key
        if line.startswith('login'):
            # we found the start of a new step, so change key
            current_key = next(counter)
        return current_key
    return key

def find_steps(fobj):
    for _, group in groupby(fobj, key=make_login_key()):
        step = []
        for line in group:
            step.extend(line.split()[1:])
        yield step



def format_steps(steps, fobj):
    for i, step in enumerate(steps):
        for part in step:
            fobj.write('step{}.{}={}\n'.format(i, *part.split('=')))
</snippet></ROW><ROW><id>19854563</id><snippet>In [2]: from io import StringIO

In [3]: input_file = StringIO('''login url=http://demo.url.net username=test@url.net password=mytester
   ...: create-folder create-folder-name=demo
   ...: logout
   ...: login url=http://demo.url.net username=test123@url.net password=mytester123
   ...: select-folder  select-folder-name=demo124
   ...: share-folder share-folder-name=demo124
   ...: logout''')

In [4]: output_file = StringIO()

In [5]: format_steps(find_steps(input_file), output_file)

In [6]: print(output_file.getvalue())
step0.url=http://demo.url.net
step0.username=test@url.net
step0.password=mytester
step0.create-folder-name=demo
step1.url=http://demo.url.net
step1.username=test123@url.net
step1.password=mytester123
step1.select-folder-name=demo124
step1.share-folder-name=demo124
</snippet></ROW><ROW><id>19854563</id><snippet>StringIO</snippet></ROW><ROW><id>19854563</id><snippet>nonlocal</snippet></ROW><ROW><id>19854563</id><snippet>list</snippet></ROW><ROW><id>19854563</id><snippet>def make_login_key():
    counter = count()
    current_key = [None]
    def key(line):
        if line.startswith('login'):
            current_key[0] = next(counter)
        return current_key[0]
    return key
</snippet></ROW><ROW><id>19854563</id><snippet>current_key[0] = next(counter)</snippet></ROW><ROW><id>19854563</id><snippet>counter_key</snippet></ROW><ROW><id>19854563</id><snippet>__setitem__</snippet></ROW><ROW><id>19854563</id><snippet>current_key</snippet></ROW><ROW><id>19854563</id><snippet>nonlocal</snippet></ROW><ROW><id>19854563</id><snippet>global</snippet></ROW><ROW><id>19854749</id><snippet>docfile</snippet></ROW><ROW><id>19854749</id><snippet>docfile</snippet></ROW><ROW><id>19854749</id><snippet>file</snippet></ROW><ROW><id>19854749</id><snippet>files = {'file': open('file.ext', 'rb')}
</snippet></ROW><ROW><id>19854749</id><snippet>files = {'docfile': open('file.ext', 'rb')}
</snippet></ROW><ROW><id>19854965</id><snippet>cnxn = pyodbc.connect(dbConStr)
</snippet></ROW><ROW><id>19854965</id><snippet>'ascii'</snippet></ROW><ROW><id>19854965</id><snippet># -*- coding: cp1252 -*-
import os
import pypyodbc
scriptDir = os.path.dirname(os.path.realpath(__file__))
print scriptDir
dbRelPath = "MøreCase_v2.accdb"
print dbRelPath
dbAbsPath = scriptDir + '\\' + dbRelPath
print (os.path.exists(dbAbsPath))
dbConStr = "DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=" + dbAbsPath
print (dbConStr)
cnxn = pypyodbc.connect(dbConStr)
print 'Connection established.'
</snippet></ROW><ROW><id>19854965</id><snippet>C:\Users\Gord&gt;\Python27\python.exe c:\__tmp\test\foo.py
c:\__tmp\test
M°reCase_v2.accdb
True
DRIVER={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=c:\__tmp\test\M°reCase_v2.accdb
Connection established.
</snippet></ROW><ROW><id>19855005</id><snippet>Labels = Labels.astype(str)</snippet></ROW><ROW><id>19855213</id><snippet>   def main():
        print(a(),b())
</snippet></ROW><ROW><id>19855287</id><snippet>fun &lt;- function(df) {
  M &lt;- as.matrix(df)
  res1 &lt;- combn(seq_len(nrow(M)), 2, function(ind) {
    i &lt;- na.omit(intersect(M[ind[1],], M[ind[2],]))
    l &lt;- length(unique(na.omit(M[ind[2],])))
    length(i)/l
  })
  res2 &lt;- combn(rev(seq_len(nrow(M))), 2, function(ind) {
    i &lt;- na.omit(intersect(M[ind[1],], M[ind[2],]))
    l &lt;- length(unique(na.omit(M[ind[2],])))
    length(i)/l
  })
  c(res1,res2)
}

fun(DF[1:3,3:7])
#[1] 1.0000000 1.0000000 1.0000000 0.6666667 0.6666667 1.0000000
</snippet></ROW><ROW><id>19855287</id><snippet>ddply</snippet></ROW><ROW><id>19855287</id><snippet>library(data.table)
DT &lt;- data.table(DF)
DT[, mean(fun(.SD)), .SDcols=3:7, by=name]
#   name        V1
#1:  joe 0.8888889
#2: jack 0.6000000
</snippet></ROW><ROW><id>19855501</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>19855501</id><snippet>django.conf.settings.global_settings</snippet></ROW><ROW><id>19855501</id><snippet>configure</snippet></ROW><ROW><id>19855501</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>19855510</id><snippet>scores[0]</snippet></ROW><ROW><id>19855510</id><snippet>['10']</snippet></ROW><ROW><id>19855510</id><snippet>Point(int(scores[0][0]), y-25)
</snippet></ROW><ROW><id>19855510</id><snippet>scores.append(objects[2:3])
</snippet></ROW><ROW><id>19855510</id><snippet>scores.append(objects[2])
</snippet></ROW><ROW><id>19855510</id><snippet>Point(int(scores[0]), y-25)
</snippet></ROW><ROW><id>19855812</id><snippet>&gt;&gt;&gt; import bsddb
&gt;&gt;&gt; db = bsddb.hashopen('mydb.db')
&gt;&gt;&gt; db['FirstName'] = 'Joe'
&gt;&gt;&gt; db['LastName'] = 'Doe'
&gt;&gt;&gt; db['Age'] = '30'
&gt;&gt;&gt; db.close()
&gt;&gt;&gt; 
&gt;&gt;&gt; db = bsddb.hashopen('mydb.db')
&gt;&gt;&gt; db['FirstName']
'Joe'
</snippet></ROW><ROW><id>19855812</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; import bsddb
&gt;&gt;&gt; db = bsddb.hashopen('mydb.db')
&gt;&gt;&gt; form = {'FirstName': 'Joe', 'LastName': 'Doe', 'Age': 30}
&gt;&gt;&gt; db['joedoe'] = json.dumps(form)
&gt;&gt;&gt; db.close()
&gt;&gt;&gt; 
&gt;&gt;&gt; db = bsddb.hashopen('mydb.db')
&gt;&gt;&gt; json.loads(db['joedoe'])
{'FirstName': 'Joe', 'LastName': 'Doe', 'Age': 30}
</snippet></ROW><ROW><id>19856593</id><snippet>AWS access key ID

AWS secret key

Service region

Application name

Environment name

Solution stack
</snippet></ROW><ROW><id>19856658</id><snippet>element = driver.find_element_by_class_name("gbts")
</snippet></ROW><ROW><id>19856658</id><snippet>driver.execute_script("arguments[0].style.border = '1px solid red';")
</snippet></ROW><ROW><id>19856658</id><snippet>arguments[0]</snippet></ROW><ROW><id>19856658</id><snippet>getElementByClassName</snippet></ROW><ROW><id>19856658</id><snippet>getElementsByClassName</snippet></ROW><ROW><id>19856658</id><snippet>gbts</snippet></ROW><ROW><id>19856658</id><snippet>driver.execute_script("document.getElementsByClassName('gbts')[0].style.border = '1px solid red';")
</snippet></ROW><ROW><id>19856674</id><snippet>$ python -c "import lxml; print lxml.__file__"
</snippet></ROW><ROW><id>19856674</id><snippet>$ workon lxml232
(lxml232) $ python -c "import lxml.etree; print lxml.etree.__version__"
2.3.2
(lxml232) $ workon lxm312
(lxml312) $ python -c "import lxml.etree; print lxml.etree.__version__"
3.1.2
</snippet></ROW><ROW><id>19857168</id><snippet>radiationExposure</snippet></ROW><ROW><id>19857168</id><snippet>return radiationExposure(newStart, stop, step)
</snippet></ROW><ROW><id>19857475</id><snippet>echobar()</snippet></ROW><ROW><id>19857475</id><snippet>&gt;&gt;&gt; FooChild = type("FooChild", (Foo,), {"echobar()":10})
</snippet></ROW><ROW><id>19857475</id><snippet>__dict__</snippet></ROW><ROW><id>19857475</id><snippet>getattr</snippet></ROW><ROW><id>19857475</id><snippet>&gt;&gt;&gt; FooChild.__dict__['echobar()']
10
&gt;&gt;&gt; getattr(FooChild, 'echobar()')
10
</snippet></ROW><ROW><id>19857475</id><snippet>&gt;&gt;&gt; FooChild = type("FooChild", (Foo,), {"echobar":10})
&gt;&gt;&gt; FooChild.echobar
10
</snippet></ROW><ROW><id>19857475</id><snippet>&gt;&gt;&gt; def echobar(self):return 10

&gt;&gt;&gt; FooChild = type("FooChild", (Foo,), {'echobar':echobar})
&gt;&gt;&gt; FooChild().echobar()
10
</snippet></ROW><ROW><id>19857602</id><snippet># make: 00:00:00 stop watch timer format
def update_timeText():
  if (state):
    global timer
    timer[2] += 1
    if (timer[2] &gt;= 60):
        timer[2] = 0
        timer[1] += 1
    if (timer[1] &gt;= 60):
        timer[0] += 1
        timer[1] = 0
    timeString = pattern.format(timer[0], timer[1], timer[2])
    return timeString

# Step 1        
global state      
global timer    
state = True
timer = [0, 0, 0]
pattern = '{0:02d}:{1:02d}:{2:02d}'

# Step 2
print update_timeText()
print update_timeText()
print update_timeText()
print update_timeText()
</snippet></ROW><ROW><id>19857602</id><snippet>00:00:01
00:00:02
00:00:03
00:00:04
</snippet></ROW><ROW><id>19857746</id><snippet>class UserCommentSerializer(serializers.ModelSerializer):
    user = serializers.PrimaryKeyRelatedField(read_only=True)
    class Meta:
        model = UserComment
        depth = 1
</snippet></ROW><ROW><id>19857746</id><snippet>{"user":"1", "rate":"5", "description":"hello"}
</snippet></ROW><ROW><id>19857889</id><snippet>cProfile</snippet></ROW><ROW><id>19857889</id><snippet>profilestats</snippet></ROW><ROW><id>19857889</id><snippet>from profilestats import profile

@profile
def my_function(args, etc):
    pass
</snippet></ROW><ROW><id>19857889</id><snippet>         6 function calls in 0.026 seconds

   Ordered by: cumulative time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.000    0.000    0.026    0.026 some_code.py:3(some_func)
        2    0.019    0.010    0.026    0.013 some_code.py:9(expensive_func)
        2    0.007    0.003    0.007    0.003 {range}
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
</snippet></ROW><ROW><id>19857889</id><snippet>cachegrind.out.profilestats</snippet></ROW><ROW><id>19858067</id><snippet>with statement</snippet></ROW><ROW><id>19858067</id><snippet>str.strip</snippet></ROW><ROW><id>19858067</id><snippet>float</snippet></ROW><ROW><id>19858067</id><snippet>with open("mynumbers.txt") as f_in:
    for line in f_in:                  
        print float(line)**2
</snippet></ROW><ROW><id>19858067</id><snippet>float</snippet></ROW><ROW><id>19858067</id><snippet>&gt;&gt;&gt; float('1.2\n')
1.2
&gt;&gt;&gt; float('  1.2  \n')
1.2
</snippet></ROW><ROW><id>19858225</id><snippet>x= "th i s. i s. a. n i^ c e. s s t. s t r i ng."
for i in range(len(x)):
    if x[i] == '^':
        j = i + 1
        if x[j] == ' ':
            j = j + 1
            while j &lt; len(x) and x[j] != ' ':
                j = j + 1
                print x
            x= x[0:i] + x[i+1:]
            x= x[0:j-1] + "^" + x[j-1:]
            print x
            exit()
</snippet></ROW><ROW><id>19858325</id><snippet>const</snippet></ROW><ROW><id>19858325</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument(
    '-t', '--temperature',
    help='performs temperature test (period in sec)',
    type=int,
    nargs='?',
    const=60,         # Default value if -t is supplied
    default=None,     # Default value if -t is not supplied
    metavar='PERIOD')

args = parser.parse_args()
print(args)
</snippet></ROW><ROW><id>19858325</id><snippet>% test.py
Namespace(temperature=None)
% test.py -t
Namespace(temperature=60)
% test.py -t 30
Namespace(temperature=30)
</snippet></ROW><ROW><id>19858495</id><snippet>set_password</snippet></ROW><ROW><id>19858495</id><snippet>request.user.set_password(password) 
</snippet></ROW><ROW><id>19858495</id><snippet>request.user</snippet></ROW><ROW><id>19858495</id><snippet>from django.shortcuts import render

@login_required 
def change_password(request):
form = PasswordChangeForm(request.POST or None)
if form.is_valid()
    if request.user.check_password(form.cleaned_data['old_password']):
        request.user.set_password(form.cleaned_data['new_password'])
        request.user.save()
        return render(request, 'success.html')
return render(request, 'template.html', {'form':form})
</snippet></ROW><ROW><id>19858495</id><snippet>None</snippet></ROW><ROW><id>19858679</id><snippet>str.translate</snippet></ROW><ROW><id>19858679</id><snippet>&gt;&gt;&gt; lettersGuessed = ['a', 'b', 'c']
&gt;&gt;&gt; 'wedqwdasdasccdshjasdcas'.translate(None, ''.join(lettersGuessed))
'wedqwdsdsdshjsds'
</snippet></ROW><ROW><id>19858679</id><snippet>lettersGuessed</snippet></ROW><ROW><id>19858679</id><snippet>''.join</snippet></ROW><ROW><id>19858679</id><snippet>str.join</snippet></ROW><ROW><id>19858679</id><snippet>filter</snippet></ROW><ROW><id>19858679</id><snippet>def getAvailableLetters2(lettersGuessed):
    return string.ascii_lowercase.translate(None, lettersGuessed)

from timeit import timeit
print 'filter--&gt;', timeit("getAvailableLetters('Welcome')", setup="from __main__ import getAvailableLetters")
print '.join--&gt;', timeit("getAvailableLetters1('Welcome')",setup="from __main__ import getAvailableLetters1")
print 'trans--&gt;', timeit("getAvailableLetters2('Welcome')",setup="from __main__ import getAvailableLetters2")
</snippet></ROW><ROW><id>19858679</id><snippet>filter--&gt; 6.49355100548
.join--&gt; 4.02496357229
trans--&gt; 0.69938109531
</snippet></ROW><ROW><id>19858796</id><snippet>&gt;&gt;&gt;y = np.arange(0,1,0.1)
&gt;&gt;&gt;[ 0.   0.1  0.2  0.3  0.4  0.5  0.6  0.7  0.8  0.9]
&gt;&gt;&gt;y_cum = np.cumsum(y)
&gt;&gt;&gt;[ 0.   0.1  0.3  0.6  1.   1.5  2.1  2.8  3.6  4.5]
</snippet></ROW><ROW><id>19858796</id><snippet>x,y = bezier(np.arange(0,1,0.01))
plot(x,y)
</snippet></ROW><ROW><id>19858796</id><snippet> plot(np.cumsum(x),np.cumsum(y))
</snippet></ROW><ROW><id>19859016</id><snippet>col2</snippet></ROW><ROW><id>19859016</id><snippet>col1</snippet></ROW><ROW><id>19859016</id><snippet>zip</snippet></ROW><ROW><id>19859016</id><snippet>*</snippet></ROW><ROW><id>19859016</id><snippet>import csv
with open('abc.csv') as f:
    reader = csv.reader(f, delimiter=' ')
    c1, c2, c3 = zip(*reader)
    print c1
    print c2
    print c3
</snippet></ROW><ROW><id>19859016</id><snippet>('a', 'b', 'c')
('d', 'e', 'f')
('1', '2', '3')
</snippet></ROW><ROW><id>19859163</id><snippet>def userinput():
    amount_purchased = input('Enter the amount of bags to be purchased: ')
    return amount_purchased
</snippet></ROW><ROW><id>19859163</id><snippet>input()</snippet></ROW><ROW><id>19859163</id><snippet>def userinput():
    return input('Enter the amount of bags to be purchased: ')
</snippet></ROW><ROW><id>19859163</id><snippet>find_discount</snippet></ROW><ROW><id>19859163</id><snippet>amount_purchased</snippet></ROW><ROW><id>19859163</id><snippet>amount_purchased</snippet></ROW><ROW><id>19859163</id><snippet>userinput</snippet></ROW><ROW><id>19859264</id><snippet>get_context_data</snippet></ROW><ROW><id>19859264</id><snippet>class MyView(ListView):
    # ...

    def get_context_data(self, **kwargs):
        context = super(MyView, self).get_context_data(**kwargs)
        context['mydata'] = ...
        return context
</snippet></ROW><ROW><id>19859264</id><snippet>mydata</snippet></ROW><ROW><id>19859264</id><snippet>context['object_list']</snippet></ROW><ROW><id>19859345</id><snippet>!|\?|\.{3}|\.\D|\.\s
</snippet></ROW><ROW><id>19859345</id><snippet>!</snippet></ROW><ROW><id>19859345</id><snippet>\?</snippet></ROW><ROW><id>19859345</id><snippet>\.{3}</snippet></ROW><ROW><id>19859345</id><snippet>\.\D</snippet></ROW><ROW><id>19859345</id><snippet>\.\s</snippet></ROW><ROW><id>19859345</id><snippet>.</snippet></ROW><ROW><id>19859345</id><snippet>?</snippet></ROW><ROW><id>19859345</id><snippet>\</snippet></ROW><ROW><id>19859345</id><snippet>|</snippet></ROW><ROW><id>19859345</id><snippet>re.split</snippet></ROW><ROW><id>19859780</id><snippet>from matplotlib import pylab

x = [1,2,3,4,5]
y = [2,4,6,8,10]

pylab.plot(x,y)
frame = pylab.gca()

frame.axes.get_xaxis().set_ticks([])
frame.axes.get_yaxis().set_ticks([])

pylab.show()
</snippet></ROW><ROW><id>19859869</id><snippet>settings</snippet></ROW><ROW><id>19859869</id><snippet>/root/crawl</snippet></ROW><ROW><id>19859869</id><snippet>sys.path</snippet></ROW><ROW><id>19859869</id><snippet>crawl</snippet></ROW><ROW><id>19859869</id><snippet>/root $ tree
.
├── crawler
│   ├── __init__.py
│   ├── basic
│   │   ├── __init__.py
│   │   └── agent.py
│   └── settings.py
├── main.py
├── test_main.py
└── tests
    ├── __init__.py
    └── crawler
        ├── __init__.py
        └── basic
            ├── __init__.py
            └── test_agent.py
</snippet></ROW><ROW><id>19859869</id><snippet>from crawler.basic import agent
agent.do_work()
</snippet></ROW><ROW><id>19859869</id><snippet>from crawler import settings # or: from .. import settings
print settings.my_setting
</snippet></ROW><ROW><id>19859869</id><snippet>from tests.crawler.basic import test_agent¬
print 'in test_main'
</snippet></ROW><ROW><id>19859869</id><snippet>from crawler.basic import agent
</snippet></ROW><ROW><id>19859869</id><snippet>crawler.tests.basic.test_agent</snippet></ROW><ROW><id>19859907</id><snippet>dirs</snippet></ROW><ROW><id>19859907</id><snippet>os.walk</snippet></ROW><ROW><id>19859907</id><snippet># exclude = set([...])
for root, dirs, files in os.walk(top, topdown=True):
    dirs[:] = [d for d in dirs if d not in exclude]
</snippet></ROW><ROW><id>19860020</id><snippet>ast</snippet></ROW><ROW><id>19860020</id><snippet>import ast
tree = ast.parse('lambda S,b : (g(S[1:],b),S)[len(S)==b]')
ast.dump(tree)
</snippet></ROW><ROW><id>19860020</id><snippet>Module(
  [Expr(
    Lambda(
      arguments(
        [Name('S', Param()), Name('b', Param())],
        None,
        None,
        []
      ),
      Subscript(
        Tuple(
          [Call(
              Name('g', Load()),
              [Subscript(Name('S', Load()), Slice(Num(1), None, None), Load()), Name('b', Load())],
              [],
              None,
              None
            ),
            Name('S', Load())
          ],
          Load()
        ),
        Index(
          Compare(
            Call(Name('len', Load()), [Name('S', Load())], [], None, None),
            [Eq()],
            [Name('b', Load())]
          )
        ),
        Load()
      )
    )
  )]
)
</snippet></ROW><ROW><id>19860020</id><snippet>Call(Name('g'...</snippet></ROW><ROW><id>19860020</id><snippet>&gt;&gt;&gt;[1][1:]
[]
&gt;&gt;&gt;[][1:]
[]
</snippet></ROW><ROW><id>19860020</id><snippet>g(S[1:])</snippet></ROW><ROW><id>19860020</id><snippet>g</snippet></ROW><ROW><id>19860135</id><snippet>j</snippet></ROW><ROW><id>19860135</id><snippet>[S+str(i) for i in range(1,11) for S in "ABCD"]
</snippet></ROW><ROW><id>19860163</id><snippet># -*- coding: utf-8 -*-

import os
import sys
import shlex
import pprint
import subprocess

def main():

    fifo = '/tmp/fifo.tub'
    filedat = '/tmp/filedat.dat.gz '
    os.mkfifo(fifo,0777)
    cat  = "cat %s" % fifo
    args_cat = shlex.split(cat)
    pprint.pprint(args_cat)

    cat = subprocess.Popen( args_cat,
                            close_fds=True,
                            preexec_fn=os.setsid)

    print "PID cat: %s" % cat.pid

    f = os.open(fifo ,os.O_WRONLY)

    gunzip = 'gunzip -c  %s' %  (filedat)
    args_gunzip = shlex.split(gunzip)
    pprint.pprint(args_gunzip)

    gunzip = subprocess.Popen( args_gunzip,
                               stdout = f,
                               close_fds=True,
                               preexec_fn=os.setsid)

    print "PID gunzip: %s" % gunzip.pid

    gunzip.wait()
    print "gunzip finished"
    os.close(f)
    cat.wait()
    print "cat finished"

    return True

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>19860355</id><snippet>import sys

#your code

sys.exit(0)
</snippet></ROW><ROW><id>19860474</id><snippet>has_nans = np.isnan(arr).any(axis=(-1,-2))
has_nans 
array([False, False, False,  True,  True,  True, False, False, False,  True], dtype=bool)

&gt;&gt;&gt; arr = arr[~has_nans]
&gt;&gt;&gt; arr.shape
(6, 5, 2)
</snippet></ROW><ROW><id>19860474</id><snippet>has_nans = np.isnan(arr).any(axis=-1).any(axis=-1)
</snippet></ROW><ROW><id>19860650</id><snippet>zip()</snippet></ROW><ROW><id>19860650</id><snippet>a</snippet></ROW><ROW><id>19860650</id><snippet>c</snippet></ROW><ROW><id>19860650</id><snippet>b</snippet></ROW><ROW><id>19860650</id><snippet>c</snippet></ROW><ROW><id>19860650</id><snippet>itertools.chain.from_iterable()</snippet></ROW><ROW><id>19860650</id><snippet>from itertools import chain

a_2 = list(chain.from_iterable([i] * int(round(j * 10)) for i, j in zip(a, c)))
b_2 = list(chain.from_iterable([i] * int(round(j * 10)) for i, j in zip(b, c)))
</snippet></ROW><ROW><id>19860650</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; a = [0.9935,0.1955,1.3165,0.0975,0.2995,-0.0075,1.5015,1.0055,0.4525,0.2235,1.3815,0.4195,1.3685,0.0325,0.0055,0.6175,0.0615,1.8115]
&gt;&gt;&gt; b = [4.01,5.207,-0.245,5.312,0.841,1.204,-0.413,4.398,5.309,1.149, -0.295,1.903,-0.851,1.236,1.39,3.48,-0.034,4.286]
&gt;&gt;&gt; c = [0.221, 0.423, 0.125, 0.228, 0.233, 0.235, 0.244, 0.249, 0.265, 0.265, 0.268, 0.268, 0.275, 0.299, 0.301, 0.316, 0.318, 0.329]
&gt;&gt;&gt; list(chain.from_iterable([i] * int(round(j * 10)) for i, j in zip(a, c)))
[0.9935, 0.9935, 0.1955, 0.1955, 0.1955, 0.1955, 1.3165, 0.0975, 0.0975, 0.2995, 0.2995, -0.0075, -0.0075, 1.5015, 1.5015, 1.0055, 1.0055, 0.4525, 0.4525, 0.4525, 0.2235, 0.2235, 0.2235, 1.3815, 1.3815, 1.3815, 0.4195, 0.4195, 0.4195, 1.3685, 1.3685, 1.3685, 0.0325, 0.0325, 0.0325, 0.0055, 0.0055, 0.0055, 0.6175, 0.6175, 0.6175, 0.0615, 0.0615, 0.0615, 1.8115, 1.8115, 1.8115]
&gt;&gt;&gt; list(chain.from_iterable([i] * int(round(j * 10)) for i, j in zip(b, c)))
[4.01, 4.01, 5.207, 5.207, 5.207, 5.207, -0.245, 5.312, 5.312, 0.841, 0.841, 1.204, 1.204, -0.413, -0.413, 4.398, 4.398, 5.309, 5.309, 5.309, 1.149, 1.149, 1.149, -0.295, -0.295, -0.295, 1.903, 1.903, 1.903, -0.851, -0.851, -0.851, 1.236, 1.236, 1.236, 1.39, 1.39, 1.39, 3.48, 3.48, 3.48, -0.034, -0.034, -0.034, 4.286, 4.286, 4.286]
</snippet></ROW><ROW><id>19860650</id><snippet>a</snippet></ROW><ROW><id>19860650</id><snippet>b</snippet></ROW><ROW><id>19860650</id><snippet>c</snippet></ROW><ROW><id>19860650</id><snippet>c</snippet></ROW><ROW><id>19860650</id><snippet>a_2</snippet></ROW><ROW><id>19860650</id><snippet>b_2</snippet></ROW><ROW><id>19860650</id><snippet>itertools</snippet></ROW><ROW><id>19860650</id><snippet>from itertools import chain, repeat, izip

a_2_generator = chain.from_iterable(repeat(i, int(round(j * 10))) for i, j in izip(a, c))
b_2_generator = chain.from_iterable(repeat(i, int(round(j * 10))) for i, j in izip(b, c))
</snippet></ROW><ROW><id>19860650</id><snippet>list()</snippet></ROW><ROW><id>19860996</id><snippet>buffer()</snippet></ROW><ROW><id>19860996</id><snippet>memoryview()</snippet></ROW><ROW><id>19860996</id><snippet>memoryview</snippet></ROW><ROW><id>19860999</id><snippet>thread.start_new_thread</snippet></ROW><ROW><id>19860999</id><snippet>if __name__=='__main__':
    import thread
    thread.start_new_thread(listenFTP)
    thread.start_new_thread(listenESMTP)
</snippet></ROW><ROW><id>19861039</id><snippet>+1/15 * 255</snippet></ROW><ROW><id>19861039</id><snippet>-1/15 * 255</snippet></ROW><ROW><id>19861039</id><snippet>import pygame

#----------------------------------------------------------------------

class Background():

    def __init__(self, screen):
        self.screen = screen

        self.timer = 0
        self.color = 0
        self.up = True # up or down

    #-------------------

    def change(self):

        if self.timer == 15: # 15 frames for UP and 15 frames for DOWN
            self.timer = 0
            self.up = not self.up

        self.timer += 1

        if self.up:
            self.color += 10
        else:
            self.color -= 10

        print self.up, self.color

    #-------------------

    def draw(self):
        self.screen.fill( (self.color, self.color, self.color) )

#----------------------------------------------------------------------

class Game():

    def __init__(self):
        pygame.init()

        self.screen = pygame.display.set_mode((800,600))

        self.background = Background(self.screen)

    #-------------------

    def run(self):

        clock = pygame.time.Clock()

        RUNNING = True

        while RUNNING:

            # ----- events -----

            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    RUNNING = False
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        RUNNING = False

            # ----- changes -----

            self.background.change()

            # ----- draws ------

            self.background.draw()

            pygame.display.update()

            # ----- FPS -----

            clock.tick(30)

        #-------------------

        pygame.quit()

#----------------------------------------------------------------------

Game().run()
</snippet></ROW><ROW><id>19861384</id><snippet>lambda</snippet></ROW><ROW><id>19861384</id><snippet>map(lambda x: fn(x, bar=[1, 2, 3]), range(5))
</snippet></ROW><ROW><id>19861545</id><snippet>DataFrame</snippet></ROW><ROW><id>19861545</id><snippet>df</snippet></ROW><ROW><id>19861545</id><snippet>DataFrame</snippet></ROW><ROW><id>19861545</id><snippet> rows_with_strings  = df.apply(
       lambda row : 
          any([ isinstance(e, basestring) for e in row ])
       , axis=1) 
</snippet></ROW><ROW><id>19861545</id><snippet> df_with_no_strings = df[~rows_with_strings]
</snippet></ROW><ROW><id>19861545</id><snippet> a = [[1,2],['a',2], [3,4], [7,'d']]
 df = pd.DataFrame(a,columns = ['a','b'])


 df 
   a  b
0  1  2
1  a  2
2  3  4
3  7  d

select  = df.apply(lambda r : any([isinstance(e, basestring) for e in r  ]),axis=1) 

df[~select]                                                                                                                                

    a  b
 0  1  2
 2  3  4
</snippet></ROW><ROW><id>19861632</id><snippet>create</snippet></ROW><ROW><id>19861632</id><snippet>r'^(?P&lt;meeting_id_str&gt;\w+)/$'</snippet></ROW><ROW><id>19861764</id><snippet>from bs4 import BeautifulSoup
import sys 

soup = BeautifulSoup(open(sys.argv[1], 'r'), 'xml')

allergies = []
for allergy in soup.find_all('Allergy'):
    d = { 
        'name': allergy.Allergen.Name.string,
        'reaction': allergy.Reaction.string,
        'on_set_date': allergy.OnsetDate.string,
    }   
    allergies.append(d)

## Use 'allergies' array of dictionaries as you want.
## Example:
print(allergies[1]['reaction'])
</snippet></ROW><ROW><id>19861764</id><snippet>xml</snippet></ROW><ROW><id>19861764</id><snippet>python3 script.py xmlfile
</snippet></ROW><ROW><id>19861764</id><snippet>swelling
</snippet></ROW><ROW><id>19862449</id><snippet>.*</snippet></ROW><ROW><id>19862449</id><snippet>?</snippet></ROW><ROW><id>19862449</id><snippet>*</snippet></ROW><ROW><id>19862449</id><snippet>re.search('%s(.*?)%s' % ('&lt;', '&gt;'), s).group(1)
</snippet></ROW><ROW><id>19862449</id><snippet>.</snippet></ROW><ROW><id>19862449</id><snippet>re.search('&lt;(.*?)&gt;', s).group(1)
</snippet></ROW><ROW><id>19862449</id><snippet>re.search('&lt;([^&gt;]*)&gt;', s).group(1)
</snippet></ROW><ROW><id>19862449</id><snippet>[^&gt;]</snippet></ROW><ROW><id>19862449</id><snippet>&gt;</snippet></ROW><ROW><id>19862536</id><snippet>blah</snippet></ROW><ROW><id>19862536</id><snippet>False</snippet></ROW><ROW><id>19862536</id><snippet>sys.exit(1)</snippet></ROW><ROW><id>19862536</id><snippet>0</snippet></ROW><ROW><id>19862536</id><snippet>sys.exit()</snippet></ROW><ROW><id>19862536</id><snippet>sys.exit(1)</snippet></ROW><ROW><id>19862536</id><snippet>0</snippet></ROW><ROW><id>19862638</id><snippet>numkeys</snippet></ROW><ROW><id>19862638</id><snippet>SDL_NUM_SCANCODES</snippet></ROW><ROW><id>19862638</id><snippet>import ctypes
import sdl2

def get_keyboard_state():
    """ Returns a list with the current SDL keyboard state,
    which is updated on SDL_PumpEvents. """
    numkeys = ctypes.c_int()
    keystate = sdl2.keyboard.SDL_GetKeyboardState(ctypes.byref(numkeys))
    ptr_t = ctypes.POINTER(ctypes.c_uint8 * numkeys.value)        
    return ctypes.cast(keystate, ptr_t)[0]
</snippet></ROW><ROW><id>19862653</id><snippet>1-&gt;3-&gt;2-&gt;1</snippet></ROW><ROW><id>19862653</id><snippet>1-&gt;2-&gt;3-&gt;1</snippet></ROW><ROW><id>19862653</id><snippet>1-&gt;2-&gt;3-&gt;1</snippet></ROW><ROW><id>19862653</id><snippet>1-&gt;2-&gt;3-&gt;1</snippet></ROW><ROW><id>19862653</id><snippet>1231</snippet></ROW><ROW><id>19862653</id><snippet>1-&gt;3-&gt;2-&gt;1</snippet></ROW><ROW><id>19862653</id><snippet>1321</snippet></ROW><ROW><id>19862653</id><snippet>1231</snippet></ROW><ROW><id>19862653</id><snippet>1321</snippet></ROW><ROW><id>19862653</id><snippet>1-&gt;2-&gt;3-&gt;1</snippet></ROW><ROW><id>19862653</id><snippet>1-&gt;3-&gt;2-&gt;1</snippet></ROW><ROW><id>19862653</id><snippet>1-&gt;3-&gt;2-&gt;1</snippet></ROW><ROW><id>19862653</id><snippet>2-&gt;1-&gt;3-&gt;2</snippet></ROW><ROW><id>19862653</id><snippet>2-&gt;1-&gt;3-&gt;2</snippet></ROW><ROW><id>19862653</id><snippet>2</snippet></ROW><ROW><id>19862817</id><snippet>011</snippet></ROW><ROW><id>19862817</id><snippet>000</snippet></ROW><ROW><id>19862817</id><snippet>011</snippet></ROW><ROW><id>19862817</id><snippet>3</snippet></ROW><ROW><id>19862823</id><snippet>import Tkinter


class Application(Tkinter.Frame):
   def __init__(self, master, width, height):
       Tkinter.Frame.__init__(self, master)
       self.master.minsize(width=width, height=height)
       self.master.config()
       self.pack()

       self.main_frame = Tkinter.Frame(self.master)

       self.button_scroll_bar = Tkinter.Scrollbar(
           self.main_frame,
           orient='vertical')

       self.button_canvas = Tkinter.Canvas(
           self.main_frame,
           yscrollcommand=self.button_scroll_bar.set,
           relief='flat',
           borderwidth=0)

       self.button_canvas.bind('&lt;MouseWheel&gt;', self._on_mousewheel)
       self.button_scroll_bar.config(command=self.button_canvas.yview)

       self.button_scroll_bar.pack(side='right', fill='y')
       self.button_canvas.pack(fill='both', expand=True)

       for i in range(0, 15):
           for j in range(0, 2):
               b = Tkinter.Button(
                   self.button_canvas,
                   text='Text')

               # note we are separating the buttons 80 units horizontally
               # and 30 units vertically...I just chose these numbers
               # since they looked reasonable.
               self.button_canvas.create_window(
                   (80 * j),
                   (30 * i),
                   anchor='nw',
                   window=b
               )
       # here we need to update the scrollregion, notice the same x, y numbers
       # multiplied times the number of buttons we placed in the canvas
       self.button_canvas.config(scrollregion=(0, 0, 80*2, 30*15))

       self.main_frame.pack(fill='both', expand=True)

   def _on_mousewheel(self, event):
       self.button_canvas.yview_scroll(-event.delta, "units")

root = Tkinter.Tk()
root.title('Title Here')

w = 512
h = 256

app = Application(root, width=w, height=h)
app.mainloop()
</snippet></ROW><ROW><id>19862858</id><snippet>&gt;&gt;&gt; dict1 = {'a': [1], 'b': [2]}
&gt;&gt;&gt; dict2 = {'b': [3], 'c': [4]}
&gt;&gt;&gt; import copy
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; def merge(a, b, conflict):
    new = copy.deepcopy(a)
    if conflict:
        for key, value in b.items():
            if key in new:
                counter = itertools.count(1)
                # Rename 1st key.
                while True:
                    name = '{}_{}'.format(key, next(counter))
                    if name not in new:
                        new[name] = new[key]
                        del new[key]
                        break
                # Create 2nd key.
                while True:
                    name = '{}_{}'.format(key, next(counter))
                    if name not in new:
                        new[name] = value
                        break
            else:
                new[key] = value
    else:
        for key, value in b.items():
            new.setdefault(key, []).extend(value)
    return new

&gt;&gt;&gt; merge(dict1, dict2, False)
{'c': [4], 'b': [2, 3], 'a': [1]}
&gt;&gt;&gt; merge(dict1, dict2, True)
{'b_2': [3], 'b_1': [2], 'c': [4], 'a': [1]}
</snippet></ROW><ROW><id>19862945</id><snippet>os.chdir(os.path.expanduser('~/.usernames'))
</snippet></ROW><ROW><id>19862963</id><snippet>None</snippet></ROW><ROW><id>19862963</id><snippet>def my_function(a=10, b=None):
    if b is None:
        b = a
</snippet></ROW><ROW><id>19862963</id><snippet>a</snippet></ROW><ROW><id>19862963</id><snippet>10</snippet></ROW><ROW><id>19862963</id><snippet>b</snippet></ROW><ROW><id>19862963</id><snippet>a</snippet></ROW><ROW><id>19862963</id><snippet>None</snippet></ROW><ROW><id>19862963</id><snippet>object()</snippet></ROW><ROW><id>19862963</id><snippet>_sentinel = object()

def my_function(a=10, b=_sentinel):
    if b is _sentinel:
        b = a
</snippet></ROW><ROW><id>19862963</id><snippet>my_function(11, None)</snippet></ROW><ROW><id>19862963</id><snippet>b</snippet></ROW><ROW><id>19862963</id><snippet>None</snippet></ROW><ROW><id>19862963</id><snippet>b</snippet></ROW><ROW><id>19862963</id><snippet>my_function()</snippet></ROW><ROW><id>19862963</id><snippet>my_function(42)</snippet></ROW><ROW><id>19862963</id><snippet>b</snippet></ROW><ROW><id>19862963</id><snippet>a</snippet></ROW><ROW><id>19863102</id><snippet>
url(r'^(?P&lt;identifier&gt;[\w]+)/$', views.render_form),
</snippet></ROW><ROW><id>19863217</id><snippet>class B(object): pass

class A(object):
    def __init__(self, b):
        self.b = b

b = B()
a = A(b)
</snippet></ROW><ROW><id>19863217</id><snippet>a = A("string") # still valid
</snippet></ROW><ROW><id>19863217</id><snippet>class A(object):
    def __init__(self):
        self.b = B()
</snippet></ROW><ROW><id>19863217</id><snippet>class A(object):
    def __init__(self):
        self.B = B

&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.B # class definition
&lt;class __main__.B at 0x028586C0&gt;
&gt;&gt;&gt; a.B() # which you can make instances of
&lt;__main__.B instance at 0x02860990&gt;
</snippet></ROW><ROW><id>19863464</id><snippet>form.keys()</snippet></ROW><ROW><id>19863464</id><snippet>variable = ""
value = ""
for key in form.keys():
        variable = str(key)
        value = str(form.getvalue(variable))
        r += "&lt;p&gt;"+ variable +", "+ value +"&lt;/p&gt;\n" 

fields = "&lt;p&gt;"+ str(r) +"&lt;/p&gt;"        
</snippet></ROW><ROW><id>19863610</id><snippet>perspectiveMatrix</snippet></ROW><ROW><id>19863660</id><snippet>&gt;&gt;&gt; other_to_tup = [(x, 'val') for x in other_df.columns]
&gt;&gt;&gt; other_df.columns = pd.MultiIndex.from_tuples(other_to_tup)
&gt;&gt;&gt; p = pd.merge(new_df, other_df, left_index=True, right_index=True)
&gt;&gt;&gt; p
      b              d
   mean  sum  val  val
a
1     2    2    2    3
</snippet></ROW><ROW><id>19863694</id><snippet>&gt;&gt;&gt; from re import findall
&gt;&gt;&gt; mystr = """
... {"object" "rectangle" "param1" {"Type1" "Type2"} "param2" {{0.0 0.64} {0.08 0.72}} "smth" 0 "point1" 0 "point2" }
... """
&gt;&gt;&gt; findall("-?\d+\.\d+", mystr)
['0.0', '0.64', '0.08', '0.72']
&gt;&gt;&gt; var1, var2, var3, var4 = findall("-?\d+\.\d+", mystr)
&gt;&gt;&gt; var1
'0.0'
&gt;&gt;&gt; var4
'0.72'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19863694</id><snippet>&gt;&gt;&gt; var1, var2, var3, var4 = map(float, findall("-?\d+\.\d+", mystr))
&gt;&gt;&gt; var1
0.0
&gt;&gt;&gt; var4
0.72
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19863694</id><snippet>-?   # An optional hyphen (for negative numbers)
\d+  # One or more digits
\.   # A period (the decimal point)
\d+  # One or more digits
</snippet></ROW><ROW><id>19863735</id><snippet>PREFIX ns: &lt;http://oaei.ontologymatching.org/2011/benchmarks/101/onto.rdf#&gt;
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; 
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX owl: &lt;http://www.w3.org/2002/07/owl#&gt;

SELECT  DISTINCT ?varClass ?varSubClass ?varSubClassComment ?varProperty ?varPropComment
FROM &lt;http://oaei.ontologymatching.org/2011/benchmarks/101/onto.rdf&gt;
WHERE {
  {
    ?varClass rdf:type owl:Class .
    ?varProperty rdf:type owl:ObjectProperty ; rdfs:domain ?varClass . OPTIONAL{?varProperty rdfs:comment ?varPropComment} .
    OPTIONAL{?varSubClass rdfs:subClassOf ?varClass ; rdfs:comment ?varSubClassComment} .
  }
  UNION
  {
    ?varClass rdf:type owl:Class .
    ?varProperty rdf:type owl:DatatypeProperty ; rdfs:domain ?varClass . OPTIONAL{?varProperty rdfs:comment ?varPropComment}.
  }
}
</snippet></ROW><ROW><id>19863735</id><snippet>union</snippet></ROW><ROW><id>19863735</id><snippet>owl:ObjectProperty</snippet></ROW><ROW><id>19863735</id><snippet>owl:DatatypeProperty</snippet></ROW><ROW><id>19863735</id><snippet>PREFIX ns: &lt;http://oaei.ontologymatching.org/2011/benchmarks/101/onto.rdf#&gt;
PREFIX rdf: &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; 
PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;
PREFIX owl: &lt;http://www.w3.org/2002/07/owl#&gt;

SELECT DISTINCT ?varClass ?varSubClass ?varSubClassComment ?varProperty ?varPropComment
FROM &lt;http://oaei.ontologymatching.org/2011/benchmarks/101/onto.rdf&gt;
WHERE {
  VALUES ?propertyType { owl:ObjectProperty owl:DatatypeProperty }

  ?varClass rdf:type owl:Class .
  ?varProperty rdf:type ?propertyType ;
               rdfs:domain ?varClass .
  OPTIONAL{ ?varProperty rdfs:comment ?varPropComment }
  OPTIONAL{ ?varSubClass rdfs:subClassOf ?varClass ;
                         rdfs:comment ?varSubClassComment }
}
</snippet></ROW><ROW><id>19863735</id><snippet>http://oaei.ontologymatching.org/2011/benchmarks/101/onto.rdf</snippet></ROW><ROW><id>19863735</id><snippet>/localPath/a.owl</snippet></ROW><ROW><id>19863736</id><snippet>frame.set_facecolor('green')
frame.set_edgecolor('red')
</snippet></ROW><ROW><id>19863837</id><snippet>from tkinter import *

root = Tk()

mods = {
    0x0001: 'Shift',
    0x0002: 'Caps Lock',
    0x0004: 'Control',
    0x0008: 'Left-hand Alt',
    0x0010: 'Num Lock',
    0x0080: 'Right-hand Alt',
    0x0100: 'Mouse button 1',
    0x0200: 'Mouse button 2',
    0x0400: 'Mouse button 3'
}

root.bind( '&lt;Key&gt;', lambda e: print( 'Key:', e.char,
                                     'Mods:', mods.get( e.state, None )))

root.mainloop()
</snippet></ROW><ROW><id>19863995</id><snippet>def pretty_print(CL_output):
    columns = len(CL_output)//200+2
    lines = ("".join(s.ljust(20) for s in CL_output[i:i+columns-1])+CL_output[i:i+columns][-1] for i in range(0, len(CL_output), columns))
    return "\n".join(lines)
</snippet></ROW><ROW><id>19864047</id><snippet>np.einsum</snippet></ROW><ROW><id>19864047</id><snippet>np.einsum('...j,...j-&gt;...', vf, vf)
</snippet></ROW><ROW><id>19864047</id><snippet>np.arange</snippet></ROW><ROW><id>19864047</id><snippet>np.int64</snippet></ROW><ROW><id>19864047</id><snippet>np.double</snippet></ROW><ROW><id>19864047</id><snippet>&gt;&gt;&gt; np.einsum('...j,...j-&gt;...', vf,vf)[-1, -1, -1]
-603979762
&gt;&gt;&gt; np.einsum('...j,...j-&gt;...', vf,vf).dtype
dtype('int32')

&gt;&gt;&gt; np.einsum('...j,...j-&gt;...', vf,vf, dtype=np.int64)[-1, -1, -1]
7599823767207950
&gt;&gt;&gt; np.einsum('...j,...j-&gt;...', vf,vf, dtype=np.double)[-1, -1, -1]
7599823767207950.0
</snippet></ROW><ROW><id>19864201</id><snippet>(1 - 0.002) ** 5
</snippet></ROW><ROW><id>19864201</id><snippet>0.990039920079968</snippet></ROW><ROW><id>19864201</id><snippet>.</snippet></ROW><ROW><id>19864201</id><snippet>5 * 3</snippet></ROW><ROW><id>19864201</id><snippet>.</snippet></ROW><ROW><id>19864201</id><snippet>(1 - 0.002)</snippet></ROW><ROW><id>19864201</id><snippet>Decimal('0.002')</snippet></ROW><ROW><id>19864201</id><snippet>Decimal(0.002)</snippet></ROW><ROW><id>19864201</id><snippet>(1-decimal.Decimal(0.002))**5
</snippet></ROW><ROW><id>19864201</id><snippet>Decimal('0.99003992007996799979349352807411754897106595345737537649055432859002826694496107'</snippet></ROW><ROW><id>19864201</id><snippet>.</snippet></ROW><ROW><id>19864387</id><snippet>django.views.generic.FormView</snippet></ROW><ROW><id>19864387</id><snippet>django.generic.views.View</snippet></ROW><ROW><id>19864387</id><snippet>extra_content</snippet></ROW><ROW><id>19864387</id><snippet>get_context_data</snippet></ROW><ROW><id>19864387</id><snippet>extra_context</snippet></ROW><ROW><id>19864387</id><snippet>get_context_data()</snippet></ROW><ROW><id>19864405</id><snippet> def to_number(s):
    try:
        s1 = float(s)
        return s1
    except ValueError:
        return s
</snippet></ROW><ROW><id>19864405</id><snippet> df 
     0
  0  a
  1  2
</snippet></ROW><ROW><id>19864405</id><snippet>a</snippet></ROW><ROW><id>19864405</id><snippet>2</snippet></ROW><ROW><id>19864405</id><snippet>converted = df.apply(lambda f : to_number(f[0]) , axis = 1)  

 converted
 0    a
 1    2
</snippet></ROW><ROW><id>19864405</id><snippet>type(converted.iloc[0])                                                                                                                             
str

type(converted.iloc[1])                                                                                                                             
float
</snippet></ROW><ROW><id>19864674</id><snippet>cumulative = 0
for item in queryset:
    cumulative += item.minutes
    item.cumulative = cumulative
</snippet></ROW><ROW><id>19864674</id><snippet>{{ item.cumulative }}</snippet></ROW><ROW><id>19864787</id><snippet>import string, cgi

class Template(string.Formatter):
    def format_field(self, value, spec):
        if spec.endswith('h'):
            value = cgi.escape(value)
            spec = spec[:-1] + 's'
        return super(Template, self).format_field(value, spec)

print Template().format('{0:h} {1:d}', "&lt;hello&gt;", 123)
</snippet></ROW><ROW><id>19864907</id><snippet>import os
mypid = os.getpid()
</snippet></ROW><ROW><id>19864907</id><snippet>import psutil
for process in psutil.process_iter():
    if process.name == 'python.exe' and process.pid != mypid:
        process.kill() # or send_signal(signal)
</snippet></ROW><ROW><id>19864922</id><snippet>celery.control.purge()</snippet></ROW><ROW><id>19864922</id><snippet>CELERYD_PREFETCH_MULTIPLIER</snippet></ROW><ROW><id>19864922</id><snippet>CELERY_ACKS_LATE</snippet></ROW><ROW><id>19864935</id><snippet>with session.no_autoflush:    
    parent = Parent("my parent")
    db_session.add(parent) 
    child = Child("my child", parent)
</snippet></ROW><ROW><id>19864996</id><snippet>import matplotlib.pyplot as plt
from numpy.random import rand
import numpy as np

f, axarr = plt.subplots(2, sharex=True)

axarr[0].bar(np.arange(1,11), rand(10), align='center', alpha=0.4)
axarr[1].bar(np.arange(1,11), rand(10), align='center', alpha=0.4)

axarr[1].tick_params(axis='x', pad=30)

plt.setp(plt.xticks()[1], rotation=45)

plt.show()
</snippet></ROW><ROW><id>19865122</id><snippet>import cv2</snippet></ROW><ROW><id>19865297</id><snippet>PCA.components_</snippet></ROW><ROW><id>19865297</id><snippet>coef_</snippet></ROW><ROW><id>19865297</id><snippet>fit()</snippet></ROW><ROW><id>19865389</id><snippet>import sys
from PyQt4 import QtGui, uic

class TestGUI(QtGui.QMainWindow):
    def __init__(self):
        super(TestGUI, self).__init__()
        uic.loadUi('TEST.ui', self)
        self.actionAdd_Tab.triggered.connect(self.handleAddTab)

    def handleAddTab(self):
        contents = QtGui.QWidget(self.tabWidget)
        layout = QtGui.QVBoxLayout(contents)
        # add other widgets to the contents layout here
        # i.e. layout.addWidget(widget), etc
        self.tabWidget.addTab(contents, 'Tab One')

if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    window = TestGUI()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>19865567</id><snippet>intern()</snippet></ROW><ROW><id>19865567</id><snippet>intern()</snippet></ROW><ROW><id>19865567</id><snippet>intern()</snippet></ROW><ROW><id>19865630</id><snippet>list_of_names = quoted_string (',' quoted_string)*
</snippet></ROW><ROW><id>19865630</id><snippet>list_of_names = quotedString + ZeroOrMore(',' + quotedString)
</snippet></ROW><ROW><id>19865630</id><snippet>list_of_names</snippet></ROW><ROW><id>19865630</id><snippet>s = "'Mark, Bob','John'"
print list_of_names.parseString(s)
</snippet></ROW><ROW><id>19865630</id><snippet>["'Mark, Bob'", ',', "'John'"]
</snippet></ROW><ROW><id>19865630</id><snippet>list_of_names</snippet></ROW><ROW><id>19865630</id><snippet>list_of_names = quotedString + ZeroOrMore(Suppress(',') + quotedString)
</snippet></ROW><ROW><id>19865630</id><snippet>["'Mark, Bob'", "'John'"]
</snippet></ROW><ROW><id>19865630</id><snippet>for name in list_of_names.parseString(s):
    print name.strip("'")
</snippet></ROW><ROW><id>19865630</id><snippet>removeQuotes</snippet></ROW><ROW><id>19865630</id><snippet>quotedString.setParseAction(removeQuotes)
</snippet></ROW><ROW><id>19865630</id><snippet>['Mark, Bob', 'John']
</snippet></ROW><ROW><id>19865630</id><snippet>something + ZeroOrMore(Suppress(delimiter) + something)</snippet></ROW><ROW><id>19865630</id><snippet>delimitedList</snippet></ROW><ROW><id>19865630</id><snippet>quotedString.setParseAction(removeQuotes)
list_of_names = delimitedList(quotedString)
</snippet></ROW><ROW><id>19865630</id><snippet>parseString</snippet></ROW><ROW><id>19865630</id><snippet>list_of_names</snippet></ROW><ROW><id>19865973</id><snippet>CS = pl.contour(x1,y1,kde)
levels = CS.levels
</snippet></ROW><ROW><id>19866214</id><snippet>uint8</snippet></ROW><ROW><id>19866214</id><snippet>uint8</snippet></ROW><ROW><id>19866214</id><snippet>uint8</snippet></ROW><ROW><id>19866214</id><snippet>Mat</snippet></ROW><ROW><id>19866214</id><snippet>In [1]: import numpy as np

In [2]: np.uint8(255) * np.uint8(255)
./anaconda/bin/ipython:1: RuntimeWarning: overflow encountered in ubyte_scalars
Out[2]: 1
</snippet></ROW><ROW><id>19866214</id><snippet>1</snippet></ROW><ROW><id>19866214</id><snippet>Ix, Iy = Ix.astype(float), Iy.astype(float)</snippet></ROW><ROW><id>19866214</id><snippet>Ix[i][j]</snippet></ROW><ROW><id>19866214</id><snippet>Iy[i][j]</snippet></ROW><ROW><id>19866285</id><snippet>if((game_N==6 and game_D==5 ) or (game_N==5 and game_D==6)):
        curr_N=0;
        curr_D=0;
        while(game_N != 7 and game_D != 7):
</snippet></ROW><ROW><id>19866285</id><snippet>game_N=6,game_d=D</snippet></ROW><ROW><id>19866400</id><snippet>def changeXtransformVal(percentage=1.0, myList = myList):
</snippet></ROW><ROW><id>19866400</id><snippet>myList</snippet></ROW><ROW><id>19866400</id><snippet>def changeXtransformVal(percentage, myList):
</snippet></ROW><ROW><id>19866400</id><snippet>percentage</snippet></ROW><ROW><id>19866400</id><snippet>def changeXtransformVal(myList, percentage=1.0):
</snippet></ROW><ROW><id>19866400</id><snippet>changeXtransformVal(myList, percentage=2.0)
</snippet></ROW><ROW><id>19866400</id><snippet>percentage=</snippet></ROW><ROW><id>19866526</id><snippet>join</snippet></ROW><ROW><id>19866526</id><snippet>df1.join(df2, how='outer')
#or
df1.join(df2) # this works also
</snippet></ROW><ROW><id>19866526</id><snippet>data = {'col_1': [0, 1, 2, 3],
    'col_2': [4, 5, 6, 7]}
df1 = pd.DataFrame(data)

additional_data = {'col_3': [8, 9, 10, 11],
               'col_4': [12, 13, 14, 15]}
df2 = pd.DataFrame(additional_data)

df1.join(df2, how='outer')
</snippet></ROW><ROW><id>19866526</id><snippet>   col_1  col_2  col_3  col_4
0      0      4      8     12
1      1      5      9     13
2      2      6     10     14
3      3      7     11     15
</snippet></ROW><ROW><id>19866533</id><snippet>groupby</snippet></ROW><ROW><id>19866533</id><snippet>['date','category','country','criteria','size']</snippet></ROW><ROW><id>19866533</id><snippet>&gt;&gt;&gt; df.head()
                                                       clicks  cpc_cpm_revenue  \
date       category country   criteria        size                               
2013-11-05 Apps     Australia referrer=direct 300x250       0          0.01942   
                    Austria   referrer=direct 300x250       0          0.00500   
                    Belgium   referrer=direct 300x250       0          0.00200   
                    Brazil    referrer=direct 300x250       0          0.01220   
                    Canada    referrer=direct 300x250       0          0.02090   

                                                       impressions  
date       category country   criteria        size                  
2013-11-05 Apps     Australia referrer=direct 300x250           12  
                    Austria   referrer=direct 300x250            1  
                    Belgium   referrer=direct 300x250            2  
                    Brazil    referrer=direct 300x250           14  
                    Canada    referrer=direct 300x250           17  

&gt;&gt;&gt; df.columns
Index([clicks, cpc_cpm_revenue, impressions], dtype=object)
&gt;&gt;&gt; df.index
MultiIndex
[(2013-11-05, Apps, Australia, referrer=direct, 300x250), (2013-11-05, Apps, Austria, referrer=direct, 300x250), (2013-11-05, Apps, Belgium, referrer=direct, 300x250), (2013-11-05, Apps, Brazil, referrer=direct, 300x250), (2013-11-05, Apps, Canada, referrer=direct, 300x250), (2013-11-05, Apps, China, referrer=direct, 300x250), (2013-11-05, Apps, Dominican Republic, referrer=direct, 300x250), (2013-11-05, Apps, Finland, referrer=direct, 300x250), (2013-11-05, Apps, Greece, referrer=direct, 300x250), (2013-11-05, Apps, Hungary, referrer=direct, 300x250), (2013-11-05, Apps, India, referrer=direct, 300x250), (2013-11-05, Apps, Indonesia, referrer=direct, 300x250), (2013-11-05, Apps, Luxembourg, referrer=direct, 300x250), (2013-11-05, Apps, N/A, referrer=direct, 300x250), (2013-11-05, Apps, Nepal, referrer=direct, 300x250)]
</snippet></ROW><ROW><id>19866533</id><snippet>.reset_index()</snippet></ROW><ROW><id>19866533</id><snippet>&gt;&gt;&gt; df = df.reset_index()
&gt;&gt;&gt; df.head()
         date category    country         criteria     size  clicks  cpc_cpm_revenue  \
0  2013-11-05     Apps  Australia  referrer=direct  300x250       0          0.01942   
1  2013-11-05     Apps    Austria  referrer=direct  300x250       0          0.00500   
2  2013-11-05     Apps    Belgium  referrer=direct  300x250       0          0.00200   
3  2013-11-05     Apps     Brazil  referrer=direct  300x250       0          0.01220   
4  2013-11-05     Apps     Canada  referrer=direct  300x250       0          0.02090   

   impressions  
0           12  
1            1  
2            2  
3           14  
4           17  
</snippet></ROW><ROW><id>19866533</id><snippet>&gt;&gt;&gt; df = df.groupby(by=['date','category','country','criteria','size'], as_index=False).sum()
</snippet></ROW><ROW><id>19866645</id><snippet>result = {key: [v for v in value if v != ''] for key, value in result.items()}
</snippet></ROW><ROW><id>19866645</id><snippet>&gt;&gt;&gt; result = {
...     'mary': [1, 2, 3, ''],
...     'anna': [7, 9, 8],
...     'liz': [2, 1, '', ''],
... }
&gt;&gt;&gt; {key: [v for v in value if v != ''] for key, value in result.items()}
{'liz': [2, 1], 'mary': [1, 2, 3], 'anna': [7, 9, 8]}
</snippet></ROW><ROW><id>19866645</id><snippet>result.iteritems()</snippet></ROW><ROW><id>19866645</id><snippet>for key, value in result.items():
   result[key] = [v for v in value if v != '']
</snippet></ROW><ROW><id>19866751</id><snippet>same_type()</snippet></ROW><ROW><id>19866751</id><snippet>if same_type(var, []):
</snippet></ROW><ROW><id>19866751</id><snippet>list</snippet></ROW><ROW><id>19866841</id><snippet>if event.type==KEYDOWN:
    if event.key==K_a:
        movex=-10
        screen.blit(character_a1,(x,y))
</snippet></ROW><ROW><id>19866841</id><snippet>blit</snippet></ROW><ROW><id>19866841</id><snippet>screen.blit(character_s,(x,y))
</snippet></ROW><ROW><id>19866841</id><snippet>blit</snippet></ROW><ROW><id>19866841</id><snippet>blit</snippet></ROW><ROW><id>19866841</id><snippet>KEYDOWN</snippet></ROW><ROW><id>19866841</id><snippet># Along with the rest of your global variables...
activeCharacterImage = character_s

# The rest of your code...

if event.type==KEYDOWN:
    # When the 'A' key is pressed, switch the character image.
    if event.key==K_a:
        movex=-10
        activeCharacterImage = character_a1

# Some more of your code...

# Your new character drawing call.
screen.blit(activeCharacterImage, (x,y))
</snippet></ROW><ROW><id>19866960</id><snippet>    from createsend import __version__
  File "./createsend/__init__.py", line 1, in &lt;module&gt;
    from createsend import __version__
</snippet></ROW><ROW><id>19866960</id><snippet>createsend</snippet></ROW><ROW><id>19866960</id><snippet>createsend/createsend.py</snippet></ROW><ROW><id>19866960</id><snippet>__version__</snippet></ROW><ROW><id>19866973</id><snippet>{country_name: [location, population, president]}
</snippet></ROW><ROW><id>19866973</id><snippet>{country_name: 
 {'location': location, 'population': population, 'president': president}}
</snippet></ROW><ROW><id>19866973</id><snippet>def mutate_dic(dic, country_name, field, new_data):
    dic[country_name][field] = new_data
</snippet></ROW><ROW><id>19866973</id><snippet>dic['canada']['population'] = '150M+'
mutate_dic(dic, 'canada', 'population', '150+')
</snippet></ROW><ROW><id>19866973</id><snippet>Country</snippet></ROW><ROW><id>19866973</id><snippet>class Country(object):
    def __init__(self, location, population, president='none'):
        self.location = location
        self.population = population
        self.president = president

dic = {'canada': Country('North America', '150M+')}

dic['canada'].population = '100M+'
</snippet></ROW><ROW><id>19866973</id><snippet>name,location,population,president
Canada,North America,100M+,none
France,Europe,65.7M,Hollande
</snippet></ROW><ROW><id>19866973</id><snippet>import csv
with open('datafile', 'rb') as f:
    reader = csv.DictReader(f)
    dic = {row['name'].lower(): row for row in reader}
print dic
</snippet></ROW><ROW><id>19866973</id><snippet>{'canada': {'location': 'North America',
  'name': 'Canada',
  'population': '100M+',
  'president': 'none'},
 'france': {'location': 'Europe',
  'name': 'France',
  'population': '65.7M',
  'president': 'Hollande'}}
</snippet></ROW><ROW><id>19866973</id><snippet>dic = {name: {'location': value[0], 'population': value[1], 'president': value[2]}
       for name, value in dic.items()}
</snippet></ROW><ROW><id>19866973</id><snippet>dic = {name: Country(*value) for name, value in dic.items()}
</snippet></ROW><ROW><id>19866985</id><snippet>datetime</snippet></ROW><ROW><id>19866985</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; then = now - datetime.timedelta(hours=3)
&gt;&gt;&gt; then.hour
16
&gt;&gt;&gt; then.strftime('%H')
'16'
</snippet></ROW><ROW><id>19866985</id><snippet>time</snippet></ROW><ROW><id>19866985</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; now = time.mktime(time.localtime())
&gt;&gt;&gt; then = now - (3600 * 3)
&gt;&gt;&gt; time.localtime(then).tm_hour
16
&gt;&gt;&gt; time.strftime('%H', time.localtime(then))
'16'
</snippet></ROW><ROW><id>19867312</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>19867312</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>19867312</id><snippet>STATIC_URL</snippet></ROW><ROW><id>19867312</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>19867312</id><snippet>img</snippet></ROW><ROW><id>19867312</id><snippet>css</snippet></ROW><ROW><id>19867312</id><snippet>application</snippet></ROW><ROW><id>19867312</id><snippet>INSTALLED_APPS()</snippet></ROW><ROW><id>19867312</id><snippet>project</snippet></ROW><ROW><id>19867318</id><snippet>TemplateView</snippet></ROW><ROW><id>19867318</id><snippet>get_template_names</snippet></ROW><ROW><id>19867318</id><snippet>as_view</snippet></ROW><ROW><id>19867318</id><snippet>get_success_url</snippet></ROW><ROW><id>19867318</id><snippet>RegistrationView</snippet></ROW><ROW><id>19867318</id><snippet>def get_success_url(self, request, user):
    return ('registration_complete', (), {})
</snippet></ROW><ROW><id>19867318</id><snippet>template_name</snippet></ROW><ROW><id>19867434</id><snippet>b,c</snippet></ROW><ROW><id>19867434</id><snippet>tuple</snippet></ROW><ROW><id>19867434</id><snippet>('bb', 'cc')</snippet></ROW><ROW><id>19867434</id><snippet>&gt;&gt;&gt; vars() [b,c]= 10,11
&gt;&gt;&gt; vars()[('bb', 'cc')]
(10, 11)

&gt;&gt;&gt; x = b,c
&gt;&gt;&gt; type(x)
&lt;type 'tuple'&gt;
</snippet></ROW><ROW><id>19867444</id><snippet>0.4.9.6</snippet></ROW><ROW><id>19867444</id><snippet>pip</snippet></ROW><ROW><id>19867444</id><snippet>0.5.1.2</snippet></ROW><ROW><id>19867444</id><snippet>/Library/Python/2.7/lib/logging</snippet></ROW><ROW><id>19867444</id><snippet>$ pip freeze
</snippet></ROW><ROW><id>19867444</id><snippet>$ pip install &lt;package&gt;==&lt;version&gt;
</snippet></ROW><ROW><id>19867704</id><snippet>def bubble_sort_2nd_value(tuples_list):

    NEWLIST = []
    itemMoved=0
    for i in tuples_list:
        NEWLIST.append(i)
    for i in range(len(NEWLIST)):
         for j in range(i+1, len(NEWLIST)):
             if(NEWLIST[j][1]&lt;NEWLIST[i][1]):
                 itemMoved=1
                 NEWLIST[j],NEWLIST[i] = NEWLIST[i],NEWLIST[j]

    if(itemMoved==0): print("None")
    else: print(NEWLIST)

tuples_list = [("h1",1),("h2",2),("h3", 3), ("hi" , 4)]

bubble_sort_2nd_value(tuples_list)
</snippet></ROW><ROW><id>19867767</id><snippet>import SubstringDict
d = SubstringDict.SubstringDict()
d['foobar'] = 1  
d['barfoo'] = 2
d['forget'] = 3
d['arfbag'] = 4

print(d['a'])
# [1, 2, 4]
print(d['arf'])
# [2, 4]
print (d['oo'])
# [1, 2]
print(d['food'])
# []
</snippet></ROW><ROW><id>19867768</id><snippet>In [11]: df.loc[df.cherry == 'bad', ['apple', 'banana']] = np.nan

In [12]: df
Out[12]: 
   apple  banana cherry
0      0       3   good
1    NaN     NaN    bad
2      2       5   good
</snippet></ROW><ROW><id>19867999</id><snippet>dash</snippet></ROW><ROW><id>19867999</id><snippet>self.canvas.itemconfig(line, dash=())
</snippet></ROW><ROW><id>19868172</id><snippet>li=['sight', 'first', 'love', 'was', 'at', 'It']

d={}
for word in li:
    d.setdefault(len(word), []).append(word)

result=[d[n] for n in sorted(d, reverse=True)] 

print result  
# [['sight', 'first'], ['love'], ['was'], ['at', 'It']]
</snippet></ROW><ROW><id>19868172</id><snippet>from collections import defaultdict
d=defaultdict(list)
for word in li:
    d[len(word)].append(word)

result=[d[n] for n in sorted(d, reverse=True)] 
print result
</snippet></ROW><ROW><id>19868172</id><snippet>__missing__</snippet></ROW><ROW><id>19868172</id><snippet>class Dicto(dict):
    def __missing__(self, key):
        self[key]=[]
        return self[key]

d=Dicto()
for word in li:
    d[len(word)].append(word)

result=[d[n] for n in sorted(d, reverse=True)] 
print result
</snippet></ROW><ROW><id>19868370</id><snippet>range</snippet></ROW><ROW><id>19868370</id><snippet>range(365, len(quotes))</snippet></ROW><ROW><id>19868431</id><snippet>KeyProperty</snippet></ROW><ROW><id>19868431</id><snippet>ndb.Key</snippet></ROW><ROW><id>19868431</id><snippet>key.get()</snippet></ROW><ROW><id>19868431</id><snippet>print post.user.get().name
</snippet></ROW><ROW><id>19868431</id><snippet>{% for post in posts %} 
{{ post.message }}
{{ post.user.get().name }}
{% endfor %}
</snippet></ROW><ROW><id>19868431</id><snippet>keys = [p.user for p in posts]
users = ndb.get_multi(keys)
user_posts = zip(users, posts)
</snippet></ROW><ROW><id>19868431</id><snippet>{% for user, post in user_posts %}
{{ post.message }}
{{ user.name }}
{% endfor %}
</snippet></ROW><ROW><id>19868432</id><snippet>&gt;&gt;&gt; xy = ['X', 'Y']
&gt;&gt;&gt; distance_array = numpy.sum((df1[xy].values - df2[xy].values)**2, axis=1)
&gt;&gt;&gt; distance_array.argmin()
1
</snippet></ROW><ROW><id>19868432</id><snippet>&gt;&gt;&gt; distance_array.argsort()[:3]
array([1, 3, 2])
</snippet></ROW><ROW><id>19868472</id><snippet>index</snippet></ROW><ROW><id>19868472</id><snippet>for index, element in enumerate(my_array):
    if element["extension"] == ".py":
        return index
</snippet></ROW><ROW><id>19868472</id><snippet>return next(index for index, element in enumerate(array)
            if element["extension"] == ".py")
</snippet></ROW><ROW><id>19868472</id><snippet>filter</snippet></ROW><ROW><id>19868472</id><snippet>key</snippet></ROW><ROW><id>19868472</id><snippet>indexOf</snippet></ROW><ROW><id>19868520</id><snippet>|</snippet></ROW><ROW><id>19868520</id><snippet>find</snippet></ROW><ROW><id>19868520</id><snippet>find</snippet></ROW><ROW><id>19868520</id><snippet>shell=True</snippet></ROW><ROW><id>19868520</id><snippet>Popen</snippet></ROW><ROW><id>19868520</id><snippet>subprocess</snippet></ROW><ROW><id>19868520</id><snippet>split</snippet></ROW><ROW><id>19868520</id><snippet>shlex</snippet></ROW><ROW><id>19868520</id><snippet>shlex</snippet></ROW><ROW><id>19868520</id><snippet>pfind = Popen(['find', root, '-iname', '*.css'], stdout=PIPE)
pxargs = Popen(['xargs', 'sed', '-i', 's/[Ff][Oo][Oo]/bar/g'], 
               stdin=pfind.stdout, stdout=PIPE)
pfind.stdout.close()
output = pxargs.communicate()
</snippet></ROW><ROW><id>19868520</id><snippet>os.walk</snippet></ROW><ROW><id>19868520</id><snippet>find</snippet></ROW><ROW><id>19868520</id><snippet>xargs</snippet></ROW><ROW><id>19868520</id><snippet>re</snippet></ROW><ROW><id>19868520</id><snippet>sed</snippet></ROW><ROW><id>19868520</id><snippet>find</snippet></ROW><ROW><id>19868520</id><snippet>sed</snippet></ROW><ROW><id>19868520</id><snippet>os.walk</snippet></ROW><ROW><id>19868520</id><snippet>re.sub</snippet></ROW><ROW><id>19868640</id><snippet>def create_new_pea(request):
    PeaFormset = inlineformset_factory(django.contrib.auth.models.User, Pea)
    formset = PeaFormset(instance=request.user)
    for form in formset:
        form.fields['bowl'].queryset = request.user.bowl_set.all()
    return render(request, 'app/pea/create.html', {'formset': formset}
</snippet></ROW><ROW><id>19868640</id><snippet>Formset</snippet></ROW><ROW><id>19868640</id><snippet>_construct_forms</snippet></ROW><ROW><id>19868640</id><snippet>class UserLimitedFormset(BaseInlineFormset):
    def _construct_forms(self):
        super(UserLimitedFormset, self)._construct_forms()
        for form in self:
            form.fields['bowl'].queryset = self.instance.bowl_set.all()

PeaFormset = inlineformset_factory(django.contrib.auth.models.User, Pea, formset=UserLimitedFormset)
</snippet></ROW><ROW><id>19868640</id><snippet>functools.partial</snippet></ROW><ROW><id>19868640</id><snippet>def create_new_pea(request):
    user = request.user
    def set_queryset(f, **kwargs):
        formfield = f.formfield(**kwargs)
        if f.name == 'bowl':
            formfield.queryset = user.bowl_set.all()
        return formfield
    PeaFormset = inlineformset_factory(django.contrib.auth.models.User, Pea, formfield_callback=set_queryset)
</snippet></ROW><ROW><id>19868650</id><snippet>label</snippet></ROW><ROW><id>19868650</id><snippet>lables</snippet></ROW><ROW><id>19868650</id><snippet>labels</snippet></ROW><ROW><id>19868650</id><snippet>plot(temp,label = files)
</snippet></ROW><ROW><id>19868653</id><snippet>def print_report(symbol:str, strategy:str,
                 dates:list, closings:list, indicators:list, signals:list):
    fmt = '{0[0]:&lt;0}{0[1]:&gt;13}{0[2]:&gt;15}{0[3]:&gt;15}'
    print()
    print('SYMBOL:   ', symbol.upper())
    print('STRATEGY: ', strategy)
    print()
    print(fmt.format(('DATE', 'CLOSING', 'INDICATOR', 'SIGNAL')))
    for d in zip(dates, closings, indicators, signals):
        print(fmt.format(d))
</snippet></ROW><ROW><id>19868653</id><snippet>format</snippet></ROW><ROW><id>19868688</id><snippet>LineCollection</snippet></ROW><ROW><id>19868688</id><snippet>array=floats_list</snippet></ROW><ROW><id>19868688</id><snippet>import numpy
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection

# The line format you curently have:
lines = [[(0, 1, 2, 3, 4), (4, 5, 6, 7, 8)],
         [(0, 1, 2, 3, 4), (0, 1, 2, 3, 4)],
         [(0, 1, 2, 3, 4), (8, 7, 6, 5, 4)],
         [(4, 5, 6, 7, 8), (0, 1, 2, 3, 4)]]

# Reformat it to what `LineCollection` expects:
lines = [zip(x, y) for x, y in lines]

z = np.array([0.1, 9.4, 3.8, 2.0])

fig, ax = plt.subplots()
lines = LineCollection(lines, array=z, cmap=plt.cm.rainbow, linewidths=5)
ax.add_collection(lines)
fig.colorbar(lines)

# Manually adding artists doesn't rescale the plot, so we need to autoscale
ax.autoscale()

plt.show()
</snippet></ROW><ROW><id>19868688</id><snippet>plot</snippet></ROW><ROW><id>19868688</id><snippet>Collections</snippet></ROW><ROW><id>19868745</id><snippet>re.match("[0-7],[0-7]$", input):
</snippet></ROW><ROW><id>19868745</id><snippet>[...]</snippet></ROW><ROW><id>19868745</id><snippet>0-7</snippet></ROW><ROW><id>19868745</id><snippet>input</snippet></ROW><ROW><id>19868745</id><snippet>input</snippet></ROW><ROW><id>19868745</id><snippet>input</snippet></ROW><ROW><id>19868745</id><snippet>()</snippet></ROW><ROW><id>19868745</id><snippet>re.match("[0-7],[0-7]$", input()):
</snippet></ROW><ROW><id>19868822</id><snippet>function</snippet></ROW><ROW><id>19868822</id><snippet>__dict__</snippet></ROW><ROW><id>19868822</id><snippet>import types
def instance_has_method(instance, name):
    try:
        attr = getattr(instance, name)
        return isinstance(attr, types.FunctionType)
    except AttributeError:
        return False
</snippet></ROW><ROW><id>19868822</id><snippet>callable</snippet></ROW><ROW><id>19868822</id><snippet>return hasattr(attr, '__call__')</snippet></ROW><ROW><id>19868831</id><snippet>INADDR_ANY</snippet></ROW><ROW><id>19868831</id><snippet>0.0.0.0</snippet></ROW><ROW><id>19868831</id><snippet>select</snippet></ROW><ROW><id>19868831</id><snippet>socket.gethostname()</snippet></ROW><ROW><id>19868831</id><snippet>INADDR_ANY</snippet></ROW><ROW><id>19868831</id><snippet>INADDR_ANY</snippet></ROW><ROW><id>19868831</id><snippet>INADDR_ANY</snippet></ROW><ROW><id>19868831</id><snippet>UDP_IP = ''</snippet></ROW><ROW><id>19868831</id><snippet>UDP_IP = '0.0.0.0'</snippet></ROW><ROW><id>19868831</id><snippet>'0.0.0.0'</snippet></ROW><ROW><id>19868831</id><snippet>socket</snippet></ROW><ROW><id>19868831</id><snippet>'0.0.0.0'</snippet></ROW><ROW><id>19868831</id><snippet>0</snippet></ROW><ROW><id>19868831</id><snippet>int</snippet></ROW><ROW><id>19868831</id><snippet>b'\0\0\0\0'</snippet></ROW><ROW><id>19868831</id><snippet>socket.INADDR_ANY</snippet></ROW><ROW><id>19868831</id><snippet>0</snippet></ROW><ROW><id>19868831</id><snippet>b'\0\0\0\0'</snippet></ROW><ROW><id>19868831</id><snippet>bind</snippet></ROW><ROW><id>19868831</id><snippet>0</snippet></ROW><ROW><id>19868831</id><snippet>b'\0\0\0\0'</snippet></ROW><ROW><id>19868831</id><snippet>'0.0.0.0'</snippet></ROW><ROW><id>19868831</id><snippet>'0.0.0.0'</snippet></ROW><ROW><id>19868837</id><snippet>groups = sorted(groups, key=lambda a: (a['name'] is None, a['name']))
</snippet></ROW><ROW><id>19868837</id><snippet>[{'name': 0}, {'name': 1}, {'name': 2}, {'name': 3}, {'name': 4}, {'name': None}]
</snippet></ROW><ROW><id>19868837</id><snippet>[(False, 0), (False, 1), (False, 2), (False, 3), (False, 4), (True, None)]
</snippet></ROW><ROW><id>19868837</id><snippet>True</snippet></ROW><ROW><id>19868858</id><snippet>xbound = BoundedGamma('xbound', alpha=1, beta=2, testval=1)
</snippet></ROW><ROW><id>19868936</id><snippet>json</snippet></ROW><ROW><id>19868936</id><snippet>import json
json_str = '{"foo": "bar"}'
d = json.loads(json_str) # d = {'foo': 'bar'}
</snippet></ROW><ROW><id>19868936</id><snippet>import json
d = [1, 2, 3, 4]
json_str = json.dumps(d) # json_str = "[1, 2, 3, 4]"
</snippet></ROW><ROW><id>19869013</id><snippet>return</snippet></ROW><ROW><id>19869013</id><snippet>for</snippet></ROW><ROW><id>19869013</id><snippet>False</snippet></ROW><ROW><id>19869013</id><snippet>True</snippet></ROW><ROW><id>19869013</id><snippet>def is_sorted(t):
    for i in range(len(t) - 1):
        if t[i] &gt; t[i + 1]:
            return False
    return True
</snippet></ROW><ROW><id>19869032</id><snippet>repr</snippet></ROW><ROW><id>19869032</id><snippet>str</snippet></ROW><ROW><id>19869032</id><snippet>int</snippet></ROW><ROW><id>19869032</id><snippet>class Myint(int):
    def __repr__(self):
        if self &gt; 0:
            return '+{}'.format(self)
        else:
            return '{}'.format(self)

    #similarly override `__str__` as well
...         
&gt;&gt;&gt; a = [Myint(x) for x in (1,2,-3,-4,0,4,0,-2)]
&gt;&gt;&gt; a
[+1, +2, -3, -4, 0, +4, 0, -2]
&gt;&gt;&gt; a[0]
+1
</snippet></ROW><ROW><id>19869058</id><snippet>y</snippet></ROW><ROW><id>19869058</id><snippet>range(1, y+1)</snippet></ROW><ROW><id>19869058</id><snippet>itertools</snippet></ROW><ROW><id>19869058</id><snippet>import itertools
print list(itertools.combinations(range(1, y+1), x))
</snippet></ROW><ROW><id>19869058</id><snippet>print [list(x) for x in itertools.combinations(range(1, y+1), x)]
</snippet></ROW><ROW><id>19869058</id><snippet>map()</snippet></ROW><ROW><id>19869058</id><snippet>print map(list, itertools.combinations(range(1, y+1), x))
</snippet></ROW><ROW><id>19869174</id><snippet>class PlayerTournament(models.Model):
    player = models.ForeignKey(Tournament)
    tournament = models.ForeignKey(Player)
</snippet></ROW><ROW><id>19869174</id><snippet>player</snippet></ROW><ROW><id>19869174</id><snippet>tournament</snippet></ROW><ROW><id>19869174</id><snippet>PlayerTournament.objects.filter(player__title = "Winter").values()
</snippet></ROW><ROW><id>19869174</id><snippet>select_related</snippet></ROW><ROW><id>19869174</id><snippet>prefetch_related</snippet></ROW><ROW><id>19869174</id><snippet>values</snippet></ROW><ROW><id>19869255</id><snippet>&gt;&gt;&gt; '02:00PM' &gt; '12:00PM'
False
&gt;&gt;&gt; '2' &gt; '100'
True
</snippet></ROW><ROW><id>19869255</id><snippet>time.strptime</snippet></ROW><ROW><id>19869255</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; import pprint
def func(x):
    return (len(x), time.strptime(x[-4], '%I:%M%p'))
... 
&gt;&gt;&gt; pprint.pprint(sorted(x, key=func))
[['0690', '07:25AM', '09:19AM', 1, 4],
 ['0201', '08:50AM', '10:50AM', 1, 4],
 ['1166', '04:35PM', '06:36PM', 1, 4],
 ['0845', '05:40PM', '07:44PM', 1, 4],
 ['1267', '07:05PM', '09:07PM', 1, 4],
 ['1513', '08:19PM', '10:21PM', 1, 4],
 ['1513', '08:19PM', '10:21PM', 1, 4],
 ['1290', '09:45PM', '11:43PM', 1, 4],
 ['1290', '09:45PM', '11:43PM', 1, 4],
 ['8772', '0159', '12:33PM', '02:43PM', 1, 5],
 ['2086', '2231', '04:10PM', '06:20PM', 1, 5],
 ['0888', '0570', '09:42PM', '12:20AM', 1, 5]]
</snippet></ROW><ROW><id>19869277</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19869277</id><snippet>export PYTHONPATH=/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/:$PYTHONPATH
</snippet></ROW><ROW><id>19869277</id><snippet>~/.bashrc
</snippet></ROW><ROW><id>19869277</id><snippet>mv /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/n‌​umpy/ /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/n‌​umpy_old/
cp /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/nump‌​‌​y/ /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/n‌​umpy/
</snippet></ROW><ROW><id>19869277</id><snippet>pip</snippet></ROW><ROW><id>19869277</id><snippet>pip</snippet></ROW><ROW><id>19869277</id><snippet>which pip
</snippet></ROW><ROW><id>19869277</id><snippet>/Library/...</snippet></ROW><ROW><id>19869277</id><snippet>pip install numpy
</snippet></ROW><ROW><id>19869335</id><snippet>exec</snippet></ROW><ROW><id>19869335</id><snippet>execfile</snippet></ROW><ROW><id>19869454</id><snippet>def calculate(self, alist, days=2):

    # rest of your functions

    tol=0.01
    averages[:] = ("%.2f" % avg if abs(avg)&gt;=tol else ' '  for avg in averages)

    return averages, signals
</snippet></ROW><ROW><id>19869472</id><snippet>import ftp
import os

def upload(ftp, file):
    ext = os.path.splitext(file)[1]
    if ext in (".txt", ".htm", ".html"):
        ftp.storlines("STOR " + file, open(file))
    else:
        ftp.storbinary("STOR " + file, open(file, "rb"), 1024)

ftp = ftplib.FTP("ftp.fbi.gov")
ftp.login("mulder", "trustno1")

upload(ftp, "trixie.zip")
upload(ftp, "file.txt")
upload(ftp, "sightings.jpg")
</snippet></ROW><ROW><id>19869601</id><snippet>('a', 'b')</snippet></ROW><ROW><id>19869601</id><snippet>('b', 'a')</snippet></ROW><ROW><id>19869601</id><snippet>&gt;&gt;&gt; data = [('a','b'),('b','a'),('c','d')]
&gt;&gt;&gt; data = [tuple(sorted(x)) for x in data]
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter(data)
&gt;&gt;&gt; c
Counter({('a', 'b'): 2, ('c', 'd'): 1})
</snippet></ROW><ROW><id>19869601</id><snippet>&gt;&gt;&gt; c.keys()
[('a', 'b'), ('c', 'd')]
&gt;&gt;&gt; c.values()
[2, 1]
&gt;&gt;&gt; c.items()
[(('a', 'b'), 2), (('c', 'd'), 1)]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19869771</id><snippet>lambda</snippet></ROW><ROW><id>19869771</id><snippet>map()</snippet></ROW><ROW><id>19869771</id><snippet>def func(mylist):
    return [elem for elem in mylist if elem &gt; 0]

onlyPositives = [func(e) for e in myintlist]
</snippet></ROW><ROW><id>19869771</id><snippet>map()</snippet></ROW><ROW><id>19869771</id><snippet>filter()</snippet></ROW><ROW><id>19869907</id><snippet>bool(entity.ignore)</snippet></ROW><ROW><id>19869907</id><snippet>missing</snippet></ROW><ROW><id>19869907</id><snippet>ignore</snippet></ROW><ROW><id>19869907</id><snippet>False</snippet></ROW><ROW><id>19869907</id><snippet>def iter_entities(cursor=None):
    entries = AppList.query()
    res, cur, more = entries.fetch_page(100, start_cursor=cursor)
    put_queue = [ent for ent in res if not hasattr(ent, 'ignore')]
    # put_queue = []
    # for ent in res:
    #    if not hasattr(ent, 'ignore'):
    #        put_queue.append(ent)
    ndb.put_multi(put_queue)
    if more:
        iter_entities(cur) # a taskqueue is better
</snippet></ROW><ROW><id>19870058</id><snippet>&gt;&gt;&gt; data = [ [5,12,46,4,99,6],[23,66,99,32,77] ]
&gt;&gt;&gt; set_data = [set(s) for s in data]
&gt;&gt;&gt; set_data
[set([99, 4, 5, 6, 12, 46]), set([32, 66, 99, 77, 23])]
&gt;&gt;&gt; myset = set([4,5,6])
&gt;&gt;&gt; [myset.issubset(s) for s in set_data]
[True, False]
</snippet></ROW><ROW><id>19870060</id><snippet>SomeClass</snippet></ROW><ROW><id>19870060</id><snippet>Container</snippet></ROW><ROW><id>19870060</id><snippet>Container</snippet></ROW><ROW><id>19870060</id><snippet>_on_change()</snippet></ROW><ROW><id>19870060</id><snippet>SomeClass</snippet></ROW><ROW><id>19870060</id><snippet>class Container(object):
    def __init__(self, data):
        self.data = data

    def __setattr__(self, name, value):
        if not hasattr(self, name) or getattr(self, name) != value:
            self.on_change()
        super(Container, self).__setattr__(name, value)

    def on_change(self):
        pass

class SomeClass(object):
    def __init__(self, attr):
        self._attr = attr
        self._attr.on_change = self._on_change

    @property
    def attr(self):
        return self._attr

    @attr.setter
    def attr(self,value):
        if self._attr != value:
            self._on_change()
        self._attr = value

    def _on_change(self):
        print "Do some code here every time attr changes"
</snippet></ROW><ROW><id>19870060</id><snippet>&gt;&gt;&gt; b = SomeClass(Container(5))
&gt;&gt;&gt; b.attr.data = 10
Do some code here every time attr changes
&gt;&gt;&gt; b.attr.data = 10     # on_change() not called if the value isn't changing
&gt;&gt;&gt; b.attr.data2 = 'foo' # new properties being add result in an on_change() call
Do some code here every time attr changes
</snippet></ROW><ROW><id>19870060</id><snippet>SomeClass</snippet></ROW><ROW><id>19870060</id><snippet>__init__()</snippet></ROW><ROW><id>19870101</id><snippet>def string_distance(A, B, index_b):
    '''Count how many substitutions are required to
    change string A into the string beginning at
    index_b in string B.'''
    return 999 # FIXME

def subsequence(A, B, n):
    '''Search for the substring of B that is equal to
    A except for the minimal number of substitutions,
    and return a tuple of the index of that substring
    in B and the number of substitutions required,
    unless there is no such substring with n or fewer
    substitutions, in which case return the tuple of
    (-1, -1).'''
    answer_distance = -1
    answer_index = -1
    index = 0
    while index &lt;= len(B) - len(A):
        substitutions_required = string_distance(A, B, index)
        # Does a match at this location need n or fewer substitutions?
        is_close_enough = False # FIXME
        # Is a match at this location better than the best match so far?
        is_better = False # FIXME
        if is_close_enough and is_better:
            answer_distance = substitutions_required
            answer_index = index
        index += 1
    return answer_index, answer_distance
</snippet></ROW><ROW><id>19870101</id><snippet>def test_string_distance():
    test_data = [
        # a         b          index_b   expected
        ("ABC",    "ABCDEF",   0,        0),
        ("ABX",    "ABCDEF",   0,        1),
        ("XYZ",    "ABCDEF",   0,        3),
        ("XBC",    "ABCDEF",   0,        1),
        ("CEE",    "ABCDEF",   2,        1),
        ("DEF",    "ABCDEF",   3,        0),
        ("AAAAA",  "BBBBBBBB", 3,        5),
        ("BAAAA",  "BBBBBBBB", 3,        4),
        ("ABAAB",  "BBBBBBBB", 3,        3),
    ]
    for a, b, index_b, expected in test_data:
        result = string_distance(a, b, index_b)
        if result != expected:
            print "string_distance({}, {}, {}) was {} but should be {}".format(
                    a, b, index_b, result, expected)

def test_subsequence():
    test_data = [
        # A         B               n   expected
        ("AXY",    "AYAXXXAAYYAX",  3,  (2,1)),
        ("AXY",    "AYAXXXAAYYAX",  2,  (2,1)),
        ("AXY",    "AYAXXXAAYYAX",  1,  (2,1)),
        ("AXY",    "AYAXXXAAYYAX",  0,  (-1,-1)),
        ("XAAY",   "AYAXXXAAYYAX",  2,  (5,0)),
        ("XAAY",   "XXAXAAXAAY",    2,  (6,0)),
        ("ABCDEF", "ZZAABAXCDEEEF", 3,  (5,2)),
        ("ABCDEF", "ZZAABAXCDEEEF", 2,  (5,2)),
        ("ABCDEF", "ZZAABAXCDEEEF", 1,  (-1,-1)),
        ("ABCDEF", "ZZAABXBCDEEEF", 3,  (5,2)),
    ]
    for a, b, n, expected in test_data:
        result = subsequence(a, b, n)
        if result != expected:
            print "test_subsequence({}, {}, {}) was {} but should be {}".format(
                    a, b, n, result, expected)

if __name__ == '__main__':
    test_string_distance()
    test_subsequence()
</snippet></ROW><ROW><id>19870248</id><snippet>eval()</snippet></ROW><ROW><id>19870348</id><snippet>&gt;&gt;&gt; '2' &gt; '10'  #strings are compared lexicographically
True
</snippet></ROW><ROW><id>19870348</id><snippet>def summaryStats():
    filename = input("Enter a file name: ")
    with open(filename) as f:
        data = [int(line) for line in f]

    print("The minimum value is ", min(data))
    print("The maximum value is ", max(data))
    print("The average value is ", sum(data)/len(data))
</snippet></ROW><ROW><id>19870348</id><snippet>Enter a file name: abc1
The minimum value is  255
The maximum value is  893
The average value is  550.6666666666666
</snippet></ROW><ROW><id>19870709</id><snippet>numpy</snippet></ROW><ROW><id>19870709</id><snippet>numpy.diff</snippet></ROW><ROW><id>19870758</id><snippet>for entity in root.find('output'):
   if oc_entities.get(entity.tag):
     if type(oc_entities.get(entity.tag)) == 'dict':
       oc_entities[entity.tag] = [oc_entities[entity.tag]]
     oc_entities[entity.tag].append({'keyword' : entity.text, 'relevance' : entity.get('relevance')})
   else:
     oc_entities[entity.tag] = {'keyword' : entity.text, 'relevance' : entity.get('relevance')}
</snippet></ROW><ROW><id>19870814</id><snippet>mtcars['n'] = mtcars.groupby("cyl")['cyl'].transform('count')
</snippet></ROW><ROW><id>19870814</id><snippet>import pandas as pd
import pandas.rpy.common as com

mtcars = com.load_data('mtcars')
mtcars['n'] = mtcars.groupby("cyl")['cyl'].transform('count')
print(mtcars.head())
</snippet></ROW><ROW><id>19870814</id><snippet>                    mpg  cyl  disp   hp  drat     wt   qsec  vs  am  gear  carb   n
Mazda RX4          21.0    6   160  110  3.90  2.620  16.46   0   1     4     4   7
Mazda RX4 Wag      21.0    6   160  110  3.90  2.875  17.02   0   1     4     4   7
Datsun 710         22.8    4   108   93  3.85  2.320  18.61   1   1     4     1  11
Hornet 4 Drive     21.4    6   258  110  3.08  3.215  19.44   1   0     3     1   7
Hornet Sportabout  18.7    8   360  175  3.15  3.440  17.02   0   0     3     2  14
</snippet></ROW><ROW><id>19870814</id><snippet>groupby/apply</snippet></ROW><ROW><id>19870814</id><snippet>mtcars[['n','total_wt']] = mtcars.groupby("cyl").apply(
    lambda x: pd.DataFrame({'n': len(x['cyl']), 'total_wt': x['wt'].sum()},
                           index=x.index))
print(mtcars.head())
</snippet></ROW><ROW><id>19870814</id><snippet>                    mpg  cyl  disp   hp  drat     wt   qsec  vs  am  gear  carb   n  total_wt
Mazda RX4          21.0    6   160  110  3.90  2.620  16.46   0   1     4     4   7    21.820
Mazda RX4 Wag      21.0    6   160  110  3.90  2.875  17.02   0   1     4     4   7    21.820
Datsun 710         22.8    4   108   93  3.85  2.320  18.61   1   1     4     1  11    25.143
Hornet 4 Drive     21.4    6   258  110  3.08  3.215  19.44   1   0     3     1   7    21.820
Hornet Sportabout  18.7    8   360  175  3.15  3.440  17.02   0   0     3     2  14    55.989
</snippet></ROW><ROW><id>19870821</id><snippet>scikit-learn</snippet></ROW><ROW><id>19870821</id><snippet>scikit-learn</snippet></ROW><ROW><id>19870821</id><snippet>&gt;&gt;&gt; from sklearn import tree
&gt;&gt;&gt; clf = tree.DecisionTreeClassifier()
&gt;&gt;&gt; clf = clf.fit(X, Y)
</snippet></ROW><ROW><id>19870821</id><snippet>&gt;&gt;&gt; X = [[v0_height, v0_weight, v0_stake_aversion, v0_garlic_aversion, 
          v0_reflectance, v0_shiny],
         [v1_height, v1_weight, v1_stake_aversion, v1_garlic_aversion, 
          v1_reflectance, v1_shiny],
         ...
        ]
</snippet></ROW><ROW><id>19870821</id><snippet>&gt;&gt;&gt; Y = [v0_is_vampire, v1_is_vampire, ...]
</snippet></ROW><ROW><id>19870821</id><snippet>new</snippet></ROW><ROW><id>19870821</id><snippet>&gt;&gt;&gt; clf.predict(new)
array([1])
</snippet></ROW><ROW><id>19870821</id><snippet>tree.DecisionTreeRegressor</snippet></ROW><ROW><id>19870821</id><snippet>tree.DecisionTreeClassifier</snippet></ROW><ROW><id>19870855</id><snippet>Recipient</snippet></ROW><ROW><id>19871002</id><snippet>writerow()</snippet></ROW><ROW><id>19871002</id><snippet>#!/usr/bin/env python

import csv
import datetime
import copy
from collections import defaultdict

with open(r"testin.csv") as i, open(r"TestSingleParaSRResuls.csv", "wb") as o:
    rdr = csv.reader(i)
    wrt = csv.writer(o)

    data, currdate = defaultdict(lambda:[0, 0, 0, 0]), None
    for line in rdr:
        date, name = datetime.datetime.strptime(line[0], '%d/%m/%Y'), line[7]

        if date != currdate or not currdate:
            for v in data.itervalues():
                #print v[:2]
                #print v[2:]
                #print "\n"

                v[:2] = v[2:]
            currdate = date

        top,bottom = data[name][0:2]
        try:
            quotient = float(top)/bottom
        except ZeroDivisionError:
            quotient = 0
        wrt.writerow(line + data[name][:2]+ [quotient])

        data[name][3] += 1
        if line[6] == "1": data[name][2] += 1 
</snippet></ROW><ROW><id>19871038</id><snippet>+</snippet></ROW><ROW><id>19871038</id><snippet>firstbinomial =  (((b * -1) + math.sqrt((b ** 2) - (4 * a * c))) / (2 * a)) * -1
secondbinomial = (((b * -1) - math.sqrt((b ** 2) - (4 * a * c))) / (2 * a)) * -1

print "The binomials are: (x{:+.0f})(x{:+.0f})".format(firstbinomial, secondbinomial)

# prints "The binomials are: (x-3)(x+5)"
</snippet></ROW><ROW><id>19871038</id><snippet>print "The binomials are: (x+{})(x+{})".format(firstbinomial, secondbinomial)

# prints "The binomials are: (x+-3)(x+5)"
</snippet></ROW><ROW><id>19871038</id><snippet>-</snippet></ROW><ROW><id>19871093</id><snippet>Counter()</snippet></ROW><ROW><id>19871093</id><snippet>from collections import Counter

data = {'Paul ': [5, Counter({'i': 1, 'in': 1, 't': 1, 'fa': 1, 'cr': 1})],
        'Lisa ': [4, Counter({'f': 3, 'bo': 1})],
        'Tracy ': [6, Counter({'sl': 3, 'fi': 1, 'an': 1, 'piz': 1})],
        'Maria': [2, Counter({'t': 2})]}

for lst in data.values():
    lst[1] = {k: (lst[0], float(v)/lst[0]) for k, v in lst[1].items()}
</snippet></ROW><ROW><id>19871093</id><snippet>&gt;&gt;&gt; data
{'Lisa ': [4, {'bo': (4, 0.25), 'f': (4, 0.75)}],
 'Maria': [2, {'t': (2, 1.0)}],
 'Paul ': [5, {'cr': (5, 0.2), 'fa': (5, 0.2), 'i': (5, 0.2), 'in': (5, 0.2), 't': (5, 0.2)}],
 'Tracy ': [6, {'an': (6, 0.16666666666666666), 'fi': (6, 0.16666666666666666), 'piz': (6, 0.16666666666666666), 'sl': (6, 0.5)}]}
</snippet></ROW><ROW><id>19871093</id><snippet>result = {}
for key, lst in data.items():
    result[key] = [lst[0], {k: (lst[0], float(v)/lst[0]) for k, v in lst[1].items()}]
</snippet></ROW><ROW><id>19871177</id><snippet>outFile.close()
</snippet></ROW><ROW><id>19871177</id><snippet>with</snippet></ROW><ROW><id>19871177</id><snippet>with open( "input.txt", "w" ) as outFile:
    for item in oplist:
        outFile.write(item + "\n")
</snippet></ROW><ROW><id>19871231</id><snippet>create_result()</snippet></ROW><ROW><id>19871231</id><snippet>Results</snippet></ROW><ROW><id>19871231</id><snippet>from Tkinter import *
from ttk import *

class Results():

    def __init__(self, frame, name):
        self.lab_frame = LabelFrame(master=frame, text=name)
        self.lab_frame.grid(sticky='we', padx=10, pady=10, columnspan=10)

        self.l1 = Label(master=self.lab_frame, text='Result 1:')
        self.l1.grid(sticky='e', row=0, column=0, pady=2)

        self.l2 = Label(master=self.lab_frame, text='Result 2:')
        self.l2.grid(sticky='e', row=1, column=0, pady=2)

        self.l3 = Label(master=self.lab_frame, text='Result 3:')
        self.l3.grid(sticky='e', row=2, column=0, pady=2)

        self.r1 = Label(master=self.lab_frame, text='')
        self.r1.grid(sticky='w', row=0, column=1, pady=2)

        self.r2 = Label(master=self.lab_frame, text='')
        self.r2.grid(sticky='w', row=1, column=1, pady=2)

        self.r3 = Label(master=self.lab_frame, text='')
        self.r3.grid(sticky='w', row=2, column=1, pady=2)

class App():
    def __init__(self, master):
        self.master = master
        self.master.title('Question')
        self.create_main_frame()  

    def create_main_frame(self):
        self.main_f = Frame(self.master)
        nb = Notebook(padding=5)
        nb.pack(anchor='w')
        self.tab1(nb)

    def tab1(self, nb):
        tab1_frame = Frame(nb)
        nb.add(tab1_frame, text='Tab 1', underline=0)

        prod_lab = Label(tab1_frame, text='Entry:')
        prod_lab.grid(row=1, column=0, padx=(10,0), pady=(10,5), sticky='e')

        self.product_e = Entry(tab1_frame, width=40)
        self.product_e.grid(row=1, column=1, padx=(0,10), pady=(10,5))

        self.button1 = Button(tab1_frame,
                               text="Run",
                               command=self.run1
                               )
        self.button1.grid(row=2, column=1, padx=(0,10), pady=(0,10), sticky='ne')


        self.results1 = Results(tab1_frame, 'Results Section 1')
        self.results2 = Results(tab1_frame, 'Results Section 2')
        self.results3 = Results(tab1_frame, 'Results Section 3')


    def run1(self):
        #This is the method that will be used to find the results I need
        #For the sake of this question, let's pretend I want to put whatever text is in Entry 1, into results section 2 result 2
        print (self.product_e.get())
        print ('How do I use "widget.config()" to modify the 3 results sections separately???')
        self.results1.r2.config(text='1111111111')
        self.results2.r2.config(text='xxxxxxxxxx')
        self.results3.r2.config(text='----------')

master = Tk()
app = App(master)
master.mainloop()
</snippet></ROW><ROW><id>19871257</id><snippet>parse</snippet></ROW><ROW><id>19871257</id><snippet>def parse(self, response):
    return [FormRequest.from_response(response,
                formdata={'username': 'john', 'password': 'secret'},
                callback=self.after_login)]
</snippet></ROW><ROW><id>19871257</id><snippet>after_login</snippet></ROW><ROW><id>19871257</id><snippet>def after_login(self, response):
    if "Login failed" in response.body:
        self.log("Login failed", level=log.ERROR)
    else:
        for i in xrange(1, 50): # 1 to 50 for testing
            # convert to string
            iStr = str(i)

            # add leading zeros to get to four digit length
            while len(iStr) &lt; 4:
                iStr = '0{0}'.format(iStr)

            # call make requests
            yield Request(url='https://mycrawlsite.com/{0}/'.format(iStr),
                          callback=self.scrape_page)
</snippet></ROW><ROW><id>19871257</id><snippet>scrape_page</snippet></ROW><ROW><id>19871257</id><snippet>format</snippet></ROW><ROW><id>19871308</id><snippet>re.match</snippet></ROW><ROW><id>19871308</id><snippet>re.search</snippet></ROW><ROW><id>19871308</id><snippet>import re

a = " ebrj wjrbw erjwek wekjb rjERJK ABB RAEJKE BWE RWEJBEWJ B KREWBJ BWERBJ32J3B23B J BJ235JK BJJ523 2"

print re.search(ur'(wekjb|ABB)',a).group()
if re.search(ur'(wekjb|ABB)',a):
    print 'success'
</snippet></ROW><ROW><id>19871308</id><snippet>wekjb
success
</snippet></ROW><ROW><id>19871308</id><snippet>/</snippet></ROW><ROW><id>19871308</id><snippet>.group()</snippet></ROW><ROW><id>19871308</id><snippet>print</snippet></ROW><ROW><id>19871308</id><snippet>&lt;_sre.SRE_Match object at 0x01812220&gt;</snippet></ROW><ROW><id>19871557</id><snippet>f = open('coordfile', 'r')
newcontents=""
linecounter=-1
for line in f:
    if linecounter&gt;=0:
       linecounter+=1
    if "Oil Pool" in line: 
       linecounter+=1
    if linecounter&gt;6:
       linecounter=-1
    if linecounter==-1:
       newcontents+=line
f.close()

f=open('coordfile', 'w')
f.write(newcontents)
f.close()
</snippet></ROW><ROW><id>19871640</id><snippet>import itertools
import random

probabilities = [0.3, 0.2, 0.5]
totals = list(itertools.accumulate(probabilities))

def sample():
    n = random.uniform(0, totals[-1])
    for i, total in enumerate(totals):
        if n &lt;= total:
            return i
</snippet></ROW><ROW><id>19871640</id><snippet>accumulate</snippet></ROW><ROW><id>19871640</id><snippet>totals = [sum(probabilities[:i+1]) for i in range(len(probabilities))]
</snippet></ROW><ROW><id>19871640</id><snippet>reduce</snippet></ROW><ROW><id>19871640</id><snippet>random.uniform(0, totals[-1])</snippet></ROW><ROW><id>19871640</id><snippet>random.random()</snippet></ROW><ROW><id>19871640</id><snippet>&gt;&gt;&gt; samples = [sample() for _ in range(100000)]
&gt;&gt;&gt; samples.count(0)
29878
&gt;&gt;&gt; samples.count(1)
19908
&gt;&gt;&gt; samples.count(2)
50214
</snippet></ROW><ROW><id>19871753</id><snippet>np.float</snippet></ROW><ROW><id>19871753</id><snippet>np.complex</snippet></ROW><ROW><id>19871753</id><snippet>&gt;&gt;&gt; np.float is float
True
&gt;&gt;&gt; np.complex is complex
True
</snippet></ROW><ROW><id>19871753</id><snippet>numpy</snippet></ROW><ROW><id>19871753</id><snippet>&gt;&gt;&gt; np.float_([1,2])
array([ 1.,  2.])
&gt;&gt;&gt; np.double is np.float_
True
&gt;&gt;&gt; np.complex_([1,2])
array([ 1.+0.j,  2.+0.j])
&gt;&gt;&gt; np.float32([1,2])
array([ 1.,  2.], dtype=float32)
&gt;&gt;&gt; np.complex192([1,2])
array([ 1.0+0.0j,  2.0+0.0j], dtype=complex192)
</snippet></ROW><ROW><id>19871824</id><snippet>repr</snippet></ROW><ROW><id>19871824</id><snippet>.strip()</snippet></ROW><ROW><id>19871888</id><snippet>a = {'o1': [{'one': 25, 'two': 3}, {'one': 18, 'two': 2}, {'one': 10, 'two': 1}],
     'o2': [{'one': 25, 'two': 4}, {'one': 18, 'two': 2}],
     'o3': [{'one': 35, 'two': 5}, {'one': 15, 'two': 2}]}

b = dict(((k, [1.0*x['one']/x['two'] for x in v]) for k, v in a.items()))
</snippet></ROW><ROW><id>19872191</id><snippet>outputList</snippet></ROW><ROW><id>19872191</id><snippet>reduce</snippet></ROW><ROW><id>19872191</id><snippet>outputList</snippet></ROW><ROW><id>19872191</id><snippet>reduce</snippet></ROW><ROW><id>19872191</id><snippet>def reduce(inputList):
    outputList = []
    i = 0
</snippet></ROW><ROW><id>19872191</id><snippet>-------------
Level 0: [7, 3, 1, 2, 1, 4, 6]
Level 1: [1, 4, 3, 3, 5, 1]
Level 2: [5, 7, 6, 8, 6]
Level 3: [3, 4, 5, 5]
Level 4: [7, 9, 1]
Level 5: [7, 1]
Level 6: [8]
</snippet></ROW><ROW><id>19872196</id><snippet>KeepTogether</snippet></ROW><ROW><id>19872196</id><snippet>question = Paragraph('What color is the sky?', style)
answer1 = Paragraph('Red', style)
answer2 = Paragraph('Green', style)
answer3 = Paragraph('Blue', style)

Story.append(KeepTogether([question, answer1, answer2, answer3]))
</snippet></ROW><ROW><id>19872287</id><snippet>d = dict((L, i) for i, L in enumerate('abcd'))
print(d)
</snippet></ROW><ROW><id>19872287</id><snippet>{'d': 3, 'a': 0, 'c': 2, 'b': 1}
{'d': 3, 'b': 1, 'c': 2, 'a': 0}
{'d': 3, 'a': 0, 'b': 1, 'c': 2}
{'a': 0, 'b': 1, 'c': 2, 'd': 3}
</snippet></ROW><ROW><id>19872287</id><snippet>python -h</snippet></ROW><ROW><id>19872287</id><snippet>Other environment variables:
...
PYTHONHASHSEED: if this variable is set to 'random', a random value is used
   to seed the hashes of str, bytes and datetime objects.  It can also be
   set to an integer in the range [0,4294967295] to get hash values with a
   predictable seed.
</snippet></ROW><ROW><id>19872287</id><snippet>python -R ...</snippet></ROW><ROW><id>19872488</id><snippet>from random import shuffle

finput = 'path/input.txt'
foutput = 'path/output.txt'

with open(finput, 'r') as fin, open(foutput, 'w') as fout:
    sentences = fin.readlines()

    #add the order using enumeration
    sentences = list(enumerate(sentences))
    shuffle(sentences)
    for i, sentence in sentences:
        fout.write("{0}: {1}".format(i + 1, sentence))  
</snippet></ROW><ROW><id>19872496</id><snippet>Examples/traitsui-4.2.0</snippet></ROW><ROW><id>19872546</id><snippet>key</snippet></ROW><ROW><id>19872546</id><snippet>data = [[1,2,3], [14, 7], [5, 6, 1]]
print sorted(data, key=sum)
</snippet></ROW><ROW><id>19872546</id><snippet>[[1, 2, 3], [5, 6, 1], [14, 7]]
</snippet></ROW><ROW><id>19872546</id><snippet>data = [[1,2,3], [14, 7], [5, 6, 1]]
data.sort(key=sum)
print data
</snippet></ROW><ROW><id>19872546</id><snippet>[[1, 2, 3], [5, 6, 1], [14, 7]]
</snippet></ROW><ROW><id>19872546</id><snippet>reverse</snippet></ROW><ROW><id>19872546</id><snippet>data.sort(key=sum, reverse=True)
sorted(data, key=sum, reverse=True)
</snippet></ROW><ROW><id>19872546</id><snippet>vectors = [generate_vector() for i in range(0, 10)]
print sorted([findbest(vector) for vector in vectors], key=sum)
</snippet></ROW><ROW><id>19872640</id><snippet>/dev/disks/by-label/</snippet></ROW><ROW><id>19872717</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; OLD = np.array([1,4,7,2,5,8,3,6,9])
&gt;&gt;&gt; OLD.reshape((3, 3), order='F')
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
</snippet></ROW><ROW><id>19872879</id><snippet>\xe1</snippet></ROW><ROW><id>19872879</id><snippet>&gt;&gt;&gt; '\xe1'.decode('utf-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\encodings\utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeDecodeError: 'utf8' codec can't decode byte 0xe1 in position 0: unexpected end of data
&gt;&gt;&gt; '\xe1'.decode('utf-16')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python27\lib\encodings\utf_16.py", line 16, in decode
    return codecs.utf_16_decode(input, errors, True)
UnicodeDecodeError: 'utf16' codec can't decode byte 0xe1 in position 0: truncated data
</snippet></ROW><ROW><id>19872879</id><snippet>&gt;&gt;&gt; record = (5790, 'Vlv-Gate-Assy-Mdl-\xe1M1-2-\xe19/16-10K-BB Credit Memo            ',
...           60, True, '40141613')
&gt;&gt;&gt; json.dumps(record, encoding='latin1')
'[5790, "Vlv-Gate-Assy-Mdl-\\u00e1M1-2-\\u00e19/16-10K-BB Credit Memo            ", 60, true, "40141613"]'
</snippet></ROW><ROW><id>19872879</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>19872879</id><snippet>json.dumps</snippet></ROW><ROW><id>19872879</id><snippet>json.dumps</snippet></ROW><ROW><id>19872879</id><snippet>&gt;&gt;&gt; json.dumps(record, ensure_ascii=False)
'[5790, "Vlv-Gate-Assy-Mdl-\xe1M1-2-\xe19/16-10K-BB Credit Memo            ", 60, true, "40141613"]'
</snippet></ROW><ROW><id>19872915</id><snippet>&gt;&gt;&gt; speed = ['20','30','25','50','40']
&gt;&gt;&gt; time = ['10','11','12','13','14']
&gt;&gt;&gt; {time: speed}
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unhashable type: 'list'
</snippet></ROW><ROW><id>19872915</id><snippet>&gt;&gt;&gt; {tuple(time): speed}
{('10', '11', '12', '13', '14'): ['20', '30', '25', '50', '40']}
</snippet></ROW><ROW><id>19872915</id><snippet>zip</snippet></ROW><ROW><id>19872915</id><snippet>&gt;&gt;&gt; speed = ['20','30','25','50','40']
&gt;&gt;&gt; time = ['10','11','12','13','14']
&gt;&gt;&gt; for t, s in zip(time, speed):
...     print('{}:{}'.format(t, s))
...
10:20
11:30
12:25
13:50
14:40
</snippet></ROW><ROW><id>19873045</id><snippet>=</snippet></ROW><ROW><id>19873045</id><snippet>c.foo = 2
</snippet></ROW><ROW><id>19873045</id><snippet>c.foo(2)</snippet></ROW><ROW><id>19873045</id><snippet>In [7]: c = C(lambda x: x*x)

In [8]: c.foo(2)
Out[8]: 4
</snippet></ROW><ROW><id>19873045</id><snippet>c.foo(…)</snippet></ROW><ROW><id>19873045</id><snippet>c.foo</snippet></ROW><ROW><id>19873255</id><snippet>import itertools
with open('outfile.txt', 'w') as outfile:
    outfile.write('animals ' + ' '.join('years_' + y for y in years) + '\n')
    for data in itertools.izip(years, animals, *sales):
        outfile.write(' '.join(data)+'\n)
</snippet></ROW><ROW><id>19873255</id><snippet>with open('outfile.txt', 'w') as outfile:
    print('animals', *('years_' + y for y in years), file=outfile)
    for data in zip(animals, *sales):
        print(*data, file=outfile)
</snippet></ROW><ROW><id>19873494</id><snippet>x_coordinate</snippet></ROW><ROW><id>19873494</id><snippet>y_coordinate</snippet></ROW><ROW><id>19873494</id><snippet>def keyMoveSprite():
    global x_coordinate, y_coordinate
    # The rest of your code...
</snippet></ROW><ROW><id>19873514</id><snippet>favicon.ico</snippet></ROW><ROW><id>19873514</id><snippet>favicon.ico</snippet></ROW><ROW><id>19873899</id><snippet>def __init__(self, master=None):</snippet></ROW><ROW><id>19873899</id><snippet>master</snippet></ROW><ROW><id>19873899</id><snippet>Application(master=root)</snippet></ROW><ROW><id>19873899</id><snippet>A simple example:

def foo(a=1):
    print "a is", a

&gt;&gt;&gt; foo()
a is 1
&gt;&gt;&gt; foo(2)
a is 2
&gt;&gt;&gt; foo(a=2)
a is 2
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19874393</id><snippet>&gt;&gt;&gt;l = [a, b, c, d, e]
</snippet></ROW><ROW><id>19874393</id><snippet>&gt;&gt;&gt;if (len(set(l)) &lt; len(l)):
    ...
</snippet></ROW><ROW><id>19874414</id><snippet>&gt;&gt;&gt; di = {}
&gt;&gt;&gt; for i in a:
...   if di.get(i['name']):
...     di[i['name']].append((i['one'], i['two']))
...   else:
...     di[i['name']] = []
...     di[i['name']].append((i['one'], i['two']))
</snippet></ROW><ROW><id>19874759</id><snippet>def foo(seq):
  if seq == None or seq == []:
    return []
  outp = [seq[0]]
  for a in seq:
    if a &gt; outp[-1]:
      outp.append(a)
  return outp
</snippet></ROW><ROW><id>19874876</id><snippet>input_tuple = ("A", "b", "C", "d")
output_tuples = []
for subtuple_length in reversed(xrange(1, len(input_tuple))):
    for start_index in xrange(0, (len(input_tuple) + 1 - subtuple_length)):
        output_tuples.append(input_tuple[start_index:start_index + subtuple_length])
</snippet></ROW><ROW><id>19874876</id><snippet>print</snippet></ROW><ROW><id>19874876</id><snippet>yield</snippet></ROW><ROW><id>19874901</id><snippet>django-debug-toolbar</snippet></ROW><ROW><id>19874901</id><snippet>install_requires=[
    'django&gt;=1.4.2,&lt;1.7',
    'sqlparse',
],
</snippet></ROW><ROW><id>19874901</id><snippet>pip install django-debug-toolbar==0.9.4
</snippet></ROW><ROW><id>19875106</id><snippet>split</snippet></ROW><ROW><id>19875106</id><snippet>@register_filter
def split(value, sep=None):
    return value.split(sep)
</snippet></ROW><ROW><id>19875106</id><snippet>@register_filter
def split(value, sep=None):
    try:
        return value.split(sep)
    except:
        return value
</snippet></ROW><ROW><id>19875106</id><snippet>except</snippet></ROW><ROW><id>19875106</id><snippet>value</snippet></ROW><ROW><id>19875106</id><snippet>first</snippet></ROW><ROW><id>19875106</id><snippet>{% load forum_tags %}
&lt;div class="started"&gt;
    &lt;p&gt;{{ obj.pub_date|timesince:forum_time|split:","|first }}&lt;/p&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>19875260</id><snippet>dict</snippet></ROW><ROW><id>19875260</id><snippet>dict</snippet></ROW><ROW><id>19875260</id><snippet>shelve</snippet></ROW><ROW><id>19875260</id><snippet>bsddb</snippet></ROW><ROW><id>19875260</id><snippet>list</snippet></ROW><ROW><id>19875260</id><snippet>import shelve

COLUMNS = ('FirstName', 'LastName', 'Age', 'Sex')

the_db = shelve.open('test.db', writeback=True)
for col_name in COLUMNS:
    if col_name not in the_db:
        the_db[col_name] = []

records = [
    ('John', 'Deer', 20, 'M'),
    ('Ada', 'Lovelace', 23, 'F'),
]

for record in records:
    for col_name, value in zip(COLUMNS, record):
        the_db[col_name].append(value)

the_db.close()

the_db = shelve.open('test.db')

for record in zip(*(the_db[col_name] for col_name in COLUMNS)):
    print(record)

the_db.close()
</snippet></ROW><ROW><id>19875260</id><snippet>('John', 'Deer', 20, 'M')       
('Ada', 'Lovelace', 23, 'F')
</snippet></ROW><ROW><id>19875260</id><snippet>sqlite3</snippet></ROW><ROW><id>19875260</id><snippet>import sqlite3

conn = sqlite3.connect('test.sqlite')

cursor = conn.cursor()

cursor.execute('''
CREATE TABLE people (
    FirstName text,
    LastName text,
    Age int,
    Sex text
    )''')

cursor.execute('''
INSERT INTO people values ('John', 'Deer', 20, 'M')''')

cursor.execute('''
INSERT INTO people values ('Ada', 'Lovelace', 23, 'F')''')

conn.commit()

for record in cursor.execute('''SELECT * FROM people'''):
    print(record)
</snippet></ROW><ROW><id>19875260</id><snippet>(u'John', u'Deer', 20, u'M')
(u'Ada', u'Lovelace', 23, u'F')
</snippet></ROW><ROW><id>19875260</id><snippet>u'...'</snippet></ROW><ROW><id>19875260</id><snippet>w3schools</snippet></ROW><ROW><id>19875478</id><snippet>def PolyArea2D(pts):
    lines = np.hstack([pts,np.roll(pts,-1,axis=0)])
    area = 0.5*abs(sum(x1*y2-x2*y1 for x1,y1,x2,y2 in lines))
    return area
</snippet></ROW><ROW><id>19875478</id><snippet>import numpy as np

def PolyArea2D(pts):
    lines = np.hstack([pts,np.roll(pts,-1,axis=0)])
    area = 0.5*abs(sum(x1*y2-x2*y1 for x1,y1,x2,y2 in lines))
    return area

pts = [[0,0],[1,0],[1,1],[0,1]]
print PolyArea2D(pts)    

pts = [[0,0],[1,0],[0,1]]
print PolyArea2D(pts)    

pts = [[0,0],[1,0],[0.5,0.5]] 
print PolyArea2D(pts)    

&gt;&gt;&gt;
1.0
0.5
0.25
</snippet></ROW><ROW><id>19875634</id><snippet>&gt;&gt;&gt; l = ["ch", '', '', 'e', '', 'e', 'se']
&gt;&gt;&gt; [var for var in l if var]
Out[4]: ['ch', 'e', 'e', 'se']
</snippet></ROW><ROW><id>19875634</id><snippet>filter</snippet></ROW><ROW><id>19875634</id><snippet>None</snippet></ROW><ROW><id>19875634</id><snippet>bool</snippet></ROW><ROW><id>19875634</id><snippet>&gt;&gt;&gt; filter(None, l)
Out[5]: ['ch', 'e', 'e', 'se']
&gt;&gt;&gt; filter(bool, l)
Out[6]: ['ch', 'e', 'e', 'se']
</snippet></ROW><ROW><id>19875634</id><snippet>with open("text.txt", 'r') as file:
    for line in file:
        line = line.rstrip('\n' + '').split(':')
        # If line is just empty
        if line != ['']:
            print line
</snippet></ROW><ROW><id>19875646</id><snippet>fig = plt.figure()
ax = fig.add_axes()
ax.invert_xaxis()
</snippet></ROW><ROW><id>19875650</id><snippet>while True:
    s.flushInput()
    print s.readline()
    time.sleep(.5)
</snippet></ROW><ROW><id>19875816</id><snippet>ALLOWED_HOST</snippet></ROW><ROW><id>19875816</id><snippet>localhost</snippet></ROW><ROW><id>19875816</id><snippet>ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
</snippet></ROW><ROW><id>19875816</id><snippet>*</snippet></ROW><ROW><id>19875816</id><snippet>ALLOWED_HOSTS = ['*']
</snippet></ROW><ROW><id>19875816</id><snippet>'www.example.com'</snippet></ROW><ROW><id>19875816</id><snippet>Host</snippet></ROW><ROW><id>19875816</id><snippet>'.example.com'</snippet></ROW><ROW><id>19875816</id><snippet>example.com</snippet></ROW><ROW><id>19875816</id><snippet>www.example.com</snippet></ROW><ROW><id>19875816</id><snippet>example.com</snippet></ROW><ROW><id>19875816</id><snippet>'*'</snippet></ROW><ROW><id>19875816</id><snippet>Host</snippet></ROW><ROW><id>19875816</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>19875816</id><snippet>SuspeciousOperation</snippet></ROW><ROW><id>19876021</id><snippet>unicode</snippet></ROW><ROW><id>19876021</id><snippet>for key,value in os.environ.items():
    print key + ":"+ str(type(value.decode("utf-8")))
</snippet></ROW><ROW><id>19876234</id><snippet>from logging import getLogger
loggers = [app.logger, getLogger('sqlalchemy'),
           getLogger('otherlibrary')]
for logger in loggers:
    logger.addHandler(mail_handler)
    logger.addHandler(file_handler)
</snippet></ROW><ROW><id>19876275</id><snippet>codecs.open</snippet></ROW><ROW><id>19876275</id><snippet>open</snippet></ROW><ROW><id>19876275</id><snippet>readlines</snippet></ROW><ROW><id>19876275</id><snippet>codecs.open</snippet></ROW><ROW><id>19876275</id><snippet>writelines</snippet></ROW><ROW><id>19876275</id><snippet>open</snippet></ROW><ROW><id>19876275</id><snippet>output = open("wordlist_unique.txt","w")
output.writelines(uniquelines(filelines))
output.close()
</snippet></ROW><ROW><id>19876275</id><snippet>output = codecs.open("wordlist_unique.txt", "w", "cp1251")
output.writelines(uniquelines(filelines))
output.close()
</snippet></ROW><ROW><id>19876275</id><snippet>with</snippet></ROW><ROW><id>19876275</id><snippet>with codecs.open("wordlist_unique.txt", "w", "cp1251") as output:
    output.writelines(uniquelines(filelines))
</snippet></ROW><ROW><id>19876447</id><snippet>numpy</snippet></ROW><ROW><id>19876447</id><snippet>numpy</snippet></ROW><ROW><id>19876447</id><snippet>import numpy as np
from numpy import pi
x = np.linspace(0,1,10**4)
y = np.linspace(2,5,10**4)
ans = 2*pi**2 * np.outer(np.sin(pi*x), np.sin(pi*y))
</snippet></ROW><ROW><id>19876447</id><snippet>_n == 10000</snippet></ROW><ROW><id>19876667</id><snippet>path</snippet></ROW><ROW><id>19876667</id><snippet>string</snippet></ROW><ROW><id>19876667</id><snippet>api.add_resource(File, '/&lt;path:fname&gt;')
</snippet></ROW><ROW><id>19876736</id><snippet>comment</snippet></ROW><ROW><id>19876736</id><snippet>comment</snippet></ROW><ROW><id>19876774</id><snippet>calclist</snippet></ROW><ROW><id>19876774</id><snippet>calclist</snippet></ROW><ROW><id>19876774</id><snippet>...
for counter2, line in enumerate(rdr):
    extra_cols = []
    for calc in calclist:
        # process data to get extra 3 columns
        extra_cols.extend(data[name][:2]+ [quotient])
    wrt.writerow(line + extra_cols)
</snippet></ROW><ROW><id>19876811</id><snippet>crypt = ''.join(i for i in message if i.isalnum())
</snippet></ROW><ROW><id>19876811</id><snippet>dict.get</snippet></ROW><ROW><id>19876811</id><snippet>crypt = f.read()
encrypted_message = []
for letter in crypt:
    encrypted_message.append(monocrypt.get(letter.lower(), letter.lower()) )
</snippet></ROW><ROW><id>19876811</id><snippet>message = f.read()
crypt = ''.join(i for i in message if i.lower() in monocrypt)
encrypted_message = []
for letter in crypt:
    encrypted_message.append(monocrypt[letter.lower()])
</snippet></ROW><ROW><id>19876811</id><snippet>message = f.read().lower()
crypt = ''.join(i for i in message if i in monocrypt)
encrypted_message = [monocrypt[letter] for letter in crypt]
</snippet></ROW><ROW><id>19876878</id><snippet>curr</snippet></ROW><ROW><id>19876878</id><snippet>curr[2] += delta</snippet></ROW><ROW><id>19876878</id><snippet>curr</snippet></ROW><ROW><id>19876878</id><snippet>Output1</snippet></ROW><ROW><id>19876878</id><snippet>[curr[0], curr[1], curr[2]]</snippet></ROW><ROW><id>19876878</id><snippet>Output2</snippet></ROW><ROW><id>19876878</id><snippet>curr</snippet></ROW><ROW><id>19876878</id><snippet>result</snippet></ROW><ROW><id>19876878</id><snippet>result</snippet></ROW><ROW><id>19876878</id><snippet>curr</snippet></ROW><ROW><id>19876878</id><snippet>curr = [0,0,0]
result = [curr for i in range(3)]
print(result)
# [[0, 0, 0], [0, 0, 0], [0, 0, 0]]

curr[2] = 100
print(result)
# [[0, 0, 100], [0, 0, 100], [0, 0, 100]]
</snippet></ROW><ROW><id>19876878</id><snippet>numgen1</snippet></ROW><ROW><id>19876878</id><snippet>list(curr)</snippet></ROW><ROW><id>19876878</id><snippet>list(curr)</snippet></ROW><ROW><id>19876878</id><snippet>curr</snippet></ROW><ROW><id>19876878</id><snippet>def numgen1(start, end, delta):
    curr=start 
    while curr[1] &lt; end[1] or curr[2]&lt;end[2]:
        yield list(curr)
        curr[2] += delta

print 'Output1: ', [ i for i in numgen1([1,1,1],[1,1,5],1)]
</snippet></ROW><ROW><id>19876878</id><snippet>Output1:  [[1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4]]
</snippet></ROW><ROW><id>19876878</id><snippet>numgen3</snippet></ROW><ROW><id>19876878</id><snippet>def numgen3(start, end, delta):
    curr=start 
    while curr&lt;end:
        yield curr
        curr += delta

print list(numgen3(1,10,1))
</snippet></ROW><ROW><id>19876878</id><snippet>ints</snippet></ROW><ROW><id>19876878</id><snippet>curr</snippet></ROW><ROW><id>19876878</id><snippet>curr[2] += delta</snippet></ROW><ROW><id>19876878</id><snippet>yield curr</snippet></ROW><ROW><id>19876878</id><snippet>numgen3</snippet></ROW><ROW><id>19876878</id><snippet>curr</snippet></ROW><ROW><id>19876878</id><snippet>int</snippet></ROW><ROW><id>19876878</id><snippet>curr += delta</snippet></ROW><ROW><id>19876878</id><snippet>curr</snippet></ROW><ROW><id>19876878</id><snippet>int</snippet></ROW><ROW><id>19876878</id><snippet>yield curr</snippet></ROW><ROW><id>19876878</id><snippet>id(obj)</snippet></ROW><ROW><id>19876878</id><snippet>obj</snippet></ROW><ROW><id>19876878</id><snippet>curr[2]</snippet></ROW><ROW><id>19876878</id><snippet>id</snippet></ROW><ROW><id>19876878</id><snippet>curr</snippet></ROW><ROW><id>19876878</id><snippet>In [162]: curr = [0,0,0]

In [163]: id(curr)
Out[163]: 196192940

In [164]: curr[2] += 1

In [165]: curr
Out[165]: [0, 0, 1]

In [166]: id(curr)
Out[166]: 196192940
</snippet></ROW><ROW><id>19876878</id><snippet>int</snippet></ROW><ROW><id>19876878</id><snippet>In [191]: curr = 1

In [192]: id(curr)
Out[192]: 150597808

In [193]: curr += 1

In [194]: id(curr)
Out[194]: 150597796
</snippet></ROW><ROW><id>19876878</id><snippet>curr</snippet></ROW><ROW><id>19876878</id><snippet>curr</snippet></ROW><ROW><id>19876920</id><snippet>(-0.405442, -6.94697)</snippet></ROW><ROW><id>19876920</id><snippet>(-0.40544215, -6.94697)</snippet></ROW><ROW><id>19876920</id><snippet>(-0.405442, -6.94697) in [(round(i[0], 6), round(i[1], 6)) for i in mylist]
</snippet></ROW><ROW><id>19876920</id><snippet>mynewlist = [(round(i[0], 6), round(i[1], 6)) for i in mylist]
(-0.405442, -6.94697) in mynewlist
</snippet></ROW><ROW><id>19877015</id><snippet>import os

root_folder = r'C:\Users\Steinar\Google Drive\Kode\Ymse\test\test'
content = {}

for root, dirs, files in os.walk(root_folder):
    for subdir in dirs:
        content[os.path.join(root, subdir)] = []
    content[root] = files

# Print out the content dict    
for folder, filenames in content.items():
    print 'Folder: {}'.format(folder)
    print 'Filenames:'
    for filename in filenames:
        print '-&gt; {}'.format(filename)
</snippet></ROW><ROW><id>19877015</id><snippet>Folder: C:\Users\Steinar\Google Drive\Kode\Ymse\test\test\test2
Filenames:
-&gt; test2.txt
Folder: C:\Users\Steinar\Google Drive\Kode\Ymse\test\test
Filenames:
-&gt; test.txt
Folder: C:\Users\Steinar\Google Drive\Kode\Ymse\test\test\test2\test3\test4
Filenames:
Folder: C:\Users\Steinar\Google Drive\Kode\Ymse\test\test\test2\test3
Filenames:
-&gt; test3.txt
</snippet></ROW><ROW><id>19877015</id><snippet>content.keys()</snippet></ROW><ROW><id>19877023</id><snippet>state</snippet></ROW><ROW><id>19877023</id><snippet>'disabled'</snippet></ROW><ROW><id>19877023</id><snippet>from tkinter import *

root = Tk()
entry = Entry(root, state='disabled')
entry.pack()
root.mainloop()
</snippet></ROW><ROW><id>19877023</id><snippet>from tkinter import *

root = Tk()
entry = Entry(root)
entry.config(state='disabled') # OR entry['state'] = 'disabled'
entry.pack()
root.mainloop()
</snippet></ROW><ROW><id>19877023</id><snippet>Tkinter.Entry.config</snippet></ROW><ROW><id>19877023</id><snippet>com</snippet></ROW><ROW><id>19877023</id><snippet>def com():
    entry.config(state='disabled')
</snippet></ROW><ROW><id>19877096</id><snippet>dict.keys</snippet></ROW><ROW><id>19877096</id><snippet>&gt;&gt;&gt; a = {1:1, 2:2}
&gt;&gt;&gt; a.keys()
dict_keys([1, 2])
&gt;&gt;&gt; type(a.keys())
&lt;class 'dict_keys'&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19877096</id><snippet>list</snippet></ROW><ROW><id>19877096</id><snippet>X6_IGNORED = list(X2_X5_MAPPINGS.keys()) + ['BN', 'PDF', 'B']
X9_REMOVED = list(X2_X5_MAPPINGS.keys()) + ['BN', 'PDF']
</snippet></ROW><ROW><id>19877096</id><snippet>.keys</snippet></ROW><ROW><id>19877096</id><snippet>X6_IGNORED = list(X2_X5_MAPPINGS) + ['BN', 'PDF', 'B']
X9_REMOVED = list(X2_X5_MAPPINGS) + ['BN', 'PDF']
</snippet></ROW><ROW><id>19877178</id><snippet>None</snippet></ROW><ROW><id>19877178</id><snippet>proyecto.nombre</snippet></ROW><ROW><id>19877309</id><snippet>unicode</snippet></ROW><ROW><id>19877309</id><snippet>str</snippet></ROW><ROW><id>19877309</id><snippet>str</snippet></ROW><ROW><id>19877309</id><snippet>bytes</snippet></ROW><ROW><id>19877309</id><snippet>if isinstance(unicode_or_str, str):
    text = unicode_or_str
    decoded = False
else:
    text = unicode_or_str.decode(encoding)
    decoded = True
</snippet></ROW><ROW><id>19877309</id><snippet>2to3</snippet></ROW><ROW><id>19877338</id><snippet>regex</snippet></ROW><ROW><id>19877338</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = "askdfghj... Hello world my name is Alex and I am 18 years all ...askdfgj."
&gt;&gt;&gt; re.search(r'my.*Alex', s).group()
'my name is Alex'
</snippet></ROW><ROW><id>19877338</id><snippet>Alex</snippet></ROW><ROW><id>19877338</id><snippet>my</snippet></ROW><ROW><id>19877338</id><snippet>.*?</snippet></ROW><ROW><id>19877338</id><snippet>?</snippet></ROW><ROW><id>19877338</id><snippet>&gt;&gt;&gt; s = "my name is Alex and you're Alex too."
&gt;&gt;&gt; re.search(r'my.*?Alex', s).group()
'my name is Alex'
</snippet></ROW><ROW><id>19877338</id><snippet>?</snippet></ROW><ROW><id>19877338</id><snippet>&gt;&gt;&gt; re.search(r'my.*Alex', s).group()
"my name is Alex and you're Alex"
</snippet></ROW><ROW><id>19877338</id><snippet>with open('infile') as f1, open('outfile', 'w') as f2:
    data = f1.read()
    match = re.search(r'my.*Alex', data, re.DOTALL)
    if match:
        f2.write(match.group())
</snippet></ROW><ROW><id>19877351</id><snippet>e-mail</snippet></ROW><ROW><id>19877351</id><snippet>-</snippet></ROW><ROW><id>19877351</id><snippet>"e-mail" TEXT
[e-mail] TEXT
`e-mail` TEXT
email TEXT
</snippet></ROW><ROW><id>19877437</id><snippet>global ranks</snippet></ROW><ROW><id>19877437</id><snippet>ranks</snippet></ROW><ROW><id>19877437</id><snippet>ranks</snippet></ROW><ROW><id>19877437</id><snippet>ranks</snippet></ROW><ROW><id>19877437</id><snippet>nonlocal</snippet></ROW><ROW><id>19877437</id><snippet>def reportRealDiagnostics():
        ranks = 0
        class Rank: 
            def __init__(self):
                nonlocal ranks
                ranks += 1
        rank = Rank()

reportRealDiagnostics()
</snippet></ROW><ROW><id>19877437</id><snippet>def reportRealDiagnostics():
        class Rank: 
            def __init__(self):
                reportRealDiagnostics.ranks += 1
        rank = Rank()
reportRealDiagnostics.ranks = 0
reportRealDiagnostics()
</snippet></ROW><ROW><id>19877437</id><snippet>nonlocal</snippet></ROW><ROW><id>19877478</id><snippet>virtualenv</snippet></ROW><ROW><id>19877478</id><snippet>setuptools</snippet></ROW><ROW><id>19877478</id><snippet>python setup.py develop</snippet></ROW><ROW><id>19877478</id><snippet>virtualenv</snippet></ROW><ROW><id>19877478</id><snippet>site-packages</snippet></ROW><ROW><id>19877478</id><snippet>site-packages</snippet></ROW><ROW><id>19877478</id><snippet>site-packages</snippet></ROW><ROW><id>19877478</id><snippet>site-packages</snippet></ROW><ROW><id>19877478</id><snippet>site-packages</snippet></ROW><ROW><id>19877478</id><snippet>site-packages</snippet></ROW><ROW><id>19877478</id><snippet>virtualenv</snippet></ROW><ROW><id>19877478</id><snippet>easy_install</snippet></ROW><ROW><id>19877478</id><snippet>pip</snippet></ROW><ROW><id>19877478</id><snippet>sudo pip install virtualenv
</snippet></ROW><ROW><id>19877478</id><snippet>cd ~/pyprojects
virtualenv --no-site-packages foobar-env
</snippet></ROW><ROW><id>19877478</id><snippet>~/pyprojects/foobar-env</snippet></ROW><ROW><id>19877478</id><snippet>cd</snippet></ROW><ROW><id>19877478</id><snippet>source</snippet></ROW><ROW><id>19877478</id><snippet>bin/activate script</snippet></ROW><ROW><id>19877478</id><snippet>~/pyprojects $ cd foobar-env/
~/pyprojects/foobar-env $ . bin/activate
(foobar-env) ~/pyprojects/foobar-env $
</snippet></ROW><ROW><id>19877478</id><snippet>.</snippet></ROW><ROW><id>19877478</id><snippet>source</snippet></ROW><ROW><id>19877478</id><snippet>(foobar-env)</snippet></ROW><ROW><id>19877478</id><snippet>python</snippet></ROW><ROW><id>19877478</id><snippet>~/pyprojects/foobar-env/bin/python</snippet></ROW><ROW><id>19877478</id><snippet>site-packages</snippet></ROW><ROW><id>19877478</id><snippet>setuptools</snippet></ROW><ROW><id>19877478</id><snippet>setup.py</snippet></ROW><ROW><id>19877478</id><snippet>PasteScript</snippet></ROW><ROW><id>19877478</id><snippet>pip install PasteScript
</snippet></ROW><ROW><id>19877478</id><snippet>mkdir src
cd src/
</snippet></ROW><ROW><id>19877478</id><snippet>paster create -t basic_package foobar
</snippet></ROW><ROW><id>19877478</id><snippet>foobar</snippet></ROW><ROW><id>19877478</id><snippet>easy_install</snippet></ROW><ROW><id>19877478</id><snippet>pip install foobar</snippet></ROW><ROW><id>19877478</id><snippet>setup.py</snippet></ROW><ROW><id>19877478</id><snippet>__init__.py</snippet></ROW><ROW><id>19877478</id><snippet>import foobar</snippet></ROW><ROW><id>19877478</id><snippet>from foobar import baz</snippet></ROW><ROW><id>19877478</id><snippet>cd foobar/foobar/
</snippet></ROW><ROW><id>19877478</id><snippet>vim models.py
</snippet></ROW><ROW><id>19877478</id><snippet>models.py</snippet></ROW><ROW><id>19877478</id><snippet>class Page(object):
    """A dumb object wrapping a webpage.
    """

    def __init__(self, content, url):
        self.content = content
        self.original_url = url

    def __repr__(self):
        return "&lt;Page retrieved from '%s' (%s bytes)&gt;" % (self.original_url, len(self.content))
</snippet></ROW><ROW><id>19877478</id><snippet>client.py</snippet></ROW><ROW><id>19877478</id><snippet>models.py</snippet></ROW><ROW><id>19877478</id><snippet>client.py</snippet></ROW><ROW><id>19877478</id><snippet>import requests
from foobar.models import Page

url = 'http://www.stackoverflow.com'

response = requests.get(url)
page = Page(response.content, url)

print page
</snippet></ROW><ROW><id>19877478</id><snippet>requests</snippet></ROW><ROW><id>19877478</id><snippet>setup.py</snippet></ROW><ROW><id>19877478</id><snippet>  install_requires=[
      # -*- Extra requirements: -*-
      'setuptools',
      'requests',
  ],
</snippet></ROW><ROW><id>19877478</id><snippet>src/foobar/</snippet></ROW><ROW><id>19877478</id><snippet>cd src/foobar/
git init
vim .gitignore
</snippet></ROW><ROW><id>19877478</id><snippet>.gitignore</snippet></ROW><ROW><id>19877478</id><snippet>*.egg-info
*.py[co]
</snippet></ROW><ROW><id>19877478</id><snippet>git add .
git commit -m 'Create initial package structure.
</snippet></ROW><ROW><id>19877478</id><snippet>python setup.py develop
</snippet></ROW><ROW><id>19877478</id><snippet>requests</snippet></ROW><ROW><id>19877478</id><snippet>src/foobar</snippet></ROW><ROW><id>19877478</id><snippet>from foobar.models import Page</snippet></ROW><ROW><id>19877478</id><snippet>python client.py</snippet></ROW><ROW><id>19877478</id><snippet>python src/foobar/foobar/client.py</snippet></ROW><ROW><id>19877478</id><snippet>bin/something</snippet></ROW><ROW><id>19877478</id><snippet>setup.py</snippet></ROW><ROW><id>19877478</id><snippet>  entry_points='''
  # -*- Entry points: -*-    
  [console_scripts]
  run-fooobar = foobar.main:run_foobar
  ''',
</snippet></ROW><ROW><id>19877478</id><snippet>client.py</snippet></ROW><ROW><id>19877478</id><snippet>def run_client():
    # ...
</snippet></ROW><ROW><id>19877478</id><snippet>main.py</snippet></ROW><ROW><id>19877478</id><snippet>from foobar.client import run_client

def run_foobar():
    run_client()
</snippet></ROW><ROW><id>19877478</id><snippet>python setup.py develop
</snippet></ROW><ROW><id>19877478</id><snippet>bin/run-foo</snippet></ROW><ROW><id>19877478</id><snippet>/usr/local/bin/run-foo</snippet></ROW><ROW><id>19877478</id><snippet>$PATH</snippet></ROW><ROW><id>19877478</id><snippet>zest.releaser</snippet></ROW><ROW><id>19877526</id><snippet>#!/bin/sh
while read p; do
  pip install $p
done &lt; requirements.txt
</snippet></ROW><ROW><id>19877526</id><snippet>pip install -r requirements.txt
</snippet></ROW><ROW><id>19877526</id><snippet>requirements.txt</snippet></ROW><ROW><id>19877526</id><snippet>django
numpy
lxml
#.... so on
</snippet></ROW><ROW><id>19877526</id><snippet>./script.sh</snippet></ROW><ROW><id>19877526</id><snippet>setup</snippet></ROW><ROW><id>19877526</id><snippet>from setuptools import setup

setup(
    # ...
    install_requires=['module']
)
</snippet></ROW><ROW><id>19877557</id><snippet>pts_alloc</snippet></ROW><ROW><id>19877557</id><snippet>num_weighted[6:] = [pts_alloc for i in range(len(num_weighted) - 6)]
</snippet></ROW><ROW><id>19877601</id><snippet>wx.CallAfter</snippet></ROW><ROW><id>19877601</id><snippet>wx.CallLater</snippet></ROW><ROW><id>19877601</id><snippet>import random
import wx

class Frame(wx.Frame):
    def __init__(self):
        super(Frame, self).__init__(None)
        self.SetTitle('Title')
        panel = wx.Panel(self)
        style = wx.ALIGN_CENTRE | wx.ST_NO_AUTORESIZE
        self.text = wx.StaticText(panel, style=style)
        sizer = wx.BoxSizer(wx.VERTICAL)
        sizer.AddStretchSpacer(1)
        sizer.Add(self.text, 0, wx.EXPAND)
        sizer.AddStretchSpacer(1)
        panel.SetSizer(sizer)
        self.on_timer()
    def on_timer(self):
        self.text.SetLabel(str(random.randint(0, 100)))
        wx.CallLater(1000, self.on_timer)

if __name__ == '__main__':
    app = wx.App()
    frame = Frame()
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>19877635</id><snippet>&gt;&gt;&gt; a = np.array([3, 4, 5, 4, 3, 2, 3, 3])
&gt;&gt;&gt; len_a = len(a)
&gt;&gt;&gt; win = 3
&gt;&gt;&gt; win_a = as_strided(a, shape=(len_a-win+1, win), strides=a.strides*2)
&gt;&gt;&gt; win_a
array([[3, 4, 5],
       [4, 5, 4],
       [5, 4, 3],
       [4, 3, 2],
       [3, 2, 3],
       [2, 3, 3]])
&gt;&gt;&gt; min_ = np.min(win_a, axis=-1)
&gt;&gt;&gt; max_ = np.max(win_a, axis=-1)
</snippet></ROW><ROW><id>19877635</id><snippet>&gt;&gt;&gt; out = np.empty((len_a-win+1,), dtype=a.dtype)
&gt;&gt;&gt; out[0] = a[0]
</snippet></ROW><ROW><id>19877635</id><snippet>np.clip</snippet></ROW><ROW><id>19877635</id><snippet>&gt;&gt;&gt; np.clip(out[:-1], min_[1:], max_[1:], out=out[1:])
array([4, 3, 3, 3, 3])
&gt;&gt;&gt; out
array([3, 4, 3, 3, 3, 3])
</snippet></ROW><ROW><id>19877635</id><snippet>np.clip</snippet></ROW><ROW><id>19877635</id><snippet>np.minimum</snippet></ROW><ROW><id>19877635</id><snippet>np.maximum</snippet></ROW><ROW><id>19877635</id><snippet>&gt;&gt;&gt; np.minimum(out[:-1], max_[1:], out=out[1:])
array([3, 3, 3, 3, 3])
&gt;&gt;&gt; np.maximum(out[1:], min_[1:], out=out[1:])
array([4, 3, 3, 3, 3])
&gt;&gt;&gt; out
array([3, 4, 3, 3, 3, 3])
</snippet></ROW><ROW><id>19877635</id><snippet>&gt;&gt;&gt; np.maximum(out[:-1], min_[1:], out=out[1:])
array([4, 4, 4, 4, 4])
&gt;&gt;&gt; np.minimum(out[1:], max_[1:], out=out[1:])
array([4, 4, 4, 3, 3])
&gt;&gt;&gt; out
array([3, 4, 4, 4, 3, 3])
</snippet></ROW><ROW><id>19877754</id><snippet>class Tournament(models.Model):
    title = models.CharField(max_length = 100, verbose_name = u"Tournament's title")
    players = models.ManyToManyField(Player,verbose_name = u"Tournament's players")

    def __unicode__(self):
        return self.title

    def save(self, **kwargs):
        Tournament(title = self.title)
        all_players = Player.objects.all()
        for member in all_players:
            member_of_tournament = member.tournament_set.filter(title = self.title)
            for j in member_of_tournament:
                print member.tournament_set.filter(title = self.title)
                self.players.add(member)

        super(Tournament, self).save(**kwargs)
</snippet></ROW><ROW><id>19877754</id><snippet>def save(self, **kwargs):
    Tournament(title = self.title)
</snippet></ROW><ROW><id>19877754</id><snippet>    all_players = Player.objects.all()
    for member in all_players:
        member_of_tournament = member.tournament_set.filter(title = self.title)
</snippet></ROW><ROW><id>19877754</id><snippet>member_of_tournament = member.tournament_set.filter(title = self.title)</snippet></ROW><ROW><id>19877754</id><snippet>members_of_tournament</snippet></ROW><ROW><id>19877754</id><snippet>tournament = Tournament(title=title)
tournament.save()
players_i_care_about = [players, go, here]

tournament.players = players_i_care_about #(removes all players and saves new players)
</snippet></ROW><ROW><id>19877754</id><snippet>for player in players_i_care_about:
    tournament.players.add(player) #(only adds these players, doesn't remove any players)
</snippet></ROW><ROW><id>19877825</id><snippet>None</snippet></ROW><ROW><id>19877825</id><snippet>StaticBoundList</snippet></ROW><ROW><id>19877825</id><snippet>Tuple</snippet></ROW><ROW><id>19877825</id><snippet>def onopen(window):

    if (len(window) &gt; 0):
        Ti.App.stdout("------------------  Opening Dialog")
        Ti.App.stdout(window[0])
    else:
        Ti.App.stdout("------------------  Nothing Selected")


def burndir():
    try:
        Ti.UI.getCurrentWindow().openFolderChooserDialog(onopen)

    except:
        Ti.App.stderr("------ There was an error: ")

        Ti.App.stderr(sys.exc_info()[0])
        Ti.App.stderr(sys.exc_info()[1])
        Ti.App.stderr(sys.exc_info()[2])
</snippet></ROW><ROW><id>19877836</id><snippet>&gt;&gt;&gt; import datetime, calendar
&gt;&gt;&gt; t=datetime.datetime(2013,11,5,11,30,00)
&gt;&gt;&gt; calendar.timegm(t.utctimetuple())*1000.0 + t.microsecond * 0.0011383651000000.0
1383651000000.0
</snippet></ROW><ROW><id>19877899</id><snippet>L = ['abc','def','ghi']

with open('outfile.txt', 'w') as outfile:
    for e in L:
        print (e, file=outfile)
</snippet></ROW><ROW><id>19877899</id><snippet>w</snippet></ROW><ROW><id>19877899</id><snippet>open()</snippet></ROW><ROW><id>19877899</id><snippet>'w'</snippet></ROW><ROW><id>19877899</id><snippet>'a'</snippet></ROW><ROW><id>19877899</id><snippet>L = ['abc','def','ghi']

for e in L:
    with open('outfile.txt', 'a') as outfile:
        print (e, file=outfile)
</snippet></ROW><ROW><id>19878020</id><snippet>.bashrc</snippet></ROW><ROW><id>19878020</id><snippet>export PATH=/path/to/google_app_engine:$PATH
</snippet></ROW><ROW><id>19878033</id><snippet>[i]</snippet></ROW><ROW><id>19878033</id><snippet># Don't name a variable 'list' -- it overshadows the built-in
lst = open(sys.argv[1]).readlines()
i=0
print lst[i]
for x in lst:
    print x
</snippet></ROW><ROW><id>19878033</id><snippet>i=0</snippet></ROW><ROW><id>19878033</id><snippet>list</snippet></ROW><ROW><id>19878033</id><snippet>list[i]</snippet></ROW><ROW><id>19878033</id><snippet>list</snippet></ROW><ROW><id>19878033</id><snippet>with</snippet></ROW><ROW><id>19878033</id><snippet>with open(sys.argv[1]) as myfile:
    lst = myfile.readlines()
    i=0
    print lst[i]
    for x in lst:
        print x
</snippet></ROW><ROW><id>19878033</id><snippet>with</snippet></ROW><ROW><id>19878202</id><snippet>crypt</snippet></ROW><ROW><id>19878202</id><snippet>crypt</snippet></ROW><ROW><id>19878362</id><snippet>for</snippet></ROW><ROW><id>19878362</id><snippet>for</snippet></ROW><ROW><id>19879502</id><snippet>sample_average = mc.Lambda('sample_average', lambda x=list_of_samples, n=samples_to_average: np.mean(x[:n]))
</snippet></ROW><ROW><id>19879502</id><snippet>samples_to_average = np.arange(5, 25, 5)

sample_average = mc.Lambda('sample_average', lambda x=list_of_samples, n=samples_to_average: [np.mean(x[:t]) for t in n])
</snippet></ROW><ROW><id>19879502</id><snippet>def getConfidenceInterval():
    responseModel = mc.Model([samples_to_average, list_of_samples, sample_average])
    mapRes = mc.MAP(responseModel)
    mapRes.fit()
    mcmc = mc.MCMC(responseModel)
    mcmc.sample( 10000, 5000)
    average = np.vstack((t for t in mcmc.trace('sample_average')))
    upper = np.percentile(average, 95, axis = 0)
    lower = np.percentile(average, 5, axis = 0)
    return (lower, upper)
</snippet></ROW><ROW><id>19879605</id><snippet>res1, res2 = func()
list1.append(res1)
list2.append(res2)
</snippet></ROW><ROW><id>19879605</id><snippet>list.extend()</snippet></ROW><ROW><id>19879605</id><snippet>list1</snippet></ROW><ROW><id>19879605</id><snippet>list2</snippet></ROW><ROW><id>19879605</id><snippet>list1[len(list1):], list2[len(list2):] = func()
</snippet></ROW><ROW><id>19879605</id><snippet>res1, res2 = func()
list1.extend(res1)
list2.extend(res2)
</snippet></ROW><ROW><id>19879770</id><snippet>O(M + N)</snippet></ROW><ROW><id>19879770</id><snippet>O(N)</snippet></ROW><ROW><id>19879770</id><snippet>A</snippet></ROW><ROW><id>19879770</id><snippet>N</snippet></ROW><ROW><id>19879770</id><snippet>M</snippet></ROW><ROW><id>19880063</id><snippet>query = """INSERT INTO b (source_id,text,author,score,type,location) VALUES (%s,%s,%s,%s,%s,%s)"""
print query
cur.execute(query, (1,Tweet.text,User.screen_name,score,search_type,User.location))
</snippet></ROW><ROW><id>19880063</id><snippet>VALUES(%s)</snippet></ROW><ROW><id>19880063</id><snippet>'</snippet></ROW><ROW><id>19880063</id><snippet>** VALUES('%s', '%s') % (1, 2)</snippet></ROW><ROW><id>19880063</id><snippet>query = """INSERT INTO b (source_id,text,author,score,type,location) VALUES ('%s','%s','%s','%s','%s','%s')""" % (1,Tweet.text,User.screen_name,score,search_type,User.location)
print query
cur.execute(query)
</snippet></ROW><ROW><id>19880092</id><snippet>page = urllib2.urlopen('http://huffingtonpost.com').read()
</snippet></ROW><ROW><id>19880174</id><snippet>import numpy as np
def pad_list(lst):
    inner_max_len = max(map(len, lst))
    map(lambda x: x.extend([0]*(inner_max_len-len(x))), lst)
    return np.array(lst)

def apply_to_zeros(lst, dtype=np.int64):
    inner_max_len = max(map(len, lst))
    result = np.zeros([len(lst), inner_max_len], dtype)
    for i, row in enumerate(lst):
        for j, val in enumerate(row):
            result[i][j] = val
    return result
</snippet></ROW><ROW><id>19880174</id><snippet>&gt;&gt;&gt; pad_list([[ 1, 2, 3], [2], [2, 4]])
array([[1, 2, 3],
       [2, 0, 0],
       [2, 4, 0]])

&gt;&gt;&gt; apply_to_zeros([[ 1, 2, 3], [2], [2, 4]])
array([[1, 2, 3],
       [2, 0, 0],
       [2, 4, 0]])
</snippet></ROW><ROW><id>19880174</id><snippet>&gt;&gt;&gt; timeit.timeit('from __main__ import pad_list as f; f([[ 1, 2, 3], [2], [2, 4]])', number = 10000)
0.3937079906463623
&gt;&gt;&gt; timeit.timeit('from __main__ import apply_to_zeros as f; f([[ 1, 2, 3], [2], [2, 4]])', number = 10000)
0.1344289779663086
</snippet></ROW><ROW><id>19880306</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; r = re.compile(r'(?P&lt;name&gt;[^.]+)\.S(?P&lt;S&gt;\d+)E(?P&lt;E&gt;\d+)\.(?P&lt;title&gt;[^.]+)\.(?P&lt;ext&gt;.*)')
&gt;&gt;&gt; r.search('Dexter.S01E01.The Monster.mp4').groupdict()
{'ext': 'mp4', 'title': 'The Monster', 'E': '01', 'S': '01', 'name': 'Dexter'}
&gt;&gt;&gt; r.search('The Mentalist.S03E05.Red Lay.mp4').groupdict()
{'ext': 'mp4', 'title': 'Red Lay', 'E': '05', 'S': '03', 'name': 'The Mentalist'}
</snippet></ROW><ROW><id>19881647</id><snippet>LineCollection</snippet></ROW><ROW><id>19881647</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib.collections import LineCollection
from matplotlib.lines import Line2D

# The line format you curently have:
lines = [[(0, 1, 2, 3, 4), (4, 5, 6, 7, 8)],
         [(0, 1, 2, 3, 4), (0, 1, 2, 3, 4)],
         [(0, 1, 2, 3, 4), (8, 7, 6, 5, 4)],
         [(4, 5, 6, 7, 8), (0, 1, 2, 3, 4)]]

# Reformat it to what `LineCollection` expects:
lines = [zip(x, y) for x, y in lines]

z = np.array([0.1, 9.4, 3.8, 2.0])

fig, ax = plt.subplots()
lines = LineCollection(lines, array=z, cmap=plt.cm.rainbow, linewidths=5)
ax.add_collection(lines)
fig.colorbar(lines)

# Manually adding artists doesn't rescale the plot, so we need to autoscale
ax.autoscale()

def make_proxy(zvalue, scalar_mappable, **kwargs):
    color = scalar_mappable.cmap(scalar_mappable.norm(zvalue))
    return Line2D([0, 1], [0, 1], color=color, **kwargs)
proxies = [make_proxy(item, lines, linewidth=5) for item in z]
ax.legend(proxies, ['Line 1', 'Line 2', 'Line 3', 'Line 4'])

plt.show()
</snippet></ROW><ROW><id>19881724</id><snippet>tuple_list = [('a', 1), ('b', 3), ('c', 2)]
def flatten_tuple(tuple_list):
    #Method 1
    #import itertools
    #return [item for item in itertools.chain.from_iterable(tuple_list)]

    #Method 2
    return [item for tempList in tuple_list for item in tempList]

print flatten_tuple(tuple_list)
</snippet></ROW><ROW><id>19881724</id><snippet>tuple_list = [('a', 1), ('b', 3), ('c', 2)]
def flatten_tuple(tuple_list):
    return list(reduce(lambda x,y: x + y, tuple_list))

print flatten_tuple(tuple_list)
</snippet></ROW><ROW><id>19881726</id><snippet>on_window_command</snippet></ROW><ROW><id>19881726</id><snippet>Settings#add_on_change</snippet></ROW><ROW><id>19881726</id><snippet>on_load</snippet></ROW><ROW><id>19881726</id><snippet>on_new</snippet></ROW><ROW><id>19881726</id><snippet>import sublime_plugin

class TestCommand(sublime_plugin.TextCommand):
    def run(self, edit):
        settings = self.view.settings()
        settings.add_on_change("color_scheme", self.callback)

    def callback(self):
        print(self.view.settings().get("color_scheme"))
</snippet></ROW><ROW><id>19881851</id><snippet>&gt;&gt;&gt; test.encode('unicode-escape').replace(r'\xb0', r'\260')
'\\260C'
</snippet></ROW><ROW><id>19881851</id><snippet>&gt;&gt;&gt; ''.join('\\%o' % ord(c) for c in test)
'\\260\\103'
</snippet></ROW><ROW><id>19881851</id><snippet>&gt;&gt;&gt; table = {i: unicode(chr(i)) if 32 &lt;= i &lt; 128 else u'\\%o' % i for i in range(256)}
&gt;&gt;&gt; u'\xb0ABD\260'.translate(table)
u'\\260ABD\\260'
</snippet></ROW><ROW><id>19882047</id><snippet>pygame.time.Clock</snippet></ROW><ROW><id>19882047</id><snippet>Clock.tick()</snippet></ROW><ROW><id>19882047</id><snippet>Clock.tick()</snippet></ROW><ROW><id>19882047</id><snippet>if rect.colliderect(rect2) == True and self.time_passed/1000 &gt; 5:
</snippet></ROW><ROW><id>19882055</id><snippet>probability=True</snippet></ROW><ROW><id>19882055</id><snippet>from sklearn.svm import SVC
clf=SVC(probability=True)
clf.fit(X,Y)
print clf.predict_proba(W) #No error
</snippet></ROW><ROW><id>19882404</id><snippet>class BaseCommentAbstractModel(models.Model):
"""
An abstract base class that any custom comment models probably should
subclass.
"""

# Content-object field
content_type = models.ForeignKey(ContentType,
        verbose_name=_('content type'),
        related_name="content_type_set_for_%(class)s")
object_pk = models.TextField(_('object ID'))
content_object = generic.GenericForeignKey(ct_field="content_type", fk_field="object_pk")
</snippet></ROW><ROW><id>19882404</id><snippet>RenderCommentListNode</snippet></ROW><ROW><id>19882404</id><snippet>deleted</snippet></ROW><ROW><id>19882449</id><snippet>options</snippet></ROW><ROW><id>19882449</id><snippet>Console</snippet></ROW><ROW><id>19882449</id><snippet>Python Console</snippet></ROW><ROW><id>19882449</id><snippet>add content roots to PYTHONPATH option</snippet></ROW><ROW><id>19882527</id><snippet>y</snippet></ROW><ROW><id>19882527</id><snippet>np.matrix([y, y, y], [-2, 0, 3]])  # interpreter says "what is y?"
</snippet></ROW><ROW><id>19882527</id><snippet>f(x) = 2*x + 5</snippet></ROW><ROW><id>19882527</id><snippet>def f(x):
    return 2*x + 5
</snippet></ROW><ROW><id>19882527</id><snippet>xs = np.arange(3)  # -&gt; array([0, 1, 2])
f(xs)              # -&gt; array([5, 7, 9])
</snippet></ROW><ROW><id>19882527</id><snippet>y</snippet></ROW><ROW><id>19882527</id><snippet>y = np.matrix([f(xs), [-2, 0, 3]])
# matrix([[ 5,  7,  9],
#         [-2,  0,  3]])
</snippet></ROW><ROW><id>19882527</id><snippet>y</snippet></ROW><ROW><id>19882527</id><snippet>y = np.matrix([[0, 0, 0], [-2, 0, 3]])
y[0, :] = f(xs)  # `0` means first row, `:` means all columns
print y
# matrix([[ 5,  7,  9],
#         [-2,  0,  3]])
</snippet></ROW><ROW><id>19882655</id><snippet>severities = ['Green', 'Yellow', 'Red']

db.define_table('repo',
    Field('body','text',requires=IS_LENGTH(500,1),label="report"),
    Field('severity', requires=IS_IN_SET(severities)),
    Field('posted_on','datetime', readable=False, writable=False),
    Field('posted_by','reference auth_user', writable=False))
</snippet></ROW><ROW><id>19882655</id><snippet>def equipment():
    reported = db().select(db.repo.ALL)
    max_severity = max([severities.index(r.severity) for r in reported])
    severity_color = severities[max_severity].lower()
    return dict(reported=reported, severity_color=severity_color)
</snippet></ROW><ROW><id>19882655</id><snippet>max_severity</snippet></ROW><ROW><id>19882655</id><snippet>.eq_img {background-color:{{=severity_color}};}
</snippet></ROW><ROW><id>19882686</id><snippet>from collections import Counter

first = Counter({'id': 1, 'age': 23})
second = Counter({'id': 4, 'out': 100})

first_plus_second = first + second
print first_plus_second
</snippet></ROW><ROW><id>19882686</id><snippet>Counter({'out': 100, 'age': 23, 'id': 5})
</snippet></ROW><ROW><id>19882686</id><snippet>dict</snippet></ROW><ROW><id>19882686</id><snippet>dict(first_plus_second)</snippet></ROW><ROW><id>19882686</id><snippet>&gt;&gt;&gt; print dict(first_plus_second)
{'age': 23, 'id': 5, 'out': 100}
</snippet></ROW><ROW><id>19882856</id><snippet>form = ChangePasswordForm(data=request.POST, user=request.user)
</snippet></ROW><ROW><id>19882971</id><snippet>&gt;&gt;&gt; 2**4 
16
</snippet></ROW><ROW><id>19882971</id><snippet>&gt;&gt;&gt; 2&lt;&lt;4 
32
</snippet></ROW><ROW><id>19883025</id><snippet>#!python3
s1 = b'\xce\xd2\xca\xc7\xc3\xc0\xb9\xfa\xc8\xcb'
s2 = b'\xe6\x88\x91\xe6\x98\xaf\xe7\xbe\x8e\xe5\x9b\xbd\xe4\xba\xba'
s3 = b'\x11b/f\x8e\x7f\xfdV\xbaN'
s4 = b'\x11b\x00\x00/f\x00\x00\x8e\x7f\x00\x00\xfdV\x00\x00\xbaN\x00\x00'

u1 = s1.decode('chinese')
u2 = s2.decode('utf8')
u3 = s3.decode('utf-16le')
u4 = s4.decode('utf-32le')

assert(u1==u2==u3==u4)
</snippet></ROW><ROW><id>19883025</id><snippet>\xE5</snippet></ROW><ROW><id>19883025</id><snippet>if rawdata[0] = 0xE5:
    print('deleted')
else:
    print(rawdata.decode('utf-16le'))
</snippet></ROW><ROW><id>19883025</id><snippet>#!python3
import binascii
import struct

# struct module unpacking formats
SHORT_ENTRY = '&lt;11s3B7HL'     # 12 fields described in FAT32 spec
LONG_ENTRY  = '&lt;B10s3B12sH4s' # 8 fields described in FAT32 spec

# attribute bit values (byte offset 11) 
ATTR_READ_ONLY = 0x01
ATTR_HIDDEN    = 0x02
ATTR_SYSTEM    = 0x04
ATTR_VOLUME_ID = 0x08
ATTR_DIRECTORY = 0x10
ATTR_ARCHIVE   = 0x20
LAST_LONG_ENTRY = 0x40
ATTR_LONG_NAME = ATTR_READ_ONLY | ATTR_HIDDEN | ATTR_SYSTEM | ATTR_VOLUME_ID
ATTR_LONG_NAME_MASK = ATTR_READ_ONLY | ATTR_HIDDEN | ATTR_SYSTEM | ATTR_VOLUME_ID | ATTR_DIRECTORY | ATTR_ARCHIVE

# A few entries from a FAT32 root directory (32 bytes per row)
data = binascii.unhexlify('''
  42 FC 00 69 00 6E 00 6F 00 2E 00 0F 00 D9 6A 00 70 00 67 00 00 00 FF FF FF FF 00 00 FF FF FF FF 
  01 6C 9A 4B 51 6D 00 61 00 F1 00 0F 00 D9 61 00 6E 00 61 00 20 00 70 00 65 00 00 00 6E 00 67 00 
  4D 41 A5 41 4E 41 7E 31 4A 50 47 20 00 89 6D 8B FE 40 69 43 00 00 C7 7D 8B 3F 03 00 04 06 7D 00 
  41 11 62 2F 66 8E 7F FD 56 BA 4E 0F 00 DC 2E 00 74 00 78 00 74 00 00 00 FF FF 00 00 FF FF FF FF 
  46 32 33 33 7E 31 20 20 54 58 54 20 00 4B BA 7B 69 43 69 43 00 00 BB 7B 69 43 00 00 00 00 00 00 
'''.strip().replace(' ','').replace('\n',''))

# Long names are built up from multiple entries, so start empty
raw_long = b''

# Iterate through the 32-byte entries in the data
for offset in range(0,len(data),32):
    raw_entry = data[offset:offset+32]

    # Entries that start with 0xE5 are deleted.
    # An entry that starts with zero indicates no more entries
    if raw_entry[0] == 0xE5: continue
    if raw_entry[0] == 0: break

    if raw_entry[11] &amp; ATTR_LONG_NAME_MASK == ATTR_LONG_NAME:
        # Long entries are found last-to-first and are in three parts
        # per entry.  Concatenate the parts and prepend to entries
        # found so far.
        entry = struct.unpack_from(LONG_ENTRY,data,offset)
        raw_long = entry[1] + entry[5] + entry[7] + raw_long
    else:
        entry = struct.unpack_from(SHORT_ENTRY,data,offset)
        # If the short entry is a volume ID, skip it.
        if entry[2] == ATTR_VOLUME_ID: continue
        # Unpack and decode 8.3 filename in OEM
        # character set.
        basename = entry[0][:8].decode('cp437').rstrip(' ')
        ext = entry[0][8:].decode('cp437').rstrip(' ')
        # Decode and strip the current long name value of padding.
        long_name = raw_long.decode('utf-16le').rstrip('\uffff').rstrip('\0')
        print('{:8}.{:3} - {}'.format(basename,ext,long_name))
        raw_long = b'' # Reset the long name to empty
</snippet></ROW><ROW><id>19883025</id><snippet>MAÑANA~1.JPG - 马克mañana pengüino.jpg
F233~1  .TXT - 我是美国人.txt
</snippet></ROW><ROW><id>19883078</id><snippet>import string
import collections

def vigsquare(printable=False):
    '''
    Returns a string like a vigenere square,
    printable joins each row with a newline so it's literally square
    printable=False (defaul) joins without newlines for easier 
    searching by row and column index
    '''
    alpha = string.ascii_uppercase
    rotater = collections.deque(alpha)
    vigsquare_list = []
    for i in xrange(26):
        vigsquare_list.append(''.join(rotater))
        rotater.rotate(-1)
    if printable:
        return '\n'.join(vigsquare_list) 
    else:
        return ''.join(vigsquare_list)
</snippet></ROW><ROW><id>19883078</id><snippet>def vigenere(row, column):
    ''' 
    Return a character from a vigenere square by 
    row and column letter.
    vigenere('L', 'G') returns 'R'
    '''
    alpha = string.ascii_uppercase
    rowindex = alpha.find(row)
    columnindex = alpha.find(column)
    return vigsquare()[rowindex*26 + columnindex]

print vigsquare(printable=True)
vigenere('L', 'G')
</snippet></ROW><ROW><id>19883078</id><snippet>ABCDEFGHIJKLMNOPQRSTUVWXYZ
BCDEFGHIJKLMNOPQRSTUVWXYZA
CDEFGHIJKLMNOPQRSTUVWXYZAB
DEFGHIJKLMNOPQRSTUVWXYZABC
EFGHIJKLMNOPQRSTUVWXYZABCD
FGHIJKLMNOPQRSTUVWXYZABCDE
GHIJKLMNOPQRSTUVWXYZABCDEF
HIJKLMNOPQRSTUVWXYZABCDEFG
IJKLMNOPQRSTUVWXYZABCDEFGH
JKLMNOPQRSTUVWXYZABCDEFGHI
KLMNOPQRSTUVWXYZABCDEFGHIJ
LMNOPQRSTUVWXYZABCDEFGHIJK
MNOPQRSTUVWXYZABCDEFGHIJKL
NOPQRSTUVWXYZABCDEFGHIJKLM
OPQRSTUVWXYZABCDEFGHIJKLMN
PQRSTUVWXYZABCDEFGHIJKLMNO
QRSTUVWXYZABCDEFGHIJKLMNOP
RSTUVWXYZABCDEFGHIJKLMNOPQ
STUVWXYZABCDEFGHIJKLMNOPQR
TUVWXYZABCDEFGHIJKLMNOPQRS
UVWXYZABCDEFGHIJKLMNOPQRST
VWXYZABCDEFGHIJKLMNOPQRSTU
WXYZABCDEFGHIJKLMNOPQRSTUV
XYZABCDEFGHIJKLMNOPQRSTUVW
YZABCDEFGHIJKLMNOPQRSTUVWX
ZABCDEFGHIJKLMNOPQRSTUVWXY
</snippet></ROW><ROW><id>19883078</id><snippet>'R'
</snippet></ROW><ROW><id>19883078</id><snippet>def vig_2(row, col):
    return string.ascii_uppercase[(ord(row) + ord(col)) % 26]
</snippet></ROW><ROW><id>19883078</id><snippet>import unittest
class VigTestCase(unittest.TestCase):
    def test_vigenere(self):
        self.assertEqual(vigenere('L', 'G'), 'R')
    def test_vigsquare(self):
        self.assertEqual(vigsquare(printable=False), 'ABCDEFGHIJKLMNOPQRSTUVWXYZBCDEFGHIJKLMNOPQRSTUVWXYZACDEFGHIJKLMNOPQRSTUVWXYZABDEFGHIJKLMNOPQRSTUVWXYZABCEFGHIJKLMNOPQRSTUVWXYZABCDFGHIJKLMNOPQRSTUVWXYZABCDEGHIJKLMNOPQRSTUVWXYZABCDEFHIJKLMNOPQRSTUVWXYZABCDEFGIJKLMNOPQRSTUVWXYZABCDEFGHJKLMNOPQRSTUVWXYZABCDEFGHIKLMNOPQRSTUVWXYZABCDEFGHIJLMNOPQRSTUVWXYZABCDEFGHIJKMNOPQRSTUVWXYZABCDEFGHIJKLNOPQRSTUVWXYZABCDEFGHIJKLMOPQRSTUVWXYZABCDEFGHIJKLMNPQRSTUVWXYZABCDEFGHIJKLMNOQRSTUVWXYZABCDEFGHIJKLMNOPRSTUVWXYZABCDEFGHIJKLMNOPQSTUVWXYZABCDEFGHIJKLMNOPQRTUVWXYZABCDEFGHIJKLMNOPQRSUVWXYZABCDEFGHIJKLMNOPQRSTVWXYZABCDEFGHIJKLMNOPQRSTUWXYZABCDEFGHIJKLMNOPQRSTUVXYZABCDEFGHIJKLMNOPQRSTUVWYZABCDEFGHIJKLMNOPQRSTUVWXZABCDEFGHIJKLMNOPQRSTUVWXY')
    def test_vig2(self):
        for i in string.ascii_uppercase:
            for j in string.ascii_uppercase:
                self.assertEqual(vig_2(i, j), vigenere(i, j))

unittest.main()
...
----------------------------------------------------------------------
Ran 3 tests in 0.038s

OK
</snippet></ROW><ROW><id>19883096</id><snippet>Pyside.QtCore.Signal</snippet></ROW><ROW><id>19883096</id><snippet>QEvent</snippet></ROW><ROW><id>19883096</id><snippet>Signal</snippet></ROW><ROW><id>19883096</id><snippet>QEvent</snippet></ROW><ROW><id>19883096</id><snippet>QEvent</snippet></ROW><ROW><id>19883096</id><snippet>Signal</snippet></ROW><ROW><id>19883096</id><snippet>QAbstactTransition</snippet></ROW><ROW><id>19883096</id><snippet>QObject</snippet></ROW><ROW><id>19883096</id><snippet>QEvent</snippet></ROW><ROW><id>19883096</id><snippet>QEvent</snippet></ROW><ROW><id>19883096</id><snippet>QEventTransition</snippet></ROW><ROW><id>19883096</id><snippet>onTransition()</snippet></ROW><ROW><id>19883096</id><snippet>onEnter()</snippet></ROW><ROW><id>19883096</id><snippet>onTransition()</snippet></ROW><ROW><id>19883096</id><snippet>def onTransition(self, e):
    x = e.arguments()[0]
    fac = self.fact.fac
    self.fact.fac = x * fac
    self.fact.x = x - 1
</snippet></ROW><ROW><id>19883096</id><snippet>UIStoryboardSegue</snippet></ROW><ROW><id>19883096</id><snippet>UIView</snippet></ROW><ROW><id>19883129</id><snippet>import time

timeout = 60
timer = time.clock()
while timer + timeout &lt; time.clock():
    do somthing
    if another thing happened:
        timer = time.clock()
</snippet></ROW><ROW><id>19883180</id><snippet>Counter</snippet></ROW><ROW><id>19883180</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>19883180</id><snippet>Counter</snippet></ROW><ROW><id>19883180</id><snippet>Counter</snippet></ROW><ROW><id>19883180</id><snippet>Counter</snippet></ROW><ROW><id>19883180</id><snippet>&gt;&gt;&gt; c = Counter()
&gt;&gt;&gt; d = defaultdict(int)
&gt;&gt;&gt; c[0], d[1]
(0, 0)
&gt;&gt;&gt; c
Counter()
&gt;&gt;&gt; d
defaultdict(&lt;type 'int'&gt;, {1: 0})
</snippet></ROW><ROW><id>19883180</id><snippet>Counter</snippet></ROW><ROW><id>19883180</id><snippet>most_common</snippet></ROW><ROW><id>19883180</id><snippet>defaultdict</snippet></ROW><ROW><id>19883180</id><snippet>sorted</snippet></ROW><ROW><id>19883180</id><snippet>&gt;&gt;&gt; c = Counter('aaaaaaaaabbbbbbbcc')
&gt;&gt;&gt; c.most_common()
[('a', 9), ('b', 7), ('c', 2)]
&gt;&gt;&gt; c.most_common(2)          #return 2 most common items and their counts
[('a', 9), ('b', 7)]
</snippet></ROW><ROW><id>19883180</id><snippet>Counter</snippet></ROW><ROW><id>19883180</id><snippet>&gt;&gt;&gt; c = Counter({'a':5, 'b':3})
&gt;&gt;&gt; list(c.elements())
['a', 'a', 'a', 'a', 'a', 'b', 'b', 'b']
</snippet></ROW><ROW><id>19883180</id><snippet>Counter</snippet></ROW><ROW><id>19883180</id><snippet>defaultdict(int)</snippet></ROW><ROW><id>19883247</id><snippet>def pyListToMyList(pylst):            
    if not pylst:
        return mkEmptyNode()
    else:
        return mkNode(pylst[0], pyLstToMyListRec(pylst[1:]))
</snippet></ROW><ROW><id>19883247</id><snippet>def pyListToMyList(pylst, i=0):
    if i &gt; len(pylst):
        return mkEmptyNode()
    else:
        return mkNode(pylst[i], pyLstToMyListRec(pylst, i+1))
</snippet></ROW><ROW><id>19883247</id><snippet>def pyListToMyList(pylst):
    lst = mkEmptyNode()
    for x in reversed(pylist):
        lst = mkNode(x, lst)
    return lst
</snippet></ROW><ROW><id>19883253</id><snippet>import numpy as np

a = np.array([[1.1,10],
     [2.2,20],
     [3.3,30],
     [4.4,40],
     [5.5,50]])

b = np.array([[1.5,100],
     [1.9,200],
     [2.3,250],
     [3.9,300]])

idx = b[:,0].searchsorted(a[:,0], side='right')
bval = np.r_[np.nan, b[:,1]]
c = np.column_stack([a, bval[idx]])

print(c)
</snippet></ROW><ROW><id>19883253</id><snippet>[[   1.1   10.     nan]
 [   2.2   20.   200. ]
 [   3.3   30.   250. ]
 [   4.4   40.   300. ]
 [   5.5   50.   300. ]]
</snippet></ROW><ROW><id>19883253</id><snippet>3.3</snippet></ROW><ROW><id>19883253</id><snippet>250</snippet></ROW><ROW><id>19883253</id><snippet>200</snippet></ROW><ROW><id>19883253</id><snippet>3.3 &gt; 2.3</snippet></ROW><ROW><id>19883276</id><snippet>splitlines()</snippet></ROW><ROW><id>19883276</id><snippet>before_keyword, after_keyword = line.split(u'"',1)
</snippet></ROW><ROW><id>19883276</id><snippet>for line in text.splitlines():
    if u'"' in line:
        before_keyword, after_keyword = line.split(u'"',1)
        ... etc. ...
</snippet></ROW><ROW><id>19883308</id><snippet>&gt;&gt;&gt; l = [1,1,0,1]
&gt;&gt;&gt; 
&gt;&gt;&gt; sum(j&lt;&lt;i for i,j in enumerate(reversed(l)))
13
</snippet></ROW><ROW><id>19883308</id><snippet>sum()</snippet></ROW><ROW><id>19883308</id><snippet>enumerate()</snippet></ROW><ROW><id>19883308</id><snippet>reversed()</snippet></ROW><ROW><id>19883433</id><snippet>import matplotlib.pyplot as plt 
import numpy as np
x = [1.81,1.715,1.78,1.613,1.629,1.714,1.62,1.738,1.495,1.669,1.57,1.877,1.385]
y = [0.924,0.915,0.914,0.91,0.909,0.905,0.905,0.893,0.886,0.881,0.873,0.873,0.844]

# This is the string that should show somewhere over the plotted line.
line_string = 'name of line'

# plotting
l, = plt.plot(x,y)
pos = [(x[-2]+x[-1])/2., (y[-2]+y[-1])/2.]
plt.text(pos[0], pos[1], line_string, size=9, rotation=12, color = l.get_color(),
         ha="center", va="center",bbox = dict(ec='1',fc='1'))
plt.show()
</snippet></ROW><ROW><id>19883490</id><snippet>get_rain</snippet></ROW><ROW><id>19883490</id><snippet>return rain_inches #float
</snippet></ROW><ROW><id>19883490</id><snippet>return rain_in #list
</snippet></ROW><ROW><id>19883508</id><snippet>import &lt;module&gt;</snippet></ROW><ROW><id>19883508</id><snippet>from &lt;module&gt; import *</snippet></ROW><ROW><id>19883508</id><snippet>&lt;module&gt;</snippet></ROW><ROW><id>19883508</id><snippet>module.str</snippet></ROW><ROW><id>19883542</id><snippet>def solve(lis):
    run_length = 0
    ind = 0
    for i, (x, y) in enumerate(zip(lis, lis[1:])):
        if run_length and y-x != 1:
            break
        if y-x == 1:
            if not run_length:
                ind = i
            run_length += 1
    if run_length:
        return run_length+1, ind
    return -1
</snippet></ROW><ROW><id>19883542</id><snippet>&gt;&gt;&gt; solve([4, 5, 5, 1, 8, 3, 1, 6, 2, 7])
(2, 0)
&gt;&gt;&gt; solve([1, 1, 1, 2, 3, 5, 1, 1])
(3, 2)
&gt;&gt;&gt; solve([1, 1, 1, 1])
-1
&gt;&gt;&gt; solve([1, 2, 5, 6, 7] )
(2, 0)
&gt;&gt;&gt; solve([1, 0, -1, -2, -1, 0, 0])
(3, 3)
</snippet></ROW><ROW><id>19883669</id><snippet>def removeRec(node, value):
    if isinstance(node, EmptyNode):
        raise ValueError("Cannot remove value from an empty list")
    elif node.data == value:
        return node.next
    else:
        node.next = removeRec(node.next, value)
        return node
</snippet></ROW><ROW><id>19883669</id><snippet>remove</snippet></ROW><ROW><id>19883669</id><snippet>remove</snippet></ROW><ROW><id>19883669</id><snippet>def remove(lst, value):
    try:
        lst.head = removeRec(lst.head, value)
        return True # only reached if no exception was raised by the recursion
    except ValueError:
        return False
</snippet></ROW><ROW><id>19883669</id><snippet>def removeRec(node, value):
    if isinstance(node, EmptyNode):
        print("Cannot remove value from an empty list")
        return None    # your code did this implicitly, I'm being explicit
    elif node.data == value:
        return node.next
    else:
        rec_result = removeRec(node.next, value)
        if rec_result is None:
            return rec_result
        else:
            node.next = rec_result
            return node
</snippet></ROW><ROW><id>19883669</id><snippet>def remove(lst, value):
    rec_result = removeRec(lst.head, value)
    if rec_result is None:
        return False
    else:
        lst.head = rec_result
        return True
</snippet></ROW><ROW><id>19883690</id><snippet>Counter</snippet></ROW><ROW><id>19883690</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; l = [1,2,2,3,1,1,2,3,4,5,6]
&gt;&gt;&gt; Counter(l)
Counter({1: 3, 2: 3, 3: 2, 4: 1, 5: 1, 6: 1})
</snippet></ROW><ROW><id>19883807</id><snippet>import re

...

outf = open('myout', 'r+')
inf = open('infile', 'r')
outdata = outf.read()
for line in inf:
    outdata = re.sub("(?&lt;=Status of %s: )'N/A'" % line.strip().split()[0], line.strip().split()[2], outdata)
outf.write(outdata)
outf.close()
inf.close()
</snippet></ROW><ROW><id>19883828</id><snippet>def printCSV():
f = csv.reader(open("ArticleLocationCache.csv", "rb"))
i = 1
print (i)
for row in f:
    if len(row)&gt;=2:
        print ("Line", i, row[1])
        i = i + 1
</snippet></ROW><ROW><id>19883828</id><snippet>def printCSV():
f = csv.reader(open("ArticleLocationCache.csv", "rb"))
i = 1
print (i)
for row in f:
    print (row)
    print ("Line", i, row[1])
    i = i + 1
</snippet></ROW><ROW><id>19883928</id><snippet>import tkinter

app = tkinter.Tk()

# Create a set for all clicked buttons (set prevents duplication)
clicked = set()
# Create a tuple of words (your 180 verb goes here)
words = 'hello', 'world', 'foo', 'bar', 'baz', 'egg', 'spam', 'ham'

# Button creator function
def create_buttons( words ):
    # Create a button for each word
    for word in words:
        # Add text and functionality to button and we are using a lambda
        # anonymous function here, but you can create a normal 'def' function
        # and pass it as 'command' argument
        button = tkinter.Button( app,
                                 text=word,
                                 command=lambda w=word: clicked.add(w) )
        # If you have 180 buttons, you should consider using the grid()
        # layout instead of pack() but for simplicity I used this one for demo
        button.pack()

# For demo purpose I binded the space bar, when ever
# you hit it, the app will print you out the 'clicked' set
app.bind('&lt;space&gt;', lambda e: print( *clicked ))

# This call creates the buttons
create_buttons( words )

# Now we enter to event loop -&gt; the program is running
app.mainloop()
</snippet></ROW><ROW><id>19883928</id><snippet>import tkinter

app = tkinter.Tk()

# Create a set for all clicked buttons (set prevents duplication)
clicked = set()
# Create a tuple of words (your 180 verb goes here)
words = 'hello', 'world', 'foo', 'bar', 'baz', 'egg', 'spam', 'ham'

# This function will run when pressing the space bar
def on_spacebar_press( event ):
    print( 'Clicked words:', *clicked )

# Button creator function
def create_buttons( words ):
    # Create a button for each word
    for word in words:
        # This function will run when a button is clicked
        def on_button_click(word=word):
            clicked.add( word )
        # Add button
        button = tkinter.Button( app,
                                 text=word,
                                 command=on_button_click )
        # If you have 180 buttons, you should consider using the grid()
        # layout instead of pack() but for simplicity I used this one for demo
        button.pack()

# Binding function tp space bar event
app.bind('&lt;space&gt;', on_spacebar_press)

# This call creates the buttons
create_buttons( words )

# Now we enter to event loop -&gt; the program is running
app.mainloop()
</snippet></ROW><ROW><id>19884177</id><snippet>update_tray()</snippet></ROW><ROW><id>19884177</id><snippet>socket.error</snippet></ROW><ROW><id>19884177</id><snippet>except EnvironmentError</snippet></ROW><ROW><id>19884177</id><snippet>except URLError</snippet></ROW><ROW><id>19884177</id><snippet>get_data()</snippet></ROW><ROW><id>19884177</id><snippet>try: ... except Exception: log_it()</snippet></ROW><ROW><id>19884177</id><snippet>update_tray()</snippet></ROW><ROW><id>19884304</id><snippet>import random

d= {'Three': 14.4, 'Five': 11.2, 'Two': 14.4, 'Thirteen': 3.3, 'One': 17.6, 'Seven': 3.3, 'Nine': 3.3, 'Ten': 3.3, 'Twelve': 3.3, 'Eight': 3.3, 'Four': 12.0, 'Six': 10.4}
total_weight = sum(d.values())
n_items = 3
random_sample = list()
d_mod = dict(d)

for i in range(n_items):
    random_cumulative_weight = random.uniform(0, total_weight)
    this_sum = 0.0
    for item, weight in d_mod.items():
        this_sum += weight
        if this_sum &gt;= random_cumulative_weight:
            random_sample.append(item)
            break
    del(d_mod[item])
    total_weight -= this_sum

random_sample
</snippet></ROW><ROW><id>19884724</id><snippet>groupby</snippet></ROW><ROW><id>19884724</id><snippet>&gt;&gt;&gt; df.groupby(level=0, sort=False, as_index=False).head(3)
                  line_date line_track  line_race  c1pos
horse_name                                              
Grand Cicero     2013-03-10         GP          9      9
Clever Story     2013-09-13        BEL          7      7
Distorted Dream  2013-10-04        BEL          4      2
Distorted Dream  2013-09-13        BEL          7      5
Distorted Dream  2013-04-27        BEL          6      2
Mr. O'Leary      2013-10-13        BEL          5      5
Mr. O'Leary      2013-08-29        SAR          7      6
Mr. O'Leary      2013-05-27        BEL          6      5
In the Dark      2013-10-13        BEL          5      7
In the Dark      2013-09-22        BEL          5      7
In the Dark      2013-08-03        SAR          2      7
Bred to Boss     2013-10-26        PRX          3      5
Bred to Boss     2013-10-06        PRX          6      3
Bred to Boss     2012-08-18        SAR          4      1
</snippet></ROW><ROW><id>19884724</id><snippet>&gt;&gt;&gt; df.groupby(level=0, sort=False, as_index=False).tail(3)
</snippet></ROW><ROW><id>19884724</id><snippet>sort=False</snippet></ROW><ROW><id>19884724</id><snippet>line_date</snippet></ROW><ROW><id>19884724</id><snippet>datetime</snippet></ROW><ROW><id>19884724</id><snippet>YYYY-MM-DD</snippet></ROW><ROW><id>19884724</id><snippet>head</snippet></ROW><ROW><id>19884724</id><snippet>tail</snippet></ROW><ROW><id>19884730</id><snippet>from Tkinter import *
import tkSnack

root = Tk()
tkSnack.initializeSnack(root)
c = tkSnack.Sound(file='test.wav')
c.record()
root.after(5000, c.stop)
root.mainloop()
</snippet></ROW><ROW><id>19884778</id><snippet>.keys()</snippet></ROW><ROW><id>19884778</id><snippet>wr = csv.DictWriter(myfile, delimiter='\t', quoting=csv.QUOTE_ALL,
                    fieldnames=sp500_data[0].keys())
</snippet></ROW><ROW><id>19884778</id><snippet>()</snippet></ROW><ROW><id>19884778</id><snippet>sp500_data[0].keys</snippet></ROW><ROW><id>19884778</id><snippet>.keys</snippet></ROW><ROW><id>19884778</id><snippet>csv.DictWriter()</snippet></ROW><ROW><id>19884922</id><snippet>json</snippet></ROW><ROW><id>19884922</id><snippet>import json

js_value = json.dumps(python_value)
</snippet></ROW><ROW><id>19884922</id><snippet>js_value</snippet></ROW><ROW><id>19884996</id><snippet>def searcher(s):
    if COMPILED_REGEXP_OBJECT.search(s):
        return s

matching_strings = filter(searcher, YOUR_LIST_OF_STRING)
</snippet></ROW><ROW><id>19884996</id><snippet>searcher()</snippet></ROW><ROW><id>19884996</id><snippet>None</snippet></ROW><ROW><id>19884996</id><snippet>filter()</snippet></ROW><ROW><id>19884996</id><snippet>None</snippet></ROW><ROW><id>19884996</id><snippet>matching_strings = filter(COMPILED_REGEXP_OBJECT.search, YOUR_LIST_OF_STRING)
</snippet></ROW><ROW><id>19884996</id><snippet>.search</snippet></ROW><ROW><id>19885023</id><snippet>print</snippet></ROW><ROW><id>19885023</id><snippet>sep</snippet></ROW><ROW><id>19885023</id><snippet>&gt;&gt;&gt; print('Test:', a,b,c,d,e,f,g,h,i, sep=',')
Test:, 1,2,3,4,5,6,7,8,9
</snippet></ROW><ROW><id>19885104</id><snippet>my_data =  np.array([['3', '1', '22', '0', '7.25', '2'],
                     ['1', '0', '38', '0', '71.2833', '0'],
                     ['3', '0', '26', '0', '7.925', '2'],
                     ['3', '0', '', '2', '23.45', '2'],
                     ['1', '1', '26', '0', '30', '0'],
                     ['3', '1', '32', '0', '7.75', '1']], 
                     dtype='&lt;U82')

ismale = my_data[:,1] == '0'
missing_age = my_data[:, 2] == ''
maleAgeBlank = missing_age &amp; ismale
my_data[maleAgeBlank, 2] = '30'
</snippet></ROW><ROW><id>19885104</id><snippet>&gt;&gt;&gt; my_data
array([[u'3', u'1', u'22', u'0', u'7.25', u'2'],
       [u'1', u'0', u'38', u'0', u'71.2833', u'0'],
       [u'3', u'0', u'26', u'0', u'7.925', u'2'],
       [u'3', u'0', u'30', u'2', u'23.45', u'2'], 
       [u'1', u'1', u'26', u'0', u'30', u'0'],
       [u'3', u'1', u'32', u'0', u'7.75', u'1']], 
      dtype='&lt;U82')
</snippet></ROW><ROW><id>19885141</id><snippet>Index</snippet></ROW><ROW><id>19885141</id><snippet>len() - 1</snippet></ROW><ROW><id>19885141</id><snippet>thisline = i.split()
Index = len(thisline) - 1
while Index &gt;= 0:
    print(v(thisline[Index], p[Index]))
    Index -= 1
</snippet></ROW><ROW><id>19885141</id><snippet>IndexError</snippet></ROW><ROW><id>19885141</id><snippet>thisline</snippet></ROW><ROW><id>19885141</id><snippet>p</snippet></ROW><ROW><id>19885141</id><snippet>zip()</snippet></ROW><ROW><id>19885141</id><snippet>reversed()</snippet></ROW><ROW><id>19885141</id><snippet>for</snippet></ROW><ROW><id>19885141</id><snippet>thisline = i.split()
for a, b in reversed(zip(thisline, p)):
    print(v(a, b))
</snippet></ROW><ROW><id>19885146</id><snippet>user_profile</snippet></ROW><ROW><id>19885146</id><snippet>@app.route('/user/&lt;name&gt;/&lt;uid&gt;')
def user_profile(name, uid):
    # ...
</snippet></ROW><ROW><id>19885146</id><snippet>user_profile</snippet></ROW><ROW><id>19885146</id><snippet>url_for()</snippet></ROW><ROW><id>19885146</id><snippet>url_for()</snippet></ROW><ROW><id>19885146</id><snippet>url_for()</snippet></ROW><ROW><id>19885146</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>19885146</id><snippet>&lt;a data-bind="click: $parent.showProfile" class="btn"&gt;&lt;p data-bind="text: name"&gt;&lt;/a&gt;
</snippet></ROW><ROW><id>19885146</id><snippet>showProfile()</snippet></ROW><ROW><id>19885146</id><snippet>self.showProfile = function(user) {
    window.location = user.profileUrl
}
</snippet></ROW><ROW><id>19885146</id><snippet>profileUrl</snippet></ROW><ROW><id>19885146</id><snippet>url_for()</snippet></ROW><ROW><id>19885146</id><snippet>url_for()</snippet></ROW><ROW><id>19885146</id><snippet>&lt;a data-bind="attr: { href: '/user/' + name() + '/' + uid() + '/'  }"&gt;&lt;p data-bind="text: name"&gt;&lt;/p&gt;&lt;/a&gt;
</snippet></ROW><ROW><id>19885146</id><snippet>url_for()</snippet></ROW><ROW><id>19885146</id><snippet>@app.route('/user')
@app.route('/user/&lt;name&gt;/&lt;uid&gt;')
def user_profile(name = None, uid = None):
    if name is None or uid is None:
        abort(400) # bad request
    # ...
</snippet></ROW><ROW><id>19885146</id><snippet>url_for('user_profile')</snippet></ROW><ROW><id>19885146</id><snippet>/user</snippet></ROW><ROW><id>19885194</id><snippet>if 'safari' in userAgentString.lower() and 'chrome' not in userAgentString.lower():
    print "Found Safari"
</snippet></ROW><ROW><id>19885254</id><snippet>sudo apt-get update
</snippet></ROW><ROW><id>19885325</id><snippet>room1</snippet></ROW><ROW><id>19885325</id><snippet>room1_commands</snippet></ROW><ROW><id>19885325</id><snippet>['help', 'look']</snippet></ROW><ROW><id>19885325</id><snippet>room1_commands = ['help', 'look']</snippet></ROW><ROW><id>19885325</id><snippet>room1_commands = ['help', 'look']

def room1():
    ask = input()

    if ask == 'help':
        print ('Usable Commands')
        print (room1_commands)
        room1()

    elif ask == 'look':
        print ('You see a fireplace')
        room1_commands.append('fireplace')
        room1()
</snippet></ROW><ROW><id>19885423</id><snippet>urlparse</snippet></ROW><ROW><id>19885423</id><snippet>import urlparse

qs = urlparse.urlsplit(inputurl).query
url = urlparse.parse_qs(qs).get('url', [None])[0]
</snippet></ROW><ROW><id>19885423</id><snippet>url</snippet></ROW><ROW><id>19885423</id><snippet>None</snippet></ROW><ROW><id>19885423</id><snippet>url=</snippet></ROW><ROW><id>19885423</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; inputurl = 'http://news.google.com/news/url?sa=t&amp;fd=R&amp;usg=AFQjCNFcQAQ4S3H5xUuU4N-LoM2I9tLxJg&amp;url=http://www.washingtonpost.com/blogs/going-out-guide/wp/2013/11/08/dallas-buyers-club-thor-the-dark-world-and-other-new-movies-reviewed/'
&gt;&gt;&gt; qs = urlparse.urlsplit(inputurl).query
&gt;&gt;&gt; urlparse.parse_qs(qs).get('url', [None])[0]
'http://www.washingtonpost.com/blogs/going-out-guide/wp/2013/11/08/dallas-buyers-club-thor-the-dark-world-and-other-new-movies-reviewed/'
</snippet></ROW><ROW><id>19885426</id><snippet>p = subprocess.Popen("bc", stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
out, err = p.communicate('1+1\n')
</snippet></ROW><ROW><id>19885469</id><snippet>y = numpy.linspace(50.8,50.9,4800)
x = numpy.linspace(4.3,4.4,4800)
x,y = numpy.meshgrid(x,y)
</snippet></ROW><ROW><id>19885491</id><snippet>sample_dict = {'test': ['a', 'b', 'c', 'd', 'e']}

def replace_item(sample_dict, item, new_item):
    list = sample_dict['test']
    list[list.index(item)] = new_item

replace_item(sample_dict, 'd', 'f')
# {'test': ['a', 'b', 'c', 'f', 'e']}
</snippet></ROW><ROW><id>19885642</id><snippet>append</snippet></ROW><ROW><id>19885645</id><snippet>scientific_works</snippet></ROW><ROW><id>19885645</id><snippet>numpy.histogram()</snippet></ROW><ROW><id>19885645</id><snippet>import datetime
import numpy as np

ts = datetime.date.toordinal # or any monotonic numeric `date` function 
hist = np.histogram(map(ts, (date for title, date, name in scientific_works)),
                    bins=map(ts, daterange(start_date, end_date, period))[0]
does_it_match = all(x &gt;= X for x in hist)
</snippet></ROW><ROW><id>19885645</id><snippet>def daterange(start_date, end_date, period):
    d = start_date
    while d &lt; end_date:
        yield d
        d += period
</snippet></ROW><ROW><id>19885645</id><snippet>&gt;&gt;&gt; from datetime import date, timedelta
&gt;&gt;&gt; list(daterange(date(2000, 1, 1), date(2000, 2, 1), timedelta(days=7)))
[datetime.date(2000, 1, 1), datetime.date(2000, 1, 8),
 datetime.date(2000, 1, 15), datetime.date(2000, 1, 22),
 datetime.date(2000, 1, 29)]
</snippet></ROW><ROW><id>19885656</id><snippet>datetime</snippet></ROW><ROW><id>19885656</id><snippet>datetime.datetime</snippet></ROW><ROW><id>19885656</id><snippet>A</snippet></ROW><ROW><id>19885656</id><snippet>datetime.date</snippet></ROW><ROW><id>19885656</id><snippet>B</snippet></ROW><ROW><id>19885656</id><snippet>A.date() - B
</snippet></ROW><ROW><id>19885656</id><snippet>&gt;&gt;&gt; from datetime import datetime, date
&gt;&gt;&gt; A = datetime.strptime("2013-11-09 18:17:53.196126", "%Y-%m-%d %H:%M:%S.%f")
&gt;&gt;&gt; B = date(*map(int, "2013-11-01".split("-")))
&gt;&gt;&gt; print A
2013-11-09 18:17:53.196126
&gt;&gt;&gt; print B
2013-11-01
&gt;&gt;&gt; print A.date() - B
8 days, 0:00:00
</snippet></ROW><ROW><id>19885674</id><snippet>A = ['a','c','b']
B = [5,7,4]

A_sorted, B_sorted = zip(*sorted(zip(A, B))
</snippet></ROW><ROW><id>19885674</id><snippet>&gt;&gt;&gt; A_sorted
('a', 'b', 'c')
&gt;&gt;&gt; B_sorted
(5, 4, 7)
</snippet></ROW><ROW><id>19885674</id><snippet>&gt;&gt;&gt; step_1 = zip(A,B) # creates list of tuples using 
                      # two original lists 
                      # tuples will allow us to keep correspondence 
                      # between A and B   
&gt;&gt;&gt; step_1
[('a', 5), ('c', 7), ('b', 4)]
&gt;&gt;&gt; step_2 = sorted(step_1) # key step: the tuples are sorted by
                            # the first value.                                  
&gt;&gt;&gt; step_2
[('a', 5), ('b', 4), ('c', 7)]
&gt;&gt;&gt; step_3 = zip(*step_2)   # This is just a trick to get back the original
                            # "lists", however they are actually tuples
&gt;&gt;&gt; step_3
[('a', 'b', 'c'), (5, 4, 7)]
</snippet></ROW><ROW><id>19885689</id><snippet>&gt;&gt;&gt; d = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}
&gt;&gt;&gt; ','.join(d.keys())
'key3,key2,key1'
&gt;&gt;&gt; ','.join(d.values())
'value3,value2,value1'
</snippet></ROW><ROW><id>19885882</id><snippet>&gt;&gt; import gnuradio
&gt;&gt; gnuradio.__file__
"path/to/gnuradio"
</snippet></ROW><ROW><id>19885882</id><snippet>foobarbaz/
  gnuradio/
    __init__.py
    other_file.py
</snippet></ROW><ROW><id>19885941</id><snippet>name = input("So, what is your name? ")
while not name.isalpha():
    print ("That's not a real name! Try again...")
    name = input("So, what is your name? ")
print ("So your name is " +(name) + "? Awesome.")
</snippet></ROW><ROW><id>19885941</id><snippet>while</snippet></ROW><ROW><id>19885941</id><snippet>name</snippet></ROW><ROW><id>19885941</id><snippet>That's not a real name! Try again...</snippet></ROW><ROW><id>19885941</id><snippet>name</snippet></ROW><ROW><id>19885941</id><snippet>name</snippet></ROW><ROW><id>19885941</id><snippet>"So your name is &lt;name entered&gt;? Awesome."</snippet></ROW><ROW><id>19885941</id><snippet>print ("So your name is {}? Awesome.".format(name.title()))
</snippet></ROW><ROW><id>19885968</id><snippet>if word in words</snippet></ROW><ROW><id>19885968</id><snippet>uniquewords</snippet></ROW><ROW><id>19885968</id><snippet>words</snippet></ROW><ROW><id>19885968</id><snippet>for line in text.splitlines():
</snippet></ROW><ROW><id>19885968</id><snippet>list</snippet></ROW><ROW><id>19885968</id><snippet>len(uniquewords)</snippet></ROW><ROW><id>19885968</id><snippet>value</snippet></ROW><ROW><id>19885968</id><snippet>key</snippet></ROW><ROW><id>19885968</id><snippet>1</snippet></ROW><ROW><id>19885968</id><snippet>test,</snippet></ROW><ROW><id>19885968</id><snippet>test.</snippet></ROW><ROW><id>19885968</id><snippet>dict</snippet></ROW><ROW><id>19885968</id><snippet>def hapax_legomana_ratio(text):
    ''' Return the hapax_legomana ratio for this text.
    This ratio is the number of words that occur exactly once divided
    by the total number of words.
    text is a list of strings each ending in \n.
    At least one line in text contains a word.'''

    uniquewords = dict()
    words = 0
    for line in text:
        line = line.strip().split()
        for word in line:
            words += 1
            word = word.replace(',', '').strip()
            if word in uniquewords:
                uniquewords[word] -= 1
            else:
                uniquewords[word] = 1

    unique_count = 0
    for each in uniquewords:
        if uniquewords[each] == 1:
            unique_count += 1
    HLR = unique_count/words

    print (HLR)
</snippet></ROW><ROW><id>19885968</id><snippet>collection.Counter</snippet></ROW><ROW><id>19885973</id><snippet>\/
</snippet></ROW><ROW><id>19885973</id><snippet>/\
</snippet></ROW><ROW><id>19885973</id><snippet>ply</snippet></ROW><ROW><id>19885973</id><snippet>t_TkDisjuncion = r'\\\/'
t_TkConjuncion = r'\/\\'
</snippet></ROW><ROW><id>19885973</id><snippet>\\\/
</snippet></ROW><ROW><id>19885973</id><snippet>\/\\
</snippet></ROW><ROW><id>19885973</id><snippet>ply</snippet></ROW><ROW><id>19885973</id><snippet>ply</snippet></ROW><ROW><id>19885989</id><snippet>random.choice()</snippet></ROW><ROW><id>19885989</id><snippet>import random
choices = set(["salad", "steak", "soup"])
rand_choice = random.choice(choices)

# do stuff with the choice
</snippet></ROW><ROW><id>19886004</id><snippet>class meta:
</snippet></ROW><ROW><id>19886004</id><snippet>class Meta:
</snippet></ROW><ROW><id>19886387</id><snippet>        for i in range(3, int(n**0.5)+1):
            if n%i == 0 : # You want to check if n is divisible by i
                count = count + 1
                # No need of count = count + 0 here since it does nothing

if count &gt; 0 : print("Number is not prime") # Prime if count &gt; 0 &amp; not count &gt; 1
else : print("Number is prime")
</snippet></ROW><ROW><id>19886387</id><snippet>for</snippet></ROW><ROW><id>19886387</id><snippet>for i in range(3, int(n**0.5)+1, 2): # The 3rd argument indicates steps
</snippet></ROW><ROW><id>19886454</id><snippet>partial(counter, number)</snippet></ROW><ROW><id>19886454</id><snippet>partial(counter, 0)</snippet></ROW><ROW><id>19886454</id><snippet>counter(0)</snippet></ROW><ROW><id>19886454</id><snippet>def counter(number):
    number = number + 1
    return number

def iterator(iteration, function, arg):
    for i in range(iteration):
        arg = function(arg)
    return arg

number = 0
number = iterator(5, counter, number)
print number # =&gt; 5
</snippet></ROW><ROW><id>19886454</id><snippet>def counter(number, delta):
    number = number + delta
    return number

def iterator(iteration, function, *args):
    args = list(args)
    for i in range(iteration):
        ret = function(*args)
        args[0] = ret
    return ret

number = 0
number = iterator(5, counter, number, 5)
print number # =&gt; 25
</snippet></ROW><ROW><id>19886529</id><snippet>&gt;&gt;&gt; l = [(1,"hi"),(True,False),(3,4)]
&gt;&gt;&gt; for i in l:
...     print str(i[0])+str(i[1])
</snippet></ROW><ROW><id>19886678</id><snippet>&gt;&gt;&gt; np.array([
...     [1,2,3],
...     [4,5,6],
...     [7,8,9]
... ]).transpose().mean(axis=1)
array([ 4.,  5.,  6.])
</snippet></ROW><ROW><id>19886678</id><snippet>&gt;&gt;&gt; np.transpose([
...     [1,2,3],
...     [4,5,6],
...     [7,8,9]
... ]).mean(axis=1)
array([ 4.,  5.,  6.])
</snippet></ROW><ROW><id>19886706</id><snippet>print "DAYS: " + str(days.days)
DAYS: 8
</snippet></ROW><ROW><id>19886711</id><snippet>d = {'firstname' : 'Foo', 'lastname' : 'Bar'}
d = {unicode(k):unicode(v) for k,v in d.items() }
</snippet></ROW><ROW><id>19886717</id><snippet>[x]*3</snippet></ROW><ROW><id>19886717</id><snippet>&gt;&gt;&gt; yy = [list('abc') for _ in range(3)]
&gt;&gt;&gt; yy[0][0]='A'
&gt;&gt;&gt; yy
[['A', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]
</snippet></ROW><ROW><id>19886717</id><snippet>id()</snippet></ROW><ROW><id>19886717</id><snippet>&gt;&gt;&gt; x=list('abc')
&gt;&gt;&gt; id(x)
67297928                                  # list object id
&gt;&gt;&gt; yy=[x]*3                              # create a list with x, duplicated...
&gt;&gt;&gt; [id(i) for i in yy]
[67297928, 67297928, 67297928]            # same id multipled
&gt;&gt;&gt; yy = [list('abc') for _ in range(3)]  
&gt;&gt;&gt; [id(i) for i in yy]
[67298248, 67298312, 67297864]            # three different ids
</snippet></ROW><ROW><id>19886724</id><snippet># take the maximum from each tuple
&gt;&gt;&gt; m1 = map(lambda tup: max(tup), array)
# take the maximum of all maximums
&gt;&gt;&gt; m = max(m1)
# choose only tuples that contains m
&gt;&gt;&gt; [tup for tup in array if m in tup]
[[2, 3, 4, 5], [1, 3, 4, 5]]
</snippet></ROW><ROW><id>19886898</id><snippet>#!/usr/bin/env python

i = 0
numbers = []

for j in xrange(6):
    print "At the top i is %d" % i
    numbers.append(i)

    i = i + 1
    print "Numbers now: ", numbers
    print "At the bottom i is %d" % i


print "The numbers: "

for num in numbers:
    print num
</snippet></ROW><ROW><id>19886898</id><snippet>list</snippet></ROW><ROW><id>19886898</id><snippet>#!/usr/bin/env python

numbers = [i for i in xrange(6)]

print "The numbers: "

for num in numbers:
    print num
</snippet></ROW><ROW><id>19886898</id><snippet>#!/usr/bin/env python

print "The numbers: "
for num in xrange(6):
    print num
</snippet></ROW><ROW><id>19887222</id><snippet># calculate arcsin(log(sqrt(x)-4))
x = ?
message = None
try:
    try:
        x1 = sqrt(x)
    except Exception:
        message = "can't take sqrt"
        raise
    try:
         x1 = log(x1-4)
    except Exception:
        message = "can't compute log"
        raise
    try:
        x2 = arcsin(x1)
    except Exception:
        message = "Can't calculate arcsin"
        raise
except Exception:
    print message
</snippet></ROW><ROW><id>19887222</id><snippet>def func():
    try:
        y = calculate_asin_log_sqrt(x)
        # stuff that depends on y goes here
    except MyError as e:
        print e.message
    # Stuff that happens whether or not the calculation fails goes here

def calculate_asin_log_sqrt(x):
    try:
        x1 = sqrt(x)
    except Exception:
        raise MyError("Can't calculate sqrt")
    try:
        x1 = log(x1-4)
    except Exception:
        raise MyError("Can't calculate log")
    try:
        x2 = arcsin(x1)
    except Exception:
        raise MyError("Can't calculate arcsin) 
    return x2
</snippet></ROW><ROW><id>19887313</id><snippet>firstame="bob"</snippet></ROW><ROW><id>19887313</id><snippet>firstname="bob"</snippet></ROW><ROW><id>19887313</id><snippet>lastname</snippet></ROW><ROW><id>19887313</id><snippet>last</snippet></ROW><ROW><id>19887313</id><snippet>['firstname', 'bob', 'lastname', 'stewart', 'dob', '2010-0206', 
 'hobbies', 'reading, singing', 'drawing', 'is_minor', 'True']
</snippet></ROW><ROW><id>19887313</id><snippet>list_of_names</snippet></ROW><ROW><id>19887313</id><snippet>oneOf</snippet></ROW><ROW><id>19887313</id><snippet>boolean_value = oneOf("True False").setParseAction(lambda t: t[0]=='True')
</snippet></ROW><ROW><id>19887313</id><snippet>removeQuotes</snippet></ROW><ROW><id>19887313</id><snippet>['firstname', 'bob', 'lastname', 'stewart', 'dob', '2010-0206', 
 'hobbies', 'reading, singing', 'drawing', 'is_minor', True]
</snippet></ROW><ROW><id>19887313</id><snippet>True</snippet></ROW><ROW><id>19887313</id><snippet>setResultsName</snippet></ROW><ROW><id>19887313</id><snippet>my_data = person_start + first.setResultsName("firstname") + 
          last.setResultsName("lastname") + ...
</snippet></ROW><ROW><id>19887313</id><snippet>my_data = person_start + first("firstname") + last("lastname") + ...
</snippet></ROW><ROW><id>19887313</id><snippet>first</snippet></ROW><ROW><id>19887313</id><snippet>last</snippet></ROW><ROW><id>19887313</id><snippet>named_parameter</snippet></ROW><ROW><id>19887313</id><snippet>def named_parameter(label, paramtype):
    expr = Literal(label) + Suppress('=') + paramtype(label)
    return expr
</snippet></ROW><ROW><id>19887313</id><snippet>label</snippet></ROW><ROW><id>19887313</id><snippet>first = named_parameter("firstname", quotedString)
last = named_parameter("lastname", quotedString)
dob = named_parameter("dob", quotedString)
hobbies = named_parameter("hobbies", Suppress("[") + list_of_names + Suppress("]"))
is_minor = named_parameter("is_minor", boolean_value)
</snippet></ROW><ROW><id>19887313</id><snippet>print result["firstname"]
print result["hobbies"]
</snippet></ROW><ROW><id>19887313</id><snippet>bob
['reading, singing', 'drawing']
</snippet></ROW><ROW><id>19887313</id><snippet>print result.firstname
print result.hobbies
</snippet></ROW><ROW><id>19887313</id><snippet>delimitedList</snippet></ROW><ROW><id>19887313</id><snippet>parameter = first | last | dob | hobbies | is_minor
my_data = person_start + delimitedList(parameter) + person_end
</snippet></ROW><ROW><id>19887313</id><snippet>quotedString.setParseAction(removeQuotes)
list_of_names = delimitedList(quotedString)
boolean_value = oneOf("True False").setParseAction(lambda t: t[0]=='True')

def named_parameter(label, paramtype):
    expr = Literal(label) + Suppress('=') + paramtype(label)
    return expr

person_start = Literal("person(").suppress()
first = named_parameter("firstname", quotedString)
last = named_parameter("lastname", quotedString)
dob = named_parameter("dob", quotedString)
hobbies = named_parameter("hobbies", Suppress("[") + list_of_names + Suppress("]"))
is_minor = named_parameter("is_minor", boolean_value)
person_end = Suppress(")")
comma = Literal(",").suppress()

parameter = first | last | dob | hobbies | is_minor
my_data = person_start + delimitedList(parameter) + person_end
</snippet></ROW><ROW><id>19887371</id><snippet>script</snippet></ROW><ROW><id>19887371</id><snippet>/admin/.*</snippet></ROW><ROW><id>19887371</id><snippet>script: ...</snippet></ROW><ROW><id>19887371</id><snippet>script: main.py</snippet></ROW><ROW><id>19887371</id><snippet>Application</snippet></ROW><ROW><id>19887432</id><snippet>simpleubjson</snippet></ROW><ROW><id>19887761</id><snippet>time.sleep</snippet></ROW><ROW><id>19887761</id><snippet>after</snippet></ROW><ROW><id>19887761</id><snippet>from Tkinter import *

def blink():
    e.config(bg='green')
    e.after(1000, lambda: e.config(bg='white')) # after 1000ms

root = Tk()
e = Entry(root)
e.pack()
b = Button(root, text='blink', command=blink)
b.pack()
root.mainloop()
</snippet></ROW><ROW><id>19887878</id><snippet>page_obj</snippet></ROW><ROW><id>19887878</id><snippet>{% for object in object_list %}
   {{forloop.counter|add:page_obj.start_index }} 
{% endfor %}
</snippet></ROW><ROW><id>19887921</id><snippet>steps = [
[967, 973],
[967, 970],
[970, 396],
[396, 3269],
[3269, 3275],
[3275, 3278],
[3278, 404],
[3278, 408],
[404, 448],
[408, 410],
[408, 411],
[448, 454],
[410, 419],
[410, 433],
[410, 437],
[411, 412],
]
</snippet></ROW><ROW><id>19887921</id><snippet>def add_steps(routes, finished_routes):
    new_routes = []
    for r in routes:
        end = r[-1]
        r_finished = True
        for s in steps:
            if s[0] == end:
                new_routes.append(r + [s[1]])
                r_finished = False
        if r_finished:
            finished_routes.append(r)
    return new_routes, finished_routes
</snippet></ROW><ROW><id>19887921</id><snippet>&gt;&gt;&gt; add_steps([[967]], [])
</snippet></ROW><ROW><id>19887921</id><snippet>Out: ([[967, 973], [967, 970]], [])
</snippet></ROW><ROW><id>19887921</id><snippet>&gt;&gt;&gt; add_steps([[967, 973], [967, 970]], [])
([[967, 970, 396]], [[967, 973]])
</snippet></ROW><ROW><id>19887921</id><snippet>routes = [[967]]
finished_routes = []
for n in range(20):
    routes, finished_routes = add_steps(routes, finished_routes)
    if not routes:
        print finished_routes
        break
</snippet></ROW><ROW><id>19887921</id><snippet>[[967, 973], [967, 970, 396, 3269, 3275, 3278, 404, 448, 454], [967, 970, 396, 3269, 3275, 3278, 408, 410, 419], [967, 970, 396, 3269, 3275, 3278, 408, 410, 433], [967, 970, 396, 3269, 3275, 3278, 408, 410, 437], [967, 970, 396, 3269, 3275, 3278, 408, 411, 412]]
</snippet></ROW><ROW><id>19887969</id><snippet>.</snippet></ROW><ROW><id>19887969</id><snippet>./b</snippet></ROW><ROW><id>19887969</id><snippet>PYTHONPATH=.</snippet></ROW><ROW><id>19887969</id><snippet>PYTHONPATH=. python b/y.py 
</snippet></ROW><ROW><id>19887969</id><snippet>-m</snippet></ROW><ROW><id>19887969</id><snippet>python -m b.y
</snippet></ROW><ROW><id>19888124</id><snippet>for i in range(0,z):
    x.append( T.Entry(main, justify = 'center'))
    x[i].pack() 
</snippet></ROW><ROW><id>19888124</id><snippet>range</snippet></ROW><ROW><id>19888124</id><snippet>e =</snippet></ROW><ROW><id>19888267</id><snippet>884704</snippet></ROW><ROW><id>19888267</id><snippet>0.884704</snippet></ROW><ROW><id>19888267</id><snippet>&gt;&gt;&gt; c = datetime.timedelta(seconds=4, microseconds=884704)
&gt;&gt;&gt; c.seconds
4
&gt;&gt;&gt; c.microseconds
884704
&gt;&gt;&gt; print(c)
0:00:04.884704
</snippet></ROW><ROW><id>19888267</id><snippet>total_seconds()</snippet></ROW><ROW><id>19888267</id><snippet>&gt;&gt;&gt; c.total_seconds()
4.884704
</snippet></ROW><ROW><id>19888308</id><snippet>all</snippet></ROW><ROW><id>19888308</id><snippet>Help on built-in function all in module builtins:

all(...)
    all(iterable) -&gt; bool

    Return True if bool(x) is True for all values x in the iterable.
    If the iterable is empty, return True.



&gt;&gt;&gt; all((('t2',), ('t3',), ('t4',), ('t5', 't6')))
True
&gt;&gt;&gt; all((('t2',), (), ('t3',), ('t4',)))
False
</snippet></ROW><ROW><id>19888342</id><snippet>det(pilot-2, A-1)
nsubj(flies-3, pilot-2)
root(ROOT-0, flies-3)
det(airplane-5, an-4)
dobj(flies-3, airplane-5)
</snippet></ROW><ROW><id>19888342</id><snippet>root</snippet></ROW><ROW><id>19888342</id><snippet>nsubj</snippet></ROW><ROW><id>19888342</id><snippet>dobj</snippet></ROW><ROW><id>19888472</id><snippet>import csv

uniq = {} #Create an empty dictionary, which we will use as a hashmap as Python dictionaries support key-value pairs.

ifile = open('data.csv', 'r') #whatever your CSV file is named.
reader = csv.reader(ifile)

for row in reader:
    joined = row[0] + row[1] #The joined string is simply the first and second columns in each row.
    #Check to see that the key exists, if it does increment the occurrence by 1
    if joined in uniq.keys():
        uniq[joined] += 1
    else:
        uniq[joined] = 1 #This means the key doesn't exist, so add the key to the dictionary with an occurrence of 1

print uniq #Now output the results
</snippet></ROW><ROW><id>19888472</id><snippet>{'Class02CD3': 7, 'Class02CD1': 2, 'Class01CD2': 3, 'DClass2DE2': 2}
</snippet></ROW><ROW><id>19888472</id><snippet>uniq1,uniq2,three,four,five,six</snippet></ROW><ROW><id>19888558</id><snippet>window.show()</snippet></ROW><ROW><id>19888558</id><snippet>main()</snippet></ROW><ROW><id>19888558</id><snippet>window.show()</snippet></ROW><ROW><id>19888558</id><snippet>    userRecvdFrom = newUsrFile(".")[0]
</snippet></ROW><ROW><id>19888558</id><snippet>    userRecvdFrom = newUsrFile.split(".")[0]
</snippet></ROW><ROW><id>19888558</id><snippet>newUsrFile</snippet></ROW><ROW><id>19888558</id><snippet>SendMyfiles</snippet></ROW><ROW><id>19888706</id><snippet>import string
print('AAAGCCTT'.translate(string.maketrans('AGCT','TCGA')))
</snippet></ROW><ROW><id>19888706</id><snippet>TTTCGGAA
</snippet></ROW><ROW><id>19888797</id><snippet>def pegs():
    ...
    return numberOfPegs
</snippet></ROW><ROW><id>19888797</id><snippet>npegs = pegs()
checker(npegs)   # send the number of pegs to the checker function
</snippet></ROW><ROW><id>19888797</id><snippet>def checker(pegs):
    ...
</snippet></ROW><ROW><id>19888876</id><snippet>class Bullet(pygame.sprite.Sprite):

    def __init__(self, mouse, player):

        pygame.sprite.Sprite.__init__(self)

        self.image = pygame.Surface([4, 10])
        self.image.fill(black)

        self.mouse_x, self.mouse_y = mouse[0], mouse[1]
        self.player = player

        self.rect = self.image.get_rect()
    def update(self):

        speed = 4.
        range = 200
        distance = [self.mouse_x - self.player[0], self.mouse_y - self.player[1]]
        norm = math.sqrt(distance[0] ** 2 + distance[1] ** 2)
        direction = [distance[0] / norm, distance[1 ] / norm]
        bullet_vector = [direction[0] * speed, direction[1] * speed]


        self.rect.x -= bullet_vector[0]
        self.rect.y -= bullet_vector[1]
</snippet></ROW><ROW><id>19888876</id><snippet> bullet = Bullet(pygame.mouse.get_pos(), [player.rect.x, player.rect.y])
</snippet></ROW><ROW><id>19888876</id><snippet>speed</snippet></ROW><ROW><id>19889361</id><snippet>methods[]</snippet></ROW><ROW><id>19889361</id><snippet>post_parameters</snippet></ROW><ROW><id>19889361</id><snippet>post_parameters = {    
    'methods[]':'CF',
    'aasequence':'EEEEEEEEEEEEEEEEEEE'
}
</snippet></ROW><ROW><id>19889422</id><snippet>Entry</snippet></ROW><ROW><id>19889422</id><snippet>graph()</snippet></ROW><ROW><id>19889422</id><snippet>Entry</snippet></ROW><ROW><id>19889422</id><snippet>Entry</snippet></ROW><ROW><id>19889422</id><snippet>graph()</snippet></ROW><ROW><id>19889422</id><snippet>Entry</snippet></ROW><ROW><id>19889422</id><snippet># -*- coding: utf-8 -*-

import matplotlib.pyplot as mp
import Tkinter as T, sys

class Application():

    def __init__(self, root):

        self.root = root

        self.x1 = []
        self.y2 = []

        self.z = 0

        self.root.title('GRAPH')
        self.root.geometry('600x600')
        self.root.config(bg="#3366ff")

        self.e = T.Entry(self.root, justify='center')

        self.l = T.Label(self.root, text='Podaj liczbę parametrów N =', bg='#3366ff')

        self.b1 = T.Button(self.root, text='OK', command=self.check)

        self.b2 = T.Button(self.root, text='Rysuj', command=self.graph)
        self.b = T.Button(self.root, text='Zakończ', command=self.end)

        self.l.pack()
        self.e.pack()
        self.b1.pack()

        self.b2.pack()
        self.b.pack()

    #------------------------------------------------------------

    def run(self):
        self.root.mainloop()

    #------------------------------------------------------------

    def end(self):
        sys.exit()

    #------------------------------------------------------------

    def check(self):
        try:
            self.entry_x = []
            self.entry_y = []

            self.z = int(self.e.get())

            self.e.config(bg='green')
            self.e.after(1000, lambda: self.e.config(bg='white'))

            self.l2 = T.Label(self.root, text='X', bg='yellow')
            self.l2.pack()

            for i in range(self.z):
                self.entry_x.append(T.Entry(self.root, justify='center'))
                self.entry_x[-1].pack()

            self.l3 = T.Label(self.root, text='Y', bg='#3366ff')
            self.l3.pack()

            for i in range(self.z):
                self.entry_y.append(T.Entry(self.root, justify='center'))
                self.entry_y[-1].pack() 
        except:
            self.e.config(bg='red')
            self.e.after(1000, lambda: self.e.config(bg='white'))

    #------------------------------------------------------------

    def graph(self):

        self.x1 = []
        self.y1 = []

        for i in range(len(self.entry_x)):
            self.x1.append(float(self.entry_x[i].get()))

        for i in range(len(self.entry_y)):
            self.y1.append(float(self.entry_y[i].get()))

        mp.ion()
        mp.plot(self.x1, self.y1)  
        mp.title('Wykres')
        mp.xlabel('x')
        mp.ylabel('y')
        mp.draw()

#====================================================================#

Application(T.Tk()).run()
</snippet></ROW><ROW><id>19889507</id><snippet>opp</snippet></ROW><ROW><id>19889507</id><snippet>oppervlakte()
print opp
</snippet></ROW><ROW><id>19889507</id><snippet>opp</snippet></ROW><ROW><id>19889507</id><snippet>def oppervlakte():
    lengte = int(raw_input("Voer de lengte in: ")) #call int() here
    br = int(raw_input("Voer de breedte in: ")) # call int() here
    opp = lengte * br # Calculates the dimension of the floor
    return opp, lengte, br 

opp, lengte, br = oppervlakte()
</snippet></ROW><ROW><id>19889507</id><snippet>int()</snippet></ROW><ROW><id>19889507</id><snippet>&gt;&gt;&gt; x = '123'
&gt;&gt;&gt; int(x)       #returns a new value, doesn't affects `x`
123
&gt;&gt;&gt; x            #x is still unchanged
'123'
&gt;&gt;&gt; x = int(x)   #re-assign the returned value from int() to `x`
&gt;&gt;&gt; x
123
</snippet></ROW><ROW><id>19889524</id><snippet>&lt;Directory D:/Rocnikova_prace/mysite/mysite&gt;
&lt;Files wsgi.py&gt;
Options FollowSymLinks
AuthType None
AllowOverride None
Order deny,allow
Deny from all
&lt;/Files&gt;
&lt;/Directory&gt;
</snippet></ROW><ROW><id>19889524</id><snippet> [Sun Nov 10 13:07:13 2013] [error] [client 127.0.0.1] client denied by server configuration: D:/Rocnikova_prace/mysite/mysite/wsgi.py
</snippet></ROW><ROW><id>19889604</id><snippet>user = User.query.filter_by(username=request.form['USERNAME']).first()
if not user:
    error = 'Invalid username'
elif bcrypt.hashpw(request.form['password'], user.password) != hashed:
    error = 'Invalid password'
else:
    session['user_id'] = user.id  # makes more sense than storing just a bool
    flash('You were logged in')
    return redirect(url_for('show_entries'))
</snippet></ROW><ROW><id>19889604</id><snippet>class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String, unique=True)
    password = db.Column(db.String)
</snippet></ROW><ROW><id>19889604</id><snippet>session['user_id']</snippet></ROW><ROW><id>19889604</id><snippet>User.query.get(session['user_id'])</snippet></ROW><ROW><id>19889604</id><snippet>g.user</snippet></ROW><ROW><id>19889713</id><snippet>&gt;&gt;&gt; lis = []
&gt;&gt;&gt; seen = set()
&gt;&gt;&gt; for x in ['apple','banana','orange']:
    if x not in seen:
        seen.add(x)
        lis.append(x)
...         
&gt;&gt;&gt; if 'banana' in seen:
...     print lis.index('banana')
... else:
...     seen.add('banana')
...     lis.append('banana')
...     print len(lis)-1
...     
1
&gt;&gt;&gt; if 'bar' in seen:
    print lis.index('bar')
else:
    seen.add('bar')
    lis.append('bar')
    print len(lis)-1
...     
3
</snippet></ROW><ROW><id>19889713</id><snippet>&gt;&gt;&gt; lis
['apple', 'banana', 'orange', 'bar']
</snippet></ROW><ROW><id>19889713</id><snippet>list</snippet></ROW><ROW><id>19889713</id><snippet>list(set)</snippet></ROW><ROW><id>19889713</id><snippet>&gt;&gt;&gt; list(seen)
['orange', 'bar', 'apple', 'banana']
</snippet></ROW><ROW><id>19890128</id><snippet>and</snippet></ROW><ROW><id>19890128</id><snippet>&amp;</snippet></ROW><ROW><id>19890128</id><snippet>if p1_teller == 0 and p1_raw[0:1] != "/":
    print "Loop 1"
else:
    print "Loop 2"
</snippet></ROW><ROW><id>19890363</id><snippet>from pyramid.wsgi import wsgiapp

# Enable TileStache tile server
import TileStache
tile_app = TileStache.WSGITileServer('tilestache/tilestache.cfg', autoreload=False)

@wsgiapp
def tileserver(environ, start_response):

    return tile_app(environ, start_response)
</snippet></ROW><ROW><id>19890375</id><snippet>csv</snippet></ROW><ROW><id>19890375</id><snippet>UnicodeWriter</snippet></ROW><ROW><id>19890491</id><snippet>3/2  -&gt; floor(1.5)  -&gt;  1
-3/2 -&gt; floor(-1.5) -&gt; -2
</snippet></ROW><ROW><id>19890519</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.colors as colors
import numpy.ma as ma

#See http://stackoverflow.com/questions/18926031/how-to-extract-a-subset-of-a-colormap-as-a-new-colormap-in-matplotlib
def truncate_colormap(cmap, minval=0.0, maxval=1.0, n=100):
    new_cmap = colors.LinearSegmentedColormap.from_list(
        'trunc({n},{a:.2f},{b:.2f})'.format(n=cmap.name, a=minval, b=maxval),
        cmap(np.linspace(minval, maxval, n)))
    return new_cmap

#truncate the colourmap
n_colours = 4
new_cmap = truncate_colormap(cm.get_cmap('spectral_r'), 0, 0.4, n=n_colours)

#discretise the colourmap
bounds = np.linspace(0,n_colors,n_colours+1)
norm = colors.BoundaryNorm(bounds, new_cmap.N)

#build array one
array1 = np.random.rand(10,10)

#build array two
array2 = np.random.randint(0,5,100).reshape(10,10)

#mask the array
array2 = ma.masked_array(array2, array2==0)

#plot it
plt.pcolormesh(array1,cmap = plt.cm.binary)
plt.pcolormesh(array2,cmap = new_cmap, norm=norm)
cbar = plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>19890759</id><snippet> while not (opera) == "add" or (opera) == "subtract" or (opera) == "multiply" or (opera) == "divide" or (opera) == "exponent" or (opera) == "remainder":
</snippet></ROW><ROW><id>19890759</id><snippet> while not ((opera) == "add" or (opera) == "subtract" or (opera) == "multiply" or (opera) == "divide" or (opera) == "exponent" or (opera) == "remainder"):
</snippet></ROW><ROW><id>19891103</id><snippet>ToDO</snippet></ROW><ROW><id>19891103</id><snippet>ToDo</snippet></ROW><ROW><id>19891103</id><snippet>from m_todo import ToDO
</snippet></ROW><ROW><id>19891103</id><snippet>class ToDo:
</snippet></ROW><ROW><id>19891161</id><snippet>idx</snippet></ROW><ROW><id>19891161</id><snippet>tuple</snippet></ROW><ROW><id>19891161</id><snippet>&gt;&gt;&gt; C[3,1]
13
&gt;&gt;&gt; C[tuple(idx)]
13
</snippet></ROW><ROW><id>19891161</id><snippet>&gt;&gt;&gt; idx
array([[3, 1],
       [7, 0]])
&gt;&gt;&gt; C[3,1], C[7,0]
(13, 7)
&gt;&gt;&gt; C[tuple(idx.T)]
array([13,  7])
&gt;&gt;&gt; C[idx[:,0], idx[:,1]]
array([13,  7])
</snippet></ROW><ROW><id>19891167</id><snippet>csv</snippet></ROW><ROW><id>19891167</id><snippet>import csv

countries = []
areas = []
populations = []

with open ('data.csv', newline='') as infile:
    reader = csv.DictReader(infile)
    for row in reader:
        countries.append(row['Country'])
        areas.append(row['Area'])
        populations.append(row['Population'])
</snippet></ROW><ROW><id>19891167</id><snippet>DictReader()</snippet></ROW><ROW><id>19891167</id><snippet>import csv

with open ('data.csv', newline='') as infile:
    reader = csv.reader(infile)
    next(reader, None)  # skip the header first
    countries, areas, populations = zip(*reader)
</snippet></ROW><ROW><id>19891241</id><snippet>import pygame
import random
from pygame.locals import *

pygame.init()
screen=pygame.display.set_mode((640,480))
clock=pygame.time.Clock()

px=35
py=35
prect=pygame.Rect(px-10,py-10,20,20)

class Enemy(object):
    def __init__(self,x,y):
        self.x=x
        self.y=y
        self.rad=random.randint(5,10)
        self.rect=pygame.Rect(0,0,0,0)
        self.x_dir = random.choice(('left','right'))
        self.y_dir = random.choice(('up','down'))
    def move(self, mode='chase'):
        if mode=='chase':
            if self.x&gt;px:
                self.x-=1
            elif self.x&lt;px:
                self.x+=1
            if self.y&lt;py:
                self.y+=1
            elif self.y&gt;py:
                self.y-=1
        else: # roam around
            # Move for x direction
            if self.x_dir == 'left':
                if self.x &gt; 1:
                    self.x -= 1
                else:
                    self.x_dir = 'right'
                    self.x += 1
            else:
                if self.x &lt; px - 1:
                    self.x += 1
                else:
                    self.x_dir = 'left'
                    self.x -= 1
            # Now move for y direction
            if self.y_dir == 'up':
                if self.y &gt; 1:
                    self.y -= 1
                else:
                    self.y_dir = 'down'
                    self.y += 1
            else:
                if self.y &lt; py - 1:
                    self.y += 1
                else:
                    self.y_dir = 'up'
                    self.y -= 1


enemies=[Enemy(50,60),Enemy(200,100), Enemy(200,400), Enemy(200,200), Enemy(200,400), Enemy(200,200)]
roam = {} # Dict to track relative roam/chase
roam_count = {} # Dict to track time for which roaming
max_roam = {}
max_chasing = len(enemies) // 3
cur_chasing = 0
for i, enmy in enumerate(enemies):
    if cur_chasing &lt; max_chasing:
        roam[i] = 'chase'
        cur_chasing += 1
    else:
        roam[i] = 'roam'
    roam_count[i] = 0
    max_roam[i] = random.randint(100, 500)

while True:
    screen.fill((200,230,200))
    key=pygame.key.get_pressed()

    if key[K_UP]:
        py-=2
    if key[K_DOWN]:
        py+=2
    if key[K_RIGHT]:
        px+=2
    if key[K_LEFT]:
        px-=2

    for e in pygame.event.get():
        if e.type==QUIT:
            exit()

    prect=pygame.Rect(px-20,py-20,20,20)

    for e_1, enmy in enumerate(enemies):
        pygame.draw.circle(screen, (255,0,0), (enmy.x-enmy.rad,enmy.y-enmy.rad), enmy.rad, 0)
        moved_once = False
        for e_2, enmy2 in enumerate(enemies):
            if enmy2 is not enmy:
                if enmy.rect.colliderect(enmy2.rect):
                    if roam[e_2] == roam[e_1] == 'roam':
                        if cur_chasing &lt; max_chasing:
                            roam[e_1] = 'chase'
                    elif roam[e_2] == roam[e_1] == 'chase':
                        roam[e_2] = 'roam'
                        cur_chasing -= 1
                    if roam[e_1] == 'roam':
                        roam_count[e_1] += 1
                        enmy.move('roam')
                        if roam_count[e_1] &gt; max_roam[e_1]:
                            roam_count[e_1] = 0
                            if cur_chasing &lt; max_chasing:
                                roam[e_1] = 'chase'
                    else:
                        enmy.move('chase')
                else:
                    if not moved_once:
                        if roam[e_1] == 'roam':
                            roam_count[e_1] += 1
                            enmy.move('roam')
                            if roam_count[e_1] &gt; max_roam[e_1]:
                                roam_count[e_1] = 0
                                if cur_chasing &lt; max_chasing:
                                    roam[e_1] = 'chase'
                        else:
                            enmy.move('chase')
                        moved_once = True


        enmy.rect=pygame.Rect(enmy.x-enmy.rad*2,enmy.y-enmy.rad*2,enmy.rad*2,enmy.rad*2)
        pygame.draw.rect(screen, (0,0,255), enmy.rect, 2)

    pygame.draw.circle(screen, (0,0,255), (px-10,py-10), 10, 0)
    pygame.draw.rect(screen, (255,0,0), prect, 2)
    clock.tick(80)
    pygame.display.flip()
</snippet></ROW><ROW><id>19891426</id><snippet>Python 2.7.1 (r271:86832, Jul 31 2011, 19:30:53) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.match("^(?P&lt;x&gt;\d)?(?P&lt;rest&gt;.)", "abc").groupdict()
{'x': None, 'rest': 'a'}
&gt;&gt;&gt; re.match("^(?P&lt;x&gt;\d?)(?P&lt;rest&gt;.)", "abc").groupdict()
{'x': '', 'rest': 'a'}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19891426</id><snippet>(\d?)</snippet></ROW><ROW><id>19891426</id><snippet>(\d)?</snippet></ROW><ROW><id>19891426</id><snippet>None</snippet></ROW><ROW><id>19891465</id><snippet>with open('A') as file1, open('B') as file2:
     L = file1.read().splitlines() 
     L.extend(file2.read().splitlines()) 
L.sort(key=lambda line: int(line.partition(' ')[0])) # sort by 1st column
print("\n".join(L)) # print result
</snippet></ROW><ROW><id>19891465</id><snippet>heapq.merge()</snippet></ROW><ROW><id>19891561</id><snippet>NAME</snippet></ROW><ROW><id>19891561</id><snippet>NAME</snippet></ROW><ROW><id>19891975</id><snippet>if 'Country' in reader.fieldnames:
   ...
</snippet></ROW><ROW><id>19891975</id><snippet>.get</snippet></ROW><ROW><id>19891975</id><snippet>countries.append(row.get('Country'))
</snippet></ROW><ROW><id>19891975</id><snippet>setdefault</snippet></ROW><ROW><id>19891975</id><snippet>row.setdefault('Country', 'Unknown')
</snippet></ROW><ROW><id>19891975</id><snippet>try:
    countries.append(row['Country'])
expect KeyError:
    pass
</snippet></ROW><ROW><id>19891975</id><snippet>if 'Country' in reader.fieldnames:
    countries = [row.get('Country') for row in reader]
</snippet></ROW><ROW><id>19892126</id><snippet>#!/usr/bin/env python2

class ParentMeta(type):
    def __new__(meta, name, bases, dct):
        dct['store'] = dict()
        return super(ParentMeta, meta).__new__(meta, name, bases, dct)

class Parent(object):
    __metaclass__ = ParentMeta

class ChildA(Parent):
    pass

class ChildB(Parent):
   pass

ChildA.store['key1'] = 'val'
ChildB.store['key2'] = 'val'

print ChildB.store['key1'] == ChildA.store['key2']
</snippet></ROW><ROW><id>19892126</id><snippet>Traceback (most recent call last):
  File "test.py", line 20, in &lt;module&gt;
    print ChildB.store['key1'] == ChildA.store['key2']
KeyError: 'key1'
</snippet></ROW><ROW><id>19892146</id><snippet>&gt;&gt;&gt; from networkx.readwrite import json_graph
&gt;&gt;&gt; G = nx.DiGraph([(1,2)])
&gt;&gt;&gt; data = json_graph.tree_data(G,root=1)
</snippet></ROW><ROW><id>19892262</id><snippet>input</snippet></ROW><ROW><id>19892262</id><snippet>menu = input("What would you like to search?: ")
</snippet></ROW><ROW><id>19892262</id><snippet>def main():
    print("Hello and Welcome to the 'Say When' program")

    print("1:Class\n2:Priamry\n3:Secondary\n4:FirstGag\n5:SecondGag")
    menu = input("What would you like to search?: ")
    if menu == '1':
        print("You chose Class")
        list = ['Assault', 'Engineer', 'Support', 'Recon']
        from random import choice
        print(choice(list))

    elif menu == '2':
        print("nice")
</snippet></ROW><ROW><id>19892306</id><snippet>reverse('ding:sign_in')
</snippet></ROW><ROW><id>19892334</id><snippet>&gt;&gt;&gt; def test():
...     for x in xrange(10):
...         res = yield
...         yield res
... 
&gt;&gt;&gt; a = test()
&gt;&gt;&gt; next(a)
&gt;&gt;&gt; next(a)
&gt;&gt;&gt; next(a)
&gt;&gt;&gt; next(a)
&gt;&gt;&gt; a.send(0)
&gt;&gt;&gt; a.send(0)
0
&gt;&gt;&gt; a.send(0)
&gt;&gt;&gt; a.send(0)
0
</snippet></ROW><ROW><id>19892334</id><snippet>send()</snippet></ROW><ROW><id>19892334</id><snippet>def coro():
   print 'before yield'
   a = yield 'the yield value'
   b = yield a
   print 'done!'
 c=coro() # this does not execute the generator, only creates it

 # If you use c.send('a value') here it could _not_ do anything with the value
 # so it raises an TypeError! Remember, the generator was not executed yet,
 # only created, it is like the execution is before the `print 'before yield'`

 # This line could be `c.send(None)` too, the `None` needs to be explicit with
 # the first use of `send()` to show that you know it is the first iteration
 print next(c) # will print 'before yield' then 'the yield value' that was yield

 print c.send('first value sent') # will print 'first value sent'

 # will print 'done!'
 # the string 'the second value sent' is sent but not used and StopIterating will be raised     
 print c.send('the second value sent') 

 print c.send('oops') # raises StopIterating
</snippet></ROW><ROW><id>19892345</id><snippet>http://127.0.0.1:8000/</snippet></ROW><ROW><id>19892345</id><snippet>http://127.0.0.1:8000/admin</snippet></ROW><ROW><id>19892345</id><snippet>update_repos</snippet></ROW><ROW><id>19892389</id><snippet>python manage.py syncdb 
</snippet></ROW><ROW><id>19892389</id><snippet>South</snippet></ROW><ROW><id>19892389</id><snippet>python manage.py migrate
</snippet></ROW><ROW><id>19892392</id><snippet>combobox</snippet></ROW><ROW><id>19892392</id><snippet>combo</snippet></ROW><ROW><id>19892392</id><snippet>QStringListModel</snippet></ROW><ROW><id>19892392</id><snippet>import sys
from PyQt4 import QtGui, QtCore

app = QtGui.QApplication(sys.argv)

combobox = QtGui.QComboBox()

data = []
data.append("one")
model = QtGui.QStringListModel(data, combobox)
combobox.setModel(model)

combobox.show()

sys.exit(app.exec_())
</snippet></ROW><ROW><id>19892587</id><snippet>from collections import OrderedDict
LINES_PER_CYCLE = 1000

with open('output.txt', 'wb') as output, open('test_2.txt', 'rb') as fin:
    fin_line = ''

    # Loop until fin reaches EOF.
    while True:
        cache = OrderedDict()

        # Fill the cache with up to LINES_PER_CYCLE entries.
        for _ in xrange(LINES_PER_CYCLE):
            fin_line = fin.readline()
            if not fin_line:
                break

            key, rest = fin_line.strip().split(' ', 1)
            cache[key] = ['', rest]

        # Loop over the file_1.txt to find tags with given id.    
        with open('test_1.txt', 'rb') as fout:
            for line in fout:
                tag, _ = line.split(' ', 1)
                _, idx = tag.rsplit('_', 1)
                if idx in cache:
                    cache[idx][0] = tag

        # Write matched lines to the output file, in the same order
        # as the lines were inserted into the cache.
        for _, (tag, rest) in cache.iteritems():
            output.write('{} {}\n'.format(tag, rest))

        # If fin has reached EOF, break.    
        if not fin_line:
            break
</snippet></ROW><ROW><id>19892587</id><snippet>LINES_PER_CYCLE</snippet></ROW><ROW><id>19892587</id><snippet>file_2.txt</snippet></ROW><ROW><id>19892587</id><snippet>file_1.txt</snippet></ROW><ROW><id>19892587</id><snippet>file_1.txt</snippet></ROW><ROW><id>19892587</id><snippet>-------</snippet></ROW><ROW><id>19892591</id><snippet>password_changed</snippet></ROW><ROW><id>19892591</id><snippet>from allauth.account.signals import password_changed
from django.dispatch import receiver
from django.contrib import messages

@receiver(password_changed)
def password_change_callback(sender, request, user, **kwargs):
    messages.success(request, 'You have Successfully changed your Password!.')
</snippet></ROW><ROW><id>19892618</id><snippet>return km
</snippet></ROW><ROW><id>19892618</id><snippet>haversine</snippet></ROW><ROW><id>19892618</id><snippet>print haversine(...)</snippet></ROW><ROW><id>19892643</id><snippet>sys.path</snippet></ROW><ROW><id>19892643</id><snippet>PhotoImage(file='0.gif')</snippet></ROW><ROW><id>19892643</id><snippet>    self.status.image=PhotoImage(file='0.gif') #resetting image
</snippet></ROW><ROW><id>19892643</id><snippet>    self.status.image=PhotoImage(file='images/0.gif') #resetting image
</snippet></ROW><ROW><id>19892974</id><snippet>a = 'AUGGCCAUA'
def getSubStrings(RNA, position):
    return [RNA[i:i+3] for i in range(position, len(RNA) - 2, 3)]

print getSubStrings(a, 0)
print getSubStrings(a, 1)
print getSubStrings(a, 2)
</snippet></ROW><ROW><id>19892974</id><snippet>['AUG', 'GCC', 'AUA']
['UGG', 'CCA']
['GGC', 'CAU']
</snippet></ROW><ROW><id>19892974</id><snippet>range(position, len(RNA) - 2, 3)</snippet></ROW><ROW><id>19892974</id><snippet>position</snippet></ROW><ROW><id>19892974</id><snippet>print range(1, 8, 3)
</snippet></ROW><ROW><id>19892974</id><snippet>1</snippet></ROW><ROW><id>19892974</id><snippet>8</snippet></ROW><ROW><id>19892974</id><snippet>3</snippet></ROW><ROW><id>19892974</id><snippet>[1, 4, 7]
</snippet></ROW><ROW><id>19892974</id><snippet>[RNA[i:i+3] for i in range(position, len(RNA) - 2, 3)]
</snippet></ROW><ROW><id>19893052</id><snippet>from subprocess import Popen, PIPE

fw = open("tmpout", "wb")
fr = open("tmpout", "r")
p = Popen("./a.out", stdin = PIPE, stdout = fw, stderr = fw, bufsize = 1)
p.stdin.write("1\n")
out = fr.read()
p.stdin.write("5\n")
out = fr.read()
fw.close()
fr.close()
</snippet></ROW><ROW><id>19893052</id><snippet>from subprocess import Popen, PIPE  
def setNonBlocking(fd):
    """
    Set the file description of the given file descriptor to non-blocking.
    """
    flags = fcntl.fcntl(fd, fcntl.F_GETFL)
    flags = flags | os.O_NONBLOCK
    fcntl.fcntl(fd, fcntl.F_SETFL, flags)

p = Popen("./a.out", stdin = PIPE, stdout = PIPE, stderr = PIPE, bufsize = 1)
setNonBlocking(p.stdout)
setNonBlocking(p.stderr)

p.stdin.write("1\n")
while True:
    try:
        out1 = p.stdout.read()
    except IOError:
        continue
    else:
        break
out1 = p.stdout.read()
p.stdin.write("5\n")
while True:
    try:
        out2 = p.stdout.read()
    except IOError:
        continue
    else:
        break
</snippet></ROW><ROW><id>19893165</id><snippet>words = ['first', 'second', 'third', 'fourth', 'fifth']
dialogs = ["Please enter your {0} test score: ".format(word) for word in words]

def getinput(i)
    num = int(input(dialogs[i]))
    while num &lt; 0 or num &gt; 100:
        print ('Error--- The number musy be at least 0 and not more than 100.')
        num = int(input(dialogs[i]))
    return num
</snippet></ROW><ROW><id>19893178</id><snippet>df.index.dtype</snippet></ROW><ROW><id>19893178</id><snippet>df.index = pd.to_datetime(df.index)
</snippet></ROW><ROW><id>19893295</id><snippet>xtable.xtable()</snippet></ROW><ROW><id>19893295</id><snippet>stargazer.stargazer()</snippet></ROW><ROW><id>19893551</id><snippet>defaultdict</snippet></ROW><ROW><id>19893551</id><snippet>from collections import defaultdict
d = defaultdict(list)
for fname in fnames:
    date = fname[0:8] 
    d[date].append(fname)
</snippet></ROW><ROW><id>19893551</id><snippet>itertools.combinations</snippet></ROW><ROW><id>19893551</id><snippet>from itertools import combinations
for f in d.values():
    for f1, f2 in combinations(f, 2):
        #call your function and pass f1, f2
</snippet></ROW><ROW><id>19893551</id><snippet>D = {}
fnames = os.listdir(".")
for fname in fnames:
    print(fname)
    date = fname[0:8]
    if date not in D:
        D[date] = []
    D[date].append(fname)
    #or use: `D.setdefault(date, []).append(fname)`
</snippet></ROW><ROW><id>19893551</id><snippet>itertools.combinations</snippet></ROW><ROW><id>19893700</id><snippet>sudo pip uninstall facebook
sudo pip uninstall facebook-sdk
sudo pip install facebook-sdk
</snippet></ROW><ROW><id>19893700</id><snippet>facebook</snippet></ROW><ROW><id>19893700</id><snippet>facebook-sdk</snippet></ROW><ROW><id>19893700</id><snippet>facebook-sdk</snippet></ROW><ROW><id>19893700</id><snippet>facebook</snippet></ROW><ROW><id>19893700</id><snippet>facebook-sdk</snippet></ROW><ROW><id>19894004</id><snippet>**</snippet></ROW><ROW><id>19894004</id><snippet>kwargs = {'membership__is_tech': True}
ms_tech = microsoft.filter(**kwargs)
</snippet></ROW><ROW><id>19894004</id><snippet>objects</snippet></ROW><ROW><id>19894004</id><snippet>microsoft</snippet></ROW><ROW><id>19894047</id><snippet>django.forms</snippet></ROW><ROW><id>19894047</id><snippet>from django.shortcuts import render_to_response, redirect 
from myApp.models import MyModel

def editForm(request, model_pk):
    model = MyModel.objects.get(pk=model_pk)
    return render_to_response('formUpdate.html',{ 'model' : model })

def updateForm(request, model_pk):
    model = MyModel.objects.get(pk=model_pk)
    model.firstname = request.POST['firstname']
    model.lastname = request.POST['lastname']
    model.save()
    return redirect('home', message='your name has been updated')
</snippet></ROW><ROW><id>19894047</id><snippet>{% extends "base.html" %}

{% block content %}
&lt;form action="/updateForm/{{ model.id }}/" method="post"&gt;
First name: &lt;input type="text" name="firstname" value="{{ model.firstname }}" /&gt;&lt;br /&gt;
Last name: &lt;input type="text" name="lastname" value="{{ model.lastname }}" /&gt;&lt;br /&gt;
&lt;input type="submit" value="submit" /&gt;
&lt;/form&gt;
{% end block %}
</snippet></ROW><ROW><id>19894047</id><snippet>from django.db import models

class MyModel(models.Model):
    firstname = models.CharField(max_length=20)
    lastname = models.CharField(max_length=20)
</snippet></ROW><ROW><id>19894047</id><snippet>from django.conf.urls.defaults import *

urlpatterns = patterns('',
    (r'^$', 'views.home', name="home"),
    (r'^editForm/(?P&lt;model_pk&gt;\d+)/$', 'views.editForm'),
    (r'^updateForm/(?P&lt;model_pk&gt;\d+)/$', 'views.updateForm'),
)
</snippet></ROW><ROW><id>19894047</id><snippet>model</snippet></ROW><ROW><id>19894047</id><snippet>id</snippet></ROW><ROW><id>19894047</id><snippet>pk</snippet></ROW><ROW><id>19894047</id><snippet>POST</snippet></ROW><ROW><id>19894047</id><snippet>django.forms</snippet></ROW><ROW><id>19894047</id><snippet>form</snippet></ROW><ROW><id>19894047</id><snippet>django.forms</snippet></ROW><ROW><id>19894192</id><snippet>mainwindow</snippet></ROW><ROW><id>19894192</id><snippet>self.settings</snippet></ROW><ROW><id>19894192</id><snippet>self.settings = settingsArgs()</snippet></ROW><ROW><id>19894192</id><snippet>def settings(self):</snippet></ROW><ROW><id>19894192</id><snippet>newsettings</snippet></ROW><ROW><id>19894192</id><snippet>def newsetting(self):</snippet></ROW><ROW><id>19894192</id><snippet>self.settingsBtn = tk.Button(self.frame, text = 'Settings', width = 25, command = self.newsetting)</snippet></ROW><ROW><id>19894233</id><snippet>import urllib2
import bs4 as bs
import re
import urlparse

url = 'http://www.tesco.com/groceries/SpecialOffers/SpecialOfferDetail/Default.aspx?promoId=A31033985'

response = urllib2.urlopen(url)
content = response.read()
# with open('/tmp/test.html', 'w') as f:
#     f.write(content)
# Useful for debugging off-line:
# with open('/tmp/test.html', 'r') as f:
#     content = f.read()
soup = bs.BeautifulSoup(content)
barcodes = set()
for tag in soup.find_all('img', {'src': re.compile(r'/pi/')}):
    href = tag['src']
    scheme, netloc, path, query, fragment = urlparse.urlsplit(href)
    barcodes.add(path.split('\\')[1])

print(barcodes)
</snippet></ROW><ROW><id>19894233</id><snippet>set(['0000003222737', '0000010039670', '0000010036297', '0000010008393', '0000003050453', '0000010062951', '0000003239438', '0000010078402', '0000010016312', '0000003235676', '0000003203132'])
</snippet></ROW><ROW><id>19894288</id><snippet>obj = MyGroup.objects.get(id=...)
</snippet></ROW><ROW><id>19894288</id><snippet>date_begin = obj.date_begin
date_end = obj.date_end
</snippet></ROW><ROW><id>19894459</id><snippet>import wx
import sys
from wx import glcanvas
from OpenGL.GL import *
from OpenGL.GLUT import *

from numpy import arange, sin, pi
import matplotlib
matplotlib.use('WXAgg')

from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas
from matplotlib.backends.backend_wx import NavigationToolbar2Wx
from matplotlib.figure import Figure

class CanvasPanel(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        self.figure = Figure()
        self.axes = self.figure.add_subplot(111)
        self.canvas = FigureCanvas(self, -1, self.figure)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.GROW)
        self.SetSizer(self.sizer)
        self.Fit()

    def draw(self):
        t = arange(0.0, 3.0, 0.01)
        s = sin(2 * pi * t)
        self.axes.plot(t, s)

class MyCanvasBase(glcanvas.GLCanvas):
    def __init__(self, parent):
        glcanvas.GLCanvas.__init__(self, parent, -1)
        self.init = False
        self.context = glcanvas.GLContext(self)

        # initial mouse position
        self.lastx = self.x = 30
        self.lasty = self.y = 30
        self.size = None
        self.Bind(wx.EVT_ERASE_BACKGROUND, self.OnEraseBackground)
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.Bind(wx.EVT_LEFT_DOWN, self.OnMouseDown)
        self.Bind(wx.EVT_LEFT_UP, self.OnMouseUp)
        self.Bind(wx.EVT_MOTION, self.OnMouseMotion)

    def OnEraseBackground(self, event):
        pass # Do nothing, to avoid flashing on MSW.

    def OnSize(self, event):
        wx.CallAfter(self.DoSetViewport)
        event.Skip()

    def DoSetViewport(self):
        size = self.size = self.GetClientSize()
        self.SetCurrent(self.context)
        glViewport(0, 0, size.width, size.height)

    def OnPaint(self, event):
        dc = wx.PaintDC(self)
        self.SetCurrent(self.context)
        if not self.init:
            self.InitGL()
            self.init = True
        self.OnDraw()

    def OnMouseDown(self, evt):
        self.CaptureMouse()
        self.x, self.y = self.lastx, self.lasty = evt.GetPosition()

    def OnMouseUp(self, evt):
        self.ReleaseMouse()

    def OnMouseMotion(self, evt):
        if evt.Dragging() and evt.LeftIsDown():
            self.lastx, self.lasty = self.x, self.y
            self.x, self.y = evt.GetPosition()
            self.Refresh(False)

class CubeCanvas(MyCanvasBase):
    def InitGL(self):
        # set viewing projection
        glMatrixMode(GL_PROJECTION)
        glFrustum(-0.5, 0.5, -0.5, 0.5, 1.0, 3.0)

        # position viewer
        glMatrixMode(GL_MODELVIEW)
        glTranslatef(0.0, 0.0, -2.0)

        # position object
        glRotatef(self.y, 1.0, 0.0, 0.0)
        glRotatef(self.x, 0.0, 1.0, 0.0)

        glEnable(GL_DEPTH_TEST)
        glEnable(GL_LIGHTING)
        glEnable(GL_LIGHT0)

    def OnDraw(self):
        # clear color and depth buffers
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

        # draw six faces of a cube
        glBegin(GL_QUADS)
        glNormal3f( 0.0, 0.0, 1.0)
        glVertex3f( 0.5, 0.5, 0.5)
        glVertex3f(-0.5, 0.5, 0.5)
        glVertex3f(-0.5,-0.5, 0.5)
        glVertex3f( 0.5,-0.5, 0.5)

        glNormal3f( 0.0, 0.0,-1.0)
        glVertex3f(-0.5,-0.5,-0.5)
        glVertex3f(-0.5, 0.5,-0.5)
        glVertex3f( 0.5, 0.5,-0.5)
        glVertex3f( 0.5,-0.5,-0.5)

        glNormal3f( 0.0, 1.0, 0.0)
        glVertex3f( 0.5, 0.5, 0.5)
        glVertex3f( 0.5, 0.5,-0.5)
        glVertex3f(-0.5, 0.5,-0.5)
        glVertex3f(-0.5, 0.5, 0.5)

        glNormal3f( 0.0,-1.0, 0.0)
        glVertex3f(-0.5,-0.5,-0.5)
        glVertex3f( 0.5,-0.5,-0.5)
        glVertex3f( 0.5,-0.5, 0.5)
        glVertex3f(-0.5,-0.5, 0.5)

        glNormal3f( 1.0, 0.0, 0.0)
        glVertex3f( 0.5, 0.5, 0.5)
        glVertex3f( 0.5,-0.5, 0.5)
        glVertex3f( 0.5,-0.5,-0.5)
        glVertex3f( 0.5, 0.5,-0.5)

        glNormal3f(-1.0, 0.0, 0.0)
        glVertex3f(-0.5,-0.5,-0.5)
        glVertex3f(-0.5,-0.5, 0.5)
        glVertex3f(-0.5, 0.5, 0.5)
        glVertex3f(-0.5, 0.5,-0.5)
        glEnd()

        if self.size is None:
            self.size = self.GetClientSize()
        w, h = self.size
        w = max(w, 1.0)
        h = max(h, 1.0)
        xScale = 180.0 / w
        yScale = 180.0 / h
        glRotatef((self.y - self.lasty) * yScale, 1.0, 0.0, 0.0);
        glRotatef((self.x - self.lastx) * xScale, 0.0, 1.0, 0.0);

        self.SwapBuffers()

#----------------------------------------------------------------------
class RunDemoApp(wx.App):
    def __init__(self):
        wx.App.__init__(self, redirect=False)

    def OnInit(self):
        canvasClass = eval('CubeCanvas')

        cx = 0

        frame = wx.Frame(None, -1, 'CubeCanvas', size=(400,400), pos=(cx,400))

        # adding panel with sizer for both canvas
        panel = wx.Panel(frame, -1)

        self.sizer = wx.BoxSizer(wx.HORIZONTAL)

        # adding first canvas
        canvas1 = canvasClass(panel) # CubeCanvas(frame) or ConeCanvas(frame); frame passed to         MyCanvasBase
        self.sizer.Add(canvas1, 1, wx.LEFT | wx.TOP | wx.GROW)

        # adding second canvas
        self.canvas = CanvasPanel(panel)
        self.sizer.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.GROW)

        panel.SetSizer(self.sizer)
        panel.Fit()

        frame.Show(True)

        self.frame = frame
        return True

    def OnExitApp(self, evt):
        self.frame.Close(True)

    def OnCloseFrame(self, evt):
        if hasattr(self, "window") and hasattr(self.window, "ShutdownDemo"):
            self.window.ShutdownDemo()
        evt.Skip()

app = RunDemoApp()
app.MainLoop()
</snippet></ROW><ROW><id>19894589</id><snippet>re.split('\W+', 'Words, words, words.')
</snippet></ROW><ROW><id>19894643</id><snippet>g++ testing.cpp -I/usr/include/python3.3m -I/usr/include/boost -lboost_python3 -lpython3.3m -o testing.so -shared -fPIC
</snippet></ROW><ROW><id>19894643</id><snippet>cmake_minimum_required(VERSION 2.6)


find_package(Boost 1.54 EXACT REQUIRED COMPONENTS python3)

INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS} "/usr/include/python3.3m/" )
find_package(PythonLibs)
ADD_LIBRARY(testing SHARED testing.cpp)
TARGET_LINK_LIBRARIES(testing ${Boost_LIBRARIES} ${PythonLibs_LIBRARIES})
</snippet></ROW><ROW><id>19894698</id><snippet>UP, DOWN, LEFT, RIGHT = 'up', 'down', 'left', 'right'

def shift(direction, number, matrix):
    ''' shift given 2D matrix in-place the given number of rows or columns
        in the specified (UP, DOWN, LEFT, RIGHT) direction and return it
    '''
    if direction in (UP, DOWN):
        n =  (number % len(matrix) if direction == UP else
            -(number % len(matrix)))
        h = matrix[:n]
        del matrix[:n]
        matrix.extend(h)
        return matrix
    elif direction in (LEFT, RIGHT):
        n =  (number % len(matrix[0]) if direction == LEFT else
            -(number % len(matrix[0])))
        temp = zip(*matrix)
        h = temp[:n]
        del temp[:n]
        temp.extend(h)
        matrix[:] = map(list, zip(*temp))
        return matrix
    else:
        return matrix

if __name__ == '__main__':
    def print_shifted_matrix(direction, number, matrix):
        print(direction + ': ' + (10-2-len(direction))*' ' +
              ('\n' + 10*' ').join(str(row)
                                  for row in shift(direction, number, matrix)))
        print

    matrix1 = [[1, 2, 3, 4],
               [5, 6, 7, 8],
               [9, 10, 11, 12]]

    matrix2 = [[1, 2, 3],
               [4, 5, 6],
               [7, 8, 9],
               [10, 11, 12]]

    for matrix in matrix1, matrix2:
        print_shifted_matrix('original', 0, matrix)
        print_shifted_matrix(UP, 1, matrix)
        print_shifted_matrix(DOWN, 1, matrix)
        print_shifted_matrix(LEFT, 1, matrix)
        print_shifted_matrix(RIGHT, 1, matrix)
</snippet></ROW><ROW><id>19894698</id><snippet>original: [1, 2, 3, 4]
          [5, 6, 7, 8]
          [9, 10, 11, 12]

up:       [5, 6, 7, 8]
          [9, 10, 11, 12]
          [1, 2, 3, 4]

down:     [1, 2, 3, 4]
          [5, 6, 7, 8]
          [9, 10, 11, 12]

left:     [2, 3, 4, 1]
          [6, 7, 8, 5]
          [10, 11, 12, 9]

right:    [1, 2, 3, 4]
          [5, 6, 7, 8]
          [9, 10, 11, 12]

original: [1, 2, 3]
          [4, 5, 6]
          [7, 8, 9]
          [10, 11, 12]

up:       [4, 5, 6]
          [7, 8, 9]
          [10, 11, 12]
          [1, 2, 3]

down:     [1, 2, 3]
          [4, 5, 6]
          [7, 8, 9]
          [10, 11, 12]

left:     [2, 3, 1]
          [5, 6, 4]
          [8, 9, 7]
          [11, 12, 10]

right:    [1, 2, 3]
          [4, 5, 6]
          [7, 8, 9]
          [10, 11, 12]
</snippet></ROW><ROW><id>19894728</id><snippet>zip</snippet></ROW><ROW><id>19894728</id><snippet>for a, b, c in zip(a_list, b_list, c_list):
   pass
</snippet></ROW><ROW><id>19894728</id><snippet>for lis in (a_list, b_list, c_list):
    a, b, c = lis  #assign the items of list fetched from the `tuple` to a, b ,c
</snippet></ROW><ROW><id>19894834</id><snippet>&gt;&gt;&gt; l = ["rock", "sand", "dirt"]
&gt;&gt;&gt; l[1] = "grass"
&gt;&gt;&gt; l
['rock', 'grass', 'dirt']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19894834</id><snippet>list[index] = value</snippet></ROW><ROW><id>19895260</id><snippet>from string import ascii_uppercase as uppercase

replacement_set = uppercase[13:] + uppercase[:13]
</snippet></ROW><ROW><id>19895260</id><snippet>uppercase[:13]</snippet></ROW><ROW><id>19895273</id><snippet>m = s.apply(lambda x: x.month)
m.hist()
</snippet></ROW><ROW><id>19895273</id><snippet>m = s.apply(lambda x: x.strftime('%b %Y'))
</snippet></ROW><ROW><id>19895300</id><snippet>&gt;&gt;&gt; sys.getsizeof(list.append)
72   # built-in
&gt;&gt;&gt; sys.getsizeof(dir)
72   # built-in
&gt;&gt;&gt; sys.getsizeof(A.__init__)
80   # class/instance method
&gt;&gt;&gt; sys.getsizeof(lambda x: x)
120  # static function
</snippet></ROW><ROW><id>19895300</id><snippet>classmethod</snippet></ROW><ROW><id>19895300</id><snippet>classmethod_descriptor</snippet></ROW><ROW><id>19895300</id><snippet>&gt;&gt;&gt; type(float.__dict__['fromhex'])
&lt;type 'classmethod_descriptor'&gt;
</snippet></ROW><ROW><id>19895300</id><snippet>&gt;&gt;&gt; type(A.__init__)
&lt;type 'wrapper_descriptor'&gt;
&gt;&gt;&gt; type(A.__dict__['__dict__'])
&lt;type 'getset_descriptor'&gt;
</snippet></ROW><ROW><id>19895300</id><snippet>Foo.__init__</snippet></ROW><ROW><id>19895300</id><snippet>__dict__.__dict__</snippet></ROW><ROW><id>19895456</id><snippet>datetime</snippet></ROW><ROW><id>19895456</id><snippet>from datetime import datetime
import csv
import time
with open('abc1') as f:
    reader = csv.reader(f, delimiter=',')
    for line in reader:
        pass
    class_name = ''.join(line[:2]) #save the name on last line
    print class_name
    f.seek(0)           # Rest the file pointer t o the start of the file
    for line in reader:
        cls_name = ''.join(line[:2])
        if cls_name == class_name:
            if line[-2]:
                current_dtime = datetime.now()
                fetched_time = datetime.strptime(line[2], '%H:%M')
                fetched_time = datetime(year=current_dtime.year,
                                        month = current_dtime.month,
                                        day = current_dtime.day,
                                        hour = fetched_time.hour,
                                        minute = fetched_time.minute
                                        )
                if ((current_dtime - fetched_time).seconds/ 60.0) &gt; 30.0:
                    print "late"
</snippet></ROW><ROW><id>19895465</id><snippet>name</snippet></ROW><ROW><id>19895465</id><snippet>def __init__(self, name):
    self.name = name

myObjectClass = myClass("myObjectClass")
</snippet></ROW><ROW><id>19895509</id><snippet>&gt;&gt;&gt; '{:05}'.format(10)
00010
</snippet></ROW><ROW><id>19895509</id><snippet>import os

# List all files in current directory
files = os.listdir('.')
recent_images = sorted(files)[-5:]
</snippet></ROW><ROW><id>19895607</id><snippet>import daemon   
import threading
import another_file

def problematic_func_loop():
    another_file.peoblematic_func()
    t = threading.Timer(60.0, problematic_func_loop).start()

def run():
    with daemon.DaemonContext():
        problematic_func_loop()

if __name__ == "__main__":
    run()
</snippet></ROW><ROW><id>19895759</id><snippet>xcode-select --install
</snippet></ROW><ROW><id>19895875</id><snippet>heapq.heappush(probs,f)
</snippet></ROW><ROW><id>19895875</id><snippet>f</snippet></ROW><ROW><id>19895875</id><snippet>InternalNode</snippet></ROW><ROW><id>19895875</id><snippet>InternalNode</snippet></ROW><ROW><id>19895875</id><snippet>__cmp__</snippet></ROW><ROW><id>19895875</id><snippet>    def __cmp__(a, b):
        return cmp(a.prob, b.prob)
</snippet></ROW><ROW><id>19895875</id><snippet>LeafNode</snippet></ROW><ROW><id>19895875</id><snippet>__cmp__</snippet></ROW><ROW><id>19895913</id><snippet>self</snippet></ROW><ROW><id>19895913</id><snippet>def cat_chase(self):
    ...

def dog_chase(self):
    ...
</snippet></ROW><ROW><id>19895913</id><snippet>obj.cat_chase()
</snippet></ROW><ROW><id>19895973</id><snippet>from Tkinter import *

main = Tk()

def leftKey(event):
    print "Left key pressed"

def rightKey(event):
    print "Right key pressed"

frame = Frame(main, width=100, height=100)
main.bind('&lt;Left&gt;', leftKey)
main.bind('&lt;Right&gt;', rightKey)
frame.pack()
main.mainloop()
</snippet></ROW><ROW><id>19895973</id><snippet>from Tkinter import *

main = Tk()

def leftKey(event):
    print "Left key pressed"

def rightKey(event):
    print "Right key pressed"

frame = Frame(main, width=100, height=100)
frame.bind('&lt;Left&gt;', leftKey)
frame.bind('&lt;Right&gt;', rightKey)
frame.focus_set()
frame.pack()
main.mainloop()
</snippet></ROW><ROW><id>19895973</id><snippet>Tkinter.Frame</snippet></ROW><ROW><id>19895973</id><snippet>import Tkinter


class Application(Tkinter.Frame):
    def __init__(self, master):
        Tkinter.Frame.__init__(self, master)
        self.master.minsize(width=100, height=100)
        self.master.config()

        self.master.bind('&lt;Left&gt;', self.left_key)
        self.master.bind('&lt;Right&gt;', self.right_key)

        self.main_frame = Tkinter.Frame()
        self.main_frame.pack(fill='both', expand=True)
        self.pack()

    @staticmethod
    def left_key(event):
        print event + " key pressed"

    @staticmethod
    def right_key(event):
        print event + " key pressed"

root = Tkinter.Tk()
app = Application(root)
app.mainloop()
</snippet></ROW><ROW><id>19896049</id><snippet>print</snippet></ROW><ROW><id>19896049</id><snippet>tkMessageBox</snippet></ROW><ROW><id>19896049</id><snippet>#!/usr/bin/env python

from Tkinter import *
import tkMessageBox
import ttk

#---------------------------------------------------------------------
class MyTab(Frame):

    def __init__(self, root, name):
        Frame.__init__(self, root)

        self.root = root
        self.name = name

        self.entry = Entry(self)
        self.entry.pack(side=TOP)

        self.entry.bind('&lt;FocusOut&gt;', self.alert)
        self.entry.bind('&lt;Key&gt;', self.printing)

    #-------------------------------

    def alert(self, event):
        print 'FocusOut event is working for ' + self.name + '  value: ' + self.entry.get()
        #tkMessageBox.showinfo('alert', 'FocusOut event is working for ' + self.name + '  value: ' + self.entry.get())

    #-------------------------------

    def printing(self, event):
        print event.keysym + ' for ' + self.name

#---------------------------------------------------------------------

class Application():

    def __init__(self):

        self.tabs = {'ky':1} 

        self.root = Tk()
        self.root.minsize(300, 300)
        self.root.geometry("1000x700")

        self.notebook = ttk.Notebook(self.root, width=1000, height=650)

#       self.all_tabs = []

        self.addTab('tab1')

        self.button = Button(self.root, text='generate', command=self.start_generating).pack(side=BOTTOM)

        self.notebook.pack(side=TOP)

    #-------------------------------

    def addTab(self, name):
        tab = MyTab(self.notebook, name)
        self.notebook.add(tab, text=name)
#       self.all_tabs.append(tab)

    #-------------------------------

    def start_generating(self):
        if self.tabs['ky'] &lt; 4:
            self.tabs['ky'] += 1
            self.addTab('tab'+ str(self.tabs['ky'])) 

    #-------------------------------

    def run(self):
        self.root.mainloop()

#----------------------------------------------------------------------

Application().run()     
</snippet></ROW><ROW><id>19896055</id><snippet>double_consonants = [2*c for c in 'bcdfghjklmnpqrstvwxz']

for word in raw:
    for d_c in double_consonants:
        if d_c in word:
            # You should be able to finish this bit yourself
</snippet></ROW><ROW><id>19896055</id><snippet>&gt;&gt; s = "I am going to apply for a job".split('pp')
</snippet></ROW><ROW><id>19896100</id><snippet>def my_forumla():
</snippet></ROW><ROW><id>19896100</id><snippet>def my_formula():
</snippet></ROW><ROW><id>19896100</id><snippet>u</snippet></ROW><ROW><id>19896100</id><snippet>m</snippet></ROW><ROW><id>19896100</id><snippet>ma_formula</snippet></ROW><ROW><id>19896100</id><snippet>a</snippet></ROW><ROW><id>19896100</id><snippet>y</snippet></ROW><ROW><id>19896100</id><snippet>answer</snippet></ROW><ROW><id>19896100</id><snippet>my_formula()</snippet></ROW><ROW><id>19896100</id><snippet>return</snippet></ROW><ROW><id>19896100</id><snippet>a</snippet></ROW><ROW><id>19896100</id><snippet>b</snippet></ROW><ROW><id>19896100</id><snippet>c</snippet></ROW><ROW><id>19896100</id><snippet>def my_forumla(a, b, c):
    return a * b * c;

answer = my_formula(a, b, c)
print(answer)
</snippet></ROW><ROW><id>19896198</id><snippet>def dataExtractor():
    return somevalue

def calc(value):
    pass # do something with value

calc(dataExtractor())
</snippet></ROW><ROW><id>19896198</id><snippet>class DataCalc(object):
    def dataExtractor(self):
        self.value = somevalue

    def calc(value):
        return self.value*2    
calc = DataCalc()
calc.dataExtractor()
calc.calc()
</snippet></ROW><ROW><id>19896297</id><snippet>def r(l, depth=0, ret=[]):
    if isinstance(l,list):
        for i in l:
            r(i, depth+1)
    else:
        ret.append('*' * depth + str(l))
    return ret

print '\n'.join(r([2, 4, [[3, 8], 1]]))
</snippet></ROW><ROW><id>19896297</id><snippet>*2
*4
***3
***8
**1
</snippet></ROW><ROW><id>19896350</id><snippet># Background Setup</snippet></ROW><ROW><id>19896350</id><snippet>while True:
    for event in pygame.event.get():
        if event.type == QUIT:
            pygame.quit()
            sys.exit()
        # Change the keyboard variables
        if event.type == KEYDOWN:
            if event.key == K_LEFT or event.key == ord('a'):
                moveLEFT = True
            elif event.key == K_RIGHT or event.key == ord('d'):
                moveRIGHT = True
            elif event.key == K_UP or event.key == ord('w'):
                moveUP = True
            elif event.key == K_DOWN or event.key == ord('s'):
                moveDOWN = True
        elif event.type == KEYUP:
            if event.key == K_ESCAPE:
                pygame.quit()
                sys.exit()
            elif event.key == K_LEFT or event.key == ord('a'):
                moveLEFT = False
            elif event.key == K_RIGHT or event.key == ord('d'):
                moveRIGHT = False
            elif event.key == K_UP or event.key == ord ('w'):
                moveUP = False
            elif event.key == K_DOWN or event.key == ord('s'):
                moveDOWN = False

         # &lt;-- Dedent

    # Background Setup
    windowSurface.fill(WHITE)
    # Player Setup + Updating Screen
    if moveDOWN and player.bottom &lt; WINDOWHEIGHT:
        player.top += MOVESPEED
    if moveUP and player.top &gt; 0:
        player.top-= MOVESPEED
    if moveLEFT and player.left &gt; 0:
        player.left -= MOVESPEED
    if moveRIGHT and player.right &lt; WINDOWWIDTH:
        player.right += MOVESPEED
    pygame.draw.rect(windowSurface, GREEN, player)
    pygame.display.update()
    mainClock.tick(40)
</snippet></ROW><ROW><id>19896636</id><snippet>for keywordurl in open("textfile.txt").readlines():
    self.br.execute_script( "document.getElementById('ctl00_phMainContent_KeywordForm_ControlPanel_txtKeywords').value = '%s';" % keywordurl )
</snippet></ROW><ROW><id>19896636</id><snippet>%s</snippet></ROW><ROW><id>19896636</id><snippet>%</snippet></ROW><ROW><id>19896653</id><snippet>&lt;textarea&gt;</snippet></ROW><ROW><id>19896653</id><snippet>&lt;textarea&gt;</snippet></ROW><ROW><id>19896653</id><snippet> document.getElementById("ctl00_phMainContent_KeywordForm_ControlPanel_txtKeywords").value = "Foobar"
</snippet></ROW><ROW><id>19896656</id><snippet>def (\S+)\([^\.]*?\)</snippet></ROW><ROW><id>19896656</id><snippet>?</snippet></ROW><ROW><id>19896785</id><snippet>display_digit</snippet></ROW><ROW><id>19896785</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.strftime("%H%M%S")
'105404'
&gt;&gt;&gt; for d in time.strftime("%H%M%S"):
...     display_digit(int(d))
... 
</snippet></ROW><ROW><id>19896911</id><snippet>root.destroy()</snippet></ROW><ROW><id>19896911</id><snippet>except</snippet></ROW><ROW><id>19896911</id><snippet>selectedAsk = DoubleVar(); selectedAsk.set(mtGoxUSDask)</snippet></ROW><ROW><id>19896911</id><snippet>label</snippet></ROW><ROW><id>19897133</id><snippet>GetFirstVisibleLine()</snippet></ROW><ROW><id>19897133</id><snippet>LinesOnScreen()</snippet></ROW><ROW><id>19897133</id><snippet>GetLine(line)</snippet></ROW><ROW><id>19897145</id><snippet>for pattern in patterns:
    for kmer in kmers:
        mism_counter=0
        for j in range(0,k):
            if kmer[j] != pattern[j] : 
                mism_counter+=1
                if mism_counter &gt; misn:
                    break
        else:
            if pattern in frequent:
                frequent[pattern] += 1
            else:
                frequent[pattern] = 1
</snippet></ROW><ROW><id>19897681</id><snippet>500 MLSD not understood</snippet></ROW><ROW><id>19897681</id><snippet>nlst()</snippet></ROW><ROW><id>19897765</id><snippet>homework = Work(title = "homework", amount = 12, drop = 15)
homework.save()
</snippet></ROW><ROW><id>19897765</id><snippet>def attributes(self, pk='', title='', amount=''):
    ...    
</snippet></ROW><ROW><id>19897765</id><snippet>def attributes(self, **kwargs):
    ...
</snippet></ROW><ROW><id>19897782</id><snippet>import re

text = 'blhpxxxx [SCRIPT MODE]&gt; show syslog server 1 Retrieving syslog server (s) ... &lt;EVENT SEVERITY = "Repaired" /&gt; '

print(re.search("\&lt;.*\&gt;", text).group())
</snippet></ROW><ROW><id>19898009</id><snippet>%</snippet></ROW><ROW><id>19898009</id><snippet>DATE_FORMAT()</snippet></ROW><ROW><id>19898009</id><snippet>DATE_FORMAT()</snippet></ROW><ROW><id>19898009</id><snippet>VALUES(...)</snippet></ROW><ROW><id>19898009</id><snippet>sql = """INSERT INTO tbl_celebrants(id, name, birthday, address)
VALUES(%s , %s, DATE_FORMAT(%s,'%%m/%%d/%%Y'), %s)"""
</snippet></ROW><ROW><id>19898032</id><snippet>from itertools import islice
with open ('data.csv','r') as infile:
    x = islice(infile, 2, None, 3)
    for line in x:
            print line
</snippet></ROW><ROW><id>19898182</id><snippet>return ''
</snippet></ROW><ROW><id>19898295</id><snippet>p1</snippet></ROW><ROW><id>19898295</id><snippet>matplot</snippet></ROW><ROW><id>19898295</id><snippet>TestFrame</snippet></ROW><ROW><id>19898295</id><snippet>import wx
import numpy 
import matplotlib

from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas

class TestFrame(wx.Frame):
    def __init__(self,parent,title):
        wx.Frame.__init__(self,parent,title=title,size=(500,500))
        self.sp = wx.SplitterWindow(self)
        self.p1 = wx.Panel(self.sp, style=wx.SUNKEN_BORDER)
        self.p2 = MatplotPanel(self.sp)
        self.sp.SplitVertically(self.p1,self.p2,100)
        self.statusbar = self.CreateStatusBar()
        self.statusbar.SetStatusText('Oi')

class MatplotPanel(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent,-1,size=(50,50))

        self.figure = Figure()
        self.axes = self.figure.add_subplot(111)
        t = numpy.arange(0.0,10,1.0)
        s = [0,1,0,1,0,2,1,2,1,0]
        self.y_max = 1.0
        self.axes.plot(t,s)
        self.canvas = FigureCanvas(self,-1,self.figure)

app = wx.App(redirect=False)
frame = TestFrame(None, 'Hello World!')
frame.Show()
app.MainLoop()
</snippet></ROW><ROW><id>19898295</id><snippet>MatplotPanel</snippet></ROW><ROW><id>19898295</id><snippet>NavigationToolbar</snippet></ROW><ROW><id>19898295</id><snippet>wx.Button</snippet></ROW><ROW><id>19898295</id><snippet>from matplotlib.backends.backend_wxagg import NavigationToolbar2Wx as NavigationToolbar

class MatplotPanel(wx.Panel):

    def __init__(self, parent):     
        wx.Panel.__init__(self, parent,-1,size=(50,50))

        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(self.sizer)

        self.figure = Figure()
        self.axes = self.figure.add_subplot(111)
        self.canvas = FigureCanvas(self, -1, self.figure)
        self.toolbar = NavigationToolbar(self.canvas)

        self.button = wx.Button(self, -1, "Change plot")
        self.button.Bind(wx.EVT_BUTTON, self.changePlot)

        self.sizer.Add(self.toolbar, 0, wx.EXPAND)
        self.sizer.Add(self.button, 0, wx.EXPAND)
        self.sizer.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.GROW)

        self.drawSin()
        self.current_draw = 'sin'

#       self.drawLines()

    def changePlot(self, event):

        if self.current_draw == 'sin' :
            self.drawLines()
            self.current_draw = 'lines'
        else: 
            self.drawSin()
            self.current_draw = 'sin'

        self.Layout()

    def drawLines(self):

        x = numpy.arange(0.0,10,1.0)
        y = [0,1,0,1,0,2,1,2,1,0]

        self.axes.clear()
        self.axes.plot(x, y)

    def drawSin(self):

        x = numpy.arange(0.0,10,0.1)
        y = numpy.sin(x)

        self.axes.clear()
        self.axes.plot(x, y)
</snippet></ROW><ROW><id>19898433</id><snippet>&gt;&gt;&gt; a[:-1,:] + a[1:,:]
array([[ 5,  7,  9, 11, 13],
       [15, 17, 19, 21, 23],
       [25, 27, 29, 31, 33],
       [35, 37, 39, 41, 43]])
</snippet></ROW><ROW><id>19898477</id><snippet>np.array()</snippet></ROW><ROW><id>19898477</id><snippet>s2 = np.array(s2)
</snippet></ROW><ROW><id>19898573</id><snippet>with open('myfile.txt', 'r') as dataFile:
    for i in range(3):
        next(dataFile)
    the_4th_line = next(dataFile)
</snippet></ROW><ROW><id>19898573</id><snippet>linecache.getline</snippet></ROW><ROW><id>19898573</id><snippet>the_4th_line = linecache.getline('myfile.txt', 4)
</snippet></ROW><ROW><id>19898719</id><snippet>var send_data = { 'name': place.name, 'address': address};

var csrftoken = $.cookie('csrftoken'); 

function csrfSafeMethod(method) {
// these HTTP methods do not require CSRF protection
return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
} 

$.ajaxSetup({
    crossDomain: false, // obviates need for sameOrigin test
    beforeSend: function(xhr, settings) {
        if (!csrfSafeMethod(settings.type)) {
            xhr.setRequestHeader("X-CSRFToken", csrftoken);
            xhr.setRequestHeader("X-Requested-With","XMLHttpRequest");
        }
    }
});


$.ajax({ url: '/results/',
    type: 'POST',
    data: send_data,
    success: function(response, status, jqXHR) {
      $("#results").html(response);
      //console.log('success function resp');
      //console.log(jqXHR.getAllResponseHeaders());
    },
    error: function(obj, status, err) { alert(err); console.log(err); }
  });
</snippet></ROW><ROW><id>19898719</id><snippet>{% extends x|yesno:"stamped/blank.html,stamped/home.html" %}
{% load stamped_custom_tags %}
{% block results %}

&lt;!-- Your HTML Here --&gt;

&lt;h1&gt; title and stuff &lt;/h1&gt;

&lt;div&gt; I contain things! &lt;/div&gt;

{% endblock %}
</snippet></ROW><ROW><id>19898719</id><snippet>home.html</snippet></ROW><ROW><id>19898719</id><snippet>index.html</snippet></ROW><ROW><id>19898719</id><snippet>#results</snippet></ROW><ROW><id>19898719</id><snippet>Blank.html</snippet></ROW><ROW><id>19898719</id><snippet>{% block results %}{% endblock %}

&lt;!-- to allow for corrected shared rendering 
        with ajax posts and normal django rendering --&gt;
</snippet></ROW><ROW><id>19898719</id><snippet>#results</snippet></ROW><ROW><id>19898719</id><snippet>&lt;!-- blank because this will be injected into your page --&gt;

{{ article_title|truncatechars:9 }}
</snippet></ROW><ROW><id>19898766</id><snippet>tagged</snippet></ROW><ROW><id>19898766</id><snippet>for question in so.questions(tagged=['python'], pagesize=10):
    print question
    assert 'python' in question.tags
</snippet></ROW><ROW><id>19898766</id><snippet>tagged=['python', 'loops']</snippet></ROW><ROW><id>19898766</id><snippet>python</snippet></ROW><ROW><id>19898766</id><snippet>loops</snippet></ROW><ROW><id>19898779</id><snippet>from pprint import pprint

def matrix(rows,cols):
    grid = [[0 for i in range(cols)] for i in range(rows)]
    return grid

rows = 5
cols = 5
pprint(matrix(rows,cols))
</snippet></ROW><ROW><id>19898999</id><snippet>StartLineNum</snippet></ROW><ROW><id>19898999</id><snippet>str</snippet></ROW><ROW><id>19898999</id><snippet>StartLineNum[j] = &lt;anything&gt;</snippet></ROW><ROW><id>19898999</id><snippet>StartLineNum</snippet></ROW><ROW><id>19898999</id><snippet>list</snippet></ROW><ROW><id>19898999</id><snippet>StartLineNum</snippet></ROW><ROW><id>19898999</id><snippet>append</snippet></ROW><ROW><id>19898999</id><snippet>j</snippet></ROW><ROW><id>19898999</id><snippet>StartLineNum = []
for line in concepts:
    # blah blah
    StartLineNum.append(temp[0])
    # etc.
</snippet></ROW><ROW><id>19899008</id><snippet>def signup(request):</snippet></ROW><ROW><id>19899008</id><snippet>class signup(UserCreationForm)</snippet></ROW><ROW><id>19899008</id><snippet>signup</snippet></ROW><ROW><id>19899539</id><snippet>smallMap</snippet></ROW><ROW><id>19899539</id><snippet>left</snippet></ROW><ROW><id>19899539</id><snippet>right</snippet></ROW><ROW><id>19899539</id><snippet>EmptyMap</snippet></ROW><ROW><id>19899539</id><snippet>smallMap.left.key</snippet></ROW><ROW><id>19899539</id><snippet>EmptyMap</snippet></ROW><ROW><id>19899539</id><snippet>key</snippet></ROW><ROW><id>19899539</id><snippet>&gt;&gt;&gt; empty = mkEmptyMap()
&gt;&gt;&gt; mapToString(empty)
'_'
&gt;&gt;&gt; three = mapInsert('three', 3, mkEmptyMap())
&gt;&gt;&gt; mapToString(three)
'(_,three-&gt;3,_)'
&gt;&gt;&gt; two = mapInsert('two', 2, three)
&gt;&gt;&gt; mapToString(two)
(_,two-&gt;2,_)
</snippet></ROW><ROW><id>19899539</id><snippet>two</snippet></ROW><ROW><id>19899539</id><snippet>three</snippet></ROW><ROW><id>19899539</id><snippet>&gt;&gt;&gt; mapToString(three)
(_,three-&gt;3,(_,two-&gt;2,_))
</snippet></ROW><ROW><id>19899539</id><snippet>two</snippet></ROW><ROW><id>19899539</id><snippet>mapInsert</snippet></ROW><ROW><id>19899539</id><snippet>three</snippet></ROW><ROW><id>19899539</id><snippet>mapInsert</snippet></ROW><ROW><id>19899539</id><snippet>    if key &gt; node.key:
        node.right = mapInsert(key, value, node.right)
        return node # not node.right
</snippet></ROW><ROW><id>19899539</id><snippet>==</snippet></ROW><ROW><id>19899691</id><snippet>gc</snippet></ROW><ROW><id>19899691</id><snippet>import gc

a = [1, 2, 3]
b = [a, a]
gc.collect()
refs = gc.get_referrers(a)
</snippet></ROW><ROW><id>19899691</id><snippet>a</snippet></ROW><ROW><id>19899691</id><snippet>__main__</snippet></ROW><ROW><id>19899691</id><snippet>a</snippet></ROW><ROW><id>19899691</id><snippet>print(len(refs))
print(refs)
</snippet></ROW><ROW><id>19899691</id><snippet>2</snippet></ROW><ROW><id>19899691</id><snippet>[[1, 2, 3], [1, 2, 3]]</snippet></ROW><ROW><id>19899691</id><snippet>b</snippet></ROW><ROW><id>19899691</id><snippet>gc.get_referrers</snippet></ROW><ROW><id>19899691</id><snippet>__del__</snippet></ROW><ROW><id>19899691</id><snippet>__del__</snippet></ROW><ROW><id>19899691</id><snippet>__del__</snippet></ROW><ROW><id>19899763</id><snippet>dict</snippet></ROW><ROW><id>19899763</id><snippet>bsddb</snippet></ROW><ROW><id>19899763</id><snippet>__iter__</snippet></ROW><ROW><id>19899763</id><snippet>keys</snippet></ROW><ROW><id>19899763</id><snippet>db = bsddb.hashopen("/home/neeraj/public_html/database/mydb.db","r")
for key in db.keys():
    print('{}: {}'.format(key, db[key]))
</snippet></ROW><ROW><id>19899939</id><snippet>|</snippet></ROW><ROW><id>19899939</id><snippet>maxSpeed</snippet></ROW><ROW><id>19899939</id><snippet>int</snippet></ROW><ROW><id>19899939</id><snippet>allForward</snippet></ROW><ROW><id>19899939</id><snippet>allBack</snippet></ROW><ROW><id>19899939</id><snippet>    frontCon.allBack(int(maxSpeed))
    rearCon.allBack(int(maxSpeed))
</snippet></ROW><ROW><id>19899966</id><snippet>==</snippet></ROW><ROW><id>19899966</id><snippet>is</snippet></ROW><ROW><id>19899966</id><snippet>a = "aa"
b = "aa"
print a, b, id(a), id(b)
print a == b
print a is b
</snippet></ROW><ROW><id>19899966</id><snippet>aa aa 140634964365520 140634964365520
True
True
</snippet></ROW><ROW><id>19899966</id><snippet>a</snippet></ROW><ROW><id>19899966</id><snippet>b</snippet></ROW><ROW><id>19899966</id><snippet>is</snippet></ROW><ROW><id>19899966</id><snippet>==</snippet></ROW><ROW><id>19899966</id><snippet>True</snippet></ROW><ROW><id>19899966</id><snippet>a = "aa"
b = "aaa"[:2]
print a, b, id(a), id(b)
print a == b
print a is b
</snippet></ROW><ROW><id>19899966</id><snippet>aa aa 139680667038464 139680667014248
True
False
</snippet></ROW><ROW><id>19899966</id><snippet>a</snippet></ROW><ROW><id>19899966</id><snippet>b</snippet></ROW><ROW><id>19899966</id><snippet>is</snippet></ROW><ROW><id>19900142</id><snippet>form=signup(request.POST)
</snippet></ROW><ROW><id>19900142</id><snippet>form=ussignup(request.POST) 
</snippet></ROW><ROW><id>19900142</id><snippet>def signup(request):
    if request.method=='POST':
        form=ussignup(request.POST)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect('/accounts/rgsuc')
    else:
        form=ussignup()
    args={}
    args.update(csrf(request))
    args['form']=form
    return render_to_response('register.html',args)
</snippet></ROW><ROW><id>19900228</id><snippet>import matplotlib.pyplot as plt
h = plt.plot([0, 0, 1, 1], [0, 1, 1, 0], 'bo')
h[0].set_clip_on(False)
plt.show()
</snippet></ROW><ROW><id>19900276</id><snippet>B2</snippet></ROW><ROW><id>19900276</id><snippet>def recur_dictify(frame):
    if len(frame.columns) == 1:
        if frame.values.size == 1: return frame.values[0][0]
        return frame.values.squeeze()
    grouped = frame.groupby(frame.columns[0])
    d = {k: recur_dictify(g.ix[:,1:]) for k,g in grouped}
    return d
</snippet></ROW><ROW><id>19900276</id><snippet>&gt;&gt;&gt; df
  name  v1   v2  v3
0    A  A1  A11   1
1    A  A2  A12   2
2    B  B1  B12   3
3    C  C1  C11   4
4    B  B2  B21   5
5    A  A2  A21   6
&gt;&gt;&gt; pprint.pprint(recur_dictify(df))
{'A': {'A1': {'A11': 1}, 'A2': {'A12': 2, 'A21': 6}},
 'B': {'B1': {'B12': 3}, 'B2': {'B21': 5}},
 'C': {'C1': {'C11': 4}}}
</snippet></ROW><ROW><id>19900276</id><snippet>def retro_dictify(frame):
    d = {}
    for row in frame.values:
        here = d
        for elem in row[:-2]:
            if elem not in here:
                here[elem] = {}
            here = here[elem]
        here[row[-2]] = row[-1]
    return d
</snippet></ROW><ROW><id>19900929</id><snippet>str(type(a.foo)) == '&lt;class 'method-wrapper'&gt;</snippet></ROW><ROW><id>19900929</id><snippet>methodwrapper = a.foo.__class__</snippet></ROW><ROW><id>19900929</id><snippet>isinstance(foo, methodwrapper)</snippet></ROW><ROW><id>19900929</id><snippet>builtins</snippet></ROW><ROW><id>19900929</id><snippet>&gt;&gt;&gt; type(all.__call__)
&lt;type 'method-wrapper'&gt;
</snippet></ROW><ROW><id>19901022</id><snippet>self.fake_namefile</snippet></ROW><ROW><id>19901022</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>19901022</id><snippet>open()</snippet></ROW><ROW><id>19901022</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>19901022</id><snippet>name</snippet></ROW><ROW><id>19901022</id><snippet>with open(self.fake_namefile.name, 'w') as fake_csv:
</snippet></ROW><ROW><id>19901022</id><snippet>StringIO</snippet></ROW><ROW><id>19901022</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>19901022</id><snippet>delete=True</snippet></ROW><ROW><id>19901022</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>19901022</id><snippet>def test_stuff(self):
    with tempfile.NamedTemporaryFile() as temp_csv:
        self.write_csv_test_data(temp_csv)  # Create this to write to temp_csv file object.
        temp_csv.flush()
        temp_csv.seek(0)

        spread_sheet = SpreadSheet(temp_csv.name)
        # spread_sheet = SpreadSheet(temp_csv)  Use this if Spreadsheet takes a file-like object
        ...
</snippet></ROW><ROW><id>19901022</id><snippet>class SpreadSheet(object):
    '''awesome docstring'''
    def __init__(self, fileobj):
        self.table = []
        self.headers = []

        filereader = reader(fileobj, delimiter=',')
        for row in filereader:
            self.table.append(row)
    ...
</snippet></ROW><ROW><id>19901022</id><snippet>with open(path) as csv_file:
    spreadsheet = Spreadsheet(csv_file)
    ....
</snippet></ROW><ROW><id>19901022</id><snippet>import StringIO

class TestSpreadSheet(unittest.TestCase):
    def make_fake_csv(self, data):
        """Return a populdated fake csv file object for testing."""
        fake_csv = StringIO.StringIO()
        fake_writer = csv.writer(fake_csv)
        fake_writer.writerows(data)
        fake_csv.seek(0)
        return fake_csv
    ....

    def test___init__(self):
        temp_csv = self.make_fake_csv(self.table)
        spread_sheet = SpreadSheet(temp_csv)
        self.assertEqual(
            self.table, spread_sheet.table)
</snippet></ROW><ROW><id>19901137</id><snippet>None</snippet></ROW><ROW><id>19901137</id><snippet>null</snippet></ROW><ROW><id>19901137</id><snippet>nil</snippet></ROW><ROW><id>19901137</id><snippet>nil</snippet></ROW><ROW><id>19901137</id><snippet>None</snippet></ROW><ROW><id>19901137</id><snippet>None</snippet></ROW><ROW><id>19901137</id><snippet>None == "None"</snippet></ROW><ROW><id>19901137</id><snippet>entry[1] != "None"</snippet></ROW><ROW><id>19901137</id><snippet>entry[1] != None</snippet></ROW><ROW><id>19901155</id><snippet>&gt;&gt;&gt; l = [1, 3, 2]
&gt;&gt;&gt; sorted(l)
[1, 2, 3]
&gt;&gt;&gt; sorted(l, key=lambda x: x**2)
[1, 2, 3]
&gt;&gt;&gt; sorted(l, key=lambda x: -x)
[3, 2, 1]
</snippet></ROW><ROW><id>19901201</id><snippet>os.system</snippet></ROW><ROW><id>19901201</id><snippet>os.fork()</snippet></ROW><ROW><id>19901201</id><snippet>os.execv</snippet></ROW><ROW><id>19901201</id><snippet>fork()
in child, close open file descriptors
open stderr, stdout, stdin (read from dev/null, write to dev/null perhaps) 
setsid()
chdir('/')
fork()
in child, exec the terminal.
</snippet></ROW><ROW><id>19901229</id><snippet>import tkinter
tk=tkinter.Tk()
canvas=tkinter.Canvas(tk, width=500, height=500)
canvas.pack()

# Enter into eventloop &lt;- this will keep
# running your application, until you exit
tk.mainloop()
</snippet></ROW><ROW><id>19901229</id><snippet>tk</snippet></ROW><ROW><id>19901229</id><snippet>app</snippet></ROW><ROW><id>19901229</id><snippet>root</snippet></ROW><ROW><id>19901229</id><snippet>win</snippet></ROW><ROW><id>19901229</id><snippet>window</snippet></ROW><ROW><id>19901343</id><snippet>if __name__ == "__main__":
    from gevent import pywsgi
    from geventwebsocket.handler import WebSocketHandler
    server = pywsgi.WSGIServer(('', 5000), app, handler_class=WebSocketHandler)
    server.serve_forever()
</snippet></ROW><ROW><id>19901343</id><snippet>gunicorn -k flask_sockets.worker module_name:app
</snippet></ROW><ROW><id>19901400</id><snippet>import signal  
signal.alarm(TIME_TO_DIE)
# your code goes on
</snippet></ROW><ROW><id>19901400</id><snippet>from time import sleep
from threading import Thread

thrd = Thread(target=you_function_to_run)
thrd.daemon = True
thrd.start()
sleep(60)
</snippet></ROW><ROW><id>19901467</id><snippet>tolist</snippet></ROW><ROW><id>19901467</id><snippet>f8</snippet></ROW><ROW><id>19901467</id><snippet>pickle</snippet></ROW><ROW><id>19901467</id><snippet>__reduce__</snippet></ROW><ROW><id>19901467</id><snippet>__reduce__</snippet></ROW><ROW><id>19901467</id><snippet>ndarray</snippet></ROW><ROW><id>19901467</id><snippet>def numpy_default(obj):
    if isinstance(obj, np.ndarray):
        return {'_npdata': obj.tostring(), 
                '_npdtype': obj.dtype.name,
                '_npshape': obj.shape}
    else:
        return json.dumps(obj)

def dumps(obj):
    return json.dumps(obj, default=numpy_default)

def numpy_hook(obj):
    try:
        data = obj['_npdata']
    except AttributeError:
        return obj
    return np.fromstring(data, obj['_npdtype']).reshape(obj['_npshape'])

def loads(obj):
    return json.loads(obj, object_hook=numpy_hook)
</snippet></ROW><ROW><id>19901467</id><snippet>np.tostring</snippet></ROW><ROW><id>19901467</id><snippet>'bytes'</snippet></ROW><ROW><id>19901467</id><snippet>json</snippet></ROW><ROW><id>19901467</id><snippet>obj.tostring()</snippet></ROW><ROW><id>19901467</id><snippet>obj.tostring().decode('latin-1')</snippet></ROW><ROW><id>19901467</id><snippet>data = obj['_npdata']</snippet></ROW><ROW><id>19901467</id><snippet>data = obj['_npdata'].encode('latin-1')</snippet></ROW><ROW><id>19901467</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>19901467</id><snippet>strict=False</snippet></ROW><ROW><id>19901467</id><snippet>json</snippet></ROW><ROW><id>19901467</id><snippet>ensure_ascii=False</snippet></ROW><ROW><id>19901467</id><snippet>json.encoder.ESCAPE = re.compile(r'"')
</snippet></ROW><ROW><id>19901855</id><snippet>del list[..]</snippet></ROW><ROW><id>19901855</id><snippet>list.remove(list[..])</snippet></ROW><ROW><id>19901855</id><snippet>def list_decreaser(xs):
    listresult = [] 
    for i in range(len(xs)-1, 0, -1): # &lt;--- interate backward
        del xs[i]
        listresult.append(xs[:]) # &lt;----
    return listresult

print(list_decreaser([0,3,4,5,6,7,8]))
</snippet></ROW><ROW><id>19901855</id><snippet>&gt;&gt;&gt; xs = [0,3,4,5,6,7,8]
&gt;&gt;&gt; [xs[:i] for i in range(len(xs)-1, 0, -1)] 
[[0, 3, 4, 5, 6, 7], [0, 3, 4, 5, 6], [0, 3, 4, 5], [0, 3, 4], [0, 3], [0]]
</snippet></ROW><ROW><id>19901855</id><snippet>list</snippet></ROW><ROW><id>19901855</id><snippet>list</snippet></ROW><ROW><id>19902090</id><snippet>from requests import request, HTTPError

from django.core.files.base import ContentFile


def save_profile_picture(strategy, user, response, details,
                         is_new=False,*args,**kwargs):

    if is_new and strategy.backend.name == 'facebook':
        url = 'http://graph.facebook.com/{0}/picture'.format(response['id'])

        try:
            response = request('GET', url, params={'type': 'large'})
            response.raise_for_status()
        except HTTPError:
            pass
    else:
        profile = user.get_profile()
        profile.profile_photo.save('{0}_social.jpg'.format(user.username),
                                   ContentFile(response.content))
        profile.save()
</snippet></ROW><ROW><id>19902090</id><snippet>SOCIAL_AUTH_PIPELINE += (
'&lt;application&gt;.pipelines.save_profile_picture',
</snippet></ROW><ROW><id>19902092</id><snippet>numpy.mgrid</snippet></ROW><ROW><id>19902092</id><snippet>Xgrid, Ygrid, Zgrid = np.mgrid[X[1]:X[-1]:50j,Y[1]:Y[-1]:50j,Z[1]:Z[-1]:50j]</snippet></ROW><ROW><id>19902092</id><snippet>numpy.mgrid</snippet></ROW><ROW><id>19902092</id><snippet>numpy.meshgrid</snippet></ROW><ROW><id>19902439</id><snippet>age</snippet></ROW><ROW><id>19902439</id><snippet>cmd</snippet></ROW><ROW><id>19902439</id><snippet>Cmd.onecmd</snippet></ROW><ROW><id>19902439</id><snippet>line</snippet></ROW><ROW><id>19902439</id><snippet>self.default</snippet></ROW><ROW><id>19902439</id><snippet>line</snippet></ROW><ROW><id>19902439</id><snippet>age</snippet></ROW><ROW><id>19902439</id><snippet>whenadult</snippet></ROW><ROW><id>19902439</id><snippet>age</snippet></ROW><ROW><id>19902439</id><snippet>age</snippet></ROW><ROW><id>19902439</id><snippet>def whenadult(age):
    return 18 - age

def main():
    age = 5
    needtowait = whenadult(age)

main() # possibly with an if __name__ == '__main__' guard
</snippet></ROW><ROW><id>19902863</id><snippet>point = []
point.append([45.424571, -75.695661]) 
results = Geocoder.reverse_geocode(*point[0])
</snippet></ROW><ROW><id>19902970</id><snippet>INDENT = ' ' #Change this to taste

def print_family(parent,family,indent=0):
    for child in family:
        if child['parent'] == parent:

             # Print here
             print '%s%s' % (INDENT * indent,child['name'])

             # Call on the child
             print_family(child['name'],family,indent + 1)

# Kick it off with the root node
print_family('',family)
</snippet></ROW><ROW><id>19902985</id><snippet>bytes</snippet></ROW><ROW><id>19902985</id><snippet>encoding = page.headers.get_param('charset')
if encoding is None:
    encoding = 'utf8'  # sensible default

for email in emails_in_page:
    print(email.decode(encoding))
</snippet></ROW><ROW><id>19902985</id><snippet>encoding = page.headers.get_param('charset')
if encoding is None:
    encoding = 'utf8'  # sensible default

content = page.read().decode(encoding)
</snippet></ROW><ROW><id>19902985</id><snippet>email_string = '[a-z0-9_. A-Z]*@[a-z0-9_. A-Z]*.[a-zA-Z]'
</snippet></ROW><ROW><id>19902985</id><snippet>from bs4 import BeautifulSoup

soup = BeautifulSoup(page.read(), from_encoding=page.headers.get_param('charset'))
for textelem in soup.find_all(text=re.compile(email_string)):
    print(textelem)
</snippet></ROW><ROW><id>19903193</id><snippet>matrix = {
   (0,1,0,0,1,1,0,1):(0,0,1),
   (1,0,1,0,0,1,1,0):(1,1,1),
   (0,1,1,1,0,0,0,1):(0,1,0),

}
S1,S2,S3,S4,S5,S6,S7,S8 = 0,1,0,0,1,1,0,1
R1,R2,R3=matrix[S1,S2,S3,S4,S5,S6,S7,S8]
print (R1,R2,R3)

$python test.py
(0, 0, 1)
</snippet></ROW><ROW><id>19903305</id><snippet>CREATE TABLE</snippet></ROW><ROW><id>19903305</id><snippet>CREATE TABLE IF NOT EXISTS</snippet></ROW><ROW><id>19903305</id><snippet>CREATE TABLE</snippet></ROW><ROW><id>19903305</id><snippet>INSERT</snippet></ROW><ROW><id>19903305</id><snippet>'Neeraj'</snippet></ROW><ROW><id>19903305</id><snippet>cursor.execute("""
    INSERT INTO PERSON (F_NAME, L_NAME, AGE, GENDER)
    VALUES (%s, %s, %s, %s)
""", (f_name, l_name, age, gender))
</snippet></ROW><ROW><id>19903305</id><snippet>executemany</snippet></ROW><ROW><id>19903305</id><snippet>cursor.execute("""
    INSERT INTO PERSON (F_NAME, L_NAME, AGE, GENDER)
    VALUES (%s, %s, %s, %s)
""", list_of_people)
</snippet></ROW><ROW><id>19903802</id><snippet>tmp_response['results'][0]['span'] = "text goes here"
</snippet></ROW><ROW><id>19903802</id><snippet>update</snippet></ROW><ROW><id>19903802</id><snippet>tmp_response['results'][0].update({'span':"text goes here"})
</snippet></ROW><ROW><id>19904103</id><snippet>bottle</snippet></ROW><ROW><id>19904103</id><snippet>AJAX</snippet></ROW><ROW><id>19904103</id><snippet>javascript</snippet></ROW><ROW><id>19904110</id><snippet>ipython qtconsole --help-all</snippet></ROW><ROW><id>19904110</id><snippet>--IPKernelApp.matplotlib=&lt;CaselessStrEnum&gt;
    Default: None
    Choices: ['auto', 'gtk', 'inline', 'osx', 'qt', 'qt4', 'tk', 'wx']

--IPKernelApp.pylab=&lt;CaselessStrEnum&gt;
    Default: None
    Choices: ['auto', 'gtk', 'inline', 'osx', 'qt', 'qt4', 'tk', 'wx']
    Pre-load matplotlib and numpy for interactive use, selecting a particular
    matplotlib backend and loop integration.
</snippet></ROW><ROW><id>19904110</id><snippet>c.IPKernelApp.matplotlib='inline'</snippet></ROW><ROW><id>19904110</id><snippet>*_config.py</snippet></ROW><ROW><id>19904110</id><snippet>~/.ipython/profile_default</snippet></ROW><ROW><id>19904110</id><snippet>%pylab</snippet></ROW><ROW><id>19904110</id><snippet>%matplotlib &lt;backend&gt;</snippet></ROW><ROW><id>19904158</id><snippet>for</snippet></ROW><ROW><id>19904158</id><snippet>with</snippet></ROW><ROW><id>19904158</id><snippet>items = ["one", "two", "three"]

for item in items:
    with open("{}hello_world.txt".format(item), "w") as f:
        f.write("This is my first line of code")
        f.write("\nThis is my second line of code with {} the first item in my list".format(item))
        f.write("\nAnd this is my last line of code")
</snippet></ROW><ROW><id>19904615</id><snippet># getting data
#...
from bs4 import BeautifulSoup
from collections import namedtuple
soup = BeautifulSoup(data)
# thats where the data are collected
rows = list()
# named tuple to store the relevant data of one player
Player = namedtuple('Player', ['name', 'team', 'goals', 'assists', 'points'])
# getting every row of the tbody in the specified table
for tr in soup.select('table.data.stats tbody tr'):
    # put text-contents of the row in a list
    cellStrings = [cell.find(text = True) for cell in tr.findAll('td')]
    # add it to the
    rows.append(
        Player(
            name=cellStrings[1],
            team=cellStrings[2],
            goals=cellStrings[5],
            assists=cellStrings[6],
            points=cellStrings[7]
        )
    )
</snippet></ROW><ROW><id>19904615</id><snippet>rows</snippet></ROW><ROW><id>19904615</id><snippet>[Player(name=u'Steven Stamkos', team=u'TBL', goals=u'14', assists=u'9', points=u'23'),
 Player(name=u'Sidney Crosby', team=u'PIT', goals=u'8', assists=u'15', points=u'23'),
 Player(name=u'Ryan Getzlaf', team=u'ANA', goals=u'10', assists=u'12', points=u'22'),
 Player(name=u'Alexander Steen', team=u'STL', goals=u'14', assists=u'7', points=u'21'),
 Player(name=u'Corey Perry', team=u'ANA', goals=u'11', assists=u'10', points=u'21'),
 Player(name=u'Alex Ovechkin', team=u'WSH', goals=u'13', assists=u'7', points=u'20'),
 ....
</snippet></ROW><ROW><id>19904615</id><snippet>&gt;&gt;&gt; rows[20].name
u'Bryan Little'
</snippet></ROW><ROW><id>19904972</id><snippet>for i, x in enumerate(result, start=1):
    print '{}:{}'.format(i, x),

#output: 1:31 2:52 3:66 4:68
</snippet></ROW><ROW><id>19904972</id><snippet>xrange(len(x))</snippet></ROW><ROW><id>19904972</id><snippet>enumerate</snippet></ROW><ROW><id>19904972</id><snippet>enumerate</snippet></ROW><ROW><id>19904972</id><snippet>start</snippet></ROW><ROW><id>19904972</id><snippet>for i, ch in enumerate(text, start=1):
    if ch == '1':
        result.append(i)
</snippet></ROW><ROW><id>19905372</id><snippet>def replace(d):
    d.clear()
    d.update({'b': 2})
</snippet></ROW><ROW><id>19905372</id><snippet>d</snippet></ROW><ROW><id>19905372</id><snippet>d</snippet></ROW><ROW><id>19905659</id><snippet>QPixmap.grabWidget</snippet></ROW><ROW><id>19905659</id><snippet>QPrinter</snippet></ROW><ROW><id>19905659</id><snippet>QPainter</snippet></ROW><ROW><id>19905677</id><snippet>blog/:entry_id/:action</snippet></ROW><ROW><id>19905677</id><snippet>/blog/:entry_id/:action</snippet></ROW><ROW><id>19905757</id><snippet>import mechanize
from bs4 import BeautifulSoup

b = mechanize.Browser()
r = b.open("&lt;targetLoginPage&gt;")
b.select_form("&lt;targetFormName&gt;") 
# if the form has no name, you can use nr=&lt;targetFormNumber&gt; as a parameter
b.form["login"] = "yourUserName"
b.form["password"] = "yourPassword"
b.submit()
</snippet></ROW><ROW><id>19905757</id><snippet>mailLinks = []
for link in b.links():
    if "http://yoururl.urdom/inbox/[pattern]" in link.url:
    # you can also try if "&lt;text&gt;" in link.text if all the links text have
    # something in common, e.g: "[Message #10] Proposal", "[Message #11] Hello"
    # then you can look for links with their link.text having "[Message" in it
    mailLinks.append(link)
</snippet></ROW><ROW><id>19905757</id><snippet>soup = BeautifulSoup(b.response().read())
tag = soup.find("tagtype", {"class" : "classname"})
# if the &lt;tag&gt; doesn't form part of a class, try any other attributes, like name or id
# if it doesn't contain any attributes, you'll have to use the interactive python prompt
# and try to find a pattern or something
text = str(tag.getText())
</snippet></ROW><ROW><id>19905894</id><snippet>d</snippet></ROW><ROW><id>19905894</id><snippet>d/app/
d/config.py
d/run.py
</snippet></ROW><ROW><id>19905894</id><snippet>testingA.py</snippet></ROW><ROW><id>19905894</id><snippet>d/app/
d/config.py
d/run.py
d/testingA.py
</snippet></ROW><ROW><id>19905894</id><snippet>d</snippet></ROW><ROW><id>19905894</id><snippet>testingA.py</snippet></ROW><ROW><id>19905894</id><snippet>run.py</snippet></ROW><ROW><id>19905894</id><snippet>import testingA
</snippet></ROW><ROW><id>19905894</id><snippet>from testingA import *
</snippet></ROW><ROW><id>19905894</id><snippet>testingA.py</snippet></ROW><ROW><id>19905894</id><snippet>d/app/</snippet></ROW><ROW><id>19905894</id><snippet>d/app/testingA.py
d/config.py
d/run.py
</snippet></ROW><ROW><id>19905894</id><snippet>run.py</snippet></ROW><ROW><id>19905894</id><snippet>import app.testingA
</snippet></ROW><ROW><id>19905894</id><snippet>from app import testingA
</snippet></ROW><ROW><id>19905981</id><snippet>docs/examples</snippet></ROW><ROW><id>19905981</id><snippet>av_seek_frame</snippet></ROW><ROW><id>19906002</id><snippet>&gt;&gt;&gt; [[i, 0] for i in range(10)]
[[0, 0], [1, 0], [2, 0], [3, 0], [4, 0], [5, 0], [6, 0], [7, 0], [8, 0], [9, 0]]
</snippet></ROW><ROW><id>19906002</id><snippet>*</snippet></ROW><ROW><id>19906002</id><snippet>&gt;&gt;&gt; a = [[]]*10
&gt;&gt;&gt; a
[[], [], [], [], [], [], [], [], [], []]
&gt;&gt;&gt; a[0].append('X')
&gt;&gt;&gt; a
[['X'], ['X'], ['X'], ['X'], ['X'], ['X'], ['X'], ['X'], ['X'], ['X']]
</snippet></ROW><ROW><id>19906191</id><snippet>template_response = super(ExtendedUserAdmin, self).render_change_form(
    *args, **kwargs)
</snippet></ROW><ROW><id>19906191</id><snippet>template_response = super(
    ExtendedUserAdmin, self
).render_change_form(*args, **kwargs)
</snippet></ROW><ROW><id>19906191</id><snippet>template_response = super(
    ExtendedUserAdmin, self).render_change_form(*args, **kwargs)
</snippet></ROW><ROW><id>19906315</id><snippet>wxCommandEvent</snippet></ROW><ROW><id>19906315</id><snippet>wxMouseEvent</snippet></ROW><ROW><id>19906315</id><snippet>wxTheApp</snippet></ROW><ROW><id>19906315</id><snippet>Skip()</snippet></ROW><ROW><id>19906315</id><snippet>event.Skip()</snippet></ROW><ROW><id>19906315</id><snippet>Skip()</snippet></ROW><ROW><id>19906315</id><snippet>event.Skip()</snippet></ROW><ROW><id>19906315</id><snippet>wxFocusEvent</snippet></ROW><ROW><id>19906339</id><snippet>subprocess</snippet></ROW><ROW><id>19906339</id><snippet>import subprocess

with open('myfile.txt', 'w') as fout:
    subprocess.check_call('ls', stdout=fout)
</snippet></ROW><ROW><id>19906444</id><snippet>vtx = MeshVertex(u'pCubeShape1.vtx[0]')</snippet></ROW><ROW><id>19906444</id><snippet>import pymel.core as pc
transforms = pc.listTransforms(vtx.node())
transform = transforms[0] #in case there is only one.
</snippet></ROW><ROW><id>19906474</id><snippet>df = df[df['Correlation'] &gt;= 0]
</snippet></ROW><ROW><id>19906883</id><snippet>import</snippet></ROW><ROW><id>19906883</id><snippet>settings</snippet></ROW><ROW><id>19906883</id><snippet>usersettings</snippet></ROW><ROW><id>19906883</id><snippet>settings</snippet></ROW><ROW><id>19906883</id><snippet>from ..config import settings

HOST = settings.HOST
PORT = settings.PORT

...
</snippet></ROW><ROW><id>19906883</id><snippet>def usersettings():
    print HOST, PORT
</snippet></ROW><ROW><id>19906976</id><snippet>re.sub(r'\b[^aeoui]*', '', inputstring, flags=re.I)
</snippet></ROW><ROW><id>19906976</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; inputstring = 'School'
&gt;&gt;&gt; re.sub(r'\b[^aeoui]*', '', inputstring, flags=re.I)
'ool'
</snippet></ROW><ROW><id>19906976</id><snippet>[^...]</snippet></ROW><ROW><id>19906976</id><snippet>re.I</snippet></ROW><ROW><id>19906976</id><snippet>\b</snippet></ROW><ROW><id>19906976</id><snippet>re.I</snippet></ROW><ROW><id>19906976</id><snippet>\b</snippet></ROW><ROW><id>19906976</id><snippet>Sch</snippet></ROW><ROW><id>19907030</id><snippet>serializer_context = {'request': request, 'pictures': pictures, 'filter': FilterForm()}

if request.accepted_renderer.format == 'html':
    return Response(serializer_context, template_name='index.html')

serializer = PaginatedPictureSerializer(pictures, context=serializer_context)
return Response(serializer.data, template_name='index.html')
</snippet></ROW><ROW><id>19907263</id><snippet>bits</snippet></ROW><ROW><id>19907688</id><snippet>ExitProcess</snippet></ROW><ROW><id>19907688</id><snippet>TerminateProcess</snippet></ROW><ROW><id>19907688</id><snippet>SetConsoleCtrlHandler</snippet></ROW><ROW><id>19907688</id><snippet>import ctypes
from ctypes import wintypes

_kernel32 = ctypes.windll.kernel32

def _check_bool(result, func, args):
    if not result:
        raise ctypes.WinError()
    # else build final result from result, args, outmask, and 
    # inoutmask. Typically it's just result, unless you specify 
    # out/inout parameters in the prototype.
    return args

_HandlerRoutine = ctypes.WINFUNCTYPE(wintypes.BOOL, wintypes.DWORD)
_kernel32.SetConsoleCtrlHandler.restype = wintypes.BOOL
_kernel32.SetConsoleCtrlHandler.argtypes = [_HandlerRoutine, wintypes.BOOL]
_kernel32.SetConsoleCtrlHandler.errcheck = _check_bool

_console_ctrl_handlers = {}

def set_console_ctrl_handler(handler):
    if handler not in _console_ctrl_handlers:
        h = _HandlerRoutine(handler)
        _kernel32.SetConsoleCtrlHandler(h, True)
        _console_ctrl_handlers[handler] = h
</snippet></ROW><ROW><id>19907688</id><snippet>unset_console_ctrl_handler</snippet></ROW><ROW><id>19907688</id><snippet>%COMSPEC%</snippet></ROW><ROW><id>19907688</id><snippet>AllocConsole</snippet></ROW><ROW><id>19907688</id><snippet>AttachConsole</snippet></ROW><ROW><id>19907760</id><snippet>#ifdef Py_DEBUG
extern int Py_DebugFlag;
#define D(x) if (!Py_DebugFlag); else x
#else
#define D(x)
#endif
</snippet></ROW><ROW><id>19907760</id><snippet>D</snippet></ROW><ROW><id>19907760</id><snippet>printf()</snippet></ROW><ROW><id>19907760</id><snippet>logging</snippet></ROW><ROW><id>19907760</id><snippet>-i</snippet></ROW><ROW><id>19907760</id><snippet>-c</snippet></ROW><ROW><id>19907760</id><snippet>python -i -c "import logging;logging.basicConfig(level=logging.DEBUG)"
</snippet></ROW><ROW><id>19907804</id><snippet>a = [ [[1,2,3],[4,5,6]], [[7,8,9],[10,11,12]], [[13,14,15],[16,17,18]] ]
b = [[item for sitems in items for item in sitems] for items in zip(*a)]
print b
</snippet></ROW><ROW><id>19907804</id><snippet>[[1, 2, 3, 7, 8, 9, 13, 14, 15], [4, 5, 6, 10, 11, 12, 16, 17, 18]]
</snippet></ROW><ROW><id>19908127</id><snippet>from string import maketrans

flip_table = maketrans('01', '10')
def flip(s):
    return s.translate(flip_table)
</snippet></ROW><ROW><id>19908127</id><snippet>&gt;&gt;&gt; flip('1100')
'0011'
</snippet></ROW><ROW><id>19908172</id><snippet>filehashes[a][1] == inphashes[b][1]</snippet></ROW><ROW><id>19908172</id><snippet>if filehashes[a][1] == filehashes[b][1]:
</snippet></ROW><ROW><id>19908172</id><snippet>a == b</snippet></ROW><ROW><id>19908172</id><snippet>if filehashes[a][1] == inphashes[b][1]:
</snippet></ROW><ROW><id>19908172</id><snippet>a</snippet></ROW><ROW><id>19908172</id><snippet>b</snippet></ROW><ROW><id>19908172</id><snippet>zip</snippet></ROW><ROW><id>19908172</id><snippet>for fhash, inphash in zip(filehashes, inpuhashes):
    if fhash[1] == inphash[1]:
        print('{} == {}'.format(fhash[1], inphash[1]))
    else:
        print('Inconsistency error')
</snippet></ROW><ROW><id>19908214</id><snippet>import "math"

func arange(start, stop, step float64) []float64 {
    N := int(math.Ceil((stop - start) / step));
    rnge := make([]float64, N, N)
    i := 0
    for x := start; x &lt; stop; x += step {
        rnge[i] = x;
        i += 1
    }
    return rnge
}
</snippet></ROW><ROW><id>19908214</id><snippet>arange(0., 10., 0.5)
[0 0.5 1 1.5 2 2.5 3 3.5 4 4.5 5 5.5 6 6.5 7 7.5 8 8.5 9 9.5]
</snippet></ROW><ROW><id>19908214</id><snippet>&gt;&gt;&gt; np.arange(0., 10., 0.5)
array([ 0. ,  0.5,  1. ,  1.5,  2. ,  2.5,  3. ,  3.5,  4. ,  4.5,  5. ,
    5.5,  6. ,  6.5,  7. ,  7.5,  8. ,  8.5,  9. ,  9.5])
</snippet></ROW><ROW><id>19908427</id><snippet>re.sub(r'\bhttps?://[^# ]+#?', '', text1)
</snippet></ROW><ROW><id>19908427</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text1 = '\bhttp://oaei.ontologymatching.org/2011/benchmarks/101/onto.rdf#Reference http://oaei.ontologymatching.org/2011/benchmarks/101/onto.rdf#Informal ACADEMIC type http://oaei.ontologymatching.org/2011/benchmarks/101/onto.rdf#school ACADEMIC type'
&gt;&gt;&gt; re.sub(r'https?://[^# ]+#?', '', text1)
'Reference Informal ACADEMIC type school ACADEMIC type'
</snippet></ROW><ROW><id>19908427</id><snippet>http://</snippet></ROW><ROW><id>19908427</id><snippet>https://</snippet></ROW><ROW><id>19908545</id><snippet>def totalupdate(*args):
    global para
    try:
        para[0] = first_var.get()
        para[1] = second_var.get()
    except ValueError:
        # one or both values are not integers
        return
    newtotal = sum(para)
    total_var.set(newtotal)
</snippet></ROW><ROW><id>19909255</id><snippet>while</snippet></ROW><ROW><id>19909255</id><snippet>while True:
    endgame = False
    while not endgame:
        #game actions
    play_again = raw_input("Play again y or n?")
    if play_again == 'n':
        break
</snippet></ROW><ROW><id>19909255</id><snippet>def play_again():
    play_option = raw_input("Play again y or n?")
    if play_option == 'y': game_play()


def game_play():
    endgame = False
    while not endgame:
        #game_actions
    play_again()
</snippet></ROW><ROW><id>19909287</id><snippet>inWaiting()</snippet></ROW><ROW><id>19909287</id><snippet>read()</snippet></ROW><ROW><id>19909287</id><snippet>While True:
    bytesToRead = ser.inWaiting()
    ser.read(bytesToRead)
</snippet></ROW><ROW><id>19909287</id><snippet>readline()</snippet></ROW><ROW><id>19909287</id><snippet>Read a line which is terminated with end-of-line (eol) character (\n by default) or until timeout.
</snippet></ROW><ROW><id>19909411</id><snippet>np.unique</snippet></ROW><ROW><id>19909411</id><snippet>&gt;&gt;&gt; unique,pos = np.unique(A,return_inverse=True) #Finds all unique elements and their positions
&gt;&gt;&gt; counts = np.bincount(pos)                     #Count the number of each unique element
&gt;&gt;&gt; maxpos = counts.argmax()                      #Finds the positions of the maximum count

&gt;&gt;&gt; (unique[maxpos],counts[maxpos])
('d', 2)
</snippet></ROW><ROW><id>19909411</id><snippet>unique</snippet></ROW><ROW><id>19909411</id><snippet>&gt;&gt;&gt; maxsort = counts.argsort()[::-1]
&gt;&gt;&gt; (unique[maxsort],counts[maxsort])
(array(['d', 'e', 'c', 'b', 'a'],
      dtype='|S1'), array([2, 1, 1, 1, 1]))
</snippet></ROW><ROW><id>19909505</id><snippet>#if (defined(__GNU__) &amp;&amp; defined(_MSC_VER))
   // ...
#endif
</snippet></ROW><ROW><id>19909569</id><snippet>'modhash'</snippet></ROW><ROW><id>19909569</id><snippet>    modhash = response['json']['data'].get('modhash')
</snippet></ROW><ROW><id>19909740</id><snippet>from lxml import etree

ns_bldg = "http://www.opengis.net/citygml/building/2.0"
nsmap = {
    'bldg': ns_bldg,
}

cityModel = etree.Element("cityModel", nsmap=nsmap)
cityObject = etree.SubElement(cityModel, "cityObjectMember")
bldg = etree.SubElement(cityObject, "{%s}Building" % ns_bldg)
function = etree.SubElement(bldg, "{%s}function" % ns_bldg)
function.text = "1000"
print etree.tostring(cityModel, pretty_print=True)
</snippet></ROW><ROW><id>19909740</id><snippet>&lt;cityModel xmlns:bldg="http://www.opengis.net/citygml/building/2.0"&gt;
  &lt;cityObjectMember&gt;
    &lt;bldg:Building&gt;
      &lt;bldg:function&gt;1000&lt;/bldg:function&gt;
    &lt;/bldg:Building&gt;
  &lt;/cityObjectMember&gt;
&lt;/cityModel&gt;
</snippet></ROW><ROW><id>19909901</id><snippet>def rec_sum(lst):
    if not lst:
        return 0
    el = lst.pop()
    if isinstance(el, list):
        return rec_sum(el) + rec_sum(lst)
    else:
        return el + rec_sum(lst)
</snippet></ROW><ROW><id>19909901</id><snippet>def rec_for_sum(lst):
    if not lst:
        return 0
    count = 0
    for el in lst:
        if not isinstance(el, list):
            count += el
        else:
            count += rec_for_sum(el)
    return count
</snippet></ROW><ROW><id>19910096</id><snippet>setattr()</snippet></ROW><ROW><id>19910096</id><snippet>foo = 'count'
setattr(x, foo, 2)
</snippet></ROW><ROW><id>19910096</id><snippet>foo = 'count'
x.foo = 2
</snippet></ROW><ROW><id>19910096</id><snippet>setattr()</snippet></ROW><ROW><id>19910096</id><snippet>object.attributename = value</snippet></ROW><ROW><id>19910096</id><snippet>setattr()</snippet></ROW><ROW><id>19910096</id><snippet>setattr(x, '3 little piggies', 42)
</snippet></ROW><ROW><id>19910198</id><snippet>  list( A[:,0] )
</snippet></ROW><ROW><id>19910232</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""csv_dict.py
"""
import csv
import pprint
from collections import namedtuple


Row = namedtuple('Row', [
    'name',
    'value_1',
    'value_2',
    'extra_name',
    'extra_value_1',
    'extra_value_2'
])


l = [
    ('Apple', 1, 2, {'gala': (2, 1.0)}),
    ('Grape ', 2, 4, {'malbec': (4, 0.25), 'merlot': (4, 0.75)}),
    ('Pear', 4, 5, {
        'anjou': (5, 0.2),
        'bartlet': (5, 0.4),
        'seckel': (5, 0.2)}
    ),
    ('Berry', 5, 5, {
        'blueberry': (5, 0.2),
        'blackberry': (5, 0.2),
        'straw': (5, 0.2)
    })
]

print('List before writing: ')
pprint.pprint(l)

# Writing the data.
with open('test1.csv', 'wb') as fout:
    writer = csv.writer(fout)

    for row in l:
        for k, v in row[3].iteritems():
            writer.writerow(row[0:3] + (k,) + v)

# Reading the data.
format_extra = lambda row: (int(row.extra_value_1), float(row.extra_value_2))

with open('test1.csv', 'rU') as fin:
    reader = csv.reader(fin)

    ll = []
    hl = {}

    for row in (Row(*r) for r in reader):
        if row.name in hl:
            ll[hl[row.name]][3][row.extra_name] = format_extra(row)
            continue

        ll.append(row[0:3] + ({
            row.extra_name: format_extra(row)
        },))
        hl[row.name] = len(ll) - 1

    pprint.pprint(ll)
</snippet></ROW><ROW><id>19910400</id><snippet>__init__</snippet></ROW><ROW><id>19910400</id><snippet>object</snippet></ROW><ROW><id>19910400</id><snippet>_init_</snippet></ROW><ROW><id>19910400</id><snippet>__init__</snippet></ROW><ROW><id>19910400</id><snippet>object</snippet></ROW><ROW><id>19910415</id><snippet>keys</snippet></ROW><ROW><id>19910415</id><snippet>print '\t'.join(keys)
for row in zip(*[dic[k] for k in keys]):
    print '\t'.join(map(str, row))
</snippet></ROW><ROW><id>19910415</id><snippet>print '\t'.join(keys)
for row in zip(*values):
    print '\t'.join(map(str, row))
</snippet></ROW><ROW><id>19910482</id><snippet>model._meta.app_label</snippet></ROW><ROW><id>19910482</id><snippet>model</snippet></ROW><ROW><id>19910482</id><snippet>class ApiRouter(object):
    def db_for_read(self, model, **hints):
        if model == TestModelB:
            return 'applicationb_db'
        return None

    def db_for_write(self, model, **hints):
        if model == TestModelB:
            return 'applicationb_db'
        return None

    def allow_relation(self, obj1, obj2, **hints):
        if model == TestModelB:
           return True
        return None

    def allow_syncdb(self, db, model):
        if model == TestModelB:
            return True
        else:
            return False
        return None
</snippet></ROW><ROW><id>19910563</id><snippet>def histeq(im,nbr_bins=256):
    """  Histogram equalization of a grayscale image. 
         From http://programmingcomputervision.com/"""

    # get image histogram
    imhist,bins = np.histogram(im.flatten(),nbr_bins,normed=True)
    cdf = imhist.cumsum() # cumulative distribution function
    cdf = 1 * cdf / cdf[-1] # normalize (value component max is 1.0)

    # use linear interpolation of cdf to find new pixel values
    im2 = np.interp(im.flatten(),bins[:-1],cdf)

    return im2.reshape(im.shape), cdf

#equalise the intensity component
img_hsv[:,:,2], cdf = histeq(img_hsv[:,:,2])

#then convert back to RGB space
img_eq = colors.hsv_to_rgb(img_hsv)
</snippet></ROW><ROW><id>19910642</id><snippet>windows-1251</snippet></ROW><ROW><id>19910642</id><snippet>utf-8</snippet></ROW><ROW><id>19910642</id><snippet>page = ..</snippet></ROW><ROW><id>19910642</id><snippet>page = urlopen('http://yasko.by/').read().decode('windows-1251')
</snippet></ROW><ROW><id>19910749</id><snippet>templates/admin/index.html</snippet></ROW><ROW><id>19910749</id><snippet>extrahead</snippet></ROW><ROW><id>19910749</id><snippet>{% extends "admin/index.html" %}

{% block extrahead %}
    # add a &lt;script&gt; tag here with your JavaScript
{% endblock %}
</snippet></ROW><ROW><id>19911121</id><snippet>image_string</snippet></ROW><ROW><id>19911121</id><snippet>Image.open</snippet></ROW><ROW><id>19911121</id><snippet>Image.open</snippet></ROW><ROW><id>19911121</id><snippet>StringIO</snippet></ROW><ROW><id>19911121</id><snippet>seek()</snippet></ROW><ROW><id>19911221</id><snippet>return render_to_response('login.html', c, 
            context_instance=RequestContext(request))
</snippet></ROW><ROW><id>19911221</id><snippet>context_instance</snippet></ROW><ROW><id>19911221</id><snippet>user</snippet></ROW><ROW><id>19911293</id><snippet>'\n'</snippet></ROW><ROW><id>19911293</id><snippet>'/n'</snippet></ROW><ROW><id>19911387</id><snippet>$ paste -d' ' &lt;(head -1 file | sed 's/|/\n/g') &lt;(tail -1 file | sed 's/|/\n/g')
DelayTimeThreshold 10000
MaxDelayPerMinute 5
Name rca
</snippet></ROW><ROW><id>19911387</id><snippet>|</snippet></ROW><ROW><id>19911387</id><snippet>$ head -1 file | sed 's/|/\n/g'
DelayTimeThreshold
MaxDelayPerMinute
Name
</snippet></ROW><ROW><id>19911387</id><snippet>$ tail -1 file | sed 's/|/\n/g'
10000
5
rca
</snippet></ROW><ROW><id>19911387</id><snippet>paste -d' ' output1 output2
</snippet></ROW><ROW><id>19911446</id><snippet>print(..., end='')</snippet></ROW><ROW><id>19911446</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>19911446</id><snippet>from time import sleep
import sys

for x in line_1:
    print(x, end='')
    sys.stdout.flush()
    sleep(0.1)
</snippet></ROW><ROW><id>19911446</id><snippet>from random import uniform
</snippet></ROW><ROW><id>19911446</id><snippet>sleep</snippet></ROW><ROW><id>19911446</id><snippet>sleep(uniform(0, 0.3))  # random sleep from 0 to 0.3 seconds
</snippet></ROW><ROW><id>19911592</id><snippet>&gt;&gt;&gt; import time, re
&gt;&gt;&gt; if True:
...     s = time.time()
...     "aaaa" in "bbbaaaaaabbb"
...     print time.time()-s
... 
True
1.78813934326e-05

&gt;&gt;&gt; if True:
...     s = time.time()
...     pattern = re.compile("aaaa")
...     pattern.search("bbbaaaaaabbb")
...     print time.time()-s
... 
&lt;_sre.SRE_Match object at 0xb74a91e0&gt;
0.0143280029297
</snippet></ROW><ROW><id>19911771</id><snippet>local_tz = pytz.timezone('US/Pacific-New')
date = datetime.datetime.fromtimestamp(
    float(data['timeStamp']) / 1000,
    local_tz
)
</snippet></ROW><ROW><id>19911883</id><snippet>pic = cStringIO.StringIO()
image_string = cStringIO.StringIO(base64.b64decode(request.POST['file']))
image = Image.open(image_string)
image.save(pic, image.format, quality = 100)
pic.seek(0)
return HttpResponse(pic, content_type='image/jpeg')
</snippet></ROW><ROW><id>19911960</id><snippet>&gt;&gt;&gt; print('-' * 60)
------------------------------------------------------------
</snippet></ROW><ROW><id>19911960</id><snippet>str</snippet></ROW><ROW><id>19911960</id><snippet>print()</snippet></ROW><ROW><id>19912170</id><snippet>function1()</snippet></ROW><ROW><id>19912170</id><snippet>function1()</snippet></ROW><ROW><id>19912170</id><snippet>function1()</snippet></ROW><ROW><id>19912170</id><snippet>function1()</snippet></ROW><ROW><id>19912170</id><snippet>def function2():
    print 'function2 has been called'

def function3():
    pass

def function1():
    # call the other functions
    function2()
    function3()
</snippet></ROW><ROW><id>19912220</id><snippet>class AbstractUser(AbstractBaseUser, PermissionsMixin):
    """
An abstract base class implementing a fully featured User model with
admin-compliant permissions.

Username, password and email are required. Other fields are optional.
"""
    username = models.CharField(_('username'), max_length=30, unique=True,
        help_text=_('Required. 30 characters or fewer. Letters, digits and '
                    '@/./+/-/_ only.'),
        validators=[
            validators.RegexValidator(r'^[\w.@+-]+$', _('Enter a valid username.'), 'invalid')
        ])
</snippet></ROW><ROW><id>19912258</id><snippet>wtforms</snippet></ROW><ROW><id>19912258</id><snippet>Field</snippet></ROW><ROW><id>19912258</id><snippet>class UnboundField(object):
    _formfield = True
    creation_counter = 0

    def __init__(self, field_class, *args, **kwargs):
        UnboundField.creation_counter += 1
        # [...]
        self.creation_counter = UnboundField.creation_counter
</snippet></ROW><ROW><id>19912258</id><snippet>Field</snippet></ROW><ROW><id>19912258</id><snippet>creation_counter</snippet></ROW><ROW><id>19912258</id><snippet>FormMeta</snippet></ROW><ROW><id>19912258</id><snippet>fields.sort(key=lambda x: (x[1].creation_counter, x[0]))
</snippet></ROW><ROW><id>19912739</id><snippet>    headers = reader.next()
    for row in headers:
        new_header = list(row[i] for i in pref_cols)
        print new_header  
</snippet></ROW><ROW><id>19912739</id><snippet>open</snippet></ROW><ROW><id>19912739</id><snippet>for row...</snippet></ROW><ROW><id>19912739</id><snippet>with open("CHS_2009_edit.txt", 'w') as output_file:
    writer = csv.writer(output_file)
    for row in reader:
        new_cols = list(row[i] for i in pref_cols)
        writer.writerows(new_cols)
</snippet></ROW><ROW><id>19912739</id><snippet>pref_cols = [...] # &lt;&lt;=== Should be set before entering the loop
with open('CHS_2009_test.txt', "rb") as sitefile:
    with open('CHS_2009_edit.txt', 'w') as output_file:
        reader = csv.reader(sitefile, delimiter=',')
        writer = csv.writer(output_file)
        for row in reader:
            new_row = list(row[i] for i in pref_cols)
            writer.writerow(new_row)
</snippet></ROW><ROW><id>19912739</id><snippet>writerow()</snippet></ROW><ROW><id>19912739</id><snippet>writerows()</snippet></ROW><ROW><id>19912895</id><snippet>text = text.encode('UTF-8', 'ignore')
with open('/temp/Out.txt', 'w') as file:
    file.write(text)
</snippet></ROW><ROW><id>19912895</id><snippet>text = text.encode('UTF-8', 'ignore')
try:
    file = open('/temp/Out.txt', 'w')
    file.write(text)
finally:
    file.close()
</snippet></ROW><ROW><id>19912898</id><snippet>not</snippet></ROW><ROW><id>19912898</id><snippet>&gt;&gt;&gt; x = [True, True, True, True]
&gt;&gt;&gt; [not y for y in x]
[False, False, False, False]  
&gt;&gt;&gt; x = [False, True, True, False]
&gt;&gt;&gt; [not y for y in x]
[True, False, False, True]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19912898</id><snippet>&gt;&gt;&gt; x = [True, True, True, True]
&gt;&gt;&gt; x[:] = [not y for y in x]
&gt;&gt;&gt; x
[False, False, False, False]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19913039</id><snippet>timerMananger.register(self.myMethod,5000) 
# registers an event to be called after 5 seconds
</snippet></ROW><ROW><id>19913039</id><snippet>def register(myMethod,t):
    pqueue.add(myMethod,time_now+t)

def tick():
    clock.tick()
    if(time_now &gt; pqueue[0]):
        pqueue.pop()[0]()
</snippet></ROW><ROW><id>19913098</id><snippet>input</snippet></ROW><ROW><id>19913098</id><snippet>eval</snippet></ROW><ROW><id>19913098</id><snippet>input</snippet></ROW><ROW><id>19913098</id><snippet>raw_input</snippet></ROW><ROW><id>19913098</id><snippet>raw_input</snippet></ROW><ROW><id>19913098</id><snippet>input</snippet></ROW><ROW><id>19913098</id><snippet>input</snippet></ROW><ROW><id>19913098</id><snippet>raw_input</snippet></ROW><ROW><id>19913098</id><snippet>try:
    raw_input  # No error on python2.x
except NameError:
    raw_input = input  # python3.x
</snippet></ROW><ROW><id>19913128</id><snippet>myurl = xbrlFiles[1].attrib[ns + 'url']
</snippet></ROW><ROW><id>19913264</id><snippet>groupby</snippet></ROW><ROW><id>19913264</id><snippet>cumsum</snippet></ROW><ROW><id>19913264</id><snippet>groupby</snippet></ROW><ROW><id>19913264</id><snippet>groupby</snippet></ROW><ROW><id>19913264</id><snippet>cumsum</snippet></ROW><ROW><id>19913264</id><snippet>groupby</snippet></ROW><ROW><id>19913264</id><snippet>contiguous=True/False</snippet></ROW><ROW><id>19913264</id><snippet>False</snippet></ROW><ROW><id>19913264</id><snippet>df = df.reset_index()
upper_limit = 20
lower_limit = 16
above_upper_line = df.Data &gt; upper_limit
upper_line_crossed = above_upper_line != above_upper_line.shift()
clusters = upper_line_crossed.cumsum()
below_lower_line = df.Data &lt; lower_limit

times = df[below_lower_line].groupby(clusters)["DateTime"].first().tolist()
</snippet></ROW><ROW><id>19913264</id><snippet>&gt;&gt;&gt; times
array(['2013-08-08T11:47:31.000000000-0400'], dtype='datetime64[ns]')
</snippet></ROW><ROW><id>19913297</id><snippet>func2()</snippet></ROW><ROW><id>19913297</id><snippet>func1()</snippet></ROW><ROW><id>19913297</id><snippet>and</snippet></ROW><ROW><id>19913297</id><snippet>if</snippet></ROW><ROW><id>19913297</id><snippet>x and y</snippet></ROW><ROW><id>19913297</id><snippet>x</snippet></ROW><ROW><id>19913297</id><snippet>x</snippet></ROW><ROW><id>19913297</id><snippet>y</snippet></ROW><ROW><id>19913297</id><snippet>func1() and func2()</snippet></ROW><ROW><id>19913297</id><snippet>func2()</snippet></ROW><ROW><id>19913297</id><snippet>func1()</snippet></ROW><ROW><id>19913297</id><snippet>func2()</snippet></ROW><ROW><id>19913297</id><snippet>all()</snippet></ROW><ROW><id>19913297</id><snippet>functions = (func1, func2, func3, func4)
if all(f() for f in functions):
</snippet></ROW><ROW><id>19913297</id><snippet>all()</snippet></ROW><ROW><id>19913297</id><snippet>func1</snippet></ROW><ROW><id>19913297</id><snippet>func2</snippet></ROW><ROW><id>19913297</id><snippet>func3</snippet></ROW><ROW><id>19913297</id><snippet>func4</snippet></ROW><ROW><id>19913297</id><snippet>all()</snippet></ROW><ROW><id>19913297</id><snippet>if</snippet></ROW><ROW><id>19913297</id><snippet>and</snippet></ROW><ROW><id>19913317</id><snippet>def sentence_splitter(file_name):
    with open(file_name) as f:
        input_str = f.read()
        period_indexes = get_periods(input_str)
        for el in period_indexes:
            sub_str = input_str[el - 14:el + 14]
            if not (re.search(r'\.\s+[A-Za-z]{1,3}\w+', sub_str) and # Error here
            re.search(r'\.\d+', sub_str) and
            re.search(r'\.\s+[a-z]+', sub_str) and
            re.search(r'([A-Za-z\.]+\.\w+){1,50}', sub_str) and
            re.search(r'\w+\.[\.,]+', s)):
                pass
</snippet></ROW><ROW><id>19913351</id><snippet>output_dict = {
    'pie': "I like pie",
    'banana': "I like bananas",
    'cake': "I like cake"
}

item = None
while item != 'die':
    item = raw_input("Select your item:")
    if item != 'die':
        item = output_dict.get(item, None)
        if item:
            print item
        else:
            print("Invalid entry. try again")   
</snippet></ROW><ROW><id>19913527</id><snippet>answer = models.ForeignKey(Answer, null=True, blank=True)
</snippet></ROW><ROW><id>19913527</id><snippet>__unicode__</snippet></ROW><ROW><id>19913527</id><snippet>def __unicode__(self, ):
    return self.answer.answer
</snippet></ROW><ROW><id>19913527</id><snippet>self.answer</snippet></ROW><ROW><id>19913527</id><snippet>None</snippet></ROW><ROW><id>19913527</id><snippet>None.answer</snippet></ROW><ROW><id>19913527</id><snippet>__unicode__</snippet></ROW><ROW><id>19913527</id><snippet>def __unicode__(self): #Remove the comma
    return u"%s" % self.answer.answer if self.answer else u''
</snippet></ROW><ROW><id>19913529</id><snippet>s</snippet></ROW><ROW><id>19913529</id><snippet>s[5:]</snippet></ROW><ROW><id>19913529</id><snippet>s[len(s):]</snippet></ROW><ROW><id>19913529</id><snippet>len(s)</snippet></ROW><ROW><id>19913529</id><snippet>s[len(s):len(s)]</snippet></ROW><ROW><id>19913532</id><snippet>try</snippet></ROW><ROW><id>19913532</id><snippet>user_input</snippet></ROW><ROW><id>19913532</id><snippet>except</snippet></ROW><ROW><id>19913532</id><snippet>try:
  self.age = int(user_input)
except ValueError:
  print "You didn't enter a number for age, try again"
</snippet></ROW><ROW><id>19913532</id><snippet>user_input</snippet></ROW><ROW><id>19913532</id><snippet>int()</snippet></ROW><ROW><id>19913532</id><snippet>self.age = 25</snippet></ROW><ROW><id>19913532</id><snippet>self.age</snippet></ROW><ROW><id>19913532</id><snippet>if</snippet></ROW><ROW><id>19913532</id><snippet>split()</snippet></ROW><ROW><id>19913532</id><snippet>user_input</snippet></ROW><ROW><id>19913532</id><snippet>'engineer janitor'</snippet></ROW><ROW><id>19913532</id><snippet>user_input.split()</snippet></ROW><ROW><id>19913532</id><snippet>['engineer', 'janitor']</snippet></ROW><ROW><id>19913532</id><snippet>&gt;&gt;&gt; user_input = 'engineer janitor'
&gt;&gt;&gt; user_input.split()
['engineer', 'janitor']
</snippet></ROW><ROW><id>19913532</id><snippet>split()</snippet></ROW><ROW><id>19913532</id><snippet>user_input.split(',')</snippet></ROW><ROW><id>19913532</id><snippet>len()</snippet></ROW><ROW><id>19913532</id><snippet>&gt;&gt;&gt; jobs = user_input.split()
&gt;&gt;&gt; len(jobs)
2
</snippet></ROW><ROW><id>19913545</id><snippet>spread.page_items[its.label == 'foo']</snippet></ROW><ROW><id>19913680</id><snippet>__all__</snippet></ROW><ROW><id>19913680</id><snippet>__all__</snippet></ROW><ROW><id>19913680</id><snippet>__all__ = ['SomeClass']
__all__ = [n.encode('ascii') for n in __all__]
</snippet></ROW><ROW><id>19913680</id><snippet>__all__</snippet></ROW><ROW><id>19913722</id><snippet>class Timer:
    def __init__(self):
        self.accumulated_time = 0
        self.start_time = pygame.time.get_ticks()
        self.running = True

    def pause(self):
        if not self.running:
            raise Exception('Timer is already paused')
        self.running = False
        self.accumulated_time += pygame.time.get_ticks() - self.start_time

    def resume(self):
        if self.running:
            raise Exception('Timer is already running')
        self.running = True
        self.start_time = pygame.time.get_ticks()

    def get(self):
        if self.running:
            return (self.accumulated_time +
                    (pygame.time.get_ticks() - self.start_time))
        else:
            return self.accumulated_time
</snippet></ROW><ROW><id>19913728</id><snippet>&gt;&gt;&gt; d = {'hello': 'world', 'with:colon': 'moo'}
&gt;&gt;&gt; '{hello} {}'.format(d['with:colon'],**d)
'world moo'
&gt;&gt;&gt; '{hello} {0}'.format(d['with:colon'],**d)
'world moo'
</snippet></ROW><ROW><id>19913796</id><snippet>import sys
import apiclient.discovery
import oauth2client.client
import httplib2
import pprint

# see example for using service account here: 
#   https://developers.google.com/drive/delegation
def main (argv):
    scopes = ('https://www.googleapis.com/auth/admin.directory.orgunit')
    service_account_email = 'xxx@developer.gserviceaccount.com'
    acting_as_user = 'yyy@zzz' # must have the privileges to view the org units
    f = file('key.p12', 'rb')
    key = f.read()
    f.close()
    credentials = oauth2client.client.SignedJwtAssertionCredentials(
        service_account_email,
        key,
        scope=scopes,
        sub=acting_as_user
        )
    http = httplib2.Http()
    http = credentials.authorize(http)
    directoryservice = apiclient.discovery.build('admin', 'directory_v1', http=http)
    response = directoryservice.orgunits().list(customerId='my_customer').execute(http=http)
    pprint.pprint(response)

if __name__ == '__main__':
    main(sys.argv)
</snippet></ROW><ROW><id>19913845</id><snippet>df['color'] = np.where(df['Set']=='Z', 'green', 'red')
</snippet></ROW><ROW><id>19913845</id><snippet>import pandas as pd
import numpy as np

df = pd.DataFrame({'Type':list('ABBC'), 'Set':list('ZZXY')})
df['color'] = np.where(df['Set']=='Z', 'green', 'red')
print(df)
</snippet></ROW><ROW><id>19913845</id><snippet>  Set Type  color
0   Z    A  green
1   Z    B  green
2   X    B    red
3   Y    C    red
</snippet></ROW><ROW><id>19913857</id><snippet>source</snippet></ROW><ROW><id>19913857</id><snippet>class CountrySerializer(serializers.Serializer):
    country_geoname_id = serializers.CharField(required=True)
    country_code = serializers.CharField(source='iso', max_length=2L, required=True)
    country_name = serializers.CharField(max_length=64L, required=True)
</snippet></ROW><ROW><id>19913861</id><snippet>knowngenes = r('read.table("known.genes", header=T, as.is=T)')
</snippet></ROW><ROW><id>19913861</id><snippet>knowngenes = r('read.table(known.genes, header=T, as.is=T)')
</snippet></ROW><ROW><id>19914035</id><snippet>import random

def encrypt3(message,key):
    random.seed(key)
    l = range(len(message))
    random.shuffle(l)
    return "".join([message[x] for x in l])


key = 'bob'
message = 'Hello World!'

print(encrypt3(message, key))


def unshuffle(message, key):
    random.seed(key)
    new_list = list(range(len(message)))
    old_list = [None] * len(new_list)

    random.shuffle(new_list)

    for i, old_i in enumerate(new_list):
        old_list[old_i] = message[i]

    return ''.join(old_list)


print(unshuffle(encrypt3(message, key), key))
</snippet></ROW><ROW><id>19914102</id><snippet>go()</snippet></ROW><ROW><id>19914102</id><snippet>class Dialog(QtGui.QDialog, x.Ui_Dialog):
    def __init__(self):
        super(Dialog, self).__init__()
        self.setupUi(self)
        self.buttonBox.accepted.connect(self.go)

    def go(self):
        what = self.lineEdit.text()
        print(what)
</snippet></ROW><ROW><id>19914102</id><snippet>dialog = Dialog()
if dialog.exec_() == QtGui.QDialog.Accepted:
     text = dialog.lineEdit.text()
     # do stuff with text...
else:
     print('cancelled')
</snippet></ROW><ROW><id>19914127</id><snippet>csvdata = pandas.read_csv('testing.csv', dtype={'TITLE5' : 'object', 'TITLE5.1' : 'object', 'TITLE5.2' : 'object', 'TITLE5.3' : 'object'})
</snippet></ROW><ROW><id>19914142</id><snippet>x</snippet></ROW><ROW><id>19914142</id><snippet>x.magnitude</snippet></ROW><ROW><id>19914142</id><snippet>x.magnitude</snippet></ROW><ROW><id>19914142</id><snippet>x</snippet></ROW><ROW><id>19914171</id><snippet>project/</snippet></ROW><ROW><id>19914171</id><snippet>project/__init__.py</snippet></ROW><ROW><id>19914171</id><snippet>project/version.py</snippet></ROW><ROW><id>19914171</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
__all__ = ('__version__',)
__version__ = $BUILD_NUMBER
</snippet></ROW><ROW><id>19914171</id><snippet>def get_version():
    """
    Gets the latest version number out of the package,
    saving us from maintaining it in multiple places.
    """
    local_results = {}
    execfile('project/version.py', {}, local_results)
    return local_results['__version__']

setup(
    name="Project",
    version=get_version(),
    ...
)
</snippet></ROW><ROW><id>19914210</id><snippet>    self.user = User.objects.create(username='testuser', password='12345', is_active=True, is_staff=True, is_superuser=True) 
    self.user.set_password('hello') 
    self.user.save() 
    self.user = authenticate(username='testuser', password='hello') 
    login = self.c.login(username='testuser', password='hello') 
    self.assertTrue(login)
</snippet></ROW><ROW><id>19914254</id><snippet>elif</snippet></ROW><ROW><id>19914254</id><snippet>import random
loop=1

while loop == 1:
 dice=input("Choose dice 4,6 or 12 sided")
 if dice =="4":
     n=random.randint(1,4)
     print(dice)
     print(str(n))
 elif dice =="6":
     n=random.randint(1,int(dice))
     print(dice)
     print(str(n))
 elif dice =="12":
     n=random.randint(1,int(dice))
     print(dice)
     print(str(n))
 else:
    print("Error")
</snippet></ROW><ROW><id>19914324</id><snippet>help(os.system)</snippet></ROW><ROW><id>19914324</id><snippet>system(...)
    system(command) -&gt; exit_status

    Execute the command (a string) in a subshell.
</snippet></ROW><ROW><id>19914324</id><snippet>subprocess.check_output</snippet></ROW><ROW><id>19914370</id><snippet>&lt;input type="file" class="remove-label"&gt;
</snippet></ROW><ROW><id>19914370</id><snippet>input.remove-label
{
    color: #fff;
}
</snippet></ROW><ROW><id>19914458</id><snippet>class attrdict(dict):
    def __init__(self, *args, **kwargs):
        dict.__init__(self, dict(*args))
        self.__dict__ = self
</snippet></ROW><ROW><id>19914458</id><snippet>&gt;&gt;&gt; d = attrdict(zip(("American","bbbb"),(2,2.5)))
&gt;&gt;&gt; d['American']
2
&gt;&gt;&gt; d['bbbb']
2.5
</snippet></ROW><ROW><id>19914548</id><snippet>scipy &gt;0.12.0</snippet></ROW><ROW><id>19914548</id><snippet>scipy.stats.pearson3</snippet></ROW><ROW><id>19914666</id><snippet>request.user.get_profile()</snippet></ROW><ROW><id>19914666</id><snippet>UserProfile</snippet></ROW><ROW><id>19914666</id><snippet>ControlInformation</snippet></ROW><ROW><id>19914666</id><snippet>Current_Status = request.user.get_profile()  
</snippet></ROW><ROW><id>19914666</id><snippet>Current_Status = ControlInformation.objects.get(user=request.user)
</snippet></ROW><ROW><id>19914666</id><snippet>from django.shortcuts import get_object_or_404
Current_Status = get_object_or_404(ControlInformation, user=request.user)
</snippet></ROW><ROW><id>19914731</id><snippet>except:</snippet></ROW><ROW><id>19914731</id><snippet>    try:
        inquire = ...                         
        ...
        if:
            ...
        else:
        print("NEED CERTAIN THINGS")    # unexpected unindent error on this line...
     except:     # Because this is missing
        pass     # Do something here
</snippet></ROW><ROW><id>19914731</id><snippet>except:</snippet></ROW><ROW><id>19914731</id><snippet>try...finally</snippet></ROW><ROW><id>19914731</id><snippet>try...except...else</snippet></ROW><ROW><id>19914785</id><snippet>datetime</snippet></ROW><ROW><id>19914785</id><snippet>strptime</snippet></ROW><ROW><id>19914785</id><snippet>pytz</snippet></ROW><ROW><id>19914785</id><snippet>from dateutil import parser
time1 = parser.parse('2012-04-30 23:59:01 EDT', tzinfos={'EDT' : +18000})
datetime.strftime(time1,'[%d/%b/%Y:%H:%M:%S %z]')
</snippet></ROW><ROW><id>19914987</id><snippet>In [1]: from pandas.io.packers import pack

In [2]: import cPickle as pkl

In [3]: df = pd.DataFrame(np.random.rand(1000, 100))
</snippet></ROW><ROW><id>19914987</id><snippet>In [6]: %timeit buf = pack(df)
1000 loops, best of 3: 492 ﾵs per loop

In [7]: %timeit buf = pkl.dumps(df,pkl.HIGHEST_PROTOCOL)
1000 loops, best of 3: 681 ﾵs per loop
</snippet></ROW><ROW><id>19914987</id><snippet>In [8]: df = pd.DataFrame(np.random.rand(100000, 100))

In [9]:  %timeit buf = pack(df)
10 loops, best of 3: 192 ms per loop

In [10]: %timeit buf = pkl.dumps(df,pkl.HIGHEST_PROTOCOL)
10 loops, best of 3: 119 ms per loop
</snippet></ROW><ROW><id>19914987</id><snippet>ctable</snippet></ROW><ROW><id>19915176</id><snippet> ('/blog/submit', SubmitHandler)   &lt;---- missed comma over here
 ('/blog/([0-9]+)', DisplayPost)], debug=True)
</snippet></ROW><ROW><id>19915176</id><snippet>('/blog/submit', SubmitHandler)(parameter)
</snippet></ROW><ROW><id>19915300</id><snippet>In [53]: [x for x in xrange(1)]
Out[53]: [0]
</snippet></ROW><ROW><id>19915300</id><snippet>x</snippet></ROW><ROW><id>19915300</id><snippet>coinFlip(1)</snippet></ROW><ROW><id>19915300</id><snippet>heads / x
</snippet></ROW><ROW><id>19915300</id><snippet>matplotlib</snippet></ROW><ROW><id>19915300</id><snippet>NumPy</snippet></ROW><ROW><id>19915300</id><snippet>coinFlip</snippet></ROW><ROW><id>19915300</id><snippet>import matplotlib.pyplot as plt
import numpy as np

def coinFlip(size):
    flips = np.random.randint(0, 2, size=size)
    return flips.mean()
coinFlip = np.frompyfunc(coinFlip, 1, 1)

xmin, xmax, dx = 1, 500, 1
x = np.arange(xmin, xmax, dx)
y = coinFlip(x)
plt.plot(x, y)
plt.show()
</snippet></ROW><ROW><id>19915300</id><snippet>def coinFlip(size):
    xmin, xmax, dx = 1, size, 1
    x = np.arange(xmin, xmax, dx)
    flips = np.random.randint(0, 2, size=size)
    return x, [flips[:i].mean() for i in x]

x, y = coinFlip(500)
plt.plot(x, y)
</snippet></ROW><ROW><id>19915300</id><snippet>fig, ax = plt.subplots()
ax.plot(x, y)
ax.set_xscale('log')
</snippet></ROW><ROW><id>19915325</id><snippet>objectName</snippet></ROW><ROW><id>19915325</id><snippet>    def initUI(self):
        self.centralWidget().setObjectName('CentralWidget')
        self.setStyleSheet("""
            #CentralWidget { background-image: url(./image.png) }
            """)
</snippet></ROW><ROW><id>19915486</id><snippet>'task=test'</snippet></ROW><ROW><id>19915486</id><snippet>test_client</snippet></ROW><ROW><id>19915486</id><snippet>application/x-www-form-urlencoded</snippet></ROW><ROW><id>19915486</id><snippet>reqparse</snippet></ROW><ROW><id>19915486</id><snippet>None</snippet></ROW><ROW><id>19915486</id><snippet>{'task': 'test'}</snippet></ROW><ROW><id>19915486</id><snippet>client = self.app.test_client()</snippet></ROW><ROW><id>19915486</id><snippet>app = self.app.test_client()</snippet></ROW><ROW><id>19915486</id><snippet>FlaskTesting.TestCase</snippet></ROW><ROW><id>19915486</id><snippet>self.client.post</snippet></ROW><ROW><id>19915489</id><snippet>\w</snippet></ROW><ROW><id>19915489</id><snippet>[a-zA-Z]</snippet></ROW><ROW><id>19915489</id><snippet>r'\w[a-zA-Z]\d{3,}'
</snippet></ROW><ROW><id>19915489</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; p = r'\w[a-zA-Z]\d{3,}'
&gt;&gt;&gt; re.match(p, "22222")
&gt;&gt;&gt; re.match(p, "AA012")
&lt;_sre.SRE_Match object at 0x105aca718&gt;
&gt;&gt;&gt; re.match(p, "1A222")
&lt;_sre.SRE_Match object at 0x105aca780&gt;
&gt;&gt;&gt; re.match(p, "_A222")
&lt;_sre.SRE_Match object at 0x105aca718&gt;
</snippet></ROW><ROW><id>19915489</id><snippet>r'[a-zA-Z\d][a-zA-Z]\d{3}'
</snippet></ROW><ROW><id>19915552</id><snippet>dict</snippet></ROW><ROW><id>19915552</id><snippet>import re
instance_dict = {}
with open('dictionary.txt') as f:
    for line in f:
        line_list = re.split(r'\t', line.rstrip('\n')) 
        instance_dict[line_list[1]] = Word(*line_list[:4]) 
</snippet></ROW><ROW><id>19915552</id><snippet>with</snippet></ROW><ROW><id>19915552</id><snippet>with</snippet></ROW><ROW><id>19915619</id><snippet>dest[4]</snippet></ROW><ROW><id>19915619</id><snippet>getaddrinfo</snippet></ROW><ROW><id>19915619</id><snippet>'::1'</snippet></ROW><ROW><id>19915619</id><snippet>'localhost'</snippet></ROW><ROW><id>19915619</id><snippet>addrs[0]</snippet></ROW><ROW><id>19915619</id><snippet>addrs[2]</snippet></ROW><ROW><id>19915619</id><snippet>socket.error: [Errno 22] Invalid argument</snippet></ROW><ROW><id>19915619</id><snippet>sendto</snippet></ROW><ROW><id>19915619</id><snippet>''</snippet></ROW><ROW><id>19915619</id><snippet>connect</snippet></ROW><ROW><id>19915619</id><snippet>dest[4]</snippet></ROW><ROW><id>19915619</id><snippet>send</snippet></ROW><ROW><id>19915619</id><snippet>EINVAL</snippet></ROW><ROW><id>19915619</id><snippet>ENOBUFS</snippet></ROW><ROW><id>19915619</id><snippet>sendto</snippet></ROW><ROW><id>19915619</id><snippet>connect</snippet></ROW><ROW><id>19915619</id><snippet>send</snippet></ROW><ROW><id>19915619</id><snippet>send</snippet></ROW><ROW><id>19915619</id><snippet>'\x80\0\0\0\0\0\0\0'</snippet></ROW><ROW><id>19915619</id><snippet>ENETUNREACH</snippet></ROW><ROW><id>19915619</id><snippet>EHOSTUNREACH</snippet></ROW><ROW><id>19915705</id><snippet>e</snippet></ROW><ROW><id>19915705</id><snippet>except ZeroDivisionError, caught_exception:
</snippet></ROW><ROW><id>19915705</id><snippet>except &lt;Exception&gt;, &lt;name&gt;:</snippet></ROW><ROW><id>19915705</id><snippet>except ZeroDivisionError as e:
</snippet></ROW><ROW><id>19915705</id><snippet>except (ZeroDivisionError, ValueError):
</snippet></ROW><ROW><id>19915705</id><snippet>e</snippet></ROW><ROW><id>19915705</id><snippet>def x(a, b):
    try:
        return a / b
    except ZeroDivisionError:
        return 0
</snippet></ROW><ROW><id>19915934</id><snippet>unseen_posts = Post.objects.exclude(seen__user=user)
</snippet></ROW><ROW><id>19915934</id><snippet>user</snippet></ROW><ROW><id>19915934</id><snippet>django.contrib.auth.models.User</snippet></ROW><ROW><id>19915934</id><snippet>request.user</snippet></ROW><ROW><id>19915934</id><snippet>seen__user</snippet></ROW><ROW><id>19915934</id><snippet>forignKey</snippet></ROW><ROW><id>19915934</id><snippet>Post</snippet></ROW><ROW><id>19915934</id><snippet>Seen</snippet></ROW><ROW><id>19915934</id><snippet>foreignKey</snippet></ROW><ROW><id>19915934</id><snippet>Seen</snippet></ROW><ROW><id>19915934</id><snippet>User</snippet></ROW><ROW><id>19915958</id><snippet>import json

newDictionary=json.loads(str(soup))
</snippet></ROW><ROW><id>19916027</id><snippet>obj</snippet></ROW><ROW><id>19916027</id><snippet>bool</snippet></ROW><ROW><id>19916027</id><snippet>x[obj]</snippet></ROW><ROW><id>19916027</id><snippet>In [4]: a.nonzero()
Out[4]: (array([0]), array([0]))
</snippet></ROW><ROW><id>19916027</id><snippet>b[a]</snippet></ROW><ROW><id>19916027</id><snippet>b[a.nonzero()]</snippet></ROW><ROW><id>19916027</id><snippet>In [6]: b[(np.array([0]), np.array([0]))]
Out[6]: array([1])
In [7]: b[a]
Out[7]: array([1])
</snippet></ROW><ROW><id>19916027</id><snippet>a</snippet></ROW><ROW><id>19916027</id><snippet>b</snippet></ROW><ROW><id>19916027</id><snippet>a</snippet></ROW><ROW><id>19916027</id><snippet>import numpy as np

a = np.array([True, False])
b = np.array([1, 2, 3, 4])
b.shape = (2,2)
print(b[a])    
# [[1 2]]
</snippet></ROW><ROW><id>19916110</id><snippet>keywordurl = "\n".join(line.strip() for line in f)
</snippet></ROW><ROW><id>19916110</id><snippet>keywordurl = "\\n".join(line.strip() for line in f)
</snippet></ROW><ROW><id>19916252</id><snippet>os.system</snippet></ROW><ROW><id>19916328</id><snippet>alist =[5,2,6,1,2]
blist =[1,5,2,4,1]

def argstest(*args):
    for i in args[2:]
        for j in i:
            if j &gt; 3:
                print j

argstest(5, 8, alist, blist)
</snippet></ROW><ROW><id>19916426</id><snippet>None</snippet></ROW><ROW><id>19916426</id><snippet>print 'Array = ', x
print 'The array backwards is',
print_array_backwards(x)
</snippet></ROW><ROW><id>19916471</id><snippet>$ProjectFileDir$</snippet></ROW><ROW><id>19916617</id><snippet>pip install nltk
</snippet></ROW><ROW><id>19916667</id><snippet>ax.autoscale(enable=False)</snippet></ROW><ROW><id>19916667</id><snippet>scatter</snippet></ROW><ROW><id>19916667</id><snippet>autoscale</snippet></ROW><ROW><id>19916667</id><snippet>axis</snippet></ROW><ROW><id>19916667</id><snippet>"x"</snippet></ROW><ROW><id>19916667</id><snippet>ax.autoscale(enable=False, axis="x")</snippet></ROW><ROW><id>19916719</id><snippet>__pycache__</snippet></ROW><ROW><id>19916719</id><snippet>__init__.py</snippet></ROW><ROW><id>19916719</id><snippet>agepct</snippet></ROW><ROW><id>19916719</id><snippet>__init__.py</snippet></ROW><ROW><id>19916719</id><snippet>__pycache__</snippet></ROW><ROW><id>19916719</id><snippet>__init__.py</snippet></ROW><ROW><id>19916776</id><snippet>from PIL import Image
import numpy as np
from skimage.transform import rotate

a = np.zeros((1000, 1000), dtype=np.uint8)

im = Image.fromarray(a)

%timeit im.rotate(10, Image.BICUBIC, expand=True)

ima = a / 255.0
%timeit rotate(ima, 10, order=1)
%timeit rotate(ima, 10, order=3)


## -- Output --
10 loops, best of 3: 41.3 ms per loop
10 loops, best of 3: 43.6 ms per loop
10 loops, best of 3: 101 ms per loop
</snippet></ROW><ROW><id>19916854</id><snippet>required_voters = db.session.query(Voter).outerjoin(Call).filter((Call.voter_id == None) | (Call.status_code != 'completed'))
</snippet></ROW><ROW><id>19916854</id><snippet>vwcc = db.session.query(distinct(Call.voter_id)).filter(Call.status_code == 'completed').subquery()
this will select all unique voters with completed calls
</snippet></ROW><ROW><id>19916866</id><snippet>xsl:copy-of</snippet></ROW><ROW><id>19916866</id><snippet>xsl:if</snippet></ROW><ROW><id>19916937</id><snippet>for line in open('songs.txt'):
</snippet></ROW><ROW><id>19916937</id><snippet>partition</snippet></ROW><ROW><id>19916937</id><snippet>    left, sep, right = line.partition('&amp;&amp;&amp;&amp;&amp;&amp;')
</snippet></ROW><ROW><id>19916937</id><snippet>left</snippet></ROW><ROW><id>19916937</id><snippet>right</snippet></ROW><ROW><id>19916937</id><snippet>strip</snippet></ROW><ROW><id>19916937</id><snippet>    left = left.strip()
    right = right.strip()
</snippet></ROW><ROW><id>19916937</id><snippet>call</snippet></ROW><ROW><id>19916937</id><snippet>check_call</snippet></ROW><ROW><id>19916937</id><snippet>Popen</snippet></ROW><ROW><id>19916941</id><snippet>zip()</snippet></ROW><ROW><id>19916941</id><snippet>for row in zip(*([key] + value for key, value in sorted(my_dict.items()))):
    print(*row)
</snippet></ROW><ROW><id>19916941</id><snippet>&gt;&gt;&gt; my_dict = {1:[1,2,3],4:[5,6,7],8:[9,10,11]}
&gt;&gt;&gt; for row in zip(*([key] + value for key, value in sorted(my_dict.items()))):
...     print(*row)
... 
1 4 8
1 5 9
2 6 10
3 7 11
</snippet></ROW><ROW><id>19916941</id><snippet>itertools.zip_longest()</snippet></ROW><ROW><id>19916941</id><snippet>from itertools import zip_longest
for row in zip_longest(*([key] + value for key, value in sorted(my_dict.items())), fillvalue=' '):
    print(*row)
</snippet></ROW><ROW><id>19916941</id><snippet>&gt;&gt;&gt; from itertools import zip_longest
&gt;&gt;&gt; my_dict = {1:[1,2,3],4:[5,6,7,8],8:[9,10,11,38,99]}
&gt;&gt;&gt; for row in zip_longest(*([key] + value for key, value in sorted(my_dict.items())), fillvalue=' '):
...     print(*row)
... 
1 4 8
1 5 9
2 6 10
3 7 11
  8 38
    99
</snippet></ROW><ROW><id>19916941</id><snippet>sep='\t'</snippet></ROW><ROW><id>19917046</id><snippet>seq</snippet></ROW><ROW><id>19917046</id><snippet>header</snippet></ROW><ROW><id>19917046</id><snippet>seq</snippet></ROW><ROW><id>19917046</id><snippet>re.sub</snippet></ROW><ROW><id>19917046</id><snippet>seq</snippet></ROW><ROW><id>19917046</id><snippet>seq</snippet></ROW><ROW><id>19917046</id><snippet>seq</snippet></ROW><ROW><id>19917046</id><snippet>SeqIO</snippet></ROW><ROW><id>19917118</id><snippet>AdminPost.tester</snippet></ROW><ROW><id>19917118</id><snippet>Post</snippet></ROW><ROW><id>19917118</id><snippet>class AdminPost(colander.MappingSchema):
    tester = DBSession.query(Post).all()
</snippet></ROW><ROW><id>19917118</id><snippet>print "Before import"
import some_module
print "After import"
some_module.SomeClass()
</snippet></ROW><ROW><id>19917118</id><snippet>some_module</snippet></ROW><ROW><id>19917118</id><snippet>class A(object):
    print "Inside A"
    def __init__(self):
        print "New instance of A"
</snippet></ROW><ROW><id>19917118</id><snippet>Before import
Inside A
After import
New instance of A
</snippet></ROW><ROW><id>19917118</id><snippet>def</snippet></ROW><ROW><id>19917118</id><snippet>__init__</snippet></ROW><ROW><id>19917118</id><snippet>class AdminPost(colander.MappingSchema):
    def __init__(self, *args, **kwargs):
        tester = DBSession.query(Post).all()
        colander.MappingSchema.__init__(self, *args, **kwargs)
</snippet></ROW><ROW><id>19917198</id><snippet>size = 20
nested = [L[size*i : size*(i+1)] for i in xrange(len(L)/size)]
</snippet></ROW><ROW><id>19917198</id><snippet>In [5]: L = range(400)

In [6]: size = 20

In [7]: nested = [L[size*i : size*(i+1)] for i in xrange(len(L)/size)]

In [8]: for sub in nested: print sub
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
[20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]
[40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
[60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
[80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
[100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]
[120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139]
[140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159]
[160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179]
[180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]
[200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219]
[220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239]
[240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259]
[260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279]
[280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]
[300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319]
[320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339]
[340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359]
[360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379]
[380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399]
</snippet></ROW><ROW><id>19917198</id><snippet>step</snippet></ROW><ROW><id>19917198</id><snippet>xrange</snippet></ROW><ROW><id>19917198</id><snippet>In [11]: nested = [L[i : i+size] for i in xrange(0, len(L), size)]

In [12]: for sub in nested: print sub
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
[20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39]
[40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59]
[60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79]
[80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
[100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]
[120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139]
[140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159]
[160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179]
[180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199]
[200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219]
[220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239]
[240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259]
[260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279]
[280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]
[300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319]
[320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339]
[340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359]
[360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379]
[380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399]
</snippet></ROW><ROW><id>19917292</id><snippet>p = pexpect.spawn('ssh  %s@%s ls'%(un,ip), timeout)
print(p.read())
</snippet></ROW><ROW><id>19917334</id><snippet>with session.begin():
    session.add_all([tableRow(row) for row in listOfRows])
</snippet></ROW><ROW><id>19917334</id><snippet>INSERT</snippet></ROW><ROW><id>19917334</id><snippet>session.begin</snippet></ROW><ROW><id>19917334</id><snippet>add_all</snippet></ROW><ROW><id>19917334</id><snippet>add</snippet></ROW><ROW><id>19917334</id><snippet>tableRow</snippet></ROW><ROW><id>19917334</id><snippet>with engine.begin() as connection:
    connection.execute(tableRow.__table__.insert().
                       values([row_to_dict(row) for row in listOfRows]))
</snippet></ROW><ROW><id>19917486</id><snippet>for r_,g_,b_ in r,g,b:
</snippet></ROW><ROW><id>19917486</id><snippet>for r_, g_, b_ in zip(r, g, b):
</snippet></ROW><ROW><id>19917486</id><snippet>#!/usr/bin/python
from PIL import Image

def rgb2hex(r, g, b):
    return '#{:02x}{:02x}{:02x}'.format(r, g, b)

img = Image.open('sample.png')

if img.mode in ('RGBA', 'LA') or (img.mode == 'P' and 'transparency' in img.info):   
    pixels = list(img.convert('RGBA').getdata())

    for r, g, b, a in pixels: # just ignore the alpha channel
       print rgb2hex(r, g, b)
</snippet></ROW><ROW><id>19917486</id><snippet>#!/usr/bin/python
from PIL import Image

def rgb2hex(r, g, b):
    return '#{:02x}{:02x}{:02x}'.format(r, g, b)

img = Image.open('sample.png')

if img.mode in ('RGBA', 'LA') or (img.mode == 'P' and 'transparency' in img.info):   
    pixels = img.convert('RGBA').load()
    width, height = img.size

    for x in range(width):
        for y in range(height):
            r, g, b, a = pixels[x, y]
            print 'x = %s, y = %s, hex = %s' % (x, y, rgb2hex(r, g, b))
</snippet></ROW><ROW><id>19917565</id><snippet>export PATH=$PATH:/home/randy/lib/python 
</snippet></ROW><ROW><id>19917565</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>19917565</id><snippet>chmod +x /home/randy/lib/python/gbmx.py
</snippet></ROW><ROW><id>19917565</id><snippet>gmbx.py</snippet></ROW><ROW><id>19917656</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>19917656</id><snippet>tag.contents[0]</snippet></ROW><ROW><id>19917656</id><snippet>Tag</snippet></ROW><ROW><id>19917656</id><snippet>&lt;hr&gt;</snippet></ROW><ROW><id>19917656</id><snippet>&gt;&gt;&gt; tag
&lt;p&gt;&lt;hr&gt; &lt;/hr&gt;&lt;/p&gt;
</snippet></ROW><ROW><id>19917656</id><snippet>tag.text</snippet></ROW><ROW><id>19917656</id><snippet>tag.contents[0]</snippet></ROW><ROW><id>19917656</id><snippet>for tag in soup.findAll('p'):
    articletext += tag.text
</snippet></ROW><ROW><id>19917901</id><snippet>args</snippet></ROW><ROW><id>19917901</id><snippet>temp = function(*args)
</snippet></ROW><ROW><id>19917901</id><snippet>*args</snippet></ROW><ROW><id>19917901</id><snippet>*args</snippet></ROW><ROW><id>19917901</id><snippet>*args</snippet></ROW><ROW><id>19917901</id><snippet>**kwargs</snippet></ROW><ROW><id>19917901</id><snippet>def iterator(iterations, function, *args, **kwargs):
    for i in range(iteration):
        temp = function(*args, **kwargs)
    return temp
</snippet></ROW><ROW><id>19918135</id><snippet>modules.variable</snippet></ROW><ROW><id>19918135</id><snippet>getattr</snippet></ROW><ROW><id>19918135</id><snippet>mod_object = getattr(modules, variable)
</snippet></ROW><ROW><id>19918203</id><snippet>re.search</snippet></ROW><ROW><id>19918203</id><snippet>MatchObject</snippet></ROW><ROW><id>19918203</id><snippet>None</snippet></ROW><ROW><id>19918203</id><snippet>re.search</snippet></ROW><ROW><id>19918203</id><snippet>re.findall</snippet></ROW><ROW><id>19918203</id><snippet>re.findall</snippet></ROW><ROW><id>19918283</id><snippet>form_data = process_form_data(self.request, form_list)
def process_form_data(request, form_list)
  ...
</snippet></ROW><ROW><id>19918283</id><snippet>class ProfilWizard(SessionWizardView):
  template_name = "gestionProfil/profil-step1.html"
  def done(self, form_list, **kwargs):
      form_data = process_form_data(form_list)
      user = authenticate(username = form_data[0]['username'], password = form_data[0]['password'])
      if user:
         login(self.request, user)
        return render_to_response('gestionProfil/profil.html', {'form_data': form_data})

  def process_form_data(form_list):
    form_data = [form.cleaned_data for form in form_list]
    username = form_data[0]['username']
    password = form_data[0]['password']
    email = form_data[0]['email']
    user = User.objects.create_user(username, email, password)
    user.first_name = form_data[1]['firstName']
    user.last_name = form_data[1]['lastName']
    user.save()
    return form_data
</snippet></ROW><ROW><id>19918283</id><snippet>user.backend = 'django.contrib.auth.backends.ModelBackend'
login(request, user)
</snippet></ROW><ROW><id>19918283</id><snippet>class ProfilWizard(SessionWizardView):
  template_name = "gestionProfil/profil-step1.html"
  def done(self, form_list, **kwargs):
      form_data = process_form_data(self.request, form_list)         
      return render_to_response('gestionProfil/profil.html', {'form_data': form_data})

  def process_form_data(self, request, form_list):
    form_data = [form.cleaned_data for form in form_list]
    username = form_data[0]['username']
    password = form_data[0]['password']
    email = form_data[0]['email']
    user = User.objects.create_user(username, email, password)
    user.first_name = form_data[1]['firstName']
    user.last_name = form_data[1]['lastName']
    user.save()
    user.backend = 'django.contrib.auth.backends.ModelBackend'
    login(request, user)
    return form_data
</snippet></ROW><ROW><id>19918421</id><snippet>def fib(n, depth=1):
    if n == 0 or n == 1:
        return (1, depth)
    else:
        result1, depth1 = fib(n-1, depth+1)
        result2, depth2 = fib(n-2, depth+1)
        return (result1 + result2, max(depth1, depth2))
</snippet></ROW><ROW><id>19918421</id><snippet>&gt;&gt;&gt; list(map(fib, range(5)))
[(1, 1), (1, 1), (2, 2), (3, 3), (5, 4)]
</snippet></ROW><ROW><id>19918489</id><snippet>data-section</snippet></ROW><ROW><id>19918489</id><snippet>chennai</snippet></ROW><ROW><id>19918489</id><snippet>from selenium import webdriver
from bs4 import BeautifulSoup
import time    

driver = webdriver.Firefox()
driver.get("URL GOES HERE")
# I noticed there is an ad here, sleep til page fully loaded.
time.sleep(10)

soup = BeautifulSoup(driver.page_source)
print len(soup.findAll(...}))
# or you can work directly in selenium      
...

driver.close()
</snippet></ROW><ROW><id>19918489</id><snippet>8</snippet></ROW><ROW><id>19918516</id><snippet>t=linspace(0,1000, 1000)
y=sin(0.1*t)
ii=find(t&gt;100)
plot(t[ii],y[ii])
</snippet></ROW><ROW><id>19918516</id><snippet>find</snippet></ROW><ROW><id>19918516</id><snippet>import numpy as np
import scipy as sp
import matplotlib.pyplot as plt

data = np.array([[17., 18., 19., 20., 31., 46.],\
[1.52,2.5,2.55,2.56,2.53,2.54],\
[7.04,7.06,9.05,11.08,7.06,11.06],\
[0.,0.,0.,0.,4.,4.]])

dataRound = sp.round_(data,1)
data[1,:] = dataRound[1,:]
ax1=plt.subplot(211)
ax2=subplot(212)

ax1.scatter(data[1,data[1,:]&lt;=1.5], data[2,data[1,:]&lt;=1.5], color = 'g')
ax2.scatter(data[1,data[1,:]&gt;=2.5], data[2,data[1,:]&gt;=2.5], color = 'b')
</snippet></ROW><ROW><id>19918516</id><snippet>ax1.scatter(data[2,data[1,:]&lt;=1.5], data[3,data[1,:]&lt;=1.5], color = 'g')
ax2.scatter(data[2,data[1,:]&gt;=2.5], data[3,data[1,:]&gt;=2.5], color = 'b')
</snippet></ROW><ROW><id>19918621</id><snippet>def main():
    name = "firstname lastname"

    for i in range(len(name)):
        print(name[i:] + name[:i])
main()
</snippet></ROW><ROW><id>19918718</id><snippet>args</snippet></ROW><ROW><id>19918718</id><snippet>&gt;&gt;&gt; try: 
...     raise RuntimeError('test', 5)
... except Exception as e:
...     print e.args
...
('test', 5)
</snippet></ROW><ROW><id>19918767</id><snippet>endblock</snippet></ROW><ROW><id>19918767</id><snippet>&lt;title&gt;{% block title %} My Base Template&lt;/title&gt;
</snippet></ROW><ROW><id>19918767</id><snippet>(% block content %)  =&gt; {% block content %}
</snippet></ROW><ROW><id>19918818</id><snippet>&gt;&gt;&gt; mylist  = [[1,2,3,4], [] , [1,2,3,4] , []]
&gt;&gt;&gt; [i for i,x in enumerate(mylist) if not x]
[1, 3]
</snippet></ROW><ROW><id>19918849</id><snippet>csvdata_old = csvdata.copy()
</snippet></ROW><ROW><id>19918849</id><snippet>from pandas.util.testing import assert_frame_equal
assert_frame_equal(csvdata, csvdata_old)
</snippet></ROW><ROW><id>19918849</id><snippet>try:
    assert_frame_equal(csvdata, csvdata_old)
    return True
except:  # appeantly AssertionError doesn't catch all
    return False
</snippet></ROW><ROW><id>19919012</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>19919012</id><snippet>urllib.request.urlopen</snippet></ROW><ROW><id>19919012</id><snippet>urllib.request.urlopen('http://anidb.net/perl-bin/animedb.pl?show=anime&amp;do.random=1')
</snippet></ROW><ROW><id>19919012</id><snippet>urllib.request.HTTPRedirectHandler</snippet></ROW><ROW><id>19919234</id><snippet>input</snippet></ROW><ROW><id>19919234</id><snippet>recipients_str = input("Please enter names of recipients: ")
recipients = recipients_str.split(",")
</snippet></ROW><ROW><id>19919234</id><snippet>for</snippet></ROW><ROW><id>19919234</id><snippet>for name in recipients:
</snippet></ROW><ROW><id>19919234</id><snippet>zip</snippet></ROW><ROW><id>19919234</id><snippet>for name, address in zip(recipients, addresses):
</snippet></ROW><ROW><id>19919234</id><snippet>str.format</snippet></ROW><ROW><id>19919234</id><snippet>letter_template = """New York, New York
11 March 2013
{name}
{address}

Dear {name},

Thank you for your service to New York City, and,
in particular, to the education of its residents.
Those in {address} appreciate it!

Best wishes to {name} and your family
"""

letter = letter_template.format(name=name, address=address)
</snippet></ROW><ROW><id>19919397</id><snippet>import numpy as np
import matplotlib
matplotlib.rcParams['text.usetex'] = False
import matplotlib.pyplot as plt
import pandas

df = pandas.DataFrame(np.random.uniform(size=37)*100, columns=['A'])
threshold = 75
fig, ax = plt.subplots(figsize=(8,3))

good = df['A'][df['A'] &gt;= threshold]
bad = df['A'][df['A'] &lt; threshold]

ax.bar(left=good.index, height=good, align='center', color='ForestGreen', zorder=5)
ax.bar(left=bad.index, height=bad, align='center', color='Firebrick', zorder=5)

ax.axhline(y=threshold, linewidth=2, color='ForestGreen', zorder=0)

ax.set_xticks(df.index)
ax.set_xlim(left=df.index[0]-0.75, right=df.index[-1]+0.75)

def annotateBars(row, ax=ax):
    if row &lt; 20:
        color = 'black'
        vertalign = 'bottom'
        vertpad = 2
    else:
        color = 'white'
        vertalign = 'top'
        vertpad = -2

    ax.text(row.name, row['A'] + vertpad, "{:.1f}%".format(row['A']),
            zorder=10, rotation=90, color=color,
            horizontalalignment='center',
            verticalalignment=vertalign,
            fontsize=6, weight='heavy')

junk = df.apply(annotateBars, axis=1)
</snippet></ROW><ROW><id>19919424</id><snippet>src_tz = pytz.timezone('GMT')
dt = src_tz.localize(dt)
</snippet></ROW><ROW><id>19919424</id><snippet>dst_tz = pytz.timezone('EST')
dt = dt.astimezone(dst_tz)
</snippet></ROW><ROW><id>19919440</id><snippet>blur</snippet></ROW><ROW><id>19919440</id><snippet>{ 
    "errors": {}
}
</snippet></ROW><ROW><id>19919440</id><snippet>{
    "errors": { 
        "name": "This field is required",
        "age": "Enter a numeric value between 0 and 99"
    }
}
</snippet></ROW><ROW><id>19919450</id><snippet>&gt;&gt;&gt; int(float(-1)/2)
0
&gt;&gt;&gt; int(float(-3)/2)
-1
&gt;&gt;&gt; int(float(1)/2)
0
&gt;&gt;&gt; int(float(3)/2)
1
</snippet></ROW><ROW><id>19919503</id><snippet>repeat</snippet></ROW><ROW><id>19919503</id><snippet>import itertools

def charCombination(n):
    return ["".join(item) for item in itertools.product("ATCG", repeat=n)]

print charCombination(1)
print charCombination(2)
print charCombination(3)
</snippet></ROW><ROW><id>19919503</id><snippet>['A', 'T', 'C', 'G']
['AA', 'AT', 'AC', 'AG', 'TA', 'TT', 'TC', 'TG', 'CA', 'CT', 'CC', 'CG', 'GA', 'GT', 'GC', 'GG']
['AAA', 'AAT', 'AAC', 'AAG', 'ATA', 'ATT', 'ATC', 'ATG', 'ACA', 'ACT', 'ACC', 'ACG', 'AGA', 'AGT', 'AGC', 'AGG', 'TAA', 'TAT', 'TAC', 'TAG', 'TTA', 'TTT', 'TTC', 'TTG', 'TCA', 'TCT', 'TCC', 'TCG', 'TGA', 'TGT', 'TGC', 'TGG', 'CAA', 'CAT', 'CAC', 'CAG', 'CTA', 'CTT', 'CTC', 'CTG', 'CCA', 'CCT', 'CCC', 'CCG', 'CGA', 'CGT', 'CGC', 'CGG', 'GAA', 'GAT', 'GAC', 'GAG', 'GTA', 'GTT', 'GTC', 'GTG', 'GCA', 'GCT', 'GCC', 'GCG', 'GGA', 'GGT', 'GGC', 'GGG']
</snippet></ROW><ROW><id>19919628</id><snippet>bools[e[0]:e[1]+2] = False
</snippet></ROW><ROW><id>19919628</id><snippet>slices = [np.s_[3:6], np.s_[11:17]]
for s in slices:
    bools[s] = False
</snippet></ROW><ROW><id>19919642</id><snippet>FTP.dir()</snippet></ROW><ROW><id>19919642</id><snippet>print(data.__len__())
ftpObj.dir(data.append)
print(data.__len__())
</snippet></ROW><ROW><id>19919750</id><snippet>quiver</snippet></ROW><ROW><id>19919750</id><snippet>import pylab as pl
import numpy as np

x = np.linspace(0, 2*np.pi, 100)
y = np.sin(x)

dx = np.diff(x)
dy = np.diff(y)

x2 = np.linspace(0, 2*np.pi, 10)
y2 = np.sin(x2)

dx = np.zeros_like(x2) + 1e-12
dy = np.sin(x2+dx) - y2

length = np.sqrt(dx**2 + dy**2)
dx /= length
dy /= length

fig, ax = pl.subplots()
ax.set_aspect("equal")
ax.plot(x, y, lw=4)

size = 20
ax.quiver(x2, y2, -dy, dx, headaxislength=size, headlength=size, headwidth=size, color="blue")
pl.margins(0.2)
</snippet></ROW><ROW><id>19920020</id><snippet>.replace</snippet></ROW><ROW><id>19920020</id><snippet>DataFrame</snippet></ROW><ROW><id>19920020</id><snippet>Series</snippet></ROW><ROW><id>19920020</id><snippet>&gt;&gt;&gt; df = pd.DataFrame(np.random.randint(1,5, size=(3,3)))
&gt;&gt;&gt; df
   0  1  2
0  3  4  3
1  2  1  2
2  4  2  3
&gt;&gt;&gt; map_array = {1:'one', 2:'two', 4:'four'}
&gt;&gt;&gt; df.replace(map_array)
      0     1    2
0     3  four    3
1   two   one  two
2  four   two    3
&gt;&gt;&gt; df.replace(map_array, inplace=True)
&gt;&gt;&gt; df
      0     1    2
0     3  four    3
1   two   one  two
2  four   two    3
</snippet></ROW><ROW><id>19920027</id><snippet>row01, row02, 192.168.1.1, 192.168.2.1, 192.168.3.1
</snippet></ROW><ROW><id>19920027</id><snippet>for row in reader:
    print row[0], ",", row[1], ",", row[2]
</snippet></ROW><ROW><id>19920027</id><snippet>row[2]</snippet></ROW><ROW><id>19920027</id><snippet>for row in reader:
    addresses = row[2].split(", ")
    for address in addresses:
        print row[0], ",", row[1], ",", address
</snippet></ROW><ROW><id>19920090</id><snippet>import itertools

def generate_replacements(lo, hi, alphabet, text):
    for count in range(lo, hi + 1):
        for indexes in itertools.combinations(range(len(text)), count):
            for letters in itertools.product(alphabet, repeat=count):
                new_text = list(text)
                actual_count = 0
                for index, letter in zip(indexes, letters):
                    if new_text[index] == letter:
                        continue
                    new_text[index] = letter
                    actual_count += 1
                if actual_count == count:
                    yield ''.join(new_text)

for text in generate_replacements(0, 2, 'BGCX', 'BBBX'):
    print text
</snippet></ROW><ROW><id>19920090</id><snippet>BBBX GBBX CBBX XBBX BGBX BCBX BXBX BBGX BBCX BBXX BBBB BBBG BBBC GGBX
GCBX GXBX CGBX CCBX CXBX XGBX XCBX XXBX GBGX GBCX GBXX CBGX CBCX CBXX
XBGX XBCX XBXX GBBB GBBG GBBC CBBB CBBG CBBC XBBB XBBG XBBC BGGX BGCX
BGXX BCGX BCCX BCXX BXGX BXCX BXXX BGBB BGBG BGBC BCBB BCBG BCBC BXBB
BXBG BXBC BBGB BBGG BBGC BBCB BBCG BBCC BBXB BBXG BBXC
</snippet></ROW><ROW><id>19920146</id><snippet>a</snippet></ROW><ROW><id>19920146</id><snippet>2a</snippet></ROW><ROW><id>19920146</id><snippet>b</snippet></ROW><ROW><id>19920146</id><snippet>3b</snippet></ROW><ROW><id>19920146</id><snippet>c</snippet></ROW><ROW><id>19920146</id><snippet>a</snippet></ROW><ROW><id>19920146</id><snippet>b</snippet></ROW><ROW><id>19920146</id><snippet>c</snippet></ROW><ROW><id>19920318</id><snippet>sort()</snippet></ROW><ROW><id>19920318</id><snippet>diff()</snippet></ROW><ROW><id>19920318</id><snippet>diff()</snippet></ROW><ROW><id>19920318</id><snippet>In [50]:
from collections import defaultdict
import cv2
import numpy as np
img = cv2.imread("test.jpg")

In [51]:
%%time
counts = defaultdict(int)
for row in img:
    for val in row:
        counts[tuple(val)] += 1
Wall time: 1.29 s

In [53]:
%%time
img2 = np.concatenate((img, np.zeros_like(img[:, :, :1])), axis=2).view(np.uint32).ravel()
img2.sort()
pos = np.r_[0, np.where(np.diff(img2) != 0)[0] + 1]
count = np.r_[np.diff(pos), len(img2) - pos[-1]]
r, g, b, _ = img2[pos].view(np.uint8).reshape(-1, 4).T
colors = zip(r, g, b)
result = dict(zip(colors, count))
Wall time: 177 ms

In [49]:
counts == result
Out[49]:
True
</snippet></ROW><ROW><id>19920318</id><snippet>pandas.value_counts()</snippet></ROW><ROW><id>19920433</id><snippet>%&gt;</snippet></ROW><ROW><id>19920433</id><snippet>{% url 'create_placement' organization.id %&gt;
</snippet></ROW><ROW><id>19920433</id><snippet>{% url 'create_placement' organization.id %}
</snippet></ROW><ROW><id>19920442</id><snippet>import re
str_typedef = """typedef enum x
{
    ...
} z;"""
pattern = 'typedef\s+enum\s+([a-zA-Z0-9_]+)\s*{[^{}]*}\s*([a-zA-Z0-9_]+)\s*;'
rs = re.findall(pattern, str_typedef)
for r in rs:
    enum_type_name = r.group(1)
    enum_name = r.group(2)
    # do operations with results here, or store to an array 
    # of dictionaries for use later.
</snippet></ROW><ROW><id>19920442</id><snippet>enum_type_name</snippet></ROW><ROW><id>19920442</id><snippet>enum_name</snippet></ROW><ROW><id>19920442</id><snippet>\s+</snippet></ROW><ROW><id>19920442</id><snippet>\s*</snippet></ROW><ROW><id>19920442</id><snippet>([a-zA-Z0-9_]+)</snippet></ROW><ROW><id>19920442</id><snippet>{[^{}]*}</snippet></ROW><ROW><id>19920442</id><snippet>{</snippet></ROW><ROW><id>19920442</id><snippet>{</snippet></ROW><ROW><id>19920442</id><snippet>}</snippet></ROW><ROW><id>19920442</id><snippet>}</snippet></ROW><ROW><id>19920583</id><snippet>diff(timeSeries)</snippet></ROW><ROW><id>19920583</id><snippet>timeSeries.diff()</snippet></ROW><ROW><id>19920583</id><snippet>&gt;&gt; timeSeries
0   2013-11-11 16:44:26
1   2013-11-11 17:37:15
2   2013-11-11 18:30:03
3   2013-11-11 19:22:51
4   2013-11-11 20:15:39
dtype: datetime64[ns]

&gt;&gt; timeSeries.diff()
0        NaT
1   00:52:49
2   00:52:48
3   00:52:48
4   00:52:48
dtype: timedelta64[ns]
</snippet></ROW><ROW><id>19920671</id><snippet>cnt</snippet></ROW><ROW><id>19920671</id><snippet>def findWords(filepath):
  with open(filepath) as infile:
    for line in infile:
      words = re.findall('\w+', line.lower())
      yield from words

cnt = collections.Counter(findWords('02.2003.BenBernanke.txt'))
</snippet></ROW><ROW><id>19920671</id><snippet>from itertools import tee
phrases = {'central bank', 'high inflation'}
fw1, fw2 = tee(findWords('02.2003.BenBernanke.txt'))   
next(fw2)
for w1,w2 in zip(fw1, fw2)):
  phrase = ' '.join([w1, w2])
  if phrase in phrases:
    cnt[phrase] += 1
</snippet></ROW><ROW><id>19920887</id><snippet>"$\nu$"</snippet></ROW><ROW><id>19920887</id><snippet>"$\\nu$"</snippet></ROW><ROW><id>19920887</id><snippet>r"$\nu$"</snippet></ROW><ROW><id>19921015</id><snippet>import urllib2
r = urllib2.urlopen(url)

In [29]: r = urllib2.urlopen(url)

In [30]: date = next(r).strip('# date=').rstrip()

In [31]: time = next(r).strip('# time=').rstrip()

In [32]: stamp = pd.to_datetime(x + ' ' + time)

In [33]: stamp
Out[33]: Timestamp('2013-11-12 00:00:00', tz=None)
</snippet></ROW><ROW><id>19921015</id><snippet>skiprows</snippet></ROW><ROW><id>19921015</id><snippet>In [34]: df = pd.read_csv("ftp://ftp.bom.gov.au/anon/gen/fwo/IDY02122.dat", comment='#',
             skiprows=1, na_values=-9999.0, quotechar='"', skipfooter=1,
             names=['stn', 'per', 'evap', 'amax', 'amin', 'gmin', 'suns',
                    'rain',   'prob'], header=0, converters={'stn': str})

In [43]: df['timestamp'] = stamp

In [44]: df.head()
Out[44]: 
      stn  per  evap  amax  amin  gmin  suns  rain   prob           timestamp
0  001006    0   NaN  39.9   NaN   NaN   NaN   2.9  100.0 2013-11-12 00:00:00
1  001006    1   NaN  35.8  25.8   NaN   NaN   7.0  100.0 2013-11-12 00:00:00
2  001006    2   NaN  37.0  25.5   NaN   NaN   4.0   71.4 2013-11-12 00:00:00
3  001006    3   NaN  39.0  26.0   NaN   NaN   1.0   60.0 2013-11-12 00:00:00
4  001006    4   NaN  41.2  26.1   NaN   NaN   0.0   40.0 2013-11-12 00:00:00
</snippet></ROW><ROW><id>19921214</id><snippet>any</snippet></ROW><ROW><id>19921214</id><snippet>pandas.Series.any</snippet></ROW><ROW><id>19921214</id><snippet>numpy.ndarray.any</snippet></ROW><ROW><id>19921214</id><snippet>numpy.any</snippet></ROW><ROW><id>19921214</id><snippet>numpy.any</snippet></ROW><ROW><id>19921214</id><snippet>float64</snippet></ROW><ROW><id>19921214</id><snippet>object</snippet></ROW><ROW><id>19921214</id><snippet>dtype</snippet></ROW><ROW><id>19921214</id><snippet>&gt;&gt;&gt; a = np.array([False, np.nan])
&gt;&gt;&gt; a
array([  0., nan])
&gt;&gt;&gt; a.dtype
float64
&gt;&gt;&gt; a.any()
True
&gt;&gt;&gt; a = np.array([False, np.nan], dtype=object)
&gt;&gt;&gt; a
array([False, nan], dtype=object)
&gt;&gt;&gt; a.any()
nan
&gt;&gt;&gt; p = pd.Series([False, np.nan])
&gt;&gt;&gt; p
0    False
1      NaN
&gt;&gt;&gt; p.dtype
dtype('O')
&gt;&gt;&gt; p.any()
nan
&gt;&gt;&gt; p = pd.Series([False, np.nan], dtype=np.float64)
&gt;&gt;&gt; p
0     0
1   NaN
&gt;&gt;&gt; p.any()
True
</snippet></ROW><ROW><id>19921297</id><snippet>setattr</snippet></ROW><ROW><id>19921297</id><snippet>def add_constants(names):
    def adder(cls):
        for i, name in enumerate(names):
            setattr(cls, name, i)
        return cls
    return adder

@add_constants("state1 state2".split())
class Node:
    pass
</snippet></ROW><ROW><id>19921593</id><snippet>html_str</snippet></ROW><ROW><id>19921593</id><snippet>txt='''\
Line 1
line 2
line 3
line 4
last line'''

print txt.rpartition('\n')[0]
</snippet></ROW><ROW><id>19921593</id><snippet>print txt.rsplit('\n',1)[0]
</snippet></ROW><ROW><id>19921593</id><snippet>with open("fb_remodel.csv",'a') as Html_file:
    # blah blah
    # at the end -- close is automatic.  
</snippet></ROW><ROW><id>19921593</id><snippet># create a test file of 'Line X of Y' type
with open('/tmp/lines.txt', 'w') as fout:      
    start,stop=1,11
    for i in range(start,stop):
        fout.write('Line {} of {}\n'.format(i, stop-start))
</snippet></ROW><ROW><id>19921593</id><snippet>from collections import deque

with open('/tmp/lines.txt') as fin:
    trim=6                              # print all but the last X lines
    d=deque(maxlen=trim+1)
    for line in fin:
        d.append(line)
        if len(d)&lt;trim+1: continue
        print d.popleft().strip()
</snippet></ROW><ROW><id>19921593</id><snippet>Line 1 of 10
Line 2 of 10
Line 3 of 10
Line 4 of 10
</snippet></ROW><ROW><id>19921593</id><snippet>&gt;&gt;&gt; d
deque(['Line 5 of 10\n', 'Line 6 of 10\n', 'Line 7 of 10\n', 'Line 8 of 10\n', 'Line 9 of 10\n', 'Line 10 of 10\n'], maxlen=7)
</snippet></ROW><ROW><id>19921629</id><snippet>odeint</snippet></ROW><ROW><id>19921629</id><snippet>scipy.integrate.complex_ode</snippet></ROW><ROW><id>19921629</id><snippet>complex_ode</snippet></ROW><ROW><id>19921629</id><snippet>n</snippet></ROW><ROW><id>19921629</id><snippet>2*n</snippet></ROW><ROW><id>19921629</id><snippet>odeint</snippet></ROW><ROW><id>19921629</id><snippet>ode</snippet></ROW><ROW><id>19921629</id><snippet>odeint</snippet></ROW><ROW><id>19921629</id><snippet>f(t, y, *args)</snippet></ROW><ROW><id>19921629</id><snippet>ode</snippet></ROW><ROW><id>19921629</id><snippet>complex_ode</snippet></ROW><ROW><id>19921629</id><snippet>f(y, t, *args)</snippet></ROW><ROW><id>19921629</id><snippet>odeint</snippet></ROW><ROW><id>19921629</id><snippet>odeintz</snippet></ROW><ROW><id>19921629</id><snippet>odeint</snippet></ROW><ROW><id>19921629</id><snippet>odeint</snippet></ROW><ROW><id>19921629</id><snippet>import numpy as np
from scipy.integrate import odeint


def odeintz(func, z0, t, **kwargs):
    """An odeint-like function for complex valued differential equations."""

    # Disallow Jacobian-related arguments.
    _unsupported_odeint_args = ['Dfun', 'col_deriv', 'ml', 'mu']
    bad_args = [arg for arg in kwargs if arg in _unsupported_odeint_args]
    if len(bad_args) &gt; 0:
        raise ValueError("The odeint argument %r is not supported by "
                         "odeintz." % (bad_args[0],))

    # Make sure z0 is a numpy array of type np.complex128.
    z0 = np.array(z0, dtype=np.complex128, ndmin=1)

    def realfunc(x, t, *args):
        z = x.view(np.complex128)
        dzdt = func(z, t, *args)
        # func might return a python list, so convert its return
        # value to an array with type np.complex128, and then return
        # a np.float64 view of that array.
        return np.asarray(dzdt, dtype=np.complex128).view(np.float64)

    result = odeint(realfunc, z0.view(np.float64), t, **kwargs)

    if kwargs.get('full_output', False):
        z = result[0].view(np.complex128)
        infodict = result[1]
        return z, infodict
    else:
        z = result.view(np.complex128)
        return z


if __name__ == "__main__":
    # Generate a solution to:
    #     dz1/dt = -z1 * (K - z2)
    #     dz2/dt = L - z2
    # K and L are fixed parameters.  z1(t) and z2(t) are complex-
    # valued functions of t.

    # Define the right-hand-side of the differential equation.
    def zfunc(z, t, K, L):
        z1, z2 = z
        return [-z1 * (K - z2), L - z2] 

    # Set up the inputs and call odeintz to solve the system.
    z0 = np.array([1+2j, 3+4j])
    t = np.linspace(0, 4, 101)
    K = 3
    L = 1
    z, infodict = odeintz(zfunc, z0, t, args=(K,L), full_output=True)

    # For comparison, here is how the complex system can be converted
    # to a real system.  The real and imaginary parts are used to
    # write a system of four coupled equations.  The formulas for
    # the complex right-hand-sides are
    #   -z1 * (K - z2) = -(x1 + i*y1) * (K - (x2 + i*y2))
    #                  = (-x1 - i*y1) * (K - x2 + i(-y2))
    #                  = -x1 * (K - x2) - y1*y2 + i*(-y1*(K - x2) + x1*y2)
    # and
    #   L - z2 = L - (x2 + i*y2)
    #          = (L - x2) + i*(-y2)
    def func(r, t, K, L):
        x1, y1, x2, y2 = r
        dx1dt = -x1 * (K - x2) - y1*y2
        dy1dt = -y1 * (K - x2) + x1*y2
        dx2dt = L - x2
        dy2dt = -y2
        return [dx1dt, dy1dt, dx2dt, dy2dt]

    # Use regular odeint to solve the real system.
    r, infodict = odeint(func, z0.view(np.float64), t, args=(K,L), full_output=True)

    # Compare the two solutions.  They should be the same.  (As usual for
    # floating point calculations, there could be a small difference.)
    delta_max = np.abs(z.view(np.float64) - r).max()
    print "Maximum difference between the complex and real versions is", delta_max


    # Plot the real and imaginary parts of the complex solution.

    import matplotlib.pyplot as plt

    plt.clf()
    plt.plot(t, z[:,0].real, label='z1.real')
    plt.plot(t, z[:,0].imag, label='z1.imag')
    plt.plot(t, z[:,1].real, label='z2.real')
    plt.plot(t, z[:,1].imag, label='z2.imag')
    plt.xlabel('t')
    plt.grid(True)
    plt.legend(loc='best')
    plt.show()
</snippet></ROW><ROW><id>19921691</id><snippet>&gt;&gt;&gt; oldList = [1, 2, 3, 4]
&gt;&gt;&gt; newList = [x for x in oldList for _ in range(2)]
&gt;&gt;&gt; newList
[1, 1, 2, 2, 3, 3, 4, 4]
</snippet></ROW><ROW><id>19921691</id><snippet>newList = []
for x in oldList:
    for _ in range(2):
        newList.append(x)
</snippet></ROW><ROW><id>19921789</id><snippet>class CommentForm(Form):
    language = SelectField(u'What You Want', choices=CAN_BE_FILLED_LATER_ON)
    code     = TextAreaField()
</snippet></ROW><ROW><id>19921864</id><snippet>from Tkinter import *

class Application(Frame):

    def __init__(self, master):
        Frame.__init__(self, master)
        self.master = master

        self.table = {}

        self.rightFrame = None # for first "grid_forget()"

        self.createButtons()

    #-----------------------------

    def run(self):
        self.master.mainloop()

    #-----------------------------

    #   creates buttons with alignment and their functions
    def createButtons(self):
        self.menuFrame = Frame(self.master)
        self.menuFrame.grid(row=0, column=0)

        load = Button(self.menuFrame, text="Load Table", command=self.loadTable)
        load.grid(row=0, column=0, pady=30)

        course = Button(self.menuFrame, text="Add Course", command=self.addCourse)
        course.grid(row=1, column=0, pady=30)

        time = Button(self.menuFrame, text="Add Time", command=self.addTime)
        time.grid(row=2, column=0, pady=30)

        reset = Button(self.menuFrame, text="Reset Time", command=self.resetTime)
        reset.grid(row=3, column=0, pady=30)

        comment = Button(self.menuFrame, text="Change Comment", command=self.changeComment)
        comment.grid(row=4, column=0, pady=30)

        view = Button(self.menuFrame, text="View Table", command=self.viewTable)
        view.grid(row=5, column=0, pady=30)

    #-----------------------------

    def loadTable(self):
        # remove previous content
        if self.rightFrame:
            self.rightFrame.grid_forget()

        # create new content
        self.rightFrame = Frame(self.master)
        self.rightFrame.grid(row=0, column=1, sticky=N)

        title = Label(self.rightFrame, text='load Table')
        title.grid(row=0, column=0)

    #-----------------------------

    def addCourse(self):
        # remove previous content
        if self.rightFrame:
            self.rightFrame.grid_forget()

        # create new content
        self.rightFrame = Frame(self.master)
        self.rightFrame.grid(row=0, column=1, sticky=N)

        #creates addCourse window and text boxes for input
        title = Label(self.rightFrame, text='Enter the course name')
        title.grid(row=0, column=0)

        courseBox = Entry(self.rightFrame, width=10)
        courseBox.grid(row=1, column=0)

        label = Label (self.rightFrame, text='Enter the hours per week spent on course')
        label.grid(row=2, column=0)

        weekHoursBox = Entry(self.rightFrame, width=10)
        weekHoursBox.grid(row=3, column=0)

        #function to accept input from boxes into dict
        def callback():
            course = courseBox.get()
            weekHours = weekHoursBox.get()
            string = "0 "+ str(weekHours) + " "
            self.table[course] = string

        enterB = Button(self.rightFrame, text='Enter Information', command=callback)
        enterB.grid(row=4, column=0)

    #-----------------------------

    def addTime(self):
        # remove previous content
        if self.rightFrame:
            self.rightFrame.grid_forget()

        # create new content
        self.rightFrame = Frame(self.master)
        self.rightFrame.grid(row=0, column=1, sticky=N)

        title = Label(self.rightFrame, text='Add Time')
        title.grid(row=0, column=0)

    #-----------------------------

    def resetTime(self):
        # remove previous content
        if self.rightFrame:
            self.rightFrame.grid_forget()

        # create new content
        self.rightFrame = Frame(self.master)
        self.rightFrame.grid(row=0, column=1, sticky=N)

        title = Label(self.rightFrame, text='Reset Time')
        title.grid(row=0, column=0)

    #-----------------------------

    def changeComment(self):
        # remove previous content
        if self.rightFrame:
            self.rightFrame.grid_forget()

        # create new content
        self.rightFrame = Frame(self.master)
        self.rightFrame.grid(row=0, column=1, sticky=N)

        title = Label(self.rightFrame, text='Change Comment')
        title.grid(row=0, column=0)

    #-----------------------------

    def viewTable(self):
        # remove previous content
        if self.rightFrame:
            self.rightFrame.grid_forget()

        # create new content
        self.rightFrame = Frame(self.master)
        self.rightFrame.grid(row=0, column=1, sticky=N)

        title = Label(self.rightFrame, text='View Table')
        title.grid(row=0, column=0)

#----------------------------------------------------------------------

Application(Tk()).run()
</snippet></ROW><ROW><id>19921874</id><snippet>python manage.py runserver 0.0.0.0:80</snippet></ROW><ROW><id>19921874</id><snippet>sudo python manage.py runserver 0.0.0.0:80</snippet></ROW><ROW><id>19921879</id><snippet>import csv
with open("filename", encoding="utf8", errors="replace") as f:
  for row in csv.reader(f):
    print(", ".join(row))
</snippet></ROW><ROW><id>19922154</id><snippet>def make_seats(seats, perrow, lastrow):
    full_rows = seats // perrow
    return [['Free' for _ in range(perrow)]
            for _ in range(full_rows)] + [['Free' for _ in range(lastrow)]]
</snippet></ROW><ROW><id>19922154</id><snippet>lastrow</snippet></ROW><ROW><id>19922154</id><snippet>seats % perrow</snippet></ROW><ROW><id>19922154</id><snippet>['Free' for _ in range(perrow)]</snippet></ROW><ROW><id>19922154</id><snippet>perrow</snippet></ROW><ROW><id>19922154</id><snippet>'Free'</snippet></ROW><ROW><id>19922154</id><snippet>full_rows</snippet></ROW><ROW><id>19922154</id><snippet>lastrow</snippet></ROW><ROW><id>19922319</id><snippet>print "Content-type:text/html"
print
print "&lt;html&gt;"
print "&lt;h1&gt;DATABASE&lt;/h1&gt;"
print "&lt;/html&gt;"
</snippet></ROW><ROW><id>19922319</id><snippet>write</snippet></ROW><ROW><id>19922319</id><snippet>#!/usr/bin/python
import cgitb
import MySQLdb
import cgi

with open('/tmp/logfile.log', 'wb') as logfile:

    logfile.write('About to enable cgitb\n')
    cgitb.enable()

    logfile.write('About to create FieldStorage\n')
    form = cgi.FieldStorage()

    logfile.write('About to get firstname\n')
    f_name = form.getvalue('firstname', '')
    logfile.write('Firstname is {}. About to get lastname\n'.format(firstname))
    l_name = form.getvalue('lastname', '')
    logfile.write('Lastname is {}. About to get age\n'.format(lastname))
    # and so on
</snippet></ROW><ROW><id>19922319</id><snippet>logging</snippet></ROW><ROW><id>19922319</id><snippet>#!/usr/bin/python
import cgitb
import MySQLdb
import cgi
import logging

logging.info('About to enable cgitb')
cgitb.enable()

logging.info('About to create FieldStorage')
form = cgi.FieldStorage()
</snippet></ROW><ROW><id>19922319</id><snippet>\n</snippet></ROW><ROW><id>19922319</id><snippet>.format</snippet></ROW><ROW><id>19922319</id><snippet>%</snippet></ROW><ROW><id>19922319</id><snippet>close</snippet></ROW><ROW><id>19922319</id><snippet>logging</snippet></ROW><ROW><id>19922319</id><snippet>with</snippet></ROW><ROW><id>19922319</id><snippet>import traceback
try:
    the line that raises
except Exception:
    traceback.print_exc(None, logfile)
    raise
</snippet></ROW><ROW><id>19922319</id><snippet>logging</snippet></ROW><ROW><id>19922319</id><snippet>sys.exc_info</snippet></ROW><ROW><id>19922319</id><snippet>traceback.format_exception</snippet></ROW><ROW><id>19922583</id><snippet>from Selenium2Library import Selenium2Library
from selenium.webdriver.common.action_chains import ActionChains

class Selenium2Improved(Selenium2Library):
    '''Sometimes Selenium2Library just dont go far enough.'''

    def __init__(self, timeout=5.0, implicit_wait=0.0, run_on_failure='Capture Page Screenshot'):
        super(Selenium2Improved, self).__init__()

    def mouse_down_at(self, locator, coordx, coordy):
        element = self._element_find(locator, True, False)
        if element is None:
            raise AssertionError("ERROR: Element %s not found." % (locator))
        ActionChains(self._current_browser()).move_to_element(element).move_by_offset(coordx, coordy).click_and_hold().perform()

    def mouse_up_at(self, locator, coordx, coordy):
        element = self._element_find(locator, True, False)
        if element is None:
            raise AssertionError("ERROR: Element %s not found." % (locator))
        ActionChains(self._current_browser()).move_to_element(element).move_by_offset(coordx, coordy).release().perform()
</snippet></ROW><ROW><id>19922627</id><snippet>min</snippet></ROW><ROW><id>19922627</id><snippet>max</snippet></ROW><ROW><id>19922627</id><snippet>&gt;&gt;&gt; min(266, 255)
255
&gt;&gt;&gt; max(-15, 0)
0
</snippet></ROW><ROW><id>19922627</id><snippet>&gt;&gt;&gt; oldList = [266, 40, -15, 13]
&gt;&gt;&gt; [max(min(x, 255), 0) for x in oldList]
[255, 40, 0, 13]
</snippet></ROW><ROW><id>19922674</id><snippet>operator.attrgetter</snippet></ROW><ROW><id>19922674</id><snippet>min(l, key=operator.attrgetter('foo'))
</snippet></ROW><ROW><id>19922674</id><snippet>&gt;&gt;&gt; class MyClass(object):
...     def __init__(self, val):
...         self._foo = val
...     def __repr__(self):
...         return 'MyClass({})'.format(self._foo)
...     @property
...     def foo(self):
...         return self._foo
... 
&gt;&gt;&gt; import operator
&gt;&gt;&gt; min([MyClass(3), MyClass(1), MyClass(2)], key=operator.attrgetter('foo'))
MyClass(1)
</snippet></ROW><ROW><id>19922963</id><snippet>def middle(x, y, z):
    return sorted([x, y, z])[1]
</snippet></ROW><ROW><id>19922963</id><snippet>def maximum(x, y, z):
    return max([x, y, z])
</snippet></ROW><ROW><id>19922963</id><snippet>y&gt;x and x&lt;z</snippet></ROW><ROW><id>19922963</id><snippet>x &lt; y &lt; z</snippet></ROW><ROW><id>19923034</id><snippet>{{ var|asrepr }}</snippet></ROW><ROW><id>19923034</id><snippet>@register.filter
def asrepr(value):
    return repr(value)
</snippet></ROW><ROW><id>19923229</id><snippet>import re
</snippet></ROW><ROW><id>19923229</id><snippet>print re.sub('\s+', ' ', articletext, flags=re.M)
</snippet></ROW><ROW><id>19923334</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>19923334</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; d = defaultdict(list)
with open('input.txt') as f:
    for line in f:
        k, v = map(int, line.split())
        d[k].append(v)


&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;,
{0: [0, 1, 2, 3, 4],
 1: [1, 2, 3, 4, 5],
 2: [3, 4], 3: [3],
 4: [5],
 5: [0]})
</snippet></ROW><ROW><id>19923334</id><snippet>dict.setdefault][2]</snippet></ROW><ROW><id>19923334</id><snippet>with open('input.txt') as f:
    for line in f:
        k, v = map(int, line.split())
        d.setdefault(k, []).append(v)
</snippet></ROW><ROW><id>19923506</id><snippet>reduce</snippet></ROW><ROW><id>19923506</id><snippet>operator.getitem</snippet></ROW><ROW><id>19923506</id><snippet>&gt;&gt;&gt; from operator import getitem
&gt;&gt;&gt; lis = ['car', 'ford', 'mustang']
</snippet></ROW><ROW><id>19923506</id><snippet>&gt;&gt;&gt; reduce(getitem, lis[:-1], DictOfVehiclePrices)[lis[-1]] = 'cheap'
</snippet></ROW><ROW><id>19923506</id><snippet>&gt;&gt;&gt; reduce(getitem, lis, DictOfVehiclePrices)
'cheap'
</snippet></ROW><ROW><id>19923551</id><snippet>openPage</snippet></ROW><ROW><id>19923551</id><snippet>web</snippet></ROW><ROW><id>19923551</id><snippet>return</snippet></ROW><ROW><id>19923551</id><snippet>def openPage():
    web = QWebView()
    web.load(QUrl('http://www.google.com'))
    web.setFixedSize(500, 500)
    web.show()
    return web

if __name__ == '__main__':
    app = QApplication(sys.argv)
    web = openPage()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>19923617</id><snippet>[program:MyExample]
command=/ama/nms/MyExample/supervisor_myexample.sh
process_name=%(program_name)s ; process_name expr (default %(program_name)s)
numprocs=1                    ; number of processes copies to start (def 1)
directory=/ama/nms/MyExample  ; directory to cwd to before exec (def no cwd)
priority=10                   ; the relative start priority (default 999)
autostart=true                ; start at supervisord start (default: true)
autorestart=true              ; retstart at unexpected quit (default: true)
startsecs=1                   ; number of secs prog must stay running (def. 1)
startretries=10                ; max # of serial start failures (default 3)
exitcodes=0,2                 ; 'expected' exit codes for process (default 0,2)
stopsignal=TERM               ; signal used to kill process (default TERM)
stopwaitsecs=10               ; max num secs to wait b4 SIGKILL (default 10)
</snippet></ROW><ROW><id>19923617</id><snippet>#!/bin/sh
# ------------------------------------------

# Set the environment
export LD_LIBRARY_PATH=&lt;...&gt;:$LD_LIBRARY_PATH
export PYTHONPATH=&lt;...&gt;:$PYTHONPATH

D=`dirname $0`
exec python $D/myexample.py arg1 arg2 arg3
</snippet></ROW><ROW><id>19923667</id><snippet>img = None

def openimage():
    global img

    picfile = tkFileDialog.askopenfilename()
    img = ImageTk.PhotoImage(file=picfile)
    canvas.create_image(0,0, anchor=NW, image=img) 
</snippet></ROW><ROW><id>19923667</id><snippet>canvas</snippet></ROW><ROW><id>19923667</id><snippet>def openimage():
    picfile = tkFileDialog.askopenfilename()
    canvas.img = ImageTk.PhotoImage(file=picfile)
    canvas.create_image(0,0, anchor=NW, image=canvas.img) 
</snippet></ROW><ROW><id>19923667</id><snippet>def openimage():
    picfile = tkFileDialog.askopenfilename()
    if picfile:
        canvas.img = ImageTk.PhotoImage(file=picfile)
        canvas.create_image(0,0, anchor=NW, image=canvas.img) 
</snippet></ROW><ROW><id>19923667</id><snippet>scrollregion</snippet></ROW><ROW><id>19923667</id><snippet>def openimage():
    picfile = tkFileDialog.askopenfilename()
    if picfile:
        canvas.img = ImageTk.PhotoImage(file=picfile)
        canvas.create_image(0,0, anchor=NW, image=canvas.img) 
        canvas.configure(canvas, scrollregion=(0,0,canvas.img.width(),canvas.img.height()))
</snippet></ROW><ROW><id>19923854</id><snippet>itertools.product</snippet></ROW><ROW><id>19923854</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; [list(xs) for xs in itertools.product([1,2,3], [1], [1,2,3,4])]
[[1, 1, 1], [1, 1, 2], [1, 1, 3], [1, 1, 4], [2, 1, 1], [2, 1, 2], [2, 1, 3], [2, 1, 4], [3, 1, 1], [3, 1, 2], [3, 1, 3], [3, 1, 4]]
</snippet></ROW><ROW><id>19923911</id><snippet>import groovy.json.*

def slurper = new JsonSlurper()
def result = slurper.parseText('{"person":{"name":"Guillaume","age":33,"pets":["dog","cat"]}}')

assert result.person.name == 'Guillaume'
</snippet></ROW><ROW><id>19924145</id><snippet>output.stdout</snippet></ROW><ROW><id>19924145</id><snippet>cmd = "commands"
output = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
for line in output.stdout:
    print(line)
</snippet></ROW><ROW><id>19924145</id><snippet>for line in iter(output.stdout.readline, ''):
    print(line)
</snippet></ROW><ROW><id>19924315</id><snippet>pip</snippet></ROW><ROW><id>19924315</id><snippet>easy_install</snippet></ROW><ROW><id>19924315</id><snippet>pip install jsonpickle
easy_install jsonpickle
</snippet></ROW><ROW><id>19924315</id><snippet>apt-get install</snippet></ROW><ROW><id>19924502</id><snippet>def Dist(a,b,c,d):
    x = float(b - a)
    y = float(d - c)
    u = min(x, y)
    v = max(x, y)
    return abs(v) * sqrt(1 + (u/v)**2)
</snippet></ROW><ROW><id>19924502</id><snippet>def Grav(a,b):
    return (G*a/b)/(b)
</snippet></ROW><ROW><id>19924502</id><snippet>v_r += (a_r/v_angle + r_a*v_angle)*delta_t*v_angle
</snippet></ROW><ROW><id>19924502</id><snippet>v_r += (a_r + r_a*v_angle**2)*delta_t
</snippet></ROW><ROW><id>19924502</id><snippet>theta_a += r_a*theta_a*delta_t % (2*pi)
</snippet></ROW><ROW><id>19924502</id><snippet>theta_a += r_a*theta_a*delta_t
</snippet></ROW><ROW><id>19924502</id><snippet>from math import *

##position of earth and ast. relative to sun, units in m/s/kg

r_earth = 1.4959787E11
x_e = r_earth
y_e = 0
v_ye = 29784.3405
v_xe = 0

x_a = 1.37801793E11
y_a = 2.31478719E11
v_ya = -14263.6905
v_xa = -8490.32975

##constants- masses and radius's of objects
G = 6.67384E-11
M_sun = 1.988500E30
M_earth = 5.9726E24
R_earth = 6371.0E3
M_ast = 1.30E11
R_ast = 250
t = 0 
delta_t = 10
t_max = 10000000
a_xe = 0
a_ye = 0
a_xa = 0
a_ya = 0


##Define Acceleration due to Gravity and Distance Formulas
def Grav(a,b):
    return (G*a/b)/(b) #Changed by jcrudy

def Dist(a,b,c,d): #Changed by jcrudy
    x = float(b - a)
    y = float(d - c)
    u = min(x, y)
    v = max(x, y)
    return abs(v) * sqrt(1 + (u/v)**2)

#    return sqrt((b-a)**2+(d-c)**2)

##Derived Constants
t_close = 0
d_close = Dist(x_a,x_e,y_a,y_e)
r_a = Dist(0,x_a,0,y_a)
theta_e = 0
theta_a = atan2(y_a,x_a)
v_angle = sqrt(v_xa**2+v_ya**2)/r_a
v_r1 = v_angle
v_r = sqrt(v_xa**2+v_ya**2)
T = 2* pi/(365*24*3600)
a_r = v_xa**2+v_ya**2
a_theta = (-Grav(M_sun, Dist(x_a,0,y_a,0))-Grav(M_earth,Dist(x_a,x_e,y_a,y_e)))**2-a_r**2

## Main Loop- assuming constant, circular orbit for earth (i.e M_ast is negligible)

for t in range(0, t_max):
    t += delta_t
    theta_e = T*t
    x_e = r_earth*cos( theta_e )
    y_e = r_earth*sin( theta_e )

## Convert asteroid parameters into polar coordinates and solve using Euler's Method

    a_r = v_xa**2+v_ya**2
    a_theta = (-Grav(M_sun, Dist(x_a,0,y_a,0))-Grav(M_earth,Dist(x_a,x_e,y_a,y_e)))**2-a_r**2 
    v_r1 = v_r
    v_r += (a_r/v_angle + r_a*v_angle)*delta_t*v_angle # Changed by jcrudy
    v_angle += (a_theta - 2*v_r1*v_angle)* delta_t
    theta_a += r_a*theta_a*delta_t % (2*pi) # Changed by jcrudy
    r_a += v_r*delta_t
    x_a = r_a*cos( theta_a)
    y_a = r_a*sin( theta_a)

## Test for minimum distance  

    if( Dist(x_a, x_e, y_a, y_e) &lt; d_close):
        d_close = Dist( x_a, x_e, y_a, y_e)
        t_close = t/(3600*24)
    continue
##Print Results:

print "d_close: ", d_close/1000, "km"
print "t_close: ", t_close
if( d_close &lt; R_earth):
    print "Impact: Y"

else:
    print "Impact: N"
</snippet></ROW><ROW><id>19924539</id><snippet>enumerate</snippet></ROW><ROW><id>19924539</id><snippet>str.format</snippet></ROW><ROW><id>19924539</id><snippet>&gt;&gt;&gt; elements = ['elem1','elem2','elem3']
&gt;&gt;&gt; output = ['prefix_{}'.format(i) for i, elem in enumerate(elements, 1)]
&gt;&gt;&gt; output
['prefix_1', 'prefix_2', 'prefix_3']
</snippet></ROW><ROW><id>19924562</id><snippet> from button import Button



 win = GraphWin("Phone", 140,160)
 win.setBackground("lightgray")
 quitButton0 =Button(win,Point(60,110),18,10,"0")
 quitButton0.label.setFill("black")
 quitButton0.rect.setWidth(1)
 quitButton0.active=True
 quitButton= Button(win, Point(60,20), 18, 10, "2")
 quitButton.label.setFill('black')

 quitButton.rect.setWidth(1)
 quitButton.active=True
 quitButton1 = Button(win, Point(30,20), 18, 10, "1")
 quitButton1.label.setFill('black')
 quitButton1.rect.setWidth(1)
 quitButton1.active=True
 quitButton2 = Button(win, Point(90,20), 18, 10, "3")
 quitButton2.label.setFill('black')
 quitButton2.rect.setWidth(1)
 quitButton2.active=True
 quitButton3 = Button(win, Point(30,50), 18, 10, "4")
 quitButton3.label.setFill('black')
 quitButton3.rect.setWidth(1)
 quitButton3.active = True
 quitButton4 = Button(win, Point(60,50), 18, 10, "5")
 quitButton4.label.setFill('black')
 quitButton4.rect.setWidth(1)
 quitButton4.active=True
 quitButton5 = Button(win, Point(90,50), 18, 10, "6")
 quitButton5.label.setFill('black')
 quitButton5.rect.setWidth(1)
 quitButton5.active=True
 quitButton6 = Button(win, Point(30,80), 18, 10, "7")
 quitButton6.label.setFill('black')
 quitButton6.rect.setWidth(1)
 quitButton6.active=True
 quitButton7 = Button(win, Point(60,80), 18, 10, "8")
 quitButton7.label.setFill('black')
 quitButton7.rect.setWidth(1)
 quitButton7.active=True
 quitButton8 = Button(win, Point(90,80), 18, 10, "9")
 quitButton8.label.setFill('black')
 quitButton8.rect.setWidth(1)
 quitButton8.active=True
 quitButton13 = Button(win, Point(90,200), 0, 0, "")
 quitButton13.label.setFill('gray')
 quitButton13.rect.setWidth(0)
 quitButton13.active=False


 c0=Circle(Point(60,110),10)
 c0.setFill("gray")
 c0.draw(win)
 Text(Point(60,110),"0").draw(win)
 c1 = Circle(Point(60,20),10)
 c1.setFill("gray")
 c1.draw(win)
 Text(Point(60,20), "2").draw(win)
 c2 = Circle(Point(90,20),10)
 c2.setFill("gray")
 c2.draw(win)
 Text(Point(90,20),"3").draw(win)
 c3 = Circle(Point(30,50),10)
 c3.setFill("gray")
 c3.draw(win)
 c4 = Circle(Point(60,50),10)
 c4.setFill("gray")
 c4.draw(win)
 Text(Point(30,50), "4").draw(win)
 c5 = Circle(Point(90,50),10)
 c5.setFill("gray")
 c5.draw(win)
 Text(Point(60,50), "5").draw(win)
 c6 = Circle(Point(30,80),10)
 c6.setFill("gray")
 c6.draw(win)
 Text(Point(90,50), "6").draw(win)
 c7 = Circle(Point(60,80),10)
 c7.setFill("gray")
 c7.draw(win)
 Text(Point(30,80), "7").draw(win)
 c8 = Circle(Point(90,80),10)
 c8.setFill("gray")
 c8.draw(win)
 Text(Point(60,80), "8").draw(win)
 Text(Point(90,80), "9").draw(win)
 close = Button(win, Point(30,20), 10, 10, "1")
 close.label.setFill("black")
 close.rect.setWidth(0)
 close.active=False
 Text(Point(30,20), "1").draw(win)
 but=Button(win,Point(30,20),10,10,"1")
 but.label.setFill("black")
 but.rect.setWidth(0)
 #but.active = False
 h = Circle(Point(30,20),10)
 h.setFill("gray")
 h.draw(win)
 Text(Point(30,20), "1").draw(win)
 pt = win.getMouse()

 while not but.clicked(pt):


    if quitButton8.clicked(pt):
         quitButton8.active=True
         print("9")
         c8.setFill("red")
         close.active=True
         c0.setFill("gray")
         quitButton1.active=False
         c1.setFill("gray")
         c2.setFill("gray")
         c3.setFill("gray")
         c4.setFill("gray")
         c5.setFill("gray")
         c6.setFill("gray")
         c7.setFill("gray")
         h.setFill("gray")

     elif close.clicked(pt):
         close.active=False
         h.setFill("red")
         print("1")
         but.active=True
         c1.setFill("gray")
         c2.setFill("gray")
         c3.setFill("gray")
         c4.setFill("gray")
         c5.setFill("gray")
         c6.setFill("gray")
         c7.setFill("gray")
         c8.setFill("gray")


     elif quitButton0.clicked(pt):
         print("0")
         c0.setFill("red")
         close.active=False
         c1.setFill("gray")
         c2.setFill("gray")
         c3.setFill("gray")
         c4.setFill("gray")
         c5.setFill("gray")
         c6.setFill("gray")
         c7.setFill("gray")
         h.setFill("gray")


         quitButton1.active=True

         c8.setFill("gray")

     elif quitButton.clicked(pt):
         print("2")
         c1.setFill("red")
         quitButton1.active=True
         close.active=False
         c8.setFill("gray")
         c0.setFill("gray")
         c3.setFill("gray")
         c4.setFill("gray")
         c5.setFill("gray")
         c6.setFill("gray")
         c7.setFill("gray")
         h.setFill("gray")



     elif quitButton1.clicked(pt):
         print("1")
         h.setFill("red")
         quitButton1.active=True
         but.active=False
         close.active = False
         c8.setFill("gray")
         c0.setFill("gray")
         c1.setFill("gray")
         c2.setFill("gray")
         c3.setFill("gray")
         c4.setFill("gray")
         c5.setFill("gray")
         c6.setFill("gray")
         c7.setFill("gray")

     elif quitButton2.clicked(pt):
         quitButton.active=True
         print("3")
         c2.setFill("red")
         quitButton1.active=True
         close.active=False
         c8.setFill("gray")
         c1.setFill("gray")
         c0.setFill("gray")
         c3.setFill("gray")
         c4.setFill("gray")
         c5.setFill("gray")
         c6.setFill("gray")
         c7.setFill("gray")
         h.setFill("gray")

     elif quitButton3.clicked(pt):
         quitButton3.active = True
         print("4")
         c3.setFill("red")
         quitButton1.active=True
         close.active=False
         c8.setFill("gray")
         c0.setFill("gray")
         c1.setFill("gray")
         c2.setFill("gray")
         c4.setFill("gray")
         c5.setFill("gray")
         c6.setFill("gray")
         c7.setFill("gray")
         h.setFill("gray")

     elif quitButton4.clicked(pt):
         quitButton4.active = True
         print("5")
         c4.setFill("red")
         close.active=False
         c8.setFill("gray")
         c0.setFill("gray")
         c1.setFill("gray")
         c2.setFill("gray")
         c3.setFill("gray")
         c5.setFill("gray")
         c6.setFill("gray")
         c7.setFill("gray")
         h.setFill("gray")
         close.active=False

         quitButton1.active=True
     elif quitButton5.clicked(pt):
         quitButton5.active = True
         print("6")
         c5.setFill("red")
         close.active=False
         c8.setFill("gray")
         c0.setFill("gray")
         c1.setFill("gray")
         c2.setFill("gray")
         c3.setFill("gray")
         c4.setFill("gray")
         c6.setFill("gray")
         c7.setFill("gray")
         h.setFill("gray")

         quitButton1.active=True
     elif quitButton6.clicked(pt):
         quitButton6.active = True
         print("7")
         c6.setFill("red")
         close.active=False
         quitButton1.active=True
         c8.setFill("gray")
         c0.setFill("gray")
         c1.setFill("gray")
         c2.setFill("gray")
         c3.setFill("gray")
         c4.setFill("gray")
         c5.setFill("gray")
         c7.setFill("gray")
         h.setFill("gray")

     elif quitButton7.clicked(pt):
         quitButton7.active = True
         print("8")
         c7.setFill("red")
         quitButton1.active=True
         close.active=False
         c8.setFill("gray")
         c0.setFill("gray")
         c1.setFill("gray")
         c2.setFill("gray")
         c3.setFill("gray")
         c4.setFill("gray")
         c5.setFill("gray")
         c6.setFill("gray")
         h.setFill("gray")


     pt = win.getMouse()

 win.close()
</snippet></ROW><ROW><id>19924562</id><snippet> if button 1.clicked(pt): 
           button1.setFill("red")
           button2.setFill("gray")
      elif button2.clicked(pt):
           button2.setFill("red")
           button1.setFill("gray") # that way if you click button 1, button 1 will turn red, when you click button 2, button 2 will turn red, and will turn button 1 to gray color
</snippet></ROW><ROW><id>19924740</id><snippet>for link in BeautifulSoup(page, parseOnlyThese=SoupStrainer('a')):
    if link.has_attr('href'):
        print link['href']
</snippet></ROW><ROW><id>19924740</id><snippet>text = soup.find('a').gettext()
</snippet></ROW><ROW><id>19924753</id><snippet>from threading import Thread, Lock

shared_balance = 0

class Deposit(Thread):
    def __init__(self, lock):
        super(Deposit, self).__init__()
        self.lock = lock
    def run(self):
        global shared_balance
        for i in xrange(1000000):
            with self.lock:
                shared_balance += 100

class Withdraw(Thread):
    def __init__(self, lock):
        super(Withdraw, self).__init__()
        self.lock = lock
    def run(self):
        global shared_balance
        for i in xrange(1000000):
            with self.lock:
                shared_balance -= 100

shared_lock = Lock()
thread1 = Deposit(shared_lock)
thread2 = Withdraw(shared_lock)

thread1.start()
thread2.start()

thread1.join()
thread2.join()

print shared_balance
</snippet></ROW><ROW><id>19924753</id><snippet>&gt;&gt;&gt; 0
</snippet></ROW><ROW><id>19924753</id><snippet>a = 0
def f():
    global a
    a += 10
</snippet></ROW><ROW><id>19924753</id><snippet> 6 LOAD_GLOBAL              0 (a)     # Load global "a"  UNSAFE ZONE
 9 LOAD_CONST               2 (10)    # Load value "10"  UNSAFE ZONE
12 INPLACE_ADD                        # Perform "+="     UNSAFE ZONE
13 STORE_GLOBAL             0 (a)     # Store global "a" 
16 LOAD_CONST               0 (None)  # Load "None"
19 RETURN_VALUE                       # Return "None"  
</snippet></ROW><ROW><id>19925031</id><snippet>str.startswith</snippet></ROW><ROW><id>19925031</id><snippet>if line.startswith((u'місто', u'м.')):
</snippet></ROW><ROW><id>19925031</id><snippet>str.startswith</snippet></ROW><ROW><id>19925031</id><snippet>startswith(...)
    S.startswith(prefix[, start[, end]]) -&gt; bool
</snippet></ROW><ROW><id>19925031</id><snippet>S</snippet></ROW><ROW><id>19925135</id><snippet>sklearn</snippet></ROW><ROW><id>19925135</id><snippet>StandardScaler</snippet></ROW><ROW><id>19925135</id><snippet>sklearn</snippet></ROW><ROW><id>19925135</id><snippet>0.13</snippet></ROW><ROW><id>19925135</id><snippet>python -c "import sklearn; print(sklearn.__version__)"
</snippet></ROW><ROW><id>19925369</id><snippet>[info]

Width = 100

Height = 200

Name = My Game
</snippet></ROW><ROW><id>19925369</id><snippet>import ConfigParser

configParser = ConfigParser.RawConfigParser()
configFilePath = os.path.join(os.path.dirname(__file__), myConfig.cfg')
configParser.read(configFilePath)
gameName = configParser.get("info","Name")
gameWidth  = configParser.get("info","Width")
gameHeight = configParser.get("info","Height")

configParser.set('info', 'Name', 'newName')
config.write(configFilePath)
</snippet></ROW><ROW><id>19925369</id><snippet>ConfigParser</snippet></ROW><ROW><id>19925369</id><snippet>.cfg</snippet></ROW><ROW><id>19925388</id><snippet>numpy</snippet></ROW><ROW><id>19925388</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; rf = [[1,0,1,0,1,0,0,0]] * 8
&gt;&gt;&gt; m = np.array(rf)
&gt;&gt;&gt; m.diagonal(0)
array([1, 0, 1, 0, 1, 0, 0, 0])
&gt;&gt;&gt; m.diagonal(1)
array([0, 1, 0, 1, 0, 0, 0])
</snippet></ROW><ROW><id>19925388</id><snippet>def consecutive_values(arr, val=1, cnt=3):
    def comparator(pos):
        return arr[pos] == val
    if len &lt; cnt:
        return []
    else:
        return [p for p, x in  enumerate(arr[:1-cnt]) 
                     if all(map(comparator, xrange(p, p+cnt, 1)))]
</snippet></ROW><ROW><id>19925388</id><snippet>&gt;&gt;&gt; consecutive_values([1]*5)
[0, 1, 2]

&gt;&gt;&gt; consecutive_values([1]*5 + [0]*4 + [1]*3)
[0, 1, 2, 9]

&gt;&gt;&gt; m = np.array([[1]*8]*8)
&gt;&gt;&gt; diagonals = map(m.diagonal, range(len(m)))
&gt;&gt;&gt; map(consecutive_values, diagonals)
[[0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4], [0, 1, 2, 3], [0, 1, 2], [0, 1], [0], [], []]
</snippet></ROW><ROW><id>19925814</id><snippet>class ApiDataset(object):
    def __init__(self, api_addr):
        self.http_api_addr = api_addr
        self.data = None

    def cache_data(self):
        # Access API and cache returned data on object.
        if self.data is None:
            self.data = get_data_from_api()

    def __iter__(self):
        self.cache_results()
        for item in self.data['objects']:
            yield item

    def __len__(self):
        self.cache_results()
        return self.data['total_count']
</snippet></ROW><ROW><id>19925827</id><snippet>{% url %}</snippet></ROW><ROW><id>19925941</id><snippet>&lt;img src="{{ STATIC_URL }}assets/images/pythonlogo.jpeg"&gt; 
</snippet></ROW><ROW><id>19925941</id><snippet>/whatever/whatever/static/assets/images/pythonlogo.jpeg</snippet></ROW><ROW><id>19925941</id><snippet>PROJECT_PATH = os.path.abspath(os.path.dirname(__file__))
STATIC_ROOT = os.path.join(PROJECT_PATH, "static")
STATIC_URL = '/static/'
</snippet></ROW><ROW><id>19926367</id><snippet>$^\circ Text</snippet></ROW><ROW><id>19926367</id><snippet>°Text</snippet></ROW><ROW><id>19926367</id><snippet>plt.xlabel('Manufactured Ply Angle $^\circ')</snippet></ROW><ROW><id>19926921</id><snippet>wind = np.random.randn(100) + np.random.randn(100).cumsum() * 0.5
x = np.arange(len(wind))
y = wind
t = y

fig, ax = plt.subplots(2,1,figsize=(10,6))

ax[0].plot(x,y)

ax[1].plot(x, 100- y * 10, lw=2, c='black')

ymin, ymax = ax[1].get_ybound()
xmin, xmax = ax[1].get_xbound()

im = ax[1].imshow(y.reshape(1, y.size), extent=[xmin,xmax,ymin,ymax], interpolation='none', alpha=.5, cmap=plt.cm.RdYlGn_r)
ax[1].set_aspect(ax[0].get_aspect())

cax = fig.add_axes([.95,0.3,0.01,0.4])
cb = plt.colorbar(im, cax=cax)
cb.set_label('Y parameter [-]')
</snippet></ROW><ROW><id>19926921</id><snippet>imshow</snippet></ROW><ROW><id>19926921</id><snippet>imshow</snippet></ROW><ROW><id>19926921</id><snippet>cmap=</snippet></ROW><ROW><id>19927017</id><snippet>db = pg.DB(dbname='xxx', host='xxxx', user='xxx')
pgqueryset = db.get_tables()
</snippet></ROW><ROW><id>19927187</id><snippet>with open("Input.txt") as inputFile:
    lines = [line for line in inputFile]
    month, mydate, time_start, time_stop = [lines[0].strip()] + lines[1].strip().split()
    print month, mydate, time_start, time_stop
</snippet></ROW><ROW><id>19927187</id><snippet>April 2011 05.05.2013 8:30 20:50
</snippet></ROW><ROW><id>19927344</id><snippet>t = MyThreadWithArgs(args=(), kwargs={deviceGPIO, duration})
</snippet></ROW><ROW><id>19927344</id><snippet>kwargs</snippet></ROW><ROW><id>19927344</id><snippet>__init__</snippet></ROW><ROW><id>19927344</id><snippet>{'args': (), 'kwargs': {&lt;deviceGPIO value&gt;, &lt;duration value&gt;}}
</snippet></ROW><ROW><id>19927344</id><snippet>kwargs</snippet></ROW><ROW><id>19927344</id><snippet>__init__</snippet></ROW><ROW><id>19927344</id><snippet>deviceGPIO</snippet></ROW><ROW><id>19927344</id><snippet>duration</snippet></ROW><ROW><id>19927344</id><snippet>t = MyThreadWithArgs(deviceGPIO=deviceGPIO, duration=duration)
</snippet></ROW><ROW><id>19927344</id><snippet>deviceGPIO</snippet></ROW><ROW><id>19927344</id><snippet>duration</snippet></ROW><ROW><id>19927344</id><snippet>Thread.__init__</snippet></ROW><ROW><id>19927344</id><snippet>Thread</snippet></ROW><ROW><id>19927344</id><snippet>class MyThreadWithArgs(threading.Thread):
        def __init__(self, deviceGPIO="default value", duration="default value"):
            threading.Thread.__init__(self)

            self.deviceGPIO = deviceGPIO
            self.duration = duration
</snippet></ROW><ROW><id>19927344</id><snippet>return</snippet></ROW><ROW><id>19927344</id><snippet>class MyThreadWithArgs(threading.Thread):
        def __init__(self, deviceGPIO="default value", duration="default value", **kwargs):
            threading.Thread.__init__(self, **kwargs)

            self.deviceGPIO = deviceGPIO
            self.duration = duration
</snippet></ROW><ROW><id>19927344</id><snippet>Thread._init__()</snippet></ROW><ROW><id>19927344</id><snippet>MyThreadWithArgs()</snippet></ROW><ROW><id>19927344</id><snippet>group</snippet></ROW><ROW><id>19927344</id><snippet>name</snippet></ROW><ROW><id>19927532</id><snippet>key</snippet></ROW><ROW><id>19927532</id><snippet>keyword</snippet></ROW><ROW><id>19927532</id><snippet>{'key': 'foo_value'}</snippet></ROW><ROW><id>19927532</id><snippet>#!/usr/bin/python
import sys
import json
import urllib2

req = urllib2.Request("http://url/feed.json")
opener = urllib2.build_opener()
f = opener.open(req)
json_response = json.loads(f.read())
keywords = ['key', 'key2', 'key3']
for k, v in json_response.iteritems():
    if k in keywords:
        print(v)
        break
</snippet></ROW><ROW><id>19927532</id><snippet>requests</snippet></ROW><ROW><id>19927532</id><snippet>#!/usr/bin/env python
import requests

res = requests.get('http://url/feed.json')
json_res = res.json()

keywords = ['key', 'key2', 'key3']
for k, v in json_res.iteritems():
    if k in keywords:
        print(v)
        break
</snippet></ROW><ROW><id>19927936</id><snippet>[lst[0].split() for lst in list_of_lists]
</snippet></ROW><ROW><id>19927936</id><snippet>for sublist in list_of_lists:
    if 'doing' in sublist:
        sublist.append('something')
</snippet></ROW><ROW><id>19927936</id><snippet>any()</snippet></ROW><ROW><id>19927936</id><snippet>for sublist in list_of_lists:
    if any(w.lower() == 'doing' for w in sublist):
        sublist.append('something')
</snippet></ROW><ROW><id>19928030</id><snippet>'{{option_D[x]}}'</snippet></ROW><ROW><id>19928030</id><snippet>x</snippet></ROW><ROW><id>19928030</id><snippet>alert({{ option_D }}[x]);
</snippet></ROW><ROW><id>19928030</id><snippet>option_D</snippet></ROW><ROW><id>19928117</id><snippet>my_list = []
my_list.insert(index, object)  
</snippet></ROW><ROW><id>19928117</id><snippet>self.points.append(Point(x,y)) 
</snippet></ROW><ROW><id>19928117</id><snippet>class Route:
    def __init__(self):
        self.points = []


    def add (self, x, y, index):
        self.points.insert(Point(x,y), index)
</snippet></ROW><ROW><id>19928180</id><snippet>def update_level(username, new_level):
   inpath = "/path/to/your/file"
   outpath = "path/to/tmpfile"
   with open(inpath) as infile:
       with open(outpath, "w") as outfile:
           for line in infile:
               line = line.strip()
               name, level = line.split()
               if name == username:
                   line = " ".join((username, new_level))
               outfile.write("%s\n" % line)
   os.rename(outpath, inpath)
</snippet></ROW><ROW><id>19928517</id><snippet>Test1</snippet></ROW><ROW><id>19928517</id><snippet>class Test1(object):
    def __init__(self):
        pass
    def a(self):
        print("Running a of Test1")
        test_instance2 = Test2(self)
    def z(self):
        print("Running z of Test1")

class Test2:
    def __init__(self, a):
        self.b(a)
    def b(self, a):
        print('Running b of Test2')
        a.z()
</snippet></ROW><ROW><id>19928517</id><snippet>a</snippet></ROW><ROW><id>19928517</id><snippet>Test2</snippet></ROW><ROW><id>19928517</id><snippet>class Test2:
    def __init__(self, a):
        self.a = a
        self.b()
    def b(self, a):
        print('Running b of Test2')
        self.a.z()
</snippet></ROW><ROW><id>19928674</id><snippet>models.py</snippet></ROW><ROW><id>19928674</id><snippet>Project/apps</snippet></ROW><ROW><id>19928876</id><snippet>Spinner</snippet></ROW><ROW><id>19928876</id><snippet>option_cls</snippet></ROW><ROW><id>19928876</id><snippet>SpinnerOption</snippet></ROW><ROW><id>19928876</id><snippet>Button</snippet></ROW><ROW><id>19928876</id><snippet>text</snippet></ROW><ROW><id>19928876</id><snippet>on_release</snippet></ROW><ROW><id>19928876</id><snippet>SpinnerOption</snippet></ROW><ROW><id>19928876</id><snippet>from kivy.lang import Builder
from kivy.uix.boxlayout import BoxLayout
from kivy.base import runTouchApp

Builder.load_string('''
&lt;SpinnerOption&gt;:
    size_hint: None, None
    size: 20, 20

&lt;MyWidget&gt;:
    Spinner:
        id:some_id
        text:"some text"
        values:("1","2","3")
        size_hint:(None,None)
        size: root.width/4,root.height/12
''')

class MyWidget(BoxLayout):pass

runTouchApp(MyWidget())
</snippet></ROW><ROW><id>19928876</id><snippet>from kivy.lang import Builder
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.spinner import Spinner
from kivy.base import runTouchApp
from kivy.properties import ObjectProperty

Builder.load_string('''
&lt;MyButton&gt;:
    size_hint: None, None
    size: 20, 20

&lt;MyWidget&gt;:
    MySpinner:
        id:some_id
        text:"some text"
        values:("1","2","3")
        size_hint:(None,None)
        size: root.width/4,root.height/12
''')

class MyButton(Button):
    pass

class MySpinner(Spinner):
    option_cls = ObjectProperty(MyButton) # setting this property inside kv doesn't seem to work

class MyWidget(BoxLayout):
    pass    

runTouchApp(MyWidget())
</snippet></ROW><ROW><id>19928899</id><snippet>&gt;&gt;&gt; dic = {('a','b'): 0, ('b','c'): 1, ('d','e'): 2}
&gt;&gt;&gt; lines =[dic[k] for k in dic if k[1]=='c']  #returns all matching items
&gt;&gt;&gt; lines
[1]
</snippet></ROW><ROW><id>19928899</id><snippet>dict.iteritems</snippet></ROW><ROW><id>19928899</id><snippet>&gt;&gt;&gt; [(k, v) for k, v in dic.iteritems() if k[1]=='c']
[(('b', 'c'), 1)]
</snippet></ROW><ROW><id>19928899</id><snippet>next</snippet></ROW><ROW><id>19928899</id><snippet>&gt;&gt;&gt; next((dic[k] for k in dic if k[1]=='c'), None)
1
</snippet></ROW><ROW><id>19928973</id><snippet>is_eager</snippet></ROW><ROW><id>19928973</id><snippet>called_directly</snippet></ROW><ROW><id>19928973</id><snippet>self.request</snippet></ROW><ROW><id>19928973</id><snippet>@app.task(bind=True)
def task_with_context(self, *args, **kwargs):
    print self.request.is_eager, self.request.called_directly
</snippet></ROW><ROW><id>19928989</id><snippet>userdata = int(level)
</snippet></ROW><ROW><id>19928989</id><snippet>userdata</snippet></ROW><ROW><id>19928989</id><snippet>'1\n'</snippet></ROW><ROW><id>19928989</id><snippet>userdata</snippet></ROW><ROW><id>19928989</id><snippet>level</snippet></ROW><ROW><id>19928989</id><snippet>while True:
    if userdata == 1:
        level1()
</snippet></ROW><ROW><id>19928989</id><snippet>while True:</snippet></ROW><ROW><id>19928999</id><snippet>&amp;</snippet></ROW><ROW><id>19928999</id><snippet>1</snippet></ROW><ROW><id>19929036</id><snippet>a</snippet></ROW><ROW><id>19929036</id><snippet>a = "{'Locator__creation_date': {'start': datetime.date(2013, 11, 14), 'end': datetime.date(2013, 11, 14)}, 'Locator__employed': u'True', 'Locator__employer_state': u'AL', 'Locator__receiving_hiv_treatment': u'True', 'Locator__hiv_treatment_state': u'AR', 'Locator__mental_health_provider': u'False', 'Locator__parole': u'True', 'Locator__parole_state': u'IA', 'data_model_name': ['Locator']}"
</snippet></ROW><ROW><id>19929036</id><snippet>datetime.date(...)</snippet></ROW><ROW><id>19929036</id><snippet>datetime.date()</snippet></ROW><ROW><id>19929036</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>19929036</id><snippet>{...}</snippet></ROW><ROW><id>19929036</id><snippet>[...]</snippet></ROW><ROW><id>19929036</id><snippet>(...)</snippet></ROW><ROW><id>19929036</id><snippet>u'...'</snippet></ROW><ROW><id>19929036</id><snippet>r'...'</snippet></ROW><ROW><id>19929036</id><snippet>'...'</snippet></ROW><ROW><id>19929036</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>19929036</id><snippet>None</snippet></ROW><ROW><id>19929500</id><snippet>allow_empty_page=True</snippet></ROW><ROW><id>19929500</id><snippet>{% if page.object_list.count %}
    #show pagination ul
{% endif %}
</snippet></ROW><ROW><id>19929500</id><snippet>{% if page.paginator.num_pages &gt; 1 %}
    #show pagination ul
{%endif%}
</snippet></ROW><ROW><id>19929559</id><snippet>nums=set(nums)
pairs= filter(nums.isdisjoint, pairs)
</snippet></ROW><ROW><id>19929559</id><snippet>In [1]: import random

In [2]: pairs=[(random.randint(0,50),random.randint(0,50)) for i in range (1000)]

In [3]: nums=[random.randint(0,1000) for i in range(500)]

In [4]: numset=set(nums)

In [5]: %timeit [(x,y) for (x,y) in pairs if not (set([x,y]) &amp; numset)]
1000 loops, best of 3: 746 us per loop

In [6]: %timeit [(x,y) for (x,y) in pairs if x not in numset and y not in numset]
10000 loops, best of 3: 145 us per loop    

In [7]: %timeit filter(numset.isdisjoint, pairs)
10000 loops, best of 3: 95.1 us per loop
</snippet></ROW><ROW><id>19929680</id><snippet>|</snippet></ROW><ROW><id>19929680</id><snippet>re.compile("(" + "|".join(regex_strings) + ")")
</snippet></ROW><ROW><id>19929680</id><snippet>(test1|test2|test3)</snippet></ROW><ROW><id>19929680</id><snippet>import re
regex_strings = ['test1','test2','test3']
regex = re.compile("(" + "|".join(regex_strings) + ")")
strgs = ['This is a test1','This is a test2','This is a test1','This is a test1','This is a test3']
print [strg for strg in strgs if regex.search(strg)]
</snippet></ROW><ROW><id>19929680</id><snippet>['This is a test1', 'This is a test2', 'This is a test1', 'This is a test1', 'This is a test3']
</snippet></ROW><ROW><id>19929680</id><snippet>import re
regex_strings = ['test1','test2','test3']
regex = re.compile("(" + "|".join(regex_strings) + ")")
strgs = ['This is a test1','This is a test2','This is a test1','This is a test1','This is a test3']
result = []
for strg in strgs:
    temp = regex.search(strg)
    if temp:
        result.append(temp.group())
print result
</snippet></ROW><ROW><id>19929680</id><snippet>['test1', 'test2', 'test1', 'test1', 'test3']
</snippet></ROW><ROW><id>19929767</id><snippet>multiprocessing.Process</snippet></ROW><ROW><id>19929767</id><snippet>multiprocessing.Queue</snippet></ROW><ROW><id>19929767</id><snippet>try: ... except Exception as e</snippet></ROW><ROW><id>19929831</id><snippet>from PIL import Image
#from StringIO import StringIO

img = Image.open("foobar.png")
img = img.crop( (0,0,400,400) )

img.thumbnail([200, 200], Image.ANTIALIAS)

file_destination='quux.png'

# imagefile = StringIO()
imagefile = open(file_destination, 'wb')
try:
    img.save(imagefile, "png", quality=90)
    imagefile.close()
except:
    print "Cannot save user image"
</snippet></ROW><ROW><id>19929891</id><snippet>class Client():
    def __init__(self, form):
        self.Nome = form.nome.data
        self.Morada = form.morada.data
        self.Zona = form.zona.data
        self.Pais = form.pais.data

client = Client(form)
</snippet></ROW><ROW><id>19929914</id><snippet>def _init_(self, main):
</snippet></ROW><ROW><id>19929914</id><snippet>def __init__(self, main):
</snippet></ROW><ROW><id>19929917</id><snippet>dfs.block.size</snippet></ROW><ROW><id>19929917</id><snippet>mapred.max.split.size</snippet></ROW><ROW><id>19929917</id><snippet>dfs.block.size</snippet></ROW><ROW><id>19930030</id><snippet>head</snippet></ROW><ROW><id>19930030</id><snippet>    head = [blogs.next() for x in xrange(n)]
</snippet></ROW><ROW><id>19930030</id><snippet>head['href']</snippet></ROW><ROW><id>19930030</id><snippet>head</snippet></ROW><ROW><id>19930030</id><snippet>    page = urllib2.urlopen(head['href'])
</snippet></ROW><ROW><id>19930030</id><snippet>blog.txt</snippet></ROW><ROW><id>19930030</id><snippet>blog.txt</snippet></ROW><ROW><id>19930030</id><snippet>with open("blog.txt") as blogs:
    for url in list(blogs)[:n]:
        page = urllib2.urlopen(url)
        soup = BeautifulSoup(page.read())
        ...
        with open('data.txt', 'a') as f:
            f.write(...)
</snippet></ROW><ROW><id>19930030</id><snippet>file</snippet></ROW><ROW><id>19930030</id><snippet>open</snippet></ROW><ROW><id>19930030</id><snippet>f=file("data.txt","wt")</snippet></ROW><ROW><id>19930030</id><snippet>with</snippet></ROW><ROW><id>19930030</id><snippet>import urllib2
import bs4 as bs

def create_data(n):
    with open("data.txt", "wt") as f:
        pass
    with open("blog.txt") as blogs:
        for url in list(blogs)[:n]:
            page = urllib2.urlopen(url)
            soup = bs.BeautifulSoup(page.read())

            link = soup.find('link', type='application/rss+xml')
            print(link['href'])

            rss = urllib2.urlopen(link['href']).read()
            souprss = bs.BeautifulSoup(rss)
            description_tag = souprss.find('description')

            with open('data.txt', 'a') as f:
                f.write('{}\n'.format(description_tag))

create_data(2)
</snippet></ROW><ROW><id>19930030</id><snippet>data.txt</snippet></ROW><ROW><id>19930030</id><snippet>with open("blog.txt") as blogs, open("data.txt", "wt") as f:
</snippet></ROW><ROW><id>19930119</id><snippet>getpotioneffect</snippet></ROW><ROW><id>19930119</id><snippet>print type(getpotioneffect)</snippet></ROW><ROW><id>19930119</id><snippet>geteffectname = "PotionEffectType.%s"%effectname
getpotioneffect = "PotionEffect(%s, %i, 1)"%(geteffectname, durationinticks)
</snippet></ROW><ROW><id>19930119</id><snippet>effect_type = getattr(PotionEffectType, effectname)
potion_effect = PotionEffect(effect_type, durationinticks, 1)
</snippet></ROW><ROW><id>19930360</id><snippet>    'default': {
        'level':'INFO',
        'class':'logging.handlers.RotatingFileHandler',
        'filename': 'LogFile.log',
        'maxBytes': 1024*1024*5, # 5 MB
        'backupCount': 5,
        'formatter':'simple',
    }, 
</snippet></ROW><ROW><id>19930360</id><snippet>   '': {
        'handlers': ['default'],
        'level': 'INFO',
        'propagate': True
    },
</snippet></ROW><ROW><id>19930393</id><snippet>self.anim = ...
</snippet></ROW><ROW><id>19930393</id><snippet>def ani_update(self, i)
</snippet></ROW><ROW><id>19930457</id><snippet>import OpenSSL.crypto
from Crypto.Util import asn1

c=OpenSSL.crypto

# The certificate - an X509 object
cert=...

# The private key - a PKey object
priv=...

pub=cert.get_pubkey()

# Only works for RSA (I think)
if pub.type()!=c.TYPE_RSA or priv.type()!=c.TYPE_RSA:
    raise Exception('Can only handle RSA keys')

# This seems to work with public as well
pub_asn1=c.dump_privatekey(c.FILETYPE_ASN1, pub)
priv_asn1=c.dump_privatekey(c.FILETYPE_ASN1, priv)

# Decode DER
pub_der=asn1.DerSequence()
pub_der.decode(pub_asn1)
priv_der=asn1.DerSequence()
priv_der.decode(priv_asn1)

# Get the modulus
pub_modulus=pub_der[1]
priv_modulus=priv_der[1]

if pub_modulus==priv_modulus:
    print('Match')
else:
    print('Oops')
</snippet></ROW><ROW><id>19930714</id><snippet>psycopg2</snippet></ROW><ROW><id>19930714</id><snippet>psql</snippet></ROW><ROW><id>19930714</id><snippet>subprocess</snippet></ROW><ROW><id>19930714</id><snippet>check_call</snippet></ROW><ROW><id>19930714</id><snippet>import subprocess
subprocess.check_call([
    'psql', '-c',
    'ALTER USER postgres WITH ENCRYPTED PASSWORD "{0}";'.format(self.password)
])
</snippet></ROW><ROW><id>19930714</id><snippet>os.system</snippet></ROW><ROW><id>19930787</id><snippet>&gt;&gt;&gt; import threading
&gt;&gt;&gt; class MyThread(threading.Thread): pass
...
&gt;&gt;&gt; def do_nothing():
...     while True:
...         pass

&gt;&gt;&gt; MyThread(target=do_nothing).start()
&gt;&gt;&gt; threading.Thread(target=do_nothing).start()
&gt;&gt;&gt; threading.enumerate()
[&lt;MyThread(Thread-1, started 8040)&gt;, &lt;Thread(Thread-2, started 7352)&gt;, &lt;_MainThread(MainThread, started 2772)&gt;]
&gt;&gt;&gt; [t for t in threading.enumerate() if isinstance(t, MyThread)]
[&lt;MyThread(Thread-1, started 8040)&gt;]
</snippet></ROW><ROW><id>19930802</id><snippet>Score.objects.annotate(max_date=Max('student__score__date')).filter(date=F('max_date'))
</snippet></ROW><ROW><id>19930908</id><snippet>files = {
    'file1': open('img/1.jpg', 'rb'), 
    'file2': open('img/2.jpg', 'rb')
}
</snippet></ROW><ROW><id>19930908</id><snippet>files = {
    'files': [open('img/1.jpg', 'rb'), open('img/2.jpg', 'rb')]
}
</snippet></ROW><ROW><id>19930958</id><snippet>def check_token(self=None):
    # whenever a user posts a form we verify that the csrf token is valid.
    if cherrypy.request.method == 'POST':
        token = cherrypy.session.get('_csrf_token')
        if token is None or cherrypy.request.params.get('csrf_token') == None or token != cherrypy.request.params['csrf_token']:
            raise cherrypy.HTTPError(403)

cherrypy.tools.Functions = cherrypy.Tool('before_handler', check_token)
</snippet></ROW><ROW><id>19931156</id><snippet>[(1-x) for x in stored_deviates]</snippet></ROW><ROW><id>19931261</id><snippet>0.9.4</snippet></ROW><ROW><id>19931261</id><snippet>0.11.0</snippet></ROW><ROW><id>19931261</id><snippet>django-debug-toolbar</snippet></ROW><ROW><id>19931272</id><snippet>page_field</snippet></ROW><ROW><id>19931272</id><snippet>NextPageField</snippet></ROW><ROW><id>19931272</id><snippet>pagination.py</snippet></ROW><ROW><id>19931272</id><snippet>page</snippet></ROW><ROW><id>19931272</id><snippet>limit</snippet></ROW><ROW><id>19931272</id><snippet>PaginationSerializer</snippet></ROW><ROW><id>19931272</id><snippet>from rest_framework.pagination import BasePaginationSerializer, NextPageField
class MyPaginationSerializer(BasePaginationSerializer):

    next = NextPageField(source='*')
</snippet></ROW><ROW><id>19931272</id><snippet>next</snippet></ROW><ROW><id>19931272</id><snippet>results</snippet></ROW><ROW><id>19931317</id><snippet>-vframes</snippet></ROW><ROW><id>19931317</id><snippet>-dframes</snippet></ROW><ROW><id>19931317</id><snippet>command = ("ffmpeg -ss 00:00:10 -i %s -vframes 1 %s -y" % (video_path, image_path)).split()
</snippet></ROW><ROW><id>19931509</id><snippet>Entry.set_visibility(False)</snippet></ROW><ROW><id>19931595</id><snippet>s = "my_data [0.046, 0.028, 0.01]"
for replacer in ('[', ']', ','):
    s = s.replace(replacer, '')
</snippet></ROW><ROW><id>19931595</id><snippet>s = "my_data [0.046, 0.028, 0.01]".replace('[', '').replace(']', '').replace(',', '')
</snippet></ROW><ROW><id>19931941</id><snippet>l = '12*%d+20*%d+30*%d'%(b, c, d)
</snippet></ROW><ROW><id>19931941</id><snippet>eval</snippet></ROW><ROW><id>19931941</id><snippet>def calculate(constants, *args):
    num = 0

    for c, v in zip(constants, *args):
        num +=  c*v
    return num
</snippet></ROW><ROW><id>19931941</id><snippet>&gt;&gt;&gt; def calculate(constants, *args):
        num = 0
        for c, v in zip(constants, args):
            num +=  c*v
        return num

&gt;&gt;&gt; calculate([12, 20, 30], b, c, d)
204
</snippet></ROW><ROW><id>19931941</id><snippet>&gt;&gt;&gt; 12 * b + 20 * c + 30 * d
204
</snippet></ROW><ROW><id>19931941</id><snippet>def calculate(b, c, d):
    return 12 * b + 20 * c + 30 * d
</snippet></ROW><ROW><id>19932054</id><snippet>a_s, b_s, c_s = map(list, zip(*sorted(zip(a, b, c), reverse=True)))
</snippet></ROW><ROW><id>19932054</id><snippet>&gt;&gt;&gt; a = [0.3, 1.5, 0.2, 2.6]
&gt;&gt;&gt; b = [1, 2, 3, 4]
&gt;&gt;&gt; c = [0.01, 0.02, 0.03, 0.04]
&gt;&gt;&gt; z = zip(a, b, c)
&gt;&gt;&gt; z
[(0.3, 1, 0.01), (1.5, 2, 0.02), (0.2, 3, 0.03), (2.6, 4, 0.04)]
</snippet></ROW><ROW><id>19932054</id><snippet>&gt;&gt;&gt; zs = sorted(z, reverse=True)
&gt;&gt;&gt; zs
[(2.6, 4, 0.04), (1.5, 2, 0.02), (0.3, 1, 0.01), (0.2, 3, 0.03)]
</snippet></ROW><ROW><id>19932054</id><snippet>&gt;&gt;&gt; u = zip(*zs)
&gt;&gt;&gt; u
[(2.6, 1.5, 0.3, 0.2), (4, 2, 1, 3), (0.04, 0.02, 0.01, 0.03)]
</snippet></ROW><ROW><id>19932054</id><snippet>&gt;&gt;&gt; u
[(2.6, 1.5, 0.3, 0.2), (4, 2, 1, 3), (0.04, 0.02, 0.01, 0.03)]
&gt;&gt;&gt; map(list, u)
[[2.6, 1.5, 0.3, 0.2], [4, 2, 1, 3], [0.04, 0.02, 0.01, 0.03]]
</snippet></ROW><ROW><id>19932054</id><snippet>&gt;&gt;&gt; a_s, b_s, c_s = map(list, u)
</snippet></ROW><ROW><id>19932054</id><snippet>&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; sorted(z, key=itemgetter(1))  # Sort by second item
[(0.3, 1, 0.01), (1.5, 2, 0.02), (0.2, 3, 0.03), (2.6, 4, 0.04)]
&gt;&gt;&gt; sorted(z, key=itemgetter(2))  # Sort by third item
[(0.3, 1, 0.01), (1.5, 2, 0.02), (0.2, 3, 0.03), (2.6, 4, 0.04)]
</snippet></ROW><ROW><id>19932188</id><snippet>b = np.sort(a[..., :-1], axis=-1)
</snippet></ROW><ROW><id>19932188</id><snippet>`np.searchsorted</snippet></ROW><ROW><id>19932188</id><snippet>np.searchsorted</snippet></ROW><ROW><id>19932188</id><snippet>True</snippet></ROW><ROW><id>19932188</id><snippet>np.argmax</snippet></ROW><ROW><id>19932188</id><snippet>mask = b &gt; a[..., -1:]
index = np.argmax(mask, axis=-1)
</snippet></ROW><ROW><id>19932188</id><snippet>indices = tuple([np.arange(j) for j in b.shape[:-1]])
indices = np.meshgrid(*indices, indexing='ij', sparse=True)
indices.append(index)
indices = tuple(indices)
</snippet></ROW><ROW><id>19932188</id><snippet>&gt;&gt;&gt; b[indices]
array([[[[[[[ 2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.]]],


          [[[ 2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.]]]],



         [[[[ 2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.]]],


          [[[ 2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.,  2.]]]]]]])
&gt;&gt;&gt; b[indices].shape
(1L, 1L, 2L, 2L, 1L, 1L, 10L)
</snippet></ROW><ROW><id>19932188</id><snippet>mask = b &gt;= a[..., -1:]
index = np.argmax(mask, axis=-1) - 1
</snippet></ROW><ROW><id>19932188</id><snippet>-1</snippet></ROW><ROW><id>19932188</id><snippet>np.any(index == -1)</snippet></ROW><ROW><id>19932188</id><snippet>mask = b &gt; a[..., -1:]
wrong = np.all(~mask, axis=-1)
index = np.argmax(mask, axis=-1)
index[wrong] = -1
</snippet></ROW><ROW><id>19932367</id><snippet>class Base(object):
    ...
    def fun(self):
        raise NotImplementedError
</snippet></ROW><ROW><id>19932721</id><snippet>plt.figure()</snippet></ROW><ROW><id>19932721</id><snippet>plt.subplots()</snippet></ROW><ROW><id>19932721</id><snippet>plt.figure()</snippet></ROW><ROW><id>19932721</id><snippet>figsize</snippet></ROW><ROW><id>19932721</id><snippet>subplots()</snippet></ROW><ROW><id>19932721</id><snippet>def plot(reader):
    channels=[]
    for i in reader:
        channels.append(i)

    fig, ax = plt.subplots(len(channels), sharex=True, figsize=(50,100))

    plot=0    
    for j in reader: 

        ax[plot].plot(reader["%s" % j])
        plot=plot+1

    plt.tight_layout()
    plt.show()
</snippet></ROW><ROW><id>19932751</id><snippet>import tempfile

fp1 = tempfile.NamedTemporaryFile()
fp1.write('foo')
fp2 = open(fp1.name)
# Because of buffering we've not yet written to the file.
assert fp2.read() == ''
fp1.flush()
# We've now explicitly written to the file.
assert fp2.read() == 'foo'
fp1.close()
fp2.close()
</snippet></ROW><ROW><id>19932751</id><snippet># Let's do it again, but now use buffering.
fp1 = tempfile.NamedTemporaryFile(bufsize=0)
fp1.write('foo')
fp2 = open(fp1.name)
# Because we've set buffering to 0 (so no buffering) we've written to the
# file.
assert fp2.read() == 'foo'
fp1.close()
fp2.close()
</snippet></ROW><ROW><id>19932842</id><snippet>b[i,:,:] = np.random.rand(2000,2000)
b[:,:,i] = np.random.rand(2000,2000)
</snippet></ROW><ROW><id>19932842</id><snippet>numpy.array('[[10, 20, 30], [40, 50, 60]]')
</snippet></ROW><ROW><id>19932842</id><snippet>10 20 30 40 50 60
</snippet></ROW><ROW><id>19932842</id><snippet>a[0][0] → fetch 10 from memory (cached: 10 20)
a[0][1] → read 20 from cache
a[0][2] → fetch 30 from memory (cached: 30 40)
a[1][0] → read 40 from cache
a[1][1] → fetch 50 from memory (cached: 50 60)
a[1][2] → read 60 from cache
</snippet></ROW><ROW><id>19932842</id><snippet>a[0][0] → fetch 10 from memory (cached: 10 20)
a[1][0] → fetch 40 from memory (cached: 30 40)
a[2][1] → fetch 20 from memory (cached: 10 20)
a[0][1] → fetch 50 from memory (cached: 50 60)
a[1][2] → fetch 30 from memory (cached: 30 40)
a[1][2] → fetch 60 from memory (cached: 50 60)
</snippet></ROW><ROW><id>19932883</id><snippet>b</snippet></ROW><ROW><id>19932883</id><snippet>*</snippet></ROW><ROW><id>19932883</id><snippet>with open ('outfile.txt','w') as outfile:
    for a, b in zip (A, B):
        print (a, *b, file=outfile)
</snippet></ROW><ROW><id>19932883</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; A = ['x','y','z']
&gt;&gt;&gt; B = [[1,2,3],[4,5,6],[7,8,9]]
&gt;&gt;&gt; for a, b in zip (A, B):
...     print (a, *b, file=sys.stdout)
... 
x 1 2 3
y 4 5 6
z 7 8 9
</snippet></ROW><ROW><id>19933314</id><snippet>&gt;&gt;&gt; curve_1.extend(curve_2)
&gt;&gt;&gt; curve_1.show()
</snippet></ROW><ROW><id>19933314</id><snippet>curve_1</snippet></ROW><ROW><id>19933314</id><snippet>curve_2</snippet></ROW><ROW><id>19933314</id><snippet>Series</snippet></ROW><ROW><id>19933314</id><snippet>Plot</snippet></ROW><ROW><id>19933314</id><snippet>curve_1._backend.fig</snippet></ROW><ROW><id>19933314</id><snippet>_backend</snippet></ROW><ROW><id>19933863</id><snippet>os.path.expanduser</snippet></ROW><ROW><id>19933868</id><snippet>import subprocess
subprocess.call(['c://Program Files//SQL Anywhere 11//Bin32//dbbackup.exe','-c',
'"DSN=demo2suite;UID=dba;PWD=sql"', '-y','"D://Databases//AMOS2//LIVE//LIVE_BCK"'])
</snippet></ROW><ROW><id>19934015</id><snippet>names=[]
outputList=[]
with open(inputfile) as f:
    for line in f:
        names.append(line.rstrip("\n")

myEmails=set(names)

with open(outputfile) as fd, open("emails.txt", "w") as output:
    for line in fd:
        for name in names:
            c=line.rstrip("\n")
            if name in myEmails:
                print name #for console
                output.write(name) #for writing to file
</snippet></ROW><ROW><id>19934262</id><snippet>datetime</snippet></ROW><ROW><id>19934262</id><snippet>&gt;&gt;&gt; import datetime
</snippet></ROW><ROW><id>19934262</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; date = datetime.date.today()
&gt;&gt;&gt; date
datetime.date(2013, 11, 12)
</snippet></ROW><ROW><id>19934642</id><snippet>zip</snippet></ROW><ROW><id>19934642</id><snippet>&gt;&gt;&gt; [(a, b) for a, b in zip(f, x) if abs(a)==1]
[(1, 10), (1, 20), (1, 30)]
</snippet></ROW><ROW><id>19934642</id><snippet>zip</snippet></ROW><ROW><id>19934642</id><snippet>&gt;&gt;&gt; for a, b in zip(f, x):
...     if abs(a) == 1:
...         print a, b
...         
1 10
1 20
1 30
</snippet></ROW><ROW><id>19934642</id><snippet>x</snippet></ROW><ROW><id>19934642</id><snippet>itertools.compress</snippet></ROW><ROW><id>19934642</id><snippet>&gt;&gt;&gt; from itertools import compress
&gt;&gt;&gt; list(compress(x, (abs(i)==1 for i in f)))
[10, 20, 30]
</snippet></ROW><ROW><id>19934683</id><snippet>if abs(f(guess) - guess) &lt; epsilon:
    ...
</snippet></ROW><ROW><id>19934921</id><snippet>def InRange(number):
    return 1 &lt;= number &lt;= 5
</snippet></ROW><ROW><id>19934921</id><snippet>def InRange(number):
    return 0 &lt; number &lt; 6
</snippet></ROW><ROW><id>19935139</id><snippet>random.choice()</snippet></ROW><ROW><id>19935139</id><snippet>[random.choice(lst) for _ in range(len(lst))]
</snippet></ROW><ROW><id>19935139</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; lst = [1,2,4,5,3]
&gt;&gt;&gt; [random.choice(lst) for _ in range(len(lst))]
[3, 5, 1, 4, 1]
</snippet></ROW><ROW><id>19935217</id><snippet>local variable 'count' referenced before assignment</snippet></ROW><ROW><id>19935217</id><snippet>selectionSort(data)</snippet></ROW><ROW><id>19935217</id><snippet>global count
</snippet></ROW><ROW><id>19935217</id><snippet>count</snippet></ROW><ROW><id>19935217</id><snippet>def selectionSort(data):
    count = 0
    for index in range(len(data)):
        min = index
        count += 1
        # Find the index'th smallest element
        for scan in range(index + 1, len(data)):
            if (data[scan] &lt; data[min]):
                min = scan
        if min != index: # swap the elements
            data[index], data[min] = data[min], data[index]
    return count, data

count, data = selectionSort([3,4,5,2,6])
print(count, data)
</snippet></ROW><ROW><id>19935390</id><snippet>&gt;&gt;&gt; [' '.join(word for include_word, word in zip(row, words) if include_word) 
     for row in matrix]
['.net', 'python .net', 'c++ .net']
</snippet></ROW><ROW><id>19935596</id><snippet>matplotlib</snippet></ROW><ROW><id>19935596</id><snippet>#!/usr/bin/env python3

import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

n = 2**3

def drawInitial():
    plt.axes(xlim = (0, n), ylim = (0, n))
    plt.axis('off')

    for line in range(n):
        for col in range(n):
            rect = mpatches.Rectangle(
                (col, line), 1, 1,
                facecolor = "white",
                edgecolor = "black"
            )

            plt.gca().add_patch(rect)

def onclick(event):
    col  = int(event.xdata)
    line = int(event.ydata)

    rect = mpatches.Rectangle(
        (col, line), 1, 1,
        facecolor = "black",
        edgecolor = "black"
    )

    plt.gca().add_patch(rect)
    plt.draw()

def onkey(event):
    if event.key == " ":
        drawInitial()
        plt.draw()


fig = plt.figure()
fig.canvas.mpl_connect('button_press_event', onclick)
fig.canvas.mpl_connect('key_press_event', onkey)

drawInitial()

plt.show()
</snippet></ROW><ROW><id>19935803</id><snippet>t1</snippet></ROW><ROW><id>19935803</id><snippet>t5</snippet></ROW><ROW><id>19935803</id><snippet>datetime.datetime</snippet></ROW><ROW><id>19935803</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>19935803</id><snippet>timedelta</snippet></ROW><ROW><id>19935803</id><snippet>timedelta.total_seconds()</snippet></ROW><ROW><id>19935803</id><snippet>minutes = mytime.total_seconds() // 60
</snippet></ROW><ROW><id>19935803</id><snippet>divmod()</snippet></ROW><ROW><id>19935803</id><snippet>minutes, seconds = divmod(mytime.total_seconds(), 60)
</snippet></ROW><ROW><id>19935803</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; t1 = datetime.datetime(2013, 6, 6, 8, 30, 0)
&gt;&gt;&gt; t5 = datetime.datetime(2013, 6, 6, 10, 30, 0)
&gt;&gt;&gt; mytime = t5 - t1
&gt;&gt;&gt; mytime
datetime.timedelta(0, 7200)
&gt;&gt;&gt; mytime.total_seconds() // 60
120.0
&gt;&gt;&gt; divmod(mytime.total_seconds(), 60)
(120.0, 0.0)
</snippet></ROW><ROW><id>19936042</id><snippet>columns x rows</snippet></ROW><ROW><id>19936042</id><snippet>columns/2</snippet></ROW><ROW><id>19936042</id><snippet>rows/2</snippet></ROW><ROW><id>19936042</id><snippet>import math

middle_start_row = math.floor(rows/2)
middle_start_col = math.floor(columns/2)
</snippet></ROW><ROW><id>19936154</id><snippet>class PathException(Exception):
    def __init__(self, path):
        self.path = path
        Exception.__init__(self)

def compare(filetree):
    old, new = filetree
    for counter, entry in enumerate(old[1:]):
        if entry not in new:
            raise PathException(entry)
        elif not isinstance(entry, basestring):
            os.chdir(entry[0])
            try:
                compare(entry)
                os.chdir("..")
            except PathException as e:
                os.chdir("..")
                raise PathException(os.path.join(entry, e.path))
        else:
            ...
</snippet></ROW><ROW><id>19936154</id><snippet>try</snippet></ROW><ROW><id>19936154</id><snippet>class MyException(Exception):
    def __init__(self, path):
        self.path = path
        Exception.__init__(self)

def assertEq(X, Y):
    if hasattr(X, '__iter__') and hasattr(Y, '__iter__'):
        for i, (x, y) in enumerate(zip(X, Y)):
            try:
                assertEq(x, y)
            except MyException as e:
                raise MyException([i] + e.path)
    elif X != Y:
        raise MyException([]) # Empty path -&gt; Base case
</snippet></ROW><ROW><id>19936154</id><snippet>&gt;&gt;&gt; L1 = [[[1,2,3],[4,5],[[6,7,8],[7,9]]],[3,5,[7,8]]]
&gt;&gt;&gt; assertEq(L1, L1)
</snippet></ROW><ROW><id>19936154</id><snippet>&gt;&gt;&gt; L1 = [[[1,2,3],[4,5],[[6,7,8],[7,9]]],[3,5,[7,8]]]
&gt;&gt;&gt; L2 = [[[1,2,3],[4,5],[[6,7,8],[7,5]]],[3,5,[7,8]]] # Note the [7,9] -&gt; [7,5]
&gt;&gt;&gt; try:
...     assertEq(L1, L2)
... except MyException as e: 
...     print "Diff at",e.path
Diff at [0, 2, 1, 1]
&gt;&gt;&gt; print L1[0][2][1][1], L2[0][2][1][1]
9 5
</snippet></ROW><ROW><id>19936218</id><snippet>def turningpoints(x):
  N=0
  for i in range(1, len(x)-1):
     if ((x[i-1] &lt; x[i] and x[i+1] &lt; x[i]) 
         or (x[i-1] &gt; x[i] and x[i+1] &gt; x[i])):
       N += 1
  return N

&gt;&gt;&gt; turningpoints([0,2,3,4,5,2,1,2,3,4,5,6,7,8,7,6,5,4,5,6])
4
</snippet></ROW><ROW><id>19936234</id><snippet>&gt;&gt;&gt; struct.unpack('&gt;f', struct.pack('&lt;f', 21.988))
(8.962863280123082e+27,)
</snippet></ROW><ROW><id>19936234</id><snippet>struct.pack('&gt;f', 21.988)
</snippet></ROW><ROW><id>19936380</id><snippet>speedbuff</snippet></ROW><ROW><id>19936380</id><snippet>if games.keyboard.is_pressed(games.K_a):
    if speedbuff &gt; 0:
        self.x -= 6
    else:
        self.x -= 3

...

if speedbuff &gt; 0: speedbuff -= 1
</snippet></ROW><ROW><id>19936380</id><snippet>False</snippet></ROW><ROW><id>19936380</id><snippet>if speedbuff:</snippet></ROW><ROW><id>19936583</id><snippet>bad_abs</snippet></ROW><ROW><id>19936583</id><snippet>a &gt; 0</snippet></ROW><ROW><id>19936583</id><snippet>def bad_abs(a):
    if a &lt; 0:
        return -a

def good_abs(a):
    if a &lt; 0:
        a = -a
    return a
</snippet></ROW><ROW><id>19936583</id><snippet>def any(array):
    return_value = False
    for item in array:
        if item == True:
            return_value = True
            break # Exit the loop and go to return
    return return_value
</snippet></ROW><ROW><id>19936583</id><snippet>[]</snippet></ROW><ROW><id>19936583</id><snippet>def filter_product(array):
    filtered_array = []
    length = len(array) - 1
    for item in array:
        if len(item) == length:
            filtered_array.append(int(item))
    return numpy.prod(filtered_array)
</snippet></ROW><ROW><id>19936828</id><snippet>from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
</snippet></ROW><ROW><id>19936862</id><snippet>reshape</snippet></ROW><ROW><id>19936862</id><snippet>&gt;&gt;&gt; A = np.array([1,2])
&gt;&gt;&gt; A = A.reshape((2,1,1,1,1,1,1,1,1,1,1))
&gt;&gt;&gt; A
array([[[[[[[[[[[1]]]]]]]]]],






   [[[[[[[[[[2]]]]]]]]]]])
</snippet></ROW><ROW><id>19936862</id><snippet>&gt;&gt;&gt; A[1,:,:,:,:,0]
array([[[[[[[[[2]]]]]]]]])
</snippet></ROW><ROW><id>19936862</id><snippet>tuple</snippet></ROW><ROW><id>19936862</id><snippet>def redim(a, dims):
    return a[dims]

&gt;&gt;&gt; redim(A, (slice(None), None, slice(None), None))
</snippet></ROW><ROW><id>19936862</id><snippet>A[1,2,:]</snippet></ROW><ROW><id>19936862</id><snippet>[]</snippet></ROW><ROW><id>19936862</id><snippet>np.ndarray.__getitem__</snippet></ROW><ROW><id>19936862</id><snippet>None</snippet></ROW><ROW><id>19936862</id><snippet>slice</snippet></ROW><ROW><id>19936862</id><snippet>A[1:2] &lt;=&gt; A.__getitem__(slice(1,2))</snippet></ROW><ROW><id>19936999</id><snippet>from django.template.loader import render_to_string
from django.http import HttpResponse

def slideshow_xml(request, pk):
    slideshow = Slideshow.objects.get(pk=pk)
    xml = render_to_string('xml_template.xml', {'slideshow': slideshow})

    return HttpResponse(xml, mimetype="application/xml")
</snippet></ROW><ROW><id>19936999</id><snippet>/slideshow/10/</snippet></ROW><ROW><id>19936999</id><snippet>SlideShow</snippet></ROW><ROW><id>19936999</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;slideshow width="{{ slideshow.width }}" height="{{ slideshow.height }}" speed="{{ slideshow.speed }}"&gt;
     {% for image in slideshow.slideshowimage_set.all %}
      &lt;image url="{{ image.image.url }}" title="{{ image.title }}" /&gt;
     {% endfor %}
&lt;/slideshow&gt;
</snippet></ROW><ROW><id>19936999</id><snippet>from django.db import models

class SlideShow(Models.model):
    height = models.IntegerField()
    width = models.IntegerField()
    speed = models.IntegerField()

class SlideShowImage(Models.model):
    slideshow = models.ForeignKey(SlideShow)
    title = models.CharField(max_length=100)
    image = models.ImageField(upload_to='slideshow_images/')
</snippet></ROW><ROW><id>19936999</id><snippet>SlideShowImage</snippet></ROW><ROW><id>19936999</id><snippet>SlideShow</snippet></ROW><ROW><id>19937026</id><snippet>for i in xrange(2500,7000):
    try:
        page = urllib2.urlopen("http://bvet.bytix.com/plus/trainer/default.aspx?id={}".format(i))
    except:
        continue
    else:
        soup = BeautifulSoup(page.read())
        for eachuniversity in soup.findAll('fieldset',{'id':'ctl00_step2'}):
            print re.sub(r'\s+',' ',','.join(eachuniversity.findAll(text=True)).encode('utf-8'))
            print '\n'
            number = number + 1
</snippet></ROW><ROW><id>19937026</id><snippet>import requests
for i in xrange(2500,7000):
    page = requests.get("http://bvet.bytix.com/plus/trainer/default.aspx?id={}".format(i))
    if not page.ok:
        continue
    soup = BeautifulSoup(requests.text)
    for eachuniversity in soup.findAll('fieldset',{'id':'ctl00_step2'}):
        print re.sub(r'\s+',' ',','.join(eachuniversity.findAll(text=True)).encode('utf-8'))
        print '\n'
        number = number + 1
</snippet></ROW><ROW><id>19937055</id><snippet>concurrent.futures</snippet></ROW><ROW><id>19937055</id><snippet>futures</snippet></ROW><ROW><id>19937055</id><snippet>with concurrent.futures.ThreadPoolExecutor(max_workers=30) as executor:
    results = executor.map(parse_file, filenames)
</snippet></ROW><ROW><id>19937055</id><snippet>max_workers</snippet></ROW><ROW><id>19937055</id><snippet>ThreadPoolExecutor</snippet></ROW><ROW><id>19937055</id><snippet>ProcessPoolExecutor</snippet></ROW><ROW><id>19937055</id><snippet>def parse_files(filenames):
    return [parse_file(filename) for filename in filenames]
with concurrent.futures.ThreadPoolExecutor(max_workers=30) as executor:
    results = executor.map(parse_files, grouper(10, filenames))
</snippet></ROW><ROW><id>19937055</id><snippet>multiprocessing</snippet></ROW><ROW><id>19937055</id><snippet>futures</snippet></ROW><ROW><id>19937055</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>19937055</id><snippet>multiprocessing.ThreadPool</snippet></ROW><ROW><id>19937055</id><snippet>multiprocessing.dummy.Pool</snippet></ROW><ROW><id>19937055</id><snippet>multiprocessing</snippet></ROW><ROW><id>19937055</id><snippet>futures</snippet></ROW><ROW><id>19937082</id><snippet>r = {
    'definition1': item.Starttag.string,
    'definition2': item.Stoptag.string,
    'definition3': item.Filltag.string,
    'definition4': item.Stoptag2.string,
}

new_r = dict((k, v) for k, v in r.iteritems() if v is not None)
</snippet></ROW><ROW><id>19937082</id><snippet>new_r['definition4']</snippet></ROW><ROW><id>19937082</id><snippet>None</snippet></ROW><ROW><id>19937117</id><snippet>timeit</snippet></ROW><ROW><id>19937117</id><snippet>number=1000000</snippet></ROW><ROW><id>19937117</id><snippet>timeit</snippet></ROW><ROW><id>19937117</id><snippet>timeit()</snippet></ROW><ROW><id>19937117</id><snippet>number</snippet></ROW><ROW><id>19937273</id><snippet>np.linalg.eig</snippet></ROW><ROW><id>19937273</id><snippet>mlab.PCA</snippet></ROW><ROW><id>19937273</id><snippet>&gt;&gt;&gt; n_data = (data - data.mean(axis=0)) / data.std(axis=0)
&gt;&gt;&gt; evals, evecs = np.linalg.eig(np.cov(n_data.T))
&gt;&gt;&gt; evecs = evecs[:, np.argsort(evals)[::-1]].T
&gt;&gt;&gt; mlab.PCA(data).Wt
array([[ 0.57731905,  0.57740556,  0.5773262 ],
       [ 0.72182079, -0.03039546, -0.69141222],
       [ 0.38167716, -0.8158915 ,  0.43433121]])
&gt;&gt;&gt; evecs
array([[-0.57731905, -0.57740556, -0.5773262 ],
       [-0.72182079,  0.03039546,  0.69141222],
       [ 0.38167716, -0.8158915 ,  0.43433121]])
</snippet></ROW><ROW><id>19937351</id><snippet>'''</snippet></ROW><ROW><id>19937351</id><snippet>''')</snippet></ROW><ROW><id>19937351</id><snippet>&gt;&gt;&gt; type(''')
... Oops
... What now?
... ^C
  File "&lt;stdin&gt;", line 3
    What now?
            ^
SyntaxError: EOF while scanning triple-quoted string literal
&gt;&gt;&gt; type(''')
... Or you can just close the string and function call!
... ''')
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>19937396</id><snippet>address</snippet></ROW><ROW><id>19937396</id><snippet>for a in address:
    result = Geocoder.geocode(a)
    print(result[0].coordinates)
</snippet></ROW><ROW><id>19937396</id><snippet>with open('filename', 'w') as outfile:
    for a in address:
        result = Geocoder.geocode(a)
        print &gt;&gt;outfile, str(result[0].coordinates) # Prints to file
</snippet></ROW><ROW><id>19937396</id><snippet>outfile.write( str(result[0].coordinates) )</snippet></ROW><ROW><id>19937396</id><snippet>print</snippet></ROW><ROW><id>19937396</id><snippet>for</snippet></ROW><ROW><id>19937396</id><snippet>coordinates_list = []</snippet></ROW><ROW><id>19937396</id><snippet>print</snippet></ROW><ROW><id>19937396</id><snippet>coordinates_list.append(result[0].coordinates)</snippet></ROW><ROW><id>19937396</id><snippet>print &gt;&gt;outfile</snippet></ROW><ROW><id>19937443</id><snippet>&gt;&gt;&gt; dictionary3 = OrderedDict(sorted(x.items(), key=lambda (key, value): int(key.split('_')[1])))
&gt;&gt;&gt; dictionary3
OrderedDict([('day_1', 1), ('day_2', 2), ('day_10', 10), ('day_11', 11)])
</snippet></ROW><ROW><id>19937443</id><snippet>'_'</snippet></ROW><ROW><id>19937653</id><snippet>&gt;&gt;&gt; ''''string'''
"'string"
</snippet></ROW><ROW><id>19937653</id><snippet>&gt;&gt;&gt; 'foo' 'bar'
'foobar'
</snippet></ROW><ROW><id>19937653</id><snippet>'''''string'''''</snippet></ROW><ROW><id>19937653</id><snippet>'''''string''' + ''</snippet></ROW><ROW><id>19937653</id><snippet>&gt;&gt;&gt; '''''string'''
"''string"
&gt;&gt;&gt; '''''string'''''
"''string"
&gt;&gt;&gt; '''''string'''' - extra extra! -'
"''string - extra extra! -"
</snippet></ROW><ROW><id>19937675</id><snippet>toolzip = zipfile.ZipFile(myzipfile,  'r')
names = toolzip.namelist()
for n in names:
    data = toolzip.read(n)
    # do something with data
</snippet></ROW><ROW><id>19937731</id><snippet>LEFT JOIN</snippet></ROW><ROW><id>19937731</id><snippet>select 
    c.*,
    u.*
from users u
    join contacts c
        on u.id = c.user_id
    left join groups g
        on c.contact_id = g.user_id
where
    c.user_id = %s
    and g.group_id not in (&lt;your groups here&gt;)
</snippet></ROW><ROW><id>19937731</id><snippet>select 
    c.*,
    u.*
from users u
    join contacts c
        on u.id = c.user_id
    left join groups g
        on c.contact_id = g.user_id
where
    c.user_id = %s
    and g.group_id is null
union
select 
    c.*,
    u.*
from users u
    join contacts c
        on u.id = c.user_id
    join groups g
        on c.contact_id = g.user_id
where
    c.user_id = %s
    and g.group_id = %d
</snippet></ROW><ROW><id>19937770</id><snippet>lines = []
while True:
    line = openFile.readline(lineLength)
    if not line:
        break
    if line[-1] != '\n':
        line += '\n'
    lines.append(line)
print(''.join(lines))
</snippet></ROW><ROW><id>19937770</id><snippet>lines = []
while True:
    line = openFile.readline(lineLength)
    if not line:
        break
    lines.append(line.rstrip('\n'))
print('\n'.join(lines))
</snippet></ROW><ROW><id>19937779</id><snippet>choice(cat_sayings)</snippet></ROW><ROW><id>19937779</id><snippet>def cat_job(sayings):
    print choice(sayings)

# ...

s.add_cron_job(cat_job, args=[cat_sayings], second='*/30')
</snippet></ROW><ROW><id>19937987</id><snippet>select.select</snippet></ROW><ROW><id>19937987</id><snippet>self.Connections</snippet></ROW><ROW><id>19937987</id><snippet>while</snippet></ROW><ROW><id>19937987</id><snippet>self.Connections</snippet></ROW><ROW><id>19937987</id><snippet>Data</snippet></ROW><ROW><id>19937987</id><snippet>if Connection == self.Server:</snippet></ROW><ROW><id>19937987</id><snippet>fileno</snippet></ROW><ROW><id>19937987</id><snippet>select.select</snippet></ROW><ROW><id>19938047</id><snippet>input()</snippet></ROW><ROW><id>19938047</id><snippet>1011101</snippet></ROW><ROW><id>19938047</id><snippet>"1011101"</snippet></ROW><ROW><id>19938047</id><snippet>int(input())</snippet></ROW><ROW><id>19938047</id><snippet>int(input(), 2)</snippet></ROW><ROW><id>19938047</id><snippet>answer = num1 + num2</snippet></ROW><ROW><id>19938047</id><snippet>answerString = bin(answer)</snippet></ROW><ROW><id>19938047</id><snippet>answerString = bin(answer)[2:]</snippet></ROW><ROW><id>19938047</id><snippet>num1 = int(input(), 2)
num2 = int(input(), 2)
answer = num1 + num2
answerString = bin(answer)[2:]
print(answerString)
</snippet></ROW><ROW><id>19938047</id><snippet>1001001
1010100
</snippet></ROW><ROW><id>19938047</id><snippet>10011101
</snippet></ROW><ROW><id>19938055</id><snippet>isinstance</snippet></ROW><ROW><id>19938055</id><snippet>if isinstance(dictionary_item['targetkey'], float):
</snippet></ROW><ROW><id>19938055</id><snippet>0.0</snippet></ROW><ROW><id>19938055</id><snippet>False</snippet></ROW><ROW><id>19938055</id><snippet>&gt;&gt;&gt; bool(0.0)
False
&gt;&gt;&gt; isinstance(0.0, float)
True
&gt;&gt;&gt; isinstance(10.0, float)
True
&gt;&gt;&gt; isinstance('', float)
False
&gt;&gt;&gt;
</snippet></ROW><ROW><id>19938094</id><snippet>listfiles()</snippet></ROW><ROW><id>19938094</id><snippet>dirName.replace(path, '')</snippet></ROW><ROW><id>19938094</id><snippet>path</snippet></ROW><ROW><id>19938094</id><snippet>lib/</snippet></ROW><ROW><id>19938094</id><snippet>lib/misc/collected/lib/whatever</snippet></ROW><ROW><id>19938094</id><snippet>listfiles()</snippet></ROW><ROW><id>19938188</id><snippet>__eq__()</snippet></ROW><ROW><id>19938188</id><snippet>assertNotEqual()</snippet></ROW><ROW><id>19938188</id><snippet>RollResult</snippet></ROW><ROW><id>19938188</id><snippet>assertEqual()</snippet></ROW><ROW><id>19938188</id><snippet>copy1</snippet></ROW><ROW><id>19938188</id><snippet>copy2</snippet></ROW><ROW><id>19938262</id><snippet>import zlib

if a.info().get('Content-Encoding', '').lower() == 'gzip':
    decompressor = zlib.decompressobj(16 + zlib.MAX_WBITS)
    content = decompressor.decompress(content)
</snippet></ROW><ROW><id>19938262</id><snippet>python-requests</snippet></ROW><ROW><id>19938450</id><snippet>In [112]: example_dict = {"foo": 1, "bar": 2}
In [113]: map(example_dict.__getitem__, ['foo', 'bar'])
[0x1,
 0x2]
</snippet></ROW><ROW><id>19938484</id><snippet>import networkx as nx
import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap as Basemap
m = Basemap(
        projection='merc',
        llcrnrlon=-130,
        llcrnrlat=25,
        urcrnrlon=-60,
        urcrnrlat=50,
        lat_ts=0,
        resolution='i',
        suppress_ticks=True)

# position in decimal lat/lon
lats=[37.96,42.82]
lons=[-121.29,-73.95]
# convert lat and lon to map projection
mx,my=m(lons,lats)

# The NetworkX part
# put map projection coordinates in pos dictionary
G=nx.Graph()
G.add_edge('a','b')
pos={}
pos['a']=(mx[0],my[0])
pos['b']=(mx[1],my[1])
# draw
nx.draw_networkx(G,pos,node_size=200,node_color='blue')

# Now draw the map
m.drawcountries()
m.drawstates()
m.bluemarble()
plt.title('How to get from point a to point b')
plt.show()
</snippet></ROW><ROW><id>19938603</id><snippet>lineterminator=','</snippet></ROW><ROW><id>19938624</id><snippet>Running on http://127.0.0.1:5000/
</snippet></ROW><ROW><id>19938624</id><snippet>localhost</snippet></ROW><ROW><id>19938624</id><snippet>app.run()</snippet></ROW><ROW><id>19938624</id><snippet>app.run(host = '0.0.0.0', debug = True)
</snippet></ROW><ROW><id>19938628</id><snippet>manage.py</snippet></ROW><ROW><id>19938628</id><snippet>wsgi.py</snippet></ROW><ROW><id>19938628</id><snippet>config_mode = os.getenv('DJANGO_CONFIG_MODE', 'base')

config_dict = {
    'base': 'settings.base'
    'local': 'settings.local'
    'production': 'settings.production'
}

os.environ.setdefault('DJANGO_SETTINGS_MODULE', config_dict[config_mode])

# or if you prefer not using a dictionary or if-else blocks, you could
# set the settings file name you wish to use as the DJANGO_CONFIG_MODE environment
# variable and use that directly

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings.{0}'.format(config_mode))
</snippet></ROW><ROW><id>19938628</id><snippet>CONFIG_MODE = 'base'   # or 'local' or 'production'
</snippet></ROW><ROW><id>19938661</id><snippet>list.insert</snippet></ROW><ROW><id>19938661</id><snippet>helper</snippet></ROW><ROW><id>19938661</id><snippet>def helper(list1, list2, result):
  if not list1:
    return result + list2
  elif not list2:
    return result + list1
  elif list1[0] &lt; list2[0]:
    return helper(list1[1:], list2, result + [list1[0]])
  else:
    return helper(list1, list2[1:], result + [list2[0]])
</snippet></ROW><ROW><id>19938661</id><snippet>None</snippet></ROW><ROW><id>19938661</id><snippet>[]</snippet></ROW><ROW><id>19938661</id><snippet>False</snippet></ROW><ROW><id>19938661</id><snippet>True</snippet></ROW><ROW><id>19938661</id><snippet>helper</snippet></ROW><ROW><id>19938661</id><snippet>linear_merge</snippet></ROW><ROW><id>19938800</id><snippet>stdin</snippet></ROW><ROW><id>19938800</id><snippet>GzipFile</snippet></ROW><ROW><id>19938800</id><snippet>In [5]: cmd=subprocess.Popen(["od", "-cx"], stdin=subprocess.PIPE)
In [6]: data=gzip.open("/tmp/hello.gz")
In [8]: cmd.stdin.write(data.read())
In [9]: cmd.stdin.close()
0000000   h   i  \n
           6968    000a
0000003
</snippet></ROW><ROW><id>19938800</id><snippet>Popen.communicate()</snippet></ROW><ROW><id>19938800</id><snippet>In [11]: cmd=subprocess.Popen(["od", "-cx"], 
                               stdin=subprocess.PIPE, 
                               stdout=subprocess.PIPE, 
                               stderr=subprocess.PIPE)
In [12]: data=gzip.open("/tmp/hello.gz")
In [13]: cmd.communicate(data.read())
Out[13]: ('0000000   h   i  \\n\n           6968    000a\n0000003\n', '')
</snippet></ROW><ROW><id>19938915</id><snippet>a = ['1, 2, 4, 5,', '2, 3, 6, 3,', '1, 1, 7, 6']
rows = [l.rstrip(',').split(',') for l in a]
rows
#[['1', ' 2', ' 4', ' 5'], ['2', ' 3', ' 6', ' 3'], ['1', ' 1', ' 7', ' 6']]
</snippet></ROW><ROW><id>19938915</id><snippet>arr = np.array(rows, int)

arr
#array([[1, 2, 4, 5],
#       [2, 3, 6, 3],
#       [1, 1, 7, 6]])
</snippet></ROW><ROW><id>19938915</id><snippet>arr[:, :2] # first two columns
#array([[1, 2],
#       [2, 3],
#       [1, 1]])

arr[:, -2:] # last two columns
#array([[4, 5],
#       [6, 3],
#       [7, 6]])
</snippet></ROW><ROW><id>19938915</id><snippet>a, b = np.split(arr, arr.shape[1]/2, axis=1)
</snippet></ROW><ROW><id>19939003</id><snippet>train_labels</snippet></ROW><ROW><id>19939003</id><snippet>train</snippet></ROW><ROW><id>19939003</id><snippet>train_labels</snippet></ROW><ROW><id>19939076</id><snippet>draw_sprite()</snippet></ROW><ROW><id>19939076</id><snippet>window.set_background</snippet></ROW><ROW><id>19939076</id><snippet>run()</snippet></ROW><ROW><id>19939076</id><snippet>Arrows</snippet></ROW><ROW><id>19939076</id><snippet>Space</snippet></ROW><ROW><id>19939076</id><snippet>ESC</snippet></ROW><ROW><id>19939076</id><snippet>import pygame

#from pygame.locals import *

#--------------------------------------------------------------------
# class for single sprite
#--------------------------------------------------------------------

class MySprite():

    def __init__(self, image, x, y):

        self.image = pygame.image.load(image)
        image_rect = self.image.get_rect()

        # Rect class to use "Sprite collision detect" - in the future
        # In rect you have sprite position and size 
        # You can use self.rect.x, self.rect.y, self.rect.width, self.rect.height
        # and self.rect.center, self.rect.centerx, self.rect.top, self.rect.bottomright etc.

        self.rect = pygame.rect.Rect(x, y, image_rect.width, image_rect.height)

    def draw(self, screen):
        screen.blit(self.image, self.rect)


#--------------------------------------------------------------------
# class for player
#--------------------------------------------------------------------

class MyPlayer(MySprite):

    def __init__(self, image, x, y):
        # parent constructor always as a first in __init__
        MySprite.__init__(self, image, x, y)

        self.speed_x = self.speed_y = 0

    #-----------------------------

    def set_speed(self, x, y):
        self.speed_x = x
        self.speed_y = y

    #-----------------------------

    def update(self):
        self.rect.x += self.speed_x
        self.rect.y += self.speed_y

        if self.rect.centerx &lt; 0 :
            self.rect.centerx = 800
        elif self.rect.centerx &gt; 800 :
            self.rect.centerx = 0

        if self.rect.centery &lt; 0 :
            self.rect.centery = 600
        elif self.rect.centery &gt; 600 :
            self.rect.centery = 0

#--------------------------------------------------------------------

class Window():

    def __init__(self, width, height):

        #--------------------
        self.rect = pygame.Rect(0, 0, width, height)
        # or
        self.width, self.height = width, height
        #--------------------

        pygame.init()

        # most users and tutorials call it "screen"
        self.screen = pygame.display.set_mode(self.rect.size)

        #############################################################

        self.foreground = None
        self.background = None

        self.set_background("background.jpg")                          
        self.set_foreground("ball3.png")                          

        #################################################

        self.player = MyPlayer("ball1.png", 100, 200)

        self.sprites_list = []

        self.add_sprite(MySprite("ball2.png", 100, 400))
        self.add_sprite(MySprite("ball2.png", 300, 500))
        self.add_sprite(MySprite("ball2.png", 300, 200))

        self.remove_last_sprite()

        #-----------------------------

        # red text "PAUSE"
        font = pygame.font.SysFont("", 72)
        self.text_pause = font.render("PAUSE", True, (255, 0, 0))

        # center text on screen
        screen_center = self.screen.get_rect().center
        self.text_pause_rect = self.text_pause.get_rect(center=screen_center) 

    #--------------------------

    def add_sprite(self, sprite):
        self.sprites_list.append(sprite)

    #--------------------------

    def remove_last_sprite(self):
        if self.sprites_list:
            del self.sprites_list[-1]

    #--------------------------

    def draw_sprites(self, screen):
        for sprite in self.sprites_list:
            sprite.draw(screen)

    #--------------------------

    def draw_background(self, screen):
        screen.fill((0,64,0)) # clear screen to green
        if self.background:
            screen.blit(self.background, (0,0))

    #--------------------------

    def draw_foreground(self, screen):
        if self.foreground:
            screen.blit(self.foreground, (0,0))

    #--------------------------

    def draw_world(self, image):
        temp = pygame.Surface(self.rect.size, pygame.SRCALPHA, 32).convert_alpha()
        image_rect = image.get_rect()

        for x in range(0, self.rect.width, 60):
            for y in range(0,self.rect.width, 60):
                temp.blit(image,(x,y))

        return temp

    #--------------------------

    def set_foreground(self, image=None):
        if image: 
            img = pygame.image.load(image)
            self.foreground = self.draw_world(img)

    #--------------------------

    def set_background(self, image=None):
        if image: 
            self.background = pygame.image.load(image)

    #--------------------------

    def run(self):

        clock = pygame.time.Clock()

        RUNNING = True
        PAUSED = False

        while RUNNING:

            #--- events ---

            for event in pygame.event.get():

                if event.type == pygame.QUIT:
                    RUNNING = False

                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_ESCAPE:
                        RUNNING = False
                    elif event.key == pygame.K_SPACE:
                        PAUSED = not PAUSED

                    if event.key == pygame.K_UP:
                        self.player.set_speed(0,-10)
                    elif event.key == pygame.K_DOWN:
                        self.player.set_speed(0,10)
                    elif event.key == pygame.K_LEFT:
                        self.player.set_speed(-10,0)
                    elif event.key == pygame.K_RIGHT:
                        self.player.set_speed(10,0)

                if event.type == pygame.KEYUP:
                    if event.key in (pygame.K_UP, pygame.K_DOWN, pygame.K_LEFT, pygame.K_RIGHT):
                        self.player.set_speed(0,0)

            #--- changes ----

            if not PAUSED:
                # change elements position
                self.player.update()

            #--- draws ---

            self.draw_background(self.screen)
            self.draw_foreground(self.screen)
            self.draw_sprites(self.screen) 
            self.player.draw(self.screen)

            if PAUSED:
                # draw pause string
                self.screen.blit(self.text_pause, self.text_pause_rect.topleft)

            pygame.display.update()

            #--- FPS ---

            clock.tick(25) # 25 Frames Per Seconds

        #--- finish ---

        pygame.quit()

#----------------------------------------------------------------------

Window(800,600).run()
</snippet></ROW><ROW><id>19939325</id><snippet>A4 6B 70 46 1F 40
</snippet></ROW><ROW><id>19939325</id><snippet>40 1F 00 00 00 0A
</snippet></ROW><ROW><id>19939325</id><snippet>remoteIP = GBC.pack(int(PORT))  #needs another byte
</snippet></ROW><ROW><id>19939325</id><snippet>remotePort = GBC.pack(int(PORT))  #needs another byte
</snippet></ROW><ROW><id>19939377</id><snippet>&gt;&gt;&gt; import pprint
&gt;&gt;&gt; pp = pprint.PrettyPrinter(indent=4)
&gt;&gt;&gt; pp.pprint(myIndex)
{   '411)': {2173: 1},
    'augmented': {1350: 1},
    'format-free': {720: 1},
    'function,': {485: 1, 831: 1, 1579: 1},
    'incorporating': {2047: 1},
    'understand': {2396: 1}}
&gt;&gt;&gt; import json
&gt;&gt;&gt; output = json.dumps(myIndex,sort_keys=True,indent=4, separators=(',', ': '))
&gt;&gt;&gt; print(output)
{
    "411)": {
        "2173": 1
    },
    "augmented": {
        "1350": 1
    },
    "format-free": {
        "720": 1
    },
    "function,": {
        "485": 1,
        "831": 1,
        "1579": 1
    },
    "incorporating": {
        "2047": 1
    },
    "understand": {
        "2396": 1
    }
}
&gt;&gt;&gt; myRecoveredIndex = json.loads(output)
&gt;&gt;&gt; list(myRecoveredIndex.keys())
['format-free', 'incorporating', 'function,', 'understand', 'augmented', '411)']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>19939377</id><snippet>with open("myfile.txt", "w") as fstream:
    for key, data in myIndex.items():
        fstream.write("'{}': {!s}\n".format(key, data))
</snippet></ROW><ROW><id>19939399</id><snippet>import pandas as pd

df = pd.read_csv('filex.csv')
df['A'] = df['A'].astype('str')
df['B'] = df['B'].astype('str')
mask = (df['A'].str.len() == 10) &amp; (df['B'].str.len() == 10)
df = df.loc[mask]
print(df)
</snippet></ROW><ROW><id>19939399</id><snippet>A,B
123,abc
1234,abcd
1234567890,abcdefghij
</snippet></ROW><ROW><id>19939399</id><snippet>            A           B
2  1234567890  abcdefghij
</snippet></ROW><ROW><id>19939486</id><snippet>import numpy as np

sample_rate = 400
Nyquist = sample_rate/2.
fneeg = 'data.eeg'
t = 10
ch = 32
le = t*sample_rate
EEG = fromfile(fneeg, int16).reshape(ch, le, order='F')
</snippet></ROW><ROW><id>19939486</id><snippet>In [45]: EEG
Out[45]: array([ -39,  -25,  -22, ..., -168, -586,  -46], dtype=int16)

In [46]: EEG.shape
Out[46]: (128000,)
</snippet></ROW><ROW><id>19939486</id><snippet>In [47]: EEG.reshape(ch, le, order='F')
Out[47]: 
array([[ -39,  -37,  -12, ...,    5,   19,   21],
       [ -25,  -20,    7, ...,   20,   36,   36],
       [ -22,  -20,    0, ...,   18,   34,   36],
       ..., 
       [ 104,  164,   44, ...,   60,  -67, -168],
       [ 531,  582,   88, ...,   29, -420, -586],
       [ -60,  -63,  -92, ...,  -17,  -44,  -46]], dtype=int16)

In [48]: EEG.reshape(ch, le, order='F').shape
Out[48]: (32, 4000)
</snippet></ROW><ROW><id>19939953</id><snippet>ax.plot([1,2,3], [4,5,6], color=(.4, .5, .6))
</snippet></ROW><ROW><id>19939953</id><snippet>plot(x, y, color='green', linestyle='dashed', marker='o',
     markerfacecolor='blue', markersize=12).
</snippet></ROW><ROW><id>19939961</id><snippet>import logging


class MultipleInstancesStarter:
    def __init__(self):
        pass

    def startMany(self):
        objs = [Main(str(i)) for i in xrange(1, 10)]
        print objs
        for obj in objs:
            obj._start()


class Main:
    def __init__(self, i):
        self.index = i

    def _start(self):
        name = self.index
        logger = logging.getLogger('%s-%s' % (__name__, self.index))
        handler = logging.FileHandler('log_%s.log' % name)
        log_format = ('%(asctime)s -  %(levelname)s - %(filename)s:'
                      '%(module)s:%(lineno)d - %(message)s')
        formatter = logging.Formatter(log_format)
        handler.setFormatter(formatter)
        logger.addHandler(handler)

        logger.debug("%s Message Debug" % name)
        logger.info("%s Message Info" % name)
        logger.error("%s Message Error" % name)


if __name__ == '__main__':
    MultipleInstancesStarter().startMany()
</snippet></ROW><ROW><id>19939961</id><snippet>handler.setLevel(logging.DEBUG)
</snippet></ROW><ROW><id>19940077</id><snippet>ssh.exec_command</snippet></ROW><ROW><id>19940077</id><snippet>.profile</snippet></ROW><ROW><id>19940077</id><snippet>ssh.exec_command('. .profile ; cd /home/test/;$run ./test.sh')
</snippet></ROW><ROW><id>19940098</id><snippet>&gt;&gt;&gt; df - df.shift(1)
    a   b
0 NaN NaN
1 -64  32
2  80 -16
3 -32 -48
4   0 -48
</snippet></ROW><ROW><id>19940098</id><snippet>df.diff()</snippet></ROW><ROW><id>19940098</id><snippet>&gt;&gt;&gt; df.diff()
    a   b
0 NaN NaN
1 -64  32
2  80 -16
3 -32 -48
4   0 -48
</snippet></ROW><ROW><id>19940347</id><snippet>BoundField</snippet></ROW><ROW><id>19940347</id><snippet>result = {
    'email_field': str(form['email']),
}
</snippet></ROW><ROW><id>19940347</id><snippet>var form_field = '{{response.email_field}}'
</snippet></ROW><ROW><id>19940347</id><snippet>response</snippet></ROW><ROW><id>19940347</id><snippet>var form_field = response.email_field;
</snippet></ROW><ROW><id>19940367</id><snippet>httplib2</snippet></ROW><ROW><id>19940367</id><snippet>Http</snippet></ROW><ROW><id>19940367</id><snippet>cache-control</snippet></ROW><ROW><id>19940384</id><snippet>Download error on http://pypi.python.org/simple/Twisted/: timed out -- Some packages      may not be found!</snippet></ROW><ROW><id>19940468</id><snippet>class Error(dexml.Model):
    code = dexml.fields.String()
    value = dexml.fields.String(tagname=".")
</snippet></ROW><ROW><id>19940468</id><snippet>e = Error(code="0",value="OK")
print e.render(fragment=True)
</snippet></ROW><ROW><id>19940830</id><snippet>ax.grid</snippet></ROW><ROW><id>19940830</id><snippet>plt.minorticks_on</snippet></ROW><ROW><id>19940830</id><snippet>ax.minorticks_on</snippet></ROW><ROW><id>19940830</id><snippet>ax.grid(True, which='both')</snippet></ROW><ROW><id>19940877</id><snippet>void foo() {}
void bar() { foo(); }
</snippet></ROW><ROW><id>19940877</id><snippet>void foo();
void bar() { foo(); }
void foo() {}
</snippet></ROW><ROW><id>19940877</id><snippet>void bar() { foo(); }
void foo();
</snippet></ROW><ROW><id>19940877</id><snippet>def bar():
    foo()
def foo():
    pass
</snippet></ROW><ROW><id>19941006</id><snippet>conn = pymysql.connect(usual=parameters, blah=blah, charset='utf8')
</snippet></ROW><ROW><id>19941006</id><snippet>unicode</snippet></ROW><ROW><id>19941006</id><snippet>SET NAMES UTF-8</snippet></ROW><ROW><id>19941120</id><snippet>import math
x = raw_input("Input action to be peformed on your number, followed by your number: ")
# Assume "Pi 2"  is entered
x = x.split()
action = x[0]
number = int(x[1])
if action.startswith("Pi"):
    print number * math.pi
</snippet></ROW><ROW><id>19941120</id><snippet>$ python j.py 
Input action to be peformed on your number, followed by your number: Pi 2
6.28318530718
</snippet></ROW><ROW><id>19941217</id><snippet>def __unicode__</snippet></ROW><ROW><id>19941265</id><snippet>with open("ttt.csv", 'wb') as myfile:
    writer = csv.writer(myfile, quoting=csv.QUOTE_ALL)
    for i in xrange(3179,7000):
        try:
            page = urllib2.urlopen("http://bvet.bytix.com/plus/trainer/default.aspx?id={}".format(i))
        except urllib2.HTTPError:
            continue
        else:
            soup = BeautifulSoup(page.read(), from_encoding=page.info().getparam('charset'))
            for eachuniversity in soup.findAll('fieldset',{'id':'ctl00_step2'}):
                data = [i] + [re.sub('\s+', ' ', text).strip().encode('utf8') for text in eachuniversity.find_all(text=True) if text.strip()]
                writer.writerow(data)
</snippet></ROW><ROW><id>19941265</id><snippet>w</snippet></ROW><ROW><id>19941265</id><snippet>with</snippet></ROW><ROW><id>19941265</id><snippet>for</snippet></ROW><ROW><id>19941265</id><snippet>from_encoding</snippet></ROW><ROW><id>19941265</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>19941265</id><snippet>csv.writer()</snippet></ROW><ROW><id>19941265</id><snippet>except:</snippet></ROW><ROW><id>19941265</id><snippet>except urllib2.HTTPError:</snippet></ROW><ROW><id>19941265</id><snippet>"3179","Neue Suche starten","MoHaJa - die Schule für Hunde und Halter","Stähli Monika","Meisenweg 1","3303 Jegenstorf","Routenplaner","Ausbildung/Anerkennung: Triple-S Ausbildungszentrum für Mensch und Hund","Sprache: Deutsch","Tel.: +41 31 761 14 33","Handy: +41 79 760 41 69","info@hundeschule-mohaja.ch","www.hundeschule-mohaja.ch"
"3180","Neue Suche starten","Dogs Nature","Fernandez Salome-Nicole","Dorzematte 30","3313 Büren zum Hof","Routenplaner","Ausbildung/Anerkennung: Triple-S Ausbildungszentrum für Mensch und Hund","Sprache: Deutsch","Tel.: 079 658 71 71","info@dogsnature.ch","www.dogsnature.ch"
"3181","Neue Suche starten","Gynny-Dog","Speiser Franziska","Wirtsgartenweg 27","4123 Allschwil","Routenplaner","Ausbildung/Anerkennung: Triple-S Ausbildungszentrum für Mensch und Hund","Sprache: Deutsch","Handy: 076 517 20 94","franziska.speiser@gynny-dog.ch","www.gynny-dog.ch"
"3183","Neue Suche starten","keep-natural","Mory Sandra","Beim Werkhof","4434 Hölstein","Routenplaner","Ausbildung/Anerkennung: Triple-S Ausbildungszentrum für Mensch und Hund","Sprache: Deutsch","Tel.: 079 296 00 65","sandra.mory@keep-natural.ch","www.keep-natural.ch"
"3184","Neue Suche starten","Küng Silvia","Eptingerstrasse 41","4448 Läufelfingen","Routenplaner","Ausbildung/Anerkennung: Triple-S Ausbildungszentrum für Mensch und Hund","Sprache: Deutsch","Tel.: 061 981 38 04","Handy: 079 415 83 57","silvia.kueng@hotmail.com","www.different-dogs.ch"
</snippet></ROW><ROW><id>19941326</id><snippet>In [34]: var = [[1, 2, 3], [2], [1, 2, 3], [5, 6]]

In [35]: [i for i in itertools.product(*var) if len(i) == len(set(i))]
Out[35]: [(1, 2, 3, 5), (1, 2, 3, 6), (3, 2, 1, 5), (3, 2, 1, 6)]

In [36]: var = [[1,2,3,4], [5]]

In [37]: [i for i in itertools.product(*var) if len(i) == len(set(i))]
Out[37]: [(1, 5), (2, 5), (3, 5), (4, 5)]
</snippet></ROW><ROW><id>19941380</id><snippet>[(self.margin+self.g_width)*self.column+self.margin,\
                        (self.margin+self.g_height)*self.row+self.margin, \
                            self.g_width,self.g_height]
</snippet></ROW><ROW><id>19941380</id><snippet>[x,y,width,height]</snippet></ROW><ROW><id>19941380</id><snippet>def draw_grid(self):
    my_rects = []
    for self.row in range(12):
        my_rects.append([])
        for self.column in range(12):
            color = Game.BLUE
            if self.grid[self.row][self.column] == 1:
                color = Game.RED
                x,y = (self.margin+self.g_width)*self.column+self.margin,\
                        (self.margin+self.g_height)*self.row+self.margin
                width,height = self.g_width,self.g_height
                my_rect = Rect(x,y,w,h)
                my_rects[-1].append(my_rect)
                pygame.draw.rect(self.screen,color,\
                    my_rect)
     print my_rects[0][0]
</snippet></ROW><ROW><id>19941407</id><snippet>plot</snippet></ROW><ROW><id>19941407</id><snippet>plot(x1, y1, x2, y2, antialised=False)
</snippet></ROW><ROW><id>19941407</id><snippet>#RRGGBB</snippet></ROW><ROW><id>19941407</id><snippet>plot</snippet></ROW><ROW><id>19941407</id><snippet>color</snippet></ROW><ROW><id>19941600</id><snippet>next</snippet></ROW><ROW><id>19941600</id><snippet># the advantage of using `Next` is it is web text based which is more reliable. 
import urllib
from bs4 import BeautifulSoup
import re
url = 'http://www.freesoft4down.com/Windows/System-Utilities/Clipboard-Tools/Page-1-0-0-0-0.html'
pageurl = urllib.urlopen(url)
soup = BeautifulSoup(pageurl)
print soup.find('ul',{'class':'div_pages'}).find(text=re.compile("Next")).find_parent('a')['href']
</snippet></ROW><ROW><id>19941600</id><snippet>http://www.freesoft4down.com/Windows/System-Utilities/Clipboard-Tools/Page-2-0-0-0-0.html
</snippet></ROW><ROW><id>19941659</id><snippet>def mutations(word, hamming_distance, charset='ATCG'):
    for indices in itertools.combinations(range(len(word)), hamming_distance):
        for replacements in itertools.product(charset, repeat=hamming_distance):
            mutation = list(word)
            for index, replacement in zip(indices, replacements):
                mutation[index] = replacement
            yield "".join(mutation)
</snippet></ROW><ROW><id>19941832</id><snippet>isdigit()</snippet></ROW><ROW><id>19941832</id><snippet>isDigit()</snippet></ROW><ROW><id>19941832</id><snippet>int()</snippet></ROW><ROW><id>19941832</id><snippet>def checkForEvenInt(self, S):
    if S.isdigit():
        if int(S) % 2 is 0:
            return True
    return False
</snippet></ROW><ROW><id>19941832</id><snippet>In [1]: def my_func(): return True

In [2]: my_func()
Out[2]: True

In [3]: my_Func()
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
&lt;ipython-input-25-ac6a0a3aba88&gt; in &lt;module&gt;()
----&gt; 1 my_Func()

NameError: name 'my_Func' is not defined
</snippet></ROW><ROW><id>19941906</id><snippet>if i not in groups[count]:
</snippet></ROW><ROW><id>19941906</id><snippet>if not groups or i not in groups[count]:
</snippet></ROW><ROW><id>19941906</id><snippet>            tmp = indices[:] # clone list
            groups.append(tmp) # push the previous generated list to another list to store groups into
            indices = [] # empty/reset indices-list
</snippet></ROW><ROW><id>19941906</id><snippet>            groups.append(indices) # push the previous generated list to another list to store groups into
            indices = [] # empty/reset indices-list
</snippet></ROW><ROW><id>19941906</id><snippet>count</snippet></ROW><ROW><id>19941906</id><snippet>len(groups)</snippet></ROW><ROW><id>19941906</id><snippet>def myFunc():

    sel = [0,1,5,12] # changes with every call of "myFunc", for example to [2,8,4,10,9,1], etc. - list alway differs in count of elements, can even be empty, groups are beeing built from these values
    all = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] # the whole set
    groups = [] # list to store indices-lists into

    for i in range(len(all)): # loop through values
        if not groups or i not in groups[-1]: # look in the latest group
            indices = [idx for idx, selected in enumerate(sel) if selected]
            groups.append(indices) # push the previous generated list to another list to store groups into
    print groups    # debug
</snippet></ROW><ROW><id>19942187</id><snippet>with open(filename) as file:
    for line in file:
        # whatever you wanted to do with each line
</snippet></ROW><ROW><id>19942187</id><snippet>with open(filename) as file:
    first_line = next(file)
    # whatever you wanted to do with first_line
</snippet></ROW><ROW><id>19942187</id><snippet>\s(\d+)f\d+w(\d+)\.</snippet></ROW><ROW><id>19942187</id><snippet>#  Input menu file: 10f160w39.feedme
</snippet></ROW><ROW><id>19942187</id><snippet>10f160w39.feedme</snippet></ROW><ROW><id>19942187</id><snippet>strip</snippet></ROW><ROW><id>19942187</id><snippet>menufile = line.strip().rsplit()[-1]
</snippet></ROW><ROW><id>19942187</id><snippet>f</snippet></ROW><ROW><id>19942187</id><snippet>w</snippet></ROW><ROW><id>19942187</id><snippet>.</snippet></ROW><ROW><id>19942187</id><snippet>f = menufile.partition('f')[0]
w = menufile.rpartition('.')[0].rpartition('w')[-1]
</snippet></ROW><ROW><id>19942329</id><snippet>[len(s) for s in re.findall(r'{}+'.format(CHAR), input)]
</snippet></ROW><ROW><id>19942329</id><snippet>CHAR</snippet></ROW><ROW><id>19942329</id><snippet>\</snippet></ROW><ROW><id>19942329</id><snippet>[len(s) for s in re.findall(r'{}+'.format(re.escape(CHAR)), input)]
</snippet></ROW><ROW><id>19942329</id><snippet>{2,}</snippet></ROW><ROW><id>19942329</id><snippet>{m,n}</snippet></ROW><ROW><id>19942329</id><snippet>a{3,5}</snippet></ROW><ROW><id>19942329</id><snippet>'a'</snippet></ROW><ROW><id>19942329</id><snippet>a{4,}b</snippet></ROW><ROW><id>19942329</id><snippet>aaaab</snippet></ROW><ROW><id>19942329</id><snippet>'a'</snippet></ROW><ROW><id>19942329</id><snippet>b</snippet></ROW><ROW><id>19942329</id><snippet>aaab</snippet></ROW><ROW><id>19942329</id><snippet>{}</snippet></ROW><ROW><id>19942329</id><snippet>%</snippet></ROW><ROW><id>19942329</id><snippet>[len(s) for s in re.findall(r'%s{2,}' % (re.escape(CHAR),), input)]
</snippet></ROW><ROW><id>19942329</id><snippet>[len(s) for s in re.findall(re.escape(CHAR) + r'{2,}', input)]
</snippet></ROW><ROW><id>19942384</id><snippet>id</snippet></ROW><ROW><id>19942384</id><snippet>extra</snippet></ROW><ROW><id>19942384</id><snippet>filter</snippet></ROW><ROW><id>19942406</id><snippet>dataToProcess</snippet></ROW><ROW><id>19942406</id><snippet>maffPath</snippet></ROW><ROW><id>19942406</id><snippet>alignedFile</snippet></ROW><ROW><id>19942456</id><snippet>\"</snippet></ROW><ROW><id>19942456</id><snippet>"</snippet></ROW><ROW><id>19942456</id><snippet>\s</snippet></ROW><ROW><id>19942456</id><snippet>\\s</snippet></ROW><ROW><id>19942456</id><snippet>s</snippet></ROW><ROW><id>19942456</id><snippet>\(</snippet></ROW><ROW><id>19942456</id><snippet>\\(</snippet></ROW><ROW><id>19942456</id><snippet>(</snippet></ROW><ROW><id>19942456</id><snippet>"multiple repeat"</snippet></ROW><ROW><id>19942456</id><snippet>term = 'lg incite" OR author:"http++www.dealitem.com" OR "for sale'
</snippet></ROW><ROW><id>19942456</id><snippet>p++</snippet></ROW><ROW><id>19942456</id><snippet>re</snippet></ROW><ROW><id>19942456</id><snippet>&gt;&gt;&gt; re.compile('p++')
error: multiple repeat
</snippet></ROW><ROW><id>19942456</id><snippet>re.escape</snippet></ROW><ROW><id>19942456</id><snippet>.</snippet></ROW><ROW><id>19942456</id><snippet>,|.|;|:"</snippet></ROW><ROW><id>19942456</id><snippet>.</snippet></ROW><ROW><id>19942456</id><snippet>term = 'lg incite" OR author:"http++www.dealitem.com" OR "for sale'
regexPart1 = r"\s"
regexPart2 = r"(?:s|'s|!+|,|\.|;|:|\(|\)|\"|\?+)?\s"  
p = re.compile(regexPart1 + re.escape(term) + regexPart2 , re.IGNORECASE)
</snippet></ROW><ROW><id>19942534</id><snippet>old_reader = csv.reader(open('old.csv', 'rb'))
writer = csv.writer(open('new.csv', 'wb'))
for row in old_reader:
    writer.writerow(transform(row))
new_reader = csv.reader(open('new.csv', 'rb'))
for row in new_reader:
    print row
</snippet></ROW><ROW><id>19942534</id><snippet>new.csv</snippet></ROW><ROW><id>19942534</id><snippet>new.csv</snippet></ROW><ROW><id>19942534</id><snippet>writer</snippet></ROW><ROW><id>19942534</id><snippet>open</snippet></ROW><ROW><id>19942534</id><snippet>with</snippet></ROW><ROW><id>19942534</id><snippet>with open('old.csv', 'rb') as oldf, open('new.csv', 'wb') as newf:
    old_reader = csv.reader(oldf)
    writer = csv.writer(newt)
    for row in old_reader:
        writer.writerow(transform(row))
with open('new.csv', 'rb') as newf:
    new_reader = csv.reader(newf)
    for row in new_reader:
        print row
</snippet></ROW><ROW><id>19942568</id><snippet>firstIdx = 1000000
secondIdx = 1000000
thirdIdx = 1000000
</snippet></ROW><ROW><id>19942568</id><snippet>0</snippet></ROW><ROW><id>19942568</id><snippet>outputFile = None

for line in openFile:
    if '*  Void Fractions in the Bed  *' in line:
        idx = 0; outputFile = groupOneFile
    elif '*  Void Fractions in the Freeboard  *' in line:
        idx = 0; outputFile = groupTwoFile
    elif '*  Superficial Velocities in the Bed (m/s)  *' in line:
        idx = 0; outputFile = groupThreeFile

    if outputFile and 5 &lt;= idx &lt; 43:
        line = line.lstrip()
        line = line.replace('  ',',')
        outputFile.write(line)

    idx = idx + 1
</snippet></ROW><ROW><id>19942568</id><snippet>if x in range(a, b):</snippet></ROW><ROW><id>19942568</id><snippet>a</snippet></ROW><ROW><id>19942568</id><snippet>b-1</snippet></ROW><ROW><id>19942568</id><snippet>if a &lt;= x &lt; b:</snippet></ROW><ROW><id>19942568</id><snippet>2.5 in range(0, 10)</snippet></ROW><ROW><id>19942568</id><snippet>0 &lt;= 2.5 &lt; 10</snippet></ROW><ROW><id>19942568</id><snippet>switch</snippet></ROW><ROW><id>19942568</id><snippet>filemap = [('*  Void Fractions in the Bed  *', groupOneFile),
           ('*  Void Fractions in the Freeboard  *', groupTwoFile),
           ('*  Superficial Velocities in the Bed (m/s)  *', groupThreeFile)]

outputFile = None
for line in openFile:
    for tag, file in filemap:
        if tag in line:
            idx = 0
            outputFile = file
    if outputFile and 5 &lt;= idx &lt; 43:
        outputFile.write(line)
    idx += 1
</snippet></ROW><ROW><id>19942568</id><snippet>in</snippet></ROW><ROW><id>19942568</id><snippet>filemap = {'*  Void Fractions in the Bed  *': groupOneFile,
           '*  Void Fractions in the Freeboard  *': groupTwoFile,
           '*  Superficial Velocities in the Bed (m/s)  *': groupThreeFile)}

outputFile = None
for line in openFile:
    f = filemap.get(line.strip())
    if f:
        # Found a new group header, switch output file
        idx = 0
        outputFile = f
    if outputFile and 5 &lt;= idx &lt; 43:
        outputFile.write(line)
    idx += 1
</snippet></ROW><ROW><id>19942611</id><snippet>sorted(list)</snippet></ROW><ROW><id>19942611</id><snippet>min &lt;= value &lt;= max</snippet></ROW><ROW><id>19942611</id><snippet>def select(x1, y1, w, h):
    x, y = position

    minX, maxX = sorted([x1, x1 + w])
    minY, maxY = sorted([y1, y1 + h])

    if minX &lt;= x &lt;= maxX and minY &lt;= y &lt;= maxY:
        selected = True
    else:
        selected = False
</snippet></ROW><ROW><id>19942691</id><snippet>pip</snippet></ROW><ROW><id>19942691</id><snippet>easy_install</snippet></ROW><ROW><id>19942691</id><snippet>pip</snippet></ROW><ROW><id>19942691</id><snippet>pip</snippet></ROW><ROW><id>19942691</id><snippet>brew install gfortran</snippet></ROW><ROW><id>19942691</id><snippet>easy_install</snippet></ROW><ROW><id>19942691</id><snippet>pip</snippet></ROW><ROW><id>19942691</id><snippet>sudo easy_install pip</snippet></ROW><ROW><id>19942691</id><snippet>sudo easy_install readline</snippet></ROW><ROW><id>19942691</id><snippet>sudo pip install --upgrade --force-reinstall numpy</snippet></ROW><ROW><id>19942691</id><snippet>sudo pip install</snippet></ROW><ROW><id>19942737</id><snippet>gae_override</snippet></ROW><ROW><id>19942737</id><snippet>gae_override</snippet></ROW><ROW><id>19942737</id><snippet>gae_override</snippet></ROW><ROW><id>19942737</id><snippet>appengine_config.py</snippet></ROW><ROW><id>19942744</id><snippet>   with open(file_path, 'wb+') as f:
        f.write(data)
</snippet></ROW><ROW><id>19942796</id><snippet>OrderedDict</snippet></ROW><ROW><id>19942796</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; my_lst = ['b','c','a']
&gt;&gt;&gt; D = OrderedDict()
&gt;&gt;&gt; for i in my_lst:
...     D[i] = []
&gt;&gt;&gt; D
OrderedDict([('b', []), ('c', []), ('a', [])])
&gt;&gt;&gt; print D.items()
[('b', []), ('c', []), ('a', [])]
</snippet></ROW><ROW><id>19943020</id><snippet>WANTED = 20 #or however many characters you want after 'Figure'

with open('mytext.txt') as searchfile:
    for line in searchfile:
        left,sep,right = line.partition('Figure')
        if sep: # True iff 'Figure' in line
            print(right[:WANTED])
</snippet></ROW><ROW><id>19943020</id><snippet>str.partition</snippet></ROW><ROW><id>19943066</id><snippet>&gt;&gt;&gt; import regex
&gt;&gt;&gt; bigString = "AGAHKGHKHASNHADKRGHFKXXX_I_AM_THERE_XXXXXMHHGRFSAHGSKHASGKHGKHSKGHAK"
&gt;&gt;&gt; regex.search('(?:I_AM_HERE){e&lt;=1}',bigString).group(0)
'I_AM_THERE'
</snippet></ROW><ROW><id>19943066</id><snippet>&gt;&gt;&gt; bigString = "AGAH_I_AM_HERE_RGHFKXXX_I_AM_THERE_XXX_I_AM_NOWHERE_EREXXMHHGRFS"
&gt;&gt;&gt; print(regex.findall('I_AM_(?:HERE){e&lt;=3}',bigString))
['I_AM_HERE', 'I_AM_THERE', 'I_AM_NOWHERE']
</snippet></ROW><ROW><id>19943066</id><snippet>pip install regex</snippet></ROW><ROW><id>19943066</id><snippet>pip3 install regex</snippet></ROW><ROW><id>19943066</id><snippet>Is there a way to know the best out of the three in your second example? How to use BESTMATCH flag here?</snippet></ROW><ROW><id>19943066</id><snippet>print(regex.search(r'(?e)I_AM_(?:ERE){e&lt;=3}', bigString).group(0))
# I_AM_HE
</snippet></ROW><ROW><id>19943066</id><snippet>import regex

def levenshtein(s1,s2):
    if len(s1) &gt; len(s2):
        s1,s2 = s2,s1
    distances = range(len(s1) + 1)
    for index2,char2 in enumerate(s2):
        newDistances = [index2+1]
        for index1,char1 in enumerate(s1):
            if char1 == char2:
                newDistances.append(distances[index1])
            else:
                newDistances.append(1 + min((distances[index1],
                                             distances[index1+1],
                                             newDistances[-1])))
        distances = newDistances
    return distances[-1]

bigString = "AGAH_I_AM_NOWHERE_HERE_RGHFKXXX_I_AM_THERE_XXX_I_AM_HERE_EREXXMHHGRFS"
cl=[(levenshtein(s,'I_AM_HERE'),s) for s in regex.findall('I_AM_(?:HERE){e&lt;=3}',bigString)]

print(cl)
print([t[1] for t in sorted(cl, key=lambda t: t[0])])

print(regex.search(r'(?e)I_AM_(?:ERE){e&lt;=3}', bigString).group(0))
</snippet></ROW><ROW><id>19943066</id><snippet>[(3, 'I_AM_NOWHERE'), (1, 'I_AM_THERE'), (0, 'I_AM_HERE')]
['I_AM_HERE', 'I_AM_THERE', 'I_AM_NOWHERE']
</snippet></ROW><ROW><id>19943149</id><snippet>string="aacctcaaaca"
find="aaa"
[m.group(0) for m in re.finditer(find, string+string) if m.start() &lt; len(string)]
</snippet></ROW><ROW><id>19943149</id><snippet>a{3,}</snippet></ROW><ROW><id>19943149</id><snippet>len(find)</snippet></ROW><ROW><id>19943149</id><snippet>from itertools import takewhile
takewhile(lambda m: m.start() &lt; len(string), re.finditer(find, string+string))
</snippet></ROW><ROW><id>19943245</id><snippet>cursor.execute</snippet></ROW><ROW><id>19943245</id><snippet>execute</snippet></ROW><ROW><id>19943245</id><snippet>def query_single_sql(cursor):
    print 'query_single_sql'
    sql = []
    sql.append("""CREATE TEMPORARY TABLE tmp1 (id int)""")
    sql.append("""INSERT INTO tmp1 VALUES (1)""")
    sql.append("""SELECT * from tmp1""")

    cursor.execute(';'.join(sql))
    print list(cursor.fetchall())
</snippet></ROW><ROW><id>19943245</id><snippet>query_single_sql
[]
</snippet></ROW><ROW><id>19943245</id><snippet>def query_separate_sql(cursor):
    print 'query_separate_sql'
    sql = []
    sql.append("""CREATE TEMPORARY TABLE tmp3 (id int)""")
    sql.append("""INSERT INTO tmp3 VALUES (1)""")
    sql.append("""SELECT * from tmp3""")
    for query in sql:
        cursor.execute(query)
        print list(cursor.fetchall())
</snippet></ROW><ROW><id>19943245</id><snippet>query_separate_sql
[]
[]
[(1L,)]
</snippet></ROW><ROW><id>19943523</id><snippet>shift</snippet></ROW><ROW><id>19943523</id><snippet>if |A| ≤ 1
</snippet></ROW><ROW><id>19943523</id><snippet>n = len(A)
if (n == 1):
</snippet></ROW><ROW><id>19943523</id><snippet>par</snippet></ROW><ROW><id>19943523</id><snippet>concurrent.futures.ProcessPoolExecutor</snippet></ROW><ROW><id>19943523</id><snippet>    pr = binary_mult(p,r)
    ps = binary_mult(p,s)
    rq = binary_mult(r,q)
    qs = binary_mult(q,s)
</snippet></ROW><ROW><id>19943523</id><snippet>mult</snippet></ROW><ROW><id>19943523</id><snippet>let … in … end</snippet></ROW><ROW><id>19943523</id><snippet>end</snippet></ROW><ROW><id>19943523</id><snippet>del</snippet></ROW><ROW><id>19943523</id><snippet>shift(pr, n) + shift(sum, n/2) + qs
</snippet></ROW><ROW><id>19943523</id><snippet>+</snippet></ROW><ROW><id>19943523</id><snippet>+</snippet></ROW><ROW><id>19943523</id><snippet>+</snippet></ROW><ROW><id>19943523</id><snippet>+</snippet></ROW><ROW><id>19943523</id><snippet>let … in</snippet></ROW><ROW><id>19943523</id><snippet>def shift(A, n):
    # Taking a wild guess
    return A + [0 for _ in range(n)]

def mult(A, B):
    n = len(A)
    if n &lt;= 1:
        return [A[0] * B[0]]
    else:
        p, q = A[:n//2], A[n//2:]
        r, s = B[:n//2], B[n//2:]
        pr, ps, rq, qs = mult(p, r), mult(p, s), mult(r, q), mult(q, s)
        sum = ps + rq
        return pr &lt;&lt; n + sum &lt;&lt; n//2 + qs
</snippet></ROW><ROW><id>19943523</id><snippet>+</snippet></ROW><ROW><id>19943523</id><snippet>+</snippet></ROW><ROW><id>19943523</id><snippet>bitarray</snippet></ROW><ROW><id>19943523</id><snippet>bitstring</snippet></ROW><ROW><id>19943625</id><snippet>line = '....xooo......aaaa...'
import re
print [whole for whole, _ in re.findall("(([^.])\\2+)", line)]
</snippet></ROW><ROW><id>19943625</id><snippet>['ooo', 'aaaa']
</snippet></ROW><ROW><id>19943625</id><snippet>([^.])</snippet></ROW><ROW><id>19943625</id><snippet>.</snippet></ROW><ROW><id>19943625</id><snippet>\\2</snippet></ROW><ROW><id>19943625</id><snippet>([^.])</snippet></ROW><ROW><id>19943625</id><snippet>+</snippet></ROW><ROW><id>19943625</id><snippet>ooo</snippet></ROW><ROW><id>19943682</id><snippet>         from jinja2 import Template

         template = Template(
         """
             {%- for key, value in tree.items() recursive%}
                 {%-if key != "R"%}
                     {{loop(value.items())}}
                 {%- else  %}
                     {{value}}
                 {%- endif %}
             {%- endfor%}
         """)

         print template.render(tree = {"A": {"R": [1, 2, 3], "B": {"R": [4, 5, 6]}}})
</snippet></ROW><ROW><id>19943688</id><snippet>stats::anova()</snippet></ROW><ROW><id>19943688</id><snippet>lme1</snippet></ROW><ROW><id>19943688</id><snippet>'lme2</snippet></ROW><ROW><id>19943688</id><snippet>lme3</snippet></ROW><ROW><id>19943688</id><snippet>rpy2</snippet></ROW><ROW><id>19943688</id><snippet>stats::anova(lmer(formula='RT~cat1 + (1|ID)',
                  data=read.csv("http://chymera.eu/data/test/r_data.csv"),
                  REML=FALSE),
             lmer(formula='RT~cat2 + (1|ID)',
                  data=read.csv("http://chymera.eu/data/test/r_data.csv"),
                  REML=FALSE),
             lmer(formula='RT~cat2*cat1 + (1|ID)',
                  data=read.csv("http://chymera.eu/data/test/r_data.csv"),
                  REML=FALSE))
</snippet></ROW><ROW><id>19943688</id><snippet>Error in names(mods) &lt;- sub("@env$", "", mNms) : 
  'names' attribute [6] must be the same length as the vector [3]
In addition: Warning message:
In anova.merMod(lmer(formula = "RT~cat1 + (1|ID)", data = read.csv("http://chymera.eu/data/test/r_data.csv"),  :
  failed to find unique model names, assigning generic names
</snippet></ROW><ROW><id>19943688</id><snippet>lme4:::anova.meMod</snippet></ROW><ROW><id>19943688</id><snippet># bind the DataFrame to an R symbol
robjects.globalenv['dataf'] = dfr
# build models, letting R fetch the symbol `dataf` when it is evaluating
# the parameters in the function call
res = list()
for formula in formulae:
    lme_res = lme4.lmer(formula=formula, data=base.as_symbol("dataf"), REML='false')
    res.append(lme_res)
# This is enough to work around the problem
compare = stats.anova(res[0], res[1], res[2])

# if not happy with the model names displayed by `compare`,
# globalenv can be filled further
names = list()
for i, value in enumerate(res):
    names.append('lme%i'  % i)
    robjects.globalenv[names[i]] = value 
# call `anova`
compare = stats.anova(*[base.as_symbol(x) for x in names])
</snippet></ROW><ROW><id>19943833</id><snippet>d</snippet></ROW><ROW><id>19943833</id><snippet>d</snippet></ROW><ROW><id>19943833</id><snippet>d = dof</snippet></ROW><ROW><id>19943833</id><snippet>dof</snippet></ROW><ROW><id>19943833</id><snippet>scipy.interpolate</snippet></ROW><ROW><id>19943833</id><snippet>np.polynomial.polynomial.polyfit</snippet></ROW><ROW><id>19943833</id><snippet>scipy.interpolate.UnivariateSpline</snippet></ROW><ROW><id>19943833</id><snippet>import numpy as np
from numpy.polynomial import polynomial as poly
from scipy import interpolate as interp

import matplotlib.pyplot as plt

n = 20
x = np.linspace(0, 2*np.pi, n)
a = np.sin(x) + np.random.uniform(-.2, .2, n)

s = interp.UnivariateSpline(x, a)
p = poly.polyfit(x, a, 3)
p = poly.Polynomial(p)

plt.figure()
plt.plot(x, np.sin(x), '-', x, a, 'o', x, s(x), '--', x, p(x), '.-')
</snippet></ROW><ROW><id>19943833</id><snippet>In [32]: timeit s = interp.UnivariateSpline(x, a)
10000 loops, best of 3: 22.1 µs per loop

In [33]: timeit p = poly.Polynomial(poly.polyfit(x, a, 3))
1000 loops, best of 3: 392 µs per loop

In [34]: timeit p = poly.polyfit(x, a, 3)
1000 loops, best of 3: 311 µs per loop
</snippet></ROW><ROW><id>19943833</id><snippet>In [35]: timeit interp.UnivariateSpline(x, a)(x)
10000 loops, best of 3: 44.9 µs per loop

In [37]: timeit poly.Polynomial(poly.polyfit(x, a, 3))(x)
1000 loops, best of 3: 470 µs per loop
</snippet></ROW><ROW><id>19943833</id><snippet>d &gt;= dof</snippet></ROW><ROW><id>19943833</id><snippet>p = poly.Polynomial(poly.polyfit(x, a, x.size-1))
plot(x, np.sin(x), '-', x, a, 'o', x, p(x), ':')
</snippet></ROW><ROW><id>19943859</id><snippet>sys.path</snippet></ROW><ROW><id>19943859</id><snippet>cd</snippet></ROW><ROW><id>19943859</id><snippet>.</snippet></ROW><ROW><id>19943859</id><snippet>sys.path</snippet></ROW><ROW><id>19943859</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>19943859</id><snippet>pip</snippet></ROW><ROW><id>19943859</id><snippet>sys.path</snippet></ROW><ROW><id>19943859</id><snippet>scipy</snippet></ROW><ROW><id>19943859</id><snippet>$ PYTHONPATH="homepath" python setup.py install --home="homepath"
</snippet></ROW><ROW><id>19943859</id><snippet>$ PYTHONPATH="homepath" python
&gt;&gt;&gt; import numpy
</snippet></ROW><ROW><id>19943906</id><snippet>r</snippet></ROW><ROW><id>19943906</id><snippet>__init__</snippet></ROW><ROW><id>19943906</id><snippet>class FourVector:
    def __init__(self, ct = 0, x = 0, y = 0, z = 0, r = None):
        self.a = (ct, x, y, z)
        if r is not None:
            self.a = (ct, r[0], r[1], r[2])

P0 = FourVector()
print P0.a

P1 = FourVector(ct = 9, x = 1, y = 2, z = 4)
print P1.a

P2 = FourVector(ct = 99.9, r = [1, 2, 4])
print P2.a
</snippet></ROW><ROW><id>19943939</id><snippet>return render.callback(html)</snippet></ROW><ROW><id>19943939</id><snippet>return html</snippet></ROW><ROW><id>19944019</id><snippet>open('example_label.pdf', 'wb')
</snippet></ROW><ROW><id>19944019</id><snippet>$ md5sum example_label.pdf 
bd9a4e16d45fe01bfc77a2af6afe1b8b  example_label.pdf
$ sha1sum example_label.pdf 
a9b77217793ef05f212b0619248480411f6ed4a1  example_label.pdf
</snippet></ROW><ROW><id>19944065</id><snippet>shutil.copy()</snippet></ROW><ROW><id>19944065</id><snippet>with open('%s.txt', 'r') as f, open('{}.txt', 'w') as f2 % (self.file_name, self.back_up_file):
</snippet></ROW><ROW><id>19944065</id><snippet>src = "%s.txt" % self.file_name
dest = "{}.txt".format(self.back_up_file)
with open(src, "rb") as f, open(dest, "wb") as f2:
    # copying code goes here
</snippet></ROW><ROW><id>19944065</id><snippet>%</snippet></ROW><ROW><id>19944065</id><snippet>.format()</snippet></ROW><ROW><id>19944065</id><snippet>with</snippet></ROW><ROW><id>19944065</id><snippet>with</snippet></ROW><ROW><id>19944065</id><snippet>with</snippet></ROW><ROW><id>19944065</id><snippet>.read(CHUNK_SIZE)</snippet></ROW><ROW><id>19944065</id><snippet>CHUNK_SIZE</snippet></ROW><ROW><id>19944191</id><snippet>Decimal</snippet></ROW><ROW><id>19944191</id><snippet>ts = pd.Series([float(x) for x in scores], index=timestamps)
</snippet></ROW><ROW><id>19944191</id><snippet>ts = pd.Series(scores, index=timestamps, dtype='float64')
</snippet></ROW><ROW><id>19944236</id><snippet>void AU3_WinClose(LPCWSTR name, LPCWSTR someotherthing);
</snippet></ROW><ROW><id>19944236</id><snippet>autoit.AU3_WinClose.argtypes = (LPCWSTR, LPCWSTR)
autoit.AU3_WinClose.restype = None
</snippet></ROW><ROW><id>19944281</id><snippet>__iter__</snippet></ROW><ROW><id>19944281</id><snippet>def typecheck(obj): return hasattr(myObj, '__iter__')
</snippet></ROW><ROW><id>19944281</id><snippet>__iter__</snippet></ROW><ROW><id>19944281</id><snippet>__getitem__</snippet></ROW><ROW><id>19944281</id><snippet>__iter__</snippet></ROW><ROW><id>19944281</id><snippet>__iter__</snippet></ROW><ROW><id>19944281</id><snippet>def typecheck(obj): return not isinstance(obj, str) and isinstance(obj, Iterable)
</snippet></ROW><ROW><id>19944281</id><snippet>__iter__</snippet></ROW><ROW><id>19944281</id><snippet>str</snippet></ROW><ROW><id>19944281</id><snippet>def typecheck(obj): return hasattr(obj, '__iter__') and not isinstance(obj, str)
</snippet></ROW><ROW><id>19944369</id><snippet>s1</snippet></ROW><ROW><id>19944369</id><snippet>s2</snippet></ROW><ROW><id>19944369</id><snippet>word1</snippet></ROW><ROW><id>19944369</id><snippet>word2</snippet></ROW><ROW><id>19944369</id><snippet>sort</snippet></ROW><ROW><id>19944369</id><snippet>sort</snippet></ROW><ROW><id>19944369</id><snippet>sorted</snippet></ROW><ROW><id>19944369</id><snippet>"</snippet></ROW><ROW><id>19944369</id><snippet>print</snippet></ROW><ROW><id>19944369</id><snippet>print</snippet></ROW><ROW><id>19944369</id><snippet>def isAnagram(s1, s2):
    s1 = sorted(s1)
    s2 = sorted(s2)
    if s1 == s2:
       print("This is an anagram")
    else:
       print("This is not an anagram")
</snippet></ROW><ROW><id>19944369</id><snippet>s1</snippet></ROW><ROW><id>19944369</id><snippet>s2</snippet></ROW><ROW><id>19944369</id><snippet>word1</snippet></ROW><ROW><id>19944369</id><snippet>word2</snippet></ROW><ROW><id>19944369</id><snippet>isAnagram(word1, word2)
</snippet></ROW><ROW><id>19944414</id><snippet>data = [x[:-2] for x in data]
</snippet></ROW><ROW><id>19944435</id><snippet>%lprun</snippet></ROW><ROW><id>19944435</id><snippet>In [1]: %load_ext line_profiler
</snippet></ROW><ROW><id>19944435</id><snippet>line_profiler</snippet></ROW><ROW><id>19944472</id><snippet>&lt;tr style="background-color:
    {% ifchanged event.date %}
        {% cycle "grey" "white" as rowcolors %}
    {% else %}
        {{ rowcolors }}
    {% endifchanged %}"&gt;

    ...

&lt;/tr&gt;
</snippet></ROW><ROW><id>19944832</id><snippet>import Tkinter
import tkFileDialog
import os

root = Tkinter.Tk()
root.withdraw() #use to hide tkinter window

currdir = os.getcwd()
tempdir = tkFileDialog.askdirectory(parent=root, initialdir=currdir, title='Please select a directory')
if len(tempdir) &gt; 0:
    print "You chose %s" % tempdir
</snippet></ROW><ROW><id>19944939</id><snippet>item['Country']</snippet></ROW><ROW><id>19944939</id><snippet>Country': [u'Honduas']</snippet></ROW><ROW><id>19944939</id><snippet>(item['Country'][0].encode('utf-8'),
item['CountryFlagLink'][0].encode('utf-8'),
item['TeamWikiURL'][0].encode('utf-8'),
item['MethodOfQualification'][0].encode('utf-8'),
item['DateOfQualification'][0].encode('utf-8'),
item['FinalsAppearance'][0].encode('utf-8'),
item['LastAppearance'][0].encode('utf-8'),
item['PreviousBestPerformance'][0].encode('utf-8'),
item['FifaRankingAsOfOct2013'][0].encode('utf-8')))
</snippet></ROW><ROW><id>19945012</id><snippet>while True:
    status = input("Are they single(1) or married(2)? \n")
    if status in ('1', '2'):
        break
</snippet></ROW><ROW><id>19945012</id><snippet>eval</snippet></ROW><ROW><id>19945012</id><snippet>int</snippet></ROW><ROW><id>19945121</id><snippet>for date, mac, rssi in newData:
    requests.post("http://www.google-analytics.com/collect", 
          data="v=1&amp;tid=UA-22560594-2&amp;cid={}&amp;t=event&amp;ec={}&amp;ea={}".format(
              mac, 
              date, 
              rssi)
    )
</snippet></ROW><ROW><id>19945229</id><snippet>py</snippet></ROW><ROW><id>19945229</id><snippet>Plot()</snippet></ROW><ROW><id>19945229</id><snippet>matplotlib.pyplot</snippet></ROW><ROW><id>19945229</id><snippet>py.show()</snippet></ROW><ROW><id>19945229</id><snippet>py.show(block=False)</snippet></ROW><ROW><id>19945354</id><snippet>status</snippet></ROW><ROW><id>19945354</id><snippet>type()</snippet></ROW><ROW><id>19945354</id><snippet>status</snippet></ROW><ROW><id>19945354</id><snippet>computeTaxAmount()</snippet></ROW><ROW><id>19945354</id><snippet>True</snippet></ROW><ROW><id>19945354</id><snippet>taxAmount</snippet></ROW><ROW><id>19945354</id><snippet>if status == 1:</snippet></ROW><ROW><id>19945354</id><snippet>if status == '1':</snippet></ROW><ROW><id>19945354</id><snippet>elif grossPay &gt; 42 &amp; grossPay &lt;= 214</snippet></ROW><ROW><id>19945354</id><snippet>elif grossPay &gt; 42 and grossPay &lt;= 214</snippet></ROW><ROW><id>19945397</id><snippet>csv</snippet></ROW><ROW><id>19945397</id><snippet>import csv
with open('A','rb') as f1, open('B','rb') as f2, open('out.csv','wb') as w:
    writer = csv.writer(w)
    r1,r2 = csv.reader(f1),csv.reader(f2)
    while True:
        try:
            writer.writerow(next(r1)+next(r2))
        except StopIteration:
            break
</snippet></ROW><ROW><id>19945397</id><snippet>itertools.izip</snippet></ROW><ROW><id>19945397</id><snippet>zip</snippet></ROW><ROW><id>19945397</id><snippet>from itertools import izip
import csv
with open('A','rb') as f1, open('B','rb') as f2, open('out.csv','wb') as w:
    writer = csv.writer(w)
    for r1,r2 in izip(csv.reader(f1),csv.reader(f2)):
        writer.writerow(r1+r2)
</snippet></ROW><ROW><id>19945465</id><snippet>i</snippet></ROW><ROW><id>19945465</id><snippet>i</snippet></ROW><ROW><id>19945465</id><snippet>i</snippet></ROW><ROW><id>19945465</id><snippet>i</snippet></ROW><ROW><id>19945465</id><snippet>i</snippet></ROW><ROW><id>19945465</id><snippet>50*3</snippet></ROW><ROW><id>19945465</id><snippet>i</snippet></ROW><ROW><id>19945465</id><snippet>k*i</snippet></ROW><ROW><id>19945465</id><snippet>k*(i+1)</snippet></ROW><ROW><id>19945470</id><snippet>if issue.fields.status in ('open', 'reopened'):
    # Move the ticket from opened to closed.
    jira.transition_issue(ticket, transitionId=131)
</snippet></ROW><ROW><id>19945582</id><snippet>execfile</snippet></ROW><ROW><id>19945582</id><snippet>import callee
</snippet></ROW><ROW><id>19945582</id><snippet>execfile("callee.py")
</snippet></ROW><ROW><id>19945582</id><snippet>import</snippet></ROW><ROW><id>19945582</id><snippet>execfile</snippet></ROW><ROW><id>19945634</id><snippet>add = driver.find_element_by_css_selector('input.add')
SearchButton = driver.find_element_by_css_selector('input.add1')

Hover = ActionChains(driver).move_to_element(add).move_to_element(SearchButton)
Hover.click().build().perform()
</snippet></ROW><ROW><id>19945728</id><snippet>plot</snippet></ROW><ROW><id>19945728</id><snippet>scatter</snippet></ROW><ROW><id>19945728</id><snippet>import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm

newvid = asciitable.read('user4.cat') 

n_new = newvid['n']
re_new = newvid['re']
number = newvid['number']
std_dev = newvid['standard_deviation']

n_max = float(number.max())  # for coloring later

plt.figure()
plt.title('sersic parameter vs. standard deviation distribution of noise') 
plt.xlabel('standard deviation')
plt.ylabel('sersic parameter')
plt.xlim(0,12)
plt.ylim(0,5) 
for n in np.unique(number):
    n_mask = number == n                 # pick out just where n_new is the current n
    order = np.argsort(std_dev[n_mask])  # sort by std_dev, so line doesn't zig zag
    plt.plot(std_dev[n_mask][order], n_new[n_mask][order],
             label=str(n), color=cm.jet(n/n_max))    # label and color by n
plt.legend()
plt.show()

plt.figure()
plt.title('half-light radius vs. standard deviation distribution of noise') 
plt.xlabel('standard deviation')
plt.ylabel('half-light radius')
plt.xlim(0,12)
plt.ylim(-2,15)

# do one plot per number
for n in np.unique(number):
    n_mask = number == n                 # pick out just where n_new is the current n
    order = np.argsort(std_dev[n_mask])  # sort by std_dev, so line doesn't zig zag
    plt.plot(std_dev[n_mask][order], re_new[n_mask][order],
             label=str(n), color=cm.jet(n/n_max))    # label and color by n
plt.legend()
plt.show()
</snippet></ROW><ROW><id>19945728</id><snippet>m = cm.ScalarMappable(cmap=cm.jet)
m.set_array(number)
plt.colorbar(m)
</snippet></ROW><ROW><id>19945831</id><snippet>1. Have 2 more fields in each node numLeftChildren and numRightChildren.
2. Initialize both of them to 0 when you create a new node.
3. At the time of insertion, you make a comparison if the newly added node's
key is less than root's key than you increment, root's numLeftChildren and
call recursion on root's left child with the new node.
4. Do Same thing if new node's key is greater than root's key.
</snippet></ROW><ROW><id>19945916</id><snippet>'{0}({1})'.format(func_name, html)</snippet></ROW><ROW><id>19945916</id><snippet>json.dumps</snippet></ROW><ROW><id>19945916</id><snippet>ensure_ascii</snippet></ROW><ROW><id>19945916</id><snippet>json.dumps(html, ensure_ascii=False)
</snippet></ROW><ROW><id>19946080</id><snippet>rm_file_list</snippet></ROW><ROW><id>19946080</id><snippet>chain.from_iterable</snippet></ROW><ROW><id>19946080</id><snippet>import itertools
for rm_file in itertools.chain.from_iterable(rm_file_list):
    os.remove(rm_file)
</snippet></ROW><ROW><id>19946300</id><snippet>return list({element for element in itertools.product(*somelists)})
</snippet></ROW><ROW><id>19946300</id><snippet>list(set(itertools.product(*somelists)))
</snippet></ROW><ROW><id>19946300</id><snippet>import itertools
def cart_product(somelists):
    result, tempSet = [], set()
    for element in itertools.product(*somelists):
        if element not in tempSet:
        tempSet.add(element)
        result.append(element)
    return result
</snippet></ROW><ROW><id>19946300</id><snippet>def cart_product(*somelists):
</snippet></ROW><ROW><id>19946300</id><snippet>def cart_product(somelists):
</snippet></ROW><ROW><id>19946467</id><snippet>def function2():
    name = input("Enter name: ")
    return name

def function3():
    print(function2())
</snippet></ROW><ROW><id>19946467</id><snippet>class A(object):

   def function1(self):
       print("hello")

   def function2(self):
       self.name = input("Enter name: ")

   def function3():
       print(self.name)

   def main(self):  
       self.function1()
       while True:
          funtion2()
          function3()
          if not self.name:
              break

A().main()
</snippet></ROW><ROW><id>19946483</id><snippet>function onMessage(evt) { 
    writeToScreen('&lt;span style="color: blue;"&gt;RESPONSE: ' + evt.data+'&lt;/span&gt;');
    websocket.close();
}
</snippet></ROW><ROW><id>19946696</id><snippet>&gt;&gt;&gt; s = "c,c++,,java"
for i in s.split(','):
    if i:
        print i

c
c++
java
</snippet></ROW><ROW><id>19946696</id><snippet>for i in var:
    if i:
       form1(name=i1,qualification=i2,keyskills=i).save()
</snippet></ROW><ROW><id>19946792</id><snippet>plt.xlabel(u'x (m²)')
plt.xlabel(u'y')
</snippet></ROW><ROW><id>19946792</id><snippet>plt.xlabel('x (m$^2$)')
</snippet></ROW><ROW><id>19946823</id><snippet>time.strptime(string[, format])</snippet></ROW><ROW><id>19946823</id><snippet>time.strftime(format[, t])</snippet></ROW><ROW><id>19946844</id><snippet>import subprocess
import time

currenttime = time.time()
new= time.strftime("%H:%M:%S", time.localtime(currenttime + 0.6* 60))
path=r"path_to_file"
subprocess.call(['SchTasks', '/Create','/SC', 'ONCE','/TN', 'test1','/TR', path,'/ST', new])
subprocess.call(['SchTasks', '/Create','/SC', 'ONCE','/TN', 'test2','/TR', path,'/ST', new])
</snippet></ROW><ROW><id>19946975</id><snippet>"[...]Volume_Fraction*180/PI"%d(selected_hole[...]
</snippet></ROW><ROW><id>19946975</id><snippet>"[...]Volume_Fraction*180/PI%d"%(selected_hole[...]
</snippet></ROW><ROW><id>19946982</id><snippet>myList.prev = myList.cursor
</snippet></ROW><ROW><id>19946982</id><snippet>myList</snippet></ROW><ROW><id>19946982</id><snippet>MyList</snippet></ROW><ROW><id>19946982</id><snippet>prev</snippet></ROW><ROW><id>19946982</id><snippet>myList.cursor.prev = myList.cursor
myList.cursor.next = myList.cursor
</snippet></ROW><ROW><id>19947004</id><snippet>if statement:
if statement: 
</snippet></ROW><ROW><id>19947004</id><snippet>if statement:
elif statment:
</snippet></ROW><ROW><id>19947004</id><snippet>if statement:
else:
</snippet></ROW><ROW><id>19947126</id><snippet>CHUNK = 1024
FORMAT = pyaudio.paInt16
CHANNELS = 2
RATE = 44100
RECORD_SECONDS = 2

for CHUNK1 in [512,2048,4096,8192,16384]:
    for CHUNK2 in [512,2048,4096,8192,16384]:
        stream = p.open(format=FORMAT,
                        channels=CHANNELS,
                        rate=RATE,
                        input=True,
                        frames_per_buffer=CHUNK1)


        try:
            print CHUNK1,CHUNK2
            for i in range(0, int(RATE / CHUNK * RECORD_SECONDS)):
                data = stream.read(CHUNK2)
        except:
            print "Boohoo"

        stream.stop_stream()
        stream.close()
</snippet></ROW><ROW><id>19947126</id><snippet>byte_string = ''.join(data)
nums = array.array('h', byte_string)
for elt in nums[1::2]:
    left.put(elt)
for elt in nums[0::2]:
    right.put(elt)
</snippet></ROW><ROW><id>19947126</id><snippet>for</snippet></ROW><ROW><id>19947126</id><snippet>import numpy as np
</snippet></ROW><ROW><id>19947126</id><snippet>n=np.fromstring(data,np.uint16)
left.put(n[1::2])
right.put(n[0::2])
</snippet></ROW><ROW><id>19947126</id><snippet>for</snippet></ROW><ROW><id>19947126</id><snippet>array</snippet></ROW><ROW><id>19947126</id><snippet>np.array</snippet></ROW><ROW><id>19947126</id><snippet>a=array.array('h',s)
n=np.array(a)

In [26]: %timeit n[1::2]
1000000 loops, best of 3: 669 ns per loop

In [27]: %timeit n[1::2].copy()
1000 loops, best of 3: 725 us per loop

In [28]: %timeit a[1::2]
1000 loops, best of 3: 1.91 ms per loop
</snippet></ROW><ROW><id>19947227</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>19947227</id><snippet>enable_alias.sh</snippet></ROW><ROW><id>19947227</id><snippet>filename=$1
cp ~/.bash_aliases ~/.bash_aliases.bak
# If you use `cat` here, your aliases file will keep getting longer and longer with repeated definitions...  think you want to use &gt; not &gt;&gt;
cp /path/to/$1.txt ~/.bash_aliases    
source ~/.bash_aliases
</snippet></ROW><ROW><id>19947227</id><snippet>PATH</snippet></ROW><ROW><id>19947227</id><snippet>enable_alias.sh A
</snippet></ROW><ROW><id>19947227</id><snippet>A.txt</snippet></ROW><ROW><id>19947227</id><snippet>.bash_profile</snippet></ROW><ROW><id>19947227</id><snippet>$1</snippet></ROW><ROW><id>19947227</id><snippet>disable_alias(){
    mv ~/.bash_aliases.bak ~/.bash_aliases
    source ~/.bash_aliases
}
</snippet></ROW><ROW><id>19947227</id><snippet>unalias</snippet></ROW><ROW><id>19947227</id><snippet>A.txt</snippet></ROW><ROW><id>19947227</id><snippet>B.txt</snippet></ROW><ROW><id>19947227</id><snippet>cp A.txt ~/.bash_aliases</snippet></ROW><ROW><id>19947227</id><snippet>disable</snippet></ROW><ROW><id>19947227</id><snippet>B.txt</snippet></ROW><ROW><id>19947310</id><snippet>__dict__</snippet></ROW><ROW><id>19947310</id><snippet>&gt;&gt;&gt; f = Foo()
&gt;&gt;&gt; type(f.__class__.__dict__['bari'])
&lt;class 'function'&gt;
&gt;&gt;&gt; type(f.__class__.__dict__['barc'])
&lt;class 'classmethod'&gt;
&gt;&gt;&gt; type(f.__class__.__dict__['bars'])
&lt;class 'staticmethod'&gt;
</snippet></ROW><ROW><id>19947703</id><snippet>ANSI</snippet></ROW><ROW><id>19947703</id><snippet>Windows-1251</snippet></ROW><ROW><id>19947703</id><snippet>cmd.exe</snippet></ROW><ROW><id>19947703</id><snippet>cp866</snippet></ROW><ROW><id>19947703</id><snippet>codecs</snippet></ROW><ROW><id>19947703</id><snippet>import codecs

with codecs.open('out.txt',encoding='cp1251') as ins:
    words = []
    s=0
    for line in ins:
        if (s&lt;10):
            print line, 
            s=s+1
        words.append(line)
</snippet></ROW><ROW><id>19947703</id><snippet>федор|федора
михайлович
достоевский
записка
из
подполье
публичный
электронный
библиотека
</snippet></ROW><ROW><id>19947703</id><snippet>cp866</snippet></ROW><ROW><id>19947703</id><snippet>chcp 866</snippet></ROW><ROW><id>19947703</id><snippet>федор|федора
михайлович
достоевский
записка
из
подполье
публичный
электронный
библиотека
</snippet></ROW><ROW><id>19947703</id><snippet>ЅІЃЂЌЏЉЈЋЊ—ґҐ–”“„’‘‚§…‡†•\xad€®©«µ¶±‰‹»›ѕ¦ѓђќџљјћњ™і¬
</snippet></ROW><ROW><id>19947775</id><snippet>def get_speakers(request)
     speakers = Person.objects.filter(profile__person_type__name='Speaker').values('first_name', 'last_name', 'series__name', 'series__id')
     return JSONResponse(speakers)
</snippet></ROW><ROW><id>19947775</id><snippet>_</snippet></ROW><ROW><id>19947775</id><snippet>'series__name'</snippet></ROW><ROW><id>19948073</id><snippet>key</snippet></ROW><ROW><id>19948073</id><snippet>max</snippet></ROW><ROW><id>19948073</id><snippet>print  ''.join([a+b for a,b in zip(s1, s2)]) + max(s1,s2, key=len)[min(len(s1),len(s2)):]
</snippet></ROW><ROW><id>19948073</id><snippet>import itertools
s1,s2='abcd' ,'efghi'
print "".join(y for x in itertools.izip_longest(s1, s2) for y in x if y)
</snippet></ROW><ROW><id>19948073</id><snippet>aebfcgdhi
</snippet></ROW><ROW><id>19948073</id><snippet>itertools</snippet></ROW><ROW><id>19948073</id><snippet>s1,s2='abcd' ,'efghi'
minLen = min(len(s1), len(s2))
print "".join(y for x in zip(s1, s2) for y in x) + s1[minLen:] + s2[minLen:]
</snippet></ROW><ROW><id>19948172</id><snippet> re.compile("[A-Za-z_]"       # letter or underscore
            "[A-Za-z0-9_]*"   # letter, digit or underscore
            )
</snippet></ROW><ROW><id>19948204</id><snippet>wget http://127.0.0.1:5000
</snippet></ROW><ROW><id>19948204</id><snippet>Hello World</snippet></ROW><ROW><id>19948403</id><snippet>outerjoin</snippet></ROW><ROW><id>19948403</id><snippet>join</snippet></ROW><ROW><id>19948403</id><snippet>query = (session.query(Ip, func.count(Client.id)).
    outerjoin(ClientIp, ClientIp.ip_id==Ip.id).
    outerjoin(Client, Client.id==ClientIp.client_id).
    group_by(Ip.id)
)
</snippet></ROW><ROW><id>19948403</id><snippet>OUTER JOIN</snippet></ROW><ROW><id>19948403</id><snippet>indices</snippet></ROW><ROW><id>19948403</id><snippet>ForeignKey</snippet></ROW><ROW><id>19948483</id><snippet>view.setRootIndex(model.index("C:\Myfolder"))</snippet></ROW><ROW><id>19948536</id><snippet>\*?</snippet></ROW><ROW><id>19948536</id><snippet>*</snippet></ROW><ROW><id>19948536</id><snippet>import re
input_string = '{string}{string}*{string}{string}*'
for match in re.finditer(r'{([^}]*)}\*?', input_string):
     print str(match.group(0)) #outputs {string}
</snippet></ROW><ROW><id>19948536</id><snippet>{string}
{string}*
{string}
{string}*
</snippet></ROW></DATA>