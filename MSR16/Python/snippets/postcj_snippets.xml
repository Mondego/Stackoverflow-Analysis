<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>13877105</id><snippet>import numpy as np
a = np.ma.zeros((500, 500))
a.dump('test')
</snippet></ROW><ROW><id>13877105</id><snippet>a = np.load('test')
</snippet></ROW><ROW><id>13877321</id><snippet>fread()</snippet></ROW><ROW><id>13877321</id><snippet>import struct
out = open("myvertex.bin", "wb")
string = "hello"
fmt = "&lt;%usfff" % (1 + len(string))
out.write(struct.pack(fmt, string, 3.14, 47.11, 17))
</snippet></ROW><ROW><id>13877321</id><snippet>"hello\x00\xc3\xf5H@\xa4p&lt;B\x00\x00\x88A"</snippet></ROW><ROW><id>13877407</id><snippet>key</snippet></ROW><ROW><id>13877407</id><snippet>keysym</snippet></ROW><ROW><id>13877407</id><snippet>char</snippet></ROW><ROW><id>13877407</id><snippet>event</snippet></ROW><ROW><id>13877407</id><snippet>def key(event):
    print "pressed", repr(event.keysym)
</snippet></ROW><ROW><id>13877407</id><snippet>key</snippet></ROW><ROW><id>13877407</id><snippet>&lt;Control-Key-1&gt;</snippet></ROW><ROW><id>13877407</id><snippet>&lt;Control-1&gt;</snippet></ROW><ROW><id>13877407</id><snippet>for i in range(10):
    text.bind('&lt;Control-Key-'+str(i)+'&gt;',  key)
</snippet></ROW><ROW><id>13877407</id><snippet>#text.bind("&lt;Key&gt;", key)
</snippet></ROW><ROW><id>13877407</id><snippet>for i in range(ord('a'), ord('z') + 1):
    text.bind('&lt;Control-Key-'+chr(i)+'&gt;',  key)
</snippet></ROW><ROW><id>13877431</id><snippet>com.google.common.collect.Iterables#concat()</snippet></ROW><ROW><id>13877481</id><snippet>test_&lt;something&gt;.py</snippet></ROW><ROW><id>13877900</id><snippet>str.rstrip()</snippet></ROW><ROW><id>13877900</id><snippet>for line in open('file.txt'):
    line = line.rstrip()  # strip the trailing CRLF
    # do what you need with the line
</snippet></ROW><ROW><id>13878809</id><snippet>button.focus()</snippet></ROW><ROW><id>13878809</id><snippet>import Tkinter as tk

class App(object):
    def __init__(self, master):
        dismiss = tk.Button(master, text = 'dismiss', command = self.on_dismiss)
        ok = tk.Button(master, text = 'ok', command = self.on_ok)
        ok.bind('&lt;Return&gt;', self.on_ok)
        dismiss.bind('&lt;Escape&gt;', self.on_dismiss) 
        ok.focus()
        dismiss.pack(fill = tk.BOTH)
        ok.pack(fill = tk.BOTH)
    def on_ok(self, event = None):
        print("Aww, it's okay!")
    def on_dismiss(self, event = None):
        print("Dismissed!")
root = tk.Tk()
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>13878809</id><snippet>self.on_ok</snippet></ROW><ROW><id>13878809</id><snippet>ok.bind</snippet></ROW><ROW><id>13878809</id><snippet>master.bind</snippet></ROW><ROW><id>13878981</id><snippet>\x00</snippet></ROW><ROW><id>13878981</id><snippet>import string
printable = set(string.printable)
print ''.join(x if x in printable else '.' for x in data)
</snippet></ROW><ROW><id>13878981</id><snippet>&gt;&gt;&gt; data = 'E\x00\x00)\x1a*@\x00\x80\x06L\xfd\xc0\xa8\x01\x84\xad\xc2#\xb9M\xb8\x00P\xed\xb3\x19\xd9\xedY\xc1\xfbP\x10\x01\x04\x16=\x00\x00\x00'
&gt;&gt;&gt; print ''.join(x if x in printable else '.' for x in data)
E..).*@...L.......#.M..P.....Y..P....=...
</snippet></ROW><ROW><id>13879346</id><snippet>$ apt-get install python-lxml
</snippet></ROW><ROW><id>13879346</id><snippet>$ cp -r /usr/lib/python2.7/dist-packages/lxml* /home/dummyuser/work/virt-dev-env/local/lib/python2.7/site-packages/
</snippet></ROW><ROW><id>13879346</id><snippet>$ pip freeze
........
lxml==2.3.2
........
</snippet></ROW><ROW><id>13879475</id><snippet>obj = your_model.objects.filter( user = uid)
</snippet></ROW><ROW><id>13879549</id><snippet>cumsum</snippet></ROW><ROW><id>13879549</id><snippet>from pandas import DataFrame
df = DataFrame({0: {'10/10/2012': 50, '10/11/2012': -10, '10/12/2012': 100}, 1: {'10/10/2012': 0, '10/11/2012': 90, '10/12/2012': -5}})

In [3]: df
Out[3]: 
              0   1
10/10/2012   50   0
10/11/2012  -10  90
10/12/2012  100  -5

In [4]: df.cumsum()
Out[4]: 
              0   1
10/10/2012   50   0
10/11/2012   40  90
10/12/2012  140  85
</snippet></ROW><ROW><id>13879746</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>13879746</id><snippet>/usr/bin/pythonX.Y</snippet></ROW><ROW><id>13879746</id><snippet>/usr/bin/env python</snippet></ROW><ROW><id>13879746</id><snippet>/usr/bin/env pythonX.Y</snippet></ROW><ROW><id>13879746</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>13879746</id><snippet>pip</snippet></ROW><ROW><id>13879746</id><snippet>aptitude</snippet></ROW><ROW><id>13879746</id><snippet>env</snippet></ROW><ROW><id>13879746</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>13880101</id><snippet>&gt;&gt;&gt; class Calc(object):
    def __init__(self):
            #Initialize a dictionary of keywords and callbacks
        self.operation = {
            'add':self.add,
            'sub':self.sub,
            'mul':self.mul,
            'div':self.div,
            'neg':self.neg

            }
    #Overload the function call
    def __call__(self, *args):
        return self.operation[args[0]](*args[1:])
    # *args - variable list argument list
    def add(self,*args):
        return sum(args)
    def sub(self,*args):
        return args[1] - args[0]
    def mul(self, *args):
        if len(args) == 0:
            return 1
        elif len(args) == 1:
            return args[0]
        else:
            return args[0] * args[1]
    def div(self, *args):
        return args[0] / args[1]
    def neg(self, *args):
        return -args[0]


&gt;&gt;&gt; calc = Calc()
&gt;&gt;&gt; calc('add',1,2,3)
6
&gt;&gt;&gt; calc('mul',10)
10
&gt;&gt;&gt; calc('mul',10,4)
40
&gt;&gt;&gt; calc('neg',3)
-3
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13880189</id><snippet>def hello_user(self):
    return self.get_name
</snippet></ROW><ROW><id>13880189</id><snippet>def hello_user(self):
    return self.get_name()
</snippet></ROW><ROW><id>13880189</id><snippet>get_name</snippet></ROW><ROW><id>13880189</id><snippet>get_name</snippet></ROW><ROW><id>13880480</id><snippet>__spam</snippet></ROW><ROW><id>13880480</id><snippet>_classname__spam</snippet></ROW><ROW><id>13880776</id><snippet>start python D:\py\s1.py
start python D:\py\s2.py
</snippet></ROW><ROW><id>13880776</id><snippet>start C:\python27\python.exe D:\py\s1.py
start C:\python27\python.exe D:\py\s2.py
</snippet></ROW><ROW><id>13880776</id><snippet>start /?</snippet></ROW><ROW><id>13880899</id><snippet>{{ wrapping|slice:":-3" }}
</snippet></ROW><ROW><id>13881118</id><snippet>cur.execute("SELECT "+column+" FROM Data where "+goal+"=?", (constrain,))
</snippet></ROW><ROW><id>13881118</id><snippet>cur.execute("SELECT %s FROM Data where %s=?" % (column, goal), (constrain,))
</snippet></ROW><ROW><id>13881368</id><snippet>curl|grep</snippet></ROW><ROW><id>13881368</id><snippet>if ! `curl -i -s http://www.google.com|grep -q 302` ; then echo "302 is missed" ; fi
</snippet></ROW><ROW><id>13881502</id><snippet>#file test.py
myvariable = 5  #myvariable has module-level scope

def func():
    x = 3  # x has "local" or function level scope.
</snippet></ROW><ROW><id>13881502</id><snippet>return</snippet></ROW><ROW><id>13881502</id><snippet>myvariable = 5
def func():
    print myvariable  #prints 5

def func2():
    x = 3
    def func3():
        print x  #will print 3 because it picks it up from `func2`'s scope

    func3()
</snippet></ROW><ROW><id>13881502</id><snippet>myvariable = 5
def func():
    myvariable = 6    #creates a new "local" variable.  
                      #Doesn't affect the global version
    print myvariable  #prints 6

func()
print myvariable   #prints 5
</snippet></ROW><ROW><id>13881502</id><snippet>global</snippet></ROW><ROW><id>13881502</id><snippet>global</snippet></ROW><ROW><id>13881502</id><snippet>myvariable = 5
def func():
    global myvariable
    myvariable = 6   #changes `myvariable` at the global scope
    print myvariable #prints 6

func()
print myvariable  #prints 6 now because we were able 
                  #to modify the reference in the function
</snippet></ROW><ROW><id>13881502</id><snippet>myvariable</snippet></ROW><ROW><id>13881502</id><snippet>func</snippet></ROW><ROW><id>13881502</id><snippet>global</snippet></ROW><ROW><id>13881502</id><snippet>def func1():
    x = 3
    def func2():
        print("x=",x,"func2")
        y = 4
        def func3():
            nonlocal x  #try it with nonlocal commented out as well.  See the difference.
            print("x=",x,"func3")
            print("y=",y,"func3")
            z = 5
            print("z=",z,"func3")
            x = 10

        func3()

    func2()
    print("x=",x,"func1")

func1()
</snippet></ROW><ROW><id>13881502</id><snippet>x</snippet></ROW><ROW><id>13881502</id><snippet>func1</snippet></ROW><ROW><id>13881502</id><snippet>func3</snippet></ROW><ROW><id>13881502</id><snippet>nonlocal</snippet></ROW><ROW><id>13881502</id><snippet>nonlocal</snippet></ROW><ROW><id>13881502</id><snippet>global</snippet></ROW><ROW><id>13881591</id><snippet>urllib2</snippet></ROW><ROW><id>13881591</id><snippet># We want to make an HTTP/1.1 request, but the addinfourl
# class isn't prepared to deal with a persistent connection.
# It will try to read all remaining data from the socket,
# which will block while the server waits for the next request.
# So make sure the connection gets closed after the (only)
# request.
headers["Connection"] = "close"
</snippet></ROW><ROW><id>13881591</id><snippet>requests</snippet></ROW><ROW><id>13881591</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; r = requests.get('http://httpbin.org/get')
&gt;&gt;&gt; pprint.pprint(r.json)
{u'args': {},
 u'headers': {u'Accept': u'*/*',
              u'Accept-Encoding': u'gzip, deflate, compress',
              u'Connection': u'keep-alive',
              u'Content-Length': u'',
              u'Content-Type': u'',
              u'Host': u'httpbin.org',
              u'User-Agent': u'python-requests/0.14.1 CPython/2.6.8 Darwin/11.4.2'},
 u'origin': u'176.11.12.149',
 u'url': u'http://httpbin.org/get'}
</snippet></ROW><ROW><id>13881591</id><snippet>requests</snippet></ROW><ROW><id>13881591</id><snippet>Connection: keep-alive</snippet></ROW><ROW><id>13881702</id><snippet>\*(.*?)\n
</snippet></ROW><ROW><id>13881702</id><snippet>"\\*(.*?)\\n"
</snippet></ROW><ROW><id>13881702</id><snippet>\*(.*?)\n</snippet></ROW><ROW><id>13881702</id><snippet>len(string)</snippet></ROW><ROW><id>13881702</id><snippet>9</snippet></ROW><ROW><id>13881702</id><snippet>11</snippet></ROW><ROW><id>13881702</id><snippet>len(input)</snippet></ROW><ROW><id>13881702</id><snippet>open</snippet></ROW><ROW><id>13881702</id><snippet>11</snippet></ROW><ROW><id>13881702</id><snippet>15</snippet></ROW><ROW><id>13881702</id><snippet>r"\*(.*?)\n"
</snippet></ROW><ROW><id>13881924</id><snippet>temps = comm.bcast(temps,root=0)
</snippet></ROW><ROW><id>13881924</id><snippet>temps</snippet></ROW><ROW><id>13881924</id><snippet>gather</snippet></ROW><ROW><id>13881924</id><snippet>allgather</snippet></ROW><ROW><id>13881924</id><snippet>from mpi4py import MPI
import pdb
import os

comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

assert size == 2

# Declare the array that will store all the temp results
temps = [[0 for x in xrange(5)] for x in xrange(4)]

# declare the array that holds the local results
locals =[[0 for x in xrange(5)] for x in xrange(2)]

# Loop over all directories
if rank==0:
   counter = 0
   for i in range(2):
      for j in range(5):
         locals[i][j] = counter
         counter = counter + 1

else:
   counter = 20
   for i in range(2):
      for j in range(5):
         locals[i][j] = counter
         counter = counter + 1

temps = comm.gather(locals,temps,root=0)

if rank==0:
   print temps
</snippet></ROW><ROW><id>13881924</id><snippet>from mpi4py import MPI
import numpy

comm = MPI.COMM_WORLD
size = comm.Get_size()
rank = comm.Get_rank()

assert size == 2

# Declare the array that will store all the temp results
temps = numpy.zeros((4,5))

# Loop over all directories
if rank==0:
   counter = 0
   for i in range(2):
      for j in range(5):
         temps[i,j] = counter
         counter = counter + 1

else:
   counter = 20
   for i in range(2,4):
      for j in range(5):
         temps[i,j] = counter
         counter = counter + 1

comm.Allreduce(MPI.IN_PLACE,temps,op=MPI.MAX)

if rank==0:
   print temps
</snippet></ROW><ROW><id>13882120</id><snippet>import itertools
with open(filename) as fin:
    ilines = itertools.islice(fin, 2, None) #this throws away the first 2 lines
    lines = sorted(ilines, key=lambda x: x.split()[0])  #sort lexicographically on first column

with open('header') as header, open('%s.header'%filename) as fout:
    fout.writelines(header) #write the header
    fout.writelines(lines) #write the data
</snippet></ROW><ROW><id>13882430</id><snippet>jnlp_href:'portal_url/++resource++java/gestioneoneri.jnlp'
</snippet></ROW><ROW><id>13882430</id><snippet>&lt;jnlp href="gestioneoneri.jnlp"&gt;
</snippet></ROW><ROW><id>13882430</id><snippet>portal_url/++resource++java/
</snippet></ROW><ROW><id>13882430</id><snippet>&lt;jar href="portal_url/++resource++java/GestioneOneri.jar" main="true" /&gt;
</snippet></ROW><ROW><id>13882430</id><snippet>&lt;jar href="GestioneOneri.jar" main="true" /&gt;
</snippet></ROW><ROW><id>13882474</id><snippet>sys.getsizeof()</snippet></ROW><ROW><id>13882474</id><snippet>k = [42] * 9999999
print sys.getsizeof(k)
</snippet></ROW><ROW><id>13882799</id><snippet>a2</snippet></ROW><ROW><id>13882799</id><snippet>a2</snippet></ROW><ROW><id>13882817</id><snippet>Database</snippet></ROW><ROW><id>13882817</id><snippet>from sqlite import *
</snippet></ROW><ROW><id>13882833</id><snippet>&gt;&gt;&gt; lst = [6, 5, 4, 3, 2, 1]
&gt;&gt;&gt; variable = 3
&gt;&gt;&gt; if variable == 3:
        del lst[1]
&gt;&gt;&gt; lst
[6, 4, 3, 2, 1]
</snippet></ROW><ROW><id>13882881</id><snippet>maxrss</snippet></ROW><ROW><id>13882881</id><snippet>subprocess</snippet></ROW><ROW><id>13882881</id><snippet>childpid</snippet></ROW><ROW><id>13882881</id><snippet>execv</snippet></ROW><ROW><id>13882881</id><snippet>childpid</snippet></ROW><ROW><id>13882881</id><snippet>resource</snippet></ROW><ROW><id>13882881</id><snippet>childpid</snippet></ROW><ROW><id>13883120</id><snippet>.py</snippet></ROW><ROW><id>13883120</id><snippet>tal:define="results here/getCatalogDestaques"
</snippet></ROW><ROW><id>13883438</id><snippet>B-&gt;A</snippet></ROW><ROW><id>13883438</id><snippet>A-&gt;B</snippet></ROW><ROW><id>13883477</id><snippet>.*</snippet></ROW><ROW><id>13883477</id><snippet>[^0-9]</snippet></ROW><ROW><id>13883477</id><snippet>[^0-9]</snippet></ROW><ROW><id>13883477</id><snippet>[^0-9]</snippet></ROW><ROW><id>13883477</id><snippet>verbose_item_pattern_3 = re.compile(r"""
  ^            # start-of-line
  \t*          # 0-or-more tabspace
  [ ]*         # 0-or-more blank space
  I            # a capital I
  [tT][eE][mM] # one character from each of the three sets this allows for unknown case
  \t*          # 0-or-more tabspace
  [ ]*         # 0-or-more blankspace
  \d{1,2}      # 1-or-2 digits
  [.]?         # 0-or-1 literal .
  \(?          # 0-or-1 literal open paren
  [a-e]?       # 0-or-1 letter in the range a-e
  \)?          # 0-or-1 closing paren
  .*           # any number of unknown characters so we can have words and punctuation
  $            # end-of-line
  (?&lt;![0-9])   # NOT preceded by a decimal digit (via look-behind)
  """, re.VERBOSE|re.MULTILINE)
</snippet></ROW><ROW><id>13883477</id><snippet>^</snippet></ROW><ROW><id>13883477</id><snippet>$</snippet></ROW><ROW><id>13883477</id><snippet>^</snippet></ROW><ROW><id>13883477</id><snippet>$</snippet></ROW><ROW><id>13883477</id><snippet>start-of-line</snippet></ROW><ROW><id>13883477</id><snippet>end-of-line</snippet></ROW><ROW><id>13883477</id><snippet>$</snippet></ROW><ROW><id>13883597</id><snippet>In [22]: dict(sorted(scores))
Out[22]: {'alex': 99, 'eyal': 100, 'oded': 90}
</snippet></ROW><ROW><id>13883597</id><snippet>dict()</snippet></ROW><ROW><id>13883597</id><snippet>In [16]: [max(vals) for _,vals in itertools.groupby(sorted(scores), lambda x:x[0])]
Out[16]: [('alex', 99), ('eyal', 100), ('oded', 90)]
</snippet></ROW><ROW><id>13884133</id><snippet>def makeOpener(pdf, page):
    '''makes a pyw file to use to hyperlink in excel'''
    t = 'c:/temp'
    if not os.path.isdir(t):
        os.makedirs(t)
    tempfile.tempdir = t
    py = tempfile.NamedTemporaryFile(suffix='.pyw', delete=False)

    lst = ['import subprocess, win32api',
           'pdf = r"' + pdf + '"',
           'page = "' + str(int(page)) + '"',
           '_, exe = win32api.FindExecutable(pdf)', 
           'opts = "page=" + page', 
           'clst = [exe, "/A", opts, "/N", pdf]', 
           'DP = 0x00000008', 
           'subprocess.Popen(clst, shell=False, creationflags=DP)'
           ]
    py.write('\n'.join(lst))       
    py.close()
    return py.name
</snippet></ROW><ROW><id>13884173</id><snippet>osqa</snippet></ROW><ROW><id>13884173</id><snippet>347     for k in auth_keys:
348         provider = AUTH_PROVIDERS.get(k.provider, None)
349
350         if provider is not None:
351             name =  "%s: %s" % (provider.context.human_name, provider.context.readable_key(k))
352         else:
353             from forum.authentication.base import ConsumerTemplateContext
354             "unknown: %s" % ConsumerTemplateContext.readable_key(k)
355 
356         auth_keys_list.append({
357         'name': name,
358         'id': k.id
359         })
</snippet></ROW><ROW><id>13884173</id><snippet>name = "unknown: %s" % ConsumerTemplateContext.readable_key(k)</snippet></ROW><ROW><id>13884173</id><snippet>name =</snippet></ROW><ROW><id>13884173</id><snippet>osqa</snippet></ROW><ROW><id>13884173</id><snippet>k.provider</snippet></ROW><ROW><id>13884173</id><snippet>AUTH_PROVIDERS</snippet></ROW><ROW><id>13884173</id><snippet>osqa</snippet></ROW><ROW><id>13884173</id><snippet>provider</snippet></ROW><ROW><id>13884173</id><snippet>None</snippet></ROW><ROW><id>13884173</id><snippet>auth_key</snippet></ROW><ROW><id>13884173</id><snippet>user</snippet></ROW><ROW><id>13884173</id><snippet>AUTH_PROVIDERS</snippet></ROW><ROW><id>13884213</id><snippet>in</snippet></ROW><ROW><id>13884213</id><snippet>L</snippet></ROW><ROW><id>13884213</id><snippet>e in L</snippet></ROW><ROW><id>13884213</id><snippet>L.__contains__(e)</snippet></ROW><ROW><id>13884213</id><snippet>in</snippet></ROW><ROW><id>13884213</id><snippet>__hash__</snippet></ROW><ROW><id>13884215</id><snippet>np.fromiter</snippet></ROW><ROW><id>13884215</id><snippet>results = np.fromiter((np.amax(np.amax(np.where(a1 &gt; element)) for element in a2), dtype=int, count=len(a2))
</snippet></ROW><ROW><id>13884215</id><snippet>count</snippet></ROW><ROW><id>13884215</id><snippet>In [8]: %timeit np.asarray([np.amax(np.where(a1 &gt; element)) for element in a2])                                 
1000 loops, best of 3: 161 us per loop

In [10]: %timeit np.frompyfunc(lambda element: np.amax(np.where(a1 &gt; element)),1,1)(a2,out=np.empty_like(a2))   
10000 loops, best of 3: 123 us per loop

In [13]: %timeit np.fromiter((np.amax(np.where(a1 &gt; element)) for element in a2),dtype=int, count=len(a2))
10000 loops, best of 3: 111 us per loop
</snippet></ROW><ROW><id>13884298</id><snippet>for name in l2:
    return [x for x in l1 if name in x]
</snippet></ROW><ROW><id>13884557</id><snippet>&gt;&gt;&gt; def add(x,y):
...     return x+y
... 
&gt;&gt;&gt; def magic_map(func,*args):
...     return itertools.starmap(func,itertools.izip(*args))  #just zip in python 3.
...
&gt;&gt;&gt; list(magic_map(add,['a', 'b', 'c'], itertools.repeat('1')))
['a1', 'b1', 'c1']
</snippet></ROW><ROW><id>13884557</id><snippet>zip</snippet></ROW><ROW><id>13884557</id><snippet>itertools.repeat</snippet></ROW><ROW><id>13884557</id><snippet>import itertools
import functools

def magic_map(func,*args):
    return itertools.starmap(func,itertools.izip(*args))  #just zip in python 3.

lst = ["a_b","v_c","g,g"]
print list(magic_map(str.split, lst, itertools.repeat('_')))

intermed_func = functools.partial(magic_map,str.split)
print list(intermed_func(lst ,itertools.repeat('_')))

final_func = functools.partial(intermed_func,lst)
print list(final_func(itertools.repeat('_')))
</snippet></ROW><ROW><id>13884557</id><snippet>[['a', 'b'], ['v', 'c'], ['g,g']]
[['a', 'b'], ['v', 'c'], ['g,g']]
[['a', 'b'], ['v', 'c'], ['g,g']]
</snippet></ROW><ROW><id>13885266</id><snippet>&gt;&gt;&gt; for x,y,z in itertools.product(range(2), range(2), range(3)):
...     print x,y,z
... 
0 0 0
0 0 1
0 0 2
0 1 0
0 1 1
0 1 2
1 0 0
1 0 1
1 0 2
1 1 0
1 1 1
1 1 2
</snippet></ROW><ROW><id>13885620</id><snippet>sys.path</snippet></ROW><ROW><id>13885620</id><snippet>pip</snippet></ROW><ROW><id>13885620</id><snippet>easy_install</snippet></ROW><ROW><id>13885620</id><snippet>setup.py</snippet></ROW><ROW><id>13885620</id><snippet>type -p python</snippet></ROW><ROW><id>13885620</id><snippet>/usr/local/bin/</snippet></ROW><ROW><id>13885620</id><snippet>/usr/bin/python2.7 -c 'from twisted.internet.protocol import Factory,Protocol'</snippet></ROW><ROW><id>13885732</id><snippet>s.accept()</snippet></ROW><ROW><id>13885732</id><snippet>accept</snippet></ROW><ROW><id>13885855</id><snippet>import re</snippet></ROW><ROW><id>13885855</id><snippet>split()</snippet></ROW><ROW><id>13885855</id><snippet>\b</snippet></ROW><ROW><id>13885855</id><snippet>words = re.sub(r'\b', '\f', sentence).split('\f')
</snippet></ROW><ROW><id>13885855</id><snippet>split(r'\b')</snippet></ROW><ROW><id>13885855</id><snippet>['', 'The', ' ', 'quick', ' ', 'brown', ' ', 'fox', ', ', 'jumps', ' ', 'over', ' ', 'the', ' ', 'lazy', ' ', 'dog', '.']
</snippet></ROW><ROW><id>13885879</id><snippet>foundInstances.append(['http://' + str(num) + 'endofsite' + ', ' + desc])
</snippet></ROW><ROW><id>13885879</id><snippet>csv</snippet></ROW><ROW><id>13885879</id><snippet>[col1, col2, col3]</snippet></ROW><ROW><id>13885879</id><snippet>["col1, col2, col3"]</snippet></ROW><ROW><id>13885879</id><snippet>foundInstances.append(['http://' + str(num) + 'endofsite', desc])
</snippet></ROW><ROW><id>13885909</id><snippet>class Memory(models.Model):
    partNum = models.CharField()
    capacity = models.CharField()

class Computer(models.Model):
    name = models.CharField()
    memory = models.ManyToManyField(Memory, through='ComputerMemory')

class ComputerMemory(models.Model):
    memory = models.ForeignKey(Memory)
    computer = models.ForeignKey(Computer)
    count = models.IntegerField()
</snippet></ROW><ROW><id>13886160</id><snippet>dict.keys()</snippet></ROW><ROW><id>13886160</id><snippet>dict.keys()</snippet></ROW><ROW><id>13886195</id><snippet>class MyClass(object):
    def meth_a(self):
        pass

    def meth_b(self):
        print "I'm meth_b"
</snippet></ROW><ROW><id>13886195</id><snippet>pass</snippet></ROW><ROW><id>13886195</id><snippet>IndentationError: expected an indented block
</snippet></ROW><ROW><id>13886207</id><snippet>import os
from os.path import walk

mydict = {"&lt;/b&gt;":"&lt;/strong&gt;", "&lt;/a&gt;":"&lt;/h&gt;", "&lt;p&gt;":"&lt;/p&gt;"}

for (path, dirs, files) in os.walk('./'):
    for f in files:
        if f.endswith('.html'):
            filepath = os.path.join(path,f)
            s = open(filepath).read()
            for k, v in mydict.iteritems():
                s = s.replace(k, v)
            f = open(filepath, 'w')
            f.write(s)
            f.close()
</snippet></ROW><ROW><id>13886207</id><snippet>os.walk('./')</snippet></ROW><ROW><id>13886207</id><snippet>os.walk('/anyFolder/')</snippet></ROW><ROW><id>13886283</id><snippet>selenium</snippet></ROW><ROW><id>13886283</id><snippet>tr.gz</snippet></ROW><ROW><id>13886283</id><snippet>cd</snippet></ROW><ROW><id>13886283</id><snippet>python setup.py install</snippet></ROW><ROW><id>13886283</id><snippet>pip</snippet></ROW><ROW><id>13886283</id><snippet>pip install -U selenium</snippet></ROW><ROW><id>13886283</id><snippet>$ sudo apt-get install python-pip
$ sudo pip install selenium
</snippet></ROW><ROW><id>13886283</id><snippet>c:\Users\User\Desktop\..</snippet></ROW><ROW><id>13886283</id><snippet>python setup.py install</snippet></ROW><ROW><id>13886283</id><snippet>c:\Python27\python.exe setup.py install</snippet></ROW><ROW><id>13886283</id><snippet>python setup.py install</snippet></ROW><ROW><id>13886423</id><snippet>def numbers(s):
    return int(re.search(r"\d+", s).group(0))
</snippet></ROW><ROW><id>13886423</id><snippet>def numbers(s):
    return [int(match) for match in re.findall(r"\d+", s)]
</snippet></ROW><ROW><id>13886423</id><snippet>def numbers(s):
    return (int(match) for match in re.finditer(r"\d+", s))
</snippet></ROW><ROW><id>13886610</id><snippet>__getattribute__()</snippet></ROW><ROW><id>13886610</id><snippet>__getattribute__</snippet></ROW><ROW><id>13886610</id><snippet>my_components</snippet></ROW><ROW><id>13886610</id><snippet>o</snippet></ROW><ROW><id>13886610</id><snippet>my_components</snippet></ROW><ROW><id>13886610</id><snippet>d[attr] = o.__getattribute__(o, attr)
</snippet></ROW><ROW><id>13886610</id><snippet>d[attr] = getattr(o, attr)
</snippet></ROW><ROW><id>13886953</id><snippet>itertools</snippet></ROW><ROW><id>13886953</id><snippet>itertools.imap(f, range(3))</snippet></ROW><ROW><id>13886953</id><snippet>list</snippet></ROW><ROW><id>13886953</id><snippet>collections.deque(itertools.imap(f, range(3)), maxlen=0)
</snippet></ROW><ROW><id>13886953</id><snippet>for i in range(3):
    f(i)
</snippet></ROW><ROW><id>13887072</id><snippet>collections.deque</snippet></ROW><ROW><id>13887091</id><snippet>from math import modf
def old_dist_format(distance):
    if distance &lt; 100:
        return '%dm' % distance
    elif distance &lt; 1000:
        return '%.0fm' % round(distance, -1)
    else:
        m, km = modf(distance / 1000.0)
        if m &lt; 0.01:
            return '%.0fkm' % km
        else:
            return '%.1fkm' % (km + round(m, 1))


def dist_format(distance):
    rounded = float('%.2g' % distance)
    km = modf(rounded / 1000.0)
    if km[1]:
        return "%gkm" % (km[0] + km[1])
    else:
        return "%gm" % rounded


if __name__ == "__main__":
    while True:
        try:
            s = raw_input("&gt; ")
            try:
                d = float(s)
            except ValueError:
                print "Enter number"
                continue
            print "%s\t%s" % (dist_format(d), old_dist_format(d))
        except KeyboardInterrupt:
            print
            break
</snippet></ROW><ROW><id>13887091</id><snippet>dist_format()</snippet></ROW><ROW><id>13887211</id><snippet>extern "C"</snippet></ROW><ROW><id>13887211</id><snippet>extern "C"</snippet></ROW><ROW><id>13887211</id><snippet>extern "C"</snippet></ROW><ROW><id>13887211</id><snippet>extern "C" int doit();
</snippet></ROW><ROW><id>13887211</id><snippet>extern "C" {

// all the function declarations here ...

};
</snippet></ROW><ROW><id>13887512</id><snippet>QTcpServer</snippet></ROW><ROW><id>13887512</id><snippet>QTcpSocket</snippet></ROW><ROW><id>13887574</id><snippet>&gt;&gt;&gt; print re.search(r'(\s)\w+', words).groups()
(' ',)
&gt;&gt;&gt; print re.search(r'(\s)\w+', words).group(1)
' '
</snippet></ROW><ROW><id>13887574</id><snippet>findall</snippet></ROW><ROW><id>13887574</id><snippet>&gt;&gt;&gt; print re.findall(r'\s\w+', words)
[' blahblah']
</snippet></ROW><ROW><id>13887574</id><snippet>csv</snippet></ROW><ROW><id>13887606</id><snippet>\|\s*nominee\d+\s*=\s*(?:''')?\[\[([^]]+)\]\](?:''')?
</snippet></ROW><ROW><id>13887606</id><snippet>re.findall(r"\|\s*nominee\d+\s*=\s*(?:''')?\[\[([^]]+)\]\](?:''')?", markup)
# =&gt; ['Barack Obama', 'Mitt Romney']
</snippet></ROW><ROW><id>13887651</id><snippet>variablename = float(variableentry.get())</snippet></ROW><ROW><id>13887651</id><snippet>float</snippet></ROW><ROW><id>13887651</id><snippet>float</snippet></ROW><ROW><id>13887651</id><snippet>try:
    variablename = float(variableentry.get())
except ValueError:
    # error messagebox, etc
else:
    # do stuff with variablename
</snippet></ROW><ROW><id>13887719</id><snippet>os.stat</snippet></ROW><ROW><id>13887719</id><snippet>st_nlink</snippet></ROW><ROW><id>13887719</id><snippet>ls -l</snippet></ROW><ROW><id>13887817</id><snippet>CRITICAL</snippet></ROW><ROW><id>13887817</id><snippet>logger.critical('Message with %s', 'arguments', exc_info=True)
</snippet></ROW><ROW><id>13887817</id><snippet>logger.exception</snippet></ROW><ROW><id>13887817</id><snippet>CRITICAL</snippet></ROW><ROW><id>13887817</id><snippet>ERROR</snippet></ROW><ROW><id>13887948</id><snippet>letter = im[y:y+h,x:x+w]
</snippet></ROW><ROW><id>13888672</id><snippet>ax = df.plot()

years = [2005, 2007, 2008, 2009, 2011, 2012]
# you can get years from you dataframe (but without seeing the dataframe I can't say exactly how)
# legend also accepts a Series or numpy array
ax.legend(years, loc='best')
plt.show()
</snippet></ROW><ROW><id>13888754</id><snippet>swigsubpackagebar</snippet></ROW><ROW><id>13888754</id><snippet>swigsubpackagebar.aFunc(aString) -&gt; outString
</snippet></ROW><ROW><id>13888754</id><snippet>## swigMock.py ##
def aFunc(aString):
    return aString
</snippet></ROW><ROW><id>13888754</id><snippet>## main.py ##
try:
   import swigpackagefoo.swigsubpackagebar as swigModule
except ImportError:
   import swigMock as swigModule

print swigModule.aFunc("FOO")
</snippet></ROW><ROW><id>13888754</id><snippet>swigsubpackagebar</snippet></ROW><ROW><id>13888754</id><snippet>## swigMock.py ##
class swigsubpackagebar(object):
    pass
</snippet></ROW><ROW><id>13888754</id><snippet>as</snippet></ROW><ROW><id>13888754</id><snippet>## main.py ##
try:
   import swigpackagefoo.swigsubpackagebar as swigClass
except ImportError:
   import swigMock.swigsubpackagebar as swigClass

aClass = swigClass()
</snippet></ROW><ROW><id>13888832</id><snippet>=</snippet></ROW><ROW><id>13888832</id><snippet>i</snippet></ROW><ROW><id>13888832</id><snippet>i[1]</snippet></ROW><ROW><id>13888832</id><snippet>i</snippet></ROW><ROW><id>13888832</id><snippet>2</snippet></ROW><ROW><id>13888832</id><snippet>5</snippet></ROW><ROW><id>13888857</id><snippet>__iter__</snippet></ROW><ROW><id>13888857</id><snippet>list</snippet></ROW><ROW><id>13888857</id><snippet>set</snippet></ROW><ROW><id>13888863</id><snippet>blinker.signal</snippet></ROW><ROW><id>13888863</id><snippet>weakref.WeakValueDictionary</snippet></ROW><ROW><id>13888863</id><snippet>keys</snippet></ROW><ROW><id>13888863</id><snippet>from blinker import signal
# import everything else here

print sorted(signal.keys())
</snippet></ROW><ROW><id>13888863</id><snippet>blinker.base</snippet></ROW><ROW><id>13888899</id><snippet>s = "a(b,c(d,e(f,g),h(i)))"

import re

level = 0
for tok in re.finditer(r"\w+|[()]", s):
    tok = tok.group()
    if tok == "(":
        level += 1
    elif tok == ")":
        level -= 1
    else:
        print "%s%s" % (" "*level, tok)
</snippet></ROW><ROW><id>13888899</id><snippet>a
 b
 c
  d
  e
   f
   g
  h
   i
</snippet></ROW><ROW><id>13888932</id><snippet>In [7]: import numpy as np
In [8]: cluster = np.random.randint(10, size = (5,2))
In [9]: cluster
Out[9]: 
array([[9, 7],
       [7, 2],
       [8, 9],
       [1, 3],
       [3, 4]])

In [10]: new_spin = np.array([[1,2]])

In [11]: new_spin == cluster
Out[11]: 
array([[False, False],
       [False,  True],
       [False, False],
       [ True, False],
       [False, False]], dtype=bool)
</snippet></ROW><ROW><id>13888932</id><snippet>new_spin == cluster</snippet></ROW><ROW><id>13888932</id><snippet>bool</snippet></ROW><ROW><id>13888932</id><snippet>cluster</snippet></ROW><ROW><id>13888932</id><snippet>new_spin</snippet></ROW><ROW><id>13888932</id><snippet>new_spin</snippet></ROW><ROW><id>13888932</id><snippet>cluster</snippet></ROW><ROW><id>13888932</id><snippet>all(axis = 1)</snippet></ROW><ROW><id>13888932</id><snippet>In [12]: (new_spin == cluster).all(axis = 1)
Out[12]: array([False, False, False, False, False], dtype=bool)
</snippet></ROW><ROW><id>13888932</id><snippet>new_spin</snippet></ROW><ROW><id>13888932</id><snippet>cluster</snippet></ROW><ROW><id>13888932</id><snippet>any</snippet></ROW><ROW><id>13888932</id><snippet>In [13]: 
In [14]: (new_spin == cluster).all(axis = 1).any()
Out[14]: False
</snippet></ROW><ROW><id>13888932</id><snippet>np.append</snippet></ROW><ROW><id>13888932</id><snippet>list.append</snippet></ROW><ROW><id>13888932</id><snippet>np.append</snippet></ROW><ROW><id>13888932</id><snippet>cluster</snippet></ROW><ROW><id>13888932</id><snippet>cluster</snippet></ROW><ROW><id>13888932</id><snippet>cluster = np.array(cluster)</snippet></ROW><ROW><id>13888944</id><snippet>ftplib.FTP</snippet></ROW><ROW><id>13888944</id><snippet>retrlines</snippet></ROW><ROW><id>13888944</id><snippet>sys.stdout</snippet></ROW><ROW><id>13888944</id><snippet>retrlines</snippet></ROW><ROW><id>13888944</id><snippet>def fetchlines(line=None):
    if line is not None:
        # As long as we are called with a line
        # store the line in the array we added to this function
        fetchlines.lines.append(line)
    else:
        # When we are called without a line
        # we are retrieving the lines
        # Truncate the array after copying it
        # so we can re-use this function
        lines = fetchlines.lines[:]
        fetchlines.lines = []
        return lines

fetchlines.lines = []

@app.route("/")
def hello():
    ftp = FTP("someaddress")
    ftp.login()
    ftp.dir(fetchlines)
    lines = fetchlines()
    return "&lt;br&gt;".join(lines)
</snippet></ROW><ROW><id>13888944</id><snippet>sys.stdout</snippet></ROW><ROW><id>13888944</id><snippet>cStringIO</snippet></ROW><ROW><id>13888944</id><snippet>from cStringIO import StringIO
from sys import stdout

# Save a reference to stdout
STANDARD_OUT = stdout

@app.route("/")
def hello():
    ftp = FTP("someaddress")
    ftp.login()

    # Change stdout to point to a file-like object rather than a terminal
    file_like = StringIO()
    stdout = file_like

    ftp.dir()

    # lines in this case will be a string, not a list
    lines = file_like.getvalue()

    stdout = STANDARD_OUT
    file_like.close()

    return lines
</snippet></ROW><ROW><id>13889020</id><snippet>geek['imgsrc'] = x.select("//div[@class='article']//a/img/@src").extract()
</snippet></ROW><ROW><id>13889020</id><snippet>from scrapy.spider import BaseSpider
from scrapy.selector import HtmlXPathSelector
from geekspider.items import GeekItem # I'm guessing the name of your project here

class GeekSpider(BaseSpider):
    name = "geekS"
    allowed_domains = ["geek.com"]
    start_urls = ["http://www.geek.com/articles/gadgets/kindle-fire-hd-8-9-on-sale-for-50-off-today-only-20121210/"]

    def parse(self, response):
        item = GeekItem()
        hxs = HtmlXPathSelector(response)
        item['imgsrc'] = hxs.select("//div[@class='article']//a/img/@src").extract()
        return item
</snippet></ROW><ROW><id>13889272</id><snippet>s = socket.socket()
</snippet></ROW><ROW><id>13889272</id><snippet>s.settimeout(10)
</snippet></ROW><ROW><id>13889272</id><snippet>except socket.error as socketerror:
    print("Error: ", socketerror)
</snippet></ROW><ROW><id>13889272</id><snippet>def socket_to_me():
    try:
        s = socket.socket()
        s.settimeout(2)
        s.connect(("192.168.95.148",21))
        ans = s.recv(1024)
        print(ans)
        s.shutdown(1) # By convention, but not actually necessary
        s.close()     # Remember to close sockets after use!
    except socket.error as socketerror:
        print("Error: ", socketerror)
</snippet></ROW><ROW><id>13889343</id><snippet>In [1]: from isodate import parse_duration

In [2]: parse_duration('P1M')
Out[2]: isodate.duration.Duration(0, 0, 0, years=0, months=1)
</snippet></ROW><ROW><id>13889343</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>13889343</id><snippet>start</snippet></ROW><ROW><id>13889343</id><snippet>end</snippet></ROW><ROW><id>13889343</id><snippet>In [8]: import datetime

In [9]: d = parse_duration('P1M')

In [10]: d.todatetime(start=datetime.datetime.today())
Out[10]: datetime.timedelta(31)
</snippet></ROW><ROW><id>13889354</id><snippet>ZopeTransactionExtension</snippet></ROW><ROW><id>13889354</id><snippet>DBSession</snippet></ROW><ROW><id>13889354</id><snippet>pyramid_tm</snippet></ROW><ROW><id>13889354</id><snippet>DBSession.add(obj)
DBSession.flush()
log.info('look, my new object got primary key %d', obj.id)
</snippet></ROW><ROW><id>13889354</id><snippet>sp = transaction.savepoint()
try:
    foo = Foo()
    foo.id = 5
    DBSession.add(foo)
    DBSession.flush()
except IntegrityError:
    log.error('something already has id 5!!')
    sp.rollback()
</snippet></ROW><ROW><id>13889354</id><snippet>pyramid_tm</snippet></ROW><ROW><id>13889354</id><snippet>transaction.commit()</snippet></ROW><ROW><id>13889354</id><snippet>zope.sqlalchemy.mark_changed(DBSession)</snippet></ROW><ROW><id>13889354</id><snippet>expire_on_commit</snippet></ROW><ROW><id>13889354</id><snippet>True</snippet></ROW><ROW><id>13889919</id><snippet>\b</snippet></ROW><ROW><id>13889919</id><snippet>&gt;&gt;&gt; re.sub(r'(\w)\1+\b', r'\1', line)
'hey hoooow are you'
</snippet></ROW><ROW><id>13889919</id><snippet>\B</snippet></ROW><ROW><id>13889919</id><snippet>\b</snippet></ROW><ROW><id>13889919</id><snippet>&gt;&gt;&gt; re.sub(r'(\w)\1+\B', r'\1\1', re.sub(r'(\w)\1+\b', r'\1', line))
'hey hoow are you'
</snippet></ROW><ROW><id>13890583</id><snippet>np.sum</snippet></ROW><ROW><id>13890583</id><snippet>__array__</snippet></ROW><ROW><id>13890898</id><snippet>amount = 250000

thousands = amount % 100000
lakhs = amount - thousands
</snippet></ROW><ROW><id>13891070</id><snippet>time.time()</snippet></ROW><ROW><id>13891070</id><snippet>Python 2.7.3 (default, Apr 24 2012, 00:00:54) 
[GCC 4.7.0 20120414 (prerelease)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import time
&gt;&gt;&gt; ts = time.time()
&gt;&gt;&gt; print ts
1355563265.81
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
&gt;&gt;&gt; print st
2012-12-15 01:21:05
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13891070</id><snippet>ts</snippet></ROW><ROW><id>13891070</id><snippet>datetime</snippet></ROW><ROW><id>13891083</id><snippet>mean</snippet></ROW><ROW><id>13891083</id><snippet>DataFrame</snippet></ROW><ROW><id>13891083</id><snippet>In [14]: df.mean()
Out[14]: 
pol1    0.578502
pol2    0.393610
pol3    0.634424
pol4    0.607450

In [15]: df.mean().plot(kind='bar')
Out[15]: &lt;matplotlib.axes.AxesSubplot at 0x4a327d0&gt;
</snippet></ROW><ROW><id>13891083</id><snippet>append</snippet></ROW><ROW><id>13891083</id><snippet>In [95]: average = df.mean()

In [96]: average.name = 'average'

In [97]: df = df.append(average)

In [98]: df
Out[98]: 
             pol1      pol2      pol3      pol4
art      0.661592  0.479202  0.700451  0.345085
mcf      0.235517  0.665981  0.778774  0.610344
mesa     0.838396  0.035648  0.424047  0.866920
average  0.578502  0.393610  0.634424  0.607450

In [99]: df.plot(kind='bar')
Out[99]: &lt;matplotlib.axes.AxesSubplot at 0x52f4390&gt;
</snippet></ROW><ROW><id>13891083</id><snippet>tight_layout</snippet></ROW><ROW><id>13891538</id><snippet>logging.debug("something to store")
</snippet></ROW><ROW><id>13891538</id><snippet>appcfg.py --num_days=0 request_logs appname/ output.txt
</snippet></ROW><ROW><id>13891575</id><snippet>foo(*i)</snippet></ROW><ROW><id>13891575</id><snippet>&gt;&gt;&gt; foo(*i)
6
</snippet></ROW><ROW><id>13891575</id><snippet>*</snippet></ROW><ROW><id>13891575</id><snippet>def foo(*vargs)</snippet></ROW><ROW><id>13891575</id><snippet>vargs</snippet></ROW><ROW><id>13891575</id><snippet>**</snippet></ROW><ROW><id>13891575</id><snippet>def foo(**kargs)</snippet></ROW><ROW><id>13891575</id><snippet>kargs</snippet></ROW><ROW><id>13891575</id><snippet>&gt;&gt;&gt; def foo(*vargs, **kargs):
        print vargs
        print kargs

&gt;&gt;&gt; foo(1, 2, 3, a="A", b="B")
(1, 2, 3)
{'a': 'A', 'b': 'B'}
</snippet></ROW><ROW><id>13891761</id><snippet>\(%i\d\)</snippet></ROW><ROW><id>13891761</id><snippet>(%o#)</snippet></ROW><ROW><id>13891761</id><snippet>i</snippet></ROW><ROW><id>13891761</id><snippet>o</snippet></ROW><ROW><id>13891831</id><snippet>x_list, ord_list = []
</snippet></ROW><ROW><id>13891831</id><snippet>x_list = ord_list = []
</snippet></ROW><ROW><id>13891831</id><snippet>x_list, ord_list = [], []
</snippet></ROW><ROW><id>13891831</id><snippet>x_list = []
ord_list = []
</snippet></ROW><ROW><id>13891831</id><snippet>two_lists = ([], [])
x_list, ord_list = two_lists
</snippet></ROW><ROW><id>13891831</id><snippet>x_list = ord_list = []</snippet></ROW><ROW><id>13891831</id><snippet>x_list</snippet></ROW><ROW><id>13891831</id><snippet>ord_list</snippet></ROW><ROW><id>13891831</id><snippet>&gt;&gt;&gt; x_list = ord_list = []
&gt;&gt;&gt; x_list.append(1)
&gt;&gt;&gt; x_list
[1]
&gt;&gt;&gt; ord_list
[1]
</snippet></ROW><ROW><id>13891944</id><snippet>bs4</snippet></ROW><ROW><id>13891944</id><snippet>from bs4 import BeautifulSoup
</snippet></ROW><ROW><id>13892158</id><snippet>RequestHandler</snippet></ROW><ROW><id>13892158</id><snippet>post()</snippet></ROW><ROW><id>13892158</id><snippet>headers['User-Agent'] = 'your app name'
</snippet></ROW><ROW><id>13892365</id><snippet>IDMGCExt.crx</snippet></ROW><ROW><id>13892365</id><snippet>idmmzcc.xpi</snippet></ROW><ROW><id>13892367</id><snippet>plt.gca().set_yscale('linear')
</snippet></ROW><ROW><id>13892367</id><snippet>hist()</snippet></ROW><ROW><id>13892367</id><snippet>log=True</snippet></ROW><ROW><id>13892367</id><snippet>bins=10</snippet></ROW><ROW><id>13892367</id><snippet>plt.hist(x, bins=10**np.linspace(0, 1, 10))
</snippet></ROW><ROW><id>13892630</id><snippet>*p</snippet></ROW><ROW><id>13892630</id><snippet>f(xdata, *params)</snippet></ROW><ROW><id>13892630</id><snippet>&gt;&gt;&gt; from scipy import optimize
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; 
&gt;&gt;&gt; x = np.arange(1, 4)
&gt;&gt;&gt; y = x * 3 + 1
&gt;&gt;&gt; 
&gt;&gt;&gt; f = lambda x, *p: p[0] * x + p[1]
&gt;&gt;&gt; popt, pcov = optimize.curve_fit(f, x, y, [1,-4])
&gt;&gt;&gt; popt
array([ 3.,  1.])
&gt;&gt;&gt; pcov
array([[  9.86076132e-32,  -1.97215226e-31],
       [ -1.97215226e-31,   4.60168861e-31]])
</snippet></ROW><ROW><id>13892758</id><snippet>binascii</snippet></ROW><ROW><id>13892758</id><snippet>binascii.unhexlify(hexstr)</snippet></ROW><ROW><id>13892758</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; binascii.unhexlify("A88BE9L98990")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Non-hexadecimal digit found
# Not sure why there's an L in there... take it out...
&gt;&gt;&gt; binascii.unhexlify("A88BE9989900")
'\xa8\x8b\xe9\x98\x99\x00'
</snippet></ROW><ROW><id>13892806</id><snippet>def nodups(s):
    last = None
    for w in s:
        if w == last:
            continue
        yield w
        last = w
</snippet></ROW><ROW><id>13892806</id><snippet>cutUpText = " ".join(nodups(srcList))
</snippet></ROW><ROW><id>13892873</id><snippet>C:\Python27\python.exe virtualenv.py selenv
</snippet></ROW><ROW><id>13892873</id><snippet>selenv\Scripts\pip.exe install selenium
</snippet></ROW><ROW><id>13892948</id><snippet>&lt;button value="Download Item 1" onclick="window.open('This is the url of the item to download', '_parent');" /&gt;
&lt;button value="Download Item 2" onclick="window.open('This is the url of the item to download', '_parent');" /&gt;
&lt;button value="Download Item 3" onclick="window.open('This is the url of the item to download', '_parent');" /&gt;
&lt;button value="Download Item 4" onclick="window.open('This is the url of the item to download', '_parent');" /&gt;
</snippet></ROW><ROW><id>13892948</id><snippet>&lt;script type="text/javascript"&gt;
function download_all()
{
    if(document.getElementById("checkbox1id").checked)
    {
        window.open("URL1", "_parent");
    }
    ect...
}
</snippet></ROW><ROW><id>13892948</id><snippet>&lt;input type="checkbox" id="checkbox1id" /&gt;
</snippet></ROW><ROW><id>13892948</id><snippet>&lt;button onclick="download_all();" value="Download" /&gt;
</snippet></ROW><ROW><id>13893217</id><snippet>import modules.js as js
import modules.rivescript as rivescript

import plugins.weather as weather
import plugins.synd as synd

weather.get("3088")  # Usage example
</snippet></ROW><ROW><id>13893357</id><snippet>data</snippet></ROW><ROW><id>13893357</id><snippet>"number"</snippet></ROW><ROW><id>13893357</id><snippet>a = 0
b = len(data['OtherBids'])
# add this line
data['number'] = dict()

while a &lt;= b - 1:
    for i in data['OtherBids']:
        # seems to be mistype: len(data['OtherBids'][a]).get
        # I removed .get
        data['number'][a] = len(data['OtherBids'][a])
    a = a + 1
</snippet></ROW><ROW><id>13893357</id><snippet>data['number'] = {}
for i, item in enumerate(data['OtherBids']):
    data['number'][i] = len(item)
</snippet></ROW><ROW><id>13893357</id><snippet>data['number'] = {i:len(item) for i,item in enumerate(data['OtherBids'])}
</snippet></ROW><ROW><id>13893448</id><snippet>csv</snippet></ROW><ROW><id>13893448</id><snippet>import csv
with open('file.csv') as f:
    csvreader = csv.reader(f)
    for row in csvreader: 
        print row[0]
</snippet></ROW><ROW><id>13893448</id><snippet>import csv
with open('file.csv') as f:
    csvreader = csv.reader(f)
    for number, what, are, these, entries, called in csvreader:
        print number
</snippet></ROW><ROW><id>13893450</id><snippet>update</snippet></ROW><ROW><id>13893450</id><snippet>posts.update({'_id':213}, {'$set':{"jobs.1.title":1}}, upsert=False, multi=True)
</snippet></ROW><ROW><id>13893450</id><snippet>posts</snippet></ROW><ROW><id>13893450</id><snippet>$</snippet></ROW><ROW><id>13893475</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>13893475</id><snippet>fillvalue</snippet></ROW><ROW><id>13893475</id><snippet>itertools.zip_longest()</snippet></ROW><ROW><id>13893475</id><snippet>&gt;&gt;&gt; l = [[1,2,3], [4,5], [], [6,7,8,9]]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.izip_longest(*l, fillvalue=""))
[(1, 4, '', 6), (2, 5, '', 7), (3, '', '', 8), ('', '', '', 9)]
</snippet></ROW><ROW><id>13893475</id><snippet>&gt;&gt;&gt; [list(tup) for tup in itertools.izip_longest(*l, fillvalue="")]
[[1, 4, '', 6], [2, 5, '', 7], [3, '', '', 8], ['', '', '', 9]]
</snippet></ROW><ROW><id>13893475</id><snippet>&gt;&gt;&gt; l = [['a','b','c'], ['d','e'], [], ['f','g','h','i']]
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.izip_longest(*l, fillvalue=""))
[('a', 'd', '', 'f'), ('b', 'e', '', 'g'), ('c', '', '', 'h'), ('', '', '', 'i')]
</snippet></ROW><ROW><id>13893475</id><snippet>&gt;&gt;&gt; l = ["abc", "de", "", "fghi"]
&gt;&gt;&gt; list(itertools.izip_longest(*l, fillvalue=""))
[('a', 'd', '', 'f'), ('b', 'e', '', 'g'), ('c', '', '', 'h'), ('', '', '', 'i')]
</snippet></ROW><ROW><id>13893478</id><snippet>import string
import random 
import time
import string    

response = "a"              # the variable that will hold the user's response
c = "b"                     #the variable that will hold the character the user should type
score = 0                   #the variable that will hold the user's score
start = time.time()         #the variable that holds the starting time
elapsed = 0                 #the variable that holds the number of seconds elapsed.
while elapsed &lt; 30:         #while less than 30 seconds have elapsed  

    if response == c:       #if the response from the previous loop matches the character
        score += 1          #from the previous loop, increase the score.

    #c is a random character
    c = random.choice(string.ascii_lowercase + string.digits)
    print(c)               

    response = input("Type a letter or a number: ") #get the user's response

    elapsed = time.time() - start #update the time elapsed
</snippet></ROW><ROW><id>13893528</id><snippet>self</snippet></ROW><ROW><id>13893528</id><snippet>up()</snippet></ROW><ROW><id>13893528</id><snippet>def i(self, new):
    self.elem.append(new)
    self.up(len(self.elem)-1)
</snippet></ROW><ROW><id>13893528</id><snippet>self.up</snippet></ROW><ROW><id>13893528</id><snippet>self</snippet></ROW><ROW><id>13893528</id><snippet>up()</snippet></ROW><ROW><id>13893528</id><snippet>up(self, self, len(self.elem)-1)</snippet></ROW><ROW><id>13893564</id><snippet>'one', 1</snippet></ROW><ROW><id>13893632</id><snippet>lookup</snippet></ROW><ROW><id>13893632</id><snippet>In [17]: prices
Out[17]: 
              AAPL    GOOG     IBM    XOM
2011-01-10  339.44  614.21  142.78  71.57
2011-01-13  342.64  616.69  143.92  73.08
2011-01-26  340.82  616.50  155.74  75.89
2011-02-02  341.29  612.00  157.93  79.46
2011-02-10  351.42  616.44  159.32  79.68
2011-03-03  356.40  609.56  158.73  82.19
2011-05-03  345.14  533.89  167.84  82.00
2011-06-03  340.42  523.08  160.97  78.19
2011-06-10  323.03  509.51  159.14  76.84
2011-08-01  393.26  606.77  176.28  76.67
2011-12-20  392.46  630.37  184.14  79.97

In [18]: orders
Out[18]: 
                  Date direction  size ticker  prices
0  2011-01-10 00:00:00       Buy  1500   AAPL  339.44
1  2011-01-13 00:00:00      Sell  1500   AAPL  342.64
2  2011-01-13 00:00:00       Buy  4000    IBM  143.92
3  2011-01-26 00:00:00       Buy  1000   GOOG  616.50
4  2011-02-02 00:00:00      Sell  4000    XOM   79.46
5  2011-02-10 00:00:00       Buy  4000    XOM   79.68
6  2011-03-03 00:00:00      Sell  1000   GOOG  609.56
7  2011-03-03 00:00:00      Sell  2200    IBM  158.73
8  2011-06-03 00:00:00      Sell  3300    IBM  160.97
9  2011-05-03 00:00:00       Buy  1500    IBM  167.84
10 2011-06-10 00:00:00       Buy  1200   AAPL  323.03
11 2011-08-01 00:00:00       Buy    55   GOOG  606.77
12 2011-08-01 00:00:00      Sell    55   GOOG  606.77
13 2011-12-20 00:00:00      Sell  1200   AAPL  392.46

In [19]: prices.lookup(orders.Date, orders.ticker)
Out[19]: 
array([ 339.44,  342.64,  143.92,  616.5 ,   79.46,   79.68,  609.56,
        158.73,  160.97,  167.84,  323.03,  606.77,  606.77,  392.46])
</snippet></ROW><ROW><id>13893642</id><snippet>import itertools

with open(filename, 'r') as f:
    fifthlines = itertools.islice(f, 0, None, 5)
    for line in fifthlines:
        # do something with line
</snippet></ROW><ROW><id>13893642</id><snippet>for _ in itertools.islice(f, 0, 10):
    pass

for line in itertools.islice(f, 0, 10):
    # do something with this 10th line
</snippet></ROW><ROW><id>13893642</id><snippet>itertools</snippet></ROW><ROW><id>13893710</id><snippet>O(1)</snippet></ROW><ROW><id>13894189</id><snippet>[</snippet></ROW><ROW><id>13894189</id><snippet>]</snippet></ROW><ROW><id>13894189</id><snippet>seek(offset)
</snippet></ROW><ROW><id>13894189</id><snippet>seek(offset, whence)
</snippet></ROW><ROW><id>13894351</id><snippet>'Rest-Sign': sign.encode('base64').strip()
</snippet></ROW><ROW><id>13894351</id><snippet>'Dd1WBn2T5SYTbqMMohOxr46IaLDrkelgH7AgkrrB0mT0PxKfv15vSJ3b6xNdc5PO2Yz9cDpu0u/H\nWIc7bH56sQ=='
</snippet></ROW><ROW><id>13894351</id><snippet>\n</snippet></ROW><ROW><id>13894351</id><snippet>\n</snippet></ROW><ROW><id>13894363</id><snippet>In [13]: crc = struct.unpack('&gt;i', '0000')

In [14]: crc
Out[14]: (808464432,)
</snippet></ROW><ROW><id>13894363</id><snippet>crc[0]</snippet></ROW><ROW><id>13894363</id><snippet>crc</snippet></ROW><ROW><id>13894363</id><snippet>crc[0]</snippet></ROW><ROW><id>13894363</id><snippet>In [15]: (crc,) = struct.unpack('&gt;i', '0000')

In [16]: crc
Out[16]: 808464432
</snippet></ROW><ROW><id>13894427</id><snippet>array</snippet></ROW><ROW><id>13894427</id><snippet>string</snippet></ROW><ROW><id>13894427</id><snippet>out = [0]  # your output array

s = "Example" # a byte string, not a Unicode string
l = list(s)   # convert to array of ints

out = out + l
print out
</snippet></ROW><ROW><id>13894427</id><snippet>[0, 'E', 'x', 'a', 'm', 'p', 'l', 'e']
</snippet></ROW><ROW><id>13894584</id><snippet>&gt;&gt;&gt; (1, 'hello') &lt; (2, 'bye')
True
</snippet></ROW><ROW><id>13894584</id><snippet>least = min(the_list)
print least[1]
</snippet></ROW><ROW><id>13894660</id><snippet>    parent.hide()
    dialog = QtGui.QDialog()
    dialog.exec_()
    parent.show()
</snippet></ROW><ROW><id>13894801</id><snippet>curses</snippet></ROW><ROW><id>13894801</id><snippet>Qt</snippet></ROW><ROW><id>13894801</id><snippet>Wx</snippet></ROW><ROW><id>13894801</id><snippet>Gtk</snippet></ROW><ROW><id>13894801</id><snippet>Qt</snippet></ROW><ROW><id>13894801</id><snippet>QCoreApplication</snippet></ROW><ROW><id>13894801</id><snippet>msvcrt</snippet></ROW><ROW><id>13894801</id><snippet>tty</snippet></ROW><ROW><id>13894801</id><snippet>termios</snippet></ROW><ROW><id>13894801</id><snippet>sys</snippet></ROW><ROW><id>13894822</id><snippet>split</snippet></ROW><ROW><id>13894822</id><snippet># List of strings: ['1', '-3', '10', ...]
numbers = A.split()

print len(numbers)
</snippet></ROW><ROW><id>13894822</id><snippet># List of numbers: [1, -3, 10, ...]
numbers = [int(n) for n in A.split()]
</snippet></ROW><ROW><id>13894863</id><snippet>callback1</snippet></ROW><ROW><id>13894863</id><snippet>callback1</snippet></ROW><ROW><id>13894863</id><snippet>print "We're in callback1 so the rule must work"</snippet></ROW><ROW><id>13894993</id><snippet>set()</snippet></ROW><ROW><id>13894993</id><snippet>self.camButton.clicked.connect(self.set)
</snippet></ROW><ROW><id>13895364</id><snippet>pyside-uic -o ui_name.py name.ui</snippet></ROW><ROW><id>13895364</id><snippet>from ui_name import Ui_MainWindow

class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super(MainWindow, self).__init__()
        self.setupUi(self)

        self.btn5 = QPushButton(QIcon(),"Open", self)
        self.btn5.move(0, 20)
        self.btn5.resize(70, 20)
        self.btn5.clicked.connect(self.doAction5)

        self.show()
</snippet></ROW><ROW><id>13895723</id><snippet>urlretrieve()</snippet></ROW><ROW><id>13895723</id><snippet>#!/usr/bin/env python3
import sys
from urllib.request import urlretrieve

def reporthook(blocknum, blocksize, totalsize):
    readsofar = blocknum * blocksize
    if totalsize &gt; 0:
        percent = readsofar * 1e2 / totalsize
        s = "\r%5.1f%% %*d / %d" % (
            percent, len(str(totalsize)), readsofar, totalsize)
        sys.stderr.write(s)
        if readsofar &gt;= totalsize: # near the end
            sys.stderr.write("\n")
    else: # total size is unknown
        sys.stderr.write("read %d\n" % (readsofar,))

urlretrieve(url, 'downloaded_file.py', reporthook)
</snippet></ROW><ROW><id>13895723</id><snippet>import sys
from threading import Event, Thread
from tkinter import Tk, ttk
from urllib.request import urlretrieve

def download(url, filename):
    root = progressbar = quit_id = None
    ready = Event()
    def reporthook(blocknum, blocksize, totalsize):
        nonlocal quit_id
        if blocknum == 0: # started downloading
            def guiloop():
                nonlocal root, progressbar
                root = Tk()
                root.withdraw() # hide
                progressbar = ttk.Progressbar(root, length=400)
                progressbar.grid()
                # show progress bar if the download takes more than .5 seconds
                root.after(500, root.deiconify)
                ready.set() # gui is ready
                root.mainloop()
            Thread(target=guiloop).start()
        ready.wait(1) # wait until gui is ready
        percent = blocknum * blocksize * 1e2 / totalsize # assume totalsize &gt; 0
        if quit_id is None:
            root.title('%%%.0f %s' % (percent, filename,))
            progressbar['value'] = percent # report progress
            if percent &gt;= 100:  # finishing download
                quit_id = root.after(0, root.destroy) # close GUI

    return urlretrieve(url, filename, reporthook)

download(url, 'downloaded_file.py')
</snippet></ROW><ROW><id>13895723</id><snippet>urlretrieve()</snippet></ROW><ROW><id>13895723</id><snippet>reporthook</snippet></ROW><ROW><id>13895723</id><snippet>FancyURLopener</snippet></ROW><ROW><id>13895723</id><snippet>from urllib.request import FancyURLopener
urlretrieve = FancyURLopener().retrieve
</snippet></ROW><ROW><id>13895723</id><snippet>urlretrieve()</snippet></ROW><ROW><id>13895723</id><snippet>from tkinter import Tk, ttk
from urllib.request import urlopen

def download2(url, filename):
    response = urlopen(url)
    totalsize = int(response.headers['Content-Length']) # assume correct header
    outputfile = open(filename, 'wb')

    def download_chunk(readsofar=0, chunksize=1 &lt;&lt; 13):
        # report progress
        percent = readsofar * 1e2 / totalsize # assume totalsize &gt; 0
        root.title('%%%.0f %s' % (percent, filename,))
        progressbar['value'] = percent

        # download chunk
        data = response.read(chunksize)
        if not data: # finished downloading
            outputfile.close()
            root.destroy() # close GUI
        else:
            outputfile.write(data) # save to filename
            # schedule to download the next chunk
            root.after(0, download_chunk, readsofar + len(data), chunksize)

    # setup GUI to show progress
    root = Tk()
    root.withdraw() # hide
    progressbar = ttk.Progressbar(root, length=400)
    progressbar.grid()
    # show progress bar if the download takes more than .5 seconds
    root.after(500, root.deiconify)
    root.after(0, download_chunk)
    root.mainloop()

download2(url, 'downloaded_file.py')
</snippet></ROW><ROW><id>13895792</id><snippet>~$ sudo easy_install pip
</snippet></ROW><ROW><id>13895792</id><snippet>~$ sudo pip install virtualenv
</snippet></ROW><ROW><id>13896308</id><snippet>label()</snippet></ROW><ROW><id>13896308</id><snippet>after()</snippet></ROW><ROW><id>13896308</id><snippet>import Tkinter as tk

root = tk.Tk()
deli = 100           # milliseconds of delay per character
svar = tk.StringVar()
labl = tk.Label(root, textvariable=svar, height=10 )

def shif():
    shif.msg = shif.msg[1:] + shif.msg[0]
    svar.set(shif.msg)
    root.after(deli, shif)

shif.msg = ' Is this an alert, or what? '
shif()
labl.pack()
root.mainloop()
</snippet></ROW><ROW><id>13896431</id><snippet>uuid.NAMESPACE_DNS</snippet></ROW><ROW><id>13896523</id><snippet>float</snippet></ROW><ROW><id>13896523</id><snippet>start</snippet></ROW><ROW><id>13896523</id><snippet>end</snippet></ROW><ROW><id>13896523</id><snippet>(start + end) / 2</snippet></ROW><ROW><id>13896523</id><snippet>start</snippet></ROW><ROW><id>13896523</id><snippet>end</snippet></ROW><ROW><id>13896523</id><snippet>middle_2 &lt; x</snippet></ROW><ROW><id>13896523</id><snippet>end - start &gt; delta</snippet></ROW><ROW><id>13896523</id><snippet>end - start &gt; delta</snippet></ROW><ROW><id>13896523</id><snippet>delta</snippet></ROW><ROW><id>13896622</id><snippet>print "%d %s of beer on the wall," % (bottles, s1)
</snippet></ROW><ROW><id>13896815</id><snippet>rotMat</snippet></ROW><ROW><id>13896933</id><snippet>int()</snippet></ROW><ROW><id>13896933</id><snippet>float()</snippet></ROW><ROW><id>13896933</id><snippet>int()</snippet></ROW><ROW><id>13896933</id><snippet>float()</snippet></ROW><ROW><id>13897041</id><snippet>def stuff_to_try():
    return (i for i in [stuff, to, try])
</snippet></ROW><ROW><id>13897041</id><snippet>def solve(something):
    if exit_condition(something):
        return

    for next_to_try in stuff_to_try():
        if_works(next_to_try):
            break
    solve(do_something(something))
</snippet></ROW><ROW><id>13897041</id><snippet>def solve(something):
    if exit_condition(something):
        return

    for each in [stuff, to, try]:
        if_works(each):
            break
    solve(do_something(something))
</snippet></ROW><ROW><id>13897116</id><snippet>user_playlists = Everything.objects.filter(profile__username=friend).values('playlist').distinct()
</snippet></ROW><ROW><id>13897153</id><snippet>&lt;Directory /home/bitnami/public_html/http/flasktest1&gt;
        WSGIProcessGroup flaskapp
        WSGIApplicationGroup %{GLOBAL}
        Order deny,allow
        Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>13897153</id><snippet>&lt;Directory /home/bitnami/public_html/http&gt;
        WSGIProcessGroup flaskapp
        WSGIApplicationGroup %{GLOBAL}
        Order deny,allow
        Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>13897153</id><snippet>WSGIDaemonProcess flaskapp threads=5
WSGIScriptAlias /flasktest1 /home/bitnami/public_html/wsgi/flasktest1.wsgi process-group=flaskapp application-group=%{GLOBAL}
</snippet></ROW><ROW><id>13897162</id><snippet>+</snippet></ROW><ROW><id>13897162</id><snippet>*</snippet></ROW><ROW><id>13897162</id><snippet>{\*}{(.+?)}
</snippet></ROW><ROW><id>13897261</id><snippet>datetime</snippet></ROW><ROW><id>13897261</id><snippet>datetime.datetime.now() - datetime.timedelta(minutes=40)</snippet></ROW><ROW><id>13897264</id><snippet>o = type('Dummy', (object,), { "attr1": "somehing", "attr2": 344 })
</snippet></ROW><ROW><id>13897264</id><snippet>o.attr3 = "test"
print o.attr1, o.attr2, o.attr3
</snippet></ROW><ROW><id>13897412</id><snippet>x2 = cos(angle) * speed
y2 = sin(angle) * speed

x += x2
y += y2
</snippet></ROW><ROW><id>13897904</id><snippet>def SubClass(BaseClass):
</snippet></ROW><ROW><id>13897904</id><snippet>BaseClass</snippet></ROW><ROW><id>13897904</id><snippet>class SubClass(BaseClass):
</snippet></ROW><ROW><id>13898367</id><snippet>requirements.txt</snippet></ROW><ROW><id>13898455</id><snippet>readline()</snippet></ROW><ROW><id>13898815</id><snippet>inspect.getmembers()</snippet></ROW><ROW><id>13898815</id><snippet>__dir__()</snippet></ROW><ROW><id>13898815</id><snippet>dir()</snippet></ROW><ROW><id>13898815</id><snippet>inspect.getmembers()</snippet></ROW><ROW><id>13898815</id><snippet>def getmembers(object, predicate=None):
    """Return all members of an object as (name, value) pairs sorted by name.                                                                                                                                     
    Optionally, only return members that satisfy a given predicate."""
    results = []
    for key in dir(object):
        try:
            value = getattr(object, key)
        except AttributeError:
            continue
        if not predicate or predicate(value):
            results.append((key, value))
    results.sort()
    return results
</snippet></ROW><ROW><id>13898815</id><snippet>dir()</snippet></ROW><ROW><id>13898815</id><snippet>__dir__()</snippet></ROW><ROW><id>13898815</id><snippet>__dir__()</snippet></ROW><ROW><id>13898815</id><snippet>__dict__</snippet></ROW><ROW><id>13898815</id><snippet>__getattr__()</snippet></ROW><ROW><id>13898815</id><snippet>__slots__</snippet></ROW><ROW><id>13898815</id><snippet>__dict__</snippet></ROW><ROW><id>13898815</id><snippet>dir()</snippet></ROW><ROW><id>13898815</id><snippet>dir()</snippet></ROW><ROW><id>13898815</id><snippet>__slots__</snippet></ROW><ROW><id>13898815</id><snippet>__slots__</snippet></ROW><ROW><id>13898815</id><snippet>print c.__slots__</snippet></ROW><ROW><id>13898815</id><snippet>['atr']</snippet></ROW><ROW><id>13898815</id><snippet>help()</snippet></ROW><ROW><id>13898815</id><snippet>dir()</snippet></ROW><ROW><id>13898815</id><snippet>dir()</snippet></ROW><ROW><id>13898815</id><snippet>__dir__</snippet></ROW><ROW><id>13898815</id><snippet>dir()</snippet></ROW><ROW><id>13898815</id><snippet>__dir__</snippet></ROW><ROW><id>13898964</id><snippet>def main(self):
    self.room.describe() #Describes the current room.
    while True:
        # Ask for user prompt
        input = raw_input(self.room.prompt)
        cmd = input.lower()
        ...etc, etc, etc...
</snippet></ROW><ROW><id>13898964</id><snippet>class GoCommand(Command):
def __init__(self, direction):
    self.direction = direction

def execute(self):
    # 'E' is the instantiation of the Engine class, declared within engine.py
    from engine import E

    # self.direction is 'north' in our example
    if self.direction in E.room.map.keys():
        print "You head %s\n" % self.direction # Pretty explanatory

        E.room = E.room.map[self.direction]
        print E.room.describe()
    else:
        print "You can't go that way."
</snippet></ROW><ROW><id>13898971</id><snippet>styleN</snippet></ROW><ROW><id>13898971</id><snippet>course_info = [
               ['&lt;b&gt;Course Code&lt;/b&gt;' , c.course_code] ,
               ['&lt;b&gt;Course Title&lt;/b&gt;' , c.course_name],
               ['&lt;b&gt;Prerequisites by Course(s) and Topics&lt;/b&gt;', c.pre_reqs],
               ['&lt;b&gt;Assessment Instruments with Weights&lt;/b&gt; (some desc)', c.grade_distribution]
            ]

for k in course_info: 
    headpara = Paragraph(k[0], styleN) 
    datas.append([headpara , Paragraph(clean_string(k[1]), styleN)])
</snippet></ROW><ROW><id>13898978</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtCore, QtGui

class myThread(QtCore.QThread):
    threadSignal = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):
        super(myThread, self).__init__(parent)

    def run(self):
        while True:
            if True:
                self.threadSignal.emit('Yes')

            else:
                self.threadSignal.emit('No')

            break

class myMainClass(QtCore.QObject):
    mainSignal = QtCore.pyqtSignal(str)

    def __init__(self, parent=None):
        super(myMainClass, self).__init__(parent)

        testInstance = myThread(self)
        testInstance.threadSignal.connect(self.mainSignal.emit)
        testInstance.start()

def signalcalled(s):
    print s

if __name__ == "__main__":
    import  sys

    app = QtGui.QApplication(sys.argv)
    main = myMainClass()
    main.mainSignal.connect(signalcalled)
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13899001</id><snippet>import cgi
import webapp2

from google.appengine.api import users

class MainPage(webapp2.RequestHandler):
    def get(self):
        self.response.out.write("""
          &lt;html&gt;
            &lt;body&gt;
              &lt;form action="/sign"&gt;
                &lt;div&gt;&lt;textarea name="content" rows="3" cols="60"&gt;&lt;/textarea&gt;&lt;/div&gt;
                &lt;div&gt;&lt;input type="submit" value="Sign Guestbook"&gt;&lt;/div&gt;
              &lt;/form&gt;
            &lt;/body&gt;
          &lt;/html&gt;""")


class Guestbook(webapp2.RequestHandler):
    def get(self):
        self.response.out.write('&lt;html&gt;&lt;body&gt;You wrote:&lt;pre&gt;')
        self.response.out.write(cgi.escape(self.request.get('content')))
        self.response.out.write('&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;')


app = webapp2.WSGIApplication([('/', MainPage),
                              ('/sign', Guestbook)],
                              debug=True)
</snippet></ROW><ROW><id>13899282</id><snippet>POST</snippet></ROW><ROW><id>13899282</id><snippet>import myapp
#  ...
urlpatterns = patterns('', url(r'^json/$',myapp.serve_json), #http://&lt;site_url&gt;/json/ will accept your post requests, myapp is the app containing view functions
                         #add other urls
                      )
#other code
</snippet></ROW><ROW><id>13899282</id><snippet>import json
def serve_json(request):
    if request.method == 'POST':
        if 'files' in request.POST:
            file_list = json.loads(request.POST['files'])

            for file in file_list:
                #do something with each file dictionary in file_list
                #...
            return HttpResponse("Sample message") #You may return a message 
    raise Http404
</snippet></ROW><ROW><id>13899282</id><snippet>import urllib,json
data = urllib.urlencode({'files':json.dumps(file_dict)}) #file_dict has the list of stats about the files
response = urllib.urlopen('http://example.com/json/', data)
print response.read()
</snippet></ROW><ROW><id>13899282</id><snippet>urllib2</snippet></ROW><ROW><id>13899282</id><snippet>httplib</snippet></ROW><ROW><id>13899282</id><snippet>urllib</snippet></ROW><ROW><id>13899373</id><snippet>topChkBoxGrp.setStyleSheet("""
                QCheckBox{
                border: none;
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                stop: 0 #a6a6a6, stop: 0.08 #7f7f7f,
                stop: 0.39999 #717171, stop: 0.4 #626262,
                stop: 0.9 #4c4c4c, stop: 1 #333333);
                }""")
</snippet></ROW><ROW><id>13899373</id><snippet>from PyQt4.QtCore import *
from PyQt4.QtGui import *
import sys


class Browser(QWidget):

    def __init__(self):

        super(Browser, self).__init__()

        layout = QHBoxLayout(self)

        self.g1 = QGroupBox("foo")
        self.g2 = QGroupBox("bar")

        self.g1.setStyleSheet("QGroupBox { background-color: rgb(255, 255,\
        255); border:10px solid rgb(255, 170, 255); }")

        self.g2.setStyleSheet("QGroupBox { background-color: rgb(0, 255,\
        255); border:10px solid rgb(255, 170, 255); }")

        layout.addWidget(self.g1)
        layout.addWidget(self.g2)

if __name__ == "__main__":
    app = QApplication(sys.argv)
    br = Browser()
    br.show()
    app.exec_()
</snippet></ROW><ROW><id>13899613</id><snippet>db.close()
cursor =db.cursor()
</snippet></ROW><ROW><id>13899633</id><snippet>WHERE clause</snippet></ROW><ROW><id>13899633</id><snippet>db = sqlite3.connect("Gene.sqlite")
cur = db.cursor()
looking_for = 'hello'
cur.execute("SELECT type,description FROM Table WHERE name = '%s'", (looking_for,))
for i in cur.fetchall():
    result = '&lt;br&gt;&lt;c&gt;&lt;b&gt;TYPE:&lt;/b&gt; {}&lt;br&gt;&lt;b&gt;DESCRIPTION:&lt;/b&gt;&lt;/c&gt; {}'
    print result.format(*i)
else:
    print '{} does not exist in the Database'.format(looking_for)
</snippet></ROW><ROW><id>13899665</id><snippet>__init__.py</snippet></ROW><ROW><id>13899665</id><snippet>database</snippet></ROW><ROW><id>13899665</id><snippet>__init__.py</snippet></ROW><ROW><id>13900188</id><snippet>In [45]: lis=[['a', 10, 20], ['b', 10, 20], ['a', 20, 100]]

In [46]: lis.sort(key=itemgetter(0)) #sort the list first

In [47]: lis
Out[47]: [['a', 10, 20], ['a', 20, 100], ['b', 10, 20]]

In [49]: [[k]+map(sum,zip(*[x[1:] for x in g])) for k,g in groupby(lis,key=itemgetter(0))]
Out[49]: [['a', 30, 120], ['b', 10, 20]]
</snippet></ROW><ROW><id>13900188</id><snippet>In [23]: lis=[['a', 10, 20], ['b', 10, 20], ['a', 20, 100]]

In [24]: ans=[]

In [25]: lis.sort(key=itemgetter(0))   #sort the list according to the first elem

In [26]: lis
Out[26]: [['a', 10, 20], ['a', 20, 100], ['b', 10, 20]]

In [27]: for x in lis:
    if ans:
        if x[0]==ans[-1][0]:  #if the value of the first elem of last element in ans is same as x[0]
            ans[-1][1]+=x[1]
            ans[-1][2]+=x[2]
        else:         
            ans.append(x)
    else:ans.append(x)
   ....:     

In [28]: ans
Out[28]: [['a', 30, 120], ['b', 10, 20]]
</snippet></ROW><ROW><id>13900188</id><snippet>defaultdict()</snippet></ROW><ROW><id>13900188</id><snippet>In [69]: dic=defaultdict(list)

In [70]: for x in lis:
    dic[x[0]].append(x[1:])
   ....:     

In [71]: dic
Out[71]: defaultdict(&lt;type 'list'&gt;, {'a': [[10, 20], [20, 100]], 'b': [[10, 20]]})

In [72]: [[k]+map(sum,zip(*i)) for k,i in dic.items()]
Out[72]: [['a', 30, 120], ['b', 10, 20]]
</snippet></ROW><ROW><id>13900209</id><snippet>from functools import update_wrapper

def owns_hotdog(hotdog):
    def decorator(fn):
        def wrapped_function(*args, **kwargs):
            # First check if user is authenticated.
            if not logged_in():
                return redirect(url_for('login'))
            # For authorization error it is better to return status code 403
            # and handle it in errorhandler separately, because the user could
            # be already authenticated, but lack the privileges.
            if not authorizeowner(hotdog):
                abort(403)
            return fn(*args, **kwargs)
        return update_wrapper(wrapped_function, fn)
    return decorator

@app.errorhandler(403)
def forbidden_403(exception):
    return 'No hotdogs for you!', 403
</snippet></ROW><ROW><id>13900213</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>13900213</id><snippet>In [32]: from BeautifulSoup import BeautifulSoup

In [33]: doc = '''&lt;div id="id1" &gt;
      "Contents here"
&lt;/div&gt;
&lt;div id="id2"&gt; ...&lt;/div&gt;'''

In [34]: soup = BeautifulSoup(doc)

In [35]: id1 = soup.find('div', id='id1')

In [36]: print soup
&lt;div id="id1"&gt;
      "Contents here"
&lt;/div&gt;
&lt;div id="id2"&gt; ...&lt;/div&gt;

In [37]: id1.extract()
Out[37]: 
&lt;div id="id1"&gt;
      "Contents here"
&lt;/div&gt;

In [38]: print soup

&lt;div id="id2"&gt; ...&lt;/div&gt;
</snippet></ROW><ROW><id>13900457</id><snippet>std_delete = raw_input("Student To Delete")
for std in students:
    if std.studentID == std_delete:
        print "Student ID %d has been deleted " % std.studentID
        students.remove(std)
        break
</snippet></ROW><ROW><id>13900457</id><snippet>std_delete = raw_input("Student To Delete")
students = filter(lambda x: x.studentID != std_delete, students)
</snippet></ROW><ROW><id>13900631</id><snippet>import urllib2
try:
   urllib2.urlopen("some url")
except urllib2.HTTPError, err:
   if err.code == 404:
       &lt;whatever&gt;
   else:
       raise
</snippet></ROW><ROW><id>13900861</id><snippet>x=10</snippet></ROW><ROW><id>13900861</id><snippet>x=10</snippet></ROW><ROW><id>13900861</id><snippet>&gt;&gt;&gt; def deco(cls):
...     cls.initStuff()
...     return cls
&gt;&gt;&gt; @deco
... class Foo(object):
...     x = 10
...     
...     @classmethod
...     def initStuff(cls):
...         cls.x = 88
&gt;&gt;&gt; Foo.x
88
&gt;&gt;&gt; Foo.x = 10
&gt;&gt;&gt; Foo.x
10
&gt;&gt;&gt; Foo.initStuff() # reinitialize
&gt;&gt;&gt; Foo.x
88
</snippet></ROW><ROW><id>13901022</id><snippet>csv</snippet></ROW><ROW><id>13901022</id><snippet>import csv
with open("ABC.txt", "rb") as csvfile:
    reader = csv.reader(csvfile, delimiter="\t")
    data = list(reader)
minimum = data[2][17]
</snippet></ROW><ROW><id>13901022</id><snippet>minimum</snippet></ROW><ROW><id>13901022</id><snippet>4444</snippet></ROW><ROW><id>13901042</id><snippet>itertools.groupby</snippet></ROW><ROW><id>13901042</id><snippet>In [1]: data = [
   ...: [0.074, 0.073, 0.072, 0.03, 0.029, 0.024, 0.021, 0.02], 
   ...: [0.02, 0.02, 0.015], 
   ...: [0.026, 0.026, 0.02, 0.02, 0.02, 0.015], 
   ...: [0.021, 0.021, 0.02, 0.017], [0.077, 0.076, 0.074, 0.055, 0.045, 0.021], 
   ...: [0.053, 0.052, 0.051, 0.023, 0.022], 
   ...: [0.016, 0.016]
   ...: ]

In [2]: from itertools import groupby

In [3]: [[k for k, g in groupby(subl)] for subl in data]
Out[3]: 
[[0.074, 0.073, 0.072, 0.03, 0.029, 0.024, 0.021, 0.02],
 [0.02, 0.015],
 [0.026, 0.02, 0.015],
 [0.021, 0.02, 0.017],
 [0.077, 0.076, 0.074, 0.055, 0.045, 0.021],
 [0.053, 0.052, 0.051, 0.023, 0.022],
 [0.016]]
</snippet></ROW><ROW><id>13901219</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>13901219</id><snippet>&lt;link&gt;</snippet></ROW><ROW><id>13901219</id><snippet>This &lt;a href="#MYANCHOR" color="blue"&gt;is a link to&lt;/a&gt; an
anchor tag ie &lt;a name="MYANCHOR"/&gt;&lt;font color="green"&gt;here&lt;/font&gt;.
This &lt;link href="#MYANCHOR" color="blue" fontName="Helvetica"&gt;is
another link to&lt;/link&gt; the same anchor tag.
</snippet></ROW><ROW><id>13901249</id><snippet>pserve</snippet></ROW><ROW><id>13901249</id><snippet>pserve</snippet></ROW><ROW><id>13901249</id><snippet>pserve development.ini status</snippet></ROW><ROW><id>13901249</id><snippet>pserve development.ini stop</snippet></ROW><ROW><id>13901249</id><snippet>pserve development.ini restart</snippet></ROW><ROW><id>13901249</id><snippet>telnet</snippet></ROW><ROW><id>13901249</id><snippet>development.ini</snippet></ROW><ROW><id>13901298</id><snippet>Tag</snippet></ROW><ROW><id>13901298</id><snippet>Tag</snippet></ROW><ROW><id>13901298</id><snippet>UserProfile</snippet></ROW><ROW><id>13901298</id><snippet>UserProfile</snippet></ROW><ROW><id>13901298</id><snippet>class UserProfile(models.Model):
    # ... your other fields ...
    tags = models.ManyToManyField('product.Tag')
</snippet></ROW><ROW><id>13901298</id><snippet>Tag</snippet></ROW><ROW><id>13901298</id><snippet>product</snippet></ROW><ROW><id>13901298</id><snippet>Tag</snippet></ROW><ROW><id>13901298</id><snippet>UserProfile</snippet></ROW><ROW><id>13901298</id><snippet>product</snippet></ROW><ROW><id>13901298</id><snippet>Tag</snippet></ROW><ROW><id>13901298</id><snippet>products</snippet></ROW><ROW><id>13901298</id><snippet>ProductTag</snippet></ROW><ROW><id>13901319</id><snippet>register</snippet></ROW><ROW><id>13901319</id><snippet>views.py</snippet></ROW><ROW><id>13901319</id><snippet>UserCreationForm</snippet></ROW><ROW><id>13901319</id><snippet>...
form = UserCreationForm(request.POST)
if form.is_valid():
   user = form.save()
...
</snippet></ROW><ROW><id>13901490</id><snippet>self.connector = urllib2.build_opener(processor),urllib2.HTTPHandler(debuglevel=1)
</snippet></ROW><ROW><id>13901490</id><snippet> urllib2.build_opener(processor)
</snippet></ROW><ROW><id>13901490</id><snippet> urllib2.HTTPHandler(debuglevel=1)
</snippet></ROW><ROW><id>13901490</id><snippet>self.connector</snippet></ROW><ROW><id>13901688</id><snippet>from itertools import permutations, product, chain

d = {'A': [1,2,3], 'B': [4,5], 'C': [6]}
# You don't need to materialise permutations here, but this matches your existing dict
p = {k:list(permutations(v)) for k, v in d.iteritems()}    

for blah in product(*map(p.get, sorted(p))):
    print list(chain.from_iterable(blah)) # or use tuple instead of list

[1, 2, 3, 4, 5, 6]
[1, 2, 3, 5, 4, 6]
[1, 3, 2, 4, 5, 6]
[1, 3, 2, 5, 4, 6]
[2, 1, 3, 4, 5, 6]
[2, 1, 3, 5, 4, 6]
[2, 3, 1, 4, 5, 6]
[2, 3, 1, 5, 4, 6]
[3, 1, 2, 4, 5, 6]
[3, 1, 2, 5, 4, 6]
[3, 2, 1, 4, 5, 6]
[3, 2, 1, 5, 4, 6]
</snippet></ROW><ROW><id>13901785</id><snippet>scipy.misc.image</snippet></ROW><ROW><id>13901785</id><snippet>scipy.misc.toimage</snippet></ROW><ROW><id>13901785</id><snippet>mode='I'</snippet></ROW><ROW><id>13901785</id><snippet>import numpy as np
import scipy.misc

a = np.random.uniform(0, 2**16 - 1, (500, 500)).astype('int32')
img = scipy.misc.toimage(a, high=np.max(a), low=np.min(a), mode='I')
img.save('my16bit.png')

# check that you got the same values
b = scipy.misc.imread('my16bit.png')
b.dtype
# dtype('int32')
np.array_equal(a, b)
# True
</snippet></ROW><ROW><id>13901785</id><snippet>int32</snippet></ROW><ROW><id>13901785</id><snippet>uint16</snippet></ROW><ROW><id>13901785</id><snippet>sp.misc.imread</snippet></ROW><ROW><id>13901785</id><snippet>int32</snippet></ROW><ROW><id>13901785</id><snippet>uint16</snippet></ROW><ROW><id>13901785</id><snippet>uint8/uint16</snippet></ROW><ROW><id>13901785</id><snippet>high/low/mode</snippet></ROW><ROW><id>13901785</id><snippet>scipy.misc.toimage</snippet></ROW><ROW><id>13901870</id><snippet>QNetworkAccessManager</snippet></ROW><ROW><id>13901870</id><snippet>Browser</snippet></ROW><ROW><id>13901870</id><snippet>old_manager = self.page().networkAccessManager()
new_manager = MyNetworkAccessManager(old_manager)
self.page().setNetworkAccessManager(new_manager)
</snippet></ROW><ROW><id>13902751</id><snippet>from django.core.urlresolvers import resolve
view_match = resolve('/json/test_day/4982/')
json_data = view_match.func(request,**view_match.kwargs).content
</snippet></ROW><ROW><id>13902829</id><snippet>In [10]: ''.join(set('aaabcabccd'))
Out[10]: 'acbd'
</snippet></ROW><ROW><id>13902829</id><snippet>''.join</snippet></ROW><ROW><id>13902829</id><snippet>list</snippet></ROW><ROW><id>13902829</id><snippet>In [1]: list(set('aaabcabccd'))
Out[1]: ['a', 'c', 'b', 'd']
</snippet></ROW><ROW><id>13902887</id><snippet>In [6]: re.sub(r':?\\+', '/', r'G:\\one\\two\\three.htm')
Out[6]: 'G/one/two/three.htm'
</snippet></ROW><ROW><id>13902887</id><snippet>r':?\\+'</snippet></ROW><ROW><id>13902887</id><snippet>':?\\+'</snippet></ROW><ROW><id>13902887</id><snippet>r</snippet></ROW><ROW><id>13902887</id><snippet>':?\\+'</snippet></ROW><ROW><id>13902887</id><snippet>In [7]: list(':?\\+')
Out[7]: [':', '?', '\\', '+']
</snippet></ROW><ROW><id>13902887</id><snippet>list</snippet></ROW><ROW><id>13902887</id><snippet>'\\'</snippet></ROW><ROW><id>13902887</id><snippet>r':?\\+'</snippet></ROW><ROW><id>13902887</id><snippet>In [8]: list(r':?\\+')
Out[8]: [':', '?', '\\', '\\', '+']
</snippet></ROW><ROW><id>13902887</id><snippet>':?\\\\\\\\'</snippet></ROW><ROW><id>13902887</id><snippet>In [9]: list(':?\\\\\\\\')
Out[9]: [':', '?', '\\', '\\', '\\', '\\']
</snippet></ROW><ROW><id>13902948</id><snippet>email</snippet></ROW><ROW><id>13902948</id><snippet>get_payload</snippet></ROW><ROW><id>13902948</id><snippet>decode=True</snippet></ROW><ROW><id>13902948</id><snippet>import email.parser
...
parser = email.parser.FeedParser()
for msg in Mailbox.retr(i+1)[1]:
    parser.feed(msg + '\n')
message = parser.close()
payload = message.get_payload(decode=True)
print(payload)
...
</snippet></ROW><ROW><id>13903100</id><snippet>mymodel = MyModel()
mymodel.name = 'John'
mymodel.surname = 'Smith'
</snippet></ROW><ROW><id>13903100</id><snippet>setattr</snippet></ROW><ROW><id>13903100</id><snippet>attributes = {'name':'John', 'surname':'Smith'}
record = Model()

for k, v in attributes.iteritems():
    setattr(record, k, v)
</snippet></ROW><ROW><id>13903100</id><snippet>s = Story()
s.title = "The Three Little Pigs"

s = Story(title="The Three Little Pigs")
</snippet></ROW><ROW><id>13903277</id><snippet>twinx</snippet></ROW><ROW><id>13903277</id><snippet>twinx</snippet></ROW><ROW><id>13903277</id><snippet>twinx</snippet></ROW><ROW><id>13903277</id><snippet>twiny</snippet></ROW><ROW><id>13903277</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig, ax = plt.subplots()
ax2 = ax.twinx()

x = np.linspace(0, 10, 100)

ax.plot(x, np.sin(x), color='blue')
ax.set_ylabel(ylabel='Y-Value 1', color='blue')
ax.set_xlabel('Same X-values')

ax2.plot(x, x**3, color='green')
ax2.set_ylabel('Y-Value 2', color='green')

plt.show()
</snippet></ROW><ROW><id>13903277</id><snippet>import matplotlib.pyplot as plt
import numpy as np

fig, ax = plt.subplots()

x = np.linspace(0, 10, 100)
ax.plot(x, x, label='$y=x$')
ax.plot(x, 3 * x, label='$y=3x$')
ax.legend(loc='upper left')

ax.set(xlabel='Same X-values', ylabel='Same Y-values')

plt.show()
</snippet></ROW><ROW><id>13903437</id><snippet>.format()</snippet></ROW><ROW><id>13903437</id><snippet>&gt;&gt;&gt; '{0:^20}{1:^20}{2:^20}{3:^20}'.format(1, 2, 3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: tuple index out of range
&gt;&gt;&gt; '{0:^20}{1:^20}{2:^20}{3:^20}'.format(1, 2, 3, 4)
'         1                   2                   3                   4          '
</snippet></ROW><ROW><id>13903437</id><snippet>.format()</snippet></ROW><ROW><id>13903711</id><snippet>def __init__(self):
    self.filename = "highscores.dat"
    self.numScores = 5

    if not os.path.isfile(self.filename):
        self.scores = [100 for i in range(self.numScores)]
        self.names = ["A", "B", "C", "D", "E"]
        self.highscores = [(self.names[i], self.scores[i]) for i in range(self.numScores)]
    else:
        with open(self.filename, "rb") as f:
            self.highscores = pickle.load(f)
        self.names = [highscore[0] for highscore in self.highscores]
        self.scores = [highscore[1] for highscore in self.highscores]

def updateFile(self):
    with open(self.filename, 'wb') as f:
        pickle.dump(self.highscores, f)
</snippet></ROW><ROW><id>13903711</id><snippet>addScore</snippet></ROW><ROW><id>13903722</id><snippet>map(int, ...)</snippet></ROW><ROW><id>13903722</id><snippet>In [127]: line='0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16'

In [128]: zip(*[iter(map(int, line.split()))]*2)
Out[128]: [(0, 1), (2, 3), (4, 5), (6, 7), (8, 9), (10, 11), (12, 13), (14, 15)]
</snippet></ROW><ROW><id>13903722</id><snippet>bounds</snippet></ROW><ROW><id>13903722</id><snippet>bounds</snippet></ROW><ROW><id>13903722</id><snippet>In [131]: bounds = zip(*[iter(map(int, line.split()))]*2)

In [132]: for lo, hi in bounds: print 'lo:', lo, '\thi:', hi, '\tdelta:', hi-lo+1
lo: 0   hi: 1   delta: 2
lo: 2   hi: 3   delta: 2
lo: 4   hi: 5   delta: 2
lo: 6   hi: 7   delta: 2
lo: 8   hi: 9   delta: 2
lo: 10  hi: 11  delta: 2
lo: 12  hi: 13  delta: 2
lo: 14  hi: 15  delta: 2
</snippet></ROW><ROW><id>13903767</id><snippet>value = [v[0] - v[1] for v in value]
</snippet></ROW><ROW><id>13903795</id><snippet>bool</snippet></ROW><ROW><id>13903795</id><snippet>int</snippet></ROW><ROW><id>13903795</id><snippet>__and__()</snippet></ROW><ROW><id>13903795</id><snippet>bool</snippet></ROW><ROW><id>13903795</id><snippet>bool</snippet></ROW><ROW><id>13903795</id><snippet>    class bool(int):

        def __and__(self, other):
            if isinstance(other, bool):
                return bool(int(self) &amp; int(other))
            else:
                return int.__and__(self, other)

        __rand__ = __and__

        def __or__(self, other):
            if isinstance(other, bool):
                return bool(int(self) | int(other))
            else:
                return int.__or__(self, other)

        __ror__ = __or__

        def __xor__(self, other):
            if isinstance(other, bool):
                return bool(int(self) ^ int(other))
            else:
                return int.__xor__(self, other)

        __rxor__ = __xor__
</snippet></ROW><ROW><id>13903795</id><snippet>bool &amp; bool</snippet></ROW><ROW><id>13903795</id><snippet>bool</snippet></ROW><ROW><id>13903795</id><snippet>bool &amp; non-bool</snippet></ROW><ROW><id>13903795</id><snippet>int</snippet></ROW><ROW><id>13903795</id><snippet>int</snippet></ROW><ROW><id>13903795</id><snippet>In [12]: isinstance(True, int)
Out[12]: True

In [13]: True &amp; True
Out[13]: True

In [14]: True &amp; 1
Out[14]: 1
</snippet></ROW><ROW><id>13903795</id><snippet>int</snippet></ROW><ROW><id>13903795</id><snippet>In [15]: True + 0
Out[15]: 1

In [16]: True + False
Out[16]: 1
</snippet></ROW><ROW><id>13903934</id><snippet>traceback</snippet></ROW><ROW><id>13903934</id><snippet>&gt;&gt;&gt; import traceback
&gt;&gt;&gt; def my_func():
...     my_other_func()
... 
&gt;&gt;&gt; def my_other_func():
...     my_third()
... 
&gt;&gt;&gt; def my_third():
...     print "Stack"
...     traceback.print_stack()
...     print "Extracted"
...     print repr(traceback.extract_stack())
... 
&gt;&gt;&gt; 
&gt;&gt;&gt; my_func()
Stack
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in my_func
  File "&lt;stdin&gt;", line 2, in my_other_func
  File "&lt;stdin&gt;", line 3, in my_third
Extracted
[('&lt;stdin&gt;', 1, '&lt;module&gt;', None), 
 ('&lt;stdin&gt;', 2, 'my_func', None), 
 ('&lt;stdin&gt;', 2, 'my_other_func', None), 
 ('&lt;stdin&gt;', 5, 'my_third', None)]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13903946</id><snippet>Python 2.7.3 (default, Sep  4 2012, 20:19:03) 
[GCC 4.2.1 20070831 patched [FreeBSD]] on freebsd9
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; junk=''' &lt;a href=""http://a0c5e.site.it/r"" target=_blank&gt;&lt;font color=#808080&gt;MailUp&lt;/font&gt;&lt;/a&gt;
... &lt;a href=""http://www.site.it/prodottiLLPP.php?id=1"" class=""txtBlueGeorgia16""&gt;Prodotti&lt;/a&gt;
... &lt;a href=""http://www.site.it/terremoto.php"" target=""blank"" class=""txtGrigioScuroGeorgia12""&gt;Terremoto&lt;/a&gt;
... &lt;a class='mini' href='http://www.site.com/remove/professionisti.aspx?Id=65&amp;Code=xhmyskwzse'&gt;clicca qui.&lt;/a&gt;`'''
&gt;&gt;&gt; import re
&gt;&gt;&gt; pat=re.compile(r'''http[\:/a-zA-Z0-9\.\?\=&amp;]*''')
&gt;&gt;&gt; pat.findall(junk)
['http://a0c5e.site.it/r', 'http://www.site.it/prodottiLLPP.php?id=1', 'http://www.site.it/terremoto.php', 'http://www.site.com/remove/professionisti.aspx?Id=65&amp;Code=xhmyskwzse']
</snippet></ROW><ROW><id>13903992</id><snippet>Q</snippet></ROW><ROW><id>13903992</id><snippet>kalman_xy</snippet></ROW><ROW><id>13903992</id><snippet>F</snippet></ROW><ROW><id>13903992</id><snippet>H</snippet></ROW><ROW><id>13903992</id><snippet>x</snippet></ROW><ROW><id>13903992</id><snippet>new_x = F * x
position = H * x
</snippet></ROW><ROW><id>13903992</id><snippet>kalman</snippet></ROW><ROW><id>13903992</id><snippet>F</snippet></ROW><ROW><id>13903992</id><snippet>H</snippet></ROW><ROW><id>13903992</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def kalman_xy(x, P, measurement, R,
              motion = np.matrix('0. 0. 0. 0.').T,
              Q = np.matrix(np.eye(4))):
    """
    Parameters:    
    x: initial state 4-tuple of location and velocity: (x0, x1, x0_dot, x1_dot)
    P: initial uncertainty convariance matrix
    measurement: observed position
    R: measurement noise 
    motion: external motion added to state vector x
    Q: motion noise (same shape as P)
    """
    return kalman(x, P, measurement, R, motion, Q,
                  F = np.matrix('''
                      1. 0. 1. 0.;
                      0. 1. 0. 1.;
                      0. 0. 1. 0.;
                      0. 0. 0. 1.
                      '''),
                  H = np.matrix('''
                      1. 0. 0. 0.;
                      0. 1. 0. 0.'''))

def kalman(x, P, measurement, R, motion, Q, F, H):
    '''
    Parameters:
    x: initial state
    P: initial uncertainty convariance matrix
    measurement: observed position (same shape as H*x)
    R: measurement noise (same shape as H)
    motion: external motion added to state vector x
    Q: motion noise (same shape as P)
    F: next state function: x_prime = F*x
    H: measurement function: position = H*x

    Return: the updated and predicted new values for (x, P)

    See also http://en.wikipedia.org/wiki/Kalman_filter

    This version of kalman can be applied to many different situations by
    appropriately defining F and H 
    '''
    # UPDATE x, P based on measurement m    
    # distance between measured and current position-belief
    y = np.matrix(measurement).T - H * x
    S = H * P * H.T + R  # residual convariance
    K = P * H.T * S.I    # Kalman gain
    x = x + K*y
    I = np.matrix(np.eye(F.shape[0])) # identity matrix
    P = (I - K*H)*P

    # PREDICT x, P based on motion
    x = F*x + motion
    P = F*P*F.T + Q

    return x, P

def demo_kalman_xy():
    x = np.matrix('0. 0. 0. 0.').T 
    P = np.matrix(np.eye(4))*1000 # initial uncertainty

    N = 20
    true_x = np.linspace(0.0, 10.0, N)
    true_y = true_x**2
    observed_x = true_x + 0.05*np.random.random(N)*true_x
    observed_y = true_y + 0.05*np.random.random(N)*true_y
    plt.plot(observed_x, observed_y, 'ro')
    result = []
    R = 0.01**2
    for meas in zip(observed_x, observed_y):
        x, P = kalman_xy(x, P, meas, R)
        result.append((x[:2]).tolist())
    kalman_x, kalman_y = zip(*result)
    plt.plot(kalman_x, kalman_y, 'g-')
    plt.show()

demo_kalman_xy()
</snippet></ROW><ROW><id>13904124</id><snippet>+</snippet></ROW><ROW><id>13904124</id><snippet>+=</snippet></ROW><ROW><id>13904124</id><snippet>__add__</snippet></ROW><ROW><id>13904124</id><snippet>__iadd__</snippet></ROW><ROW><id>13904124</id><snippet>list()</snippet></ROW><ROW><id>13904124</id><snippet>__add__</snippet></ROW><ROW><id>13904124</id><snippet>__iadd__</snippet></ROW><ROW><id>13904124</id><snippet>self</snippet></ROW><ROW><id>13904124</id><snippet>self</snippet></ROW><ROW><id>13904124</id><snippet>__iadd__</snippet></ROW><ROW><id>13904124</id><snippet>list_inplace_concat()</snippet></ROW><ROW><id>13904124</id><snippet>listextend()</snippet></ROW><ROW><id>13904124</id><snippet>[].extend()</snippet></ROW><ROW><id>13904124</id><snippet>__add__</snippet></ROW><ROW><id>13904124</id><snippet>list_concat</snippet></ROW><ROW><id>13904124</id><snippet>list</snippet></ROW><ROW><id>13904124</id><snippet>__iadd__</snippet></ROW><ROW><id>13904124</id><snippet>.extend()</snippet></ROW><ROW><id>13904336</id><snippet>#Untested Code
Project.objects.filter(action__person = person)
</snippet></ROW><ROW><id>13904387</id><snippet>print map(asterisk(operator.sub), [[-20, 20], [-20, 20], [32, 32]])
</snippet></ROW><ROW><id>13904387</id><snippet>from itertools import starmap
print starmap(operator.sub, [[-20, 20], [-20, 20], [32, 32]])
</snippet></ROW><ROW><id>13904387</id><snippet>operator.apply(f, args)</snippet></ROW><ROW><id>13904403</id><snippet>Christmas is here</snippet></ROW><ROW><id>13904403</id><snippet>names = ['Chris', 'Jack', 'Kim']
target = ['Chris Smith', 'I hijacked this thread', 'Kimberly','Christmas is here', 'CHRIS']

import re
matches = [targ for targ in target if any(re.search(r'\b{}'.format(name), targ, re.I) for name in names)]
print matches
# ['Chris Smith', 'Kimberly', 'Christmas is here', 'CHRIS']
</snippet></ROW><ROW><id>13904403</id><snippet>\b{}\b' - then you'll get ['Chris Smith', 'CHRIS']</snippet></ROW><ROW><id>13904403</id><snippet>Kim</snippet></ROW><ROW><id>13904692</id><snippet>.extend()</snippet></ROW><ROW><id>13904692</id><snippet>self</snippet></ROW><ROW><id>13904692</id><snippet>listobject.c</snippet></ROW><ROW><id>13904692</id><snippet>list_inplace_concat(PyListObject *self, PyObject *other)
{
     PyObject *result;

     result = listextend(self, other);
     if (result == NULL)
         return result;
     Py_DECREF(result);
     Py_INCREF(self);
     return (PyObject *)self;
}
</snippet></ROW><ROW><id>13904830</id><snippet>for vertex in p:
</snippet></ROW><ROW><id>13904830</id><snippet>for vertex in p[:]:
</snippet></ROW><ROW><id>13905171</id><snippet>#mymodel.py
class MyModelMixin:
    def django_kitty(self, ...):
        pass
    def postprocess(self, ...):
        pass
    def preprocess(self, ...):
        pass

#models.py
from mymodel import MyModelMixin

class MyModel(models.Model, MyModelMixin):
    pass
</snippet></ROW><ROW><id>13905171</id><snippet>myapp/
    models/
        __init__.py
            from mymodel import MyModel
        mymodel.py
</snippet></ROW><ROW><id>13905171</id><snippet>#mymodel.py
class MyModel(models.Model):
    ...
    class Meta:
        app_label = 'myapp'
</snippet></ROW><ROW><id>13905171</id><snippet>Model.__getattr__</snippet></ROW><ROW><id>13905226</id><snippet>sslv23</snippet></ROW><ROW><id>13905226</id><snippet>sslv3</snippet></ROW><ROW><id>13905226</id><snippet>tlsv1</snippet></ROW><ROW><id>13905226</id><snippet>from M2Crypto import SSL
ctx = SSL.Context(protocol='tlsv1')
conn = SSL.Connection(ctx)
conn.connect(('www.cancerhelp.org.uk', 443))
</snippet></ROW><ROW><id>13905232</id><snippet>0</snippet></ROW><ROW><id>13905232</id><snippet>"0"</snippet></ROW><ROW><id>13905232</id><snippet>data['stock'] = [0.02, 0.03, 0.04, 0.00, 0.05, 0.04, 0.05]
</snippet></ROW><ROW><id>13905232</id><snippet>for x in range(len(data['Keywords'])):
    if data['stock'][x] != 0:
        print data["stock"][x]
    else:
        print "hello"
</snippet></ROW><ROW><id>13905232</id><snippet>x</snippet></ROW><ROW><id>13905232</id><snippet>for val in data["stock"]:
    if val != 0:
        print val
    else:
        print "hello"
</snippet></ROW><ROW><id>13905232</id><snippet>data["Keywords"]</snippet></ROW><ROW><id>13905232</id><snippet>data["stock"]</snippet></ROW><ROW><id>13905403</id><snippet>port</snippet></ROW><ROW><id>13905459</id><snippet>import time
import zmq

ctx = zmq.Context()
pub = ctx.socket(zmq.PUB)
sub = ctx.socket(zmq.SUB)

url = "tcp://127.0.0.1:5555"
pub.bind(url)
sub.connect(url)

# subscribe to 'a' and 'b'
sub.setsockopt(zmq.SUBSCRIBE, b'a')
sub.setsockopt(zmq.SUBSCRIBE, b'b')

time.sleep(1)

for word in [ 'alpha', 'beta', 'gamma', 'apple', 'carrot', 'bagel']:
    pub.send(word)

time.sleep(1)

for i in range(4):
    print sub.recv(zmq.NOBLOCK)
</snippet></ROW><ROW><id>13905459</id><snippet>alpha
beta
apple
bagel
</snippet></ROW><ROW><id>13905662</id><snippet>&gt;&gt;&gt; s = {1, 2, 3}
&gt;&gt;&gt; news = s | {4}
&gt;&gt;&gt; s
set([1, 2, 3])
&gt;&gt;&gt; news
set([1, 2, 3, 4])
</snippet></ROW><ROW><id>13905662</id><snippet>s</snippet></ROW><ROW><id>13905662</id><snippet>&gt;&gt;&gt; s.update({4})
&gt;&gt;&gt; s
set([1, 2, 3, 4])
</snippet></ROW><ROW><id>13905662</id><snippet>s</snippet></ROW><ROW><id>13905662</id><snippet>.update()</snippet></ROW><ROW><id>13905662</id><snippet>s</snippet></ROW><ROW><id>13905662</id><snippet>None</snippet></ROW><ROW><id>13905927</id><snippet>supervisord</snippet></ROW><ROW><id>13905927</id><snippet>supervisord</snippet></ROW><ROW><id>13905927</id><snippet>supervisord</snippet></ROW><ROW><id>13905933</id><snippet>import os

path = '~/backup/backup_20121216.log'
path = os.path.expanduser(path)
with open(path, 'rb') as fp:
    text = fp.read()
print text
</snippet></ROW><ROW><id>13906107</id><snippet>[[((case.excluded == False) or removeParentNode('blockTable')) and '']][[case.name]]</snippet></ROW><ROW><id>13906221</id><snippet>INNER = r"(?:\\{|\\}|[^{}])"
</snippet></ROW><ROW><id>13906524</id><snippet>info['artist']
info['album']
</snippet></ROW><ROW><id>13906811</id><snippet>-1</snippet></ROW><ROW><id>13906811</id><snippet>None</snippet></ROW><ROW><id>13906811</id><snippet>enumerate</snippet></ROW><ROW><id>13906811</id><snippet>['a', 'b', 'c', 'd']
</snippet></ROW><ROW><id>13906811</id><snippet>[(0, 'a'), (1, 'b'), (2, 'c'), (3, 'd')]
</snippet></ROW><ROW><id>13906811</id><snippet>def firstOccur(key, string):
    for i, c in enumerate(string):
        if key == c:
            return i
    return -1
</snippet></ROW><ROW><id>13906811</id><snippet>def firstOccur(key, string):
    for i in range(len(string)):
        if key == string[i]:
            return i
    return -1
</snippet></ROW><ROW><id>13907044</id><snippet>select name, value1, value2, value3, value4
from table2
where name in (
    select name
    from table1
    where description like ?
)
</snippet></ROW><ROW><id>13907271</id><snippet>Command Line Tools</snippet></ROW><ROW><id>13907271</id><snippet>Xcode.app</snippet></ROW><ROW><id>13907271</id><snippet>Preferences</snippet></ROW><ROW><id>13907271</id><snippet>Downloads</snippet></ROW><ROW><id>13907271</id><snippet>Components</snippet></ROW><ROW><id>13907271</id><snippet>Install</snippet></ROW><ROW><id>13907271</id><snippet>Update</snippet></ROW><ROW><id>13907271</id><snippet>/usr/bin</snippet></ROW><ROW><id>13907474</id><snippet>.to_python()</snippet></ROW><ROW><id>13907725</id><snippet>def assign(s):
    length = len(s)
    x = length*[0]
    index = 0
    for j in range(length):
        digit = int(s[j])  #convert to int digit
        if digit % 2: #test for odd number
            x[index] = digit
            index += 1

    print("The odd numbers are")
    for j in range(index):
        print(x[j])
</snippet></ROW><ROW><id>13907725</id><snippet>index</snippet></ROW><ROW><id>13907725</id><snippet>x</snippet></ROW><ROW><id>13907725</id><snippet>def assign(input_string):
    odd_digits = []
    for char in input_string:
        digit = int(char)  # Convert to integer
        if digit % 2:  # If the digit is odd
            odd_digits.append(digit)
    print("The odd digits are", *odd_digits, sep='\n')  # or: ("The odd digits are", odd_digits)
</snippet></ROW><ROW><id>13907725</id><snippet>length</snippet></ROW><ROW><id>13907725</id><snippet>x</snippet></ROW><ROW><id>13907725</id><snippet>0</snippet></ROW><ROW><id>13907725</id><snippet>x</snippet></ROW><ROW><id>13907725</id><snippet>def assign(input_string):
    odd_digits = [char for char in input_string if int(char) % 2]  # or: if char in '13579'
    print("The odd digits are", *odd_digits, sep='\n')  # or: ("The odd digits are", odd_digits)
</snippet></ROW><ROW><id>13907831</id><snippet>zombie.py</snippet></ROW><ROW><id>13907831</id><snippet>myzombiefile.z</snippet></ROW><ROW><id>13907831</id><snippet>python zombie.py myzombiefile.z
</snippet></ROW><ROW><id>13907831</id><snippet>zombie.py</snippet></ROW><ROW><id>13907831</id><snippet>chmod +x zombie.py
</snippet></ROW><ROW><id>13907831</id><snippet>zombie.py myzombiefile.z
</snippet></ROW><ROW><id>13907871</id><snippet>decorator</snippet></ROW><ROW><id>13907871</id><snippet>wraps</snippet></ROW><ROW><id>13908057</id><snippet>cursor = db.tweets.find({"tweet.timestamp":{'$gte':startEpoch, '$lte':endEpoch}})
</snippet></ROW><ROW><id>13908065</id><snippet>def eliminate(x, y):
    largest = max(x)
    y[:] = [elem for elem in x if elem != largest]
</snippet></ROW><ROW><id>13908065</id><snippet>y</snippet></ROW><ROW><id>13908065</id><snippet>x</snippet></ROW><ROW><id>13908065</id><snippet>&gt;&gt;&gt; x = [1,2,3]
&gt;&gt;&gt; y = []
&gt;&gt;&gt; eliminate(x, y)
&gt;&gt;&gt; y
[1, 2]
&gt;&gt;&gt; x = [7,10,10,3,4]
&gt;&gt;&gt; eliminate(x, y)
&gt;&gt;&gt; y
[7, 3, 4]
</snippet></ROW><ROW><id>13908065</id><snippet>y</snippet></ROW><ROW><id>13908065</id><snippet>x</snippet></ROW><ROW><id>13908065</id><snippet>y</snippet></ROW><ROW><id>13908065</id><snippet>y.extend</snippet></ROW><ROW><id>13908065</id><snippet>[1,2,2]</snippet></ROW><ROW><id>13908065</id><snippet>.remove()</snippet></ROW><ROW><id>13908342</id><snippet>%%</snippet></ROW><ROW><id>13908342</id><snippet>In [169]: s='%(name)s has a %(animal)s that is %%(animal_age)s years old'

In [170]: s % {'name': 'Dolly', 'animal': 'bird', 'animal_age': 10}

Out[170]: 'Dolly has a bird that is %(animal_age)s years old'
</snippet></ROW><ROW><id>13908342</id><snippet>string.format()</snippet></ROW><ROW><id>13908342</id><snippet>In [172]: s='{name} has a {animal} that is %(animal_age)s years old'

In [173]: dic = {'animal': 'bird', 'animal_age': 10, 'name': 'Dolly'}

In [174]: s.format(**dic)
Out[174]: 'Dolly has a bird that is %(animal_age)s years old'
</snippet></ROW><ROW><id>13908425</id><snippet> def set_visible(self, v, visible):
    self.timer_visible = visible
    if self.timer_visible is True:
        self.set_up()
        self.timerui.show_all()
    else:
        self.timerui.hide_all()
</snippet></ROW><ROW><id>13908473</id><snippet>x = [1,2,3,4]
y = [5,6,7,8]

def addThem(x, y, m, n):
  return x[:m]+y[:n]
</snippet></ROW><ROW><id>13908536</id><snippet>from itertools import product

def horizontal():
    for x, y in product(range(20), range(17)):
        print 1 + sum(int(n) for n in grid[x][y: y + 4])
</snippet></ROW><ROW><id>13908536</id><snippet>sum</snippet></ROW><ROW><id>13908536</id><snippet>my_sum</snippet></ROW><ROW><id>13909022</id><snippet>def triangle(n):
    for i in range(1, n +1):
        print ' ' * (n - i) + 'x' * i
</snippet></ROW><ROW><id>13909022</id><snippet>def triangle(n):
    for i in range(1, n +1):
        print ('x' * i).rjust(n, ' ')
</snippet></ROW><ROW><id>13909022</id><snippet>triangle(5)</snippet></ROW><ROW><id>13909132</id><snippet>x = [2, 4, 7, 12, 3]
sum_of_all_numbers= sum(x)
</snippet></ROW><ROW><id>13909132</id><snippet>x = [2, 4, 7, 12, 3] 
sum_of_all_numbers= reduce(lambda q,p: p+q, x)
</snippet></ROW><ROW><id>13909224</id><snippet>from itertools import islice
with open("test.txt") as fin:
    try:
        while True:
            data =  islice(fin, 0, 8)

            firstname = next(data)
            lastname = next(data)
            email = next(data)
            #.....
    except StopIteration:
        pass
</snippet></ROW><ROW><id>13909224</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; from itertools import islice
&gt;&gt;&gt; records = namedtuple('record',
                  ('firstname','lastname','email' #, .....
               ))
&gt;&gt;&gt; with open("test.txt") as fin:
    try:
        while True:
            data =  islice(fin, 0, 3)

            data = record(*data)
            print data.firstname, data.lastname, data.email #.......
    except (StopIteration, TypeError):
        pass
</snippet></ROW><ROW><id>13909264</id><snippet>// TestDLL.cpp
#include &lt;string.h&gt; // strcpy

extern "C" __declspec(dllexport) char* stringdup(const char* str) {
    char* p = new char[strlen(str)+1];
    strcpy(p,str);
    return p;
}

// if you have no good reason to use void*, use the type
// you've allocated. while it usually works for built-in
// types, it wouldn't work for classes (it wouldn't call
// the destructor)
extern "C" __declspec(dllexport) void stringfree(char* ptr) {
    // you don't need to check for 0 before you delete it,
    // but if you allocate with new[], free with delete[] !
    delete [] ptr; 
}
</snippet></ROW><ROW><id>13909264</id><snippet># Test.py
import ctypes

lib = ctypes.cdll.TestDLL

# this creates a c-style char pointer, initialized with a string whose
# memory is managed by PYTHON! do not attempt to free it through the DLL!
cstr = ctypes.c_char_p("hello ctypes")

# call the dll function that returns a char pointer 
# whose memory is managed by the DLL.
p = lib.stringdup(cstr)

# p is just an integer containing the memory address of the 
# char array. therefore, this just prints the address:
print p

# this prints the actual string
print ctypes.c_char_p(p).value

# free the memory through the DLL
lib.stringfree(p)
</snippet></ROW><ROW><id>13909512</id><snippet>__unicode__</snippet></ROW><ROW><id>13909512</id><snippet>def __unicode__(self):
    return self.mycolumnname
</snippet></ROW><ROW><id>13909512</id><snippet>category = forms.ModelChoiceField(queryset=MyObjectCategory.objects.all())
</snippet></ROW><ROW><id>13909749</id><snippet>QRunnable</snippet></ROW><ROW><id>13909749</id><snippet>QThreadPool</snippet></ROW><ROW><id>13909749</id><snippet>import sys

from PyQt4.QtGui import QApplication
from PyQt4.QtCore import QThreadPool, QObject, QRunnable, pyqtSignal

class WorkerSignals(QObject):
    result = pyqtSignal(int)

class Worker(QRunnable):
    def __init__(self, task):
        super(Worker, self).__init__()

        self.task = task
        self.signals = WorkerSignals()

    def run(self):
        print 'Sending', self.task
        self.signals.result.emit(self.task)

class Tasks(QObject):
    def __init__(self):
        super(Tasks, self).__init__()

        self.pool = QThreadPool()
        self.pool.setMaxThreadCount(1)

    def process_result(self, task):
        print 'Receiving', task

    def start(self):
        for task in range(10):
            worker = Worker(task)
            worker.signals.result.connect(self.process_result)

            self.pool.start(worker)

        self.pool.waitForDone()

if __name__ == "__main__":
    import  sys

    app = QApplication(sys.argv)
    main = Tasks()
    main.start()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>13910291</id><snippet>def infinitenumbers():
    count = 0
    while True:
        yield count
        count += 1
</snippet></ROW><ROW><id>13910291</id><snippet>itertools</snippet></ROW><ROW><id>13910291</id><snippet>count</snippet></ROW><ROW><id>13910291</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; c = itertools.count()
&gt;&gt;&gt; next(c)
0
&gt;&gt;&gt; next(c)
1
&gt;&gt;&gt; for i in itertools.islice(c, 5):
...     print i
...
2
3
4
5
6
</snippet></ROW><ROW><id>13910387</id><snippet>'$slice':[ordinal,1]
</snippet></ROW><ROW><id>13910464</id><snippet>saveWine:function () {
        this.model.set({
            name:$('#name').val(),
            grapes:$('#grapes').val(),
            country:$('#country').val(),
            region:$('#region').val(),
            year:$('#year').val(),
            description:$('#description').val()
        });
        if (this.model.isNew()) {
            var self = this;
            app.wineList.create(this.model, {
                success:function () {
                    app.navigate('wines/' + self.model.id, false);
                }
            });
        } else {
            this.model.save();
        }

        return false;
</snippet></ROW><ROW><id>13910571</id><snippet>txt = re.sub('"icon":"(.*?).png",','',txt)
</snippet></ROW><ROW><id>13910571</id><snippet>    C:\&gt;python st.py
{21435,false,true,"Leather and Steel",false,[],["24% increased Evasion Rating and Armour"],439,2,10,0,0,0,[]},
{50054,false,false,"Shield Block",false,[],["2% additional Shield Block Chance"],440,1,4,0,0,0,[24083]},
{44207,false,true,"Shield Mastery",false,[],["4% additional Shield Block Chance","20% increased Defences from equipped Shield"],440,1,0,0,0,0,[59281]},
{59281,false,false,"Shield Block",false,[],["2% additional Shield Block Chance"],440,1,2,0,0,0,[50054]}
</snippet></ROW><ROW><id>13911007</id><snippet>  def get_index(self):
     SetObject.object_counter += 1
     return SetObject.object_counter-1
</snippet></ROW><ROW><id>13911048</id><snippet>requests</snippet></ROW><ROW><id>13911048</id><snippet>import os
import sys
import requests  # pip install requests

class upload_in_chunks(object):
    def __init__(self, filename, chunksize=1 &lt;&lt; 13):
        self.filename = filename
        self.chunksize = chunksize
        self.totalsize = os.path.getsize(filename)
        self.readsofar = 0

    def __iter__(self):
        with open(self.filename, 'rb') as file:
            while True:
                data = file.read(self.chunksize)
                if not data:
                    sys.stderr.write("\n")
                    break
                self.readsofar += len(data)
                percent = self.readsofar * 1e2 / self.totalsize
                sys.stderr.write("\r{percent:3.0f}%".format(percent=percent))
                yield data

    def __len__(self):
        return self.totalsize

# XXX fails
r = requests.post("http://httpbin.org/post",
                  data=upload_in_chunks(__file__, chunksize=10))
</snippet></ROW><ROW><id>13911048</id><snippet>class IterableToFileAdapter(object):
    def __init__(self, iterable):
        self.iterator = iter(iterable)
        self.length = len(iterable)

    def read(self, size=-1): # TBD: add buffer for `len(data) &gt; size` case
        return next(self.iterator, b'')

    def __len__(self):
        return self.length
</snippet></ROW><ROW><id>13911048</id><snippet>it = upload_in_chunks(__file__, 10)
r = requests.post("http://httpbin.org/post", data=IterableToFileAdapter(it))

# pretty print
import json
json.dump(r.json, sys.stdout, indent=4, ensure_ascii=False)
</snippet></ROW><ROW><id>13911709</id><snippet>gevent</snippet></ROW><ROW><id>13911709</id><snippet>&gt;&gt;&gt; import gevent.monkey
&gt;&gt;&gt; gevent.monkey.patch_all()
&gt;&gt;&gt; ...
&gt;&gt;&gt; p = gevent.spawn(producer)
&gt;&gt;&gt; p.join()
start fetching... http://www.google.ru
start fetching... http://www.s-str.ru
http://www.google.ru : 200
start fetching... http://www.vk.com
http://www.vk.com : 200
start fetching... http://www.yandex.ru
http://www.yandex.ru : 200
start fetching... http://www.xxx.com
http://www.xxx.com : 200
http://www.s-str.ru : 200
</snippet></ROW><ROW><id>13911709</id><snippet>pool.wait_available()</snippet></ROW><ROW><id>13911709</id><snippet>Pool</snippet></ROW><ROW><id>13911709</id><snippet>spawn</snippet></ROW><ROW><id>13911709</id><snippet>Pool</snippet></ROW><ROW><id>13911709</id><snippet>wait_available</snippet></ROW><ROW><id>13911709</id><snippet>free_count</snippet></ROW><ROW><id>13911709</id><snippet>spawn</snippet></ROW><ROW><id>13911709</id><snippet>Pool</snippet></ROW><ROW><id>13911764</id><snippet>def page_parser(self, response):
      sites = hxs.select('//div[@class="row"]')
      items = []
      request =  Request("http://www.example.com/lin1.cpp",  callback =self.parseDescription1)
      request.meta['item'] = item

      request =  Request("http://www.example.com/lin1.cpp",  callback =self.parseDescription2)
      request.meta['item'] = item

      request =  Request("http://www.example.com/lin1.cpp",  callback =self.parseDescription2)
      request.meta['item'] = item


      return request 

def parseDescription1(self,response):
            item = response.meta['item']
            item['desc1'] = "test"
            return item

def parseDescription2(self,response):
            item = response.meta['item']
            item['desc2'] = "test2"
            return item

def parseDescription3(self,response):
            item = response.meta['item']
            item['desc3'] = "test3"
            return item
</snippet></ROW><ROW><id>13911764</id><snippet>def page_parser(self, response):
      sites = hxs.select('//div[@class="row"]')
      items = []

      request = Request("http://www.example.com/lin1.cpp", callback=self.parseDescription1)
      request.meta['item'] = item
      yield request

      request = Request("http://www.example.com/lin1.cpp", callback=self.parseDescription2, meta={'item': item})
      yield request

      yield Request("http://www.example.com/lin1.cpp", callback=self.parseDescription3, meta={'item': item})

def parseDescription1(self,response):
            item = response.meta['item']
            item['desc1'] = "test"
            return item

def parseDescription2(self,response):
            item = response.meta['item']
            item['desc2'] = "test2"
            return item

def parseDescription3(self,response):
            item = response.meta['item']
            item['desc3'] = "test3"
            return item
</snippet></ROW><ROW><id>13911772</id><snippet>-C</snippet></ROW><ROW><id>13911772</id><snippet>-json</snippet></ROW><ROW><id>13911772</id><snippet>shell=True</snippet></ROW><ROW><id>13911772</id><snippet>subprocess</snippet></ROW><ROW><id>13911772</id><snippet>'class'</snippet></ROW><ROW><id>13911772</id><snippet>def get_nic_data():
    lshw_cmd = ['lshw', '-json']
    proc = subprocess.Popen(lshw_cmd, stdout=subprocess.PIPE,
                                      stderr=subprocess.PIPE)
    return proc.communicate()[0]

def find_class(data, class_):
    for entry in data.get('children', []):
        if entry.get('class') == class_:
            yield entry

        for child in find_class(entry, class_):
            yield child

def read_data(proc_output, class_='network'):
    import json

    for entry in find_class(data.loads(proc_output), class_):
        yield entry['vendor'], entry['description'], entry['product']
</snippet></ROW><ROW><id>13911772</id><snippet>read_data(get_nic_data())</snippet></ROW><ROW><id>13911772</id><snippet>for vendor, description, product in read_data(get_nic_data()):
    print vendor, description, product
</snippet></ROW><ROW><id>13911969</id><snippet>clean()</snippet></ROW><ROW><id>13911969</id><snippet>clean_password</snippet></ROW><ROW><id>13911969</id><snippet>cleaned_data</snippet></ROW><ROW><id>13911969</id><snippet>'passwordConfirm'</snippet></ROW><ROW><id>13911969</id><snippet>clean_passwordConfirm()</snippet></ROW><ROW><id>13911969</id><snippet>def clean(self):
    try:
        cleaned_data = super(RegistrationForm, self).clean()
        password = cleaned_data['password']
        passwordConfirm = cleaned_data['passwordConfirm']
        if password != passwordConfirm:
            raise forms.ValidationError("Password does not match, try again.")
        return cleaned_data
    except:
        raise forms.ValidationError("Password does not match, try again.")
</snippet></ROW><ROW><id>13911987</id><snippet>#! c:\python27\python.exe -u
</snippet></ROW><ROW><id>13912166</id><snippet>@app.route('/facebook/authorize')
def facebook_authorize():
    ...

@app.route('/twitter/authorize')
def facebook_authorize():
    ...
</snippet></ROW><ROW><id>13912166</id><snippet>facebook_authorize</snippet></ROW><ROW><id>13912166</id><snippet>app.route</snippet></ROW><ROW><id>13912166</id><snippet>.py</snippet></ROW><ROW><id>13912308</id><snippet>progress = re.search('\d*%',str).group()
</snippet></ROW><ROW><id>13912308</id><snippet>while(progress &lt; 101%):
    get_new_progress
    re.search....
</snippet></ROW><ROW><id>13912487</id><snippet>&gt;&gt;&gt; line0 = "(+34)971756754"
&gt;&gt;&gt; line1 = "971756754"
&gt;&gt;&gt; re.findall(r'((?:\(?\+34\)?)?\d{9})',line0)
['(+34)971756754']
&gt;&gt;&gt; re.findall(r'((?:\(?\+34\)?)?\d{9})',line1)
['971756754']


 My first question is: why does it find two occurrences of the pattern?
</snippet></ROW><ROW><id>13912487</id><snippet>?</snippet></ROW><ROW><id>13912534</id><snippet>return cleaned_data</snippet></ROW><ROW><id>13912534</id><snippet>return username</snippet></ROW><ROW><id>13912573</id><snippet>text()</snippet></ROW><ROW><id>13912573</id><snippet>sup</snippet></ROW><ROW><id>13912573</id><snippet>for x in doc.xpath("//p/text()|//sup"):
    try:
        print(to_sup(x.text))
    except AttributeError:
        print(x)
</snippet></ROW><ROW><id>13912888</id><snippet>path = '/path/to/database/file.db'
conn = sqlite3.connect(path)
</snippet></ROW><ROW><id>13913048</id><snippet> page = Page.all().ancestor(person).filter("url =",page.url).get()
</snippet></ROW><ROW><id>13913526</id><snippet>class Cart(models.Model):
    ...
    item.description = unicode(variation)
</snippet></ROW><ROW><id>13913526</id><snippet>class ProductVariation(Priced):
    ...
    def __unicode__(self):
        """
        Display the option names and values for the variation.
        """
        options = []
        for field in self.option_fields():
            if getattr(self, field.name) is not None:
                options.append("%s: %s" % (unicode(field.verbose_name),
                                           getattr(self, field.name)))
        return ("%s %s" % (unicode(self.product), ", ".join(options))).strip()
</snippet></ROW><ROW><id>13913526</id><snippet>options = CharField(_("Options"), max_length=200)
</snippet></ROW><ROW><id>13913526</id><snippet>def options_text(self):
    options = []
    for field in self.option_fields():
        if getattr(self, field.name) is not None:
            options.append("%s: %s" % (unicode(field.verbose_name),
                                       getattr(self, field.name)))
    return ", ".join(options).strip() 

def __unicode__(self):
    """
    Display the option names and values for the variation.
    """        
    return ("%s %s" % (unicode(self.product), self.options_text())).strip()
</snippet></ROW><ROW><id>13913526</id><snippet>item.description = unicode(variation.product)
item.options = variation.options_text()
</snippet></ROW><ROW><id>13913585</id><snippet>|</snippet></ROW><ROW><id>13913585</id><snippet>In [20]: re_pattern = r'\b(?:total|staff)\b'

In [21]: re.findall(re_pattern, question)
Out[21]: ['total', 'staff']
</snippet></ROW><ROW><id>13913585</id><snippet>\b</snippet></ROW><ROW><id>13913585</id><snippet>In [51]: def find_all_words(words, sentence):
....:     all_words = re.findall(r'\w+', sentence)
....:     words_found = []
....:     for word in words:
....:         if word in all_words:
....:             words_found.append(word)
....:     return words_found

In [52]: print find_all_words(['total', 'staff'], 'The total number of staff in 30?')
['total', 'staff'] 

In [53]: print find_all_words(['total', 'staff'], 'My staff is totally overworked.')
['staff']
</snippet></ROW><ROW><id>13913772</id><snippet>query string parameters</snippet></ROW><ROW><id>13913772</id><snippet>parameters</snippet></ROW><ROW><id>13913772</id><snippet>aclark@Alexs-MacBook-Pro:~/ &gt; curl http://localhost:8080/test\?foo=bar
This is the Script (Python) "test" in http://localhost:8080
bar
</snippet></ROW><ROW><id>13913933</id><snippet>type object '&lt;typename&gt;' has no attribute 'x'</snippet></ROW><ROW><id>13913933</id><snippet>NameError: global name 'x' is not defined</snippet></ROW><ROW><id>13913933</id><snippet>class</snippet></ROW><ROW><id>13913933</id><snippet>x</snippet></ROW><ROW><id>13913933</id><snippet>Foo.x</snippet></ROW><ROW><id>13913933</id><snippet>Foo</snippet></ROW><ROW><id>13913933</id><snippet>class A:
     a = 42
     b = list(a + i for i in range(10))
</snippet></ROW><ROW><id>13913933</id><snippet>dis</snippet></ROW><ROW><id>13913933</id><snippet>class &lt;name&gt;:</snippet></ROW><ROW><id>13913933</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def foo():
...     class Foo:
...         x = 5
...         y = [x for i in range(1)]
...     return Foo
... 
&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_BUILD_CLASS     
              1 LOAD_CONST               1 (&lt;code object Foo at 0x10a436030, file "&lt;stdin&gt;", line 2&gt;) 
              4 LOAD_CONST               2 ('Foo') 
              7 MAKE_FUNCTION            0 
             10 LOAD_CONST               2 ('Foo') 
             13 CALL_FUNCTION            2 (2 positional, 0 keyword pair) 
             16 STORE_FAST               0 (Foo) 

  5          19 LOAD_FAST                0 (Foo) 
             22 RETURN_VALUE         
</snippet></ROW><ROW><id>13913933</id><snippet>LOAD_CONST</snippet></ROW><ROW><id>13913933</id><snippet>Foo</snippet></ROW><ROW><id>13913933</id><snippet>__dict__</snippet></ROW><ROW><id>13913933</id><snippet>class</snippet></ROW><ROW><id>13913933</id><snippet>&lt;code object Foo at 0x10a436030, file "&lt;stdin&gt;", line 2&gt;</snippet></ROW><ROW><id>13913933</id><snippet>co_consts</snippet></ROW><ROW><id>13913933</id><snippet>&gt;&gt;&gt; foo.__code__.co_consts
(None, &lt;code object Foo at 0x10a436030, file "&lt;stdin&gt;", line 2&gt;, 'Foo')
&gt;&gt;&gt; dis.dis(foo.__code__.co_consts[1])
  2           0 LOAD_FAST                0 (__locals__) 
              3 STORE_LOCALS         
              4 LOAD_NAME                0 (__name__) 
              7 STORE_NAME               1 (__module__) 
             10 LOAD_CONST               0 ('foo.&lt;locals&gt;.Foo') 
             13 STORE_NAME               2 (__qualname__) 

  3          16 LOAD_CONST               1 (5) 
             19 STORE_NAME               3 (x) 

  4          22 LOAD_CONST               2 (&lt;code object &lt;listcomp&gt; at 0x10a385420, file "&lt;stdin&gt;", line 4&gt;) 
             25 LOAD_CONST               3 ('foo.&lt;locals&gt;.Foo.&lt;listcomp&gt;') 
             28 MAKE_FUNCTION            0 
             31 LOAD_NAME                4 (range) 
             34 LOAD_CONST               4 (1) 
             37 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             40 GET_ITER             
             41 CALL_FUNCTION            1 (1 positional, 0 keyword pair) 
             44 STORE_NAME               5 (y) 
             47 LOAD_CONST               5 (None) 
             50 RETURN_VALUE         
</snippet></ROW><ROW><id>13913933</id><snippet>locals()</snippet></ROW><ROW><id>13913933</id><snippet>x</snippet></ROW><ROW><id>13913933</id><snippet>y</snippet></ROW><ROW><id>13913933</id><snippet>x</snippet></ROW><ROW><id>13913933</id><snippet>5</snippet></ROW><ROW><id>13913933</id><snippet>x</snippet></ROW><ROW><id>13913933</id><snippet>range(1)</snippet></ROW><ROW><id>13913933</id><snippet>  2           0 LOAD_NAME                0 (__name__)
              3 STORE_NAME               1 (__module__)

  3           6 LOAD_CONST               0 (5)
              9 STORE_NAME               2 (x)

  4          12 BUILD_LIST               0
             15 LOAD_NAME                3 (range)
             18 LOAD_CONST               1 (1)
             21 CALL_FUNCTION            1
             24 GET_ITER            
        &gt;&gt;   25 FOR_ITER                12 (to 40)
             28 STORE_NAME               4 (i)
             31 LOAD_NAME                2 (x)
             34 LIST_APPEND              2
             37 JUMP_ABSOLUTE           25
        &gt;&gt;   40 STORE_NAME               5 (y)
             43 LOAD_LOCALS         
             44 RETURN_VALUE        
</snippet></ROW><ROW><id>13913933</id><snippet>FOR_ITER</snippet></ROW><ROW><id>13913933</id><snippet>x</snippet></ROW><ROW><id>13913933</id><snippet>&gt;&gt;&gt; foo.__code__.co_consts[1].co_consts
('foo.&lt;locals&gt;.Foo', 5, &lt;code object &lt;listcomp&gt; at 0x10a385420, file "&lt;stdin&gt;", line 4&gt;, 'foo.&lt;locals&gt;.Foo.&lt;listcomp&gt;', 1, None)
&gt;&gt;&gt; dis.dis(foo.__code__.co_consts[1].co_consts[2])
  4           0 BUILD_LIST               0 
              3 LOAD_FAST                0 (.0) 
        &gt;&gt;    6 FOR_ITER                12 (to 21) 
              9 STORE_FAST               1 (i) 
             12 LOAD_GLOBAL              0 (x) 
             15 LIST_APPEND              2 
             18 JUMP_ABSOLUTE            6 
        &gt;&gt;   21 RETURN_VALUE         
</snippet></ROW><ROW><id>13913933</id><snippet>range(1)</snippet></ROW><ROW><id>13913933</id><snippet>FOR_ITER</snippet></ROW><ROW><id>13913933</id><snippet>x</snippet></ROW><ROW><id>13913933</id><snippet>foo</snippet></ROW><ROW><id>13913933</id><snippet>x</snippet></ROW><ROW><id>13913933</id><snippet>&gt;&gt;&gt; def foo():
...     x = 2
...     class Foo:
...         x = 5
...         y = [x for i in range(1)]
...     return Foo
... 
&gt;&gt;&gt; dis.dis(foo.__code__.co_consts[2].co_consts[2])
  5           0 BUILD_LIST               0 
              3 LOAD_FAST                0 (.0) 
        &gt;&gt;    6 FOR_ITER                12 (to 21) 
              9 STORE_FAST               1 (i) 
             12 LOAD_DEREF               0 (x) 
             15 LIST_APPEND              2 
             18 JUMP_ABSOLUTE            6 
        &gt;&gt;   21 RETURN_VALUE         
</snippet></ROW><ROW><id>13913933</id><snippet>LOAD_DEREF</snippet></ROW><ROW><id>13913933</id><snippet>x</snippet></ROW><ROW><id>13913933</id><snippet>&gt;&gt;&gt; foo.__code__.co_cellvars               # foo function `x`
('x',)
&gt;&gt;&gt; foo.__code__.co_consts[2].co_cellvars  # Foo class, no cell variables
()
&gt;&gt;&gt; foo.__code__.co_consts[2].co_consts[2].co_freevars  # Refers to `x` in foo
('x',)
&gt;&gt;&gt; foo().y
[2]
</snippet></ROW><ROW><id>13913933</id><snippet>.__closure__</snippet></ROW><ROW><id>13913933</id><snippet>&gt;&gt;&gt; def spam(x):
...     def eggs():
...         return x
...     return eggs
... 
&gt;&gt;&gt; spam(1).__code__.co_freevars
('x',)
&gt;&gt;&gt; spam(1)()
1
&gt;&gt;&gt; spam(1).__closure__
&gt;&gt;&gt; spam(1).__closure__[0].cell_contents
1
&gt;&gt;&gt; spam(5).__closure__[0].cell_contents
5
</snippet></ROW><ROW><id>13913933</id><snippet>x</snippet></ROW><ROW><id>13913933</id><snippet>&gt;&gt;&gt; class Foo:
...     x = 5
...     def y(x):
...         return [x for i in range(1)]
...     y = y(x)
... 
&gt;&gt;&gt; Foo.y
[5]
</snippet></ROW><ROW><id>13913933</id><snippet>y</snippet></ROW><ROW><id>13913933</id><snippet>x</snippet></ROW><ROW><id>13913933</id><snippet>&gt;&gt;&gt; foo.__code__.co_consts[1].co_consts[2]
&lt;code object y at 0x10a5df5d0, file "&lt;stdin&gt;", line 4&gt;
&gt;&gt;&gt; foo.__code__.co_consts[1].co_consts[2].co_cellvars
('x',)
</snippet></ROW><ROW><id>13913933</id><snippet>__init__</snippet></ROW><ROW><id>13913933</id><snippet>def __init__(self):
    self.y = [self.x for i in range(1)]
</snippet></ROW><ROW><id>13913933</id><snippet>namedtuple</snippet></ROW><ROW><id>13913933</id><snippet>from collections import namedtuple
State = namedtuple('State', ['name', 'capital'])

class StateDatabase:
    db = [State(*args) for args in [
       ('Alabama', 'Montgomery'),
       ('Alaska', 'Juneau'),
       # ...
    ]]
</snippet></ROW><ROW><id>13913969</id><snippet>f.write(" "*30)
</snippet></ROW><ROW><id>13913969</id><snippet>f.seek(0)
f.write(str(counter)+" primes")
</snippet></ROW><ROW><id>13913980</id><snippet>for hay in haystack:
  if needle in hay:
    return hay
</snippet></ROW><ROW><id>13913980</id><snippet>enumerate</snippet></ROW><ROW><id>13913980</id><snippet>for x, hay in enumerate(haystack):
  if needle in hay:
    return x
</snippet></ROW><ROW><id>13914057</id><snippet>class MyProtocol(protocol.Protocol):

    def connectionMade(self):
         print 'file descriptor is: ', self.transport.file.fileno()
</snippet></ROW><ROW><id>13914359</id><snippet>topics = list(topic.objects.filter(subject_id=subj_id).order_by('id').values())
</snippet></ROW><ROW><id>13914359</id><snippet>topics = list(Topic.objects.filter(subject_id=subj_id).order_by('id').values())
</snippet></ROW><ROW><id>13914370</id><snippet>br.load(url)</snippet></ROW><ROW><id>13914370</id><snippet>loop = QEventLoop()
br.loadFinished.connect(loop.quit)
loop.exec_() 
</snippet></ROW><ROW><id>13914370</id><snippet>Browser</snippet></ROW><ROW><id>13914370</id><snippet>loadFinished</snippet></ROW><ROW><id>13914370</id><snippet>QWebView</snippet></ROW><ROW><id>13914392</id><snippet>r~e~s~e~r~v~e~d~i~p</snippet></ROW><ROW><id>13914392</id><snippet>~</snippet></ROW><ROW><id>13914392</id><snippet>~r</snippet></ROW><ROW><id>13914392</id><snippet>~~</snippet></ROW><ROW><id>13914392</id><snippet>r</snippet></ROW><ROW><id>13914392</id><snippet>file file.txt
</snippet></ROW><ROW><id>13914392</id><snippet>file --mime-type --mime-encoding
</snippet></ROW><ROW><id>13914578</id><snippet>def islice_to_last(it):
    prev_value = next(it)
    for value in it:
        yield prev_value
        prev_value = value
</snippet></ROW><ROW><id>13914578</id><snippet>from collections import deque
import itertools as it

def islice_without_end(it, x):
    d = deque(it.islice(it, x))
    for value in it:
        yield d.popleft()
        d.append(value)
</snippet></ROW><ROW><id>13914668</id><snippet>date</snippet></ROW><ROW><id>13914668</id><snippet>datetime</snippet></ROW><ROW><id>13914668</id><snippet>date</snippet></ROW><ROW><id>13914668</id><snippet>datetime</snippet></ROW><ROW><id>13914668</id><snippet>los = ads - datetime.datetime.combine(dds, datetime.time.min)
</snippet></ROW><ROW><id>13914668</id><snippet>datetime.datetime.combine()</snippet></ROW><ROW><id>13914668</id><snippet>date</snippet></ROW><ROW><id>13914668</id><snippet>time</snippet></ROW><ROW><id>13914668</id><snippet>datetime</snippet></ROW><ROW><id>13914668</id><snippet>datetime.time.min</snippet></ROW><ROW><id>13914668</id><snippet>time</snippet></ROW><ROW><id>13914668</id><snippet>datetime</snippet></ROW><ROW><id>13914668</id><snippet>date</snippet></ROW><ROW><id>13914668</id><snippet>los = ads.date() - dds
</snippet></ROW><ROW><id>13914668</id><snippet>datetime.date()</snippet></ROW><ROW><id>13914668</id><snippet>datetime</snippet></ROW><ROW><id>13914668</id><snippet>datetime.timedelta()</snippet></ROW><ROW><id>13914711</id><snippet>itertools.count</snippet></ROW><ROW><id>13914711</id><snippet>import itertools
for x in itertools.count():
    print x
</snippet></ROW><ROW><id>13914711</id><snippet>while</snippet></ROW><ROW><id>13914711</id><snippet>x = 0
while True:
    print x
    x += 1
</snippet></ROW><ROW><id>13914885</id><snippet>title_data = Title.objects \
    .filter(language=language) \
    .filter(page__menuorder__menu__name=kwargs['menu']) \
    .order_by('page__menuorder__priority')
</snippet></ROW><ROW><id>13915124</id><snippet>s</snippet></ROW><ROW><id>13915124</id><snippet>sys.stdin.encoding</snippet></ROW><ROW><id>13915124</id><snippet>cp850</snippet></ROW><ROW><id>13915124</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdin.encoding
'cp850'
&gt;&gt;&gt; s = 'jklö'
&gt;&gt;&gt; u = u'äpoi'
&gt;&gt;&gt; s
'jkl\x94'
&gt;&gt;&gt; u
u'\xe4poi'
&gt;&gt;&gt; print unicode(s, 'cp850') + u
jklöäpoi
&gt;&gt;&gt; print (unicode(s, 'cp850') + u).encode('cp850')
jklöäpoi
</snippet></ROW><ROW><id>13915171</id><snippet>gen1</snippet></ROW><ROW><id>13915171</id><snippet>@dec
def gen1(x):
    def inner(x):
        if x &lt;= 10:
            yield x
            for v in inner(x + 1):
                yield v
    return inner(x)
</snippet></ROW><ROW><id>13915171</id><snippet>@dec
def gen1(x):
    for v in range(x, 11):
        yield v
</snippet></ROW><ROW><id>13915409</id><snippet>print sentence.split(" ")[4:10]
</snippet></ROW><ROW><id>13915409</id><snippet>&gt;&gt;&gt; print "Python is a programming language that lets you work more quickly \
       and integrate your systems more effectively. You can learn to use \
       Python and see almost immediate gains in productivity and lower \
       maintenance costs.".split(" ")[4:10]

['language', 'that', 'lets', 'you', 'work', 'more']
</snippet></ROW><ROW><id>13915647</id><snippet>import re

names = ['Chris', 'Jack', 'Kim']
target = ['Chris Smith', 'I hijacked this thread', 'Kim','Christmas is here', 'CHRIS']

regex_string = '|'.join(r"(?:\b"+re.escape(x)+r"\b)" for x in names)
print regex_string
regex = re.compile(regex_string,re.I)
print [t for t in target if regex.search(t)]
</snippet></ROW><ROW><id>13915647</id><snippet>new_names = set(name.lower() for name in names)
[ t for t in target if any(map(new_names.__contains__,t.lower().split())) ]
</snippet></ROW><ROW><id>13915647</id><snippet>any</snippet></ROW><ROW><id>13915647</id><snippet>any(x in new_names for x in t.lower().split())
</snippet></ROW><ROW><id>13915647</id><snippet>any(x.lower() in new_names for x in t.split())
</snippet></ROW><ROW><id>13915647</id><snippet>set.intersection</snippet></ROW><ROW><id>13915647</id><snippet>[ t for t in target if new_names.intersection(t.lower().split()) ]
</snippet></ROW><ROW><id>13915647</id><snippet>itertools.imap</snippet></ROW><ROW><id>13915647</id><snippet>map</snippet></ROW><ROW><id>13915647</id><snippet>str.split</snippet></ROW><ROW><id>13915786</id><snippet>win32api.SetConsoleCtrlHandler</snippet></ROW><ROW><id>13915869</id><snippet>scipy.stats.mstats</snippet></ROW><ROW><id>13915869</id><snippet>mstats</snippet></ROW><ROW><id>13915869</id><snippet>stats</snippet></ROW><ROW><id>13915869</id><snippet>chisquare</snippet></ROW><ROW><id>13915869</id><snippet>group2</snippet></ROW><ROW><id>13915869</id><snippet>group2</snippet></ROW><ROW><id>13915869</id><snippet>mstat</snippet></ROW><ROW><id>13916404</id><snippet>repr()</snippet></ROW><ROW><id>13916404</id><snippet>repr()</snippet></ROW><ROW><id>13916404</id><snippet>__repr__()</snippet></ROW><ROW><id>13916404</id><snippet>def __repr__(self):
    return '&lt;linge1Stop: name={0}&gt;'.format(self.name)
</snippet></ROW><ROW><id>13916525</id><snippet># list_a and list_b contain two different mappings between integer numbers
for line in file:
  words = re.findall("(\s*\S+)", line)
  a = int(words[0])
  b = int(words[5])
  c = list_a[a]
  d = list_b[b]
  modline = str(c).rjust(len(words[0])) + "".join(words[1:5]) + str(d).rjust(len(words[5])) + "".join(words[6:])
  print modline
</snippet></ROW><ROW><id>13916525</id><snippet>split</snippet></ROW><ROW><id>13916552</id><snippet>.__file__</snippet></ROW><ROW><id>13916552</id><snippet>.co_filename</snippet></ROW><ROW><id>13916552</id><snippet>getsourcefile()</snippet></ROW><ROW><id>13916552</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getsourcefile(inspect.getsourcefile)
'/usr/lib/python2.6/inspect.py'
</snippet></ROW><ROW><id>13916623</id><snippet>&gt;&gt;&gt; from jinja2 import Template
&gt;&gt;&gt; template = Template('Hello {{ name }}!')
&gt;&gt;&gt; for n in ["John", "Doe"]:
&gt;&gt;&gt;     with open(n + ".txt", "w") as f:
&gt;&gt;&gt;         print &gt;&gt; f, template.render(name=n)
</snippet></ROW><ROW><id>13916850</id><snippet>==</snippet></ROW><ROW><id>13916850</id><snippet>pip install django_modeltranslation==0.4.0-beta2
</snippet></ROW><ROW><id>13917192</id><snippet>desc</snippet></ROW><ROW><id>13917192</id><snippet>line</snippet></ROW><ROW><id>13917192</id><snippet>cursor.description</snippet></ROW><ROW><id>13917192</id><snippet>desc=[d[0] for d in cursor.description]
result=[dict(zip(desc, line)) for line in cursor]
</snippet></ROW><ROW><id>13917265</id><snippet>#define PYLIBMC_FLAG_ZLIB    (1 &lt;&lt; 3)</snippet></ROW><ROW><id>13917265</id><snippet>#define MEMC_VAL_COMPRESSED (1&lt;&lt;4)</snippet></ROW><ROW><id>13917265</id><snippet>#define MEMC_VAL_COMPRESSION_ZLIB (1&lt;&lt;5)</snippet></ROW><ROW><id>13917265</id><snippet>#define MEMC_VAL_COMPRESSION_FASTLZ (1&lt;&lt;6)</snippet></ROW><ROW><id>13917292</id><snippet>&gt;&gt;&gt; data = d[:, :, 0].astype(np.short)
&gt;&gt;&gt; data[data==-32768] = data[data&gt;0].min()
&gt;&gt;&gt; data = data.astype(np.float32)
</snippet></ROW><ROW><id>13917489</id><snippet>ZipFile.namelist()
Return a list of archive members by name.
</snippet></ROW><ROW><id>13917770</id><snippet>QtGui</snippet></ROW><ROW><id>13917955</id><snippet>self.session</snippet></ROW><ROW><id>13917955</id><snippet>self.request.session</snippet></ROW><ROW><id>13917955</id><snippet>self.session = self.request.session
</snippet></ROW><ROW><id>13917955</id><snippet>session</snippet></ROW><ROW><id>13917955</id><snippet> self.session.set_foo(42)
 self.request.session.get_foo() # returns 42
</snippet></ROW><ROW><id>13917955</id><snippet> self.session = another_session
</snippet></ROW><ROW><id>13917955</id><snippet>int</snippet></ROW><ROW><id>13917955</id><snippet>int</snippet></ROW><ROW><id>13917955</id><snippet>int</snippet></ROW><ROW><id>13918220</id><snippet>json.loads()</snippet></ROW><ROW><id>13918220</id><snippet>&gt;&gt;&gt; txt = u'\\u003c? abc ?\\u003eDas Modell des Adaptiven Zyklus wurde aus vergleichenden Untersuchungen zur Dynamik von \xd6kosystemen abgeleitet.\\u003c? /abc ?\\u003e'
&gt;&gt;&gt; content = txt.encode('utf8')
&gt;&gt;&gt; content
'\\u003c? abc ?\\u003eDas Modell des Adaptiven Zyklus wurde aus vergleichenden Untersuchungen zur Dynamik von \xc3\x96kosystemen abgeleitet.\\u003c? /abc ?\\u003e'
&gt;&gt;&gt; import json
&gt;&gt;&gt; json.loads('"{0}"'.format(content))
u'&lt;? abc ?&gt;Das Modell des Adaptiven Zyklus wurde aus vergleichenden Untersuchungen zur Dynamik von \xd6kosystemen abgeleitet.&lt;? /abc ?&gt;'
&gt;&gt;&gt; print json.loads('"{0}"'.format(content))
&lt;? abc ?&gt;Das Modell des Adaptiven Zyklus wurde aus vergleichenden Untersuchungen zur Dynamik von Ökosystemen abgeleitet.&lt;? /abc ?&gt;
</snippet></ROW><ROW><id>13918220</id><snippet>json.loads('"{0}"'.format(response.content))</snippet></ROW><ROW><id>13918220</id><snippet>\uxxxx</snippet></ROW><ROW><id>13918220</id><snippet>import re

uescapes = re.compile(r'(?&lt;!\\)\\u[0-9a-fA-F]{4}', re.UNICODE)
def uescape_decode(match): return match.group().decode('unicode_escape')

uescapes.sub(uescape_decode, response.text)
</snippet></ROW><ROW><id>13918220</id><snippet>\uxxxx</snippet></ROW><ROW><id>13918220</id><snippet>\</snippet></ROW><ROW><id>13918220</id><snippet>\\uxxxx</snippet></ROW><ROW><id>13918220</id><snippet>&gt;&gt;&gt; print uescapes.sub(uescape_decode, txt)
&lt;?abc len="12"?&gt;Resilienz sollte als ständiger Anpassungsprozess zwischen Systemen und der Umwelt begriffen werden.&lt;? /abc ?&gt;
&gt;&gt;&gt; print uescapes.sub(uescape_decode, u'\\u003c? abc ?\\u003eDas Modell des Adaptiven Zyklus wurde aus vergleichenden Untersuchungen zur Dynamik von \xd6kosystemen abgeleitet.\\u003c? /abc ?\\u003e')
&lt;? abc ?&gt;Das Modell des Adaptiven Zyklus wurde aus vergleichenden Untersuchungen zur Dynamik von Ökosystemen abgeleitet.&lt;? /abc ?&gt;
</snippet></ROW><ROW><id>13918610</id><snippet>/Applications/Python 2.7</snippet></ROW><ROW><id>13918657</id><snippet>layout.mustache</snippet></ROW><ROW><id>13918657</id><snippet>&lt;html&gt;
   &lt;body&gt;
     {{&gt; body}}
  &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>13918657</id><snippet>body.mustache</snippet></ROW><ROW><id>13918657</id><snippet>&lt;section&gt;
    {{name}}
&lt;/section&gt;
</snippet></ROW><ROW><id>13918657</id><snippet>.mustache</snippet></ROW><ROW><id>13918657</id><snippet>&gt;&gt;&gt; import pystache
&gt;&gt;&gt; renderer = pystache.Renderer()
&gt;&gt;&gt; renderer.render_path('layout.mustache', {'name': 'test'})
u'&lt;html&gt;\r\n   &lt;body&gt;\r\n     &lt;section&gt;\r\n         test\r\n     ...'
</snippet></ROW><ROW><id>13918742</id><snippet>IInterface(instance)</snippet></ROW><ROW><id>13918742</id><snippet>instance</snippet></ROW><ROW><id>13918742</id><snippet>IInterface</snippet></ROW><ROW><id>13918742</id><snippet>&gt;&gt;&gt; import zope.interface
&gt;&gt;&gt; class IFoo(zope.interface.Interface):
...     pass
... 
&gt;&gt;&gt; class Foo(object):
...     zope.interface.implements(IFoo)
...     pass
... 
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; IFoo(foo)
&lt;__main__.Foo object at 0x10eed22d0&gt;
&gt;&gt;&gt; IFoo.providedBy(foo)
True
</snippet></ROW><ROW><id>13918742</id><snippet>getAdapter()</snippet></ROW><ROW><id>13918742</id><snippet>IInterface</snippet></ROW><ROW><id>13918747</id><snippet>FinishedList = ([[None]*(Cluster_Number)])*((len(FileValuelist)))
</snippet></ROW><ROW><id>13918747</id><snippet>[None, None, None... None]</snippet></ROW><ROW><id>13918747</id><snippet>len(FileValuelist)</snippet></ROW><ROW><id>13918747</id><snippet>*</snippet></ROW><ROW><id>13918747</id><snippet>FinishedList = [[None] * Cluster_Number for _ in xrange(len(FileValuelist))]
</snippet></ROW><ROW><id>13918874</id><snippet>d</snippet></ROW><ROW><id>13918874</id><snippet>d = 11
</snippet></ROW><ROW><id>13918874</id><snippet>d</snippet></ROW><ROW><id>13918874</id><snippet>d[x] = 10 + x
</snippet></ROW><ROW><id>13918874</id><snippet>[x]</snippet></ROW><ROW><id>13918874</id><snippet>d.__setitem__(x, 10 + x)
</snippet></ROW><ROW><id>13918874</id><snippet>d</snippet></ROW><ROW><id>13918874</id><snippet>d</snippet></ROW><ROW><id>13918938</id><snippet>headers = {"Content-Type": "text", "Authorization": "Client-ID YOUR_CLIENT_ID"}
r = requests.get("https://...", headers=headers, verify=False)
</snippet></ROW><ROW><id>13919067</id><snippet>Employer(last_name, first_name, address, phone, email)
</snippet></ROW><ROW><id>13919067</id><snippet>Employer</snippet></ROW><ROW><id>13919067</id><snippet>__init__()</snippet></ROW><ROW><id>13919067</id><snippet>Intern</snippet></ROW><ROW><id>13919067</id><snippet>Employer.__init__(self, last_name, first_name, address, phone, email)
</snippet></ROW><ROW><id>13919067</id><snippet>super(Intern, self).__init__(last_name, first_name, address, phone, email)
</snippet></ROW><ROW><id>13919198</id><snippet>class Child(models.Model):
  name = models.CharField(max_length=80)

class Foo(models.Model):
  bar = models.ManyToManyField(Child, related_name="bar")
  baz = models.ManyToManyField(Child, related_name="baz")
</snippet></ROW><ROW><id>13919198</id><snippet>foo_set</snippet></ROW><ROW><id>13919198</id><snippet>Child</snippet></ROW><ROW><id>13919198</id><snippet>Child</snippet></ROW><ROW><id>13919198</id><snippet>c</snippet></ROW><ROW><id>13919198</id><snippet>Foo</snippet></ROW><ROW><id>13919198</id><snippet>c.bar.all()</snippet></ROW><ROW><id>13919198</id><snippet>c.baz.all()</snippet></ROW><ROW><id>13919198</id><snippet>+</snippet></ROW><ROW><id>13919198</id><snippet>class Foo(models.Model):
  bar = models.ManyToManyField(Child, related_name="bar+")
  baz = models.ManyToManyField(Child, related_name="baz+")
</snippet></ROW><ROW><id>13919393</id><snippet>xrange()</snippet></ROW><ROW><id>13919393</id><snippet>int</snippet></ROW><ROW><id>13919393</id><snippet>list</snippet></ROW><ROW><id>13919393</id><snippet>len()</snippet></ROW><ROW><id>13919393</id><snippet>for p in xrange(len(Dsr)):
                ^^^
</snippet></ROW><ROW><id>13919393</id><snippet>In [7]: Dsr = numpy.array([59.10346189206572, 40.4211078871491, 37.22898098099725])

In [8]: Dsr / Dsr.max()
Out[8]: array([ 1.        ,  0.68390423,  0.6298951 ])
</snippet></ROW><ROW><id>13919534</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

url = # put url here
page = urllib2.urlopen(url)
text = page.read()
page.close()
soup = BeautifulSoup(text)

L = []
for x in soup.findAll('li'):
    link = x.a
    if link.has_key('title'):
        if len(link['title']) == 4:
            L.append(link['title'])
print L
</snippet></ROW><ROW><id>13919698</id><snippet>try:
    # Assume you get multiline text
    lines = text.splitlines()
except AttributeError:
    # If your assumption was wrong, then you should already have a list
    lines = text
</snippet></ROW><ROW><id>13919715</id><snippet>input("choose the age of", param["name"], " :\n" )</snippet></ROW><ROW><id>13919715</id><snippet>input("choose the age of "+ param["name"]+ "  :\n" )</snippet></ROW><ROW><id>13919715</id><snippet>input("choose the age of %s:\n" % param["name"])</snippet></ROW><ROW><id>13919715</id><snippet>input()</snippet></ROW><ROW><id>13919715</id><snippet>print</snippet></ROW><ROW><id>13919882</id><snippet>count_line = 0
for n, line in enumerate(open('test.txt')):
    count_line = count_line +1
    fields = line.rstrip('\n').split('\t')
    ##print count_line, fields
    already_text = open('test_words.txt').read() if n &gt; 0 else ''
    file = open('test_words.txt', 'w+')
    count_word = 0
    file.write(already_text)
    for words in fields:
        wordsplit = words.split()
        for word in wordsplit:
             count_word = count_word + 1
             print count_word, word
             file.write(str(count_word) + " " + word + '\n')
        file.close()
</snippet></ROW><ROW><id>13919882</id><snippet>enumerate()</snippet></ROW><ROW><id>13919882</id><snippet>count_line = 0
n = 0
for line in open('test.txt'):
    count_line = count_line +1
    fields = line.rstrip('\n').split('\t')
    ##print count_line, fields
    already_text = open('test_words.txt').read() if n &gt; 0 else ''
    file = open('test_words.txt', 'w+')
    count_word = 0
    file.write(already_text)
    for words in fields:
        wordsplit = words.split()
        for word in wordsplit:
             count_word = count_word + 1
             print count_word, word
             file.write(str(count_word) + " " + word + '\n')
        file.close()
    n += 1
</snippet></ROW><ROW><id>13919883</id><snippet>isinstance()</snippet></ROW><ROW><id>13919883</id><snippet>isinstance</snippet></ROW><ROW><id>13919883</id><snippet>try: iter(object)</snippet></ROW><ROW><id>13919883</id><snippet>except TypeError: # not iterable</snippet></ROW><ROW><id>13919883</id><snippet>isinstance()</snippet></ROW><ROW><id>13919883</id><snippet>Paintable</snippet></ROW><ROW><id>13919883</id><snippet>Printable</snippet></ROW><ROW><id>13919883</id><snippet>zope.interface</snippet></ROW><ROW><id>13919883</id><snippet>if IFrobnarIterable.providedBy(yourobject):
    # it'll support iteration and yield Frobnars.
</snippet></ROW><ROW><id>13919883</id><snippet>class FrobnarsXMLExport(object):
    adapts(IFrobnarIterable)
    provides(IXMLExport)

    def __init__(self, frobnariterator):
        self.frobnars = frobnariterator

    def export(self):
        entries = []
        for frobnar in self.frobnars:
            entries.append(
                u'&lt;frobnar&gt;&lt;width&gt;{0}&lt;/width&gt;&lt;height&gt;{0}&lt;/height&gt;&lt;/frobnar&gt;'.format(
                    frobnar.width, frobnar.height)
        return u''.join(entries)
</snippet></ROW><ROW><id>13919883</id><snippet>for obj in setofobjects:
    self.result.append(IXMLExport(obj).export())
</snippet></ROW><ROW><id>13919918</id><snippet>os.path.join</snippet></ROW><ROW><id>13919918</id><snippet>subprocess.call(["/bin/cp", "-a",
    os.path.join(MOST_POPULAR_REPORTS_LOCATION, MOST_POPULAR_REPORTS_FILE), 
        TEMP_DATA_FILE_LOCATION])
</snippet></ROW><ROW><id>13919964</id><snippet>.zip</snippet></ROW><ROW><id>13919964</id><snippet>.tar.gz</snippet></ROW><ROW><id>13920256</id><snippet>&gt;&gt;&gt; catalog = [('abc', '123'), ('foo', '456'), ('bar', '789'), ('test', '1337')]
&gt;&gt;&gt; names, vals = zip(*catalog)
&gt;&gt;&gt; names
('abc', 'foo', 'bar', 'test')
&gt;&gt;&gt; vals
('123', '456', '789', '1337')
</snippet></ROW><ROW><id>13920256</id><snippet>*catalog</snippet></ROW><ROW><id>13920256</id><snippet>zip(*catalog)</snippet></ROW><ROW><id>13920256</id><snippet>zip(catalog[0], catalog[1], catalog[2], ...)</snippet></ROW><ROW><id>13920256</id><snippet>zip()</snippet></ROW><ROW><id>13920256</id><snippet>catalog</snippet></ROW><ROW><id>13920256</id><snippet>catalog</snippet></ROW><ROW><id>13920256</id><snippet>zip()</snippet></ROW><ROW><id>13920256</id><snippet>In [1]: catalog = [(i, i+1) for i in range(1000000)]

In [2]: def with_zip():
   ...:     return zip(*catalog)
   ...: 

In [3]: def without_zip():
   ...:     names, vals = [], []
   ...:     for name, val in catalog:
   ...:         names.append(name)
   ...:         vals.append(val)
   ...:     return names, vals
   ...: 

In [4]: %timeit with_zip()
1 loops, best of 3: 176 ms per loop

In [5]: %timeit without_zip()
1 loops, best of 3: 250 ms per loop
</snippet></ROW><ROW><id>13920376</id><snippet>QTreeView</snippet></ROW><ROW><id>13920376</id><snippet>QAbstractItemView</snippet></ROW><ROW><id>13920376</id><snippet>selmodel = self.listing.selectionModel()
selmodel.selectionChanged.connect(self.handleSelectionChanged)
</snippet></ROW><ROW><id>13920376</id><snippet>def handleSelectionChanged(self, selected, deselected):
    indexes = selected.indexes()
    if indexes:
        print('row: %d' % indexes[0].row())
</snippet></ROW><ROW><id>13920376</id><snippet>selected</snippet></ROW><ROW><id>13920376</id><snippet>deselected</snippet></ROW><ROW><id>13920427</id><snippet>Request</snippet></ROW><ROW><id>13920427</id><snippet>import urllib2
import simplejson as json

opener = urllib2.build_opener()
req = urllib2.Request('http://localhost:8000', data=json.dumps({'a': 'b'}),
      headers={'Content-Type': 'application/json'})
response = opener.open(req)
</snippet></ROW><ROW><id>13920995</id><snippet>raw_input</snippet></ROW><ROW><id>13920995</id><snippet>TypeError</snippet></ROW><ROW><id>13920995</id><snippet>number_uno(int(z))
</snippet></ROW><ROW><id>13921078</id><snippet>@route</snippet></ROW><ROW><id>13921078</id><snippet>@app.route('/&lt;path:url&gt;')
def getdata(url):
    ...
</snippet></ROW><ROW><id>13921144</id><snippet>if ((number != 1) or 2):
</snippet></ROW><ROW><id>13921144</id><snippet>2</snippet></ROW><ROW><id>13921144</id><snippet>if number not in (1, 2):
</snippet></ROW><ROW><id>13921156</id><snippet>def specType(SpT):
    return '{}{}'.format('MLTY'[int(SpT//10)], SpT % 10) if 0.0 &lt;= SpT &lt;= 39.9 else SpT
</snippet></ROW><ROW><id>13921156</id><snippet>&gt;&gt;&gt; specType(0.0)
'M0.0'
&gt;&gt;&gt; specType(8.1)
'M8.1'
&gt;&gt;&gt; specType(14.5)
'L4.5'
&gt;&gt;&gt; specType(22.3)
'T2.3'
&gt;&gt;&gt; specType(34.7)
'Y4.7'
</snippet></ROW><ROW><id>13921648</id><snippet>timeout</snippet></ROW><ROW><id>13921648</id><snippet>while True:
    ready = readable, writable, exceptional = select.select(inputs, outputs,
                                                            inputs, 30.0)
        if not any(ready):
            #timeout condition
        else:
            #iterate over the ready lists as appropriate
</snippet></ROW><ROW><id>13921674</id><snippet>df.shape</snippet></ROW><ROW><id>13921674</id><snippet>df</snippet></ROW><ROW><id>13921702</id><snippet>def info(title):
    print(title)
    print('module name:', __name__)
    if hasattr(os, 'getppid'):  # only available on Unix
        print('parent process:', os.getppid())
    print('process id:', os.getpid())


def startServer(inDebug, port):
    print "Starting Main Mock Server"
    app.run(debug=inDebug, port=port)


def startProxyServer(inDebug, port):
    print "Starting JSONP Mock Server Proxy"
    appJsonp.run(debug=inDebug, port=jsonpPort)


if __name__ == '__main__':
    info('Main Line Starting')
    p = mp.Process(target=startServer, args=(False, port))
    p.deamon = True
    p.start()
    p1 = mp.Process(target=startProxyServer, args=(False, port))
    p1.deamon = True
    p1.start()
    p.join()
    p1.join()
</snippet></ROW><ROW><id>13921718</id><snippet>def CountNumbers(txt):
    sum = 0

    for n in txt:
        if n.isdigit():
            sum += 1

    if sum:
        print("Text has", sum, "digit(s)")
    else:
        print ("Text does not contain digits")


CountNumbers(input("Write some text: "))
</snippet></ROW><ROW><id>13921930</id><snippet>json</snippet></ROW><ROW><id>13921930</id><snippet>import urllib2
import json

response = urllib2.urlopen('https://api.instagram.com/v1/tags/pizza/media/XXXXXX')
data = json.load(response)   
print data
</snippet></ROW><ROW><id>13922228</id><snippet>some_exeption</snippet></ROW><ROW><id>13922228</id><snippet>&gt;&gt;&gt; try:
...     try:
...         raise AttributeError('foo')
...     except AttributeError as e:
...         print 'caught', e
... except AttributeError as e:
...     print 'caught the same exception again?', e
... 
caught foo
</snippet></ROW><ROW><id>13922228</id><snippet>except</snippet></ROW><ROW><id>13922228</id><snippet>&gt;&gt;&gt; try:
...     try:
...         raise AttributeError('foo')
...     except AttributeError as e:
...         print 'caught', e
...         raise e
... except AttributeError as e:
...     print 'caught the same exception again?', e
... 
caught foo
caught the same exception again? foo
</snippet></ROW><ROW><id>13922253</id><snippet>(40, 40, 500, 3)</snippet></ROW><ROW><id>13922253</id><snippet>[a, b, c]</snippet></ROW><ROW><id>13922253</id><snippet>a = np.array([2.468000, 0.000000, 0.000000]).reshape(1, 1, 1, 3)
b = np.array([-1.234000, 2.137351, 0.000000]).reshape(1, 1, 1, 3)
c = np.array([0.000000, 0.000000, 32.000000]).reshape(1, 1, 1, 3)
A = np.linspace(0, 1, num=40).reshape(40, 1, 1, 1)
B = np.linspace(0, 1, num=40).reshape(1, 40, 1, 1)
C = np.linspace(0, 1, num=500).reshape(1, 1, 500, 1)
grid = a * A + b * B + c * C
</snippet></ROW><ROW><id>13922264</id><snippet>page.decode("utf-8")</snippet></ROW><ROW><id>13922264</id><snippet>unicode(page, "utf-8")</snippet></ROW><ROW><id>13922264</id><snippet>encode</snippet></ROW><ROW><id>13922264</id><snippet>decode</snippet></ROW><ROW><id>13922264</id><snippet>cmd</snippet></ROW><ROW><id>13922264</id><snippet>cmd</snippet></ROW><ROW><id>13922264</id><snippet>&gt;&gt;&gt; print page.decode('windows-1252')
ZmysÅ‚owska, Magdalena

&gt;&gt;&gt; print repr(page.decode('windows-1252'))
u'Zmys\xc5\u201aowska, Magdalena'
</snippet></ROW><ROW><id>13922264</id><snippet>print page.decode("utf-8") # of unicode(page, "utf-8")
</snippet></ROW><ROW><id>13922264</id><snippet>print page.decode("utf-8").encode("windows-1252")
print page.decode("utf-8").encode(sys.getdefaultencoding())
</snippet></ROW><ROW><id>13922264</id><snippet>decode</snippet></ROW><ROW><id>13922264</id><snippet>upage = page.decode("utf-8")
upage = unicodedata.normalize("NFKD", upage)
page = upage.encode("utf-8", "ignore")

print upage
</snippet></ROW><ROW><id>13922353</id><snippet>import dj_database_url
DATABASES['default'] =  dj_database_url.config(default='postgres://&lt;user&gt;:&lt;password&gt;@localhost:5432/&lt;name&gt;')
</snippet></ROW><ROW><id>13922353</id><snippet>import dj_database_url
DATABASES['default'] =  dj_database_url.config()
</snippet></ROW><ROW><id>13922353</id><snippet>python manage.py runserver
</snippet></ROW><ROW><id>13922353</id><snippet>ImportError: DLL load failed: %1 is not a valid Win32 application.
</snippet></ROW><ROW><id>13922353</id><snippet>easy_install http://www.stickpeople.com/projects/python/win-psycopg/psycopg2-2.4.5.win-amd64-py2.7-pg9.1.3-release.exe
</snippet></ROW><ROW><id>13922368</id><snippet>begin-base64 644 data.xml.gz</snippet></ROW><ROW><id>13922368</id><snippet>b1 = '''begin-base64 644 data.xml.gz\nH4sIAAAAAAAAA y9a4 lx3Hn
d6fguB7JzNuGZkNigNfdrAGbMAYaXeNfbPolXplYiRSIFu'''

b2 = '''\nH4sIAAAAAAAAA y9a4 lx3Hn
d6fguB7JzNuGZkNigNfdrAGbMAYaXeNfbPolXplYiRSIFu'''
</snippet></ROW><ROW><id>13922368</id><snippet>m\xe8"\x9d\xb6\xac{\xae
</snippet></ROW><ROW><id>13922368</id><snippet>m</snippet></ROW><ROW><id>13922368</id><snippet>b2</snippet></ROW><ROW><id>13922368</id><snippet>\x1f\x8b\x08\x00\x00\x00
</snippet></ROW><ROW><id>13922368</id><snippet>'\n'</snippet></ROW><ROW><id>13922368</id><snippet>'\\n'</snippet></ROW><ROW><id>13922368</id><snippet>r'\n'</snippet></ROW><ROW><id>13922368</id><snippet>'\n'</snippet></ROW><ROW><id>13922368</id><snippet>translate(dict(zip(map(ord, u'-_'), u'+/')))</snippet></ROW><ROW><id>13922368</id><snippet>altchars</snippet></ROW><ROW><id>13922368</id><snippet>b64decode</snippet></ROW><ROW><id>13922368</id><snippet>translate</snippet></ROW><ROW><id>13922368</id><snippet>replace</snippet></ROW><ROW><id>13922368</id><snippet>translate</snippet></ROW><ROW><id>13922368</id><snippet>data = '''begin-base64 644 data.xml.gz\nH4sIAAAAAAAAA y9a4 lx3Hn
d6fguB7JzNuGZkNigNfdrAGbMAYaXeNfbPolXplYiRSIFu'''
_, data = data.split('\n', 1)
padding_factor = (4 - len(data) % 4) % 4
data += "="*padding_factor
data_decoded = base64.b64decode(data, '-_')
</snippet></ROW><ROW><id>13922368</id><snippet>'\\n'</snippet></ROW><ROW><id>13922368</id><snippet>'\n'</snippet></ROW><ROW><id>13922368</id><snippet>split</snippet></ROW><ROW><id>13922405</id><snippet>result = methodtocall(*[param1, ... ,paramN])
</snippet></ROW><ROW><id>13922475</id><snippet>getWidth</snippet></ROW><ROW><id>13922475</id><snippet>def getWidth(self, num_characters):
    """ Returns the approximate width of a cell. """
    return int((1+num_characters) * 384)
</snippet></ROW><ROW><id>13922475</id><snippet>lower</snippet></ROW><ROW><id>13922475</id><snippet>my_cell_value = "THIS IS ALL CAPS!"
my_worksheet.write(1,1,my_cell_value.lower())
</snippet></ROW><ROW><id>13922483</id><snippet>list</snippet></ROW><ROW><id>13922483</id><snippet>generator</snippet></ROW><ROW><id>13922483</id><snippet>csv.reader</snippet></ROW><ROW><id>13922483</id><snippet>list(generator)</snippet></ROW><ROW><id>13922483</id><snippet>list(generator)</snippet></ROW><ROW><id>13922483</id><snippet>myCSV = list(csv.reader(open('myFile.txt','rb'),dialect='excel'))
print(len(myCSV))
print(myCSV)
</snippet></ROW><ROW><id>13922568</id><snippet>self.phones</snippet></ROW><ROW><id>13922568</id><snippet>person</snippet></ROW><ROW><id>13922568</id><snippet>class person(object):
    def __init__(self):
        self.name = ""
        self.age = ""
        self.phones = []
    def add_phone(self, number):
        self.phones.append(number)
</snippet></ROW><ROW><id>13922715</id><snippet>from cms.app_base import CMSApp
from cms.apphook_pool import apphook_pool
from django.utils.translation import ugettext_lazy as _

class EventsApphook(CMSApp):
    name = _("Event")
    urls = ["App.apps.event.urls"]
apphook_pool.register(EventsApphook)
</snippet></ROW><ROW><id>13922715</id><snippet>from cms.menu_bases import CMSAttachMenu
from menus.base import NavigationNode
from menus.menu_pool import menu_pool
from django.utils.translation import ugettext_lazy as _

menuNodes = []

class EventMenu(CMSAttachMenu):
    name = _("Event Sub-Menu")
    def get_nodes(self, request):
        return menuNodes
menu_pool.register_menu(EventMenu)

def add_menu_node(text, url):
    # only add a given url once
    if len(list(n for n in menuNodes if n.url == url)) == 0:
        menuNodes.append(NavigationNode(text, url, 1 + len(menuNodes), 0))
        menu_pool.clear()
</snippet></ROW><ROW><id>13922715</id><snippet>from django.views.generic.detail import DetailView
from django.core.urlresolvers import reverse
from django.utils.translation import ugettext_lazy as _
from App.apps.event.menu import add_menu_node
from App.apps.event.models import Event

class EventMenuMixin(object):
    def get_context_data(self, **kwargs):
        context = super(EventMenuMixin, self).get_context_data(**kwargs)
        member = self.request.user

        if 'pk' in self.kwargs.keys():
            event = Event.objects.get(id=self.kwargs['pk'])
            if event.is_registered_to_event(member):
                add_menu_node(_('Unregister from this event'), reverse("unregister_from_event"))
            else:
                add_menu_node(_('Register to participate in this event'), reverse("register_to_event", args=(self.kwargs['pk'])))

        add_menu_node(_("Create new events"), reverse("admin:event_event_add"))
        return context

class EventDetailView(EventMenuMixin, DetailView):
    model = Event
    template_name = 'event/event_detail.html'
    context_object_name = 'event'
</snippet></ROW><ROW><id>13922797</id><snippet>import random
s = random.randint(0, 2**10000 - 1)
</snippet></ROW><ROW><id>13922797</id><snippet>s &amp; (1 &lt;&lt; x)  # is bit x set?
</snippet></ROW><ROW><id>13922797</id><snippet>from bitstring import BitArray
b = BitArray(uint=s, length=10000)
p, = b.find('0b000000')
if b[99]:
    b[100] = False
...
</snippet></ROW><ROW><id>13922838</id><snippet>s.lower</snippet></ROW><ROW><id>13922838</id><snippet>unicode.lower()</snippet></ROW><ROW><id>13922838</id><snippet>lower()</snippet></ROW><ROW><id>13922838</id><snippet>Stringy</snippet></ROW><ROW><id>13922838</id><snippet>def lower(self):
    return Stringy(unicode.lower(self))
</snippet></ROW><ROW><id>13922947</id><snippet>__getitem__</snippet></ROW><ROW><id>13922947</id><snippet>__setitem__</snippet></ROW><ROW><id>13922947</id><snippet>x = a[...]  #call a.__getitem__(...)
a[...] = x  #call a.__setitem__(...)
del a[...]  #call a.__delitem__(...)
</snippet></ROW><ROW><id>13922947</id><snippet>self</snippet></ROW><ROW><id>13922947</id><snippet>a</snippet></ROW><ROW><id>13922947</id><snippet>self</snippet></ROW><ROW><id>13922947</id><snippet>self</snippet></ROW><ROW><id>13922952</id><snippet>datetime</snippet></ROW><ROW><id>13922952</id><snippet>time_vec = [datetime.strp(str(x),'%Y%m%d%H') for x in data['time'])
plot(time_vec,data['count'])
</snippet></ROW><ROW><id>13923112</id><snippet>os.path.expanduser('~')</snippet></ROW><ROW><id>13923112</id><snippet>home = os.path.expanduser('~')
f = tkFileDialog.askopenfile(initialdir = home)
</snippet></ROW><ROW><id>13923221</id><snippet>DELETE /frobnication/1</snippet></ROW><ROW><id>13923221</id><snippet>PUT /frobnication/1</snippet></ROW><ROW><id>13923221</id><snippet>POST /frobnication/1</snippet></ROW><ROW><id>13923312</id><snippet>In [91]: lprun -f stack.foo1 AA.apply(stack.foo1, B=B, axis=1)
Timer unit: 1e-06 s

File: stack.py
Function: foo1 at line 4
Total time: 0.006651 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     4                                           def foo1(row, B):
     5         6         6158   1026.3     92.6      subset = B.ix[row[0]].ts
     6         6          418     69.7      6.3      idx = np.searchsorted(subset, row[2])
     7         6           56      9.3      0.8      val = subset.irow(idx)
     8         6           19      3.2      0.3      return val
</snippet></ROW><ROW><id>13923312</id><snippet>In [102]: timeit B.ix['a']
10000 loops, best of 3: 122 us per loop

In [103]: timeit dct['a']
10000000 loops, best of 3: 53.2 ns per loop
</snippet></ROW><ROW><id>13923312</id><snippet>In [5]: CC = AA.merge(B, left_on='a', right_index=True)

In [6]: CC[CC.ts_x &lt;= CC.ts_y].groupby(['a', 'b']).first()
Out[6]: 
     ts_x  ts_y
a b            
a x     4     4
  y     6     7
  z     5     5
b x     4     7
  z     5     7
c y     6     8
</snippet></ROW><ROW><id>13923430</id><snippet>eval</snippet></ROW><ROW><id>13923430</id><snippet>eval(expr, globals(), mycontext)</snippet></ROW><ROW><id>13923430</id><snippet>eval(expr, mycontext)</snippet></ROW><ROW><id>13923430</id><snippet>self</snippet></ROW><ROW><id>13923430</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__(self):
...         self.bar = 3
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; eval('a', globals(), foo.__dict__)
3
</snippet></ROW><ROW><id>13923430</id><snippet>__dict__</snippet></ROW><ROW><id>13923430</id><snippet>&gt;&gt;&gt; class Foo(object):
...     @staticmethod
...     def bar():
...         return 3
&gt;&gt;&gt; foo = Foo()
&gt;&gt;&gt; eval('bar()', globals(), foo.__dict__)
NameError: name 'bar' is not defined
&gt;&gt;&gt; eval('bar()', globals(), {k: getattr(foo, k) for k in dir(foo)}
3
</snippet></ROW><ROW><id>13923430</id><snippet>eval</snippet></ROW><ROW><id>13923430</id><snippet>&gt;&gt;&gt; foo = {
...     'bar': lambda: 3
... }
&gt;&gt;&gt; eval('bar()', globals(), foo)
</snippet></ROW><ROW><id>13923430</id><snippet>&gt;&gt;&gt; def bar():
...     return 3
&gt;&gt;&gt; foo = {
...     'bar': bar
... }
&gt;&gt;&gt; eval('bar()', globals(), foo)
</snippet></ROW><ROW><id>13923762</id><snippet>lxml.etree</snippet></ROW><ROW><id>13923762</id><snippet>lxml-3.0.2.win-amd64-py3.3.‌exe</snippet></ROW><ROW><id>13923929</id><snippet>OrderedDict</snippet></ROW><ROW><id>13923929</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; 
&gt;&gt;&gt; ol = [('n2', 9), ('n1', 3)]
&gt;&gt;&gt; dc = OrderedDict(ol)
&gt;&gt;&gt; dc
OrderedDict([('n2', 9), ('n1', 3)])
</snippet></ROW><ROW><id>13924036</id><snippet>list()</snippet></ROW><ROW><id>13924036</id><snippet>sorted(data.items())[:]</snippet></ROW><ROW><id>13924036</id><snippet>In [7]: print sorted.__doc__
sorted(iterable, cmp=None, key=None, reverse=False) --&gt; new sorted list

In [8]: lis=[1,2,3]

In [9]: lis
Out[9]: [1, 2, 3]

In [10]: list(lis)    #same result, but different object. (A shallow copy)
Out[10]: [1, 2, 3]
</snippet></ROW><ROW><id>13924036</id><snippet>list()</snippet></ROW><ROW><id>13924036</id><snippet>iterator</snippet></ROW><ROW><id>13924036</id><snippet>In [11]: y=xrange(5)

In [12]: y
Out[12]: xrange(5)

In [13]: list(y)
Out[13]: [0, 1, 2, 3, 4]
</snippet></ROW><ROW><id>13924144</id><snippet>end_timestamp = start_timestamp + 5 * 60 * 60
</snippet></ROW><ROW><id>13924281</id><snippet>with open('in.csv', 'r') as infile, open('out.csv', 'w') as outfile:
    reader = csv.reader(infile)
    writer = csv.writer(outfile, delimiter='\t', quoting=csv.QUOTE_ALL)
    writer.writerows(reader)
</snippet></ROW><ROW><id>13924281</id><snippet>    for line in reader:
        writer.writerow(line)
</snippet></ROW><ROW><id>13924400</id><snippet>import Tkinter as tk
import threading
import random
import time
from Queue import Queue, Empty

root = tk.Tk()
time_label = tk.Label(root, text='&lt;unknown&gt; seconds')
volt_label = tk.Label(root, text='&lt;unknown&gt; volts')
time_label.pack()
volt_label.pack()

def DAQ(q):
    while True:
        q.put((time.time(), random.randrange(100)))
        time.sleep(2)

def update_data(queue, root):
    try:
        timestamp, volts = queue.get_nowait()
    except Empty:
        pass
    else:
        time_label.config(text='{:.1f} seconds'.format(timestamp))
        volt_label.config(text='{:.4f} volts'.format(volts))
    root.after(100, update_data, queue, root)

data_queue = Queue()
t = threading.Thread(target=DAQ, args=(data_queue,))
t.daemon = True
t.start()
update_data(data_queue, root)
root.mainloop()
</snippet></ROW><ROW><id>13924472</id><snippet>'1 -3 10 6 5 0 3 -5 2'</snippet></ROW><ROW><id>13924472</id><snippet>list</snippet></ROW><ROW><id>13924472</id><snippet>.close()</snippet></ROW><ROW><id>13924472</id><snippet>with</snippet></ROW><ROW><id>13924472</id><snippet>fname = input("Please enter the name of the file you wish to open:" )
with open(fname) as f:
    for line in f:
        a = [int(num) for num in line.split()]
        print a
</snippet></ROW><ROW><id>13924509</id><snippet>md5</snippet></ROW><ROW><id>13924509</id><snippet>QString</snippet></ROW><ROW><id>13924509</id><snippet>ascii</snippet></ROW><ROW><id>13924509</id><snippet>&gt;&gt;&gt; print hashlib.md5("hello").hexdigest()
5d41402abc4b2a76b9719d911017c592
&gt;&gt;&gt; print hashlib.md5(u"hello").hexdigest()
5d41402abc4b2a76b9719d911017c592
</snippet></ROW><ROW><id>13924509</id><snippet>QString</snippet></ROW><ROW><id>13924509</id><snippet>&gt;&gt;&gt; a=PyQt4.QtCore.QString("hello")
&gt;&gt;&gt; print hashlib.md5(a).hexdigest()
a6f145a01ad0127e555c051d15806eb5
</snippet></ROW><ROW><id>13924509</id><snippet>ascii</snippet></ROW><ROW><id>13924509</id><snippet>&gt;&gt;&gt; print hashlib.md5(a.toUtf8()).hexdigest()
5d41402abc4b2a76b9719d911017c592
&gt;&gt;&gt; print hashlib.md5(a.toLatin1()).hexdigest()
5d41402abc4b2a76b9719d911017c592
</snippet></ROW><ROW><id>13924509</id><snippet>QString</snippet></ROW><ROW><id>13924509</id><snippet>&gt;&gt;&gt; print hashlib.md5(u'hello'.encode('utf_16')).hexdigest()
25af7f84a93a6cf5cb00967c60910c7d
</snippet></ROW><ROW><id>13924509</id><snippet>hashlib</snippet></ROW><ROW><id>13924509</id><snippet>QString</snippet></ROW><ROW><id>13924509</id><snippet>QString</snippet></ROW><ROW><id>13924559</id><snippet>RawConfigParser</snippet></ROW><ROW><id>13924559</id><snippet>import configparser

class ConfigParserMultiOpt(configparser.RawConfigParser):
  """ConfigParser allowing duplicate keys. Values are stored in a list"""

  def __init__(self):
    configparser.RawConfigParser.__init__(self, empty_lines_in_values=False, strict=False)

  def _read(self, fp, fpname):
    """Parse a sectioned configuration file.

    Each section in a configuration file contains a header, indicated by
    a name in square brackets (`[]'), plus key/value options, indicated by
    `name' and `value' delimited with a specific substring (`=' or `:' by
    default).

    Values can span multiple lines, as long as they are indented deeper
    than the first line of the value. Depending on the parser's mode, blank
    lines may be treated as parts of multiline values or ignored.

    Configuration files may include comments, prefixed by specific
    characters (`#' and `;' by default). Comments may appear on their own
    in an otherwise empty line or may be entered in lines holding values or
    section names.
    """
    elements_added = set()
    cursect = None                        # None, or a dictionary
    sectname = None
    optname = None
    lineno = 0
    indent_level = 0
    e = None                              # None, or an exception
    for lineno, line in enumerate(fp, start=1):
      comment_start = None
      # strip inline comments
      for prefix in self._inline_comment_prefixes:
        index = line.find(prefix)
        if index == 0 or (index &gt; 0 and line[index-1].isspace()):
          comment_start = index
          break
      # strip full line comments
      for prefix in self._comment_prefixes:
        if line.strip().startswith(prefix):
          comment_start = 0
          break
      value = line[:comment_start].strip()
      if not value:
        if self._empty_lines_in_values:
          # add empty line to the value, but only if there was no
          # comment on the line
          if (comment_start is None and
              cursect is not None and
              optname and
              cursect[optname] is not None):
              cursect[optname].append('') # newlines added at join
        else:
          # empty line marks end of value
          indent_level = sys.maxsize
        continue
      # continuation line?
      first_nonspace = self.NONSPACECRE.search(line)
      cur_indent_level = first_nonspace.start() if first_nonspace else 0
      if (cursect is not None and optname and
          cur_indent_level &gt; indent_level):
          cursect[optname].append(value)
      # a section header or option header?
      else:
        indent_level = cur_indent_level
        # is it a section header?
        mo = self.SECTCRE.match(value)
        if mo:
          sectname = mo.group('header')
          if sectname in self._sections:
            if self._strict and sectname in elements_added:
              raise DuplicateSectionError(sectname, fpname,
                                          lineno)
            cursect = self._sections[sectname]
            elements_added.add(sectname)
          elif sectname == self.default_section:
            cursect = self._defaults
          else:
            cursect = self._dict()
            self._sections[sectname] = cursect
            self._proxies[sectname] = configparser.SectionProxy(self, sectname)
            elements_added.add(sectname)
          # So sections can't start with a continuation line
          optname = None
        # no section header in the file?
        elif cursect is None:
          raise MissingSectionHeaderError(fpname, lineno, line)
        # an option line?
        else:
          mo = self._optcre.match(value)
          if mo:
            optname, vi, optval = mo.group('option', 'vi', 'value')
            if not optname:
              e = self._handle_error(e, fpname, lineno, line)
            optname = self.optionxform(optname.rstrip())
            if (self._strict and
              (sectname, optname) in elements_added):
              raise configparser.DuplicateOptionError(sectname, optname, fpname, lineno)
            elements_added.add((sectname, optname))
            # This check is fine because the OPTCRE cannot
            # match if it would set optval to None
            if optval is not None:
              optval = optval.strip()
              # Check if this optname already exists
              if (optname in cursect) and (cursect[optname] is not None):
                # If it does, convert it to a tuple if it isn't already one
                if not isinstance(cursect[optname], tuple):
                  cursect[optname] = tuple(cursect[optname])
                cursect[optname] = cursect[optname] + tuple([optval])
              else:
                cursect[optname] = [optval]
            else:
                # valueless option handling
                cursect[optname] = None
          else:
            # a non-fatal parsing error occurred. set up the
            # exception but keep going. the exception will be
            # raised at the end of the file and will contain a
            # list of all bogus lines
            e = self._handle_error(e, fpname, lineno, line)
    # if any parsing errors occurred, raise an exception
    if e:
        raise e
    self._join_multiline_values()
</snippet></ROW><ROW><id>13924559</id><snippet>_read</snippet></ROW><ROW><id>13924559</id><snippet>configparser.py</snippet></ROW><ROW><id>13924559</id><snippet>if</snippet></ROW><ROW><id>13924559</id><snippet>optval = optval.strip()</snippet></ROW><ROW><id>13924559</id><snippet>ConfigParserMultiOpt</snippet></ROW><ROW><id>13924559</id><snippet>tuple</snippet></ROW><ROW><id>13924658</id><snippet>python-dap</snippet></ROW><ROW><id>13924658</id><snippet>import pkg_resources</snippet></ROW><ROW><id>13924658</id><snippet>dap</snippet></ROW><ROW><id>13924658</id><snippet>/usr/lib/python2.7/dist-packages/dap-2.2.6.7.egg-info/namespace_packages.txt</snippet></ROW><ROW><id>13924758</id><snippet>print(('['), (dr+1), (']\t'), (d[dr] if fullpath else '['), (dr+1), (']\t'), (d[dr].split("/")[len(d[dr].split("/"))-2]), sep='')
</snippet></ROW><ROW><id>13924758</id><snippet>print(*(('[',dr+1,']\t', d[dr]) if fullpath else ('[',dr+1,']\t', d[dr].split("/")[len(d[dr].split("/"))-2])), sep='')
</snippet></ROW><ROW><id>13924889</id><snippet>extracting_columns</snippet></ROW><ROW><id>13924889</id><snippet>'OH'</snippet></ROW><ROW><id>13924889</id><snippet>for (el,mul) in specie:</snippet></ROW><ROW><id>13924889</id><snippet>'O'</snippet></ROW><ROW><id>13924889</id><snippet>(el, mul)</snippet></ROW><ROW><id>13924889</id><snippet>print</snippet></ROW><ROW><id>13924889</id><snippet>def extracting_columns(specie, elements):
  species_vector=zeros(len(elements))
  print(specie)
  for (el,mul) in specie:
    species_vector[elements.index(el)]=mul
  return species_vector
</snippet></ROW><ROW><id>13924889</id><snippet>extracting_columns</snippet></ROW><ROW><id>13924889</id><snippet>'OH'</snippet></ROW><ROW><id>13924889</id><snippet>print</snippet></ROW><ROW><id>13924889</id><snippet>def equations(specie,elements):
  vectors=[]
  print(specie)
  for x in specie:
    print(x)
    vector=extracting_columns(x,elements)
    vectors.append(vector)
</snippet></ROW><ROW><id>13924889</id><snippet>specie</snippet></ROW><ROW><id>13924889</id><snippet>['OH', 'CO2', 'c3o3', 'H2O3', 'CO', 'C3H1']</snippet></ROW><ROW><id>13924889</id><snippet>'OH'</snippet></ROW><ROW><id>13924889</id><snippet>extracting_columns</snippet></ROW><ROW><id>13924889</id><snippet>parse_formula</snippet></ROW><ROW><id>13924889</id><snippet>'OH'</snippet></ROW><ROW><id>13924889</id><snippet>[('O', 1.0), ('H', 1.0)]</snippet></ROW><ROW><id>13924889</id><snippet>equations</snippet></ROW><ROW><id>13924889</id><snippet>def equations(specie, elements):
  vectors=[]
  for x in specie:
    formula = parse_formula(x)
    vector=extracting_columns(formula, elements)
    vectors.append(vector)
</snippet></ROW><ROW><id>13924957</id><snippet>Modules</snippet></ROW><ROW><id>13924957</id><snippet>foo.c</snippet></ROW><ROW><id>13924957</id><snippet>foomodule.c</snippet></ROW><ROW><id>13924957</id><snippet>Lib</snippet></ROW><ROW><id>13924957</id><snippet>foo.py</snippet></ROW><ROW><id>13924957</id><snippet>heapq</snippet></ROW><ROW><id>13924957</id><snippet>heapq</snippet></ROW><ROW><id>13924957</id><snippet>Lib/heapq.py</snippet></ROW><ROW><id>13924957</id><snippet>_heapq</snippet></ROW><ROW><id>13924957</id><snippet>Modules/_heapqmodule.c</snippet></ROW><ROW><id>13925150</id><snippet>import pandas as pd
import numpy as np
import datetime as DT

nan = np.nan

trades = pd.DataFrame({'ticker' : ['IBM', 'MSFT', 'GOOG', 'AAPL'],
                       'date' : pd.date_range('1/1/2000', periods = 4), 
                       'cusip' : [nan, nan, 100, nan]
                       })
trades = trades.set_index(['ticker', 'date'])
print(trades)
#                    cusip
# ticker date             
# IBM    2000-01-01    NaN
# MSFT   2000-01-02    NaN
# GOOG   2000-01-03    100  # &lt;-- We do not want to overwrite this
# AAPL   2000-01-04    NaN

config = pd.DataFrame({'ticker' : ['IBM', 'MSFT', 'GOOG', 'AAPL'],
                       'date' : pd.date_range('1/1/2000', periods = 4),
                       'cusip' : [1,2,3,nan]})
config = config.set_index(['ticker', 'date'])

# Let's permute the index to show `DataFrame.update` correctly matches rows based on the index, not on the order of the rows.
new_index = sorted(config.index)
config = config.reindex(new_index)    
print(config)
#                    cusip
# ticker date             
# AAPL   2000-01-04    NaN
# GOOG   2000-01-03      3
# IBM    2000-01-01      1
# MSFT   2000-01-02      2
</snippet></ROW><ROW><id>13925150</id><snippet>trades</snippet></ROW><ROW><id>13925150</id><snippet>config</snippet></ROW><ROW><id>13925150</id><snippet>DataFrame.update</snippet></ROW><ROW><id>13925150</id><snippet>DataFrame.update</snippet></ROW><ROW><id>13925150</id><snippet>set_index</snippet></ROW><ROW><id>13925150</id><snippet>trades.update(config, join = 'left', overwrite = False)
print(trades)

#                    cusip
# ticker date             
# IBM    2000-01-01      1
# MSFT   2000-01-02      2
# GOOG   2000-01-03    100 # If overwrite = True, then 100 is overwritten by 3.
# AAPL   2000-01-04    NaN
</snippet></ROW><ROW><id>13925392</id><snippet>list</snippet></ROW><ROW><id>13925392</id><snippet>sequence type</snippet></ROW><ROW><id>13925392</id><snippet>mutable sequence type</snippet></ROW><ROW><id>13925392</id><snippet>iterable</snippet></ROW><ROW><id>13925392</id><snippet>heapq</snippet></ROW><ROW><id>13925392</id><snippet>list</snippet></ROW><ROW><id>13925392</id><snippet>_heapqmodule.c</snippet></ROW><ROW><id>13925392</id><snippet>heapify</snippet></ROW><ROW><id>13925392</id><snippet>PyList_Check</snippet></ROW><ROW><id>13925392</id><snippet>list</snippet></ROW><ROW><id>13925392</id><snippet>list</snippet></ROW><ROW><id>13925392</id><snippet>list</snippet></ROW><ROW><id>13925392</id><snippet>PyList_GETSIZE</snippet></ROW><ROW><id>13925392</id><snippet>_siftup</snippet></ROW><ROW><id>13925392</id><snippet>PyList_GET_ITEM</snippet></ROW><ROW><id>13925392</id><snippet>PyList_SET_ITEM</snippet></ROW><ROW><id>13925392</id><snippet>list</snippet></ROW><ROW><id>13925392</id><snippet>list</snippet></ROW><ROW><id>13925392</id><snippet>heapq</snippet></ROW><ROW><id>13925392</id><snippet>from _heapq import *</snippet></ROW><ROW><id>13925392</id><snippet>List2</snippet></ROW><ROW><id>13925392</id><snippet>heapq</snippet></ROW><ROW><id>13925392</id><snippet>_heapqmodule.c</snippet></ROW><ROW><id>13925392</id><snippet>PyList_FOO</snippet></ROW><ROW><id>13925392</id><snippet>PySequence_Foo</snippet></ROW><ROW><id>13925392</id><snippet>PyList_SIZE</snippet></ROW><ROW><id>13925392</id><snippet>PySequence_Size</snippet></ROW><ROW><id>13925392</id><snippet>PyList_GETITEM</snippet></ROW><ROW><id>13925392</id><snippet>PySequence-&gt;GetItem</snippet></ROW><ROW><id>13925392</id><snippet>myheapq.py</snippet></ROW><ROW><id>13925392</id><snippet>import _myheapq</snippet></ROW><ROW><id>13925392</id><snippet>import _heapq</snippet></ROW><ROW><id>13925392</id><snippet>__getitem__</snippet></ROW><ROW><id>13925392</id><snippet>__setitem__</snippet></ROW><ROW><id>13925446</id><snippet>result</snippet></ROW><ROW><id>13925446</id><snippet>def equations(specie, elements):
    result = []
    for x in specie:
        formula = parse_formula(x)
        result.append(extracting_columns(formula, elements))
    return np.array(result)
</snippet></ROW><ROW><id>13925446</id><snippet>import numpy as np
import re

def equations(specie, elements):
    result = []
    for x in specie:
        formula = parse_formula(x)
        result.append(extracting_columns(formula, elements))
    return np.array(result)

def extracting_columns(formula, elements):
    return [formula.get(e, 0) for e in elements]

def parse_formula(formula):
    elts = iter(re.split(r'([A-Z][a-z]*)',formula)[1:])
    return {element:toint(num) for element, num in zip(*[elts]*2)}

def toint(num):
    try:
        return int(num)
    except ValueError:
        return 1

print(equations(['OH', 'CO2','C3O3','H2O3','CO','C3H1'], ['H', 'C', 'O']))
</snippet></ROW><ROW><id>13925446</id><snippet>[[1 0 1]
 [0 1 2]
 [0 3 3]
 [2 0 3]
 [0 1 1]
 [1 3 0]]
</snippet></ROW><ROW><id>13925532</id><snippet>Request</snippet></ROW><ROW><id>13925532</id><snippet>class</snippet></ROW><ROW><id>13925532</id><snippet>Request</snippet></ROW><ROW><id>13925532</id><snippet>myreqeust</snippet></ROW><ROW><id>13925532</id><snippet>Scrapy</snippet></ROW><ROW><id>13925551</id><snippet>from os import listdir
from os.path import isfile, join
files = [ f for f in listdir(mypath) if isfile(join(mypath,f)) ]
</snippet></ROW><ROW><id>13925551</id><snippet>if file == files[-1]: # do stuff
</snippet></ROW><ROW><id>13925551</id><snippet>files</snippet></ROW><ROW><id>13925558</id><snippet>runGame</snippet></ROW><ROW><id>13925558</id><snippet>__init__</snippet></ROW><ROW><id>13925558</id><snippet>self.runGame</snippet></ROW><ROW><id>13925558</id><snippet>runGame</snippet></ROW><ROW><id>13925558</id><snippet>self.runGame</snippet></ROW><ROW><id>13925558</id><snippet>self.fps</snippet></ROW><ROW><id>13925558</id><snippet>draw</snippet></ROW><ROW><id>13925558</id><snippet>import pygame
from pygame.locals import *
from pygame import Color


class Game():
    """ Lets try to get this going by simple steps
    One by one. First step, lets figure how to make a class
    that can do the display stuff. Lord have mercy on my soul"""



def __init__(self, wi=256, hi=224, multii=3):
    """Initialization"""
    pygame.init()
    self.width      = wi*multii
    self.height     = hi*multii
    self.spritesize = 16*multii
    self.clock      = pygame.time.Clock()
    self.fps        = self.clock.get_fps()
    self.screen     = pygame.display.set_mode((self.width, self.height))
    self.runGame = True # I've moved the runGame decleration

def mainLoop(self):
    """Loop through the main game routines
    1. Drawing  2. Input handling  3. Updating
    Then loop through it until user quits"""
    while self.runGame:
        self.clock.tick(12)
        self.draw()
        self.event()

def events(self):
    """Time to handle some events"""
    events = pygame.event.get()
    for e in events:
        print e
        if (e.type == pygame.QUIT) or 
        (e.type == KEYDOWN and e.key == K_ESCAPE):
            self.runGame = False


def draw(self):
    """Draw and update the main screen"""
    self.screen.fill(Color('red'))
    self.fps = self.clock.get_fps() # I reupdate the FPS counter
    pygame.display.set_caption('Grid2. FPS: '+str(self.fps))
    pygame.display.update()


game = Game()
game.mainLoop()
</snippet></ROW><ROW><id>13925665</id><snippet>In [659]: price = Series(index = ['Missouri', 'Ohio'], data = [200, 250])

In [660]: test1 = test.items

In [661]: test1.mul(price, axis='index')
Out[661]: 
year      2000  2001  2002  All
All        NaN   NaN   NaN  NaN
Missouri     0     0   200  200
Nevada     NaN   NaN   NaN  NaN
Ohio       250   250   250  750
</snippet></ROW><ROW><id>13925703</id><snippet>len(result.groups())
</snippet></ROW><ROW><id>13925919</id><snippet>findall</snippet></ROW><ROW><id>13925919</id><snippet>In [58]: re.findall(r'\d+%', text)
Out[58]: 
['3%', '3%', '3%', '7%', '7%', '10%', '10%', '10%', '11%', '50%', '75%', '77%',
'82%', '91%', '100%', '100%', '100%']
</snippet></ROW><ROW><id>13925919</id><snippet>\d+</snippet></ROW><ROW><id>13925919</id><snippet>\d*</snippet></ROW><ROW><id>13925919</id><snippet>%</snippet></ROW><ROW><id>13926005</id><snippet>BaseSpider</snippet></ROW><ROW><id>13926005</id><snippet>Rule</snippet></ROW><ROW><id>13926005</id><snippet>BaseSpider</snippet></ROW><ROW><id>13926005</id><snippet>CrawlSpider</snippet></ROW><ROW><id>13926005</id><snippet>from scrapy.contrib.spiders import CrawlSpider, Rule
</snippet></ROW><ROW><id>13926191</id><snippet>print map(lambda n: str(n) + '%', [3, 7, 8, 9, 50, 100])
</snippet></ROW><ROW><id>13926191</id><snippet>str1 = ', '.join(map(lambda n: str(n) + '%', [3, 7, 8, 9, 50, 100]))
</snippet></ROW><ROW><id>13926366</id><snippet>def interpolate_to_distance(self, distance):
    dshape = self.dist.shape
    dist = self.dist.T.reshape(-1, dshape[-1])
    data = self.data.T.reshape(-1, dshape[-1])
    intdata = np.array([np.interp(distance, di, da)
                        for di, da in zip(dist, data)])
    return intdata.reshape(dshape[0:2]).T
</snippet></ROW><ROW><id>13926366</id><snippet>%timeit</snippet></ROW><ROW><id>13926366</id><snippet>import numpy as np

class TestClass(object):
    def interpolate_to_distance(self, distance):
        dshape = self.dist.shape
        dist = self.dist.T.reshape(-1, dshape[-1])
        data = self.data.T.reshape(-1, dshape[-1])
        intdata = np.array([np.interp(distance, di, da)
                            for di, da in zip(dist, data)])
        return intdata.reshape(dshape[0:2]).T

    def interpolate_to_distance_old(self, distance):
        interpolated_data=np.ndarray(self.dist.shape[1:])
        for j in range(interpolated_data.shape[1]):
            for i in range(interpolated_data.shape[0]):
                interpolated_data[i,j]=np.interp(
                           distance,self.dist[:,i,j],self.data[:,i,j])
        return(interpolated_data)

if __name__ == '__main__':
    testobj = TestClass()

    testobj.dist = np.random.randn(3, 3, 3)
    testobj.data = np.random.randn(3, 3, 3)

    distance = 0
    print 'Old:\n', testobj.interpolate_to_distance_old(distance)
    print 'New:\n', testobj.interpolate_to_distance(distance)
</snippet></ROW><ROW><id>13926366</id><snippet>Old:
[[-0.59557042 -0.42706077  0.94629049]
 [ 0.55509032 -0.67808257 -0.74214045]
 [ 1.03779189 -1.17605275  0.00317679]]
New:
[[-0.59557042 -0.42706077  0.94629049]
 [ 0.55509032 -0.67808257 -0.74214045]
 [ 1.03779189 -1.17605275  0.00317679]]
</snippet></ROW><ROW><id>13926366</id><snippet>np.vectorize(np.interp)</snippet></ROW><ROW><id>13926366</id><snippet>np.fromfunction</snippet></ROW><ROW><id>13926366</id><snippet>np.interp</snippet></ROW><ROW><id>13926366</id><snippet>np.mgrid</snippet></ROW><ROW><id>13926366</id><snippet>np.interp</snippet></ROW><ROW><id>13926366</id><snippet>np.interp</snippet></ROW><ROW><id>13926366</id><snippet>xp</snippet></ROW><ROW><id>13926366</id><snippet>xp</snippet></ROW><ROW><id>13926366</id><snippet>np.all(np.diff(xp) &gt; 0)
</snippet></ROW><ROW><id>13926469</id><snippet>setdefault</snippet></ROW><ROW><id>13926469</id><snippet>mydict.setdefault(upperkey, {})[index+1] = value
</snippet></ROW><ROW><id>13927019</id><snippet>import sys, time
print

pers = [3, 7, 10, 11, 50, 75, 77, 82, 91, 100]
for per in pers:
    sys.stdout.write('\r[%s&gt;%s]' % (
        ('=' * ((per / 2) -1)), ' '*(50-(per/2)))
    )
    sys.stdout.flush()
    time.sleep(0.5)

print
print 
</snippet></ROW><ROW><id>13927019</id><snippet>time.sleep(0.5)</snippet></ROW><ROW><id>13927098</id><snippet>NameError: global name 'the_global' is not defined
</snippet></ROW><ROW><id>13927098</id><snippet>classes.py</snippet></ROW><ROW><id>13927098</id><snippet>the_global</snippet></ROW><ROW><id>13927098</id><snippet>classes.py</snippet></ROW><ROW><id>13927196</id><snippet>&gt;&gt;&gt; os.path.join('foo', *['a','b'])
'foo/a/b'
</snippet></ROW><ROW><id>13927220</id><snippet>elif</snippet></ROW><ROW><id>13927220</id><snippet>else if</snippet></ROW><ROW><id>13927220</id><snippet>else if:
cigars &gt;= 40 and cigars =&lt; 60:
</snippet></ROW><ROW><id>13927220</id><snippet>elif cigars &gt;= 40 and cigars &lt;= 60:
    return True
</snippet></ROW><ROW><id>13927220</id><snippet>&lt;=</snippet></ROW><ROW><id>13927613</id><snippet>users.py</snippet></ROW><ROW><id>13927613</id><snippet>users.py</snippet></ROW><ROW><id>13927613</id><snippet>users = open(os.path.join(os.path.expanduser('~'), '_MyProgram', 'users.py'))
</snippet></ROW><ROW><id>13927613</id><snippet>data_files</snippet></ROW><ROW><id>13927667</id><snippet>MySoc</snippet></ROW><ROW><id>13927667</id><snippet>initgui</snippet></ROW><ROW><id>13927667</id><snippet>initgui</snippet></ROW><ROW><id>13927667</id><snippet>...
self.soc = MySoc(txt);
...
</snippet></ROW><ROW><id>13927817</id><snippet>latest()</snippet></ROW><ROW><id>13927817</id><snippet>order_by(model._meta.get_latest_by)</snippet></ROW><ROW><id>13927817</id><snippet>Foo.objects.order_by('-date')[:3]
</snippet></ROW><ROW><id>13927817</id><snippet>id</snippet></ROW><ROW><id>13927817</id><snippet>Foo.objects.order_by('-id')[:3]
</snippet></ROW><ROW><id>13927817</id><snippet>...LIMIT 3</snippet></ROW><ROW><id>13928029</id><snippet>import re

replchars = re.compile(r'[\n\r]')
def replchars_to_hex(match):
    return r'\x{0:02x}'.format(ord(match.group()))

replchars.sub(replchars_to_hex, inputtext)
</snippet></ROW><ROW><id>13928029</id><snippet>\x</snippet></ROW><ROW><id>13928029</id><snippet>&gt;&gt;&gt; inputtext = 'Some example containing a newline.\nRight there.\n'
&gt;&gt;&gt; replchars.sub(replchars_to_hex, inputtext)
'Some example containing a newline.\\x0aRight there.\\x0a'
&gt;&gt;&gt; print(replchars.sub(replchars_to_hex, inputtext))
Some example containing a newline.\x0aRight there.\x0a
</snippet></ROW><ROW><id>13928198</id><snippet>for location in locations:
    try:
        try_to_connect(location)
        break
    except IOError:
        continue
else:
    # this else is optional
    # executes some code if none of the locations is valid
    # for example raise an Error as suggested @eumiro
</snippet></ROW><ROW><id>13928198</id><snippet>else</snippet></ROW><ROW><id>13928629</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>13928629</id><snippet>items(..)</snippet></ROW><ROW><id>13928629</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>13928629</id><snippet>QGraphicsScene</snippet></ROW><ROW><id>13928694</id><snippet>fruits</snippet></ROW><ROW><id>13928694</id><snippet>itertools.groupby</snippet></ROW><ROW><id>13928694</id><snippet>from itertools import groupby
from operator import itemgetter

def fruitfilter(fruits):
    for fruit, group in groupby(fruits, key=itemgetter(0)):
        yield max(group, key=itemgetter(2))

fruits = list(fruitfilter(fruits))
</snippet></ROW><ROW><id>13928694</id><snippet>[max(group, key=itemgetter(2)) for fruit, group in groupby(fruits, itemgetter(0))]
</snippet></ROW><ROW><id>13928694</id><snippet>fruits</snippet></ROW><ROW><id>13928694</id><snippet>sorted(fruits, key=(itemgetter(0), -itemgetter(2))</snippet></ROW><ROW><id>13928694</id><snippet>groupby</snippet></ROW><ROW><id>13928694</id><snippet>def fruitfilter(fruits):
    sortedfruits = sorted(fruits, key=(itemgetter(0), -itemgetter(2)))
    for fruit, group in groupby(sortedfruits, key=itemgetter(0)):
        yield next(group)

fruits = list(fruitfilter(fruits))
</snippet></ROW><ROW><id>13928784</id><snippet>&gt;&gt;&gt; s = "applebanana"
&gt;&gt;&gt; splits = [(s[:i], s[i:]) for i in range(1,len(s))]
&gt;&gt;&gt; splits
[('a', 'pplebanana'), ('ap', 'plebanana'), ('app', 'lebanana'), 
 ('appl', 'ebanana'), ('apple', 'banana'), ('appleb', 'anana'), 
 ('appleba', 'nana'), ('appleban', 'ana'), ('applebana', 'na'), 
('applebanan', 'a')]
&gt;&gt;&gt; any((eng.check(item[0]) and eng.check(item[1])) for item in splits)
True
</snippet></ROW><ROW><id>13928819</id><snippet>pixmap=</snippet></ROW><ROW><id>13928819</id><snippet>open_hand_px = QtGui.QPixmap('open_hand.png')
open_hand_px.setMask(open_hand_px.mask())
open_hand_cursor = QtGui.QCursor(open_hand_px)
self.setCursor(open_hand_cursor)
</snippet></ROW><ROW><id>13928907</id><snippet>&gt;&gt;&gt; import HTMLParser
&gt;&gt;&gt; parser = HTMLParser.HTMLParser()
&gt;&gt;&gt; parser.unescape('é')
u'\xe9'
&gt;&gt;&gt; print parser.unescape('é')
é
</snippet></ROW><ROW><id>13928907</id><snippet>import html.parser</snippet></ROW><ROW><id>13929552</id><snippet>In [31]: E = [(random.randrange(0,1000),random.randrange(0,1000)) for _ in range(1470000)]

In [32]: %timeit max([e[0] for e in E]), max([e[1] for e in E])
1 loops, best of 3: 319 ms per loop

In [33]: %timeit max(e[0] for e in E), max(e[1] for e in E)
1 loops, best of 3: 343 ms per loop

In [36]: %timeit max(E, key=operator.itemgetter(0)), max(E, key=operator.itemgetter(1))
1 loops, best of 3: 314 ms per loop

In [38]: %timeit list(map(max, zip(*E)))
1 loops, best of 3: 307 ms per loop
</snippet></ROW><ROW><id>13929552</id><snippet>In [39]: import numpy as np

In [40]: EE = np.array(E)

In [46]: %timeit EE.max(axis=0)
100 loops, best of 3: 3.21 ms per loop
</snippet></ROW><ROW><id>13929552</id><snippet>numpy.max()</snippet></ROW><ROW><id>13929909</id><snippet>=</snippet></ROW><ROW><id>13929909</id><snippet>output = re.sub(r'(?&lt;!=)=(=+)(.*?)=\1(?!=)', r'\1\2\1', input)
</snippet></ROW><ROW><id>13929909</id><snippet>(?&lt;!=)  # make sure there is no preceding =
=       # match a literal =
(       # start capturing group 1
  =+    # match one or more =
)       # end capturing group 1
(       # start capturing group 2
  .*?   # match zero or more characters, but as few as possible (due to ?)
)       # end capturing group 2
=       # match a =
\1      # match exactly what was matched with group 1 (i.e. the same amount of =)
(?!=)   # make sure there is no trailing =
</snippet></ROW><ROW><id>13930121</id><snippet>plot_date</snippet></ROW><ROW><id>13930121</id><snippet>plot_date(df.index, df.data)
</snippet></ROW><ROW><id>13930568</id><snippet>user = models.ForeignKey(User, blank=True, null=True, on_delete=models.SET_NULL)
</snippet></ROW><ROW><id>13931071</id><snippet>get_FOO_display</snippet></ROW><ROW><id>13931071</id><snippet>super</snippet></ROW><ROW><id>13931071</id><snippet>unit</snippet></ROW><ROW><id>13931071</id><snippet>contribute_to_class</snippet></ROW><ROW><id>13931096</id><snippet>socket.error</snippet></ROW><ROW><id>13931096</id><snippet>socket.gaierror</snippet></ROW><ROW><id>13931096</id><snippet>socket.error</snippet></ROW><ROW><id>13931208</id><snippet>from tinymce.models import HTMLField

class MyModel(models.Model):
    text = HTMLField()
</snippet></ROW><ROW><id>13931361</id><snippet>class Form(models.Model):
    ...
    category = models.ForeignKey(Category)
</snippet></ROW><ROW><id>13931361</id><snippet>&lt;ul&gt;
    {% for c in Category_Name %}
    &lt;li&gt;{{ c.Name }}
        &lt;ul&gt;
        {% for form in c.form_set.all %}
        &lt;li&gt;&lt;a href="/forms/{{ form.id }}"&gt;{{ form.Title }}&lt;/a&gt;&lt;/li&gt;
        {% endfor %}
        &lt;/ul&gt;
    &lt;/li&gt;
    {% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>13931361</id><snippet>from django.shortcuts import render

def homepage (request):
    categories = Category.objects.all()
    return render(request, 'forms/home.html', 
       {'categories': categories})
</snippet></ROW><ROW><id>13931862</id><snippet>dis</snippet></ROW><ROW><id>13931862</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; def test(x, y):
...     x, y = y, x
... 
&gt;&gt;&gt; dis.dis(test)
  2           0 LOAD_FAST                1 (y)
              3 LOAD_FAST                0 (x)
              6 ROT_TWO             
              7 STORE_FAST               0 (x)
             10 STORE_FAST               1 (y)
             13 LOAD_CONST               0 (None)
             16 RETURN_VALUE     
</snippet></ROW><ROW><id>13931862</id><snippet>ROT_TWO</snippet></ROW><ROW><id>13931877</id><snippet>iterp1d</snippet></ROW><ROW><id>13931877</id><snippet>import pandas as pd
import numpy as np
from scipy.interpolate import interp1d

df = pd.DataFrame([np.arange(1, 6), [1, 8, 27, np.nan, 125]]).T

In [5]: df
Out[5]: 
   0    1
0  1    1
1  2    8
2  3   27
3  4  NaN
4  5  125

df2 = df.dropna() # interpolate on the non nan
f = interp1d(df2[0], df2[1], kind='cubic')
#f(4) == array(63.9999999999992)

df[1] = df[0].apply(f)

In [10]: df
Out[10]: 
   0    1
0  1    1
1  2    8
2  3   27
3  4   64
4  5  125
</snippet></ROW><ROW><id>13931877</id><snippet>y</snippet></ROW><ROW><id>13932042</id><snippet>socket.gethostname</snippet></ROW><ROW><id>13932042</id><snippet>socket.getfqdn</snippet></ROW><ROW><id>13932042</id><snippet>gethostname</snippet></ROW><ROW><id>13932483</id><snippet>def __init__(self):
    '''Initialise the class with useful data'''

    self.wordsDict = {1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five', 6: 'six', 7: 'seven',
                      8: 'eight', 9: 'nine', 10: 'ten', 11: 'eleven', 12: 'twelve', 13: 'thirteen',
                      14: 'fourteen', 15: 'fifteen', 16: 'sixteen', 17: 'seventeen',
                      18: 'eighteen', 19: 'nineteen', 20: 'twenty', 30: 'thirty', 40: 'forty',
                      50: 'fifty', 60: 'sixty', 70: 'seventy', 80: 'eighty', 90: 'ninty' }

    self.powerNameList = ['thousand', 'lac', 'crore']


def convertNumberToWords(self, number):

    # Check if there is decimal in the number. If Yes process them as paisa part.
    formString = str(number)
    if formString.find('.') != -1:
        withoutDecimal, decimalPart = formString.split('.')

        paisaPart =  str(round(float(formString), 2)).split('.')[1]
        inPaisa = self._formulateDoubleDigitWords(paisaPart)

        formString, formNumber = str(withoutDecimal), int(withoutDecimal)
    else:
        # Process the number part without decimal separately
        formNumber = int(number)
        inPaisa = None

    if not formNumber:
        return 'zero'

    self._validateNumber(formString, formNumber)

    inRupees = self._convertNumberToWords(formString)

    if inPaisa:
        return 'Rs. %s and %s paisa' % (inRupees.title(), inPaisa.title())
    else:
        return 'Rs. %s' % inRupees.title()


def _validateNumber(self, formString, formNumber):

    assert formString.isdigit()

    # Developed to provide words upto 999999999
    if formNumber &gt; 999999999 or formNumber &lt; 0:
        raise AssertionError('Out Of range')


def _convertNumberToWords(self, formString):

    MSBs, hundredthPlace, teens = self._getGroupOfNumbers(formString)

    wordsList = self._convertGroupsToWords(MSBs, hundredthPlace, teens)

    return ' '.join(wordsList)


def _getGroupOfNumbers(self, formString):

    hundredthPlace, teens = formString[-3:-2], formString[-2:]

    msbUnformattedList = list(formString[:-3])

    #---------------------------------------------------------------------#

    MSBs = []
    tempstr = ''
    for num in msbUnformattedList[::-1]:
        tempstr = '%s%s' % (num, tempstr)
        if len(tempstr) == 2:
            MSBs.insert(0, tempstr)
            tempstr = ''
    if tempstr:
        MSBs.insert(0, tempstr)

    #---------------------------------------------------------------------#

    return MSBs, hundredthPlace, teens


def _convertGroupsToWords(self, MSBs, hundredthPlace, teens):

    wordList = []

    #---------------------------------------------------------------------#
    if teens:
        teens = int(teens)
        tensUnitsInWords = self._formulateDoubleDigitWords(teens)
        if tensUnitsInWords:
            wordList.insert(0, tensUnitsInWords)

    #---------------------------------------------------------------------#
    if hundredthPlace:
        hundredthPlace = int(hundredthPlace)
        if not hundredthPlace:
            # Might be zero. Ignore.
            pass
        else:
            hundredsInWords = '%s hundred' % self.wordsDict[hundredthPlace]
            wordList.insert(0, hundredsInWords)

    #---------------------------------------------------------------------#
    if MSBs:
        MSBs.reverse()

        for idx, item in enumerate(MSBs):
            inWords = self._formulateDoubleDigitWords(item)
            if inWords:
                inWordsWithDenomination = '%s %s' % (inWords, self.powerNameList[idx])
                wordList.insert(0, inWordsWithDenomination)

    #---------------------------------------------------------------------#
    return wordList


def _formulateDoubleDigitWords(self, doubleDigit):

    if not int(doubleDigit):
        # Might be zero. Ignore.
        return None
    elif self.wordsDict.has_key(int(doubleDigit)):
        # Global dict has the key for this number
        tensInWords = self.wordsDict[int(doubleDigit)]
        return tensInWords
    else:
        doubleDigitStr = str(doubleDigit)
        tens, units = int(doubleDigitStr[0])*10, int(doubleDigitStr[1])
        tensUnitsInWords = '%s %s' % (self.wordsDict[tens], self.wordsDict[units])
        return tensUnitsInWords
</snippet></ROW><ROW><id>13932483</id><snippet>wGenerator = Number2Words()
print wGenerator.convertNumberToWords(100000)
</snippet></ROW><ROW><id>13932581</id><snippet>a = 'abc'</snippet></ROW><ROW><id>13932581</id><snippet>b = 'abc'</snippet></ROW><ROW><id>13932581</id><snippet>a</snippet></ROW><ROW><id>13932581</id><snippet>b</snippet></ROW><ROW><id>13932581</id><snippet>a</snippet></ROW><ROW><id>13932614</id><snippet>np.where</snippet></ROW><ROW><id>13932614</id><snippet>result = np.where((a &lt; b**2) &amp; (a &lt; b * c), a / np.pi,
                  np.where((a &lt; b**2) &amp; (a &gt;= b * c), b * 2 / np.pi,
                           np.where((a &gt;= b**2) &amp; (a &lt; b*c), c * np.exp(1),
                                    a * b * c * np.pi)))
</snippet></ROW><ROW><id>13932614</id><snippet>&gt;&gt;&gt; a = np.arange(12).reshape(3,4)
&gt;&gt;&gt; a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
&gt;&gt;&gt; b = 1
&gt;&gt;&gt; c = 2
&gt;&gt;&gt; np.where((a &lt; b**2) &amp; (a &lt; b * c), a / np.pi,
             np.where((a &lt; b**2) &amp; (a &gt;= b * c), b * 2 / np.pi,
                      np.where((a &gt;= b**2) &amp; (a &lt; b*c), c * np.exp(1),
                               a * b * c * np.pi)))
array([[  0.        ,   5.43656366,  12.56637061,  18.84955592],
       [ 25.13274123,  31.41592654,  37.69911184,  43.98229715],
       [ 50.26548246,  56.54866776,  62.83185307,  69.11503838]])
</snippet></ROW><ROW><id>13932921</id><snippet>zorder</snippet></ROW><ROW><id>13932921</id><snippet>ax.plot_surface(X, Y, Exp_Fric_map, alpha = 1, rstride=1, cstride=1, cmap=cm.winter, linewidth=0.5, antialiased=True, zorder = 0.5)
ax.plot_surface(X, Y, Fric_map, alpha = 1, rstride=1, cstride=1, cmap=cm.autumn,linewidth=0.5, antialiased=True, zorder = 0.3)
</snippet></ROW><ROW><id>13932942</id><snippet>@foo(bar)
def baz():
    return 'w00t!'
</snippet></ROW><ROW><id>13932942</id><snippet>def baz():
   return 'w00t!'
baz = foo(bar)(baz)
</snippet></ROW><ROW><id>13932942</id><snippet>bar</snippet></ROW><ROW><id>13932942</id><snippet>from functools import wraps
from flask import Flask, abort

app = Flask(__name__)

def foobar(fn):
    @wraps(fn)
    def decorated_view(*args, **kwargs):
        value = kwargs['value']
        # Do something with value...
        if value == 'foobar':
            abort(400)
        return fn(*args, **kwargs)
    return decorated_view

@app.route('/&lt;value&gt;')
@foobar
def view(value):
    return value
</snippet></ROW><ROW><id>13933207</id><snippet>struct</snippet></ROW><ROW><id>13933207</id><snippet>import struct
...
f2.write(struct.pack('b', int(byte,2))) # signed 8 bit int
</snippet></ROW><ROW><id>13933207</id><snippet>f2.write(struct.pack('B', int(byte,2))) # unsigned 8 bit int
</snippet></ROW><ROW><id>13933226</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>13933226</id><snippet>#!/usr/bin/python
</snippet></ROW><ROW><id>13933226</id><snippet>chmod +x file.py</snippet></ROW><ROW><id>13933230</id><snippet>**self</snippet></ROW><ROW><id>13933230</id><snippet>    def __str__(self):
        return """
Commit {0.number} {0.sha}
Message {0.message}
Identity {0.identity}
""".format(self)
</snippet></ROW><ROW><id>13933230</id><snippet>number</snippet></ROW><ROW><id>13933230</id><snippet>message</snippet></ROW><ROW><id>13933230</id><snippet>.format()</snippet></ROW><ROW><id>13933230</id><snippet>self</snippet></ROW><ROW><id>13933309</id><snippet>awk powershell</snippet></ROW><ROW><id>13933470</id><snippet>&gt;&gt;&gt; from collections import namedtuple
&gt;&gt;&gt; Pruefer = namedtuple("Pruefer", "ident maxNum name")
&gt;&gt;&gt; pr = Pruefer(1,2,3)
&gt;&gt;&gt; pr.ident
1
&gt;&gt;&gt; pr.maxNum
2
&gt;&gt;&gt; pr.name
3
&gt;&gt;&gt; hash(pr)
2528502973977326415
</snippet></ROW><ROW><id>13933470</id><snippet>__new__</snippet></ROW><ROW><id>13933470</id><snippet>&gt;&gt;&gt; class Pruefer(namedtuple("Pruefer", "ident maxNum name")):
...     def __new__(cls, ident, maxNum=float('inf'), name=""):
...         return super(Pruefer, cls).__new__(cls, ident, maxNum, name)
... 
&gt;&gt;&gt; Pruefer(1)
Pruefer(ident=1, maxNum=inf, name='')
</snippet></ROW><ROW><id>13933647</id><snippet>timepart</snippet></ROW><ROW><id>13933647</id><snippet>(datepart, timepart) = str( datetime.date(2012, 12, 17) ).split( ' ' )
## ValueError: need more than 1 value to unpack
</snippet></ROW><ROW><id>13933647</id><snippet>sqlite3</snippet></ROW><ROW><id>13933647</id><snippet>convert_timestamp</snippet></ROW><ROW><id>13933647</id><snippet>sqlite3</snippet></ROW><ROW><id>13933647</id><snippet>effected_dt</snippet></ROW><ROW><id>13933647</id><snippet>timestamp</snippet></ROW><ROW><id>13933647</id><snippet>datetime.datetime</snippet></ROW><ROW><id>13933647</id><snippet>datetime.datetime</snippet></ROW><ROW><id>13933647</id><snippet>timestamp</snippet></ROW><ROW><id>13933700</id><snippet>def Discover(myList=[])</snippet></ROW><ROW><id>13933700</id><snippet>Queue.Queue</snippet></ROW><ROW><id>13933700</id><snippet>list</snippet></ROW><ROW><id>13933700</id><snippet>myList</snippet></ROW><ROW><id>13933700</id><snippet>multiprocessing.pool.ThreadPool</snippet></ROW><ROW><id>13933700</id><snippet>Queue.Queue</snippet></ROW><ROW><id>13933700</id><snippet>list</snippet></ROW><ROW><id>13933700</id><snippet>results</snippet></ROW><ROW><id>13933700</id><snippet>list</snippet></ROW><ROW><id>13933700</id><snippet>ThreadPool</snippet></ROW><ROW><id>13933700</id><snippet>$ python
Python 2.7.1 (r271:86832, Jul 31 2011, 19:30:53) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from multiprocessing.pool import ThreadPool
&gt;&gt;&gt; ThreadPool
&lt;class 'multiprocessing.pool.ThreadPool'&gt;
</snippet></ROW><ROW><id>13933775</id><snippet>words = sorted(open('C://Users/Desktop/test_wordss.txt').read().split())
print(words)
</snippet></ROW><ROW><id>13933775</id><snippet>sort()</snippet></ROW><ROW><id>13933775</id><snippet>None</snippet></ROW><ROW><id>13933797</id><snippet>utime</snippet></ROW><ROW><id>13933797</id><snippet>stime</snippet></ROW><ROW><id>13933797</id><snippet>resource</snippet></ROW><ROW><id>13933797</id><snippet>import subprocess, resource
usage_start = resource.getrusage(resource.RUSAGE_CHILDREN)
subprocess.call(["yourcommand"])
usage_end = resource.getrusage(resource.RUSAGE_CHILDREN)
cpu_time = usage_end.ru_utime - usage_start.ru_utime
</snippet></ROW><ROW><id>13933797</id><snippet>subprocess.call()</snippet></ROW><ROW><id>13933797</id><snippet>time</snippet></ROW><ROW><id>13933797</id><snippet>time</snippet></ROW><ROW><id>13933797</id><snippet>import subprocess, StringIO
time_output = StringIO.StringIO()
subprocess.call(["time", "yourcommand", "youroptions"], stdout=time_output)
# parse time_output
</snippet></ROW><ROW><id>13933970</id><snippet>import mod1.sub_aa as mod1.sub_a</snippet></ROW><ROW><id>13933970</id><snippet>as</snippet></ROW><ROW><id>13933970</id><snippet>m.sub_a = m.sub_aa
</snippet></ROW><ROW><id>13934013</id><snippet>from datetime import date
from dateutil.rrule import rrule, DAILY

iterdates=iter(rrule(DAILY, dtstart=date(2012, 9, 1), until=date(2012, 9, 30)))
</snippet></ROW><ROW><id>13934101</id><snippet>In [1]: import networkx as nx

In [2]: &gt;&gt;&gt; g = nx.DiGraph()

In [3]: &gt;&gt;&gt; g.add_path(['A','B','C',])

In [4]: &gt;&gt;&gt; g.add_path(['X','Y','Z',])

In [5]: u = g.to_undirected()

In [6]: nodes = nx.shortest_path(u,'B').keys()

In [7]: nodes
Out[7]: ['A', 'C', 'B']

In [8]: s = g.subgraph(nodes)

In [9]: s.edges()
Out[9]: [('A', 'B'), ('B', 'C')]
</snippet></ROW><ROW><id>13934101</id><snippet>In [10]: s = g.subgraph(nx.shortest_path(g.to_undirected(),'B'))

In [11]: s.edges()
Out[11]: [('A', 'B'), ('B', 'C')]
</snippet></ROW><ROW><id>13934246</id><snippet>...some unrelated codd...</snippet></ROW><ROW><id>13934246</id><snippet>self.ymax</snippet></ROW><ROW><id>13934246</id><snippet>...code here</snippet></ROW><ROW><id>13934246</id><snippet>...more code here...</snippet></ROW><ROW><id>13934246</id><snippet>self</snippet></ROW><ROW><id>13934246</id><snippet>draw()</snippet></ROW><ROW><id>13934246</id><snippet>ymax</snippet></ROW><ROW><id>13934840</id><snippet>import pytest

@pytest.fixture(scope="module")
def myFixture1():
    return 5

@pytest.fixture(scope="module")
def myFixture2():
    return 2

@pytest.fixture(scope="module", params=["param1", "param2"])
def myFixture(request):
    if request.param == 'param1':
        return request.getfuncargvalue("myFixture1")
    elif request.param == 'param2':
        return request.getfuncargvalue("myFixture2")

def test_1(myFixture1):
    assert myFixture1 == 5

def test_2(myFixture2):
    assert myFixture2 == 2

def test_all(myFixture):
    assert myFixture in (2,5)
</snippet></ROW><ROW><id>13934840</id><snippet>test_all</snippet></ROW><ROW><id>13934878</id><snippet>pip install psutil
</snippet></ROW><ROW><id>13934878</id><snippet>import psutil

for p in psutil.get_process_list():
    if 'python' in p.name:
        print p.cmdline
</snippet></ROW><ROW><id>13934878</id><snippet>cmdline</snippet></ROW><ROW><id>13935034</id><snippet>e = e/2</snippet></ROW><ROW><id>13935034</id><snippet>3/2</snippet></ROW><ROW><id>13935034</id><snippet>e = (e/2).floor()</snippet></ROW><ROW><id>13935043</id><snippet>stdout</snippet></ROW><ROW><id>13935043</id><snippet>stderr</snippet></ROW><ROW><id>13935043</id><snippet>subprocess.call()</snippet></ROW><ROW><id>13935043</id><snippet>Popen</snippet></ROW><ROW><id>13935043</id><snippet>PIPE</snippet></ROW><ROW><id>13935043</id><snippet>def flush_streams_to_logs(proc, stdout_log, stderr_log):
    pipe_data = proc.communicate()
    for data, log in zip(pipe_data, (stdout_log, stderr_log)):
        # Add whatever extra text you want on each logged message here
        log.write(str(data) + '\n')

with open('stdout.txt', 'a') as stdout_log, open('stderr.txt', 'a') as stderr_log:
    proc = subprocess.Popen(SHELL_COMMAND, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    while proc.returncode is None:
        flush_streams_to_logs(proc, stdout_log, stderr_log)
    flush_streams_to_logs(proc, stdout_log, stderr_log)
</snippet></ROW><ROW><id>13935043</id><snippet>communicate()</snippet></ROW><ROW><id>13935130</id><snippet>In [8]: re.search(r".*[(](.*)[)]", s).groups()
Out[8]: ('London, UK',)
</snippet></ROW><ROW><id>13935130</id><snippet>.*</snippet></ROW><ROW><id>13935130</id><snippet>In [14]: re.findall(r'\(.*?\)', s)[-1]
Out[14]: '(London, UK)'
</snippet></ROW><ROW><id>13935130</id><snippet>In [11]: s[s.rfind('(')+1:s.rfind(')')]
Out[11]: 'London, UK'
</snippet></ROW><ROW><id>13935242</id><snippet>p = subprocess.Popen(['ls', '-l'], stdout=subprocess.PIPE, shell=True)
print p.communicate()[0]
</snippet></ROW><ROW><id>13935303</id><snippet>multiprocessing</snippet></ROW><ROW><id>13935303</id><snippet>if __name__ == '__main__'</snippet></ROW><ROW><id>13935303</id><snippet>import math
from multiprocessing import Pool

if __name__ == '__main__':
    pool = Pool(processes=2)
    print pool.map(math.sqrt, [1,4,9,16])
</snippet></ROW><ROW><id>13935303</id><snippet>if</snippet></ROW><ROW><id>13935404</id><snippet>#input

file1 = open('1.txt', 'r')
file2 = open('2.txt', 'r')
matrix1 = [line.rstrip().split(', ') for line in file1.readlines()]
matrix2 = [line.rstrip().split(', ') for line in file2.readlines()]
file1.close()
file2.close()

#combine

t_matrix1 = [[r[col] for r in matrix1] for col in range(len(matrix1[0]))]
t_matrix2 = [[r[col] for r in matrix2] for col in range(len(matrix2[0]))]
final_t_matrix = []
for i in (t_matrix1 + t_matrix2):
    if i not in final_t_matrix:
        final_t_matrix.append(i)
final_matrix = [[r[col] for r in final_t_matrix] for col in range(len(final_t_matrix[0]))]

#output

outfile = open('out.txt', 'w')
for i in final_matrix:               
    for j in i[:-1]:
        outfile.write(j+', ')
    outfile.write(i[-1]+'\n')
outfile.close()
</snippet></ROW><ROW><id>13935721</id><snippet>&gt;&gt;&gt; re.split(r'\s(?=(?:this|into|ones)\b)', "Let's split this string into many small ones")
["Let's split", 'this string', 'into many small', 'ones']
</snippet></ROW><ROW><id>13936204</id><snippet>__repr__</snippet></ROW><ROW><id>13936204</id><snippet>__str__</snippet></ROW><ROW><id>13936204</id><snippet>class Rule(object):

   def __init__(self, name):
     self.name = name

   def __repr__(self):
      return 'Rule({0})'.format(self.name)    

   def __str__(self):
     return self.name


rule = Rule('test')
print(rule) # test
</snippet></ROW><ROW><id>13936574</id><snippet>self.newfilename = wx.TextCtrl(panel,-1), 0, wx.TOP, 5)
self.contents = wx.TextCtrl(panel,-1,size=(390,150),style = wx.TE_MULTILINE|wx.TE_PROCESS_TAB)
</snippet></ROW><ROW><id>13936574</id><snippet>valueOne = self.newfilename.GetValue()
contents = self.contents.GetValue()
</snippet></ROW><ROW><id>13936747</id><snippet>PyByteArrayObject</snippet></ROW><ROW><id>13936747</id><snippet>from authbind import authenticate

creds = 'foo\x00bar\x00'
authenticate(bytearray(creds))
</snippet></ROW><ROW><id>13936747</id><snippet>static PyObject* authenticate(PyObject *self, PyObject *args) {

    PyByteArrayObject *creds;

    if (!PyArg_ParseTuple(args, "O", &amp;creds))
        return NULL;

    char* credsCopy;
    credsCopy = PyByteArray_AsString((PyObject*) creds);
}
</snippet></ROW><ROW><id>13936747</id><snippet>credsCopy</snippet></ROW><ROW><id>13936863</id><snippet>CREATE TABLE child (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT
);


CREATE TABLE dog (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    dog TEXT
);

CREATE TABLE child_dog {
    child_id INTEGER,
    dog_id INTEGER,
    FOREIGN KEY(child_id) REFERENCES child(id),
    FOREIGN KEY(dog_id) REFERENCES dog(id)
};
</snippet></ROW><ROW><id>13936863</id><snippet>INSERT INTO child VALUES(NULL, 'bobby');
SELECT last_insert_rowid(); -- gives the id of bobby, assume 2 for this example
INSERT INTO dog VALUES(NULL, 'spot');
SELECT last_insert_rowid(); -- gives the id of spot, assume 4 for this example
INSERT INTO child_dog VALUES(2, 4);
</snippet></ROW><ROW><id>13936863</id><snippet># Import the sqlite3 module
import sqlite3
# Create a connection and cursor to your database
conn = sqlite3.connect('example.db')
c = conn.cursor()
# Insert bobby
c.execute("""INSERT INTO child VALUES(NULL, 'bobby')""")
# The python module puts the last row id inserted into a variable on the cursor
bobby_id = c.lastrowid
# Insert spot
c.execute("""INSERT INTO dog VALUES(NULL, 'spot')""")
spot_id = c.lastrowid
# Insert the mapping
c.execute("""INSERT INTO child_dog VALUES(?, ?)""", (bobby_id, spot_id));
# Commit
conn.commit()
conn.close()
</snippet></ROW><ROW><id>13936977</id><snippet>each_with_index</snippet></ROW><ROW><id>13936977</id><snippet>Enumerator</snippet></ROW><ROW><id>13936977</id><snippet>with_index</snippet></ROW><ROW><id>13937141</id><snippet>In [6]: df[(df.one == 1) | (df.two == 7)]
Out[6]: 
   one  three  two
0    1      9    5
2    3     17    7

In [7]: df[(df.one.isin(checkList)) | (df.two.isin(checkList))]
Out[7]: 
   one  three  two
0    1      9    5
2    3     17    7
</snippet></ROW><ROW><id>13937230</id><snippet>$ bunzip2 gmp-5.0.5.tar.bz2
$ tar -xf gmp-5.0.5.tar
$ cd gmp-5.0.5
$ ./configure --prefix=/path/to/my/special/prefix
$ make
$ make check
$ make install
$ easy_install pycrypto
$ easy_install fabric
</snippet></ROW><ROW><id>13937236</id><snippet>__init__</snippet></ROW><ROW><id>13937236</id><snippet>if not isinstance(name,basestring):
    raise TypeError("I don't think that is a name ...")
</snippet></ROW><ROW><id>13937236</id><snippet>basestring</snippet></ROW><ROW><id>13937236</id><snippet>unicode</snippet></ROW><ROW><id>13937236</id><snippet>person</snippet></ROW><ROW><id>13937236</id><snippet>jack = Person("Jack")
jack.name = ["cheese","steak"]  #???
</snippet></ROW><ROW><id>13937236</id><snippet>property</snippet></ROW><ROW><id>13937252</id><snippet>nice pythonscript</snippet></ROW><ROW><id>13937252</id><snippet>import os
os.nice(20)
</snippet></ROW><ROW><id>13937252</id><snippet>renice -p &lt;pid&gt;</snippet></ROW><ROW><id>13937497</id><snippet>pandas.io.sql</snippet></ROW><ROW><id>13937497</id><snippet>frame_query</snippet></ROW><ROW><id>13937497</id><snippet>DataFrame.from_records()</snippet></ROW><ROW><id>13937497</id><snippet>%s</snippet></ROW><ROW><id>13937497</id><snippet>sql = "select * from dataBase where cus IN ({0})".format(', '.join(['%s'] * len(cus2))
</snippet></ROW><ROW><id>13937497</id><snippet>cus2</snippet></ROW><ROW><id>13937497</id><snippet>cur = psql.execute(sql, con, params=cus2)
rows = cur.fetchall()
columns = [col_desc[0] for col_desc in cur.description]
cur.close()

result = DataFrame.from_records(rows, columns=columns, coerce_float=True)
</snippet></ROW><ROW><id>13937497</id><snippet>Sybase</snippet></ROW><ROW><id>13937497</id><snippet>@name</snippet></ROW><ROW><id>13937497</id><snippet>params = dict(('@param{0}'.format(i), v) for i, v in enumerate(cus2))
sql = "select * from dataBase where cus IN ({0})".format(
    ', '.join(sorted(params.keys())))

cur = psql.execute(sql, con, params=params)
rows = cur.fetchall()
columns = [col_desc[0] for col_desc in cur.description]
cur.close()

result = DataFrame.from_records(rows, columns=columns, coerce_float=True)
</snippet></ROW><ROW><id>13937525</id><snippet>__doc__</snippet></ROW><ROW><id>13937525</id><snippet>import inspect

def inheritdocstring(name, bases, attrs):
    if not '__doc__' in attrs:
        # create a temporary 'parent' to (greatly) simplify the MRO search
        temp = type('temporaryclass', bases, {})
        for cls in inspect.getmro(temp):
            if cls.__doc__ is not None:
                attrs['__doc__'] = cls.__doc__
                break

    return type(name, bases, attrs)
</snippet></ROW><ROW><id>13937525</id><snippet>__doc__</snippet></ROW><ROW><id>13937525</id><snippet>&gt;&gt;&gt; class ParentWithDocstring(object):
...     """Parent docstring"""
... 
&gt;&gt;&gt; class SubClassWithoutDocstring(ParentWithDocstring):
...     __metaclass__ = inheritdocstring
... 
&gt;&gt;&gt; SubClassWithoutDocstring.__doc__
'Parent docstring'
</snippet></ROW><ROW><id>13937525</id><snippet>__doc__</snippet></ROW><ROW><id>13937525</id><snippet>__init__</snippet></ROW><ROW><id>13937525</id><snippet>def __init__(self):
    try:
        self.__doc__ = next(cls.__doc__ for cls in inspect.getmro(type(self)) if cls.__doc__ is not None)
    except StopIteration:
        pass
</snippet></ROW><ROW><id>13937525</id><snippet>&gt;&gt;&gt; class SubClassWithoutDocstring(ParentWithDocstring):
...     def __init__(self):
...         try:
...             self.__doc__ = next(cls.__doc__ for cls in inspect.getmro(type(self)) if cls.__doc__ is not None)
...         except StopIteration:
...             pass
... 
&gt;&gt;&gt; SubClassWithoutDocstring().__doc__
'Parent docstring'
</snippet></ROW><ROW><id>13937525</id><snippet>__doc__</snippet></ROW><ROW><id>13937525</id><snippet>import inspect

def inheritdocstring(cls):
    for base in inspect.getmro(cls):
        if base.__doc__ is not None:
            cls.__doc__ = base.__doc__
            break
    return cls
</snippet></ROW><ROW><id>13937525</id><snippet>&gt;&gt;&gt; @inheritdocstring
... class SubClassWithoutDocstring(ParentWithDocstring):
...     pass
... 
&gt;&gt;&gt; SubClassWithoutDocstring.__doc__
'Parent docstring'
</snippet></ROW><ROW><id>13937652</id><snippet>loop</snippet></ROW><ROW><id>13937652</id><snippet>loop</snippet></ROW><ROW><id>13937652</id><snippet>(defun range (max &amp;key (min 0) (step 1))
   (loop for n from min below max by step
      collect n))
</snippet></ROW><ROW><id>13937652</id><snippet>(range 10 :min 1 :step 2)</snippet></ROW><ROW><id>13937653</id><snippet>y</snippet></ROW><ROW><id>13937653</id><snippet>x</snippet></ROW><ROW><id>13937653</id><snippet>z = x[y]

&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.arange(100)
&gt;&gt;&gt; y = np.array([1, 27, 36, 98])
&gt;&gt;&gt; x[y]
array([ 1, 27, 36, 98])
</snippet></ROW><ROW><id>13937844</id><snippet>print win32clipboard.GetClipboardData().decode('utf-16le')
</snippet></ROW><ROW><id>13937844</id><snippet>encode('utf-16le')</snippet></ROW><ROW><id>13937889</id><snippet>:</snippet></ROW><ROW><id>13938168</id><snippet>KeyError</snippet></ROW><ROW><id>13938168</id><snippet>username</snippet></ROW><ROW><id>13938168</id><snippet>form.cleaned_data['username']
</snippet></ROW><ROW><id>13938168</id><snippet>None</snippet></ROW><ROW><id>13938168</id><snippet>KeyError</snippet></ROW><ROW><id>13938168</id><snippet>form.cleaned_data.get('username')
</snippet></ROW><ROW><id>13938168</id><snippet>.get</snippet></ROW><ROW><id>13938168</id><snippet>val = form.cleaned_data.get('username', False)
# assume key was not found
print val # should contains False now
</snippet></ROW><ROW><id>13938219</id><snippet>json.loads(s)</snippet></ROW><ROW><id>13938219</id><snippet>jdata</snippet></ROW><ROW><id>13938219</id><snippet>import json

s = '[{"i":"imap.gmail.com","p":"someP@ss"},{"i":"imap.aol.com","p":"anoterPass"}]'
jdata = json.loads(s)
for d in jdata:
    for key, value in d.iteritems():
        print key, value
</snippet></ROW><ROW><id>13938359</id><snippet>from shapely.geometry import box, Polygon

for pixel in pixels:
    # say the pixel has llx, lly, urx, ury values.
    pixel_shape = box(llx, lly, urx, ury)

    for polygon in approximately_overlapping:
        # say the polygon has a ``value`` and a 2-D array of coordinates 
        # [[x0,y0],...] named ``xy``.
        polygon_shape = Polygon(xy)
        pixel_value += polygon_shape.intersection(pixel_shape).area * value
</snippet></ROW><ROW><id>13938434</id><snippet>@file_aware(docstring="Do stuff. `f` can be file object or file name", mode="r")
def function(f, *args, **kwargs):
    for line in f:
       ....
</snippet></ROW><ROW><id>13938434</id><snippet>file_aware</snippet></ROW><ROW><id>13938434</id><snippet>def file_aware(docstring, mode):
    def deco(func):
        @functools.wraps(func)
        def wrapped(f, *args, **kwargs):
            if isinstance(f, str):
                file_obj = open(f, mode)
            else:
                file_obj = f
            return func(file_obj, *args, **kwargs)
        wrapped.__doc__ = docstring
        return wrapped
    return deco
</snippet></ROW><ROW><id>13938649</id><snippet>requests</snippet></ROW><ROW><id>13938649</id><snippet>soundcloud</snippet></ROW><ROW><id>13938649</id><snippet>requests.models.Response</snippet></ROW><ROW><id>13938649</id><snippet>.error</snippet></ROW><ROW><id>13938649</id><snippet>soundcloud</snippet></ROW><ROW><id>13938649</id><snippet>requests</snippet></ROW><ROW><id>13938649</id><snippet>pip</snippet></ROW><ROW><id>13938649</id><snippet>pip install -I requests==0.14.2
</snippet></ROW><ROW><id>13938649</id><snippet>setup.py</snippet></ROW><ROW><id>13938649</id><snippet>requests</snippet></ROW><ROW><id>13938700</id><snippet>urls.py</snippet></ROW><ROW><id>13938700</id><snippet>url(r'^set/(?P&lt;the_city&gt;\w+)/$', views.selectCity, {'the_city': 'gye'}, name='ciudad'),
</snippet></ROW><ROW><id>13938700</id><snippet>&lt;a tabindex="-1" href="{% url ciudad the_city='gye' %}"&gt;Guayaquil&lt;/a&gt;
</snippet></ROW><ROW><id>13938831</id><snippet>&gt;&gt;&gt; from pandas import DataFrame
&gt;&gt;&gt; 
&gt;&gt;&gt; df = DataFrame({"A": [8,9,5,4], "B": [3,4,4,8], "C": [5,0,3,5], "D": [8,4,8,1]})
&gt;&gt;&gt; df.max()
A    9
B    8
C    5
D    8
&gt;&gt;&gt; (df * 1.0)/df.max()
          A      B    C      D
0  0.888889  0.375  1.0  1.000
1  1.000000  0.500  0.0  0.500
2  0.555556  0.500  0.6  1.000
3  0.444444  1.000  1.0  0.125
</snippet></ROW><ROW><id>13938831</id><snippet>df</snippet></ROW><ROW><id>13938831</id><snippet>1.0</snippet></ROW><ROW><id>13938831</id><snippet>int</snippet></ROW><ROW><id>13938831</id><snippet>.astype(float)</snippet></ROW><ROW><id>13938959</id><snippet>{% load get_boxfilter %}
{% regroup all_boxes by section as type %}

&lt;ul&gt;
{% for pos in type %}
    &lt;li&gt; Box {{ pos.type|get_boxfilter }}
    &lt;ol style="list-style-type: decimal"&gt;
         &lt;li&gt;{{ pos.grouper }}&lt;/li&gt;
         &lt;ol style="list-style-type: decimal"&gt;
             {% for item in pos.list %}
                 &lt;li&gt; element {{ item.name }}&lt;/li&gt;
             {% endfor %}
         &lt;/ol&gt;
    &lt;/ol&gt;
    &lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>13939139</id><snippet>os.path</snippet></ROW><ROW><id>13939197</id><snippet>list</snippet></ROW><ROW><id>13939197</id><snippet>set</snippet></ROW><ROW><id>13939197</id><snippet>lower-case</snippet></ROW><ROW><id>13939197</id><snippet>list</snippet></ROW><ROW><id>13939197</id><snippet>generator</snippet></ROW><ROW><id>13939197</id><snippet>lowercase</snippet></ROW><ROW><id>13939197</id><snippet>&gt;&gt;&gt; l = ['a', 'b', 'c', 'A', 'B', 'C', 'a', 'b', 'c']
&gt;&gt;&gt; new_list = list(set(elem.lower() for elem in l))
&gt;&gt;&gt; new_list
['a', 'c', 'b']
</snippet></ROW><ROW><id>13939197</id><snippet>set</snippet></ROW><ROW><id>13939197</id><snippet>order</snippet></ROW><ROW><id>13939210</id><snippet>send(something, otherthing)
</snippet></ROW><ROW><id>13939210</id><snippet>send([something, otherthing])
</snippet></ROW><ROW><id>13939210</id><snippet>something</snippet></ROW><ROW><id>13939210</id><snippet>otherthing</snippet></ROW><ROW><id>13939210</id><snippet>print()</snippet></ROW><ROW><id>13939210</id><snippet>os.path.join()</snippet></ROW><ROW><id>13939210</id><snippet>os.path.join(rootdirectory, relativepath, filename)
print('Debug information:', localvariable)
</snippet></ROW><ROW><id>13939210</id><snippet>os.path.join([rootdirectory, relativepath, filename])
print(['Debug information:', localvariable])
</snippet></ROW><ROW><id>13939210</id><snippet>.join()</snippet></ROW><ROW><id>13939210</id><snippet>print()</snippet></ROW><ROW><id>13939210</id><snippet>[</snippet></ROW><ROW><id>13939210</id><snippet>]</snippet></ROW><ROW><id>13939210</id><snippet>*params</snippet></ROW><ROW><id>13939210</id><snippet>send(*params)
</snippet></ROW><ROW><id>13939416</id><snippet>^</snippet></ROW><ROW><id>13939416</id><snippet>your_list = [1,2,3,4,5,6]
             ^
</snippet></ROW><ROW><id>13939416</id><snippet>your_list = [2,3,4,5,6]
             ^
</snippet></ROW><ROW><id>13939416</id><snippet>your_list = [2,3,4,5,6]
               ^
</snippet></ROW><ROW><id>13939416</id><snippet>your_list = [3,4,5,6]
               ^
</snippet></ROW><ROW><id>13939416</id><snippet>your_list = [3,4,5,6]
                 ^
</snippet></ROW><ROW><id>13939416</id><snippet>your_list = [4,5,6]
                 ^
</snippet></ROW><ROW><id>13939416</id><snippet>&gt;&gt;&gt; l = [1,2,3,4,5,6]
&gt;&gt;&gt; for x in l:
...     l.pop(0)
... 
1
2
3
&gt;&gt;&gt; print l
[4, 5, 6]
</snippet></ROW><ROW><id>13939524</id><snippet>cookies = {'sentcookie':'666'}
response = requests.get('http://en.wikipedia.org/wiki/Main_Page', cookies=cookies)
</snippet></ROW><ROW><id>13939524</id><snippet>response.cookies 
</snippet></ROW><ROW><id>13939730</id><snippet>for i in range(0, len(ListB), 2):
    for x in ListA:
        if ListB[i] &lt; x &lt; ListB[i+1]:
            print 'within range'
</snippet></ROW><ROW><id>13939730</id><snippet>i:i+2</snippet></ROW><ROW><id>13939730</id><snippet>list</snippet></ROW><ROW><id>13939730</id><snippet>ListB[i:i+2]</snippet></ROW><ROW><id>13939730</id><snippet>[ListB[i], ListB[i+1]]</snippet></ROW><ROW><id>13939730</id><snippet>i:i+2</snippet></ROW><ROW><id>13939730</id><snippet>slice(i, i+2)</snippet></ROW><ROW><id>13939730</id><snippet>x</snippet></ROW><ROW><id>13939730</id><snippet>ListB[i]</snippet></ROW><ROW><id>13939730</id><snippet>ListB[i+1]</snippet></ROW><ROW><id>13939730</id><snippet>i</snippet></ROW><ROW><id>13939730</id><snippet>i+1</snippet></ROW><ROW><id>13939730</id><snippet>for i in range(0, len(ListB), 2):
    brange = range(*ListB[i:i+2])
    for x in ListA:
        if x in brange:
            print 'within range'
</snippet></ROW><ROW><id>13939730</id><snippet>ListB[i] &lt; x &lt; ListB[i+1]</snippet></ROW><ROW><id>13939730</id><snippet>ListB</snippet></ROW><ROW><id>13939730</id><snippet>itertools</snippet></ROW><ROW><id>13939981</id><snippet>class SomeDataStructure(object):
    def sum(self):
        return sum(self._data)
    def otherCalc(self):
        return sum(item for item in somethingElse)
</snippet></ROW><ROW><id>13939981</id><snippet>sum</snippet></ROW><ROW><id>13939981</id><snippet>sum</snippet></ROW><ROW><id>13939981</id><snippet>otherCalc</snippet></ROW><ROW><id>13939981</id><snippet>self</snippet></ROW><ROW><id>13939981</id><snippet>def</snippet></ROW><ROW><id>13939981</id><snippet>class</snippet></ROW><ROW><id>13939981</id><snippet>class</snippet></ROW><ROW><id>13940105</id><snippet>pip</snippet></ROW><ROW><id>13940105</id><snippet>easy_install</snippet></ROW><ROW><id>13940105</id><snippet>pip</snippet></ROW><ROW><id>13940105</id><snippet>readline</snippet></ROW><ROW><id>13940105</id><snippet>pip</snippet></ROW><ROW><id>13940105</id><snippet>sudo easy_install pip</snippet></ROW><ROW><id>13940105</id><snippet>sudo easy_install foo</snippet></ROW><ROW><id>13940105</id><snippet>sudo pip install foo</snippet></ROW><ROW><id>13940105</id><snippet>pycairo</snippet></ROW><ROW><id>13940105</id><snippet>py2cairo</snippet></ROW><ROW><id>13940105</id><snippet>pip</snippet></ROW><ROW><id>13940105</id><snippet>sudo pip install http://cairographics.org/releases/py2cairo-1.10.0.tar.bz2</snippet></ROW><ROW><id>13940105</id><snippet>sudo pip install git+https://git.cairographics.org/git/py2cairo</snippet></ROW><ROW><id>13940105</id><snippet>pip</snippet></ROW><ROW><id>13940105</id><snippet>easy_install</snippet></ROW><ROW><id>13940105</id><snippet>pycairo</snippet></ROW><ROW><id>13940105</id><snippet>easy_install</snippet></ROW><ROW><id>13940105</id><snippet>pip install</snippet></ROW><ROW><id>13940105</id><snippet>waf</snippet></ROW><ROW><id>13940105</id><snippet>distutils</snippet></ROW><ROW><id>13940105</id><snippet>distutils</snippet></ROW><ROW><id>13940105</id><snippet>waf</snippet></ROW><ROW><id>13940105</id><snippet>pip</snippet></ROW><ROW><id>13940105</id><snippet>easy_install</snippet></ROW><ROW><id>13940105</id><snippet>pycairo</snippet></ROW><ROW><id>13940105</id><snippet>cairo</snippet></ROW><ROW><id>13940105</id><snippet>pixman</snippet></ROW><ROW><id>13940105</id><snippet>pycairo</snippet></ROW><ROW><id>13940105</id><snippet>cairo</snippet></ROW><ROW><id>13940105</id><snippet>cairo</snippet></ROW><ROW><id>13940105</id><snippet>pycairo</snippet></ROW><ROW><id>13940105</id><snippet>/opt/local/bin/python</snippet></ROW><ROW><id>13940105</id><snippet>pycairo</snippet></ROW><ROW><id>13940105</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>13940166</id><snippet>all</snippet></ROW><ROW><id>13940166</id><snippet>any</snippet></ROW><ROW><id>13940335</id><snippet>print mail_accounts[0]["i"]
</snippet></ROW><ROW><id>13940414</id><snippet>unicodedata.category(unichr)</snippet></ROW><ROW><id>13940414</id><snippet>Lu    Uppercase_Letter    an uppercase letter
Ll    Lowercase_Letter    a lowercase letter
Lt    Titlecase_Letter    a digraphic character, with first part uppercase
Lm    Modifier_Letter a modifier letter
Lo    Other_Letter    other letters, including syllables and ideographs
...
</snippet></ROW><ROW><id>13940414</id><snippet>unicodedata.normalize(form, unistr)</snippet></ROW><ROW><id>13940414</id><snippet>file_bytes = ...   # However you read your input
file_text = file_bytes.decode('UTF-8')
normalized_text = unicodedata.normalize('NFC', file_text)
allowed_categories = set([
    'Ll', 'Lu', 'Lt', 'Lm', 'Lo',  # Letters
    'Nd', 'Nl',                    # Digits
    'Po', 'Ps', 'Pe', 'Pi', 'Pf',  # Punctuation
    'Zs'                           # Breaking spaces
])
filtered_text = ''.join(
    [ch for ch in normalized_text
     if unicodedata.category(ch) in allowed_categories])
filtered_bytes = filtered_text.encode('UTF-8')  # ready to be written to a file
</snippet></ROW><ROW><id>13940445</id><snippet>balance_equation(['H2O','A2'],['6','-4'])</snippet></ROW><ROW><id>13940445</id><snippet>mul</snippet></ROW><ROW><id>13940445</id><snippet>'6'</snippet></ROW><ROW><id>13940445</id><snippet>'-4'</snippet></ROW><ROW><id>13940445</id><snippet>6</snippet></ROW><ROW><id>13940445</id><snippet>-4</snippet></ROW><ROW><id>13940445</id><snippet>if int(mul)&lt;0:
    negative.append((el,mul))
if int(mul)&gt;0:
    positive.append((el,mul))
</snippet></ROW><ROW><id>13940445</id><snippet>mul</snippet></ROW><ROW><id>13940450</id><snippet>a = ['adam', 'home', 'wednesday', '17th']
b = ['Tiffany', 'office', 'monday', '9th']

for x in [a, b]:
    working_line = ' '.join(map(lambda s: s.ljust(10, ' '), x))
    print working_line
</snippet></ROW><ROW><id>13940565</id><snippet>sym</snippet></ROW><ROW><id>13940565</id><snippet>from scipy.linalg import sqrtm, inv

def sym(w):
    return w.dot(inv(sqrtm(w.T.dot(w))))
</snippet></ROW><ROW><id>13940624</id><snippet>f</snippet></ROW><ROW><id>13940624</id><snippet>g</snippet></ROW><ROW><id>13940624</id><snippet>def f(x)
  x + 2
end

def g(x)
  x + 3
end 
</snippet></ROW><ROW><id>13940624</id><snippet>compose1</snippet></ROW><ROW><id>13940624</id><snippet>def compose1(f,g)
  lambda { |x| send(f, send(g, x) ) }
end
</snippet></ROW><ROW><id>13940624</id><snippet>h = compose1(:f, :g)</snippet></ROW><ROW><id>13940624</id><snippet>send</snippet></ROW><ROW><id>13940624</id><snippet>h.call 3 # =&gt; 8</snippet></ROW><ROW><id>13940728</id><snippet>{% if flavour != "mobile" %}Desktop version{% endif %}
</snippet></ROW><ROW><id>13940785</id><snippet>1 &gt; n &gt;= 0</snippet></ROW><ROW><id>13940785</id><snippet>n &gt;= 0</snippet></ROW><ROW><id>13940785</id><snippet>n &lt; 1</snippet></ROW><ROW><id>13940785</id><snippet>if n &lt; 1:
    return 0
</snippet></ROW><ROW><id>13940805</id><snippet>:highlight</snippet></ROW><ROW><id>13940805</id><snippet>" Show the stack of syntax hilighting classes affecting whatever is under the
" cursor.
function! SynStack()
    echo join(map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")'), " &gt; ")
endfunc

nnoremap &lt;F8&gt; :call SynStack()&lt;CR&gt;
</snippet></ROW><ROW><id>13940805</id><snippet>:source</snippet></ROW><ROW><id>13940805</id><snippet>.vimrc</snippet></ROW><ROW><id>13940805</id><snippet>:highlight pythonInclude
</snippet></ROW><ROW><id>13940805</id><snippet>pythonInclude  xxx links to Include
</snippet></ROW><ROW><id>13940805</id><snippet>Include xxx links to PreProc</snippet></ROW><ROW><id>13940805</id><snippet>:highlight link pythonInclude Function</snippet></ROW><ROW><id>13940805</id><snippet>:h :highlight</snippet></ROW><ROW><id>13940820</id><snippet>re</snippet></ROW><ROW><id>13940820</id><snippet>import re
levels = [x[2:].strip() for x in re.split(';\s*\d', open(filename).read()) if x != '']
</snippet></ROW><ROW><id>13940820</id><snippet>levels = [x[2:].strip() for x in open(filename).read().split(';') if x != '']
</snippet></ROW><ROW><id>13940820</id><snippet>levels = [x[1:].strip() for x in open(filename).read().split('; ') if x.strip() != '']
</snippet></ROW><ROW><id>13940820</id><snippet>for level in levels:
    print level
</snippet></ROW><ROW><id>13940820</id><snippet>print levels[0]
print levels[1]
</snippet></ROW><ROW><id>13940923</id><snippet>def caminho_junta_posicao(self,d):
    p = self.caminho[-1]
    self.caminho = self.caminho + [p.posicao_relativa(d)]
</snippet></ROW><ROW><id>13940923</id><snippet>return</snippet></ROW><ROW><id>13940923</id><snippet>None</snippet></ROW><ROW><id>13940923</id><snippet> caminho(posicao(0,0)).caminho_junta_posicao('este')
</snippet></ROW><ROW><id>13940923</id><snippet>None</snippet></ROW><ROW><id>13940923</id><snippet>None</snippet></ROW><ROW><id>13940923</id><snippet>caminho_origem()</snippet></ROW><ROW><id>13940923</id><snippet>.append</snippet></ROW><ROW><id>13940923</id><snippet>.extend</snippet></ROW><ROW><id>13940923</id><snippet>.caminho_junta_posicao</snippet></ROW><ROW><id>13940923</id><snippet>None</snippet></ROW><ROW><id>13940923</id><snippet>pandas</snippet></ROW><ROW><id>13940923</id><snippet>self</snippet></ROW><ROW><id>13940923</id><snippet>def caminho_junta_posicao(self,d):
    p = self.caminho[-1]
    self.caminho = self.caminho + [p.posicao_relativa(d)]
    return self
</snippet></ROW><ROW><id>13940923</id><snippet>caminho(posicao(0,0)).caminho_junta_posicao('este')</snippet></ROW><ROW><id>13940923</id><snippet>caminho</snippet></ROW><ROW><id>13940999</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>13940999</id><snippet>import</snippet></ROW><ROW><id>13940999</id><snippet>def be_awesome():
    pass


if __name__ == '__main__':
   def be_more_awesome():
        pass
</snippet></ROW><ROW><id>13940999</id><snippet>be_more_awesome</snippet></ROW><ROW><id>13940999</id><snippet>__name__</snippet></ROW><ROW><id>13940999</id><snippet>main</snippet></ROW><ROW><id>13940999</id><snippet>__name__</snippet></ROW><ROW><id>13941018</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin/python</snippet></ROW><ROW><id>13941018</id><snippet>    sudo virtualenv curdir -p /Library/Frameworks/Python.framework/Versions/2.7/bin/python
</snippet></ROW><ROW><id>13941070</id><snippet>post_save</snippet></ROW><ROW><id>13941070</id><snippet>User</snippet></ROW><ROW><id>13941070</id><snippet>from django.db.models.signals import post_save
from django.contrib.auth.models import User

def create_statistic(sender, *args, **kwargs):
    if kwargs.get('created'):
        s = Statisics( comments=0, thanked=0, user=kwargs['instance'])

post_save.connect(create_statistics, sender=User)
</snippet></ROW><ROW><id>13941070</id><snippet>Statistics</snippet></ROW><ROW><id>13941094</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>13941094</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; s = "[81, 102, 114, 132, 194, 210, 228, 317, 357, 358, 379, 396, 407, 417, 418, 420, 470, 471, 506, 526, 533, 538]"
&gt;&gt;&gt; ast.literal_eval(s)
[81, 102, 114, 132, 194, 210, 228, 317, 357, 358, 379, 396, 407, 417, 418, 420, 470, 471, 506, 526, 533, 538]
</snippet></ROW><ROW><id>13941097</id><snippet>import numpy as np

def foo(a, b):
    # cond is a boolean array marking where the condition is met
    cond = a[1:] &lt; a[:-1]
    cond = np.insert(cond, 0, False)
    # values is an array of the items in from a that will be used to fill b
    values = a[cond]
    values = np.insert(values, 0, b[0])
    # labels is an array of increasing indices into values
    label = cond.cumsum()
    b[:] = values[label]
</snippet></ROW><ROW><id>13941149</id><snippet>div</snippet></ROW><ROW><id>13941149</id><snippet>div</snippet></ROW><ROW><id>13941149</id><snippet>level : int or name
    Broadcast across a level, matching Index values on the
    passed MultiIndex level

In [39]: concentration.div(weight, level='Land Use')
Out[39]:
                                    1E          1N           1S           2
Land Use    Parameter
Airfield    BOD5 (mg/l)       0.818004    5.198238     3.668831    2.697970
            Ortho P (mg/l)    0.003914    0.044053     0.016234    0.005076
            TSS (mg/l)        3.469667  505.286344    13.993506    0.464467
            Zn (mg/l)         0.001957    0.044053     0.000804    0.002538
Commercial  BOD5 (mg/l)      72.000000    0.245892          NaN    2.957746
            Cu (mg/l)         0.087400    0.000431          NaN    0.003662
            O&amp;G (mg/l)       77.000000    0.745305          NaN    2.469484
Open Space  TSS (mg/l)      463.750000  602.000000  6045.000000  367.500000
            Zn (mg/l)        15.875000    1.380000    66.000000   17.500000
Parking Lot BOD5 (mg/l)       2.800000    0.129961    10.329365   18.654971
            O&amp;G (mg/l)        3.090909    0.289883     5.345238   10.994152
Rooftops    BOD5 (mg/l)       1.666667   35.714286   661.176471  103.333333
</snippet></ROW><ROW><id>13941175</id><snippet>s * n</snippet></ROW><ROW><id>13941175</id><snippet>s * n, n * s</snippet></ROW><ROW><id>13941175</id><snippet>n</snippet></ROW><ROW><id>13941175</id><snippet>s</snippet></ROW><ROW><id>13941175</id><snippet>s</snippet></ROW><ROW><id>13941175</id><snippet>n</snippet></ROW><ROW><id>13941175</id><snippet>[' '] * 8</snippet></ROW><ROW><id>13941175</id><snippet>' '</snippet></ROW><ROW><id>13941175</id><snippet>board.append()</snippet></ROW><ROW><id>13941175</id><snippet>board</snippet></ROW><ROW><id>13941239</id><snippet>#example items
items = [{'width':5, 'height':10, 'cost':200}, {'width':6, 'height':9, 'cost':2}]

#whatever you want your criteria to be
def calculate_criteria(item):
    return item['width']+item['height']+item['cost']

# create subsets based on criterion
subsets = {}
for item in items:
    criteria = calculate_criteria(item)
    subset = subsets.get(criteria, list())
    subset.append(item)
    subsets[criteria] = subset

print subsets
{17: [{'width': 6, 'cost': 2, 'height': 9}], 215: [{'width': 5, 'cost': 200, 'height': 10}]}
</snippet></ROW><ROW><id>13941239</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>13941239</id><snippet># create subsets based on criterion
subsets = collections.defaultdict(list)
for item in items:
    subsets[calculate_criteria(item)].append(item)
</snippet></ROW><ROW><id>13941569</id><snippet>.</snippet></ROW><ROW><id>13941569</id><snippet>re.DOTALL</snippet></ROW><ROW><id>13941569</id><snippet>re.compile()</snippet></ROW><ROW><id>13941569</id><snippet>\s*</snippet></ROW><ROW><id>13941569</id><snippet>In [5]: re.findall(r'&lt;/ul&gt;\s*(.*?)\s*&lt;p', s)
Out[5]: ['Brian']
</snippet></ROW><ROW><id>13941593</id><snippet>ctx.get_pool("file_pool").append(self._filename, str(data))
</snippet></ROW><ROW><id>13941593</id><snippet>ctx.get_pool("file_pool").append(self._filename, data.encode('utf8'))
</snippet></ROW><ROW><id>13941593</id><snippet>filedata.decode('utf8')</snippet></ROW><ROW><id>13941691</id><snippet>somenumber</snippet></ROW><ROW><id>13941691</id><snippet>bisect</snippet></ROW><ROW><id>13941691</id><snippet>dict</snippet></ROW><ROW><id>13941704</id><snippet>args</snippet></ROW><ROW><id>13941704</id><snippet>threading.Thread</snippet></ROW><ROW><id>13941704</id><snippet>tr = threading.Thread(target=ben, args=(u,)) # comma makes args into a 1-tuple
</snippet></ROW><ROW><id>13941774</id><snippet>data = {"data" : "24.3"}
data_json = json.dumps(data)
headers = {'Content-type': 'application/json'}

response = requests.post(url, data=data_json, headers=headers)
</snippet></ROW><ROW><id>13941774</id><snippet>url</snippet></ROW><ROW><id>13941774</id><snippet>http://httpbin.org/post</snippet></ROW><ROW><id>13941774</id><snippet>&gt;&gt;&gt; import json
&gt;&gt;&gt; import requests
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; url = 'http://httpbin.org/post'
&gt;&gt;&gt; data = {"data" : "24.3"}
&gt;&gt;&gt; data_json = json.dumps(data)
&gt;&gt;&gt; headers = {'Content-type': 'application/json'}
&gt;&gt;&gt; response = requests.post(url, data=data_json, headers=headers)
&gt;&gt;&gt; pprint.pprint(response.json())
{u'args': {},
 u'data': u'{"data": "24.3"}',
 u'files': {},
 u'form': {},
 u'headers': {u'Accept': u'*/*',
              u'Accept-Encoding': u'gzip, deflate, compress',
              u'Connection': u'keep-alive',
              u'Content-Length': u'16',
              u'Content-Type': u'application/json',
              u'Host': u'httpbin.org',
              u'User-Agent': u'python-requests/1.0.3 CPython/2.6.8 Darwin/11.4.2'},
 u'json': {u'data': u'24.3'},
 u'origin': u'109.247.40.35',
 u'url': u'http://httpbin.org/post'}
&gt;&gt;&gt; pprint.pprint(response.json()['json'])
{u'data': u'24.3'}
</snippet></ROW><ROW><id>13941806</id><snippet>pylab.arrow</snippet></ROW><ROW><id>13941806</id><snippet>FancyArrow</snippet></ROW><ROW><id>13941806</id><snippet>head_width</snippet></ROW><ROW><id>13941806</id><snippet>head_length</snippet></ROW><ROW><id>13941806</id><snippet>import math
import pylab

pylab.plot(range(11), range(11))

opt = {'head_width': 0.4, 'head_length': 0.4, 'width': 0.2,
        'length_includes_head': True}
for i in xrange(1, 360, 20):
    x = math.radians(i)*math.cos(math.radians(i))
    y = math.radians(i)*math.sin(math.radians(i))

    # Here is your method.    
    arr = pylab.Arrow(4, 6, x, y, fc='r', alpha=0.3)
    pylab.gca().add_patch(arr)

    # Here is the proposed method.
    pylab.arrow(4, 6, x, y, alpha=0.8, **opt)

pylab.show()
</snippet></ROW><ROW><id>13941865</id><snippet>Empty</snippet></ROW><ROW><id>13941865</id><snippet>multiprocessing</snippet></ROW><ROW><id>13941865</id><snippet>multiprocessing</snippet></ROW><ROW><id>13941865</id><snippet>Queue</snippet></ROW><ROW><id>13941865</id><snippet>queue</snippet></ROW><ROW><id>13941865</id><snippet>import Queue</snippet></ROW><ROW><id>13941865</id><snippet>import multiprocessing
import Queue # or queue in Python 3

f = multiprocessing.Queue()
try:
    f.get(True,0.1)
except Queue.Empty: # Queue here refers to the  module, not a class
    print 'foo'
</snippet></ROW><ROW><id>13941980</id><snippet>bb2temp.index.values</snippet></ROW><ROW><id>13941980</id><snippet>In [1]: bb2temp.index.values.astype('d')
Out[1]: 
array([  1.22403588e+12,   1.22405867e+12,   1.22408299e+12,
         1.22410577e+12,   1.22413010e+12,   1.22415288e+12,
         1.22417720e+12,   1.22419998e+12])
</snippet></ROW><ROW><id>13941980</id><snippet>results.astype('datetime64')</snippet></ROW><ROW><id>13941999</id><snippet>Pickler()</snippet></ROW><ROW><id>13941999</id><snippet>Unpickler()</snippet></ROW><ROW><id>13941999</id><snippet>pickle</snippet></ROW><ROW><id>13941999</id><snippet>cPickle</snippet></ROW><ROW><id>13941999</id><snippet>Pickler()</snippet></ROW><ROW><id>13941999</id><snippet>Unpickler()</snippet></ROW><ROW><id>13941999</id><snippet>pickle.STOP</snippet></ROW><ROW><id>13941999</id><snippet>STOP</snippet></ROW><ROW><id>13942023</id><snippet>    import requests
    from requests_ntlm import HttpNtlmAuth

    requests.get("http://ntlm_protected_site.com",auth=HttpNtlmAuth('domain\\username','password'))
</snippet></ROW><ROW><id>13942046</id><snippet>&lt;img src="img?img_id=%s"&gt;</snippet></ROW><ROW><id>13942046</id><snippet>img</snippet></ROW><ROW><id>13942046</id><snippet>&lt;/img&gt;</snippet></ROW><ROW><id>13942046</id><snippet>&lt;img&gt;</snippet></ROW><ROW><id>13942046</id><snippet>Image</snippet></ROW><ROW><id>13942046</id><snippet>no image</snippet></ROW><ROW><id>13942046</id><snippet>Image</snippet></ROW><ROW><id>13942046</id><snippet>application = webapp.WSGIApplication([
    ('/', MainPage),
    ('/img', Image),
    ('/upload2', UploadPage2),
    ], debug=True)
</snippet></ROW><ROW><id>13942046</id><snippet>/img</snippet></ROW><ROW><id>13942046</id><snippet>Image</snippet></ROW><ROW><id>13942046</id><snippet>src</snippet></ROW><ROW><id>13942046</id><snippet>&lt;img src="/img?img_id=%s"&gt;</snippet></ROW><ROW><id>13942104</id><snippet>In [17]: l = [[0, 1], [3, 1], [200, 1], [8000, 1], [9000, 1], [20000, 1]]

In [24]: [(k,len(list(g))) for k,g in itertools.groupby(l, lambda x:x[0]-x[0]%7200)]
Out[24]: [(0, 3), (7200, 2), (14400, 1)]
</snippet></ROW><ROW><id>13942104</id><snippet>collections.Counter</snippet></ROW><ROW><id>13942104</id><snippet>In [26]: sorted(collections.Counter(x[0]-x[0]%7200 for x in l).items())
Out[26]: [(0, 3), (7200, 2), (14400, 1)]
</snippet></ROW><ROW><id>13942104</id><snippet>In [29]: c = collections.Counter(x[0]-x[0]%7200 for x in l)

In [30]: [(t, c.get(t, 0)) for t in range(0, 72000, 7200)]
Out[30]: 
[(0, 3),
 (7200, 2),
 (14400, 1),
 (21600, 0),
 (28800, 0),
 (36000, 0),
 (43200, 0),
 (50400, 0),
 (57600, 0),
 (64800, 0)]
</snippet></ROW><ROW><id>13942104</id><snippet>t</snippet></ROW><ROW><id>13942104</id><snippet>c.get(t, 0)</snippet></ROW><ROW><id>13942104</id><snippet>0</snippet></ROW><ROW><id>13942215</id><snippet>from itertools import groupby

for k, g in groupby(range(len(this_array)), lambda i: this_array[i] == 9999):
    if k:
        indices = list(g)
        new_v = (this_array[indices[0]-1] + this_array[indices[-1]+1]) / 2
        this_array[indices[0]:indices[-1]+1].fill(new_v)
</snippet></ROW><ROW><id>13942215</id><snippet>9999</snippet></ROW><ROW><id>13942215</id><snippet>from itertools import groupby

for k, g in groupby(range(len(this_array)), lambda i: this_array[i] == 9999):
    if k:
        indices = list(g)
        prev_i, next_i = indices[0]-1, indices[-1]+1
        before = this_array[prev_i] if prev_i != -1 else this_array[next_i]
        after = this_array[next_i] if next_i != len(this_array) else before
        this_array[indices[0]:next_i].fill((before + after) / 2)
</snippet></ROW><ROW><id>13942215</id><snippet>&gt;&gt;&gt; from itertools import groupby
&gt;&gt;&gt; this_array = np.array([9999, 4, 1, 9999, 9999, 9999, -5, -4, 9999])
&gt;&gt;&gt; for k, g in groupby(range(len(this_array)), lambda i: this_array[i] == 9999):
...     if k:
...         indices = list(g)
...         prev_i, next_i = indices[0]-1, indices[-1]+1
...         before = this_array[prev_i] if prev_i != -1 else this_array[next_i]
...         after = this_array[next_i] if next_i != len(this_array) else before
...         this_array[indices[0]:next_i].fill((before + after) / 2)
...
&gt;&gt;&gt; this_array
array([ 4,  4,  1, -2, -2, -2, -5, -4, -4])
</snippet></ROW><ROW><id>13942225</id><snippet>__init__</snippet></ROW><ROW><id>13942225</id><snippet># base_class.py

class BaseClass(object):
"""BaseClass"""

    @classmethod
    @pytest.fixture(scope = "class", autouse = True)
    def setup(self):
        self.bla = 'bla'

#test_class.py

import pytest
from base_class import BaseClass

class TestSmth(BaseClass):
    def test_test(self):
        print self.bla

if __name__ == '__main__':
    pytest.main([__file__, '-v'])
</snippet></ROW><ROW><id>13942225</id><snippet>TestSmth</snippet></ROW><ROW><id>13942225</id><snippet>@pytest.fixture</snippet></ROW><ROW><id>13942236</id><snippet>numpy</snippet></ROW><ROW><id>13942236</id><snippet>list</snippet></ROW><ROW><id>13942236</id><snippet>__getitem__</snippet></ROW><ROW><id>13942236</id><snippet>intptr_t</snippet></ROW><ROW><id>13942236</id><snippet>ctypes</snippet></ROW><ROW><id>13942236</id><snippet>ctypes</snippet></ROW><ROW><id>13942236</id><snippet>const char *</snippet></ROW><ROW><id>13942236</id><snippet>str</snippet></ROW><ROW><id>13942236</id><snippet>bytes</snippet></ROW><ROW><id>13942236</id><snippet>struct</snippet></ROW><ROW><id>13942236</id><snippet>ctypes</snippet></ROW><ROW><id>13942236</id><snippet>buffer</snippet></ROW><ROW><id>13942236</id><snippet>struct</snippet></ROW><ROW><id>13942236</id><snippet>ctypes</snippet></ROW><ROW><id>13942236</id><snippet>numpy.array</snippet></ROW><ROW><id>13942236</id><snippet>numpy.array</snippet></ROW><ROW><id>13942236</id><snippet>ctypes</snippet></ROW><ROW><id>13942236</id><snippet>numpy</snippet></ROW><ROW><id>13942236</id><snippet>const char *</snippet></ROW><ROW><id>13942236</id><snippet>str</snippet></ROW><ROW><id>13942236</id><snippet>bytes</snippet></ROW><ROW><id>13942236</id><snippet>numpy</snippet></ROW><ROW><id>13942236</id><snippet>buffer</snippet></ROW><ROW><id>13942236</id><snippet>numpy</snippet></ROW><ROW><id>13942236</id><snippet>list</snippet></ROW><ROW><id>13942236</id><snippet>PyObject *makelist(int array[], size_t size) {
    PyObject *l = PyList_New(size);
    for (size_t i = 0; i != size; ++i) {
        PyList_SET_ITEM(l, i, PyInt_FromLong(array[i]));
    }
    return l;
}
</snippet></ROW><ROW><id>13942236</id><snippet>numpy.array</snippet></ROW><ROW><id>13942236</id><snippet>array</snippet></ROW><ROW><id>13942236</id><snippet>PyObject *makearray(int array[], size_t size) {
    npy_int dim = size;
    return PyArray_SimpleNewFromData(1, &amp;dim, (void *)array);
}
</snippet></ROW><ROW><id>13942236</id><snippet>PyObject *</snippet></ROW><ROW><id>13942236</id><snippet>numpy.array</snippet></ROW><ROW><id>13942236</id><snippet>list</snippet></ROW><ROW><id>13942236</id><snippet>bytes</snippet></ROW><ROW><id>13942236</id><snippet>Py_BuildValue</snippet></ROW><ROW><id>13942236</id><snippet>myfunc</snippet></ROW><ROW><id>13942236</id><snippet>mylist</snippet></ROW><ROW><id>13942236</id><snippet>makelist</snippet></ROW><ROW><id>13942236</id><snippet>if (!PyCallable_Check(myfunc)) {
    PyErr_SetString(PyExc_TypeError, "function is not callable?!");
    return NULL;
}
PyObject *arglist = Py_BuildValue("(o)", mylist);
PyObject *result = PyObject_CallObject(myfunc, arglist);
Py_DECREF(arglist);
return result;
</snippet></ROW><ROW><id>13942236</id><snippet>myfunc</snippet></ROW><ROW><id>13942236</id><snippet>Py_BuildValue</snippet></ROW><ROW><id>13942236</id><snippet>[PyObject_CallObject][6]</snippet></ROW><ROW><id>13942236</id><snippet>PyObject_CallObject(callable_object, args)</snippet></ROW><ROW><id>13942236</id><snippet>apply(callable_object, args)</snippet></ROW><ROW><id>13942236</id><snippet>callable_object(*args)</snippet></ROW><ROW><id>13942236</id><snippet>myfunc(mylist)</snippet></ROW><ROW><id>13942236</id><snippet>myfunc(*(mylist,))</snippet></ROW><ROW><id>13942236</id><snippet>tuple</snippet></ROW><ROW><id>13942236</id><snippet>PyObject *arglist = PyTuple_Pack(1, mylist);
</snippet></ROW><ROW><id>13942236</id><snippet>Py_BuildValue</snippet></ROW><ROW><id>13942236</id><snippet>PyArg_ParseTuple</snippet></ROW><ROW><id>13942236</id><snippet>tuple</snippet></ROW><ROW><id>13942236</id><snippet>myfunc</snippet></ROW><ROW><id>13942236</id><snippet>PyModule</snippet></ROW><ROW><id>13942236</id><snippet>PyMapping</snippet></ROW><ROW><id>13942236</id><snippet>import mymodule</snippet></ROW><ROW><id>13942236</id><snippet>mymodule.myfunc(mylist)</snippet></ROW><ROW><id>13942236</id><snippet>int callModuleFunc(int array[], size_t size) {
    PyObject *mymodule = PyImport_ImportModule("mymodule");
    PyObject *myfunc = PyObject_GetAttrString(mymodule, "myfunc");
    PyObject *mylist = PyList_New(size);
    for (size_t i = 0; i != size; ++i) {
        PyList_SET_ITEM(l, i, PyInt_FromLong(array[i]));
    }
    PyObject *arglist = Py_BuildValue("(o)", mylist);
    PyObject *result = PyObject_CallObject(myfunc, arglist);
    int retval = (int)PyInt_AsLong(result);
    Py_DECREF(result);
    Py_DECREF(arglist);
    Py_DECREF(mylist);
    Py_DECREF(myfunc);
    Py_DECREF(mymodule);
    return retval;
}
</snippet></ROW><ROW><id>13942236</id><snippet>Py_DECREF</snippet></ROW><ROW><id>13942236</id><snippet>return NULL</snippet></ROW><ROW><id>13942236</id><snippet>unique_ptr&lt;PyObject, Py_DecRef&gt;</snippet></ROW><ROW><id>13942236</id><snippet>cython --embed</snippet></ROW><ROW><id>13942306</id><snippet>@app.route('/')
def aws_api_route_puppet_apply(ip=None):
    def generate():
        for row in somemethod(var1,var2,var3):
            yield row + '\n'
    return Response(generate(),  mimetype='application/json')
</snippet></ROW><ROW><id>13942380</id><snippet>def</snippet></ROW><ROW><id>13942380</id><snippet>def</snippet></ROW><ROW><id>13942380</id><snippet>import re

sample = 'foo.apples'
data_file = open("file1.py", "r")
out_file = open("file2.txt", "w")
within_def = False
def_indent = 0

for line in data_file:
    def_match = re.match(r'(\s*)def\s+start\s*\(', line)  # EDIT: fixed regex
    if def_match and not within_def:
        within_def = True
        def_indent = len(def_match.group(1))
    elif within_def and re.match(r'\s{%s}\S' % def_indent, line):
        within_def = False

    if within_def and sample in line:
        out_file.writelines(line)

out_file.close()
data_file.close()
</snippet></ROW><ROW><id>13942380</id><snippet>file1.py</snippet></ROW><ROW><id>13942679</id><snippet>string</snippet></ROW><ROW><id>13942715</id><snippet>bisect</snippet></ROW><ROW><id>13942715</id><snippet>&gt;&gt;&gt; import bisect
&gt;&gt;&gt; lst = [207, 357, 470, 497, 537]
&gt;&gt;&gt; bisect.bisect_left(lst, 0)
0
&gt;&gt;&gt; bisect.bisect_left(lst, 360)
2
</snippet></ROW><ROW><id>13942724</id><snippet>urllib</snippet></ROW><ROW><id>13942724</id><snippet>StringIO.StringIO</snippet></ROW><ROW><id>13943038</id><snippet>os.path</snippet></ROW><ROW><id>13943038</id><snippet>java.io.File</snippet></ROW><ROW><id>13943038</id><snippet>java.nio.file.Files</snippet></ROW><ROW><id>13943072</id><snippet>pathlib</snippet></ROW><ROW><id>13943072</id><snippet>Unipath</snippet></ROW><ROW><id>13943072</id><snippet>forked-path</snippet></ROW><ROW><id>13943072</id><snippet>twisted</snippet></ROW><ROW><id>13943072</id><snippet>PyQt</snippet></ROW><ROW><id>13943072</id><snippet>pathlib.Path(mypath).parts[0]
Unipath.Path(mypath).split_root()[0]
Unipath.Path(mypath).components()[0]
path.path(mypath).splitall()[0]
</snippet></ROW><ROW><id>13943072</id><snippet>components = path.path(mypath).splitall()[0]
return components[0] if len(components[0]) &gt; 1 else components[0]/components[1]
</snippet></ROW><ROW><id>13943072</id><snippet>os.path</snippet></ROW><ROW><id>13943108</id><snippet>datetime.datetime</snippet></ROW><ROW><id>13943108</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; fmt = '%Y.%m.%d'
&gt;&gt;&gt; s = '2012.11.07'
&gt;&gt;&gt; dt = datetime.datetime.strptime(s, fmt)
&gt;&gt;&gt; dt
datetime.datetime(2012, 11, 7, 0, 0)
</snippet></ROW><ROW><id>13943108</id><snippet>datetime</snippet></ROW><ROW><id>13943108</id><snippet>datetime</snippet></ROW><ROW><id>13943108</id><snippet>&gt;&gt;&gt; tt = dt.timetuple()
&gt;&gt;&gt; tt.tm_yday
312
</snippet></ROW><ROW><id>13943108</id><snippet>2012312</snippet></ROW><ROW><id>13943108</id><snippet>&gt;&gt;&gt; int('%d%03d' % (tt.tm_year, tt.tm_yday))
2012312
&gt;&gt;&gt; tt.tm_year * 1000 + tt.tm_day
2012312
</snippet></ROW><ROW><id>13943108</id><snippet>timetuple</snippet></ROW><ROW><id>13943108</id><snippet>jdcal</snippet></ROW><ROW><id>13943108</id><snippet>pip install jdcal</snippet></ROW><ROW><id>13943108</id><snippet>&gt;&gt;&gt; sum(jdcal.gcal2jd(dt.year, dt.month, dt.day))
2456238.5
</snippet></ROW><ROW><id>13943263</id><snippet>modify</snippet></ROW><ROW><id>13943297</id><snippet>import sys
import os
import webbrowser
import gdata.gauth
import oauth2client.client
import oauth2client.file
import oauth2client.tools
import gdata.gauth
import gdata.client
import gdata.apps.groups.client

APICONSOLE = 'https://code.google.com/apis/console'
SCOPES = 'https://apps-apis.google.com/a/feeds/groups/'
OAUTH2FILENAME = 'credentials.oauth2'
OAUTH2JSONFILE = 'client_secrets.json'
OAUTH2USERAGENT = 'GROUPS'
MISSING_OAUTHJSONFILE_MESSAGE = """
You must create or download a client secrets json file (%s)
from the Google APIs console &lt;https://code.google.com/apis/console&gt;.
Attemping to open page with your browser ...
""" % os.path.join(os.path.dirname(__file__), OAUTH2JSONFILE)

# populate with approprate values
DOMAIN = 'your-domain'
GROUP_ID = 'agroup@your.domain'

if not os.path.isfile(OAUTH2JSONFILE):
  message = MISSING_OAUTHJSONFILE_MESSAGE
  print message
  try:
    webbrowser.open(str(APICONSOLE))
  except Exception, e:
    print "Error opening web page"
    sys.exit(1)
  message = 'When %s is created/downloaded press Enter to continue ... ' %(OAUTH2JSONFILE)
  raw_input(message)
oauth2_flow = oauth2client.client.flow_from_clientsecrets(OAUTH2JSONFILE,
  scope=SCOPES,message=MISSING_OAUTHJSONFILE_MESSAGE)
storage = oauth2client.file.Storage(OAUTH2FILENAME)
oauth2_credentials = storage.get()
if oauth2_credentials is None or oauth2_credentials.invalid:
  oauth2_credentials = oauth2client.tools.run(oauth2_flow, storage)
oauth2_token = gdata.gauth.OAuth2Token(
  client_id=oauth2_credentials.client_id,
  client_secret=oauth2_credentials.client_secret,
  scope=SCOPES,
  user_agent=OAUTH2USERAGENT,
  access_token=oauth2_credentials.access_token,
  refresh_token=oauth2_credentials.refresh_token)
# authorize client
groups_client = oauth2_token.authorize(
  gdata.apps.groups.client.GroupsProvisioningClient(domain=DOMAIN))
print 'Authorized domain %s . . .\n' %(DOMAIN)
group_entry = groups_client.RetrieveGroup(group_id=GROUP_ID)
print group_entry.group_id
print group_entry.group_name
print group_entry.description
print group_entry.email_permission

sys.exit(0)
</snippet></ROW><ROW><id>13943420</id><snippet>main()</snippet></ROW><ROW><id>13943420</id><snippet>def main():
    courses, instructors, times = create_info()    # &lt;&lt;&lt;

    print('Please enter a menu choice...')
    choice = input('[c]ourses, [i]nstructors, [t]imes: ').upper()

    if choice == 'C':
        print(courses)                             # &lt;&lt;&lt;
</snippet></ROW><ROW><id>13943420</id><snippet># &lt;&lt;&lt;</snippet></ROW><ROW><id>13943440</id><snippet>stderr</snippet></ROW><ROW><id>13943440</id><snippet>libcurl</snippet></ROW><ROW><id>13943440</id><snippet>"additional stuff not fine" curl transfer.c</snippet></ROW><ROW><id>13943440</id><snippet>libcurl</snippet></ROW><ROW><id>13943440</id><snippet>curl</snippet></ROW><ROW><id>13943440</id><snippet>libcurl</snippet></ROW><ROW><id>13943440</id><snippet>libcurl</snippet></ROW><ROW><id>13943440</id><snippet>libcurl</snippet></ROW><ROW><id>13943440</id><snippet>transfer.c</snippet></ROW><ROW><id>13943440</id><snippet>curl</snippet></ROW><ROW><id>13943605</id><snippet>    courses.get(CS101)
    instructors.get(CS101)
    times.get(CS101)
</snippet></ROW><ROW><id>13943605</id><snippet>CS101</snippet></ROW><ROW><id>13943605</id><snippet>print(courses.get('CS101'))
</snippet></ROW><ROW><id>13943605</id><snippet>print(courses['CS101'])
</snippet></ROW><ROW><id>13943790</id><snippet>&gt;&gt;&gt; collections.Counter(x[0] for x in itertools.groupby(my_list)).get(1, 0) &gt; 1
True
&gt;&gt;&gt; collections.Counter(x[0] for x in itertools.groupby(my_list)).get(2, 0) &gt; 1
False
</snippet></ROW><ROW><id>13943872</id><snippet>species = ["H2O", "CO2", "O2"]
coeff = ['1', '-4', '3']

pos = [c + s for c, s in zip(coeff, species) if int(c) &gt; 0]
neg = [c[1:] + s for c, s in zip(coeff, species) if int(c) &lt; 0]
print ("+".join(pos))+"="+("+".join(neg))
</snippet></ROW><ROW><id>13943872</id><snippet>coeff</snippet></ROW><ROW><id>13943872</id><snippet>pos</snippet></ROW><ROW><id>13943872</id><snippet>neg</snippet></ROW><ROW><id>13943872</id><snippet>0</snippet></ROW><ROW><id>13944106</id><snippet>def render(self, text, color):
    return magiclibrary.generateText(text, color)
</snippet></ROW><ROW><id>13944106</id><snippet>render</snippet></ROW><ROW><id>13944140</id><snippet>In [2]: os.environ['probe1'] = 'hello'

In [3]: os.system('echo $probe1')
hello
</snippet></ROW><ROW><id>13944240</id><snippet>In [8]: ar = np.array([[1,2,3], [4,5,6]])

In [9]: ar
Out[9]: 
array([[1, 2, 3],
       [4, 5, 6]])

In [11]: ar[:, 1:]
Out[11]: 
array([[2, 3],
       [5, 6]])
</snippet></ROW><ROW><id>13944314</id><snippet>_</snippet></ROW><ROW><id>13944314</id><snippet>_</snippet></ROW><ROW><id>13944314</id><snippet>_, content = myfunc()[2]
</snippet></ROW><ROW><id>13944314</id><snippet>myfunc()[2][1]</snippet></ROW><ROW><id>13944314</id><snippet>myfunc()[2]</snippet></ROW><ROW><id>13944314</id><snippet>[1]</snippet></ROW><ROW><id>13944314</id><snippet>_</snippet></ROW><ROW><id>13944314</id><snippet>[2][1]</snippet></ROW><ROW><id>13944314</id><snippet>_</snippet></ROW><ROW><id>13944314</id><snippet>gettext</snippet></ROW><ROW><id>13944314</id><snippet>import gettext
_ = gettext.gettext
</snippet></ROW><ROW><id>13944314</id><snippet>from gettext import gettext as _
</snippet></ROW><ROW><id>13944314</id><snippet>_</snippet></ROW><ROW><id>13944314</id><snippet>gettext</snippet></ROW><ROW><id>13944314</id><snippet>gettext</snippet></ROW><ROW><id>13944314</id><snippet>_</snippet></ROW><ROW><id>13944314</id><snippet>_</snippet></ROW><ROW><id>13944314</id><snippet>gettext</snippet></ROW><ROW><id>13944314</id><snippet>myfunc</snippet></ROW><ROW><id>13944314</id><snippet>def mywrapperfunc():
    _, content = myfunc()[2]
    return content
</snippet></ROW><ROW><id>13944314</id><snippet>content = mywrapperfunc()
</snippet></ROW><ROW><id>13944314</id><snippet>myfunc</snippet></ROW><ROW><id>13944314</id><snippet>mywrapperfunc</snippet></ROW><ROW><id>13944314</id><snippet>myfunc</snippet></ROW><ROW><id>13944314</id><snippet>mywrapperfunc</snippet></ROW><ROW><id>13944314</id><snippet>_</snippet></ROW><ROW><id>13944314</id><snippet>gettext</snippet></ROW><ROW><id>13944314</id><snippet>_</snippet></ROW><ROW><id>13944314</id><snippet>_</snippet></ROW><ROW><id>13944345</id><snippet>class aiRespond:
    def generateResponse( self, external_input ):
        return external_input

    def giveResponse( self, external_input ):
        return self.generateResponse( external_input) #remove self as parameter,add return

aiResponder = aiRespond()
retrieve_ai_response = aiResponder.giveResponse #remove "()"

while 1:
    external_input = raw_input("&gt; ")
    print retrieve_ai_response(external_input)
</snippet></ROW><ROW><id>13944407</id><snippet>#!/usr/bin/env python

import wx
from wx import stc
import keyword

class PyDialog(wx.Dialog):
    def __init__(self):
        wx.Dialog.__init__(self, None, -1, 'Python Code')
        sizer = wx.BoxSizer(wx.VERTICAL)

        self.stc = stc.StyledTextCtrl(self, -1)
        self.stc.SetSizeHints(400, 400)
        self.stc.SetLexer(stc.STC_LEX_PYTHON)
        self.stc.SetKeyWords(0, " ".join(keyword.kwlist))
        self.stc.SetMarginType(1, stc.STC_MARGIN_NUMBER)
        # Python styles
        self.stc.StyleSetSpec(wx.stc.STC_P_DEFAULT, 'fore:#000000')
        # Comments
        self.stc.StyleSetSpec(wx.stc.STC_P_COMMENTLINE,  'fore:#008000,back:#F0FFF0')
        self.stc.StyleSetSpec(wx.stc.STC_P_COMMENTBLOCK, 'fore:#008000,back:#F0FFF0')
        # Numbers
        self.stc.StyleSetSpec(wx.stc.STC_P_NUMBER, 'fore:#008080')
        # Strings and characters
        self.stc.StyleSetSpec(wx.stc.STC_P_STRING, 'fore:#800080')
        self.stc.StyleSetSpec(wx.stc.STC_P_CHARACTER, 'fore:#800080')
        # Keywords
        self.stc.StyleSetSpec(wx.stc.STC_P_WORD, 'fore:#000080,bold')
        # Triple quotes
        self.stc.StyleSetSpec(wx.stc.STC_P_TRIPLE, 'fore:#800080,back:#FFFFEA')
        self.stc.StyleSetSpec(wx.stc.STC_P_TRIPLEDOUBLE, 'fore:#800080,back:#FFFFEA')
        # Class names
        self.stc.StyleSetSpec(wx.stc.STC_P_CLASSNAME, 'fore:#0000FF,bold')
        # Function names
        self.stc.StyleSetSpec(wx.stc.STC_P_DEFNAME, 'fore:#008080,bold')
        # Operators
        self.stc.StyleSetSpec(wx.stc.STC_P_OPERATOR, 'fore:#800000,bold')
        # Identifiers. I leave this as not bold because everything seems
        # to be an identifier if it doesn't match the above criterae
        self.stc.StyleSetSpec(wx.stc.STC_P_IDENTIFIER, 'fore:#000000')

        # Caret color
        self.stc.SetCaretForeground("BLUE")
        # Selection background
        self.stc.SetSelBackground(1, '#66CCFF')

        sizer.Add(self.stc, 0, wx.EXPAND)

        button = wx.Button(self, -1, 'Open...')
        self.Bind(wx.EVT_BUTTON, self.OnOpen, button)
        sizer.Add(button)

        self.SetSizer(sizer)
        sizer.Fit(self)

    def OnOpen(self, evt):
        dlg = wx.FileDialog(
            self,
            message = 'Choose File',
            wildcard = 'Python source (*.py)|*.py',
            style = wx.OPEN)

        if dlg.ShowModal() != wx.ID_OK:
            return

        with open(dlg.GetPath()) as fo:
            self.stc.SetText(fo.read())

        dlg.Destroy()


if __name__ == '__main__':
    app = wx.PySimpleApp()
    dlg = PyDialog()
    with open(__file__) as fo:
        dlg.stc.SetText(fo.read())
    dlg.ShowModal()
</snippet></ROW><ROW><id>13944421</id><snippet>m\[mi\+\+\]="(?P&lt;day&gt;\d{2})\.(?P&lt;month&gt;\d{2})\.(?P&lt;year&gt;\d{2}) (?P&lt;time&gt;[\d:]{8})\|(?P&lt;v1&gt;\d+);(?P&lt;v2&gt;\d+);(?P&lt;v3&gt;\d+);(?P&lt;v4&gt;\d+);(?P&lt;v5&gt;\d+).+</snippet></ROW><ROW><id>13944421</id><snippet>20\P&lt;year&gt;\P&lt;month&gt;\P&lt;day&gt;,\P&lt;time&gt;,\P&lt;v3&gt;,\P&lt;v1&gt;,-1,-1,\P&lt;v5&gt;,\P&lt;v4&gt;</snippet></ROW><ROW><id>13944421</id><snippet>m\[mi\+\+\]="</snippet></ROW><ROW><id>13944421</id><snippet>[^\d]+</snippet></ROW><ROW><id>13944421</id><snippet>import re

def getPage():
    url = "http://url:port/min_day.js"
    req = urllib2.Request(url)
    response = urllib2.urlopen(req)
    return response.read()    

def repl(match):
    return '20%s%s%s,%s,%s,%s,-1,-1,%s,%s'%(match.group('year'),
                                            match.group('month'),
                                            match.group('day'),
                                            match.group('time'),
                                            match.group('v3'),
                                            match.group('v1'),
                                            match.group('v5'),
                                            match.group('v4'))

pattern = re.compile(r'm\[mi\+\+\]="(?P&lt;day&gt;\d{2})\.(?P&lt;month&gt;\d{2})\.(?P&lt;year&gt;\d{2}) (?P&lt;time&gt;[\d:]{8})\|(?P&lt;v1&gt;\d+);(?P&lt;v2&gt;\d+);(?P&lt;v3&gt;\d+);(?P&lt;v4&gt;\d+);(?P&lt;v5&gt;\d+).+')

data = [re.sub(pattern, repl, line).split(',') for line in getPage().split('\n')]

# If you want to sort your data
data = sorted(data, key=lambda x:x[0], reverse=True)

# If you want to write your data back to a formatted string
new_string = ';'.join(','.join(x) for x in data)

# If you want to write it back to file
with open('new/file.txt', 'w') as f:
    f.write(new_string)
</snippet></ROW><ROW><id>13944824</id><snippet>In [61]: u4 = pytz.timezone('America/Chicago')
In [62]: print(u4.localize(datetime.datetime(2010, 5, 2, 11, 10)))
2010-05-02 11:10:00-05:00
</snippet></ROW><ROW><id>13944824</id><snippet>astimezone</snippet></ROW><ROW><id>13944824</id><snippet>tzinfo</snippet></ROW><ROW><id>13944824</id><snippet>datetime.datetime(year, month, day, hour, minute, tzinfo = dateutil_tz)
</snippet></ROW><ROW><id>13944824</id><snippet>pytz_tz.localize(datetime.datetime(year, month, day, hour, minute))
</snippet></ROW><ROW><id>13944824</id><snippet>import dateutil.tz
import datetime
import pytz

now  = datetime.datetime.now()

for name in pytz.all_timezones:
    dateutil_tz = dateutil.tz.gettz(name)
    pytz_tz = pytz.timezone(name)
    dateutil_date = datetime.datetime(
        now.year, now.month, now.day, now.hour, now.minute, tzinfo = dateutil_tz)
    pytz_date = pytz_tz.localize(datetime.datetime(
        now.year, now.month, now.day, now.hour, now.minute))

    try:
        assert dateutil_date.isoformat() == pytz_date.isoformat()
    except AssertionError:
        print(name)
        print(dateutil_date.isoformat())
        print(pytz_date.isoformat())           
</snippet></ROW><ROW><id>13944824</id><snippet>America/Argentina/San_Luis
2012-12-18T22:32:00-04:00 &lt;-- dateutil datetime
2012-12-18T22:32:00-03:00 &lt;-- pytz's datetime
</snippet></ROW><ROW><id>13944824</id><snippet>America/Argentina/San_Luis time zone offset is: 
UTC / GMT -03:00 hours
</snippet></ROW><ROW><id>13944861</id><snippet>my_list = [col for row in matrix for col in row]
</snippet></ROW><ROW><id>13944920</id><snippet>kwargs</snippet></ROW><ROW><id>13944920</id><snippet>{# This will not work #}
{% macro example_2(one, two) %}
    * {{one}} - {{two}}
{% endmacro %}
{{example_2(1, 2, test="Hello")}}
</snippet></ROW><ROW><id>13944920</id><snippet>{# This will #}
{% macro example_2(one, two) %}
    * {{one}} - {{two}}
    * {{kwargs}}
{% endmacro %}
{{example_2(1, 2, test="Hello")}}
</snippet></ROW><ROW><id>13944926</id><snippet>export(table_or_records, filename, field_names=None,
format='csv', header=True, codepage=None)
writes the records using CSV or tab-delimited format, using the filename
given if specified, otherwise the table name
if table_or_records is a collection of records (not an actual table) they
should all be of the same format
</snippet></ROW><ROW><id>13944926</id><snippet>export</snippet></ROW><ROW><id>13944926</id><snippet>Table</snippet></ROW><ROW><id>13944926</id><snippet>dbf.export(in_db, csv_fn,  header=True)</snippet></ROW><ROW><id>13944926</id><snippet>in_db.export(filename=csv_fn, header=True)</snippet></ROW><ROW><id>13944926</id><snippet>open</snippet></ROW><ROW><id>13944926</id><snippet>import dbf

csv_fn = r'sdv.csv'

table = dbf.Table('temptable.dbf')
table.open()

dat=('John Doe', 31)
table.append(dat)
dbf.export(table, csv_fn, header = True)
</snippet></ROW><ROW><id>13945049</id><snippet>dis</snippet></ROW><ROW><id>13945049</id><snippet>&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(foo)
  2           0 LOAD_GLOBAL              0 (Bar)
              3 CALL_FUNCTION            0
              6 DUP_TOP             
              7 STORE_FAST               0 (bar)
             10 STORE_FAST               1 (initial_bar)

  3          13 SETUP_LOOP              32 (to 48)
        &gt;&gt;   16 LOAD_GLOBAL              1 (True)
             19 POP_JUMP_IF_FALSE       47

  4          22 LOAD_GLOBAL              0 (Bar)
             25 CALL_FUNCTION            0
             28 STORE_FAST               2 (next_bar)

  5          31 LOAD_FAST                2 (next_bar)
             34 DUP_TOP             
             35 STORE_FAST               0 (bar)
             38 LOAD_FAST                0 (bar)
             41 STORE_ATTR               2 (next_bar)
             44 JUMP_ABSOLUTE           16
        &gt;&gt;   47 POP_BLOCK           

  6     &gt;&gt;   48 LOAD_FAST                1 (initial_bar)
             51 RETURN_VALUE        
</snippet></ROW><ROW><id>13945049</id><snippet>next_bar</snippet></ROW><ROW><id>13945049</id><snippet>bar</snippet></ROW><ROW><id>13945049</id><snippet>bar.next_bar</snippet></ROW><ROW><id>13945049</id><snippet>&gt;&gt;&gt; def a():
...     b = c = d
... 
&gt;&gt;&gt; dis.dis(a)
  2           0 LOAD_GLOBAL              0 (d)
              3 DUP_TOP             
              4 STORE_FAST               0 (b)
              7 STORE_FAST               1 (c)
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE        
</snippet></ROW><ROW><id>13945049</id><snippet>b = c = d</snippet></ROW><ROW><id>13945049</id><snippet>b = d; c = d</snippet></ROW><ROW><id>13945049</id><snippet>bar = bar.next_bar = next_bar
</snippet></ROW><ROW><id>13945049</id><snippet>bar.next_bar = next_bar
bar = next_bar
</snippet></ROW><ROW><id>13945049</id><snippet>bar = next_bar
bar.next_bar = next_bar
</snippet></ROW><ROW><id>13945049</id><snippet>a, b = b, a</snippet></ROW><ROW><id>13945049</id><snippet>[0, 2]</snippet></ROW><ROW><id>13945049</id><snippet>x = [0, 1]
i = 0
i, x[i] = 1, 2
print x
</snippet></ROW><ROW><id>13945049</id><snippet>bar.next_bar = bar = next_bar</snippet></ROW><ROW><id>13945131</id><snippet>@view_config(context=Exception)
def error_view(exc, request):
    #log or do other stuff to exc...
    return Response("Sorry there was an error")
</snippet></ROW><ROW><id>13945683</id><snippet>text=True</snippet></ROW><ROW><id>13945683</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('''
... &lt;html&gt;
... &lt;body&gt;
... &lt;a href = "http:\\www.google.com"&gt;Google&lt;br&gt;
... &lt;a href = "http:\\www.example.com"&gt;Example&lt;/a&gt;
... &lt;/body&gt;
... &lt;/html&gt;
... ''')
&gt;&gt;&gt; [a.get_text().strip() for a in soup.find_all('a')]
[u'Google', u'Example']
&gt;&gt;&gt; [a.get_text().strip() for a in soup.find_all('a', text=True)]
[u'Example']
</snippet></ROW><ROW><id>13945777</id><snippet>"({:d} goals, ${:d})".format(self.goals, self.penalties)
</snippet></ROW><ROW><id>13945777</id><snippet>goals</snippet></ROW><ROW><id>13945777</id><snippet>penalties</snippet></ROW><ROW><id>13945777</id><snippet>"({} goals, ${})".format(self.goals, self.penalties)
</snippet></ROW><ROW><id>13945777</id><snippet>"({0.goals:d} goals, ${0.penalties:d})".format(self)
</snippet></ROW><ROW><id>13945777</id><snippet>{}</snippet></ROW><ROW><id>13945777</id><snippet>{0}</snippet></ROW><ROW><id>13945777</id><snippet>0</snippet></ROW><ROW><id>13945777</id><snippet>{:d}</snippet></ROW><ROW><id>13945777</id><snippet>{0:d}</snippet></ROW><ROW><id>13945777</id><snippet>0</snippet></ROW><ROW><id>13945777</id><snippet>"({goals} goals, ${penalties})".format(goals:2, penalties:4)
"({goals} goals, ${penalties})".format(**self.__dict__)

"first goal: {0.goal_list[0]}".format(self)
"second goal: {.goal_list[1]}".format(self)

"conversion rate: {:.2f}".format(self.goals / self.shots) # '0.20'
"conversion rate: {:.2%}".format(self.goals / self.shots) # '20.45%'
"conversion rate: {:.0%}".format(self.goals / self.shots) # '20%'

"self: {!s}".format(self) # 'Player: Bob'
"self: {!r}".format(self) # '&lt;__main__.Player instance at 0x00BF7260&gt;'

"games: {:&gt;3}".format(player1.games)  # 'games: 123'
"games: {:&gt;3}".format(player2.games)  # 'games:   4'
"games: {:0&gt;3}".format(player2.games) # 'games: 004'
</snippet></ROW><ROW><id>13945808</id><snippet>if response.rstrip() == '0D6020100':
   print 'beepity boop beep woohoo!'
</snippet></ROW><ROW><id>13945848</id><snippet>minimize</snippet></ROW><ROW><id>13945848</id><snippet>minimize_scalar</snippet></ROW><ROW><id>13945848</id><snippet>from scipy.optimize import minimize_scalar

def f(x):
    return (1 - log_norm_obj.cdf(x)) / log_norm_obj.pdf(x) - x

result = minimize_scalar(f)        
print result.x 
# this would print your result
</snippet></ROW><ROW><id>13945848</id><snippet>result = minimize_scalar(f, bounds=(0, 10.), method='bounded')
</snippet></ROW><ROW><id>13945848</id><snippet>minimize</snippet></ROW><ROW><id>13945848</id><snippet>fmin</snippet></ROW><ROW><id>13946053</id><snippet>from PIL import ImageGrab, Image
import win32gui

hwnd = 2622054 # My python intepreter window
thumbnailsize = 128, 128

# Set the current window to your window
win32gui.SetForegroundWindow(hwnd)
# Get the size of the window rect.
bbox = win32gui.GetWindowRect(hwnd)
# Grab the image using PIL and thumbnail.
img = ImageGrab.grab(bbox)
img.thumbnail(thumbnailsize, Image.ANTIALIAS)
# Save.
img.save('c:/test/test.png')
</snippet></ROW><ROW><id>13946090</id><snippet>decode_credentials</snippet></ROW><ROW><id>13946090</id><snippet>db = DAL('mysql://user1:P%40sswd@localhost/test', decode_credentials=True)
</snippet></ROW><ROW><id>13946763</id><snippet>import numpy as np
from scipy.fftpack import dct, idct

# Lets create a 3D array and fill it with some values
a = numpy.random.rand(3,3,3)

f,x,y = a.shape
b = np.zeros((f,x,y))

b = dct(dct(dct(a).transpose(0,2,1)).transpose(1,2,0)).transpose(1,2,0).transpose(0,2,1)
</snippet></ROW><ROW><id>13946942</id><snippet>'?'</snippet></ROW><ROW><id>13946942</id><snippet>def new_response(self, link_pattern, link, response, ref_id=""):
    self.db_cursor.execute('''INSERT INTO tb_memory VALUES 
    (?, ?, ?, ?)''', (ref_id, link_pattern, link, response))
</snippet></ROW><ROW><id>13946942</id><snippet>execute</snippet></ROW><ROW><id>13948002</id><snippet>re.search</snippet></ROW><ROW><id>13948002</id><snippet>re.match</snippet></ROW><ROW><id>13948002</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'somestring.asp?1=123'
&gt;&gt;&gt; re.search(r"(?&lt;!(asp|php|jsp))\?.*", s)
&gt;&gt;&gt; s = 'somestring.xml?1=123'
&gt;&gt;&gt; re.search(r"(?&lt;!(asp|php|jsp))\?.*", s)
&lt;_sre.SRE_Match object at 0x0000000002DCB098&gt;
</snippet></ROW><ROW><id>13948002</id><snippet>Match</snippet></ROW><ROW><id>13948002</id><snippet>m</snippet></ROW><ROW><id>13948002</id><snippet>m.group()</snippet></ROW><ROW><id>13948002</id><snippet>?1=123</snippet></ROW><ROW><id>13948002</id><snippet>(?&lt;!asp|php|jsp)\?.*
</snippet></ROW><ROW><id>13948016</id><snippet>with open('Smartphones.csv', 'wb') as csvfile:
    spamwriter = csv.writer(csvfile, delimiter=',')        
    for anchor in soup.findAll('a', {"class": "clickStreamSingleItem"}):
        print anchor['title']        
        spamwriter.writerow([anchor['title'].encode('utf8')])   
</snippet></ROW><ROW><id>13948016</id><snippet>w</snippet></ROW><ROW><id>13948016</id><snippet>.setdefaultencoding()</snippet></ROW><ROW><id>13948016</id><snippet>reload()</snippet></ROW><ROW><id>13948051</id><snippet>CharField</snippet></ROW><ROW><id>13948051</id><snippet>TextField</snippet></ROW><ROW><id>13948051</id><snippet>source = models.CharField(choices=SOURCE_CHOICES, max_length=3, ... )
</snippet></ROW><ROW><id>13948478</id><snippet>MONGODB_DB
MONGODB_USERNAME
MONGODB_PASSWORD
MONGODB_HOST
MONGODB_PORT
</snippet></ROW><ROW><id>13948505</id><snippet>frames per second</snippet></ROW><ROW><id>13948505</id><snippet>writer = cv2.VideoWriter(filename="my_video.avi",  #Provide a file to write the video to
fourcc=cv.CV_FOURCC('i','Y', 'U', 'V'),            #Use whichever codec works for you...
fps=15,                                        #How many frames do you want to display per second in your video?
frameSize=(width, height))                     #The size of the frames you are writing
</snippet></ROW><ROW><id>13948505</id><snippet>while True:
    flag, frame = capture.read()
    cv2.imshow("Camera", frame)
    key_pressed = cv2.waitKey(10)
    if key_pressed == 27:                           #Escape key
        break
    writer.write(frame)
cv2.destroyAllWindows()
</snippet></ROW><ROW><id>13948505</id><snippet>fps</snippet></ROW><ROW><id>13948505</id><snippet>fps</snippet></ROW><ROW><id>13948565</id><snippet>File "/opt/django/fileupload/views.py" in upload_file
    56.         folder_info = url.split(':')[1]  &lt;-- This line
</snippet></ROW><ROW><id>13949209</id><snippet>^</snippet></ROW><ROW><id>13949209</id><snippet>search</snippet></ROW><ROW><id>13949209</id><snippet>/servers/search/?search=^200.&amp;page=1&amp;range=30
</snippet></ROW><ROW><id>13949209</id><snippet>page</snippet></ROW><ROW><id>13949209</id><snippet>range</snippet></ROW><ROW><id>13949209</id><snippet>search</snippet></ROW><ROW><id>13949219</id><snippet>gtk.Image.set_from_pixbuf</snippet></ROW><ROW><id>13949219</id><snippet>import pygtk
pygtk.require('2.0')
import gtk

pics = []
clicks = 0

def on_destroy (widget):
    gtk.main_quit()
    return False

def on_button_clicked (widget, image):
    global clicks
    clicks += 1
    image.set_from_pixbuf (pics[clicks % len(pics)])

def create ():
    window = gtk.Window(gtk.WINDOW_TOPLEVEL)
    window.connect("destroy", on_destroy)

    pics.append (gtk.gdk.pixbuf_new_from_file("sample1.png"))
    pics.append (gtk.gdk.pixbuf_new_from_file("sample2.png"))

    image = gtk.Image()
    image.set_from_pixbuf(pics[0])

    button = gtk.Button ("Switch Image")
    button.connect("clicked", on_button_clicked, image)

    vbox = gtk.VBox()
    vbox.pack_start (image)
    vbox.pack_start (button)

    window.add(vbox)
    window.show_all()

if __name__ == "__main__":
    create()
    gtk.main()
</snippet></ROW><ROW><id>13949456</id><snippet>image_urls = Field()
images = Field()
</snippet></ROW><ROW><id>13949711</id><snippet>import re

li = [u'\r\n\r\n\r\n \r\n \r\n \r\n 123 Main St., Peoria\r\n \r\n\r\n \r\n |\r\n \r\n \r\n \r\n \r\n 123-456-789\r\n \r\n \r\n \r\n ']
print re.sub(r'\s+', ' ', li[0].replace(' |', ';'))
</snippet></ROW><ROW><id>13949711</id><snippet>123 Main St., Peoria; 123-456-789
</snippet></ROW><ROW><id>13949980</id><snippet>CREATOR: gd-jpeg v1.0 (using IJG JPEG v62), default quality
</snippet></ROW><ROW><id>13950213</id><snippet>.string</snippet></ROW><ROW><id>13950213</id><snippet>print anchor1.string
</snippet></ROW><ROW><id>13950213</id><snippet>.string</snippet></ROW><ROW><id>13950213</id><snippet>NavigableString</snippet></ROW><ROW><id>13950213</id><snippet>strip()</snippet></ROW><ROW><id>13950213</id><snippet>print unicode(anchor1.string).strip()
</snippet></ROW><ROW><id>13950213</id><snippet>for anchor1 in soup.findAll('div', {"class": "listGrid-price"}):
    if anchor1.string:
        print unicode(anchor1.string).strip()
</snippet></ROW><ROW><id>13950213</id><snippet>$99.99
$0.99
$0.99
$299.99
$199.99
$49.99
$49.99
$99.99
$0.99
$99.99
$0.01
$0.01
$0.01
$0.01
$0.01
</snippet></ROW><ROW><id>13950295</id><snippet>scipy.cluster.hierarchy.ward</snippet></ROW><ROW><id>13950295</id><snippet>sklearn</snippet></ROW><ROW><id>13950295</id><snippet>Ward</snippet></ROW><ROW><id>13950295</id><snippet>sklearn</snippet></ROW><ROW><id>13950455</id><snippet>struct</snippet></ROW><ROW><id>13950455</id><snippet>unhexlify</snippet></ROW><ROW><id>13950455</id><snippet>int(.., 16)</snippet></ROW><ROW><id>13950455</id><snippet>&lt;</snippet></ROW><ROW><id>13950455</id><snippet>&gt;</snippet></ROW><ROW><id>13950455</id><snippet>I</snippet></ROW><ROW><id>13950455</id><snippet>&gt;&gt;&gt; struct.unpack('&gt;I', foo_bin)[0]
2984846677
&gt;&gt;&gt; struct.unpack('&lt;I', foo_bin)[0]
1428548017
</snippet></ROW><ROW><id>13950455</id><snippet>struct</snippet></ROW><ROW><id>13950495</id><snippet>def read_file(self, key_name):
    k = Key(self.__bucket)
    k.key = key_name
    if k.exists():
        rawData = k.read()
    else :
        rawData = None
    return rawData
</snippet></ROW><ROW><id>13950847</id><snippet>d = c.decode("windows-1252")
print d
</snippet></ROW><ROW><id>13951161</id><snippet>win32service</snippet></ROW><ROW><id>13951161</id><snippet>C:\Python27\Lib\site-packages\win32</snippet></ROW><ROW><id>13951161</id><snippet>os.chdir(yourdir)</snippet></ROW><ROW><id>13951239</id><snippet>SELECT
    m.name
    , w.*
FROM
    man m
         INNER JOIN manWork mw ON m.id = mw.man_id
         INNER JOIN work w ON mw.work_id = w.work_id
</snippet></ROW><ROW><id>13951437</id><snippet>re.findall</snippet></ROW><ROW><id>13951437</id><snippet>r'(?i)((?:sun|mon|tue|wed|thu|fri|sat)(?:\s*,\s*(?:sun|mon|tue|wed|thu|fri|sat))*)\s+from\s+(\d{1,2}(?::\d{1,2})?(?:[ap]m|[ap]\.m\.))(?:\s+to\s+|\s*[-,]\s*)(\d{1,2}(?::\d{1,2})?(?:[ap]m|[ap]\.m\.))'
</snippet></ROW><ROW><id>13951437</id><snippet>(?i)
</snippet></ROW><ROW><id>13951437</id><snippet>,</snippet></ROW><ROW><id>13951437</id><snippet>((?:sun|mon|tue|wed|thu|fri|sat)(?:\s*,\s*(?:sun|mon|tue|wed|thu|fri|sat))*)
</snippet></ROW><ROW><id>13951437</id><snippet>from</snippet></ROW><ROW><id>13951437</id><snippet>\s+from\s+
</snippet></ROW><ROW><id>13951437</id><snippet>am</snippet></ROW><ROW><id>13951437</id><snippet>a.m.</snippet></ROW><ROW><id>13951437</id><snippet>a.m</snippet></ROW><ROW><id>13951437</id><snippet>am.</snippet></ROW><ROW><id>13951437</id><snippet>pm</snippet></ROW><ROW><id>13951437</id><snippet>(\d{1,2}(?::\d{1,2})?\s*(?:[ap]m|[ap]\.m\.))
</snippet></ROW><ROW><id>13951437</id><snippet>to</snippet></ROW><ROW><id>13951437</id><snippet>to</snippet></ROW><ROW><id>13951437</id><snippet>-</snippet></ROW><ROW><id>13951437</id><snippet>,</snippet></ROW><ROW><id>13951437</id><snippet>to</snippet></ROW><ROW><id>13951437</id><snippet>-</snippet></ROW><ROW><id>13951437</id><snippet>,</snippet></ROW><ROW><id>13951437</id><snippet>(?:\s+to\s+|\s*[-,]\s*)
</snippet></ROW><ROW><id>13951437</id><snippet>(\d{1,2}(?::\d{1,2})?\s*(?:[ap]m|[ap]\.m\.))
</snippet></ROW><ROW><id>13951437</id><snippet>theharshest</snippet></ROW><ROW><id>13951437</id><snippet>re.split</snippet></ROW><ROW><id>13951437</id><snippet>r'\s+from\s+'</snippet></ROW><ROW><id>13951437</id><snippet>r'\s*(to|[-,])\s*'</snippet></ROW><ROW><id>13951724</id><snippet>$.get</snippet></ROW><ROW><id>13951724</id><snippet>$.get</snippet></ROW><ROW><id>13951724</id><snippet>location.replace('/reports/csv_list_report/');
</snippet></ROW><ROW><id>13951977</id><snippet>{$ block title %}The current time{% endblock %}
</snippet></ROW><ROW><id>13951977</id><snippet>{% block title %}The current time{% endblock %}
</snippet></ROW><ROW><id>13952073</id><snippet>sys.executable</snippet></ROW><ROW><id>13952073</id><snippet>/Library/Frameworks/Python.framework/Version/2.7/bin/python2.7</snippet></ROW><ROW><id>13952108</id><snippet>number_found</snippet></ROW><ROW><id>13952108</id><snippet>results.number_found</snippet></ROW><ROW><id>13952264</id><snippet>USE_TZ</snippet></ROW><ROW><id>13952264</id><snippet>False</snippet></ROW><ROW><id>13952264</id><snippet>USE_TZ</snippet></ROW><ROW><id>13952264</id><snippet>True</snippet></ROW><ROW><id>13952594</id><snippet>q_object = None

def setup_func():
    global q_object
    q_object = u'item'

@with_setup(setup_func)
def test_set():
    global q_object
    assert q_object == u'item'
</snippet></ROW><ROW><id>13952594</id><snippet>class ExampleTest(unittest.TestCase):
    def setUp(self):
        self.q_object = u'item'

    def test_a(self):
        assert self.q_object == u'item'
</snippet></ROW><ROW><id>13952855</id><snippet>bookie</snippet></ROW><ROW><id>13952855</id><snippet>loadFinished</snippet></ROW><ROW><id>13952855</id><snippet>count</snippet></ROW><ROW><id>13952855</id><snippet>params</snippet></ROW><ROW><id>13952855</id><snippet>grabber</snippet></ROW><ROW><id>13952855</id><snippet>QSignalMapper</snippet></ROW><ROW><id>13952855</id><snippet>mapper.mapping(id-of-grabber-object)</snippet></ROW><ROW><id>13952855</id><snippet>#!/usr/bin/env python
from PyQt4.QtCore import pyqtSlot, QObject, QSignalMapper, QTimer
from PyQt4.QtGui import QApplication
from PyQt4.QtWebKit import QWebView


class bookie(QObject):
    def __init__(self, parent=None):
        super(bookie, self).__init__(parent)

        self.count  = 0
        self.url    = 'http://some website.com/search?param={0}'
        self.params = range(100) # instead of [1,2,3,4,5,6,7,8,9,10,11,12] and so on...

        Grabber = QWebView # This would be your Grabber class

        self.mapper = QSignalMapper(self)
        self.mapper.mapped.connect(self.on_mapper_mapped)

        for grabberNumber in range(10): # Create 10 Grabber instances
            grabber = Grabber()
            grabber.loadFinished.connect(self.mapper.map)

            self.mapper.setMapping(grabber, grabberNumber)

            grabber.loadFinished.emit(True) # Initialize the grabber by emitting loadFinished

    def on_mapper_mapped(self, gNumber):
        self.count += 1
        if self.count &lt; len(self.params):
            gParam  = self.params[self.count]   
            grabber = self.mapper.mapping(gNumber)
            #grabber.load(QUrl(self.url.format(gParam)))

            # Next 2 lines for testing purposes, remove &amp; uncomment the previous line

            print "GRABBER:", gNumber, "PARAMETER:", gParam
            QTimer.singleShot(1, lambda:grabber.loadFinished.emit(True)) 

if __name__ == "__main__":
    import  sys

    app = QApplication(sys.argv)
    main = bookie()
</snippet></ROW><ROW><id>13953075</id><snippet>StringIO</snippet></ROW><ROW><id>13953075</id><snippet>cStringIO</snippet></ROW><ROW><id>13953075</id><snippet>StringIO</snippet></ROW><ROW><id>13953075</id><snippet>StringIO</snippet></ROW><ROW><id>13953075</id><snippet>i = StringIO(i.getvalue())  # create a cStringIO.StringO instance for a cStringIO.StringI instance.
</snippet></ROW><ROW><id>13953075</id><snippet>StringIO</snippet></ROW><ROW><id>13953075</id><snippet>i.seek(0)
</snippet></ROW><ROW><id>13953075</id><snippet>Image.open()</snippet></ROW><ROW><id>13953075</id><snippet>i</snippet></ROW><ROW><id>13953075</id><snippet>img = Image.open(i)
</snippet></ROW><ROW><id>13953275</id><snippet>dict()</snippet></ROW><ROW><id>13953275</id><snippet>dict((item, item) for item in a.split(','))
</snippet></ROW><ROW><id>13953275</id><snippet>d = {} # alternatively, d = dict()
for item in a.split(','):
    d[item] = item
</snippet></ROW><ROW><id>13953332</id><snippet>header=None</snippet></ROW><ROW><id>13953332</id><snippet>parse_dates=[[0,1,2]]</snippet></ROW><ROW><id>13953332</id><snippet>In [4]: pandas.io.parsers.read_csv("input.csv", parse_dates=[[0,1,2]], header=None)
Out[4]: 
              X0_X1_X2    X3    X4   X5
0  2012-10-03 00:00:00  AAPL   BUY  200
1  2012-12-05 00:00:00  AAPL  SELL  200
</snippet></ROW><ROW><id>13953486</id><snippet>run('echo "{0} ALL=(ALL) ALL" &gt;&gt; /etc/sudoers'.format(env.user))
</snippet></ROW><ROW><id>13953581</id><snippet>datetime.strptime()</snippet></ROW><ROW><id>13953581</id><snippet>datetime.datetime.strptime(d, '%Y-%m-%d').date()
</snippet></ROW><ROW><id>13953581</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; d = "2012-12-19"                
&gt;&gt;&gt; datetime.datetime.strptime(d, '%Y-%m-%d').date()
datetime.date(2012, 12, 19)
</snippet></ROW><ROW><id>13953581</id><snippet>f[0]</snippet></ROW><ROW><id>13953581</id><snippet>datetime.date(*f)
</snippet></ROW><ROW><id>13953671</id><snippet>Open_file = open(File_Name,'rb').readlines()
</snippet></ROW><ROW><id>13953686</id><snippet>x-amz-acl</snippet></ROW><ROW><id>13953942</id><snippet>ForeignKey</snippet></ROW><ROW><id>13953942</id><snippet>ManyToMany</snippet></ROW><ROW><id>13953942</id><snippet>ForeignKey</snippet></ROW><ROW><id>13953942</id><snippet>forwards</snippet></ROW><ROW><id>13953942</id><snippet>ManyToMany</snippet></ROW><ROW><id>13953942</id><snippet>backwards</snippet></ROW><ROW><id>13953942</id><snippet>forwards</snippet></ROW><ROW><id>13953942</id><snippet>class Migration(SchemaMigration):
    def forwards(self, orm):
        for manufacturer in orm.Manufacturer.objects.all():
             for car in manufacturer.car.all():
                  car.manufacturer = manufacturer
                  car.save()
</snippet></ROW><ROW><id>13953942</id><snippet>backwards</snippet></ROW><ROW><id>13953945</id><snippet>self.ui.PoseBtn_GridLayout.setColumnMinimumWidth(4,4)

spacerItem = QtGui.QSpacerItem(40, 20, QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Minimum)
self.ui.PoseBtn_GridLayout.addItem(spacerItem, 1, 1, 1, 1)

spacerItem1 = QtGui.QSpacerItem(20, 40, QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Expanding)
self.ui.PoseBtn_GridLayout.addItem(spacerItem1, 1, 0, 1, 1)

self.button = QtGui.QPushButton('')
self.button.setIcon(self._icon)
self.button.setIconSize(QtCore.QSize(128, 128))
self.button.setMinimumSize(QtCore.QSize(128, 128))
self.button.setMaximumSize(QtCore.QSize(128, 128))
self.ui.PoseBtn_GridLayout.addWidget(self.button, 0, 0, 1, 1)
</snippet></ROW><ROW><id>13953945</id><snippet>QWidget</snippet></ROW><ROW><id>13953945</id><snippet>QWidget</snippet></ROW><ROW><id>13953945</id><snippet>QSpaceItem</snippet></ROW><ROW><id>13954247</id><snippet>b</snippet></ROW><ROW><id>13954247</id><snippet>':'.join(str(x) for x in b)
</snippet></ROW><ROW><id>13954247</id><snippet>$ python -m timeit -s 'b = ["x", 2, "y"]' '":".join(map(str,b))'
1000000 loops, best of 3: 1.66 usec per loop
$python -m timeit -s 'b = ["x", 2, "y"]' '":".join([str(x) for x in b])'
1000000 loops, best of 3: 1.49 usec per loop
$ python -m timeit -s 'b = ["x", 2, "y"]' '":".join(str(x) for x in b)'
100000 loops, best of 3: 3.26 usec per loop
$python -m timeit -s 'from itertools import imap; b = ["x", 2, "y"]' '":".join(imap(str,b))'
100000 loops, best of 3: 2.83 usec per loop
</snippet></ROW><ROW><id>13954247</id><snippet>$ python3 -m timeit -s 'b = ["x", 2, "y"]' '":".join(map(str,b))'
100000 loops, best of 3: 2.6 usec per loop
$ python3 -m timeit -s 'b = ["x", 2, "y"]' '":".join([str(x) for x in b])'
100000 loops, best of 3: 2.08 usec per loop
$ python3 -m timeit -s 'b = ["x", 2, "y"]' '":".join(str(x) for x in b)'
100000 loops, best of 3: 3.39 usec per loop
</snippet></ROW><ROW><id>13954247</id><snippet>$ python -m timeit -s 'b = list(range(10000))' '":".join(str(x) for x in b)'
100 loops, best of 3: 4.83 msec per loop
$ python -m timeit -s 'b = list(range(10000))' '":".join([str(x) for x in b])'
100 loops, best of 3: 4.33 msec per loop
$ python -m timeit -s 'b = list(range(10000))' '":".join(map(str,b))'
100 loops, best of 3: 3.29 msec per loop
</snippet></ROW><ROW><id>13954247</id><snippet>$ python3 -m timeit -s 'b = list(range(10000))' '":".join(str(x) for x in b)'
100 loops, best of 3: 6.42 msec per loop
$ python3 -m timeit -s 'b = list(range(10000))' '":".join([str(x) for x in b])'
100 loops, best of 3: 5.51 msec per loop
$ python3 -m timeit -s 'b = list(range(10000))' '":".join(map(str,b))'
100 loops, best of 3: 4.55 msec per loop
</snippet></ROW><ROW><id>13954247</id><snippet>map</snippet></ROW><ROW><id>13954247</id><snippet>map</snippet></ROW><ROW><id>13954857</id><snippet>sort()</snippet></ROW><ROW><id>13954857</id><snippet>sorted()</snippet></ROW><ROW><id>13954857</id><snippet>var.sort(key=lambda v: v.upper())
</snippet></ROW><ROW><id>13954857</id><snippet>key</snippet></ROW><ROW><id>13954857</id><snippet>&gt;&gt;&gt; var=['ant','bat','cat','Bat','Lion','Goat','Cat','Ant']
&gt;&gt;&gt; sorted(var, key=lambda v: v.upper())
['ant', 'Ant', 'bat', 'Bat', 'cat', 'Cat', 'Goat', 'Lion']
</snippet></ROW><ROW><id>13954857</id><snippet>Ant</snippet></ROW><ROW><id>13954857</id><snippet>ant</snippet></ROW><ROW><id>13954857</id><snippet>&gt;&gt;&gt; sorted(var, key=lambda v: (v.upper(), v[0].islower()))
['Ant', 'ant', 'Bat', 'bat', 'Cat', 'cat', 'Goat', 'Lion']
</snippet></ROW><ROW><id>13954857</id><snippet>('ANT', False)</snippet></ROW><ROW><id>13954857</id><snippet>Ant</snippet></ROW><ROW><id>13954857</id><snippet>('ANT', True)</snippet></ROW><ROW><id>13954857</id><snippet>ant</snippet></ROW><ROW><id>13954857</id><snippet>True</snippet></ROW><ROW><id>13954857</id><snippet>False</snippet></ROW><ROW><id>13954918</id><snippet>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.decomposition(u'\xb4')
'&lt;compat&gt; 0020 0301'
</snippet></ROW><ROW><id>13954918</id><snippet>\u00B4</snippet></ROW><ROW><id>13954918</id><snippet>\u02CA</snippet></ROW><ROW><id>13954949</id><snippet>zip</snippet></ROW><ROW><id>13954949</id><snippet>sort</snippet></ROW><ROW><id>13954949</id><snippet>unzip</snippet></ROW><ROW><id>13954949</id><snippet>&gt;&gt;&gt; X = [5,6,2,3,1]
&gt;&gt;&gt; Y = [7,2,3,4,6]
</snippet></ROW><ROW><id>13954949</id><snippet>&gt;&gt;&gt; sorted(zip(X,Y))
[(1, 6), (2, 3), (3, 4), (5, 7), (6, 2)]
</snippet></ROW><ROW><id>13954949</id><snippet>zip(*...)</snippet></ROW><ROW><id>13954949</id><snippet>&gt;&gt;&gt; zip(*sorted(zip(X,Y)))
[(1, 2, 3, 5, 6), (6, 3, 4, 7, 2)]
</snippet></ROW><ROW><id>13954949</id><snippet>&gt;&gt;&gt; X,Y = zip(*sorted(zip(X,Y)))
&gt;&gt;&gt; X
(1, 2, 3, 5, 6)
&gt;&gt;&gt; Y
(6, 3, 4, 7, 2)
</snippet></ROW><ROW><id>13954949</id><snippet>tuple</snippet></ROW><ROW><id>13954949</id><snippet>list</snippet></ROW><ROW><id>13954949</id><snippet>X = [1,1,5,7] #sorted already
Y = [2,1,4,6] #Not already sorted.
</snippet></ROW><ROW><id>13954949</id><snippet>X = (1,1,5,7)
Y = (1,2,4,6) 
</snippet></ROW><ROW><id>13954949</id><snippet>key</snippet></ROW><ROW><id>13954949</id><snippet>sorted</snippet></ROW><ROW><id>13954949</id><snippet>from operator import itemgetter
X,Y = zip(*sorted(zip(X,Y),key=itemgetter(0)))
</snippet></ROW><ROW><id>13954949</id><snippet>&gt;&gt;&gt; X
[1, 1, 5, 7]
&gt;&gt;&gt; Y
[2, 1, 4, 6]
&gt;&gt;&gt; XX,YY = zip(*sorted(zip(X,Y)))
&gt;&gt;&gt; XX
(1, 1, 5, 7)
&gt;&gt;&gt; YY
(1, 2, 4, 6)
&gt;&gt;&gt; from operator import itemgetter
&gt;&gt;&gt; XX,YY = zip(*sorted(zip(X,Y),key=itemgetter(0)))
&gt;&gt;&gt; XX
(1, 1, 5, 7)
&gt;&gt;&gt; YY
(2, 1, 4, 6)
</snippet></ROW><ROW><id>13954965</id><snippet>f = open('words.txt', 'rU')
</snippet></ROW><ROW><id>13954965</id><snippet>U</snippet></ROW><ROW><id>13955101</id><snippet>multiprocessing</snippet></ROW><ROW><id>13955101</id><snippet>multiprocessing</snippet></ROW><ROW><id>13955197</id><snippet>\</snippet></ROW><ROW><id>13955197</id><snippet>\f</snippet></ROW><ROW><id>13955197</id><snippet>/</snippet></ROW><ROW><id>13955197</id><snippet>r''</snippet></ROW><ROW><id>13955197</id><snippet>\</snippet></ROW><ROW><id>13955197</id><snippet>r'D:\ful_automate\dl'
'D:\\ful_automate\\dl'
'D:/ful_automate/dl'
</snippet></ROW><ROW><id>13955197</id><snippet>&gt;&gt;&gt; 'D:\ful_automate\dl'
'D:\x0cul_automate\\dl'
&gt;&gt;&gt; r'D:\ful_automate\dl'
'D:\\ful_automate\\dl'
</snippet></ROW><ROW><id>13955224</id><snippet>random.sample</snippet></ROW><ROW><id>13955224</id><snippet>result = random.sample(deck, n)
</snippet></ROW><ROW><id>13955224</id><snippet>random.shuffle</snippet></ROW><ROW><id>13955224</id><snippet>random.shuffle(deck)
</snippet></ROW><ROW><id>13955285</id><snippet>None</snippet></ROW><ROW><id>13955285</id><snippet>True</snippet></ROW><ROW><id>13955285</id><snippet>False</snippet></ROW><ROW><id>13955285</id><snippet>''</snippet></ROW><ROW><id>13955377</id><snippet>cmd = "my_password=%s python script.py" % test
</snippet></ROW><ROW><id>13955696</id><snippet>[program:myscript]
command=/usr/bin/python /path/to/myscript.py
</snippet></ROW><ROW><id>13955696</id><snippet>sudo update-rc.d supervisord defaults
</snippet></ROW><ROW><id>13955696</id><snippet>USERS ALL=(ALL) NOPASSWD: /path/to/myscript.py
</snippet></ROW><ROW><id>13955696</id><snippet>[program:myscript]
command=sudo /path/to/myscript.py
</snippet></ROW><ROW><id>13955860</id><snippet>eval</snippet></ROW><ROW><id>13955860</id><snippet>*args</snippet></ROW><ROW><id>13955860</id><snippet>**kwargs</snippet></ROW><ROW><id>13955860</id><snippet>inspect</snippet></ROW><ROW><id>13955860</id><snippet>import inspect, collections
def checkif_paramcomboexists(numpeople, numreviews, prophunters, 
                             utility_funcform, goods):

    ...

    temp = inspect.getargvalues(inspect.currentframe())
    args = temp[0]
    valuedict = temp[-1]
    ordered_args_dict = collections.OrderedDict(sorted(valuedict.items(), key=lambda x: args.index(x[0])))
    paramvalues = ordered_args_dict.values()

    ...
</snippet></ROW><ROW><id>13955860</id><snippet>inspect.getargvalues(inspect.currentframe())</snippet></ROW><ROW><id>13955860</id><snippet>OrderedDict</snippet></ROW><ROW><id>13955860</id><snippet>ordered_args_dict['numpeople']</snippet></ROW><ROW><id>13955860</id><snippet>ordered_args_dict.values()</snippet></ROW><ROW><id>13955860</id><snippet>paramvalues</snippet></ROW><ROW><id>13956105</id><snippet>.astimezone()</snippet></ROW><ROW><id>13956105</id><snippet>dt.astimezone(pytz.UTC)
</snippet></ROW><ROW><id>13956136</id><snippet>sys.stdout</snippet></ROW><ROW><id>13956136</id><snippet>sys.stdout.flush()
</snippet></ROW><ROW><id>13956136</id><snippet>flush=True</snippet></ROW><ROW><id>13956136</id><snippet>print(something, flush=True)
</snippet></ROW><ROW><id>13956327</id><snippet>models.DateField</snippet></ROW><ROW><id>13956327</id><snippet>F</snippet></ROW><ROW><id>13956327</id><snippet>Books</snippet></ROW><ROW><id>13956327</id><snippet>class Books(models.Model):
    title = models.CharField(max_length=100)
    authors = models.ManyToManyField(Author)
    publishers = models.ForeignKey(Publisher)
    publication_date = models.DateField()  # &lt;--- Typo was here
</snippet></ROW><ROW><id>13956336</id><snippet>python-ordereddict</snippet></ROW><ROW><id>13956336</id><snippet>python2.6</snippet></ROW><ROW><id>13956336</id><snippet>python2.7 | python-ordereddict</snippet></ROW><ROW><id>13956336</id><snippet>python-ordereddict</snippet></ROW><ROW><id>13956336</id><snippet>OrderedDict</snippet></ROW><ROW><id>13956336</id><snippet>python2.7 | (python2.6, python-ordereddict)
</snippet></ROW><ROW><id>13956336</id><snippet>python2.7 | python2.6, python2.7 | python-ordereddict
</snippet></ROW><ROW><id>13956373</id><snippet>iptables(8)</snippet></ROW><ROW><id>13956373</id><snippet>iptables -A INPUT -p tcp -d '!' 192.0.2.1 -p 27017 --m state --state NEW -j REJECT
</snippet></ROW><ROW><id>13956373</id><snippet>iptables -L INPUT</snippet></ROW><ROW><id>13956543</id><snippet>GtkSizeGroup</snippet></ROW><ROW><id>13956817</id><snippet>{% if variable is defined %}
    value of variable: {{ variable }}
{% else %}
    variable is not defined
{% endif %}
See the default() filter for a simple way to set undefined variables.
</snippet></ROW><ROW><id>13956987</id><snippet>def y(i=i): 
    print i
</snippet></ROW><ROW><id>13956987</id><snippet>&gt;&gt;&gt; i = 1
&gt;&gt;&gt; def y(i=i): print i
... 
&gt;&gt;&gt; i = 2
&gt;&gt;&gt; y()
1
</snippet></ROW><ROW><id>13956987</id><snippet>.func_defaults</snippet></ROW><ROW><id>13956987</id><snippet>__defaults__</snippet></ROW><ROW><id>13956987</id><snippet>&gt;&gt;&gt; y.func_defaults
(1,)
</snippet></ROW><ROW><id>13957307</id><snippet>logging</snippet></ROW><ROW><id>13957471</id><snippet>if row[0] != checkID:
    if output != "":
        print output, "this is a test"

    checkID=row[0]
    output=row[0:11]


else:
    output=output + (row[8:11])
</snippet></ROW><ROW><id>13957471</id><snippet>  if row[0] != checkID:
        if output != "":
            print output, "this is a test"

            checkID=row[0]
            output=row[0:11]


    else:
        output=output + (row[8:11])
</snippet></ROW><ROW><id>13957589</id><snippet>def main():
try:
    file=open(input("Please enter the name of the file you wish to open:" ))
    A = []
    #Here I convert the list to integers to separate as numbers in order to sort later
    for val in file.read().split():
        A.append(int(val))
    file.close()
    n = len(A)
    print ("These following", n,"numbers are in the inputted file:\n", A)

    for i in range(n):
        for j in range(1,n-i):
            if A[j-1] &lt; A[j]:
                (A[j-1], A[j]) = (A[j],A[j-1]) #swap
    print("We can now organize it in descending order:\n", A)

    Output_File = input("Where would you like to save this data?")
    fileObject = open(Output_File, 'a')
    fileObject.write(str(Output_File)+'\n')
    print("Your file is now saved as",Output_File,".\nHave a nice day!")
    fileObject.close()

except IOError as e:
    print("({})".format(e))




if __name__ == '__main__':
main()
</snippet></ROW><ROW><id>13957692</id><snippet>paired_sorted = sorted(zip(List2,List3,List1),key = lambda x: (x[0],-x[1]))
l2,l3,l1 = zip(*paired_sorted)
</snippet></ROW><ROW><id>13957692</id><snippet>&gt;&gt;&gt; List1 = ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; List2 = [4, 2, 3, 2, 4]
&gt;&gt;&gt; List3 = [0.1, 0.8, 0.3, 0.6, 0.4]
&gt;&gt;&gt; paired_sorted = sorted(zip(List2,List3,List1),key = lambda x: (x[0],-x[1]))
&gt;&gt;&gt; l2,l3,l1 = zip(*paired_sorted)
&gt;&gt;&gt; print l1
('b', 'd', 'c', 'e', 'a')
</snippet></ROW><ROW><id>13957692</id><snippet>zip</snippet></ROW><ROW><id>13957692</id><snippet>zip</snippet></ROW><ROW><id>13957692</id><snippet>paired = zip(List2,List3,List1)
rev_sorted = sorted(paired,reverse=True,key=lambda x: x[1])  #"minor" sort first
paired_sorted = sorted(rev_sorted,key=lambda x:x[0])         #"major" sort last
l2,l3,l1 = zip(*paired_sorted)
</snippet></ROW><ROW><id>13957692</id><snippet>operator.itemgetter(1)</snippet></ROW><ROW><id>13957692</id><snippet>lambda x:x[1]</snippet></ROW><ROW><id>13957915</id><snippet>if something:
    raise error('My error!')
</snippet></ROW><ROW><id>13957915</id><snippet>try:
  generate_exception()
except SomeException, e:
  if not can_handle(e):
    raise
  handle_exception(e)
</snippet></ROW><ROW><id>13958001</id><snippet>SELECT  *
FROM    validity_period
WHERE   valid_from &lt;= current_date
        AND valid_to &gt;=current_date    
UNION 

--Gets the last instance where valid_until is null
SELECT * 
FROM validity_period 
WHERE   valid_from &lt;= current_date
        AND valid_to IS NULL
ORDER BY id DESC LIMIT 1 
</snippet></ROW><ROW><id>13958031</id><snippet>&gt;&gt;&gt; next(consumer['api_key'] for consumer in API_CONSUMERS if consumer['host'] == host)
'Ahth2ea5Ohngoop5'
</snippet></ROW><ROW><id>13958443</id><snippet>UTF-8</snippet></ROW><ROW><id>13958624</id><snippet>import datetime
def tmp_f(dt,x=None):
    return datetime.datetime.fromtimestamp(dt).isoformat()
mf = matplotlib.ticker.FuncFormatter(tmp_f)

ax = gca()
ax.get_xaxis().set_major_formatter(mf)
draw()
</snippet></ROW><ROW><id>13958634</id><snippet>re.findall(r'^(\w+):(.*?)(?=^\w+:|\Z)', text, flags=re.DOTALL | re.MULTILINE)
</snippet></ROW><ROW><id>13958634</id><snippet>&gt;&gt;&gt; text = '''rootvg:
... hd5                 boot       1     1     1    closed/syncd  N/A
... hd4                 jfs        38    38    1    open/syncd    /
... datavg:
... data01lv            jfs        7     7     1    open/syncd    /data1
... data02lv            jfs        7     7     1    open/syncd    /data2'''
&gt;&gt;&gt; re.findall(r'^(\w+):(.*?)(?=^\w+:|\Z)', text, flags=re.DOTALL | re.MULTILINE)
[('rootvg', '\nhd5                 boot       1     1     1    closed/syncd  N/A\nhd4                 jfs        38    38    1    open/syncd    /\n'), ('datavg', '\ndata01lv            jfs        7     7     1    open/syncd    /data1\ndata02lv            jfs        7     7     1    open/syncd    /data2')]
</snippet></ROW><ROW><id>13958634</id><snippet>re.DOTALL</snippet></ROW><ROW><id>13958634</id><snippet>.</snippet></ROW><ROW><id>13958634</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>13958634</id><snippet>^</snippet></ROW><ROW><id>13958634</id><snippet>$</snippet></ROW><ROW><id>13958634</id><snippet>^            # match at the start of a line
(\w+)        # match one or more letters or numbers and capture in group 1
:            # match a literal ':'
(.*?)        # match zero or more characters, as few as possible
(?=          # start lookahead (only match if following regex can match)
   ^\w+:       # start of line followed by word characters then ':'
   |           # OR
   \Z          # end of the string
)            # end lookahead
</snippet></ROW><ROW><id>13958634</id><snippet>re.split()</snippet></ROW><ROW><id>13958634</id><snippet>&gt;&gt;&gt; re.split(r'^(\w+):', text, flags=re.MULTILINE)
['', 'rootvg', '\nhd5                 boot       1     1     1    closed/syncd  N/A\nhd4                 jfs        38    38    1    open/syncd    /\n', 'datavg', '\ndata01lv            jfs        7     7     1    open/syncd    /data1\ndata02lv            jfs        7     7     1    open/syncd    /data2']
</snippet></ROW><ROW><id>13958634</id><snippet>&gt;&gt;&gt; matches = re.split(r'^(\w+):', text, flags=re.MULTILINE)
&gt;&gt;&gt; [(v, matches[i+1]) for i, v in enumerate(matches) if i % 2]
[('rootvg', '\nhd5                 boot       1     1     1    closed/syncd  N/A\nhd4                 jfs        38    38    1    open/syncd    /\n'), ('datavg', '\ndata01lv            jfs        7     7     1    open/syncd    /data1\ndata02lv            jfs        7     7     1    open/syncd    /data2')]
</snippet></ROW><ROW><id>13958826</id><snippet>In [1]: t = 'äïöú'

In [2]: with open('test.txt', 'w') as f:
    f.write(t)
   ...:     
</snippet></ROW><ROW><id>13958826</id><snippet>getAirportInfo</snippet></ROW><ROW><id>13958826</id><snippet>subprocess.check_output()</snippet></ROW><ROW><id>13958826</id><snippet>import subprocess

def get_airport_info():
    args = ['/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport', 
            '--scan', '--xml']
    return subprocess.check_output(args)

airportInfo = get_airport_info()
with open('wifi-data.txt', 'w') as outf:
   outf.write(airportinfo)
</snippet></ROW><ROW><id>13959029</id><snippet>result = [a for tup in y for a in tup]
</snippet></ROW><ROW><id>13959029</id><snippet>&gt;&gt;&gt; x = range(10)
&gt;&gt;&gt; y = [(i,j**2) for i,j in zip(x,x)]
&gt;&gt;&gt; [a for tup in y for a in tup]
[0, 0, 1, 1, 2, 4, 3, 9, 4, 16, 5, 25, 6, 36, 7, 49, 8, 64, 9, 81]
</snippet></ROW><ROW><id>13959029</id><snippet>y = [a for i in x for a in (i, sqrt(i), i**3, some_operation_on_i, f(i), g(i))]
</snippet></ROW><ROW><id>13959029</id><snippet>for</snippet></ROW><ROW><id>13959029</id><snippet>y = []
for i in x:
    for a in (i, sqrt(i), i**3, some_operation_on_i, f(i), g(i)):
        y.append(a)
</snippet></ROW><ROW><id>13959052</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>13959099</id><snippet>list[count]</snippet></ROW><ROW><id>13959099</id><snippet>list1[count]</snippet></ROW><ROW><id>13959099</id><snippet>list</snippet></ROW><ROW><id>13959099</id><snippet>TypeError</snippet></ROW><ROW><id>13959099</id><snippet>__getitem__()</snippet></ROW><ROW><id>13959099</id><snippet>list2 = list.append(list2,list1[count])</snippet></ROW><ROW><id>13959099</id><snippet>list1[count]</snippet></ROW><ROW><id>13959099</id><snippet>list2</snippet></ROW><ROW><id>13959099</id><snippet>list.append()</snippet></ROW><ROW><id>13959099</id><snippet>list2</snippet></ROW><ROW><id>13959099</id><snippet>.append()</snippet></ROW><ROW><id>13959099</id><snippet>None</snippet></ROW><ROW><id>13959099</id><snippet>list2</snippet></ROW><ROW><id>13959099</id><snippet>None</snippet></ROW><ROW><id>13959099</id><snippet>TypeError</snippet></ROW><ROW><id>13959099</id><snippet>NoneType</snippet></ROW><ROW><id>13959099</id><snippet>list2.append(list1[count])
</snippet></ROW><ROW><id>13959099</id><snippet>list1</snippet></ROW><ROW><id>13959099</id><snippet>x</snippet></ROW><ROW><id>13959099</id><snippet>def listtest(list1, x):
    return [item for item in list1 if item == x]
</snippet></ROW><ROW><id>13959099</id><snippet>list1.count(x)
</snippet></ROW><ROW><id>13959099</id><snippet>x</snippet></ROW><ROW><id>13959099</id><snippet>list1</snippet></ROW><ROW><id>13959167</id><snippet>zip</snippet></ROW><ROW><id>13959167</id><snippet>for num,name in zip(num_list,name_list):
    print str(num) + '\t' + name
</snippet></ROW><ROW><id>13959167</id><snippet>name_dict = {}
for num,name in zip(num_list,name_list):
    name_dict[num] = name
</snippet></ROW><ROW><id>13959167</id><snippet>for num,name in name_dict.iteritems():
    print str(num) + '\t' + name
</snippet></ROW><ROW><id>13959302</id><snippet>py</snippet></ROW><ROW><id>13959302</id><snippet>py</snippet></ROW><ROW><id>13959495</id><snippet>initial_list, temp_list = [], []
for line in open(filename):
    if line.strip() == '':
        initial_list.append(temp_list)
        temp_list = []
    else: temp_list.append(line.strip())
if len(temp_list) &gt; 0: initial_list.append(temp_list)
final_list = [item for item in initial_list if len(item) &gt; 0]
print final_list
</snippet></ROW><ROW><id>13959555</id><snippet> range(1,6) + range(15,20)
</snippet></ROW><ROW><id>13959555</id><snippet>list(range(1,6)) + list(range(15,20))
</snippet></ROW><ROW><id>13959555</id><snippet>range(101,6284) + [8001,8003,8010] + range(10000,12322)
</snippet></ROW><ROW><id>13959555</id><snippet>list(range(101,6284)) + [8001,8003,8010] + list(range(10000,12322))
</snippet></ROW><ROW><id>13959555</id><snippet>range</snippet></ROW><ROW><id>13959555</id><snippet>+</snippet></ROW><ROW><id>13959825</id><snippet>__file__</snippet></ROW><ROW><id>13959825</id><snippet>.py</snippet></ROW><ROW><id>13959825</id><snippet>.pyc</snippet></ROW><ROW><id>13959825</id><snippet>.pyc</snippet></ROW><ROW><id>13959825</id><snippet>.py</snippet></ROW><ROW><id>13959888</id><snippet>cj</snippet></ROW><ROW><id>13959888</id><snippet>In [40]: for c in cj:
   ....:     print c.name, c.value
   ....:     
   ....:     
reddit_first %7B%22firsttime%22%3A%20%22first%22%7D
</snippet></ROW><ROW><id>13960078</id><snippet>MongoClient</snippet></ROW><ROW><id>13960078</id><snippet>Connection</snippet></ROW><ROW><id>13960361</id><snippet>np.array(lst)</snippet></ROW><ROW><id>13960361</id><snippet>&gt;&gt;&gt; l = [np.arange(10).reshape((5,2)) for i in range(10)]
&gt;&gt;&gt; np.array(l).shape
(10, 5, 2)
</snippet></ROW><ROW><id>13960516</id><snippet>page_source</snippet></ROW><ROW><id>13960516</id><snippet>page_source</snippet></ROW><ROW><id>13960516</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>13960516</id><snippet>In [8]: from bs4 import BeautifulSoup

In [9]: from selenium import webdriver

In [10]: driver = webdriver.Firefox()

In [11]: driver.get('http://news.ycombinator.com')

In [12]: html = driver.page_source

In [13]: soup = BeautifulSoup(html)

In [14]: for tag in soup.find_all('title'):
   ....:     print tag.text
   ....:     
   ....:     
Hacker News
</snippet></ROW><ROW><id>13960554</id><snippet>bulk_create</snippet></ROW><ROW><id>13960554</id><snippet>.save()</snippet></ROW><ROW><id>13960554</id><snippet>pre_save</snippet></ROW><ROW><id>13960554</id><snippet>post_save</snippet></ROW><ROW><id>13960554</id><snippet>list_select_related = True</snippet></ROW><ROW><id>13960554</id><snippet>Tokens</snippet></ROW><ROW><id>13960554</id><snippet>Alerts</snippet></ROW><ROW><id>13960738</id><snippet>Actually, a crew can't work 7 consecutive days. In every 7 days, there must be 1 day-off.</snippet></ROW><ROW><id>13960738</id><snippet>random.sample()</snippet></ROW><ROW><id>13960738</id><snippet>import random
from itertools import chain
from itertools import count

def candidate(m):
    ''' Returns 2 days per week, in m days, where m is the length of the month. '''
    weeks = weeksmaker(m)
    return sorted(list(chain(*[random.sample(week, 2) for week in weeks])))

def weeksmaker(m):
    ''' Divides a month up into four weeks, randomly assigning extra days to weeks. '''
    weeks = [range(i, i+7) for i in xrange(1,29,7)]
    for i in range(m - 28):
        weeks[random.randint(1, len(weeks))-1].append(i)
    c = count(1)
    return [[c.next() for day in week] for week in weeks]

def valid(days, c):
    ''' Validity check. Cant work more than c consecutive days. '''
    for i in xrange(1, len(days)):
        if days[i] - days[i-1] &gt; c:
            return False
    else:
        return True

def daysoff(m, n, c):
    ''' In month length m, need n days off, cant work more than c consecutive days. '''
    while True:
        days = candidate(n)
        if valid(days, c):
            return days

&gt;&gt;&gt; for i in range(28, 32):
...     daysoff(i, 8, 7)
... 
[6, 7, 10, 14, 18, 20, 27, 28]
[4, 7, 10, 13, 19, 21, 23, 24]
[2, 4, 9, 13, 15, 20, 25, 27]
[1, 3, 9, 12, 18, 19, 24, 28]
</snippet></ROW><ROW><id>13960771</id><snippet>importlib</snippet></ROW><ROW><id>13960771</id><snippet>getattr()</snippet></ROW><ROW><id>13960771</id><snippet>import importlib

def call_command(cmd):
    mod = importlib.import_module('get_' + cmd)
    func = getattr(mod, cmd)
    return func()
</snippet></ROW><ROW><id>13960771</id><snippet>import get_foo, get_bar, get_baz

commands = dict(foo=get_foo.foo, bar=get_bar.bar, baz=get_baz.baz)

def call_command(cmd):
    return commands[cmd]()
</snippet></ROW><ROW><id>13961050</id><snippet>.iterkeys()</snippet></ROW><ROW><id>13961050</id><snippet>.viewkeys()</snippet></ROW><ROW><id>13961050</id><snippet>.keys()</snippet></ROW><ROW><id>13961050</id><snippet>d.keys()</snippet></ROW><ROW><id>13961050</id><snippet>list(d.keys())</snippet></ROW><ROW><id>13961110</id><snippet>collection.remove({"date": {"$gt": "2012-12-15"}})
</snippet></ROW><ROW><id>13961153</id><snippet>map()</snippet></ROW><ROW><id>13961153</id><snippet>arg_map = {1 : 'JOHN', 4 : 'SMITH', 8 : 'BEN'}
translated_result = map(arg_map.get, result_list)
</snippet></ROW><ROW><id>13961153</id><snippet>arg_map = {1 : 'JOHN', 4 : 'SMITH', 8 : 'BEN'}
translated_result = [arg_map.get(val, '%s NOT MAPPED' % str(val)) for val in result_list]
</snippet></ROW><ROW><id>13961161</id><snippet>python test.py</snippet></ROW><ROW><id>13961161</id><snippet>python test.py</snippet></ROW><ROW><id>13961161</id><snippet>print(...)</snippet></ROW><ROW><id>13961161</id><snippet>print</snippet></ROW><ROW><id>13961161</id><snippet>print "Hello."
</snippet></ROW><ROW><id>13961161</id><snippet>print(...)</snippet></ROW><ROW><id>13961249</id><snippet>#!/usr/bin/env python

from PyQt4.QtCore import *
from PyQt4.QtGui import*
from PyQt4.QtWebKit import *

class Foo(QWidget):
    def __init__(self, parent=None):
        super(Foo, self).__init__(parent)    

        self.count  = 0
        self.params = range(4)
        self.url    = 'http://forums.fedoraforum.org/showthread.php?t={0}'

        self.gridLayout = QGridLayout(self)
        self.tabWidget = QTabWidget(self)
        self.gridLayout.addWidget(self.tabWidget, 0, 0, 1, 1)

        self.mapper = QSignalMapper(self)
        self.mapper.mapped.connect(self.on_mapper_mapped)

        for i in range(2):
            grabber = QWebView()
            grabber.loadFinished.connect(self.mapper.map)

            self.mapper.setMapping(grabber, i)
            self.tabWidget.addTab(grabber, "opener {0}".format(str(i)))

            grabber.loadFinished.emit(True)

    @pyqtSlot(int)
    def on_mapper_mapped(self, gNumber):
        self.count += 1
        if self.count &lt; len(self.params):
            gParam = self.params[self.count]

            opener = self.mapper.mapping(gNumber)
            opener.load(QUrl(self.url.format(gParam)))

if __name__ == "__main__":
    import  sys

    app = QApplication(sys.argv)
    main = Foo()
    main.show()
    app.exec_()
</snippet></ROW><ROW><id>13961293</id><snippet>continue</snippet></ROW><ROW><id>13961293</id><snippet>oontinue</snippet></ROW><ROW><id>13961293</id><snippet>var</snippet></ROW><ROW><id>13961293</id><snippet>elif</snippet></ROW><ROW><id>13961293</id><snippet>var</snippet></ROW><ROW><id>13961497</id><snippet>check_password</snippet></ROW><ROW><id>13961497</id><snippet>check_password</snippet></ROW><ROW><id>13961694</id><snippet>csv</snippet></ROW><ROW><id>13961694</id><snippet>|</snippet></ROW><ROW><id>13961694</id><snippet>|</snippet></ROW><ROW><id>13961694</id><snippet>|</snippet></ROW><ROW><id>13961710</id><snippet>N</snippet></ROW><ROW><id>13961710</id><snippet>contourf</snippet></ROW><ROW><id>13961710</id><snippet>ax = plt.contourf(xi, yi, zi, 50, norm=norm, cmap=cmap)
plt.colorbar(ax)
</snippet></ROW><ROW><id>13961771</id><snippet>split</snippet></ROW><ROW><id>13961771</id><snippet>hiddenLists = [x.strip() for x in hiddenLists.split(",")]
if i.name() in hiddenLists:
    ...
</snippet></ROW><ROW><id>13961942</id><snippet>fql_result_set</snippet></ROW><ROW><id>13961942</id><snippet>posts_fql = [{ 'fql_result_set' : [{user_dict1}, {user_dict2}] }]
</snippet></ROW><ROW><id>13961942</id><snippet>user_list= []
for user in posts_fql[0]['fql_result_set']:
    uid = user['uid']
    username = user['username']
    name = user['name']
    pic = user['pic']
    user_list.append([uid, username, name, pic])
</snippet></ROW><ROW><id>13962134</id><snippet>_</snippet></ROW><ROW><id>13962134</id><snippet>_</snippet></ROW><ROW><id>13962134</id><snippet>_</snippet></ROW><ROW><id>13962134</id><snippet>str.split()</snippet></ROW><ROW><id>13962134</id><snippet>re.finditer()</snippet></ROW><ROW><id>13962134</id><snippet>import re

fi = re.finditer(r"\S+", line)
next(fi)
next(fi)
var_needed = next(fi).group()
next(fi)
next(fi)
another_var_needed = next(fi).group()
# we don't care about the last match so we don't ask for it
</snippet></ROW><ROW><id>13962134</id><snippet>next()</snippet></ROW><ROW><id>13962134</id><snippet>Match</snippet></ROW><ROW><id>13962134</id><snippet>Match</snippet></ROW><ROW><id>13962134</id><snippet>import re

def get_tokens(text, *toknums):
    toknums = set(toknums)
    maxtok = max(toknums)
    for i, m in enumerate(re.finditer(r"\S", text)):
        if i in toknums:
            yield m.group()
        elif i &gt; maxtok:
            break

var1, var2 = get_tokens("a b c d e f g", 2, 5)
</snippet></ROW><ROW><id>13962460</id><snippet>transactional=True</snippet></ROW><ROW><id>13962460</id><snippet>taskqueue.add(url='/path/to/my/worker', transactional=True)
</snippet></ROW><ROW><id>13962464</id><snippet>i</snippet></ROW><ROW><id>13962464</id><snippet>while i&lt;=10:
    for a in xrange(1, x+1):
        print "ok"
        i+=1
        if i &gt; 10:
            break
</snippet></ROW><ROW><id>13962464</id><snippet>break</snippet></ROW><ROW><id>13962464</id><snippet>False</snippet></ROW><ROW><id>13962619</id><snippet>test_request_object()</snippet></ROW><ROW><id>13962619</id><snippet>from flask import request

with app.test_request_context('/hello', method='POST'):
    # now you can do something with the request until the
    # end of the with block, such as basic assertions:
    assert request.path == '/hello'
    assert request.method == 'POST'
</snippet></ROW><ROW><id>13962752</id><snippet>legend</snippet></ROW><ROW><id>13962752</id><snippet>bbox_to_anchor</snippet></ROW><ROW><id>13962752</id><snippet>bbox_to_anchor</snippet></ROW><ROW><id>13962752</id><snippet>bbox_to_anchor</snippet></ROW><ROW><id>13962752</id><snippet>location</snippet></ROW><ROW><id>13962752</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True)

x = np.linspace(0, np.pi, 100)

line1, = ax1.plot(x, np.cos(3*x), color='red')
line2, = ax2.plot(x, np.sin(4*x), color='green')

# The key to the position is bbox_to_anchor: Place it at x=0.5, y=0.5
# in figure coordinates.
# "center" is basically saying center horizontal alignment and 
# center vertical alignment in this case
fig.legend([line1, line2], ['yep', 'nope'], bbox_to_anchor=[0.5, 0.5], 
           loc='center', ncol=2)

plt.show()
</snippet></ROW><ROW><id>13962752</id><snippet>import numpy as np
import matplotlib.pyplot as plt

fig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True)

x = np.linspace(0, np.pi, 100)

line1, = ax1.plot(x, np.cos(3*x), color='red')
line2, = ax2.plot(x, np.sin(4*x), color='green')

# The key to the position is bbox_to_anchor: Place it at x=0.5, y=0
# in axes coordinates.
# "upper center" is basically saying center horizontal alignment and 
# top vertical alignment in this case
ax1.legend([line1, line2], ['yep', 'nope'], bbox_to_anchor=[0.5, 0], 
           loc='upper center', ncol=2, borderaxespad=0.25)

plt.show()
</snippet></ROW><ROW><id>13962753</id><snippet>cython -a</snippet></ROW><ROW><id>13962753</id><snippet># cython: infer_types=True

# Use the C math library to avoid Python overhead.
from libc cimport math
# For boundscheck below.
import cython
# We're lazy so we'll let Numpy handle our array memory management.
import numpy as np
# You would normally also import the Numpy pxd to get faster access to the Numpy
# API, but it requires some fancier compilation options so I'll leave it out for
# this demo.
# cimport numpy as np

import random

# This is a small function that doesn't need to be exposed to Python at all. Use
# `cdef` instead of `def` and inline it.
cdef inline int h3(int a,int b,int c,int d, int m,int x):
    return (a*x**2 + b*x+c) % m

# If we want to live fast and dangerously, we tell cython not to check our array
# indices for IndexErrors. This means we CAN overrun our array and crash the
# program or screw up our stack. Use with caution. Profiling suggests that we
# aren't gaining anything in this case so I leave it on for safety.
# @cython.boundscheck(False)
# `cpdef` so that calling this function from another Cython (or C) function can
# skip the Python function call overhead, while still allowing us to use it from
# Python.
cpdef floyd(int[:] inputx):
    # Type the variables in the scope of the function.
    cdef int a,b,c,d, value, cyclelimit
    cdef unsigned int dupefound = 0
    cdef unsigned int nohashcalls = 0
    cdef unsigned int loopno, pos, j

    # `m` has type int because inputx is already a Cython memory view and
    # `infer-types` is on.
    m = inputx.shape[0]

    cdef unsigned int loops = int(m*math.log(m))

    # Again using the memory view, but letting Numpy allocate an array of zeros.
    cdef int[:] listofpos = np.zeros(m, dtype=np.int32)

    # Keep this random sampling out of the loop
    cdef int[:, :] randoms = np.random.randint(0, m, (loops, 5)).astype(np.int32)

    for loopno in range(loops):
        if (dupefound == 1):
            break

        # From our precomputed array
        a = randoms[loopno, 0]
        b = randoms[loopno, 1]
        c = randoms[loopno, 2]
        d = randoms[loopno, 3]
        pos = randoms[loopno, 4]

        value = inputx[pos]

        # Unforunately, Memory View does not support "vectorized" operations
        # like standard Numpy arrays. Otherwise we'd use listofpos *= 0 here.
        for j in range(m):
            listofpos[j] = 0

        listofpos[pos] = 1
        setofvalues = set((value,))
        cyclelimit = int(math.sqrt(m))
        for j in range(cyclelimit):
            pos = h3(a, b, c, d, m, inputx[pos])
            nohashcalls += 1
            if (inputx[pos] in setofvalues):
                if (listofpos[pos]==1):
                    dupefound = 0
                else:
                    dupefound = 1
                    print "Duplicate found at position", pos, " and value", inputx[pos]
                break
            listofpos[pos] = 1
            setofvalues.add(inputx[pos])
    return dupefound, nohashcalls
</snippet></ROW><ROW><id>13962753</id><snippet>infer_types</snippet></ROW><ROW><id>13962753</id><snippet>cython -a</snippet></ROW><ROW><id>13962798</id><snippet>&gt;&gt;&gt; list1= ["'HZ1398043','HZ1395693','HZ1395532','HZ1395240','HZ1395194','HZ1395113','HZ1395036','HZ1395236','HZ1396139','HZ1398028','HZ1395098','HZ1395998','HZ1395018','HZ1395829','HZ1398031','HZ1395708','HZ1398029','HZ1398030','HZ1398054''"]
&gt;&gt;&gt; len(list1)
1
</snippet></ROW><ROW><id>13962798</id><snippet>list1 = [item.strip("'") for item in list1[0].split(",")]</snippet></ROW><ROW><id>13962798</id><snippet>list2</snippet></ROW><ROW><id>13962875</id><snippet>&lt;h2&gt;</snippet></ROW><ROW><id>13962875</id><snippet>(?&lt;=&lt;h2&gt;Seasons&lt;/h2&gt;.+?)(&lt;a href=.+?&lt;/a&gt;)    # doesn't work
</snippet></ROW><ROW><id>13962875</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>13962875</id><snippet>&lt;h2&gt;Seasons&lt;/h2&gt;</snippet></ROW><ROW><id>13962875</id><snippet>.+?</snippet></ROW><ROW><id>13962875</id><snippet>&lt;h2&gt;</snippet></ROW><ROW><id>13962875</id><snippet>&gt;&gt;&gt; re.findall('&lt;a href=.+?&lt;/a&gt;', page[page.find('&lt;h2&gt;Seasons&lt;/h2&gt;'):], re.DOTALL)
['&lt;a href=http://www.111.com&gt;111&lt;/a&gt;', '&lt;a href=http://www.222.com&gt;222&lt;/a&gt;', '&lt;a href=http://www.333.com&gt;333&lt;/a&gt;']
</snippet></ROW><ROW><id>13962974</id><snippet>+</snippet></ROW><ROW><id>13962974</id><snippet>*</snippet></ROW><ROW><id>13962974</id><snippet>.30</snippet></ROW><ROW><id>13962974</id><snippet>,.</snippet></ROW><ROW><id>13962974</id><snippet>?</snippet></ROW><ROW><id>13962974</id><snippet>.</snippet></ROW><ROW><id>13962974</id><snippet>re.match("^[0-9]+[,.]?[0-9]*$", value)
</snippet></ROW><ROW><id>13962976</id><snippet>xlrd</snippet></ROW><ROW><id>13962976</id><snippet>import datetime, xlrd
book = xlrd.open_workbook("myfile.xls")
sh = book.sheet_by_index(0)
a1 = sh.cell_value(rowx=0, colx=0)
a1_as_datetime = datetime.datetime(*xlrd.xldate_as_tuple(a1, book.datemode))
print 'datetime: %s' % a1_as_datetime
</snippet></ROW><ROW><id>13963224</id><snippet>rank</snippet></ROW><ROW><id>13963278</id><snippet>{k: v if v is not None else "" for k, v in mydict.items()}
</snippet></ROW><ROW><id>13963278</id><snippet>mydict</snippet></ROW><ROW><id>13963278</id><snippet>mydict.keys()</snippet></ROW><ROW><id>13963278</id><snippet>iteritems()</snippet></ROW><ROW><id>13963278</id><snippet>items()</snippet></ROW><ROW><id>13963278</id><snippet>items()</snippet></ROW><ROW><id>13963346</id><snippet>cursor.execute("""

SELECT ID
FROM 

(SELECT TOP 10 ID
FROM NAME)

LOG

""")

In [49]: cursor.fetchall()
Out[49]: 
[('1', ),
 ('10', ),
 ('100000', ),
 ('100001', ),
 ('100002', ),
 ('100003', ),
 ('100004', ),
 ('100005', ),
 ('100006', ),
 ('100007', )]
</snippet></ROW><ROW><id>13963426</id><snippet>re.findall("[\d]+x[\d]+",variable_string)
</snippet></ROW><ROW><id>13963426</id><snippet>62620587b.jpg.122x132_q85.jpg -&gt; 122x132</snippet></ROW><ROW><id>13963473</id><snippet> Code Block 1
 {code which calls an API which creates an entry in Accounts table &amp;
 Creates corresponding entries in Product table(10 entries)}
</snippet></ROW><ROW><id>13963473</id><snippet>Code Block2
{The code I had posted in my question}
</snippet></ROW><ROW><id>13963473</id><snippet>Code Block 1
time.sleep(5)
Code Block 2
</snippet></ROW><ROW><id>13963660</id><snippet>.tmp</snippet></ROW><ROW><id>13963712</id><snippet>presents = [x.strip() for x in re.findall(r'[^,]*', presents) if x]
</snippet></ROW><ROW><id>13963712</id><snippet>presents = re.split(r'\s*,\s*', presents)
</snippet></ROW><ROW><id>13963712</id><snippet>presents = presents.split(',')
</snippet></ROW><ROW><id>13963730</id><snippet>python.exe</snippet></ROW><ROW><id>13963730</id><snippet>python "c:\\cygwin\\home\\%(home)s\\project\\dir\\scenario%(scenario)s\\p%(popsize)sh%(height)st%(tournsize)sc%(crossprob)sm%(mutprob)s\\GP%(run)s.py"
</snippet></ROW><ROW><id>13963730</id><snippet>"c:\\python27\python.exe" "c:\\cygwin\\home\\%(home)s\\project\\dir\\scenario%(scenario)s\\p%(popsize)sh%(height)st%(tournsize)sc%(crossprob)sm%(mutprob)s\\GP%(run)s.py"
</snippet></ROW><ROW><id>13963784</id><snippet>res.content</snippet></ROW><ROW><id>13963784</id><snippet>str</snippet></ROW><ROW><id>13963784</id><snippet>CELERY_IGNORE_RESULT</snippet></ROW><ROW><id>13963966</id><snippet>collections.Counter()</snippet></ROW><ROW><id>13963966</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; a = {"A": 1, "B": 1, "C": 2}
&gt;&gt;&gt; collections.Counter(a.values())
Counter({1: 2, 2: 1})
</snippet></ROW><ROW><id>13964168</id><snippet>import nltk
stemmer=nltk.stem.SnowballStemmer('french')
</snippet></ROW><ROW><id>13964168</id><snippet>import nltk
stemmer=nltk.stem.snowball.FrenchStemmer()
</snippet></ROW><ROW><id>13964227</id><snippet>sys.stdout = open('count.txt', 'w')</snippet></ROW><ROW><id>13964227</id><snippet>sys.stdout = open('count.txt', 'w')
for k,v in makeddict.items():
    print "MID -",k + ':', Counter(v)
</snippet></ROW><ROW><id>13964227</id><snippet>with open('count.txt', 'w') as f:
    for k,v in makeddict.items():
        print &gt;&gt; f, "MID -",k + ':', Counter(v)
</snippet></ROW><ROW><id>13964362</id><snippet>yield from</snippet></ROW><ROW><id>13964417</id><snippet>&lt;pre&gt;</snippet></ROW><ROW><id>13964417</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>13964417</id><snippet>&lt;p&gt;
This is
a test
&lt;/p&gt;
</snippet></ROW><ROW><id>13964417</id><snippet>&lt;br/&gt;</snippet></ROW><ROW><id>13964458</id><snippet>\r</snippet></ROW><ROW><id>13964458</id><snippet>string-escape</snippet></ROW><ROW><id>13964458</id><snippet>In [1]: resp = '&lt;RESPONSE&gt;\r&lt;status&gt;-4&lt;/status&gt;\r&lt;credits&gt;31.3403&lt;/credits&gt;\r&lt;/RESPONSE&gt;'

In [2]: print resp
&lt;/RESPONSE&gt;.3403&lt;/credits&gt;

In [3]: print resp.encode('string-escape')
&lt;RESPONSE&gt;\r&lt;status&gt;-4&lt;/status&gt;\r&lt;credits&gt;31.3403&lt;/credits&gt;\r&lt;/RESPONSE&gt;
</snippet></ROW><ROW><id>13964458</id><snippet>r</snippet></ROW><ROW><id>13964458</id><snippet>In [4]: resp = r'&lt;RESPONSE&gt;\r&lt;status&gt;-4&lt;/status&gt;\r&lt;credits&gt;31.3403&lt;/credits&gt;\r&lt;/RESPONSE&gt;'

In [5]: print resp
&lt;RESPONSE&gt;\r&lt;status&gt;-4&lt;/status&gt;\r&lt;credits&gt;31.3403&lt;/credits&gt;\r&lt;/RESPONSE&gt;
</snippet></ROW><ROW><id>13964502</id><snippet>attendees = {}
newObjectName = fName[0] + lName
attendees[newObjectName] = Attendee(fName, lName, email)
</snippet></ROW><ROW><id>13964650</id><snippet>stringlist = ['hi', 'hello', 'hey','ohman', 'yoloo', 'hello']
#maxlength = max([len(s) for s in stringlist])
maxlength = max(len(s) for s in stringlist)  # omitting the brackets causes max 
                                             # to operate on an iterable, instead
                                             # of first constructing a full list
                                             # in memory, which is more efficient
</snippet></ROW><ROW><id>13964650</id><snippet>[len(s) for s in stringlist]</snippet></ROW><ROW><id>13964650</id><snippet>stringlist</snippet></ROW><ROW><id>13964650</id><snippet>s</snippet></ROW><ROW><id>13964650</id><snippet>len(s)</snippet></ROW><ROW><id>13964650</id><snippet>[2, 5, 3, 5, 5, 5]</snippet></ROW><ROW><id>13964650</id><snippet>max()</snippet></ROW><ROW><id>13964650</id><snippet>5</snippet></ROW><ROW><id>13964650</id><snippet>longest_strings = [s for s in stringlist if len(s) == maxlength]
</snippet></ROW><ROW><id>13964650</id><snippet>s</snippet></ROW><ROW><id>13964650</id><snippet>s</snippet></ROW><ROW><id>13964650</id><snippet>len(s)</snippet></ROW><ROW><id>13964650</id><snippet>maxlength</snippet></ROW><ROW><id>13964650</id><snippet>set()</snippet></ROW><ROW><id>13964650</id><snippet>unique_longest_strings = list(set(longest_strings))
</snippet></ROW><ROW><id>13964650</id><snippet>list()</snippet></ROW><ROW><id>13964650</id><snippet>ml = max(len(s) for s in stringlist)
result = list(set(s for s in stringlist if len(s) == ml))
</snippet></ROW><ROW><id>13964650</id><snippet>list</snippet></ROW><ROW><id>13964650</id><snippet>list</snippet></ROW><ROW><id>13964787</id><snippet>PIL</snippet></ROW><ROW><id>13964787</id><snippet>reportlab</snippet></ROW><ROW><id>13964787</id><snippet>PIL</snippet></ROW><ROW><id>13964787</id><snippet>reportlab.platypus.flowables.Image</snippet></ROW><ROW><id>13964787</id><snippet>StringIO</snippet></ROW><ROW><id>13964787</id><snippet>StringIO</snippet></ROW><ROW><id>13964787</id><snippet>import sys
import PIL
from cStringIO import StringIO
from reportlab.platypus.flowables import Image

# Method 1
data = open(sys.argv[1]).read()
img1 = StringIO(data)

# Method 2
img2 = StringIO()
PIL.Image.open(sys.argv[2]).save(img2, 'PNG')
img2.seek(0)

# Method 3 (fails)
img3 = StringIO(PIL.Image.open(sys.argv[2]).tostring())

story = [Image(img1), Image(img2)]
#Image(img3)
</snippet></ROW><ROW><id>13964787</id><snippet>img3</snippet></ROW><ROW><id>13964787</id><snippet>PIL.Image.fromstring(...).save(mystrio, 'someformat')</snippet></ROW><ROW><id>13964913</id><snippet>Area.id</snippet></ROW><ROW><id>13964913</id><snippet>int</snippet></ROW><ROW><id>13964913</id><snippet>coerce</snippet></ROW><ROW><id>13964913</id><snippet>wtforms.fields.SelectField</snippet></ROW><ROW><id>13964913</id><snippet>area = SelectField(coerce=int)
</snippet></ROW><ROW><id>13964913</id><snippet>wtforms.ext.sqlalchemy.fields.QuerySelectField</snippet></ROW><ROW><id>13964913</id><snippet>area = QuerySelectField(query_factory=Area.objects.all,
                            get_pk=lambda a: a.id,
                            get_label=lambda a: a.name)
</snippet></ROW><ROW><id>13964998</id><snippet>?:</snippet></ROW><ROW><id>13964998</id><snippet>(?:AB|CDE)_\d{2,3}</snippet></ROW><ROW><id>13965005</id><snippet>pylab.show</snippet></ROW><ROW><id>13965005</id><snippet>savefig</snippet></ROW><ROW><id>13965005</id><snippet>fig = pylab.figure()
text = "test \t test".replace("\t", "    ")
fig.text(.1,.05, text, bbox=dict(facecolor='red', alpha=0.5))
</snippet></ROW><ROW><id>13965005</id><snippet>text = "test \t test".expandtabs()
</snippet></ROW><ROW><id>13965098</id><snippet>In [15]: df
Out[15]: 
                      date_in     aet                    date_out
0  2012-12-05 10:08:59.318600  Z2XG17  2012-12-05 10:09:37.172300
1  2012-12-05 10:08:59.451300  Z2XG17  2012-12-05 10:09:38.048800
2  2012-12-05 10:08:59.587400  Z2XG17  2012-12-05 10:09:39.044100

In [16]: inbnd = pd.DataFrame({'event': 1}, index=df.date_in)

In [17]: outbnd = pd.DataFrame({'event': -1}, index=df.date_out)

In [18]: real_stream = pd.concat([inbnd, outbnd]).sort()

In [19]: real_stream
Out[19]: 
                            event
date                             
2012-12-05 10:08:59.318600      1
2012-12-05 10:08:59.451300      1
2012-12-05 10:08:59.587400      1
2012-12-05 10:09:37.172300     -1
2012-12-05 10:09:38.048800     -1
2012-12-05 10:09:39.044100     -1
</snippet></ROW><ROW><id>13965098</id><snippet>In [20]: real_stream['depth'] = real_stream.event.cumsum()

In [21]: real_stream
Out[21]: 
                            event  depth
date                                    
2012-12-05 10:08:59.318600      1      1
2012-12-05 10:08:59.451300      1      2
2012-12-05 10:08:59.587400      1      3
2012-12-05 10:09:37.172300     -1      2
2012-12-05 10:09:38.048800     -1      1
2012-12-05 10:09:39.044100     -1      0
</snippet></ROW><ROW><id>13965098</id><snippet>In [53]: outbnd_1s = pd.DataFrame({'event': -1},
   ....:                          index=real_stream.event.resample("S").index)

In [54]: fixed_stream = pd.concat([inbnd, outbnd_1s]).sort()

In [55]: def make_floor_counter(floor):
   ....:     count = [0]
   ....:     def process(n):
   ....:         count[0] += n
   ....:         if count[0] &lt; floor
   ....:             count[0] = floor
   ....:         return count[0]
   ....:     return process
   ....: 

In [56]: fixed_stream['depth'] = fixed_stream.event.map(make_floor_counter(0))

In [57]: fixed_stream.head(8)
Out[57]: 
                            event  depth
2012-12-05 10:08:59            -1      0
2012-12-05 10:08:59.318600      1      1
2012-12-05 10:08:59.451300      1      2
2012-12-05 10:08:59.587400      1      3
2012-12-05 10:09:00            -1      2
2012-12-05 10:09:01            -1      1
2012-12-05 10:09:02            -1      0
2012-12-05 10:09:03            -1      0
</snippet></ROW><ROW><id>13965794</id><snippet>lxml</snippet></ROW><ROW><id>13965794</id><snippet>lxml</snippet></ROW><ROW><id>13965794</id><snippet>lxml</snippet></ROW><ROW><id>13965794</id><snippet>sudo apt-get install python-lxml</snippet></ROW><ROW><id>13965852</id><snippet>python_datetime = datetime.fromordinal(int(matlab_datenum)) + timedelta(days=matlab_datenum%1) - timedelta(days = 366)
</snippet></ROW><ROW><id>13966646</id><snippet>1e-01</snippet></ROW><ROW><id>13966719</id><snippet>-lmkl_rt</snippet></ROW><ROW><id>13966719</id><snippet>-lmkl_sequential -lmkl_intel_lp64 -lmkl_core</snippet></ROW><ROW><id>13967797</id><snippet>print</snippet></ROW><ROW><id>13967797</id><snippet>def f(x): print x
[f(i) for i in [1,2,3]]
</snippet></ROW><ROW><id>13967797</id><snippet>(f(i)...)</snippet></ROW><ROW><id>13967797</id><snippet>f()</snippet></ROW><ROW><id>13967797</id><snippet>[]</snippet></ROW><ROW><id>13967797</id><snippet>f()</snippet></ROW><ROW><id>13967797</id><snippet>from __future__ import print_function
[print(i) for i in [1, 2, 3]]
</snippet></ROW><ROW><id>13967797</id><snippet>()</snippet></ROW><ROW><id>13967797</id><snippet>print</snippet></ROW><ROW><id>13967826</id><snippet>&gt;&gt;&gt; l = "G O S J A J E K R A L J"
&gt;&gt;&gt; l.split()
['G', 'O', 'S', 'J', 'A', 'J', 'E', 'K', 'R', 'A', 'L', 'J']
&gt;&gt;&gt; ''.join(l.split())
'GOSJAJEKRALJ'
</snippet></ROW><ROW><id>13968153</id><snippet>void QWebView::load ( const QNetworkRequest &amp; request, QNetworkAccessManager::Operation operation = QNetworkAccessManager::GetOperation, const QByteArray &amp; body = QByteArray() )</snippet></ROW><ROW><id>13968153</id><snippet>void QNetworkRequest::setRawHeader ( const QByteArray &amp; headerName, const QByteArray &amp; headerValue )</snippet></ROW><ROW><id>13968153</id><snippet>QWebView * view = new QWebView;
QNetworkRequest req(QUrl("http://www.google.pl"));
req.setRawHeader("X-Forwarded-For", "MyData");
req.setRawHeader("User-Agent", "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.15 (KHTML, like Gecko) Chrome/24.0.1295.0 Safari/537.15");
view-&gt;load(req); // will perform get operation by default
view-&gt;show();
</snippet></ROW><ROW><id>13968351</id><snippet>gv.render(gvv)
</snippet></ROW><ROW><id>13968351</id><snippet>pos</snippet></ROW><ROW><id>13968351</id><snippet>n_france = gv.findnode(gvv, "France")
pos = gv.getv(n_france, "pos")
</snippet></ROW><ROW><id>13968515</id><snippet>from PyQt4 import QtCore
print repr(QtCore.qCompress("test"))
</snippet></ROW><ROW><id>13968515</id><snippet>PyQt4.QtCore.QByteArray('\x00\x00\x00\x04x\x9c+I-.\x01\x00\x04]\x01\xc1')
</snippet></ROW><ROW><id>13968698</id><snippet>def parse(filename):
    servicesset = set(services)
    with open(filename, 'r', encoding='koi8-r') as f:
        for log_line in f:
            words = set(log_line.split())
            servicesset -= words

    services[:] = list(servicesset)
</snippet></ROW><ROW><id>13968698</id><snippet>services</snippet></ROW><ROW><id>13968698</id><snippet>def parse(filename, services):
    services = set(services)
    with open(filename, 'r', encoding='koi8-r') as f:
        for log_line in f:
            words = set(log_line.split())
            services -= words

    return list(servicesset)
</snippet></ROW><ROW><id>13968792</id><snippet>Function                    Return Type
date_part(text, interval)   double precision
</snippet></ROW><ROW><id>13968792</id><snippet>date_part()</snippet></ROW><ROW><id>13968792</id><snippet>qset = Post.objects.filter(user__id=1).extra(
           select={"year": "date_part('year', cdt)::int"}) \
           .values("year").annotate(num_records=Count("id")).order_by()
</snippet></ROW><ROW><id>13968802</id><snippet>import csv
d = {}
with open('input.csv', 'r') as f:
    csvr = csv.DictReader(f)
    for rec in csvr:
        if rec['Id'] not in d or int(rec['Var']) &gt; int(d[rec['Id']]['Var']):
            d[rec['Id']] = rec
with open('output.csv', 'w') as f:
    csvw = csv.DictWriter(f, fieldnames=csvr.fieldnames)
    csvw.writeheader()
    csvw.writerows(d.itervalues())
</snippet></ROW><ROW><id>13968802</id><snippet>Lat,Long,Var,Id,Date Time
48.810,-104.253,13,MCOM,12/12/20 06:38:00
47.022,-104.330,12,MBVR,12/12/20 05:24:00
</snippet></ROW><ROW><id>13969052</id><snippet>&gt;&gt;&gt; a = np.array([[1, 2, 3],
                  [4, 5, 6],
                  [7, 8, 9]])
&gt;&gt;&gt; np.repeat(np.repeat(a, 2, 0), 2, 1)

array([[1, 1, 2, 2, 3, 3],
       [1, 1, 2, 2, 3, 3],
       [4, 4, 5, 5, 6, 6],
       [4, 4, 5, 5, 6, 6],
       [7, 7, 8, 8, 9, 9],
       [7, 7, 8, 8, 9, 9]])
</snippet></ROW><ROW><id>13969072</id><snippet>re.findall(r',?([^,]+)(?:,|\r\n)', string)
#this regex captures anything between `,` and or a newline
</snippet></ROW><ROW><id>13969072</id><snippet>&gt;&gt;&gt; s = ",,,Central California\r\n"
&gt;&gt;&gt; re.findall(r',?([^,]+)(?:,|\r\n)', s)
['Central California']
</snippet></ROW><ROW><id>13969072</id><snippet>&gt;&gt;&gt; s = ",itemA,itemB,Central California\r\n"
&gt;&gt;&gt; re.findall(r',?([^,]+)(?:,|\r\n)', s)
['itemA', 'itemB', 'Central California']

&gt;&gt;&gt; s = "BASE,itemA,itemB,Central California\r\n"
&gt;&gt;&gt; re.findall(r',?([^,]+)(?:,|\r\n)', s)
['BASE', 'itemA', 'itemB', 'Central California']
</snippet></ROW><ROW><id>13969265</id><snippet>wx.Frame</snippet></ROW><ROW><id>13969323</id><snippet>binascii.hexlify(temp.encode('ascii'));
</snippet></ROW><ROW><id>13969323</id><snippet>ord()</snippet></ROW><ROW><id>13969323</id><snippet>format(ord(temp), 'x')
</snippet></ROW><ROW><id>13969323</id><snippet>\Uabcdefgh</snippet></ROW><ROW><id>13969323</id><snippet>\uffff</snippet></ROW><ROW><id>13969323</id><snippet>format(ord(temp), '04x')
</snippet></ROW><ROW><id>13970164</id><snippet>cmd.exe</snippet></ROW><ROW><id>13970164</id><snippet>Documents and Settings</snippet></ROW><ROW><id>13970164</id><snippet>hello.py</snippet></ROW><ROW><id>13970164</id><snippet>[Errno 2] No such file or directory</snippet></ROW><ROW><id>13970164</id><snippet>C:\Documents...&gt;cd C:\Python27
C:\Python27&gt; python hello.py Guido
</snippet></ROW><ROW><id>13970164</id><snippet>hello.py</snippet></ROW><ROW><id>13970301</id><snippet>meal = int(raw_input('Enter meal cost: '))
tax = int(raw_input('Enter tax price in decimal #: '))
tip = int(raw_input('Enter tip amount in decimal #: '))
</snippet></ROW><ROW><id>13970301</id><snippet>from decimal import Decimal 
meal = Decimal(raw_input('Enter meal cost: '))
tax = Decimal(raw_input('Enter tax price in decimal #: '))
tip = Decimal(raw_input('Enter tip amount in decimal #: '))
</snippet></ROW><ROW><id>13970463</id><snippet>lil</snippet></ROW><ROW><id>13970463</id><snippet>COO</snippet></ROW><ROW><id>13970463</id><snippet>CSR/CSS</snippet></ROW><ROW><id>13970463</id><snippet>lil</snippet></ROW><ROW><id>13970463</id><snippet>dia</snippet></ROW><ROW><id>13970463</id><snippet>COO</snippet></ROW><ROW><id>13970463</id><snippet>COO</snippet></ROW><ROW><id>13970463</id><snippet>row</snippet></ROW><ROW><id>13970463</id><snippet>col</snippet></ROW><ROW><id>13970463</id><snippet>matrix = A.tocoo()

new_row = matrix.row // 5
new_col = matrix.col // 5
bin = (matrix.shape[0] // 5) * new_col + new_row
# Now do a little dance because this is sparse,
# and most of the possible bin should not be in new_row/new_col
# also need to group the bins:
unique, bin = np.unique(bin, return_inverse=True)
sum = np.bincount(bin, weights=matrix.data)
new_col = unique // (matrix.shape[0] // 5)
new_row = unique - new_col * (matrix.shape[0] // 5)

result = scipy.sparse.coo_matrix((sum, (new_row, new_col)))
</snippet></ROW><ROW><id>13971090</id><snippet>input_ = {'data': [{'data': [{'data': 'gen1', 'name': 'objectID'},
                   {'data': 'familyX', 'name': 'family'}],
          'name': 'An-instance-of-A'},
         {'data': [{'data': 'gen2', 'name': 'objectID'},
                   {'data': 'familyY', 'name': 'family'},
                   {'data': [{'data': [{'data': '21',
                                        'name': 'objectID'},
                                       {'data': 'name-for-21',
                                        'name': 'name'},
                                       {'data': 'no-name', 'name': None}],
                              'name': 'An-instance-of-X:'},
                             {'data': [{'data': '22',
                                        'name': 'objectID'}],
                              'name': 'An-instance-of-X:'}],
                    'name': 'List-of-2-X-elements:'}],
          'name': 'An-instance-of-A'}],
'name': 'main'}

def parse_dict(d, predecessors, output):
    """Recurse into dict and fill list of path-value-pairs"""
    data = d["data"]
    name = d["name"]
    name = name.strip(":") if type(name) is str else name
    if type(data) is list:
        for d_ in data:
            parse_dict(d_, predecessors + [name], output)
    else:
        output.append(("_".join(map(str,predecessors+[name])), data))

result = []

parse_dict(input_, [], result)

print "\n".join(map(lambda x: "%s=%s"%(x[0],x[1]),result))
</snippet></ROW><ROW><id>13971090</id><snippet>main_An-instance-of-A_objectID=gen1
main_An-instance-of-A_family=familyX
main_An-instance-of-A_objectID=gen2
main_An-instance-of-A_family=familyY
main_An-instance-of-A_List-of-2-X-elements_An-instance-of-X_objectID=21
main_An-instance-of-A_List-of-2-X-elements_An-instance-of-X_name=name-for-21
main_An-instance-of-A_List-of-2-X-elements_An-instance-of-X_None=no-name
main_An-instance-of-A_List-of-2-X-elements_An-instance-of-X_objectID=22
</snippet></ROW><ROW><id>13971105</id><snippet>import requests

headers = {'content-type': 'text/xml; charset=utf-8'}
response = requests.post(url, data="&lt;data&gt;the data is here&lt;/data&gt;", headers=headers)
fd = open("filename.xml", "w")
fd.write(response.text)
fd.close()
</snippet></ROW><ROW><id>13971422</id><snippet>In [115]: boys = ["Boy1", "Boy2", "Boy3", "Boy4", "Boy5"]

In [116]: girls = ["Girl1", "Girl2", "Girl3", "Girl4", "Girl5"]

In [117]: random.shuffle(girls)

In [118]: girls
Out[118]: ['Girl5', 'Girl4', 'Girl3', 'Girl1', 'Girl2']

In [119]: for i in itertools.izip(boys, girls):
   .....:     print i
   .....:     
('Boy1', 'Girl5')
('Boy2', 'Girl4')
('Boy3', 'Girl3')
('Boy4', 'Girl1')
('Boy5', 'Girl2')
</snippet></ROW><ROW><id>13971422</id><snippet>In [126]: boys
Out[126]: ['Boy1', 'Boy2', 'Boy3', 'Boy4', 'Boy5']

In [127]: girls
Out[127]: ['Girl1', 'Girl2', 'Girl3', 'Girl4', 'Girl5']

In [128]: [girls[i:]+girls[:i] for i in xrange(len(girls))]
Out[128]: 
[['Girl1', 'Girl2', 'Girl3', 'Girl4', 'Girl5'],
 ['Girl2', 'Girl3', 'Girl4', 'Girl5', 'Girl1'],
 ['Girl3', 'Girl4', 'Girl5', 'Girl1', 'Girl2'],
 ['Girl4', 'Girl5', 'Girl1', 'Girl2', 'Girl3'],
 ['Girl5', 'Girl1', 'Girl2', 'Girl3', 'Girl4']]

In [129]: for combo in (itertools.izip(boys, g) for g in ( girls[i:]+girls[:i] for i in xrange(len(girls)) )):
   .....:    for pair in combo:
   .....:        print pair,
   .....:    print ''
   .....:     
('Boy1', 'Girl1') ('Boy2', 'Girl2') ('Boy3', 'Girl3') ('Boy4', 'Girl4') ('Boy5', 'Girl5') 
('Boy1', 'Girl2') ('Boy2', 'Girl3') ('Boy3', 'Girl4') ('Boy4', 'Girl5') ('Boy5', 'Girl1') 
('Boy1', 'Girl3') ('Boy2', 'Girl4') ('Boy3', 'Girl5') ('Boy4', 'Girl1') ('Boy5', 'Girl2') 
('Boy1', 'Girl4') ('Boy2', 'Girl5') ('Boy3', 'Girl1') ('Boy4', 'Girl2') ('Boy5', 'Girl3') 
('Boy1', 'Girl5') ('Boy2', 'Girl1') ('Boy3', 'Girl2') ('Boy4', 'Girl3') ('Boy5', 'Girl4') 
</snippet></ROW><ROW><id>13971422</id><snippet>&gt;&gt;&gt; perms = itertools.permutations(girls)
&gt;&gt;&gt; len([tuple(p) for p in (itertools.product(boys, g) for g in perms)])
120
&gt;&gt;&gt; perms = itertools.permutations(girls)
&gt;&gt;&gt; len(set(tuple(p) for p in (itertools.product(boys, g) for g in perms)))
120
</snippet></ROW><ROW><id>13971422</id><snippet>len</snippet></ROW><ROW><id>13971422</id><snippet>len(...)</snippet></ROW><ROW><id>13971422</id><snippet>len(set(...))</snippet></ROW><ROW><id>13971490</id><snippet>close</snippet></ROW><ROW><id>13971490</id><snippet>tar.close()
         ^^
</snippet></ROW><ROW><id>13971568</id><snippet>s = ['6','5','7','7','6']
item_length = len(s)

with open('test.csv', 'wb') as test_file:
    file_writer = csv.writer(test_file)
    for item in s:
        file_writer.writerow(item)
</snippet></ROW><ROW><id>13971568</id><snippet>s = ['6','5','7','7','6']
with open('test.csv', 'wb') as test_file:
   test_file.write("\n".join(s) + "\n")
</snippet></ROW><ROW><id>13971683</id><snippet>gevent</snippet></ROW><ROW><id>13971683</id><snippet>from gevent import monkey; monkey.patch_socket() # So anything socket-based now works asynchronously. 
#This should be the first line of you code!
import gevent

def query_server(server_ip):
    # do_something with server_ip and sockets

server_ips = [....]
jobs = [gevent.spawn(query_server, server_ip) for server_ip in server_ips]
gevent.joinall(jobs)
print [job.result for job in jobs]
</snippet></ROW><ROW><id>13971683</id><snippet>gevent</snippet></ROW><ROW><id>13971683</id><snippet>reactor</snippet></ROW><ROW><id>13971683</id><snippet>twisted</snippet></ROW><ROW><id>13971683</id><snippet>gevent</snippet></ROW><ROW><id>13971696</id><snippet>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'tester',                      # Or path to database file if using sqlite3.
        'USER': 'root',                      # Not used with sqlite3.
        'PASSWORD': 'password',                  # Not used with sqlite3.
        'HOST': '127.0.0.1',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '3306',                      # Set to empty string for default. Not used with sqlite3.
    }
}
</snippet></ROW><ROW><id>13971696</id><snippet>python manage.py runserver</snippet></ROW><ROW><id>13971834</id><snippet> Soaplib-2.0 was never released as a stable package, but the branch is still available
</snippet></ROW><ROW><id>13971834</id><snippet>url(r'^testws/\?wsdl$', 'testmo.views.ws_test'),
url(r'^testws/$', 'testmo.views.ws_test'),
</snippet></ROW><ROW><id>13971834</id><snippet>from django.views.decorators.csrf import csrf_exempt
from spyne.server.django import DjangoApplication
from spyne.model.primitive import String
from spyne.service import ServiceBase
from spyne.interface.wsdl import Wsdl11
from spyne.protocol.soap import Soap11
from spyne.application import Application
from spyne.decorator import srpc



class ServiceWsTest(ServiceBase):
    @srpc(String, _returns=String)
    def testMethod(string):
        return string

ws_test = csrf_exempt(DjangoApplication(Application([ServiceWsTest],
    'http://example.com',
    in_protocol=Soap11(),
    out_protocol=Soap11(),
    interface=Wsdl11(),
)))
</snippet></ROW><ROW><id>13971991</id><snippet>tarname = tar_path + "/" + client_id + "_" + dt.datetime.now().strftime("%Y%m%d_%H%M%S") + ".tar.gz"
print tarname
tar = tarfile.open (tarname, "w:gz")
for name, dir in archive_list:
  print "Adding %s" % (name)
  tar.add(name, arcname=client_id)
tar.close()
</snippet></ROW><ROW><id>13971991</id><snippet>name</snippet></ROW><ROW><id>13971991</id><snippet>dir</snippet></ROW><ROW><id>13971992</id><snippet>nestedQuery.subquery()</snippet></ROW><ROW><id>13971992</id><snippet>print query</snippet></ROW><ROW><id>13972089</id><snippet>def highest_strength(graph):
    return max((s, x, y) for x, links in graph.items() for y, s in links.items())
</snippet></ROW><ROW><id>13972089</id><snippet>&gt;&gt;&gt; highest_strength(graph)
(4, 'c', 'b')
</snippet></ROW><ROW><id>13972089</id><snippet>def highest_strength(G):
    best_strength, best_link = None, (None, None)
    for x, links in G.items():
        for y, v in links.items():
            if v &gt; best_strength:
                best_strength, best_link = v, (x, y)
    return best_link
</snippet></ROW><ROW><id>13972326</id><snippet>email</snippet></ROW><ROW><id>13972326</id><snippet>Profile</snippet></ROW><ROW><id>13972326</id><snippet>email</snippet></ROW><ROW><id>13972326</id><snippet># this name may not fit your needs if you have more fields, but you get the idea
class UserEmailForm(forms.Form):
    email = forms.CharField()
</snippet></ROW><ROW><id>13972326</id><snippet>profile = models.Profile.objects.get(user=request.user)
profileform = forms.ProfileForm(instance=profile)
user_emailform = forms.UserEmailForm(initial={'email': profile.user.email})
</snippet></ROW><ROW><id>13972326</id><snippet>email</snippet></ROW><ROW><id>13972326</id><snippet>ModelForm</snippet></ROW><ROW><id>13972558</id><snippet>&gt;&gt;&gt; d = {}
&gt;&gt;&gt; for i in range(1, 201):
...     d[i] = 0.5
... 
&gt;&gt;&gt; d
</snippet></ROW><ROW><id>13972558</id><snippet>&gt;&gt;&gt; { i: 0.5 for i in range(1, 201) }
</snippet></ROW><ROW><id>13972715</id><snippet>IP_URL = "http://api.hostip.info/?ip="
def get_coords(ip):
    url = IP_URL + ip
    respond = None
    try:
        respond = urlib2.urlopen(url).read()
    execept URLError:
        return

    if respond:
        #Parse de returned XML Here, you can use MiniDom
</snippet></ROW><ROW><id>13973205</id><snippet>set DJANGO_SETTINGS_MODULE=MyLibrary.settings
python manage.py runserver
</snippet></ROW><ROW><id>13973205</id><snippet>--settings</snippet></ROW><ROW><id>13973205</id><snippet>python manage.py runserver --settings=MyLibrary.settings
</snippet></ROW><ROW><id>13973360</id><snippet>sudo easy_install</snippet></ROW><ROW><id>13973528</id><snippet>numlines = 20

for i in np.linspace(0,1, numlines):
    plt.plot(np.arange(numlines),np.tile([i],numlines), linewidth=4, color=plt.cm.RdYlBu(i))
</snippet></ROW><ROW><id>13973531</id><snippet>Range</snippet></ROW><ROW><id>13973531</id><snippet>def download(url,start):
    req = urllib2.Request('http://www.python.org/')
    req.headers['Range'] = 'bytes=%s-%s' % (start, start+chunk_size)
    f = urllib2.urlopen(req)
    parts[start] = f.read()

threads = []
parts = {}

# Initialize threads
for i in range(0,10):
    t = threading.Thread(target=download, i*chunk_size)
    t.start()
    threads.append( t)

# Join threads back (order doesn't matter, you just want them all)
for i in threads:
    i.join()

# Sort parts and you're done
result = ''
for i in range(0,10):
    result += parts[i*chunk_size]
</snippet></ROW><ROW><id>13973531</id><snippet>Range</snippet></ROW><ROW><id>13973578</id><snippet>import glob
with open('countfile' , 'w') as out:
    list_of_files = glob.glob('./*.linear')
    for file_name in list_of_files:
        with open(file_name, 'r') as f:
            count = sum(1 for line in f)
            out.write('{c} {f}\n'.format(c = count, f = file_name))
</snippet></ROW><ROW><id>13973578</id><snippet>w</snippet></ROW><ROW><id>13973578</id><snippet>open('countfile', 'w')</snippet></ROW><ROW><id>13973578</id><snippet>countfile</snippet></ROW><ROW><id>13973731</id><snippet>import urllib2
def download(url, file):
    dataset = urllib2.urlopen(url)
    CHUNK = 16 * 1024
    with open(file, 'wb') as dl:
        while True:
            peice = dataset.read(CHUNK)
            if not peice: break
            dl.write(peice)

download(r'http://dds.cr.usgs.gov/emodis/Africa/historical/TERRA/2012/comp_056/AF_eMTH_NDVI.2012.047-056.QKM.COMPRES.005.2012059143841.zip',r'AF_eMTH_NDVI.2012.047-056.QKM.COMPRES.005.2012059143841.zip') 
</snippet></ROW><ROW><id>13973738</id><snippet>Field_node</snippet></ROW><ROW><id>13973738</id><snippet>    child_nodes = []
</snippet></ROW><ROW><id>13973738</id><snippet>__init__</snippet></ROW><ROW><id>13973738</id><snippet>class Field_node(object):
    def __init__(self):
        self.field_phenotype_id = -1
        self.field_name = ''
        self.field_parent_id = -1
        self.child_nodes = []
</snippet></ROW><ROW><id>13973830</id><snippet>QApplication::focusChanged(QWidget * old, QWidget * now)</snippet></ROW><ROW><id>13973898</id><snippet>f(x) = max(-1, min(x, 1))
</snippet></ROW><ROW><id>13973898</id><snippet>x</snippet></ROW><ROW><id>13973898</id><snippet>f'(x) = 1 if -1 &lt; x &lt; 1
        0 otherwise
</snippet></ROW><ROW><id>13974264</id><snippet>data</snippet></ROW><ROW><id>13974264</id><snippet>print len("foo"[:500])  #3
print "foo"[:500]       #foo
</snippet></ROW><ROW><id>13974398</id><snippet>timeit</snippet></ROW><ROW><id>13974398</id><snippet>IPython</snippet></ROW><ROW><id>13974398</id><snippet>a==a+b</snippet></ROW><ROW><id>13974398</id><snippet>a</snippet></ROW><ROW><id>13974398</id><snippet>b</snippet></ROW><ROW><id>13974398</id><snippet>a</snippet></ROW><ROW><id>13974398</id><snippet>b</snippet></ROW><ROW><id>13974398</id><snippet>a=a+b</snippet></ROW><ROW><id>13974398</id><snippet>a</snippet></ROW><ROW><id>13974398</id><snippet>b</snippet></ROW><ROW><id>13974398</id><snippet>In [7]: def func1():
    a==a+b
   ...:     

In [8]: def func():
    a=a+b
   ...:     

In [9]: dis.dis(func1)
  2           0 LOAD_GLOBAL              0 (a)
              3 LOAD_GLOBAL              0 (a)
              6 LOAD_GLOBAL              1 (b)
              9 BINARY_ADD          
             10 COMPARE_OP               2 (==)
             13 POP_TOP             
             14 LOAD_CONST               0 (None)
             17 RETURN_VALUE        

In [10]: dis.dis(func)
  2           0 LOAD_FAST                0 (a)   # but there's nothing to load, so Error
              3 LOAD_GLOBAL              0 (b)
              6 BINARY_ADD          
              7 STORE_FAST               0 (a)
             10 LOAD_CONST               0 (None)
             13 RETURN_VALUE        


In [11]: func()     #same error as yours
---------------------------------------------------------------------------
UnboundLocalError                         Traceback (most recent call last)

UnboundLocalError: local variable 'a' referenced before assignment
</snippet></ROW><ROW><id>13974451</id><snippet>selenium_client.waitForPageToLoad(ms)</snippet></ROW><ROW><id>13974505</id><snippet>def set_from_file(path):
    with open(path) as file:
        return set(lines.strip() for line in file)

def secretome():
    files = ["goodlistSigP.txt", "tmhmmGoodlist.txt", "targetpGoodlist.txt", "wolfPsortGoodlist.txt"]
    data = [set_from_file(os.path.join(path, file)) for file in files]
    with open(path + "secretome_pass.text", "w") as newfile:
        newfile.writelines(line + "/n" for line in set.union(*data) if line)
</snippet></ROW><ROW><id>13974505</id><snippet>union()</snippet></ROW><ROW><id>13974516</id><snippet>/usr/local/share/python</snippet></ROW><ROW><id>13974516</id><snippet>$PATH</snippet></ROW><ROW><id>13974527</id><snippet>import math

class Multinomial(object):
  def __init__(self, params):
    self._params = params

  def pmf(self, counts):
    if not(len(counts)==len(self._params)):
      raise ValueError("Dimensionality of count vector is incorrect")

    prob = 1.
    for i,c in enumerate(counts):
      prob *= self._params[i]**counts[i]

    return prob * math.exp(self._log_multinomial_coeff(counts))

  def log_pmf(self,counts):
    if not(len(counts)==len(self._params)):
      raise ValueError("Dimensionality of count vector is incorrect")

    prob = 0.
    for i,c in enumerate(counts):
      prob += counts[i]*math.log(self._params[i])

    return prob + self._log_multinomial_coeff(counts)

  def _log_multinomial_coeff(self, counts):
    return self._log_factorial(sum(counts)) - sum(self._log_factorial(c)
                                                    for c in counts)

  def _log_factorial(self, num):
    if not round(num)==num and num &gt; 0:
      raise ValueError("Can only compute the factorial of positive ints")
    return sum(math.log(n) for n in range(1,num+1))

m = Multinomial([0.1, 0.1, 0.8])
print m.pmf([4,4,2])

&gt;&gt;2.016e-05
</snippet></ROW><ROW><id>13974668</id><snippet>random.random()</snippet></ROW><ROW><id>13974668</id><snippet>if random.random() &lt; anz_prozent_wahrscheinlichkeit / 100.:
   execute my function()
</snippet></ROW><ROW><id>13974668</id><snippet>anz_prozent_wahrscheinlichkeit = 0.1</snippet></ROW><ROW><id>13974758</id><snippet>find</snippet></ROW><ROW><id>13974758</id><snippet>$and</snippet></ROW><ROW><id>13974758</id><snippet>cursor = coll.find(
    {
        {"coordinates":  {"$type":10}},
        {"place": {"$ne": None}}
    }, 
    {"coordinates": 1, "place": 1, "time_normal": 1, "_id": 1}, 
    tailable = True, timeout = False)
</snippet></ROW><ROW><id>13974758</id><snippet>update</snippet></ROW><ROW><id>13974758</id><snippet>doc</snippet></ROW><ROW><id>13974758</id><snippet>update</snippet></ROW><ROW><id>13974758</id><snippet>find</snippet></ROW><ROW><id>13974758</id><snippet>find_one({"_id": current_id})</snippet></ROW><ROW><id>13974758</id><snippet>loc[1]</snippet></ROW><ROW><id>13974768</id><snippet>import networkx as nx   

# Sample graph
G = nx.Graph()
G.add_edge(0,1)
G.add_edge(1,2)
G.add_edge(2,3)
G.add_edge(1,3)

labels = {(0,1):'foo', (2,3):'bar'}

pos=nx.spring_layout(G)

nx.draw(G, pos)
nx.draw_networkx_edge_labels(G,pos,edge_labels=labels,font_size=30)

import pylab as plt
plt.show()
</snippet></ROW><ROW><id>13974768</id><snippet>networkx</snippet></ROW><ROW><id>13974768</id><snippet>import networkx as nx

G = nx.MultiDiGraph()
G.add_edge(0,1, label='A')
G.add_edge(1,0, label='B')
G.add_edge(2,3, label='foo')
G.add_edge(3,1, label='bar')   
nx.write_dot(G, 'my_graph.dot')
</snippet></ROW><ROW><id>13974768</id><snippet>dot my_graph.dot -T png &gt; output.png
</snippet></ROW><ROW><id>13974816</id><snippet>sys.path</snippet></ROW><ROW><id>13974816</id><snippet>PyObject *sys_path, *path;

sys_path = PySys_GetObject("path");
if (sys_path == NULL || !PyList_Check(sys_path)) {   
    /* ZOMG! That's so wrong... */
    return;
}
path = PyString_FromString(path_to_PythonCode);
PyList_Insert(sys_path, 0, path);
Py_DECREF(path);
</snippet></ROW><ROW><id>13974928</id><snippet>UTC</snippet></ROW><ROW><id>13975090</id><snippet>itertools.groupby</snippet></ROW><ROW><id>13975090</id><snippet>lst = sorted(itertools.chain(list_a,list_b), key=lambda x:x['user__id'])
list_c = []
for k,v in itertools.groupby(lst, key=lambda x:x['user__id']):
    d = {}
    for dct in v:
        d.update(dct)
    list_c.append(d)
    #could also do:
    #list_c.append( dict(itertools.chain.from_iterable(dct.items() for dct in v)) )
    #although that might be a little harder to read.
</snippet></ROW><ROW><id>13975090</id><snippet>lambda</snippet></ROW><ROW><id>13975090</id><snippet>operator.itemgetter('user__id')</snippet></ROW><ROW><id>13975090</id><snippet>def foo(x):
    return x['user__id']
</snippet></ROW><ROW><id>13975090</id><snippet>foo = operator.itemgetter('user__id')
foo = lambda x: x['user__id']
</snippet></ROW><ROW><id>13975224</id><snippet>from functools import partial

d = defaultdict(partial(deque, maxlen=10))
</snippet></ROW><ROW><id>13975497</id><snippet>cgi</snippet></ROW><ROW><id>13975497</id><snippet>FieldStorage</snippet></ROW><ROW><id>13975497</id><snippet>print</snippet></ROW><ROW><id>13975497</id><snippet>import cgi

print "Content-Type: text/html"     # HTML is following
print                               # blank line, end of headers
print "&lt;TITLE&gt;CGI script output&lt;/TITLE&gt;"
print "&lt;H1&gt;This is my first CGI script&lt;/H1&gt;"

form = cgi.FieldStorage()
if "name" not in form or "addr" not in form:
    print "&lt;H1&gt;Error&lt;/H1&gt;"
    print "Please fill in the name and addr fields."
    return
print "&lt;p&gt;name:", form["name"].value
print "&lt;p&gt;addr:", form["addr"].value
</snippet></ROW><ROW><id>13975935</id><snippet>.tell()</snippet></ROW><ROW><id>13975935</id><snippet>&gt;&gt;&gt; handle = open('/tmp/file.txt', 'w')
&gt;&gt;&gt; handle.write('foo')
&gt;&gt;&gt; handle.tell()
3
</snippet></ROW><ROW><id>13975935</id><snippet>.seek()</snippet></ROW><ROW><id>13975986</id><snippet>add_edge</snippet></ROW><ROW><id>13975986</id><snippet>add_edges</snippet></ROW><ROW><id>13975986</id><snippet>Graph.Erdos_Renyi(n=10000, m=30000)</snippet></ROW><ROW><id>13976447</id><snippet>sqs</snippet></ROW><ROW><id>13976447</id><snippet>from haystack.utils import Highlighter
highlighter = Highlighter(search_query)
print highlighter.highlight(sqs[0].text)
</snippet></ROW><ROW><id>13976505</id><snippet>self.dmenu1.bind("&lt;Button-1&gt;", self.branches)</snippet></ROW><ROW><id>13976505</id><snippet>OptionMenu</snippet></ROW><ROW><id>13976505</id><snippet>OptionMenu</snippet></ROW><ROW><id>13976505</id><snippet>self.dmenu1 = OptionMenu(self.Frame1, var,'Costcode','Name',
                         command=self.branches)
</snippet></ROW><ROW><id>13976505</id><snippet>command</snippet></ROW><ROW><id>13976505</id><snippet>OptionMenu</snippet></ROW><ROW><id>13976505</id><snippet>self.branches(None)</snippet></ROW><ROW><id>13976505</id><snippet>self.f3ListBox</snippet></ROW><ROW><id>13976608</id><snippet>postgres</snippet></ROW><ROW><id>13976608</id><snippet>SELECT * FROM pg_stat_activity</snippet></ROW><ROW><id>13976608</id><snippet>dispose()</snippet></ROW><ROW><id>13976608</id><snippet>recreate()</snippet></ROW><ROW><id>13976608</id><snippet>session.close()</snippet></ROW><ROW><id>13977024</id><snippet>Objects/longobject.c</snippet></ROW><ROW><id>13977024</id><snippet>#if NSMALLNEGINTS + NSMALLPOSINTS &gt; 0
/* Small integers are preallocated in this array so that they
   can be shared.
   The integers that are preallocated are those in the range
   -NSMALLNEGINTS (inclusive) to NSMALLPOSINTS (not inclusive).
*/
static PyLongObject small_ints[NSMALLNEGINTS + NSMALLPOSINTS];
</snippet></ROW><ROW><id>13977024</id><snippet>a = 1; b = 1</snippet></ROW><ROW><id>13977024</id><snippet>a is b</snippet></ROW><ROW><id>13977024</id><snippet>True</snippet></ROW><ROW><id>13977024</id><snippet>a += 2; b +=2; a -= 2; b -= 2</snippet></ROW><ROW><id>13977024</id><snippet>small_ints</snippet></ROW><ROW><id>13977024</id><snippet>def binary_search(predicate, lo, hi):
    while lo + 1 &lt; hi:
        mid = (lo + hi) / 2
        if predicate(mid):
            lo = mid
        else:
            hi = mid
    return lo

def is_small_int(n):
    p = n + 1
    q = n + 1
    return (p - 1) is (q - 1)

def min_neg_small_int():
    p, q = -1, -1
    if p is not q:
        return 0
    while p is q:
        p += p
        q += q
    return binary_search(is_small_int, p / 2, p) - 1

def max_pos_small_int():
    p, q = 1, 1
    if p is not q:
        return 0
    while p is q:
        p += p
        q += q
    return binary_search(is_small_int, p / 2, p)

def small_int_bounds():
    return (min_neg_small_int(), max_pos_small_int())
</snippet></ROW><ROW><id>13977024</id><snippet>small_int_bounds() == (-5, 256)</snippet></ROW><ROW><id>13977024</id><snippet>-5</snippet></ROW><ROW><id>13977024</id><snippet>256</snippet></ROW><ROW><id>13977024</id><snippet>small_ints</snippet></ROW><ROW><id>13977024</id><snippet>Objects/longobject.c</snippet></ROW><ROW><id>13977024</id><snippet>PyInt_FromLong</snippet></ROW><ROW><id>13977336</id><snippet>        headerDict[node1.header].append(node)
                        ^^^^^^^
</snippet></ROW><ROW><id>13977336</id><snippet>.header</snippet></ROW><ROW><id>13977336</id><snippet>headerDict</snippet></ROW><ROW><id>13977364</id><snippet>byte_str = uni_str.encode('utf-8')
byte_str = byte_str[:size].decode('utf-8', 'ignore').encode('utf-8')
</snippet></ROW><ROW><id>13977364</id><snippet>45 45 具有靜電產生裝置之影像輸入裝置
44 42 具有靜電產生裝置之影像輸入裝
43 42 具有靜電產生裝置之影像輸入裝
42 42 具有靜電產生裝置之影像輸入裝
41 39 具有靜電產生裝置之影像輸入
40 39 具有靜電產生裝置之影像輸入
39 39 具有靜電產生裝置之影像輸入
38 36 具有靜電產生裝置之影像輸
37 36 具有靜電產生裝置之影像輸
36 36 具有靜電產生裝置之影像輸
35 33 具有靜電產生裝置之影像
34 33 具有靜電產生裝置之影像
33 33 具有靜電產生裝置之影像
32 30 具有靜電產生裝置之影
31 30 具有靜電產生裝置之影
</snippet></ROW><ROW><id>13977632</id><snippet>diff</snippet></ROW><ROW><id>13977632</id><snippet>df = DataFrame(Y)
df[1] = df[0].diff() &gt; 600000000000.0 #nanoseconds in ten minutes
df[1] = df[1].apply(lambda x: 1 if x else 0).cumsum()
df.groupby(1)
</snippet></ROW><ROW><id>13977826</id><snippet>def view(request, *args, **kwargs):
    pass

my_kwargs = dict(
    hello='world'
    star='wars'
)

response = view(request, **my_kwargs)
</snippet></ROW><ROW><id>13977826</id><snippet>locals()</snippet></ROW><ROW><id>13977826</id><snippet>**locals()</snippet></ROW><ROW><id>13977826</id><snippet>locals()</snippet></ROW><ROW><id>13977902</id><snippet>class MyWidget(QWidget):
    def __init__(self, parent=None):
        super(MyWidget, self).__init__(parent)   #always provide parent!
        self.initUI()
    def initUI(self):
        self.btn = QPushButton('dia', self)
        self.le = QLineEdit(self)
        layout = QHBoxLayout()  #whatever layout you want
        layout.addWidget(self.btn)
        layout.addWidget(self.le)
        self.setLayout(layout)


class Example(QWidget):
    def __init__(self, parent=None):
        super(Example, self).__init__(parent)
        self.initUI()

    def initUI(self):
        self.mw = MyWidget(self)   # remember the parent!
        layout = QHBoxLayout()
        layout.addWidget(self.mw)
        self.setLayout(layout)

        self.resize(250, 300)
        self.center()
        self.setWindowTitle('Custom Widget Example')
        self.show()
</snippet></ROW><ROW><id>13977926</id><snippet>dict</snippet></ROW><ROW><id>13977926</id><snippet>fruits = {
    'apples': 25,
    'oranges': 35,
    'pears': 10,
    'bananas': 50,
    'pineapples': 40
}
</snippet></ROW><ROW><id>13977926</id><snippet>inputs = []
for i in range(1, 6):
    inputs.append(raw_input('Enter fruit for box {}: '.format(i)))
</snippet></ROW><ROW><id>13977926</id><snippet>sum</snippet></ROW><ROW><id>13977926</id><snippet>fruits</snippet></ROW><ROW><id>13977926</id><snippet>print sum(fruits[name] for name in inputs)
</snippet></ROW><ROW><id>13977926</id><snippet>Enter fruit for box 1: bananas
Enter fruit for box 2: bananas
Enter fruit for box 3: bananas
Enter fruit for box 4: pears
Enter fruit for box 5: apples
185
</snippet></ROW><ROW><id>13977926</id><snippet>inputs</snippet></ROW><ROW><id>13977992</id><snippet>__del__()</snippet></ROW><ROW><id>13977992</id><snippet>def __del__(self):
    try:
        # do whatever you need to here
    except Exception:
        pass
</snippet></ROW><ROW><id>13977992</id><snippet>__del__()</snippet></ROW><ROW><id>13978068</id><snippet>for thing in ['a', 'b', 'c']:
    print thing, getattr(self, thing)
</snippet></ROW><ROW><id>13978068</id><snippet>getattr</snippet></ROW><ROW><id>13978068</id><snippet>to_get = ['a', 'b', 'c']
from operator import attrgetter
blah = zip(to_get, attrgetter(*to_get)(self))
</snippet></ROW><ROW><id>13978630</id><snippet>time.sleep</snippet></ROW><ROW><id>13978630</id><snippet>QTimer</snippet></ROW><ROW><id>13978630</id><snippet>QEventLoop</snippet></ROW><ROW><id>13978630</id><snippet>QThread</snippet></ROW><ROW><id>13978630</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4.QtCore import *
from PyQt4.QtGui import *
from PyQt4.QtWebKit import *

class browser(QWebView):
    def __init__(self, parent=None):
        super(browser, self).__init__(parent)

        self.timerScreen = QTimer()
        self.timerScreen.setInterval(2000)
        self.timerScreen.setSingleShot(True)
        self.timerScreen.timeout.connect(self.takeScreenshot)

        self.loadFinished.connect(self.timerScreen.start)
        self.load(QUrl("http://www.google.com/ncr"))    

    def takeScreenshot(self):    
        image   = QImage(self.page().mainFrame().contentsSize(), QImage.Format_ARGB32)
        painter = QPainter(image)

        self.page().mainFrame().render(painter)

        painter.end()
        image.save(self.title() + ".png")

        sys.exit()

if __name__ == "__main__":
    import  sys        
    app  = QApplication(sys.argv)
    main = browser()
    app.exec_()
</snippet></ROW><ROW><id>13978651</id><snippet>yourListView-&gt;setAttribute(Qt::WA_MacShowFocusRect, false);
</snippet></ROW><ROW><id>13978770</id><snippet>last_time = Column(TIMESTAMP, server_default=func.now(), onupdate=func.current_timestamp())
</snippet></ROW><ROW><id>13978815</id><snippet>179769313486231590772930519078902473361797697894230657273430081157732675805500963132708477322407536021120113879871393357658789768814416622492847430639474124377767893424865485276302219601246094119453082952085005768838150682342462881473913110540827237163350510684586298239947245938479716304835356329624224137216L
</snippet></ROW><ROW><id>13978815</id><snippet>2.914213562373094923430016933707520365715026855468750000000000
3.140579250522168575088244324433617293834686279296875000000000
3.141592646213542838751209274050779640674591064453125000000000
3.141592653589794004176383168669417500495910644531250000000000
3.141592653589794004176383168669417500495910644531250000000000
3.141592653589794004176383168669417500495910644531250000000000
3.141592653589794004176383168669417500495910644531250000000000
</snippet></ROW><ROW><id>13978815</id><snippet>1/math.sqrt(2)</snippet></ROW><ROW><id>13978841</id><snippet>&gt;&gt;&gt; M = np.matrix([
...         [-1,-2,-3],
...         [-4,-5,-6]
...     ])
&gt;&gt;&gt; M[1,:] *= 2          # multiply all elements in second row by 2
&gt;&gt;&gt; M
matrix([[ -1,  -2,  -3],
        [ -8, -10, -12]])
&gt;&gt;&gt; M[:,1] *= 2          # multiply all elements in second column by 2
&gt;&gt;&gt; M
matrix([[ -1,  -4,  -3],
        [ -8, -20, -12]])
</snippet></ROW><ROW><id>13978841</id><snippet>&gt;&gt;&gt; M[:,1] = [[0], [0]]        # note the nested lists to reassign column
&gt;&gt;&gt; M
matrix([[ -1,   0,  -3],
        [ -8,   0, -12]])
&gt;&gt;&gt; M[1,:] = [2, 2, 2]         # flat list to reassign row
&gt;&gt;&gt; M
matrix([[-1,  0, -3],
        [ 2,  2,  2]])
</snippet></ROW><ROW><id>13979332</id><snippet>from subprocess import Popen, PIPE

def run(cmd):
    print '-'*40
    print 'running:', cmd
    p = Popen(cmd, stderr=PIPE, stdout=PIPE, shell=True)
    output, errors = p.communicate()
    print [p.returncode, errors, output]
    if p.returncode or errors:
        print 'something went wrong...'

run("echo all is well")
run("echo out;echo error 1&gt;&amp;2")
run("this-will-fail")
run("exit 1")
</snippet></ROW><ROW><id>13979332</id><snippet>----------------------------------------
running: echo all is well
[0, '', 'all is well\n']
----------------------------------------
running: echo out;echo error 1&gt;&amp;2
[0, 'error\n', 'out\n']
something went wrong...
----------------------------------------
running: this-will-fail
[127, '/bin/sh: this-will-fail: not found\n', '']
something went wrong...
----------------------------------------
running: exit 1
[1, '', '']
something went wrong...
</snippet></ROW><ROW><id>13979758</id><snippet>from time import time

time_1 = time()
# do something
time_2 = time()
if time_2 - time_1 &lt; .5:
    #do something
</snippet></ROW><ROW><id>13979828</id><snippet>class Game(models.Model):
    # Other fields...
    on = models.ForeignKey('Member', blank = True)

class Member(models.Model):
    # Other fields...
    game = models.ForeignKey(Game)
</snippet></ROW><ROW><id>13979837</id><snippet>recv</snippet></ROW><ROW><id>13979837</id><snippet>bytes</snippet></ROW><ROW><id>13979837</id><snippet>bytes</snippet></ROW><ROW><id>13979837</id><snippet>str</snippet></ROW><ROW><id>13979837</id><snippet>decode</snippet></ROW><ROW><id>13979837</id><snippet>stringdata = data.decode('utf-8')
</snippet></ROW><ROW><id>13979837</id><snippet>bytes</snippet></ROW><ROW><id>13979837</id><snippet>str</snippet></ROW><ROW><id>13979837</id><snippet>unicode</snippet></ROW><ROW><id>13979837</id><snippet>struct</snippet></ROW><ROW><id>13979837</id><snippet>:</snippet></ROW><ROW><id>13979837</id><snippet>length</snippet></ROW><ROW><id>13979837</id><snippet>,</snippet></ROW><ROW><id>13979837</id><snippet>b"3:Abc,"</snippet></ROW><ROW><id>13979837</id><snippet>recv</snippet></ROW><ROW><id>13979837</id><snippet>send</snippet></ROW><ROW><id>13979837</id><snippet>send</snippet></ROW><ROW><id>13979837</id><snippet>recv</snippet></ROW><ROW><id>13979837</id><snippet>\0</snippet></ROW><ROW><id>13980083</id><snippet>graph.es["weight"] = range(g.ecount())
</snippet></ROW><ROW><id>13980083</id><snippet>g.es</snippet></ROW><ROW><id>13980083</id><snippet>graph.es[10:20]["weight"] = range(10)
</snippet></ROW><ROW><id>13980109</id><snippet>\n</snippet></ROW><ROW><id>13980109</id><snippet>pattern = re.compile(r'^HESAID:$|^SHESAID:$', re.MULTILINE)
</snippet></ROW><ROW><id>13980109</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>13980109</id><snippet>^</snippet></ROW><ROW><id>13980109</id><snippet>$</snippet></ROW><ROW><id>13980109</id><snippet>?</snippet></ROW><ROW><id>13980109</id><snippet>S</snippet></ROW><ROW><id>13980109</id><snippet>pattern = re.compile(r'^S?HESAID:$', re.MULTILINE)
</snippet></ROW><ROW><id>13980257</id><snippet>manager.Event</snippet></ROW><ROW><id>13980257</id><snippet>while not event.is_set():
 ...rest of code...
</snippet></ROW><ROW><id>13980257</id><snippet>join</snippet></ROW><ROW><id>13980378</id><snippet>stdin_list = list(sys.stdin)
sys.stdin = open('/dev/tty')
for filepath in stdin_list:
    dir = os.path.basename(filepath)
    ...
    IPython.embed()
</snippet></ROW><ROW><id>13980600</id><snippet>evaluateJavascript</snippet></ROW><ROW><id>13980600</id><snippet>jsClick = """var evObj = document.createEvent('MouseEvents');
             evObj.initEvent('click', true, true );
             this.dispatchEvent(evObj);
             """

allSelector = "a#deviceShowAllLink" # This is the css selector you actually need
allButton   = r.frame.documentElement().findFirst(allSelector)
allButton.evaluateJavaScript(jsClick)
</snippet></ROW><ROW><id>13980720</id><snippet>pip</snippet></ROW><ROW><id>13980720</id><snippet>easy_install</snippet></ROW><ROW><id>13980720</id><snippet>readline</snippet></ROW><ROW><id>13980720</id><snippet>pip</snippet></ROW><ROW><id>13980720</id><snippet>easy_install</snippet></ROW><ROW><id>13980720</id><snippet>pip</snippet></ROW><ROW><id>13980720</id><snippet>sudo easy_install pip
</snippet></ROW><ROW><id>13980720</id><snippet>sudo pip install matplotlib
</snippet></ROW><ROW><id>13980720</id><snippet>pip</snippet></ROW><ROW><id>13980720</id><snippet>easy_install</snippet></ROW><ROW><id>13980720</id><snippet>-m</snippet></ROW><ROW><id>13980720</id><snippet>easy_install</snippet></ROW><ROW><id>13980720</id><snippet>pip install --egg</snippet></ROW><ROW><id>13980720</id><snippet>sudo easy_install -m matplotlib</snippet></ROW><ROW><id>13980720</id><snippet>sudo pip install matplotlib</snippet></ROW><ROW><id>13980779</id><snippet>myregex = re.compile(...)
print any(myregex.search(s) for s in my_list_of_strings)
</snippet></ROW><ROW><id>13980779</id><snippet>regexs = [re.compile(s) for s in my_list_of_regex_strings]
any(r.search(my_string) for r in regexs)
</snippet></ROW><ROW><id>13980779</id><snippet>regex_str = '|'.join('(?:%s)'%re.escape(s) for s in list_of_regex_strings)
re.search(regex_str,my_string)
</snippet></ROW><ROW><id>13980779</id><snippet>next(regex_str for regex_str in regex_str_list if re.search(regex_str,mystring))
</snippet></ROW><ROW><id>13980779</id><snippet>StopIteration</snippet></ROW><ROW><id>13980826</id><snippet>print "probList" %  problemList # how can I get this list also from the same proc?
</snippet></ROW><ROW><id>13980826</id><snippet>problemList</snippet></ROW><ROW><id>13980826</id><snippet>tuple</snippet></ROW><ROW><id>13980826</id><snippet>problemList</snippet></ROW><ROW><id>13980826</id><snippet>list</snippet></ROW><ROW><id>13980826</id><snippet>yield</snippet></ROW><ROW><id>13980826</id><snippet>problemList</snippet></ROW><ROW><id>13980826</id><snippet>problemList</snippet></ROW><ROW><id>13980826</id><snippet>problemList</snippet></ROW><ROW><id>13980826</id><snippet>print [ x for x in get_dirs_to_remove(dirRoot, olderThanDays)]
</snippet></ROW><ROW><id>13980826</id><snippet>print list(get_dirs_to_remove(dirRoot, olderThanDays))
</snippet></ROW><ROW><id>13980826</id><snippet>listdir</snippet></ROW><ROW><id>13980826</id><snippet>list</snippet></ROW><ROW><id>13980826</id><snippet>yearDirs = os.listdir(dirRoot):
problemList.extend(yearDir for yearDir in yearDirs if not is_int(yearDir))
yield from (yearDir for yearDir in yearDirs if int(yearDir) &lt; oldKeepYear)
for year in (yearDir for yearDir in yearDirs if int(yearDir) == oldKeepYear):
    # next level down
</snippet></ROW><ROW><id>13980826</id><snippet>yearDirs = os.listdir(dirRoot)
problems, older, eq, newer = partitionDirs(yearDirs, oldKeepYear)
problemList.extend(problems)
yield from older
for year in eq:
    # next level down
</snippet></ROW><ROW><id>13980826</id><snippet>yearDirs</snippet></ROW><ROW><id>13980826</id><snippet>partitionDirs</snippet></ROW><ROW><id>13980826</id><snippet>def partitionDirs(dirs, keyvalue):
    problems = [dir for dir in dirs if not is_int(dir)]
    values = sorted(dir for dir in dirs if is_int(dir), key=int)
    older, eq, newer = partitionSortedListAt(values, keyvalue, key=int)
</snippet></ROW><ROW><id>13980826</id><snippet>partitionSortedListAt</snippet></ROW><ROW><id>13980826</id><snippet>    i = bisect.bisect_right(vals, keyvalue)
    if vals[i] == keyvalue:
        return problems, vals[:i], [vals[i]], vals[i+1:]
    else:
        return problems, vals[:i], [], vals[i:]
</snippet></ROW><ROW><id>13980826</id><snippet>yearDirs = os.listdir(dirRoot)
problems, older, eq, newer = partitionDirs(yearDirs, oldKeepYear)
problemList.extend(problems)
yield from older
for year in eq:
    monthDirs = os.listdir(os.path.join(dirRoot, str(year)))
    problems, older, eq, newer = partitionDirs(monthDirs, oldKeepMonth)
    problemList.extend(problems)
    yield from older
    for month in eq:
        dayDirs = os.listdir(os.path.join(dirRoot, str(year), str(month)))
        problems, older, eq, newer = partitionDirs(dayDirs, oldKeepDay)
        problemList.extend(problems)
        yield from older
        yield from eq
</snippet></ROW><ROW><id>13980826</id><snippet>yield from</snippet></ROW><ROW><id>13980826</id><snippet>def doLevel(pathSoFar, dateComponentsLeft):
    if not dateComponentsLeft:
        return
    dirs = os.listdir(pathSoFar)
    problems, older, eq, newer = partitionDirs(dirs, dateComponentsLeft[0])
    problemList.extend(problems)
    yield from older
    if eq:
        yield from doLevel(os.path.join(pathSoFar, eq[0]), dateComponentsLeft[1:]))
yield from doLevel(rootPath, [oldKeepYear, oldKeepMonth, oldKeepDay])
</snippet></ROW><ROW><id>13980826</id><snippet>yield from</snippet></ROW><ROW><id>13980953</id><snippet>.string</snippet></ROW><ROW><id>13980953</id><snippet>unicode()</snippet></ROW><ROW><id>13980953</id><snippet>name = unicode(i.find('a').string)
</snippet></ROW><ROW><id>13980953</id><snippet>NavigableString</snippet></ROW><ROW><id>13980953</id><snippet>str</snippet></ROW><ROW><id>13980953</id><snippet>name = unicode(i.find('a').string).encode('utf8')
</snippet></ROW><ROW><id>13980953</id><snippet>dict</snippet></ROW><ROW><id>13980953</id><snippet>unicode()</snippet></ROW><ROW><id>13980953</id><snippet>unicode()</snippet></ROW><ROW><id>13980953</id><snippet>str()</snippet></ROW><ROW><id>13981101</id><snippet>Popen()</snippet></ROW><ROW><id>13981101</id><snippet>&gt;&gt;&gt; print u'\u00e4'  # A unicode escape code for the latin-1 character ä
ä
&gt;&gt;&gt; u'\u00e4'.encode('utf8')  # The same character encoded to UTF-8
'\xc3\xa4'
&gt;&gt;&gt; print u'\u00e4'.encode('utf8').decode('latin1')  # Misinterpreted as Latin-1
Ã¤
</snippet></ROW><ROW><id>13981101</id><snippet>.encode()</snippet></ROW><ROW><id>13981101</id><snippet>.Popen()</snippet></ROW><ROW><id>13981397</id><snippet>Content-Encoding: gzip</snippet></ROW><ROW><id>13981397</id><snippet>feedparser</snippet></ROW><ROW><id>13981397</id><snippet>urllib2</snippet></ROW><ROW><id>13981397</id><snippet>urllib2</snippet></ROW><ROW><id>13981397</id><snippet>gzip</snippet></ROW><ROW><id>13981397</id><snippet>import gzip
from cStringIO import StringIO

rss_feed = gzip.GzipFile(fileobj=StringIO(rss_feed)).read()
</snippet></ROW><ROW><id>13981527</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>13981527</id><snippet>sys._getframe()</snippet></ROW><ROW><id>13981527</id><snippet>import inspect, sys

print inspect.getsourcefile(sys, sys._getframe(1))
</snippet></ROW><ROW><id>13981593</id><snippet>count</snippet></ROW><ROW><id>13981593</id><snippet>    #line integration time/stats
    count = count + 1 #increment the counter
    if count % 1000 == 0:
        now = datetime.now()
        diff = now - startTime
        taken = diff.seconds
        avgPerLine = float(taken) / float(count)
        totalTimeLeft = (howManyLinesTotal-count) * avgPerLine
        print "Time left (mins): " + str(totalTimeLeft/60) #output the stats
        print "Avg per line: " + str(avgPerLine)
</snippet></ROW><ROW><id>13981648</id><snippet>"{\"source\": \"FOO.\", \"model\": ...
</snippet></ROW><ROW><id>13981648</id><snippet>data = json.loads(line)
if 'derivedFrom' in data:
    dFin = json.loads(data['derivedFrom'])
    if 'derivedIds' in dFin:
        ....
</snippet></ROW><ROW><id>13981728</id><snippet>XmlItemExporter</snippet></ROW><ROW><id>13981728</id><snippet>XmlItemExporter(file, 'data', 'row')
</snippet></ROW><ROW><id>13981728</id><snippet>value</snippet></ROW><ROW><id>13981728</id><snippet>&lt;fieldname&gt;data&lt;/fieldname&gt;</snippet></ROW><ROW><id>13981728</id><snippet>&lt;fieldname&gt;&lt;value&gt;data1&lt;/value&gt;&lt;value&gt;data2&lt;/value&gt;&lt;/fieldname&gt;</snippet></ROW><ROW><id>13981728</id><snippet>XmlItemExporter</snippet></ROW><ROW><id>13981728</id><snippet>_export_xml_field</snippet></ROW><ROW><id>13981728</id><snippet>XmlItemExporter</snippet></ROW><ROW><id>13981829</id><snippet>import numpy as np

def bit_iter(n):
    for i in xrange(2**(n)):
        bits = []
        for j in xrange(n):
            if i &amp; (2**j) != 0:
                bits.append(1)
            else:
                bits.append(0)
        yield bits

def maximal_sum(M):
    Morig = M.copy()
    n, m = M.shape
    best = None
    for bits in bit_iter(n + m):
        nvec = bits[:n]
        mvec = bits[n:]
        assert(len(nvec) + len(mvec) == len(bits))
        M = Morig.copy()
        for i, v in enumerate(nvec):
            if v == 0:
                M[i, :] *= -1
        for i, v in enumerate(mvec):
            if v == 0:
                M[:, i] *= -1
        if best == None or np.sum(M) &gt; np.sum(best):
            best = M
    return best

M = np.matrix([
    [2,2,2,2],
    [2,2,-2,2],
    [2,2,2,2],
    [2,2,2,1],
])
print maximal_sum(M)
M = np.matrix([
        [1,2],[3,-4]
    ])
print maximal_sum(M)
M = np.matrix([
        [2,-2,2,2],
        [2,2,2,2],
        [2,2,-2,2],
        [2,2,2,2],
        [2,2,2,1],
    ])
print maximal_sum(M)
</snippet></ROW><ROW><id>13981829</id><snippet>[[ 2  2  2  2]
 [ 2  2 -2  2]
 [ 2  2  2  2]
 [ 2  2  2  1]]
[[-1  2]
 [ 3  4]]
[[ 2 -2  2  2]
 [ 2  2  2  2]
 [ 2  2 -2  2]
 [ 2  2  2  2]
 [ 2  2  2  1]]
</snippet></ROW><ROW><id>13981889</id><snippet>list</snippet></ROW><ROW><id>13981889</id><snippet>list</snippet></ROW><ROW><id>13981889</id><snippet>datetime</snippet></ROW><ROW><id>13981889</id><snippet>import os
import datetime
import cPickle

# just a constants we can use to define our score file location
SCORES_FILE = "scores.pickle"

def get_user_data():
    time1 = datetime.datetime.now()
    print "Current time:", time1.strftime("%d.%m.%Y, %H:%M")

    a = None
    while True:
        a = raw_input("Enter weight: ")    
        try:
            a = float(a)
        except:
            continue
        else:
            break

    b = None
    while True:
        b = raw_input("Enter height: ")    
        try:
            b = float(b)
        except:
            continue
        else:
            break

    c = a/b

    return ['', a, b, c, time1]

def read_high_scores():
    # initialize an empty score file if it does
    # not exist already, and return an empty list
    if not os.path.isfile(SCORES_FILE):
        write_high_scores([])
        return []

    with open(SCORES_FILE, 'r') as f:
        scores = cPickle.load(f)
    return scores

def write_high_scores(scores):
    with open(SCORES_FILE, 'w') as f:
        cPickle.dump(scores, f)

def update_scores(newScore, highScores):
    # reuse an anonymous function for looking
    # up the `c` (4th item) score from the object
    key = lambda item: item[3]

    # make a local copy of the scores
    highScores = highScores[:]

    lowest = None
    if highScores:
        lowest = min(highScores, key=key)

    # only add the new score if the high scores
    # are empty, or it beats the lowest one
    if lowest is None or (newScore[3] &gt; lowest[3]):
        newScore[0] = raw_input("Enter name: ")
        highScores.append(newScore)

    # take only the highest 5 scores and return them
    highScores.sort(key=key, reverse=True)
    return highScores[:5]

def print_high_scores(scores):
    # loop over scores using enumerate to also
    # get an int counter for printing
    for i, score in enumerate(scores):
        name, a, b, c, time1 = score
        # #1    50.0    jdi    (20.12.2012, 15:02)
        print "#%d\t%s\t%s\t(%s)" % \
            (i+1, c, name, time1.strftime("%d.%m.%Y, %H:%M"))


def main():
    score = get_user_data()
    highScores = read_high_scores()

    highScores = update_scores(score, highScores)

    write_high_scores(highScores)
    print_high_scores(highScores)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>13981962</id><snippet>set</snippet></ROW><ROW><id>13981962</id><snippet>from collections import Counter

# for testing
from random import choice, randrange
from string import ascii_uppercase
big_word = "".join(choice(ascii_uppercase) for i in range(10000))
words = [big_word[randrange(len(big_word)):][:randrange(1, 10)] for i in range(100000)] # words of up to 9 letters; all are substrings of big_word  

# now the real code
def insertions(words):
    for word in words:
        for i in range(1, len(word) - 1):
            ins = word[:i]
            rest = word[i:]
            for j in range(1, len(rest)):
                if rest[:j] in words:
                    yield ins
        for i in range(1, len(word) - 1):
            rest = word[:i]
            ins = word[i:]
            for j in range(len(rest) - 1):
                if rest[j:] in words:
                    yield ins

transforms = Counter(insertions(set(words)))
</snippet></ROW><ROW><id>13981986</id><snippet>break</snippet></ROW><ROW><id>13981986</id><snippet>else</snippet></ROW><ROW><id>13981986</id><snippet>x = input("Who to check for? ")
for i in myList:
    if i.name == x:
        print("Name: {0}\nEmail: {1}".format(i.name, i.email))
        break
else:
    # this is only run if 'break' was not executed inside of the loop
    print("{0} is not on the manifest.".format(x))
</snippet></ROW><ROW><id>13981986</id><snippet>Person</snippet></ROW><ROW><id>13981986</id><snippet>myDict = {}
JohnDoe = Person("John Doe", "jdoe@email.com")
BobbyMcfry = Person("Bobby Mcfry", "bmcfry@email.com")
WardWilkens = Person("Ward Wilkens", "wwilkens@email.com")
for person in [JohnDoe, BobbyMcfry, WardWilkens]:
    myDict[person.name] = person

x = input("Who to check for? ")
person = myDict.get(x)
if person:
    print("Name: {0}\nEmail: {1}".format(person.name, person.email))
else:
    print("{0} is not on the manifest.".format(x))
</snippet></ROW><ROW><id>13982084</id><snippet>QTNETWORK4.DLL</snippet></ROW><ROW><id>13982084</id><snippet>bin</snippet></ROW><ROW><id>13982084</id><snippet>QTNETWORK4.DLL</snippet></ROW><ROW><id>13982084</id><snippet>path</snippet></ROW><ROW><id>13982084</id><snippet>bin</snippet></ROW><ROW><id>13982084</id><snippet>path</snippet></ROW><ROW><id>13982152</id><snippet>@some_decorator
def some_func():
    ...
</snippet></ROW><ROW><id>13982152</id><snippet>def some_func():
    ....
some_func = some_decorator(some_func)
</snippet></ROW><ROW><id>13982198</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import wx

class Page(wx.Panel):
    def __init__(self, parent):
        wx.Panel.__init__(self, parent)
        t = wx.StaticText(self, -1, "THIS IS A PAGE OBJECT", (20,20))

class MainFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, title="Notebook Remove Pages Example")

        pannel  = wx.Panel(self)
        vbox    = wx.BoxSizer(wx.VERTICAL)
        hbox    = wx.BoxSizer(wx.HORIZONTAL)

        self.buttonRemove = wx.Button(pannel, id=wx.ID_ANY, label="DELETE", size=(80, 25))
        self.buttonRemove.Bind(wx.EVT_BUTTON, self.onButtonRemove)
        hbox.Add(self.buttonRemove)

        self.buttonInsert = wx.Button(pannel, id=wx.ID_ANY, label="CREATE", size=(80, 25))
        self.buttonInsert.Bind(wx.EVT_BUTTON, self.onButtonInsert)
        hbox.Add(self.buttonInsert)

        vbox.Add(hbox)

        self.Notebook3 = wx.Notebook(pannel)
        vbox.Add(self.Notebook3, 2, flag=wx.EXPAND)

        pannel.SetSizer(vbox)

        self.pageCounter = 0
        self.addPage()

    def addPage(self):
        self.pageCounter += 1
        page      = Page(self.Notebook3)
        pageTitle = "Page: {0}".format(str(self.pageCounter))
        self.Notebook3.AddPage(page, pageTitle)

    def onButtonRemove(self, event):   
        self.Notebook3.DeletePage(0)

    def onButtonInsert(self, event):   
        self.addPage()

if __name__ == "__main__":
    app = wx.App()
    MainFrame().Show()
    app.MainLoop()
</snippet></ROW><ROW><id>13982328</id><snippet>subprocess.call(['/bin/bash', '-c', 'bin/buildout'])</snippet></ROW><ROW><id>13982328</id><snippet>subprocess.call(['/bin/sh', '-c', 'bin/buildout'])</snippet></ROW><ROW><id>13982658</id><snippet>data = [[int(i) for i in line.split(';')] for line in open(filename)]
</snippet></ROW><ROW><id>13982658</id><snippet>import csv
data = [[int(i) for i in ln] for ln in csv.reader(open(filename), delimiter=';')]
</snippet></ROW><ROW><id>13982658</id><snippet>data = [line.split(';') for line in open(filename)]
</snippet></ROW><ROW><id>13982658</id><snippet>data = list(csv.reader(open(filename), delimiter=';'))
</snippet></ROW><ROW><id>13982722</id><snippet>root</snippet></ROW><ROW><id>13982722</id><snippet>Labelframe</snippet></ROW><ROW><id>13982722</id><snippet>Labelframe</snippet></ROW><ROW><id>13982722</id><snippet>labelwidget</snippet></ROW><ROW><id>13982722</id><snippet>Label</snippet></ROW><ROW><id>13982722</id><snippet>in_</snippet></ROW><ROW><id>13982722</id><snippet>column=0, row=0</snippet></ROW><ROW><id>13982722</id><snippet>import Tkinter
import ttk

class MakeGUI(object):
    def __init__(self,root):
        self.root = root
        self.root.title(u"Title")
        ## build frame
        self.mainframe = ttk.Frame(self.root, padding=(6, 6, 12, 12))
        self.mainframe.grid(sticky='nwse')
        for column in range(3):
            self.mainframe.columnconfigure(column, weight=1)
        self.mainframe.rowconfigure(1, weight=1)

        ## text labels
        ttk.Label(self.mainframe, text=u"Label Title", anchor='center',
                font=("Helvetica", 32)).grid(in_=self.mainframe,
                        column=0, row=0, columnspan=3, sticky="ew")

        self.lfdata = ttk.Labelframe(self.mainframe, padding=(6, 6, 12, 12),
                text='Labelframe')
        self.lfdata.grid(column=0, columnspan=3, row=1, sticky='nsew')
        info = (u"Source Filename", u"Source Text", u"Converted Text",
                u"Cleaned Source", u"Cleaned Converted", u"Details")
        for i, item in enumerate(info):
            ttk.Label(self.lfdata, text=u"%s:" % item).grid(in_=self.lfdata,
                    column=0, row=i, sticky='w')

        ## buttons
        btn = (u"Close", u"Next", u"Prev")
        for i, item in enumerate(btn):
            ttk.Button(self.mainframe, text=item).grid(in_=self.mainframe,
                    column=i, row=3)

def main():
    root = Tkinter.Tk()
    root.columnconfigure(0, weight=1)
    root.rowconfigure(0, weight=1)
    makeGUI = MakeGUI(root)
    root.mainloop()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>13982904</id><snippet>for table in t:
    rows = table.findAll('tr')
    for row in rows:
        cols = row.findAll('td')
        if 'break' in cols[0].get('class', []):
            header = cols[0].text
        else:
            print header, ' '.join(col.text for col in cols)
</snippet></ROW><ROW><id>13982904</id><snippet>join</snippet></ROW><ROW><id>13982904</id><snippet>'break' in cols[0].get('class', [])</snippet></ROW><ROW><id>13982904</id><snippet>cols</snippet></ROW><ROW><id>13982904</id><snippet>list</snippet></ROW><ROW><id>13982904</id><snippet>Tag</snippet></ROW><ROW><id>13982904</id><snippet>td</snippet></ROW><ROW><id>13982904</id><snippet>tr</snippet></ROW><ROW><id>13982904</id><snippet>cols[0]</snippet></ROW><ROW><id>13982904</id><snippet>cols[0].get('class', [])</snippet></ROW><ROW><id>13982904</id><snippet>Tag</snippet></ROW><ROW><id>13982904</id><snippet>get(key, defaultvalue)</snippet></ROW><ROW><id>13982904</id><snippet>Tag</snippet></ROW><ROW><id>13982904</id><snippet>list</snippet></ROW><ROW><id>13982904</id><snippet>'foo bar'</snippet></ROW><ROW><id>13982904</id><snippet>&lt;td class='foo bar'&gt;</snippet></ROW><ROW><id>13982904</id><snippet>'bar'</snippet></ROW><ROW><id>13982904</id><snippet>&lt;td class='foo' class='bar'&gt;</snippet></ROW><ROW><id>13982904</id><snippet>['foo', 'bar']</snippet></ROW><ROW><id>13982904</id><snippet>cols[0].get('class', [])</snippet></ROW><ROW><id>13982904</id><snippet>['break']</snippet></ROW><ROW><id>13982904</id><snippet>&lt;td class='break'&gt;</snippet></ROW><ROW><id>13982904</id><snippet>[]</snippet></ROW><ROW><id>13982904</id><snippet>cols[0]</snippet></ROW><ROW><id>13982904</id><snippet>IndexError</snippet></ROW><ROW><id>13983223</id><snippet>path</snippet></ROW><ROW><id>13983223</id><snippet>"['address']['city']"</snippet></ROW><ROW><id>13983223</id><snippet>field</snippet></ROW><ROW><id>13983223</id><snippet>("address", "city")</snippet></ROW><ROW><id>13983223</id><snippet>def dynamic_assertion(response, field, value):
    for item in response["items"]:
        for key in field:
            item = item[key] # go deeper into the nested dictionary
        if item != value:
            return False # raising an exception might be more Pythonic
    return True
</snippet></ROW><ROW><id>13983223</id><snippet>response</snippet></ROW><ROW><id>13983223</id><snippet>&gt;&gt;&gt; dynamic_assertion(response, ("address", "city"), "New York")
True
&gt;&gt;&gt; dynamic_assertion(response, ("address", "city"), "Boston")
False
&gt;&gt;&gt; response["items"][2]["address"]["city"] = "Boston" # make response invalid 
&gt;&gt;&gt; dynamic_assertion(response, ("address", "city"), "New York")
False
&gt;&gt;&gt; dynamic_assertion(response, ("address", "city"), "Boston")
False
</snippet></ROW><ROW><id>13983224</id><snippet>apt-get</snippet></ROW><ROW><id>13983224</id><snippet>sudo apt-get update</snippet></ROW><ROW><id>13983224</id><snippet>sudo apt-get install python-sip python-qt4</snippet></ROW><ROW><id>13983224</id><snippet>pip remove sip</snippet></ROW><ROW><id>13983224</id><snippet>$ python
&gt;&gt;&gt; import sip
&gt;&gt;&gt; print sip 
# path to sip
</snippet></ROW><ROW><id>13983540</id><snippet>import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Create original dataframe
df = pd.DataFrame(np.random.rand(5,4), index=['art','mcf','mesa','perl','gcc'],
                        columns=['pol1','pol2','pol3','pol4'])
# Estimate average
average = df.mean()
average.name = 'average'

# Append dummy row with zeros and then average
row = pd.DataFrame([dict({p:0.0 for p in df.columns}), ])

df = df.append(row)
df = df.reindex(np.where(df.index, df.index, ''))
df = df.append(average)
print df

df.plot(kind='bar')
plt.show()
</snippet></ROW><ROW><id>13983548</id><snippet>data:</snippet></ROW><ROW><id>13983651</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter([thing['count'] for thing in things])
&gt;&gt;&gt; c[1]               # Number of elements with count==1
100
&gt;&gt;&gt; c[2]               # Number of elements with count==2
100
&gt;&gt;&gt; c.most_common()    # Most common elements
[(1, 100), (2, 100)]
&gt;&gt;&gt; sum(c.values())    # Number of elements
200
&gt;&gt;&gt; list(c)            # List of unique counts
[1, 2]
&gt;&gt;&gt; dict(c)            # Converted to a dict 
{1: 100, 2: 100}
</snippet></ROW><ROW><id>13983651</id><snippet>class DictCounter(object):
    def __init__(self, list_of_ds):
        for k,v in list_of_ds[0].items():
            self.__dict__[k] = collections.Counter([d[k] for d in list_of_ds])

&gt;&gt;&gt; new_things = [{'test': 1, 'count': 1} for i in range(10)]
&gt;&gt;&gt; for i in new_things[0:5]: i['count']=2

&gt;&gt;&gt; d = DictCounter(new_things)
&gt;&gt;&gt; d.count
Counter({1: 5, 2: 5})
&gt;&gt;&gt; d.test
Counter({1: 10})
</snippet></ROW><ROW><id>13983651</id><snippet>&gt;&gt;&gt; class DictCounter(object):
    def __init__(self, list_of_ds):
        keys = set(itertools.chain(*(i.keys() for i in list_of_ds)))
        for k in keys:
            self.__dict__[k] = collections.Counter([d.get(k) for d in list_of_ds])

&gt;&gt;&gt; a = [{'test': 5, 'count': 4}, {'test': 3, 'other': 5}, {'test':3}, {'test':5}]
&gt;&gt;&gt; d = DictCounter(a)
&gt;&gt;&gt; d.test
Counter({3: 2, 5: 2})
&gt;&gt;&gt; d.count
Counter({None: 3, 4: 1})
&gt;&gt;&gt; d.other
Counter({None: 3, 5: 1})
</snippet></ROW><ROW><id>13983725</id><snippet>urllib2</snippet></ROW><ROW><id>13983725</id><snippet>import threading
import time
from Queue import Queue

def worker(queue, results, lock):
    local_results = []
    while True:
        val = queue.get()
        if val is None:
            break

        # pretend to do work
        time.sleep(.1)
        local_results.append(val)

    with lock:
        results.extend(local_results)
        print threading.current_thread().name, "Done!"


num_workers = 4

threads = []
queue = Queue()
lock = threading.Lock()
results = []

for i in xrange(100):
    queue.put(i)

for _ in xrange(num_workers):

    # Use None as a sentinel to signal the threads to end
    queue.put(None)

    t = threading.Thread(target=worker, args=(queue,results,lock))
    t.start()
    threads.append(t)

for t in threads:
    t.join()

print sorted(results)

print "All done"
</snippet></ROW><ROW><id>13983740</id><snippet>list_of_arrays</snippet></ROW><ROW><id>13983740</id><snippet>from libc.stdlib cimport malloc, free

cdef float_type_t *list_of_arrays = \
    &lt;float_type_t *&gt;malloc(no_of_arrays * sizeof(float_type_t*))

for i in range(no_of_arrays):
    list_of_arrays[i] = &amp;(data_array[i].data)

# don't forget to free list_of_arrays!
</snippet></ROW><ROW><id>13983740</id><snippet>data_array</snippet></ROW><ROW><id>13983797</id><snippet>Sidescroller</snippet></ROW><ROW><id>13983797</id><snippet>FPS</snippet></ROW><ROW><id>13983797</id><snippet>Map</snippet></ROW><ROW><id>13983797</id><snippet>Game</snippet></ROW><ROW><id>13983797</id><snippet>Map</snippet></ROW><ROW><id>13983797</id><snippet>Game</snippet></ROW><ROW><id>13983797</id><snippet>Map</snippet></ROW><ROW><id>13983797</id><snippet>Map</snippet></ROW><ROW><id>13983797</id><snippet>Game</snippet></ROW><ROW><id>13983797</id><snippet>self</snippet></ROW><ROW><id>13983797</id><snippet># print the game's title via the Map class

class Game:

    def __init__(self):
        self.title = "Robot Ninja Spaceman: Lazer Quest"
        self.map = Map(self)

class Map:

    def __init__(self, game):
        print game.title

if __name__ == "__main__":
    game = Game()
</snippet></ROW><ROW><id>13984097</id><snippet>import subprocess

    ...

subprocess.call(['wget','-nH', image_url, '-P  images/'])
</snippet></ROW><ROW><id>13984352</id><snippet>live['first_babies'] = live['birthord'].lambda(x: 'first_babies' if x==1 else 'others')
</snippet></ROW><ROW><id>13984352</id><snippet>unstack</snippet></ROW><ROW><id>13984352</id><snippet>grouped = live.groupby(by=['prglength', 'first_babies']).size()
unstacked_count = grouped.size().unstack()
</snippet></ROW><ROW><id>13984352</id><snippet>unstacked_count.plot(kind='bar', stacked=True)
</snippet></ROW><ROW><id>13984455</id><snippet>while</snippet></ROW><ROW><id>13984485</id><snippet>In [17]: pd.concat([DataFrame({'s1': s1}), DataFrame({'s2': s2})]).ffill().bfill()
Out[17]: 
                 s1   s2
2012-12-21  9.0e-01 -0.3
2012-12-22  5.0e-03 -0.3
2012-12-23 -2.9e-01 -0.3
2012-12-23 -2.9e-01 -0.3
2012-12-24 -2.9e-01 -1.8
2012-12-25 -2.9e-01 -1.4
</snippet></ROW><ROW><id>13984485</id><snippet>ffill()</snippet></ROW><ROW><id>13984485</id><snippet>bfill()</snippet></ROW><ROW><id>13984485</id><snippet>fillna(method='ffill')</snippet></ROW><ROW><id>13984485</id><snippet>fillna(method='bfill')</snippet></ROW><ROW><id>13984494</id><snippet>from sqlalchemy import *

m = MetaData()
t = Table('t', m, Column('x', Integer))

s = select([t], for_update="read")

from sqlalchemy.dialects import postgresql
print s.compile(dialect=postgresql.dialect())

e = create_engine("postgresql://scott:tiger@localhost/test", echo=True)
with e.begin() as conn:
    m.create_all(conn)
    conn.execute(s)
</snippet></ROW><ROW><id>13984494</id><snippet>SELECT t.x 
FROM t FOR SHARE
2012-12-20 23:53:33,670 INFO sqlalchemy.engine.base.Engine select version()
2012-12-20 23:53:33,671 INFO sqlalchemy.engine.base.Engine {}
2012-12-20 23:53:33,672 INFO sqlalchemy.engine.base.Engine select current_schema()
2012-12-20 23:53:33,672 INFO sqlalchemy.engine.base.Engine {}
2012-12-20 23:53:33,674 INFO sqlalchemy.engine.base.Engine BEGIN (implicit)
2012-12-20 23:53:33,674 INFO sqlalchemy.engine.base.Engine select relname from pg_class c join pg_namespace n on n.oid=c.relnamespace where n.nspname=current_schema() and relname=%(name)s
2012-12-20 23:53:33,675 INFO sqlalchemy.engine.base.Engine {'name': u't'}
2012-12-20 23:53:33,676 INFO sqlalchemy.engine.base.Engine SELECT t.x 
FROM t FOR SHARE
2012-12-20 23:53:33,676 INFO sqlalchemy.engine.base.Engine {}
2012-12-20 23:53:33,676 INFO sqlalchemy.engine.base.Engine COMMIT
</snippet></ROW><ROW><id>13984519</id><snippet>str</snippet></ROW><ROW><id>13984612</id><snippet>request = self.soapclient.factory.create('ns4:SaveCRRequest')
</snippet></ROW><ROW><id>13984612</id><snippet>ns4:SaveCRRequest</snippet></ROW><ROW><id>13984612</id><snippet>http://prism:8000/ChangeRequestWebService.svc?wsdl
</snippet></ROW><ROW><id>13984636</id><snippet>In [1]: Series().mean()
Out[1]: nan
</snippet></ROW><ROW><id>13984636</id><snippet>resample</snippet></ROW><ROW><id>13984636</id><snippet>fill_method</snippet></ROW><ROW><id>13984636</id><snippet>'ffill'</snippet></ROW><ROW><id>13984636</id><snippet>dropna</snippet></ROW><ROW><id>13984636</id><snippet>data_m.resample('D', how = mean, fill_method='ffill')
data_m.resample('D', how = mean).dropna()
</snippet></ROW><ROW><id>13984857</id><snippet>hello_username</snippet></ROW><ROW><id>13984857</id><snippet>@app.route('/hello/', methods=['POST'])
def hello_username():
    return "Hello %s" % request.form.get('username', 'nobody')
</snippet></ROW><ROW><id>13984857</id><snippet>from flask import request</snippet></ROW><ROW><id>13984857</id><snippet>&gt; curl -X POST -i 'http://localhost:2000/hello/' -d "username=alberto"
HTTP/1.0 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: 9
Server: Werkzeug/0.8.3 Python/2.7.2
Date: Fri, 21 Dec 2012 05:42:49 GMT

Hello alberto
</snippet></ROW><ROW><id>13984857</id><snippet>def t_username(self, username):
    return self.app.post('/hello', data={"username":username})
</snippet></ROW><ROW><id>13984857</id><snippet>@app.route('/hello/&lt;username&gt;', methods=['POST'])
def hello_username(username):
    print request.args
    return "Hello %s" % username
</snippet></ROW><ROW><id>13984857</id><snippet>&gt; curl -X POST -i 'http://localhost:2000/hello/alberto'           
HTTP/1.0 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: 13
Server: Werkzeug/0.8.3 Python/2.7.2
Date: Fri, 21 Dec 2012 06:29:25 GMT

Hello alberto
</snippet></ROW><ROW><id>13984857</id><snippet>@app.route('/hello/&lt;username&gt;', methods=['POST'])
def hello_username(username):
    print request.args
    return "Hello %s" % username


&gt; curl -i 'http://localhost:2000/hello/alberto'           
HTTP/1.0 200 OK
Content-Type: text/html; charset=utf-8
Content-Length: 13
Server: Werkzeug/0.8.3 Python/2.7.2
Date: Fri, 21 Dec 2012 06:31:10 GMT
</snippet></ROW><ROW><id>13984857</id><snippet>def t_username(self, username):
    return self.app.get('/hello/%s' % (username), follow_redirects=True)
</snippet></ROW><ROW><id>13984857</id><snippet>def t_username(self, username):
    return self.app.get('/hello/{username}'.format(username=username), follow_redirects=True)
</snippet></ROW><ROW><id>13984872</id><snippet>_secret_second_method</snippet></ROW><ROW><id>13984872</id><snippet>first_method</snippet></ROW><ROW><id>13985085</id><snippet>wxPython 2.8</snippet></ROW><ROW><id>13985085</id><snippet>wxPython 2.9</snippet></ROW><ROW><id>13985085</id><snippet>GridSizer</snippet></ROW><ROW><id>13985085</id><snippet>BoxSizer</snippet></ROW><ROW><id>13985085</id><snippet>wx.EXPAND</snippet></ROW><ROW><id>13985085</id><snippet>wx.Notebook</snippet></ROW><ROW><id>13985085</id><snippet>2.8</snippet></ROW><ROW><id>13985085</id><snippet>sizer_31 = wx.BoxSizer(wx.VERTICAL) # page (panel) sizer for outer border
gs = wx.GridSizer(0,4,7,7) # content sizer

for i in self.Panel_Others.keys():
    gs.Add(self.Panel_Others[i],0,wx.EXPAND|wx.ALL,5) 
    # + wx.EXPAND: allow the content to fill the 'cells'
    #              (proportion is ignored here so it can be 0)
sizer_31.Add(gs,1,wx.EXPAND|wx.ALL,5) 
# + 1, wx.EXPAND: allow the grid to expand to the main sizer
#                 which in turn fits to the page
self.Panel3.SetSizer(sizer_31) # set the sizer to page, not the notebook
</snippet></ROW><ROW><id>13985085</id><snippet>import wx

class MyFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, title='wx.Notebook')
        # create a wx.Notebook
        book = wx.Notebook(self)
        # create a new page; wx.Notebook owns the page
        # therefore the notebook must be the parent window
        page = MyPage(parent=book)
        # add the page to the notebook:
        book.AddPage(page, 'Page 1')
        book.AddPage(MyPage(book),'Page 2')
        book.AddPage(MyPage(book),'Page 3')

class MyPage(wx.Panel):
    "a page for wx.Notebook"
    def __init__(self, parent):
        # NOTE: wxPython 2.9.4/winXP may create graphic 
        # artifacts when more than one page is added. This can
        # be avoided by creating the page with a size of (0,0).
        # the reason for this is: the page (here a panel) is
        # created with the default size and position (upper
        # left corner). Once the layout is applied, the page
        # is moved to the proper coordinates. However, the
        # wx.Notebook is not redrawn so it will leave a black
        # spot where the page was moved away from. Alternatively,
        # the frame or notebook can be Refresh()ed after the
        # frame is shown.
        wx.Panel.__init__(self, parent, size=(0,0))
        # create sizer to add a border
        pageSizer = wx.BoxSizer(wx.VERTICAL)
        # create a grid sizer for the content
        self.grid = wx.GridSizer(0, 4, 5, 5)
        # add the grid sizer to the page sizer:
        # to allow the grid to fill the entire page,
        # set proportion&gt;0 and add the wx.EXPAND flag.
        # the border of 10 is the spacing between the
        # page and the cells of the grid
        pageSizer.Add(self.grid, 1, wx.EXPAND|wx.ALL, 10)
        # set the main sizer:
        self.SetSizer(pageSizer)
        # add content to the grid
        self.GenerateContent()
        # DEMO: click any white space on the page to 
        # generate new content
        self.Bind(wx.EVT_LEFT_DOWN, self.GenerateContent)

    def GenerateContent(self, event=None):
        "dynamically create page content"
        # remove all items from the grid and destroy them
        # NOTE: if you don't actually create new controls here,
        # but use a list of controls created elsewhere (like in
        # in your code), do not delete the items! Use:
        # deleteWindows=False instead.
        self.grid.Clear(deleteWindows=True)
        # generate new grid content
        for i in range(10):
            # the contents are owned by the page,
            # therefore the page must be the parent window:
            # NOTE: size=(0,0) here is not required but
            # eliminates a briefly shown graphic artifact
            cell = wx.Panel(self, size=(0,0))
            cell.SetBackgroundColour(self.NewColor())
            # add the content (cells) to the grid:
            # specify the wx.EXPAND flag to fit the
            # content to the grid cell
            self.grid.Add(cell, flag=wx.EXPAND)
        # DEMO: hint text
        self.grid.Add(wx.StaticText(self, label=
            'Click empty cell to update content -&gt;'),
                      flag=wx.EXPAND)
        # recalculate the layout to move the new contents
        # of the grid sizer into place
        self.Layout()

    col = 0 # DEMO: coloring
    def NewColor(self):
        self.col = (self.col + 3) % 241
        return wx.Colour(0, self.col * 10 % 255, self.col % 255)

app = wx.App(False)
MyFrame().Show()
app.MainLoop()
</snippet></ROW><ROW><id>13985253</id><snippet>InitSpider</snippet></ROW><ROW><id>13985253</id><snippet>crawlspider</snippet></ROW><ROW><id>13985257</id><snippet># -*- coding: utf-8 -*-

from flask import Flask, send_from_directory


app = Flask(__name__)


@app.route('/open')
def open():
    """Open in browser"""
    return send_from_directory('/tmp/', 'hello.txt')


@app.route('/download')
def download():
    """Download"""
    return send_from_directory('/tmp/', 'hello.txt', as_attachment=True)


if __name__ == '__main__':
    app.run(debug=True)
</snippet></ROW><ROW><id>13985502</id><snippet>(?:(?&lt;=^)|(?&lt;=\s))(@[^\s]+)
</snippet></ROW><ROW><id>13985502</id><snippet>&gt;&gt;&gt; re.findall(r'(?:(?&lt;=^)|(?&lt;=\s))(@[^\s]+)', '@one bla bla bla @two @three@four #@five')
['@one', '@two', '@three@four']
</snippet></ROW><ROW><id>13985856</id><snippet>my_dict = [{2:1, 3:1, 5:2}, {3:4, 6:4, 2:3}, {2:5, 3:6}]

# Finds the common keys
common_keys = set.intersection(*map(set, my_dict))

# Makes a new dict with only those keys and sums the values into another dict
summed_dict = {key: sum(d[key] for d in my_dict) for key in common_keys}
</snippet></ROW><ROW><id>13985856</id><snippet>{k: sum(d[k] for d in my_dict) for k in reduce(set.intersection, map(set, my_dict))}
</snippet></ROW><ROW><id>13986115</id><snippet>df.pivot_table()</snippet></ROW><ROW><id>13986115</id><snippet>pivot = df.pivot_table(values='Usage', rows='Day', cols=['TOD', 'Weekend'])
</snippet></ROW><ROW><id>13986115</id><snippet>pd.rolling_mean()</snippet></ROW><ROW><id>13986115</id><snippet>pivot</snippet></ROW><ROW><id>13986115</id><snippet>center</snippet></ROW><ROW><id>13986115</id><snippet>pd.rolling_mean(pivot, 90, center=True, min_periods=1)
</snippet></ROW><ROW><id>13986179</id><snippet>def outer():
    a = [1]
    def inner():
        a[0] += 1
        print a[0]
</snippet></ROW><ROW><id>13986480</id><snippet>$.post("/javascriptdata",{v:s},function(data,status) {});</snippet></ROW><ROW><id>13986480</id><snippet>/javascriptdata</snippet></ROW><ROW><id>13986480</id><snippet>$.post('/save', ...</snippet></ROW><ROW><id>13986480</id><snippet>WSGIApplication</snippet></ROW><ROW><id>13986480</id><snippet>...("/javascriptdata",javascriptdata)...</snippet></ROW><ROW><id>13986768</id><snippet>C:\Program Files (x86)\ImageMagick-6.8.1-Q16</snippet></ROW><ROW><id>13986768</id><snippet>C:\Program Files (x86)\gs\gs9.06\bin</snippet></ROW><ROW><id>13986768</id><snippet>convert some.pdf some.jpg</snippet></ROW><ROW><id>13986768</id><snippet>from PythonMagick import Image
im = Image()
im.read(r"C:\Path\To\Some.pdf")
im.write("some.jpg")
</snippet></ROW><ROW><id>13986768</id><snippet>import os
from pyPdf import PdfFileReader, PdfFileWriter
from tempfile import NamedTemporaryFile
from PythonMagick import Image

reader = PdfFileReader(open("some.pdf", "rb"))
for page_num in xrange(reader.getNumPages()):
    writer = PdfFileWriter()
    writer.addPage(reader.getPage(page_num))
    temp = NamedTemporaryFile(prefix=str(page_num), suffix=".pdf", delete=False)
    writer.write(temp)
    temp.close()

    im = Image()
    im.density("300") # DPI, for better quality
    im.read(temp.name)
    im.write("some_%d.jpg" % (page_num))

    os.remove(temp.name)
</snippet></ROW><ROW><id>13986939</id><snippet>range</snippet></ROW><ROW><id>13986939</id><snippet>def gen(base):
    for item in base:
        if item%3 == 0:
           break
        yield i

for i in gen(range(1, 100)):
    print "Pass," i
</snippet></ROW><ROW><id>13988212</id><snippet>os.path.join(settings.MEDIA_ROOT, user_file.file.name)
</snippet></ROW><ROW><id>13988355</id><snippet>import itertools

num = [1, 2, 3, 4, 5,6,7,8,9,10]
combinations = itertools.combinations(num, 3)
matching = [c for c in combinations if reduce(lambda x, y: x * y, c, 1) == 60]

print(matching)
</snippet></ROW><ROW><id>13988355</id><snippet>matching = [c for c in combinations if reduce(lambda x, y: x * y, c, 1) == 60]</snippet></ROW><ROW><id>13988355</id><snippet>matching = []
for c in combinations:
  if reduce(lambda x, y: x * y, c, 1) == 60:
    matching.append(c)
</snippet></ROW><ROW><id>13988355</id><snippet>reduce</snippet></ROW><ROW><id>13988483</id><snippet>readlines()</snippet></ROW><ROW><id>13988483</id><snippet>f.readlines()</snippet></ROW><ROW><id>13988483</id><snippet>sizehint</snippet></ROW><ROW><id>13988483</id><snippet>filename = 'text_file_example.txt'
myfile = open(filename,'r')
file_lines = myfile.readlines()
for line in file_lines[:5]: 
    print(line)
myfile.close()
</snippet></ROW><ROW><id>13988652</id><snippet>from PyQt4 import QtGui
from PyQt4 import QtCore

class MyHighlighter(QtGui.QTextEdit):
    def __init__(self, parent=None):
        super(MyHighlighter, self).__init__(parent)
        # Setup the text editor
        text = """In this text I want to highlight this word and only this word.\n""" +\
        """Any other word shouldn't be highlighted"""
        self.setText(text)
        cursor = self.textCursor()
        # Setup the desired format for matches
        format = QtGui.QTextCharFormat()
        format.setBackground(QtGui.QBrush(QtGui.QColor("red")))
        # Setup the regex engine
        pattern = "word"
        regex = QtCore.QRegExp(pattern)
        # Process the displayed document
        pos = 0
        index = regex.indexIn(self.toPlainText(), pos)
        while (index != -1):
            # Select the matched text and apply the desired format
            cursor.setPosition(index)
            cursor.movePosition(QtGui.QTextCursor.EndOfWord, 1)
            cursor.mergeCharFormat(format)
            # Move to the next match
            pos = index + regex.matchedLength()
            index = regex.indexIn(self.toPlainText(), pos)

if __name__ == "__main__":
    import sys
    a = QtGui.QApplication(sys.argv)
    t = MyHighlighter()
    t.show()
    sys.exit(a.exec_())
</snippet></ROW><ROW><id>13988901</id><snippet>from datetime import datetime
import pytz
import calendar 
calendar.timegm(pytz.timezone('America/Los_Angeles').localize(datetime.strptime('2012-11-20 00:00:00', '%Y-%m-%d %H:%M:%S')).utctimetuple())
</snippet></ROW><ROW><id>13988901</id><snippet>1353398400
</snippet></ROW><ROW><id>13989147</id><snippet>compress</snippet></ROW><ROW><id>13989147</id><snippet>.Z</snippet></ROW><ROW><id>13989147</id><snippet>gzip</snippet></ROW><ROW><id>13989147</id><snippet>gunzip</snippet></ROW><ROW><id>13989147</id><snippet>zcat</snippet></ROW><ROW><id>13989147</id><snippet>gzip</snippet></ROW><ROW><id>13989147</id><snippet>from subprocess import Popen, PIPE

filename = "3B42.20070101.03.7A.HDF.Z"
f = Popen(["zcat", filename], stdout=PIPE).stdout
</snippet></ROW><ROW><id>13989147</id><snippet>f</snippet></ROW><ROW><id>13989292</id><snippet>mongod</snippet></ROW><ROW><id>13989292</id><snippet>/data/db/mongodb</snippet></ROW><ROW><id>13989292</id><snippet>mongod</snippet></ROW><ROW><id>13989292</id><snippet>mongodump</snippet></ROW><ROW><id>13989292</id><snippet>mongorestore</snippet></ROW><ROW><id>13989292</id><snippet>mongoexport</snippet></ROW><ROW><id>13989292</id><snippet>mongoimport</snippet></ROW><ROW><id>13989411</id><snippet>awk</snippet></ROW><ROW><id>13989411</id><snippet>awk &lt; input_file '/^&gt;/ {print ""; print; next} {printf "%s", $0} END {print ""}'
</snippet></ROW><ROW><id>13989411</id><snippet>awk</snippet></ROW><ROW><id>13989411</id><snippet>awk &lt; input_file '/^&gt;/ { if (flag) print ""; print; flag=0; next }
    { printf "%s", $0; flag=1 } END { if (flag) print "" }'
</snippet></ROW><ROW><id>13989411</id><snippet>awk &lt; input_file &gt; output_file '/^&gt;/ { .... }'
</snippet></ROW><ROW><id>13989690</id><snippet>def</snippet></ROW><ROW><id>13989690</id><snippet>__init__</snippet></ROW><ROW><id>13989690</id><snippet>def__init__(self, N):
</snippet></ROW><ROW><id>13989690</id><snippet>def __init__(self, N):
</snippet></ROW><ROW><id>13989690</id><snippet>drawBoard(N)</snippet></ROW><ROW><id>13989690</id><snippet>self</snippet></ROW><ROW><id>13989690</id><snippet>N</snippet></ROW><ROW><id>13989816</id><snippet>limerick_line.append(input('enter line: '))</snippet></ROW><ROW><id>13989816</id><snippet>print</snippet></ROW><ROW><id>13989816</id><snippet>print(limerick_line)</snippet></ROW><ROW><id>13989816</id><snippet>for line in limerick_line:
    print(line)
</snippet></ROW><ROW><id>13989816</id><snippet>limerick_line = []
for i in range(5):
    limerick_line.append( input("Type in a limerick line. ") )
for line in limerick_line:
    print(line)
</snippet></ROW><ROW><id>13989884</id><snippet>'bmF2ZWVu'</snippet></ROW><ROW><id>13989884</id><snippet>'bmF2ZWVu   '</snippet></ROW><ROW><id>13989884</id><snippet>if password.strip()==en_pass.strip()</snippet></ROW><ROW><id>13989932</id><snippet>subst = {0: 'x', 1: 'y'}
return [subst.get(v, v) if v else v for v in search.Search(s, s.run()]
</snippet></ROW><ROW><id>13989932</id><snippet>return</snippet></ROW><ROW><id>13989932</id><snippet>if v else v</snippet></ROW><ROW><id>13989932</id><snippet>from collections import Hashable

subst = {0: 'x', 1: 'y'}
hashable = lambda v: isinstance(v, Hashable)
return [subst.get(v, v) if hashable(v) else v for v in search.Search(s, s.run()]
</snippet></ROW><ROW><id>13989932</id><snippet>subst</snippet></ROW><ROW><id>13990156</id><snippet>try:
  return dtypes[dataType]
except KeyError:
  raise ...
</snippet></ROW><ROW><id>13990156</id><snippet>def GDAL_data_type(dataType):
    dtypes = {
        "Unknown": 0,
        "Byte": 1,
        "UInt16": 2,
        "Int16": 3,
        "UInt32": 4,
        "Int32": 5,
        "Float32": 6,
        "Float64": 7,
        "CInt16": 8,
        "CInt32": 9,
        "CFloat32": 10,
        "CFloat64": 11
        }
    try:
        return dtypes[dataType]
    except KeyError:
        raise ...
</snippet></ROW><ROW><id>13990280</id><snippet>Questions</snippet></ROW><ROW><id>13990280</id><snippet>required = db.BooleanProperty(default=False, indexed=False)</snippet></ROW><ROW><id>13990280</id><snippet>exception PropertyError()
The referenced model property does not exist on the data object.</snippet></ROW><ROW><id>13990285</id><snippet>   session = requests.session() 
   def set_SC(cookie_val):
            for k,v in cookie_dict.iteritems():
                if not isinstance(v, str):
                    cookie_dict[k] =  str(v) 
            requests.utils.add_dict_to_cookiejar(session.cookies,
                                                 cookie_val)

    def get_SC():
            return requests.utils.dict_from_cookiejar(session.cookies)

    In another function:
    setSC(response.content)
</snippet></ROW><ROW><id>13990546</id><snippet>cam.read()</snippet></ROW><ROW><id>13990546</id><snippet>VideoCapture</snippet></ROW><ROW><id>13990546</id><snippet>(return value, image)</snippet></ROW><ROW><id>13990546</id><snippet>image</snippet></ROW><ROW><id>13990648</id><snippet>In [27]: x = np.arange(16).reshape((4,2,2))

In [28]: x.reshape(2,2,2,2).swapaxes(1,2).reshape(4,-1)
Out[28]: 
array([[ 0,  1,  4,  5],
       [ 2,  3,  6,  7],
       [ 8,  9, 12, 13],
       [10, 11, 14, 15]])
</snippet></ROW><ROW><id>13991504</id><snippet>datasets.load_digits()</snippet></ROW><ROW><id>13991504</id><snippet>Bunch</snippet></ROW><ROW><id>13991566</id><snippet>python-joblib</snippet></ROW><ROW><id>13991566</id><snippet>sudo dpkg -l | grep joblib
</snippet></ROW><ROW><id>13991566</id><snippet>apt-cache search joblib
</snippet></ROW><ROW><id>13991566</id><snippet>python-joblib</snippet></ROW><ROW><id>13991566</id><snippet>sudo apt-get install python-joblib
</snippet></ROW><ROW><id>13991566</id><snippet>import joblib</snippet></ROW><ROW><id>13991566</id><snippet>/usr/lib/python2.7</snippet></ROW><ROW><id>13991566</id><snippet>easy_install</snippet></ROW><ROW><id>13991566</id><snippet>pip</snippet></ROW><ROW><id>13991566</id><snippet>pip install -U scikit-learn</snippet></ROW><ROW><id>13991566</id><snippet>easy_install -U scikit-learn</snippet></ROW><ROW><id>13991983</id><snippet>\u0308</snippet></ROW><ROW><id>13991983</id><snippet>import unicodedata

unicodedata.normalize('NFC', projectDict['ProjectName'].decode('utf-8')).encode('mac-roman')
</snippet></ROW><ROW><id>13991983</id><snippet>ä</snippet></ROW><ROW><id>13991983</id><snippet>a</snippet></ROW><ROW><id>13991983</id><snippet>&gt;&gt;&gt; unicodedata.normalize('NFC', u'a\u0308').encode('mac-roman')
'\x8a'
</snippet></ROW><ROW><id>13991983</id><snippet>windows-1252</snippet></ROW><ROW><id>13992134</id><snippet>import locale
import datetime
...
parsedDate = datetime.strptime(your_string, locale.D_FMT)
print datetime.strftime(parsedDate, "%Y-%M-%d")
</snippet></ROW><ROW><id>13992297</id><snippet>from reportlab.pdfbase import pdfdoc
pdfdoc.PDFCatalog.OpenAction = '&lt;&lt;/S/JavaScript/JS(this.print\({bUI:true,bSilent:false,bShrinkToFit:true}\);)&gt;&gt;'
</snippet></ROW><ROW><id>13992809</id><snippet>f = open('tariff.sql', 'w')
st_l.copy_to(f, 'tarf', sep=',')

f.close()

f = open('tariff.sql', 'r')
st.copy_from(f, 'tariff', sep=',')
</snippet></ROW><ROW><id>13993245</id><snippet>self</snippet></ROW><ROW><id>13993245</id><snippet>class C(B):
    def std_dev(self)
        return self.error_components() * something + something_else_again

    def error_components(self):
        return something_entirely_different
</snippet></ROW><ROW><id>13993312</id><snippet>with open("test.txt") as in_fp, open("test2.txt", "w") as out_fp:
    for line in in_fp:
        ls = line.split()
        if ls and (ls[0].startswith("@") or ls[0] == "rt"):
            line = line.replace(ls[0], "", 1)
        out_fp.write(line)
</snippet></ROW><ROW><id>13993312</id><snippet>localhost-2:coding $ cat test2.txt 
 : objective
tr350rt : objective
rtrt : objective
 : objective
 : objective
 : objective
 : objective
#15 : objective
</snippet></ROW><ROW><id>13993312</id><snippet>with open("test.txt") as fp:
    lines = fp.readlines()

with open("test.txt", "w") as out_fp:
    for line in lines:
        ls = line.split()
        if ls and (ls[0].startswith("@") or ls[0] == "rt"):
            line = line.replace(ls[0], "", 1)
        out_fp.write(line)
</snippet></ROW><ROW><id>13993313</id><snippet>cp -R /usr/lib/python2.7/dist-packages/M2Crypto /home/richard/hello-project/venv/lib/python2.7/site-packages/
cp -R /usr/lib/python2.7/dist-packages/OpenSSL /home/richard/hello-project/venv/lib/python2.7/site-packages/
</snippet></ROW><ROW><id>13993400</id><snippet>csv</snippet></ROW><ROW><id>13993400</id><snippet>import csv

with open('sample.txt','rb') as tsvin, open('new.csv', 'wb') as csvout:
    tsvin = csv.reader(tsvin, delimiter='\t')
    csvout = csv.writer(csvout)

    for row in tsvin:
        count = int(row[4])
        if count &gt; 0:
            csvout.writerows([row[2:4] for _ in range(count)])
</snippet></ROW><ROW><id>13993480</id><snippet>pandas</snippet></ROW><ROW><id>13993480</id><snippet>matplotlib</snippet></ROW><ROW><id>13993480</id><snippet>In [4]: import matplotlib.units as muints

In [5]: muints.registry
Out[5]: 
  {datetime.date: &lt;matplotlib.dates.DateConverter instance at 0x2ab8908&gt;,
   datetime.datetime: &lt;matplotlib.dates.DateConverter instance at 0x2ab8ab8&gt;}


In [6]: import pandas

In [7]: muints.registry
Out[7]: 
{pandas.tseries.period.Period: &lt;pandas.tseries.converter.PeriodConverter instance at 0x2627e60&gt;,
 pandas.tslib.Timestamp: &lt;pandas.tseries.converter.DatetimeConverter instance at 0x264ea28&gt;,
 datetime.date: &lt;pandas.tseries.converter.DatetimeConverter instance at 0x2532fc8&gt;,
 datetime.datetime: &lt;pandas.tseries.converter.DatetimeConverter instance at 0x2627ab8&gt;,
 datetime.time: &lt;pandas.tseries.converter.TimeConverter instance at 0x2532f38&gt;}
</snippet></ROW><ROW><id>13993480</id><snippet>axis</snippet></ROW><ROW><id>13993480</id><snippet>datetime.*</snippet></ROW><ROW><id>13993480</id><snippet>dict</snippet></ROW><ROW><id>13993818</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>13993818</id><snippet>myproject.settings_production</snippet></ROW><ROW><id>13993818</id><snippet>manage.py</snippet></ROW><ROW><id>13993850</id><snippet>def foo(lines):
    output = []
    for line in lines:
        words = line.split()
        if len(words) &lt; 2:
            word = words[0]
        else:
            word = words[1]
        if word == '&lt;/S&gt;+ESTag':
            yield ' '.join(output)
            output = []
        elif word != '&lt;S&gt;+BSTag':
            output.append(words[1])

for sentence in foo(sys.stdin):
    print sentence
</snippet></ROW><ROW><id>13993850</id><snippet>[</snippet></ROW><ROW><id>13993850</id><snippet>]</snippet></ROW><ROW><id>13993850</id><snippet>''</snippet></ROW><ROW><id>13993941</id><snippet>n</snippet></ROW><ROW><id>13993941</id><snippet>n</snippet></ROW><ROW><id>13993941</id><snippet>import requests

def binary_search_urls(urls, lo=0, hi=None):
    if hi is None:
        hi = len(urls)
    while lo &lt; hi:
        mid = (lo+hi)//2
        status = requests.head(urls[mid]).status_code
        if status != 302:
            lo = mid+1
        else: 
            hi = mid
    return lo - 1
</snippet></ROW><ROW><id>13993941</id><snippet>-1</snippet></ROW><ROW><id>13993979</id><snippet>xml.etree</snippet></ROW><ROW><id>13993979</id><snippet>standalone</snippet></ROW><ROW><id>13993979</id><snippet>lxml</snippet></ROW><ROW><id>13993979</id><snippet>tostring()</snippet></ROW><ROW><id>13993979</id><snippet>standalone</snippet></ROW><ROW><id>13993979</id><snippet>from lxml import etree

etree.tostring(doc, pretty_print=True, standalone=False)
</snippet></ROW><ROW><id>13993979</id><snippet>.write()</snippet></ROW><ROW><id>13993979</id><snippet>doc.write(outputfile, pretty_print=True, standalone=False)
</snippet></ROW><ROW><id>13994023</id><snippet>from matplotlib import pylab
pylab.plot(range(10), range(10))
pylab.show()
</snippet></ROW><ROW><id>13994023</id><snippet>pylab.show()</snippet></ROW><ROW><id>13994023</id><snippet>pylab.show</snippet></ROW><ROW><id>13994023</id><snippet>pylab.show(block=True)
</snippet></ROW><ROW><id>13994023</id><snippet>pylab.show</snippet></ROW><ROW><id>13994023</id><snippet>import matplotlib
print matplotlib.is_interactive()
</snippet></ROW><ROW><id>13994023</id><snippet>interactive: True</snippet></ROW><ROW><id>13994023</id><snippet>print matplotlib.matplotlib_fname()</snippet></ROW><ROW><id>13994023</id><snippet>interactive</snippet></ROW><ROW><id>13994023</id><snippet>import matplotlib
from matplotlib import pylab

if matplotlib.is_interactive():
    pylab.ioff()
pylab.plot(range(10), range(10))
pylab.show()
</snippet></ROW><ROW><id>13994023</id><snippet>matplotlib</snippet></ROW><ROW><id>13994023</id><snippet>show</snippet></ROW><ROW><id>13994023</id><snippet>pylab.pause</snippet></ROW><ROW><id>13994023</id><snippet>from matplotlib import pylab
pylab.ion()  # Force interactive    
pylab.plot(range(10), range(10))
pylab.show() # This does not block
pylab.pause(2**31-1)
</snippet></ROW><ROW><id>13994070</id><snippet>T</snippet></ROW><ROW><id>13994070</id><snippet>&gt;&gt;&gt; result = es.post(root_url, data={
    "datetime": "2012-12-20T12:00:00",
    "name": "freddy",
    "text": "hello world",
})
&gt;&gt;&gt; result = es.post(root_url, data={
    "datetime": "2012-11-20T12:00:00",
    "name": "julie",
    "text": "welcome to the wonderful world of cooking",
})
&gt;&gt;&gt; result = es.get(root_url+"_search", data={
    "query": {
        "range": {  # expect this to return the one result on 2012-12-20
            "datetime": {
                "gte":"2012-12-01", 
                "lte":"2012-12-31",
            }
        }
    }
})
</snippet></ROW><ROW><id>13994078</id><snippet>glob</snippet></ROW><ROW><id>13994078</id><snippet>fileinput</snippet></ROW><ROW><id>13994078</id><snippet>from glob import glob
import fileinput

filenames = glob('halo_track*.dat')
inputs = (line.split(None, 1) for line in fileinput.input(filenames))
right_stuff = [col[1] for col in inputs if col[0] == '1.0015']
</snippet></ROW><ROW><id>13994123</id><snippet>get_level_values</snippet></ROW><ROW><id>13994123</id><snippet>df[df.index.get_level_values('a').isin([5, 7, 10, 13])]
</snippet></ROW><ROW><id>13994123</id><snippet>df.index
</snippet></ROW><ROW><id>13994611</id><snippet>tz.localize(d)</snippet></ROW><ROW><id>13994611</id><snippet>&gt;&gt;&gt; loc_dt = eastern.localize(datetime(2002, 10, 27, 6, 0, 0))
&gt;&gt;&gt; print(loc_dt.strftime(fmt))
2002-10-27 06:00:00 EST-0500
</snippet></ROW><ROW><id>13994611</id><snippet>.dst()</snippet></ROW><ROW><id>13994611</id><snippet>is_dst</snippet></ROW><ROW><id>13994611</id><snippet>.localize()</snippet></ROW><ROW><id>13994611</id><snippet>dt = tz.localize(naive, is_dst=True)
</snippet></ROW><ROW><id>13994611</id><snippet>is_dst=None</snippet></ROW><ROW><id>13994611</id><snippet>AmbiguousTimeError</snippet></ROW><ROW><id>13994611</id><snippet>is_dst</snippet></ROW><ROW><id>13994611</id><snippet>.replace(tzinfo=None)</snippet></ROW><ROW><id>13994611</id><snippet>naivedt = awaredt.replace(tzinfo=None)
</snippet></ROW><ROW><id>13994731</id><snippet>readable, writeable, exceptional = 
      select.select([socket1, socket2], 
                    None, [socket1, socket2])
if socket1 in readable:
   do_copy(socket1, socket2)
if socket2 in readable:
   do_copy(socket2, socket1)
</snippet></ROW><ROW><id>13994939</id><snippet>source, target</snippet></ROW><ROW><id>13994939</id><snippet>import networkx as nx
import multiprocessing as mp
import random
import sys
import itertools as IT
import logging
logger = mp.log_to_stderr(logging.DEBUG)


def worker(inqueue, output):
    result = []
    count = 0
    for pair in iter(inqueue.get, sentinel):
        source, target = pair
        for path in nx.all_simple_paths(G, source = source, target = target,
                                        cutoff = None):
            result.append(path)
            count += 1
            if count % 10 == 0:
                logger.info('{c}'.format(c = count))
    output.put(result)

def test_workers():
    result = []
    inqueue = mp.Queue()
    for source, target in IT.product(sources, targets):
        inqueue.put((source, target))
    procs = [mp.Process(target = worker, args = (inqueue, output))
             for i in range(mp.cpu_count())]
    for proc in procs:
        proc.daemon = True
        proc.start()
    for proc in procs:    
        inqueue.put(sentinel)
    for proc in procs:
        result.extend(output.get())
    for proc in procs:
        proc.join()
    return result

def test_single_worker():
    result = []
    count = 0
    for source, target in IT.product(sources, targets):
        for path in nx.all_simple_paths(G, source = source, target = target,
                                        cutoff = None):
            result.append(path)
            count += 1
            if count % 10 == 0:
                logger.info('{c}'.format(c = count))

    return result

sentinel = None

seed = 1
m = 1
N = 1340//m
G = nx.gnm_random_graph(N, int(1.7*N), seed)
random.seed(seed)
sources = [random.randrange(N) for i in range(340//m)]
targets = [random.randrange(N) for i in range(1000//m)]
output = mp.Queue()

if __name__ == '__main__':
    test_workers()
    # test_single_worker()
    # assert set(map(tuple, test_workers())) == set(map(tuple, test_single_worker()))
</snippet></ROW><ROW><id>13994939</id><snippet>test_workers</snippet></ROW><ROW><id>13994939</id><snippet>test_single_worker</snippet></ROW><ROW><id>13994939</id><snippet>test.py</snippet></ROW><ROW><id>13994939</id><snippet>% python -mtimeit -s'import test as t' 't.test_workers()'
10 loops, best of 3: 6.71 sec per loop

% python -mtimeit -s'import test as t' 't.test_single_worker()'
10 loops, best of 3: 12.2 sec per loop
</snippet></ROW><ROW><id>13994939</id><snippet>pool.apply_async</snippet></ROW><ROW><id>13994939</id><snippet>output</snippet></ROW><ROW><id>13994939</id><snippet>output</snippet></ROW><ROW><id>13994970</id><snippet>result</snippet></ROW><ROW><id>13994970</id><snippet>result = 1. / k</snippet></ROW><ROW><id>13995423</id><snippet>plone.app.transmogrifier</snippet></ROW><ROW><id>13995423</id><snippet>plone.app.transmogrifier.versioning</snippet></ROW><ROW><id>13995423</id><snippet>[transmogrifier]
pipeline =
    schemasource
    disable_versioning
    constructor
    enable_versioning
    schemaupdater

[disable_versioning]
blueprint = plone.app.transmogrifier.versioning.disable

[constructor]
blueprint = collective.transmogrifier.sections.constructor

[enable_versioning]
blueprint = plone.app.transmogrifier.versioning.enable
</snippet></ROW><ROW><id>13995442</id><snippet>date = ' '.join([unicode(t) for t in parent.stripped_strings])
</snippet></ROW><ROW><id>13995442</id><snippet>Dec 31 Mon</snippet></ROW><ROW><id>13995442</id><snippet>datetime.date</snippet></ROW><ROW><id>13995442</id><snippet>dateutil</snippet></ROW><ROW><id>13995535</id><snippet>naval_fate.py:  --speed=&lt;kn&gt;  Speed in knots [default: 10].
options_example.py-  --exclude=PATTERNS   exclude files or directories which match these comma
options_example.py:                       separated patterns [default: .svn,CVS,.bzr,.hg,.git]
options_example.py-  -f NAME --file=NAME  when parsing directories, only check filenames matching
options_example.py:                       these comma separated patterns [default: *.py]
</snippet></ROW><ROW><id>13995535</id><snippet>-l LANG --lang LANG  Specify language code [default: en].
-c CONFIG            User alternate config file [default: ../scrappy.conf]
</snippet></ROW><ROW><id>13995535</id><snippet>localhost-2:coding $ python doc.py --auto a b c
{'--auto': True,
 '--lang': 'en',
 '--scan-individual': False,
 '--test': False,
 '--verbose': False,
 '-c': '../scrappy.conf',
 '&lt;path&gt;': ['a', 'b', 'c']}
</snippet></ROW><ROW><id>13995535</id><snippet>localhost-2:coding $ ./scrappy.py first_path_parameter second/path/parameter --scan-individual
{'--auto': False,
 '--cfg': '../scrappy.conf',
 '--lang': 'en',
 '--scan-individual': True,
 '--test': False,
 '--verbose': False,
 '&lt;path&gt;': ['first_path_parameter', 'second/path/parameter']}
</snippet></ROW><ROW><id>13995639</id><snippet>spritecollide</snippet></ROW><ROW><id>13995639</id><snippet>Group</snippet></ROW><ROW><id>13995639</id><snippet>def hit(self, group):
    if pygame.sprite.spritecollide(self, group, False):
        self.die()
</snippet></ROW><ROW><id>13995639</id><snippet>self</snippet></ROW><ROW><id>13995639</id><snippet>spritecollide()</snippet></ROW><ROW><id>13995639</id><snippet>def hit(self, group):
    collided = pygame.sprite.spritecollide(self, group, False)
    for item in collided:
        group.remove(item)
    if collided:
        self.die()
</snippet></ROW><ROW><id>13995639</id><snippet>dokill</snippet></ROW><ROW><id>13995639</id><snippet>def hit(self, group):
    if pygame.sprite.spritecollide(self, group, True):
        self.die()
</snippet></ROW><ROW><id>13995639</id><snippet>spritecollideany()</snippet></ROW><ROW><id>13995639</id><snippet>def hit(self, group):
    if pygame.sprite.spritecollideany(self, group):
        self.die()
</snippet></ROW><ROW><id>13995791</id><snippet>clicked</snippet></ROW><ROW><id>13995791</id><snippet>QPushButton</snippet></ROW><ROW><id>13995791</id><snippet>QTextEdit</snippet></ROW><ROW><id>13995791</id><snippet>QComboxBox</snippet></ROW><ROW><id>13995791</id><snippet>    self.pushButton2.clicked.connect(self.on_pushButton2_clicked)

def on_pushButton2_clicked(self):
    text1 = self.comboBox_1.currentText()
    text2 = self.comboBox_2.currentText()
    self.text2.append("{0},{1}".format(text1, text2))
</snippet></ROW><ROW><id>13995910</id><snippet>redirect</snippet></ROW><ROW><id>13995910</id><snippet>get_absolute_url()</snippet></ROW><ROW><id>13996549</id><snippet>class Fruit:
    Apple = 0
    Banana = 0
    Grape = 0

    def __repr__(self):
         return "You have {self.Apple} apples, {self.Banana} bananas, and {self.Grape} grapes".format(**locals())

    def update(self):
       while 1:
         choice = raw_input('Please pick an option:\n1) Update number of food I have\n2) Clear all\n&gt;&gt;')
         if (int(choice) == 1):
            self.Add()
         elif (int(choice) == 2):
            self.Clear()
         else:
             print "Input not valid"

    def Add(self):
       self.Apple += int(raw_input('How many apples do you want to add?\n&gt;&gt;'))
       self.Banana += int(raw_input('How many bananas do you want to add?\n&gt;&gt;'))
       self.Grape += int(raw_input('How many grapes do you want to add?\n&gt;&gt;'))
       print self

    def Clear(self):
       self.Apple = 0
       self.Banana = 0
       self.Grape = 0
       print self

if __name__ == "__main__":
    fruit = Fruit()
    fruit.update()         
</snippet></ROW><ROW><id>13996549</id><snippet>try</snippet></ROW><ROW><id>13996549</id><snippet>except</snippet></ROW><ROW><id>13996549</id><snippet>break</snippet></ROW><ROW><id>13996645</id><snippet>from hashlib import sha1

def odin1(mac_addr):
    """SHA1 hexdigest of hex representaiton of MAC address"""
    to_hash ''.join([i.decode('hex') for i in mac_addr.split(':')])
    return sha1(to_hash).hexdigest()

&gt;&gt;&gt; odin1('1a:2b:3c:4d:5e:6f')
'82a53f1222f8781a5063a773231d4a7ee41bdd6f'
</snippet></ROW><ROW><id>13996645</id><snippet>// NOTE: iOS returns MAC Address NOT a string, but a 6-byte array. 

// A human readable MAC Address may be represented as the following:

@"1a:2b:3c:4d:5e:6f";
@"1A2B3C4D5E6F";
</snippet></ROW><ROW><id>13996645</id><snippet>&gt;&gt;&gt; '1A'.decode('hex') == '1a'.decode('hex')
True
</snippet></ROW><ROW><id>13996645</id><snippet>&gt;&gt;&gt; mac = "1a:2b:3c:4d:5e:6f".split(':')
&gt;&gt;&gt; hex_mac = [m.decode('hex') for m in mac]
&gt;&gt;&gt; hex_mac
['\x1a', '+', '&lt;', 'M', '^', 'o']
</snippet></ROW><ROW><id>13996645</id><snippet>&gt;&gt;&gt; mac = '1A2B3C4D5E6F'
&gt;&gt;&gt; hex_chunks = lambda s: [s[i: i+2] for i in range(0, len(s), 2)]
&gt;&gt;&gt; [m.decode('hex') for m in hex_chunks(mac)]
['\x1a', '+', '&lt;', 'M', '^', 'o']
</snippet></ROW><ROW><id>13996645</id><snippet>&gt;&gt;&gt; sha1(''.join(['\x1a', '+', '&lt;', 'M', '^', 'o'])).hexdigest()
</snippet></ROW><ROW><id>13996710</id><snippet>foo = 1</snippet></ROW><ROW><id>13996710</id><snippet>1</snippet></ROW><ROW><id>13996710</id><snippet>locals()</snippet></ROW><ROW><id>13996710</id><snippet>Python 2.7.1 (r271:86832, Jun 16 2011, 16:59:05) 
[GCC 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.15.00)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; locals()
{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__name__': '__main__', '__doc__': None, '__package__': None}
&gt;&gt;&gt; a = 1
&gt;&gt;&gt; locals()
{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__name__': '__main__', '__doc__': None, 'a': 1, '__package__': None}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13996710</id><snippet>locals()</snippet></ROW><ROW><id>13996710</id><snippet>&gt;&gt;&gt; class MyClass(object): pass
... 
&gt;&gt;&gt; myobjects = {}
&gt;&gt;&gt; myobjects['key-name'] = MyClass()
&gt;&gt;&gt; myvar = myobjects['key-name']  # some time later...
&gt;&gt;&gt; myvar # what is myvar?
&lt;__main__.MyClass object at 0x10f7c1c50&gt;
&gt;&gt;&gt; myobjects['key-name'] # myobjects['key-name'] is the same object
&lt;__main__.MyClass object at 0x10f7c1c50&gt;
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>13996715</id><snippet>BaseSpider</snippet></ROW><ROW><id>13996715</id><snippet>start_requests</snippet></ROW><ROW><id>13996804</id><snippet>from django.core.validators import validate_email
from django import forms

...
if request.method == "POST":
    try:
        validate_email(request.POST.get("email", ""))
    except forms.ValidationError:
        ...
</snippet></ROW><ROW><id>13996804</id><snippet>&lt;input type="text" name="email" /&gt;</snippet></ROW><ROW><id>13996947</id><snippet>writeback</snippet></ROW><ROW><id>13996947</id><snippet>shelve.open</snippet></ROW><ROW><id>13996947</id><snippet>writeback</snippet></ROW><ROW><id>13996947</id><snippet>True</snippet></ROW><ROW><id>13996947</id><snippet>sync()</snippet></ROW><ROW><id>13996947</id><snippet>close()</snippet></ROW><ROW><id>13996947</id><snippet>d = shelve.open(filename) # open -- file may get suffix added by low-level
                          # library
# as d was opened WITHOUT writeback=True, beware:
d['xx'] = range(4)  # this works as expected, but...
d['xx'].append(5)   # *this doesn't!* -- d['xx'] is STILL range(4)!

# having opened d without writeback=True, you need to code carefully:
temp = d['xx']      # extracts the copy
temp.append(5)      # mutates the copy
d['xx'] = temp      # stores the copy right back, to persist it

# or, d=shelve.open(filename,writeback=True) would let you just code
# d['xx'].append(5) and have it work as expected, BUT it would also
# consume more memory and make the d.close() operation slower.
d.close()       # close it
</snippet></ROW><ROW><id>13997043</id><snippet>original = open(filename)
newfile = []
for line in original:
    if line.split('~!')[0] == ex[4]:
        line += "~!" + mask[0]
        line = line.rstrip() + "\n"
    newfile.append(line)
original.close()
amended.open(filename, "w")
amended.writeLines(newfile)
amended.close()
</snippet></ROW><ROW><id>13997043</id><snippet>amended.write("".join(newfile))
</snippet></ROW><ROW><id>13997046</id><snippet>Ask user for directory
If all files in that directory are .html files:
    Do the search-and-replace stuff on the files
Else:
    Warn and repeat from start
</snippet></ROW><ROW><id>13997046</id><snippet>while True:
    dir = raw_input('Copy and Paste Course Directory Here: ')
    files = os.listdir(dir)
    if all(file.endswith('.html') for file in files):
        # do the search and replace stuff
        break
    else:
        print 'Sorry, there are non-HTML files here. Try again.'
</snippet></ROW><ROW><id>13997046</id><snippet>while True</snippet></ROW><ROW><id>13997046</id><snippet>break</snippet></ROW><ROW><id>13997046</id><snippet>all</snippet></ROW><ROW><id>13997046</id><snippet>os.walk</snippet></ROW><ROW><id>13997046</id><snippet>'.html'</snippet></ROW><ROW><id>13997335</id><snippet>dtypes</snippet></ROW><ROW><id>13997335</id><snippet>numpy</snippet></ROW><ROW><id>13998052</id><snippet>multiprocessing</snippet></ROW><ROW><id>13998052</id><snippet>multiprocessing</snippet></ROW><ROW><id>13998097</id><snippet>def guess(text):
    for t in text.split(','):
        for typ in (int, float, str):
            try:
                yield typ(t)
                break
            except ValueError as e:
                pass

d = '3, 4.32, hi'

print list(guess(d))
# [3, 4.32, ' hi']
# [&lt;type 'int'&gt;, &lt;type 'float'&gt;, &lt;type 'str'&gt;]
</snippet></ROW><ROW><id>13998097</id><snippet>ast</snippet></ROW><ROW><id>13998097</id><snippet>def guess2(text):
    from ast import literal_eval
    tokens = (t.strip() for t in text.split(','))
    for token in tokens:
        try:
            token_value = literal_eval(token)
            token_type = type(token_value)
            yield token_value, token_type
        except ValueError as e:
            yield token, type(token)
</snippet></ROW><ROW><id>13998189</id><snippet>pip</snippet></ROW><ROW><id>13998189</id><snippet>brew search sdl</snippet></ROW><ROW><id>13998189</id><snippet>brew install sdl sdl_foo sdl_bar etc.</snippet></ROW><ROW><id>13998189</id><snippet>pip install</snippet></ROW><ROW><id>13998189</id><snippet>sudo pip install foo</snippet></ROW><ROW><id>13998189</id><snippet>pip install foo</snippet></ROW><ROW><id>13998189</id><snippet>sudo chmod -R a+w /Library/Frameworks/Python.framework/Versions/7.3/lib/python2.7/site-packages/</snippet></ROW><ROW><id>13998189</id><snippet>pip install foo</snippet></ROW><ROW><id>13998273</id><snippet>from django.db import connections
</snippet></ROW><ROW><id>13998463</id><snippet>list</snippet></ROW><ROW><id>13998463</id><snippet>list</snippet></ROW><ROW><id>13998463</id><snippet>set</snippet></ROW><ROW><id>13998463</id><snippet>dict</snippet></ROW><ROW><id>13998463</id><snippet>set</snippet></ROW><ROW><id>13998463</id><snippet>dict</snippet></ROW><ROW><id>13998463</id><snippet>list</snippet></ROW><ROW><id>13998463</id><snippet>dicts</snippet></ROW><ROW><id>13998463</id><snippet>list</snippet></ROW><ROW><id>13998463</id><snippet>dict</snippet></ROW><ROW><id>13998463</id><snippet>dict(enumerate(l))</snippet></ROW><ROW><id>13998463</id><snippet>list</snippet></ROW><ROW><id>13998463</id><snippet>d[0]</snippet></ROW><ROW><id>13998463</id><snippet>l[0]</snippet></ROW><ROW><id>13998463</id><snippet>&gt;&gt;&gt; l=[['bob','tob','mom'],['tom','apa'],['cat']]
&gt;&gt;&gt; d=[dict(enumerate(i)) for i in l]
&gt;&gt;&gt; d
[{0: 'bob', 1: 'tob', 2: 'mom'}, {0: 'tom', 1: 'apa'}, {0: 'cat'}]
</snippet></ROW><ROW><id>13998534</id><snippet>.items()</snippet></ROW><ROW><id>13998534</id><snippet>.items()</snippet></ROW><ROW><id>13998534</id><snippet>itemview</snippet></ROW><ROW><id>13998534</id><snippet>list(dict.items())</snippet></ROW><ROW><id>13998534</id><snippet>dict.items()</snippet></ROW><ROW><id>13998534</id><snippet>viewkeys</snippet></ROW><ROW><id>13998534</id><snippet>viewitems</snippet></ROW><ROW><id>13998534</id><snippet>viewvalues</snippet></ROW><ROW><id>13998534</id><snippet>viewkeys</snippet></ROW><ROW><id>13998534</id><snippet>set</snippet></ROW><ROW><id>13998534</id><snippet>dict</snippet></ROW><ROW><id>13998534</id><snippet>common_keys = list(dict_a.viewkeys() &amp; dict_b.viewkeys())
</snippet></ROW><ROW><id>13998534</id><snippet>.keys()</snippet></ROW><ROW><id>13998534</id><snippet>map</snippet></ROW><ROW><id>13998534</id><snippet>itertools.imap</snippet></ROW><ROW><id>13998534</id><snippet>zip</snippet></ROW><ROW><id>13998534</id><snippet>itertools.izip</snippet></ROW><ROW><id>13998600</id><snippet>In [16]: df.groupby('id')['x'].apply(pd.rolling_mean, 2, min_periods=1)
Out[16]: 
0    0.0
1    0.5
2    1.5
3    3.0
4    3.5
5    4.5

In [17]: df.groupby('id')['x'].cumsum()
Out[17]: 
0     0
1     1
2     3
3     3
4     7
5    12
</snippet></ROW><ROW><id>13998723</id><snippet>MYLISTS = [
    [1, 2, 3],
    [2, 3, 4],
    ...
]
</snippet></ROW><ROW><id>13998723</id><snippet>import mylists
for sublist in mylists.MYLIST:
    for elem in sublist:
        ....
</snippet></ROW><ROW><id>13998769</id><snippet>ctypes</snippet></ROW><ROW><id>13998769</id><snippet>from ctypes import *
user32 = windll.user32
</snippet></ROW><ROW><id>13998769</id><snippet>mouse_event</snippet></ROW><ROW><id>13998769</id><snippet>SendMessage</snippet></ROW><ROW><id>13998769</id><snippet>SendInput</snippet></ROW><ROW><id>13998769</id><snippet>MOUSEEVENTF_LEFTDOWN</snippet></ROW><ROW><id>13998769</id><snippet>MOUSEEVENTF_LEFTUP</snippet></ROW><ROW><id>13998769</id><snippet>dwFlags</snippet></ROW><ROW><id>13998769</id><snippet>UINT WINAPI SendInput(
  _In_  UINT nInputs,
  _In_  LPINPUT pInputs,
  _In_  int cbSize
);
</snippet></ROW><ROW><id>13998769</id><snippet>LPINPUT</snippet></ROW><ROW><id>13998769</id><snippet>INPUT</snippet></ROW><ROW><id>13998769</id><snippet>INPUT</snippet></ROW><ROW><id>13998769</id><snippet>MOUSEINPUT</snippet></ROW><ROW><id>13998769</id><snippet>KBDINPUT</snippet></ROW><ROW><id>13998769</id><snippet>HARDWAREINPUT</snippet></ROW><ROW><id>13998769</id><snippet>ctypes</snippet></ROW><ROW><id>13998769</id><snippet>Structure</snippet></ROW><ROW><id>13998769</id><snippet>MOUSEINPUT</snippet></ROW><ROW><id>13998769</id><snippet>INPUT</snippet></ROW><ROW><id>13998769</id><snippet>user32</snippet></ROW><ROW><id>13998769</id><snippet>argtypes</snippet></ROW><ROW><id>13998769</id><snippet>user32.SendInput</snippet></ROW><ROW><id>13998769</id><snippet>MOUSEINPUT</snippet></ROW><ROW><id>13998769</id><snippet>dwFlags= MOUSEEVENTF_LEFTDOWN</snippet></ROW><ROW><id>13998769</id><snippet>INPUT</snippet></ROW><ROW><id>13998769</id><snippet>user32.SendInput(1, [myinput], len(INPUT))</snippet></ROW><ROW><id>13998769</id><snippet>user32.SendInput(1, addressof(myinput), len(INPUT))</snippet></ROW><ROW><id>13998769</id><snippet>argtypes</snippet></ROW><ROW><id>13998769</id><snippet>MOUSEINPUT</snippet></ROW><ROW><id>13998769</id><snippet>dwFlags= MOUSEEVENTF_LEFT</snippet></ROW><ROW><id>13998769</id><snippet>INPUT</snippet></ROW><ROW><id>13998769</id><snippet>user32.SendInput()</snippet></ROW><ROW><id>13998816</id><snippet>/proc/&lt;pid&gt;/cmdline</snippet></ROW><ROW><id>13998816</id><snippet>/proc</snippet></ROW><ROW><id>13998979</id><snippet>r'\*\*(.*?)\*\*'</snippet></ROW><ROW><id>13998979</id><snippet>&gt;&gt;&gt; re.sub(r'\*\*(.*?)\*\*','&lt;h1&gt;\\1&lt;/h1&gt;', '**some text here** and **another**')
'&lt;h1&gt;some text here&lt;/h1&gt; and &lt;h1&gt;another&lt;/h1&gt;'
</snippet></ROW><ROW><id>13999030</id><snippet>COLLATE</snippet></ROW><ROW><id>13999030</id><snippet>clauses.append(Employee.DisplayName.startswith(collate(param, 'SQL_Latin1_General_CP1_CI_AS')))
</snippet></ROW><ROW><id>13999030</id><snippet>LIKE</snippet></ROW><ROW><id>13999030</id><snippet>'[vV]alue%'</snippet></ROW><ROW><id>13999141</id><snippet>User</snippet></ROW><ROW><id>13999141</id><snippet>user_id</snippet></ROW><ROW><id>13999141</id><snippet>db.UserProperty</snippet></ROW><ROW><id>13999155</id><snippet>append</snippet></ROW><ROW><id>13999155</id><snippet>extend</snippet></ROW><ROW><id>13999155</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>13999155</id><snippet>map</snippet></ROW><ROW><id>13999155</id><snippet>import itertools
import timeit

def makestuff(count):
    for i in range(count):
        yield (i, i)

def f_extend(mystuff):
    mylist = []
    for x, y in mystuff:
        mylist.extend([int(x), int(y)])
    return mylist

def f_append(mystuff):
    mylist = []
    for x, y in mystuff:
        mylist.append(int(x))
        mylist.append(int(y))
    return mylist

def f_chainmap(mystuff):
    return list(map(int, itertools.chain(*mystuff)))

def f_chaincomp(mystuff):
    return [int(x) for x in itertools.chain(*mystuff)]

def f_chainfrommap(mystuff):
    return list(map(int, itertools.chain.from_iterable(mystuff)))

def f_chainfromcomp(mystuff):
    return [int(x) for x in itertools.chain.from_iterable(mystuff)]

def f_reducecompcomp(mystuff):
    return [int(x) for x in reduce(operator.iadd, (list(y) for y in mystuff), [])]

def f_reducecompmap(mystuff):
    return [int(x) for x in reduce(operator.iadd, map(list, mystuff), [])]


try:
    import numpy
    def f_numpy(mystuff):
        return numpy.array(mystuff).flatten().tolist()
    def f_numpy2(mystuff):
        return numpy.array(list(mystuff)).flatten().tolist()
except:
    pass

if __name__ == '__main__':
  import sys
  main = sys.modules['__main__']
  count = int(sys.argv[1]) if len(sys.argv) &gt; 1 else 10000
  for f in dir(main):
    if f.startswith('f_'):
      func = getattr(main, f)
      mystuff = makestuff(count)
      testfunc = lambda: func(mystuff)
      print('{}: {}'.format(f, timeit.timeit(testfunc, number=count)))
</snippet></ROW><ROW><id>13999155</id><snippet>map</snippet></ROW><ROW><id>13999155</id><snippet>list</snippet></ROW><ROW><id>13999155</id><snippet>list</snippet></ROW><ROW><id>13999155</id><snippet>$ python testlister.py 1000000
f_append: 1.34638285637
f_chaincomp: 2.12710499763
f_chainfromcomp: 1.20806899071
f_chainfrommap: 2.77231812477
f_chainmap: 3.67478609085
f_extend: 1.38338398933
f_numpy: 5.52979397774
f_numpy2: 7.5826470852
f_reducecompcomp: 2.17834687233
f_reducecompmap: 3.16517782211

$ python3 ./testlister.py 1000000
f_append: 0.9949617639649659
f_chaincomp: 2.0521950440015644
f_chainfromcomp: 0.9724521590862423
f_chainfrommap: 2.5558998831082135
f_chainmap: 3.5766013460233808
f_extend: 1.149905970087275
f_reducecompcomp: 2.2112889911513776
f_reducecompmap: 1.9317334480583668
</snippet></ROW><ROW><id>13999155</id><snippet>python</snippet></ROW><ROW><id>13999155</id><snippet>python3</snippet></ROW><ROW><id>13999155</id><snippet>itertools</snippet></ROW><ROW><id>13999155</id><snippet>append</snippet></ROW><ROW><id>13999155</id><snippet>reduce</snippet></ROW><ROW><id>13999155</id><snippet>reduce</snippet></ROW><ROW><id>13999155</id><snippet>append</snippet></ROW><ROW><id>13999155</id><snippet>chain.from_iterable</snippet></ROW><ROW><id>13999155</id><snippet>f_numpy</snippet></ROW><ROW><id>13999155</id><snippet>mystuff</snippet></ROW><ROW><id>13999155</id><snippet>numpy</snippet></ROW><ROW><id>13999155</id><snippet>numpy</snippet></ROW><ROW><id>13999155</id><snippet>list</snippet></ROW><ROW><id>13999155</id><snippet>f_numpy2</snippet></ROW><ROW><id>13999155</id><snippet>list</snippet></ROW><ROW><id>13999155</id><snippet>numpy</snippet></ROW><ROW><id>13999155</id><snippet>numpy</snippet></ROW><ROW><id>13999155</id><snippet>mystuff</snippet></ROW><ROW><id>13999155</id><snippet>mystuff</snippet></ROW><ROW><id>13999155</id><snippet>list</snippet></ROW><ROW><id>13999155</id><snippet>tuple</snippet></ROW><ROW><id>13999155</id><snippet>numpy.array</snippet></ROW><ROW><id>13999210</id><snippet>def sp_a():
    print "a"
</snippet></ROW><ROW><id>13999210</id><snippet>from a import sp_a

def run():
    sp_a()
</snippet></ROW><ROW><id>13999234</id><snippet>store.select('df', [ Term('index', '&gt;', Timestamp('20010105')), 
                     Term('columns', '=', ['A','B']) ])
</snippet></ROW><ROW><id>13999234</id><snippet>df = store.select('df', [ Term('index', '&gt;', Timestamp('20010105') ])
df.reindex(columns = ['A','B'])
</snippet></ROW><ROW><id>13999234</id><snippet>axes</snippet></ROW><ROW><id>13999234</id><snippet> store.append('df', columns = ['A','B','C'])
 store.select('df', [ 'A &gt; 0', Term('index', '&gt;', Timestamp(2000105)) ])
</snippet></ROW><ROW><id>13999311</id><snippet>def QueryWhere(table,where={}):
    params = ["%s=?"%key for key in where.keys()] #take advantage of builtin query placeholders (?)
    c = db.cursor()
    c.execute("SELECT * FROM %s WHERE %s"%(table," AND ".join(params)),where.values())
    return c.fetchall()

print QueryWhere("users",{"name":"johndoe","pass":"1c4$g"}) 
</snippet></ROW><ROW><id>13999402</id><snippet>sock.sendto(bytes(512), (dest_name, port))
</snippet></ROW><ROW><id>13999458</id><snippet>mysqldump -uusername -ppassword db_name table_name &gt; xxxx.sql
mysql -uusername -ppassword new_db_name &lt; xxxx.sql
</snippet></ROW><ROW><id>13999477</id><snippet>def clean(items):
    clean = []
    for objs in items:
        nObj = {}
        for item, obj in objs.iteritems():
            if item != "tags":
                nObj[item] = obj
            else:
                nObj["tags"] = [n.lstrip() for n in obj]
        clean.append(nObj)
    return clean
</snippet></ROW><ROW><id>13999647</id><snippet>import logging
logging.basicConfig(filename = log_filename, level = logging.DEBUG)
</snippet></ROW><ROW><id>13999647</id><snippet>log_filename</snippet></ROW><ROW><id>13999647</id><snippet>logging.basicConfig</snippet></ROW><ROW><id>13999647</id><snippet>LOGGER.debug</snippet></ROW><ROW><id>13999827</id><snippet>libsndfile_python</snippet></ROW><ROW><id>13999827</id><snippet>libsndfile</snippet></ROW><ROW><id>13999827</id><snippet>libsndfile</snippet></ROW><ROW><id>13999827</id><snippet>libsndfile</snippet></ROW><ROW><id>13999827</id><snippet>cd</snippet></ROW><ROW><id>13999827</id><snippet>./configure</snippet></ROW><ROW><id>13999827</id><snippet>make -j8</snippet></ROW><ROW><id>13999827</id><snippet>sudo make -j8 install</snippet></ROW><ROW><id>14000020</id><snippet>import tkFileDialog
</snippet></ROW><ROW><id>14000161</id><snippet>dataChanged ( const QModelIndex &amp; topLeft, const QModelIndex &amp; bottomRight )</snippet></ROW><ROW><id>14000225</id><snippet>(?&lt;=var fooData = {)[^}]+(?=};)
</snippet></ROW><ROW><id>14000386</id><snippet>sleep</snippet></ROW><ROW><id>14000386</id><snippet>after</snippet></ROW><ROW><id>14000386</id><snippet>from Tkinter import *
import time,random

root = Tk()
root.geometry("500x500")
bouncer = Label(root, text="=D")

def bounce ():
    X = random.randint(1,500)
    Y = random.randint(1,500)
    bouncer.place(x=X, y=Y)
    root.after(1000, bounce)

bounce()
root.mainloop()
</snippet></ROW><ROW><id>14000420</id><snippet>strftime</snippet></ROW><ROW><id>14000420</id><snippet>df['date'] = df['datetime'].apply(lambda x: x.strftime('%d%m%Y'))
df['time'] = df['datetime'].apply(lambda x: x.strftime('%H%M%S'))
</snippet></ROW><ROW><id>14000420</id><snippet>df[['date', 'time', ... ]].to_csv('df.csv')
</snippet></ROW><ROW><id>14000664</id><snippet>graph(x**3+2*x-4, range(-10, 11))
</snippet></ROW><ROW><id>14000664</id><snippet>eval</snippet></ROW><ROW><id>14000664</id><snippet>import numpy as np  
import matplotlib.pyplot as plt  
def graph(formula, x_range):  
    x = np.array(x_range)  
    y = eval(formula)
    plt.plot(x, y)  
    plt.show()
</snippet></ROW><ROW><id>14000664</id><snippet>graph('x**3+2*x-4', range(-10, 11))
</snippet></ROW><ROW><id>14000686</id><snippet>line = ''

while "!finish" != line:
    line = input("&gt;")
    file.write(line+"\n")
</snippet></ROW><ROW><id>14000765</id><snippet>zip</snippet></ROW><ROW><id>14000765</id><snippet>&gt;&gt;&gt; x = [[1, 2, 3], [4, 5, 6] , [7, 8, 9]]
&gt;&gt;&gt; for l in zip(*x):
...     print l
... 
(1, 4, 7)
(2, 5, 8)
(3, 6, 9)
</snippet></ROW><ROW><id>14000765</id><snippet>itertools.izip()</snippet></ROW><ROW><id>14000765</id><snippet>zip()</snippet></ROW><ROW><id>14000982</id><snippet>with open('file.txt', 'r') as handle:
    numbers = [map(int, line.split()) for line in handle]
</snippet></ROW><ROW><id>14000982</id><snippet>with open('file.txt', 'r') as handle:
    for line in handle:
        print line
</snippet></ROW><ROW><id>14001182</id><snippet>vars = {}
for i in range(1,n+1):
    vars[i] = input()
    #do something
</snippet></ROW><ROW><id>14001182</id><snippet>vars = [None]  #  initialize vars[0] with None
for i in range(n):
    vars.append(input())
    #do something
</snippet></ROW><ROW><id>14001182</id><snippet>vars[2]</snippet></ROW><ROW><id>14001182</id><snippet>vars[5]</snippet></ROW><ROW><id>14001306</id><snippet>capacity</snippet></ROW><ROW><id>14001306</id><snippet>dict</snippet></ROW><ROW><id>14001306</id><snippet>capacity = {} #Create it before the loop and use this through out the below loop.
while (lines &lt; travels + 1):
 data = lines + 1
 startFrom = raw_input ('The package travels from: ')
 startFrom = str(startFrom)
 arriveIn = raw_input ('The package arrives to: ')
 arriveIn = str(arriveIn)
 pack = raw_input('Number of packages: ')
 pack = int(pack)
 print startFrom, '---&gt;', arriveTo, ': ', pack
 if startFrom in capacity:#Style change and more pythonic
  capacity[startFrom] = capacity[startFrom] + pack
 else:
  capacity[startFrom] = pack
print capacity
</snippet></ROW><ROW><id>14001332</id><snippet>wx.GridSizer</snippet></ROW><ROW><id>14001332</id><snippet>wx.BoxSizer</snippet></ROW><ROW><id>14001332</id><snippet>wx.BoxSizer(wx.HORIZONTAL)</snippet></ROW><ROW><id>14001332</id><snippet>proportion &gt; 0</snippet></ROW><ROW><id>14001332</id><snippet>proportion=2</snippet></ROW><ROW><id>14001332</id><snippet>proportion=1</snippet></ROW><ROW><id>14001332</id><snippet>wx.EXPAND</snippet></ROW><ROW><id>14001332</id><snippet>wx.BoxSizer(wx.HORIZONTAL)</snippet></ROW><ROW><id>14001332</id><snippet>wx.EXPAND</snippet></ROW><ROW><id>14001332</id><snippet>import wx

class Frame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, title='BoxSizer demo (resize the frame)')
        self.SetBackgroundColour(wx.WHITE)
        layout = wx.StaticBoxSizer(wx.StaticBox(self,label="wx.BoxSizer(wx.HORIZONTAL)"),wx.HORIZONTAL)
        # proportion=1
        layout.Add( wx.StaticText(self,label='proportion=1', style=wx.BORDER_DOUBLE ), 1, wx.ALL, 10 )
        # proportion=0, expand
        layout.Add( wx.StaticText(self,label='wx.EXPAND', style=wx.BORDER_DOUBLE ), 0, wx.EXPAND|wx.ALL, 10 )
        # proportion=0, align bottom
        layout.Add( wx.StaticText(self,label='wx.ALIGN_BOTTOM', style=wx.BORDER_DOUBLE ), 0, wx.ALIGN_BOTTOM|wx.ALL, 10 )
        # proportion=2, expand
        layout.Add( wx.StaticText(self,label='proportion=2 + wx.EXPAND', style=wx.BORDER_DOUBLE ), 2, wx.EXPAND|wx.ALL, 10 )
        self.SetSizerAndFit(layout)

app = wx.App(False)
Frame().Show()
app.MainLoop()
</snippet></ROW><ROW><id>14001332</id><snippet>import wx

class Frame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, title='BoxSizer demo (resize the frame)')
        self.SetBackgroundColour(wx.WHITE)
        layout = wx.StaticBoxSizer(wx.StaticBox(self,label="wx.VERTICAL"),wx.VERTICAL)
        # row 1
        row = wx.wx.StaticBoxSizer(wx.StaticBox(self,label="wx.HORIZONTAL - proportion=0"),wx.HORIZONTAL)
        row.Add(wx.StaticText(self,label="proportion=0",style=wx.BORDER_DOUBLE),0, wx.ALL,10)
        row.Add(wx.StaticText(self,label="proportion=1",style=wx.BORDER_DOUBLE),1, wx.ALL,10)
        layout.Add(row) # add row 1 without arguments
        # row 2
        row = wx.StaticBoxSizer(wx.StaticBox(self,label="wx.HORIZONTAL - proportion=1"),wx.HORIZONTAL)
        row.Add(wx.StaticText(self,label="proportion=1",style=wx.BORDER_DOUBLE),1, wx.ALL,10)
        row.Add(wx.StaticText(self,label="proportion=2, wx.EXPAND",style=wx.BORDER_DOUBLE),2, wx.EXPAND|wx.ALL,10)
        layout.Add(row,1) # add row 2 with proportion = 1
        # row 3
        row = wx.StaticBoxSizer(wx.StaticBox(self,label="wx.HORIZONTAL - proportion=0, wx.EXPAND"),wx.HORIZONTAL)
        row.Add(wx.StaticText(self,label="proportion=0",style=wx.BORDER_DOUBLE),0, wx.ALL,10)
        row.Add(wx.StaticText(self,label="proportion=1",style=wx.BORDER_DOUBLE),1, wx.ALL,10)
        layout.Add(row,0,wx.EXPAND) # add row 3 with proportion = 0 and wx.EXPAND
        self.SetSizerAndFit(layout)

app = wx.App(False)
Frame().Show()
app.MainLoop()
</snippet></ROW><ROW><id>14001504</id><snippet>^[0-9]*\+.*$
</snippet></ROW><ROW><id>14001504</id><snippet>\*{3}[^\*]*(?:(?=\*{3})|(?=^-*$))
</snippet></ROW><ROW><id>14001504</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-
import re
with open("/path/to/file", "r") as fileInput:
    listLines = [   line.strip()
                    for line in fileInput.readlines()
                    if re.match("^[0-9]*\+.*$", line)
                    ] 


for line in listLines:
    print line

&gt;&gt;&gt; 10+BB {MYXV ABC 4116    SM  MYXV YA 102-15 &lt;DO&gt;} | 2010/11 4.0s             4.0s
&gt;&gt;&gt; 6+ BB {MYXV ABC 4132    NS  MYXV YT 102-22 &lt;DO&gt;} | 2010 4.5s                4.5s
&gt;&gt;&gt; 10+BB  {NXTW VXA 4061   SL  MYXV YA 103-22 &lt;DO&gt;} | 11 wala 3.5s             3.5s
&gt;&gt;&gt; 10+BB  {NXTW VXA 12-47  SP  MYXV YA 106-20 &lt;DO&gt;} | 22 wala 4.0s             4.0s
</snippet></ROW><ROW><id>14001504</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-
import re
with open("/path/to/file", "r") as fileInput:
    regex = re.compile(r"\*{3}[^\*]*?(?:(?=^-*$)|(?=\*))", re.MULTILINE)

    listMsg = [ [   line.strip()
                    for line in message.split("\n")
                    if not line.startswith("*") and line.strip()
                    ]
                for message in regex.findall(fileInput.read())
                ]

&gt;&gt;&gt; 10+BB {MYXV ABC 4116    SM  MYXV YA 102-15 &lt;DO&gt;} | 2010/11 4.0s             4.0s
&gt;&gt;&gt; 6+ BB {MYXV ABC 4132    NS  MYXV YT 102-22 &lt;DO&gt;} | 2010 4.5s                4.5s
&gt;&gt;&gt; ABO 2006-OP1 M1     00442PAG5     19-24      p5
&gt;&gt;&gt; 10+BB  {NXTW VXA 4061   SL  MYXV YA 103-22 &lt;DO&gt;} | 11 wala 3.5s             3.5s
&gt;&gt;&gt; 10+BB  {NXTW VXA 12-47  SP  MYXV YA 106-20 &lt;DO&gt;} | 22 wala 4.0s             4.0s
</snippet></ROW><ROW><id>14001504</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-
import re
with open("/path/to/file", "r") as fileInput:
    regex = re.compile(r"(?&lt;=^At:)([^\n\r]*)(.*?)(?=^-*-$)", re.MULTILINE|re.DOTALL)

    print regex.search(fileInput.read()).groups()[1]

&gt;&gt;&gt; ACE 2006-OP1 ZZ 111111111 19-24 Z5 ZZW 2012-0P1 SD 222222222 77-00 150
&gt;&gt;&gt; ***NEW ISSUE SUPPORTED THROUGH UNIVERSALITY   vs 104-13 on AY 3s JAN   
&gt;&gt;&gt; 10+BB {MYXV ABC 4116    SM  MYXV YA 102-15 &lt;DO&gt;} | 2010/11 4.0s             4.0s
&gt;&gt;&gt; 6+ BB {MYXV ABC 4132    NS  MYXV YT 102-22 &lt;DO&gt;} | 2010 4.5s                4.5s
&gt;&gt;&gt; ABO 2006-OP1 M1     00442PAG5     19-24      p5 
&gt;&gt;&gt; ***SECOND SUPPORTED TRHOUGH INVERSALITY GEVINGS                      
&gt;&gt;&gt; 10+BB  {NXTW VXA 4061   SL  MYXV YA 103-22 &lt;DO&gt;} | 11 wala 3.5s             3.5s
&gt;&gt;&gt; 10+BB  {NXTW VXA 12-47  SP  MYXV YA 106-20 &lt;DO&gt;} | 22 wala 4.0s             4.0s
</snippet></ROW><ROW><id>14001597</id><snippet>fp = open("data.txt", "r")
data = fp.read();

data = data.split("&gt;");

i = 0;

while True:
    filename = data[i].split('" ')[1].split('"')[1]
    text = data[i+1].split('&lt;')[0].strip()

    fp1 = open(filename + ".txt", "w")
    fp1.write(text)
    fp1.close()

    i += 2
    if i &gt;= (len(data) - 1):
        break;
</snippet></ROW><ROW><id>14002061</id><snippet>distutils</snippet></ROW><ROW><id>14002061</id><snippet>entry_points</snippet></ROW><ROW><id>14002061</id><snippet>setuptools</snippet></ROW><ROW><id>14002354</id><snippet>class sqlTableModel(QSqlTableModel):
    def __init__(self, parent=None):
        super(sqlTableModel, self).__init__(parent)

    def setData(self, index, value, role=Qt.EditRole):
        if role == Qt.EditRole:
            value = value.strip() if type(value) == str else value

        return super(sqlTableModel, self).setData(index, value, role)

    def flags(self, index):
        itemFlags = super(sqlTableModel, self).flags(index)

        if index.column() != 0:
            return itemFlags | Qt.ItemIsEditable

        return itemFlags ^ Qt.ItemIsEditable #  First column not editable
</snippet></ROW><ROW><id>14002354</id><snippet>setQuery</snippet></ROW><ROW><id>14002354</id><snippet>def setDatabase(self, nameDatabase):
    self.database = QSqlDatabase.addDatabase("QSQLITE")
    self.database.setDatabaseName(nameDatabase)

    return self.database.open()

def setTable(self, nameTable):
    self.model = sqlTableModel(self)
    self.model.setEditStrategy(QSqlTableModel.OnManualSubmit)
    self.model.setTable(nameTable)
    self.model.select()

    self.view.setModel(self.model)

def saveTable(self):
    if self.model.submitAll():
        return True

    self.model.database().rollback()
    return False
</snippet></ROW><ROW><id>14002416</id><snippet>def do_something_with_retry(*args):
    try:
      return do_something(*args)
    except Exception:
      return do_something(*args)
</snippet></ROW><ROW><id>14002416</id><snippet>pool = Pool(10)
pool.map(do_something_with_retry, [1, 2, 3])
</snippet></ROW><ROW><id>14002416</id><snippet>do_something()</snippet></ROW><ROW><id>14002416</id><snippet>def do_something(*args):
    return requests.get('http://gevent.org')
</snippet></ROW><ROW><id>14002797</id><snippet>gtk.EventBox</snippet></ROW><ROW><id>14002797</id><snippet>x</snippet></ROW><ROW><id>14002797</id><snippet>y</snippet></ROW><ROW><id>14002797</id><snippet>import gtk

win  = gtk.Window ()
box  = gtk.EventBox ()
area = gtk.DrawingArea ()

def onclick (box, event):
   print event.x, event.y

box.connect ('button-press-event', onclick)

box.add (area)
win.add (box)
win.show_all ()
win.connect ('destroy', lambda *x: gtk.main_quit ())

gtk.main ()
</snippet></ROW><ROW><id>14003822</id><snippet>......********.......   Source User
........****.........   Target User Overlaping
....*****............   Target User Overlaping
..........*******....   Target User Overlaping
....************.....   Target User Overlaping

......********.......   Source User
..**.................   Target User Not Overlaping
................**...   Target User Not Overlaping
</snippet></ROW><ROW><id>14003822</id><snippet>taget_end_date &lt; source_begin_date</snippet></ROW><ROW><id>14003822</id><snippet>target_begin_date &gt; source_end_date</snippet></ROW><ROW><id>14003822</id><snippet>NOT (taget_end_date &lt; source_begin_date or target_begin_date &gt; source_end_date )
</snippet></ROW><ROW><id>14003822</id><snippet>   not (taget_end_date &lt; source_begin_date ) 
 and 
   not( target_begin_date &gt; source_end_date )
</snippet></ROW><ROW><id>14003822</id><snippet> taget_end_date &gt;= source_begin_date  and  target_begin_date &lt;= source_end_date 
</snippet></ROW><ROW><id>14003822</id><snippet>source = Company_Position_Person.objects.get( pk = 12 )
targets = Company_Position_Person.filter( startDate__lte = target.endDate ,
                                          endDate__gte = target.startDate )
</snippet></ROW><ROW><id>14003847</id><snippet>pyramid</snippet></ROW><ROW><id>14003847</id><snippet>accept</snippet></ROW><ROW><id>14003847</id><snippet>Accept</snippet></ROW><ROW><id>14003847</id><snippet>from pyramid.view import view_config

@view_config(route_name='some_api_name', request_method='POST', accept='application/json')
def handle_someapi_json(request):
    # return JSON

@view_config(route_name='some_api_name', request_method='POST', accept='text/html')
def handle_someapi_html(request):
    # return HTML
</snippet></ROW><ROW><id>14003949</id><snippet>sys.stdout</snippet></ROW><ROW><id>14003949</id><snippet>#!/usr/bin/python3.2
import sys
out = sys.stdout
out.write(b"Content-Type: text/html; charset=utf8\r\n")
out.write(b"\r\n")

y = "£17"
out.write("Test: {0}\r\n".format(y).encode(encoding='utf8'))
</snippet></ROW><ROW><id>14003949</id><snippet>\r\n</snippet></ROW><ROW><id>14003949</id><snippet>Content-Type</snippet></ROW><ROW><id>14003949</id><snippet>y = "£17"
out.write("Test: {0}\r\n".format(y).encode(encoding='utf8'))
</snippet></ROW><ROW><id>14003949</id><snippet>print()</snippet></ROW><ROW><id>14003949</id><snippet>stdout</snippet></ROW><ROW><id>14003949</id><snippet>utf8stdout = open(1, 'w', encoding='utf-8', closefd=False) # fd 1 is stdout

print("Content-Type: text/html; charset=utf8", end='\r\n', file=utf8stdout)
print("", end='\r\n', file=utf8stdout)

y = "£17"
print("Test:", y, end='\r\n', file=utf8stdout)
</snippet></ROW><ROW><id>14003949</id><snippet>functools.partial()</snippet></ROW><ROW><id>14003949</id><snippet>from functools import partial
utf8print = partial(print, end='\r\n', file=utf8stdout)
</snippet></ROW><ROW><id>14003949</id><snippet>utf8print()</snippet></ROW><ROW><id>14003949</id><snippet>utf8print("Content-Type: text/html; charset=utf8")
utf8print("")
# etc.
</snippet></ROW><ROW><id>14003981</id><snippet>input = 'FFFF'
val = int(input,16) # is 65535
</snippet></ROW><ROW><id>14003981</id><snippet>val16 = ((val+0x8000)&amp;0xFFFF) - 0x8000
</snippet></ROW><ROW><id>14003981</id><snippet>def sxtn( x, bits ):
     h= 1&lt;&lt;(bits-1)
     m = (1&lt;&lt;bits)-1
     return ((x+h) &amp; m)-h
</snippet></ROW><ROW><id>14004040</id><snippet>def authenticate(self,username=None,password=None,errors=[]):
    ... 
    errors.append('Connection error.')
</snippet></ROW><ROW><id>14004040</id><snippet>def clean(self):
    ...
    errors = []
    self.user_cache = authenticate(username=username, password=password, errors=errors)
    ...
    raise form.ValidationError(" ".join(errors))
</snippet></ROW><ROW><id>14004227</id><snippet>def set_axis(self, *args, **kwargs):
    xlabel = kwargs.get('xlabel', 'x')
    ylabel = kwargs.get('ylabel', 'y')
</snippet></ROW><ROW><id>14004232</id><snippet>numpy.diff</snippet></ROW><ROW><id>14004232</id><snippet>out[n] = a[n+1] - a[n]</snippet></ROW><ROW><id>14004232</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.arange(12).reshape((3,4))
&gt;&gt;&gt; a
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11]])
&gt;&gt;&gt; np.diff(a,axis = 1) # row-wise
array([[1, 1, 1],
       [1, 1, 1],
       [1, 1, 1]])
&gt;&gt;&gt; np.diff(a, axis = 0) # column-wise
array([[4, 4, 4, 4],
       [4, 4, 4, 4]])
</snippet></ROW><ROW><id>14004255</id><snippet>SetProcessAffinityMask</snippet></ROW><ROW><id>14004255</id><snippet>SetThreadAffinityMask</snippet></ROW><ROW><id>14004255</id><snippet>CPUID</snippet></ROW><ROW><id>14004629</id><snippet>timeit</snippet></ROW><ROW><id>14004629</id><snippet>lfactor(number)</snippet></ROW><ROW><id>14004629</id><snippet>timeit()</snippet></ROW><ROW><id>14004629</id><snippet>timeit.timeit('lfactor(number)', 'from __main__ import lfactor, number')
</snippet></ROW><ROW><id>14004629</id><snippet>lfactor()</snippet></ROW><ROW><id>14004629</id><snippet>number</snippet></ROW><ROW><id>14004629</id><snippet>sys.argv</snippet></ROW><ROW><id>14004629</id><snippet>print</snippet></ROW><ROW><id>14004629</id><snippet>timeit</snippet></ROW><ROW><id>14004629</id><snippet>timeit</snippet></ROW><ROW><id>14004629</id><snippet>timeit.default_timer()</snippet></ROW><ROW><id>14004629</id><snippet>timer = timeit.default_timer
start = timer()
print lfactor(number)
time_taken = timer() - start
</snippet></ROW><ROW><id>14004681</id><snippet>from lxml import html

s = '&lt;li&gt;&lt;label&gt;The Keyword:&lt;/label&gt;&lt;span&gt;&lt;a href="../../.."&gt;The text&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;'

tree = html.fromstring(s)
text = tree.text_content()
print text
</snippet></ROW><ROW><id>14004692</id><snippet>f.close()</snippet></ROW><ROW><id>14004692</id><snippet>f.close()</snippet></ROW><ROW><id>14004692</id><snippet>f.close()</snippet></ROW><ROW><id>14004771</id><snippet>GzipFile</snippet></ROW><ROW><id>14004900</id><snippet>GAU</snippet></ROW><ROW><id>14004900</id><snippet>''</snippet></ROW><ROW><id>14004976</id><snippet>str.strip()</snippet></ROW><ROW><id>14004976</id><snippet>str.replace()</snippet></ROW><ROW><id>14004976</id><snippet>%</snippet></ROW><ROW><id>14004976</id><snippet>str.format()</snippet></ROW><ROW><id>14005283</id><snippet>datay</snippet></ROW><ROW><id>14005283</id><snippet>scipy.fftpack.rfft</snippet></ROW><ROW><id>14005283</id><snippet>2*pi/n</snippet></ROW><ROW><id>14005283</id><snippet>n = len(datay)</snippet></ROW><ROW><id>14005283</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import scipy.fftpack as fftpack

pi = np.pi
tdata = np.arange(5999.)/300
datay = 3*np.sin(2*pi*tdata)+6*np.sin(2*pi*2*tdata)
fouriery = fftpack.rfft(datay)
freqs = fftpack.rfftfreq(len(datay), d=(tdata[1]-tdata[0]))
plt.plot(freqs, fouriery, 'b-')
plt.xlim(0,3)
plt.show()
</snippet></ROW><ROW><id>14005635</id><snippet>len(a)</snippet></ROW><ROW><id>14005635</id><snippet>range()</snippet></ROW><ROW><id>14005635</id><snippet>while</snippet></ROW><ROW><id>14005635</id><snippet>while len(a) &lt; 10:
    a.append(2)
</snippet></ROW><ROW><id>14005635</id><snippet>.extend()</snippet></ROW><ROW><id>14005635</id><snippet>2</snippet></ROW><ROW><id>14005635</id><snippet>a.extend([2] * (10 - len(a)))
</snippet></ROW><ROW><id>14005635</id><snippet>+=</snippet></ROW><ROW><id>14005635</id><snippet>.extend()</snippet></ROW><ROW><id>14005635</id><snippet>a += [2] * (10 - len(a))
</snippet></ROW><ROW><id>14005708</id><snippet>def</snippet></ROW><ROW><id>14005708</id><snippet>comments = []
for (counter, line) in enumerate(visible_texts):
    if line.lstrip().startswith('#'):
        comments.append(line)
    elif "def" in line and not infunction:
        comment = '\n'.join(comments)
        comments = []
        # rest of your code
    else:
        comments = []
</snippet></ROW><ROW><id>14005926</id><snippet>copy</snippet></ROW><ROW><id>14005926</id><snippet>__copy__()</snippet></ROW><ROW><id>14005926</id><snippet>__deepcopy__()</snippet></ROW><ROW><id>14005926</id><snippet>__deepcopy__()</snippet></ROW><ROW><id>14005926</id><snippet>deepcopy()</snippet></ROW><ROW><id>14005926</id><snippet>copy()</snippet></ROW><ROW><id>14005926</id><snippet>deepcopy()</snippet></ROW><ROW><id>14005948</id><snippet>{1, 2}</snippet></ROW><ROW><id>14005948</id><snippet>{3}</snippet></ROW><ROW><id>14006014</id><snippet>String.objects.filter( language = 'english', 
                       string__original_string__isnull = True )
</snippet></ROW><ROW><id>14006773</id><snippet>gpsd = gps(mode=WATCH_ENABLE) #starting the stream of info
</snippet></ROW><ROW><id>14006773</id><snippet>gps()</snippet></ROW><ROW><id>14006773</id><snippet>gps.gps()</snippet></ROW><ROW><id>14006773</id><snippet>gps</snippet></ROW><ROW><id>14006773</id><snippet>gps()</snippet></ROW><ROW><id>14006773</id><snippet>from gps import *</snippet></ROW><ROW><id>14006773</id><snippet>NameError</snippet></ROW><ROW><id>14006773</id><snippet>gps</snippet></ROW><ROW><id>14006878</id><snippet>Accept</snippet></ROW><ROW><id>14006878</id><snippet>req = mechanize.Request(url)
req.add_header('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8')
page = mechanize.urlopen(req)
</snippet></ROW><ROW><id>14006878</id><snippet>Accept</snippet></ROW><ROW><id>14006937</id><snippet>for e in s.intersection(ls):
    # only elements that are in `s` *and* `ls` are iterated over
    process(d[e])
</snippet></ROW><ROW><id>14006937</id><snippet>process()</snippet></ROW><ROW><id>14006937</id><snippet>in</snippet></ROW><ROW><id>14006937</id><snippet>in</snippet></ROW><ROW><id>14006937</id><snippet>timeit</snippet></ROW><ROW><id>14006967</id><snippet>import itertools

def perm(n, seq):
    for p in itertools.product(seq, repeat=n):
        file.write("".join(p))
        file.write("\n")

perm(4, "0123")
</snippet></ROW><ROW><id>14007001</id><snippet>import curses, time

def main(sc):
    sc.nodelay(1)

    for angry in range(20):
        sc.addstr(angry, 1, "hi")
        sc.refresh()

        if sc.getch() == ord('q'):
            break

        time.sleep(1)

if __name__=='__main__':
    curses.wrapper(main)
</snippet></ROW><ROW><id>14007165</id><snippet>format</snippet></ROW><ROW><id>14007165</id><snippet>print "{1}".format ("1","2")
</snippet></ROW><ROW><id>14007175</id><snippet>matplotlib</snippet></ROW><ROW><id>14007175</id><snippet>zorder</snippet></ROW><ROW><id>14007175</id><snippet>errorbar</snippet></ROW><ROW><id>14007175</id><snippet>import matplotlib.pyplot as plt
fig = plt.figure()
ax = plt.gca()
[ax.plot(rand(50),color='0.75') for j in range(122)];
ax.errorbar(range(50),rand(50),yerr=.3*rand(50))
plt.draw()
</snippet></ROW><ROW><id>14007175</id><snippet>fig = plt.figure()
ax = plt.gca()
[ax.plot(rand(50),color='0.75',zorder=-32) for j in range(122)];
ax.errorbar(range(50),rand(50),yerr=.3*rand(50))
plt.draw()
</snippet></ROW><ROW><id>14007196</id><snippet>build_solution</snippet></ROW><ROW><id>14007196</id><snippet>None</snippet></ROW><ROW><id>14007196</id><snippet>solution</snippet></ROW><ROW><id>14007196</id><snippet>build_solution</snippet></ROW><ROW><id>14007384</id><snippet>&gt;&gt;&gt; mystr = "\ufeffHello world."
&gt;&gt;&gt; mystr[0]
'\ufeff'
&gt;&gt;&gt; '%02x' % ord(mystr[0])
'feff'
</snippet></ROW><ROW><id>14007384</id><snippet>bytes</snippet></ROW><ROW><id>14007384</id><snippet>list</snippet></ROW><ROW><id>14007384</id><snippet>bytes</snippet></ROW><ROW><id>14007384</id><snippet>bom</snippet></ROW><ROW><id>14007384</id><snippet>string</snippet></ROW><ROW><id>14007384</id><snippet>print repr(x)</snippet></ROW><ROW><id>14007384</id><snippet>print x</snippet></ROW><ROW><id>14007559</id><snippet>re.sub</snippet></ROW><ROW><id>14007559</id><snippet>result = re.sub(r"(\d.*?)\s(\d.*?)", r"\1 \2", string1)
</snippet></ROW><ROW><id>14007559</id><snippet>group(...)</snippet></ROW><ROW><id>14007559</id><snippet>1</snippet></ROW><ROW><id>14007872</id><snippet>&gt;&gt;&gt; xx = np.random.randn(nobs)
&gt;&gt;&gt; ecdf = sm.distributions.ECDF(xx)
&gt;&gt;&gt; plt.plot(ecdf.x, ecdf.y)
[&lt;matplotlib.lines.Line2D object at 0x07A872D0&gt;]
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>14007872</id><snippet>&gt;&gt;&gt; xx.sort()
&gt;&gt;&gt; plt.plot(xx, ecdf(xx))
[&lt;matplotlib.lines.Line2D object at 0x07A87090&gt;]
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>14007872</id><snippet>&gt;&gt;&gt; a=0; plt.plot(xx, np.arange(1.,nobs+1)/(nobs+a))
[&lt;matplotlib.lines.Line2D object at 0x07A87D30&gt;]
&gt;&gt;&gt; plt.show()
</snippet></ROW><ROW><id>14007872</id><snippet>a</snippet></ROW><ROW><id>14008242</id><snippet>bysign = [int(x &gt;= 0) for x in somelist]
</snippet></ROW><ROW><id>14008276</id><snippet>B()
  A()
B::run()
  A(a)     &lt;- copy construct A to pass by value
    fun1() &lt;- arg passed by value
  ~A()     &lt;- delete copy
  A(a)     &lt;- copy construct A to pass by value
    fun2() &lt;- arg passed by value
  ~A()     &lt;- delete copy
~B()
  ~A()
</snippet></ROW><ROW><id>14008276</id><snippet>aa</snippet></ROW><ROW><id>14008276</id><snippet>aa</snippet></ROW><ROW><id>14008276</id><snippet>A</snippet></ROW><ROW><id>14008276</id><snippet>aa</snippet></ROW><ROW><id>14008276</id><snippet>_obj.attr("fun1")(boost::ref(aa));
_obj.attr("fun2")(boost::ref(aa));
</snippet></ROW><ROW><id>14008276</id><snippet>B()
  A()    &lt;- constructed once
B::run()
  fun1() &lt;- arg passed by reference
  fun2() &lt;- arg passed by reference
~B()
  ~A()   &lt;- destroyed once
</snippet></ROW><ROW><id>14008400</id><snippet>' '.join(map(str,L)).index(' '.join(map(str,x)))/2
</snippet></ROW><ROW><id>14008454</id><snippet>regex = re.compile(r'\d+')
</snippet></ROW><ROW><id>14008454</id><snippet>regex.findall(filename)
</snippet></ROW><ROW><id>14008454</id><snippet>int</snippet></ROW><ROW><id>14008454</id><snippet>[int(x) for x in regex.findall(filename)]
</snippet></ROW><ROW><id>14008454</id><snippet>regex.search(filename).group(0)</snippet></ROW><ROW><id>14008454</id><snippet>NoneType</snippet></ROW><ROW><id>14008454</id><snippet>group</snippet></ROW><ROW><id>14008467</id><snippet>audiolab</snippet></ROW><ROW><id>14008467</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14008467</id><snippet>PATH</snippet></ROW><ROW><id>14008467</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14008544</id><snippet>bar</snippet></ROW><ROW><id>14008544</id><snippet>b</snippet></ROW><ROW><id>14008544</id><snippet>ar</snippet></ROW><ROW><id>14008544</id><snippet>ar</snippet></ROW><ROW><id>14008544</id><snippet>ra</snippet></ROW><ROW><id>14008544</id><snippet>b</snippet></ROW><ROW><id>14008544</id><snippet>ar</snippet></ROW><ROW><id>14008544</id><snippet>bar</snippet></ROW><ROW><id>14008544</id><snippet>abr</snippet></ROW><ROW><id>14008544</id><snippet>arb</snippet></ROW><ROW><id>14008544</id><snippet>ra</snippet></ROW><ROW><id>14008544</id><snippet>bra</snippet></ROW><ROW><id>14008544</id><snippet>rba</snippet></ROW><ROW><id>14008544</id><snippet>rab</snippet></ROW><ROW><id>14008683</id><snippet>&gt;&gt;&gt; conn.execute(users.update().
...                     values(fullname="Fullname: " + users.c.name)
...                 )
</snippet></ROW><ROW><id>14008683</id><snippet>conn.execute(your_table.update().values(val=your_table.c.val + 1))
</snippet></ROW><ROW><id>14008683</id><snippet>values</snippet></ROW><ROW><id>14009072</id><snippet>mechanize</snippet></ROW><ROW><id>14009072</id><snippet>name</snippet></ROW><ROW><id>14009072</id><snippet>set_value</snippet></ROW><ROW><id>14009072</id><snippet>class HTMLForm:

    # &lt;...&gt;

    set_value(value,
          name=None, type=None, kind=None, id=None, nr=None,
          by_label=False,  # by_label is deprecated
          label=None)
</snippet></ROW><ROW><id>14009072</id><snippet>nr</snippet></ROW><ROW><id>14009072</id><snippet>nr=len(myform.controls)-1</snippet></ROW><ROW><id>14009072</id><snippet>set_value</snippet></ROW><ROW><id>14009072</id><snippet>forms[2].set_value("LOOK!!!! I SET THE VALUE OF THIS UNNAMED CONTROL!", 
                       nr=5)
</snippet></ROW><ROW><id>14009113</id><snippet>In [6]: full = np.vstack(([1,'a','b'],[2,'c','d'],[3,'e','f']))


In [7]: full
Out[7]: 
array([['1', 'a', 'b'],
       ['2', 'c', 'd'],
       ['3', 'e', 'f']], 
      dtype='|S1')


In [8]: for a,b,c in full:
   ...: print a,b,c
   ...: 
1 a b
2 c d
3 e f
</snippet></ROW><ROW><id>14009616</id><snippet>easy_install</snippet></ROW><ROW><id>14009616</id><snippet>&lt;your python folder&gt;/Scripts/</snippet></ROW><ROW><id>14009744</id><snippet>exit()</snippet></ROW><ROW><id>14009744</id><snippet>-1</snippet></ROW><ROW><id>14009744</id><snippet>   while (true) { //endless loop
       ++it;
       std::cout&lt;&lt; it &lt;&lt;std::endl;
       sleep(3);
       if(PyErr_CheckSignals() == -1) {
           exit(1);
       }
   }
</snippet></ROW><ROW><id>14009809</id><snippet>python test_raw_input.py &gt; xxx
</snippet></ROW><ROW><id>14009809</id><snippet>python test_raw_input.py 2&gt; xxx
</snippet></ROW><ROW><id>14009809</id><snippet>import readline
</snippet></ROW><ROW><id>14009809</id><snippet>raw_input</snippet></ROW><ROW><id>14009840</id><snippet>datetime</snippet></ROW><ROW><id>14010029</id><snippet>from jinja2.ext import Extension

def visible_only(value):
    return [v for v in value if not getattr(v, "visible", False)]

class MyExtension(Extension):
    def __init__(self, environment):
        environment.filters["visible_only"] = visible_only
</snippet></ROW><ROW><id>14010035</id><snippet>.so</snippet></ROW><ROW><id>14010474</id><snippet>Post</snippet></ROW><ROW><id>14010474</id><snippet>thread</snippet></ROW><ROW><id>14010474</id><snippet>Post</snippet></ROW><ROW><id>14010474</id><snippet>Thread</snippet></ROW><ROW><id>14010474</id><snippet>class Post(Base):
    __tablename__ = "post"
    id = Column(Integer, primary_key=True)
    name = Column(String)
    body = Column(String)
    author = Column(Integer, ForeignKey("user.id"))
    thread_id = Column(Integer, ForeignKey('thread.id'))
</snippet></ROW><ROW><id>14010474</id><snippet>thread</snippet></ROW><ROW><id>14010474</id><snippet>Post.replies</snippet></ROW><ROW><id>14010474</id><snippet>Thread</snippet></ROW><ROW><id>14010716</id><snippet># to use the last parameter (border), you have to
# specify which border(s) to use in the flag parameter:
# wx.TOP, wx.BOTTOM, wx.LEFT, wx.RIGHT, a combination
# of them, or wx.ALL
main_sizer2.Add(self.toolBar, 0, wx.EXPAND|wx.BOTTOM, 5)
main_sizer2.Add(self.searchBar, 0, wx.EXPAND|wx.LEFT|wx.RIGHT, 5)
# proportion missing:
main_sizer.Add(main_sizer2, 1, wx.EXPAND)
</snippet></ROW><ROW><id>14010716</id><snippet># set the green panel to twice the size of the black one
main_sizer3.Add(tree_panel, 1, wx.EXPAND|wx.RIGHT, 5)
main_sizer3.Add(entry_panel, 2, wx.EXPAND)
# and another proportion missing:
main_sizer2.Add(main_sizer3, 1, wx.EXPAND|wx.ALL, 5)
</snippet></ROW><ROW><id>14010716</id><snippet>main_sizer</snippet></ROW><ROW><id>14010716</id><snippet>wx.SplitterWindow</snippet></ROW><ROW><id>14010716</id><snippet># ...
layout = wx.BoxSizer(wx.VERTICAL)
layout.Add(self.toolBar, 0, wx.EXPAND|wx.BOTTOM, 5)
layout.Add(self.searchBar, 0, wx.EXPAND|wx.LEFT|wx.RIGHT,5)

splitter = wx.SplitterWindow(self,style=wx.SP_LIVE_UPDATE)

tree_panel = wx.Panel(splitter)
tree_panel.SetBackgroundColour(wx.BLACK)
entry_panel = wx.Panel(splitter)
entry_panel.SetBackgroundColour(wx.GREEN)

splitter.SplitVertically(tree_panel,entry_panel)
splitter.SetMinimumPaneSize(50)

layout.Add(splitter,1,wx.EXPAND|wx.ALL,5)
self.SetSizer(layout)
</snippet></ROW><ROW><id>14010948</id><snippet>class StdOutWrapper:
    text = ""
    def write(self,txt):
        self.text += txt
        self.text = '\n'.join(self.text.split('\n')[-30:])
    def get_text(self,beg,end):
        return '\n'.join(self.text.split('\n')[beg:end])

if __name__ == "__main__":
    mystdout = StdOutWrapper()
    sys.stdout = mystdout
    sys.stderr = mystdout

    screen = curses.initscr()
    curses.noecho()
    curses.cbreak()

    # do your stuff here
    # you can also output mystdout.get_text() in a ncurses widget in runtime

    screen.keypad(0)
    curses.nocbreak()
    curses.echo()
    curses.endwin()
    sys.stdout = sys.__stdout__
    sys.stderr = sys.__stderr__
    sys.stdout.write(mystdout.get_text())
</snippet></ROW><ROW><id>14010987</id><snippet>from PyQt4.QtGui import *
from PyQt4.QtCore import *

class Foo(object):
    pass

class MyWidget(QWidget):
    mysignal = pyqtSignal(int, list)

    def __init__(self, parent=None):
        super(MyWidget, self).__init__(parent)
        self.hlayout = QHBoxLayout()
        self.setLayout(self.hlayout)
        self.b = QPushButton("Emit your signal!", self)
        self.hlayout.addWidget(self.b)
        self.b.clicked.connect(self.clickHandler)
        self.mysignal.connect(self.mySignalHandler)

    def clickHandler(self):
        self.mysignal.emit(5, ["a", Foo(), 6])

    def mySignalHandler(self, n, l):
        print n
        print l

if __name__ == '__main__':
    import sys
    app = QApplication(sys.argv)
    w = MyWidget()
    w.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14010987</id><snippet>5
['a', &lt;__main__.Foo object at 0xb7423e0c&gt;, 6]
</snippet></ROW><ROW><id>14011032</id><snippet>xml.parsers.expat</snippet></ROW><ROW><id>14011032</id><snippet>from xml.parsers.expat import ParserCreate

def char_data(data):
    if data.strip(): # skip empty text if you want
        print data

parser = ParserCreate()
parser.CharacterDataHandler = char_data
parser.Parse(doc,True)
</snippet></ROW><ROW><id>14011032</id><snippet>xml.sax</snippet></ROW><ROW><id>14011032</id><snippet>from xml.sax import make_parser, handler

class extract_text(handler.ContentHandler):
    def characters(self,data):
        if data.strip():
            print data

parser = make_parser()
parser.setContentHandler(extract_text())
parser.feed(doc)
</snippet></ROW><ROW><id>14011032</id><snippet>HTMLParser</snippet></ROW><ROW><id>14011032</id><snippet>from HTMLParser import HTMLParser

class extract_text(HTMLParser):
    def handle_data(self,data):
        if data.strip():
            print data

parser = extract_text()
parser.feed(doc)
</snippet></ROW><ROW><id>14011047</id><snippet>Pyglet</snippet></ROW><ROW><id>14011047</id><snippet>update()</snippet></ROW><ROW><id>14011047</id><snippet>draw()</snippet></ROW><ROW><id>14011047</id><snippet>draw()</snippet></ROW><ROW><id>14011047</id><snippet>update()</snippet></ROW><ROW><id>14011047</id><snippet>update()</snippet></ROW><ROW><id>14011047</id><snippet>draw()</snippet></ROW><ROW><id>14011047</id><snippet>clock</snippet></ROW><ROW><id>14011047</id><snippet>pyglet</snippet></ROW><ROW><id>14011047</id><snippet>clock.schedule_interval(move_player, .5)
</snippet></ROW><ROW><id>14011062</id><snippet>header</snippet></ROW><ROW><id>14011062</id><snippet>body</snippet></ROW><ROW><id>14011062</id><snippet>header</snippet></ROW><ROW><id>14011062</id><snippet>body</snippet></ROW><ROW><id>14011062</id><snippet>struct</snippet></ROW><ROW><id>14011062</id><snippet>message</snippet></ROW><ROW><id>14011062</id><snippet>sys.getrefcount</snippet></ROW><ROW><id>14011062</id><snippet>header</snippet></ROW><ROW><id>14011062</id><snippet>body</snippet></ROW><ROW><id>14011062</id><snippet>message</snippet></ROW><ROW><id>14011062</id><snippet>message</snippet></ROW><ROW><id>14011062</id><snippet>%module test

%{
#include "test.h"
%}

%typemap(out) message_header * header %{
  // This expands to resultobj = SWIG_NewPointerObj(...) exactly as before:
  $result = SWIG_NewPointerObj(SWIG_as_voidptr($1), $1_descriptor, 0);
  // This sets a reference to the parent object inside the child
  PyObject_SetAttrString($result, "_parent", obj0);
%}

%include "test.h"
</snippet></ROW><ROW><id>14011062</id><snippet>z = y.header
z._parent = y
</snippet></ROW><ROW><id>14011062</id><snippet>y = test.large_message()
print(sys.getrefcount(y))
print(y.header)
z = [y.header]
print(sys.getrefcount(y))
z += [y.header]
print(sys.getrefcount(y))
</snippet></ROW><ROW><id>14011062</id><snippet>y</snippet></ROW><ROW><id>14011062</id><snippet>%apply</snippet></ROW><ROW><id>14011062</id><snippet>%module test

%{
#include "test.h"
%}

%typemap(out) SWIGTYPE * SUBOBJECT %{
  $result = SWIG_NewPointerObj(SWIG_as_voidptr($1), $1_descriptor, 0);
  PyObject_SetAttrString($result, "_parent", obj0);
  assert(obj0);
  // hello world
%}

%apply SWIGTYPE * SUBOBJECT { message_header * header };
%apply SWIGTYPE * SUBOBJECT { message_large_body * body };

%include "test.h"
</snippet></ROW><ROW><id>14011206</id><snippet>c.executemany(
      """INSERT INTO breakfast (name, spam, eggs, sausage, price)
      VALUES (%s, %s, %s, %s, %s)""",
      [
      ("Spam and Sausage Lover's Plate", 5, 1, 8, 7.95 ),
      ("Not So Much Spam Plate", 3, 2, 0, 3.95 ),
      ("Don't Wany ANY SPAM! Plate", 0, 4, 3, 5.95 )
      ] )
</snippet></ROW><ROW><id>14011206</id><snippet>c.executemany("insert into T (F1,F2) values (%s, %s)",
    [('a','b'),('c','d')])
</snippet></ROW><ROW><id>14011249</id><snippet>def heapsort(sqc):                                 
    def down_heap(sqc, k, n):                            
        parent = sqc[k]                                  

        while 2*k+1 &lt; n:                                 
            child = 2*k+1                                
            if child+1 &lt; n and sqc[child] &lt; sqc[child+1]:
                child += 1                               
            if parent &gt;= sqc[child]:                     
                break                                    
            sqc[k] = sqc[child]                          
            k = child                                    
        sqc[k] = parent                                  

    size = len(sqc)                                      

    for i in range(size/2-1, -1, -1):                    
        down_heap(sqc, i, size)                          

    for i in range(size-1, 0, -1):                       
        sqc[0], sqc[i] = sqc[i], sqc[0]                  
        down_heap(sqc, 0, i)                             
</snippet></ROW><ROW><id>14011249</id><snippet>def heapsort(sequence):                                                      
    sequence_length = len(sequence)                                          

    def swap_if_greater(parent_index, child_index):                          
        if sequence[parent_index] &lt; sequence[child_index]:                   
            sequence[parent_index], sequence[child_index] =\                 
                    sequence[child_index], sequence[parent_index]            

    def sift(parent_index, unsorted_length):                                 
        index_of_greater = lambda a, b: a if sequence[a] &gt; sequence[b] else b
        while parent_index*2+2 &lt; unsorted_length:                            
            left_child_index = parent_index*2+1                              
            right_child_index = parent_index*2+2                             

            greater_child_index = index_of_greater(left_child_index,         
                    right_child_index)                                       

            swap_if_greater(parent_index, greater_child_index)               

            parent_index = greater_child_index                               

    def heapify():                                                           
        for i in range((sequence_length/2)-1, -1, -1):                       
            sift(i, sequence_length)                                         

    def sort():                                                              
        count = sequence_length                                              
        while count &gt; 0:                                                     
            count -= 1                                                       
        swap_if_greater(count, 0)                                        
        sift(0, count)                                                   

    heapify()                                                                
    sort()                                                        
</snippet></ROW><ROW><id>14011249</id><snippet>def opt_heapsort(s):                               
    sl = len(s)                                    

    def swap(pi, ci):                              
        if s[pi] &lt; s[ci]:                          
            s[pi], s[ci] = s[ci], s[pi]            

    def sift(pi, unsorted):                        
        i_gt = lambda a, b: a if s[a] &gt; s[b] else b
        while pi*2+2 &lt; unsorted:                   
            gtci = i_gt(pi*2+1, pi*2+2)            
            swap(pi, gtci)                         
            pi = gtci                              
    # heapify                                      
    for i in range((sl/2)-1, -1, -1):              
        sift(i, sl)                                
    # sort                                         
    for i in range(sl-1, 0, -1):                   
        swap(i, 0)                                 
        sift(0, i)                                 
</snippet></ROW><ROW><id>14011439</id><snippet>os.spanwl</snippet></ROW><ROW><id>14011439</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>14011439</id><snippet>os.spanwnl</snippet></ROW><ROW><id>14011439</id><snippet>subprocess.Popen(['/usr/bin/dumpcap', '-i', 'eth0', '-f', 'udp port 53', 
                  '-w', '/tmp/dns.cap'])
</snippet></ROW><ROW><id>14011469</id><snippet>furniture</snippet></ROW><ROW><id>14011469</id><snippet>_</snippet></ROW><ROW><id>14011469</id><snippet>&gt;&gt;&gt; foo = object(); foo
&lt;object object at 0x7fd74cd390a0&gt;
&gt;&gt;&gt; foo = object(); foo
&lt;object object at 0x7fd74cd390b0&gt;
&gt;&gt;&gt; foo = object(); foo
&lt;object object at 0x7fd74cd390a0&gt;
&gt;&gt;&gt; foo = object(); foo
&lt;object object at 0x7fd74cd390b0&gt;
&gt;&gt;&gt; foo = object(); foo
&lt;object object at 0x7fd74cd390a0&gt;
</snippet></ROW><ROW><id>14011510</id><snippet>import gst

pipeline = gst.parse_launch("""
v4l2src ! decodebin ! ffmpegcolorspace ! pngenc ! filesink location="%s"
""" % sys.argv[-1])

pipeline.set_state(gst.STATE_PLAYING)
</snippet></ROW><ROW><id>14011554</id><snippet>row = table.rowAt(point.y())
</snippet></ROW><ROW><id>14011791</id><snippet>import networkx as nx
edgelist = [
    (1, 3, {'weight':5250}),
    (1, 4, {'weight': 74}),
    (1, 5, {'weight': 3659})]

G = nx.Graph(edgelist)
for a, b, dct in sorted(G.edges(data = True), key = lambda (a, b, dct): dct['weight']):
    print('{a} {b} {w}'.format(a = a, b = b, w = dct['weight']))
</snippet></ROW><ROW><id>14011791</id><snippet>1 4 74
1 5 3659
1 3 5250
</snippet></ROW><ROW><id>14011910</id><snippet>load data local infile</snippet></ROW><ROW><id>14011910</id><snippet>monte@oobun2:~$ mysql -h localhost -u monte -p monte --local-infile
Enter password: 

...

mysql&gt; LOAD DATA LOCAL INFILE 'pet.txt' INTO TABLE pet;
Query OK, 8 rows affected (0.04 sec)
Records: 8  Deleted: 0  Skipped: 0  Warnings: 0

mysql&gt; SELECT * FROM pet;
+----------+--------+---------+------+------------+------------+
| name     | owner  | species | sex  | birth      | death      |
+----------+--------+---------+------+------------+------------+
| Fluffy   | Harold | cat     | f    | 1993-02-04 | NULL       |
| Claws    | Gwen   | cat     | m    | 1994-03-17 | NULL       |
| Buffy    | Harold | dog     | f    | 1989-05-13 | NULL       |
| Fang     | Benny  | dog     | m    | 1990-08-27 | NULL       |
| Bowser   | Diane  | dog     | m    | 1979-08-31 | 1995-07-29 |
| Chirpy   | Gwen   | bird    | f    | 1998-09-11 | NULL       |
| Whistler | Gwen   | bird    | NULL | 1997-12-09 | NULL       |
| Slim     | Benny  | snake   | m    | 1996-04-29 | NULL       |
| Puffball | Diane  | hamster | f    | 1999-03-30 | NULL       |
+----------+--------+---------+------+------------+------------+
9 rows in set (0.00 sec)

mysql&gt;
</snippet></ROW><ROW><id>14011910</id><snippet>local-infile=1</snippet></ROW><ROW><id>14011920</id><snippet>after</snippet></ROW><ROW><id>14011920</id><snippet>def real_time():
    &lt;do something here&gt;
    self.after(16, real_time)
</snippet></ROW><ROW><id>14011920</id><snippet>real_time()
</snippet></ROW><ROW><id>14012003</id><snippet>s = socket.socket(socket.AF_INET,socket.SOCK_DGRAM)
hostName = #ip here
PORT = 9999
s.connect(hostName, Port)
s.setsockopt(socket.IPPROTO_IP, IN.IP_MTU_DISCOVER, IN.IP_PMTUDISC_DO)
try:
    s.send('#' * 1473)
except socket.error:
    print 'The message did not make it'
    option = getattr(IN, 'IP_MTU', 14)
    print 'MTU:', s.getsockopt(socket.IPPROTO_IP, option)
else:
    print 'The big message was sent! Your network supports really big packets!'
</snippet></ROW><ROW><id>14012146</id><snippet>def prompt_age(min=11, max=100):
    while True:
        try:
            age = int(raw_input('ENTER YOUR AGE: '))
        except ValueError:
            print 'Please enter a valid number'
            continue
        if not min &lt;= age &lt;= max:
            print 'You are too young/old'
            continue
        return age
</snippet></ROW><ROW><id>14012166</id><snippet>var_a</snippet></ROW><ROW><id>14012166</id><snippet>def ChangeDown():
    global var_a
    print "Changing Down : " , var_a
    var_a=["0", "1", "2", "3", "4", "5", "6", "7", "8", "9" ]
    print var_a , "\n================="
</snippet></ROW><ROW><id>14012204</id><snippet>for x in mylist:
    # do something to x
</snippet></ROW><ROW><id>14012204</id><snippet>x</snippet></ROW><ROW><id>14012204</id><snippet>mylist</snippet></ROW><ROW><id>14012204</id><snippet>x</snippet></ROW><ROW><id>14012204</id><snippet>mylist</snippet></ROW><ROW><id>14012204</id><snippet>for x in xrange(len(list)):
    #do something to list[x]
</snippet></ROW><ROW><id>14012204</id><snippet>for i, x in enumerate(mylist):
    # now you can work with x and/or change mylist[i] if you need to
</snippet></ROW><ROW><id>14012204</id><snippet>newlist = [foo(item) for item in mylist if bar(item)]
</snippet></ROW><ROW><id>14012204</id><snippet>for string in one_list:
    if string in other_list:
        # do something
</snippet></ROW><ROW><id>14012210</id><snippet>replace('\t', ',')</snippet></ROW><ROW><id>14012210</id><snippet>from StringIO import StringIO # py3k: from io import StringIO
import csv
with open('./file') as fh:
    io = StringIO(fh.read().replace('\t', ','))

reader = csv.reader(io)

for row in reader:
    print(row)
</snippet></ROW><ROW><id>14012430</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>14012430</id><snippet># at start add this
import os, sys

abspath = lambda *p: os.path.abspath(os.path.join(*p))

PROJECT_ROOT = abspath(os.path.dirname(__file__))
sys.path.insert(0, PROJECT_ROOT)

TEMPLATE_DIRS = (
    abspath(PROJECT_ROOT, 'templates'), # this will point to mysite/mysite/templates
)
</snippet></ROW><ROW><id>14012430</id><snippet>mysite &gt; mysite &gt; templates</snippet></ROW><ROW><id>14012430</id><snippet>return render(request, "templates/index.html")</snippet></ROW><ROW><id>14012430</id><snippet>return render(request, "index.html")</snippet></ROW><ROW><id>14012430</id><snippet>mysite/
      mysite/
          __init__.py
          settings.py
          urls.py
          wsgi.py

          templates/
              index.html
          static/
              css/
              js/
          app/
               __init__.py
               admin.py
               models.py
               tests.py
               urls.py
               views.py
</snippet></ROW><ROW><id>14012486</id><snippet>findall</snippet></ROW><ROW><id>14012486</id><snippet>found = re.findall(img_url_regex, data)
if not found: # the list is empty
    sys.stderr.write("Error finding Regex \r\n")
else:
    for imgurl in found:
        print 'Found image:', imgurl
        # whatever else you want to do with the URL.
</snippet></ROW><ROW><id>14012486</id><snippet>In [3]: $foo = 12
  File "&lt;ipython-input-3-38be62380e9f&gt;", line 1
    $foo = 12
    ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>14012486</id><snippet>sub()</snippet></ROW><ROW><id>14012486</id><snippet>MatchObject</snippet></ROW><ROW><id>14012486</id><snippet>&lt;img alt='pic' class="align-left" src="static/test.jpg" /&gt;</snippet></ROW><ROW><id>14012486</id><snippet>&lt;img alt='pic' class="align-left" src="static/images/test.jpg" /&gt;</snippet></ROW><ROW><id>14012486</id><snippet>with open(filename, 'r') as f:
    data = f.read()
# fix image links
img = re.compile(r'src="[\./]*static/([^"]*)"')
data = img.sub(lambda m: (r'src="' + prefix + 'static/images/' + 
                          m.group(1) + r'"'), data)
with open(filename, 'w+') as of:
    of.write(data)
</snippet></ROW><ROW><id>14012545</id><snippet>In [28]: import statsmodels.formula.api as sm
In [29]: import pandas as pd
In [30]: import numpy as np
In [31]: import patsy
In [32]: url = "http://vincentarelbundock.github.com/Rdatasets/csv/HistData/Guerry.csv"
In [33]: df = pd.read_csv(url)
In [34]: w = np.ones(df.shape[0])
In [35]: f = 'Lottery ~ Wealth : C(Region)'
In [36]: y,X = patsy.dmatrices(f, df, return_type='dataframe')
In [37]: X.head()
Out[37]: 
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 5 entries, 0 to 4
Data columns:
Intercept                5  non-null values
Wealth:C(Region)[nan]    5  non-null values
Wealth:C(Region)[C]      5  non-null values
Wealth:C(Region)[E]      5  non-null values
Wealth:C(Region)[N]      5  non-null values
Wealth:C(Region)[S]      5  non-null values
Wealth:C(Region)[W]      5  non-null values
dtypes: float64(7)

In [38]: X = X.ix[:,[2,3,4]]
In [39]: X.head()
Out[39]: 
   Wealth:C(Region)[C]  Wealth:C(Region)[E]  Wealth:C(Region)[N]
0                    0                   73                    0
1                    0                    0                   22
2                   61                    0                    0
3                    0                   76                    0
4                    0                   83                    0

In [40]: mod = sm.WLS(y, X, 1./w).fit()
In [41]: mod.params
Out[41]: 
Wealth:C(Region)[C]    1.084430
Wealth:C(Region)[E]    0.650396
Wealth:C(Region)[N]    1.021582
</snippet></ROW><ROW><id>14012720</id><snippet>select</snippet></ROW><ROW><id>14012720</id><snippet>index</snippet></ROW><ROW><id>14012720</id><snippet>&gt;&gt;&gt; nb.select()
'.4299842480.4300630784'
&gt;&gt;&gt; nb.index(nb.select())
2
</snippet></ROW><ROW><id>14012720</id><snippet>tab</snippet></ROW><ROW><id>14012720</id><snippet>&gt;&gt;&gt; nb.tab(nb.select(), "text")
'mytab2'
</snippet></ROW><ROW><id>14013274</id><snippet>A</snippet></ROW><ROW><id>14013274</id><snippet>sys.argv</snippet></ROW><ROW><id>14013274</id><snippet>__main__</snippet></ROW><ROW><id>14013274</id><snippet>sys.argv</snippet></ROW><ROW><id>14013274</id><snippet>sys.argv[1:] = ['arg1', 'arg2']
</snippet></ROW><ROW><id>14013274</id><snippet>A</snippet></ROW><ROW><id>14013274</id><snippet>A</snippet></ROW><ROW><id>14013274</id><snippet>__main__</snippet></ROW><ROW><id>14013274</id><snippet>def main(*args):
    # main code for module

if __name__ == '__main__`:
    import sys
    main(*sys.argv[1:])
</snippet></ROW><ROW><id>14013274</id><snippet>A</snippet></ROW><ROW><id>14013274</id><snippet>main()</snippet></ROW><ROW><id>14013274</id><snippet>import A
A.main('arg1', 'arg2')
</snippet></ROW><ROW><id>14013274</id><snippet>A</snippet></ROW><ROW><id>14013274</id><snippet>__main__</snippet></ROW><ROW><id>14013274</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>14013430</id><snippet>import dbf

some_table = dbf.Table('/path/to/table.dbf')  # table is closed
some_table.open()
index = some_table.create_index(record_indexer)
.
.
.
records = index.search(match=(some_value,))   # returns a dbf.List of matching records
</snippet></ROW><ROW><id>14013430</id><snippet>record_indexer</snippet></ROW><ROW><id>14013430</id><snippet>lambda rec: rec.desired_field
</snippet></ROW><ROW><id>14013430</id><snippet>def record_indexer(record):
    if record.that_field == 'bad value':
        return dbf.DoNotIndex             # record is ignored
    return record.this_field, record.other
</snippet></ROW><ROW><id>14013498</id><snippet>CreateStatusBar()</snippet></ROW><ROW><id>14013498</id><snippet>panel = wx.Panel(self,size=self.GetClientSize())
#self.CreateStatusBar()
</snippet></ROW><ROW><id>14013498</id><snippet># at the end of __init__
panel.SetSize(0,0)
</snippet></ROW><ROW><id>14013498</id><snippet>SetSize()</snippet></ROW><ROW><id>14013498</id><snippet>frame.Show()</snippet></ROW><ROW><id>14013498</id><snippet>wx 2.8</snippet></ROW><ROW><id>14013498</id><snippet>CreateToolBar()</snippet></ROW><ROW><id>14013498</id><snippet>wx 2.9.4</snippet></ROW><ROW><id>14013498</id><snippet>panel.SetSizer(sizer)
panel.Layout()
</snippet></ROW><ROW><id>14013610</id><snippet>Easy ID3</snippet></ROW><ROW><id>14013610</id><snippet>&gt;&gt;&gt; from glob import glob
&gt;&gt;&gt; from mutagen.easyid3 import EasyID3
&gt;&gt;&gt; for filename in glob('/home/jon/Downloads/*.mp3'):
    mp3info = EasyID3(filename)
    print mp3info.items()


[('artist', [u"James O'Brien's Mystery Hour"]), ('title', [u"James O'Brien's Mystery Hour - 7 Dec 12"])]
</snippet></ROW><ROW><id>14013685</id><snippet>import psutil

pid = 14551

def rss_MB(pid):
    proc = psutil.Process(pid)
    mem_bytes = proc.get_memory_info().rss
    return( float(mem_bytes)/1048576 )

mem_MB = rss_MB(pid)
print "pid: %d has an rss of %f MB" % (pid, mem_MB)
</snippet></ROW><ROW><id>14013783</id><snippet>def disallow_class(*klass_names):
    def function_handler(fn):
        def decorated(self, *args, **kwargs):
            if self.__class__.__name__ in klass_names:
                print "access denied to class: %s" % self.__class__.__name__
                return None
            return fn(self, *args, **kwargs)
        return decorated
    return function_handler


class MainClass(object):

    @disallow_class('DisallowedClass', 'AnotherDisallowedClass')
    def my_method(self, *args, **kwargs):
        print "my_method running!! %s" % self


class DisallowedClass(MainClass): pass

class AnotherDisallowedClass(MainClass): pass

class AllowedClass(MainClass): pass


if __name__ == "__main__":
    x = DisallowedClass()
    y = AnotherDisallowedClass()
    z = AllowedClass()
    x.my_method()
    y.my_method()
    z.my_method()
</snippet></ROW><ROW><id>14013783</id><snippet>access denied to class: DisallowedClass
access denied to class: AnotherDisallowedClass
my_method running!! &lt;__main__.AllowedClass object at 0x7f2b7105ad50&gt;
</snippet></ROW><ROW><id>14013795</id><snippet>itemSize, itemValue = line.split()
</snippet></ROW><ROW><id>14013795</id><snippet>itemSize</snippet></ROW><ROW><id>14013795</id><snippet>items</snippet></ROW><ROW><id>14013795</id><snippet>int</snippet></ROW><ROW><id>14013795</id><snippet>with open('file') as fin:
    knapsackSize, nItems = next(fin).split() # take first line
    for other_lines in fin: # everything after
        pass # do stuff for rest of file
</snippet></ROW><ROW><id>14013795</id><snippet>with open('file') as fin:
    lines = (map(int, line.split()) for line in fin)
    knapsackSize, nItems = next(lines)
    items = list(lines)
</snippet></ROW><ROW><id>14013795</id><snippet>dict</snippet></ROW><ROW><id>14013795</id><snippet>namedtuple</snippet></ROW><ROW><id>14013795</id><snippet>operator</snippet></ROW><ROW><id>14013795</id><snippet>itemSize = operator.itemgetter(0)
</snippet></ROW><ROW><id>14013906</id><snippet>SES = NONE 
</snippet></ROW><ROW><id>14013906</id><snippet>global SES
    if not SES:
</snippet></ROW><ROW><id>14014056</id><snippet>open(phile, "rt")</snippet></ROW><ROW><id>14014056</id><snippet>open(phile, "rb")</snippet></ROW><ROW><id>14014056</id><snippet>for line_number, each in enumerate(lines):
    print line_number, each
</snippet></ROW><ROW><id>14014284</id><snippet>class Beta(Alpha):
    def fie(self):
        super(Beta, self).fie()
</snippet></ROW><ROW><id>14014284</id><snippet>enter B.__init__()
call super on B and call __init__ on the proxy object
enter A.__init__()
call super on self.__class__ and call __init__ on the proxy object
</snippet></ROW><ROW><id>14014284</id><snippet>type(self)</snippet></ROW><ROW><id>14014352</id><snippet>__subclasses__</snippet></ROW><ROW><id>14014352</id><snippet>class Alpha(object):
    @classmethod
    def get_derivatives(cls):
        return cls.__subclasses__() 

class Beta(Alpha):
    pass

print(Alpha.get_derivatives())
print(Beta.get_derivatives())
</snippet></ROW><ROW><id>14014352</id><snippet>[&lt;class '__main__.Beta'&gt;]
[]
</snippet></ROW><ROW><id>14014461</id><snippet># a.py
a = 1 # (1) is module scope

class A:
    a = 2 # (2) is class scope

    def __init__(self, a=3): # (3) is function scope
        self.a = a           # (4) self.a is object scope

    def same_as_class(self):
        return self.a == A.a # compare object- and class-scope variables

    def same_as_module(self):
        return self.a == a   # compare object- and module-scope variables
</snippet></ROW><ROW><id>14014461</id><snippet>a</snippet></ROW><ROW><id>14014461</id><snippet>&gt;&gt;&gt; import a
&gt;&gt;&gt; a.a
1 # module scope (1)
&gt;&gt;&gt; a.A.a
2 # class scope (2)
&gt;&gt;&gt; obj1 = a.A() # note the argument defaults to 3 (3)
&gt;&gt;&gt; obj1.a       # and this value is bound to the object-scope variable (4)
3
&gt;&gt;&gt; obj.same_as_class()
False             # compare the object and class values (3 != 2)

&gt;&gt;&gt; obj2 = a.A(2) # now create a new object, giving an explicit value for (3)
&gt;&gt;&gt; obj2.same_as_class()
True
</snippet></ROW><ROW><id>14014461</id><snippet>&gt;&gt;&gt; obj1.same_as_module()
False
&gt;&gt;&gt; obj1.a = 1
&gt;&gt;&gt; obj1.same_as_module()
True
</snippet></ROW><ROW><id>14014461</id><snippet>z.py</snippet></ROW><ROW><id>14014461</id><snippet>import a
n = a.Names()
d.userNames()
d = n.name
print d
</snippet></ROW><ROW><id>14014461</id><snippet>a.Name</snippet></ROW><ROW><id>14014461</id><snippet>n</snippet></ROW><ROW><id>14014461</id><snippet>obj1.a</snippet></ROW><ROW><id>14014461</id><snippet>obj1</snippet></ROW><ROW><id>14014823</id><snippet>__init__.py</snippet></ROW><ROW><id>14014823</id><snippet>mymodule</snippet></ROW><ROW><id>14014823</id><snippet>__init__.py</snippet></ROW><ROW><id>14014823</id><snippet>__init__.py</snippet></ROW><ROW><id>14014823</id><snippet>__all__</snippet></ROW><ROW><id>14014823</id><snippet>Libraries</snippet></ROW><ROW><id>14014823</id><snippet>Classpath</snippet></ROW><ROW><id>14014823</id><snippet>D:\dev\lib</snippet></ROW><ROW><id>14014823</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14015356</id><snippet>            yield line
</snippet></ROW><ROW><id>14015356</id><snippet>run()</snippet></ROW><ROW><id>14015356</id><snippet>yield</snippet></ROW><ROW><id>14015356</id><snippet>next()</snippet></ROW><ROW><id>14015356</id><snippet>Python 2.7.2 (default, Jun 20 2012, 16:23:33) 
[GCC 4.2.1 Compatible Apple Clang 4.0 (tags/Apple/clang-418.0.60)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def fun():
...     print 'Starting'
...     for i in range(10):
...             yield i
... 
&gt;&gt;&gt; fun()
&lt;generator object fun at 0x10678c460&gt;
&gt;&gt;&gt; _.next()
Starting
0
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14015368</id><snippet>soup = BeautifulSoup(doc)
table = soup.find('table', {'class':'thisTable'}) 
for a in table.findAll('a'):
    print a.text
</snippet></ROW><ROW><id>14015370</id><snippet>&gt;&gt;&gt; from itertools import *
</snippet></ROW><ROW><id>14015370</id><snippet>None</snippet></ROW><ROW><id>14015370</id><snippet>&gt;&gt;&gt; list(chain(*izip_longest('abcdef', '12345', '#!$')))
['a', '1', '#', 'b', '2', '!', 'c', '3', '$', 'd', '4', None, 'e', '5', None, 'f', None, None]
</snippet></ROW><ROW><id>14015370</id><snippet>None</snippet></ROW><ROW><id>14015370</id><snippet>&gt;&gt;&gt; filter(lambda x: x is not None, chain(*izip_longest('abcdef', '12345', '#!$')))
['a', '1', '#', 'b', '2', '!', 'c', '3', '$', 'd', '4', 'e', '5', 'f']
</snippet></ROW><ROW><id>14015370</id><snippet>None</snippet></ROW><ROW><id>14015370</id><snippet>None</snippet></ROW><ROW><id>14015370</id><snippet>def interleave(*iterables):
    null = object()
    return ifilter(lambda x: x is not null, chain(*izip_longest(*iterables, fillvalue=null)))
</snippet></ROW><ROW><id>14015413</id><snippet>X[ all(X != '',axis=1) ].astype(float)
</snippet></ROW><ROW><id>14015413</id><snippet>X !=</snippet></ROW><ROW><id>14015413</id><snippet>X =</snippet></ROW><ROW><id>14015413</id><snippet>def canbefloat(x):
    try:
        float(x)
    except:
        return False
    else:
        return True
ucanbefloat = np.frompyfunc( canbefloat, 1, 1 )
X[ all( ucanbefloat(X.astype(object)), axis=1 ).astype(bool) ].astype(float)
</snippet></ROW><ROW><id>14015611</id><snippet>class Expando(object):
    pass

ex = Expando()
ex.foo = 17
ex.bar = "Hello"
</snippet></ROW><ROW><id>14015655</id><snippet>metadata.create_all(bind=engine)</snippet></ROW><ROW><id>14015670</id><snippet>H=nx.connected_component_subgraphs(G)
</snippet></ROW><ROW><id>14015750</id><snippet>remove_from_start = ["http://", "https://", "ftp://"]
for s in remove_from_start:
    if site.startswith(s):
        site = site[len(s):]
        break
</snippet></ROW><ROW><id>14015750</id><snippet>import re
regex = '^(https?|ftp)://'
site = re.sub(regex, '', site)
</snippet></ROW><ROW><id>14015916</id><snippet>def get_account_data(account):
    fields = serializers.serialize('python', [account, ])[0]['fields']
    return {field: str(fields[field]) for field in fields}
</snippet></ROW><ROW><id>14015916</id><snippet>datetime.date(2012, 12, 23)</snippet></ROW><ROW><id>14015983</id><snippet>__init__</snippet></ROW><ROW><id>14016269</id><snippet>show()</snippet></ROW><ROW><id>14016269</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sip
sip.setapi('QString', 2)
sip.setapi('QVariant', 2)

from PyQt4.QtCore import *
from PyQt4.QtGui import *

class testDialogs(QWidget):
    def __init__(self, parent=None):
        super(testDialogs, self).__init__(parent)

        self.verticalLayout = QVBoxLayout(self)

        self.pushButton = QPushButton(self)
        self.pushButton.setText("Open a Dialog")

        self.pushButton1 = QPushButton(self)
        self.pushButton1.setText("Add a Text Edit")

        self.plainTextEdit = QPlainTextEdit(self)
        self.plainTextEdit.appendPlainText("This is a Widget")

        self.verticalLayout.addWidget(self.pushButton)
        self.verticalLayout.addWidget(self.pushButton1)
        self.verticalLayout.addWidget(self.plainTextEdit)

        self.pushButton.clicked.connect(self.on_pushButton_clicked)
        self.pushButton1.clicked.connect(self.on_pushButton1_clicked)

    @pyqtSlot()
    def on_pushButton_clicked(self):
        dialog = QDialog(self)
        verticalLayout = QVBoxLayout(dialog)

        plainTextEdit = QPlainTextEdit(dialog)
        plainTextEdit.appendPlainText("This is a Dialog")

        buttonBox = QDialogButtonBox(dialog)
        buttonBox.setOrientation(Qt.Horizontal)
        buttonBox.setStandardButtons(QDialogButtonBox.Cancel|QDialogButtonBox.Ok)
        buttonBox.setObjectName("buttonBox")

        verticalLayout.addWidget(plainTextEdit)
        verticalLayout.addWidget(buttonBox)

        buttonBox.accepted.connect(dialog.close)
        buttonBox.rejected.connect(dialog.close)
        dialog.show()

    @pyqtSlot()
    def on_pushButton1_clicked(self):
        plainTextEdit = QPlainTextEdit(self)
        plainTextEdit.appendPlainText("This is another Text Edit")

        self.verticalLayout.addWidget(plainTextEdit)
        plainTextEdit.show()


if __name__ == "__main__":
    import  sys

    app = QApplication(sys.argv)
    main = testDialogs()
    main.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14016295</id><snippet>\d+\.\d+(?=\D*$)</snippet></ROW><ROW><id>14016360</id><snippet># Send your list of active slugs to the template

return render(request, 'category.html', {
    'active_filters': active,
    'inactive_filters': inactive,
    'slugs': slugs,
})
</snippet></ROW><ROW><id>14016360</id><snippet>import copy

from django import template

register = template.Library()


@register.filter(name='remove_filter')
def remove_filter(category, slugs): 
    copied_slugs = copy.copy(slugs)
    slug = category.slug
    if slug in copied_slugs:
        copied_slugs.remove(slug)
    return '/'.join(copied_slugs)
</snippet></ROW><ROW><id>14016360</id><snippet>{% for object in active_filters %}
&lt;li&gt;
  &lt;a href="{{ object|remove_filter:slugs }}"&gt;&lt;i class="icon-remove"&gt;&lt;/i&gt;&lt;/a&gt;{{ object }}
&lt;/li&gt;
{% endfor %}
</snippet></ROW><ROW><id>14016363</id><snippet>file.write()</snippet></ROW><ROW><id>14016363</id><snippet>from cProfile import Profile
from pstats import Stats
prof = Profile()
prof.disable()

file = open('cart_output.txt', 'wt')

def cart(n, seq):
    import itertools
    b = 8
    while b &lt; n:
        n = n - 1
        for p in itertools.product(seq, repeat=n):
            file.write(''.join(p))
            file.write('\n')

prof.enable()
cart(10, 'abc')
prof.disable()

prof.dump_stats('cart.stats')
with open('cart_stats.txt', 'wt') as output:
    stats = Stats('cart.stats', stream=output)
    stats.sort_stats('cumulative', 'time')
    stats.print_stats()

file.close()
print 'done'
</snippet></ROW><ROW><id>14016363</id><snippet>file.write()</snippet></ROW><ROW><id>14016363</id><snippet>open()</snippet></ROW><ROW><id>14016363</id><snippet>StringIO</snippet></ROW><ROW><id>14016363</id><snippet>def cart(n, seq):
    import itertools
    b = 8
    write = file.write  # speed up lookup of method
    while b &lt; n:
        n = n - 1
        for p in itertools.product(seq, repeat=n):
            write(''.join(p)+'\n')  # only call it once in loop
</snippet></ROW><ROW><id>14016363</id><snippet>file.write()</snippet></ROW><ROW><id>14016363</id><snippet>StringIO.StringIO</snippet></ROW><ROW><id>14016363</id><snippet>cStringIO.StringIO</snippet></ROW><ROW><id>14016363</id><snippet>file = open('cart_output.txt', 'wt')

def cart(n, seq):
    from itertools import product
    buflist = []
    append = buflist.append
    b = 8
    while b &lt; n:
        n = n - 1
        for p in product(seq, repeat=n):
            append(''.join(p))
    file.write('\n'.join(buflist)+'\n')

file.close()
</snippet></ROW><ROW><id>14016376</id><snippet>IF @@TRANCOUNT &gt; 0
   ROLLBACK TRANSACTION;
</snippet></ROW><ROW><id>14016376</id><snippet>IF @@TRANCOUNT &gt; 0
   COMMIT TRANSACTION;
</snippet></ROW><ROW><id>14016453</id><snippet>from __future__ import division
</snippet></ROW><ROW><id>14016472</id><snippet>urlparse.parse_qs</snippet></ROW><ROW><id>14016472</id><snippet>import urlparse
⋮
data = urlparse.parse_qs(message)
</snippet></ROW><ROW><id>14016472</id><snippet>data</snippet></ROW><ROW><id>14016472</id><snippet>urllib.parse</snippet></ROW><ROW><id>14016472</id><snippet>urlparse</snippet></ROW><ROW><id>14016590</id><snippet>df</snippet></ROW><ROW><id>14016590</id><snippet>import numpy as np
index = df['b'].index[df['b'].apply(np.isnan)]
</snippet></ROW><ROW><id>14016590</id><snippet>MultiIndex</snippet></ROW><ROW><id>14016590</id><snippet>df</snippet></ROW><ROW><id>14016590</id><snippet>df['a'].ix[index[0]]
&gt;&gt;&gt; 1.452354
</snippet></ROW><ROW><id>14016590</id><snippet>df_index = df.index.values.tolist()
[df_index.index(i) for i in index]
&gt;&gt;&gt; [3, 6]
</snippet></ROW><ROW><id>14016662</id><snippet>items = sorted(d.items())

dict(enumerate([' '.join(b for a, b in items[:3])] + [b for a, b in items[3:]]))
</snippet></ROW><ROW><id>14016704</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import sip
sip.setapi('QString', 2)
sip.setapi('QVariant', 2)

from PyQt4.QtCore import *
from PyQt4.QtGui import *

class testShadow(QWidget):
    def __init__(self, parent=None):
        super(testShadow, self).__init__(parent)

        self.resize(94, 35)
        self.verticalLayout = QVBoxLayout(self)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QLabel(self)
        self.label.setText("Text Label")

        self.shadow = QGraphicsDropShadowEffect(self)
        self.shadow.setBlurRadius(5)
        self.label.setGraphicsEffect(self.shadow)

        self.verticalLayout.addWidget(self.label)

if __name__ == "__main__":
    import  sys

    app = QApplication(sys.argv)
    main = testShadow()
    main.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14016766</id><snippet>str()</snippet></ROW><ROW><id>14016766</id><snippet>In [206]: country = [u'USA']

In [207]: country[0]=str(country[0])

In [208]: country
Out[208]: ['USA']
</snippet></ROW><ROW><id>14016766</id><snippet>In [217]: country = [u'USA']

In [218]: country=str(country[0])

In [219]: country
Out[219]: 'USA'
</snippet></ROW><ROW><id>14016856</id><snippet>__main__</snippet></ROW><ROW><id>14016856</id><snippet>import sys

def program(*args):
    # do whatever
    pass

if __name__ == "__main__":
    try:
        arg1 = sys.argv[1]
    except IndexError:
        print "Usage: myprogram.py &lt;arg1&gt;"
        sys.exit(1)

    # start the program
    program(arg1)
</snippet></ROW><ROW><id>14016990</id><snippet>SELECT MAX(CASE WHEN year = 2005 THEN Symbol ELSE NULL END) `2005`,
       MAX(CASE WHEN year = 2006 THEN Symbol ELSE NULL END) `2006`,
       MAX(CASE WHEN year = 2007 THEN Symbol ELSE NULL END) `2007`
FROM tableName
GROUP BY Symbol
</snippet></ROW><ROW><id>14016990</id><snippet>SET @sql = NULL;
SELECT
  GROUP_CONCAT(DISTINCT
    CONCAT(
      'MAX(CASE WHEN year = ',
      year,
      ' THEN Symbol ELSE NULL end) AS ',
      CONCAT('`', year, '`')
    )
  ) INTO @sql
FROM TableName;

SET @sql = CONCAT('SELECT  ', @sql, ' 
                   FROM tableName 
                   GROUP BY Symbol');

PREPARE stmt FROM @sql;
EXECUTE stmt;
DEALLOCATE PREPARE stmt;
</snippet></ROW><ROW><id>14016990</id><snippet>null</snippet></ROW><ROW><id>14016990</id><snippet>COALESCE</snippet></ROW><ROW><id>14017104</id><snippet>{% load static from staticfiles %}</snippet></ROW><ROW><id>14017104</id><snippet>&lt;link href="{% static 'bootstrap/css/bootstrap.css' %}" rel="stylesheet" type="text/css"&gt;</snippet></ROW><ROW><id>14017104</id><snippet>STATIC_ROOT = os.path.join(os.path.abspath(
    os.path.join(PROJECT_ROOT, 'myproj_public', 'static')), '')

STATIC_URL = '/static/'
</snippet></ROW><ROW><id>14017179</id><snippet>socket.py</snippet></ROW><ROW><id>14017179</id><snippet>readline</snippet></ROW><ROW><id>14017179</id><snippet>create_connection</snippet></ROW><ROW><id>14017179</id><snippet>readline</snippet></ROW><ROW><id>14017179</id><snippet>posixpath.py</snippet></ROW><ROW><id>14017179</id><snippet>islink</snippet></ROW><ROW><id>14017179</id><snippet>create_connection</snippet></ROW><ROW><id>14017179</id><snippet>readline</snippet></ROW><ROW><id>14017179</id><snippet>readline</snippet></ROW><ROW><id>14017179</id><snippet>islink</snippet></ROW><ROW><id>14017179</id><snippet>readline</snippet></ROW><ROW><id>14017213</id><snippet>class_register[self.__class__.__name__] = self.__class__
</snippet></ROW><ROW><id>14017213</id><snippet>def register(cls):
    class_register[cls.__name__] = cls

class Foo(object):
    # blah blah

register(Foo)
</snippet></ROW><ROW><id>14017213</id><snippet>def register(cls):
    class_register[cls.__name__] = cls
    return cls

@register
class Foo(object):
    # blah blah
</snippet></ROW><ROW><id>14017214</id><snippet>python2.7 manage.py help</snippet></ROW><ROW><id>14017218</id><snippet>self.s_text=gtk.SelectionData.get_text
</snippet></ROW><ROW><id>14017218</id><snippet>get_text</snippet></ROW><ROW><id>14017218</id><snippet>self.s_text</snippet></ROW><ROW><id>14017218</id><snippet>"Selected Text is : %s"  % self.s_text</snippet></ROW><ROW><id>14017218</id><snippet>self.s_text=gtk.SelectionData.get_text()
</snippet></ROW><ROW><id>14017218</id><snippet>#!/usr/bin/env python

import pygtk
pygtk.require('2.0')
import gtk


class MyApp (object):
    def __init__(self):
        self.window=gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.connect("delete_event", gtk.main_quit )
        self.entry = gtk.Entry()
        self.window.selection_convert("PRIMARY", "STRING")
        self.window.connect("selection_received", self.selection_received)
        self.window.add(self.entry)
        self.window.show_all()
    # Signal handler called when the selections owner returns the data
    def selection_received(self, widget, selection_data, data):
        print 'selection_data.type=%r'%selection_data.type
        # Make sure we got the data in the expected form
        if str(selection_data.type) == "STRING":
            self.entry.set_text("Selected Text is : %s"  % selection_data.get_text())

        elif str(selection_data.type) == "ATOM":
            # Print out the target list we received
            targets = selection_data.get_targets()
            for target in targets:
                name = str(target)
                if name != None:
                    self.entry.set_text("%s" % name)
                else:
                    self.entry.set_text("(bad target)")
        else:
            self.entry.set_text("Selection was not returned as \"STRING\" or \"ATOM\"!")

        return False
    def main(self):
        gtk.main()

app=MyApp()
app.main()
</snippet></ROW><ROW><id>14017356</id><snippet>rsync</snippet></ROW><ROW><id>14017356</id><snippet>Popen</snippet></ROW><ROW><id>14017356</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>14017358</id><snippet>closeEvent</snippet></ROW><ROW><id>14017358</id><snippet>destroyed</snippet></ROW><ROW><id>14017358</id><snippet>closeEvent</snippet></ROW><ROW><id>14017358</id><snippet>from PyQt4 import QtCore, QtGui


class MainWidget(QtGui.QDialog):

    # Option #3 - Custom signal
    closing = QtCore.pyqtSignal()

    def __init__(self):
        super(MainWidget, self).__init__()

        self.layout = QtGui.QVBoxLayout(self)

        for i in xrange(5):
            label = ResourceLabel('label%02d' % i)
            self.layout.addWidget(label)

            # option #2
            # Let a signal trigger the cleanup on the children
            # self.destroyed.connect(label.close)

            # option #3
            # Use a custom signal emitted from the closeEvent,
            # wired directly to the cleanup slot on the object
            # self.closing.connect(label.close)

    def closeEvent(self, event):
        print "Closing main window"

        # option #1
        # if you want to trigger a cleanup specifically when
        # this widget is closed, as opposed to destroyed
        for i in xrange(self.layout.count()):
            item = self.layout.itemAt(i)
            widget = item.widget()       
            if widget:
                try:
                    widget.close()
                except:
                    pass

        # Or Option #3 - emit a custom signal
        self.closing.emit()

        super(MainWidget, self).closeEvent(event)


class ResourceLabel(QtGui.QLabel):

    def __init__(self, *args, **kwargs):
        super(ResourceLabel, self).__init__(*args, **kwargs)
        self.aResource = "FOO"

    def close(self):
        print "Cleaning up", self
        self.aResource = None


if __name__ == "__main__":
    app = QtGui.QApplication([])
    win = MainWidget()
    win.show()
    win.raise_()
    app.exec_()
</snippet></ROW><ROW><id>14017358</id><snippet>destroyed</snippet></ROW><ROW><id>14017423</id><snippet>{{ form.subscription_year_plan }}</snippet></ROW><ROW><id>14017440</id><snippet>mmap</snippet></ROW><ROW><id>14017440</id><snippet>fileno</snippet></ROW><ROW><id>14017440</id><snippet>length</snippet></ROW><ROW><id>14017440</id><snippet>mmap</snippet></ROW><ROW><id>14017440</id><snippet>tagname</snippet></ROW><ROW><id>14017440</id><snippet>prot</snippet></ROW><ROW><id>14017440</id><snippet>MAP_PRIVATE</snippet></ROW><ROW><id>14017440</id><snippet>MAP_SHARED</snippet></ROW><ROW><id>14017440</id><snippet>MAP_SHARED</snippet></ROW><ROW><id>14017468</id><snippet>with</snippet></ROW><ROW><id>14017468</id><snippet>{% with author.photo_set.all as photos %}
    {% if photos %}
    &lt;h2&gt;...&lt;/h2&gt;
    &lt;div style="clear: both;"&gt;&lt;/div&gt;
    &lt;div class="author_pic"&gt;
        {% for photo in photos %}
            &lt;img src="..." /&gt;
        {% endfor %}
        &lt;div style="clear: both;"&gt;&lt;/div&gt;
    &lt;/div&gt;
    &lt;div style="clear: both;"&gt;&lt;/div&gt;
    {% endif %}
{% endwith %}
</snippet></ROW><ROW><id>14017468</id><snippet>empty</snippet></ROW><ROW><id>14017468</id><snippet>&lt;ul&gt;
{% for athlete in athlete_list %}
    &lt;li&gt;{{ athlete.name }}&lt;/li&gt;
{% empty %}
    &lt;li&gt;Sorry, no athlete in this list!&lt;/li&gt;
{% endfor %}
&lt;ul&gt;
</snippet></ROW><ROW><id>14017565</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack('!Q', 123)
'\x00\x00\x00\x00\x00\x00\x00{'
</snippet></ROW><ROW><id>14017565</id><snippet>!</snippet></ROW><ROW><id>14017565</id><snippet>Q</snippet></ROW><ROW><id>14017798</id><snippet>prime = 10000</snippet></ROW><ROW><id>14017798</id><snippet>sqrt(x)</snippet></ROW><ROW><id>14017798</id><snippet>primes = [2] + filter(lambda p: all(p % n for n in range(3, int(sqrt(p)) + 1, 2)), range(3, max, 2))
</snippet></ROW><ROW><id>14018199</id><snippet>bjam</snippet></ROW><ROW><id>14018199</id><snippet>bjam</snippet></ROW><ROW><id>14018199</id><snippet> bjam --user-config=user-config.jam --with-python
</snippet></ROW><ROW><id>14018199</id><snippet>user-config.jam</snippet></ROW><ROW><id>14018199</id><snippet>using python : 3.3 : C:\\Development\\Python-3.3.0\\PCBuild\\python.exe
    : C:\\Development\\Python-3.3.0\\Include C:\\Development\\Python-3.3.0\\PC
    : C:\\Development\\Python-3.3.0\\PCBuild : ;
</snippet></ROW><ROW><id>14018234</id><snippet>cmd /k</snippet></ROW><ROW><id>14018234</id><snippet>title My New Title</snippet></ROW><ROW><id>14018234</id><snippet>cmd</snippet></ROW><ROW><id>14018238</id><snippet>dirtyItems</snippet></ROW><ROW><id>14018238</id><snippet>dirtyItems = {}</snippet></ROW><ROW><id>14018432</id><snippet>*</snippet></ROW><ROW><id>14018432</id><snippet>*</snippet></ROW><ROW><id>14018432</id><snippet>**</snippet></ROW><ROW><id>14018432</id><snippet>opt_fun</snippet></ROW><ROW><id>14018432</id><snippet>x1</snippet></ROW><ROW><id>14018432</id><snippet>x2</snippet></ROW><ROW><id>14018432</id><snippet>&gt;&gt;&gt; def opt_fun(x1, x2, *positional_parameters, **keyword_parameters):
...     if ('optional' in keyword_parameters):
...         print 'optional parameter found, it is ', keyword_parameters['optional']
...     else:
...         print 'no optional parameter, sorry'
... 
&gt;&gt;&gt; opt_fun(1, 2)
no optional parameter, sorry
&gt;&gt;&gt; opt_fun(1,2, optional="yes")
optional parameter found, it is  yes
&gt;&gt;&gt; opt_fun(1,2, another="yes")
no optional parameter, sorry
</snippet></ROW><ROW><id>14018432</id><snippet>None</snippet></ROW><ROW><id>14018655</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>14018655</id><snippet>poll</snippet></ROW><ROW><id>14018655</id><snippet>wait</snippet></ROW><ROW><id>14018655</id><snippet>result.returncode</snippet></ROW><ROW><id>14018740</id><snippet>help(re.findall)</snippet></ROW><ROW><id>14018740</id><snippet>t='1 2 3 4'</snippet></ROW><ROW><id>14018740</id><snippet>['1 2', '3 4']</snippet></ROW><ROW><id>14018779</id><snippet>and</snippet></ROW><ROW><id>14018779</id><snippet>if (Pline=mPL) and ((bestTime == None) or (bestTime &lt; lastTime)):
        bestTime = lastTime
        Time=(bestTime.strftime('%m-%d-%Y'))
        bestLocation = lastLocation
</snippet></ROW><ROW><id>14018983</id><snippet>function (create_symlinks)
    # Do nothing if building in-source
    if (${CMAKE_CURRENT_BINARY_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})
        return()
    endif()

    foreach (path_file ${ARGN})
        get_filename_component(folder ${path_file} PATH)

        # Create REAL folder
        file(MAKE_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/${folder}")

        # Delete symlink if it exists
        file(REMOVE "${CMAKE_CURRENT_BINARY_DIR}/${path_file}")

        # Get OS dependent path to use in `execute_process`
        file(TO_NATIVE_PATH "${CMAKE_CURRENT_BINARY_DIR}/${path_file}" link)
        file(TO_NATIVE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/${path_file}" target)

        if (UNIX)
            set(command ln -s ${target} ${link})
        else()
            set(command cmd.exe /c mklink ${link} ${target})
        endif()

        execute_process(COMMAND ${command} 
                        RESULT_VARIABLE result
                        ERROR_VARIABLE output)

        if (NOT ${result} EQUAL 0)
            message(FATAL_ERROR "Could not create symbolic link for: ${target} --&gt; ${output}")
        endif()

    endforeach(path_file)
endfunction(create_symlinks)
</snippet></ROW><ROW><id>14018983</id><snippet># Do not omit !!!RELATIVE!!!
file(GLOB_RECURSE files RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.py *.dat *.xml)
create_symlinks(${files})
</snippet></ROW><ROW><id>14018983</id><snippet>cd src_dir
mkdir build_dir
cd build_dir
cmake ..
</snippet></ROW><ROW><id>14018983</id><snippet>cmake</snippet></ROW><ROW><id>14018983</id><snippet>mklink</snippet></ROW><ROW><id>14018983</id><snippet>mklink</snippet></ROW><ROW><id>14018983</id><snippet>create_symlinks</snippet></ROW><ROW><id>14019235</id><snippet>mpkg</snippet></ROW><ROW><id>14019235</id><snippet>/Library/Frameworks/Python.framework/Versions/3.3/bin/python3
</snippet></ROW><ROW><id>14019235</id><snippet>Django</snippet></ROW><ROW><id>14019235</id><snippet>File</snippet></ROW><ROW><id>14019235</id><snippet>Invalidate Caches</snippet></ROW><ROW><id>14019250</id><snippet>authenticate()</snippet></ROW><ROW><id>14019250</id><snippet>user</snippet></ROW><ROW><id>14019250</id><snippet>User</snippet></ROW><ROW><id>14019250</id><snippet># ...
user = authenticate(username=username, password=password)
if user is not None:
    if user.is_active:
        state = "You're successfully logged in!"
        info = dict(username=username, email=user.email, fullname=user.get_full_name())
        return render_to_response('home.html', info)
</snippet></ROW><ROW><id>14019260</id><snippet>import random
r = lambda: random.randint(0,255)
print('#%02X%02X%02X' % (r(),r(),r()))
</snippet></ROW><ROW><id>14019357</id><snippet>sqlite3.IntegrityError</snippet></ROW><ROW><id>14019357</id><snippet>&gt;&gt;&gt; c.executemany('insert into stocks values (?,?)', [(1, 'IBM'), (2, 'MSOFT'), (1, 'GOOG')])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
sqlite3.IntegrityError: PRIMARY KEY must be unique
</snippet></ROW><ROW><id>14019357</id><snippet>connection.rollback()</snippet></ROW><ROW><id>14019357</id><snippet>try:
    with connection:
        c = connection.cursor()
        c.executemany('insert into stocks values (?,?)', rows)
    # insertion succeeded, `connection.commit()` is called automatically
except sqlite3.IntegrityError:
    # insertion failed, `connection.rollback()` is called automatically
</snippet></ROW><ROW><id>14019799</id><snippet>is</snippet></ROW><ROW><id>14019799</id><snippet>==</snippet></ROW><ROW><id>14019799</id><snippet>is</snippet></ROW><ROW><id>14019799</id><snippet>os.path.join()</snippet></ROW><ROW><id>14019799</id><snippet>r''</snippet></ROW><ROW><id>14019799</id><snippet>\</snippet></ROW><ROW><id>14019799</id><snippet>\</snippet></ROW><ROW><id>14019799</id><snippet>\\</snippet></ROW><ROW><id>14019799</id><snippet>/</snippet></ROW><ROW><id>14019799</id><snippet>\'</snippet></ROW><ROW><id>14019799</id><snippet>'</snippet></ROW><ROW><id>14019799</id><snippet>import os.path

def location(filename, pL):
    if pL == 'ab1234':
        filename = os.path.join(r'C:\dropbox', filename)
    else:
        filename = os.path.join(r'C:\dropbox', pL, filename)
    with open(filename, 'r') as f:
        return f.read()
</snippet></ROW><ROW><id>14019799</id><snippet>open()</snippet></ROW><ROW><id>14019799</id><snippet>.read()</snippet></ROW><ROW><id>14019799</id><snippet>file</snippet></ROW><ROW><id>14019799</id><snippet>with</snippet></ROW><ROW><id>14020321</id><snippet>       pos=nx.graphviz_layout(G,prog='dot') 
</snippet></ROW><ROW><id>14020586</id><snippet>package myjythonproject;
import org.python.util.PythonInterpreter;

public class MyJythonProject {

    public static void main(String[] args) {
        try
        {
            PythonInterpreter.initialize(System.getProperties(), System.getProperties(), new String[0]);
            PythonInterpreter interp = new PythonInterpreter();
            interp.execfile("/home/vicent/foo.py");
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }
}
</snippet></ROW><ROW><id>14020586</id><snippet>Properties</snippet></ROW><ROW><id>14020586</id><snippet>Libraries</snippet></ROW><ROW><id>14020586</id><snippet>Compile</snippet></ROW><ROW><id>14020586</id><snippet>Add JARF/folder</snippet></ROW><ROW><id>14020586</id><snippet>Run</snippet></ROW><ROW><id>14020586</id><snippet>Clean and Build Project (MyJythonProject)</snippet></ROW><ROW><id>14020738</id><snippet>DataFrame.add</snippet></ROW><ROW><id>14020738</id><snippet>import pandas as pd

dict1 = {'M1': {'H': 1, 'J' : 2}, 'M2': {'H': 1, 'J' : 2},
         'M3': {'H': 1, 'J' : 2}}
dict2 = {'M1': {'H': 4, 'J' : 6}, 'M2': {'H': 2, 'J' : 5},
         'M4': {'H': 9, 'J' : 8}}

df1 = pd.DataFrame(dict1).T
df2 = pd.DataFrame(dict2).T

print(df1)

#     H  J
# M1  1  2
# M2  1  2
# M3  1  2

print(df2)
#     H  J
# M1  4  6
# M2  2  5
# M4  9  8

print(df1.add(df2, fill_value = 0))

#     H  J
# M1  5  8
# M2  3  7
# M3  1  2
# M4  9  8
</snippet></ROW><ROW><id>14020738</id><snippet>In [1]: dict1 = {'M1': {'H': '1', 'J' : '2'}, 'M2': {'H': '1', 'J' : '2'}, 'M3': {'H': '1', 'J' : '2'}}

In [2]: dict1 = {key:{k:int(v) for k,v in dct.items()} for key,dct in dict1.items()}

In [3]: dict1
Out[3]: {'M1': {'H': 1, 'J': 2}, 'M2': {'H': 1, 'J': 2}, 'M3': {'H': 1, 'J': 2}}
</snippet></ROW><ROW><id>14020738</id><snippet>import pandas as pd
import numpy as np

def combine(values):
    if any(isinstance(v, basestring) for v in values):
        result = values.dropna().tolist()
    else:
        result = values.sum()
    return result

dict1 = { 'M1': {'H': 1, 'J' : 2, 'D' : 'ABC/DEF1.txt'},
          'M2': {'H': 1, 'J' : 2, 'D' : 'ABC/DEF2.txt'},
          'M3': {'H': 1, 'J' : 2, 'D' : 'ABC/DEF3.txt'} }
dict2 = { 'M1': {'H': 4, 'J' : 6, 'D' : 'ABC/DEF1.txt'},
          'M2': {'H': 2, 'J' : 5, 'D' : 'ABC/DEF2.txt'},
          'M4': {'H': 9, 'J' : 8, 'D' : 'ABC/DEF3.txt'}}

df1 = pd.DataFrame(dict1).T
df2 = pd.DataFrame(dict2).T
df = df1.join(df2, rsuffix = '_', how = 'outer').T
grouped = df.groupby(lambda label: label.rstrip('_'))
print(grouped.aggregate(combine).T)
</snippet></ROW><ROW><id>14020738</id><snippet>                               D  H  J
M1  [ABC/DEF1.txt, ABC/DEF1.txt]  5  8
M2  [ABC/DEF2.txt, ABC/DEF2.txt]  3  7
M3                [ABC/DEF3.txt]  1  2
M4                [ABC/DEF3.txt]  9  8
</snippet></ROW><ROW><id>14020749</id><snippet>subm_file</snippet></ROW><ROW><id>14020749</id><snippet>poster</snippet></ROW><ROW><id>14020749</id><snippet>http://www.spoj.com/submit/complete/</snippet></ROW><ROW><id>14020749</id><snippet>.../submit/</snippet></ROW><ROW><id>14020749</id><snippet>.../submit/</snippet></ROW><ROW><id>14020749</id><snippet>.../submit/complete/</snippet></ROW><ROW><id>14020893</id><snippet>try:
  search_response = urllib2.urlopen(search_request)
except urllib2.HTTPError:
  print 'There was an error with the request'
</snippet></ROW><ROW><id>14020893</id><snippet>try:
  search_response = urllib2.urlopen(search_request)
except urllib2.HTTPError:
  pass
</snippet></ROW><ROW><id>14020893</id><snippet>html_data = search_response.read()</snippet></ROW><ROW><id>14021141</id><snippet>%j</snippet></ROW><ROW><id>14021141</id><snippet>%d</snippet></ROW><ROW><id>14021141</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime("2012-03-12 10:10:10", "%Y-%m-%d %H:%M:%S")
datetime.datetime(2012, 3, 12, 10, 10, 10)
</snippet></ROW><ROW><id>14021172</id><snippet>say()</snippet></ROW><ROW><id>14021172</id><snippet>return</snippet></ROW><ROW><id>14021172</id><snippet>from util import http, hook

@hook.command(autohelp=False)
def bitcoin(inp, say=None):
    ".bitcoin -- gets current exchange rate for bitcoins from mtgox"
    data = http.get_json("https://mtgox.com/code/data/ticker.php")
    ticker = data['ticker']
    say("Current: \x0307$%(buy).2f\x0f - High: \x0307$%(high).2f\x0f"
        " - Low: \x0307$%(low).2f\x0f - Volume: %(vol)s" % ticker)
</snippet></ROW><ROW><id>14021231</id><snippet>%include &lt;carrays.i&gt;

%array_class(SCRIPT_ITEM, SCRIPT_ITEM_ARRAY);

extern HRESULT WINAPI ScriptItemize(
const WCHAR           *pwcInChars,    // In   Unicode string to be itemized
int                   cInChars,       // In   Codepoint count to itemize
int                   cMaxItems,      // In   Max length of itemization array
const SCRIPT_CONTROL  *psControl,     // In   Analysis control (optional)
const SCRIPT_STATE    *psState,       // In   Initial bidi algorithm state (optional)
SCRIPT_ITEM_ARRAY     *pItems,        // Out  Array to receive itemization
int                   *pcItems);      // Out  Count of items processed (optional)
</snippet></ROW><ROW><id>14021331</id><snippet>[global]
server.thread_pool = 1
</snippet></ROW><ROW><id>14021632</id><snippet>HTTPError</snippet></ROW><ROW><id>14021632</id><snippet>search_response</snippet></ROW><ROW><id>14021632</id><snippet>html_data = search_response.read()
</snippet></ROW><ROW><id>14021632</id><snippet>search_response</snippet></ROW><ROW><id>14021632</id><snippet>html_data = search_response.read()</snippet></ROW><ROW><id>14021632</id><snippet>search_request = urllib2.Request(url,data=tmp_file_name,headers={'X-Requested-With':'WoMenShi888XMLHttpRequestWin'})
    #print search_request.get_method()
try:
    search_response = urllib2.urlopen(search_request)
    html_data = search_response.read()  #New here
except urllib2.HTTPError:
    html_data = "error" #And here

print html_data
</snippet></ROW><ROW><id>14021869</id><snippet>selected="selected"</snippet></ROW><ROW><id>14021869</id><snippet>selected</snippet></ROW><ROW><id>14021869</id><snippet>&lt;option value="{{t.id}}"{% if t.id == topic_id %} selected{% endif %}&gt;{{t.title}}{{t.id}}&lt;/option&gt;
</snippet></ROW><ROW><id>14021869</id><snippet>id</snippet></ROW><ROW><id>14021869</id><snippet>topic_id</snippet></ROW><ROW><id>14021869</id><snippet>t.id</snippet></ROW><ROW><id>14021869</id><snippet>topic_id</snippet></ROW><ROW><id>14021869</id><snippet>topic_id</snippet></ROW><ROW><id>14021869</id><snippet>int</snippet></ROW><ROW><id>14022417</id><snippet>self.keyIsPressed</snippet></ROW><ROW><id>14022417</id><snippet>installEventFilter( QObject * filterObj )</snippet></ROW><ROW><id>14022417</id><snippet>QEvent.KeyPress</snippet></ROW><ROW><id>14022417</id><snippet>QApplication.keyboardModifiers</snippet></ROW><ROW><id>14022417</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

import os

import sip
sip.setapi('QString', 2)
sip.setapi('QVariant', 2)

from PyQt4.QtCore import *
from PyQt4.QtGui import *

class droppableLabel(QLabel):
    fileDropped = pyqtSignal(list)

    def __init__(self, type, parent=None):
        super(droppableLabel, self).__init__(parent)
        self.setAcceptDrops(True)

    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls:
            event.accept()

        else:
            event.ignore()

    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls:
            event.setDropAction(Qt.CopyAction)
            event.accept()

        else:
            event.ignore()

    def dropEvent(self, event):
        if event.mimeData().hasUrls:
            event.setDropAction(Qt.CopyAction)
            event.accept()
            links = []
            for url in event.mimeData().urls():
                links.append(str(url.toLocalFile()))

            self.fileDropped.emit(links)

        else:
            event.ignore()

class droppableWidget(QWidget):
    def __init__(self, parent=None):
        super(droppableWidget, self).__init__(parent)

        self.label = droppableLabel(self)
        self.label.fileDropped.connect(self.on_label_fileDropped)
        self.label.setText("Press CTRL/SHIFT/None and drop some files here")
        self.label.setMinimumSize(QSize(40, 100))

        self.verticalLayout = QVBoxLayout(self)
        self.verticalLayout.addWidget(self.label)
        self.verticalLayout.setMargin(0)

    @pyqtSlot(list)
    def on_label_fileDropped(self, fileNames):
        droppedFiles = [    fileName
                            for fileName in fileNames
                            if os.path.exists(fileName)
                            ]

        if droppedFiles:
            keyModifiers = QApplication.keyboardModifiers()
            if keyModifiers == Qt.ShiftModifier:
                print "SHIFT"
                formatter = "\n"                

            elif keyModifiers == Qt.ControlModifier:
                print "CTRL"
                formatter = ","

            else:
                print "NONE"
                formatter = "|"

            self.label.setText(formatter.join(droppedFiles))

if __name__ == "__main__":
    import  sys

    app = QApplication(sys.argv)
    main = droppableWidget()
    main.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14022700</id><snippet>def get_non_touching(ref_node):
    qry = session.query(Node)
    qry = qry.filter(~Node.lower_edges.any(Edge.higher_id == ref_node.node_id))
    qry = qry.filter(~Node.higher_edges.any(Edge.lower_id == ref_node.node_id))
    qry = qry.filter(Node.node_id != ref_node.node_id) # exclude node "a" itself as well
    return qry.all()

a = session.query(Node).get(1)
res = get_non_touching(a)
</snippet></ROW><ROW><id>14022731</id><snippet>custom_string_to_python_str</snippet></ROW><ROW><id>14022731</id><snippet>custom_string_from_python_str</snippet></ROW><ROW><id>14022882</id><snippet>hash[1][2]</snippet></ROW><ROW><id>14022882</id><snippet>hash[x]</snippet></ROW><ROW><id>14022882</id><snippet>hash[y]</snippet></ROW><ROW><id>14022882</id><snippet>from collections import defaultdict
hash = defaultdict(dict)
hash[1][2] = 1
</snippet></ROW><ROW><id>14022882</id><snippet>hash</snippet></ROW><ROW><id>14022882</id><snippet>defaultdict</snippet></ROW><ROW><id>14022882</id><snippet>hash.setdefault(1, {})</snippet></ROW><ROW><id>14023081</id><snippet>RawConfigParser.write</snippet></ROW><ROW><id>14023081</id><snippet>def write(self, fp):
    """Write an .ini-format representation of the configuration state."""
    if self._defaults:
        fp.write("[%s]\n" % DEFAULTSECT)
        for (key, value) in self._defaults.items():
            fp.write("%s = %s\n" % (key, str(value).replace('\n', '\n\t')))
        fp.write("\n")
    for section in self._sections:
        fp.write("[%s]\n" % section)
        for (key, value) in self._sections[section].items():
            if key != "__name__":
                fp.write("%s = %s\n" %
                         (key, str(value).replace('\n', '\n\t')))
        fp.write("\n")
</snippet></ROW><ROW><id>14023081</id><snippet>%s = %s\n</snippet></ROW><ROW><id>14023081</id><snippet>RawConfigParser</snippet></ROW><ROW><id>14023081</id><snippet>write</snippet></ROW><ROW><id>14023081</id><snippet>def remove_whitespace_from_assignments():
    separator = "="
    config_path = "config.ini"
    lines = file(config_path).readlines()
    fp = open(config_path, "w")
    for line in lines:
        line = line.strip()
        if not line.startswith("#") and separator in line:
            assignment = line.split(separator, 1)
            assignment = map(str.strip, assignment)
            fp.write("%s%s%s\n" % (assignment[0], separator, assignment[1]))
        else:
            fp.write(line + "\n")
</snippet></ROW><ROW><id>14023469</id><snippet>cheap_hash = lambda input: hashlib.md5(input).hexdigest()[:6]</snippet></ROW><ROW><id>14023693</id><snippet>stderr</snippet></ROW><ROW><id>14023693</id><snippet>None</snippet></ROW><ROW><id>14023693</id><snippet>|</snippet></ROW><ROW><id>14023693</id><snippet>&gt;</snippet></ROW><ROW><id>14023693</id><snippet>sp = subprocess.Popen(listargs[0], shell=False,
    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
output, error = sp.communicate()
</snippet></ROW><ROW><id>14023693</id><snippet>devnull = open(os.devnull, 'wb') #python &gt;= 2.4
sp = subprocess.Popen(listargs[0], shell=False,
    stdout=subprocess.PIPE, stderr=devnull)

#python 3.x:
sp = subprocess.Popen(listargs[0], shell=False
    stdout=subprocess.PIPE, stderr=subprocess.DEVNULL)
</snippet></ROW><ROW><id>14023701</id><snippet>None</snippet></ROW><ROW><id>14023701</id><snippet>@app.route('/item/&lt;int:appitemid&gt;/')
@app.route('/item/&lt;int:appitemid&gt;/&lt;path:anythingcanbehere&gt;')
def show_item(appitemid, anythingcanbehere=None):
</snippet></ROW><ROW><id>14023834</id><snippet>self.get_window().set_decorations(Gdk.WMDecoration.BORDER)
</snippet></ROW><ROW><id>14023878</id><snippet>packet_data[20:28]</snippet></ROW><ROW><id>14023878</id><snippet>packet_data[0:8]</snippet></ROW><ROW><id>14023878</id><snippet>self.own_id</snippet></ROW><ROW><id>14023878</id><snippet>self.own_id</snippet></ROW><ROW><id>14023878</id><snippet>self.own_id = current_socket.getsockname()[1]
</snippet></ROW><ROW><id>14023878</id><snippet>self.send_one_ping</snippet></ROW><ROW><id>14023878</id><snippet>self.own_id</snippet></ROW><ROW><id>14023881</id><snippet>def start_DAQ():
    global do_DAQ 
    global data_index
    global start_time

    do_DAQ = True
    data_index=0
    start_time = time.time()
    store_button.config(state = tk.DISABLED)
</snippet></ROW><ROW><id>14023881</id><snippet>nonlocal</snippet></ROW><ROW><id>14023909</id><snippet>@app.errorhandler(404)
def page_not_found(e):
    # your processing here
    return result
</snippet></ROW><ROW><id>14023977</id><snippet>x,y = x*km_per_pixel + km_offset_x, y*km_per_pixel + km_offset_y
im = ax.imshow(...,exent=lims_in_km)
q = ax.quiver(x,y,...)
</snippet></ROW><ROW><id>14023977</id><snippet>q = ax.quiver(..)
im = ax.imshow(...) # exactly like you had before
ax.get_xaxis().set_major_formatter(
    matplotlib.ticker.FuncFormatter(
        lambda x,i: '%.2f' % (x * km_per_pixel + km_offset_x)))
ax.get_yaxis().set_major_formatter(
    matplotlib.ticker.FuncFormatter(
        lambda x,i: '%.2f' % (x * km_per_pixel + km_ofset_y)))
</snippet></ROW><ROW><id>14023977</id><snippet>Locator</snippet></ROW><ROW><id>14024035</id><snippet>nltk.set_proxy('http://proxy.example.com:3128' ('USERNAME', 'PASSWORD'))
</snippet></ROW><ROW><id>14024035</id><snippet>nltk.set_proxy('http://proxy.example.com:3128', ('USERNAME', 'PASSWORD'))
</snippet></ROW><ROW><id>14024064</id><snippet># -*- coding: utf-8 -*-
import sys
import time

from PyQt4 import QtGui, QtCore


class SpriteAnimation(object):
    def __init__(self, image_path, sprite_width, sprite_height, label):
        pixmap = QtGui.QPixmap(image_path)

        width, height = pixmap.width(), pixmap.height()
        self.pixmaps = []
        for x in range(0, width, sprite_width):
            for y in range(0, height, sprite_height):
                self.pixmaps.append(pixmap.copy(x, y, 
                                                sprite_width, sprite_height))
        self._current_frame = 0
        self.label = label

    def play(self, interval=100):
        self._timer = QtCore.QTimer(interval=interval,
                                    timeout=self._animation_step)
        self._timer.start()
    def _animation_step(self):
        self.label.setPixmap(self.pixmaps[self._current_frame])
        self.label.update()
        self._current_frame += 1
        if self._current_frame &gt;= len(self.pixmaps):
            self._current_frame = 0


class Window(QtGui.QWidget):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.resize(100, 100)
        layout = QtGui.QVBoxLayout(self)
        label = QtGui.QLabel()
        layout.addWidget(label)
        # http://content.makeyourflashgame.com/pbe/tutorials/star-green.png
        self.animation = SpriteAnimation('star-green.png', 80, 80, label)
        self.animation.play()


if __name__ == '__main__':
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14024064</id><snippet>class PowerUp(QtGui.QGraphicsRectItem):
    def __init__(self):
        QtGui.QGraphicsRectItem.__init__(self)
        self.images = ['data/images/objects/bonus_block/full-0.png',
                       'data/images/objects/bonus_block/full-1.png',
                       'data/images/objects/bonus_block/full-2.png',
                       'data/images/objects/bonus_block/full-3.png',
                       'data/images/objects/bonus_block/full-4.png']
        self.image = self.images[0]
        self.current = 0
        self.position()
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.animation_step)
        self.timer.start(175)
        #random.choice([slide(), ghost()])

    def position(self):
        self.pos_x = random.randint(-300, 300)
        self.pos_y = random.randint(-200, 200)

    def boundingRect(self):
        return QtCore.QRectF(0, 0, 32, 32)

    def paint(self, painter, option, widget):
        painter.setBrush(QtGui.QBrush(self.image))
        painter.setPen(QtGui.QPen(QtCore.Qt.NoPen))
        painter.drawRect(0, 0, 32, 32)
        self.setPos(self.pos_x, self.pos_y)

    def animation_step(self):
        self.image = QtGui.QPixmap(self.images[self.current])
        self.current += 1
        if self.current == len(self.images):
            self.current = 0
</snippet></ROW><ROW><id>14024159</id><snippet>getrandbits</snippet></ROW><ROW><id>14024159</id><snippet>n / 2^52</snippet></ROW><ROW><id>14024159</id><snippet>0 &lt;= n &lt; 2^52</snippet></ROW><ROW><id>14024159</id><snippet>[0, 1)</snippet></ROW><ROW><id>14024159</id><snippet>random()</snippet></ROW><ROW><id>14024159</id><snippet>return self.getrandbits(53) / 2**53.</snippet></ROW><ROW><id>14024159</id><snippet>n / 2^53</snippet></ROW><ROW><id>14024159</id><snippet>0 &lt;= n &lt; 2^53</snippet></ROW><ROW><id>14024159</id><snippet>2^62</snippet></ROW><ROW><id>14024159</id><snippet>[0.0, 1.0)</snippet></ROW><ROW><id>14024159</id><snippet>2^52</snippet></ROW><ROW><id>14024159</id><snippet>random()</snippet></ROW><ROW><id>14024159</id><snippet>x</snippet></ROW><ROW><id>14024159</id><snippet>[0.0, 1.0]</snippet></ROW><ROW><id>14024159</id><snippet>[0.0, 1.0)</snippet></ROW><ROW><id>14024159</id><snippet>x</snippet></ROW><ROW><id>14024159</id><snippet>uniform</snippet></ROW><ROW><id>14024159</id><snippet>getrandbits</snippet></ROW><ROW><id>14024159</id><snippet>[0, 1]</snippet></ROW><ROW><id>14024159</id><snippet>"""                                                                                                                                                                                                                                         
High quality uniform random variable on [0, 1].                                                                                                                                                                                             

Simulates round(X) where X is a real random variable uniformly distributed on                                                                                                                                                               
the interval [0, 1] and round is the usual round-to-nearest rounding function                                                                                                                                                               
from real numbers to floating-point.                                                                                                                                                                                                        

"""
from __future__ import division
import random

precision = 53
emin = -1021

def random_significand():
    return (random.getrandbits(precision) + 1) // 2 / (2**precision)

def uniform():
    for i in xrange(1 - emin):
        if random.getrandbits(1):
            return (random_significand() + 0.5) / 2**i
    # Subnormal                                                                                                                                                                                                                             
    return random_significand() / 2**i
</snippet></ROW><ROW><id>14024327</id><snippet>sendLine()</snippet></ROW><ROW><id>14024327</id><snippet>def sendLine(self, line):
    return self.transport.write(line + self.delimiter)
</snippet></ROW><ROW><id>14024327</id><snippet>sendLine()</snippet></ROW><ROW><id>14024327</id><snippet>self.transport.write()</snippet></ROW><ROW><id>14024329</id><snippet>tags = tag.objects.values('tag').annotate(tag_count=Count('tag')).order_by()
for tag in tags:
    print tag['tag_count']
</snippet></ROW><ROW><id>14024329</id><snippet>order_by</snippet></ROW><ROW><id>14024329</id><snippet>tags = tag.objects.values('tag').annotate(tag_count=Count('tag')).order_by('-tag_count')
</snippet></ROW><ROW><id>14024345</id><snippet>def capitalize_nested(t):
    if isinstance(t, list):
        return [capitalize_nested(s) for s in t]
    else:
        return t.capitalize()
</snippet></ROW><ROW><id>14024345</id><snippet>print capitalize_nested(['this', 'that', ['other']])
# ['This', 'That', ['Other']]
</snippet></ROW><ROW><id>14024411</id><snippet>found = defaultdict(int)
def determine(tup):
    if self.message in tup[3]: return True      # matched message

    times = messageTimes[tup[0]]
    idx = found[tup[0]]
    le = bisect.bisect_right(times, tup[1], idx)
    idx = le
    return (le and tup[1]-times[le-1] &lt;= tdiff) or (le != len(times) and times[le]-tup[1] &lt;= tdiff)
</snippet></ROW><ROW><id>14024461</id><snippet>urllib.urlopen</snippet></ROW><ROW><id>14024461</id><snippet>seek</snippet></ROW><ROW><id>14024461</id><snippet>next</snippet></ROW><ROW><id>14024461</id><snippet>read</snippet></ROW><ROW><id>14024461</id><snippet>urlretrieve</snippet></ROW><ROW><id>14024461</id><snippet>mmap</snippet></ROW><ROW><id>14024461</id><snippet>ranges</snippet></ROW><ROW><id>14024461</id><snippet>from string import ascii_lowercase
from random import choice
from StringIO import StringIO

buf = ''.join(choice(ascii_lowercase) for _ in range(50))
print buf

sio_buf = StringIO(buf) # make it a bit more like a stream object
first16 = sio_buf.read(16)
print first16

from collections import deque
last16 = deque(iter(lambda: sio_buf.read(1), ''), 16) # read(1) may look bad but it's buffered anyway - so...
print ''.join(last16)
</snippet></ROW><ROW><id>14024461</id><snippet>gpsgvqsbixtwyakpgefrhntldsjqlmfvyzwjoykhsapcmvjmar
gpsgvqsbixtwyakp
wjoykhsapcmvjmar
</snippet></ROW><ROW><id>14024730</id><snippet>lxml</snippet></ROW><ROW><id>14024730</id><snippet>etree</snippet></ROW><ROW><id>14024730</id><snippet>etree.so</snippet></ROW><ROW><id>14024730</id><snippet>etree.dll</snippet></ROW><ROW><id>14024730</id><snippet>python-lxml</snippet></ROW><ROW><id>14024730</id><snippet>libxml2-dev</snippet></ROW><ROW><id>14024730</id><snippet>libxslt1-dev</snippet></ROW><ROW><id>14024730</id><snippet>python-dev</snippet></ROW><ROW><id>14024730</id><snippet>python-pip</snippet></ROW><ROW><id>14024730</id><snippet>sudo pip install lxml</snippet></ROW><ROW><id>14024730</id><snippet>lxml</snippet></ROW><ROW><id>14024782</id><snippet>\n</snippet></ROW><ROW><id>14024782</id><snippet>\r</snippet></ROW><ROW><id>14024782</id><snippet>from subprocess import Popen, PIPE

def sync(src, dest, passwd):
    cmd = ['sshpass', '-p', passwd, 'rsync', '-avz', '--progress', src, dest]
    p = Popen(cmd, stdout=PIPE)
    line = ''
    while True:
        c = p.stdout.read(1)
        if not c:
            break
        if c in ['\n', '\r']:
            print 'rsync progress: %s' % line
            line = ''
        else:
            line += c

sync('/path/big.txt', 'myserver:/path/', 'mypassword')
</snippet></ROW><ROW><id>14024782</id><snippet>rsync progress: sending incremental file list
rsync progress: big.txt
rsync progress: 
rsync progress:        32768   0%    0.00kB/s    0:00:00  
rsync progress:     65798144  31%   62.72MB/s    0:00:02  
rsync progress:    131596288  62%   62.77MB/s    0:00:01  
rsync progress:    197427200  94%   62.79MB/s    0:00:00  
rsync progress:    209715200 100%   62.80MB/s    0:00:03 (xfer#1, to-check=0/1)
rsync progress: 
rsync progress: sent 204032 bytes  received 31 bytes  45347.33 bytes/sec
rsync progress: total size is 209715200  speedup is 1027.70
</snippet></ROW><ROW><id>14024915</id><snippet>print yaml.dump(a, default_flow_style=False)
</snippet></ROW><ROW><id>14024915</id><snippet>True</snippet></ROW><ROW><id>14024915</id><snippet>False</snippet></ROW><ROW><id>14024915</id><snippet>None</snippet></ROW><ROW><id>14024915</id><snippet>None</snippet></ROW><ROW><id>14024915</id><snippet>False</snippet></ROW><ROW><id>14024915</id><snippet>True</snippet></ROW><ROW><id>14025140</id><snippet>u =

   0.0053531
   0.2384227
   0.2476188
   0.0367063
   0.0257947
   0.2124423
   0.0838103
   0.1498518
</snippet></ROW><ROW><id>14025140</id><snippet>u</snippet></ROW><ROW><id>14025140</id><snippet>mvee</snippet></ROW><ROW><id>14025140</id><snippet>(P*u) = 

   0.50651
  -0.11166
  -0.57847
</snippet></ROW><ROW><id>14025140</id><snippet>(P*u)*(P*u)' =

   0.256555  -0.056556  -0.293002
  -0.056556   0.012467   0.064590
  -0.293002   0.064590   0.334628
</snippet></ROW><ROW><id>14025140</id><snippet>c = np.dot(points.T,u)
print(c)
</snippet></ROW><ROW><id>14025140</id><snippet>[ 0.50651212 -0.11165724 -0.57847018]
</snippet></ROW><ROW><id>14025140</id><snippet>print(np.dot(c,np.transpose(c)))
</snippet></ROW><ROW><id>14025140</id><snippet>0.60364961984    # &lt;-- This should equal (P*u)*(P*u)', a 3x3 matrix.
</snippet></ROW><ROW><id>14025140</id><snippet>(P*u)*(P*u)'</snippet></ROW><ROW><id>14025140</id><snippet>np.multiply.outer(c,c)
</snippet></ROW><ROW><id>14025140</id><snippet>import numpy as np
import numpy.linalg as la
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

pi = np.pi
sin = np.sin
cos = np.cos

def mvee(points, tol = 0.001):
    """
    Finds the ellipse equation in "center form"
    (x-c).T * A * (x-c) = 1
    """
    N, d = points.shape
    Q = np.column_stack((points, np.ones(N))).T
    err = tol+1.0
    u = np.ones(N)/N
    while err &gt; tol:
        # assert u.sum() == 1 # invariant
        X = np.dot(np.dot(Q, np.diag(u)), Q.T)
        M = np.diag(np.dot(np.dot(Q.T, la.inv(X)), Q))
        jdx = np.argmax(M)
        step_size = (M[jdx]-d-1.0)/((d+1)*(M[jdx]-1.0))
        new_u = (1-step_size)*u
        new_u[jdx] += step_size
        err = la.norm(new_u-u)
        u = new_u
    c = np.dot(u,points)        
    A = la.inv(np.dot(np.dot(points.T, np.diag(u)), points)
               - np.multiply.outer(c,c))/d
    return A, c

#some random points
points = np.array([[ 0.53135758, -0.25818091, -0.32382715], 
                   [ 0.58368177, -0.3286576,  -0.23854156,], 
                   [ 0.18741533,  0.03066228, -0.94294771], 
                   [ 0.65685862, -0.09220681, -0.60347573],
                   [ 0.63137604, -0.22978685, -0.27479238],
                   [ 0.59683195, -0.15111101, -0.40536606],
                   [ 0.68646128,  0.0046802,  -0.68407367],
                   [ 0.62311759,  0.0101013,  -0.75863324]])

# Singular matrix error!
# points = np.eye(3)

A, centroid = mvee(points)    
U, D, V = la.svd(A)    
rx, ry, rz = 1./np.sqrt(D)
u, v = np.mgrid[0:2*pi:20j, -pi/2:pi/2:10j]

def ellipse(u,v):
    x = rx*cos(u)*cos(v)
    y = ry*sin(u)*cos(v)
    z = rz*sin(v)
    return x,y,z

E = np.dstack(ellipse(u,v))
E = np.dot(E,V) + centroid
x, y, z = np.rollaxis(E, axis = -1)

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

ax.plot_surface(x, y, z, cstride = 1, rstride = 1, alpha = 0.05)
ax.scatter(points[:,0],points[:,1],points[:,2])

plt.show()
</snippet></ROW><ROW><id>14025140</id><snippet>np.dot</snippet></ROW><ROW><id>14025140</id><snippet>*</snippet></ROW><ROW><id>14025140</id><snippet>A = la.inv(np.dot(np.dot(points.T, np.diag(u)), points)
           - np.dot(c[:, np.newaxis], c[np.newaxis, :]))/d
</snippet></ROW><ROW><id>14025140</id><snippet>A = la.inv(points.T*np.diag(u)*points - c.T*c)/d    
</snippet></ROW><ROW><id>14025140</id><snippet>def mvee(points, tol = 0.001):
    """
    Find the minimum volume ellipse.
    Return A, c where the equation for the ellipse given in "center form" is
    (x-c).T * A * (x-c) = 1
    """
    points = np.asmatrix(points)
    N, d = points.shape
    Q = np.column_stack((points, np.ones(N))).T
    err = tol+1.0
    u = np.ones(N)/N
    while err &gt; tol:
        # assert u.sum() == 1 # invariant
        X = Q * np.diag(u) * Q.T
        M = np.diag(Q.T * la.inv(X) * Q)
        jdx = np.argmax(M)
        step_size = (M[jdx]-d-1.0)/((d+1)*(M[jdx]-1.0))
        new_u = (1-step_size)*u
        new_u[jdx] += step_size
        err = la.norm(new_u-u)
        u = new_u
    c = u*points
    A = la.inv(points.T*np.diag(u)*points - c.T*c)/d    
    return np.asarray(A), np.squeeze(np.asarray(c))
</snippet></ROW><ROW><id>14025290</id><snippet>ctypes</snippet></ROW><ROW><id>14025290</id><snippet>c_char</snippet></ROW><ROW><id>14025290</id><snippet>0
1
368
b'\x01\x02'
</snippet></ROW><ROW><id>14025290</id><snippet>msgBuf</snippet></ROW><ROW><id>14025290</id><snippet>c_ubyte</snippet></ROW><ROW><id>14025290</id><snippet>ctypes</snippet></ROW><ROW><id>14025290</id><snippet>&gt;&gt;&gt; print repr(''.join(chr(x) for x in rxData.msgBuf))
'\x00\x00\x00\x00\x02\x00\x00\x00\x1e\x00\x00\x00%B5239512524 ...
</snippet></ROW><ROW><id>14025290</id><snippet>ctypes</snippet></ROW><ROW><id>14025290</id><snippet>import struct

data=b"\x01\x00\x00\x00\x70\x01\x00\x00\x00\x00\x00\x00\x01\x02\x00\x00\x02\x00\x00\x00\x1e\x00\x00\x00\x25\x42\x35\x32\x33\x39\x35\x31\x32\x35\x32\x34\x38\x39\x35\x30\x30\x36\x5e\x56\x45\x4e\x4b\x41\x54\x20\x52\x41\x47\x41\x56\x41\x4e\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x5e\x31\x36\x30\x34\x31\x30\x31\x31\x36\x35\x35\x36\x30\x30\x31\x34\x31\x30\x30\x30\x30\x30\x30\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3b\x35\x32\x33\x39\x35\x31\x32\x35\x32\x34\x38\x39\x35\x30\x30\x36\x3d\x31\x36\x30\x34\x31\x30\x31\x31\x34\x31\x30\x3f\x00\x00...\x00"

msg_offset = struct.calcsize('iii')
print struct.unpack_from('iii',data)
print repr(data[msg_offset:])
</snippet></ROW><ROW><id>14025290</id><snippet>(1, 368, 0)
'\x01\x02\x00\x00\x02\x00\x00\x00\x1e\x00\x00\x00%B5239512524895006^VENKAT RAGAVAN            ^16041011655600141000000?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00;5239512524895006=16041011410?\x00\x00...\x00'
</snippet></ROW><ROW><id>14025305</id><snippet>pexpect</snippet></ROW><ROW><id>14025305</id><snippet>import pexpect  # $ pip install pexpect

while var3:  # start ./test.sh again
    output = pexpect.run('./test.sh arg1', 
        timeout=x,  # terminate child process after x seconds
        events={r'(?i)question 1': var1,  # provide answers
                r'(?i)question 2': var2})  
</snippet></ROW><ROW><id>14025305</id><snippet>subprocess</snippet></ROW><ROW><id>14025305</id><snippet>pty</snippet></ROW><ROW><id>14025305</id><snippet>select</snippet></ROW><ROW><id>14025334</id><snippet>file = open(files, "r")
if userstring not in line:  #check if each file contains the lines
    print file
</snippet></ROW><ROW><id>14025334</id><snippet>with open(os.path.join(r, files), "r") as file:
    if ''.join(file.readlines()[:3]).strip() != userstring:
        print files
</snippet></ROW><ROW><id>14025488</id><snippet>sortkeys = dict((x[0], index) for index,x in enumerate(SortOrder))
SortedPairDict = sorted(PairDict.iteritems(),
                        key=lambda x: sortkeys[x[0][0]])
</snippet></ROW><ROW><id>14025488</id><snippet>sorted()</snippet></ROW><ROW><id>14025488</id><snippet>sorted()</snippet></ROW><ROW><id>14025488</id><snippet>&gt;&gt;&gt; sortkeys = dict((x[0], index) for index,x in enumerate(SortOrder))
&gt;&gt;&gt; SortedPairDict = sorted(PairDict.iteritems(),
...                         key=lambda x: sortkeys[x[0][0]])
&gt;&gt;&gt; SortedPairDict
[((38, 5), 5), ((38, 8), 20), ((19, 6), 13), ((2, 29), 10)]
</snippet></ROW><ROW><id>14025515</id><snippet>nonlocal</snippet></ROW><ROW><id>14025515</id><snippet>In [11]: def f():
        x=2
        def y():
                nonlocal x
                x+=3 ; print(x)
        y();print(x)
   ....:         

In [12]: f()
5
5
</snippet></ROW><ROW><id>14025515</id><snippet>In [240]: def f():
   .....:     f.x=2
   .....:     def y():
   .....:         f.x+=2
   .....:         print f.x
   .....:     y()    
   .....:     print f.x
   .....:     

In [241]: f()
4
4
</snippet></ROW><ROW><id>14025515</id><snippet>dictionary</snippet></ROW><ROW><id>14025515</id><snippet>In [264]: def f():
   .....:     dic={}
   .....:     dic['x']=2
   .....:     def y():
   .....:         dic['x']+=2
   .....:         print dic['x']
   .....:     y()    
   .....:     print dic['x']
   .....:     

In [265]: f()
4
4
</snippet></ROW><ROW><id>14025561</id><snippet>def show_results_async(text):
   query  =  { '$or':[{'title':{'$regex':text}},{'author':{'$regex':text}} ]}
   posts = Posts.objects(__raw__=(query))
   return jsonify(result=posts.to_dict())
</snippet></ROW><ROW><id>14025561</id><snippet>def to_dict(self):
   return helper.mongo_to_dict(self)
</snippet></ROW><ROW><id>14025561</id><snippet>def mongo_to_dict(obj):
return_data = []

if isinstance(obj, Document):
    return_data.append(("id",str(obj.id)))

for field_name in obj._fields:

    if field_name in ("id",):
        continue

    data = obj._data[field_name]

    if isinstance(obj._fields[field_name], DateTimeField):
        return_data.append((field_name, str(data.isoformat())))
    elif isinstance(obj._fields[field_name], StringField):
        return_data.append((field_name, str(data)))
    elif isinstance(obj._fields[field_name], FloatField):
        return_data.append((field_name, float(data)))
    elif isinstance(obj._fields[field_name], IntField):
        return_data.append((field_name, int(data)))
    elif isinstance(obj._fields[field_name], ListField):
        return_data.append((field_name, data))
    elif isinstance(obj._fields[field_name], EmbeddedDocumentField):
        return_data.append((field_name, mongo_to_dict(data)))

return dict(return_data)
</snippet></ROW><ROW><id>14025598</id><snippet>axis</snippet></ROW><ROW><id>14025598</id><snippet>apply</snippet></ROW><ROW><id>14025598</id><snippet>In [265]: f.apply(clean, axis=1)
Out[265]:
  level1
   item1 item2
0   1000  2000
1   2000  3000
2   3000  4000
</snippet></ROW><ROW><id>14025598</id><snippet>In [316]: f.index = [[1,2,3],[1,2,3]]

In [317]: f
Out[317]:
    level1
     item1  item2
1 1  1,000  2,000
2 2  2,000  3,000
3 3  3,000  4,000

In [314]: f.apply(clean, axis=1).reindex(f.index)
Out[314]:
    level1
     item1 item2
1 1   1000  2000
2 2   2000  3000
3 3   3000  4000
</snippet></ROW><ROW><id>14025621</id><snippet>class Variable(object):

    def __init__(self, value=None):
        if value is not None and not isinstance(value, ValueProducer):
            raise TypeError("Expected a ValueProducer.")
        self.__value = value

    def getValue(self):
        return self.__value.produce() if self.__value else None

    def setValue(self, value):
        if value is not None and not isinstance(value, ValueProducer):
            raise TypeError("Expected a ValueProducer.")
        self.__value = value


class ValueProducer(object):

    def produce(self):
        raise NotImplementedError()


class SimpleValueProducer(ValueProducer):

    def __init__(self, value):
        self.__value = value

    def produce(self):
        return self.__value


class HttpRequestValueProducer(ValueProducer):

    def __init__(self, url, params, method="GET"):
        self.__url = url
        self.__params = params
        self.__method = method

    def produce(self):
        # Implementation omitted.
        return "Stub for HTTP request: " \
             + ", ".join((self.__url, str(self.__params), self.__method)


&gt;&gt;&gt; v1 = Variable(SimpleValue("foo"))
&gt;&gt;&gt; print v1.getValue()
foo

&gt;&gt;&gt; v1.setValue(HttpRequestValue("http://localhost:8080", {"bar": "baz"}))
&gt;&gt;&gt; print v1.getValue()
Stub for HTTP request: http://localhost:8080, {'bar': 'baz'}, GET

&gt;&gt;&gt; v1.setValue("test")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "test3.py", line 13, in setValue
    raise TypeError("Expected a ValueProducer.")
TypeError: Expected a ValueProducer.

&gt;&gt;&gt; v2 = Variable()
&gt;&gt;&gt; print v2.getValue()
None
</snippet></ROW><ROW><id>14025767</id><snippet>S[0:a]</snippet></ROW><ROW><id>14025767</id><snippet>S[a:len(S)]</snippet></ROW><ROW><id>14025767</id><snippet>len(S)</snippet></ROW><ROW><id>14025767</id><snippet>S[:a]</snippet></ROW><ROW><id>14025767</id><snippet>S[a:]</snippet></ROW><ROW><id>14025767</id><snippet>S[0:a] + S[a:len(S)]</snippet></ROW><ROW><id>14025767</id><snippet>S</snippet></ROW><ROW><id>14025767</id><snippet>+</snippet></ROW><ROW><id>14025767</id><snippet>S[a+1:len(S)]</snippet></ROW><ROW><id>14025767</id><snippet>.index()</snippet></ROW><ROW><id>14025767</id><snippet>&gt;&gt;&gt; "hello".index("e")
1
</snippet></ROW><ROW><id>14025767</id><snippet>split()</snippet></ROW><ROW><id>14025767</id><snippet>+</snippet></ROW><ROW><id>14025767</id><snippet>S = input()
number_strings = S.split('+')
numbers = [int(n) for n in number_strings]
print sum(numbers)
</snippet></ROW><ROW><id>14025767</id><snippet>1+2+3</snippet></ROW><ROW><id>14025767</id><snippet>4</snippet></ROW><ROW><id>14025767</id><snippet>sum()</snippet></ROW><ROW><id>14025767</id><snippet>print sum(int(n) for n in input().split('+'))
</snippet></ROW><ROW><id>14025849</id><snippet>RichTextCtrl.LoadFile()</snippet></ROW><ROW><id>14025849</id><snippet>RichTextFileHandler</snippet></ROW><ROW><id>14025849</id><snippet>LoadStream()</snippet></ROW><ROW><id>14025849</id><snippet>from cStringIO import StringIO

# initialize a string stream with XML data
stream = StringIO( myXmlString )
# create an XML handler
handler = wx.richtext.RichTextXMLHandler()
# load the stream into the control's buffer
handler.LoadStream( myRichTextCtrl.GetBuffer(), stream )
# refresh the control
myRichTextCtrl.Refresh()
</snippet></ROW><ROW><id>14025849</id><snippet>RichTextCtrl</snippet></ROW><ROW><id>14025849</id><snippet>stream = StringIO()
handler = wx.richtext.RichTextHTMLHandler()
handler.SaveStream( myRichTextCtrl.GetBuffer(), stream )
print stream.getvalue()
</snippet></ROW><ROW><id>14025849</id><snippet># add the handler (where you create the control)
myRichTextCtrl.GetBuffer().AddHandler(wx.richtext.RichTextXMLHandler())
</snippet></ROW><ROW><id>14025849</id><snippet>stream = StringIO( myXmlString )
buffer = self.myRichTextCtrl.GetBuffer()
# you have to specify the type of data to load and the control
# must already have an instance of the handler to parse it
buffer.LoadStream(stream, wx.richtext.RICHTEXT_TYPE_XML)
myRichTextCtrl.Refresh()
</snippet></ROW><ROW><id>14025991</id><snippet>import nltk
text = "Hi, I want to get the bigram list of this string"
for item in nltk.bigrams (text.split()): print ' '.join(item)
</snippet></ROW><ROW><id>14025991</id><snippet>  def bigramReturner (tweetString):
    tweetString = tweetString.lower()
    tweetString = removePunctuation (tweetString)
    bigramFeatureVector = []
    for item in nltk.bigrams(tweetString.split()):
        bigramFeatureVector.append(' '.join(item))
    return bigramFeatureVector
</snippet></ROW><ROW><id>14026113</id><snippet>from sqlalchemy.orm import aliased

agent = aliased(User, name='agent')
manager = aliased(User, name='manager')
DBSession.query(
        agent.name, manager.name, MyStats.kpi_one, MyStats.kpi_two
    ).filter(
        agent.id == MyStats.agent,
        manager.id == MyStats.manager
    )
</snippet></ROW><ROW><id>14026174</id><snippet>$LD_LIBRARY_PATH</snippet></ROW><ROW><id>14026174</id><snippet>LDFLAGS</snippet></ROW><ROW><id>14026174</id><snippet>#{ldlibpath}</snippet></ROW><ROW><id>14026174</id><snippet>#{install_path}/lib</snippet></ROW><ROW><id>14026174</id><snippet>./configure --prefix=#{install_path} --with-threads --enable-shared \
--with-zlib=/usr/include LDFLAGS="-Wl,-rpath #{ldlibpath}"
</snippet></ROW><ROW><id>14026342</id><snippet>command = {}
command['skype'] = 'C:\Program Files (x86)\Skype\Phone', 'Skype.exe'
command['explorer'] = 'C:\Windows\', 'Explorer.exe'
</snippet></ROW><ROW><id>14026342</id><snippet>if raw_input.lower().strip() in command: # Check to see if input is defined in the dictionary.
   os.chdir(command[raw_input][0]) # Gets Tuple item 0 (e.g. C:\Program Files.....)
   os.startfile(command[myIraw_inputput][1]) # Gets Tuple item 1 (e.g. Skype.exe)
</snippet></ROW><ROW><id>14026342</id><snippet>Dictionaries</snippet></ROW><ROW><id>14026342</id><snippet>Tuples</snippet></ROW><ROW><id>14026342</id><snippet>for input in raw_input.split():
    if input.lower().strip() in command: # Check to see if input is defined in the dictionary.
       os.chdir(command[input][0]) # Gets Tuple item 0 (e.g. C:\Program Files.....)
       os.startfile(command[input][4]) # Gets Tuple item 1 (e.g. Skype.exe)
</snippet></ROW><ROW><id>14026342</id><snippet>skype explorer</snippet></ROW><ROW><id>14026342</id><snippet>explorer</snippet></ROW><ROW><id>14026342</id><snippet>explorer!</snippet></ROW><ROW><id>14026378</id><snippet>''.join(file.readlines()[:3]).strip()</snippet></ROW><ROW><id>14026378</id><snippet>*</snippet></ROW><ROW><id>14026378</id><snippet>[:3]</snippet></ROW><ROW><id>14026378</id><snippet>userstring</snippet></ROW><ROW><id>14026378</id><snippet>userlines = userstring.split('\n') # Separate the string into lines
with open(os.path.join(r, files), "r") as file:
    match = 0
    for line in file:
        if userlines[match] in line: # Check if the line at index `m` is in the user lines
            match += 1 # Next time check the following line
        elif match &gt; 0: # If there was no match, reset the counter
            match = 0
        if match &gt;= len(userlines): # If 3 consecutive lines match, then you found a match
            break
    if match == len(userlines): # You found a match
        print files
</snippet></ROW><ROW><id>14026378</id><snippet>*</snippet></ROW><ROW><id>14026378</id><snippet>in</snippet></ROW><ROW><id>14026378</id><snippet>re</snippet></ROW><ROW><id>14026378</id><snippet>&gt;&gt;&gt; a = '   This is a string.   '
&gt;&gt;&gt; a.strip()
'This is a string.' # removes the whitespace by default
&gt;&gt;&gt; a.strip('.')
'   This is a string.   ' # removes only dots
&gt;&gt;&gt; a.strip('. ')
'This is a string' # removes dots and spaces
</snippet></ROW><ROW><id>14026378</id><snippet>userstring</snippet></ROW><ROW><id>14026378</id><snippet>userstring</snippet></ROW><ROW><id>14026378</id><snippet>userlines = [s.strip('\n\r .') for s in userstring.split('\n')]
# ...
        if userlines[match] == line.strip('\n\r .'):
# ...
</snippet></ROW><ROW><id>14026378</id><snippet>startswith</snippet></ROW><ROW><id>14026378</id><snippet>endswith</snippet></ROW><ROW><id>14026378</id><snippet>strip</snippet></ROW><ROW><id>14026378</id><snippet>count</snippet></ROW><ROW><id>14026378</id><snippet>find</snippet></ROW><ROW><id>14026378</id><snippet>help(str)</snippet></ROW><ROW><id>14026401</id><snippet>auth = HttpNtlmAuth("domain\\%s" % username1, password), cookies = jar) 
</snippet></ROW><ROW><id>14026508</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.now()
datetime.datetime(2012, 12, 24, 18, 33, 46, 266943)
</snippet></ROW><ROW><id>14026508</id><snippet>import pymongo
from datetime import datetime

class AccountsDB():
    def __init__(self):
        pass
    def store_info(self, user_info=None):
        try:
            conn = pymongo.Connection('localhost', 27017)
            db_name = 'accountsdb'
            coll_name = 'user_info'
            db = conn[db_name]
            coll = db[coll_name]
            print "Successfully connected to '%s'" % db_name
            if user_info is not None:
                user_info['created_time'] = datetime.now()
                print user_info
                coll.insert(user_info)
            else:
                print 'No user_info'
            print "Data where stored in database"
        except:
            print "Some Error Occured"

a = AccountsDB()
a.store_info({})
</snippet></ROW><ROW><id>14026572</id><snippet>$</snippet></ROW><ROW><id>14026572</id><snippet>.findall()</snippet></ROW><ROW><id>14026572</id><snippet>found = re.findall(r'(?:[\d]{1,3})\.(?:[\d]{1,3})\.(?:[\d]{1,3})\.(?:[\d]{1,3})',text)
if regex:
    ips.extend(found)
</snippet></ROW><ROW><id>14026691</id><snippet># coding=utf8
</snippet></ROW><ROW><id>14026691</id><snippet>verbose_name=u'Imię'
</snippet></ROW><ROW><id>14026770</id><snippet>@login_required</snippet></ROW><ROW><id>14026770</id><snippet>user_points = Points.objects.filter(user=request.user)</snippet></ROW><ROW><id>14026779</id><snippet>request.args.get('myParam')
</snippet></ROW><ROW><id>14026779</id><snippet>request.args['myParam']
</snippet></ROW><ROW><id>14026779</id><snippet>myParam</snippet></ROW><ROW><id>14026857</id><snippet>In [272]: mask = '001001'

In [273]: num=123456

In [274]: "".join(x if y!='1' else '0' for x,y in zip(str(num),mask))
Out[274]: '120450'
</snippet></ROW><ROW><id>14026857</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>14026857</id><snippet>In [277]: mask = '001001'

In [278]: num=12345678

In [279]: "".join(x if y!='1' else '0' for x,y in izip_longest(str(num),mask,fillvalue="#"))
Out[279]: '12045078'
</snippet></ROW><ROW><id>14026864</id><snippet>&lt;h1&gt;|{{ points }}|&lt;/h1&gt;
</snippet></ROW><ROW><id>14026864</id><snippet>|</snippet></ROW><ROW><id>14026903</id><snippet>import X</snippet></ROW><ROW><id>14026903</id><snippet>ImportError</snippet></ROW><ROW><id>14026903</id><snippet>import gradmaker.models as gradmaker</snippet></ROW><ROW><id>14026903</id><snippet>from gradmaker import models as gradmaker</snippet></ROW><ROW><id>14026903</id><snippet>ImportError</snippet></ROW><ROW><id>14026903</id><snippet>import_module</snippet></ROW><ROW><id>14026910</id><snippet>fnmatch</snippet></ROW><ROW><id>14026910</id><snippet>import os
import sys
import re
import fnmatch

# Build a match pattern with optional periods and any amount of whitespace
# between the sentences.
userstring = re.compile(r"Copyright \(c\) 2012 Company, Inc\.?\sAll Rights Reserved\.?\sCompany Confidential and Proprietary\.?")

print len(sys.argv)
print sys.argv[1]
if len(sys.argv) &lt; 2:
    sys.exit('Usage: python.py &lt;build directory&gt;')
for path,dirs,files in os.walk(sys.argv[1]):
    for fname in files:
        # Test the filename for particular pattern matches.
        for pat in ['*.cpp','*.c','*.h']:
            if fnmatch.fnmatch(fname,pat):
                fullname = os.path.join(path,fname)
                with open(fullname) as f:
                    # This expects the copyright to be in the first 1000 bytes
                    # of the data to speed up the search.
                    if userstring.search(f.read(1000)):
                        print fullname
</snippet></ROW><ROW><id>14026910</id><snippet>blah
blah
Copyright (c) 2012 Company, Inc
All Rights Reserved.
Company Confidential and Proprietary.
blah
blah
blah
</snippet></ROW><ROW><id>14026922</id><snippet>if (! setlocale(LC_ALL, "ru_RU.utf8")) return PyErr_SetFromErrno(SetLocaleError);
wprintf(L"%ls\n", src);
</snippet></ROW><ROW><id>14026960</id><snippet>def points_list(self,thisUser):
       return super(PointsManager, self).get_query_set().filter(user=thisUser)
</snippet></ROW><ROW><id>14026960</id><snippet>{% for item in points %}

     &lt;tr&gt;
       &lt;td&gt;{{ item.points }}&lt;/td&gt;
     &lt;/tr&gt;
  {% endfor %}
</snippet></ROW><ROW><id>14027036</id><snippet>sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))</snippet></ROW><ROW><id>14027232</id><snippet>django.forms</snippet></ROW><ROW><id>14027232</id><snippet>form.XXX</snippet></ROW><ROW><id>14027232</id><snippet>from django import forms


class StudentForm(ModelForm):
    class Meta:
        model = Student

    subject = forms.CharField(label='New label')
</snippet></ROW><ROW><id>14027339</id><snippet>a = re.compile('p(?:resent)')
</snippet></ROW><ROW><id>14027339</id><snippet>a = re.compile('p(?:resent|eople)')
</snippet></ROW><ROW><id>14027494</id><snippet>import os
import webapp2
import logging
import json
from google.appengine.api import mail

class MainPage(webapp2.RequestHandler):

    def get(self):

        #If request comes from the App

        if self.request.referer == 'Your request.referer' :

            message = self.request.get('message')

            #If there is no message or message is empty

            if not message and len(message) == 0:

                self.response.headers.add_header('content-type', 'text/plain', charset='utf-8')

                self.response.out.write('An empty message cannot be submitted')

                return

            #Print message

            logging.info('Message : ' + message)

            #Set email properties

            user_address = 'user_address'
            sender_address = 'sender_address'
            subject = 'Subject'
            body = message

            #Send Email

            mail.send_mail(sender_address, user_address, subject, body)


        #If request comes from unknow sources

        else :

            self.response.headers.add_header('content-type', 'text/plain', charset='utf-8')

            self.response.out.write('This operation is not allowed')

            return

app = webapp2.WSGIApplication([('/', MainPage)])
</snippet></ROW><ROW><id>14027521</id><snippet>import csv
with open(filename, 'w') as outfile:
    writer = csv.writer(outfile)
    writer.writerow(['Word', 'Length'])
    for word in mylist:
        writer.writerow([word, str(len(word))])
</snippet></ROW><ROW><id>14027521</id><snippet>import csv
with open(filename, 'w') as outfile:
    writer = csv.writer(outfile)
    writer.writerow(['Word', 'Length'])
    for line in mylist:
        for word in line.split(", "):
            writer.writerow([word, str(len(word))])
</snippet></ROW><ROW><id>14027569</id><snippet>x</snippet></ROW><ROW><id>14027569</id><snippet>x = StringIO()</snippet></ROW><ROW><id>14027569</id><snippet>x = StringIO()</snippet></ROW><ROW><id>14027626</id><snippet>hello</snippet></ROW><ROW><id>14027626</id><snippet>@app.route('/')
def index():
   return "Main page"
</snippet></ROW><ROW><id>14027680</id><snippet>IndexError</snippet></ROW><ROW><id>14027680</id><snippet>try:
   wavefile = sys.argv[1]
except IndexError:
   wavfile = 'BeatBoy01.wav'

sr,x = scipy.io.wavfile.read(wavfile)
</snippet></ROW><ROW><id>14027680</id><snippet>BeatBoy01.wav</snippet></ROW><ROW><id>14027680</id><snippet>BeatBoy01.wav</snippet></ROW><ROW><id>14027680</id><snippet>OptParse</snippet></ROW><ROW><id>14027686</id><snippet>class MyClass(object):
    def __init__(self, foo, bar):
        self.foo = foo
        self.bar = bar
</snippet></ROW><ROW><id>14027686</id><snippet>namedtuple</snippet></ROW><ROW><id>14027773</id><snippet>jinja2</snippet></ROW><ROW><id>14027982</id><snippet>matplotlib</snippet></ROW><ROW><id>14027982</id><snippet>matplotlib</snippet></ROW><ROW><id>14027982</id><snippet>import pylab</snippet></ROW><ROW><id>14028073</id><snippet>&gt;&gt;&gt; st='first A) you have B) and then C)'
&gt;&gt;&gt; re.findall(r'[A-Z]\)',st)
['A)', 'B)', 'C)']
</snippet></ROW><ROW><id>14028073</id><snippet>&gt;&gt;&gt; re.findall('[A-Z]\\)',st)
['A)', 'B)', 'C)']
</snippet></ROW><ROW><id>14028073</id><snippet>test_file</snippet></ROW><ROW><id>14028073</id><snippet>re.findall</snippet></ROW><ROW><id>14028073</id><snippet>with open('file.txt','r') as f:
    for line in f:
        line_matches=re.findall(pattern,line)
        ... do something with a list of matches from that line
        ... next line
</snippet></ROW><ROW><id>14028073</id><snippet>with open('file.txt', 'r') as f:
    contents=f.read()
    file_matches=re.findall(pattern,contents,flags=re.MULTILINE)
    ... do something with a list of matches from the whole file
</snippet></ROW><ROW><id>14028523</id><snippet>span</snippet></ROW><ROW><id>14028523</id><snippet>self.span</snippet></ROW><ROW><id>14028523</id><snippet>def get_selection_manual(self, event):
    span = matplotlib.widgets.SpanSelector(self.ax, \
        self.process_selection_manual, "horizontal", useblit=True, \
        rectprops=dict(alpha=0.5, facecolor="red"))
</snippet></ROW><ROW><id>14028523</id><snippet>def get_selection_manual(self, event):
    self.span = matplotlib.widgets.SpanSelector(self.ax, \
        self.process_selection_manual, "horizontal", \
        rectprops=dict(alpha=0.5, facecolor="red"))
</snippet></ROW><ROW><id>14028523</id><snippet>useblit</snippet></ROW><ROW><id>14028611</id><snippet>with</snippet></ROW><ROW><id>14028611</id><snippet>with open("war.txt","w+") as myFile:
    for line in madList:
        line=line.split('A ')
        dnsreg= line[1]
        myFile.write(dnsreg)
</snippet></ROW><ROW><id>14028611</id><snippet>with</snippet></ROW><ROW><id>14028611</id><snippet>try...finally</snippet></ROW><ROW><id>14028611</id><snippet>try:
    myFile = open("war.txt", "w+")
    for line in madList:
    line=line.split('A ')
    dnsreg= line[1]
    myFile.write(dnsreg)
finally:
    myFile.close()
</snippet></ROW><ROW><id>14028611</id><snippet>finally</snippet></ROW><ROW><id>14028715</id><snippet>a</snippet></ROW><ROW><id>14028715</id><snippet>random_books = Book.objects.filter(author=a).order_by('?')[:5]
</snippet></ROW><ROW><id>14028715</id><snippet>from myapp.models import Book

def randbooks(author):
    return {'books': Book.objects.filter(author=author).order_by('?')[:5]}

register.inclusion_tag('book_listing.html')(randbooks)
</snippet></ROW><ROW><id>14028715</id><snippet>book_listing.html</snippet></ROW><ROW><id>14028715</id><snippet>&lt;ul&gt;
{% for book in books %}
   &lt;li&gt;{{ book }}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>14028715</id><snippet>{% for author in a %}
  {% randbooks author %}
{% endfor %}
</snippet></ROW><ROW><id>14028849</id><snippet>return render_to_response('home.html', {'articles': aa}, RequestContext(request))
</snippet></ROW><ROW><id>14028936</id><snippet>import rest_framework
</snippet></ROW><ROW><id>14029082</id><snippet>file = open('C:\\Users\\mihir\\Documents\\test.txt')
file = open(r'C:\Users\mihir\Documents\test.txt')
file = open('C:/Users/mihir/Documents/test.txt')
</snippet></ROW><ROW><id>14029300</id><snippet>import this</snippet></ROW><ROW><id>14029300</id><snippet>&gt;&gt;&gt; a = "Hello" if foo() else "Goodbye"
</snippet></ROW><ROW><id>14029300</id><snippet>&gt;&gt;&gt; i=100
&gt;&gt;&gt; a = 1 if i&lt;100 else 2 if i&gt;100 else 0
&gt;&gt;&gt; a
0
&gt;&gt;&gt; i=101
&gt;&gt;&gt; a = 1 if i&lt;100 else 2 if i&gt;100 else 0
&gt;&gt;&gt; a
2
&gt;&gt;&gt; i=99
&gt;&gt;&gt; a = 1 if i&lt;100 else 2 if i&gt;100 else 0
&gt;&gt;&gt; a
1
</snippet></ROW><ROW><id>14029421</id><snippet>add()</snippet></ROW><ROW><id>14029421</id><snippet>import tarfile

fp1 = open("hello.txt", "w")

tar = tarfile.open("myArchive.tar", "w")
tar.add("hello.txt")

fp1.write("Test String")
fp1.close()

tar.close()
</snippet></ROW><ROW><id>14029434</id><snippet>iptables -A</snippet></ROW><ROW><id>14029434</id><snippet>-A</snippet></ROW><ROW><id>14029434</id><snippet>iptables -I</snippet></ROW><ROW><id>14029434</id><snippet>#!/bin/bash

function getval {
    set -- $1
    RET=${2//[\",]/}
}
while read line
    do
        set -- $line
        if [[ "$1" == '"ip":' ]]
            then
                getval "$line"
                IPADDRESS=$RET
                read line
                getval "$line"
                CIDR=$RET
                read line
                getval  "$line"
                PROTOCOL=$RET
                read line
                getval "$line"
                PORT=$RET
                /sbin/iptables  -I INPUT -s "$IPADDRESS"/"$CIDR" -p "$PROTOCOL" -m "$PROTOCOL" --dport "$PORT" -j ACCEPT
             fi
    done &lt;file.json
</snippet></ROW><ROW><id>14029449</id><snippet>limit</snippet></ROW><ROW><id>14029449</id><snippet>get_object</snippet></ROW><ROW><id>14029449</id><snippet>def get_object(self, id, **args)</snippet></ROW><ROW><id>14029449</id><snippet>graph.get_object('coldplay/feed', limit=2)</snippet></ROW><ROW><id>14029732</id><snippet>//StackOverflow</snippet></ROW><ROW><id>14029732</id><snippet>with open(file) as inf:
    if inf.read(15) == "//StackOverflow":
        inf.seek(0)
        matches.append(inf.readlines())
</snippet></ROW><ROW><id>14029932</id><snippet>d={}
key=''
file2 = open("ref.txt",'r')
for line in file2.readlines():
    if line.startswith('&gt;'):
        key=line.strip()
        d[key]=[]
        continue
    d[key].append(line.strip())
file.close()
</snippet></ROW><ROW><id>14030016</id><snippet>common.core.middleware.RequestMiddleware</snippet></ROW><ROW><id>14030016</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>14030016</id><snippet>request.user</snippet></ROW><ROW><id>14030016</id><snippet>contribute_to_class</snippet></ROW><ROW><id>14030016</id><snippet>UserProfile</snippet></ROW><ROW><id>14030016</id><snippet>request.user.total_points</snippet></ROW><ROW><id>14030016</id><snippet>total_points</snippet></ROW><ROW><id>14030016</id><snippet>Point</snippet></ROW><ROW><id>14030405</id><snippet>msg.as_string()
str(msg)
repr(msg)
</snippet></ROW><ROW><id>14030464</id><snippet>words = {
    'gf': 'girlfriend',
    'bf': 'boyfriend',
    'btw': 'by the way',
    'hi': 'hello',
}

pat = re.compile(r"\b(%s)\b" % "|".join(words))

text = "The gf and the bf say hi btw."

new_text = pat.sub(lambda m: words.get(m.group()), text)

print new_text
</snippet></ROW><ROW><id>14030464</id><snippet>The girlfriend and the boyfriend say hello by the way.
</snippet></ROW><ROW><id>14030512</id><snippet>point_list</snippet></ROW><ROW><id>14030512</id><snippet>points_list = Points.objects.filter(user=request.user)
</snippet></ROW><ROW><id>14030512</id><snippet>points_total</snippet></ROW><ROW><id>14030512</id><snippet>points = Points.objects.filter(user=request.user) \
                       .aggregate(total_points=models.Sum('points'))
</snippet></ROW><ROW><id>14030616</id><snippet>user_id</snippet></ROW><ROW><id>14030616</id><snippet>column_property()</snippet></ROW><ROW><id>14030616</id><snippet>from sqlalchemy.orm import column_property

class Address(Base):
   ...
   user_id = Column(Integer, ForeignKey('user.id'))
   IsItAssigned = column_property(user_id != None)
</snippet></ROW><ROW><id>14030616</id><snippet>IsItAssigned</snippet></ROW><ROW><id>14030616</id><snippet>True</snippet></ROW><ROW><id>14030616</id><snippet>False</snippet></ROW><ROW><id>14030616</id><snippet>from sqlalchemy.ext.hybrid import hybrid_property

class Address(Base):
   ...
   user_id = Column(Integer, ForeignKey('user.id'))

   @hybrid_property
   def IsItAssigned(self):
       return self.user_id != None
</snippet></ROW><ROW><id>14030616</id><snippet>class Address(Base):
   ...
   user_id = Column(Integer, ForeignKey('user.id'))

   @property
   def IsItAssigned(self):
       return self.user_id is not None
</snippet></ROW><ROW><id>14030616</id><snippet>assigned</snippet></ROW><ROW><id>14030616</id><snippet>lower_case_with_underscores</snippet></ROW><ROW><id>14030645</id><snippet>syncdb</snippet></ROW><ROW><id>14030645</id><snippet>syncdb</snippet></ROW><ROW><id>14030645</id><snippet>manage.py reset qrgame</snippet></ROW><ROW><id>14030645</id><snippet>manage.py dbshell</snippet></ROW><ROW><id>14030645</id><snippet>manage.py sqlall qrgame</snippet></ROW><ROW><id>14030805</id><snippet>PIL.ImageFont</snippet></ROW><ROW><id>14030805</id><snippet>wx.Image</snippet></ROW><ROW><id>14030805</id><snippet>wx</snippet></ROW><ROW><id>14030952</id><snippet>const char*</snippet></ROW><ROW><id>14030952</id><snippet>char* bad = "Foo"; // wrong!
bad[0] = 'f'; // undefined behavior!
</snippet></ROW><ROW><id>14030952</id><snippet>const char* s = "Foo"; // correct
obj(s); // automatically converted to python string
</snippet></ROW><ROW><id>14030952</id><snippet>std::string s = "Bar"; // ok: std::string
obj(s); // automatically converted to python string

obj("Baz"); // ok: it's actually a const char*

char c = 'X'; // ok, single character
obj(c); // automatically converted to python string

signed char d = 42; // careful!
obj(d); // converted to integer (same for unsigned char)
</snippet></ROW><ROW><id>14030952</id><snippet>boost::python</snippet></ROW><ROW><id>14030952</id><snippet>const char*</snippet></ROW><ROW><id>14030952</id><snippet>std::string</snippet></ROW><ROW><id>14030952</id><snippet>char</snippet></ROW><ROW><id>14030952</id><snippet>std::wstring</snippet></ROW><ROW><id>14030952</id><snippet>char*</snippet></ROW><ROW><id>14030952</id><snippet>const char*</snippet></ROW><ROW><id>14030952</id><snippet>char*</snippet></ROW><ROW><id>14030952</id><snippet>char*</snippet></ROW><ROW><id>14030952</id><snippet>const char*</snippet></ROW><ROW><id>14030952</id><snippet>char* p = new char[4];
memcpy(p,"Foo",4); // include terminating '\0'
obj( const_cast&lt;const char*&gt;(p) );
delete [] p;
</snippet></ROW><ROW><id>14030957</id><snippet>sys.path</snippet></ROW><ROW><id>14030957</id><snippet>/usr/lib/python2.7/site-packages/ham</snippet></ROW><ROW><id>14030957</id><snippet>/usr/lib/python2.7/site-packages/ham
/usr/lib/python2.7/site-packages/ham/ham/util.py
</snippet></ROW><ROW><id>14030957</id><snippet>import util</snippet></ROW><ROW><id>14030957</id><snippet>util.py</snippet></ROW><ROW><id>14030957</id><snippet>util/__init__.py</snippet></ROW><ROW><id>14030957</id><snippet>ham.util</snippet></ROW><ROW><id>14031101</id><snippet>sched.scheduler</snippet></ROW><ROW><id>14031101</id><snippet>threading.Timer</snippet></ROW><ROW><id>14031101</id><snippet>sched.scheduler</snippet></ROW><ROW><id>14031101</id><snippet>delay</snippet></ROW><ROW><id>14031101</id><snippet>interval</snippet></ROW><ROW><id>14031101</id><snippet>threading.Timer</snippet></ROW><ROW><id>14031101</id><snippet>interval</snippet></ROW><ROW><id>14031101</id><snippet>interval</snippet></ROW><ROW><id>14031101</id><snippet>interval</snippet></ROW><ROW><id>14031101</id><snippet>sched.scheduler</snippet></ROW><ROW><id>14031101</id><snippet>threading.Timer</snippet></ROW><ROW><id>14031101</id><snippet>import timeit
import sched
import time
import logging
import sys

logger = logging.getLogger(__name__)
logging.basicConfig(level = logging.DEBUG,
                    format = '%(threadName)s: %(asctime)s: %(message)s',
                    datefmt = '%H:%M:%S')
schedule = sched.scheduler(timeit.default_timer, time.sleep)
delay = 5 # change to 3600 to schedule event in 1 hour

def interval():
    logger.info('All work and no play makes Jack a dull boy.')
    schedule.enter(delay = delay, priority = 1, action = interval, argument = ())
    # Uncomment this to see how scheduled events are delayed if interval takes a
    # long time. 
    # time.sleep(10) 

schedule.enter(delay = 0, priority = 1, action = interval, argument = ())
try:
    schedule.run()
except (KeyboardInterrupt, SystemExit):
    print('Exiting')
    sys.exit()
</snippet></ROW><ROW><id>14031157</id><snippet>(...)</snippet></ROW><ROW><id>14031157</id><snippet>(?:...)</snippet></ROW><ROW><id>14031157</id><snippet>accidentals = "(?:#|##|b|bb)?";
chords = "(?:maj|min|m|sus|aug|dim)?";
</snippet></ROW><ROW><id>14031157</id><snippet>re.findall(pattern, string, flags=0)</snippet></ROW><ROW><id>14031291</id><snippet>python grid.py heart_scale</snippet></ROW><ROW><id>14031291</id><snippet>cmd</snippet></ROW><ROW><id>14031291</id><snippet>cd C:\Python27
python grid.py heart_scale
</snippet></ROW><ROW><id>14031291</id><snippet>python C:\Python27\grid.py heart_scale
</snippet></ROW><ROW><id>14031549</id><snippet>application: bismillah
version: 1
runtime: python25
api_version: 1
</snippet></ROW><ROW><id>14031721</id><snippet>datetime</snippet></ROW><ROW><id>14031721</id><snippet>pip install python-dateutil</snippet></ROW><ROW><id>14031721</id><snippet>datetime</snippet></ROW><ROW><id>14031721</id><snippet>import dateutil.parser
datestr = '2012-12-25T08:52:00-05:00'
dateutil.parser.parse(datestr)
&gt;&gt;&gt; datetime.datetime(2012, 12, 25, 8, 52, tzinfo=tzoffset(None, -18000)) 
</snippet></ROW><ROW><id>14031835</id><snippet>u".mp4"</snippet></ROW><ROW><id>14031835</id><snippet>import os
import random

videodir = u"." # get videos from current directory
extensions = tuple(u".mkv .mp4 .tp .avi .ts .flv .mov".split())
files = [file for file in os.listdir(videodir) if file.endswith(extensions)]
if files: # at least one video file exists
    random_file = random.choice(files)
    os.startfile(os.path.join(videodir, random_file)) # start the video
else:
    print('No %s files found in "%s"' % ("|".join(extensions), videodir,))
</snippet></ROW><ROW><id>14031835</id><snippet>webbrowser.open()</snippet></ROW><ROW><id>14031835</id><snippet>os.startfile()</snippet></ROW><ROW><id>14031943</id><snippet>"w"</snippet></ROW><ROW><id>14032090</id><snippet>ExampleClass</snippet></ROW><ROW><id>14032090</id><snippet>session.add(a)</snippet></ROW><ROW><id>14032090</id><snippet>Session</snippet></ROW><ROW><id>14032090</id><snippet>ExampleClass</snippet></ROW><ROW><id>14032090</id><snippet>relationship()</snippet></ROW><ROW><id>14032090</id><snippet>a = ExampleClass(element_id=element_obj.id)
</snippet></ROW><ROW><id>14032090</id><snippet>relationship()</snippet></ROW><ROW><id>14032090</id><snippet>relationship()</snippet></ROW><ROW><id>14032090</id><snippet>session.query()</snippet></ROW><ROW><id>14032090</id><snippet>session.commit()</snippet></ROW><ROW><id>14032090</id><snippet>relationship()</snippet></ROW><ROW><id>14032090</id><snippet>session.query(ExampleClass).\
     filter_by(element=self.element).\
     filter_by(element2=element2)
</snippet></ROW><ROW><id>14032090</id><snippet>SomeClass.somerelationship=someobject</snippet></ROW><ROW><id>14032090</id><snippet>SomeClass.some_fk=some_id</snippet></ROW><ROW><id>14032090</id><snippet>Query()</snippet></ROW><ROW><id>14032090</id><snippet>Session</snippet></ROW><ROW><id>14032090</id><snippet>ExampleClass</snippet></ROW><ROW><id>14032090</id><snippet>element_obj</snippet></ROW><ROW><id>14032090</id><snippet>element_id</snippet></ROW><ROW><id>14032090</id><snippet>ExampleClass</snippet></ROW><ROW><id>14032090</id><snippet>session.query(ExampleClass).\
   filter_by(element_id=bindparam(callable_=lambda: self.element_id)).\
   filter_by(element2_id=element2.id)
</snippet></ROW><ROW><id>14032090</id><snippet>session.flush()
session.query(ExampleClass).\
   filter_by(element_id=self.element_id).\
   filter_by(element2_id=element2.id)
</snippet></ROW><ROW><id>14032090</id><snippet>element_id</snippet></ROW><ROW><id>14032090</id><snippet>relationship()</snippet></ROW><ROW><id>14032090</id><snippet>relationship()</snippet></ROW><ROW><id>14032090</id><snippet>autoflush</snippet></ROW><ROW><id>14032311</id><snippet>vec = np.vectorize(val_to_rgb)
rgb_data = vec(data)
</snippet></ROW><ROW><id>14032340</id><snippet>nick</snippet></ROW><ROW><id>14032340</id><snippet>administrators = ('nick1', 'nick2')

@hook.command
def someadmincommand(inp, nick=''):
    if nick not in administratiors:
        return 'I don't think so, {0}'.format(nick)

    # `nick` is an administrator, do your worst
</snippet></ROW><ROW><id>14032471</id><snippet>&gt;&gt;&gt; help(open)
Help on built-in function open in module io:

open(...)
    open(file, mode='r', buffering=-1, encoding=None,
         errors=None, newline=None, closefd=True, opener=None) -&gt; file object

    Open file and return a stream.  Raise IOError upon failure.

    file is either a text or byte string giving the name (and the path
    if the file isn't in the current working directory) of the file to
    be opened or an integer file descriptor of the file to be
    wrapped. (If a file descriptor is given, it is closed when the
    returned I/O object is closed, unless closefd is set to False.)

    [snip...]
</snippet></ROW><ROW><id>14032646</id><snippet>for char in source</snippet></ROW><ROW><id>14032646</id><snippet>None</snippet></ROW><ROW><id>14032646</id><snippet>None</snippet></ROW><ROW><id>14032646</id><snippet>""</snippet></ROW><ROW><id>14032646</id><snippet>get_page</snippet></ROW><ROW><id>14032646</id><snippet>for char in "google.com".lower():
    print(char)


# python test.py
g
o
o
g
l
e
.
c
o
m
</snippet></ROW><ROW><id>14032916</id><snippet>$("#input_location").html("{{team.location}}");
</snippet></ROW><ROW><id>14032916</id><snippet>{{team.location}}</snippet></ROW><ROW><id>14032916</id><snippet>$.ajax()</snippet></ROW><ROW><id>14032916</id><snippet>$(document).ready(function() {
    $('#chooseTeam').on('blur', function() {
        var currentTeam = $(this).val();
        if (!$.inArray(currentTeam, ['New Team', 'Select Team'])) {
            $("#input_location").attr('disabled', 'disabled');
        }
    });
});
</snippet></ROW><ROW><id>14033112</id><snippet>*</snippet></ROW><ROW><id>14033112</id><snippet>**</snippet></ROW><ROW><id>14033112</id><snippet>***</snippet></ROW><ROW><id>14033243</id><snippet>re.findall</snippet></ROW><ROW><id>14033243</id><snippet>results = [r for k in keywords for r in re.findall(k, message.lower())] 
</snippet></ROW><ROW><id>14033364</id><snippet>user.groups</snippet></ROW><ROW><id>14033364</id><snippet>.filter(…)</snippet></ROW><ROW><id>14033364</id><snippet>user__groups=group</snippet></ROW><ROW><id>14033364</id><snippet>Photo.objects.filter(user__group=group).order_by('?')[:5]
</snippet></ROW><ROW><id>14033364</id><snippet>GROUP BY</snippet></ROW><ROW><id>14033364</id><snippet>RANDOM()</snippet></ROW><ROW><id>14033389</id><snippet>{{team.name}}</snippet></ROW><ROW><id>14033389</id><snippet>Team</snippet></ROW><ROW><id>14033389</id><snippet>$.ajax()</snippet></ROW><ROW><id>14033426</id><snippet>filter</snippet></ROW><ROW><id>14033426</id><snippet>new_list = filter(lambda foo: foo.location == 2, foos)
</snippet></ROW><ROW><id>14033426</id><snippet>new_list = [foo for foo in foos if foo.location == 2]
</snippet></ROW><ROW><id>14033586</id><snippet>short_description</snippet></ROW><ROW><id>14033586</id><snippet>allow_tags</snippet></ROW><ROW><id>14033586</id><snippet>def processing(obj):
      #do something
      pass
</snippet></ROW><ROW><id>14033586</id><snippet>class RealestateAdmin(...):
   list_display = [processing,]

   def processing(obj):
       return utils.processing(obj)
   processing.short_description = 'realestate app result'
   processing.allow_tags = True


class PartyAdmin(...):
   list_display = [processing,]

   def processing(obj):
       return utils.processing(obj)
   processing.short_description = 'party app result'
   processing.allow_tags = False
</snippet></ROW><ROW><id>14033650</id><snippet>print</snippet></ROW><ROW><id>14033650</id><snippet>print</snippet></ROW><ROW><id>14033724</id><snippet>`class MyWidget(Widget):`
</snippet></ROW><ROW><id>14033724</id><snippet>MyWidget</snippet></ROW><ROW><id>14033724</id><snippet>Widget</snippet></ROW><ROW><id>14033724</id><snippet>MyWidget</snippet></ROW><ROW><id>14033724</id><snippet>with self.canvas.before:
    Color(1,0,0,1)
    Rectangle(pos=self.pos, size=self.size)
</snippet></ROW><ROW><id>14033724</id><snippet>from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.widget import Widget
from kivy.uix.gridlayout import GridLayout
from kivy.graphics import *


class MyWidget(Widget):

    def __init__(self, **kwargs):
        # I'd make sure to pass of kwargs through to the super
        # as there are widgets's that process their initial
        # arguments through.
        super(MyWidget, self).__init__(**kwargs)

        grid_layout = GridLayout(cols=3)
        grid_layout.add_widget(Button(text='A'))
        grid_layout.add_widget(Button(text='B'))
        grid_layout.add_widget(Label(text='text'))
        grid_layout.add_widget(Label(text='other'))
        grid_layout.add_widget(Button(text='text'))
        self.add_widget(grid_layout)
        with self.canvas.before:
            Color(1,0,0,1)
            Rectangle(pos=self.pos, size=self.size)


class MyApp(App):
    def build(self):
        return MyWidget()

if __name__ == '__main__':
    MyApp().run()
</snippet></ROW><ROW><id>14033724</id><snippet>...
        grid_layout.add_widget(Button(text='text'))
        self.add_widget(grid_layout)
        with self.canvas.before:
            Color(1,0,0,1)
            self.rect = Rectangle(pos=self.pos, size=self.size)
        self.bind(size=self.update_rect)

    def update_rect(self, instance, value):
        self.rect.pos = self.pos
        self.rect.size = self.size

class MyApp(App):
    def build(self):
...
</snippet></ROW><ROW><id>14033724</id><snippet>from kivy.app import App
from kivy.uix.widget import Widget
from kivy.lang import Builder

Builder.load_string('''
# this is the rule for MyWidget that defines
# what MyWidget looks like i.e.drawing
# instructions and widgets etc 
&lt;MyWidget&gt;:
    canvas.before:
        Color:
            rgba: 1, 0, 0, 1
        Rectangle:
            # this implicitly binds the size of the
            # rect to the size of the widget
            size: self.size
            # self here still refers to the widget as Rectangle is only a
            # graphics instruction and not a widget
            pos: self.pos
    GridLayout:
        cols: 3
        # root here refers to the `MyWidget`, bind the size of the
        # GridLayout to the size of your root widget
        size: root.size
        Button:
            text: 'A'
        Button:
            text: 'B'
        Label:
            text: 'text'
        Label:
            text: 'other'
        Button:
            text: 'text'        
''')


class MyWidget(Widget):
    pass


class MyApp(App):
    def build(self):
        return MyWidget()

if __name__ == '__main__':
    MyApp().run()
</snippet></ROW><ROW><id>14033837</id><snippet>(\d+(?:\.\d{1,2})?)\D*(\d+)
</snippet></ROW><ROW><id>14033961</id><snippet>import multiprocessing as mlp
import imaplib as impl

def somefunc(domain, name, password, dirc):
    mail = impl.IMAP4_SSL(domain)
    mail.login(name, password)
    mail.select(dirc)
    result, data = mail.uid("search", None, "All")
    uids = data[0].split()
    print dirc
    for mail_id in uids:
       result, data = mail.uid("fetch", mail_id, "(RFC822)")

if __name__ == '__main__':
    jobs = []

    for box in ("INBOX", "Sent"):
        p = mlp.Process(
                target = somefunc, 
                args = ("somedomain", "username", "password", box)
            )
        jobs.append(p)
        p.start()

    for i in jobs:
        i.join()
</snippet></ROW><ROW><id>14033994</id><snippet>NoticeSetting</snippet></ROW><ROW><id>14033994</id><snippet>should_send</snippet></ROW><ROW><id>14034055</id><snippet>QGridLayout</snippet></ROW><ROW><id>14034100</id><snippet>r'[^/]*$'
</snippet></ROW><ROW><id>14034100</id><snippet>'/'</snippet></ROW><ROW><id>14034100</id><snippet>r'[^/#?]*(?:$|[#?])'
</snippet></ROW><ROW><id>14034100</id><snippet>$</snippet></ROW><ROW><id>14034100</id><snippet>[#?]</snippet></ROW><ROW><id>14034100</id><snippet>(?:...)</snippet></ROW><ROW><id>14034100</id><snippet> ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
  12            3  4          5       6  7        8 9
</snippet></ROW><ROW><id>14034169</id><snippet>finally</snippet></ROW><ROW><id>14034820</id><snippet>SETTINGS_DIR = os.path.dirname(os.path.realpath(__file__))
</snippet></ROW><ROW><id>14034820</id><snippet>BUILDOUT_DIR = os.path.abspath(os.path.join(SETTINGS_DIR, '..'))
</snippet></ROW><ROW><id>14034820</id><snippet>STATIC_ROOT = os.path.join(BUILDOUT_DIR, 'var', 'static')
STATIC_URL = '/static_media/'
MEDIA_ROOT = os.path.join(BUILDOUT_DIR, 'var', 'media')
MEDIA_URL = '/media/'
</snippet></ROW><ROW><id>14034820</id><snippet>&lt;a href="{{MEDIA_URL}}{{ case.zoomOutImage }}"&gt;&lt;img src="{{MEDIA_URL}}{{ case.zoomOutImage }}" width="100%"&gt;&lt;/a&gt;
</snippet></ROW><ROW><id>14034820</id><snippet>if settings.DEBUG:
    urlpatterns += patterns('',
        (r'', include('staticfiles.urls')),
    )
</snippet></ROW><ROW><id>14035195</id><snippet>float</snippet></ROW><ROW><id>14035195</id><snippet>int</snippet></ROW><ROW><id>14035195</id><snippet>with open('text.txt', 'r') as theOpenFile:
    highest = 0
    for myCurrentString in theOpenFile:
        stringArray = myCurrentString.split()

        try:
            series = float(stringArray[0].split('.')[0])
        except ValueError:
            # The input wasn't a number, so we just skip it and go on
            # to the next one
            continue

        if series &gt; highest:
            highest = series
            print "Highest = " + series

        print series
</snippet></ROW><ROW><id>14035195</id><snippet>with open('text.txt', 'r') as handle:
    numbers = []

    for line in handle:
        field = line.split()[0]

        try:
            numbers.append(float(field))  # Or `int()`
        except ValueError:
            print field, "isn't a number"
            continue

    highest = max(numbers)
</snippet></ROW><ROW><id>14035347</id><snippet>import json

def convertToString(dlist):
    temp_dict = dict((item['field_id'], item) for item in dlist)
    return json.dumps(temp_dict)
    # or, even shorter, and in Python 2.7/3.2+
    # return json.dumps({item['field_id']: item for item in dlist})
</snippet></ROW><ROW><id>14035347</id><snippet>dlist_str += item[key].decode('utf-8')
</snippet></ROW><ROW><id>14035451</id><snippet>manage</snippet></ROW><ROW><id>14035451</id><snippet>','.join(line.strip() for line in manage.values())</snippet></ROW><ROW><id>14035796</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14035796</id><snippet>DISLIN/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/dislin
</snippet></ROW><ROW><id>14035837</id><snippet>Customer(int _customerId, String _name){
</snippet></ROW><ROW><id>14035837</id><snippet>public Customer(int _customerId, String _name){
</snippet></ROW><ROW><id>14035897</id><snippet>rasterized=True</snippet></ROW><ROW><id>14035897</id><snippet>col = collections.PolyCollection(&lt;arguments&gt;, rasterized=True)
</snippet></ROW><ROW><id>14035897</id><snippet>plot</snippet></ROW><ROW><id>14035897</id><snippet>imshow</snippet></ROW><ROW><id>14035897</id><snippet>rasterized</snippet></ROW><ROW><id>14035897</id><snippet>fig = plt.figure()
a = fig.add_subplot(1,1,1, rasterized=True)
</snippet></ROW><ROW><id>14035955</id><snippet>for word in self.index</snippet></ROW><ROW><id>14035955</id><snippet>if url not in self.index[keyword]</snippet></ROW><ROW><id>14035955</id><snippet>self.index[keyword]</snippet></ROW><ROW><id>14035955</id><snippet>from collections import defaultdict

def __init__(self, ...):
    self.index = defaultdict(set)
    # ...

def add_page_to_index(self, page):
    for keyword in page.get_text().split():
        self.add_to_index(keyword, page)

def add_to_index(self, keyword, page):
    self.index[keyword].add(page)
</snippet></ROW><ROW><id>14036471</id><snippet>PyQt4\bin</snippet></ROW><ROW><id>14036471</id><snippet>PyQt4</snippet></ROW><ROW><id>14036721</id><snippet>&gt;&gt;&gt; x
array([1, 2, 3, 4, 5])
&gt;&gt;&gt; x[[1, 3]]
array([2, 4])
</snippet></ROW><ROW><id>14037115</id><snippet>&gt;&gt;&gt; from SimpleCV import *
&gt;&gt;&gt; image = Image('image.png')
&gt;&gt;&gt; binarized = image.binarize(220).invert()
&gt;&gt;&gt; binarized.show()
</snippet></ROW><ROW><id>14037115</id><snippet>&gt;&gt;&gt; blobs = binarized.findBlobs()
&gt;&gt;&gt; for blob in blobs:
...    blob.draw()
...    print blob
...    binarized.show()
...    raw_input()
</snippet></ROW><ROW><id>14037115</id><snippet>&gt;&gt;&gt; rabbit = next(b for b in blobs if abs(750 - b.area()) &lt; 60)
&gt;&gt;&gt; rabbit.draw()
&gt;&gt;&gt; binarized.show()
&gt;&gt;&gt; rabbit
    SimpleCV.Features.Blob.Blob object at (381, 445) with area 754
</snippet></ROW><ROW><id>14037115</id><snippet>from SimpleCV import *

image = Image('image.png')
binarized = image.binarize(220).invert()
blobs = binarized.findBlobs()
rabbit = next(b for b in blobs if abs(750 - b.area()) &lt; 60)

print rabbit.coordinates()
</snippet></ROW><ROW><id>14037181</id><snippet>794bb3cfcd04dcd309c28ae214a59003be49d0a5</snippet></ROW><ROW><id>14037181</id><snippet>$ python -c 'from BDBStorage.BerkeleyBase import BerkeleyConfig'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "BDBStorage/BerkeleyBase.py", line 31, in &lt;module&gt;
    from ZODB.lock_file import LockFile
ImportError: No module named ZODB.lock_file
</snippet></ROW><ROW><id>14037184</id><snippet>props = set([k for k in u.properties().keys() for u in users])
</snippet></ROW><ROW><id>14037184</id><snippet>props = set([k for u in users for k in u.properties().keys() ])
</snippet></ROW><ROW><id>14037184</id><snippet>props = set(k for u in users for k in u.properties().keys() )
</snippet></ROW><ROW><id>14037184</id><snippet>set([k for k in u.properties().keys() for u in users])
</snippet></ROW><ROW><id>14037184</id><snippet>for k in u.properties().keys(): # Here u is undefined
    for u in users:
        #what ever
</snippet></ROW><ROW><id>14037184</id><snippet>u</snippet></ROW><ROW><id>14037184</id><snippet>[u.properties().keys() for u in users]
</snippet></ROW><ROW><id>14037184</id><snippet>u</snippet></ROW><ROW><id>14037184</id><snippet>set([k for k in u.properties().keys() for u in users])
</snippet></ROW><ROW><id>14037184</id><snippet>&gt;&gt;&gt; del i
&gt;&gt;&gt; foo = [range(1,10) for _ in range(10)]
&gt;&gt;&gt; globals()['i']

Traceback (most recent call last):
  File "&lt;pyshell#84&gt;", line 1, in &lt;module&gt;
    globals()['i']
KeyError: 'i'
&gt;&gt;&gt; [i for i in foo]
[[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]
&gt;&gt;&gt; globals()['i']
[1, 2, 3, 4, 5, 6, 7, 8, 9]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14037187</id><snippet>r'^books/author/(?P&lt;id&gt;\d+)/(?:(?P&lt;slug&gt;[-\w]+)/)?$'
</snippet></ROW><ROW><id>14037564</id><snippet>import csv

with open("output.csv", "wb") as f:
    writer = csv.writer(f)
    writer.writerows(a)
</snippet></ROW><ROW><id>14037564</id><snippet>a</snippet></ROW><ROW><id>14037564</id><snippet>csv.writer()</snippet></ROW><ROW><id>14037756</id><snippet>$request</snippet></ROW><ROW><id>14037756</id><snippet>content</snippet></ROW><ROW><id>14037756</id><snippet>#!/usr/bin/python

import urllib

url = "http://localhost:8088/ctasd/GetStatus"
print urllib.urlopen(url, "X-CTCH-PVer: 0000001").read()
</snippet></ROW><ROW><id>14037919</id><snippet>__init__</snippet></ROW><ROW><id>14037919</id><snippet>x = 1</snippet></ROW><ROW><id>14037919</id><snippet>int</snippet></ROW><ROW><id>14037919</id><snippet>class main(object):
    x = 1
</snippet></ROW><ROW><id>14037919</id><snippet>class main(object):
    def __init__(self):
        self.x = 1
</snippet></ROW><ROW><id>14037919</id><snippet>mongoengine</snippet></ROW><ROW><id>14037919</id><snippet>django</snippet></ROW><ROW><id>14037919</id><snippet>__init__</snippet></ROW><ROW><id>14037919</id><snippet>class mymodel(models.model):
    name = models.CharField(max_length=20)
    url = models.UrlField()
</snippet></ROW><ROW><id>14037919</id><snippet>x=1</snippet></ROW><ROW><id>14037919</id><snippet>__init__</snippet></ROW><ROW><id>14037919</id><snippet>__init__</snippet></ROW><ROW><id>14037919</id><snippet>__init__</snippet></ROW><ROW><id>14037919</id><snippet>Person</snippet></ROW><ROW><id>14037919</id><snippet>Person</snippet></ROW><ROW><id>14037919</id><snippet>import datetime
class Person(object):
    def __init__(self, age):
        self.age = age
        self.birth_year = (datetime.date.today() - datetime.timedelta(days=age*365)).year
</snippet></ROW><ROW><id>14037919</id><snippet>&gt;&gt;&gt;joe = Person(23)
&gt;&gt;&gt;joe.age
23
&gt;&gt;&gt;joe.birth_year
1990
</snippet></ROW><ROW><id>14037919</id><snippet>__init__</snippet></ROW><ROW><id>14037919</id><snippet>age</snippet></ROW><ROW><id>14038176</id><snippet>codecs.open("C:\\NLP\\output.txt", "w", "utf-8" )
</snippet></ROW><ROW><id>14038227</id><snippet>from bs4 import BeautifulSoup
soup = BeautifulSoup(s)
print soup.prettify()


&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
 &lt;head&gt;
  &lt;script language="JavaScript"&gt;
   &lt;!--
     function setTimeOffsetVars (Link) { 
   // code removed
 } 

&lt;!-- Image Preloader - takes an array of images to preload --&gt; 
    function warningCheck(e, warnMsg) {
   // code removed
}
--&gt;
  &lt;/script&gt;
 &lt;/head&gt;
 &lt;body bottommargin="0" leftmargin="0" marginheight="0" marginwidth="0" rightmargin="0" topmargin="0"&gt;
  &lt;!-- lot of useful code --&gt;
 &lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>14038506</id><snippet>list_of_dicts = [
    {'completed__sum': 1, 'offer__count': 2, 'offer': 1},
    {'completed__sum': 0, 'offer__count': 1, 'offer': 2}]

dictionary = dict((d['offer'], dict((k, v) for k, v in d.items() if k != 'offer')) for d in list_of_dicts)

print dictionary
&gt;&gt;&gt; 
{1: {'completed__sum': 1, 'offer__count': 2}, 2: {'completed__sum': 0, 'offer__count': 1}}
</snippet></ROW><ROW><id>14038506</id><snippet>dictionary = dict((d.pop('offer'), d) for d in list_of_dicts)
</snippet></ROW><ROW><id>14038640</id><snippet>get_meetings = Meeting.objects.filter(created_by = user_id.id, date_created__lte = datetime.date.today())[index:limit]
</snippet></ROW><ROW><id>14038726</id><snippet>import os</snippet></ROW><ROW><id>14038913</id><snippet>testname</snippet></ROW><ROW><id>14038913</id><snippet>def assertion(testname=testname):
    def function(self):
        return self.assertTrue(testname in globals()) and issubclass(getattr(globals(), testname), TestCase))

    return function

setattr(Test_TestCases, "test_%s_is_tested" % item, assertion())
</snippet></ROW><ROW><id>14039063</id><snippet>source: '/search'</snippet></ROW><ROW><id>14039063</id><snippet>@app.route('/search')
def search():
    # If it's a GET request, the data will be provided as request.args.  In case
    # of POST or PUT you'll have to use request.data or request.json (depends on
    # how the plugin is sending the data).
    query = request.args.get('query')
    # Perform the search here.
    results = ...
    # What to return here depends on what the plugin expects, consult the docs
    # to figure this out.  Most likely it'll be some JSON encoded data structure.
    return jsonify(results=results)
</snippet></ROW><ROW><id>14039471</id><snippet>Model(**param_dict["Model"]).save()
</snippet></ROW><ROW><id>14039471</id><snippet>id</snippet></ROW><ROW><id>14039471</id><snippet>get</snippet></ROW><ROW><id>14039471</id><snippet>m = Model.objects.get(id=param_dict['id'])
m.field = param_dict['some_field']
m.save()
</snippet></ROW><ROW><id>14039471</id><snippet>Model.objects.filter(id=param_dict['id']).update(**param_dict['Model'])
</snippet></ROW><ROW><id>14039471</id><snippet>save</snippet></ROW><ROW><id>14039471</id><snippet>INSERT</snippet></ROW><ROW><id>14039471</id><snippet>UPDATE</snippet></ROW><ROW><id>14039471</id><snippet>post_data</snippet></ROW><ROW><id>14039471</id><snippet>save</snippet></ROW><ROW><id>14039471</id><snippet>dict = {'id': 1, 'field1': 'my_value'}
m = Model(**dict)
m.id       # 1
m.field1   # my_value
m.field2   # None (because you haven't set it, it defaults to None
m.save()   # UPDATEs the existing instance with id 1 with ALL of the values of `m`
</snippet></ROW><ROW><id>14039471</id><snippet>None</snippet></ROW><ROW><id>14039471</id><snippet>get</snippet></ROW><ROW><id>14039589</id><snippet>resample</snippet></ROW><ROW><id>14039589</id><snippet>how</snippet></ROW><ROW><id>14039589</id><snippet>In [31]: from pandas.io import data as web

# read some example data, note that this is not exactly your data!
In [32]: s = web.get_data_yahoo('AAPL', start='2009-01-02',
...                             end='2009-12-31')['Adj Close']

# resample to business month and return the last value in the period
In [34]: monthly = s.resample('BM', how=lambda x: x[-1])

In [35]: monthly
Out[35]: 
Date
2009-01-30     89.34
2009-02-27     88.52
2009-03-31    104.19
...
2009-10-30    186.84
2009-11-30    198.15
2009-12-31    208.88
Freq: BM

In [36]: monthly.pct_change()
Out[36]: 
Date
2009-01-30         NaN
2009-02-27   -0.009178
2009-03-31    0.177022
...
2009-10-30    0.016982
2009-11-30    0.060533
2009-12-31    0.054151
Freq: BM
</snippet></ROW><ROW><id>14039648</id><snippet>QWebView.page().networkAccessManager().cookieJar()</snippet></ROW><ROW><id>14039648</id><snippet>setCookieJar()</snippet></ROW><ROW><id>14039758</id><snippet>QLineEdit</snippet></ROW><ROW><id>14039758</id><snippet>QCompleter</snippet></ROW><ROW><id>14039758</id><snippet>QLineEdit</snippet></ROW><ROW><id>14040279</id><snippet>with open('host.txt', 'r') as inf:
    lines = inf.readlines()
    hostlist = [ln.split() for ln in lines]
</snippet></ROW><ROW><id>14040279</id><snippet>hostlist</snippet></ROW><ROW><id>14040279</id><snippet>[['192.168.0.23', 'root', 'secret'], ['192.168.0.24', 'root', 'secret2'] ...
</snippet></ROW><ROW><id>14040279</id><snippet>subprocess</snippet></ROW><ROW><id>14040279</id><snippet>rsync</snippet></ROW><ROW><id>14040279</id><snippet>status = subprocess.check_output(['rsync', '-av', localdir, remotedir])
</snippet></ROW><ROW><id>14040279</id><snippet>localdir</snippet></ROW><ROW><id>14040279</id><snippet>hostname::directory</snippet></ROW><ROW><id>14040279</id><snippet>ssh</snippet></ROW><ROW><id>14040279</id><snippet>authorized_keys</snippet></ROW><ROW><id>14040610</id><snippet>def parse(source):

    def expr(tokens):
        t = tokens.pop(0)
        if t != '(':
            return {'value': t}
        key, val = tokens.pop(0), {}
        while tokens[0] != ')':
            val.update(expr(tokens))
        tokens.pop(0)
        return {key:val}

    tokens = re.findall(r'\(|\)|[^\s()]+', source)
    lst = []
    while tokens:
        lst.append(expr(tokens))
    return lst
</snippet></ROW><ROW><id>14040610</id><snippet>[{'device': {'vfb': {'location': {'value': '0.0.0.0:5900'}, 'xxxxxxxx': {}}}},
 {'device': {'console': {'location': {'value': '80'}, 'xxxxxxxx': {}}}}]
</snippet></ROW><ROW><id>14040610</id><snippet>for item in parse(source):
    try:
        location = item['device']['vfb']['location']['value']
    except KeyError:
        pass
</snippet></ROW><ROW><id>14041671</id><snippet>class toy(object):
    pass

a = toy()
a.key1 = "hello world"
print a.key10
</snippet></ROW><ROW><id>14041671</id><snippet>&gt; pylint toto.py
************* Module toto
C:  1,0: Black listed name "toto"
C:  1,0: Missing docstring
C:  1,0:toy: Invalid name "toy" (should match [A-Z_][a-zA-Z0-9]+$)
C:  1,0:toy: Missing docstring
W:  5,0: Attribute 'key1' defined outside __init__
R:  1,0:toy: Too few public methods (0/2)
C:  4,0: Invalid name "a" (should match (([A-Z_][A-Z0-9_]*)|(__.*__))$)
E:  6,6: Instance of 'toy' has no 'key10' member
</snippet></ROW><ROW><id>14041671</id><snippet>&gt;&gt;&gt; class toy(object):
...     pass
... 
&gt;&gt;&gt; a = toy()
&gt;&gt;&gt; a.key1 = "hello world"
&gt;&gt;&gt; dir(a)
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'key1']
</snippet></ROW><ROW><id>14041871</id><snippet>if not img.getbbox():
</snippet></ROW><ROW><id>14041871</id><snippet>Image.getbbox()</snippet></ROW><ROW><id>14041871</id><snippet>None</snippet></ROW><ROW><id>14041871</id><snippet>if not ImageChops.invert(img).getbbox():
</snippet></ROW><ROW><id>14041871</id><snippet>img.getextrema()</snippet></ROW><ROW><id>14041871</id><snippet>extrema = img.convert("L").getextrema()
if extrema == (0, 0):
    # all black
elif extrema == (1, 1):
    # all white
</snippet></ROW><ROW><id>14041871</id><snippet>if sum(img.convert("L").getextrema()) in (0, 2):
    # either all black or all white
</snippet></ROW><ROW><id>14041989</id><snippet>for day in timestamps:
    positions.append(empty_row)
</snippet></ROW><ROW><id>14041989</id><snippet>for day in timestamps:
    positions.append([0]*len(symbols))
</snippet></ROW><ROW><id>14041989</id><snippet>positions = [symbols]
positions.extend([[0]*len(symbols) for day in timestamps])
</snippet></ROW><ROW><id>14042197</id><snippet>widgets = [deadparrotlabel, sillywalkslabel, ... ]
for w in widgets:
    w.config(state=DISABLED)
</snippet></ROW><ROW><id>14042521</id><snippet>    c._C1__pri
</snippet></ROW><ROW><id>14042521</id><snippet>c.__private</snippet></ROW><ROW><id>14042521</id><snippet>c.__pri</snippet></ROW><ROW><id>14042521</id><snippet>__pri</snippet></ROW><ROW><id>14042521</id><snippet>class Parent: 
    def __method(self): 
        print 'Parent method'

class Child(Parent): 
    def __method(self): 
        print 'Child method'

&gt;&gt;&gt; c = Child()
&gt;&gt;&gt; c._Child__method()
Child method
&gt;&gt;&gt; c._Parent__method()
Parent method
</snippet></ROW><ROW><id>14042671</id><snippet>app.logger.setLevel()</snippet></ROW><ROW><id>14042671</id><snippet>    @app.errorhandler(500)
    def internal_error(exception):
        app.logger.exception(exception)
        return render_template('500.html'), 500
</snippet></ROW><ROW><id>14042671</id><snippet>    try:
        #code
    except:
        #code
        raise
</snippet></ROW><ROW><id>14042671</id><snippet>if app.debug is not True:   
    import logging
    from logging.handlers import RotatingFileHandler
    file_handler = RotatingFileHandler('python.log', maxBytes=1024 * 1024 * 100, backupCount=20)
    file_handler.setLevel(logging.ERROR)
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    file_handler.setFormatter(formatter)
    app.logger.addHandler(file_handler)
</snippet></ROW><ROW><id>14042738</id><snippet>celeryd &lt;other opts&gt; -Q:fast fast_queue c:fast 5 -Q:slow slow_queue -c:slow 1
</snippet></ROW><ROW><id>14043126</id><snippet>returncode</snippet></ROW><ROW><id>14043126</id><snippet>process = subprocess.Popen(...)
stdoutdata, stderrdata = process.communicate()
print process.returncode
</snippet></ROW><ROW><id>14043126</id><snippet>subprocess</snippet></ROW><ROW><id>14043246</id><snippet>timedelta(hours=11)</snippet></ROW><ROW><id>14043246</id><snippet>datetime</snippet></ROW><ROW><id>14043246</id><snippet>year</snippet></ROW><ROW><id>14043246</id><snippet>&gt;&gt;&gt; (datetime.datetime.utcnow() - datetime.timedelta(hours=11)).year
2012
</snippet></ROW><ROW><id>14043420</id><snippet>BinaryTree.depth</snippet></ROW><ROW><id>14043420</id><snippet>self.depth(Node.left)
</snippet></ROW><ROW><id>14043420</id><snippet>for node in self.depth(Node.left):
    yield node
</snippet></ROW><ROW><id>14043420</id><snippet>yield from self.depth(Node.left)
</snippet></ROW><ROW><id>14043420</id><snippet>for node in depthFirstSearch:
    print node
</snippet></ROW><ROW><id>14043547</id><snippet>register</snippet></ROW><ROW><id>14043547</id><snippet>registration.views</snippet></ROW><ROW><id>14043547</id><snippet>SimpleBackend.register</snippet></ROW><ROW><id>14043547</id><snippet>backend.register()</snippet></ROW><ROW><id>14043547</id><snippet>form.is_valid()</snippet></ROW><ROW><id>14043547</id><snippet>backend.register()</snippet></ROW><ROW><id>14043547</id><snippet>backend.register()</snippet></ROW><ROW><id>14043547</id><snippet>django-registration\registration\views</snippet></ROW><ROW><id>14043547</id><snippet>register</snippet></ROW><ROW><id>14043547</id><snippet>if request.method == 'POST':
    form = form_class(data=request.POST, files=request.FILES)
    if form.is_valid():
        try:  # added this line
            new_user = backend.register(request, **form.cleaned_data)
            if success_url is None:
                to, args, kwargs = backend.post_registration_redirect(request, new_user)
                return redirect(to, *args, **kwargs)
            else:
                return redirect(success_url)
        # added these 3 lines below
        except Exception, err:
            errors = form._errors.setdefault(NON_FIELD_ERRORS, ErrorList())
            errors.append(err)
</snippet></ROW><ROW><id>14043578</id><snippet>import datetime
datetime.datetime.strptime("22.12.2012 17:00", '%d.%m.%Y %H:%M')
</snippet></ROW><ROW><id>14043762</id><snippet>:map</snippet></ROW><ROW><id>14043939</id><snippet>datetime.datetime()</snippet></ROW><ROW><id>14043939</id><snippet>datetime.timedelta()</snippet></ROW><ROW><id>14043939</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; t = datetime.datetime.now()
&gt;&gt;&gt; t - datetime.timedelta(hours=1, minutes=10)
datetime.datetime(2012, 12, 26, 17, 18, 52, 167840)
</snippet></ROW><ROW><id>14043939</id><snippet>timedelta()</snippet></ROW><ROW><id>14043939</id><snippet>datetime.time()</snippet></ROW><ROW><id>14043939</id><snippet>datetime.time()</snippet></ROW><ROW><id>14043939</id><snippet>datetime.datetime.combine()</snippet></ROW><ROW><id>14043939</id><snippet>datetime.datetime()</snippet></ROW><ROW><id>14043939</id><snippet>.time()</snippet></ROW><ROW><id>14043939</id><snippet>&gt;&gt;&gt; t = datetime.time(1, 2)
&gt;&gt;&gt; dt = datetime.datetime.combine(datetime.date.today(), t)
&gt;&gt;&gt; dt
datetime.datetime(2012, 12, 26, 1, 2)
&gt;&gt;&gt; dt -= datetime.timedelta(hours=5)
&gt;&gt;&gt; dt.time()
datetime.time(20, 2)
</snippet></ROW><ROW><id>14043979</id><snippet>key</snippet></ROW><ROW><id>14043979</id><snippet>thread1</snippet></ROW><ROW><id>14043979</id><snippet>key</snippet></ROW><ROW><id>14043979</id><snippet>thread1</snippet></ROW><ROW><id>14043979</id><snippet>key</snippet></ROW><ROW><id>14043979</id><snippet>import threading, time
from msvcrt import getch

key = "lol"

def thread1():
    global key
    lock = threading.Lock()
    while True:
        with lock:
            key = getch()

threading.Thread(target = thread1).start()

while True:
    time.sleep(1)
    print(key)
</snippet></ROW><ROW><id>14044031</id><snippet>soupparser.py</snippet></ROW><ROW><id>14044031</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>14044031</id><snippet>bs4</snippet></ROW><ROW><id>14044031</id><snippet>soupparser.py</snippet></ROW><ROW><id>14044031</id><snippet>bs4</snippet></ROW><ROW><id>14044031</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>14044031</id><snippet>sys.modules</snippet></ROW><ROW><id>14044031</id><snippet>soupparser</snippet></ROW><ROW><id>14044031</id><snippet>import sys, bs4
sys.modules['BeautifulSoup'] = bs4

from lxml.html.soupparser import fromstring
</snippet></ROW><ROW><id>14044082</id><snippet>import pymysql.cursors</snippet></ROW><ROW><id>14044082</id><snippet>cursors</snippet></ROW><ROW><id>14044082</id><snippet>pymysql</snippet></ROW><ROW><id>14044082</id><snippet>__all__</snippet></ROW><ROW><id>14044082</id><snippet>import pymysql</snippet></ROW><ROW><id>14044131</id><snippet>len(word._attrs)</snippet></ROW><ROW><id>14044131</id><snippet>_attrs</snippet></ROW><ROW><id>14044131</id><snippet>word._attrs.__len__()</snippet></ROW><ROW><id>14044210</id><snippet>update</snippet></ROW><ROW><id>14044210</id><snippet>import pygame
import sys

def load_image(name):
    image = pygame.image.load(name)
    return image

class TestSprite(pygame.sprite.Sprite):
    def __init__(self):
        super(TestSprite, self).__init__()
        self.images = []
        self.images.append(load_image('image1.png'))
        self.images.append(load_image('image2.png'))
        # assuming both images are 64x64 pixels

        self.index = 0
        self.image = self.images[self.index]
        self.rect = pygame.Rect(5, 5, 64, 64)

    def update(self):
        '''This method iterates through the elements inside self.images and 
        displays the next one each tick. For a slower animation, you may want to 
        consider using a timer of some sort so it updates slower.'''
        self.index += 1
        if self.index &gt;= len(self.images):
            self.index = 0
        self.image = self.images[self.index]

def main():
    pygame.init()
    screen = pygame.display.set_mode((250, 250))

    my_sprite = TestSprite()
    my_group = pygame.sprite.Group(my_sprite)

    while True:
        event = pygame.event.poll()
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit(0)

        # Calling the 'my_group.update' function calls the 'update' function of all 
        # its member sprites. Calling the 'my_group.draw' function uses the 'image'
        # and 'rect' attributes of its member sprites to draw the sprite.
        my_group.update()
        my_group.draw(screen)
        pygame.display.flip()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>14044210</id><snippet>image1.png</snippet></ROW><ROW><id>14044210</id><snippet>image2.png</snippet></ROW><ROW><id>14044431</id><snippet>encode</snippet></ROW><ROW><id>14044431</id><snippet>'ascii'</snippet></ROW><ROW><id>14044431</id><snippet>s = str(n).encode()
</snippet></ROW><ROW><id>14044490</id><snippet>Select</snippet></ROW><ROW><id>14044490</id><snippet>Focus</snippet></ROW><ROW><id>14044490</id><snippet>........
widget.Focus(1)
widget.Select(1)
..........
</snippet></ROW><ROW><id>14044585</id><snippet>setUpClass</snippet></ROW><ROW><id>14044585</id><snippet>setUpClass</snippet></ROW><ROW><id>14044585</id><snippet>classmethod()</snippet></ROW><ROW><id>14044585</id><snippet>@classmethod</snippet></ROW><ROW><id>14044585</id><snippet>class MyUnitTest(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        do_something_expensive_for_all_sets_of_tests()

class MyFirstSetOfTests(MyUnitTest):
    @classmethod
    def setUpClass(cls):
        super(MyFirstSetOfTests, cls).setUpClass()
        do_something_expensive_for_just_these_first_tests()
</snippet></ROW><ROW><id>14044585</id><snippet>MyFirstSetOfTests.setUpClass()</snippet></ROW><ROW><id>14044585</id><snippet>self</snippet></ROW><ROW><id>14044667</id><snippet>.read()</snippet></ROW><ROW><id>14044667</id><snippet>sys.stdin</snippet></ROW><ROW><id>14044667</id><snippet>wc</snippet></ROW><ROW><id>14044667</id><snippet>os.read()</snippet></ROW><ROW><id>14044667</id><snippet>os.read(fin.fileno(), skip)
</snippet></ROW><ROW><id>14044927</id><snippet>form</snippet></ROW><ROW><id>14044927</id><snippet>request.POST</snippet></ROW><ROW><id>14044927</id><snippet>cleaned_data</snippet></ROW><ROW><id>14044927</id><snippet>form</snippet></ROW><ROW><id>14044927</id><snippet>save()</snippet></ROW><ROW><id>14044927</id><snippet>def source_form(request, id):
    source = get_object_or_404(Source, pk=id)
    form = SourceForm(request.POST or None, instance=source)

    if form.is_valid():
        source = form.save()
        form = SourceForm(instance=source)

    return render_to_response('source/form.html', {'form': form, 'source': source},
        context_instance=RequestContext(request))
</snippet></ROW><ROW><id>14044970</id><snippet>rank</snippet></ROW><ROW><id>14044970</id><snippet>None</snippet></ROW><ROW><id>14044970</id><snippet>ranks</snippet></ROW><ROW><id>14044970</id><snippet>self.rank</snippet></ROW><ROW><id>14044970</id><snippet>if self.rank not in PlayingCard.ranks
</snippet></ROW><ROW><id>14044970</id><snippet>self.rank</snippet></ROW><ROW><id>14044970</id><snippet>suit</snippet></ROW><ROW><id>14044970</id><snippet>def __init__(self, rank = None, suit = None):
    if rank is None: self.rank = PlayingCard.ranks[rand.randint(0,12)]
    elif rank in PlayingCard.ranks: self.rank = rank
    else: raise NameError('Invalid rank')

    if suit is None: self.suit = PlayingCard.suits[rand.randint(0,3)]
    elif suit in PlayingCard.suits: self.suit = suit
    else: raise NameError('Invalid suit')
</snippet></ROW><ROW><id>14045139</id><snippet>regroup</snippet></ROW><ROW><id>14045139</id><snippet>dictsort</snippet></ROW><ROW><id>14045139</id><snippet>{% regroup value|dictsort:"idcine" by idcine as cine_list %}
</snippet></ROW><ROW><id>14045298</id><snippet>setattr</snippet></ROW><ROW><id>14045298</id><snippet>setattr(A, 'foo', 10)
</snippet></ROW><ROW><id>14045361</id><snippet>bottle</snippet></ROW><ROW><id>14045361</id><snippet>bottle</snippet></ROW><ROW><id>14045361</id><snippet>Tornado</snippet></ROW><ROW><id>14045361</id><snippet>action/doThis</snippet></ROW><ROW><id>14045361</id><snippet>action/requestThat</snippet></ROW><ROW><id>14045361</id><snippet>RequestHandler</snippet></ROW><ROW><id>14045361</id><snippet>class HandleAction(tornado.web.RequestHandler):
    def take_appropriate_action(route):
        print("Responding to action/{}".format(route))


class HandleThis(HandleAction):
    def get(self):
        self.take_appropriate_action('doThis')


class HandleThat(HandleAction):
    def get(self):
        self.take_appropriate_action('requestThat')


app = tornado.web.Application([
    (r'/action/doThis', HandleThis),
    (r'/action/requestThat', HandleThat)
])
</snippet></ROW><ROW><id>14045407</id><snippet>{% extends 'base.html' %}

{% load url from future %}

{% url 'name_as_a_string' %}
{% url name_stored_in_variable %}
</snippet></ROW><ROW><id>14045644</id><snippet>#!/usr/bin/env python
from selenium import webdriver

browser = webdriver.Firefox()
url = 'http://python.org'
browser.get(url)
page_source = browser.page_source
print page_source
</snippet></ROW><ROW><id>14045731</id><snippet>gdata</snippet></ROW><ROW><id>14045731</id><snippet>Properties -&gt; PyDev - PYTHONPATH -&gt; Source Folders</snippet></ROW><ROW><id>14045731</id><snippet>/Library/Python/2.7/site-packages/gdata</snippet></ROW><ROW><id>14045731</id><snippet>dist-packages</snippet></ROW><ROW><id>14045731</id><snippet>site-packages</snippet></ROW><ROW><id>14045731</id><snippet>atom</snippet></ROW><ROW><id>14045997</id><snippet>x</snippet></ROW><ROW><id>14045997</id><snippet>y = -1
for row in my_list:  
        x = -1
        y += 1
        for symbol in row:
                x += 1
                if symbol == "@":
                        makom = (x,y)
                        player = "@"       
                if symbol == "+":
                        makom = (x,y)
                        player = "+"


print makom
</snippet></ROW><ROW><id>14045997</id><snippet>enumerate</snippet></ROW><ROW><id>14045997</id><snippet>for y, row in enumerate(my_list):
        for x, symbol in enumerate(row):
                if symbol == "@":
                        makom = (x, y)
                        player = "@"       
                if symbol == "+":
                        makom = (x, y)
                        player = "+"


print makom
</snippet></ROW><ROW><id>14046092</id><snippet>sticky="w"</snippet></ROW><ROW><id>14046092</id><snippet>import Tkinter as tk

class ExampleView(tk.Frame):
    def __init__(self, *args, **kwargs):
        tk.Frame.__init__(self, *args, **kwargs)
        cbframe = tk.Frame(self)
        cb1 = tk.Checkbutton(cbframe, text="Choice 1")
        cb2 = tk.Checkbutton(cbframe, text="Choice 2")
        cb3 = tk.Checkbutton(cbframe, text="Choice 3")

        cb1.pack(side="left", fill=None, expand=False)
        cb2.pack(side="left", fill=None, expand=False)
        cb3.pack(side="left", fill=None, expand=False)

        # this entry is for illustrative purposes: it
        # will force column 2 to be widget than a checkbutton
        e1 = tk.Entry(self, width=20)
        e1.grid(row=1, column=1, sticky="ew")

        # place our frame of checkbuttons in the same column
        # as the entry widget. Because the checkbuttons are
        # packed in a frame, they will always be "stuck"
        # to the left side of the cell.
        cbframe.grid(row=2, column=1, sticky="w")

        # let column 1 expand and contract with the 
        # window, so you can see that the column grows
        # with the window, but that the checkbuttons
        # stay stuck to the left
        self.grid_columnconfigure(1, weight=1)

if __name__ == "__main__":
    root = tk.Tk()
    view = ExampleView(root)
    view.pack(side="top", fill="both", expand=True)
    root.wm_geometry("400x200")
    root.mainloop()
</snippet></ROW><ROW><id>14046156</id><snippet>def no_duplicates(x):
    seen = set()
    return not any(i in seen or seen.add(i) for i in x)

data = {((3, 2), (2, 1)),
        ((3, 2), (3, 1)),
        ((3, 1), (2, 1)),
        ((2, 1), (1,3), (2, 3))}

print({item for item in data if no_duplicates(first for first, _ in item)})
</snippet></ROW><ROW><id>14046156</id><snippet>{((3, 2), (2, 1)), 
 ((3, 1), (2, 1))}
</snippet></ROW><ROW><id>14046156</id><snippet>no_duplicates()</snippet></ROW><ROW><id>14046178</id><snippet>import win32com.client

conn = win32com.client.Dispatch('ADODB.Connection')
db = 'C:\\Profit\\profit_a\\ARMM'
dsn = 'Provider=VFPOLEDB.1;Data Source=%s' % db
conn.Open(dsn)

cmd = win32com.client.Dispatch('ADODB.Command')
cmd.ActiveConnection = conn
cmd.CommandText = "Select * from factura, reng_fac where factura.fact_num = reng_fac.fact_num AND factura.fact_num = 6099;"

rs = cmd.Execute() # This returns a tuple: (&lt;RecordSet&gt;, number_of_records)
total = rs[1]
rs = rs[0]

while total:
    for x in xrange(rs.Fields.Count):
        print '%s --&gt; %s' % (rs.Fields.item(x).Name, rs.Fields.item(x).Value)
        rs.MoveNext()
        total = total - 1
</snippet></ROW><ROW><id>14046244</id><snippet>In [12]: df = pd.DataFrame([0])

In [13]: df.ix[0,0]
Out[13]: 0

In [14]: df[0][0]
Out[14]: 0
</snippet></ROW><ROW><id>14046244</id><snippet>In [15]: df    #Before naming the column
Out[15]:
   0
0  0

In [16]: df.columns = ['ColA']
In [17]: df    #Renamed
Out[17]:
   ColA
0     0

In [18]: df['ColA'][0]    #Now you can access the column using the new name
Out[18]: 0

In [19]: df[0][0]         #... but trying the old name will not work
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)

KeyError: 'no item named 0'
</snippet></ROW><ROW><id>14046244</id><snippet>DataFrame.ix</snippet></ROW><ROW><id>14046244</id><snippet>In [20]: df.ix[0,0]
Out[20]: 0
</snippet></ROW><ROW><id>14046254</id><snippet>self.foo</snippet></ROW><ROW><id>14046254</id><snippet>foo</snippet></ROW><ROW><id>14046286</id><snippet>SCALE_MULTIPLE = 2  # or any positive integer
new_array = []
for orig_row in original:
    new_row = []
    for orig_elem in orig_row:
        new_row.extend([orig_elem] * SCALE_MULTIPLE)
    new_array.extend(new_row[:] for _ in range(SCALE_MULTIPLE))
</snippet></ROW><ROW><id>14046295</id><snippet>if not x:</snippet></ROW><ROW><id>14046295</id><snippet>if x is False</snippet></ROW><ROW><id>14046295</id><snippet>if bool(x) is False</snippet></ROW><ROW><id>14046295</id><snippet>True</snippet></ROW><ROW><id>14046295</id><snippet>False</snippet></ROW><ROW><id>14046295</id><snippet>bool(x)</snippet></ROW><ROW><id>14046295</id><snippet>x.__nonzero__()</snippet></ROW><ROW><id>14046295</id><snippet>x.__bool__()</snippet></ROW><ROW><id>14046295</id><snippet>if</snippet></ROW><ROW><id>14046295</id><snippet>if []:</snippet></ROW><ROW><id>14046295</id><snippet>True</snippet></ROW><ROW><id>14046295</id><snippet>__nonzero__()</snippet></ROW><ROW><id>14046295</id><snippet>False</snippet></ROW><ROW><id>14046303</id><snippet>from PIL import Image
from PIL.ExifTags import TAGS

img = Image.open("test.jpg")
exif = i._getexif()
# decode exif using TAGS
</snippet></ROW><ROW><id>14046303</id><snippet>from PythonMagick import Image

img = Image("image.jpg")
print img.attribute("EXIF:Orientation")
</snippet></ROW><ROW><id>14046460</id><snippet>def loader(filename):
    f = open(filename, 'r')
    lines = f.read().split('\n')
    header = lines[0] # don't know if you need this
    level = lines[2:]
    f.close()
    return level
</snippet></ROW><ROW><id>14046460</id><snippet>def loader(filename):
    f = open(filename, 'r')
    levels = f.read().split(';')[1:]
    return [level.strip().split('\n')[2:] for level in levels]
</snippet></ROW><ROW><id>14046506</id><snippet>virtualenv</snippet></ROW><ROW><id>14046506</id><snippet>virtualenv</snippet></ROW><ROW><id>14046523</id><snippet>L = Linitial
</snippet></ROW><ROW><id>14046523</id><snippet>L = Linitial[:]
</snippet></ROW><ROW><id>14046523</id><snippet>L</snippet></ROW><ROW><id>14046523</id><snippet>Lintial</snippet></ROW><ROW><id>14046523</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>14046523</id><snippet>P</snippet></ROW><ROW><id>14046620</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>14046620</id><snippet>__main__</snippet></ROW><ROW><id>14046620</id><snippet>myproject/__init__.py</snippet></ROW><ROW><id>14046620</id><snippet>from . import pep8 # optional "as pep8"
# The rest of your code, using this pep8 module.
</snippet></ROW><ROW><id>14046620</id><snippet>myproject/pep8/__init__.py</snippet></ROW><ROW><id>14046620</id><snippet>from __future__ import absolute_import
from pep8 import *
MAX_LINE_LENGTH = 119 
</snippet></ROW><ROW><id>14046629</id><snippet>.append()</snippet></ROW><ROW><id>14046629</id><snippet>latitudes</snippet></ROW><ROW><id>14046629</id><snippet>longitudes</snippet></ROW><ROW><id>14046629</id><snippet>for i in output:
    latitudes.append(i[0])
    longitudes.append(i[1])  
</snippet></ROW><ROW><id>14046629</id><snippet>for</snippet></ROW><ROW><id>14046629</id><snippet>output</snippet></ROW><ROW><id>14046629</id><snippet>i</snippet></ROW><ROW><id>14046629</id><snippet>i</snippet></ROW><ROW><id>14046629</id><snippet>for row in output:
    latitudes.append(row[0])
    longitudes.append(row[1])  
</snippet></ROW><ROW><id>14046629</id><snippet>zip()</snippet></ROW><ROW><id>14046629</id><snippet>latitudes, longitudes = zip(*output)
</snippet></ROW><ROW><id>14046629</id><snippet>*output</snippet></ROW><ROW><id>14046629</id><snippet>output</snippet></ROW><ROW><id>14046629</id><snippet>zip()</snippet></ROW><ROW><id>14046629</id><snippet>zip()</snippet></ROW><ROW><id>14046629</id><snippet>zip(output[0], output[1], output[2], ...)</snippet></ROW><ROW><id>14046629</id><snippet>zip()</snippet></ROW><ROW><id>14046629</id><snippet>zip(*output)</snippet></ROW><ROW><id>14046735</id><snippet>class Sokoban:
    def __init__(self, board):
            self.board = board.copy()
            self.plays = ''
            self.undo_str = ''

    def move(self, plays):
         self.plays = plays
         ............

    def undo(self):
            undo_str=undo_str[:]+self.plays


sokoban = Sokoban(board)
sokoban.move('play1')
sokoban.undo()
sokoban.move('play2')
sokoban.undo()

In: sokoban.plays 
Out 'play2'

In: sokoban.undo_str
Out: 'play1play2'
</snippet></ROW><ROW><id>14046765</id><snippet>class MyBrowser(QWebPage):
    ''' Settings for the browser.'''

    def __init__(self):
        QWebPage.__init__(self)
        pass

    @staticmethod
    def userAgentForUrl(url=None):
        ''' Returns a User Agent that will be seen by the website. '''
        return "Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.15 (KHTML, like Gecko) Chrome/24.0.1295.0 Safari/537.15"


print MyBrowser.userAgentForUrl()
</snippet></ROW><ROW><id>14046765</id><snippet>self</snippet></ROW><ROW><id>14046861</id><snippet>regroup</snippet></ROW><ROW><id>14046861</id><snippet>{% regroup city_list|dictsort:"country" by country as country_list %}

&lt;ul&gt;
{% for country in country_list %}
    &lt;li&gt;&lt;strong&gt;{{ country.grouper }}&lt;/strong&gt;
        &lt;ul&gt;
            {% for item in country.list %}
                &lt;li&gt;{{ item.city }}&lt;/li&gt;
            {% endfor %}
        &lt;/ul&gt;
    &lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>14046903</id><snippet>rect</snippet></ROW><ROW><id>14046903</id><snippet>pygame.draw.ellipse</snippet></ROW><ROW><id>14046903</id><snippet>center_x_coordinate, center_y_coordinate, width, height</snippet></ROW><ROW><id>14046903</id><snippet>pygame.draw.ellipse</snippet></ROW><ROW><id>14046939</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>14046939</id><snippet>from BeautifulSoup import BeautifulSoup
</snippet></ROW><ROW><id>14046939</id><snippet>from bs4 import BeautifulSoup
</snippet></ROW><ROW><id>14046939</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>14047203</id><snippet>bar</snippet></ROW><ROW><id>14047203</id><snippet>log</snippet></ROW><ROW><id>14047377</id><snippet>import sqlite3

conn = sqlite3.connect("growll.db")
cursor = conn.cursor()

print "\nHere's a listing of all the records in the table:\n"
cursor.execute("select lchar from GrowLLDados")    

print [int(record[0]) for record in cursor.fetchall()]
</snippet></ROW><ROW><id>14047385</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>14047385</id><snippet>-u</snippet></ROW><ROW><id>14047624</id><snippet>buff = self.socket.recvfrom(1460)[0]
</snippet></ROW><ROW><id>14047935</id><snippet>def func (xy):
    x, y = xy
    # ...
</snippet></ROW><ROW><id>14047935</id><snippet>def func (x, y):
    # ...

t = (1, 2)
func(*t)
</snippet></ROW><ROW><id>14047935</id><snippet>2to3</snippet></ROW><ROW><id>14047980</id><snippet>-[NSTextView setString]</snippet></ROW><ROW><id>14047980</id><snippet>NSTextDidChangeNotification</snippet></ROW><ROW><id>14047980</id><snippet>textDidChange_</snippet></ROW><ROW><id>14047980</id><snippet>[[NSNotificationCenter defaultCenter] postNotificationName:NSTextDidChangeNotification object:text_view];
</snippet></ROW><ROW><id>14047980</id><snippet>textDidChange_</snippet></ROW><ROW><id>14048046</id><snippet>stdin</snippet></ROW><ROW><id>14048046</id><snippet>stdout</snippet></ROW><ROW><id>14048046</id><snippet>// This is the data you want to pass to Python
$data = array('as', 'df', 'gh');

// Execute the python script with the JSON data
$result = shell_exec('python /path/to/myScript.py ' . escapeshellarg(json_encode($data)));

// Decode the result
$resultData = json_decode($result, true);

// This will contain: array('status' =&gt; 'Yes!')
var_dump($resultData);
</snippet></ROW><ROW><id>14048046</id><snippet>import sys, json

# Load the data that PHP sent us
try:
    data = json.loads(sys.argv[1])
except:
    print "ERROR"
    sys.exit(1)

# Generate some data to send to PHP
result = {'status': 'Yes!'}

# Send it to stdout (to PHP)
print json.dumps(result)
</snippet></ROW><ROW><id>14048173</id><snippet>ternary operator</snippet></ROW><ROW><id>14048173</id><snippet>[prefix + i if i.startswith('c') else i for i in my_list]
</snippet></ROW><ROW><id>14048173</id><snippet>my_list</snippet></ROW><ROW><id>14048173</id><snippet>my_list</snippet></ROW><ROW><id>14048173</id><snippet>my_list=[prefix + i if i.startswith('c') else i for i in my_list]
</snippet></ROW><ROW><id>14048173</id><snippet>list</snippet></ROW><ROW><id>14048479</id><snippet>import pprint
import random

from collections import defaultdict

ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
suits = ['Spades', 'Hearts', 'Clubs', 'Diamonds']

deck = zip(ranks * 4, suits * 13)

def test(trials=100000):
    draws = defaultdict(int)

    for i in range(trials):
        draws[random.choice(deck)] += 1

    return {card: float(value) / trials for card, value in draws.iteritems()}


pprint.pprint(test(100000))
</snippet></ROW><ROW><id>14048479</id><snippet>0.6</snippet></ROW><ROW><id>14048479</id><snippet>{('10', 'Clubs'): 0.01961,
 ('10', 'Diamonds'): 0.01897,
 ('10', 'Hearts'): 0.0196,
 ('10', 'Spades'): 0.01902,
 ('2', 'Clubs'): 0.01953,
 ('2', 'Diamonds'): 0.0201,
 ('2', 'Hearts'): 0.01889,
 ('2', 'Spades'): 0.01891,
 ('3', 'Clubs'): 0.01943,
 ('3', 'Diamonds'): 0.0198,
 ('3', 'Hearts'): 0.01893,
 ('3', 'Spades'): 0.01953,
 ('4', 'Clubs'): 0.01973,
 ('4', 'Diamonds'): 0.01946,
 ('4', 'Hearts'): 0.01822,
 ('4', 'Spades'): 0.01931,
 ('5', 'Clubs'): 0.01845,
 ('5', 'Diamonds'): 0.01956,
 ('5', 'Hearts'): 0.01978,
 ('5', 'Spades'): 0.01943,
 ('6', 'Clubs'): 0.01852,
 ('6', 'Diamonds'): 0.01903,
 ('6', 'Hearts'): 0.01928,
 ('6', 'Spades'): 0.01848,
 ('7', 'Clubs'): 0.0195,
 ('7', 'Diamonds'): 0.01881,
 ('7', 'Hearts'): 0.0194,
 ('7', 'Spades'): 0.01926,
 ('8', 'Clubs'): 0.01946,
 ('8', 'Diamonds'): 0.0188,
 ('8', 'Hearts'): 0.01985,
 ('8', 'Spades'): 0.01875,
 ('9', 'Clubs'): 0.01914,
 ('9', 'Diamonds'): 0.01908,
 ('9', 'Hearts'): 0.01937,
 ('9', 'Spades'): 0.01838,
 ('A', 'Clubs'): 0.01935,
 ('A', 'Diamonds'): 0.01843,
 ('A', 'Hearts'): 0.01957,
 ('A', 'Spades'): 0.01852,
 ('J', 'Clubs'): 0.01992,
 ('J', 'Diamonds'): 0.01933,
 ('J', 'Hearts'): 0.01881,
 ('J', 'Spades'): 0.01946,
 ('K', 'Clubs'): 0.01932,
 ('K', 'Diamonds'): 0.01845,
 ('K', 'Hearts'): 0.01935,
 ('K', 'Spades'): 0.02015,
 ('Q', 'Clubs'): 0.0189,
 ('Q', 'Diamonds'): 0.01942,
 ('Q', 'Hearts'): 0.01977,
 ('Q', 'Spades'): 0.01988}
</snippet></ROW><ROW><id>14048522</id><snippet>events = service.events().list(calendarId='resource@email-address.com').execute()

while True:
  for event in events.get('items', []):
    print event['summary']
  page_token = events.get('nextPageToken')
  if page_token:
    events = service.events().list(calendarId='resource@email-address.com', pageToken=page_token).execute()
  else:
    break
</snippet></ROW><ROW><id>14048632</id><snippet>"select temp from GrowLLDados ORDER BY id DESC LIMIT 30"</snippet></ROW><ROW><id>14048632</id><snippet>id</snippet></ROW><ROW><id>14048690</id><snippet>u = User.filter_by(User.username==requested_username.lower()).first()

teamie = Team.filter_by(Team.name==requested_team)\
             .filter_by(Team.user_id==u.id).first()
</snippet></ROW><ROW><id>14048690</id><snippet>u = session.query(User).filter_by(User.username==requested_username.lower()).first()

teamie = session.query(Team).filter_by(Team.name==requested_team)\
                            .filter_by(Team.user_id==u.id).first()
</snippet></ROW><ROW><id>14048765</id><snippet>str</snippet></ROW><ROW><id>14048765</id><snippet>__mul__</snippet></ROW><ROW><id>14048775</id><snippet>ranges = [(n, min(n+step, stop)) for n in xrange(start, stop, step)]
</snippet></ROW><ROW><id>14048775</id><snippet>def gen_range(start, stop, step):
    current = start
    while current &lt; stop:
        next_current = current + step
        if next_current &lt; stop:
            yield (current, next_current)
        else:
            yield (current, stop)
        current = next_current
</snippet></ROW><ROW><id>14048775</id><snippet>for block in gen_range(100000000,600000000,100):
    print block
</snippet></ROW><ROW><id>14048775</id><snippet>(100000000,100000100)
(100000100,100000200)
(100000200,100000300)
...
(599999900,600000000)
</snippet></ROW><ROW><id>14048775</id><snippet>stop-start</snippet></ROW><ROW><id>14048775</id><snippet>step</snippet></ROW><ROW><id>14048775</id><snippet>ranges = ((n, n+step) for n in xrange(start, stop, step))

# Usage
for block in ranges:
    print block
</snippet></ROW><ROW><id>14048775</id><snippet>list()</snippet></ROW><ROW><id>14048775</id><snippet>all_ranges = list(gen_range(100000000,600000000,100))
</snippet></ROW><ROW><id>14048800</id><snippet>urlpatterns = patterns('',
    (r'^', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>14048820</id><snippet>class CaseInsensitiveColumnComparator(ColumnProperty.Comparator):
    def __eq__(self, other):
        return func.lower(self.__clause_element__()) == func.lower(other)
</snippet></ROW><ROW><id>14048820</id><snippet>import sqlalchemy.types as types

class LowerCaseText(types.TypeDecorator):
    '''Converts strings to lower case on the way in.'''

    impl = types.Text

    def process_bind_param(self, value, dialect):
        return value.lower()

class User(Base):
    __tablename__ = 'user'
    id = Column(LowerCaseText, primary_key=True)
    ...
</snippet></ROW><ROW><id>14048883</id><snippet>from itertools import product

fruit_dict = {'oranges':['big','small'],'apples':['green','yellow','red']}    

keys, values = zip(*fruit_dict.items())
print [dict(zip(keys, value_list)) for value_list in product(*values)]
</snippet></ROW><ROW><id>14048975</id><snippet>from django.views.generic import ListView

class CategoryView(ListView):
    template_name = 'books/categories/show.html'
    paginate_by = 99

    def get_queryset(self):
        self.category = Category.objects.get(pk=self.kwargs['id'])

        books = Book.objects.filter(
           Q(status = 1) &amp; Q(category=self.category)
        ).order_by('-id')

        self.s = Poet.objects.order_by('?')[:3]

        return books

    def get_context_data(self, **kwargs):
        context = super(CategoryView, self).get_context_data(**kwargs)
        context['category'] = self.category
        context['suggestions'] = self.s
        return context
</snippet></ROW><ROW><id>14048975</id><snippet>class CategoryView(ListView):
    template_name = 'books/categories/show.html'
    context_object_name = 'books'
    ...
</snippet></ROW><ROW><id>14048975</id><snippet>url( r'your pattern', CategoryView.as_view(), name='whatever')
</snippet></ROW><ROW><id>14049045</id><snippet>self</snippet></ROW><ROW><id>14049045</id><snippet>self</snippet></ROW><ROW><id>14049174</id><snippet>python-dev</snippet></ROW><ROW><id>14049174</id><snippet>python-dev</snippet></ROW><ROW><id>14049701</id><snippet>routes</snippet></ROW><ROW><id>14049701</id><snippet>from collections import Counter

counts = Counter(routes)

multi_routes = [i for i in counts if counts[i] &gt; 1]
</snippet></ROW><ROW><id>14049701</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter([1,1,2,3,3,4,5,5,5])
&gt;&gt;&gt; [i for i in c if c[i] &gt; 1]
[1, 3, 5]
</snippet></ROW><ROW><id>14049876</id><snippet>tar xvzf dislin-10.2.darwin.intel.64.tar.gz
</snippet></ROW><ROW><id>14049876</id><snippet>mkdir /Users/&lt;your username&gt;/dislin
</snippet></ROW><ROW><id>14049876</id><snippet>vim /Users/&lt;your username&gt;/.bash_profile
</snippet></ROW><ROW><id>14049876</id><snippet>export DISLIN=/Users/&lt;your username&gt;/dislin
PATH=${PATH}:${DISLIN}/bin

DYLD_LIBRARY_PATH=$DISLIN:$DYLD_LIBRARY_PATH
export DYLD_LIBRARY_PATH
</snippet></ROW><ROW><id>14049876</id><snippet>source ~/.bash_profile
</snippet></ROW><ROW><id>14049876</id><snippet>./INSTALL
</snippet></ROW><ROW><id>14050180</id><snippet>from xml.dom.minidom import parseString
import json        
def bar(somejson, key):
    def val(node):
        # Searches for the next Element Node containing Value
        e = node.nextSibling
        while e and e.nodeType != e.ELEMENT_NODE:
            e = e.nextSibling
        return e.getElementsByTagName('string')[0].firstChild.nodeValue if e else None
    # parse the JSON as XML
    foo_dom = parseString(xmlrpclib.dumps((json.loads(foo),)))
    # and then search all the name tags which are P1's
    # and use the val user function to get the value
    return [val(node) for node in foo_dom.getElementsByTagName('name') 
            if node.firstChild.nodeValue in key]

bar(foo, 'P1')
[u'cccc', u'aaa', u'ss']
bar(foo, ('P1','P2'))
[u'cccc', u'cccc', u'aaa', u'ss']
</snippet></ROW><ROW><id>14050282</id><snippet>imp</snippet></ROW><ROW><id>14050282</id><snippet>import imp
try:
    imp.find_module('eggs')
    found = True
except ImportError:
    found = False
</snippet></ROW><ROW><id>14050503</id><snippet>//</snippet></ROW><ROW><id>14050503</id><snippet>.</snippet></ROW><ROW><id>14050503</id><snippet>element2 = driver.find_element_by_xpath("//div[@title='div2']")
element2.find_element_by_xpath(".//p[@class='test']").text 
</snippet></ROW><ROW><id>14050695</id><snippet>while pages &gt;= 1:
    pages -= 1
</snippet></ROW><ROW><id>14050695</id><snippet>for page in xrange(pages - 1, -1, -1):
    # Do something with the page variable
</snippet></ROW><ROW><id>14050797</id><snippet>    $('.submitForm').ajaxForm({
        success: function(returnData) {
            $('#login').html(returnData);

            //check the response to see if it is a success message
            if(returnData == 'Welcome someUser'){
                 document.location.reload(true);
            }

        }
    });
</snippet></ROW><ROW><id>14050853</id><snippet>zip</snippet></ROW><ROW><id>14050853</id><snippet>[x + y for x, y in zip(first, second)]
</snippet></ROW><ROW><id>14050941</id><snippet>sorted(nums, key=lambda x: tuple(reversed(list(map(int, x.split("/"))))))
</snippet></ROW><ROW><id>14050941</id><snippet>x.split("/")</snippet></ROW><ROW><id>14050941</id><snippet>["235", "40", "17"]
</snippet></ROW><ROW><id>14050941</id><snippet>map(int, ...)</snippet></ROW><ROW><id>14050941</id><snippet>[235, 40, 17]
</snippet></ROW><ROW><id>14050941</id><snippet>reversed()</snippet></ROW><ROW><id>14050941</id><snippet>[17, 40, 235]
</snippet></ROW><ROW><id>14050941</id><snippet>tuple()</snippet></ROW><ROW><id>14050941</id><snippet>(17, 40, 235)
</snippet></ROW><ROW><id>14051044</id><snippet>Django</snippet></ROW><ROW><id>14051044</id><snippet>WxPython</snippet></ROW><ROW><id>14051044</id><snippet>PyQt</snippet></ROW><ROW><id>14051044</id><snippet>TkInter</snippet></ROW><ROW><id>14051402</id><snippet>def page(self, number):
    "Returns a Page object for the given 1-based page number."
    number = self.validate_number(number)
    bottom = (number - 1) * self.per_page
    top = bottom + self.per_page
    if top + self.orphans &gt;= self.count:
        top = self.count
    return Page(self.object_list[bottom:top], number, self)
</snippet></ROW><ROW><id>14051402</id><snippet>self.object_list[bottom:top]
</snippet></ROW><ROW><id>14051402</id><snippet>   from django.db import connection

   original = XXXX.objects.filter(...)
   res1 = original[x:y]
   for item in res1:
     print item
   print len(connection.queries), connection.queries[-1]

   res2 = original[x:y]
   for item in res2:
     print item
   print len(connection.queries), connection.queries[-1]
</snippet></ROW><ROW><id>14051485</id><snippet>u</snippet></ROW><ROW><id>14051485</id><snippet>subject = u"æøå"
</snippet></ROW><ROW><id>14051485</id><snippet>coding</snippet></ROW><ROW><id>14051485</id><snippet>UTF-8</snippet></ROW><ROW><id>14051485</id><snippet>Cp1252</snippet></ROW><ROW><id>14051485</id><snippet>coding</snippet></ROW><ROW><id>14051558</id><snippet>In [1]: import xml.etree.ElementTree as ET

In [2]: xmlstr=\
   ...: """
   ...: &lt;A&gt;
   ...:   &lt;B&gt;some text&lt;/B&gt;
   ...:   &lt;B&gt;other text&lt;/B&gt;
   ...:   &lt;B&gt;more text&lt;/B&gt;
   ...: &lt;/A&gt;
   ...: """

In [3]: tree=ET.fromstring(xmlstr)

In [4]: tree.remove(tree.findall('.//B')[1])
</snippet></ROW><ROW><id>14052100</id><snippet>self</snippet></ROW><ROW><id>14052100</id><snippet>super(NotebookTabs, self).__init__</snippet></ROW><ROW><id>14052100</id><snippet>super</snippet></ROW><ROW><id>14052100</id><snippet>super(NotebookTabs, self).__init__(parent)

super(DeployTab, self).__init__(*args, parent=parent, id=wx.ID_ANY, **kwargs)

super(ConfigTab, self).__init__(*args, parent=parent, id=wx.ID_ANY, **kwargs)
</snippet></ROW><ROW><id>14052167</id><snippet>def other_function(parameter):
    return parameter + 5

def main_function():
    x = 10
    print x    
    x = other_function(x)
    print x
</snippet></ROW><ROW><id>14052167</id><snippet>main_function</snippet></ROW><ROW><id>14052167</id><snippet>&gt;&gt;&gt; 10
&gt;&gt;&gt; 15
</snippet></ROW><ROW><id>14052167</id><snippet>x = 0   # The initial value of x, with global scope

def other_function():
    global x
    x = x + 5

def main_function():
    print x    # Just printing - no need to declare global yet
    global x   # So we can change the global x
    x = 10
    print x
    other_function()
    print x
</snippet></ROW><ROW><id>14052167</id><snippet>&gt;&gt;&gt; 0    # Initial global value
&gt;&gt;&gt; 10   # Now we've set it to 10 in `main_function()`
&gt;&gt;&gt; 15   # Now we've added 5 in `other_function()`
</snippet></ROW><ROW><id>14052414</id><snippet>a</snippet></ROW><ROW><id>14052414</id><snippet>float(a) + 4.56
</snippet></ROW><ROW><id>14052441</id><snippet>("book")</snippet></ROW><ROW><id>14052441</id><snippet>"book"</snippet></ROW><ROW><id>14053239</id><snippet>@d(arg)</snippet></ROW><ROW><id>14053239</id><snippet>d</snippet></ROW><ROW><id>14053239</id><snippet>msg=arg</snippet></ROW><ROW><id>14053239</id><snippet>msg</snippet></ROW><ROW><id>14053239</id><snippet>print</snippet></ROW><ROW><id>14053239</id><snippet>def d(msg='my default message'):
    def decorator(func):
        def newfn(request, **kwargs):
            print msg
            return func(request, **kwargs)
        return newfn
    return decorator
</snippet></ROW><ROW><id>14053383</id><snippet>import json
print ''.join(json.loads(yourstring)['error']['data'])
</snippet></ROW><ROW><id>14054039</id><snippet>robots.txt</snippet></ROW><ROW><id>14054039</id><snippet>sitemap.xml</snippet></ROW><ROW><id>14054039</id><snippet>static</snippet></ROW><ROW><id>14054039</id><snippet>from flask import Flask, request, send_from_directory

@app.route('/robots.txt')
@app.route('/sitemap.xml')
def static_from_root():
    return send_from_directory(app.static_folder, request.path[1:])
</snippet></ROW><ROW><id>14054139</id><snippet>KStandardDirs.locate(b"socket", "foo")
</snippet></ROW><ROW><id>14054250</id><snippet>javac -encoding UTF-8 HelloWorld.java</snippet></ROW><ROW><id>14054250</id><snippet>java -Dfile.encoding=UTF-8</snippet></ROW><ROW><id>14054250</id><snippet>subprocess</snippet></ROW><ROW><id>14054396</id><snippet>r'\bcat\b'</snippet></ROW><ROW><id>14054396</id><snippet>\b</snippet></ROW><ROW><id>14054396</id><snippet>r'\bcat\b|\bdog\b'</snippet></ROW><ROW><id>14054396</id><snippet>"filename: &lt;words that are found in it&gt;"</snippet></ROW><ROW><id>14054396</id><snippet>#!/usr/bin/env python
import os
import re
import sys

def fgrep(words, filenames, encoding='utf-8', case_insensitive=False):
    findwords = re.compile("|".join(r"\b%s\b" % re.escape(w) for w in words),
                           flags=re.I if case_insensitive else 0).findall
    for name in filenames:
        with open(name, 'rb') as file:
             text = file.read().decode(encoding)
             found_words = set(findwords(text))
             yield name, found_words

def main():
    words = [w.decode(sys.stdin.encoding) for w in sys.argv[1].split(",")]
    filenames = sys.argv[2:] # the rest is filenames
    for filename, found_words in fgrep(words, filenames):
        print "%s: %s" % (os.path.basename(filename), ",".join(found_words))

main()
</snippet></ROW><ROW><id>14054396</id><snippet>$ python findwords.py 'cat,dog' /path/to/*.txt
</snippet></ROW><ROW><id>14054396</id><snippet>import codecs

...
with codecs.open(name, encoding=encoding) as file:
    found_words = set(w for line in file for w in findwords(line))
</snippet></ROW><ROW><id>14054396</id><snippet>from colorama import init  # pip install colorama
init(strip=not sys.stdout.isatty())  # strip colors if stdout is redirected
from termcolor import colored  # pip install termcolor

highlight = lambda s: colored(s, on_color='on_red', attrs=['bold', 'reverse'])

...
regex = re.compile("|".join(r"\b%s\b" % re.escape(w) for w in words),
                   flags=re.I if case_insensitive else 0)

for line in file:
    if regex.search(line): # line contains words
       line = regex.sub(lambda m: highlight(m.group()), line)
       yield line
</snippet></ROW><ROW><id>14054659</id><snippet>eta</snippet></ROW><ROW><id>14054659</id><snippet>countdown</snippet></ROW><ROW><id>14054912</id><snippet>writerows</snippet></ROW><ROW><id>14054912</id><snippet>csv_file.writerows(the_list)
</snippet></ROW><ROW><id>14054912</id><snippet>buffering</snippet></ROW><ROW><id>14054912</id><snippet>open</snippet></ROW><ROW><id>14055017</id><snippet>CreateProcess()</snippet></ROW><ROW><id>14055201</id><snippet>p = re.compile(r'(?&lt;=\d)\s(?=\d)')
p.sub(';', my_table1)
</snippet></ROW><ROW><id>14055201</id><snippet>(?&lt;=\d)</snippet></ROW><ROW><id>14055201</id><snippet>\d</snippet></ROW><ROW><id>14055201</id><snippet>\s</snippet></ROW><ROW><id>14055201</id><snippet>(?=\d)</snippet></ROW><ROW><id>14055201</id><snippet>;</snippet></ROW><ROW><id>14055201</id><snippet>(?&lt;=\d+)</snippet></ROW><ROW><id>14055201</id><snippet>r'\s(?=\d)'</snippet></ROW><ROW><id>14055387</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

#fetch html
source = urllib2.urlopen(url)

#parse with BeautifulSoup
BS = BeautifulSoup(source)

#search for title element, print element.text
print BS.find('title').text
</snippet></ROW><ROW><id>14055541</id><snippet>pickle</snippet></ROW><ROW><id>14055814</id><snippet>a = [i for i in a if i[-1] != 0] #list comprehension (1 line) method.
</snippet></ROW><ROW><id>14055814</id><snippet>tmp = []
for i in a:
    if i[-1] != 0:
        tmp.append(i)
a = tmp
</snippet></ROW><ROW><id>14055814</id><snippet>&gt;&gt;&gt; a=[(102,12,0),(123,12,0),(124,12,1)]
&gt;&gt;&gt; a = [i for i in a if i[-1] != 0]
&gt;&gt;&gt; a
[(124, 12, 1)]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14055844</id><snippet>### test_nested.py ###
import timeit
def foo():
    def bar():
        pass
    pass
print(timeit.timeit("foo()", setup="from __main__ import foo"))

### test_flat.py ###
import timeit
def foo():
    pass
def bar():
    pass
print(timeit.timeit("foo()", setup="from __main__ import foo, bar"))


### Shell ###
✗ python3 ./test_flat.py
0.42562198638916016
✗ python3 ./test_nested.py
0.5836758613586426
</snippet></ROW><ROW><id>14056185</id><snippet>assignment_stmt ::=  (target_list "=")+ (expression_list | yield_expression)
                                      ^ here
</snippet></ROW><ROW><id>14056244</id><snippet>import sqlalchemy as sa

engine = sa.create_engine('sqlite://', echo=True)
metadata = sa.MetaData()

widgets_table = sa.Table('widgets', metadata,
    sa.Column('id', sa.Integer, primary_key=True),
    sa.Column('foo', sa.String(50)),
    sa.Column('bar', sa.String(50)),
    sa.Column('biz', sa.Boolean),
    sa.Column('baz', sa.Integer),
    )
metadata.create_all(engine)

# Assuming this is your data
values = [
    (None, "Test", True, 3),
    (None, "Test", True, 3),
    ]

with engine.connect() as connection:
    with connection.begin() as transaction:
        try:
            markers = ','.join('?' * len(values[0]))
            ins = 'INSERT INTO {tablename} VALUES ({markers})'
            ins = ins.format(tablename=widgets_table.name, markers=markers)
            connection.execute(ins, values)
        except:
            transaction.rollback()
            raise
        else:
            transaction.commit()
</snippet></ROW><ROW><id>14056272</id><snippet>%%</snippet></ROW><ROW><id>14056272</id><snippet>%</snippet></ROW><ROW><id>14056272</id><snippet>%</snippet></ROW><ROW><id>14056272</id><snippet>%s</snippet></ROW><ROW><id>14056272</id><snippet>cursor.execute("select * from books where name like '%%oo%%' OFFSET %s LIMIT %s", (0,1))
</snippet></ROW><ROW><id>14056340</id><snippet>csv</snippet></ROW><ROW><id>14056340</id><snippet>'1/7/2012'</snippet></ROW><ROW><id>14056340</id><snippet>'01/07/2012'</snippet></ROW><ROW><id>14056340</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>14056340</id><snippet>import datetime

dt = datetime.datetime.strptime(datecolumn, '%m/%d/%Y').date()
</snippet></ROW><ROW><id>14056340</id><snippet>strptime()</snippet></ROW><ROW><id>14056340</id><snippet>1/7/2012</snippet></ROW><ROW><id>14056340</id><snippet>01/07/2012</snippet></ROW><ROW><id>14056340</id><snippet>datetime.date(2012, 1, 7)</snippet></ROW><ROW><id>14056340</id><snippet>date()</snippet></ROW><ROW><id>14056346</id><snippet>__lt</snippet></ROW><ROW><id>14056346</id><snippet>today_min = datetime.datetime.combine(date.today(), datetime.time.min)
get_meetings = ( Meeting
                .objects
                .filter(created_by = user_id.id,
                        meeting_datetime__lt =  today_min
                       )
               )
</snippet></ROW><ROW><id>14056395</id><snippet>#Create a set of all the records from the first file
lookup = set(open("test01.txt").read().splitlines())
#and then open the second file for reading and a new out file
#for writing
with open("test02.txt") as fin, open("test02.out","w") as fout:
    #iterate through each line in the file
    for line in fin:
        #and split it with the seperator
        line  = map(str.strip, line.split(":"))
        #if the key is in the lookup set 
        if line[0] in lookup:
            #replace it with space
            line[0] = " "
        #and then join the line tuple and suffix with newline
        line = ":".join(line) + "\n"
        #finally write the resultant line to the out file
        fout.write(line)
</snippet></ROW><ROW><id>14056439</id><snippet>import flask
import serial
from time import sleep

app = flask.Flask(__name__)
app.debug = True

def event_barcode():
    messageid = 0
    ser = serial.Serial()
    ser.port = 0
    ser.baudrate = 9600
    ser.bytesize = 8
    ser.parity = serial.PARITY_NONE
    ser.stopbits = serial.STOPBITS_ONE
    ser.timeout = 0
    try:
        ser.open()
    except serial.SerialException, e:
         yield 'event:error\n' + 'data:' + 'Serial port error({0}): {1}\n\n'.format(e.errno, e.strerror)
         messageid = messageid + 1
    str_list = []
    while True:
        sleep(0.01)
        nextchar = ser.read()
        if nextchar:
            str_list.append(nextchar)
        else:
            if len(str_list) &gt; 0:
                yield 'id:' + str(messageid) + '\n' + 'data:' + ''.join(str_list) + '\n\n'
                messageid = messageid + 1
                str_list = []

@app.route('/barcode')
def barcode():
    newresponse = flask.Response(event_barcode(), mimetype="text/event-stream")
    newresponse.headers.add('Access-Control-Allow-Origin', '*')
    newresponse.headers.add('Cache-Control', 'no-cache')
    return newresponse

if __name__ == '__main__':
    app.run(port=8080, threaded=True)
</snippet></ROW><ROW><id>14056496</id><snippet>meal_allowed = tuple(('Hamburger', 2), ('Chicken', 3), ('Turkey', 4))
</snippet></ROW><ROW><id>14056496</id><snippet>meal</snippet></ROW><ROW><id>14056496</id><snippet>meals = ['hamburger', 'Turkey', 'Chicken']
for meal in meals:
    rank = config[meal][rank]
</snippet></ROW><ROW><id>14056496</id><snippet>rank</snippet></ROW><ROW><id>14056496</id><snippet>rank = config[meal][rank]</snippet></ROW><ROW><id>14056496</id><snippet>eatable = list()
meals = ['hamburger', 'Turkey', 'Chicken']
for meal in meals:
    rank = config[meal][rank]
    if re.search( config[meal][ingredients]['Allowlist'], badingredients, re.M|re.I):
        eatable.append((meal, rank))

print eatable
</snippet></ROW><ROW><id>14056672</id><snippet>class Struct1(object):
    fields = ('a','b','c')
    ...

class Struct2(object):
    fields = ('foo', 'bar', 'baz')
    ...
</snippet></ROW><ROW><id>14056672</id><snippet>class StructWriter(object):
    packTypeMap = {int:'i', float:'f', str:'s'}

    def write(self, obj):
        fields = obj.fields
        packstring = ''.join(packTypeMap[type(f)] for f in fields)
        packargs = (getattr(obj,f) for f in fields)
        return struct.pack(packstring, *packargs)

class DictWriter(object):
    def write(self, obj):
        return dict((f, getattr(obj,f)) for f in obj.fields)

class JSONWriter(object):
    jsonTypeMap = {str:lambda s:"'"+s+"'"}
    defaultJsonFunc = lambda x:str(x)
    def write(self, obj):
        # not really recommended to roll your own strings, but for illustration...
        fields = obj.fields
        outargs = (getattr(obj,f) for f in fields)
        outvals = (jsonTypeMap.get(type(arg),defaultJsonFunc)(arg) 
                       for arg in outargs)
        return ('{' +
            ','.join("'%s':%s" % field_val for field_val in zip(fields, outvals))
            '}')

class ZipJSONWriter(JSONWriter):
    def write(self, obj):
        import zlib
        return zlib.compress(super(ZipJSONWriter,self).write(obj))        

class HTMLTableWriter(object):
    def write(self, obj):
        out = "&lt;table&gt;"
        for field in obj.fields:
            out += "&lt;tr&gt;&lt;td&gt;%s&lt;/td&gt;&lt;td&gt;%s&lt;/td&gt;&lt;/tr&gt;" % (field, getattr(obj,field))
        out += "&lt;/table&gt;"
        return out
</snippet></ROW><ROW><id>14056979</id><snippet>import re
src = ['(111,11,12)', '(12,34,56)']
[tuple([int(n) for n in re.findall(r"(\d+),(\d+),(\d+)", s)[0]]) for s in src]
</snippet></ROW><ROW><id>14056985</id><snippet>location</snippet></ROW><ROW><id>14056985</id><snippet>static/generate.php</snippet></ROW><ROW><id>14057059</id><snippet>total</snippet></ROW><ROW><id>14057059</id><snippet>0x74 0x64 0x74 0x61 0x6c</snippet></ROW><ROW><id>14057059</id><snippet>0x74 0xd0 0xbe 0x74 0x61 0x6c</snippet></ROW><ROW><id>14057059</id><snippet>val</snippet></ROW><ROW><id>14057059</id><snippet>0x76 0x61 0x6c</snippet></ROW><ROW><id>14057059</id><snippet>0x76 0xd0 0xbe 0x6c</snippet></ROW><ROW><id>14057077</id><snippet>self.connection.execute(select([func.count(table.c.id)]))
</snippet></ROW><ROW><id>14057077</id><snippet>r = engine.execute(select([func.count(table.c.id)]))
print r
for i in r:
    print i
</snippet></ROW><ROW><id>14057077</id><snippet>&lt;sqlalchemy.engine.base.ResultProxy object at 0x032F4E30&gt;
(1,)
</snippet></ROW><ROW><id>14057221</id><snippet>sys</snippet></ROW><ROW><id>14057221</id><snippet>sys</snippet></ROW><ROW><id>14057221</id><snippet>sys.modules</snippet></ROW><ROW><id>14057221</id><snippet>sys</snippet></ROW><ROW><id>14057221</id><snippet>sys.py</snippet></ROW><ROW><id>14057221</id><snippet>python.exe</snippet></ROW><ROW><id>14057325</id><snippet>csv_file</snippet></ROW><ROW><id>14057325</id><snippet>\r\n</snippet></ROW><ROW><id>14057325</id><snippet>In [1]: import csv

In [2]: csv_file = # Copied the response from your error into this variable

In [3]: reader = csv.reader(csv_file.split('\r\n'))

In [4]: for row in reader:
   ...:     if row:
   ...:         print row[0]
   ...:         
   ...:         
name
Amazon
B Shop
Otto
</snippet></ROW><ROW><id>14057325</id><snippet>if row</snippet></ROW><ROW><id>14057325</id><snippet>\r\n</snippet></ROW><ROW><id>14057325</id><snippet>\r\n</snippet></ROW><ROW><id>14057325</id><snippet>csv.reader</snippet></ROW><ROW><id>14057325</id><snippet>IndexError</snippet></ROW><ROW><id>14057325</id><snippet>In [8]: csv_file = [row for row in csv_file.split('\r\n') if row]

In [9]: reader = csv.reader(csv_file)

In [10]: for row in reader:
   ....:     print row[0]
   ....:     
   ....:     
name
Amazon
B Shop
Otto
</snippet></ROW><ROW><id>14057325</id><snippet>some_csv = 'header1,header2\nvalue1,value2'
</snippet></ROW><ROW><id>14057325</id><snippet>csv.reader</snippet></ROW><ROW><id>14057325</id><snippet>csv.reader</snippet></ROW><ROW><id>14057325</id><snippet>dataset</snippet></ROW><ROW><id>14057325</id><snippet>In [1]: import csv

In [2]: some_csv = 'header1,header2\nvalue1,value2'

In [3]: fileReader = csv.reader(some_csv.split("\n"))

In [4]: fileReader
Out[4]: &lt;_csv.reader object at 0x1306440&gt;

In [5]: for data in fileReader:
   ...:     print data
   ...:     
   ...:     
['header1', 'header2']
['value1', 'value2']
</snippet></ROW><ROW><id>14057325</id><snippet>print data[1]</snippet></ROW><ROW><id>14057325</id><snippet>data[0]</snippet></ROW><ROW><id>14057325</id><snippet>In [1]: import csv

In [2]: some_csv = 'some_csv.csv'

In [3]: fileReader = csv.reader(some_csv.split("\n"))

In [4]: for data in fileReader:
   ...:     print data
   ...:     
   ...:     
['some_csv.csv']
</snippet></ROW><ROW><id>14057325</id><snippet>IndexError</snippet></ROW><ROW><id>14057325</id><snippet>In [1]: import csv

In [2]: some_csv = 'some_csv.csv'

In [3]: with open(some_csv, 'rb') as f:
   ...:     fileReader = csv.reader(f)
   ...:     for data in fileReader:
   ...:         print data[0]
   ...:         
   ...:         
header1
value1
</snippet></ROW><ROW><id>14057505</id><snippet>&gt;&gt;&gt; file_list = [ 'drug.resp1.17A.tag', 'drug.resp1.96A.tag', 'drug.resp1.56B.tag', 'drug.resp2.17A.tag', 'drug.resp2.56B.tag', 'drug.resp2.96A.tag']
&gt;&gt;&gt; dictonary = {}
... for i in file_list:
...     k = i.split('.')[-2]
...     if k in dictonary:
...         dictonary[k].append(i)
...     else:
...         dictonary[k] = [i]
&gt;&gt;&gt; dictonary
62: {'17A': ['drug.resp1.17A.tag', 'drug.resp2.17A.tag'],
 '56B': ['drug.resp1.56B.tag', 'drug.resp2.56B.tag'],
 '96A': ['drug.resp1.96A.tag', 'drug.resp2.96A.tag']}
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14057505</id><snippet>&gt;&gt;&gt; drug_list = [ '17A', '96A', '56B']
... dictonary = {}
... for i in file_list:
...     k = i.split('.')[-2]
...     if k in drug_list:
...         if k in dictonary:
...             dictonary[k].append(i)
...         else:
...             dictonary[k] = [i]
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>14057505</id><snippet>dictonary = dict(((i,[]) for i in drug_list))

dictonary = {drug: [] for drug in drug_list}  # As @J.F. Sebastian suggested.

for file in file_list:
    k = file.split('.')[-2]
    if k in dictonary:
        dictonary[k].append(file)
</snippet></ROW><ROW><id>14057574</id><snippet>from ...common import foo
</snippet></ROW><ROW><id>14057574</id><snippet>main</snippet></ROW><ROW><id>14057574</id><snippet>main</snippet></ROW><ROW><id>14057574</id><snippet>/main/</snippet></ROW><ROW><id>14057574</id><snippet>import A.src.bar</snippet></ROW><ROW><id>14057574</id><snippet>A</snippet></ROW><ROW><id>14057574</id><snippet>/</snippet></ROW><ROW><id>14057574</id><snippet>import main.A.src.bar</snippet></ROW><ROW><id>14057574</id><snippet>main</snippet></ROW><ROW><id>14057574</id><snippet>from ...common import foo
from main.common import foo
</snippet></ROW><ROW><id>14057574</id><snippet>.</snippet></ROW><ROW><id>14057849</id><snippet>inspect</snippet></ROW><ROW><id>14057849</id><snippet>import inspect

def myargs(val1, val2, val3=None, val4=5):
        print inspect.currentframe().f_locals
</snippet></ROW><ROW><id>14057849</id><snippet>myargs('a','b')
==&gt;  {'val3': None, 'val2': 'b', 'val1': 'a', 'val4': 5}
</snippet></ROW><ROW><id>14057849</id><snippet>def _yourargs(*names):
        "returns a dict with your named local vars"
        alllocs = inspect.stack()[1][0].f_locals
        return {n:alllocs[n] for n in names}

def askformine(val1, val2, val3=None, val4=5):
        "example to show just those args i'm interested in"
        print _yourargs('val1','val2','val3','val4')

class Obj(object):
        "example inserting some named args as instance attributes"
        def __init__(self, arg1, arg2=4):
                 self.__dict__.update(_yourargs('arg1','arg2'))
</snippet></ROW><ROW><id>14057849</id><snippet>def pickdict(d,*names):
    "picks some values from a dict"
    return {n:d[n] for n in names}

class Obj(object):
    "example inserting some named args as instance attributes"
    def __init__(self, arg1, arg2=4):
        self.__dict__.update(pickdict(locals(),'arg1','arg2'))
</snippet></ROW><ROW><id>14057905</id><snippet>In [2]: import decimal

In [3]: d = decimal.Decimal('0.123456789101997')

In [4]: print d
0.123456789101997
</snippet></ROW><ROW><id>14057986</id><snippet>Ctrl-X</snippet></ROW><ROW><id>14057986</id><snippet>Ctrl-O</snippet></ROW><ROW><id>14057986</id><snippet>Ctrl-G</snippet></ROW><ROW><id>14058008</id><snippet>print"What's ur name?"
name=raw_input("Name: ")
print"Ok your name is %s."%name
</snippet></ROW><ROW><id>14058008</id><snippet>print "What's ur name?"
name = raw_input("Name: ")
print "Ok your name is %s" % name
</snippet></ROW><ROW><id>14058092</id><snippet>distutils.version</snippet></ROW><ROW><id>14058092</id><snippet>StrictVersion</snippet></ROW><ROW><id>14058092</id><snippet>In [3]: from distutils.version import StrictVersion

In [4]: s = ['1.04','1.6','1.14', '2.02.04', '1.14.01']

In [5]: max(s, key=StrictVersion)
Out[5]: '2.02.04'
</snippet></ROW><ROW><id>14058092</id><snippet>max</snippet></ROW><ROW><id>14058092</id><snippet>In [1]: s = ['1.04','1.6','1.14']

In [2]: max(s, key=float)
Out[2]: '1.6'
</snippet></ROW><ROW><id>14058092</id><snippet>In [4]: s = ['1.04','1.6','1.14']

In [5]: s_floats = [float(x) for x in s]

In [6]: s_floats
Out[7]: [1.04, 1.6000000000000001, 1.1399999999999999]
</snippet></ROW><ROW><id>14058092</id><snippet>In [9]: max(s_floats)
Out[9]: 1.6000000000000001
</snippet></ROW><ROW><id>14058214</id><snippet>tempfile.py</snippet></ROW><ROW><id>14058319</id><snippet>celerybeat-schedule</snippet></ROW><ROW><id>14058319</id><snippet>/var/run/celerybeat-schedule</snippet></ROW><ROW><id>14058319</id><snippet>root</snippet></ROW><ROW><id>14058319</id><snippet>root</snippet></ROW><ROW><id>14058425</id><snippet>import numpy as np

noise = np.random.normal(0,1,100)

# 0 is the mean of the normal distribution you are choosing from
# 1 is the standard deviation of the normal distribution
# 100 is the number of elements you get in array noise
</snippet></ROW><ROW><id>14058475</id><snippet>logging.StreamHandler()</snippet></ROW><ROW><id>14058475</id><snippet>stdout</snippet></ROW><ROW><id>14058475</id><snippet>stderr</snippet></ROW><ROW><id>14058475</id><snippet>import logging
import sys

root = logging.getLogger()

ch = logging.StreamHandler(sys.stdout)
ch.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
ch.setFormatter(formatter)
root.addHandler(ch)
</snippet></ROW><ROW><id>14058618</id><snippet>window_maximize</snippet></ROW><ROW><id>14058618</id><snippet>browser.set_window_size(800, 600)</snippet></ROW><ROW><id>14058618</id><snippet>browser.set_window_position(0, 0)</snippet></ROW><ROW><id>14058674</id><snippet>invalidcommand</snippet></ROW><ROW><id>14058674</id><snippet>import Tkinter as tk

def onvalidate(d,i,P,s,S,v,V,W):
    # only lowercase is valid
    valid = (P.lower() == P)
    # set red background if invalid
    newcolor = 'red' if not valid else default_color
    root.nametowidget(W).configure(background=newcolor)
    return valid

def oninvalid(d,i,P,s,S,v,V,W):
    #called if widget is invalid
    widget = root.nametowidget(W)
    # S is the character that *would* have been
    # inserted or deleted, but won't because it is invalid
    # So we do it ourselves
    if S:
        if d=='0':
            widget.delete(i, len(S))
        elif d=='1':
            widget.insert(i, S)
    # Changing the text clears the 'validate' value
    # so we have to reset it
    widget.after_idle(lambda W,v: root.nametowidget(W).configure(validate=v), W, v)

root = tk.Tk()

valhook = (root.register(onvalidate), '%d', '%i', '%P', '%s', '%S', '%v', '%V', '%W')
invhook = (root.register(oninvalid), '%d', '%i', '%P', '%s', '%S', '%v', '%V', '%W')

entry = tk.Entry(root, validate="key", validatecommand=valhook, invalidcommand=invhook)

default_color = entry.cget('background')

entry.pack()

root.mainloop()
</snippet></ROW><ROW><id>14058883</id><snippet>service.freebusy().query(freebusy_query)
</snippet></ROW><ROW><id>14058883</id><snippet>service.freebusy().query(body=freebusy_query)
</snippet></ROW><ROW><id>14058904</id><snippet>flask</snippet></ROW><ROW><id>14058904</id><snippet>web.py</snippet></ROW><ROW><id>14058904</id><snippet>django</snippet></ROW><ROW><id>14058904</id><snippet>pylons</snippet></ROW><ROW><id>14058904</id><snippet>GET</snippet></ROW><ROW><id>14058904</id><snippet>POST</snippet></ROW><ROW><id>14058904</id><snippet>JSON</snippet></ROW><ROW><id>14058904</id><snippet>MySQL</snippet></ROW><ROW><id>14058904</id><snippet>postgresql</snippet></ROW><ROW><id>14058904</id><snippet>sqlalchemy</snippet></ROW><ROW><id>14058904</id><snippet>XXX-r24-20121224.tar.gz</snippet></ROW><ROW><id>14058904</id><snippet>glob</snippet></ROW><ROW><id>14058904</id><snippet>requests</snippet></ROW><ROW><id>14058904</id><snippet>urllib2</snippet></ROW><ROW><id>14058904</id><snippet>requests</snippet></ROW><ROW><id>14058904</id><snippet>urllib2</snippet></ROW><ROW><id>14058904</id><snippet>zipfile</snippet></ROW><ROW><id>14058904</id><snippet>tarfile</snippet></ROW><ROW><id>14058904</id><snippet>zipfile</snippet></ROW><ROW><id>14058904</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>14058904</id><snippet>py2exe</snippet></ROW><ROW><id>14059049</id><snippet>QWebPage::javaScriptAlert ( QWebFrame * frame, const QString &amp; msg )</snippet></ROW><ROW><id>14059322</id><snippet>inputdata = '(1 ((st 8) (pitch 67) (dur 4) (keysig 1) (timesig 12) (fermata 0))((st 12) (pitch 67) (dur 8) (keysig 1) (timesig 12) (fermata 0)))'

from pyparsing import OneOrMore, nestedExpr

data = OneOrMore(nestedExpr()).parseString(inputdata)
print data

# [['1', [['st', '8'], ['pitch', '67'], ['dur', '4'], ['keysig', '1'], ['timesig', '12'], ['fermata', '0']], [['st', '12'], ['pitch', '67'], ['dur', '8'], ['keysig', '1'], ['timesig', '12'], ['fermata', '0']]]]
</snippet></ROW><ROW><id>14059322</id><snippet>from texttable import Texttable

tab = Texttable()
for row in data.asList()[0][1:]:
    row = dict(row)
    tab.header(row.keys())
    tab.add_row(row.values())
print tab.draw()
</snippet></ROW><ROW><id>14059322</id><snippet>def lisp(x):
    return '(%s)' % ' '.join(lisp(y) for y in x) if isinstance(x, list) else x

d = lisp(d[0])
</snippet></ROW><ROW><id>14059486</id><snippet>get</snippet></ROW><ROW><id>14059486</id><snippet>i.tags</snippet></ROW><ROW><id>14059486</id><snippet>print ("Tag Value " + str(i.tags.get('Name')))
</snippet></ROW><ROW><id>14059597</id><snippet>(?&lt;=[.!?])\s(?=[A-Z])
</snippet></ROW><ROW><id>14059597</id><snippet>Mr. Smith</snippet></ROW><ROW><id>14059597</id><snippet>Dr. Jones</snippet></ROW><ROW><id>14059666</id><snippet>$ hg clone https://vim.googlecode.com/hg/ vim
$ cd vim/src
$ ./configure \
--enable-multibyte \
--without-x \
--enable-gui=no \
--enable-pythoninterp

$ make
$ make install
$ ln -sf /usr/local/bin/vim.exe /usr/bin/vim
</snippet></ROW><ROW><id>14059666</id><snippet>libncurses-devel</snippet></ROW><ROW><id>14060024</id><snippet>ndimage.generic_filter</snippet></ROW><ROW><id>14060024</id><snippet>im</snippet></ROW><ROW><id>14060024</id><snippet>footprint</snippet></ROW><ROW><id>14060024</id><snippet>res</snippet></ROW><ROW><id>14060024</id><snippet>def test(x):
    return (x*0.5).sum()
</snippet></ROW><ROW><id>14060138</id><snippet>localhost-2:~ $ pip --version
pip 1.2.1.post1 from /Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/pip-1.2.1.post1-py2.7.egg (python 2.7)
localhost-2:~ $ pip --help
Usage: pip COMMAND [OPTIONS]

Commands:
  bundle               Create pybundles (archives containing multiple packages)
  freeze               Output all currently installed packages (exact versions) to stdout
  help                 Show available commands
  install              Install packages
  list                 List installed packages (including editables).
  search               Search PyPI
  show                 Output installed distributions (exact versions, files) to stdout
  uninstall            Uninstall packages
  unzip                Unzip individual packages
  zip                  Zip individual packages
</snippet></ROW><ROW><id>14060138</id><snippet>git clone https://github.com/pypa/pip.git
</snippet></ROW><ROW><id>14060175</id><snippet>&lt;app:control&gt;
    &lt;yt:state name="restricted" reasonCode="limitedSyndication"&gt;Syndication of this video was restricted.&lt;/yt:state&gt;
&lt;/app:control&gt;
</snippet></ROW><ROW><id>14060175</id><snippet>entry</snippet></ROW><ROW><id>14060175</id><snippet>entry.control.FindExtensions('state')[0].attributes
</snippet></ROW><ROW><id>14060175</id><snippet>{'name': 'restricted', 'reasonCode': 'limitedSyndication'}
</snippet></ROW><ROW><id>14060175</id><snippet>control</snippet></ROW><ROW><id>14060175</id><snippet>state</snippet></ROW><ROW><id>14060175</id><snippet>state</snippet></ROW><ROW><id>14060175</id><snippet>fields</snippet></ROW><ROW><id>14060175</id><snippet>&lt;yt:state&gt;</snippet></ROW><ROW><id>14060175</id><snippet>entry[not(app:control/yt:state)]
</snippet></ROW><ROW><id>14060175</id><snippet>(title,media:group)</snippet></ROW><ROW><id>14060175</id><snippet>fields</snippet></ROW><ROW><id>14060175</id><snippet>control</snippet></ROW><ROW><id>14060360</id><snippet>In [1]: paste
from pandas import DataFrame
f = DataFrame({'a': ['1','2','3'], 'b': ['2','3','4']})
f.columns = [['level1 item1', 'level1 item2'],['', 'level2 item2'], ['level3 item1', 'level3 item2']]
f

## -- End pasted text --
Out[1]: 
  level1 item1 level1 item2
               level2 item2
  level3 item1 level3 item2
0            1            2
1            2            3
2            3            4

In [2]: f['level1 item1']
Out[2]: 
  level3 item1
0            1
1            2
2            3
</snippet></ROW><ROW><id>14060382</id><snippet>65248E10 11
55555E55 22
</snippet></ROW><ROW><id>14060382</id><snippet>&gt;&gt;&gt; pd.read_table("cusip.txt", header=None, delimiter=" ", converters={0: str})
          0   1
0  65248E10  11
1  55555E55  22
</snippet></ROW><ROW><id>14060382</id><snippet>header=None</snippet></ROW><ROW><id>14060382</id><snippet>delimiter=" "</snippet></ROW><ROW><id>14060382</id><snippet>converters={0: str}</snippet></ROW><ROW><id>14060382</id><snippet>converters={0: str}</snippet></ROW><ROW><id>14060382</id><snippet>dtype=(str, int)</snippet></ROW><ROW><id>14060382</id><snippet>pandas</snippet></ROW><ROW><id>14060382</id><snippet>header=0</snippet></ROW><ROW><id>14060382</id><snippet>0</snippet></ROW><ROW><id>14060596</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; string_to_search = 'fish, hook, swallowed, reeled, boat, fish'
&gt;&gt;&gt; entered_by_user = 'fish'
&gt;&gt;&gt; search_regex = r"{0}(.+){0}".format(entered_by_user)
&gt;&gt;&gt; match = re.search(search_regex, string_to_search)
&gt;&gt;&gt; if match:
...     print "result:", match.group(1).strip(' ,')
...
result: hook, swallowed, reeled, boat
</snippet></ROW><ROW><id>14060596</id><snippet>{0}</snippet></ROW><ROW><id>14060596</id><snippet>format()</snippet></ROW><ROW><id>14060608</id><snippet>setUP()</snippet></ROW><ROW><id>14060608</id><snippet>setUp()</snippet></ROW><ROW><id>14060608</id><snippet>unittest.TestCase</snippet></ROW><ROW><id>14060608</id><snippet>setUp()</snippet></ROW><ROW><id>14060754</id><snippet>#nginx.conf

server
{
   listen 443 default_server ssl;
   ssl_certificate      /etc/ssl/mydomain.crt ;
   ssl_certificate_key  /etc/ssl/myserver.key;

   #  etc
}
</snippet></ROW><ROW><id>14060772</id><snippet>if</snippet></ROW><ROW><id>14060772</id><snippet>bool(a)</snippet></ROW><ROW><id>14060781</id><snippet>.</snippet></ROW><ROW><id>14060781</id><snippet>In [18]: re.split(r'(?&lt;!\d)\.|\.(?!\d)', text)
Out[18]: ['hello world', 'foo 1.1 bar', '1']
</snippet></ROW><ROW><id>14060890</id><snippet>all</snippet></ROW><ROW><id>14060890</id><snippet>brown</snippet></ROW><ROW><id>14060890</id><snippet>In [1]: strings = ['30 brown bears', '30 brown foxes', '20 green turtles', '10 brown dogs']

In [2]: keep = ('brown')

In [3]: ignore = ('bear', 'dog')

In [4]: for text in strings:
   ...:     if all([k in text for k in keep] + [i not in text for i in ignore]):
   ...:         print text
   ...:         
   ...:         
30 brown foxes
</snippet></ROW><ROW><id>14060908</id><snippet>allorders = [i if i[0] is not None else (0, i[1]) for i in allorders]
</snippet></ROW><ROW><id>14061071</id><snippet>adbapi</snippet></ROW><ROW><id>14061071</id><snippet>ConnectionPool.runQuery()</snippet></ROW><ROW><id>14061071</id><snippet>runQuery</snippet></ROW><ROW><id>14061071</id><snippet>from twisted.internet import reactor
from twisted.enterprise import adbapi 

def got_result(value):
    # do something, value won't be interesting on insert statements, though
    print "Horray"    
    # since this is all we want to do, stop the reactor
    reactor.stop()

d = dbpool.runQuery("INSERT INTO `htp_test` VALUES(NULL, 25, 'test')")
d.addCallback(got_result)

reactor.run()
</snippet></ROW><ROW><id>14061288</id><snippet>Counter</snippet></ROW><ROW><id>14061288</id><snippet>defaultdict</snippet></ROW><ROW><id>14061288</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; basket1 = {"ham":2,"eggs":3}
&gt;&gt;&gt; basket2 = {"eggs":4,"spam":1}
&gt;&gt;&gt; basket_sum = Counter(basket1) + Counter(basket2)
&gt;&gt;&gt; basket_sum
Counter({'eggs': 7, 'ham': 2, 'spam': 1})
</snippet></ROW><ROW><id>14061288</id><snippet>dict</snippet></ROW><ROW><id>14061288</id><snippet>&gt;&gt;&gt; dict(basket_sum)
{'eggs': 7, 'ham': 2, 'spam': 1}
</snippet></ROW><ROW><id>14061355</id><snippet>@app.route('/jsonpost', methods=['GET', 'POST'])
def json_post():
    if request.method == 'POST':
        dummy = request.form
    resp = make_response('{"test": "ok"}')
    resp.headers['Content-Type'] = "application/json"
    return resp
</snippet></ROW><ROW><id>14061355</id><snippet>--post-buffering 1</snippet></ROW><ROW><id>14061355</id><snippet>Content-Type</snippet></ROW><ROW><id>14061355</id><snippet>"text/html"</snippet></ROW><ROW><id>14061504</id><snippet>from subprocess import check_call

with open("refspecs.txt", "wb") as file:
    check_call("ssh -p 29418 company.com "
        "gerrit query --commit-message --files --current-patch-set "
        "status:open project:platform/vendor/company-proprietary/wlan branch:master |"
        "grep refs |"
        "awk -F ' ' '{print $2}'",
               shell=True,   # need shell due to the pipes
               stdout=file)  # redirect to a file
</snippet></ROW><ROW><id>14061504</id><snippet>tee</snippet></ROW><ROW><id>14061726</id><snippet>lines = f.readlines()
</snippet></ROW><ROW><id>14061726</id><snippet>print lines[4]
</snippet></ROW><ROW><id>14061744</id><snippet>re.findall()</snippet></ROW><ROW><id>14061744</id><snippet>In [5]: import re

In [8]: strs="{foo} spam eggs {bar}"

In [9]: re.findall(r"{(\w+)}",strs)
Out[9]: ['foo', 'bar']
</snippet></ROW><ROW><id>14061863</id><snippet>str.replace()</snippet></ROW><ROW><id>14061863</id><snippet>In [2]: strs='the quick brown fox'

In [3]: strs.replace('quick brown','')
Out[3]: 'the  fox'

In [4]: " ".join(strs.replace('quick brown','').split())
Out[4]: 'the fox'                          #single space between 'the' and 'fox'
</snippet></ROW><ROW><id>14061863</id><snippet>help()</snippet></ROW><ROW><id>14061863</id><snippet>str.replace()</snippet></ROW><ROW><id>14061863</id><snippet>S.replace(old, new[, count]) -&gt; str

Return a copy of S with all occurrences of substring
old replaced by new.  If the optional argument count is
given, only the first count occurrences are replaced.
</snippet></ROW><ROW><id>14062023</id><snippet>ImageMagick</snippet></ROW><ROW><id>14062023</id><snippet>convert</snippet></ROW><ROW><id>14062023</id><snippet>scp</snippet></ROW><ROW><id>14062023</id><snippet>bash</snippet></ROW><ROW><id>14062023</id><snippet>gd</snippet></ROW><ROW><id>14062023</id><snippet>gd</snippet></ROW><ROW><id>14062023</id><snippet>gd</snippet></ROW><ROW><id>14062023</id><snippet>ImageMagick</snippet></ROW><ROW><id>14062023</id><snippet>PIL</snippet></ROW><ROW><id>14062206</id><snippet>import os
def case_insensitive_open(filename, mode='r'):
    dir = os.path.dirname(filename)
    for potential_match in os.listdir(dir):
        if potential_match.lower() == filename.lower():
             return open(os.path.join(dir, potential_match), mode)
    else:
        return open(potential_match, mode)
</snippet></ROW><ROW><id>14062206</id><snippet>IOError</snippet></ROW><ROW><id>14062206</id><snippet>else</snippet></ROW><ROW><id>14062206</id><snippet>open()</snippet></ROW><ROW><id>14062330</id><snippet>main()</snippet></ROW><ROW><id>14062330</id><snippet>getdata()</snippet></ROW><ROW><id>14062330</id><snippet>def getdata(filename):
    file = open(filename,'r')
    return file.read()

filename="data_file.txt"
AU=getdata(filename)
</snippet></ROW><ROW><id>14062407</id><snippet>value_holder = set()
</snippet></ROW><ROW><id>14062407</id><snippet>append</snippet></ROW><ROW><id>14062407</id><snippet>add</snippet></ROW><ROW><id>14062407</id><snippet>blist</snippet></ROW><ROW><id>14062407</id><snippet>unique_everseen</snippet></ROW><ROW><id>14062407</id><snippet>itertools</snippet></ROW><ROW><id>14062407</id><snippet>inverted = {v:k for k, v in d.iteritems()}
reverted = {v:k for k, v in inverted.iteritems()}
</snippet></ROW><ROW><id>14062407</id><snippet>dict</snippet></ROW><ROW><id>14062407</id><snippet>set</snippet></ROW><ROW><id>14062407</id><snippet>dict</snippet></ROW><ROW><id>14062407</id><snippet>mydict = {}
for line in f:
    k, v = line.split(None, 1)
    mydict[k] = v

mapp = {}
value_holder = set()

for i in mydict:
    if mydict[i] not in value_holder:
        mapp[i] = mydict[i]
        value_holder.add(mydict[i])
</snippet></ROW><ROW><id>14062407</id><snippet>mapp = {}
value_holder = set()
for line in f:
    k, v = line.split(None, 1)
    if v not in value_holder:
        mapp[k] = v
        value_holder.add(v)
</snippet></ROW><ROW><id>14062407</id><snippet>one_to_one_dict</snippet></ROW><ROW><id>14062407</id><snippet>mapp = one_to_one_dict()
for line in f:
    k, v = line.split(None, 1)
    mapp[k] = v
</snippet></ROW><ROW><id>14062451</id><snippet>data</snippet></ROW><ROW><id>14062451</id><snippet>itertools.groupby</snippet></ROW><ROW><id>14062451</id><snippet>id</snippet></ROW><ROW><id>14062451</id><snippet>id</snippet></ROW><ROW><id>14062451</id><snippet>means</snippet></ROW><ROW><id>14062451</id><snippet>In [1]: from itertools import groupby

In [2]: data=[
   ...: {'Value': '0.2', 'id': 1},
   ...: {'Value': '1.2', 'id': 1},
   ...: {'Value': '33.34', 'id': 2},
   ...: {'Value': '44.3', 'id': 3},
   ...: {'Value': '33.23', 'id': 3},
   ...: {'Value': '21.1', 'id': 4},
   ...: {'Value': '5.33', 'id': 4},
   ...: {'Value': '33.3', 'id': 5},
   ...: {'Value': '12.2', 'id': 5},
   ...: {'Value': '1.22', 'id': 5},
   ...: {'Value': '1.23', 'id': 6}
   ...: ]

In [3]: means = {}

In [4]: for k, g in groupby(data, key=lambda x: x['id']):
   ...:     g = list(g)
   ...:     means[k] = sum(float(x['Value']) for x in g) / len(g)
   ...:     
   ...:     

In [5]: means
Out[5]: 
{1: 0.69999999999999996,
 2: 33.340000000000003,
 3: 38.765000000000001,
 4: 13.215,
 5: 15.573333333333332,
 6: 1.23}
</snippet></ROW><ROW><id>14062678</id><snippet>key</snippet></ROW><ROW><id>14062678</id><snippet>key = '1AjklhasdfLJK09j2f3nFLKnff9hf28fhGFAklnf8223'
</snippet></ROW><ROW><id>14062678</id><snippet>for key in row.custom:
</snippet></ROW><ROW><id>14062678</id><snippet>sheet_key</snippet></ROW><ROW><id>14062678</id><snippet>In [1]: key = 'abcdef'

In [2]: for key in ['one', 'two', 'three']:
   ...:     pass
   ...: 

In [3]: key
Out[3]: 'three'
</snippet></ROW><ROW><id>14062695</id><snippet>file.read()</snippet></ROW><ROW><id>14062695</id><snippet>file.read()</snippet></ROW><ROW><id>14062802</id><snippet>while min &lt;= cur &lt;= max:
    print "%r is in range." % valve
</snippet></ROW><ROW><id>14062802</id><snippet>if</snippet></ROW><ROW><id>14062802</id><snippet>if min &lt;= cur &lt;= max:
    print "%r is in range." % valve
</snippet></ROW><ROW><id>14062820</id><snippet>lower()</snippet></ROW><ROW><id>14062820</id><snippet>@app.route('/user/&lt;requested_username&gt;/&lt;requested_team&gt;')
def thing(requested_username, requested_team):
    requested_team = requested_team.lower()
    requested_username = requested_username.lower()

    ... then continue with the view
</snippet></ROW><ROW><id>14062820</id><snippet>lower</snippet></ROW><ROW><id>14063040</id><snippet>check_output</snippet></ROW><ROW><id>14063040</id><snippet>Popen</snippet></ROW><ROW><id>14063040</id><snippet>output = subprocess.Popen(['pwd'], stdout=subprocess.PIPE).communicate()[0]
</snippet></ROW><ROW><id>14063040</id><snippet>import subprocess
cmd = subprocess.Popen(['pwd'], stdout=subprocess.PIPE)
output = cmd.communicate()[0]
print cmd.returncode
print output
</snippet></ROW><ROW><id>14063040</id><snippet>&gt; python p.py
/Users/vlazarenko/tests
</snippet></ROW><ROW><id>14063040</id><snippet>Popen</snippet></ROW><ROW><id>14063233</id><snippet>&gt;&gt;&gt; def find_second_last(text, pattern):
...   return text.rfind(pattern, 0, text.rfind(pattern))
... 
&gt;&gt;&gt; find_second_last("abracadabra", "a")
7
</snippet></ROW><ROW><id>14063249</id><snippet>{'a': {'hata': 2, 'coata': 2}, 
'h': {'hata': 1}, 
'c': {'coata': 1}, 
't': {'hata': 1, 'coata': 1}, 
'o': {'coata': 1}}
</snippet></ROW><ROW><id>14063249</id><snippet>'a'</snippet></ROW><ROW><id>14063429</id><snippet>.strip()</snippet></ROW><ROW><id>14063429</id><snippet>communicate()[0]</snippet></ROW><ROW><id>14063429</id><snippet>import os
import subprocess
from subprocess import check_call

SCRIPT_ROOT=subprocess.Popen(['pwd'], stdout=subprocess.PIPE).communicate()[0].strip()
print SCRIPT_ROOT

def main ():
    if (os.path.isdir(SCRIPT_ROOT + "/Gerrits/HEAD/wlan")):
        print "SCRIPT_ROOT/Gerrits/HEAD/wlan already exists,cloning it again to the tip"
        check_call("rm -rf %s/Gerrits/HEAD/wlan" % SCRIPT_ROOT, shell=True)
        check_call("cd Gerrits/HEAD",shell=True)
    else:
        print "SCRIPT_ROOT/Gerrits/HEAD/wlan doesn't exist,cloning it"
        os.makedirs("Gerrits/HEAD/wlan")
        check_call("cd Gerrits/HEAD",shell=True)
        currdir=subprocess.Popen(['pwd'], stdout=subprocess.PIPE).communicate()[0].strip()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>14063429</id><snippet>vlazarenko@xx:~$ python o.py 
/media/home/vlazarenko
SCRIPT_ROOT/Gerrits/HEAD/wlan already exists,cloning it again to the tip
</snippet></ROW><ROW><id>14063473</id><snippet>construct_idx = 0
</snippet></ROW><ROW><id>14063473</id><snippet>print('Current construct number is: #{} on row {}, which is a Gibson assembly'.format(row[construct_idx], counter))
</snippet></ROW><ROW><id>14063473</id><snippet>print('Current construct number is: #' + row[0] + ' on row ' + str(counter) + ', which is a Gibson assembly')
</snippet></ROW><ROW><id>14063473</id><snippet>construct_reader = csv.reader(constructs, delimiter=',')
</snippet></ROW><ROW><id>14063473</id><snippet>construct_list = csv.reader(constructs, delimiter=',')
</snippet></ROW><ROW><id>14063537</id><snippet>stage.calculateChecksum(testarray)
</snippet></ROW><ROW><id>14063537</id><snippet>stage</snippet></ROW><ROW><id>14063537</id><snippet>self</snippet></ROW><ROW><id>14063537</id><snippet>stage</snippet></ROW><ROW><id>14063560</id><snippet>AlphaMeta</snippet></ROW><ROW><id>14063560</id><snippet>models.Model</snippet></ROW><ROW><id>14063560</id><snippet>django.db.models.base.ModelBase</snippet></ROW><ROW><id>14063560</id><snippet>from django.db.models.base import ModelBase

class AlphaMeta(ModelBase):
    …
</snippet></ROW><ROW><id>14063560</id><snippet>KeyError</snippet></ROW><ROW><id>14063758</id><snippet>target</snippet></ROW><ROW><id>14063758</id><snippet>target</snippet></ROW><ROW><id>14063758</id><snippet>def ex_range(min, max, cur, valve):
    global target
    # ...
    # rest of your code
</snippet></ROW><ROW><id>14063758</id><snippet>target</snippet></ROW><ROW><id>14063758</id><snippet>def in_range(min, max, cur, valve):  #figures if intake valves are correct
    if min &lt;= cur &lt;= max:
        print "%r is in range." % valve
        return 1

    else:
        print "%r is OUT OF RANGE." %valve
        return 0

target = in_range(...) # fill in args
print target
</snippet></ROW><ROW><id>14063831</id><snippet>(?&lt;![A-Z])(?&lt;=[.!?])</snippet></ROW><ROW><id>14063831</id><snippet>A-Z</snippet></ROW><ROW><id>14063831</id><snippet>.!?</snippet></ROW><ROW><id>14063831</id><snippet>(?&lt;![A-Z])</snippet></ROW><ROW><id>14063831</id><snippet>.!?</snippet></ROW><ROW><id>14063831</id><snippet>(?&lt;![A-Z])</snippet></ROW><ROW><id>14063831</id><snippet>(?&lt;![A-Z].)</snippet></ROW><ROW><id>14063831</id><snippet>I.D. is</snippet></ROW><ROW><id>14063831</id><snippet>\s</snippet></ROW><ROW><id>14063926</id><snippet>In [33]: import heapq    
In [34]: A = [(1,100,2)]    
In [35]: B = [(2,0,0)]

In [40]: list(heapq.merge(A,B))
Out[40]: [(1, 100, 2), (2, 0, 0)]

In [41]: (1, 100, 2) &lt; (2, 0, 0)
Out[41]: True
</snippet></ROW><ROW><id>14063926</id><snippet>a &gt;= x and b &gt;= y and c &gt;= z
</snippet></ROW><ROW><id>14063926</id><snippet>heapq</snippet></ROW><ROW><id>14063926</id><snippet>class MyTuple(tuple):
    def __lt__(self, other):
        return all(a &lt; b for a, b in zip(self, other))
    def __eq__(self, other):
        return (len(self) == len(other)
                and all(a == b for a, b in zip(self, other)))
    def __gt__(self, other):
        return not (self &lt; other or self == other)            
    def __le__(self, other):
        return self &lt; other or self == other
    def __ge__(self, other):
        return not self &lt; other

A = [MyTuple((1,100,2))]
B = [MyTuple((2,0,0))]
print(list(heapq.merge(A,B)))
# [(2, 0, 0), (1, 100, 2)]
</snippet></ROW><ROW><id>14063926</id><snippet>&lt;</snippet></ROW><ROW><id>14063926</id><snippet>MyTuple</snippet></ROW><ROW><id>14063926</id><snippet>heapq.merge</snippet></ROW><ROW><id>14063926</id><snippet>a &lt;= x and b &lt;= y and c &lt;= z
</snippet></ROW><ROW><id>14063926</id><snippet>A</snippet></ROW><ROW><id>14063926</id><snippet>B</snippet></ROW><ROW><id>14063986</id><snippet>global</snippet></ROW><ROW><id>14064418</id><snippet>sq_reviews = db_session.query(CookbookReview.cookbook_id, 
    func.avg(CookbookReview.rating).label('rating'),\
    func.count('*').label('review_count')).\
    group_by(CookbookReview.cookbook_id).subquery()

object_list = db_session.query(
    Cookbook, sq_reviews.c.rating, sq_reviews.c.review_count).\
    outerjoin(sq_reviews, Cookbook.id==sq_reviews.c.cookbook_id).\
    order_by(Cookbook.name).limit(20)
</snippet></ROW><ROW><id>14064418</id><snippet>def process(query):
for obj, rating, review_count in query:
    obj.rating = rating
    obj.review_count = review_count
    yield obj
</snippet></ROW><ROW><id>14064453</id><snippet>tuple</snippet></ROW><ROW><id>14064490</id><snippet>\bnot\b(?!\s+(?:good|bad))
</snippet></ROW><ROW><id>14064490</id><snippet>not</snippet></ROW><ROW><id>14064490</id><snippet>good</snippet></ROW><ROW><id>14064490</id><snippet>bad</snippet></ROW><ROW><id>14064490</id><snippet>not</snippet></ROW><ROW><id>14064490</id><snippet>\b</snippet></ROW><ROW><id>14064490</id><snippet>not</snippet></ROW><ROW><id>14064490</id><snippet>not</snippet></ROW><ROW><id>14064490</id><snippet>nothing</snippet></ROW><ROW><id>14064490</id><snippet>knot</snippet></ROW><ROW><id>14064490</id><snippet>\b</snippet></ROW><ROW><id>14064490</id><snippet>(?!pattern)</snippet></ROW><ROW><id>14064490</id><snippet>pattern</snippet></ROW><ROW><id>14064490</id><snippet>\s</snippet></ROW><ROW><id>14064490</id><snippet>\n</snippet></ROW><ROW><id>14064490</id><snippet>\t</snippet></ROW><ROW><id>14064490</id><snippet>\s</snippet></ROW><ROW><id>14064490</id><snippet/></ROW><ROW><id>14064490</id><snippet>+</snippet></ROW><ROW><id>14064490</id><snippet>\s+</snippet></ROW><ROW><id>14064490</id><snippet>(?:pattern)</snippet></ROW><ROW><id>14064490</id><snippet>good</snippet></ROW><ROW><id>14064490</id><snippet>bad</snippet></ROW><ROW><id>14064506</id><snippet>os.path.exists</snippet></ROW><ROW><id>14064506</id><snippet>import os.path as opath

def readlines(path):
    return open(path).readlines() if opath.exists(path) else []
</snippet></ROW><ROW><id>14064506</id><snippet>import os.path as opath

def readlines(path):
    try:
        return (l for l in open(path)) if opath.exists(path) else ()
    except FileNotFoundError:
        return ()
</snippet></ROW><ROW><id>14064529</id><snippet>-O</snippet></ROW><ROW><id>14064529</id><snippet>wget -O img.png http://example.com/image.php?foo=bar 
</snippet></ROW><ROW><id>14064529</id><snippet>import os
import urllib2
import sys
d = urllib2.urlopen(sys.argv[0])
o = open('image.%s' % d.info().gettype(), 'w')
o.write(d.read())
</snippet></ROW><ROW><id>14064552</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>14064552</id><snippet>.findAll</snippet></ROW><ROW><id>14064552</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>14064552</id><snippet>import BeautifulSoup
import re

soup = BeautifulSoup('&lt;html&gt; your markup &lt;/html&gt;')

elements = soup.findAll('a', {'title':re.compile('Next Page.'}) 
# get all 'a' elements with 'title' attribute as 'Next Page something' into a list

for e in elements:
    if str(e.string) == '&gt;': # check if string inside 'a' tag is '&gt;'
        print e['href']
</snippet></ROW><ROW><id>14064639</id><snippet>C:\program files\OSSBuild\GStreamer</snippet></ROW><ROW><id>14064639</id><snippet>C:\Python27\Lib;C:\other-python-files-etc;C:\program files\OSSBuild\GStreamer</snippet></ROW><ROW><id>14064639</id><snippet>pygst.py</snippet></ROW><ROW><id>14064962</id><snippet>eval(s.replace("{", "[").replace("}", "]"))
</snippet></ROW><ROW><id>14064978</id><snippet>I = 'abc' # 1
II = 'def' # 2
III = 'ghi' # 3
x = 'afh' # Random possibility: It could be an input.
L = []
LL = []

lists = I, II, III

for c in x:
    for i, seq in enumerate(lists):
        if c in seq:
            L.append(i+1)

LL = [lists[i-1] for i in L]

print L
print LL
</snippet></ROW><ROW><id>14064978</id><snippet>itertools</snippet></ROW><ROW><id>14064978</id><snippet>product</snippet></ROW><ROW><id>14065146</id><snippet>train_from_file</snippet></ROW><ROW><id>14065146</id><snippet>mco</snippet></ROW><ROW><id>14065146</id><snippet>MaltParser</snippet></ROW><ROW><id>14065146</id><snippet>mco</snippet></ROW><ROW><id>14065146</id><snippet>working_directory</snippet></ROW><ROW><id>14065146</id><snippet>mco</snippet></ROW><ROW><id>14065146</id><snippet>-Xmx</snippet></ROW><ROW><id>14065146</id><snippet>git clone https://github.com/nltk/nltk.git
</snippet></ROW><ROW><id>14065146</id><snippet>malt.py</snippet></ROW><ROW><id>14065146</id><snippet>malt.jar</snippet></ROW><ROW><id>14065146</id><snippet>cd /usr/lib/
ln -s maltparser-1.7.2.jar malt.jar
</snippet></ROW><ROW><id>14065146</id><snippet>export MALTPARSERHOME="/Users/dhg/Downloads/maltparser-1.7.2"
</snippet></ROW><ROW><id>14065146</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; parser = nltk.parse.malt.MaltParser(working_dir="/home/rohith/malt-1.7.2", 
...                                     mco="engmalt.linear-1.7", 
...                                     additional_java_args=['-Xmx512m'])
&gt;&gt;&gt; txt = "This is a test sentence"
&gt;&gt;&gt; graph = parser.raw_parse(txt)
&gt;&gt;&gt; graph.tree().pprint()
'(This (sentence is a test))'
</snippet></ROW><ROW><id>14065217</id><snippet>import getpass
passEntry = getpass.getpass("Enter password")
</snippet></ROW><ROW><id>14065217</id><snippet>while</snippet></ROW><ROW><id>14065217</id><snippet>while passEntry != 'juice' or 'juice2':
</snippet></ROW><ROW><id>14065217</id><snippet>(passEntry != 'juice') or 'juice2'
</snippet></ROW><ROW><id>14065217</id><snippet>passEntry</snippet></ROW><ROW><id>14065217</id><snippet>in</snippet></ROW><ROW><id>14065217</id><snippet>while passEntry not in ['juice', 'juice2']:
</snippet></ROW><ROW><id>14065505</id><snippet>FLOW</snippet></ROW><ROW><id>14065505</id><snippet>flow_from_clientsecrets</snippet></ROW><ROW><id>14065505</id><snippet>FLOW = OAuth2WebServerFlow(
    client_id='YOUR_CLIENT_ID',
    client_secret='YOUR_CLIENT_SECRET',
    scope='https://www.googleapis.com/auth/calendar',
    user_agent='YOUR_APPLICATION_NAME/YOUR_APPLICATION_VERSION')
</snippet></ROW><ROW><id>14065505</id><snippet>client_id</snippet></ROW><ROW><id>14065505</id><snippet>Client ID</snippet></ROW><ROW><id>14065505</id><snippet>client_secret</snippet></ROW><ROW><id>14065505</id><snippet>scope</snippet></ROW><ROW><id>14065505</id><snippet>user_agent</snippet></ROW><ROW><id>14065505</id><snippet>service</snippet></ROW><ROW><id>14065505</id><snippet>developerKey</snippet></ROW><ROW><id>14065505</id><snippet>Simple API Access</snippet></ROW><ROW><id>14065505</id><snippet>API key</snippet></ROW><ROW><id>14065505</id><snippet>service = build(serviceName='calendar', version='v3', http=http, 
    developerKey='&lt;your_API_key&gt;')
</snippet></ROW><ROW><id>14065505</id><snippet>events = service.events().list(calendarId='&lt;your_email_here&gt;').execute()
print events
</snippet></ROW><ROW><id>14065505</id><snippet>calendar.dat</snippet></ROW><ROW><id>14065505</id><snippet>storage = Storage('calendar.dat')
credentials = storage.get()
if credentials is None or credentials.invalid == True:
  credentials = run(FLOW, storage)
</snippet></ROW><ROW><id>14065505</id><snippet>if</snippet></ROW><ROW><id>14065505</id><snippet>False</snippet></ROW><ROW><id>14065704</id><snippet>C:\&gt;ipython
Python 2.7.2 (default, Jun 24 2011, 12:22:14) [MSC v.1500 64 bit (AMD64)]
Type "copyright", "credits" or "license" for more information.

IPython 0.13.1 -- An enhanced Interactive Python.
?         -&gt; Introduction and overview of IPython's features.
%quickref -&gt; Quick reference.
help      -&gt; Python's own help system.
object?   -&gt; Details about 'object', use 'object??' for extra details.

In [1]:

In [1]: !cmd
Microsoft Windows [Version 6.2.9200]
(c) 2012 Microsoft Corporation. All rights reserved.

C:\&gt;exit

In [2]:
</snippet></ROW><ROW><id>14065885</id><snippet>distutils</snippet></ROW><ROW><id>14065885</id><snippet>python setup.py install</snippet></ROW><ROW><id>14065885</id><snippet>site-packages</snippet></ROW><ROW><id>14065885</id><snippet>--user</snippet></ROW><ROW><id>14065885</id><snippet>setup.py install</snippet></ROW><ROW><id>14065885</id><snippet>~/.local/lib/python2.7/site-packages</snippet></ROW><ROW><id>14065885</id><snippet>sys.path</snippet></ROW><ROW><id>14065885</id><snippet>--home=$HOME</snippet></ROW><ROW><id>14065885</id><snippet>setup.py install</snippet></ROW><ROW><id>14065885</id><snippet>$HOME</snippet></ROW><ROW><id>14065885</id><snippet>sys.path</snippet></ROW><ROW><id>14065885</id><snippet>   import sys
   sys.path.append('/opt/nest/lib/python2.7/site-packages')
</snippet></ROW><ROW><id>14065885</id><snippet>PYTHONPATH=/opt/nest/lib/python2.7/site-packages
export PYTHONPATH
</snippet></ROW><ROW><id>14065885</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>14065885</id><snippet>nest</snippet></ROW><ROW><id>14065885</id><snippet>/opt/nest/lib</snippet></ROW><ROW><id>14065885</id><snippet>/opt/nest/lib64</snippet></ROW><ROW><id>14065885</id><snippet>./zshrc</snippet></ROW><ROW><id>14065885</id><snippet>PYTHONPATH=/opt/nest/lib64/python2.7/site-packages</snippet></ROW><ROW><id>14065887</id><snippet>wget</snippet></ROW><ROW><id>14065887</id><snippet>import os
import urllib
image_url = "https://www.google.com/images/srpr/logo3w.png"
image_filename = os.path.basename(image_url)
urllib.urlretrieve(image_url, image_filename)
</snippet></ROW><ROW><id>14065887</id><snippet>requests</snippet></ROW><ROW><id>14065887</id><snippet>import requests
r = requests.get(image_url)
# here r.url will return the redirected true image url
image_filename = os.path.basename(r.url)
f = open(image_filename, 'wb')
f.write(r.content)
f.close()
</snippet></ROW><ROW><id>14065887</id><snippet>requests</snippet></ROW><ROW><id>14065887</id><snippet>content-disposition</snippet></ROW><ROW><id>14065887</id><snippet>import urllib2
url = "http://www.gravatar.com/avatar/92fb4563ddc5ceeaa8b19b60a7a172f4"
req = urllib2.Request(url)
r = urllib2.urlopen(req)
# you can check the returned header and find where the filename is loacated
print r.headers.dict
s = r.headers.getheader('content-disposition')
# just parse the filename
filename = s[s.index('"')+1:s.rindex('"')]
f = open(filename, 'wb')
f.write(r.read())
f.close()
</snippet></ROW><ROW><id>14065887</id><snippet>filename</snippet></ROW><ROW><id>14065887</id><snippet>import os
# this will remove the dir path in the filename
# so that `../../../etc/passwd` will become `passwd`
filename = os.path.basename(filename)
</snippet></ROW><ROW><id>14065930</id><snippet>import os
import subprocess
from subprocess import check_call

def sync(base_change):

    # Generate a list of integers based on your change_ignore file
    with open('change_ignore.txt', 'rb') as f:
        # Here we make a list of integers based on the file
        change_ignore = [int(line.strip()) for line in f]

    # Store your hits/misses in lists; that way you do not
    # need to continuously open/close files while appending
    change_ignore_base = []
    change_ignore_file = []

    # Now open the file of the IDs
    with open('change_ids.txt', 'rb') as f:
        # Iterate over the file itself
        for line in f:
            # Convert the line to an integer (note that this
            # implicitly removes the newline characters)
            # However we are going to write 'line' to our list,
            # which will keep the newline (more on that later)
            num = int(line)
            print num

            # Now we are comparing ints with ints
            # I'm assuming the print statements are for debugging,
            # so we offset them with some space, making it so that
            # any relevant hits are indented under a number
            if num &lt;= base_change:
                print "  IN line&lt;=base_change"
                change_ignore_base.append(line)
            if num in change_ignore:
                print "  IN change_ignore"
                change_ignore_file.append(line)
            if num &gt; base_change and num not in change_ignore:
                pass

    # Now that you have lists containing the data for your new files,
    # write them (they already have newlines appended so writelines works)
    # You can use 'with' with two files in this way in Python 2.7+,
    # but it goes over 80 characters here so I'm not a huge fan :)
    with open('change_ignore_base', 'wb') as b, open('change_ignore_file', 'wb') as f:
      b.writelines(change_ignore_base)
      f.writelines(change_ignore_file)


def main ():
    base_change=200913
    sync(base_change)

main()
</snippet></ROW><ROW><id>14065930</id><snippet>206061
150362
  IN line&lt;=base_change
  IN change_ignore
147117
  IN line&lt;=base_change
  IN change_ignore
147441
  IN line&lt;=base_change
  IN change_ignore
143446
  IN line&lt;=base_change
  IN change_ignore
200912
  IN line&lt;=base_change
</snippet></ROW><ROW><id>14066380</id><snippet>from __future__ import division
import sys
from operator import itemgetter
from collections import defaultdict

def main():

    line1 = sys.stdin.readline().split(" ")
    numberofselect = int(line1[1])

    qualitydict = {}
    songdict = defaultdict(list)

    for x, line in enumerate(sys.stdin, start=1):
        tokens = line.split()
        val = float(tokens[0]) * x
        qualitydict[tokens[1]] = val
        songdict[val].append(tokens[1])

    items = songdict.items()
    items.sort(key=itemgetter(0), reverse=True)
    a = 0
    for key, value in items:
            for element in value:
                if a &lt; numberofselect:
                    print element
                    a += 1

main()
</snippet></ROW><ROW><id>14066380</id><snippet>defaultdict</snippet></ROW><ROW><id>14066380</id><snippet>songdict</snippet></ROW><ROW><id>14066380</id><snippet>list</snippet></ROW><ROW><id>14066380</id><snippet>key in your_dict.keys()</snippet></ROW><ROW><id>14066380</id><snippet>O(n)</snippet></ROW><ROW><id>14066380</id><snippet>key in your_dict</snippet></ROW><ROW><id>14066380</id><snippet>O(1)</snippet></ROW><ROW><id>14066380</id><snippet>defaultdict</snippet></ROW><ROW><id>14066380</id><snippet>z</snippet></ROW><ROW><id>14066380</id><snippet>1/x</snippet></ROW><ROW><id>14066380</id><snippet>f/z</snippet></ROW><ROW><id>14066380</id><snippet>f * x</snippet></ROW><ROW><id>14066380</id><snippet>x</snippet></ROW><ROW><id>14066380</id><snippet>1/x</snippet></ROW><ROW><id>14066380</id><snippet>op.itemgetter(0)</snippet></ROW><ROW><id>14066380</id><snippet>op.itemgetter(0)</snippet></ROW><ROW><id>14066380</id><snippet>&gt;&gt;&gt; timeit.timeit('L.sort()', 'import random;L = [(random.randint(0, 100), i) for i in range(3000)]', number=10000)
1.3252038955688477
&gt;&gt;&gt; timeit.timeit('L.sort(key=operator.itemgetter(0))', 'import random;import operator;L = [(random.randint(0, 100), i) for i in range(3000)]', number=10000)
2.926893949508667
</snippet></ROW><ROW><id>14066380</id><snippet>itemgetter</snippet></ROW><ROW><id>14066380</id><snippet>50000</snippet></ROW><ROW><id>14066380</id><snippet>&gt;&gt;&gt; timeit.timeit('L.sort()', 'import random;L = [(random.randint(0, 1000), i) for i in range(50000)]', number=1000)
13.771193027496338
&gt;&gt;&gt; timeit.timeit('L.sort(key=operator.itemgetter(0))', 'import random;import operator;L = [(random.randint(0, 1000), i) for i in range(50000)]', number=1000)
21.419496059417725
</snippet></ROW><ROW><id>14066380</id><snippet>line.split()</snippet></ROW><ROW><id>14066380</id><snippet>&gt;&gt;&gt; 'A string with   some    space,\ttabs and \n\n newlines'.split()
['A', 'string', 'with', 'some', 'space,', 'tabs', 'and', 'newlines']
</snippet></ROW><ROW><id>14066380</id><snippet>&gt;&gt;&gt; 'A string with   some    space,\ttabs and \n\n newlines'.split(' ')
['A', 'string', 'with', '', '', 'some', '', '', '', 'space,\ttabs', 'and', '\n\n', 'newlines']
</snippet></ROW><ROW><id>14066657</id><snippet>get_or_create</snippet></ROW><ROW><id>14066692</id><snippet>In [20]: df = X.reset_index()

In [21]: mP1 = P1[df.P1].values

In [22]: mP2 = P2[df.P2].values

In [23]: mP1
Out[23]: array([ 0.4,  0.4,  0.6,  0.6])

In [24]: mP2
Out[24]: array([ 0.7,  0.3,  0.7,  0.3])

In [25]: mp = mP1 * mP2

In [26]: mp
Out[26]: array([ 0.28,  0.12,  0.42,  0.18])

In [27]: X.mul(mp, axis=0)
Out[27]: 
       A      B
P1 P2              
1  1   0.056  0.224
   2   0.060  0.060
2  1   0.378  0.042
   2   0.162  0.018

In [28]: X.mul(mp, axis=0).sum()
Out[28]: 
A    0.656
B    0.344

In [29]: sum(
    sum(
    X.xs(i, level="P1")*P1[i]
    for i in P1.index
    ).xs(j)*P2[j]
    for j in P2.index
    )
Out[29]: 
A    0.656
B    0.344
</snippet></ROW><ROW><id>14066692</id><snippet>In [38]: P1[X.index.get_level_values("P1")].values
Out[38]: array([ 0.4,  0.4,  0.6,  0.6])
</snippet></ROW><ROW><id>14066752</id><snippet>SendData</snippet></ROW><ROW><id>14066752</id><snippet>def SendData(self):

    TargetSystems = self.targetSystem.text().split(',')
    Msg2Send = self.lineedit.text()

    for TargetSystem in TargetSystems:

        self.Clientsocket.connectToHost(TargetSystem, PORT)
        self.Clientsocket.waitForConnected(-1)  # This is required data to be writing
        self.request = QtCore.QByteArray()
        stream = QtCore.QDataStream(self.request, QtCore.QIODevice.WriteOnly)
        stream.setVersion(QtCore.QDataStream.Qt_4_2)
        stream.writeUInt32(0)
        stream.writeQString(Msg2Send)
        stream.device().seek(0)
        stream.writeUInt32(self.request.size() - SIZEOF_UINT32)
        self.Clientsocket.write(self.request)
        self.nextBlockSize = 0
        self.request = None
        self.Clientsocket.disconnectFromHost() # .close() is not closing the socket connection, so i changed it this
</snippet></ROW><ROW><id>14066815</id><snippet>__name__</snippet></ROW><ROW><id>14066815</id><snippet>__main__</snippet></ROW><ROW><id>14066815</id><snippet>__name__</snippet></ROW><ROW><id>14066843</id><snippet>argparse</snippet></ROW><ROW><id>14066843</id><snippet>optparse</snippet></ROW><ROW><id>14066843</id><snippet>optparse</snippet></ROW><ROW><id>14067066</id><snippet>r"..."</snippet></ROW><ROW><id>14067066</id><snippet>\n</snippet></ROW><ROW><id>14067066</id><snippet>&gt;&gt;&gt; x = r"[a-z]+\n"
&gt;&gt;&gt; y = raw_input("")
[a-z]+\n
&gt;&gt;&gt; x == y
True
</snippet></ROW><ROW><id>14067074</id><snippet>d</snippet></ROW><ROW><id>14067074</id><snippet>def wave_sort(array, num_peaks=None, start_ascending=True):
    """Sorts the elements of `array` in a sine or cosine manner.

    :param array: The array to be sorted.
    :param num_peaks: The number of (low and high) peaks in the resultant array
    :param start_ascending: If True the result is sin-like, otherwise cos-like.
    """
    if num_peaks is None:
        num_peaks = len(array) // 6
    sorted_ar = sorted(array)
    subarrays = [sorted_ar[i::num_peaks] for i in range(num_peaks)]
    for i, subarray in enumerate(subarrays, start=int(not start_ascending)):
        if i % 2:
            # subarrays are in ascending order already!
            subarray.reverse()
    return sum(subarrays, [])
</snippet></ROW><ROW><id>14067074</id><snippet>d/2</snippet></ROW><ROW><id>14067090</id><snippet>DATABASE_OPTIONS = {"init_command": "SET storage_engine=INNODB"}
</snippet></ROW><ROW><id>14067453</id><snippet>(r != rn and "~") or ""
</snippet></ROW><ROW><id>14067453</id><snippet>"~" * (r != rn)
</snippet></ROW><ROW><id>14067453</id><snippet>"~"</snippet></ROW><ROW><id>14067453</id><snippet>True</snippet></ROW><ROW><id>14067453</id><snippet>r != rn</snippet></ROW><ROW><id>14067453</id><snippet>and</snippet></ROW><ROW><id>14067453</id><snippet>or</snippet></ROW><ROW><id>14067453</id><snippet>1</snippet></ROW><ROW><id>14067453</id><snippet>True</snippet></ROW><ROW><id>14067453</id><snippet>0</snippet></ROW><ROW><id>14067453</id><snippet>False</snippet></ROW><ROW><id>14067453</id><snippet>""</snippet></ROW><ROW><id>14067589</id><snippet>add_argument</snippet></ROW><ROW><id>14067589</id><snippet>parser.add_argument(…, choices=set("01"))
</snippet></ROW><ROW><id>14067589</id><snippet>parser.add_argument(…, type=int)
</snippet></ROW><ROW><id>14067589</id><snippet>parser.add_argument(…, type=int, choices=set((0,1)))
</snippet></ROW><ROW><id>14067589</id><snippet>&gt;&gt;&gt; import argparse
&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; _ = parser.add_argument("-p", type=int, choices=set((0, 1)))
&gt;&gt;&gt; parser.parse_args(["-p", "0"])
Namespace(p=0)
</snippet></ROW><ROW><id>14067893</id><snippet>hours = (datetime.datetime - g.invite_sent)/60/60</snippet></ROW><ROW><id>14067893</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>14067893</id><snippet>datetime.datetime</snippet></ROW><ROW><id>14067893</id><snippet>.now()</snippet></ROW><ROW><id>14067893</id><snippet>datetime</snippet></ROW><ROW><id>14067893</id><snippet>timedelta</snippet></ROW><ROW><id>14067893</id><snippet>.total_seconds()</snippet></ROW><ROW><id>14067893</id><snippet>hours = (datetime.datetime.now() - g.invite_sent.replace(tzinfo=None)).total_seconds() / 60 / 60
</snippet></ROW><ROW><id>14068262</id><snippet>qs = Message.objects.annotate(cc=Count('users')).filter(cc=1)
</snippet></ROW><ROW><id>14068262</id><snippet>qs = Message.objects.annotate(cc=Count('users')).filter(cc=1).filter(users__id=user.id)
# if user user.id=1, this will return only m2
</snippet></ROW><ROW><id>14068486</id><snippet>\\share\Python26_x32\python.exe \\share\\Python26_x32\Scripts\pywin32_postinstall.py -install</snippet></ROW><ROW><id>14068486</id><snippet>x64 pywin32 dlls</snippet></ROW><ROW><id>14068486</id><snippet>\\share\modules\x64\pywin32_system32</snippet></ROW><ROW><id>14068486</id><snippet>pythoncom26.dll
pythoncomloader26.dll
pywintypes26.dll
</snippet></ROW><ROW><id>14068486</id><snippet>%SystemRoot%\system32</snippet></ROW><ROW><id>14068716</id><snippet>&lt;div id="amd" style="display: block"&gt;
</snippet></ROW><ROW><id>14068716</id><snippet>id</snippet></ROW><ROW><id>14068716</id><snippet>&lt;dt&gt;</snippet></ROW><ROW><id>14068716</id><snippet>&lt;dd&gt;</snippet></ROW><ROW><id>14068716</id><snippet>&lt;dt&gt;Location:&lt;/dt&gt; &lt;dd&gt;Switzerland&lt;/dd&gt;
</snippet></ROW><ROW><id>14069155</id><snippet>Normal Code
    Indent block
    Indent block
        Indent block 2
        Indent block 2
</snippet></ROW><ROW><id>14069155</id><snippet>def main():
    print "hello"

if __name__=='__main__':
    main()
</snippet></ROW><ROW><id>14069155</id><snippet>print "hello"
if True:
[TAB]print "a"
[TAB]i = 0
[TAB]if i == 0:
[TAB][SPACE][SPACE]print "b"
[TAB][SPACE][SPACE]j = i + 1
[TAB][SPACE][SPACE]if j == 1:
[TAB][SPACE][SPACE][TAB][TAB]print "c
</snippet></ROW><ROW><id>14069284</id><snippet>Null Constraint</snippet></ROW><ROW><id>14069513</id><snippet>mysql.server</snippet></ROW><ROW><id>14069513</id><snippet>username$database_name</snippet></ROW><ROW><id>14069513</id><snippet>mysql -u my_username -h mysql.server -p
</snippet></ROW><ROW><id>14069513</id><snippet>username$database_name</snippet></ROW><ROW><id>14069513</id><snippet>username$</snippet></ROW><ROW><id>14069772</id><snippet>utils.traitlets</snippet></ROW><ROW><id>14069859</id><snippet>import jinja2.ext</snippet></ROW><ROW><id>14069859</id><snippet>ext.pyc</snippet></ROW><ROW><id>14070317</id><snippet>lxml</snippet></ROW><ROW><id>14070317</id><snippet>e = pq(url=results_url)
for link in e('li.moredetails a'):
    print link.attrib['href']
</snippet></ROW><ROW><id>14070317</id><snippet>pq()</snippet></ROW><ROW><id>14070317</id><snippet>$()</snippet></ROW><ROW><id>14070317</id><snippet>jQuery()</snippet></ROW><ROW><id>14070317</id><snippet>    print pq(link).attr('href')
</snippet></ROW><ROW><id>14070317</id><snippet>    print pq(link).attr['href']
</snippet></ROW><ROW><id>14070317</id><snippet>.items()</snippet></ROW><ROW><id>14070317</id><snippet>e = pq(url=results_url)
for link in e('li.moredetails a').items():
    print link.attr['href']
</snippet></ROW><ROW><id>14070545</id><snippet>alliances_id</snippet></ROW><ROW><id>14070545</id><snippet>from sqlalchemy import ForeignKey
from sqlalchemy.orm import relationship

class PlayerModel(Base):
    __tablename__ = 'players'
    alliances_id = Column(Integer, nullable=True, ForeignKey('AllianceModel.id'))
    alliance = relationship('AllianceModel')
    username = Column(String(30), nullable=False)
    nation = Column(String(20), nullable=False)
    score = Column(String(20), default=0)
</snippet></ROW><ROW><id>14070545</id><snippet>player.alliance</snippet></ROW><ROW><id>14070545</id><snippet>for player in session.query(PlayerModel).filter(PlayerModel.nation.like(nation)):
    result.append({'username':player.username, 'alliance': player.aliance.name if player.aliance is not None else ''})
</snippet></ROW><ROW><id>14070545</id><snippet>ForeignKey()</snippet></ROW><ROW><id>14070545</id><snippet>alliances_id</snippet></ROW><ROW><id>14070545</id><snippet>relationship()</snippet></ROW><ROW><id>14070545</id><snippet>    alliances_id = Column(Integer, nullable=True)
    alliance = relationship('AllianceModel', foreign_keys='AllianceModel.id')
</snippet></ROW><ROW><id>14070708</id><snippet>[t[:-1] for t in listoftuples]
</snippet></ROW><ROW><id>14070708</id><snippet>&gt;&gt;&gt; listoftuples = [(12,34,1),(123,34,1),(21,23,1)]
&gt;&gt;&gt; [t[:-1] for t in listoftuples]
[(12, 34), (123, 34), (21, 23)]
</snippet></ROW><ROW><id>14071026</id><snippet>if newip == originip:
    print "there was an error, resetting..."
</snippet></ROW><ROW><id>14071071</id><snippet>def setData(data):
    self.data = data
</snippet></ROW><ROW><id>14071071</id><snippet>class PlotCanvasExample(plot.PlotCanvas):
    def __init__(self,parent,id,size, data):  
</snippet></ROW><ROW><id>14071119</id><snippet> for item in mylist:
    item.update( {"elem":"value"})
</snippet></ROW><ROW><id>14071245</id><snippet>CFLAGS= -Wall -Winline -O2 -g $(BIGFILES)
</snippet></ROW><ROW><id>14071245</id><snippet>CFLAGS=-fPIC -Wall -Winline -O2 -g $(BIGFILES)
</snippet></ROW><ROW><id>14071393</id><snippet>from django import forms
from tinymce.widgets import TinyMCE

class FinmallForm(forms.ModelForm):
    ...
    content = forms.CharField(widget=TinyMCE(attrs={'cols': 80, 'rows': 30}))
    ...

    class Meta:
        model = Finmall
</snippet></ROW><ROW><id>14071410</id><snippet>django.contrib.staticfiles</snippet></ROW><ROW><id>14071410</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>14071410</id><snippet>django.core.context_processors.static</snippet></ROW><ROW><id>14071410</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>14071462</id><snippet>os.sep.join('x' if idx == 1 else element
            for idx, element in enumerate(x.split(os.sep)))
</snippet></ROW><ROW><id>14071462</id><snippet>'/x/b/c'
</snippet></ROW><ROW><id>14071462</id><snippet>enumerate</snippet></ROW><ROW><id>14071462</id><snippet>x.split(os.sep)</snippet></ROW><ROW><id>14071462</id><snippet>'x' if idx == 1 else element</snippet></ROW><ROW><id>14071515</id><snippet>SubElement(schedule, 'Sunday', {'open': '08:00', 'close': '17:00'})
</snippet></ROW><ROW><id>14071515</id><snippet>times = {'open': '08:00', 'close': '17:00'}
SubElement(schedule, 'Sunday', times)
</snippet></ROW><ROW><id>14071560</id><snippet>import re


NUMBERS_SEQ = (
    ('dieci', '10'),
    ('undici', '11'),
    ('dodici', '12'),
    ('tredici', '13'),
    ('quattordici', '14'),
    ('quindici', '15'),
    ('sedici', '16'),
    ('diciasette', '17'),
    ('diciotto', '18'),
    ('diciannove', '19'),
    ('venti', '20'),
    ('trenta', '30'),
    ('quaranta', '40'),
    ('cinquanta', '50'),
    ('sessanta', '60'),
    ('settanta', '70'),
    ('ottanta', '80'),
    ('novanta', '90'),
    ('cento', '100'),
    ('mille', '1000'), ('mila', '1000'),
    ('milione', '1000000'), ('milioni', '1000000'),
    ('miliardo', '1000000000'), ('miliardi', '1000000000'),
    ('uno', '1'), ('un', '1'),
    ('due', '2'),
    ('tre', '3'),
    ('quattro', '4'),
    ('cinque', '5'),
    ('sei', '6'),
    ('sette', '7'),
    ('otto', '8'),
    ('nove', '9'),
    )

NUMBERS = dict(NUMBERS_SEQ)

TOKEN_REGEX = re.compile('|'.join('(%s)' % num for num, val in NUMBERS_SEQ))


def normalize_text(num_repr):
    '''Return a normalized version of *num_repr* that can be passed to let2num.'''

    return num_repr.lower().translate(None, ' \t')


def let2num(num_repr):
    '''Yield the numeric representation of *num_repr*.'''

    result = ''

    for token in (tok for tok in TOKEN_REGEX.split(num_repr) if tok):
        try:
            value = NUMBERS[token]
        except KeyError:
            if token not in ('di', 'e'):
                raise ValueError('Invalid number representation: %r' % num_repr)
            continue

        if token == 'miliardi':
            result += '0'*9
        elif token in ('mila','milioni'):
            zeros = '0' * value.count('0')
            piece = result[-3:].lstrip('0')
            result = (result[:-len(piece)-len(zeros)] +
                      piece +
                      zeros)
        elif not result:
            result = value
        else:
            length = len(value)
            non_zero_values = len(value.strip('0'))
            if token in ('cento', 'milione', 'miliardo'):
                if result[-1] != '0':
                    result = (result[:-length] +
                              result[-1] +
                              '0' * value.count('0'))
                    continue
            result = (result[:-length] +
                      value.rstrip('0') +
                      result[len(result) -length + non_zero_values:])
    return add_thousand_separator(result)


def add_thousand_separator(s, sep='.'):
    '''Return the numeric string s with the thousand separator.'''

    rev_s = s[::-1]
    tokens = [rev_s[i:i+3][::-1] for i in range(0, len(s), 3)][::-1]
    return sep.join(tokens)
</snippet></ROW><ROW><id>14071560</id><snippet>&gt;&gt;&gt; let2num('unmilione')
'1.000.000'
&gt;&gt;&gt; let2num('unmilionemilleduecento')
'1.001.200'
&gt;&gt;&gt; let2num('unmilionemilleduecentotre')
'1.001.203'
&gt;&gt;&gt; let2num('ventiquattro')
'24'
&gt;&gt;&gt; let2num(normalize_text('Dieci milioni e CentoQuarantaTreMila miliardi di miliardi di miliardi Otto cento e quattro'))
'10.143.000.000.000.000.000.000.000.000.000.804'
&gt;&gt;&gt; let2num('ventiquattromiliardicentotrentatremilionitredicimiladuecentouno')
'24.133.013.201'
</snippet></ROW><ROW><id>14071560</id><snippet>'...centotrentatremilione...'</snippet></ROW><ROW><id>14071560</id><snippet>milione</snippet></ROW><ROW><id>14071560</id><snippet>milioni</snippet></ROW><ROW><id>14071560</id><snippet>&gt;&gt;&gt; let2num('ventiquattromiliardicentotrentatremilionetredicimiladuecentouno')
'24.003.013.201'
</snippet></ROW><ROW><id>14071560</id><snippet>milione</snippet></ROW><ROW><id>14071560</id><snippet>milioni</snippet></ROW><ROW><id>14071560</id><snippet>print 'token:', token, 'current result:', result
</snippet></ROW><ROW><id>14071560</id><snippet>for</snippet></ROW><ROW><id>14071560</id><snippet>pynum2word</snippet></ROW><ROW><id>14071598</id><snippet>any(countryCode in line for countryCode in currencies.keys())
</snippet></ROW><ROW><id>14071598</id><snippet>any([countryCode in line for countryCode in currencies.keys()])
</snippet></ROW><ROW><id>14071598</id><snippet>help(any)
</snippet></ROW><ROW><id>14071956</id><snippet>zoom = view.evaluateJavaScript('map.getZoom();')</snippet></ROW><ROW><id>14071956</id><snippet>zoom = view.evaluateJavaScript("PyMaps[0].gmap.getZoom();")</snippet></ROW><ROW><id>14071956</id><snippet>MyPyMap</snippet></ROW><ROW><id>14071956</id><snippet>PyMap</snippet></ROW><ROW><id>14071956</id><snippet>evaluteJavaScript</snippet></ROW><ROW><id>14071956</id><snippet>doc = view.page().mainFrame().documentElement()
zoom_level = doc.evaluateJavaScript("PyMaps[0].gmap.getZoom();")
</snippet></ROW><ROW><id>14072068</id><snippet>key</snippet></ROW><ROW><id>14072068</id><snippet>lambda</snippet></ROW><ROW><id>14072068</id><snippet>operator.attrgetter</snippet></ROW><ROW><id>14072068</id><snippet>entries.sort(key=attrgetter('id'))
</snippet></ROW><ROW><id>14072814</id><snippet>@spam
def ham():
    pass
</snippet></ROW><ROW><id>14072814</id><snippet>def ham():
    pass
ham = spam(ham)
</snippet></ROW><ROW><id>14072884</id><snippet>:</snippet></ROW><ROW><id>14073104</id><snippet>type(__name__, __bases__, __dict__)</snippet></ROW><ROW><id>14073104</id><snippet>&gt;&gt;&gt; type('myclass', (), {})
&lt;class '__main__.myclass'&gt;
</snippet></ROW><ROW><id>14073104</id><snippet>__metaclass__</snippet></ROW><ROW><id>14073104</id><snippet>overriding the default class factory for that specific class or module</snippet></ROW><ROW><id>14073104</id><snippet>def setattr_logging_class(name, bases, dict_):
    """I am a metaclass"""
    def __setattr__(self, k, v):
        print "{} set attribute {} to {}".format(self, k, v)
        super(self.__class__, self).__setattr__(k, v)
    dict_['__setattr__'] = __setattr__
    cls = type(name, bases, dict_)
    return cls

class MyClass(object):
    __metaclass__ = setattr_logging_class
    def __init__(self):
        self.a = 1

obj = MyClass()
obj.b = 2

print obj.__dict__
</snippet></ROW><ROW><id>14073104</id><snippet>bases</snippet></ROW><ROW><id>14073104</id><snippet>Versioned.__setattr__</snippet></ROW><ROW><id>14073104</id><snippet>Test</snippet></ROW><ROW><id>14073104</id><snippet>Versioned</snippet></ROW><ROW><id>14073104</id><snippet>Versioned</snippet></ROW><ROW><id>14073104</id><snippet>type</snippet></ROW><ROW><id>14073104</id><snippet>name</snippet></ROW><ROW><id>14073104</id><snippet>bases</snippet></ROW><ROW><id>14073104</id><snippet>dict_</snippet></ROW><ROW><id>14073104</id><snippet>class Test(object):</snippet></ROW><ROW><id>14073104</id><snippet>__new__</snippet></ROW><ROW><id>14073104</id><snippet>__new__</snippet></ROW><ROW><id>14073104</id><snippet>__call__</snippet></ROW><ROW><id>14073104</id><snippet>class MyClass(object):
    def __new__(cls_self, *args, **kwargs):
        print "I am {} called with {} and {}".format(cls_self, args, kwargs)
        return None

myobj = MyClass(1,2,3,a=4,b=5,c=6)
print myobj # == None
</snippet></ROW><ROW><id>14073104</id><snippet>type</snippet></ROW><ROW><id>14073104</id><snippet>__call__</snippet></ROW><ROW><id>14073104</id><snippet>class MetaClass(type):
    def __new__(cls, name, bases, dict_):
        print "I am {} called with {}, {}, {}".format(cls, name, bases, dict_)
        return type.__new__(cls, name, bases, dict_)

class MetaObject(object):
    def __call__(self, name, bases, dict_):
        print "I am {} called with {}, {}, {}".format(self, name, bases, dict_)
        return type(name, bases, dict_)


class MyClass(object):
    __metaclass__ = MetaClass


class MyClass2(object):
    __metaclass__ = MetaObject()
</snippet></ROW><ROW><id>14073232</id><snippet>example = 'Мамлекеттик айыптоочу Биринчи май райондук сотуна берген бул сунушун диний кастыкты ырбатпоо аракети менен негиздеди. Мусулмандарга акаарат келтирип жатат деген кайрылуу каттын негизинде УКМК Тезекбаевге каршы кылмыш ишин козгоп, сотко өткөргөн. Бул ишти бүгүн Биринчи май райондук соту карап бүттү жана өкүм эртең чыгарыларын маалымдады.'

def reattach(sentences):
    punctuation = ('.', '!', '?')
    previous = ''
    for sentence in sentences:
        if sentence not in punctuation:
            previous = sentence
        else:
            yield previous + sentence
            previous = ''
    if previous:
        yield previous

punctuation = re.compile('(?&lt;![\u0410-\u042F])([.!?])(?=(\s)?(\s)?[\u0410-\u042F]|[\u04E8]|["]|[\u201C]|![0-9])')
for sentence in reattach(punctuation.split(example)):
    print(sentence)
</snippet></ROW><ROW><id>14073232</id><snippet>Мамлекеттик айыптоочу Биринчи май райондук сотуна берген бул сунушун диний кастыкты ырбатпоо аракети менен негиздеди.
 Мусулмандарга акаарат келтирип жатат деген кайрылуу каттын негизинде УКМК Тезекбаевге каршы кылмыш ишин козгоп, сотко өткөргөн.
 Бул ишти бүгүн Биринчи май райондук соту карап бүттү жана өкүм эртең чыгарыларын маалымдады.
</snippet></ROW><ROW><id>14073314</id><snippet>session.logged_in_user</snippet></ROW><ROW><id>14073314</id><snippet>form = FORM(Field('username'), requires=IS_IN_DB(db, db.users.username))
</snippet></ROW><ROW><id>14073314</id><snippet>session.logged_in_user = request.vars.username</snippet></ROW><ROW><id>14073314</id><snippet># Could also check whether session.logged_in_user exists in DB, but probably not needed
# If so though, should be renamed zAuth or something to come after db.py file
if not session or not session.logged_in_user:
  redirect(URL('default','login', vars={'next':request.vars.url}))
</snippet></ROW><ROW><id>14073314</id><snippet>#in file: controllers/default.py
...
def login():
   form = FORM(Field('username', requires=IS_IN_DB(db, db.users.username))

   if form.process().accepted:
     session.logged_in_user = form.vars.username
     redirect(request.vars.next)
   elif form.errors:
     session.logged_in_user = None # not necessary, but oh well
     response.flash = "Please enter a valid username"

   return dict(form=form)
</snippet></ROW><ROW><id>14073314</id><snippet>{{ extend 'layout.html' }}
{{ =form }}
</snippet></ROW><ROW><id>14073314</id><snippet>auth = AUTH()</snippet></ROW><ROW><id>14073332</id><snippet>class Address(ndb.Model):
  type = ndb.StringProperty() # E.g., 'home', 'work'
  street = ndb.StringProperty()
  city = ndb.StringProperty()

class Contact(ndb.Model):
  name = ndb.StringProperty()
  addresses = ndb.StructuredProperty(Address, repeated=True)

guido = Contact(name='Guido',
                addresses=[Address(type='home',
                                   city='Amsterdam'),
                           Address(type='work',
                                   street='Spear St',
                                   city='SF')])

guido.put()
</snippet></ROW><ROW><id>14073347</id><snippet>os.system</snippet></ROW><ROW><id>14073347</id><snippet>suprocess.Popen</snippet></ROW><ROW><id>14073347</id><snippet>import subprocess

do = subprocess.Popen(['aplay', './notas_musicales/Do.wav'])
re = subprocess.Popen(['aplay', './notas_musicales/Re.wav'])
</snippet></ROW><ROW><id>14073352</id><snippet>database = motor.MotorClient("mongodb://&lt;dbuser&gt;:&lt;dbpassword&gt;@ds047057.mongolab.com:47057/myDatabase").open_sync().myDatabase
</snippet></ROW><ROW><id>14073731</id><snippet>def count(element,seq):
    """Counts how often an element occurs
    ...in a sequence"""
    count = 0
    for i in seq:
        if  element == i:
            count += 1
    return count
</snippet></ROW><ROW><id>14073731</id><snippet>seq</snippet></ROW><ROW><id>14073731</id><snippet>element</snippet></ROW><ROW><id>14073731</id><snippet>1</snippet></ROW><ROW><id>14073731</id><snippet>count</snippet></ROW><ROW><id>14073731</id><snippet>0</snippet></ROW><ROW><id>14073731</id><snippet>count</snippet></ROW><ROW><id>14073731</id><snippet>seq</snippet></ROW><ROW><id>14074220</id><snippet>def main():
    # Asks which command you want to run.
    word = input("Which command? ").strip().lower()

    # Runs the command/s.

    if word == "info":
        print("Info command.")

    elif word == "replace":
        print("Replace command.")

    elif word == "ping":
        print("Ping command")

    elif word == "quit":
        return False

    else:
        print("Command not found")
    return True

while main():
    pass
</snippet></ROW><ROW><id>14074220</id><snippet>while True</snippet></ROW><ROW><id>14074220</id><snippet>if something: break</snippet></ROW><ROW><id>14074466</id><snippet>scrapy crawl -h</snippet></ROW><ROW><id>14074466</id><snippet>scrapy crawl spidername -o items.json -t json
</snippet></ROW><ROW><id>14074466</id><snippet>-o</snippet></ROW><ROW><id>14074466</id><snippet>-t</snippet></ROW><ROW><id>14074466</id><snippet>--set</snippet></ROW><ROW><id>14074466</id><snippet>FEED_URI</snippet></ROW><ROW><id>14074466</id><snippet>FEED_FORMAT</snippet></ROW><ROW><id>14074921</id><snippet>def main ():
    gerrit = 205739
    gerrit_str = str(gerrit)
    with open('gerrit_refs.txt', 'rb') as f:
        # Here we make a list of refs based on the file
        gerrit_refs = [line.strip() for line in f if gerrit_str in line]

    if gerrit_refs:
        # At least one match was found.
        print gerrit_refs
</snippet></ROW><ROW><id>14074921</id><snippet>gerrit</snippet></ROW><ROW><id>14074921</id><snippet>in</snippet></ROW><ROW><id>14074921</id><snippet>if gerrit_refs:
    print "First match:", gerrit_refs[0]
</snippet></ROW><ROW><id>14074980</id><snippet>contextmanager</snippet></ROW><ROW><id>14074980</id><snippet>contextmanager</snippet></ROW><ROW><id>14074980</id><snippet>contextmanager</snippet></ROW><ROW><id>14074980</id><snippet>contextmanager</snippet></ROW><ROW><id>14074980</id><snippet>AttributeError</snippet></ROW><ROW><id>14074980</id><snippet>_error_handler</snippet></ROW><ROW><id>14074980</id><snippet>__enter__</snippet></ROW><ROW><id>14074980</id><snippet>__exit__</snippet></ROW><ROW><id>14074980</id><snippet>contextmanager</snippet></ROW><ROW><id>14074985</id><snippet>functools.wraps</snippet></ROW><ROW><id>14074985</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>14074985</id><snippet>foo</snippet></ROW><ROW><id>14074985</id><snippet>bar</snippet></ROW><ROW><id>14074985</id><snippet>functools.wraps</snippet></ROW><ROW><id>14074985</id><snippet>__module__</snippet></ROW><ROW><id>14074985</id><snippet>__name__</snippet></ROW><ROW><id>14074985</id><snippet>__doc__</snippet></ROW><ROW><id>14074985</id><snippet>__dict__</snippet></ROW><ROW><id>14074985</id><snippet>__dict__</snippet></ROW><ROW><id>14074985</id><snippet>WRAPPER_ASSIGNMENTS = ('__module__', '__name__', '__doc__')
WRAPPER_UPDATES = ('__dict__',)

def update_wrapper(wrapper,
                   wrapped,
                   assigned = WRAPPER_ASSIGNMENTS,
                   updated = WRAPPER_UPDATES):
    for attr in assigned:
        setattr(wrapper, attr, getattr(wrapped, attr))
    for attr in updated:
        getattr(wrapper, attr).update(getattr(wrapped, attr, {}))
    # Return the wrapper so this can be used as a decorator via partial()
    return wrapper

def wraps(wrapped,
          assigned = WRAPPER_ASSIGNMENTS,
          updated = WRAPPER_UPDATES):
    return partial(update_wrapper, wrapped=wrapped,
                   assigned=assigned, updated=updated)
</snippet></ROW><ROW><id>14074985</id><snippet>functools.wraps</snippet></ROW><ROW><id>14075050</id><snippet>import numpy as np
import matplotlib.pyplot as plt

x = np.arange(-2*np.pi, 2*np.pi, 0.1)
y = np.arange(-2*np.pi, 2*np.pi, 0.1)
X, Y = np.meshgrid(x, y)

Z = np.sin(X) - np.cos(Y)
Z = np.ma.masked_less(Z, 0) # you use mask_equal(yourData, yourMagicValue)

fig, ax = plt.subplots()
ax.contourf(Z, zorder=5, cmap=plt.cm.coolwarm)
ax.xaxis.grid(True, zorder=0)
ax.yaxis.grid(True, zorder=0)
</snippet></ROW><ROW><id>14075430</id><snippet>string</snippet></ROW><ROW><id>14075430</id><snippet>str()</snippet></ROW><ROW><id>14075430</id><snippet>httpurl = str(httpurl)
</snippet></ROW><ROW><id>14075430</id><snippet>httpurl</snippet></ROW><ROW><id>14075430</id><snippet>str()</snippet></ROW><ROW><id>14075430</id><snippet>mp3 = int(mp3)</snippet></ROW><ROW><id>14075430</id><snippet>ext = string(ext)</snippet></ROW><ROW><id>14075430</id><snippet>mp3</snippet></ROW><ROW><id>14075430</id><snippet>final = httpurl+str(mp3)+ext
</snippet></ROW><ROW><id>14075430</id><snippet>final = '{0}{1}{2}'.format(httpurl, mp3, ext)
</snippet></ROW><ROW><id>14075440</id><snippet>class urlencodeSerializer(Serializer):
    formats = ['json', 'jsonp', 'xml', 'yaml', 'html', 'plist', 'urlencode']
    content_types = {
        'json': 'application/json',
        'jsonp': 'text/javascript',
        'xml': 'application/xml',
        'yaml': 'text/yaml',
        'html': 'text/html',
        'plist': 'application/x-plist',
        'urlencode': 'application/x-www-form-urlencoded',
        }
    def from_urlencode(self, data,options=None):
        """ handles basic formencoded url posts """
        qs = dict((k, v if len(v)&gt;1 else v[0] )
            for k, v in urlparse.parse_qs(data).iteritems())
        return qs

    def to_urlencode(self,content): 
        pass

MyModelResource(ModelResoucre):
    class Meta:
        ...
        serializer = urlencodeSerializer() # IMPORTANT
</snippet></ROW><ROW><id>14075561</id><snippet>__init__.py</snippet></ROW><ROW><id>14075561</id><snippet>print</snippet></ROW><ROW><id>14075561</id><snippet>return markup.element</snippet></ROW><ROW><id>14075569</id><snippet>itertools.groupby</snippet></ROW><ROW><id>14075569</id><snippet>False</snippet></ROW><ROW><id>14075569</id><snippet>groupby</snippet></ROW><ROW><id>14075569</id><snippet>(key, values)</snippet></ROW><ROW><id>14075569</id><snippet>values</snippet></ROW><ROW><id>14075569</id><snippet>_</snippet></ROW><ROW><id>14075569</id><snippet>values</snippet></ROW><ROW><id>14075569</id><snippet>[1, 1, 2]</snippet></ROW><ROW><id>14075569</id><snippet>[1, 2, 1, 1]</snippet></ROW><ROW><id>14075569</id><snippet>In [1]: from itertools import groupby

In [2]: def my_func(l):
   ...:     val = [len(list(g)) for _, g in groupby(l)][-1]
   ...:     if val &lt; 3:
   ...:         return False
   ...:     return min(val, 5)
   ...: 

In [3]: 

In [4]: L = [1,1,2]

In [5]: my_func(L)
Out[5]: False

In [6]: L = [1,2,1,1]

In [7]: my_func(L)
Out[7]: False

In [8]: L = [1,2,1,1,1]

In [9]: my_func(L)
Out[9]: 3

In [10]: L = [1,1,2,2,2,2]

In [11]: my_func(L)
Out[11]: 4

In [12]: L = [1,2,1,1,1,1,1,1]

In [13]: my_func(L)
Out[13]: 5
</snippet></ROW><ROW><id>14075572</id><snippet>W</snippet></ROW><ROW><id>14075572</id><snippet>import mcint
import random
import math

def w(r, theta, phi, alpha, beta, gamma):
    return(-math.log(theta * beta))

def integrand(x):
    r     = x[0]
    theta = x[1]
    alpha = x[2]
    beta  = x[3]
    gamma = x[4]
    phi   = x[5]

    k = 1.
    T = 1.
    ww = w(r, theta, phi, alpha, beta, gamma)
    return (math.exp(-ww/(k*T)) - 1.)*r*r*math.sin(beta)*math.sin(theta)

def sampler():
    while True:
        r     = random.uniform(0.,1.)
        theta = random.uniform(0.,2.*math.pi)
        alpha = random.uniform(0.,2.*math.pi)
        beta  = random.uniform(0.,2.*math.pi)
        gamma = random.uniform(0.,2.*math.pi)
        phi   = random.uniform(0.,math.pi)
        yield (r, theta, alpha, beta, gamma, phi)


domainsize = math.pow(2*math.pi,4)*math.pi*1
expected = 16*math.pow(math.pi,5)/3.

for nmc in [1000, 10000, 100000, 1000000, 10000000, 100000000]:
    random.seed(1)
    result, error = mcint.integrate(integrand, sampler(), measure=domainsize, n=nmc)
    diff = abs(result - expected)

    print "Using n = ", nmc
    print "Result = ", result, "estimated error = ", error
    print "Known result = ", expected, " error = ", diff, " = ", 100.*diff/expected, "%"
    print " "
</snippet></ROW><ROW><id>14075572</id><snippet>Using n =  1000
Result =  1654.19633236 estimated error =  399.360391622
Known result =  1632.10498552  error =  22.0913468345  =  1.35354937522 %

Using n =  10000
Result =  1634.88583778 estimated error =  128.824988953
Known result =  1632.10498552  error =  2.78085225405  =  0.170384397984 %

Using n =  100000
Result =  1646.72936 estimated error =  41.3384733174
Known result =  1632.10498552  error =  14.6243744747  =  0.8960437352 %

Using n =  1000000
Result =  1640.67189792 estimated error =  13.0282663003
Known result =  1632.10498552  error =  8.56691239895  =  0.524899591322 %

Using n =  10000000
Result =  1635.52135088 estimated error =  4.12131562436
Known result =  1632.10498552  error =  3.41636536248  =  0.209322647304 %

Using n =  100000000
Result =  1631.5982799 estimated error =  1.30214644297
Known result =  1632.10498552  error =  0.506705620147  =  0.0310461413109 %
</snippet></ROW><ROW><id>14075572</id><snippet>import numpy
import scipy.integrate
import math

def w(r, theta, phi, alpha, beta, gamma):
    return(-math.log(theta * beta))

def integrand(phi, alpha, gamma, r, theta, beta):
    ww = w(r, theta, phi, alpha, beta, gamma)
    k = 1.
    T = 1.
    return (math.exp(-ww/(k*T)) - 1.)*r*r*math.sin(beta)*math.sin(theta)

# limits of integration

def zero(x, y=0):
    return 0.

def one(x, y=0):
    return 1.

def pi(x, y=0):
    return math.pi

def twopi(x, y=0):
    return 2.*math.pi

# integrate over phi [0, Pi), alpha [0, 2 Pi), gamma [0, 2 Pi)
def secondIntegrals(r, theta, beta):
    res, err = scipy.integrate.tplquad(integrand, 0., 2.*math.pi, zero, twopi, zero, pi, args=(r, theta, beta))
    return res

# integrate over r [0, 1), beta [0, 2 Pi), theta [0, 2 Pi)
def integral():
    return scipy.integrate.tplquad(secondIntegrals, 0., 2.*math.pi, zero, twopi, zero, one)

expected = 16*math.pow(math.pi,5)/3.
result, err = integral()
diff = abs(result - expected)

print "Result = ", result, " estimated error = ", err
print "Known result = ", expected, " error = ", diff, " = ", 100.*diff/expected, "%"
</snippet></ROW><ROW><id>14075572</id><snippet>W</snippet></ROW><ROW><id>14075572</id><snippet>Result =  1632.10498552  estimated error =  3.59054059995e-11
Known result =  1632.10498552  error =  4.54747350886e-13  =  2.7862628625e-14 %
</snippet></ROW><ROW><id>14075639</id><snippet>pickle.loads()</snippet></ROW><ROW><id>14075639</id><snippet>.loads()</snippet></ROW><ROW><id>14075639</id><snippet>pickle.Unpicler</snippet></ROW><ROW><id>14075639</id><snippet>.loads()</snippet></ROW><ROW><id>14075639</id><snippet>sys._getframe()</snippet></ROW><ROW><id>14075639</id><snippet>.f_locals</snippet></ROW><ROW><id>14075639</id><snippet>pickle</snippet></ROW><ROW><id>14075639</id><snippet>Unpickler.load</snippet></ROW><ROW><id>14075639</id><snippet>loads()</snippet></ROW><ROW><id>14075639</id><snippet>sys._getframe(3).f_locals['local_var']</snippet></ROW><ROW><id>14075797</id><snippet>QSortFilterProxyModel</snippet></ROW><ROW><id>14075797</id><snippet>QStandardItemModel</snippet></ROW><ROW><id>14075797</id><snippet>QTableView</snippet></ROW><ROW><id>14075797</id><snippet>#!/usr/bin/env python
#-*- coding:utf-8 -*-

from PyQt4 import QtCore, QtGui

class myWindow(QtGui.QMainWindow):
    def __init__(self, parent=None):
        super(myWindow, self).__init__(parent)
        self.centralwidget  = QtGui.QWidget(self)
        self.lineEdit       = QtGui.QLineEdit(self.centralwidget)
        self.view           = QtGui.QTableView(self.centralwidget)
        self.comboBox       = QtGui.QComboBox(self.centralwidget)
        self.label          = QtGui.QLabel(self.centralwidget)

        self.gridLayout = QtGui.QGridLayout(self.centralwidget)
        self.gridLayout.addWidget(self.lineEdit, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.view, 1, 0, 1, 3)
        self.gridLayout.addWidget(self.comboBox, 0, 2, 1, 1)
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)

        self.setCentralWidget(self.centralwidget)
        self.label.setText("Regex Filter")

        self.model = QtGui.QStandardItemModel(self)

        for rowName in range(3) * 5:
            self.model.invisibleRootItem().appendRow(
                [   QtGui.QStandardItem("row {0} col {1}".format(rowName, column))    
                    for column in range(3)
                    ]
                )

        self.proxy = QtGui.QSortFilterProxyModel(self)
        self.proxy.setSourceModel(self.model)

        self.view.setModel(self.proxy)
        self.comboBox.addItems(["Column {0}".format(x) for x in range(self.model.columnCount())])

        self.lineEdit.textChanged.connect(self.on_lineEdit_textChanged)
        self.comboBox.currentIndexChanged.connect(self.on_comboBox_currentIndexChanged)

        self.horizontalHeader = self.view.horizontalHeader()
        self.horizontalHeader.sectionClicked.connect(self.on_view_horizontalHeader_sectionClicked)

    @QtCore.pyqtSlot(int)
    def on_view_horizontalHeader_sectionClicked(self, logicalIndex):
        self.logicalIndex   = logicalIndex
        self.menuValues     = QtGui.QMenu(self)
        self.signalMapper   = QtCore.QSignalMapper(self)  

        self.comboBox.blockSignals(True)
        self.comboBox.setCurrentIndex(self.logicalIndex)
        self.comboBox.blockSignals(True)

        valuesUnique = [    self.model.item(row, self.logicalIndex).text()
                            for row in range(self.model.rowCount())
                            ]

        actionAll = QtGui.QAction("All", self)
        actionAll.triggered.connect(self.on_actionAll_triggered)
        self.menuValues.addAction(actionAll)
        self.menuValues.addSeparator()

        for actionNumber, actionName in enumerate(sorted(list(set(valuesUnique)))):              
            action = QtGui.QAction(actionName, self)
            self.signalMapper.setMapping(action, actionNumber)  
            action.triggered.connect(self.signalMapper.map)  
            self.menuValues.addAction(action)

        self.signalMapper.mapped.connect(self.on_signalMapper_mapped)  

        headerPos = self.view.mapToGlobal(self.horizontalHeader.pos())        

        posY = headerPos.y() + self.horizontalHeader.height()
        posX = headerPos.x() + self.horizontalHeader.sectionPosition(self.logicalIndex)

        self.menuValues.exec_(QtCore.QPoint(posX, posY))

    @QtCore.pyqtSlot()
    def on_actionAll_triggered(self):
        filterColumn = self.logicalIndex
        filterString = QtCore.QRegExp(  "",
                                        QtCore.Qt.CaseInsensitive,
                                        QtCore.QRegExp.RegExp
                                        )

        self.proxy.setFilterRegExp(filterString)
        self.proxy.setFilterKeyColumn(filterColumn)

    @QtCore.pyqtSlot(int)
    def on_signalMapper_mapped(self, i):
        stringAction = self.signalMapper.mapping(i).text()
        filterColumn = self.logicalIndex
        filterString = QtCore.QRegExp(  stringAction,
                                        QtCore.Qt.CaseSensitive,
                                        QtCore.QRegExp.FixedString
                                        )

        self.proxy.setFilterRegExp(filterString)
        self.proxy.setFilterKeyColumn(filterColumn)

    @QtCore.pyqtSlot(str)
    def on_lineEdit_textChanged(self, text):
        search = QtCore.QRegExp(    text,
                                    QtCore.Qt.CaseInsensitive,
                                    QtCore.QRegExp.RegExp
                                    )

        self.proxy.setFilterRegExp(search)

    @QtCore.pyqtSlot(int)
    def on_comboBox_currentIndexChanged(self, index):
        self.proxy.setFilterKeyColumn(index)


if __name__ == "__main__":
    import sys

    app  = QtGui.QApplication(sys.argv)
    main = myWindow()
    main.show()
    main.resize(400, 600)
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>14075797</id><snippet>self.proxy.setFilterRegExp(filterString)</snippet></ROW><ROW><id>14075797</id><snippet>self.proxy.setFilterKeyColumn(filterValue)</snippet></ROW><ROW><id>14075850</id><snippet>shell=True</snippet></ROW><ROW><id>14075850</id><snippet>==</snippet></ROW><ROW><id>14075850</id><snippet>=</snippet></ROW><ROW><id>14075850</id><snippet>if</snippet></ROW><ROW><id>14075850</id><snippet>.Popen()</snippet></ROW><ROW><id>14075850</id><snippet>stderr</snippet></ROW><ROW><id>14075850</id><snippet>import subprocess

def main():
    change="205739"
    proc = subprocess.Popen(['git', 'branch', '-d', change], stderr=subprocess.PIPE)
    out, error = proc.communicate()
    if error.startswith("error: Cannot delete the branch"):
        subprocess.check_call(['git', 'branch', '-d', change])
</snippet></ROW><ROW><id>14075876</id><snippet>db.collection.aggregate([{$project: {timediff: {$subtract: ['$endtime' , '$starttime']}}}])
</snippet></ROW><ROW><id>14075876</id><snippet>$match</snippet></ROW><ROW><id>14075876</id><snippet>db.collection.aggregate([{$project: {timediff: {$subtract: ['$endtime' , '$starttime']}}}, {$match: {timediff: {$lte: 40}}}])
</snippet></ROW><ROW><id>14076064</id><snippet>df.sort().plot()
</snippet></ROW><ROW><id>14076064</id><snippet>df1 = DataFrame(randn(3,1), index=[datetime(2012,10,1), datetime(2012,9,1), datetime(2012,8,1)], columns=['test'])
</snippet></ROW><ROW><id>14076069</id><snippet>newcard</snippet></ROW><ROW><id>14076069</id><snippet>random.sample(Deck, 1)</snippet></ROW><ROW><id>14076069</id><snippet>Deck.remove(newcard[0])
</snippet></ROW><ROW><id>14076069</id><snippet>random.choice()</snippet></ROW><ROW><id>14076069</id><snippet>newcard = random.choice(Deck)
</snippet></ROW><ROW><id>14076114</id><snippet>   subprocess.Popen( ..., preexec_fn = lambda : ( os.setegid(1000), os.seteuid(1000)) )
</snippet></ROW><ROW><id>14076169</id><snippet>shutil.copyfile("\\\\?\\" + copy_file, dest_file)
</snippet></ROW><ROW><id>14076169</id><snippet>import win32api
path = win32api.GetShortPathName(path)
</snippet></ROW><ROW><id>14076298</id><snippet>best</snippet></ROW><ROW><id>14076298</id><snippet>import inspect

def config_wrap(func, name):
    @view_config(name=name)
    def wrapped(*args, **kwargs):
        return func(*args, **kwargs)
    return wrapped

def dynamic_names(cls):
    for name, m in inspect.getmembers(cls, inspect.ismethod):
        setattr(cls,name,config_wrap(m, name))
    return cls


@dynamic_names
@view_defaults(context=models.Group)
class GroupView(object):
    def __init__(self, context, request):
        self.context = context
        self.request = request

    def members(self):
        pass

    def add(self):
        pass
</snippet></ROW><ROW><id>14076426</id><snippet>.readlines()</snippet></ROW><ROW><id>14076426</id><snippet>f</snippet></ROW><ROW><id>14076426</id><snippet>print(f)
</snippet></ROW><ROW><id>14076463</id><snippet>#!/usr/bin/env python

from PyKDE4 import kdecore, kdeui
from PyQt4 import QtCore, QtGui

appName     = "default"
catalog     = ""
programName = kdecore.ki18n("default")
version     = "1.0"
description = kdecore.ki18n("Default Example")
license     = kdecore.KAboutData.License_GPL
copyright   = kdecore.ki18n("unknown")
text        = kdecore.ki18n("none")
homePage    = ""
bugEmail    = "email"
aboutData   = kdecore.KAboutData(appName, catalog, programName, version, description,
                          license, copyright, text, homePage, bugEmail)

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    _fromUtf8 = lambda s: s

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(_fromUtf8("MainWindow"))
        MainWindow.resize(800, 400)
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.label = QtGui.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(80, 110, 271, 51))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.label.setFont(font)
        self.label.setObjectName(_fromUtf8("label"))
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 20))
        self.menubar.setObjectName(_fromUtf8("menubar"))
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtGui.QStatusBar(MainWindow)
        self.statusbar.setObjectName(_fromUtf8("statusbar"))
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(kdecore.i18n(_fromUtf8("MainWindow")))
        self.label.setText(kdecore.i18n(_fromUtf8("Hello World!")))

class MainWindow(QtGui.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        self.setupUi(self)

if __name__ == "__main__":
    import  sys

    kdecore.KCmdLineArgs.init(sys.argv, aboutData)
    app = kdeui.KApplication()
    main = MainWindow()
    main.resize(640, 480)
    main.show()
    app.lastWindowClosed.connect(app.quit)
    app.exec_()
</snippet></ROW><ROW><id>14076558</id><snippet>blog</snippet></ROW><ROW><id>14076558</id><snippet>urlpatterns = patterns('',
    url(r'^', include('apps.homepage.urls')),
)
</snippet></ROW><ROW><id>14076558</id><snippet>from django.conf.urls.defaults import *

urlpatterns = patterns('',
    (r'^$', 'apps.homepage.views.index'),
)
</snippet></ROW><ROW><id>14076754</id><snippet>class SearchView(TemplateView):
(...)
      form = None  //&lt;= Here you set the form to None
</snippet></ROW><ROW><id>14076754</id><snippet>is_valid()</snippet></ROW><ROW><id>14076754</id><snippet>None</snippet></ROW><ROW><id>14076920</id><snippet>checkdata</snippet></ROW><ROW><id>14076920</id><snippet>dig = mod(dig, 9)</snippet></ROW><ROW><id>14076920</id><snippet>code.charAt(code.length-1))</snippet></ROW><ROW><id>14076920</id><snippet>for</snippet></ROW><ROW><id>14076920</id><snippet>i&lt;code.length-1</snippet></ROW><ROW><id>14076920</id><snippet>i&lt;code.length</snippet></ROW><ROW><id>14076920</id><snippet>for</snippet></ROW><ROW><id>14076920</id><snippet>alert</snippet></ROW><ROW><id>14076920</id><snippet>console.log</snippet></ROW><ROW><id>14076920</id><snippet>checkdata</snippet></ROW><ROW><id>14076920</id><snippet>dig</snippet></ROW><ROW><id>14076920</id><snippet>function checkdata(code) { 
  var dig = 0; 
  var test = 1; 
  for(var i=0; i&lt;code.length-1;i++) { 
    dig=dig+(char2number(code.charAt(i))*test);
    test*=2;
  }
  dig = mod(dig,9);
  alert(dig);
  if(dig==code.charAt(code.length-1)) return true; 
  else return false;}
</snippet></ROW><ROW><id>14076920</id><snippet>checkdata</snippet></ROW><ROW><id>14076920</id><snippet>alert(dig)</snippet></ROW><ROW><id>14076920</id><snippet>return code[:-1] + dig</snippet></ROW><ROW><id>14076920</id><snippet>2</snippet></ROW><ROW><id>14076920</id><snippet>2</snippet></ROW><ROW><id>14076920</id><snippet>%</snippet></ROW><ROW><id>14076920</id><snippet>%</snippet></ROW><ROW><id>14076920</id><snippet>for</snippet></ROW><ROW><id>14076920</id><snippet>&lt;code.length-1</snippet></ROW><ROW><id>14076920</id><snippet>&lt;code.length</snippet></ROW><ROW><id>14077120</id><snippet>bytearray(mmap)</snippet></ROW><ROW><id>14077120</id><snippet>array.fromfile</snippet></ROW><ROW><id>14077120</id><snippet>os.read()</snippet></ROW><ROW><id>14077120</id><snippet>bytearray</snippet></ROW><ROW><id>14077120</id><snippet>memoryview</snippet></ROW><ROW><id>14077120</id><snippet>FileIO.readinto</snippet></ROW><ROW><id>14077120</id><snippet>import os
import mmap, io, array
import timeit

fn = 'path_to_largish_file'

def fd_readinto_mmap(fd, ba):
    m = mmap.mmap(fd, 0, access=mmap.ACCESS_READ)
    ba.extend(m)
    m.close()

def fd_readinto_fio(fd, ba):
    with io.FileIO(fd, closefd = False) as fio:
    fio.readinto(ba)

def fd_readinto_array(fd, ba):
    ar = array.array('c')
    sz = os.fstat(fd).st_size
    fp = os.fdopen(fd, 'rb')
    ar.fromfile(fp, sz)
    ba.extend(ar)

def fd_readinto_mv(fd, ba):
    stat = os.fstat(fd)
    blksize = getattr(stat, 'st_blksize', 4096)
    bufsize = stat.st_size
    buf = bytearray(bufsize)
    m = memoryview(buf)
    while True:
        b = os.read(fd, blksize)
        s = len(b)
        if not s: break
        m[:s], m = b, m[s:]
    writtenbytes = buffer(buf, 0, bufsize-len(m))
    ba.extend(writtenbytes)

setup = """
from __main__ import fn, fd_readinto_mmap, fd_readinto_fio, fd_readinto_array, fd_readinto_mv, reset_fd
import os
openfd = lambda : os.open(fn, os.O_RDONLY)
closefd = lambda fd: os.close(fd)
"""


reps = 2
tests = {
    'fio' : "fd=openfd(); fd_readinto_fio(fd, bytearray()); closefd(fd)",
    'mmap': "fd=openfd(); fd_readinto_mmap(fd, bytearray()); closefd(fd)",
    'array': "fd=openfd(); fd_readinto_array(fd, bytearray());",
    'mv' : "fd=openfd(); fd_readinto_mv(fd, bytearray()); closefd(fd)",
}

width = max(map(len, tests))
for n,t in tests.iteritems():
    time = timeit.timeit(t, setup, number=reps)
    print ("{:%s} {}" % width).format(n, time)
</snippet></ROW><ROW><id>14077120</id><snippet>FileIO</snippet></ROW><ROW><id>14077120</id><snippet>FileIO.readinto</snippet></ROW><ROW><id>14077120</id><snippet>mmap  4.86922478676
array 4.19783091545
mv    7.75051403046
fio   9.29832458496e-05
</snippet></ROW></DATA>