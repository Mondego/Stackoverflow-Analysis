<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>20864065</id><snippet>read()</snippet></ROW><ROW><id>20864065</id><snippet>'\n'</snippet></ROW><ROW><id>20864065</id><snippet>if UserInput.strip() == 'List contents':
</snippet></ROW><ROW><id>20864065</id><snippet>if 'List contents' in UserInput:
</snippet></ROW><ROW><id>20864065</id><snippet>open</snippet></ROW><ROW><id>20864065</id><snippet>with</snippet></ROW><ROW><id>20864065</id><snippet>with open('/Users/.../USER_INPUT.txt', 'w+') as UserInputFile:
    if UserInput.strip() == 'List contents': # or if s in f:
        UserInputFile.write("ls")
    else:
        print "Didn't work"
</snippet></ROW><ROW><id>20864146</id><snippet>(?:</snippet></ROW><ROW><id>20864146</id><snippet>(:?</snippet></ROW><ROW><id>20864191</id><snippet>raw_input</snippet></ROW><ROW><id>20864191</id><snippet>tSizeAns = raw_input()
</snippet></ROW><ROW><id>20864191</id><snippet>tSizeAns = int(raw_input())
</snippet></ROW><ROW><id>20864386</id><snippet>def calc_angle(pressure, min_p=1000, max_p=1200):
    return 360 * ((pressure - min_p) / float(max_p - min_p))

angle = calc_angle(pressure)
</snippet></ROW><ROW><id>20864386</id><snippet>pressure</snippet></ROW><ROW><id>20864386</id><snippet>min_p</snippet></ROW><ROW><id>20864386</id><snippet>max_p</snippet></ROW><ROW><id>20864386</id><snippet>min_a</snippet></ROW><ROW><id>20864386</id><snippet>max_a</snippet></ROW><ROW><id>20864386</id><snippet>d = {1000:0, 1001: 1.8, ...}

angle = d[pressure]
</snippet></ROW><ROW><id>20864883</id><snippet>&gt;&gt;&gt; import scipy.stats as st
&gt;&gt;&gt; st.norm.ppf(.95)
1.6448536269514722
&gt;&gt;&gt; st.norm.cdf(1.64)
0.94949741652589625
</snippet></ROW><ROW><id>20864903</id><snippet>addstr</snippet></ROW><ROW><id>20864903</id><snippet>addch</snippet></ROW><ROW><id>20864903</id><snippet># usual curses setup
stdscr.addch(10, 10, 'a')
stdscr.addch(10, 9, 'b')
</snippet></ROW><ROW><id>20864903</id><snippet>a</snippet></ROW><ROW><id>20864903</id><snippet>addch</snippet></ROW><ROW><id>20864903</id><snippet>rstrip()</snippet></ROW><ROW><id>20864903</id><snippet>\n</snippet></ROW><ROW><id>20864903</id><snippet>file = open(…).readlines()</snippet></ROW><ROW><id>20864903</id><snippet>readlines()</snippet></ROW><ROW><id>20864903</id><snippet>file = open(…).read()</snippet></ROW><ROW><id>20864903</id><snippet>find_boundries</snippet></ROW><ROW><id>20864903</id><snippet>draw</snippet></ROW><ROW><id>20864903</id><snippet>@</snippet></ROW><ROW><id>20864919</id><snippet>&gt;&gt;&gt; class A(object):
...     def __init__(self):
...         print 'A.__init__()'
...         super(A, self).__init__()
... 
&gt;&gt;&gt; class B(object):
...     def __init__(self):
...         print 'B.__init__()'
...         super(B, self).__init__()
... 
&gt;&gt;&gt; class C(A, B):
...     def __init__(self):
...         print 'C.__init__()'
...         super(C, self).__init__()
... 
&gt;&gt;&gt; C()
C.__init__()
A.__init__()
B.__init__()
&lt;__main__.C object at 0x10f27e190&gt;
</snippet></ROW><ROW><id>20864919</id><snippet>super(A, self).__init__()</snippet></ROW><ROW><id>20864919</id><snippet>A.__init__()</snippet></ROW><ROW><id>20864919</id><snippet>B.__init__()</snippet></ROW><ROW><id>20864919</id><snippet>super()</snippet></ROW><ROW><id>20864919</id><snippet>self</snippet></ROW><ROW><id>20864919</id><snippet>C</snippet></ROW><ROW><id>20864919</id><snippet>&gt;&gt;&gt; C.__mro__
(&lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;class '__main__.B'&gt;, &lt;type 'object'&gt;)
</snippet></ROW><ROW><id>20864919</id><snippet>super(A, self)</snippet></ROW><ROW><id>20864919</id><snippet>B</snippet></ROW><ROW><id>20864919</id><snippet>object</snippet></ROW><ROW><id>20864929</id><snippet>end='\r'</snippet></ROW><ROW><id>20864929</id><snippet>print("Time left till next update: %d seconds" % t, end='\r')
</snippet></ROW><ROW><id>20864929</id><snippet>end</snippet></ROW><ROW><id>20864929</id><snippet>'\n'</snippet></ROW><ROW><id>20865280</id><snippet>for n in l:
    for s in n:
        print s,
    print
</snippet></ROW><ROW><id>20865280</id><snippet>1 2 3
4 5
6
</snippet></ROW><ROW><id>20865498</id><snippet>result</snippet></ROW><ROW><id>20865498</id><snippet>ndarray</snippet></ROW><ROW><id>20865498</id><snippet>prizedoors.size</snippet></ROW><ROW><id>20865498</id><snippet>[0, 3)</snippet></ROW><ROW><id>20865498</id><snippet>&gt;&gt;&gt; result = np.random.randint(0, 3, 5)
&gt;&gt;&gt; result
array([1, 1, 2, 0, 1])
</snippet></ROW><ROW><id>20865498</id><snippet>bad</snippet></ROW><ROW><id>20865498</id><snippet>result == prizedoors</snippet></ROW><ROW><id>20865498</id><snippet>result == guesses</snippet></ROW><ROW><id>20865498</id><snippet>prizedoors</snippet></ROW><ROW><id>20865498</id><snippet>guesses</snippet></ROW><ROW><id>20865498</id><snippet>bad</snippet></ROW><ROW><id>20865498</id><snippet>&gt;&gt;&gt; bad
array([ True,  True,  True, False,  True], dtype=bool)
</snippet></ROW><ROW><id>20865498</id><snippet>bad.sum()</snippet></ROW><ROW><id>20865498</id><snippet>&gt;&gt;&gt; bad.sum()
4
</snippet></ROW><ROW><id>20865498</id><snippet>result[bad]</snippet></ROW><ROW><id>20865498</id><snippet>result</snippet></ROW><ROW><id>20865498</id><snippet>bad == True</snippet></ROW><ROW><id>20865498</id><snippet>&gt;&gt;&gt; result[bad]
array([1, 1, 2, 1])
</snippet></ROW><ROW><id>20865498</id><snippet>&gt;&gt;&gt; result[bad] = np.random.randint(0, 3, bad.sum())
&gt;&gt;&gt; result
array([1, 1, 0, 0, 1])
</snippet></ROW><ROW><id>20865523</id><snippet>http://www.nba.com/cmsinclude/desktopWrapperHeader_jsonp.html</snippet></ROW><ROW><id>20865523</id><snippet>json</snippet></ROW><ROW><id>20865567</id><snippet>df.plot(legend=False)
</snippet></ROW><ROW><id>20865567</id><snippet>.plot()</snippet></ROW><ROW><id>20865567</id><snippet>
Definition: df.plot(frame=None, x=None, y=None, subplots=False, sharex=True, sharey=False, use_index=True, figsize=None, grid=None, legend=True, rot=None, ax=None, style=None, title=None, xlim=None, ylim=None, logx=False, logy=False, xticks=None, yticks=None, kind='line', sort_columns=False, fontsize=None, secondary_y=False, **kwds)
</snippet></ROW><ROW><id>20865589</id><snippet>i</snippet></ROW><ROW><id>20865589</id><snippet>str.format</snippet></ROW><ROW><id>20865589</id><snippet>print("Kilograms   Pounds")

for i in range(1,199+1,2):
    kg = i * 202
    print('{:&lt;3} {:&gt;15.1f}'.format(i, kg))
</snippet></ROW><ROW><id>20865754</id><snippet>dbpath</snippet></ROW><ROW><id>20865754</id><snippet>getCmdLineOpts</snippet></ROW><ROW><id>20865754</id><snippet>mongo</snippet></ROW><ROW><id>20865754</id><snippet>db.adminCommand('getCmdLineOpts');
</snippet></ROW><ROW><id>20865754</id><snippet>dbpath</snippet></ROW><ROW><id>20865754</id><snippet>db.adminCommand('getCmdLineOpts').parsed.dbpath
</snippet></ROW><ROW><id>20865754</id><snippet>dbpath</snippet></ROW><ROW><id>20865754</id><snippet>/data/db</snippet></ROW><ROW><id>20865754</id><snippet>C:\data\db</snippet></ROW><ROW><id>20865834</id><snippet>Alias</snippet></ROW><ROW><id>20866029</id><snippet>threading.Timer</snippet></ROW><ROW><id>20866029</id><snippet>import threading

def print_hello():
    print('Hello')
    timer = threading.Timer(2, print_hello) # # Call `print_hello` in 2 seconds.
    timer.start()

print_hello()
</snippet></ROW><ROW><id>20866070</id><snippet>&gt;&gt;&gt; compile('foo', 'bar', 'exec')
&lt;code object &lt;module&gt; at 0x7fb586b57ab0, file "bar", line 1&gt;
&gt;&gt;&gt; exec(compile('foo', 'bar', 'exec'))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "bar", line 1, in &lt;module&gt;
NameError: name 'foo' is not defined
</snippet></ROW><ROW><id>20866093</id><snippet>None</snippet></ROW><ROW><id>20866093</id><snippet>illuminate()</snippet></ROW><ROW><id>20866124</id><snippet>myClick</snippet></ROW><ROW><id>20866124</id><snippet>self.Mygrade</snippet></ROW><ROW><id>20866124</id><snippet>self.Mygrade= Entry(self.Frame2, width=10)
</snippet></ROW><ROW><id>20866124</id><snippet>getValues</snippet></ROW><ROW><id>20866124</id><snippet>self.test1 = float(self.Mygrade.get())
</snippet></ROW><ROW><id>20866124</id><snippet>list</snippet></ROW><ROW><id>20866124</id><snippet>Entry</snippet></ROW><ROW><id>20866124</id><snippet>def myClick(self):      
    x = self.myvalue.get()
    value = int(x)
    self.grades = [] # &lt;---- to hold grade Entry objects.
    for n in range(self.value):
        Label(self.Frame2,text="Grade"+str(n+1)).place(x=10,y=30+(30*n))        
        grade = Entry(self.Frame2, width=10)
        grade.place(x=70,y=30+(30*n))
        self.grades.append(grade) # &lt;---

def getValues(self):
    total = 0
    for grade in self.grades: # &lt;--- iterate over entry objects.
        try:
            total += float(grade.get())
        except ValueError:
            print('Invalid value for grade: {}'.format(grade.get()))
    avg = total / len(self.grades)
    print('Average = {}'.format(avg))
</snippet></ROW><ROW><id>20866424</id><snippet>myproject.blog</snippet></ROW><ROW><id>20866424</id><snippet>blog</snippet></ROW><ROW><id>20866469</id><snippet>set.issubset</snippet></ROW><ROW><id>20866469</id><snippet>&gt;&gt;&gt; {'word','word 1','word 2'}.issubset(['desk','chair','lamp'])
False
&gt;&gt;&gt; {'word','word 1','word 2'}.issubset(['cow','word','horse','word 2','word 1'])
True
</snippet></ROW><ROW><id>20866469</id><snippet>&gt;&gt;&gt; search_terms = ['word','word 1','word 2']
&gt;&gt;&gt; library = [['desk','chair','lamp'],['cow','word','horse','word 2','word 1']]
&gt;&gt;&gt; terms = set(search_terms)
&gt;&gt;&gt; [x for x in library if terms.issubset(x)]
[['cow', 'word', 'horse', 'word 2', 'word 1']]
</snippet></ROW><ROW><id>20866554</id><snippet>str.count</snippet></ROW><ROW><id>20866554</id><snippet>&gt;&gt;&gt; fmt = '%d, %x, %%'
&gt;&gt;&gt; fmt.count('%')
4
</snippet></ROW><ROW><id>20866554</id><snippet>%%</snippet></ROW><ROW><id>20866554</id><snippet>&gt;&gt;&gt; fmt.count('%') - fmt.count('%%') * 2
2
</snippet></ROW><ROW><id>20866621</id><snippet>printArgs</snippet></ROW><ROW><id>20866621</id><snippet>extern "C"</snippet></ROW><ROW><id>20866621</id><snippet>#include &lt;iostream&gt;
using namespace std;

extern "C" {
    int printArgs(char * args_array);
}

int printArgs(char * args_array){
    for (int i = 0; i &lt; 5; i++){
        cout&lt;&lt;i&lt;&lt;"- "&lt;&lt;args_array[i]&lt;&lt;"\n";
    }
}

int main(){
    cout&lt;&lt;"Hello\n";
}
</snippet></ROW><ROW><id>20866621</id><snippet>None</snippet></ROW><ROW><id>20866621</id><snippet>...
helloInCPPPrint = helloInCPP_lib.printArgs
helloInCPPPrint.argtypes = [c_char_p]
print helloInCPPPrint("ABCDE")
</snippet></ROW><ROW><id>20866621</id><snippet>argtypes</snippet></ROW><ROW><id>20866720</id><snippet>dict[key]</snippet></ROW><ROW><id>20866720</id><snippet>ants['ant003'].searchFood()
</snippet></ROW><ROW><id>20866720</id><snippet>globals</snippet></ROW><ROW><id>20866720</id><snippet>...
for name in ants.keys():
    globals()[name] = Ant(name) # &lt;----

ant003.searchFood()
</snippet></ROW><ROW><id>20867111</id><snippet>import lxml.etree as ET
import io

content = '''&lt;?xml
    version='1.1'
    encoding='utf-8'
?&gt;
&lt;!DOCTYPE root [
    &lt;!ATTLIST test
        attr (A | B | C) 'B'
    &gt;
    &lt;!ELEMENT test (#PCDATA)&gt;
    &lt;!ELEMENT root (test)*&gt;
]&gt;
&lt;root&gt;&lt;/root&gt;'''

tree = ET.parse(io.BytesIO(content))
info = tree.docinfo
dtd = info.internalDTD

for elt in dtd.elements():
    print(elt)
    print(elt.content)
    print

# &lt;lxml.etree._DTDElementDecl object name='test' prefix=None type='mixed' at 0xb73e044c&gt;
# &lt;lxml.etree._DTDElementContentDecl object name=None type='pcdata' occur='once' at 0xb73e04ac&gt;

# &lt;lxml.etree._DTDElementDecl object name='root' prefix=None type='element' at 0xb73e046c&gt;
# &lt;lxml.etree._DTDElementContentDecl object name='test' type='element' occur='mult' at 0xb73e04ac&gt;
</snippet></ROW><ROW><id>20867136</id><snippet>image.txt</snippet></ROW><ROW><id>20867136</id><snippet>apple, Jan 2001, shelter, gate, goto, lottery, forest, pastery
banana, Jul 2012, fig, olive
</snippet></ROW><ROW><id>20867136</id><snippet>fp  = open('image.txt')
words= [word.strip() for line in fp.readlines() for word in line.split(',') if word.strip()]
print(", ".join(words)) # or `print(words)` if you want to print out `words` as a list
</snippet></ROW><ROW><id>20867136</id><snippet>apple, Jan 2001, shelter, gate, goto, lottery, forest, pastery, banana, Jul 2012, fig, olive
</snippet></ROW><ROW><id>20867432</id><snippet>2.68530063</snippet></ROW><ROW><id>20867432</id><snippet>2.68530063</snippet></ROW><ROW><id>20867432</id><snippet>numpy.isclose</snippet></ROW><ROW><id>20867432</id><snippet>distances[numpy.isclose(distances, 0)]  = 1
distances[distances &gt; 2.68530063] = 0
distances[numpy.isclose(distances, 2.68530063)]  = -1
</snippet></ROW><ROW><id>20867432</id><snippet>distances &gt; 2.68530063</snippet></ROW><ROW><id>20867432</id><snippet>distances</snippet></ROW><ROW><id>20867582</id><snippet>./file.py</snippet></ROW><ROW><id>20867750</id><snippet>country_code</snippet></ROW><ROW><id>20867750</id><snippet>m = Logger(city='city', country_name='country_name',
           country_code='country_code', **dicty)
#          ^ here                       ^ and in here
</snippet></ROW><ROW><id>20867750</id><snippet>country_code = "country_code"</snippet></ROW><ROW><id>20867750</id><snippet>country_code = u"US"</snippet></ROW><ROW><id>20867750</id><snippet>m = Logger(city=dicty['city'], country_name=dicty['country_name'],
           country_code=dicty['country_code'])
</snippet></ROW><ROW><id>20868302</id><snippet>[[Slot(self.world,i,j) for j in range(NUMROWS)] for i in range(NUMCOLS)]
</snippet></ROW><ROW><id>20868302</id><snippet>slots = []
for i in range(NUMCOLS):
  column = []
  for j in range(NUMROWS):
    row = Slot(self.world, i, j)
    column.append(row)
  slots.append(column)
</snippet></ROW><ROW><id>20868302</id><snippet>list comprehension</snippet></ROW><ROW><id>20868302</id><snippet>&gt;&gt;&gt; x, y = 2,3
&gt;&gt;&gt; [[(i,j) for j in range(y)] for i in range(x)]
[[(0, 0), (0, 1), (0, 2)], [(1, 0), (1, 1), (1, 2)]]
</snippet></ROW><ROW><id>20868339</id><snippet>&gt;&gt;&gt; print('%x' % 523433939134152323423597861958781271347434)
6023bedba8c47434c84785469b1724910ea
</snippet></ROW><ROW><id>20868392</id><snippet>&gt;&gt;&gt; timeit.timeit("Spam() in l", """
... # Old-style
... class Spam: pass
... l = [Spam() for i in xrange(100000)]""", number=10)
3.0454677856675403
&gt;&gt;&gt; timeit.timeit("Spam() in l", """
... # New-style
... class Spam(object): pass
... l = [Spam() for i in xrange(100000)]""", number=10)
0.05137817007346257
&gt;&gt;&gt; timeit.timeit("'a' in l", 'l = ["b" for i in xrange(100000)]', number=10)
0.03013876870841159
</snippet></ROW><ROW><id>20868392</id><snippet>Spam</snippet></ROW><ROW><id>20868392</id><snippet>object</snippet></ROW><ROW><id>20868392</id><snippet>in</snippet></ROW><ROW><id>20868392</id><snippet>==</snippet></ROW><ROW><id>20868392</id><snippet>__eq__</snippet></ROW><ROW><id>20868392</id><snippet>__eq__</snippet></ROW><ROW><id>20868392</id><snippet>__dict__</snippet></ROW><ROW><id>20868392</id><snippet>__getattribute__</snippet></ROW><ROW><id>20868392</id><snippet>object</snippet></ROW><ROW><id>20868392</id><snippet>__eq__</snippet></ROW><ROW><id>20868392</id><snippet>__getattribute__</snippet></ROW><ROW><id>20868409</id><snippet>In [20]: df['asq_cum']=df['asq'].cumsum()

In [21]: df
Out[21]: 
     asq  asq_cum
asp              
0     20       20
1     20       40
</snippet></ROW><ROW><id>20868418</id><snippet>print numpy.random.randn(3,4)
</snippet></ROW><ROW><id>20868418</id><snippet>[[-0.06694895 -0.4634386  -1.5856743  -0.3946314 ]
 [-1.43080135  0.24923625  0.74692133 -1.73131258]
 [ 0.48610534  0.66854414  1.19446753 -0.4729655 ]]
</snippet></ROW><ROW><id>20868446</id><snippet>In [27]: df=df.rename(columns = {'two':'new_name'})

In [28]: df
Out[28]: 
  one three  new_name
0    1     a         9
1    2     b         8
2    3     c         7
3    4     d         6
4    5     e         5
</snippet></ROW><ROW><id>20868446</id><snippet>rename</snippet></ROW><ROW><id>20868507</id><snippet>import sys
import socket

def servertest(argv):
    host = argv[1]
    port = int(argv[2])

    args = socket.getaddrinfo(host, port, socket.AF_INET, socket.SOCK_STREAM)
    for family, socktype, proto, canonname, sockaddr in args:
        s = socket.socket(family, socktype, proto)
        try:
            s.connect(sockaddr)
        except socket.error:
            return False
        else:
            s.close()
            return True


if __name__ == "__main__":
    if servertest(sys.argv):
        print("Server is UP")
    else:
        print("Server is DOWN")
</snippet></ROW><ROW><id>20868556</id><snippet>write()</snippet></ROW><ROW><id>20868556</id><snippet>.flush()</snippet></ROW><ROW><id>20868556</id><snippet>print</snippet></ROW><ROW><id>20868640</id><snippet>float</snippet></ROW><ROW><id>20868640</id><snippet>amount= input("Bitte gib einen Euro Betrag ein: ")
coins = []
cents = [2000, 1000, 500, 200, 100, 50, 20, 10, 5, 2, 1]
amount = int(float(amount) * 100)
for cent in cents:
    while amount &gt;= cent:
        amount -= cent
        coins.append(cent)

print [coin / 100.0 for coin in coins]
</snippet></ROW><ROW><id>20868640</id><snippet>sum</snippet></ROW><ROW><id>20868640</id><snippet>amount</snippet></ROW><ROW><id>20868640</id><snippet>sum</snippet></ROW><ROW><id>20868640</id><snippet>sum</snippet></ROW><ROW><id>20868640</id><snippet>Bitte gebe einen Euro Betrag ein: 17.79
[10.0, 5.0, 2.0, 0.5, 0.2, 0.05, 0.02, 0.02]
</snippet></ROW><ROW><id>20868640</id><snippet>while</snippet></ROW><ROW><id>20868640</id><snippet>for cent in cents:
    n = int(math.floor(amount / cent))
    amount -= n * cent
    coins += [cent] * n
</snippet></ROW><ROW><id>20868640</id><snippet>if not: break</snippet></ROW><ROW><id>20868640</id><snippet>if not n: continue</snippet></ROW><ROW><id>20868640</id><snippet>decimal</snippet></ROW><ROW><id>20868906</id><snippet>file_name</snippet></ROW><ROW><id>20868906</id><snippet>str.format()</snippet></ROW><ROW><id>20868906</id><snippet>{}</snippet></ROW><ROW><id>20868906</id><snippet>try</snippet></ROW><ROW><id>20868906</id><snippet>except</snippet></ROW><ROW><id>20868906</id><snippet>for</snippet></ROW><ROW><id>20868906</id><snippet>sql = """LOAD DATA LOCAL INFILE '{}'
INTO TABLE system_work
FIELDS TERMINATED BY ','
OPTIONALLY ENCLOSED BY '"'
LINES TERMINATED BY '\\r\\n'
IGNORE 1 LINES;;"""

for file_name in l:
    print file_name
    if file_name.endswith('DIV.csv'):
        try:
            cursor = db.cursor()
            cursor.execute(sql.format(file_name))
            db.commit()
        except Exception:
            # Rollback in case there is any error
            db.rollback()
</snippet></ROW><ROW><id>20868906</id><snippet>cursor.execute()</snippet></ROW><ROW><id>20868906</id><snippet>sql</snippet></ROW><ROW><id>20868906</id><snippet>file_name</snippet></ROW><ROW><id>20868906</id><snippet>{}</snippet></ROW><ROW><id>20868906</id><snippet>LOAD DATA LOCAL INFILE '{}'</snippet></ROW><ROW><id>20868906</id><snippet>file_name</snippet></ROW><ROW><id>20868906</id><snippet>DIV.csv</snippet></ROW><ROW><id>20868906</id><snippet>mysqlimport</snippet></ROW><ROW><id>20868906</id><snippet>mysqlimport --fields-terminated-by=, --fields-optionally-enclosed-by=\" \
            --local --lines-terminated-by=\r\n --user=root --password=gamma123 \
            test *DIV.csv
</snippet></ROW><ROW><id>20869601</id><snippet>search_terms = ['word', 'cow', 'horse']

library = [['desk', 'chair', 'lamp'],
           ['cow', 'horse', 'word 223', 'barn']]

hits = [l for l in library if 
        all(any(t in s for s in l) 
            for t in search_terms)]
</snippet></ROW><ROW><id>20869601</id><snippet>for</snippet></ROW><ROW><id>20869601</id><snippet>l</snippet></ROW><ROW><id>20869601</id><snippet>library</snippet></ROW><ROW><id>20869601</id><snippet>for</snippet></ROW><ROW><id>20869601</id><snippet>all</snippet></ROW><ROW><id>20869601</id><snippet>t</snippet></ROW><ROW><id>20869601</id><snippet>search_terms</snippet></ROW><ROW><id>20869601</id><snippet>if</snippet></ROW><ROW><id>20869601</id><snippet>any</snippet></ROW><ROW><id>20869601</id><snippet>s</snippet></ROW><ROW><id>20869601</id><snippet>l</snippet></ROW><ROW><id>20869601</id><snippet>l</snippet></ROW><ROW><id>20869601</id><snippet>hits</snippet></ROW><ROW><id>20869663</id><snippet>parser.parse</snippet></ROW><ROW><id>20869663</id><snippet>dateutil</snippet></ROW><ROW><id>20869663</id><snippet>import feedparser
from dateutil import parser, tz

url = 'http://stackoverflow.com/feeds/tag/python'
feed = feedparser.parse(url)
published = feed.entries[0].published
dt = parser.parse(published)

print(published)
print(dt) # that is timezone aware
print(dt.utcoffset()) # time zone of time
print(dt.astimezone(tz.tzutc())) # that is timezone aware as UTC

2012-11-28T19:07:32Z
2012-11-28 19:07:32+00:00
0:00:00
2012-11-28 19:07:32+00:00
</snippet></ROW><ROW><id>20869663</id><snippet>published</snippet></ROW><ROW><id>20869663</id><snippet>Z</snippet></ROW><ROW><id>20869663</id><snippet>Atom 1.0 states that all date elements “MUST conform to the date-time 
production in RFC 3339. 
In addition, an uppercase T character MUST be used to separate date and time, 
and an uppercase Z character MUST be present in the absence of 
a numeric time zone offset.”
</snippet></ROW><ROW><id>20869663</id><snippet>import feedparser
from dateutil import parser, tz

url = 'http://omidraha.com/rss/'
feed = feedparser.parse(url)
published = feed.entries[0].published
dt = parser.parse(published)

print(published)
print(dt) # that is timezone aware
print(dt.utcoffset()) # time zone of time
print(dt.astimezone(tz.tzutc())) # that is timezone aware as UTC

Thu, 26 Dec 2013 14:24:04 +0330
2013-12-26 14:24:04+03:30
3:30:00
2013-12-26 10:54:04+00:00
</snippet></ROW><ROW><id>20869690</id><snippet>object.__nonzero__</snippet></ROW><ROW><id>20869690</id><snippet>class FunkyList(list):
    def __nonzero__(self):
        if self.__len__() == 0:
            return True
        else:
            return self.__len__()

    __bool__ = __nonzero__ # Python 3 uses __bool__ instead of __nonzero
</snippet></ROW><ROW><id>20869690</id><snippet>class FunkyList(list):
    def __nonzero__(self):
        return True

    __bool__ = __nonzero__ # Python 3 uses __bool__ instead of __nonzero
</snippet></ROW><ROW><id>20869690</id><snippet>&gt;&gt;&gt; fl = FunkyList()
&gt;&gt;&gt; fl
[]
&gt;&gt;&gt; isinstance(fl, list)
True
</snippet></ROW><ROW><id>20869690</id><snippet>&gt;&gt;&gt; bool(fl)
True
</snippet></ROW><ROW><id>20869690</id><snippet>__len__</snippet></ROW><ROW><id>20869690</id><snippet>&gt;&gt;&gt; len(fl)
0
</snippet></ROW><ROW><id>20869690</id><snippet>&gt;&gt;&gt; if fl:
...     print True
... 
True
</snippet></ROW><ROW><id>20869983</id><snippet>pip</snippet></ROW><ROW><id>20869983</id><snippet>/usr/local/bin/pip</snippet></ROW><ROW><id>20869983</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>20869983</id><snippet>$HOME/.local/usr/local/bin</snippet></ROW><ROW><id>20869983</id><snippet>.bashrc</snippet></ROW><ROW><id>20870005</id><snippet>/n</snippet></ROW><ROW><id>20870005</id><snippet>process = subprocess.Popen([path_to_acrobat, '/n', '/A', 'page=' + page, path_to_pdf], shell=False, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>20870094</id><snippet>title</snippet></ROW><ROW><id>20870094</id><snippet>title</snippet></ROW><ROW><id>20870094</id><snippet>Post</snippet></ROW><ROW><id>20870094</id><snippet>title</snippet></ROW><ROW><id>20870094</id><snippet>models.CharField()</snippet></ROW><ROW><id>20870094</id><snippet>Post</snippet></ROW><ROW><id>20870094</id><snippet>Post</snippet></ROW><ROW><id>20870094</id><snippet>title</snippet></ROW><ROW><id>20870094</id><snippet>p = Post(title='Some title')
print p.title  # prints 'Some title'
</snippet></ROW><ROW><id>20870094</id><snippet>title</snippet></ROW><ROW><id>20870094</id><snippet>Post.title</snippet></ROW><ROW><id>20870094</id><snippet>title</snippet></ROW><ROW><id>20870094</id><snippet>ClassOne().v</snippet></ROW><ROW><id>20870094</id><snippet>ClassOne.v</snippet></ROW><ROW><id>20870094</id><snippet>v</snippet></ROW><ROW><id>20870226</id><snippet>for l in range(0, int(len(data) / 1000)):  # if you have 3000 probes you need 3 "gaps"
    t = int(random.random(0, len(data)))  # let's retrieve a random index for each gap
    data["Signal_P/2a-1"][t] = None  # and let's empty it.
    data["Signal_P/2a-2"][t] = None
    data["Signal_P/2a-3"][t] = None
    data["Signal_P/4a-1"][t] = None
    data["Signal_P/4a-3"][t] = None
    data["Signal_P/8a-1"][t] = None
    data["Signal_P/8a-2"][t] = None
    data["Signal_P/8a-3"][t] = None
</snippet></ROW><ROW><id>20870656</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>20870656</id><snippet>Deferred</snippet></ROW><ROW><id>20870656</id><snippet>inlineCallbacks</snippet></ROW><ROW><id>20870656</id><snippet>twisted.spread.util</snippet></ROW><ROW><id>20870757</id><snippet>\n</snippet></ROW><ROW><id>20870757</id><snippet>print '\n' + second_name
</snippet></ROW><ROW><id>20870816</id><snippet>def press_Z():
    while True:
        user_input = raw_input("Type Z to continue: ")
        if user_input == "Z":
            break

print "Dialogue 1"
press_Z()
print "Dialogue 2"
</snippet></ROW><ROW><id>20870816</id><snippet>&gt;&gt;&gt; 
Dialogue 1
Type Z to continue: Z  # I pressed Z then Enter
Dialogue 2
</snippet></ROW><ROW><id>20870828</id><snippet>for index in range(len(col)):
    lat, lon = col[index].split(",")
    print "lat=%s, lon=%s" % (lat, lon)
</snippet></ROW><ROW><id>20870900</id><snippet>env</snippet></ROW><ROW><id>20870900</id><snippet>Popen</snippet></ROW><ROW><id>20870900</id><snippet>env</snippet></ROW><ROW><id>20870900</id><snippet>import subprocess, os
my_env = os.environ.copy()
my_env["PATH"] = "/usr/sbin:/sbin:" + my_env["PATH"]
subprocess.Popen(my_command, env=my_env)
</snippet></ROW><ROW><id>20870944</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; table = np.array([[3.4, 2.5, 1.3], [24.5, 34.2, 4.5], [34.56, 0.5, 0.55]])
&gt;&gt;&gt; np.savetxt('output.dat', table, '%6.2f')
</snippet></ROW><ROW><id>20870944</id><snippet>  3.40   2.50   1.30
 24.50  34.20   4.50
 34.56   0.50   0.55
</snippet></ROW><ROW><id>20871082</id><snippet>for index in range(1, len(col)):
    print col[index]
</snippet></ROW><ROW><id>20871082</id><snippet>for column in col[1:]:
    print column
</snippet></ROW><ROW><id>20871082</id><snippet>it = iter(col)
next(it, None)  # skip first entry
for column in it:
    print column
</snippet></ROW><ROW><id>20871082</id><snippet>itertools.islice()</snippet></ROW><ROW><id>20871082</id><snippet>from itertools import islice

for column in islice(col, 1, None):
    print column
</snippet></ROW><ROW><id>20871400</id><snippet>someapp.django.apps</snippet></ROW><ROW><id>20871400</id><snippet>setuptools.find_packages()</snippet></ROW><ROW><id>20871400</id><snippet>setup(
    # ...
    packages=find_packages(),

    # ...
)
</snippet></ROW><ROW><id>20871470</id><snippet>char</snippet></ROW><ROW><id>20871470</id><snippet>s</snippet></ROW><ROW><id>20871470</id><snippet>s</snippet></ROW><ROW><id>20871470</id><snippet>value1, value2 = s.split('+')
result = int(value1) + int(value2)
</snippet></ROW><ROW><id>20871470</id><snippet>for</snippet></ROW><ROW><id>20871470</id><snippet>for i in range(len(s)):
    if s[i] == '+':
        value1 = s[:i]
        value2 = s[i + 1:]
        break
else:
    print('Cannot separate the string')
</snippet></ROW><ROW><id>20871470</id><snippet>str.find()</snippet></ROW><ROW><id>20871470</id><snippet>index = s.find('+')
if index &gt; -1:
    value1 = s[:i]
    value2 = s[i + 1:]
else:
    print('Cannot separate the string')
</snippet></ROW><ROW><id>20871615</id><snippet>sys.argv</snippet></ROW><ROW><id>20871615</id><snippet>import sys

with open(sys.argv[1]) as fh:
    for line in fh:
        if "admin_" in line:
            print(line)
</snippet></ROW><ROW><id>20871615</id><snippet>python scriptname.py C:\Web_logs\ex130801.txt
</snippet></ROW><ROW><id>20871615</id><snippet>input()</snippet></ROW><ROW><id>20871615</id><snippet>filename = input('Please enter a filename: ')    
with open(filename) as fh:
    for line in fh:
        if "admin_" in line:
            print(line)
</snippet></ROW><ROW><id>20871806</id><snippet>&gt;&gt;&gt; print var
</snippet></ROW><ROW><id>20871806</id><snippet>__str__</snippet></ROW><ROW><id>20871806</id><snippet>var</snippet></ROW><ROW><id>20871806</id><snippet>&gt;&gt;&gt;&gt; var
</snippet></ROW><ROW><id>20871806</id><snippet>__repr__</snippet></ROW><ROW><id>20871806</id><snippet>var</snippet></ROW><ROW><id>20871806</id><snippet>__repr__</snippet></ROW><ROW><id>20871806</id><snippet>var</snippet></ROW><ROW><id>20871806</id><snippet>__repr__</snippet></ROW><ROW><id>20871806</id><snippet>__repr__</snippet></ROW><ROW><id>20871806</id><snippet>__str__</snippet></ROW><ROW><id>20871806</id><snippet>&gt;&gt;&gt; ciphertext</snippet></ROW><ROW><id>20871806</id><snippet>print</snippet></ROW><ROW><id>20872152</id><snippet>    effect = QtGui.QGraphicsDropShadowEffect(button)
    effect.setOffset(0, 0)
    effect.setBlurRadius(20)
    button.setGraphicsEffect(effect)
</snippet></ROW><ROW><id>20872193</id><snippet>'aBc'</snippet></ROW><ROW><id>20872193</id><snippet>'ABCaBcabcAbC'</snippet></ROW><ROW><id>20872193</id><snippet>&gt;&gt;&gt; s = 'ABCaBcabcAbC'
&gt;&gt;&gt; find = 'aBc'
&gt;&gt;&gt; s.replace(find, find.lower())
'ABCabcabcAbC'
</snippet></ROW><ROW><id>20872193</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r'{}'.format(re.escape(find)), lambda m:m.group().lower(), s)
'ABCabcabcAbC'
</snippet></ROW><ROW><id>20872193</id><snippet>\b{}\b.format(find)</snippet></ROW><ROW><id>20872340</id><snippet>z = y.reshape(-1, p)
w = z/z.mean(axis=1).reshape(-1,1)
print w.flatten()
# [ 1.34562212  0.88479263  0.5437788   1.22580645  1.31506849  0.86986301
#   0.54109589  1.2739726   1.46236559  0.83333333  0.52688172  1.17741935]
</snippet></ROW><ROW><id>20872340</id><snippet>b</snippet></ROW><ROW><id>20872340</id><snippet>print w.mean(axis=0)
# [ 1.37435207,  0.86266299,  0.53725214,  1.2257328 ]
</snippet></ROW><ROW><id>20872340</id><snippet>pandas</snippet></ROW><ROW><id>20872340</id><snippet>statsmodels</snippet></ROW><ROW><id>20872416</id><snippet>sorted</snippet></ROW><ROW><id>20872416</id><snippet>&gt;&gt;&gt; seq = ['b', 'a', 3, 'd', 'c']
&gt;&gt;&gt; try:
...     seq = sorted(seq) # if sorted fails, result won't be assigned
... except Exception: # you may only want TypeError
...     pass
...
&gt;&gt;&gt; seq 
['b', 'a', 3, 'd', 'c'] # list unmodified
</snippet></ROW><ROW><id>20872416</id><snippet>A</snippet></ROW><ROW><id>20872416</id><snippet>B</snippet></ROW><ROW><id>20872416</id><snippet>__lt__</snippet></ROW><ROW><id>20872416</id><snippet>list.sort()</snippet></ROW><ROW><id>20872416</id><snippet>class A:
    def __init__(self, value):
        self.a = value

    def __lt__(self, other):
        if isinstance(other, B):
            return self.a &lt; other.b
        else:
            return self.a &lt; other.a

    def __repr__(self):
        return repr(self.a)

class B:
    def __init__(self, value):
        self.b = value

    def __lt__(self, other):
        if isinstance(other, A):
            return self.b &lt; other.a
        else:
            return self.b &lt; other.b

    def __repr__(self):
        return repr(self.b)

seq = [A(10), B(2), A(8), B(16), B(9)]
seq.sort()
print(seq)
</snippet></ROW><ROW><id>20872416</id><snippet>[2, 8, 9, 10, 16]
</snippet></ROW><ROW><id>20872416</id><snippet>list.sort()</snippet></ROW><ROW><id>20872523</id><snippet>output = [] # lines to keep; empty for now

with open("asd.txt", 'r') as f: # use with to handle file open/close

    for line in f: # iterate through lines

        line = line.strip().split() # split the line once

        if any(int(line[1]) &lt;= n &lt;= int(line[2]) for n in lst): # check

            output.append(line[:]) # add copy to output

# use lines in output
</snippet></ROW><ROW><id>20872523</id><snippet>line</snippet></ROW><ROW><id>20872523</id><snippet>split()</snippet></ROW><ROW><id>20872523</id><snippet>list</snippet></ROW><ROW><id>20872523</id><snippet>str</snippet></ROW><ROW><id>20872523</id><snippet>output == [['SPAC212.07c', '13665', '14555', '1'], ...]
</snippet></ROW><ROW><id>20872827</id><snippet>import Xlib.threaded
</snippet></ROW><ROW><id>20872980</id><snippet>from django.db.models import Count

board_list = Board.objects.annotate(num_posts=Count('post')).order_by('num_posts')
</snippet></ROW><ROW><id>20873190</id><snippet>from pylab import *

# define some grids
xgrid = arange(20, 31) 
ygrid = arange(10, 16)

xscan = []
yscan = []

for i, yi in enumerate(ygrid):
    xscan.append(xgrid[::(-1)**i]) # reverse when i is odd
    yscan.append(ones_like(xgrid) * yi)   

# squeeze lists together to vectors
xscan = concatenate(xscan)
yscan = concatenate(yscan)

# quick plot
plot(xscan, yscan, '.-')
axis([19, 31, 9, 16])
show()
</snippet></ROW><ROW><id>20873190</id><snippet>xgrid[::1]</snippet></ROW><ROW><id>20873190</id><snippet>xgrid[::-1]</snippet></ROW><ROW><id>20873190</id><snippet>+1</snippet></ROW><ROW><id>20873190</id><snippet>-1</snippet></ROW><ROW><id>20873190</id><snippet>(-1)**i</snippet></ROW><ROW><id>20873190</id><snippet>repeat</snippet></ROW><ROW><id>20873190</id><snippet>xscan = concatenate([xgrid[::(-1)**i] for i in range(len(ygrid))])
yscan = repeat(ygrid, len(xgrid))
</snippet></ROW><ROW><id>20873381</id><snippet>self</snippet></ROW><ROW><id>20873381</id><snippet>Listbox.__init__</snippet></ROW><ROW><id>20873381</id><snippet>Listbox.__init__(self, master, width=60)
</snippet></ROW><ROW><id>20873433</id><snippet>peek</snippet></ROW><ROW><id>20873639</id><snippet>Len=Len + lenRecur(aStr[n+1:])
</snippet></ROW><ROW><id>20873931</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>20873931</id><snippet>subprocess.Popen("python &lt;path to .py file&gt;")
</snippet></ROW><ROW><id>20873931</id><snippet>os.system</snippet></ROW><ROW><id>20873931</id><snippet>os.system("python &lt;path to .py file&gt;")
</snippet></ROW><ROW><id>20873931</id><snippet>run.py</snippet></ROW><ROW><id>20873931</id><snippet>from run1 import *
from run2 import *
</snippet></ROW><ROW><id>20873931</id><snippet>run1</snippet></ROW><ROW><id>20873931</id><snippet>run2</snippet></ROW><ROW><id>20873931</id><snippet>run.py</snippet></ROW><ROW><id>20873950</id><snippet>p = /\D/g;
s.replace(p, '');
</snippet></ROW><ROW><id>20874129</id><snippet>return HttpResponseRedirect('/url/url1/')
</snippet></ROW><ROW><id>20874129</id><snippet>from django.http import HttpResponse
</snippet></ROW><ROW><id>20874564</id><snippet>%s</snippet></ROW><ROW><id>20874564</id><snippet>whichCustomer = 1934
qry = ("SELECT * FROM customers WHERE customerid = %s")
cursor.execute(qry, (whichCustomer,))
</snippet></ROW><ROW><id>20874564</id><snippet>1934</snippet></ROW><ROW><id>20874564</id><snippet>%s</snippet></ROW><ROW><id>20874632</id><snippet>(?:...)</snippet></ROW><ROW><id>20874632</id><snippet>(...)</snippet></ROW><ROW><id>20874632</id><snippet>|</snippet></ROW><ROW><id>20874632</id><snippet>b</snippet></ROW><ROW><id>20874632</id><snippet>_</snippet></ROW><ROW><id>20874632</id><snippet>.</snippet></ROW><ROW><id>20874632</id><snippet>/</snippet></ROW><ROW><id>20874632</id><snippet>-</snippet></ROW><ROW><id>20874632</id><snippet>Test</snippet></ROW><ROW><id>20874632</id><snippet>test</snippet></ROW><ROW><id>20874632</id><snippet>b</snippet></ROW><ROW><id>20874632</id><snippet>'bTest'</snippet></ROW><ROW><id>20874632</id><snippet>/Test</snippet></ROW><ROW><id>20874632</id><snippet>&gt;&gt;&gt; pattern = re.compile(r'(?:^|[b_./-])[Tt]est')
&gt;&gt;&gt; pattern.search('Test').group()
'Test'
&gt;&gt;&gt; pattern.search('Hello bTest').group()
'bTest'
&gt;&gt;&gt; pattern.search('Hello /Test').group()
'/Test'
</snippet></ROW><ROW><id>20874632</id><snippet>b</snippet></ROW><ROW><id>20874632</id><snippet>b</snippet></ROW><ROW><id>20874632</id><snippet>\b</snippet></ROW><ROW><id>20874632</id><snippet>r'(?:^|[\b_\.%s-])[Tt]est' % os.sep)
</snippet></ROW><ROW><id>20874632</id><snippet>\b</snippet></ROW><ROW><id>20874632</id><snippet>test</snippet></ROW><ROW><id>20874632</id><snippet>Test</snippet></ROW><ROW><id>20874632</id><snippet>\b</snippet></ROW><ROW><id>20874632</id><snippet>\b</snippet></ROW><ROW><id>20874861</id><snippet>blah</snippet></ROW><ROW><id>20874861</id><snippet>test</snippet></ROW><ROW><id>20874861</id><snippet>blah</snippet></ROW><ROW><id>20874861</id><snippet>class Blah(object): # following Python naming conventions, capitalize the class 
    def test(self):
        print 'test'

# now this won't shadow the class definition.
blah = Blah() #global

# you have to be able to differentiate between the function's scope
# and global.  If you name the parameter blah, you cannot access the 
# blah in the global scope.  I renamed it some_blah.
def test(some_blah='test')
    print some_blah
    print 'test 2:' + blah.test()

test()
</snippet></ROW><ROW><id>20874936</id><snippet>class Post(models.Model):
    ...
    def save(self, *args, **kwargs):
       if not self.pk:
         #tweet about the post
       super(Post, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>20874936</id><snippet>save_model()</snippet></ROW><ROW><id>20874936</id><snippet>ModelAdmin</snippet></ROW><ROW><id>20874936</id><snippet>class PostAdmin(admin.ModelAdmin):
   ....
   def save_model(self, request, obj, form, change):
      if not obj.pk:
         #tweet about the post
      obj.save()
</snippet></ROW><ROW><id>20875152</id><snippet>#!/usr/local/cpython-3.3/bin/python

import pprint

def recursive_remover(unwanted_keys, dictionary):
    for key, value in list(dictionary.items()):
        if isinstance(value, dict):
            recursive_remover(unwanted_keys, value)

        if key in unwanted_keys:
            del dictionary[key]

def main():
    mydict={'user': {'key1':'12','key2':'20','key3':30},
           'status':{'newk':'12','user':{'key1':'12','key2':'20','key3':30}}}

    unwanted_keys = { 'key1', 'key2' }

    recursive_remover(unwanted_keys, mydict)

    pprint.pprint(mydict)

main()
</snippet></ROW><ROW><id>20875172</id><snippet>+</snippet></ROW><ROW><id>20875172</id><snippet>s = ""
s = s + "some string"
print s

&gt;&gt;&gt; "some string"
</snippet></ROW><ROW><id>20875197</id><snippet>self.con.cursor</snippet></ROW><ROW><id>20875197</id><snippet>cursor</snippet></ROW><ROW><id>20875197</id><snippet>getListS</snippet></ROW><ROW><id>20875197</id><snippet>cursor = self.cursor()
cursor.execute("select * ...")
</snippet></ROW><ROW><id>20875300</id><snippet>[[]] * 5</snippet></ROW><ROW><id>20875300</id><snippet>&gt;&gt;&gt; b = [[]] *5

&gt;&gt;&gt; b
[[], [], [], [], []]

&gt;&gt;&gt; id(b[0])
140588316211896

&gt;&gt;&gt; id(b[1])
140588316211896
</snippet></ROW><ROW><id>20875300</id><snippet>&gt;&gt;&gt; b = [[] for i in range(5)]
&gt;&gt;&gt; b[0].append('abc')
&gt;&gt;&gt; b
[['abc'], [], [], [], []]
</snippet></ROW><ROW><id>20875300</id><snippet>[[] for i in range(5)]</snippet></ROW><ROW><id>20875300</id><snippet>O(n)</snippet></ROW><ROW><id>20875300</id><snippet>O(1)</snippet></ROW><ROW><id>20875357</id><snippet>mongotop</snippet></ROW><ROW><id>20875357</id><snippet>testCollection.oooc</snippet></ROW><ROW><id>20875357</id><snippet>mongostat</snippet></ROW><ROW><id>20875357</id><snippet>mongostat</snippet></ROW><ROW><id>20875357</id><snippet>data</snippet></ROW><ROW><id>20875357</id><snippet>docExist.count</snippet></ROW><ROW><id>20875859</id><snippet>SequenceMatcher</snippet></ROW><ROW><id>20875859</id><snippet>autojunk</snippet></ROW><ROW><id>20875946</id><snippet>readlines()</snippet></ROW><ROW><id>20875946</id><snippet>client1
client2
client3
</snippet></ROW><ROW><id>20875946</id><snippet>clients = [i.strip() for i in f.readlines()]</snippet></ROW><ROW><id>20875946</id><snippet>OptionMenu</snippet></ROW><ROW><id>20875946</id><snippet>w = OptionMenu(master, variable, *clients)
</snippet></ROW><ROW><id>20875946</id><snippet>import re
data = f.read()  # ["client1", "client2", "client3"]
data = re.sub('["\[\]]', '', data)  # remove the ", [, and ] characters
clients = data.split(',')  # split the list of clients on the comma
</snippet></ROW><ROW><id>20875981</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>20876107</id><snippet>str.join</snippet></ROW><ROW><id>20876107</id><snippet>&gt;&gt;&gt; ''.join(['I ', u'&lt;', '3s U ', u'&amp;', ' you luvz me'])
u'I &lt;3s U &amp; you luvz me'
</snippet></ROW><ROW><id>20876107</id><snippet>lxml</snippet></ROW><ROW><id>20876107</id><snippet>&gt;&gt;&gt; import lxml.html
&gt;&gt;&gt; n = "&lt;strong&gt;I &lt;3s U &amp; you luvz me&lt;/strong&gt;"
&gt;&gt;&gt; root = lxml.html.fromstring(n)
&gt;&gt;&gt; root.text_content()
'I &lt;3s U &amp; you luvz me'
</snippet></ROW><ROW><id>20876265</id><snippet>psycopg2</snippet></ROW><ROW><id>20876265</id><snippet>pyformat</snippet></ROW><ROW><id>20876265</id><snippet>&gt;&gt;&gt; import psycopg2
&gt;&gt;&gt; psycopg2.paramstyle
'pyformat'
</snippet></ROW><ROW><id>20876265</id><snippet>?</snippet></ROW><ROW><id>20876265</id><snippet>%s</snippet></ROW><ROW><id>20876265</id><snippet>paramstyle</snippet></ROW><ROW><id>20876346</id><snippet>&gt;&gt;&gt; df
      0         1   2
0  2013  string A  13
1  2013  string A  14
2  2013  string B  13
3  2013  string C  12
4  2013  string A  11
5  2013  string B  11

[6 rows x 3 columns]
</snippet></ROW><ROW><id>20876346</id><snippet>.unique()</snippet></ROW><ROW><id>20876346</id><snippet>&gt;&gt;&gt; df[1].unique()
array(['string A', 'string B', 'string C'], dtype=object)
</snippet></ROW><ROW><id>20876346</id><snippet>.loc</snippet></ROW><ROW><id>20876346</id><snippet>&gt;&gt;&gt; df.loc[df[1] == "string A"]
      0         1   2
0  2013  string A  13
1  2013  string A  14
4  2013  string A  11

[3 rows x 3 columns]
</snippet></ROW><ROW><id>20876346</id><snippet>groupby</snippet></ROW><ROW><id>20876346</id><snippet>1</snippet></ROW><ROW><id>20876346</id><snippet>&gt;&gt;&gt; grouped = df.groupby(1)
&gt;&gt;&gt; for k,g in grouped:
...     print k
...     print g
...     
string A
      0         1   2
0  2013  string A  13
1  2013  string A  14
4  2013  string A  11

[3 rows x 3 columns]
string B
      0         1   2
2  2013  string B  13
5  2013  string B  11

[2 rows x 3 columns]
string C
      0         1   2
3  2013  string C  12

[1 rows x 3 columns]
</snippet></ROW><ROW><id>20876397</id><snippet>import itertools
import string

for guess in itertools.product(string.lowercase, repeat=6):
    if checkguess(''.join(guess)):
        print("Password is: {0}".format(''.join(guess)))
</snippet></ROW><ROW><id>20876397</id><snippet>itertools.product</snippet></ROW><ROW><id>20876397</id><snippet>itertools</snippet></ROW><ROW><id>20876397</id><snippet>import string
from itertools import product, combinations, permutations

for guess_chars in combinations(string.lowercase, 4):
    for doubled_chars in combinations(guess_chars, 2):
        for guess in permutations(guess_chars + doubled_chars):
            #...
</snippet></ROW><ROW><id>20876481</id><snippet>setup-windows.py</snippet></ROW><ROW><id>20876481</id><snippet>setup.py</snippet></ROW><ROW><id>20876481</id><snippet>python setup-windows.py install
</snippet></ROW><ROW><id>20876773</id><snippet>string@appid.appspotmail.com</snippet></ROW><ROW><id>20876773</id><snippet>myapp</snippet></ROW><ROW><id>20876773</id><snippet>abc@myapp.appspotmail.com</snippet></ROW><ROW><id>20877232</id><snippet>'it'</snippet></ROW><ROW><id>20877232</id><snippet>it</snippet></ROW><ROW><id>20877232</id><snippet>reversed(it)</snippet></ROW><ROW><id>20877232</id><snippet>reverse</snippet></ROW><ROW><id>20877232</id><snippet>__reversed__</snippet></ROW><ROW><id>20877232</id><snippet>reversed</snippet></ROW><ROW><id>20877232</id><snippet>it</snippet></ROW><ROW><id>20877232</id><snippet>rev = reversed(it)</snippet></ROW><ROW><id>20877232</id><snippet>rev</snippet></ROW><ROW><id>20877391</id><snippet>nltk.probability.FreqDist</snippet></ROW><ROW><id>20877391</id><snippet>collections.Counter</snippet></ROW><ROW><id>20877391</id><snippet>items</snippet></ROW><ROW><id>20877391</id><snippet>&gt;&gt;&gt; from nltk.probability import FreqDist
&gt;&gt;&gt; dist = FreqDist([1, 2, 1, 2, 1])
&gt;&gt;&gt; dist.items()
[(1, 3), (2, 2)]
</snippet></ROW><ROW><id>20877391</id><snippet>collections.Counter</snippet></ROW><ROW><id>20877391</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter([1, 2, 1, 2, 1])
&gt;&gt;&gt; c.most_common()
[(1, 3), (2, 2)]
</snippet></ROW><ROW><id>20877799</id><snippet>{4,40}</snippet></ROW><ROW><id>20877799</id><snippet>.{4,40}
</snippet></ROW><ROW><id>20877799</id><snippet>(?:(?![A-Z]{4}).){4,40}
</snippet></ROW><ROW><id>20877799</id><snippet>(?! ... )</snippet></ROW><ROW><id>20877799</id><snippet>(?![A-Z]{4})</snippet></ROW><ROW><id>20877799</id><snippet>.</snippet></ROW><ROW><id>20877799</id><snippet>w(?!o)
</snippet></ROW><ROW><id>20877799</id><snippet>w</snippet></ROW><ROW><id>20877799</id><snippet>o</snippet></ROW><ROW><id>20877799</id><snippet>way</snippet></ROW><ROW><id>20877799</id><snippet>whole</snippet></ROW><ROW><id>20877799</id><snippet>below</snippet></ROW><ROW><id>20877799</id><snippet>w</snippet></ROW><ROW><id>20877799</id><snippet>word</snippet></ROW><ROW><id>20877799</id><snippet>(?![A-Z]{4}).</snippet></ROW><ROW><id>20877799</id><snippet>.</snippet></ROW><ROW><id>20877799</id><snippet>.</snippet></ROW><ROW><id>20877799</id><snippet>.</snippet></ROW><ROW><id>20877799</id><snippet>(?![A-Z]{4}).{4,40}</snippet></ROW><ROW><id>20877799</id><snippet>.</snippet></ROW><ROW><id>20877799</id><snippet>(?![A-Z]{4}).</snippet></ROW><ROW><id>20877799</id><snippet>((?![A-Z]{4}).){4,40}
</snippet></ROW><ROW><id>20877799</id><snippet>(?: ... )</snippet></ROW><ROW><id>20877799</id><snippet>(?:(?![A-Z]{4}).){4,40}
</snippet></ROW><ROW><id>20877968</id><snippet>your.autodiscover(__file__)</snippet></ROW><ROW><id>20877968</id><snippet>your.autodiscover(dirname(__file__))</snippet></ROW><ROW><id>20877968</id><snippet>autodiscover</snippet></ROW><ROW><id>20877997</id><snippet>s = struct.unpack('IL3f3f3f512s3f')
name = s[11].decode('utf-16')
camera_pos_x,camera_pos_y,camera_pos_z = s[12:15]
</snippet></ROW><ROW><id>20878374</id><snippet>min</snippet></ROW><ROW><id>20878374</id><snippet>max</snippet></ROW><ROW><id>20878684</id><snippet>class PresetList(models.Model):
    VIEWS = (
        ('1', 'X'),
        ('2', 'Y'),
    )
    query_choice = forms.ChoiceField(choices=VIEWS)
</snippet></ROW><ROW><id>20878684</id><snippet>from django.forms import ModelForm
from . import models

class PresetListForm(ModelForm):
    class Meta:
        model = models.PresetList
</snippet></ROW><ROW><id>20878684</id><snippet>from . import forms

def my_view(request):

    preset_form = forms.PresetListForm()

    return render_to_response('services.html', {
        'array': json.dumps(data, cls=SpecialEncoder),
        'preset_form': preset_form,
    })
</snippet></ROW><ROW><id>20878684</id><snippet>&lt;form method=POST action="/somewhere"&gt;
    {{ preset_form.as_p }}
&lt;/form&gt;
</snippet></ROW><ROW><id>20878978</id><snippet>purchase_view.xml</snippet></ROW><ROW><id>20878978</id><snippet>&lt;record id="purchase_order_form_inherit" model="ir.ui.view"&gt;
    &lt;field name="name"&gt;purchase.order.form.inherit&lt;/field&gt;
    &lt;field name="model"&gt;purchase.order&lt;/field&gt;
    &lt;field name="inherit_id" ref="purchase.purchase_order_form" /&gt;
    &lt;field name="arch" type="xml"&gt;
        &lt;xpath expr="//field[@name='order_line']/tree" position='replace'&gt;
            &lt;tree string="Purchase Order Lines"&gt;
                &lt;field name="product_id"
                    on_change="onchange_product_id(parent.pricelist_id,product_id,0,product_uom,parent.partner_id, parent.date_order,parent.fiscal_position,date_planned,name,price_unit,context)" /&gt;
                &lt;field name="name" /&gt;
                &lt;field name="date_planned" /&gt;
                &lt;field name="company_id" groups="base.group_multi_company"
                    widget="selection" /&gt;
                &lt;field name="account_analytic_id" groups="purchase.group_analytic_accounting"
                    domain="[('type','not in',('view','template'))]" /&gt;
                &lt;field name="product_qty"
                    on_change="onchange_product_id(parent.pricelist_id,product_id,product_qty,product_uom,parent.partner_id,parent.date_order,parent.fiscal_position,date_planned,name,price_unit,context)" /&gt;
                &lt;field name="product_uom" groups="product.group_uom"
                    on_change="onchange_product_uom(parent.pricelist_id,product_id,product_qty,product_uom,parent.partner_id, parent.date_order,parent.fiscal_position,date_planned,name,price_unit,context)" /&gt;
                &lt;field name="price_unit" /&gt;
                &lt;field name="taxes_id" widget="many2many_tags"
                    domain="[('parent_id','=',False),('type_tax_use','!=','sale')]" /&gt;
                &lt;field name="price_subtotal" /&gt;
            &lt;/tree&gt;
        &lt;/xpath&gt;
    &lt;/field&gt;
&lt;/record&gt;
</snippet></ROW><ROW><id>20878978</id><snippet>&lt;tree string="Purchase Order Lines" editable="bottom"&gt;
</snippet></ROW><ROW><id>20878978</id><snippet>&lt;tree string="Purchase Order Lines"&gt;
</snippet></ROW><ROW><id>20879506</id><snippet>os.walk</snippet></ROW><ROW><id>20879506</id><snippet>from os import walk, sep
from functools import reduce # in Python 3.x only

def get_filelist(root, extensions=None):
    """Return a list of files (path and name) within a supplied root directory.

    To filter by extension(s), provide a list of strings, e.g.

        get_filelist(root, ["zip", "csv"])

    """
    return reduce(lambda x, y: x+y,
                  [[sep.join([item[0], name]) for name in item[2]
                    if (extensions is None or
                        name.split(".")[-1] in extensions)]
                   for item in walk(root)])
</snippet></ROW><ROW><id>20879612</id><snippet>hmac</snippet></ROW><ROW><id>20879612</id><snippet>&gt;&gt;&gt; import hmac
&gt;&gt;&gt; hmac.new("9T5zhB4sTNGxMJ-iDdO-Ow"+"8rdp7erdig0m6aa72lhanvuk01"+"pizza1", "1387797294").hexdigest()
'9036a1a3f654aefeab426e9f7e17288e'
</snippet></ROW><ROW><id>20879612</id><snippet>&gt;&gt;&gt; import md5
&gt;&gt;&gt; md5.new("1387797294" + "9T5zhB4sTNGxMJ-iDdO-Ow"+"8rdp7erdig0m6aa72lhanvuk01"+"pizza1").hexdigest()
'8280c9a3804b53792324b62363fc22fd'
</snippet></ROW><ROW><id>20879612</id><snippet>string key = "9T5zhB4sTNGxMJ-iDdO-Ow" + "8rdp7erdig0m6aa72lhanvuk01" + "pizza1";
string message = "1387797294";

var encoding = Encoding.UTF8;
var md = System.Security.Cryptography.MD5CryptoServiceProvider.Create();
var trans_5C = new byte[64];
var trans_36 = new byte[64];

var b_key = encoding.GetBytes(key);
// TODO: also check if key is to short
if (b_key.Length &gt; 64)
    b_key = md.ComputeHash(b_key);

for (int i = 0; i &lt; 64; i++)
{
    trans_5C[i] = 92;
    trans_36[i] = 54;
    if (i &lt; key.Length)
    {
        trans_5C[i] ^= b_key[i];
        trans_36[i] ^= b_key[i];
    }
}

byte[] inner = md.ComputeHash(trans_36.Concat(encoding.GetBytes(message)).ToArray());
var hash = md.ComputeHash(trans_5C.Concat(inner).ToArray());

StringBuilder sb = new StringBuilder();
foreach (byte b in hash)
    sb.Append(b.ToString("x2"));
var result = sb.ToString(); // = 9036a1a3f654aefeab426e9f7e17288e
</snippet></ROW><ROW><id>20880386</id><snippet>urlparse</snippet></ROW><ROW><id>20880386</id><snippet>&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; urlparse.urlparse('http://python.org')
ParseResult(scheme='http', netloc='python.org', path='', params='', query='', fragment='')
&gt;&gt;&gt; urlparse.urlparse('http://python.org').netloc
'python.org'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20880813</id><snippet>action = {'newChannel': (newChannel, (hname, cname)),
          'newNetwork': (newNetwork, (cname,)),
          'loginError': (loginError, (nName,))}

handler, params = action.get(eventType)
handler(*params)
</snippet></ROW><ROW><id>20881316</id><snippet>Utils.Utils.hello()</snippet></ROW><ROW><id>20881316</id><snippet>from Utils import Utils</snippet></ROW><ROW><id>20881385</id><snippet>host = 'LDAP://10.172.0.79/dc=directory,dc=example,dc=com'
</snippet></ROW><ROW><id>20881385</id><snippet>unicode_pass</snippet></ROW><ROW><id>20881385</id><snippet>ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_NEVER)
l = ldap.initialize("LDAPS://10.172.0.79:636")
l.set_option(ldap.OPT_REFERRALS, 0)
l.set_option(ldap.OPT_PROTOCOL_VERSION, 3)
l.set_option(ldap.OPT_X_TLS,ldap.OPT_X_TLS_DEMAND)
l.set_option( ldap.OPT_X_TLS_DEMAND, True )
l.set_option( ldap.OPT_DEBUG_LEVEL, 255 )
l.simple_bind_s("admin@tester.com","password")
</snippet></ROW><ROW><id>20881509</id><snippet>matplotlib</snippet></ROW><ROW><id>20881509</id><snippet>Qt4</snippet></ROW><ROW><id>20881509</id><snippet>youchart.axes.set_visible(False)</snippet></ROW><ROW><id>20881509</id><snippet>yourchart.axes.set_visible(True)</snippet></ROW><ROW><id>20881666</id><snippet>__implements__</snippet></ROW><ROW><id>20881666</id><snippet>class Dog(object):
    __implements__ = (IWalk, IRun, IMakeASound)
</snippet></ROW><ROW><id>20881666</id><snippet>MyInterface</snippet></ROW><ROW><id>20881666</id><snippet>MyInterface</snippet></ROW><ROW><id>20881666</id><snippet>MyClass</snippet></ROW><ROW><id>20881666</id><snippet>MyInterface</snippet></ROW><ROW><id>20881666</id><snippet>MyClass</snippet></ROW><ROW><id>20881666</id><snippet>MyInterface</snippet></ROW><ROW><id>20881666</id><snippet>MyInterface</snippet></ROW><ROW><id>20881666</id><snippet>MyInterface</snippet></ROW><ROW><id>20881666</id><snippet>MyClass</snippet></ROW><ROW><id>20881666</id><snippet>MyInterface</snippet></ROW><ROW><id>20881666</id><snippet>MyClass</snippet></ROW><ROW><id>20881666</id><snippet>import abc


class MyInterface(object):
    """docstring for MyInterface"""

    __metaclass__ = abc.ABCMeta

    def __init__(self, arg):
        self.arg = arg

    @abc.abstractmethod
    def test(self):
        pass


class MyClass(MyInterface):
    """docstring for MyClass"""
    def __init__(self, arg):
        super(MyClass, self).__init__(arg)

    def test(self):
        """docstring for test"""
        print self.arg

class MyImplementation(object):
    __implements__ = (MyClass, )
</snippet></ROW><ROW><id>20881720</id><snippet>def prepare_args(ok, *args):
    return [arg(ok) if callable(arg) else arg for arg in args]

action = {
    'newChannel': (newChannel, (cName, hName, whatever,),
    'newNetwork': (newNetwork, (hName,)),
    'loginError': (loginError, (nName,))
    }

ok = parse_qsl(urlparse(u).query, keep_blank_values=True)
handler, args  = action.get(eventType(ok))
args = prepare_args(ok, *args)
handler(*args)
</snippet></ROW><ROW><id>20881720</id><snippet>class QueryHandler(object):
    def __init__(self, u):
        self.ok = parse_qsl(urlparse(u).query, keep_blank_values=True)

    def newNetwork(self):
         queue = j.queue(self.hName)
         r = queue.add_subscribers(subscriber1a)

    def newChannel(self):
          queue = j.queue(self.cName)
          r = queue.add_subscribers(
              subscriberCreateChanTable,
              subscriberSortScenes,
              self.hname
              )
          rd = self.time

    def loginError(self):
        pass


    @property
    def time(self):
        return whatever_time_is_supposed_to_be

    @property
    def hName(self):
        return self.ok[11][1]

    @property
    def cName(self):
        return self.ok[12][1]

    @property
    def nName(self):
        return self.ok[10][1]

    @property
    def eventType(self):
        return self.ok[9][1]


    actions = {
        'newChannel': newChannel,
        'newNetwork': newNetwork,
        'loginError': loginError,
        }

    def dispatch(self):
        handler  = self.actions.get(self.eventType)
        handler(self)
</snippet></ROW><ROW><id>20881766</id><snippet>lst = ['apple','cherry','coffee','apple','coffee','coffee']

res = {}
for obj in lst:
    if obj not in res:
        res[obj] = 0
    res[obj] += 1

print res
</snippet></ROW><ROW><id>20881914</id><snippet>monsters</snippet></ROW><ROW><id>20881914</id><snippet>troll</snippet></ROW><ROW><id>20881914</id><snippet>mon</snippet></ROW><ROW><id>20881914</id><snippet>mon</snippet></ROW><ROW><id>20881914</id><snippet>troll</snippet></ROW><ROW><id>20881914</id><snippet>if troll.collidesWith(monsters): # some monsters will need removing
    removals = []
    for mon in monsters: # figure out which
        if mon.collidesWith(GroupSingle(troll)):
            removals.append(mon)
    for mon in removals: # remove them
        mon.removeCharacter()
        screen.remove_character(mon)
</snippet></ROW><ROW><id>20882316</id><snippet>in</snippet></ROW><ROW><id>20882316</id><snippet>range3</snippet></ROW><ROW><id>20882316</id><snippet>number_list</snippet></ROW><ROW><id>20882316</id><snippet>randnum = random.randrange(1, 105) # no list, directly the number.

if randnum &lt; 76:
    return "normal_attack"
elif randnum &lt; 101:
    return "critical_attack"
else:
    return "missed_attack"
</snippet></ROW><ROW><id>20882334</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>20882334</id><snippet>from copy import deepcopy
y = deepcopy(x)
</snippet></ROW><ROW><id>20882334</id><snippet>list()</snippet></ROW><ROW><id>20882334</id><snippet>slice</snippet></ROW><ROW><id>20882334</id><snippet>x[:]</snippet></ROW><ROW><id>20882701</id><snippet>csv</snippet></ROW><ROW><id>20882701</id><snippet>import csv
with open('csv.csv') as text:
    table = list(csv.reader(text))

# get all dates (skipping first and last column)
dates = table[0][1:-1]

# get all shows (skipping first and last column and empty rows)
shows =  filter(''.join, (t[1:-1] for t in table[1:]))

# join dates and shows back together and do some formatting
for line in [zip(dates, s) for s in shows]:
    print ', '.join('{}, "{}"'.format(*t) for t in line)
</snippet></ROW><ROW><id>20882701</id><snippet>02/12/2013, "06:00 World Sport", 03/12/2013, "06:00 World Sport", 04/12/2013, "06:00 World Sport", 05/12/2013, "06:00 World Sport", 06/12/2013, "06:00 World Sport", 07/12/2013, "06:00 World Sport", 08/12/2013, "06:00 World Sport"
02/12/2013, "06:30 Inside Africa: November 29, 2013", 03/12/2013, "06:30 African Voices: Agatha Achindu", 04/12/2013, "06:30 Inside the Louvre", 05/12/2013, "06:30 Talk Asia: Franz Harary", 06/12/2013, "06:30 Blueprint", 07/12/2013, "06:30 Inside the Middle East", 08/12/2013, "06:30 CNNGo"
</snippet></ROW><ROW><id>20882733</id><snippet>getPrices()</snippet></ROW><ROW><id>20882733</id><snippet>return</snippet></ROW><ROW><id>20882733</id><snippet>dict</snippet></ROW><ROW><id>20882733</id><snippet>None</snippet></ROW><ROW><id>20882733</id><snippet>if getPrices() is None: # first call
    pass
else:
    if getPrices().items(): # second call
        for key, value in getPrices().items(): # third call
</snippet></ROW><ROW><id>20882733</id><snippet>value = getPrices()
if value is not None:
    for key, value in value.items():
        # do your stuff
</snippet></ROW><ROW><id>20882853</id><snippet>[::-1]</snippet></ROW><ROW><id>20882853</id><snippet>&gt;&gt;&gt; h = ''.join(map(str, range(0,21)))
&gt;&gt;&gt; h
'01234567891011121314151617181920'
&gt;&gt;&gt; struct.pack('&gt;IIIIIIII', *struct.unpack('&gt;IIIIIIII', h)[::-1])[::-1]
'32107654019821114131615181710291'
</snippet></ROW><ROW><id>20882853</id><snippet>&gt;&gt;&gt; struct.pack('&lt;IIIIIIII', *struct.unpack('&gt;IIIIIIII', h))
'32107654019821114131615181710291'
</snippet></ROW><ROW><id>20882977</id><snippet>"none" != None
</snippet></ROW><ROW><id>20882977</id><snippet>function is None</snippet></ROW><ROW><id>20882977</id><snippet>filter(None, iterable)
</snippet></ROW><ROW><id>20882977</id><snippet>iterable</snippet></ROW><ROW><id>20882977</id><snippet>bool(item) == True</snippet></ROW><ROW><id>20882977</id><snippet>function</snippet></ROW><ROW><id>20882977</id><snippet>filter</snippet></ROW><ROW><id>20882977</id><snippet>lambda</snippet></ROW><ROW><id>20882977</id><snippet>filter(lambda x: x &gt; 5, iterable)
</snippet></ROW><ROW><id>20882977</id><snippet>def some_func(x):
    return x &gt; 5

filter(some_func, iterable)
</snippet></ROW><ROW><id>20882977</id><snippet>filter</snippet></ROW><ROW><id>20882977</id><snippet>a = filter(None, iterable)
for item in a:
    print item
</snippet></ROW><ROW><id>20883202</id><snippet>from osv import osv
from osv import fields

class test_base(osv.osv):    
    _name='test.base'
    _columns={
        'name':fields.char('Name'),
        'email':fields.char('Email'),
        'code':fields.integer('Unique ID'),
        'sal':fields.float('Salary'),
        'rate':fields.selection((('10','10%'), ('20','20%'),('30','30%')),
               'Percentage of Deduction'),
        'ded':fields.float('Deduction'),
         }

    def on_change_ded_cal(self, cr, uid, ids, rate, context=None):
        x=rate+2
        return {'value': {'ded': x}} 

test_base()
</snippet></ROW><ROW><id>20883699</id><snippet>print</snippet></ROW><ROW><id>20883699</id><snippet>print (htmltext)</snippet></ROW><ROW><id>20884386</id><snippet>newpayy = Pay(...)
newpayy.save()
pay_list = request.session.setdefault('pay_list', [])
pay_list.append(newpayy.id)
request.session.modified = True
</snippet></ROW><ROW><id>20884386</id><snippet>pay_ids = request.session.get('pay_list')
if pay_ids:
    pay_objects = Pay.objects.filter(pk__in=pay_ids)
</snippet></ROW><ROW><id>20884939</id><snippet>import traceback
try:
     codethatwillthrowanexception()
except:
     exceptiondata = traceback.format_exc().splitlines()
     exceptionarray = [exceptiondata[-1]] + exceptiondata[1:-1]
</snippet></ROW><ROW><id>20885270</id><snippet>matplotlib.pyplot.table</snippet></ROW><ROW><id>20885270</id><snippet>cellColours</snippet></ROW><ROW><id>20885270</id><snippet>cellText</snippet></ROW><ROW><id>20885270</id><snippet>colColours</snippet></ROW><ROW><id>20885270</id><snippet>rowColours</snippet></ROW><ROW><id>20885270</id><snippet>cellcolours = np.empty_like(tableData, dtype='object')
for i, cl in enumerate(colLabels):
    if cl &gt; 50:
        cellcolours[:,i] = 'r'
</snippet></ROW><ROW><id>20885270</id><snippet>plt.table</snippet></ROW><ROW><id>20885270</id><snippet>ax.table</snippet></ROW><ROW><id>20885270</id><snippet>cellColours=cellcolours</snippet></ROW><ROW><id>20885270</id><snippet>table.get_celld()</snippet></ROW><ROW><id>20885270</id><snippet>{(0, 0): &lt;matplotlib.table.Cell at 0x5d750d0&gt;,  # these are column headers
 (0, 1): &lt;matplotlib.table.Cell at 0x5d75290&gt;,
 (0, 2): &lt;matplotlib.table.Cell at 0x5d75450&gt;,
 (0, 3): &lt;matplotlib.table.Cell at 0x5d75610&gt;,
 [...]
 (1, -1): &lt;matplotlib.table.Cell at 0x5d757d0&gt;, # this is a row header
 (1, 0): &lt;matplotlib.table.Cell at 0x5a58110&gt;,  # this is a cell
 (1, 1): &lt;matplotlib.table.Cell at 0x5d74150&gt;,
 (1, 2): &lt;matplotlib.table.Cell at 0x5d74290&gt;,
 (1, 3): &lt;matplotlib.table.Cell at 0x5d743d0&gt;,
 [...]
 (2, -1): &lt;matplotlib.table.Cell at 0x5d75990&gt;, # this is a row header
 [...] }
</snippet></ROW><ROW><id>20885270</id><snippet>c=table.get_celld()[(1,1)]
</snippet></ROW><ROW><id>20885270</id><snippet>c.set_color()</snippet></ROW><ROW><id>20885270</id><snippet>c.get_text().get_text()</snippet></ROW><ROW><id>20885270</id><snippet>get_text</snippet></ROW><ROW><id>20885270</id><snippet>Text</snippet></ROW><ROW><id>20885665</id><snippet>str.find()</snippet></ROW><ROW><id>20885665</id><snippet>BeautifulSoup.find()</snippet></ROW><ROW><id>20885665</id><snippet>soup = bs4(htmltext)

for price in soup.find(attrs={'id':"yfs_184_aapl"}):
</snippet></ROW><ROW><id>20885665</id><snippet>find_all()</snippet></ROW><ROW><id>20885665</id><snippet>for price in soup.find_all(id="yfs_l84_aapl"):
</snippet></ROW><ROW><id>20885665</id><snippet>attrs</snippet></ROW><ROW><id>20885665</id><snippet>id</snippet></ROW><ROW><id>20885665</id><snippet>yfs_l84_aapl</snippet></ROW><ROW><id>20885665</id><snippet>l</snippet></ROW><ROW><id>20885665</id><snippet>8</snippet></ROW><ROW><id>20885665</id><snippet>4</snippet></ROW><ROW><id>20885665</id><snippet>1</snippet></ROW><ROW><id>20885766</id><snippet>href</snippet></ROW><ROW><id>20885766</id><snippet>a</snippet></ROW><ROW><id>20885766</id><snippet>&lt;a href="{{ linklist[e] }}"&gt;{{ list[e] }}&lt;/a&gt;
</snippet></ROW><ROW><id>20885776</id><snippet>del print
</snippet></ROW><ROW><id>20885776</id><snippet>globals()</snippet></ROW><ROW><id>20885776</id><snippet>__builtin__</snippet></ROW><ROW><id>20885776</id><snippet>import __builtin__

__builtin__.print('Printing with the original built-in')
</snippet></ROW><ROW><id>20885802</id><snippet>aList</snippet></ROW><ROW><id>20885802</id><snippet>extend</snippet></ROW><ROW><id>20885802</id><snippet>append</snippet></ROW><ROW><id>20885802</id><snippet>aList = [olditem, olditem, newitem, newitem]
                                  # ^ aList[0]
</snippet></ROW><ROW><id>20885802</id><snippet>aList = [[olditem, olditem], [newitem, newitem]]
                           # ^ aList[0]
</snippet></ROW><ROW><id>20885802</id><snippet>aList = []
sDict = {}
for com in coms:
    for env in envs:
        for d in eval("{0}_{1}_stks".format(env, com)):
            aList.append(d["name"]) # add name from d to end of aList
            sDict[d["name"]] = {'component': com, 'environment': env}
</snippet></ROW><ROW><id>20885802</id><snippet>aList = []</snippet></ROW><ROW><id>20885802</id><snippet>aList.append(...)</snippet></ROW><ROW><id>20885802</id><snippet>sDict</snippet></ROW><ROW><id>20886018</id><snippet>&lt;form action="/search" method=post&gt;
    &lt;p&gt;&lt;input type="text" name="query" value="test"&gt;&lt;/p&gt;
    &lt;p&gt;&lt;input type="submit" value="Search"&gt;&lt;/p&gt;
    &lt;br /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>20886018</id><snippet>method=post</snippet></ROW><ROW><id>20886018</id><snippet>&lt;form action="/search"&gt;
    &lt;p&gt;&lt;input type="text" name="query" value="test"&gt;&lt;/p&gt;
    &lt;p&gt;&lt;input type="submit" value="Search"&gt;&lt;/p&gt;
    &lt;br /&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>20886018</id><snippet>@app.route('/search')
def search():
    return request.args['query']
</snippet></ROW><ROW><id>20886018</id><snippet>methods=['POST']</snippet></ROW><ROW><id>20886018</id><snippet>GET</snippet></ROW><ROW><id>20886018</id><snippet>request.args</snippet></ROW><ROW><id>20886018</id><snippet>request.form</snippet></ROW><ROW><id>20886299</id><snippet>/opt/local/
</snippet></ROW><ROW><id>20886299</id><snippet>/opt/local/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/site-packages/babel/localedata/
</snippet></ROW><ROW><id>20886398</id><snippet>d = numpy.random.rand(3000)

def test(n):
    ld = d[:n]
    s = time.time()
    ld.sort()
    e = time.time()
    return e-t
</snippet></ROW><ROW><id>20886398</id><snippet>i</snippet></ROW><ROW><id>20886435</id><snippet>Y = []
A = [['2925750', ' Everything he mentioned, I could have evaluated on my own'], ['2925750', ' I do wish he could have shown us more at this point that could have set the fox apart.']]
B = ['mentioned','evaluated','fox','wish']

for sent in A:
    o = 0
    for i in sent:
        o +=sum(i.count(col) for col in B)
    Y.append((sent, o))
</snippet></ROW><ROW><id>20886521</id><snippet>.__mro__</snippet></ROW><ROW><id>20886567</id><snippet>powershell.exe -Command Unblock-File -Path "c:\path\to\blocked file.ps1"
</snippet></ROW><ROW><id>20886641</id><snippet>()</snippet></ROW><ROW><id>20886641</id><snippet>TypeError</snippet></ROW><ROW><id>20886641</id><snippet>&gt;&gt;&gt; "somestring"(42)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'str' object is not callable
</snippet></ROW><ROW><id>20886641</id><snippet>__call__</snippet></ROW><ROW><id>20886753</id><snippet>multiprocessing.Pool</snippet></ROW><ROW><id>20886753</id><snippet>from multiprocessing import Pool

def f(x):
    return x*x

if __name__ == '__main__':
    pool = Pool(processes=4)              # start 4 worker processes
    result = pool.apply_async(f, [10])    # evaluate "f(10)" asynchronously
    print result.get(timeout=1)           # prints "100" unless your computer is *very* slow
    print pool.map(f, range(10))          # prints "[0, 1, 4,..., 81]"
</snippet></ROW><ROW><id>20886753</id><snippet>multiprocessing.cpu_count()</snippet></ROW><ROW><id>20886753</id><snippet>import multiprocessing

def f(name):
    print 'hello', name

if __name__ == '__main__':
    pool = multiprocessing.Pool() #use all available cores, otherwise specify the number you want as an argument
    for i in xrange(0, 512):
        pool.apply_async(f, args=(i,))
    pool.close()
    pool.join()
</snippet></ROW><ROW><id>20886938</id><snippet>&gt;&gt;&gt; rows = [
    ' '.join(map(str, range(n, n * n + 1, n)))
    for n in range(1, 8)
]
&gt;&gt;&gt; print('\n' + '\n'.join(rows))

1
2 4
3 6 9
4 8 12 16
5 10 15 20 25
6 12 18 24 30 36
7 14 21 28 35 42 49
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20886961</id><snippet>else</snippet></ROW><ROW><id>20886961</id><snippet>for</snippet></ROW><ROW><id>20886961</id><snippet>if</snippet></ROW><ROW><id>20886961</id><snippet>else</snippet></ROW><ROW><id>20886961</id><snippet>break</snippet></ROW><ROW><id>20887041</id><snippet>searchtext='lost computer'
searchwords = searchtext.split()
query = "SELECT * FROM RedownloadList WHERE" + " AND ".join(["column like %s"]*len(searchwords))
self.db.query(query, searchwords)
</snippet></ROW><ROW><id>20887145</id><snippet>def decode(text, shift):
    d = {}
    for c in (65, 97):
        for i in range(26):
            d[chr(i+c)] = chr((i+shift) % 26 + c)
    return "".join([d.get(c, c) for c in text])
</snippet></ROW><ROW><id>20887145</id><snippet>import this</snippet></ROW><ROW><id>20887145</id><snippet>def decode(text, shift):
    d = {}
    for i in range(26):
        d[chr(i+97)] = chr((i+shift) % 26 + 97)
    return "".join([d.get(c, c) for c in text])
</snippet></ROW><ROW><id>20887169</id><snippet>sublist</snippet></ROW><ROW><id>20887169</id><snippet>[(0, 0), (1, 1)]</snippet></ROW><ROW><id>20887169</id><snippet>(1,3)</snippet></ROW><ROW><id>20887169</id><snippet>for sublist in list[:]:
    for item in sublist:
        if sublist.count(item) == 1 and item != 1:
             list.remove(sublist)
             break
</snippet></ROW><ROW><id>20887677</id><snippet>sys.exc_info</snippet></ROW><ROW><id>20887677</id><snippet>except Exception, ex:</snippet></ROW><ROW><id>20887677</id><snippet>shell=True</snippet></ROW><ROW><id>20887677</id><snippet>subprocess</snippet></ROW><ROW><id>20887677</id><snippet>subprocess</snippet></ROW><ROW><id>20887677</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>20887677</id><snippet>check_output</snippet></ROW><ROW><id>20887677</id><snippet>check_output</snippet></ROW><ROW><id>20887677</id><snippet>stderr</snippet></ROW><ROW><id>20887677</id><snippet>output</snippet></ROW><ROW><id>20887677</id><snippet>CalledProcessException</snippet></ROW><ROW><id>20887677</id><snippet>check_call</snippet></ROW><ROW><id>20887677</id><snippet>subprocess</snippet></ROW><ROW><id>20887677</id><snippet>pg_dump</snippet></ROW><ROW><id>20887677</id><snippet>    try:
        bkp_file = 'backup1'
        file_path = os.path.join(dump_dir, bkp_file)
        dumper_cmd = ['pg_dump', '-h', localhost, '-p', port, '-U', db_username, '--role', role, '-W', '-Fc', '-v', '-f', file_path, db_name]
        subprocess.check_output(dumper_cmd)
    except subprocess.CalledProcessError, ex:
        print("Couldn't back up database {0}: pg_dump returned {1} with output {2}".format(db_name, ex.returncode, ex.output)
    except Exception, ex:
        print("Couldn't backup database {0}: unexpected error {1}".format(db_name, ex))
</snippet></ROW><ROW><id>20887714</id><snippet>def connection_error():
    raise requests.exceptions.ConnectionError

class TestSuitabilityFunctions(TestCase):
    def test_connection_error(self):
        requests.get = MagicMock(side_effect=connection_error)
        with self.assertRaises(requests.exceptions.ConnectionError) as cm:
            resp = call_the_api()
        exception = cm.exception
        self.assertEqual(resp, {'request_error': 'ConnectionTimeout'})
</snippet></ROW><ROW><id>20887958</id><snippet>item = min(dic, key=dic.get)
del dic[item]
</snippet></ROW><ROW><id>20888006</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; shlex.split(s.replace('[','"[').replace(']',']"'))
['510', '-9999999', '9', '99', '12', '5', '[3, 0]', '[]', '[6]']
</snippet></ROW><ROW><id>20888006</id><snippet>pyparsing</snippet></ROW><ROW><id>20888091</id><snippet>import matplotlib.pyplot as plt
import subprocess, glob, re

def get_magnification(filename):
    p = subprocess.check_output('exiftool -tab %s'%filename,shell=True) 

    xpix = float(re.findall('XpixCal=\d*.\d*',p)[0][8:])
    ypix = float(re.findall('YpixCal=\d*.\d*',p)[0][8:])

    mag = int(re.findall('p.\d+',p)[0][2:])

    return xpix,ypix,mag

xpix,ypix,mag = get_magnification('E3-9.tif')

print 'X pixels per nm: %.3f'%(xpix)
print 'Y pixels per nm: %.3f'%(ypix)
print 'Magnification:   %ix'%(mag)
</snippet></ROW><ROW><id>20888106</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; dic = {'1d812hjbsa' : ['Apple', 'iPad'], '190usdnb1' : ['Amazon', 'Kindle'], 'sjdb1892': ['Apple', 'iPad'], '23ub8wh12' : ['Apple', 'iPhone'], '12ndsi01' : ['Amazon', 'Kindle']}
&gt;&gt;&gt; counter = Counter(tuple(v) for v in dic.values())
&gt;&gt;&gt; dict(counter)
{('Amazon', 'Kindle'): 2, ('Apple', 'iPad'): 2, ('Apple', 'iPhone'): 1}
</snippet></ROW><ROW><id>20888106</id><snippet>has_key()</snippet></ROW><ROW><id>20888106</id><snippet>in</snippet></ROW><ROW><id>20888106</id><snippet>if value in fin_dict:</snippet></ROW><ROW><id>20888445</id><snippet>import multiprocessing
import time

data = (
    ['a', '2'], ['b', '4'], ['c', '6'], ['d', '8'],
    ['e', '1'], ['f', '3'], ['g', '5'], ['h', '7']
)

def mp_worker((inputs, the_time)):
    print " Processs %s\tWaiting %s seconds" % (inputs, the_time)
    time.sleep(int(the_time))
    print " Process %s\tDONE" % inputs

def mp_handler():
    p = multiprocessing.Pool(2)
    p.map(mp_worker, data)

if __name__ == '__main__':
    mp_handler()
</snippet></ROW><ROW><id>20888445</id><snippet>mp_worker()</snippet></ROW><ROW><id>20888445</id><snippet>map()</snippet></ROW><ROW><id>20888445</id><snippet>def mp_handler():
    subdata = zip(data[0::2], data[1::2])
    for task1, task2 in subdata:
        p = multiprocessing.Pool(2)
        p.map(mp_worker, (task1, task2))
</snippet></ROW><ROW><id>20888445</id><snippet> Processs a Waiting 2 seconds
 Processs b Waiting 4 seconds
 Process a  DONE
 Process b  DONE
 Processs c Waiting 6 seconds
 Processs d Waiting 8 seconds
 Process c  DONE
 Process d  DONE
 Processs e Waiting 1 seconds
 Processs f Waiting 3 seconds
 Process e  DONE
 Process f  DONE
 Processs g Waiting 5 seconds
 Processs h Waiting 7 seconds
 Process g  DONE
 Process h  DONE
</snippet></ROW><ROW><id>20888471</id><snippet>a = [a[i] for i in range(1, len(a)) if a[i][1] &gt; a[i-1][1]]
</snippet></ROW><ROW><id>20888471</id><snippet>range(1, len(a))</snippet></ROW><ROW><id>20888471</id><snippet>zip</snippet></ROW><ROW><id>20888471</id><snippet>a = [two for one, two in zip(a, a[1:]) if two[1] &gt; one[1]]
</snippet></ROW><ROW><id>20888740</id><snippet>[.*/]</snippet></ROW><ROW><id>20888740</id><snippet>.</snippet></ROW><ROW><id>20888740</id><snippet>*</snippet></ROW><ROW><id>20888740</id><snippet>/</snippet></ROW><ROW><id>20888740</id><snippet>urlpatterns = patterns("mobile.views",
    url(r'^$', 'something_cool', name='cool'),
    url(r'^mobile-thing/(?P&lt;uuid&gt;[^/]+)/$', 'mobile_thing', name='mobile-thinger'),
)
</snippet></ROW><ROW><id>20888740</id><snippet>[^/]</snippet></ROW><ROW><id>20888740</id><snippet>/</snippet></ROW><ROW><id>20888740</id><snippet>+</snippet></ROW><ROW><id>20888740</id><snippet>/</snippet></ROW><ROW><id>20888740</id><snippet>uuid</snippet></ROW><ROW><id>20888751</id><snippet>print {1: 'one', 2: 'two'}.get(a, 'none')
</snippet></ROW><ROW><id>20888857</id><snippet>print mouse.execute("select * from Example_Input").fetchall()
</snippet></ROW><ROW><id>20888857</id><snippet>try:
    mouse.executemany("INSERT INTO Example_Input (ID,Name,Job,Salary) VALUES (?,?,?,?)", my_reader)
finally:
    conn.commit()
    i.close()
</snippet></ROW><ROW><id>20888941</id><snippet>&gt;&gt;&gt; phonelist = [[12,14,16,17,18],[16,23,54,64,32]]
&gt;&gt;&gt; [sum(li) for li in phonelist]
[77, 189]
&gt;&gt;&gt; sum([sum(li) for li in phonelist])
266
</snippet></ROW><ROW><id>20888941</id><snippet>&gt;&gt;&gt; sum(sum(li) for li in phonelist)    # generator expression...
266
</snippet></ROW><ROW><id>20888941</id><snippet>data={'Bar {}'.format(i):sum(li) for i, li in enumerate(phonelist, 1)}
data['Total']=sum(data.values())

print data
{'Bar 2': 189, 'Bar 1': 77, 'Total': 266}
</snippet></ROW><ROW><id>20888941</id><snippet>for bar in sorted(data.keys()):
    print '{}: {}'.format(bar, int(round(25.0*data[bar]/data['Total']))*'*')
</snippet></ROW><ROW><id>20888941</id><snippet>Bar 1: *******
Bar 2: ******************
Total: *************************
</snippet></ROW><ROW><id>20889365</id><snippet>from django.utils.timezone import utc

datestr = "2013-12-12"
expireDate = datetime.strptime(datestr, "%Y-%m-%d")
datamodel.time = expireDate.replace(tzinfo=utc)
datamodel.save()
</snippet></ROW><ROW><id>20889365</id><snippet>DateField</snippet></ROW><ROW><id>20889365</id><snippet>DateTimeField</snippet></ROW><ROW><id>20889365</id><snippet>datestr = "2013-12-12"
expireDate = datetime.strptime(datestr, "%Y-%m-%d").date()
</snippet></ROW><ROW><id>20889365</id><snippet>date</snippet></ROW><ROW><id>20889525</id><snippet>"blog:postdetail"</snippet></ROW><ROW><id>20889546</id><snippet>SetEnv</snippet></ROW><ROW><id>20889546</id><snippet># env.py
_src = ''
_html = ''

def set_path_srcfile(path_srcfile):
    global _src
    _src = path_srcfile

def get_path_srcfile():
    return _src

...
</snippet></ROW><ROW><id>20889546</id><snippet>import env; env.set_path_srcfile(myfile)</snippet></ROW><ROW><id>20889615</id><snippet>virtualenv &lt;your_env&gt;
</snippet></ROW><ROW><id>20889615</id><snippet>&lt;your_env&gt;/bin/python</snippet></ROW><ROW><id>20889615</id><snippet>&lt;your_env&gt;/lib</snippet></ROW><ROW><id>20889615</id><snippet>source &lt;your_env&gt;/bin/activate</snippet></ROW><ROW><id>20889615</id><snippet>which python
</snippet></ROW><ROW><id>20889759</id><snippet>__init__(...)</snippet></ROW><ROW><id>20889759</id><snippet>level = levelClass('Level 0')
</snippet></ROW><ROW><id>20889759</id><snippet>__init__(...)</snippet></ROW><ROW><id>20889759</id><snippet>while</snippet></ROW><ROW><id>20889759</id><snippet>__init__</snippet></ROW><ROW><id>20889759</id><snippet>__init__()</snippet></ROW><ROW><id>20889759</id><snippet>level = levelClass('Level 0')
</snippet></ROW><ROW><id>20889759</id><snippet>level.__init__()
</snippet></ROW><ROW><id>20889798</id><snippet>def gen_oriented_cycles(xs):
    from itertools import combinations, permutations
    for length in range(2, len(xs) + 1):
        for pieces in combinations(xs, length):
            first = pieces[0],  # 1-tuple
            for rest in permutations(pieces[1:]):
                yield first + rest
</snippet></ROW><ROW><id>20889798</id><snippet>for c in gen_oriented_cycles('abcd'):
    print c
</snippet></ROW><ROW><id>20889798</id><snippet>('a', 'b')
('a', 'c')
('a', 'd')
('b', 'c')
('b', 'd')
('c', 'd')
('a', 'b', 'c')
('a', 'c', 'b')
('a', 'b', 'd')
('a', 'd', 'b')
('a', 'c', 'd')
('a', 'd', 'c')
('b', 'c', 'd')
('b', 'd', 'c')
('a', 'b', 'c', 'd')
('a', 'b', 'd', 'c')
('a', 'c', 'b', 'd')
('a', 'c', 'd', 'b')
('a', 'd', 'b', 'c')
('a', 'd', 'c', 'b')
</snippet></ROW><ROW><id>20889798</id><snippet>[e,d,c,b,a]</snippet></ROW><ROW><id>20889798</id><snippet>[a,e,d,c,b]</snippet></ROW><ROW><id>20889838</id><snippet>timeit</snippet></ROW><ROW><id>20889838</id><snippet>import timeit
for i in range(10):
    l = list(range(i))
    s = set(l)
    t1 = timeit.timeit(lambda: None in l, )
    t2 = timeit.timeit(lambda: None in s)
    print(i, t1, t2)
</snippet></ROW><ROW><id>20889838</id><snippet>None</snippet></ROW><ROW><id>20889838</id><snippet>1</snippet></ROW><ROW><id>20889838</id><snippet>0 0.10865500289946795 0.11782343708910048
1 0.1330389219801873 0.11656044493429363
</snippet></ROW><ROW><id>20889838</id><snippet>time.sleep(1)</snippet></ROW><ROW><id>20889838</id><snippet>__hash__</snippet></ROW><ROW><id>20889930</id><snippet>Tags</snippet></ROW><ROW><id>20889930</id><snippet>joinedload</snippet></ROW><ROW><id>20889930</id><snippet>subqueryload</snippet></ROW><ROW><id>20889930</id><snippet>Article.tag</snippet></ROW><ROW><id>20889930</id><snippet>q = db.session.query(Article)
q = q.join(Article.project)
q = q.filter(Project.id == id)
q = q.filter(Article.date_created.between(now-timedelta(hours=1), now))
#q = q.options(joinedload(Article.tags)) # @new: load Tag immediatelly
q = q.options(subqueryload(Article.tags)) # @new: load Tag on first access (in the line where tags are collected)
articles = q.all()
</snippet></ROW><ROW><id>20889930</id><snippet>tags = [tag for article in articles for tag in article.tags]
</snippet></ROW><ROW><id>20889930</id><snippet>q = db.session.query(Tag, func.count('*').label("cnt")) #@new: added COUNT
q = q.join(Tag.article)
q = q.join(Article.project)
q = q.filter(Project.id == project_id)
q = q.filter(Article.date_created.between(now-timedelta(hours=1), now))
q = q.group_by(Tag) #@new:
tags = q.all()
return tags # @note: the result is a list of tuples: (Tag, cnt)
</snippet></ROW><ROW><id>20889930</id><snippet>q = db.session.query(Tag.text) # @new:modified
q = q.join(Tag.article)
q = q.join(Article.project)
q = q.filter(Project.id == project_id)
q = q.filter(Article.date_created.between(now-timedelta(hours=1), now))
tags = q.all()
return tags # @note: the result is a list of tuples: (tag_name,)
</snippet></ROW><ROW><id>20890127</id><snippet>#! /usr/bin/python3

def printGrid (it, columns):
    items = ['{} {}'.format (idx, item) for idx, item in enumerate (it) ]
    maxWidths = [max (len (item) for item in items [col::columns] ) for col in range (columns) ]
    padded = [item + ' ' * (4 + maxWidths [idx % columns] - len (item) ) for idx, item in enumerate (items) ]
    while True:
        if not padded: break
        items = padded [:columns]
        padded = padded [columns:]
        print (' '.join (items) )

data = 'Banana,Apple,Orange,Pear,Grape,Coconut,Test1,Test2,Test3,Test4,TestTest5,TestTest6,Test7'.split (',')
printGrid (data, 3)
</snippet></ROW><ROW><id>20890127</id><snippet>def printGrid (it, columns):
    items = ['{} {}'.format (idx, item) for idx, item in enumerate (it) ]
    maxWidths = [max (4 + len (item) for item in items [col::columns] ) for col in range (columns) ]
    formatStr = ''.join ('{{:&lt;{}}}'.format (width) for width in maxWidths)
    while True:
        if not items: break
        line = items [:columns]
        items = items [columns:]
        while len (line) &lt; columns: line.append ('')
        print (formatStr.format (*line) )
</snippet></ROW><ROW><id>20890127</id><snippet>items</snippet></ROW><ROW><id>20890127</id><snippet>maxWidth</snippet></ROW><ROW><id>20890127</id><snippet>padded</snippet></ROW><ROW><id>20890127</id><snippet>formatStr</snippet></ROW><ROW><id>20890127</id><snippet>while len...</snippet></ROW><ROW><id>20890268</id><snippet>info_frame</snippet></ROW><ROW><id>20890268</id><snippet>self.info_frame</snippet></ROW><ROW><id>20890268</id><snippet>self</snippet></ROW><ROW><id>20890268</id><snippet>goback</snippet></ROW><ROW><id>20890268</id><snippet>self.destroy()</snippet></ROW><ROW><id>20890268</id><snippet>self.info_frame.destroy()</snippet></ROW><ROW><id>20890268</id><snippet>Check Info</snippet></ROW><ROW><id>20890268</id><snippet>from tkinter import *
from tkinter import ttk

class Gui(Tk):

    def __init__(self, parent):
        Tk.__init__(self, parent)
        self.parent = parent
        self.initialize()

    def initialize(self):
        initframe = ttk.Frame(self, padding="3 3 12 12")
        initframe.grid(column=0, row=0, sticky=(N, W, E, S))
        initframe.columnconfigure(0, weight=1)
        initframe.rowconfigure(0, weight=1)
        self.resizable(False, False)


        ttk.Button(initframe, text="Check Info", command=self.check_info).grid(column=2, row=2, sticky=(W, E))
        ttk.Button(initframe, text="Run Tests" ).grid(column=4, row=2, sticky=(W, E))

        for child in initframe.winfo_children():
            child.grid_configure(padx=20, pady=20)

        self.update()
        self.geometry(self.geometry())

        self.bind('&lt;Return&gt;', self.check_info_enter)

    def goback(self):
        self.info_frame.destroy()

    def check_info(self):
        self.info_frame = ttk.Frame(self, padding="3 3 12 12")
        self.info_frame.grid(column=0, row=0, sticky=(N, W, E, S))
        self.info_frame.columnconfigure(0, weight=1)
        self.info_frame.rowconfigure(0, weight=1)
        self.resizable(False, False)

        ttk.Button(self.info_frame, text="Return Home", command=self.goback).grid(column=2, row=2, sticky=(W, E))


    def check_info_enter(self, event):
        self.update()



if __name__ == "__main__":
    app = Gui(None)
    app.title('Initial')
    app.mainloop()
</snippet></ROW><ROW><id>20890335</id><snippet>b, g = 4, 5
B = np.random.rand(2)
C = np.random.rand(2, b)
D = np.random.rand(2, g)

out = np.zeros((b, g))
for j in (0, 1):
    for k in (0, 1):
        for l in (0, 1):
            if j + k + l in (1, 2):
                out += B[j] * C[k, :, None] * D[l, None, :]
</snippet></ROW><ROW><id>20890335</id><snippet>&gt;&gt;&gt; out
array([[ 1.27679643,  2.26125361,  1.32775173,  1.5517918 ,  0.47083151],
       [ 0.84302586,  1.57516142,  1.1335904 ,  1.14702252,  0.34226837],
       [ 0.70592576,  1.34187278,  1.02080112,  0.99458563,  0.29535054],
       [ 1.66907981,  3.07143067,  2.09677013,  2.20062463,  0.65961165]])
</snippet></ROW><ROW><id>20890335</id><snippet>np.einsum</snippet></ROW><ROW><id>20890335</id><snippet>&gt;&gt;&gt; np.einsum('i,jk,lm-&gt;km', B, C, D) - np.einsum('i,ik,im-&gt;km', B, C, D)
array([[ 1.27679643,  2.26125361,  1.32775173,  1.5517918 ,  0.47083151],
       [ 0.84302586,  1.57516142,  1.1335904 ,  1.14702252,  0.34226837],
       [ 0.70592576,  1.34187278,  1.02080112,  0.99458563,  0.29535054],
       [ 1.66907981,  3.07143067,  2.09677013,  2.20062463,  0.65961165]])
</snippet></ROW><ROW><id>20890335</id><snippet>np.einsum</snippet></ROW><ROW><id>20890335</id><snippet>&gt;&gt;&gt;(np.einsum('i...,j...,k...-&gt;...', B, C, D) -
... np.einsum('i...,i...,i...-&gt;...', B, C, D))
</snippet></ROW><ROW><id>20890335</id><snippet>ValueError: operands could not be broadcast together with remapped shapes
[original-&gt;remapped]: (2)-&gt;(2,newaxis,newaxis) (2,4)-&gt;(4,newaxis,2,newaxis)
                      (2,5)-&gt;(5,newaxis,newaxis,2)
</snippet></ROW><ROW><id>20890335</id><snippet>b</snippet></ROW><ROW><id>20890335</id><snippet>g</snippet></ROW><ROW><id>20890335</id><snippet>&gt;&gt;&gt; (np.einsum('i...,j...,k...-&gt;...', B, C, D[:, None]) -
...  np.einsum('i...,i...,i...-&gt;...', B, C, D[:, None]))
array([[ 1.27679643,  2.26125361,  1.32775173,  1.5517918 ,  0.47083151],
       [ 0.84302586,  1.57516142,  1.1335904 ,  1.14702252,  0.34226837],
       [ 0.70592576,  1.34187278,  1.02080112,  0.99458563,  0.29535054],
       [ 1.66907981,  3.07143067,  2.09677013,  2.20062463,  0.65961165]])
</snippet></ROW><ROW><id>20890335</id><snippet>&gt;&gt;&gt; B = np.random.rand(2, 3)
&gt;&gt;&gt; C = np.random.rand(2, 4, 5)
&gt;&gt;&gt; D = np.random.rand(2, 6)
&gt;&gt;&gt; C_idx = (slice(None),) + (None,) * (B.ndim - 1)
&gt;&gt;&gt; D_idx = C_idx + (None,) * (C.ndim - 1)
&gt;&gt;&gt; (np.einsum('i...,j...,k...-&gt;...', B, C[C_idx], D[D_idx]) -
...  np.einsum('i...,i...,i...-&gt;...', B, C[C_idx], D[D_idx])).shape
(3L, 4L, 5L, 6L)
</snippet></ROW><ROW><id>20890335</id><snippet>&gt;&gt;&gt; B = np.random.rand(2, 2, 3)
&gt;&gt;&gt; C = np.random.rand(2, 2, 4, 5)
&gt;&gt;&gt; D = np.random.rand(2, 2, 6)
&gt;&gt;&gt; C_idx = (slice(None),) * 2 + (None,) * (B.ndim - 2)
&gt;&gt;&gt; D_idx = C_idx + (None,) * (C.ndim - 2)
&gt;&gt;&gt; (np.einsum('ij...,kl...,mn...-&gt;...', B, C[C_idx], D[D_idx]) -
...  np.einsum('ij...,ij...,ij...-&gt;...', B, C[C_idx], D[D_idx])).shape
(3L, 4L, 5L, 6L)
</snippet></ROW><ROW><id>20890335</id><snippet>d</snippet></ROW><ROW><id>20890335</id><snippet>C_idx</snippet></ROW><ROW><id>20890335</id><snippet>D_idx</snippet></ROW><ROW><id>20890335</id><snippet>&gt;&gt;&gt; C_idx = (slice(None),) * d + (None,) * (B.ndim - d)
&gt;&gt;&gt; D_idx = C_idx + (None,) * (C.ndim - d)
</snippet></ROW><ROW><id>20890335</id><snippet>np.einsum</snippet></ROW><ROW><id>20890335</id><snippet>d</snippet></ROW><ROW><id>20890335</id><snippet>C_idx</snippet></ROW><ROW><id>20890335</id><snippet>D_idx</snippet></ROW><ROW><id>20890335</id><snippet>B</snippet></ROW><ROW><id>20890335</id><snippet>C</snippet></ROW><ROW><id>20890335</id><snippet>D</snippet></ROW><ROW><id>20890335</id><snippet>(2, 2, 3)</snippet></ROW><ROW><id>20890335</id><snippet>(2, 2, 4, 5)</snippet></ROW><ROW><id>20890335</id><snippet>(2, 2, 6)</snippet></ROW><ROW><id>20890335</id><snippet>C_idx</snippet></ROW><ROW><id>20890335</id><snippet>None</snippet></ROW><ROW><id>20890335</id><snippet>B</snippet></ROW><ROW><id>20890335</id><snippet>C[C_idx]</snippet></ROW><ROW><id>20890335</id><snippet>(2, 2, 1, 4, 5)</snippet></ROW><ROW><id>20890335</id><snippet>D_idx</snippet></ROW><ROW><id>20890335</id><snippet>C_idx</snippet></ROW><ROW><id>20890335</id><snippet>None</snippet></ROW><ROW><id>20890335</id><snippet>C</snippet></ROW><ROW><id>20890335</id><snippet>D[D_idx]</snippet></ROW><ROW><id>20890335</id><snippet>(2, 2, 1, 1, 1, 6)</snippet></ROW><ROW><id>20890335</id><snippet>np.einsum</snippet></ROW><ROW><id>20890335</id><snippet>(2, 2, 3, 1, 1, 1)
(2, 2, 1, 4, 5, 1)
(2, 2, 1, 1, 1, 6)
</snippet></ROW><ROW><id>20890335</id><snippet>(3, 4, 5, 6)</snippet></ROW><ROW><id>20890335</id><snippet>b, g = 5000, 2000
B = np.random.rand(2)
C = np.random.rand(2, b)
D = np.random.rand(2, g)

def calc1(b, c, d):
    return (np.einsum('i,jm,kn-&gt;mn', b, c, d) -
            np.einsum('i,im,in-&gt;mn', b, c, d))

def calc2(b, c, d):
    return np.einsum('ijk,i,jm,kn-&gt;mn', calc2.e, b, c, d)
calc2.e = np.ones((2,2,2))
calc2.e[0, 0, 0] = 0
calc2.e[1, 1, 1] = 0
</snippet></ROW><ROW><id>20890335</id><snippet>%timeit calc1(B, C, D)
1 loops, best of 3: 361 ms per loop

%timeit calc2(B, C, D)
1 loops, best of 3: 643 ms per loop

np.allclose(calc1(B, C, D), calc2(B, C, D))
Out[48]: True
</snippet></ROW><ROW><id>20890431</id><snippet>y1,x1 = np.unravel_index(result.argmax(),result.shape)</snippet></ROW><ROW><id>20890671</id><snippet>if all(x.isalpha() or x.isspace() for x in original):
</snippet></ROW><ROW><id>20890671</id><snippet>original.replace(' ','').isalpha()
</snippet></ROW><ROW><id>20890714</id><snippet>$PATH</snippet></ROW><ROW><id>20890714</id><snippet>django-admin.py</snippet></ROW><ROW><id>20890734</id><snippet>python-ldap</snippet></ROW><ROW><id>20890734</id><snippet>pip install python-ldap --upgrade
</snippet></ROW><ROW><id>20890775</id><snippet>function strip(str, remove) {
  while (str.length &gt; 0 &amp;&amp; remove.indexOf(str.charAt(0)) != -1) {
    str = str.substr(1);
  }
  while (str.length &gt; 0 &amp;&amp; remove.indexOf(str.charAt(str.length - 1)) != -1) {
    str = str.substr(0, str.length - 1);
  }
  return str;
}
</snippet></ROW><ROW><id>20890775</id><snippet>str = str.replace(/(^[ '\^\$\*#&amp;]+)|([ '\^\$\*#&amp;]+$)/g, '')
</snippet></ROW><ROW><id>20890801</id><snippet>answer = list(set(itertools.chain.from_iterable(dic.itervalues())))
</snippet></ROW><ROW><id>20890801</id><snippet>blacklist = set('a b'.split())
answer = list(set(itertools.chain.from_iterable(v for k,v in dic.iteritems if k not in blacklist)))
</snippet></ROW><ROW><id>20890899</id><snippet>In [1]: import networkx as nx

In [2]: G = nx.DiGraph()

In [3]: G.add_edge(1,2)

In [4]: G.graph['graph']={'rankdir':'LR'}

In [5]: import sys

In [6]: nx.write_dot(G, sys.stdout)
strict digraph  {
    graph [rankdir=LR];
    1 -&gt; 2;
}
</snippet></ROW><ROW><id>20891029</id><snippet>import inspect
import functools

def test_decorator(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        print(func.__name__, args, kwargs)
        res = func(*args, **kwargs)
        return res
    return wrapper

def make_test_deco_type(decorator):
    class TestDecoType(type):
        def __new__(cls, clsname, bases, dct):
            for name, value in dct.items():
                if name.startswith('test') and inspect.isroutine(value):
                    dct[name] = decorator(value)
            return super().__new__(cls, clsname, bases, dct)
    return TestDecoType

class Potato(object, metaclass=make_test_deco_type(test_decorator)):
    def test_method(self):
        print('in method')

class Spud(Potato):
    def test_derived(self):
        print('in derived')
</snippet></ROW><ROW><id>20891029</id><snippet>__metaclass__ = make_test_deco_type(test_decorator)</snippet></ROW><ROW><id>20891029</id><snippet>metaclass=...</snippet></ROW><ROW><id>20891029</id><snippet>super()</snippet></ROW><ROW><id>20891029</id><snippet>super(TestDecoType, cls)</snippet></ROW><ROW><id>20891037</id><snippet>{m}
</snippet></ROW><ROW><id>20891037</id><snippet>m</snippet></ROW><ROW><id>20891037</id><snippet>a{6}</snippet></ROW><ROW><id>20891037</id><snippet>'a'</snippet></ROW><ROW><id>20891037</id><snippet>1{0}</snippet></ROW><ROW><id>20891037</id><snippet>1</snippet></ROW><ROW><id>20891185</id><snippet>&gt;&gt;&gt; fields = [{'name':'count', 'label':'Count'},{'name':'type', 'label':'Type'}]
&gt;&gt;&gt; [f['name'] for f in fields]
['count', 'type']
</snippet></ROW><ROW><id>20891231</id><snippet>seen_add(x)</snippet></ROW><ROW><id>20891231</id><snippet>None</snippet></ROW><ROW><id>20891231</id><snippet>not None</snippet></ROW><ROW><id>20891231</id><snippet>True</snippet></ROW><ROW><id>20891231</id><snippet>&gt;&gt;&gt; not None
True
</snippet></ROW><ROW><id>20891231</id><snippet>if</snippet></ROW><ROW><id>20891231</id><snippet>while</snippet></ROW><ROW><id>20891231</id><snippet>None</snippet></ROW><ROW><id>20891231</id><snippet>False</snippet></ROW><ROW><id>20891231</id><snippet>not seen_add(x)</snippet></ROW><ROW><id>20891231</id><snippet>True</snippet></ROW><ROW><id>20891231</id><snippet>if</snippet></ROW><ROW><id>20891231</id><snippet>x</snippet></ROW><ROW><id>20891231</id><snippet>seen</snippet></ROW><ROW><id>20891231</id><snippet>seen_add = seen.add
return [ x for x in seq if x not in seen and not seen_add(x)]
</snippet></ROW><ROW><id>20891231</id><snippet>result = []
for x in seq:
  if x not in seen:
    result.append(x)
    seen.add(x)
return result
</snippet></ROW><ROW><id>20891381</id><snippet>ITEM_PIPELINES = {
    'myproject.pipeline.custompipeline': 300,
}
</snippet></ROW><ROW><id>20891412</id><snippet>options = [
    "option1", 
    "option2", 
    {"option3":["meta1", "meta2", "meta3"]}, 
    "option4" 
]
</snippet></ROW><ROW><id>20891466</id><snippet>print z.testzip()</snippet></ROW><ROW><id>20891466</id><snippet>zip -T</snippet></ROW><ROW><id>20891466</id><snippet>unzip</snippet></ROW><ROW><id>20891466</id><snippet>with open(sys.argv[1], 'rb') as zf:
    z = zipfile.ZipFile(zf, allowZip64=True)
    for member in z.infolist():
        try:
            z.extract(member)
        except zipfile.error as e:
            # log the error, the member.filename, whatever
</snippet></ROW><ROW><id>20891466</id><snippet>Bad magic number for file header</snippet></ROW><ROW><id>20891466</id><snippet>zipfile</snippet></ROW><ROW><id>20891466</id><snippet>PK\003\004</snippet></ROW><ROW><id>20891466</id><snippet>zip</snippet></ROW><ROW><id>20891466</id><snippet>unzip</snippet></ROW><ROW><id>20891466</id><snippet>zipfile</snippet></ROW><ROW><id>20891466</id><snippet>zip</snippet></ROW><ROW><id>20891466</id><snippet>zip</snippet></ROW><ROW><id>20891466</id><snippet>-F</snippet></ROW><ROW><id>20891466</id><snippet>-FF</snippet></ROW><ROW><id>20891466</id><snippet>zip -h</snippet></ROW><ROW><id>20891466</id><snippet>unzip</snippet></ROW><ROW><id>20891466</id><snippet>zipfile</snippet></ROW><ROW><id>20891466</id><snippet>subprocess.check_output(['unzip', fname])
</snippet></ROW><ROW><id>20891466</id><snippet>zipfile</snippet></ROW><ROW><id>20891466</id><snippet>extractall</snippet></ROW><ROW><id>20891714</id><snippet>subprocess.popen</snippet></ROW><ROW><id>20891714</id><snippet># write_to_stdin.py
import sys
input = sys.stdin.read()
sys.stdout.write('Received: %s'%input)
</snippet></ROW><ROW><id>20891714</id><snippet>&gt;&gt;&gt; proc = subprocess.Popen(['python', 'write_to_stdin.py'],  stdin=subprocess.PIPE)
&gt;&gt;&gt; proc.communicate('Hello?')
Received: Hello?(None, None)
</snippet></ROW><ROW><id>20891799</id><snippet>if '-' in item:
    # parse
else:
    # don't do anything
</snippet></ROW><ROW><id>20891834</id><snippet>import unicodedata

regex = unicodedata.normalize('NFC', ur'([aeioäëöáéíóàèìò])([aeioäëöáéíóúàèìò]):')
string = unicodedata.normalize('NFC', u'aä:dtcbd')
newString = re.sub(regex, ur'\1:\2', string)
</snippet></ROW><ROW><id>20891834</id><snippet>u'á'</snippet></ROW><ROW><id>20891834</id><snippet>'á:tdfrec'</snippet></ROW><ROW><id>20891834</id><snippet>u</snippet></ROW><ROW><id>20891834</id><snippet>string = u'aä:dtcbd'</snippet></ROW><ROW><id>20891834</id><snippet>string = string.decode('utf-8')</snippet></ROW><ROW><id>20891834</id><snippet>re.UNICODE</snippet></ROW><ROW><id>20891834</id><snippet>\w</snippet></ROW><ROW><id>20891834</id><snippet>\d</snippet></ROW><ROW><id>20892095</id><snippet>findall</snippet></ROW><ROW><id>20892095</id><snippet>r"href *= *(\"|\')(.*?)\1
</snippet></ROW><ROW><id>20892095</id><snippet>results = [x[1] for x in re.findall(r"href *= *(\"|\')(.*?)\1", lines)]
</snippet></ROW><ROW><id>20892310</id><snippet>for line in SwitchFile:
    Switches.append(line.strip())
</snippet></ROW><ROW><id>20892333</id><snippet>zip()</snippet></ROW><ROW><id>20892333</id><snippet>for line1, line2, line3 in zip(openfile1, openfile2, openfile3):
</snippet></ROW><ROW><id>20892333</id><snippet>files = [open(dof[name]) for name in sorted(dof)]

for lines in zip(*files):
</snippet></ROW><ROW><id>20892333</id><snippet>lines</snippet></ROW><ROW><id>20892333</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>20892333</id><snippet>itertools.zip_longest()</snippet></ROW><ROW><id>20892436</id><snippet>re.split</snippet></ROW><ROW><id>20892436</id><snippet>&gt;&gt;&gt; from re import split
&gt;&gt;&gt; data = (['2893357', 'SUPER', 'sesame street. The books are all open. I saw no trash or debris. She was clean and well organized.'], ['2893357', 'STELLAR', '"I stopped and turned it off.
He was smiling. He welcomed me to Sewell and asked how he was able to assist me that day.'])
&gt;&gt;&gt; new_list = [[w,x,z] for w,x,y in data for z in split("(?&lt;=\.) ", y)]
&gt;&gt;&gt; for item in new_list:
...     print(item)
...
['2893357', 'SUPER', 'sesame street.']
['2893357', 'SUPER', 'The books are all open.']
['2893357', 'SUPER', 'I saw no trash or debris.']
['2893357', 'SUPER', 'She was clean and well organized.']
['2893357', 'STELLAR', '"I stopped and turned it off.']
['2893357', 'STELLAR', 'He was smiling.']
['2893357', 'STELLAR', 'He welcomed me to Sewell and asked how he was able to assist me that day.']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20892436</id><snippet>See</snippet></ROW><ROW><id>20892436</id><snippet>See</snippet></ROW><ROW><id>20892436</id><snippet>Sewell</snippet></ROW><ROW><id>20892439</id><snippet>&gt;&gt;&gt; a=array( [[492, 105],
...   [492, 105],
...   [492, 105],
...   [492, 106],
...   [492, 106],
...   [492, 106],
...   [491, 106],
...   [491, 106],
...   [491, 105],
...   [491, 105],
...   [491, 105],
...   [492, 105],
...   [492, 105],
...   [492, 105]]
... )
&gt;&gt;&gt; g_idx=any(a[1:]!=a[:-1], axis=1)
&gt;&gt;&gt; vstack((a[:-1][g_idx][0], a[1:][g_idx]))
array([[492, 105],
       [492, 106],
       [491, 106],
       [491, 105],
       [492, 105]])
</snippet></ROW><ROW><id>20892439</id><snippet>a[:-1][g_idx][0]</snippet></ROW><ROW><id>20892470</id><snippet>class LogOutput(models.Model):
    raw = models.TextField()

    class Meta:
        abstract = True

class DataFileLogOutput(LogOutput):
    pass

class SuiteFileLogOutput(LogOutput):
    pass

class DataFile(models.Model):
    name = models.CharField()#etc.
    logoutput = models.OneToOneField(DataFileLogOutput)

class Suite(models.Model):
    # Many Suites will have the same datafile:
    datafile = models.ForeignKey(DataFile)

    # Each Suite has a unique LogOutput different from the DataFile's
    # and as with the DataFile, that LogOutput will have just one Suite
    logoutput = models.OneToOneField(SuiteLogOutput)
</snippet></ROW><ROW><id>20892684</id><snippet>import tkinter
t = tkinter.Tk()
input()
</snippet></ROW><ROW><id>20892684</id><snippet>PyOS_InputHook</snippet></ROW><ROW><id>20892684</id><snippet>readline</snippet></ROW><ROW><id>20892684</id><snippet>input()</snippet></ROW><ROW><id>20892684</id><snippet>code</snippet></ROW><ROW><id>20892684</id><snippet>PyOS_InputHook</snippet></ROW><ROW><id>20892684</id><snippet>readline</snippet></ROW><ROW><id>20892684</id><snippet>select</snippet></ROW><ROW><id>20892684</id><snippet>Tkinter</snippet></ROW><ROW><id>20892684</id><snippet>readline</snippet></ROW><ROW><id>20892684</id><snippet>Tcl_DoOneEvent</snippet></ROW><ROW><id>20892684</id><snippet>Tcl_DoOneEvent</snippet></ROW><ROW><id>20892684</id><snippet>mainloop</snippet></ROW><ROW><id>20892684</id><snippet>Tkinter</snippet></ROW><ROW><id>20892684</id><snippet>mainloop</snippet></ROW><ROW><id>20892684</id><snippet>select</snippet></ROW><ROW><id>20892684</id><snippet>select</snippet></ROW><ROW><id>20892684</id><snippet>t.dooneevent(Tkinter.DONT_WAIT)</snippet></ROW><ROW><id>20892684</id><snippet>mainloop</snippet></ROW><ROW><id>20892684</id><snippet>after</snippet></ROW><ROW><id>20892684</id><snippet>select</snippet></ROW><ROW><id>20892693</id><snippet>site.py</snippet></ROW><ROW><id>20892693</id><snippet>import time</snippet></ROW><ROW><id>20892693</id><snippet>$ touch empty.py
$ time python3 empty.py 

real    0m0.158s
user    0m0.033s
sys     0m0.021s
</snippet></ROW><ROW><id>20892693</id><snippet>timeit.default_timer()</snippet></ROW><ROW><id>20892693</id><snippet>timeit</snippet></ROW><ROW><id>20892711</id><snippet>y+' db ("(?:[^\"]+|\.)*"+),\s*(0x[0-9A-Fa-f]+)*,\s*(0x[0-9A-Fa-f]+),\s*([0-9])*'
</snippet></ROW><ROW><id>20892711</id><snippet>0x0D</snippet></ROW><ROW><id>20892711</id><snippet>0x0A</snippet></ROW><ROW><id>20892711</id><snippet>y+' db ("(?:[^\"]+|\.)*"+),\s*(0x[0-9A-Fa-f]+)*(?:,\s*(0x[0-9A-Fa-f]+))?,\s*([0-9])*'
</snippet></ROW><ROW><id>20892711</id><snippet>name db "Hello World", 0x0D, 0x0A, 0</snippet></ROW><ROW><id>20892711</id><snippet>name db "Hello World", 0x0D, 0</snippet></ROW><ROW><id>20892832</id><snippet>Dfun</snippet></ROW><ROW><id>20892832</id><snippet>Minimizer.leastsq</snippet></ROW><ROW><id>20892832</id><snippet>Dfun</snippet></ROW><ROW><id>20892945</id><snippet>findall</snippet></ROW><ROW><id>20892945</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>20892945</id><snippet>for l in obs_soup.find_all('wl'):
    obs.append(l['v'])
</snippet></ROW><ROW><id>20892945</id><snippet>TypeError: 'NoneType' object is not callable</snippet></ROW><ROW><id>20892945</id><snippet>AttributeError</snippet></ROW><ROW><id>20892945</id><snippet>obs_soup.wl</snippet></ROW><ROW><id>20892945</id><snippet>&lt;wl&gt;</snippet></ROW><ROW><id>20892945</id><snippet>obs_soup.findall</snippet></ROW><ROW><id>20892945</id><snippet>&lt;findall&gt;</snippet></ROW><ROW><id>20892945</id><snippet>&lt;findall&gt;</snippet></ROW><ROW><id>20892945</id><snippet>None</snippet></ROW><ROW><id>20892945</id><snippet>None</snippet></ROW><ROW><id>20892945</id><snippet>findAll</snippet></ROW><ROW><id>20892945</id><snippet>find_all</snippet></ROW><ROW><id>20892945</id><snippet>BeautifulSoup(markup, ["lxml", "xml"])
</snippet></ROW><ROW><id>20892976</id><snippet>return pair[0] if pair[0] != core else pair[1]
</snippet></ROW><ROW><id>20892976</id><snippet>return set(pair) - [core]
</snippet></ROW><ROW><id>20892976</id><snippet>return  pair[not pair.index(core)]
</snippet></ROW><ROW><id>20892980</id><snippet>pygame</snippet></ROW><ROW><id>20892980</id><snippet>raw_input</snippet></ROW><ROW><id>20892980</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>20892980</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>20892980</id><snippet>pygame.draw.circle(screen, black, (500,400), 70, 2)</snippet></ROW><ROW><id>20892980</id><snippet>pygame</snippet></ROW><ROW><id>20893194</id><snippet>[A-Za-z]</snippet></ROW><ROW><id>20893194</id><snippet>&gt;&gt;&gt; r = re.compile(r'(?&lt;!\.)-(?![A-Za-z]\.)')
&gt;&gt;&gt; r.search('k.-kj')
&gt;&gt;&gt; r.search('k-l.')
&gt;&gt;&gt; r.search('k-ll')
&lt;_sre.SRE_Match object at 0x02D46758&gt;
&gt;&gt;&gt; r.search('k-.l')
&lt;_sre.SRE_Match object at 0x02D46720&gt;
&gt;&gt;&gt; r.search('l-..')
&lt;_sre.SRE_Match object at 0x02D46758&gt;
</snippet></ROW><ROW><id>20893229</id><snippet>haystack = 'I like your code "I like your code"'
needle = "code"
replacement = "bucket"

parts = haystack.split('"')
for i in range(0,len(parts),2):
   parts[i] = parts[i].replace(needle,replacement)

print '"'.join(parts)
</snippet></ROW><ROW><id>20893341</id><snippet>import numpy as np
import pandas as pd
from matplotlib.mlab import griddata
import matplotlib.pyplot as plt

#-- Read the data.
# I'm going to use `pandas` to read in and work with your data, mostly due to
# the text site names. Using pandas is optional, however.
data = pd.read_csv('your_data.txt', delim_whitespace=True)

#-- Now let's grid your data.
# First we'll make a regular grid to interpolate onto. This is equivalent to
# your call to `mgrid`, but it's broken down a bit to make it easier to
# understand. The "30j" in mgrid refers to 30 rows or columns.
numcols, numrows = 30, 30
xi = np.linspace(data.Lon.min(), data.Lon.max(), numcols)
yi = np.linspace(data.Lat.min(), data.Lat.max(), numrows)
xi, yi = np.meshgrid(xi, yi)

#-- Interpolate at the points in xi, yi
# "griddata" expects "raw" numpy arrays, so we'll pass in
# data.x.values instead of just the pandas series data.x
x, y, z = data.Lon.values, data.Lat.values, data.Z.values
zi = griddata(x, y, z, xi, yi)

#-- Display the results
fig, ax = plt.subplots()
im = ax.contourf(xi, yi, zi)
ax.scatter(data.Lon, data.Lat, c=data.Z, s=100,
           vmin=zi.min(), vmax=zi.max())
fig.colorbar(im)

plt.show()
</snippet></ROW><ROW><id>20893341</id><snippet>griddata</snippet></ROW><ROW><id>20893452</id><snippet>&gt;&gt;&gt; def foo():
    return 3

&gt;&gt;&gt; def bar():
    foo()

&gt;&gt;&gt; foo()     # not assigned to anything -&gt; prints return value to output
3
&gt;&gt;&gt; bar()     # not top-level -&gt; doesn't print return value to output
&gt;&gt;&gt; x = foo() # assigned to x -&gt; doesn't print return value to output
</snippet></ROW><ROW><id>20893452</id><snippet>powers_of_9()</snippet></ROW><ROW><id>20893452</id><snippet>Powers function for 9 is:
Powers Function with  9  entered:
power of  -3 =  0.0013717421124828533
power of  -2 =  0.012345679012345678
power of  -1 =  0.1111111111111111
power of  0 =  1
power of  1 =  9
power of  2 =  81
power of  3 =  729
</snippet></ROW><ROW><id>20893452</id><snippet>powers_of_9</snippet></ROW><ROW><id>20893452</id><snippet>return</snippet></ROW><ROW><id>20893452</id><snippet>return</snippet></ROW><ROW><id>20893452</id><snippet>def add(x, y):
    return x+y

def print_two_plus_three():
    result = add(2, 3)
    print(result)
</snippet></ROW><ROW><id>20893452</id><snippet>print</snippet></ROW><ROW><id>20893452</id><snippet>def powers_of_x(x):
    print('Powers function with', x, 'entered:')
    for n in range(-3, 4, 1):
        print('power of', n, '=', x**n)
    print('First one ended (using variables with defined range)')

def powers_of_9():
    print('Powers function for 9 is:')
    powers_of_x(9)
    print('Second one ended (no passed variable here)')

def combined():
    x = int(input('Enter value to start: '))
    print('First, run powers_of_x function for entered value of:', x)
    powers_of_x(x)
    print('Second, run powers_of_9 function for powers of 9:')
    powers_of_9()
    print('All now finished')
</snippet></ROW><ROW><id>20893452</id><snippet>print('abc', 'def', 'ghi')</snippet></ROW><ROW><id>20893452</id><snippet>abc def ghi</snippet></ROW><ROW><id>20893452</id><snippet>print('abc', 'def', 'ghi', sep='X')</snippet></ROW><ROW><id>20893452</id><snippet>sep</snippet></ROW><ROW><id>20893452</id><snippet>abcXdefXghi</snippet></ROW><ROW><id>20893452</id><snippet>return</snippet></ROW><ROW><id>20893452</id><snippet>print('foo')</snippet></ROW><ROW><id>20893452</id><snippet>print ('foo')</snippet></ROW><ROW><id>20893452</id><snippet>input()</snippet></ROW><ROW><id>20893484</id><snippet>with</snippet></ROW><ROW><id>20893484</id><snippet>with open('myCsvFile', 'rb') as csvfile:
    reader = csv.reader(csvfile) # Simple names are good, esp. in small scope!

    for row in reader: # Indent me!
        pass # Do stuff here.
</snippet></ROW><ROW><id>20893484</id><snippet>with</snippet></ROW><ROW><id>20893484</id><snippet>allRows</snippet></ROW><ROW><id>20893484</id><snippet>for row in reader:
    corrected = []
    for cell in row:
        corrected.append(cell.replace('\\\\\\', '\\')) # Gross! See below.
    writer.writerow(corrected)
</snippet></ROW><ROW><id>20893484</id><snippet>writer</snippet></ROW><ROW><id>20893484</id><snippet>r</snippet></ROW><ROW><id>20893484</id><snippet>\\\</snippet></ROW><ROW><id>20893484</id><snippet>\</snippet></ROW><ROW><id>20893484</id><snippet>cell.replace(r'\\\\', r'\\')</snippet></ROW><ROW><id>20893484</id><snippet>s = r'This is a \\\ string with \\\ sets \ of \\ three backslash\\\es.'
print(s.replace(r'\\\ '.strip(), r'\ '.strip()))
</snippet></ROW><ROW><id>20893574</id><snippet>FacebookSearch.search</snippet></ROW><ROW><id>20893574</id><snippet>response, data = ts.search('appliance', type='post')
</snippet></ROW><ROW><id>20893574</id><snippet>search</snippet></ROW><ROW><id>20893574</id><snippet>__init__</snippet></ROW><ROW><id>20893574</id><snippet>self.query</snippet></ROW><ROW><id>20893574</id><snippet>self.access_token</snippet></ROW><ROW><id>20893574</id><snippet>self.query.format</snippet></ROW><ROW><id>20893574</id><snippet>search</snippet></ROW><ROW><id>20893574</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>20893574</id><snippet>FacebookSearch</snippet></ROW><ROW><id>20893574</id><snippet>def search(self, q, mode='json', **queryargs):
    queryargs['q'] = q
    query = urllib.urlencode(queryargs)
    # TODO: do the actual query
    return 200, '{"Fake": "data"}'
</snippet></ROW><ROW><id>20893835</id><snippet>def lis_iterative(seq):
    n = len(seq)
    dp = [(0, -1)]*n
    # dp contains (best, idx) tuples, where best is the length of the longest
    # increasing sequence starting from that element, and idx is the index of the
    # next element in that sequence
    for i in range(n-1, -1, -1):
        best = 0
        idx = -1
        for j in range(i+1, n):
            if seq[i] &lt; seq[j] and dp[j][0] + 1 &gt; best:
                best = dp[j][0] + 1
                idx = j
        dp[i] = (best, idx)

    # find longest increasing sequence from dp, then follow idx chain for result
    result = []
    idx = max(range(n), key=lambda i: dp[i][0])
    while idx != -1:
        result.append(seq[idx])
        _, idx = dp[idx]
    return result
</snippet></ROW><ROW><id>20893844</id><snippet>''</snippet></ROW><ROW><id>20893844</id><snippet>'.'</snippet></ROW><ROW><id>20893844</id><snippet>sys.path</snippet></ROW><ROW><id>20893844</id><snippet>sys.path</snippet></ROW><ROW><id>20893844</id><snippet>sys.path</snippet></ROW><ROW><id>20893844</id><snippet>calendar</snippet></ROW><ROW><id>20893844</id><snippet>sys.path</snippet></ROW><ROW><id>20893844</id><snippet>syspath = sys.path
sys.path = [path for path in sys.path if path.strip('.')]
import calendar
sys.path = syspath
</snippet></ROW><ROW><id>20893844</id><snippet>calendar</snippet></ROW><ROW><id>20893844</id><snippet>calendar</snippet></ROW><ROW><id>20893844</id><snippet>sys.modules</snippet></ROW><ROW><id>20893844</id><snippet>calendar</snippet></ROW><ROW><id>20893844</id><snippet>sys.modules</snippet></ROW><ROW><id>20893844</id><snippet>syspath = sys.path
sys.path = [path for path in sys.path if path.strip('.')]
calmod = sys.modules.get('calendar')
del sys.modules['calendar']
calendar = __import__('calendar')
sys.modules['calendar'] = calmod
sys.path = syspath
</snippet></ROW><ROW><id>20893844</id><snippet>calendar</snippet></ROW><ROW><id>20893868</id><snippet>email.py</snippet></ROW><ROW><id>20893868</id><snippet>email</snippet></ROW><ROW><id>20893949</id><snippet>re.split()</snippet></ROW><ROW><id>20893949</id><snippet>re.findall()</snippet></ROW><ROW><id>20893949</id><snippet>&gt;&gt;&gt; text = "This is, a sample text. Some more text. $1,200 test."
&gt;&gt;&gt; print re.findall(r'(?:\d[,.]|[^,.])*(?:[,.]|$)', text)
['This is,', ' a sample text.', ' Some more text.', ' $1,200 test.', '']
</snippet></ROW><ROW><id>20893949</id><snippet>&gt;&gt;&gt; print re.split(r'(?&lt;=[,.])(?&lt;!\d.)\s', text)
['This is,', 'a sample text.', 'Some more text.', '$1,200 test.']
</snippet></ROW><ROW><id>20894007</id><snippet>yield</snippet></ROW><ROW><id>20894007</id><snippet>def parse_tick(self):
    for i in range(2):
        yield self._some_method(i, i)
</snippet></ROW><ROW><id>20894007</id><snippet>next</snippet></ROW><ROW><id>20894007</id><snippet>yield</snippet></ROW><ROW><id>20894007</id><snippet>PyObject *iterator = PyObject_CallMethodObjArgs(var, "parse_tick", args, NULL);
PyObject *item = NULL;
while (item = PyIter_Next(iterator)) {
    do_stuff_with(item);
}
</snippet></ROW><ROW><id>20894007</id><snippet>next</snippet></ROW><ROW><id>20894007</id><snippet>PyIter_Next</snippet></ROW><ROW><id>20894007</id><snippet>NULL</snippet></ROW><ROW><id>20894007</id><snippet>PyErr_Occurred()</snippet></ROW><ROW><id>20894007</id><snippet>yield</snippet></ROW><ROW><id>20894007</id><snippet>raise</snippet></ROW><ROW><id>20894007</id><snippet>yield</snippet></ROW><ROW><id>20894007</id><snippet>yield</snippet></ROW><ROW><id>20894007</id><snippet>raise</snippet></ROW><ROW><id>20894007</id><snippet>return</snippet></ROW><ROW><id>20894007</id><snippet>raise</snippet></ROW><ROW><id>20894007</id><snippet>return</snippet></ROW><ROW><id>20894007</id><snippet>__call__</snippet></ROW><ROW><id>20894007</id><snippet>def _some_method(self, a, b):
    yield a
    yield b

def parse_tick(self):
    for i in range(2):
        yield from self._some_method(i, i)
</snippet></ROW><ROW><id>20894007</id><snippet>parse_tick</snippet></ROW><ROW><id>20894007</id><snippet>_some_method</snippet></ROW><ROW><id>20894007</id><snippet>parse_tick</snippet></ROW><ROW><id>20894007</id><snippet>0</snippet></ROW><ROW><id>20894007</id><snippet>0</snippet></ROW><ROW><id>20894007</id><snippet>1</snippet></ROW><ROW><id>20894007</id><snippet>1</snippet></ROW><ROW><id>20894007</id><snippet>parse_tick</snippet></ROW><ROW><id>20894007</id><snippet>_some_method</snippet></ROW><ROW><id>20894007</id><snippet>yield from</snippet></ROW><ROW><id>20894007</id><snippet>_some_method</snippet></ROW><ROW><id>20894007</id><snippet>yield from</snippet></ROW><ROW><id>20894007</id><snippet>send</snippet></ROW><ROW><id>20894007</id><snippet>yield</snippet></ROW><ROW><id>20894007</id><snippet>yield from</snippet></ROW><ROW><id>20894007</id><snippet>next</snippet></ROW><ROW><id>20894007</id><snippet>None</snippet></ROW><ROW><id>20894007</id><snippet>send</snippet></ROW><ROW><id>20894007</id><snippet>throw</snippet></ROW><ROW><id>20894007</id><snippet>yield from</snippet></ROW><ROW><id>20894007</id><snippet>asyncio</snippet></ROW><ROW><id>20894462</id><snippet>ClientThread</snippet></ROW><ROW><id>20894462</id><snippet>__init__</snippet></ROW><ROW><id>20894462</id><snippet>def __init__(self, sock, addr):
    super(ClientThread, self).__init__()
    self.sock = sock
    self.addr = addr
</snippet></ROW><ROW><id>20894846</id><snippet>SyntaxError</snippet></ROW><ROW><id>20894846</id><snippet>__init__</snippet></ROW><ROW><id>20894846</id><snippet>query</snippet></ROW><ROW><id>20894846</id><snippet>access_token</snippet></ROW><ROW><id>20894846</id><snippet>class FacebookSearch(object):
    def __init__(self):
        self.url_format = 'https://graph.facebook.com/search.{mode}?{query}&amp;{access_token}'
        self.access_token = 'XXXXXX|XXXXX'
</snippet></ROW><ROW><id>20894846</id><snippet>.format</snippet></ROW><ROW><id>20894846</id><snippet>    def make_search_url(self, q, mode='json', **queryargs):
        queryargs['q'] = q
        query = urllib.urlencode(queryargs)
        url = self.url_format.format(mode=mode, query=query, 
                                     access_token=self.access_token, **queryargs)
        return url
</snippet></ROW><ROW><id>20894846</id><snippet>urllib2.urlopen</snippet></ROW><ROW><id>20894846</id><snippet>    def search(self, q, mode='json', **queryargs):
        url = self.make_search_url(q, mode, **queryargs)
        page = urllib2.urlopen(url)
        return page.read()
</snippet></ROW><ROW><id>20894846</id><snippet>data = ts.search('appliance', type='post')
</snippet></ROW><ROW><id>20894846</id><snippet>type='post'</snippet></ROW><ROW><id>20894846</id><snippet>search</snippet></ROW><ROW><id>20894846</id><snippet>search</snippet></ROW><ROW><id>20894846</id><snippet>make_search_url</snippet></ROW><ROW><id>20894846</id><snippet>format</snippet></ROW><ROW><id>20894846</id><snippet>type</snippet></ROW><ROW><id>20894846</id><snippet>type='post'</snippet></ROW><ROW><id>20894846</id><snippet>data = ts.search('appliance')
</snippet></ROW><ROW><id>20894846</id><snippet>XXXXXX|XXXXX</snippet></ROW><ROW><id>20894846</id><snippet>access_token=XXXXXXXX</snippet></ROW><ROW><id>20894846</id><snippet>XXXXXXXX</snippet></ROW><ROW><id>20894863</id><snippet>--log-level</snippet></ROW><ROW><id>20894863</id><snippet>StreamHandler</snippet></ROW><ROW><id>20894863</id><snippet>StreamHandler</snippet></ROW><ROW><id>20894863</id><snippet>stderr</snippet></ROW><ROW><id>20894863</id><snippet>StreamHandler</snippet></ROW><ROW><id>20894974</id><snippet>def standardize(p1, p2):
    xs, ys = zip(p1, p2)
    return (max(xs), max(ys)), (min(xs), min(ys))
</snippet></ROW><ROW><id>20895135</id><snippet>str.format</snippet></ROW><ROW><id>20895135</id><snippet>pw = getpass.getpass()
from subprocess import Popen, PIPE, STDOUT
ssh_conn = Popen(["ssh", "-t", server, "sudo -S cp /etc/"+map, "/etc/"+map + "." +fulltime], stdout=PIPE, stdin=PIPE, stderr=STDOUT)
ssh_conn.communicate(input='{0}\n'.format(pw))[0]
</snippet></ROW><ROW><id>20895163</id><snippet>import re

text = '''\
ACCT 221 Principles of Accounting II (3) Prerequisite: ACCT 220
ASTD 485 Issues in East Asian Studies (3) (Intended as a final capstone course to be taken in a student's last 15 credits.) Prerequisites: ASTD 284 (or ASTD 150) and 285 (or ASTD 160).
ASTR 100 Introduction to Astronomy (3) (Not open to students who have taken or are taking any astronomy course numbered 250 or higher. For students not majoring or minoring in a science.) Prerequisite: MATH 012 or higher.
ASTD 380 American Relations with China and Japan: 1740 to Present (3) (Fulfills the general education requirement in the social sciences.) A study of American political, economic, and cultural relations with China and Japan from the American colonial era to modern times'''

courses={}
for line in text.splitlines():
    course=re.match(r'([A-Z]{4}\s+\d{3})', line).group(1)
    m=re.search(r'Prerequisites?:\s*(.*)', line)
    if m:
        pre=m.group(1)
    else:
        pre='None'    
    courses[course]=pre

print 'COURSE\t\tPREREQUISITE'    

for course in sorted(courses.keys()):
    print '{}\t{}'.format(course, courses[course]) 
</snippet></ROW><ROW><id>20895163</id><snippet>COURSE      PREREQUISITE
ACCT 221    ACCT 220
ASTD 380    None
ASTD 485    ASTD 284 (or ASTD 150) and 285 (or ASTD 160).
ASTR 100    MATH 012 or higher.
</snippet></ROW><ROW><id>20895399</id><snippet>draw.circle()</snippet></ROW><ROW><id>20895399</id><snippet>circle(Surface, color, pos, radius, width=0)
</snippet></ROW><ROW><id>20895399</id><snippet>Surface</snippet></ROW><ROW><id>20895399</id><snippet>color</snippet></ROW><ROW><id>20895399</id><snippet>pos</snippet></ROW><ROW><id>20895399</id><snippet>width</snippet></ROW><ROW><id>20895399</id><snippet>radius</snippet></ROW><ROW><id>20895399</id><snippet>(int(mx-x),int(my-y))</snippet></ROW><ROW><id>20895399</id><snippet>draw.circle(screen, c, (int(x), int(y)), 20, 0)
</snippet></ROW><ROW><id>20895414</id><snippet>np.in1d</snippet></ROW><ROW><id>20895414</id><snippet>&gt;&gt;&gt; a = np.array([[1, 2, 3], [4, 8, 6], [7, 8, 9]])
&gt;&gt;&gt; np.in1d(a, [1, 2, 8])
array([ True,  True, False, False,  True, False, False,  True, False], dtype=bool)
&gt;&gt;&gt; a[np.in1d(a, [1, 2, 8]).reshape(a.shape)] = 0
&gt;&gt;&gt; a
array([[0, 0, 3],
       [4, 0, 6],
       [7, 0, 9]])
</snippet></ROW><ROW><id>20895444</id><snippet>def average(tos, map_lst):
    """
    given
        tos: a sequence of N|user\tname\tAGE\n
        map_lst: a list with positions corresponding to those in tos, and values
                 indicating which group each tos element will be averaged with.
    return the groups of averages as a list of user\tname\tAVG\n
    """

    # get the leading nums
    nums = [s.partition('|')[0] for s in tos]

    # group them into lists that will be averaged together (based on the map)
    avg_groups = [[] for i in set(map_lst)]
    for i,n in zip(map_lst, nums):
        avg_groups[i].append(n)

    # generate the averages
    def fmt(tup):
        mid = tos[0].partition('|')[2].rpartition('\t')[0] # user\tname
        if len(tup) &gt; 1:
            avg = '({0})/{1}'.format('+'.join(tup), len(tup))
        else:
            avg = str(tup[0])
        return "{0}\t{1}\n".format(mid, avg)

    return [fmt(l) for l in avg_groups]
</snippet></ROW><ROW><id>20895444</id><snippet>tos = ('12|edr4r\tedward\t21\n','1|edr4r\tedward\t21\n','3|edr4r\tedward\t21\n','8|edr4r\tedward\t21\n','10|edr4r\tedward\t21\n','2|edr4r\tedward\t21\n')
map_lst = [0,0,1,2,1,0]
print(average(tos,map_lst))
&gt;&gt; ['edr4r\tedward\t(12+1+2)/3\n', 'edr4r\tedward\t(3+10)/2\n', 'edr4r\tedward\t8\n']
</snippet></ROW><ROW><id>20895512</id><snippet>Frame</snippet></ROW><ROW><id>20895512</id><snippet>master = Tk.Tk() # Open up GUI connection
master.title('Program Application')
print "VSM activated input range first (X2 must be larger than X1)"
#Declare button and respective method
button = Tk.Button(text='VSM', command=VSM, fg="red")
button.config( height = 10, width = 80 )
button.pack() #pack is needed to display the button
bluebutton = Tk.Button(text="AGM Folder",command= lambda: Folder(0), fg="blue").pack(side = LEFT)
bluebutton = Tk.Button(text="VSM Folder",command= lambda: Folder(1), fg="blue").pack(side = RIGHT)
Label(text='Correct Range for Gradient\nX2                                                                                                               X1').pack(side=TOP,padx=10,pady=10)

################### Use 3 frames to contains entries, buttons.
frameX2 = Frame(master)
frameX2.pack(side=LEFT, expand=1, anchor=E)
entryX2 = Entry(frameX2, width=10)
entryX2.pack(side=TOP,padx=10,pady=10)
entryX2IP = Entry(frameX2, width=10)
entryX2IP.pack(side=TOP,padx=10,pady=10)
frameButton = Frame(master)
frameButton.pack(side=LEFT)
Tk.Button(frameButton, text='Input Range OP',command= lambda: Folder(2), fg="red").pack(padx=10, pady=10)
Tk.Button(frameButton, text='Input Range IP',command= lambda: Folder(2), fg="red").pack(padx=10, pady=10)
frameX1 = Frame(master)
frameX1.pack(side=LEFT, expand=1, anchor=W)
entryX1 = Entry(frameX1,width=10)
entryX1.pack(side=TOP,padx=10,pady=10)
entryX1IP = Entry(frameX1,width=10)
entryX1IP.pack(side=TOP,padx=10,pady=10)
#####################

master.mainloop() # Continue loop till user close tab
</snippet></ROW><ROW><id>20895517</id><snippet>queryresults = serializers.serialize("python", queryset, fields=('jobmst_id', 'jobmst_prntid', 'jobmst_name', 'jobdtl_cmd'))
#                                                                                                                    here--^
</snippet></ROW><ROW><id>20895571</id><snippet>class UserProfile(Document):
    user = ReferenceField(User, required=True, primary_key=True)
    name = StringField()
</snippet></ROW><ROW><id>20895571</id><snippet>user_obj = authenticate(username=account, password=passwd)
profile_obj = UserProfile.objects(user = user_obj).first()
profile_obj.name = "Mongo"
profile_obj.save()
</snippet></ROW><ROW><id>20895643</id><snippet>os.path.getmtime</snippet></ROW><ROW><id>20895643</id><snippet>os.path.getctime</snippet></ROW><ROW><id>20895643</id><snippet>import os
import time

dirpath = '/path/to/dir'
past = time.time() - 2*60*60 # 2 hours
result = []
for p, ds, fs in os.walk(dirpath):
    for fn in fs:
        filepath = os.path.join(p, fn)
        if os.path.getmtime(filepath) &gt;= past:
            result.append(filepath)
</snippet></ROW><ROW><id>20895856</id><snippet>from multiprocessing import Lock, Manager, Process
from multiprocessing.managers import BaseManager

class Container(object):
    def __init__(self, value):
        self.value = value
    def __str__(self):
        return "C" + str(self.value)
    def multiply(self, factor):  # added method
        self.value *= factor

def process(inputs, start, end):
    for i in range(start, end):
        inputs.apply(i, 'multiply', (10,))

class ListProxy(object):
    def __init__(self):
        self.nl = []
    def append(self, x):
        self.nl.append(x)
    def __getitem__(self, key):
        return self.nl[key]
    def __iter__(self):
        return iter(self.nl)
    def apply(self, i, method, args, **kwargs):
        getattr(self.nl[i], method)(*args, **kwargs)

class ListManager(BaseManager):
    pass

ListManager.register('ListProxy', ListProxy,
                     exposed=['append', '__getitem__', '__iter__', 'apply'])

def main():
    manager = ListManager()
    manager.start()
    output = manager.ListProxy()

    for v in range(10):
        output.append(Container(v))
    print([str(v) for v in output])

    t1 = Process(target=process, args=(output, 0, 5))
    t2 = Process(target=process, args=(output, 5, 10))
    t1.start()
    t2.start()
    t1.join()
    t2.join()

    print([str(v) for v in output])

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20895886</id><snippet>\n</snippet></ROW><ROW><id>20895886</id><snippet>\r\n</snippet></ROW><ROW><id>20895886</id><snippet>'r'</snippet></ROW><ROW><id>20895886</id><snippet>\r\n</snippet></ROW><ROW><id>20895886</id><snippet>readline()</snippet></ROW><ROW><id>20895886</id><snippet>rU</snippet></ROW><ROW><id>20895886</id><snippet>open</snippet></ROW><ROW><id>20895886</id><snippet>\r\n</snippet></ROW><ROW><id>20895886</id><snippet>\r\n</snippet></ROW><ROW><id>20895886</id><snippet>\n</snippet></ROW><ROW><id>20895886</id><snippet>\r</snippet></ROW><ROW><id>20895886</id><snippet>\n</snippet></ROW><ROW><id>20895886</id><snippet>'rb'</snippet></ROW><ROW><id>20895886</id><snippet>\n</snippet></ROW><ROW><id>20895886</id><snippet>\r</snippet></ROW><ROW><id>20895886</id><snippet>csv</snippet></ROW><ROW><id>20895886</id><snippet>with open(R'C:\temp\datasets\a13GBfile.csv','rb') as f:
    for row in csv.reader(f):
        # do stuff
</snippet></ROW><ROW><id>20895886</id><snippet>list</snippet></ROW><ROW><id>20895965</id><snippet>str.strip</snippet></ROW><ROW><id>20895965</id><snippet>str.split</snippet></ROW><ROW><id>20895965</id><snippet>&gt;&gt;&gt; '[X:Y:Z]'.strip('[]')
'X:Y:Z'
&gt;&gt;&gt; '[X:Y:Z]'.strip('[]').split(':')
['X', 'Y', 'Z']
&gt;&gt;&gt; '[X:Y:Z]'.strip('[]').split(':')[1]
'Y'
</snippet></ROW><ROW><id>20895965</id><snippet>&gt;&gt;&gt; '[X:Y:Z]'.split(':')
['[X', 'Y', 'Z]']
&gt;&gt;&gt; '[X:Y:Z]'.split(':')[1]
'Y'
</snippet></ROW><ROW><id>20896082</id><snippet>cursor</snippet></ROW><ROW><id>20896082</id><snippet>for a,b in cursor:
    print a,b
</snippet></ROW><ROW><id>20896082</id><snippet>&gt;&gt;&gt; cursor = [(1, u'one'), (2, u'two'), (3, u'three'), (4, u'four')]
&gt;&gt;&gt; for a,b in cursor:
...     print a,b
...
1 one
2 two
3 three
4 four
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20896169</id><snippet>fromfile-prefix-chars</snippet></ROW><ROW><id>20896169</id><snippet>@</snippet></ROW><ROW><id>20896169</id><snippet>sys.argv</snippet></ROW><ROW><id>20896169</id><snippet>parser = argparse.ArgumentParser(fromfile_prefix_chars='@')
parser.add_argument('urls',nargs='+')  # require 1 or more url
args = parser.parse_args()
</snippet></ROW><ROW><id>20896169</id><snippet>urls.txt</snippet></ROW><ROW><id>20896169</id><snippet>parser.parse_args('four.txt'.split())
parser.parse_args('@urls.txt four.txt'.split())
parser.parse_args('@urls.txt'.split())
</snippet></ROW><ROW><id>20896169</id><snippet>parser.parse_args(''.split())
</snippet></ROW><ROW><id>20896169</id><snippet>help</snippet></ROW><ROW><id>20896169</id><snippet>@url.txt</snippet></ROW><ROW><id>20896169</id><snippet>-i</snippet></ROW><ROW><id>20896169</id><snippet>fromfile_prefix_chars</snippet></ROW><ROW><id>20896359</id><snippet>from PyQt4 import QtCore, QtGui, QtNetwork

class Window(QtGui.QWidget):
    def __init__(self, address):
        QtGui.QWidget.__init__(self)
        self.address = address
        self.table = QtGui.QTableWidget(self)
        header = self.table.horizontalHeader()
        header.setStretchLastSection(True)
        header.hide()
        self.table.setColumnCount(2)
        self.button = QtGui.QPushButton('Add Upload', self)
        self.button.clicked.connect(self.handleAddUpload)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.table)
        layout.addWidget(self.button)
        self.netaccess = QtNetwork.QNetworkAccessManager(self)
        self._uploaders = {}

    def handleAddUpload(self):
        stream = QtCore.QFile('files/sample.tar.bz2')
        if stream.open(QtCore.QIODevice.ReadOnly):
            data = stream.readAll()
            stream.close()
            row = self.table.rowCount()
            button = QtGui.QPushButton('Abort', self.table)
            button.clicked.connect(lambda: self.handleAbort(row))
            progress = QtGui.QProgressBar(self.table)
            progress.setRange(0, len(data))
            self.table.setRowCount(row + 1)
            self.table.setCellWidget(row, 0, button)
            self.table.setCellWidget(row, 1, progress)
            uploader = self._uploaders[row] = Uploader(row, self.netaccess)
            uploader.uploadProgress.connect(self.handleUploadProgress)
            uploader.uploadFinished.connect(self.handleUploadFinished)
            uploader.upload(data, self.address)

    def handleUploadProgress(self, key, sent, total):
        print('upload(%d): %d [%d]' % (key, sent, total))
        progress = self.table.cellWidget(key, 1)
        progress.setValue(sent)

    def handleUploadFinished(self, key):
        print('upload(%d) finished' % key)
        button = self.table.cellWidget(key, 0)
        button.setDisabled(True)
        uploader = self._uploaders.pop(key)
        uploader.deleteLater()

    def handleAbort(self, key):
        try:
            self._uploaders[key].abort()
        except (KeyError, AttributeError):
            pass

class Uploader(QtCore.QObject):
    uploadProgress = QtCore.pyqtSignal(object, int, int)
    uploadFinished = QtCore.pyqtSignal(object)

    def __init__(self, key, parent):
        QtCore.QObject.__init__(self, parent)
        self._key = key
        self._reply = None

    def abort(self):
        if self._reply is not None:
            self._reply.abort()

    def upload(self, data, url):
        if self._reply is None:
            request = QtNetwork.QNetworkRequest(QtCore.QUrl(url))
            request.setHeader(
                QtNetwork.QNetworkRequest.ContentTypeHeader,
                'application/x-www-form-urlencoded')
            self._reply = self.parent().post(request, data)
            self._reply.uploadProgress.connect(self.handleUploadProgress)
            self._reply.finished.connect(self.handleFinished)

    def handleUploadProgress(self, sent, total):
        self.uploadProgress.emit(self._key, sent, total)
        if sent &gt;= total:
            # prevent duplicated uploads
            self._reply.close()

    def handleFinished(self):
        self._reply.deleteLater()
        self._reply = None
        self.uploadFinished.emit(self._key)

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window('http://localhost:54321/upload')
    window.setGeometry(500, 300, 500, 300)
    window.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20896568</id><snippet>line =[X,Y]# a list of all variables

w = OptionMenu(root, (#not important), *line)
</snippet></ROW><ROW><id>20896885</id><snippet>n</snippet></ROW><ROW><id>20896885</id><snippet>nth</snippet></ROW><ROW><id>20896885</id><snippet>Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
</snippet></ROW><ROW><id>20896885</id><snippet>F1 = 1
F2 = 1
F3 = 2
F4 = 3
F5 = 5
F6 = 8
F7 = 13
F8 = 21
F9 = 34
F10 = 55
F11 = 89
F12 = 144
</snippet></ROW><ROW><id>20896937</id><snippet>+=</snippet></ROW><ROW><id>20896937</id><snippet>proc3</snippet></ROW><ROW><id>20896937</id><snippet>mylist+=[9]
</snippet></ROW><ROW><id>20896937</id><snippet>mylist</snippet></ROW><ROW><id>20896937</id><snippet>[7, 8]</snippet></ROW><ROW><id>20896937</id><snippet>[7, 8, 9]</snippet></ROW><ROW><id>20897348</id><snippet>#!</snippet></ROW><ROW><id>20897348</id><snippet>#!</snippet></ROW><ROW><id>20897348</id><snippet>txt = "\xe0\xa7\xb7"
</snippet></ROW><ROW><id>20897348</id><snippet>txt = u"\u09f7"
</snippet></ROW><ROW><id>20897348</id><snippet>.encode('utf-8')</snippet></ROW><ROW><id>20897348</id><snippet>txt = u"৷"
outFileFd.write(txt.encode('utf-8'))
</snippet></ROW><ROW><id>20897348</id><snippet>.encode('utf-8')</snippet></ROW><ROW><id>20897348</id><snippet>txt = "৷"
outFileFd.write(txt)
</snippet></ROW><ROW><id>20897348</id><snippet>.encode</snippet></ROW><ROW><id>20897348</id><snippet>b</snippet></ROW><ROW><id>20897399</id><snippet>print item + str(i)
</snippet></ROW><ROW><id>20897399</id><snippet>print item.rstrip() + str(i)
</snippet></ROW><ROW><id>20897399</id><snippet>function</snippet></ROW><ROW><id>20897399</id><snippet>.format</snippet></ROW><ROW><id>20897399</id><snippet>print '{}{}'.format(item.strip(), i)
</snippet></ROW><ROW><id>20897399</id><snippet>str()</snippet></ROW><ROW><id>20897619</id><snippet>zip</snippet></ROW><ROW><id>20897619</id><snippet>&gt;&gt;&gt; a = [['a', 'x'], ['b', 'y'], ['c', 'z']]
&gt;&gt;&gt; b = [['d', 'x'], ['e', 'y'], ['f', 'm']]
&gt;&gt;&gt; [[x[0], y[0]] for x, y in zip(a, b) if x[1]==y[1]]
[['a', 'd'], ['b', 'e']]
</snippet></ROW><ROW><id>20897634</id><snippet>RandomForestClassifier()</snippet></ROW><ROW><id>20897634</id><snippet>RandomForestRegressor()</snippet></ROW><ROW><id>20897634</id><snippet>n_jobs</snippet></ROW><ROW><id>20897634</id><snippet>LogisticRegression()</snippet></ROW><ROW><id>20897820</id><snippet>man 7 pipe</snippet></ROW><ROW><id>20897820</id><snippet>write()</snippet></ROW><ROW><id>20897937</id><snippet>csv</snippet></ROW><ROW><id>20897937</id><snippet>psycopg</snippet></ROW><ROW><id>20897937</id><snippet>%s</snippet></ROW><ROW><id>20897937</id><snippet>connect_string = 'dbname=test host=localhost port=5493 user=postgres password=postgres'
connection = psycopg2.connect(connect_string)
cursor = connection.cursor()
f = open(fn, 'rt')
try:
    reader = csv.reader(f)
    cols = []
    for row in reader:
        if not cols:
            cols = row
            psycopg_marks  = ','.join(['%s' for s in cols])
            insert_statement = "INSERT INTO xyz (%s) VALUES (%s)" % (','.join(cols), psycopg_marks)
            print(insert_statement)
        else:
            print(row)
            cursor.execute(insert_statement, row)
finally:
    f.close()

...
</snippet></ROW><ROW><id>20897954</id><snippet>ctypes.wintypes</snippet></ROW><ROW><id>20897954</id><snippet>ctypes.wintypes</snippet></ROW><ROW><id>20897954</id><snippet>&gt;&gt;&gt; import ctypes.wintypes
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20897954</id><snippet>&gt;&gt;&gt; import ctypes.wintypes
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.7/ctypes/wintypes.py", line 23, in &lt;module&gt;
    class VARIANT_BOOL(_SimpleCData):
ValueError: _type_ 'v' not supported
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20898292</id><snippet>key</snippet></ROW><ROW><id>20898292</id><snippet>x</snippet></ROW><ROW><id>20898292</id><snippet>x[0]</snippet></ROW><ROW><id>20898292</id><snippet>x</snippet></ROW><ROW><id>20898292</id><snippet>&gt;&gt;&gt; a = [11, 10, (12, 52)]
&gt;&gt;&gt; sorted(a, key=lambda x: x[0] if isinstance(x, tuple) else x)
[10, 11, (12, 52)]
</snippet></ROW><ROW><id>20898301</id><snippet>axes.fill_between(x, y_distrib_1, 0, where = (-1&lt;x) &amp; (x&lt;1))</snippet></ROW><ROW><id>20898526</id><snippet>itsdangerous.py</snippet></ROW><ROW><id>20898526</id><snippet>import os
import sys

sys.path.insert(1, os.path.join(os.path.abspath('.'), 'lib'))
import application
</snippet></ROW><ROW><id>20898539</id><snippet>import sys
sys.stdout = open('file', 'w')
print 'test' # prints test to file
</snippet></ROW><ROW><id>20898539</id><snippet>import sys

class Logger(object):
    def __init__(self, *files):
        self.files = files

    def write(self, obj):
        for f in self.files:
            f.write(obj)

f = open('file', 'w')
sys.stdout = Logger(f, sys.stdout)

print "Python Magic"
</snippet></ROW><ROW><id>20898641</id><snippet>    &lt;select id="item_product"&gt;
    {% for ip in items %}
        &lt;option value="{{ ip.program_id }}/{{ ip.sector_id }}/"&gt;{{ ip }}&lt;/option&gt;
    {% endfor %}
    &lt;/select&gt;
</snippet></ROW><ROW><id>20898641</id><snippet>    @render_to('pick_item.html')
    def pick_item(request):
        person = request.user.get_profile()
        items = ItemProduct.objects.filter(program__in=person.programs).select_related('program', 'sector')
        return {'items': items }
</snippet></ROW><ROW><id>20899069</id><snippet>#Add all GUI Elements to Class
self.amountLabel = QtGui.QLabel('Amount')
self.counterLabel = QtGui.QLabel('Counter')
self.totalLabel = QtGui.QLabel('Total')
self.amountSpin = QtGui.QSpinBox()
self.counterSpin = QtGui.QSpinBox()
</snippet></ROW><ROW><id>20899069</id><snippet># ACTIONS
self.amountSpin.valueChanged[str].connect(self.onChanged)
self.counterSpin.valueChanged[str].connect(self.onChanged)
</snippet></ROW><ROW><id>20899069</id><snippet>def onChanged(self, val):
    #we ignore the val and just get the values directly from our spinboxes
    sum = self.amountSpin.Value + self.counterSpin.Value
    #and display them
    self.totalOutput.setText(QString(sum))
    self.totalOutput.adjustSize()
</snippet></ROW><ROW><id>20899182</id><snippet>group</snippet></ROW><ROW><id>20899182</id><snippet>items</snippet></ROW><ROW><id>20899182</id><snippet>&gt;&gt;&gt; for group, items in itertools.groupby('aabbbccdddee'):
...     print group, list(items)
a [u'a', u'a']
b [u'b', u'b', u'b']
c [u'c', u'c']
d [u'd', u'd', u'd']
e [u'e', u'e']
</snippet></ROW><ROW><id>20899182</id><snippet>&gt;&gt;&gt; for group, items in itertools.groupby('aaAaAAbBbcCdDdDeE', lambda x: x.lower()):
...     print group, list(items)
a [u'a', u'a', u'A', u'a', u'A', u'A']
b [u'b', u'B', u'b']
c [u'c', u'C']
d [u'd', u'D', u'd', u'D']
e [u'e', u'E']
</snippet></ROW><ROW><id>20899182</id><snippet>&gt;&gt;&gt; for group, items in itertools.groupby('aaAaAAbBbcCdDdDeE'):
...     print group, list(items)
a [u'a', u'a']
A [u'A']
a [u'a']
A [u'A', u'A']
b [u'b']
B [u'B']
b [u'b']
c [u'c']
C [u'C']
d [u'd']
D [u'D']
d [u'd']
D [u'D']
e [u'e']
E [u'E']
</snippet></ROW><ROW><id>20899182</id><snippet>list</snippet></ROW><ROW><id>20899182</id><snippet>&gt;&gt;&gt; grouped = itertools.groupby('aabbbccdddee')
&gt;&gt;&gt; group, items = next(grouped)
&gt;&gt;&gt; print group, items   # the "_grouper" object is an iterator of items in group "a"
a &lt;itertools._grouper object at 0x0000000002648DA0&gt;
&gt;&gt;&gt; next(grouped)   # we move to the next group
(u'b', &lt;itertools._grouper object at 0x0000000002648630&gt;)
&gt;&gt;&gt; print list(items)   # oops, items vanished!
[]
</snippet></ROW><ROW><id>20899182</id><snippet>next(grouped)</snippet></ROW><ROW><id>20899182</id><snippet>list</snippet></ROW><ROW><id>20899182</id><snippet>_grouper</snippet></ROW><ROW><id>20899225</id><snippet>    String buff0 = "03";
    String buff1 = "0300";
    String buff2 = "8028";

    String packet = buff0 + buff1 + buff2;

    byte[] b = new BigInteger(packet,16).toByteArray();



    try {
        Socket socket = new Socket("192.168.0.2", 22);
        OutputStream socketOutputStream = socket.getOutputStream();
        socketOutputStream.write(b);
        InputStream socketInput = socket.getInputStream();
        System.out.println(socketInput.read());
        socket.close();
    } catch (IOException e) {
        e.printStackTrace();
    }
</snippet></ROW><ROW><id>20899397</id><snippet>MySQLdb</snippet></ROW><ROW><id>20899531</id><snippet>re.findall</snippet></ROW><ROW><id>20899531</id><snippet>&gt;&gt;&gt; ldicts = [{'name': '120-150'}, {'name': '90-120'}, {'name': '150-180'}, {'name': '&gt;= 180'}, {'name': '&lt;90'}, {'name': 'total'}]
&gt;&gt;&gt;
&gt;&gt;&gt; import re
&gt;&gt;&gt; sorted(ldicts, key=lambda d: map(int, re.findall(r'\d+', d['name'])))
[{'name': 'total'}, {'name': '&lt;90'}, {'name': '90-120'}, {'name': '120-150'}, {'name': '150-180'}, {'name': '&gt;= 180'}]
</snippet></ROW><ROW><id>20899531</id><snippet>map(int, ...)</snippet></ROW><ROW><id>20899531</id><snippet>list(map(int, ...))</snippet></ROW><ROW><id>20899540</id><snippet>import urllib2
accesstoken="CAACEdEose0cBACF6HpTDEuVEwVnjx1sHOJFS3ZBQZBsoWqKKyFl93xwZCxKysqsQMUgOZBLjJoMurSxinn96pgbdfSYbyS9Hh3pULdED8Tv255RgnsYmnlxvR7JZCN7X25zP6fRnRK0ZCNmChfLPejaltwM2JGtPGYBQwnmAL9tQBKBmbZAkGYCEQHAbUf7k1YZD"
urllib2.urlopen("https://graph.facebook.com/search?limit=5000&amp;type=page&amp;q=%26&amp;access_token="+accesstoken+"&amp;__after_id=139433456868").read()
</snippet></ROW><ROW><id>20899540</id><snippet>def getSecretToken(verification_code):

token_url = ( "https://graph.facebook.com/oauth/access_token?" +
                      "client_id=" + app_id +
                      "&amp;redirect_uri=" +my_url +
                      "&amp;client_secret=" + app_secret +
                      "&amp;code=" + verification_code )
response = requests.get(token_url).content

params = {}
result = response.split("&amp;", 1)
print result
for p in result:
    (k,v) = p.split("=")
    params[k] = v
return params['access_token']
</snippet></ROW><ROW><id>20899540</id><snippet>    verification_code=""
if "code" in request.query:
    verification_code = request.query["code"]

if not verification_code:
    dialog_url = ( "http://www.facebook.com/dialog/oauth?" +
                       "client_id=" + app_id +
                       "&amp;redirect_uri=" + my_url +
                       "&amp;scope=publish_stream" )
    return "&lt;script&gt;top.location.href='" + dialog_url + "'&lt;/script&gt;"
else:
    access_token = getSecretToken(verification_code)
</snippet></ROW><ROW><id>20899685</id><snippet>#!/usr/bin/python

import os

# Hello world python program
print "Content-Type: text/html;charset=utf-8";
print

handler = {}
if 'HTTP_COOKIE' in os.environ:
    cookies = os.environ['HTTP_COOKIE']
    cookies = cookies.split('; ')

    for cookie in cookies:
        cookie = cookie.split('=')
        handler[cookie[0]] = cookie[1]

for k in handler:
    print k + " = " + handler[k] + "&lt;br&gt;
</snippet></ROW><ROW><id>20900022</id><snippet>@name.getter
</snippet></ROW><ROW><id>20900022</id><snippet>@name.setter
</snippet></ROW><ROW><id>20900022</id><snippet>name</snippet></ROW><ROW><id>20900022</id><snippet>name</snippet></ROW><ROW><id>20900024</id><snippet>au FileType python set shiftwidth=2
</snippet></ROW><ROW><id>20900072</id><snippet>csv</snippet></ROW><ROW><id>20900072</id><snippet>csv.reader</snippet></ROW><ROW><id>20900072</id><snippet>csv.reader(f.read().decode('utf-8-sig').encode('utf-8').splitlines())
</snippet></ROW><ROW><id>20900072</id><snippet>def remove_bom(line):
    return line[3:] if line.startswith(codecs.BOM_UTF8) else line

csv.reader((remove_bom(line) for line in f), dialect = 'excel', delimiter = ';')
</snippet></ROW><ROW><id>20900072</id><snippet>def remove_bom_from_first(iterable):
    f = iter(iterable)
    firstline = next(f, None)
    if firstline is not None:
        yield remove_bom(firstline)
        for line in f:
            yield f
</snippet></ROW><ROW><id>20900206</id><snippet>qry = "INSERT INTO myTable VALUES ({0}, {1})".format(var1, var2)
</snippet></ROW><ROW><id>20900333</id><snippet>from nltk.corpus import wordnet as wn
from nltk.stem import PorterStemmer
from itertools import chain

bank_sents = ['I went to the bank to deposit my money',
'The river bank was full of dead fishes']

plant_sents = ['The workers at the industrial plant were overworked',
'The plant was no longer bearing flowers']

ps = PorterStemmer()

def lesk(context_sentence, ambiguous_word, pos=None, stem=True, hyperhypo=True):
    max_overlaps = 0; lesk_sense = None
    context_sentence = context_sentence.split()
    for ss in wn.synsets(ambiguous_word):
        # If POS is specified.
        if pos and ss.pos is not pos:
            continue

        lesk_dictionary = []

        # Includes definition.
        lesk_dictionary+= ss.definition.split()
        # Includes lemma_names.
        lesk_dictionary+= ss.lemma_names

        # Optional: includes lemma_names of hypernyms and hyponyms.
        if hyperhypo == True:
            lesk_dictionary+= list(chain(*[i.lemma_names for i in ss.hypernyms()+ss.hyponyms()]))       

        if stem == True: # Matching exact words causes sparsity, so lets match stems.
            lesk_dictionary = [ps.stem(i) for i in lesk_dictionary]
            context_sentence = [ps.stem(i) for i in context_sentence] 

        overlaps = set(lesk_dictionary).intersection(context_sentence)

        if len(overlaps) &gt; max_overlaps:
            lesk_sense = ss
            max_overlaps = len(overlaps)
    return lesk_sense

print "Context:", bank_sents[0]
answer = lesk(bank_sents[0],'bank')
print "Sense:", answer
print "Definition:",answer.definition
print

print "Context:", bank_sents[1]
answer = lesk(bank_sents[1],'bank','n')
print "Sense:", answer
print "Definition:",answer.definition
print

print "Context:", plant_sents[0]
answer = lesk(plant_sents[0],'plant','n', True)
print "Sense:", answer
print "Definition:",answer.definition
print
</snippet></ROW><ROW><id>20900515</id><snippet>poll</snippet></ROW><ROW><id>20900515</id><snippet>communicate</snippet></ROW><ROW><id>20900515</id><snippet># Starts encoding in a subprocess
proc = subprocess.Popen(['ffmpeg', '-i' 'myinput', 'myoutput'])

duration = 3
sleeptime = 0
while proc.poll() is None and sleeptime &lt; 3: 
    # Wait for the specific duration or for the process to finish
    sleep(1)
    sleeptime += 1

# If process is not terminated
if proc.poll() is None:
    # Cancels process, waits for it to complete
    proc.communicate("q")
</snippet></ROW><ROW><id>20900515</id><snippet>duration</snippet></ROW><ROW><id>20900820</id><snippet>*</snippet></ROW><ROW><id>20900820</id><snippet>path = os.path.join(*my_list)
</snippet></ROW><ROW><id>20900820</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; lis = ['foo', 'bar']
&gt;&gt;&gt; os.path.join(*lis)
'foo\\bar'
</snippet></ROW><ROW><id>20900820</id><snippet>*</snippet></ROW><ROW><id>20900820</id><snippet>from itertools import chain

def func(*args):
    print args

func(1, 2, *chain(range(5), [2]))
#(1, 2, 0, 1, 2, 3, 4, 2)
</snippet></ROW><ROW><id>20900820</id><snippet>list</snippet></ROW><ROW><id>20900851</id><snippet>import bottle

class WebServer():
    message1 = 'hello message1'

    def __init__(self):
        self.message2 = 'hello message2'
        bottle.run(host='localhost', port=8080)

    def hello(self):
        # here I would like to return message1 or message2
        # return 'unfortunately only a static message so far'
        # now it works
        return self.message1  # or self.message2

w = WebServer()
bottle.route('/hello', 'GET', w.hello)
</snippet></ROW><ROW><id>20900851</id><snippet>@bottle.error(404)
def error404(error):
    print('error 404')
    return
</snippet></ROW><ROW><id>20900851</id><snippet>bottle.error</snippet></ROW><ROW><id>20901369</id><snippet>dataset = [{'': 0, 'FAILED': 412.698, 'PASSED': 587.301},
           {'': 440, 'FAILED': 31.746, 'PASSED': 968.253},
           {'': 880, 'FAILED': 253.968, 'PASSED': 746.031},
           {'': 1320, 'FAILED': 714.285, 'PASSED': 285.714}]

data_orders = [['', 'FAILED', 'PASSED'],
               ['', 'FAILED', 'PASSED'],
               ['', 'PASSED', 'FAILED'],
               ['', 'PASSED', 'FAILED']]

FAILED = []
PASSED = []     
for dataset_row,data_order_row in zip(dataset,data_orders):
    if data_order_row[1] == 'FAILED':
        FAILED.append((dataset_row[''],dataset_row['FAILED']+dataset_row['']))
        PASSED.append((dataset_row['FAILED']+dataset_row[''],dataset_row['FAILED']+dataset_row['']+dataset_row['PASSED']))
    else:
        FAILED.append((dataset_row['']+dataset_row['PASSED'],dataset_row['FAILED']+dataset_row['']+dataset_row['PASSED']))
        PASSED.append((dataset_row[''],dataset_row['']+dataset_row['PASSED']))


soln_failed = [(0, 412.698), (440, 471.746), (1626.031, 1879.999), (1605.714, 2319.999)]
soln_passed = [(412.698, 999.999), (471.746, 1439.999), (880, 1626.031), (1320, 1605.714)]

print FAILED == soln_failed
print PASSED == soln_passed
</snippet></ROW><ROW><id>20901402</id><snippet>with open("string.txt", "rb") as fin:
    content = json.load(fin)
with open("stringJson.txt", "wb") as fout:
    json.dump(content, fout, indent=1)
</snippet></ROW><ROW><id>20901424</id><snippet>print [{"name":dic["name"], "order":tr[dic["name"]]} for dic in l]
</snippet></ROW><ROW><id>20901424</id><snippet>[{'name': 'inAnalysis', 'order': 1},
 {'name': 'inQuest', 'order': 3},
 {'name': 'inDevelopment', 'order': 2}]
</snippet></ROW><ROW><id>20901424</id><snippet>for dic in l: dic["order"] = tr[dic["name"]]
</snippet></ROW><ROW><id>20901559</id><snippet>import csv
with open('test.csv', 'w') as csvfile:
    csvwriter = csv.writer(csvfile, delimiter=',')
    csvwriter.writerows(Python_List)
</snippet></ROW><ROW><id>20901676</id><snippet>curl -H 'Accept:application/json' -d "key=value&amp;key1=value1" http://www.example.com/
</snippet></ROW><ROW><id>20901716</id><snippet>ratios = []
for i in range(-2, len(players) - 2):
    if i &lt; 0:
       ratios.append(1 - (i * 0.33)) # ratio &gt; 1
    else:
        ratios.append(1 / (1 + (i * 0.33))) # ratio &lt;= 1
winnings = [pot * r for r in ratios]
</snippet></ROW><ROW><id>20901716</id><snippet>players[i]</snippet></ROW><ROW><id>20901716</id><snippet>winnings[i]</snippet></ROW><ROW><id>20901716</id><snippet>pot / 1.33</snippet></ROW><ROW><id>20901716</id><snippet>ratios == [1.6600000000000001, 1.33, 1.0, 0.7518796992481203, 
           0.6024096385542168, 0.5025125628140703, 0.43103448275862066, 
           0.3773584905660377, 0.33557046979865773, 0.3021148036253776]
</snippet></ROW><ROW><id>20901761</id><snippet>gmp-devel</snippet></ROW><ROW><id>20901761</id><snippet>pip</snippet></ROW><ROW><id>20901967</id><snippet>#!/usr/bin/python

print "Content-Type: text/html;charset=utf-8";
print

import urllib

str = "Hello World?"
str = urllib.quote_plus(str)

print str
</snippet></ROW><ROW><id>20902152</id><snippet>numpy.around</snippet></ROW><ROW><id>20902152</id><snippet>numpy.round</snippet></ROW><ROW><id>20902152</id><snippet>numpy.rint</snippet></ROW><ROW><id>20902152</id><snippet>1.5</snippet></ROW><ROW><id>20902152</id><snippet>6.5</snippet></ROW><ROW><id>20902152</id><snippet>round</snippet></ROW><ROW><id>20902314</id><snippet>&lt;script src="//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>20902366</id><snippet>OS: Windows-7-6.1.7601-SP1
Python: 2.7.3 (default, Apr 10 2012, 23:31:26) [MSC v.1500 32 bit (Intel)]
cx_Freeze: 4.2.3
</snippet></ROW><ROW><id>20902366</id><snippet>hello_tkinter.py</snippet></ROW><ROW><id>20902366</id><snippet>from Tkinter import *
import ttk

class Main(Tk):
    def __init__(self, *args, **kwargs):
        Tk.__init__(self, *args, **kwargs)

        self.frame = ttk.Frame(self)
        self.frame.pack(expand=True, fill=BOTH, padx=5, pady=5)

        self.button = ttk.Button(self.frame, text="Test")
        self.button.pack(expand=True, fill=BOTH)

root = Main()
root.mainloop()
</snippet></ROW><ROW><id>20902366</id><snippet>cx_freeze</snippet></ROW><ROW><id>20902366</id><snippet>c:\Python27\Scripts\cxfreeze.bat hello_tkinter.py --target-dir=Bin/tkinter --base-name=Win32GUI --target-name=hello_tkinter.exe
</snippet></ROW><ROW><id>20902366</id><snippet>tcl\
tk\
_ctypes.pyd
_tkinter.pyd
bz2.pyd
hello_tkinter.exe
MSVCR90.dll
python27.dll
tcl85.dll
tk85.dll
unicodedata.pyd
</snippet></ROW><ROW><id>20902489</id><snippet>feedparser</snippet></ROW><ROW><id>20902489</id><snippet>import feedparser

feed = feedparser.parse('http://www.tradingeconomics.com/rss/news.aspx')

for item in feed.entries:
    print item.title, item.author
</snippet></ROW><ROW><id>20902489</id><snippet>&gt;&gt;&gt; import feedparser
&gt;&gt;&gt; feed = feedparser.parse('http://www.tradingeconomics.com/rss/news.aspx')
&gt;&gt;&gt; for item in feed.entries:
...     print item.title, item.author
... 
Latvia Retail Sales MoM Central Statistical Bureau of Latvia
China Foreign Exchange Reserves People's Bank of China
Latvia Retail Sales YoY Central Statistical Bureau of Latvia
Spain Business Confidence Ministry of Industry, Tourism and Trade, Spain
Italy Consumer Price Index (CPI) National Institute of Statistics (ISTAT)
Italy Inflation Rate National Institute of Statistics (ISTAT)
Cyprus Inflation Rate Statistical Service of the Republic of Cyprus
# .... and many more lines
</snippet></ROW><ROW><id>20902725</id><snippet> args = [{"args":("-u", "--url"), 
          "kwargs": {"action": "store", "dest": "url", "default": url, 
                     "help": 'test script URL like "http://127.0.0.1/isof/hdb_ver_xml.hdb" or "hdb://127.0.0.1/isof/hdb_ver_xml.hdb"'}
         }, ...]
</snippet></ROW><ROW><id>20902725</id><snippet>try:
    import argparse
    parser = argparse.ArgumentParser()
    for arg in args:
        parser.add_argument(*arg['args'], **arg['kwargs'])
except:
    import optparse
    parser = optparse.OptionParser()
    for arg in args:
        parser.add_option(*arg['args'], **arg['kwargs'])
</snippet></ROW><ROW><id>20902725</id><snippet>try</snippet></ROW><ROW><id>20902725</id><snippet>try:
    import argparse
except ImportError:
    import optparse
    parser = optparse.OptionParser()
    add_func = parser.add_option
else:
    parser = argparse.ArgumentParser()
    add_func = parser.add_argument

for arg in args:
    add_func(*arg["args"], **arg["kwargs"])
</snippet></ROW><ROW><id>20902816</id><snippet>map</snippet></ROW><ROW><id>20902816</id><snippet>int</snippet></ROW><ROW><id>20902816</id><snippet>str</snippet></ROW><ROW><id>20902816</id><snippet>print map(int, str(number))
</snippet></ROW><ROW><id>20902816</id><snippet>str</snippet></ROW><ROW><id>20902816</id><snippet>number</snippet></ROW><ROW><id>20902816</id><snippet>map</snippet></ROW><ROW><id>20902816</id><snippet>int</snippet></ROW><ROW><id>20902816</id><snippet>[1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>20902816</id><snippet>map</snippet></ROW><ROW><id>20902816</id><snippet>number = 123456789123456789
from timeit import timeit
print timeit("map(int, str(number))", "from __main__ import number")
print timeit("[int(dig) for dig in str(number)]", "from __main__ import number")
</snippet></ROW><ROW><id>20902816</id><snippet>12.8388962786
10.7739010307
</snippet></ROW><ROW><id>20903018</id><snippet>#! /usr/bin/python

import sys
import pycurl

class Test:
    def __init__(self):
        self.contents = ''

    def body_callback(self, buf):
        self.contents = self.contents + buf

sys.stderr.write("Testing %s\n" % pycurl.version)

t = Test()
c = pycurl.Curl()
c.setopt(c.URL, 'http://curl.haxx.se/dev/')
c.setopt(c.WRITEFUNCTION, t.body_callback)
c.perform()
c.close()

print(t.contents)
</snippet></ROW><ROW><id>20903553</id><snippet>df[[col for col in df.columns if "Vibration" in col]]
</snippet></ROW><ROW><id>20903553</id><snippet>filter</snippet></ROW><ROW><id>20903553</id><snippet>df.filter(like="Vibration")
</snippet></ROW><ROW><id>20903553</id><snippet>regex</snippet></ROW><ROW><id>20903553</id><snippet>df.filter(regex='Ecc|Vibration')
</snippet></ROW><ROW><id>20903949</id><snippet>import struct
with open("foo.bin", 'wb') as f:
    f.write(struct.pack('h', 0b0010010110101))
</snippet></ROW><ROW><id>20903949</id><snippet>h</snippet></ROW><ROW><id>20903949</id><snippet>f.write('$')</snippet></ROW><ROW><id>20903949</id><snippet>0b0010010110101</snippet></ROW><ROW><id>20903949</id><snippet>short</snippet></ROW><ROW><id>20903949</id><snippet>struct.pack('h', 1205)</snippet></ROW><ROW><id>20903949</id><snippet>\xb5\x04</snippet></ROW><ROW><id>20903949</id><snippet>&gt;&gt;&gt; 0x04 * 256 + 0xb5
1205
</snippet></ROW><ROW><id>20903949</id><snippet>def encode(binary):
    # Aligning on bytes
    binary = '0' * (8 - len(binary) % 8) + binary
    # Generating the corresponding character for each
    # byte encountered
    return ''.join(chr(int('0b' + binary[i:i+8], base = 2)) 
                   for i in xrange(0, len(binary), 8))
</snippet></ROW><ROW><id>20903949</id><snippet>&gt;&gt;&gt; encode('001001001010100100100100100111110010101110100')
'\x04\x95$\x93\xe5t'
</snippet></ROW><ROW><id>20903949</id><snippet>with open("foo.bin", 'wb') as f:
    f.write('\x04\x95$\x93\xe5t')

&gt;&gt;&gt; os.path.getsize("foo.bin")
6L
</snippet></ROW><ROW><id>20903949</id><snippet>struct</snippet></ROW><ROW><id>20903949</id><snippet>chr</snippet></ROW><ROW><id>20903949</id><snippet>def encode2(binary):
    rawbytes = []
    while binary &gt; 0:
        binary, byte = divmod(binary, 256)
        rawbytes.append(byte)
    fmt_string = '%sB' % len(rawbytes)
    print "Encoding %s into %s bytes (%s)" % (rawbytes, len(rawbytes), fmt_string)
    return struct.pack(fmt_string, *rawbytes)

&gt;&gt;&gt; encode2(0b001001001010100100100100100111110010101110100)
Encoding [116L, 229L, 147L, 36L, 149L, 4L] into 6 bytes (6B)
't\xe5\x93$\x95\x04'
</snippet></ROW><ROW><id>20903949</id><snippet>encode</snippet></ROW><ROW><id>20903949</id><snippet>struct</snippet></ROW><ROW><id>20903949</id><snippet>&gt;&gt;&gt; bytes = struct.unpack('6B', 't\xe5\x93$\x95\x04')
&gt;&gt;&gt; bytes
(116, 229, 147, 36, 149, 4)
&gt;&gt;&gt; bin(sum(x * 256 ** i for i, x in enumerate(bytes)))
'0b1001001010100100100100100111110010101110100'
</snippet></ROW><ROW><id>20904256</id><snippet>cursor.execute("SELECT * FROM posts WHERE tags LIKE ?", ('%{}%'.format(tag),))
</snippet></ROW><ROW><id>20904256</id><snippet>?</snippet></ROW><ROW><id>20904256</id><snippet>'%'value'%'</snippet></ROW><ROW><id>20904309</id><snippet>.asc()</snippet></ROW><ROW><id>20904309</id><snippet>.desc()</snippet></ROW><ROW><id>20904309</id><snippet>ResultsDBHistory.postsize</snippet></ROW><ROW><id>20904309</id><snippet>order = 'asc'
column_sorted = getattr(ResultsDBHistory.postsize, order)()
sql_session.query(ResultsDBHistory).order_by(column_sorted).limit(max_items_shown)
</snippet></ROW><ROW><id>20904309</id><snippet>asc</snippet></ROW><ROW><id>20904309</id><snippet>desc</snippet></ROW><ROW><id>20904433</id><snippet>all</snippet></ROW><ROW><id>20904433</id><snippet>property</snippet></ROW><ROW><id>20904433</id><snippet>class A(object):
    a = 'z'
    b = 'b'
    c = 'c'

    @property
    def all(self):
        return (self.a, self.b, self.c)
</snippet></ROW><ROW><id>20904433</id><snippet>&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.all
('z', 'b', 'c')
&gt;&gt;&gt; a.a = 'a'
&gt;&gt;&gt; a.all
('a', 'b', 'c')
</snippet></ROW><ROW><id>20904963</id><snippet>toggled()</snippet></ROW><ROW><id>20904963</id><snippet>setVisible()</snippet></ROW><ROW><id>20904963</id><snippet>toggled()</snippet></ROW><ROW><id>20904963</id><snippet>setDisabled()</snippet></ROW><ROW><id>20905380</id><snippet>from flask import request

@app.route('/contact', methods=['GET','POST'])
def contact():
    form = ContactForm(request.form)
    if request.method == "POST" and form.validate():
        # do something with form
        # and probably return a redirect
    return render_template("contact.html", form=form)
</snippet></ROW><ROW><id>20905380</id><snippet>render_template</snippet></ROW><ROW><id>20905486</id><snippet>results = []
result = []
for num in inputlist:
    if sum(result) + num &lt; 100:
        result.append(num)
    else:
        results.append([tuple(result), sum(result)])
        result = [num]
if result:
    results.append([tuple(result), sum(result)])
</snippet></ROW><ROW><id>20905486</id><snippet>[[(25, 50), 75], [(70,), 70], [(32, 10, 20), 62], [(50, 40), 90], [(30,), 30]]
</snippet></ROW><ROW><id>20905540</id><snippet>yn.copy()</snippet></ROW><ROW><id>20905540</id><snippet>yn</snippet></ROW><ROW><id>20905540</id><snippet>.copy()</snippet></ROW><ROW><id>20905540</id><snippet>copy.deepcopy()</snippet></ROW><ROW><id>20905540</id><snippet>import copy

status = {"creation": copy.deepcopy(yn), "update": copy.deepcopy(yn)}
</snippet></ROW><ROW><id>20905540</id><snippet>yn</snippet></ROW><ROW><id>20905540</id><snippet>make_yn = lambda: {"success":{}, "error":{}}
status = {"creation": make_yn(), "update": make_yn()}
</snippet></ROW><ROW><id>20905555</id><snippet>CACHE_TYPE</snippet></ROW><ROW><id>20905555</id><snippet>"null"</snippet></ROW><ROW><id>20905555</id><snippet>app.config["CACHE_TYPE"] = "null"
# change to "redis" and restart to cache again

# some time later
cache.init_app(app)

# All caching functions will simply call through
# to the wrapped function, with no caching
# (since NullCache does not cache).
</snippet></ROW><ROW><id>20905659</id><snippet>N = 10
n0 = 0
n_array = np.arange(n0, n0 + N, 1)
u = pd.Series(index = n_array)
u[n0] = 1
q = 1.2
# option 1:
u = pd.Series(u[n0]*q**(u.index.values - n0), index = n_array)
# or option 2 with cumprod
u[1:] = q
u = u.cumprod()
</snippet></ROW><ROW><id>20905696</id><snippet>a, b, c, d = raw_input("what name would you like your 4 lists to be\n").split(',')
</snippet></ROW><ROW><id>20905696</id><snippet>split</snippet></ROW><ROW><id>20905805</id><snippet>&lt;form method="POST"&gt;
        Search:&lt;input type = "text" name = "rssquery"&gt;&lt;br&gt;
        &lt;input type = "submit"&gt;
    &lt;/form&gt;
</snippet></ROW><ROW><id>20905805</id><snippet>def post(self):
        x = self.request.get("rssquery")
        if x:
            self.redirect("/extract")  
</snippet></ROW><ROW><id>20905953</id><snippet>value</snippet></ROW><ROW><id>20905953</id><snippet>for key, value in dct.iteritems():
    if 'players' in value:
        for name, player in value['players'].iteritems():
            print name, player
</snippet></ROW><ROW><id>20905953</id><snippet>players</snippet></ROW><ROW><id>20905953</id><snippet>players</snippet></ROW><ROW><id>20905983</id><snippet>GROUP BY</snippet></ROW><ROW><id>20905983</id><snippet>SELECT * FROM table</snippet></ROW><ROW><id>20905983</id><snippet>directory</snippet></ROW><ROW><id>20906041</id><snippet>import string

if len(name) &gt; 10 or any(l not in string.ascii_letters for l in name):
    # reject
</snippet></ROW><ROW><id>20906041</id><snippet>if cls not in ["5A1", "5A2", ...]:
    # reject
</snippet></ROW><ROW><id>20906041</id><snippet>def validate_class(cls):
    if (len(cls) != 3 or 
        int(cls[0]) not in [5, 6] or
        cls[1] not in ["A", "B", "C"] or 
        int(cls[2]) not in [1, 2]):
        return False
    return True
</snippet></ROW><ROW><id>20906041</id><snippet>cls</snippet></ROW><ROW><id>20906328</id><snippet>from collections import deque

with open('yourfile') as fin:
    last = deque(fin, 1)
    try:
        lat, lon = last[0].split('|', 3)[:2]
    except (IndexError, ValueError):
        pass # uh oh... no line, or no data in it...
</snippet></ROW><ROW><id>20906328</id><snippet>import mmap

with open('yourfile') as fin:
    try:
        mm = mmap.mmap(fin.fileno(), 0, access=mmap.ACCESS_READ)
        last_line = mm[mm.rfind('\n') + 1:]
        lat, lon = last_line.split('|', 3)[:2]
    except (ValueError, IndexError):
        pass # uh oh....
</snippet></ROW><ROW><id>20906329</id><snippet>groupby</snippet></ROW><ROW><id>20906329</id><snippet>unstack</snippet></ROW><ROW><id>20906329</id><snippet>pivot_table</snippet></ROW><ROW><id>20906329</id><snippet>In [13]: df.pivot_table(rows='Animal', cols='FeedType', values='Amount(kg)', aggfunc='sum')
Out[13]:
FeedType   A   B
Animal
Animal1   10   5
Animal2    2  13
Animal3    6 NaN
</snippet></ROW><ROW><id>20906394</id><snippet>sudo pip install setuptools --no-use-wheel --upgrade
</snippet></ROW><ROW><id>20906394</id><snippet>pip install setuptools --no-use-wheel --upgrade</snippet></ROW><ROW><id>20906394</id><snippet>sudo</snippet></ROW><ROW><id>20906447</id><snippet>dict</snippet></ROW><ROW><id>20906461</id><snippet>execute_manager</snippet></ROW><ROW><id>20906461</id><snippet>manage.py</snippet></ROW><ROW><id>20906461</id><snippet>execute_manager</snippet></ROW><ROW><id>20906461</id><snippet>manage.py</snippet></ROW><ROW><id>20906750</id><snippet>with</snippet></ROW><ROW><id>20906750</id><snippet>csv</snippet></ROW><ROW><id>20906750</id><snippet>import csv

final_out = [(['2893541', 'OVERALL', 'friendly and genuine.'], 77), (['2893382', 'SPEED', 'timely manner."'], 63)]

with open('text.txt', 'wb') as fh:
    writer = csv.writer(fh, delimiter='\t')

    for row in final_out:
        writer.writerow(row[0] + [row[1]])
</snippet></ROW><ROW><id>20906918</id><snippet>&gt;&gt;&gt; from itertools import count
&gt;&gt;&gt; lis = [ [(6, 8, 9), 111], [(15, ), 22], [(11, 20), 80] ]
&gt;&gt;&gt; c = count(0)
#If you want a list of list then use: [[next(c) for _ in x[0]] for x in lis] 
&gt;&gt;&gt; [tuple(next(c) for _ in x[0]) for x in lis]
[(0, 1, 2), (3,), (4, 5)]
</snippet></ROW><ROW><id>20907062</id><snippet>content = content.decode('utf-8')
</snippet></ROW><ROW><id>20907120</id><snippet>    def load_plugins(self):
        if not os.path.exists(self.plugins_folder):
            os.makedirs(self.plugins_folder)

        plugin_folder_content = os.listdir(self.plugins_folder)

        for content in plugin_folder_content:
            content_path = os.path.join(self.plugins_folder, content)
            if os.path.isdir(content_path):
                plugin_entry_point_path = os.path.join(content_path, "__init__.py")
                if os.path.exists(plugin_entry_point_path):
                    try:
                         with open(plugin_entry_point_path, 'r') as file:
                             sys.path.insert(1, content_path)
                             exec(compile(file.read(), "script", "exec"), {"igor": self, "IgorPlugin": IgorPlugin, 'path': content_path})
                             sys.path.remove(content_path)
                    except Exception as exc:
                         sys.exit(exc)
</snippet></ROW><ROW><id>20907120</id><snippet>import os

files_path = os.path.join(path, "files.py")

exec(compile(open(files_path).read(), "script", "exec"), {"igor": igor, "IgorPlugin": IgorPlugin})
</snippet></ROW><ROW><id>20907359</id><snippet>python test.py '"one"' '"two"'
</snippet></ROW><ROW><id>20907359</id><snippet>literal_eval</snippet></ROW><ROW><id>20907359</id><snippet>argparse</snippet></ROW><ROW><id>20907369</id><snippet>path</snippet></ROW><ROW><id>20907369</id><snippet>path + "\\" + item</snippet></ROW><ROW><id>20907369</id><snippet>os.path.isfile(path+"\\"+item)</snippet></ROW><ROW><id>20907369</id><snippet>os.path.isdir(path+"\\"+item)</snippet></ROW><ROW><id>20907369</id><snippet>False</snippet></ROW><ROW><id>20907369</id><snippet>def func(path,no):
    no=no+2
    for item in os.listdir(path):
        if os.path.isfile(path+"\\"+item):
            print no * "-" + " " + item
        if os.path.isdir(path+"\\"+item):
            print no * "-" + " " + item
            func(path + "\\" + item,no)
</snippet></ROW><ROW><id>20907480</id><snippet>def saveFile(path, filename):
    savedFileCount, savedFileSize = 0, 0
    filepath = os.path.join(path, filename)
    if SUBFOLDER:
        try:
            subpath = os.path.join(SAVEPATH, path.split("\\", 1)[1])
            if not os.path.exists(subpath):
                os.makedirs(subpath)
            shutil.copy(filepath, subpath)
            savedFileCount = 1
            savedFileSize = os.path.getsize(filepath)/(1024*1024)
        except BaseException as e:
            logging.exception(e)
    else:
        try:
            shutil.copy(filepath, SAVEPATH)
            savedFileCount = 1
            savedFileSize += os.path.getsize(filepath)/(1024*1024)
        except BaseException as e:
            logging.exception(e)
    return savedFileCount, savedFileSize
</snippet></ROW><ROW><id>20907480</id><snippet>totalCount, totalSize = 0
for path, filename in tobesaved:
    count, size = saveFile(path, filename)
    totalCount += count
    totalSize += size
</snippet></ROW><ROW><id>20907649</id><snippet>targets = ".,'"
a = "I'll buy paper,pen and beg"
punct = [ (i, c) for i, c in enumerate (a) if c in targets]
nopunct = [c for c in a if c not in targets][::-1]
for i, c in punct: nopunct.insert (i, c)
b = ''.join (nopunct)
print (a)
print (b)
</snippet></ROW><ROW><id>20907649</id><snippet>g'eb dna nepre,pap yub llI
I'll buy paper,pen and beg
</snippet></ROW><ROW><id>20907649</id><snippet>.,</snippet></ROW><ROW><id>20907649</id><snippet>geb dna neprep,ap yub ll'I
I'll buy paper,pen and beg
</snippet></ROW><ROW><id>20907731</id><snippet>PRIMARY</snippet></ROW><ROW><id>20907731</id><snippet>xclip</snippet></ROW><ROW><id>20907731</id><snippet>xclip</snippet></ROW><ROW><id>20907731</id><snippet>import subprocess

print(subprocess.check_output(['xclip', '-o', '-selection', 'PRIMARY']))
</snippet></ROW><ROW><id>20907768</id><snippet>log</snippet></ROW><ROW><id>20907768</id><snippet>StreamHandler</snippet></ROW><ROW><id>20907768</id><snippet>FileHandler</snippet></ROW><ROW><id>20907768</id><snippet>import logging
log = logging.getLogger("your-logger-name")
log.addHandler(logging.StreamHandler())
log.setLevel(logging.DEBUG)
</snippet></ROW><ROW><id>20907768</id><snippet>FileHandler</snippet></ROW><ROW><id>20907851</id><snippet>subprocess.Popen("cmd.exe /c callee.py arg1 arg2")
</snippet></ROW><ROW><id>20907921</id><snippet>new.py</snippet></ROW><ROW><id>20907921</id><snippet>new.pyc</snippet></ROW><ROW><id>20907972</id><snippet> m = hashlib.sha256(line)
</snippet></ROW><ROW><id>20907972</id><snippet>#!usr/bin/python
# Filename: doesnt_work

import os
import hashlib

with open("wl.txt","r") as f:
    for line in f.readlines():
        line = line.rstrip("\n")

        m = hashlib.sha256(line)
        print(m.hexdigest())
</snippet></ROW><ROW><id>20908339</id><snippet>import os
import pandas as pd
</snippet></ROW><ROW><id>20908339</id><snippet>path = os.getcwd()
files = os.listdir(path)
files
</snippet></ROW><ROW><id>20908339</id><snippet>['.DS_Store',
 '.ipynb_checkpoints',
 '.localized',
 'Screen Shot 2013-12-28 at 7.15.45 PM.png',
 'test1 2.xls',
 'test1 3.xls',
 'test1 4.xls',
 'test1 5.xls',
 'test1.xls',
 'Untitled0.ipynb',
 'Werewolf Modelling',
 '~$Random Numbers.xlsx']
</snippet></ROW><ROW><id>20908339</id><snippet>files_xls = [f for f in files if f[-3:] == 'xls']
files_xls
</snippet></ROW><ROW><id>20908339</id><snippet>['test1 2.xls', 'test1 3.xls', 'test1 4.xls', 'test1 5.xls', 'test1.xls']
</snippet></ROW><ROW><id>20908339</id><snippet>df = pd.DataFrame()
</snippet></ROW><ROW><id>20908339</id><snippet>for f in files_xls:
    data = pd.read_excel(f, 'Sheet1')
    df = df.append(data)
</snippet></ROW><ROW><id>20908339</id><snippet>df
</snippet></ROW><ROW><id>20908339</id><snippet>  Result  Sample
0      a       1
1      b       2
2      c       3
3      d       4
4      e       5
5      f       6
6      g       7
7      h       8
8      i       9
9      j      10
0      a       1
1      b       2
2      c       3
3      d       4
4      e       5
5      f       6
6      g       7
7      h       8
8      i       9
9      j      10
0      a       1
1      b       2
2      c       3
3      d       4
4      e       5
5      f       6
6      g       7
7      h       8
8      i       9
9      j      10
0      a       1
1      b       2
2      c       3
3      d       4
4      e       5
5      f       6
6      g       7
7      h       8
8      i       9
9      j      10
0      a       1
1      b       2
2      c       3
3      d       4
4      e       5
5      f       6
6      g       7
7      h       8
8      i       9
9      j      10
</snippet></ROW><ROW><id>20908353</id><snippet>list.count</snippet></ROW><ROW><id>20908353</id><snippet>&gt;&gt;&gt; ls = [1, 2, 3, 3]
&gt;&gt;&gt; [x for x in ls if ls.count(x) == 1]
[1, 2]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20908353</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; ls = [1, 2, 3, 3]
&gt;&gt;&gt; c = Counter(ls)
&gt;&gt;&gt; [x for x in ls if c[x] == 1]
[1, 2]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20908353</id><snippet>collections.Counter</snippet></ROW><ROW><id>20908523</id><snippet>run()</snippet></ROW><ROW><id>20908523</id><snippet>enter()</snippet></ROW><ROW><id>20908523</id><snippet>print</snippet></ROW><ROW><id>20908523</id><snippet>return</snippet></ROW><ROW><id>20908523</id><snippet>class Engine:
    def __init__(self):
        self.scenes = [Scene1(),Scene2(),Scene3()]
    def run(self):
        for s in self.scenes:
            print s.enter()

Engine().run()
</snippet></ROW><ROW><id>20908523</id><snippet>Some text describing the scene bla bla
Scene2
Some text describing the scene bla bla
Scene3
Some text describing the scene bla bla
finished
</snippet></ROW><ROW><id>20908523</id><snippet>class Scene1(Scene):
    def enter(self):
        print "Some text describing the scene bla bla"
        raw = raw_input("Guess the number")
        if raw != "42":
            return 'Scene1'
        return 'Scene2'

class Engine:
    def __init__(self):
        self.scenes = {'Scene1':Scene1(),'Scene2':Scene2(),'Scene3':Scene3()}
    def run(self):
        next = 'Scene1'
        while True:
            if next == 'finished':
                break;
            next = self.scenes.get(next).enter()

Engine().run()
</snippet></ROW><ROW><id>20908527</id><snippet>    # STYLING
    self.setStyleSheet("QLabel { color: rgb(50, 50, 50); font-size: 11px; background-color: rgba(188, 188, 188, 50); border: 1px solid rgba(188, 188, 188, 250); } QSpinBox { color: rgb(50, 50, 50); font-size: 11px; background-color: rgba(255, 188, 20, 50); }")

    #setting CS of self (the widget) and not the children

    self.setGeometry(800, 400, 250, 80)
    self.setWindowTitle('Simple Calculator')
    self.show()
</snippet></ROW><ROW><id>20908527</id><snippet>label1.setProperty('labelClass', 'red')
label2.setProperty('labelClass', 'blue')
</snippet></ROW><ROW><id>20908527</id><snippet>QLabel[labelClass="red"] {...}
QLabel[labelClass="blue"] {...}
</snippet></ROW><ROW><id>20908715</id><snippet>IDLE</snippet></ROW><ROW><id>20908718</id><snippet>pod_available</snippet></ROW><ROW><id>20908718</id><snippet>HttpRequest</snippet></ROW><ROW><id>20908718</id><snippet>'dd'</snippet></ROW><ROW><id>20908718</id><snippet>def pod_available(request):
    dat = request['dd']
    return HttpResponse("&lt;html&gt;&lt;body&gt;Hello&lt;em&gt;" + str(dat) + "&lt;/em&gt;&lt;/body&gt;&lt;/html&gt;")
</snippet></ROW><ROW><id>20908733</id><snippet>&gt;&gt;&gt; list1 = [ [0, 1], [2], [3], [4,5,6,7], [8,9], [10], [11,12] ]
&gt;&gt;&gt; for sublist in list1:
...     print ' '.join(map(str, sublist))
... 
0 1
2
3
4 5 6 7
8 9
10
11 12
</snippet></ROW><ROW><id>20908857</id><snippet>##</snippet></ROW><ROW><id>20908857</id><snippet>${x}</snippet></ROW><ROW><id>20908857</id><snippet>s = "#This would be a Python comment"
print(s) # returns "#This would be a Python comment"
</snippet></ROW><ROW><id>20908948</id><snippet>user_ids_with_profile_images = Profile_images.objects.all().values_list('user_id', flat=True)
</snippet></ROW><ROW><id>20908948</id><snippet>profile.user_id not in user_ids_with_profile_images</snippet></ROW><ROW><id>20908982</id><snippet>big_frame.to_csv('C:\DRO\test.csv', encoding='utf-8')</snippet></ROW><ROW><id>20909017</id><snippet>list(list(tuple(word,tag))</snippet></ROW><ROW><id>20909017</id><snippet>tuple(list(list(word)),list(list(tag)))</snippet></ROW><ROW><id>20909017</id><snippet>def convert(data_structure):
     sentences, tags = data_structure
     container = []
     for i in xrange(len(sentences)):
         container.append(zip(sentences[i], tags[i]))

     return container
</snippet></ROW><ROW><id>20909017</id><snippet>for</snippet></ROW><ROW><id>20909017</id><snippet>def convert(data_structure):
    sentences = []
    tags = []

    for sentence in data_structure:
        sentence_words = []
        sentence_tags = []

        for word, tag in sentence:
            sentence_words.append(word)
            sentence_tags.append(tag)

        sentences.append(sentence_words)
        tags.append(sentence_tags)

    return (sentences, tags)
</snippet></ROW><ROW><id>20909069</id><snippet>self</snippet></ROW><ROW><id>20909069</id><snippet>Square</snippet></ROW><ROW><id>20909069</id><snippet>) so that the buttons are children of the</snippet></ROW><ROW><id>20909069</id><snippet>Grid</snippet></ROW><ROW><id>20909069</id><snippet>class App(Frame):
    def __init__(self, master):
        self.matrix = Grid(self, 10, 10)
        self.label = Label(self, text="Hello")
        self.matrix.grid(row=0, column=0, sticky="nsew")

        self.label.grid(row=0, column=1, sticky="nsew")
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)
</snippet></ROW><ROW><id>20909113</id><snippet>In [10]: import numpy as np

In [11]: groups = [[1,2],[3,4,5]]

In [12]: map(np.mean, groups)
Out[12]: [1.5, 4.0]
</snippet></ROW><ROW><id>20909166</id><snippet>sites = sel.xpath("//div[@id='llista-resultats']/div")
items = []
for site in sites:
    item = BcnItem()
    item['title'] = site.xpath("h3/a/text()").extract()
    item['url'] = site.xpath("h3/a/@href").extract()
    item['when'] = site.xpath("div[@class='dades']/dl/dd/text()").extract()
    items.append(item)
return items
</snippet></ROW><ROW><id>20909360</id><snippet>pcolor</snippet></ROW><ROW><id>20909360</id><snippet>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

Index= ['aaa', 'bbb', 'ccc', 'ddd', 'eee']
Cols = ['A', 'B', 'C', 'D']
data= np.random.random((5, 4))
df = pd.DataFrame(data, index=Index, columns=Cols)

plt.pcolor(df &gt; 0.5, cmap='RdYlGn')
plt.yticks(np.arange(0.5, len(df.index), 1), df.index)
plt.xticks(np.arange(0.5, len(df.columns), 1), df.columns)
plt.show()
</snippet></ROW><ROW><id>20909360</id><snippet>import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

Index= ['aaa', 'bbb', 'ccc', 'ddd', 'eee']
Cols = ['A', 'B', 'C', 'D']
data= np.random.random((5, 4))
df = pd.DataFrame(data, index=Index, columns=Cols)

# Values from 0-0.5 will be red and 0.5-1 will be green
cmap, norm = mcolors.from_levels_and_colors([0, 0.5, 1], ['red', 'green'])

plt.pcolor(df, cmap=cmap, norm=norm)
plt.yticks(np.arange(0.5, len(df.index), 1), df.index)
plt.xticks(np.arange(0.5, len(df.columns), 1), df.columns)
plt.show()
</snippet></ROW><ROW><id>20909360</id><snippet>pcolormesh</snippet></ROW><ROW><id>20909360</id><snippet>pcolor</snippet></ROW><ROW><id>20909360</id><snippet>pcolor</snippet></ROW><ROW><id>20909360</id><snippet>imshow</snippet></ROW><ROW><id>20909360</id><snippet>imshow(data, interpolation='nearest', aspect='auto', origin='lower')</snippet></ROW><ROW><id>20909360</id><snippet>pcolor</snippet></ROW><ROW><id>20909360</id><snippet>pcolormesh</snippet></ROW><ROW><id>20909497</id><snippet>querystring</snippet></ROW><ROW><id>20909497</id><snippet>table.html</snippet></ROW><ROW><id>20909497</id><snippet>querystring</snippet></ROW><ROW><id>20909497</id><snippet>table.html</snippet></ROW><ROW><id>20909497</id><snippet>GET</snippet></ROW><ROW><id>20909497</id><snippet>my_choice</snippet></ROW><ROW><id>20909497</id><snippet>my_choice</snippet></ROW><ROW><id>20909497</id><snippet>[]</snippet></ROW><ROW><id>20909497</id><snippet>.get()</snippet></ROW><ROW><id>20909497</id><snippet>my_filter = TestFilter(request.GET)
my_choice = my_filter.data.get('my_choice') # This won't throw an exception
if my_choice: # If my_choice existed on the GET dictionary this will return non-null value
    table = TestTable(TestObj.objects.filter(choice=my_choice), order_by="-my_date")
else:
    table = TestTable(TestObj.objects.all(), order_by="-my_date")
RequestConfig(request, paginate={"per_page": 10}).configure(table)
return render(request, 'test_app/index.html', {'table': table, 'my_filter': my_filter})
</snippet></ROW><ROW><id>20909497</id><snippet>request.method</snippet></ROW><ROW><id>20909497</id><snippet>GET</snippet></ROW><ROW><id>20909497</id><snippet>GET</snippet></ROW><ROW><id>20909497</id><snippet>POST</snippet></ROW><ROW><id>20909497</id><snippet>{{ csrf_token }}</snippet></ROW><ROW><id>20909497</id><snippet>POST</snippet></ROW><ROW><id>20909497</id><snippet>TestFilter</snippet></ROW><ROW><id>20909497</id><snippet>Form</snippet></ROW><ROW><id>20909497</id><snippet>TestFilterForm</snippet></ROW><ROW><id>20909497</id><snippet>FilterSet</snippet></ROW><ROW><id>20909497</id><snippet>TestFilter</snippet></ROW><ROW><id>20909497</id><snippet>TestFilter</snippet></ROW><ROW><id>20909497</id><snippet>FilterSet</snippet></ROW><ROW><id>20909497</id><snippet>Form</snippet></ROW><ROW><id>20909604</id><snippet>repr()</snippet></ROW><ROW><id>20909604</id><snippet>print</snippet></ROW><ROW><id>20909604</id><snippet>str()</snippet></ROW><ROW><id>20909604</id><snippet>sum()</snippet></ROW><ROW><id>20909604</id><snippet>repr()</snippet></ROW><ROW><id>20909604</id><snippet>print</snippet></ROW><ROW><id>20909604</id><snippet>str()</snippet></ROW><ROW><id>20909604</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; tote = datetime.timedelta(0, 25200), datetime.timedelta(0, 25200)
&gt;&gt;&gt; brac = sum(tote, datetime.timedelta(0))
&gt;&gt;&gt; brac
datetime.timedelta(0, 50400)
&gt;&gt;&gt; print brac
14:00:00
&gt;&gt;&gt; repr(brac)
'datetime.timedelta(0, 50400)'
</snippet></ROW><ROW><id>20909604</id><snippet>brac</snippet></ROW><ROW><id>20909637</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; x = '''CS ID=123 HD=CT NE="HI THERE"'''
&gt;&gt;&gt; re.findall("""\w+="[^"]*"|\w+='[^']*'|\w+=\w+|\w+""", x)
['CS', 'ID=123', 'HD=CT', 'NE="HI THERE"']
</snippet></ROW><ROW><id>20909637</id><snippet>&gt;&gt;&gt; map(''.join,re.findall("""(\w+=)"([^"]*)"|(\w+=)'([^']*)'|(\w+=\w+)|(\w+)""", x))
['CS', 'ID=123', 'HD=CT', 'NE=HI THERE']
</snippet></ROW><ROW><id>20909659</id><snippet>connection_string = "mssql+pyodbc://..."
</snippet></ROW><ROW><id>20909679</id><snippet>str.join()</snippet></ROW><ROW><id>20909679</id><snippet>new_list = [''.join([list0[i] for i in indices]) for indices in list1]
</snippet></ROW><ROW><id>20909679</id><snippet>&gt;&gt;&gt; list0 = ["Test", "Test2", "More text", "Test123", "ttt", "abc", "okokok", "Hello"]
&gt;&gt;&gt; list1 = [ [0, 1], [2], [3], [4,5,6], [7]]
&gt;&gt;&gt; [''.join([list0[i] for i in indices]) for indices in list1]
['TestTest2', 'More text', 'Test123', 'tttabcokokok', 'Hello']
</snippet></ROW><ROW><id>20909764</id><snippet>$ python --version
Python 2.7.2
$ python --version 1&gt;/dev/null # hide stdout
Python 2.7.2
$ python --version 2&gt;/dev/null # hide stderr
</snippet></ROW><ROW><id>20909764</id><snippet>cmd.Output</snippet></ROW><ROW><id>20909764</id><snippet>cmd.CombinedOutput</snippet></ROW><ROW><id>20909939</id><snippet>model SampleModel
  My_Gain gain;
  Modelica.Blocks.Sources.Sine source;

equation
  connect(source.y, gain.u);
end SampleModel;
</snippet></ROW><ROW><id>20909941</id><snippet>Lock</snippet></ROW><ROW><id>20909941</id><snippet>RLock</snippet></ROW><ROW><id>20909941</id><snippet>import datetime
import time
import threading

class AddToList(threading.Thread):

    def __init__(self, lock, entryList):
        threading.Thread.__init__(self)
        self.totalAdded = 0
        self.entryList = entryList
        self.lock = lock

    def run(self):
        while True:
            self.lock.acquire()
            entryList.append("AddToList at {}".format(datetime.datetime.now()))
            self.totalAdded += 1
            self.lock.release()
            print("totalAdded: {}".format(self.totalAdded))
            time.sleep(2)


class SaveList(threading.Thread):
    def __init__(self, lock, entryList):
        threading.Thread.__init__(self)
        self.totalSaved = 0
        self.entryList = entryList
        self.lock = lock

    def run(self):
        while True:
            self.lock.acquire()
            self.totalSaved += len(self.entryList)
            del self.entryList[:]
            self.lock.release()
            print("totalSaved: {}".format(self.totalSaved))
            time.sleep(3)


if __name__=="__main__":
    lock=threading.Lock()
    entryList=[]

    addClass = AddToList(lock, entryList)
    addClass.start()

    saveClass = SaveList(lock, entryList)
    saveClass.start()
</snippet></ROW><ROW><id>20910053</id><snippet>print sqlite.sqlite_version
</snippet></ROW><ROW><id>20910053</id><snippet>sqlite3 -version
</snippet></ROW><ROW><id>20910146</id><snippet>TEMPLATE_STRING_IF_INVALID</snippet></ROW><ROW><id>20910242</id><snippet>zip()</snippet></ROW><ROW><id>20910242</id><snippet>for a, b in zip(A(), B()):
</snippet></ROW><ROW><id>20910242</id><snippet>zip()</snippet></ROW><ROW><id>20910242</id><snippet>itertools.izip()</snippet></ROW><ROW><id>20910242</id><snippet>from itertools import izip

for a, b in izip(A(), B()):
</snippet></ROW><ROW><id>20910242</id><snippet>list(generator)</snippet></ROW><ROW><id>20910319</id><snippet>np.cross</snippet></ROW><ROW><id>20910319</id><snippet>xyz</snippet></ROW><ROW><id>20910319</id><snippet>x = a[1]*b[2] - a[2]*b[1]
y = a[2]*b[0] - a[0]*b[2]
z = a[0]*b[1] - a[1]*b[0]
</snippet></ROW><ROW><id>20910319</id><snippet>u = np.random.rand(1000, 3)
v = np.random.rand(2000, 3)

In [13]: %timeit s1 = np.cross(u[:, None, :], v[None, :, :])
1 loops, best of 3: 591 ms per loop
</snippet></ROW><ROW><id>20910319</id><snippet>np.einsum</snippet></ROW><ROW><id>20910319</id><snippet>eijk = np.zeros((3, 3, 3))
eijk[0, 1, 2] = eijk[1, 2, 0] = eijk[2, 0, 1] = 1
eijk[0, 2, 1] = eijk[2, 1, 0] = eijk[1, 0, 2] = -1

In [14]: %timeit s2 = np.einsum('ijk,uj,vk-&gt;uvi', eijk, u, v)
1 loops, best of 3: 706 ms per loop

In [15]: np.allclose(s1, s2)
Out[15]: True
</snippet></ROW><ROW><id>20910319</id><snippet>np.einsum</snippet></ROW><ROW><id>20910319</id><snippet>In [16]: %timeit s3 = np.einsum('iuk,vk-&gt;uvi', np.einsum('ijk,uj-&gt;iuk', eijk, u), v)
10 loops, best of 3: 63.4 ms per loop

In [17]: np.allclose(s1, s3)
Out[17]: True
</snippet></ROW><ROW><id>20910684</id><snippet>from selenium import webdriver
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities    
# enable browser logging
d = DesiredCapabilities.CHROME
d['loggingPrefs'] = { 'browser':'ALL' }
driver = webdriver.Chrome(desired_capabilities=d)
# load some site
driver.get('http://foo.com')
# print messages
for entry in driver.get_log('browser'):
    print entry
</snippet></ROW><ROW><id>20910684</id><snippet>source</snippet></ROW><ROW><id>20910684</id><snippet>'console-api'</snippet></ROW><ROW><id>20910684</id><snippet>message</snippet></ROW><ROW><id>20910950</id><snippet>bytes</snippet></ROW><ROW><id>20910950</id><snippet>int</snippet></ROW><ROW><id>20910950</id><snippet>value = int.from_bytes(your_bytes_value, byteorder='big')
bits_21_to_8 = (value &amp; 0x1fffff) &gt;&gt; 8
</snippet></ROW><ROW><id>20910950</id><snippet>0x1fffff</snippet></ROW><ROW><id>20910950</id><snippet>mask = 2 ** 21 - 1
</snippet></ROW><ROW><id>20910950</id><snippet>&gt;&gt;&gt; your_bytes_value = b'\x93\x4c\x00'
&gt;&gt;&gt; value = int.from_bytes(your_bytes_value, byteorder='big')
&gt;&gt;&gt; (value &amp; 0x1fffff) &gt;&gt; 8
4940
</snippet></ROW><ROW><id>20910950</id><snippet>int.to_bytes()</snippet></ROW><ROW><id>20910950</id><snippet>&gt;&gt;&gt; ((value &amp; 0x1fffff) &gt;&gt; 8).to_bytes(2, byteorder='big')
b'\x13L'
</snippet></ROW><ROW><id>20911005</id><snippet>''.join(chr(c) for c in recv_buffer)
</snippet></ROW><ROW><id>20911005</id><snippet>struct.unpack</snippet></ROW><ROW><id>20911005</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; b = [1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 4, 0, 0, 0, 51, 51, 163, 64, 51, 51, 195, 64, 51, 51, 227, 64]
&gt;&gt;&gt; struct.unpack("llllfff", ''.join(chr(c) for c in recv_buffer))
(1, 2, 3, 4, 5.0999999046325684, 6.0999999046325684, 7.0999999046325684)
</snippet></ROW><ROW><id>20911144</id><snippet>from datetime import datetime, timedelta

start = 2012.5
year = int(start)
rem = start - year

base = datetime(year, 1, 1)
result = base + timedelta(seconds=(base.replace(year=base.year + 1) - base).total_seconds() * rem)
# 2012-07-02 00:00:00
</snippet></ROW><ROW><id>20911166</id><snippet>&gt;&gt;&gt; data= (['a','','b',''],['c','',''])
&gt;&gt;&gt; tuple([e for e in l if e] for l in data)
(['a', 'b'], ['c'])
</snippet></ROW><ROW><id>20911166</id><snippet>&gt;&gt;&gt; data = ([],[''],['a', ''], ['b', 'c', '', 'd', '', 'e'])
&gt;&gt;&gt; tuple([e for e in l if e] for l in data)
([], [], ['a'], ['b', 'c', 'd', 'e'])
</snippet></ROW><ROW><id>20911166</id><snippet>tuple([e for e in l if e][:3] for l in data)
</snippet></ROW><ROW><id>20911166</id><snippet>tuple([e for e in l[:3] if e] for l in data)
</snippet></ROW><ROW><id>20911377</id><snippet>&lt;Prior&gt;</snippet></ROW><ROW><id>20911377</id><snippet>&lt;Next&gt;</snippet></ROW><ROW><id>20911377</id><snippet>from Tkinter import Tk

root = Tk()

def click(e):
    print "hi"

root.bind("&lt;Prior&gt;", click) # Bind to PageUp
root.bind("&lt;Next&gt;", click)  # Bind to PageDown

root.mainloop()
</snippet></ROW><ROW><id>20911416</id><snippet>tutor_var.trace('w', lambda name, index, mode: validate_enter_0_2)
</snippet></ROW><ROW><id>20911416</id><snippet>validate_enter_0_2</snippet></ROW><ROW><id>20911416</id><snippet>validate_enter_0_2</snippet></ROW><ROW><id>20911416</id><snippet>tutor_var.trace('w', lambda name, index, mode: validate_enter_0_2())
</snippet></ROW><ROW><id>20911416</id><snippet>name_var</snippet></ROW><ROW><id>20911416</id><snippet>validate_enter_0_2</snippet></ROW><ROW><id>20911416</id><snippet>validate_enter_2</snippet></ROW><ROW><id>20911416</id><snippet>NameError</snippet></ROW><ROW><id>20911416</id><snippet>validate_enter_2</snippet></ROW><ROW><id>20911416</id><snippet>enter_0_2</snippet></ROW><ROW><id>20911416</id><snippet>enter_2</snippet></ROW><ROW><id>20911416</id><snippet>name_var</snippet></ROW><ROW><id>20911416</id><snippet>StringVar</snippet></ROW><ROW><id>20911416</id><snippet>Exception in Tkinter callback
Traceback (most recent call last):
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/lib-tk/Tkinter.py", line 1410, in __call__
    return self.func(*args)
  File "tkval2.py", line 25, in callback
    if len(name_var) &gt; 10 or any(l not in string.ascii_letters for l in name_var):
AttributeError: StringVar instance has no attribute '__len__'
</snippet></ROW><ROW><id>20911416</id><snippet>Entry</snippet></ROW><ROW><id>20911416</id><snippet>get</snippet></ROW><ROW><id>20911416</id><snippet>StringVar</snippet></ROW><ROW><id>20911416</id><snippet>if len(name_var.get()) &gt; 10 or any(l not in string.ascii_letters for l in name_var.get())
</snippet></ROW><ROW><id>20911416</id><snippet>trace</snippet></ROW><ROW><id>20911416</id><snippet>name_var.set('')</snippet></ROW><ROW><id>20911416</id><snippet>tkMessageBox</snippet></ROW><ROW><id>20911416</id><snippet>def callback():
    if len(name_var.get()) &gt; 10:
        tkMessageBox.showerror("Bad name", "Your name is too long. What's wrong with good American names like Joe?")
        name_var.set('')
        return
    # the rest of your code here
</snippet></ROW><ROW><id>20911416</id><snippet>callback</snippet></ROW><ROW><id>20911416</id><snippet>validatecommand</snippet></ROW><ROW><id>20911416</id><snippet>trace</snippet></ROW><ROW><id>20911510</id><snippet>def scanTiles(self):
    m = curMap.map # this is a 2d matrix filled with tile-objects 
    x = int(self.trueX) # trueX &amp; trueY allow me to implement
    y = int(self.trueY) # a 'camera system'
    curTile = m[y // T_SIZE[1]][x // T_SIZE[0]] 
    i = curTile.index # (x, y) coordinate of tile on map

    nw = None # northwest
    n = None # north
    ne = None # northeast
    e = None # east
    se = None # southeast
    s = None # south
    sw = None # southwest
    w = None # west

    # Each if-statement uses map indices
    # to identify adjacent tiles. Ex:
    # NW  N  NE
    # W  CUR  E
    # SW  S  SE

    if i[0] &gt; 0 and i[1] &gt; 0:
        nw = m[i[1]-1][i[0]-1]
    if i[1] &gt; 0:
        n = m[i[1]-1][i[0]]
    if i[0] &lt; len(m[0])-1 and i[1] &gt; 0:
        ne = m[i[1]-1][i[0]+1]
    if i[0] &lt; len(m[0])-1:
        e = m[i[1]][i[0]+1]
    if i[0] &lt; len(m[0])-1 and i[1] &lt; len(m)-1:
        se = m[i[1]+1][i[0]+1]
    if i[1] &lt; len(m)-1:
        s = m[i[1]+1][i[0]]
    if i[1] &lt; len(m)-1 and i[0] &gt; 0:
        sw = m[i[1]+1][i[0]-1]
    if i[0] &gt; 0:
        w = m[i[1]][i[0]-1]
    return [nw, n, ne, e, se, s, sw, w]
</snippet></ROW><ROW><id>20911510</id><snippet>def collide(self, adjTiles): # adjTiles was returned from scanTiles()
    for tile in adjTiles:
        if tile:             # if a tile actually exists, it continues
            if tile.type == 'wall': # tile type can either be 'ground' or 'wall'
                if self.rect.colliderect(tile.rect1):
                    return True # if there is a collision, it returns 'True'
</snippet></ROW><ROW><id>20911558</id><snippet>strict digraph  {
{rank=same; 3; 4;}
    1 -&gt; 2;
    1 -&gt; 4;
    2 -&gt; 3;
}
</snippet></ROW><ROW><id>20911558</id><snippet>import pydot

node1 = pydot.Node(1)
node2 = pydot.Node(2)
node3 = pydot.Node(3)
node4 = pydot.Node(4)

P = pydot.Dot()
P.add_edge(pydot.Edge(node1,node2))
P.add_edge(pydot.Edge(node2,node3))
P.add_edge(pydot.Edge(node1,node4))

S = pydot.Subgraph(rank='same')
S.add_node(node3)
S.add_node(node4)
P.add_subgraph(S)
P.write('foo.dot')
</snippet></ROW><ROW><id>20911570</id><snippet>cmd</snippet></ROW><ROW><id>20911570</id><snippet>const char *</snippet></ROW><ROW><id>20911570</id><snippet>str(cmd)</snippet></ROW><ROW><id>20911570</id><snippet>const char *</snippet></ROW><ROW><id>20911570</id><snippet>char const *</snippet></ROW><ROW><id>20911570</id><snippet>const char *</snippet></ROW><ROW><id>20911570</id><snippet>char</snippet></ROW><ROW><id>20911570</id><snippet>char</snippet></ROW><ROW><id>20911570</id><snippet>const char *</snippet></ROW><ROW><id>20911570</id><snippet>char</snippet></ROW><ROW><id>20911570</id><snippet>Py_UNICODE</snippet></ROW><ROW><id>20911570</id><snippet>strlen</snippet></ROW><ROW><id>20911570</id><snippet>PyObject *strlen(PyObject *ignore, PyObject *obj)
{
  const char *c_string;
  size_t len;
  if (!PyString_Check(obj)) {
    PyErr_Format(PyExc_TypeError, "string expected, got %s", Py_TYPE(obj)-&gt;tp_name);
    return NULL;
  }
  c_string = PyString_AsString(obj);
  len = strlen(c_string);
  return PyInt_FromLong((long) len);
}
</snippet></ROW><ROW><id>20911570</id><snippet>PyString_AsString</snippet></ROW><ROW><id>20911570</id><snippet>strlen</snippet></ROW><ROW><id>20911570</id><snippet>strlen</snippet></ROW><ROW><id>20911570</id><snippet>PyObject *strlen(PyObject *ignore, PyObject *obj)
{
  const char *c_string;
  size_t len;
  PyObject *tmp = NULL;
  if (PyString_Check(obj))
    c_string = PyString_AsString(obj);
  else if (PyUnicode_Check(obj)) {
    if (!(tmp = PyUnicode_AsUTF8String(obj)))
      return NULL;
    c_string = PyString_AsString(tmp);
  }
  else {
    PyErr_Format(PyExc_TypeError, "string or unicode expected, got %s",
                 Py_TYPE(obj)-&gt;tp_name);
    return NULL;
  }
  len = strlen(c_string);
  if (tmp)
    Py_DECREF(tmp);
  return PyInt_FromLong((long) len);
}
</snippet></ROW><ROW><id>20911570</id><snippet>str</snippet></ROW><ROW><id>20911736</id><snippet>New_Thread</snippet></ROW><ROW><id>20911736</id><snippet>SRV.New_Thread()</snippet></ROW><ROW><id>20911736</id><snippet>threading.Thread(target=SRV.New_Thread).start()
</snippet></ROW><ROW><id>20911736</id><snippet>but1 = tkinter.Button(top, text ="send", command = self.buttonClick())
</snippet></ROW><ROW><id>20911736</id><snippet>self.buttonClick()</snippet></ROW><ROW><id>20911736</id><snippet>command</snippet></ROW><ROW><id>20911736</id><snippet>but1 = tkinter.Button(top, text ="send", command = self.buttonClick)
</snippet></ROW><ROW><id>20911736</id><snippet>except Exception as e:
    print('failed to connect:', e)
</snippet></ROW><ROW><id>20911736</id><snippet>failed to connect: local variable 'port' referenced before assignment
</snippet></ROW><ROW><id>20911736</id><snippet>self.p == ''</snippet></ROW><ROW><id>20911736</id><snippet>port</snippet></ROW><ROW><id>20911736</id><snippet>self.p</snippet></ROW><ROW><id>20911736</id><snippet>while True:</snippet></ROW><ROW><id>20911736</id><snippet>New_Thread</snippet></ROW><ROW><id>20911856</id><snippet>pattern = "haha"
text = "hahahaha"
[i for i in range(len(text)-len(pattern)+1) if text[i:].startswith(pattern)]
</snippet></ROW><ROW><id>20911869</id><snippet>'</snippet></ROW><ROW><id>20911869</id><snippet>"</snippet></ROW><ROW><id>20911869</id><snippet>"</snippet></ROW><ROW><id>20911869</id><snippet>SQL = """INSERT INTO AssetDetails
    (
        [Reporting Account Number],
        [As Of Date],
        [Asset Type],
        [Security Description 1],
        [Shares/Par],
        [Base Price],
        [Base Cost],
        CUSIP,
        Ticker,
        ISIN,
        SEDOL
    ) 
VALUES
    (
        'ABCD99020002',
        '1/31/2010',
        'CASH &amp; CASH EQUIVALENTS',
        'INTEREST RECEIVABLE',
        '0.000',
        '1.00',
        '1,171,069.04',
        '',
        '',
        '',
        ''
    );"""
</snippet></ROW><ROW><id>20912113</id><snippet>import foo.bar</snippet></ROW><ROW><id>20912113</id><snippet>from foo import bar</snippet></ROW><ROW><id>20912381</id><snippet>if __name__ == '__main__':
    #app.run()
    app.run(port=8000)
</snippet></ROW><ROW><id>20912381</id><snippet>command = /home/pi/hello/bin/python /home/pi/hello/bin/gunicorn hello:app -b 0.0.0.0:8000
</snippet></ROW><ROW><id>20912383</id><snippet>import csv

txt='''\
SNUMBER,FULL_ADDRE
822,822 E ASH AVE
1012,1012 BRIAR CREEK RD
1026,1026 N MADISON ST'''


for line in csv.reader(txt.splitlines()):
    print line
</snippet></ROW><ROW><id>20912383</id><snippet>['SNUMBER', 'FULL_ADDRE']
['822', '822 E ASH AVE']
['1012', '1012 BRIAR CREEK RD']
['1026', '1026 N MADISON ST']
</snippet></ROW><ROW><id>20912494</id><snippet>pkgutil</snippet></ROW><ROW><id>20912494</id><snippet>setuptools</snippet></ROW><ROW><id>20912494</id><snippet>bobzilla/__init__.py</snippet></ROW><ROW><id>20912494</id><snippet>__path__ = pkgutil.extend_path(__path__, __name__)
</snippet></ROW><ROW><id>20912494</id><snippet>bobzilla</snippet></ROW><ROW><id>20912494</id><snippet>__init__.py</snippet></ROW><ROW><id>20912770</id><snippet>set</snippet></ROW><ROW><id>20912974</id><snippet>try:</snippet></ROW><ROW><id>20912974</id><snippet>finally:</snippet></ROW><ROW><id>20912974</id><snippet>fd, pathname = tempfile.mkstemp()
try:
    dostuff(fd)
finally:
    os.close(fd)
</snippet></ROW><ROW><id>20912974</id><snippet>@contextlib.contextmanager
def mkstemping(*args):
    fd, pathname = tempfile.mkstemp(*args)
    try:
        yield fd
    finally:
        os.close(fd)
</snippet></ROW><ROW><id>20912974</id><snippet>with mkstemping() as fd:
    dostuff(fd)
</snippet></ROW><ROW><id>20912974</id><snippet>open</snippet></ROW><ROW><id>20912974</id><snippet>os.fdopen</snippet></ROW><ROW><id>20912974</id><snippet>mkstemp</snippet></ROW><ROW><id>20912974</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>20912974</id><snippet>with tempfile.NamedTemporaryFile(delete=False) as f:
    dostuff(f)
</snippet></ROW><ROW><id>20912974</id><snippet>with</snippet></ROW><ROW><id>20912974</id><snippet>cElementTree</snippet></ROW><ROW><id>20912974</id><snippet>fromstring</snippet></ROW><ROW><id>20912974</id><snippet>parse</snippet></ROW><ROW><id>20912974</id><snippet>req = requests.get(url)
with tempfile.NamedTemporaryFile() as f:
    f.write(req.content)
    f.seek(0)
    tree = ET.parse(f)
</snippet></ROW><ROW><id>20912974</id><snippet>req = requests.get(url)
tree = ET.fromstring(req.content)
</snippet></ROW><ROW><id>20912974</id><snippet>XMLParser</snippet></ROW><ROW><id>20912974</id><snippet>requests</snippet></ROW><ROW><id>20912974</id><snippet>req = requests.get(url, stream=True)
parser = ET.XMLParser()
for chunk in iter(lambda: req.raw.read(8192), ''):
    parser.feed(chunk)
tree = parser.close()
</snippet></ROW><ROW><id>20912974</id><snippet>fromstring</snippet></ROW><ROW><id>20912974</id><snippet>iter</snippet></ROW><ROW><id>20912974</id><snippet>req = requests.get(url, stream=True)
parser = ET.XMLParser()
while True:
    chunk = req.raw.read(8192)
    if not chunk:
        break
    parser.feed(chunk)
tree = parser.close()
</snippet></ROW><ROW><id>20913040</id><snippet>django.utils.decorators.method_decorator</snippet></ROW><ROW><id>20913040</id><snippet>from django.utils.decorators import method_decorator
...

class DashboardView(TemplateView):
    template_name="omninectar/dashboard.html"

    def get_context_data(self, **kwargs):
        ....

    @method_decorator(active_and_login_required)
    def dispatch(self, *args, **kwargs):
        return super(DashboardView, self).dispatch(*args, **kwargs)
</snippet></ROW><ROW><id>20913093</id><snippet>",".join(["{" + e + "}" for e in myList]) 
</snippet></ROW><ROW><id>20913093</id><snippet>",".join(["{%s}" % e for e in myList])
</snippet></ROW><ROW><id>20913178</id><snippet>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; d = decimal.Decimal("9.0")
&gt;&gt;&gt; d
Decimal('9.0')
&gt;&gt;&gt; help(d.normalize)
Help on method normalize in module decimal:

normalize(self, context=None) method of decimal.Decimal instance
    Normalize- strip trailing 0s, change anything equal to 0 to 0e0

&gt;&gt;&gt; d.normalize()
Decimal('9')
&gt;&gt;&gt; str(d)
'9.0'
&gt;&gt;&gt; str(d.normalize())
'9'
</snippet></ROW><ROW><id>20913178</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>20913178</id><snippet>&gt;&gt;&gt; d = decimal.Decimal("100.000")
&gt;&gt;&gt; d
Decimal('100.000')
&gt;&gt;&gt; d.normalize()
Decimal('1E+2')
</snippet></ROW><ROW><id>20913178</id><snippet>normalize()</snippet></ROW><ROW><id>20913178</id><snippet>import re
trailing0 = re.compile(r"""(\.       # decimal point
                            \d*?)    # and as few digits as possible
                           0+$       # before at least 1 trailing 0
                        """, re.VERBOSE)
def replacer(m):
    g = m.group(1)
    if len(g) == 1:
        assert g == "."
        return ""
    else:
        return g

def normalize(x):
    return trailing0.sub(replacer, str(x))
</snippet></ROW><ROW><id>20913178</id><snippet>from decimal import Decimal as D
for x in 1.0, 2, 10.010, D("1000.0000"), D("10.5"), D("9.0"):
    print str(x), "-&gt;", normalize(x)
</snippet></ROW><ROW><id>20913178</id><snippet>1.0 -&gt; 1
2 -&gt; 2
10.01 -&gt; 10.01
1000.0000 -&gt; 1000
10.5 -&gt; 10.5
9.0 -&gt; 9
</snippet></ROW><ROW><id>20913650</id><snippet>clicked</snippet></ROW><ROW><id>20913650</id><snippet>class Text(QtGui.QLabel):
    clicked = QtCore.pyqtSignal()

    def mouseReleaseEvent(self, evt):
        ...
        self.clicked.emit()
</snippet></ROW><ROW><id>20913650</id><snippet>lambda</snippet></ROW><ROW><id>20913650</id><snippet>    self.a1.clicked.connect(lambda: self.OpenURL(url))
</snippet></ROW><ROW><id>20913824</id><snippet>WSGIPath</snippet></ROW><ROW><id>20913824</id><snippet>application.py</snippet></ROW><ROW><id>20913824</id><snippet>.ebextensions</snippet></ROW><ROW><id>20913928</id><snippet>import socket
def is_connected():
  try:
     socket.gethostbyname("www.google.com")
     return True
  except:
     pass
  return False
print is_connected()
</snippet></ROW><ROW><id>20913931</id><snippet>a=[1,2,3]
b=a
a.append(4)
print(b)       #[1,2,3,4]
print(a)       #[1,2,3,4]
</snippet></ROW><ROW><id>20913931</id><snippet>a=1
b=a
a+=1
</snippet></ROW><ROW><id>20913931</id><snippet>a</snippet></ROW><ROW><id>20913931</id><snippet>a += [4]</snippet></ROW><ROW><id>20913931</id><snippet>a += something</snippet></ROW><ROW><id>20913931</id><snippet>a = a.__iadd__(something)</snippet></ROW><ROW><id>20913931</id><snippet>a = a.__add__(something)</snippet></ROW><ROW><id>20913931</id><snippet>__iadd__()</snippet></ROW><ROW><id>20913931</id><snippet>__iadd__()</snippet></ROW><ROW><id>20913931</id><snippet>a</snippet></ROW><ROW><id>20913931</id><snippet>__add__()</snippet></ROW><ROW><id>20913931</id><snippet>a</snippet></ROW><ROW><id>20913931</id><snippet>a,b,c=1,2,3
li=[a,b,c]
for x in li:
    x+=1
print(li)        #[1,2,3]
</snippet></ROW><ROW><id>20913931</id><snippet>x += 1</snippet></ROW><ROW><id>20913931</id><snippet>x = x + 1</snippet></ROW><ROW><id>20913931</id><snippet>x</snippet></ROW><ROW><id>20913931</id><snippet>for i, x in enumerate(li):
    li[i] = x + 1
</snippet></ROW><ROW><id>20914223</id><snippet>import re

datetimestring = re.sub('[-.:]', '/', datetimestring)
</snippet></ROW><ROW><id>20914223</id><snippet>-</snippet></ROW><ROW><id>20914223</id><snippet>.</snippet></ROW><ROW><id>20914223</id><snippet>:</snippet></ROW><ROW><id>20914223</id><snippet>dateutil.parser.parse()</snippet></ROW><ROW><id>20914427</id><snippet>O(2*p*A)</snippet></ROW><ROW><id>20914689</id><snippet>cut</snippet></ROW><ROW><id>20914690</id><snippet>keys = ["#hash{}".format(i) for i in range(1,11)]
p_key = choice(keys)
p = tx.search.tweets(q=p_key)
</snippet></ROW><ROW><id>20914690</id><snippet>ps = {key : tx.search.tweets(q=key) for key in keys}
p = ps[p_key]
</snippet></ROW><ROW><id>20914796</id><snippet>glob</snippet></ROW><ROW><id>20914796</id><snippet>fnmatch</snippet></ROW><ROW><id>20914796</id><snippet>glob</snippet></ROW><ROW><id>20914796</id><snippet>listdir</snippet></ROW><ROW><id>20914796</id><snippet>fnmatch</snippet></ROW><ROW><id>20914796</id><snippet>fnmatch</snippet></ROW><ROW><id>20914796</id><snippet>for filename in os.listdir('.'):
    if fnmatch.fnmatch(filename, 'buffer*'):
        os.remove(filename)
    # etc.
</snippet></ROW><ROW><id>20914796</id><snippet>for filename in os.listdir('.'):
    for pattern in ['buffer*', 'grid*', 'OSMroads*',
                    'newCostSurface*','standsLine*', 'standsReprojected*']:
        if fnmatch.fnmatch(filename, pattern):
            os.remove(filename)
</snippet></ROW><ROW><id>20914796</id><snippet>for filename in os.listdir('.'):
    if any(fnmatch.fnmatch(filename, pattern)
           for pattern in ['buffer*', 'grid*', 'OSMroads*',
                           'newCostSurface*','standsLine*', 'standsReprojected*']):
        os.remove(filename)
</snippet></ROW><ROW><id>20914796</id><snippet>fnmatch.translate</snippet></ROW><ROW><id>20914796</id><snippet>fnmatch</snippet></ROW><ROW><id>20914947</id><snippet># env.py
se = None
def create_env_obj(file_exists):
    global se
    if file_exists:
        print("Creating environment A")
        se = SetEnvForExistingFile()
    else:
        print("Creating environment B")
        se = SetEnvForNoExistingFile()
</snippet></ROW><ROW><id>20914976</id><snippet>if request.method == "POST"</snippet></ROW><ROW><id>20914986</id><snippet>SELECT *
FROM Timetable t
WHERE in_dates = 0 OR
  (
    in_dates = 1 AND
    EXISTS (
     SELECT 1
     FROM Dates d
     WHERE d.subject = t.subject AND
       d.date = t.date
    )
  )
</snippet></ROW><ROW><id>20914997</id><snippet>a1 = self.checkAlarmVolume()
...
a2 = self.checkAlarmVolume()

if (a1 != a2)
    ...
</snippet></ROW><ROW><id>20914997</id><snippet>list</snippet></ROW><ROW><id>20914997</id><snippet>a_list = []
a_list.append(self.checkAlarmVolume())
...
a_list.append(self.checkAlarmVolume())

if (a_list[0] != a_list[1])
    ...
</snippet></ROW><ROW><id>20915004</id><snippet>[^\\]
</snippet></ROW><ROW><id>20915004</id><snippet>&lt;/\g&lt;name_1&gt;\g&lt;name_2&gt;&gt;
</snippet></ROW><ROW><id>20915004</id><snippet>/</snippet></ROW><ROW><id>20915004</id><snippet>\g&lt;</snippet></ROW><ROW><id>20915004</id><snippet>\g&lt;</snippet></ROW><ROW><id>20915004</id><snippet>\g</snippet></ROW><ROW><id>20915004</id><snippet>p = re.compile(r"(?:[^\\])?\\g&lt;([a-zA-Z_][a-zA-Z\d_]*)&gt;")
</snippet></ROW><ROW><id>20915004</id><snippet>(?:...)</snippet></ROW><ROW><id>20915004</id><snippet>p = re.compile(r"\\g&lt;([a-zA-Z_][a-zA-Z\d_]*)&gt;")
</snippet></ROW><ROW><id>20915004</id><snippet>\g&lt;</snippet></ROW><ROW><id>20915004</id><snippet>p = re.compile(r"(?&lt;!\\)\\g&lt;([a-zA-Z_][a-zA-Z\d_]*)&gt;")
</snippet></ROW><ROW><id>20915004</id><snippet>\</snippet></ROW><ROW><id>20915023</id><snippet>import inspect, sys

class WrapStdout(object):
    _stdout = sys.stdout
    def write(self, buf):
        frame = sys._getframe(1)
        try:
            f = inspect.getsourcefile(frame)
        except TypeError:
            f = 'unknown'
        l = frame.f_lineno
        self._stdout.write('{}:{}:{}'.format(f, l, buf))
    def flush(self):
        self._stdout.flush()

sys.stdout = WrapStdout()
</snippet></ROW><ROW><id>20915023</id><snippet>import</snippet></ROW><ROW><id>20915023</id><snippet>stdout.write</snippet></ROW><ROW><id>20915023</id><snippet>print</snippet></ROW><ROW><id>20915023</id><snippet>end=''</snippet></ROW><ROW><id>20915035</id><snippet>dblquad</snippet></ROW><ROW><id>20915035</id><snippet>quad</snippet></ROW><ROW><id>20915035</id><snippet>return quad(_infunc,a,b,(func,gfun,hfun,args),epsabs=epsabs,epsrel=epsrel)
</snippet></ROW><ROW><id>20915035</id><snippet>maxp1</snippet></ROW><ROW><id>20915035</id><snippet>from scipy import integrate

def _infunc(x,func,gfun,hfun,more_args):
    a = gfun(x)
    b = hfun(x)
    myargs = (x,) + more_args
    return quad(func,a,b,args=myargs)[0]

def custom_dblquad(func, a, b, gfun, hfun, args=(), epsabs=1.49e-8, 
                   epsrel=1.49e-8, maxp1=50, limit=50):
    return integrate.quad(_infunc, a, b, (func, gfun, hfun, args), 
                          epsabs=epsabs, epsrel=epsrel, maxp1=maxp1, limit=limit)
</snippet></ROW><ROW><id>20915149</id><snippet>map</snippet></ROW><ROW><id>20915149</id><snippet>f</snippet></ROW><ROW><id>20915149</id><snippet>foo</snippet></ROW><ROW><id>20915149</id><snippet>Manager</snippet></ROW><ROW><id>20915149</id><snippet>map</snippet></ROW><ROW><id>20915149</id><snippet>from multiprocessing import Pool

foo = {1: []}

def f(x):
    return x

def main():
    pool = Pool()
    foo[1] = pool.map(f, range(100))
    pool.close()
    pool.join()
    print foo

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20915149</id><snippet>pool.map(functools.partial(f, foo), range(100))</snippet></ROW><ROW><id>20915149</id><snippet>foo</snippet></ROW><ROW><id>20915149</id><snippet>Manager</snippet></ROW><ROW><id>20915301</id><snippet>"echo' " ""
</snippet></ROW><ROW><id>20915301</id><snippet>"echo' "</snippet></ROW><ROW><id>20915301</id><snippet>echo</snippet></ROW><ROW><id>20915301</id><snippet>'</snippet></ROW><ROW><id>20915301</id><snippet>""</snippet></ROW><ROW><id>20915301</id><snippet>"echo' \" \""
</snippet></ROW><ROW><id>20915301</id><snippet>'''echo' " "'''
</snippet></ROW><ROW><id>20915301</id><snippet>format</snippet></ROW><ROW><id>20915301</id><snippet>%</snippet></ROW><ROW><id>20915301</id><snippet>echo "junk              junk:/vol/junk"
</snippet></ROW><ROW><id>20915301</id><snippet>echo'</snippet></ROW><ROW><id>20915301</id><snippet>'''echo "{0}     {1}"'''.format(mtpt, filervol)
</snippet></ROW><ROW><id>20915301</id><snippet>\t</snippet></ROW><ROW><id>20915550</id><snippet>sys.getsizeof</snippet></ROW><ROW><id>20915611</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>20915611</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; mystr = "[(2, 200000, 60, 1)]"
&gt;&gt;&gt; literal_eval(mystr) # Just to demonstrate
[(2, 200000, 60, 1)]
&gt;&gt;&gt; a,b,c,d = literal_eval(mystr)[0]
&gt;&gt;&gt; a
2
&gt;&gt;&gt; b
200000
&gt;&gt;&gt; c
60
&gt;&gt;&gt; d
1
&gt;&gt;&gt; mystr = "[(10, 150000, 100, 4)]"
&gt;&gt;&gt; a,b,c,d = literal_eval(mystr)[0]
&gt;&gt;&gt; a
10
&gt;&gt;&gt; b
150000
&gt;&gt;&gt; c
100
&gt;&gt;&gt; d
4
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20915611</id><snippet>the length of the string could vary</snippet></ROW><ROW><id>20915611</id><snippet>&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; mystr = "[(2, 200000, 60, 1)]"
&gt;&gt;&gt; tup = literal_eval(mystr)[0]
&gt;&gt;&gt; tup[0]
2
&gt;&gt;&gt; tup[1]
200000
&gt;&gt;&gt; tup[2]
60
&gt;&gt;&gt; tup[3]
1
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20915656</id><snippet>def customFilter(s):
    foundStart = False
    for i, val in enumerate(s):
        if not foundStart and val == 1:
            foundStart = True
            start = i
        if foundStart and val == 0:
            end = i
            yield (start, end+1)
            foundStart = False
    if foundStart:
        yield (start, len(s))  
</snippet></ROW><ROW><id>20915656</id><snippet>for start, end in customFilter(s):
    print 1
    mask = np.zeros_like(s)
    mask[start: end] = 1
    ax.fill_between(x, ymin, ymax, where=mask, facecolor='green', alpha=0.5)
</snippet></ROW><ROW><id>20915665</id><snippet>from bs4 import BeautifulSoup

# Use urlopen to read web pages, this is only an e
test_input = r'&lt;html&gt;&lt;body&gt;&lt;div id="bar"&gt;&lt;p&gt;Foo&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;'
soup = BeautifulSoup(test_input)

print soup.find('div', {'id': 'bar'}).p.text
</snippet></ROW><ROW><id>20915665</id><snippet>Foo
</snippet></ROW><ROW><id>20915689</id><snippet>QTextEdit</snippet></ROW><ROW><id>20915689</id><snippet>resultbox = QtGui.QTextEdit()
text = 'example'
if condition1:
    resultbox.insertText(text) '''Append text to resultbox in default color.'''
elif condition2:
    resultbox.insertHtml(QString("&lt;font color=\"red\"&gt;%1&lt;/font&gt;").arg(text)) '''Append the text in say, red and not the default black. How?'''
</snippet></ROW><ROW><id>20915888</id><snippet>g</snippet></ROW><ROW><id>20915888</id><snippet>images</snippet></ROW><ROW><id>20915888</id><snippet>g.images.append(pygame.image.load('images/1.bmp'))

img1 = g.images[0]

g.DISPLAYSURF.blit(img1, (x,y))
</snippet></ROW><ROW><id>20915888</id><snippet>MySprite()</snippet></ROW><ROW><id>20915928</id><snippet>&gt;&gt;&gt; def is_iterable_longer_than(iterable, n):
...     return n &lt;= len(itertools.islice(iterable, n))
...
&gt;&gt;&gt; is_iterable_longer_than([], 2)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 2, in is_iterable_longer_than
TypeError: object of type 'itertools.islice' has no len()
</snippet></ROW><ROW><id>20915928</id><snippet>n</snippet></ROW><ROW><id>20915928</id><snippet>n</snippet></ROW><ROW><id>20915928</id><snippet>def is_iterable_longer_than(iterable, n):
    return n == sum(1 for _ in itertools.islice(iterable, n))
</snippet></ROW><ROW><id>20915928</id><snippet>def is_iterable_longer_than(iterable, n):
    iter1, iter2 = itertools.tee(iterable)
    return sum(1 for _ in itertools.islice(iter1, n)) == n, iter2
</snippet></ROW><ROW><id>20915928</id><snippet>len</snippet></ROW><ROW><id>20915928</id><snippet>def is_iterable_longer_than(iterable, n):
    iter1, iter2 = itertools.tee(iterable)
    try:
        return len(iterable) &gt;= n, iter2
    except TypeError:
        return sum(1 for _ in itertools.islice(iter1, n)) == n, iter2
</snippet></ROW><ROW><id>20915989</id><snippet>&gt;&gt;&gt; x = 'http://amz.com/New-Balance-WT910-Trail-Running/dp/B0098FOFCW/ref=zg_bsms_shoes_2'
&gt;&gt;&gt; '/'.join(x.split('/')[:6])
'http://amz.com/New-Balance-WT910-Trail-Running/dp/B0098FOFCW'
&gt;&gt;&gt; y = 'http://amz.com/New-Balance-WT910-Trail-Running/dp/B0098FOFCW'
&gt;&gt;&gt; '/'.join(y.split('/')[:6])
'http://amz.com/New-Balance-WT910-Trail-Running/dp/B0098FOFCW'
</snippet></ROW><ROW><id>20916003</id><snippet>DYLD_FALLBACK_LIBRARY_PATH</snippet></ROW><ROW><id>20916160</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>20916160</id><snippet>copy.deep_copy</snippet></ROW><ROW><id>20916160</id><snippet>&gt;&gt;&gt; import copy
&gt;&gt;&gt; copy.deepcopy
&lt;function deepcopy at 0x01BAEE30&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20916352</id><snippet>itertools.combinations</snippet></ROW><ROW><id>20916352</id><snippet>def get_strings(words, pad, length):
    from itertools import combinations
    nwords = len(words)
    npad = length - sum(len(word) for word in words)
    nslots = nwords + npad
    for ix in combinations(range(nslots), nwords):
        result = [pad] * nslots
        i = 0
        for j in ix:
            result[j] = words[i]
            i += 1
        yield "".join(result)
</snippet></ROW><ROW><id>20916352</id><snippet>for s in get_strings(["dead", "beef"], "0", 12):
    print s
</snippet></ROW><ROW><id>20916530</id><snippet>self.container.longVariableName.longName ^= -1
</snippet></ROW><ROW><id>20916530</id><snippet>~</snippet></ROW><ROW><id>20916530</id><snippet>^</snippet></ROW><ROW><id>20916531</id><snippet>    ...
    self.spinFrameCountA = QtGui.QSpinBox()
    self.spinFrameCountA.setRange(1,999999)
    self.spinFrameCountA.setValue(40)
    self.spinFrameCountA.installEventFilter(self)

    self.spinFrameCountB = QtGui.QSpinBox()
    self.spinFrameCountB.setRange(0,999999)
    self.spinFrameCountB.setValue(6)
    self.spinFrameCountB.installEventFilter(self)
    ...

def eventFilter(self, widget, event):
    if (event.type() == QtCore.QEvent.ContextMenu and
        isinstance(widget, QtGui.QSpinBox)):
        menu = widget.lineEdit().createStandardContextMenu()
        menu.addSeparator()
        menu.addAction('Reset Value',
                       lambda: widget.setValue(widget.minimum()))
        menu.exec_(event.globalPos())
        menu.deleteLater()
        return True
    return QtGui.QWidget.eventFilter(self, widget, event)
</snippet></ROW><ROW><id>20916559</id><snippet>class Mobilesuits:
     instances = []
     def __init__(self):
         Mobilesuits.instances.append(self)
</snippet></ROW><ROW><id>20916559</id><snippet>__init__</snippet></ROW><ROW><id>20916559</id><snippet>Mobilesuits.instances</snippet></ROW><ROW><id>20916559</id><snippet>import gc

mobile_suits = [o for o in gc.get_objects() if isinstance(o, Mobilesuits)]
</snippet></ROW><ROW><id>20916922</id><snippet>GraphTab</snippet></ROW><ROW><id>20916922</id><snippet>wxPanel</snippet></ROW><ROW><id>20916922</id><snippet>wxFrame</snippet></ROW><ROW><id>20916922</id><snippet>GraphTab</snippet></ROW><ROW><id>20916922</id><snippet>nb</snippet></ROW><ROW><id>20916922</id><snippet>self</snippet></ROW><ROW><id>20917091</id><snippet>contextlib.ExitStack</snippet></ROW><ROW><id>20917091</id><snippet>return nested(*managers)</snippet></ROW><ROW><id>20917091</id><snippet>from contextlib import ExitStack, contextmanager

@contextmanager
def settings(*args, **kwargs):
    # ... populate `managers`
    with ExitStack() as stack:
         yield tuple(stack.enter_context(cm) for cm in managers)
</snippet></ROW><ROW><id>20917115</id><snippet>ss = a.sum(1)
</snippet></ROW><ROW><id>20917115</id><snippet>a</snippet></ROW><ROW><id>20917115</id><snippet>ss = numpy.sum(a, 1)
</snippet></ROW><ROW><id>20917236</id><snippet>pot = int(pot+multiplier)
</snippet></ROW><ROW><id>20917236</id><snippet>pot</snippet></ROW><ROW><id>20917236</id><snippet>global</snippet></ROW><ROW><id>20917236</id><snippet>pot</snippet></ROW><ROW><id>20917236</id><snippet>def buyLottery(name, amount):
    global pot
    ...
    pot = int(pot+multiplier)
</snippet></ROW><ROW><id>20917424</id><snippet>index</snippet></ROW><ROW><id>20917424</id><snippet>x</snippet></ROW><ROW><id>20917424</id><snippet>plt.fill_between()</snippet></ROW><ROW><id>20917424</id><snippet>gdf = df.groupby('Time')[col].describe().unstack()
plt.fill_between(gdf.index, gdf['25%'], gdf['75%'], alpha=.5)
</snippet></ROW><ROW><id>20917424</id><snippet>gdf.info()</snippet></ROW><ROW><id>20917424</id><snippet>&lt;class 'pandas.core.frame.DataFrame'&gt;
Index: 12 entries, 00:00:00 to 22:00:00
Data columns (total 8 columns):
count    12 non-null float64
mean     12 non-null float64
std      12 non-null float64
min      12 non-null float64
25%      12 non-null float64
50%      12 non-null float64
75%      12 non-null float64
max      12 non-null float64
dtypes: float64(8)
</snippet></ROW><ROW><id>20917424</id><snippet>TypeError: ufunc 'isfinite' not supported</snippet></ROW><ROW><id>20917424</id><snippet>Time</snippet></ROW><ROW><id>20917424</id><snippet>datetime.time</snippet></ROW><ROW><id>20917424</id><snippet>df['Time'] = df.Time.map(lambda x: pd.datetools.parse(x).time())
</snippet></ROW><ROW><id>20917492</id><snippet>def diff(v):
    result = []
    for i in range(1, len(v)):
        result.append(v[i] - v[i-1])
    return result

def ismonotone(v, tol=0):
    b = 0
    dv = diff(v)
    if min(dv) &gt;= -tol:
        b = b | 1
    if max(dv) &lt;= tol:
        b = b | 2
    return b
</snippet></ROW><ROW><id>20917492</id><snippet>diff</snippet></ROW><ROW><id>20917492</id><snippet>nargin</snippet></ROW><ROW><id>20917492</id><snippet>tol=0</snippet></ROW><ROW><id>20917492</id><snippet>tol=0</snippet></ROW><ROW><id>20917492</id><snippet>function return_value = function_name(arguments)</snippet></ROW><ROW><id>20917492</id><snippet>return_value</snippet></ROW><ROW><id>20917492</id><snippet>b</snippet></ROW><ROW><id>20917492</id><snippet>end</snippet></ROW><ROW><id>20917492</id><snippet>return</snippet></ROW><ROW><id>20917492</id><snippet>return</snippet></ROW><ROW><id>20917492</id><snippet>return</snippet></ROW><ROW><id>20917492</id><snippet>bitor(a, b)</snippet></ROW><ROW><id>20917492</id><snippet>a | b</snippet></ROW><ROW><id>20917646</id><snippet>-</snippet></ROW><ROW><id>20917646</id><snippet>index</snippet></ROW><ROW><id>20917646</id><snippet>In [1]: dfa = pd.DataFrame({'A': range(5)}, index=range(5))

In [2]: dfb = pd.DataFrame({'A': range(10, 15)}, index=range(3,8))

In [3]: dfa
Out[3]: 
   A
0  0
1  1
2  2
3  3
4  4

In [4]: dfb
Out[4]: 
    A
3  10
4  11
5  12
6  13
7  14

In [5]: dfb.loc[dfb.index - dfa.index]
Out[5]: 
    A
5  12
6  13
7  14
</snippet></ROW><ROW><id>20917693</id><snippet>QListWidget.itemWidget</snippet></ROW><ROW><id>20917693</id><snippet>QListWidget.setItemWidget</snippet></ROW><ROW><id>20917693</id><snippet>self.ui.listWidget.item(0).progressBar.setValue(data)
</snippet></ROW><ROW><id>20917693</id><snippet>widget = self.ui.listWidget.itemWidget(self.ui.listWidget.item(0))
widget.progressBar.setValue(data)
</snippet></ROW><ROW><id>20917736</id><snippet>a &lt; -100 or a &gt; -100</snippet></ROW><ROW><id>20917736</id><snippet>a = a[(a &gt;= -100) &amp; (a &lt;= 100)]
</snippet></ROW><ROW><id>20917736</id><snippet>numpy</snippet></ROW><ROW><id>20917736</id><snippet>numpy</snippet></ROW><ROW><id>20917736</id><snippet>import numpy.ma as ma
mx = ma.masked_array(a, mask = ((a &lt; -100) | (a &gt; 100)) )
</snippet></ROW><ROW><id>20917736</id><snippet>mx.mask = ma.nomask
</snippet></ROW><ROW><id>20917749</id><snippet>given_string2 % {name: nickname}</snippet></ROW><ROW><id>20917749</id><snippet>&gt;&gt;&gt; "I'm %(name)s. My real name is %(nickname)s, but my friends call me %(name)s." % {'name': "Mike", 'nickname': "Goose"}
"I'm Mike. My real name is Goose, but my friends call me Mike."
</snippet></ROW><ROW><id>20917900</id><snippet>import os
from subprocess import Popen, PIPE

p = Popen("some_program.exe", stdin=PIPE)
p.communicate(os.linesep.join(["name", "age"]))
</snippet></ROW><ROW><id>20918050</id><snippet>@classmethod</snippet></ROW><ROW><id>20918050</id><snippet>class UserInput: # capitals! Look at PEP 8.
    users = [] # rearranged to the top for better readability

    def __init__(self, name, lista, listb, listc, listd):
        self.name = ""
        self.lista = lista
        self.listb = listb
        self.listc = listc
        self.listd = listd

    @classmethod
    def create_new_user(cls): # no need for x if you overwrite it immediately
        x = cls("x", "", "", "", "")
        cls.users.append(x) # easier access to this static attribute
        return x # for the caller having access to it as well.
</snippet></ROW><ROW><id>20918050</id><snippet>UserInput</snippet></ROW><ROW><id>20918050</id><snippet>x = cls("x", "", "", "", "")</snippet></ROW><ROW><id>20918050</id><snippet>    @classmethod
    def create_new_user(cls, *a, **k): # no need for x if you overwrite it immediately
        x = cls(*a, **k) # pass the arguments given by the caller to __init__.
        cls.users.append(x) # easier access to this static attribute
        return x # for the caller having access to it as well.
</snippet></ROW><ROW><id>20918050</id><snippet>a = UserInput("foo", "whatever", "is", "needed", "here")
</snippet></ROW><ROW><id>20918050</id><snippet>a = UserInput.create_new_user("foo", "whatever", "is", "needed", "here")
</snippet></ROW><ROW><id>20918050</id><snippet>    def __init__(self, name, lista=None, listb=None, listc=None, listd=None):
        self.name = name
        self.lista = lista if lista is not None else []
        self.listb = listb if listb is not None else []
        self.listc = listc if listc is not None else []
        self.listd = listd if listd is not None else []
</snippet></ROW><ROW><id>20918050</id><snippet>    def __init__(self, name, lista='', listb='', listc='', listd=''):
        self.name = name
        self.lista = lista
        self.listb = listb
        self.listc = listc
        self.listd = listd
</snippet></ROW><ROW><id>20918050</id><snippet>a = UserInput.create_new_user("foo", listc=...) # all others are left empty
b = UserInput("bar") # all are left empty
c = UserInput.create_new_user("ham", lista=..., listd=...) # all others are left empty
</snippet></ROW><ROW><id>20918050</id><snippet>@classmethod
def create_new_users(cls): # several users!
    print("how many users do you want to create")
    num = int(input())
    for _ in range(num): # simpler iteration
        print("enter the user's name")
        name = input("") # in 3.x, this is always a string, so it cannot be None...
        # if name == "" or "None,none": # That won't work as you think.
        if name == '' or name.lower() == 'none': # but why disallow the string 'None'?
            # raise SyntaxError("name cannot be None or empty")
            raise RuntimeError("name cannot be None or empty") # or ValueError or alike
            # break not needed. raise jumps out without it as well.
        user = cls(name, "", "", "", "") # name is an input, not an output.
        cls.users.append(name)
</snippet></ROW><ROW><id>20918050</id><snippet>users</snippet></ROW><ROW><id>20918050</id><snippet>__init__</snippet></ROW><ROW><id>20918050</id><snippet>@classmethod</snippet></ROW><ROW><id>20918050</id><snippet>UserInput</snippet></ROW><ROW><id>20918050</id><snippet>__init__()</snippet></ROW><ROW><id>20918050</id><snippet>UserInput.create_new_users()</snippet></ROW><ROW><id>20918050</id><snippet>class UserInputStoring(UserInput):
    users = [] # this is only here, not at the parent.
    def __init__(self, *a, **k):
        super(UserInputStoring, self).__init__(*a, **k) # pass everything up as it was used
        self.users.append(self)
</snippet></ROW><ROW><id>20918050</id><snippet>create_new_users()</snippet></ROW><ROW><id>20918050</id><snippet>@classmethod</snippet></ROW><ROW><id>20918050</id><snippet>__init__</snippet></ROW><ROW><id>20918135</id><snippet>item = SomeItem()
item2 = SomeOtherItem()
for idx,t in enumerate(sel.xpath('/html/body/table')):
    if not idx % 2:
        item.field1 = t.xpath('tbody/tr/td/text()').extract()[0]
    else:
        content = t.xpath('tbody/tr/td[1]')
        item.field2 = content.xpath('table/tbody/tr/td[1]/a/@href).extract()[0]
        item.field3 = content.xpath('table/tbody/tr/td[2]/text()).extract()[0]
        sub_heading = t.xpath('tbody/tr/td[2]')
        item2.field1 = heading.xpath(...)
        ...
</snippet></ROW><ROW><id>20918308</id><snippet>&gt;&gt;&gt; print '{:04b}'.format(5)
0101
</snippet></ROW><ROW><id>20918308</id><snippet>&gt;&gt;&gt; n = 6 ; '{0:0{1}b}'.format(5, n)
'000101'
</snippet></ROW><ROW><id>20918308</id><snippet>&gt;&gt;&gt; n = 6 ; ('{:0%sb}' % n).format(5)
'000101'
</snippet></ROW><ROW><id>20918308</id><snippet>&gt;&gt;&gt; n = 6 ; ('{:0' + str(n) + 'b}').format(5)
'000101'
</snippet></ROW><ROW><id>20918800</id><snippet>#!/bin/sh
for user in joe sally bob
do
    cd "/home/$user"
    [ -f .bashrc ] &amp;&amp; echo "alias whatever" &gt;&gt;.bashrc
    [ -f .zshrc ] &amp;&amp; echo "alias zversion" &gt;&gt;.zshrc
done
</snippet></ROW><ROW><id>20918800</id><snippet>/etc/aliases.local</snippet></ROW><ROW><id>20918800</id><snippet>source /etc/aliases.local</snippet></ROW><ROW><id>20918800</id><snippet>/etc/skel</snippet></ROW><ROW><id>20918800</id><snippet>/etc/bash.bashrc</snippet></ROW><ROW><id>20918800</id><snippet>/etc/bashrc</snippet></ROW><ROW><id>20918832</id><snippet>raw_input</snippet></ROW><ROW><id>20918832</id><snippet>user_input = raw_input()
</snippet></ROW><ROW><id>20918832</id><snippet>if user_input == "some_command":
    do_something(appropriate, variables)
</snippet></ROW><ROW><id>20918832</id><snippet>if user_input == "radar":
    a.radar([100,100,100], 100)
</snippet></ROW><ROW><id>20918832</id><snippet>radar</snippet></ROW><ROW><id>20918832</id><snippet>coordinates</snippet></ROW><ROW><id>20918832</id><snippet>radar_range</snippet></ROW><ROW><id>20918832</id><snippet>self</snippet></ROW><ROW><id>20918832</id><snippet>def can_detect(self, other):
    for own_coord, other_coord in zip(self.coordinates, other.coordinates):
        if abs(own_coord - other_coord) &gt; self.radar_range:
            return False
    return True

def radar(self):
    for other in Mobilesuits.instances:
        if other is not self and self.can_detect(other):
            print "%s detected at %s" % (other.description, other.coordinates)
</snippet></ROW><ROW><id>20918874</id><snippet>GUI</snippet></ROW><ROW><id>20918874</id><snippet>Comm</snippet></ROW><ROW><id>20918874</id><snippet>GUI.__init__(self, parent)</snippet></ROW><ROW><id>20918874</id><snippet>Comm.__init__</snippet></ROW><ROW><id>20918898</id><snippet>50 * sin((-175/100) * 2π)
50 * sin((-174/100) * 2π)
50 * sin((-173/100) * 2π)
...
50 * sin((175/100) * 2π)
50 * sin((176/100) * 2π)
</snippet></ROW><ROW><id>20918898</id><snippet>sin</snippet></ROW><ROW><id>20918953</id><snippet>wxFrame</snippet></ROW><ROW><id>20918953</id><snippet>wxFrame</snippet></ROW><ROW><id>20918953</id><snippet>wxEVT_SIZE</snippet></ROW><ROW><id>20918953</id><snippet>outer_panel</snippet></ROW><ROW><id>20918953</id><snippet>import wx

class MyForm(wx.Frame):
   def __init__(self):
        wx.Frame.__init__(self, None, size=(400,400))    
        self.outer_panel = wx.Panel(self) # &lt;--------------
        self.panel2=wx.Panel(parent=self.outer_panel,
                             size=(200,200),
                             pos=(200,0),
                             style=wx.BORDER)
        self.panel2.SetBackgroundColour(wx.RED)

app = wx.App(False)
MyForm().Show()
app.MainLoop()
</snippet></ROW><ROW><id>20918953</id><snippet>import wx

class MyForm(wx.Frame):
   def __init__(self):
        wx.Frame.__init__(self, None, size=(400,400))
        self.Bind(wx.EVT_SIZE, lambda *args: 0) # &lt;--------
        self.panel2=wx.Panel(parent=self,
                             size=(200,200),
                             pos=(200,0),
                             style=wx.BORDER)


app = wx.App(False)
frame = MyForm().Show()
app.MainLoop()
</snippet></ROW><ROW><id>20919064</id><snippet>SUB_STIE</snippet></ROW><ROW><id>20919064</id><snippet># settings.py
SUB_SITE = "/test/"
</snippet></ROW><ROW><id>20919064</id><snippet>settings.py</snippet></ROW><ROW><id>20919064</id><snippet>urlpatterns = patterns('',
  (r'^%s/' % settings.SUB_SITE, include('urls_subsite')),
)
</snippet></ROW><ROW><id>20919064</id><snippet>urls.py</snippet></ROW><ROW><id>20919064</id><snippet>if settings.URL_PREFIX:
    prefixed_urlpattern = []
    for pat in urlpatterns:
        pat.regex = re.compile(r"^%s/%s" % (settings.URL_PREFIX[1:], pat.regex.pattern[1:]))
        prefixed_urlpattern.append(pat)
    urlpatterns = prefixed_urlpattern
</snippet></ROW><ROW><id>20919274</id><snippet>num = 2</snippet></ROW><ROW><id>20919274</id><snippet>Number</snippet></ROW><ROW><id>20919274</id><snippet>num</snippet></ROW><ROW><id>20919274</id><snippet>Number</snippet></ROW><ROW><id>20919274</id><snippet>obj.foo</snippet></ROW><ROW><id>20919274</id><snippet>obj.foo = blah</snippet></ROW><ROW><id>20919274</id><snippet>foo</snippet></ROW><ROW><id>20919274</id><snippet>obj</snippet></ROW><ROW><id>20919274</id><snippet>obj = blah</snippet></ROW><ROW><id>20919274</id><snippet>obj</snippet></ROW><ROW><id>20919274</id><snippet>[]</snippet></ROW><ROW><id>20919274</id><snippet>obj.prop</snippet></ROW><ROW><id>20919274</id><snippet>prop</snippet></ROW><ROW><id>20919274</id><snippet>__get__</snippet></ROW><ROW><id>20919274</id><snippet>prop</snippet></ROW><ROW><id>20919274</id><snippet>obj</snippet></ROW><ROW><id>20919274</id><snippet>a + 5</snippet></ROW><ROW><id>20919274</id><snippet>__get__</snippet></ROW><ROW><id>20919274</id><snippet>__add__</snippet></ROW><ROW><id>20919274</id><snippet>__get__</snippet></ROW><ROW><id>20919274</id><snippet>__call__</snippet></ROW><ROW><id>20919274</id><snippet>__call__</snippet></ROW><ROW><id>20919274</id><snippet>obj()</snippet></ROW><ROW><id>20919274</id><snippet>__call__</snippet></ROW><ROW><id>20919274</id><snippet>obj = 5</snippet></ROW><ROW><id>20919274</id><snippet>obj.prop = 5</snippet></ROW><ROW><id>20919274</id><snippet>obj = SomeDescriptorClass()</snippet></ROW><ROW><id>20919274</id><snippet>object</snippet></ROW><ROW><id>20919326</id><snippet>SIGALRM</snippet></ROW><ROW><id>20919609</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>20919609</id><snippet>sys.path</snippet></ROW><ROW><id>20919609</id><snippet>foo.py
math.py
</snippet></ROW><ROW><id>20919609</id><snippet>foo.py</snippet></ROW><ROW><id>20919609</id><snippet>import math</snippet></ROW><ROW><id>20919609</id><snippet>math.py</snippet></ROW><ROW><id>20919609</id><snippet>math</snippet></ROW><ROW><id>20919609</id><snippet>sys.path</snippet></ROW><ROW><id>20919609</id><snippet>import sys
sys.path.insert(0, '/some/directory/')
from somemodule import something
</snippet></ROW><ROW><id>20919649</id><snippet>from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords

stopset = set(stopwords.words('english'))

with open('sentiment_test.txt', 'r') as text_file:
    text = text_file.read()
    tokens=word_tokenize(str(text))
    tokens = [w for w in tokens if not w in stopset]
    print tokens
</snippet></ROW><ROW><id>20920299</id><snippet>LED</snippet></ROW><ROW><id>20920299</id><snippet>self.LED</snippet></ROW><ROW><id>20920299</id><snippet>class App:

    def __init__(self, master): 
            frame = Frame(master)
            frame.pack()
            Label(frame, text='Turn LED ON').grid(row=0, column=0)
            Label(frame, text='Turn LED OFF').grid(row=1, column=0)

            self.button = Button(frame, text='LED 0 ON', command=self.convert0)
            self.button.grid(row=2, column=0)

            self.LED = Label(frame, image=logo)
            self.LED.grid(row=2, column=1)

    def convert0(self, tog=[0]):

        tog[0] = not tog[0]
        if tog[0]:
            print('LED 0 OFF')
            self.button.config(text='LED 0 OFF')
            self.LED.config(image = logo2)
        else:
            print('LED 0 ON')
            self.button.config(text='LED 0 ON')
            self.LED.config(image = logo)
</snippet></ROW><ROW><id>20920473</id><snippet>import lxml.etree as etree

with open('Stockholm.xml', 'rt') as wreport:
    xml = etree.parse(wreport)
    for record in xml.iter('time'):
        if record.attrib['period'] == '2':
            for temp in record.iter('temperature'):
                print 'In Stockholm it will today be %s celcius from %s to %s\n' %
                        (temp.attrib['value'], 
                        record.attrib['from'], 
                        record.attrib['to'])
</snippet></ROW><ROW><id>20920473</id><snippet>import lxml.etree as etree

with open('Stockholm.xml', 'rt') as wreport:
    xml = etree.parse(wreport)
        for temp in xml.findall('.//time[@period="2"]/temperature'):
            print 'In Stockholm it will today be %s celcius\n' % 
                            temp.attrib['value']
</snippet></ROW><ROW><id>20920593</id><snippet>    lex = {"dict": '''\
woerter = {"house" : "Haus"}
woerter["house"]
''',
           "for": '''\
for x in range(0, 3):
    print "We are on time %d" % (x)
''',
           "while": '''\
while expression:
    statement(s)
'''}
</snippet></ROW><ROW><id>20920593</id><snippet>'''</snippet></ROW><ROW><id>20920593</id><snippet>"""</snippet></ROW><ROW><id>20920593</id><snippet>\</snippet></ROW><ROW><id>20920593</id><snippet>'''</snippet></ROW><ROW><id>20920593</id><snippet>r'''\n'''</snippet></ROW><ROW><id>20920593</id><snippet>\</snippet></ROW><ROW><id>20920593</id><snippet>n</snippet></ROW><ROW><id>20920593</id><snippet>"""This is a triple-quoted string too"""</snippet></ROW><ROW><id>20920593</id><snippet>triple_quote_with_embedded_triple = '''Triple quotes use \''' and """ delimiters'''
</snippet></ROW><ROW><id>20920715</id><snippet>legalmoves(board)</snippet></ROW><ROW><id>20920715</id><snippet>''</snippet></ROW><ROW><id>20920715</id><snippet>board[movecom]=''</snippet></ROW><ROW><id>20920715</id><snippet>winner()</snippet></ROW><ROW><id>20920883</id><snippet>import re

abb_pattern = re.compile(r'^ABB+$')

def has_abb(string):
    return abb_pattern.match(string) is not None
</snippet></ROW><ROW><id>20920883</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; abb_pattern = re.compile(r'^ABB+$')
&gt;&gt;&gt; def has_abb(string):
...     return abb_pattern.match(string) is not None
... 
&gt;&gt;&gt; has_abb('ABBBBBBB')
True
&gt;&gt;&gt; has_abb('ABBBBA')
False
&gt;&gt;&gt; has_abb('ABB')
True
&gt;&gt;&gt; has_abb('BABBB')
False
</snippet></ROW><ROW><id>20921011</id><snippet>_</snippet></ROW><ROW><id>20921011</id><snippet>gettext</snippet></ROW><ROW><id>20921011</id><snippet> from django.utils.translation import ugettext as _
 print _("Hello!")  # Will print Hello! if the current language is English
                    # "Bonjour !" in French
                    # ¡Holà! in Spanish, etc.
</snippet></ROW><ROW><id>20921011</id><snippet>_()</snippet></ROW><ROW><id>20921011</id><snippet>gettext()</snippet></ROW><ROW><id>20921011</id><snippet>_</snippet></ROW><ROW><id>20921011</id><snippet>_()</snippet></ROW><ROW><id>20921011</id><snippet>ugettext()</snippet></ROW><ROW><id>20921011</id><snippet>_()</snippet></ROW><ROW><id>20921011</id><snippet>_</snippet></ROW><ROW><id>20921011</id><snippet>gettext</snippet></ROW><ROW><id>20921685</id><snippet>&gt;&gt;&gt; d = {"Index1": [], "Index2": []}
&gt;&gt;&gt; d["Index1"]
[]
</snippet></ROW><ROW><id>20921685</id><snippet>&gt;&gt;&gt; d = dict(Index1=[], Index2=[])
</snippet></ROW><ROW><id>20921813</id><snippet>next</snippet></ROW><ROW><id>20921813</id><snippet>enter()</snippet></ROW><ROW><id>20921813</id><snippet>next</snippet></ROW><ROW><id>20921813</id><snippet>"death"</snippet></ROW><ROW><id>20921813</id><snippet>trick</snippet></ROW><ROW><id>20921813</id><snippet>next</snippet></ROW><ROW><id>20922160</id><snippet>&gt;&gt;&gt; data = '»Æ¹ûÊ÷'
&gt;&gt;&gt; data.decode('utf8').encode('latin1').decode('gb2312')
u'\u9ec4\u679c\u6811'
&gt;&gt;&gt; print _
黄果树
</snippet></ROW><ROW><id>20922265</id><snippet>import decimal
num1 = decimal.Decimal("1.6")
num2 = decimal.Decimal("0.8")
num1 + num2
</snippet></ROW><ROW><id>20922356</id><snippet>def startEnd():
    while True:
        flag = 0
        f = open('file')
        lq = f.readlines()
        cur2 = lq[0]
        cur1 = datetime.datetime.now()
        while flag == 0:
            if cur1 == cur2: # cur2 is datetime read from file
                q.put(True)
                flag = 1
            else:
                flag = 0
</snippet></ROW><ROW><id>20922477</id><snippet>def maketransformer(file): #contains arbitrary stuff that takes too long

    data = gdal.Open(file)
    output_wkt = data.GetProjection()
    srs_out = osr.SpatialReference()
    srs_out.ImportFromWkt(output_wkt)

    transformer = osr.CoordinateTransformation(srs_out)
    return transformer

transformer = maketransformer('data/w001001.adf')

for tuple in shapefilepoints:
    getelevation(transformer.Transform(tuple))
</snippet></ROW><ROW><id>20922477</id><snippet>maketransformer</snippet></ROW><ROW><id>20922477</id><snippet>maketransformer</snippet></ROW><ROW><id>20922477</id><snippet>Transform</snippet></ROW><ROW><id>20922581</id><snippet>SampleTab</snippet></ROW><ROW><id>20922581</id><snippet>parent</snippet></ROW><ROW><id>20922581</id><snippet>SampleTab</snippet></ROW><ROW><id>20922581</id><snippet>SampleTab</snippet></ROW><ROW><id>20922581</id><snippet>SampleTab</snippet></ROW><ROW><id>20922581</id><snippet>QTabWidget</snippet></ROW><ROW><id>20922581</id><snippet>self.mode_1_tabs_widget = QtGui.QTabWidget()
self.mode_1_tabs_widget.addTab(SampleTab(self.mode_1_tabs_widget), "Tab 1")
self.mode_1_tabs_widget.addTab(SampleTab(self.mode_1_tabs_widget), "Tab 2")
self.mode_1_tabs_widget.addTab(SampleTab(self.mode_1_tabs_widget), "Tab 3")
self.mode_1_tabs_widget.addTab(SampleTab(self.mode_1_tabs_widget), "Tab 4")
</snippet></ROW><ROW><id>20922581</id><snippet>SampleTab</snippet></ROW><ROW><id>20922581</id><snippet>mode_2_tabs_widget</snippet></ROW><ROW><id>20922581</id><snippet>self.mode_2_tabs_widget</snippet></ROW><ROW><id>20922581</id><snippet>SampleTab</snippet></ROW><ROW><id>20922672</id><snippet>pchip</snippet></ROW><ROW><id>20922672</id><snippet>scipy.interpolate</snippet></ROW><ROW><id>20922672</id><snippet>pchip</snippet></ROW><ROW><id>20922672</id><snippet>import numpy as np
from scipy.interpolate import interp1d, pchip
import matplotlib.pyplot as plt

fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.spines['left'].set_position('zero')
ax.spines['right'].set_color('none')
ax.spines['bottom'].set_position('zero')
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.yaxis.set_ticks_position('left')

list_points = [(-3,0.1),(-2,0.15),(0,4),(2,-6),(4,-2),(7,-0.15),(8,-0.1)]
(xp,yp) = zip(*list_points)
fun = interp1d(xp,yp,kind='cubic')

xc = np.linspace(min(xp),max(xp),300)

plt.plot(xp,yp,'o',color='black',ms=5)
plt.plot(xc,fun(xc))
fun2 = interp1d(xp,yp,kind='linear')
plt.plot(xc,fun2(xc))

p = pchip(xp, yp)
plt.plot(xc, p(xc), 'r', linewidth=3, alpha=0.6)

plt.show()
</snippet></ROW><ROW><id>20923392</id><snippet>post_id</snippet></ROW><ROW><id>20923392</id><snippet>(?P&lt;post_id&gt;\d+)</snippet></ROW><ROW><id>20923392</id><snippet>(?:\d+)</snippet></ROW><ROW><id>20923461</id><snippet>master.zip</snippet></ROW><ROW><id>20923461</id><snippet>dltk/__init__.py</snippet></ROW><ROW><id>20923461</id><snippet>dltk/tokenize/__init__.py</snippet></ROW><ROW><id>20923461</id><snippet>sys.path</snippet></ROW><ROW><id>20923461</id><snippet>import sys; sys.path.append('master.zip')
from dltk.tokenize import koehn_tokenize
</snippet></ROW><ROW><id>20923461</id><snippet>~/test/</snippet></ROW><ROW><id>20923461</id><snippet>dltk.tokenize</snippet></ROW><ROW><id>20923461</id><snippet>~/test/DLTK-master</snippet></ROW><ROW><id>20923461</id><snippet>sys.path</snippet></ROW><ROW><id>20923461</id><snippet>import sys; sys.path.append('DLTK-master')
from dltk.tokenize import koehn_tokenize
</snippet></ROW><ROW><id>20923465</id><snippet>class MyClass(object):
    pass

a = MyClass()
</snippet></ROW><ROW><id>20923465</id><snippet>MyClass</snippet></ROW><ROW><id>20923465</id><snippet>a</snippet></ROW><ROW><id>20923465</id><snippet>update</snippet></ROW><ROW><id>20923465</id><snippet>__init__</snippet></ROW><ROW><id>20923465</id><snippet>self.update(value)
</snippet></ROW><ROW><id>20923465</id><snippet>MyClass.update(self, value)
</snippet></ROW><ROW><id>20923465</id><snippet>update</snippet></ROW><ROW><id>20923465</id><snippet>@classmethod
def update(cls, value):
    cls.var1 += value
</snippet></ROW><ROW><id>20923728</id><snippet>def decompress(buf):
    decompressor = zlib.decompressobj()
    result = decompressor.decompress(buf)
    return result + decompressor.flush()

def compress(buf):
    compressor = zlib.compressobj()
    result = compressor.compress(buf)
    return result + compressor.flush()
</snippet></ROW><ROW><id>20923794</id><snippet>ascii</snippet></ROW><ROW><id>20923794</id><snippet>scissor</snippet></ROW><ROW><id>20923794</id><snippet>import sys
sys.stdout.buffer.write(chr(9986).encode('utf8'))
</snippet></ROW><ROW><id>20923794</id><snippet>scissor</snippet></ROW><ROW><id>20923794</id><snippet>export lang=UTF_8</snippet></ROW><ROW><id>20923794</id><snippet>chcp</snippet></ROW><ROW><id>20923794</id><snippet>print</snippet></ROW><ROW><id>20923794</id><snippet>sys.stdout.write</snippet></ROW><ROW><id>20923794</id><snippet>sys.stdout.buffer.write(("|\t "+ chr(9986) +" PySnipt'd " + chr(9986)+" \t|").encode('utf8'))
</snippet></ROW><ROW><id>20923794</id><snippet>print</snippet></ROW><ROW><id>20923794</id><snippet>sys.stdout</snippet></ROW><ROW><id>20924110</id><snippet>def flatten(seq):
  for x in seq:
    if isinstance(x, basestring):  # use isinstance(x, str) in python3
       yield x
       continue
    try:
      # in python &gt;=3.3, can use the nifty "yield from", like: yield from flatten(x)
      for y in flatten(x):
        yield y
    except TypeError:
       yield x  # not iterable

print tuple(flatten(a))
=&gt; (1, 2, 3, 4, 5, 6, 7, 8, 9)
</snippet></ROW><ROW><id>20924110</id><snippet>a</snippet></ROW><ROW><id>20924110</id><snippet>(5)</snippet></ROW><ROW><id>20924110</id><snippet>5</snippet></ROW><ROW><id>20924110</id><snippet>(5,)</snippet></ROW><ROW><id>20924134</id><snippet>import argparse

# Use nargs to specify how many arguments an option should take.
ap = argparse.ArgumentParser()
ap.add_argument('-a', nargs=2)
ap.add_argument('-b', nargs=3)
ap.add_argument('-c', nargs=1)

# An illustration of how access the arguments.
opts = ap.parse_args('-a A1 A2 -b B1 B2 B3 -c C1'.split())

print(opts)
print(opts.a)
print(opts.b)
print(opts.c)

# To require that at least one option be supplied (-a, -b, or -c)
# you have to write your own logic. For example:
opts = ap.parse_args([])
if not any([opts.a, opts.b, opts.c]):
    ap.print_usage()
    quit()

print("This won't run.")
</snippet></ROW><ROW><id>20924578</id><snippet>x = x1 + (x2-x1) * t
y = y1 + (y2-y1) * t
</snippet></ROW><ROW><id>20924578</id><snippet>t == 0</snippet></ROW><ROW><id>20924578</id><snippet>(x,y) == (x1,y1)</snippet></ROW><ROW><id>20924578</id><snippet>t == 1</snippet></ROW><ROW><id>20924578</id><snippet>(x,y) == (x2,y2)</snippet></ROW><ROW><id>20924578</id><snippet>t</snippet></ROW><ROW><id>20924578</id><snippet>t</snippet></ROW><ROW><id>20924578</id><snippet>x</snippet></ROW><ROW><id>20924578</id><snippet>y</snippet></ROW><ROW><id>20924578</id><snippet>t</snippet></ROW><ROW><id>20924669</id><snippet>init</snippet></ROW><ROW><id>20924669</id><snippet>Procfile</snippet></ROW><ROW><id>20924669</id><snippet>upgrade</snippet></ROW><ROW><id>20924669</id><snippet>stamp</snippet></ROW><ROW><id>20924669</id><snippet>stamp</snippet></ROW><ROW><id>20924669</id><snippet>db.create_all()</snippet></ROW><ROW><id>20924669</id><snippet>$ ./manage.py db stamp HEAD
</snippet></ROW><ROW><id>20924669</id><snippet>Procfile</snippet></ROW><ROW><id>20924669</id><snippet>web</snippet></ROW><ROW><id>20924669</id><snippet>$ heroku run python manage.py db upgrade
</snippet></ROW><ROW><id>20924704</id><snippet>str.split()</snippet></ROW><ROW><id>20924704</id><snippet>str.rsplit()</snippet></ROW><ROW><id>20924704</id><snippet>result = inputstring.split("'", 5)[-1].rsplit("'", 8)[0]
</snippet></ROW><ROW><id>20924704</id><snippet>n</snippet></ROW><ROW><id>20924704</id><snippet>&gt;&gt;&gt; inputstring = "There is' 'some' Text', and' EXTRACT ME'a'n'd' even' more' 't'ext"
&gt;&gt;&gt; inputstring.split("'", 5)[-1].rsplit("'", 8)[0]
' EXTRACT ME'
</snippet></ROW><ROW><id>20924879</id><snippet>flask.Request</snippet></ROW><ROW><id>20924879</id><snippet>import collections
import flask

class MyRequest(flask.Request):
    """A subclass of Request that maintains function call counts."""
    def __init__(self, *args, **kwargs):
        super(MyRequest, self).__init__(*args, **kwargs)
        self.call_counts = collections.defaultdict(int)
</snippet></ROW><ROW><id>20924879</id><snippet>request_class</snippet></ROW><ROW><id>20924879</id><snippet>app = flask.Flask(__name__, request_class=MyRequest, ...)
</snippet></ROW><ROW><id>20924879</id><snippet>flask.request</snippet></ROW><ROW><id>20924879</id><snippet>import functools

def max_calls(num, default=None):
    """Decorator which allows its wrapped function to be called at most `num`
    times per Flask request, but which then returns `default`.

    """
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            if flask.request.call_counts[func] == num:
                return default
            flask.request.call_counts[func] += 1
            return func(*args, **kwargs)
        return wrapper
    return decorator
</snippet></ROW><ROW><id>20925047</id><snippet>x = 1;
class Point:
    x = 2
print x # will print 1
</snippet></ROW><ROW><id>20925047</id><snippet>x = 1;
class Point:
    global x
    x = 2
print x # will print 2
</snippet></ROW><ROW><id>20925220</id><snippet>ais-3670000</snippet></ROW><ROW><id>20925220</id><snippet>&lt;?php
echo "&lt;html&gt;";
$s="update-token:179999210
vessel-name:Name Here
vessel-length:57.30
vessel-beam:14.63
vessel-draft:3.35
vessel-airdraft:0.00
time:20140104T040648.259Z
position:25.04876667 -75.57001667 GPS
river-mile:sd 178.71
rate-of-turn:0.0
course-over-ground:58.5
speed-over-ground:0.0
ais-367000000 {
    pos:45.943912 -87.384763 DGPS
    cog:249.8
    sog:0.0
    name:name here
    call:1113391
    imo:8856857
    type:31
    dim:10 20 4 5
    draft:3.8
    destination:
}
ais-367000001 {
    pos:25.949652 -86.384535 DGPS
    cog:105.6
    sog:0.0
    name:CHRISTINE
    call:5452438
    type:52
    status:0
    dim:1 2 3 4
    draft:3.0
    destination:IMTT ST.ROSE
    eta:06:00
}";
$lines = explode("\n", $s);
$output = Array();
$thisElement = &amp; $output;
foreach($lines as $line) {
  $elements = explode(":", $line);
  if (count($elements) &gt; 1) {
    $thisElement[trim($elements[0])] = $elements[1];
  }
  if(strstr($line, "{")) {
      $elements = explode("{", $line);
      $key = trim($elements[0]);
      $output[$key] = Array();
      $thisElement = &amp; $output[$key];
  }
  if(strstr($line, "}")) {
      $thisElement = &amp; $output;
  }
}
echo '&lt;pre&gt;';
print_r($output);
echo '&lt;/pre&gt;';
echo '&lt;/html&gt;';
?&gt;
</snippet></ROW><ROW><id>20925220</id><snippet>Array
(
    [update-token] =&gt; 179999210
    [vessel-name] =&gt; Name Here
    [vessel-length] =&gt; 57.30
    [vessel-beam] =&gt; 14.63
    [vessel-draft] =&gt; 3.35
    [vessel-airdraft] =&gt; 0.00
    [time] =&gt; 20140104T040648.259Z
    [position] =&gt; 25.04876667 -75.57001667 GPS
    [river-mile] =&gt; sd 178.71
    [rate-of-turn] =&gt; 0.0
    [course-over-ground] =&gt; 58.5
    [speed-over-ground] =&gt; 0.0
    [ais-367000000] =&gt; Array
        (
            [pos] =&gt; 45.943912 -87.384763 DGPS
            [cog] =&gt; 249.8
            [sog] =&gt; 0.0
            [name] =&gt; name here
            [call] =&gt; 1113391
            [imo] =&gt; 8856857
            [type] =&gt; 31
            [dim] =&gt; 10 20 4 5
            [draft] =&gt; 3.8
            [destination] =&gt; 
        )

    [ais-367000001] =&gt; Array
        (
            [pos] =&gt; 25.949652 -86.384535 DGPS
            [cog] =&gt; 105.6
            [sog] =&gt; 0.0
            [name] =&gt; CHRISTINE
            [call] =&gt; 5452438
            [type] =&gt; 52
            [status] =&gt; 0
            [dim] =&gt; 1 2 3 4
            [draft] =&gt; 3.0
            [destination] =&gt; IMTT ST.ROSE
            [eta] =&gt; 06
        )

)
</snippet></ROW><ROW><id>20925220</id><snippet>json_decode</snippet></ROW><ROW><id>20925220</id><snippet>&lt;?php
echo "&lt;html&gt;";
$s="update-token:179999210
vessel-name:Name Here
vessel-length:57.30
vessel-beam:14.63
vessel-draft:3.35
vessel-airdraft:0.00
time:20140104T040648.259Z
position:25.04876667 -75.57001667 GPS
river-mile:sd 178.71
rate-of-turn:0.0
course-over-ground:58.5
speed-over-ground:0.0
ais-367000000 {
    pos:45.943912 -87.384763 DGPS
    cog:249.8
    sog:0.0
    name:name here
    call:1113391
    imo:8856857
    type:31
    dim:10 20 4 5
    draft:3.8
    destination:
}
ais-367000001 {
    pos:25.949652 -86.384535 DGPS
    cog:105.6
    sog:0.0
    name:CHRISTINE
    call:5452438
    type:52
    status:0
    dim:1 2 3 4
    draft:3.0
    destination:IMTT ST.ROSE
    eta:06:00
}";

echo '&lt;pre&gt;';
print_r(parseString($s));
echo '&lt;/pre&gt;';

function parseString($s) {
  $lines = explode("\n", $s);
  $jstring = "{ ";
  $comma = "";
  foreach($lines as $line) {
    $elements = explode(":", $line);
    if (count($elements) &gt; 1) {
      $jstring = $jstring . $comma . '"' . trim($elements[0]) . '" : "' . $elements[1] .'"';
      $comma = ",";
    }
    if(strstr($line, "{")) {
      $elements = explode("{", $line);
      $key = trim($elements[0]);
      $jstring = $jstring . $comma . '"' . $key .'" : {';
      $comma = "";
    }
    if(strstr($line, "}")) {
      $jstring = $jstring . '} ';
      $comma = ",";
    }
  }
  $jstring = $jstring ."}";
  return json_decode($jstring);
}
echo '&lt;/html&gt;';
?&gt;
</snippet></ROW><ROW><id>20925220</id><snippet>$comma</snippet></ROW><ROW><id>20925220</id><snippet>stdClass Object
(
    [update-token] =&gt; 179999210
    [vessel-name] =&gt; Name Here
    [vessel-length] =&gt; 57.30
    [vessel-beam] =&gt; 14.63
    [vessel-draft] =&gt; 3.35
    [vessel-airdraft] =&gt; 0.00
    [time] =&gt; 20140104T040648.259Z
    [position] =&gt; 25.04876667 -75.57001667 GPS
    [river-mile] =&gt; sd 178.71
    [rate-of-turn] =&gt; 0.0
    [course-over-ground] =&gt; 58.5
    [speed-over-ground] =&gt; 0.0
    [ais-367000000] =&gt; stdClass Object
        (
            [pos] =&gt; 45.943912 -87.384763 DGPS
            [cog] =&gt; 249.8
            [sog] =&gt; 0.0
            [name] =&gt; name here
            [call] =&gt; 1113391
            [imo] =&gt; 8856857
            [type] =&gt; 31
            [dim] =&gt; 10 20 4 5
            [draft] =&gt; 3.8
            [destination] =&gt; 
        )

    [ais-367000001] =&gt; stdClass Object
        (
            [pos] =&gt; 25.949652 -86.384535 DGPS
            [cog] =&gt; 105.6
            [sog] =&gt; 0.0
            [name] =&gt; CHRISTINE
            [call] =&gt; 5452438
            [type] =&gt; 52
            [status] =&gt; 0
            [dim] =&gt; 1 2 3 4
            [draft] =&gt; 3.0
            [destination] =&gt; IMTT ST.ROSE
            [eta] =&gt; 06
        )

)
</snippet></ROW><ROW><id>20925220</id><snippet>&lt;?php
$urlstring = file_get_contents('/path/to/urlFile.csv');
$urls = explode("\n", $urlstring); // one url per line

$responses = Array();

// loop over the urls, and get the information
// then parse it into the $responses array
$i = 0;
foreach($urls as $url) {
  $responses[$i] = parseString(file_get_contents($url));
  $i = $i + 1;
}


function parseString($s) {
  $lines = explode("\n", $s);
  $jstring = "{ ";
  $comma = "";
  foreach($lines as $line) {
    $elements = explode(":", $line);
    if (count($elements) &gt; 1) {
      $jstring = $jstring . $comma . '"' . trim($elements[0]) . '" : "' . $elements[1] .'"';
      $comma = ",";
    }
    if(strstr($line, "{")) {
      $elements = explode("{", $line);
      $key = trim($elements[0]);
      $jstring = $jstring . $comma . '"' . $key .'" : {';
      $comma = "";
    }
    if(strstr($line, "}")) {
      $jstring = $jstring . '} ';
      $comma = ",";
    }
  }
  $jstring = $jstring ."}";
  return json_decode($jstring);
}
?&gt;
</snippet></ROW><ROW><id>20925220</id><snippet>curl</snippet></ROW><ROW><id>20925220</id><snippet>http://www.floris.us/SO/ships.txt</snippet></ROW><ROW><id>20925220</id><snippet>http://www.floris.us/SO/ships3.php</snippet></ROW><ROW><id>20925220</id><snippet>&lt;?php
$urls = Array();
$urls[0] = "http://www.floris.us/SO/ships.txt";

$responses = Array();

// loop over the urls, and get the information
// then parse it into the $responses array
$i = 0;
foreach($urls as $url) {
//  $responses[$i] = parseString(file_get_contents($url));
  $responses[$i] = parseString(myCurl($url));
  $i = $i + 1;
}
echo '&lt;html&gt;&lt;body&gt;&lt;pre&gt;';
print_r($responses);
echo '&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;';

function parseString($s) {
  $lines = explode("\n", $s);
  $jstring = "{ ";
  $comma = "";
  foreach($lines as $line) {
    $elements = explode(":", $line);
    if (count($elements) &gt; 1) {
      $jstring = $jstring . $comma . '"' . trim($elements[0]) . '" : "' . $elements[1] .'"';
      $comma = ",";
    }
    if(strstr($line, "{")) {
      $elements = explode("{", $line);
      $key = trim($elements[0]);
      $jstring = $jstring . $comma . '"' . $key .'" : {';
      $comma = "";
    }
    if(strstr($line, "}")) {
      $jstring = $jstring . '} ';
      $comma = ",";
    }
  }
  $jstring = $jstring ."}";
  return json_decode($jstring);
}

function myCurl($f) {
// create curl resource 
   $ch = curl_init();
// set url 
   curl_setopt($ch, CURLOPT_URL, $f); 

//return the transfer as a string 
   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 

// $output contains the output string 
   $output = curl_exec($ch); 

// close curl resource to free up system resources 
   curl_close($ch);    
   return $output;
}
?&gt;
</snippet></ROW><ROW><id>20925220</id><snippet>curl</snippet></ROW><ROW><id>20925220</id><snippet>curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);</snippet></ROW><ROW><id>20925220</id><snippet>$i = 0;
foreach($urls as $url) {
  $temp = myCurl($url);
  if (strlen($temp) == 0) {
    echo 'no response from '.$url.'&lt;br&gt;';
  }
  else {
    $responses[$i] = parseString(myCurl($url));
    $i = $i + 1;
  }
}

echo '&lt;html&gt;&lt;body&gt;&lt;pre&gt;';
print_r($responses);
echo '&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;';

function myCurl($f) {
// create curl resource 
   $ch = curl_init();
// set url 
   curl_setopt($ch, CURLOPT_URL, $f); 

//return the transfer as a string 
   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 
   curl_setopt($ch, CURLOPT_NOSIGNAL, 1);
   curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10); // try for 10 seconds to get a connection
   curl_setopt($ch, CURLOPT_TIMEOUT, 30);        // try for 30 seconds to complete the transaction

// $output contains the output string 
   $output = curl_exec($ch); 

// see if any error was set:
   $curl_errno = curl_errno($ch);

// close curl resource to free up system resources 
   curl_close($ch);    

// make response depending on whether there was an error
   if($curl_errno &gt; 0) {
      return '';
   }
   else {
      return $output;
  }
}
</snippet></ROW><ROW><id>20925220</id><snippet>www.floris.us/SO/ships.csv</snippet></ROW><ROW><id>20925220</id><snippet>http://www.floris.us/SO/ships.txt
http://floris.dnsalias.com/noSuchFile.html
http://www.floris.us/SO/ships2.txt
</snippet></ROW><ROW><id>20925220</id><snippet>ships.txt</snippet></ROW><ROW><id>20925220</id><snippet>ships2.txt</snippet></ROW><ROW><id>20925220</id><snippet>ships3.php</snippet></ROW><ROW><id>20925220</id><snippet>&lt;?php
$urlstring = file_get_contents('http://www.floris.us/SO/ships.csv');
$urls = explode("\n", $urlstring); // one url per line

$responses = Array();

// loop over the urls, and get the information
// then parse it into the $responses array
$i = 0;
foreach($urls as $url) {
 $temp = myCurl($url);
  if(strlen($temp) &gt; 0) {
    $responses[$i] = parseString($temp);
    $i = $i + 1;
  }
  else {
    echo "URL ".$url." did not repond&lt;br&gt;";
  }
}

// produce the actual output table:
echo '&lt;html&gt;&lt;body&gt;';
writeTable($responses);
echo '&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;';

// ------------ support functions -------------
function parseString($s) {
  $lines = explode("\n", $s);
  $jstring = "{ ";
  $comma = "";
  foreach($lines as $line) {
    $elements = explode(":", $line);
    if (count($elements) &gt; 1) {
      $jstring = $jstring . $comma . '"' . trim($elements[0]) . '" : "' . $elements[1] .'"';
      $comma = ",";
    }
    if(strstr($line, "{")) {
      $elements = explode("{", $line);
      $key = trim($elements[0]);
      $jstring = $jstring . $comma . '"' . $key .'" : {';
      $comma = "";
    }
    if(strstr($line, "}")) {
      $jstring = $jstring . '} ';
      $comma = ",";
    }
  }
  $jstring = $jstring ."}";
  return json_decode($jstring, true);
}

function myCurl($f) {
// create curl resource 

   $ch = curl_init();
// set url 
   curl_setopt($ch, CURLOPT_URL, $f); 

//return the transfer as a string 
   curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 
   curl_setopt($ch, CURLOPT_NOSIGNAL, 1);
   curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10); // try for 10 seconds to get a connection
   curl_setopt($ch, CURLOPT_TIMEOUT, 30);        // try for 30 seconds to complete the transaction

// $output contains the output string 
   $output = curl_exec($ch); 

// see if any error was set:
   $curl_errno = curl_errno($ch);
   $curl_error = curl_error($ch);

// close curl resource to free up system resources 
   curl_close($ch);    

// make response depending on whether there was an error
   if($curl_errno &gt; 0) {
      echo 'Curl reported error '.$curl_error.'&lt;br&gt;';
      return '';
   }
   else {
      echo 'Successfully fetched '.$f.'&lt;br&gt;';
      return $output;
  }
}

function writeTable($r) {
  echo 'The following ships reported: &lt;br&gt;';
  echo '&lt;table border=1&gt;';
  foreach($r as $value) {
    if (strlen($value["vessel-name"]) &gt; 0) {
      echo '&lt;tr&gt;&lt;table border=1&gt;&lt;tr&gt;';
      echo '&lt;td&gt;Vessel Name&lt;/td&gt;&lt;td&gt;'.$value["vessel-name"].'&lt;/td&gt;&lt;/tr&gt;';
      echo '&lt;tr&gt;&lt;td&gt;Time:&lt;/td&gt;&lt;td&gt;'.dateFormat($value["time"]).'&lt;/td&gt;&lt;/tr&gt;';
      echo '&lt;tr&gt;&lt;td&gt;Position:&lt;/td&gt;&lt;td&gt;'.$value["position"].'&lt;/td&gt;&lt;/tr&gt;';
      echo '&lt;/table&gt;&lt;/tr&gt;';
    }
    echo '&lt;/table&gt;';
  }
}

function dateFormat($d) {
  // with input yyyymmddhhmm
  // return dd/mm/yy hh:mm
  $date = substr($d, 6, 2) ."/". substr($d, 4, 2) ."/". substr($d, 2, 2) ." ". substr($d, 9, 2) . ":" . substr($d, 11, 2);
  return $date;
}
?&gt;
</snippet></ROW><ROW><id>20925240</id><snippet>c:\baby1990.html</snippet></ROW><ROW><id>20925240</id><snippet>c:\x08aby1990.html</snippet></ROW><ROW><id>20925240</id><snippet>\b</snippet></ROW><ROW><id>20925240</id><snippet>&gt;&gt;&gt; "\b"
'\x08'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20925240</id><snippet>file=open(r"c:\baby1990.html")
</snippet></ROW><ROW><id>20925240</id><snippet>file=open("c:/baby1990.html")
</snippet></ROW><ROW><id>20925281</id><snippet># you should probably store person records in a data structure
persons = []

def read_persons_config_file(filename):
    # this method will read the line separated person records from the persons file
    # it will use methods like [open][4] to access the file and [readlines][5] to use data
    # it should probably call read_person_file() on each record
    # this method can maintain a list of persons
    pass

def read_person_file(filename):
    # this method should read a single person record and store it in a [data structure][6]
    # of your choice. I'd recommend you go with [dictionaries][7], but there are many
    # alternatives
    # this method should either return a result to the caller (the data structure you chose)
    # or append the data structure to a list of data structures (persons) you've created
    pass
</snippet></ROW><ROW><id>20925379</id><snippet>def purify (lst):
    retLst = []
    for key in lst:
        if key % 2 == 0:
            lst.append(key)
    return retLst
</snippet></ROW><ROW><id>20925827</id><snippet>sendPacket('\x5f\x00\x00\x00\x01\x00\x07\x01\xcc\x00\x00\x00\x1f\x8b')
</snippet></ROW><ROW><id>20925884</id><snippet>import simplejson as json
import requests

def jsonize(req):
     try:
         data = json.loads(req.content)
     except json.JsonDecodeError:
         data = {'error': req.status_code}
     except Exception:
         data = {}
     return data

def __init__(self, id):
     req = requests.get('http://api.example/%i?api_key=foo' % id)
     data = jsonize(req)
     if data and not 'error' in data:
         self.name = data.get('name', "")
</snippet></ROW><ROW><id>20925910</id><snippet>self.weigths = []
self.weights.append(...)
</snippet></ROW><ROW><id>20926144</id><snippet>for i,val in enumerate(y):
    print (i, val)
</snippet></ROW><ROW><id>20926144</id><snippet>for i in y</snippet></ROW><ROW><id>20926275</id><snippet>words_array = ['giraffe', 'elephant', 'ant', 'tiger', 'racoon', 'cat', 'hedgedog', 'mouse']

def longest_chain(words_array, current_chain):

    res_chain = list(current_chain)
    test_chain = []

    for s in words_array:
        temp_words_array = list(words_array)
        temp_words_array.remove(s)

        if len(current_chain) == 0:
            test_chain = longest_chain(temp_words_array, current_chain + [s])
        else:
            if s[0] == current_chain[-1][-1]:
                test_chain = longest_chain(temp_words_array, current_chain + [s])

        if len(test_chain) &gt; len(res_chain):
            res_chain = list(test_chain)

    return res_chain


print(longest_chain(words_array, []))
</snippet></ROW><ROW><id>20926572</id><snippet>sys.modules</snippet></ROW><ROW><id>20926572</id><snippet>from ... import *</snippet></ROW><ROW><id>20926760</id><snippet>[1, 2, 3]</snippet></ROW><ROW><id>20926760</id><snippet>[x for x in something]</snippet></ROW><ROW><id>20926760</id><snippet>for</snippet></ROW><ROW><id>20926760</id><snippet>dict</snippet></ROW><ROW><id>20926760</id><snippet>{1:2, 3:4}</snippet></ROW><ROW><id>20926760</id><snippet>{k:v for k, v in pairs}</snippet></ROW><ROW><id>20926760</id><snippet>for</snippet></ROW><ROW><id>20926760</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>20926760</id><snippet>for w in widgets</snippet></ROW><ROW><id>20926760</id><snippet>widgets</snippet></ROW><ROW><id>20926760</id><snippet>for w in widget.values()</snippet></ROW><ROW><id>20926760</id><snippet>widgets</snippet></ROW><ROW><id>20926760</id><snippet>widgets</snippet></ROW><ROW><id>20926785</id><snippet>from django.utils.importlib import import_module

class Source(models.Model):
    site_name = models.CharField(max_....)
    # module different for each source which is executed separately
    # and gets the data from given source...
    name_Of_module = models.CharField(max_....)

    def execute_module(self):
        try:
            module = import_module(self.name_Of_module)
        except TypeError:
            # relative import attempted without specifying package
        except ImportError:
            # cant import module
        # get whatever you need within the module
        return getattr(module, 'foo')()
</snippet></ROW><ROW><id>20926919</id><snippet>if</snippet></ROW><ROW><id>20926919</id><snippet>def transpose(self, print_matrix=True):
    '''
    Transpose a matrix.
    '''
    C = Z ## creating a new zero matrix
    for i in range(0, self.rows):
        for j in range(0, self.cols):
            C.matrix[i][j] = self.matrix[j][i]

    ## printing the resultant matrix
    if print_matrix:
        C.show()
    return C
</snippet></ROW><ROW><id>20926919</id><snippet>transpose(False)</snippet></ROW><ROW><id>20926928</id><snippet>upload_to</snippet></ROW><ROW><id>20926928</id><snippet>def get_obs_upload_path(instance, filename):
    my_custom_date = datetime.now()
    return '%s/%s' % (my_custom_date, filename)

class Obs(models.Model):
    date = models.DateTimeField(auto_now_add=False, verbose_name='Date')
    description = models.TextField(verbose_name='Description')
    content = models.FileField(verbose_name='File', upload_to=get_obs_upload_path)
    category = models.ForeignKey(ObsType, related_name='Type', verbose_name='type')
    user = models.ForeignKey(User, verbose_name='User')
</snippet></ROW><ROW><id>20926943</id><snippet>sorted()</snippet></ROW><ROW><id>20926943</id><snippet>&gt;&gt;&gt;&gt; sorted(set1.intersection(set2))
{'a', 'b', 'c', 'd'}
</snippet></ROW><ROW><id>20926976</id><snippet>dir</snippet></ROW><ROW><id>20926976</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; "walk" in dir(os)
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20926976</id><snippet>os.walk</snippet></ROW><ROW><id>20927174</id><snippet>try..except ImportError</snippet></ROW><ROW><id>20927174</id><snippet>try:
    from pythoncom import PumpWaitingMessages
    from pythoncom import Empty
    from pythoncom import Missing
    from pythoncom import com_error
    import win32api
except ImportError:
    # handle exception
</snippet></ROW><ROW><id>20927174</id><snippet>warnings</snippet></ROW><ROW><id>20927174</id><snippet>if-statement</snippet></ROW><ROW><id>20927174</id><snippet>sys.platform</snippet></ROW><ROW><id>20927174</id><snippet>import sys
if sys.platform == "win32":
    ...
elif sys.platform == 'cygwin':
    ...
elif sys.platform[:5] == 'linux':
    ...
elif sys.platform == 'darwin':
    ...
else:
    ...
</snippet></ROW><ROW><id>20927174</id><snippet>'posix'</snippet></ROW><ROW><id>20927174</id><snippet>'nt'</snippet></ROW><ROW><id>20927174</id><snippet>'os2'</snippet></ROW><ROW><id>20927174</id><snippet>'ce'</snippet></ROW><ROW><id>20927174</id><snippet>'java'</snippet></ROW><ROW><id>20927174</id><snippet>'riscos'</snippet></ROW><ROW><id>20927174</id><snippet>('32bit', 'ELF')</snippet></ROW><ROW><id>20927388</id><snippet>localflavors</snippet></ROW><ROW><id>20927388</id><snippet>widgets</snippet></ROW><ROW><id>20927388</id><snippet>class AssociationForm(ModelForm):
    telephone = CAPhoneNumberField()

    class Meta:
        model = Association
        fields = ('telephone','fax')
</snippet></ROW><ROW><id>20927568</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>20927568</id><snippet>sys.path</snippet></ROW><ROW><id>20927568</id><snippet>export PYTHONPATH=`python -c 'import sys;print ":".join(sys.path)'`
</snippet></ROW><ROW><id>20927585</id><snippet>M[i,j]</snippet></ROW><ROW><id>20927585</id><snippet>Element of real class i was classified as j</snippet></ROW><ROW><id>20927585</id><snippet>1 2 3
4 5 6
7 8 9
</snippet></ROW><ROW><id>20927585</id><snippet>i</snippet></ROW><ROW><id>20927585</id><snippet>i</snippet></ROW><ROW><id>20927585</id><snippet>4/15 of the class 2 objects are classified as class 1
5/15 of the class 2 objects are classified as class 2
6/15 of the class 2 objects are classified as class 3
</snippet></ROW><ROW><id>20927585</id><snippet>1/12 of the objects classified as class 1 were from class 1
4/12 of the objects classified as class 1 were from class 2
7/12 of the objects classified as class 1 were from class 3
</snippet></ROW><ROW><id>20927777</id><snippet>lxml</snippet></ROW><ROW><id>20927777</id><snippet>from lxml import etree
context = etree.iterparse(xmlfile)  # can also limit to certain events and tags
for event, elem in context:
    # do some stuff here with elem
    elem.clear()
    while elem.getprevious() is not None:
        del elem.getparent()[0]
</snippet></ROW><ROW><id>20927847</id><snippet>import pandas as pd
import numpy as np

s = pd.Series([1,2,3,4,1,2,3,3,2,1])

def ascends(s):
    diff = np.r_[0, (np.diff(s.values)&gt;=0).astype(int), 0]
    diff2 = np.diff(diff)
    descends = np.where(np.logical_not(diff)[1:] &amp; np.logical_not(diff)[:-1])[0]
    starts = np.sort(np.r_[np.where(diff2 &gt; 0)[0], descends])
    ends = np.sort(np.r_[np.where(diff2 &lt; 0)[0], descends])
    return ends - starts + 1

b = ascends(s)
print b
print b.max()
print b.min()
print b.mean()
</snippet></ROW><ROW><id>20927847</id><snippet>[4 4 1 1]
4
1
2.5
</snippet></ROW><ROW><id>20927907</id><snippet>requests</snippet></ROW><ROW><id>20927907</id><snippet>SSLError</snippet></ROW><ROW><id>20927907</id><snippet>requests.exceptions</snippet></ROW><ROW><id>20928079</id><snippet>Traceback (most recent call last):
  File "montyhall.py", line 1, in &lt;module&gt;
    import ui as numpy
ImportError: No module named ui
</snippet></ROW><ROW><id>20928079</id><snippet>import numpy as ui</snippet></ROW><ROW><id>20928079</id><snippet>Traceback (most recent call last):
  File "montyhall.py", line 27, in &lt;module&gt;
    a=simulate_prizedoor(4)
  File "montyhall.py", line 5, in simulate_prizedoor
    return sims
NameError: global name 'sims' is not defined
</snippet></ROW><ROW><id>20928079</id><snippet>def simulate_prizedoor(nsim):
    sim=ui.random.choice(3,nsim)
    return sim
</snippet></ROW><ROW><id>20928079</id><snippet>simulate_prizedoor</snippet></ROW><ROW><id>20928079</id><snippet>import numpy as ui

def simulate_prizedoor(nsim):
    sim=ui.random.choice(3,nsim)
    return sim

def simulate_guess(nsim):
    guesses=ui.random.choice(3,nsim)
    return guesses

def goat_door(prizedoors, guesses):
    result = ui.random.randint(0, 3, prizedoors.size)
    while True:
        bad = (result == prizedoors) | (result == guesses)
        if not bad.any():
            return result
        result[bad] = ui.random.randint(0, 3, bad.sum())

def switch_guesses(guesses, goatdoors):
    result = ui.random.randint(0, 3, guesses.size)
    while True:
        bad = (result == guesses) | (result == goatdoors)
        if not bad.any():
            return result
        result[bad] = ui.random.randint(0, 3, bad.sum())

a=simulate_prizedoor(4)
b=simulate_guess(4)
print(a)
print (b)
c=goat_door(a,b)
print(c)
d=switch_guesses(b,c)
print(d)
</snippet></ROW><ROW><id>20928141</id><snippet>echo</snippet></ROW><ROW><id>20928141</id><snippet>import subprocess
subprocess.call(['sudo', '-S', 'pacman', '-Syy'])
</snippet></ROW><ROW><id>20928141</id><snippet>sudo</snippet></ROW><ROW><id>20928141</id><snippet>shell=True</snippet></ROW><ROW><id>20928141</id><snippet>$nakel0ver</snippet></ROW><ROW><id>20928141</id><snippet>sudo</snippet></ROW><ROW><id>20928229</id><snippet>solution</snippet></ROW><ROW><id>20928229</id><snippet>&gt;&gt;&gt; l = [0,1,2]
&gt;&gt;&gt; list(l) # creates a new list from the old one
[0, 1, 2]
&gt;&gt;&gt; l[:] # slices also create a new object
[0, 1, 2]
&gt;&gt;&gt; import copy
&gt;&gt;&gt; copy.deepcopy(l) # create a deep copy of the object
[0, 1, 2]
&gt;&gt;&gt; [i for i in l] # manually copy an object
[0, 1, 2]
</snippet></ROW><ROW><id>20928229</id><snippet>list(...)</snippet></ROW><ROW><id>20928235</id><snippet>def save(self, *args, **kwargs):
    season = Season.objects.order_by('start')[0]
    self.season = season
    super(MyModelName,self).save(*args,**kwargs)
</snippet></ROW><ROW><id>20928277</id><snippet>phrase = "".join(c for c in phrase if c.isalpha())
</snippet></ROW><ROW><id>20928277</id><snippet>punct = [(i, c) for i, c in enumerate(phrase) if not c.isalpha()]
</snippet></ROW><ROW><id>20928277</id><snippet>phrase = list(phrase)
for i, c in punct:
    phrase.insert(i, c)
phrase = "".join(phrase)
</snippet></ROW><ROW><id>20928277</id><snippet>for char in phrase:
    if char.isalpha():
        # process
    else:
        pass # ignore spaces, punctuation, numbers
</snippet></ROW><ROW><id>20928308</id><snippet>replace1 = range(0,46)+range(58,127)+[47] #Makes a list of all the 
#ASCII characters  values that you don't want it to show,
#http://www.asciitable.com/, this includes all the letters,
#and excludes all numbers and '.'

text = '&lt;html&gt;&lt;body&gt;&lt;p&gt;127.0.0.1&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;' #Test data.
tmp = '' 

for i in range(len(text)-1): #this goes through each character in the text
...     if not ord(text[i]) in replace1: #checks if that character's 
#ASCII value is in not the list of 'Blacklisted' ASCII values, 
#then appends it to the tmp variable 
...             tmp += text[i]

print tmp
127.0.0.1
</snippet></ROW><ROW><id>20928632</id><snippet>conda create -n superbad scikit-learn
source activate superbad
pip install -e fnawesome  # (installs in default env b/c pip is global pip)
ipython  # runs global ipython with access to global site packages
python # runs the environment's python with no access to fnawesome
</snippet></ROW><ROW><id>20928632</id><snippet>conda create -n superbad scikit-learn pip ipython
source activate superbad
pip install -e fnawesome  # installing into superbad site packages
ipython  # runs superbad ipython
python  # runs the environment's python with access to fnawesome
source deactivate
ipython # no access to fnawesome
</snippet></ROW><ROW><id>20928644</id><snippet>argparse</snippet></ROW><ROW><id>20928644</id><snippet>op</snippet></ROW><ROW><id>20928644</id><snippet>argparse</snippet></ROW><ROW><id>20928644</id><snippet>def main():
    # The code you already have...

    if op.genres: genres(op.genres)

def genres(gs):
    # Do stuff with the genres...
</snippet></ROW><ROW><id>20928772</id><snippet>json.loads()</snippet></ROW><ROW><id>20928772</id><snippet>unicode</snippet></ROW><ROW><id>20928772</id><snippet>d = dict((key.encode('ascii'), value) for (key, value) in json.loads(raw_json).iteritems())
</snippet></ROW><ROW><id>20928814</id><snippet>(int)something</snippet></ROW><ROW><id>20928814</id><snippet>something</snippet></ROW><ROW><id>20928814</id><snippet>(int)</snippet></ROW><ROW><id>20928814</id><snippet>int(something)</snippet></ROW><ROW><id>20928814</id><snippet>int</snippet></ROW><ROW><id>20928814</id><snippet>something</snippet></ROW><ROW><id>20928814</id><snippet>int</snippet></ROW><ROW><id>20928814</id><snippet>(&lt;expr&gt;)</snippet></ROW><ROW><id>20928814</id><snippet>&lt;expr&gt;</snippet></ROW><ROW><id>20928814</id><snippet>&lt;expr&gt;</snippet></ROW><ROW><id>20928814</id><snippet>&lt;expr&gt;(...)</snippet></ROW><ROW><id>20928814</id><snippet>&lt;expr&gt;</snippet></ROW><ROW><id>20928814</id><snippet>&lt;expr&gt;</snippet></ROW><ROW><id>20928814</id><snippet>(x)(y)</snippet></ROW><ROW><id>20928814</id><snippet>x(y)</snippet></ROW><ROW><id>20928814</id><snippet>(int)(y)</snippet></ROW><ROW><id>20928814</id><snippet>int(y)</snippet></ROW><ROW><id>20928814</id><snippet>(0)(y)</snippet></ROW><ROW><id>20928814</id><snippet>0(y)</snippet></ROW><ROW><id>20928877</id><snippet>history.append( 4, 2, (128, 128, 128)</snippet></ROW><ROW><id>20928877</id><snippet>4,2</snippet></ROW><ROW><id>20928877</id><snippet>(128, 128, 128)</snippet></ROW><ROW><id>20928877</id><snippet>history[len(history)-1]</snippet></ROW><ROW><id>20928877</id><snippet>(128, 128, 128)</snippet></ROW><ROW><id>20928877</id><snippet>BLACK = (0, 0, 0)</snippet></ROW><ROW><id>20928877</id><snippet>current_color = None</snippet></ROW><ROW><id>20928877</id><snippet>history = []</snippet></ROW><ROW><id>20928877</id><snippet>def draw(event):
    global history, canvas
    #when a tile gets painted on
    X=event.pos[0]
    Y=event.pos[1]
    history.append(X,Y,canvas[X][Y])
    canvas[X][Y] = current_color



def undo():
    global history, canvas
    X = history[len(history)-1][0]
    Y = history[len(history)-1][1]
    color = history[len(history)-1][2]

    canvas[X][Y] = color
    history.pop(len(history)-1)
</snippet></ROW><ROW><id>20929137</id><snippet>logger = logging.getLogger('django')
logger.error('error')
logger.info('info')
logger.debug('debug')
</snippet></ROW><ROW><id>20929334</id><snippet>self</snippet></ROW><ROW><id>20929334</id><snippet>&lt;title&gt;{% block title %}{% endblock %} - {{ sitename }}&lt;/title&gt;
&lt;!-- ... snip ... --&gt;
&lt;h1&gt;{{ self.title() }}&lt;/h1&gt;
</snippet></ROW><ROW><id>20929438</id><snippet>import pandas as pd
import numpy as np

df = pd.DataFrame(np.random.randn(3,6),index=range(3),columns=list('abcdef'))
print(df)
#           a         b         c         d         e         f
# 0 -0.889810  1.348811 -1.071198  0.091841 -0.781704 -1.672864
# 1  0.398858  0.004976  1.280942  1.185749  1.260551  0.858973
# 2  1.279742  0.946470 -1.122450 -0.355737  1.457966  0.034319
result = pd.DataFrame(df.values.reshape(-1,3),
                      index=df.index.repeat(2), columns=list('XYZ'))
print(result)
</snippet></ROW><ROW><id>20929438</id><snippet>          X         Y         Z
0 -0.889810  1.348811 -1.071198
0  0.091841 -0.781704 -1.672864
1  0.398858  0.004976  1.280942
1  1.185749  1.260551  0.858973
2  1.279742  0.946470 -1.122450
2 -0.355737  1.457966  0.034319
</snippet></ROW><ROW><id>20929445</id><snippet>import os
os.environ['TERM'] #"linux" in console mode, "xterm" on graphic terminal
</snippet></ROW><ROW><id>20929445</id><snippet>import os,sys
try:
    assert 'DISPLAY' in os.environ
except AssertionError:
    sys.exit(1)
</snippet></ROW><ROW><id>20929491</id><snippet>block = Ref('block')
block = '{' + block + '}' | Token(re='[0-9]')
START = block
</snippet></ROW><ROW><id>20929491</id><snippet>{{0{1}}}</snippet></ROW><ROW><id>20929491</id><snippet>expr</snippet></ROW><ROW><id>20929491</id><snippet>from pyparsing import Forward, Literal, nums, oneOf, Word

l = lambda c: Literal(c).suppress()
block = Forward()
block &lt;&lt; (Word(nums, exact=1) ^ l('{') + block + l('}'))
print(block.parseString("{{0}}"))
</snippet></ROW><ROW><id>20929491</id><snippet>['0']
</snippet></ROW><ROW><id>20929504</id><snippet>pandas.get_dummies()</snippet></ROW><ROW><id>20929504</id><snippet>pandas.DataFrame.combineAdd</snippet></ROW><ROW><id>20929504</id><snippet>In [7]: df = pd.DataFrame({'col1': list('acb'),
                           'col2': list('bde'),
                           'val': [.5, .3, .2]})

In [8]: df1 = pd.get_dummies(df.col1)

In [9]: df2 = pd.get_dummies(df.col2)
</snippet></ROW><ROW><id>20929504</id><snippet>In [16]: df1
Out[16]: 
   a  b  c
0  1  0  0
1  0  0  1
2  0  1  0

[3 rows x 3 columns]

In [17]: df2
Out[17]: 
   b  d  e
0  1  0  0
1  0  1  0
2  0  0  1

[3 rows x 3 columns]
</snippet></ROW><ROW><id>20929504</id><snippet>In [10]: dummies = df1.combineAdd(df2)

In [18]: dummies
Out[18]: 
   a  b  c  d  e
0  1  1  0  0  0
1  0  0  1  1  0
2  0  1  0  0  1

[3 rows x 5 columns]
</snippet></ROW><ROW><id>20929504</id><snippet>val</snippet></ROW><ROW><id>20929504</id><snippet>In [19]: dummies['val'] = df.val

In [20]: dummies
Out[20]: 
   a  b  c  d  e  val
0  1  1  0  0  0  0.5
1  0  0  1  1  0  0.3
2  0  1  0  0  1  0.2

[3 rows x 6 columns]
</snippet></ROW><ROW><id>20929518</id><snippet>class MainPage(webapp2.RequestHandler):
    def get(self):
</snippet></ROW><ROW><id>20929518</id><snippet>pass</snippet></ROW><ROW><id>20929629</id><snippet>if subprocess.call(['rgrep', '-e', inp]) != 0: # rgrep failed
   print("error message of your choosing")
</snippet></ROW><ROW><id>20929629</id><snippet>grep</snippet></ROW><ROW><id>20929648</id><snippet>&lt;a href="{% url 'index' %}"&gt;{% trans "Home" %}&lt;/a&gt; |</snippet></ROW><ROW><id>20929740</id><snippet>class ProxyParser(object):
    def proxies1(self):
          try:
              self.page = 'http://free-proxy-list.net/' #Sets the variable page as our website
              self.sourceCode = opener.open(page).read() #Reads the source code
              self.titles = re.findall('&lt;tr&gt;&lt;td&gt;(.*?)&lt;/td&gt;&lt;td&gt;', sourceCode) #Parses the Html, collects the proxies
         for title in self.titles:
             proxy1 = title.replace(',', '').replace("!", '').replace(":", '').replace(";", '') 
         except Exception, e:

             print str(e)
def ports1(self):
    try:
        for title in self.titles:
            # etc.

proxy_parser = ProxyParser()
proxy_parser.proxies1()
proxy_parser.ports1()
</snippet></ROW><ROW><id>20929740</id><snippet>self</snippet></ROW><ROW><id>20929740</id><snippet>self.</snippet></ROW><ROW><id>20929740</id><snippet>return</snippet></ROW><ROW><id>20929740</id><snippet>def proxies1():
      try:
          page = 'http://free-proxy-list.net/' #Sets the variable page as our website
          sourceCode = opener.open(page).read() #Reads the source code
          titles = re.findall('&lt;tr&gt;&lt;td&gt;(.*?)&lt;/td&gt;&lt;td&gt;', sourceCode) #Parses the Html, collects the proxies
     for title in titles:
         proxy1 = title.replace(',', '').replace("!", '').replace(":", '').replace(";", '')
     except Exception, e:

         print str(e)
     return titles

def ports1(titles):
    for title in titles:
         # etc.

titles = proxies1()
ports1(titles)
</snippet></ROW><ROW><id>20929740</id><snippet>return</snippet></ROW><ROW><id>20929740</id><snippet>proxies</snippet></ROW><ROW><id>20929740</id><snippet>proxy1</snippet></ROW><ROW><id>20929740</id><snippet>return proxy1</snippet></ROW><ROW><id>20929740</id><snippet>ports1</snippet></ROW><ROW><id>20929740</id><snippet>port1</snippet></ROW><ROW><id>20929740</id><snippet>yield</snippet></ROW><ROW><id>20929740</id><snippet>zip</snippet></ROW><ROW><id>20929740</id><snippet>proxies = proxies1()
ports = ports1()
for proxy, port in zip(proxies, ports):
    print proxy + ':' + port
</snippet></ROW><ROW><id>20929761</id><snippet>shutil.copy</snippet></ROW><ROW><id>20929761</id><snippet>import shutil
shutil.copy('/local/mnt/workspace/user/Automation/swbuild/board/test_new.html',
            '/local/mnt/workspace/user/Automation/sw_admin/reports/board/test.html')
</snippet></ROW><ROW><id>20929841</id><snippet>def g(n):
    if n &lt;= 3:
        return n
    a, b, c = 1, 2, 3
    for i in range(n - 3):
        a, b, c = b, c, c + 2 * b + 3 * a
    return c
</snippet></ROW><ROW><id>20929841</id><snippet>for</snippet></ROW><ROW><id>20929841</id><snippet>def g(n):
    if n &lt;= 3:
        return n
    a, b, c = 1, 2, 3
    while n &gt; 3:
        a, b, c = b, c, c + 2 * b + 3 * a
        n -= 1
    return c
</snippet></ROW><ROW><id>20929902</id><snippet>any</snippet></ROW><ROW><id>20929902</id><snippet>key = 'foo@foo.bar'
print [d["keyid"] for d in klist if any(key in uid for uid in d["uids"])]
</snippet></ROW><ROW><id>20929902</id><snippet>[u'CF7BBCC34CCC28A0', u'865F4A95D4999F17', u'1F6A4AEA477EFBD6']
</snippet></ROW><ROW><id>20929984</id><snippet>matplotlib.dates</snippet></ROW><ROW><id>20929984</id><snippet>matplotlib.dates.epoch2num</snippet></ROW><ROW><id>20929984</id><snippet>results=[
    ...
]
for data in results:
    data[0] = epoch2num(data[0]) # &lt;---
</snippet></ROW><ROW><id>20930067</id><snippet>foo</snippet></ROW><ROW><id>20930067</id><snippet>bar</snippet></ROW><ROW><id>20930067</id><snippet>foo</snippet></ROW><ROW><id>20930114</id><snippet>from collections import OrderedDict

data = []
for line in eventVar.readline():
    # Remove braces
    line = line.strip()[1:-1]
    results = OrderedDict()
    # Split by comma sign
    for pair in line.split(','):
        # Get key and value by splitting on colon
        key, value = pair.split(':')
        # Use eval to get rid of quotation surrounding the key and value
        results[eval(key)] = eval(value)
        # Add the results from reading this line to a list
        data.append(results)
</snippet></ROW><ROW><id>20930146</id><snippet>packages</snippet></ROW><ROW><id>20930146</id><snippet>includes</snippet></ROW><ROW><id>20930146</id><snippet>list</snippet></ROW><ROW><id>20930146</id><snippet>options</snippet></ROW><ROW><id>20930146</id><snippet>    options = {
                  'py2exe': {
                      'packages':['encodings'],
                      'includes': ['cairo', 'pango', 'pangocairo', 'atk', 'gobject'],
                  }
              },
</snippet></ROW><ROW><id>20930207</id><snippet>cell.get('{urn:schemas-microsoft-com:office:spreadsheet}Type')
</snippet></ROW><ROW><id>20930207</id><snippet>cell.get('{%(ss)s}Type' % namespaces)
</snippet></ROW><ROW><id>20930207</id><snippet>cell.get('{{{0[ss]}}}Type'.format(namespaces))
</snippet></ROW><ROW><id>20930346</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; t = '''ctl00_PD_lblProductTitle

prod-detail-info

prodprice price-onsale

rating-score

RatingScore'''
&gt;&gt;&gt; nltk.tokenize.wordpunct_tokenize(t)
['ctl00_PD_lblProductTitle', 'prod', '-', 'detail', '-', 'info', 'prodprice', 'price', '-', 'onsale', 'rating', '-', 'score', 'RatingScore']
</snippet></ROW><ROW><id>20930346</id><snippet>&gt;&gt;&gt; re.findall(r'[A-Z][a-z]{2,}', 'ctl00_PD_lblProductTitle')  # also works for 'RatingScore'
['Product', 'Title']
</snippet></ROW><ROW><id>20930346</id><snippet>&gt;&gt;&gt; def split_at_uppercase(text):
    result = []
    new_word = []
    for char in text:
        if char.isupper():
            if new_word:
                result.append(''.join(new_word))
            new_word = []
            new_word.append(char)
        elif new_word and char == ' ':  # in more complicate scenarios, may need to use regex for white space
            result.append(''.join(new_word))
            new_word = []
        elif char != ' ':
            new_word.append(char)
    else:
        result.append(''.join(new_word))
    return result

&gt;&gt;&gt; t = 'καὶ τοῦΠιλάτου εἰςἹεροσόλυμα'
&gt;&gt;&gt; split_at_uppercase(t)
['καὶ', 'τοῦ', 'Πιλάτου', 'εἰς', 'Ἱεροσόλυμα']
</snippet></ROW><ROW><id>20930549</id><snippet>pkexec</snippet></ROW><ROW><id>20930549</id><snippet>proc = subprocess.Popen(['/usr/bin/pkexec', command])
</snippet></ROW><ROW><id>20930572</id><snippet>grouper recipe</snippet></ROW><ROW><id>20930572</id><snippet>def grouper(iterable, n, fillvalue=None):
    "Collect data into fixed-length chunks or blocks"
    # grouper('ABCDEFG', 3, 'x') --&gt; ABC DEF Gxx
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)
</snippet></ROW><ROW><id>20930572</id><snippet>&gt;&gt;&gt; from itertools import izip_longest # needed for grouper helper
&gt;&gt;&gt; list(grouper([1,2,3,4,5,6,7], 2))
[(1, 2), (3, 4), (5, 6), (7, None)]
</snippet></ROW><ROW><id>20930610</id><snippet>width=1</snippet></ROW><ROW><id>20930610</id><snippet>candlestick</snippet></ROW><ROW><id>20930610</id><snippet>candlestick</snippet></ROW><ROW><id>20930610</id><snippet>30 / 86400.0</snippet></ROW><ROW><id>20930610</id><snippet>candlestick(ax, results, width=30/86400.0)
</snippet></ROW><ROW><id>20930910</id><snippet>scipy.interpolate.griddata</snippet></ROW><ROW><id>20930910</id><snippet>sp.spatial.qhull.Dealunay</snippet></ROW><ROW><id>20930910</id><snippet>import scipy.interpolate as spint
import scipy.spatial.qhull as qhull
import itertools

def interp_weights(xyz, uvw):
    tri = qhull.Delaunay(xyz)
    simplex = tri.find_simplex(uvw)
    vertices = np.take(tri.simplices, simplex, axis=0)
    temp = np.take(tri.transform, simplex, axis=0)
    delta = uvw - temp[:, d]
    bary = np.einsum('njk,nk-&gt;nj', temp[:, :d, :], delta)
    return vertices, np.hstack((bary, 1 - bary.sum(axis=1, keepdims=True)))

def interpolate(values, vtx, wts):
    return np.einsum('nj,nj-&gt;n', np.take(values, vtx), wts)
</snippet></ROW><ROW><id>20930910</id><snippet>interp_weights</snippet></ROW><ROW><id>20930910</id><snippet>interpolate</snippet></ROW><ROW><id>20930910</id><snippet>m, n, d = 3.5e4, 3e3, 3
# make sure no new grid point is extrapolated
bounding_cube = np.array(list(itertools.product([0, 1], repeat=d)))
xyz = np.vstack((bounding_cube,
                 np.random.rand(m - len(bounding_cube), d)))
f = np.random.rand(m)
g = np.random.rand(m)
uvw = np.random.rand(n, d)

In [2]: vtx, wts = interp_weights(xyz, uvw)

In [3]: np.allclose(interpolate(f, vtx, wts), spint.griddata(xyz, f, uvw))
Out[3]: True

In [4]: %timeit spint.griddata(xyz, f, uvw)
1 loops, best of 3: 2.81 s per loop

In [5]: %timeit interp_weights(xyz, uvw)
1 loops, best of 3: 2.79 s per loop

In [6]: %timeit interpolate(f, vtx, wts)
10000 loops, best of 3: 66.4 us per loop

In [7]: %timeit interpolate(g, vtx, wts)
10000 loops, best of 3: 67 us per loop
</snippet></ROW><ROW><id>20930910</id><snippet>griddata</snippet></ROW><ROW><id>20930910</id><snippet>vtx</snippet></ROW><ROW><id>20930910</id><snippet>wts</snippet></ROW><ROW><id>20930910</id><snippet>griddata</snippet></ROW><ROW><id>20930910</id><snippet>griddata</snippet></ROW><ROW><id>20930910</id><snippet>fill_value</snippet></ROW><ROW><id>20930910</id><snippet>def interpolate(values, vtx, wts, fill_value=np.nan):
    ret = np.einsum('nj,nj-&gt;n', np.take(values, vtx), wts)
    ret[np.any(wts &lt; 0, axis=1)] = fill_value
    return ret
</snippet></ROW><ROW><id>20930962</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; ts = 1388898695
&gt;&gt;&gt; dt = datetime.datetime.fromtimestamp(ts)
&gt;&gt;&gt; dt.hour,dt.minute,dt.second
(8, 11, 35)
&gt;&gt;&gt; next_ts = dt+datetime.timedelta(minutes=1,seconds=-dt.second)
&gt;&gt;&gt; next_ts.hour,next_ts.minute,next_ts.second
(8, 12, 0)
&gt;&gt;&gt; prev_ts = dt-datetime.timedelta(minutes=1,seconds=dt.second)
&gt;&gt;&gt; prev_ts.hour,prev_ts.minute,prev_ts.second
(8, 10, 0)
</snippet></ROW><ROW><id>20930989</id><snippet>(channel_id, content_id)</snippet></ROW><ROW><id>20930989</id><snippet>uuid[]</snippet></ROW><ROW><id>20930990</id><snippet>stream = p.open(format=p.get_format_from_width(WIDTH),
                channels=CHANNELS,
                rate=RATE,
                input=True,
                output=True,
                frames_per_buffer=4096,
                stream_callback=callback)
</snippet></ROW><ROW><id>20931017</id><snippet>import re
import time
t = time.time()
obj = re.compile('{.*?: (\d*?)}')
with open('datafile.txt', 'r') as f:
    data = f.read()
s = set(m.group(1) for m in obj.finditer(data))
s = set(map(int, s))
print time.time() - t
</snippet></ROW><ROW><id>20931017</id><snippet>import re
obj = re.compile('{.*?: (\d*?)}')
with open('datafile.txt', 'r') as f:
    data = f.read()
s = set(obj.findall(data))
</snippet></ROW><ROW><id>20931147</id><snippet>udisksctl status</snippet></ROW><ROW><id>20931164</id><snippet>:w !{cmd}</snippet></ROW><ROW><id>20931164</id><snippet>:map &lt;F4&gt; :w !python&lt;cr&gt;
</snippet></ROW><ROW><id>20931164</id><snippet>help :w_c</snippet></ROW><ROW><id>20931164</id><snippet>:[range]w[rite] [++opt] !{cmd}</snippet></ROW><ROW><id>20931164</id><snippet>      Execute {cmd} with [range] lines as standard input
      (note the space in front of the '!').  {cmd} is
      executed like with ":!{cmd}", any '!' is replaced with
      the previous command |:!|.
</snippet></ROW><ROW><id>20931164</id><snippet>__file__</snippet></ROW><ROW><id>20931164</id><snippet>'&lt;stdin&gt;'</snippet></ROW><ROW><id>20931254</id><snippet>twisted_hang</snippet></ROW><ROW><id>20931276</id><snippet>scipy.spatial.cKDTree</snippet></ROW><ROW><id>20931276</id><snippet>def count_neighbours(arr1, arr2, rad):
    rad2 = rad * rad
    ret = np.empty((len(arr1),), dtype=np.intp)
    for j, point in enumerate(arr1):
        delta = point - arr2
        delta *= delta
        dist2 = np.sum(delta, axis=1)
        ret[j] = np.count_nonzero(dist2 &lt;= rad2)
    return ret
</snippet></ROW><ROW><id>20931276</id><snippet>rand_pos = np.random.rand(900, 3)
gal_pos = np.random.rand(1e5, 3) # 10x smaller than OP's data set
</snippet></ROW><ROW><id>20931276</id><snippet>&gt;&gt;&gt; from scipy.spatial import cKDTree
&gt;&gt;&gt; gal_tree = cKDTree(gal_pos)
&gt;&gt;&gt; np.all(np.equal(count_neighbours(rand_pos, gal_pos, 0.1),
...                 [len(x) for x in gal_tree.query_ball_point(rand_pos, 0.1)]))
True
</snippet></ROW><ROW><id>20931276</id><snippet>In [13]: %timeit count_neighbours(rand_pos, gal_pos, 0.1)
1 loops, best of 3: 3.59 s per loop

In [14]: %timeit [len(x) for x in gal_tree.query_ball_point(rand_pos, 0.1)]
1 loops, best of 3: 194 ms per loop

In [15]: %timeit cKDTree(gal_pos)
100 loops, best of 3: 18.7 ms per loop
</snippet></ROW><ROW><id>20931276</id><snippet>gal_pos</snippet></ROW><ROW><id>20931276</id><snippet>In [16]: gal_pos = np.random.rand(1e6, 3)

In [17]: gal_tree = cKDTree(gal_pos)

In [18]: %timeit cKDTree(gal_pos)
1 loops, best of 3: 274 ms per loop

In [19]: %timeit [len(x) for x in gal_tree.query_ball_point(rand_pos, 0.1)]
1 loops, best of 3: 1.22 s per loop
</snippet></ROW><ROW><id>20931376</id><snippet>&lt;p&gt;When: It will take place in the year {{ object.when.year }} and the month {{ object.when.month }}&lt;/p&gt;
</snippet></ROW><ROW><id>20931376</id><snippet>{{ "It will take place in the year %(year) and the month %(month)." % {'year': objects.when.year, 'month': objects.when.month} }}
</snippet></ROW><ROW><id>20931385</id><snippet>def print_board(board):
    for row in board:
        print ' '.join(row)

def game_board(width, height):
    return [['_' for i in xrange(width)] for j in xrange(height)]

board = game_board(3,3)

board[0][2] = 'X'
board[1][1] = 'X'

print_board( board )
</snippet></ROW><ROW><id>20931505</id><snippet>parent_map = dict((c, p) for p in tree.getiterator() for c in p)
</snippet></ROW><ROW><id>20931505</id><snippet>lxml</snippet></ROW><ROW><id>20931505</id><snippet>lxml</snippet></ROW><ROW><id>20931505</id><snippet>for elem in list(tree.getiterator('pre')):
    parent = parent_map[elem]
    wrap_elem(parent, elem)
</snippet></ROW><ROW><id>20931505</id><snippet>def wrap_elem(parent, elem)
    parent_index = list(parent).index(elem)
    parent.remove(elem)
    new_elem = ET.Element('div', attrib={'class': 'wrapper'})
    parent.insert(parent_index, new_elem)
    new_elem.append(elem)
</snippet></ROW><ROW><id>20931590</id><snippet>in</snippet></ROW><ROW><id>20931590</id><snippet>if not request.user in thread.participants.all():
    ...
</snippet></ROW><ROW><id>20931630</id><snippet>Serial.println("xyz123 " + tempAsString);
</snippet></ROW><ROW><id>20931630</id><snippet>"xyz123 value"     ("value" is any float value)
</snippet></ROW><ROW><id>20931630</id><snippet>ardString</snippet></ROW><ROW><id>20931630</id><snippet>Serial.println("xyz123" + tempAsString);
</snippet></ROW><ROW><id>20931630</id><snippet>ardString  -&gt;  "xyz123value"
</snippet></ROW><ROW><id>20931630</id><snippet>valueMatrix = ardString.split(' ')  -&gt; ["xyz123value"]
</snippet></ROW><ROW><id>20931630</id><snippet>string</snippet></ROW><ROW><id>20931630</id><snippet>ardString</snippet></ROW><ROW><id>20931630</id><snippet>print("value received:" + ardString + " interpreted as: project Id = " + projectId + " and value = " + value)
</snippet></ROW><ROW><id>20931633</id><snippet>bin/easy_install psycopg2
</snippet></ROW><ROW><id>20932086</id><snippet>[]</snippet></ROW><ROW><id>20932086</id><snippet>{}</snippet></ROW><ROW><id>20932086</id><snippet>(line,value)</snippet></ROW><ROW><id>20932355</id><snippet>def stripString(ann):
    return ann.strip().lstrip("(").rstrip(")").split("..")

def parseAnnotation(ann):
    return [tuple(map(int, stripString(j))) for j in ann.split(",")]

print parseAnnotation('(459..521),(1834..2736)')
</snippet></ROW><ROW><id>20932355</id><snippet>[(459, 521), (1834, 2736)]
</snippet></ROW><ROW><id>20932355</id><snippet>parseAnnotation</snippet></ROW><ROW><id>20932355</id><snippet>(459..521),(1834..2736)</snippet></ROW><ROW><id>20932355</id><snippet>,</snippet></ROW><ROW><id>20932355</id><snippet>['(459..521)', '(1834..2736)']</snippet></ROW><ROW><id>20932355</id><snippet>(459..521)</snippet></ROW><ROW><id>20932355</id><snippet>stripString</snippet></ROW><ROW><id>20932355</id><snippet>(459..521)</snippet></ROW><ROW><id>20932355</id><snippet>strip()</snippet></ROW><ROW><id>20932355</id><snippet>lstrip("(")</snippet></ROW><ROW><id>20932355</id><snippet>rstrip(")")</snippet></ROW><ROW><id>20932355</id><snippet>(</snippet></ROW><ROW><id>20932355</id><snippet>)</snippet></ROW><ROW><id>20932355</id><snippet>'459..521'</snippet></ROW><ROW><id>20932355</id><snippet>..</snippet></ROW><ROW><id>20932355</id><snippet>['459', '521']</snippet></ROW><ROW><id>20932355</id><snippet>stripString</snippet></ROW><ROW><id>20932355</id><snippet>tuple(map(int, ['459', '521']))
</snippet></ROW><ROW><id>20932355</id><snippet>int</snippet></ROW><ROW><id>20932355</id><snippet>tuple([459, 521])</snippet></ROW><ROW><id>20932355</id><snippet>(459, 521)</snippet></ROW><ROW><id>20932389</id><snippet>threads = pm_thread.objects.filter(participants=request.user).order_by('-pm_message__datetime')
</snippet></ROW><ROW><id>20932789</id><snippet>shape=(100,100,4)</snippet></ROW><ROW><id>20932789</id><snippet>cl.Image</snippet></ROW><ROW><id>20932789</id><snippet>f = cl.ImageFormat(cl.channel_order.R, cl.channel_type.UNSIGNED_INT8)
....
dst_image = cl.Image(ctx, mf.WRITE_ONLY , f, shape=(100,100,4))
...
cl.enqueue_copy(queue, postimage, dst_image,
                origin=(0, 0, 0),
                region=(100,100,4))
</snippet></ROW><ROW><id>20932789</id><snippet>f = cl.ImageFormat(cl.channel_order.RGBA, cl.channel_type.UNSIGNED_INT8)
....
dst_image = cl.Image(ctx, mf.WRITE_ONLY , f, shape=(100,100))
....
cl.enqueue_copy(queue, postimage, dst_image,
                origin=(0, 0),
                region=(100,100))
</snippet></ROW><ROW><id>20932789</id><snippet>matplotlib</snippet></ROW><ROW><id>20932789</id><snippet>write_imagef(dst, (int2)(column, row), (float4)(1.0f, 0.0f, 0.0f, 1.0f));
</snippet></ROW><ROW><id>20932856</id><snippet>x = [0] * 10
</snippet></ROW><ROW><id>20932856</id><snippet>y = [x] * 3
y[0] is y[1]
&gt;&gt;&gt; True
</snippet></ROW><ROW><id>20932856</id><snippet>y = [t[:] for t in y]
y[0] is y[1]
&gt;&gt;&gt; False
</snippet></ROW><ROW><id>20933109</id><snippet>from protorpc import messages
class HelloRequest(messages.Message):
</snippet></ROW><ROW><id>20933109</id><snippet>from protorpc.messages import Message
class HelloRequest(Message):
</snippet></ROW><ROW><id>20933109</id><snippet>import protorpc
class HelloRequest(protorpc.messages.Message):
</snippet></ROW><ROW><id>20933109</id><snippet>HelloRequest</snippet></ROW><ROW><id>20933109</id><snippet>Message</snippet></ROW><ROW><id>20933109</id><snippet>class</snippet></ROW><ROW><id>20933109</id><snippet>messages</snippet></ROW><ROW><id>20933109</id><snippet>protorpc</snippet></ROW><ROW><id>20933170</id><snippet>filename= raw_input("keywords.txt")
for line in open(keywords.txt,'r').readlines():
</snippet></ROW><ROW><id>20933170</id><snippet>filename = 'keywords.txt'
for line in open(filename,'r').readlines():
</snippet></ROW><ROW><id>20933170</id><snippet>for line in open('keywords.txt','r').readlines():
</snippet></ROW><ROW><id>20933170</id><snippet>keywords.txt</snippet></ROW><ROW><id>20933588</id><snippet>.gitignore</snippet></ROW><ROW><id>20933588</id><snippet>*.pyc</snippet></ROW><ROW><id>20933588</id><snippet>*.py[cod]</snippet></ROW><ROW><id>20933588</id><snippet>.pyc</snippet></ROW><ROW><id>20933588</id><snippet>.pyo</snippet></ROW><ROW><id>20933588</id><snippet>.pyd</snippet></ROW><ROW><id>20933659</id><snippet>load_file</snippet></ROW><ROW><id>20933659</id><snippet>load_file</snippet></ROW><ROW><id>20933659</id><snippet>abtn = Button(self, text="Open", command=load_file(area))
</snippet></ROW><ROW><id>20933659</id><snippet>labmda</snippet></ROW><ROW><id>20933659</id><snippet>abtn = Button(self, text="Open", command=lambda: load_file(area))
</snippet></ROW><ROW><id>20933739</id><snippet>+</snippet></ROW><ROW><id>20933739</id><snippet>\((\d+),0,'(\S+?)'</snippet></ROW><ROW><id>20933752</id><snippet>post_contents = {'someVar':file_contents}
request = webapp2.Request.blank('/', POST=post_contents)
response = request.get_response(main.app)
</snippet></ROW><ROW><id>20933766</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; x = np.array([1,255,256], dtype=np.int32)
&gt;&gt;&gt; y = x.view(np.uint8)
</snippet></ROW><ROW><id>20933766</id><snippet>x</snippet></ROW><ROW><id>20933766</id><snippet>x.dtype = np.uint8</snippet></ROW><ROW><id>20933766</id><snippet>&gt;&gt;&gt; x
array([  1, 255, 256])
&gt;&gt;&gt; y
array([  1,   0,   0,   0, 255,   0,   0,   0,   0,   1,   0,   0], dtype=uint8)
</snippet></ROW><ROW><id>20933766</id><snippet>y</snippet></ROW><ROW><id>20933766</id><snippet>x</snippet></ROW><ROW><id>20933766</id><snippet>y</snippet></ROW><ROW><id>20933766</id><snippet>x</snippet></ROW><ROW><id>20933766</id><snippet>&gt;&gt;&gt; y[:] = 255
&gt;&gt;&gt; x
array([-1, -1, -1])
</snippet></ROW><ROW><id>20933766</id><snippet>&gt;&gt; x = int32([1,2,3])
x =
           1           2           3
&gt;&gt; y = typecast(x, 'uint8')
y =
    1    0    0    0    2    0    0    0    3    0    0    0

&gt;&gt; y(:) = 255
y =
  255  255  255  255  255  255  255  255  255  255  255  255
&gt;&gt; xx = typecast(y, 'int32')
xx =
          -1          -1          -1
</snippet></ROW><ROW><id>20933766</id><snippet>typecastx</snippet></ROW><ROW><id>20933766</id><snippet># wraps around the other end
&gt;&gt;&gt; np.array(257, dtype=np.uint8)
array(1, dtype=uint8)
</snippet></ROW><ROW><id>20933766</id><snippet>% saturates at the maximum
&gt;&gt; uint8(257)
ans =
  255
</snippet></ROW><ROW><id>20933964</id><snippet>time.strptime</snippet></ROW><ROW><id>20933964</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>20933964</id><snippet>datetime</snippet></ROW><ROW><id>20933964</id><snippet>time.strptime</snippet></ROW><ROW><id>20933964</id><snippet>datetime.datetime.strptime</snippet></ROW><ROW><id>20933964</id><snippet>datetime</snippet></ROW><ROW><id>20933964</id><snippet>now</snippet></ROW><ROW><id>20933964</id><snippet>then</snippet></ROW><ROW><id>20933964</id><snippet>import datetime as DT
now = DT.datetime.now()   
then = DT.datetime.strptime('2014-1-2', '%Y-%m-%d')
delta = now - then 
print(delta)
# 3 days, 8:17:14.428035
</snippet></ROW><ROW><id>20933964</id><snippet>time.strptime</snippet></ROW><ROW><id>20933964</id><snippet>DT.datetime.strptime</snippet></ROW><ROW><id>20933964</id><snippet>time.strptime(date)
</snippet></ROW><ROW><id>20933964</id><snippet>'Fri, 10 Jun 2011 11:04:17 '</snippet></ROW><ROW><id>20933964</id><snippet>then = DT.datetime.strptime('Fri, 10 Jun 2011 11:04:17 '.strip(), "%a, %d %b %Y %H:%M:%S")
print(then)
# 2011-06-10 11:04:17
</snippet></ROW><ROW><id>20933964</id><snippet>%Y</snippet></ROW><ROW><id>20933964</id><snippet>%m</snippet></ROW><ROW><id>20934076</id><snippet>set_text</snippet></ROW><ROW><id>20934076</id><snippet>__init__</snippet></ROW><ROW><id>20934076</id><snippet>''</snippet></ROW><ROW><id>20934076</id><snippet>__init__</snippet></ROW><ROW><id>20934076</id><snippet>from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.lang import Builder
from kivy.properties import StringProperty

Builder.load_string('''
&lt;Simple&gt;:
    Label:
        #text: 'Hello World' # THIS IS WORKING
        text: root.sometext
''')

class Simple(BoxLayout):
    sometext = StringProperty('')

    def __init__(self, **kwargs):
        super(Simple, self).__init__(**kwargs)

        self.sometext = 'Hello from Init.'

class TApp(App):
    def build(self):
        return Simple()


TApp().run()
</snippet></ROW><ROW><id>20934149</id><snippet>self.i</snippet></ROW><ROW><id>20934149</id><snippet>i</snippet></ROW><ROW><id>20934149</id><snippet>&gt;&gt;&gt; print id(A.i), id(a.i)
9437588 9437576
</snippet></ROW><ROW><id>20934149</id><snippet>A.i</snippet></ROW><ROW><id>20934149</id><snippet>a.i</snippet></ROW><ROW><id>20934149</id><snippet>A.i = A.i + 1
</snippet></ROW><ROW><id>20934149</id><snippet>A.i += 1
</snippet></ROW><ROW><id>20934398</id><snippet>ImproperlyConfigured</snippet></ROW><ROW><id>20934398</id><snippet>from logins.models import *</snippet></ROW><ROW><id>20934398</id><snippet>./manage.py shell</snippet></ROW><ROW><id>20934398</id><snippet>DoesNotExist</snippet></ROW><ROW><id>20934444</id><snippet>test</snippet></ROW><ROW><id>20934444</id><snippet>test</snippet></ROW><ROW><id>20934444</id><snippet>test</snippet></ROW><ROW><id>20934444</id><snippet>&gt; nvcc -arch=sm_21 -Xptxas="-v" -m32 -c wnkr_py.cu
wnkr_py.cu
wnkr_py.cu(7): warning: variable "test" was set but never used

tmpxft_00000394_00000000-5_wnkr_py.cudafe1.gpu
tmpxft_00000394_00000000-10_wnkr_py.cudafe2.gpu
wnkr_py.cu
wnkr_py.cu(7): warning: variable "test" was set but never used

ptxas : info : 0 bytes gmem
ptxas : info : Compiling entry function '_Z6totaalPi' for 'sm_21'
ptxas : info : Function properties for _Z6totaalPi
    0 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas : info : Used 8 registers, 36 bytes cmem[0], 4 bytes cmem[16]
tmpxft_00000394_00000000-5_wnkr_py.cudafe1.cpp
tmpxft_00000394_00000000-15_wnkr_py.ii
</snippet></ROW><ROW><id>20934444</id><snippet>&gt;nvcc -arch=sm_21 -Xptxas="-v" -m32 -c wnkr_py.cu
wnkr_py.cu
tmpxft_000017c8_00000000-5_wnkr_py.cudafe1.gpu
tmpxft_000017c8_00000000-10_wnkr_py.cudafe2.gpu
wnkr_py.cu
ptxas : info : 0 bytes gmem
ptxas : info : Compiling entry function '_Z6totaalPi' for 'sm_21'
ptxas : info : Function properties for _Z6totaalPi
    1228800 bytes stack frame, 0 bytes spill stores, 0 bytes spill loads
ptxas : info : Used 7 registers, 36 bytes cmem[0]
tmpxft_000017c8_00000000-5_wnkr_py.cudafe1.cpp
tmpxft_000017c8_00000000-15_wnkr_py.ii
</snippet></ROW><ROW><id>20934444</id><snippet>test</snippet></ROW><ROW><id>20934836</id><snippet>var data=JSON.parse(dataRows.total_accident);
</snippet></ROW><ROW><id>20934836</id><snippet>var data = dataRows.total_json;
</snippet></ROW><ROW><id>20934836</id><snippet>total_accident</snippet></ROW><ROW><id>20934836</id><snippet>JSON.parse()</snippet></ROW><ROW><id>20934836</id><snippet>{{page_data}}</snippet></ROW><ROW><id>20934836</id><snippet>JSON.parse()</snippet></ROW><ROW><id>20934836</id><snippet>dataRows</snippet></ROW><ROW><id>20934900</id><snippet>argv</snippet></ROW><ROW><id>20934900</id><snippet>def test(**argv):
    print type(argv)

test()

&gt;&gt;&gt; &lt;type 'dict'&gt;
</snippet></ROW><ROW><id>20934940</id><snippet>fetchall()</snippet></ROW><ROW><id>20934940</id><snippet>pk__in=[p[0] for p in property_list]
</snippet></ROW><ROW><id>20935202</id><snippet>u</snippet></ROW><ROW><id>20935202</id><snippet>"</snippet></ROW><ROW><id>20935202</id><snippet>&gt;&gt;&gt; _string = u"años luz detrás"
&gt;&gt;&gt; print _string.encode("utf-8")
años luz detrás
</snippet></ROW><ROW><id>20935287</id><snippet>SELECT Name, Club, 
SUM(CASE WHEN Place = 1 THEN 1 ELSE 0 END) AS Gold,
SUM(CASE WHEN Place = 2 THEN 1 ELSE 0 END) AS Silver,
SUM(CASE WHEN Place = 3 THEN 1 ELSE 0 END) AS Bronze
FROM tbl 
GROUP BY Name, Club
</snippet></ROW><ROW><id>20935287</id><snippet>+------+------+------+--------+--------+
| Name | Club | Gold | Silver | Bronze |
+------+------+------+--------+--------+
| Jane | DEF  |  1   |   0    |   1    |
| John | ABC  |  2   |   1    |   0    |
| Mark | ABC  |  0   |   1    |   0    |
+------+------+------+--------+--------+
</snippet></ROW><ROW><id>20935493</id><snippet>virtualenv</snippet></ROW><ROW><id>20935493</id><snippet>virtualenv</snippet></ROW><ROW><id>20935493</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>20935493</id><snippet>workon</snippet></ROW><ROW><id>20935493</id><snippet>virtualenv</snippet></ROW><ROW><id>20935493</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>20935493</id><snippet>virtualenvwrapper</snippet></ROW><ROW><id>20935618</id><snippet>http://arbsq.net/canvas</snippet></ROW><ROW><id>20935618</id><snippet>index.py</snippet></ROW><ROW><id>20935618</id><snippet>DirectoryIndex</snippet></ROW><ROW><id>20935618</id><snippet>DirectoryIndex index.py index.htm
</snippet></ROW><ROW><id>20935618</id><snippet>index.py</snippet></ROW><ROW><id>20935618</id><snippet>index.htm</snippet></ROW><ROW><id>20935618</id><snippet>Redirect 301</snippet></ROW><ROW><id>20935746</id><snippet>input</snippet></ROW><ROW><id>20935746</id><snippet>else</snippet></ROW><ROW><id>20935746</id><snippet>BTWcalculator()</snippet></ROW><ROW><id>20935746</id><snippet>def BTWcalculator():

    price = float(input("What is the products price?: "))
    btw = input("Please enter a valid BTW-class: 1 = 6%, 2 = 19%: ")
    if btw == "1":
        return price * 1.06
    elif btw == "2":
        return price * 1.19
    else:
        return BTWcalculator()
</snippet></ROW><ROW><id>20935746</id><snippet>print BTWcalculator()
</snippet></ROW><ROW><id>20935746</id><snippet>What is the products price?: 10
Please enter a valid BTW-class: 1 = 6%, 2 = 19%: 3
What is the products price?: 10
Please enter a valid BTW-class: 1 = 6%, 2 = 19%: 1
10.6
</snippet></ROW><ROW><id>20936013</id><snippet>| de/
  | __init__.py
  | christianae/
    | __init__.py
    | main/
      | __init__.py
      | common/
        | __init__.py
        | code.py
</snippet></ROW><ROW><id>20936013</id><snippet>__init__.py</snippet></ROW><ROW><id>20936013</id><snippet>c/</snippet></ROW><ROW><id>20936013</id><snippet>de</snippet></ROW><ROW><id>20936013</id><snippet>common/*.py</snippet></ROW><ROW><id>20936013</id><snippet>setuptools</snippet></ROW><ROW><id>20936013</id><snippet>distutils</snippet></ROW><ROW><id>20936144</id><snippet>A</snippet></ROW><ROW><id>20936144</id><snippet>a1</snippet></ROW><ROW><id>20936144</id><snippet>a2</snippet></ROW><ROW><id>20936144</id><snippet>class A(object):
    def test(self):
        print("I am A")

class B(object):
    def test(self, a1, a2):
        a1.test()
        a2.test()

a1 = A()
a2 = A()
b = B()
b.test(a1, a2)
</snippet></ROW><ROW><id>20936895</id><snippet>'default': {
        'ENGINE': 'django.db.backends.mysql', 
        'NAME': 'abc',
        'USER': 'root',
        'PASSWORD': 'root',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'OPTIONS': {
            "init_command": "SET foreign_key_checks = 0;",
        }
    },
</snippet></ROW><ROW><id>20936960</id><snippet>shortBubbleSort</snippet></ROW><ROW><id>20936960</id><snippet>bubbleSort</snippet></ROW><ROW><id>20936960</id><snippet>192.437240362
</snippet></ROW><ROW><id>20937025</id><snippet>ord</snippet></ROW><ROW><id>20937025</id><snippet>urandom</snippet></ROW><ROW><id>20937025</id><snippet>import os
print map(ord, os.urandom(10))
</snippet></ROW><ROW><id>20937025</id><snippet>[48, 252, 127, 215, 72, 141, 33, 207, 168, 183]
</snippet></ROW><ROW><id>20937025</id><snippet>import os
print reduce(lambda x, y: (x &lt;&lt; 8) | y, map(ord, os.urandom(10)))
</snippet></ROW><ROW><id>20937098</id><snippet>from pyparsing import nestedExpr, ungroup, originalTextFor

# use nestedExpr to define a default expression with left-right nesting markers
nestedText = ungroup(nestedExpr('{{','}}'))

sample = """{{detect this {{and this as well}} text}} but text does not ends here so it should {{not detect this}}."""

# note how reporting the results as a list keeps the nesting of {{ }}'s
print nestedText.parseString(sample).asList()
# prints ['detect', 'this', ['and', 'this', 'as', 'well'], 'text']

# if you just want the string itself, wrap with 'originalTextFor'
print originalTextFor(nestedText).parseString(sample)[0]
# prints {{detect this {{and this as well}} text}}
</snippet></ROW><ROW><id>20937106</id><snippet>import pylab as plt

fig, ax = plt.subplots()
ax.plot([1,2,3],[4,5,6])

labels = [item.get_text() for item in ax.get_xticklabels()]

empty_string_labels = ['']*len(labels)
ax.set_xticklabels(empty_string_labels)

plt.show()
</snippet></ROW><ROW><id>20937248</id><snippet>with open('filename') as f:
    query_dict = {line.strip():next(f).strip() for line in f}
</snippet></ROW><ROW><id>20937248</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(query_dict)
{'&gt;NM_000614.3:1086': 'ATTCAATTTAAAATCAGACTCTTTAGTTGA',
 '&gt;NM_001198858.1:490': 'CAACCACCACAACCTGCTGGTCTGCTCGGT',
 '&gt;NM_012096.2:2808': 'CAGTTAAGGTTTCAAATTGTGGCAGGTGGT',
 '&gt;NM_145914.2:212': 'TCTGATGGTAAAAGTCGAGGAGAAAGAAGA',
 '&gt;NM_173465.3:1682': 'GTGCGTCGGGTGAGAGAGGCCCCAGCGGCC'}
</snippet></ROW><ROW><id>20937248</id><snippet>with open('foo.txt') as f:
    dic = {}
    for line in f:
        dic[line.strip()] = next(f).strip()
        next(f);next(f)  #Drop next two lines
from pprint import pprint
pprint(dic)
</snippet></ROW><ROW><id>20937248</id><snippet>{'@&gt;NM_052972.2:11:1054:1780:889': 'CTTCGACATCTCCGGCAACCCCTGGATCTG',
 '@&gt;NM_080660.3:12:914:1802:542': 'CCTGTATGGCTACTGCAACCTCAAGGATAA',
 '@&gt;NM_176814.3:712:2706:4242:98': 'ACAGAGTAAAAGAGAGGCTGACTTAATAAA'}
</snippet></ROW><ROW><id>20937365</id><snippet>print(timeit.timeit("test(f0)", setup="from __main__ import test, f0"))
</snippet></ROW><ROW><id>20937365</id><snippet>test(f0)</snippet></ROW><ROW><id>20937365</id><snippet>f0</snippet></ROW><ROW><id>20937365</id><snippet>test()</snippet></ROW><ROW><id>20937413</id><snippet>Bookmark</snippet></ROW><ROW><id>20937413</id><snippet>user = models.ForeignKey(User)</snippet></ROW><ROW><id>20937413</id><snippet>Bookmark</snippet></ROW><ROW><id>20937413</id><snippet>also</snippet></ROW><ROW><id>20937413</id><snippet>bookamrk_set</snippet></ROW><ROW><id>20937413</id><snippet>User</snippet></ROW><ROW><id>20937428</id><snippet>from matplotlib import pyplot as plt

f = plt.figure()
ax = f.gca()
f.show()

for i in range(10):
    ax.plot(i, i, 'ko')
    f.canvas.draw()
    raw_input('pause : press any key ...')
f.close()
</snippet></ROW><ROW><id>20937433</id><snippet>*args</snippet></ROW><ROW><id>20937433</id><snippet>def __init__(self, *args):
    args = [argument or None for argument in args]
</snippet></ROW><ROW><id>20937433</id><snippet>locals()</snippet></ROW><ROW><id>20937433</id><snippet>from functools import wraps

def reset_to_none(func):
    @wraps(func)
    def wrapper(*args, **kw):
        args = [arg if not isinstance(arg, str) or arg else None for arg in args]
        kw = {k: arg if not isinstance(arg, str) or arg else None for k, arg in kw.items()}
        return func(*args, **kw)
    return wrapper
</snippet></ROW><ROW><id>20937433</id><snippet>__init__</snippet></ROW><ROW><id>20937433</id><snippet>class SomeClass(object):
    @reset_to_none
    def __init__(self, first, middle, last):
        # any of `first`, `middle` or `last` being empty strings will be set to `None`
</snippet></ROW><ROW><id>20937539</id><snippet>parts = line.split['|']
</snippet></ROW><ROW><id>20937539</id><snippet>parts = line.split('|')
</snippet></ROW><ROW><id>20937592</id><snippet>import pandas as pd
pd.options.display.float_format = '${:,.2f}'.format
df = pd.DataFrame([123.4567, 234.5678, 345.6789, 456.7890],
                  index=['foo','bar','baz','quux'],
                  columns=['cost'])
print(df)
</snippet></ROW><ROW><id>20937592</id><snippet>        cost
foo  $123.46
bar  $234.57
baz  $345.68
quux $456.79
</snippet></ROW><ROW><id>20937592</id><snippet>import pandas as pd
df = pd.DataFrame([123.4567, 234.5678, 345.6789, 456.7890],
                  index=['foo','bar','baz','quux'],
                  columns=['cost'])
df['foo'] = df['cost']
df['cost'] = df['cost'].map('${:,.2f}'.format)
print(df)
</snippet></ROW><ROW><id>20937592</id><snippet>         cost       foo
foo   $123.46  123.4567
bar   $234.57  234.5678
baz   $345.68  345.6789
quux  $456.79  456.7890
</snippet></ROW><ROW><id>20937914</id><snippet>reload()</snippet></ROW><ROW><id>20937914</id><snippet>sys.modules</snippet></ROW><ROW><id>20937914</id><snippet>from</snippet></ROW><ROW><id>20937914</id><snippet>print "Y"

def f1():
    pass

def f2():
    pass
</snippet></ROW><ROW><id>20937914</id><snippet>print "X"

from y import f1, f2
</snippet></ROW><ROW><id>20937914</id><snippet>from y import f1

import x

print "reload"

reload(x)
</snippet></ROW><ROW><id>20937914</id><snippet>Y
X
reload
X
</snippet></ROW><ROW><id>20938064</id><snippet>google.appengine.api.mail</snippet></ROW><ROW><id>20938064</id><snippet>send_mail_to_admins(sender, subject, body, **kw)</snippet></ROW><ROW><id>20938298</id><snippet>updated</snippet></ROW><ROW><id>20938298</id><snippet>Ticker.query.order_by('updated desc').limit(1)
</snippet></ROW><ROW><id>20938503</id><snippet>import subprocess
subprocess.call("service postgresql start ; wait ; service metasploit start ; wait ; armitagedate", shell=True)
</snippet></ROW><ROW><id>20938589</id><snippet>numpy</snippet></ROW><ROW><id>20938589</id><snippet>numpy</snippet></ROW><ROW><id>20938589</id><snippet>foobar.py</snippet></ROW><ROW><id>20938589</id><snippet>from foobar import *</snippet></ROW><ROW><id>20938589</id><snippet>C:\Python27\Lib\site-packages</snippet></ROW><ROW><id>20938638</id><snippet>SRE_Pattern</snippet></ROW><ROW><id>20938638</id><snippet>regexp</snippet></ROW><ROW><id>20938638</id><snippet>True</snippet></ROW><ROW><id>20938638</id><snippet>index = text.search(r'\[A.*\]', "1.0", END, count=countVar, regexp=True)
</snippet></ROW><ROW><id>20938638</id><snippet>highlight_pattern</snippet></ROW><ROW><id>20938676</id><snippet>&gt;&gt;&gt; np.min(np.min(data, axis=1), axis=0)
array([ 0, 1])
</snippet></ROW><ROW><id>20938676</id><snippet>&gt;&gt;&gt; np.min(np.min(data, axis=1), axis=0)
array([0, 3])
</snippet></ROW><ROW><id>20938676</id><snippet>&gt;&gt;&gt; np.min(data, axis=(1, 0))
array([0, 3])
</snippet></ROW><ROW><id>20938794</id><snippet>my_AMe_object.mp_set.all()</snippet></ROW><ROW><id>20938794</id><snippet>ForeignKey</snippet></ROW><ROW><id>20938794</id><snippet>mp</snippet></ROW><ROW><id>20938794</id><snippet>_set</snippet></ROW><ROW><id>20938794</id><snippet>related_name</snippet></ROW><ROW><id>20938794</id><snippet>MP.objects.filter(MyAMeID=my_AMe_object)</snippet></ROW><ROW><id>20938794</id><snippet>&gt;&gt;&gt; from test_app.models import AMe, MP
&gt;&gt;&gt; ame = AMe.objects.create()
&gt;&gt;&gt; for _ in xrange(6):
...     MP.objects.create(MyAMeID=ame)
&gt;&gt;&gt; ame.mp_set.all()
[&lt;MP: MP object&gt;, &lt;MP: MP object&gt;, &lt;MP: MP object&gt;, &lt;MP: MP object&gt;, &lt;MP: MP object&gt;, &lt;MP: MP object&gt;]
</snippet></ROW><ROW><id>20938794</id><snippet>mp_set</snippet></ROW><ROW><id>20938794</id><snippet>QuerySet</snippet></ROW><ROW><id>20938794</id><snippet>Model.objects.all()</snippet></ROW><ROW><id>20938877</id><snippet>import Tkinter as tk
from random import randrange

class Example(tk.Frame):
    def __init__(self, master):
        tk.Frame.__init__(self, master)

        self.DrawArea = tk.Canvas(self, width=1000, height=600, background="black",
                                  borderwidth=0, highlightthickness=0)
        self.scale = tk.Canvas(self, width=30, height=600, background="black",
                               borderwidth=0, highlightthickness=0)
        self.hsb = tk.Scrollbar(self, orient="horizontal", command=self.DrawArea.xview)
        self.vsb = tk.Scrollbar(self, orient="vertical", command=self.DrawArea.yview)
        self.DrawArea.configure(yscrollcommand=self.vsb.set, xscrollcommand=self.hsb.set)

        self.DrawArea.grid(row=0, column=0, sticky="nsew")
        self.scale.grid(row=0, column=1, sticky="nsew")
        self.vsb.grid(row=0, column=2, sticky="ns")
        self.hsb.grid(row=1, column=0, columnspan=2,sticky="ew")
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(0, weight=1)

        self.draw_scale()
        self.draw_points()

    def draw_scale(self):
        value = 5.0
        for y in range(25, 600, 25):
            self.scale.create_text((25, y), text=str(value), fill="white", anchor="ne")
            value -= 0.5

    def draw_points(self):
        import math
        for x in range(5,10000):
            y = randrange(600)
            color = "green" if (300 &gt; y &gt; 200) else "red"
            self.DrawArea.create_rectangle(x-2,y-2,x+2,y+2, fill=color)
        self.DrawArea.configure(scrollregion = self.DrawArea.bbox("all"))

root = tk.Tk()
Example(root).pack(fill="both", expand=True)
root.mainloop()
</snippet></ROW><ROW><id>20938921</id><snippet>getnames()</snippet></ROW><ROW><id>20938921</id><snippet>import re
files = (file for file in tar.getnames() if file.startswith('rootdir/'))
</snippet></ROW><ROW><id>20938956</id><snippet>TheGame()</snippet></ROW><ROW><id>20938956</id><snippet>TheGame()</snippet></ROW><ROW><id>20938956</id><snippet>return True</snippet></ROW><ROW><id>20938956</id><snippet>return False</snippet></ROW><ROW><id>20938956</id><snippet>if x == Rock and y == Paper:
    print(y)
    print("Paper covers Rock.  You lost this round!")
    return False
</snippet></ROW><ROW><id>20938956</id><snippet>print("Let's play Rock Paper Scissors Lizard Spock!  Best 2 of three!")

win_count = 0
loss_count = 0
while win_count &lt; 2 and loss_count &lt; 2:
    if The_Game(x) == True:
        win_count = win_count + 1
    else:
        loss_count = loss_count + 1

if win_count == 2:
    print("You won the set!")
else:
    print("You lost the set!")
</snippet></ROW><ROW><id>20938956</id><snippet>if x not in Words:</snippet></ROW><ROW><id>20938965</id><snippet>x = raw_input()
</snippet></ROW><ROW><id>20938965</id><snippet>raw_input</snippet></ROW><ROW><id>20938965</id><snippet>"3"</snippet></ROW><ROW><id>20938965</id><snippet>TypeError</snippet></ROW><ROW><id>20938965</id><snippet>x = int(raw_input())
</snippet></ROW><ROW><id>20939005</id><snippet>    sudo pip install appengine
</snippet></ROW><ROW><id>20939067</id><snippet>&gt;&gt;&gt; import os.path
&gt;&gt;&gt; my_new_string = "C:\\Users\\User\\code\\Python\\final\\mega_1237665428090192022_cts.ascii"
&gt;&gt;&gt; os.path.basename(my_new_string)
'mega_1237665428090192022_cts.ascii'
&gt;&gt;&gt; basename = os.path.basename(my_new_string)
&gt;&gt;&gt; basename.split('_')[0]
'mega'
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.match(r'[A-Za-z]+', basename).group()
'mega'
</snippet></ROW><ROW><id>20939067</id><snippet>&gt;&gt;&gt; re.match(r'.*?(?=[_\d])', basename).group()
'mega'
</snippet></ROW><ROW><id>20939260</id><snippet>__getattr__</snippet></ROW><ROW><id>20939260</id><snippet>foo.py</snippet></ROW><ROW><id>20939260</id><snippet>def hello(n):
    print n

class NDayEMA(object):
    def __init__(self, n, day):
        self.n = n
        self.day = day
</snippet></ROW><ROW><id>20939260</id><snippet>foo.py</snippet></ROW><ROW><id>20939260</id><snippet>import sys

class Testing(object):
    @staticmethod
    def hello(n):
        print n

    class NDayEMA(object):
        def __init__(self, n, day):
            self.n = n
            self.day = day

    def __getattr__(self, attr):
        if attr.startswith('EMA'):
            n = int(attr[3:])
            return lambda day: self.NDayEMA(n, day)
        else: 
            raise AttributeError

sys.modules[__name__] = Testing()
</snippet></ROW><ROW><id>20939260</id><snippet>__getattr__</snippet></ROW><ROW><id>20939260</id><snippet>__getattr__</snippet></ROW><ROW><id>20939260</id><snippet>foo</snippet></ROW><ROW><id>20939260</id><snippet>import foo

foo.hello(3)

a = foo.EMA39('test')
b = foo.EMA1000('test')

print a.n
print b.n

print 'done'
</snippet></ROW><ROW><id>20939263</id><snippet>dict({'blah': 10}, new_item='Hello')
</snippet></ROW><ROW><id>20939340</id><snippet>from threading import Thread
</snippet></ROW><ROW><id>20939340</id><snippet>@QtCore.pyqtSlot()
def protec(self):
    self.USB = "G:"
    comando = "format %s /fs:ntfs /q /v:test /y" %(self.USB)
    t = Thread(target = lambda: os.system(comando))
    t.start()
</snippet></ROW><ROW><id>20939340</id><snippet>t</snippet></ROW><ROW><id>20939340</id><snippet>subprocess</snippet></ROW><ROW><id>20939442</id><snippet>select()</snippet></ROW><ROW><id>20939442</id><snippet>multiprocessing</snippet></ROW><ROW><id>20939442</id><snippet>multiprocessing</snippet></ROW><ROW><id>20939495</id><snippet>full=True</snippet></ROW><ROW><id>20939495</id><snippet>class HouseResource(ModelResource):
    dogs = fields.ToManyField('DogResource', 'dog_set', full=True)
</snippet></ROW><ROW><id>20939523</id><snippet>SOUTH_TESTS_MIGRATE = False</snippet></ROW><ROW><id>20939523</id><snippet>settings.py</snippet></ROW><ROW><id>20939523</id><snippet>manage.py dumpdata hunt --natural &gt; hunt.json</snippet></ROW><ROW><id>20939624</id><snippet>MSE = np.mean((y - clf.predict(TST).T)**2)
var_est = MSE * np.diag(np.linalg.pinv(np.dot(TST.T,TST)))
SE_est = np.sqrt(var_est)
</snippet></ROW><ROW><id>20939646</id><snippet>productId</snippet></ROW><ROW><id>20939646</id><snippet>productId = models.ForeignKey('ProductDetail', related_name='prices')
</snippet></ROW><ROW><id>20939646</id><snippet>pdlist = ProductDetail.objects.annotate(min_price=Min('prices__price'))\
                              .order_by('min_price')
</snippet></ROW><ROW><id>20939844</id><snippet>def EmptyVar(lst):
    return [type(i)() for i in lst]
</snippet></ROW><ROW><id>20939844</id><snippet>type()</snippet></ROW><ROW><id>20939844</id><snippet>&gt;&gt;&gt; a = "aa"
&gt;&gt;&gt; b = 1
&gt;&gt;&gt; c = { "b":2 }
&gt;&gt;&gt; d = [3,"c"]
&gt;&gt;&gt; e = (4,5)
&gt;&gt;&gt; letters = [a, b, c, d, e]
&gt;&gt;&gt; def EmptyVar(lst):
...     return [type(i)() for i in lst]
... 
&gt;&gt;&gt; EmptyVar(letters)
['', 0, {}, [], ()]
</snippet></ROW><ROW><id>20939982</id><snippet>LC_ALL</snippet></ROW><ROW><id>20939982</id><snippet>import os
def listdir(dirpath):
    if isinstance(dirpath,unicode):
        dirpath = dirpath.encode('utf8')
    return [p.decode('utf8') for p in os.listdir(dirpath)]
</snippet></ROW><ROW><id>20940053</id><snippet>mine_functions:
  grains.item:
    - roles
    - fqdn_ip4
</snippet></ROW><ROW><id>20940053</id><snippet>/tmp/mydbhosts:
  file:
    - managed
    - source: salt://example/myhosts
    - template: mako
</snippet></ROW><ROW><id>20940053</id><snippet>% for minion, peer_grains in salt['mine.get']('*', 'grains.items').items():
% if "db" in peer_grains["role"]:
minion peer_grains["fqdn_ip4"]
% endif
% endfor
</snippet></ROW><ROW><id>20940174</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; line = '/path/including whitespace/to/file.cpp function_name 1234 &lt;any_content&gt;'
&gt;&gt;&gt; r = re.match(r'(?P&lt;File&gt;.+?\.cpp) (?P&lt;Function&gt;\w+) (?P&lt;Linenum&gt;[0-9]+) (?P&lt;Content&gt;.*)$', line)
&gt;&gt;&gt; r.groupdict()
{'Function': 'function_name', 'Linenum': '1234', 'Content': '&lt;any_content&gt;', 'File': '/path/including whitespace/to/file.cpp'}
&gt;&gt;&gt; r.groups()
('/path/including whitespace/to/file.cpp', 'function_name', '1234', '&lt;any_content&gt;')
</snippet></ROW><ROW><id>20940174</id><snippet>&gt;&gt;&gt; r = re.match(r'(?P&lt;File&gt;.+?\.(?:cpp|h|c)) (?P&lt;Function&gt;\w+) (?P&lt;Linenum&gt;[0-9]+) (?P&lt;Content&gt;.*)$', line)
</snippet></ROW><ROW><id>20940174</id><snippet>(?P&lt;File&gt;.+?\.(?:cpp|h|c))</snippet></ROW><ROW><id>20940190</id><snippet>(?&lt;!\d)\d{3}(?!\d)
</snippet></ROW><ROW><id>20940629</id><snippet>append</snippet></ROW><ROW><id>20940733</id><snippet>property</snippet></ROW><ROW><id>20941029</id><snippet>d = (at²)/2</snippet></ROW><ROW><id>20941029</id><snippet>d</snippet></ROW><ROW><id>20941029</id><snippet>a</snippet></ROW><ROW><id>20941029</id><snippet>t</snippet></ROW><ROW><id>20941029</id><snippet>1</snippet></ROW><ROW><id>20941029</id><snippet>t</snippet></ROW><ROW><id>20941029</id><snippet> 32 = (t²)/2
 t² = 64
 t = 8
</snippet></ROW><ROW><id>20941029</id><snippet>v = at</snippet></ROW><ROW><id>20941029</id><snippet>a=1</snippet></ROW><ROW><id>20941029</id><snippet>v = t</snippet></ROW><ROW><id>20941029</id><snippet>v = 8</snippet></ROW><ROW><id>20941029</id><snippet>ypos</snippet></ROW><ROW><id>20941029</id><snippet>speed/2</snippet></ROW><ROW><id>20941029</id><snippet>speed</snippet></ROW><ROW><id>20941029</id><snippet>speed</snippet></ROW><ROW><id>20941029</id><snippet>y=0</snippet></ROW><ROW><id>20941029</id><snippet>speed = 8</snippet></ROW><ROW><id>20941029</id><snippet>y=4</snippet></ROW><ROW><id>20941029</id><snippet>speed = 7</snippet></ROW><ROW><id>20941029</id><snippet>y=11</snippet></ROW><ROW><id>20941029</id><snippet>speed = 6</snippet></ROW><ROW><id>20941029</id><snippet>y=17</snippet></ROW><ROW><id>20941029</id><snippet>speed = 5</snippet></ROW><ROW><id>20941029</id><snippet>y=22</snippet></ROW><ROW><id>20941029</id><snippet>speed = 4</snippet></ROW><ROW><id>20941029</id><snippet>y=26</snippet></ROW><ROW><id>20941029</id><snippet>speed = 3</snippet></ROW><ROW><id>20941029</id><snippet>y=29</snippet></ROW><ROW><id>20941029</id><snippet>speed = 2</snippet></ROW><ROW><id>20941029</id><snippet>y=31</snippet></ROW><ROW><id>20941029</id><snippet>speed = 1</snippet></ROW><ROW><id>20941029</id><snippet>y=32</snippet></ROW><ROW><id>20941029</id><snippet>speed = 0</snippet></ROW><ROW><id>20941029</id><snippet>y=32</snippet></ROW><ROW><id>20941029</id><snippet>speed = -1</snippet></ROW><ROW><id>20941029</id><snippet>y=31</snippet></ROW><ROW><id>20941029</id><snippet>speed = -2</snippet></ROW><ROW><id>20941029</id><snippet>y=29</snippet></ROW><ROW><id>20941029</id><snippet>8</snippet></ROW><ROW><id>20941029</id><snippet>7</snippet></ROW><ROW><id>20941029</id><snippet>8</snippet></ROW><ROW><id>20941029</id><snippet>7.5</snippet></ROW><ROW><id>20941029</id><snippet>1</snippet></ROW><ROW><id>20941029</id><snippet>7.5 + 6.5 + 5.5 + 4.5 + 3.5 + 2.5 + 1.5 + 0.5 = 32 pixels
</snippet></ROW><ROW><id>20941080</id><snippet>range()</snippet></ROW><ROW><id>20941080</id><snippet>for</snippet></ROW><ROW><id>20941080</id><snippet>range(row_ans)
</snippet></ROW><ROW><id>20941080</id><snippet>rows</snippet></ROW><ROW><id>20941080</id><snippet>triangle()
</snippet></ROW><ROW><id>20941110</id><snippet>except</snippet></ROW><ROW><id>20941110</id><snippet>except User.DoesNotExist</snippet></ROW><ROW><id>20941110</id><snippet>except</snippet></ROW><ROW><id>20941110</id><snippet>from django.shortcuts import get_object_or_404
# ...
user = get_object_or_404(User, username=username)
</snippet></ROW><ROW><id>20941110</id><snippet>queryset.get()</snippet></ROW><ROW><id>20941208</id><snippet>RETURNING *;</snippet></ROW><ROW><id>20941208</id><snippet>INSERT</snippet></ROW><ROW><id>20941208</id><snippet>INSERT INTO table
...
RETURNING *;
</snippet></ROW><ROW><id>20941369</id><snippet>Spriterock</snippet></ROW><ROW><id>20941369</id><snippet>Sprite2=Spriterock(random.randrange(150,350),random.randrange(100,400),62,47)
</snippet></ROW><ROW><id>20941369</id><snippet>Spriterock</snippet></ROW><ROW><id>20941369</id><snippet>rock1 = Spriterock(random.randrange(150,350),random.randrange(100,400),62,47)
rock2 = Spriterock(random.randrange(150,350),random.randrange(100,400),62,47)
rock1.render()
rock2.render()
pygame.display.update()
</snippet></ROW><ROW><id>20941431</id><snippet>{}</snippet></ROW><ROW><id>20941431</id><snippet>0</snippet></ROW><ROW><id>20941431</id><snippet>print('Your environment is:"{0}"'.format(os.environ['DJANGO_SETTINGS_MODULE']))
                             ^
</snippet></ROW><ROW><id>20941452</id><snippet>name_1|name_2|name_3|…</snippet></ROW><ROW><id>20941452</id><snippet>'|'.join(Names)</snippet></ROW><ROW><id>20941452</id><snippet>SELECT elements FROM SQLite_table WHERE element_name REGEXP 'name_1|name_2|name_3|…|name_n'
</snippet></ROW><ROW><id>20941466</id><snippet>draw.ellipse(screen,(c),(x,y,radx,rady), sz2 if sz2 &lt; max(radx, raxy) else 0)
</snippet></ROW><ROW><id>20941486</id><snippet>velocity = {"x":{"mag": 5, "dir": 1}, "y": {"mag": 5, "dir": 1} }
</snippet></ROW><ROW><id>20941486</id><snippet>position["x"] += ( velocity["x"]["mag"] * velocity["x"]["dir"] )
</snippet></ROW><ROW><id>20941580</id><snippet>&gt;&gt;</snippet></ROW><ROW><id>20941580</id><snippet>file</snippet></ROW><ROW><id>20941580</id><snippet>print</snippet></ROW><ROW><id>20941580</id><snippet>print('my text here', file=self._stream)
</snippet></ROW><ROW><id>20941715</id><snippet>re</snippet></ROW><ROW><id>20941715</id><snippet>timedelta</snippet></ROW><ROW><id>20941715</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; from datetime import timedelta
</snippet></ROW><ROW><id>20941715</id><snippet>d = {'hours': [re.compile(r'(\d+)(?=h)'), re.compile(r'^(\d+)[:.]\d+[:.]\d+')],
     'minutes': [re.compile(r'(\d+)(?=m)'), re.compile(r'^(\d+)[:.]\d+$'),
     re.compile(r'^\d+[.:](\d+)[.:]\d+')], 'seconds': [re.compile(r'(\d+)(?=s)'),
     re.compile(r'^\d+[.:]\d+[.:](\d+)'), re.compile(r'^\d+[:.](\d+)$')]}
</snippet></ROW><ROW><id>20941715</id><snippet>&gt;&gt;&gt; def convert_to_seconds(*time_str):
    timedeltas = []
    for t in time_str:
        td = timedelta(0)
        for key in d:
            for regex in d[key]:
                if regex.search(t):
                    if key == 'hours':
                        td += timedelta(hours=int(regex.search(t).group(1)))
                    elif key == 'minutes':
                        td += timedelta(seconds=int(regex.search(t).group(1)) * 60)
                    elif key == 'seconds':
                        td += timedelta(seconds=int(regex.search(t).group(1)))
        print(td.seconds)
</snippet></ROW><ROW><id>20941715</id><snippet>&gt;&gt;&gt; convert_to_seconds(*t)
1383
1414
3183
7380
1330
5013
</snippet></ROW><ROW><id>20941725</id><snippet>random</snippet></ROW><ROW><id>20941725</id><snippet>randint</snippet></ROW><ROW><id>20941725</id><snippet>random.randint</snippet></ROW><ROW><id>20941725</id><snippet>from random import randint</snippet></ROW><ROW><id>20941732</id><snippet>forms.BoundField</snippet></ROW><ROW><id>20941732</id><snippet>Field</snippet></ROW><ROW><id>20941732</id><snippet>Field</snippet></ROW><ROW><id>20941732</id><snippet>field</snippet></ROW><ROW><id>20941732</id><snippet>BoundField</snippet></ROW><ROW><id>20941732</id><snippet>{{ field.field.max_length }}</snippet></ROW><ROW><id>20941833</id><snippet>variables</snippet></ROW><ROW><id>20941833</id><snippet>a</snippet></ROW><ROW><id>20941833</id><snippet>b</snippet></ROW><ROW><id>20941833</id><snippet>c</snippet></ROW><ROW><id>20941833</id><snippet>variables.a</snippet></ROW><ROW><id>20941833</id><snippet>variables.b</snippet></ROW><ROW><id>20941833</id><snippet>from variables import a, b, c
</snippet></ROW><ROW><id>20942103</id><snippet>for x in spider.function():
    if x is a request:
        http call this request and wait for a response asynchronously
    if x is an item: 
        send it to piplelines etc...

upon getting a response:
    request.callback(response)
</snippet></ROW><ROW><id>20942103</id><snippet>for reach_id in xrange(x, y):
    yield Request(url=url1, callback=callback1)
    yield Request(url=url2, callback=callback2)
</snippet></ROW><ROW><id>20942281</id><snippet>templates</snippet></ROW><ROW><id>20942281</id><snippet>url(r'^templates/$', 'templates.welcome', name="welcome"),
</snippet></ROW><ROW><id>20942357</id><snippet>&gt;&gt;&gt; tmp = 'Fern\xc3\x9fndez'
&gt;&gt;&gt; print tmp.decode('utf-8')  # print formats the string for stdout
Fernßndez
&gt;&gt;&gt; print tmp.decode('latin1')
FernÃndez
</snippet></ROW><ROW><id>20942357</id><snippet>&gt;&gt;&gt; print unicode(tmp, 'latin1')
FernÃndez

&gt;&gt;&gt; print unicode(tmp, 'utf-8')
Fernßndez
</snippet></ROW><ROW><id>20942357</id><snippet>&gt;&gt;&gt; for encoding in ['ascii', 'big5', 'big5hkscs', 'cp037', 'cp424', 'cp437', 'cp500', 'cp737', 'cp775', 'cp850', 'cp852', 'cp855', 'cp856', 'cp857', 'cp860', 'cp861', 'cp862', 'cp863', 'cp864', 'cp865', 'cp866', 'cp869', 'cp874', 'cp875', 'cp932', 'cp949', 'cp950', 'cp1006', 'cp1026', 'cp1140', 'cp1250', 'cp1251', 'cp1252', 'cp1253', 'cp1254', 'cp1255', 'cp1256', 'cp1257', 'cp1258', 'euc_jp', 'euc_jis_2004', 'euc_jisx0213', 'euc_kr', 'gb2312', 'gbk', 'gb18030', 'hz', 'iso2022_jp', 'iso2022_jp_1', 'iso2022_jp_2', 'iso2022_jp_2004', 'iso2022_jp_3', 'iso2022_jp_ext', 'iso2022_kr', 'latin_1', 'iso8859_2', 'iso8859_3', 'iso8859_4', 'iso8859_5', 'iso8859_6', 'iso8859_7', 'iso8859_8', 'iso8859_9', 'iso8859_10', 'iso8859_13', 'iso8859_14', 'iso8859_15', 'johab', 'koi8_r', 'koi8_u', 'mac_cyrillic', 'mac_greek', 'mac_iceland', 'mac_latin2', 'mac_roman', 'mac_turkish', 'ptcp154', 'shift_jis', 'shift_jis_2004', 'shift_jisx0213', 'utf_16', 'utf_16_be', 'utf_16_le', 'utf_7', 'utf_8']:
    try:
        print encoding + ': ' + tmp.decode(encoding)
    except:
        pass

cp037: ãÁÊ&gt;C¤&gt;ÀÁ:
cp437: Fern├ƒndez
cp500: ãÁÊ&gt;C¤&gt;ÀÁ:
cp737: Fern├θndez
cp775: Fern├¤ndez
cp850: Fern├ƒndez
cp852: Fern├čndez
cp855: Fern├Ъndez
cp857: Fern├şndez
cp860: Fern├Óndez
cp861: Fern├ƒndez
cp862: Fern├ƒndez
cp863: Fern├ƒndez
cp865: Fern├ƒndez
cp866: Fern├Яndez
cp869: Fern├ίndez
cp875: ΖΧΈ&gt;Cμ&gt;ΦΧ:
cp932: Fernﾃ殤dez
cp949: Fern횩ndez
cp1006: Fernﺣndez
cp1026: ãÁÊ&gt;C¤&gt;ÀÁ:
cp1140: ãÁÊ&gt;C€&gt;ÀÁ:
cp1250: FernĂźndez
cp1251: FernГџndez
cp1252: FernÃŸndez
cp1254: FernÃŸndez
cp1256: Fernأںndez
cp1258: FernĂŸndez
gbk: Fern脽ndez
gb18030: Fern脽ndez
latin_1: FernÃndez
iso8859_2: FernĂndez
iso8859_4: FernÃndez
iso8859_5: FernУndez
iso8859_6: Fernأndez
iso8859_7: FernΓndez
iso8859_9: FernÃndez
iso8859_10: FernÃndez
iso8859_13: FernĆndez
iso8859_14: FernÃndez
iso8859_15: FernÃndez
koi8_r: Fernц÷ndez
koi8_u: Fernц÷ndez
mac_cyrillic: Fern√Яndez
mac_greek: FernΟündez
mac_iceland: Fern√ündez
mac_latin2: Fern√ündez
mac_roman: Fern√ündez
mac_turkish: Fern√ündez
ptcp154: FernГҹndez
shift_jis: Fernﾃ殤dez
shift_jis_2004: Fernﾃ殤dez
shift_jisx0213: Fernﾃ殤dez
utf_16: 敆湲鿃摮穥
utf_16_be: 䙥牮쎟湤敺
utf_16_le: 敆湲鿃摮穥
utf_8: Fernßndez
</snippet></ROW><ROW><id>20942437</id><snippet>sudo</snippet></ROW><ROW><id>20942437</id><snippet>sudo pip install visvis
</snippet></ROW><ROW><id>20942467</id><snippet>def double_preceding(v):
    values = v[:] # Make a copy of the list passed as argument

    if (values != []): # If list is not empty, store the first value in 'temp'
        temp = values[0]
    else:
        return

    v[0] = 0 # Set the first value of the list as '0' (as the problem says it)

    for i in range(1, len(values)): # Iterate 'n - 1' times, where n is the length of the list
        v[i] = 2 * temp # Set the corresponding value to twice the precedent (the precedent is stored in 'temp')
        temp = values[i]
</snippet></ROW><ROW><id>20942467</id><snippet>v = [1, 3, 7, 11]
double_preceding(v)
print v
</snippet></ROW><ROW><id>20942467</id><snippet>[0, 2, 6, 14, 22]
</snippet></ROW><ROW><id>20942832</id><snippet>def parser(lst):
    vars = []
    for obj in data: # did you mean "for obj in lst:"?
        if isinstance(obj,list):
            parser(obj)
        else:
            for string in obj:
                vars.append(o) # did you mean "vars.append(string)"?
</snippet></ROW><ROW><id>20942832</id><snippet>var5</snippet></ROW><ROW><id>20942832</id><snippet>vars[5]</snippet></ROW><ROW><id>20943043</id><snippet>f =  open('Basic wx python window', 'w')
</snippet></ROW><ROW><id>20943043</id><snippet>f =  open('Basic wx python window')
</snippet></ROW><ROW><id>20943043</id><snippet>with open('Basic wx python window', 'w') as f:
    ...
</snippet></ROW><ROW><id>20943083</id><snippet>split</snippet></ROW><ROW><id>20943083</id><snippet>for line in info:
    solution.append(line.split(","))
</snippet></ROW><ROW><id>20943083</id><snippet>['1234,123,345\n']</snippet></ROW><ROW><id>20943083</id><snippet>['1234', '123', '345\n']</snippet></ROW><ROW><id>20943083</id><snippet>for line in info:
    solution.append([int(number) for number in line.split(",")])
</snippet></ROW><ROW><id>20943083</id><snippet>for line in info:
    numbers = []
    for number in line.split(","):
        numbers.append(int(number))
    solution.append(numbers)
</snippet></ROW><ROW><id>20943083</id><snippet>int</snippet></ROW><ROW><id>20943083</id><snippet>int('345\n')</snippet></ROW><ROW><id>20943083</id><snippet>345</snippet></ROW><ROW><id>20943083</id><snippet>rstrip</snippet></ROW><ROW><id>20943083</id><snippet>for line in info:
    solution.append([int(number) for number in line.rstrip().split(",")])
</snippet></ROW><ROW><id>20943133</id><snippet>simplejson</snippet></ROW><ROW><id>20943133</id><snippet>$ python2.6 -c "print([52.68908263, -8.50845340])"
[52.689082630000001, -8.5084534000000005]
$ python2.7 -c "print([52.68908263, -8.50845340])"
[52.68908263, -8.5084534]
</snippet></ROW><ROW><id>20943344</id><snippet>date</snippet></ROW><ROW><id>20943344</id><snippet>time</snippet></ROW><ROW><id>20943344</id><snippet>2012-11-01</snippet></ROW><ROW><id>20943344</id><snippet>2012-11-01</snippet></ROW><ROW><id>20943344</id><snippet>2012-11-01</snippet></ROW><ROW><id>20943344</id><snippet>2012-11-01</snippet></ROW><ROW><id>20943344</id><snippet>2012-11-01</snippet></ROW><ROW><id>20943344</id><snippet>2012-11-01</snippet></ROW><ROW><id>20943344</id><snippet>2012-11-01</snippet></ROW><ROW><id>20943344</id><snippet>datetime</snippet></ROW><ROW><id>20943344</id><snippet>date</snippet></ROW><ROW><id>20943344</id><snippet>datetime</snippet></ROW><ROW><id>20943344</id><snippet>2012-11-01 00:00:00</snippet></ROW><ROW><id>20943457</id><snippet>itertools.permutations</snippet></ROW><ROW><id>20943457</id><snippet>[1193, 3119, 9311, 1931]
</snippet></ROW><ROW><id>20943457</id><snippet>[1931, 1913, 1391, 1319, 1193, 1139, 9131, 9113, 9311, 9311, 9113, 9131, 3191, 3119, 3911, 3911, 3119, 3191, 1193, 1139, 1913, 1931, 1319, 1391] 
</snippet></ROW><ROW><id>20943548</id><snippet>from django.views.generic.edit import ModelFormMixin, ProcessFormMixin

class MyView(ModelFormMixin, ProcessFormMixin):
    def get(self, request, *args, **kwargs):
        try:
            self.object = MyModel.objects.latest("id")
        except MyModel.DoesNotExist:
            self.object = None
        return super(MyView, self).get(request, *args, **kwargs)

    def post(self, request, *args, **kwargs):
        try:
            self.object = MyModel.objects.latest("id")
        except MyModel.DoesNotExist:
            self.object = None
        return super(MyView, self).post(request, *args, **kwargs)
</snippet></ROW><ROW><id>20943640</id><snippet>def insert_description(element):
    '''Inserts the Title as a Description if Desscription not present.'''
    for sub_e in element:
        if sub_e.find('Description') is None:
            title = sub_e.find('Title').text
            new_desc = ET.Element('Description')
            new_desc.text = title
            sub_e.insert(2, new_desc)
</snippet></ROW><ROW><id>20943640</id><snippet>&gt;&gt;&gt; xml = '''
&lt;Root&gt;
 &lt;Movie&gt;
  &lt;Provider&gt;xxx2&lt;/Provider&gt;
  &lt;Title&gt;The World's Fastest Indian&lt;/Title&gt;
  &lt;SortTitle&gt;World's Fastest Indian, The&lt;/SortTitle&gt;
 &lt;/Movie&gt;
 &lt;TVSeries&gt;
  &lt;Provider&gt;xxx&lt;/Provider&gt;
  &lt;Title&gt;The World's Fastest Indian&lt;/Title&gt;
  &lt;Description&gt; The World's Fastest Indian &lt;/Description&gt;
  &lt;SortTitle&gt;World's Fastest Indian, The&lt;/SortTitle&gt;
  &lt;/TVSeries&gt; // note that I changed the v to an upper-case V
&lt;/Root&gt;'''
&gt;&gt;&gt; root = ET.fromstring(xml)
&gt;&gt;&gt; insert_description(root)
&gt;&gt;&gt; print ET.tostring(root)
&lt;Root&gt;
 &lt;Movie&gt;
  &lt;Provider&gt;xxx2&lt;/Provider&gt;
  &lt;Title&gt;The World's Fastest Indian&lt;/Title&gt;
  &lt;Description&gt;The World's Fastest Indian&lt;/Description&gt;
  &lt;SortTitle&gt;World's Fastest Indian, The&lt;/SortTitle&gt;
 &lt;/Movie&gt;
 &lt;TVSeries&gt;
  &lt;Provider&gt;xxx&lt;/Provider&gt;
  &lt;Title&gt;The World's Fastest Indian&lt;/Title&gt;
  &lt;Description&gt; The World's Fastest Indian &lt;/Description&gt;
  &lt;SortTitle&gt;World's Fastest Indian, The&lt;/SortTitle&gt;
 &lt;/TVSeries&gt; // note that I changed the v to an upper-case V
&lt;/Root&gt;
</snippet></ROW><ROW><id>20943755</id><snippet>year = date % 100
md = date // 100
</snippet></ROW><ROW><id>20943755</id><snippet>if md &lt; 100:
    month = md / 10
    day = md % 10
elif md &gt;= 1000:
    month = md / 100
    day = md % 100
</snippet></ROW><ROW><id>20943755</id><snippet>elif md &lt;= 109:
    month = 10
    day = md % 10
elif md == 110:
    month = 1
    day = 10
elif md &lt;= 129:
    month = None # ambiguous
    day = None
else:
    month = md / 100
    day = md % 100
</snippet></ROW><ROW><id>20943852</id><snippet>def wheelEvent(self, event):
    oldscale = self.scale
    self.scale += event.delta() / 1200.0
    if (self.scale &lt; 0.1):
        self.scale = oldscale

    screenpoint = self.mapFromGlobal(QtGui.QCursor.pos())
    dx, dy = screenpoint.x(), screenpoint.y()
    oldpoint = (screenpoint.x() + self.position[0], screenpoint.y() + self.position[1])
    newpoint = (oldpoint[0] * (self.scale/oldscale),
                oldpoint[1] * (self.scale/oldscale))
    self.position = (newpoint[0] - dx, newpoint[1] - dy)
</snippet></ROW><ROW><id>20943882</id><snippet>False == 'c' in 'apple'</snippet></ROW><ROW><id>20943882</id><snippet>False == ('c' in 'apple')
</snippet></ROW><ROW><id>20943882</id><snippet>(False == 'c') and ('c' in apple)
</snippet></ROW><ROW><id>20943882</id><snippet>False == ('c' in 'apple')
</snippet></ROW><ROW><id>20943882</id><snippet>in</snippet></ROW><ROW><id>20943882</id><snippet>not in</snippet></ROW><ROW><id>20943882</id><snippet>def test_string_membership():
    assert 'c' not in 'apple'
    assert 'a' in 'apple'
    assert 'app' in 'apple'
</snippet></ROW><ROW><id>20944136</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>20944136</id><snippet>hello()</snippet></ROW><ROW><id>20944136</id><snippet>if</snippet></ROW><ROW><id>20944136</id><snippet>hello</snippet></ROW><ROW><id>20944136</id><snippet>hello</snippet></ROW><ROW><id>20944277</id><snippet>mycommand</snippet></ROW><ROW><id>20944277</id><snippet>stdin, stdout, stderr = client.exec_command(
    """
    # simple command that prints nonstop output; &amp; runs it in background
    python -c '
import sys
import time

while 1:
  print time.time()
  sys.stdout.flush()
  time.sleep(0.1)
    ' &amp;
    KILLPID=$!; # save PID of background process
    sleep 2; # or however many seconds you'd like to sleep
    kill $KILLPID
    """)
</snippet></ROW><ROW><id>20944277</id><snippet>... 1388989588.39
... 1388989588.49
... 1388989588.59
... 1388989588.69
... 1388989588.79
... 1388989588.89
... 1388989588.99
... 1388989589.1
... 1388989589.2
... 1388989589.3
... 1388989589.4
... 1388989589.5
... 1388989589.6
... 1388989589.71
... 1388989589.81
... 1388989589.91
... 1388989590.01
... 1388989590.11
... 1388989590.21
... 1388989590.32
</snippet></ROW><ROW><id>20944394</id><snippet>
p = re.compile(r"(?&lt;!@)\w+(?=%|$)")
</snippet></ROW><ROW><id>20944404</id><snippet>re.search(r'(?:sow|transplant).+?(\d+)(\'|") apart', info['growing_info'], re.I)
</snippet></ROW><ROW><id>20944404</id><snippet>(?:sow|transplant)</snippet></ROW><ROW><id>20944404</id><snippet>(?!rows).+</snippet></ROW><ROW><id>20944404</id><snippet>.+</snippet></ROW><ROW><id>20944404</id><snippet>.+?</snippet></ROW><ROW><id>20944404</id><snippet>rows</snippet></ROW><ROW><id>20944404</id><snippet>re.search(r'(?:sow|transplant)(?:(?!rows).)+(\d+)(\'|") apart', info['growing_info'], re.I)
</snippet></ROW><ROW><id>20944404</id><snippet>(?:(?!rows).)</snippet></ROW><ROW><id>20944404</id><snippet>rows</snippet></ROW><ROW><id>20944404</id><snippet>.+(?!rows).+
</snippet></ROW><ROW><id>20944404</id><snippet>(?!rows)</snippet></ROW><ROW><id>20944404</id><snippet>.+</snippet></ROW><ROW><id>20944404</id><snippet>(?:sow|transplant)</snippet></ROW><ROW><id>20944404</id><snippet>.+</snippet></ROW><ROW><id>20944404</id><snippet>(?!rows)</snippet></ROW><ROW><id>20944404</id><snippet>rows</snippet></ROW><ROW><id>20944404</id><snippet>.+</snippet></ROW><ROW><id>20944404</id><snippet>.+</snippet></ROW><ROW><id>20944404</id><snippet>(\d+)</snippet></ROW><ROW><id>20944404</id><snippet>.+</snippet></ROW><ROW><id>20944404</id><snippet>.+</snippet></ROW><ROW><id>20944404</id><snippet>(?!rows)</snippet></ROW><ROW><id>20944404</id><snippet>rows</snippet></ROW><ROW><id>20944404</id><snippet>.+</snippet></ROW><ROW><id>20944404</id><snippet>(\d+)</snippet></ROW><ROW><id>20944404</id><snippet>(?:(?!rows).)
</snippet></ROW><ROW><id>20944404</id><snippet>(?:sow|transplant)</snippet></ROW><ROW><id>20944404</id><snippet>(?:(?!rows).)</snippet></ROW><ROW><id>20944404</id><snippet>rows</snippet></ROW><ROW><id>20944404</id><snippet>+</snippet></ROW><ROW><id>20944404</id><snippet>rows</snippet></ROW><ROW><id>20944404</id><snippet>rows</snippet></ROW><ROW><id>20944404</id><snippet>(\d+)</snippet></ROW><ROW><id>20944404</id><snippet>(\d+)(\'|")</snippet></ROW><ROW><id>20944404</id><snippet>apart</snippet></ROW><ROW><id>20944404</id><snippet>(\d+)(\'|") apart</snippet></ROW><ROW><id>20944417</id><snippet>read_excel()</snippet></ROW><ROW><id>20944417</id><snippet>import pandas as pd

df = pd.read_excel("c:\\tmp\\book1.xlsx", "Sheet1")
mask = df["ID"] == "ID"
nmask = ~mask
s = mask.astype(int).cumsum()
dfs = [x.dropna() for _,x in df[nmask].groupby(s[nmask])]

for df in dfs:
    print df
</snippet></ROW><ROW><id>20944417</id><snippet>dfs</snippet></ROW><ROW><id>20944501</id><snippet>if (collisionguy==True):
</snippet></ROW><ROW><id>20944501</id><snippet>if collisionguy:
</snippet></ROW><ROW><id>20944651</id><snippet>&lt;script type="text/javascript"&gt;
    var username = "$context.username";
&lt;/script&gt;
</snippet></ROW><ROW><id>20944651</id><snippet>&lt;script type="text/javascript"&gt;
    var session = {
        foo: "$context.foo",
        bar: "$context.bar",
        ...
    };
&lt;/script&gt;
</snippet></ROW><ROW><id>20944651</id><snippet>render = web.temlate.render('templaters', global={'context': session})
</snippet></ROW><ROW><id>20945424</id><snippet>def wrapper(func):
    def inner(x, y): # inner function needs parameters
        if issubclass(type(x), int): # maybe you looked for isinstance?
            return func(x, y) # call the wrapped function
        else: 
            return 'invalid values'
    return inner # return the inner function (don't call it)
</snippet></ROW><ROW><id>20945424</id><snippet>issubclass</snippet></ROW><ROW><id>20945491</id><snippet>textwrap</snippet></ROW><ROW><id>20945491</id><snippet>s = "Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis, ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel, aliquet nec, vulputate eget, arcu. In enim justo, rhoncus ut, imperdiet a, venenatis vitae, justo. Nullam dictum felis eu pede mollis pretium. Integer tincidunt. Cras dapibus. Vivamus elementum semper nisi. Aenean vulputate eleifend tellus. Aenean leo ligula, porttitor eu,"

import textwrap
var = textwrap.wrap(s, 100)
for line in var:
    print(len(line))

print(var)
</snippet></ROW><ROW><id>20945582</id><snippet>&gt;&gt;&gt; industries_list = ["Computers, Internet","Photography, Tourism","Motoring, Manufacturing"]
&gt;&gt;&gt; [s.split(',') for s in industries_list]
[['Computers', ' Internet'], ['Photography', ' Tourism'], ['Motoring', ' Manufacturing']]
</snippet></ROW><ROW><id>20945582</id><snippet>&gt;&gt;&gt; from string import strip
&gt;&gt;&gt; [map(strip, s.split(',')) for s in industries_list]
[['Computers', 'Internet'], ['Photography', 'Tourism'], ['Motoring', 'Manufacturing']]
</snippet></ROW><ROW><id>20945582</id><snippet>&gt;&gt;&gt; [[w.strip() for w in s.split(',')] for s in industries_list]
[['Computers', 'Internet'], ['Photography', 'Tourism'], ['Motoring', 'Manufacturing']]
</snippet></ROW><ROW><id>20945675</id><snippet>&gt;&gt;&gt; u'8' == 8
False
</snippet></ROW><ROW><id>20945675</id><snippet>unicode()</snippet></ROW><ROW><id>20945675</id><snippet>if unicode(resume_menu_a_detail_val) in resume_menu_list01:
</snippet></ROW><ROW><id>20945675</id><snippet>resume_menu_list01</snippet></ROW><ROW><id>20945675</id><snippet>.sort()</snippet></ROW><ROW><id>20945675</id><snippet>resume_menu_list01.sort()
</snippet></ROW><ROW><id>20945675</id><snippet>'21'</snippet></ROW><ROW><id>20945675</id><snippet>'3'</snippet></ROW><ROW><id>20945675</id><snippet>sort()</snippet></ROW><ROW><id>20945675</id><snippet>resume_menu_list01.sort(key=int)
</snippet></ROW><ROW><id>20945731</id><snippet>python26-devel</snippet></ROW><ROW><id>20945731</id><snippet>libjpeg-devel</snippet></ROW><ROW><id>20945731</id><snippet>zlib-devel</snippet></ROW><ROW><id>20945812</id><snippet>appliedFieldIP = [10,5,0,-5,-10,-5,0,5,10]
signalxIP = [2,1,0,-1,-2,-1,0,1,2]

zipped = list(zip(appliedFieldIP, signalxIP))
cutoff_index = appliedFieldIP.index(min(appliedFieldIP))+1
zipped2 = zipped[:cutoff_index]
# this aIP should be the same as aIP in your code
aIP = [pair[0] for pair in zipped2]
intermediate = list(filter(lambda x: x[0] &lt;= 0 &lt;= max(aIP), zipped2))
x2 = [pair[0] for pair in intermediate]
y2 = [pair[1] for pair in intermediate]

print(aIP)
print(x2)
print(y2)
</snippet></ROW><ROW><id>20945812</id><snippet>[10, 5, 0, -5, -10]
[0, -5, -10]
[0, -1, -2]
</snippet></ROW><ROW><id>20945812</id><snippet>zip</snippet></ROW><ROW><id>20945812</id><snippet>appliedFieldIP</snippet></ROW><ROW><id>20945812</id><snippet>signalxIP</snippet></ROW><ROW><id>20945812</id><snippet>zipped</snippet></ROW><ROW><id>20945812</id><snippet>appliedFieldIP</snippet></ROW><ROW><id>20945812</id><snippet>signalxIP</snippet></ROW><ROW><id>20945812</id><snippet>signalxIP</snippet></ROW><ROW><id>20945812</id><snippet>y2</snippet></ROW><ROW><id>20945812</id><snippet>aIP</snippet></ROW><ROW><id>20945919</id><snippet>"bob"</snippet></ROW><ROW><id>20945919</id><snippet>"cat"</snippet></ROW><ROW><id>20945919</id><snippet>"joe"</snippet></ROW><ROW><id>20945919</id><snippet>"joe"</snippet></ROW><ROW><id>20945919</id><snippet>class DisjointSet:
    def __init__(self):
        self.parent = {}
        self.rank = {}

    def find(self, element):
        if element not in self.parent: # leader elements are not in `parent` dict
            return element
        leader = self.find(self.parent[element]) # search recursively
        self.parent[element] = leader # compress path by saving leader as parent
        return leader

    def union(self, leader1, leader2):
        rank1 = self.rank.get(leader1,0)
        rank2 = self.rank.get(leader2,0)

        if rank1 &gt; rank2: # union by rank
            self.parent[leader2] = leader1
        elif rank2 &gt; rank1:
            self.parent[leader1] = leader2
        else: # ranks are equal
            self.parent[leader2] = leader1 # favor leader1 arbitrarily
            self.rank[leader1] = rank1+1 # increment rank
</snippet></ROW><ROW><id>20945919</id><snippet>djs = DisjointSet()
all_values = set()
for key, values in my_dict.items():
    all_values.add(key)
    all_values.update(values)
    for val in values:
        l1 = djs.find(key)
        l2 = djs.find(val)
        if l1 != l2:
            djs.union(l1, l2)

roots = {djs.find(x) for x in all_values}
print("The number of disjoint sets is:", len(roots))
</snippet></ROW><ROW><id>20946346</id><snippet>QueryDict.getlist()</snippet></ROW><ROW><id>20946346</id><snippet>y = request.POST.getlist('y')
</snippet></ROW><ROW><id>20946346</id><snippet>d = [('x', 1), ('y', 'a'), ('y', 'b'), ('y', 'c')]</snippet></ROW><ROW><id>20946346</id><snippet>requests</snippet></ROW><ROW><id>20946635</id><snippet>sqlalchemy.migrate</snippet></ROW><ROW><id>20946635</id><snippet>pk = constraint.PrimaryKeyConstraint('id',
                                     table=table,
                                     name="table_pkey")

pk.drop()
</snippet></ROW><ROW><id>20946635</id><snippet>primary_key_name</snippet></ROW><ROW><id>20946635</id><snippet>primary_id.create(table=table, primary_key_name='table_pkey')
</snippet></ROW><ROW><id>20946635</id><snippet>id</snippet></ROW><ROW><id>20946664</id><snippet>map</snippet></ROW><ROW><id>20946664</id><snippet>str.strip</snippet></ROW><ROW><id>20946664</id><snippet>&gt;&gt;&gt; line = '0386      ; Greek # L&amp;   GREEK CAPITAL LETTER ALPHA WITH TONOS'
&gt;&gt;&gt; point, script = map(str.strip, line.split('#')[0].split(';'))
&gt;&gt;&gt; point
'0386'
&gt;&gt;&gt; script
'Greek'
</snippet></ROW><ROW><id>20946664</id><snippet>&gt;&gt;&gt; point, script = [word.strip() for word in line.split('#')[0].split(';')]
&gt;&gt;&gt; point
'0386'
&gt;&gt;&gt; script
'Greek'
</snippet></ROW><ROW><id>20946864</id><snippet>,</snippet></ROW><ROW><id>20946864</id><snippet>:</snippet></ROW><ROW><id>20947108</id><snippet>app.yaml</snippet></ROW><ROW><id>20947108</id><snippet>used_app</snippet></ROW><ROW><id>20947108</id><snippet>appdir/
    app.yaml
    main.py
    lib/
    package/
        __init__.py
        module.py
</snippet></ROW><ROW><id>20947108</id><snippet>sys.path</snippet></ROW><ROW><id>20947108</id><snippet>package.module</snippet></ROW><ROW><id>20947108</id><snippet>appdir</snippet></ROW><ROW><id>20947108</id><snippet>lib</snippet></ROW><ROW><id>20947108</id><snippet>sys.path</snippet></ROW><ROW><id>20947108</id><snippet>appengine_config.py</snippet></ROW><ROW><id>20947108</id><snippet>appdir/
    app.yaml
    main.py
    appengine_config.py
    lib/
        awesomelibrary/
            __init__.py
            thirdpartymodule.py
    package/
        __init__.py
        module.py
</snippet></ROW><ROW><id>20947108</id><snippet>appengine_config.py</snippet></ROW><ROW><id>20947108</id><snippet>import sys, os
base = os.path.dirname(__file__)
sys.path.append(os.path.join(base, 'lib'))
</snippet></ROW><ROW><id>20947108</id><snippet>awesomelibrary.thirdpartymodule</snippet></ROW><ROW><id>20947108</id><snippet>lib/</snippet></ROW><ROW><id>20947187</id><snippet>import itertools

example = {((0, 0), (0, 2), (0, 3)): (-2, 0),
           ((1, 3), (0, 2), (0, 3)): (-5, 8),
           ((4, 7), (0, 2), (0, 1)): (3, -2)}
keyfunc = lambda x: x[0][1:] # [0] -&gt; key; [1:] -&gt; all-but-first tuple

items = sorted(example.items(), key=keyfunc)

for key, subiterator in itertools.groupby(items, keyfunc):
    # grouped by this
    print(key)
    for subkey, subvalue in subiterator:
        # but these are the actual things that were grouped
        print(subkey, ':', subvalue) 
</snippet></ROW><ROW><id>20947187</id><snippet>((0, 2), (0, 1)) # &lt;- grouped-by
((4, 7), (0, 2), (0, 1)) : (3, -2)
((0, 2), (0, 3)) # &lt;- grouped-by
((0, 0), (0, 2), (0, 3)) : (-2, 0)
((1, 3), (0, 2), (0, 3)) : (-5, 8)
</snippet></ROW><ROW><id>20947415</id><snippet>$ python3
Python 3.3.3 (default, Nov 26 2013, 13:33:18) 
[GCC 4.8.2] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; a = ['M\xc3\xa3e']
&gt;&gt;&gt; print(a)
['MÃ£e']
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>20947415</id><snippet>print '[' + ','.join("'" + str(x) + "'" for x in a) + ']'
</snippet></ROW><ROW><id>20947630</id><snippet>stdin</snippet></ROW><ROW><id>20947643</id><snippet>queue = eventlet.queue.Queue(10000)
wait = eventlet.semaphore.CappedSemaphore(1000)


def fetch(url):
  # httplib2.Http().request
  # or requests.get
  # or urllib.urlopen
  # or whatever API you like
  return response


def crawl(url):
  with wait:
    response = fetch(url)
    links = parse(response)
    for url in link:
      queue.put(url)


def spawn_crawl_next():
  try:
    url = queue.get(block=False)
  except eventlet.queue.Empty:
    return False
  # use another CappedSemaphore here to limit number of outstanding connections
  eventlet.spawn(crawl, url)
  return True


def crawler():
  while True:
    if spawn_crawl_next():
      continue

    while wait.balance != 0:
      eventlet.sleep(1)

    # if last spawned `crawl` enqueued more links -- process them
    if not spawn_crawl_next():
      break


def main():
  queue.put('http://initial-url')
  crawler()
</snippet></ROW><ROW><id>20947817</id><snippet>import re
s = 'LAST LAST2 First First2'
print re.search("[A-Z][a-z].*$",s).group().split()
</snippet></ROW><ROW><id>20947817</id><snippet>[A-Z]</snippet></ROW><ROW><id>20947817</id><snippet>[a-z]</snippet></ROW><ROW><id>20947817</id><snippet>.*</snippet></ROW><ROW><id>20947817</id><snippet>$</snippet></ROW><ROW><id>20947817</id><snippet>s = 'LAST LAST2 First First2'
print [i for i in s.split() if not i.isupper()]
</snippet></ROW><ROW><id>20947817</id><snippet>['First', 'First2']
</snippet></ROW><ROW><id>20948175</id><snippet>trace.py</snippet></ROW><ROW><id>20948175</id><snippet>trace.py</snippet></ROW><ROW><id>20948175</id><snippet>/usr/lib/python2.7/</snippet></ROW><ROW><id>20948175</id><snippet>modname(path)</snippet></ROW><ROW><id>20948175</id><snippet>filename, ext = os.path.splitext(base)
</snippet></ROW><ROW><id>20948175</id><snippet>filename, ext = os.path.splitext(path)
</snippet></ROW><ROW><id>20948175</id><snippet>./trace.py --trace t.py</snippet></ROW><ROW><id>20948175</id><snippet> --- modulename: t, funcname: &lt;module&gt;
t.py(3): import mypackage.mymodule
 --- modulename: mypackage/__init__, funcname: &lt;module&gt;
__init__.py(1):   --- modulename: mypackage/mymodule, funcname: &lt;module&gt;
mymodule.py(1): print 42
42
t.py(5): print 5
5
 --- modulename: ./trace, funcname: _unsettrace
trace.py(80):         sys.settrace(None)
</snippet></ROW><ROW><id>20948175</id><snippet>t.py</snippet></ROW><ROW><id>20948175</id><snippet>mymodule.py</snippet></ROW><ROW><id>20948175</id><snippet>mypackage</snippet></ROW><ROW><id>20948175</id><snippet>./mypackage/mymodule.py</snippet></ROW><ROW><id>20948175</id><snippet>globaltrace_lt()</snippet></ROW><ROW><id>20948175</id><snippet>modname()</snippet></ROW><ROW><id>20948175</id><snippet>fullmodname()</snippet></ROW><ROW><id>20948175</id><snippet>            modulename = fullmodname(filename)
</snippet></ROW><ROW><id>20948457</id><snippet>hex</snippet></ROW><ROW><id>20948457</id><snippet>&gt;&gt;&gt; hex(8).replace('0x', '')
'8'
</snippet></ROW><ROW><id>20948457</id><snippet>str.format</snippet></ROW><ROW><id>20948457</id><snippet>02X</snippet></ROW><ROW><id>20948457</id><snippet>&gt;&gt;&gt; '{:02X}'.format(8)
'08'
&gt;&gt;&gt; '{:02X}'.format(100)
'64'
</snippet></ROW><ROW><id>20948457</id><snippet>&gt;&gt;&gt; a = '115.255.8.97'.split('.')
&gt;&gt;&gt; '{:02X}{:02X}{:02X}{:02X}'.format(*map(int, a))
'73FF0861'
</snippet></ROW><ROW><id>20948457</id><snippet>binascii.hexlify</snippet></ROW><ROW><id>20948457</id><snippet>socket.inet_aton</snippet></ROW><ROW><id>20948457</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; import socket
&gt;&gt;&gt; binascii.hexlify(socket.inet_aton('115.255.8.97'))
'73ff0861'
&gt;&gt;&gt; binascii.hexlify(socket.inet_aton('115.255.8.97')).upper()
'73FF0861'
</snippet></ROW><ROW><id>20948482</id><snippet>C:\Users\Bartek&gt;python -i -c ""
&gt;&gt;&gt; print "I ♥ Python!"
I ♥ Python!
&gt;&gt;&gt; exit()

C:\Users\Bartek&gt;
</snippet></ROW><ROW><id>20948482</id><snippet>-i</snippet></ROW><ROW><id>20948482</id><snippet>ipython</snippet></ROW><ROW><id>20948482</id><snippet>--no-banner</snippet></ROW><ROW><id>20948482</id><snippet>C:\Users\Bartek&gt;ipython --no-banner

In [1]: print "I &lt;3 Python!"
I &lt;3 Python!

In [2]: exit()

C:\Users\Bartek&gt;
</snippet></ROW><ROW><id>20948487</id><snippet>info</snippet></ROW><ROW><id>20948487</id><snippet>apihelper.py</snippet></ROW><ROW><id>20948487</id><snippet>info</snippet></ROW><ROW><id>20948487</id><snippet>apihelper</snippet></ROW><ROW><id>20948487</id><snippet>info</snippet></ROW><ROW><id>20948609</id><snippet>from imdb import IMDb
ia = IMDb('sql', uri='mysql://username:password@localhost/imdb')
inglorious = ia.search_movie('Inglorious Basterds')[0]
ia.update(inglorious)
print inglorious['soundtrack']
</snippet></ROW><ROW><id>20948852</id><snippet>PyInt_AsLong</snippet></ROW><ROW><id>20948852</id><snippet>...
if (PyCallable_Check(pFunc)) {
    PyObject *res = PyObject_CallObject(pFunc, NULL);
    if (res != NULL) {
        long n = PyInt_AsLong(res); // &lt;---------
        cout &lt;&lt; n &lt;&lt; endl;
    } else {
        PyErr_Print();
    }
    ...
</snippet></ROW><ROW><id>20948853</id><snippet>from apscheduler.scheduler import Scheduler
import time
def req():
    print 'some thing like hello world or foo'


if __name__ == '__main__':
    scheduler = Scheduler()
    scheduler.add_date_job(req, datetime(2014, 1, 6, 21, 40, 00))
    scheduler.start()
while True:
      time.sleep(1)
      pass
</snippet></ROW><ROW><id>20948928</id><snippet>random.sample</snippet></ROW><ROW><id>20948928</id><snippet>import random
fighters = [1, 2, 3, 4, 5]
fighter1, fighter2 = random.sample(fighters, 2)
</snippet></ROW><ROW><id>20948945</id><snippet>import games

GAMES = ('color', 'food', 'car', 'toy')

while True:
    question = input('Please enter your question: ').lower()
    if not question:
        break
    for g in GAMES:             
        if g in question:
            getattr(games, g)()
            break
    else:
        print('I do not have a game for that! :(')

print('Byebye!')
</snippet></ROW><ROW><id>20948945</id><snippet>COLORS = {
    'blue': 'Boys love this.',
    'pink': 'You must be a lady.',
    'red': 'You are hot!',
    }

def color():
    print('You found the color here.')
    while True:
        answer = input('What is your favorite color? ').lower()
        if answer in COLORS:
            print(COLORS[answer])
            return
        else:
            print('I don\'t know such a color.')

def food():
    print('Don\'t eat so much!')
</snippet></ROW><ROW><id>20948945</id><snippet>D:\test&gt;python main.py
Please enter your question: what color I like
You found the color here.
What is your favorite color? blue
Boys love this.
Please enter your question: what food I like
Don't eat so much!
Please enter your question: when I was born
I do not have a game for that! :(
Please enter your question:
Byebye!
</snippet></ROW><ROW><id>20948965</id><snippet>convert_alpha()</snippet></ROW><ROW><id>20948965</id><snippet>.convert()</snippet></ROW><ROW><id>20948965</id><snippet>set_colorkey</snippet></ROW><ROW><id>20949001</id><snippet>dateutil.parser.parse</snippet></ROW><ROW><id>20949001</id><snippet>&gt;&gt;&gt; import dateutil.parser
&gt;&gt;&gt; dateutil.parser.parse("2014-01-06T00:39:45.001+0000")
datetime.datetime(2014, 1, 6, 0, 39, 45, 1000, tzinfo=tzutc())
</snippet></ROW><ROW><id>20949415</id><snippet>#</snippet></ROW><ROW><id>20949415</id><snippet>http://www.example.org/foo.html#bar</snippet></ROW><ROW><id>20949415</id><snippet>id="bar"</snippet></ROW><ROW><id>20949415</id><snippet>handler.py</snippet></ROW><ROW><id>20949415</id><snippet>from handlers import LoginHandler
</snippet></ROW><ROW><id>20949581</id><snippet>A = np.zeros((10,20))
y, x  = np.ogrid[:A.shape[0], :A.shape[1]]
mask = x &gt; y
A[mask] = 1
</snippet></ROW><ROW><id>20949581</id><snippet>np.triu</snippet></ROW><ROW><id>20949581</id><snippet>np.triu_indices</snippet></ROW><ROW><id>20949597</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>20949597</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup as BS
&gt;&gt;&gt; s = "&lt;test&gt;H&lt;/test&gt;&lt;test&gt;E&lt;/test&gt;&lt;test&gt;L&lt;/test&gt;&lt;test&gt;L&lt;/test&gt;&lt;test&gt;O&lt;/test&gt;"
&gt;&gt;&gt; soup = BS(s)
&gt;&gt;&gt; for i in soup.find_all('test'):
...     print i.text
... 
H
E
L
L
O
</snippet></ROW><ROW><id>20949597</id><snippet>file.html</snippet></ROW><ROW><id>20949597</id><snippet>with</snippet></ROW><ROW><id>20949835</id><snippet>sed</snippet></ROW><ROW><id>20949835</id><snippet>fileinput</snippet></ROW><ROW><id>20949835</id><snippet>import fileinput
import sys

for line in fileinput.input(filename, inplace=True):
    if line.strip() == 'swift-ring-builder account.builder add zZONE-STORAGE_LOCAL_NET_IP:6002/DEVICE 100':
        sys.stdout.write(
            'swift-ring-builder account.builder add z1-10.0.0.2:6002/sda 100\n'
            'swift-ring-builder container.builder add z1-10.0.0.2:6001/sda 100\n'
            'swift-ring-builder object.builder add z1-10.0.0.2:6000/sda 100\n'
        )
    else:
        sys.stdout.write(line)
</snippet></ROW><ROW><id>20949835</id><snippet>filename</snippet></ROW><ROW><id>20949835</id><snippet>'swift-ring-builder account.builder add zZONE-STORAGE_LOCAL_NET_IP:6002/DEVICE 100'</snippet></ROW><ROW><id>20949867</id><snippet>kwargs</snippet></ROW><ROW><id>20949867</id><snippet>LOGIN_URL = reverse_lazy('login_view', kwargs={'parameter': 'login_parameter'})
</snippet></ROW><ROW><id>20949867</id><snippet>settings.py</snippet></ROW><ROW><id>20949867</id><snippet>urls.py</snippet></ROW><ROW><id>20950019</id><snippet>for method in client.wsdl.services[0].ports[0].methods.values():
    print "the existing methods in webservice are:" +method.name
while True
    try:
        s=raw_input("enter the name of the method you want to scan: ")
        #if user enter exit or some special command, break here
        name= getattr(client.service,s)
        #call the target method here ...
    except suds.WebFault,e:
        print e
</snippet></ROW><ROW><id>20950019</id><snippet>print</snippet></ROW><ROW><id>20950081</id><snippet>&gt;&gt;&gt; import pandas as pd

&gt;&gt;&gt; pd.read_csv('data.csv', sep='|', index_col=False, 
                 names=['protocol', 'server', 'type', 'value'])
Out[7]:
     protocol server                 type                        value
0    https    clients4.google.com    application/octet-stream    2296
1    https    clients4.google.com    text/html; charset=utf-8    0
2    https    clients4.google.com    application/octet-stream    2291
</snippet></ROW><ROW><id>20950115</id><snippet>virtualenv</snippet></ROW><ROW><id>20950115</id><snippet>virtualenv -p /usr/bin/python2 &lt;path/to/new/virtualenv/&gt;
</snippet></ROW><ROW><id>20950290</id><snippet>time unoconv 15.\ Text-Files.pptx
real    0m8.604s
</snippet></ROW><ROW><id>20950487</id><snippet>setuptools</snippet></ROW><ROW><id>20950487</id><snippet>use-wheel</snippet></ROW><ROW><id>20950487</id><snippet>false</snippet></ROW><ROW><id>20950487</id><snippet>$HOME/.pip/pip.conf</snippet></ROW><ROW><id>20950487</id><snippet>setuptools</snippet></ROW><ROW><id>20950487</id><snippet>pip</snippet></ROW><ROW><id>20950487</id><snippet>pip install --upgrade setuptools
</snippet></ROW><ROW><id>20950487</id><snippet>virtualenv</snippet></ROW><ROW><id>20950487</id><snippet>setuptools</snippet></ROW><ROW><id>20950487</id><snippet>virtualenv</snippet></ROW><ROW><id>20950676</id><snippet>tiddata = '&lt;Mkey3&gt;&lt;456&gt;&lt;Mkey2&gt;&lt;Mval2&gt;&lt;MKey1&gt;&lt;MVal1&gt;'
t = tiddata.strip('&lt;&gt;').split('&gt;&lt;')
output = {t[i]: t[i+1] for i in range(0, len(t), 2)}
</snippet></ROW><ROW><id>20950686</id><snippet>Counter.most_common()</snippet></ROW><ROW><id>20950686</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; x = Counter({'a':5, 'b':3, 'c':7})
&gt;&gt;&gt; x.most_common()
[('c', 7), ('a', 5), ('b', 3)]
</snippet></ROW><ROW><id>20950686</id><snippet>heapq</snippet></ROW><ROW><id>20950686</id><snippet>&gt;&gt;&gt; x.most_common(1)
[('c', 7)]
</snippet></ROW><ROW><id>20950686</id><snippet>key</snippet></ROW><ROW><id>20950686</id><snippet>.sort()</snippet></ROW><ROW><id>20950686</id><snippet>sorted()</snippet></ROW><ROW><id>20950686</id><snippet>sorted(x, key=x.get, reverse=True)</snippet></ROW><ROW><id>20950686</id><snippet>x.most_common()</snippet></ROW><ROW><id>20950686</id><snippet>&gt;&gt;&gt; sorted(x, key=x.get, reverse=True)
['c', 'a', 'b']
</snippet></ROW><ROW><id>20950686</id><snippet>(key, value)</snippet></ROW><ROW><id>20950686</id><snippet>&gt;&gt;&gt; sorted(x.items(), key=lambda pair: pair[1], reverse=True)
[('c', 7), ('a', 5), ('b', 3)]
</snippet></ROW><ROW><id>20950887</id><snippet>numcols, numrows = 300, 300
xi = np.linspace(data.Lon.min(), data.Lon.max(), numrows)
yi = np.linspace(data.Lat.min(), data.Lat.max(), numcols)
xi, yi = np.meshgrid(xi, yi)

x, y, z = data.Lon.values, data.Lat.values, data.Z.values
points = np.vstack((x,y)).T
values = z
wanted = (xi, yi)
zi = griddata(points, values, wanted)
</snippet></ROW><ROW><id>20950887</id><snippet>griddata</snippet></ROW><ROW><id>20950887</id><snippet>scipy.interpolate.griddata</snippet></ROW><ROW><id>20950887</id><snippet>griddata</snippet></ROW><ROW><id>20950887</id><snippet>scipy.interpolate.griddata(points, values, xi, method='linear', fill_value=nan)
</snippet></ROW><ROW><id>20950887</id><snippet>method='linear'</snippet></ROW><ROW><id>20950887</id><snippet>fill_value</snippet></ROW><ROW><id>20950887</id><snippet>import numpy as np
from scipy.interpolate import griddata
class d():
    def __init__(self):
        A0 = open("test.txt","rb") # i just copypasted your data into a txt (without first row), and reading it in in this class, so that the names are the same as yours
        A1 = A0.readlines()
        A = np.zeros((len(A1),3))
        for i, l in enumerate(A1):
            li = l.split()
            A[i,0] = float(li[0])
            A[i,1] = float(li[1])
            A[i,2] = float(li[2])
        self.Lon = A[:,0]
        self.Lat = A[:,1]
        self.Z = A[:,2]

data = d()
numcols, numrows = 30, 30
xi = np.linspace(data.Lon.min(), data.Lon.max(), numrows)
yi = np.linspace(data.Lat.min(), data.Lat.max(), numcols)
xi, yi = np.meshgrid(xi, yi)

x, y, z = data.Lon, data.Lat, data.Z
points = np.vstack((x,y)).T
values = z
wanted = (xi, yi)
zi = griddata(points, values, wanted)
import pylab as plt
fig = plt.figure(0, figsize=(8,4.5))
im = plt.contourf(xi, yi, zi)
plt.colorbar()
fig2 = plt.figure(1, figsize=(8,4.5))
im = plt.scatter(xi, yi, c= zi)
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>20951219</id><snippet>class HomePage(webapp2.RequestHandler):
    myvariable = ""

    def get(self):
        HomePage.myvariable = "content"
</snippet></ROW><ROW><id>20951219</id><snippet>HomePage.myvariable</snippet></ROW><ROW><id>20951219</id><snippet>class HomePage(webapp2.RequestHandler):
    def get(self):
        self.myvariable = "content"
</snippet></ROW><ROW><id>20951332</id><snippet>map</snippet></ROW><ROW><id>20951332</id><snippet>data['interest'].map(lambda x:x.split('.', 1)[0])
</snippet></ROW><ROW><id>20951332</id><snippet>import pandas as pd

data = pd.DataFrame({'interest':['one.a', 'two.a', 'three.a', 'four.b']})
data['i'] = data['interest'].map(lambda x:x.split('.', 1)[0])
print(data)
</snippet></ROW><ROW><id>20951332</id><snippet>  interest      i
0    one.a    one
1    two.a    two
2  three.a  three
3   four.b   four
</snippet></ROW><ROW><id>20951372</id><snippet>extra_data = JSONField(default='{}')</snippet></ROW><ROW><id>20951372</id><snippet>"extra_data": { "data": "something" }
</snippet></ROW><ROW><id>20951430</id><snippet>LD_PRELOAD=/usr/lib/libpython2.7.so gdb -ex 'set environ LD_PRELOAD' --args my-program-to-debug
</snippet></ROW><ROW><id>20951491</id><snippet>output = Popen(["mycmd", "myarg"], stdout=PIPE).communicate()[0]
</snippet></ROW><ROW><id>20951617</id><snippet>name</snippet></ROW><ROW><id>20951617</id><snippet>strength</snippet></ROW><ROW><id>20951617</id><snippet>strength</snippet></ROW><ROW><id>20951617</id><snippet>rel_med_subs</snippet></ROW><ROW><id>20951617</id><snippet>name</snippet></ROW><ROW><id>20951617</id><snippet>substance</snippet></ROW><ROW><id>20951617</id><snippet>(s.name, s.strength) for s in self.rel_med_subs.order_by('order')</snippet></ROW><ROW><id>20951617</id><snippet>s</snippet></ROW><ROW><id>20951617</id><snippet>name</snippet></ROW><ROW><id>20951617</id><snippet>strength</snippet></ROW><ROW><id>20951617</id><snippet>substance</snippet></ROW><ROW><id>20951617</id><snippet>rel_med_subs</snippet></ROW><ROW><id>20951617</id><snippet>medication</snippet></ROW><ROW><id>20951617</id><snippet>dir</snippet></ROW><ROW><id>20951617</id><snippet>rel_med_subs</snippet></ROW><ROW><id>20951617</id><snippet>rel_med_subs_set</snippet></ROW><ROW><id>20951617</id><snippet>dir</snippet></ROW><ROW><id>20951617</id><snippet>medication</snippet></ROW><ROW><id>20951617</id><snippet>substance</snippet></ROW><ROW><id>20951617</id><snippet>rel_med_subs</snippet></ROW><ROW><id>20951617</id><snippet>s.id_subs.name</snippet></ROW><ROW><id>20951617</id><snippet>s.strength</snippet></ROW><ROW><id>20951658</id><snippet>for count, item in enumerate(contents[:10]):
</snippet></ROW><ROW><id>20951658</id><snippet>islice</snippet></ROW><ROW><id>20951658</id><snippet>itertools</snippet></ROW><ROW><id>20951658</id><snippet>for count, item in enumerate(itertools.islice(contents, 10)):
</snippet></ROW><ROW><id>20951658</id><snippet>import itertools

def enum_iter_slice(collection, slice):
    return enumerate(itertools.islice(collection, slice))
</snippet></ROW><ROW><id>20951658</id><snippet>&gt;&gt;&gt; enum_iter_slice(xrange(100), 10)
&lt;enumerate object at 0x00000000025595A0&gt;
&gt;&gt;&gt; list(enum_iter_slice(xrange(100), 10))
[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]
&gt;&gt;&gt; for idx, item in enum_iter_slice(xrange(100), 10):
    print idx, item

0 0
1 1
2 2
3 3
4 4
5 5
6 6
7 7
8 8
9 9
</snippet></ROW><ROW><id>20951658</id><snippet>count</snippet></ROW><ROW><id>20951658</id><snippet>itertools.islice()</snippet></ROW><ROW><id>20951658</id><snippet>for item in itertools.islice(contents, 10):
</snippet></ROW><ROW><id>20951793</id><snippet>index.yaml</snippet></ROW><ROW><id>20951793</id><snippet>appcfg update_indexes</snippet></ROW><ROW><id>20951793</id><snippet>appcfg update</snippet></ROW><ROW><id>20952063</id><snippet>re.findall()</snippet></ROW><ROW><id>20952063</id><snippet>re.findall(r't[^s]*s', line, flags=re.I)
</snippet></ROW><ROW><id>20952063</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; sample = 'I want this string to be splitted into smaller strings.'
&gt;&gt;&gt; re.findall(r't[^s]*s', sample, flags=re.I)
['t this', 'tring to be s', 'tted into s', 'trings']
</snippet></ROW><ROW><id>20952063</id><snippet>'t this'</snippet></ROW><ROW><id>20952063</id><snippet>'tted into s'</snippet></ROW><ROW><id>20952063</id><snippet>t</snippet></ROW><ROW><id>20952063</id><snippet>'trings'</snippet></ROW><ROW><id>20952063</id><snippet>t</snippet></ROW><ROW><id>20952063</id><snippet>s</snippet></ROW><ROW><id>20952063</id><snippet>t</snippet></ROW><ROW><id>20952063</id><snippet>&gt;&gt;&gt; re.findall(r't[^ts]*s', sample, flags=re.I)
['this', 'to be s', 'to s', 'trings']
</snippet></ROW><ROW><id>20952063</id><snippet>tring</snippet></ROW><ROW><id>20952063</id><snippet>tted in</snippet></ROW><ROW><id>20952063</id><snippet>t</snippet></ROW><ROW><id>20952097</id><snippet>data[data['Type'].str.contains('Fruit')]
</snippet></ROW><ROW><id>20952097</id><snippet>import pandas as pd

data = pd.DataFrame({'Item':['Orange', 'Banana', 'Tomato', 'Laptop'],
                     'Type':['Edible, Fruit', 'Edible, Fruit', 'Edible, Vegetable', 'Non Edible, Electronic']})
print(data[data['Type'].str.contains('Fruit')])
</snippet></ROW><ROW><id>20952097</id><snippet>     Item           Type
0  Orange  Edible, Fruit
1  Banana  Edible, Fruit
</snippet></ROW><ROW><id>20952236</id><snippet>from</snippet></ROW><ROW><id>20952236</id><snippet>import</snippet></ROW><ROW><id>20952236</id><snippet>from</snippet></ROW><ROW><id>20952236</id><snippet>from</snippet></ROW><ROW><id>20952236</id><snippet>print(sys.modules['untitled'].string.ascii_uppercase)
</snippet></ROW><ROW><id>20952415</id><snippet>struct.pack("%dh"%(len(shorts)), *list(shorts))
</snippet></ROW><ROW><id>20952929</id><snippet>%store -r</snippet></ROW><ROW><id>20953062</id><snippet>select()</snippet></ROW><ROW><id>20953062</id><snippet>Connection</snippet></ROW><ROW><id>20953062</id><snippet>multiprocessing</snippet></ROW><ROW><id>20953062</id><snippet>multiprocess</snippet></ROW><ROW><id>20953062</id><snippet>multiprocessing</snippet></ROW><ROW><id>20953062</id><snippet>select()</snippet></ROW><ROW><id>20953062</id><snippet>pipe1.fileno()</snippet></ROW><ROW><id>20953062</id><snippet>select()</snippet></ROW><ROW><id>20953190</id><snippet>document.lower.split()</snippet></ROW><ROW><id>20953190</id><snippet>if</snippet></ROW><ROW><id>20953190</id><snippet>documents</snippet></ROW><ROW><id>20953190</id><snippet>elems = [1, 2, 3, 4]
squares = [e*e for e in elems]  # square each element
big = [e for e in elems if e &gt; 2]  # keep elements bigger than 2
</snippet></ROW><ROW><id>20953194</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>20953194</id><snippet>__abs__(self)</snippet></ROW><ROW><id>20953194</id><snippet>abs()</snippet></ROW><ROW><id>20953194</id><snippet>class A:
    "A class without __abs__ defined"
    def __init__(self, v):
        self.v = v

def A_abs(a):
    "An 'extension' method that will be added to `A`"
    return abs(a.v)

# Make abs() work with an instance of A
A.__abs__ = A_abs
</snippet></ROW><ROW><id>20953194</id><snippet>list</snippet></ROW><ROW><id>20953194</id><snippet>dict</snippet></ROW><ROW><id>20953296</id><snippet>SignupView</snippet></ROW><ROW><id>20953296</id><snippet>class MySignupView(SignupView):

    def get_context_data(self, **kwargs):
        ret = super(MySignupView, self).get_context_data(**kwargs)
        ret['all_tags'] = Tags.get_tags()

        return ret
</snippet></ROW><ROW><id>20953296</id><snippet>urls.py</snippet></ROW><ROW><id>20953318</id><snippet>if x + y + z &gt; 10
</snippet></ROW><ROW><id>20953318</id><snippet>import random
coins = 1000
wager = 0
while True: #main loop
    print('you have {} coins'.format(coins))
    if coins == 0: #stops the game if the player is out of money
        print('You are out of money! Scram, deadbeat!')
        break
    while wager &gt; coins or wager == 0: #loops until player enters a non-zero wager that is less then the total amount of coins
        wager = int(input('Please enter your bet (enter -1 to exit): '))
    if wager &lt; 0: # exits the game if the player enters a negative
        break
    print('All bets are in!') 
    x = random.randint(0,10)
    y = random.randint(0,10)
    z = random.randint(0,10)
    print(x,y,z) #displays all the random ints
    if x + y +z &gt; 10: #victory condition, adds coins for win
        print('You win! You won {} coins.'.format(wager))
        coins += wager
    else: #loss and deduct coins
        print('You lost! You lose {} coins'.format(wager))
        coins -= wager
    wager = 0 # sets wager back to 0 so our while loop for the wager validation will work
</snippet></ROW><ROW><id>20953359</id><snippet>def print_menu():
    print('What would you like to do: ')
    print('1. Retrieve data')
    print('2. Store Data')
    print('3. Exit')

while True:
    print_menu()
    choice = int(input('Enter a number: '))
    if choice == 1:
        #blah
    elif choice == 2:
        #blah blah
    elif choice == 3:
        break
</snippet></ROW><ROW><id>20953374</id><snippet>Enemy</snippet></ROW><ROW><id>20953374</id><snippet>Enemy</snippet></ROW><ROW><id>20953374</id><snippet>Troll</snippet></ROW><ROW><id>20953374</id><snippet>Goblin</snippet></ROW><ROW><id>20953374</id><snippet>Enemy</snippet></ROW><ROW><id>20953374</id><snippet>Troll</snippet></ROW><ROW><id>20953374</id><snippet>Goblin</snippet></ROW><ROW><id>20953374</id><snippet>Enemy</snippet></ROW><ROW><id>20953374</id><snippet>Character</snippet></ROW><ROW><id>20953374</id><snippet>Enemy</snippet></ROW><ROW><id>20953374</id><snippet>Hero</snippet></ROW><ROW><id>20953374</id><snippet>name</snippet></ROW><ROW><id>20953374</id><snippet>health</snippet></ROW><ROW><id>20953374</id><snippet>class Enemy(Character)

class Troll(Enemy)
</snippet></ROW><ROW><id>20953374</id><snippet>class FriendlyTroll(Troll, Friend)
</snippet></ROW><ROW><id>20953374</id><snippet>class UnfriendlyTroll(Troll, Enemy)
</snippet></ROW><ROW><id>20953374</id><snippet>Friend</snippet></ROW><ROW><id>20953374</id><snippet>share</snippet></ROW><ROW><id>20953420</id><snippet>import maya.cmds
</snippet></ROW><ROW><id>20953420</id><snippet>import maya.cmds as cmd
</snippet></ROW><ROW><id>20953420</id><snippet>def renameJoint(name):
    currentjoint = cmds.ls(type = "joint", selection=True)
    for connect in joints_list:
        if(connect == currentjoint):
            cmds.rename(connect, 'name')`
</snippet></ROW><ROW><id>20953420</id><snippet>def renameJoint(name):
    currentjoint = cmds.ls(type = "joint", selection=True)
    for connect in joints_list:
        if(connect == currentjoint[0]):
            cmds.rename(connect, name)
</snippet></ROW><ROW><id>20953420</id><snippet>import maya.cmds as cmds

def renameJoint(name):
    currentjoint = cmds.ls(type = "joint", selection=True)
    if currentjoint[0] in joints_list:
        cmds.rename(currentjoint[0], name)

def multipleButtonGrp(title,lst):
    cmds.text(label=title, font = "boldLabelFont")
    cmds.text(label="")
    for item in lst:
        cmds.button(item, label=item, command="renameJoint('%s')"%item)

joints_list = maya.cmds.ls(type="joint")

wnd_name = cmds.window(title="Rename-A-Joint", widthHeight=[300, 500])

cmds.rowColumnLayout(numberOfColumns = 2) #add your options
multipleButtonGrp("Hands",
               ["jnt_L_toe", "jnt_L_thumb1",
                "jnt_L_ball", "jnt_L_thumb2", 
                "jnt_L_ankle", "jnt_L_thumb3",
                "jnt_L_knee", "jnt_L_thumb4",
                 "jnt_L_thigh", "jnt_L_thumb5"])

cmds.showWindow(wnd_name)
</snippet></ROW><ROW><id>20953701</id><snippet>data = stdout.read()

f = open('file.txt', 'w')
f.write(data)

f.close()
client.close()
</snippet></ROW><ROW><id>20953764</id><snippet>import re
from bs4 import BeautifulSoup

matches = {}
_catalog_link = re.compile(r'^http://www\.bricklink\.com/catalogItem\.asp\?P=')

soup = BeautifulSoup(htmlpage)

for match in soup.find_all(text=re.compile(r'Match #\d+')):
    match_number = match.string.split('#', 1)[-1]
    matches[match_number] = matched_links = []
    # Find the parent table row
    row = next(p for p in match.parents if p.name == 'tr')
    # next rows hold the links
    for sibling in row.next_siblings:
        if sibling.name != 'tr':
            continue
        links = sibling.find_all('a', href=_catalog_link)
        if not links:
            break
        matched_links.extend(l.string for l in links)
</snippet></ROW><ROW><id>20953764</id><snippet>{u'139': [u'3822pb01', u'3821pb01'],
 u'140': [u'3822pb02', u'3821pb02'],
 u'141': [u'3822pb06', u'3821pb06'],
 u'142': [u'3822p03', u'3821p03'],
 u'143': [u'3822p24', u'3821p24'],
 u'144': [u'3822pb05', u'3821pb05'],
 u'145': [u'3822pb04', u'3821pb04'],
 u'146': [u'3822px1', u'3821px1'],
 u'147': [u'3822', u'3821'],
 u'148': [u'3189', u'3188'],
 u'149': [u'801a', u'802a'],
 u'150': [u'801', u'802'],
 u'151': [u'445', u'446'],
 u'152': [u'825', u'826'],
 u'153': [u'825p01', u'826p01'],
 u'154': [u'825p02', u'826p02'],
 u'155': [u'3195', u'3194'],
 u'156': [u'30231pb02', u'30231pb01'],
 u'158': [u'30230px1', u'30230px2'],
 u'159': [u'3936', u'3935'],
 u'160': [u'30355', u'30356'],
 u'161': [u'3586', u'3585'],
 u'162': [u'3933', u'3934'],
 u'164': [u'981', u'982'],
 u'165': [u'43369', u'43368'],
 u'166': [u'972', u'971'],
 u'167': [u'972pa2', u'971pa2'],
 u'168': [u'972p4f', u'971p4f'],
 u'169': [u'972p63', u'971p63'],
 u'170': [u'30073', u'30074'],
 u'171': [u'6128', u'6127'],
 u'172': [u'4466', u'4467'],
 u'173': [u'fabah1', u'fabah2'],
 u'174': [u'x46', u'x48'],
 u'175': [u'4181', u'4182'],
 u'176': [u'4181p05', u'4182p05'],
 u'177': [u'4181pb01', u'4182pb01'],
 u'178': [u'4181p02', u'4182p02'],
 u'179': [u'4181p06', u'4182p06'],
 u'180': [u'4181p04', u'4182p04'],
 u'181': [u'4181px1', u'4182px1'],
 u'182': [u'4181p03', u'4182p03'],
 u'183': [u'4181p01', u'4182p01'],
 u'184': [u'4181p07', u'4182p07'],
 u'185': [u'3195px1', u'3194px1'],
 u'186': [u'32190', u'32191'],
 u'187': [u'32188', u'32189'],
 u'188': [u'32527', u'32528'],
 u'189': [u'32534', u'32535'],
 u'190': [u'44350', u'44351'],
 u'191': [u'44352', u'44353'],
 u'192': [u'47712', u'47713'],
 u'193': [u'42061', u'42060'],
 u'194': [u'43710', u'43711'],
 u'195': [u'41765', u'41764'],
 u'196': [u'41748', u'41747'],
 u'197': [u'41750', u'41749'],
 u'198': [u'6565', u'6564'],
 u'199': [u'41770', u'41769'],
 u'200': [u'43723', u'43722'],
 u'201': [u'43721', u'43720'],
 u'202': [u'41768', u'41767'],
 u'203': [u'3069bps5', u'3069bps4'],
 u'204': [u'42061pb03', u'42060pb03'],
 u'205': [u'42061pb05', u'42060pb05'],
 u'206': [u'3005pb001', u'3005pb002'],
 u'207': [u'48288pb02', u'48288pb01'],
 u'208': [u'2582pb03', u'2582pb04'],
 u'209': [u'712', u'713'],
 u'211': [u'3039px17', u'3039px18'],
 u'212': [u'3037px5', u'3037px6'],
 u'213': [u'3037px3', u'3037px4'],
 u'214': [u'30249pb02', u'30249pb01'],
 u'215': [u'42022pb09', u'42022pb08'],
 u'216': [u'42022pb05', u'42022pb06'],
 u'217': [u'30647pb05', u'30647pb04'],
 u'218': [u'30647pb01', u'30647pb02'],
 u'219': [u'30647pb07', u'30647pb06'],
 u'220': [u'30647px1', u'30647px2'],
 u'221': [u'2744pb02', u'2744pb01'],
 u'222': [u'42061px5', u'42060px5'],
 u'223': [u'42061pb01', u'42060pb01'],
 u'224': [u'42061px1', u'42060px1'],
 u'225': [u'41748pb05', u'41747pb05'],
 u'226': [u'41748pb16', u'41747pb16'],
 u'227': [u'41748pb12', u'41747pb12'],
 u'228': [u'41748pb15', u'41747pb15'],
 u'229': [u'41748pb07', u'41747pb07'],
 u'230': [u'41748px1', u'41747px1'],
 u'231': [u'41748pb06', u'41747pb06'],
 u'232': [u'41748pb14', u'41747pb14'],
 u'233': [u'41748pb02', u'41747pb02'],
 u'234': [u'41748pb04', u'41747pb04'],
 u'235': [u'41748pb09', u'41747pb09'],
 u'236': [u'41748pb08', u'41747pb08'],
 u'237': [u'41748pb11', u'41747pb11'],
 u'238': [u'41748pb03', u'41747pb03'],
 u'239': [u'41748pb13', u'41747pb13'],
 u'240': [u'41748pb10', u'41747pb10'],
 u'241': [u'41750px2', u'41749px2'],
 u'242': [u'41750pb01', u'41749pb01'],
 u'243': [u'6565pb01', u'6564pb01'],
 u'244': [u'4864bp10', u'4864bp11'],
 u'245': [u'4864pb006L', u'4864pb006R'],
 u'246': [u'2362pb04', u'2362pb05'],
 u'247': [u'4215ap06', u'4215ap04'],
 u'248': [u'4215ap24', u'4215ap25'],
 u'249': [u'4215pb021', u'4215pb022'],
 u'250': [u'4215ap07', u'4215ap05'],
 u'251': [u'30117pb02L', u'30117pb02R'],
 u'252': [u'30117pb03L', u'30117pb03R'],
 u'253': [u'30117pb04L', u'30117pb04R'],
 u'254': [u'30117pb01', u'30117pb05'],
 u'255': [u'30116pb01', u'30116pb02'],
 u'256': [u'2468pb02', u'2468pb03'],
 u'257': [u'3245apx2', u'3245apx1'],
 u'258': [u'4070pb02', u'4070pb01'],
 u'259': [u'41855pb09', u'41855pb10'],
 u'401': [u'47847pb001L', u'47847pb001R'],
 u'418': [u'4460pb01', u'4460pb02'],
 u'419': [u'3010pb027', u'3010pb026'],
 u'420': [u'3010pb025', u'3010pb024'],
 u'421': [u'2341pb02', u'2341pb01'],
 u'439': [u'4286pb03', u'4286pb02'],
 u'440': [u'41748pb17', u'41747pb17'],
 u'472': [u'43710pb01', u'43711pb01'],
 u'473': [u'30363pb08', u'30363pb09'],
 u'474': [u'50305', u'50304'],
 u'475': [u'50955', u'50956'],
 u'512': [u'4286pb04', u'4286pb01'],
 u'546': [u'47397', u'47398'],
 u'572': [u'3193', u'3192'],
 u'598': [u'3933a', u'3934a'],
 u'606': [u'3822pb07', u'3821pb07'],
 u'620': [u'3939px1', u'3939px2'],
 u'621': [u'2431px18', u'2431px19'],
 u'622': [u'3069bpx57', u'3069bpx56'],
 u'643': [u'4215pb015', u'4215pb016'],
 u'678': [u'54384', u'54383'],
 u'680': [u'42061pb06', u'42060pb06'],
 u'681': [u'42061pb02', u'42060pb02'],
 u'682': [u'41748pb18', u'41747pb18'],
 u'683': [u'41768pb01', u'41767pb01'],
 u'684': [u'42061pb07', u'42060pb07'],
 u'685': [u'48933pb02', u'48933pb03'],
 u'686': [u'3622pb011', u'3622pb012'],
 u'687': [u'3010pb055L', u'3010pb055R'],
 u'688': [u'3008pb038', u'3008pb039'],
 u'689': [u'3822pb08', u'3821pb08'],
 u'690': [u'3822pb09', u'3821pb09'],
 u'691': [u'3822pb10', u'3821pb10'],
 u'692': [u'3189pb01', u'3188pb01'],
 u'693': [u'3193pb01', u'3192pb01'],
 u'694': [u'3193pb02', u'3192pb02'],
 u'695': [u'3195pb01', u'3194pb01'],
 u'696': [u'4864apx10', u'4864apx11'],
 u'697': [u'4215pb029', u'4215pb030'],
 u'700': [u'2362pb10', u'2362pb11'],
 u'701': [u'4286pb06', u'4286pb05'],
 u'702': [u'3678apb05', u'3678apb06'],
 u'703': [u'3678apb07', u'3678apb08'],
 u'704': [u'4460pb04', u'4460pb03'],
 u'705': [u'2340pb17L', u'2340pb17R'],
 u'706': [u'2340pb21L', u'2340pb21R'],
 u'707': [u'2340pb03', u'2340pb02'],
 u'708': [u'2340pb11', u'2340pb10'],
 u'709': [u'2340pb04', u'2340pb05'],
 u'710': [u'2340pb16', u'2340pb15'],
 u'711': [u'2340pb07', u'2340pb06'],
 u'712': [u'2340pb09', u'2340pb08'],
 u'714': [u'2431pb039', u'2431pb040'],
 u'727': [u'2431pb025', u'2431pb026'],
 u'728': [u'791pb01L', u'791pb01R'],
 u'766': [u'3004pb031L', u'3004pb031R'],
 u'768': [u'3010pb057L', u'3010pb057R'],
 u'769': [u'3009pb071L', u'3009pb071R'],
 u'770': [u'3009pb072L', u'3009pb072R'],
 u'771': [u'2873pb08L', u'2873pb08R'],
 u'772': [u'4286pb07L', u'4286pb07R'],
 u'773': [u'4286pb08L', u'4286pb08R'],
 u'774': [u'2340pb25L', u'2340pb25R'],
 u'775': [u'2340pb23L', u'2340pb23R'],
 u'776': [u'3004pb021L', u'3004pb021R'],
 u'777': [u'3004pb017L', u'3004pb017R']}
</snippet></ROW><ROW><id>20953889</id><snippet>TestCase.assertRaises</snippet></ROW><ROW><id>20953889</id><snippet>self.assertRaises(AttributeError, find_start_end("Regular Expressions", x))
</snippet></ROW><ROW><id>20953889</id><snippet># Do not call `find_start_end` directly,
#   but pass the function and its arguments to assertRaises
self.assertRaises(AttributeError, find_start_end, "Regular Expressions", x)
</snippet></ROW><ROW><id>20953889</id><snippet># Use assertRaises as context manager
with self.assertRaises(AttributeError)
    find_start_end("Regular Expressions", x)
</snippet></ROW><ROW><id>20953989</id><snippet>@contextmanager
def fn(...):
    value = ...      # A, B, C, D: setup
    try:
        yield value  # E: pass value to client
    except:          # or better, finally:
        ...          # F, H: cleanup
</snippet></ROW><ROW><id>20953989</id><snippet>None</snippet></ROW><ROW><id>20953989</id><snippet>__enter__</snippet></ROW><ROW><id>20953989</id><snippet>def __enter__(self):
    self.value = ...   # A, B, C, D: setup
    return self.value  # E: pass value to client
</snippet></ROW><ROW><id>20953989</id><snippet>__enter__</snippet></ROW><ROW><id>20953989</id><snippet>__exit__</snippet></ROW><ROW><id>20953989</id><snippet>finally</snippet></ROW><ROW><id>20953989</id><snippet>except</snippet></ROW><ROW><id>20953989</id><snippet>__exit__</snippet></ROW><ROW><id>20953989</id><snippet>def __exit__(self, type, value, traceback):
    ...                # F, H: cleanup
    return False       # don't suppress any exception
</snippet></ROW><ROW><id>20954059</id><snippet>float()</snippet></ROW><ROW><id>20954059</id><snippet>ValueError</snippet></ROW><ROW><id>20954059</id><snippet>try</snippet></ROW><ROW><id>20954059</id><snippet>try:
    fahrenheit = float(inputEntry.get())
except ValueError:
    infoLabel.configure(bg='#00CC33', text='You must type the value in digits!')
else:
    celsius = (fahrenheit - 32) * 5 / 9
    color = '#980000' if celcius &gt; 0 else '#3366CC' if celcius &lt; 0 else '#00CC33'
    infoLabel.configure(bg=color, text='Det blir %.2f grader Celsius.' % (celsius,))
</snippet></ROW><ROW><id>20954100</id><snippet>update()</snippet></ROW><ROW><id>20954100</id><snippet>if self.position["x"] &lt;= 0 or self.position["x"] &gt;= screen_y:
                                                         # ^ should be x
</snippet></ROW><ROW><id>20954100</id><snippet>Ball</snippet></ROW><ROW><id>20954100</id><snippet>640 - 480 == 160</snippet></ROW><ROW><id>20954100</id><snippet>screen</snippet></ROW><ROW><id>20954100</id><snippet>randint</snippet></ROW><ROW><id>20954100</id><snippet>velocity</snippet></ROW><ROW><id>20954100</id><snippet>randint</snippet></ROW><ROW><id>20954100</id><snippet>__init__</snippet></ROW><ROW><id>20954100</id><snippet>def __init__(self, size, position, velocity=None):
    if velocity is None:
        velocity = {"x": {"mag": random.randint(3,7), 
                          "dir": random.randrange(-1,2,2)}, 
                    "y": {"mag": random.randint(3,7), 
                          "dir": random.randrange(-1,2,2)}}
    self.size = size
    self.position = position
    self.velocity = velocity
    self.color = (255, 255, 255)
</snippet></ROW><ROW><id>20954100</id><snippet>velocity</snippet></ROW><ROW><id>20954100</id><snippet>main()</snippet></ROW><ROW><id>20954100</id><snippet>balls.append(Ball(size, position))
</snippet></ROW><ROW><id>20954100</id><snippet>Ball</snippet></ROW><ROW><id>20954100</id><snippet>position</snippet></ROW><ROW><id>20954100</id><snippet>velocity</snippet></ROW><ROW><id>20954100</id><snippet>position</snippet></ROW><ROW><id>20954100</id><snippet>velocity</snippet></ROW><ROW><id>20954100</id><snippet>(x, y)</snippet></ROW><ROW><id>20954100</id><snippet>pygame</snippet></ROW><ROW><id>20954100</id><snippet>dict</snippet></ROW><ROW><id>20954100</id><snippet>velocity == (velocity['x']['mag'] * velocity['x']['dir'],
             velocity['y']['mag'] * velocity['y']['dir'])

position == (position['x'], position['y'])
</snippet></ROW><ROW><id>20954100</id><snippet>main()</snippet></ROW><ROW><id>20954100</id><snippet>balls.append(Ball(size, event.pos))
</snippet></ROW><ROW><id>20954435</id><snippet>www.example.com/db-contents/?level=2</snippet></ROW><ROW><id>20954435</id><snippet>request.GET['level']</snippet></ROW><ROW><id>20954435</id><snippet>`www.example.com/db-contents/</snippet></ROW><ROW><id>20954435</id><snippet>?foo=bar</snippet></ROW><ROW><id>20954435</id><snippet>request.GET</snippet></ROW><ROW><id>20954435</id><snippet>"bar"</snippet></ROW><ROW><id>20954435</id><snippet>&amp;</snippet></ROW><ROW><id>20954435</id><snippet>www.example.com/db-contents/?foo=bar&amp;somevar=1&amp;anothervar=

&gt;&gt;&gt; request.GET['foo']
'bar'
&gt;&gt;&gt; request.GET['somevar']
'1'
&gt;&gt;&gt; request.GET['anothervar']
None
&gt;&gt;&gt; "anothervar" in request.GET
True
&gt;&gt;&gt; "notsetvar" in request.GET
False
</snippet></ROW><ROW><id>20954549</id><snippet>izip</snippet></ROW><ROW><id>20954549</id><snippet>&gt;&gt;&gt; cpu_dict = {'t1': [1,2,3,4,5], 't2': [6,7,8,9,10], 't3': [11,12,13,14,15]}
&gt;&gt;&gt; list(izip(*(y + [x] for x, y in cpu_dict.iteritems())))
[(6, 11, 1),
 (7, 12, 2),
 (8, 13, 3),
 (9, 14, 4),
 (10, 15, 5),
 ('t2', 't3', 't1')]
</snippet></ROW><ROW><id>20954549</id><snippet>y + [x]</snippet></ROW><ROW><id>20954549</id><snippet>[1,2,3,4,5,'t1'], [6,7,8,9,10,'t2'], [11,12,13,14,15,'t3']</snippet></ROW><ROW><id>20954549</id><snippet>csv.writerows</snippet></ROW><ROW><id>20954549</id><snippet>csv.writerow</snippet></ROW><ROW><id>20954549</id><snippet>&gt;&gt;&gt; cpu_dict = {'t1': [1,2,3,4,5], 't2': [6,7,8,9,10], 't3': [11,12,13,14,15]}
&gt;&gt;&gt; sorted_items = sorted(cpu_dict.iteritems(), key=lambda x: int(x[0][1:]))
&gt;&gt;&gt; list(izip(*(y + [x] for x, y in sorted_items)))
[(1, 6, 11),
 (2, 7, 12),
 (3, 8, 13),
 (4, 9, 14),
 (5, 10, 15),
 ('t1', 't2', 't3')]
</snippet></ROW><ROW><id>20954549</id><snippet>izip</snippet></ROW><ROW><id>20954549</id><snippet>foo(*[1,2,3,4,5,6,object()]) == foo(1,2,3,4,5,6,object())
</snippet></ROW><ROW><id>20954694</id><snippet>with open('raw.txt', 'r') as infile:
    f = infile.readlines()
    with open('filtered.txt', 'w') as outfile:
        for line in f:
            if 'subject_avatar' in line: # or other better rules
                outfile.write(line)
</snippet></ROW><ROW><id>20954694</id><snippet>filtered.txt</snippet></ROW><ROW><id>20954694</id><snippet>pandas</snippet></ROW><ROW><id>20954694</id><snippet>with open('d.txt', 'r') as infile:
    f = infile.readlines()
    with open('filtered_part1.txt', 'w') as outfile:
        for i in range(len(f)):
            line = f[i]
            if line[16] == '0':
                i += 1
                break
            outfile.write(line)
    while f[i][16] == '0': # skip a few lines
        i += 1
    with open('filtered_part2.txt', 'w') as outfile:
        while i &lt; len(f):
            outfile.write(f[i])
            i += 1
</snippet></ROW><ROW><id>20954733</id><snippet>response</snippet></ROW><ROW><id>20954733</id><snippet>result</snippet></ROW><ROW><id>20954733</id><snippet>get</snippet></ROW><ROW><id>20954733</id><snippet>try:
    if response.get('result', '') == "success":
        …
except AttributeError: # Use AttributeError if you use the get method, TypeError if you use regular dict subscripting.
    # response was certainly not successful
</snippet></ROW><ROW><id>20954767</id><snippet>bin/pip</snippet></ROW><ROW><id>20954767</id><snippet>bin/activate</snippet></ROW><ROW><id>20954767</id><snippet>bin/pip</snippet></ROW><ROW><id>20954767</id><snippet>42</snippet></ROW><ROW><id>20954767</id><snippet>bin/activate</snippet></ROW><ROW><id>20954767</id><snippet>VIRTUAL_ENV="/Users/me/path/to/virtual/environment"
</snippet></ROW><ROW><id>20954767</id><snippet>deactivate</snippet></ROW><ROW><id>20954767</id><snippet>. bin/activate</snippet></ROW><ROW><id>20954767</id><snippet>which pip</snippet></ROW><ROW><id>20954767</id><snippet>/Users/kristof/VirtualEnvs/testpy3/bin/pip3
</snippet></ROW><ROW><id>20954798</id><snippet>class CustomWordsMiddleware(object):

   def process_response(self, request, response):

       if request.user.settings == 'lumberjack':
           response.content = response.content.replace("object", "tree")
           response.content = response.content.replace("objects", "trees")

       return response
</snippet></ROW><ROW><id>20955002</id><snippet>request.GET</snippet></ROW><ROW><id>20955344</id><snippet>sameLetters = {l: l in randomData for l in letters}
</snippet></ROW><ROW><id>20955344</id><snippet>if letters[i] and randomData:
            # ^ should be in
</snippet></ROW><ROW><id>20955344</id><snippet>letters[i]</snippet></ROW><ROW><id>20955344</id><snippet>randomData</snippet></ROW><ROW><id>20955344</id><snippet>letters</snippet></ROW><ROW><id>20955344</id><snippet>from string import ascii_uppercase
</snippet></ROW><ROW><id>20955344</id><snippet>in</snippet></ROW><ROW><id>20955416</id><snippet>row2</snippet></ROW><ROW><id>20955416</id><snippet>## Product list
ta_prod = {} # dictionary instead of list

prod = open("products.txt", "r")
for line2 in prod:
    row2 = line2.split(",")
    prodordnavn = row2[4] # reading the referencing key
    ta_prod[prodordnavn] = row2[11] # the value you would like to use in the other loop


## Producs Ordered
supne = []
ta_prodord = []
prodord = open("products_ordered.txt", "r")
for line in prodord:
    row = line.split(",")
    prodordnavn = re.sub('"',"",row[1])
    ta_prodord.append(prodordnavn)
    if prodordnavn in ta_prod:
        value = ta_prod[prodordnavn] # reading the value from ta_prod dictionary by prodordnavn key
        supne.append([row[0],row[1],row[2],value]) 
</snippet></ROW><ROW><id>20955450</id><snippet>subplots</snippet></ROW><ROW><id>20955450</id><snippet>image.set_data</snippet></ROW><ROW><id>20955450</id><snippet>axes = plt.subplots(4, 8)</snippet></ROW><ROW><id>20955450</id><snippet>axes</snippet></ROW><ROW><id>20955450</id><snippet>subplots</snippet></ROW><ROW><id>20955450</id><snippet>fig, axes = plt.subplots(...)</snippet></ROW><ROW><id>20955450</id><snippet>import os
import cPickle as pickle
from functools import wraps

class Cached(object):
    def __init__(self, filename):
        self.filename = filename

    def __call__(self, func):
        @wraps(func)
        def new_func(*args, **kwargs):
            if not os.path.exists(self.filename):
                results = func(*args, **kwargs)
                with open(self.filename, 'w') as outfile:
                    pickle.dump(results, outfile, pickle.HIGHEST_PROTOCOL)
            else:
                with open(self.filename, 'r') as infile:
                    results = pickle.load(infile)
            return results
        return new_func
</snippet></ROW><ROW><id>20955450</id><snippet>utilities.py</snippet></ROW><ROW><id>20955450</id><snippet>import matplotlib.pyplot as plt
from utilities import Cached

@Cached('temp.pkl')
def setup():
    fig, axes = plt.subplots(8, 4)
    # And perhaps some other data parsing/whatever
    return fig, axes

fig, axes = setup()
for ax in axes.flat:
    ax.plot(range(10))
plt.show()
</snippet></ROW><ROW><id>20955450</id><snippet>"temp.pkl"</snippet></ROW><ROW><id>20955450</id><snippet>temp.pkl</snippet></ROW><ROW><id>20955450</id><snippet>setup</snippet></ROW><ROW><id>20955531</id><snippet>q</snippet></ROW><ROW><id>20955531</id><snippet>Queue</snippet></ROW><ROW><id>20955531</id><snippet>put</snippet></ROW><ROW><id>20955531</id><snippet>append</snippet></ROW><ROW><id>20955531</id><snippet>q</snippet></ROW><ROW><id>20955531</id><snippet>import Queue
...
q = Queue.Queue()
</snippet></ROW><ROW><id>20955531</id><snippet>from Queue import Queue
...
q = Queue()
</snippet></ROW><ROW><id>20955531</id><snippet>read</snippet></ROW><ROW><id>20955531</id><snippet>Queue</snippet></ROW><ROW><id>20955567</id><snippet>import csv
most_used_products = dict()

with open('your_csv_filename.csv', 'rb') as csvfile:
    products_reader = csv.reader(csvfile, delimiter=',')
    for client, product, str_usage in products_reader:
        usage = int(str_usage)
        if client not in most_used_products:
            most_used_products[client] = (product, usage)
        else:
            used_product, product_usage = most_used_products[client]
            if usage &gt; product_usage:
                 most_used_products[client] = (product, usage)

for client, product_info in most_used_products.items():
    product_name, _ = product_info
    print '"%s","%s"' % (client, product_name)
</snippet></ROW><ROW><id>20955678</id><snippet>bytes</snippet></ROW><ROW><id>20955678</id><snippet>bytes</snippet></ROW><ROW><id>20955678</id><snippet>bytes</snippet></ROW><ROW><id>20955678</id><snippet>str</snippet></ROW><ROW><id>20955678</id><snippet>with open(fileName, 'br+') as f:
    f.write(b'\x07\x08\x07')
</snippet></ROW><ROW><id>20955678</id><snippet>bytes</snippet></ROW><ROW><id>20955678</id><snippet>&gt;&gt;&gt; lst = [7, 8, 7]
&gt;&gt;&gt; bytes(lst)
b'\x07\x08\x07'
</snippet></ROW><ROW><id>20955678</id><snippet>bytes</snippet></ROW><ROW><id>20955678</id><snippet>def splitNumber (num):
    lst = []
    while num &gt; 0:
        lst.append(num &amp; 0xFF)
        num &gt;&gt;= 8
    return lst[::-1]

bytes(splitNumber(12345678901234567890))
# b'\xabT\xa9\x8c\xeb\x1f\n\xd2'
</snippet></ROW><ROW><id>20955678</id><snippet>with open(fileName, 'br+') as f:
    for number in numbers:
        f.write(bytes(splitNumber(number)))
</snippet></ROW><ROW><id>20956335</id><snippet>Query.filter</snippet></ROW><ROW><id>20956335</id><snippet>Query</snippet></ROW><ROW><id>20956344</id><snippet>class User:  # changed class name to make it clearer
    users = {}

    def __init__(self, name, list_a, list_b, list_c, list_d):  # added underscores to make list name easier to read
        self.name = name
        self.list_a = list_a
        self.list_b = list_b
        self.list_c = list_c
        self.list_d = list_d

    @classmethod  # the @classmethod is a preference for later sub-classes to have the ability to edit the list if need-be
    def create_new_users(cls):
        print("how many users do you want to create")
        x = int(input())
        for _ in range(x):
            name = input("Assign the users names")
            if name == '' or name.lower() == 'none':
                raise RuntimeError("name cannot be None or empty")
            new_user = cls(name, list_a=[], list_b=[], list_c=[], list_d=[])  # changed strings to lists
            cls.users[new_user.name] = new_user  # adds new_user to the dict using the user name as the key

    @classmethod
    def show_users(cls):
        for key in cls.users:
            print(key, cls.users[key])

    @classmethod
    def set_lists(cls):
        choice = input("select the user you intend on adding lists for")  # moved prompts into input()
        for elem in User.users:
            print(vars(User.users[choice]))
            decision2 = int(input("how many lists would you like to create?(up to 4)"))
            if decision2 == 1:
                name_string = input("what would you like the list to be named?")
                setattr(User.users['Ian'], 'list_a', name_string) # see below
                print("you have created 1 list, with the name:%s" %name_string)
</snippet></ROW><ROW><id>20956344</id><snippet>&gt;&gt;&gt; usr.create_new_users()
how many users do you want to create? 

1
Assign the users names: Ian
&gt;&gt;&gt; print(vars(User.users['Ian']))
{'list_a': [], 'name': 'Ian', 'list_c': [], 'list_d': [], 'list_b': []}
&gt;&gt;&gt; usr.set_lists()
select the user you intend on adding lists for: Ian
{'list_a': [], 'name': 'Ian', 'list_c': [], 'list_d': [], 'list_b': []}
how many lists would you like to create?(up to 4): 1
what would you like the list to be named?
thing
you have created 1 list, with the name:thing
</snippet></ROW><ROW><id>20956344</id><snippet>see below</snippet></ROW><ROW><id>20956344</id><snippet>list_a</snippet></ROW><ROW><id>20956344</id><snippet>lists</snippet></ROW><ROW><id>20956386</id><snippet>def move(self, event):
    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_w:
            ....

def main():
    player1 = Character(screen, 0, 0, 200, 200)
    while True:
        for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    pygame.quit()
                    sys.exit()
                else:
                    player1.move(event)
</snippet></ROW><ROW><id>20956386</id><snippet>def main():
    player1 = Character(screen, 0, 0, 200, 200)
    while True:
</snippet></ROW><ROW><id>20956706</id><snippet>inspect.getargspec().keywords</snippet></ROW><ROW><id>20956706</id><snippet>None</snippet></ROW><ROW><id>20956706</id><snippet>**kwargs</snippet></ROW><ROW><id>20956706</id><snippet>inspect.getargspec()</snippet></ROW><ROW><id>20956706</id><snippet>*</snippet></ROW><ROW><id>20956706</id><snippet>**</snippet></ROW><ROW><id>20956706</id><snippet>None</snippet></ROW><ROW><id>20956706</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; def foo(): pass
... 
&gt;&gt;&gt; def bar(**kwargs): pass
... 
&gt;&gt;&gt; inspect.getargspec(foo).keywords is None
True
&gt;&gt;&gt; inspect.getargspec(bar).keywords is None
False
&gt;&gt;&gt; inspect.getargspec(bar).keywords
'kwargs'
</snippet></ROW><ROW><id>20956779</id><snippet>rod_cutting_memoization_aux()</snippet></ROW><ROW><id>20956779</id><snippet>r[n] is not None</snippet></ROW><ROW><id>20956779</id><snippet>n == 0</snippet></ROW><ROW><id>20956779</id><snippet>True</snippet></ROW><ROW><id>20956779</id><snippet>return</snippet></ROW><ROW><id>20956779</id><snippet>None</snippet></ROW><ROW><id>20956779</id><snippet>q = max(q, p[i] + rod_cutting_memoization_aux(p,n-i-1,r))
</snippet></ROW><ROW><id>20956779</id><snippet>p[i]</snippet></ROW><ROW><id>20956779</id><snippet>None</snippet></ROW><ROW><id>20956779</id><snippet>p, n - i - 1, r</snippet></ROW><ROW><id>20956779</id><snippet>None</snippet></ROW><ROW><id>20956783</id><snippet>df['fruit'] = df['fruit'].map(lambda x: x.lower())

res = df.groupby('fruit').sum()

res    
#         val1  val2
# fruit             
# apple     13    13
# mango      5     5
# orange     3     3
</snippet></ROW><ROW><id>20956783</id><snippet>res.reset_index()
</snippet></ROW><ROW><id>20956783</id><snippet>df['fruit'] = df['fruit'].str.lower()
</snippet></ROW><ROW><id>20956879</id><snippet>for</snippet></ROW><ROW><id>20956879</id><snippet>dict.items</snippet></ROW><ROW><id>20956879</id><snippet>{% for key, value in resources.items %}
    &lt;b&gt;{{ key }}: &lt;/b&gt;{{ value }}
{% endfor %}
</snippet></ROW><ROW><id>20957295</id><snippet>ipython</snippet></ROW><ROW><id>20957295</id><snippet>brew</snippet></ROW><ROW><id>20957295</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>20957295</id><snippet>conda</snippet></ROW><ROW><id>20957295</id><snippet>/anaconda/bin</snippet></ROW><ROW><id>20957295</id><snippet>ipython</snippet></ROW><ROW><id>20957298</id><snippet>figure()</snippet></ROW><ROW><id>20957298</id><snippet>xlim</snippet></ROW><ROW><id>20957298</id><snippet>ylim</snippet></ROW><ROW><id>20957298</id><snippet>[0,1]</snippet></ROW><ROW><id>20957298</id><snippet>[.2,.2]</snippet></ROW><ROW><id>20957298</id><snippet>[-.06,.06]</snippet></ROW><ROW><id>20957298</id><snippet>ax.set_xlim(-.4,.4)
ax.set_xlim(-.4,.4)
</snippet></ROW><ROW><id>20957432</id><snippet>sudo python setup.py install
</snippet></ROW><ROW><id>20957485</id><snippet>import pytz
def to_utc(dt):
    try:
        return dt.astimezone(pytz.utc)
    except ValueError:
        return pytz.utc.localize(dt)
</snippet></ROW><ROW><id>20957485</id><snippet>&gt;&gt;&gt; print '\n'.join(original)
1995-01-24T09:08:17.1823213
Wed, 16 Jun 94 07:29:35 CST
Thu, 13 Oct 94 10:13:13 -0700
Wed, 9 Nov 1994 09:50:32 -0500 (EST)
21 dec 17:05
21-dec 17:05
21/dec 17:05
21/dec/93 17:05
16 Nov 94 22:28:20 PST
1999 10:02:18 'GMT'
&gt;&gt;&gt; modified = [parser.parse(od, default=DEFAULT_DATE) for od in original]
&gt;&gt;&gt; in_utc = [to_utc(md) for md in modified]
&gt;&gt;&gt; for d in in_utc:
...     print d
...
1995-01-24 09:08:17.182321+00:00
1994-06-16 07:29:35+00:00
1994-10-13 17:13:13+00:00
1994-11-09 14:50:32+00:00
2014-12-21 17:05:00+00:00
2014-12-21 17:05:00+00:00
2014-12-21 17:05:00+00:00
1993-12-21 17:05:00+00:00
1994-11-16 22:28:20+00:00
1999-01-01 10:02:18+00:00
</snippet></ROW><ROW><id>20957817</id><snippet>random.seed(n)
</snippet></ROW><ROW><id>20957817</id><snippet>n</snippet></ROW><ROW><id>20957817</id><snippet>0</snippet></ROW><ROW><id>20957817</id><snippet>random.seed(1178741599)</snippet></ROW><ROW><id>20957817</id><snippet>random.randint(0, 3) == 1</snippet></ROW><ROW><id>20957817</id><snippet>random</snippet></ROW><ROW><id>20957817</id><snippet>random</snippet></ROW><ROW><id>20957849</id><snippet>try:
    import my_module
except ImportError:
    available = False
else:
    available = True
</snippet></ROW><ROW><id>20958024</id><snippet>pip install -U selenium</snippet></ROW><ROW><id>20958036</id><snippet>id()</snippet></ROW><ROW><id>20958036</id><snippet>id()</snippet></ROW><ROW><id>20958036</id><snippet>id()</snippet></ROW><ROW><id>20958036</id><snippet>Process</snippet></ROW><ROW><id>20958036</id><snippet>id()</snippet></ROW><ROW><id>20958036</id><snippet>Pool</snippet></ROW><ROW><id>20958036</id><snippet>Manager</snippet></ROW><ROW><id>20958036</id><snippet>numeri</snippet></ROW><ROW><id>20958036</id><snippet>numeri</snippet></ROW><ROW><id>20958036</id><snippet>get_list_id()</snippet></ROW><ROW><id>20958036</id><snippet>def get_list_id(self):  # added method
    import os
    print("get_list_id() running in process", os.getpid())
    return id(self.nl)
</snippet></ROW><ROW><id>20958036</id><snippet>41543664
------------ Process
producing 42262032
get_list_id() running in process 5856
with list_id 44544608
producing 46268496
get_list_id() running in process 5856
with list_id 44544608
producing 42262032
get_list_id() running in process 5856
with list_id 44544608
producing 44153904
get_list_id() running in process 5856
with list_id 44544608
producing 42262032
get_list_id() running in process 5856
with list_id 44544608
--------------- Pool
producing 41639248
get_list_id() running in process 5856
with list_id 44544608
producing 41777200
get_list_id() running in process 5856
with list_id 44544608
producing 41776816
get_list_id() running in process 5856
with list_id 44544608
producing 41777168
get_list_id() running in process 5856
with list_id 44544608
producing 41777136
get_list_id() running in process 5856
with list_id 44544608
</snippet></ROW><ROW><id>20958036</id><snippet>self.nl</snippet></ROW><ROW><id>20958036</id><snippet>numeri</snippet></ROW><ROW><id>20958036</id><snippet>fork()</snippet></ROW><ROW><id>20958036</id><snippet>Manager</snippet></ROW><ROW><id>20958036</id><snippet>fork()</snippet></ROW><ROW><id>20958036</id><snippet>multiprocessing</snippet></ROW><ROW><id>20958131</id><snippet>raw_input</snippet></ROW><ROW><id>20958131</id><snippet>input</snippet></ROW><ROW><id>20958131</id><snippet>play_round</snippet></ROW><ROW><id>20958131</id><snippet>play_game</snippet></ROW><ROW><id>20958131</id><snippet>play_round</snippet></ROW><ROW><id>20958131</id><snippet>play_game</snippet></ROW><ROW><id>20958131</id><snippet>play_game</snippet></ROW><ROW><id>20958131</id><snippet>def play_game():
    score = 100
    rounds = 10
    for round in range(rounds):
        word = select_word()
        jumble = jumbled(word)
        score = play_round(word, jumble, round + 1, score)
    print("That is the end of the game, your total score is {0}".format(score))
    print("Thank you for playing")
    raw_input("\n\nPress the enter key to exit.")
</snippet></ROW><ROW><id>20958173</id><snippet>memmove</snippet></ROW><ROW><id>20958173</id><snippet>count = (size+chunksize-1) // chunk size
for chunk in range(count):
    f.seek(start + chunk * chunksize + deleted_line_size, 0)
    buf = f.read(chunksize)
    f.seek(start + chunk * chunksize, 0)
    f.write(buf)
</snippet></ROW><ROW><id>20958173</id><snippet>shutil</snippet></ROW><ROW><id>20958173</id><snippet>with tempfile.TemporaryFile('w') as ftemp:
    shutil.copyfileobj(ftemp, f)
    ftemp.seek(0, 0)
    f.seek(start, 0)
    shutil.copyfileobj(f, ftemp)
f.truncate()
</snippet></ROW><ROW><id>20958173</id><snippet>mmap</snippet></ROW><ROW><id>20958173</id><snippet>m = mmap.mmap(f.fileno(), access=mmap.ACCESS_WRITE)
m[start:end-deleted_line_size] = m[start+deleted_line_size:end]
m.close()
f.seek(end-deleted_line_size)
f.truncate()
</snippet></ROW><ROW><id>20958332</id><snippet>from __future__ import print_function
from collections import defaultdict

d=defaultdict(list)

with open('/tmp/cols.txt') as f:
    for line in f:
        line_data=line.strip().split()
        d['\t'.join(line_data[0:5])].append(line_data[5])

for k in sorted(d.keys(), 
                key=lambda s: (s.split()[0], tuple(map(int, s.split()[1:])))):
    print(k, '\t',', '.join(d[k]))
</snippet></ROW><ROW><id>20958332</id><snippet>A   1   23  36  -3   ABC, ABD, CLA
B   2   21  4   -6   PQR, CAP
C   5   47  3   -4   FM
C   10  54  6   -5   AKN
D   15  76  3   -4   LGA
D   20  76  10  -6   MHA
</snippet></ROW><ROW><id>20958524</id><snippet>bigDict = {}
</snippet></ROW><ROW><id>20958524</id><snippet>bigDict.setdefault(label, {}).setdefault(num, 0)
bigDict[label][num] += 1
</snippet></ROW><ROW><id>20958644</id><snippet>

    from social.apps.django_app.middleware import SocialAuthExceptionMiddleware
    from social import exceptions as social_exceptions

    class SocialAuthExceptionMiddleware(SocialAuthExceptionMiddleware):
        def process_exception(self, request, exception):
            if hasattr(social_exceptions, 'AuthCanceled'):
                return HttpResponse("I'm the Pony %s" % exception)
            else:
                raise exception

</snippet></ROW><ROW><id>20958644</id><snippet>

    MIDDLEWARE_CLASSES = (
             .....
            'pat_to_middleware.SocialAuthExceptionMiddleware',
    )

</snippet></ROW><ROW><id>20958957</id><snippet>u"Stanislav_Šesták"</snippet></ROW><ROW><id>20958957</id><snippet>"Stanislav_%C5%A0est%C3%A1k"</snippet></ROW><ROW><id>20958957</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import cgi
import urllib
import urllib2

wiki_title = u"Stanislav_Šesták"
url_path = urllib.quote(wiki_title.encode('utf-8'))
r = urllib2.urlopen("https://en.wikipedia.org/wiki/" + url_path)
_, params = cgi.parse_header(r.headers.get('Content-Type', ''))
encoding = params.get('charset')
content = r.read()
unicode_text = content.decode(encoding or 'utf-8')
print unicode_text # if it fails; set PYTHONIOENCODING
</snippet></ROW><ROW><id>20959094</id><snippet>&gt;&gt;&gt; cp = '#U79c1'
&gt;&gt;&gt; chr(int(cp[2:],16))
'私'
</snippet></ROW><ROW><id>20959094</id><snippet>#! /usr/bin/python3
import re

def makeNice(s):
    return re.subn('(#U[0-9a-f]{4})', lambda cp: chr(int(cp.groups()[0][2:],16)), s) [0]

a = '-#U2605-#U79c1-'
print(a, makeNice(a))
</snippet></ROW><ROW><id>20959094</id><snippet>-#U2605-#U79c1- -★-私-
</snippet></ROW><ROW><id>20959121</id><snippet>self.DrawArea.configure(scrollregion=self.DrawArea.bbox("all"))
</snippet></ROW><ROW><id>20959121</id><snippet>print("the scrollregion is", self.DrawArea.cget("scrollregion"))
</snippet></ROW><ROW><id>20959121</id><snippet>bbox</snippet></ROW><ROW><id>20959121</id><snippet>self.DrawArea.configure(scrollregion=(0,0,3000,3000))
</snippet></ROW><ROW><id>20959252</id><snippet>import numpy as np

A = np.array(
[[1, 1],
[2, 2],
[3, 3],])

B = np.array(
[[2, 1],
[3, 2],
[4, 3],
[5, 4]])

C = np.array(
[[2, 2],
[3, 1],
[5, 2],])

I = reduce(
    lambda l,r: np.intersect1d(l,r,True),
    (i[:,0] for i in (A,B,C)))

print A[np.searchsorted(A[:,0], I)]
print B[np.searchsorted(B[:,0], I)]
print C[np.searchsorted(C[:,0], I)]
</snippet></ROW><ROW><id>20959252</id><snippet>C = np.array(
[[9, 2],
[1,6],
[5, 1],
[2, 5],
[3, 2],])

def index_by_first_column_entry(M, keys):
    colkeys = M[:,0]
    sorter = np.argsort(colkeys)
    index = np.searchsorted(colkeys, keys, sorter = sorter)
    return M[sorter[index]]

print index_by_first_column_entry(C, I)
</snippet></ROW><ROW><id>20959252</id><snippet>I = reduce(
    lambda l,r: np.intersect1d(l,r,False),
    (i[:,0] for i in (A,B,C)))
</snippet></ROW><ROW><id>20959441</id><snippet>confirm_email</snippet></ROW><ROW><id>20959441</id><snippet>confirm_email = forms.EmailField(label="Confirm email", required=True)
</snippet></ROW><ROW><id>20959441</id><snippet>confirm_email = forms.EmailField("Confirm email", required=True)
</snippet></ROW><ROW><id>20959441</id><snippet>forms.EmailField</snippet></ROW><ROW><id>20959441</id><snippet>Confirm email</snippet></ROW><ROW><id>20959441</id><snippet>max_length</snippet></ROW><ROW><id>20959441</id><snippet>    def __init__(self, max_length=None, min_length=None, *args, **kwargs):
        self.max_length, self.min_length = max_length, min_length
        super(CharField, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>20959448</id><snippet>is_major</snippet></ROW><ROW><id>20959448</id><snippet>from pygal.util import deg, cached_property, compute_scale, is_major
</snippet></ROW><ROW><id>20959448</id><snippet>from pygal.util import (
    is_major, truncate, reverse_text_len, get_texts_box, cut, rad, decorate)
</snippet></ROW><ROW><id>20959448</id><snippet>is_major</snippet></ROW><ROW><id>20959448</id><snippet>import pygal.util
import pygal.graph
import pygal.graph.radar

pygal.util.is_major = my_function
reload(pygal.graph)
reload(pygal.graph.radar)
</snippet></ROW><ROW><id>20959739</id><snippet>recv</snippet></ROW><ROW><id>20959739</id><snippet>''</snippet></ROW><ROW><id>20959739</id><snippet>recv</snippet></ROW><ROW><id>20959739</id><snippet>''</snippet></ROW><ROW><id>20959739</id><snippet>if data:
    # etc.
else:
    stop_flag = False
</snippet></ROW><ROW><id>20959739</id><snippet>recv</snippet></ROW><ROW><id>20960098</id><snippet>activated</snippet></ROW><ROW><id>20960098</id><snippet>import sys
from PyQt4 import QtCore, QtGui

class AppWidget(QtGui.QWidget):
    def __init__(self, parent=None):
        super(AppWidget, self).__init__(parent)
        horizontalLayout = QtGui.QHBoxLayout()
        self.styleLabel = QtGui.QLabel("Set Style:")
        self.styleComboBox = QtGui.QComboBox()
        # add styles from QStyleFactory
        self.styleComboBox.addItems(QtGui.QStyleFactory.keys())
        # find current style
        index = self.styleComboBox.findText(
                    QtGui.qApp.style().objectName(),
                    QtCore.Qt.MatchFixedString)
        # set current style
        self.styleComboBox.setCurrentIndex(index)
        # set style change handler
        self.styleComboBox.activated[str].connect(self.handleStyleChanged)
        horizontalLayout.addWidget(self.styleLabel)
        horizontalLayout.addWidget(self.styleComboBox)
        self.setLayout(horizontalLayout)

    # handler for changing style
    def handleStyleChanged(self, style):
        QtGui.qApp.setStyle(style)

if __name__ == "__main__":

    app = QtGui.QApplication(sys.argv)
    widgetApp = AppWidget()
    widgetApp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20960104</id><snippet>StringMethods.contains</snippet></ROW><ROW><id>20960104</id><snippet>&gt;&gt;&gt; df = pd.read_clipboard(header=None)
&gt;&gt;&gt; df[df[0].str.contains('fb')]
                     0
2  static.ak.fbcdn.net
3  static.ak.fbcdn.net
4  static.ak.fbcdn.net
</snippet></ROW><ROW><id>20960115</id><snippet>geometry</snippet></ROW><ROW><id>20960115</id><snippet>svg.py</snippet></ROW><ROW><id>20960115</id><snippet>from svg.geometry import *
</snippet></ROW><ROW><id>20960115</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>20960219</id><snippet>triplot</snippet></ROW><ROW><id>20960219</id><snippet>mesh</snippet></ROW><ROW><id>20960219</id><snippet>None</snippet></ROW><ROW><id>20960219</id><snippet>triplot</snippet></ROW><ROW><id>20960219</id><snippet>PathPatch</snippet></ROW><ROW><id>20960219</id><snippet>Line2D</snippet></ROW><ROW><id>20960219</id><snippet>ax.patches</snippet></ROW><ROW><id>20960219</id><snippet>ax.lines</snippet></ROW><ROW><id>20960219</id><snippet>ax.lines[-1].remove()
ax.patches[-1].remove()
canvas.draw()
</snippet></ROW><ROW><id>20960219</id><snippet>triplot</snippet></ROW><ROW><id>20960219</id><snippet>line = ax.lines[-1]</snippet></ROW><ROW><id>20960219</id><snippet>triplot</snippet></ROW><ROW><id>20960241</id><snippet>initialize all menu variables

draw menu pix and selections

while a selection has not been made:
    look for key inputs (arrow keys/enter/esc)
        if down arrow pressed:
            move selection box to next option and note that the selection is on the next object down
        if up arrow pressed:
            move selection box to previous option and note that the selection is on the previous object up
        if escape pressed:
            quit the game
        if enter pressed:
            process which option in the menu was highlighted (quit of quit was selected, etc) and tell the while loop to stop

    update the display

set up the game variables and such

main while loop
    run the game and get an A+
</snippet></ROW><ROW><id>20960241</id><snippet>rect.move</snippet></ROW><ROW><id>20960427</id><snippet>DeprecationWarning</snippet></ROW><ROW><id>20960427</id><snippet>warnings.simplefilter('always', DeprecationWarning)
</snippet></ROW><ROW><id>20960427</id><snippet>&gt;&gt;&gt; import warnings
&gt;&gt;&gt; warnings.simplefilter('always', DeprecationWarning)
&gt;&gt;&gt; warnings.warn('test', DeprecationWarning)
/home/guest/.env/bin/ipython:1: DeprecationWarning: test
  #!/home/guest/.env/bin/python
</snippet></ROW><ROW><id>20960566</id><snippet>import numpy as np
points = np.random.rand(10,2)
translation = np.array([180,-90])
scaling = np.array([1024, -768]) / np.array([360,180])
transformed_points = (points + translation) * scaling
</snippet></ROW><ROW><id>20960605</id><snippet>filelocation = "C:/Documents/Folder/"
</snippet></ROW><ROW><id>20960605</id><snippet>\</snippet></ROW><ROW><id>20960605</id><snippet>filelocation = "C:\\Documents\\Folder\\"
</snippet></ROW><ROW><id>20960605</id><snippet>\</snippet></ROW><ROW><id>20960605</id><snippet>\</snippet></ROW><ROW><id>20960620</id><snippet>pydot.Node</snippet></ROW><ROW><id>20960620</id><snippet>pydot</snippet></ROW><ROW><id>20960620</id><snippet>get_nodes()</snippet></ROW><ROW><id>20960620</id><snippet>get_nodes</snippet></ROW><ROW><id>20960620</id><snippet>pydot.Node</snippet></ROW><ROW><id>20960620</id><snippet>get_nodes</snippet></ROW><ROW><id>20960620</id><snippet>Node</snippet></ROW><ROW><id>20960620</id><snippet>obj_dict</snippet></ROW><ROW><id>20960620</id><snippet>obj_dict['nodes']</snippet></ROW><ROW><id>20960620</id><snippet>obj_dict</snippet></ROW><ROW><id>20960701</id><snippet>velocity</snippet></ROW><ROW><id>20960701</id><snippet># bounce off top
self.velocity = (self.velocity[0], -1 * self.velocity[1])
</snippet></ROW><ROW><id>20960719</id><snippet>-socket-reuse-policy</snippet></ROW><ROW><id>20960719</id><snippet>curl -N</snippet></ROW><ROW><id>20960719</id><snippet>-N</snippet></ROW><ROW><id>20960745</id><snippet>req = Unirest.post(path).fields(params).field("data", f);
</snippet></ROW><ROW><id>20960745</id><snippet>req = req.fields(params); 
req = req.field("data", f);
</snippet></ROW><ROW><id>20960898</id><snippet>xmlJob.close</snippet></ROW><ROW><id>20960898</id><snippet>close</snippet></ROW><ROW><id>20960898</id><snippet>&gt;&gt;&gt; f = open("tmp.txt")
&gt;&gt;&gt; f
&lt;open file 'tmp.py', mode 'r' at 0x7f906e8c5ae0&gt;
&gt;&gt;&gt; f.close
&lt;built-in method close of file object at 0x7f906e8c5ae0&gt;
&gt;&gt;&gt; f
&lt;open file 'tmp.py', mode 'r' at 0x7f906e8c5ae0&gt;
&gt;&gt;&gt; f.close()
&gt;&gt;&gt; f
&lt;closed file 'tmp.py', mode 'r' at 0x7f906e8c5ae0&gt;
</snippet></ROW><ROW><id>20960898</id><snippet>f.close</snippet></ROW><ROW><id>20960898</id><snippet>repr</snippet></ROW><ROW><id>20960898</id><snippet>with open(x) as y</snippet></ROW><ROW><id>20960898</id><snippet>with</snippet></ROW><ROW><id>20960917</id><snippet>for pw in curWorkers:
    pw.join()
</snippet></ROW><ROW><id>20960917</id><snippet>.terminate()</snippet></ROW><ROW><id>20961030</id><snippet>raw_input</snippet></ROW><ROW><id>20961030</id><snippet>x%2 != 0</snippet></ROW><ROW><id>20961030</id><snippet>def my_solution():
    numbers = [int(raw_input('Enter a value: ')) for i in range(10)] # &lt;--- ADD CAST TO INT
    odd = [x for x in numbers if x%2 != 0]                               # &lt;---- SURROUND WITH BRACKETS
    if odd:
        return max (odd)
    else:
        print "All values are Even",
print my_solution()
</snippet></ROW><ROW><id>20961030</id><snippet>"a"</snippet></ROW><ROW><id>20961030</id><snippet>def my_solution():
    numbers = []
    for i in range(10):
        while True:
            try:
                numbers.append(int(raw_input('Enter a value: ')))
                break
            except ValueError:
                print "You did not enter a number value, please enter a number"
    odd = [x for x in numbers if x%2 != 0]
    if odd:
        return max (odd)
    else:
        print "All values are Even",
print my_solution()
</snippet></ROW><ROW><id>20961030</id><snippet>while</snippet></ROW><ROW><id>20961030</id><snippet>def my_solution():
    numbers = []
    for i in range(10):
        try:
            numbers.append(int(raw_input('Enter a value: ')))
            break
        except ValueError:
            print "You did not enter a number value, input was skipped."
    odd = [x for x in numbers if x%2 != 0]
    if odd:
        return max (odd)
    else:
        print "All values are Even",
print my_solution()
</snippet></ROW><ROW><id>20961030</id><snippet>while</snippet></ROW><ROW><id>20961030</id><snippet>Exception</snippet></ROW><ROW><id>20961030</id><snippet>Exception</snippet></ROW><ROW><id>20961030</id><snippet>try</snippet></ROW><ROW><id>20961030</id><snippet>catch</snippet></ROW><ROW><id>20961030</id><snippet>try</snippet></ROW><ROW><id>20961030</id><snippet>except</snippet></ROW><ROW><id>20961030</id><snippet>Python</snippet></ROW><ROW><id>20961030</id><snippet>Python</snippet></ROW><ROW><id>20961030</id><snippet>try:
    # Code you're not sure will run
except:
    # Code to run if the code above fails
</snippet></ROW><ROW><id>20961030</id><snippet>try</snippet></ROW><ROW><id>20961030</id><snippet>try</snippet></ROW><ROW><id>20961030</id><snippet>except</snippet></ROW><ROW><id>20961030</id><snippet>Exception</snippet></ROW><ROW><id>20961030</id><snippet>int('a')
</snippet></ROW><ROW><id>20961030</id><snippet>&gt;&gt;&gt; int('a')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: 'a'
</snippet></ROW><ROW><id>20961030</id><snippet>  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
</snippet></ROW><ROW><id>20961030</id><snippet>  File "myFaulyPythonProgram.py", line 55, in &lt;module&gt;
</snippet></ROW><ROW><id>20961030</id><snippet>Exception</snippet></ROW><ROW><id>20961030</id><snippet>Exception</snippet></ROW><ROW><id>20961030</id><snippet>Python</snippet></ROW><ROW><id>20961030</id><snippet>int</snippet></ROW><ROW><id>20961030</id><snippet>built-in</snippet></ROW><ROW><id>20961030</id><snippet>append</snippet></ROW><ROW><id>20961030</id><snippet>numbers.append(int(raw_input("Enter a value: ")))`
</snippet></ROW><ROW><id>20961030</id><snippet>raw_input</snippet></ROW><ROW><id>20961030</id><snippet>int</snippet></ROW><ROW><id>20961030</id><snippet>def my_solution():
    numbers = []
    for i in range(10):
        while True:
            try:
                user_input           = raw_input('Enter a value: ') # &lt;-- Take user input
                converted_user_input = int(user_input)              # &lt;-- Try to convert user input, This 
                                                                    #     is where the ValueError exception could occur
                numbers.append(converted_user_input)                # &lt;-- Add the converted value to the end of our list
                break                                               # &lt;-- This will break out of the while loop and  
                                                                    #     move to the next entry, but only when an exception is not raised
            except ValueError:
                print "You did not enter a number value, please enter a number"
    odd = [x for x in numbers if x%2 != 0]
    if odd:
        return max (odd)
    else:
        print "All values are Even",
print my_solution()
</snippet></ROW><ROW><id>20961030</id><snippet>[do*something+to/EACH_VALUE for EACH_VALUE in SOMETHING_YOU_CAN_ITERATE_THROUGH if CONDITION_IS_TRUE]
</snippet></ROW><ROW><id>20961030</id><snippet>[ c for c in "this is a string" if c not in ["a","e","i","o","u"] ]
</snippet></ROW><ROW><id>20961030</id><snippet>["t","h","s"," ","s"," "," ","s","t","r","n","g"]
</snippet></ROW><ROW><id>20961030</id><snippet>[2*x for x in [1,2,3,4]]
</snippet></ROW><ROW><id>20961030</id><snippet>[2,4,6,8]
</snippet></ROW><ROW><id>20961138</id><snippet>absolute?
</snippet></ROW><ROW><id>20961305</id><snippet>pad</snippet></ROW><ROW><id>20961305</id><snippet>def mymap(*seq, **kwargs):
    pad = kwargs.pop('pad', None)
    if kwargs:
        raise TypeError("mymap() got an unexpected keyword argument '{}'".format(kwargs.keys()[0]))
    print seq
</snippet></ROW><ROW><id>20961305</id><snippet>mymap()</snippet></ROW><ROW><id>20961305</id><snippet>pad</snippet></ROW><ROW><id>20961305</id><snippet>None</snippet></ROW><ROW><id>20961305</id><snippet>seq</snippet></ROW><ROW><id>20961502</id><snippet>/usr/local/sbin/djshell</snippet></ROW><ROW><id>20961502</id><snippet>#!/bin/sh
cd /path/to/project/
/path/to/python /path/to/project/manage.py shell #or "dbshell" or custom interactive task
</snippet></ROW><ROW><id>20961502</id><snippet>useradd -s /usr/local/sbin/djshell -g www-data [more options] superdjangoadmin
</snippet></ROW><ROW><id>20961502</id><snippet>from app.models import *</snippet></ROW><ROW><id>20961502</id><snippet>#imports
command = input()#expecting "filter(...).last()" or so
cleanup(command) #remove ";", "eval()", escape parameter values, strip
command = "MyModel.objects." + command
try:
    result = eval(command)
    prettyprint(result)

except Exception as e:
    print get_traceback()        
    print e.message
</snippet></ROW><ROW><id>20962070</id><snippet>%ls   
</snippet></ROW><ROW><id>20962070</id><snippet>%run     
</snippet></ROW><ROW><id>20962070</id><snippet>%paste
</snippet></ROW><ROW><id>20962070</id><snippet>from matplotlib import pyplot as PLT
</snippet></ROW><ROW><id>20962070</id><snippet>%pyplot
</snippet></ROW><ROW><id>20962070</id><snippet>from pylab import *

x, y = arange(10), cos(x/2)
plot(x, y)
show()
</snippet></ROW><ROW><id>20962070</id><snippet>from matplotlib import pyplot as PLT
import numpy as NP

x, y = NP.arange(10), NP.cos(x/2)
fig = PLT.figure()
ax1 = fig.add_subplot(111)
ax1.plot(x, y)
PLT.show()
</snippet></ROW><ROW><id>20962117</id><snippet>import wx

class MainWindow(wx.Frame):
    def __init__(self,parent,id,title):
        wx.Frame.__init__(self,parent,wx.ID_ANY,title,size = (400,200), style = wx.DEFAULT_FRAME_STYLE | wx.NO_FULL_REPAINT_ON_RESIZE)
        self.control = wx.TextCtrl(self,1,style = wx.TE_MULTILINE)
        self.Show(True)

app = wx.PySimpleApp()
frame = MainWindow(None,-1,"Small Editor")
app.MainLoop()
</snippet></ROW><ROW><id>20962384</id><snippet>import pyparsing as pp

src0 = '''
"Hello
 World
 Goodbye and go"
'''

pat = pp.QuotedString('"', multiline=True)
print pat.parseString(src0)
</snippet></ROW><ROW><id>20962384</id><snippet>['Hello\n World\n Goodbye and go']</snippet></ROW><ROW><id>20962384</id><snippet>import pyparsing as pp

src1 = '''
Test("This is a long string")
'''

src2 = '''
Test("This is a long"
    "string")
'''

src3 = '''

Test("This is a long" \\
     "string")
'''

_lp = pp.Suppress('(')
_rp = pp.Suppress(')')
_str = pp.QuotedString('"')
_slash = pp.Suppress(pp.Optional("\\"))
_multiline_str = pp.Combine(pp.OneOrMore(_str + _slash), adjacent=False)

func = pp.Word(pp.alphas)

function = func + _lp + _multiline_str + _rp

print src1
print function.parseString(src1)
print '-------------------------'
print src2
print function.parseString(src2)
print '-------------------------'
print src3
print function.parseString(src3)
</snippet></ROW><ROW><id>20962384</id><snippet>Test("This is a long string")

['Test', 'This is a long string']
-------------------------

Test("This is a long"
    "string")

['Test', 'This is a longstring']
-------------------------

Test("This is a long" \
     "string")

['Test', 'This is a longstring']
</snippet></ROW><ROW><id>20962384</id><snippet>Combine</snippet></ROW><ROW><id>20962434</id><snippet>csv</snippet></ROW><ROW><id>20962434</id><snippet>sort</snippet></ROW><ROW><id>20962434</id><snippet>key=itemgetter(colnum)</snippet></ROW><ROW><id>20962434</id><snippet>csv</snippet></ROW><ROW><id>20962434</id><snippet>min</snippet></ROW><ROW><id>20962434</id><snippet>heapq.merge</snippet></ROW><ROW><id>20962434</id><snippet>LC_COLLATE</snippet></ROW><ROW><id>20962434</id><snippet>sort</snippet></ROW><ROW><id>20962434</id><snippet>sort -t, -k ${colnum},${colnum} -i infile.csv -o outfile.csv
</snippet></ROW><ROW><id>20962434</id><snippet>sed</snippet></ROW><ROW><id>20962434</id><snippet>sort</snippet></ROW><ROW><id>20962596</id><snippet>timeit.timeit("""if '1' in s: s = s.replace('1','5')""", setup="s = 'hi 1 2 3'")
</snippet></ROW><ROW><id>20962596</id><snippet>setup</snippet></ROW><ROW><id>20962596</id><snippet>s</snippet></ROW><ROW><id>20962596</id><snippet>hi 5 2 3</snippet></ROW><ROW><id>20962596</id><snippet>in</snippet></ROW><ROW><id>20962596</id><snippet>False</snippet></ROW><ROW><id>20962596</id><snippet>timeit.timeit("""if '1' in s: s = s.replace('1','5'); print(s)""", setup="s = 'hi 1 2 3'")
</snippet></ROW><ROW><id>20962596</id><snippet>hi 5 2 3</snippet></ROW><ROW><id>20962596</id><snippet>print</snippet></ROW><ROW><id>20962596</id><snippet>if</snippet></ROW><ROW><id>20962596</id><snippet>hi 5 2 3</snippet></ROW><ROW><id>20962596</id><snippet>timeit.timeit("""s = s.replace("1","5"); print(s)""", setup="s = 'hi 1 2 3'")
</snippet></ROW><ROW><id>20962596</id><snippet>if</snippet></ROW><ROW><id>20962596</id><snippet>if</snippet></ROW><ROW><id>20962596</id><snippet>replace</snippet></ROW><ROW><id>20962596</id><snippet>replace</snippet></ROW><ROW><id>20962596</id><snippet>s</snippet></ROW><ROW><id>20962596</id><snippet>&gt;&gt;&gt; timeit.timeit("""if '1' in s: s.replace('1','5')""", setup="s = 'hi 1 2 3'"
0.3221409016812231
&gt;&gt;&gt; timeit.timeit("""s.replace('1','5')""", setup="s = 'hi 1 2 3'")
0.28558505721252914
</snippet></ROW><ROW><id>20962596</id><snippet>if</snippet></ROW><ROW><id>20962596</id><snippet>if</snippet></ROW><ROW><id>20962596</id><snippet>in</snippet></ROW><ROW><id>20962596</id><snippet>in</snippet></ROW><ROW><id>20962651</id><snippet>self.int_label = Label(self, text="Interval Name")
...
self.int_time_label = Label(self, text="Time (HH:MM:SS)")
</snippet></ROW><ROW><id>20962651</id><snippet>self.int_label = Label(...)
self.int_time_label = Label(...)
self.box1 = Entry(...)
...
self.int_label.grid(...)
self.int_time_label.grid(...)
self.box1.grid(...)
...
</snippet></ROW><ROW><id>20962767</id><snippet>GetRate</snippet></ROW><ROW><id>20962767</id><snippet>from ctypes import *
from ctypes.wintypes import *

GetRate = windll.YOURLIB.GetRate
GetRate.restype = c_int
GetRate.argtypes = [HANDLE, POINTER(c_int)]

# now call GetRate as something like:
#
# hDev = ... # handle
# Data = c_int()
#
# GetRate(hDev, byref(Data)) # GetRate(hDev, &amp;Data)
# print Data
</snippet></ROW><ROW><id>20962767</id><snippet>from ctypes import *
from ctypes.wintypes import *

def GetRate(hDev, pDate):
    # Your implementation
    return 0

# you'll need GETRATE to pass it in the argtypes to the target function
GETRATE = WINFUNCTYPE(c_int, HANDLE, POINTER(c_int))
pGetRate = GETRATE(GetRate)

# now you can pass pGetRate as a callback to another function
</snippet></ROW><ROW><id>20962871</id><snippet>itertools.product</snippet></ROW><ROW><id>20962871</id><snippet>import itertools

for numbers in itertools.product([0, 1], repeat=3):
    print(numbers)
</snippet></ROW><ROW><id>20962871</id><snippet>(0, 0, 0)
(0, 0, 1)
(0, 1, 0)
(0, 1, 1)
(1, 0, 0)
(1, 0, 1)
(1, 1, 0)
(1, 1, 1)
</snippet></ROW><ROW><id>20963119</id><snippet>from PyQt4 import QtCore, QtGui
import sys

app = QtGui.QApplication([])
table = QtGui.QTableWidget(6,2)

tableItem = QtGui.QLineEdit()
tableItem.setText( "Testing" )

def onTextChanged(text):
    print 'onTextChanged', text
    pass

tableItem.textChanged.connect(onTextChanged)
table.setCellWidget(0, 1, tableItem )
table.show()
app.exec_()
</snippet></ROW><ROW><id>20963490</id><snippet>I am a farmer
Sometimes, I farm chickens
I also have a cow
I like to eat hamburger meat
But not lamb
</snippet></ROW><ROW><id>20963490</id><snippet>"cow"</snippet></ROW><ROW><id>20963490</id><snippet>"hamburger"</snippet></ROW><ROW><id>20963490</id><snippet>"meat"</snippet></ROW><ROW><id>20963490</id><snippet>afile.html</snippet></ROW><ROW><id>20963490</id><snippet>word_list = ['hamburger', 'cow', 'meat']
with open('afile.html', encoding='utf-8-sig') as f:
    lines = f.readlines()
for line in lines:
    for word in word_list:
        if word in line:
            print(line)
            break
</snippet></ROW><ROW><id>20963490</id><snippet>I also have a cow

I like to eat hamburger meat
​
</snippet></ROW><ROW><id>20963490</id><snippet>I LIKE COW</snippet></ROW><ROW><id>20963490</id><snippet>"COW"</snippet></ROW><ROW><id>20963490</id><snippet>"cow"</snippet></ROW><ROW><id>20963490</id><snippet>"I like cows"</snippet></ROW><ROW><id>20963490</id><snippet>"cow"</snippet></ROW><ROW><id>20963880</id><snippet>for item in lst:
    add = int(lst[item])
</snippet></ROW><ROW><id>20963880</id><snippet>for item in lst</snippet></ROW><ROW><id>20963880</id><snippet>item</snippet></ROW><ROW><id>20963880</id><snippet>item</snippet></ROW><ROW><id>20963880</id><snippet>for item in lst:
    add = int(item)
</snippet></ROW><ROW><id>20963880</id><snippet>for item in lst:
    add = item
</snippet></ROW><ROW><id>20963880</id><snippet>for item in lst:
    total+= item
</snippet></ROW><ROW><id>20963880</id><snippet>sum</snippet></ROW><ROW><id>20963880</id><snippet>total = sum(lst)
</snippet></ROW><ROW><id>20963880</id><snippet>total</snippet></ROW><ROW><id>20963880</id><snippet>def average(lst):
    l=len(lst)
    total = sum(lst)
    return total/l
</snippet></ROW><ROW><id>20963880</id><snippet>def average(lst):
    return sum(lst)/len(lst)
</snippet></ROW><ROW><id>20963945</id><snippet>for tile in tiles:
  if camera.viewport.contains(tile.rect):
    tile.draw()
</snippet></ROW><ROW><id>20964400</id><snippet>invokescript( "Script1.sh" ) // Calling Function

function invokescript( shfile ):  // Function Defenition
     os.system("/root/Saranya/Script1.sh")
     return;
</snippet></ROW><ROW><id>20964400</id><snippet>invokescript( "Script1.sh" ) // Calling Function

function invokescript( shfile ):  // Function Defenition
     os.system(shfile)
     return;
</snippet></ROW><ROW><id>20964428</id><snippet>def testfunction():
    try:
        good = myfunction()  # or `return myfunction()` if the case is actually this simple
    except (ExceptionOne, ExceptionTwo, ExceptionThree) as err:
        error = 'Error %s' % err.__class__.__name__
        return error
    return good
</snippet></ROW><ROW><id>20964782</id><snippet>Enter</snippet></ROW><ROW><id>20964782</id><snippet>topLevel</snippet></ROW><ROW><id>20964782</id><snippet>global</snippet></ROW><ROW><id>20964782</id><snippet># ... &lt;snip&gt;
def Enter():
    bugtitle = bugtitleentry
    bugemail = bugemailentry
# &lt;/snip&gt; ...
</snippet></ROW><ROW><id>20964782</id><snippet>.get()</snippet></ROW><ROW><id>20964782</id><snippet>Entry</snippet></ROW><ROW><id>20964782</id><snippet>bugwrite.write(bugtitle.get() + "\n")  # and file.write only takes 1 argument!
</snippet></ROW><ROW><id>20964850</id><snippet> class TranslationAdmin(admin.ModelAdmin):
        ...

        def get_readonly_fields(self, request, obj=None):
            if obj.certainfield == something:
                return ('field1', 'field2')
            else:
                return super(TranslationAdmin, self).get_readonly_fields(request, obj)
</snippet></ROW><ROW><id>20964880</id><snippet>&gt;&gt;&gt; datetime.strptime(start_date, '%Y-%m-%d')
datetime.datetime(2013, 12, 1, 0, 0)
</snippet></ROW><ROW><id>20964880</id><snippet>&gt;&gt;&gt; datetime.strptime(start_date, '%Y-%m-%d').date()
datetime.date(2013, 12, 1)
</snippet></ROW><ROW><id>20964880</id><snippet>%M</snippet></ROW><ROW><id>20964880</id><snippet>%m</snippet></ROW><ROW><id>20964880</id><snippet>strptime</snippet></ROW><ROW><id>20964880</id><snippet>from datetime import datetime</snippet></ROW><ROW><id>20964882</id><snippet>CREATE UNIQUE INDEX IF NOT EXISTS ...</snippet></ROW><ROW><id>20964882</id><snippet>CREATE TABLE IF NOT EXISTS ... (..., UNIQUE(col1, col2, col3), ...)</snippet></ROW><ROW><id>20964890</id><snippet>TwitterStream</snippet></ROW><ROW><id>20964890</id><snippet>auth</snippet></ROW><ROW><id>20964890</id><snippet>TwiterStream(auth=auth)</snippet></ROW><ROW><id>20964890</id><snippet>TwitterStream(auth=my_auth_variable)</snippet></ROW><ROW><id>20964890</id><snippet>TwitterStream</snippet></ROW><ROW><id>20964890</id><snippet>__init__</snippet></ROW><ROW><id>20964890</id><snippet>domain</snippet></ROW><ROW><id>20964995</id><snippet>GUI.DISABLED</snippet></ROW><ROW><id>20964995</id><snippet>DISABLED</snippet></ROW><ROW><id>20964995</id><snippet>tkinter</snippet></ROW><ROW><id>20964995</id><snippet>import tkinter as GUI
</snippet></ROW><ROW><id>20964995</id><snippet>N</snippet></ROW><ROW><id>20964995</id><snippet>E</snippet></ROW><ROW><id>20964995</id><snippet>W</snippet></ROW><ROW><id>20964995</id><snippet>S</snippet></ROW><ROW><id>20964995</id><snippet>NORMAL</snippet></ROW><ROW><id>20964995</id><snippet>END</snippet></ROW><ROW><id>20964995</id><snippet>GUI.N</snippet></ROW><ROW><id>20964995</id><snippet>GUI.E</snippet></ROW><ROW><id>20965090</id><snippet>df['cum_sum'] = df.val1.cumsum()
df['cum_perc'] = 100*df.cum_sum/df.val1.sum()
</snippet></ROW><ROW><id>20965090</id><snippet>df</snippet></ROW><ROW><id>20965090</id><snippet>df</snippet></ROW><ROW><id>20965394</id><snippet>def confirm(expression):
    if not expression:
        raise AssertionError
</snippet></ROW><ROW><id>20965394</id><snippet>assert whatever()</snippet></ROW><ROW><id>20965394</id><snippet>confirm(whatever())</snippet></ROW><ROW><id>20965394</id><snippet>def die():
    raise Exception()

whatever() or die()
</snippet></ROW><ROW><id>20965394</id><snippet>whatever()</snippet></ROW><ROW><id>20965394</id><snippet>True</snippet></ROW><ROW><id>20965394</id><snippet>die()</snippet></ROW><ROW><id>20965394</id><snippet>whatever()</snippet></ROW><ROW><id>20965394</id><snippet>False</snippet></ROW><ROW><id>20965394</id><snippet>die</snippet></ROW><ROW><id>20965394</id><snippet>d</snippet></ROW><ROW><id>20966097</id><snippet>si = subprocess.STARTUPINFO()
si.dwFlags=subprocess.STARTF_USESHOWWINDOW
subprocess.Popen(["application.exe"], env=os.environ.copy(), close_fds=True, startupinfo=si)
</snippet></ROW><ROW><id>20966097</id><snippet>Popen</snippet></ROW><ROW><id>20966097</id><snippet>STARTUPINFO</snippet></ROW><ROW><id>20966097</id><snippet>si</snippet></ROW><ROW><id>20966097</id><snippet>si.wShowWindow</snippet></ROW><ROW><id>20966097</id><snippet>SW_HIDE</snippet></ROW><ROW><id>20966169</id><snippet>class ElectrodeStructure(ElectrodePair):
    [...]

    def define_elements(self, elems):
        electrodePair = ElectrodePair.__init__(self)
        [...]
</snippet></ROW><ROW><id>20966169</id><snippet>ElectrodeStructure</snippet></ROW><ROW><id>20966169</id><snippet>main()</snippet></ROW><ROW><id>20966169</id><snippet>__init__</snippet></ROW><ROW><id>20966169</id><snippet>ElectrodeStructure</snippet></ROW><ROW><id>20966169</id><snippet>__init__</snippet></ROW><ROW><id>20966169</id><snippet>amount</snippet></ROW><ROW><id>20966169</id><snippet>define_elements</snippet></ROW><ROW><id>20966169</id><snippet>__init__</snippet></ROW><ROW><id>20966169</id><snippet>        electrodePair = ElectrodePair.__init__(self)
</snippet></ROW><ROW><id>20966169</id><snippet>None</snippet></ROW><ROW><id>20966169</id><snippet>ElectrodePair.__init__(self)</snippet></ROW><ROW><id>20966169</id><snippet>electrodePair</snippet></ROW><ROW><id>20966169</id><snippet>        electrodePair = ElectrodePair(amount=1, etc.)
</snippet></ROW><ROW><id>20966169</id><snippet>__init__</snippet></ROW><ROW><id>20966169</id><snippet>ElectrodePair</snippet></ROW><ROW><id>20966240</id><snippet>json.dumps</snippet></ROW><ROW><id>20966240</id><snippet>import json
jsonstr = json.dumps({"script": """\
#!/bin/bash
set -e

readonly PRIMARY=/tech01/primary
readonly SECONDARY=/tech02/secondary
readonly LOCATION=(machineA machineB)
readonly MAPPED_LOCATION=/bat/data/snapshot
HOSTNAME=$hostname

dir1=$(ssh -o "StrictHostKeyChecking no" david@${LOCATION[0]} ls -dt1 "$MAPPED_LOCATION"/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9] | head -n1)
dir2=$(ssh -o "StrictHostKeyChecking no" david@${LOCATION[1]} ls -dt1 "$MAPPED_LOCATION"/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9] | head -n1)

echo $dir1
echo $dir2

length1=$(ssh -o "StrictHostKeyChecking no" david@${LOCATION[0]} "ls '$dir1' | wc -l")
length2=$(ssh -o "StrictHostKeyChecking no" david@${LOCATION[1]} "ls '$dir2' | wc -l")

echo $length1
echo $length2

if [ "$dir1" = "$dir2" ] &amp;&amp; [ "$length1" -gt 0 ] &amp;&amp; [ "$length2" -gt 0 ]
then
    rm -rf $PRIMARY/*
    rm -rf $SECONDARY/*
    for el in $primary_partition
    do
        scp david@${LOCATION[0]}:$dir1/weekly_8880_"$el"_5.data $PRIMARY/. || scp david@${LOCATION[1]}:$dir2/weekly_8880_"$el"_5.data $PRIMARY/.
    done
fi"""})
</snippet></ROW><ROW><id>20966465</id><snippet>#!/usr/bin/env python

import sys, os
import wx
import wx.lib.scrolledpanel as scrolled

class ImgPanel(scrolled.ScrolledPanel):
    def __init__(self, parent):
        super(ImgPanel, self).__init__(parent, 
                                       style = wx.SUNKEN_BORDER)

        self.bitmap=wx.StaticBitmap(parent=self)
        image = wx.Bitmap('image.jpg')
        self.bitmap.SetBitmap(image)

        self.imgSizer = wx.BoxSizer(wx.VERTICAL)        
        self.imgSizer.Add(self.bitmap, 1, wx.EXPAND)
        self.SetSizer(self.imgSizer)

        self.SetAutoLayout(1)
        self.SetupScrolling()    
        self.Bind(wx.EVT_PAINT, self.OnPaint)
        self.bitmap.Bind(wx.EVT_MOTION, self.OnMove)
        self.bitmap.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)
        self.bitmap.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)
        self.IsRectReady = False
        self.newRectPara=[0,0,0,0]

class  WinFrame(wx.Frame):
    def __init__(self, parent, title, width, height):
        super(WinFrame, self).__init__(parent, 
                                       title=title,
                                       size=(width, height))

        self.imgPanel = ImgPanel(self)
        self.frameSizer = wx.BoxSizer(wx.HORIZONTAL)        
        self.frameSizer.Add(self.imgPanel, 1, wx.EXPAND)        
        self.SetAutoLayout(True)
        self.SetSizer(self.frameSizer)
        self.Layout()      

        self.Centre()
        self.Show(True)        


class MyApp(wx.App):
    def __init__(self, width, height):
        super(MyApp, self).__init__(0)

        self.width = width
        self.height = height

    def createFrame(self):
        self.frame = WinFrame(None, "test", self.width, self.height)
        self.SetTopWindow(self.frame)    

def main():
    app = MyApp(640, 480)
    app.createFrame()
    app.MainLoop()

if "__main__" == __name__ :
    main()
</snippet></ROW><ROW><id>20966560</id><snippet>integer</snippet></ROW><ROW><id>20966560</id><snippet>int</snippet></ROW><ROW><id>20966560</id><snippet>&gt;&gt;&gt; integer('1')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'integer' is not defined
&gt;&gt;&gt; int('1')
1
</snippet></ROW><ROW><id>20966636</id><snippet>print()</snippet></ROW><ROW><id>20966636</id><snippet>print("A chance to in a jack\"ass\"pot! Enter a number between 1 and 10!"
#   -^ opens but ----------------------------------------- no closing ---^
</snippet></ROW><ROW><id>20966636</id><snippet>tries</snippet></ROW><ROW><id>20966636</id><snippet>input()</snippet></ROW><ROW><id>20966636</id><snippet>if val == 7:
</snippet></ROW><ROW><id>20966636</id><snippet>val</snippet></ROW><ROW><id>20966636</id><snippet>if val == '7':
</snippet></ROW><ROW><id>20966636</id><snippet>val</snippet></ROW><ROW><id>20966636</id><snippet>val = int(input("Enter the number: "))
</snippet></ROW><ROW><id>20966685</id><snippet>resample</snippet></ROW><ROW><id>20966685</id><snippet>df['Date'] = pd.to_datetime(df['Date'])
</snippet></ROW><ROW><id>20966685</id><snippet>['Code', 'ID']</snippet></ROW><ROW><id>20966685</id><snippet>resample</snippet></ROW><ROW><id>20966685</id><snippet>df.set_index('Date').groupby(['Code', 'ID']).resample('M', 'sum')
</snippet></ROW><ROW><id>20966685</id><snippet>In [6]: df = pd.DataFrame({'Code':100, 'ID':200, 'Date':pd.date_range("2012-01-01", periods=10, freq='10D'), 'Sum':np.random.randint(10, size=10)})

In [7]: df
Out[7]:
   Code                Date   ID  Sum
0   100 2012-01-01 00:00:00  200    1
1   100 2012-01-11 00:00:00  200    9
2   100 2012-01-21 00:00:00  200    5
3   100 2012-01-31 00:00:00  200    9
4   100 2012-02-10 00:00:00  200    8
5   100 2012-02-20 00:00:00  200    3
6   100 2012-03-01 00:00:00  200    9
7   100 2012-03-11 00:00:00  200    8
8   100 2012-03-21 00:00:00  200    3
9   100 2012-03-31 00:00:00  200    5

In [8]: df.set_index('Date').groupby(['Code', 'ID']).resample('M', 'sum')
Out[8]:
                     Code   ID  Sum
Code ID  Date
100  200 2012-01-31   400  800   24
         2012-02-29   200  400   11
         2012-03-31   400  800   25
</snippet></ROW><ROW><id>20966685</id><snippet>fig, ax = plt.subplots()

for name, group in df.set_index('Date').groupby(['Code', 'ID']):
    group['Sum'].resample('M', 'sum').plot(ax=ax, label=name)
</snippet></ROW><ROW><id>20966685</id><snippet>df2 = df.set_index('Date').groupby(['Code', 'ID']).resample('M', 'sum')
df2['Sum'].unstack([0,1]).plot()
</snippet></ROW><ROW><id>20966893</id><snippet>url()</snippet></ROW><ROW><id>20966893</id><snippet>urlpatterns = patterns('',
    url(r'^time/$', current_time),
    url(r'^what/$', what),
    url(r'^hello/([a-zA-Z0-9]+)', hello),
)
</snippet></ROW><ROW><id>20966893</id><snippet>what</snippet></ROW><ROW><id>20966893</id><snippet>url()</snippet></ROW><ROW><id>20966893</id><snippet>&lt;modulename&gt;.&lt;viewname&gt;</snippet></ROW><ROW><id>20966893</id><snippet>patterns()</snippet></ROW><ROW><id>20966893</id><snippet>urlpatterns = patterns('',
    url(r'^time/$', 'hello_django.views.current_time'),
    url(r'^what/$', 'hello_django.views.what'),
    url(r'^hello/([a-zA-Z0-9]+)', 'hello_django.views.hello'),
)
</snippet></ROW><ROW><id>20966893</id><snippet>urlpatterns = patterns('hello_django.views',
    url(r'^time/$', 'current_time'),
    url(r'^what/$', 'what'),
    url(r'^hello/([a-zA-Z0-9]+)', 'hello'),
)
</snippet></ROW><ROW><id>20966951</id><snippet>def run():
    while True:
        item = work_queue.get()
        work(item)
        work_queue.task_done()
</snippet></ROW><ROW><id>20966951</id><snippet>queue.unfinished_tasks</snippet></ROW><ROW><id>20967024</id><snippet>/\/\/ address,.*/</snippet></ROW><ROW><id>20967024</id><snippet>/           : delimiter
\/\/        : two slashes
 address,   : literally ' address,'
.*          : any char 0 or more times
/           : delimiter
</snippet></ROW><ROW><id>20967024</id><snippet>$_</snippet></ROW><ROW><id>20967024</id><snippet>// address, whatever you want.....</snippet></ROW><ROW><id>20967400</id><snippet>int main(int argc, char *argv[]) {

  /* Setup */
  Py_NoSiteFlag = 1; // &lt;--- This
  Py_SetProgramName(argv[0]);
  Py_Initialize();

  /* Run the 'main' module */
  int rtn = Py_Main(argc, argv);
  Py_Finalize();

  return rtn;
}
</snippet></ROW><ROW><id>20967400</id><snippet>&gt;&gt;&gt; import os;
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ImportError: No module named os
</snippet></ROW><ROW><id>20967674</id><snippet>python setup.py develop</snippet></ROW><ROW><id>20967674</id><snippet>install</snippet></ROW><ROW><id>20967726</id><snippet>class MissingIngredient(Exception):
    pass

def add_ingredient(name):
    print 'add_ingredient',name
    raise MissingIngredient

try:
    add_ingredient(1)
    add_ingredient(2)
    add_ingredient(3)
except MissingIngredient:
    print 'you are missing ingredients'
</snippet></ROW><ROW><id>20967726</id><snippet>add_ingredient 1
you are missing ingredients
</snippet></ROW><ROW><id>20967940</id><snippet>def check_brackets(s):
    counter = 0
    for chr in s:
        if chr == "(":
            counter += 1
        elif chr == ")":
            counter -= 1
            if counter &lt; 0:
                return False
    return counter == 0
</snippet></ROW><ROW><id>20967940</id><snippet>BRACKETS = ("()", "[]", "{}")
def check_brackets(s):
    counter = []
    for chr in s:
        for br in BRACKETS:
            open = br[0]
            close = br[1]
            if chr == open:
                counter.append(open)
                break
            elif chr == close:
                try:
                    last_br = counter.pop()
                except IndexError:
                    return False
                if last_br != open: # ensures that the end matches the beginnig
                    return False
    return not bool(counter)
</snippet></ROW><ROW><id>20967940</id><snippet>([)]</snippet></ROW><ROW><id>20968035</id><snippet>Disposition-Notification-To: &lt;email&gt;</snippet></ROW><ROW><id>20968035</id><snippet>Return-Receipt-To: &lt;email&gt;</snippet></ROW><ROW><id>20968092</id><snippet>kwargs</snippet></ROW><ROW><id>20968092</id><snippet>__init__</snippet></ROW><ROW><id>20968092</id><snippet>pop</snippet></ROW><ROW><id>20968092</id><snippet>class NotebookPage(wx.Panel):
    def __init__(self, *args, **kwargs):
        page_name = kwargs.pop('page_name', None)
        wx.Panel.__init__(self, *args, **kwargs)
        if page_name:
            # somehow using page_name here
</snippet></ROW><ROW><id>20968497</id><snippet>import numpy as np

def func(filename):
    with open(filename) as fp:
        line = next(fp).split(',')
        yield ','.join(line[1:])
        for line in fp:
            yield line[1:]

print np.genfromtxt(func('myfile'), delimiter=',')
</snippet></ROW><ROW><id>20968497</id><snippet>myfile</snippet></ROW><ROW><id>20968497</id><snippet>"myfile", 1.0, 2.0, 3.0
,4.0, 5.0, 6.0
</snippet></ROW><ROW><id>20968695</id><snippet>heapq.nlargest</snippet></ROW><ROW><id>20968695</id><snippet>from heapq import nlargest
top_30 = nlargest(30, my_list, key=lambda x: x['y_time'])
</snippet></ROW><ROW><id>20968695</id><snippet>O(N)</snippet></ROW><ROW><id>20968695</id><snippet>N</snippet></ROW><ROW><id>20968695</id><snippet>M</snippet></ROW><ROW><id>20968695</id><snippet>O(NlogN)</snippet></ROW><ROW><id>20968695</id><snippet>timeit</snippet></ROW><ROW><id>20968695</id><snippet>z_msg</snippet></ROW><ROW><id>20968695</id><snippet>top_30</snippet></ROW><ROW><id>20968695</id><snippet>z_msg = [item['z_msg'] for item in top_30]
</snippet></ROW><ROW><id>20968695</id><snippet>N</snippet></ROW><ROW><id>20968695</id><snippet>my_list</snippet></ROW><ROW><id>20968695</id><snippet>M</snippet></ROW><ROW><id>20968896</id><snippet>import cv2
import numpy as np

def onTrackbarChange(trackbarValue):
    pass

cv2.namedWindow('ctrl') 
cv2.createTrackbar( 'thresh', 'ctrl', 128, 255, onTrackbarChange )  
c = cv2.VideoCapture(0)
while(1):
    im = c.read()[1]
    thresh=cv2.threshold(cv2.cvtColor(im,cv2.COLOR_BGR2GRAY), 
        cv2.getTrackbarPos('thresh','ctrl'),
        255,cv2.THRESH_BINARY)[1]   
    cv2.imshow('thresh',thresh)
    if cv2.waitKey(1)==27:
        exit(0)
</snippet></ROW><ROW><id>20968943</id><snippet>for word in words:
    if word[0] == word[-1]:
        c += 1
    print c
</snippet></ROW><ROW><id>20968943</id><snippet>for word in words</snippet></ROW><ROW><id>20968943</id><snippet>words</snippet></ROW><ROW><id>20968943</id><snippet>enumerate</snippet></ROW><ROW><id>20968943</id><snippet>for idx, word in enumerate(words):
    print idx, word
</snippet></ROW><ROW><id>20968943</id><snippet>0, 'aba'
1, 'xyz'
etc.
</snippet></ROW><ROW><id>20968943</id><snippet>-1</snippet></ROW><ROW><id>20968943</id><snippet>word[-1]</snippet></ROW><ROW><id>20968943</id><snippet>word[-2]</snippet></ROW><ROW><id>20968943</id><snippet>c = sum(1 for word in words if word[0] == word[-1])
</snippet></ROW><ROW><id>20968953</id><snippet>for (x, y) in [1, √limit] × [1, √limit]</snippet></ROW><ROW><id>20968953</id><snippet>for x in itx:
    for y in ity:
</snippet></ROW><ROW><id>20968953</id><snippet>itertools.product()</snippet></ROW><ROW><id>20968953</id><snippet>from itertools import product

for x, y in product(itx, ity):
</snippet></ROW><ROW><id>20968953</id><snippet>.next()</snippet></ROW><ROW><id>20968953</id><snippet>itx.next()</snippet></ROW><ROW><id>20968953</id><snippet>ity.next()</snippet></ROW><ROW><id>20968953</id><snippet>for</snippet></ROW><ROW><id>20969279</id><snippet>s = """&lt;ExportData name="ExportData" hwId="0120"&gt;
  &lt;input name="Ethernet" type="Ethernet" id="100" numTs="0" /&gt;
  &lt;input name="ASI" type="ASI" id="0" numTs="1" &gt;
    &lt;setup name="ASI Input 1" id="1" description="ASI" tsSync="no" currentlyMonitored="true" /&gt;
  &lt;/input&gt;
  &lt;input name="FD1" type="FD" id="1" numTs="1" &gt;
    &lt;setup name="NewPreset1" id="1" description="642 MHz" /&gt;
  &lt;/input&gt;
  &lt;input name="FD2" type="FD" id="2" numTs="0" /&gt;
&lt;/ExportData&gt;"""

tree = ET.fromstring(s)
for node in tree.iter('input'):
  child = next((c for c in node if c.tag == 'setup'), None)
  if child is None: 
    continue
  else:
    print node, child
</snippet></ROW><ROW><id>20969279</id><snippet>&lt;Element 'input' at 0x1047541d0&gt; &lt;Element 'setup' at 0x104754210&gt;
&lt;Element 'input' at 0x104754250&gt; &lt;Element 'setup' at 0x104754290&gt;
</snippet></ROW><ROW><id>20969279</id><snippet>node.attrib</snippet></ROW><ROW><id>20969279</id><snippet>child.attrib</snippet></ROW><ROW><id>20969770</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; s = 'foo bar (baz)'
&gt;&gt;&gt; re.sub(r'(?&lt;=\().*?(?=\))', lambda m: '*'*len(m.group()), s)
'foo bar (***)'
</snippet></ROW><ROW><id>20970087</id><snippet>**</snippet></ROW><ROW><id>20970087</id><snippet>&gt;&gt;&gt; dis.dis('7. ** i')
  1           0 LOAD_CONST               0 (7.0) 
              3 LOAD_NAME                0 (i) 
              6 BINARY_POWER         
              7 RETURN_VALUE         
&gt;&gt;&gt; dis.dis('pow(7., i)')
  1           0 LOAD_NAME                0 (pow) 
              3 LOAD_CONST               0 (7.0) 
              6 LOAD_NAME                1 (i) 
              9 CALL_FUNCTION            2 (2 positional, 0 keyword pair) 
             12 RETURN_VALUE         
&gt;&gt;&gt; dis.dis('math.pow(7, i)')
  1           0 LOAD_NAME                0 (math) 
              3 LOAD_ATTR                1 (pow) 
              6 LOAD_CONST               0 (7) 
              9 LOAD_NAME                2 (i) 
             12 CALL_FUNCTION            2 (2 positional, 0 keyword pair) 
             15 RETURN_VALUE         
</snippet></ROW><ROW><id>20970087</id><snippet>i</snippet></ROW><ROW><id>20970087</id><snippet>7. ** 5</snippet></ROW><ROW><id>20970087</id><snippet>&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; timeit('7. ** i', setup='i = 5')
0.2894785532627111
&gt;&gt;&gt; timeit('pow(7., i)', setup='i = 5')
0.41218495570683444
&gt;&gt;&gt; timeit('math.pow(7, i)', setup='import math; i = 5')
0.5655053168791255
</snippet></ROW><ROW><id>20970087</id><snippet>pow</snippet></ROW><ROW><id>20970087</id><snippet>math.pow</snippet></ROW><ROW><id>20970087</id><snippet>pow</snippet></ROW><ROW><id>20970087</id><snippet>timeit</snippet></ROW><ROW><id>20970087</id><snippet>math.pow</snippet></ROW><ROW><id>20970087</id><snippet>**</snippet></ROW><ROW><id>20970087</id><snippet>math.pow()</snippet></ROW><ROW><id>20970087</id><snippet>math.pow</snippet></ROW><ROW><id>20970087</id><snippet>pow</snippet></ROW><ROW><id>20970087</id><snippet>**</snippet></ROW><ROW><id>20970087</id><snippet>math.pow</snippet></ROW><ROW><id>20970087</id><snippet>i</snippet></ROW><ROW><id>20970087</id><snippet>j</snippet></ROW><ROW><id>20970087</id><snippet>i^j</snippet></ROW><ROW><id>20970087</id><snippet>i ** j</snippet></ROW><ROW><id>20970087</id><snippet>i ** j</snippet></ROW><ROW><id>20970087</id><snippet>i</snippet></ROW><ROW><id>20970087</id><snippet>j</snippet></ROW><ROW><id>20970087</id><snippet>math.pow</snippet></ROW><ROW><id>20970087</id><snippet>&gt;&gt;&gt; timeit('float(i) ** j', setup='i, j = 7, 5')
0.7610865891750791
&gt;&gt;&gt; timeit('i ** float(j)', setup='i, j = 7, 5')
0.7930400942188385
&gt;&gt;&gt; timeit('float(i ** j)', setup='i, j = 7, 5')
0.8946636625872202
&gt;&gt;&gt; timeit('math.pow(i, j)', setup='import math; i, j = 7, 5')
0.5699394063529439
</snippet></ROW><ROW><id>20970087</id><snippet>math.pow</snippet></ROW><ROW><id>20970087</id><snippet>float()</snippet></ROW><ROW><id>20970087</id><snippet>**</snippet></ROW><ROW><id>20970087</id><snippet>pow</snippet></ROW><ROW><id>20970087</id><snippet>__pow__</snippet></ROW><ROW><id>20970087</id><snippet>__rpow__</snippet></ROW><ROW><id>20970087</id><snippet>math.pow</snippet></ROW><ROW><id>20970234</id><snippet>str.endswith</snippet></ROW><ROW><id>20970234</id><snippet>&gt;&gt;&gt; a = ['1,2,3,4,5Text,6Text']
&gt;&gt;&gt; [','.join(x for x in a[0].split(',') if not x.endswith('Text'))]
['1,2,3,4']
</snippet></ROW><ROW><id>20970234</id><snippet>str.split</snippet></ROW><ROW><id>20970234</id><snippet>','</snippet></ROW><ROW><id>20970234</id><snippet>&gt;&gt;&gt; a[0].split(',')
['1', '2', '3', '4', '5Text', '6Text']
</snippet></ROW><ROW><id>20970234</id><snippet>str.join</snippet></ROW><ROW><id>20970328</id><snippet>&gt;&gt;&gt; df['StateInitial'] = df['state'].str[:2]
&gt;&gt;&gt; df
   pop       state  year StateInitial
0  1.5    Auckland  2000           Au
1  1.7       Otago  2001           Ot
2  3.6  Wellington  2002           We
3  2.4     Dunedin  2001           Du
4  2.9    Hamilton  2002           Ha
</snippet></ROW><ROW><id>20970328</id><snippet>df['state'].str[-2:]</snippet></ROW><ROW><id>20970328</id><snippet>apply</snippet></ROW><ROW><id>20970328</id><snippet>&gt;&gt;&gt; df['state'].apply(lambda x: x[len(x)/2-1:len(x)/2+1])
0    kl
1    ta
2    in
3    ne
4    il
</snippet></ROW><ROW><id>20970439</id><snippet>from bs4 import BeautifulSoup
import re

html = ... # your html goes here
soup = BeautifulSoup(html)

telephone_p = soup.find_all(text=re.compile(r'Tel:'))
telephone = telephone_p[0].replace('Tel:', '').strip()
fax_p = soup.find_all(text=re.compile(r'Fax:'))
fax = fax_p[0].replace('Fax:', '').strip()
address_ps = soup.find_all('p')[:2]
address = '\n'.join([p.text for p in address_ps])

print(telephone)
print(fax)
print(address)
</snippet></ROW><ROW><id>20970439</id><snippet>+41 414220702
+41 414220929
Adress  37/41 Portbell
P.O.Box 12339, Kampala
</snippet></ROW><ROW><id>20970439</id><snippet>import re

html = ... # your html goes here

telephone = re.search('Tel: ([+\d\s]+)', html).groups()[0]
fax = re.search('Fax: ([+\d\s]+)', html).groups()[0]
paragraphs = [line for line in html.split('\n') if line.startswith('&lt;p&gt;')]
address = '\n'.join([p.replace('&lt;p&gt;', '').replace('&lt;/p&gt;', '')
                     for p in paragraphs[0:2]])

print(telephone)
print(fax)
print(address)
</snippet></ROW><ROW><id>20970466</id><snippet>for j in keyws:
    match = re.match(r"noi(\w+)k|fnoi(\w+)v(\w+)|noi(\w+)v(\w+)",j)
    if match: 
        results = match.group(1) or match.group(2) or match.group(4)
        print "Results :", results
</snippet></ROW><ROW><id>20970466</id><snippet>\w+</snippet></ROW><ROW><id>20970466</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; files = ["noi100k_0p55m0p3_fow71f",\
...      "fnoi100v5_71f60s",\
...      "noi100k_0p55m0p3_151f_560s",\
...      "noi110v25_560s"]
&gt;&gt;&gt; for i in files:
...     keyws = i.split("_")
...     for j in keyws:
...         match = re.match(r"noi(\w+)k|fnoi(\w+)v(\w+)|noi(\w+)v(\w+)",j)
...         if match: 
...             results = match.group(1) or match.group(2) or match.group(4)
...             print "Results :", results
... 
Results : 100
Results : 100
Results : 100
Results : 110
</snippet></ROW><ROW><id>20970466</id><snippet>(\w+)</snippet></ROW><ROW><id>20970466</id><snippet>match = re.match(r"noi(\w+)k|fnoi(\w+)v\w+|noi(\w+)v\w+",j)
if match: 
    results = next(g for g in match.groups() if g)
    print "Results :", results
</snippet></ROW><ROW><id>20970466</id><snippet>fnoi(\w+)k</snippet></ROW><ROW><id>20970466</id><snippet>match = re.match(r"f?noi(\w+)[kv](\w*)", j)
</snippet></ROW><ROW><id>20970466</id><snippet>.group(1)</snippet></ROW><ROW><id>20970531</id><snippet>import enchant
import nltk

spell_dict = enchant.Dict('en_US')  # or whatever language supported

def get_distance_limit(w):
    ''' 
    The word is considered good 
    if it's no further from a known word than this limit.
    '''
    return len(w)/5 + 2  # just for example, allowing around 1 typo per 5 chars.

def check_word(word):
    if spell_dict.check(word):
        return True  # a known dictionary word

    # try similar words
    max_dist = get_distance_limit(word)
    for suggestion in spell_dict.suggest(word):
        if nltk.edit_distance(suggestion, word) &lt; max_dist:
            return True

    return False
</snippet></ROW><ROW><id>20971018</id><snippet>requests</snippet></ROW><ROW><id>20971018</id><snippet>from requests.adapters import HTTPAdapter

# ....

session = beatport.get_session((access_token, access_token_secret))
session.mount('https://oauth-api.beatport.com', HTTPAdapter(max_retries=5))
</snippet></ROW><ROW><id>20971045</id><snippet>23</snippet></ROW><ROW><id>20971045</id><snippet>00010011</snippet></ROW><ROW><id>20971045</id><snippet>19</snippet></ROW><ROW><id>20971045</id><snippet>int()</snippet></ROW><ROW><id>20971045</id><snippet>x = int(x, 16)
</snippet></ROW><ROW><id>20971045</id><snippet>x ^ 255
</snippet></ROW><ROW><id>20971045</id><snippet>print x</snippet></ROW><ROW><id>20971045</id><snippet>19</snippet></ROW><ROW><id>20971045</id><snippet>13</snippet></ROW><ROW><id>20971045</id><snippet>0x</snippet></ROW><ROW><id>20971045</id><snippet>format(x, 'x')
</snippet></ROW><ROW><id>20971045</id><snippet>format()</snippet></ROW><ROW><id>20971045</id><snippet>x</snippet></ROW><ROW><id>20971045</id><snippet>b</snippet></ROW><ROW><id>20971045</id><snippet>o</snippet></ROW><ROW><id>20971045</id><snippet>&gt;&gt;&gt; int('13', 16)
19
&gt;&gt;&gt; format(19, 'x')
'13'
&gt;&gt;&gt; format(19 ^ 255, 'x')
'ec'
</snippet></ROW><ROW><id>20971515</id><snippet>"ftp://"</snippet></ROW><ROW><id>20971515</id><snippet>gaierror: [Errno 11004] getaddrinfo failed</snippet></ROW><ROW><id>20971515</id><snippet>'ftp://xxxx.xxxx.xxxx.xxxx'</snippet></ROW><ROW><id>20971515</id><snippet>gaierror</snippet></ROW><ROW><id>20971515</id><snippet>ftplib.FTP()</snippet></ROW><ROW><id>20971515</id><snippet>ftp = ftplib.FTP('you address')     
ftp.login() 
</snippet></ROW><ROW><id>20971752</id><snippet>pygame.transform.rotate()
rotate an image
rotate(Surface, angle) -&gt; Surface
</snippet></ROW><ROW><id>20971752</id><snippet>def rot_center(image, angle):
    """rotate an image while keeping its center and size"""
    orig_rect = image.get_rect()
    rot_image = pygame.transform.rotate(image, angle)
    rot_rect = orig_rect.copy()
    rot_rect.center = rot_image.get_rect().center
    rot_image = rot_image.subsurface(rot_rect).copy()
    return rot_image
</snippet></ROW><ROW><id>20971828</id><snippet>import numpy as np
#some example data; 128 images of 4x4 pixels
voxeldata = np.random.randint(0,100, (128, 4,4))
#we need to apply the same binning range to each pixel to get sensibble output
globalminmax = voxeldata.min(), voxeldata.max()+1
#number of output bins
bins = 20
bin_boundaries = np.empty(bins+1)
#function to wrap np.histogram, passing on only the first return value
def hist(pixel):
    h, b = np.histogram(pixel, bins=bins, range=globalminmax)
    bin_boundaries[:] = b  #simply overwrite; result should be identical each time
    return h
#apply this for each pixel
histdata = np.apply_along_axis(hist, 0, voxeldata)
print bin_boundaries
print histdata[:,0,0]  #print the histogram of an arbitrary pixel
</snippet></ROW><ROW><id>20971896</id><snippet>ax.set_ymargin(0.1)</snippet></ROW><ROW><id>20971896</id><snippet>ax.set_ylim([min(y)-1, max(Y)+1])</snippet></ROW><ROW><id>20972205</id><snippet>www[0].get("href")
</snippet></ROW><ROW><id>20972520</id><snippet>loadtxt(..., usecols=(1,2,3), ...)</snippet></ROW><ROW><id>20972520</id><snippet># Put data into file (in shell, just me copying the sample)
cat &gt;&gt; /tmp/data.csv
"myfilename",0.034353453,-1.234556,-3,45671234
,1.43567896, -1.45322124, 9.543422

# In IPython
In [1]: import numpy as np

In [2]: a = np.loadtxt('/tmp/data.csv', usecols=(1,2,3), delimiter=',')

In [3]: a
Out[3]: 
array([[ 0.03435345, -1.234556  , -3.        ],
       [ 1.43567896, -1.45322124,  9.543422  ]])
</snippet></ROW><ROW><id>20972711</id><snippet>x = [[]]*3</snippet></ROW><ROW><id>20972842</id><snippet>convolve</snippet></ROW><ROW><id>20972842</id><snippet>import pandas as pd
import numpy as np
df = pd.DataFrame({'a':range(1,6,1), 'b':range(10,60,10)})
np.convolve(df["a"].values, df["b"].values[::-1])[:5]
</snippet></ROW><ROW><id>20972842</id><snippet>array([ 50, 140, 260, 400, 550])
</snippet></ROW><ROW><id>20972975</id><snippet>#!/usr/bin/python3
from subprocess import Popen, PIPE

last_output = ""
while(1):
    proc = Popen(["mpc"], stdout=PIPE)
    output, retval = proc.communicate()
    if not output == last_output:
        print(output.decode('ascii'))
    last_output = output
</snippet></ROW><ROW><id>20972983</id><snippet>execfile("script2.py", {"var_x": var_x})</snippet></ROW><ROW><id>20972983</id><snippet>&gt;&gt;&gt; help(execfile)
execfile(...)
    execfile(filename[, globals[, locals]])

    Read and execute a Python script from a file.
    The globals and locals are dictionaries, defaulting to the current
    globals and locals.  If only globals is given, locals defaults to it.
</snippet></ROW><ROW><id>20973067</id><snippet>spawn</snippet></ROW><ROW><id>20973067</id><snippet>child_process.exec</snippet></ROW><ROW><id>20973067</id><snippet>// with express 3.x
var express = require('express'); 
var app = express();
app.use(express.logger('dev'));
app.use(express.bodyParser());
app.use(app.router);
app.post('/upload', function(req, res){
   if(req.files.myUpload){
     var python = require('child_process').spawn(
     'python',
     // second argument is array of parameters, e.g.:
     ["/home/me/pythonScript.py"
     , req.files.myUpload.path
     , req.files.myUpload.type]
     );
     var output = "";
     python.stdout.on('data', function(){ output += data });
     python.on('close', function(code){ 
       if (code !== 0) {  return res.send(500, code); }
       return res.send(200, output)
     });
   } else { res.send(500, 'No file found') }
});

require('http').createServer(app).listen(3000, function(){
  console.log('Listening on 3000');
});
</snippet></ROW><ROW><id>20973196</id><snippet>score__lt</snippet></ROW><ROW><id>20973196</id><snippet>score__gt</snippet></ROW><ROW><id>20973196</id><snippet>class Participant(models.Model):
    user = models.ForeignKey(User)
    score = models.IntegerField()

    def get_score_above_below(self, n):
        try:
            above = Participant.filter(score__lt=self.score).order_by('-score')[:n]
        except ObjectDoesNotExist:
            above = Participant.filter(score__lt=self.score).order_by('-score')
        try:
            below = Participant.filter(score__gt=self.score).order_by('-score')[:n]
        except ObjectDoesNotExist:
            below = Participant.filter(score__gt=self.score).order_by('-score')

        entries = list(above) + [self] + list(below)
        return [(part.user, part.score) for part in entries]
</snippet></ROW><ROW><id>20973196</id><snippet>[('&lt;username two places above&gt;', score),
 ('&lt;username one place above&gt;', score),
 ('&lt;instance username&gt;', score),
 ('&lt;username one place below&gt;', score),
 ('&lt;username two places below&gt;', score)]
</snippet></ROW><ROW><id>20973292</id><snippet>self.context.job_history = [Job_history(job_title=j, from_=f, to_=t) for j,f,t in zip(job_title_list, from_list, to_list)]
</snippet></ROW><ROW><id>20973626</id><snippet>romantoint</snippet></ROW><ROW><id>20973626</id><snippet>for</snippet></ROW><ROW><id>20973626</id><snippet> def checkIfRomanNumeral(numeral):
     """Controls that the userinput only contains valid roman numerals"""
     numeral = numeral.upper()
     validRomanNumerals = ["M", "D", "C", "L", "X", "V", "I", "(", ")"]
     for letters in numeral:
        if letters not in validRomanNumerals:
            print("Sorry that is not a valid roman numeral")
            return True
     romanToInt(numeral)
</snippet></ROW><ROW><id>20973739</id><snippet>Second.variable3</snippet></ROW><ROW><id>20973739</id><snippet>class Second(object):
    def __init__(self):
        self.variable3 = First()


class Third(Second):
    def __init__(self):
        super(Third, self).__init__()
        self.variable4 = self.variable3.subvar2
</snippet></ROW><ROW><id>20973805</id><snippet>str.decode()</snippet></ROW><ROW><id>20973805</id><snippet>unicode</snippet></ROW><ROW><id>20973805</id><snippet>&gt;&gt;&gt; print u'\u4e2d\u6587'
中文
&gt;&gt;&gt; u'\u4e2d\u6587'.encode('gbk')
'\xd6\xd0\xce\xc4'
&gt;&gt;&gt; u'\u4e2d\u6587'.encode('gbk').decode('latin1')
u'\xd6\xd0\xce\xc4'
</snippet></ROW><ROW><id>20973805</id><snippet>&gt;&gt;&gt; print u'\u4e2d\u6587'.encode('gbk').decode('latin1')
ÖÐÎÄ
</snippet></ROW><ROW><id>20973805</id><snippet>u'....'</snippet></ROW><ROW><id>20973805</id><snippet>encoded.decode('utf8')</snippet></ROW><ROW><id>20973805</id><snippet>unicode</snippet></ROW><ROW><id>20973805</id><snippet>sys.stdin.encoding</snippet></ROW><ROW><id>20973805</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.stdin.encoding
'UTF-8'
</snippet></ROW><ROW><id>20973841</id><snippet>df['LastDayWeek'] = pd.to_datetime((df['Week']-1).astype(str) + "6", format="%Y%U%w")
</snippet></ROW><ROW><id>20973841</id><snippet>+ "6"</snippet></ROW><ROW><id>20973841</id><snippet>df['MonthMax'] = pd.DatetimeIndex(df['LastDayWeek']).month
</snippet></ROW><ROW><id>20973841</id><snippet>In [6]: df
Out[6]:
     Week product  quantity         LastDayWeek  MonthMax
0  201301    coke       1.5 2013-01-05 00:00:00         1
1  201302   fanta       1.7 2013-01-12 00:00:00         1
2  201304    coke       3.6 2013-01-26 00:00:00         1
3  201306  sprite       2.4 2013-02-09 00:00:00         2
4  201308   pepsi       2.9 2013-02-23 00:00:00         2
</snippet></ROW><ROW><id>20973938</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>20973938</id><snippet>default=datetime.datetime.now()</snippet></ROW><ROW><id>20973938</id><snippet>default=datetime.datetime.now</snippet></ROW><ROW><id>20974207</id><snippet>cum_data.groupby(cum_data.index.dayofyear).mean()
</snippet></ROW><ROW><id>20974207</id><snippet>In [13]: cum_data.groupby([cum_data.index.month, cum_data.index.day]).mean()
Out[13]:
1  1     462.25
   2     631.00
   3     615.50
   4     496.00
...
12  28    378.25
    29    427.75
    30    528.50
    31    678.50
Length: 366, dtype: float64
</snippet></ROW><ROW><id>20974351</id><snippet>scikit_learn_data</snippet></ROW><ROW><id>20974351</id><snippet>$ cd ~/scikit_learn_data'
$ rm -rf 20news_home
$ rm 20news-bydate.pkz
</snippet></ROW><ROW><id>20974354</id><snippet>def f():
    return {i for i in range(10)}

dis.dis(f.__code__.co_consts[1])
  2           0 BUILD_SET                0
              3 LOAD_FAST                0 (.0)
        &gt;&gt;    6 FOR_ITER                12 (to 21)
              9 STORE_FAST               1 (i)
             12 LOAD_FAST                1 (i)
             15 SET_ADD                  2
             18 JUMP_ABSOLUTE            6
        &gt;&gt;   21 RETURN_VALUE        
</snippet></ROW><ROW><id>20974354</id><snippet>def g():
    return (i for i in range(10))

dis.dis(g.__code__.co_consts[1])
  2           0 LOAD_FAST                0 (.0)
        &gt;&gt;    3 FOR_ITER                11 (to 17)
              6 STORE_FAST               1 (i)
              9 LOAD_FAST                1 (i)
             12 YIELD_VALUE         
             13 POP_TOP             
             14 JUMP_ABSOLUTE            3
        &gt;&gt;   17 LOAD_CONST               0 (None)
             20 RETURN_VALUE        
</snippet></ROW><ROW><id>20974354</id><snippet>yield</snippet></ROW><ROW><id>20974354</id><snippet>yield</snippet></ROW><ROW><id>20974354</id><snippet>yield</snippet></ROW><ROW><id>20974354</id><snippet>yield</snippet></ROW><ROW><id>20974354</id><snippet>yield</snippet></ROW><ROW><id>20974354</id><snippet>{None}</snippet></ROW><ROW><id>20974354</id><snippet>None</snippet></ROW><ROW><id>20974354</id><snippet>yield</snippet></ROW><ROW><id>20974354</id><snippet>{None}</snippet></ROW><ROW><id>20974354</id><snippet>yield from</snippet></ROW><ROW><id>20974354</id><snippet>return</snippet></ROW><ROW><id>20974354</id><snippet>SyntaxError: 'return' with argument inside generator</snippet></ROW><ROW><id>20974354</id><snippet>yield</snippet></ROW><ROW><id>20974354</id><snippet>RETURN_VALUE</snippet></ROW><ROW><id>20974354</id><snippet>return value</snippet></ROW><ROW><id>20974354</id><snippet>RETURN_VALUE</snippet></ROW><ROW><id>20974354</id><snippet>StopIteration</snippet></ROW><ROW><id>20974355</id><snippet>sudo apt-get install python-dev</snippet></ROW><ROW><id>20974355</id><snippet>sudo yum install python-devel</snippet></ROW><ROW><id>20974355</id><snippet>Include</snippet></ROW><ROW><id>20974355</id><snippet>/usr/include/pythonX.X</snippet></ROW><ROW><id>20974355</id><snippet>python setup.py build</snippet></ROW><ROW><id>20974355</id><snippet>build</snippet></ROW><ROW><id>20974355</id><snippet>python setup.py install</snippet></ROW><ROW><id>20974449</id><snippet>class ClassA:
    def doSomething(otherObject):
        # Do something
ClassA.doSomething = accepts(ClassA)(ClassA.doSomething)
</snippet></ROW><ROW><id>20974449</id><snippet>class Meta(type):

    def __new__(cls, clsname, bases, dct):
       fields = ('doSomething', ) #Fields on which you want to apply the decorator
       for name, val in dct.items():
           if name in fields:
               dct[name] = accepts(cls)(val)
       return type.__new__(cls, clsname, bases, dct)


class ClassA(object):
    __metaclass__ = Meta
    def doSomething(otherObject):
        pass
</snippet></ROW><ROW><id>20974449</id><snippet>new_f.func_name = f.func_name</snippet></ROW><ROW><id>20974449</id><snippet>from functools import wraps
def accepts(*types):
    def check_accepts(f):
        print "inside"
        assert len(types) == f.func_code.co_argcount
        @wraps(f)
        def new_f(*args, **kwds):
</snippet></ROW><ROW><id>20974805</id><snippet>str.format</snippet></ROW><ROW><id>20974805</id><snippet>&gt;&gt;&gt; '{:017.6f}'.format(100.00)
'0000000100.000000'
</snippet></ROW><ROW><id>20974805</id><snippet>format</snippet></ROW><ROW><id>20974805</id><snippet>&gt;&gt;&gt; format(100.00, '017.6f')
'0000000100.000000'
</snippet></ROW><ROW><id>20974852</id><snippet>list1</snippet></ROW><ROW><id>20974852</id><snippet>from itertools import product

elements = []
for letter in list1:
    elements.append([''.join(c) for c in product(letter, list2)])
    for combo in product(*elements):
        print combo
</snippet></ROW><ROW><id>20974852</id><snippet>elements</snippet></ROW><ROW><id>20974852</id><snippet>&gt;&gt;&gt; elements = []
&gt;&gt;&gt; for letter in list1:
...     elements.append([''.join(c) for c in product(letter, list2)])
...     for combo in product(*elements):
...         print combo
... 

('A1',)
('A2',)
('A1', 'B1')
('A1', 'B2')
('A2', 'B1')
('A2', 'B2')
('A1', 'B1', 'C1')
('A1', 'B1', 'C2')
('A1', 'B2', 'C1')
('A1', 'B2', 'C2')
('A2', 'B1', 'C1')
('A2', 'B1', 'C2')
('A2', 'B2', 'C1')
('A2', 'B2', 'C2')
</snippet></ROW><ROW><id>20975028</id><snippet>char A[100]; /* Your code misses the semicolon here. */

while(fgets(A, sizeof A, stdin) != NULL)
{
  /* process A here */
}
</snippet></ROW><ROW><id>20975028</id><snippet>getline()</snippet></ROW><ROW><id>20975137</id><snippet>sshout.read</snippet></ROW><ROW><id>20975137</id><snippet>sshout</snippet></ROW><ROW><id>20975162</id><snippet>from notes.notes import *</snippet></ROW><ROW><id>20975231</id><snippet>class QuestionHandler(RequestHandler):
    def get(self, id):
        # Display the question

    def post(self, id):
        # Validates the answer
        answer = self.get_argument('answer')

application = Application([
    (r'/(\d+)', QuestionHandler),
])
</snippet></ROW><ROW><id>20975231</id><snippet>class QuestionHandler(RequestHandler):
    def get(self, id):
        # Display the question

class AnswerHandler(RequestHandler):
    def post(self, id):
        # Validates the answer
        answer = self.get_argument('answer')

application = Application([
    (r'/(\d+)', QuestionHandler),
    (r'/(\d+)/answer', AnswerHandler),
])
</snippet></ROW><ROW><id>20975257</id><snippet>pointy&gt;30</snippet></ROW><ROW><id>20975257</id><snippet>current_color</snippet></ROW><ROW><id>20975257</id><snippet>import numpy
import matplotlib.pyplot as plt
import matplotlib.cm as cm
import matplotlib.colors as colors        

# Create fake data
x = numpy.linspace(0,4)
y = numpy.exp(x)

# Now plot one by one
bar_width = x[1] - x[0]  # assuming x is linealy spaced
max_y = y.max()
min_y = y.min()

for pointx, pointy in zip(x,y):
    point = 40
    current_color = cm.jet((pointy - min_y)/(max_y - min_y))
    plt.bar(pointx, point, bar_width, color = current_color)       

plt.show()
</snippet></ROW><ROW><id>20975257</id><snippet>pointy</snippet></ROW><ROW><id>20975257</id><snippet>cmap.jet</snippet></ROW><ROW><id>20975257</id><snippet>pointy</snippet></ROW><ROW><id>20975451</id><snippet>foo.__init__</snippet></ROW><ROW><id>20975451</id><snippet>bar('a', f='something')</snippet></ROW><ROW><id>20975451</id><snippet>bar</snippet></ROW><ROW><id>20975451</id><snippet>foo.__init__</snippet></ROW><ROW><id>20975451</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>20975451</id><snippet>Signature</snippet></ROW><ROW><id>20975451</id><snippet>Parameter</snippet></ROW><ROW><id>20975451</id><snippet>bar</snippet></ROW><ROW><id>20975451</id><snippet>foo</snippet></ROW><ROW><id>20975451</id><snippet>bar</snippet></ROW><ROW><id>20975451</id><snippet>foo</snippet></ROW><ROW><id>20975451</id><snippet>inspect</snippet></ROW><ROW><id>20975451</id><snippet>inspect.getcallargs</snippet></ROW><ROW><id>20975451</id><snippet>inspect.getcallargs(super(bar, self).__init__, *[self, 1], **{'c':3, 'd':4})</snippet></ROW><ROW><id>20975451</id><snippet>{'a': 1, 'self': &lt;bar object&gt;, 'b': None, 'c': 3, 'd': 4}</snippet></ROW><ROW><id>20975451</id><snippet>super(bar, self).__init__(**fixed_dict)</snippet></ROW><ROW><id>20975451</id><snippet>foo.__init__</snippet></ROW><ROW><id>20975451</id><snippet>getcallargs</snippet></ROW><ROW><id>20975451</id><snippet>foo.__init__</snippet></ROW><ROW><id>20975493</id><snippet>In [7]: DataFrame({'A' : Series([1,2,3,4]), 'B' : Series([1,1,1,1]) }).rank()
Out[7]: 
   A    B
0  1  2.5
1  2  2.5
2  3  2.5
3  4  2.5

[4 rows x 2 columns]

In [8]: DataFrame({'A' : Series([1,2,3,4]), 'B' : Series([1,1,1,1]) }).rank().dtypes
Out[8]: 
A    float64
B    float64
dtype: object
</snippet></ROW><ROW><id>20975493</id><snippet>In [12]: DataFrame({'A' : Series([1,2,3,4]), 'B' : Series([1,1,1,1]) }).rank(method='min')
Out[12]: 
   A  B
0  1  1
1  2  1
2  3  1
3  4  1

[4 rows x 2 columns]

In [13]: DataFrame({'A' : Series([1,2,3,4]), 'B' : Series([1,1,1,1]) }).rank(method='max')
Out[13]: 
   A  B
0  1  4
1  2  4
2  3  4
3  4  4

[4 rows x 2 columns]

In [14]: DataFrame({'A' : Series([1,2,3,4]), 'B' : Series([1,1,1,1]) }).rank(method='first')
Out[14]: 
   A  B
0  1  1
1  2  2
2  3  3
3  4  4

[4 rows x 2 columns]
</snippet></ROW><ROW><id>20975510</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>20975510</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>20975510</id><snippet>soup = BeautifulSoup(html)#make soup that is parse-able by bs
soup.findAll('div') 
</snippet></ROW><ROW><id>20975510</id><snippet>soup.find('span').get_text()
</snippet></ROW><ROW><id>20975612</id><snippet>//*/tr/td[@width="54%"]/span</snippet></ROW><ROW><id>20975612</id><snippet>b</snippet></ROW><ROW><id>20975612</id><snippet>None</snippet></ROW><ROW><id>20975612</id><snippet>&gt;&gt;&gt; None.split(',')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'NoneType' object has no attribute 'split'
</snippet></ROW><ROW><id>20975612</id><snippet>text_content</snippet></ROW><ROW><id>20975612</id><snippet>text</snippet></ROW><ROW><id>20975612</id><snippet>for tag in root.xpath('/tr/td[@width="54%"]/span'):
    #titles += tag.text.split(',')
    titles += tag.text_content().split(',')
</snippet></ROW><ROW><id>20975752</id><snippet>In [15]: grp = df.groupby(['split_1','split_2'])

In [16]: grp.agg([np.mean, np.median, np.max, np.min, np.size]).stack(0)
Out[16]: 
                           mean  median  amax  amin  size
split_1 split_2                                          
1       3       var_1  1.333333       1     2     1     3
                var_2  3.666667       4     4     3     3
        4       var_1  2.000000       2     2     2     1
                var_2  1.000000       1     1     1     1
2       3       var_1  2.666667       2     4     2     3
                var_2  2.333333       2     3     2     3
        4       var_1  3.000000       3     4     2     3
                var_2  3.666667       4     5     2     3
</snippet></ROW><ROW><id>20975823</id><snippet>import time
from timeit import Timer

def my_timeit(func, *args, **kwargs):
    output_container = []
    def wrapper():
        output_container.append(func(*args, **kwargs))
    timer = Timer(wrapper)
    delta = timer.timeit(1)
    return delta, output_container.pop()

def foo():
    time.sleep(1.111)
    return 'potato'

delta, result = my_timeit(foo)
</snippet></ROW><ROW><id>20975896</id><snippet>concat</snippet></ROW><ROW><id>20975896</id><snippet>In [48]: pd.merge(df1, df2, how='outer', on='id').merge(df3, how='outer', on='id')
Out[48]: 
      id  score_x  score_y  score
0    one       56       35    NaN
1    two       45      NaN     66
2  three       78      NaN    NaN
3   five      NaN       81     23
4   four      NaN       90    NaN
5    six      NaN      NaN     42

[6 rows x 4 columns]
</snippet></ROW><ROW><id>20975896</id><snippet>In [54]: merged = pd.merge(df1, df2, how='outer', on='id').merge(df3, how='outer', on='id')

In [55]: merged.set_index('id').rename(columns={'score_x': 'score(df1)', 'score_y': 'score(df2)
', 'score': 'score(df3)'})
Out[55]: 
       score(df1)  score(df2)  score(df3)
id                                       
one            56          35         NaN
two            45         NaN          66
three          78         NaN         NaN
five          NaN          81          23
four          NaN          90         NaN
six           NaN         NaN          42

[6 rows x 3 columns]
</snippet></ROW><ROW><id>20975958</id><snippet>WORKERS</snippet></ROW><ROW><id>20975958</id><snippet>WORKERS = list(WORKERS)
</snippet></ROW><ROW><id>20975958</id><snippet>WORKERS = WORKERS[:]
</snippet></ROW><ROW><id>20975958</id><snippet>self.today_workers</snippet></ROW><ROW><id>20976180</id><snippet>def shepard_interpolation(self, seeds=10):
    print type (self.data)
    #Code omitted 'cause it doesn't effect the problem 
    return self
</snippet></ROW><ROW><id>20976254</id><snippet>import wx

########################################################################
class MyPanel(wx.Panel):
    """"""

    #----------------------------------------------------------------------
    def __init__(self, parent):
        """Constructor"""
        wx.Panel.__init__(self, parent)
        self.shift_down = False

        btn = wx.Button(self, label="Test Shift")
        btn.Bind(wx.EVT_KEY_DOWN, self.onKeyDown)
        btn.Bind(wx.EVT_KEY_UP, self.onKeyUp)
        btn.Bind(wx.EVT_BUTTON, self.onButton)

    #----------------------------------------------------------------------
    def onButton(self, event):
        """
        Event handler for when the button is pressed
        """
        if self.shift_down:
            print "Shift key is down!"
        else:
            print "Shift key is up!"

    #----------------------------------------------------------------------
    def onKeyDown(self, event):
        """
        If shift key is down, set class variable to True
        """
        keycode = event.GetKeyCode()
        if keycode == wx.WXK_SHIFT:
            self.shift_down = True
        event.Skip()

    #----------------------------------------------------------------------
    def onKeyUp(self, event):
        """
        If shift key is up, set class variable to False
        """
        keycode = event.GetKeyCode()
        if keycode == wx.WXK_SHIFT:
            self.shift_down = False
        event.Skip()

########################################################################
class MyFrame(wx.Frame):
    """"""

    #----------------------------------------------------------------------
    def __init__(self):
        """Constructor"""
        wx.Frame.__init__(self, None, title="Demo")
        panel = MyPanel(self)
        self.Show()


#----------------------------------------------------------------------
if __name__ == "__main__":
    app = wx.App(False)
    frame = MyFrame()
    app.MainLoop()
</snippet></ROW><ROW><id>20976578</id><snippet>Migration</snippet></ROW><ROW><id>20976578</id><snippet>models</snippet></ROW><ROW><id>20976578</id><snippet>models</snippet></ROW><ROW><id>20976799</id><snippet>import urllib
import urllib2
from bs4 import BeautifulSoup    

uni_id = "P22216"    
url = "http://www.rcsb.org/pdb/search/smart.do?smartComparator=and&amp;smartSearchSubtype_0=UpAccessionIdQuery&amp;target=Current&amp;accessionIdList_0=%s" % uni_id    
text = urllib2.urlopen(url).read()    
soup = BeautifulSoup(text)    
link = soup.find( "span", {"class":"iconSet-main icon-download"}).parent.get("href")    
urllib.urlretrieve("http://www.rcsb.org/" + str(link), str(link.split("=")[-1]) + ".pdb")
</snippet></ROW><ROW><id>20976799</id><snippet>selenium</snippet></ROW><ROW><id>20976799</id><snippet>urllib</snippet></ROW><ROW><id>20976799</id><snippet>import urllib
import urllib2
from bs4 import BeautifulSoup


uni_id = "P22216"
url = "http://www.rcsb.org/pdb/search/smart.do?smartComparator=and&amp;smartSearchSubtype_0=UpAccessionIdQuery&amp;target=Current&amp;accessionIdList_0=%s" % uni_id
text = urllib2.urlopen(url).read()
soup = BeautifulSoup(text)
table = soup.find( "table", {"class":"queryBlue"} )
link = table.find("a", {"class":"tooltip"}).get("href")
urllib.urlretrieve("http://www.rcsb.org/" + str(link), str(link.split("=")[-1]) + ".pdb")
</snippet></ROW><ROW><id>20976799</id><snippet>import mechanize
from bs4 import BeautifulSoup


SEARCH_URL = "http://www.rcsb.org/pdb/home/home.do"

l = ["YGL130W", "YDL159W", "YOR181W"]
browser = mechanize.Browser()

for item in l:
    browser.open(SEARCH_URL)
    browser.select_form(nr=0)
    browser["q"] = item
    html = browser.submit()

    soup = BeautifulSoup(html)
    table = soup.find("table", {"class":"queryBlue"})
    if table:
        link = table.find("a", {"class":"tooltip"}).get("href")
        browser.retrieve("http://www.rcsb.org/" + str(link), str(link.split("=")[-1]) + ".pdb")[0]
        print "Downloaded " + item + " as " + str(link.split("=")[-1]) + ".pdb"
    else:
        print item + " was not found"
</snippet></ROW><ROW><id>20976799</id><snippet>Downloaded YGL130W as 3KYH.pdb
Downloaded YDL159W as 3FWB.pdb
YOR181W was not found
</snippet></ROW><ROW><id>20976964</id><snippet>bank</snippet></ROW><ROW><id>20976964</id><snippet>class UserSerializer(serializers.ModelSerializer):
    bank = serializers.PrimaryKeyRelatedField(queryset=Bank.objects.filter(opened=True))

    class Meta:
        model = User
</snippet></ROW><ROW><id>20977002</id><snippet>window.stackedWidget.setCurrentIndex(4)
window.btn_buy.clicked.connect(purchase)
window.btn_back_to_SY.clicked.connect(cancel_purchase)
</snippet></ROW><ROW><id>20977117</id><snippet>if next not in scenes:
    scenes.get(next) == None
</snippet></ROW><ROW><id>20977117</id><snippet>None</snippet></ROW><ROW><id>20977117</id><snippet>enter</snippet></ROW><ROW><id>20977117</id><snippet>next = scenes.get(next)
if next is not None:
    next.enter()
else:
    print("No more scenes")
    break # leave the loop
</snippet></ROW><ROW><id>20977209</id><snippet>/files/myfile.rar</snippet></ROW><ROW><id>20977209</id><snippet>dict()</snippet></ROW><ROW><id>20977209</id><snippet>visitors[ip] = line</snippet></ROW><ROW><id>20977209</id><snippet>visitors</snippet></ROW><ROW><id>20977209</id><snippet>visitors = dict()
# this should be same for each line
line = '95.11.113.x - [15/Nov/2013]'
ip = line.split(" - ")[0]  # assuming it must have " - " in line
visitors[ip] = line

# finally when you are done with above things
for visitor in visitors:
    print visitors[visitor]
</snippet></ROW><ROW><id>20977422</id><snippet>%</snippet></ROW><ROW><id>20977422</id><snippet>%</snippet></ROW><ROW><id>20977422</id><snippet>&gt;&gt;&gt; name = 'John'
&gt;&gt;&gt; string = 'hello %s! You owe 10%%.' % (name)
&gt;&gt;&gt; string
'hello John! You owe 10%.'
</snippet></ROW><ROW><id>20977422</id><snippet>format</snippet></ROW><ROW><id>20977422</id><snippet>&gt;&gt;&gt; name = 'John'
&gt;&gt;&gt; string = 'hello {}! You owe 10%'.format(name)
&gt;&gt;&gt; string
'Hello John! You owe 10%'
# Another way, with naming for more readibility
&gt;&gt;&gt; string = 'hello {name}! You owe 10%.'.format(name=name)
&gt;&gt;&gt; str
'hello John! You owe 10%.'
</snippet></ROW><ROW><id>20977487</id><snippet>__iadd__</snippet></ROW><ROW><id>20977487</id><snippet>__iXXX__</snippet></ROW><ROW><id>20977487</id><snippet>__iadd__</snippet></ROW><ROW><id>20977487</id><snippet>self.angle</snippet></ROW><ROW><id>20977487</id><snippet>None</snippet></ROW><ROW><id>20977487</id><snippet>None</snippet></ROW><ROW><id>20977487</id><snippet>class Foo(object):
    def __init__(self, angle=120):
        self.angle = angle

    def __add__(self, other):
        """Check for recursion, then return the added value."""
        print "Foo.add"
        val = self.angle + other
        while val &gt; 360:
            val -= 360
        while val &lt; 0:
            val += 360
        return val


    def __iadd__(self, other):
        """Augmented addition assignment."""
        print "Foo.iadd"
        val = self.__add__(other)
        self.angle = val


f = Foo()
f += 20

print f is None
</snippet></ROW><ROW><id>20977487</id><snippet>__iadd__</snippet></ROW><ROW><id>20977487</id><snippet>self</snippet></ROW><ROW><id>20977529</id><snippet>for k in range(1, n):    # k = 1...n-1   
    v[k] = lambda x, k=k: 2*x*v[k-1](x) - v[k-2](x)
</snippet></ROW><ROW><id>20977529</id><snippet>k=k</snippet></ROW><ROW><id>20977529</id><snippet>k</snippet></ROW><ROW><id>20977529</id><snippet>k</snippet></ROW><ROW><id>20977583</id><snippet>inspect</snippet></ROW><ROW><id>20977583</id><snippet>import inspect

class MyClass():
    def __init__(self):
        pass
    def method1(self):
        pass
    def method2(self):
        pass

# exclude __...__ methods
actual_methods = [member for member in inspect.getmembers(MyClass)
                  if not member[0].startswith('__')]
print(len(actual_methods))
</snippet></ROW><ROW><id>20977583</id><snippet>2
</snippet></ROW><ROW><id>20977834</id><snippet>Foo.objects.extra(select={ 'd_field' : 'cast(the_column AS UNSIGNED)' }).extra(order_by=['d_field'])
</snippet></ROW><ROW><id>20977834</id><snippet>Foo.objects.filter( 
    Q(m_number__icontains=(request.GET['term'])) 
).filter( 
    co_id = co_id, 
    is_active=1 
).extra( 
    select={ 
        'int_m_number': 'cast(m_number AS UNSIGNED)', 
        'pk': 'pk' , 
        'm_number': 'm_number'
    } 
).extra( 
    order_by=['int_m_number'] 
)
</snippet></ROW><ROW><id>20978185</id><snippet>datetime.now()
</snippet></ROW><ROW><id>20978185</id><snippet>from datetime import datetime
</snippet></ROW><ROW><id>20978185</id><snippet>import datetime
</snippet></ROW><ROW><id>20978185</id><snippet>datetime.datetime.now()
</snippet></ROW><ROW><id>20978185</id><snippet>datetime</snippet></ROW><ROW><id>20978185</id><snippet>import datetime as datetime
</snippet></ROW><ROW><id>20978185</id><snippet>import datetime
</snippet></ROW><ROW><id>20978298</id><snippet>mydisplay = MyClass()</snippet></ROW><ROW><id>20978298</id><snippet>mydisplay = MyClass("script-tvguide-mainmenu.xml", xbmcaddon.Addon().getAddonInfo('path'))
</snippet></ROW><ROW><id>20978298</id><snippet>WindowXML</snippet></ROW><ROW><id>20978298</id><snippet>MyClass</snippet></ROW><ROW><id>20978575</id><snippet>np.asarray</snippet></ROW><ROW><id>20978575</id><snippet>np.asarray(my_memview)
</snippet></ROW><ROW><id>20978575</id><snippet>import numpy as np
cimport numpy as np
def test(double[:,:] x):
    print type(x)
    print type(np.asarray(x))
</snippet></ROW><ROW><id>20978575</id><snippet>a = np.random.normal(size=(5,5))
test(a)
</snippet></ROW><ROW><id>20978575</id><snippet>&lt;type '_cython_magic_0182fca918bfa3618c3553e51b13e8ba._memoryviewslice'&gt;
&lt;type 'numpy.ndarray'&gt;
</snippet></ROW><ROW><id>20978666</id><snippet>multiprocessing.Pool.map</snippet></ROW><ROW><id>20978666</id><snippet>processes</snippet></ROW><ROW><id>20978666</id><snippet>Pool</snippet></ROW><ROW><id>20978666</id><snippet>import os
import multiprocessing

def worker(num):
    with open(num, 'w') as f:
        f.write("This is my first text file written in python\n")

if __name__ == '__main__':
    number_of_workers = 4
    pool = multiprocessing.Pool(processes=number_of_workers)
    pool.map(worker, [os.path.join(inDir, i) for i in inTxtList])
    pool.close()
    pool.join()
</snippet></ROW><ROW><id>20978666</id><snippet>os.path.join</snippet></ROW><ROW><id>20978844</id><snippet>from selenium import webdriver
browser = webdriver.Firefox()
browser.get("http://www.omegle.com")
element = browser.find_element_by_id("onlinecount")
onlinecount = element.find_element_by_tag_name("strong")
</snippet></ROW><ROW><id>20978864</id><snippet>np.r_</snippet></ROW><ROW><id>20978864</id><snippet>np.c_</snippet></ROW><ROW><id>20978864</id><snippet>np.concatenate</snippet></ROW><ROW><id>20978864</id><snippet>np.vstack</snippet></ROW><ROW><id>20978864</id><snippet>np.hstack</snippet></ROW><ROW><id>20978864</id><snippet>np.dstack</snippet></ROW><ROW><id>20978864</id><snippet>np.row_stack</snippet></ROW><ROW><id>20978864</id><snippet>np.column_stack</snippet></ROW><ROW><id>20978864</id><snippet>import numpy as np
m = np.zeros((10, 4))
v = np.ones((10, 1))
c = np.c_[m, v]
</snippet></ROW><ROW><id>20978864</id><snippet>array([[ 0.,  0.,  0.,  0.,  1.],
       [ 0.,  0.,  0.,  0.,  1.],
       [ 0.,  0.,  0.,  0.,  1.],
       [ 0.,  0.,  0.,  0.,  1.],
       [ 0.,  0.,  0.,  0.,  1.],
       [ 0.,  0.,  0.,  0.,  1.],
       [ 0.,  0.,  0.,  0.,  1.],
       [ 0.,  0.,  0.,  0.,  1.],
       [ 0.,  0.,  0.,  0.,  1.],
       [ 0.,  0.,  0.,  0.,  1.]])
</snippet></ROW><ROW><id>20978864</id><snippet>np.hstack([m, v])</snippet></ROW><ROW><id>20978864</id><snippet>np.column_stack([m, v])</snippet></ROW><ROW><id>20978864</id><snippet>hstack</snippet></ROW><ROW><id>20978864</id><snippet>column_stack</snippet></ROW><ROW><id>20978864</id><snippet>np.c_</snippet></ROW><ROW><id>20978864</id><snippet>np.r_</snippet></ROW><ROW><id>20978864</id><snippet>In [7]: np.r_[1:5, 2]
Out[7]: array([1, 2, 3, 4, 2])
</snippet></ROW><ROW><id>20978864</id><snippet>In [8]: np.c_[m, 0:10]
Out[8]:
array([[ 0.,  0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.,  1.],
       [ 0.,  0.,  0.,  0.,  2.],
       [ 0.,  0.,  0.,  0.,  3.],
       [ 0.,  0.,  0.,  0.,  4.],
       [ 0.,  0.,  0.,  0.,  5.],
       [ 0.,  0.,  0.,  0.,  6.],
       [ 0.,  0.,  0.,  0.,  7.],
       [ 0.,  0.,  0.,  0.,  8.],
       [ 0.,  0.,  0.,  0.,  9.]])
</snippet></ROW><ROW><id>20978864</id><snippet>np.r_</snippet></ROW><ROW><id>20978864</id><snippet>np.c_</snippet></ROW><ROW><id>20978864</id><snippet>vstack</snippet></ROW><ROW><id>20978864</id><snippet>hstack</snippet></ROW><ROW><id>20978878</id><snippet>x = '\n'.join([str(i + 1) + ', ' + n for i,n in enumerate(mystring.split()[::2])])

print x

1, 27
2, 27
3, 32
4, 27
5, 25
</snippet></ROW><ROW><id>20978878</id><snippet>mystring.split()</snippet></ROW><ROW><id>20978878</id><snippet>['27', 'C', '27', 'C', '32', 'C', '27', 'C', '25', 'C']</snippet></ROW><ROW><id>20978878</id><snippet>[::2]</snippet></ROW><ROW><id>20978878</id><snippet>['27', '27', '32', '27', '25']
</snippet></ROW><ROW><id>20978878</id><snippet>for i in enumerate(mystring.split()[::2]):
    print i

(0, '27')
(1, '27')
(2, '32')
(3, '27')
(4, '25')
</snippet></ROW><ROW><id>20978878</id><snippet>str(i + 1) + ', ' + n for i, n</snippet></ROW><ROW><id>20978878</id><snippet>'\n'</snippet></ROW><ROW><id>20978878</id><snippet>join</snippet></ROW><ROW><id>20978878</id><snippet>    1, 27
    2, 27
    3, 32
    4, 27
    5, 25
</snippet></ROW><ROW><id>20979191</id><snippet># ... omitted
    url(r'^profile/edit/$', profileviews.ProfileUpdateView.as_view(),
# ... omitted
</snippet></ROW><ROW><id>20979191</id><snippet>class ProfileUpdateView(UpdateView):
    model = Profile
    form_class = UserProfileForm

    def get_object(self):
        """
        Returns the request's user.
        """
        return self.request.user.get_profile()

    # Then (unrelated, but for security)
    dispatch = login_required(UpdateView.dispatch)
</snippet></ROW><ROW><id>20979325</id><snippet>def do_all(self):
    seen = set()
    for c in reversed(self.__class__.__mro__[:-1]):
        if c.do_it not in seen:
            seen.add(c.do_it)
            c.do_it(self)
</snippet></ROW><ROW><id>20979325</id><snippet>c.do_it.__func__</snippet></ROW><ROW><id>20979325</id><snippet>six.get_unbound_function</snippet></ROW><ROW><id>20979325</id><snippet>__dict__</snippet></ROW><ROW><id>20979325</id><snippet>def do_all(self):
    for c in reversed(self.__class__.__mro__[:-1]):
        if 'do_it' in c.__dict__:
            c.do_it(self)
</snippet></ROW><ROW><id>20979385</id><snippet>guess()</snippet></ROW><ROW><id>20979385</id><snippet>guess()</snippet></ROW><ROW><id>20979385</id><snippet>guesses = 0
while guesses &lt; 4:
   print "Guess a number between 1 and 3"
   numb = raw_input("&gt; ")
   if numb == smaugNum:
        print "Well done! You win."
        Player.BilbosStuff.append('arkenstone')
        print "Now Bilbo has", Player.BilbosStuff
        return 'finished'
  else:
        print "You lose!"
        guesses += 1

print "Too many failed guesses, you lose!"
return 'death'
</snippet></ROW><ROW><id>20979742</id><snippet>logging/__init__.py</snippet></ROW><ROW><id>20979742</id><snippet>def flush_logger(logger):
    c = logger
    while c:
        for hdlr in c.handlers:
            try:
                hdlr.flush()
            except AttributeError:
                pass
        if not c.propagate:
            c = None    #break out
        else:
            c = c.parent
</snippet></ROW><ROW><id>20979789</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([1, 2, 3])
&gt;&gt;&gt; b = np.array([1, -2, 3])
&gt;&gt;&gt; c = a == b
&gt;&gt;&gt; c
array([ True, False,  True], dtype=bool)
</snippet></ROW><ROW><id>20979789</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = [1, -2, 3]
&gt;&gt;&gt; [x == y for x, y in zip(a, b)]
[True, False, True]
</snippet></ROW><ROW><id>20979789</id><snippet>map</snippet></ROW><ROW><id>20979789</id><snippet>operator.eq</snippet></ROW><ROW><id>20979789</id><snippet>&gt;&gt;&gt; import operator
&gt;&gt;&gt; map(operator.eq, a, b)
[True, False, True]
</snippet></ROW><ROW><id>20979846</id><snippet>&gt;&gt;&gt; [b for b in range(0,a) for a in range(1,5)]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name 'a' is not defined
</snippet></ROW><ROW><id>20979846</id><snippet>a</snippet></ROW><ROW><id>20979846</id><snippet>&gt;&gt;&gt; list = []
&gt;&gt;&gt; for a in range(1,5):
...     for b in range(0,a):
...         list.append(b)
...
&gt;&gt;&gt; list
[0, 0, 1, 0, 1, 2, 0, 1, 2, 3]
&gt;&gt;&gt; a
4
&gt;&gt;&gt; [b for b in range(0,a) for a in range(1,5)]
[0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]
</snippet></ROW><ROW><id>20979846</id><snippet>&gt;&gt;&gt; [b for a in range(1,5) for b in range(0, a)]
[0, 0, 1, 0, 1, 2, 0, 1, 2, 3]
</snippet></ROW><ROW><id>20979880</id><snippet>import re
p = re.compile(r'^[0123456789abcdef\s]+$')
str = "0000 006e 0022 0002 0156 00ac 0016 0016 0016 0041 0016 0041 0016 0041 0016 0016 0016 0041 0016 0041 0016 0041 0016 0041 0016 0041 0016 0041 0016 0016 0016 0016 0016 0016 0016 0016 0016 0041 0016 0016 0016 0016 0016 0041 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0016 0041 0016 0041 0016 0041 0016 0016 0016 0016 0016 0016 0016 0041 0016 05e0 0156 0055 0016 0e41"

if(p.match(str)):
  print("passed")
else:
  list = re.findall('([^0123456789abcdef\s])+', str)
  print(list)
</snippet></ROW><ROW><id>20979880</id><snippet>0123456789abcdef\s</snippet></ROW><ROW><id>20980213</id><snippet>def distance(x1,x2,y1,y2):
    xx = x1 - x2
    yy = y1 - y2
    xxx = xx ** 2
    yyy = yy ** 2
    xy = xxx + yyy
    return sqrt(xy)

x1 = int(input("x1?: "))
x2 = int(input("x2?: "))
y1 = int(input("y1?: "))
y2 = int(input("y2?: "))

print( distance( x1, x2, y1, y2 ) )
</snippet></ROW><ROW><id>20980284</id><snippet>list.reverse</snippet></ROW><ROW><id>20980284</id><snippet>None</snippet></ROW><ROW><id>20980284</id><snippet>&gt;&gt;&gt;[].reverse() == None
True
</snippet></ROW><ROW><id>20980284</id><snippet>return list[::-1]
</snippet></ROW><ROW><id>20980284</id><snippet>slicing</snippet></ROW><ROW><id>20980284</id><snippet>return None</snippet></ROW><ROW><id>20980284</id><snippet>None</snippet></ROW><ROW><id>20980432</id><snippet>from scrapy.spider import BaseSpider

class DmozSpider(BaseSpider):
    ...
</snippet></ROW><ROW><id>20980560</id><snippet>append</snippet></ROW><ROW><id>20980560</id><snippet>write</snippet></ROW><ROW><id>20980560</id><snippet>'r'</snippet></ROW><ROW><id>20980560</id><snippet>'r+'</snippet></ROW><ROW><id>20980560</id><snippet>numbers != 2 or 4 or 8 or 16 or 32 or 64</snippet></ROW><ROW><id>20980560</id><snippet>numbers not in (2, 4, 8, 16, 32, 64)</snippet></ROW><ROW><id>20980560</id><snippet>close</snippet></ROW><ROW><id>20980560</id><snippet>with</snippet></ROW><ROW><id>20980560</id><snippet>open</snippet></ROW><ROW><id>20980560</id><snippet>close</snippet></ROW><ROW><id>20980560</id><snippet>def name():
    with open('file.txt', 'r+', encoding='utf-8') as j:
        numbers = sum(1 for line in j)
        if numbers not in (2, 4, 8, 16, 32, 64):
            j.write('-')
</snippet></ROW><ROW><id>20980560</id><snippet>or</snippet></ROW><ROW><id>20980560</id><snippet>'-\n'</snippet></ROW><ROW><id>20980560</id><snippet>'-'</snippet></ROW><ROW><id>20980560</id><snippet>'-'</snippet></ROW><ROW><id>20980560</id><snippet>if numbers &lt; 64:
    while numbers not in (2, 4, 8, 16, 32, 64):
        j.write('-\n')
        numbers += 1
</snippet></ROW><ROW><id>20980560</id><snippet>if numbers &lt; 64:
    lower2 = round(2**int(math.log(numbers, 2)))
    if numbers &gt; lower2:
        missing = 2*lower2 - numbers
        j.write('-\n' * missing)
</snippet></ROW><ROW><id>20980560</id><snippet>if numbers &lt; 64:
    higher2 = 2**numbers.bit_length()
    missing = higher2 - numbers
    j.write('-\n' * missing)
</snippet></ROW><ROW><id>20980836</id><snippet>In [23]: df.groupby('File')['Date'].apply(lambda x: x.max())
Out[23]: 
File
2      2012-05-02 00:00:00
dtype: datetime64[ns]
</snippet></ROW><ROW><id>20980908</id><snippet>#! /usr/bin/python2.7

import string

a = 'ds dsf ds sd dsfas' #input
for d in range (26): #the 26 possible Caesar's cypher keys
    shift = string.ascii_lowercase [d:] + string.ascii_lowercase [:d] #rotate the lower ase ascii with offset d
    tt = string.maketrans (string.ascii_lowercase, shift) #convenience function to create a transformation, mapping each character to its encoded counterpart
    print 'd = {}:'.format (d) #print out the key
    print a.translate (tt) #translate the plain text and print it
</snippet></ROW><ROW><id>20981001</id><snippet>print</snippet></ROW><ROW><id>20981001</id><snippet>(0.38 * x) + 1.396 # note simplified maths and syntax
</snippet></ROW><ROW><id>20981001</id><snippet>0.5979999999999999
</snippet></ROW><ROW><id>20981001</id><snippet>float</snippet></ROW><ROW><id>20981001</id><snippet>a = (0.38 * x) + 1.396

if abs(a - 0.598) &lt; 0.0001:
</snippet></ROW><ROW><id>20981090</id><snippet>datetime</snippet></ROW><ROW><id>20981090</id><snippet>import datetime

date = datetime.datetime.strptime(inputvalue, '%d/%b/%Y').date()
</snippet></ROW><ROW><id>20981090</id><snippet>locale.setlocale()</snippet></ROW><ROW><id>20981090</id><snippet>locale.resetlocale()</snippet></ROW><ROW><id>20981090</id><snippet>date.strftime('%d/%m/%Y')
</snippet></ROW><ROW><id>20981090</id><snippet>&gt;&gt;&gt; datetime.datetime.strptime('15/Nov/2013', '%d/%b/%Y').date()
datetime.date(2013, 11, 15)
&gt;&gt;&gt; datetime.datetime.strptime('05/Jan/2014', '%d/%b/%Y').date()
datetime.date(2014, 1, 5)
&gt;&gt;&gt; datetime.datetime.strptime('15/Nov/2013', '%d/%b/%Y').date().strftime('%d/%m/%Y')
'15/11/2013'
&gt;&gt;&gt; datetime.datetime.strptime('05/Jan/2014', '%d/%b/%Y').date().strftime('%d/%m/%Y')
'05/01/2014'
</snippet></ROW><ROW><id>20981110</id><snippet>from tkinter import *


def find_isbn(isbn, lbl):
    if len(isbn) == 10:
        mult = 11
        total = 0
        for i in range(len(isbn)):
            total += int(isbn[i]) * mult
            mult -= 1
        digit_11 = 11 - (total % 11)
        if digit_11 == 10:
            digit_11 = 'X'
        isbn += str(digit_11)
        lbl.config(text=isbn)

top = Tk()
top.geometry("450x450+500+300")
top.title("Test")

button = Button(top, text="OK", command=lambda: find_isbn(mEntry.get(), mlabel2), fg="red", bg="blue")
button.pack()

label = Label(top, text="Please enter the 10 digit number")
label.pack()

mEntry = Entry(top)
mEntry.pack()

mlabel2 = Label(top, text='')
mlabel2.pack()

top.mainloop()
</snippet></ROW><ROW><id>20981110</id><snippet>.mainloop()</snippet></ROW><ROW><id>20981110</id><snippet>.pack()</snippet></ROW><ROW><id>20981110</id><snippet>pack()</snippet></ROW><ROW><id>20981110</id><snippet>grid()</snippet></ROW><ROW><id>20981273</id><snippet>$</snippet></ROW><ROW><id>20981273</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>20981273</id><snippet>$</snippet></ROW><ROW><id>20981273</id><snippet>my_query_reg = re.compile("".join(['Text=', QUERY, '$']), re.MULTILINE)
</snippet></ROW><ROW><id>20981298</id><snippet>&gt;&gt;&gt; test_out = [['I am monkey free.'], ['I explained my life free.']]
&gt;&gt;&gt; A = "monkey free"
&gt;&gt;&gt; replacement = "xxxxxx"
&gt;&gt;&gt; [[string.replace(A, replacement) for string in sublist] for sublist in test_out]
[['I am xxxxxx.'], ['I explained my life free.']]
</snippet></ROW><ROW><id>20981326</id><snippet>import os
import sys
import unittest

STDOUT_FD = os.dup(sys.stdout.fileno())
STDERR_FD = os.dup(sys.stderr.fileno())

with open('stdout.txt', 'w') as f, open('stderr.txt', 'w') as g:
    os.dup2(f.fileno(), sys.stdout.fileno())
    os.dup2(g.fileno(), sys.stderr.fileno())


class MyTest(unittest.TestCase):
    def test_print(self):
        print 'some output'
        self.assertEqual('', '')

    def test_some_moar(self):
        print 'some other cool output'
        self.assertTrue(True)

if __name__ == '__main__':
    unittest.main()

print 'I am printing to stdout.txt'
print &gt;&gt; sys.stderr, 'I am printing to stderr.txt'

# revert the File Descriptors
os.dup2(STDOUT_FD, sys.stdout.fileno())
os.dup2(STDERR_FD, sys.stderr.fileno())

print "Yay! Back to printing in the console"
</snippet></ROW><ROW><id>20981326</id><snippet>some output
some other cool output
</snippet></ROW><ROW><id>20981326</id><snippet>..
----------------------------------------------------------------------
Ran 2 tests in 0.000s

OK
</snippet></ROW><ROW><id>20981326</id><snippet>os.dup</snippet></ROW><ROW><id>20981326</id><snippet>dup</snippet></ROW><ROW><id>20981326</id><snippet>stdout</snippet></ROW><ROW><id>20981326</id><snippet>stderr</snippet></ROW><ROW><id>20981326</id><snippet>os.dup2</snippet></ROW><ROW><id>20981326</id><snippet>fd</snippet></ROW><ROW><id>20981326</id><snippet>fd2</snippet></ROW><ROW><id>20981326</id><snippet>fd2</snippet></ROW><ROW><id>20981326</id><snippet>dup2</snippet></ROW><ROW><id>20981326</id><snippet>stdout</snippet></ROW><ROW><id>20981326</id><snippet>f</snippet></ROW><ROW><id>20981326</id><snippet>stderr</snippet></ROW><ROW><id>20981326</id><snippet>g</snippet></ROW><ROW><id>20981326</id><snippet>dup2</snippet></ROW><ROW><id>20981326</id><snippet>stdout</snippet></ROW><ROW><id>20981326</id><snippet>stderr</snippet></ROW><ROW><id>20981326</id><snippet>dup</snippet></ROW><ROW><id>20981326</id><snippet>dup2</snippet></ROW><ROW><id>20981326</id><snippet>f</snippet></ROW><ROW><id>20981326</id><snippet>g</snippet></ROW><ROW><id>20981326</id><snippet>logging</snippet></ROW><ROW><id>20981326</id><snippet>import logging
import unittest


class MyTest(unittest.TestCase):
    def test_print(self):
        logging.info('some output')
        self.assertEqual('', '')

    def test_some_moar(self):
        logging.info('some other cool output')
        self.assertTrue(True)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    # get the default logger
    logger = logging.getLogger()
    # add a file handler
    logger.addHandler(logging.FileHandler('stdout.txt', mode='w'))
    # set up a stream for all stderr output
    stderr_file = open('stderr.txt', 'w')
    # attach that stream to the testRunner
    unittest.main(testRunner=unittest.TextTestRunner(stream=stderr_file))
</snippet></ROW><ROW><id>20981435</id><snippet>try: # Windows
    from msvcrt import putwch

    def print_to_console(message):
        for c in message:
            putwch(c)
        # newline
        putwch('\r') 
        putwch('\n')
except ImportError: # Unix
    import os

    fd = os.open('/dev/tty', os.O_WRONLY | os.O_NOCTTY)
    tty = os.fdopen(fd, 'w', 1)
    del fd
    def print_to_console(message, *, _file=tty):
        print(message, file=_file)
    del tty
</snippet></ROW><ROW><id>20981435</id><snippet>print_to_console("Hello TTY!")
# -&gt; Hello TTY!
</snippet></ROW><ROW><id>20981629</id><snippet>    self.html = QtWebKit.QWebView()
    # self.web_page = text
    # url = self.web_page
    self.html.setHtml(text)
    # self.html.show()
</snippet></ROW><ROW><id>20981629</id><snippet>    text = """
        &lt;html&gt;
        &lt;style type="text/css"&gt;
            p {color: red}
            div {color: blue}
        &lt;/style&gt;
        &lt;body&gt;   
        &lt;p&gt;This is  a paragraph&lt;/p&gt;
        &lt;div&gt;This is inside div element&lt;/div&gt;
        &lt;/body&gt;   
        &lt;/html&gt;
    """
</snippet></ROW><ROW><id>20981629</id><snippet>    self.html = QtGui.QTextBrowser(self)
    self.html.setHtml(text)
</snippet></ROW><ROW><id>20981780</id><snippet>gen_chart</snippet></ROW><ROW><id>20981780</id><snippet>&lt;img src='{% url "gen_chart" %}' /&gt; 
</snippet></ROW><ROW><id>20981876</id><snippet>__call__</snippet></ROW><ROW><id>20981876</id><snippet>&gt;&gt;&gt; def a(): pass
&gt;&gt;&gt; a
&lt;function a at 0x107063aa0&gt;
&gt;&gt;&gt; type(a)
&lt;type 'function'&gt;
</snippet></ROW><ROW><id>20981876</id><snippet>&gt;&gt;&gt; class A:
...   def a(self): pass
&gt;&gt;&gt; A.a
&lt;unbound method A.a&gt;
&gt;&gt;&gt; type(A.a)
&lt;type 'instancemethod'&gt;

&gt;&gt;&gt; A().a
&lt;bound method A.a of &lt;__main__.A instance at 0x107070d88&gt;&gt;
&gt;&gt;&gt; type(A().a)
&lt;type 'instancemethod'&gt;
</snippet></ROW><ROW><id>20981876</id><snippet>&gt;&gt;&gt; A.a()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method a() must be called with A instance as first argument (got nothing instead)
</snippet></ROW><ROW><id>20981876</id><snippet>__call__</snippet></ROW><ROW><id>20981876</id><snippet>&gt;&gt;&gt; b = A().a
&gt;&gt;&gt; b()
</snippet></ROW><ROW><id>20981876</id><snippet>len(...)</snippet></ROW><ROW><id>20981876</id><snippet>str(...)</snippet></ROW><ROW><id>20981876</id><snippet>&gt;&gt;&gt; len
&lt;built-in function len&gt;
&gt;&gt;&gt; str
&lt;type 'str'&gt;
</snippet></ROW><ROW><id>20982193</id><snippet>none &gt; dhcp, firewall
firewall &gt; ftp
ftp &gt; http
http &gt; tele
</snippet></ROW><ROW><id>20982193</id><snippet>notstarted</snippet></ROW><ROW><id>20982193</id><snippet>m1 (mail, needs dns)
m5 (voice, needs mail)
m6 (chat, needs voice)
m7 (dns, needs chat)
</snippet></ROW><ROW><id>20982193</id><snippet>dns &gt; chat &gt; voice &gt; mail &gt; dns</snippet></ROW><ROW><id>20982434</id><snippet>cur</snippet></ROW><ROW><id>20982434</id><snippet>cur.execute("SELECT * FROM some_table")

for row in cur:
    # some stuff I'm doing
    inner_cur = conn.cursor()
    inner_cur.execute("SELECT * FROM other_table WHERE column = row[1]")
    for inner_row in inner_cur:
        # stuff
</snippet></ROW><ROW><id>20982434</id><snippet>for row in cur:</snippet></ROW><ROW><id>20982434</id><snippet>temp_iter = iter(cur)
while True:
    try:
        row = next(temp_iter)
    except StopIteration:
        break
    # your code runs here
</snippet></ROW><ROW><id>20982434</id><snippet>iter(cur)</snippet></ROW><ROW><id>20982434</id><snippet>__iter__</snippet></ROW><ROW><id>20982434</id><snippet>cur</snippet></ROW><ROW><id>20982434</id><snippet>iter</snippet></ROW><ROW><id>20982434</id><snippet>__iter__</snippet></ROW><ROW><id>20982434</id><snippet>execute</snippet></ROW><ROW><id>20982434</id><snippet>class Cursor(object):
    # other stuff
    def __iter__(self):
        return iter(self.rowset)
    def execute(self, sql, *args):
        self.rowset = self.db.do_the_real_work(sql, *args)
</snippet></ROW><ROW><id>20982636</id><snippet>/graph/</snippet></ROW><ROW><id>20982636</id><snippet>/services/</snippet></ROW><ROW><id>20982636</id><snippet>preventDefault()</snippet></ROW><ROW><id>20982636</id><snippet>$('#select-graph').submit(function(event) {
    event.preventDefault();

    $.ajax({
        url: 'https://www.google.com/jsapi?callback',
        cache: true,
    /* rest of your code */
    ....
});
</snippet></ROW><ROW><id>20982636</id><snippet>return HttpResponse(
    json.dumps({'array': data}, cls=SpecialEncoder),
    content_type="application/json",
    context_instance=RequestContext(request)
)
</snippet></ROW><ROW><id>20982829</id><snippet>import math

upto = 1000000

a = [True] * upto
p = []

for n in xrange(2,upto):
    if a[n]:
        p.append(n)
        for k in xrange(2,(upto+n-1)//n):
            a[k*n] = False

print('primes generated')

s = []
p = set(p)
for e in p:
    pr=True
    w=str(e)
    if all(c not in w for c in ['2','4','6','8','5','0']):
        for x in (w[i:]+w[:i] for i in range(len(w))):
            if int(x) not in p:
                pr=False
                break
        if pr:
            s.append(e)

print(s)
</snippet></ROW><ROW><id>20982829</id><snippet>x in p</snippet></ROW><ROW><id>20982829</id><snippet>import math

upto=1000000

sieve = [True] * upto
primes = set()

for n in xrange(2,upto):
    if sieve[n]:
        primes.add(n)
        for k in xrange(2,(upto+n-1)//n):
            sieve[k*n] = False

def good(e):
    w = str(e)
    for c in w:
        if c not in '1379':
            return False
    for i in xrange(1,len(w)):
        x = int(w[i:]+w[:i])
        if x not in primes:
            return False
    return True

print filter(good,primes)
</snippet></ROW><ROW><id>20982860</id><snippet>for</snippet></ROW><ROW><id>20982860</id><snippet>self</snippet></ROW><ROW><id>20982860</id><snippet>class Simple(object):
    def __init__(self, a):
        self.a = a

    print("Here we go!")
    for i in xrange(self.a):
        print(i)
</snippet></ROW><ROW><id>20982860</id><snippet>$ python simple.py
Here we go!
Traceback (most recent call last):
  File "simple.py", line 4, in &lt;module&gt;
    class Simple(object):
  File "simple.py", line 9, in Simple
    for i in xrange(self.a):
NameError: name 'self' is not defined
</snippet></ROW><ROW><id>20982937</id><snippet>name</snippet></ROW><ROW><id>20982937</id><snippet>place</snippet></ROW><ROW><id>20982937</id><snippet>thing_token</snippet></ROW><ROW><id>20982937</id><snippet>column_wrapper</snippet></ROW><ROW><id>20982937</id><snippet>\\n</snippet></ROW><ROW><id>20982937</id><snippet>\n</snippet></ROW><ROW><id>20982937</id><snippet>def column_wrapper(reader):
    for name, place, thing in reader:
        for split_thing in thing.strip().split('\\n'):
            if split_thing:
                yield name, place, split_thing
</snippet></ROW><ROW><id>20982937</id><snippet>with open('filewithdata.csv', 'r') as csvfile:
    reader = csv.reader(csvfile)
    data = [[data, name, thing] for data, name, thing in column_wrapper(reader)]
</snippet></ROW><ROW><id>20982937</id><snippet>column_wrapper</snippet></ROW><ROW><id>20982937</id><snippet>data = []
with open('filewithdata.csv', 'r') as csvfile:
    reader = csv.reader(csvfile)
    for row in reader:
        name, place, thing = tuple(row)
        if '\\n' in thing:
            for item in thing.split('\\n'):
                if item != '\n':
                    data.append([name, place, item)]
</snippet></ROW><ROW><id>20982937</id><snippet>column_wrapper</snippet></ROW><ROW><id>20982937</id><snippet>import csv</snippet></ROW><ROW><id>20982946</id><snippet>&gt;&gt;&gt; def main():
...     print('hi')
... 
&gt;&gt;&gt; # nothing printed
... 
&gt;&gt;&gt; main()
hi
</snippet></ROW><ROW><id>20982946</id><snippet>if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>20982946</id><snippet>python blah.py</snippet></ROW><ROW><id>20982946</id><snippet>main()</snippet></ROW><ROW><id>20982946</id><snippet>main()</snippet></ROW><ROW><id>20982946</id><snippet>if __name__ == '__main__':
    main() # initialise the window
    while True:
        mainMenu() # draw the mainMenu
        grid()     # draw the grid
        counters() # draw the counters

        # process events in this loop
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                 pygame.quit(); sys.exit();
            if event.type == pygame.KEYDOWN and event.key == pygame.K_SPACE:
                #Dice roll
                diceRoll = random.randint(1, 4)
                diceRollLabel = myFont3.render(str(diceRoll), 1, black)
                window.blit(diceRollLabel, (580, 35))
                print("Dice roll test", diceRoll)
                pygame.display.update()
</snippet></ROW><ROW><id>20983299</id><snippet>for dct in dictionary_list:
    if 'gene_name' in dct:
        dct['gene_name'] = str(dct['gene_name'])
</snippet></ROW><ROW><id>20983299</id><snippet>isinstance(value, six.string_types)</snippet></ROW><ROW><id>20983399</id><snippet>set terminal png size 1920,1080
set datafile sep ","
unset key
set xtics 0,5,255
set title "mytitle"
set autoscale cbfix
plot "fft.csv" matrix using 1:3:2 with lines palette
</snippet></ROW><ROW><id>20983491</id><snippet>[Settings]
gtk-theme-name = Adwaita
#gtk-font-name = Arial 10
</snippet></ROW><ROW><id>20983536</id><snippet>matplotlib</snippet></ROW><ROW><id>20983536</id><snippet>matplotlib</snippet></ROW><ROW><id>20983536</id><snippet>python setup.py build
</snippet></ROW><ROW><id>20983536</id><snippet>png.h</snippet></ROW><ROW><id>20983536</id><snippet>-devel</snippet></ROW><ROW><id>20983536</id><snippet>python-devel</snippet></ROW><ROW><id>20983536</id><snippet>libpng12-devel</snippet></ROW><ROW><id>20983536</id><snippet>python setup.py install --user
</snippet></ROW><ROW><id>20983536</id><snippet>$HOME/.local/lib/pythonX.X/site-packages</snippet></ROW><ROW><id>20983590</id><snippet>__init__.pxd</snippet></ROW><ROW><id>20983590</id><snippet>    ctypedef double       npy_double
</snippet></ROW><ROW><id>20983590</id><snippet>ctypedef npy_double     float_t
</snippet></ROW><ROW><id>20983590</id><snippet>float_t</snippet></ROW><ROW><id>20983590</id><snippet>double</snippet></ROW><ROW><id>20983590</id><snippet>np.float_t</snippet></ROW><ROW><id>20983609</id><snippet>class Angle(float):
    def __init__(self, x):
         self.angle = x
    def double(self):
         self.angle *= 2
a = Angle(1)
a.double()
print a # prints 1.0
print a.angle # prints 2
a *= 5
print a # prints 5.0
print a.angle # throws AttributeError
</snippet></ROW><ROW><id>20983609</id><snippet>a.angle</snippet></ROW><ROW><id>20983609</id><snippet>float(a)</snippet></ROW><ROW><id>20983609</id><snippet>a.angle</snippet></ROW><ROW><id>20983609</id><snippet>float</snippet></ROW><ROW><id>20983609</id><snippet>a *= 5</snippet></ROW><ROW><id>20983609</id><snippet>Angle</snippet></ROW><ROW><id>20983609</id><snippet>Object</snippet></ROW><ROW><id>20983609</id><snippet>float</snippet></ROW><ROW><id>20983637</id><snippet>class Genome(object):
    i = 0
    def __init__(self, newi = None):
        if newi is None:
            newi = Genome.i
            Genome.i += 1
        self.i = newi
    def __repr__(self):
        return 'Genome({})'.format(self.i)
    def children(self):
        return self._children

g1, g2 = Genome(), Genome()
g1._children = [Genome(), Genome()]
g2._children = [Genome(), Genome(), Genome()]
a_list_of_genomes = [g1, g2]
all_genomes = [g1.children()[0], g2.children()[2]]
</snippet></ROW><ROW><id>20983637</id><snippet>valid_children = set()
for focus_genome in a_list_of_genomes: # a list of objects
    for child in focus_genome.children(): # a list of objects (again)
        if child in all_genomes:
            valid_children.update(set([child]))
print(valid_children)
</snippet></ROW><ROW><id>20983637</id><snippet>{Genome(2), Genome(6)}</snippet></ROW><ROW><id>20983637</id><snippet>def threaded_function(focus_genome):
    for child in focus_genome.children(): # a list of objects (again)
        if child in all_genomes:
            valid_children.update(set([child]))
</snippet></ROW><ROW><id>20983637</id><snippet>for focus_genome in a_list_of_genomes: # a list of objects
    t = threading.Thread(target=threaded_function, args=(focus_genome,))
    t.start()
    t.join()

print(valid_children)
</snippet></ROW><ROW><id>20983637</id><snippet>{Genome(2), Genome(6)}</snippet></ROW><ROW><id>20983637</id><snippet>join</snippet></ROW><ROW><id>20983637</id><snippet>threads = [threading.Thread(target=threaded_function, args=(focus_genome,))
           for focus_genome in a_list_of_genomes]
for thread in threads:
    thread.start()
for thread in threads:
    thread.join()
</snippet></ROW><ROW><id>20983637</id><snippet>valid_children_lock = Lock()

def threaded_function(focus_genome):
    for child in focus_genome.children(): # a list of objects (again)
        if child in all_genomes:
            with valid_children_lock():
                valid_children.update(set([child]))
</snippet></ROW><ROW><id>20983637</id><snippet>valid_children</snippet></ROW><ROW><id>20983637</id><snippet>focus_genome</snippet></ROW><ROW><id>20983637</id><snippet>union</snippet></ROW><ROW><id>20983637</id><snippet>def threaded_task(focus_genome):
    valid_children = set()
    for child in focus_genome.children(): # a list of objects (again)
        if child in all_genomes:
            valid_children.add(child)
    return valid_children

valid_children = set()
with multiprocessing.Pool() as pool:
    for subset in pool.imap_unordered(threaded_task, a_list_of_genomes):
        valid_children.update(subset)
</snippet></ROW><ROW><id>20983637</id><snippet>def threaded_task(focus_genome):
    return {child for child in focus_genome.children() if child in all_genomes}
with multiprocessing.Pool() as pool:
    valid_children = set.union(pool.imap_unordered(threaded_task, a_list_of_genomes))
</snippet></ROW><ROW><id>20983643</id><snippet>import os, shutil

def file_input(file_name):                
    newlist = []                                                #create new list
    for names in os.listdir(file_name):                         #loops through directory
        if names.endswith(".txt") or names.endswith(".doc"):    #returns only extensions required    
            full_file_name = os.path.join(file_name, names)     #creates full file path name - required for further file modification
            newlist.append(full_file_name)                      #adds item to list
            dst = os.path.join(file_name + "/target_files")

            if not os.path.exists(dst):
                os.makedirs(dst)

            full_file_name = os.path.join(file_name, names)
            if (os.path.exists(full_file_name)):
                print "Success!"
                shutil.copy(full_file_name, dst)

def find_file():
    file_name = raw_input("\nPlease carefully input full directory pathway.\nUse capitalisation as necessary.\nFile path: ")
    file_name = "/home/praveen/programming/trash/documents"                            #permanent input for testing!
    return file_input(file_name)

find_file()
</snippet></ROW><ROW><id>20983665</id><snippet>import random

li=[]
for i in range(50):
    li.append('{}-{}-{}'.format(random.randrange(1,999), random.randrange(1,999), random.randrange(100,9999))) 
</snippet></ROW><ROW><id>20983665</id><snippet>import re
new_li=[e for e in li if re.match(r'\d\d\d-\d\d\d-\d\d\d\d', e)]

print new_li
print set(li)-set(new_li)    # show the ones removed...
</snippet></ROW><ROW><id>20983665</id><snippet>.apply</snippet></ROW><ROW><id>20983665</id><snippet>df=pd.DataFrame(li, columns=['Phone'])
pat=re.compile(r'^\d{3}-\d{3}-\d{4}$')
print df
print df[df['Phone'].apply(lambda s: bool(pat.search(s)))]
</snippet></ROW><ROW><id>20983711</id><snippet>string.partition</snippet></ROW><ROW><id>20983711</id><snippet>def parse(string):
    front, paren, back = string.partition('(')
    return [front, paren + back]

def parse_many(string):
    return [parse(s) for s in string.split()]

aString = "foo1(bar1(foo2bar2)) foo3(bar3)"
print parse_many(aString)
</snippet></ROW><ROW><id>20983711</id><snippet>import re

aString = "foo1(bar1(foo2bar2)) foo3(bar3)"
aList = aString.split()
newList = []
for part in aList:
    prog = re.compile(r'([a-zA-Z0-9]*)(.*)')
    newList.append(prog.split(part)[1:3])

print newList
</snippet></ROW><ROW><id>20983740</id><snippet>else</snippet></ROW><ROW><id>20983740</id><snippet>response = raw_input("trainer 2 wants to battle!  which pokemon do you choose!?")
if response in pokemon_dict:
    print "player1 selected " + response + "!"  
    p1 = pokemon_dict[response]
    player2_select(p1)
else:
    print "That's not a pokemon! yet..."
    player1_select()
</snippet></ROW><ROW><id>20983740</id><snippet>response in pokemon_dict</snippet></ROW><ROW><id>20983897</id><snippet>a.pack(fill="x")
</snippet></ROW><ROW><id>20983907</id><snippet>asyncore</snippet></ROW><ROW><id>20983907</id><snippet>import asyncore
import socket
import sys

HOST = ''   # Symbolic name meaning all available interfaces
PORT = 9992 # Arbitrary non-privileged port

class ExampleHandler(asyncore.dispatcher_with_send):
    data = ''

    def handle_read(self):
        self.data += self.recv(1024)
        lines = self.data.split('\n')
        if len(lines) &gt; 1:
            self.data = lines[-1]
            for line in lines:
                if not line: continue
                if line == 'CLOSE':
                    global s
                    self.send('You have requested to destroy the connection...\r\n')
                    self.close()
                    # To exit asyncore.loop() immediately,
                    # closing all client connections
                    raise asyncore.ExitNow()
                    # If you want to finish processing the client connections, you
                    # could instead close the server, 
                    server.close()
                else:
                    self.send('OK...%s\r\n' % line)

    def handle_write(self):
        self.send('Welcome to the server. Type something and hit enter\r\n')

class ExampleServer(asyncore.dispatcher):

    def __init__(self, host, port):
        asyncore.dispatcher.__init__(self)
        self.create_socket(socket.AF_INET, socket.SOCK_STREAM)
        self.set_reuse_addr()
        self.bind((host, port))
        self.listen(5)

    def handle_accept(self):
        pair = self.accept()
        if pair is not None:
            sock, addr = pair
            print 'Connected with ' + addr[0] + ':' + str(addr[1])
            handler = ExampleHandler(sock)
        else:
            print 'socket issue sorry'

server = ExampleServer(HOST, PORT)
try:
    asyncore.loop()
except asyncore.ExitNow:
    pass
</snippet></ROW><ROW><id>20984194</id><snippet>pos != len(menulist)</snippet></ROW><ROW><id>20984194</id><snippet>menulist[pos+1]</snippet></ROW><ROW><id>20984194</id><snippet>IndexError</snippet></ROW><ROW><id>20984194</id><snippet>pos == len(menulist) - 1</snippet></ROW><ROW><id>20984194</id><snippet>if pos &gt; (len(menulist) - 2):
</snippet></ROW><ROW><id>20984288</id><snippet># Save the string (e.g. '12.5,67.4,78.5')
number_string = raw_input("Enter any positive floats: ")

# Initialize a variable to hold the sum of the numbers
tot = 0

# Iterate over all numbers in the string. The string is splitted 
# at each comma, thus resulting in a list like `['12.5', '67.4', '78.5']`
for num in number_string.split(','):
    # But every element in the list is a string, so you need to 
    # convert them to floats, and add each of them to the total sum
    tot += float(num)

# Print the total sum
print tot
</snippet></ROW><ROW><id>20984412</id><snippet>["not " * (1 - x) + y.obj_dict['self'].get_topic() for x,y in zip(comb, self.parents)]
</snippet></ROW><ROW><id>20984431</id><snippet>eval</snippet></ROW><ROW><id>20984431</id><snippet>&gt;&gt;&gt; eval('5+4')
Out[15]: 9
&gt;&gt;&gt; eval('5*4')
Out[16]: 20
&gt;&gt;&gt; eval('5-4')
Out[17]: 1
</snippet></ROW><ROW><id>20984461</id><snippet>itertools.product()</snippet></ROW><ROW><id>20984461</id><snippet>&gt;&gt;&gt; years = [2012,2013,2011,2014,2015]
&gt;&gt;&gt; sessions = ["AC", "AB"]
&gt;&gt;&gt; periods = ["I", "II", "III"]
&gt;&gt;&gt; 
&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; 
&gt;&gt;&gt; list(product(years, sessions, periods))
[(2012, 'AC', 'I'), (2012, 'AC', 'II'), (2012, 'AC', 'III'), (2012, 'AB', 'I'), (2012, 'AB', 'II'), (2012, 'AB', 'III'), (2013, 'AC', 'I'), (2013, 'AC', 'II'), (2013, 'AC', 'III'), (2013, 'AB', 'I'), (2013, 'AB', 'II'), (2013, 'AB', 'III'), (2011, 'AC', 'I'), (2011, 'AC', 'II'), (2011, 'AC', 'III'), (2011, 'AB', 'I'), (2011, 'AB', 'II'), (2011, 'AB', 'III'), (2014, 'AC', 'I'), (2014, 'AC', 'II'), (2014, 'AC', 'III'), (2014, 'AB', 'I'), (2014, 'AB', 'II'), (2014, 'AB', 'III'), (2015, 'AC', 'I'), (2015, 'AC', 'II'), (2015, 'AC', 'III'), (2015, 'AB', 'I'), (2015, 'AB', 'II'), (2015, 'AB', 'III')]
</snippet></ROW><ROW><id>20984461</id><snippet>product()</snippet></ROW><ROW><id>20984691</id><snippet>xrbdic[parts[0]] = (pa[1], pa[2], pa[3])
</snippet></ROW><ROW><id>20984691</id><snippet>NameError</snippet></ROW><ROW><id>20984691</id><snippet>parts</snippet></ROW><ROW><id>20984691</id><snippet>pa</snippet></ROW><ROW><id>20984691</id><snippet>line.split()</snippet></ROW><ROW><id>20984691</id><snippet>close</snippet></ROW><ROW><id>20984691</id><snippet>with</snippet></ROW><ROW><id>20984691</id><snippet>xrbdic = {}
with open("xrb.txt") as f:
    for line in f:
        pa = line.split()
        xrbdic[pa[0]] = pa[1:]
</snippet></ROW><ROW><id>20984691</id><snippet>with open('xrb.txt') as f:
    xrbdic = {pa[0]: pa[1:] for pa in map(str.split, f)}
</snippet></ROW><ROW><id>20984695</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; grammar = nltk.parse_cfg("""
... NP -&gt; Det N | Det N PP
... N -&gt; 'Kim' | 'Dana' | 'everyone'
... """)
&gt;&gt;&gt; sent = "Kim".split()
&gt;&gt;&gt; parser = nltk.ChartParser(grammar)
&gt;&gt;&gt; print parser.nbest_parse(sent)
[]
</snippet></ROW><ROW><id>20984695</id><snippet>NP -&gt; N</snippet></ROW><ROW><id>20984695</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; grammar = nltk.parse_cfg("""
... NP -&gt; Det N | Det N PP | N
... N -&gt; 'Kim' | 'Dana' | 'everyone'
... """)
&gt;&gt;&gt; sent = "Kim".split()
&gt;&gt;&gt; parser = nltk.ChartParser(grammar)
&gt;&gt;&gt; print parser.nbest_parse(sent)
[Tree('NP', [Tree('N', ['Kim'])])]
</snippet></ROW><ROW><id>20984695</id><snippet>Kim arrived or Dana and</snippet></ROW><ROW><id>20984695</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; grammar = nltk.parse_cfg("""
... S -&gt; NP VP
... PP -&gt; P NP
... NP -&gt; Det N | Det N PP | N
... VP -&gt; V NP | VP PP
... N -&gt; 'Kim' | 'Dana' | 'everyone'
... V -&gt; 'arrived' | 'left' |'cheered'
... P -&gt; 'or' | 'and'
... """)
&gt;&gt;&gt; sent = "Kim arrived".split()
&gt;&gt;&gt; parser = nltk.ChartParser(grammar)
&gt;&gt;&gt; print parser.nbest_parse(sent)
[]
&gt;&gt;&gt; 
&gt;&gt;&gt; sent = "Kim arrived or".split()
&gt;&gt;&gt; parser = nltk.ChartParser(grammar)
&gt;&gt;&gt; print parser.nbest_parse(sent)
[]
</snippet></ROW><ROW><id>20984695</id><snippet>VP</snippet></ROW><ROW><id>20984695</id><snippet>P</snippet></ROW><ROW><id>20984695</id><snippet>V</snippet></ROW><ROW><id>20984695</id><snippet>NP</snippet></ROW><ROW><id>20984695</id><snippet>VP</snippet></ROW><ROW><id>20984695</id><snippet>P</snippet></ROW><ROW><id>20984695</id><snippet>VP -&gt; V PP</snippet></ROW><ROW><id>20984695</id><snippet>VP -&gt; VP PP</snippet></ROW><ROW><id>20984695</id><snippet>&gt;&gt;&gt; import nltk
&gt;&gt;&gt; grammar = nltk.parse_cfg("""
... S -&gt; NP VP
... PP -&gt; P NP
... NP -&gt; Det N | Det N PP | N
... VP -&gt; V NP | V PP
... N -&gt; 'Kim' | 'Dana' | 'everyone'
... V -&gt; 'arrived' | 'left' |'cheered'
... P -&gt; 'or' | 'and'
... """)
&gt;&gt;&gt; sent = "Kim arrived or Dana".split()
&gt;&gt;&gt; parser = nltk.ChartParser(grammar)
&gt;&gt;&gt; print parser.nbest_parse(sent)
[Tree('S', [Tree('NP', [Tree('N', ['Kim'])]), Tree('VP', [Tree('V', ['arrived']), Tree('PP', [Tree('P', ['or']), Tree('NP', [Tree('N', ['Dana'])])])])])]
</snippet></ROW><ROW><id>20984695</id><snippet>&gt;&gt; import nltk
&gt;&gt;&gt; grammar = nltk.parse_cfg("""
... S -&gt; NP VP
... PP -&gt; P NP
... NP -&gt; Det N | Det N PP | N
... VP -&gt; V NP | V PP
... N -&gt; 'Kim' | 'Dana' | 'everyone'
... V -&gt; 'arrived' | 'left' |'cheered'
... P -&gt; 'or' | 'and'
... """)
&gt;&gt;&gt; sent = "Kim arrived or Dana left".split()
&gt;&gt;&gt; parser = nltk.ChartParser(grammar)
&gt;&gt;&gt; print parser.nbest_parse(sent)
[]
&gt;&gt;&gt; sent = "Kim arrived or Dana left and".split()
&gt;&gt;&gt; parser = nltk.ChartParser(grammar)
&gt;&gt;&gt; print parser.nbest_parse(sent)
[]
&gt;&gt;&gt; 
&gt;&gt;&gt; sent = "Kim arrived or Dana left and everyone".split()
&gt;&gt;&gt; parser = nltk.ChartParser(grammar)
&gt;&gt;&gt; print parser.nbest_parse(sent)
[]
&gt;&gt;&gt; 
&gt;&gt;&gt; sent = "Kim arrived or Dana left and everyone cheered".split()
&gt;&gt;&gt; parser = nltk.ChartParser(grammar)
&gt;&gt;&gt; print parser.nbest_parse(sent)
[]
</snippet></ROW><ROW><id>20984695</id><snippet>[[[[[[[[Kim] arrived] or] Dana] left] and] everyone] cheered]
</snippet></ROW><ROW><id>20984695</id><snippet>[[[Kim arrived] or [Dana left]] and [everyone cheered]]</snippet></ROW><ROW><id>20984695</id><snippet>[[Kim arrived] or [[Dana left] and [everyone cheered]]]</snippet></ROW><ROW><id>20984695</id><snippet>import nltk
grammar = nltk.parse_cfg("""
S -&gt; CP | VP 
CP -&gt; VP C VP | CP C VP | VP C CP
VP -&gt; NP V 
NP -&gt; 'Kim' | 'Dana' | 'everyone'
V -&gt; 'arrived' | 'left' |'cheered'
C -&gt; 'or' | 'and'
""")

print "======= Kim arrived ========="
sent = "Kim arrived".split()
parser = nltk.ChartParser(grammar)
for t in parser.nbest_parse(sent):
    print t

print "\n======= Kim arrived or Dana left ========="
sent = "Kim arrived or Dana left".split()
parser = nltk.ChartParser(grammar)
for t in parser.nbest_parse(sent):
    print t 

print "\n=== Kim arrived or Dana left and everyone cheered ===="
sent = "Kim arrived or Dana left and everyone cheered".split()
parser = nltk.ChartParser(grammar)
for t in parser.nbest_parse(sent):
    print t
</snippet></ROW><ROW><id>20984695</id><snippet>[out]</snippet></ROW><ROW><id>20984695</id><snippet>======= Kim arrived =========
(S (VP (NP Kim) (V arrived)))

======= Kim arrived or Dana left =========
(S (CP (VP (NP Kim) (V arrived)) (C or) (VP (NP Dana) (V left))))

=== Kim arrived or Dana left and everyone cheered ====
(S
  (CP
    (CP (VP (NP Kim) (V arrived)) (C or) (VP (NP Dana) (V left)))
    (C and)
    (VP (NP everyone) (V cheered))))
(S
  (CP
    (VP (NP Kim) (V arrived))
    (C or)
    (CP
      (VP (NP Dana) (V left))
      (C and)
      (VP (NP everyone) (V cheered)))))
</snippet></ROW><ROW><id>20984746</id><snippet>{('column_%d' % i): index[i:81:9] for i in xrange(9)}
</snippet></ROW><ROW><id>20984746</id><snippet>index = range(0,81)
</snippet></ROW><ROW><id>20984746</id><snippet>{('column_%d' % i): range(i,81, 9) for i in xrange(9)}
</snippet></ROW><ROW><id>20984746</id><snippet>import timeit
&gt;&gt;&gt; timeit.timeit("{('column_%d' % i): range(i,81, 9) for i in xrange(9)}", number = 100000)
1.3790168762207031
&gt;&gt;&gt; timeit.timeit("index=range(0,81);{('column_%d' % i): index[i:81:9] for i in xrange(9)}", number = 100000)
1.1949927806854248
</snippet></ROW><ROW><id>20984746</id><snippet>&gt;&gt;&gt; timeit.timeit("{('column_' + str(i)): range(i,81,9) for i in xrange(9)}", number = 100000)
0.914525032043457
</snippet></ROW><ROW><id>20984746</id><snippet>i</snippet></ROW><ROW><id>20984746</id><snippet>&gt;&gt;&gt; timeit.timeit("{('column_%d' % i): range(i,81, 9) for i in xrange(90)}", number = 100000)
12.220430135726929
&gt;&gt;&gt; timeit.timeit("index=range(0,81);{('column_%d' % i): index[i:81:9] for i in xrange(90)}", number = 100000)
9.669343948364258
&gt;&gt;&gt; timeit.timeit("index=range(0,81);{('column_' + str(i)): index[i:81:9] for i in xrange(90)}", number = 100000)
7.163957118988037
</snippet></ROW><ROW><id>20984946</id><snippet>_make_layout</snippet></ROW><ROW><id>20984946</id><snippet>Frame</snippet></ROW><ROW><id>20984946</id><snippet>self.frame.user_name_label = Label(self.frame, text="User name:")
self.frame.user_name_text = Entry(self.frame)
# etc.
</snippet></ROW><ROW><id>20984946</id><snippet>Toplevel</snippet></ROW><ROW><id>20984946</id><snippet>Frame</snippet></ROW><ROW><id>20985021</id><snippet>sudo add-apt-repository ppa:kivy-team/kivy-daily</snippet></ROW><ROW><id>20985021</id><snippet>-daily</snippet></ROW><ROW><id>20985164</id><snippet>bind(port)</snippet></ROW><ROW><id>20985164</id><snippet>start(num_procs)</snippet></ROW><ROW><id>20985173</id><snippet>widget.after</snippet></ROW><ROW><id>20985173</id><snippet>plane = graph.PlaneIteration(...)
def plotNextPoint():
    try:
        real, imag = plane.next()
    except StopIteration:
        return
    c = complex(real, imag)
    ...
    self.graph.plot(c, color)
    self.graph.after(0, plotNextPoint)
plotNextPoint()
</snippet></ROW><ROW><id>20985173</id><snippet>plotNextPoint</snippet></ROW><ROW><id>20985173</id><snippet>for _ in xrange(n)</snippet></ROW><ROW><id>20985173</id><snippet>n</snippet></ROW><ROW><id>20985186</id><snippet>py.test</snippet></ROW><ROW><id>20985186</id><snippet>/App</snippet></ROW><ROW><id>20985186</id><snippet>/App/App</snippet></ROW><ROW><id>20985186</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>20985186</id><snippet>import app</snippet></ROW><ROW><id>20985186</id><snippet>/App/App</snippet></ROW><ROW><id>20985186</id><snippet>/App/App</snippet></ROW><ROW><id>20985186</id><snippet>__init__.py</snippet></ROW><ROW><id>20985186</id><snippet>from App import app</snippet></ROW><ROW><id>20985186</id><snippet>__init__.py</snippet></ROW><ROW><id>20985186</id><snippet>/App/App</snippet></ROW><ROW><id>20985186</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>20985186</id><snippet>App import app</snippet></ROW><ROW><id>20985186</id><snippet>/App</snippet></ROW><ROW><id>20985186</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>20985186</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>20985186</id><snippet>/App</snippet></ROW><ROW><id>20985222</id><snippet>get_current_page_value()
</snippet></ROW><ROW><id>20985222</id><snippet>get_current_page_value()['current_page_value02']
</snippet></ROW><ROW><id>20985222</id><snippet>get_current_page_value()['current_page_value02']</snippet></ROW><ROW><id>20985222</id><snippet>get_current_page_value</snippet></ROW><ROW><id>20985222</id><snippet>resume_menu_list</snippet></ROW><ROW><id>20985585</id><snippet>Time32Col</snippet></ROW><ROW><id>20985585</id><snippet>time</snippet></ROW><ROW><id>20985585</id><snippet>int(time.mktime(time.strptime("1/1/2012", "%m/%d/%y")))</snippet></ROW><ROW><id>20985601</id><snippet>import json
import urllib2

r = urllib2.urlopen("http://graph.facebook.com/{}/picture".format(id))
json_string = r.read()
userdata = json.loads(json_string)
</snippet></ROW><ROW><id>20985601</id><snippet>data = s.recv(1024)
header, _, json_string = data.partition('\r\n\r\n')
userdata = json.loads(json_string)
</snippet></ROW><ROW><id>20985601</id><snippet>recv</snippet></ROW><ROW><id>20985906</id><snippet>self</snippet></ROW><ROW><id>20985906</id><snippet>parent</snippet></ROW><ROW><id>20985906</id><snippet>None</snippet></ROW><ROW><id>20985906</id><snippet>QDesktopWidget</snippet></ROW><ROW><id>20985906</id><snippet>self</snippet></ROW><ROW><id>20985906</id><snippet>self</snippet></ROW><ROW><id>20985906</id><snippet>self.spinner = QtGui.QSpinBox()
hbox = Qt.QHBoxLayout()
hbox.addWidget(self.spinner)
self.addLayout(hbox)
</snippet></ROW><ROW><id>20985906</id><snippet>QSpinBox</snippet></ROW><ROW><id>20985906</id><snippet>addWidget</snippet></ROW><ROW><id>20985906</id><snippet>self.spinner</snippet></ROW><ROW><id>20985906</id><snippet>self</snippet></ROW><ROW><id>20985906</id><snippet>self.spinner</snippet></ROW><ROW><id>20986083</id><snippet>from random import choice
import xlrd

wb = xlrd.open_workbook("quotes.xlsx")
sh1 = wb.sheet_by_index(0)
column = 2 # or whatever column you want to select from

print choice(sh1.col(column)).value
</snippet></ROW><ROW><id>20986083</id><snippet>Sheet.col()</snippet></ROW><ROW><id>20986083</id><snippet>random.choice</snippet></ROW><ROW><id>20986083</id><snippet>import random

startRow = 3
endRow = 29
row = random.randint(startRow, endRow)
print sh1.cell(column, row).value
</snippet></ROW><ROW><id>20986301</id><snippet>from urllib.request import urlopen
from bs4 import BeautifulSoup

html = urlopen("http://finance.yahoo.com/q?s=AAPL&amp;q1=1")
soup = BeautifulSoup(html)
my_span = soup.find('span', {'id': 'yfs_l84_aapl'})
print(my_span.text)
</snippet></ROW><ROW><id>20986301</id><snippet>540.04
</snippet></ROW><ROW><id>20986322</id><snippet>class countcalls(object):
   "Decorator that keeps track of the number of times a function is called."

   __instances = {}

   def __init__(self, f):
      self.__f = f
      self.__numcalls = 0
      countcalls.__instances[f] = self
      self.__doc__ = f.func_doc
      self.__name__ = f.func.func_name

   def __call__(self, *args, **kwargs):
      self.__numcalls += 1
      return self.__f(*args, **kwargs)

   def count(self):
      "Return the number of times the function f was called."
      return countcalls.__instances[self.__f].__numcalls

   @staticmethod
   def counts():
      "Return a dict of {function: # of calls} for all registered functions."
      return dict([(f.__name__, countcalls.__instances[f].__numcalls) for f in countcalls.__instances])

@countcalls
def fib(n):
    if n &lt; 0:
        raise ValueError('n must be &gt; 0')
    if n == 0 or n == 1:
        return 1

    return fib(n-1) + fib(n-2)

if __name__ == '__main__':
    print('Calling fib(3)...')
    x = fib(3)
    print('fib(3) = {0}'.format(x))
    print('fib was called a total of {0} time(s).'.format(fib.count())) 

    print('Calling fib(3) again...')
    x = fib(3)
    print('fib(3) = {0}'.format(x))

    print('fib was called a total of {0} time(s).'.format(fib.count())) 
</snippet></ROW><ROW><id>20986327</id><snippet>SwapAgain = True
myList = list(myTuple)

while SwapAgain == True:
    SwapAgain = False
    for i in xrange(len(myList)):
        if myList[i] &gt; myList[i + 1]:
            SwapAgain = True
            temp = myList[i]
            myList[i] = myList[i + 1]
            myList[i + 1] = temp

return myList # or return tuple(myList) if you want
</snippet></ROW><ROW><id>20986328</id><snippet>eval(nav_str, {'__builtins__':{'set' : set}}, {})
</snippet></ROW><ROW><id>20986328</id><snippet>eval</snippet></ROW><ROW><id>20986328</id><snippet>&gt;&gt;&gt; def foo(): print 'Hi'
&gt;&gt;&gt; foo()
Hi
&gt;&gt;&gt; eval('foo()')
Hi
</snippet></ROW><ROW><id>20986328</id><snippet>eval</snippet></ROW><ROW><id>20986328</id><snippet>__import__('os').system('rm -rf /')</snippet></ROW><ROW><id>20986328</id><snippet>&gt;&gt;&gt; def foo(): print 'Hi!'
&gt;&gt;&gt; def bar(): print 'Bye!'
&gt;&gt;&gt; eval('foo()')
Hi!
&gt;&gt;&gt; eval('foo()', {'__builtins__': {}}, {})
NameError: name 'foo' is not defined
&gt;&gt;&gt; eval('foo()', {'__builtins__': {'foo': bar}}, {})
Bye!
</snippet></ROW><ROW><id>20986328</id><snippet>set</snippet></ROW><ROW><id>20986328</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>20986328</id><snippet>literal_eval</snippet></ROW><ROW><id>20986328</id><snippet>set()</snippet></ROW><ROW><id>20986328</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>20986328</id><snippet>set()</snippet></ROW><ROW><id>20986328</id><snippet>eval</snippet></ROW><ROW><id>20986328</id><snippet>eval</snippet></ROW><ROW><id>20986328</id><snippet>nav_str = "'\\'!@34QWer\\''"
</snippet></ROW><ROW><id>20986328</id><snippet>set</snippet></ROW><ROW><id>20986328</id><snippet>eval(nav_str)</snippet></ROW><ROW><id>20986328</id><snippet>&gt;&gt;&gt; print '\'!@34QWer\''
'!@34QWer'
&gt;&gt;&gt; print eval(r"'\'!@34QWer\''")
'!@34QWer'
&gt;&gt;&gt; print eval("'\\'!@34QWer\\''")
'!@34QWer'
</snippet></ROW><ROW><id>20986328</id><snippet>&gt;&gt;&gt; nav_str = '''"'!@34QWer'"'''
</snippet></ROW><ROW><id>20986376</id><snippet>getattr</snippet></ROW><ROW><id>20986376</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt;
&gt;&gt;&gt; class S(Structure):
...     _fields_ = [
...         ('a', c_byte),
...         ('b', c_int),
...         ('c', c_float),
...         ('d', c_double)
...     ]
...
&gt;&gt;&gt; s = S(1, 2, 3, 4.0)
&gt;&gt;&gt;
&gt;&gt;&gt; for field_name, field_type in s._fields_:
...     print field_name, getattr(s, field_name)
...
a 1
b 2
c 3.0
d 4.0
</snippet></ROW><ROW><id>20986472</id><snippet>MutliIndex</snippet></ROW><ROW><id>20986472</id><snippet>unstack()</snippet></ROW><ROW><id>20986472</id><snippet>In [8]: idx = pd.MultiIndex.from_tuples([('a', 1), ('a', 2), ('b', 1), ('b', 2)])

In [9]: s = pd.Series(np.random.uniform(size=4), index=idx)

In [10]: s  # This is what you have
Out[10]: 
a  1    0.921138
   2    0.677708
b  1    0.916239
   2    0.130728
dtype: float64

In [11]: s.unstack()  # This is what you want
Out[11]: 
          1         2
a  0.921138  0.677708
b  0.916239  0.130728

[2 rows x 2 columns]

In [13]: group = vincent.GroupedBar(s.unstack())

In [14]: group.display()
&lt;IPython.core.display.HTML at 0x103faa850&gt;
&lt;IPython.core.display.Javascript at 0x104957850&gt;
</snippet></ROW><ROW><id>20986562</id><snippet>class Person():
    __init__(self, name="Sinead OConnor", etc...):
        # boiler plate goes here
        self.name = name

    __eq__(self, anotherPerson):
        return False # Perople are wonderful and unique and have no equal

    __cmp__(self,anotherPerson):
        return anotherPerson == "You" # Nothing compares too you!
</snippet></ROW><ROW><id>20986562</id><snippet>&gt; a = Person(a)
&gt; b = Person(b)
&gt; a == b
False
</snippet></ROW><ROW><id>20986562</id><snippet>class Person():
    delta = 100 # How close do 2 things need to be to be a good match
    __init__(self, name="Sinead OConnor", etc...):
        # boiler plate goes here
        self.name = name

    def loveOfPowerBallads(self,myRank):
        if 0&lt;myRank&lt;100:
            raise OutOfRange # Or whatever
        self.rankPowerBallads = myRank

    def isGoodMatch(self,otherPerson):
        return (self.rankPowerBallads - other.rankPowerBallads) ^ 2 &lt; Person.delta
</snippet></ROW><ROW><id>20986562</id><snippet>&gt; ls = Person("legoStormtrooper")
&gt; ls.loveOfPowerBallads(95)
&gt; lp = Person("Lame Person")
&gt; ls.loveOfPowerBallads(30)
&gt; ls.isGoodMatch(lp)
False
</snippet></ROW><ROW><id>20986562</id><snippet>class Person:

    def __init__(self, name):
        self.name=name
        self.sun = (randomDecimal(1, 12), randomDecimal(0, 30)) 
        self.moon = (randomDecimal(1, 12), randomDecimal(0, 30)) 
        # etc...

    def compare(self,other):
        overall = 0
        if abs(self.sun - other.sun) in [2,4,8,10]:
            overall += 4
        elif abs(self.sun - other.sun) in [3,9]: 
            overall -= 6
        elif abs(self.sun - other.sun) == 6:
            overall += 3
        else:
            overall += 0
        return overall
</snippet></ROW><ROW><id>20986708</id><snippet>import random

data = [[1,2], 
        [2,4], 
        [3,-5], 
        [4,9], 
        [5,7]]

l = len(data)

for i in range(l-1):
    data[i][1] = data[i+1][1]

data[l-1][1] = random.randint(-3,3)

print(data)
</snippet></ROW><ROW><id>20986708</id><snippet>[[1, 4], 
[2, -5], 
[3, 9], 
[4, 7], 
[5, 0]]
</snippet></ROW><ROW><id>20986829</id><snippet>__init__</snippet></ROW><ROW><id>20986829</id><snippet>from PyQt4 import QtCore, QtGui

class Window(QtGui.QWidget):
    customSignal = QtCore.pyqtSignal()

    def __init__(self):
        QtGui.QWidget.__init__(self)
        self.edit = QtGui.QLineEdit(self)
        self.edit.textChanged.connect(self.handleTextChanged)
        self.button = QtGui.QPushButton(self)
        layout = QtGui.QVBoxLayout(self)
        layout.addWidget(self.edit)
        layout.addWidget(self.button)
        self.machine = QtCore.QStateMachine()
        self.off = QtCore.QState()
        self.off.assignProperty(self.button, 'text', 'Off')
        self.on = QtCore.QState()
        self.on.assignProperty(self.button, 'text', 'On')
        self.foo = QtCore.QState()
        self.foo.assignProperty(self.button, 'text', 'Foo')
        self.off.addTransition(self.button.clicked, self.on)
        self.on.addTransition(self.button.clicked, self.foo)
        self.foo.addTransition(self.customSignal, self.off)
        self.machine.addState(self.off)
        self.machine.addState(self.on)
        self.machine.addState(self.foo)
        self.machine.setInitialState(self.off)
        self.machine.start()

    def handleTextChanged(self, text):
        if text == 'foo':
            self.edit.clear()
            self.customSignal.emit()

if __name__ == '__main__':

    import sys
    app = QtGui.QApplication(sys.argv)
    window = Window()
    window.show()
    window.setGeometry(500, 300, 100, 100)
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>20986858</id><snippet>from django.utils.translation import ugettext_lazy as _
</snippet></ROW><ROW><id>20986858</id><snippet>ugettext</snippet></ROW><ROW><id>20986858</id><snippet>ugettext_lazy</snippet></ROW><ROW><id>20986858</id><snippet>_</snippet></ROW><ROW><id>20987016</id><snippet>df_f_2_norm.Time.value_counts()
</snippet></ROW><ROW><id>20987016</id><snippet>1.333    492
1.383    492
1.317    492
1.400    492
1.467    492
1.450    492
1.483    492
1.417    492
1.500    492
1.367    492
1.350    492
1.433    492
1.533    480
1.517    480
1.550    468
...
4.800    12
4.600    12
4.750    12
4.833    12
4.667    12
4.700    12
4.650    12
4.683    12
4.633    12
4.617    12
4.817    12
4.583    12
4.733    12
4.767    12
4.783    12
Length: 272, dtype: int64
</snippet></ROW><ROW><id>20987016</id><snippet>import pandas as pd
from scipy.spatial.distance import pdist, squareform

df_f_2_norm = pd.read_csv("astrid_data.csv")
g = np.repeat(np.arange(df_f_2_norm.shape[0]//12), 12)

N = 12

N_lim = int(0.5*N*(N-1)) 
result_index = ['D{}'.format(tag) for tag in range(1,N_lim+1)] # Column labels
two_norm = df_f_2_norm.groupby(g)[["X", "Y", "Z"]].apply(lambda g: pd.Series(pdist(g), index=result_index))
</snippet></ROW><ROW><id>20987169</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>20987169</id><snippet>try:
    # Python 3.x
    from urllib.request import urlopen, urlretrieve, quote
    from urllib.parse import urljoin
except ImportError:
    # Python 2.x
    from urllib import urlopen, urlretrieve, quote
    from urlparse import urljoin

from bs4 import BeautifulSoup

url = 'http://oilandgas.ky.gov/Pages/ProductionReports.aspx'
u = urlopen(url)
try:
    html = u.read().decode('utf-8')
finally:
    u.close()

soup = BeautifulSoup(html)
for link in soup.select('div[webpartid] a'):
    href = link.get('href')
    if href.startswith('javascript:'):
        continue
    filename = href.rsplit('/', 1)[-1]
    href = urljoin(url, quote(href))
    try:
        urlretrieve(href, filename)
    except:
        print('failed to download')
</snippet></ROW><ROW><id>20987207</id><snippet>$ tree
.
├── app.py
└── foo
    ├── bp
    │   └── index.html
    └── __init__.py

2 directories, 3 files
# atupal at xiaomi in /tmp/atupal/py [13:25:26]
$ cat app.py 
from flask import Flask

import foo

app = Flask(__name__)

app.register_blueprint(foo.bp)

if __name__ == '__main__':
  app.run(debug=True)
# atupal at xiaomi in /tmp/atupal/py [13:25:28]
$ cat foo/__init__.py 
from flask import Blueprint, render_template

bp = Blueprint('bp', __name__, template_folder='bp')

@bp.route('/')
def index():
  return render_template('index.html')
# atupal at xiaomi in /tmp/atupal/py [13:25:37]
$ curl http://127.0.0.1:5000/
&lt;p&gt;
  index
&lt;/p&gt;
</snippet></ROW><ROW><id>20987291</id><snippet>[
    1 =&gt; ["receiverId"=&gt;'1',
          "msg"=&gt;'Hello! How are you?!?!?!',
           "time"=&gt;'876765981'],
    2 =&gt;  ["receivedId"=&gt;'1',
           "msg"=&gt;'admin to user 3',
            "time"=&gt;'574769']
]
</snippet></ROW><ROW><id>20987291</id><snippet>$firstrow = $result[1]
</snippet></ROW><ROW><id>20987291</id><snippet>echo $firstrow["msg"];
</snippet></ROW><ROW><id>20987291</id><snippet>$result</snippet></ROW><ROW><id>20987501</id><snippet>Py_ssize_t</snippet></ROW><ROW><id>20987501</id><snippet>Py_ssize_t</snippet></ROW><ROW><id>20987747</id><snippet>for &lt;variable&gt; in &lt;sequence&gt;:
    &lt;statements&gt;
else:
    &lt;statements&gt;
</snippet></ROW><ROW><id>20987747</id><snippet>In [37]: list1 = [('a', 'b', 123, 'c'), ('d', 'e', 234, 'f'), ('g', 'h', 345, 'i')]
</snippet></ROW><ROW><id>20987747</id><snippet>In [38]: for i in list1:
   ....:     print i
   ....:     
('a', 'b', 123, 'c')
('d', 'e', 234, 'f')
('g', 'h', 345, 'i')

In [39]: for i,j,k,l in list1:
    print i,',', j,',',k,',',l
   ....:     
a , b , 123 , c
d , e , 234 , f
g , h , 345 , i
</snippet></ROW><ROW><id>20987747</id><snippet>USERPROFILE=C:\Documents and Settings\mpilgrim
OS=Windows_NT
COMPUTERNAME=MPILGRIM
USERNAME=mpilgrim
</snippet></ROW><ROW><id>20987869</id><snippet>cv::Mat labels = image == gray_value;
</snippet></ROW><ROW><id>20987869</id><snippet>gray_value</snippet></ROW><ROW><id>20987869</id><snippet>vector&lt;vector&lt;Point&gt; &gt; contours;
vector&lt;Vec4i&gt; hierarchy;
findContours( labels, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE);
</snippet></ROW><ROW><id>20987869</id><snippet>y_min</snippet></ROW><ROW><id>20987869</id><snippet>y_max</snippet></ROW><ROW><id>20988006</id><snippet>import numpy as np
import pandas as pd
from datetime import date

# Build data
prd = [1, 2, 3, 4, 1, 2]
grp = ['A', 'A', 'A', 'A', 'B', 'B']
yr =  [2010, 2010, 2010, 2010, 2000, 2000]
mth = [7, 7, 7, 7, 8, 8]
day = [1, 13, 13, 21, 20, 15]
dt = [date(y, m, d) for y, m, d in zip(yr, mth, day)]
# Create data frame
df = pd.DataFrame({'Period': prd, 'Group': grp, 'Dates': dt},
                  columns=['Period', 'Group', 'Dates'])

# Transformation function for the date column
def f(ser):
    v = ser.values
    # Get time difference in days
    delta = [float((ii-v[0]).days) for ii in v]
    # Get number of items to divide by
    dv = np.arange(len(delta))+1
    # Get cumulative average
    cumavg = [nm/dm for nm, dm in zip(delta, dv)]
    # Create output pandas Series object and return it
    out = pd.Series(cumavg, index=ser.index)
    return out

# Apply the transformation function to the Dates column
dfappend = pd.DataFrame({'Cum_Avg': df.groupby("Group").Dates.apply(f)})
# Delete the Dates column
del df['Dates']
# Merge to create the revised data frame
df = pd.merge(df, dfappend, left_index=True, right_index=True)
print(df)
</snippet></ROW><ROW><id>20988006</id><snippet>   Period Group  Cum_Avg
0       1     A      0.0
1       2     A      6.0
2       3     A      4.0
3       4     A      5.0
4       1     B      0.0
5       2     B     -2.5
</snippet></ROW><ROW><id>20988172</id><snippet> b = {i:j} 
</snippet></ROW><ROW><id>20988172</id><snippet> i='k'
 j=1
 b = {i:j}
 b['k'] -&gt; 1 
</snippet></ROW><ROW><id>20988172</id><snippet> i='k'
 j=1
 b = {i:j}
 b['i'] // -&gt; 1
 b.i // -&gt; 1
 // b[i], b['k'] and b.k are not defined 
</snippet></ROW><ROW><id>20988324</id><snippet>copy.py</snippet></ROW><ROW><id>20988324</id><snippet>copy.pyc</snippet></ROW><ROW><id>20988324</id><snippet>python -c "import copy; print(copy.__file__)"
</snippet></ROW><ROW><id>20988324</id><snippet>c:\python27\lib\copy.pyc
</snippet></ROW><ROW><id>20988324</id><snippet>copy.py</snippet></ROW><ROW><id>20988324</id><snippet>copy.pyc</snippet></ROW><ROW><id>20988430</id><snippet>np.array</snippet></ROW><ROW><id>20988430</id><snippet>np.array</snippet></ROW><ROW><id>20988430</id><snippet>np.array</snippet></ROW><ROW><id>20988430</id><snippet>A = np.array(map(np.array, [ [[1,2],[3,4]], [[1,2,3],[4,5,6],[7,8,9]] ] ))
</snippet></ROW><ROW><id>20988430</id><snippet>&gt;&gt;&gt; A
array([[[1 2]
 [3 4]], [[1 2 3]
 [4 5 6]
 [7 8 9]]], dtype=object)
</snippet></ROW><ROW><id>20988430</id><snippet>for sub_array in A:
    sub_array[...] = 0
</snippet></ROW><ROW><id>20988430</id><snippet>A</snippet></ROW><ROW><id>20988430</id><snippet>&gt;&gt;&gt; A
array([[[0 0]
 [0 0]], [[0 0 0]
 [0 0 0]
 [0 0 0]]], dtype=object)
</snippet></ROW><ROW><id>20988441</id><snippet>filter(None, some_list)
</snippet></ROW><ROW><id>20988493</id><snippet>StatusTab</snippet></ROW><ROW><id>20988493</id><snippet>class StatusTab(QtGui.QTabWidget):
    def __init__(self, parent=None):
        QtGui.QTabWidget.__init__(self, parent)
        layout = QtGui.QVBoxLayout(self)
        tab = QtGui.QWidget(self)
        layout1 = QtGui.QVBoxLayout(tab)
        self.procbar = QtGui.QProgressBar(tab)
        self.procbar.setStyleSheet("")
        self.procbar.setRange(0, 0)
        self.procbar.setValue(0)
        layout1.addWidget(self.procbar)
        self.addTab(tab, 'Upload Status')
        layout.addWidget(tab)
        ...
</snippet></ROW><ROW><id>20988493</id><snippet>StatusTab</snippet></ROW><ROW><id>20988493</id><snippet>class Window(QtGui.QWidget):
    def __init__(self, address):
        QtGui.QWidget.__init__(self)
        ...
        self._uploaders = {}
        self._statustabs = {}
</snippet></ROW><ROW><id>20988493</id><snippet>    def handleAddUpload(self):
        ...
        statustab = StatusTab(self)
        self._statustabs[row] = statustab
</snippet></ROW><ROW><id>20988493</id><snippet>    def handleUploadProgress(self, key, sent, total):
        ...
        statusbar = self._statusbars[key]
        statusbar.procbar.setValue(sent)
</snippet></ROW><ROW><id>20988493</id><snippet>    def handleUploadFinished(self, key):
        ...
        uploader = self._uploaders.pop(key)
        uploader.deleteLater()
        statustab = self._statustabs.pop(key)
        statustab.deleteLater()
</snippet></ROW><ROW><id>20988758</id><snippet>^[a-zA-Z0-9_]+$
</snippet></ROW><ROW><id>20988758</id><snippet>^</snippet></ROW><ROW><id>20988758</id><snippet>[a-zA-Z0-9_]+</snippet></ROW><ROW><id>20988758</id><snippet>+</snippet></ROW><ROW><id>20988758</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>20988758</id><snippet>a-z</snippet></ROW><ROW><id>20988758</id><snippet>A-Z</snippet></ROW><ROW><id>20988758</id><snippet>0-9</snippet></ROW><ROW><id>20988758</id><snippet>_</snippet></ROW><ROW><id>20988758</id><snippet>$</snippet></ROW><ROW><id>20988758</id><snippet>import string
# First, define all the acceptable characters
acceptable = set(string.ascii_letters + string.digits + '_'))
def is_valid(username):
    return len(username) &gt;= 5 and set(username).issubset(acceptable)
</snippet></ROW><ROW><id>20988758</id><snippet>def is_valid(username):
    return len(username) &gt;= 5 and username.replace('_', '').isalpha()
</snippet></ROW><ROW><id>20988772</id><snippet>/var/tmp/main.sh</snippet></ROW><ROW><id>20988772</id><snippet>#!/bin/sh
script='/my/python/script/is/here/ok.py'
/usr/bin/python $script &amp;
</snippet></ROW><ROW><id>20988772</id><snippet>#!/bin/sh
script='/my/python/script/is/here/ok.py'
export DISPLAY=:0.0 &amp;&amp; /usr/bin/python $script &amp;
</snippet></ROW><ROW><id>20988772</id><snippet>/etc/init.d/scriptname_what_ever_feed_i_name</snippet></ROW><ROW><id>20988772</id><snippet>#! /bin/sh
PATH=/bin:/usr/bin:/sbin:/usr/sbin
DAEMON=/home/CHANGE _ ____ HERE ______ to the Step 1 file name
PIDFILE=/var/run/scriptname.pid

test -x $DAEMON || exit 0

. /lib/lsb/init-functions

case "$1" in
  start)
     log_daemon_msg "Starting feedparser"
     start_daemon -p $PIDFILE $DAEMON
     log_end_msg $?
   ;;
  stop)
     log_daemon_msg "Stopping feedparser"
     killproc -p $PIDFILE $DAEMON
     PID=`ps x |grep feed | head -1 | awk '{print $1}'`
     kill -9 $PID       
     log_end_msg $?
   ;;
  force-reload|restart)
     $0 stop
     $0 start
   ;;
  status)
     status_of_proc -p $PIDFILE $DAEMON atd &amp;&amp; exit 0 || exit $?
   ;;
 *)
   echo "Usage: /etc/init.d/atd {start|stop|restart|force-reload|status}"
   exit 1
  ;;
esac

exit 0
</snippet></ROW><ROW><id>20988772</id><snippet>chmod +x /etc/init.d/scriptname_what_ever_feed_i_name</snippet></ROW><ROW><id>20988772</id><snippet>chmod -R 777 /etc/init.d/scriptname_what_ever_feed_i_name</snippet></ROW><ROW><id>20988772</id><snippet>/etc/init.d/scriptname_what_ever_feed_i_name restart</snippet></ROW><ROW><id>20988772</id><snippet>* * * * * /etc/init.d/scriptname_what_ever_feed_i_name restart</snippet></ROW><ROW><id>20988772</id><snippet>ps aux | grep python
root      5026  0.5  0.3 170464 19336 pts/0    S    07:40   0:00 /usr/bin/python /var/tmp/python/server.py
</snippet></ROW><ROW><id>20988878</id><snippet>string[:2]</snippet></ROW><ROW><id>20988878</id><snippet>def first2(s):
    return s[:2]
</snippet></ROW><ROW><id>20988928</id><snippet>socket.recv</snippet></ROW><ROW><id>20988928</id><snippet>sys.exit()</snippet></ROW><ROW><id>20988939</id><snippet># helloworld.py
import webapp2

class MainPage(webapp2.RequestHandler):

    def get(self):
        self.response.headers['Content-Type'] = 'text/plain'
        self.response.write('Hello, World!')


application = webapp2.WSGIApplication([
    ('/', MainPage),
], debug=True)
</snippet></ROW><ROW><id>20988939</id><snippet>app.yaml</snippet></ROW><ROW><id>20988939</id><snippet>application: your-app-id
version: 1
runtime: python27
api_version: 1
threadsafe: true

handlers:
- url: /.*
  script: helloworld.application
</snippet></ROW><ROW><id>20988939</id><snippet>MainPage</snippet></ROW><ROW><id>20988939</id><snippet>localhost:8080/</snippet></ROW><ROW><id>20988939</id><snippet>application</snippet></ROW><ROW><id>20988939</id><snippet>get</snippet></ROW><ROW><id>20988939</id><snippet>post</snippet></ROW><ROW><id>20988939</id><snippet>localhost:8080/goodbye</snippet></ROW><ROW><id>20988939</id><snippet># helloworld.py
import webapp2

class MainPage(webapp2.RequestHandler):

    def get(self):
        self.response.headers['Content-Type'] = 'text/plain'
        self.response.write('Hello, World!')

class GoodbyePage(webapp2.RequestHandler):

    def get(self):
        self.response.headers['Content-Type'] = 'text/plain'
        self.response.write('Goodbye, World.  Time to sleep.')

application = webapp2.WSGIApplication([
    ('/', MainPage),
    ('/goodbye', GoodbyePage),
], debug=True)
</snippet></ROW><ROW><id>20988939</id><snippet>app.yaml</snippet></ROW><ROW><id>20988939</id><snippet>app.yaml</snippet></ROW><ROW><id>20988939</id><snippet>application: your-app-id
version: 1
runtime: python27
api_version: 1
threadsafe: true

handlers:
- url: /goodbye
  script: goodbye.app

- url: /.*
  script: helloworld.application
</snippet></ROW><ROW><id>20988939</id><snippet>helloworld.py</snippet></ROW><ROW><id>20988939</id><snippet>goodbye.py</snippet></ROW><ROW><id>20988939</id><snippet># goodbye.py
import webapp2

class GoodbyePage(webapp2.RequestHandler):

    def get(self):
        self.response.headers['Content-Type'] = 'text/html'
        self.response.write('&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;Goodbye!&lt;/body&gt;&lt;/html&gt;')

app = webapp2.WSGIApplication([
    ('/goodbye', GoodbyePage),
], debug=True)
</snippet></ROW><ROW><id>20988939</id><snippet>app.yaml</snippet></ROW><ROW><id>20988939</id><snippet>app.yaml</snippet></ROW><ROW><id>20988939</id><snippet>script: &lt;module_name&gt;.&lt;variable_name&gt;</snippet></ROW><ROW><id>20989059</id><snippet>total = 0</snippet></ROW><ROW><id>20989059</id><snippet>for</snippet></ROW><ROW><id>20989059</id><snippet>total</snippet></ROW><ROW><id>20989059</id><snippet>total = total + total</snippet></ROW><ROW><id>20989059</id><snippet>total</snippet></ROW><ROW><id>20989059</id><snippet>import random
total = 0
for x in range(1,10):
    int1 = random.randint(1,2)
    int2 = random.randint(1,2)
    total = total + int1 + int2
    print str(int1) + (' int1')
    print str(int2) + (' int2')    
    print str(total) + (' total')
</snippet></ROW><ROW><id>20989238</id><snippet>processFunc</snippet></ROW><ROW><id>20989238</id><snippet>processFunc = collapse and " ".join(s.split()) or s
</snippet></ROW><ROW><id>20989238</id><snippet>NameError</snippet></ROW><ROW><id>20989238</id><snippet>s</snippet></ROW><ROW><id>20989238</id><snippet>s</snippet></ROW><ROW><id>20989238</id><snippet>collapse</snippet></ROW><ROW><id>20989238</id><snippet>" ".join(s.split())</snippet></ROW><ROW><id>20989238</id><snippet>s</snippet></ROW><ROW><id>20989238</id><snippet>processFunc = collapse and (lambda s: " ".join(s.split())) or (lambda s: s)
</snippet></ROW><ROW><id>20989238</id><snippet>(lambda s: " ".join(s.split()))</snippet></ROW><ROW><id>20989238</id><snippet>collapse</snippet></ROW><ROW><id>20989238</id><snippet>(lambda s: s)</snippet></ROW><ROW><id>20989238</id><snippet>A and B or C</snippet></ROW><ROW><id>20989238</id><snippet>B if A else C</snippet></ROW><ROW><id>20989238</id><snippet>if</snippet></ROW><ROW><id>20989238</id><snippet>A</snippet></ROW><ROW><id>20989238</id><snippet>A</snippet></ROW><ROW><id>20989238</id><snippet>B</snippet></ROW><ROW><id>20989238</id><snippet>C</snippet></ROW><ROW><id>20989238</id><snippet>processFunc = (lambda s: " ".join(s.split())) if collapse else (lambda s: s)
</snippet></ROW><ROW><id>20989238</id><snippet>and</snippet></ROW><ROW><id>20989238</id><snippet>or</snippet></ROW><ROW><id>20989238</id><snippet>lambda</snippet></ROW><ROW><id>20989238</id><snippet>lambda</snippet></ROW><ROW><id>20989238</id><snippet>def identity(x):
    return x

def normalize_spaces(s):
    return ' '.join(s.split())

processFunc = normalize_spaces if collapse else identity
</snippet></ROW><ROW><id>20989347</id><snippet>numpy.ndarray</snippet></ROW><ROW><id>20989347</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; lst = [6.72599983, -7.15100002, 4.68499994]
&gt;&gt;&gt; numpy.asarray(lst)
array([ 6.72599983, -7.15100002,  4.68499994])
&gt;&gt;&gt; list(numpy.asarray(lst))
[6.7259998300000001, -7.1510000199999997, 4.68499994]
</snippet></ROW><ROW><id>20989347</id><snippet>numpy.array</snippet></ROW><ROW><id>20989347</id><snippet>&gt;&gt;&gt; import ast, numpy
&gt;&gt;&gt; s = str(numpy.asarray(lst))
&gt;&gt;&gt; s
'[ 6.72599983 -7.15100002  4.68499994]'
&gt;&gt;&gt; list(ast.literal_eval(",".join(s.split()).replace("[,", "[")))
[6.72599983, -7.15100002, 4.68499994]
</snippet></ROW><ROW><id>20989612</id><snippet>exceptions</snippet></ROW><ROW><id>20989612</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; httplib.__file__ 
'C:\\Python27\\lib\\httplib.pyc'
</snippet></ROW><ROW><id>20989612</id><snippet>&gt;&gt;&gt; import exceptions
&gt;&gt;&gt; exceptions.__file__
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'module' object has no attribute '__file__'
</snippet></ROW><ROW><id>20989767</id><snippet>functools.wraps</snippet></ROW><ROW><id>20989767</id><snippet>g</snippet></ROW><ROW><id>20989767</id><snippet>&gt;&gt;&gt; def g():
...     return 'pennyroyal tea'
&gt;&gt;&gt; f = intify(g)
&gt;&gt;&gt; f()
  Incremented __int, now __int = 1
'pennyroyal tea'
&gt;&gt;&gt; f.__int
0
&gt;&gt;&gt; g.__int
1
</snippet></ROW><ROW><id>20989767</id><snippet>g</snippet></ROW><ROW><id>20989767</id><snippet>f</snippet></ROW><ROW><id>20989767</id><snippet>__int</snippet></ROW><ROW><id>20989767</id><snippet>&gt;&gt;&gt; f = dictify(g)
... f2 = listify(f)
... f3 = intify(f2)
&gt;&gt;&gt; f3()
  Incremented __int, now __int = 1
  Appended 0 to __list, now __list = [1, 2, 3, 0]
  Incremented __dictionary, now __dictionary = {0: 1}
'pennyroyal tea'
&gt;&gt;&gt; f3.__list is f2.__list
True
&gt;&gt;&gt; f3.__dictionary is f2.__dictionary
True
&gt;&gt;&gt; f3.__int is f2.__int
False
</snippet></ROW><ROW><id>20989767</id><snippet>__list</snippet></ROW><ROW><id>20989767</id><snippet>__dictionary</snippet></ROW><ROW><id>20989767</id><snippet>__int</snippet></ROW><ROW><id>20989767</id><snippet>__int</snippet></ROW><ROW><id>20989767</id><snippet>thisFuncion.__list.append(0)</snippet></ROW><ROW><id>20989767</id><snippet>thisFunction</snippet></ROW><ROW><id>20989767</id><snippet>_func</snippet></ROW><ROW><id>20989767</id><snippet>func</snippet></ROW><ROW><id>20989767</id><snippet>_func</snippet></ROW><ROW><id>20989767</id><snippet>func</snippet></ROW><ROW><id>20989854</id><snippet>grid</snippet></ROW><ROW><id>20989854</id><snippet>master = Tk.Tk()
master.title('Program Application')
#Folder(10)
print "VSM activated input range first"
################### Declare button and respective method ###################
button = Tk.Button(text='VSM', command=VSM, fg="red")
button.config( height = 8, width = 80 )
button.pack() #pack is needed to display the button
bluebutton = Tk.Button(text="AGM Folder",command= lambda: Folder(0), fg="blue").pack(side = LEFT)
bluebutton = Tk.Button(text="VSM Folder",command= lambda: Folder(1), fg="blue").pack(side = RIGHT)
Label(text='Correct Range for Gradient').pack(side=TOP,padx=10,pady=10)



# ---------------------- change from here -------------------------
frame = Frame(master)
frame.pack(side=LEFT, expand=1)

Label(frame, text='X2').grid(row=0, column=1)
Label(frame, text='X1').grid(row=0, column=3)
Label(frame, text='OP').grid(row=1, column=0)
Label(frame, text='IP').grid(row=2, column=0)

entryX2 = Entry(frame, width=10)
entryX2.grid(row=1, column=1, padx=10, pady=10)
entryX2IP = Entry(frame, width=10)
entryX2IP.grid(row=2, column=1, padx=10, pady=10)
Tk.Button(frame, text='Input Range', command=lambda: Folder(2), fg="red").grid(row=0, column=2, rowspan=3, padx=10, pady=10)
entryX1 = Entry(frame,width=10)
entryX1.grid(row=1, column=3)
entryX1IP = Entry(frame,width=10)
entryX1IP.grid(row=2, column=3)
# ---------------------- to here -------------------------
master.mainloop() # Continue loop till user close tab
</snippet></ROW><ROW><id>20990080</id><snippet>==</snippet></ROW><ROW><id>20990080</id><snippet>!=</snippet></ROW><ROW><id>20990080</id><snippet>&lt;</snippet></ROW><ROW><id>20990080</id><snippet>&gt;&gt;&gt; x = numpy.array([1, 2, 3, 4, 5])
&gt;&gt;&gt; y = numpy.array([2, 2, 1, 4, 4])
&gt;&gt;&gt; x == y
array([False,  True, False,  True, False], dtype=bool)
</snippet></ROW><ROW><id>20990080</id><snippet>x</snippet></ROW><ROW><id>20990080</id><snippet>y</snippet></ROW><ROW><id>20990080</id><snippet>x</snippet></ROW><ROW><id>20990080</id><snippet>&gt;&gt;&gt; x[x==y] = 6
&gt;&gt;&gt; x
array([1, 6, 3, 6, 5])
</snippet></ROW><ROW><id>20990080</id><snippet>x</snippet></ROW><ROW><id>20990080</id><snippet>y</snippet></ROW><ROW><id>20990354</id><snippet>key</snippet></ROW><ROW><id>20990354</id><snippet>min</snippet></ROW><ROW><id>20990354</id><snippet>max</snippet></ROW><ROW><id>20990354</id><snippet>&gt;&gt;&gt; min(stats, key=lambda k:float(stats[k]['load_1min']))
'node100'
&gt;&gt;&gt; max(stats, key=lambda k:float(stats[k]['load_1min']))
'node28'
</snippet></ROW><ROW><id>20990354</id><snippet>&gt;&gt;&gt; min(stats.items(), key=lambda (k,v):float(v['load_1min']))
('node100', {'load_1min': '0.58'})
&gt;&gt;&gt; max(stats.items(), key=lambda (k,v):float(v['load_1min']))
('node28', {'load_1min': '0.69'})
</snippet></ROW><ROW><id>20990358</id><snippet>db = DAL(...., fake_migrate_all=True, migrate=False) #This will not perform a real migration but will recreate metadata in your local 'databases' folder</snippet></ROW><ROW><id>20990358</id><snippet>python web2py.py -M -S &lt;yourapp&gt;</snippet></ROW><ROW><id>20990358</id><snippet>db = DAL(...., fake_migrate_all=False, migrate=True) #To migrate your database structure with the new fields in your model</snippet></ROW><ROW><id>20990358</id><snippet>db = DAL(...., fake_migrate_all=False, migrate=True)</snippet></ROW><ROW><id>20990358</id><snippet>db = DAL(...., fake_migrate_all=False, migrate=False)</snippet></ROW><ROW><id>20990358</id><snippet>lazy_tables=True</snippet></ROW><ROW><id>20990647</id><snippet>&gt;&gt;&gt; import csv
&gt;&gt;&gt; data = '02 JAN 2014,FEB 2014,A,1.00,,,""1,235.100000"",""1,230.00"",Column'
&gt;&gt;&gt; reader = csv.reader([data.replace('""', '|')], quotechar='|')
&gt;&gt;&gt; next(reader)
['02 JAN 2014', 'FEB 2014', 'A', '1.00', '', '', '1,235.100000', '1,230.00', 'Column']
</snippet></ROW><ROW><id>20990647</id><snippet>StringIO</snippet></ROW><ROW><id>20990647</id><snippet>def transform(file):
   for line in file:
       yield line.replace('""', '|')

with open('foo') as fin:
    reader = csv.reader(transform(fin), quotechar='|')
    ...
</snippet></ROW><ROW><id>20990647</id><snippet>transform</snippet></ROW><ROW><id>20990735</id><snippet>node-celery</snippet></ROW><ROW><id>20990735</id><snippet>node-amqp</snippet></ROW><ROW><id>20990735</id><snippet>Meteor.settings.celery</snippet></ROW><ROW><id>20990735</id><snippet>{
  "celery": {
    "CELERY_BROKER_URL": "amqp://guest@localhost:5672//",
    "CELERY_RESULT_BACKEND": "amqp",
    "CELERY_SEND_TASK_SENT_EVENT": true
  }
}
</snippet></ROW><ROW><id>20990735</id><snippet>meteor --settings path/to/settings.json</snippet></ROW><ROW><id>20990735</id><snippet>celery worker -E --config=xx</snippet></ROW><ROW><id>20991190</id><snippet>from gensim import corpora, models, similarities
from itertools import chain

""" DEMO """
documents = ["Human machine interface for lab abc computer applications",
             "A survey of user opinion of computer system response time",
             "The EPS user interface management system",
             "System and human system engineering testing of EPS",
             "Relation of user perceived response time to error measurement",
             "The generation of random binary unordered trees",
             "The intersection graph of paths in trees",
             "Graph minors IV Widths of trees and well quasi ordering",
             "Graph minors A survey"]

# remove common words and tokenize
stoplist = set('for a of the and to in'.split())
texts = [[word for word in document.lower().split() if word not in stoplist]
         for document in documents]

# remove words that appear only once
all_tokens = sum(texts, [])
tokens_once = set(word for word in set(all_tokens) if all_tokens.count(word) == 1)
texts = [[word for word in text if word not in tokens_once] for text in texts]

# Create Dictionary.
id2word = corpora.Dictionary(texts)
# Creates the Bag of Word corpus.
mm = [id2word.doc2bow(text) for text in texts]

# Trains the LDA models.
lda = models.ldamodel.LdaModel(corpus=mm, id2word=id2word, num_topics=3, \
                               update_every=1, chunksize=10000, passes=1)

# Prints the topics.
for top in lda.print_topics():
  print top
print

# Assigns the topics to the documents in corpus
lda_corpus = lda[mm]

# Find the threshold, let's set the threshold to be 1/#clusters,
# To prove that the threshold is sane, we average the sum of all probabilities:
scores = list(chain(*[[score for topic,score in topic] \
                      for topic in [doc for doc in lda_corpus]]))
threshold = sum(scores)/len(scores)
print threshold
print

cluster1 = [j for i,j in zip(lda_corpus,documents) if i[0][1] &gt; threshold]
cluster2 = [j for i,j in zip(lda_corpus,documents) if i[1][1] &gt; threshold]
cluster3 = [j for i,j in zip(lda_corpus,documents) if i[2][1] &gt; threshold]

print cluster1
print cluster2
print cluster3
</snippet></ROW><ROW><id>20991190</id><snippet>[out]</snippet></ROW><ROW><id>20991190</id><snippet>0.131*trees + 0.121*graph + 0.119*system + 0.115*user + 0.098*survey + 0.082*interface + 0.080*eps + 0.064*minors + 0.056*response + 0.056*computer
0.171*time + 0.171*user + 0.170*response + 0.082*survey + 0.080*computer + 0.079*system + 0.050*trees + 0.042*graph + 0.040*minors + 0.040*human
0.155*system + 0.150*human + 0.110*graph + 0.107*minors + 0.094*trees + 0.090*eps + 0.088*computer + 0.087*interface + 0.040*survey + 0.028*user

0.333333333333

['The EPS user interface management system', 'The generation of random binary unordered trees', 'The intersection graph of paths in trees', 'Graph minors A survey']
['A survey of user opinion of computer system response time', 'Relation of user perceived response time to error measurement']
['Human machine interface for lab abc computer applications', 'System and human system engineering testing of EPS', 'Graph minors IV Widths of trees and well quasi ordering']
</snippet></ROW><ROW><id>20991458</id><snippet>gtk_paned_compute_position</snippet></ROW><ROW><id>20991458</id><snippet>gtk_paned_compute_position</snippet></ROW><ROW><id>20991458</id><snippet>HPaned.compute_position</snippet></ROW><ROW><id>20991458</id><snippet>gtk.Bin</snippet></ROW><ROW><id>20991458</id><snippet>size-allocate</snippet></ROW><ROW><id>20991458</id><snippet>set_size_request</snippet></ROW><ROW><id>20991554</id><snippet>import sys
import time

def ScrollingText(s):
     s=str(s)
     for letter in s:
          print(letter, end="")
          sys.stdout.flush()
          time.sleep(.05)
     print("")     # newline at the end
</snippet></ROW><ROW><id>20991634</id><snippet>str.replace</snippet></ROW><ROW><id>20991634</id><snippet>&gt;&gt;&gt; s = "TN 81 NZ 0025"
&gt;&gt;&gt; s.replace(" ", "")
'TN81NZ0025'
</snippet></ROW><ROW><id>20991634</id><snippet>str.translate</snippet></ROW><ROW><id>20991634</id><snippet>&gt;&gt;&gt; from string import whitespace
&gt;&gt;&gt; s = "TN 81   NZ\t\t0025\nfoo"
&gt;&gt;&gt; s.translate(None, whitespace)
'TN81NZ0025foo'
</snippet></ROW><ROW><id>20991909</id><snippet>r'(?&lt;!\)(\\\\)*\\g...'
</snippet></ROW><ROW><id>20991909</id><snippet>p = re.compile(r"(?&lt;!\\)(\\\\\\\\)*\\g&lt;([a-zA-Z_][a-zA-Z\d_]*)&gt;")
for m in p.finditer(
    r"&lt;/\g&lt;name_1&gt;\g&lt;name_2&gt;\\\\\g&lt;not_escaped&gt;\\\g&lt;escaped&gt;&gt;&gt;"):
  print(m.group(2))
</snippet></ROW><ROW><id>20992172</id><snippet># first create a generator that parses your structure, one residue at time

def createDesiredList(structure, desired_atoms):
    residues = structure.get_residues()

    for residue in residues:
        return_list = []
        for atom_id in desired_atoms:
            return_list.append((residue[atom_id].get_coord(), residue))
        yield return_list


# then I copy and paste your code .... 

pdb = "1dly.pdb"
name = pdb[:3]

from Bio import PDB
from ast import literal_eval

p = PDB.PDBParser()
s = p.get_structure(name, pdb)

# then I decide which atoms I desire from every residue...

wish_list = ['N', 'CA', 'C', 'CB']

# and finally I run my generator, putting the results in a list.

your_coords_list = [x for x in createDesiredList(s, wish_list)]
</snippet></ROW><ROW><id>20992184</id><snippet>f()</snippet></ROW><ROW><id>20992216</id><snippet>include()</snippet></ROW><ROW><id>20992216</id><snippet>require()</snippet></ROW><ROW><id>20992216</id><snippet>echo getcwd();</snippet></ROW><ROW><id>20992288</id><snippet>import wx

TIMER_ID = 100

class Frame(wx.Frame):
    def __init__(self, title):
        wx.Frame.__init__(self, None, title=title, size=(350,200))
        self.timer = None
        self.Bind(wx.EVT_LEFT_DCLICK, self.OnDoubleClick)
        self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)

    def OnDoubleClick(self, event):
        self.timer.Stop()
        print("double click")

    def OnSingleClick(self, event):
        print("single click")
        self.timer.Stop()

    def OnLeftDown(self, event):
        self.timer = wx.Timer(self, TIMER_ID)
        self.timer.Start(200) # 0.2 seconds delay
        wx.EVT_TIMER(self, TIMER_ID, self.OnSingleClick)



app = wx.App(redirect=True)
top = Frame("Hello World")
top.Show()
app.MainLoop()
</snippet></ROW><ROW><id>20992407</id><snippet>str.rsplit</snippet></ROW><ROW><id>20992407</id><snippet>&gt;&gt;&gt; data = ['    MY_YEAR_4 = 1990.000']
&gt;&gt;&gt; float(data[0].rsplit('= ', 1)[1])
1990.0
</snippet></ROW><ROW><id>20992407</id><snippet>data</snippet></ROW><ROW><id>20992407</id><snippet>results = [float(item.rsplit('= ', 1)[1]) for item in data]
</snippet></ROW><ROW><id>20992523</id><snippet>RemoteUserBackend</snippet></ROW><ROW><id>20992523</id><snippet>configure_user</snippet></ROW><ROW><id>20992523</id><snippet>post_save</snippet></ROW><ROW><id>20992749</id><snippet>winnings</snippet></ROW><ROW><id>20992749</id><snippet>for o in range(1, len(winnings)):</snippet></ROW><ROW><id>20992749</id><snippet>&gt;&gt;&gt; list(range(1, 1))
[]
</snippet></ROW><ROW><id>20992749</id><snippet>1</snippet></ROW><ROW><id>20992749</id><snippet>0</snippet></ROW><ROW><id>20992749</id><snippet>&gt;&gt;&gt; range(0, 1)
[0]
</snippet></ROW><ROW><id>20992749</id><snippet>enumerate()</snippet></ROW><ROW><id>20992749</id><snippet>winnings = [pot * ratio for ratio in ratios]
for winning in winnings[1:]:
    # loop over all but the first element in winnings
    winning = int(winning)
    for i, player in enumerate(players[1:]):
        # loop over all but the first player, adding indices
        notes.store("~lottery~", player, 
            "The system has placed you {} in the lottery. The lottery awarded "
            "you {} P$".format(Point.ordinal(i), winning), time.time())
        alerts.append(player)
        Point.dPoint[player] += winning
</snippet></ROW><ROW><id>20992749</id><snippet>zip()</snippet></ROW><ROW><id>20992749</id><snippet>winnings = [pot * ratio for ratio in ratios]
for i, (winning, player) in enumerate(zip(winnings, players)):
    winning = int(winning)
    notes.store("~lottery~", player, 
        "The system has placed you {} in the lottery. The lottery awarded "
        "you {} P$".format(Point.ordinal(i), winning), time.time())
    alerts.append(player)
    Point.dPoint[player] += winning
</snippet></ROW><ROW><id>20992780</id><snippet>&gt;&gt;&gt; {k:v for k, v in d.items() if v != ''}
{'N': [-6.626999855041504, -2.318000078201294, 7.9029998779296875], 'CA': [-7.5269999504089355, -2.2330000400543213, 6.748000144958496], 'C': [-8.081000328063965, -3.619999885559082, 6.406000137329102]}
</snippet></ROW><ROW><id>20992780</id><snippet>if v</snippet></ROW><ROW><id>20992780</id><snippet>for k, v in d.items():
    if not v: del d[k]
</snippet></ROW><ROW><id>20992898</id><snippet>result = [','.join(i for i in a[0].split(',') if not i.endswith('div'))]
b = result if result[0] else []
#or
result = ','.join(i for i in a[0].split(',') if not i.endswith('div'))
b = [result] if result else []
</snippet></ROW><ROW><id>20993540</id><snippet>from IPython.display import display

display(yourobject)
</snippet></ROW><ROW><id>20993580</id><snippet>k</snippet></ROW><ROW><id>20993580</id><snippet>processes = [
  Process(target=ImageData.shepard_interpolation, args=(ImageData(50, 50), q,))
  for _ in range(3) ]
for process in processes:
    process.start()
for process in processes:
    process.join()
</snippet></ROW><ROW><id>20993580</id><snippet>import os
from multiprocessing import *

class ImageData(object):
    def __init__(self, a, b):
        pass

    def shepard_interpolation(self, queue, seeds=10):
        self.pid = os.getpid()
        print self.pid, "queue put"
        queue.put(self)

if __name__ == '__main__':
    q = Queue()
    processes = [ Process(
      target=ImageData.shepard_interpolation, args=(ImageData(50, 50), q))
        for _ in range(10) ]
    for process in processes:
        process.start()
    results = []
    for process in processes:  # just to have the correct amount of results
        results.append(q.get())
    print '---------Out--------'
    for process in processes:
        process.join()
    print [ result.pid for result in results ]
</snippet></ROW><ROW><id>20993629</id><snippet>if re.search(r'\b' + word + r'\b', sentence):
</snippet></ROW><ROW><id>20993629</id><snippet>\b</snippet></ROW><ROW><id>20993629</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; wordlist = ['hypothesis' , 'test' , 'results' , 'total']
&gt;&gt;&gt; sentence = "The total results for the test confirm the hypothesis"
&gt;&gt;&gt; for word in wordlist:
...     if re.search(r'\b' + word + r'\b', sentence):
...             print word
...
hypothesis
test
results
total
</snippet></ROW><ROW><id>20993629</id><snippet>&gt;&gt;&gt; sentence = "These tests will benefit in the long run."
&gt;&gt;&gt; for word in wordlist:
...     if re.search(r'\b' + word + r'\b', sentence):
...          print word
...
&gt;&gt;&gt;
</snippet></ROW><ROW><id>20993771</id><snippet>class</snippet></ROW><ROW><id>20993771</id><snippet>def underscored_class_span(elem, numbered=re.compile(u'_\d').match):
    if elem.name != 'span': return False
    classes = elem.get('class', [])
    return u'_' in classes and any(numbered(c) for c in classes)

for span in soup.find_all(underscored_class_span):
    span.decompose()
</snippet></ROW><ROW><id>20993806</id><snippet>sqlite3</snippet></ROW><ROW><id>20993806</id><snippet>from PyQt4.QtSql import QSqlQueryModel,QSqlDatabase,QSqlQuery
from PyQt4.QtGui import QTableView,QApplication
import sys

app = QApplication(sys.argv)

db = QSqlDatabase.addDatabase("QSQLITE")
db.setDatabaseName("patientData.db")
db.open()

projectModel = QSqlQueryModel()
projectModel.setQuery("select * from patient",db)

projectView = QTableView()
projectView.setModel(projectModel)

projectView.show()
app.exec_()
</snippet></ROW><ROW><id>20993847</id><snippet>__openerp__.py   File

{
'name': 'Student Information Management',
'version': '0.1',
'category': 'Tools',
'description': """This module is for the Student Information Management.""",
'author': 'Mir Nauman Tahir',
    'website': 'http://mirnauman.wordpress.com/',
'depends': ['base'],
'data': ['sim_view.xml'],
'demo': [],
'installable': True,
    'auto_install': False,
    'application': True,

}


 __init__.py File

import sim




sim.py File


from openerp.osv import fields, osv
class student(osv.osv):
_name = "sim.student"
_description = "This table is for keeping personal data of student"
_columns = {
    'name': fields.char('Registration Number',size=256,required=True),
    'student_name': fields.char('Student Name',size=256,required=True),
    'father_name': fields.char('Father Name',size=256),
    'gender':fields.selection([('male','Male'),('female','Female')],'Gender'),
    'contact_no':fields.char('Contact Number',size=256)
}
student()


sim_view.xml File

&lt;?xml version="1.0"?&gt;
&lt;openerp&gt;
&lt;data&gt;
&lt;!-- ============== student================= --&gt;
&lt;!-- 1st part of the sim_view start--&gt;
&lt;record model="ir.ui.view" id="student_form"&gt;
&lt;field name="name"&gt;Student&lt;/field&gt;
&lt;field name="model"&gt;sim.student&lt;/field&gt;
&lt;field name="type"&gt;form&lt;/field&gt;
&lt;field name="arch" type="xml"&gt;
&lt;form string="Student" version="7.0"&gt;
&lt;group&gt;
&lt;field name="name"/&gt;
&lt;field name="student_name"/&gt;
&lt;field name="father_name"/&gt;
&lt;field name="gender"/&gt;
&lt;field name="contact_no"/&gt;
&lt;/group&gt;
&lt;/form&gt;
&lt;/field&gt;
&lt;/record&gt;
&lt;!-- 1st part of the sim_view end--&gt;
&lt;!--2nd part of the sim_view start--&gt;
&lt;record model="ir.ui.view" id="student_tree"&gt;
&lt;field name="name"&gt;Student&lt;/field&gt;
&lt;field name="model"&gt;sim.student&lt;/field&gt;
&lt;field name="type"&gt;tree&lt;/field&gt;
&lt;field name="arch" type="xml"&gt;
&lt;tree string="Student"&gt;
&lt;field name="name"/&gt;
&lt;field name="student_name"/&gt;
&lt;field name="father_name"/&gt;
&lt;field name="gender"/&gt;
&lt;field name="contact_no"/&gt;
&lt;/tree&gt;
&lt;/field&gt;
&lt;/record&gt;
&lt;!--2nd part of the sim_view end--&gt;
&lt;!-- 3rd part of the sim_view start--&gt;
&lt;record model="ir.actions.act_window" id="action_student"&gt;
&lt;field name="name"&gt;Student&lt;/field&gt;
&lt;field name="res_model"&gt;sim.student&lt;/field&gt;
&lt;field name="view_type"&gt;form&lt;/field&gt;
&lt;field name="view_mode"&gt;tree,form&lt;/field&gt;
&lt;/record&gt;
&lt;!--3rd part of the sim_view end--&gt;
&lt;!--4th part of the sim_view start--&gt;
&lt;menuitem name="SIM/Student/StudentInfo" id="menu_sim_student"  
      action="action_student"/&gt;
&lt;!--4th part of the sim_view end--&gt;
&lt;/data&gt;
&lt;/openerp&gt;

After updating all your files, Restart the server, update module list and find your 
module in Settings &gt; Modules &gt; Installed Modules - remove installed from there and write 
your module's name (i.e sim) over there. 

Hope this will definitely work.  
</snippet></ROW><ROW><id>20994051</id><snippet>print( len(test['foo']))
</snippet></ROW><ROW><id>20994406</id><snippet>import os
files = glob.glob('*.tar.gz')

for f in files:
    with tarfile.open(f, 'r:gz') as tar:
        tar.extractall()
        extracted_files = os.listdir(".") #retrieves the lists of all files and folders in the current directory
        for file in extracted_files:
            if file.endswith(".tar.gz"): # do not process tar.gz files
                continue
            absolute_path = os.path.abspath(file) # get the absolute path    
            if os.path.isdir(absolute_path): # test if the path points to a directory
                shutil.rmtree(absolute_path)
            else: # normal file
                os.remove(absolute_path)
</snippet></ROW><ROW><id>20994462</id><snippet>with open('result.csv', 'w', encoding='UTF-8', newline='') as f:
</snippet></ROW><ROW><id>20994462</id><snippet>csv</snippet></ROW><ROW><id>20994462</id><snippet>newline=''</snippet></ROW><ROW><id>20994699</id><snippet>PYTHONSTARTUP</snippet></ROW><ROW><id>20994699</id><snippet>try:
    import readline
except ImportError:
    sys.stdout.write("No readline module found, no tab completion available.\n")
else:
    import rlcompleter
    readline.parse_and_bind('tab: complete')
</snippet></ROW><ROW><id>20994699</id><snippet>readline</snippet></ROW><ROW><id>20994790</id><snippet>pip</snippet></ROW><ROW><id>20994790</id><snippet>virtualenv</snippet></ROW><ROW><id>20994790</id><snippet>pip</snippet></ROW><ROW><id>20994790</id><snippet>pip</snippet></ROW><ROW><id>20994790</id><snippet>pip</snippet></ROW><ROW><id>20995289</id><snippet>map()</snippet></ROW><ROW><id>20995289</id><snippet>"{:02}".format</snippet></ROW><ROW><id>20995289</id><snippet>data = """     Week product  quantity        Month
0  201301    coke       1.5           1
1  201302   fanta       1.7           2
2  201304    coke       3.6           5
3  201306  sprite       2.4          10
4  201308   pepsi       2.9          12
"""

import pandas as pd
import io

df = pd.read_csv(io.BytesIO(data), delim_whitespace=True)
df["Month"] = df.Month.map("{:02}".format)
</snippet></ROW><ROW><id>20995428</id><snippet>sum</snippet></ROW><ROW><id>20995428</id><snippet>&gt;&gt; df = pd.DataFrame({'a': [1, 2, 3]})
&gt;&gt; df[df.a &gt; 1].sum()   
a    5
dtype: int64
</snippet></ROW><ROW><id>20995428</id><snippet>&gt;&gt; df[(df.a &gt; 1) &amp; (df.a &lt; 3)].sum()
a    2
dtype: int64
</snippet></ROW><ROW><id>20995545</id><snippet>arrays = []
with open('salida.txt', 'r') as wordfile:
    for line in wordfile:
        # Split the line on commas.
        words = line.split(',')
        for count, word in enumerate(words):
            # Remove any whitespace.
            word = word.strip()
            # That might leave a blank string, e.g. at the end.
            if word:
                # Do we need to add another array to our list of arrays?
                if count == len(arrays):
                    arrays.append([])
                arrays[count].append(word)
print arrays
</snippet></ROW><ROW><id>20995595</id><snippet>\x08</snippet></ROW><ROW><id>20995595</id><snippet>'8'</snippet></ROW><ROW><id>20995595</id><snippet>'08'</snippet></ROW><ROW><id>20995595</id><snippet>foreach (Byte b in result)
    Sb.Append(b.ToString("x2"));
</snippet></ROW><ROW><id>20995806</id><snippet>Sum</snippet></ROW><ROW><id>20995806</id><snippet>sum</snippet></ROW><ROW><id>20995806</id><snippet>sum()</snippet></ROW><ROW><id>20995806</id><snippet>diceSum</snippet></ROW><ROW><id>20996004</id><snippet>itertools.groupby()</snippet></ROW><ROW><id>20996004</id><snippet>from itertools import groupby

listOut = []
for value, group in groupby(listIn):
    listOut.append(next(group))
    for i in group:
        listOut.append(i)
        break
</snippet></ROW><ROW><id>20996004</id><snippet>from itertools import groupby

def reduced(it):
    for value, group in groupby(it):
        yield next(group)
        for i in group:
            yield i
            break
</snippet></ROW><ROW><id>20996004</id><snippet>&gt;&gt;&gt; listIn = [1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 1]
&gt;&gt;&gt; list(reduced(listIn))
[1, 1, 0, 0, 1, 0, 0, 1]
</snippet></ROW><ROW><id>20996106</id><snippet>data = """cookie_id     interaction
1234          did_something
1234          viewed_banner*
1234          did_something
1234          did_something
1234          viewed_and_clicked_banner*
"""

import pandas as pd
import io

df = pd.read_csv(io.BytesIO(data), delim_whitespace=True)
flag = df.interaction.str.endswith("*")
group_flag = flag.astype(float).mask(~flag).ffill(limit=1).fillna(0).cumsum()
df["interaction"] = df.interaction.str.rstrip("*")
interest_df = df[flag]

def f(s):
    return s.value_counts()

df2 = df.groupby(group_flag).interaction.apply(f).unstack().fillna(0).cumsum()
result = df2[::2].reset_index(drop=True)
result["clicked"] = interest_df.interaction.str.contains("clicked").reset_index(drop=True)
print result
</snippet></ROW><ROW><id>20996106</id><snippet>  did_something  viewed_and_clicked_banner  viewed_banner clicked
0              1                          0              0   False
1              3                          0              1    True
</snippet></ROW><ROW><id>20996106</id><snippet>*</snippet></ROW><ROW><id>20996106</id><snippet>*</snippet></ROW><ROW><id>20996106</id><snippet>*</snippet></ROW><ROW><id>20996106</id><snippet>value_counts</snippet></ROW><ROW><id>20996106</id><snippet>cumsum()</snippet></ROW><ROW><id>20996106</id><snippet>clicked</snippet></ROW><ROW><id>20996200</id><snippet>import json
</snippet></ROW><ROW><id>20996200</id><snippet>ws.send(json.dumps(dict(cpu=cpu, ram=ram, disk=disk)))
</snippet></ROW><ROW><id>20996298</id><snippet>help()</snippet></ROW><ROW><id>20996298</id><snippet>docstring</snippet></ROW><ROW><id>20996314</id><snippet>pickle</snippet></ROW><ROW><id>20996314</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; data = [[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]
&gt;&gt;&gt; with open('C:/temp/pickle_test.data', 'w') as f:
    pickle.dump(data, f)


&gt;&gt;&gt; with open('C:/temp/pickle_test.data', 'r') as f:
    new_data = pickle.load(f)


&gt;&gt;&gt; new_data
[[0, 0, 0, 0, 0], [0, 1, 1, 1, 0], [0, 0, 0, 0, 0]]
</snippet></ROW><ROW><id>20996441</id><snippet>.text</snippet></ROW><ROW><id>20996668</id><snippet>ylim</snippet></ROW><ROW><id>20996668</id><snippet>plt.ylim(0, df2.shape[1])
</snippet></ROW><ROW><id>20996862</id><snippet>__repr__</snippet></ROW><ROW><id>20996862</id><snippet>__repr__</snippet></ROW><ROW><id>20996862</id><snippet>eval</snippet></ROW><ROW><id>20996862</id><snippet>repr("foo")</snippet></ROW><ROW><id>20996862</id><snippet>"foo"</snippet></ROW><ROW><id>20996862</id><snippet>"</snippet></ROW><ROW><id>20996862</id><snippet>repr([1,2,3])</snippet></ROW><ROW><id>20996862</id><snippet>[1,2,3]</snippet></ROW><ROW><id>20996862</id><snippet>def __repr__(self):
    return "OrderedSet(%r)" % self.list
</snippet></ROW><ROW><id>20996862</id><snippet>def __init__(self, elements):
    self.list = elements
</snippet></ROW><ROW><id>20996862</id><snippet>repr(OrderedSet([1,2,3]))</snippet></ROW><ROW><id>20996862</id><snippet>OrderedSet([1,2,3])</snippet></ROW><ROW><id>20996862</id><snippet>eval</snippet></ROW><ROW><id>20997066</id><snippet>#!/usr/bin/env python3

import re

routes = []
with open('routes.php', 'r') as f:
    current_comment = ''
    in_comment = False
    for line in f:
        line = line.lstrip()
        if line.startswith('/**'):
            in_comment = True

        if in_comment:
            current_comment += line

        if line.startswith('*/'):
            in_comment = False

        if line.startswith('Route::'):
            matches = re.search(r"Route::([A-Z]+)\('(.*)', '(.*)'\);", line)
            groups = matches.groups()
            routes.append({
                'comment': current_comment,
                'method': groups[0],
                'path': groups[1],
                'handler': groups[2],
            });
            current_comment = '' # reset the comment

print(routes)
</snippet></ROW><ROW><id>20997066</id><snippet>[
    {
        'comment': '/**\n* @param string username   required \n* @param string password   required\n* @param string first_name required\n* @param string last_name  required\n* @param string email      required\n*/\n',
        'path': '/register',
        'handler': 'UserController@Register',
        'method': 'POST'
    },
    {
        'comment': '/**\n* @param string username   required \n* @param string password   required\n* @param string first_name required\n* @param string last_name  required\n* @param string email      required\n*/\n',
        'path': '/login',
        'handler': 'UserController@login',
        'method': 'POST'
    }
]
</snippet></ROW><ROW><id>20997663</id><snippet>app</snippet></ROW><ROW><id>20997663</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>20997663</id><snippet>settings.py</snippet></ROW><ROW><id>20997675</id><snippet>develop</snippet></ROW><ROW><id>20997675</id><snippet>setup.py</snippet></ROW><ROW><id>20997675</id><snippet>from setuptools import setup
</snippet></ROW><ROW><id>20997796</id><snippet>Tkinter</snippet></ROW><ROW><id>20997796</id><snippet>tkinter</snippet></ROW><ROW><id>20997796</id><snippet>_tkinter</snippet></ROW><ROW><id>20997796</id><snippet>import Tkinter as tk
</snippet></ROW><ROW><id>20997796</id><snippet>_tkinter</snippet></ROW><ROW><id>20997862</id><snippet>ml = ['076']
print "%03d" % int(ml[0])
076
</snippet></ROW><ROW><id>20997862</id><snippet>ml = ['076']
print "%03d" % (int(ml[0]) / 2) 
038
</snippet></ROW><ROW><id>20997885</id><snippet>def rgen (n):
    for elem in list:
        for times in xrange(n):
            yield elem
</snippet></ROW><ROW><id>20997885</id><snippet>from itertools import chain, repeat

def repeated(iterable, n=1):
    items = chain.from_iterable(repeat(item, n) for item in iterable)
    for item in items:
        yield item

    # Or, in Python3.3 you could do:
    yield from items
</snippet></ROW><ROW><id>20997935</id><snippet>error: could not create '/usr/local/lib/python2.7/dist-packages/PIL': Permission denied
</snippet></ROW><ROW><id>20997935</id><snippet>sudo pip install PIL
</snippet></ROW><ROW><id>20997935</id><snippet>sudo pip install --install-option="--prefix=$PREFIX_PATH" PIL
</snippet></ROW><ROW><id>20997973</id><snippet>CArray</snippet></ROW><ROW><id>20997973</id><snippet>def _coordinate_default(self):
    return np.array([[1., 2., 3.]])
</snippet></ROW><ROW><id>20997973</id><snippet>(3,)</snippet></ROW><ROW><id>20997973</id><snippet>(1, 3)</snippet></ROW><ROW><id>20997973</id><snippet>c.coordinate=[[1, 2, 3]]
</snippet></ROW><ROW><id>20997973</id><snippet>shape=(3,)</snippet></ROW><ROW><id>20998072</id><snippet>class</snippet></ROW><ROW><id>20998072</id><snippet>def</snippet></ROW><ROW><id>20998072</id><snippet>class Garden(object):

    class_flower_attribute = []

    def __init__(self, flower):
        self.instance_flower_attribute = [flower]
</snippet></ROW><ROW><id>20998304</id><snippet>from itertools import combinations

def count_consecutive(l):
    counts = [1]
    counts_index = 0
    for i in range(1, len(l)):
        if l[i] == l[i-1] + 1:
            counts[counts_index] = counts[counts_index] + 1
        else:
            counts.append(1)
            counts_index += 1
    return max(counts)

f = open('C:/combinations.txt', 'w')
for comb in combinations(range(1,36), 7):
    if count_consecutive(comb) not in [5, 6, 7]:
        f.write(str(comb))
        f.write('\n')
f.close()
</snippet></ROW><ROW><id>20998540</id><snippet>&gt;&gt;&gt; comment = '''/**
...  * @param string username   required    the username of the registering user
...  * @param string password   required
...  * @param string first_name required
...  * @param string last_name  required
...  * @param string email      required
...  * @package authentication
...  * @info user registration
...  * @description register a new user into the groupjump platform
...  */'''
&gt;&gt;&gt;
&gt;&gt;&gt; import re
&gt;&gt;&gt; desc = re.findall(r'@description (.*)', comment)
&gt;&gt;&gt; desc
['register a new user into the groupjump platform']
</snippet></ROW><ROW><id>20998634</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = np.random.random((4, 4))

fig, ax = plt.subplots()
# Using matshow here just because it sets the ticks up nicely. imshow is faster.
ax.matshow(data, cmap='seismic')

for (i, j), z in np.ndenumerate(data):
    ax.text(j, i, '{:0.1f}'.format(z), ha='center', va='center')

plt.show()
</snippet></ROW><ROW><id>20998634</id><snippet>import matplotlib.pyplot as plt
import numpy as np

data = np.random.random((4, 4))

fig, ax = plt.subplots()
# Using matshow here just because it sets the ticks up nicely. imshow is faster.
ax.matshow(data, cmap='seismic')

for (i, j), z in np.ndenumerate(data):
    ax.text(j, i, '{:0.1f}'.format(z), ha='center', va='center',
            bbox=dict(boxstyle='round', facecolor='white', edgecolor='0.3'))

plt.show()
</snippet></ROW><ROW><id>20998634</id><snippet>ax.annotate</snippet></ROW><ROW><id>20998634</id><snippet>ax.text</snippet></ROW><ROW><id>20998645</id><snippet>/folder1/a.py</snippet></ROW><ROW><id>20998645</id><snippet>/</snippet></ROW><ROW><id>20998645</id><snippet>~$ python folder1/a.py
</snippet></ROW><ROW><id>20998645</id><snippet>/</snippet></ROW><ROW><id>20998776</id><snippet>someset.union()</snippet></ROW><ROW><id>20998776</id><snippet>union()</snippet></ROW><ROW><id>20998857</id><snippet>SOCIAL_AUTH_SCOPE</snippet></ROW><ROW><id>20998857</id><snippet>SOCIAL_AUTH_FACEBOOK_SCOPE</snippet></ROW><ROW><id>20998857</id><snippet>def get_likes(strategy, details, response, *args, **kwargs):
    if strategy.backend.name == 'facebook':
        likes = strategy.backend.get_json(
            'https://graph.facebook.com/%s/likes' % response['id'],
            params={'access_token': response['access_token']}
        )
        for like in likes['data']:
            pass  # Process and save likes here
</snippet></ROW><ROW><id>20999231</id><snippet>data = pd.read_csv('meansr.txt', delim_whitespace=True) 
numcols, numrows = 30, 30 
xi = np.linspace(data.Lon.min(), data.Lon.max(), numrows)
yi = np.linspace(data.Lat.min(), data.Lat.max(), numcols)
xi, yi = np.meshgrid(xi, yi)
x, y, z = data.Lon, data.Lat, data.Z

# NOTE: from here on it changes
points = np.vstack((x,y)).T 
values = z
wanted = (xi, yi)
zi = griddata(points, values, wanted) # for more info on griddata: http://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.griddata.html

# from here its the same code again as you had
plt.figure()
plt.contourf(xi, yi, zi)
plt.scatter(data.Lon, data.Lat, c=data.Z, s=100, vmin=zi.min(), vmax=zi.max())
plt.colorbar()
plt.show()
</snippet></ROW><ROW><id>20999231</id><snippet>scipy.interpolate.griddata</snippet></ROW><ROW><id>20999231</id><snippet>scipy.interpolate.griddata(points, values, xi, method='linear', fill_value=nan)
# 'points' has to contain what you named  x and y
# 'values' has to contain what you named z
# 'xi' has to contain what you named xi,yi
</snippet></ROW><ROW><id>20999231</id><snippet>import numpy as np
from scipy.interpolate import griddata
import pylab as plt
# i guess the pd.read_csv is something pandas (heard of it, but never used it before, but since the only thing you do is read_csv i guess that wont cause problems)
</snippet></ROW><ROW><id>20999231</id><snippet>from matplotlib.mlab import griddata</snippet></ROW><ROW><id>20999331</id><snippet>teststring = '910501857403 TBS465 3 TL5 14 W K HFP No D8-VH'
re.findall(r'\w+\b(?! [WV])|\w+\b [WV]', teststring)

['910501857403', 'TBS465', '3', 'TL5', '14 W', 'K', 'HFP', 'No', 'D8', 'VH']
</snippet></ROW><ROW><id>20999331</id><snippet>\w+\b</snippet></ROW><ROW><id>20999331</id><snippet>|</snippet></ROW><ROW><id>20999463</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>20999463</id><snippet>some_func</snippet></ROW><ROW><id>20999463</id><snippet>other_file.py</snippet></ROW><ROW><id>20999463</id><snippet>from .other_file import some_func
</snippet></ROW><ROW><id>20999616</id><snippet>print()</snippet></ROW><ROW><id>20999616</id><snippet>write()</snippet></ROW><ROW><id>20999616</id><snippet>for line in zip(a,b,c,e):
    var = line[0]
    input_sat.write(line[0].encode('utf-8') + '\n')
</snippet></ROW><ROW><id>20999616</id><snippet>Programska šema - sreda, 01. jan 2014
</snippet></ROW><ROW><id>20999642</id><snippet>except TypeError as exc</snippet></ROW><ROW><id>20999718</id><snippet>route</snippet></ROW><ROW><id>20999718</id><snippet>add_url_map()</snippet></ROW><ROW><id>20999718</id><snippet>register_blueprint()</snippet></ROW><ROW><id>20999718</id><snippet>before_app_request</snippet></ROW><ROW><id>20999718</id><snippet>def add_app_url_converter(self, name, f):
    self.record_once(lambda s: s.app.url_map.converters[name] = f
    return f

Blueprint.add_app_url_converter = add_app_url_converter

# ...

bp = Blueprint('mybp', __name__)
bp.add_app_url_converter('list', ListConverter)
</snippet></ROW><ROW><id>20999801</id><snippet>"hassle free"</snippet></ROW><ROW><id>20999801</id><snippet>a</snippet></ROW><ROW><id>20999801</id><snippet>for</snippet></ROW><ROW><id>20999801</id><snippet>for sent in a:
    o = 0
    for i in sent:
        o += sum(i.count(col) for col in b)
        o -= i.count("hassle free")
    c.append((sent, o))
</snippet></ROW><ROW><id>20999801</id><snippet>[(['911', 'strength', 'Bolero lists 12 pounds hassle free and stress free.'], 3), (['912', 'power', 'Bolero lifts free weights.'], 2)]
</snippet></ROW><ROW><id>20999838</id><snippet>def read_instance(filename):
    instance = RS()
    instance.importer(filename)
    return instance
</snippet></ROW><ROW><id>20999838</id><snippet>instances = [read_instance(filename) for filename in 'abcd']

print len(instances)  # Prints 4
print instance[0]  # Prints the first
print instance[1]  # Prints the second, etc
</snippet></ROW><ROW><id>20999838</id><snippet>instances = {filename: read_instance(filename) for filename in 'abcd'}

print instances['c']  # Prints the instance corresponding to filename 'c'
</snippet></ROW><ROW><id>21000115</id><snippet>PageSetup.Width</snippet></ROW><ROW><id>21000115</id><snippet>PageSetup.PageWidth</snippet></ROW><ROW><id>21000115</id><snippet>x.Content.Text</snippet></ROW><ROW><id>21000275</id><snippet>df = df[df.B != 'three'] # remove where B = three
df.reset_index(drop=True)

       B    amount  id
0    one    -1.176137    1
1    one     0.434470    2
2    two    -0.887526    3
3    two     0.126969    5
4    one     0.090442    7
5    two    -1.511353    8
</snippet></ROW><ROW><id>21000275</id><snippet>df.set_index('id')

       B    amount
id      
1    one    -0.410671
2    one     0.092931
3    two    -0.100324
4    three   0.322580
5    two    -0.546932
6    three  -2.018198
7    one    -0.459551
8    two     1.254597
</snippet></ROW><ROW><id>21000309</id><snippet>io.TextIOWrapper()</snippet></ROW><ROW><id>21000309</id><snippet>None</snippet></ROW><ROW><id>21000309</id><snippet>''</snippet></ROW><ROW><id>21000309</id><snippet>'\n'</snippet></ROW><ROW><id>21000309</id><snippet>'\r'</snippet></ROW><ROW><id>21000309</id><snippet>'\r\n'</snippet></ROW><ROW><id>21000603</id><snippet>User</snippet></ROW><ROW><id>21000603</id><snippet>check_password</snippet></ROW><ROW><id>21000603</id><snippet>user = User.object.get(username=inputname)
user.checK_password('a_password')
</snippet></ROW><ROW><id>21000603</id><snippet>newPassword</snippet></ROW><ROW><id>21000603</id><snippet>try:
    user = User.object.get(username=inputname)
except User.DoesNotExist:
    # all other expections will not be caught!
</snippet></ROW><ROW><id>21000614</id><snippet>unittest.skipIf(condition)</snippet></ROW><ROW><id>21000614</id><snippet>unittest.skipIf(__skipThisDir__)</snippet></ROW><ROW><id>21000614</id><snippet>import test_configuration</snippet></ROW><ROW><id>21000614</id><snippet> __skipThisDir__ = False  #or True as needed
</snippet></ROW><ROW><id>21000783</id><snippet>setattr</snippet></ROW><ROW><id>21000783</id><snippet>__getitem__</snippet></ROW><ROW><id>21000783</id><snippet>__setitem__</snippet></ROW><ROW><id>21000783</id><snippet>myobj.set_triggermode = value
</snippet></ROW><ROW><id>21000783</id><snippet>myobj.change_setting('triggermode', value)
</snippet></ROW><ROW><id>21000817</id><snippet>from bluetooth import *

print "performing inquiry..."

nearby_devices = discover_devices(lookup_names = True)

print "found %d devices" % len(nearby_devices)

for name, addr in nearby_devices:
     print " %s - %s" % (addr, name)
</snippet></ROW><ROW><id>21000817</id><snippet>lookup_names = True</snippet></ROW><ROW><id>21000817</id><snippet>if lookup_names is False, returns a list of bluetooth addresses.
if lookup_names is True, returns a list of (address, name) tuples
</snippet></ROW><ROW><id>21001111</id><snippet>def __init__(self, *args, **kwargs):
    super(SchemeForm, self).__init__(*args, **kwargs)

    #...
    self.fields['domain'].widget.attrs['http-prefix'] = ''
</snippet></ROW><ROW><id>21001176</id><snippet>Class</snippet></ROW><ROW><id>21001176</id><snippet>OlObjectType</snippet></ROW><ROW><id>21001176</id><snippet>Parent</snippet></ROW><ROW><id>21001176</id><snippet>Application</snippet></ROW><ROW><id>21001176</id><snippet>describe_outlook_object</snippet></ROW><ROW><id>21001204</id><snippet>len()</snippet></ROW><ROW><id>21001204</id><snippet>__len__</snippet></ROW><ROW><id>21001204</id><snippet>int</snippet></ROW><ROW><id>21001204</id><snippet>PyInt_AsSsize_t()</snippet></ROW><ROW><id>21001204</id><snippet>PyIntObject</snippet></ROW><ROW><id>21001204</id><snippet>PyLongObject</snippet></ROW><ROW><id>21001204</id><snippet>Py_ssize_t</snippet></ROW><ROW><id>21001204</id><snippet>Py_ssize_t</snippet></ROW><ROW><id>21001204</id><snippet>type.slot_sq_length</snippet></ROW><ROW><id>21001204</id><snippet>int</snippet></ROW><ROW><id>21001204</id><snippet>__new__</snippet></ROW><ROW><id>21001204</id><snippet>0</snippet></ROW><ROW><id>21001204</id><snippet>int()</snippet></ROW><ROW><id>21001204</id><snippet>len()</snippet></ROW><ROW><id>21001204</id><snippet>len()</snippet></ROW><ROW><id>21001204</id><snippet>int()</snippet></ROW><ROW><id>21001204</id><snippet>sys.maxsize</snippet></ROW><ROW><id>21001204</id><snippet>__len__</snippet></ROW><ROW><id>21001368</id><snippet>range(100)</snippet></ROW><ROW><id>21001368</id><snippet>False</snippet></ROW><ROW><id>21001368</id><snippet>In [1]: bool(0)
Out[1]: False
</snippet></ROW><ROW><id>21001368</id><snippet>True</snippet></ROW><ROW><id>21001368</id><snippet>all</snippet></ROW><ROW><id>21001368</id><snippet>True</snippet></ROW><ROW><id>21001368</id><snippet>True</snippet></ROW><ROW><id>21001368</id><snippet>if</snippet></ROW><ROW><id>21001368</id><snippet>In [2]: all(range(10)) # 0..9
Out[2]: False

In [3]: all(range(1,10)) # 1..9
Out[3]: True
</snippet></ROW><ROW><id>21001375</id><snippet>.loc</snippet></ROW><ROW><id>21001375</id><snippet>In [21]: df.loc[:,pd.Index(['Product','Week']) + df.columns[df.columns.slice_indexer('month2','month4')]]
Out[21]: 
  Product    Week  month2  month3  month4
0    coke  201301      12      12      12
1   fanta  201301       1       1       1
2    coke  201302       3       3       3
3  sprite  201302      12      12      12
4   pepsi  201303      11      11      11

[5 rows x 5 columns]
</snippet></ROW><ROW><id>21001467</id><snippet>import matplotlib.pyplot as plt

fig, ax1 = plt.subplots()

# These are in unitless percentages of the figure size. (0,0 is bottom left)
left, bottom, width, height = [0.25, 0.6, 0.2, 0.2]
ax2 = fig.add_axes([left, bottom, width, height])

ax1.plot(range(10), color='red')
ax2.plot(range(6)[::-1], color='green')

plt.show()
</snippet></ROW><ROW><id>21001649</id><snippet>Dict1 = {c[0]:0 for c in PriceList}
</snippet></ROW><ROW><id>21001649</id><snippet>Dict1 = {c[0]: {} for c in PriceList}
</snippet></ROW><ROW><id>21001649</id><snippet>for line in PriceList:
    Dict1[line[0]][line[1]] = line[2]
</snippet></ROW><ROW><id>21001649</id><snippet>&gt;&gt;&gt; PriceList = [['WGH', 'A1', 100], ['WGH', 'A2', 125], ['WGH', 'A3', 150],
...              ['RIE', 'A1', 75], ['RIE', 'A2', 125]]
&gt;&gt;&gt; Dict1 = {c[0]: {} for c in PriceList}
&gt;&gt;&gt; for line in PriceList:
...     Dict1[line[0]][line[1]] = line[2]
... 
&gt;&gt;&gt; Dict1
{'RIE': {'A1': 75, 'A2': 125}, 'WGH': {'A1': 100, 'A3': 150, 'A2': 125}}
</snippet></ROW><ROW><id>21001676</id><snippet>list</snippet></ROW><ROW><id>21001676</id><snippet>tuple</snippet></ROW><ROW><id>21001676</id><snippet>tuple(lst)</snippet></ROW><ROW><id>21001676</id><snippet>list</snippet></ROW><ROW><id>21001676</id><snippet>class ImmutableList:
    def __init__ (self, actualList):
        self.__lst = actualList
    def __len__ (self):
        return self.__lst.__len__()
    def __getitem__ (self, key):
        return self.__lst.__getitem__(key)
    def __iter__ (self):
        return self.__lst.__iter__()
    def __reversed__ (self):
        return self.__lst.__reversed__()
    def __contains__ (self, item):
        return self.__lst.__contains__(item)
    def __repr__ (self):
        return self.__lst.__repr__()
    def __str__ (self):
        return self.__lst.__str__()
</snippet></ROW><ROW><id>21001676</id><snippet>&gt;&gt;&gt; original = [1, 2, 3, 4]
&gt;&gt;&gt; immutable = ImmutableList(original)
&gt;&gt;&gt; immutable
[1, 2, 3, 4]
&gt;&gt;&gt; immutable[2]
3
&gt;&gt;&gt; for i in immutable:
        print(i, end='; ')

1; 2; 3; 4; 
&gt;&gt;&gt; list(reversed(immutable))
[4, 3, 2, 1]
&gt;&gt;&gt; immutable[1] = 4
Traceback (most recent call last):
  File "&lt;pyshell#39&gt;", line 1, in &lt;module&gt;
    immutable[1] = 4
TypeError: 'ImmutableList' object does not support item assignment
</snippet></ROW><ROW><id>21001676</id><snippet>list</snippet></ROW><ROW><id>21001676</id><snippet>__setitem__</snippet></ROW><ROW><id>21001676</id><snippet>__delitem__</snippet></ROW><ROW><id>21001676</id><snippet>list</snippet></ROW><ROW><id>21001676</id><snippet>list</snippet></ROW><ROW><id>21001676</id><snippet>ImmutableList</snippet></ROW><ROW><id>21001676</id><snippet>list</snippet></ROW><ROW><id>21001676</id><snippet>tuple</snippet></ROW><ROW><id>21001716</id><snippet>return</snippet></ROW><ROW><id>21001716</id><snippet>closesearcher</snippet></ROW><ROW><id>21001716</id><snippet>gamescene</snippet></ROW><ROW><id>21001716</id><snippet>event.get()</snippet></ROW><ROW><id>21001716</id><snippet>playerWantsToQuit</snippet></ROW><ROW><id>21001716</id><snippet>running</snippet></ROW><ROW><id>21001779</id><snippet>==</snippet></ROW><ROW><id>21001779</id><snippet>is</snippet></ROW><ROW><id>21001779</id><snippet>def xyz():
   pass

if xyz:
   #this will trigger since a method is not a falsey value

xyz == True #No it is not equal to true
xyz == False #no it is not equal to false

xyz is True #no it certainly is not the same memory location as true
xyz is False #no it is also not the same memory location as false
</snippet></ROW><ROW><id>21001808</id><snippet>x = [1 2 3]</snippet></ROW><ROW><id>21001808</id><snippet>x = [1, 2, 3]</snippet></ROW><ROW><id>21001808</id><snippet>In [1]: x = [1,
   ...: 2,
   ...: 3,
   ...: 4]

In [2]: x
Out[2]: [1, 2, 3, 4]
</snippet></ROW><ROW><id>21001808</id><snippet>"""</snippet></ROW><ROW><id>21001808</id><snippet>'''</snippet></ROW><ROW><id>21001808</id><snippet>x = """</snippet></ROW><ROW><id>21001808</id><snippet>&lt;ctrl&gt;-v</snippet></ROW><ROW><id>21001808</id><snippet>&lt;shift&gt;-&lt;ins&gt;</snippet></ROW><ROW><id>21001808</id><snippet>In [1]: x = """4
   ...: 1
   ...: 5
   ...: 2
   ...: 15
   ...: 1"""

In [2]: x
Out[2]: '4\n1\n5\n2\n15\n1'

In [3]: x.split()
Out[3]: ['4', '1', '5', '2', '15', '1']

In [4]: import numpy as np

In [5]: np.array(x.split(), dtype=float)
Out[5]: array([  4.,   1.,   5.,   2.,  15.,   1.])
</snippet></ROW><ROW><id>21001808</id><snippet>ipython</snippet></ROW><ROW><id>21001808</id><snippet>In [1]: x = """4
   ...: 1
   ...: 5
   ...: 2
   ...: 15
   ...: 1"""

In [2]: x = x.split()
</snippet></ROW><ROW><id>21001808</id><snippet>In [1]: %paste x
</snippet></ROW><ROW><id>21001808</id><snippet>pyserial</snippet></ROW><ROW><id>21001846</id><snippet>import numpy as np

N_TYPES = 3

instream = [ [(0,0.3), (1,0.5), (2,0.1)],
             [(0,0.5), (1,0.3), (2,0.3)],
             [(0,0.4), (1,0.4), (2,0.5)],
             [(0,0.3), (1,0.7), (2,0.2)],
             [(0,0.2), (1,0.6), (2,0.1)] ]
instream = np.array(instream)

# this removes document tags because we only consider probabilities here
values = [map(lambda x: x[1], doc) for doc in instream]

# determine the cluster of each document by using maximum probability
belongs_to = map(lambda x: np.argmax(x), values)
belongs_to = np.array(belongs_to)

# construct clusters of indices to your instream
cluster_indices = [(belongs_to == k).nonzero()[0] for k in range(N_TYPES)]

# apply the indices to obtain full output
out = [instream[cluster_indices[k]].tolist() for k in range(N_TYPES)]   
</snippet></ROW><ROW><id>21001846</id><snippet>out</snippet></ROW><ROW><id>21001846</id><snippet>[[[[0.0, 0.5], [1.0, 0.3], [2.0, 0.3]]],

 [[[0.0, 0.3], [1.0, 0.5], [2.0, 0.1]],
  [[0.0, 0.3], [1.0, 0.7], [2.0, 0.2]],
  [[0.0, 0.2], [1.0, 0.6], [2.0, 0.1]]],

 [[[0.0, 0.4], [1.0, 0.4], [2.0, 0.5]]]]
</snippet></ROW><ROW><id>21001846</id><snippet>numpy</snippet></ROW><ROW><id>21001846</id><snippet>(belongs_to == 1).nonzero()[0]</snippet></ROW><ROW><id>21001846</id><snippet>belongs_to</snippet></ROW><ROW><id>21001846</id><snippet>1</snippet></ROW><ROW><id>21001846</id><snippet>instream[cluster_indices[2]]</snippet></ROW><ROW><id>21001919</id><snippet>»»» import argparse

»»» parser = argparse.ArgumentParser(description='foo baaar')

»»» parser.add_argument('input_file')
Out[3]: _StoreAction(option_strings=[], dest='input_file', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)

»»» parser.add_argument('output_file')
Out[4]: _StoreAction(option_strings=[], dest='output_file', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)

»»» parser.add_argument('-e', action="append")
Out[5]: _AppendAction(option_strings=['-e'], dest='e', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)

»»» parser.add_argument('-s', action="append")
Out[6]: _AppendAction(option_strings=['-s'], dest='s', nargs=None, const=None, default=None, type=None, choices=None, help=None, metavar=None)

»»» parser.parse_args('foo1.txt foo2.txt -e abc -e def -s xyz -s pqr'.split())
Out[7]: Namespace(e=['abc', 'def'], input_file='foo1.txt', output_file='foo2.txt', s=['xyz', 'pqr'])
</snippet></ROW><ROW><id>21001919</id><snippet>parser.parse_args()</snippet></ROW><ROW><id>21001919</id><snippet>-s</snippet></ROW><ROW><id>21001919</id><snippet>-e</snippet></ROW><ROW><id>21001919</id><snippet>action="append"</snippet></ROW><ROW><id>21001919</id><snippet>add_argument</snippet></ROW><ROW><id>21001919</id><snippet>-s</snippet></ROW><ROW><id>21001919</id><snippet>-e</snippet></ROW><ROW><id>21001919</id><snippet>parser.parse_args</snippet></ROW><ROW><id>21001919</id><snippet>1.</snippet></ROW><ROW><id>21001919</id><snippet>2.</snippet></ROW><ROW><id>21001919</id><snippet>»»» args = parser.parse_args('foo1.txt foo2.txt -e abc -e def -s xyz -s pqr'.split())

»»» args.e
Out[12]: ['abc', 'def']
</snippet></ROW><ROW><id>21001919</id><snippet>def include_exclude(input_file, output_file, inclusion_list, exclusion_list=[]):
    with open(output_file, 'w') as fo:
        with open(input_file, 'r') as fi:
            for line in fi:
                inclusion_words_in_line = map(lambda x: x in line, inclusion_list)
                exclusion_words_in_line = map(lambda x: x in line, exclusion_list)
                if any(inclusion_words_in_line) and not any(exclusion_words_in_line):
                    fo.write(line)
</snippet></ROW><ROW><id>21001919</id><snippet>with</snippet></ROW><ROW><id>21001919</id><snippet>for</snippet></ROW><ROW><id>21001919</id><snippet>line</snippet></ROW><ROW><id>21001919</id><snippet>map</snippet></ROW><ROW><id>21001919</id><snippet>inclusion_list</snippet></ROW><ROW><id>21001919</id><snippet>inclusion_list</snippet></ROW><ROW><id>21001919</id><snippet>lambda x: x in line</snippet></ROW><ROW><id>21001919</id><snippet>True</snippet></ROW><ROW><id>21001919</id><snippet>inclusion_list</snippet></ROW><ROW><id>21001919</id><snippet>»»» line="foo bar"

»»» words=['foo', 'barz']

»»» map(lambda x: x in line, words)
Out[24]: [True, False]
</snippet></ROW><ROW><id>21001919</id><snippet>any</snippet></ROW><ROW><id>21001919</id><snippet>inclusion_words_in_line</snippet></ROW><ROW><id>21001919</id><snippet>not any</snippet></ROW><ROW><id>21001919</id><snippet>line</snippet></ROW><ROW><id>21001919</id><snippet>all</snippet></ROW><ROW><id>21001919</id><snippet>inclusion_list</snippet></ROW><ROW><id>21001919</id><snippet>all</snippet></ROW><ROW><id>21001919</id><snippet>inclusion_list</snippet></ROW><ROW><id>21001919</id><snippet>exclusion_list</snippet></ROW><ROW><id>21001919</id><snippet>map</snippet></ROW><ROW><id>21001919</id><snippet>any</snippet></ROW><ROW><id>21002083</id><snippet>&gt;&gt;&gt; 1 &lt; 2 &lt; 3
True
</snippet></ROW><ROW><id>21002083</id><snippet>&gt;&gt;&gt; (1 &lt; 2) and (2 &lt; 3)
True
</snippet></ROW><ROW><id>21002083</id><snippet>&gt;&gt;&gt; 3 &gt; 2 == True
False
</snippet></ROW><ROW><id>21002083</id><snippet>&gt;&gt;&gt; (3 &gt; 2) and (2 == True)
False
</snippet></ROW><ROW><id>21002083</id><snippet>&gt;&gt;&gt; (3 &gt; 2), (2 == True)
(True, False)
</snippet></ROW><ROW><id>21002370</id><snippet>self</snippet></ROW><ROW><id>21002370</id><snippet>__get__</snippet></ROW><ROW><id>21002370</id><snippet>&gt;&gt;&gt; A.__dict__['m'].__get__(A(), A)
&lt;bound method A.m of &lt;__main__.A object at 0x10c29bc10&gt;&gt;
&gt;&gt;&gt; A().m
&lt;bound method A.m of &lt;__main__.A object at 0x10c3af450&gt;&gt;
</snippet></ROW><ROW><id>21002370</id><snippet>A().m</snippet></ROW><ROW><id>21002370</id><snippet>.m</snippet></ROW><ROW><id>21002370</id><snippet>A().m</snippet></ROW><ROW><id>21002370</id><snippet>@classmethod</snippet></ROW><ROW><id>21002370</id><snippet>@staticmethod</snippet></ROW><ROW><id>21002370</id><snippet>&gt;&gt;&gt; class Foo:
...     @classmethod
...     def bar(cls): pass
...     @staticmethod
...     def baz(): pass
... 
&gt;&gt;&gt; Foo.__dict__['bar'].__get__(Foo(), Foo)
&lt;bound method type.bar of &lt;class '__main__.Foo'&gt;&gt;
&gt;&gt;&gt; Foo.__dict__['baz'].__get__(Foo(), Foo)
&lt;function Foo.baz at 0x10c2a1f80&gt;
&gt;&gt;&gt; Foo().bar
&lt;bound method type.bar of &lt;class '__main__.Foo'&gt;&gt;
&gt;&gt;&gt; Foo().baz
&lt;function Foo.baz at 0x10c2a1f80&gt;
</snippet></ROW><ROW><id>21002455</id><snippet>class Reward(models.Model):
    SINGLE = 'Single'
    MULTI = 'Multi'
    CUSTOM = 'Custom'
    TYPE_CHOICES = (
                (SINGLE, 'Single'),
                (MULTI,  'Multi'),
                (CUSTOM, 'Custom'),
            )

    description = models.CharField(max_length="150")
    active = models.BooleanField(default=True)

    type = models.CharField(max_length=10, choices=TYPE_CHOICES, default=SINGLE)

    code = models.CharField(max_length=200, blank=True)
    expiry = models.DateTimeField(null=True)
</snippet></ROW><ROW><id>21002455</id><snippet>class Scheme(models.Model):
    name = models.CharField(max_length=60)

    participant_reward = models.ForeignKey('Reward', null=True, blank=True)
    friend_reward = models.ForeignKey('Rewards', null=True, blank=True)
</snippet></ROW><ROW><id>21002455</id><snippet>if self.type = CUSTOM:
   pass
</snippet></ROW><ROW><id>21002761</id><snippet>class T(type):
    x = 5

class A(object):
    __metaclass__ = T
</snippet></ROW><ROW><id>21002761</id><snippet>&gt;&gt;&gt; A.x
5
&gt;&gt;&gt; A().x
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: 'A' object has no attribute 'x'
</snippet></ROW><ROW><id>21002761</id><snippet>__setattr__</snippet></ROW><ROW><id>21002761</id><snippet>class A(object):
    x = 1
    def __getattribute__(self, name):
        if name == 'x':
            raise AttributeError
        return super(A, self).__getattribute__(name)
    def __setattr__(self, name, value):
        if name == 'x':
            raise AttributeError
        return super(A, self).__setattr__(name, value)
    def __delattr__(self, name):
        if name == 'x':
            raise AttributeError
        return super(A, self).__delattr__(name)
</snippet></ROW><ROW><id>21002768</id><snippet>binascii.unhexlify</snippet></ROW><ROW><id>21002768</id><snippet>bytes.decode</snippet></ROW><ROW><id>21002768</id><snippet>utf-16-be</snippet></ROW><ROW><id>21002768</id><snippet>&gt;&gt;&gt; import binascii

&gt;&gt;&gt; line = '000A0033002004200430043404300440000A003400200417043D0430043A043E043C0441044204320430000A00350020041C04430437044B043A0430000A00380020041504490435'
&gt;&gt;&gt; binascii.unhexlify(line)
b'\x00\n\x003\x00 \x04 \x040\x044\x040\x04@\x00\n\x004\x00 \x04\x17\x04=\x040\x04:\x04&gt;\x04&lt;\x04A\x04B\x042\x040\x00\n\x005\x00 \x04\x1c\x04C\x047\x04K\x04:\x040\x00\n\x008\x00 \x04\x15\x04I\x045'
&gt;&gt;&gt; print(binascii.unhexlify(line).decode('utf-16-be'))

3 Радар
4 Знакомства
5 Музыка
8 Еще
</snippet></ROW><ROW><id>21002824</id><snippet>time</snippet></ROW><ROW><id>21002824</id><snippet>memcache.set</snippet></ROW><ROW><id>21002840</id><snippet> for a in range(1111,10000):
       allOdd = True
       for b in str(a):
           if int(b) % 2 == 0:
               allOdd = False
       if(allOdd):
          new_list.append(a)
</snippet></ROW><ROW><id>21002915</id><snippet>@property
def something(self):
    return 42
</snippet></ROW><ROW><id>21002915</id><snippet>def something(self):
    return 42
something = property(something)
</snippet></ROW><ROW><id>21002915</id><snippet>@</snippet></ROW><ROW><id>21002915</id><snippet>@</snippet></ROW><ROW><id>21002915</id><snippet>@</snippet></ROW><ROW><id>21002915</id><snippet>property</snippet></ROW><ROW><id>21002915</id><snippet>class Property(object):
    "Emulate PyProperty_Type() in Objects/descrobject.c"

    def __init__(self, fget=None, fset=None, fdel=None, doc=None):
        self.fget = fget
        self.fset = fset
        self.fdel = fdel
        if doc is None and fget is not None:
            doc = fget.__doc__
        self.__doc__ = doc

    def __get__(self, obj, objtype=None):
        if obj is None:
            return self
        if self.fget is None:
            raise AttributeError("unreadable attribute")
        return self.fget(obj)

    def __set__(self, obj, value):
        if self.fset is None:
            raise AttributeError("can't set attribute")
        self.fset(obj, value)

    def __delete__(self, obj):
        if self.fdel is None:
            raise AttributeError("can't delete attribute")
        self.fdel(obj)

    def getter(self, fget):
        return type(self)(fget, self.fset, self.fdel, self.__doc__)

    def setter(self, fset):
        return type(self)(self.fget, fset, self.fdel, self.__doc__)

    def deleter(self, fdel):
        return type(self)(self.fget, self.fset, fdel, self.__doc__)
</snippet></ROW><ROW><id>21002968</id><snippet>import pprint            

for k, v in data.items(): #data is the main dictionary
    if 'children' in v:
        for child in v['children']:
            if child in data:
                data[child].setdefault('parent', []).append(k)

pprint.pprint(data)     
</snippet></ROW><ROW><id>21002968</id><snippet>{'100': {'age': 25, 'cars': 2, 'name': 'Glenn'},
 '101': {'age': 25, 'cars': 2, 'children': ['105', '102'], 'name': 'Glenn'},
 '102': {'age': 25,
         'cars': 2,
         'children': ['103'],
         'name': 'Glenn',
         'parent': ['101', '104']},
 '103': {'age': 25, 'cars': 2, 'name': 'Glenn', 'parent': ['102']},
 '104': {'age': 25, 'cars': 2, 'children': ['105', '102'], 'name': 'Glenn'},
 '105': {'age': 25,
         'cars': 2,
         'children': ['124'],
         'name': 'Glenn',
         'parent': ['101', '104']},
 '106': {'age': 25, 'cars': 2, 'name': 'Glenn'},
 '107': {'age': 25, 'cars': 2, 'children': ['199'], 'name': 'Glenn'}}
</snippet></ROW><ROW><id>21003459</id><snippet>Boolean</snippet></ROW><ROW><id>21003459</id><snippet>ptrue</snippet></ROW><ROW><id>21003459</id><snippet>while loop</snippet></ROW><ROW><id>21003459</id><snippet>print("Finds the nth prime number")
def prime(n):
    primes = 1
    num = 2
    while primes &lt;= n:
            mod = 1
            ptrue = True
            while mod &lt; (num - 1):
                    if num%(num-mod) == 0:
                            ptrue = False
                            break
                    mod += 1
            if ptrue == True:
                    primes += 1
    return(num)
nth = int(input("Enter the value of n: "))

print prime(nth)
</snippet></ROW><ROW><id>21003493</id><snippet>sorted(codebook.items(), key= lambda item: (item[1][0],item[0]))
</snippet></ROW><ROW><id>21003493</id><snippet>[(dictionary_key,(tuple,values)),(dictionary_key,(tuple,values),...]</snippet></ROW><ROW><id>21003629</id><snippet>numpy.interp</snippet></ROW><ROW><id>21003629</id><snippet>yi = np.interp(xi, x, y)
</snippet></ROW><ROW><id>21003629</id><snippet>def nearest_interp(xi, x, y):
    idx = np.abs(x - xi[:,None])
    return y[idx.argmin(axis=1)]
</snippet></ROW><ROW><id>21003629</id><snippet>searchsorted</snippet></ROW><ROW><id>21003629</id><snippet>def fast_nearest_interp(xi, x, y):
    """Assumes that x is monotonically increasing!!."""
    # Shift x points to centers
    spacing = np.diff(x) / 2
    x = x + np.hstack([spacing, spacing[-1]])
    # Append the last point in y twice for ease of use
    y = np.hstack([y, y[-1]])
    return y[np.searchsorted(x, xi)]
</snippet></ROW><ROW><id>21003629</id><snippet>numpy.interp</snippet></ROW><ROW><id>21003629</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def main():
    x = np.array([0.1, 0.3, 1.9])
    y = np.array([4, -9, 1])
    xi = np.linspace(-1, 3, 200)

    fig, axes = plt.subplots(nrows=2, sharex=True, sharey=True)
    for ax in axes:
        ax.margins(0.05)
        ax.plot(x, y, 'ro')

    axes[0].plot(xi, np.interp(xi, x, y), color='blue')
    axes[1].plot(xi, nearest_interp(xi, x, y), color='green')

    kwargs = dict(x=0.95, y=0.9, ha='right', va='top')
    axes[0].set_title("Numpy's $interp$ function", **kwargs)
    axes[1].set_title('Nearest Interpolation', **kwargs)

    plt.show()

def nearest_interp(xi, x, y):
    idx = np.abs(x - xi[:,None])
    return y[idx.argmin(axis=1)]

main()
</snippet></ROW><ROW><id>21003633</id><snippet>/bin/sh</snippet></ROW><ROW><id>21003633</id><snippet>time ls</snippet></ROW><ROW><id>21003633</id><snippet>/usr/bin/time</snippet></ROW><ROW><id>21003633</id><snippet>ls</snippet></ROW><ROW><id>21003633</id><snippet>/bin/bash</snippet></ROW><ROW><id>21003633</id><snippet>time</snippet></ROW><ROW><id>21003633</id><snippet>bash</snippet></ROW><ROW><id>21003633</id><snippet>ls</snippet></ROW><ROW><id>21003633</id><snippet>check_output</snippet></ROW><ROW><id>21003633</id><snippet>s.check_output('exec 2&gt;&amp;1; time ls &gt;/dev/null 2&gt;&amp;1', executable='/bin/bash', shell=True)
</snippet></ROW><ROW><id>21003633</id><snippet>exec 2&gt;&amp;1</snippet></ROW><ROW><id>21003633</id><snippet>check_output</snippet></ROW><ROW><id>21003633</id><snippet>ls</snippet></ROW><ROW><id>21003633</id><snippet>ls</snippet></ROW><ROW><id>21004044</id><snippet>sorted(data, key=operator.itemgetter('key'))
</snippet></ROW><ROW><id>21004044</id><snippet>key</snippet></ROW><ROW><id>21004044</id><snippet>key</snippet></ROW><ROW><id>21004044</id><snippet>list</snippet></ROW><ROW><id>21004044</id><snippet>dict</snippet></ROW><ROW><id>21004044</id><snippet>key</snippet></ROW><ROW><id>21004044</id><snippet>itemgetter</snippet></ROW><ROW><id>21004044</id><snippet>lambda item: item['key']</snippet></ROW><ROW><id>21004229</id><snippet>import Image, ImageDraw

im = Image.open("Two_Dalmatians.jpg")

draw = ImageDraw.Draw(im)

# Locate the "moon" in the upper-left region of the image
xy=[x/4 for x in im.size+im.size]

# Bounding-box is 40x40, so radius of interior circle is 20
xy=[xy[0]-20, xy[1]-20, xy[2]+20, xy[3]+20]

# Fill a chord that starts at 45 degrees and ends at 225 degrees.
draw.chord(xy, 45, 45+180, outline="white", fill="white")

del draw

# save to a different file
with open("Two_Dalmatians_Plus_Moon.png", "wb") as fp:
    im.save(fp, "PNG")
</snippet></ROW><ROW><id>21004229</id><snippet>import Image, ImageDraw

def InitializeMoonData():
    ''''
    Return a 40x40 half-circle, tilted 45 degrees, as raw data
    Only call once, at program initialization
    '''
    im = Image.new("1", (40,40))
    draw = ImageDraw.Draw(im)

    # Draw a 40-diameter half-circle, tilted 45 degrees
    draw.chord((0,0,40,40),
               45,
               45+180,
               outline="white",
               fill="white")
    del draw 

    # Fetch the image data:
    moon = list(im.getdata())

    # Pack it into a 2d matrix
    moon = [moon[i:i+40] for i in range(0, 1600, 40)]

    return moon

# Store a copy of the moon data somewhere useful
moon = InitializeMoonData()


def ApplyMoonStamp(matrix, x, y):
    '''
    Put a moon in the matrix image at location x,y
    Call whenever you need a moon
    '''
    # UNTESTED
    for i,row in enumerate(moon):
        for j,pixel in enumerate(row):
            if pixel != 0:
                # If moon pixel is not black,
                # set image pixel to white
                matrix[x+i][y+j] = 255


# In your code:

#  m = Matrix(1024,768)
#  m = # some kind of math to create the image #
#  ApplyMoonStamp(m, 128,128)  # Adds the moon to your image
</snippet></ROW><ROW><id>21004454</id><snippet>def get_page_list(url):
    return make_list(cleanup(get_text(get_page(url))))

things = get_page_list(url)
stuff = get_page_list(another_url)
spam = get_page_list(eggs)
</snippet></ROW><ROW><id>21004454</id><snippet>def get_clean_text(page):
    return cleanup(get_text(page))
def get_clean_page(url):
    return get_clean_text(get_page(url))
</snippet></ROW><ROW><id>21004454</id><snippet>def get_page_list(url):
    page = get_page(url)
    text = get_text(page)
    cleantext = cleanup(text)
    return make_list(cleantext)
</snippet></ROW><ROW><id>21004454</id><snippet>def compose1(*funcs):
    @wraps(funcs[0])
    def composed(arg):
        for func in reversed(funcs):
            arg = func(arg)
        return arg
    return composed

get_page_list = compose1(make_list, cleanup, get_text, get_page)
</snippet></ROW><ROW><id>21004454</id><snippet>compose</snippet></ROW><ROW><id>21004523</id><snippet>count</snippet></ROW><ROW><id>21004523</id><snippet>def fizz_count(x): 
    return x.count('fizz')
</snippet></ROW><ROW><id>21004523</id><snippet>def fizz_count(x, search_string, case_insensitive=False):
    if case_insensitive:
        x = [item.lower() for item in x]
    return x.count(search_string)
</snippet></ROW><ROW><id>21004578</id><snippet>def get_leaf_nodes(self):
    leafs = []
    def _get_leaf_nodes( node):
        if node is not None:
            if len(node.children) == 0:
                leafs.append(node)
            for n in node.children:
                _get_leaf_nodes(n)
    _get_leaf_nodes(self.root)
    return leafs
</snippet></ROW><ROW><id>21004578</id><snippet>def get_leaf_nodes(self):
    leafs = []
    self._collect_leaf_nodes(self.root,leafs)
    return leafs

def _collect_leaf_nodes(self, node, leafs):
    if node is not None:
        if len(node.children) == 0:
            leafs.append(node)
        for n in node.children:
            self._collect_leaf_nodes(n, leafs)
</snippet></ROW><ROW><id>21004629</id><snippet>np.ndenumerate</snippet></ROW><ROW><id>21004629</id><snippet>&gt;&gt;&gt; for (x, y), element in np.ndenumerate(np.array([[i for i in "egg"] for j in range(3)])):
...     print(x, y, element)
... 
(0L, 0L, 'e')
(0L, 1L, 'g')
(0L, 2L, 'g')
(1L, 0L, 'e')
(1L, 1L, 'g')
(1L, 2L, 'g')
(2L, 0L, 'e')
(2L, 1L, 'g')
(2L, 2L, 'g')
</snippet></ROW><ROW><id>21004655</id><snippet>Rooms.objects.filter(room_state="emptyReady", id='1')
</snippet></ROW><ROW><id>21004655</id><snippet>Room</snippet></ROW><ROW><id>21004655</id><snippet>Rooms.objects.filter(room_state="emptyReady", id='1').values_list('room_state', flat=True)
</snippet></ROW><ROW><id>21004655</id><snippet>values_list</snippet></ROW><ROW><id>21004655</id><snippet>for d in Rooms.objects.filter(room_state="emptyReady", id='1'):    print(d.room_state)
</snippet></ROW><ROW><id>21004655</id><snippet>__unicode__</snippet></ROW><ROW><id>21004655</id><snippet>class Room</snippet></ROW><ROW><id>21004655</id><snippet>class Rooms(models.Model,):
    room_state = models.CharField(max_length=255, choices=[('emptyReady', 'empty'), ('emptyWaiting4Clean', 'clean ready'), ('busy', 'busy')])
    room_type = models.IntegerField()
    room_number = models.IntegerField()

    def __unicode__(self):
        return u'%s' % self.room_state
</snippet></ROW><ROW><id>21004655</id><snippet>room_state</snippet></ROW><ROW><id>21004655</id><snippet>print d</snippet></ROW><ROW><id>21004912</id><snippet>app.config['MAIL_SERVER']='smtp.gmail.com'
app.config['MAIL_PORT'] = 465
app.config['MAIL_USERNAME'] = 'xx@gmail.com'
app.config['MAIL_PASSWORD'] = 'xx;'
app.config['MAIL_USE_TLS'] = False
app.config['MAIL_USE_SSL'] = True
</snippet></ROW><ROW><id>21004912</id><snippet>smtp.gmail.com</snippet></ROW><ROW><id>21005360</id><snippet>randint</snippet></ROW><ROW><id>21005360</id><snippet>num1</snippet></ROW><ROW><id>21005360</id><snippet>randint</snippet></ROW><ROW><id>21005360</id><snippet>randint(1,6)</snippet></ROW><ROW><id>21005360</id><snippet>num1</snippet></ROW><ROW><id>21005360</id><snippet>num1</snippet></ROW><ROW><id>21005360</id><snippet>if roll_q == (' yes'):
    while True:
        num1 = randint(1,6)
        print str(num1)
        if num1 == 1:
            print('your turn is over')
            total = 0
        else:
         num1 = randint(1,6)
         print ('you got ') + str(num1) + ('points')
         total = num1
         print str(total)
         total=total + num1
         cont_q = raw_input('would you like to continue playing')
         if cont_q == ('yes'):
                print ('awesome')
         else:
                print ('ok')
</snippet></ROW><ROW><id>21005394</id><snippet>valid_values = [value for value in xvalues if value &gt; x] #changed &gt;= by &gt;
if valid_values:
    x2 = min(valid_values)
else:
    x2 = None
</snippet></ROW><ROW><id>21005394</id><snippet>try:
    x2 = min(value for value in xvalues if value &gt; x) #changed &gt;= by &gt;
except ValueError:
    x2 = None
</snippet></ROW><ROW><id>21005473</id><snippet>def find_folders(start_path,needle):
   for cwd, folders, files,in os.walk(start_path):
       if needle in folders:
           yield os.path.join(cwd,needle)

for path in find_folders("/","a_folder_named_x"):
    print path
</snippet></ROW><ROW><id>21005798</id><snippet>class Project(Base):   # you should inherit from Base here...
    def __init__(self):
        print "OK"
        self['id'] = ''
</snippet></ROW><ROW><id>21005798</id><snippet>__init__</snippet></ROW><ROW><id>21005798</id><snippet>project_class = Project() # ...and not here since this is an instance, not a Class
</snippet></ROW><ROW><id>21005947</id><snippet>itemgetter</snippet></ROW><ROW><id>21005947</id><snippet>operator</snippet></ROW><ROW><id>21005947</id><snippet> import operator
 m = operator.itemgetter(2,3)
 x, y = m([1,2,3,4,5])
</snippet></ROW><ROW><id>21005947</id><snippet>itemgetter</snippet></ROW><ROW><id>21005947</id><snippet>L</snippet></ROW><ROW><id>21005947</id><snippet>L[2]</snippet></ROW><ROW><id>21005947</id><snippet>L[3]</snippet></ROW><ROW><id>21005952</id><snippet>size_of_new = 5
print zip(*[iter(x)]*size_of_new)
</snippet></ROW><ROW><id>21005952</id><snippet>[x[i:i+size_of_new] for i in range(0,len(x),size_of_new)]
</snippet></ROW><ROW><id>21006000</id><snippet>os.path.abspath(os.path.join(os.path.dirname(__file__), os.path.pardir))
</snippet></ROW><ROW><id>21006000</id><snippet>abspath</snippet></ROW><ROW><id>21006000</id><snippet>join</snippet></ROW><ROW><id>21006000</id><snippet>dirname</snippet></ROW><ROW><id>21006000</id><snippet>__file__</snippet></ROW><ROW><id>21006000</id><snippet>script</snippet></ROW><ROW><id>21006000</id><snippet>pardir</snippet></ROW><ROW><id>21006000</id><snippet>..</snippet></ROW><ROW><id>21006000</id><snippet>os.getcwd()</snippet></ROW><ROW><id>21006000</id><snippet>os.getcwd()+'/..'</snippet></ROW><ROW><id>21006000</id><snippet>__file__</snippet></ROW><ROW><id>21006040</id><snippet>f = open("file.txt",'r')
lines = f.readlines()
f.close()

excludedWord = "whatever you want to get rid of"

newLines = []
for line in lines:
    newLines.append(' '.join([word for word in line.split() if word != excludedWord]))

f = open("file.txt", 'w')
for line in lines:
    f.write("{}\n".format(line))
f.close()
</snippet></ROW><ROW><id>21006040</id><snippet>lst.remove(item)</snippet></ROW><ROW><id>21006040</id><snippet>item</snippet></ROW><ROW><id>21006040</id><snippet>lst</snippet></ROW><ROW><id>21006040</id><snippet>item</snippet></ROW><ROW><id>21006040</id><snippet>.remove()</snippet></ROW><ROW><id>21006040</id><snippet>excludedWord</snippet></ROW><ROW><id>21006040</id><snippet>.remove()</snippet></ROW><ROW><id>21006040</id><snippet>while excludedWord in lst:
    lst.remove(excludedWord)
</snippet></ROW><ROW><id>21006047</id><snippet>One To Many</snippet></ROW><ROW><id>21006047</id><snippet>relationship</snippet></ROW><ROW><id>21006047</id><snippet>Many To Many</snippet></ROW><ROW><id>21006047</id><snippet>teststep_subtest = Table('teststep_subtest',
    Base.metadata,
    Column('subtest_id', Integer, ForeignKey('SubTests.id'), primary_key=True),
    Column('teststep_id', Integer, ForeignKey('TestSteps.id'), primary_key=True),
    )

class TestStep(Base):
    __tablename__ = "TestSteps"
    id = Column(Integer, primary_key = True)
    tag = Column(String) # @note: just for tests
    #subTestID = Column(Integer, ForeignKey("SubTests.id")) # @note: removed
    testStepNumber = Column(Integer)

class SubTest(Base):
    __tablename__ = "SubTests"
    id = Column(Integer, primary_key=True)
    tag = Column(String) # @note: just for tests
    #testSteps = relationship("TestStep", backref = "subTest", order_by=TestStep.testStepNumber)
    testSteps = relationship('TestStep',
            secondary=teststep_subtest,
            backref='subTests',
            order_by=TestStep.testStepNumber,
            )
</snippet></ROW><ROW><id>21006047</id><snippet>ts1 = TestStep(tag="start", testStepNumber=0)
ts2 = TestStep(tag="do-something-cool")
ts3 = TestStep(tag="do-something-groovy")
ts4 = TestStep(tag="do-nothing")
ts5 = TestStep(tag="finish", testStepNumber=9)


st1 = SubTest(tag="sub-test-01", testSteps=[ts5, ts2, ts3, ts4, ts1])
st2 = SubTest(tag="sub-test-02", testSteps=[ts5, ts3, ts1])
st3 = SubTest(tag="sub-test-03-nosteps")
session.add_all([ts1, ts2, ts3, ts4, ts5, st1, st2, st3])
session.commit()
session.expunge_all()

# query test
print '-' * 80
#engine.echo = False
for _st in session.query(SubTest).all():
    print "SubTest:", _st.tag
    for _ts in _st.testSteps:
        print "  ", _ts.testStepNumber, _ts.tag
</snippet></ROW><ROW><id>21006047</id><snippet>SubTest: sub-test-01
   None do-something-cool
   None do-something-groovy
   None do-nothing
   0 start
   9 finish
SubTest: sub-test-02
   None do-something-groovy
   0 start
   9 finish
SubTest: sub-test-03-nosteps
</snippet></ROW><ROW><id>21006047</id><snippet>testStepNumber</snippet></ROW><ROW><id>21006047</id><snippet>TestStep</snippet></ROW><ROW><id>21006047</id><snippet>Association Object</snippet></ROW><ROW><id>21006047</id><snippet>Association Object</snippet></ROW><ROW><id>21006169</id><snippet>read_csv</snippet></ROW><ROW><id>21006169</id><snippet>dtype</snippet></ROW><ROW><id>21006169</id><snippet>tst.csv</snippet></ROW><ROW><id>21006169</id><snippet>c1,c2,c3,c4,c5
a,b,6468716846847,12,13
d,e,6468716846848,13,14
</snippet></ROW><ROW><id>21006169</id><snippet>In [11]: pd.read_csv('tst.csv', dtype={'c3': 'str'})
Out[11]: 
  c1 c2             c3  c4  c5
0  a  b  6468716846847  12  13
1  d  e  6468716846848  13  14

[2 rows x 5 columns]
</snippet></ROW><ROW><id>21006240</id><snippet>L</snippet></ROW><ROW><id>21006240</id><snippet>10           chased     

11           dog        
11           mouse      
11           cat        
</snippet></ROW><ROW><id>21006240</id><snippet>110           dog        

111           mouse      
111           cat        
</snippet></ROW><ROW><id>21006254</id><snippet>import random

words = []
translations = []

def add_words():
    # input word pairs until the user inputs "exit"
    print('\nInput word and translation pairs. Type "exit" to finish.')
    done = False
    while not done:
        word = raw_input("Add a word to your wordlist: ")
        # only input translation, if the word wasn't exit
        if word != "exit":
            translation = raw_input("Add the translation to this word: ")
        if word != "exit" and translation != "exit":
            # append in pairs only
            words.append(word)
            translations.append(translation)
        else:
            done = True

def exercise():
    # excercising until the user inputs "exit"
    print("\nExcercising starts. ")
    done = False
    while not done:
        # get a random index in the words
        index = random.randrange(0, len(words))
        # get the word and translation for the index
        word = words[index]
        translation = translations[index]
        # ask the user
        answer = raw_input('Enter the translation for "%s": ' % word)
        if answer == "exit":
            done = True
            print("\nGoodbye!")
        elif answer == translation:
            print("Correct!")
        else:
            print("Wrong!")

add_words()
exercise()
</snippet></ROW><ROW><id>21006357</id><snippet>In [1]: %paste
t_s           = [((1, 0, 0), 1), ((1, 0, 1), 1), ((1, 1, 0), 1), ((1, 1, 1), 0)]

## -- End pasted text --

In [2]: [(a[1:], b) for a, b in t_s]
Out[2]: [((0, 0), 1), ((0, 1), 1), ((1, 0), 1), ((1, 1), 0)]
</snippet></ROW><ROW><id>21006567</id><snippet>main_menu()</snippet></ROW><ROW><id>21006567</id><snippet>while True:</snippet></ROW><ROW><id>21006567</id><snippet>break</snippet></ROW><ROW><id>21006567</id><snippet>raise</snippet></ROW><ROW><id>21006567</id><snippet>return</snippet></ROW><ROW><id>21006567</id><snippet>game()</snippet></ROW><ROW><id>21006567</id><snippet>while False:</snippet></ROW><ROW><id>21006567</id><snippet>mainMenu() == False
</snippet></ROW><ROW><id>21006567</id><snippet>game() == True
</snippet></ROW><ROW><id>21006567</id><snippet>def counters:</snippet></ROW><ROW><id>21006567</id><snippet>counters()</snippet></ROW><ROW><id>21006567</id><snippet>def main():</snippet></ROW><ROW><id>21006567</id><snippet>main</snippet></ROW><ROW><id>21006567</id><snippet>mainMenu</snippet></ROW><ROW><id>21006567</id><snippet>game</snippet></ROW><ROW><id>21006567</id><snippet>counters</snippet></ROW><ROW><id>21006567</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>21006567</id><snippet>mainMenu</snippet></ROW><ROW><id>21006567</id><snippet>set up variables

set up window 

main menu:
    setup on screen text
    while True:
        get user input 
        if correct user input:
            break
    call game

game:
    while True:
        play game

call main menu
</snippet></ROW><ROW><id>21006593</id><snippet>n</snippet></ROW><ROW><id>21006593</id><snippet>log_fact(n)</snippet></ROW><ROW><id>21006593</id><snippet>def log_fact(n) :
    return np.sum(np.log(np.arange(1,n+1)))
</snippet></ROW><ROW><id>21006593</id><snippet>np.vectorize()</snippet></ROW><ROW><id>21006657</id><snippet>for index, item in enumerate(lst): # note: don't use list
    if not index: # or if index == 0:
        # first item
    else:
        # other items
</snippet></ROW><ROW><id>21006657</id><snippet>first = True
for item in lst:
    if first:
        first = False
        # first item 
    else:
        # other items 
</snippet></ROW><ROW><id>21006657</id><snippet>for index in range(len(lst)):
    item = lst[i]
    if not index:
        # first item
    else:
        # other items
</snippet></ROW><ROW><id>21006752</id><snippet># "fred" is just some arbitrary key; it means nothing other than to name the group
grid columnconfigure $master 0 -weight 1 -uniform fred
</snippet></ROW><ROW><id>21006752</id><snippet>uniform</snippet></ROW><ROW><id>21006752</id><snippet># "fred" is just some arbitrary key; it means nothing other than to name the group
master.grid_columnconfigure(0, weight=1, uniform="fred")
</snippet></ROW><ROW><id>21006895</id><snippet>recursive</snippet></ROW><ROW><id>21006895</id><snippet>for</snippet></ROW><ROW><id>21006895</id><snippet>&lt;ul class="sitemap"&gt;
{%- for item in sitemap recursive %}
    &lt;li&gt;&lt;a href="{{ item.href|e }}"&gt;{{ item.title }}&lt;/a&gt;
    {%- if item.children -%}
        &lt;ul class="submenu"&gt;{{ loop(item.children) }}&lt;/ul&gt;
    {%- endif %}&lt;/li&gt;
{%- endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>21006895</id><snippet>from jinja2 import Template

x = Template("""{%- for key, value in tree.iteritems() recursive %}
{{ '--' * (loop.depth-1) }}{{ key }}
{%- if value is mapping -%}/{{ loop(value.iteritems()) }}{%- endif -%}
{%- endfor %}
""")

tree = {'.': {
    'walk.py': None,
    'what.html': None,
    'misc': {},
    'orders': {
        'order1.html': None,
        'more': {
            'stuff.html': None
        }
    }
}}

print x.render(tree=tree)
</snippet></ROW><ROW><id>21006895</id><snippet>./
--walk.py
--what.html
--misc/
--orders/
----order1.html
----more/
------stuff.html
</snippet></ROW><ROW><id>21006895</id><snippet>{%- ... -%}</snippet></ROW><ROW><id>21007056</id><snippet>Rule(SgmlLinkExtractor(deny = (r'\/preferences', r'\/auth')))
</snippet></ROW><ROW><id>21007056</id><snippet>\/</snippet></ROW><ROW><id>21007056</id><snippet>http:\/\/mydomain.com\/preferences</snippet></ROW><ROW><id>21007056</id><snippet>fallow = True</snippet></ROW><ROW><id>21007056</id><snippet>callback</snippet></ROW><ROW><id>21007056</id><snippet>Rule</snippet></ROW><ROW><id>21007218</id><snippet>def splitList (lst, n):
    it = iter(lst)
    new = [[next(it) for _ in range(n)] for _ in range(len(lst) // n)]

    for i, x in enumerate(it):
        new[i].append(x)

    return new
</snippet></ROW><ROW><id>21007218</id><snippet>&gt;&gt;&gt; lst = ['milk', 'eggs', 'beef', 'oranges', 'dog food', 'chips', 'soda', 'bread']
&gt;&gt;&gt; splitList(lst, 3)
[['milk', 'eggs', 'beef', 'soda'], ['oranges', 'dog food', 'chips', 'bread']]
&gt;&gt;&gt; splitList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)
[[1, 2, 3, 10], [4, 5, 6], [7, 8, 9]]
</snippet></ROW><ROW><id>21007218</id><snippet>len(lst) // n</snippet></ROW><ROW><id>21007218</id><snippet>n</snippet></ROW><ROW><id>21007248</id><snippet>from operator import itemgetter

# first get index from first row
min_index = min(enumerate(foo[0]), key=lambda x: x[1][1])[0]

# then apply to all rows
foo = [item[min_index:] + item[:min_index] for item in foo]
</snippet></ROW><ROW><id>21007458</id><snippet>df['obs_num'] = 1
df['obs_num'] = df.groupby('Group')['obs_num'].cumsum()
</snippet></ROW><ROW><id>21007577</id><snippet>patron = list()
</snippet></ROW><ROW><id>21007577</id><snippet>nop += 1</snippet></ROW><ROW><id>21007577</id><snippet>global nop</snippet></ROW><ROW><id>21007577</id><snippet>createnew</snippet></ROW><ROW><id>21007654</id><snippet>#!/usr/bin
import smtplib
file_name=input("Enter name of your dictionary: ")
username=input("Enter email id: ")
with open(file_name,"r") as f:
    for name in f:
        try:
            session = smtplib.SMTP('smtp.gmail.com',587)
            session.starttls()
            session.ehlo
            b = session.login(username,name[:-1])
        except smtplib.SMTPAuthenticationError:
            continue
        else:
            print("\n\n\n loggin "+" - password ----&gt;&gt;&gt; "+name[:-1]+"\n\n\n\n\n")
            break
</snippet></ROW><ROW><id>21007654</id><snippet>raw_input</snippet></ROW><ROW><id>21007654</id><snippet>input</snippet></ROW><ROW><id>21007654</id><snippet>with</snippet></ROW><ROW><id>21007654</id><snippet>close()</snippet></ROW><ROW><id>21007654</id><snippet>print</snippet></ROW><ROW><id>21007917</id><snippet>import arcpy
curObj = arcpy.SearchCursor(r"C:/shape.shp")
row = curObj.next()
while row:
    columnValue = row.getValue("columnName")
    row = curObj.next()
</snippet></ROW><ROW><id>21007917</id><snippet>import arcpy
columns = ['column1', 'something', 'someothercolumn']
curObj = arcpy.da.SearchCursor(r"C:/somefile.shp", columns)
for row in curObj:
    print 'column1 is', row[0]
    print 'someothercolumn is', row[2]
</snippet></ROW><ROW><id>21007943</id><snippet>(0..red+green)</snippet></ROW><ROW><id>21007943</id><snippet>red</snippet></ROW><ROW><id>21007943</id><snippet>red</snippet></ROW><ROW><id>21007943</id><snippet>green</snippet></ROW><ROW><id>21007943</id><snippet>def pull_marbles(sample, population=100):
  red = population / 2
  green = (population+1) / 2  # round up just to ensure red+green == population
  for i in range(sample):
    choice = random.randint(1, red + green)
    if choice &lt;= red:  # red pulled
      red -= 1
    else:
      green -= 1
  return (red, green)
</snippet></ROW><ROW><id>21008013</id><snippet>tri</snippet></ROW><ROW><id>21008013</id><snippet>for i in range(1, tri):
</snippet></ROW><ROW><id>21008013</id><snippet>1</snippet></ROW><ROW><id>21008013</id><snippet>7</snippet></ROW><ROW><id>21008013</id><snippet>8</snippet></ROW><ROW><id>21008013</id><snippet>1</snippet></ROW><ROW><id>21008013</id><snippet>1</snippet></ROW><ROW><id>21008013</id><snippet>for i in range(tri):
    tot += 3.0 * size / (i + 1)
</snippet></ROW><ROW><id>21008013</id><snippet>3</snippet></ROW><ROW><id>21008013</id><snippet>3.0</snippet></ROW><ROW><id>21008013</id><snippet>/</snippet></ROW><ROW><id>21008013</id><snippet>&gt;&gt;&gt; 1 / 2
0
&gt;&gt;&gt; 1.0 / 2
0.5
</snippet></ROW><ROW><id>21008013</id><snippet>3.0</snippet></ROW><ROW><id>21008013</id><snippet>from __future__ import division</snippet></ROW><ROW><id>21008013</id><snippet>/</snippet></ROW><ROW><id>21008013</id><snippet>size / (i + 1)</snippet></ROW><ROW><id>21008013</id><snippet>size / (2 ** i)</snippet></ROW><ROW><id>21008013</id><snippet>tot = 0
for i in range(tri):
    tot += 3.0 * size / 2 ** i
</snippet></ROW><ROW><id>21008013</id><snippet>&gt;&gt;&gt; tri, size = 8, 4
&gt;&gt;&gt; tot = 0
&gt;&gt;&gt; for i in range(tri):
...     tot += 3.0 * size / 2 ** i
... 
&gt;&gt;&gt; tot
23.90625
</snippet></ROW><ROW><id>21008163</id><snippet>ehlo</snippet></ROW><ROW><id>21008163</id><snippet>import smtplib, sys

def notify(fromname, fromemail, toname, toemail, subject, body, password):
    fromaddr = fromname+" &lt;"+fromemail+"&gt;"
    toaddrs = [toname+" &lt;"+toemail+"&gt;"]
    msg = "From: "+fromaddr+"\nTo: "+toemail+"\nMIME-Version: 1.0\nContent-type: text/plain\nSubject: "+subject+"\n"+body

    # Credentials (if needed)
    username = fromemail
    password = password

    # The actual mail send
    try:
        server = smtplib.SMTP('smtp.gmail.com:587')
        server.starttls()
        server.login(username,password)
        server.sendmail(fromaddr, toaddrs, msg)
        server.quit()       
        print "success"
    except smtplib.SMTPException:
        print "failure"

fromname = "Your Name"
fromemail = "yourgmailaccount@gmail.com"        
toname = "Recipient"
toemail = "recipient@other.com"
subject = "Test Mail"
body = "Body....."

notify(fromname, fromemail, toname, toemail, subject, body, password)
</snippet></ROW><ROW><id>21008335</id><snippet>import time

from selenium import webdriver
from selenium.webdriver.common.keys import Keys

browser = webdriver.Chrome()

browser.get("https://medium.com/top-100/december-2013")
time.sleep(1)

elem = browser.find_element_by_tag_name("body")

no_of_pagedowns = 20

while no_of_pagedowns:
    elem.send_keys(Keys.PAGE_DOWN)
    time.sleep(0.2)
    no_of_pagedowns-=1

post_elems = browser.find_elements_by_class_name("post-item-title")

for post in post_elems:
    print post.text
</snippet></ROW><ROW><id>21008335</id><snippet>When Your Mother Says She’s Fat
When “Life Hacking” Is Really White Privilege
As tendências culturais dos anos 2000 adiantadas pelo É o Tchan na década de 90
Coming Out as Biracial
Como ganhar discussões com seus parentes de direita neste Natal
How to save local bookstores in two easy steps
Welcome to Dinovember
How to Piss Off Your Barista
The boy whose brain could unlock autism
CrossFit’s Dirty Little Secret
Welcome to Medium
Here’s How the Military Wasted Your Money in 2013
Why I Wear Nail Polish
The day of High School I’ll never forget
7 Reasons Buffalonians Shouldn’t Hate Snow
Dear Guy Who Just Made My Burrito:
Is the Mona Lisa Priceless?
Please stop live tweeting people’s private conversations
Your Friends and Rapists
Eight things you can live without
The Value of Content
40 Ways To Make Life Simple Again
Manila-Beijing-Washington:
Things I Wish Someone Had Told Me When I Was Learning How to Code
Dear Ticketmaster,
Steve Jobs Danced To My Song
11 Things I Wish I Knew When I Started My Business
Bullish: Benevolent Sexism and “That Guy” Who Makes Everything Awkward
Advice to a College Music Student
Silver Gyninen joutui sotaan
Imagining the Post-Antibiotics Future
Which side are you on?
Put it away, junior. 
Casual Predation
The sad little iPhone commercial
How Node.js is Going to Replace JavaScript
Why you should have your heart broken into a million little pieces. 
How to Write Emails Like a CEO
Designing Products That Scale
How radioactive poison became the assassin’s weapon of choice
Why do people hate CrossFit?
We (Still) Need Feminism
10 Advanced Hearthstone Arena Tips
Let It Full-Bleed
What Medium Is For
How a Small Force of Finnish Ski Troops Fought Off a Massive Soviet Army
An Introvert’s Guide to Better Presentations
Mandela The Terrorist
Why You Should have a Messy Desk
Why I’m Not a TEDx Speaker
Fonts have feelings too
You Don’t Want Your Thanksgiving to Go Like This
What I’ve Learned in My First Month as a VC
Why Quantity Should be Your Priority
My Airbnb story
I Wanna Date You Like An Animal
The GIF Guide to Getting Paid
How We Discovered the Underground Chinese App Market
First Images of a Heart Injected with Liquid Metal 
Beyonce Broke the Music Business
“View mode” approach to responsive web design
Sometimes You Will Forget Your Mom Has Cancer
Darkness Ray Beams Invisibility From A Distance
Why Work As We Know It May Be Immoral
Staying Ahead of the Curve
The Geekiest Game Ever Made Has Been Released In Germany 
The Dirty Secret Behind the Salesforce $1M Hackathon
I’m a really good impostor
Mathematical Model of Zombie Epidemics Reveals Two Types of Living-Dead Infections
The Heartbreak Kid
200 Things
I’m Not Racist But—
Duel of the Superbattleships
23 and You
The Seattle NO
I’m a vaccine refuser. There, I said it. 
The Year We Broke Everything
How to make a DIY home alarm system with a raspberry pi and a webcam
Strike While the App is Hot
How to Fall In (and Out) of Love:
Why did Google make an ad for promoting “Search” in India where it has over 97% market share?
A Holiday Message From Jesus
Revealed: The Soviet Union’s $1 Billion ‘Psychotronic’ Arms Race with the US
Postmortem of a Venture-backed Startup
The 1.x Crore Myth
The “Getting Shit Done” Sleep Cycle 
Is the F-35 Joint Strike Fighter the New F-4?
Can the F-35 Win a Dogfight?
Responsive Photosets
Fightball: Millennials vs Boomers
The iconicity of “peaceful resistance”
How We Make Chocolate
Five Ships of the Chinese Navy You Really Ought to Know About
Glassholes and Black Rock City
Bad News for U.S. Warplane Pilots: Russia’s New Dogfighting Missile Can’t Miss
How Antisec Died
10 ways you’ll probably f**k up your startup
UPDATED: Finding the unjustly homeless, and teaching them to code.
Technology hasn’t Changed Us.
What I’ve learned from fatherhood 
</snippet></ROW><ROW><id>21008481</id><snippet>json</snippet></ROW><ROW><id>21008481</id><snippet>import json
from urllib.request import urlopen

response = urlopen('https://s3.amazonaws.com/Minecraft.Download/indexes/legacy.json')
# the default encoding for JSON is UTF-8, but the response can give you
# a different codec
encoding = response.info().get_param('charset', 'utf-8')

data = json.loads(response.read().decode(encoding))
</snippet></ROW><ROW><id>21008481</id><snippet>for name, info in data['objects'].items():
    print('{}: {}'.format(name, info['hash']))
</snippet></ROW><ROW><id>21008481</id><snippet>lang/fr_CA.lang: 6df06576e677d952dc15da3926f4ed822d106354
sounds/random/orb.ogg: e9833a1512b57bcf88ac4fdcc8df4e5a7e9d701d
sounds/mob/villager/yes1.ogg: be73a79fb1ab966887a8b88bed9aa6b3d9173d71
sounds/mob/cat/purreow2.ogg: 08573a1f11058b09c5855122dff47ceb209f771e
sound/mob/spider/say2.ogg: 501b40b97ee55cb7a97943ee620aa05131089fc2
lang/el_GR.lang: 4330e3218548e9f3268d103e5ab71fa2b28d9b20
sound/mob/horse/soft1.ogg: a9a83e3f186b3af56a9844b8d4976c6251ba17eb
sounds/mob/bat/death.ogg: 6df3b2c2b951863fc5200edf3ff3396b105ed897
# etc.
</snippet></ROW><ROW><id>21009063</id><snippet>(?:...)</snippet></ROW><ROW><id>21009063</id><snippet>pattern_1 = r'\b(?:(?:jan|febr)uary|ma(?:y|rch)|ju(?:ne|ly)|a(?:pril|ugust)|(?:octo|(?:sept|nov|dec)em)ber)\s+[0-9]{1,2},?\s+[0-9]{4},?'
</snippet></ROW><ROW><id>21009360</id><snippet>import csv
import sys
import string

reader = csv.reader(sys.stdin, delimiter='\t')
writer = csv.writer(sys.stdout, delimiter='\t')

# write the header as-is
writer.writerow(reader.next())

for row in reader:
    row[0] = string.capwords(row[0])
    row[1] = string.capwords(row[1])
    row[2] = row[2].upper()
    writer.writerow(row)
</snippet></ROW><ROW><id>21009360</id><snippet>cat test.csv | python fix_case.csv
Name    City    State
Foo Bar Los Angeles CA
Guy's Name  Philadelphia    PA
</snippet></ROW><ROW><id>21009362</id><snippet>node parse.js</snippet></ROW><ROW><id>21009362</id><snippet>sys.argv</snippet></ROW><ROW><id>21009362</id><snippet>node parse.js | python runfile.py</snippet></ROW><ROW><id>21009362</id><snippet>import sys
print sys.stdin
</snippet></ROW><ROW><id>21009591</id><snippet>file = [file for file in zipfilelist.namelist() if file.split('/')[-1] == target]
if file:
    return file
</snippet></ROW><ROW><id>21009591</id><snippet>file = [file for file in zipfilelist.namelist() if file.split('/')[-1] == target]
if file:
    tmp = archive.read(file[0])
    with NamedTemporaryFile(delete=False) as f:
        f.write(tmp)
        return f.name
</snippet></ROW><ROW><id>21009591</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>21009591</id><snippet>main()</snippet></ROW><ROW><id>21009591</id><snippet>os.remove(file)</snippet></ROW><ROW><id>21009774</id><snippet>In [1]: float_formatter = lambda x: "%.2f" %x
</snippet></ROW><ROW><id>21009774</id><snippet>f</snippet></ROW><ROW><id>21009774</id><snippet>.2</snippet></ROW><ROW><id>21009774</id><snippet>In [2]: float_formatter(1.234567E3)
Out[2]: '1234.57'
</snippet></ROW><ROW><id>21009774</id><snippet>formatter=</snippet></ROW><ROW><id>21009774</id><snippet>np.set_printoptions</snippet></ROW><ROW><id>21009774</id><snippet>In [3]: np.set_printoptions(formatter={'float_kind':float_formatter})
</snippet></ROW><ROW><id>21009774</id><snippet>In [4]: np.random.randn(5)*10
Out[4]: array([5.25, 3.91, 0.04, -1.53, 6.68]
</snippet></ROW><ROW><id>21009774</id><snippet>In [5]: np.pi
Out[5]: 3.141592653589793
</snippet></ROW><ROW><id>21009774</id><snippet>In [6]: a = np.array([1E-9])

In [7]: a
Out[7]: array([0.00])

In [8]: a == 0
Out[8]: array([False], dtype=bool)
</snippet></ROW><ROW><id>21009774</id><snippet>a</snippet></ROW><ROW><id>21009774</id><snippet>0</snippet></ROW><ROW><id>21009774</id><snippet>1E-9</snippet></ROW><ROW><id>21009774</id><snippet>np.round</snippet></ROW><ROW><id>21009995</id><snippet>arch</snippet></ROW><ROW><id>21009995</id><snippet>arch -32 python
</snippet></ROW><ROW><id>21009995</id><snippet>$ arch -32 python
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.maxsize.bit_length()
63
</snippet></ROW><ROW><id>21009995</id><snippet>$ arch -32 /System/Library/Frameworks/Python.framework/Versions/2.7/bin/python
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.maxsize.bit_length()
31
</snippet></ROW><ROW><id>21009995</id><snippet>/System</snippet></ROW><ROW><id>21009995</id><snippet>brew install ddl sdl_image sdl_mixer sdl_ttf portmidi</snippet></ROW><ROW><id>21009995</id><snippet>sudo pip install pygame</snippet></ROW><ROW><id>21010140</id><snippet>graphics</snippet></ROW><ROW><id>21010140</id><snippet>Tkinter</snippet></ROW><ROW><id>21010140</id><snippet>graphics</snippet></ROW><ROW><id>21010140</id><snippet>graphics</snippet></ROW><ROW><id>21010140</id><snippet>Tkinter</snippet></ROW><ROW><id>21010140</id><snippet>mainloop</snippet></ROW><ROW><id>21010140</id><snippet>Tkinter</snippet></ROW><ROW><id>21010140</id><snippet>mainloop</snippet></ROW><ROW><id>21010140</id><snippet>mainloop</snippet></ROW><ROW><id>21010140</id><snippet>graphics</snippet></ROW><ROW><id>21010140</id><snippet>Tkinter</snippet></ROW><ROW><id>21010140</id><snippet>graphics</snippet></ROW><ROW><id>21010140</id><snippet>Tkinter</snippet></ROW><ROW><id>21010140</id><snippet>Toplevel</snippet></ROW><ROW><id>21010140</id><snippet>graphics</snippet></ROW><ROW><id>21010140</id><snippet>Tkinter</snippet></ROW><ROW><id>21010140</id><snippet>mainloop</snippet></ROW><ROW><id>21010140</id><snippet>quit</snippet></ROW><ROW><id>21010140</id><snippet>Tkinter</snippet></ROW><ROW><id>21010140</id><snippet>graphics</snippet></ROW><ROW><id>21010140</id><snippet>graphics</snippet></ROW><ROW><id>21010140</id><snippet>graphics</snippet></ROW><ROW><id>21010140</id><snippet>Tkinter</snippet></ROW><ROW><id>21010140</id><snippet>from graphics import *
import Tkinter as tk

def getString(ment,mGui):
    global win
    print(ment.get())
    mGui.destroy()
    win.close()

def inputWin():
    global hsname
    mGui = tk.Toplevel()
    ment = tk.StringVar()

    mGui.title('New Highscore!')
    tk.Entry(mGui,textvariable=ment).pack(side=tk.LEFT)
    tk.Button(mGui,text='OK',command=lambda:getString(ment,mGui),fg='red',bg='blue').pack(side=tk.RIGHT)
    win.getMouse()

def main():
    global win
    win = GraphWin("My Circle", 100, 100)
    c = Circle(Point(50,50), 10)
    c.draw(win)
    win.getMouse() # Pause to view result
    inputWin()

main()
</snippet></ROW><ROW><id>21010140</id><snippet>lambda</snippet></ROW><ROW><id>21010140</id><snippet>partial</snippet></ROW><ROW><id>21010140</id><snippet>Button</snippet></ROW><ROW><id>21010343</id><snippet>def index(request):

user = User.objects.get(username=request.user.username)

if request.method == "POST":
     #Explained later 
else:
    a = Article.objects.get(user=user).latest("id")
    a_form = ArticleForm(instance=a)
    article_id = a.id   

return render_to_response(
    "specify/index.html",
    {
        "a_form" : a_form,
        "article_id": article_id,
    }, 
    context_instance=RequestContext(request)
)
</snippet></ROW><ROW><id>21010343</id><snippet>{% if article_id %}
&lt;input type="hidden" value='{{ article_id }}' id='article_id' name='article_id'/&gt;
{% endif %}
</snippet></ROW><ROW><id>21010343</id><snippet>if request.method == "POST":            
    article_id = request.POST.get('article_id') # You are getting passed article id
    a = Article.objects.get(pk=article_id)      # You are getting instance by id
    a_form = ArticleForm(request.POST, instance=a)
    a_form.save()
</snippet></ROW><ROW><id>21010498</id><snippet>Feature</snippet></ROW><ROW><id>21010498</id><snippet>unicode</snippet></ROW><ROW><id>21010498</id><snippet>.encode</snippet></ROW><ROW><id>21010498</id><snippet>__unicode__</snippet></ROW><ROW><id>21010498</id><snippet>return unicode(self).encode('utf-8')
</snippet></ROW><ROW><id>21010498</id><snippet>self</snippet></ROW><ROW><id>21010498</id><snippet>Property</snippet></ROW><ROW><id>21010498</id><snippet>unicode(self)</snippet></ROW><ROW><id>21010498</id><snippet>Feature</snippet></ROW><ROW><id>21010498</id><snippet>class Property(...):
    # ...
    def __unicode__(self):
        return unicode(self.feature)
</snippet></ROW><ROW><id>21010683</id><snippet>split()</snippet></ROW><ROW><id>21010683</id><snippet>&gt;&gt;&gt; dnaSeq = raw_input("Enter a space-separated DNA string:").split()
Enter a space-separated DNA string:A C G T G C
&gt;&gt;&gt; dnaSeq
['A', 'C', 'G', 'T', 'G', 'C']
</snippet></ROW><ROW><id>21010683</id><snippet>&gt;&gt;&gt; dnaPair = dict(A="T", T="A", C="G", G="C")
&gt;&gt;&gt; complement = [dnaPair[base] for base in dnaSeq]
&gt;&gt;&gt; complement
['T', 'G', 'C', 'A', 'C', 'G']
</snippet></ROW><ROW><id>21011014</id><snippet>LogRecord.Stop</snippet></ROW><ROW><id>21011014</id><snippet>LogRecord &lt;--,  LogField &lt;--,  LogSample
---------    |  ---------   |  ---------
+ Name       `--+ Record    `--+ Field
+ Start         + Name         + Time Stamp
+ Stop          + Units        + Value
+ Notes         + Sample Rate  
</snippet></ROW><ROW><id>21011069</id><snippet>&gt;&gt;&gt; def f1():
    a = range(10) # or np.arange(10000)
    return a, id(a)

&gt;&gt;&gt; b, id_b = f1()
&gt;&gt;&gt; id(b) == id_b
True
</snippet></ROW><ROW><id>21011069</id><snippet>b</snippet></ROW><ROW><id>21011069</id><snippet>a</snippet></ROW><ROW><id>21011069</id><snippet>&gt;&gt;&gt; def f2():
    a = range(100)
    for i in range(10):
        tmp = a[i:i**2]
        yield tmp, id(tmp)

&gt;&gt;&gt; b = f2()
&gt;&gt;&gt; for tmp, id_tmp in b:
        print id_tmp == id(tmp)


True
True
True
True
True
True
True
True
True
True
</snippet></ROW><ROW><id>21011139</id><snippet>win32api</snippet></ROW><ROW><id>21011139</id><snippet>Python 2.7.2+ ... [MSC v.1500 32 bit (Intel)] on win32
                              ^^^^^^^^^^^^^^
</snippet></ROW><ROW><id>21011139</id><snippet>Python 2.7.2+ ... [MSC v.1500 64 bit (AMD64)] on win32
                              ^^^^^^^^^^^^^^
</snippet></ROW><ROW><id>21011212</id><snippet>across = ['72...', '143...']</snippet></ROW><ROW><id>21011212</id><snippet>across</snippet></ROW><ROW><id>21011212</id><snippet>for</snippet></ROW><ROW><id>21011212</id><snippet>for a in across:
    print(a)
</snippet></ROW><ROW><id>21011212</id><snippet>print</snippet></ROW><ROW><id>21011212</id><snippet>for</snippet></ROW><ROW><id>21011212</id><snippet>print a</snippet></ROW><ROW><id>21011212</id><snippet>print(a)</snippet></ROW><ROW><id>21011364</id><snippet>String.join</snippet></ROW><ROW><id>21011364</id><snippet>&gt;&gt;&gt; x = range(5)
&gt;&gt;&gt; x
[0, 1, 2, 3, 4]
&gt;&gt;&gt; x = [str(c) for c in x]
&gt;&gt;&gt; x
['0', '1', '2', '3', '4']
&gt;&gt;&gt; "-".join(x)
'0-1-2-3-4'
</snippet></ROW><ROW><id>21011364</id><snippet>-</snippet></ROW><ROW><id>21011364</id><snippet>'http://ws.spotify.com/search/1/track?q='.join(split_message[:3])
</snippet></ROW><ROW><id>21011364</id><snippet>'http://ws.spotify.com/search/1/track?q='</snippet></ROW><ROW><id>21011364</id><snippet>split_message[:3]</snippet></ROW><ROW><id>21011364</id><snippet>&gt;&gt;&gt; message = "if i can\'t let it go out of my mind"
&gt;&gt;&gt; split_message = message.split()
&gt;&gt;&gt; split_message
['if', 'i', "can't", 'let', 'it', 'go', 'out', 'of', 'my', 'mind']
&gt;&gt;&gt; split_message[:3]
['if', 'i', "can't"]
</snippet></ROW><ROW><id>21011364</id><snippet> ifhttp://ws.spotify.com/search/1/track?q=ihttp://ws.spotify.com/search/1/track?q=can't
</snippet></ROW><ROW><id>21011364</id><snippet> if
   http://ws.spotify.com/search/1/track?q=
 i
   http://ws.spotify.com/search/1/track?q=
 can't'
</snippet></ROW><ROW><id>21011364</id><snippet>request = 'http://ws.spotify.com/search/1/track?q='+"%20".join(split_message[:3])
</snippet></ROW><ROW><id>21011364</id><snippet>join</snippet></ROW><ROW><id>21011364</id><snippet>%20</snippet></ROW><ROW><id>21011364</id><snippet>"%20".join(split_message[:3])</snippet></ROW><ROW><id>21011364</id><snippet>"http://ws.spotify.com/search/1/track?q=if%20i%20can't"
</snippet></ROW><ROW><id>21011440</id><snippet>def height(bst):
    if isempty(bst):
        return 0
    else:
        return 1 + max(height(bst.left), height(bst.right))
</snippet></ROW><ROW><id>21011445</id><snippet>In [10]: a=np.zeros(shape=(1000,3))

In [12]: a[:,0]=1

In [13]: a[:,1]=2

In [14]: a[:,2]=3

In [17]: %timeit map(np.random.shuffle, a)
100 loops, best of 3: 4.65 ms per loop

In [21]: all_perm=np.array((list(itertools.permutations([0,1,2]))))

In [22]: b=all_perm[np.random.randint(0,6,size=1000)]

In [25]: %timeit (a.flatten()[(b+3*np.arange(1000)[...,np.newaxis]).flatten()]).reshape(a.shape)
1000 loops, best of 3: 393 us per loop
</snippet></ROW><ROW><id>21011445</id><snippet>#adjust a accordingly
In [32]: b=all_perm[np.random.randint(0,6,size=1000000)]

In [33]: %timeit (a.flatten()[(b+3*np.arange(1000000)[...,np.newaxis]).flatten()]).reshape(a.shape)
1 loops, best of 3: 348 ms per loop

In [34]: %timeit map(np.random.shuffle, a)
1 loops, best of 3: 4.64 s per loop
</snippet></ROW><ROW><id>21011537</id><snippet>NUM_CPUS = None # defaults to all available cores

def PSC(fnom):
    return fnom, len(fnom)

if __name__ == "__main__":
    import multiprocessing as mp
    pool = mp.Pool(NUM_CPUS)
    list_of_strings = list("abcdefghijklm")
    cond = {}
    for fnom, result in pool.imap_unordered(PSC, list_of_strings):
        cond[fnom] = result
    pool.close()
    pool.join()
    print cond
</snippet></ROW><ROW><id>21011537</id><snippet>imap_unordered()</snippet></ROW><ROW><id>21011537</id><snippet>imap()</snippet></ROW><ROW><id>21011537</id><snippet>map()</snippet></ROW><ROW><id>21011537</id><snippet>imap_unordered()</snippet></ROW><ROW><id>21011704</id><snippet>import itertools as it
import numpy as np
from operator import itemgetter
import csv

a = np.array([(2,"Ana",9),(5,"Maria",4),(6,"Joao",3), (1,"Ana",4)])
name = itemgetter(1)
a = sorted(a, key = name)
for k, g in it.groupby(a, name):
    filename = k + '.csv' 
    with open(filename, 'wb') as f:
        writer = csv.writer(f)
        writer.writerows(list(g))
</snippet></ROW><ROW><id>21011707</id><snippet>from itertools import chain
set(chain.from_iterable(df1['col1']))
</snippet></ROW><ROW><id>21011845</id><snippet>regex</snippet></ROW><ROW><id>21011845</id><snippet>&gt;&gt;&gt; import regex
&gt;&gt;&gt; text = 'ذوب 6 خوی 7 بزاق ،آب‌دهان ، یم 10 زهاب، 11 آبرو، حیثیت، شرف'
&gt;&gt;&gt; regex.findall(r'\p{L}+', text.replace('\u200c', ''))
['ذوب', 'خوی', 'بزاق', 'آبدهان', 'یم', 'زهاب', 'آبرو', 'حیثیت', 'شرف']
</snippet></ROW><ROW><id>21011845</id><snippet>str.replace</snippet></ROW><ROW><id>21011845</id><snippet>\p{L}</snippet></ROW><ROW><id>21011845</id><snippet>\p{Letter}</snippet></ROW><ROW><id>21011845</id><snippet>[\p{Cf}\p{L}]+</snippet></ROW><ROW><id>21011845</id><snippet>\p{Cf}</snippet></ROW><ROW><id>21011845</id><snippet>\p{Format}</snippet></ROW><ROW><id>21011845</id><snippet>&gt;&gt;&gt; regex.findall(r'[\p{Cf}\p{L}]+', text)
['ذوب', 'خوی', 'بزاق', 'آب\u200cدهان', 'یم', 'زهاب', 'آبرو', 'حیثیت', 'شرف']
</snippet></ROW><ROW><id>21011845</id><snippet>&gt;&gt;&gt; got = regex.findall(r'[\p{Cf}\p{L}]+', text)
&gt;&gt;&gt; want = [ 'ذوب','خوی','بزاق','آب‌دهان','یم','زهاب','آبرو','حیثیت' ,'شرف']
&gt;&gt;&gt; print(want)
['ذوب', 'خوی', 'بزاق', 'آب\u200cدهان', 'یم', 'زهاب', 'آبرو', 'حیثیت', 'شرف']
&gt;&gt;&gt; got == want
&gt;&gt;&gt; got[:3]
['ذوب', 'خوی', 'بزاق']
&gt;&gt;&gt; got[4:]
['یم', 'زهاب', 'آبرو', 'حیثیت', 'شرف']
</snippet></ROW><ROW><id>21011845</id><snippet>&gt;&gt;&gt; ' ' in 'منهدم کردن'
True
</snippet></ROW><ROW><id>21011845</id><snippet>\s</snippet></ROW><ROW><id>21011845</id><snippet>&gt;&gt;&gt; text = 'منهدم کردن : 1 خراب کردن، ویران کردن، تخریب کردن 2 نابود کردن، از بین بردن'
&gt;&gt;&gt; want = ['منهدم کردن','خراب کردن', 'ویران کردن', 'تخریب کردن','نابود کردن', 'از بین بردن']
&gt;&gt;&gt; [x for x  in map(str.strip, regex.findall(r'[\p{Cf}\p{L}\s]+', text)) if x] == want
True
</snippet></ROW><ROW><id>21012307</id><snippet>with open(dest, "a") as file:
    for tweet in iterator_that_returns_tweets:
        file.write(json.dumps(tweet) + "\n")
</snippet></ROW><ROW><id>21012725</id><snippet>[DynamoDB]
region = us-west-2
validate_checksums = True
</snippet></ROW><ROW><id>21012958</id><snippet>  from distutils.core import setup
  import py2exe

  from distutils.filelist import findall
  import matplotlib

  setup(
        console=['PlotMemInfo.py'],

        options={
                 'py2exe': {
                            'packages' : ['matplotlib'],
            'dll_excludes': ['libgdk-win32-2.0-0.dll',
                            'libgobject-2.0-0.dll',
                            'libgdk_pixbuf-2.0-0.dll']
                           }
              },
        data_files = matplotlib.get_py2exe_datafiles()
      )
</snippet></ROW><ROW><id>21013023</id><snippet>-q</snippet></ROW><ROW><id>21013023</id><snippet>python setup.py -q test
</snippet></ROW><ROW><id>21013023</id><snippet>test</snippet></ROW><ROW><id>21013513</id><snippet>query_objectid_as_string</snippet></ROW><ROW><id>21013513</id><snippet>True</snippet></ROW><ROW><id>21013668</id><snippet>print(Base)</snippet></ROW><ROW><id>21013668</id><snippet>Base</snippet></ROW><ROW><id>21013668</id><snippet>ChildA()</snippet></ROW><ROW><id>21013668</id><snippet>class ChildA(Base)</snippet></ROW><ROW><id>21013668</id><snippet>Base</snippet></ROW><ROW><id>21013668</id><snippet>Base</snippet></ROW><ROW><id>21013944</id><snippet>flatpages</snippet></ROW><ROW><id>21013944</id><snippet>flatpages</snippet></ROW><ROW><id>21013944</id><snippet>sites framework</snippet></ROW><ROW><id>21014261</id><snippet>try:
    if x["status"] == "Error":
        print "Fine"
except TypeError:
    if x == 1:
        print "Good"
</snippet></ROW><ROW><id>21014261</id><snippet>x</snippet></ROW><ROW><id>21014261</id><snippet>int</snippet></ROW><ROW><id>21014261</id><snippet>dict</snippet></ROW><ROW><id>21014261</id><snippet>if isinstance(x, dict) and x["status"] == "Error":
    print "Fine"
elif isinstance(x, int) and x == 1:
    print "Good"
</snippet></ROW><ROW><id>21014261</id><snippet>x</snippet></ROW><ROW><id>21014261</id><snippet>float</snippet></ROW><ROW><id>21014261</id><snippet>x = 1.0</snippet></ROW><ROW><id>21014580</id><snippet>&amp;</snippet></ROW><ROW><id>21014580</id><snippet>&gt;&gt;&gt; 0x12345678 &amp; 0xffff
22136
&gt;&gt;&gt; hex(_)
'0x5678'
</snippet></ROW><ROW><id>21014587</id><snippet>import numpy
import scipy.optimize as scimin
import matplotlib.pyplot as mpl

datax=numpy.array([1,2,3,4,5]) # data coordinates
datay=numpy.array([2.95,6.03,11.2,17.7,26.8])
constraintmaxx=numpy.array([0]) # list of maximum constraints
constraintmaxy=numpy.array([1.2])

# least square fit without constraints
def fitfunc(x,p): # model $f(x)=a x^2+c
    a,c=p
    return c+a*x**2
def residuals(p): # array of residuals
    return datay-fitfunc(datax,p)
p0=[1,2] # initial parameters guess
pwithout,cov,infodict,mesg,ier=scimin.leastsq(residuals, p0,full_output=True) #traditionnal least squares fit

# least square fir with constraints
def sum_residuals(p): # the function we want to minimize
    return sum(residuals(p)**2)
def constraints(p): # the constraints: all the values of the returned array will be &gt;=0 at the end
    return constraintmaxy-fitfunc(constraintmaxx,p)
pwith=scimin.fmin_slsqp(sum_residuals,pwithout,f_ieqcons=constraints) # minimization with constraint

# plotting
ax=mpl.figure().add_subplot(1,1,1)
ax.plot(datax,datay,ls="",marker="x",color="blue",mew=2.0,label="Datas")
ax.plot(constraintmaxx,constraintmaxy,ls="",marker="x",color="red",mew=2.0,label="Max points")
morex=numpy.linspace(0,6,100)
ax.plot(morex,fitfunc(morex,pwithout),color="blue",label="Fit without constraints")
ax.plot(morex,fitfunc(morex,pwith),color="red",label="Fit with constraints")
ax.legend(loc=2)
mpl.show()
</snippet></ROW><ROW><id>21014703</id><snippet>py.convert_unittest</snippet></ROW><ROW><id>21014703</id><snippet>self.assert*</snippet></ROW><ROW><id>21014863</id><snippet>&gt;&gt;&gt; def foo(indict: dict(apple=None, pear=None)):
...     print(indict)
... 
&gt;&gt;&gt; foo(dict())
{}
</snippet></ROW><ROW><id>21014863</id><snippet>Ellipsis</snippet></ROW><ROW><id>21014863</id><snippet>&gt;&gt;&gt; def foo(indict: dict(apple=None, pear=None, extra_items=...)) -&gt; int:
...     if any(x not in indict for x in ('apple', 'pear')):
...         raise ValueError('message here...')
...     print(indict)
...     return 3
... 
&gt;&gt;&gt; foo({})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in foo
ValueError: message here...
&gt;&gt;&gt; foo({'apple':6, 'pear':4})
{'pear': 4, 'apple': 6}
3
&gt;&gt;&gt; foo({'apple':6, 'pear':4, 'carrot':30000})
{'carrot': 30000, 'pear': 4, 'apple': 6}
3
</snippet></ROW><ROW><id>21014863</id><snippet>keys = foo.__annotations__['indict'].keys() - {'extra_items'}</snippet></ROW><ROW><id>21015487</id><snippet>Server</snippet></ROW><ROW><id>21015487</id><snippet>__gatattr__</snippet></ROW><ROW><id>21015487</id><snippet>id</snippet></ROW><ROW><id>21015487</id><snippet>self._apiresource</snippet></ROW><ROW><id>21015487</id><snippet>instance.id</snippet></ROW><ROW><id>21015487</id><snippet>instance._apiresource.id</snippet></ROW><ROW><id>21015612</id><snippet>7 - code[i]</snippet></ROW><ROW><id>21015612</id><snippet>code</snippet></ROW><ROW><id>21015612</id><snippet>[1, 3, 5, 7, 0, 2, 4, 6]</snippet></ROW><ROW><id>21015612</id><snippet>[4, 0, 5, 1, 6, 2, 7, 3]</snippet></ROW><ROW><id>21015612</id><snippet>4</snippet></ROW><ROW><id>21015612</id><snippet>0</snippet></ROW><ROW><id>21015612</id><snippet>code[4] == 0</snippet></ROW><ROW><id>21015612</id><snippet>code[0] == 1</snippet></ROW><ROW><id>21015612</id><snippet>code[5] == 2</snippet></ROW><ROW><id>21015612</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt;
&gt;&gt;&gt; def encrypt(code, data):
...     return algorithm(code, data)
...
&gt;&gt;&gt; def decrypt(code, data):
...     code = {x:i for i, x in enumerate(code)} # &lt;----
...     return algorithm(code, data)
...
&gt;&gt;&gt; def algorithm(code, data):
...     chars = struct.unpack('c' * len(data), data)
...     args = ['c' * len(data)]
...     for c in chars:
...         dec = ord(c)
...         ndec = 0
...         for i in xrange(8):
...             bit = dec &gt;&gt; i &amp; 1
...             ndec = ndec | bit &lt;&lt; code[i]
...         args.append(chr(ndec))
...     return struct.pack(*args)
...
&gt;&gt;&gt; code = [1, 3, 5, 7, 0, 2, 4, 6]
&gt;&gt;&gt; encrypt(code, 'abc')
'\x16\x1c\x1e'
&gt;&gt;&gt; decrypt(code, _)
'abc'
</snippet></ROW><ROW><id>21015708</id><snippet>numpy.array</snippet></ROW><ROW><id>21015708</id><snippet>shape</snippet></ROW><ROW><id>21015708</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; X = np.array([
...     [[-9.035250067710876], [7.453250169754028], [33.34074878692627]],
...     [[-6.63700008392334], [5.132999956607819], [31.66075038909912]],
...     [[-5.1272499561309814], [8.251499891281128], [30.925999641418457]]
... ])
&gt;&gt;&gt; X.shape
(3L, 3L, 1L)
</snippet></ROW><ROW><id>21015708</id><snippet>X.shape</snippet></ROW><ROW><id>21015708</id><snippet>[n, T] = X.shape</snippet></ROW><ROW><id>21015708</id><snippet>ValueError</snippet></ROW><ROW><id>21015867</id><snippet>interpy</snippet></ROW><ROW><id>21015867</id><snippet># coding: your_codec_name</snippet></ROW><ROW><id>21015867</id><snippet># coding: utf-8</snippet></ROW><ROW><id>21015867</id><snippet># coding: codec_name</snippet></ROW><ROW><id>21015867</id><snippet>interpy</snippet></ROW><ROW><id>21016007</id><snippet>os.path.join</snippet></ROW><ROW><id>21016007</id><snippet>*</snippet></ROW><ROW><id>21016007</id><snippet>&gt;&gt;&gt; directorylist = ['path', 'to', 'directory', 'file.txt']
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.join(*directorylist)
'path/to/directory/file.txt'
&gt;&gt;&gt; os.path.sep + os.path.join(*directorylist)
'/path/to/directory/file.txt'
</snippet></ROW><ROW><id>21016055</id><snippet>templates</snippet></ROW><ROW><id>21016055</id><snippet>SETTINGS_PATH = os.path.normpath(os.path.dirname(__file__))

PROJECT_ROOT = os.path.normpath(os.path.dirname(SETTINGS_PATH))
TEMPLATE_DIRS = (
    os.path.join(PROJECT_ROOT, 'templates'),
)
</snippet></ROW><ROW><id>21016203</id><snippet>import requests

url = 'http://my-public-bucket.s3.amazonaws.com/'
files = {
    'key': ('', 'test/test.jpg'),
    'file': open('test.jpg', 'rb'),
}

r = requests.post(url, files=files)
</snippet></ROW><ROW><id>21016406</id><snippet>queryset = Woman.objects.filter(man=None)</snippet></ROW><ROW><id>21016406</id><snippet>Man</snippet></ROW><ROW><id>21016406</id><snippet>Woman</snippet></ROW><ROW><id>21016406</id><snippet>Person</snippet></ROW><ROW><id>21016406</id><snippet>gender</snippet></ROW><ROW><id>21016406</id><snippet>class Woman(models.Model):
    age = models.IntegerField()
    ...

class Man(models.Model):
    age = models.IntegerField()
    woman = models.OneToOneField(Woman)
    ...
</snippet></ROW><ROW><id>21016517</id><snippet>row</snippet></ROW><ROW><id>21016517</id><snippet>cell</snippet></ROW><ROW><id>21016517</id><snippet>cell = sheet.cell(row,4)
while cell.ctype != 6:
    row = row + 1
    if row &gt;= sheet.nrows:
        break
    cell = sheet.cell(row,4)   # &lt;-- actually move the "pointer" in the excel sheet
</snippet></ROW><ROW><id>21016564</id><snippet>MT = client.factory.create('MoneyTransfer')
MT.transferDate = '01/01/01'
MT.debitAccount = '01234567'
MT.creditAccount = '87654321'
MT.transferAmount = 1000000.00

TB = client.factory.create('TransferBalance')
TB.transDetails = MT
</snippet></ROW><ROW><id>21016757</id><snippet>traditional: true</snippet></ROW><ROW><id>21016757</id><snippet>ajax</snippet></ROW><ROW><id>21017211</id><snippet>&lt;tr&gt;
 &lt;th colspan="2" rowspan="2"&gt;Date &amp; time&lt;/th&gt;
 &lt;th rowspan="2"&gt;Temp&lt;/th&gt;
 &lt;th rowspan="2"&gt;Feels like&lt;/th&gt;
 &lt;th rowspan="2"&gt;Humidity&lt;/th&gt;
 &lt;th colspan="3"&gt;Wind&lt;/th&gt;
 &lt;th rowspan="2"&gt;Rain&lt;/th&gt;
 &lt;th rowspan="2"&gt;Pressure&lt;/th&gt;
&lt;/tr&gt;
</snippet></ROW><ROW><id>21017211</id><snippet>col = row.findAll('td')
if len(col) &gt;= 2:
    time = col[0].string
    temp = col[1].string
</snippet></ROW><ROW><id>21017304</id><snippet>set</snippet></ROW><ROW><id>21017304</id><snippet>dict</snippet></ROW><ROW><id>21017304</id><snippet>set.pop</snippet></ROW><ROW><id>21017304</id><snippet>int</snippet></ROW><ROW><id>21017304</id><snippet>set</snippet></ROW><ROW><id>21017304</id><snippet>randrange(10**10)</snippet></ROW><ROW><id>21017304</id><snippet>randrange(500)</snippet></ROW><ROW><id>21017332</id><snippet>items = ndb.KeyProperty(kind=Item, repeated=True)
</snippet></ROW><ROW><id>21017332</id><snippet>user_items = ndb.get_multi(my_user.items)
relevant_items = [item for item in user_items if item.type == my_type]
</snippet></ROW><ROW><id>21017465</id><snippet>In [87]: data
Out[87]: Ethernet(src='\x00\x1a\xa0kUf', dst='\x00\x13I\xae\x84,', data=IP(src='\xc0\xa8\n\n', off=16384, dst='C\x17\x030', sum=25129, len=52, p=6, id=51105, data=TCP(seq=9632694, off_x2=128, ack=3382015884L, win=54, sum=65372, flags=17, dport=80, sport=56145)))
</snippet></ROW><ROW><id>21017465</id><snippet>In [88]: data.src
Out[88]: '\x00\x1a\xa0kUf'
</snippet></ROW><ROW><id>21017465</id><snippet>In [89]: data.data
Out[89]: IP(src='\xc0\xa8\n\n', off=16384, dst='C\x17\x030', sum=25129, len=52, p=6, id=51105, data=TCP(seq=9632694, off_x2=128, ack=3382015884L, win=54, sum=65372, flags=17, dport=80, sport=56145))
</snippet></ROW><ROW><id>21017465</id><snippet>In [90]: data.data.src
Out[90]: '\xc0\xa8\n\n'
</snippet></ROW><ROW><id>21017465</id><snippet>In [91]: data.data.data
Out[91]: TCP(seq=9632694, off_x2=128, ack=3382015884L, win=54, sum=65372, flags=17, dport=80, sport=56145)
</snippet></ROW><ROW><id>21017465</id><snippet>f = open('test.pcap') pcap = dpkt.pcap.Reader(f)
for ts, buf in pcap:
  eth = dpkt.ethernet.Ethernet(buf)
  print eth
  eth.data          # To get IP pkt
  eth.data.data     # To get TCP pkt
</snippet></ROW><ROW><id>21017621</id><snippet>import numpy as np
a = np.array([[ 0,  1,  2,  0,  4,  5,  6,  7,  8,  9],
              [ 0, 11,  0, 13,  0, 15,  0, 17, 18,  0]])
print a[:,a[1]!=0]
</snippet></ROW><ROW><id>21017834</id><snippet>bytes</snippet></ROW><ROW><id>21017834</id><snippet>&gt;&gt;&gt; bytes([3])
b'\x03'
</snippet></ROW><ROW><id>21017834</id><snippet>bytes</snippet></ROW><ROW><id>21017834</id><snippet> &gt;&gt;&gt; help(bytes)
 ...
 bytes(int) -&gt; bytes object of size given by the parameter initialized with null bytes
</snippet></ROW><ROW><id>21018397</id><snippet>wx.App.__init__</snippet></ROW><ROW><id>21018397</id><snippet>OnInit</snippet></ROW><ROW><id>21018397</id><snippet>OnInit</snippet></ROW><ROW><id>21018397</id><snippet>wx.App</snippet></ROW><ROW><id>21018512</id><snippet>r'''\copy (select sr, id, rc AS jql from sr UNION select 'quickfilter', "ID", "QUERY" from "AO_60DB71_QUICKFILTER") TO xxx.csv'''
</snippet></ROW><ROW><id>21018665</id><snippet>gunicorn</snippet></ROW><ROW><id>21018665</id><snippet>gunicorn</snippet></ROW><ROW><id>21018665</id><snippet>gunicorn -k gevent -b 127.0.0.1:8000 serve:app
</snippet></ROW><ROW><id>21018681</id><snippet>urllib.urlretrieve</snippet></ROW><ROW><id>21018681</id><snippet>urllib.request.urlretreive</snippet></ROW><ROW><id>21018681</id><snippet>import urllib

urllib.urlretrieve('http://example.com/file.ext', '/path/to/dir/filename.ext')
</snippet></ROW><ROW><id>21019031</id><snippet>import yaml

class ExplicitDumper(yaml.SafeDumper):
    """
    A dumper that will never emit aliases.
    """

    def ignore_aliases(self, data):
        return True
</snippet></ROW><ROW><id>21019031</id><snippet>&gt;&gt;&gt; yaml.dump([1L, 1L])
"[&amp;id001 !!python/long '1', *id001]\n"

&gt;&gt;&gt; yaml.dump([1L, 1L], Dumper=ExplicitDumper)
'[1, 1]\n'
</snippet></ROW><ROW><id>21019031</id><snippet>yaml.dump(...)</snippet></ROW><ROW><id>21019095</id><snippet>schemes = ('git', 'git+http', 'git+https', 'git+ssh', 'git+git', 'git+file')
</snippet></ROW><ROW><id>21019095</id><snippet>try:
    req = get_src_requirement(dist, location, find_tags)
except InstallationError:
    logger.warn("Error when trying to get requirement for VCS system %s, falling back to uneditable format" % ex)
</snippet></ROW><ROW><id>21019135</id><snippet>&gt;&gt;&gt; x=[i.strip().split(',') for i in open("filename", 'r')]
</snippet></ROW><ROW><id>21019135</id><snippet>&gt;&gt;&gt; x
[['b', '30.83', '0', 'u', 'g', 'w', 'v', '1.25', 't', 't', '01', 'f', 'g', '00202', '0', '+'], ['a', '58.67', '4.46', 'u', 'g', 'q', 'h', '3.04', 't', 't', '06', 'f', 'g', '00043', '560', '+'], ['a', '24.50', '0.5', 'u', 'g', 'q', 'h', '1.5', 't', 'f', '0', 'f', 'g', '00280', '824', '+'], ['b', '27.83', '1.54', 'u', 'g', 'w', 'v', '3.75', 't', 't', '05', 't', 'g', '00100', '3', '+'], ['b', '20.17', '5.625', 'u', 'g', 'w', 'v', '1.71', 't', 'f', '0', 'f', 's', '00120', '0', '+'], ['b', '32.08', '4', 'u', 'g', 'm', 'v', '2.5', 't', 'f', '0', 't', 'g', '00360', '0', '+']]
&gt;&gt;&gt; x[0][0]
'b'
&gt;&gt;&gt; x[4][2]
'5.625'
</snippet></ROW><ROW><id>21019313</id><snippet>t.setAttribute("cluster",str(csvData[0]))
</snippet></ROW><ROW><id>21019501</id><snippet>request.FILES</snippet></ROW><ROW><id>21019501</id><snippet>name</snippet></ROW><ROW><id>21019934</id><snippet>True</snippet></ROW><ROW><id>21019934</id><snippet>==</snippet></ROW><ROW><id>21019934</id><snippet>if cond:</snippet></ROW><ROW><id>21019934</id><snippet>True</snippet></ROW><ROW><id>21019934</id><snippet>is True</snippet></ROW><ROW><id>21019934</id><snippet>True</snippet></ROW><ROW><id>21019934</id><snippet>False</snippet></ROW><ROW><id>21019934</id><snippet>is</snippet></ROW><ROW><id>21019934</id><snippet>x == True</snippet></ROW><ROW><id>21019934</id><snippet>x is True</snippet></ROW><ROW><id>21019934</id><snippet>x=69</snippet></ROW><ROW><id>21019934</id><snippet>True</snippet></ROW><ROW><id>21019934</id><snippet>x==True</snippet></ROW><ROW><id>21019934</id><snippet>1 == True</snippet></ROW><ROW><id>21019934</id><snippet>value of n:    True  1     69     False   0
-----------------------------------------------
expression     result
-----------------------------------------------
if n:          True  True  True   False   False
if n is True:  True  False False  False   False
if n==True:    True  True  False  False   False
</snippet></ROW><ROW><id>21020227</id><snippet>import re

string = ' { 0x0000000097747E80, 0x40, 1, 0x0, 1, 0x0, 1, 0x0, 0, 0x0, 1, 0, "Res[0]" }, // Res[0]'
pattern = '(\s\{\s0x[0-9A-Fa-f]*, 0x[0-9A-Fa-f]*, .*\}.*)|(.* reservations for core .*)|(.* reservedMemoryAreas.*)'

if re.match(pattern, string):
    print "Found match."
else:
    print "No match."

&gt;&gt;&gt; python test.py
&gt;&gt;&gt; Found match.
</snippet></ROW><ROW><id>21020227</id><snippet>if ... is None:</snippet></ROW><ROW><id>21020227</id><snippet>if regex(pattern, string):
</snippet></ROW><ROW><id>21020227</id><snippet>None</snippet></ROW><ROW><id>21020227</id><snippet>False</snippet></ROW><ROW><id>21020227</id><snippet>\s+</snippet></ROW><ROW><id>21020227</id><snippet>\s</snippet></ROW><ROW><id>21020335</id><snippet>requests</snippet></ROW><ROW><id>21020335</id><snippet>import requests

@app.route('/status/')
@auth.login_required
def checkNetwork():
   user = auth.get_logged_in_user()
   optiondetails = Optionplatform.select().where(Optionplatform.user==user.id)  
   xUrl = optiondetails.remoteserver #i edited the posted questions. 

   status = None
   try:
      r = requests.get(xUrl)
   except requests.exceptions.ConnectionError: 
      status = "Network Error while connecting to {}".format(xUrl)

   if r and str(r.status_code)[0] not in ('2','3'):
      status = "URL {} returned {}".format(xUrl, status_code)
   else:
      status = "Connection established to {}".format(xUrl)

   return render_template('checkNetwork.html', status=status)
</snippet></ROW><ROW><id>21020574</id><snippet>^([^|]+\|){2}[^|]+$
</snippet></ROW><ROW><id>21020589</id><snippet>10</snippet></ROW><ROW><id>21020589</id><snippet>sqrt(len(str))</snippet></ROW><ROW><id>21020630</id><snippet>if len(key_val[1]) &gt; 3:
    dictio[key_val[0]] = [str(key_val[1])]
</snippet></ROW><ROW><id>21020630</id><snippet>{'parameter': ['1107413362']} 
</snippet></ROW><ROW><id>21020630</id><snippet>list()</snippet></ROW><ROW><id>21020630</id><snippet>[]</snippet></ROW><ROW><id>21020850</id><snippet>value()</snippet></ROW><ROW><id>21020850</id><snippet>qtyToBuy</snippet></ROW><ROW><id>21020850</id><snippet>def buyDialog(self):
    global current, price, qtyToBuy
    dialog = BuyDialog()
    result = dialog.exec_()

    qtyToBuy = dialog.ui.buySpinBox.value() # add this line here

    if result:
        dialogResult = (current, price, qtyToBuy)
        print dialogResult #debug
        return dialogResult
</snippet></ROW><ROW><id>21020850</id><snippet>print</snippet></ROW><ROW><id>21021224</id><snippet>.get()</snippet></ROW><ROW><id>21021224</id><snippet>.post()</snippet></ROW><ROW><id>21021224</id><snippet>stream=True</snippet></ROW><ROW><id>21021224</id><snippet>response = requests.get(url, stream=True)
</snippet></ROW><ROW><id>21021224</id><snippet>length = int(response.headers.get('Content-Length', 0))
if length &gt; 1048576:
    print 'Response larger than 1MB, discarding
</snippet></ROW><ROW><id>21021224</id><snippet>.content</snippet></ROW><ROW><id>21021224</id><snippet>.text</snippet></ROW><ROW><id>21021224</id><snippet>.json()</snippet></ROW><ROW><id>21021250</id><snippet>style.css</snippet></ROW><ROW><id>21021250</id><snippet>h1 {
  color: red; 
  background: yellow;
}
</snippet></ROW><ROW><id>21021250</id><snippet>&lt;style&gt;&lt;/style&gt;</snippet></ROW><ROW><id>21021385</id><snippet>SRE_Match</snippet></ROW><ROW><id>21021385</id><snippet>match</snippet></ROW><ROW><id>21021385</id><snippet>findall</snippet></ROW><ROW><id>21021385</id><snippet>result = prog.findall(string)
</snippet></ROW><ROW><id>21021385</id><snippet>import re
prog = re.compile("([a-z])")
result = prog.findall("a b c")
for i in result:
    print i
</snippet></ROW><ROW><id>21021385</id><snippet>a
b
c
</snippet></ROW><ROW><id>21021569</id><snippet>yield from</snippet></ROW><ROW><id>21021569</id><snippet>yield</snippet></ROW><ROW><id>21021569</id><snippet>yield from</snippet></ROW><ROW><id>21021569</id><snippet>for value in self.handleRequest(foo):
    yield value
</snippet></ROW><ROW><id>21021569</id><snippet>yield from &lt;expression&gt;</snippet></ROW><ROW><id>21021569</id><snippet>yield &lt;expression&gt;</snippet></ROW><ROW><id>21021569</id><snippet>yield from</snippet></ROW><ROW><id>21021569</id><snippet>yield from</snippet></ROW><ROW><id>21021569</id><snippet>asyncio</snippet></ROW><ROW><id>21021569</id><snippet>yield from</snippet></ROW><ROW><id>21021569</id><snippet>@tornado.gen.coroutine</snippet></ROW><ROW><id>21021569</id><snippet>tornado.concurrent.Future</snippet></ROW><ROW><id>21021569</id><snippet>@asyncio.coroutine</snippet></ROW><ROW><id>21021569</id><snippet>Runner.run()</snippet></ROW><ROW><id>21021824</id><snippet>&gt;&gt;&gt; df.index
Int64Index([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], dtype=int64)
</snippet></ROW><ROW><id>21021824</id><snippet>concat</snippet></ROW><ROW><id>21021824</id><snippet>pd.concat([df2, df], axis=1)
</snippet></ROW><ROW><id>21021824</id><snippet>           b    a
0        NaN  152
1        NaN  176
2   176.0000  160
3   195.8400  192
4   217.8816  220
5   241.2420  272
6   272.1758  256
7   292.7523  280
8   313.2483  300
9   332.8503  280
10  341.3608  312
11  352.8076  328
12  363.6765  NaN
13  360.4414  NaN
14  379.5220  NaN
</snippet></ROW><ROW><id>21021830</id><snippet>-E</snippet></ROW><ROW><id>21021830</id><snippet>-a</snippet></ROW><ROW><id>21021830</id><snippet>html</snippet></ROW><ROW><id>21021830</id><snippet>Makefile</snippet></ROW><ROW><id>21021830</id><snippet>.rst</snippet></ROW><ROW><id>21022386</id><snippet>In [53]: x = 0

In [54]: %timeit x is 0
10000000 loops, best of 3: 38 ns per loop

In [55]: %timeit x == 0
10000000 loops, best of 3: 36.5 ns per loop

In [56]: x = 1

In [57]: %timeit x is 0
10000000 loops, best of 3: 37.3 ns per loop

In [58]: %timeit x == 0
10000000 loops, best of 3: 36.5 ns per loop

In [59]: %timeit x is None
10000000 loops, best of 3: 38.1 ns per loop

In [60]: %timeit x == None
10000000 loops, best of 3: 82.9 ns per loop
</snippet></ROW><ROW><id>21022386</id><snippet>In [62]: x = 'x'

In [63]: %timeit x is 0
10000000 loops, best of 3: 38.7 ns per loop

In [64]: %timeit x == 0
10000000 loops, best of 3: 92.5 ns per loop

In [65]: %timeit x is None
10000000 loops, best of 3: 39.1 ns per loop

In [66]: %timeit x == None
10000000 loops, best of 3: 77.1 ns per loop
</snippet></ROW><ROW><id>21022386</id><snippet>is</snippet></ROW><ROW><id>21022386</id><snippet>None</snippet></ROW><ROW><id>21022386</id><snippet>0</snippet></ROW><ROW><id>21022386</id><snippet>-1</snippet></ROW><ROW><id>21022425</id><snippet>LOGIN_REDIRECT_URL = "your_redirect_url"
</snippet></ROW><ROW><id>21022742</id><snippet>return</snippet></ROW><ROW><id>21022742</id><snippet>ss</snippet></ROW><ROW><id>21022742</id><snippet>return ss</snippet></ROW><ROW><id>21022783</id><snippet>outrow</snippet></ROW><ROW><id>21022783</id><snippet>zip()</snippet></ROW><ROW><id>21022783</id><snippet>writer.writerows(zip(*outrow))
</snippet></ROW><ROW><id>21022783</id><snippet>&gt;&gt;&gt; outrow = [[1,2,3], [4,5,6], [7,8,9]]
&gt;&gt;&gt; import csv
&gt;&gt;&gt; import sys
&gt;&gt;&gt; w = csv.writer(sys.stdout)
&gt;&gt;&gt; w.writerows(zip(*outrow))
1,4,7
2,5,8
3,6,9
</snippet></ROW><ROW><id>21022783</id><snippet>izip_longest()</snippet></ROW><ROW><id>21022783</id><snippet>itertools</snippet></ROW><ROW><id>21022783</id><snippet>zip_longest()</snippet></ROW><ROW><id>21022783</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; outrow = (['H:\\Test\\Test_Data\\New Layer.lyr'], [], ['H:\\Test\\Test_Data\\New_Shapefile.dbf', 'H:\\Test\\Test_Data\\New_Shapefile.shp'], [], [], [], [], [], [], ['H:\\Test\\Test_Data\\New_dBASE_Table.dbf'], [])
&gt;&gt;&gt; w.writerows(itertools.izip_longest(*outrow, fillvalue=""))
H:\Test\Test_Data\New Layer.lyr,,H:\Test\Test_Data\New_Shapefile.dbf,,,,,,,H:\Test\Test_Data\New_dBASE_Table.dbf,,,H:\Test\Test_Data\New_Shapefile.shp,,,,,,,,
</snippet></ROW><ROW><id>21022850</id><snippet>numpy.in1d</snippet></ROW><ROW><id>21022850</id><snippet>b = a[~np.in1d(np.arange(a.shape[0]), indices)]
</snippet></ROW><ROW><id>21022882</id><snippet>$ easy_install beautifulsoup4

$ pip install beautifulsoup4
</snippet></ROW><ROW><id>21022882</id><snippet>c:\pythonXX\python setup.py install).
</snippet></ROW><ROW><id>21023125</id><snippet>In [161]: pd.DataFrame(df.values*df2.values, columns=df.columns, index=df.index)
Out[161]: 
   col1  col2  col3
1    10   200  3000
2    10   200  3000
3    10   200  3000
4    10   200  3000
5    10   200  3000
</snippet></ROW><ROW><id>21023299</id><snippet>echo foo |
firstCommand - | somePythonRoutine - |
secondCommand - | anotherPythonRoutine - |
thirdCommand - &gt; finalOutput
</snippet></ROW><ROW><id>21023299</id><snippet>from subprocess import Popen, PIPE

first = Popen(["firstCommand", "-"], stdin=PIPE, stdout=PIPE, bufsize=1)
second = Popen(["secondCommand", "-"], stdin=PIPE, stdout=PIPE, bufsize=1)
bind(first.stdout, second.stdin, somePythonRoutine)
with open("finalOutput", "wb") as file:
    third = Popen(["thirdCommand", "-"], stdin=PIPE, stdout=file, bufsize=1)
bind(second.stdout, third.stdin, anotherPythonRoutine)

# provide input for the pipeline
first.stdin.write(b"foo")
first.stdin.close()

# wait for it to complete
pipestatus = [p.wait() for p in [first, second, third]]
</snippet></ROW><ROW><id>21023299</id><snippet>bind()</snippet></ROW><ROW><id>21023299</id><snippet>from threading import Thread

def bind(input_pipe, output_pipe, line_filter):
    def f():
        try:
            for line in iter(input_pipe.readline, b''):
                line = line_filter(line)
                if line:
                    output_pipe.write(line) # no flush unless newline present
        finally:
            try:
                output_pipe.close()
            finally:
                input_pipe.close()
    t = Thread(target=f)
    t.daemon = True # die if the program exits
    t.start()
</snippet></ROW><ROW><id>21023299</id><snippet>somePythonRoutine</snippet></ROW><ROW><id>21023299</id><snippet>anotherPythonRoutine</snippet></ROW><ROW><id>21023400</id><snippet>dada大大</snippet></ROW><ROW><id>21023400</id><snippet>\u5927</snippet></ROW><ROW><id>21023400</id><snippet>json</snippet></ROW><ROW><id>21023400</id><snippet>from urllib import urlopen
import json

text = 'dada大大'
data = json.dumps({ mode: 'markdown', 'text': text }).encode()
r = urlopen('https://api.github.com/markdown', data)

print(r.read().decode()) # &lt;p&gt;dada大大&lt;/p&gt;
</snippet></ROW><ROW><id>21023400</id><snippet>requests</snippet></ROW><ROW><id>21023400</id><snippet>h = { 'Content-Type': 'text/plain' }
r = requests.post('https://api.github.com/markdown/raw', text.encode(), headers=h)

print(r.content.decode()) # &lt;p&gt;dada大大&lt;/p&gt;
</snippet></ROW><ROW><id>21023400</id><snippet>&gt;&gt;&gt; a = 'dada大大'.encode('utf-8')
&gt;&gt;&gt; a
b'dada\xe5\xa4\xa7\xe5\xa4\xa7'
&gt;&gt;&gt; str(a)
"b'dada\\xe5\\xa4\\xa7\\xe5\\xa4\\xa7'"
&gt;&gt;&gt; str(a)[2:-1]
'dada\\xe5\\xa4\\xa7\\xe5\\xa4\\xa7'
&gt;&gt;&gt; print(_)
dada\xe5\xa4\xa7\xe5\xa4\xa7
</snippet></ROW><ROW><id>21023400</id><snippet>str(a)</snippet></ROW><ROW><id>21023400</id><snippet>repr</snippet></ROW><ROW><id>21023400</id><snippet>\\</snippet></ROW><ROW><id>21023400</id><snippet>b'</snippet></ROW><ROW><id>21023400</id><snippet>'</snippet></ROW><ROW><id>21023400</id><snippet>str()</snippet></ROW><ROW><id>21023400</id><snippet>repr()</snippet></ROW><ROW><id>21023400</id><snippet>repr</snippet></ROW><ROW><id>21023400</id><snippet>repr</snippet></ROW><ROW><id>21023400</id><snippet>&gt;&gt;&gt; s = str(a)[2:-1]
&gt;&gt;&gt; len(s)
28
&gt;&gt;&gt; list(s)
['d', 'a', 'd', 'a', '\\', 'x', 'e', '5', '\\', 'x', 'a', '4', '\\', 'x', 'a', '7', '\\', 'x', 'e', '5', '\\', 'x', 'a', '4', '\\', 'x', 'a', '7']
</snippet></ROW><ROW><id>21023400</id><snippet>list(s)</snippet></ROW><ROW><id>21023400</id><snippet>'\'</snippet></ROW><ROW><id>21023400</id><snippet>&gt;&gt;&gt; '\'
SyntaxError: EOL while scanning string literal
&gt;&gt;&gt; '\\'
'\\'
&gt;&gt;&gt; len('\\')
1
</snippet></ROW><ROW><id>21023591</id><snippet>listOfA, listOfB = [], []

for idx, x in enumerate(s):
    target = listOfA if x == 'A' else listOfB
    target.append(idx)
</snippet></ROW><ROW><id>21023591</id><snippet>list.append()</snippet></ROW><ROW><id>21023654</id><snippet>csv</snippet></ROW><ROW><id>21023654</id><snippet>import csv
with open(filename, 'w') as f:
   writer = csv.writer(f, delimiter=',')
   writer.writerows(my_list)  #considering my_list is a list of lists.
</snippet></ROW><ROW><id>21023830</id><snippet>from django.db.models import F
from datetime import datetime

min_date = datetime(2013,12,31)
result = Table.objects.filter(in_time__gte=min_date).\
exclude(in_time__eq=F('actual_time'))
</snippet></ROW><ROW><id>21023968</id><snippet>re.split(r'[`\-=~!@#$%^&amp;*()_+\[\]{};\'\\:"|&lt;,./&lt;&gt;?]', a)
</snippet></ROW><ROW><id>21024122</id><snippet>Student</snippet></ROW><ROW><id>21024122</id><snippet>Person</snippet></ROW><ROW><id>21024122</id><snippet>List&lt;Student&gt;</snippet></ROW><ROW><id>21024122</id><snippet>Lis&lt;Person&gt;</snippet></ROW><ROW><id>21024122</id><snippet>List&lt;Person&gt;</snippet></ROW><ROW><id>21024122</id><snippet>students</snippet></ROW><ROW><id>21024122</id><snippet>Student</snippet></ROW><ROW><id>21024122</id><snippet>Person</snippet></ROW><ROW><id>21024122</id><snippet>print_persons</snippet></ROW><ROW><id>21024122</id><snippet>Person</snippet></ROW><ROW><id>21024122</id><snippet>add_person</snippet></ROW><ROW><id>21024122</id><snippet>Person</snippet></ROW><ROW><id>21024122</id><snippet>print_persons(students)</snippet></ROW><ROW><id>21024122</id><snippet>add_person(students)</snippet></ROW><ROW><id>21024196</id><snippet>\&lt;digit&gt;</snippet></ROW><ROW><id>21024196</id><snippet>p.sub(r'\1\\g&lt;test_\2&gt;', text)
</snippet></ROW><ROW><id>21024196</id><snippet>\1</snippet></ROW><ROW><id>21024196</id><snippet>\2</snippet></ROW><ROW><id>21024196</id><snippet>test_</snippet></ROW><ROW><id>21024196</id><snippet>*</snippet></ROW><ROW><id>21024196</id><snippet>p = re.compile(r"(?&lt;!\\)((?:\\\\)*)\\g&lt;([a-zA-Z_][a-zA-Z\d_]*)&gt;")
</snippet></ROW><ROW><id>21024196</id><snippet>(?:...)</snippet></ROW><ROW><id>21024196</id><snippet>&gt;&gt;&gt; text = r"&lt;/\g&lt;name_1&gt;\g&lt;name_2&gt;\\\\\g&lt;not_escaped&gt;\\g&lt;escaped&gt;&gt;&gt;"
&gt;&gt;&gt; p = re.compile(r"(?&lt;!\\)((?:\\\\)*)\\g&lt;([a-zA-Z_][a-zA-Z\d_]*)&gt;")
&gt;&gt;&gt; print(p.sub(r'\1\\g&lt;test_\2&gt;', text))
&lt;/\g&lt;test_name_1&gt;\g&lt;test_name_2&gt;\\\\\g&lt;test_not_escaped&gt;\\g&lt;escaped&gt;&gt;&gt;
</snippet></ROW><ROW><id>21024277</id><snippet>OpenGLWidget</snippet></ROW><ROW><id>21024277</id><snippet>def setColor(R, G, B):
    self.R = R
    self.G = G
    self.B = B
</snippet></ROW><ROW><id>21024277</id><snippet>MainWindow</snippet></ROW><ROW><id>21024277</id><snippet>Blue()</snippet></ROW><ROW><id>21024277</id><snippet>self.OpenGLWidget.setColor(0,0,1)
self.openGLWidget.draw() # or do whatever you want, variables are changed in `OpenGLWidget`
</snippet></ROW><ROW><id>21024277</id><snippet>setColor()</snippet></ROW><ROW><id>21024277</id><snippet>0,1,0</snippet></ROW><ROW><id>21024843</id><snippet>start_new_thread</snippet></ROW><ROW><id>21024843</id><snippet>thread.start_new_thread</snippet></ROW><ROW><id>21024933</id><snippet>class MyClass(models.Model):
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=300)

    @property
    def url_slug(self):
        return '{}-{}'.format(self.slug, self.id)
</snippet></ROW><ROW><id>21025121</id><snippet>import re

class RegexDict(dict):

    def get_matching(self, event):
        return (self[key] for key in self if re.match(key, event))
</snippet></ROW><ROW><id>21025121</id><snippet>&gt;&gt;&gt; d = {'a.b': 'item1', 'b.c': 'item2'}
&gt;&gt;&gt; rd = RegexDict(d)
&gt;&gt;&gt; for o in rd.get_matching('a1b'):
    print o


item1
</snippet></ROW><ROW><id>21025121</id><snippet>    def get_all_matching(self, events):
        return (match for event in events for match in self.get_matching(event))

&gt;&gt;&gt; for o in rd.get_all_matching(['a1b', 'b2c']):
    print o


item1
item2
</snippet></ROW><ROW><id>21025122</id><snippet>newThing</snippet></ROW><ROW><id>21025122</id><snippet>myDict = {}
path = ('newEnv','newProj','newComp')
current = myDict
for key in path:
    current = current.setdefault(key, {})
</snippet></ROW><ROW><id>21025122</id><snippet>current</snippet></ROW><ROW><id>21025122</id><snippet>'n_thing'</snippet></ROW><ROW><id>21025122</id><snippet>'instances'</snippet></ROW><ROW><id>21025122</id><snippet>reduce()</snippet></ROW><ROW><id>21025122</id><snippet>myDict = {}
path = ('newEnv','newProj','newComp')
reduce(lambda d, k: d.setdefault(k, {}), path, myDict)
</snippet></ROW><ROW><id>21025122</id><snippet>reduce</snippet></ROW><ROW><id>21025122</id><snippet>myDict = {}
path = ('newEnv','newProj','newComp')
inner = reduce(lambda d, k: d.setdefault(k, {}), path, myDict)
inner.update({'n_thing': 'newThing', 'instances': []})
</snippet></ROW><ROW><id>21025140</id><snippet> for child in sorted(self.children, key = lambda x: x.name):
        child.printer(level + 1)
</snippet></ROW><ROW><id>21025280</id><snippet>[x for x in A if set(x) not in [set(y) for y in B]]
</snippet></ROW><ROW><id>21025280</id><snippet>[x for x in A if not any([set(y).issubset(set(x)) for y in B])]
</snippet></ROW><ROW><id>21025311</id><snippet>urls.py</snippet></ROW><ROW><id>21025311</id><snippet>views.py</snippet></ROW><ROW><id>21025311</id><snippet>{mysite}/index.html</snippet></ROW><ROW><id>21025311</id><snippet>href</snippet></ROW><ROW><id>21025311</id><snippet>&lt;a href="index.html"&gt;Home&lt;/a&gt;</snippet></ROW><ROW><id>21025311</id><snippet>/journal/2014/01</snippet></ROW><ROW><id>21025311</id><snippet>/journal/2014/01/index.html</snippet></ROW><ROW><id>21025311</id><snippet>urls.py</snippet></ROW><ROW><id>21025311</id><snippet>url</snippet></ROW><ROW><id>21025311</id><snippet>.</snippet></ROW><ROW><id>21025311</id><snippet>\.</snippet></ROW><ROW><id>21025311</id><snippet>index</snippet></ROW><ROW><id>21025311</id><snippet>journal</snippet></ROW><ROW><id>21025311</id><snippet>urls.py</snippet></ROW><ROW><id>21025311</id><snippet>urlpatterns = patterns(
    '',
    url(r'^(?:index\.html)?$', index, name='index'),
    url(r'^contact\.html$', contact, name='contact'),
    url(r'^about\.html$', about, name='about'),

    url(r'^journal(?:\.html$|/(\d{4})(?:/(\d{2}))?$)', journal, name='journal'),

    url(r'^auth\.html$', auth, name='auth'),
    url(r'^logout\.html$', logx, name='logout'),
    url(r'^admin/', include(admin.site.urls)),

    # develop
    url(r'^Observations/(?P&lt;path&gt;.*)$', 'django.views.static.serve',
        {'document_root': MEDIA_ROOT}),
)
</snippet></ROW><ROW><id>21025311</id><snippet>&lt;a href="{% url 'index' %}"&gt;Home&lt;/a&gt;
&lt;a href="{% url 'journal' %}&gt;Journal&lt;/a&gt;
&lt;a href="{% url 'journal' '2014' %}&gt;Journal: 2014&lt;/a&gt;
&lt;a href="{% url 'journal' '2014' '06' %}&gt;Journal: June 2014&lt;/a&gt;
</snippet></ROW><ROW><id>21025311</id><snippet>journal</snippet></ROW><ROW><id>21025311</id><snippet>url(r'^journal(?:\.html$|/(?P&lt;year&gt;\d{4})(?:/(?P&lt;month&gt;\d{2}))?$)', journal, name='journal'),
</snippet></ROW><ROW><id>21025311</id><snippet>def journal(request, year=None, month=None):
    # print args
    if request.user.is_authenticated():
        obss = Obs.objects.all()
        if year is not None:
            obss = obss.filter(date__year=year)
            if month is not None:
                obss = obss.filter(date__month=int(month))

        ar_obs = Obs.objects.all()
        archive = create_archive_data(ar_obs)
        return render_to_response('journal.html', {'obss': obss, 'user': request.user,
                                                   'archive_counts': archive})
    else:
        state = "Please log in below..."
        # return HttpResponseRedirect('auth.html', {'state': state})
        return render_to_response('auth.html', {'state': state})
</snippet></ROW><ROW><id>21025311</id><snippet>is_authenticated</snippet></ROW><ROW><id>21025311</id><snippet>login_required</snippet></ROW><ROW><id>21025386</id><snippet>for i in range(10)</snippet></ROW><ROW><id>21025386</id><snippet>    from random import*

screen = display.set_mode((1000,800))
tick = time.Clock()
col1 = (0,0,0)
canvasRect = Rect(100,100,500,500)
draw.rect(screen,(0,255,0),canvasRect,0)
running = True
while running:
    for e in event.get():
        if e.type == QUIT:
            running = False
    mx,my = mouse.get_pos()
    mb = mouse.get_pressed()

    if mb[0]:
        for i in range(10): #8 can be changed to whatever value you want 
                            #to make it faster
            p = randint(0, 30), randint(0, 30)
            draw.circle(screen, (0, 0, 0), p, 1)

    tick.tick(100)
    display.flip()
quit()
</snippet></ROW><ROW><id>21025400</id><snippet>charListstr</snippet></ROW><ROW><id>21025400</id><snippet>write</snippet></ROW><ROW><id>21025400</id><snippet>read</snippet></ROW><ROW><id>21025679</id><snippet>zip()</snippet></ROW><ROW><id>21025679</id><snippet>&gt;&gt;&gt; def gen():
...     print 'generating'
...     yield 'a'
... 
&gt;&gt;&gt; gen()
&lt;generator object gen at 0x10747f320&gt;
&gt;&gt;&gt; zip(gen(), gen())
generating
generating
[('a', 'a')]
</snippet></ROW><ROW><id>21025679</id><snippet>zip()</snippet></ROW><ROW><id>21025685</id><snippet>if tarX in ('ini', 'txt') and act == 'm':
</snippet></ROW><ROW><id>21025867</id><snippet>Z</snippet></ROW><ROW><id>21025867</id><snippet>Z</snippet></ROW><ROW><id>21026151</id><snippet>np.ix_</snippet></ROW><ROW><id>21026151</id><snippet>&gt;&gt;&gt; a = np.zeros((4,4))
&gt;&gt;&gt; b = np.arange(4).reshape(2,2)+1
&gt;&gt;&gt; ind = [0,3]
&gt;&gt;&gt; np.ix_(ind, ind)
(array([[0],
       [3]]), array([[0, 3]]))
&gt;&gt;&gt; a[np.ix_(ind, ind)] += b
&gt;&gt;&gt; a
array([[ 1.,  0.,  0.,  2.],
       [ 0.,  0.,  0.,  0.],
       [ 0.,  0.,  0.,  0.],
       [ 3.,  0.,  0.,  4.]])
</snippet></ROW><ROW><id>21026371</id><snippet>str</snippet></ROW><ROW><id>21026371</id><snippet>baseclass</snippet></ROW><ROW><id>21026371</id><snippet>b</snippet></ROW><ROW><id>21026371</id><snippet>['image', 'input', 'flash']</snippet></ROW><ROW><id>21026371</id><snippet>globals()</snippet></ROW><ROW><id>21026371</id><snippet>class Button(object):
    html = ""
    def get_html(self):
        return self.html

class Image(Button):
    html = "&lt;img&gt;&lt;/img&gt;"

class Input(Button):
    html = "&lt;input&gt;&lt;/input&gt;"

class Flash(Button):
    html = "&lt;obj&gt;&lt;/obj&gt;"

class ButtonFactory():
    def create_button(self, typ):
        targetclass = typ.capitalize()
        return globals()[targetclass]()

button_obj = ButtonFactory()
button = ['image', 'input', 'flash']
for b in button:
    print button_obj.create_button(b).get_html()
</snippet></ROW><ROW><id>21026371</id><snippet>globals()</snippet></ROW><ROW><id>21026371</id><snippet>locals()</snippet></ROW><ROW><id>21026371</id><snippet>buttun_objects = {'image':Image,'flash':Flash,'input':Input}
</snippet></ROW><ROW><id>21026371</id><snippet>create_button</snippet></ROW><ROW><id>21026371</id><snippet>def create_button(self, typ):        
    return buttun_objects[typ]()
</snippet></ROW><ROW><id>21026837</id><snippet>rolling_apply</snippet></ROW><ROW><id>21026837</id><snippet>In [9]: def gm(df,p):
   ...:     v = ((np.cumprod(df+1))-1)*p
   ...:     return v[-1]
   ...: 
</snippet></ROW><ROW><id>21026837</id><snippet>def gm(arr,p):
    df = DataFrame(arr)
    v =(((df+1).cumprod())-1)*p
    return v.iloc[-1]
</snippet></ROW><ROW><id>21026837</id><snippet>In [11]: pd.rolling_apply(tmp,50,lambda x: gm(x,5)).tail(20)
Out[11]: 
                   A         B
2006-06-04  0.004207 -0.002112
2006-06-05  0.003880 -0.001598
2006-06-06  0.003809 -0.002228
2006-06-07  0.002840 -0.003938
2006-06-08  0.002855 -0.004921
2006-06-09  0.002450 -0.004614
2006-06-10  0.001809 -0.004409
2006-06-11  0.001445 -0.005959
2006-06-12  0.001297 -0.006831
2006-06-13  0.000869 -0.007878
2006-06-14  0.000359 -0.008102
2006-06-15 -0.000885 -0.007996
2006-06-16 -0.001838 -0.008230
2006-06-17 -0.003036 -0.008658
2006-06-18 -0.002280 -0.008552
2006-06-19 -0.001398 -0.007831
2006-06-20 -0.000648 -0.007828
2006-06-21 -0.000799 -0.007616
2006-06-22 -0.001096 -0.006740
2006-06-23 -0.001160 -0.006004

[20 rows x 2 columns]
</snippet></ROW><ROW><id>21027273</id><snippet>environ</snippet></ROW><ROW><id>21027273</id><snippet>start_response</snippet></ROW><ROW><id>21027469</id><snippet>python /home/ec2-user/monitoring/job.py  &gt;&gt; /var/log/script_output.log 2&gt;&amp;1</snippet></ROW><ROW><id>21027469</id><snippet>which python</snippet></ROW><ROW><id>21027469</id><snippet>python</snippet></ROW><ROW><id>21027469</id><snippet>which python</snippet></ROW><ROW><id>21027469</id><snippet>*/5 * * * * /usr/bin/python /home/ec2-user/monitoring/job.py  &gt;&gt; /var/log/script_output.log 2&gt;&amp;1</snippet></ROW><ROW><id>21027469</id><snippet>pgrep cron</snippet></ROW><ROW><id>21027469</id><snippet>MAILTO=my@email.com

*/5 * * * * /usr/bin/python /home/ec2-user/monitoring/job.py &gt;&gt; /var/log/script_output.log 2&gt;&amp;1
</snippet></ROW><ROW><id>21027553</id><snippet>    self.set_html("&lt;h2&gt; {0} &lt;/h2&gt;").format(self.logout_link.get_html())
</snippet></ROW><ROW><id>21027553</id><snippet>    self.set_html("&lt;h2&gt; {0} &lt;/h2&gt;".format(self.logout_link.get_html()))
</snippet></ROW><ROW><id>21027594</id><snippet>xrange</snippet></ROW><ROW><id>21027594</id><snippet>&gt;&gt;&gt; x = xrange(10)
&gt;&gt;&gt; 5 in x
True
&gt;&gt;&gt; 5 in x
True
</snippet></ROW><ROW><id>21027594</id><snippet>&gt;&gt;&gt; it = iter(range(10))
&gt;&gt;&gt; 5 in it
True
&gt;&gt;&gt; 5 in it
False
</snippet></ROW><ROW><id>21027594</id><snippet>reader</snippet></ROW><ROW><id>21027594</id><snippet>&gt;&gt;&gt; it = iter(range(10))
&gt;&gt;&gt; 3 in it
True
&gt;&gt;&gt; next(it)
4
</snippet></ROW><ROW><id>21027745</id><snippet>d ={'idx1':{'tokenA': 0.1,
            'tokenB': 1.3,
            'tokenD': 2.3},
      'idx2':{'tokenC': 0.9,
            'tokenE': 3.4},
      'idxn':{'tokenA': 0.3,
            'tokenF': 0.4,
            'tokenZ': 7.4}
      }

from collections import Counter

token_sums   = sum((Counter(v       ) for k,v in d.iteritems()), Counter())
token_counts = sum((Counter(v.keys()) for k,v in d.iteritems()), Counter())
token_mean   = {k:token_sums[k]/token_counts[k] for k in token_sums}
print token_mean
</snippet></ROW><ROW><id>21027826</id><snippet>print(root.encode("cp437", "backslashreplace").decode("cp437"))
</snippet></ROW><ROW><id>21027826</id><snippet>\unnnn</snippet></ROW><ROW><id>21027826</id><snippet>\xnn</snippet></ROW><ROW><id>21027911</id><snippet>DataFrame.isin()</snippet></ROW><ROW><id>21027911</id><snippet>In [12]: df
Out[12]: 
    pageid1  pageid2  pageid3
id                           
10      123      456      789
11      478      166      356
12      984      456      789
13      166      356      123

[4 rows x 3 columns]

In [13]: pages
Out[13]: [123, 456, 789]

In [14]: df.isin(pages)
Out[14]: 
   pageid1 pageid2 pageid3
id                        
10    True    True    True
11   False   False   False
12   False    True    True
13   False   False    True

[4 rows x 3 columns]
</snippet></ROW><ROW><id>21027911</id><snippet>dict</snippet></ROW><ROW><id>21027911</id><snippet>.values()</snippet></ROW><ROW><id>21028111</id><snippet>$PATH</snippet></ROW><ROW><id>21028111</id><snippet>/f/ppython275/App/Scripts</snippet></ROW><ROW><id>21028111</id><snippet>~/.bashrc</snippet></ROW><ROW><id>21028111</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>21028111</id><snippet>export PATH=$PATH:/f/ppython275/App/Scripts
</snippet></ROW><ROW><id>21028357</id><snippet>def main():
    Graph = GraphBuilder(name)
    dfs = GraphDFS(Graph)
    dfs.dfs()
</snippet></ROW><ROW><id>21028357</id><snippet>GraphBuilder</snippet></ROW><ROW><id>21028357</id><snippet>GraphDFS</snippet></ROW><ROW><id>21028357</id><snippet>self.Graph</snippet></ROW><ROW><id>21028357</id><snippet>GraphBuilder</snippet></ROW><ROW><id>21028357</id><snippet>getNodesCount</snippet></ROW><ROW><id>21028357</id><snippet>from Graph import Graph
from UpdateGraph import UpdateGraph
class GraphDFS:
    def __init__(self,graph):
        self.Graph = graph
        self.dfsRes = {}

    def dfs(self):
         #some code
         print("--&gt;"+self.Graph.getNodesCount())

#some code

class GraphBuilder:
    def __init__(self, name):
        self.name = name

    def Build(self):
        self.Graph = UpdateGraph(self.name)

def main():
    name = "" # define the name variable
    Graph = GraphBuilder(name)
    Graph.Build()
    dfs = GraphDFS(Graph.Graph)
    dfs.dfs()

main()
</snippet></ROW><ROW><id>21028357</id><snippet>GrapthBuilder</snippet></ROW><ROW><id>21028435</id><snippet>\t</snippet></ROW><ROW><id>21028435</id><snippet>\n</snippet></ROW><ROW><id>21028794</id><snippet>class MyClass:
    pass

MyClass=MyClass()
</snippet></ROW><ROW><id>21028794</id><snippet>MyClass</snippet></ROW><ROW><id>21028794</id><snippet>MyClass</snippet></ROW><ROW><id>21028794</id><snippet>MyClass</snippet></ROW><ROW><id>21028794</id><snippet>MyClass</snippet></ROW><ROW><id>21028794</id><snippet>MyClass</snippet></ROW><ROW><id>21028794</id><snippet>&gt;&gt;&gt; class MyClass:
...     pass
...
&gt;&gt;&gt; MyClass=MyClass()
&gt;&gt;&gt; new_class=MyClass()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'MyClass' object is not callable
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21028852</id><snippet>class MyFile():
    def __enter__(self):
        return self

    def __init__(self, path):
        ''' store the path, but don't actually open the file '''
        self.path = path
        self.file_object = None

    def write(self, s):
        ''' you open the file here, just before writing '''
        if not self.file_object:
            self.file_object = open(self.path, 'w')
        self.file_object.write(self, s)

    def close(self):
        ''' close the file '''
        if self.file_object:
            self.file_object.close()

    def __exit__(self, exc_type, exc_value, exc_traceback):
        self.close()
</snippet></ROW><ROW><id>21028852</id><snippet>with</snippet></ROW><ROW><id>21028852</id><snippet>with MyFile(logfile) as log:
</snippet></ROW><ROW><id>21028960</id><snippet>In [4]:

data = pd.Series(['a', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'])

pd.set_option('display.max_colwidth',1000)

data

Out[4]:

0                                                                         a
1    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
2         aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
3                                                          aaaaaaaaaaaaaaaa
4        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
dtype: object
</snippet></ROW><ROW><id>21028960</id><snippet>pd.set_printoptions(max_colwidth, 1000)
</snippet></ROW><ROW><id>21028980</id><snippet>\0</snippet></ROW><ROW><id>21028980</id><snippet>\x00</snippet></ROW><ROW><id>21028980</id><snippet>re</snippet></ROW><ROW><id>21028980</id><snippet>(.+) \1</snippet></ROW><ROW><id>21029116</id><snippet>exec</snippet></ROW><ROW><id>21029116</id><snippet>In [20]: funcs = { 'foo' : lambda df: Series(10,index=df.index), 'bar' : lambda df: df['foo']+1 }

In [24]: df = DataFrame(np.random.randn(5,2),columns=list('AB'))

In [25]: for k in ['foo','bar']:
   ....:     if k not in df:
   ....:         df[k] = funcs[k](df)
   ....:         

In [26]: df
Out[26]: 
          A         B  foo  bar
0  0.733404  0.640446   10   11
1  0.927252  0.421439   10   11
2  2.355565  0.839521   10   11
3  0.260136 -0.016420   10   11
4  0.256628 -0.766033   10   11

[5 rows x 4 columns]
</snippet></ROW><ROW><id>21029116</id><snippet>df.eval</snippet></ROW><ROW><id>21029138</id><snippet>import time
import datetime 
t = '2012-06-30T23:59:60.209215'
nofrag, frag = t.split('.')
nofrag_dt = time.strptime(nofrag, "%Y-%m-%dT%H:%M:%S")
ts = datetime.datetime.fromtimestamp(time.mktime(nofrag_dt))
dt = ts.replace(microsecond=int(frag))
print(dt)
</snippet></ROW><ROW><id>21029138</id><snippet>2012-07-01 00:00:00.209215
</snippet></ROW><ROW><id>21029356</id><snippet>joblib.Parallel</snippet></ROW><ROW><id>21029356</id><snippet>n_jobs</snippet></ROW><ROW><id>21029356</id><snippet>For-loop: Finished in 33.8521318436 sec
n_jobs=1: Finished in 33.5527760983 sec
n_jobs=2: Finished in 18.9543449879 sec
n_jobs=3: Finished in 13.4856410027 sec
n_jobs=4: Finished in 15.0832719803 sec
n_jobs=5: Finished in 14.7227740288 sec
n_jobs=6: Finished in 15.6106669903 sec
</snippet></ROW><ROW><id>21029356</id><snippet>a</snippet></ROW><ROW><id>21029356</id><snippet>b</snippet></ROW><ROW><id>21029356</id><snippet>a</snippet></ROW><ROW><id>21029356</id><snippet>Parallel</snippet></ROW><ROW><id>21029356</id><snippet>a</snippet></ROW><ROW><id>21029356</id><snippet>joblib</snippet></ROW><ROW><id>21029356</id><snippet>import numpy as np
from matplotlib.path import Path
from joblib import Parallel, delayed
import time
import sys

## Check if one line segment contains another. 

def check_paths(path):
    for other_path in a:
        res='no cross'
        chck = Path(other_path)
        if chck.contains_path(path)==1:
            res= 'cross'
            break
    return res

if __name__ == '__main__':
    ## Create pairs of points for line segments
    a = zip(np.random.rand(5000,2),np.random.rand(5000,2))
    b = zip(np.random.rand(300,2),np.random.rand(300,2))

    now = time.time()
    if len(sys.argv) &gt;= 2:
        res = Parallel(n_jobs=int(sys.argv[1])) (delayed(check_paths) (Path(points)) for points in b)
    else:
        res = [check_paths(Path(points)) for points in b]
    print "Finished in", time.time()-now , "sec"
</snippet></ROW><ROW><id>21029356</id><snippet> n_jobs=1: Finished in 34.2845709324 sec
 n_jobs=2: Finished in 16.6254048347 sec
 n_jobs=3: Finished in 11.219119072 sec
 n_jobs=4: Finished in 8.61683392525 sec
 n_jobs=5: Finished in 8.51907801628 sec
 n_jobs=6: Finished in 8.21842098236 sec
 n_jobs=7: Finished in 8.21816396713 sec
 n_jobs=8: Finished in 7.81841087341 sec
</snippet></ROW><ROW><id>21029356</id><snippet>n_jobs=4</snippet></ROW><ROW><id>21029356</id><snippet>check_paths</snippet></ROW><ROW><id>21029356</id><snippet>other_paths=a</snippet></ROW><ROW><id>21029356</id><snippet>Path(...)</snippet></ROW><ROW><id>21029356</id><snippet>res='no cross'</snippet></ROW><ROW><id>21029356</id><snippet>import numpy as np
from matplotlib.path import Path
from joblib import Parallel, delayed
import time
import sys

## Check if one line segment contains another. 

def check_paths(path):
    #global a
    #print(path, a[:10])
    res='no cross'
    for other_path in a:
        if other_path.contains_path(path)==1:
            res= 'cross'
            break
    return res

if __name__ == '__main__':
    ## Create pairs of points for line segments
    a = zip(np.random.rand(5000,2),np.random.rand(5000,2))
    a = [Path(x) for x in a]

    b = zip(np.random.rand(300,2),np.random.rand(300,2))

    now = time.time()
    if len(sys.argv) &gt;= 2:
        res = Parallel(n_jobs=int(sys.argv[1])) (delayed(check_paths) (Path(points)) for points in b)
    else:
        res = [check_paths(Path(points)) for points in b]
    print "Finished in", time.time()-now , "sec"
</snippet></ROW><ROW><id>21029356</id><snippet>n_jobs=1: Finished in 5.33742594719 sec
n_jobs=2: Finished in 2.70858597755 sec
n_jobs=3: Finished in 1.80810618401 sec
n_jobs=4: Finished in 1.40814709663 sec
n_jobs=5: Finished in 1.50854086876 sec
n_jobs=6: Finished in 1.50901818275 sec
n_jobs=7: Finished in 1.51030707359 sec
n_jobs=8: Finished in 1.51062297821 sec
</snippet></ROW><ROW><id>21029356</id><snippet>contains_path</snippet></ROW><ROW><id>21029356</id><snippet>True</snippet></ROW><ROW><id>21029356</id><snippet>if this path completely contains the given path.</snippet></ROW><ROW><id>21029356</id><snippet>no cross</snippet></ROW><ROW><id>21029395</id><snippet>self.SetMinSize((self.WIDTH, -1))
</snippet></ROW><ROW><id>21029395</id><snippet>width, _ = self.GetSize()
self.SetMinSize((width, -1))
</snippet></ROW><ROW><id>21029395</id><snippet>FlexGridSizer.AddGrowableCol(col)
</snippet></ROW><ROW><id>21029395</id><snippet>#!/usr/bin/env python
import wx


class loginWindow(wx.Frame):
    def __init__(self, parent, title):
        super(loginWindow, self).__init__(parent, title=title,
            style=wx.SYSTEM_MENU | wx.CAPTION | wx.CLOSE_BOX)
        self.WIDTH = 400
        self.InitUI()
        self.Center()
        self.Show()

    def InitUI(self):

        panel = wx.Panel(self)
        self.user_name_lbl = wx.StaticText(panel, label="User name:")
        self.user_name_txt = wx.TextCtrl(panel)
        self.password_lbl = wx.StaticText(panel, label="Password:")
        self.password_txt = wx.TextCtrl(panel)
        self.login_button = wx.Button(panel, label="Login")

        fg_sizer = wx.FlexGridSizer(cols=2, vgap=5, hgap=5)
        fg_sizer.Add(self.user_name_lbl, 0, wx.ALIGN_RIGHT | wx.ALIGN_BOTTOM)
        fg_sizer.Add(self.user_name_txt, 0, wx.EXPAND)
        fg_sizer.Add(self.password_lbl, 0, wx.ALIGN_RIGHT | wx.ALIGN_BOTTOM)
        fg_sizer.Add(self.password_txt, 0, wx.EXPAND)
        fg_sizer.AddGrowableCol(1)

        panel_sizer = wx.BoxSizer(wx.VERTICAL)
        panel_sizer.Add(fg_sizer, 0, wx.ALL | wx.EXPAND, 5)
        panel_sizer.Add(self.login_button, 0, wx.EXPAND | wx.ALL, 5)
        panel.SetSizer(panel_sizer)

        frame_sizer = wx.BoxSizer(wx.VERTICAL)
        frame_sizer.Add(panel, 1, wx.EXPAND)
        self.SetSizer(frame_sizer)
        self.SetMinSize((self.WIDTH, -1))
        self.Fit()


if __name__ == '__main__':
    app = wx.App()
    loginWindow(None, title="AppTitle")
    app.MainLoop()
</snippet></ROW><ROW><id>21029583</id><snippet>a_form.instance = b
a_form.save()
</snippet></ROW><ROW><id>21029583</id><snippet>save()</snippet></ROW><ROW><id>21029583</id><snippet>class ArticleForm(forms.ModelForm):
    ...
    def save(self):
        instance = self.instance      # Do with instance what every you want
        super(ArticleForm, self).save()
</snippet></ROW><ROW><id>21029715</id><snippet>#!/usr/bin/python
import glob
from sys import argv

g=open(argv[2],'w')
g.write("Status,Job Number,Coder Machine Name,Machine type, Operator Id,Job Start time,Job end time\n")
for fname in glob.glob(argv[1]):
    with open(fname) as f:
        status=f.readline().strip().strip(',')
        f.readline()#extended report not needed
        f.readline()#job spec numerical control not needed
        s=f.readline()
        job_no=s.split('Job Number,')[1].split(',')[0]
        op_id=s.split('Operator Id,')[1].strip().strip(',')
        s=f.readline()
        machine_name=s.split('Coder Machine Name,')[1].split(',')[0]
        start_t=s.split('Job Start time,')[1].strip().strip(',')
        s=f.readline()
        machine_type=s.split('Machine type,')[1].split(',')[0]
        end_t=s.split('Job end time,')[1].strip().strip(',')
    g.write(",".join([status,job_no,machine_name,machine_type,op_id,start_t,end_t])+"\n")
g.close()
</snippet></ROW><ROW><id>21029715</id><snippet>Job*.data</snippet></ROW><ROW><id>21029715</id><snippet>python so.py &lt;data_files_wildcarded&gt; output.csv</snippet></ROW><ROW><id>21030011</id><snippet>s = "Lorem ipsum foo bar foobar stuff etc"
print ' '.join(s.split(" ")[:4])
</snippet></ROW><ROW><id>21030011</id><snippet>s = "Lorem ipsum foo bar foobar stuff etc"
start = 0
for i in range(4): # number of words
    start = s.find(" ", start+1)
print s[:start]
</snippet></ROW><ROW><id>21030132</id><snippet>averageGrade= total / lst.len()
</snippet></ROW><ROW><id>21030132</id><snippet>averageGrade= total / len(lst)
</snippet></ROW><ROW><id>21030132</id><snippet>'list' object has no attribute 'len'</snippet></ROW><ROW><id>21030132</id><snippet>list</snippet></ROW><ROW><id>21030132</id><snippet>len</snippet></ROW><ROW><id>21030132</id><snippet>total = 0.0
</snippet></ROW><ROW><id>21030330</id><snippet>celery==3.1.7</snippet></ROW><ROW><id>21030330</id><snippet>celery==3.1.1</snippet></ROW><ROW><id>21030353</id><snippet>nameData.append(myClassImpl)</snippet></ROW><ROW><id>21030353</id><snippet>class MyClass:
    def __init__(self, first, middle, last):
        self.firstName = first
        self.middleName = middle
        self.lastName = last

for current in open('nameList.csv','r'):
    current = current.split(',')
    myClassImple = MyClass(*current)
    nameData.append(myClassImpl)
</snippet></ROW><ROW><id>21030353</id><snippet>collections.namedtuple()</snippet></ROW><ROW><id>21030353</id><snippet>csv</snippet></ROW><ROW><id>21030353</id><snippet>import csv
from collections import namedtuple

MyClass = namedtuple('MyClass', 'firstName middleName lastName')

with open('nameList.csv','r') as infh:
    nameData = [MyClass(*row) for row in csv.reader(infh)]
</snippet></ROW><ROW><id>21030386</id><snippet>import pandas as pd
dates = pd.date_range('20130101', periods=6)

type(dates[0]) 
pandas.tslib.TimestampTimestamp('2013-01-01 00:00:00', tz=None)

type(dates[0]) == pandas.tslib.Timestamp
False  
# this throws NameError since you didn't import as pandas

type(dates[0]) == pd.tslib.Timestamp
True  
# this works because we imported Pandas as pd
</snippet></ROW><ROW><id>21030402</id><snippet>for</snippet></ROW><ROW><id>21030402</id><snippet>spheres = mc.ls(selection=True)
count=0

for sphere in spheres:
    count += 2
    mc.selectKey(sphere) # only selecting the one sphere!
    mc.keyframe(edit=True, relative=True, timeChange=count)
    print sphere # no need to look up the element
                 # which by the way should have been [i] not (i)
</snippet></ROW><ROW><id>21030462</id><snippet>48.6</snippet></ROW><ROW><id>21030462</id><snippet>&gt;&gt;&gt; float(u"48.6834")
48.683399999999999
</snippet></ROW><ROW><id>21030462</id><snippet>&gt;&gt;&gt; "%0.4f"%float(u"48.6834")  #0 padded float with 4 decimal places 
'48.6834'
</snippet></ROW><ROW><id>21030462</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal(u"48.6834")
Decimal('48.6834')
</snippet></ROW><ROW><id>21030546</id><snippet>texture</snippet></ROW><ROW><id>21030546</id><snippet>Image 2.jpg</snippet></ROW><ROW><id>21030546</id><snippet>texturefocus</snippet></ROW><ROW><id>21030546</id><snippet>texture</snippet></ROW><ROW><id>21030546</id><snippet>texture = control.find('texture').text
</snippet></ROW><ROW><id>21030546</id><snippet>Image 2.jpg</snippet></ROW><ROW><id>21030546</id><snippet>Image 2.png</snippet></ROW><ROW><id>21030546</id><snippet>if</snippet></ROW><ROW><id>21030546</id><snippet>if texture == 'Image 2.png':
</snippet></ROW><ROW><id>21030546</id><snippet>description</snippet></ROW><ROW><id>21030546</id><snippet>texture</snippet></ROW><ROW><id>21030546</id><snippet>Image 2.png</snippet></ROW><ROW><id>21030546</id><snippet>None</snippet></ROW><ROW><id>21030546</id><snippet>def find_image2(filename):
    tree = ET.parse(filename)
    root = tree.getroot()
    controls = root.find('controls')

    for control in controls.findall('control'):
        texture = control.find('texture')
        if texture and texture.text == 'Image 2.png':
            return control.find('description').text
</snippet></ROW><ROW><id>21030574</id><snippet>pip install swampy</snippet></ROW><ROW><id>21030574</id><snippet>python</snippet></ROW><ROW><id>21030574</id><snippet>from TurtleWorld import *</snippet></ROW><ROW><id>21030574</id><snippet>ImportError: No module named TurtleWorld</snippet></ROW><ROW><id>21030588</id><snippet>json</snippet></ROW><ROW><id>21030588</id><snippet>ret = {'id': project.id,
       'name': project.name,
       'snapshot_ids': [snapshot.id for snapshot in snapshots]}
ret_json = json.dumps(ret)
</snippet></ROW><ROW><id>21030644</id><snippet>&gt;&gt;&gt; v0 = [ { 'a': 1, 'b': { 'c': 3 } },
...        { 'a': 1, 'b': { 'c': 3 }, 'd': 4 },
...        { 'a': 1 },
...        { 'a': 1, 'b': { 'c': 3 } } ]
&gt;&gt;&gt; out = []
&gt;&gt;&gt; for v in v0:
...     if v not in out:
...         out.append(v)
...         
&gt;&gt;&gt; out
[{'a': 1, 'b': {'c': 3}}, {'a': 1, 'b': {'c': 3}, 'd': 4}, {'a': 1}]
</snippet></ROW><ROW><id>21030713</id><snippet>&gt;&gt;&gt; xopt = find_max_f()
Optimization terminated successfully.
         Current function value: -1.118012
         Iterations: 12
         Function evaluations: 24
&gt;&gt;&gt; xopt
array([ 0.0131875])
&gt;&gt;&gt; xopt[0]
0.013187500000000005
&gt;&gt;&gt; type(xopt[0])
&lt;type 'numpy.float64'&gt;
</snippet></ROW><ROW><id>21030815</id><snippet>bool</snippet></ROW><ROW><id>21030815</id><snippet>bool</snippet></ROW><ROW><id>21030815</id><snippet>In [51]: df['bool'] = df['bool'].replace({'n': False, 'y': True})
</snippet></ROW><ROW><id>21030815</id><snippet>bool</snippet></ROW><ROW><id>21030815</id><snippet>df</snippet></ROW><ROW><id>21030815</id><snippet>In [51]: dates = df[df['bool']].groupby("Group")['date'].first()

In [52]: dates
Out[52]: 
Group
A        2000-04-10
B        2000-03-15
Name: date, dtype: object


[2 rows x 2 columns]
</snippet></ROW><ROW><id>21030815</id><snippet>Group</snippet></ROW><ROW><id>21030815</id><snippet>join</snippet></ROW><ROW><id>21030815</id><snippet>dates</snippet></ROW><ROW><id>21030815</id><snippet>In [117]: df.set_index('Group').join(dates, rsuffix='_trigger')
Out[117]: 
        bool        date date_trigger
Group                                
A      False  2000-01-01   2000-04-10
A      False  2000-03-02   2000-04-10
A       True  2000-04-10   2000-04-10
A       True  2001-01-01   2000-04-10
B      False  2000-02-20   2000-03-15
B       True  2000-03-15   2000-03-15
B       True  2000-04-27   2000-03-15
B       True  2001-01-10   2000-03-15
</snippet></ROW><ROW><id>21030934</id><snippet>__startswith</snippet></ROW><ROW><id>21030934</id><snippet>1</snippet></ROW><ROW><id>21030934</id><snippet>10</snippet></ROW><ROW><id>21030934</id><snippet>104</snippet></ROW><ROW><id>21030934</id><snippet>1</snippet></ROW><ROW><id>21030934</id><snippet>__regex</snippet></ROW><ROW><id>21030934</id><snippet>model.objects.filter(uri__regex==r'^(%s)@.+' % '|'.join(L))
</snippet></ROW><ROW><id>21030934</id><snippet>__regex</snippet></ROW><ROW><id>21030934</id><snippet>@</snippet></ROW><ROW><id>21031019</id><snippet>cov</snippet></ROW><ROW><id>21031019</id><snippet>var</snippet></ROW><ROW><id>21031019</id><snippet>numpy.var</snippet></ROW><ROW><id>21031019</id><snippet>Notes
-----
The variance is the average of the squared deviations from the mean,
i.e.,  ``var = mean(abs(x - x.mean())**2)``.

The mean is normally calculated as ``x.sum() / N``, where ``N = len(x)``.
If, however, `ddof` is specified, the divisor ``N - ddof`` is used
instead.  In standard statistical practice, ``ddof=1`` provides an
unbiased estimator of the variance of a hypothetical infinite population.
``ddof=0`` provides a maximum likelihood estimate of the variance for
normally distributed variables.
</snippet></ROW><ROW><id>21031019</id><snippet>In [69]: cov(x,x)#defaulting to ddof=1
Out[69]: 
array([[ 0.5,  0.5],
       [ 0.5,  0.5]])

In [70]: x.var(ddof=1)
Out[70]: 0.5

In [71]: cov(x,x,ddof=0)
Out[71]: 
array([[ 0.25,  0.25],
       [ 0.25,  0.25]])

In [72]: x.var()#defaulting to ddof=0
Out[72]: 0.25
</snippet></ROW><ROW><id>21031196</id><snippet>//</snippet></ROW><ROW><id>21031196</id><snippet> &gt;&gt;&gt; 999999999999999999999999/3
 3.333333333333333e+23
 &gt;&gt;&gt; 999999999999999999999999//3
 333333333333333333333333

 &gt;&gt;&gt; type(999999999999999999999999/3)
 &lt;class 'float'&gt;
 &gt;&gt;&gt; type(999999999999999999999999//3)
 &lt;class 'int'&gt;
</snippet></ROW><ROW><id>21031196</id><snippet> python -c 'print("%d" % (999999999999999999999999//3))' 
 333333333333333333333333
</snippet></ROW><ROW><id>21031196</id><snippet> &gt;&gt;&gt; from __future__ import division 
</snippet></ROW><ROW><id>21031196</id><snippet>&gt;&gt;&gt; from sys import version 
&gt;&gt;&gt; version
'2.7.6 (default, Dec 30 2013, 14:37:40) \n[GCC 4.8.2]'
&gt;&gt;&gt; from __future__ import division 
&gt;&gt;&gt; type(999999999999999999999999//3)
&lt;type 'long'&gt;
&gt;&gt;&gt; type(999999999999999999999999/3)
&lt;type 'float'&gt;
</snippet></ROW><ROW><id>21031303</id><snippet>sklearn.preprocessing.normalize</snippet></ROW><ROW><id>21031303</id><snippet>import numpy as np
from sklearn.preprocessing import normalize

x = np.random.rand(1000)*10
norm1 = x / np.linalg.norm(x)
norm2 = normalize(x[:,np.newaxis], axis=0).ravel()
print np.all(norm1 == norm2)
# True
</snippet></ROW><ROW><id>21031403</id><snippet>from urllib2 import urlopen
from bs4 import BeautifulSoup

html = urlopen("http://finance.yahoo.com/q?s=AAPL&amp;q1=1")
soup = BeautifulSoup(html)

for data in soup.find_all('td', class_="yfnc_tabledata1")[0:6]:
    if data.parent.name == "tr":
            print (data.text)
</snippet></ROW><ROW><id>21031403</id><snippet>&gt;&gt;&gt;
543.46
546.80
536.50 x 100
536.60 x 100
595.73
0.65
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>21031403</id><snippet>for data in soup.find_all('td', class_="yfnc_tabledata1")[0:6]:
    print (data.text)
</snippet></ROW><ROW><id>21031403</id><snippet>for data in soup.find_all('td', attrs={'class': 'yfnc_tabledata1'})[0:6]:
    print (data.text)
</snippet></ROW><ROW><id>21031442</id><snippet>blender --python script.py</snippet></ROW><ROW><id>21031442</id><snippet>Preferences -&gt; Addons</snippet></ROW><ROW><id>21031811</id><snippet>(?:(?&lt;=^\d)|(?&lt;=^\d{2})|(?&lt;=^\d{3})|(?&lt;=^\d{4})|(?&lt;=^\d{6}))(?=\d)
</snippet></ROW><ROW><id>21031811</id><snippet>.</snippet></ROW><ROW><id>21031811</id><snippet>re.sub(r'(?:(?&lt;=^\d)|(?&lt;=^\d{2})|(?&lt;=^\d{3})|(?&lt;=^\d{4})|(?&lt;=^\d{6}))(?=\d)', '.', yourstr)
</snippet></ROW><ROW><id>21032005</id><snippet>run</snippet></ROW><ROW><id>21032005</id><snippet>start</snippet></ROW><ROW><id>21032005</id><snippet>run</snippet></ROW><ROW><id>21032005</id><snippet>start</snippet></ROW><ROW><id>21032005</id><snippet>threading.Thread</snippet></ROW><ROW><id>21032005</id><snippet>sum</snippet></ROW><ROW><id>21032005</id><snippet>Python</snippet></ROW><ROW><id>21032057</id><snippet>indices = {3, 4}
newlist = [v for i, v in enumerate(oldlist) if i not in indices]
</snippet></ROW><ROW><id>21032057</id><snippet>del lst[index]</snippet></ROW><ROW><id>21032057</id><snippet>&gt;&gt;&gt; oldlist = [2, 5, 7, 12, 13]
&gt;&gt;&gt; indices = {3, 4}
&gt;&gt;&gt; [v for i, v in enumerate(oldlist) if i not in indices]
[2, 5, 7]
</snippet></ROW><ROW><id>21032179</id><snippet>pd.Series.map</snippet></ROW><ROW><id>21032179</id><snippet>import pandas as pd
import numpy as np

np.random.seed(0)

n=10

df = pd.DataFrame({'num': np.random.randn(n),
                   'lett': np.random.choice(
                        list('abcdefghijklmnopqrstuvwxyz'),n)
                   })  
</snippet></ROW><ROW><id>21032179</id><snippet>df</snippet></ROW><ROW><id>21032179</id><snippet>def classify_letter(char):
    if char in list('aeiou'):
        return 'vowel'
    else:
        return 'consonant'
</snippet></ROW><ROW><id>21032179</id><snippet>map</snippet></ROW><ROW><id>21032179</id><snippet>Series</snippet></ROW><ROW><id>21032179</id><snippet>DataFrame</snippet></ROW><ROW><id>21032179</id><snippet>map</snippet></ROW><ROW><id>21032179</id><snippet>Series</snippet></ROW><ROW><id>21032179</id><snippet>df['new'] = df['lett'].map(classify_letter)
</snippet></ROW><ROW><id>21032179</id><snippet>df['lett'] = df['lett'].map(classify_letter)
</snippet></ROW><ROW><id>21032214</id><snippet>self.action_group.add_actions([
("Shoebot", None, _("Shoe_bot"), None, _("Shoebot"), None),
("ShoebotRun", None, _("Run in Shoebot"), '&lt;control&gt;R', _("Run in Shoebot"), self.on_run_activate),
])
</snippet></ROW><ROW><id>21032325</id><snippet>Structure</snippet></ROW><ROW><id>21032325</id><snippet>"w#"</snippet></ROW><ROW><id>21032325</id><snippet>static PyObject* viapoint(PyObject* self, PyObject* args)
{
    struct mec *m;
    size_t size;

    if (!PyArg_ParseTuple(args, "w#", &amp;m, &amp;size))
        return NULL;

    if (size != sizeof(struct mec)) {
        PyErr_SetString(PyExc_TypeError, "wrong buffer size");
        return NULL;
    }

    printf("viapoint av(c) age nb: %d et %d!\n", m-&gt;age, m-&gt;number);
    m-&gt;age = 10;
    m-&gt;number = 1;

    return Py_BuildValue("i", m-&gt;age + m-&gt;number);
}
</snippet></ROW><ROW><id>21032325</id><snippet>from ctypes import *
import yec

class Mec(Structure):
    _fields_ = [
        ("age", c_int),
        ("number", c_int),
    ]

class Bad(Structure):
    _fields_ = [
        ("age", c_int),
        ("number", c_int),
        ("extra", c_int),
    ]

m = Mec(1, 2)
print yec.viapoint(m)

# TypeError
b = Bad(1, 2, 3)
print yec.viapoint(b)
</snippet></ROW><ROW><id>21032325</id><snippet>long</snippet></ROW><ROW><id>21032325</id><snippet>long long</snippet></ROW><ROW><id>21032325</id><snippet>void *</snippet></ROW><ROW><id>21032325</id><snippet>long</snippet></ROW><ROW><id>21032325</id><snippet>long</snippet></ROW><ROW><id>21032325</id><snippet>long</snippet></ROW><ROW><id>21032325</id><snippet>addressof</snippet></ROW><ROW><id>21032530</id><snippet>LD_LIBRARY_PATH</snippet></ROW><ROW><id>21032530</id><snippet>emacs</snippet></ROW><ROW><id>21032530</id><snippet>alias emacs='LD_LIBRARY_PATH= emacs'</snippet></ROW><ROW><id>21032530</id><snippet>libpangocairo</snippet></ROW><ROW><id>21032644</id><snippet>class TableWidgetItem(QtGui.QTableWidgetItem):
    def __lt__(self, other):
        return funky_sort_key(self.text(), other.text())
</snippet></ROW><ROW><id>21032746</id><snippet>SocketServer.BaseRequestHandler</snippet></ROW><ROW><id>21032746</id><snippet>def handle(self)</snippet></ROW><ROW><id>21032783</id><snippet>def divide[T](lst:Seq[T], pairs:Seq[(Int, Int)]):Seq[Seq[T]] = {
    pairs.map{case (b, u) =&gt; lst.slice(b,u)}
}
</snippet></ROW><ROW><id>21032915</id><snippet>shutil.copy('C:\\notepad.exe', 'C:\\notepad{}.exe'.format(a))
</snippet></ROW><ROW><id>21032915</id><snippet>{}</snippet></ROW><ROW><id>21032915</id><snippet>a</snippet></ROW><ROW><id>21033028</id><snippet>def test1_test2(*args):
    test1(*args)
    test2(*args)

cmds.button('greetings', label='Menu', command=test1_test2)
</snippet></ROW><ROW><id>21033220</id><snippet>local</snippet></ROW><ROW><id>21033269</id><snippet>print re.split("([A-Z]+)",my_string)[1:]
</snippet></ROW><ROW><id>21033278</id><snippet>SERVER_NAME</snippet></ROW><ROW><id>21033278</id><snippet>app = Eve()
app.run()
</snippet></ROW><ROW><id>21033278</id><snippet>app.run(host='0.0.0.0')
</snippet></ROW><ROW><id>21033278</id><snippet>SERVER_NAME = ''</snippet></ROW><ROW><id>21033319</id><snippet>for j, col in enumerate(row.values())</snippet></ROW><ROW><id>21033353</id><snippet>&gt;&gt;&gt; Xs = np.vstack(Xs)
&gt;&gt;&gt; Ys = np.vStack(Ys)
</snippet></ROW><ROW><id>21033353</id><snippet>fnRSS</snippet></ROW><ROW><id>21033353</id><snippet>&gt;&gt;&gt; def fnRSS(vBeta, vY, vX):
...     return np.sum((vY.T - np.dot(vX, vBeta))**2)
</snippet></ROW><ROW><id>21033353</id><snippet>&gt;&gt;&gt; sp.optimize.fmin_bfgs(fnRSS, x0=vBeta, args=(Ys,Xs))
Optimization terminated successfully.
         Current function value: 26.323906
         Iterations: 9
         Function evaluations: 98
         Gradient evaluations: 14
array([-1.49208546,  0.05773327,  0.04419307, -0.01117645,  0.00179791])
</snippet></ROW><ROW><id>21033353</id><snippet>read_csv</snippet></ROW><ROW><id>21033353</id><snippet>genfromtxt</snippet></ROW><ROW><id>21033353</id><snippet>recfromcsv</snippet></ROW><ROW><id>21033353</id><snippet>&gt;&gt;&gt; import pandas as pd
&gt;&gt;&gt; urlSheatherData = "http://www.stat.tamu.edu/~sheather/book/docs/datasets/MichelinNY.csv"
&gt;&gt;&gt; data = pd.read_csv(urlSheatherData)
&gt;&gt;&gt; data[['Service','Decor', 'Food', 'Price']].head()
   Service  Decor  Food  Price
0       19     20    19     50
1       16     17    17     43
2       21     17    23     35
3       16     23    19     52
4       19     12    23     24

[5 rows x 4 columns]
&gt;&gt;&gt; data['InMichelin'].head()
0    0
1    0
2    0
3    1
4    0
Name: InMichelin, dtype: int64
</snippet></ROW><ROW><id>21033461</id><snippet> LogOnline.query().filter(LogOnline.user == user)
</snippet></ROW><ROW><id>21033489</id><snippet>&lt;</snippet></ROW><ROW><id>21033489</id><snippet>&lt;=</snippet></ROW><ROW><id>21033489</id><snippet>&lt;</snippet></ROW><ROW><id>21033489</id><snippet>&lt;=</snippet></ROW><ROW><id>21033489</id><snippet>if len(recvdata)&lt;=16:
    print &gt;&gt;log_buffer,"sending data"
    conn.sendall(data)
    break
</snippet></ROW><ROW><id>21033489</id><snippet>while True:
    conn,add=sock.accept()
    addr=(conn,add)
    print add
    try:
        recvdata=conn.recv(2048) #however much you need

        wholebytes = len(recvdata) / 16 # get the number of whole bytes

        # loop to send messages of length 16 with whole bytes
        for i in range(wholebytes):
            data = recvdata[i*16:(i+1)*16]
            print &gt;&gt;log_buffer,"sending data"
            conn.sendall(data)

        break
</snippet></ROW><ROW><id>21033761</id><snippet>my_new_list = [key for key, value in my_list]
</snippet></ROW><ROW><id>21033761</id><snippet>my_new_list = sorted(index_dict, key=index_dict.get, reverse=True)
</snippet></ROW><ROW><id>21033768</id><snippet>post</snippet></ROW><ROW><id>21033768</id><snippet>user</snippet></ROW><ROW><id>21033768</id><snippet>l = { (1, 1) : {'other stuff':'something', ...}, 
      (1, 2) : {'other stuff':'something', ...},
      (2, 1) : {'other stuff':'something', ...} }
</snippet></ROW><ROW><id>21033768</id><snippet>O(1)</snippet></ROW><ROW><id>21033768</id><snippet>user_post_pair = (1, 1)
if user_post_pair in l:
    # Stuff...
</snippet></ROW><ROW><id>21033789</id><snippet>import numpy as np
import matplotlib.pyplot as plt
import pandas
series = pandas.Series(np.random.normal(size=2000))
fig, ax = plt.subplots()
series.hist(ax=ax, bins=100, bottom=0.1)
ax.set_yscale('log')
</snippet></ROW><ROW><id>21033789</id><snippet>ax</snippet></ROW><ROW><id>21033789</id><snippet>bottom</snippet></ROW><ROW><id>21033840</id><snippet>F2C</snippet></ROW><ROW><id>21033840</id><snippet>import other_module</snippet></ROW><ROW><id>21033840</id><snippet>other_module.F2C</snippet></ROW><ROW><id>21033840</id><snippet>F2C</snippet></ROW><ROW><id>21033840</id><snippet>F2C</snippet></ROW><ROW><id>21033840</id><snippet>F2C</snippet></ROW><ROW><id>21033840</id><snippet>UnboundLocalError</snippet></ROW><ROW><id>21033840</id><snippet>NameError</snippet></ROW><ROW><id>21033840</id><snippet>F2C</snippet></ROW><ROW><id>21033881</id><snippet>bytes</snippet></ROW><ROW><id>21033881</id><snippet>expected bytes, not str</snippet></ROW><ROW><id>21033881</id><snippet>initialize_auth_token()</snippet></ROW><ROW><id>21033881</id><snippet>b64encode()</snippet></ROW><ROW><id>21033913</id><snippet>self</snippet></ROW><ROW><id>21033948</id><snippet>O,2,((?:[0-9],?){0,}),X
</snippet></ROW><ROW><id>21033948</id><snippet>import re

s = '''O,4,1,8,6,7,9,5,3,X
X,6,3,7,5,9,4,1,8,2,T
O,2,9,6,7,11,8,X
O,4,6,9,3,1,7,5,O
X,6,9,3,5,1,7,4,8,O
X,3,2,7,1,9,4,6,X
X,9,2,6,8,5,3,1,X'''

pattern = re.compile("O,2,((?:[0-9],?){0,}),X")
matches = pattern.findall(s) # s is the above string

print matches
</snippet></ROW><ROW><id>21033948</id><snippet>['9,6,7,11,8']
</snippet></ROW><ROW><id>21033948</id><snippet>2,</snippet></ROW><ROW><id>21033948</id><snippet>,X</snippet></ROW><ROW><id>21033948</id><snippet>()</snippet></ROW><ROW><id>21033948</id><snippet>(?: )</snippet></ROW><ROW><id>21034255</id><snippet>&gt;&gt;&gt; from mimetypes import guess_extension
&gt;&gt;&gt; guess_extension('image/x-corelphotopaint')
'.cpt'
&gt;&gt;&gt; guess_extension('image/png')
'.png'
</snippet></ROW><ROW><id>21034313</id><snippet>datetime</snippet></ROW><ROW><id>21034313</id><snippet>date</snippet></ROW><ROW><id>21034313</id><snippet>datetime</snippet></ROW><ROW><id>21034313</id><snippet>date</snippet></ROW><ROW><id>21034313</id><snippet>timedelta</snippet></ROW><ROW><id>21034533</id><snippet>User</snippet></ROW><ROW><id>21034533</id><snippet>db.Model</snippet></ROW><ROW><id>21034533</id><snippet>class User(UserMixin, db.Model):
    ...
</snippet></ROW><ROW><id>21034533</id><snippet>.first()</snippet></ROW><ROW><id>21034533</id><snippet>.get(primary_key)</snippet></ROW><ROW><id>21034533</id><snippet>get_user_by_id</snippet></ROW><ROW><id>21034533</id><snippet>def get_user_by_id(id):
    return User.query.get(id)
</snippet></ROW><ROW><id>21034533</id><snippet>get_user</snippet></ROW><ROW><id>21034533</id><snippet>def get_user(kwargs):
    u = User.query.filter(db.or_(
        User.id == kwargs.get('id'),
        User.email == kwargs.get('email')
    )).first()
    if u is None: # user didn't exist in db
        return create_browserid_user(kwargs)
    return u
</snippet></ROW><ROW><id>21034906</id><snippet>%load</snippet></ROW><ROW><id>21034906</id><snippet>%load filename.py
</snippet></ROW><ROW><id>21034906</id><snippet>filename.py</snippet></ROW><ROW><id>21034906</id><snippet>.py</snippet></ROW><ROW><id>21034906</id><snippet>%load?</snippet></ROW><ROW><id>21034906</id><snippet>%magic?</snippet></ROW><ROW><id>21035037</id><snippet>':'.join("{0:x}\n".format(random.randint(0, 2**16 - 1)) for i in range(4))
#        --^
</snippet></ROW><ROW><id>21035041</id><snippet>s = """In Newtonian physics, free fall is any motion
of a body where its weight is the only force acting
upon it. In the context of general relativity where
gravitation is reduced to a space-time curvature,
a body in free fall has no force acting on it and
it moves along a geodesic. The present article
concerns itself with free fall in the Newtonian domain."""

import re

def say_me(word,li=re.split('\s+',s)):
    for i,w in enumerate(li):
        if w==word:
            print '\n%s at index %d followed by\n%s' % (w,i,li[i+1:])

say_me('free')
</snippet></ROW><ROW><id>21035041</id><snippet>free at index 3 followed by
['fall', 'is', 'any', 'motion', 'of', 'a', 'body', 'where', 'its', 'weight', 'is', 'the', 'only', 'force', 'acting', 'upon', 'it.', 'In', 'the', 'context', 'of', 'general', 'relativity', 'where', 'gravitation', 'is', 'reduced', 'to', 'a', 'space-time', 'curvature,', 'a', 'body', 'in', 'free', 'fall', 'has', 'no', 'force', 'acting', 'on', 'it', 'and', 'it', 'moves', 'along', 'a', 'geodesic.', 'The', 'present', 'article', 'concerns', 'itself', 'with', 'free', 'fall', 'in', 'the', 'Newtonian', 'domain.']

free at index 38 followed by
['fall', 'has', 'no', 'force', 'acting', 'on', 'it', 'and', 'it', 'moves', 'along', 'a', 'geodesic.', 'The', 'present', 'article', 'concerns', 'itself', 'with', 'free', 'fall', 'in', 'the', 'Newtonian', 'domain.']

free at index 58 followed by
['fall', 'in', 'the', 'Newtonian', 'domain.']
</snippet></ROW><ROW><id>21035041</id><snippet>li=re.split('\s+',s)</snippet></ROW><ROW><id>21035041</id><snippet>li</snippet></ROW><ROW><id>21035041</id><snippet>re.split('\s+',s)</snippet></ROW><ROW><id>21035155</id><snippet>subprocess.PIPE</snippet></ROW><ROW><id>21035155</id><snippet>proc = subprocess.Popen(['bash', '-c', 'echo Testing'], 
                        stdout=subprocess.PIPE,
                        stderr=subprocess.STDOUT)
print('Writing:', proc.stdout.read())
# OR  print('Writing:', proc.stdout.read().decode())
</snippet></ROW><ROW><id>21035332</id><snippet>print(len("".join(list1)))
</snippet></ROW><ROW><id>21035332</id><snippet>print(len("".join(list1).encode(your_codec)))
</snippet></ROW><ROW><id>21035332</id><snippet>write</snippet></ROW><ROW><id>21035332</id><snippet>os.stat</snippet></ROW><ROW><id>21035373</id><snippet>diff()</snippet></ROW><ROW><id>21035373</id><snippet>import pandas as pd
import numpy as np

times = pd.date_range('1/1/2011', periods=72, freq='M')
times = times[(times &lt; times[20]) | (times &gt; times[40])]

s = pd.DataFrame({"value":np.random.rand(len(times)), "times":times})
g = (s.times.diff() &gt; np.timedelta64(60, "D")).astype(int).cumsum()
print s.groupby(g).min()
</snippet></ROW><ROW><id>21035373</id><snippet>                times     value
0 2011-01-31 00:00:00  0.022073
1 2014-06-30 00:00:00  0.003856
</snippet></ROW><ROW><id>21035380</id><snippet>def decrementList(words):
    words_remaining = words[:]
    while words_remaining:
        url = 'http://ws.spotify.com/search/1/track.json?q='
        request = requests.get(url + '%20'.join(words_remaining))

        json_dict = json.loads(request.content)
        if json_dict['info']['num_results'] &gt; 0:
            num_words_taken = len(words) - len(words_remaining)
            return num_words_taken, json_dict

        words_remaining.pop()
</snippet></ROW><ROW><id>21035380</id><snippet>list.pop</snippet></ROW><ROW><id>21035380</id><snippet>import requests
import json

message = "if i can\'t let it go out of my mind"

split_message = message.split()

def decrementList(words):
    for w in [words] + [words[:-x] for x in range(1,len(words))]:
        url = 'http://ws.spotify.com/search/1/track.json?q='
        request = requests.get(url + "%20".join(w))

        json_dict = json.loads(request.content)
        num_results = json_dict['info']['num_results']
        if num_results &gt; 0:
            num_removed = len(words) - len(w)
            return num_removed, json_dict

num_words_removed, json_dict = decrementList(split_message)
</snippet></ROW><ROW><id>21035380</id><snippet>[words] + [words[:-x] for x in range(1,len(words))]</snippet></ROW><ROW><id>21035380</id><snippet>words = message.split()</snippet></ROW><ROW><id>21035380</id><snippet>[
    ['if', 'i', 'can', 'let', 'it', 'go', 'out', 'of', 'my', 'mind'],
    ['if', 'i', 'can', 'let', 'it', 'go', 'out', 'of', 'my'],
    ['if', 'i', 'can', 'let', 'it', 'go', 'out', 'of'],
    ['if', 'i', 'can', 'let', 'it', 'go', 'out'],
    ['if', 'i', 'can', 'let', 'it', 'go'],
    ['if', 'i', 'can', 'let', 'it'],
    ['if', 'i', 'can', 'let'],
    ['if', 'i', 'can'],
    ['if', 'i'],
    ['if']
]
</snippet></ROW><ROW><id>21035421</id><snippet>/bin/bash Anaconda-1.9.0-MacOSX-x86_64.sh
</snippet></ROW><ROW><id>21035421</id><snippet>$ python
Python 2.7.6 |Anaconda 1.8.0 (x86_64)| (default, Nov 11 2013, 10:49:09)
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>21035474</id><snippet>from collections import Counter
def mode_function2(lst):
    counter = Counter(lst)
    _,val = counter.most_common(1)[0]
    return [x for x,y in counter.items() if y == val]
</snippet></ROW><ROW><id>21035474</id><snippet>&gt;&gt;&gt; mode_function2([1, 2, 2])
[2]
&gt;&gt;&gt; mode_function2([1, 2, 2, 1])
[1, 2]
&gt;&gt;&gt; mode_function2([1, 2, 3])
[1, 2, 3]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>21035474</id><snippet>collections.Counter</snippet></ROW><ROW><id>21035474</id><snippet>most_common</snippet></ROW><ROW><id>21035557</id><snippet>f = lambda x: x * 2
</snippet></ROW><ROW><id>21035557</id><snippet>def f(x):
    return x * 2
</snippet></ROW><ROW><id>21035557</id><snippet>print iterator(lambda x: x / 4 + 12, 100, 5)
</snippet></ROW><ROW><id>21035557</id><snippet>=</snippet></ROW><ROW><id>21035557</id><snippet>x if cond else y</snippet></ROW><ROW><id>21035577</id><snippet>&lt;CRLF&gt;</snippet></ROW><ROW><id>21035577</id><snippet>\r\n</snippet></ROW><ROW><id>21035577</id><snippet>.recv</snippet></ROW><ROW><id>21035577</id><snippet>import socket

host = ''
port = 8090
backlog = 5
size = 1024
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((host,port))
s.listen(backlog)
while 1:
    client, address = s.accept()
    data = client.recv(size)

    if data:
        client.send(bytes('HTTP/1.0 200 OK\r\n', 'UTF-8'))
        client.send(bytes("Content-Type: text/html\r\n\r\n", 'UTF-8'))
        client.send(bytes('&lt;html&gt;&lt;body&gt;&lt;h1&gt;Hello World&lt;/body&gt;&lt;/html&gt;', 'UTF-8'))
    client.close()
</snippet></ROW><ROW><id>21035577</id><snippet>\</snippet></ROW><ROW><id>21035658</id><snippet>MatAdd</snippet></ROW><ROW><id>21035658</id><snippet>Eq</snippet></ROW><ROW><id>21035658</id><snippet>In [14]: Eq(y.as_explicit(), MatAdd((x*b).as_explicit(), (e).as_explicit()))
Out[14]:
⎡y₀₀⎤ = ⎡x₀₀⋅b₀₀ + x₀₁⋅b₁₀⎤ + ⎡ε₀₀⎤
⎢   ⎥   ⎢                 ⎥   ⎢   ⎥
⎢y₁₀⎥   ⎢x₁₀⋅b₀₀ + x₁₁⋅b₁₀⎥   ⎢ε₁₀⎥
⎢   ⎥   ⎢                 ⎥   ⎢   ⎥
⎢y₂₀⎥   ⎢x₂₀⋅b₀₀ + x₂₁⋅b₁₀⎥   ⎢ε₂₀⎥
⎢   ⎥   ⎢                 ⎥   ⎢   ⎥
⎢y₃₀⎥   ⎢x₃₀⋅b₀₀ + x₃₁⋅b₁₀⎥   ⎢ε₃₀⎥
⎢   ⎥   ⎢                 ⎥   ⎢   ⎥
⎣y₄₀⎦   ⎣x₄₀⋅b₀₀ + x₄₁⋅b₁₀⎦   ⎣ε₄₀⎦
</snippet></ROW><ROW><id>21035658</id><snippet>In [16]: print(latex(Eq(y.as_explicit(), MatAdd((x*b).as_explicit(), (e).as_explicit()))))
\left[\begin{matrix}y_{0, 0}\\y_{1, 0}\\y_{2, 0}\\y_{3, 0}\\y_{4, 0}\end{matrix}\right] = \left[\begin{matrix}x_{0, 0} b_{0, 0} + x_{0, 1} b_{1, 0}\\x_{1, 0} b_{0, 0} + x_{1, 1} b_{1, 0}\\x_{2, 0} b_{0, 0} + x_{2, 1} b_{1, 0}\\x_{3, 0} b_{0, 0} + x_{3, 1} b_{1, 0}\\x_{4, 0} b_{0, 0} + x_{4, 1} b_{1, 0}\end{matrix}\right] + \left[\begin{matrix}\epsilon_{0, 0}\\\epsilon_{1, 0}\\\epsilon_{2, 0}\\\epsilon_{3, 0}\\\epsilon_{4, 0}\end{matrix}\right]
</snippet></ROW><ROW><id>21035658</id><snippet>MatMul</snippet></ROW><ROW><id>21035658</id><snippet>x*b</snippet></ROW><ROW><id>21035658</id><snippet>In [18]: Eq(y.as_explicit(), MatAdd(MatMul(x.as_explicit(),b.as_explicit()), (e).as_explicit()))
Out[18]:
⎡y₀₀⎤ = ⎡x₀₀  x₀₁⎤⋅⎡b₀₀⎤ + ⎡ε₀₀⎤
⎢   ⎥   ⎢        ⎥ ⎢   ⎥   ⎢   ⎥
⎢y₁₀⎥   ⎢x₁₀  x₁₁⎥ ⎣b₁₀⎦   ⎢ε₁₀⎥
⎢   ⎥   ⎢        ⎥         ⎢   ⎥
⎢y₂₀⎥   ⎢x₂₀  x₂₁⎥         ⎢ε₂₀⎥
⎢   ⎥   ⎢        ⎥         ⎢   ⎥
⎢y₃₀⎥   ⎢x₃₀  x₃₁⎥         ⎢ε₃₀⎥
⎢   ⎥   ⎢        ⎥         ⎢   ⎥
⎣y₄₀⎦   ⎣x₄₀  x₄₁⎦         ⎣ε₄₀⎦

In [19]: print(latex(Eq(y.as_explicit(), MatAdd(MatMul(x.as_explicit(),b.as_explicit()), (e).as_explicit()))))
\left\[\begin{matrix}y_{0, 0}\\y_{1, 0}\\y_{2, 0}\\y_{3, 0}\\y_{4, 0}\end{matrix}\right\] = \left\[\begin{matrix}x_{0, 0} &amp; x_{0, 1}\\x_{1, 0} &amp; x_{1, 1}\\x_{2, 0} &amp; x_{2, 1}\\x_{3, 0} &amp; x_{3, 1}\\x_{4, 0} &amp; x_{4, 1}\end{matrix}\right\] \left\[\begin{matrix}b_{0, 0}\\b_{1, 0}\end{matrix}\right\] + \left\[\begin{matrix}\epsilon_{0, 0}\\\epsilon_{1, 0}\\\epsilon_{2, 0}\\\epsilon_{3, 0}\\\epsilon_{4, 0}\end{matrix}\right\]
</snippet></ROW><ROW><id>21035681</id><snippet>import os
os.system("""cd ../linux-3.11/; cp arch/x86/configs/byt_32_tz_emgd_defconfig .config; make ARCH=i386 oldconfig; make ARCH=i386 -j 4""")
</snippet></ROW><ROW><id>21035681</id><snippet>subprocess</snippet></ROW><ROW><id>21035681</id><snippet>script.ipy</snippet></ROW><ROW><id>21035681</id><snippet>#!/usr/bin/ipython</snippet></ROW><ROW><id>21035681</id><snippet>!</snippet></ROW><ROW><id>21035719</id><snippet>TIME_ZONE</snippet></ROW><ROW><id>21035719</id><snippet>-06:00</snippet></ROW><ROW><id>21035719</id><snippet>USE_TZ</snippet></ROW><ROW><id>21035719</id><snippet>True</snippet></ROW><ROW><id>21035861</id><snippet>data['id'] = ...</snippet></ROW><ROW><id>21035861</id><snippet>import json

with open('data.json', 'r+') as f:
    data = json.load(f)
    data['id'] = 134 # &lt;--- add `id` value.
    f.seek(0)        # &lt;--- should reset file position to the beginning.
    json.dump(data, f, indent=4)
</snippet></ROW><ROW><id>21036188</id><snippet>a = []
b = [a, a]
</snippet></ROW><ROW><id>21036188</id><snippet>&gt;&gt;&gt; a = []
&gt;&gt;&gt; b = [a, a]
&gt;&gt;&gt; b[0].append(1)
&gt;&gt;&gt; b
[[1], [1]]
</snippet></ROW><ROW><id>21036188</id><snippet>*</snippet></ROW><ROW><id>21036188</id><snippet>a = [[None]*7]*7
</snippet></ROW><ROW><id>21036188</id><snippet>&gt;&gt;&gt; a = [[None]*7]*7
&gt;&gt;&gt; a
[[None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None]]
&gt;&gt;&gt; a[0][1] = 3
&gt;&gt;&gt; a
[[None, 3, None, None, None, None, None], [None, 3, None, None, None, None, None], [None, 3, None, None, None, None, None], [None, 3, None, None, None, None, None], [None, 3, None, None, None, None, None], [None, 3, None, None, None, None, None], [None, 3, None, None, None, None, None]]
</snippet></ROW><ROW><id>21036188</id><snippet>*</snippet></ROW><ROW><id>21036188</id><snippet>None</snippet></ROW><ROW><id>21036188</id><snippet>a = [[None]*7 for _ in range(7)]
</snippet></ROW><ROW><id>21036188</id><snippet>&gt;&gt;&gt; a = [[None]*7 for _ in range(7)]
&gt;&gt;&gt; a[0][1] = 3
&gt;&gt;&gt; a
[[None, 3, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None], [None, None, None, None, None, None, None]]
</snippet></ROW><ROW><id>21036236</id><snippet>globals</snippet></ROW><ROW><id>21036236</id><snippet>&gt;&gt;&gt; class A(object):
...     def say_hi(self):
...         print('hi, I am A')
...
&gt;&gt;&gt; class B(object):
...     def say_hi(self):
...         print('hi, I am B')
...
&gt;&gt;&gt; class F(object):
...     def __init__(self, name):
...         self.name = name
...     def create(self):
...         return globals()[self.name]()
...
&gt;&gt;&gt;
&gt;&gt;&gt; f = F('B')
&gt;&gt;&gt; b = f.create()
&gt;&gt;&gt; b.say_hi()
hi, I am B
</snippet></ROW><ROW><id>21036308</id><snippet>sys.modules</snippet></ROW><ROW><id>21036308</id><snippet>from types import ModuleType

# dummy module
module = sys.modules['mylib.dummy'] = ModuleType('dummy')

if mode == 'FOO':
    module.TextEdit = FooTextEdit
    module.LineEdit = FooLineEdit
    module.PushButton = FooPushButton
elif mode == 'BAR':
    module.TextEdit = BarTextEdit
    module.LineEdit = BarLineEdit
    module.PushButton = BarPushButton
else:
    module.TextEdit = QTextEdit
    module.LineEdit = QLineEdit
    module.PushButton = QPushButton

# loadUi/loadUiType will add the following import line:
# from mylib.dummy import TextEdit, LineEdit, PushButton
WidgetUI = uic.loadUiType('mywidget.ui'))[0]
ui = WidgetUI()
</snippet></ROW><ROW><id>21036469</id><snippet>ax2.set_xticks(tick_locations[:])
ax2.set_xticklabels(tick_labels[1:])
</snippet></ROW><ROW><id>21036469</id><snippet>ax2.set_xlim</snippet></ROW><ROW><id>21036469</id><snippet>ax2.set_xlim(tick_locations[0], tick_locations[-1])
ax2.set_xticks(tick_locations[1:]) #1, not 0
ax2.set_xticklabels(tick_labels[1:])
</snippet></ROW><ROW><id>21036651</id><snippet>tracks</snippet></ROW><ROW><id>21036651</id><snippet>for value in json_dict["tracks"]:
    if value["name"] == track_title:
</snippet></ROW><ROW><id>21036651</id><snippet>match found
</snippet></ROW><ROW><id>21036741</id><snippet>import numpy as np

data = [[361, 4, 1],
        [259, 3, 2],
        [361, 2, 3],
        [259, 1, 4]]
data = np.array(data)
persons = data[:,0]
testIds = data[:,1]
sortKey = persons + 1.0*testIds / max(testIds)

data = data[np.argsort(sortKey)]

#If this is not the same for everyone this will not be possible with numpy
testsPerPerson = np.count_nonzero(data[:,0][data[:,0] == data[0,0]])

scores = data[:,-1].reshape(testsPerPerson, data.shape[0]/testsPerPerson)
</snippet></ROW><ROW><id>21036741</id><snippet>In [248]: data # After sorting
Out[248]:
array([[259,   1,   4],
       [259,   3,   2],
       [361,   2,   3],
       [361,   4,   1]])

In [247]: scores
Out[247]:
array([[4, 2],
       [3, 1]])
</snippet></ROW><ROW><id>21036807</id><snippet>from django.views.decorators.csrf import csrf_exempt

@csrf_exempt
def index(request):
    # loop through keys
    for key in request.POST:
        value = request.POST[key]
    # loop through keys and values
    output =""
    for key, value in request.POST.iteritems():
    output= output + str(key) + " " + str(value) + "&lt;br&gt;"

    return HttpResponse(output)
</snippet></ROW><ROW><id>21036827</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>21036827</id><snippet>timedelta</snippet></ROW><ROW><id>21036827</id><snippet>import datetime
stop_time = datetime.datetime.now() + datetime.timedelta(hours=1)

# ...

# in relevant function ...
if datetime.datetime.now() &gt; stop_time:
    stop_streaming()
</snippet></ROW><ROW><id>21036827</id><snippet>TwythonStreamer</snippet></ROW><ROW><id>21036827</id><snippet>class MyStreamer(TwythonStreamer):

    # the init function is called when you create instance of class
    def __init__(self):
        self.stop_time = datetime.datetime.now() + datetime.timedelta(hours=1)

    # ...

    def on_success(self, data):
        if datetime.datetime.now() &gt; self.stop_time:
            raise Exception("Time expired")

        # ...
</snippet></ROW><ROW><id>21037126</id><snippet>axis</snippet></ROW><ROW><id>21037126</id><snippet>numpy.linalg.norm</snippet></ROW><ROW><id>21037126</id><snippet>import numpy
x = numpy.array([[ -9.03525007,   7.45325017,  33.34074879],
                 [ -6.63700008,   5.13299996,  31.66075039],
                 [ -5.12724996,   8.25149989,  30.92599964],
                 [ -5.12724996,   8.25149989,  30.92599964]])
print numpy.linalg.norm(x, axis=1)

=&gt; 

array([ 35.33825423,  32.75363451,  32.41594355,  32.41594355])
</snippet></ROW><ROW><id>21037220</id><snippet>for (var i = 0; i &lt; resend_data['tags'].length; i++) {                          
   dic_tags[resend_data['tags'][i]] = $("#_id_"+resend_data['tags'][i]).val()

};

data= {'creation_tags': dic_tags, 'description': '', 'title': '', 'pop_flag': true, 'tags': resend_data['tags']}
</snippet></ROW><ROW><id>21037220</id><snippet>tag_dict = {}

for tag in request.POST.getlist('tags[]'):
    tag_dict[tag] = request.POST.getlist('creation_tags['+ tag +']')

print tag_dict
</snippet></ROW><ROW><id>21037220</id><snippet>{'e':'1','d':'1'}
</snippet></ROW><ROW><id>21037531</id><snippet>'Connection': 'keep-alive'
'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_1) AppleWebKit/537.36 (KHTML,     like Gecko) Chrome/31.0.1650.63 Safari/537.36'
'Cookie': 'JSESSIONID=36DAD704C8E6A4EF4B13BCAA56217961; ziplocale=en; zippop=2;'
</snippet></ROW><ROW><id>21037563</id><snippet>- url: .*
  script: main.app
</snippet></ROW><ROW><id>21037563</id><snippet>main.app</snippet></ROW><ROW><id>21037563</id><snippet>main.py</snippet></ROW><ROW><id>21037563</id><snippet>app.yaml</snippet></ROW><ROW><id>21037563</id><snippet>handlers:
- url: /hello
  script: hello.app

- url: .*
  script: main.app
</snippet></ROW><ROW><id>21037636</id><snippet>collections.Counter</snippet></ROW><ROW><id>21037636</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; import collections
&gt;&gt;&gt;
&gt;&gt;&gt; foo = [[('a',),('a','b'),('a','b','c'),('b','c'),('c',)],[('a',),('a','b')]]
&gt;&gt;&gt; for x, cnt in collections.Counter(itertools.chain.from_iterable(foo)).most_common():
...     print(x, cnt)
...
('a',) 2
('a', 'b') 2
('a', 'b', 'c') 1
('c',) 1
('b', 'c') 1
</snippet></ROW><ROW><id>21037897</id><snippet>inspect.getargspec</snippet></ROW><ROW><id>21037897</id><snippet>inspect.getfullargspec</snippet></ROW><ROW><id>21037897</id><snippet>import inspect

def func_has_positional_args(func):
    spec = inspect.getfullargspec(func)
    return bool(spec.varargs) # varargs: name of the * argument or None
def func_has_keyword_args(func):
    spec = inspect.getfullargspec(func)
    return bool(spec.varkw)   # varkw: name of the ** argument or None
</snippet></ROW><ROW><id>21037897</id><snippet>&gt;&gt;&gt; def test1(a, b, *args, **kwargs): pass
...
&gt;&gt;&gt; def test2(a, b): pass
...
&gt;&gt;&gt; def test3(a, b, *args): pass
...
&gt;&gt;&gt; func_has_positional_args(test1)
True
&gt;&gt;&gt; func_has_keyword_args(test1)
True
&gt;&gt;&gt; func_has_positional_args(test2)
False
&gt;&gt;&gt; func_has_keyword_args(test2)
False
&gt;&gt;&gt; func_has_positional_args(test3)
True
&gt;&gt;&gt; func_has_keyword_args(test3)
False
</snippet></ROW><ROW><id>21038035</id><snippet>FileIsTooBig</snippet></ROW><ROW><id>21038147</id><snippet>for i in range(10):
    def f(x):
        return x*2
    y = f(i)
</snippet></ROW><ROW><id>21038147</id><snippet>def f(x):
    return x*2

for i in range(10):
    y = f(i)
</snippet></ROW><ROW><id>21038147</id><snippet>p</snippet></ROW><ROW><id>21038147</id><snippet>p = re.compile(r"QChar\((0x[a-fA-F0-9]*)\)")

def qcharToUnicode(s):
    return p.sub(lambda m: '"' + chr(int(m.group(1),16)) + '"', s)
</snippet></ROW><ROW><id>21038147</id><snippet>def qcharToUnicode(s, p=re.compile(r"QChar\((0x[a-fA-F0-9]*)\)")):
    return p.sub(lambda m: '"' + chr(int(m.group(1),16)) + '"', s)
</snippet></ROW><ROW><id>21038147</id><snippet>lambda</snippet></ROW><ROW><id>21038147</id><snippet>def</snippet></ROW><ROW><id>21038147</id><snippet>def</snippet></ROW><ROW><id>21038564</id><snippet>&gt;&gt;&gt; l = ['8C', '2C', 'QC', '5C', '7C', '3C', '6D', 'TD', 'TH', 'AS', 
...  'QS', 'TS', 'JS', 'KS']
&gt;&gt;&gt; my_dict = {}
&gt;&gt;&gt; for x in l:
...     my_dict.setdefault(x[-1],[]).append(x)
... 
&gt;&gt;&gt; my_dict
{'S': ['AS', 'QS', 'TS', 'JS', 'KS'], 'H': ['TH'], 'C': ['8C', '2C', 'QC', '5C', '7C', '3C'], 'D': ['6D', 'TD']}
</snippet></ROW><ROW><id>21039041</id><snippet>&gt;&gt;&gt; fields = [{'name':'xxx', 'age':24, 'location':'city_name'},
...           {'name':'yyy', 'age':24, 'location':'city_name'}]
&gt;&gt;&gt; for field in fields:
...     field['location'] = 'loc'
...
&gt;&gt;&gt; fields
[{'age': 24, 'name': 'xxx', 'location': 'loc'}, {'age': 24, 'name': 'yyy', 'location': 'loc'}]
</snippet></ROW><ROW><id>21039041</id><snippet>zip</snippet></ROW><ROW><id>21039041</id><snippet>&gt;&gt;&gt; for field, loc in zip(fields, ['here', 'there']):
...     field['location'] = loc
...
&gt;&gt;&gt; fields
[{'age': 24, 'name': 'xxx', 'location': 'here'}, {'age': 24, 'name': 'yyy', 'location': 'there'}]
</snippet></ROW><ROW><id>21039058</id><snippet>&gt;&gt;&gt; x = 'fruit'
&gt;&gt;&gt; getattr(x, '__str__')()
'fruit'
&gt;&gt;&gt; getattr(x, '__str__')() == 'fruit'
True
</snippet></ROW><ROW><id>21039185</id><snippet>database_value = json.dumps(python_value)
</snippet></ROW><ROW><id>21039185</id><snippet>python_value = json.loads(database_value)
</snippet></ROW><ROW><id>21039185</id><snippet>&gt;&gt;&gt; print json.dumps({'foo': 'bar'})
{"foo": "bar"}
&gt;&gt;&gt; print json.dumps('This is a "string" with quotes!')
"This is a \"string\" with quotes!"
</snippet></ROW><ROW><id>21039448</id><snippet>1</snippet></ROW><ROW><id>21039448</id><snippet>&gt;&gt;&gt; '\1'
'\x01'
&gt;&gt;&gt; chr(01)
'\x01'
&gt;&gt;&gt; '\101'
'A'
&gt;&gt;&gt; chr(0101)
'A'
</snippet></ROW><ROW><id>21039448</id><snippet>&gt;&gt;&gt; '(.)\1+'
'(.)\x01+'
&gt;&gt;&gt; r'(.)\1+'  #Note the `r`
'(.)\\1+'
</snippet></ROW><ROW><id>21039486</id><snippet>itertools.izip()</snippet></ROW><ROW><id>21039486</id><snippet>from itertools import izip

with open('lognew.txt', 'r') as f:
    for line1, line2 in izip(f, f):
        print line1.rstrip('\n') + line2
</snippet></ROW><ROW><id>21039486</id><snippet>izip()</snippet></ROW><ROW><id>21039486</id><snippet>f</snippet></ROW><ROW><id>21039486</id><snippet>f</snippet></ROW><ROW><id>21039486</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>21039486</id><snippet>from itertools import izip_longest

with open('lognew.txt', 'r') as f:
    for line1, line2 in izip_longest(f, f, fillvalue='\n'):
        print line1.rstrip('\n') + line2
</snippet></ROW><ROW><id>21039486</id><snippet>fillvalue='\n'</snippet></ROW><ROW><id>21039486</id><snippet>itertools.izip()</snippet></ROW><ROW><id>21039486</id><snippet>zip()</snippet></ROW><ROW><id>21039486</id><snippet>itertools.izip_longest()</snippet></ROW><ROW><id>21039486</id><snippet>itertools.zip_longest()</snippet></ROW><ROW><id>21039536</id><snippet>track_title</snippet></ROW><ROW><id>21039536</id><snippet>w</snippet></ROW><ROW><id>21039536</id><snippet>num_removed, json_dict, track_title, w</snippet></ROW><ROW><id>21039536</id><snippet>import requests
import json

# initial message
message = "if i can't let it go out of my mind"

# split into list
split_message = message.split()

def decrementList(words):
    for w in [ words ] + [ words[:-x] for x in range(1, len(words)) ]:
        url = 'http://ws.spotify.com/search/1/track.json?q='
        request = requests.get(url + "%20".join(w))

        json_dict = json.loads(request.content)
        num_results = json_dict['info']['num_results']

        if num_results &gt; 0:
            num_removed = len(words) - len(w)

            track_title = ' '.join(w)

            for track in json_dict["tracks"]:
                if track["name"].lower().startswith(track_title.lower()):
                    yield num_removed, track, track["name"], w

def quote(s):
   return '"' + ('%r' % ("'"+s.encode('utf-8')))[2:]

for num_words_removed, track, track_name, w in decrementList(split_message):
   print '%2d %s by %s (track %d on %s from %s)' % (
     num_words_removed,
     quote(track_name),
     quote(track['artists'][0]['name']),
     int(track['track-number']),
     quote(track['album']['name']),
     track['album']['released'])
</snippet></ROW><ROW><id>21040143</id><snippet>subplots</snippet></ROW><ROW><id>21040143</id><snippet>wspace=0</snippet></ROW><ROW><id>21040143</id><snippet>import matplotlib.pylab as plt

dims = 4
fig, axes = plt.subplots(1, dims-1 + 1, sharey=False)

plt.subplots_adjust(wspace=0)

ax1 = axes[0]
pos = ax1.get_position()
ax1.set_position(pos.translated(tx = -0.1,ty=0))
</snippet></ROW><ROW><id>21040143</id><snippet>wspace=0</snippet></ROW><ROW><id>21040143</id><snippet>tx=-0.1</snippet></ROW><ROW><id>21040156</id><snippet>&gt;&gt;&gt; example = [[1, 2], [1, 5], [1, 8], [2, 1], [2, 9], [2,5]]
&gt;&gt;&gt; n = 5
&gt;&gt;&gt; [first for first, second in example if second == n]
[1, 2]
</snippet></ROW><ROW><id>21040222</id><snippet>python yourprogram.py
if [[ $? != 0 ]] ; then 
   dosomething
fi
</snippet></ROW></DATA>