<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>1676413</id><snippet>extra_link_args</snippet></ROW><ROW><id>1676413</id><snippet>extra_compile_args</snippet></ROW><ROW><id>1676413</id><snippet>extra_link_args</snippet></ROW><ROW><id>1676715</id><snippet>subprocess</snippet></ROW><ROW><id>1676755</id><snippet>#egg=packagename</snippet></ROW><ROW><id>1676755</id><snippet>http://github.com/sciyoshi/pyfacebook/tarball/master#egg=pyfacebook
</snippet></ROW><ROW><id>1676755</id><snippet>[buildout]
parts = whatever
find-links =
    http://github.com/sciyoshi/pyfacebook/tarball/master#egg=pyfacebook
eggs = pyfacebook
</snippet></ROW><ROW><id>1676860</id><snippet>import sys
current_module = sys.modules[__name__]
</snippet></ROW><ROW><id>1676962</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>1676962</id><snippet>/usr/local/bin/</snippet></ROW><ROW><id>1676962</id><snippet>/usr/local/bin/python2.6</snippet></ROW><ROW><id>1676962</id><snippet>python2.6</snippet></ROW><ROW><id>1676962</id><snippet>json</snippet></ROW><ROW><id>1676962</id><snippet>#!/usr/bin/env python2.6
</snippet></ROW><ROW><id>1676962</id><snippet>$PATH</snippet></ROW><ROW><id>1676962</id><snippet>python</snippet></ROW><ROW><id>1676962</id><snippet>python2.6</snippet></ROW><ROW><id>1676962</id><snippet>.bash_profile</snippet></ROW><ROW><id>1676962</id><snippet>.profile</snippet></ROW><ROW><id>1676962</id><snippet>.bash_profile.pysave</snippet></ROW><ROW><id>1676962</id><snippet>.profile.pysave</snippet></ROW><ROW><id>1677064</id><snippet>forms.DateField</snippet></ROW><ROW><id>1677064</id><snippet>input_formats</snippet></ROW><ROW><id>1677064</id><snippet>class MyForm(forms.Form):
    start_date = forms.DateField(input_formats=['%d/%m/%Y'])
</snippet></ROW><ROW><id>1677671</id><snippet>classmethod</snippet></ROW><ROW><id>1677671</id><snippet>__get__</snippet></ROW><ROW><id>1677671</id><snippet>self</snippet></ROW><ROW><id>1677671</id><snippet>instance</snippet></ROW><ROW><id>1677671</id><snippet>instance type</snippet></ROW><ROW><id>1677671</id><snippet>A</snippet></ROW><ROW><id>1677671</id><snippet>__get__</snippet></ROW><ROW><id>1677671</id><snippet>A</snippet></ROW><ROW><id>1677671</id><snippet>class Foo(object):
     def bar(self, arg1, arg2):
         print arg1, arg2

foo = Foo()
# this:
foo.bar(1,2)  # prints '1 2'
# does about the same thing as this:
Foo.__dict__['bar'].__get__(foo, type(foo))(1,2)  # prints '1 2'
</snippet></ROW><ROW><id>1677671</id><snippet>classmethod</snippet></ROW><ROW><id>1677671</id><snippet>__get__</snippet></ROW><ROW><id>1677671</id><snippet>__get__</snippet></ROW><ROW><id>1677671</id><snippet>instance</snippet></ROW><ROW><id>1677671</id><snippet>instance_type</snippet></ROW><ROW><id>1677671</id><snippet>__get__</snippet></ROW><ROW><id>1677671</id><snippet>In [14]: def foo(cls):
   ....:     print cls
   ....:     
In [15]: classmethod(foo)
Out[15]: &lt;classmethod object at 0x756e50&gt;
In [16]: cm = classmethod(foo)
In [17]: cm.__get__(None, dict)
Out[17]: &lt;bound method type.foo of &lt;type 'dict'&gt;&gt;
In [18]: cm.__get__(None, dict)()
&lt;type 'dict'&gt;
In [19]: cm.__get__({}, dict)
Out[19]: &lt;bound method type.foo of &lt;type 'dict'&gt;&gt;
In [20]: cm.__get__({}, dict)()
&lt;type 'dict'&gt;
In [21]: cm.__get__("Some bogus unused string", dict)()
&lt;type 'dict'&gt;
</snippet></ROW><ROW><id>1677671</id><snippet>classmethod</snippet></ROW><ROW><id>1677671</id><snippet>In [29]: cm.__get__(None, dict).im_func.__name__
Out[29]: 'foo'
</snippet></ROW><ROW><id>1677758</id><snippet>python</snippet></ROW><ROW><id>1677758</id><snippet>sqlite3</snippet></ROW><ROW><id>1677758</id><snippet>sqlite3</snippet></ROW><ROW><id>1677758</id><snippet>sqlite3</snippet></ROW><ROW><id>1677770</id><snippet>is</snippet></ROW><ROW><id>1677770</id><snippet>==</snippet></ROW><ROW><id>1677770</id><snippet># work for == as well as is
class START(object): pass
def START(): pass
class Whatever(object): pass
START = Whatever()

# if you don't care for "accidental" == and only check with `is`
START = []
START = {}
START = set()
</snippet></ROW><ROW><id>1677770</id><snippet>==</snippet></ROW><ROW><id>1677770</id><snippet>is</snippet></ROW><ROW><id>1677770</id><snippet>def</snippet></ROW><ROW><id>1677774</id><snippet>WrapperClass</snippet></ROW><ROW><id>1677774</id><snippet>__get__</snippet></ROW><ROW><id>1677774</id><snippet>__set__</snippet></ROW><ROW><id>1677776</id><snippet>def output(*items, end="\n", file=sys.stdout):
    pass
</snippet></ROW><ROW><id>1677776</id><snippet>print</snippet></ROW><ROW><id>1678404</id><snippet>$sum = array();
foreach(range(0, count($a), 4) as $i)
   $sum []= array_sum(array_slice($a, $i, 4));
</snippet></ROW><ROW><id>1678404</id><snippet>$sum = array_map('array_sum', array_chunk($a, 4));
</snippet></ROW><ROW><id>1679406</id><snippet>key</snippet></ROW><ROW><id>1679406</id><snippet>value</snippet></ROW><ROW><id>1679406</id><snippet>aKey</snippet></ROW><ROW><id>1679406</id><snippet>"key"</snippet></ROW><ROW><id>1679406</id><snippet>key</snippet></ROW><ROW><id>1679406</id><snippet>temp</snippet></ROW><ROW><id>1679406</id><snippet>for key, value in dict.iteritems():
    temp = [key,value]
    dictlist.append(temp)
</snippet></ROW><ROW><id>1679406</id><snippet>key</snippet></ROW><ROW><id>1679406</id><snippet>value</snippet></ROW><ROW><id>1679406</id><snippet>dictlist.append([key,value])</snippet></ROW><ROW><id>1679406</id><snippet>dict.items()</snippet></ROW><ROW><id>1679455</id><snippet>ax = subplot(111)
ax.yaxis.set_ticks([0, 2, 4, 8])
imshow(data)
</snippet></ROW><ROW><id>1679455</id><snippet>a</snippet></ROW><ROW><id>1679455</id><snippet>class arr(object):
    @staticmethod
    def mylog2(x):
        lx = 0
        while x &gt; 1:
            x &gt;&gt;= 1
            lx += 1
        return lx
    def __init__(self, array):
        self.array = array
    def __getitem__(self, index):
        return self.array[arr.mylog2(index+1)]
    def __len__(self):
        return 1 &lt;&lt; len(self.array)
</snippet></ROW><ROW><id>1679455</id><snippet>mylog2</snippet></ROW><ROW><id>1679455</id><snippet>b = arr(a)
</snippet></ROW><ROW><id>1679455</id><snippet>ax = subplot(111)
ax.yaxis.set_ticks([16, 8, 4, 2, 1, 0])
axis([-0.5, 4.5, 31.5, 0.5])
imshow(b, interpolation="nearest")
</snippet></ROW><ROW><id>1679895</id><snippet>if sys.platform == 'linux2':
    subprocess.call(["xdg-open", file])
else:
    os.startfile(file)
</snippet></ROW><ROW><id>1680540</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; a=list()
&gt;&gt;&gt; type(a)
&lt;type 'list'&gt;
&gt;&gt;&gt; sys.getsizeof(a)
36
&gt;&gt;&gt; b=1
&gt;&gt;&gt; type(b)
&lt;type 'int'&gt;
&gt;&gt;&gt; sys.getsizeof(b)
12
</snippet></ROW><ROW><id>1680540</id><snippet>&gt;&gt;&gt; help(sys.getsizeof)
Help on built-in function getsizeof in module sys:

getsizeof(...)
    getsizeof(object, default) -&gt; int

    Return the size of object in bytes.
</snippet></ROW><ROW><id>1680555</id><snippet>class a:
    def __init__(self):
        self.list = []
</snippet></ROW><ROW><id>1680555</id><snippet>__init__</snippet></ROW><ROW><id>1680917</id><snippet>import gtk
gtk.gdk.notify_startup_complete()
</snippet></ROW><ROW><id>1681086</id><snippet>main</snippet></ROW><ROW><id>1681086</id><snippet>main</snippet></ROW><ROW><id>1681086</id><snippet>__main__</snippet></ROW><ROW><id>1681086</id><snippet>MyException</snippet></ROW><ROW><id>1681244</id><snippet>os.environ</snippet></ROW><ROW><id>1681244</id><snippet>os.pathsep</snippet></ROW><ROW><id>1681244</id><snippet>os.environ["PATH"] += os.pathsep + path
</snippet></ROW><ROW><id>1681244</id><snippet>os.environ["PATH"] += os.pathsep + os.pathsep.join(pathlist)
</snippet></ROW><ROW><id>1681244</id><snippet>os.path.join</snippet></ROW><ROW><id>1681286</id><snippet>itertools.product</snippet></ROW><ROW><id>1681286</id><snippet>def product(*args, **kwds):
    # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
    # product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
    pools = map(tuple, args) * kwds.get('repeat', 1)
    result = [[]]
    for pool in pools:
        result = [x+[y] for x in result for y in pool]
    for prod in result:
        yield tuple(prod)
</snippet></ROW><ROW><id>1681492</id><snippet>__init__</snippet></ROW><ROW><id>1681492</id><snippet>__init__</snippet></ROW><ROW><id>1681492</id><snippet>_init</snippet></ROW><ROW><id>1681492</id><snippet>__init__.py</snippet></ROW><ROW><id>1681492</id><snippet>from _init import *</snippet></ROW><ROW><id>1681492</id><snippet>from ... import *</snippet></ROW><ROW><id>1681587</id><snippet>assert isinstance(b, A)</snippet></ROW><ROW><id>1681587</id><snippet>if 0: b=A()
</snippet></ROW><ROW><id>1681600</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; today = datetime.datetime.now()
&gt;&gt;&gt; insummer = datetime.datetime(2009,8,15,10,0,0)
&gt;&gt;&gt; from pytz import reference
&gt;&gt;&gt; localtime = reference.LocalTimezone()
&gt;&gt;&gt; localtime.tzname(today)
'PST'
&gt;&gt;&gt; localtime.tzname(insummer)
'PDT'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1682509</id><snippet>try:
    import win32
    def kill(param):
    	# the code from S.Lotts link
except ImportError:
    def kill(param):
    	# the unix way
</snippet></ROW><ROW><id>1682585</id><snippet>import collections

data = '''name: john, jane
car: db9, m5
food: pizza, lasagne
'''

personal_list = collections.defaultdict(dict)

for line in data.splitlines():
  key, _, info = line.partition(':')
  infos = info.split(',')
  key = key.strip().title()
  for i, item in enumerate(infos):
    item = item.strip().title()
    personal_list[i][key] = item

for i in personal_list:
  print personal_list[i]
</snippet></ROW><ROW><id>1682585</id><snippet>B</snippet></ROW><ROW><id>1682585</id><snippet>DB9</snippet></ROW><ROW><id>1682601</id><snippet>None</snippet></ROW><ROW><id>1682601</id><snippet>pop</snippet></ROW><ROW><id>1682601</id><snippet>append</snippet></ROW><ROW><id>1682651</id><snippet>setUp</snippet></ROW><ROW><id>1682651</id><snippet>def fake_command(cls, host, cmd, sh=None):
  pass  # whatever you want in here
self.save_remote_command = somemodule.RemoteCommand.remote_command
somemodule.RemoteCommand.remote_command = classmethod(fake_command)
</snippet></ROW><ROW><id>1682651</id><snippet>tearDown</snippet></ROW><ROW><id>1682651</id><snippet>setUp</snippet></ROW><ROW><id>1682651</id><snippet>somemodule.RemoteCommand.remote_command = self.save_remote_command
</snippet></ROW><ROW><id>1682651</id><snippet>def __init__(self, ...):
   ...
   self.remote_command = RemoteCommand.remote_command
   ...

def set_remote_command_function(self, thefunction):
   self.remote_command = thefunction

def get_interface_params_by_mac(self, host, mac_unified):
        lines = self.remote_command(host, cls.IFCONFIG)
</snippet></ROW><ROW><id>1682651</id><snippet>set_remote_command_function</snippet></ROW><ROW><id>1682712</id><snippet>alist = []
anoth = [alist]
alist.append(anoth)
</snippet></ROW><ROW><id>1682712</id><snippet>class Child(object): pass

class Parent(object): pass

c = Child()
p = Parent()
c.parent = p
p.child = c
</snippet></ROW><ROW><id>1683405</id><snippet>import httplib2
http = httplib2.Http()

f = open('Tea.rdf')
body = f.read()
url = 'http://localhost:8080/openrdf-sesame/repositories/rep/statements'
headers = {'Content-type': 'application/rdf+xml;charset=utf-8'}
resp, content = http.request(url, 'PUT', body=body, headers=headers)
# resp will contain headers and status, content the response body
</snippet></ROW><ROW><id>1683591</id><snippet>height_field=80</snippet></ROW><ROW><id>1683591</id><snippet>width_field=80</snippet></ROW><ROW><id>1683900</id><snippet>import operator
def sortByColumn(bigList, *args)
    bigList.sort(key=operator.itemgetter(*args)) # sorts the list in place
</snippet></ROW><ROW><id>1684254</id><snippet>f = open("myfile.txt", "w") # Use "a" instead of "w" to append to file
</snippet></ROW><ROW><id>1684254</id><snippet>print &gt;&gt; f, '&gt;', alignment.title
print &gt;&gt; f, hsp.sbjct
</snippet></ROW><ROW><id>1684254</id><snippet>f.write('&gt; %s\n' % (alignment.title,))
f.write('%s\n' % (hsp.sbjct,))
</snippet></ROW><ROW><id>1684254</id><snippet>f.close()
</snippet></ROW><ROW><id>1684265</id><snippet>USE_ETAGS = True</snippet></ROW><ROW><id>1684265</id><snippet>condition</snippet></ROW><ROW><id>1684280</id><snippet>import a
x = a.ABC123()
</snippet></ROW><ROW><id>1684280</id><snippet>from a import ABC123
x = ABC123()
</snippet></ROW><ROW><id>1684280</id><snippet>a.py</snippet></ROW><ROW><id>1684280</id><snippet>b.py</snippet></ROW><ROW><id>1684280</id><snippet>a.py</snippet></ROW><ROW><id>1684280</id><snippet>sys.path</snippet></ROW><ROW><id>1684280</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>1684488</id><snippet>dir(obj) == sorted(obj.__dict__.keys() + dir(obj.__class__))
</snippet></ROW><ROW><id>1684488</id><snippet>class Wizard(object):
    def __init__(self):
        self.mana = 0

    def __dir__(self):
        natdir = set(self.__dict__.keys() + dir(self.__class__))
        if self.mana &lt;= 0:
            natdir.remove("domagic")
        return list(natdir)

    def addmana(self):
        self.mana += 1

    def domagic(self):
        if self.mana &lt;= 0:
            raise NotEnoughMana()
        print "Abracadabra!"
        self.mana -= 1
</snippet></ROW><ROW><id>1684488</id><snippet>&gt;&gt;&gt; wiz = Wizard()

&gt;&gt;&gt; [x for x in dir(wiz) if not x.startswith("_")]
['addmana', 'mana']

&gt;&gt;&gt; wiz.addmana()

&gt;&gt;&gt; [x for x in dir(wiz) if not x.startswith("_")]
['addmana', 'domagic', 'mana']

&gt;&gt;&gt; wiz.domagic()
Abracadabra!

&gt;&gt;&gt; [x for x in dir(wiz) if not x.startswith("_")]
['addmana', 'mana']

&gt;&gt;&gt; wiz.domagic()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 13, in domagic
__main__.NotEnoughMana
</snippet></ROW><ROW><id>1684851</id><snippet>class C(object):
    def __init__(self):
        self._x = None

    @property
    def x(self):
        """I'm the 'x' property."""
        return self._x

    @x.setter
    def x(self, value):
        self._x = value
</snippet></ROW><ROW><id>1684853</id><snippet>for blast_record in blast_records
</snippet></ROW><ROW><id>1684853</id><snippet>from Bio.Blast import NCBIXM
blast_records = NCBIXML.parse(result_handle)

save_file = open("/Users/jonbra/Desktop/my_fasta_seq.fasta", 'w')

for blast_record in blast_records:
  for alignment in blast_record.alignments:
      for hsp in alignment.hsps:
            save_file.write('&gt;%s\n' % (alignment.title,))
  #here possibly to output something to file, between each blast_record
save_file.close()
</snippet></ROW><ROW><id>1684954</id><snippet>// MethodMissingDemo.cs
using System;
using IronRuby;

class Program
{
	static void Main()
	{
		var rubyEngine = Ruby.CreateEngine();
		rubyEngine.ExecuteFile("method_missing_demo.rb");
		dynamic globals = rubyEngine.Runtime.Globals;

		dynamic methodMissingDemo = globals.MethodMissingDemo.@new();

		Console.WriteLine(methodMissingDemo.HelloDynamicWorld());

		methodMissingDemo.print_all(args);
	}
}

# method_missing_demo.rb
class MethodMissingDemo
  def print_all(args)
    args.map {|arg| puts arg}
  end

  def method_missing(name, *args)
    name.to_s.gsub(/([[:lower:]\d])([[:upper:]])/,'\1 \2')
  end
end
</snippet></ROW><ROW><id>1685166</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>1685166</id><snippet>cwd</snippet></ROW><ROW><id>1685166</id><snippet>'d:\\test\\local'</snippet></ROW><ROW><id>1685166</id><snippet>r'd:\test\local'</snippet></ROW><ROW><id>1685166</id><snippet>\t</snippet></ROW><ROW><id>1685166</id><snippet>subprocess.Popen(r'c:\mytool\tool.exe', cwd=r'd:\test\local')
</snippet></ROW><ROW><id>1685263</id><snippet>timeit.py</snippet></ROW><ROW><id>1685263</id><snippet>if sys.platform == "win32":
    # On Windows, the best timer is time.clock()
    default_timer = time.clock
else:
    # On most other platforms the best timer is time.time()
    default_timer = time.time
</snippet></ROW><ROW><id>1685263</id><snippet>def inner(_it, _timer):
    #Your setup code
    %(setup)s
    _t0 = _timer()
    for _i in _it:
        #The code you want to time
        %(stmt)s
    _t1 = _timer()
    return _t1 - _t0
</snippet></ROW><ROW><id>1685412</id><snippet>__getitem__</snippet></ROW><ROW><id>1685412</id><snippet>class matrix:
    def __getitem__(self, pos):
        x,y = pos
        return "fetching %s, %s" % (x, y)

m = matrix()
print m[1,2]
</snippet></ROW><ROW><id>1685412</id><snippet>fetching 1, 2
</snippet></ROW><ROW><id>1685493</id><snippet>repr</snippet></ROW><ROW><id>1685493</id><snippet>eval</snippet></ROW><ROW><id>1685493</id><snippet>exec</snippet></ROW><ROW><id>1685493</id><snippet>eval</snippet></ROW><ROW><id>1685493</id><snippet>cPickle</snippet></ROW><ROW><id>1685493</id><snippet>-1</snippet></ROW><ROW><id>1685493</id><snippet>$ python -c 'import cPickle; d=dict.fromkeys(range(99), "banana"); print len(repr(d))'
1376
$ python -c 'import cPickle; d=dict.fromkeys(range(99), "banana"); print len(cPickle.dumps(d,-1))'
412
</snippet></ROW><ROW><id>1685493</id><snippet>$ python -mtimeit -s'import cPickle; d=dict.fromkeys(range(99), "chocolate")' 'eval(repr(d))'
1000 loops, best of 3: 706 usec per loop
$ python -mtimeit -s'import cPickle; d=dict.fromkeys(range(99), "chocolate")' 'cPickle.loads(cPickle.dumps(d, -1))'
10000 loops, best of 3: 70.2 usec per loop
</snippet></ROW><ROW><id>1685493</id><snippet>$ python -c'def f(): pass
d={23:f}
print d == eval(repr(d))'
Traceback (most recent call last):
  File "&lt;string&gt;", line 3, in &lt;module&gt;
  File "&lt;string&gt;", line 1
    {23: &lt;function f at 0x241970&gt;}
         ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>1685493</id><snippet>$ python -c'import cPickle
def f(): pass
d={"x":f}
print d == cPickle.loads(cPickle.dumps(d, -1))'
True
</snippet></ROW><ROW><id>1685597</id><snippet>r'(Start \d+.*?group=.*?name=.*?number=.*?end=\d+)*'</snippet></ROW><ROW><id>1685792</id><snippet>fflush(stdout)</snippet></ROW><ROW><id>1685792</id><snippet>printf("Starting the server.\n")</snippet></ROW><ROW><id>1686229</id><snippet>x = data[row][colorder[col]]
</snippet></ROW><ROW><id>1686229</id><snippet>data[row1], data[row2] = data[row2], data[row1]
</snippet></ROW><ROW><id>1686229</id><snippet>colorder[col1], colorder[col2] = colorder[c2], colorder[c1]
</snippet></ROW><ROW><id>1686400</id><snippet>a = '123' if b else '456'
</snippet></ROW><ROW><id>1687179</id><snippet>lstrip</snippet></ROW><ROW><id>1687179</id><snippet>"/Volumes/Users".lstrip("semuloV/")
</snippet></ROW><ROW><id>1687179</id><snippet>if s.startsWith("/Volumes"):
    s = s[8:]
</snippet></ROW><ROW><id>1687456</id><snippet>python3.1</snippet></ROW><ROW><id>1687456</id><snippet>python</snippet></ROW><ROW><id>1687712</id><snippet>nltk.ne_chunk([('Barack', 'NNP'), ('Obama', 'NNP'), ('lives', 'NNS'), ('in', 'IN'), ('Washington', 'NNP')])</snippet></ROW><ROW><id>1687712</id><snippet>Tree('S', [Tree('PERSON', [('Barack', 'NNP')]), Tree('ORGANIZATION', [('Obama', 'NNP')]), ('lives', 'NNS'), ('in', 'IN'), Tree('GPE', [('Washington', 'NNP')])])</snippet></ROW><ROW><id>1687729</id><snippet>a[numpy.where(a==1)[0][1:]] = 3
</snippet></ROW><ROW><id>1687731</id><snippet>IntegrityError</snippet></ROW><ROW><id>1687731</id><snippet>for i in range(MAX_ATTEMPTS):
    sid = os.urandom(8).decode('hex')
    db.execute('SELECT COUNT(*) FROM sessions WHERE sid=?', (sid,))
    if not db.fetchone()[0]:
        # You can catch IntegrityError here and continue, but there are reasons
        # to avoid this.
        db.execute('INSERT INTO sessions (sid) VALUES (?)', (sid,))
        break
else:
    raise RuntimeError('Failed to generate unique session ID')
</snippet></ROW><ROW><id>1687731</id><snippet>base64.urlsafe_b64encode()</snippet></ROW><ROW><id>1688005</id><snippet>def append_non_form_error(self, message):
    errors = super(FeedFormSet, self).non_form_errors()
    errors.append(message)
    raise forms.ValidationError(errors)
</snippet></ROW><ROW><id>1688005</id><snippet>def clean(self):
    """Checks that only a required number of Feed subscriptions are present"""
    count = 0
    for form in self.forms:
        if form.is_bound:
            if form['subscribe'].data:
                count += 1
    if count &gt; 0 and count != self.required:
        self.append_non_form_error("not enough subs")
</snippet></ROW><ROW><id>1688005</id><snippet>{% extends "base.html" %}
{% load i18n %}

{% block content %}
&lt;form action="." method="post"&gt;
 {{ formset.management_form }}
 {{ formset.non_form_errors }}
    &lt;ol&gt; 
        {% for form in formset.forms %}
        &lt;li&gt;&lt;p&gt;{{ form.title }}&lt;/p&gt;
   &lt;p&gt;{{ form.description }}&lt;/p&gt;
        {{ form.as_p }}
        &lt;/li&gt;
        {% endfor %}
    &lt;/ol&gt;
    &lt;input type="submit"&gt;
&lt;/form&gt;

{% endblock %}
</snippet></ROW><ROW><id>1688350</id><snippet>sys.path</snippet></ROW><ROW><id>1688350</id><snippet>__init__.py</snippet></ROW><ROW><id>1688350</id><snippet>try:
    import myapp
except ImportError:
    import sys
    from os.path import abspath, dirname, split
    parent_dir = split(dirname(abspath(__file__)))[0]
    sys.path.append(parent_dir)
</snippet></ROW><ROW><id>1688350</id><snippet>__init__.py</snippet></ROW><ROW><id>1688350</id><snippet>sys.path</snippet></ROW><ROW><id>1688350</id><snippet>if __name__ eq '__main__'</snippet></ROW><ROW><id>1688350</id><snippet>import _setup
</snippet></ROW><ROW><id>1688350</id><snippet>_setup.py</snippet></ROW><ROW><id>1688350</id><snippet>package/
    __init__.py
    _setup.py
    mod1/
        __init__.py
        _setup.py
        somemodule.py
</snippet></ROW><ROW><id>1688350</id><snippet>import _setup</snippet></ROW><ROW><id>1688350</id><snippet>somemodule.py</snippet></ROW><ROW><id>1688350</id><snippet>sys.path</snippet></ROW><ROW><id>1688350</id><snippet>somemodule.py</snippet></ROW><ROW><id>1688738</id><snippet>timedelta</snippet></ROW><ROW><id>1688738</id><snippet>datetime</snippet></ROW><ROW><id>1688738</id><snippet>import datetime
now = datetime.datetime.now()
past = now - datetime.timedelta(hours=10)
</snippet></ROW><ROW><id>1688768</id><snippet>itertools.product(*A)
</snippet></ROW><ROW><id>1688961</id><snippet>perl -pi -e 's/^(.*)$/\"$1\",/g' /path/to/your/file
</snippet></ROW><ROW><id>1688961</id><snippet>^(.*)$</snippet></ROW><ROW><id>1688961</id><snippet>(.*)</snippet></ROW><ROW><id>1688961</id><snippet>^</snippet></ROW><ROW><id>1688961</id><snippet>$</snippet></ROW><ROW><id>1688961</id><snippet>$1</snippet></ROW><ROW><id>1688988</id><snippet>getattr(obj, 'func')(*arr)     # where obj is the namespace that hold func
</snippet></ROW><ROW><id>1689024</id><snippet>.pyw</snippet></ROW><ROW><id>1689024</id><snippet>.py</snippet></ROW><ROW><id>1689174</id><snippet>def coins(num):
    lst = [random.randrange(2) for i in range(num)]
    lst = [(i, len(list(j))) for i, j in itertools.groupby(lst)]
    tails = max(j for i, j in lst if i)
    heads = max(j for i, j in lst if not i)
    return {1: tails, 0: heads}
</snippet></ROW><ROW><id>1689330</id><snippet>.filter()</snippet></ROW><ROW><id>1689330</id><snippet>.all()</snippet></ROW><ROW><id>1689330</id><snippet>{%if%}</snippet></ROW><ROW><id>1689330</id><snippet>bar</snippet></ROW><ROW><id>1689330</id><snippet>foo</snippet></ROW><ROW><id>1689330</id><snippet>baz</snippet></ROW><ROW><id>1689330</id><snippet>bar</snippet></ROW><ROW><id>1689330</id><snippet>quux</snippet></ROW><ROW><id>1689330</id><snippet>baz</snippet></ROW><ROW><id>1689330</id><snippet>.filter()</snippet></ROW><ROW><id>1689620</id><snippet>length_of_spoke = length_of_side/(2*sin(pi/180*angle/2))
</snippet></ROW><ROW><id>1689787</id><snippet>ulimit</snippet></ROW><ROW><id>1689787</id><snippet>nice</snippet></ROW><ROW><id>1689787</id><snippet>import subprocess
subprocess.Popen('ulimit -t 60; nice -n 15 cpuhog', shell=True)
</snippet></ROW><ROW><id>1689787</id><snippet>cpuhog</snippet></ROW><ROW><id>1690010</id><snippet>sums += sum(arra[1::5])
</snippet></ROW><ROW><id>1690010</id><snippet>array</snippet></ROW><ROW><id>1690245</id><snippet>arra = sum(a for i,a in enumerate(arra) if i %3==1 and i != 16)
</snippet></ROW><ROW><id>1690433</id><snippet>ThisObject</snippet></ROW><ROW><id>1690433</id><snippet>SomeObject</snippet></ROW><ROW><id>1690433</id><snippet>def __init__(self, name):
    self.name = name
</snippet></ROW><ROW><id>1691118</id><snippet>os.system</snippet></ROW><ROW><id>1691118</id><snippet>activate</snippet></ROW><ROW><id>1691118</id><snippet>easy_install</snippet></ROW><ROW><id>1691118</id><snippet>os.system</snippet></ROW><ROW><id>1691118</id><snippet>subprocess</snippet></ROW><ROW><id>1691189</id><snippet>dataReceived</snippet></ROW><ROW><id>1691250</id><snippet>print("Hello, world!")</snippet></ROW><ROW><id>1691273</id><snippet>main.pyc</snippet></ROW><ROW><id>1691273</id><snippet>main</snippet></ROW><ROW><id>1691273</id><snippet>top.pyw</snippet></ROW><ROW><id>1691273</id><snippet># top.pyw file
import main
if __name__ == "__main__":
    import sys
    main.main(*sys.argv[1:])
</snippet></ROW><ROW><id>1691273</id><snippet># main.py file
"""
Main module documentation (optional)
"""
# import modules

# function and class definitions

def main(*argv):
    # Parses the options (optional)
    import optparse
    parser = optparse.OptionParser(usage="%prog [&lt;options&gt;]\n" + __doc__)
    parser.add_option(...)
    parser.add_option(...)
    opt, args = parser.parse_args(list(argv))
    # Calls the appropriate function:
    my_function(...)
</snippet></ROW><ROW><id>1691273</id><snippet>-w</snippet></ROW><ROW><id>1691460</id><snippet>toctree</snippet></ROW><ROW><id>1691460</id><snippet>toctree</snippet></ROW><ROW><id>1691460</id><snippet>index</snippet></ROW><ROW><id>1691460</id><snippet>library/zipfile</snippet></ROW><ROW><id>1691460</id><snippet>reference/datamodel/types</snippet></ROW><ROW><id>1691460</id><snippet>*</snippet></ROW><ROW><id>1691796</id><snippet>import psyco
psyco.full()
</snippet></ROW><ROW><id>1692428</id><snippet># This example should work in any version of Python.
# urls_d will contain URL keys, with counts as values, like: {'http://www.google.fr/' : 1 }
urls_d = {}
for url in list_of_urls:
    if not url in urls_d:
        urls_d[url] = 1
    else:
        urls_d[url] += 1
</snippet></ROW><ROW><id>1692428</id><snippet>defaultdict</snippet></ROW><ROW><id>1692428</id><snippet>from collections import defaultdict  # available in Python 2.5 and newer

urls_d = defaultdict(int)
for url in list_of_urls:
    urls_d[url] += 1
</snippet></ROW><ROW><id>1692428</id><snippet>defaultdict</snippet></ROW><ROW><id>1692428</id><snippet>defaultdict</snippet></ROW><ROW><id>1692428</id><snippet>defaultdict</snippet></ROW><ROW><id>1692428</id><snippet>int</snippet></ROW><ROW><id>1692428</id><snippet>int()</snippet></ROW><ROW><id>1692428</id><snippet>containers.Counter</snippet></ROW><ROW><id>1692428</id><snippet>Counter</snippet></ROW><ROW><id>1692428</id><snippet>from collections import Counter  # available in Python 2.7 and newer

urls_d = Counter(list_of_urls)
</snippet></ROW><ROW><id>1692428</id><snippet>from collections import defaultdict  # available in Python 2.5 and newer

urls_d = defaultdict(int)
for url in list_of_urls:
    urls_d[url] += 1

urls = [{"url": key, "nbr": value} for key, value in urls_d.items()]
</snippet></ROW><ROW><id>1692428</id><snippet>from collections import Counter

urls = [{"url": key, "nbr": value} for key, value in Counter(list_of_urls).items()]
</snippet></ROW><ROW><id>1692484</id><snippet>import urllib2
import cookielib

cp = urllib2.HTTPCookieProcessor()
cj = cp.cookiejar

# see cookielib.Cookie documentation for options description
cj.set_cookie(cookielib.Cookie(0, 'a_cookie', 'a_value',
                               '80', False, 'domain', True, False, '/path',
                               True, False, None, False, None, None, None))
opener = urllib2.build_opener(urllib2.HTTPHandler(),
                              cp)
opener.addheaders.append(('User-agent', 'Mozilla/5.0 (compatible)'))
opener.open('http://website.com').read()
</snippet></ROW><ROW><id>1693108</id><snippet># Method decorator example
from peak.util.decorators import decorate

class Demo1(object):
    decorate(classmethod)   # equivalent to @classmethod
    def example(cls):
        print "hello from", cls
</snippet></ROW><ROW><id>1693127</id><snippet>def foo(x):
    assert x in huge_global_computation_to_check_all_possible_x_values()
    # ok, go ahead and use x...
</snippet></ROW><ROW><id>1693616</id><snippet>from cProfile import Profile
from django.core.management.base import BaseCommand


class Command(BaseCommand):
    ...

    def _handle(self, *args, **options):
        # Actual code I want to profile
        pass

    def handle(self, *args, **options):
        if options['profile']:
            profiler = Profile()
            profiler.runcall(self._handle, *args, **options)
            profiler.print_stats()
        else:
            self._handle(*args, **options)
</snippet></ROW><ROW><id>1693616</id><snippet>_handle</snippet></ROW><ROW><id>1693616</id><snippet>python -m cProfile manage.py testrender
</snippet></ROW><ROW><id>1693616</id><snippet>python manage.py testrender --profile
</snippet></ROW><ROW><id>1694031</id><snippet>for ( $i = 0; $i &lt; count( $sum ); $i++ ) {
</snippet></ROW><ROW><id>1694031</id><snippet>for ( $i = 0; $i &lt; count( $array ); $i++ ) {
</snippet></ROW><ROW><id>1694068</id><snippet>str</snippet></ROW><ROW><id>1694068</id><snippet>from BeautifulSoup import BeautifulSoup
doc = "&lt;html&gt;&lt;h1&gt;Heading&lt;/h1&gt;&lt;p&gt;Text"
soup = BeautifulSoup(doc)

str(soup)
</snippet></ROW><ROW><id>1694105</id><snippet>class Author(models.Model):
    name = models.CharField(max_length=200, unique=True)
    latest_pub_date = models.DateTimeField(null=True, blank=True)

    def update_pub_date(self):
        try:
            self.latest_pub_date = self.book_set.order_by('-pub_date')[0]
            self.save()
        except IndexError:
            pass # no books yet!

class Book(models.Model):
    pub_date = models.DateTimeField()
    author = models.ForeignKey(Author)

    def save(self, **kwargs):
        super(Book, self).save(**kwargs)
        self.author.update_pub_date()

    def delete(self):
        super(Book, self).delete()
        self.author.update_pub_date()
</snippet></ROW><ROW><id>1694105</id><snippet>update_pub_date</snippet></ROW><ROW><id>1694122</id><snippet>&gt;&gt;&gt; d = app('Numbers').documents.first()  # reference to current top document
</snippet></ROW><ROW><id>1694122</id><snippet>&gt;&gt;&gt; nu = app('Numbers')
&gt;&gt;&gt; for sheet in nu.documents.first.sheets():
...   for table in sheet.tables():
...     if table.selection_range():
...        print table.name()
</snippet></ROW><ROW><id>1694524</id><snippet>def xor32bit(a, b):
    m = (a ^ b) % (2**32)
    if m &gt; (2**16):
        m -= 2**32
    return m
</snippet></ROW><ROW><id>1694551</id><snippet>.keys()</snippet></ROW><ROW><id>1694551</id><snippet>Graph.neighbors()</snippet></ROW><ROW><id>1694551</id><snippet>unweighted_random_walk()</snippet></ROW><ROW><id>1694551</id><snippet>while True:</snippet></ROW><ROW><id>1694551</id><snippet>while current_point != ending_point:
    ...
</snippet></ROW><ROW><id>1694551</id><snippet>return hitting_time
</snippet></ROW><ROW><id>1694653</id><snippet>&gt;&gt;&gt; current_table.selection_range.set(to=current_table.ranges[u'B3:C10'])
</snippet></ROW><ROW><id>1694653</id><snippet>Number's</snippet></ROW><ROW><id>1694653</id><snippet>AppleScript Editor</snippet></ROW><ROW><id>1694653</id><snippet>ASDictionary</snippet></ROW><ROW><id>1694653</id><snippet>selection_range</snippet></ROW><ROW><id>1694653</id><snippet>range</snippet></ROW><ROW><id>1694653</id><snippet>range</snippet></ROW><ROW><id>1694950</id><snippet>import simplejson as sj
print sj.dumps('What\'s your name?') # =&gt; '"What\'s your name?"'
</snippet></ROW><ROW><id>1695199</id><snippet>urllib.quote(string[, safe])
</snippet></ROW><ROW><id>1695199</id><snippet>&gt;&gt;&gt; urllib.quote('/test')
'/test'
&gt;&gt;&gt; urllib.quote('/test', '')
'%2Ftest'
</snippet></ROW><ROW><id>1695199</id><snippet>&gt;&gt;&gt; query = urllib.quote(u"Müller".encode('utf8'))
&gt;&gt;&gt; print urllib.unquote(query).decode('utf8')
Müller
</snippet></ROW><ROW><id>1695416</id><snippet>x[::-1]</snippet></ROW><ROW><id>1695416</id><snippet>python -mtimeit</snippet></ROW><ROW><id>1695416</id><snippet>$ python -mtimeit '"".join(reversed("hello there!"))'
100000 loops, best of 3: 4.06 usec per loop
$ python -mtimeit '"hello there!"[::-1]'
1000000 loops, best of 3: 0.392 usec per loop
</snippet></ROW><ROW><id>1695983</id><snippet>beef burrito &lt; burrito &lt; dish/2 &lt; victuals &lt; food &lt; substance &lt; entity.
</snippet></ROW><ROW><id>1696240</id><snippet>error</snippet></ROW><ROW><id>1696240</id><snippet>(104, 'Connection reset by peer</snippet></ROW><ROW><id>1696240</id><snippet>try:
    risky_code()
except:
    logger.debug(...)
    raise
</snippet></ROW><ROW><id>1696240</id><snippet>exception.__module__</snippet></ROW><ROW><id>1697002</id><snippet>Sentence ::= NounPhrase VerbPhrase
NounPhrase ::= ["The"] [Adjective] Noun
Adjective ::= "big" | "small" | "red" | "green"
Noun ::= "cat" | "man" | "house"
VerbPhrase ::= "fell over"
</snippet></ROW><ROW><id>1697036</id><snippet>import struct

class Particle:
    """A single particle.  Attributes added in BinFile."""
    pass

class BinFile:
    """Parse and store the contents of a RealFlow .bin file."""
    def __init__(self, fname):
        self.bindata = open(fname, "rb").read()
        self.off = 0

        self.verify = self.peel("=i")[0]
        assert self.verify == 0xfabada
        self.name = self.string(250)

        (self.version, self.scale, self.fluid_type, self.simtime, self.frame_number,
         self.fps, self.num_particles, self.radius) = self.peel("=hfifiiif")
        self.pressure = self.peel("=fff")
        self.speed = self.peel("=fff")
        self.temperature = self.peel("=fff")
        if self.version &gt;= 7:
            self.emitter_position = self.peel("=fff")
            self.emitter_rotation = self.peel("=fff")
            self.emitter_scale = self.peel("=fff")

        self.particles = [self.peel_particle() for i in range(self.num_particles)]

    def peel_particle(self):
        """Read one particle from the file."""
        p = Particle()
        p.position = self.peel("=fff")
        p.velocity = self.peel("=fff")
        p.force = self.peel("=fff")
        if self.version &gt;= 9:
            p.vorticity = self.peel("=fff")
        if self.version &gt;= 3:
            p.normal = self.peel("=fff")
        if self.version &gt;= 4:
            p.neighbors = self.peel("=i")[0]
        if self.version &gt;= 5:
            p.texture = self.peel("=fff")
            p.infobits = self.peel("=h")[0]
        (p.age, p.isolation_time, p.viscosity, p.density, p.pressure, p.mass,
         p.temperature, p.id) = self.peel("=fffffffi")
        print p.id, p.neighbors, p.position
        return p

    def peel(self, fmt):
        """Read some struct data from `self.bindata`."""
        data = struct.unpack_from(fmt, self.bindata, self.off)
        self.off += struct.calcsize(fmt)
        return data

    def string(self, length):
        s = self.bindata[self.off:self.off+length].split("\0")[0]
        self.off += length
        return s

b = BinFile("Circle0100001.bin")
print "Name:", b.name
print "Particles:", b.num_particles
print "Position of first particle", b.particles[0].position
</snippet></ROW><ROW><id>1697036</id><snippet>Name: Circle01
Particles: 1066
Position of first particle (-1.7062506675720215, 4.9283280372619629, -6.4365010261535645)
</snippet></ROW><ROW><id>1697202</id><snippet>x*y = z</snippet></ROW><ROW><id>1697202</id><snippet>(x0,y0,z0)</snippet></ROW><ROW><id>1697202</id><snippet>SELECT t1.actor1 
FROM workswith AS t1, 
     workswith AS t2, 
     workswith AS t3, 
     workswith AS t4, 
     workswith AS t5,
     workswith AS t6
WHERE t1.actor2 = t2.actor1 AND
      t2.actor2 = t3.actor1 AND
      t3.actor2 = t4.actor1 AND
      t4.actor2 = t5.actor1 AND
      t5.actor2 = t6.actor1 AND
      t6.actor2 = "Kevin Bacon";
</snippet></ROW><ROW><id>1697202</id><snippet>workswith</snippet></ROW><ROW><id>1697283</id><snippet>class SomeClass:
  x=6  # class variable

  def __init__(self):
    self.y = 666  # instance variable
</snippet></ROW><ROW><id>1697569</id><snippet>POST /login.jsp HTTP/1.1
Host: www.mysite.com
User-Agent: Mozilla/4.0
Content-Length: 27
Content-Type: application/x-www-form-urlencoded

userid=joe&amp;password=guessme
</snippet></ROW><ROW><id>1697656</id><snippet>class A:
  class_var = object()

# two objects
a, b = A(), A()

# same var everywhere
assert a.class_var is b.class_var is A.class_var
</snippet></ROW><ROW><id>1697656</id><snippet>int</snippet></ROW><ROW><id>1697656</id><snippet>object</snippet></ROW><ROW><id>1697656</id><snippet>class Stats:
    twitter_count = 0

Stats.twitter_count +=1
Stats.twitter_count +=1
assert Stats.twitter_count == 2
</snippet></ROW><ROW><id>1697770</id><snippet>class BackupForm(ModelForm):
    """Form for adding and editing backups."""

    def __init__(self, *args, **kwargs):
        systemid = kwargs.pop('systemid')
        super(BackupForm, self).__init__(*args, **kwargs)
        self.fields['units'] = forms.ModelMultipleChoiceField(
                required=False,
                queryset=Unit.objects.filter(system__id=systemid),
                widget=forms.SelectMultiple(attrs={'title': _("Add unit")}))

    class Meta:
        model = Backup
        exclude = ('system',)
</snippet></ROW><ROW><id>1697770</id><snippet>form_backup = BackupForm(request.POST,
                         instance=Backup,
                         systemid=system.id)
form_backup = BackupForm(initial=form_backup_defaults,
                         systemid=system.id)
</snippet></ROW><ROW><id>1697781</id><snippet>optparse</snippet></ROW><ROW><id>1697781</id><snippet>argv[1:]</snippet></ROW><ROW><id>1697781</id><snippet>parser = optparse.OptionParser()
# Set up your OptionParser

inp = raw_input("Enter some crap: ")

try: (options, args) = parser.parse_args(shlex.split(inp))
except:
    # Error handling.
</snippet></ROW><ROW><id>1697781</id><snippet>parse_args</snippet></ROW><ROW><id>1697781</id><snippet>shlex.split</snippet></ROW><ROW><id>1697781</id><snippet>parse_args</snippet></ROW><ROW><id>1697797</id><snippet>"&lt;[^&gt;]*&gt;"</snippet></ROW><ROW><id>1697797</id><snippet>"&lt;[^&gt;*&gt;"</snippet></ROW><ROW><id>1697797</id><snippet>]</snippet></ROW><ROW><id>1697884</id><snippet>class PartialAuthorForm(ModelForm):
    class Meta:
        model = Author
        fields = ('name', 'title')

class PartialAuthorForm(ModelForm):
    class Meta:
        model = Author
        exclude = ('birth_date',)
</snippet></ROW><ROW><id>1697884</id><snippet>def gimme_my_form(field_tuple):
    class MyForm(ModelForm):
        class Meta:
            model = MyModel
            fields = field_tuple
    return MyForm
</snippet></ROW><ROW><id>1697907</id><snippet>from time import mktime
from datetime import datetime

dt = datetime.fromtimestamp(mktime(struct))
</snippet></ROW><ROW><id>1698048</id><snippet>struct</snippet></ROW><ROW><id>1698048</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack("&lt;h", "\x00\x05")
(1280,)
&gt;&gt;&gt; struct.unpack("&lt;h", "\x00\x06")
(1536,)
&gt;&gt;&gt; struct.unpack("&lt;h", "\x01\x06")
(1537,)
</snippet></ROW><ROW><id>1698247</id><snippet>from BeautifulSoup import BeautifulSoup
url = "hhttp://0.0.0.0:3000/authenticate/login"
page = urlli2b.urlopen(page)
soup = BeautifulSoup(page)
token = soup.find("input", { 'name': 'authenticity_token'})
</snippet></ROW><ROW><id>1698292</id><snippet>import re

instidre = re.compile(r'NEW\((\d+)\)')

class Afile(object):

  def __init__(self, filename):
    self.filename = filename
    self.geninput = dict()
    self.instances = dict()

  def feed_data(self, listoftuples):
    it = iter(listoftuples)
    assert next(it) == ('$$$$', 'General Inputs')
    for name, value in it:
      if name == '$$$$': break
      self.geninput[name] = value
    else:  # no instances at all!
      return
    currinst = dict()
    for name, value in it:
      if name == '$$$$':
        self.finish_inst(currinst)
        currinst = dict()
        continue
      mo = instidre.match(name)
      if mo:
        assert value == '.TRUE.'
        name = '$$$INSTID$$$'
        value = mo.group(1)
      currinst[name] = value
    self.finish_inst(currinst)

  def finish_inst(self, adict):
    instid = dict.pop('$$$INSTID$$$')
    assert instid not in self.instances
    self.instances[instid] = adict
</snippet></ROW><ROW><id>1698292</id><snippet>foo.instances[instid] = bar.instances[instid]</snippet></ROW><ROW><id>1698292</id><snippet>instid</snippet></ROW><ROW><id>1698292</id><snippet>foo</snippet></ROW><ROW><id>1698292</id><snippet>Afile</snippet></ROW><ROW><id>1698292</id><snippet>bar</snippet></ROW><ROW><id>1698292</id><snippet>sorted(foo.instances)</snippet></ROW><ROW><id>1698292</id><snippet>$ this and that</snippet></ROW><ROW><id>1698292</id><snippet>'$$$INSTID$$$'</snippet></ROW><ROW><id>1698304</id><snippet>mat_dtype=True</snippet></ROW><ROW><id>1698304</id><snippet>loadmat</snippet></ROW><ROW><id>1698422</id><snippet>PAMIE(timeOut=100)</snippet></ROW><ROW><id>1698422</id><snippet>timeOut</snippet></ROW><ROW><id>1698422</id><snippet>300</snippet></ROW><ROW><id>1698422</id><snippet>timeOut=</snippet></ROW><ROW><id>1698521</id><snippet>sys.stdout</snippet></ROW><ROW><id>1698521</id><snippet>open('CONOUT$', 'wt')</snippet></ROW><ROW><id>1698521</id><snippet>print</snippet></ROW><ROW><id>1698521</id><snippet>sys.stderr</snippet></ROW><ROW><id>1698521</id><snippet>sys.stdin</snippet></ROW><ROW><id>1698521</id><snippet>import sys</snippet></ROW><ROW><id>1698521</id><snippet>sys.stdout</snippet></ROW><ROW><id>1698521</id><snippet>PyObject* sys = PyImport_ImportModule("sys");
PyObject* pystdout = PyFile_FromString("CONOUT$", "wt");
if (-1 == PyObject_SetAttrString(sys, "stdout", pystdout)) {
  /* raise errors and wail very loud */
}
Py_DECREF(sys);
Py_DECREF(pystdout);
</snippet></ROW><ROW><id>1698521</id><snippet>sys.stdout = open('CONOUT$', 'wt')
</snippet></ROW><ROW><id>1698567</id><snippet>array[x,y]</snippet></ROW><ROW><id>1698611</id><snippet>import os
for root, dirs, files in os.walk(path):
    for name in files:
        print os.path.join(root, name)
</snippet></ROW><ROW><id>1698700</id><snippet>print soup.prettify()</snippet></ROW><ROW><id>1698700</id><snippet>"</snippet></ROW><ROW><id>1698700</id><snippet>&lt;tag style="background-image:url("something")"&gt;
</snippet></ROW><ROW><id>1698700</id><snippet># Fix background-image:url("some URI")
# to replace the quotes with &amp;quote;
background_image = re.compile(r'background-image:url\("([^"]+)"\)')
def fix_background_image( match ):
    return 'background-image:url(&amp;quote;%s&amp;quote;)' % ( match.group(1) )
# Fix &lt;img src="some URI name="someString""&gt;  -- note the out-of-place quotes
bad_img = re.compile( r'src="([^ ]+) name="([^"]+)""' )
def fix_bad_img( match ):
    return 'src="%s" name="%s"' % ( match.group(1), match.group(2) )
fix_style_quotes = [
    (background_image, fix_background_image),
    (bad_img, fix_bad_img),
]
</snippet></ROW><ROW><id>1698791</id><snippet>years = collections.defaultdict( list )
players = collections.defaultdict( list )
teams = collections.defaultdict( list )
</snippet></ROW><ROW><id>1698791</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>1698791</id><snippet>class ScoreFact( object ):
    def __init__( self, year, player, team, score ):
        self.year= year
        self.player= player
        self.team= team
        self.score= score
        years[self.year].append( self )
        players[self.player].append( self )
        teams[self.team].append( self )
</snippet></ROW><ROW><id>1698791</id><snippet>years['2001'] are all scores for the given year.

players['SEA'] are all scores for the given player.
</snippet></ROW><ROW><id>1698791</id><snippet>sum()</snippet></ROW><ROW><id>1698791</id><snippet>[ x for x in players['SEA'] if x.year == '2001' ]
</snippet></ROW><ROW><id>1699348</id><snippet>from django.utils.encoding import smart_unicode
def view(request):
    body = u""  
    for filename, f in request.FILES.items():
        body = body + 'Filename: ' + filename + '\n' + smart_unicode(f.read()) + '\n'
</snippet></ROW><ROW><id>1699360</id><snippet>table[r]</snippet></ROW><ROW><id>1699360</id><snippet>[pos+i]</snippet></ROW><ROW><id>1699360</id><snippet>foo = table[r]
if foo[pos+i] != word[i]:
</snippet></ROW><ROW><id>1699667</id><snippet>from os import listdir
from os.path import join

DATA_ROOT = "testdata"

def folder_items_no_regex(month_name):

   # dict holding the items (assuming ordering is irrelevant)
   items = {}

   # 1. Loop through all filenames in said folder
   for file in listdir( join( DATA_ROOT, month_name ) ):
      date, name = file.split( "_", 1 )

      # skip files that were not possible to split on "_"
      if not date or not name:
         continue

      # ignore non-.xml files
      if not name.endswith(".xml"):
         continue

      # cut off the ".xml" extension
      name = name[0:-4]

      # keep a list of filenames
      items.setdefault( name, set() ).add( file )

   return items

def folder_items_regex(month_name):

   import re

   # The pattern:
   # 1. match the beginnning of line "^"
   # 2. capture 1 or more digits ( \d+ )
   # 3. match the "_"
   # 4. capture any character (as few as possible ): (.*?)
   # 5. match ".xml"
   # 6. match the end of line "$"
   pattern = re.compile( r"^(\d+)_(.*?)\.xml$" )

   # dict holding the items (assuming ordering is irrelevant)
   items = {}

   # 1. Loop through all filenames in said folder
   for file in listdir( join( DATA_ROOT, month_name ) ):

      match = pattern.match( file )
      if not match:
         continue

      date, name = match.groups()

      # keep a list of filenames
      items.setdefault( name, set() ).add( file )

   return items
if __name__ == "__main__":
   from pprint import pprint

   data = folder_items_no_regex( "02" )

   print "--- The dict ---------------"
   pprint( data )

   print "--- The items --------------"
   pprint( sorted( data.keys() ) )

   print "--- The files for item1 ---- "
   pprint( sorted( data["item1"] ) )


   data = folder_items_regex( "02" )

   print "--- The dict ---------------"
   pprint( data )

   print "--- The items --------------"
   pprint( sorted( data.keys() ) )

   print "--- The files for item1 ---- "
   pprint( sorted( data["item1"] ) )
</snippet></ROW><ROW><id>1699735</id><snippet>from HTMLParser import HTMLParser
import urllib

class AnchorParser(HTMLParser):
    def handle_starttag(self, tag, attrs):
            if tag =='a':
                    for key, value in attrs:
                            if key == 'href':
                                    print value

parser = AnchorParser(HTMLParser)
data = urllib.urlopen('http://somewhere').read()
parser.feed(data)
</snippet></ROW><ROW><id>1700001</id><snippet>os</snippet></ROW><ROW><id>1700001</id><snippet>shutil</snippet></ROW><ROW><id>1700001</id><snippet>System.IO</snippet></ROW><ROW><id>1700001</id><snippet>System.IO.File</snippet></ROW><ROW><id>1700001</id><snippet>System.IO.Directory</snippet></ROW><ROW><id>1700001</id><snippet>os.walk</snippet></ROW><ROW><id>1700001</id><snippet>GetDirectories</snippet></ROW><ROW><id>1700001</id><snippet>GetFiles</snippet></ROW><ROW><id>1700001</id><snippet>Directory.GetDirectories(String)</snippet></ROW><ROW><id>1700001</id><snippet>System.Environment.UserName</snippet></ROW><ROW><id>1700001</id><snippet>&gt;&gt;&gt; import clr
&gt;&gt;&gt; from System import Environment
&gt;&gt;&gt; Environment.UserName
'gimel'
&gt;&gt;&gt; from System import IO
&gt;&gt;&gt; IO.Directory.GetCreationTimeUtc('c:/')
&lt;System.DateTime object at 0x000000000000002B [02/07/2006 12:53:25]&gt;
&gt;&gt;&gt; IO.Directory.GetLastWriteTimeUtc('c:/')
&lt;System.DateTime object at 0x000000000000002C [09/11/2009 08:15:32]&gt;
&gt;&gt;&gt; IO.Directory.GetDirectories('C:/').Count
24
&gt;&gt;&gt; help(IO.File.Copy)
Help on built-in function Copy:

Copy(...)
    Copy(str sourceFileName, str destFileName, bool overwrite)

        Copies an existing file to a new file.
         Overwriting a file of the same name is allowed.
...
</snippet></ROW><ROW><id>1700102</id><snippet>__init__</snippet></ROW><ROW><id>1700102</id><snippet>__init__</snippet></ROW><ROW><id>1700102</id><snippet>__init__</snippet></ROW><ROW><id>1700102</id><snippet>required=False</snippet></ROW><ROW><id>1700122</id><snippet>all = [x for t in tests for x in t[1]]
</snippet></ROW><ROW><id>1700139</id><snippet>yield</snippet></ROW><ROW><id>1700139</id><snippet>from threading import Thread
import hashlib

def async(gen):
    def func(*args, **kwargs):
        it = gen(*args, **kwargs)
        result = it.next()
        Thread(target=lambda: list(it)).start()
        return result
    return func

@async
def test(text):
    # synchronous part (empty in this example)
    yield # Use "yield value" if you need to return meaningful value
    # asynchronous part[s]
    digest = hashlib.md5(text).hexdigest()
    print digest
</snippet></ROW><ROW><id>1700420</id><snippet>def __init__(self, *args, **kwargs):
    super(TagForm, self).__init__(*args, **kwargs)
    if 'instance' in kwargs:
        self.fields['projects'].initial = self.instance.project_set.all()

def save(self, *args, **kwargs):
    super(TagForm, self).save(*args, **kwargs)
    self.instance.project_set.clear()
    for project in self.cleaned_data['projects']:
        self.instance.project_set.add(project)
</snippet></ROW><ROW><id>1700442</id><snippet>backtonormal = urllib.unquote(thestring)
</snippet></ROW><ROW><id>1700604</id><snippet>from threading import Thread
from Queue import Queue
from win32com.client import Dispatch
import pythoncom
import time

class IEThread(Thread):
    def __init__(self):
        Thread.__init__(self)
        self.queue = Queue()

    def run(self):
        ie = None
        # as IE Com object will be used in thread, do CoInitialize
        pythoncom.CoInitialize()
        try:
            ie = Dispatch("InternetExplorer.Application")
            ie.Visible = 1
            while 1:
                url = self.queue.get()
                print "Visiting...",url
                ie.Navigate(url)
                while ie.Busy:
                    time.sleep(0.1)
        except Exception,e:
            print "Error in IEThread:",e

        if ie is not None:
            ie.Quit()


ieThread = IEThread()
ieThread.start()
while 1:
    url = raw_input("enter url to visit:")
    if url == 'q':
        break
    ieThread.queue.put(url)
</snippet></ROW><ROW><id>1700673</id><snippet>django.core.urlresolvers.reverse = ur_reverse
</snippet></ROW><ROW><id>1700673</id><snippet>django.core.urlresolvers.reverse = ur_reverse_decorator(django.core.urlresolvers.reverse )
</snippet></ROW><ROW><id>1701078</id><snippet>-undefined dynamic_lookup -bundle
</snippet></ROW><ROW><id>1701224</id><snippet>gnome-terminal --working-directory=/path/to/wd --tab-with-profile=profile1 --title=title1 -e 'bash --rcfile /path/to/rcfile1.sh' --tab-with-profile=profile2 --title=title2 -e 'bash --rcfile /path/to/rcfile2.sh'</snippet></ROW><ROW><id>1701327</id><snippet>ValueError</snippet></ROW><ROW><id>1701327</id><snippet>.read()</snippet></ROW><ROW><id>1701404</id><snippet>(i for i,v in enumerate(l) if is_odd(v)).next()
</snippet></ROW><ROW><id>1701404</id><snippet>y = (i for i,v in enumerate(l) if is_odd(v))
x1 = y.next()
x2 = y.next()
</snippet></ROW><ROW><id>1701404</id><snippet>next(someiterator)</snippet></ROW><ROW><id>1701404</id><snippet>someiterator.next()</snippet></ROW><ROW><id>1702037</id><snippet>Discount</snippet></ROW><ROW><id>1702037</id><snippet>appliesTo(cart)</snippet></ROW><ROW><id>1702037</id><snippet>apply(cart)</snippet></ROW><ROW><id>1702037</id><snippet>apply()</snippet></ROW><ROW><id>1702605</id><snippet>C:\Python26\python.exe "$(FULL_CURRENT_PATH)"
</snippet></ROW><ROW><id>1703021</id><snippet>random.seed</snippet></ROW><ROW><id>1703021</id><snippet>os.urandom()</snippet></ROW><ROW><id>1703021</id><snippet>os.urandom</snippet></ROW><ROW><id>1703086</id><snippet>UserDict</snippet></ROW><ROW><id>1703086</id><snippet>object</snippet></ROW><ROW><id>1703086</id><snippet>dir()</snippet></ROW><ROW><id>1703086</id><snippet>__class__</snippet></ROW><ROW><id>1703086</id><snippet>dir()</snippet></ROW><ROW><id>1703086</id><snippet>PyDev</snippet></ROW><ROW><id>1703086</id><snippet>&gt;&gt;&gt; class OldStyle: pass
... 
&gt;&gt;&gt; os = OldStyle(); os.__class__; dir(os)
&lt;class __main__.OldStyle at 0x100412cb0&gt;
['__doc__', '__module__']
&gt;&gt;&gt; class NewStyle(object): pass
... 
&gt;&gt;&gt; ns = NewStyle(); ns.__class__; dir(ns)
&lt;class '__main__.NewStyle'&gt;
['__class__', '__delattr__', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__']
</snippet></ROW><ROW><id>1703086</id><snippet>UserDict</snippet></ROW><ROW><id>1703086</id><snippet>dict</snippet></ROW><ROW><id>1703086</id><snippet>UserDict</snippet></ROW><ROW><id>1703086</id><snippet>Person</snippet></ROW><ROW><id>1703086</id><snippet>dict</snippet></ROW><ROW><id>1703140</id><snippet>#@UnresolvedImport
#@UnusedVariable
</snippet></ROW><ROW><id>1703140</id><snippet>import com.work.project.component.client.Interface.ISubInterface as ISubInterface #@UnresolvedImport
</snippet></ROW><ROW><id>1703496</id><snippet>string.join()</snippet></ROW><ROW><id>1703496</id><snippet>lines = open(file_in).readlines()

out_list = "['" + "','".join(lines) + "']"
</snippet></ROW><ROW><id>1703496</id><snippet>join()</snippet></ROW><ROW><id>1703496</id><snippet>out_list = "['" + "','".join(open(file_in)) + "']"
</snippet></ROW><ROW><id>1703705</id><snippet>import time

def watch(fn, words):
    fp = open(fn, 'r')
    while True:
        new = fp.readline()
        # Once all lines are read this just returns ''
        # until the file changes and a new line appears

        if new:
            for word in words:
                if word in new:
                    yield (word, new)
        else:
            time.sleep(0.5)

fn = 'test.py'
words = ['word']
for hit_word, hit_sentence in watch(fn, words):
    print "Found %r in line: %r" % (hit_word, hit_sentence)
</snippet></ROW><ROW><id>1703705</id><snippet>readline</snippet></ROW><ROW><id>1703705</id><snippet>word</snippet></ROW><ROW><id>1703739</id><snippet>{% load markup %}

{{ foo|markdown:"safe" }}
</snippet></ROW><ROW><id>1703739</id><snippet>django.contrib.markup</snippet></ROW><ROW><id>1703739</id><snippet>settings.py</snippet></ROW><ROW><id>1703739</id><snippet>import feedparser

body = feedparser._sanitizeHTML(body, 'utf8')
</snippet></ROW><ROW><id>1703923</id><snippet>__doc__</snippet></ROW><ROW><id>1704169</id><snippet>root.findall("/n:molpro/n:job",
             namespaces=dict(n="http://www.molpro.net/schema/molpro2006"))
</snippet></ROW><ROW><id>1704175</id><snippet>Queue</snippet></ROW><ROW><id>1704175</id><snippet>get</snippet></ROW><ROW><id>1704175</id><snippet>put</snippet></ROW><ROW><id>1704310</id><snippet># Define process group.

WSGIDaemonProcess django display-name=%{GROUP}

# Mount application.

WSGIScriptAlias / /usr/local/django/mysite/apache/django.wsgi

# Ensure application preloaded on process start. Must specify the
# process group and application group (Python interpreter) to use.

WSGIImportScript /usr/local/django/mysite/apache/django.wsgi \
  process-group=django application-group=%{GLOBAL}

&lt;Directory /usr/local/django/mysite/apache&gt;

    # Ensure application runs in same process group and application
    # group as was preloaded into on process start.

    WSGIProcessGroup django
    WSGIApplicationGroup %{GLOBAL}

    Order deny,allow
    Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>1704310</id><snippet>kill -SIGINT pid
</snippet></ROW><ROW><id>1704310</id><snippet># Define process group.

WSGIDaemonProcess django display-name=%{GROUP}

# Mount application and designate which process group and
# application group (Python interpreter) to run it in. As
# process group and application group named, this will have
# side effect of preloading application on process start.

WSGIScriptAlias / /usr/local/django/mysite/apache/django.wsgi \
  process-group=django application-group=%{GLOBAL}

&lt;Directory /usr/local/django/mysite/apache&gt;
    Order deny,allow
    Allow from all
&lt;/Directory&gt;
</snippet></ROW><ROW><id>1704501</id><snippet>A parallel equivalent of the map() built-in function (it supports only
one iterable argument though). It blocks till the result is ready.

This method chops the iterable into a number of chunks which it submits to the 
process pool as separate tasks. The (approximate) size of these chunks can be 
specified by setting chunksize to a positive integ
</snippet></ROW><ROW><id>1704501</id><snippet>def f(x):
    return x**2
</snippet></ROW><ROW><id>1704501</id><snippet>map(f, range(10))
</snippet></ROW><ROW><id>1704501</id><snippet>import multiprocessing
pool = multiprocessing.Pool()
print pool.map(f, range(10))
</snippet></ROW><ROW><id>1704576</id><snippet>ISIZE</snippet></ROW><ROW><id>1704576</id><snippet>_read_eof</snippet></ROW><ROW><id>1704576</id><snippet>def _read_eof(self):
    # We've read to the end of the file, so we have to rewind in order
    # to reread the 8 bytes containing the CRC and the file size.
    # We check the that the computed CRC and size of the
    # uncompressed data matches the stored values.  Note that the size
    # stored is the true file size mod 2**32.
    self.fileobj.seek(-8, 1)
    crc32 = read32(self.fileobj)
    isize = U32(read32(self.fileobj))   # may exceed 2GB
    if U32(crc32) != U32(self.crc):
        raise IOError, "CRC check failed"
    elif isize != LOWU32(self.size):
        raise IOError, "Incorrect length of data produced"
</snippet></ROW><ROW><id>1704576</id><snippet>ISIZE</snippet></ROW><ROW><id>1704576</id><snippet>self.size</snippet></ROW><ROW><id>1704576</id><snippet>GzipFile.size</snippet></ROW><ROW><id>1704637</id><snippet>yield return</snippet></ROW><ROW><id>1704637</id><snippet>yield</snippet></ROW><ROW><id>1704637</id><snippet>yield break</snippet></ROW><ROW><id>1704637</id><snippet>return</snippet></ROW><ROW><id>1704734</id><snippet>/* r is the 'request_rec' object from apache */
if (r-&gt;connection-&gt;aborted) {
    /* stop processing and return */
}
</snippet></ROW><ROW><id>1704786</id><snippet>import StringIO
data = StringIO.StringIO(data)
import gzip
gzipper = gzip.GzipFile(fileobj=data)
html = gzipper.read()
</snippet></ROW><ROW><id>1704786</id><snippet>html</snippet></ROW><ROW><id>1704811</id><snippet>def bucket_from_pixel(r, g, b):
    hue = hue_from_rgb(r, g, b) # [0, 360)
    return (hue * NUM_BUCKETS) / 360
</snippet></ROW><ROW><id>1704811</id><snippet>histogram</snippet></ROW><ROW><id>1704811</id><snippet>hist_sel = normalize(sel.histogram())
hist = normalize(o.histogram()) # These normalized histograms should be stored

dist = sum([abs(x) for x in (hist_sel - hist)])
</snippet></ROW><ROW><id>1704811</id><snippet>dist = sqrt(sum([x*x for x in (hist_sel - hist)]))
</snippet></ROW><ROW><id>1704811</id><snippet>Normalize</snippet></ROW><ROW><id>1704811</id><snippet>normalize</snippet></ROW><ROW><id>1704853</id><snippet>&gt;&gt;&gt; a = numpy.empty((3,3,))
&gt;&gt;&gt; a[:] = numpy.NAN
&gt;&gt;&gt; a
array([[ NaN,  NaN,  NaN],
       [ NaN,  NaN,  NaN],
       [ NaN,  NaN,  NaN]])
</snippet></ROW><ROW><id>1704853</id><snippet>a[:] = numpy.nan</snippet></ROW><ROW><id>1704853</id><snippet>a.fill(numpy.nan)</snippet></ROW><ROW><id>1704853</id><snippet>$ python -mtimeit "import numpy as np; a = np.empty((100,100));" "a.fill(np.nan)"
10000 loops, best of 3: 54.3 usec per loop
$ python -mtimeit "import numpy as np; a = np.empty((100,100));" "a[:] = np.nan" 
10000 loops, best of 3: 88.8 usec per loop
</snippet></ROW><ROW><id>1704853</id><snippet>ndarray.fill(..)</snippet></ROW><ROW><id>1705364</id><snippet>pauseProducing</snippet></ROW><ROW><id>1705364</id><snippet>resumeProducing</snippet></ROW><ROW><id>1705393</id><snippet>params = urllib.urlencode({        
    "rows": "100",       
    "fl": "id,name,score,address,city,state,zip",        
    "wt": "python",        
    "q": "+name:Foo +city:Boston"
})        

request = urllib2.urlopen(urllib2.Request("http://locahost:8983/solr/select", params))
response = ast.literal_eval(request.read())
request.close()            
return response["docs"]
</snippet></ROW><ROW><id>1705954</id><snippet>__call__</snippet></ROW><ROW><id>1705954</id><snippet>__call__</snippet></ROW><ROW><id>1705954</id><snippet>class a(object):
    def __init__(self):
        self.__class__ = type(self.__class__.__name__, (self.__class__,), {})
        self.__class__.__call__ = lambda x:x
</snippet></ROW><ROW><id>1705954</id><snippet>__call__</snippet></ROW><ROW><id>1706028</id><snippet>s.isdigit()</snippet></ROW><ROW><id>1706028</id><snippet>s</snippet></ROW><ROW><id>1706028</id><snippet>0123456789</snippet></ROW><ROW><id>1706028</id><snippet>+</snippet></ROW><ROW><id>1706028</id><snippet>-</snippet></ROW><ROW><id>1706028</id><snippet>elif y &lt; 0:</snippet></ROW><ROW><id>1706028</id><snippet>try:
  thenum = float(y)
except ValueError:
  print "Not a valid number"
else:
  if thenum &gt;= 0:
     x = int(sqrt(thenum))
     print "Answer is", x
  else:
     print "Negative number", cmath.sqrt(thenum)
</snippet></ROW><ROW><id>1706197</id><snippet>c = sub1()
c = sub2()
</snippet></ROW><ROW><id>1706197</id><snippet># This space where baseClass was defined intentionally left blank, 
# because it serves no purpose

class Sub1(object):
  def x(self): 
    print "sub1"

class Sub2(object):
  def x(self):
    print "sub2"

c = Sub1()
c = Sub2()
</snippet></ROW><ROW><id>1706204</id><snippet>for line in open("file"):
    li=line.strip()
    if not li.startswith("#"):
        print line.rstrip()
</snippet></ROW><ROW><id>1706864</id><snippet> |  dump(...)
 |      a.dump(file)
 |      
 |      Dump a pickle of the array to the specified file.
 |      The array can be read back with pickle.load or numpy.load.
 |      
 |      Parameters
 |      ----------
 |      file : str
 |          A string naming the dump file.
</snippet></ROW><ROW><id>1706864</id><snippet>numpy.load</snippet></ROW><ROW><id>1706973</id><snippet>raw_input()</snippet></ROW><ROW><id>1706973</id><snippet>readline</snippet></ROW><ROW><id>1707134</id><snippet># The Windows registry key for MySQL.
# This has to be set for Windows builds to work.
# Only change this if you have a different version.
registry_key = SOFTWARE\MySQL AB\MySQL Server 5.0
</snippet></ROW><ROW><id>1707437</id><snippet>oparser = OptionParser(add_help_option=False, ...)
</snippet></ROW><ROW><id>1707437</id><snippet>-h</snippet></ROW><ROW><id>1707437</id><snippet>--help</snippet></ROW><ROW><id>1707437</id><snippet>print(oparser.format_help().strip())
</snippet></ROW><ROW><id>1707786</id><snippet>pkgutil</snippet></ROW><ROW><id>1707786</id><snippet>import pkgutil

# this is the package we are inspecting -- for example 'email' from stdlib
import email

package = email
for importer, modname, ispkg in pkgutil.iter_modules(package.__path__):
    print "Found submodule %s (is a package: %s)" % (modname, ispkg)
</snippet></ROW><ROW><id>1707786</id><snippet>__import__</snippet></ROW><ROW><id>1707786</id><snippet>import pkgutil

# this is the package we are inspecting -- for example 'email' from stdlib
import email

package = email
prefix = package.__name__ + "."
for importer, modname, ispkg in pkgutil.iter_modules(package.__path__, prefix):
    print "Found submodule %s (is a package: %s)" % (modname, ispkg)
    module = __import__(modname, fromlist="dummy")
    print "Imported", module
</snippet></ROW><ROW><id>1708099</id><snippet>for each item in prefs for person1:
    if that is also an item in the prefs for person2:
        find the difference between the number of prefs for that item for the two people
        and square it (Math.pow(x,2) is "x squared")
</snippet></ROW><ROW><id>1708333</id><snippet>d2, = values[s]</snippet></ROW><ROW><id>1708333</id><snippet>a,b=f()</snippet></ROW><ROW><id>1708333</id><snippet>&gt;&gt;&gt; T=(1,)
&gt;&gt;&gt; a=T
&gt;&gt;&gt; a
(1,)
&gt;&gt;&gt; b,=T
&gt;&gt;&gt; b
1
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1708333</id><snippet>a</snippet></ROW><ROW><id>1708333</id><snippet>b</snippet></ROW><ROW><id>1708470</id><snippet>class BooleanDescriptor(object):
    def __init__(self, attr):
        self.attr = attr

    def __get__(self, instance, owner):
      return getattr(instance, self.attr)

    def __set__(self, instance, value):
      if value in (True, False):
        return setattr(instance, self.attr, value)
      else:
        raise TypeError


class Foo(object):
    _bar = False
    bar = BooleanDescriptor('_bar')
</snippet></ROW><ROW><id>1708610</id><snippet>struct</snippet></ROW><ROW><id>1708617</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack("&gt;i", 336)
'\x00\x00\x01P'
</snippet></ROW><ROW><id>1708617</id><snippet>struct</snippet></ROW><ROW><id>1708617</id><snippet>"&gt;i"</snippet></ROW><ROW><id>1708744</id><snippet>a</snippet></ROW><ROW><id>1708744</id><snippet>b</snippet></ROW><ROW><id>1708744</id><snippet>&gt;&gt;&gt; u = Union(a, b)
</snippet></ROW><ROW><id>1708744</id><snippet>u</snippet></ROW><ROW><id>1708744</id><snippet>a</snippet></ROW><ROW><id>1708744</id><snippet>b</snippet></ROW><ROW><id>1708744</id><snippet>class Base(object):

    def union(self, other):
        return Union(self, other)

    def intersection(self, other):
        return Intersection(self, other)

class RangeSet(Base):

    def __init__(self, low, high):
        self.low = low
        self.high = high

    def __contains__(self, value):
        return value &gt;= self.low and value &lt; self.high

class Union(Base):
    def __init__(self, *sets):
        self.sets = sets

    def __contains__(self, value):
        return any(value in x for x in self.sets)

class Intersection(Base):

    def __init__(self, *sets):
        self.sets = sets

    def __contains__(self, value):
        return all(value in x for x in self.sets)


a = RangeSet(0, 10)
b = RangeSet(5, 15)

u = a.union(b)
i = a.intersection(b)

print 3 in u
print 7 in u
print 12 in u

print 3 in i
print 7 in i
print 12 in i
</snippet></ROW><ROW><id>1708744</id><snippet>True
True
True
False
True
False
</snippet></ROW><ROW><id>1708874</id><snippet>numpy.hstack()</snippet></ROW><ROW><id>1708874</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; desc = {'names': ('gender','age','weight'), 'formats': ('S1', 'f4', 'f4')} 
&gt;&gt;&gt; a = numpy.array([('M',64.0,75.0),('F',25.0,60.0)], dtype=desc)
&gt;&gt;&gt; numpy.hstack((a,a))
array([('M', 64.0, 75.0), ('F', 25.0, 60.0), ('M', 64.0, 75.0),
       ('F', 25.0, 60.0)], 
      dtype=[('gender', '|S1'), ('age', '&lt;f4'), ('weight', '&lt;f4')])
</snippet></ROW><ROW><id>1708918</id><snippet>def clean(self):
    file_field = self.cleaned_data.get('file_field')
    image_field = self.cleaned_data.get('image_field')

    if file_field and image_field:
        raise forms.ValidationError("You should only provide one of File or Image")
    elif not file_field and not image_field:
        raise forms.ValidationError("You must provide either File or Image")

    return self.cleaned_data
</snippet></ROW><ROW><id>1709132</id><snippet>r''</snippet></ROW><ROW><id>1709132</id><snippet>&gt;&gt;&gt; type(u'abc')
&lt;type 'unicode'&gt;
&gt;&gt;&gt; r'ab\c'
'ab\\c'
</snippet></ROW><ROW><id>1709291</id><snippet>class BuildInfo(object):
    def __init__(self, objectFiles = [], sourceFiles = []):
        self.objectFiles = objectFiles
        self.sourceFiles = sourceFiles 
    def append(self, build_info):
        self.objectFiles.extend(build_info.objectFiles)
        self.sourceFiles.extend(build_info.sourceFiles)
</snippet></ROW><ROW><id>1709291</id><snippet>a = BuildInfo() #uses default value of an empty list for object/sourceFiles
b = BuildInfo(["hello.dat", "world.dat"], ["foo.txt", "bar.txt"])
a.append(b) #a now has the same info as b
a.append(b) #a now has ["hello.dat", "world.dat", "hello.dat", "world.dat"], ["foo.txt", "bar.txt", "foo.txt", "bar.txt"]
</snippet></ROW><ROW><id>1709291</id><snippet>a = [1,2,3]
b = [4,5,6]
a.append(b) #a is now [1,2,3[4,5,6]]

a = [1,2,3]
b = [4,5,6]
a.extend(b) #a is now [1,2,3,4,5,6]
</snippet></ROW><ROW><id>1709480</id><snippet>getattr</snippet></ROW><ROW><id>1709480</id><snippet>None</snippet></ROW><ROW><id>1709480</id><snippet>__str__</snippet></ROW><ROW><id>1709480</id><snippet>__eq__</snippet></ROW><ROW><id>1709480</id><snippet>self.__dict__</snippet></ROW><ROW><id>1709480</id><snippet>vars(self)</snippet></ROW><ROW><id>1709480</id><snippet>class person(object):

    def __init__(self, keys):
        self.__dict__ = dict.fromkeys(keys)

    def __str__(self):
        return str(vars(self))

    def __eq__(self, other):
        return isinstance(other, person) and vars(self) == vars(other)
</snippet></ROW><ROW><id>1709546</id><snippet>&gt;&gt;&gt; import math
&gt;&gt;&gt; mlat = sum(x['lat'] for x in l) / len(l)
&gt;&gt;&gt; mlng = sum(x['lng'] for x in l) / len(l)
&gt;&gt;&gt; def algo(x):
    return (math.atan2(x['lat'] - mlat, x['lng'] - mlng) + 2 * math.pi) % 2*math.pi

&gt;&gt;&gt; l.sort(key=algo)
</snippet></ROW><ROW><id>1709546</id><snippet>algo</snippet></ROW><ROW><id>1709546</id><snippet>[0, 2pi]</snippet></ROW><ROW><id>1709987</id><snippet>class Magic(type):
    def __str__(self):
        return 'Something crazy'
    def __repr__(self):
        return 'Another craziness'

class Foo(object):
    __metaclass__ = Magic

&gt;&gt;&gt; print Foo
Something crazy
&gt;&gt;&gt; Foo
Another craziness
</snippet></ROW><ROW><id>1710140</id><snippet>os.chdir</snippet></ROW><ROW><id>1710140</id><snippet>try</snippet></ROW><ROW><id>1710140</id><snippet>finally</snippet></ROW><ROW><id>1710140</id><snippet>__del__</snippet></ROW><ROW><id>1710140</id><snippet>__del__</snippet></ROW><ROW><id>1710140</id><snippet>saved_path = os.getcwd()
os.chdir(new_path)
try:
    # code that does stuff in new_path goes here
finally:
    os.chdir(saved_path)
</snippet></ROW><ROW><id>1710186</id><snippet>paster serve --reload ...</snippet></ROW><ROW><id>1710186</id><snippet>subprocess</snippet></ROW><ROW><id>1710186</id><snippet>fork()</snippet></ROW><ROW><id>1710186</id><snippet>paster serve --reload</snippet></ROW><ROW><id>1710186</id><snippet>paster serve</snippet></ROW><ROW><id>1710186</id><snippet>--reload</snippet></ROW><ROW><id>1710186</id><snippet>pkg_resources</snippet></ROW><ROW><id>1710217</id><snippet>&gt;&gt;&gt; text = # some nice long text, e.g. the Gettysburg Address
&gt;&gt;&gt; letters = [c.lower() for c in text if c.isalpha()]
&gt;&gt;&gt; letters
    ['f', 'o', 'u', 'r', 's', 'c', 'o', 'r', 'e', 'a', 'n', 'd', 's', 'e', 'v', 'e',
    ...
&gt;&gt;&gt; freq = {}
&gt;&gt;&gt; for c in letters:
        freq[c] = freq.get(c, 0) + 1

&gt;&gt;&gt; freq
    {'a': 102, 'c': 31, 'b': 14, 'e': 165, 'd': 58, 'g': 28, 'f': 27, 'i': 68, 'h': 80, 
    ...
&gt;&gt;&gt; for c in sorted(freq.keys(), key=lambda x: freq[x], reverse=True):
        print c, freq[c]

e 165
t 126
a 102
...
</snippet></ROW><ROW><id>1710217</id><snippet>letters</snippet></ROW><ROW><id>1710217</id><snippet>letters = (c.lower() for c in text if c.isalpha())
</snippet></ROW><ROW><id>1710411</id><snippet>sys</snippet></ROW><ROW><id>1710411</id><snippet>itertools</snippet></ROW><ROW><id>1710411</id><snippet>collections</snippet></ROW><ROW><id>1710411</id><snippet>copy</snippet></ROW><ROW><id>1710568</id><snippet>QStackedWidget</snippet></ROW><ROW><id>1710734</id><snippet>lst = [line[6:17] for line in open(fname)]
</snippet></ROW><ROW><id>1710734</id><snippet>lst = [x[2].strip()[0:11] for x in [line.split(',') for line in open(fname)]]
</snippet></ROW><ROW><id>1710734</id><snippet>lst = [x[2].strip().split()[0:2] for x in [line.split(',') for line in open(fname)]]
</snippet></ROW><ROW><id>1710734</id><snippet># on each line, get the 3rd comma-delimited field and break out the 
# first two space-separated chunks of the licence key
</snippet></ROW><ROW><id>1711244</id><snippet>/usr/local</snippet></ROW><ROW><id>1711244</id><snippet>./configure --prefix=/usr/local ...</snippet></ROW><ROW><id>1711462</id><snippet>import code
code.interact(local=locals())
</snippet></ROW><ROW><id>1711462</id><snippet>import traceback
traceback.extract_stack()
</snippet></ROW><ROW><id>1711462</id><snippet>def print_trace(func):
    '''This decorator prints the call stack
    '''
    def wrapper(*args,**kwargs):
        stacks=traceback.extract_stack()
        print('\n'.join(
            ['  '*i+'%s %s:%s'%(text,line_number,filename)
             for i,(filename,line_number,function_name,text) in enumerate(stacks)]))
        res = func(*args,**kwargs)
        return res
    return wrapper
</snippet></ROW><ROW><id>1711462</id><snippet>@print_trace
def f():
    pass
</snippet></ROW><ROW><id>1711468</id><snippet>oraocci11.dll</snippet></ROW><ROW><id>1711468</id><snippet>oraocci10.dll</snippet></ROW><ROW><id>1711468</id><snippet>oraclient9.dll</snippet></ROW><ROW><id>1711607</id><snippet>sudo chown -R +r /opt/google_appengine/google_appengine_1.2.7</snippet></ROW><ROW><id>1711950</id><snippet>var1 = (x,y)</snippet></ROW><ROW><id>1711950</id><snippet>var2 = z</snippet></ROW><ROW><id>1711950</id><snippet>matrix[var1][var2]
</snippet></ROW><ROW><id>1711998</id><snippet>InstrumentedAttribute</snippet></ROW><ROW><id>1711998</id><snippet>ColumnProperty</snippet></ROW><ROW><id>1711998</id><snippet>t.colname == getattr(t, Table.colname.property.key)
</snippet></ROW><ROW><id>1711998</id><snippet>Column</snippet></ROW><ROW><id>1711998</id><snippet>Column</snippet></ROW><ROW><id>1711998</id><snippet>Column.key</snippet></ROW><ROW><id>1711998</id><snippet>desc()</snippet></ROW><ROW><id>1711998</id><snippet>ClauseElement</snippet></ROW><ROW><id>1711998</id><snippet>sqlalchemy.sql.expression._UnaryExpression</snippet></ROW><ROW><id>1711998</id><snippet>.modifier</snippet></ROW><ROW><id>1711998</id><snippet>sqlalchemy.sql.operators.desc_op</snippet></ROW><ROW><id>1711998</id><snippet>.element</snippet></ROW><ROW><id>1711998</id><snippet>sqlalchemy.sql.visitors.ReplacingCloningVisitor</snippet></ROW><ROW><id>1712020</id><snippet># Haystack search settings
HAYSTACK_SITECONF = 'project.search_sites'
HAYSTACK_INCLUDE_SPELLING = True
# Haystack backend settings
HAYSTACK_SEARCH_ENGINE = 'solr' # Switch this to 'whoosh' to use that backend instead
if DEBUG:
    HAYSTACK_SOLR_URL = 'solr.development.url'
else:
    HAYSTACK_SOLR_URL = 'solr.production.url'
HAYSTACK_WHOOSH_PATH = os.path.join(PROJECT_ROOT, 'search_index', 'whoosh')
</snippet></ROW><ROW><id>1712127</id><snippet>&gt;&gt;&gt; from datetime import date, timedelta
&gt;&gt;&gt; yesterday = date.today() - timedelta(1)
&gt;&gt;&gt; print yesterday.strftime('%m%d%y')
'110909'
</snippet></ROW><ROW><id>1712152</id><snippet>({
  get * (property) {
    // handle property gets here
  }
})
</snippet></ROW><ROW><id>1712152</id><snippet>set * (property, value) {...}</snippet></ROW><ROW><id>1712236</id><snippet>len</snippet></ROW><ROW><id>1712236</id><snippet>&gt;&gt;len([1,2,3])
3
</snippet></ROW><ROW><id>1712268</id><snippet> [global]
 command-packages=foo.bar
</snippet></ROW><ROW><id>1712268</id><snippet>distutils.cfg</snippet></ROW><ROW><id>1712268</id><snippet>distutils</snippet></ROW><ROW><id>1712268</id><snippet>..pydistutils.cfg</snippet></ROW><ROW><id>1712268</id><snippet>setup.cfg</snippet></ROW><ROW><id>1712268</id><snippet>stage</snippet></ROW><ROW><id>1712614</id><snippet>pdf = pyPdf.PdfFileReader(file(path, "rb"))
content = pdf.getPage(1).extractText()
</snippet></ROW><ROW><id>1712737</id><snippet>from django.db import models
from django.contrib.contenttypes.models import ContentType

class BaseModel(models.Model):
    type = models.ForeignKey(ContentType,editable=False)
    # other base fields here

    def save(self,force_insert=False,force_update=False):
        if self.type_id is None:
            self.type = ContentType.objects.get_for_model(self.__class__)
        super(BaseModel,self).save(force_insert,force_update)

    def get_instance(self):
        return self.type.get_object_for_this_type(id=self.id)
</snippet></ROW><ROW><id>1713052</id><snippet>class B(object):
</snippet></ROW><ROW><id>1713052</id><snippet>super()</snippet></ROW><ROW><id>1713052</id><snippet>(object)</snippet></ROW><ROW><id>1713052</id><snippet>classobj</snippet></ROW><ROW><id>1713052</id><snippet>type</snippet></ROW><ROW><id>1713052</id><snippet>TypeError: super() argument 1 must be type, not classobj</snippet></ROW><ROW><id>1713052</id><snippet>class OldStyle:
    pass

class NewStyle(object):
    pass

print type(OldStyle)  # prints: &lt;type 'classobj'&gt;

print type(NewStyle) # prints &lt;type 'type'&gt;
</snippet></ROW><ROW><id>1713444</id><snippet>TypeError: 'NoneType' object is not iterable</snippet></ROW><ROW><id>1713444</id><snippet>self.accept()</snippet></ROW><ROW><id>1713444</id><snippet>None</snippet></ROW><ROW><id>1713444</id><snippet>EWOULDBLOCK</snippet></ROW><ROW><id>1713444</id><snippet>None</snippet></ROW><ROW><id>1713444</id><snippet>handle_accept()</snippet></ROW><ROW><id>1713444</id><snippet>accept()</snippet></ROW><ROW><id>1713444</id><snippet>None</snippet></ROW><ROW><id>1713613</id><snippet>strptime</snippet></ROW><ROW><id>1713613</id><snippet>time</snippet></ROW><ROW><id>1713613</id><snippet>datetime</snippet></ROW><ROW><id>1713613</id><snippet>import datetime
datetime.datetime.strptime("01-Jan-1995", "%d-%b-%Y")
</snippet></ROW><ROW><id>1713896</id><snippet>'Toy Stroy..(II) (1995)'.rstrip(')').rsplit('(',1)
</snippet></ROW><ROW><id>1713896</id><snippet>r'\s*[(]\d{4}[)]\s*$'</snippet></ROW><ROW><id>1713896</id><snippet>s = ''
l = [s]
match = re.compile(r'\s*[(]\d+[)]\s*$').search(s)
if match is not None:
    l = [s[:len(match.group(0))], s[-len(match.group(0)):].trim]
</snippet></ROW><ROW><id>1714190</id><snippet>import re

def mycmp(version1, version2):
    def normalize(v):
        return [int(x) for x in re.sub(r'(\.0+)*$','', v).split(".")]
    return cmp(normalize(version1), normalize(version2))
</snippet></ROW><ROW><id>1714193</id><snippet>foo</snippet></ROW><ROW><id>1714193</id><snippet>foo/__init__.py</snippet></ROW><ROW><id>1714193</id><snippet>foo.bar</snippet></ROW><ROW><id>1714193</id><snippet>foo.wiz</snippet></ROW><ROW><id>1714193</id><snippet>AttributeError</snippet></ROW><ROW><id>1714193</id><snippet>foo.bar</snippet></ROW><ROW><id>1714193</id><snippet>foo.bar.a</snippet></ROW><ROW><id>1714193</id><snippet>module</snippet></ROW><ROW><id>1714193</id><snippet>foo</snippet></ROW><ROW><id>1714193</id><snippet>foo.bar</snippet></ROW><ROW><id>1714193</id><snippet>a</snippet></ROW><ROW><id>1714193</id><snippet>b</snippet></ROW><ROW><id>1714193</id><snippet>c</snippet></ROW><ROW><id>1714193</id><snippet>foo/bar/__init__.py</snippet></ROW><ROW><id>1714193</id><snippet>foo.bar</snippet></ROW><ROW><id>1714429</id><snippet>setup = """
from Crypto.Cipher import AES
import os
newFile = []
fileData = open('filename').read()
"""
stmt = """
key = os.urandom(32)
cipher = AES.new(key, AES.MODE_CFB)
for lines in fileData:
    newFile = cipher.encrypt(lines)"""

tt = timeit.Timer(stmt, setup)
tt.repeat()
</snippet></ROW><ROW><id>1714506</id><snippet>raw_data, _, _ = line.partition("#")
data= raw_data.strip()
if len(data) == 0:
    continue # or whatever, the data part of the line is empty
# you have data
</snippet></ROW><ROW><id>1714506</id><snippet>raw_data, _, _ = line.partition("#")</snippet></ROW><ROW><id>1714506</id><snippet>raw_data</snippet></ROW><ROW><id>1714506</id><snippet>_</snippet></ROW><ROW><id>1714506</id><snippet>_</snippet></ROW><ROW><id>1714506</id><snippet>_</snippet></ROW><ROW><id>1714506</id><snippet>data, _, _ = line.strip().partition("#")
</snippet></ROW><ROW><id>1714601</id><snippet>&gt;&gt;&gt; re.search('^[-:0-9]+$', "12:24:-14")
&lt;_sre.SRE_Match object at 0x01013758&gt;
&gt;&gt;&gt; re.search('^[-:0-9]+$', "hello")
&gt;&gt;&gt; re.search('^[-:0-9]+$', "hello2")
</snippet></ROW><ROW><id>1714601</id><snippet>+</snippet></ROW><ROW><id>1714601</id><snippet>^</snippet></ROW><ROW><id>1714601</id><snippet>$</snippet></ROW><ROW><id>1714601</id><snippet>\A</snippet></ROW><ROW><id>1714601</id><snippet>\Z</snippet></ROW><ROW><id>1714601</id><snippet>s3</snippet></ROW><ROW><id>1714779</id><snippet>wrap</snippet></ROW><ROW><id>1714779</id><snippet>method = fn</snippet></ROW><ROW><id>1714779</id><snippet>method</snippet></ROW><ROW><id>1714779</id><snippet>open</snippet></ROW><ROW><id>1714779</id><snippet>def wrap(method, exceptions = (OSError, IOError)):
    def fn(*args, **kwargs):
        try:
            return method(*args, **kwargs)
        except exceptions:
            sys.exit('Can\'t open \'{0}\'. Error #{1[0]}: {1[1]}'.format(args[0], sys.exc_info()[1].args))

    return fn

open = wrap(open)
foo = wrap(foo)
</snippet></ROW><ROW><id>1714794</id><snippet>__doc__</snippet></ROW><ROW><id>1715204</id><snippet>through</snippet></ROW><ROW><id>1715204</id><snippet>class Product(models.Model):
    ...

class ProductQuantity(models.Model):
    product = models.ForeignKey('Product')
    invoice = models.ForeignKey('Invoice')
    quantity = models.IntegerField()

class Invoice(models.Model):
    ...
    products = models.ManyToManyField(Product, through=ProductQuantity)
</snippet></ROW><ROW><id>1715913</id><snippet>import re

utf8_detector = re.compile(r"""^(?:
     [\x09\x0A\x0D\x20-\x7E]            # ASCII
   | [\xC2-\xDF][\x80-\xBF]             # non-overlong 2-byte
   |  \xE0[\xA0-\xBF][\x80-\xBF]        # excluding overlongs
   | [\xE1-\xEC\xEE\xEF][\x80-\xBF]{2}  # straight 3-byte
   |  \xED[\x80-\x9F][\x80-\xBF]        # excluding surrogates
   |  \xF0[\x90-\xBF][\x80-\xBF]{2}     # planes 1-3
   | [\xF1-\xF3][\x80-\xBF]{3}          # planes 4-15
   |  \xF4[\x80-\x8F][\x80-\xBF]{2}     # plane 16
  )*$""", re.X)
</snippet></ROW><ROW><id>1716173</id><snippet>socket.recv(x)</snippet></ROW><ROW><id>1716173</id><snippet>socket.recv(1024)</snippet></ROW><ROW><id>1716173</id><snippet>socket.recv()</snippet></ROW><ROW><id>1716173</id><snippet>socket.recv()</snippet></ROW><ROW><id>1716173</id><snippet>data = self.request.recv(1024)
</snippet></ROW><ROW><id>1716173</id><snippet>data = self.request.recv()
</snippet></ROW><ROW><id>1716173</id><snippet>recv()</snippet></ROW><ROW><id>1716173</id><snippet>socket.ntohs()</snippet></ROW><ROW><id>1716173</id><snippet>socket.ntohl()</snippet></ROW><ROW><id>1716173</id><snippet>recv()</snippet></ROW><ROW><id>1716173</id><snippet>length = None
buffer = ""
while True:
  data += self.request.recv()
  if not data:
    break
  buffer += data
  while True:
    if length is None:
      if ':' not in buffer:
        break
      # remove the length bytes from the front of buffer
      # leave any remaining bytes in the buffer!
      length_str, ignored, buffer = buffer.partition(':')
      length = int(length_str)

    if len(buffer) &lt; length:
      break
    # split off the full message from the remaining bytes
    # leave any remaining bytes in the buffer!
    message = buffer[:length]
    buffer = buffer[length:]
    length = None
    # PROCESS MESSAGE HERE
</snippet></ROW><ROW><id>1716375</id><snippet>import</snippet></ROW><ROW><id>1716375</id><snippet>import foo
</snippet></ROW><ROW><id>1716375</id><snippet>foo = __import__('foo', globals(), locals(), [], -1)
</snippet></ROW><ROW><id>1716375</id><snippet>__import__()</snippet></ROW><ROW><id>1716375</id><snippet>__import__()</snippet></ROW><ROW><id>1716375</id><snippet>'foo'</snippet></ROW><ROW><id>1716375</id><snippet>sys.modules</snippet></ROW><ROW><id>1716375</id><snippet>__import__()</snippet></ROW><ROW><id>1716375</id><snippet>'foo'</snippet></ROW><ROW><id>1716375</id><snippet>__import__('foo')</snippet></ROW><ROW><id>1716375</id><snippet>import sys
sys.modules['boop'] = (1, 2, 3)
import boop
print boop
</snippet></ROW><ROW><id>1716375</id><snippet>import</snippet></ROW><ROW><id>1716464</id><snippet>class Throw(object): pass
throw = Throw() # easy sentinel hack
def next(iterator, default=throw):
  """next(iterator[, default])

  Return the next item from the iterator. If default is given
  and the iterator is exhausted, it is returned instead of
  raising StopIteration.
  """
  try:
    iternext = iterator.next.__call__
    # this way an AttributeError while executing next() isn't hidden
    # (2.6 does this too)
  except AttributeError:
    raise TypeError("%s object is not an iterator" % type(iterator).__name__)
  try:
    return iternext()
  except StopIteration:
    if default is throw:
      raise
    return default
</snippet></ROW><ROW><id>1716464</id><snippet>throw = object()</snippet></ROW><ROW><id>1716464</id><snippet>help(next)</snippet></ROW><ROW><id>1716464</id><snippet>None</snippet></ROW><ROW><id>1716464</id><snippet>next(it)</snippet></ROW><ROW><id>1716464</id><snippet>next(it, None)</snippet></ROW><ROW><id>1716919</id><snippet>DJANGO_SETTINGS_MODULE</snippet></ROW><ROW><id>1716986</id><snippet>is not</snippet></ROW><ROW><id>1716986</id><snippet>!=</snippet></ROW><ROW><id>1716986</id><snippet>not loja</snippet></ROW><ROW><id>1716986</id><snippet>True</snippet></ROW><ROW><id>1716986</id><snippet>objecto.loja</snippet></ROW><ROW><id>1716986</id><snippet>True</snippet></ROW><ROW><id>1717064</id><snippet>repr</snippet></ROW><ROW><id>1717064</id><snippet>eval</snippet></ROW><ROW><id>1717112</id><snippet>images.resize(data, width=188)</snippet></ROW><ROW><id>1717518</id><snippet>import time
class something(object):
    def __init__(self,c):
        self.c=c
    def inc(self):
        new = self.c+1 
        # if the thread is interrupted by another inc() call its result is wrong
        time.sleep(0.001) # sleep makes the os continue another thread
        self.c = new


x = something(0)
import threading

for _ in range(10000):
    threading.Thread(target=x.inc).start()

print x.c # ~900 here, instead of 10000
</snippet></ROW><ROW><id>1717810</id><snippet>{{ nhl_form.league }}
</snippet></ROW><ROW><id>1717810</id><snippet>league</snippet></ROW><ROW><id>1718041</id><snippet>; the below section must remain in the config file for RPC
; (supervisorctl/web interface) to work, additional interfaces may be
; added by defining them in separate rpcinterface: sections
[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface
</snippet></ROW><ROW><id>1718313</id><snippet>main()</snippet></ROW><ROW><id>1718313</id><snippet>import logging

def main():
    raise Exception("Hey!")

logging.basicConfig(level=logging.DEBUG, filename='/tmp/myapp.log')

try:
    main()
except:
    logging.exception("Oops:")
</snippet></ROW><ROW><id>1718313</id><snippet>logging.exception</snippet></ROW><ROW><id>1718313</id><snippet>ERROR:root:Oops:
Traceback (most recent call last):
  File "C:\foo\foo.py", line 9, in &lt;module&gt;
    main()
  File "C:\foo\foo.py", line 4, in main
    raise Exception("Hey!")
Exception: Hey!
</snippet></ROW><ROW><id>1718688</id><snippet>appendNextFib()</snippet></ROW><ROW><id>1718688</id><snippet>appendNextFib</snippet></ROW><ROW><id>1718902</id><snippet>parser = etree.XMLParser(load_dtd=True, no_network=False)
</snippet></ROW><ROW><id>1718902</id><snippet>no_network</snippet></ROW><ROW><id>1718902</id><snippet>True</snippet></ROW><ROW><id>1718913</id><snippet>csvfile</snippet></ROW><ROW><id>1718913</id><snippet>csv.DictReader</snippet></ROW><ROW><id>1718913</id><snippet>fieldnames</snippet></ROW><ROW><id>1718913</id><snippet>restkey</snippet></ROW><ROW><id>1718913</id><snippet>cvsfile</snippet></ROW><ROW><id>1718913</id><snippet>dialect</snippet></ROW><ROW><id>1718913</id><snippet>csv.DictReader(file('test.csv'), dialect='excel_tab')
</snippet></ROW><ROW><id>1719225</id><snippet>jQuery.post(toLoad, formInput,
  function(data, textStatus) {
    // now check if data is set and what the status is
    alert(data);
    alert(textStatus);
    //alert(data.getElementsByTagName("building"));
  },
  'xml'
);
</snippet></ROW><ROW><id>1719225</id><snippet>Content-Length: 0</snippet></ROW><ROW><id>1719271</id><snippet>range(1, times)</snippet></ROW><ROW><id>1719271</id><snippet>range(times)</snippet></ROW><ROW><id>1719271</id><snippet>for (int i=1; i &lt; times; i++)</snippet></ROW><ROW><id>1719271</id><snippet>if (i &lt; times)</snippet></ROW><ROW><id>1719271</id><snippet>True</snippet></ROW><ROW><id>1719271</id><snippet>except</snippet></ROW><ROW><id>1719271</id><snippet>def wait_p_long(times, compID_name, ppty_name, ppty_value, compID_cell=None):
    from marathon.playback import *
    """
    Wrapper around wait_p which takes exactly the same parameters as wait_p,
    except that an extra first parameter is used to specify the number of times
    wait_p is called.
    """
    for i in range(times):
        try:
            wait_p(compID_name, ppty_name, ppty_value, compID_cell)
        except:
            if i == times - 1:
                raise
            else:
                print "wait_p failed, trying again"
</snippet></ROW><ROW><id>1719639</id><snippet>__get__</snippet></ROW><ROW><id>1719639</id><snippet>invalidate</snippet></ROW><ROW><id>1719639</id><snippet>__get__</snippet></ROW><ROW><id>1719639</id><snippet>im_self</snippet></ROW><ROW><id>1719757</id><snippet>sock</snippet></ROW><ROW><id>1719757</id><snippet>connections[sock]</snippet></ROW><ROW><id>1719757</id><snippet>accounts[account_id]</snippet></ROW><ROW><id>1719757</id><snippet>connected = {}
accounts = {}

def load_account(acct):
    return db_magic(acct)                             # Grab a dictionary from the DB

def somebody_connected(sck, acct):
    global connected, accounts
    account = load_account(acct)
    connected[sck] = account                          # Now we have it by socket
    accounts[acct["accountid"]] = account             # Now we have it by account ID
</snippet></ROW><ROW><id>1719757</id><snippet>account</snippet></ROW><ROW><id>1719757</id><snippet>def update_username(acct_id, new_username):
    accounts[acct_id]["username"] = new_username

def what_is_my_username(sck):
    sck.send(connected[sck]["username"])              # In response to GIMME_USERNAME
</snippet></ROW><ROW><id>1719757</id><snippet>update_username</snippet></ROW><ROW><id>1719757</id><snippet>sck.send</snippet></ROW><ROW><id>1719903</id><snippet>&gt;&gt;&gt;from decimal import Decimal, getcontext
&gt;&gt;&gt;getcontext().prec = 50
&gt;&gt;&gt;x = Decimal(1)/Decimal(7)
&gt;&gt;&gt;x
Decimal('0.14285714285714285714285714285714285714285714285714')
&gt;&gt;&gt;str(x)
'0.14285714285714285714285714285714285714285714285714'
</snippet></ROW><ROW><id>1719984</id><snippet>data="""AB 500
Bus AB 500
News CA
News CA BLAH"""

def getCombinations(tokens):
    count = len(tokens)
    for L in range(1,count+1):
        for i in range(count-L+1):
            yield tuple(tokens[i:i+L])

groupDict = {}
for s in data.split("\n"):
    tokens = s.split()
    for groupKey in getCombinations(tokens):
        if groupKey not in groupDict:
            groupDict[groupKey] = [s]
        else:
            groupDict[groupKey].append(s)

for group, values in groupDict.iteritems():
    if len(values) &gt; 1:
        print group, "-&gt;", values
</snippet></ROW><ROW><id>1719984</id><snippet>('News', 'CA') -&gt; ['News CA', 'News CA BLAH']
('AB',) -&gt; ['AB 500', 'Bus AB 500']
('500',) -&gt; ['AB 500', 'Bus AB 500']
('CA',) -&gt; ['News CA', 'News CA BLAH']
('AB', '500') -&gt; ['AB 500', 'Bus AB 500']
('News',) -&gt; ['News CA', 'News CA BLAH']
</snippet></ROW><ROW><id>1720007</id><snippet>exit</snippet></ROW><ROW><id>1720102</id><snippet>import sys
from PyQt4 import QtGui
from PIL import Image

def get_pil_image(w, h):
    clr = chr(0)+chr(255)+chr(0)
    im = Image.fromstring("RGB", (w,h), clr*(w*h))
    return im

def pil2qpixmap(pil_image):
    w, h = pil_image.size
    data = pil_image.tostring("raw", "BGRX")
    qimage = QtGui.QImage(data, w, h, QtGui.QImage.Format_RGB32)
    qpixmap = QtGui.QPixmap(w,h)
    pix = QtGui.QPixmap.fromImage(qimage)
    return pix

class ImageLabel(QtGui.QLabel):
    def __init__(self, parent=None):
        QtGui.QLabel.__init__(self, parent)

        self.setGeometry(300, 300, 250, 150)
        self.setWindowTitle('Window')

        self.pix = pil2qpixmap(get_pil_image(50,50))
        self.setPixmap(self.pix)

app = QtGui.QApplication(sys.argv)
imageLabel = ImageLabel()
imageLabel.show()
sys.exit(app.exec_())
</snippet></ROW><ROW><id>1720192</id><snippet>sys.platform != 'win32'</snippet></ROW><ROW><id>1720330</id><snippet>$ dname=mydirectory
$ echo ${dname:4}
rectory
</snippet></ROW><ROW><id>1720432</id><snippet>mergedlist = listone + listtwo
</snippet></ROW><ROW><id>1720575</id><snippet># This separates the first and last names
name = name.partition(" ")
firstName = name[0]
# now figure out the first initial
# we're assuming that if it has a dot it's an initialized name,
# but this may not hold in general
if "." in firstName:
    firstInitial = firstName
else:
    firstInitial = firstName[0] + "."
lastName = name[2]
return {"FirstName":firstName, "FirstInitial":firstInitial, "LastName": lastName}
</snippet></ROW><ROW><id>1720791</id><snippet>SSH_AUTH_SOCK</snippet></ROW><ROW><id>1720791</id><snippet>SSH_AGENT_PID</snippet></ROW><ROW><id>1720791</id><snippet>$HOME/.ssh/known_hosts</snippet></ROW><ROW><id>1720791</id><snippet>eval $(ssh-agent)
ssh-add path-to-your-private-key
</snippet></ROW><ROW><id>1720791</id><snippet>path-to-your-private-key</snippet></ROW><ROW><id>1720791</id><snippet>ssh-add</snippet></ROW><ROW><id>1720806</id><snippet>System.out.println(java.util.Arrays.toString(getName));</snippet></ROW><ROW><id>1720806</id><snippet>toString()</snippet></ROW><ROW><id>1720913</id><snippet>def inc(self):
    v = self.c
    time.sleep(random.random()) # Should probably limit it to a few hundred ms
    self.c = v + 1

def dec(self):
    v = self.c
    time.sleep(random.random()) # Should probably limit it to a few hundred ms
    self.c = v - 1
</snippet></ROW><ROW><id>1721526</id><snippet>time you-prg-executable</snippet></ROW><ROW><id>1721526</id><snippet>time</snippet></ROW><ROW><id>1721538</id><snippet>subprocess.call</snippet></ROW><ROW><id>1721768</id><snippet>twisted.manhole.telnet</snippet></ROW><ROW><id>1721768</id><snippet>twisted.protocols.telnet</snippet></ROW><ROW><id>1721768</id><snippet>twisted.conch.manhole</snippet></ROW><ROW><id>1721833</id><snippet>#!/usr/bin/env python
import numpy as np

a=np.fromfile(open('file','r'),sep='\n')
# [ 0.     0.005  0.124  0.     0.004  0.     0.111  0.112]

# You can set arbitrary bin edges:
bins=[0,0.150]
hist,bin_edges=np.histogram(a,bins=bins)
# hist: [8]
# bin_edges: [ 0.    0.15]

#Or, if bin is an integer, you can set the number of bins:
bins=4
hist,bin_edges=np.histogram(a,bins=bins)
# hist: [5 0 0 3]
# bin_edges: [ 0.     0.031  0.062  0.093  0.124]
</snippet></ROW><ROW><id>1721909</id><snippet>foo</snippet></ROW><ROW><id>1721909</id><snippet>def f(foo, bar):
    g(foo=foo)
</snippet></ROW><ROW><id>1722141</id><snippet>q.filter(start_date__gt=pay_period.start_date).order_by("start_date")
</snippet></ROW><ROW><id>1722915</id><snippet>path[0]</snippet></ROW><ROW><id>1723086</id><snippet>common = set(x[0])
for l in x[1:]:
    common &amp;= set(l)
print list(common)
</snippet></ROW><ROW><id>1723086</id><snippet>import operator
print reduce(operator.iand, map(set, x))
</snippet></ROW><ROW><id>1723169</id><snippet>reactor.stop</snippet></ROW><ROW><id>1723169</id><snippet>root.quit()</snippet></ROW><ROW><id>1723169</id><snippet>root.destroy()</snippet></ROW><ROW><id>1723169</id><snippet>import Tkinter
from twisted.internet import tksupport

root = Tkinter.Tk()
tksupport.install(root)

from twisted.internet import reactor
reactor.callLater(3, reactor.stop)
reactor.run()
</snippet></ROW><ROW><id>1723560</id><snippet>[x for x in list1 if x not in set(list2)]
</snippet></ROW><ROW><id>1723560</id><snippet>list2_set = set([tuple(x) for x in list2])
diff = [x for x in list1 if tuple(x) not in list2_set]
</snippet></ROW><ROW><id>1723560</id><snippet>list1 = [[x+1, x*2] for x in range(38000)]
list2 = [[x+1, x*2] for x in range(10000, 160000)]
</snippet></ROW><ROW><id>1723560</id><snippet> #Original function
 real    2m16.780s
 user    2m16.744s
 sys     0m0.017s

 #My function
 real    0m0.433s
 user    0m0.423s
 sys     0m0.007s
</snippet></ROW><ROW><id>1724088</id><snippet>Location: ${project_loc}/src/${project_name}/manage.py
Working Directory: ${project_loc}/src/${project_name}/
Arguments: test ${string_prompt}
</snippet></ROW><ROW><id>1724088</id><snippet>project_loc</snippet></ROW><ROW><id>1724088</id><snippet>project_name</snippet></ROW><ROW><id>1724104</id><snippet>channel_values = open(channel_output_file).read().split()
</snippet></ROW><ROW><id>1724341</id><snippet>class SomeClass(db.Model):
  item = None

class AnotherClass(db.Model):
  otherItem = db.ReferenceProperty(SomeClass)

SomeClass.item = db.ReferenceProperty(AnotherClass)
</snippet></ROW><ROW><id>1724410</id><snippet>repmat(a, m, n)</snippet></ROW><ROW><id>1724410</id><snippet>tile(a, (m, n))</snippet></ROW><ROW><id>1724410</id><snippet>&gt;&gt; repmat([1;1],[1,1,1])

ans =
     1
     1
</snippet></ROW><ROW><id>1724410</id><snippet>In [46]: a = np.array([[1],[1]])
In [47]: np.tile(a, [1,1,1])
Out[47]: 
array([[[1],
        [1]]])
</snippet></ROW><ROW><id>1724485</id><snippet>chr</snippet></ROW><ROW><id>1724485</id><snippet>ord</snippet></ROW><ROW><id>1724485</id><snippet>chr(ord('a') + 5)
</snippet></ROW><ROW><id>1724485</id><snippet>'f'</snippet></ROW><ROW><id>1724622</id><snippet>dict</snippet></ROW><ROW><id>1724622</id><snippet>set</snippet></ROW><ROW><id>1724622</id><snippet>tuple</snippet></ROW><ROW><id>1724622</id><snippet>dict</snippet></ROW><ROW><id>1724622</id><snippet>tuple</snippet></ROW><ROW><id>1724622</id><snippet>dict</snippet></ROW><ROW><id>1724622</id><snippet>dict</snippet></ROW><ROW><id>1724622</id><snippet>tuple</snippet></ROW><ROW><id>1724622</id><snippet>tuple(sorted(map.items()))</snippet></ROW><ROW><id>1724622</id><snippet>tuple</snippet></ROW><ROW><id>1724622</id><snippet>dict</snippet></ROW><ROW><id>1724622</id><snippet>def removeDups(list1, list2):
    set1 = set(tuple(sorted(x.items())) for x in list1)
    set2 = set(tuple(sorted(x.items())) for x in list2)

    return set1 - set2
</snippet></ROW><ROW><id>1724689</id><snippet>Person.objects.exclude(id__in=Person.objects.filter(project=p, status__is_red=True).values(id))
</snippet></ROW><ROW><id>1724723</id><snippet>import os

def find(name, path):
    for root, dirs, files in os.walk(path):
        if name in files:
            return os.path.join(root, name)
</snippet></ROW><ROW><id>1724723</id><snippet>def find_all(name, path):
    result = []
    for root, dirs, files in os.walk(path):
        if name in files:
            result.append(os.path.join(root, name))
    return result
</snippet></ROW><ROW><id>1724723</id><snippet>import os, fnmatch
def find(pattern, path):
    result = []
    for root, dirs, files in os.walk(path):
        for name in files:
            if fnmatch.fnmatch(name, pattern):
                result.append(os.path.join(root, name))
    return result

find('*.txt', '/path/to/dir')
</snippet></ROW><ROW><id>1724900</id><snippet>def splitter( s, points ):
    c = 0
    for x,y in points:
        yield s[c:x]
        yield "(%s)" % s[x:y+1]
        c=y+1
    yield s[c:]

print list(splitter(str, split_points))
# =&gt; ['M', '(SEP)', 'AGD', '(VRQN)', 'P', '(CG)', 'SKAC']

# if some start and endpoints are the same remove empty strings.
print list(x for x in splitter(str, split_points) if x != '')
</snippet></ROW><ROW><id>1725028</id><snippet>pic = StringIO.StringIO(pic)
</snippet></ROW><ROW><id>1725377</id><snippet>//input</snippet></ROW><ROW><id>1725377</id><snippet>.//input</snippet></ROW><ROW><id>1725397</id><snippet>setUp</snippet></ROW><ROW><id>1725397</id><snippet>s</snippet></ROW><ROW><id>1725414</id><snippet>save</snippet></ROW><ROW><id>1725414</id><snippet>class MyThing( models.Model )
    color = models.CharField(...)
    def save( self, *args, **kw ):
        if self.color.startswith("#"):
            self.color= self.color[1:]
        super( MyThing, self ).save( *args, **kw )
</snippet></ROW><ROW><id>1725513</id><snippet># in the views.py:
field = 'business'


{# in the template: #}
{{ object.field }}
</snippet></ROW><ROW><id>1725513</id><snippet>object.business</snippet></ROW><ROW><id>1725524</id><snippet>if not myList:
  print "Nothing here"
</snippet></ROW><ROW><id>1725604</id><snippet>""" my module test does x and y
"""
class myclass(object):
    ...
</snippet></ROW><ROW><id>1725604</id><snippet>import testmodule
print testmodule.__doc__
</snippet></ROW><ROW><id>1725604</id><snippet>__repr__</snippet></ROW><ROW><id>1725604</id><snippet>def __repr__(...</snippet></ROW><ROW><id>1725604</id><snippet>import mymodule
print mymodule.__repr__()
</snippet></ROW><ROW><id>1725604</id><snippet>&gt;&gt;&gt; import sys                 # we import the module
&gt;&gt;&gt; sys.__repr__()               # works as usual
"&lt;module 'sys' (built-in)&gt;"
&gt;&gt;&gt; sys.__dict__['__repr__']     # but it's not in the modules __dict__ ?
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
KeyError: '__repr__'
&gt;&gt;&gt; sys.__class__.__dict__['__repr__'] # __repr__ is provided on the module type as a slot wrapper
&lt;slot wrapper '__repr__' of 'module' objects&gt;
&gt;&gt;&gt; sys.__class__.__dict__['__repr__'](sys) # which we should feed an instance of the module type
"&lt;module 'sys' (built-in)&gt;"
</snippet></ROW><ROW><id>1725769</id><snippet>json.load</snippet></ROW><ROW><id>1725769</id><snippet>{'abc': 'def'}</snippet></ROW><ROW><id>1725769</id><snippet>dict</snippet></ROW><ROW><id>1725769</id><snippet>mydict['abc']</snippet></ROW><ROW><id>1725769</id><snippet>myobj.abc</snippet></ROW><ROW><id>1725769</id><snippet>mydict.keys()</snippet></ROW><ROW><id>1725769</id><snippet>['abc']</snippet></ROW><ROW><id>1725769</id><snippet>for k in mydict:</snippet></ROW><ROW><id>1725769</id><snippet>k</snippet></ROW><ROW><id>1725833</id><snippet>time.sleep(N)</snippet></ROW><ROW><id>1725833</id><snippet>ctypes</snippet></ROW><ROW><id>1725833</id><snippet>def unbiasedsleep(n):
  start = kernel32.QueryUnbiasedInterruptTime()
  target = start + n * 10 * 1000 * 1000
  while True:
    timeleft = target - kernel32.QueryUnbiasedInterruptTime()
    if timeleft &gt; 0:
      time.sleep(timeleft / (10 * 1000 * 1000.0))
</snippet></ROW><ROW><id>1726102</id><snippet>#_addanother { display: none }
</snippet></ROW><ROW><id>1726102</id><snippet>class YourAdmin(admin.ModelAdmin):
    # ...
    class Media:
        # edit this path to wherever
        css = { 'all' : ('css/no-addanother-button.css',) }
</snippet></ROW><ROW><id>1726102</id><snippet>class YourAdmin(admin.ModelAdmin):
    # ...
    class Media:
        from django.conf import settings
        media_url = getattr(settings, 'MEDIA_URL', '/media/')
        # edit this path to wherever
        css = { 'all' : (media_url+'css/no-addanother-button.css',) }
</snippet></ROW><ROW><id>1726138</id><snippet>cherrypy.config.update({
  'tools.sessions.on': True
})
return cherrypy.tree.mount(Root(), '/', config=path_to_config)
</snippet></ROW><ROW><id>1726372</id><snippet>&gt;&gt;&gt; compile("cubic_fit(1, 2, get_data())", '&lt;string&gt;', 'eval').co_names
('cubic_fit', 'get_data')
</snippet></ROW><ROW><id>1726431</id><snippet>&gt;&gt;&gt; a=urllib.urlopen('http://www.google.com/asdfsf')
&gt;&gt;&gt; a.getcode()
404
&gt;&gt;&gt; a=urllib.urlopen('http://www.google.com/')
&gt;&gt;&gt; a.getcode()
200
</snippet></ROW><ROW><id>1726619</id><snippet>p.stdin.close()
</snippet></ROW><ROW><id>1726633</id><snippet>testInitializeSetsUpChessBoardCorrectly()
testSuccessfulPromotionAddsCorrectPiece()
</snippet></ROW><ROW><id>1726633</id><snippet>testCanMoveStraightUpWhenNotBlocked()
testCanMoveStraightLeftWhenNotBlocked()
</snippet></ROW><ROW><id>1726633</id><snippet>Queen requirements:
 - can move straight up when not blocked.
 - can move straight left when not blocked.
</snippet></ROW><ROW><id>1726679</id><snippet>{% for key, value in hop.items %}
    {% ifequal key 'boil time' %}
        {{ value }}
    {% endifequal %}
{% endfor %}
</snippet></ROW><ROW><id>1726679</id><snippet>{% for hop in hops %}
    &lt;tr&gt;
        &lt;td&gt;{{ hop.name }}&lt;/td&gt;
        &lt;td&gt;{{ hop.mass }}&lt;/td&gt;
        &lt;td&gt;
            {% for item in hop.items %}
                {% ifequal item.0 'boil time' %}
                    {{ item.1 }}
                {% endifequal %}
            {% endfor %}
        &lt;/td&gt;
    &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>1726679</id><snippet>{% for hop in hops %}
    &lt;tr&gt;
        &lt;td&gt;{{ hop.name }}&lt;/td&gt;
        &lt;td&gt;{{ hop.mass }}&lt;/td&gt;
        &lt;td&gt;
            {% for key, value in hop.items %}
                {% ifequal key 'boil time' %}
                    {{ value }}
                {% endifequal %}
            {% endfor %}
        &lt;/td&gt;
    &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>1726679</id><snippet>{% for hop in hops %}
    &lt;tr&gt;
        &lt;td&gt;{{ hop.name }}&lt;/td&gt;
        &lt;td&gt;{{ hop.mass }}&lt;/td&gt;
        &lt;td&gt;
            {% for item in hop.items %}
                {% ifequal item.0 'boil time' %}
                    {{ item.1 }}
                {% endifequal %}
            {% endfor %}
        &lt;/td&gt;
    &lt;/tr&gt;
{% endfor %}
</snippet></ROW><ROW><id>1726679</id><snippet>{% regroup hop.items by 'boil time' as bt %}
    {% for item in bt %}
        {% if forloop.first %}
            {% for item2 in item.list %}
                {% for item3 in item2 %}
                    {% if not forloop.first %}
                        {{ item3 }}
                    {% endif %}
                {% endfor %}
            {% endfor %}
        {% endif %}
{% endfor %}
</snippet></ROW><ROW><id>1726724</id><snippet>__del__()</snippet></ROW><ROW><id>1726724</id><snippet>__setattr__()</snippet></ROW><ROW><id>1726724</id><snippet>__delattr__()</snippet></ROW><ROW><id>1726724</id><snippet>del(object.x)</snippet></ROW><ROW><id>1726724</id><snippet>x</snippet></ROW><ROW><id>1726724</id><snippet>__setattr__()</snippet></ROW><ROW><id>1726724</id><snippet>__delattr__()</snippet></ROW><ROW><id>1726960</id><snippet>inputdata</snippet></ROW><ROW><id>1726960</id><snippet>from itertools import groupby
from operator import itemgetter

inputdata.sort(key=itemgetter(*inputdata[0])) # ensures order
print [k for k, g in groupby(inputdata) if len(list(g)) &gt; 1]
</snippet></ROW><ROW><id>1726960</id><snippet>[{'line': u'line 666', 'file': u'/file.txt', 'rule': u'A DUPLICATE RULE'}]
</snippet></ROW><ROW><id>1727552</id><snippet>/(https?:[;\/?\\@&amp;=+$,\[\]A-Za-z0-9\-_\.\!\~\*\'\(\)%][\;\/\?\:\@\&amp;\=\+\$\,\[\]A-Za-z0-9\-_\.\!\~\*\'\(\)%#]*|[KZ]:\\*.*\w+)/g
</snippet></ROW><ROW><id>1727552</id><snippet>import re

urlfinder = re.compile("([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}|((news|telnet|nttp|file|http|ftp|https)://)|(www|ftp)[-A-Za-z0-9]*\\.)[-A-Za-z0-9\\.]+):[0-9]*)?/[-A-Za-z0-9_\\$\\.\\+\\!\\*\\(\\),;:@&amp;=\\?/~\\#\\%]*[^]'\\.}&gt;\\),\\\"]")

def urlify2(value):
    return urlfinder.sub(r'&lt;a href="\1"&gt;\1&lt;/a&gt;', value)
</snippet></ROW><ROW><id>1727685</id><snippet>class UserProfileForm(forms.ModelForm):
    first_name = forms.CharField(label=_(u'Prénom'), max_length=30)
    last_name = forms.CharField(label=_(u'Nom'), max_length=30)

    def __init__(self, *args, **kw):
        super(UserProfileForm, self).__init__(*args, **kw)
        self.fields['first_name'].initial = self.instance.user.first_name
        self.fields['last_name'].initial = self.instance.user.last_name

        self.fields.keyOrder = [
            'first_name',
            'last_name',
            ...some_other...
            ]

    def save(self, *args, **kw):
        super(UserProfileForm, self).save(*args, **kw)
        self.instance.user.first_name = self.cleaned_data.get('first_name')
        self.instance.user.last_name = self.cleaned_data.get('last_name')
        self.instance.user.save()

    class Meta:
        model = UserProfile
</snippet></ROW><ROW><id>1728003</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>1728003</id><snippet>export DYLD_FRAMEWORK_PATH=/opt/local/Library/Frameworks
</snippet></ROW><ROW><id>1728092</id><snippet>d3 = vstack([ d1[newaxis,...], d2[newaxis,...] ])  # shape = (2, 18, 18)
</snippet></ROW><ROW><id>1728092</id><snippet>d1[newaxis,...].shape == (1, 18, 18)</snippet></ROW><ROW><id>1728092</id><snippet>d3</snippet></ROW><ROW><id>1728386</id><snippet>os.popen("ps -p %d -oppid=" % os.getppid()).read().strip()
</snippet></ROW><ROW><id>1728749</id><snippet>for lines in data</snippet></ROW><ROW><id>1728749</id><snippet>encrypt</snippet></ROW><ROW><id>1729047</id><snippet>if "exam" in "example": print "yes!"
</snippet></ROW><ROW><id>1729047</id><snippet>if</snippet></ROW><ROW><id>1729359</id><snippet>upload_storage = FileSystemStorage(location=UPLOAD_ROOT, base_url='/uploads')

image = models.ImageField(upload_to='/images', storage=upload_storage)
</snippet></ROW><ROW><id>1729554</id><snippet>to_python</snippet></ROW><ROW><id>1729554</id><snippet>get_db_prep_value</snippet></ROW><ROW><id>1729554</id><snippet>models.SubfieldBase</snippet></ROW><ROW><id>1730437</id><snippet>from pylab import *
from matplotlib.ticker import MultipleLocator, FormatStrFormatter

t = arange(0.0, 100.0, 0.1)
s = sin(0.1*pi*t)*exp(-t*0.01)

ax = subplot(111)
plot(t,s)

ax.xaxis.set_major_locator(MultipleLocator(20))
ax.xaxis.set_major_formatter(FormatStrFormatter('%d'))
ax.xaxis.set_minor_locator(MultipleLocator(5))

ax.yaxis.set_major_locator(MultipleLocator(0.5))
ax.yaxis.set_minor_locator(MultipleLocator(0.1))

ax.xaxis.grid(True,'minor')
ax.yaxis.grid(True,'minor')
ax.xaxis.grid(True,'major',linewidth=2)
ax.yaxis.grid(True,'major',linewidth=2)

show()
</snippet></ROW><ROW><id>1730492</id><snippet>foo.__module__</snippet></ROW><ROW><id>1730492</id><snippet>bar</snippet></ROW><ROW><id>1730492</id><snippet>sys.modules['bar']</snippet></ROW><ROW><id>1730492</id><snippet>__file__</snippet></ROW><ROW><id>1730492</id><snippet>__package__</snippet></ROW><ROW><id>1730787</id><snippet>dict</snippet></ROW><ROW><id>1730787</id><snippet>dict</snippet></ROW><ROW><id>1730787</id><snippet>__dict__</snippet></ROW><ROW><id>1730787</id><snippet>&gt;&gt;&gt; class struct(dict):
...     def __getattribute__(self, key):
...         return self[key]
... 
&gt;&gt;&gt; s = struct(a=5, b=7)
&gt;&gt;&gt; s.a
5
</snippet></ROW><ROW><id>1730787</id><snippet>__getattribute__</snippet></ROW><ROW><id>1730787</id><snippet>__getattr__</snippet></ROW><ROW><id>1730787</id><snippet>get</snippet></ROW><ROW><id>1730787</id><snippet>keys</snippet></ROW><ROW><id>1730787</id><snippet>dict</snippet></ROW><ROW><id>1730787</id><snippet>__getattribute__</snippet></ROW><ROW><id>1730787</id><snippet>&gt;&gt;&gt; def struct(**kwargs):
...     return type('Struct', (object,), kwargs)
... 
&gt;&gt;&gt; s = struct(a=5, b=7)
&gt;&gt;&gt; s.a
5
</snippet></ROW><ROW><id>1730990</id><snippet>def iscomment(s):
   return s.startswith('#')

from itertools import dropwhile
with open(filename, 'r') as f:
    for line in dropwhile(iscomment, f):
       # do something with line
</snippet></ROW><ROW><id>1730990</id><snippet>#</snippet></ROW><ROW><id>1730990</id><snippet>#</snippet></ROW><ROW><id>1730990</id><snippet>from itertools import ifilterfalse
with open(filename, 'r') as f:
    for line in ifilterfalse(iscomment, f):
       # do something with line
</snippet></ROW><ROW><id>1730990</id><snippet>for line in ifilterfalse(iscomment, f))
</snippet></ROW><ROW><id>1730990</id><snippet>for line in (x for x in f if not x.startswith('#'))
</snippet></ROW><ROW><id>1731045</id><snippet>import re
pnumber = re.sub("[^0-9]", "", input_number)
if pnumber[0] == 1:
    pnumber = pnumber[1:]#strip 1st char if it's a 1

#insert the dashes
if len(pnumber) == 10:
    pnumber = "%s-%s-%s" % (pnumber[:3],pnumber[3:6],pnumber[6:])
else:
    #throw error
</snippet></ROW><ROW><id>1731180</id><snippet>f1 = open ('car_names.txt')
f2 = open ('car_descriptions.txt')
for car_name in f1.readlines ():
        for i in range (6):   # echo the first 6 lines
                print f2.readline ()
        assert f2.readline() == '@CAR_NAME'  # skip the 7th, but assert that it is @CAR_NAME
        print car_name    # print the real car name
        for i in range (33):  # print the remaining 33 of the original 40
               print f2.readline ()
</snippet></ROW><ROW><id>1731373</id><snippet>MyModel.objects.order_by('?')[:2] # 2 random results.
</snippet></ROW><ROW><id>1731388</id><snippet>import httplib
c = httplib.HTTPConnection(&lt;hostname&gt;)
c.request("HEAD", &lt;url&gt;)
print c.getresponse().status
</snippet></ROW><ROW><id>1731800</id><snippet>HEAD</snippet></ROW><ROW><id>1731800</id><snippet>urlparse</snippet></ROW><ROW><id>1731800</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; import urlparse
&gt;&gt;&gt; url = "http://www.google.com/index.html"
&gt;&gt;&gt; (scheme, netloc, path, params, query, fragment) = urlparse.urlparse(url)
&gt;&gt;&gt; conn = httplib.HTTPConnection(netloc)
&gt;&gt;&gt; conn.request("HEAD", urlparse.urlunparse(('', '', path, params, query, fragment))
&gt;&gt;&gt; res = conn.getresponse()
&gt;&gt;&gt; print res.status, res.reason
302 Found
</snippet></ROW><ROW><id>1731815</id><snippet>QItemSelectionModel</snippet></ROW><ROW><id>1731815</id><snippet>selectedRows()</snippet></ROW><ROW><id>1731815</id><snippet>myTableView-&gt;selectionModel()-&gt;selectedRows()
</snippet></ROW><ROW><id>1732239</id><snippet>threading.py</snippet></ROW><ROW><id>1732520</id><snippet>urlpatterns = patterns('books.views',
  (r'^books/$', 'index'),
  (r'^books/(\d+)/$', 'get'))
</snippet></ROW><ROW><id>1732520</id><snippet>from django.core import serializers
from models import Book

data = serializers.serialize("xml", Book.objects.all())
</snippet></ROW><ROW><id>1732520</id><snippet>from django.http import HttpResponse
from django.shortcuts import get_object_or_404

def xml_view(func):
  def wrapper(*args, **kwargs):
    result = func(*args, **kwargs)
    return HttpResponse(serializers.serialize("xml", result),
        mimetype="text/xml")
  return wrapper

@xml_view
def index(request):
  return Books.objects.all()

@xml_view
def get(request, id):
  return get_object_or_404(Book, pk=id)
</snippet></ROW><ROW><id>1732698</id><snippet>struct.pack</snippet></ROW><ROW><id>1732698</id><snippet>ctypes.create_string_buffer</snippet></ROW><ROW><id>1732741</id><snippet>include_package_data=True</snippet></ROW><ROW><id>1732741</id><snippet>import os.path
f = open(os.path.join(os.path.dirname(__file__),'templates','file1.txt'))
print f.read()
f.close()
</snippet></ROW><ROW><id>1732741</id><snippet>zip_safe = False</snippet></ROW><ROW><id>1732778</id><snippet>text.encode('utf8')</snippet></ROW><ROW><id>1733017</id><snippet>(sum(row) for row in M)</snippet></ROW><ROW><id>1733017</id><snippet>sum(row)</snippet></ROW><ROW><id>1733017</id><snippet>M</snippet></ROW><ROW><id>1733017</id><snippet>next(G)</snippet></ROW><ROW><id>1733017</id><snippet>M</snippet></ROW><ROW><id>1733017</id><snippet>next(G)</snippet></ROW><ROW><id>1733017</id><snippet>&gt;&gt;&gt; M = [[1,2,3],
...      [4,5,6],
...      [7,8,9]]
&gt;&gt;&gt; 
&gt;&gt;&gt; G = (sum(row) for row in M) # create a generator of row sums
&gt;&gt;&gt; next(G) # Run the iteration protocol
6
&gt;&gt;&gt; next(G)
15
&gt;&gt;&gt; next(G)
24
</snippet></ROW><ROW><id>1733370</id><snippet>// Memory layout
//
// p begining of file in memory.
// p + 0 : num_pointers
// p + 4 : offset 0
// p + 8 : offset 1
// ...
// p + ((num_pointers - 1) * 4) : offset n-1
// p + (num_pointers * 4) : num_pointers   // again so we can figure out 
//                                            what memory to free.
// p + ((num_pointers + 1) * 4) : start of cooked data
//
</snippet></ROW><ROW><id>1733370</id><snippet>void* bbq_load(const char* filename)
{
    unsigned char* p;
    int size = LoadFileToMemory(filename, &amp;p);
    if(size &lt;= 0)
    	return 0;

    // get the start of the pointer table
    unsigned int* ptr_table = (unsigned int*)p;
    unsigned int num_ptrs = *ptr_table;
    ptr_table++;

    // get the start of the actual data
    // the 2 is to skip past both num_pointer values
    unsigned char* base = p + ((num_ptrs + 2) * sizeof(unsigned int));

    // fix up the pointers
    while ((ptr_table + 1) &lt; (unsigned int*)base)
    {
    	unsigned int* ptr = (unsigned int*)(base + *ptr_table);
    	*ptr = (unsigned int)((unsigned char*)ptr + *ptr);
    	ptr_table++;
    }

    return base;
}
</snippet></ROW><ROW><id>1733492</id><snippet>Append</snippet></ROW><ROW><id>1733492</id><snippet>Clear</snippet></ROW><ROW><id>1733492</id><snippet>ListBox</snippet></ROW><ROW><id>1733492</id><snippet>ItemContainer</snippet></ROW><ROW><id>1733535</id><snippet>&gt;&gt;&gt; my_array = [1,2,3,4,5,6]
&gt;&gt;&gt; my_array[:3] = [123]
&gt;&gt;&gt; my_array
[123, 4, 5, 6]
</snippet></ROW><ROW><id>1733573</id><snippet>map = {}
with open(r'c:\temp\input.csv', 'r') as fin:
    reader = csv.reader(fin)
    with open(r'c:\temp\output.csv', 'w') as fout:
        writer = csv.writer(fout)
        # omit this if the file has no header row
        writer.writerow(next(reader))
        for row in reader:
            (id, name, phone, ref, discard) = row
            if map.has_key(phone):
                ref = map[phone]
                discard = "YES"
            else:
                map[phone] = id
            writer.writerow((id, name, phone, ref, discard))
</snippet></ROW><ROW><id>1734045</id><snippet>python src\test\python\test_power_estimator.py</snippet></ROW><ROW><id>1734045</id><snippet>sys.path</snippet></ROW><ROW><id>1734045</id><snippet>test_power_estimator.py</snippet></ROW><ROW><id>1734045</id><snippet>src</snippet></ROW><ROW><id>1734045</id><snippet>src/test/python</snippet></ROW><ROW><id>1734220</id><snippet>#!/usr/bin/env python
from lxml import html

doc = html.fromstring('''
    &lt;meta name="Description"&gt;
    &lt;meta name="description"&gt;
    &lt;META name="description"&gt;
    &lt;meta NAME="description"&gt;
''')
for meta in doc.xpath('//meta[re:test(@name, "^description$", "i")]',
                      namespaces={"re": "http://exslt.org/regular-expressions"}):
    print html.tostring(meta, pretty_print=True),
</snippet></ROW><ROW><id>1734220</id><snippet>&lt;meta name="Description"&gt;
&lt;meta name="description"&gt;
&lt;meta name="description"&gt;
&lt;meta name="description"&gt;
</snippet></ROW><ROW><id>1734444</id><snippet>dpkg -S /path/to/XYZ
</snippet></ROW><ROW><id>1734444</id><snippet>dpkg -S /usr/lib/python2.5/lib-dynload/gdbm.so
</snippet></ROW><ROW><id>1734444</id><snippet>python-gdbm: /usr/lib/python2.5/lib-dynload/gdbm.so
</snippet></ROW><ROW><id>1734444</id><snippet>apt-cache show python-gdbm
</snippet></ROW><ROW><id>1734444</id><snippet>dpkg --listfiles python-gdbm
</snippet></ROW><ROW><id>1734444</id><snippet>...
/usr/lib/python2.4
/usr/lib/python2.4/lib-dynload
/usr/lib/python2.4/lib-dynload/gdbm.so
/usr/lib/python2.5
/usr/lib/python2.5/lib-dynload
/usr/lib/python2.5/lib-dynload/gdbm.so
/usr/lib/python2.6
/usr/lib/python2.6/lib-dynload
/usr/lib/python2.6/lib-dynload/gdbm.so
...
</snippet></ROW><ROW><id>1734503</id><snippet>u</snippet></ROW><ROW><id>1734503</id><snippet># -*- coding: utf-8 -*-
def mylen(word):
  u"""        &lt;----- SEE 'u' HERE
  &gt;&gt;&gt; mylen(u"áéíóú")
  5
  """
  return len(word)

print mylen(u"áéíóú")
</snippet></ROW><ROW><id>1734503</id><snippet>if __name__ == "__main__":
    import sys
    reload(sys)
    sys.setdefaultencoding("UTF-8")
    import doctest
    doctest.testmod()
</snippet></ROW><ROW><id>1734657</id><snippet>dmesg</snippet></ROW><ROW><id>1734657</id><snippet>Out of Memory: Killed process 1234 (postgres)</snippet></ROW><ROW><id>1734657</id><snippet>echo 2 &gt; /proc/sys/vm/overcommit_memory
</snippet></ROW><ROW><id>1734657</id><snippet>work_mem</snippet></ROW><ROW><id>1734657</id><snippet>work_mem</snippet></ROW><ROW><id>1734657</id><snippet>shared_buffers</snippet></ROW><ROW><id>1734939</id><snippet>my.cnf</snippet></ROW><ROW><id>1734939</id><snippet>port=3306</snippet></ROW><ROW><id>1734939</id><snippet>[mysqld]</snippet></ROW><ROW><id>1734939</id><snippet>3307</snippet></ROW><ROW><id>1735011</id><snippet>from numpy import *

# set the start conditions, etc.
n_timesteps = 100
dt, m, k = .1, 1., 2. # timestep, mass, spring-const (I'll write the equations correctly so the units make sense)
t, x, v = 0., array([0.,0.,0.]), array([2., 0., 2.])  # initial values
gravity = array([0., 0., -9.8])  # to make the problem a little more interesting
result = zeros((4, n_timesteps))

# run the simulation, looping through the timesteps
for n in range(n_timesteps):
    # do the calculation
    f = -k*x + gravity
    a = f/m
    v += a*dt
    x += v*dt
    # store the results
    t += dt  # just for easy record keeping
    result[0,n] = t
    result[1:4, n] = x
</snippet></ROW><ROW><id>1735011</id><snippet>force</snippet></ROW><ROW><id>1735011</id><snippet>velocity</snippet></ROW><ROW><id>1735122</id><snippet>audio /= np.max(np.abs(audio),axis=0)
image *= (255.0/image.max())
</snippet></ROW><ROW><id>1735122</id><snippet>/=</snippet></ROW><ROW><id>1735122</id><snippet>*=</snippet></ROW><ROW><id>1735122</id><snippet>image *= 255.0/image.max()    # Uses 1 division and image.size multiplications
</snippet></ROW><ROW><id>1735122</id><snippet>image /= image.max()/255.0    # Uses 1+image.size divisions
</snippet></ROW><ROW><id>1735148</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>1735148</id><snippet>/usr/local/bin/python2.6</snippet></ROW><ROW><id>1735148</id><snippet>python2.6</snippet></ROW><ROW><id>1735148</id><snippet>$PATH</snippet></ROW><ROW><id>1735148</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>1735148</id><snippet>/usr/bin</snippet></ROW><ROW><id>1735277</id><snippet>import glob
import unittest

test_file_strings = glob.glob('test_*.py')
module_strings = [str[0:len(str)-3] for str in test_file_strings]
suites = [unittest.defaultTestLoader.loadTestsFromName(str) for str
          in module_strings]
testSuite = unittest.TestSuite(suites)
text_runner = unittest.TextTestRunner().run(testSuite)
</snippet></ROW><ROW><id>1735312</id><snippet>update_r</snippet></ROW><ROW><id>1735312</id><snippet>vs,ve=update_v(n,vs,ve,ms,me,dt,fs,fe)</snippet></ROW><ROW><id>1735312</id><snippet>update_v</snippet></ROW><ROW><id>1735312</id><snippet>vs</snippet></ROW><ROW><id>1735312</id><snippet>vs</snippet></ROW><ROW><id>1735312</id><snippet>vs</snippet></ROW><ROW><id>1735424</id><snippet>a = 2
print "A.a:", a
import B
print "B.b:", B.b
from B import *
print "b in our namespace:", b
</snippet></ROW><ROW><id>1735424</id><snippet>b = 3
</snippet></ROW><ROW><id>1735424</id><snippet>A.a: 2
B.b: 3
b in our namespace: 3
</snippet></ROW><ROW><id>1735424</id><snippet>b = 3
from A import *
print "a in B's namespace:", a
</snippet></ROW><ROW><id>1735424</id><snippet>a in B's namespace: 2</snippet></ROW><ROW><id>1735424</id><snippet>if __name__ == "__main__":
  ...
</snippet></ROW><ROW><id>1735681</id><snippet>title_for_url = models.CharField(max_length=100, editable=False, default=property(_get_title_for_url)
</snippet></ROW><ROW><id>1735681</id><snippet>class Entry(models.Model):
    def save(self, *args, **kwargs):
       self.title_for_url = self.get_title_in_url_format()
       super(Entry, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>1735731</id><snippet>%</snippet></ROW><ROW><id>1735731</id><snippet>%s</snippet></ROW><ROW><id>1735731</id><snippet>cursor.execute('... %s, %s ...', (arg1, arg2))</snippet></ROW><ROW><id>1735731</id><snippet>%s</snippet></ROW><ROW><id>1735731</id><snippet>cursor.execute(sql_function_above)</snippet></ROW><ROW><id>1735731</id><snippet>%</snippet></ROW><ROW><id>1735731</id><snippet>%</snippet></ROW><ROW><id>1735731</id><snippet>%%</snippet></ROW><ROW><id>1735731</id><snippet>%</snippet></ROW><ROW><id>1736279</id><snippet>str</snippet></ROW><ROW><id>1736279</id><snippet>bytes</snippet></ROW><ROW><id>1736279</id><snippet># in Py2.6
&gt;&gt;'mykey' == b'mykey'
True
b'mykey'.__class__
&lt;class 'str'&gt;

# in Py3k
&gt;&gt;&gt;'mykey' == b'mykey'
False
b'mykey'.__class__
&lt;class 'bytes'&gt;
</snippet></ROW><ROW><id>1736279</id><snippet>Text Vs. Data Instead Of Unicode Vs. 8-bit</snippet></ROW><ROW><id>1736533</id><snippet>encodings.aliases.aliases.keys()</snippet></ROW><ROW><id>1736533</id><snippet>aliases</snippet></ROW><ROW><id>1736533</id><snippet>1252</snippet></ROW><ROW><id>1736533</id><snippet>windows_1252</snippet></ROW><ROW><id>1736533</id><snippet>cp1252</snippet></ROW><ROW><id>1736533</id><snippet>aliases.keys()</snippet></ROW><ROW><id>1736533</id><snippet>set(aliases.values())</snippet></ROW><ROW><id>1736533</id><snippet>aliases</snippet></ROW><ROW><id>1736533</id><snippet>&gt;&gt;&gt; from encodings.aliases import aliases
&gt;&gt;&gt; def find(q):
...     return [(k,v) for k, v in aliases.items() if q in k or q in v]
...
&gt;&gt;&gt; find('1252') # multiple aliases
[('1252', 'cp1252'), ('windows_1252', 'cp1252')]
&gt;&gt;&gt; find('856') # no codepage 856 in aliases
[]
&gt;&gt;&gt; find('koi8') # no koi8_u in aliases
[('cskoi8r', 'koi8_r')]
&gt;&gt;&gt; 'x'.decode('cp856') # but cp856 is a valid codec
u'x'
&gt;&gt;&gt; 'x'.decode('koi8_u') # but koi8_u is a valid codec
u'x'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1736533</id><snippet>zlib</snippet></ROW><ROW><id>1736533</id><snippet>quopri</snippet></ROW><ROW><id>1736533</id><snippet>base64</snippet></ROW><ROW><id>1736536</id><snippet>multi_line_word = Forward()
multi_line_word &lt;&lt; (word | (split_word + multi_line_word))
</snippet></ROW><ROW><id>1736536</id><snippet>multi_line_word = ZeroOrMore(split_word) + word
</snippet></ROW><ROW><id>1736536</id><snippet>['super', 'cali', fragi', 'listic']</snippet></ROW><ROW><id>1736536</id><snippet>multi_line_word.setParseAction(lambda t: ''.join(t))
</snippet></ROW><ROW><id>1736536</id><snippet>['supercalifragilistic']</snippet></ROW><ROW><id>1736536</id><snippet>no_space = NotAny(White(' \t\r'))
# make sure that the EOL immediately follows the escape backslash
continued_ending = Literal('\\') + no_space + lineEnd
word = Word(alphas)
# make sure that the escape backslash immediately follows the word
split_word = word + NotAny(White()) + Suppress(continued_ending)
multi_line_word = OneOrMore(split_word + NotAny(White())) + Optional(word)
multi_line_word.setParseAction(lambda t: ''.join(t))
</snippet></ROW><ROW><id>1736564</id><snippet>from pylab import *
import time

data = []   # make the data
for i in range(1000):
    a = .01*pi*i+.0007
    m = -1./tan(a)
    x = arange(-3, 3, .1)
    y = m*x
    data.append((clip(x+cos(a), -3, 3),clip(y+sin(a), -3, 3)))


for x, y in data:  # make a dynamic plot from the data
    try:
        plotdata.set_data(x, y)
    except NameError:
        ion()
        fig = figure()
        plot(cos(arange(0, 2.21*pi, .2)), sin(arange(0, 2.21*pi, .2)))
        plotdata = plot(x, y)[0]
        xlim(-2, 2)
        ylim(-2, 2)
    draw()
    time.sleep(.01)
</snippet></ROW><ROW><id>1736564</id><snippet>time.sleep(.01)</snippet></ROW><ROW><id>1737030</id><snippet>ImageFileField.save()</snippet></ROW><ROW><id>1737030</id><snippet>FileField.save()</snippet></ROW><ROW><id>1737030</id><snippet>save</snippet></ROW><ROW><id>1737030</id><snippet>ImageFileField.save()</snippet></ROW><ROW><id>1737030</id><snippet>save=False</snippet></ROW><ROW><id>1737030</id><snippet>self.image.save</snippet></ROW><ROW><id>1737030</id><snippet>save</snippet></ROW><ROW><id>1737030</id><snippet>save=False</snippet></ROW><ROW><id>1737030</id><snippet>save</snippet></ROW><ROW><id>1737052</id><snippet>import re

#In python functions/methods usually are lowercase
#and words are seperated by _ while classes use CamelCasing
def eval_step_by_step(expression):
    """Evaluates math expression. Doesn't do any error checking.
        expression (string) - math expression"""

    print expression
    #For pretty formating.
    expr_len = len(expression)
    #While there's parentheses in the expression.
    while True:
        #re.match checks for a match only at the beginning of the string,
        #while re.search checks for a match anywhere in the string.

        #Matches all numbers, +, -, *, / and whitespace within parentheses
        #lazily (innermost first).
        contents = re.search("\(([0-9|\*|/|\+|\-|\s]*?)\)", expression) 
        #If we didn't find anything, print result and break out of loop.
        if not contents:
            #string.format() is the Python 3 way of formating strings
            #(Also works in Python 2.6).

            #Print eval(expression) aligned right in a "field" with width
            #of expr_len characters.
            print "{0:{1}}".format(eval(expression), expr_len)
            break

        #group(0) [match] is everything matching our search,
        #group(1) [parentheses_text] is just epression withing parentheses.
        match, parentheses_text = contents.group(0), contents.group(1)
        expression = expression.replace(match, str(eval(parentheses_text)))
        #Aligns text to the right. Have to use "&gt;" here
        #because expression is not a number.
        print "{0:&gt;{1}}".format(expression, expr_len)

#For example try: (4+3+(32-1)*3)*3
problem = raw_input("Input math problem: ")

eval_step_by_step(problem)
</snippet></ROW><ROW><id>1737078</id><snippet>auto_now</snippet></ROW><ROW><id>1737078</id><snippet>editable=False</snippet></ROW><ROW><id>1737078</id><snippet>auto_now</snippet></ROW><ROW><id>1737078</id><snippet>auto_now_add</snippet></ROW><ROW><id>1737078</id><snippet>save()</snippet></ROW><ROW><id>1737078</id><snippet>auto_now</snippet></ROW><ROW><id>1737078</id><snippet>auto_now_add</snippet></ROW><ROW><id>1737078</id><snippet>save()</snippet></ROW><ROW><id>1737078</id><snippet>created</snippet></ROW><ROW><id>1737078</id><snippet>id</snippet></ROW><ROW><id>1737078</id><snippet>modified</snippet></ROW><ROW><id>1737078</id><snippet>save()</snippet></ROW><ROW><id>1737078</id><snippet>import datetime

class User(models.Model):
    created     = models.DateTimeField(editable=False)
    modified    = models.DateTimeField()

    def save(self, *args, **kwargs):
        ''' On save, update timestamps '''
        if not self.id:
            self.created = datetime.datetime.today()
        self.modified = datetime.datetime.today()
        return super(User, self).save(*args, **kwargs)
</snippet></ROW><ROW><id>1737078</id><snippet>save()</snippet></ROW><ROW><id>1737078</id><snippet>created</snippet></ROW><ROW><id>1737078</id><snippet>auto_now_add=True</snippet></ROW><ROW><id>1737078</id><snippet>auto_now</snippet></ROW><ROW><id>1737078</id><snippet>auto_now_add</snippet></ROW><ROW><id>1737382</id><snippet>&gt;&gt;&gt; schema.Table
</snippet></ROW><ROW><id>1737382</id><snippet>&gt;&gt;&gt; from sqlalchemy import schema
&gt;&gt;&gt; from sqlalchemy import Table
&gt;&gt;&gt; Table is schema.Table
True
</snippet></ROW><ROW><id>1737476</id><snippet>.encode('mbcs')</snippet></ROW><ROW><id>1737476</id><snippet>.encode('cp949')</snippet></ROW><ROW><id>1737476</id><snippet>sys.getfilesystemencoding</snippet></ROW><ROW><id>1737476</id><snippet>utf-8</snippet></ROW><ROW><id>1737476</id><snippet>mbcs</snippet></ROW><ROW><id>1737476</id><snippet>cp949</snippet></ROW><ROW><id>1737476</id><snippet>os.listdir</snippet></ROW><ROW><id>1737476</id><snippet>sys.getfilesystemencoding</snippet></ROW><ROW><id>1737476</id><snippet>open(unicode('한글.txt', 'euc-kr'))
</snippet></ROW><ROW><id>1737476</id><snippet>'cp949'</snippet></ROW><ROW><id>1737476</id><snippet>'mbcs'</snippet></ROW><ROW><id>1737476</id><snippet>open(u'한글')
</snippet></ROW><ROW><id>1737565</id><snippet>nargin</snippet></ROW><ROW><id>1737565</id><snippet>function c = testarg1(a, b) 
     if (nargin == 1)
         c = a .^ 2; 
     elseif (nargin == 2)
         c = a + b; 
     end
</snippet></ROW><ROW><id>1737801</id><snippet>&gt;&gt;&gt; az= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
&gt;&gt;&gt; az= az[:17]+'11'+az[19:]
&gt;&gt;&gt; az
'ABCDEFGHIJKLMNOPQ11TUVWXYZ'
</snippet></ROW><ROW><id>1737801</id><snippet>&gt;&gt;&gt; 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.replace('RS', '11', 1)
'ABCDEFGHIJKLMNOPQ11TUVWXYZ'
</snippet></ROW><ROW><id>1737824</id><snippet>return len([x for x in myList if x in myDict]) &gt; 0
</snippet></ROW><ROW><id>1737887</id><snippet>if [ version.check-jam-version 3 1 17 ] || ( [ os.name ] != NT )
{
    # Prior to version 3.1.17 Boost Jam's SHELL command did not support
    # quoted commands correctly on Windows. This means that on that
    # platform we do not support using a Python command interpreter
    # executable whose path contains a space character.
    python-cmd = \"$(python-cmd)\" ;
}
</snippet></ROW><ROW><id>1737971</id><snippet>LOGGING_LOG_SQL = True</snippet></ROW><ROW><id>1738118</id><snippet>for i in range(5):
    print i
</snippet></ROW><ROW><id>1738118</id><snippet>i = 0
print i
i = 1
print i
i = 2
print i
i = 3
print i
i = 4
print i
</snippet></ROW><ROW><id>1738118</id><snippet>i</snippet></ROW><ROW><id>1738118</id><snippet>for i in range(5):
    a=i+1
print a
</snippet></ROW><ROW><id>1738118</id><snippet>a=i+1</snippet></ROW><ROW><id>1738118</id><snippet>a</snippet></ROW><ROW><id>1738373</id><snippet>from numpy import *

#vs,fs,rs are all m*n matrixs,got initial values in,i.e vs[0],fs[0],rs[0] are known
#want use this foor loop to update them
vs=zeros((10,3))
vs[0]=([1,2,3])
fs=zeros((10,3))
fs[0]=([2,3,4])
rs=zeros((10,3))
rs[0]=([3,4,5])

for i in range(5):
    #start looping..
    vs[i+1]=vs[i]+fs[i]
    fs[i+1]=rs[i]-re[i]
    rs[i+1]=rs[i]+vs[i]
    print vs,fs,rs
</snippet></ROW><ROW><id>1738411</id><snippet>for k, v in dictionary.iteritems():
    x = [k] * len(v)
    y = v
    pyplot.plot(x, y)
</snippet></ROW><ROW><id>1738456</id><snippet>for base in 'ACGT':
  print base, thesequence.count(base) + thesequence.count(base.lower())
</snippet></ROW><ROW><id>1738519</id><snippet>memcached</snippet></ROW><ROW><id>1738519</id><snippet>object = try_memcached()
if not object:
    object = real_query()
    put_in_memcached(object)
</snippet></ROW><ROW><id>1738519</id><snippet>memcached</snippet></ROW><ROW><id>1738519</id><snippet>#!/usr/bin/python
"""
memcached objects for use with SQLAlchemy
"""
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.

import memcache
import sqlalchemy
import sqlalchemy.orm

SQLA_SESSION = sqlalchemy.orm.sessionmaker()

MEMCACHED_CLIENT = memcache.Client(['127.0.0.1:11211'])

class DetachedORMObject(object):
    """
    Session-detached object for use with ORM Mapping.  As the SQLAlchemy
    documentation indicates, creating and closing a session is not analogous
    to creating and closing a database connection.  Connections are pooled by
    the database engine by default.  Creating new sessions is of a minimal
    cost.  Also, objects using this wrapper will not likely interact in with
    the database through the full power of SQLAlchemy queries.

    """
    @classmethod
    def fetch_by_field(cls, field, value):
        """Fetch a mapped orm object with the give field and value"""
        session = SQLA_SESSION()
        try:
            class_object = session.query(cls).filter(field == value).one()
        except sqlalchemy.orm.exc.NoResultFound:
            class_object = None
        finally:
            session.close()
        return class_object

    def update(self):
        """Update the database with the values of the object"""
        session = SQLA_SESSION()
        session.add(self)
        session.commit()
        session.refresh(self)
        session.close()

    def refresh(self):
        """Refresh the object with the values of the database"""
        session = SQLA_SESSION()
        session.add(self)
        session.refresh(self)
        session.close()

    def delete(self):
        """Delete the object from the database"""
        session = SQLA_SESSION()
        session.add(self)
        session.delete(self)
        session.commit()
        session.close()


class MemcachedObject(object):
    """
    Object Wrapper for serializing objects in memcached. Utilizes an abstract
    method, get_isntance_key, to understand how to get and set objects that
    impliment this class.
    """
    @classmethod
    def get_cached_instance(cls, instance_key):
        """Retrieve and return the object matching the instance_key"""
        key = str(cls.__module__ + '.' + cls.__name__ + ':' \
           + str(instance_key))
        print "Memcached Getting:", key
        return MEMCACHED_CLIENT.get(key)

    def set_cached_instance(self, time=0, min_compress_len=0):
        """Set the cached instance of an object"""
        print "Memcached Setting:", self.get_cache_key()
        return MEMCACHED_CLIENT.set(self.get_cache_key(), self, time, \
            min_compress_len)

    def delete_cached_instance(self, time=0):
        """Wrapper for the memcached delete method"""
        print "Memcached Deleting:", self.get_cache_key()
        return MEMCACHED_CLIENT.delete(self.get_cache_key(), time)

    def get_cache_key(self):
        """Prepends the full class path of the object to the instance key"""
        return self.__class__.__module__ + '.' + \
            self.__class__.__name__ + ':' + self.get_instance_key()

    def get_instance_key(self):
        """Get the instance key, must be implemented by child objects"""
        raise NotImplementedError \
            ("'GetInstanceKey' method has not been defined.")


class MemcachedORMObject(DetachedORMObject, MemcachedObject):
    """
    Putting it all together now.  Implements both of the above classes. Worth
    noting is the method for checking to see if the fetch_by_field method is
    invoked using a primary key of the class.  The same technique is used to
    generate an instance key for an instance of the class.
    """
    @classmethod
    def fetch_by_field(cls, field, value):
        """Fetch the requested object from the cache and database"""
        orm_object = None
        matched_primary_key = True
        for key in cls._sa_class_manager.mapper.primary_key:
            if field.key != key.key:
                matched_primary_key = False
        if matched_primary_key:
            orm_object = cls.get_cached_instance('(' + str(value) + ')')
        if orm_object is None:
            orm_object = super(MemcachedORMObject, cls). \
                fetch_by_field(field, value)
            if orm_object is not None:
                orm_object.set_cached_instance()
        return orm_object

    def update(self):
        """Update the object in the database and memcached"""
        DetachedORMObject.update(self)
        self.set_cached_instance()

    def refresh(self):
        """Refresh the object from the database and memcached"""
        DetachedORMObject.refresh(self)
        self.set_cached_instance()

    def delete(self):
        """Delete the object from the database and memcached"""
        DetachedORMObject.delete(self)
        self.delete_cached_instance()

    def get_instance_key(self):
        """Get the instance key, implimenting abstract method in base"""
        key = []
        for column in self._sa_instance_state.manager.mapper.primary_key:
            key.append('(' + str(getattr(self, column.key)) + ')')
        return ''.join(key)
</snippet></ROW><ROW><id>1738519</id><snippet>memcached</snippet></ROW><ROW><id>1738519</id><snippet>    if matched_primary_key:
        orm_object = cls.get_cached_instance('(' + str(value) + ')')
    if orm_object is None:
        orm_object = super(MemcachedORMObject, cls). \
            fetch_by_field(field, value)
</snippet></ROW><ROW><id>1738538</id><snippet>dnalines = text.split('\n')[1:]
dna = ''.join(dnalines)
</snippet></ROW><ROW><id>1738538</id><snippet>text = open('yourfile').read()</snippet></ROW><ROW><id>1738653</id><snippet>import string

def complementary_strand(self, strand):
    return strand.translate(string.maketrans('TAGCtagc', 'ATCGATCG'))
</snippet></ROW><ROW><id>1738653</id><snippet>import string
def __init__(self, ...):
    self.trans = string.maketrans('TAGCtagc', 'ATCGATCG')

def complementary_strand(self, strand):
    return strand.translate(self.trans)
</snippet></ROW><ROW><id>1738700</id><snippet>(func_name, function)</snippet></ROW><ROW><id>1738700</id><snippet>unpack_options = { 'unpack_pdb_line' : unpack_pdb_line,
                   'some_other' : some_other_function }

unpack_function = unpack_options[options.unpack_method]
</snippet></ROW><ROW><id>1739541</id><snippet>_</snippet></ROW><ROW><id>1739541</id><snippet>_,s = min( (len( values[s]), s) 
            for s in squares 
            if len(values[s]) &gt; 1
        )
</snippet></ROW><ROW><id>1739541</id><snippet>s = min((s for s in squares if len(values[s])&gt;1), 
        key=lambda s: len(values[s]))
</snippet></ROW><ROW><id>1739541</id><snippet>key=</snippet></ROW><ROW><id>1739681</id><snippet>Body</snippet></ROW><ROW><id>1739681</id><snippet>bodies = cellfun(@(tuple)Body(tuple{1},tuple{2}), coords);
</snippet></ROW><ROW><id>1739681</id><snippet>bodies = cellfun(@(tuple)Body(tuple{1},tuple{2}), coords, 'UniformOutput',false);
</snippet></ROW><ROW><id>1739681</id><snippet>X1 = @(t) cos(t);
Y1 = @(t) sin(t);
X2 = @(t) cos(t) + 1;
Y2 = @(t) sin(t) + 1;

coords = {{X1,Y1}, {X2,Y2}};

%# function that returns a struct (like a constructor)
Body = @(X,Y) struct('x',X, 'y',Y);

%# tuples unpacking
bodies = cellfun(@(tuple)Body(tuple{1},tuple{2}), coords);

%# bodies is an array of structs
bodies(1)
bodies(2)
</snippet></ROW><ROW><id>1739931</id><snippet>reload(Y)</snippet></ROW><ROW><id>1740011</id><snippet>from random import shuffle
L=["Anne","Beth","Cath","Dave","Emma"]
shuffle(L,int=lambda n:int(n-1))
print L
</snippet></ROW><ROW><id>1740011</id><snippet>#For 100,000 samples

(('Beth', 'Cath', 'Dave', 'Emma', 'Anne'), 13417)
(('Beth', 'Cath', 'Emma', 'Anne', 'Dave'), 6572)
(('Beth', 'Dave', 'Anne', 'Emma', 'Cath'), 3417)
(('Beth', 'Dave', 'Emma', 'Cath', 'Anne'), 6581)
(('Beth', 'Emma', 'Anne', 'Cath', 'Dave'), 3364)
(('Beth', 'Emma', 'Dave', 'Anne', 'Cath'), 6635)
(('Cath', 'Anne', 'Dave', 'Emma', 'Beth'), 1703)
(('Cath', 'Anne', 'Emma', 'Beth', 'Dave'), 1705)
(('Cath', 'Dave', 'Beth', 'Emma', 'Anne'), 6583)
(('Cath', 'Dave', 'Emma', 'Anne', 'Beth'), 3286)
(('Cath', 'Emma', 'Beth', 'Anne', 'Dave'), 3325)
(('Cath', 'Emma', 'Dave', 'Beth', 'Anne'), 3421)
(('Dave', 'Anne', 'Beth', 'Emma', 'Cath'), 1653)
(('Dave', 'Anne', 'Emma', 'Cath', 'Beth'), 1664)
(('Dave', 'Cath', 'Anne', 'Emma', 'Beth'), 3349)
(('Dave', 'Cath', 'Emma', 'Beth', 'Anne'), 6727)
(('Dave', 'Emma', 'Anne', 'Beth', 'Cath'), 3319)
(('Dave', 'Emma', 'Beth', 'Cath', 'Anne'), 3323)
(('Emma', 'Anne', 'Beth', 'Cath', 'Dave'), 1682)
(('Emma', 'Anne', 'Dave', 'Beth', 'Cath'), 1656)
(('Emma', 'Cath', 'Anne', 'Beth', 'Dave'), 3276)
(('Emma', 'Cath', 'Dave', 'Anne', 'Beth'), 6638)
(('Emma', 'Dave', 'Anne', 'Cath', 'Beth'), 3358)
(('Emma', 'Dave', 'Beth', 'Anne', 'Cath'), 3346)
</snippet></ROW><ROW><id>1740011</id><snippet>from random import shuffle,randint
L=["Anne","Beth","Cath","Dave","Emma"]
shuffle(L,random=lambda:1,int=lambda n:randint(0,n-2))
print L

# For 100,000 samples

(('Beth', 'Cath', 'Dave', 'Emma', 'Anne'), 4157)
(('Beth', 'Cath', 'Emma', 'Anne', 'Dave'), 4155)
(('Beth', 'Dave', 'Anne', 'Emma', 'Cath'), 4099)
(('Beth', 'Dave', 'Emma', 'Cath', 'Anne'), 4141)
(('Beth', 'Emma', 'Anne', 'Cath', 'Dave'), 4243)
(('Beth', 'Emma', 'Dave', 'Anne', 'Cath'), 4208)
(('Cath', 'Anne', 'Dave', 'Emma', 'Beth'), 4219)
(('Cath', 'Anne', 'Emma', 'Beth', 'Dave'), 4087)
(('Cath', 'Dave', 'Beth', 'Emma', 'Anne'), 4117)
(('Cath', 'Dave', 'Emma', 'Anne', 'Beth'), 4127)
(('Cath', 'Emma', 'Beth', 'Anne', 'Dave'), 4198)
(('Cath', 'Emma', 'Dave', 'Beth', 'Anne'), 4210)
(('Dave', 'Anne', 'Beth', 'Emma', 'Cath'), 4179)
(('Dave', 'Anne', 'Emma', 'Cath', 'Beth'), 4119)
(('Dave', 'Cath', 'Anne', 'Emma', 'Beth'), 4143)
(('Dave', 'Cath', 'Emma', 'Beth', 'Anne'), 4203)
(('Dave', 'Emma', 'Anne', 'Beth', 'Cath'), 4252)
(('Dave', 'Emma', 'Beth', 'Cath', 'Anne'), 4159)
(('Emma', 'Anne', 'Beth', 'Cath', 'Dave'), 4193)
(('Emma', 'Anne', 'Dave', 'Beth', 'Cath'), 4177)
(('Emma', 'Cath', 'Anne', 'Beth', 'Dave'), 4087)
(('Emma', 'Cath', 'Dave', 'Anne', 'Beth'), 4150)
(('Emma', 'Dave', 'Anne', 'Cath', 'Beth'), 4268)
(('Emma', 'Dave', 'Beth', 'Anne', 'Cath'), 4109)
</snippet></ROW><ROW><id>1740011</id><snippet>random.shuffle()</snippet></ROW><ROW><id>1740011</id><snippet>def shuffle(self, x, random=None, int=int):
    """x, random=random.random -&gt; shuffle list x in place; return None.

    Optional arg random is a 0-argument function returning a random
    float in [0.0, 1.0); by default, the standard random.random.
    """

    if random is None:
        random = self.random
    for i in reversed(xrange(1, len(x))):
        # pick an element in x[:i+1] with which to exchange x[i]
        j = int(random() * (i+1))
        x[i], x[j] = x[j], x[i]
</snippet></ROW><ROW><id>1740011</id><snippet>j = int(random() * (i+1))</snippet></ROW><ROW><id>1740011</id><snippet>j = int(random() *(i+1)-1)
</snippet></ROW><ROW><id>1740011</id><snippet>random()</snippet></ROW><ROW><id>1740011</id><snippet>j = randint(0,i-1)
</snippet></ROW><ROW><id>1740152</id><snippet>camelCase</snippet></ROW><ROW><id>1740152</id><snippet>CamelCase</snippet></ROW><ROW><id>1740152</id><snippet>std::find_first_of</snippet></ROW><ROW><id>1740152</id><snippet>std::replace_copy_if</snippet></ROW><ROW><id>1740152</id><snippet>CamelCase</snippet></ROW><ROW><id>1740190</id><snippet>default</snippet></ROW><ROW><id>1740190</id><snippet>PassiveDefault()</snippet></ROW><ROW><id>1740288</id><snippet>__init__</snippet></ROW><ROW><id>1740288</id><snippet>self.aos_config_prompt</snippet></ROW><ROW><id>1740288</id><snippet>self.aos_config_prompt</snippet></ROW><ROW><id>1740378</id><snippet>import time

from twisted.web import server, resource
from twisted.internet import reactor

class Simple(resource.Resource):
    isLeaf = True
    def render_GET(self, request):
        return "&lt;html&gt;%s Iterations!&lt;/html&gt;"%n

def main():
    global n
    site = server.Site(Simple())
    reactor.listenTCP(8080, site)
    reactor.startRunning(False)
    n=0
    while True:
        n+=1
        if n%1000==0:
            print n
        time.sleep(0.001)
        reactor.iterate()

if __name__=="__main__":
    main()
</snippet></ROW><ROW><id>1740695</id><snippet>$ python3.1 test_thread.py 
Hello
Hello
Hello
Hello
Hello
Hello
Hello
$ python3.2 test_thread.py 
Hello
Hello
Hello
Hello
Hello
</snippet></ROW><ROW><id>1740759</id><snippet>import operator
ops = { "+": operator.add, "-": operator.sub } # etc.

print ops["+"](1,1) # prints 2
</snippet></ROW><ROW><id>1741014</id><snippet>Array</snippet></ROW><ROW><id>1741014</id><snippet>[items[i]] + cc</snippet></ROW><ROW><id>1741014</id><snippet>[items[i]] + [cc]</snippet></ROW><ROW><id>1741014</id><snippet>class Array
  def combinations(n)
    perms = []
    a = (0...n).to_a
    while perms.push a.dup
      break if a.increment!(a.length - 1, self.length-1).nil?
    end
    perms.map {|p| p.map {|i| self[i]} }
  end
  def increment!(i, max)
    self[i] += 1
    while self[i] &gt; max
      return nil if i &lt;= 0
      return nil if self.increment!(i - 1, max).nil?
      self[i] = self[i - 1] + 1
    end
    self.dup
  end
end

[1,2,3].combinations 3 # =&gt; [[1, 2, 3]]
[1,2,3].combinations 2 # =&gt; [[1, 2], [1, 3], [2, 3]]
[1,2,3].combinations 1 # =&gt; [[1], [2], [3]]
[:foo,:bar,:baz,:quux,:wibble].combinations 3
# =&gt; [[:foo, :bar, :baz],
#     [:foo, :bar, :quux],
#     [:foo, :bar, :wibble],
#     [:foo, :baz, :quux],
#     [:foo, :baz, :wibble],
#     [:foo, :quux, :wibble],
#     [:bar, :baz, :quux],
#     [:bar, :baz, :wibble],
#     [:bar, :quux, :wibble],
#     [:baz, :quux, :wibble]]
</snippet></ROW><ROW><id>1741209</id><snippet> #!/usr/bin/python
 import Magick

 # Use the Python Imaging Library to create a Tk display
 dpy = Magick.TkDisplay(startmain=0)

 # Read the image
 img = Magick.read('test.gif')

 # Display the image
 dpy(img)
 dpy(img.Swirl(90))

 dpy.startmain=1
 dpy.show()
</snippet></ROW><ROW><id>1741232</id><snippet>WikiRequest.get_author()</snippet></ROW><ROW><id>1741414</id><snippet>db.collection.find({'res1': { $exists : true }})</snippet></ROW><ROW><id>1741414</id><snippet>db.collection.find({'res1': 10})</snippet></ROW><ROW><id>1742476</id><snippet>import</snippet></ROW><ROW><id>1742476</id><snippet>Name()</snippet></ROW><ROW><id>1742476</id><snippet>from Example1.views import adder as otherAdder
</snippet></ROW><ROW><id>1742476</id><snippet>otherAdder()</snippet></ROW><ROW><id>1742476</id><snippet>Example1.views</snippet></ROW><ROW><id>1742512</id><snippet>record.name</snippet></ROW><ROW><id>1742512</id><snippet>import logging


class DispatchingFormatter:

    def __init__(self, formatters, default_formatter):
        self._formatters = formatters
        self._default_formatter = default_formatter

    def format(self, record):
        formatter = self._formatters.get(record.name, self._default_formatter)
        return formatter.format(record)


handler = logging.StreamHandler()
handler.setFormatter(DispatchingFormatter({
        'base.foo': logging.Formatter('FOO: %(message)s'),
        'base.bar': logging.Formatter('BAR: %(message)s'),
    },
    logging.Formatter('%(message)s'),
))
logging.getLogger().addHandler(handler)

logging.getLogger('base.foo').error('Log from foo')
logging.getLogger('base.bar').error('Log from bar')
logging.getLogger('base.baz').error('Log from baz')
</snippet></ROW><ROW><id>1742632</id><snippet>import gtk

def _clipboard_changed(clipboard, event):
    text = clipboard.wait_for_text()

clip = gtk.clipboard_get(gtk.gdk.SELECTION_PRIMARY)
clip.connect("owner-change", _clipboard_changed)
</snippet></ROW><ROW><id>1742672</id><snippet>def coef(pot):
    return (pot.movable + pot.convertible) / float(pot.total)

l.sort(key=lambda x: (coef(x), x.total), reverse=True)
</snippet></ROW><ROW><id>1742770</id><snippet>from pyparsing import QuotedString, Group, delimitedList, OneOrMore

# a row of headings or data is a list of quoted strings, delimited by ';'s
qs = QuotedString('"')
datarow = Group(delimitedList(qs, ';'))

# an entire data set is a single data row containing the headings, followed by
# one or more data rows containing the data
dataset_parser = datarow("headings") + OneOrMore(datarow)("rows")

# parse the returned response
data = dataset_parser.parseString(response)

# create dict by zipping headings with each row's data values
datadict = [dict(zip(data.headings, row)) for row in data.rows]

print datadict
</snippet></ROW><ROW><id>1742770</id><snippet>[{'End Date': '16/11/2009', 'Description': '', 'All day event': 'false', 
  'Start Time': '10:00 PM', 'End Time': '11:00 PM', 'Start Date': '16/11/2009', 
  'Subject': 'Play football'}, 
 {'End Date': '20/11/2009', 'Description': '', 'All day event': 'false', 
  'Start Time': '07:00 PM', 'End Time': '08:00 PM', 'Start Date': '20/11/2009', 
  'Subject': 'Watch 2012'}]
</snippet></ROW><ROW><id>1742776</id><snippet>int main()
{
    time t;
}
</snippet></ROW><ROW><id>1742776</id><snippet>t.simpleDate;
</snippet></ROW><ROW><id>1742776</id><snippet>t.perciseDate;
</snippet></ROW><ROW><id>1742776</id><snippet>0x12345678;
</snippet></ROW><ROW><id>1742776</id><snippet>struct Msg
{
   int msgType;
   double Val1;
   double Val2;
}; // assuming packing on 32-bit boundary

union
{
   Msg msg;
   unsigned char msgAsBinary[20];
};
</snippet></ROW><ROW><id>1743022</id><snippet>FancyURLopener.prompt_user_passwd</snippet></ROW><ROW><id>1743022</id><snippet>class AuthorizationRequired(Exception):

    pass


class MyURLOpener(urllib.FancyURLopener):

    def prompt_user_passwd(self, host, realm):
        raise AuthorizationRequired()


opener = MyURLOpener(proxies={'http': 'http://'+p})
fp = opener.open(url)
</snippet></ROW><ROW><id>1743088</id><snippet>%f</snippet></ROW><ROW><id>1743088</id><snippet>('%.2f' % (value,)).rstrip('0').rstrip('.')
</snippet></ROW><ROW><id>1743088</id><snippet>round()</snippet></ROW><ROW><id>1743088</id><snippet>str(round(value)).rstrip('0').rstrip('.')
</snippet></ROW><ROW><id>1743332</id><snippet>order_by</snippet></ROW><ROW><id>1743332</id><snippet>qs = MyModel.objects.filter(title__icontains=query)
qs.sort(key=lambda x: mydict[x])
</snippet></ROW><ROW><id>1743350</id><snippet>multiprocessing</snippet></ROW><ROW><id>1743350</id><snippet>import pp

def parallel_function(arg):
    return arg

job_server = pp.Server() 

# Define your jobs
job1 = job_server.submit(parallel_function, ("foo",))
job2 = job_server.submit(parallel_function, ("bar",))

# Compute and retrieve answers for the jobs.
print job1()
print job2()
</snippet></ROW><ROW><id>1743646</id><snippet>import sys; sys.path.insert(0, "cis")</snippet></ROW><ROW><id>1744439</id><snippet>as</snippet></ROW><ROW><id>1744439</id><snippet>from some.package import mymodulewithalongname as mymod</snippet></ROW><ROW><id>1744439</id><snippet>mymodulewithalongname</snippet></ROW><ROW><id>1744439</id><snippet>somethingcompletelydifferent</snippet></ROW><ROW><id>1744439</id><snippet>as</snippet></ROW><ROW><id>1744439</id><snippet>random</snippet></ROW><ROW><id>1744439</id><snippet>seed</snippet></ROW><ROW><id>1744439</id><snippet>uniform</snippet></ROW><ROW><id>1744439</id><snippet>seed</snippet></ROW><ROW><id>1744439</id><snippet>uniform</snippet></ROW><ROW><id>1744439</id><snippet>seed</snippet></ROW><ROW><id>1744439</id><snippet>random</snippet></ROW><ROW><id>1744439</id><snippet>random</snippet></ROW><ROW><id>1744439</id><snippet>from datetime import datetime</snippet></ROW><ROW><id>1744439</id><snippet>from time import time</snippet></ROW><ROW><id>1744445</id><snippet>from original.satchmo.admin import ProductAdmin

class MyProductInline(admin.StackedInline):
    model = MyProduct

class ExtendedProductAdmin(ProductAdmin):
    inlines = ProductAdmin.inlines + (MyProductInline,)

admin.site.unregister(Product)
admin.site.register(Product, ExtendedProductAdmin)
</snippet></ROW><ROW><id>1744503</id><snippet>midl TaskbarLib.idl /tlb TaskbarLib.tlb
</snippet></ROW><ROW><id>1744503</id><snippet>import comtypes.client as cc
cc.GetModule("TaskbarLib.tlb")
</snippet></ROW><ROW><id>1744503</id><snippet>import comtypes.gen.TaskbarLib as tbl
taskbar = cc.CreateObject(
    "{56FDF344-FD6D-11d0-958A-006097C9A090}",
    interface=tbl.ITaskbarList3)
</snippet></ROW><ROW><id>1744503</id><snippet>taskbar.HrInit()
taskbar.SetProgressValue(self.winId(),40,100)
</snippet></ROW><ROW><id>1744686</id><snippet>{{ mytable.0.pk }}
{{ mytable.1.pk }}
{{ mytable.0.pk }}
{{ mytable.3.pk }}
</snippet></ROW><ROW><id>1744686</id><snippet>91596
54774
156800
23593
</snippet></ROW><ROW><id>1744686</id><snippet>SELECT `mytable`.`id` FROM `mytable` ORDER BY RAND() LIMIT 1
SELECT `mytable`.`id` FROM `mytable` ORDER BY RAND() LIMIT 1 OFFSET 1
SELECT `mytable`.`id` FROM `mytable` ORDER BY RAND() LIMIT 1
SELECT `mytable`.`id` FROM `mytable` ORDER BY RAND() LIMIT 1 OFFSET 3
</snippet></ROW><ROW><id>1744686</id><snippet>def rate(request, type):
    photos = list(Photo.objects.order_by('?')[:2])
    c = Context({"photos": photos, "type": type})
    return render_to_response("base_rate.html", c)
</snippet></ROW><ROW><id>1744686</id><snippet>list()</snippet></ROW><ROW><id>1745035</id><snippet>import sys
# parse command line
if file_name_given:
    inf = open(file_name_given)
else:
    inf = sys.stdin
</snippet></ROW><ROW><id>1745035</id><snippet>inf</snippet></ROW><ROW><id>1745035</id><snippet>if inf is not sys.stdin:
    inf.close()
</snippet></ROW><ROW><id>1745035</id><snippet>sys.stdin</snippet></ROW><ROW><id>1745076</id><snippet>import datetime
date = datetime.datetime.strptime("111609", "%m%d%y")
print date.strftime("%m/%d/%Y")
</snippet></ROW><ROW><id>1745076</id><snippet>010199</snippet></ROW><ROW><id>1745076</id><snippet>01/01/1999</snippet></ROW><ROW><id>1745076</id><snippet>010109</snippet></ROW><ROW><id>1745076</id><snippet>01/01/2009</snippet></ROW><ROW><id>1745300</id><snippet>&amp;#x2026</snippet></ROW><ROW><id>1745300</id><snippet>three dots</snippet></ROW><ROW><id>1745586</id><snippet>itertools</snippet></ROW><ROW><id>1745586</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>1745586</id><snippet>chain</snippet></ROW><ROW><id>1745586</id><snippet>chain_from_iterable</snippet></ROW><ROW><id>1745586</id><snippet>for x in blargh: yield x</snippet></ROW><ROW><id>1745586</id><snippet>yield from blargh</snippet></ROW><ROW><id>1745586</id><snippet>def corou_chaiters(initsend, defiter, val2itermap):
  currentiter = iter([initsend])
  while True:
    val = yield next(currentiter)
    currentiter = val2itermap(val, defiter)
</snippet></ROW><ROW><id>1745748</id><snippet>&gt;&gt;&gt; import xml.etree.ElementTree as ET
&gt;&gt;&gt; html = ET.XML('&lt;html&gt;&lt;head&gt;&lt;title&gt;Hi&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;')
&gt;&gt;&gt; html.head = html.find('head')
&gt;&gt;&gt; html.head.append(ET.XML('&lt;link type="text/css" href="main.css" rel="stylesheet" /&gt;'))
&gt;&gt;&gt; html.head.title = html.head.find('title')
&gt;&gt;&gt; html.head.title.text
'Hi'
</snippet></ROW><ROW><id>1745748</id><snippet>&gt;&gt;&gt; html.body = html.find('body')
&gt;&gt;&gt; my_h1 = ET.Element('h1', {'class': 'roflol'})
&gt;&gt;&gt; my_h1.text = 'BIG TITLE!12'
&gt;&gt;&gt; html.body.append(my_h1)
&gt;&gt;&gt; html.body.SOURCE = ET.tostring(html.body)
&gt;&gt;&gt; html.body.SOURCE
'&lt;body&gt;&lt;h1 class="roflol"&gt;BIG TITLE!12&lt;/h1&gt;&lt;/body&gt;'
</snippet></ROW><ROW><id>1745748</id><snippet>stylesheet</snippet></ROW><ROW><id>1745748</id><snippet>&gt;&gt;&gt; def stylesheet(href='', type='text/css', rel='stylesheet', **kwargs):
...     elem = ET.Element('link', href=href, type=type, rel=rel) 
...     return elem
... 
&gt;&gt;&gt; html.head.append(stylesheet(href="main.css"))
</snippet></ROW><ROW><id>1745748</id><snippet>&gt;&gt;&gt; ET.tostring(html)
&lt;html&gt;&lt;head&gt;&lt;title&gt;Hi&lt;/title&gt;&lt;link href="main.css" rel="stylesheet" type="text/css" /&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 class="roflol"&gt;BIG TITLE!12&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;
</snippet></ROW><ROW><id>1745785</id><snippet>self.centralwidget.setSortingEnabled(__sortingEnabled)
</snippet></ROW><ROW><id>1745785</id><snippet>self.colorTreeWidget.setSortingEnabled(__sortingEnabled)
</snippet></ROW><ROW><id>1745785</id><snippet>AttributeError: 'NoneType' object has no attribute 'setText'</snippet></ROW><ROW><id>1745785</id><snippet>self.treeWidget.topLevelItem(0)</snippet></ROW><ROW><id>1745809</id><snippet>cfg = """
{
    "repositories": {
        "repo1": "http://svn.example.com/repo1/",
        "repo2": "http://svn.example.com/repo2/",
        "repo3": "http://svn.example.com/repo3/"
    },
    "user_repository_mapping": {
        "person_A": ["repo1", "repo3"],
        "person_B": ["repo2"],
        "person_C": ["repo1", "repo2"]
    }
}
"""

import simplejson as json
config = json.loads(cfg)
person = "person_A"
repos = [config['repositories'][r] for r in config['user_repository_mapping'][person]]
print repos
</snippet></ROW><ROW><id>1745952</id><snippet>choices</snippet></ROW><ROW><id>1745952</id><snippet>COUNTRIES</snippet></ROW><ROW><id>1745952</id><snippet># ... initialize a lookup dictionary
country_to_id_dict = dict((t[1], t[0]) for t in COUNTRIES)

# ... use the dictionary in the query
i = MyModel.objects.filter(country__exact=country_to_id_dict[query])
</snippet></ROW><ROW><id>1745965</id><snippet>set_trace</snippet></ROW><ROW><id>1745965</id><snippet>def debug_trace():
  '''Set a tracepoint in the Python debugger that works with Qt'''
  from PyQt4.QtCore import pyqtRemoveInputHook
  from pdb import set_trace
  pyqtRemoveInputHook()
  set_trace()
</snippet></ROW><ROW><id>1745965</id><snippet>QtCore.pyqtRestoreInputHook()</snippet></ROW><ROW><id>1746130</id><snippet>QStandardItemModel</snippet></ROW><ROW><id>1746130</id><snippet>QTableView</snippet></ROW><ROW><id>1746130</id><snippet>QTableModel</snippet></ROW><ROW><id>1746130</id><snippet>QSqlTableModel</snippet></ROW><ROW><id>1746130</id><snippet>rowCount</snippet></ROW><ROW><id>1746130</id><snippet>columnCount</snippet></ROW><ROW><id>1746130</id><snippet>data</snippet></ROW><ROW><id>1746130</id><snippet>setData</snippet></ROW><ROW><id>1746130</id><snippet>rowCount</snippet></ROW><ROW><id>1746130</id><snippet>columnCount</snippet></ROW><ROW><id>1746130</id><snippet>data</snippet></ROW><ROW><id>1746130</id><snippet>data</snippet></ROW><ROW><id>1746130</id><snippet>QVariant</snippet></ROW><ROW><id>1746130</id><snippet>Qt.DisplayRole</snippet></ROW><ROW><id>1746130</id><snippet>Qt.CheckStateRole</snippet></ROW><ROW><id>1746130</id><snippet>Qt.Checked</snippet></ROW><ROW><id>1746130</id><snippet>Qt.Unchecked</snippet></ROW><ROW><id>1746130</id><snippet>QVariant</snippet></ROW><ROW><id>1746130</id><snippet>setData</snippet></ROW><ROW><id>1746130</id><snippet>data</snippet></ROW><ROW><id>1746130</id><snippet>data</snippet></ROW><ROW><id>1746130</id><snippet>Qt.DisplayRole</snippet></ROW><ROW><id>1746130</id><snippet>Qt.CheckStateRole</snippet></ROW><ROW><id>1746130</id><snippet>view.setSelectionMode( QAbstractItemView.ContiguousSelection</snippet></ROW><ROW><id>1746130</id><snippet>QAbstractView.SelectionMode</snippet></ROW><ROW><id>1746130</id><snippet>view.selectionModel().selectedIndexes()</snippet></ROW><ROW><id>1746130</id><snippet>for</snippet></ROW><ROW><id>1746130</id><snippet>contextMenuEvent</snippet></ROW><ROW><id>1746130</id><snippet>QMenu</snippet></ROW><ROW><id>1746194</id><snippet>// this: D:DD, DD:DDam/pm 12/24 hr
re = r':(?=..(?&lt;!\d:\d\d))|[^a-zA-Z0-9 ](?&lt;!:)';
</snippet></ROW><ROW><id>1746194</id><snippet>:              // match a colon
(?=..          // match but not capture two chars
  (?&lt;!         // start a negative look-behind group (if it matches, the whole fails)
    \d:\d\d    // time stamp
  )            // end neg. look behind
)              // end non-capture two chars
|              // or
[^a-zA-Z0-9 ]  // match anything not digits or letters
(?&lt;!:)         // that isn't a colon
</snippet></ROW><ROW><id>1746241</id><snippet>TABWIDTH=8
def my_len(s):
    return len(s.expandtabs(TABWIDTH))

def pad_with_tabs(s,maxlen):
    return s+"\t"*((maxlen-len(s)-1)/TABWIDTH+1)
</snippet></ROW><ROW><id>1746241</id><snippet>expandtabs()</snippet></ROW><ROW><id>1746241</id><snippet>$ python -m timeit '"Bear\tnecessities\t".expandtabs()'
1000000 loops, best of 3: 0.602 usec per loop
$ python -m timeit 'for c in "Bear\tnecessities\t":pass'
100000 loops, best of 3: 2.32 usec per loop
$ python -m timeit '[c for c in "Bear\tnecessities\t"]'
100000 loops, best of 3: 4.17 usec per loop
$ python -m timeit 'map(None,"Bear\tnecessities\t")'
100000 loops, best of 3: 2.25 usec per loop
</snippet></ROW><ROW><id>1746241</id><snippet>expandtabs</snippet></ROW><ROW><id>1746241</id><snippet>$ python -m timeit '"Bear\tnecessities\t".split("\t")'
1000000 loops, best of 3: 0.868 usec per loop
</snippet></ROW><ROW><id>1746622</id><snippet>&gt;&gt;&gt; reader = csv.DictReader(open(PathFile),skipinitialspace=True)
</snippet></ROW><ROW><id>1746642</id><snippet>AND</snippet></ROW><ROW><id>1746642</id><snippet>OR</snippet></ROW><ROW><id>1746642</id><snippet>XOR</snippet></ROW><ROW><id>1746642</id><snippet>NOT</snippet></ROW><ROW><id>1746642</id><snippet>AND | 0 1     OR | 0 1     XOR | 0 1    NOT | 0 1
----+-----    ---+----     ----+----    ----+----
 0  | 0 0      0 | 0 1       0 | 0 1        | 1 0
 1  | 0 1      1 | 1 1       1 | 1 0
</snippet></ROW><ROW><id>1746642</id><snippet>    201: 1100 1001
AND  15: 0000 1111
------------------
 IS   9  0000 1001
</snippet></ROW><ROW><id>1746642</id><snippet>left-shift</snippet></ROW><ROW><id>1746642</id><snippet>and</snippet></ROW><ROW><id>1746642</id><snippet>or</snippet></ROW><ROW><id>1746642</id><snippet>packed_val = ((val1 &amp; 15) &lt;&lt; 4) | (val2 &amp; 15)
</snippet></ROW><ROW><id>1746642</id><snippet>&amp; 15</snippet></ROW><ROW><id>1746642</id><snippet>&lt;&lt; 4</snippet></ROW><ROW><id>1746642</id><snippet>val1</snippet></ROW><ROW><id>1746642</id><snippet>|</snippet></ROW><ROW><id>1746642</id><snippet>val1</snippet></ROW><ROW><id>1746642</id><snippet>val2</snippet></ROW><ROW><id>1746642</id><snippet>                val1            val2
                ====            ====
 &amp; 15 (and)   xxxx-0111       xxxx-0100  &amp; 15
 &lt;&lt; 4 (left)  0111-0000           |
                  |               |
                  +-------+-------+
                          |
| (or)                0111-0100
</snippet></ROW><ROW><id>1746927</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>1747302</id><snippet>def sumdiv7(limit):
    for i in range(limit):
        result = sum(range(i*7)) / 7
        print "For", i, ", sumdiv = ", result
</snippet></ROW><ROW><id>1747302</id><snippet>&gt;&gt;&gt; sumdiv7(4)
For 0 , sumdiv =  0
For 1 , sumdiv =  3
For 2 , sumdiv =  13
For 3 , sumdiv =  30
</snippet></ROW><ROW><id>1747302</id><snippet>i*7</snippet></ROW><ROW><id>1747302</id><snippet>range</snippet></ROW><ROW><id>1747302</id><snippet>x</snippet></ROW><ROW><id>1747302</id><snippet>sum</snippet></ROW><ROW><id>1747414</id><snippet>make_test_server()</snippet></ROW><ROW><id>1747414</id><snippet>make_dummy_test_server()</snippet></ROW><ROW><id>1747471</id><snippet>#!/usr/bin/env python
"""
Display Information about a Google Calendar
...
"""

if __name__ == '__main__':
    print __doc__
</snippet></ROW><ROW><id>1747471</id><snippet>__doc__</snippet></ROW><ROW><id>1747760</id><snippet>r = (a % d)
i = (a / d)
</snippet></ROW><ROW><id>1747760</id><snippet>i, r = divmod(a,d)
</snippet></ROW><ROW><id>1747827</id><snippet>d = dict((key, value) for (key, value) in sequence)
</snippet></ROW><ROW><id>1747827</id><snippet>d = {key: value for (key, value) in sequence}
</snippet></ROW><ROW><id>1748151</id><snippet>samples = list(Weather.objects.filter().exclude(time__lt=commence).exclude(time__gt=cease))
for s10 in samples[::10]:
    # do something with every tenth...
</snippet></ROW><ROW><id>1748151</id><snippet>sample_count = 600 # Somehow determine how many samples are in your time window.
samples = Weather.objects.filter().exclude(time__lt=commence).exclude(time__gt=cease)
for s_num in range(0, sample_count, 10):
    s = samples[s_num]
    # Now you have one sample in s.
</snippet></ROW><ROW><id>1748151</id><snippet>range</snippet></ROW><ROW><id>1748151</id><snippet>&gt;&gt;&gt; range(0, 100, 10)
[0, 10, 20, 30, 40, 50, 60, 70, 80, 90]
</snippet></ROW><ROW><id>1748151</id><snippet>samples[s_num]</snippet></ROW><ROW><id>1748335</id><snippet>from multiprocessing import Queue, Pool

q = Queue()
ppool = Pool(processes=2)                                                       
q.put([ppool])
ppool = q.get()
</snippet></ROW><ROW><id>1748335</id><snippet>from multiprocessing import Pool, Process, cpu_count

def add(num):
  return num+1

def add_wrap(num):
  ppool = Pool(processes=cpu_count() )
  new_num = ppool.apply_async(add, [num])
  print new_num.get(timeout=3)

test = Process(target=add_wrap, args=(5,)).start()
</snippet></ROW><ROW><id>1748651</id><snippet>checker = None # not necessary

if some_decision:
    checker = True

if checker:
    # some stuff
</snippet></ROW><ROW><id>1749100</id><snippet>class ArticleView(RestView):

    def GET(request, article_id):
        return render_to_response("article.html", {
            'article': get_object_or_404(Article, pk = article_id),
        })

    def POST(request, article_id):
        # Example logic only; should be using django.forms instead
        article = get_object_or_404(Article, pk = article_id)
        article.headline = request.POST['new_headline']
        article.body = request.POST['new_body']
        article.save()
        return HttpResponseRedirect(request.path)
</snippet></ROW><ROW><id>1749325</id><snippet>import random

index = random.randint(0, len(yourstring)-1)
yourstring = yourstring[:index] + yourstring[index+1:]

print yourstring[index]
</snippet></ROW><ROW><id>1749471</id><snippet>python</snippet></ROW><ROW><id>1749471</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>1749826</id><snippet>f.writelines(videoDirectory)</snippet></ROW><ROW><id>1749826</id><snippet>videoDirectory = os.listdir("videos")
f = open("videos.html", "w")
f.write('&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt;'    
f.writelines(['&lt;li&gt;&lt;a href="videos/%s"&gt;%s&lt;/a&gt;&lt;/li&gt;' % (f, f) for f in videoDirectory])
f.write('&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;')
</snippet></ROW><ROW><id>1749919</id><snippet>00</snippet></ROW><ROW><id>1749919</id><snippet>&gt;&gt;&gt; string = "4100360036000000570046004200410061006200730020003600"
&gt;&gt;&gt; pieces = [string[i:i+2] for i in range(0, len(string), 2)]
&gt;&gt;&gt; pieces
['41', '00', '36', '00', '36', '00', '00', '00', '57', '00', '46', '00', '42', '00', '41', '00', '61', '00', '62', '00', '73', '00', '20', '00', '36', '00']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1749919</id><snippet>&gt;&gt;&gt; where0s = [i for i in range(len(pieces)) if pieces[i] == '00']
&gt;&gt;&gt; where0s
[1, 3, 5, 6, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]
</snippet></ROW><ROW><id>1749919</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; pickone = random.choice(where0s)
&gt;&gt;&gt; pickone
25
&gt;&gt;&gt; # if replacing:
... 
&gt;&gt;&gt; pieces[pickone] = 'BA'
&gt;&gt;&gt; ''.join(pieces)
'41003600360000005700460042004100610062007300200036BA'
&gt;&gt;&gt; # if removing:
... 
&gt;&gt;&gt; del pieces[pickone]
&gt;&gt;&gt; ''.join(pieces)
'41003600360000005700460042004100610062007300200036'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1749950</id><snippet>x = os.statvfs('/')
x.f_favail
</snippet></ROW><ROW><id>1750616</id><snippet>import random

def main():
  def process(data):
     return data + [0]
  def process1(data):
     return data + [9]
  def process2(data):
     return data + [7]
  def run(data):
     test = random.choice([process,process1,process2])
     print test(data)
  for i in range(7):
    run([1, 2, 3])

main()
</snippet></ROW><ROW><id>1750616</id><snippet>[1, 2, 3, 7]
[1, 2, 3, 0]
[1, 2, 3, 0]
[1, 2, 3, 7]
[1, 2, 3, 0]
[1, 2, 3, 9]
[1, 2, 3, 9]
</snippet></ROW><ROW><id>1750797</id><snippet>sys.argv</snippet></ROW><ROW><id>1750813</id><snippet>if __client != None:
</snippet></ROW><ROW><id>1750813</id><snippet>if __client is not None:
</snippet></ROW><ROW><id>1750813</id><snippet>__getattr__</snippet></ROW><ROW><id>1750813</id><snippet>AttributeError</snippet></ROW><ROW><id>1750813</id><snippet>getattr</snippet></ROW><ROW><id>1750813</id><snippet>__cmp__</snippet></ROW><ROW><id>1750813</id><snippet>__ne__</snippet></ROW><ROW><id>1750813</id><snippet>AttributeError</snippet></ROW><ROW><id>1750813</id><snippet>AttributeError</snippet></ROW><ROW><id>1750931</id><snippet>13:40 jsmith@undertow% ping 97.107.138.15
PING 97.107.138.15 (97.107.138.15) 56(84) bytes of data.
64 bytes from 97.107.138.15: icmp_seq=1 ttl=64 time=1.25 ms
^C

13:40 jsmith@undertow% arp -n 97.107.138.15
Address                  HWtype  HWaddress           Flags Mask            Iface
97.107.138.15            ether   fe:fd:61:6b:8a:0f   C                     eth0
</snippet></ROW><ROW><id>1750931</id><snippet>&gt;&gt;&gt; from subprocess import Popen, PIPE
&gt;&gt;&gt; IP = "1.2.3.4"

&gt;&gt;&gt; # do_ping(IP)
&gt;&gt;&gt; # The time between ping and arp check must be small, as ARP may not cache long

&gt;&gt;&gt; pid = Popen(["arp", "-n", IP], stdout=PIPE)
&gt;&gt;&gt; s = pid.communicate()[0]
&gt;&gt;&gt; mac = re.search(r"(([a-f\d]{1,2}\:){5}[a-f\d]{1,2})", s).groups()[0]
&gt;&gt;&gt; mac
"fe:fd:61:6b:8a:0f"
</snippet></ROW><ROW><id>1751007</id><snippet>heap[k] &lt;= heap[2*k+1]</snippet></ROW><ROW><id>1751007</id><snippet>heap[k] &lt;=
  heap[2*k+2]</snippet></ROW><ROW><id>1751007</id><snippet>heap[0]</snippet></ROW><ROW><id>1751007</id><snippet>peek</snippet></ROW><ROW><id>1751456</id><snippet>fullname</snippet></ROW><ROW><id>1751456</id><snippet>    fullnames = []
    imageLabels = [self.imgOnePathLabel, self.imgTwoPathLabel,
            self.imgThreePathLabel]
    for imageLabel in imageLabels:
        if imageLabel.text():
            image = self.imgOnePathLabel.text()
            fullnames.append('%s' % image)
    try:
        for fullname in fullnames:
            # split end file from the file path
            name = os.path.split(fullname)[1]
            f = open(fullname, "rb")
            # store our selected file
            ftp.storbinary('STOR ' + name, f)
            msg = "Sent &lt;font color=green&gt;" + name + "&lt;/font&gt;"
            self.logBrowser.append(msg)
            f.close()
    finally:
        msg = "&lt;font color=green&gt;" "Ok" "&lt;/font&gt;"
        self.logBrowser.append(msg)
</snippet></ROW><ROW><id>1751650</id><snippet>http://localhost:7789/wsdl</snippet></ROW><ROW><id>1751650</id><snippet>http://localhost:7789/anythingherewsdl</snippet></ROW><ROW><id>1752010</id><snippet>re.split( pattern, string )</snippet></ROW><ROW><id>1752047</id><snippet>'\n'</snippet></ROW><ROW><id>1752047</id><snippet>\n</snippet></ROW><ROW><id>1752208</id><snippet>for block in iter(lambda: file_obj.read(4), ""):
  use(block)
</snippet></ROW><ROW><id>1752295</id><snippet>dir</snippet></ROW><ROW><id>1752295</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("www.google.nl")
&gt;&gt;&gt; conn.request("HEAD", "/index.html")
&gt;&gt;&gt; res = conn.getresponse()
&gt;&gt;&gt; dir(res)
['__doc__', '__init__', '__module__', '_check_close', '_method', '_read_chunked', '_read_status', '_safe_read', 'begin', 'chunk_left', 'chunked', 'close', 'debuglevel', 'fp', 'getheader', 'getheaders', 'isclosed', 'length', 'msg', 'read', 'reason', 'status', 'strict', 'version', 'will_close']
</snippet></ROW><ROW><id>1752295</id><snippet>help</snippet></ROW><ROW><id>1752295</id><snippet>__doc__</snippet></ROW><ROW><id>1752295</id><snippet>res</snippet></ROW><ROW><id>1752295</id><snippet>&gt;&gt;&gt; help(res)
</snippet></ROW><ROW><id>1752295</id><snippet>getresponse</snippet></ROW><ROW><id>1752295</id><snippet>HTTPResponse</snippet></ROW><ROW><id>1752295</id><snippet>help(res)</snippet></ROW><ROW><id>1752295</id><snippet>HTTPResponse</snippet></ROW><ROW><id>1752295</id><snippet>HTTPResponse.read([amt])</snippet></ROW><ROW><id>1752295</id><snippet>HTTPResponse.getheader(name[, default])</snippet></ROW><ROW><id>1752295</id><snippet>HTTPResponse.getheaders()</snippet></ROW><ROW><id>1752295</id><snippet>HTTPResponse.msg</snippet></ROW><ROW><id>1752295</id><snippet>HTTPResponse.version</snippet></ROW><ROW><id>1752295</id><snippet>HTTPResponse.status</snippet></ROW><ROW><id>1752295</id><snippet>HTTPResponse.reason</snippet></ROW><ROW><id>1752362</id><snippet>import urllib
urllib.urlopen(url).geturl()
</snippet></ROW><ROW><id>1752362</id><snippet>&gt;&gt;&gt; f = urllib2.urlopen("http://tinyurl.com/oex2e")
&gt;&gt;&gt; f.geturl()
'http://www.amazon.com/All-Creatures-Great-Small-Collection/dp/B00006G8FI'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1752754</id><snippet>def textOf(soup):
    return u''.join(soup.findAll(text=True))
</snippet></ROW><ROW><id>1752754</id><snippet>texts = [textOf(n) for n in soup.findAll('a', href=re.compile('^notizia.php\?idn=\d+'))]
</snippet></ROW><ROW><id>1752760</id><snippet>def total(category):
    return sum(value.get(category, 0) for value in game.home.lineup.values())

&gt;&gt;&gt; total('HR')
1104
</snippet></ROW><ROW><id>1752760</id><snippet>def total(self, category):
    return sum(value.get(category, 0) for value in self.lineup.values())
</snippet></ROW><ROW><id>1753308</id><snippet>SELECT</snippet></ROW><ROW><id>1753466</id><snippet>options, args = parser.parse_args()
option_dict = vars(options)
</snippet></ROW><ROW><id>1754167</id><snippet>void toggled (bool)
</snippet></ROW><ROW><id>1755177</id><snippet>def timeseq(start,stop,interval):
    while start &lt;= stop:
        yield start
        start += interval
</snippet></ROW><ROW><id>1755177</id><snippet>for t in timeseq(start,stop,interval):
    table.objects.filter(t)
</snippet></ROW><ROW><id>1755177</id><snippet>data = [table.objects.filter(t) for t in timeseq(start,stop,interval)]
</snippet></ROW><ROW><id>1755442</id><snippet>os.execvp</snippet></ROW><ROW><id>1755442</id><snippet>os.execvp</snippet></ROW><ROW><id>1755442</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>1755442</id><snippet>subprocess</snippet></ROW><ROW><id>1755442</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>1755442</id><snippet>xlogo</snippet></ROW><ROW><id>1755442</id><snippet>import subprocess
xvfb_args = ['xvfb-run', '--server-args=-screen 0, 640x480x24', 'xlogo']
process = subprocess.Popen(xvfb_args)
</snippet></ROW><ROW><id>1755442</id><snippet>xvfb-run</snippet></ROW><ROW><id>1755442</id><snippet>Xvfb</snippet></ROW><ROW><id>1755442</id><snippet>process.kill()</snippet></ROW><ROW><id>1755442</id><snippet>Xvfb</snippet></ROW><ROW><id>1755442</id><snippet>import os
import signal
import subprocess

SERVER_NUM = 99  # 99 is the default used by xvfb-run; you can leave this out.

xvfb_args = ['xvfb-run', '--server-num=%d' % SERVER_NUM,
             '--server-args=-screen 0, 640x480x24', 'xlogo']
subprocess.Popen(xvfb_args)

# ... do whatever you want to do here...

pid = int(open('/tmp/.X%s-lock' % SERVER_NUM).read().strip())
os.kill(pid, signal.SIGINT)
</snippet></ROW><ROW><id>1755442</id><snippet>Xvfb</snippet></ROW><ROW><id>1755442</id><snippet>/tmp/.X99-lock</snippet></ROW><ROW><id>1755474</id><snippet>    win32file.WriteFile(CLIENT_PIPE,"%d\r\n"%i ,None)
    win32file.FlushFileBuffers(CLIENT_PIPE)
    win32file.SetFilePointer(CLIENT_PIPE,0,win32file.FILE_BEGIN)
    i,s = win32file.ReadFile(CLIENT_PIPE,10,None)
</snippet></ROW><ROW><id>1755696</id><snippet>root.tk.eval('''
rename puts original_puts 
proc puts {args} {
    if {[llength $args] == 1} {
        return "=&gt; [lindex $args 0]"
    } else {
        eval original_puts $args
    }
}
''')

foo = root.tk.eval('puts "hello, world"')
print foo
=&gt; hello, world
</snippet></ROW><ROW><id>1756156</id><snippet>next</snippet></ROW><ROW><id>1756156</id><snippet>StopIteration</snippet></ROW><ROW><id>1756156</id><snippet>return</snippet></ROW><ROW><id>1756156</id><snippet>yield</snippet></ROW><ROW><id>1756156</id><snippet>yield</snippet></ROW><ROW><id>1756156</id><snippet>&gt;&gt;&gt; def myGen(n):
...     yield n
...     yield n + 1
... 
&gt;&gt;&gt; g = myGen(6)
&gt;&gt;&gt; next(g)
6
&gt;&gt;&gt; next(g)
7
&gt;&gt;&gt; next(g)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</snippet></ROW><ROW><id>1756156</id><snippet>myGen(n)</snippet></ROW><ROW><id>1756156</id><snippet>n</snippet></ROW><ROW><id>1756156</id><snippet>n + 1</snippet></ROW><ROW><id>1756156</id><snippet>next</snippet></ROW><ROW><id>1756156</id><snippet>for</snippet></ROW><ROW><id>1756156</id><snippet>next</snippet></ROW><ROW><id>1756156</id><snippet>&gt;&gt;&gt; for n in myGen(6):
...     print(n)
... 
6
7
</snippet></ROW><ROW><id>1756156</id><snippet>&gt;&gt;&gt; g = (n for n in range(3, 5))
&gt;&gt;&gt; next(g)
3
&gt;&gt;&gt; next(g)
4
&gt;&gt;&gt; next(g)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
StopIteration
</snippet></ROW><ROW><id>1756156</id><snippet>&gt;&gt;&gt; lc = [n for n in range(3, 5)]
&gt;&gt;&gt; lc
[3, 4]
</snippet></ROW><ROW><id>1756156</id><snippet>next</snippet></ROW><ROW><id>1756156</id><snippet>yield</snippet></ROW><ROW><id>1756156</id><snippet>next</snippet></ROW><ROW><id>1756156</id><snippet>yield</snippet></ROW><ROW><id>1756156</id><snippet>send</snippet></ROW><ROW><id>1756156</id><snippet>&gt;&gt;&gt; def fib():
...     a, b = 0, 1
...     while True:
...         yield a
...         a, b = b, a + b
... 
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.islice(fib(), 10))
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]
</snippet></ROW><ROW><id>1756156</id><snippet>itertools.islice</snippet></ROW><ROW><id>1756156</id><snippet>itertools</snippet></ROW><ROW><id>1756156</id><snippet>next</snippet></ROW><ROW><id>1756156</id><snippet>__next__</snippet></ROW><ROW><id>1756156</id><snippet>o.next()</snippet></ROW><ROW><id>1756156</id><snippet>next(o)</snippet></ROW><ROW><id>1756156</id><snippet>next()</snippet></ROW><ROW><id>1756156</id><snippet>.next</snippet></ROW><ROW><id>1756156</id><snippet>&gt;&gt;&gt; g = (n for n in range(3, 5))
&gt;&gt;&gt; g.next()
3
</snippet></ROW><ROW><id>1756577</id><snippet>def publishTraverse(self, request, name):
    if name in self.context:
        return MyMessageView(self.context[name], request)

    # fall back to views such as index.html
    view = queryMultiAdapter((self.context, request), name=name)
    if view is not None:
        return view

    # give up and return a 404 Not Found error page
    raise NotFound(self.context, name, request)
</snippet></ROW><ROW><id>1756577</id><snippet>class MyMessageView(BrowserPage):
    __call__ = ViewPageTemplateFile('read.pt')
</snippet></ROW><ROW><id>1756587</id><snippet>img = QImage("/tmp/example.png")
buffer = QBuffer()
buffer.open(QIODevice.ReadWrite)
img.save(buffer, "PNG")

strio = cStringIO.StringIO()
strio.write(buffer.data())
buffer.close()
strio.seek(0)
pil_im = Image.open(strio)
</snippet></ROW><ROW><id>1757269</id><snippet>pkg_resources</snippet></ROW><ROW><id>1757269</id><snippet>Distribute</snippet></ROW><ROW><id>1757269</id><snippet>setuptools</snippet></ROW><ROW><id>1757269</id><snippet>Distribute</snippet></ROW><ROW><id>1757269</id><snippet>setuptools</snippet></ROW><ROW><id>1757269</id><snippet>curl -O https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py
python ez_setup.py
</snippet></ROW><ROW><id>1757269</id><snippet>pip</snippet></ROW><ROW><id>1757269</id><snippet>setuptools</snippet></ROW><ROW><id>1757269</id><snippet>/usr/local/lib</snippet></ROW><ROW><id>1757269</id><snippet>$PATH</snippet></ROW><ROW><id>1757269</id><snippet>python2.6</snippet></ROW><ROW><id>1757269</id><snippet>.bash_profile</snippet></ROW><ROW><id>1757269</id><snippet>$PATH</snippet></ROW><ROW><id>1757269</id><snippet>easy_install</snippet></ROW><ROW><id>1757269</id><snippet>pkg_resources</snippet></ROW><ROW><id>1757269</id><snippet>easy_install</snippet></ROW><ROW><id>1757269</id><snippet>pip</snippet></ROW><ROW><id>1757269</id><snippet>ipython</snippet></ROW><ROW><id>1757269</id><snippet>easy_install ipython
</snippet></ROW><ROW><id>1757269</id><snippet>pip install ipython
</snippet></ROW><ROW><id>1757269</id><snippet>site-packages</snippet></ROW><ROW><id>1757848</id><snippet>twisted.test.test_ftp.FTPClientTestCase.test_failedRETR</snippet></ROW><ROW><id>1757848</id><snippet>LIST</snippet></ROW><ROW><id>1757848</id><snippet>FTPClient.list</snippet></ROW><ROW><id>1757848</id><snippet>Deferred</snippet></ROW><ROW><id>1757848</id><snippet>retrieveFile</snippet></ROW><ROW><id>1757895</id><snippet>s = [set([1, 2]), set([1, 3]), set([1, 2, 3]), set([2, 4])]
</snippet></ROW><ROW><id>1757895</id><snippet>combinations</snippet></ROW><ROW><id>1757895</id><snippet>from itertools import combinations
[ i[0] &amp; i[1] for i in combinations(s,2) ]
</snippet></ROW><ROW><id>1757895</id><snippet>for i in combinations(s, 2):
    inter = i[0] &amp; i[1]
    # processes the intersection set result "inter"
</snippet></ROW><ROW><id>1757895</id><snippet>    l = len(inter)
</snippet></ROW><ROW><id>1757895</id><snippet>gen</snippet></ROW><ROW><id>1757895</id><snippet>def gen(parameter):
    while more_sets():
        # ... some code to generate the next set 'x'
        yield x

with open("results", "wt") as f_results:
    for i in combinations(gen("data"), 2):
        inter = i[0] &amp; i[1]
        f_results.write("%d\n" % len(inter))
</snippet></ROW><ROW><id>1757895</id><snippet>(index, set)</snippet></ROW><ROW><id>1757895</id><snippet>set</snippet></ROW><ROW><id>1757895</id><snippet>s = [(0, set([1, 2])), (1, set([1, 3])), (2, set([1, 2, 3]))]
</snippet></ROW><ROW><id>1757895</id><snippet>with open("results", "wt") as f_results:
    for i in combinations(s, 2):
        inter = i[0][1] &amp; i[1][1]
        f_results.write("length of %d &amp; %d: %d\n" % (i[0][0],i[1][0],len(inter))
</snippet></ROW><ROW><id>1757895</id><snippet>i[0]</snippet></ROW><ROW><id>1757895</id><snippet>i[1]</snippet></ROW><ROW><id>1757895</id><snippet>(index, set)</snippet></ROW><ROW><id>1757895</id><snippet>i[0][1]</snippet></ROW><ROW><id>1757895</id><snippet>i[0][0]</snippet></ROW><ROW><id>1758100</id><snippet>cordlist = []</snippet></ROW><ROW><id>1758100</id><snippet>while(1)</snippet></ROW><ROW><id>1758841</id><snippet>try:
  import readline
except ImportError:
  print "Module readline unavailable."
else:
  import rlcompleter
  readline.parse_and_bind("tab: complete")
</snippet></ROW><ROW><id>1758841</id><snippet>if [ -f ~/.pythonstartup.py ]
then
  export PYTHONSTARTUP=~/.pythonstartup.py
fi
</snippet></ROW><ROW><id>1759212</id><snippet>for line in file:
  print line.rstrip("\n"), "something"
</snippet></ROW><ROW><id>1759212</id><snippet>line.rstrip()</snippet></ROW><ROW><id>1759335</id><snippet>sys.path</snippet></ROW><ROW><id>1759335</id><snippet>$PYTHONPATH</snippet></ROW><ROW><id>1759335</id><snippet>httpd.conf</snippet></ROW><ROW><id>1759335</id><snippet>python.conf</snippet></ROW><ROW><id>1759335</id><snippet># python setup.py install</snippet></ROW><ROW><id>1759336</id><snippet>unittest.main()</snippet></ROW><ROW><id>1759336</id><snippet>result = unittest.TextTestRunner(verbosity=2).run(suite())
</snippet></ROW><ROW><id>1759336</id><snippet>result = unittest.TextTestRunner(verbosity=2).run(suite)
</snippet></ROW><ROW><id>1759485</id><snippet>%p</snippet></ROW><ROW><id>1759485</id><snippet>%I</snippet></ROW><ROW><id>1759485</id><snippet>%H</snippet></ROW><ROW><id>1759485</id><snippet>%I</snippet></ROW><ROW><id>1759635</id><snippet>s = s.replace('\r\n', '\n')
</snippet></ROW><ROW><id>1759906</id><snippet>response.headers</snippet></ROW><ROW><id>1759906</id><snippet>def hello(self):
    cherrypy.response.headers['Content-Type']= 'image/png'
    return generate_image_data()
</snippet></ROW><ROW><id>1759906</id><snippet>@cherrypy.tools.response_headers([('Content-Type', 'image/png')])
def hello(self):
    return generate_image_data()
</snippet></ROW><ROW><id>1759906</id><snippet>def mimetype(type):
    def decorate(func):
        def wrapper(*args, **kwargs):
            cherrypy.response.headers['Content-Type'] = type
            return func(*args, **kwargs)
        return wrapper
    return decorate

class MyClass:        
    @mimetype("image/png")
    def hello(self):
        return generate_image_data()
</snippet></ROW><ROW><id>1760046</id><snippet>ulimit</snippet></ROW><ROW><id>1760378</id><snippet>.GetHtmlLink().href</snippet></ROW><ROW><id>1760378</id><snippet>album_urls = [album.GetHtmlLink().href for album in albums.entry]
</snippet></ROW><ROW><id>1760476</id><snippet>class GameForm(forms.ModelForm): 
        name = forms.CharField(max_length=15, label='Name') 
        url = forms.URLField(label='URL', initial='http://') 
        cats = forms.ModelMultipleChoiceField(widget=forms.CheckboxSelectMultiple(),required=True)
        class Meta: 
                model = Game 
                fields = ('name','url','cats')
</snippet></ROW><ROW><id>1760572</id><snippet>import cgi
print "&lt;span size='medium'&gt;&lt;b&gt;%s&lt;/b&gt;&lt;/span&gt;\n%s" %
      (cgi.escape(site_title), cgi.escape(URL))
</snippet></ROW><ROW><id>1760640</id><snippet>fib.cache</snippet></ROW><ROW><id>1760640</id><snippet>fib</snippet></ROW><ROW><id>1760640</id><snippet>def fib(n, _memo={0:1, 1:1}):
    if n in _memo:
        return _memo[n]
    else:
        _memo[n] = fib(n-1) + fib(n-2)
        return _memo[n]
</snippet></ROW><ROW><id>1760640</id><snippet>$ python -mtimeit -s'import mem' 'mem.fib1(20)'
1000000 loops, best of 3: 0.754 usec per loop
$ python -mtimeit -s'import mem' 'mem.fib2(20)'
1000000 loops, best of 3: 0.507 usec per loop
</snippet></ROW><ROW><id>1760640</id><snippet>_memo</snippet></ROW><ROW><id>1760640</id><snippet>fib.cache</snippet></ROW><ROW><id>1760715</id><snippet>$ ls -l *zip
-rw-r--r--  1 aleax  5000  115749854 Nov 18 19:16 large.zip
$ unzip -l large.zip | wc
   23396   93633 2254735
</snippet></ROW><ROW><id>1760715</id><snippet>$ time unzip -d /tmp large.zip &gt;/dev/null

real    0m14.702s
user    0m2.586s
sys         0m5.408s
</snippet></ROW><ROW><id>1760715</id><snippet>$ time py26 -c'from zipfile import ZipFile; z=ZipFile("large.zip"); z.extractall("/tmp")'

real    0m13.274s
user    0m5.059s
sys         0m5.166s
</snippet></ROW><ROW><id>1760715</id><snippet>zipfile</snippet></ROW><ROW><id>1760952</id><snippet>__import__</snippet></ROW><ROW><id>1760952</id><snippet>"functions.py"</snippet></ROW><ROW><id>1760952</id><snippet>getattr(moduleobject, functionname)</snippet></ROW><ROW><id>1760987</id><snippet>from myproject.folder import file</snippet></ROW><ROW><id>1760987</id><snippet>file</snippet></ROW><ROW><id>1760987</id><snippet>file.function</snippet></ROW><ROW><id>1760987</id><snippet>file</snippet></ROW><ROW><id>1760987</id><snippet>as fi</snippet></ROW><ROW><id>1760987</id><snippet>from</snippet></ROW><ROW><id>1760987</id><snippet>fi.function</snippet></ROW><ROW><id>1760987</id><snippet>from</snippet></ROW><ROW><id>1761265</id><snippet>stream = cStringIO.StringIO(data)
wxImage = wx.ImageFromStream(stream)
</snippet></ROW><ROW><id>1761373</id><snippet>mechanize</snippet></ROW><ROW><id>1761373</id><snippet>spidermonkey</snippet></ROW><ROW><id>1761373</id><snippet>Browser.reload()</snippet></ROW><ROW><id>1761373</id><snippet>checkValid()</snippet></ROW><ROW><id>1761753</id><snippet>&gt;&gt;&gt; import getpass
&gt;&gt;&gt; pw = getpass.getpass()
</snippet></ROW><ROW><id>1762156</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; urllib2.quote('한글')
'%ED%95%9C%EA%B8%80'
</snippet></ROW><ROW><id>1762487</id><snippet>append</snippet></ROW><ROW><id>1762487</id><snippet>temp</snippet></ROW><ROW><id>1762487</id><snippet>itertools.chain</snippet></ROW><ROW><id>1762487</id><snippet>&gt;&gt;&gt; from itertools import chain
&gt;&gt;&gt; list(chain(*mayorPowers))
['germany', 'italy', 'japan', 'russia', 'uk', 'us']
</snippet></ROW><ROW><id>1762487</id><snippet>mayorPowers</snippet></ROW><ROW><id>1762487</id><snippet>chain</snippet></ROW><ROW><id>1762487</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>1762487</id><snippet>&gt;&gt;&gt; list(chain.from_iterable(mayorPowers))
['germany', 'italy', 'japan', 'russia', 'uk', 'us']
</snippet></ROW><ROW><id>1762487</id><snippet>extend</snippet></ROW><ROW><id>1762487</id><snippet>&gt;&gt;&gt; ww2 = []
&gt;&gt;&gt; for mp in mayorPowers:
...     ww2.extend(mp)
...
&gt;&gt;&gt; ww2
['germany', 'italy', 'japan', 'russia', 'uk', 'us']
</snippet></ROW><ROW><id>1762487</id><snippet>sum</snippet></ROW><ROW><id>1762487</id><snippet>&gt;&gt;&gt; sum(mayorPowers, [])
['germany', 'italy', 'japan', 'russia', 'uk', 'us']
</snippet></ROW><ROW><id>1762487</id><snippet>functools.reduce</snippet></ROW><ROW><id>1762487</id><snippet>operator.add</snippet></ROW><ROW><id>1762487</id><snippet>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; from operator import add
&gt;&gt;&gt; reduce(add, mayorPowers)
['germany', 'italy', 'japan', 'russia', 'uk', 'us']
</snippet></ROW><ROW><id>1762492</id><snippet>for index, s in enumerate(stocks_list):
    print index, s
</snippet></ROW><ROW><id>1762576</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>1762576</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>1762576</id><snippet>s = s.decode('some_encoding').encode('ascii', 'replace')
</snippet></ROW><ROW><id>1762576</id><snippet>'some_encoding'</snippet></ROW><ROW><id>1762584</id><snippet>&gt;&gt;&gt; for fruit in thelist[1:]:
&gt;&gt;&gt;    print fruit
</snippet></ROW><ROW><id>1762705</id><snippet>__repr__()</snippet></ROW><ROW><id>1762705</id><snippet>__str__</snippet></ROW><ROW><id>1762705</id><snippet>print [str(x) for x in l]
</snippet></ROW><ROW><id>1762705</id><snippet>print [x.encode() for x in l]
</snippet></ROW><ROW><id>1762833</id><snippet>perform_actions</snippet></ROW><ROW><id>1762833</id><snippet>import time

def perform_actions():
    print("Hello.. again")

try:
    while True:
        perform_actions()
        try:
            while True: time.sleep(3600)
        except KeyboardInterrupt:
            time.sleep(0.5)
except KeyboardInterrupt:
    pass
</snippet></ROW><ROW><id>1762833</id><snippet>SIGINT</snippet></ROW><ROW><id>1762833</id><snippet>kill -int &lt;pid&gt;</snippet></ROW><ROW><id>1762937</id><snippet>/tmp/subdir</snippet></ROW><ROW><id>1762937</id><snippet>os.symlink('/usr/bin/python', '/tmp/subdir/python')
</snippet></ROW><ROW><id>1762937</id><snippet>src = '/usr/bin/python'
dst = '/tmp/subdir/python'

if not os.path.isdir(os.path.dirname(dst)):
    os.makedirs(os.path.dirname(dst))
os.symlink(src, dst)
</snippet></ROW><ROW><id>1763214</id><snippet>f(f^-1(x)) = x
</snippet></ROW><ROW><id>1763214</id><snippet>actual = parse("file.xml")
expected = "magic value"
assert(actual == expected)
</snippet></ROW><ROW><id>1763214</id><snippet>expected = generate()
input = render(expected)
actual = parse()
assert(actual == expected)
</snippet></ROW><ROW><id>1763214</id><snippet>f(x) = f'(x)
</snippet></ROW><ROW><id>1763567</id><snippet>hasattr</snippet></ROW><ROW><id>1763567</id><snippet>__</snippet></ROW><ROW><id>1763567</id><snippet>collections</snippet></ROW><ROW><id>1763567</id><snippet>if isinstance( arg, collections.Sequence ):
    self._some_var = list(arg)
else:
    self._some_var.append( arg )
</snippet></ROW><ROW><id>1763643</id><snippet>mkdir /home/me/.local</snippet></ROW><ROW><id>1763643</id><snippet>.local</snippet></ROW><ROW><id>1763643</id><snippet>mkdir /home/me/.local/src</snippet></ROW><ROW><id>1763643</id><snippet>cd /home/me/.local/src</snippet></ROW><ROW><id>1763643</id><snippet>wget &lt;a href="http://python.org/ftp/python/2.6.4/Python-2.6.4.tgz" rel="nofollow"&gt;http://python.org/ftp/python/2.6.4/Python-2.6.4.tgz&lt;/a&gt;</snippet></ROW><ROW><id>1763643</id><snippet>gzip -d Python-2.6.4.tgz</snippet></ROW><ROW><id>1763643</id><snippet>tar xf Python-2.6.4.tar</snippet></ROW><ROW><id>1763643</id><snippet>cd Python-2.6.4</snippet></ROW><ROW><id>1763643</id><snippet>./configure --prefix=/home/me/.local</snippet></ROW><ROW><id>1763643</id><snippet>make</snippet></ROW><ROW><id>1763643</id><snippet>make install</snippet></ROW><ROW><id>1763643</id><snippet>/home/me/.local/bin/python</snippet></ROW><ROW><id>1763643</id><snippet>/home/me/.local/bin/python setup.py install</snippet></ROW><ROW><id>1763643</id><snippet>#!/home/me/.local/bin/python</snippet></ROW><ROW><id>1763643</id><snippet>mod_wsgi</snippet></ROW><ROW><id>1763900</id><snippet>from distutils.command.install import install as DistutilsInstall

class MyInstall(DistutilsInstall):
    def run(self):
        do_pre_install_stuff()
        DistutilsInstall.run(self)
        do_post_install_stuff()

...

setup(..., cmdclass={'install': MyInstall}, ...)
</snippet></ROW><ROW><id>1763900</id><snippet>distutils</snippet></ROW><ROW><id>1763900</id><snippet>cmdclass</snippet></ROW><ROW><id>1764379</id><snippet>f.writelines([os.getcwd %s % (f) for f in myDirectory])
</snippet></ROW><ROW><id>1764379</id><snippet>myDirectory</snippet></ROW><ROW><id>1764379</id><snippet> f.writelines(os.path.join(os.getcwd(), f) for f in myDirectory)
</snippet></ROW><ROW><id>1764391</id><snippet>sum(x.b == 1 for x in L)
</snippet></ROW><ROW><id>1764391</id><snippet>x.b == 1</snippet></ROW><ROW><id>1764391</id><snippet>int</snippet></ROW><ROW><id>1764391</id><snippet>0</snippet></ROW><ROW><id>1764391</id><snippet>False</snippet></ROW><ROW><id>1764391</id><snippet>1</snippet></ROW><ROW><id>1764391</id><snippet>True</snippet></ROW><ROW><id>1764391</id><snippet>timeit</snippet></ROW><ROW><id>1764391</id><snippet>$ py26 -mtimeit -s'L=[1,2,1,3,1]*100' 'len([x for x in L if x==1])'
10000 loops, best of 3: 56.6 usec per loop
$ py26 -mtimeit -s'L=[1,2,1,3,1]*100' 'sum(x==1 for x in L)'
10000 loops, best of 3: 87.7 usec per loop
</snippet></ROW><ROW><id>1764569</id><snippet>#!/usr/bin/env python
import itertools
a=[1,2]
b=['a','b']
c=[str(s)+str(t) for s,t in itertools.product(a,b)]
print(c)
['1a', '1b', '2a', '2b']

v=[1,'a']
w=[1,'b']
x=[1,'c']
y=[1,'d']
z=[1,'e']

r=[''.join([str(elt) for elt in p]) for p in itertools.product(v,w,x,y,z)]
print(r)
# ['11111', '1111e', '111d1', '111de', '11c11', '11c1e', '11cd1', '11cde', '1b111', '1b11e', '1b1d1', '1b1de', '1bc11', '1bc1e', '1bcd1', '1bcde', 'a1111', 'a111e', 'a11d1', 'a11de', 'a1c11', 'a1c1e', 'a1cd1', 'a1cde', 'ab111', 'ab11e', 'ab1d1', 'ab1de', 'abc11', 'abc1e', 'abcd1', 'abcde']
</snippet></ROW><ROW><id>1764569</id><snippet>def product(*args, **kwds):
        '''
        Source: http://docs.python.org/library/itertools.html#itertools.product
        '''
        # product('ABCD', 'xy') --&gt; Ax Ay Bx By Cx Cy Dx Dy
        # product(range(2), repeat=3) --&gt; 000 001 010 011 100 101 110 111
        pools = map(tuple, args) * kwds.get('repeat', 1)
        result = [[]]
        for pool in pools:
            result = [x+[y] for x in result for y in pool]
        for prod in result:
            yield tuple(prod)
</snippet></ROW><ROW><id>1764569</id><snippet>a</snippet></ROW><ROW><id>1764569</id><snippet>b</snippet></ROW><ROW><id>1764569</id><snippet>v</snippet></ROW><ROW><id>1764569</id><snippet>w</snippet></ROW><ROW><id>1764569</id><snippet>x</snippet></ROW><ROW><id>1764569</id><snippet>y</snippet></ROW><ROW><id>1764569</id><snippet>z</snippet></ROW><ROW><id>1764569</id><snippet>r=[''.join([str(elt) for elt in p]) for p in itertools.product(*(set(elt) for elt in (v,w,x,y,z)))]
</snippet></ROW><ROW><id>1764637</id><snippet>ctypes.c_longlong</snippet></ROW><ROW><id>1764637</id><snippet>&gt;&gt;&gt; from ctypes import c_longlong as ll
&gt;&gt;&gt; ll(2 ** 63 - 1)
c_longlong(9223372036854775807L)
&gt;&gt;&gt; ll(2 ** 63)
c_longlong(-9223372036854775808L)
&gt;&gt;&gt; ll(2 ** 63).value
-9223372036854775808L
</snippet></ROW><ROW><id>1764637</id><snippet>signed long long</snippet></ROW><ROW><id>1764637</id><snippet>c_longlong</snippet></ROW><ROW><id>1764637</id><snippet>from ctypes import c_longlong

class ll(int):
    def __new__(cls, n):
        return int.__new__(cls, c_longlong(n).value)

    def __add__(self, other):
        return ll(super().__add__(other))

    def __radd__(self, other):
        return ll(other.__add__(self))

    def __sub__(self, other):
        return ll(super().__sub__(other))

    def __rsub__(self, other):
        return ll(other.__sub__(self))

    ...
</snippet></ROW><ROW><id>1764637</id><snippet>ll(2 ** 63) - 1</snippet></ROW><ROW><id>1764637</id><snippet>9223372036854775807</snippet></ROW><ROW><id>1764637</id><snippet>timeit</snippet></ROW><ROW><id>1764885</id><snippet>&gt;&gt;&gt; '%f, %2.f, %.*f' % (1/3.0, 1.3, 4, 1/3.0)
'0.333333,  1, 0.3333'
</snippet></ROW><ROW><id>1764885</id><snippet>4</snippet></ROW><ROW><id>1764885</id><snippet>*</snippet></ROW><ROW><id>1764885</id><snippet>&gt;&gt;&gt; '%f, %2.f, %.4f' % (1/3.0, 1.3, 1/3.0)
</snippet></ROW><ROW><id>1765093</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>1765093</id><snippet>subprocess.call</snippet></ROW><ROW><id>1765093</id><snippet>shell=True</snippet></ROW><ROW><id>1765820</id><snippet>pgmasi.query("INSERT INTO files('binf','file_name') VALUES(file,file_name)"
</snippet></ROW><ROW><id>1766804</id><snippet>print "Error reading file %s"%u"%s/%s"%(folder, f)</snippet></ROW><ROW><id>1766804</id><snippet>print "Error reading file %s" % u"%s/%s" % (folder, f)</snippet></ROW><ROW><id>1766804</id><snippet>print ("Error reading file %s" % u"%s/%s") % (folder, f)</snippet></ROW><ROW><id>1766804</id><snippet>print u"Error reading file %s/%s" % (folder, f)</snippet></ROW><ROW><id>1766804</id><snippet>repr(foo)</snippet></ROW><ROW><id>1766804</id><snippet>"%r" % foo</snippet></ROW><ROW><id>1766804</id><snippet>print repr(folder), repr(f)</snippet></ROW><ROW><id>1766804</id><snippet>u"%s/%s" % (folder, filename)</snippet></ROW><ROW><id>1766804</id><snippet>os.path.join(folder, filename)</snippet></ROW><ROW><id>1766804</id><snippet>try:
    some_code()
except ReasonForBaleOutError:
    continue
except: 
    # something's gone wrong, so get diagnostic info
    print repr(interesting_datum_1), repr(interesting_datum_2)
    # ... and get traceback and error message
    raise
</snippet></ROW><ROW><id>1766804</id><snippet>for i in xrange(len(folders), -1, -1):
    if '$' in folders[i]:
        del folders[i]
</snippet></ROW><ROW><id>1766804</id><snippet>content[0]</snippet></ROW><ROW><id>1766804</id><snippet>for folder, subfolders, filenames in os.walk(unicoded_top_folder):
</snippet></ROW><ROW><id>1766804</id><snippet>generator = os.walk(...); try: content = generator.next()</snippet></ROW><ROW><id>1766804</id><snippet>generator.next()</snippet></ROW><ROW><id>1766804</id><snippet>except StopIteration</snippet></ROW><ROW><id>1766804</id><snippet>print repr(
    "Error reading file %s" \
    % u"%s/%s" % (
        folder.decode('utf-8','ignore'),
        f.decode('utf-8','ignore')
        )
    )
</snippet></ROW><ROW><id>1766804</id><snippet>print repr(folder), repr(f)</snippet></ROW><ROW><id>1766804</id><snippet>print "Some meaningful text" # "error reading file" isn't
print "folder:", repr(folder)
print "f:", repr(f)
</snippet></ROW><ROW><id>1766804</id><snippet>self.exploreRec(("%s/%s"%(folder, f)).encode("utf-8"), treshold)</snippet></ROW><ROW><id>1766804</id><snippet>C:\junk\terabytest&gt;dir
[snip]
 Directory of C:\junk\terabytest

20/11/2009  01:28 PM    &lt;DIR&gt;          .
20/11/2009  01:28 PM    &lt;DIR&gt;          ..
20/11/2009  11:48 AM    &lt;DIR&gt;          empty
20/11/2009  01:26 PM                11 Hašek.txt
20/11/2009  01:31 PM             1,419 tbyte1.py
29/12/2007  09:33 AM                 9 Ð.txt
               3 File(s)          1,439 bytes
[snip]

C:\junk\terabytest&gt;\python26\python
Python 2.6.4 (r264:75708, Oct 26 2009, 08:23:19) [MSC v.1500 32 bit (Intel)] onwin32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; from pprint import pprint as pp
&gt;&gt;&gt; import os
</snippet></ROW><ROW><id>1766804</id><snippet>&gt;&gt;&gt; pp(list(os.walk(ur"c:\junk\terabytest")))
[(u'c:\\junk\\terabytest',
  [u'empty'],
  [u'Ha\u0161ek.txt', u'tbyte1.py', u'\xd0.txt']),
 (u'c:\\junk\\terabytest\\empty', [], [])]
</snippet></ROW><ROW><id>1766804</id><snippet>&gt;&gt;&gt; pp(list(os.walk(r"c:\junk\terabytest")))
[('c:\\junk\\terabytest',
  ['empty'],
  ['Ha\x9aek.txt', 'tbyte1.py', '\xd0.txt']),
 ('c:\\junk\\terabytest\\empty', [], [])]
</snippet></ROW><ROW><id>1766804</id><snippet>&gt;&gt;&gt; u'\u0161'.encode('cp1252')
'\x9a'
&gt;&gt;&gt; 'Ha\x9aek'.decode('cp1252')
u'Ha\u0161ek'
</snippet></ROW><ROW><id>1766804</id><snippet>&gt;&gt;&gt; 'Ha\x9aek'.decode('utf8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\python26\lib\encodings\utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeDecodeError: 'utf8' codec can't decode byte 0x9a in position 2: unexpected code byte
</snippet></ROW><ROW><id>1766804</id><snippet>&gt;&gt;&gt; 'Ha\x9aek'.decode('latin1')
u'Ha\x9aek'
</snippet></ROW><ROW><id>1766804</id><snippet>&gt;&gt;&gt; unicodedata.name(u'\u0161')
'LATIN SMALL LETTER S WITH CARON'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1766804</id><snippet>IDLE 2.6.4      
&gt;&gt;&gt; import os
&gt;&gt;&gt; from pprint import pprint as pp
</snippet></ROW><ROW><id>1766804</id><snippet>&gt;&gt;&gt; pp(list(os.walk(ur"c:\junk\terabytest\chinese")))
[(u'c:\\junk\\terabytest\\chinese', [], [u'nihao\u4f60\u597d.txt'])]
</snippet></ROW><ROW><id>1766804</id><snippet>&gt;&gt;&gt; print list(os.walk(ur"c:\junk\terabytest\chinese"))[0][2][0]
nihao你好.txt
</snippet></ROW><ROW><id>1766804</id><snippet>&gt;&gt;&gt; pp(list(os.walk(r"c:\junk\terabytest\chinese")))
[('c:\\junk\\terabytest\\chinese', [], ['nihao??.txt'])]
</snippet></ROW><ROW><id>1767462</id><snippet>{% include %}</snippet></ROW><ROW><id>1767569</id><snippet>select total, count(total) from faults GROUP BY total;
</snippet></ROW><ROW><id>1767569</id><snippet>import MySQLdb

def DumpHistogramData(databaseHost, databaseName, databaseUsername, databasePassword, dataTableName, binsTableName, binSize, histogramDataFilename):
    #Open a file for writing into
    output = open("./" + histogramDataFilename, "w")

    #Connect to the database
    db = MySQLdb.connect(databaseHost, databaseUsername, databasePassword, databaseName)
    cursor = db.cursor()

    #Form the query
    sql = """select b.*, count(*) as total 
            FROM """ + binsTableName + """ b 
            LEFT OUTER JOIN """ + dataTableName + """ a 
            ON a.total between b.min AND b.max 
            group by b.min;"""
    cursor.execute(sql)

    #Get the result and print it into a file for further processing
    count = 0;
    while True:
        results = cursor.fetchmany(10000)
        if not results:
            break
        for result in results:
            #print &gt;&gt; output, str(result[0]) + "-" + str(result[1]) + "\t" + str(result[2])
    db.close()

def PrepareHistogramBins(databaseHost, databaseName, databaseUsername, databasePassword, binsTableName, maxValue, totalBins):

    #Connect to the database    
    db = MySQLdb.connect(databaseHost, databaseUsername, databasePassword, databaseName)
    cursor = db.cursor()

    #Check if the table was already created
    sql = """DROP TABLE IF EXISTS """ + binsTableName
    cursor.execute(sql)

    #Create the table
    sql = """CREATE TABLE """ + binsTableName + """(min int(11), max int(11));"""
    cursor.execute(sql)

    #Calculate the bin size
    binSize = maxValue/totalBins

    #Generate the bin sizes
    for i in range(0, maxValue, binSize):
        if i is 0:
            min = i
            max = i+binSize
        else:
            min = i+1
            max = i+binSize
        sql = """INSERT INTO """ + binsTableName + """(min, max) VALUES(""" + str(min) + """, """ + str(max) + """);"""
        cursor.execute(sql)
    db.close()
    return binSize

binSize = PrepareHistogramBins("localhost", "testing", "root", "", "bins", 5000, 100)
DumpHistogramData("localhost", "testing", "root", "", "faults", "bins", binSize, "histogram")
</snippet></ROW><ROW><id>1767569</id><snippet>set terminal postscript eps color lw 2 "Helvetica" 20
set output "output.eps"
set xlabel "XLABEL"
set ylabel "YLABEL"
set title "TITLE"
set style data histogram
set style histogram cluster gap 1
set style fill solid border -1
set boxwidth 0.9
set key autotitle columnheader
set xtics rotate by -45
plot "input" using 1:2 with linespoints ls 1
</snippet></ROW><ROW><id>1767569</id><snippet>gnuplot sample.script
</snippet></ROW><ROW><id>1767589</id><snippet>with open("datafile") as myfile:
    head=[myfile.next() for x in xrange(N)]
print head
</snippet></ROW><ROW><id>1767589</id><snippet>from itertools import islice
with open("datafile") as myfile:
    head=list(islice(myfile,N))
print head
</snippet></ROW><ROW><id>1767614</id><snippet>easy_install</snippet></ROW><ROW><id>1767660</id><snippet>class optparse.OptionParser(...)</snippet></ROW><ROW><id>1767660</id><snippet>parser = OptionParser(usage, add_help_option=False)</snippet></ROW><ROW><id>1767954</id><snippet>exception httplib.BadStatusLine
A subclass of HTTPException. Raised if a server responds with a HTTP status code that we don’t understand.
</snippet></ROW><ROW><id>1767954</id><snippet>&gt;&gt;&gt; theurl = 'http://www.garageband.com/mp3cat/.UZCKbS6N4qk/01_Saraenglish.mp3'
&gt;&gt;&gt; if theurl.startswith("http://"):
...     theurl = theurl[7:]
...     head = theurl[:theurl.find('/')]
...     tail = theurl[theurl.find('/'):]
... 
&gt;&gt;&gt; head
'www.garageband.com'
&gt;&gt;&gt; tail
'/mp3cat/.UZCKbS6N4qk/01_Saraenglish.mp3'
&gt;&gt;&gt; response_code = 0
&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection(head)
&gt;&gt;&gt; conn.request("HEAD", tail)
&gt;&gt;&gt; res = conn.getresponse()
&gt;&gt;&gt; res.status
302
&gt;&gt;&gt; response_code = int(res.status)
</snippet></ROW><ROW><id>1768261</id><snippet>&lt;a&gt;</snippet></ROW><ROW><id>1768261</id><snippet>&lt;embed&gt;</snippet></ROW><ROW><id>1768261</id><snippet>embedTag = pyparsing.makeHTMLTags("embed")[0]
aTag = pyparsing.makeHTMLTags("a")[0]
target = embedTag + pyparsing.Optional(aTag)
result = target.searchString(""".....   
    &lt;object....&gt;&lt;embed&gt;.....&lt;/embed&gt;&lt;/object&gt;&lt;br /&gt;&lt;a href="blah"&gt;blah&lt;/a&gt;
    """)

print result.dump()
</snippet></ROW><ROW><id>1768261</id><snippet>loc = pyparsing.Empty().setParseAction(lambda s,locn,toks: locn)
target = loc("beforeEmbed") + embedTag + loc("afterEmbed") + 
                                                 pyparsing.Optional(aTag)
</snippet></ROW><ROW><id>1769007</id><snippet>pynotify</snippet></ROW><ROW><id>1769070</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>1769070</id><snippet>select_python</snippet></ROW><ROW><id>1769070</id><snippet>/opt/local/bin/python</snippet></ROW><ROW><id>1769070</id><snippet>/usr/bin</snippet></ROW><ROW><id>1769070</id><snippet>python</snippet></ROW><ROW><id>1769070</id><snippet>python2.x</snippet></ROW><ROW><id>1769070</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>1769070</id><snippet>/usr/bin</snippet></ROW><ROW><id>1769070</id><snippet>$PATH</snippet></ROW><ROW><id>1769070</id><snippet>.bash_profile</snippet></ROW><ROW><id>1769070</id><snippet>$ /usr/bin/python your-program.py
</snippet></ROW><ROW><id>1769070</id><snippet>$ /opt/local/bin/python your-program.py
</snippet></ROW><ROW><id>1769070</id><snippet>python_select</snippet></ROW><ROW><id>1769070</id><snippet>$ /opt/local/bin/python2.5 your-program.py
</snippet></ROW><ROW><id>1769070</id><snippet>.bash_profile</snippet></ROW><ROW><id>1769070</id><snippet>export PATH=/opt/local/bin:/opt/local/sbin:$PATH
</snippet></ROW><ROW><id>1769426</id><snippet>&gt;&gt;&gt; a = 'ASL/60Styles_Timeless-3_\xb8 CaLe.asl'
&gt;&gt;&gt; print a.decode('utf-8')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.5/encodings/utf_8.py", line 16, in decode
    return codecs.utf_8_decode(input, errors, True)
UnicodeDecodeError: 'utf8' codec can't decode byte 0xb8 in position 24: unexpected code byte
&gt;&gt;&gt; a.decode('iso8859-2')
u'ASL/60Styles_Timeless-3_\xb8 CaLe.asl'
&gt;&gt;&gt; print a.decode('iso8859-2')
ASL/60Styles_Timeless-3_¸ CaLe.asl
</snippet></ROW><ROW><id>1769426</id><snippet>&gt;&gt;&gt; a.decode('raw_unicode_escape')
u'ASL/60Styles_Timeless-3_\xb8 CaLe.asl'
</snippet></ROW><ROW><id>1769444</id><snippet>maxLen = reduce(lambda a,b : max(a, b.shape[0]),
                dSets, 0)
all = N.ma.zeros((maxLen,)+ dSets[0].shape[1:] + (len(dSets),),
                     dtype=float)      # set the dtype to whatever
all.mask = True
for i, set in enumerate(dSets):
    all.mask[:len(set),...,i] = False
    all[:len(set),...,i] = set

mean = all.mean(axis=-1)
</snippet></ROW><ROW><id>1769475</id><snippet>**kwargs</snippet></ROW><ROW><id>1769475</id><snippet>&gt;&gt;&gt; def print_keyword_args(**kwargs):
...     # kwargs is a dict of the keyword args passed to the function
...     for key, value in kwargs.iteritems():
...         print "%s = %s" % (key, value)
... 
&gt;&gt;&gt; print_keyword_args(first_name="John", last_name="Doe")
first_name = John
last_name = Doe
</snippet></ROW><ROW><id>1769475</id><snippet>**kwargs</snippet></ROW><ROW><id>1769475</id><snippet>&gt;&gt;&gt; kwargs = {'first_name': 'Bobby', 'last_name': 'Smith'}
&gt;&gt;&gt; print_keyword_args(**kwargs)
first_name = Bobby
last_name = Smith
</snippet></ROW><ROW><id>1769577</id><snippet>""" Strip comments and docstrings from a file.
"""

import sys, token, tokenize

def do_file(fname):
    """ Run on just one file.

    """
    source = open(fname)
    mod = open(fname + ",strip", "w")

    prev_toktype = token.INDENT
    first_line = None
    last_lineno = -1
    last_col = 0

    tokgen = tokenize.generate_tokens(source.readline)
    for toktype, ttext, (slineno, scol), (elineno, ecol), ltext in tokgen:
        if 0:   # Change to if 1 to see the tokens fly by.
            print("%10s %-14s %-20r %r" % (
                tokenize.tok_name.get(toktype, toktype),
                "%d.%d-%d.%d" % (slineno, scol, elineno, ecol),
                ttext, ltext
                ))
        if slineno &gt; last_lineno:
            last_col = 0
        if scol &gt; last_col:
            mod.write(" " * (scol - last_col))
        if toktype == token.STRING and prev_toktype == token.INDENT:
            # Docstring
            mod.write("#--")
        elif toktype == tokenize.COMMENT:
            # Comment
            mod.write("##\n")
        else:
            mod.write(ttext)
        prev_toktype = toktype
        last_col = ecol
        last_lineno = elineno

if __name__ == '__main__':
    do_file(sys.argv[1])
</snippet></ROW><ROW><id>1769643</id><snippet>&gt;&gt;&gt; cgi.parse_qs(qs)
{'second': ['4'], 'third': ['3'], 'first': ['1']}
</snippet></ROW><ROW><id>1769643</id><snippet>&gt;&gt;&gt; cgi.parse_qsl(qs)
[('first', '1'), ('second', '4'), ('third', '3')]
</snippet></ROW><ROW><id>1769643</id><snippet>cgi.parse_qs()</snippet></ROW><ROW><id>1769643</id><snippet>&gt;&gt;&gt; qs = 'tags=python&amp;tags=programming'
&gt;&gt;&gt; cgi.parse_qs(qs)
{'tags': ['python', 'programming']}
</snippet></ROW><ROW><id>1769809</id><snippet>self</snippet></ROW><ROW><id>1769809</id><snippet>this</snippet></ROW><ROW><id>1769809</id><snippet>__init__</snippet></ROW><ROW><id>1769809</id><snippet>__init__</snippet></ROW><ROW><id>1769809</id><snippet>__init__</snippet></ROW><ROW><id>1769809</id><snippet>class StackOverflowUser:
    def __init__(self, name, userid, rep): 
        self.name = name
        self.userid = userid
        self.rep = rep

dave = StackOverflowUser("Dave Webb",3171,500)
</snippet></ROW><ROW><id>1769809</id><snippet>&gt;&gt;&gt; dave.rep
500
&gt;&gt;&gt; dave.name
'Dave Webb'
</snippet></ROW><ROW><id>1769809</id><snippet>__init__</snippet></ROW><ROW><id>1769809</id><snippet>self</snippet></ROW><ROW><id>1769809</id><snippet>self</snippet></ROW><ROW><id>1769809</id><snippet>self</snippet></ROW><ROW><id>1769835</id><snippet>str()</snippet></ROW><ROW><id>1769835</id><snippet>__str__()</snippet></ROW><ROW><id>1769835</id><snippet>__repr__()</snippet></ROW><ROW><id>1769994</id><snippet>from suds.client import Client

url = 'http://www.webservicex.net/WeatherForecast.asmx?WSDL'
client = Client(url)

print client.service.GetWeatherByPlaceName('Dallas')
print client.service.GetWeatherByZipCode ('33126')
</snippet></ROW><ROW><id>1770652</id><snippet>&gt;&gt;&gt; first, colon, rest = "commence:2009-11-19T19:55:00".partition(':')

&gt;&gt;&gt; print (first, colon, rest)
('commence', ':', '2009-11-19T19:55:00')
</snippet></ROW><ROW><id>1770665</id><snippet>import os
cmd = """
osascript -e 'tell application "System Events" to keystroke "m" using {command down}' 
"""
# minimize active window
os.system(cmd)
</snippet></ROW><ROW><id>1770788</id><snippet>from scipy import ndimage

stencil = numpy.array([[0, 1, 0],[1, -4, 1], [0, 1, 0]])
x = linspace(-10, 10, 100)
y = linspace(-10, 10, 100)
xx, yy = meshgrid(x, y)
image = exp(-xx**2-yy**2)  # Standard deviation in x or y: 1/sqrt(2)

laplaced = ndimage.convolve(image, stencil)/(x[1]-x[0])**2  # stencil from original post
expected_result = -4*image + 8*(xx**2+yy**2)*image  # Very close to laplaced, in most points!
</snippet></ROW><ROW><id>1770823</id><snippet>cls</snippet></ROW><ROW><id>1770823</id><snippet>type</snippet></ROW><ROW><id>1770823</id><snippet>Y</snippet></ROW><ROW><id>1770823</id><snippet>Z</snippet></ROW><ROW><id>1770823</id><snippet>__new__</snippet></ROW><ROW><id>1770823</id><snippet>return super(Z, cls).__new__(cls, name, bases, attrs)
</snippet></ROW><ROW><id>1770823</id><snippet>cls</snippet></ROW><ROW><id>1770823</id><snippet>super</snippet></ROW><ROW><id>1770823</id><snippet>cls</snippet></ROW><ROW><id>1770823</id><snippet>super</snippet></ROW><ROW><id>1770823</id><snippet> return type.__new__(cls, name, bases, attrs)
</snippet></ROW><ROW><id>1770823</id><snippet>cls</snippet></ROW><ROW><id>1770823</id><snippet>Z</snippet></ROW><ROW><id>1770823</id><snippet>__new__</snippet></ROW><ROW><id>1770823</id><snippet>type(name, bases, attrs)</snippet></ROW><ROW><id>1770823</id><snippet>type</snippet></ROW><ROW><id>1770823</id><snippet>cls</snippet></ROW><ROW><id>1770823</id><snippet>self</snippet></ROW><ROW><id>1770823</id><snippet>super</snippet></ROW><ROW><id>1770870</id><snippet>reactor.iterate</snippet></ROW><ROW><id>1770870</id><snippet>reactor.run</snippet></ROW><ROW><id>1770985</id><snippet>csv.reader</snippet></ROW><ROW><id>1770985</id><snippet>def records(path):
    with open(path) as f:
        contents = f.read()
        return (record for record in contents.split('^^'))

csv.reader(records('input.csv'))
</snippet></ROW><ROW><id>1771133</id><snippet>from selenium import selenium
import unittest
import lxml.html

class TestMyDomain(unittest.TestCase):
    def setUp(self):
        self.selenium = selenium("localhost", \
            4444, "*firefox", "http://www.MyDomain.com")
        self.selenium.start()

    def test_mydomain(self):

        htmldoc = open('site-list.html').read()
        url_list = [link for (element, attribute,link,pos) in lxml.html.iterlinks(htmldoc)]
        for url in url_list:

            try: 
                sel = self.selenium
                sel.open(url)        
                sel.select_window("null")
                js_code = '''
                myDomainWindow = this.browserbot.getUserWindow();
                for(obj in myDomainWindow) {  

                   /* This code grabs the OMNITURE tracking pixel img */
                    if ((obj.substring(0,4) == 's_i_') &amp;&amp; (myDomainWindow[obj].src)) {        	    
                        var ret = myDomainWindow[obj].src;
                    } 
                }        
                ret;
                '''
                omniture_url = sel.get_eval(js_code) #parse&amp;process this however you want


            except Exception, e:
                print 'We ran into an error: %s' % (e,)


        self.assertEqual("expectedValue", observedValue)


    def tearDown(self):
        self.selenium.stop()

if __name__ == "__main__":
    unittest.main()
</snippet></ROW><ROW><id>1771178</id><snippet>~/</snippet></ROW><ROW><id>1771178</id><snippet>import errno
import os

def getfilepath(filename, foldername='tempfoler', envar='MYAPPDIR'):
  # check for environmental override
  if envar is not None and envar in os.environ:
    dirpath = os.environ[envar]
  else:
    dirpath = '~/%s' % foldername
  # expand and ensure it's a directory
  expanded = os.path.expanduser(dirpath)
  if not os.path.isdir(expanded):
    if os.path.lexists(expanded):
      # we're in dire trouble: the path is a file, not a directory!
      # you could punt to some default value, but I prefer to raise
      # an exception and allow higher levels to deal with this
      raise IOError(errno.EEXISTS, "Path is a file, not a dir", expanded)
    # the following may also raise (permission issues, &amp;c)
    os.makedirs(expanded)
  # now the directory exists, the file may or may not (doesn't matter)
  return os.path.join(expanded, filename)
</snippet></ROW><ROW><id>1771240</id><snippet>(...)</snippet></ROW><ROW><id>1771240</id><snippet>(file, filename)</snippet></ROW><ROW><id>1771240</id><snippet>('binf', 'file_name')</snippet></ROW><ROW><id>1771240</id><snippet>binf</snippet></ROW><ROW><id>1771240</id><snippet>file_name</snippet></ROW><ROW><id>1771240</id><snippet>pg</snippet></ROW><ROW><id>1771240</id><snippet>query</snippet></ROW><ROW><id>1771240</id><snippet>con1.query(
    "INSERT INTO files (file, file_name) VALUES ('%s', '%s')" %
    (pg.escape_string(f.read()), pg.escape_string(f.name))
)
</snippet></ROW><ROW><id>1771240</id><snippet>f</snippet></ROW><ROW><id>1771240</id><snippet>file</snippet></ROW><ROW><id>1771240</id><snippet>.read(binf)</snippet></ROW><ROW><id>1771240</id><snippet>bytea</snippet></ROW><ROW><id>1771240</id><snippet>escape_bytea</snippet></ROW><ROW><id>1771240</id><snippet>escape_string</snippet></ROW><ROW><id>1771240</id><snippet>pg</snippet></ROW><ROW><id>1771240</id><snippet>con1.insert('files', file= f.read(), file_name= f.name)
</snippet></ROW><ROW><id>1771240</id><snippet>pgdb</snippet></ROW><ROW><id>1771240</id><snippet>execute</snippet></ROW><ROW><id>1771240</id><snippet>cursor.execute(
    'INSERT INTO files (file, file_name) VALUES (%(content)s, %(name)s)', 
    {'content': f.read(), 'name': f.name }
)
</snippet></ROW><ROW><id>1771420</id><snippet>def floatstrcmp(left, right):
   try:
      return cmp(float(left), float(right))
   except ValueError:
      return cmp(left, right)
</snippet></ROW><ROW><id>1772087</id><snippet>#!/usr/bin/env python
import traceback
def asdf():
    (filename,line_number,function_name,text)=traceback.extract_stack()[-1]
    print function_name
asdf()
</snippet></ROW><ROW><id>1772095</id><snippet>for type_key, type in TYPES.iteritems():
    for sub_type_key, sub_type in type.iteritems():
        for sig in sub_type['signatures']:
</snippet></ROW><ROW><id>1772095</id><snippet>for type_key, type in TYPES.iteritems():
        for sig in type['signatures']:
</snippet></ROW><ROW><id>1772095</id><snippet>type['type']</snippet></ROW><ROW><id>1772095</id><snippet>providers = {
    'hotmail':{
        'type':'hotmail',
        'lookup':'mixed',
        'dkim': 'no',
        'signatures':[
            '|S|Return-Path: postmaster@hotmail.com',
            '|R|^Return-Path:\s*[^@]+@(?:hot|msn)',
            '^Received: from .*hotmail.com$']
    },
    'gmail':{
        'type':'gmail',
        'lookup':'mixed',
        'dkim': 'yes',
        'signatures':['|S|Subject: unsubscribe','','','']
    }
}

for provider, provider_info in providers.iteritems():
    for sig in provicer_info['signatures']:
        if ("|S|" in sig):
            #String based matching
            clean_sig = sig[3:len(sig)]
            if (clean_sig in file_contents):
                sig_match += 1
        elif ("|R|" in sig):
            clean_sig = sig[3:len(sig)]
            #REGMATCH later
    if (sig_match == sig.count):
        return provider

 return None
</snippet></ROW><ROW><id>1772701</id><snippet>engine.get(module_name); //gets the class object of the module
getConstructors[0].newInstance(null) on the class to get an object&lt;br&gt;
//cast it to your interface!</snippet></ROW><ROW><id>1773532</id><snippet>&gt;&gt;&gt; q = Book.objects.annotate(num_authors=Count('authors'))
&gt;&gt;&gt; q[0].num_authors
2
&gt;&gt;&gt; q[1].num_authors
1
</snippet></ROW><ROW><id>1773697</id><snippet>class Brie(object):
    base= 2
    powers= map(lambda i: base**i, xrange(5))
</snippet></ROW><ROW><id>1773697</id><snippet>class Brie(object):
    base= 2

    def __generatePowers():
        for i in xrange(5):
            yield base**i

    powers= list(__generatePowers())
</snippet></ROW><ROW><id>1773697</id><snippet>base</snippet></ROW><ROW><id>1773697</id><snippet>__generatePowers</snippet></ROW><ROW><id>1773697</id><snippet>base</snippet></ROW><ROW><id>1773697</id><snippet>class Brie(object):
    base= 2
    powers= map(lambda i, base= base: base**i, xrange(5))
</snippet></ROW><ROW><id>1773851</id><snippet>config._sections</snippet></ROW><ROW><id>1773851</id><snippet>$ cat test.ini
[First Section]
var = value
key = item

[Second Section]
othervar = othervalue
otherkey = otheritem
</snippet></ROW><ROW><id>1773851</id><snippet>&gt;&gt;&gt; from ConfigParser import ConfigParser
&gt;&gt;&gt; config = ConfigParser()
&gt;&gt;&gt; config.read('test.ini')
&gt;&gt;&gt; config._sections
{'First Section': {'var': 'value', '__name__': 'First Section', 'key': 'item'}, 'Second Section': {'__name__': 'Second Section', 'otherkey': 'otheritem', 'othervar': 'othervalue'}}
&gt;&gt;&gt; config._sections['First Section']
{'var': 'value', '__name__': 'First Section', 'key': 'item'}
</snippet></ROW><ROW><id>1773851</id><snippet>dict()</snippet></ROW><ROW><id>1773851</id><snippet>config._sections</snippet></ROW><ROW><id>1773851</id><snippet>[db]
dbname = testdb
dbuser = test_user
host   = localhost
password = abc123
port   = 3306
</snippet></ROW><ROW><id>1773851</id><snippet>&gt;&gt;&gt; config.read('test.ini')
['test.ini']
&gt;&gt;&gt; config._sections
{'db': {'dbname': 'testdb', 'host': 'localhost', 'dbuser': 'test_user', '__name__': 'db', 'password': 'abc123', 'port': '3306'}}
&gt;&gt;&gt; connection_string = "dbname='%(dbname)s' user='%(dbuser)s' host='%(host)s' password='%(password)s' port='%(port)s'"
&gt;&gt;&gt; connection_string % config._sections['db']
"dbname='testdb' user='test_user' host='localhost' password='abc123' port='3306'"
</snippet></ROW><ROW><id>1773862</id><snippet>$ export test="/bin"
$ python
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.environ["test"]
'/bin'
</snippet></ROW><ROW><id>1774043</id><snippet>#!/usr/bin/env python

import yaml

stream = open("example.yaml", 'r')
print yaml.load(stream)
</snippet></ROW><ROW><id>1774046</id><snippet>import dateutil.parser as dparser
date=dparser.parse("Mon May 7 1883 10:36:28")
print(date)
# 1883-05-07 10:36:28

date=dparser.parse("1685-3-21")
print(date)
# 1685-03-21 00:00:00

date=dparser.parse("12/17/1770")
print(date)
# 1770-12-17 00:00:00
</snippet></ROW><ROW><id>1774046</id><snippet>dayfirst</snippet></ROW><ROW><id>1774046</id><snippet>yearfirst</snippet></ROW><ROW><id>1774046</id><snippet>print(type(date))
# &lt;type 'datetime.datetime'&gt;
</snippet></ROW><ROW><id>1774046</id><snippet>dates=[dparser.parse("Mon May 7 1883 10:36:28"),dparser.parse("1685-3-21"),dparser.parse("12/17/1770"),]
dates.sort()
print(dates)
# [datetime.date(1685, 3, 21), datetime.date(1770, 12, 17), datetime.date(1833, 5, 7)]
</snippet></ROW><ROW><id>1774046</id><snippet>dates=[datetime.datetime.strptime(date_str,'%Y-%m-%d') for date_str in
       ('1883-5-7','1685-3-21','1770-12-17',)]
print([str(date) for date in dates])
# ['1883-05-07 00:00:00', '1685-03-21 00:00:00', '1770-12-17 00:00:00']
dates.sort()
print([str(date) for date in dates])
# ['1685-03-21 00:00:00', '1770-12-17 00:00:00', '1883-05-07 00:00:00']
</snippet></ROW><ROW><id>1774335</id><snippet>(add-hook 'c-mode-common-hook
      '(lambda () 
         (define-key c-mode-base-map (kbd "RET") 'newline-and-indent)))
</snippet></ROW><ROW><id>1774405</id><snippet>entry_list = Entry.objects.order_by('pub_date')
</snippet></ROW><ROW><id>1774405</id><snippet>{% for entry in entry_list %}
{% ifchanged %}&lt;h3&gt;{{entry.pub_date|date:"Y"}}&lt;/h3&gt;{% endifchanged %}
{% ifchanged %}&lt;h4&gt;{{entry.pub_date|date:"F"}}&lt;/h4&gt;{% endifchanged %}
&lt;p&gt;{{entry.title}}&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>1774405</id><snippet>entry_months = Entry.objects.dates('pub_date','month','DESC')
</snippet></ROW><ROW><id>1774405</id><snippet>DateQuerySet</snippet></ROW><ROW><id>1774405</id><snippet>datetime.datetime</snippet></ROW><ROW><id>1774458</id><snippet>test.py</snippet></ROW><ROW><id>1774458</id><snippet>../
 test.py
 css/
</snippet></ROW><ROW><id>1774621</id><snippet>list.extend(['a3', 'a4'])
</snippet></ROW><ROW><id>1774657</id><snippet>&amp;</snippet></ROW><ROW><id>1774708</id><snippet>pipelines.py</snippet></ROW><ROW><id>1774708</id><snippet>import csv

class CsvWriterPipeline(object):

    def __init__(self):
        self.csvwriter = csv.writer(open('items.csv', 'wb'))

    def process_item(self, domain, item):
        self.csvwriter.writerow([item['title'][0], item['link'][0], item['desc'][0]])
        return item
</snippet></ROW><ROW><id>1774708</id><snippet>ITEM_PIPELINES = ['dmoz.pipelines.CsvWriterPipeline']
</snippet></ROW><ROW><id>1774725</id><snippet>ctypes.Structure</snippet></ROW><ROW><id>1774725</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; class POINT(Structure):
...     _fields_ = [("x", c_int),
...                 ("y", c_int)]
...
&gt;&gt;&gt; point = POINT(10, 20)
&gt;&gt;&gt; print point.x, point.y
10 20
&gt;&gt;&gt; point = POINT(y=5)
&gt;&gt;&gt; print point.x, point.y
0 5
&gt;&gt;&gt; POINT(1, 2, 3)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
ValueError: too many initializers
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1774725</id><snippet>ctypes</snippet></ROW><ROW><id>1774772</id><snippet>as</snippet></ROW><ROW><id>1774772</id><snippet>**{'as': 'total'}</snippet></ROW><ROW><id>1774772</id><snippet>as='total'</snippet></ROW><ROW><id>1774834</id><snippet>try:
    yield safe_join(template_dir, template_name)
except UnicodeDecodeError:
    # The template dir name was a bytestring that wasn't valid UTF-8.
    raise
except ValueError:
    # The joined path was located outside of template_dir.
    pass
</snippet></ROW><ROW><id>1774834</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>1774834</id><snippet>ValueError</snippet></ROW><ROW><id>1774834</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>1774834</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>1774834</id><snippet>ValueError</snippet></ROW><ROW><id>1774834</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>1774993</id><snippet>/Library/Frameworks/Python.framework/Versions/2.5</snippet></ROW><ROW><id>1774993</id><snippet>/usr/bin/python2.5</snippet></ROW><ROW><id>1774993</id><snippet>OS X 10.5</snippet></ROW><ROW><id>1774993</id><snippet>site-packages</snippet></ROW><ROW><id>1774993</id><snippet>/Library/Python/2.5</snippet></ROW><ROW><id>1774993</id><snippet>/usr/local/bin/python2.5</snippet></ROW><ROW><id>1774993</id><snippet>py25-pil</snippet></ROW><ROW><id>1774993</id><snippet>py26-pil</snippet></ROW><ROW><id>1775282</id><snippet>QAbstractItemDelegate::editorEvent</snippet></ROW><ROW><id>1775282</id><snippet>class ItemDelegate: public QItemDelegate
{
public:
    ItemDelegate(ContextMenuHandler *const contextMenu, QObject *const parent )
        : QItemDelegate(parent)
        , m_contexMenu(contextMenu) 
    {
    }

    bool editorEvent( 
            QEvent * event, 
            QAbstractItemModel * model, 
            const QStyleOptionViewItem &amp; option, 
            const QModelIndex &amp; index )
    {
        if((event-&gt;type()==QEvent::MouseButtonPress) &amp;&amp; index.isValid())
        {
            QMouseEvent *const mouseEvent = qobject_cast&lt;QMouseEvent&gt;(event);
            if(mouseEvent &amp;&amp; (mouseEvent-&gt;button()==Qt::RightButton))
            {
                return m_contexMenu-&gt;showContextMenu(mouseEvent-&gt;pos(), index);
            }
        }
    }
    ContextMenuHandler *const m_contextMenu;
};

treeWidget-&gt;setItemDelegate(new ItemDelegate(contextMenuHandler,treeWidget));
</snippet></ROW><ROW><id>1775387</id><snippet>(echo select volume %~d0 &amp;&amp; echo assign letter=Z) | diskpart
</snippet></ROW><ROW><id>1775387</id><snippet>%~d0</snippet></ROW><ROW><id>1775387</id><snippet>RegisterDeviceNotification()</snippet></ROW><ROW><id>1775387</id><snippet>WM_DEVICECHANGE</snippet></ROW><ROW><id>1775485</id><snippet>def primes(upper):
    n = 2; found = []
    while n &lt; upper:
        # If a number is not divisble through all preceding primes, it's prime
        if all(n % div != 0 for div in found):
            yield n
            found.append( n )
        n += 1
</snippet></ROW><ROW><id>1775485</id><snippet>for pr in primes(1000):
    print pr
</snippet></ROW><ROW><id>1775485</id><snippet>from math import sqrt
from itertools import takewhile

def primes(upper):
    n = 2; foundPrimes = []
    while n &lt; upper:
        sqrtN = int(sqrt(n))
        # If a number n is not divisble through all preceding primes up to sqrt(n), it's prime
        if all(n % div != 0 for div in takewhile(lambda div: div &lt;= sqrtN, foundPrimes)):
            yield n
            foundPrimes.append(n)
        n += 1
</snippet></ROW><ROW><id>1775934</id><snippet>time.sleep(5)
self.pollServer()
</snippet></ROW><ROW><id>1775934</id><snippet>wx.CallLater(5,self.pollServer)
</snippet></ROW><ROW><id>1776026</id><snippet>TM_PYTHON</snippet></ROW><ROW><id>1776026</id><snippet>TM_PYTHON</snippet></ROW><ROW><id>1776026</id><snippet>File -&gt; New Project</snippet></ROW><ROW><id>1776026</id><snippet>File -&gt; Open</snippet></ROW><ROW><id>1776026</id><snippet>Get Info</snippet></ROW><ROW><id>1776026</id><snippet>Project Information</snippet></ROW><ROW><id>1776026</id><snippet>/usr/local/bin/python3.1</snippet></ROW><ROW><id>1776026</id><snippet>File</snippet></ROW><ROW><id>1776026</id><snippet>Save Project As</snippet></ROW><ROW><id>1776026</id><snippet>Python 3</snippet></ROW><ROW><id>1776026</id><snippet>TextMate</snippet></ROW><ROW><id>1776026</id><snippet>TextMate</snippet></ROW><ROW><id>1776026</id><snippet>TextMate</snippet></ROW><ROW><id>1776026</id><snippet>Preferences</snippet></ROW><ROW><id>1776026</id><snippet>Advanced</snippet></ROW><ROW><id>1776026</id><snippet>Shell Variable</snippet></ROW><ROW><id>1776026</id><snippet>+</snippet></ROW><ROW><id>1776026</id><snippet>TM_PYTHON</snippet></ROW><ROW><id>1776026</id><snippet>Variable</snippet></ROW><ROW><id>1776026</id><snippet>Value</snippet></ROW><ROW><id>1776026</id><snippet>/usr/local/bin/python3.1</snippet></ROW><ROW><id>1776026</id><snippet>Run</snippet></ROW><ROW><id>1776026</id><snippet>TextMate</snippet></ROW><ROW><id>1776026</id><snippet>TM_PYTHON</snippet></ROW><ROW><id>1776026</id><snippet>#!/usr/local/bin/python3.1

# sample code to show version
import sys
print(sys.version_info)
</snippet></ROW><ROW><id>1776026</id><snippet>PATH</snippet></ROW><ROW><id>1776026</id><snippet>/usr/bin/env</snippet></ROW><ROW><id>1776026</id><snippet>TextMate</snippet></ROW><ROW><id>1776026</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>1776026</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>1776026</id><snippet>python3</snippet></ROW><ROW><id>1776026</id><snippet>PATH</snippet></ROW><ROW><id>1776026</id><snippet>TextMate</snippet></ROW><ROW><id>1776026</id><snippet>Preferences</snippet></ROW><ROW><id>1776026</id><snippet>/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin</snippet></ROW><ROW><id>1776026</id><snippet>#!/usr/bin/env python3
</snippet></ROW><ROW><id>1776026</id><snippet>TextMate</snippet></ROW><ROW><id>1776176</id><snippet>In [34]: import test
# This works fine
</snippet></ROW><ROW><id>1776176</id><snippet>In [35]: reload(test)
------------------------------------------------------------
   File "/home/unutbu/pybin/test.py", line 2
     pimport itertools
                     ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>1776190</id><snippet>from pyparsing import Word, alphas

# define grammar
greet = Word( alphas ) + "," + Word( alphas ) + "!"

# input string
hello = "Hello, World!"

# parse input string
print hello, "-&gt;", greet.parseString( hello )
</snippet></ROW><ROW><id>1776289</id><snippet>file:///Library/Frameworks/Python.framework/Versions/3.1/Resources/English.lproj/Documentation/index.html
</snippet></ROW><ROW><id>1776373</id><snippet>sudo port install py26-numpy py26-scipy py26-matplotlib py26-ipython</snippet></ROW><ROW><id>1776373</id><snippet>p = Pool(8); res = p.map(analysis_function,list_of_data)</snippet></ROW><ROW><id>1777092</id><snippet>&gt;&gt;&gt; class BaseClass(object):
...     def foo(self):
...         return 'foo'
...     def bar(self):
...         return 'bar'
...     def methods_implemented(self):
...         """This does work."""
...         overriden = []
...         for method in ('foo', 'bar'):
...             this_method = getattr(self, method)
...             base_method = getattr(BaseClass, method)
...             if this_method.__func__ is not base_method.__func__:
...                 overriden.append(method)
...         return overriden
... 
&gt;&gt;&gt; class SubClass(BaseClass):
...     def foo(self):
...         return 'override foo'
... 
&gt;&gt;&gt; o = SubClass()
&gt;&gt;&gt; o.methods_implemented()
['foo']
</snippet></ROW><ROW><id>1777092</id><snippet>__func__</snippet></ROW><ROW><id>1777092</id><snippet>im_func</snippet></ROW><ROW><id>1777142</id><snippet>import urllib2

def get_unread_msgs(user, passwd):
    auth_handler = urllib2.HTTPBasicAuthHandler()
    auth_handler.add_password(
        realm='New mail feed',
        uri='https://mail.google.com',
        user='%s@gmail.com' % user,
        passwd=passwd
    )
    opener = urllib2.build_opener(auth_handler)
    urllib2.install_opener(opener)
    feed = urllib2.urlopen('https://mail.google.com/mail/feed/atom')
    return feed.read()
</snippet></ROW><ROW><id>1777304</id><snippet>IMAP4</snippet></ROW><ROW><id>1777304</id><snippet>r'\Deleted'</snippet></ROW><ROW><id>1777304</id><snippet>expunge</snippet></ROW><ROW><id>1777365</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.mac_ver()
('10.5.8', ('', '', ''), 'i386')
</snippet></ROW><ROW><id>1777365</id><snippet>mac_ver</snippet></ROW><ROW><id>1777365</id><snippet>10.x.y</snippet></ROW><ROW><id>1777365</id><snippet>&gt;&gt;&gt; v, _, _ = platform.mac_ver()
&gt;&gt;&gt; v = float('.'.join(v.split('.')[:2]))
&gt;&gt;&gt; print v
10.5
</snippet></ROW><ROW><id>1777365</id><snippet>platform.uname()</snippet></ROW><ROW><id>1777593</id><snippet>f1.read()</snippet></ROW><ROW><id>1777593</id><snippet>open(f1).read()</snippet></ROW><ROW><id>1777777</id><snippet>2to3</snippet></ROW><ROW><id>1777817</id><snippet>extern "C" {...}
</snippet></ROW><ROW><id>1777876</id><snippet>C:/TEST/</snippet></ROW><ROW><id>1777876</id><snippet>C:/TEST/</snippet></ROW><ROW><id>1777876</id><snippet>C:/TEST/css/</snippet></ROW><ROW><id>1777876</id><snippet>C:/TEST/uri/</snippet></ROW><ROW><id>1777876</id><snippet>ply</snippet></ROW><ROW><id>1777876</id><snippet>C:/TEST/css/</snippet></ROW><ROW><id>1777876</id><snippet>C:/TEST/css/ply/</snippet></ROW><ROW><id>1777876</id><snippet>test.py</snippet></ROW><ROW><id>1777876</id><snippet>C:/TEST/</snippet></ROW><ROW><id>1777876</id><snippet>from css.parse import parse
print dir(parse)
</snippet></ROW><ROW><id>1777876</id><snippet>C:\TEST&gt;test.py</snippet></ROW><ROW><id>1777876</id><snippet>['__call__', '__class__', '__closure__', '__code__', '__defaults__', '__delattr__', '__dict__', '__doc__', '__format__', '__get__', '__getattribute__', '__globals__', '__hash__', '__init__', '__module__', '__name__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'func_closure', 'func_code', 'func_defaults', 'func_dict', 'func_doc', 'func_globals', 'func_name']</snippet></ROW><ROW><id>1777968</id><snippet>sys.path[0]</snippet></ROW><ROW><id>1777968</id><snippet>os.chdir()</snippet></ROW><ROW><id>1777968</id><snippet>sys.argv[0]</snippet></ROW><ROW><id>1778182</id><snippet>c.__str__()</snippet></ROW><ROW><id>1778182</id><snippet>str(c)</snippet></ROW><ROW><id>1778182</id><snippet>print "c is", c
</snippet></ROW><ROW><id>1778182</id><snippet>c.__repr__()</snippet></ROW><ROW><id>1778182</id><snippet>repr(c)</snippet></ROW><ROW><id>1778182</id><snippet>&gt;&gt;&gt; c # In the Python shell
</snippet></ROW><ROW><id>1778182</id><snippet>__str__</snippet></ROW><ROW><id>1778182</id><snippet>__repr__</snippet></ROW><ROW><id>1778182</id><snippet>print repr(c)
# Or
print "%r" % c
# Or
print "%.16f" % c
</snippet></ROW><ROW><id>1778182</id><snippet>__repr__</snippet></ROW><ROW><id>1778182</id><snippet>0.2</snippet></ROW><ROW><id>1778182</id><snippet>0.2000000000000001</snippet></ROW><ROW><id>1778287</id><snippet>&lt;program&gt;
    &lt;data&gt;
        &lt;const&gt;
            &lt;name&gt;myStr&lt;/name&gt;
            &lt;value&gt;&lt;[CDATA[Hello, World!]]&gt;&lt;/value&gt;
        &lt;/const&gt;
    &lt;/data&gt;
    &lt;sub&gt;
        &lt;name&gt;main&lt;/name&gt;
        &lt;params /&gt;
        &lt;return /&gt;
        &lt;code&gt;
            &lt;call&gt;
                &lt;name&gt;writeline&lt;/name&gt;
                &lt;params&gt;
                    &lt;var&gt;myStr&lt;/var&gt;
                &lt;/params&gt;
                &lt;giving /&gt;
            &lt;/call&gt;
        &lt;/code&gt;
    &lt;/sub&gt;
    &lt;meta&gt;
        &lt;entrypoint&gt;main&lt;/entrypoint&gt;
    &lt;/meta&gt;
&lt;/program&gt;
</snippet></ROW><ROW><id>1778381</id><snippet>str(0.47000000000000003)</snippet></ROW><ROW><id>1778381</id><snippet>'0.47'</snippet></ROW><ROW><id>1778381</id><snippet>float('0.47')</snippet></ROW><ROW><id>1778381</id><snippet>0.46999999999999997</snippet></ROW><ROW><id>1778381</id><snippet>float(repr(0.47000000000000003))</snippet></ROW><ROW><id>1778381</id><snippet>eval(repr(0.47000000000000003))</snippet></ROW><ROW><id>1778429</id><snippet>den</snippet></ROW><ROW><id>1778541</id><snippet>fork()</snippet></ROW><ROW><id>1778541</id><snippet>execv</snippet></ROW><ROW><id>1778611</id><snippet>import random
random.random = 9 # Very weird but legal assignment.
random.random &lt; 10 # True
random.random &gt; 10 # False
</snippet></ROW><ROW><id>1778786</id><snippet>INSERT INTO courses (course_nro)
</snippet></ROW><ROW><id>1778834</id><snippet>import networkx as NX
import matplotlib.pyplot as PLT
Gh = NX.Graph()
Gh.add_edge("You", "Bike", weight=1.0)
Gh.add_edge("Bike", "Apple", weight=0.9)
Gh.add_edge("Me", "Bike", weight=1.1)
all_nodes = Gh.nodes()
# to scale node size with degree:
scaled_node_size = lambda(node) : NX.degree(Gh, node) * 700
position = NX.spring_layout(Gh)    # just choose a layout scheme
NX.draw_networkx_nodes(Gh, position, node_size=map(scaled_node_size, all_nodes))
NX.draw_network_edges(Gh, position, Gh.edges(), width=1.0, alpha=1.0, edge_color="red")
# now for the Matplotlib part:
PLT.axis("off")
PLT.show()
</snippet></ROW><ROW><id>1778875</id><snippet># The first way I had of grabbing the module:
mod = __import__(__name__, fromlist=['nonempty'])

# From Roger's suggestion:
import sys
mod = sys.modules[__name__]

for name in ['A', 'B', 'C']:
    class_ = type(name, (object, ), {})
    setattr(mod, name, class_)

print A, B, C
</snippet></ROW><ROW><id>1778875</id><snippet>for name in ['A', 'B', 'C']:
    class_ = type(name, (object, ), {})
    globals()[name] = class_

print A, B, C
</snippet></ROW><ROW><id>1778875</id><snippet>for name in ['A', 'B', 'C']:
    class_ = type(name, (object, ), {})
    exec "%s = class_" % name

print A, B, C
</snippet></ROW><ROW><id>1778875</id><snippet>__name__ == "__main__"</snippet></ROW><ROW><id>1778875</id><snippet>globals()</snippet></ROW><ROW><id>1778875</id><snippet>__dict__</snippet></ROW><ROW><id>1778875</id><snippet>Python 2.6.4 (r264:75706, Nov  8 2009, 17:35:59) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; mod = sys.modules[__name__]
&gt;&gt;&gt; mod.__dict__ is globals()
True
</snippet></ROW><ROW><id>1778993</id><snippet>User.name.property.columns[0].type.length
</snippet></ROW><ROW><id>1778993</id><snippet>columns</snippet></ROW><ROW><id>1779039</id><snippet>fetch</snippet></ROW><ROW><id>1779039</id><snippet>cur</snippet></ROW><ROW><id>1779076</id><snippet>Foo</snippet></ROW><ROW><id>1779076</id><snippet>mybase</snippet></ROW><ROW><id>1779103</id><snippet>subprocess</snippet></ROW><ROW><id>1779303</id><snippet>val = 1 - val</snippet></ROW><ROW><id>1779309</id><snippet>o = Course(course_nro='abcd')
session.add(o)
session.commit()
</snippet></ROW><ROW><id>1779309</id><snippet>print session.query(Course).all()
</snippet></ROW><ROW><id>1779309</id><snippet>from sqlalchemy import *
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import session_maker

# create an engine, and a base class
engine = create_engine('postgre://naa:123@localhost/tk')
DeclarativeBase = declarative_base(bind=engine)
metadata = DeclarativeBase.metadata

# create a session
Session = session_maker(engine)
session = Session()

# declare the models
class Cource(DelcarativeBase):
    __tablename__ = 'courses'

    course_nro = Column('course_nro', CHAR(12))
</snippet></ROW><ROW><id>1779324</id><snippet>import locale
locale.setlocale( locale.LC_ALL, 'en_US.UTF-8' ) 
locale.atoi('1,000,000')
# 1000000
locale.atof('1,000,000.53')
# 1000000.53
</snippet></ROW><ROW><id>1779393</id><snippet>abstract</snippet></ROW><ROW><id>1779393</id><snippet>NotImplementedError</snippet></ROW><ROW><id>1779404</id><snippet>__new__</snippet></ROW><ROW><id>1779404</id><snippet>__init__</snippet></ROW><ROW><id>1779404</id><snippet>X</snippet></ROW><ROW><id>1779404</id><snippet>print X</snippet></ROW><ROW><id>1779404</id><snippet>print(X)</snippet></ROW><ROW><id>1779404</id><snippet>peekaboo!</snippet></ROW><ROW><id>1779404</id><snippet>__str__</snippet></ROW><ROW><id>1779404</id><snippet>def __str__(cls): return "peekaboo!"</snippet></ROW><ROW><id>1779404</id><snippet>X</snippet></ROW><ROW><id>1779509</id><snippet>class PhoneNumberField(USPhoneNumberField):
    def clean(self, value):
        super(USPhoneNumberField, self).clean(value)
        if value in EMPTY_VALUES:
            return u''
        value = re.sub('(\(|\)|\s+)', '', smart_unicode(value))
        m = phone_digits_re.search(value)
        if m:
            return u'%s%s%s' % (m.group(1), m.group(2), m.group(3))
        raise ValidationError(self.error_messages['invalid'])
</snippet></ROW><ROW><id>1779579</id><snippet>setattr(obj, fieldname, 'new name')</snippet></ROW><ROW><id>1779790</id><snippet>from storm.locals import *

class Courses(object):
    __storm_table__ = 'courses'
    pkey = Int(primary=True)
    course_nro = Unicode()

course = Courses()
course.course_nro = 'abcd'
store.add(course)
store.commit()
</snippet></ROW><ROW><id>1779790</id><snippet>from storm.locals import *
from pysistence import Expando

class Courses(Expando):
    __storm_table__ = 'courses'
    pkey = Int(primary=True)
    course_nro = Unicode()

course = Courses(course_nro='abcd')
store.add(course)
store.commit()
</snippet></ROW><ROW><id>1780295</id><snippet>&gt;&gt;&gt; map(dict, zip(*[[(k, v) for v in value] for k, value in d.items()]))
[{'key2': 4, 'key1': 1}, {'key2': 5, 'key1': 2}, {'key2': 6, 'key1': 3}]
</snippet></ROW><ROW><id>1780295</id><snippet>d = {'key3': [7, 8, 9], 'key2': [4, 5, 6], 'key1': [1, 2, 3]}

&gt;&gt;&gt; map(dict, zip(*[[(k, v) for v in value] for k, value in d.items()]))
[{'key3': 7, 'key2': 4, 'key1': 1}, {'key3': 8, 'key2': 5, 'key1': 2}, {'key3': 9, 'key2': 6, 'key1': 3}]
</snippet></ROW><ROW><id>1780295</id><snippet>&gt;&gt;&gt; from itertools import izip_longest
&gt;&gt;&gt; d = {'key2': [3, 4, 5, 6], 'key1': [1, 2]}
&gt;&gt;&gt; map(lambda a: dict(filter(None, a)), izip_longest(*[[(k, v) for v in value] for k, value in d.items()]))
[{'key2': 3, 'key1': 1}, {'key2': 4, 'key1': 2}, {'key2': 5}, {'key2': 6}]
</snippet></ROW><ROW><id>1780295</id><snippet>&gt;&gt;&gt; d = {'key2': [3, 4, 5, 6], 'key1': [1, 2]}
&gt;&gt;&gt; map(lambda a: dict(filter(None, a)), map(None, *[[(k, v) for v in value] for k, value in d.items()]))
[{'key2': 3, 'key1': 1}, {'key2': 4, 'key1': 2}, {'key2': 5}, {'key2': 6}]
</snippet></ROW><ROW><id>1780566</id><snippet>&gt;&gt;&gt; article = Article.objects.get(pk=1)
&gt;&gt;&gt; form = ArticleForm(instance=article)
</snippet></ROW><ROW><id>1780590</id><snippet>def __iter__(self): return self.books.itervalues()
</snippet></ROW><ROW><id>1780749</id><snippet>a-b</snippet></ROW><ROW><id>1780749</id><snippet>a:b</snippet></ROW><ROW><id>1780749</id><snippet>&gt;&gt;&gt; class x(object):
...   def __getitem__(self, x): return x
... 
&gt;&gt;&gt; x()[2, 3:6, 4]
(2, slice(3, 6, None), 4)
</snippet></ROW><ROW><id>1780749</id><snippet>[]</snippet></ROW><ROW><id>1780909</id><snippet>list1 = [1,2,3,4,5]
list2 = [i for i in list1 if i%2 == 0]
print list2 # =&gt; [2, 4]
</snippet></ROW><ROW><id>1780959</id><snippet>uint x = BitConverter.ToUInt32(Encoding.ASCII.GetBytes("isoy"), 0); // 2037347177
</snippet></ROW><ROW><id>1780959</id><snippet>string s = Encoding.ASCII.GetString(BitConverter.GetBytes(x));      // "isoy"
</snippet></ROW><ROW><id>1780961</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>1780961</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>1780961</id><snippet>__unicode__</snippet></ROW><ROW><id>1780961</id><snippet>__unicode__</snippet></ROW><ROW><id>1780961</id><snippet>__unicode__</snippet></ROW><ROW><id>1780961</id><snippet>&gt;&gt;&gt; u'\u2660'.encode('utf-8')
'\xe2\x99\xa0'
&gt;&gt;&gt; print '\xe2\x99\xa0'
♠
</snippet></ROW><ROW><id>1781075</id><snippet>about:cache-entry?client=HTTP&amp;sb=1&amp;key=http://your.server/image.png
</snippet></ROW><ROW><id>1781075</id><snippet>file on disk: /home/fviktor/.mozilla/firefox/7jx6k3hx.default/Cache/CF7379D8d01
</snippet></ROW><ROW><id>1781075</id><snippet>none</snippet></ROW><ROW><id>1781082</id><snippet>about:cache-entry?...</snippet></ROW><ROW><id>1781082</id><snippet>file on disk: /home/fviktor/.mozilla/firefox/7jx6k3hx.default/Cache/CF7379D8d01
</snippet></ROW><ROW><id>1781082</id><snippet>none</snippet></ROW><ROW><id>1781217</id><snippet>xml.etree.ElementTree</snippet></ROW><ROW><id>1781462</id><snippet>  def correct(word: String) = {
    val sets = List[String =&gt; Set[String]](
      x =&gt; known(Set(x)), x =&gt; known(edits1(x)), known_edits2
    ).elements.map(_(word))

    sets find { !_.isEmpty } match {
      case Some(candidates: Set[String]) =&gt; candidates.reduceLeft { (res, n) =&gt; if (NWORDS(res) &gt; NWORDS(n)) res else n }
      case None =&gt; word
    }
  }
</snippet></ROW><ROW><id>1781605</id><snippet>^(?!mpeg).*
</snippet></ROW><ROW><id>1781605</id><snippet>mpeg</snippet></ROW><ROW><id>1781605</id><snippet>mpeg</snippet></ROW><ROW><id>1781605</id><snippet>if not inputstring.startswith("mpeg"):
</snippet></ROW><ROW><id>1781649</id><snippet>$php = array(1,2,3,4,5,6,7,8,9,10);
for ($i = 0; $i &lt; 10 ; $i ++)
echo $php[$i]."&lt;br&gt;";
</snippet></ROW><ROW><id>1781649</id><snippet>lst = [1,2,3,4,5,6,7,8,9,10]
for item in lst:
    print str(item) + "&lt;br&gt;"
</snippet></ROW><ROW><id>1781649</id><snippet>for ($i = 0; $i &lt; 10 ; $i ++)
echo $php[$i] = $i +1 ;
</snippet></ROW><ROW><id>1781649</id><snippet>lst = range(1, 11)
for item in lst:
    print item
</snippet></ROW><ROW><id>1781649</id><snippet>lst = []
for i in xrange(10):
    lst.append(i + 1)
    print lst[-1]     # prints out last element
</snippet></ROW><ROW><id>1781649</id><snippet>$php = array(1,2,3,4,5,6,7,8,9,10);
foreach ($php as $value)
echo $value."&lt;br&gt;";
</snippet></ROW><ROW><id>1781649</id><snippet>$arr = array(1, 2, 3, 4);
foreach ($arr as &amp;$value) {
    $value = $value * 2;
}
</snippet></ROW><ROW><id>1781649</id><snippet>lst = [1, 2, 3, 4]
lst = [val*2 for val in lst]
</snippet></ROW><ROW><id>1781649</id><snippet>$arr = array("mot"=&gt;"one", "hai"=&gt;"two","ba"=&gt; "three");
foreach ($arr as $key =&gt; $value) {
    echo "Key: $key; Value: $value&lt;br /&gt;\n";
}
</snippet></ROW><ROW><id>1781649</id><snippet>{...}</snippet></ROW><ROW><id>1781649</id><snippet>dct = {'mot': 'one', 'hai': 'two', 'ba': 'three'}
for key, value in dct.iteritems():
    print "Key: %s; Value: %s&lt;br /&gt;" % (key, value)
</snippet></ROW><ROW><id>1781649</id><snippet>$arr = array("one", "two","three");
while (list($key, $value) = each($arr)) {
    echo "Key: $key; Value: $value&lt;br /&gt;\n";
}
</snippet></ROW><ROW><id>1781649</id><snippet>lst = ['one', 'two', 'three']
for key, value in enumerate(lst):
    print "Key: %d; Value: %s&lt;br /&gt;" % (key, value)
</snippet></ROW><ROW><id>1781649</id><snippet>$arr = array("one", "two","three");
while ($element = each($arr)) {
    echo "Key: $element['key']; Value: $element['value']&lt;br /&gt;\n";
}
</snippet></ROW><ROW><id>1781649</id><snippet>$products = array( array("ITL","INTEL","HARD"),
                        array("MIR", "MICROSOFT","SOFT"),
                        array("Py4C", "pythonkhmer.wordpress.com","TUTORIAL")
                         );
for ($row = 0; $row &lt; 3; $row++)
{
    for ($col = 0; $col &lt;3; $col++)
    {
        echo "|".$products[$row][$col];
    }
    echo "&lt;br&gt;";
}
</snippet></ROW><ROW><id>1781649</id><snippet>products = [['ITL', 'INTEL', 'HARD'],
    ['MIR', 'MICROSOFT', 'SOFT'],
    ['Py4C', 'pythonkhmer.wordpress.com', 'TUTORIAL']]

for product in products:
    for item in product:
        print '|' + item
    print '&lt;br&gt;'
</snippet></ROW><ROW><id>1781649</id><snippet>for product in products:
    print '|%s&lt;br&gt;' % ('|'.join(product))
</snippet></ROW><ROW><id>1781680</id><snippet> from __future__ import absolute_import
</snippet></ROW><ROW><id>1781987</id><snippet>tuple([10*x for x in img.size])
</snippet></ROW><ROW><id>1782076</id><snippet>file1=set(open("file1").readlines())
file2=set(open("file2").readlines())
intersection = file1 &amp; file2 #common lines
non_intersection = file2 - file1  #uncommon lines (in file2 but not file1)
for items in intersection:
    print items
for nitems in non_intersection:
    print nitems
</snippet></ROW><ROW><id>1782076</id><snippet># lines in file2 common with file1
data1=map(str.rstrip,open("file1").readlines())
for line in open("file2"):
    line=line.rstrip()
    if line in data1:
        print line

# lines in file2 not in file1, use "not"
data1=map(str.rstrip,open("file1").readlines())
for line in open("file2"):
    line=line.rstrip()
    if not line in data1:
        print line
</snippet></ROW><ROW><id>1782274</id><snippet>&gt;&gt;&gt; a = [(u'we', 'PRP'), (u'saw', 'VBD'), (u'you', 'PRP'), (u'bruh', 'VBP'), (u'.', '.')]
&gt;&gt;&gt; import operator
&gt;&gt;&gt; a.sort(key = operator.itemgetter(1))
&gt;&gt;&gt; a
[(u'.', '.'), (u'we', 'PRP'), (u'you', 'PRP'), (u'saw', 'VBD'), (u'bruh', 'VBP')]
</snippet></ROW><ROW><id>1782287</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; datetime.datetime.strptime(date + ' ' + hour + ':' + minutes + ':' + seconds, '%m/%d/%Y %H:%M:%S')
datetime.datetime(2009, 11, 28, 23, 59)
</snippet></ROW><ROW><id>1782888</id><snippet>functools.wraps()</snippet></ROW><ROW><id>1782888</id><snippet>from functools import wraps

def decorator(f):
    @wraps(f)
    def _decorator():
        print 'decorator active'
        f()
    return _decorator

@decorator
def foo():
    '''the magic foo function'''
    print 'this is function foo'

help(foo)
</snippet></ROW><ROW><id>1782888</id><snippet>functools</snippet></ROW><ROW><id>1783227</id><snippet>maxdiff[the_diff &gt; maxdiff] = the_diff
</snippet></ROW><ROW><id>1783227</id><snippet>replaceElements = the_diff &gt; maxdiff
maxdiff[replaceElements] = the_diff[replaceElements]
</snippet></ROW><ROW><id>1783227</id><snippet>maxdiff = maximum(maxdiff, the_diff)
</snippet></ROW><ROW><id>1783284</id><snippet>export PATH=$PATH:/usr/local/mysql-5.1.39-osx10.5-x86_64/bin/
</snippet></ROW><ROW><id>1783735</id><snippet># Sometimes it's useful to process bad headers or bad HTML:
response = br.response()  # this is a copy of response
headers = response.info()  # currently, this is a mimetools.Message
headers["Content-type"] = "text/html; charset=utf-8"
response.set_data(response.get_data().replace("&lt;!---", "&lt;!--"))
br.set_response(response)
</snippet></ROW><ROW><id>1783979</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array(['zero', 'one', 'two', 'three'], dtype=object)
&gt;&gt;&gt; a[1] = 'thirteen'
&gt;&gt;&gt; print a
['zero' 'thirteen' 'two' 'three']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1784156</id><snippet>#!/usr/bin/env python

from svm import *

# a three-class problem
labels = [0, 1, 1, 2]
samples = [[0, 0], [0, 1], [1, 0], [1, 1]]
problem = svm_problem(labels, samples);
size = len(samples)

kernels = [LINEAR, POLY, RBF]
kname = ['linear','polynomial','rbf']

param = svm_parameter(C = 10,nr_weight = 2,weight_label = [1,0],weight = [10,1])
for k in kernels:
    param.kernel_type = k;
    model = svm_model(problem,param)
    errors = 0
    for i in range(size):
    	prediction = model.predict(samples[i])
    	probability = model.predict_probability
    	if (labels[i] != prediction):
    		errors = errors + 1
    print "##########################################"
    print " kernel %s: error rate = %d / %d" % (kname[param.kernel_type], errors, size)
    print "##########################################"

param = svm_parameter(kernel_type = RBF, C=10)
model = svm_model(problem, param)
print "##########################################"
print " Decision values of predicting %s" % (samples[0])
print "##########################################"

print "Numer of Classes:", model.get_nr_class()
d = model.predict_values(samples[0])
for i in model.get_labels():
    for j in model.get_labels():
    	if j&gt;i:
    		print "{%d, %d} = %9.5f" % (i, j, d[i,j])

param = svm_parameter(kernel_type = RBF, C=10, probability = 1)
model = svm_model(problem, param)
pred_label, pred_probability = model.predict_probability(samples[1])
print "##########################################"
print " Probability estimate of predicting %s" % (samples[1])
print "##########################################"
print "predicted class: %d" % (pred_label)
for i in model.get_labels():
    print "prob(label=%d) = %f" % (i, pred_probability[i])

print "##########################################"
print " Precomputed kernels"
print "##########################################"
samples = [[1, 0, 0, 0, 0], [2, 0, 1, 0, 1], [3, 0, 0, 1, 1], [4, 0, 1, 1, 2]]
problem = svm_problem(labels, samples);
param = svm_parameter(kernel_type=PRECOMPUTED,C = 10,nr_weight = 2,weight_label = [1,0],weight = [10,1])
model = svm_model(problem, param)
pred_label = model.predict(samples[0])
</snippet></ROW><ROW><id>1784402</id><snippet>itertools</snippet></ROW><ROW><id>1784420</id><snippet>#!/usr/bin/env python
# -*- coding= UTF-8 -*-

# Firstly, modules can be documented using docstring, so drop the comments
"""
 Create the videos directory in the current directory
 If the directory exists ignore it.

 Moves all files with the .wmv extension to the
 videos folder for file structure

 Crawl the videos directory then change to videos directory
 create the videos.csv file in the videos directory
 create output.csv replace any drive letter A:-Y: with Z:
"""

# not useful to import os and os.path as the second is contain in the first one
import os
import shutil
import csv
# import glob, it will be handy
import glob
import ntpath # this is to split the drive

# don't really need to use a function 

# Here, don't bother checking if the directory exists
# and you don't need add any slash either
directory = "videos"
ext = "*.wmv"
try :
    os.mkdir(directory)
except OSError :
    pass

listDirectory = [] # creating a buffer so no need to list the dir twice

for file in glob.glob(ext): # much easier this way, isn't it ?
        shutil.move(file, os.path.join(directory, file)) # good catch for shutil :-)
        listDirectory.append(file)

os.chdir(directory)

# you've smartly imported the csv module, so let's use it !
f = open("videos.csv", "w")
vid_csv = csv.writer(f)
w = open('output.csv', 'w')
out_csv = csv.writer(w)

# let's do everything in one loop
for file in listDirectory :
    file_path = os.path.abspath(file)
    # Python includes functions to deal with drive letters :-D
    # I use ntpath because I am under linux but you can use 
    # normal os.path functions on windows with the same names
    file_path_with_new_letter = ntpath.join("Z:", ntpath.splitdrive(file_path)[1])
    # let's write the csv, using tuples
    vid_csv.writerow((file_path, ))
    out_csv.writerow((file_path_with_new_letter, ))
</snippet></ROW><ROW><id>1784592</id><snippet>def item(i, v):
  if i != 1: return v
  return strangestuff(v)

for row in rows:
  t = tuple(item(i, c.InnerText)
            for i, c in enumerate(row.Descendants[TableCell]())
           )
</snippet></ROW><ROW><id>1784781</id><snippet>sb = wx.StaticBox(self.pl, -1, 'BOX0')
sat = wx.CheckBox(self.pl, -1, 'Satellite')
gsm = wx.CheckBox(self.pl, -1, 'GSM')
wlan = wx.CheckBox(self.pl, -1, 'WLAN')

box = wx.StaticBoxSizer(sb, wx.VERTICAL)
box.SetMinSize((180, 150))
box.Add(sat, 0, wx.ALL, 5)
box.Add(gsm, 0, wx.ALL, 5)
box.Add(wlan, 0, wx.ALL, 5)
</snippet></ROW><ROW><id>1784992</id><snippet>instance.foo(1234, a, b, c, d)
</snippet></ROW><ROW><id>1784992</id><snippet>p = [a, b, c, d]
instance.foo(1234, *p)
</snippet></ROW><ROW><id>1785047</id><snippet>numpy</snippet></ROW><ROW><id>1785047</id><snippet>&gt;&gt;&gt; from numpy import *
&gt;&gt;&gt; a = array([[1,2,3],[4,5,6],[7,8,9]])
&gt;&gt;&gt; b = array([[0.5] * 3, [0.5] * 3, [0.5] * 3])
&gt;&gt;&gt; a / b
array([[  2.,   4.,   6.],
       [  8.,  10.,  12.],
       [ 14.,  16.,  18.]])
</snippet></ROW><ROW><id>1785047</id><snippet>&gt;&gt;&gt; a / 10.0
array([[ 0.1,  0.2,  0.3],
       [ 0.4,  0.5,  0.6],
       [ 0.7,  0.8,  0.9]])
&gt;&gt;&gt; a * 10
array([[10, 20, 30],
       [40, 50, 60],
       [70, 80, 90]])
</snippet></ROW><ROW><id>1785047</id><snippet>&gt;&gt;&gt; a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; b = [[0.5] * 3, [0.5] * 3, [0.5] * 3]
&gt;&gt;&gt; def mat_div(a, b): 
...     return [[n / d for n, d in zip(ra, rb)] for ra, rb in zip(a, b)] 
... 
&gt;&gt;&gt; mat_div(a, b)
[[2.0, 4.0, 6.0], [8.0, 10.0, 12.0], [14.0, 16.0, 18.0]]
</snippet></ROW><ROW><id>1785127</id><snippet>virtualenv</snippet></ROW><ROW><id>1785127</id><snippet>virtualenv</snippet></ROW><ROW><id>1785275</id><snippet>f = open('file.txt','rU')
</snippet></ROW><ROW><id>1785275</id><snippet>\r</snippet></ROW><ROW><id>1785307</id><snippet>MyClassFrm::MyClassFrm()
{
    ...
    // Get your TextEdit from the UI here , or create your TextEdit here....
    // Install the filter
    pMyTextEdit-&gt;viewport()-&gt;installEventFilter(this);
    ...
}

...

bool MyClassFrm::eventFilter(QObject* pObject, QEvent* pEvent)
{
    if (pEvent-&gt;type() == QEvent::MousePressEvent) 
    {
        qDebug() &lt;&lt; "Mouse pressed !!";
        // standard event processing
        return QObject::eventFilter(pObject, pEvent);
    }
}
</snippet></ROW><ROW><id>1785592</id><snippet>uuid1()</snippet></ROW><ROW><id>1785592</id><snippet>uuid</snippet></ROW><ROW><id>1785592</id><snippet>uuid4()</snippet></ROW><ROW><id>1785905</id><snippet>for function in functions:
    function(x)
</snippet></ROW><ROW><id>1785905</id><snippet>function(x)</snippet></ROW><ROW><id>1785905</id><snippet>timeit</snippet></ROW><ROW><id>1785905</id><snippet>&gt;&gt;&gt; timeit.Timer('[f(20) for f in functions]', 'functions = [lambda n: i * n for i in range(100)]').repeat()
[44.727972984313965, 44.752119779586792, 44.577917814254761]
&gt;&gt;&gt; timeit.Timer('for f in functions: f(20)', 'functions = [lambda n: i * n for i in range(100)]').repeat()
[40.320928812026978, 40.491761207580566, 40.303879022598267]
</snippet></ROW><ROW><id>1785905</id><snippet>for f in functions</snippet></ROW><ROW><id>1785905</id><snippet>function</snippet></ROW><ROW><id>1785905</id><snippet>functions</snippet></ROW><ROW><id>1785920</id><snippet>myenv(id)</snippet></ROW><ROW><id>1785920</id><snippet>myenv(x)</snippet></ROW><ROW><id>1786136</id><snippet>PyTuple_Pack</snippet></ROW><ROW><id>1786136</id><snippet>PyObject</snippet></ROW><ROW><id>1786136</id><snippet>Py_BuildValue("(ii)", (*i).x, (*i).y)
</snippet></ROW><ROW><id>1786136</id><snippet>int</snippet></ROW><ROW><id>1786226</id><snippet>mkdir test_easygui
cd test_easygui
curl http://easygui.sourceforge.net/current_version/easygui_v0.93.tar.gz | tar xz
/usr/bin/python2.6 easygui.py
</snippet></ROW><ROW><id>1786226</id><snippet>test_easygui</snippet></ROW><ROW><id>1786226</id><snippet>setup.py</snippet></ROW><ROW><id>1786226</id><snippet>from distutils.core import setup
setup(name='easygui',
      version='0.93',
      py_modules=['easygui'],
     )
</snippet></ROW><ROW><id>1786226</id><snippet>sudo /usr/bin/python2.6 setup.py install
</snippet></ROW><ROW><id>1786226</id><snippet>/usr/bin/python2.6 -m easygui
</snippet></ROW><ROW><id>1786226</id><snippet>import easygui</snippet></ROW><ROW><id>1786226</id><snippet>/usr/bin/python2.6</snippet></ROW><ROW><id>1786226</id><snippet>python</snippet></ROW><ROW><id>1786534</id><snippet>import itertools as it
import collections

L = ['a', 'ab', 'bba']
M = ['baa', 'aa', 'bb']

def cmbs(L=L, M=M):
  Ucans = collections.defaultdict(list)
  Vcans = collections.defaultdict(list)
  sides = (L, Vcans, Ucans), (M, Ucans, Vcans)
  for i in it.count(1):
    for k, (G, Ocans, Tcans) in enumerate(sides):
      for u in it.product(G, repeat=i):
        j = ''.join(u)
        if j in Ocans:
          for samp in Ocans[j]:
            result = samp, u
            yield result[1-k], result[k]
        Tcans[j].append(u)

if __name__ == '__main__':
  for x, y in it.islice(cmbs(), 10):
    print x, y, ''.join(x), ''.join(y)
</snippet></ROW><ROW><id>1786534</id><snippet>('a', 'a') ('aa',) aa aa
('bba', 'a') ('bb', 'aa') bbaa bbaa
('a', 'a', 'a', 'a') ('aa', 'aa') aaaa aaaa
('a', 'a', 'bba', 'a') ('aa', 'bb', 'aa') aabbaa aabbaa
('a', 'ab', 'a', 'a') ('aa', 'baa') aabaa aabaa
('a', 'ab', 'bba', 'a') ('aa', 'bb', 'baa') aabbbaa aabbbaa
('bba', 'a', 'a', 'a') ('bb', 'aa', 'aa') bbaaaa bbaaaa
('bba', 'ab', 'a', 'a') ('bb', 'aa', 'baa') bbaabaa bbaabaa
('bba', 'ab', 'bba', 'a') ('bb', 'aa', 'bb', 'baa') bbaabbbaa bbaabbbaa
('bba', 'a', 'bba', 'a') ('bb', 'aa', 'bb', 'aa') bbaabbaa bbaabbaa
</snippet></ROW><ROW><id>1786534</id><snippet>['a', 'aa']</snippet></ROW><ROW><id>1786534</id><snippet>a</snippet></ROW><ROW><id>1786544</id><snippet>import sys

from PyQt4 import QtGui, QtCore

app = QtGui.QApplication(sys.argv)

widget = QtGui.QWidget()
widget_layout = QtGui.QHBoxLayout()
widget.setLayout(widget_layout)

def add_group_box():
    group_box = widget.group_box = QtGui.QGroupBox()
    group_layout = QtGui.QVBoxLayout()
    group_box.setLayout(group_layout)

    for i in range(2):
        group_layout.addWidget(QtGui.QRadioButton(str(i)))

    widget_layout.insertWidget(0, group_box)
add_group_box()

show_button = QtGui.QPushButton("show")
hide_button = QtGui.QPushButton("hide")
def on_show():
    if not widget.group_box:
        add_group_box()
def on_hide():
    if widget.group_box:
        widget.group_box.deleteLater()
        widget.group_box = None
show_button.connect(show_button, QtCore.SIGNAL("clicked()"), on_show)
hide_button.connect(hide_button, QtCore.SIGNAL("clicked()"), on_hide)    
widget_layout.addWidget(show_button)
widget_layout.addWidget(hide_button)

widget.show()

app.exec_()
</snippet></ROW><ROW><id>1786584</id><snippet>var</snippet></ROW><ROW><id>1786584</id><snippet>undefined</snippet></ROW><ROW><id>1786584</id><snippet>switch</snippet></ROW><ROW><id>1786584</id><snippet>yield</snippet></ROW><ROW><id>1786584</id><snippet>let</snippet></ROW><ROW><id>1786584</id><snippet>array comprehension</snippet></ROW><ROW><id>1786584</id><snippet>raise</snippet></ROW><ROW><id>1786584</id><snippet>throw</snippet></ROW><ROW><id>1786584</id><snippet>except</snippet></ROW><ROW><id>1786584</id><snippet>catch</snippet></ROW><ROW><id>1786584</id><snippet>and</snippet></ROW><ROW><id>1786584</id><snippet>is</snippet></ROW><ROW><id>1786584</id><snippet>not</snippet></ROW><ROW><id>1786584</id><snippet>i++</snippet></ROW><ROW><id>1786584</id><snippet>Object.prototype</snippet></ROW><ROW><id>1786584</id><snippet>new</snippet></ROW><ROW><id>1787255</id><snippet>&gt;&gt;&gt; n = 29
&gt;&gt;&gt; d = 1009
&gt;&gt;&gt; print str(float(n)/d)
0.0287413280476
</snippet></ROW><ROW><id>1787255</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; n/d
0.028741328047571853
</snippet></ROW><ROW><id>1787526</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>1787720</id><snippet>SDL_Surface*</snippet></ROW><ROW><id>1787720</id><snippet>PySurfaceObject *obj;
SDL_Surface *surf;
if (!PyArg_ParseTuple(args, 'O!', &amp;PySurface_Type, &amp;obj) {
    return NULL; # or other action for error
}
surf = PySurface_AsSurface(obj);
</snippet></ROW><ROW><id>1788026</id><snippet>Cursor.rowcount</snippet></ROW><ROW><id>1788129</id><snippet>import rdflib
from rdflib.Graph import Graph

conj=rdflib.ConjunctiveGraph()

NS=rdflib.Namespace("http://example.com/#")
NS_CTX=rdflib.Namespace("http://example.com/context/#")

alice=NS.alice
bob=NS.bob
charlie=NS.charlie

pizza=NS.pizza
meat=NS.meat
chocolate=NS.chocolate

loves=NS.loves
hates=NS.hates
likes=NS.likes
dislikes=NS.dislikes

love_ctx=Graph(conj.store, NS_CTX.love)
food_ctx=Graph(conj.store, NS_CTX.food)

love_ctx.add( (alice, loves, bob) )
love_ctx.add( (alice, loves, charlie) )
love_ctx.add( (bob, hates, charlie) )
love_ctx.add( (charlie, loves, bob) )

food_ctx.add( (alice, likes, chocolate) )
food_ctx.add( (alice, likes, meat) )
food_ctx.add( (alice, dislikes, pizza) )

print "Full context"
for t in conj:
    print t

print ""
print "Contexts"
for c in conj.contexts():
    print c

print "love context"
for t in love_ctx:
    print t

print "food context"
for t in food_ctx:
    print t
</snippet></ROW><ROW><id>1788129</id><snippet>Full context
(rdflib.URIRef('http://example.com/#bob'), rdflib.URIRef('http://example.com/#hates'), rdflib.URIRef('http://example.com/#charlie'))
(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#likes'), rdflib.URIRef('http://example.com/#chocolate'))
(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#likes'), rdflib.URIRef('http://example.com/#meat'))
(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#dislikes'), rdflib.URIRef('http://example.com/#pizza'))
(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#loves'), rdflib.URIRef('http://example.com/#bob'))
(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#loves'), rdflib.URIRef('http://example.com/#charlie'))
(rdflib.URIRef('http://example.com/#charlie'), rdflib.URIRef('http://example.com/#loves'), rdflib.URIRef('http://example.com/#bob'))

Contexts
&lt;http://example.com/context/#food&gt; a rdfg:Graph;rdflib:storage [a rdflib:Store;rdfs:label 'IOMemory'].
&lt;http://example.com/context/#love&gt; a rdfg:Graph;rdflib:storage [a rdflib:Store;rdfs:label 'IOMemory'].
love context
(rdflib.URIRef('http://example.com/#bob'), rdflib.URIRef('http://example.com/#hates'), rdflib.URIRef('http://example.com/#charlie'))
(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#loves'), rdflib.URIRef('http://example.com/#bob'))
(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#loves'), rdflib.URIRef('http://example.com/#charlie'))
(rdflib.URIRef('http://example.com/#charlie'), rdflib.URIRef('http://example.com/#loves'), rdflib.URIRef('http://example.com/#bob'))
food context
(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#likes'), rdflib.URIRef('http://example.com/#chocolate'))
(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#likes'), rdflib.URIRef('http://example.com/#meat'))
(rdflib.URIRef('http://example.com/#alice'), rdflib.URIRef('http://example.com/#dislikes'), rdflib.URIRef('http://example.com/#pizza'))
</snippet></ROW><ROW><id>1788302</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>1788302</id><snippet>ADMIN_MEDIA_PREFIX</snippet></ROW><ROW><id>1788302</id><snippet>ADMIN_MEDIA_PREFIX</snippet></ROW><ROW><id>1788302</id><snippet>django/contrib/admin/media/</snippet></ROW><ROW><id>1788302</id><snippet>ADMIN_MEDIA_PREFIX</snippet></ROW><ROW><id>1788314</id><snippet>class Model(db.Model):

  def clean_email(value):
    if ...

  email = db.EmailProperty(validator=clean_email)
</snippet></ROW><ROW><id>1788363</id><snippet>data</snippet></ROW><ROW><id>1788363</id><snippet>from tarfile import TarFile, TarError
from StringIO import StringIO

sio = StringIO(data)
try:
    tf = TarFile(fileobj=sio)
    # process the file....
except TarError:
    print "Not a tar file"
</snippet></ROW><ROW><id>1788728</id><snippet>the_list = [(a, b) for a, b in the_list if a.isalpha()]
</snippet></ROW><ROW><id>1788856</id><snippet>*args</snippet></ROW><ROW><id>1788856</id><snippet>__init__</snippet></ROW><ROW><id>1788856</id><snippet>args</snippet></ROW><ROW><id>1788856</id><snippet>apply</snippet></ROW><ROW><id>1788856</id><snippet> QWizardPage.__init__(self, *args)
 super(DisplayPage, self).__init__(*args)
 super().__init__(*args)
</snippet></ROW><ROW><id>1788856</id><snippet>apply</snippet></ROW><ROW><id>1788856</id><snippet>QWizardPage</snippet></ROW><ROW><id>1788856</id><snippet>super</snippet></ROW><ROW><id>1788856</id><snippet>super</snippet></ROW><ROW><id>1789028</id><snippet>if question.strip().endswith("?") and "://" not in question:
    # do something ?
</snippet></ROW><ROW><id>1789077</id><snippet>open(STDERR,"&gt;&gt;","/path/to/my/cgi-error.log")
    or die "Could not redirect STDERR: $OS_ERROR";
</snippet></ROW><ROW><id>1789077</id><snippet>sys.stderr = open("/path/to/my/cgi-error.log", "a")
</snippet></ROW><ROW><id>1789077</id><snippet>find . -type f -name "*.pl" -exec perl -pi.bak -e 's%/usr/bin/perl%/usr/bin/perl\nopen(STDERR,"&gt;&gt;","/path/to/my/cgi-error.log")\n    or die "Could not redirect STDERR: \$OS_ERROR";%' {} \;
</snippet></ROW><ROW><id>1789077</id><snippet>find . -type f -name "*.py" -exec perl -pi.bak -e 's%^(import os, sys.*)%$1\nsys.stderr = open("/path/to/my/cgi-error.log", "a")%' {} \;
</snippet></ROW><ROW><id>1789100</id><snippet>RSAEngine</snippet></ROW><ROW><id>1789100</id><snippet>AsymmetricBlockCipher</snippet></ROW><ROW><id>1789100</id><snippet>PKCS1</snippet></ROW><ROW><id>1789100</id><snippet>OAEP</snippet></ROW><ROW><id>1789121</id><snippet>rxvt-cygwin-native</snippet></ROW><ROW><id>1789121</id><snippet>export TERM=rxvt-cygwin-native</snippet></ROW><ROW><id>1789203</id><snippet>import shlex
import StringIO # use in place of files

list(shlex.shlex(StringIO.StringIO('Some tokens. 123, 45.67 "A string with whitespace"')))
</snippet></ROW><ROW><id>1789495</id><snippet>help</snippet></ROW><ROW><id>1789495</id><snippet>pydoc</snippet></ROW><ROW><id>1789495</id><snippet>inspect</snippet></ROW><ROW><id>1789495</id><snippet>__doc__</snippet></ROW><ROW><id>1789495</id><snippet>__help__</snippet></ROW><ROW><id>1789495</id><snippet>help</snippet></ROW><ROW><id>1789495</id><snippet>old_help = help
def help(thing):
    if hasattr(thing, '__help__'):
        print thing.__help__
    else:
        old_help(thing)
</snippet></ROW><ROW><id>1789495</id><snippet>__help__</snippet></ROW><ROW><id>1789495</id><snippet>class myCallable:
    def __init__(self, doc):
        self.__doc__ = doc
        self.__help__ = doc
</snippet></ROW><ROW><id>1789567</id><snippet>sys.getsizeof</snippet></ROW><ROW><id>1789567</id><snippet>int</snippet></ROW><ROW><id>1789567</id><snippet>import sys
myint = 12
print sys.getsizeof(myint)
</snippet></ROW><ROW><id>1790187</id><snippet>import numpy as NP
my_data = NP.random.random_integers(0, 9, 9).reshape(3, 3)
new_col = NP.array((5, 5, 5)).reshape(3, 1)
res = NP.append(my_data, new_col, axis=1)
</snippet></ROW><ROW><id>1790187</id><snippet>my_data = NP.random.random_integers(0, 9, 16).reshape(4, 4)
# the line to add--does not depend on array dimensions
new_col = NP.zeros_like(my_data[:,-1]).reshape(-1, 1)
res = NP.hstack((my_data, new_col))
</snippet></ROW><ROW><id>1790187</id><snippet>hstack</snippet></ROW><ROW><id>1790187</id><snippet>concatenate((my_data, new_col), axis=1)</snippet></ROW><ROW><id>1790187</id><snippet>&gt;&gt;&gt; # initialize your skeleton array using 'empty' for lowest-memory footprint 
&gt;&gt;&gt; M = NP.empty(shape=(10, 5), dtype=float)

&gt;&gt;&gt; # create a small function to mimic step-wise populating this empty 2D array:
&gt;&gt;&gt; fnx = lambda v : NP.random.randint(0, 10, v)
</snippet></ROW><ROW><id>1790187</id><snippet>&gt;&gt;&gt; for index, itm in enumerate(range(5)):    
        M[:,index] = fnx(10)

&gt;&gt;&gt; M
  array([[ 1.,  7.,  0.,  8.,  7.],
         [ 9.,  0.,  6.,  9.,  4.],
         [ 2.,  3.,  6.,  3.,  4.],
         [ 3.,  4.,  1.,  0.,  5.],
         [ 2.,  3.,  5.,  3.,  0.],
         [ 4.,  6.,  5.,  6.,  2.],
         [ 0.,  6.,  1.,  6.,  8.],
         [ 3.,  8.,  0.,  8.,  0.],
         [ 5.,  2.,  5.,  0.,  1.],
         [ 0.,  6.,  5.,  9.,  1.]])
</snippet></ROW><ROW><id>1790187</id><snippet>&gt;&gt;&gt; M[:3,:3]
  array([[ 9.,  3.,  1.],
         [ 9.,  6.,  8.],
         [ 9.,  7.,  5.]])
</snippet></ROW><ROW><id>1790410</id><snippet>.egg</snippet></ROW><ROW><id>1790410</id><snippet>setup.py</snippet></ROW><ROW><id>1790410</id><snippet>__version__ = "$Revision$"
</snippet></ROW><ROW><id>1790410</id><snippet>setup.py</snippet></ROW><ROW><id>1790532</id><snippet>all</snippet></ROW><ROW><id>1790532</id><snippet>any</snippet></ROW><ROW><id>1790532</id><snippet>import operator
def my_all(a_list):
  return reduce(operator.and_, a_list, True)

def my_any(a_list):
  return reduce(operator.or_, a_list, False)
</snippet></ROW><ROW><id>1790532</id><snippet>def my_all_v2(a_list):
  return len(filter(None,a_list)) == len(a_list)

def my_any_v2(a_list):
  return len(filter(None,a_list)) &gt; 0
</snippet></ROW><ROW><id>1790532</id><snippet>def my_all_v3(a_list):
  for i in a_list:
    if not i:
      return False
  return True

def my_any_v3(a_list):
  for i in a_list:
    if i:
      return True
  return False
</snippet></ROW><ROW><id>1790532</id><snippet>all</snippet></ROW><ROW><id>1790532</id><snippet>any</snippet></ROW><ROW><id>1790600</id><snippet>def running_average():
  sum = 0
  count = 0
  while True:
    sum += cauchy(3,1)
    count += 1
    yield sum/count
</snippet></ROW><ROW><id>1790600</id><snippet># Cauchy numbers generator
def cauchy_numbers():
  while True:
    yield cauchy(3,1)

# running sum utility function
def running_sum(iterable):
  sum = 0
  for x in iterable:
    sum += x
    yield sum

# Running averages generator expression (** the neat part **)
running_avgs = (sum/(i+1) for (i,sum) in enumerate(running_sum(cauchy_numbers())))

# goes on forever
for avg in running_avgs:
  print avg

# alternatively, take just the first 10
import itertools
for avg in itertools.islice(running_avgs, 10):
  print avg
</snippet></ROW><ROW><id>1790885</id><snippet>email.utils</snippet></ROW><ROW><id>1790885</id><snippet>parsedate()</snippet></ROW><ROW><id>1790885</id><snippet>&gt;&gt;&gt; import email.utils
&gt;&gt;&gt; import time
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; email.utils.parsedate('Mon, 16 Nov 2009 13:32:02 +0100')
(2009, 11, 16, 13, 32, 2, 0, 1, -1)
&gt;&gt;&gt; time.mktime((2009, 11, 16, 13, 32, 2, 0, 1, -1))
1258378322.0
&gt;&gt;&gt; datetime.datetime.fromtimestamp(1258378322.0)
datetime.datetime(2009, 11, 16, 13, 32, 2)
</snippet></ROW><ROW><id>1790885</id><snippet>parsedate</snippet></ROW><ROW><id>1790885</id><snippet>time.mktime</snippet></ROW><ROW><id>1790885</id><snippet>&gt;&gt;&gt; (time.mktime(email.utils.parsedate('Mon, 16 Nov 2009 13:32:02 +0900')) ==
... time.mktime(email.utils.parsedate('Mon, 16 Nov 2009 13:32:02 +0100'))
True
</snippet></ROW><ROW><id>1790885</id><snippet>&gt;&gt;&gt; REMOTE_TIME_ZONE_OFFSET = +9 * 60 * 60
&gt;&gt;&gt; (time.mktime(email.utils.parsedate('Mon, 16 Nov 2009 13:32:02 +0900')) +
... time.timezone - REMOTE_TIME_ZONE_OFFSET)
1258410122.0
</snippet></ROW><ROW><id>1791009</id><snippet>import sys
from math import log, sqrt
from itertools import combinations

def cosine_distance(a, b):
    cos = 0.0
    a_tfidf = a["tfidf"]
    for token, tfidf in b["tfidf"].iteritems():
        if token in a_tfidf:
            cos += tfidf * a_tfidf[token]
    return cos

def normalize(features):
    norm = 1.0 / sqrt(sum(i**2 for i in features.itervalues()))
    for k, v in features.iteritems():
        features[k] = v * norm
    return features

def add_tfidf_to(documents):
    tokens = {}
    for id, doc in enumerate(documents):
        tf = {}
        doc["tfidf"] = {}
        doc_tokens = doc.get("tokens", [])
        for token in doc_tokens:
            tf[token] = tf.get(token, 0) + 1
        num_tokens = len(doc_tokens)
        if num_tokens &gt; 0:
            for token, freq in tf.iteritems():
                tokens.setdefault(token, []).append((id, float(freq) / num_tokens))

    doc_count = float(len(documents))
    for token, docs in tokens.iteritems():
        idf = log(doc_count / len(docs))
        for id, tf in docs:
            tfidf = tf * idf
            if tfidf &gt; 0:
                documents[id]["tfidf"][token] = tfidf

    for doc in documents:
        doc["tfidf"] = normalize(doc["tfidf"])

def choose_cluster(node, cluster_lookup, edges):
    new = cluster_lookup[node]
    if node in edges:
        seen, num_seen = {}, {}
        for target, weight in edges.get(node, []):
            seen[cluster_lookup[target]] = seen.get(
                cluster_lookup[target], 0.0) + weight
        for k, v in seen.iteritems():
            num_seen.setdefault(v, []).append(k)
        new = num_seen[max(num_seen)][0]
    return new

def majorclust(graph):
    cluster_lookup = dict((node, i) for i, node in enumerate(graph.nodes))

    count = 0
    movements = set()
    finished = False
    while not finished:
        finished = True
        for node in graph.nodes:
            new = choose_cluster(node, cluster_lookup, graph.edges)
            move = (node, cluster_lookup[node], new)
            if new != cluster_lookup[node] and move not in movements:
                movements.add(move)
                cluster_lookup[node] = new
                finished = False

    clusters = {}
    for k, v in cluster_lookup.iteritems():
        clusters.setdefault(v, []).append(k)

    return clusters.values()

def get_distance_graph(documents):
    class Graph(object):
        def __init__(self):
            self.edges = {}

        def add_edge(self, n1, n2, w):
            self.edges.setdefault(n1, []).append((n2, w))
            self.edges.setdefault(n2, []).append((n1, w))

    graph = Graph()
    doc_ids = range(len(documents))
    graph.nodes = set(doc_ids)
    for a, b in combinations(doc_ids, 2):
        graph.add_edge(a, b, cosine_distance(documents[a], documents[b]))
    return graph

def get_documents():
    texts = [
        "foo blub baz",
        "foo bar baz",
        "asdf bsdf csdf",
        "foo bab blub",
        "csdf hddf kjtz",
        "123 456 890",
        "321 890 456 foo",
        "123 890 uiop",
    ]
    return [{"text": text, "tokens": text.split()}
             for i, text in enumerate(texts)]

def main(args):
    documents = get_documents()
    add_tfidf_to(documents)
    dist_graph = get_distance_graph(documents)

    for cluster in majorclust(dist_graph):
        print "========="
        for doc_id in cluster:
            print documents[doc_id]["text"]

if __name__ == '__main__':
    main(sys.argv)
</snippet></ROW><ROW><id>1791186</id><snippet>import re

x = '''LINE: 1
TOKENKIND: somedata
TOKENKIND: somedata
LINE: 2
TOKENKIND: somedata
LINE: 3'''

junkre = re.compile(r'(\s*LINE:\s*\d*\s*)|(\s*TOKENKIND:)', re.DOTALL)

print junkre.sub('', x)
</snippet></ROW><ROW><id>1791245</id><snippet>__init__</snippet></ROW><ROW><id>1791296</id><snippet>sexp &lt;&lt; ( alphaword | integer | ( LPAREN + ZeroOrMore(sexp) + RPAREN)
</snippet></ROW><ROW><id>1791399</id><snippet>django-debug-toolbar</snippet></ROW><ROW><id>1791399</id><snippet>django-debug-toolbar</snippet></ROW><ROW><id>1791399</id><snippet>django-debug-toolbar</snippet></ROW><ROW><id>1791399</id><snippet>django-memcache-status</snippet></ROW><ROW><id>1791399</id><snippet>memcache-top</snippet></ROW><ROW><id>1791422</id><snippet>&lt;table&gt;
&lt;tr py:for="i in t"&gt;      
&lt;td py:for="e in tp[i]"&gt;
${e}s
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</snippet></ROW><ROW><id>1791923</id><snippet>nodes_list_nodes = Table(
    'nodes_list_nodes', metadata,
    Column('parent_id', None, ForeignKey('nodes_list.id'), nullable=False),
    Column('child_id', None, ForeignKey(Node.id), nullable=False),
    PrimaryKeyConstraint('parent_id', 'child_id'),
)

class ListNode(Node):
    __mapper_args__ = {'polymorphic_identity': 'list'}
    __tablename__ = 'nodes_list'
    id = Column(None, ForeignKey('nodes.id'), primary_key=True)
    items = relation(Node, secondary=nodes_list_nodes)
</snippet></ROW><ROW><id>1791923</id><snippet>association_proxy</snippet></ROW><ROW><id>1791923</id><snippet>from sqlalchemy.orm.collections import InstrumentedList
from sqlalchemy.ext.associationproxy import association_proxy


class ListNodeAssociation(Base):
    __tablename__ = 'nodes_list_nodes'
    parent_id = Column(None, ForeignKey('nodes_list.id'), primary_key=True)
    child_id = Column(None, ForeignKey(Node.id), primary_key=True)
    order = Column(Integer, nullable=False, default=0)
    child = relation(Node)
    __table_args__ = (
        PrimaryKeyConstraint('parent_id', 'child_id'),
        {},
    )


class OrderedList(InstrumentedList):

    def append(self, item):
        if self:
            item.order = self[-1].order+1
        else:
            item.order = 1
        InstrumentedList.append(self, item)


class ListNode(Node):
    __mapper_args__ = {'polymorphic_identity': 'list'}
    __tablename__ = 'nodes_list'
    id = Column(None, ForeignKey('nodes.id'), primary_key=True)
    _items = relation(ListNodeAssociation,
                      order_by=ListNodeAssociation.order,
                      collection_class=OrderedList,
                      cascade='all, delete-orphan')
    items = association_proxy(
                '_items', 'child',
                creator=lambda item: ListNodeAssociation(child=item))
</snippet></ROW><ROW><id>1792273</id><snippet>__</snippet></ROW><ROW><id>1792273</id><snippet>__attribute</snippet></ROW><ROW><id>1792273</id><snippet>_CLS__attribute</snippet></ROW><ROW><id>1792273</id><snippet>return type(name, (cls, ), { '__dict' : {} })</snippet></ROW><ROW><id>1792273</id><snippet>{ '__dict' : {} }</snippet></ROW><ROW><id>1792273</id><snippet>__dict</snippet></ROW><ROW><id>1792273</id><snippet>D._C__dict</snippet></ROW><ROW><id>1792273</id><snippet>D.__dict</snippet></ROW><ROW><id>1792273</id><snippet>(Pdb) dir(D)
['_C__dict', '__class__', '__delattr__', '__dict', '__dict__', '__doc__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'addchild', 'getdict', 'setval']
</snippet></ROW><ROW><id>1792273</id><snippet>D._C__dict</snippet></ROW><ROW><id>1792273</id><snippet>C.setval(1, 5)</snippet></ROW><ROW><id>1792273</id><snippet>D._C__dict</snippet></ROW><ROW><id>1792273</id><snippet>C._C__dict</snippet></ROW><ROW><id>1792725</id><snippet>open()</snippet></ROW><ROW><id>1792725</id><snippet>'rb+'</snippet></ROW><ROW><id>1792821</id><snippet>x = '\xff\x00'
y = ['%02x' % ord(c) for c in x]
print y
</snippet></ROW><ROW><id>1792821</id><snippet>['ff', '00']
</snippet></ROW><ROW><id>1793077</id><snippet>list</snippet></ROW><ROW><id>1793291</id><snippet>numpy.hstack</snippet></ROW><ROW><id>1793291</id><snippet>numpy.core.fromnumeric</snippet></ROW><ROW><id>1793291</id><snippet>__array_wrap__</snippet></ROW><ROW><id>1793291</id><snippet>def hstack2(arrays) :
  return arrays[0].__array_wrap__(numpy.hstack(arrays))
</snippet></ROW><ROW><id>1793291</id><snippet>&gt;&gt;&gt; f = hstack2((a,b))
&gt;&gt;&gt; type(f)
&lt;class 'numpy.core.records.recarray'&gt;
&gt;&gt;&gt; f.foo
array([    140633760262784,     111050731618561,     140633760262800,
                   7536928, 8391166428122670177])
&gt;&gt;&gt; x = numpy.random.rand(3)
&gt;&gt;&gt; y = numpy.random.rand(2)
&gt;&gt;&gt; z = hstack2((x,y))
&gt;&gt;&gt; type(z)
&lt;type 'numpy.ndarray'&gt;
</snippet></ROW><ROW><id>1793490</id><snippet>xrange</snippet></ROW><ROW><id>1793490</id><snippet>def xlongrange(start, limit, step):
    n = start
    while n &lt; limit:
        yield n
        n += step
</snippet></ROW><ROW><id>1793567</id><snippet># Detach process
pid = os.fork()
if pid == 0:
    # Ensure that process is detached from TTY
    os.setsid()

    # call ssh from here
else:
    print "Waiting for ssh (pid %d)" % pid
    os.waitpid(pid, 0)    
    print "Done"
</snippet></ROW><ROW><id>1793567</id><snippet>env = {'SSH_ASKPASS':'/path/to/myprog', 'DISPLAY':':9999'}
p = subprocess.Popen(['ssh', '-T', '-v', 'user@myhost.com'],
    stdin=subprocess.PIPE,
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE,
    env=env,
    preexec_fn=os.setsid
)
</snippet></ROW><ROW><id>1793686</id><snippet>html = #get html
soup = BeautifulSoup(html)
links = soup.findAll('a', attrs={'class': 'myclass'})
for link in links:
    #process link
</snippet></ROW><ROW><id>1793709</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>1793709</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>1793709</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>1793709</id><snippet>{{ value|markdown|linebreaksbr }}
</snippet></ROW><ROW><id>1793709</id><snippet>\n</snippet></ROW><ROW><id>1793709</id><snippet>&lt;br /&gt;</snippet></ROW><ROW><id>1793709</id><snippet>{{ value|markdown:"linebreakextension" }}</snippet></ROW><ROW><id>1793902</id><snippet>repr()</snippet></ROW><ROW><id>1793902</id><snippet>ascii()</snippet></ROW><ROW><id>1793987</id><snippet>.execute()</snippet></ROW><ROW><id>1793987</id><snippet>query = """
     INSERT INTO credit
         (bank, number, card, int1, value, type, int2)
     VALUES
          (?, ?, ?, ?, ?, ?, ?)
        """
data =  ['Citi', '5567', 'visa', 6000, 9.99, '23', 9000]

cursor.execute(query, data)
</snippet></ROW><ROW><id>1793987</id><snippet>.execute(operation[,parameters])</snippet></ROW><ROW><id>1793987</id><snippet>paramstyle</snippet></ROW><ROW><id>1793987</id><snippet>paramstyle</snippet></ROW><ROW><id>1793987</id><snippet>&gt;&gt;&gt; import sqlite3
&gt;&gt;&gt; print sqlite3.paramstyle
qmark
</snippet></ROW><ROW><id>1793987</id><snippet>qmark</snippet></ROW><ROW><id>1793987</id><snippet>?</snippet></ROW><ROW><id>1794030</id><snippet>&gt;&gt;&gt; import numpy
&gt;&gt;&gt; a = numpy.array([[1,2,3], [4,5,6], [7,8,9]])
&gt;&gt;&gt; a
array([[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]])
</snippet></ROW><ROW><id>1794030</id><snippet>a.sum([dimension])</snippet></ROW><ROW><id>1794030</id><snippet>dimension</snippet></ROW><ROW><id>1794030</id><snippet>&gt;&gt;&gt; a.sum(1)
array([ 6, 15, 24])
</snippet></ROW><ROW><id>1794030</id><snippet>&gt;&gt;&gt; a.sum(0)
array([12, 15, 18])
</snippet></ROW><ROW><id>1794030</id><snippet>&gt;&gt;&gt; a.sum()
45
</snippet></ROW><ROW><id>1794072</id><snippet>class Rating(models.Model):
    content = models.OneToOneField(Content, primary_key=True)
    ip =  models.CharField(max_length=200, blank=True)
    rating = models.IntegerField(default=0)

    Class Meta:
        unique_together= (('content', 'ip'),)
</snippet></ROW><ROW><id>1794260</id><snippet>import pythoncom, pyHook 

def OnKeyboardEvent(event):
    print 'Ascii:', event.Ascii, chr(event.Ascii)
    print 'Key:', event.Key
    print 'KeyID:', event.KeyID
    print 'ScanCode:', event.ScanCode
    print 'Extended:', event.Extended

    return True #for pass through key events, False to eat Keys

hm = pyHook.HookManager()
hm.KeyDown = OnKeyboardEvent
hm.HookKeyboard()
pythoncom.PumpMessages()
</snippet></ROW><ROW><id>1794522</id><snippet>if A or B and ((C or D and E) or F) or G and H:
</snippet></ROW><ROW><id>1794522</id><snippet>e = Evaluator()
if e('A or B and ((C or D and E) or F) or G and H'):
</snippet></ROW><ROW><id>1794522</id><snippet>__call__</snippet></ROW><ROW><id>1794522</id><snippet>compile</snippet></ROW><ROW><id>1794522</id><snippet>eval</snippet></ROW><ROW><id>1794522</id><snippet>dict</snippet></ROW><ROW><id>1794522</id><snippet>locals</snippet></ROW><ROW><id>1794522</id><snippet>and</snippet></ROW><ROW><id>1794522</id><snippet>or</snippet></ROW><ROW><id>1794522</id><snippet>X or Y or Z</snippet></ROW><ROW><id>1794522</id><snippet>X and Y and Z</snippet></ROW><ROW><id>1794522</id><snippet>Evaluator</snippet></ROW><ROW><id>1794522</id><snippet>import inspect
import random

class TracingDict(object):

  def __init__(self, loc, glob):
    self.loc = loc
    self.glob = glob
    self.vars = []

  def __getitem__(self, name):
    try: v = self.loc[name]
    except KeyError: v = self.glob[name]
    self.vars.append((name, v))
    return v


class Evaluator(object):

  def __init__(self):
    f = inspect.currentframe()
    f = inspect.getouterframes(f)[1][0]
    self.d = TracingDict(f.f_locals, f.f_globals)

  def __call__(self, expr):
    return eval(expr, {}, self.d)


def f(A, B, C, D, E):
  e = Evaluator()
  res = e('A or B and ((C or D and E) or F) or G and H')
  print 'R=%r from %s' % (res, e.d.vars)

for x in range(20):
  A, B, C, D, E, F, G, H = [random.randrange(2) for x in range(8)]
  f(A, B, C, D, E)
</snippet></ROW><ROW><id>1794522</id><snippet>R=1 from [('A', 1)]
R=1 from [('A', 1)]
R=1 from [('A', 1)]
R=1 from [('A', 0), ('B', 1), ('C', 1)]
R=1 from [('A', 1)]
R=1 from [('A', 0), ('B', 0), ('G', 1), ('H', 1)]
R=1 from [('A', 1)]
R=1 from [('A', 1)]
R=1 from [('A', 0), ('B', 1), ('C', 1)]
R=1 from [('A', 1)]
R=1 from [('A', 0), ('B', 1), ('C', 1)]
R=1 from [('A', 1)]
R=1 from [('A', 1)]
R=1 from [('A', 1)]
R=0 from [('A', 0), ('B', 0), ('G', 0)]
R=1 from [('A', 1)]
R=1 from [('A', 1)]
R=1 from [('A', 1)]
R=0 from [('A', 0), ('B', 0), ('G', 0)]
R=1 from [('A', 0), ('B', 1), ('C', 1)]
</snippet></ROW><ROW><id>1794540</id><snippet>urlparse.urljoin</snippet></ROW><ROW><id>1794540</id><snippet>os.path.join</snippet></ROW><ROW><id>1794540</id><snippet>'/'.join(s.strip('/') for s in pieces)</snippet></ROW><ROW><id>1794540</id><snippet>/</snippet></ROW><ROW><id>1794679</id><snippet>xterm -e python node.py</snippet></ROW><ROW><id>1794679</id><snippet>python node.py</snippet></ROW><ROW><id>1794679</id><snippet>xterm</snippet></ROW><ROW><id>1794679</id><snippet>-e</snippet></ROW><ROW><id>1795116</id><snippet>class YourRSS2Item(PyRSS2Gen.RSSItem):
    def publish_extensions(self, handler):
        handler.startElement("show_id")
        handler.endElement("show_id")
</snippet></ROW><ROW><id>1795116</id><snippet>item = RSSItem( .... enclosure = Enclosure("http://url.com", 10, ""), ...)
</snippet></ROW><ROW><id>1795338</id><snippet>State</snippet></ROW><ROW><id>1795338</id><snippet>id</snippet></ROW><ROW><id>1795338</id><snippet>Int</snippet></ROW><ROW><id>1795338</id><snippet>Object</snippet></ROW><ROW><id>1795338</id><snippet>Int</snippet></ROW><ROW><id>1795338</id><snippet>id</snippet></ROW><ROW><id>1795338</id><snippet>id</snippet></ROW><ROW><id>1795338</id><snippet>id</snippet></ROW><ROW><id>1795338</id><snippet>Object</snippet></ROW><ROW><id>1795338</id><snippet>id</snippet></ROW><ROW><id>1795338</id><snippet>Int</snippet></ROW><ROW><id>1795338</id><snippet>Integer</snippet></ROW><ROW><id>1795338</id><snippet>Int</snippet></ROW><ROW><id>1795338</id><snippet>id</snippet></ROW><ROW><id>1795338</id><snippet>id</snippet></ROW><ROW><id>1795338</id><snippet>data Object a = Obj Int a

instance Eq (Object a) where
  Obj i _ == Obj j _ = i == j

type InterpreterState a = State [Int] a

createObject :: a -&gt; InterpreterState (Object a)
createObject a = do
  (i:is) &lt;- get 
  put is
  return $ Obj i a 

destroyObject :: Object a -&gt; InterpreterState ()
destroyObject (Obj i a) = do
  modify (i:)
</snippet></ROW><ROW><id>1795338</id><snippet>InterpreterState</snippet></ROW><ROW><id>1795338</id><snippet>createObject</snippet></ROW><ROW><id>1795338</id><snippet>destroyObject</snippet></ROW><ROW><id>1795352</id><snippet>server.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)
</snippet></ROW><ROW><id>1795498</id><snippet>ctypes</snippet></ROW><ROW><id>1795498</id><snippet>&gt;&gt;&gt; obj = xrange(1,11,2)
&gt;&gt;&gt; obj.__reduce__()[1]
(1, 11, 2)
&gt;&gt;&gt; len(obj)
5
</snippet></ROW><ROW><id>1795498</id><snippet>__reduce__()</snippet></ROW><ROW><id>1795498</id><snippet>ctypes</snippet></ROW><ROW><id>1795498</id><snippet>from ctypes import *

PyObject_HEAD = [
    ('ob_refcnt', c_size_t),
    ('ob_type', c_void_p),
]

class XRangeType(Structure):
    _fields_ = PyObject_HEAD + [
        ('start', c_long),
        ('step', c_long),
        ('len', c_long),
    ]

range_obj = xrange(1, 11, 2)

c_range_obj = cast(c_void_p(id(range_obj)), POINTER(XRangeType)).contents
print c_range_obj.start, c_range_obj.step, c_range_obj.len
</snippet></ROW><ROW><id>1795616</id><snippet>def extractURL(self,fileName):

    wordsInLine = []
    tempWord = []
    urlList = []

    #open up the file containing the email
    file=open(fileName)
    for line in file:
        #create a list that contains is each word in each line
        wordsInLine = line.split(' ')
        #For each word try to split it with :
        for word in wordsLine:
            tempWord = word.split(":")
            #Check to see if the word is a URL
            if len(tempWord) == 2:
                if tempWord[0] == "http":
                    urlList.append(word)
    file.close()

    return urlList
</snippet></ROW><ROW><id>1795849</id><snippet>webbrowser</snippet></ROW><ROW><id>1795849</id><snippet>if sys.platform=='win32':
    subprocess.Popen(['start', d], shell= True)

elif sys.platform=='darwin':
    subprocess.Popen(['open', d])

else:
    try:
        subprocess.Popen(['xdg-open', d])
    except OSError:
        # er, think of something else to try
        # xdg-open *should* be supported by recent Gnome, KDE, Xfce
</snippet></ROW><ROW><id>1795849</id><snippet>cmd /c ...</snippet></ROW><ROW><id>1795849</id><snippet>cmd /c start C:\Documents and Settings</snippet></ROW><ROW><id>1795849</id><snippet>if sys.platform=='win32':
    os.startfile(d)
</snippet></ROW><ROW><id>1795849</id><snippet>if sys.platform=='win32':
    import _winreg
    path= r'SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon')
    for root in (_winreg.HKEY_CURRENT_USER, _winreg.HKEY_LOCAL_MACHINE):
        try:
            with _winreg.OpenKey(root, path) as k:
                value, regtype= _winreg.QueryValueEx(k, 'Shell')
        except WindowsError:
            pass
        else:
            if regtype in (_winreg.REG_SZ, _winreg.REG_EXPAND_SZ):
                shell= value
            break
    else:
        shell= 'Explorer.exe'
    subprocess.Popen([shell, d])
</snippet></ROW><ROW><id>1796089</id><snippet>(http://www.example.com/subdirectory/)([^=?#]*)$
</snippet></ROW><ROW><id>1796130</id><snippet>&lt;input type="radio" name="music" value="Rock" checked="checked"&gt; Rock&lt;br&gt;
&lt;input type="radio" name="music" value="Pop"&gt; Pop&lt;br&gt;
&lt;input type="radio" name="music" value="Metal"&gt; Metal&lt;br&gt;
</snippet></ROW><ROW><id>1796247</id><snippet>import sys
current_module = sys.modules[__name__]
</snippet></ROW><ROW><id>1796247</id><snippet>import sys
def print_classes():
    for name, obj in inspect.getmembers(sys.modules[__name__]):
        if inspect.isclass(obj):
            print obj
</snippet></ROW><ROW><id>1796247</id><snippet>clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)
</snippet></ROW><ROW><id>1796295</id><snippet>import views

def app(environ, start_response):
    urls = url_map.bind_to_environ(environ)
    request = Request(environ)
    endpoint, params = urls.match()
    names = endpoint.split('.')
    view = views
    for name in names:
        if not hasattr(view, name):
            __import__(view.__name__, None, None, [name])
        view = getattr(view, name)
    try:
        response = view(request)
    except werkzeug.exceptions.HTTPException, exc:
        response = exc
    return response(environ, start_response)
</snippet></ROW><ROW><id>1796299</id><snippet>ScriptAlias</snippet></ROW><ROW><id>1796299</id><snippet>/cgi-bin/</snippet></ROW><ROW><id>1796299</id><snippet>/usr/local/apache2/cgi-bin/</snippet></ROW><ROW><id>1796299</id><snippet>AddHandler cgi-script</snippet></ROW><ROW><id>1796299</id><snippet>.cgi</snippet></ROW><ROW><id>1796299</id><snippet>.pl</snippet></ROW><ROW><id>1796427</id><snippet>PATH</snippet></ROW><ROW><id>1796427</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>1796464</id><snippet>This module has been built with Oracle 9.2.0, 10.2.0, 11.1.0 on Linux
</snippet></ROW><ROW><id>1796474</id><snippet>ssh</snippet></ROW><ROW><id>1796474</id><snippet>client.exec_command('ssh user@host2 "apt-get install sl -y --force-yes"')
</snippet></ROW><ROW><id>1796569</id><snippet>_frame</snippet></ROW><ROW><id>1796569</id><snippet>frameobject.h</snippet></ROW><ROW><id>1796569</id><snippet>traceback.c</snippet></ROW><ROW><id>1796569</id><snippet>#include &lt;Python.h&gt;
#include &lt;frameobject.h&gt;

PyTracebackObject* traceback = get_the_traceback();

int line = traceback-&gt;tb_lineno;
const char* filename = PyString_AsString(traceback-&gt;tb_frame-&gt;f_code-&gt;co_filename);
</snippet></ROW><ROW><id>1796610</id><snippet>&gt;&gt;&gt; from numpy import *
&gt;&gt;&gt;
&gt;&gt;&gt; data = loadtxt("myfile.txt")                       # myfile.txt contains 4 columns of numbers
&gt;&gt;&gt; t,z = data[:,0], data[:,3]                         # data is 2D numpy array
&gt;&gt;&gt;
&gt;&gt;&gt; t,x,y,z = loadtxt("myfile.txt", unpack=True)                  # to unpack all columns
&gt;&gt;&gt; t,z = loadtxt("myfile.txt", usecols = (0,3), unpack=True)     # to select just a few columns
&gt;&gt;&gt; data = loadtxt("myfile.txt", skiprows = 7)                    # to skip 7 rows from top of file
&gt;&gt;&gt; data = loadtxt("myfile.txt", comments = '!')                  # use '!' as comment char instead of '#'
&gt;&gt;&gt; data = loadtxt("myfile.txt", delimiter=';')                   # use ';' as column separator instead of whitespace
&gt;&gt;&gt; data = loadtxt("myfile.txt", dtype = int)                     # file contains integers instead of floats
</snippet></ROW><ROW><id>1797127</id><snippet>easy_install</snippet></ROW><ROW><id>1797127</id><snippet># /path/to/python-2.5 easy_install Django
</snippet></ROW><ROW><id>1797163</id><snippet>try:
    from local_settings import *
except ImportError:
    print "Missing %s" % os.path.join(PROJECT_ROOT, "local_settings.py")

if DEBUG:
    for p in [PROJECT_ROOT, MEDIA_ROOT, THEME_DIR, ADMIN_MEDIA_ROOT] + list(TEMPLATE_DIRS):
        p = os.path.normpath(p)
        if not os.path.exists(p):
            print "Missing path: %s" % p
</snippet></ROW><ROW><id>1797342</id><snippet>foreach (range(0, 12) as $number) {
    echo $number;
}
</snippet></ROW><ROW><id>1797656</id><snippet>def get_thread(msg):
    messages = [] # empty message set

    while msg.response_to:  
         messages.append(msg)
         msg = msg.response_to

    messages.append(msg) # will append the original message

    return messages
</snippet></ROW><ROW><id>1797674</id><snippet>fftpack</snippet></ROW><ROW><id>1798407</id><snippet>import webbrowser
webbrowser.open('file://%s' % path)
</snippet></ROW><ROW><id>1798490</id><snippet>foo = foo.replace(' ', '')[:-3].upper()
</snippet></ROW><ROW><id>1798533</id><snippet>input = 0xD44393DB;
reshuffled = ((input &amp; 0xFF00FF00) &gt;&gt; 8) | ((input &amp; 0x00FF00FF) &lt;&lt; 8);
signbit = (reshuffled &amp; 0x80000000) &gt;&gt; 31;
exponent = ((reshuffled &amp; 0x7F800000) &gt;&gt; 23) - 128;
mantissa = float((reshuffled &amp; 0x007FFFFF) | 0x00800000) / 2**24;
result = (-1)**signbit * mantissa * 2**exponent;
</snippet></ROW><ROW><id>1798533</id><snippet>result = 106.42885589599609</snippet></ROW><ROW><id>1798533</id><snippet>reshuffled &amp; 0x007FFFFF</snippet></ROW><ROW><id>1798533</id><snippet>... | 0x00800000</snippet></ROW><ROW><id>1798533</id><snippet>1*2^(-1) + 1*2^(-2) + 0*2^(-3) + ... + 1*2^(-23) + 1*2^(-24)</snippet></ROW><ROW><id>1798533</id><snippet>(1*2^23 + 1*2^22 + 0*2^21 + ... + 1*2^1 + 1*2^0) / 2^24</snippet></ROW><ROW><id>1798533</id><snippet>(reshuffled &amp; 0x007FFFFF) | 0x00800000</snippet></ROW><ROW><id>1798714</id><snippet>lib/settings.py</snippet></ROW><ROW><id>1798714</id><snippet>BASE = 'http://www.whatever.com'
</snippet></ROW><ROW><id>1798714</id><snippet>from settings import *
</snippet></ROW><ROW><id>1798714</id><snippet>game.py</snippet></ROW><ROW><id>1798714</id><snippet>url = '%syear_%s/month_%s/day_%s/%s/' % (BASE, year, month, day, game_id)
</snippet></ROW><ROW><id>1798807</id><snippet>l</snippet></ROW><ROW><id>1798807</id><snippet>l = [x for x in l if x != 0]
</snippet></ROW><ROW><id>1798807</id><snippet>l</snippet></ROW><ROW><id>1798807</id><snippet>if x</snippet></ROW><ROW><id>1798807</id><snippet>True</snippet></ROW><ROW><id>1798807</id><snippet>i &lt; len(l)</snippet></ROW><ROW><id>1798807</id><snippet>len(l)</snippet></ROW><ROW><id>1798807</id><snippet>i = 0
while i &lt; len(l):
   if l[i] == 0:
       l.pop(i)
   else:
       i += 1
</snippet></ROW><ROW><id>1798869</id><snippet>copy_reg.pickle</snippet></ROW><ROW><id>1798869</id><snippet>import copy_reg
import types

def reduce_method(m):
    return (getattr, (m.__self__, m.__func__.__name__))

copy_reg.pickle(types.MethodType, reduce_method)
</snippet></ROW><ROW><id>1799560</id><snippet>numpy.true_divide(A,C)</snippet></ROW><ROW><id>1799560</id><snippet>from __future__ import division</snippet></ROW><ROW><id>1799676</id><snippet>KeyboardInterupt</snippet></ROW><ROW><id>1799676</id><snippet>KeyboardInterrupt</snippet></ROW><ROW><id>1800214</id><snippet>import numpy as np
x=np.array([[np.NaN, 1., 1., 1., 1., 1., 1.],[1., np.NaN, 1., 1., 1., 1., 1.],[1., 1., np.NaN, 1., 1., 1., 1.], [1., 1., 1., np.NaN, 1., 1., 1.], [1., 1., 1., 1., np.NaN, 1., 1.],[1., 1., 1., 1., 1., np.NaN, 1.], [1., 1., 1., 1., 1., 1., np.NaN]])
x[np.isnan(x)]=0
</snippet></ROW><ROW><id>1800214</id><snippet>np.isnan(x)</snippet></ROW><ROW><id>1800214</id><snippet>True</snippet></ROW><ROW><id>1800214</id><snippet>x</snippet></ROW><ROW><id>1800214</id><snippet>NaN</snippet></ROW><ROW><id>1800214</id><snippet>x[ boolean_array ] = 0</snippet></ROW><ROW><id>1800214</id><snippet>True</snippet></ROW><ROW><id>1800542</id><snippet>py</snippet></ROW><ROW><id>1800542</id><snippet>:</snippet></ROW><ROW><id>1800542</id><snippet>for</snippet></ROW><ROW><id>1800637</id><snippet>LOAD DATA INFILE 'data.txt' INTO TABLE tbl_name
  FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '"'
  LINES TERMINATED BY '\n';
</snippet></ROW><ROW><id>1800858</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; p = re.compile("lalala(I want this part)lalala")
&gt;&gt;&gt; p.match("lalalaI want this partlalala").group(1)
'I want this part'
</snippet></ROW><ROW><id>1800889</id><snippet>filter = ''.join([['.', chr(x)][chr(x) in string.printable[:-5]] for x in xrange(256)])
</snippet></ROW><ROW><id>1801097</id><snippet>html_content</snippet></ROW><ROW><id>1801097</id><snippet>text_content</snippet></ROW><ROW><id>1801097</id><snippet>render_to_response</snippet></ROW><ROW><id>1801097</id><snippet>HttpResponse</snippet></ROW><ROW><id>1801097</id><snippet>html_content</snippet></ROW><ROW><id>1801097</id><snippet>text_content</snippet></ROW><ROW><id>1801097</id><snippet>render_to_string</snippet></ROW><ROW><id>1801097</id><snippet>render_to_string</snippet></ROW><ROW><id>1801097</id><snippet>from django.template.loader import render_to_string
</snippet></ROW><ROW><id>1801327</id><snippet>import tarfile; tarfile.open('Python-3.1.1.tar.bz2').extractall()
</snippet></ROW><ROW><id>1801387</id><snippet>url(r'^user/(?P&lt;user_id&gt;\d+)/profile/$', 'yourapp.views.view', name='user_url')
</snippet></ROW><ROW><id>1801387</id><snippet>&lt;a href="{% url user_url user.id %}"&gt;
</snippet></ROW><ROW><id>1801387</id><snippet>def myview(request):
    user = request.user
</snippet></ROW><ROW><id>1801471</id><snippet>&gt;&gt;&gt; L = [2, 1, 4, 3, 5, 1, 2, 1, 1, 6, 5]
&gt;&gt;&gt; S = set()
&gt;&gt;&gt; M = []
&gt;&gt;&gt; for e in L:
...     if e in S:
...         continue
...     S.add(e)
...     M.append(e)
... 
&gt;&gt;&gt; M
[2, 1, 4, 3, 5, 6]
</snippet></ROW><ROW><id>1801471</id><snippet>M = list(set(L))
</snippet></ROW><ROW><id>1801676</id><snippet>&gt;&gt;&gt; [x.lower() for x in ["A","B","C"]]
['a', 'b', 'c']
&gt;&gt;&gt; [x.upper() for x in ["a","b","c"]]
['A', 'B', 'C']
</snippet></ROW><ROW><id>1801676</id><snippet>&gt;&gt;&gt; map(lambda x:x.lower(),["A","B","C"])
['a', 'b', 'c']
&gt;&gt;&gt; map(lambda x:x.upper(),["a","b","c"])
['A', 'B', 'C']
</snippet></ROW><ROW><id>1801895</id><snippet>Array = dict()
Array[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1] = [1.0, 0.0, 0.0]
</snippet></ROW><ROW><id>1801992</id><snippet>__init__.py</snippet></ROW><ROW><id>1801992</id><snippet>threading</snippet></ROW><ROW><id>1801992</id><snippet>Thread</snippet></ROW><ROW><id>1802103</id><snippet>&gt;&gt;&gt; uuid.uuid4()
UUID('9d477dc7-a986-4e3d-aa4f-6e57f690be78')
</snippet></ROW><ROW><id>1802103</id><snippet>c7</snippet></ROW><ROW><id>1802440</id><snippet>paster serve</snippet></ROW><ROW><id>1802440</id><snippet>paster create</snippet></ROW><ROW><id>1802440</id><snippet>paster serve</snippet></ROW><ROW><id>1802440</id><snippet>paster create</snippet></ROW><ROW><id>1802449</id><snippet>self._v_scaleInfo:</snippet></ROW><ROW><id>1802449</id><snippet>[(x,y),(x,y),...]</snippet></ROW><ROW><id>1802449</id><snippet>for width, height in self._v_scaleInfo:</snippet></ROW><ROW><id>1802449</id><snippet>$scaleInfo = array(array(x,y), array(x,y),...);

for( $i = 0; $i &lt; count($scaleInfo); $i++ ) {
  $width = $scaleInfo[$i][0];
  $height = $scaleInfo[$i][1];
  ...
}
</snippet></ROW><ROW><id>1802533</id><snippet>inspect.isclass()</snippet></ROW><ROW><id>1802533</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.isclass(inspect)
False
&gt;&gt;&gt; inspect.isclass(inspect.ArgInfo)
True
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1802626</id><snippet>&gt;&gt;&gt; from distutils import util
&gt;&gt;&gt; util.get_platform()
'linux-x86_64'

&gt;&gt;&gt; import sys
&gt;&gt;&gt; '%s.%s' % sys.version_info[:2]
2.6
</snippet></ROW><ROW><id>1802842</id><snippet>s.sprintf( 
  "import imp\n" 
  "imp.load_source('%s', r'%s')", modname, script_path); 
PyRun_SimpleString(s.c_str());
</snippet></ROW><ROW><id>1802844</id><snippet>$ cat test.i 
%module test
%{
void test() { printf("Test.\n"); }
%}
void test();
$ swig -python test.i ; gcc -I/usr/include/python2.5 -shared -fPIC -o _test.so test_wrap.c -lpython2.5 `pkg-config --libs gtkglext-1.0`
$ python -c 'import test; test.test()'
Test.
Segmentation fault
$ python -c 'import gtk; import test; test.test()'
Test.
</snippet></ROW><ROW><id>1802980</id><snippet>self</snippet></ROW><ROW><id>1802980</id><snippet>None</snippet></ROW><ROW><id>1802980</id><snippet>def p(self, b=None):
    if b is None:
        b = self.a
    print b
</snippet></ROW><ROW><id>1803321</id><snippet>easy_install pastescript # A one-time install
paster create
</snippet></ROW><ROW><id>1803321</id><snippet>paster create mypackage
</snippet></ROW><ROW><id>1803321</id><snippet>paster create -t libtemplate mypackage
paster create -t apptemplate mypackage
</snippet></ROW><ROW><id>1803321</id><snippet>mkdir mypackage &amp;&amp; cd mypackage
virtualenv --distribute env
source env/bin/activate # 'Turns on / activates' the environment
easy_install pastescript
paster create mypackage
</snippet></ROW><ROW><id>1803349</id><snippet>bool(value)==True</snippet></ROW><ROW><id>1803349</id><snippet>result = a or b or c or default
</snippet></ROW><ROW><id>1803598</id><snippet>math.isnan()</snippet></ROW><ROW><id>1803598</id><snippet>NaN</snippet></ROW><ROW><id>1803598</id><snippet>NaN</snippet></ROW><ROW><id>1803598</id><snippet>import math
mylist = [0 if math.isnan(x) else x for x in mylist]
</snippet></ROW><ROW><id>1803598</id><snippet>NaN != NaN</snippet></ROW><ROW><id>1803598</id><snippet>mylist = [0 if x != x else x for x in mylist]
</snippet></ROW><ROW><id>1803708</id><snippet>step = len(smallMatrix[0])
for y in xrange(0, len(bigMatrix[0], step)):
    for x in xrange(0, len(bigMatrix), step):
        if not any(bigMatrix[x: x+step, y: y + step]):
            continue
        (...)
</snippet></ROW><ROW><id>1803742</id><snippet>cregexp</snippet></ROW><ROW><id>1803742</id><snippet>regexp</snippet></ROW><ROW><id>1803752</id><snippet>getattr</snippet></ROW><ROW><id>1803752</id><snippet>def __eq__(self, other):
    return all(getattr(self, a, Ellipsis) == getattr(other, a, Ellipsis)
               for a in self.metainfo)
</snippet></ROW><ROW><id>1803752</id><snippet>Ellipsis</snippet></ROW><ROW><id>1803752</id><snippet>NotImplemented</snippet></ROW><ROW><id>1803752</id><snippet>hasattr</snippet></ROW><ROW><id>1803752</id><snippet>def __eq__(self, other):
    return all(hasattr(self, a) == hasattr(other, a) and
               getattr(self, a) == getattr(other, a) for a in self.metainfo)
</snippet></ROW><ROW><id>1803752</id><snippet>...</snippet></ROW><ROW><id>1803752</id><snippet>Ellipsis</snippet></ROW><ROW><id>1803752</id><snippet>getattr(self, a, ...)</snippet></ROW><ROW><id>1803773</id><snippet>HTTPError</snippet></ROW><ROW><id>1803773</id><snippet>code</snippet></ROW><ROW><id>1803773</id><snippet>read()</snippet></ROW><ROW><id>1804005</id><snippet>from multiprocessing import Process
from somewhere import A, B 
if __name__ == '__main__':
    procs = [ Process(target=t) for t in (A,B) ]

    for p in procs: 
        p.start()

    for p in procs: 
        p.join()
</snippet></ROW><ROW><id>1804620</id><snippet>last_post</snippet></ROW><ROW><id>1805015</id><snippet>10*i for i in range(77):</snippet></ROW><ROW><id>1805015</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>1805015</id><snippet>lpr</snippet></ROW><ROW><id>1805015</id><snippet>lpr</snippet></ROW><ROW><id>1805015</id><snippet>subprocess.Popen(['lpr', 'some_filename'])
</snippet></ROW><ROW><id>1805015</id><snippet>lpr</snippet></ROW><ROW><id>1805015</id><snippet>pdf2ps</snippet></ROW><ROW><id>1805015</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>1805034</id><snippet>from twisted.internet import reactor, protocol
from twisted.protocols.basic import LineReceiver


class MyHandler(LineReceiver):

    def lineReceived(self, line):
        print "Got line:", line


f = protocol.ClientFactory()
f.protocol = MyHandler
reactor.connectTCP("127.0.0.1", 4711, f)
reactor.run()
</snippet></ROW><ROW><id>1805107</id><snippet>Decimal</snippet></ROW><ROW><id>1805107</id><snippet>&gt;&gt;&gt; def doit(s): return decimal.Decimal(str(round(float(s), 2)))
... 
&gt;&gt;&gt; json.loads(x, parse_float=doit)
{u'14': [Decimal('4.59'), u'susan']}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1805340</id><snippet>all = Picture.objects.all().iterator()
for i in all:
    i.image.generate_thumbnails()
</snippet></ROW><ROW><id>1805415</id><snippet>randon.uniform()</snippet></ROW><ROW><id>1805415</id><snippet>random.seed()</snippet></ROW><ROW><id>1805415</id><snippet>random.seed(100) # Set the random nymber generator to a fixed sequence.
r=array([uniform(-R,R),uniform(-R,R),uniform(-R,R)])
</snippet></ROW><ROW><id>1805440</id><snippet>SgmlLinkExtractor(allow=["hxs.select('//td[@class='altRow'] ...')"])
</snippet></ROW><ROW><id>1805440</id><snippet>SgmlLinkExtractor(allow=[r"product\.php"])
</snippet></ROW><ROW><id>1806003</id><snippet>(r'', 'pub.views.index'),
(r'^/$', 'pub.views.index'),
</snippet></ROW><ROW><id>1806003</id><snippet>pub.views.index</snippet></ROW><ROW><id>1806003</id><snippet>url(r'', 'pub.views.index' name='pub_a'),
url(r'^/$', 'pub.views.index', name='pub_b'),
</snippet></ROW><ROW><id>1806003</id><snippet>{% url pub_a %}</snippet></ROW><ROW><id>1806003</id><snippet>{% url pub_b %}</snippet></ROW><ROW><id>1806244</id><snippet>def makedict(avector):
  return dict((item, i) for i, item in enumerate(avector))
</snippet></ROW><ROW><id>1806244</id><snippet>def comparedicts(d1, d2):
  allitems = set(d1) | set(d2)      
  distances = [d1.get(x, len(d1)) - d2.get(x, len(d2)) for x in allitems]
  return sum(d * d for d in distances)
</snippet></ROW><ROW><id>1806266</id><snippet>type="button"</snippet></ROW><ROW><id>1806266</id><snippet>mechanize</snippet></ROW><ROW><id>1806266</id><snippet>mechanize</snippet></ROW><ROW><id>1806266</id><snippet>spidermonkey</snippet></ROW><ROW><id>1806266</id><snippet>spidermonkey</snippet></ROW><ROW><id>1806309</id><snippet>from fractions import Fraction
float(sum(Fraction(s) for s in '1 2/3'.split()))
</snippet></ROW><ROW><id>1806532</id><snippet>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"      "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
    &lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
    &lt;head&gt;
 &lt;title&gt;{% block title %}{% endblock %}&lt;/title&gt; 
 &lt;meta http-equiv="content-type" content="text/html;charset=utf-8" /&gt;
  &lt;link rel="stylesheet" type="text/css" href="/media/css/base.css" /&gt;
  &lt;link rel="stylesheet" type="text/css" href="/media/css/login.css" /&gt;
  &lt;link rel="stylesheet" href="/site_media/css/style.css" type="text/css" /&gt;
  &lt;!--[if lte IE 7]&gt;&lt;link rel="stylesheet" type="text/css" href="/media/css/ie.css" /&gt;&lt;![endif]--&gt;
 &lt;/head&gt;
  &lt;body class="{% block bodyclass %}{% endblock %}"&gt;
  {% block content %}

     &lt;div id="content"&gt;

         {% block navigation %}
             &lt;ul id="top"&gt;
                &lt;li&gt;&lt;a class="{% block home %}{% endblock %}" href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
                &lt;li&gt;&lt;a class="{% block myaccount %}{% endblock %}" href="/profile/"&gt;My Account&lt;/a&gt;&lt;/li&gt;
                {% if perms.staffing.add_staffrequest %}
                 &lt;li&gt;&lt;a class="{% block createsr %}{% endblock %}" 
                  href="/create/staffrequest/"&gt;Staff Request&lt;/a&gt;&lt;/li&gt;
                {% endif %}
             &lt;/ul&gt;
         {% endblock %}

         {% block real_content %}
         &lt;div id="intro"&gt;
             &lt;p&gt;Hello, {{ user.first_name }}.&lt;/p&gt;
             &lt;p&gt;Please create a Staff Request here by filling out the form below.&lt;/p&gt;
          &lt;/div&gt; &lt;!-- end intro --&gt;

          &lt;div id="logout"&gt;
           &lt;a href="/accounts/logout" alt="Sign Off" title="Sign Off"&gt;Sign Off&lt;/a&gt;
          &lt;/div&gt;
          {% endblock %}

     &lt;/div&gt; &lt;!-- end content --&gt;


  {% endblock %} 
  {% block footer %}{% endblock %}
 &lt;/body&gt; 
 &lt;/html&gt;
</snippet></ROW><ROW><id>1806532</id><snippet>{% extends "base.html" %}
{% block title %}Home Portal{% endblock %}

{% block home %}current{% endblock %}


{% block real_content %}

&lt;div id="content"&gt;

 &lt;div id="intro"&gt;
  &lt;p&gt;Hello, {{ user.first_name }}.&lt;/p&gt;
  &lt;p&gt;Please create a Staff Request here by filling out the form
  below.&lt;/p&gt;
 &lt;/div&gt; &lt;!-- end intro --&gt;
 &lt;div id="logout"&gt;
  &lt;a href="/accounts/logout" alt="Sign Off" title="Sign Off"&gt;Sign Off&lt;/a&gt;
 &lt;/div&gt;
&lt;/div&gt; &lt;!-- end content --&gt;

{% endblock %}
</snippet></ROW><ROW><id>1806646</id><snippet>FontName: -----
FullName: ------
FamilyName: ------
Weight: -----
...
</snippet></ROW><ROW><id>1806742</id><snippet>song_points = {}
for response in survey_responses.find():
    for song in response['favorite_songs_of_2009']:
        title = song['title']
        song_points[title] = song_points.get(title, 0) + song['points']
</snippet></ROW><ROW><id>1806742</id><snippet>song_points</snippet></ROW><ROW><id>1806773</id><snippet>strace</snippet></ROW><ROW><id>1806773</id><snippet>man strace</snippet></ROW><ROW><id>1806916</id><snippet>from urllib2 import ProxyHandler,build_opener,install_opener

PROXY="http://USERNAME:PASSWD@ADDRESS:PORT"

opener = build_opener(ProxyHandler({"http" : PROXY}))

install_opener(opener)
</snippet></ROW><ROW><id>1807043</id><snippet>Object()</snippet></ROW><ROW><id>1807043</id><snippet>null</snippet></ROW><ROW><id>1807043</id><snippet>lst = [Object() for i in range(100)]
</snippet></ROW><ROW><id>1807043</id><snippet>i</snippet></ROW><ROW><id>1807043</id><snippet>_</snippet></ROW><ROW><id>1807043</id><snippet>lst = [Object() for _ in range(100)]
</snippet></ROW><ROW><id>1807043</id><snippet>*</snippet></ROW><ROW><id>1807043</id><snippet>lst = [None] * 100
</snippet></ROW><ROW><id>1807107</id><snippet>extract</snippet></ROW><ROW><id>1807107</id><snippet>open</snippet></ROW><ROW><id>1807107</id><snippet>shutil.copyfileobj</snippet></ROW><ROW><id>1807275</id><snippet>import inspect

a = A.NestA

print a in [x[1] for x in inspect.getmembers(A, inspect.isclass)]
print a in [x[1] for x in inspect.getmembers(B, inspect.isclass)]
</snippet></ROW><ROW><id>1807275</id><snippet>True
False
</snippet></ROW><ROW><id>1807275</id><snippet># for each class in a's module...
for klass in inspect.getmembers(inspect.getmodule(a), inspect.isclass):
    # see if a is in that class
    if a in [x[1] for x in inspect.getmembers(klass[1], inspect.isclass)]:
        print a, "is a member of", klass[0]
</snippet></ROW><ROW><id>1807275</id><snippet>__main__.NestA is a member of A
</snippet></ROW><ROW><id>1807361</id><snippet>RX = re.compile(r'^.*?\(\d+,\s0,.*\s0\)\s*$')

outfile = open('destination.sql', 'w')
for ln in open('source.sql', 'r').xreadlines():
    replace1 = ln.replace("INSERT INTO `Tbl_ABC` VALUES (", "")
    replace2 = replace1.replace(")", "")
    list_replace = replace2.split(',')
    #print list_replace
    #print '%s ,%s' % (list_replace[1], list_replace[6])
    if list_replace[6]==0 and list_replace[1] == 0:
        #start write line to destination.sql!!!!!!!! NEED HELP
        #if RX.match(ln):
        outfile.write(ln)
</snippet></ROW><ROW><id>1807439</id><snippet>item = FirmItem()</snippet></ROW><ROW><id>1807439</id><snippet>item = FirmItem</snippet></ROW><ROW><id>1807898</id><snippet>.filter('intake =')</snippet></ROW><ROW><id>1807898</id><snippet>.filter('intake=')</snippet></ROW><ROW><id>1807898</id><snippet>.filter('intake')</snippet></ROW><ROW><id>1808066</id><snippet>target_product, created_flag = Component.objects.get_or_create(name=product_name)
article.product = target_product
</snippet></ROW><ROW><id>1808066</id><snippet>get_or_create()</snippet></ROW><ROW><id>1808066</id><snippet>null=True</snippet></ROW><ROW><id>1808266</id><snippet>&gt;&gt;&gt; [hex(ord(x)) for x in unichr(0x80).encode('utf-8')]
['0xc2', '0x80']
</snippet></ROW><ROW><id>1808414</id><snippet>import MySQLdb.cursors
connection=MySQLdb.connect(
    host="thehost",user="theuser",
    passwd="thepassword",db="thedb",
    cursorclass = MySQLdb.cursors.SSCursor)
cursor=connection.cursor()
cursor.execute(query)
for row in cursor:
    print(row)
</snippet></ROW><ROW><id>1808569</id><snippet>B.__module__= 'a'
</snippet></ROW><ROW><id>1808569</id><snippet>from a._b import *
</snippet></ROW><ROW><id>1808569</id><snippet>__init__</snippet></ROW><ROW><id>1808569</id><snippet>for value in globals().values():
    if inspect.isclass(value) and value.__module__.startswith('a.'):
        value.__module__= 'a'
</snippet></ROW><ROW><id>1808569</id><snippet>isinstance(value, type)</snippet></ROW><ROW><id>1808569</id><snippet>inspect</snippet></ROW><ROW><id>1808569</id><snippet>__main__</snippet></ROW><ROW><id>1808569</id><snippet>__name__</snippet></ROW><ROW><id>1808569</id><snippet>'a'</snippet></ROW><ROW><id>1808688</id><snippet>utf-8</snippet></ROW><ROW><id>1808688</id><snippet>UnicodeDecodeError</snippet></ROW><ROW><id>1808688</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>1808688</id><snippet>utf-8</snippet></ROW><ROW><id>1808688</id><snippet>utf8encoded = htmlSource.decode('some_encoding').encode('utf-8')
</snippet></ROW><ROW><id>1808688</id><snippet>'some_encoding'</snippet></ROW><ROW><id>1808720</id><snippet>UTF-8</snippet></ROW><ROW><id>1808720</id><snippet>cp1252</snippet></ROW><ROW><id>1808720</id><snippet>cp1252</snippet></ROW><ROW><id>1808720</id><snippet>iso-8859-1</snippet></ROW><ROW><id>1808750</id><snippet>if</snippet></ROW><ROW><id>1808750</id><snippet>if a == True:
    print 1
</snippet></ROW><ROW><id>1808750</id><snippet>with</snippet></ROW><ROW><id>1808750</id><snippet>conditional</snippet></ROW><ROW><id>1808750</id><snippet>__enter__</snippet></ROW><ROW><id>1808750</id><snippet>with</snippet></ROW><ROW><id>1808750</id><snippet>try</snippet></ROW><ROW><id>1808750</id><snippet>a != True</snippet></ROW><ROW><id>1808750</id><snippet>a == True</snippet></ROW><ROW><id>1808750</id><snippet>if a</snippet></ROW><ROW><id>1808750</id><snippet>a</snippet></ROW><ROW><id>1808750</id><snippet>a = [1]</snippet></ROW><ROW><id>1808750</id><snippet>if a</snippet></ROW><ROW><id>1809342</id><snippet>from random import randint
from itertools import takewhile, islice

file = "/etc/passwd"
f = open(file, "r")

f.seek(randint(10,250))
pos = f.tell()

print "pos=%d" % pos

def countbytes(iterable):
    bytes = 0
    for item in iterable:
        bytes += len(item)
        yield bytes

print 1+len(list(takewhile(lambda x: x &lt;= pos, countbytes(open(file, "r")))))
</snippet></ROW><ROW><id>1809342</id><snippet>enumerate</snippet></ROW><ROW><id>1809342</id><snippet>dropwhile</snippet></ROW><ROW><id>1809342</id><snippet>from random import randint
from itertools import islice, dropwhile

file = "/etc/passwd"
f = open(file, "r")

f.seek(randint(10,250))
pos = f.tell()

print "pos=%d" % pos

def countbytes(iterable):
    bytes = 0
    for item in iterable:
        bytes += len(item)
        yield bytes

print list(
        islice(
            dropwhile(lambda x: x[1] &lt;= pos, enumerate(countbytes(open(file, "r"))))
            , 1))[0][0]+1
</snippet></ROW><ROW><id>1809516</id><snippet>&gt;&gt;&gt;</snippet></ROW><ROW><id>1809516</id><snippet>...</snippet></ROW><ROW><id>1809516</id><snippet>"""
&gt;&gt;&gt; from packagename import module
&gt;&gt;&gt; module.show_real_world_usage()
'Hello world!'
"""
</snippet></ROW><ROW><id>1809516</id><snippet>"""
&gt;&gt; from packagename import module
&gt;&gt; module.show_real_world_usage()
'Hello world!'
"""
</snippet></ROW><ROW><id>1809813</id><snippet>d</snippet></ROW><ROW><id>1809813</id><snippet>mud</snippet></ROW><ROW><id>1809813</id><snippet>mud = dict((p, set(d[p]['contents'].split())) for p in d)
</snippet></ROW><ROW><id>1809813</id><snippet>parent = dict((p, [k for k in mud if p in mud[k]]) for p in mud)
</snippet></ROW><ROW><id>1809813</id><snippet>parent</snippet></ROW><ROW><id>1809813</id><snippet>path = [page]
while parent[path[-1]]:
  path.append(parent[path[-1]][0])
</snippet></ROW><ROW><id>1809813</id><snippet>partial_paths = [ [page] ]
while partial_paths:
  path = partial_paths.pop()
  if parent[path[-1]]:
    # add as many partial paths as open from here
    for p in parent[path[-1]]:
      partial_paths.append(path + [p])
  else:
    # we've reached a root (parentless node)
    print(path)
</snippet></ROW><ROW><id>1809813</id><snippet>print</snippet></ROW><ROW><id>1809813</id><snippet>yield</snippet></ROW><ROW><id>1809813</id><snippet>partial_paths = [ ([page], set([page])) ]
while partial_paths:
  path, pset = partial_paths.pop()
  if parent[path[-1]]:
    # add as many partial paths as open from here
    for p in parent[path[-1]]:
      if p in pset:
        print('Cycle: %s (%s)' % (path, p))
        continue
      partial_paths.append((path + [p], pset.union([p])))
  else:
    # we've reached a root (parentless node)
    print('Path: %s' % (path,))
</snippet></ROW><ROW><id>1809898</id><snippet>totalIncome = ((classACost * float(classASeatsSold)) +
    (classBCost * float(classBSeatsSold)) +
    (classCCost * float(classCSeatsSold)))
</snippet></ROW><ROW><id>1810060</id><snippet>authbind</snippet></ROW><ROW><id>1810086</id><snippet>import contextlib
import sys

@contextlib.contextmanager
def nostderr():
    savestderr = sys.stderr
    class Devnull(object):
        def write(self, _): pass
    sys.stderr = Devnull()
    yield
    sys.stderr = savestderr
</snippet></ROW><ROW><id>1810086</id><snippet>with nostderr():</snippet></ROW><ROW><id>1810121</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; print ast.literal_eval("(8, 12.25), (13, 15), (16.75, 18.5)")
((8, 12.25), (13, 15), (16.75, 18.5))
</snippet></ROW><ROW><id>1810453</id><snippet>x = time.struct_time(result[0])</snippet></ROW><ROW><id>1810453</id><snippet>struct_time</snippet></ROW><ROW><id>1810453</id><snippet>x.tm_mon</snippet></ROW><ROW><id>1810453</id><snippet>x.tm_mday</snippet></ROW><ROW><id>1810453</id><snippet>result[0]</snippet></ROW><ROW><id>1810453</id><snippet>struct_time</snippet></ROW><ROW><id>1810453</id><snippet>parsedatetime</snippet></ROW><ROW><id>1810509</id><snippet>.URL</snippet></ROW><ROW><id>1810509</id><snippet>[InternetShortcut]
URL=http://www.example.com/
OtherStuff=irrelevant
</snippet></ROW><ROW><id>1810509</id><snippet>.URL</snippet></ROW><ROW><id>1810509</id><snippet>ConfigParser</snippet></ROW><ROW><id>1810509</id><snippet>InternetShortcut</snippet></ROW><ROW><id>1810509</id><snippet>urllib</snippet></ROW><ROW><id>1810509</id><snippet>urllib2</snippet></ROW><ROW><id>1810509</id><snippet>from glob import glob
from urllib2 import urlopen
from ConfigParser import ConfigParser
from re import search

# I use RE here, you might consider BeautifulSoup because RE can be stupid
TITLE = r"&lt;title&gt;([^&lt;]+)&lt;/title&gt;"

result = []
for file in glob("*.url"):
    config = ConfigParser.ConfigParser()
    config.read(file)
    url = config.get("InternetShortcut", "URL")

    # Get the title
    page = urlopen(url).read()
    try: title = search(TITLE, page).groups()[0]
    except: title = "Couldn't find title"

    result.append((url, title))

for url, title in result:
    print "'%s' &lt;%s&gt;" % (title, url)
</snippet></ROW><ROW><id>1810549</id><snippet>__getattr__</snippet></ROW><ROW><id>1810549</id><snippet>__getattribute__</snippet></ROW><ROW><id>1810549</id><snippet>__getattribute__</snippet></ROW><ROW><id>1810549</id><snippet>self.product</snippet></ROW><ROW><id>1810549</id><snippet>__getattr__</snippet></ROW><ROW><id>1810561</id><snippet>m</snippet></ROW><ROW><id>1810561</id><snippet>m</snippet></ROW><ROW><id>1810561</id><snippet>two</snippet></ROW><ROW><id>1810561</id><snippet>c.one</snippet></ROW><ROW><id>1810561</id><snippet>c.two</snippet></ROW><ROW><id>1810561</id><snippet>two</snippet></ROW><ROW><id>1810561</id><snippet>two</snippet></ROW><ROW><id>1810561</id><snippet>TypeError: two() takes exactly 2 arguments (1 given)
</snippet></ROW><ROW><id>1810561</id><snippet>class C(object): pass
def one(a): return a
def two(a, b): return a+b
def bracketit(t): return '(%s)' % t

c = C()

for m in (one, two):
    def build_method(m):
        return (lambda self, *args, **kwargs:
            bracketit(m(*args, **kwargs)))
    method = build_method(m)
    setattr(C, m.__name__, method)

print c.one 
print c.two
print c.two(1, 2)
print c.one(1)
</snippet></ROW><ROW><id>1810580</id><snippet>.py</snippet></ROW><ROW><id>1810580</id><snippet>Python Launcher.app</snippet></ROW><ROW><id>1810580</id><snippet>.py</snippet></ROW><ROW><id>1810580</id><snippet>Get Info</snippet></ROW><ROW><id>1810580</id><snippet>py2app</snippet></ROW><ROW><id>1810580</id><snippet>AppleScript</snippet></ROW><ROW><id>1810580</id><snippet>/Applications/Utilities/AppleScript
Editor.app</snippet></ROW><ROW><id>1810580</id><snippet>/Applications/AppleScript/Script
Editor.app</snippet></ROW><ROW><id>1810580</id><snippet>do shell script "/path/to/python /path/to/script.py &amp;&gt; /dev/null &amp;"
</snippet></ROW><ROW><id>1810580</id><snippet>Save As..</snippet></ROW><ROW><id>1810580</id><snippet>File Format -&gt; Application</snippet></ROW><ROW><id>1810580</id><snippet>Automater.app</snippet></ROW><ROW><id>1810580</id><snippet>py2app</snippet></ROW><ROW><id>1810760</id><snippet>os.chdir</snippet></ROW><ROW><id>1810760</id><snippet>os.chdir(path)
</snippet></ROW><ROW><id>1810815</id><snippet>newFrameImage = cv.QueryFrame(ps3eye)

newFrameImage32F = cv.CreateImage((320, 240), cv.IPL_DEPTH_32F, 3)
cv.ConvertScale(newFrameImage,newFrameImage32F)

newFrameImageGS_32F = cv.CreateImage ((320,240), cv.IPL_DEPTH_32F, 1)
cv.CvtColor(newFrameImage32F,newFrameImageGS_32F,cv.CV_RGB2GRAY)

newFrameImageGS = cv.CreateImage ((320,240), cv.IPL_DEPTH_8U, 1)
cv.ConvertScale(newFrameImageGS_32F,newFrameImageGS)
</snippet></ROW><ROW><id>1810849</id><snippet>import urllib2
bio_page = urllib.urlopen(bio_url).read()
</snippet></ROW><ROW><id>1810985</id><snippet>form.fields['myuser'].queryset = User.objects.filter(groups__name='foo')
</snippet></ROW><ROW><id>1810985</id><snippet>qs = User.objects.filter(groups__name='foo')
print qs.query
</snippet></ROW><ROW><id>1811026</id><snippet>exp(-x)</snippet></ROW><ROW><id>1811026</id><snippet>P(x,y) = 1/(1 + exp(x-y))
</snippet></ROW><ROW><id>1811051</id><snippet>import re
from random import randint

def select(m):
    choices = m.group(1).split('|')
    return choices[randint(0, len(choices)-1)]

def spinner(s):
    r = re.compile('{([^{}]*)}')
    while True:
        s, n = r.subn(select, s)
        if n == 0: break
    return s.strip()
</snippet></ROW><ROW><id>1811051</id><snippet>subn</snippet></ROW><ROW><id>1811051</id><snippet>select()</snippet></ROW><ROW><id>1811051</id><snippet>random.choice()</snippet></ROW><ROW><id>1811051</id><snippet>r.subn(select, s, re.U)</snippet></ROW><ROW><id>1811051</id><snippet>s = u"{...}"</snippet></ROW><ROW><id>1811051</id><snippet>&gt;&gt;&gt; s = "{{Hello|Hi|Hey} {world|earth} | {Goodbye|farewell} {noobs|n3wbz|n00blets}}"
&gt;&gt;&gt; print spinner(s)
'farewell n3wbz'
</snippet></ROW><ROW><id>1811051</id><snippet>sub</snippet></ROW><ROW><id>1811051</id><snippet>subn</snippet></ROW><ROW><id>1811051</id><snippet>{([^{}]+)}</snippet></ROW><ROW><id>1811051</id><snippet>{([^{}]*)}</snippet></ROW><ROW><id>1811051</id><snippet>def spin(s):
    while True:
        s, n = re.subn('{([^{}]*)}',
                       lambda m: random.choice(m.group(1).split("|")),
                       s)
        if n == 0: break
    return s.strip()
</snippet></ROW><ROW><id>1811271</id><snippet>curl http://svn.python.org/view/*checkout*/python/trunk/Tools/scripts/redemo.py?content-type=text%2Fplain &gt; redemo.py
/usr/bin/python redemo.py
</snippet></ROW><ROW><id>1811475</id><snippet>links_list = char.getLinks(words)
for source_url in links_list:
     ...
</snippet></ROW><ROW><id>1811560</id><snippet>text = """\
12 items - Ironing Service    11 Mar 2009 to 10 Apr 2009
Washing service (3 Shirt)  23 Mar 2009"""

# using tok_period as defined in the OP

# parse each line separately
for tx in text.splitlines():
    print SkipTo(tok_period).parseString(tx)[0]

# or have pyparsing search through the whole input string using searchString
for [[td,_]] in SkipTo(tok_period,include=True).searchString(text):
    print td
</snippet></ROW><ROW><id>1811560</id><snippet>for</snippet></ROW><ROW><id>1811560</id><snippet>12 items - Ironing Service    
Washing service (3 Shirt)
</snippet></ROW><ROW><id>1811690</id><snippet>500x&lt;</snippet></ROW><ROW><id>1811745</id><snippet>os.chdir('C:/Documents\ and\ Settings/')</snippet></ROW><ROW><id>1811745</id><snippet>os.system</snippet></ROW><ROW><id>1811745</id><snippet>subprocess</snippet></ROW><ROW><id>1811745</id><snippet>.exe</snippet></ROW><ROW><id>1811869</id><snippet>port install</snippet></ROW><ROW><id>1811869</id><snippet>py-</snippet></ROW><ROW><id>1811869</id><snippet>py25-</snippet></ROW><ROW><id>1811869</id><snippet>py26-</snippet></ROW><ROW><id>1811869</id><snippet>py-cairo</snippet></ROW><ROW><id>1811869</id><snippet>py25-cairo</snippet></ROW><ROW><id>1811869</id><snippet>py26-cairo</snippet></ROW><ROW><id>1811869</id><snippet>py-cairo</snippet></ROW><ROW><id>1811869</id><snippet>/opt/local/bin/python2.4</snippet></ROW><ROW><id>1811869</id><snippet>sudo port install py26-cairo
</snippet></ROW><ROW><id>1811869</id><snippet>/opt/local/bin/python2.6</snippet></ROW><ROW><id>1811869</id><snippet>$PATH</snippet></ROW><ROW><id>1811869</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>1811869</id><snippet>sudo port uninstall py-cairo python24
</snippet></ROW><ROW><id>1812030</id><snippet>some_class(*os.path.split(somefile))
</snippet></ROW><ROW><id>1812263</id><snippet>import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class DefaultDict&lt;K, V&gt; extends HashMap&lt;K, V&gt; {

    Class&lt;V&gt; klass;
    public DefaultDict(Class klass) {
        this.klass = klass;    
    }

    @Override
    public V get(Object key) {
        V returnValue = super.get(key);
        if (returnValue == null) {
            try {
                returnValue = klass.newInstance();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
            this.put((K) key, returnValue);
        }
        return returnValue;
    }    
}
</snippet></ROW><ROW><id>1812263</id><snippet>public static void main(String[] args) {
    DefaultDict&lt;Integer, List&lt;Integer&gt;&gt; dict =
        new DefaultDict&lt;Integer, List&lt;Integer&gt;&gt;(ArrayList.class);
    dict.get(1).add(2);
    dict.get(1).add(3);
    System.out.println(dict);
}
</snippet></ROW><ROW><id>1812263</id><snippet>{1=[2, 3]}</snippet></ROW><ROW><id>1812326</id><snippet>truncate table product
</snippet></ROW><ROW><id>1812326</id><snippet>ALTER TABLE product AUTO_INCREMENT = 1
</snippet></ROW><ROW><id>1812326</id><snippet>SET insert_id;
INSERT INTO product ...;
</snippet></ROW><ROW><id>1812918</id><snippet>doc.replace(block, hilited)</snippet></ROW><ROW><id>1812918</id><snippet>block.text=hilited
</snippet></ROW><ROW><id>1812918</id><snippet>body=body.replace(block.text,hilited)
</snippet></ROW><ROW><id>1813167</id><snippet>def main():</snippet></ROW><ROW><id>1813167</id><snippet>tokenList</snippet></ROW><ROW><id>1813167</id><snippet>if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>1813167</id><snippet>cleanedInput</snippet></ROW><ROW><id>1813167</id><snippet>= []</snippet></ROW><ROW><id>1813167</id><snippet>+=</snippet></ROW><ROW><id>1813167</id><snippet>.append</snippet></ROW><ROW><id>1813167</id><snippet>''.join(cleanedInput)</snippet></ROW><ROW><id>1813167</id><snippet>O(N)</snippet></ROW><ROW><id>1813167</id><snippet>O(N squared)</snippet></ROW><ROW><id>1813167</id><snippet>continue</snippet></ROW><ROW><id>1813167</id><snippet>continue</snippet></ROW><ROW><id>1813167</id><snippet>continue</snippet></ROW><ROW><id>1813167</id><snippet>if diff</snippet></ROW><ROW><id>1813167</id><snippet>if</snippet></ROW><ROW><id>1813167</id><snippet>diff</snippet></ROW><ROW><id>1813167</id><snippet>foobar.py</snippet></ROW><ROW><id>1813167</id><snippet>site-packages</snippet></ROW><ROW><id>1813167</id><snippet>sys.path</snippet></ROW><ROW><id>1813167</id><snippet>def token_of(line):
  return line.partition(':')[-1].strip()

class FileParser(object):
  def __init__(self, filename):
    self.tokenList = open(filename, 'r')

  def cleaned_input(self):
    cleanedInput = []
    prevLine = 0

    for line in self.tokenList:
        if line.startswith('LINE:'):
            lineNo = int(token_of(line))
            diff = lineNo - prevLine - 1
            cleanedInput.append('\n' * (diff if diff&gt;1 else diff+1))
            prevLine = lineNo
        else:
            cleanedLine = token_of(line)
            cleanedInput.append(cleanedLine + ' ')

    return cleanedInput
</snippet></ROW><ROW><id>1813167</id><snippet>import sys
import foobar

def main():
    thefile = foobar.FileParser(sys.argv[1])
    print thefile.cleaned_input()

if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>1813270</id><snippet>DNS_RECORD</snippet></ROW><ROW><id>1813270</id><snippet>POINTER(DNS_RECORD)()</snippet></ROW><ROW><id>1813270</id><snippet>ctypes.byref(rr)</snippet></ROW><ROW><id>1813270</id><snippet>server_arr</snippet></ROW><ROW><id>1813270</id><snippet>0x00000001</snippet></ROW><ROW><id>1813270</id><snippet>AddrCount</snippet></ROW><ROW><id>1813270</id><snippet>server_arr</snippet></ROW><ROW><id>1813338</id><snippet>cfg_path</snippet></ROW><ROW><id>1813338</id><snippet>os.path.dirname</snippet></ROW><ROW><id>1813338</id><snippet>cfg_path</snippet></ROW><ROW><id>1813338</id><snippet>execfile</snippet></ROW><ROW><id>1813338</id><snippet>compile</snippet></ROW><ROW><id>1813338</id><snippet>exec</snippet></ROW><ROW><id>1813338</id><snippet>execfile</snippet></ROW><ROW><id>1813338</id><snippet>import os

def makeascript(where):
  f = open(where, 'w')
  f.write('import os\nprint "Dir in file:", os.getcwd()\n')
  f.close()

def main():
  where = '/tmp/bah.py'
  makeascript(where)
  execfile(where)
  os.chdir('/tmp')
  execfile(where)

if __name__ == '__main__':
  main()
</snippet></ROW><ROW><id>1813338</id><snippet>Dir in file: /Users/aleax/stko
Dir in file: /private/tmp
</snippet></ROW><ROW><id>1813338</id><snippet>execfile</snippet></ROW><ROW><id>1813338</id><snippet>execfile</snippet></ROW><ROW><id>1813338</id><snippet>execfile</snippet></ROW><ROW><id>1813476</id><snippet>d[list[i]] = 1
</snippet></ROW><ROW><id>1813476</id><snippet>def RemoveDuplicates(l):
    return list(set(l))
</snippet></ROW><ROW><id>1813768</id><snippet>query = Q()
for search in (prefs.address1, prefs.address2):
    if search:
        query |= Q(title__icontains=search)
results = Stores.objects.filter(query)
</snippet></ROW><ROW><id>1813893</id><snippet>import subprocess

def launchWithoutConsole(command, args):
    """Launches 'command' windowless and waits until finished"""
    startupinfo = subprocess.STARTUPINFO()
    startupinfo.dwFlags |= subprocess.STARTF_USESHOWWINDOW
    return subprocess.Popen([command] + args, startupinfo=startupinfo).wait()

if __name__ == "__main__":
    # test with "pythonw.exe"
    launchWithoutConsole("d:\\bin\\gzip.exe", ["-d", "myfile.gz"])
</snippet></ROW><ROW><id>1813972</id><snippet>--delete-excluded</snippet></ROW><ROW><id>1813972</id><snippet>rsync -r --include-from=&lt;patternlistfile&gt; --exclude=* --delete-excluded / dest/
</snippet></ROW><ROW><id>1813972</id><snippet>*</snippet></ROW><ROW><id>1813972</id><snippet>?</snippet></ROW><ROW><id>1813972</id><snippet>[</snippet></ROW><ROW><id>1813972</id><snippet>re.sub("([[*?])", r"\\\1", "abc[def*ghi?klm")
</snippet></ROW><ROW><id>1813972</id><snippet>--files-from</snippet></ROW><ROW><id>1813972</id><snippet>rsync</snippet></ROW><ROW><id>1813972</id><snippet>/some/dir</snippet></ROW><ROW><id>1813972</id><snippet>/some/other/dir</snippet></ROW><ROW><id>1813972</id><snippet>/some/
/some/dir/
/some/dir/file1
/some/dir/file2
/some/other/
/some/other/dir/
/some/other/dir/file3
...
</snippet></ROW><ROW><id>1813972</id><snippet>rsync -r --include-from=&lt;patternlistfile&gt; --exclude=* --delete-excluded /some/dir/ dest/
</snippet></ROW><ROW><id>1813972</id><snippet>/file1
/file2
</snippet></ROW><ROW><id>1813972</id><snippet>/**/
</snippet></ROW><ROW><id>1813972</id><snippet>dest/</snippet></ROW><ROW><id>1813972</id><snippet>-m</snippet></ROW><ROW><id>1813972</id><snippet>rsync -m -r --delete-excluded --include-from=&lt;patternfile&gt; --exclude=* / dest/
</snippet></ROW><ROW><id>1813972</id><snippet>/**/
/some/dir/file1
/some/other/dir/file3
</snippet></ROW><ROW><id>1814058</id><snippet>import urllib
html = urllib.urlopen(pageToLawyersBio)

htmlstr=''
for line in html.readlines():
    htmlstr += line.lower()

for school in listOfSchools:
    if school.lower() in htmlstr:
        print "This lawyer went to", school
</snippet></ROW><ROW><id>1814068</id><snippet>SESSION_COOKIE_NAME</snippet></ROW><ROW><id>1814068</id><snippet>SESSION_COOKIE_NAME</snippet></ROW><ROW><id>1814070</id><snippet>f1 :: IO ()
f1 = let x = 77
         f2 = print x
     in f2

main :: IO ()
main = f1
</snippet></ROW><ROW><id>1814070</id><snippet>f1 :: Int
f1 = let f2 = x
         x = 77
     in f2

main :: IO ()
main = print f1
</snippet></ROW><ROW><id>1814099</id><snippet>import os
os.umask(077) # Only keep rights for owner
import test
</snippet></ROW><ROW><id>1814099</id><snippet>$&gt; ls -l test.py*
-rw-r--r-- 1 shad users  0 2009-11-29 00:15 test.py
-rw------- 1 shad users 94 2009-11-29 00:15 test.pyc
</snippet></ROW><ROW><id>1814164</id><snippet>class Subthing(models.Model):
    ...
    thing = models.ForeignKey(Thing, related_name='subthings')
    ...
</snippet></ROW><ROW><id>1814164</id><snippet>Q(subthings__main=True) &amp; Q(subthings__subproperty=filter['value'])
</snippet></ROW><ROW><id>1814266</id><snippet>def listEventsSummary(request):
    listEventsSummary = Event.objects.all().order_by('-id')[:20]
    return render_to_response('stuff.html',{'events':listEventsSummary})
</snippet></ROW><ROW><id>1814266</id><snippet>{% for event in events %}
    &lt;p&gt;{{event.date}} and whatever else...&lt;/p&gt;
{% endfor %}
</snippet></ROW><ROW><id>1814489</id><snippet># get all the items
matches = re.findall(r'\w+=".+?"', s) + re.findall(r'\w+=[\d.]+',s)

# partition each match at '='
matches = [m.group().split('=', 1) for m in matches]

# use results to make a dict
d = dict(matches)
</snippet></ROW><ROW><id>1814588</id><snippet>rfile.close()</snippet></ROW><ROW><id>1814658</id><snippet>twisted.internet.fdesc.readFromFD</snippet></ROW><ROW><id>1814658</id><snippet>IReactorFDSet</snippet></ROW><ROW><id>1814658</id><snippet>addReader</snippet></ROW><ROW><id>1814658</id><snippet>ITransport</snippet></ROW><ROW><id>1814658</id><snippet>write</snippet></ROW><ROW><id>1814658</id><snippet>tail -f</snippet></ROW><ROW><id>1814658</id><snippet>IProtocol</snippet></ROW><ROW><id>1814658</id><snippet>IProtocol.dataReceived</snippet></ROW><ROW><id>1814658</id><snippet>ITransport</snippet></ROW><ROW><id>1814658</id><snippet>reactor.connectWith</snippet></ROW><ROW><id>1814658</id><snippet>addReader</snippet></ROW><ROW><id>1814658</id><snippet>connectionLost</snippet></ROW><ROW><id>1814658</id><snippet>IFileDescriptor</snippet></ROW><ROW><id>1814710</id><snippet>days = set( Post.objects.filter(user=TARGET).values_list("log_date", flat=True) )
curr = min(days)
while curr &lt;= date.today():
    print curr,
    if curr not in days:
        print "NO ENTRY",
    print
    curr += timedelta(days=1)
</snippet></ROW><ROW><id>1815025</id><snippet>MMM = int(math.log(i, 10)) + 1
</snippet></ROW><ROW><id>1815025</id><snippet>&gt;&gt;&gt; int(math.log(1000000, 10)) + 1
6
&gt;&gt;&gt; int(math.log(1000001, 10)) + 1
7
</snippet></ROW><ROW><id>1815025</id><snippet>&gt;&gt;&gt; len(str(1000000))
7
&gt;&gt;&gt; len(str(1000001))
7
</snippet></ROW><ROW><id>1815025</id><snippet>&gt;&gt;&gt; int(math.log10(10000000))
7
&gt;&gt;&gt; int(math.log10(10000001))
7
&gt;&gt;&gt; int(math.log10(10**1000))
1000
&gt;&gt;&gt; int(math.log10(10**10000))
10000
&gt;&gt;&gt; int(math.log10(10**100000))
100000
</snippet></ROW><ROW><id>1815025</id><snippet>math.log10</snippet></ROW><ROW><id>1815025</id><snippet>math.log(x, 10)</snippet></ROW><ROW><id>1815269</id><snippet>&gt;&gt;&gt; L = [('ba',4), ('hh',5), ('gg', 25)]
&gt;&gt;&gt; [ i for i,l in enumerate(L) if l[0] == 'hh' ][0]
1
</snippet></ROW><ROW><id>1815269</id><snippet>IndexError</snippet></ROW><ROW><id>1815269</id><snippet>&gt;&gt;&gt; L = [('ba',4), ('hh',5), ('gg', 25)]
&gt;&gt;&gt; sorted(L, key=lambda x: x[1])
[('ba', 4), ('hh', 5), ('gg', 25)]
</snippet></ROW><ROW><id>1815319</id><snippet>join</snippet></ROW><ROW><id>1815319</id><snippet>&gt;&gt;&gt; e = ('ham', 5, 1, 'bird')
&gt;&gt;&gt; ','.join(map(str,e))
'ham,5,1,bird'
</snippet></ROW><ROW><id>1815319</id><snippet>&gt;&gt;&gt; ','.join(str(i) for i in e)
'ham,5,1,bird'
</snippet></ROW><ROW><id>1815535</id><snippet>subprocess.check_call</snippet></ROW><ROW><id>1815535</id><snippet>os.system</snippet></ROW><ROW><id>1815535</id><snippet>import subprocess


if __name__=="__main__":
    cmd = 'convert -font somefont.ttf -size 50x50'.split()
    #XXX command arguments are invalid 
    subprocess.check_call(cmd + ['-label', unichr(9635), 'output.png'])
</snippet></ROW><ROW><id>1815541</id><snippet>sorted</snippet></ROW><ROW><id>1815541</id><snippet>new_list = sorted(statlist, key=lambda x: int(x[1]))
</snippet></ROW><ROW><id>1815715</id><snippet>import inspect
PROVIDER_CHOICES = inspect.getmembers(Foo, lambda x: isinstance(x, int))
</snippet></ROW><ROW><id>1815715</id><snippet>PROVIDER_CHOICES.sort(key=...)</snippet></ROW><ROW><id>1815715</id><snippet>getmembers</snippet></ROW><ROW><id>1815715</id><snippet>sorted</snippet></ROW><ROW><id>1815773</id><snippet>logging</snippet></ROW><ROW><id>1815773</id><snippet>QUIET</snippet></ROW><ROW><id>1815773</id><snippet>QUIET</snippet></ROW><ROW><id>1815773</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>1815773</id><snippet>print = logging.info
logging.basicConfig(level=logging.WARNING if QUIET else logging.INFO,
                    format="%(message)s")
</snippet></ROW><ROW><id>1815773</id><snippet>--quiet</snippet></ROW><ROW><id>1815773</id><snippet>iprint</snippet></ROW><ROW><id>1815773</id><snippet>iprint = logging.warning
</snippet></ROW><ROW><id>1816305</id><snippet>xpath()</snippet></ROW><ROW><id>1816305</id><snippet>lxml</snippet></ROW><ROW><id>1816305</id><snippet>&gt;&gt;&gt; from lxml import etree
&gt;&gt;&gt; from StringIO import StringIO
&gt;&gt;&gt; def node_text(n):
        try:
            return etree.tostring(n, method='html', with_tail=False)
        except TypeError:
            return str(n)

&gt;&gt;&gt; f = StringIO('&lt;strings&gt;&lt;string&gt;This is &lt;b&gt;not&lt;/b&gt; how I plan to escape.&lt;/string&gt;&lt;/strings&gt;')
&gt;&gt;&gt; x = etree.parse(f)
&gt;&gt;&gt; ''.join(node_text(n) for n in x.xpath('/strings/string/node()'))
'This is &lt;b&gt;not&lt;/b&gt; how I plan to escape.'
</snippet></ROW><ROW><id>1816464</id><snippet>def foo():
    print('bar')
</snippet></ROW><ROW><id>1816464</id><snippet>&gt;&gt;&gt; import test
&gt;&gt;&gt; test.foo()
bar
</snippet></ROW><ROW><id>1816464</id><snippet>def foo():
    print('baz')

&gt;&gt;&gt; reload(test)
&lt;module 'test' from '/home/unutbu/pybin/test.py'&gt;
&gt;&gt;&gt; test.foo()
baz
</snippet></ROW><ROW><id>1816495</id><snippet>_pyAAC.pyd</snippet></ROW><ROW><id>1816495</id><snippet>MemoryLoadLibrary</snippet></ROW><ROW><id>1816648</id><snippet>__slots__</snippet></ROW><ROW><id>1816648</id><snippet>&gt;&gt;&gt; class NoSlots(object): pass
... 
&gt;&gt;&gt; n = NoSlots()
&gt;&gt;&gt; class WithSlots(object): __slots__ = 'a', 'b', 'c'
... 
&gt;&gt;&gt; w = WithSlots()
&gt;&gt;&gt; n.a = n.b = n.c = 23
&gt;&gt;&gt; w.a = w.b = w.c = 23
&gt;&gt;&gt; sys.getsizeof(n)
32
&gt;&gt;&gt; sys.getsizeof(w)
36
</snippet></ROW><ROW><id>1816648</id><snippet>sys.getsizeof</snippet></ROW><ROW><id>1816648</id><snippet>&gt;&gt;&gt; sys.getsizeof(n.__dict__)
140
</snippet></ROW><ROW><id>1816648</id><snippet>n</snippet></ROW><ROW><id>1816648</id><snippet>&gt;&gt;&gt; import pympler.asizeof
&gt;&gt;&gt; pympler.asizeof.asizeof(w)
96
&gt;&gt;&gt; pympler.asizeof.asizeof(n)
288
</snippet></ROW><ROW><id>1816648</id><snippet>__slots__</snippet></ROW><ROW><id>1816648</id><snippet>__slots__</snippet></ROW><ROW><id>1816648</id><snippet>__slots__</snippet></ROW><ROW><id>1816648</id><snippet>$ python -mtimeit -s'class S(object): __slots__="x","y"' -s's=S(); s.x=s.y=23' 's.x'
10000000 loops, best of 3: 0.37 usec per loop
$ python -mtimeit -s'class S(object): pass' -s's=S(); s.x=s.y=23' 's.x'
1000000 loops, best of 3: 0.604 usec per loop
$ python -mtimeit -s'class S(object): __slots__="x","y"' -s's=S(); s.x=s.y=23' 's.x=45'
1000000 loops, best of 3: 0.28 usec per loop
$ python -mtimeit -s'class S(object): pass' -s's=S(); s.x=s.y=23' 's.x=45'
1000000 loops, best of 3: 0.332 usec per loop
</snippet></ROW><ROW><id>1816648</id><snippet>__slots__</snippet></ROW><ROW><id>1816648</id><snippet>__slots__</snippet></ROW><ROW><id>1816648</id><snippet>&gt;&gt;&gt; class A(object): __slots__='a'
... 
&gt;&gt;&gt; class AB(A): __slots__='b'
... 
&gt;&gt;&gt; ab=AB()
&gt;&gt;&gt; ab.a = ab.b = 23
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1816648</id><snippet>a</snippet></ROW><ROW><id>1816648</id><snippet>AB</snippet></ROW><ROW><id>1816648</id><snippet>AB</snippet></ROW><ROW><id>1816648</id><snippet>b</snippet></ROW><ROW><id>1816648</id><snippet>a</snippet></ROW><ROW><id>1816648</id><snippet>A</snippet></ROW><ROW><id>1816648</id><snippet>&gt;&gt;&gt; class ABRed(A): __slots__='a','b'
... 
&gt;&gt;&gt; abr=ABRed()
&gt;&gt;&gt; abr.a = abr.b = 23
</snippet></ROW><ROW><id>1816648</id><snippet>&gt;&gt;&gt; pympler.asizeof.asizeof(ab)
88
&gt;&gt;&gt; pympler.asizeof.asizeof(abr)
96
</snippet></ROW><ROW><id>1816718</id><snippet>sel = selenium('localhost', 4444, browser, my_url)
html = sel.get_eval("this.browserbot.getCurrentWindow().document.getElementById('1').innerHTML")
</snippet></ROW><ROW><id>1816816</id><snippet>photos = Photo.gql('ORDER BY __key__')
</snippet></ROW><ROW><id>1816816</id><snippet>photo = Photo(key_name="xzy123")
photo.put()
</snippet></ROW><ROW><id>1816816</id><snippet>photos = [ Photo(key_name="%s" % id) ]
</snippet></ROW><ROW><id>1816816</id><snippet>http://host/b/img/ahByY...</snippet></ROW><ROW><id>1816816</id><snippet>class ViewPage(webapp.RequestHandler):
  def get(self, id):
    photos = [ db.get(id) ]
    ...
</snippet></ROW><ROW><id>1816821</id><snippet>from pyparsing import makeHTMLTags, withAttribute, SkipTo
import urllib

# get the HTML from your URL
url = "http://www.whitecase.com/Attorneys/List.aspx?LastName=&amp;FirstName="
page = urllib.urlopen(url)
html = page.read()
page.close()

# define opening and closing tag expressions for &lt;td&gt; and &lt;a&gt; tags
# (makeHTMLTags also comprehends tag variations, including attributes, 
# upper/lower case, etc.)
tdStart,tdEnd = makeHTMLTags("td")
aStart,aEnd = makeHTMLTags("a")

# only interested in tdStarts if they have "class=altRow" attribute
tdStart.setParseAction(withAttribute(("class","altRow")))

# compose total matching pattern (add trailing tdStart to filter out 
# extraneous &lt;td&gt; matches)
patt = tdStart + aStart("a") + SkipTo(aEnd)("text") + aEnd + tdEnd + tdStart

# scan input HTML source for matching refs, and print out the text and 
# href values
for ref,s,e in patt.scanString(html):
    print ref.text, ref.a.href
</snippet></ROW><ROW><id>1816821</id><snippet>Abel, Christian /cabel
Acevedo, Linda Jeannine /jacevedo
AcuÃ±a, Jennifer /jacuna
Adeyemi, Ike /igbadegesin
Adler, Avraham /aadler
...
Zhu, Jie /jzhu
ZÃ­dek, AleÅ¡ /azidek
ZiÃ³Å‚ek, Agnieszka /aziolek
Zitter, Adam /azitter
Zupikova, Jana /jzupikova
</snippet></ROW><ROW><id>1816897</id><snippet>csvwriter.writerow([JD])
</snippet></ROW><ROW><id>1816961</id><snippet>spam</snippet></ROW><ROW><id>1816961</id><snippet>myiter(int)</snippet></ROW><ROW><id>1816961</id><snippet>import spam
for i in spam.myiter(10):
    print i
</snippet></ROW><ROW><id>1816961</id><snippet>__iter__()</snippet></ROW><ROW><id>1816961</id><snippet>next()</snippet></ROW><ROW><id>1816961</id><snippet>StopIteration</snippet></ROW><ROW><id>1816961</id><snippet>__iter()__</snippet></ROW><ROW><id>1816961</id><snippet>typedef struct {
  PyObject_HEAD
  long int m;
  long int i;
} spam_MyIter;
</snippet></ROW><ROW><id>1816961</id><snippet>__iter__()</snippet></ROW><ROW><id>1816961</id><snippet>self</snippet></ROW><ROW><id>1816961</id><snippet>for ... in ...</snippet></ROW><ROW><id>1816961</id><snippet>PyObject* spam_MyIter_iter(PyObject *self)
{
  Py_INCREF(self);
  return self;
}
</snippet></ROW><ROW><id>1816961</id><snippet>next()</snippet></ROW><ROW><id>1816961</id><snippet>PyObject* spam_MyIter_iternext(PyObject *self)
{
  spam_MyIter *p = (spam_MyIter *)self;
  if (p-&gt;i &lt; p-&gt;m) {
    PyObject *tmp = Py_BuildValue("l", p-&gt;i);
    (p-&gt;i)++;
    return tmp;
  } else {
    /* Raising of standard StopIteration exception with empty value. */
    PyErr_SetNone(PyExc_StopIteration);
    return NULL;
  }
}
</snippet></ROW><ROW><id>1816961</id><snippet>PyTypeObject</snippet></ROW><ROW><id>1816961</id><snippet>__iter__()</snippet></ROW><ROW><id>1816961</id><snippet>next()</snippet></ROW><ROW><id>1816961</id><snippet>static PyTypeObject spam_MyIterType = {
    PyObject_HEAD_INIT(NULL)
    0,                         /*ob_size*/
    "spam._MyIter",            /*tp_name*/
    sizeof(spam_MyIter),       /*tp_basicsize*/
    0,                         /*tp_itemsize*/
    0,                         /*tp_dealloc*/
    0,                         /*tp_print*/
    0,                         /*tp_getattr*/
    0,                         /*tp_setattr*/
    0,                         /*tp_compare*/
    0,                         /*tp_repr*/
    0,                         /*tp_as_number*/
    0,                         /*tp_as_sequence*/
    0,                         /*tp_as_mapping*/
    0,                         /*tp_hash */
    0,                         /*tp_call*/
    0,                         /*tp_str*/
    0,                         /*tp_getattro*/
    0,                         /*tp_setattro*/
    0,                         /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_ITER,
      /* tp_flags: Py_TPFLAGS_HAVE_ITER tells python to
         use tp_iter and tp_iternext fields. */
    "Internal myiter iterator object.",           /* tp_doc */
    0,  /* tp_traverse */
    0,  /* tp_clear */
    0,  /* tp_richcompare */
    0,  /* tp_weaklistoffset */
    spam_MyIter_iter,  /* tp_iter: __iter__() method */
    spam_MyIter_iternext  /* tp_iternext: next() method */
};
</snippet></ROW><ROW><id>1816961</id><snippet>myiter(int)</snippet></ROW><ROW><id>1816961</id><snippet>static PyObject *
spam_myiter(PyObject *self, PyObject *args)
{
  long int m;
  spam_MyIter *p;

  if (!PyArg_ParseTuple(args, "l", &amp;m))  return NULL;

  /* I don't need python callable __init__() method for this iterator,
     so I'll simply allocate it as PyObject and initialize it by hand. */

  p = PyObject_New(spam_MyIter, &amp;spam_MyIterType);
  if (!p) return NULL;

  /* I'm not sure if it's strictly necessary. */
  if (!PyObject_Init((PyObject *)p, &amp;spam_MyIterType)) {
    Py_DECREF(p);
    return NULL;
  }

  p-&gt;m = m;
  p-&gt;i = 0;
  return (PyObject *)p;
}
</snippet></ROW><ROW><id>1816961</id><snippet>static PyMethodDef SpamMethods[] = {
    {"myiter",  spam_myiter, METH_VARARGS, "Iterate from i=0 while i&lt;m."},
    {NULL, NULL, 0, NULL}        /* Sentinel */
};

PyMODINIT_FUNC
initspam(void)
{
  PyObject* m;

  spam_MyIterType.tp_new = PyType_GenericNew;
  if (PyType_Ready(&amp;spam_MyIterType) &lt; 0)  return;

  m = Py_InitModule("spam", SpamMethods);

  Py_INCREF(&amp;spam_MyIterType);
  PyModule_AddObject(m, "_MyIter", (PyObject *)&amp;spam_MyIterType);
}
</snippet></ROW><ROW><id>1816969</id><snippet>copy_reg</snippet></ROW><ROW><id>1817003</id><snippet>Farm.objects.filter(tree__in=TreeQuerySet)
</snippet></ROW><ROW><id>1817081</id><snippet>r</snippet></ROW><ROW><id>1817153</id><snippet>x = 0
y = 0

def someFunc():
  dosomethingwithconstants(x,y)
</snippet></ROW><ROW><id>1817153</id><snippet>from MyModWithConstants import x
# and also we can do
import MyModWithConstants as MMWC

def somOtherFunc():
  dosomethingNew(x, MMWC.y)  
  ## x and MMWC.y both refer to things in the other file
</snippet></ROW><ROW><id>1817178</id><snippet>## concurrence/database/mysql/client.py ##

client_caps = server_caps 

#always turn off compression
client_caps &amp;= ~CAPS.COMPRESS
</snippet></ROW><ROW><id>1817178</id><snippet>CLIENT_NO_SCHEMA   16	/* Don't allow database.table.column */</snippet></ROW><ROW><id>1817178</id><snippet>client_caps &amp;= ~CAPS.NO_SCHEMA</snippet></ROW><ROW><id>1817242</id><snippet>do_something</snippet></ROW><ROW><id>1817242</id><snippet>&gt;&gt;&gt; class A(object):
...     def do_something(cls):
...         print cls
... #   do_something = classmethod(do_something)
... 
&gt;&gt;&gt; class B(A):
...     def do_something(cls):
...         super(B, cls).do_something()
...     do_something = classmethod(do_something)
... 
&gt;&gt;&gt; B().do_something()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 3, in do_something
TypeError: unbound method do_something() must be called with B instance as first argument (got nothing instead)
</snippet></ROW><ROW><id>1817314</id><snippet>tbody</snippet></ROW><ROW><id>1817314</id><snippet>table</snippet></ROW><ROW><id>1817314</id><snippet>tbody</snippet></ROW><ROW><id>1817314</id><snippet># locate the table containing a cell with the given text
owner = re.compile('Owner Name')
cell = soup.find(text=owner).parent
while cell.name != 'table': cell = cell.parent
# print all non-empty strings in the table (except for the given text)
for x in cell.findAll(text=lambda x: x.strip() and not owner.match(x)):
  print x
</snippet></ROW><ROW><id>1817314</id><snippet>owner</snippet></ROW><ROW><id>1817785</id><snippet>from functools import reduce
</snippet></ROW><ROW><id>1817852</id><snippet>HTTPError</snippet></ROW><ROW><id>1817852</id><snippet>for l in bios:
    OpenThisLink = url + l
    try:
        response = urllib2.urlopen(OpenThisLink)
    except urllib2.HTTPError:
        pass
</snippet></ROW><ROW><id>1817852</id><snippet>for l in bios:
    OpenThisLink = url + l
    try:
        response = urllib2.urlopen(OpenThisLink)
    except urllib2.HTTPError as e:
        raise Exception('Error opening %s: %s' % (e.geturl(), e))
</snippet></ROW><ROW><id>1817910</id><snippet>Iterate over each element in the list
  Unpack the element (which is also a list) into its fields
  Generate a SQL line from these fields
</snippet></ROW><ROW><id>1817910</id><snippet>list = [
    ['11', ' 0', " 'MMB'", " '2 MB INTERNATIONAL'", ' NULL', ' NULL', ' 0'], 
    ['12', ' 0', " '3D STRUCTURES'", " '3D STRUCTURES'", ' NULL', ' NULL', ' 0'],
    ['13', ' 0', " '2 STRUCTURES'", " '2D STRUCTURES'", ' NULL', ' NULL', ' 0']]

for elem in list:
    print 'INSERT INTO \'Tbl_ABS\' VALUES (%s, %s, %s, %s, %s, %s, %s)' % tuple(elem)
</snippet></ROW><ROW><id>1817914</id><snippet>s/-lreadline/-ledit/</snippet></ROW><ROW><id>1818038</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; t0 = datetime.datetime(2009,10,27,15,33,0)
&gt;&gt;&gt; t1 = datetime.datetime(2009,10,31,10,5,0)
&gt;&gt;&gt; t1-t0
datetime.timedelta(3, 66720)
&gt;&gt;&gt; secs = 3 * 24 * 60 * 60 + 66720
&gt;&gt;&gt; secs
325920
</snippet></ROW><ROW><id>1818038</id><snippet>&gt;&gt;&gt; 12901417500 - 1290191580
325920
</snippet></ROW><ROW><id>1818038</id><snippet>&gt;&gt;&gt; m1 = 12901417500
&gt;&gt;&gt; days, seconds = divmod(m1, 60*60*24)
&gt;&gt;&gt; epoch = t1 - datetime.timedelta(days, seconds)
&gt;&gt;&gt; epoch
datetime.datetime(1601, 1, 1, 11, 0)
</snippet></ROW><ROW><id>1818038</id><snippet>VF_FILETIME (UTC)</snippet></ROW><ROW><id>1818038</id><snippet>VT_FILETIME</snippet></ROW><ROW><id>1818038</id><snippet>OleFileIO_PL</snippet></ROW><ROW><id>1818038</id><snippet>    elif type == VT_FILETIME:
        value = long(i32(s, offset+4)) + (long(i32(s, offset+8))&lt;&lt;32)
        # FIXME: this is a 64-bit int: "number of 100ns periods
        # since Jan 1,1601".  Should map this to Python time
        value = value / 10000000L # seconds
</snippet></ROW><ROW><id>1818067</id><snippet>2009-11-29T14:33:59-0600</snippet></ROW><ROW><id>1818067</id><snippet>2009-11-29T14:33:59-06:00</snippet></ROW><ROW><id>1818067</id><snippet>django/utils/dateformat.py</snippet></ROW><ROW><id>1818067</id><snippet>  def O(self):
    "Difference to Greenwich time in hours; e.g. '+0200'"
    seconds = self.Z()
    return u"%+03d%02d" % (seconds // 3600, (seconds // 60) % 60)
</snippet></ROW><ROW><id>1818067</id><snippet>return u"%+03d:%02d" % (seconds // 3600, (seconds // 60) % 60)</snippet></ROW><ROW><id>1818067</id><snippet>&gt;&gt;&gt; from django.utils import dateformat
&gt;&gt;&gt; fmt = "Y-m-d\TH:i:sO"
&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; now
datetime.datetime(2009, 12, 1, 12, 39, 48, 655867)
&gt;&gt;&gt; str = dateformat.format(now, fmt)
&gt;&gt;&gt; print str
2009-12-01T12:39:48+0000
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1818067</id><snippet>&gt;&gt;&gt; s = str[:-2] + ':' + str[-2:]
&gt;&gt;&gt; s
u'2009-12-01T12:39:48+00:00'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1818240</id><snippet>__unicode__()</snippet></ROW><ROW><id>1818240</id><snippet>__unicode__()</snippet></ROW><ROW><id>1818240</id><snippet>unicode()</snippet></ROW><ROW><id>1818240</id><snippet>__unicode__()</snippet></ROW><ROW><id>1818483</id><snippet>cursor.nextset()</snippet></ROW><ROW><id>1818483</id><snippet>SELECT ... FOR UPDATE</snippet></ROW><ROW><id>1818483</id><snippet>UPDATE SET in_use=1 ...</snippet></ROW><ROW><id>1818483</id><snippet>COMMIT</snippet></ROW><ROW><id>1818483</id><snippet>execute()</snippet></ROW><ROW><id>1818483</id><snippet>in_use</snippet></ROW><ROW><id>1818639</id><snippet>re.compile(pattern[, flags])</snippet></ROW><ROW><id>1818798</id><snippet>l1 = [1,2,3]
l2 = [4,5,6]

newl = []
for item1, item2 in zip(reversed(l1), reversed(l2)):
    newl.append(item1)
    newl.append(item2)

print newl
</snippet></ROW><ROW><id>1818902</id><snippet>from subprocess import Popen
p = Popen("batchfile.bat", cwd=r"c:\directory\containing\batchfile")
stdout, stderr = p.communicate()
</snippet></ROW><ROW><id>1818902</id><snippet>p = Popen(r'"C:\Program Files\Systems\Emb Work 5.4\common\bin\run" "C:\Program Files\Systems\Emb Work 5.4\arm\bin\mpr.dll" ... ...', cwd=r"...")
</snippet></ROW><ROW><id>1818902</id><snippet>p = Popen([r"C:\Program Files\Systems\Emb Work 5.4\common\bin\run", r"C:\Program Files\Systems\Emb Work 5.4\arm\bin\mpr.dll", ...], cwd=r"...")
# ... notice how you don't need to quote the elements containing spaces
</snippet></ROW><ROW><id>1818902</id><snippet>list2cmdline()</snippet></ROW><ROW><id>1818902</id><snippet>subprocess.list2cmdline()</snippet></ROW><ROW><id>1818902</id><snippet>testparams.py</snippet></ROW><ROW><id>1818902</id><snippet>import subprocess
params = [r"C:\Program Files\Systems\Emb Work 5.4\common\bin\run.exe", ...]
print subprocess.list2cmdline(params)
</snippet></ROW><ROW><id>1818902</id><snippet>python testparams.py</snippet></ROW><ROW><id>1819109</id><snippet>None</snippet></ROW><ROW><id>1819109</id><snippet>log_exception()</snippet></ROW><ROW><id>1819109</id><snippet>process_exception</snippet></ROW><ROW><id>1819109</id><snippet>class MyExceptionMiddleware:

    def process_exception(self, request, exception):
        #Do your logging here
</snippet></ROW><ROW><id>1819109</id><snippet>exception()</snippet></ROW><ROW><id>1819109</id><snippet>error()</snippet></ROW><ROW><id>1819334</id><snippet>*.pth</snippet></ROW><ROW><id>1819395</id><snippet>&gt;&gt;&gt; def whatever():
...     pass
...
&gt;&gt;&gt; whatever
&lt;function whatever at 0x00AF5F30&gt;
</snippet></ROW><ROW><id>1819395</id><snippet>def</snippet></ROW><ROW><id>1819395</id><snippet>&gt;&gt;&gt; whatever.func_name
'whatever'
</snippet></ROW><ROW><id>1819395</id><snippet>whatever()</snippet></ROW><ROW><id>1819395</id><snippet>file.py</snippet></ROW><ROW><id>1819395</id><snippet>whatever</snippet></ROW><ROW><id>1819395</id><snippet>file.py</snippet></ROW><ROW><id>1819395</id><snippet>&gt;&gt;&gt; globals()
{'__builtins__': &lt;module '__builtin__' (built-in)&gt;, '__name__': '__main__', '__d
oc__': None, 'whatever': &lt;function whatever at 0x00AF5EB0&gt;}
</snippet></ROW><ROW><id>1819395</id><snippet>whatever</snippet></ROW><ROW><id>1819395</id><snippet>&gt;&gt;&gt; whatever
&lt;function whatever at 0x00AF5F30&gt;
&gt;&gt;&gt; whatever = "string"
&gt;&gt;&gt; whatever
'string'
</snippet></ROW><ROW><id>1819395</id><snippet>&gt;&gt;&gt; somelambda = lambda x: x * 2
&gt;&gt;&gt; somelambda
&lt;function &lt;lambda&gt; at 0x00AF5F30&gt;
</snippet></ROW><ROW><id>1819395</id><snippet>self</snippet></ROW><ROW><id>1819395</id><snippet>SomeClass</snippet></ROW><ROW><id>1819395</id><snippet>somemethod</snippet></ROW><ROW><id>1819395</id><snippet>someobject</snippet></ROW><ROW><id>1819395</id><snippet>&gt;&gt;&gt; class SomeClass:
...     def somemethod(one="Not Passed", two="Not passed"):
...         print "one = %s\ntwo = %s" % (one,two)
...
&gt;&gt;&gt; someobject = SomeClass()
</snippet></ROW><ROW><id>1819395</id><snippet>somemethod</snippet></ROW><ROW><id>1819395</id><snippet>&gt;&gt;&gt; SomeClass.somemethod
&lt;unbound method SomeClass.somemethod&gt;
&gt;&gt;&gt; someobject.somemethod
&lt;bound method SomeClass.somemethod of &lt;__main__.SomeClass instance at 0x00AFE030
</snippet></ROW><ROW><id>1819395</id><snippet>&gt;&gt;&gt; someobject.somemethod("Hello world")
one = &lt;__main__.SomeClass instance at 0x00AFE030&gt;
two = Hello world
</snippet></ROW><ROW><id>1819395</id><snippet>somemethod</snippet></ROW><ROW><id>1819395</id><snippet>&gt;&gt;&gt; SomeClass.somemethod("Hello world")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: unbound method somemethod() must be called with SomeClass instance as first argument (got str instance instead)
</snippet></ROW><ROW><id>1819395</id><snippet>&gt;&gt;&gt; SomeClass.somemethod(someobject,"Hello world")
one = &lt;__main__.SomeClass instance at 0x00AFE030&gt;
two = Hello world
</snippet></ROW><ROW><id>1819675</id><snippet>pics = Picture.objects.filter(categories__in = [1,2,3]).filter(visible=True)
</snippet></ROW><ROW><id>1819862</id><snippet>__import__()</snippet></ROW><ROW><id>1819862</id><snippet>module.subname</snippet></ROW><ROW><id>1819862</id><snippet>getattr(module, subname)</snippet></ROW><ROW><id>1819862</id><snippet>unittest</snippet></ROW><ROW><id>1819862</id><snippet>AttributeError</snippet></ROW><ROW><id>1819862</id><snippet>ImportError</snippet></ROW><ROW><id>1819862</id><snippet>getattr(module, subname)</snippet></ROW><ROW><id>1819862</id><snippet>ImportError</snippet></ROW><ROW><id>1819862</id><snippet>AttributeError</snippet></ROW><ROW><id>1819862</id><snippet>unittest</snippet></ROW><ROW><id>1820000</id><snippet>self.assertEqual(selenium.GetEval("this.browserbot.getUserWindow().functionUnderTest().isNaN();"),"false","There was a NaN detected")
</snippet></ROW><ROW><id>1820213</id><snippet>class callee:
    def __init__(self, name):
        self.name = name

    def __call__(self):
        print self.name, "has been called"


class A:
    def __getattr__(self, attr):
        return callee(attr)

a = A()

a.DoSomething()
&gt;&gt;&gt; DoSomething has been called
</snippet></ROW><ROW><id>1820371</id><snippet>import re
splitter = re.compile(r'(\s+|\S+)')
splitter.findall(s)
</snippet></ROW><ROW><id>1820395</id><snippet>class Tab1(wx.Panel):
  def __init__(self, parent, id, textCtrl1):
    wx.Panel.__init__(self, parent, id);
    self.textCtrl1 = textCtrl1
  ...
  def Create_OnClick(self, event):
    text1 = self.textCtrl1
</snippet></ROW><ROW><id>1820396</id><snippet>from django.http import HttpResponseRedirect

def myview(request):
    if request.user.get_profile().is_store():
        return HttpResponseRedirect("/path/")

    # return regular view otherwise
</snippet></ROW><ROW><id>1820396</id><snippet>@decorator</snippet></ROW><ROW><id>1820410</id><snippet>csv</snippet></ROW><ROW><id>1820410</id><snippet>BigList = []
for filename in glob.glob(deferredDir + '/*'):
    PartList = csv.reader(open(filename))
    BigList.extend(PartList)
</snippet></ROW><ROW><id>1820949</id><snippet>def unicode_truncate(s, length, encoding='utf-8'):
    encoded = s.encode(encoding)[:length]
    return encoded.decode(encoding, 'ignore')
</snippet></ROW><ROW><id>1820949</id><snippet>&gt;&gt;&gt; unicode_truncate(u'абвгд', 5)
u'\u0430\u0431'
</snippet></ROW><ROW><id>1821012</id><snippet>self.account</snippet></ROW><ROW><id>1821012</id><snippet>Account</snippet></ROW><ROW><id>1821012</id><snippet>is_store()</snippet></ROW><ROW><id>1821123</id><snippet>In [9]: %prun c.f(3)
C.f -- param
         3 function calls in 0.066 CPU seconds

   Ordered by: internal time

   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.066    0.066    0.066    0.066 &lt;string&gt;:6(f)
        1    0.000    0.000    0.066    0.066 &lt;string&gt;:1(&lt;module&gt;)
        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}
</snippet></ROW><ROW><id>1821247</id><snippet>role, created = UserToUserRole.objects.get_or_create(
    from_user=current_user, to_user=user, role='follow')
</snippet></ROW><ROW><id>1821292</id><snippet>&gt;&gt;&gt; print calendar.month_abbr[6].decode("utf8")
Июн
</snippet></ROW><ROW><id>1821292</id><snippet>repr()</snippet></ROW><ROW><id>1821292</id><snippet>getlocale()</snippet></ROW><ROW><id>1821292</id><snippet>&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'en_US')
'en_US'
&gt;&gt;&gt; locale.getlocale()
('en_US', 'ISO8859-1')
</snippet></ROW><ROW><id>1821292</id><snippet>locale</snippet></ROW><ROW><id>1821292</id><snippet>PyICU</snippet></ROW><ROW><id>1821292</id><snippet>locale</snippet></ROW><ROW><id>1821609</id><snippet>relation()</snippet></ROW><ROW><id>1821609</id><snippet>class B(Base):
    __tablename__ = 'bs'
    id = Column(Integer, primary_key=True)
    a_id = Column(Integer, ForeignKey('as.id'), name="a")
    a = relation(A)
</snippet></ROW><ROW><id>1821664</id><snippet>&gt;&gt;&gt; import scipy as sp
&gt;&gt;&gt; from scipy.misc import imread
&gt;&gt;&gt; from scipy.signal.signaltools import correlate2d as c2d
&gt;&gt;&gt;
&gt;&gt;&gt; def get(i):
...     # get JPG image as Scipy array, RGB (3 layer)
...     data = imread('im%s.jpg' % i)
...     # convert to grey-scale using W3C luminance calc
...     data = sp.inner(data, [299, 587, 114]) / 1000.0
...     # normalize per http://en.wikipedia.org/wiki/Cross-correlation
...     return (data - data.mean()) / data.std()
...
&gt;&gt;&gt; im1 = get(1)
&gt;&gt;&gt; im2 = get(2)
&gt;&gt;&gt; im3 = get(3)
&gt;&gt;&gt; im1.shape
(105, 401)
&gt;&gt;&gt; im2.shape
(109, 373)
&gt;&gt;&gt; im3.shape
(121, 457)
&gt;&gt;&gt; c11 = c2d(im1, im1, mode='same')  # baseline
&gt;&gt;&gt; c12 = c2d(im1, im2, mode='same')
&gt;&gt;&gt; c13 = c2d(im1, im3, mode='same')
&gt;&gt;&gt; c23 = c2d(im2, im3, mode='same')
&gt;&gt;&gt; c11.max(), c12.max(), c13.max(), c23.max()
(42105.00000000259, 39898.103896795357, 16482.883608327804, 15873.465425120798)
</snippet></ROW><ROW><id>1822494</id><snippet>array</snippet></ROW><ROW><id>1822494</id><snippet>matrix</snippet></ROW><ROW><id>1822494</id><snippet>m[0, 0, 0]</snippet></ROW><ROW><id>1822494</id><snippet>m[0, 0]</snippet></ROW><ROW><id>1822494</id><snippet>array</snippet></ROW><ROW><id>1822494</id><snippet>m[0, 0][0]</snippet></ROW><ROW><id>1822494</id><snippet>m[i, j, k]</snippet></ROW><ROW><id>1822494</id><snippet>rbonvall@andy:~$ ipython
Python 2.5.4 (r254:67916, Sep 26 2009, 08:19:36) 
[...]

In [1]: import numpy.random

In [2]: m = numpy.random.random(size=(3, 3, 3))

In [3]: m
Out[3]: 
array([[[ 0.68853531,  0.8815277 ,  0.53613676],
        [ 0.9985735 ,  0.56409085,  0.03887982],
        [ 0.12083102,  0.0301229 ,  0.51331851]],

       [[ 0.73868543,  0.24904349,  0.24035031],
        [ 0.15458694,  0.35570177,  0.22097202],
        [ 0.81639051,  0.55742805,  0.5866573 ]],

       [[ 0.90302482,  0.29878548,  0.90705737],
        [ 0.68582033,  0.1988247 ,  0.9308886 ],
        [ 0.88956484,  0.25112987,  0.69732309]]])

In [4]: m[0, 0]
Out[4]: array([ 0.68853531,  0.8815277 ,  0.53613676])

In [5]: m[0, 0][0]
Out[5]: 0.6885353066709865
</snippet></ROW><ROW><id>1822494</id><snippet>array</snippet></ROW><ROW><id>1822495</id><snippet>&gt;&gt;&gt; a = [("one","two"), ("bad","good")]
&gt;&gt;&gt; print "\n".join(j for i in a for j in i)
one
two
bad
good



&gt;&gt;&gt; for i in a:
...  print "\n".join(i)
... 
one
two
bad
good
</snippet></ROW><ROW><id>1822706</id><snippet>vim.command('redraw | echo "%s"' % colorschemes[position])</snippet></ROW><ROW><id>1822706</id><snippet>:help echo</snippet></ROW><ROW><id>1822747</id><snippet>str</snippet></ROW><ROW><id>1822807</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; c = cdll.LoadLibrary("libc.so.6")
&gt;&gt;&gt; c.sigqueue
&lt;_FuncPtr object at 0xb7dbd77c&gt;
&gt;&gt;&gt; c.sigqueue(100, 10, 0)
-1
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1823101</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale(locale.LC_ALL, 'en_US')
'en_US'
&gt;&gt;&gt; locale.format("%d", 1255000, grouping=True)
'1,255,000'
</snippet></ROW><ROW><id>1823101</id><snippet>locale</snippet></ROW><ROW><id>1823101</id><snippet>def intWithCommas(x):
    if type(x) not in [type(0), type(0L)]:
        raise TypeError("Parameter must be an integer.")
    if x &lt; 0:
        return '-' + intWithCommas(-x)
    result = ''
    while x &gt;= 1000:
        x, r = divmod(x, 1000)
        result = ",%03d%s" % (r, result)
    return "%d%s" % (x, result)
</snippet></ROW><ROW><id>1823365</id><snippet>cosine</snippet></ROW><ROW><id>1823365</id><snippet>spatial.distance</snippet></ROW><ROW><id>1823365</id><snippet>from itertools import izip
from math import sqrt

def cosine_distance(a, b):
    if len(a) != len(b):
        raise ValueError, "a and b must be same length"
    numerator = sum(tup[0] * tup[1] for tup in izip(a,b))
    denoma = sum(avalue ** 2 for avalue in a)
    denomb = sum(bvalue ** 2 for bvalue in b)
    result = 1 - numerator / (sqrt(denoma)*sqrt(denomb))
    return result
</snippet></ROW><ROW><id>1823365</id><snippet>sum()</snippet></ROW><ROW><id>1823365</id><snippet>for</snippet></ROW><ROW><id>1823475</id><snippet>better</snippet></ROW><ROW><id>1823475</id><snippet>better</snippet></ROW><ROW><id>1823518</id><snippet>ALTER TABLE</snippet></ROW><ROW><id>1823518</id><snippet>try:
    profile = request.user.get_profile()
except UserProfile.DoesNotExist:
    # If DoesNotExists, Create an empty one
    profile = UserProfile(user=request.user)
    profile.save()
</snippet></ROW><ROW><id>1823532</id><snippet>functionList[functionListIndex]</snippet></ROW><ROW><id>1823532</id><snippet>newThread = threading.Thread(target=lambda func=functionList[functionListIndex]: self._run_parallel_job(func))
</snippet></ROW><ROW><id>1823532</id><snippet>args</snippet></ROW><ROW><id>1823532</id><snippet>newThread = threading.Thread(target=self._run_parallel_job, args=(functionList[functionListIndex],))
</snippet></ROW><ROW><id>1823558</id><snippet>Literal("if")</snippet></ROW><ROW><id>1823558</id><snippet>Keyword("if")</snippet></ROW><ROW><id>1823558</id><snippet>Literal("void")</snippet></ROW><ROW><id>1823558</id><snippet>"ifactor"</snippet></ROW><ROW><id>1823558</id><snippet>nums</snippet></ROW><ROW><id>1823558</id><snippet>alphas</snippet></ROW><ROW><id>1823558</id><snippet>alphanums</snippet></ROW><ROW><id>1823558</id><snippet>number = nums
identifier = alphas + OneOrMore(alphanums)
</snippet></ROW><ROW><id>1823558</id><snippet>number = Word(nums)
identifier = Word(alphas, alphanums)
</snippet></ROW><ROW><id>1823558</id><snippet>Combine</snippet></ROW><ROW><id>1823558</id><snippet>Group</snippet></ROW><ROW><id>1823558</id><snippet>Combine</snippet></ROW><ROW><id>1823558</id><snippet>Combine</snippet></ROW><ROW><id>1823558</id><snippet>realnum = Combine(Word(nums) + "." + Word(nums))
</snippet></ROW><ROW><id>1823558</id><snippet>Combine</snippet></ROW><ROW><id>1823558</id><snippet>"3.14"</snippet></ROW><ROW><id>1823558</id><snippet>['3', '.', '14']</snippet></ROW><ROW><id>1823558</id><snippet>Combine</snippet></ROW><ROW><id>1823558</id><snippet>'3.14'</snippet></ROW><ROW><id>1823558</id><snippet>3.14</snippet></ROW><ROW><id>1823558</id><snippet>Combine</snippet></ROW><ROW><id>1823558</id><snippet>'The answer is 3. 10 is too much.'</snippet></ROW><ROW><id>1823558</id><snippet>"3. 10"</snippet></ROW><ROW><id>1823558</id><snippet>"int x;"</snippet></ROW><ROW><id>1823558</id><snippet>"int x ;"</snippet></ROW><ROW><id>1823558</id><snippet>Word</snippet></ROW><ROW><id>1823558</id><snippet>Literal</snippet></ROW><ROW><id>1823558</id><snippet>Combine</snippet></ROW><ROW><id>1823558</id><snippet>''</snippet></ROW><ROW><id>1823558</id><snippet>term = Forward()
statement = Forward()
</snippet></ROW><ROW><id>1823558</id><snippet>&lt;&lt;</snippet></ROW><ROW><id>1823558</id><snippet>()</snippet></ROW><ROW><id>1823558</id><snippet>term &lt;&lt; (... term definition ...)
statement &lt;&lt; (... statement definition ...)
</snippet></ROW><ROW><id>1823636</id><snippet>@login_required
def user_profile(request):
    success = False
    user = User.objects.get(pk=request.user.id)
    if request.method == 'POST':
        upform = UserProfileForm(request.POST, instance=user.get_profile())
        if upform.is_valid():
            up = upform.save(commit=False)
            up.user = request.user
            up.save()
            success = True
    else:
        upform = UserProfileForm(instance=user.get_profile())       

    return render_to_response('profile/index.html',
        locals(), context_instance=RequestContext(request))
</snippet></ROW><ROW><id>1823774</id><snippet>__contains__</snippet></ROW><ROW><id>1823925</id><snippet>class SomeClass(object):
    def __init__(self):
        def __(arg):
            self.bar(arg)
        self.foo = __
    def foo(self, arg):
        print "foo", arg
    def bar(self, arg):
        print "bar", arg

SomeClass().foo("thing") # prints "bar thing"
</snippet></ROW><ROW><id>1823925</id><snippet>__new__</snippet></ROW><ROW><id>1823925</id><snippet>__init__</snippet></ROW><ROW><id>1823925</id><snippet>self</snippet></ROW><ROW><id>1823925</id><snippet>new</snippet></ROW><ROW><id>1823925</id><snippet>import functools

class SomeClass(object):
    def __init__(self):
        def __(self, arg):
            self.bar(arg)
        self.foo = functools.partial(__, self)
    def foo(self, arg):
        print "foo", arg
    def bar(self, arg):
        print "bar", arg

SomeClass().foo("thing") # prints "bar thing"
</snippet></ROW><ROW><id>1824050</id><snippet>import b</snippet></ROW><ROW><id>1824050</id><snippet>b</snippet></ROW><ROW><id>1824050</id><snippet>b/__init__.py</snippet></ROW><ROW><id>1824050</id><snippet>b.c</snippet></ROW><ROW><id>1824050</id><snippet>b.c.d</snippet></ROW><ROW><id>1824050</id><snippet>import b</snippet></ROW><ROW><id>1824050</id><snippet>import os</snippet></ROW><ROW><id>1824050</id><snippet>os.path.join</snippet></ROW><ROW><id>1824050</id><snippet>import this</snippet></ROW><ROW><id>1824071</id><snippet>soup</snippet></ROW><ROW><id>1824071</id><snippet>errp = soup.find(attrs={'id': 'ErrorPanel'})
if errp is not None:
  print 'Error:', errp.string
</snippet></ROW><ROW><id>1824147</id><snippet>fp = urllib2.urlopen("http://www.example.com/index.cfm")

response = ""
while 1:
    data = fp.read()
    if not data:         # This might need to be    if data == "":   -- can't remember
        break
    response += data

print response
</snippet></ROW><ROW><id>1824147</id><snippet>.read()</snippet></ROW><ROW><id>1824147</id><snippet>urllib</snippet></ROW><ROW><id>1824451</id><snippet>()</snippet></ROW><ROW><id>1824451</id><snippet>x if p else y</snippet></ROW><ROW><id>1824461</id><snippet>from Foundation import *
NSProcessInfo.processInfo().systemUptime() * 1e9
</snippet></ROW><ROW><id>1824461</id><snippet>from Quartz.QuartzCore import *
CACurrentMediaTime() * 1e9
</snippet></ROW><ROW><id>1824508</id><snippet>/admin/invite_user/</snippet></ROW><ROW><id>1824705</id><snippet>libevent</snippet></ROW><ROW><id>1824705</id><snippet>sockets</snippet></ROW><ROW><id>1824705</id><snippet>threading</snippet></ROW><ROW><id>1824777</id><snippet>&gt;&gt;&gt; 1e308
1e+308
&gt;&gt;&gt; 1e309
inf

&gt;&gt;&gt; json.dumps(1e308,allow_nan=False)
'1e+308'
&gt;&gt;&gt; json.dumps(1e309,allow_nan=False)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/lib/python2.6/json/__init__.py", line 237, in dumps
    **kw).encode(obj)
  File "/usr/lib/python2.6/json/encoder.py", line 367, in encode
    chunks = list(self.iterencode(o))
  File "/usr/lib/python2.6/json/encoder.py", line 304, in _iterencode
    yield floatstr(o, self.allow_nan)
  File "/usr/lib/python2.6/json/encoder.py", line 47, in floatstr
    raise ValueError(msg)
ValueError: Out of range float values are not JSON compliant: inf
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1824777</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; Decimal('1e900')/10
Decimal("1E+899")
</snippet></ROW><ROW><id>1824777</id><snippet>&gt;&gt;&gt; a=1e308
&gt;&gt;&gt; a+a
inf
</snippet></ROW><ROW><id>1824818</id><snippet>xmlValidator = Builder(action='xmllint --noout --schema '+
                               pwd+'/path/schema.xsd $SOURCE')
Env.Append(BUILDERS = {'ValidateXML' : xmlValidator})
Env.ValidateXML(source='file.xml')
</snippet></ROW><ROW><id>1824818</id><snippet>xmlValidator = Builder(action='xmllint --schema '+
                       pwd+'/path/schema.xsd $SOURCE --output $TARGET')
Env.ValidateXML(source='file.xml', target="out.txt")
</snippet></ROW><ROW><id>1824907</id><snippet>__getattr__</snippet></ROW><ROW><id>1824907</id><snippet>__setattr__</snippet></ROW><ROW><id>1824907</id><snippet>class Foo(models.Model):
    name = models.CharField(unique=True)
    inherit = models.ForeignKey('self', related_name='children', null=True, blank=True)

    _attribute1 = models.FloatField(null=True, blank=True)
    _attribute2 = models.FloatField(null=True, blank=True)
    _attribute3 = models.BooleanField(null=True, blank=True)
    _attribute4 = models.CharField(null=True, blank=True)

    def __getattr__(self, name):
        if self.inherit and hasattr(self.inherit, name):
            return getattr(self.inherit, name, None)
        elif hasattr(self, '_'+name):
            return getattr(self, '_'+name, None)
        return super(Foo, self).__getattr__(name)

    def __setattr__(self, name, value):
        if self.inherit and hasattr(self.inherit, name):
            return setattr(self.inherit, name, value)
        elif hasattr(self, '_'+name):
            return self.__dict__[name] = value
        return super(Foo, self).__setattr__(name, value)
</snippet></ROW><ROW><id>1825365</id><snippet>.findall()</snippet></ROW><ROW><id>1825365</id><snippet>soup.findAll(lambda tag: tag.name in ['script', 'form'] or tag['id'] == "footer")
</snippet></ROW><ROW><id>1825365</id><snippet>tags = soup.findAll(['script', 'form'])
tags.extend(soup.findAll(id="footer"))

for tag in tags:
    tag.extract()
</snippet></ROW><ROW><id>1825365</id><snippet>id</snippet></ROW><ROW><id>1825365</id><snippet>for tag in soup.findAll(lambda tag: tag.has_key('id') and
                                    tag['id'] in ['footer', 'content', 'links']):
    tag.extract()
</snippet></ROW><ROW><id>1825365</id><snippet>id</snippet></ROW><ROW><id>1825365</id><snippet>for tag in soup.findAll(id=lambda value: value in ['footer', 'content', 'links']):
    tag.extract()
</snippet></ROW><ROW><id>1825465</id><snippet>urllib</snippet></ROW><ROW><id>1825470</id><snippet>&gt;&gt;&gt; class A(object):
...   class B(object):
...     def __init__(self):
...       super(A.B, self).__init__()
...   def getB(self):
...     return A.B()
... 
&gt;&gt;&gt; A().getB()
&lt;__main__.B object at 0x100496410&gt;
</snippet></ROW><ROW><id>1825635</id><snippet>Enumeration</snippet></ROW><ROW><id>1825635</id><snippet>TOKEN</snippet></ROW><ROW><id>1825635</id><snippet>EnumerationType</snippet></ROW><ROW><id>1825635</id><snippet>&gt;&gt;&gt; isinstance(Enumeration, EnumerationType)
True
&gt;&gt;&gt; isinstance(TOKEN, EnumerationType)
True
</snippet></ROW><ROW><id>1825635</id><snippet>repr(TOKEN)</snippet></ROW><ROW><id>1825635</id><snippet>type(TOKEN).__repr__(TOKEN)</snippet></ROW><ROW><id>1825635</id><snippet>EnumerationType.__repr__(TOKEN)</snippet></ROW><ROW><id>1826443</id><snippet>file.write()</snippet></ROW><ROW><id>1826443</id><snippet>\n</snippet></ROW><ROW><id>1826443</id><snippet>out.write("\n")</snippet></ROW><ROW><id>1826443</id><snippet>    for doc,wc in wordcounts.items(): 
        out.write(doc)             #this works fine, no linebreak
        for word in wordlist: 
            if word in wc: out.write("\t%d" % wc[word]) #linebreaks appear
            else: out.write("\t0")                      #after each of these
            out.write("\n") #&lt;--- NEWLINE ON EACH ITERATION!
</snippet></ROW><ROW><id>1826443</id><snippet>out.write("\n")</snippet></ROW><ROW><id>1826753</id><snippet>json</snippet></ROW><ROW><id>1826753</id><snippet>def foo():
    print 'I am foo!'
def bar():
    pass
def baz():
    pass

funcs = {'func_a':foo, 'func_b':bar, 'func_c':baz}

funcs['func_a']()
</snippet></ROW><ROW><id>1826753</id><snippet>eval</snippet></ROW><ROW><id>1827235</id><snippet>DELIMITER $$
CREATE PROCEDURE `proc_name`()
BEGIN
  DECLARE done INT DEFAULT 0;
  DECLARE a_id BIGINT UNSIGNED;
  DECLARE b_id BIGINT UNSIGNED;
  DECLARE x_count INT;

  -- something like the following
  DECLARE cur1 CURSOR FOR SELECT t_a.id, t_b.id FROM t_a, t_b WHERE t_a.email = t_b.email;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

  SELECT COUNT(*) INTO x_count FROM t_a, t_b WHERE t_a.email = t_b.email;

  IF(x_count &gt; &lt;some_min_value&gt;) THEN

    OPEN cur1;

    REPEAT
      FETCH cur1 INTO a_id, b_id;
      IF NOT done THEN

        -- do something here like update rows, remove rows, etc.
        -- a_id and b_id hold the two id values for the two tables which
        -- I assume to be primary keys

      END IF;
    UNTIL done END REPEAT;

    CLOSE cur1;

  END IF;
END
$$
</snippet></ROW><ROW><id>1827408</id><snippet>&gt;&gt;&gt; import MyLibrary
&gt;&gt;&gt; print MyLibrary
</snippet></ROW><ROW><id>1827587</id><snippet>somefield = models.CharField(
    widget=forms.TextInput(attrs={'readonly':'readonly'})
)
</snippet></ROW><ROW><id>1827587</id><snippet>somefield = forms.CharField(
    widget=forms.TextInput(attrs={'readonly':'readonly'})
)
</snippet></ROW><ROW><id>1827666</id><snippet>def send(self):
    return buffer(self)[:]
</snippet></ROW><ROW><id>1827666</id><snippet>def receiveSome(self, bytes):
    fit = min(len(bytes), ctypes.sizeof(self))
    ctypes.memmove(ctypes.addressof(self), bytes, fit)
</snippet></ROW><ROW><id>1827666</id><snippet>send</snippet></ROW><ROW><id>1827666</id><snippet>pack</snippet></ROW><ROW><id>1827666</id><snippet>receiveSome</snippet></ROW><ROW><id>1827666</id><snippet>pack_into</snippet></ROW><ROW><id>1827666</id><snippet>memmove(addressof(y), buffer(x)[:], sizeof(y))</snippet></ROW><ROW><id>1827666</id><snippet>x</snippet></ROW><ROW><id>1827666</id><snippet>y</snippet></ROW><ROW><id>1827666</id><snippet>x</snippet></ROW><ROW><id>1828249</id><snippet>imp</snippet></ROW><ROW><id>1828249</id><snippet>models.admin.py</snippet></ROW><ROW><id>1828249</id><snippet>import imp
with open('models.admin.py', 'rb') as fp:
    models_admin = imp.load_module(
        'models_admin', fp, 'models.admin.py',
        ('.py', 'rb', imp.PY_SOURCE)
    )
</snippet></ROW><ROW><id>1828249</id><snippet>imp.find_module</snippet></ROW><ROW><id>1828249</id><snippet>imp.load_module</snippet></ROW><ROW><id>1828286</id><snippet>os.kill</snippet></ROW><ROW><id>1828286</id><snippet>ps</snippet></ROW><ROW><id>1828286</id><snippet>$ ls /proc/8502/task/
8502  8503  8504  8505  8506  8507  8511  8512  8514  8659
</snippet></ROW><ROW><id>1828286</id><snippet>$ ps aux | grep [8]503
$
</snippet></ROW><ROW><id>1828286</id><snippet>ps</snippet></ROW><ROW><id>1828286</id><snippet>$ ps -eLf | grep [8]503
ncw       8502     1  8503  0   10 10:00 ?        00:00:00 /usr/lib/virtualbox/VBoxSVC --automate
</snippet></ROW><ROW><id>1828286</id><snippet>[8]503</snippet></ROW><ROW><id>1828286</id><snippet>grep</snippet></ROW><ROW><id>1828286</id><snippet>$ python
Python 2.6.4 (r264:75706, Nov  2 2009, 14:44:17)
[GCC 4.4.1] on linux2
Type "help", "copyright", "credits" or "license" for more information.
Loaded customisations from '/home/ncw/.pystartup'
&gt;&gt;&gt; import os
&gt;&gt;&gt; os.kill(8503, 0)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1828286</id><snippet>ls /proc/*/task/5555
</snippet></ROW><ROW><id>1828286</id><snippet>ps -eLf | grep [5]555
</snippet></ROW><ROW><id>1828490</id><snippet>sys.path.append('../gen')
from descriptor_pb2 import FileDescriptorSet
</snippet></ROW><ROW><id>1828580</id><snippet>from numpy import dot
def d4(v1, v2): 
    check(v1, v2)
    return dot(v1, v2)
</snippet></ROW><ROW><id>1828580</id><snippet>d0 elapsed:  12.1977242918
d1 elapsed:  13.885232341
d2 elapsed:  13.7929552499
d3 elapsed:  11.0952246724
</snippet></ROW><ROW><id>1828580</id><snippet>d0 elapsed:  0.965477735299
d1 elapsed:  12.5354792299
d2 elapsed:  12.9748163524
d3 elapsed:  9.78255448667
</snippet></ROW><ROW><id>1828580</id><snippet>from numpy import array
v3 = [array(vec) for vec in v1]
v4 = [array(vec) for vec in v2]

# then
t4 = timeit.Timer("d4(v3,v4)","from dot_product import d4,v3,v4")
</snippet></ROW><ROW><id>1828580</id><snippet>check(v1, v2)</snippet></ROW><ROW><id>1828580</id><snippet>v3 = array(v1)
v4 = array(v2)
</snippet></ROW><ROW><id>1828580</id><snippet>d4 elapsed:  3.22535741274
</snippet></ROW><ROW><id>1828580</id><snippet>d4 elapsed:  2.09182619579
</snippet></ROW><ROW><id>1828673</id><snippet>imap.gmail.com</snippet></ROW><ROW><id>1828673</id><snippet>imap4.gmail.com</snippet></ROW><ROW><id>1828673</id><snippet>import imaplib
M = imaplib.IMAP4_SSL("imap.gmail.com", 993)
</snippet></ROW><ROW><id>1829286</id><snippet>Person._meta.get_field('name').max_length</snippet></ROW><ROW><id>1829286</id><snippet>_meta</snippet></ROW><ROW><id>1829335</id><snippet>y2Axis.labels.dx = 10
</snippet></ROW><ROW><id>1829527</id><snippet>import collections

data = [
  [1, 2, 3, 4, 5],
  [1, 9, 3, 4, 5],
  [1, 10, 8, 4, 5],
  [1, 12, 13, 7, 5],
  [1, 14, 13, 13, 6],
]

def sorted_by_count(lists):
  counts = collections.defaultdict(int)
  for L in lists:
    for n in L:
      counts[n] += 1

  return [num for num, count in
          sorted(counts.items(),
                 key=lambda k_v: (k_v[1], k_v[0]),
                 reverse=True)]

print sorted_by_count(data)
</snippet></ROW><ROW><id>1829527</id><snippet>def freq_sorted(iterable, key=None, reverse=False, include_freq=False):
  """Return a list of items from iterable sorted by frequency.

  If include_freq, (item, freq) is returned instead of item.

  key(item) must be hashable, but items need not be.

  *Higher* frequencies are returned first.  Within the same frequency group,
  items are ordered according to key(item).
  """
  if key is None:
    key = lambda x: x

  key_counts = collections.defaultdict(int)
  items = {}
  for n in iterable:
    k = key(n)
    key_counts[k] += 1
    items.setdefault(k, n)

  if include_freq:
    def get_item(k, c):
      return items[k], c
  else:
    def get_item(k, c):
      return items[k]

  return [get_item(k, c) for k, c in
          sorted(key_counts.items(),
                 key=lambda kc: (-kc[1], kc[0]),
                 reverse=reverse)]
</snippet></ROW><ROW><id>1829527</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; print freq_sorted(itertools.chain.from_iterable(data))
[1, 5, 4, 13, 3, 2, 6, 7, 8, 9, 10, 12, 14]
&gt;&gt;&gt; print freq_sorted(itertools.chain.from_iterable(data), include_freq=True)
# (slightly reformatted)
[(1, 5),
 (5, 4),
 (4, 3), (13, 3),
 (3, 2),
 (2, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1), (12, 1), (14, 1)]
</snippet></ROW><ROW><id>1829642</id><snippet>department</snippet></ROW><ROW><id>1829642</id><snippet>job_classification</snippet></ROW><ROW><id>1829642</id><snippet>class department(models.Model):
    name = Models.CharField(max_length=100)
    number = Models.IntegerField
</snippet></ROW><ROW><id>1829642</id><snippet>department = ['HR', 'Finance']</snippet></ROW><ROW><id>1829642</id><snippet>department_number = [12, 5]</snippet></ROW><ROW><id>1829642</id><snippet>name</snippet></ROW><ROW><id>1829642</id><snippet>nickname</snippet></ROW><ROW><id>1829642</id><snippet>last_name</snippet></ROW><ROW><id>1829642</id><snippet>ForeignKey</snippet></ROW><ROW><id>1829642</id><snippet>Person</snippet></ROW><ROW><id>1829649</id><snippet>class HandsOffThatPie(Exception):
    pass

def get_pie(please=False):
    if not please:
        raise HandsOffThatPie('Say please!')
</snippet></ROW><ROW><id>1829956</id><snippet>notification.send([to_user], "friends_invite", {"from_user": from_user})
</snippet></ROW><ROW><id>1829956</id><snippet>notification.send(Users.objects.all(), "friends_invite", {"from_user": from_user})
</snippet></ROW><ROW><id>1829956</id><snippet>notification.send([u for u in Users.objects.all()], "friends_invite", {"from_user": from_user})
</snippet></ROW><ROW><id>1830192</id><snippet>def meshgrid(x,y):
    """
    Return coordinate matrices from two coordinate vectors.

    Parameters
    ----------
    x, y : ndarray
        Two 1-D arrays representing the x and y coordinates of a grid.

    Returns
    -------
    X, Y : ndarray
        For vectors `x`, `y` with lengths ``Nx=len(x)`` and ``Ny=len(y)``,
        return `X`, `Y` where `X` and `Y` are ``(Ny, Nx)`` shaped arrays
        with the elements of `x` and y repeated to fill the matrix along
        the first dimension for `x`, the second for `y`.

    See Also
    --------
    index_tricks.mgrid : Construct a multi-dimensional "meshgrid"
                         using indexing notation.
    index_tricks.ogrid : Construct an open multi-dimensional "meshgrid"
                         using indexing notation.

    Examples
    --------
    &gt;&gt;&gt; X, Y = np.meshgrid([1,2,3], [4,5,6,7])
    &gt;&gt;&gt; X
    array([[1, 2, 3],
           [1, 2, 3],
           [1, 2, 3],
           [1, 2, 3]])
    &gt;&gt;&gt; Y
    array([[4, 4, 4],
           [5, 5, 5],
           [6, 6, 6],
           [7, 7, 7]])

    `meshgrid` is very useful to evaluate functions on a grid.

    &gt;&gt;&gt; x = np.arange(-5, 5, 0.1)
    &gt;&gt;&gt; y = np.arange(-5, 5, 0.1)
    &gt;&gt;&gt; xx, yy = np.meshgrid(x, y)
    &gt;&gt;&gt; z = np.sin(xx**2+yy**2)/(xx**2+yy**2)

    """
    x = asarray(x)
    y = asarray(y)
    numRows, numCols = len(y), len(x)  # yes, reversed
    x = x.reshape(1,numCols)
    X = x.repeat(numRows, axis=0)

    y = y.reshape(numRows,1)
    Y = y.repeat(numCols, axis=1)
    return X, Y
</snippet></ROW><ROW><id>1830192</id><snippet>def meshgrid2(*arrs):
    arrs = tuple(reversed(arrs))  #edit
    lens = map(len, arrs)
    dim = len(arrs)

    sz = 1
    for s in lens:
        sz*=s

    ans = []    
    for i, arr in enumerate(arrs):
        slc = [1]*dim
        slc[i] = lens[i]
        arr2 = asarray(arr).reshape(slc)
        for j, sz in enumerate(lens):
            if j!=i:
                arr2 = arr2.repeat(sz, axis=j) 
        ans.append(arr2)

    return tuple(ans)
</snippet></ROW><ROW><id>1830201</id><snippet>__chatty_for__</snippet></ROW><ROW><id>1830201</id><snippet>__metaclass__</snippet></ROW><ROW><id>1830201</id><snippet>__dict__</snippet></ROW><ROW><id>1830201</id><snippet>__metaclass__</snippet></ROW><ROW><id>1830201</id><snippet># foo.py
class Foo: pass
</snippet></ROW><ROW><id>1830201</id><snippet># bar.py
class Bar: pass
</snippet></ROW><ROW><id>1830201</id><snippet># baaz.py
class Baaz: pass
</snippet></ROW><ROW><id>1830201</id><snippet># chattyimport.py
import imp
import sys
import types

class ChattyType(type):
    def __init__(cls, name, bases, dct):
        print "Class init", name
        super(ChattyType, cls).__init__(name, bases, dct)

class ChattyImporter(object):

    __chatty_for__ = []

    def __init__(self, path_entry):
        pass

    def find_module(self, fullname, path=None):
        if fullname not in self.__chatty_for__:
            return None
        try:
            if path is None:
                self.find_results = imp.find_module(fullname)
            else:
                self.find_results = imp.find_module(fullname, path)
        except ImportError:
            return None
        (f,fn,(suf,mode,typ)) = self.find_results
        if typ == imp.PY_SOURCE:
            return self
        return None

    def load_module(self, fullname):
        #print '%s loading module %s' % (type(self).__name__, fullname)
        (f,fn,(suf,mode,typ)) = self.find_results
        data = f.read()
        if fullname in sys.modules:
            module = sys.modules[fullname]
        else:
            sys.modules[fullname] = module = types.ModuleType(fullname)

        module.__metaclass__ = ChattyType
        module.__file__ = fn
        module.__name__ = fullname
        codeobj = compile(data, fn, 'exec')
        exec codeobj in module.__dict__
        return module

class ChattyImportSomeModules(ChattyImporter):
    __chatty_for__ = 'foo bar'.split()

sys.meta_path.append(ChattyImportSomeModules(''))

import foo # prints 'Class init Foo'
import bar # prints 'Class init Bar'
import baaz
</snippet></ROW><ROW><id>1830294</id><snippet>br.find_control(name="E").value = ["0"]
</snippet></ROW><ROW><id>1830294</id><snippet>form.find_control(name="E", kind="list").value = ["0"]
</snippet></ROW><ROW><id>1830294</id><snippet>    br["E"] = ["0"]
</snippet></ROW><ROW><id>1830397</id><snippet>waitpid()</snippet></ROW><ROW><id>1830499</id><snippet>&gt;&gt;&gt; db = sqlite3.connect(':memory:', detect_types=sqlite3.PARSE_DECLTYPES)
&gt;&gt;&gt; c = db.cursor()
&gt;&gt;&gt; c.execute('create table foo (bar integer, baz timestamp)')
&lt;sqlite3.Cursor object at 0x40fc50&gt;
&gt;&gt;&gt; c.execute('insert into foo values(?, ?)', (23, datetime.datetime.now()))
&lt;sqlite3.Cursor object at 0x40fc50&gt;
&gt;&gt;&gt; c.execute('select * from foo')
&lt;sqlite3.Cursor object at 0x40fc50&gt;
&gt;&gt;&gt; c.fetchall()
[(23, datetime.datetime(2009, 12, 1, 19, 31, 1, 40113))]
</snippet></ROW><ROW><id>1830529</id><snippet>LANG</snippet></ROW><ROW><id>1830529</id><snippet>LC_CTYPE</snippet></ROW><ROW><id>1830529</id><snippet>LC_ALL</snippet></ROW><ROW><id>1830529</id><snippet>UTF-8</snippet></ROW><ROW><id>1830529</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>1830529</id><snippet>$ unset LANG
$ env | grep LC_
$ export LC_CTYPE="UTF-8"
$ /usr/bin/python  # Apple-supplied python
Python 2.6.1 (r261:67515, Jul  7 2009, 23:51:51) 
[GCC 4.2.1 (Apple Inc. build 5646)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import locale ; locale.getdefaultlocale()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/locale.py", line 459, in getdefaultlocale
    return _parse_localename(localename)
  File "/System/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/locale.py", line 391, in _parse_localename
    raise ValueError, 'unknown locale: %s' % localename
ValueError: unknown locale: UTF-8
^D
$ /usr/local/bin/python2.6   # python.org python
Python 2.6.4 (r264:75821M, Oct 27 2009, 19:48:32) 
[GCC 4.0.1 (Apple Inc. build 5493)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import locale ; locale.getdefaultlocale()
(None, 'mac-roman')
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1830529</id><snippet>bzr</snippet></ROW><ROW><id>1830529</id><snippet>locale.getpreferredencoding()</snippet></ROW><ROW><id>1830529</id><snippet>locale.Error</snippet></ROW><ROW><id>1830529</id><snippet>_locale.so</snippet></ROW><ROW><id>1830529</id><snippet>_locale.so</snippet></ROW><ROW><id>1830529</id><snippet>lib/python2.5/lib-dynload</snippet></ROW><ROW><id>1830529</id><snippet>755</snippet></ROW><ROW><id>1830529</id><snippet>/opt/local/Library/Frameworks/Python.framework/Versions/2.5/lib/python2.5/lib-dynload/
</snippet></ROW><ROW><id>1830562</id><snippet>lines = open('wordprob.txt','r').readlines()
words = open('StdWord.txt','r').readlines()
for i,line in enumerate(lines):
        v = [eval(s) for s in line.split()]
        if v[0] &gt; v[1]:
                print words[i].strip()
</snippet></ROW><ROW><id>1830635</id><snippet>from os import stat
from pwd import getpwuid

def find_owner(filename):
    return getpwuid(stat(filename).st_uid).pw_name
</snippet></ROW><ROW><id>1830709</id><snippet>byteArray.writeUTF( event.result.toString() );</snippet></ROW><ROW><id>1830709</id><snippet>byteArray.uncompress()</snippet></ROW><ROW><id>1830709</id><snippet>bytes.uncompress(CompressionAlgorithm.DEFLATE);</snippet></ROW><ROW><id>1830709</id><snippet>bytes.uncompress(CompressionAlgorithm.ZLIB);</snippet></ROW><ROW><id>1830709</id><snippet>writeUTFBytes</snippet></ROW><ROW><id>1830709</id><snippet>writeUTF</snippet></ROW><ROW><id>1830709</id><snippet>inflate()</snippet></ROW><ROW><id>1830709</id><snippet>writeUTF</snippet></ROW><ROW><id>1830709</id><snippet>writeUTFBytes</snippet></ROW><ROW><id>1830709</id><snippet>repr(xml_doc)</snippet></ROW><ROW><id>1830709</id><snippet>repr(zlib_compress_output)</snippet></ROW><ROW><id>1830709</id><snippet>repr()</snippet></ROW><ROW><id>1830709</id><snippet>event.result</snippet></ROW><ROW><id>1830709</id><snippet>event.result.toString()</snippet></ROW><ROW><id>1830709</id><snippet>writeUTF*()</snippet></ROW><ROW><id>1830807</id><snippet>.pyc</snippet></ROW><ROW><id>1830807</id><snippet>ciao.pyc</snippet></ROW><ROW><id>1830807</id><snippet>$ cat&gt;'ciao.py'
def ciao(): return 'Ciao!' 
$ python -c'import ciao; print ciao.ciao()'
Ciao!
</snippet></ROW><ROW><id>1830807</id><snippet>ciao.pyc</snippet></ROW><ROW><id>1830807</id><snippet>$ python
Python 2.5.1 (r251:54863, Feb  6 2009, 19:02:12) 
[GCC 4.0.1 (Apple Inc. build 5465)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; b = open('ciao.pyc', 'rb').read()
&gt;&gt;&gt; len(b)
200
</snippet></ROW><ROW><id>1830807</id><snippet>b</snippet></ROW><ROW><id>1830807</id><snippet>ciao</snippet></ROW><ROW><id>1830807</id><snippet>&gt;&gt;&gt; import marshal
&gt;&gt;&gt; c = marshal.loads(b[8:])
&gt;&gt;&gt; c
&lt;code object &lt;module&gt; at 0x65188, file "ciao.py", line 1&gt;
</snippet></ROW><ROW><id>1830807</id><snippet>.pyc</snippet></ROW><ROW><id>1830807</id><snippet>marshal.loads</snippet></ROW><ROW><id>1830807</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; m = types.ModuleType('ciao')
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.modules['ciao'] = m
&gt;&gt;&gt; exec c in m.__dict__
</snippet></ROW><ROW><id>1830807</id><snippet>sys.modules</snippet></ROW><ROW><id>1830807</id><snippet>__dict__</snippet></ROW><ROW><id>1830807</id><snippet>sys.modules</snippet></ROW><ROW><id>1830807</id><snippet>exec</snippet></ROW><ROW><id>1830807</id><snippet>import</snippet></ROW><ROW><id>1830807</id><snippet>new</snippet></ROW><ROW><id>1830807</id><snippet>imp</snippet></ROW><ROW><id>1830807</id><snippet>types</snippet></ROW><ROW><id>1830807</id><snippet>&gt;&gt;&gt; import ciao
&gt;&gt;&gt; ciao.ciao()
'Ciao!'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1830807</id><snippet>import</snippet></ROW><ROW><id>1830807</id><snippet>from</snippet></ROW><ROW><id>1830807</id><snippet>sys.modules['ciao']</snippet></ROW><ROW><id>1830807</id><snippet>import</snippet></ROW><ROW><id>1830807</id><snippet>import</snippet></ROW><ROW><id>1830989</id><snippet>init&lt;void*&gt;</snippet></ROW><ROW><id>1830989</id><snippet>init&lt;void*&gt;</snippet></ROW><ROW><id>1830989</id><snippet>#include &lt;iostream&gt;
#include &lt;string&gt;

#include &lt;boost/python.hpp&gt;


struct A {
#define BODY { std::cout &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; '\n'; }
    A() BODY
    A(long) BODY
    A(std::string const&amp;) BODY
    A(void* p) BODY
#undef BODY
};

BOOST_PYTHON_MODULE(ex) {
using namespace boost::python;
class_&lt;A&gt;("A")
    .def(init&lt;long&gt;())
    .def(init&lt;std::string const&amp;&gt;())
    .def(init&lt;void*&gt;())
;
}
</snippet></ROW><ROW><id>1830989</id><snippet>init&lt;void*&gt;</snippet></ROW><ROW><id>1831146</id><snippet>["http://"+link if link[0:4]=='www.' else link for link in links]
</snippet></ROW><ROW><id>1831146</id><snippet>[link[0:4]=='www.' and "http://"+link or link for link in links]
</snippet></ROW><ROW><id>1831146</id><snippet>("http://"+link if link[0:4]=='www.' else link)</snippet></ROW><ROW><id>1831146</id><snippet>(link[0:4]=='www.' and "http://"+link or link)</snippet></ROW><ROW><id>1831239</id><snippet>import numpy as NP
A = NP.random.random_integers(0, 9, 16).reshape(4, 4)
dg = NP.r_[ [NP.nan] * 4 ]  # proper syntax is 'nan' not 'NaN'
dg = NP.diag(dg)
A += dg                     # a 4x4 array w/ NaNs down the main diagonal
NP.sum(A, axis=1)           # doesn't work, gives: array([ NaN,  NaN,  NaN,  NaN])  
from numpy import ma as MA
Am = **MA.masked_invalid**(A)
NP.sum(Am, axis=1)         # now it works (treats 'nan' as 0)
</snippet></ROW><ROW><id>1831239</id><snippet>NP.nan_to_num(A)
MA.masked_equal(A, 0)
</snippet></ROW><ROW><id>1831239</id><snippet>MA.fix_invalid(A)
</snippet></ROW><ROW><id>1831334</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>1831334</id><snippet>collections.namedtuple(typename, field_names[, verbose])</snippet></ROW><ROW><id>1831334</id><snippet>__repr__()</snippet></ROW><ROW><id>1831334</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; mytup = collections.namedtuple('mytup', ['tag','name', 'values'])
&gt;&gt;&gt; e1 = mytup('tag1','great',[1,'two',3])
&gt;&gt;&gt; e1
mytup(tag='tag1', name='great', values=[1, 'two', 3])
&gt;&gt;&gt; e1.values
[1, 'two', 3]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1831334</id><snippet>mytup</snippet></ROW><ROW><id>1831334</id><snippet>&gt;&gt;&gt; tlist = [mytup("foo", "dog", [1,2,3,4]),
    mytup("bar","cat", [4,5,6,7,8,9]), mytup("moo","cow", [4,5,7,8,9,1,3,4,65])]
&gt;&gt;&gt; tlist
[mytup(tag='foo', name='dog', values=[1, 2, 3, 4]),
mytup(tag='bar', name='cat', values=[4, 5, 6, 7, 8, 9]),
mytup(tag='moo', name='cow', values=[4, 5, 7, 8, 9, 1, 3, 4, 65])]
&gt;&gt;&gt; [t for t in tlist if t.tag == 'bar']
[mytup(tag='bar', name='cat', values=[4, 5, 6, 7, 8, 9])]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1831334</id><snippet>Namedtuple</snippet></ROW><ROW><id>1831334</id><snippet>dict</snippet></ROW><ROW><id>1831370</id><snippet>setup.py</snippet></ROW><ROW><id>1831396</id><snippet>.encode("utf-8")</snippet></ROW><ROW><id>1831396</id><snippet>fileObj = codecs.open( "someFile", "r", "utf-8" )
</snippet></ROW><ROW><id>1831396</id><snippet>data=fileOjb.read()
</snippet></ROW><ROW><id>1831396</id><snippet>open("newfile","w").write(data.encode("utf-8"))
</snippet></ROW><ROW><id>1831453</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; today8am = now.replace(hour=8, minute=0, second=0, microsecond=0)
&gt;&gt;&gt; now &lt; today8am
True
&gt;&gt;&gt; now == today8am
False
&gt;&gt;&gt; now &gt; today8am
False
</snippet></ROW><ROW><id>1832355</id><snippet>Account</snippet></ROW><ROW><id>1832355</id><snippet>Address</snippet></ROW><ROW><id>1832355</id><snippet>for a in Account.objects.all():
    a.default_address # this is the address that SQL brought in via a "join".
</snippet></ROW><ROW><id>1832678</id><snippet>global</snippet></ROW><ROW><id>1832678</id><snippet>import sys

var = None

def set_var(v):
    sys.modules[__name__].var = v

def get_var():
    return var
</snippet></ROW><ROW><id>1832957</id><snippet>class Song:
    """The class to store the details of each song"""
    attsToStore=('Name', 'Artist', 'Album', 'Genre', 'Location')
    def __init__(self):
        for att in self.attsToStore:
            setattr(self, att.lower(), None)
    def setDetail(self, key, val):
        if key in self.attsToStore:
            setattr(self, key.lower(), val)
</snippet></ROW><ROW><id>1833013</id><snippet>*args</snippet></ROW><ROW><id>1833013</id><snippet>**kwds</snippet></ROW><ROW><id>1833013</id><snippet>__build_class__</snippet></ROW><ROW><id>1833013</id><snippet>  class C(A, B, metaclass=M, other=42, *more_bases, *more_kwds):
    ...
</snippet></ROW><ROW><id>1833013</id><snippet>  C = __build_class__(&lt;func&gt;, 'C', A, B, metaclass=M, other=42,
*more_bases, *more_kwds)
</snippet></ROW><ROW><id>1833013</id><snippet>&lt;func&gt;</snippet></ROW><ROW><id>1833528</id><snippet>file</snippet></ROW><ROW><id>1833528</id><snippet>_mysql.so</snippet></ROW><ROW><id>1833528</id><snippet>% file _mysql.so
_mysql.so: Mach-O 64-bit bundle x86_64
</snippet></ROW><ROW><id>1833528</id><snippet>% file /usr/bin/python
/usr/bin/python: Mach-O universal binary with 3 architectures
/usr/bin/python (for architecture x86_64):      Mach-O 64-bit executable x86_64
/usr/bin/python (for architecture i386):        Mach-O executable i386
/usr/bin/python (for architecture ppc7400):     Mach-O executable ppc
</snippet></ROW><ROW><id>1833688</id><snippet>cleaned_data</snippet></ROW><ROW><id>1833688</id><snippet>if f.is_valid():
    for group in f.cleaned_data['group']:
        calentry.groups.add(group)
</snippet></ROW><ROW><id>1833927</id><snippet>settings.py</snippet></ROW><ROW><id>1833927</id><snippet>settings.py</snippet></ROW><ROW><id>1833954</id><snippet>import time, socket

class ControllableSocket:
    def __init__(self, latency, bandwidth):
        self._latency = latency
        self._bandwidth = bandwidth
        self._bytesSent = 0
        self._timeCreated = time.time()
        self._socket = socket.socket()

    def send(self, bytes):
        now = time.time()
        connectionDuration = now - self._timeCreated
        self._bytesSent += len(bytes)
        # How long should it have taken to send how many bytes we've sent with our
        # given bandwidth limitation?
        requiredDuration = self._bytesSent / self._bandwidth
        time.sleep(max(requiredDuration - connectionDuration, self._latency))
        return self._socket.send(bytes)
</snippet></ROW><ROW><id>1834351</id><snippet>content-length</snippet></ROW><ROW><id>1834351</id><snippet>HEAD</snippet></ROW><ROW><id>1834351</id><snippet>Transfer-Encoding: chunked</snippet></ROW><ROW><id>1834519</id><snippet>wProductType</snippet></ROW><ROW><id>1834706</id><snippet>#!/usr/bin/python 
 import sys 
 def print(s): return sys.stdout.buffer.write(s.encode('utf-8'))
 print("Content-type:text/plain;charset=utf-8\n\n") 
 print('晉\n')
</snippet></ROW><ROW><id>1834884</id><snippet>import BeautifulSoup

soup = BeautifulSoup.BeautifulSoup('''&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;Names&lt;/td&gt;
    &lt;td&gt;Fred, John, Barry, &lt;a href="http://www.example.com/"&gt;Roger&lt;/a&gt;, James&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;''')

result = []
for tag in soup.table.findAll('td')[1]:
  if isinstance(tag, BeautifulSoup.NavigableString):
    for name in tag.string.split(','):
      name = name.strip()
      if name:
        result.append({ 'name': name })
  else:
    result.append({ 'name': tag.string.strip(), 'url': tag["href"] })

print result
</snippet></ROW><ROW><id>1834921</id><snippet>- url: /my_app/media/
  static_dir: my_app/media
</snippet></ROW><ROW><id>1834921</id><snippet>&lt;img src="/my_app/media/a.jpg" /&gt;
</snippet></ROW><ROW><id>1835044</id><snippet>assert not isinstance(lst, basestring)
</snippet></ROW><ROW><id>1835044</id><snippet>list</snippet></ROW><ROW><id>1835044</id><snippet>tuple</snippet></ROW><ROW><id>1835089</id><snippet>Thing</snippet></ROW><ROW><id>1835089</id><snippet>Thyng</snippet></ROW><ROW><id>1835089</id><snippet>from Thing import Thyng
</snippet></ROW><ROW><id>1835089</id><snippet>.py</snippet></ROW><ROW><id>1835089</id><snippet>import Thing
# ...
def fn():
    Thing.Thyng()
</snippet></ROW><ROW><id>1835089</id><snippet>fn()</snippet></ROW><ROW><id>1835089</id><snippet>__init__.py</snippet></ROW><ROW><id>1835089</id><snippet>__init__.py</snippet></ROW><ROW><id>1835174</id><snippet>$ python -m timeit -c 'from math import frexp' 'frexp(1.1)'
100000 loops, best of 3: 3.7 usec per loop

$ python -m timeit -c 'from math import log' 'log(1.1)'
100000 loops, best of 3: 3.7 usec per loop

$ python -m timeit -c 'from math import ldexp' 'ldexp(1.1,2)'
100000 loops, best of 3: 3.5 usec per loop
</snippet></ROW><ROW><id>1835174</id><snippet>frexp</snippet></ROW><ROW><id>1835174</id><snippet>log</snippet></ROW><ROW><id>1835174</id><snippet>ldexp</snippet></ROW><ROW><id>1835844</id><snippet>None</snippet></ROW><ROW><id>1835844</id><snippet>result</snippet></ROW><ROW><id>1835844</id><snippet>try/except</snippet></ROW><ROW><id>1835844</id><snippet>result</snippet></ROW><ROW><id>1835844</id><snippet>None</snippet></ROW><ROW><id>1835844</id><snippet>if</snippet></ROW><ROW><id>1835844</id><snippet>&gt;&gt;&gt; import timeit
&gt;&gt;&gt; timeit.timeit(stmt="1/1")
0.04962566713405181
&gt;&gt;&gt; timeit.timeit(stmt="try:\n 1/1\nexcept ZeroDivisionError:\n pass")
0.05604982855965905
&gt;&gt;&gt; timeit.timeit(stmt="try:\n 1/0\nexcept ZeroDivisionError:\n pass")
0.5701210784198825
&gt;&gt;&gt; timeit.timeit(setup="a=1", stmt="if a!=0:\n 1/1")
0.09465973809187744
&gt;&gt;&gt; timeit.timeit(setup="a=0", stmt="if a!=0:\n 1/0")
0.06740950436199
</snippet></ROW><ROW><id>1835844</id><snippet>if</snippet></ROW><ROW><id>1835844</id><snippet>try/except</snippet></ROW><ROW><id>1835844</id><snippet>Exception</snippet></ROW><ROW><id>1835844</id><snippet>try/except</snippet></ROW><ROW><id>1835844</id><snippet>Exception</snippet></ROW><ROW><id>1835844</id><snippet>try</snippet></ROW><ROW><id>1835844</id><snippet>except</snippet></ROW><ROW><id>1835848</id><snippet>HttpResponseRedirect('/accounts/login')
</snippet></ROW><ROW><id>1835848</id><snippet>usergroup</snippet></ROW><ROW><id>1835848</id><snippet>except</snippet></ROW><ROW><id>1835848</id><snippet>except:</snippet></ROW><ROW><id>1835848</id><snippet>except Exception:</snippet></ROW><ROW><id>1835848</id><snippet>if</snippet></ROW><ROW><id>1835848</id><snippet>if not request.user.is_authenticated():
    return HttpResponseRedirect('/accounts/login')
</snippet></ROW><ROW><id>1835848</id><snippet>[0]</snippet></ROW><ROW><id>1835848</id><snippet>groups= request.user.groups.all()
if len(groups)==0:
    return HttpResponseRedirect('/accounts/login')
usergroup= groups[0].name
</snippet></ROW><ROW><id>1835980</id><snippet>.py</snippet></ROW><ROW><id>1836090</id><snippet>row_key</snippet></ROW><ROW><id>1836090</id><snippet>col_key</snippet></ROW><ROW><id>1836090</id><snippet>(year, week)</snippet></ROW><ROW><id>1836090</id><snippet>import sys

class CrossTab(object):

    def __init__(
        self,
        missing=0, # what to return for an empty cell. Alternatives: '', 0.0, None, 'NULL'
        ):
        self.missing = missing
        self.col_key_set = set()
        self.cell_dict = {}
        self.headings_OK = False

    def add_item(self, row_key, col_key, value):
        self.col_key_set.add(col_key)
        try:
            self.cell_dict[row_key][col_key] += value
        except KeyError:
            try:
                self.cell_dict[row_key][col_key] = value
            except KeyError:
                self.cell_dict[row_key] = {col_key: value}

    def _process_headings(self):
        if self.headings_OK:
            return
        self.row_headings = list(sorted(self.cell_dict.iterkeys()))
        self.col_headings = list(sorted(self.col_key_set))
        self.headings_OK = True

    def get_col_headings(self):
        self._process_headings()
        return self.col_headings

    def generate_row_info(self):
        self._process_headings()
        for row_key in self.row_headings:
            row_dict = self.cell_dict[row_key]
            row_vals = [row_dict.get(col_key, self.missing) for col_key in self.col_headings]
            yield row_key, row_vals

    def dump(self, f=None, header=None, footer='', ):
        if f is None:
            f = sys.stdout
        alist = self.__dict__.items()
        alist.sort()
        if header is not None:
            print &gt;&gt; f, header
        for attr, value in alist:
            print &gt;&gt; f, "%s: %r" % (attr, value)
        if footer is not None:
            print &gt;&gt; f, footer

if __name__ == "__main__":

    data = [
        ['Rob', 'Morn', 240],
        ['Rob', 'Aft',  300],
        ['Joe', 'Morn',  70],
        ['Joe', 'Aft',   80],
        ['Jill', 'Morn', 100],
        ['Jill', 'Aft',  150],
        ['Rob', 'Aft',   40],
        ['Rob', 'aft',    5],
        ['Dozy', 'Aft',   1],
        # Dozy doesn't show up till lunch-time
        ['Nemo', 'never', -1],
        ]
    NAME, TIME, AMOUNT = range(3)
    xlate_time = {'morn': "AM", "aft": "PM"}

    print
    ctab = CrossTab(missing=None, )
    # ctab.dump(header='=== after init ===')
    for s in data:
        ctab.add_item(
            row_key=s[NAME],
            col_key= xlate_time.get(s[TIME].lower(), "XXXX"),
            value=s[AMOUNT])
        # ctab.dump(header='=== after add_item ===')
    print ctab.get_col_headings()
    # ctab.dump(header='=== after get_col_headings ===')
    for x in ctab.generate_row_info():
        print x
</snippet></ROW><ROW><id>1836090</id><snippet>['AM', 'PM', 'XXXX']
('Dozy', [None, 1, None])
('Jill', [100, 150, None])
('Joe', [70, 80, None])
('Nemo', [None, None, -1])
('Rob', [240, 345, None])
</snippet></ROW><ROW><id>1836283</id><snippet>\p{Armenian}</snippet></ROW><ROW><id>1836283</id><snippet>\p{Ll}</snippet></ROW><ROW><id>1836283</id><snippet>\p{Zs}</snippet></ROW><ROW><id>1836432</id><snippet>pow(u1.song.score - u2.song.score, 2)</snippet></ROW><ROW><id>1836432</id><snippet>sum_of_powers</snippet></ROW><ROW><id>1836432</id><snippet>1 / 1 + (sqrt(sum_of_powers))</snippet></ROW><ROW><id>1836432</id><snippet>aSong</snippet></ROW><ROW><id>1836432</id><snippet>2</snippet></ROW><ROW><id>1836432</id><snippet>4</snippet></ROW><ROW><id>1836432</id><snippet>(2,4)</snippet></ROW><ROW><id>1836432</id><snippet>A</snippet></ROW><ROW><id>1836432</id><snippet>B</snippet></ROW><ROW><id>1836432</id><snippet>y = Ax + B</snippet></ROW><ROW><id>1836432</id><snippet>A</snippet></ROW><ROW><id>1836432</id><snippet>B</snippet></ROW><ROW><id>1836531</id><snippet>from_user</snippet></ROW><ROW><id>1836531</id><snippet>from_user</snippet></ROW><ROW><id>1836531</id><snippet>to_user</snippet></ROW><ROW><id>1836531</id><snippet>from_user</snippet></ROW><ROW><id>1836531</id><snippet>to_user</snippet></ROW><ROW><id>1836672</id><snippet>pdftotext file.pdf -
</snippet></ROW><ROW><id>1836672</id><snippet>output = Popen(['pdftotext', '/home/aal/Desktop/lkn_pdf/appa.pdf', '-'], stdout=PIPE).communicate()[0]
</snippet></ROW><ROW><id>1836754</id><snippet>'^blog/0*(?P&lt;object_id&gt;\d+)/detail$'
</snippet></ROW><ROW><id>1836754</id><snippet>RewriteRule ^blog-0*([0-9]+) http://example.com/blog/$1 [R=301]
</snippet></ROW><ROW><id>1837006</id><snippet>arange</snippet></ROW><ROW><id>1837006</id><snippet>range</snippet></ROW><ROW><id>1837006</id><snippet>numpy.array</snippet></ROW><ROW><id>1837006</id><snippet>arguments = (.1, 6.3, .1)
numpy.arange(*arguments)
</snippet></ROW><ROW><id>1837474</id><snippet>div.resttext p {
    /* all the styling you want... */
}
</snippet></ROW><ROW><id>1837474</id><snippet>&lt;div class='resttext'&gt;
&lt;p&gt;Blah&lt;/p&gt;
&lt;p&gt;Bloo&lt;/p&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>1837474</id><snippet>selectorfunction</snippet></ROW><ROW><id>1837474</id><snippet>Hyphenator.config({
    selectorfunction: function () {
        /* Use jQuery to find all the REST p tags. */
        return $('div.resttext p');
        }
    });
Hyphenator.run();
</snippet></ROW><ROW><id>1837497</id><snippet>URL url = new URL("http://stackoverflow.com");
URLConnection connection = new URLConnection(url);
InputStream stream = url.openConnection();
// ... read stream like any file stream
</snippet></ROW><ROW><id>1837838</id><snippet>class Skill(models.Model):
    name = models.CharField()
    cost = models.PositiveIntegerField()
    effects = models.ManyToManyField(Effect)

class Effect(models.Model):
    description = models.CharField()
    action = models.CharField()

    # Each Django model has a ContentType.  So you could store the contenttypes of
    # the Player, Enemy, and Breakable model for example
    objects_usable_on = models.ManyToManyField(ContentType)

    def do_effect(self, **kwargs):
        // self.action contains the python module to execute
        // for example self.action = 'effects.spells.frost_damage'
        // So when called it would look like this:
        // Effect.do_effect(damage=50, target=target)
        // 'damage=50' gets passed to actions.spells.frost_damage as
        // a keyword argument    

        action = __import__(self.action)
        action(**kwargs)
</snippet></ROW><ROW><id>1837838</id><snippet>def frost_damage(**kwargs):
    if 'damage' in kwargs:
        target.life -= kwargs['damage']

        if target.left &lt;= 0:
            # etc. etc.
</snippet></ROW><ROW><id>1837896</id><snippet>0o10</snippet></ROW><ROW><id>1838609</id><snippet>new_dict = {}
for k, d in old_dict.iteritems():
    if d['check'] == 0 and d['status'] == 0:
        new_dict[k] = d
</snippet></ROW><ROW><id>1838686</id><snippet>partition(' ')</snippet></ROW><ROW><id>1838686</id><snippet>"Sico87 is an awful python developer".partition(' ')</snippet></ROW><ROW><id>1838686</id><snippet>["Sico87"," ","is an awful python developer"]</snippet></ROW><ROW><id>1838686</id><snippet>"Sico87 is an awful python developer".partition(' ')[0]</snippet></ROW><ROW><id>1838686</id><snippet>"Sico87"</snippet></ROW><ROW><id>1838686</id><snippet>split(' ',1)</snippet></ROW><ROW><id>1839180</id><snippet>wget --tries=0 --retry-connrefused $URL -O - &gt;&gt; output.txt</snippet></ROW><ROW><id>1839180</id><snippet>-O</snippet></ROW><ROW><id>1839180</id><snippet>--output-document</snippet></ROW><ROW><id>1839180</id><snippet>-</snippet></ROW><ROW><id>1839180</id><snippet>command &gt; file</snippet></ROW><ROW><id>1839180</id><snippet>command</snippet></ROW><ROW><id>1839180</id><snippet>file</snippet></ROW><ROW><id>1839180</id><snippet>command &gt;&gt; file</snippet></ROW><ROW><id>1839180</id><snippet>command</snippet></ROW><ROW><id>1839180</id><snippet>file</snippet></ROW><ROW><id>1839350</id><snippet>F: D -&gt; R</snippet></ROW><ROW><id>1839350</id><snippet>def x(foo):
    if 'bar' in foo:
        return (foo, 'bar')
     raise Exception( "oh, dear me." )
</snippet></ROW><ROW><id>1840274</id><snippet>{{ }}</snippet></ROW><ROW><id>1840274</id><snippet>class Product(models.Model):
    ...
    def get_first_name(self):
        if self.name:
           return self.name.partition(' ')[0]

        return None
</snippet></ROW><ROW><id>1840274</id><snippet>{{ product.get_first_name }}</snippet></ROW><ROW><id>1840466</id><snippet>__new__</snippet></ROW><ROW><id>1840466</id><snippet>__init__</snippet></ROW><ROW><id>1840466</id><snippet>__new__</snippet></ROW><ROW><id>1840466</id><snippet>__init__</snippet></ROW><ROW><id>1840712</id><snippet>class User(object): ...
</snippet></ROW><ROW><id>1840712</id><snippet>class User: ...
</snippet></ROW><ROW><id>1840756</id><snippet>PKI</snippet></ROW><ROW><id>1840756</id><snippet>test_rsa.py</snippet></ROW><ROW><id>1840756</id><snippet>.pem</snippet></ROW><ROW><id>1841022</id><snippet>.original</snippet></ROW><ROW><id>1841055</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; urllib2._opener.handlers[1].set_http_debuglevel(100)
&gt;&gt;&gt; urllib2.urlopen('http://mit.edu').read()[:10]
connect: (mit.edu, 80)
send: 'GET / HTTP/1.1
</snippet></ROW><ROW><id>1841330</id><snippet>i</snippet></ROW><ROW><id>1841330</id><snippet>i</snippet></ROW><ROW><id>1841330</id><snippet>i = 13
print b[3]()
</snippet></ROW><ROW><id>1841330</id><snippet>makeFun</snippet></ROW><ROW><id>1841330</id><snippet>i</snippet></ROW><ROW><id>1841330</id><snippet>i</snippet></ROW><ROW><id>1842041</id><snippet>url</snippet></ROW><ROW><id>1842041</id><snippet>,</snippet></ROW><ROW><id>1842041</id><snippet>&gt;&gt;&gt; tup = (url, first, middle, last, rank, words, city, school, year)
&gt;&gt;&gt; tup
('http://www.examplefirm.com/jang', 'Joe', 'E.', 'Ang', 'partner', 
['privatization mergers', 'media &amp; technology'], 'New York', 
'University of Chicago Law School', '1985')
</snippet></ROW><ROW><id>1842548</id><snippet>django.core.urlresolvers.reverse</snippet></ROW><ROW><id>1842548</id><snippet>&gt;&gt;&gt; from django.core.urlresolvers import reverse
&gt;&gt;&gt; reverse('products.views.filter_by_led')
</snippet></ROW><ROW><id>1842575</id><snippet>import platform
platform.architecture()
</snippet></ROW><ROW><id>1842655</id><snippet>~/.buildout/default.cfg</snippet></ROW><ROW><id>1842655</id><snippet>deploy.cfg</snippet></ROW><ROW><id>1842655</id><snippet>buildout.cfg</snippet></ROW><ROW><id>1842655</id><snippet>buildout.cfg</snippet></ROW><ROW><id>1842655</id><snippet>[buildout]
  extends = buildout.cfg
  parts += 
      startup-cronjob

  [instance]
  # Some changes, like port number.
  http-address = 13080
  debug-mode = off
  verbose-security = off

  [startup-cronjob]
  # Example part that's new to the deploy.cfg, it wasn't in buildout.cfg.
  recipe = z3c.recipe.usercrontab
  times = @reboot
  command = ${buildout:directory}/bin/supervisord
</snippet></ROW><ROW><id>1842666</id><snippet>available</snippet></ROW><ROW><id>1842666</id><snippet>taken</snippet></ROW><ROW><id>1842666</id><snippet>purchased</snippet></ROW><ROW><id>1842666</id><snippet>taken</snippet></ROW><ROW><id>1842666</id><snippet>available</snippet></ROW><ROW><id>1842666</id><snippet>purchased</snippet></ROW><ROW><id>1842721</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>1842721</id><snippet>import re


s_pat = "^\s*REPLACE\(([^)]+)\)(.*)$"
pat = re.compile(s_pat, re.MULTILINE)

s_input = """\
Hello
REPLACE(str1) this is to replace
REPLACE(str2) this is to replace"""


def mksub(m):
    return '&lt;replace name="%s"&gt;%s&lt;/replace&gt;' % m.groups()


s_output = re.sub(pat, mksub, s_input)
</snippet></ROW><ROW><id>1842721</id><snippet>^</snippet></ROW><ROW><id>1842721</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>1842721</id><snippet>\s*</snippet></ROW><ROW><id>1842721</id><snippet>REPLACE</snippet></ROW><ROW><id>1842721</id><snippet>\(</snippet></ROW><ROW><id>1842721</id><snippet>(</snippet></ROW><ROW><id>1842721</id><snippet>[^)]</snippet></ROW><ROW><id>1842721</id><snippet>+</snippet></ROW><ROW><id>1842721</id><snippet>)</snippet></ROW><ROW><id>1842721</id><snippet>\)</snippet></ROW><ROW><id>1842721</id><snippet>(.*)</snippet></ROW><ROW><id>1842721</id><snippet>$</snippet></ROW><ROW><id>1842721</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>1842721</id><snippet>.</snippet></ROW><ROW><id>1842721</id><snippet>*</snippet></ROW><ROW><id>1842721</id><snippet>.*</snippet></ROW><ROW><id>1842721</id><snippet>re.sub()</snippet></ROW><ROW><id>1842721</id><snippet>mksub()</snippet></ROW><ROW><id>1842721</id><snippet>.groups()</snippet></ROW><ROW><id>1842721</id><snippet>\1</snippet></ROW><ROW><id>1842721</id><snippet>\1</snippet></ROW><ROW><id>1842721</id><snippet>\</snippet></ROW><ROW><id>1842721</id><snippet>\</snippet></ROW><ROW><id>1842721</id><snippet>"\\1"</snippet></ROW><ROW><id>1842721</id><snippet>s_pat = "^\s*REPLACE\(([^)]+)\)(.*)$"
pat = re.compile(s_pat, re.MULTILINE)

s_repl = r'&lt;replace name="\1"&gt;\2&lt;/replace&gt;'

s_input = """\
Hello
REPLACE(str1) this is to replace
REPLACE(str2) this is to replace"""


s_output = re.sub(pat, s_repl, s_input)
</snippet></ROW><ROW><id>1842976</id><snippet>#include &lt;iostream&gt;
#include &lt;map&gt;

typedef std::map&lt;std::pair&lt;int, int&gt;, int&gt; Dict;
typedef Dict::const_iterator It;

int main()
{
   Dict d;

   d[std::make_pair(0, 0)] = 0;
   d[std::make_pair(1, 2)] = 1;
   d[std::make_pair(2, 1)] = 2;
   d[std::make_pair(2, 3)] = 3;
   d[std::make_pair(3, 2)] = 4;

   for (It it(d.begin()); it != d.end(); ++it)
   {
      int i(it-&gt;first.first);
      int j(it-&gt;first.second);
      std::cout &lt;&lt;it-&gt;second &lt;&lt;' '
                &lt;&lt;d[std::make_pair(j, i)] &lt;&lt;'\n';
   }
}
</snippet></ROW><ROW><id>1842999</id><snippet>string.maketrans</snippet></ROW><ROW><id>1842999</id><snippet>string.translate</snippet></ROW><ROW><id>1842999</id><snippet>string.maketrans</snippet></ROW><ROW><id>1842999</id><snippet>utf-8</snippet></ROW><ROW><id>1842999</id><snippet>utf-8</snippet></ROW><ROW><id>1842999</id><snippet>å</snippet></ROW><ROW><id>1842999</id><snippet>a</snippet></ROW><ROW><id>1842999</id><snippet>string.maketrans</snippet></ROW><ROW><id>1842999</id><snippet>len(str(argument))</snippet></ROW><ROW><id>1842999</id><snippet># -*- coding: utf-8 -*-
</snippet></ROW><ROW><id>1842999</id><snippet>intab =  u"ÀÁÂÃÄÅàáâãäåÒÓÔÕÖØòóôõöøÈÉÊËèéêëÇçÌÍÎÏìíîïÙÚÛÜùúûüÿÑñ"
outtab = u"aaaaaaaaaaaaooooooooooooeeeeeeeecciiiiiiiiuuuuuuuuynn"
trantab = dict((ord(a), b) for a, b in zip(intab, outtab))
translated = intab.translate(trantab)
translated == outtab # True
</snippet></ROW><ROW><id>1843191</id><snippet>echo "hello - world" | ./mapper.py  | sort | ./reducer.py
</snippet></ROW><ROW><id>1843191</id><snippet>if word =='': continue
for c in string.punctuation:
           word= word.replace(c,'')
</snippet></ROW><ROW><id>1843191</id><snippet>word</snippet></ROW><ROW><id>1843255</id><snippet>show()</snippet></ROW><ROW><id>1843255</id><snippet>savefig('output.jpg')
show()
</snippet></ROW><ROW><id>1843255</id><snippet>savefig()</snippet></ROW><ROW><id>1843255</id><snippet>show()</snippet></ROW><ROW><id>1843511</id><snippet>urllib.request.urlopen('http://www.python.org/')
</snippet></ROW><ROW><id>1843671</id><snippet>continue</snippet></ROW><ROW><id>1843671</id><snippet>break</snippet></ROW><ROW><id>1843671</id><snippet>pass</snippet></ROW><ROW><id>1843671</id><snippet>break</snippet></ROW><ROW><id>1843671</id><snippet>continue</snippet></ROW><ROW><id>1844006</id><snippet>sudo apt-get install webcam
</snippet></ROW><ROW><id>1844095</id><snippet>start_here</snippet></ROW><ROW><id>1844095</id><snippet>from django.template import RequestContext

def start_here(request):
    return render_to_response("profile.html", {},
        context_instance=RequestContext(request))
</snippet></ROW><ROW><id>1844095</id><snippet>user</snippet></ROW><ROW><id>1844095</id><snippet>{% if auth %}
</snippet></ROW><ROW><id>1844095</id><snippet>{% if user.is_authenticated %}
</snippet></ROW><ROW><id>1844441</id><snippet>row = OpenThisLink + titleTag + JD</snippet></ROW><ROW><id>1844441</id><snippet>try:
    row = OpenThisLink + titleTag + JD
    csvwriter.writerow([row])
except (UnicodeEncodeError, UnicodeDecodeError):
    print "Caught unicode error"
</snippet></ROW><ROW><id>1844441</id><snippet>row = OpenThisLink + titleTag + JD</snippet></ROW><ROW><id>1844441</id><snippet>titleTag</snippet></ROW><ROW><id>1844441</id><snippet>writerow()</snippet></ROW><ROW><id>1844441</id><snippet>writerow()</snippet></ROW><ROW><id>1844441</id><snippet>&gt;&gt;&gt; titleTag = "hello Giliciński"
&gt;&gt;&gt; titleTag
'hello Gilici\xc5\x84ski'
&gt;&gt;&gt; type(titleTag)
&lt;type 'str'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; titleTag = titleTag.decode('utf8')
&gt;&gt;&gt; titleTag
u'hello Gilici\u0144ski'
&gt;&gt;&gt; type(titleTag)
&lt;type 'unicode'&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; csvwriter.writerow([titleTag])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
UnicodeEncodeError: 'ascii' codec can't encode character u'\u0144' in position 12: ordinal not in range(128)
&gt;&gt;&gt;
&gt;&gt;&gt; # but this will work...
&gt;&gt;&gt; csvwriter.writerow([titleTag.encode('utf8')])
</snippet></ROW><ROW><id>1844441</id><snippet>pyshell</snippet></ROW><ROW><id>1844475</id><snippet>printf "$(python read_one.py)" | xvkbd -file -
</snippet></ROW><ROW><id>1844713</id><snippet>fn(*args)
</snippet></ROW><ROW><id>1845000</id><snippet>pylab.quiver(X,Y,(1,1,1),(1,1,1), scale=2**.5, units='y')
</snippet></ROW><ROW><id>1845422</id><snippet>import urllib.request
from tkinter import *
from tkinter.tix import *

root = Tk()
root.iconbitmap(default='icon.ico')
root.wm_title('Got Skills\' Skill Tracker')
frame = Frame(width="500",height="500")
frame.pack()
swin = ScrolledWindow(frame, width=500, height=500)
swin.pack()
win = swin.window


def show():
  name = "zezima"
  page = urllib.request.urlopen('http://hiscore.runescape.com/index_lite.ws?player=' + name)
  page = page.readlines()

  skills = []
  for line in page:
    skills.append([line.decode("utf-8").replace("\n", "").split(",")])

  skills = skills[0:25]

  for item in skills:
    toPrint = item[0][0],"-",item[0][1],"-",item[0][1]
    w = Message(win, text=' '.join(toPrint), width=500)
    w.pack()


menu = Menu(root)
root.config(menu=menu)

filemenu = Menu(menu)
menu.add_cascade(label="Commands", menu=filemenu)
filemenu.add_command(label="Show Skills", command=show)


root.mainloop()
</snippet></ROW><ROW><id>1845473</id><snippet>source</snippet></ROW><ROW><id>1845540</id><snippet>prefix_with()</snippet></ROW><ROW><id>1845540</id><snippet>t = Table(
    't', metadata,
    Column('id', Integer, primary_key=True),
    # ...
    prefixes=['TEMPORARY'],
)
</snippet></ROW><ROW><id>1845729</id><snippet># module_a.py
import module_b

def foo():
    return "bar"

def bar():
    return module_b.baz()

# module_b.py
def baz():
    import module_a
    return module_a.foo()
</snippet></ROW><ROW><id>1845729</id><snippet>def get_cached(model, **kwargs):
    timeout = kwargs.pop('timeout', 60 * 60)
    key = '%s:%s' % (model, kwargs)
    result = cache.get(key)
    if result is None:
        result = model.objects.get(**kwargs)
        cache.set(key, result, timeout)
    return result
</snippet></ROW><ROW><id>1845729</id><snippet>blog_entry = get_cached(BlogEntry, pk = 4)
</snippet></ROW><ROW><id>1845856</id><snippet>import nautilus

class ExampleMenuProvider(nautilus.MenuProvider):
    def __init__(self):
        pass

    def get_file_items(self, window, files):
        submenu = nautilus.Menu()

        item = nautilus.MenuItem('Nautilus::sbi','Nau-T','image')
        item.set_submenu(submenu)

        item_two = nautilus.MenuItem('Nautilus::s','www','image')
        submenu.append_item(item_two)

        return item,
</snippet></ROW><ROW><id>1846725</id><snippet>.read</snippet></ROW><ROW><id>1846725</id><snippet>Browswer.response</snippet></ROW><ROW><id>1846725</id><snippet>read</snippet></ROW><ROW><id>1846725</id><snippet>response = br.response()
response.read()
</snippet></ROW><ROW><id>1846725</id><snippet>dir(obj)</snippet></ROW><ROW><id>1846725</id><snippet>obj</snippet></ROW><ROW><id>1846896</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.executable
'C:\\Program Files\\Python31\\pythonw.exe'
</snippet></ROW><ROW><id>1847094</id><snippet>#! /usr/bin/env python
# coding: utf-8

# Author: João S. O. Bueno
# Copyright (c) 2009 - Fundação CPqD
# License: LGPL V3.0


from types import ModuleType, FunctionType, ClassType
import sys

def find_dependent_modules():
    """gets a one level inversed module dependence tree"""
    tree = {}
    for module in sys.modules.values():
        if module is None:
            continue
        tree[module] = set()
        for attr_name in dir(module):
            attr = getattr(module, attr_name)
            if isinstance(attr, ModuleType):
                tree[module].add(attr)
            elif type(attr) in (FunctionType, ClassType):        
                tree[module].add(attr.__module__)
    return tree


def get_reversed_first_level_tree(tree):
    """Creates a one level deep straight dependence tree"""
    new_tree = {}
    for module, dependencies in tree.items():
        for dep_module in dependencies:
            if dep_module is module:
                continue
            if not dep_module in new_tree:
                new_tree[dep_module] = set([module])
            else:
                new_tree[dep_module].add(module)
    return new_tree

def find_dependants_recurse(key, rev_tree, previous=None):
    """Given a one-level dependance tree dictionary,
       recursively builds a non-repeating list of all dependant
       modules
    """
    if previous is None:
        previous = set()
    if not key in rev_tree:
        return []
    this_level_dependants = set(rev_tree[key])
    next_level_dependants = set()
    for dependant in this_level_dependants:
        if dependant in previous:
            continue
        tmp_previous = previous.copy()
        tmp_previous.add(dependant)
        next_level_dependants.update(
             find_dependants_recurse(dependant, rev_tree,
                                     previous=tmp_previous,
                                    ))
    # ensures reloading order on the final list
    # by postponing the reload of modules in this level
    # that also appear later on the tree
    dependants = (list(this_level_dependants.difference(
                        next_level_dependants)) +
                  list(next_level_dependants))
    return dependants

def get_reversed_tree():
    """
        Yields a dictionary mapping all loaded modules to
        lists of the tree of modules that depend on it, in an order
        that can be used fore reloading
    """
    tree = find_dependent_modules()
    rev_tree = get_reversed_first_level_tree(tree)
    compl_tree = {}
    for module, dependant_modules in rev_tree.items():
        compl_tree[module] = find_dependants_recurse(module, rev_tree)
    return compl_tree

def reload_dependences(module):
    """
        reloads given module and all modules that
        depend on it, directly and otherwise.
    """
    tree = get_reversed_tree()
    reload(module)
    for dependant in tree[module]:
        reload(dependant)
</snippet></ROW><ROW><id>1847244</id><snippet>pydb --fntrace --batch &lt;scriptname&gt;</snippet></ROW><ROW><id>1847330</id><snippet>from django.db import connection
tables = connection.introspection.table_names()
seen_models = connection.introspection.installed_models(tables)
</snippet></ROW><ROW><id>1847817</id><snippet>from django.utils.encoding import smart_str
...

 response['Content-Disposition'] = 'attachment; filename=%s' % smart_str(filename)
</snippet></ROW><ROW><id>1848454</id><snippet>dragLeaveEvent</snippet></ROW><ROW><id>1848497</id><snippet>tre.write('temp.xml', encoding='utf-8')
</snippet></ROW><ROW><id>1848497</id><snippet>lxml</snippet></ROW><ROW><id>1848647</id><snippet>&gt;&gt;&gt; class A: x = 'a'
... 
&gt;&gt;&gt; class B(A): pass
... 
&gt;&gt;&gt; class C(A): x = 'c'
... 
&gt;&gt;&gt; class D(B, C): pass
... 
&gt;&gt;&gt; D.x
'a'
</snippet></ROW><ROW><id>1848647</id><snippet>&gt;&gt;&gt; class A(object): x = 'a'
... 
&gt;&gt;&gt; class B(A): pass
... 
&gt;&gt;&gt; class C(A): x = 'c'
... 
&gt;&gt;&gt; class D(B, C): pass
... 
&gt;&gt;&gt; D.x
'c'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1848647</id><snippet>&gt;&gt;&gt; D.__mro__
(&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;)
</snippet></ROW><ROW><id>1848647</id><snippet>A</snippet></ROW><ROW><id>1848647</id><snippet>x</snippet></ROW><ROW><id>1848740</id><snippet>from __future__ import absolute_import</snippet></ROW><ROW><id>1848740</id><snippet>x</snippet></ROW><ROW><id>1848740</id><snippet>sys.modules['x']</snippet></ROW><ROW><id>1848740</id><snippet>$ cat a/foo.py
print __file__; import sys; sys.path.insert(0, "b"); del sys.modules["foo"]; import foo
$ cat b/foo.py
print __file__
$ python2.5 -c'import sys; sys.path.insert(0, "a"); import foo'
a/foo.py
b/foo.py
</snippet></ROW><ROW><id>1848740</id><snippet>sys.modules["foo"]</snippet></ROW><ROW><id>1848740</id><snippet>sys.modules["foo"]</snippet></ROW><ROW><id>1849154</id><snippet>QScrollArea.setWidget</snippet></ROW><ROW><id>1849154</id><snippet>    diff -u 1848547.py  tmp2.py
--- 1848547.py  2009-12-04 11:19:09.000000000 -0800
+++ tmp2.py 2009-12-04 11:34:58.000000000 -0800
@@ -19,7 +19,6 @@
     simfileInfoPane.setLayout(simfileInfoGrid)

     simfileInfoScrollArea = QtGui.QScrollArea()
-    simfileInfoScrollArea.setWidget(simfileInfoPane)
     #if DEBUG: 
     simfileInfoScrollArea.setBackgroundRole(QtGui.QPalette.Dark)

@@ -33,6 +32,8 @@
       simfileInfoGrid.addWidget(labels[i], i, 0)
       simfileInfoGrid.addWidget(textfields[i], i, 1)

+    simfileInfoScrollArea.setWidget(simfileInfoPane)
+
     ## Put widgets in a grid layout.
     mainvbox = QtGui.QVBoxLayout()
     mainvbox.addWidget(simfileInfoScrollArea)
</snippet></ROW><ROW><id>1849313</id><snippet># -*- coding: utf-8 -*-

def subpairs(s, prefix, suffix):
    def sub(i, sentinal=object()):
        r = prefix.get(s[i:i+2], sentinal)
        if r is not sentinal: return r

        r = suffix.get(s[i-1:i+1], sentinal)
        if r is not sentinal: return r
        return s[i]

    s = '\0'+s+'\0'
    return ''.join(sub(i) for i in xrange(1,len(s)))

vowels = [(v+v, u':') for v in 'aeiou']

prefix = {}
suffix = {'na':u'ö'}
suffix.update(vowels)
print subpairs('natarook', prefix, suffix)
# prints: nötaro:k

prefix = {'na':u'ö'}
suffix = dict(vowels)
print subpairs('natarook', prefix, suffix)
# prints: öataro:k
</snippet></ROW><ROW><id>1849418</id><snippet>dict.items()</snippet></ROW><ROW><id>1849446</id><snippet>import</snippet></ROW><ROW><id>1849446</id><snippet>import xml.sax</snippet></ROW><ROW><id>1849446</id><snippet>xml.sax.ContentHandler</snippet></ROW><ROW><id>1849446</id><snippet>require 'xml'</snippet></ROW><ROW><id>1849446</id><snippet>XML</snippet></ROW><ROW><id>1849446</id><snippet>xml.sax.ContentHandler</snippet></ROW><ROW><id>1849446</id><snippet>import xml.sax as X
</snippet></ROW><ROW><id>1849446</id><snippet>X.ContentHandler</snippet></ROW><ROW><id>1849446</id><snippet>machine</snippet></ROW><ROW><id>1849446</id><snippet>interface</snippet></ROW><ROW><id>1849446</id><snippet>process/__init__.py</snippet></ROW><ROW><id>1849446</id><snippet>from process.interface import *
from process.machine import Machine, HelperMachine
</snippet></ROW><ROW><id>1849446</id><snippet>process.machine.Machine</snippet></ROW><ROW><id>1849446</id><snippet>process.Machine</snippet></ROW><ROW><id>1849446</id><snippet>process.interface</snippet></ROW><ROW><id>1849446</id><snippet>process</snippet></ROW><ROW><id>1849446</id><snippet>import</snippet></ROW><ROW><id>1849474</id><snippet>session.execute('INSERT INTO t1 (SELECT * FROM t2)')
</snippet></ROW><ROW><id>1849474</id><snippet>from sqlalchemy.ext import compiler
from sqlalchemy.sql.expression import Executable, ClauseElement

class InsertFromSelect(Executable, ClauseElement):
    def __init__(self, table, select):
        self.table = table
        self.select = select

@compiler.compiles(InsertFromSelect)
def visit_insert_from_select(element, compiler, **kw):
    return "INSERT INTO %s (%s)" % (
        compiler.process(element.table, asfrom=True),
        compiler.process(element.select)
    )

insert = InsertFromSelect(t1, select([t1]).where(t1.c.x&gt;5))
print insert
</snippet></ROW><ROW><id>1849474</id><snippet>"INSERT INTO mytable (SELECT mytable.x, mytable.y, mytable.z FROM mytable WHERE mytable.x &gt; :x_1)"
</snippet></ROW><ROW><id>1849474</id><snippet>select()</snippet></ROW><ROW><id>1849474</id><snippet>from_select()</snippet></ROW><ROW><id>1849474</id><snippet>Insert</snippet></ROW><ROW><id>1849474</id><snippet>&gt;&gt;&gt; from sqlalchemy.sql import table, column
&gt;&gt;&gt; t1 = table('t1', column('a'), column('b'))
&gt;&gt;&gt; t2 = table('t2', column('x'), column('y'))
&gt;&gt;&gt; print(t1.insert().from_select(['a', 'b'], t2.select().where(t2.c.y == 5)))
INSERT INTO t1 (a, b) SELECT t2.x, t2.y
FROM t2
WHERE t2.y = :y_1
</snippet></ROW><ROW><id>1849479</id><snippet>from django.core.cache import cache
from django.db.models.query import QuerySet
try:
    from cPickle import dumps
except:
    from pickle import dumps
from hashlib import sha1

cache_miss = object()

class CantPickleAQuerySet(Exception): pass

def cache_function(cache_timeout, func_type='generic'):
    def wrapper(fn):
        def decorator(*args, **kwargs):
            try:
                cache_indentifiers = "%s%s%s%s" % (
                                         fn.__module__,
                                         fn.__name__,
                                         dumps(args),
                                         dumps(kwargs)
                                         )
            except Exception, e:
                print "Error: %s\nFailed to generate cache key: %s%s" % (e, fn.__module__, fn.__name__)
                return fn(*args, **kwargs)

            cache_key = sha1(cache_indentifiers).hexdigest()

            value = cache.get(cache_key, cache_miss)

            if value is cache_miss:
                value = fn(*args, **kwargs)

                if isinstance(value, QuerySet):
                    raise CantPickleAQuerySet("You can't cache a queryset. But you CAN cache a list! just convert your Queryset (the value you were returning) to a list like so `return list(queryset)`")

                try:
                    cache.set(cache_key, value, cache_timeout)
                except Exception, e:
                    print "Error: %s\nFailed to cache: %s\nvalue: %s" % (e, cache_indentifiers, value)

            return value

        no_arg2 = object()
        def filter_decorator(arg1, arg2=no_arg2):
            if arg2 is no_arg2:
                return decorator(arg1)
            else:
                return decorator(arg1, arg2)

        if func_type == 'generic':
            return decorator

        elif func_type == 'filter':
            return filter_decorator

    return wrapper
</snippet></ROW><ROW><id>1849487</id><snippet>complement(union(complement(A),complement(B)))</snippet></ROW><ROW><id>1849487</id><snippet>A -&gt;a B</snippet></ROW><ROW><id>1849487</id><snippet>X -&gt;a Y</snippet></ROW><ROW><id>1849487</id><snippet>(A,X) -&gt;a (B,Y)</snippet></ROW><ROW><id>1849487</id><snippet>(C,Z)</snippet></ROW><ROW><id>1849487</id><snippet>(A,X)</snippet></ROW><ROW><id>1849487</id><snippet>A -&gt;epsilon B</snippet></ROW><ROW><id>1849487</id><snippet>(A,Y)</snippet></ROW><ROW><id>1849487</id><snippet>(A,Y) -&gt;epsilon (B,Y)</snippet></ROW><ROW><id>1849487</id><snippet>regexp1|regexp2|regexp3</snippet></ROW><ROW><id>1849695</id><snippet>letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789/.'
salt = letters[rand letters.length].chr + letters[rand letters.length].chr

password = "bla"

puts password.crypt(salt)
</snippet></ROW><ROW><id>1849817</id><snippet>l = [1,2,3,4,5,6,7]
n = 5
newlist = [l[i:i+n] for i in range(0,len(l),n)]
</snippet></ROW><ROW><id>1850161</id><snippet>Button.Button</snippet></ROW><ROW><id>1850161</id><snippet>import pyjamas.ui.Button
</snippet></ROW><ROW><id>1850161</id><snippet>from pyjamas.ui import Button
</snippet></ROW><ROW><id>1850161</id><snippet>pyjamas.ui.Button.Button</snippet></ROW><ROW><id>1850161</id><snippet>import</snippet></ROW><ROW><id>1850252</id><snippet>for item in (x.attr for x in some_list):
    do_something_with(item)
</snippet></ROW><ROW><id>1850306</id><snippet>foo</snippet></ROW><ROW><id>1850306</id><snippet>bob</snippet></ROW><ROW><id>1850306</id><snippet>classobj</snippet></ROW><ROW><id>1850306</id><snippet>bob</snippet></ROW><ROW><id>1850306</id><snippet># example using new-style classes, which are recommended over old-style
class bob(object):
    pass

foo = bob()
print type(foo).__name__
'bob'
</snippet></ROW><ROW><id>1850306</id><snippet>bob</snippet></ROW><ROW><id>1850306</id><snippet>print bob.__name__
'bob'
</snippet></ROW><ROW><id>1850306</id><snippet>bob</snippet></ROW><ROW><id>1850306</id><snippet>__name__</snippet></ROW><ROW><id>1850455</id><snippet>urllib2</snippet></ROW><ROW><id>1850455</id><snippet>simplejson</snippet></ROW><ROW><id>1850485</id><snippet>class no_share(object):
    def __init__(self, arg1):
        self.arg1 = arg1

    def __call__(self, f):
        """Don't let them in if it's shared"""

        # Do something with the argument passed to the decorator.
        print 'Decorator arguments:', self.arg1

        def wrapped_f(request, *args, **kwargs):
            if kwargs.get('shared', True):
                from django.http import Http404
                raise Http404('not availiable for sharing')
            f(request, *args, **kwargs)            
        return wrapped_f
</snippet></ROW><ROW><id>1850485</id><snippet>@no_share('prefs')
def prefs(request, [...])
</snippet></ROW><ROW><id>1850651</id><snippet>chil.temp = 13
</snippet></ROW><ROW><id>1851498</id><snippet>merge()</snippet></ROW><ROW><id>1851498</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *

metadata = MetaData()

t = Table(
    't', metadata,
    Column('id', Integer, primary_key=True),
    Column('state', String(10)),
)

class Model(object): pass

mapper(Model, t)

engine = create_engine('sqlite://')
metadata.create_all(engine)

session = sessionmaker(bind=engine)()

obj1 = Model()
obj1.state = 'value1'
session.add(obj1)
session.commit()
obj_id = obj1.id

obj2 = Model()
obj2.id = obj_id
obj2.state = 'value2'
obj3 = session.merge(obj2)
session.commit()
print obj3 is obj1, obj3 is obj2
print obj3.state
</snippet></ROW><ROW><id>1851498</id><snippet>True False
value2
</snippet></ROW><ROW><id>1851498</id><snippet>session.merge(obj2)</snippet></ROW><ROW><id>1851498</id><snippet>obj1</snippet></ROW><ROW><id>1851498</id><snippet>obj2</snippet></ROW><ROW><id>1851498</id><snippet># ...skipped...

t = Table(
    't', metadata,
    Column('id', Integer, primary_key=True),
    Column('state1', String(10)),
    Column('state2', String(10)),
)

# ...skipped...

obj1 = Model()
obj1.state1 = 'value1-1'
obj1.state2 = 'value2-1'
session.add(obj1)
session.commit()
obj_id = obj1.id
session.expunge_all()

obj2 = Model()
obj2.id = obj_id
obj2.state1 = 'value1-2'
obj3 = session.merge(obj2)
session.commit()
print obj3 is obj1, obj3 is obj2
print obj3.state1, obj3.state2
</snippet></ROW><ROW><id>1851498</id><snippet>False False
value1-2 value2-1
</snippet></ROW><ROW><id>1851498</id><snippet>merge()</snippet></ROW><ROW><id>1851645</id><snippet>&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; now = datetime.now()
&gt;&gt;&gt; now
datetime.datetime(2009, 12, 4, 23, 3, 27, 343000)
&gt;&gt;&gt; now.microsecond
343000
</snippet></ROW><ROW><id>1851645</id><snippet>&gt;&gt;&gt; now.strftime("%Y-%m-%d %H:%M:%S.%f").rstrip('0')
'2009-12-04 23:03:27.343'
</snippet></ROW><ROW><id>1851645</id><snippet>&gt;&gt;&gt; span = timedelta(seconds=3662.567)
&gt;&gt;&gt; span
datetime.timedelta(0, 3662, 567000)
</snippet></ROW><ROW><id>1851645</id><snippet>basetime = datetime(2000,1,1,0,0,0)</snippet></ROW><ROW><id>1851838</id><snippet>In [1]: from geopy import geocoders

In [2]: g = geocoders.Google(GOOGLE_MAPS_API_KEY)

In [3]: (place, point) = g.geocode('Eiffel Tower, Paris')
Fetching http://maps.google.com/maps/geo?q=Eiffel+Tower%2C+Paris&amp;output=kml&amp;key=XYZ...

In [4]: print point
------&gt; print(point)
(48.858204999999998, 2.294359)
</snippet></ROW><ROW><id>1852777</id><snippet>class UnitFloat(float):

    def __new__(self, value, unit=None):
       return float.__new__(self, value)

    def __init__(self, value, unit=None):
        self.unit = unit


x = UnitFloat(35.5, "cm")
y = UnitFloat(42.5)

print x
print x.unit

print y
print y.unit

print x + y
</snippet></ROW><ROW><id>1852777</id><snippet>35.5
cm
42.5
None
78.0
</snippet></ROW><ROW><id>1852969</id><snippet>#!/bin/bash
if [ -f "pidfile" ]; then
    kill `cat -- pidfile`
    rm -f -- pidfile
fi
exec python manage.py runfcgi host=127.0.0.1 port=8081 pidfile=pidfile --settings=settings
</snippet></ROW><ROW><id>1853168</id><snippet>    notes = Notification.objects.filter(user=self.user)
    for note in notes[4:]:
        note.delete()
</snippet></ROW><ROW><id>1853278</id><snippet>__init__</snippet></ROW><ROW><id>1853278</id><snippet>def __init__(self, firstName, lastName, age, studentID, degree):
    self.firstName = firstName
    self.lastName = lastName
    ...
    self.grades = {}
</snippet></ROW><ROW><id>1853278</id><snippet>    while True:
        module_name = raw_input("Please enter the student's module name: ")
        if not module_name:
            break
        grade = raw_input("Please enter the grade for %s: " % module_name)
        student.grades[module_name] = grade
</snippet></ROW><ROW><id>1853365</id><snippet>&gt;&gt;&gt; b'\x80abc'.decode("utf-8", "strict")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
UnicodeDecodeError: 'utf8' codec can't decode byte 0x80 in position 0:
                    unexpected code byte
&gt;&gt;&gt; b'\x80abc'.decode("utf-8", "replace")
'\ufffdabc'
&gt;&gt;&gt; b'\x80abc'.decode("utf-8", "ignore")
'abc'
</snippet></ROW><ROW><id>1853365</id><snippet>&gt;&gt;&gt; u = chr(40960) + 'abcd' + chr(1972)
&gt;&gt;&gt; u.encode('utf-8')
b'\xea\x80\x80abcd\xde\xb4'
&gt;&gt;&gt; u.encode('ascii')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
UnicodeEncodeError: 'ascii' codec can't encode character '\ua000' in
                    position 0: ordinal not in range(128)
&gt;&gt;&gt; u.encode('ascii', 'ignore')
b'abcd'
&gt;&gt;&gt; u.encode('ascii', 'replace')
b'?abcd?'
&gt;&gt;&gt; u.encode('ascii', 'xmlcharrefreplace')
b'ꀀabcd޴'
</snippet></ROW><ROW><id>1853687</id><snippet>wget -r</snippet></ROW><ROW><id>1854263</id><snippet>try:
    self.result = self.do_something_dangerous()
except Exception, e:
    import sys
    self.exc_info = sys.exc_info()
</snippet></ROW><ROW><id>1854263</id><snippet>if self.exc_info:
    raise self.exc_info[1], None, self.exc_info[2]
return self.result
</snippet></ROW><ROW><id>1854453</id><snippet>instance</snippet></ROW><ROW><id>1854453</id><snippet>instance</snippet></ROW><ROW><id>1854453</id><snippet>author</snippet></ROW><ROW><id>1854453</id><snippet>commit=False</snippet></ROW><ROW><id>1854453</id><snippet>@login_required
def edit(request, id=None, template_name='article_edit_template.html'):
    if id:
        article = get_object_or_404(Article, pk=id)
        if article.author != request.user:
            return HttpResponseForbidden()
    else:
        article = Article(author=request.user)

    if request.POST:
        form = ArticleForm(request.POST, instance=article)
        if form.is_valid():
            form.save()

            # If the save was successful, redirect to another page
            redirect_url = reverse(article_save_success)
            return HttpResponseRedirect(redirect_url)

    else:
        form = ArticleForm(instance=article)

    return render_to_response(template_name, {
        'form': form,
    }, context_instance=RequestContext(request))
</snippet></ROW><ROW><id>1854453</id><snippet>urls.py</snippet></ROW><ROW><id>1854453</id><snippet>(r'^article/new/$', views.edit, {}, 'article_new'),
(r'^article/edit/(?P&lt;id&gt;\d+)/$', views.edit, {}, 'article_edit'),
</snippet></ROW><ROW><id>1854453</id><snippet>edit</snippet></ROW><ROW><id>1854453</id><snippet>author</snippet></ROW><ROW><id>1854453</id><snippet>class ArticleForm(forms.ModelForm):
    class Meta:
        model=Article
        exclude=('author',)
</snippet></ROW><ROW><id>1854666</id><snippet>app = QApplication</snippet></ROW><ROW><id>1854666</id><snippet>proc = QProcess</snippet></ROW><ROW><id>1854666</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>1854666</id><snippet>import os, sys, textwrap

from PyQt4 import QtGui, QtCore

out_file = open("sleep_loop.py", 'w')
out_file.write(textwrap.dedent("""
    import time, sys

    while True:
        print "sleeping..."
        sys.stdout.flush()
        time.sleep(1)"""))
out_file.close()

def started():
    print "started"

def on_error(error):
    errors = ["Failed to start", "Crashed", "Timedout", "Read error", 
              "Write Error", "Unknown Error"]
    print "error: ", errors[error]              

def on_state_change(new_state):
    states = ["Not running", "Starting", "Running"]
    print "new state: ", states[new_state]

def on_out():
    print "got out"

app = QtGui.QApplication(sys.argv)
proc = QtCore.QProcess()
sig = QtCore.SIGNAL
proc.connect(proc, sig("started()"), started)
proc.connect(proc, sig("error(ProcessError)"), on_error)
proc.connect(proc, sig("readyReadStandardOutput()"), on_out)
proc.connect(proc, sig("stateChanged(ProcessState)"), 
             on_state_change)
proc.start("python sleep_loop.py")

widget = QtGui.QWidget()
widget.show()
app.exec_()

proc.close()
</snippet></ROW><ROW><id>1854875</id><snippet>wget</snippet></ROW><ROW><id>1854875</id><snippet>cron</snippet></ROW><ROW><id>1854932</id><snippet>import ftplib

def traverse(ftp, depth=0):
    """
    return a recursive listing of an ftp server contents (starting
    from the current directory)

    listing is returned as a recursive dictionary, where each key
    contains a contents of the subdirectory or None if it corresponds
    to a file.

    @param ftp: ftplib.FTP object
    """
    if depth &gt; 10:
        return ['depth &gt; 10']
    level = {}
    for entry in (path for path in ftp.nlst() if path not in ('.', '..')):
        try:
            ftp.cwd(entry)
            level[entry] = traverse(ftp, depth+1)
            ftp.cwd('..')
        except ftplib.error_perm:
            level[entry] = None
    return level

def main():
    ftp = ftplib.FTP("localhost")
    ftp.connect()
    ftp.login()
    ftp.set_pasv(True)

    print traverse(ftp)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>1855118</id><snippet>#!/usr/bin/env python
import os
import zipfile

def zipdir(path, zip):
    for root, dirs, files in os.walk(path):
        for file in files:
            zip.write(os.path.join(root, file))

if __name__ == '__main__':
    zipf = zipfile.ZipFile('Python.zip', 'w')
    zipdir('tmp/', zipf)
    zipf.close()
</snippet></ROW><ROW><id>1855230</id><snippet>@register.simple_tag
def url_with_changed_parameter(request, param, value):
    params = request.GET
    request[param] = value
    return "%s?%s" % (request.path, params.urlencode())
</snippet></ROW><ROW><id>1855230</id><snippet>{% url_with_changed_parameter request "page" 2 %}
</snippet></ROW><ROW><id>1855502</id><snippet>from operator import itemgetter
from itertools import groupby

lst = [(1, 5),  (5, 4), (13, 3), (4, 3), (3, 2), (14, 1),
       (12, 1), (10, 1), (9, 1), (8, 1),  (7, 1), (6, 1), (2, 1)]

result = [[x for x, y in group]
          for key, group in groupby(lst, key=itemgetter(1))]
</snippet></ROW><ROW><id>1855502</id><snippet>groupby(lst, key=itemgetter(1))</snippet></ROW><ROW><id>1855502</id><snippet>lst</snippet></ROW><ROW><id>1855502</id><snippet>[x for x, y in group]</snippet></ROW><ROW><id>1855575</id><snippet>getattr(CallMe, variable)()
</snippet></ROW><ROW><id>1855836</id><snippet>id="results"</snippet></ROW><ROW><id>1855836</id><snippet>id="results"</snippet></ROW><ROW><id>1855836</id><snippet>id="results"</snippet></ROW><ROW><id>1855836</id><snippet>$(function(){
    // Submit form
    // Get the returned html, and get the contents of #results and
    // put it into this page into #results
    var submit = function() {
        $.ajax({
            type: "POST",
            data: $("form").serialize(),
            success: function(data, textStatus) {
                $("#results").replaceWith($("#results", $(data)));
            }
        });
    };
    $("form input[type=submit]").click(submit);
    // I think you'll need this as well to make sure the form doesn't submit via the browser
    $("form").submit(function () { return false; });
});
</snippet></ROW><ROW><id>1855836</id><snippet>$("form input[type=text]").keypress(submit);
$("form input[type=checkbox], form select").change(submit)
</snippet></ROW><ROW><id>1856393</id><snippet>xxd /dev/diskwhatever</snippet></ROW><ROW><id>1856393</id><snippet>.read()</snippet></ROW><ROW><id>1856393</id><snippet>subprocess</snippet></ROW><ROW><id>1856393</id><snippet>popen</snippet></ROW><ROW><id>1856393</id><snippet>child = subprocess.Popen(whatever, stdout=subprocess.PIPE)
for line in child.stdout:
  print "One more line:", line
</snippet></ROW><ROW><id>1856431</id><snippet>try/except</snippet></ROW><ROW><id>1856431</id><snippet>eval</snippet></ROW><ROW><id>1856431</id><snippet>try/except</snippet></ROW><ROW><id>1856431</id><snippet>eval</snippet></ROW><ROW><id>1856431</id><snippet>compile</snippet></ROW><ROW><id>1856431</id><snippet>import</snippet></ROW><ROW><id>1856431</id><snippet>exec</snippet></ROW><ROW><id>1856431</id><snippet>execfile</snippet></ROW><ROW><id>1856431</id><snippet>try/except</snippet></ROW><ROW><id>1856448</id><snippet>import flup</snippet></ROW><ROW><id>1856448</id><snippet>sys.path.append</snippet></ROW><ROW><id>1856448</id><snippet>flup</snippet></ROW><ROW><id>1856448</id><snippet>sys.path.append</snippet></ROW><ROW><id>1856448</id><snippet>import flup</snippet></ROW><ROW><id>1857145</id><snippet>PollReactor</snippet></ROW><ROW><id>1857200</id><snippet>from suds.client      import Client
from suds.sax.element import Element

client = Client("http://example.com/example.wsdl")

# &lt;tns:h xmlns:tns="http://example2.com/example2/"&gt;v&lt;/tns:h&gt;
tns = ("tns", "http://example2.com/example2/")
h = Element('h', ns=tns).setText('v')
client.set_options(soapheaders=h) 
#
s = client.service.Op(data)
</snippet></ROW><ROW><id>1857330</id><snippet>#!/bin/bash
pytranslate "$(xsel -p)"
</snippet></ROW><ROW><id>1857330</id><snippet>~/bin</snippet></ROW><ROW><id>1857374</id><snippet>parser = optparse.OptionParser(epilog="otherstuff")
</snippet></ROW><ROW><id>1857374</id><snippet>format_epilog</snippet></ROW><ROW><id>1857374</id><snippet>format_epilog</snippet></ROW><ROW><id>1857374</id><snippet>def main():

    class MyParser(optparse.OptionParser):
        def format_epilog(self, formatter):
            return self.epilog

    parser =MyParser(epilog=
"""Examples:

check_dell -c all
check_dell -c fans memory voltage
check_dell -s
""")
...
</snippet></ROW><ROW><id>1857374</id><snippet>optparse.py</snippet></ROW><ROW><id>1857374</id><snippet>OptionParser</snippet></ROW><ROW><id>1857374</id><snippet>format_epilog</snippet></ROW><ROW><id>1857374</id><snippet>format_help</snippet></ROW><ROW><id>1857374</id><snippet>def format_epilog(self, formatter):
    return formatter.format_epilog(self.epilog)

def format_help(self, formatter=None):
    if formatter is None:
        formatter = self.formatter
    result = []
    if self.usage:
        result.append(self.get_usage() + "\n")
    if self.description:
        result.append(self.format_description(formatter) + "\n")
    result.append(self.format_option_help(formatter))
    result.append(self.format_epilog(formatter))
    return "".join(result)
</snippet></ROW><ROW><id>1857374</id><snippet>formatter.format_epilog</snippet></ROW><ROW><id>1857374</id><snippet>textwrap.fill</snippet></ROW><ROW><id>1857374</id><snippet>OptionParser</snippet></ROW><ROW><id>1857374</id><snippet>format_epilog</snippet></ROW><ROW><id>1857445</id><snippet>views.py</snippet></ROW><ROW><id>1857835</id><snippet>print [y.replace('$', x)
  for y in (v for y in DICTB.values() for v in y)
  for x in (v for y in DICTA.values() for v in y)
]
</snippet></ROW><ROW><id>1857860</id><snippet>print</snippet></ROW><ROW><id>1857860</id><snippet>class SparseList(list):
  def __setitem__(self, index, value):
    missing = index - len(self) + 1
    if missing &gt; 0:
      self.extend([None] * missing)
    list.__setitem__(self, index, value)
  def __getitem__(self, index):
    try: return list.__getitem__(self, index)
    except IndexError: return None

__test__ = dict(allem='''
&gt;&gt;&gt; l = SparseList()
&gt;&gt;&gt; l
[]
&gt;&gt;&gt; l[2] = "hello"
&gt;&gt;&gt; l
[None, None, 'hello']
&gt;&gt;&gt; print l[5]
None
&gt;&gt;&gt; l[4] = 22
&gt;&gt;&gt; l
[None, None, 'hello', None, 22]
&gt;&gt;&gt; len(l)
5
&gt;&gt;&gt; for i in l: print i
None
None
hello
None
22
''')
import doctest
doctest.testmod(verbose=1)
</snippet></ROW><ROW><id>1858010</id><snippet>binds = {}

finance_engine = create_engine(url1)
binds.update(dict.fromkeys(finance_metadata.sorted_tables, finance_engine))
# The following line is required when mappings to joint tables are used (e.g.
# in joint table inheritance) due to bug (or misfeature) in SQLAlchemy 0.5.4.
# This issue might be fixed in newer versions.
binds.update(dict.fromkeys([Employee, Customer, Invoice], finance_engine))

staff_engine = create_engine(url2)
binds.update(dict.fromkeys(staff_metadata.sorted_tables, staff_engine))
# See comment above.
binds.update(dict.fromkeys([Project, Hour], staff_engine))

session = sessionmaker(binds=binds)()
</snippet></ROW><ROW><id>1858672</id><snippet>threading.local()</snippet></ROW><ROW><id>1858672</id><snippet>socket_data = threading.local()
socket_data = bind_ip = None

true_socket = socket.socket

def bound_socket(*a, **k):
    sock = true_socket(*a, **k)
    if socket_data.bind_ip is not None:
        sock.bind((socket_data.bind_ip, 0))
    return sock

socket.socket = bound_socket

def thread_target(bind_ip):
    socket_data.bind_ip = bind_ip
    # the rest code

for bind_ip in [...]:
    thread = Thread(target=thread_target, args=(bind_ip,))
    # ...
</snippet></ROW><ROW><id>1858672</id><snippet>connect()</snippet></ROW><ROW><id>1858672</id><snippet>HTTPConnection</snippet></ROW><ROW><id>1858672</id><snippet>http_open()</snippet></ROW><ROW><id>1858672</id><snippet>HTTPHandler</snippet></ROW><ROW><id>1858700</id><snippet>atof()</snippet></ROW><ROW><id>1858700</id><snippet>import locale
locale.setlocale(locale.LC_NUMERIC, 'en_US')
print locale.atof('1,234,456.23')  # Prints 1234456.23
</snippet></ROW><ROW><id>1858700</id><snippet>from fractions import Fraction
x = Fraction('1/4')
print float(x)  # 0.25
</snippet></ROW><ROW><id>1858700</id><snippet>try:
    num = float(num_str)
except ValueError:
    try:
        num = locale.atof(num_str)
    except ValueError:
        try:
            num = float(Fraction(num_str))
        except ValueError:
            raise Exception("Cannot parse '%s'" % num_str)  # Or handle '42 billion' here
# 'num' has the numerical value of 'num_str', here.
</snippet></ROW><ROW><id>1858745</id><snippet>adds = map((lambda (j, f, a):
  j.join([f.format(i) for i in parse.options[a]]) if parse.options[a] else ''),
  ((' ', ' -not -path "{0}" ', 'exclude'),
  (' -or ', '-path "{0}"', 'include')))
</snippet></ROW><ROW><id>1859099</id><snippet>for ii in range(200):
    for jj in range(200, 400):
        ...block0...
        if something:
            break
    else:
        ...block1...
</snippet></ROW><ROW><id>1859099</id><snippet>Break</snippet></ROW><ROW><id>1859850</id><snippet>def __html__(self):
    return unicode(self)
</snippet></ROW><ROW><id>1859889</id><snippet>array.array('i')
</snippet></ROW><ROW><id>1859889</id><snippet>a=array.array('i',(0 for i in range(0,10)))
</snippet></ROW><ROW><id>1859975</id><snippet>class.method</snippet></ROW><ROW><id>1859975</id><snippet>class SomeClass:
  @classmethod
  class some_class_method(cls):
    pass

  @staticmethod
  class some_static_method():
    pass

SomeClass.some_class_method()
SomeClass.some_static_method()
</snippet></ROW><ROW><id>1860137</id><snippet>level</snippet></ROW><ROW><id>1860137</id><snippet>level</snippet></ROW><ROW><id>1860137</id><snippet>root
 `-home
    |- lyrae
    |   |- ftp.py
    |   `- http.py
    `- badp
</snippet></ROW><ROW><id>1860137</id><snippet>ftp</snippet></ROW><ROW><id>1860137</id><snippet>root</snippet></ROW><ROW><id>1860137</id><snippet>ftp(root)</snippet></ROW><ROW><id>1860137</id><snippet>level</snippet></ROW><ROW><id>1860137</id><snippet>ftp(root)</snippet></ROW><ROW><id>1860137</id><snippet>(home)</snippet></ROW><ROW><id>1860137</id><snippet>ftp(root)</snippet></ROW><ROW><id>1860137</id><snippet>ftp(root)</snippet></ROW><ROW><id>1860137</id><snippet>level[home]</snippet></ROW><ROW><id>1860137</id><snippet>ftp</snippet></ROW><ROW><id>1860137</id><snippet>ftp(home)</snippet></ROW><ROW><id>1860137</id><snippet>level</snippet></ROW><ROW><id>1860137</id><snippet>ftp(home)</snippet></ROW><ROW><id>1860137</id><snippet>(lyrae, badp)</snippet></ROW><ROW><id>1860137</id><snippet>ftp(home)</snippet></ROW><ROW><id>1860137</id><snippet>ftp(home)</snippet></ROW><ROW><id>1860137</id><snippet>level[lyrae]</snippet></ROW><ROW><id>1860137</id><snippet>ftp</snippet></ROW><ROW><id>1860137</id><snippet>ftp(lyrae)</snippet></ROW><ROW><id>1860137</id><snippet>level</snippet></ROW><ROW><id>1860137</id><snippet>ftp(lyrae)</snippet></ROW><ROW><id>1860137</id><snippet>()</snippet></ROW><ROW><id>1860137</id><snippet>ftp(lyrae)</snippet></ROW><ROW><id>1860137</id><snippet>level</snippet></ROW><ROW><id>1860137</id><snippet>ftp(home)</snippet></ROW><ROW><id>1860137</id><snippet>levels = {'lyrae': {}}</snippet></ROW><ROW><id>1860137</id><snippet>ftp(home)</snippet></ROW><ROW><id>1860137</id><snippet>ftp(home)</snippet></ROW><ROW><id>1860137</id><snippet>level[badp]</snippet></ROW><ROW><id>1860137</id><snippet>ftp</snippet></ROW><ROW><id>1860137</id><snippet>ftp(badp)</snippet></ROW><ROW><id>1860137</id><snippet>level</snippet></ROW><ROW><id>1860137</id><snippet>ftp(badp)</snippet></ROW><ROW><id>1860137</id><snippet>()</snippet></ROW><ROW><id>1860137</id><snippet>ftp(badp)</snippet></ROW><ROW><id>1860137</id><snippet>level</snippet></ROW><ROW><id>1860137</id><snippet>ftp(home)</snippet></ROW><ROW><id>1860137</id><snippet>levels = {'lyrae': {}, 'badp': {}}</snippet></ROW><ROW><id>1860137</id><snippet>ftp(home)</snippet></ROW><ROW><id>1860137</id><snippet>level</snippet></ROW><ROW><id>1860137</id><snippet>ftp(root)</snippet></ROW><ROW><id>1860137</id><snippet>levels = {'home': {'lyrae': {}, 'badp': {}}}</snippet></ROW><ROW><id>1860137</id><snippet>ftp(root)</snippet></ROW><ROW><id>1860137</id><snippet>level</snippet></ROW><ROW><id>1860228</id><snippet>repr()</snippet></ROW><ROW><id>1860228</id><snippet>req</snippet></ROW><ROW><id>1860228</id><snippet>req.environ['HTTP_USER_AGENT']</snippet></ROW><ROW><id>1860228</id><snippet>req</snippet></ROW><ROW><id>1860228</id><snippet>&lt;py:if test="'Gecko/' in req.environ['HTTP_USER_AGENT'] and [int(x.split('/')[1]) for x in req.environ['HTTP_USER_AGENT'].split() if x.startswith('Gecko')][0] &gt; 20080101"&gt;
  &lt;div py:match="div[@id='header']"&gt;
    &lt;object type="image/svg+xml" id="svgLogo" data="${href.chrome('site/logo.svg')}" style="width=${chrome['logo']['width']}px; height=${chrome['logo']['height']}px;"&gt;&lt;/object&gt;
  &lt;/div&gt;
&lt;/py:if&gt;
</snippet></ROW><ROW><id>1860275</id><snippet>file.read()</snippet></ROW><ROW><id>1860275</id><snippet>message.ParseFromString(...)</snippet></ROW><ROW><id>1860398</id><snippet>try:
  import exists
except ImportError as exc:
  if "exists" in str(exc):
     pass
  else:
     raise
</snippet></ROW><ROW><id>1860594</id><snippet>import types

class CallAll(type):
    """ MetaClass that adds methods to call all superclass implementations """
    def __new__(meta, clsname, bases, attrs):
        ## collect a list of functions defined on superclasses
        funcs = {}
        for base in bases:
            for name, val in vars(base).iteritems():
                if type(val) is types.FunctionType:
                    if name in funcs:
                        funcs[name].append( val )
                    else:
                        funcs[name] = [val]

        ## now we have all methods, so decorate each of them
        for name in funcs:
            def caller(self, *args,**kwargs):
                """ calls all baseclass implementations """
                for func in funcs[name]:
                    func(self, *args,**kwargs)
            attrs[name] = caller

        return type.__new__(meta, clsname, bases, attrs)

class B:
    def fn(self):
        print 'B'

class A:
    def fn(self):
        print 'A'

class C(A,B, object):
    __metaclass__=CallAll

c=C()
c.fn()
</snippet></ROW><ROW><id>1860763</id><snippet>self.rooms</snippet></ROW><ROW><id>1860763</id><snippet>self.devs</snippet></ROW><ROW><id>1860763</id><snippet>def __init__(self, rooms = None):
    if rooms is None:
        rooms = []
    self.rooms = rooms
    print('house created')
</snippet></ROW><ROW><id>1861576</id><snippet>print</snippet></ROW><ROW><id>1861576</id><snippet>print(recip)</snippet></ROW><ROW><id>1861587</id><snippet>textEditorExecutablePath = 'C:\\Program Files (x86)\\Notepad2\\Notepad2.exe'
filepathToOpen = 'C:\\file.txt'
subprocess.Popen([textEditorExecutablePath, filepathToOpen])
</snippet></ROW><ROW><id>1861970</id><snippet>st_mode</snippet></ROW><ROW><id>1861970</id><snippet>os.stat</snippet></ROW><ROW><id>1861970</id><snippet>&amp;</snippet></ROW><ROW><id>1861970</id><snippet>st_mode</snippet></ROW><ROW><id>1861970</id><snippet>import os
import stat

def isgroupreadable(filepath):
  st = os.stat(filepath)
  return bool(st.st_mode &amp; stat.S_IRGRP)
</snippet></ROW><ROW><id>1861970</id><snippet>os.stat</snippet></ROW><ROW><id>1862225</id><snippet>CharField</snippet></ROW><ROW><id>1862225</id><snippet>IPAddressField</snippet></ROW><ROW><id>1862394</id><snippet>from distutils.core import setup, Extension
import py2exe
import matplotlib
import os
import numpy

setup(console=['cpa.py'],
      options={
        'py2exe': {
            'packages' : ['matplotlib', 'pytz', 'MySQLdb', 'pysqlite2'],
            'includes' : ['PILfix', 'version'],
            "excludes" : ['_gtkagg', '_tkagg',
                          "Tkconstants","Tkinter","tcl"],
            "dll_excludes": ['libgdk-win32-2.0-0.dll',
                             'libgobject-2.0-0.dll', 
                             'libgdk_pixbuf-2.0-0.dll',
                             'tcl84.dll', 'tk84.dll']
            }
        },
      data_files=matplotlib.get_py2exe_datafiles(),
      ext_modules = [Extension('_classifier',
                               sources = ['_classifier.c'],
                               include_dirs=[numpy.get_include()],
                               libraries = ['sqlite3dll'])]
)
</snippet></ROW><ROW><id>1862794</id><snippet>re.sub(r"([aeiou])(t|k|s|tk)([^aeiou]*)$", r"\1:\2\3", "orchestras")
re.sub(r"([aeiou])(t|k|s|tk)$",            r"\1:\2",   "orchestras")
</snippet></ROW><ROW><id>1862980</id><snippet>codecs.open('foo.txt', 'r', 'utf-16')
</snippet></ROW><ROW><id>1863329</id><snippet>import re

regexes = (
    re.compile("visit my blog at: .*$", re.IGNORECASE),
    re.compile("please post this:", re.IGNORECASE),
    re.compile("please can you include this:", re.IGNORECASE)
    # etc
)

for filePath in files:
    with open(filePath) as file:
        for line in file:
            for regex in regexes:
                print(re.sub(regex, ""))
</snippet></ROW><ROW><id>1863501</id><snippet>isalpha</snippet></ROW><ROW><id>1863501</id><snippet>&gt;&gt;&gt; "Hello".isalpha()
True
&gt;&gt;&gt; "World!".isalpha()
False
</snippet></ROW><ROW><id>1863501</id><snippet>&gt;&gt;&gt; from curses.ascii import isalpha
&gt;&gt;&gt; all(isalpha(x) for x in "Hello")
True
&gt;&gt;&gt; all(isalpha(x) for x in "World!")
False
</snippet></ROW><ROW><id>1863589</id><snippet>list(bytestring)
</snippet></ROW><ROW><id>1863589</id><snippet>&gt;&gt;&gt; bstring=b"Hello World"
&gt;&gt;&gt; list( bstring)
[72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1863589</id><snippet>&gt;&gt;&gt; from functools import reduce
&gt;&gt;&gt; reduce(lambda x,y:(x&lt;&lt;8)+y,list(b"Hello World"))
87521618088882533792115812
&gt;&gt;&gt; bin(_)
'0b100100001100101011011000110110001101111001000000101011101101111011100100110110001100100'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1863589</id><snippet>&gt;&gt;&gt; reduce(lambda x,y:(x&lt;&lt;8)+y,list(b"Hello World"[::-1]))
121404708493354166158910792
&gt;&gt;&gt; bits=bin(_)[2:]
</snippet></ROW><ROW><id>1863589</id><snippet>&gt;&gt;&gt; bits=bits.zfill(((len(bits)-1)//8+1)*8)
&gt;&gt;&gt; bits
'0110010001101100011100100110111101010111001000000110111101101100011011000110010101001000'
</snippet></ROW><ROW><id>1863589</id><snippet>&gt;&gt;&gt; int(bits[:6],2)
25
</snippet></ROW><ROW><id>1863589</id><snippet>&gt;&gt;&gt; int(bits[6:10],2)
1
</snippet></ROW><ROW><id>1864166</id><snippet>apt-get source python
</snippet></ROW><ROW><id>1864166</id><snippet>$ python -v
_lots of stuff snipped_
&gt;&gt;&gt; import imp
import imp # builtin
</snippet></ROW><ROW><id>1864166</id><snippet>In [1]: import imp

In [2]: imp??
Type:   	module
Base Class: &lt;type 'module'&gt;
String Form:    &lt;module 'imp' (built-in)&gt;
Namespace:  Interactive
Docstring [source file open failed]:
    This module provides the components needed to build your own
    __import__ function.  Undocumented functions are obsolete.
</snippet></ROW><ROW><id>1864438</id><snippet>import csv
reader = csv.reader(open('IN.csv', 'r'))
writer = csv.writer(open('OUT.csv', 'w')
for row in reader:
 # do stuff to the row here
 # row is just a list of items
 writer.writerow(row)
</snippet></ROW><ROW><id>1864683</id><snippet>subprocess.call()</snippet></ROW><ROW><id>1864683</id><snippet>#!/usr/bin/env python
import os, sys, subprocess, time
while True:
    p=subprocess.Popen(["xsel"],stdout=subprocess.PIPE)
    print p.stdout.read()
    time.sleep(1)
</snippet></ROW><ROW><id>1864715</id><snippet>&gt;&gt;&gt; unicode('\xc5\x81', 'utf-8')
u'\u0141'
</snippet></ROW><ROW><id>1864715</id><snippet>.decode('utf-8')</snippet></ROW><ROW><id>1864715</id><snippet>&gt;&gt;&gt; '\xc5\x81'.decode('utf-8')
u'\u0141'
</snippet></ROW><ROW><id>1864715</id><snippet>&gt;&gt;&gt; ''.join(chr(int(x,0)) for x in ['0xc5', '0x81'])
'\xc5\x81'
</snippet></ROW><ROW><id>1865350</id><snippet>__name__</snippet></ROW><ROW><id>1865350</id><snippet>class B(object):
</snippet></ROW><ROW><id>1865350</id><snippet>B = ...</snippet></ROW><ROW><id>1865350</id><snippet>__name__</snippet></ROW><ROW><id>1865350</id><snippet>class B(object):
    pass
A = B
del B
</snippet></ROW><ROW><id>1865523</id><snippet>def display(request):
  return render_to_response('template.tmpl', {'obj': models.Book.objects.all()})
</snippet></ROW><ROW><id>1865523</id><snippet>class Book(models.Model):
  author = models.CharField(max_length = 20)
  title = models.CharField(max_length = 40)
  publication_year = models.IntegerField()
</snippet></ROW><ROW><id>1865523</id><snippet>&lt;table&gt;
&lt;tr&gt;
  &lt;th&gt;author&lt;/th&gt;
  &lt;th&gt;title&lt;/th&gt;
  &lt;th&gt;publication year&lt;/th&gt;
&lt;/tr&gt;
{% for b in obj %}
&lt;tr&gt;
  &lt;td&gt;{{ b.author }}&lt;/td&gt;
  &lt;td&gt;{{ b.title }}&lt;/td&gt;
  &lt;td&gt;{{ b.publication_year }}&lt;/td&gt;
&lt;/tr&gt;
{% endfor %}
&lt;/table&gt;
</snippet></ROW><ROW><id>1865524</id><snippet>open("cache").close()</snippet></ROW><ROW><id>1865524</id><snippet>else</snippet></ROW><ROW><id>1865524</id><snippet>for</snippet></ROW><ROW><id>1865524</id><snippet>def checkCache(cachedText):
    cache = open( "cache" )
    for line in cache:
        if cachedText + ":" in line:
            break
    else:
        requestDefinition(cachedText)
    cache.close()
</snippet></ROW><ROW><id>1865524</id><snippet>for</snippet></ROW><ROW><id>1865524</id><snippet>break</snippet></ROW><ROW><id>1865906</id><snippet>threading.local()</snippet></ROW><ROW><id>1865906</id><snippet>Session.commit()</snippet></ROW><ROW><id>1865906</id><snippet>sqlalchemy.org.attributes.instance_state(obj)</snippet></ROW><ROW><id>1865906</id><snippet>state.committed_state</snippet></ROW><ROW><id>1865906</id><snippet>state.get_history()</snippet></ROW><ROW><id>1865906</id><snippet>sqlalchemy.org.attributes.get_history()</snippet></ROW><ROW><id>1865906</id><snippet>has_changes()</snippet></ROW><ROW><id>1865906</id><snippet>added</snippet></ROW><ROW><id>1865906</id><snippet>deleted</snippet></ROW><ROW><id>1865906</id><snippet>state.manager.keys()</snippet></ROW><ROW><id>1865906</id><snippet>state.manager.attributes</snippet></ROW><ROW><id>1865906</id><snippet>DeclarativeMeta</snippet></ROW><ROW><id>1866039</id><snippet>__get__()</snippet></ROW><ROW><id>1866039</id><snippet>__set__()</snippet></ROW><ROW><id>1866039</id><snippet>__get__()</snippet></ROW><ROW><id>1866498</id><snippet>SyntaxError</snippet></ROW><ROW><id>1866498</id><snippet>&gt;&gt;&gt; s='''\
... print 'ok'
... '''
&gt;&gt;&gt; s
"print 'ok'\n"
&gt;&gt;&gt; exec s
ok
&gt;&gt;&gt; exec s.replace('\n', '\r\n')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;string&gt;", line 1
    print 'ok'
              ^
SyntaxError: invalid syntax
</snippet></ROW><ROW><id>1866498</id><snippet>lMapping = os.linesep.join(lMapping.splitlines())
</snippet></ROW><ROW><id>1867034</id><snippet>python-ntlm</snippet></ROW><ROW><id>1867089</id><snippet>menu_items</snippet></ROW><ROW><id>1867089</id><snippet>Menu</snippet></ROW><ROW><id>1867089</id><snippet>class Menu:
    """Shows a menu with the defined items"""
    characters = map(chr, range(97, 123))

    def __init__(self, menu_items):
        self.menu_items = {}
        self.init_menu(menu_items)

    [...]
</snippet></ROW><ROW><id>1867176</id><snippet>stocks</snippet></ROW><ROW><id>1867176</id><snippet>t</snippet></ROW><ROW><id>1867176</id><snippet>executemany</snippet></ROW><ROW><id>1867176</id><snippet>c.executemany('insert into stocks (?,?,?,?,?,?)', (t + ('Arb value',) for t in stocks))
</snippet></ROW><ROW><id>1867317</id><snippet>busname.setResultsName("bus1")
</snippet></ROW><ROW><id>1867317</id><snippet>busname("bus1")
</snippet></ROW><ROW><id>1867317</id><snippet>(ngroup + sgroup).setParseAction(self.process_stats)</snippet></ROW><ROW><id>1867317</id><snippet>self.num_load = tokens[0]["loads"]
self.num_generator = tokens[0]["generators"]
self.num_transformer = tokens[0]["transformers"]
self.num_line = tokens[0]["lines"]
self.num_bus = tokens[0]["buses"]
self.power_rate = tokens[1]["rate"]
</snippet></ROW><ROW><id>1867317</id><snippet>self.num_load = tokens.network.loads
self.num_generator = tokens.network.generators
self.num_transformer = tokens.network.transformers
self.num_line = tokens.network.lines
self.num_bus = tokens.network.buses
self.power_rate = tokens.soln.rate
</snippet></ROW><ROW><id>1867317</id><snippet>busdef = And([busname.setResultsName("bus1"),
            busname.setResultsName("bus2"),
            integer.setResultsName("linenum"),
            decimaltable("pf qf pl ql".split())])
</snippet></ROW><ROW><id>1867317</id><snippet>busdef = (busname("bus1") + busname("bus2") + 
            integer("linenum") + 
            decimaltable("pf qf pl ql".split()))
</snippet></ROW><ROW><id>1867317</id><snippet>def parser():
    header = Group(...)
    inputsummary = Group(...)
    jobstats = Group(...)
    measurements = Group(...)
    return header("hdr") + inputsummary("inputs") + jobstats("stats") + measurements("meas")
</snippet></ROW><ROW><id>1867469</id><snippet>from django.db.models import CharField
from django.db.models import  Q

fields = [f for f in table._meta.fields if isinstance(f, CharField)]
queries = [Q(**{f.name: SEARCH_TERM}) for f in fields]

qs = Q()
for query in queries:
    qs = qs | query

table.objects.filter(qs)
</snippet></ROW><ROW><id>1867637</id><snippet>class TrackedFile(file):
    def __init__(self, filename, mode):
        self.size = 0
        super(TrackedFile, self).__init__(filename, mode)
    def write(self, s):
        self.size += len(s)
        super(TrackedFile, self).write(s)
</snippet></ROW><ROW><id>1867637</id><snippet>&gt;&gt;&gt; f = TrackedFile('palindrome.txt', 'w')
&gt;&gt;&gt; f.size
0
&gt;&gt;&gt; f.write('A man a plan a canal ')
&gt;&gt;&gt; f.size
21
&gt;&gt;&gt; f.write('Panama')
27
</snippet></ROW><ROW><id>1867637</id><snippet>__init__</snippet></ROW><ROW><id>1867637</id><snippet>writelines</snippet></ROW><ROW><id>1867637</id><snippet>&gt;&gt;&gt; f2 = TrackedFile('palindrome-latin1.txt', 'w')
&gt;&gt;&gt; f2.write(u'A man a plan a canál '.encode('latin1')
&gt;&gt;&gt; f3 = TrackedFile('palindrome-utf8.txt', 'w')
&gt;&gt;&gt; f3.write(u'A man a plan a canál '.encode('utf-8'))
&gt;&gt;&gt; f2.size
21
&gt;&gt;&gt; f3.size
22
</snippet></ROW><ROW><id>1867656</id><snippet>hashAndSign</snippet></ROW><ROW><id>1867711</id><snippet>BEGIN;
SELECT * FROM table;
SELECT missing_column FROM table WHERE id = 1; -- generates an error because the column is missing
SELECT * FROM another_table; -- this statement and all following statements get ignored until the next COMMIT;
COMMIT;
</snippet></ROW><ROW><id>1867711</id><snippet>tail -f /path/to/postgresql_error.log</snippet></ROW><ROW><id>1867734</id><snippet>for i in range(nIterations): y = f(y)
</snippet></ROW><ROW><id>1867734</id><snippet>for _ in xrange(nIterations): y = f(y)
</snippet></ROW><ROW><id>1867734</id><snippet>reduce(lambda y, _: f(y), xrange(nIterations), initValue)
</snippet></ROW><ROW><id>1867734</id><snippet>repeat</snippet></ROW><ROW><id>1867734</id><snippet>xrange</snippet></ROW><ROW><id>1867734</id><snippet>range</snippet></ROW><ROW><id>1867788</id><snippet>universal_settings.py</snippet></ROW><ROW><id>1867788</id><snippet>local_settings.py</snippet></ROW><ROW><id>1867788</id><snippet>site_1.py</snippet></ROW><ROW><id>1867788</id><snippet>site_2.py</snippet></ROW><ROW><id>1867788</id><snippet>site_n.py</snippet></ROW><ROW><id>1867788</id><snippet>from local_settings import *
</snippet></ROW><ROW><id>1867788</id><snippet>site_1.py</snippet></ROW><ROW><id>1867788</id><snippet>site_2.py</snippet></ROW><ROW><id>1867788</id><snippet>site_n.py</snippet></ROW><ROW><id>1867788</id><snippet>from universal_settings import *
</snippet></ROW><ROW><id>1867788</id><snippet>site_n.py</snippet></ROW><ROW><id>1867965</id><snippet>class Red(object):
    def x(self):
        print '#F00'

class Blue(object):
    def x(self):
        print '#00F'

class Shape(object):
    def __init__(self,color):
        self._color=color
    def x(self):
        return self._color.x()

class Circle(Shape):
    def __init__(self, color):
        Shape.__init__(self,color)
        self.x()

class Square(Shape):
    def __init__(self, color):
        Shape.__init__(self,color)
        self.x()
        self.sides = 4

red_circle = Circle(color=Red())
blue_circle = Circle(color=Blue())
blue_square = Square(color=Blue())
</snippet></ROW><ROW><id>1868077</id><snippet>GridTableBase</snippet></ROW><ROW><id>1868077</id><snippet>import wx, wx.grid

class GridData(wx.grid.PyGridTableBase):
    _cols = "a b c".split()
    _data = [
        "1 2 3".split(),
        "4 5 6".split(),
        "7 8 9".split()
    ]
    _highlighted = set()

    def GetColLabelValue(self, col):
        return self._cols[col]

    def GetNumberRows(self):
        return len(self._data)

    def GetNumberCols(self):
        return len(self._cols)

    def GetValue(self, row, col):
        return self._data[row][col]

    def SetValue(self, row, col, val):
        self._data[row][col] = val

    def GetAttr(self, row, col, kind):
        attr = wx.grid.GridCellAttr()
        attr.SetBackgroundColour(wx.GREEN if row in self._highlighted else wx.WHITE)
        return attr

    def set_value(self, row, col, val):
        self._highlighted.add(row)
        self.SetValue(row, col, val)

class Test(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)

        self.data = GridData()
        self.grid = wx.grid.Grid(self)
        self.grid.SetTable(self.data)

        btn = wx.Button(self, label="set a2 to x")
        btn.Bind(wx.EVT_BUTTON, self.OnTest)

        self.Sizer = wx.BoxSizer(wx.VERTICAL)
        self.Sizer.Add(self.grid, 1, wx.EXPAND)
        self.Sizer.Add(btn, 0, wx.EXPAND)

    def OnTest(self, event):
        self.data.set_value(1, 0, "x")
        self.grid.Refresh()


app = wx.PySimpleApp()
app.TopWindow = Test()
app.TopWindow.Show()
app.MainLoop()
</snippet></ROW><ROW><id>1868238</id><snippet>/var/root</snippet></ROW><ROW><id>1868457</id><snippet>myapp</snippet></ROW><ROW><id>1868457</id><snippet>server ~/myapp$ git init
</snippet></ROW><ROW><id>1868457</id><snippet>local ~/myapp$ git remote add origin user@server:~/myapp.git
local ~/myapp$ git push origin master
</snippet></ROW><ROW><id>1868457</id><snippet>git push</snippet></ROW><ROW><id>1868457</id><snippet>git co last-known-good-commit</snippet></ROW><ROW><id>1868504</id><snippet>re.sub(r'([aeiou])\1', r'\1:', str)
</snippet></ROW><ROW><id>1868695</id><snippet>result.content</snippet></ROW><ROW><id>1868695</id><snippet>Content-Type</snippet></ROW><ROW><id>1868695</id><snippet>text/html</snippet></ROW><ROW><id>1868695</id><snippet>application/xhtml+xml</snippet></ROW><ROW><id>1868695</id><snippet>self.response.out.write(result.content)
</snippet></ROW><ROW><id>1868702</id><snippet>self</snippet></ROW><ROW><id>1868702</id><snippet>classInstance.method(parameter)</snippet></ROW><ROW><id>1868702</id><snippet>method(self, parameter)</snippet></ROW><ROW><id>1868702</id><snippet>class MyClass(Object): 
    def my_method(self, parameter): 
        print parameter
</snippet></ROW><ROW><id>1868903</id><snippet>line1 ="['a.b.c','b.c.a','c.d.e']"
line2 ="['def','efg']"
line3 ="['f']"
line4 ="['g']"
lines = [line1, line2, line3, line4]

print eval('+'.join(lines))
</snippet></ROW><ROW><id>1868903</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>1869082</id><snippet>import sip # you'll need this import (no worries, it ships with your pyqt install)
sip.delete(self.sv_widgets[purchase.id])
</snippet></ROW><ROW><id>1869082</id><snippet>sip.delete(obj)</snippet></ROW><ROW><id>1869082</id><snippet>removeWidget</snippet></ROW><ROW><id>1869082</id><snippet>del</snippet></ROW><ROW><id>1869082</id><snippet>self.vl_seatView.removeWidget(self.sv_widgets[purchase.id])
self.sv_widgets[purchase.id].setParent(None)
del self.sv_widgets[purchase.id]
</snippet></ROW><ROW><id>1869861</id><snippet>conn.commit()
</snippet></ROW><ROW><id>1869911</id><snippet>sha1("blob " + filesize + "\0" + data)
</snippet></ROW><ROW><id>1870002</id><snippet>copy_to</snippet></ROW><ROW><id>1870002</id><snippet>copy_from</snippet></ROW><ROW><id>1870002</id><snippet>StringIO</snippet></ROW><ROW><id>1870002</id><snippet>copy_from.py</snippet></ROW><ROW><id>1870002</id><snippet>conn = psycopg2.connect(DSN)
curs = conn.cursor()
curs.execute("CREATE TABLE test_copy (fld1 text, fld2 text, fld3 int4)")

# anything can be used as a file if it has .read() and .readline() methods
data = StringIO.StringIO()
data.write('\n'.join(['Tom\tJenkins\t37',
                  'Madonna\t\N\t45',
                  'Federico\tDi Gregorio\t\N']))
data.seek(0)

curs.copy_from(data, 'test_copy')
</snippet></ROW><ROW><id>1870166</id><snippet>&gt;&gt;&gt; import xml.etree.ElementTree
&gt;&gt;&gt; myPacket = '&lt;PACKET&gt;&lt;HEAD&gt;&lt;ID&gt;123&lt;/ID&gt;&lt;SEQ&gt;1&lt;/SEQ&gt;&lt;FILENAME&gt;Test99.txt&lt;/FILE
NAME&gt;&lt;/HEAD&gt;&lt;DATA&gt;spam and cheese&lt;/DATA&gt;&lt;/PACKET&gt;'
&gt;&gt;&gt; xt = xml.etree.ElementTree.fromstring(myPacket)
&gt;&gt;&gt; wrk_ele = xt.find('HEAD/FILENAME')
&gt;&gt;&gt; wrk_ele.text
'Test99.txt'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1870395</id><snippet>for line in itertools.izip(
    open(file1),
    itertools.islice(open(file2), 1, None)
    ):
    # do something
</snippet></ROW><ROW><id>1870466</id><snippet>repr()</snippet></ROW><ROW><id>1870466</id><snippet>f.write(stdout_value)
</snippet></ROW><ROW><id>1870582</id><snippet>#!/usr/bin/python

appendToFile = open("appendedFile", "r")
sortToFile = open("sortedFile", "w")

for line in sorted(appendToFile, key = str.lower):
    sortToFile.write(line)
</snippet></ROW><ROW><id>1870624</id><snippet>/etc/sysconfig/network-scripts/ifcfg-eth0</snippet></ROW><ROW><id>1870637</id><snippet>cron.yaml</snippet></ROW><ROW><id>1870637</id><snippet>cron.yaml</snippet></ROW><ROW><id>1870637</id><snippet>sleep</snippet></ROW><ROW><id>1870733</id><snippet>from __future__ import absolute_import
</snippet></ROW><ROW><id>1870733</id><snippet>import</snippet></ROW><ROW><id>1870733</id><snippet>sys.path</snippet></ROW><ROW><id>1870977</id><snippet>x="""Top Assembly Part Number        : 800-25858-06
Top Assembly Revision Number    : A0
Version ID                      : V08
CLEI Code Number                : COMDE10BRA
Hardware Board Revision Number  : 0x01


Switch   Ports  Model              SW Version              SW Image
------   -----  -----              ----------              ----------
*    1   52     WS-C3750-48P       12.2(35)SE5             C3750-IPBASE-M
     2   52     WS-C3750-48P       12.2(35)SE5             C3750-IPBASE-M
     3   52     WS-C3750-48P       12.2(35)SE5             C3750-IPBASE-M
     4   52     WS-C3750-48P       12.2(35)SE5             C3750-IPBASE-M


Switch 02
---------
Switch Uptime                   : 11 weeks, 2 days, 16 hours, 27 minutes
Base ethernet MAC Address       : 00:26:52:96:2A:80
Motherboard assembly number     : 73-9675-15"""

&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall("^\*?\s*(\d)\s*\d+\s*([A-Z\d-]+)",x,re.MULTILINE)
[('1', 'WS-C3750-48P'), ('2', 'WS-C3750-48P'), ('3', 'WS-C3750-48P'), ('4', 'WS-C3750-48P')]
</snippet></ROW><ROW><id>1870977</id><snippet>&gt;&gt;&gt; re.findall("^(\*?)\s+(\d)\s+\d+\s+([A-Z\d-]+)",x,re.MULTILINE)
[('*', '1', 'WS-C3750-48P'), ('', '2', 'WS-C3750-48P'), ('', '3', 'WS-C3750-48P'), ('', '4', 'WS-C3750-48P')]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1871302</id><snippet>self</snippet></ROW><ROW><id>1871302</id><snippet>self.mapping</snippet></ROW><ROW><id>1871302</id><snippet>self</snippet></ROW><ROW><id>1871302</id><snippet>self</snippet></ROW><ROW><id>1871302</id><snippet>import copy

...

    self.mapping[self.Id] = copy.copy(self)
</snippet></ROW><ROW><id>1871302</id><snippet>copy.deepcopy(self)</snippet></ROW><ROW><id>1871302</id><snippet>self</snippet></ROW><ROW><id>1871302</id><snippet>self.mapping</snippet></ROW><ROW><id>1871302</id><snippet>copy.copy</snippet></ROW><ROW><id>1871409</id><snippet>"bye"</snippet></ROW><ROW><id>1871409</id><snippet>charP</snippet></ROW><ROW><id>1871409</id><snippet>create_string_buffer</snippet></ROW><ROW><id>1871616</id><snippet>print</snippet></ROW><ROW><id>1871616</id><snippet>print</snippet></ROW><ROW><id>1872078</id><snippet>import re
item_list = ['item1', 'item2']
regex = re.compile("^("+"|".join(item_list)+")\.")
search_list = ['item1.exe', 'item2.pdf']
matches = []
for file in search_list:
    match = regex.match(file)
    if match:
        matches.append((match.group(1), file))
</snippet></ROW><ROW><id>1872310</id><snippet>import math

def check_primality(y):
  x = int(math.sqrt(y))
  while x &gt; 1:
    if y % x == 0:                                                
      print y, 'has factor', x
      break
    x -= 1
  else:
    print y, 'is prime'
</snippet></ROW><ROW><id>1872350</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; d = OrderedDict([('first', 1), ('second', 2),
...                  ('third', 3)])
&gt;&gt;&gt; d.items()
[('first', 1), ('second', 2), ('third', 3)]
</snippet></ROW><ROW><id>1872835</id><snippet>&gt;&gt;&gt; from numpy import *
&gt;&gt;&gt; count_total = array((0,0))
&gt;&gt;&gt; count_total += (1,2)
&gt;&gt;&gt; count_total
array([1, 2])
</snippet></ROW><ROW><id>1872919</id><snippet>week=[{'item': 'Electrelane', 'weight': 140}, {'item': 'Kraftwerk', 'weight': 117},{'item': 'The Flaming Lips', 'weight': 113}]

print "&lt;?xml version='1.0' ?&gt;"
print "&lt;week&gt;"
for day in week:
    print "  &lt;day&gt;"
    for key, value in day.items():
        print "    &lt;%s&gt;%s&lt;/%s&gt;" % (key, value, key)
    print "  &lt;/day&gt;"
print "&lt;/week&gt;"
</snippet></ROW><ROW><id>1872919</id><snippet>print</snippet></ROW><ROW><id>1872919</id><snippet># enumerate the days in the week
for i, day in enumerate(week):
    print "day %d" % i
    # show values in sorted order
    for key in sorted(day):
        print "  - %s\t: %s" % (key, day[key])
</snippet></ROW><ROW><id>1873267</id><snippet>__getattribute__</snippet></ROW><ROW><id>1873447</id><snippet>class AgencyManger(models.Manager):
    def active(self):
        return self.filter(show=True)
</snippet></ROW><ROW><id>1873447</id><snippet>Agency.objects</snippet></ROW><ROW><id>1873447</id><snippet>Agency.objects.active()</snippet></ROW><ROW><id>1873447</id><snippet>Agency.active.all()</snippet></ROW><ROW><id>1873447</id><snippet>.objects.</snippet></ROW><ROW><id>1873480</id><snippet>Map</snippet></ROW><ROW><id>1873480</id><snippet>pygame.Surface</snippet></ROW><ROW><id>1873480</id><snippet>Tile</snippet></ROW><ROW><id>1873480</id><snippet>Map</snippet></ROW><ROW><id>1873480</id><snippet>Block</snippet></ROW><ROW><id>1873480</id><snippet>Map</snippet></ROW><ROW><id>1873721</id><snippet>(?:^|[^\\])(?:\\\\)*((?:\"|\\(?:[^\"\\nr]|$)))
</snippet></ROW><ROW><id>1873721</id><snippet>"</snippet></ROW><ROW><id>1873721</id><snippet>"</snippet></ROW><ROW><id>1873721</id><snippet>\</snippet></ROW><ROW><id>1873721</id><snippet>n</snippet></ROW><ROW><id>1873721</id><snippet>r</snippet></ROW><ROW><id>1873855</id><snippet>manage.py</snippet></ROW><ROW><id>1873855</id><snippet>$ python manage.py shell</snippet></ROW><ROW><id>1874123</id><snippet>import sys, time

sys.stdout.write('Content-Type: text/html;charset=utf-8\r\n\r\n')

print '&lt;html&gt;&lt;body&gt;'
for i in range(10):
    print '&lt;div&gt;%i&lt;/div&gt;'%i
    sys.stdout.flush()
    time.sleep(1)
</snippet></ROW><ROW><id>1874123</id><snippet>import time, wsgiref.handlers

class MyApplication(object):
    def __call__(self, environ, start_response):
        start_response('200 OK', [('Content-Type', 'text/html;charset=utf-8')])
        return self.page()

    def page(self):
        yield '&lt;html&gt;&lt;body&gt;'
        for i in range(10):
            yield '&lt;div&gt;%i&lt;/div&gt;'%i
            time.sleep(1)

application= MyApplication()
if __name__=='__main__':
    wsgiref.handlers.CGIHandler().run(application)
</snippet></ROW><ROW><id>1874123</id><snippet>mod_deflate</snippet></ROW><ROW><id>1874123</id><snippet>def page(self):
    yield (
        '&lt;html&gt;&lt;body&gt;&lt;div id="counter"&gt;-&lt;/div&gt;'
        '&lt;script type="text/javascript"&gt;'
        '    function update(n) {'
        '        document.getElementById("counter").firstChild.data= n;'
        '    }'
        '&lt;/script&gt;'
    )
    for i in range(10):
        yield '&lt;script type="text/javascript"&gt;update(%i);&lt;/script&gt;'%i
        time.sleep(1)
</snippet></ROW><ROW><id>1874210</id><snippet>max(a_list, key=operator.itemgetter(1))
</snippet></ROW><ROW><id>1874268</id><snippet>&gt;&gt;&gt; import psycopg2
&gt;&gt;&gt; conn = psycopg2.connect("dbname='mydb' user='username' host='localhost' password='foobar'")
&gt;&gt;&gt; cur = conn.cursor()
&gt;&gt;&gt; cur.execute("select * from information_schema.tables where table_name=%s", ('mytable',))
&gt;&gt;&gt; bool(cur.rowcount)
True
</snippet></ROW><ROW><id>1874268</id><snippet>&gt;&gt;&gt; cur.execute("select exists(select * from information_schema.tables where table_name=%s)", ('mytable',))
&gt;&gt;&gt; cur.fetchone()[0]
True
</snippet></ROW><ROW><id>1874635</id><snippet>s = "this is my really, really, really, really, really, really," \
    " really long string that I'd like to shorten."
</snippet></ROW><ROW><id>1874740</id><snippet>num</snippet></ROW><ROW><id>1874740</id><snippet>import matplotlib.pyplot

def test_matplotlib(request):
    f = figure(figsize=(6,6))
    ....
    matplotlib.pyplot.close(f)
</snippet></ROW><ROW><id>1874740</id><snippet>num</snippet></ROW><ROW><id>1874740</id><snippet>f.clear()</snippet></ROW><ROW><id>1874844</id><snippet>if tmin is None: tmin = -INF
if tmax is None: tmax = +INF

tval = float(-b - discriminant) / float (2*a)
if tmin &lt;= tval &lt;= tmax:
    return tval 

tval = float(-b + discriminant) / float (2*a)
if tmin &lt;= tval &lt;= tmax:
    return tval

# Neither solution was within the acceptable range.
return None
</snippet></ROW><ROW><id>1875169</id><snippet>import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'myproject.settings'

import site
site.addsitedir('/path/to/virtualenv/lib/python2.6/site-packages')

from django.core.handlers.wsgi import WSGIHandler
application = WSGIHandler()
</snippet></ROW><ROW><id>1875169</id><snippet>site.addsitedir(...)</snippet></ROW><ROW><id>1875169</id><snippet>*.pth</snippet></ROW><ROW><id>1875169</id><snippet>sys.path</snippet></ROW><ROW><id>1875169</id><snippet>easy-install.pth</snippet></ROW><ROW><id>1875267</id><snippet>try:
    import simplejson as json
except ImportError:
    import json
</snippet></ROW><ROW><id>1875267</id><snippet>simplejson</snippet></ROW><ROW><id>1875453</id><snippet>from django.core.files.images import get_image_dimensions
class myForm(forms.ModelForm):
   class Meta:
       model = myModel
   def clean_picture(self):
       picture = self.cleaned_data.get("picture")
       if not picture:
           raise forms.ValidationError("No image!")
       else:
           w, h = get_image_dimensions(picture)
           if w != 100:
               raise forms.ValidationError("The image is %i pixel wide. It's supposed to be 100px" % w)
           if h != 200:
               raise forms.ValidationError("The image is %i pixel high. It's supposed to be 200px" % h)
       return picture
</snippet></ROW><ROW><id>1875587</id><snippet>i=i</snippet></ROW><ROW><id>1875587</id><snippet>def make_property(i, dict):
    def fget(self):
        return i

    dict['f%d' % i] = property(fget)

class Test(object):
    def __metaclass__(name, bases, dict):
        for i in range(5):
            make_property(i, dict)

        return type(name, bases, dict)
</snippet></ROW><ROW><id>1875706</id><snippet>&gt;&gt;&gt; pat= '^(w{{3}}\.)?([0-9A-Za-z-]+\.){{1}}{domainName}$'.format(domainName = 'delivery.com')
&gt;&gt;&gt; pat
'^(w{3}\\.)?([0-9A-Za-z-]+\\.){1}delivery.com$'
&gt;&gt;&gt; re.match(pat, str1)
</snippet></ROW><ROW><id>1875706</id><snippet>re.match</snippet></ROW><ROW><id>1875706</id><snippet>^</snippet></ROW><ROW><id>1875706</id><snippet>re.match</snippet></ROW><ROW><id>1875706</id><snippet>^</snippet></ROW><ROW><id>1875706</id><snippet>re.search</snippet></ROW><ROW><id>1875706</id><snippet>{1}</snippet></ROW><ROW><id>1875946</id><snippet>del</snippet></ROW><ROW><id>1875946</id><snippet>map(lambda d: d.pop('k1'), list_of_d)
</snippet></ROW><ROW><id>1875946</id><snippet>for d in list_of_d:
    del d['k1']
</snippet></ROW><ROW><id>1875954</id><snippet>django.contrib.auth.views.password_change_done</snippet></ROW><ROW><id>1875954</id><snippet>post_change_redirect</snippet></ROW><ROW><id>1875954</id><snippet>(r'^settings/users/change_password/$', 'django.contrib.auth.views.password_change', {'password_change_done': '/settings/users/password-changed'})
</snippet></ROW><ROW><id>1876021</id><snippet>for word_index, letter in enumerate(letter_list):
    if letter == user_input:
        correct_letters[word_index] = user_input
</snippet></ROW><ROW><id>1876021</id><snippet>for letter in letter_list:</snippet></ROW><ROW><id>1876021</id><snippet>enumerate()</snippet></ROW><ROW><id>1876166</id><snippet>local('git rm fabfile.py', capture=False)
local('git add settings.py', capture=False)
</snippet></ROW><ROW><id>1876166</id><snippet>local</snippet></ROW><ROW><id>1876206</id><snippet>5wlfgALGbXOahekxSs9wlfgALGbXOahekxSs5
^                 ^                 ^
</snippet></ROW><ROW><id>1876206</id><snippet>join()</snippet></ROW><ROW><id>1876206</id><snippet>&gt;&gt;&gt; ",".join(["a", "b", "c"])
'a,b,c'
</snippet></ROW><ROW><id>1876206</id><snippet>+</snippet></ROW><ROW><id>1876206</id><snippet>print array.array('c', random.sample(string.ascii_letters, 20 - len(strid)))
.tostring() + strid
</snippet></ROW><ROW><id>1876657</id><snippet>tmp_iter = iter(tmp)
prev = tmp_iter.next()

for x in tmp_iter: 
   print 'seq: ', x[1], 'prev seq:', prev[1], 'variance: ', x[1]-prev[1]
   prev = x
</snippet></ROW><ROW><id>1876657</id><snippet>tmp_iter = iter(tmp)
[_, prev] = tmp_iter.next()

for [_, x] in tmp_iter: 
   print 'seq: ', x, 'prev seq:', prev, 'variance: ', x-prev
   prev = x
</snippet></ROW><ROW><id>1877006</id><snippet>collection</snippet></ROW><ROW><id>1877006</id><snippet>&gt;&gt;&gt; for a in range(1,5):
...     b = object()
...     print b, id(b)
... 
&lt;object object at 0xb7db9470&gt; 3084620912
&lt;object object at 0xb7db9468&gt; 3084620904
&lt;object object at 0xb7db9470&gt; 3084620912
&lt;object object at 0xb7db9468&gt; 3084620904
&lt;object object at 0xb7db9470&gt; 3084620912
</snippet></ROW><ROW><id>1877006</id><snippet>&gt;&gt;&gt; a = []
&gt;&gt;&gt; for b in range(1,5):
...     c = object()
...     a.append(c)
...     print c, id(c)
... 
&lt;object object at 0xb7db9470&gt; 3084620912
&lt;object object at 0xb7db9468&gt; 3084620904
&lt;object object at 0xb7db9478&gt; 3084620920
&lt;object object at 0xb7db9480&gt; 3084620928
</snippet></ROW><ROW><id>1877217</id><snippet>code       = models.CharField(max_length=80) # Mapped from name</snippet></ROW><ROW><id>1877217</id><snippet>calendar_event = models.ForeignKey(CalendarEvent)</snippet></ROW><ROW><id>1877217</id><snippet>name</snippet></ROW><ROW><id>1877217</id><snippet>code</snippet></ROW><ROW><id>1877217</id><snippet>code</snippet></ROW><ROW><id>1877217</id><snippet>save()</snippet></ROW><ROW><id>1877217</id><snippet>delete()</snippet></ROW><ROW><id>1877367</id><snippet>class Comment(models.Model):
    text = models.TextField()
    created = models.DateTimeField(default=datetime.now())
</snippet></ROW><ROW><id>1877367</id><snippet>url(r'^comments/latest/(?P&lt;seconds_old&gt;\d+)/$',get_latest_comments),
</snippet></ROW><ROW><id>1877367</id><snippet>def get_latest_comments(request, seconds_old):
    """
    Returns comments that have been created since the last given number of seconds
    have elapsed.
    """

    # Query comments since the past X seconds
    comments_since = datetime.datetime.now() - datetime.timedelta(seconds=seconds_old)
    comments = Comments.objects.filter(created__gte=comments_since)

    # Return serialized data or whatever you're doing with it
    return HttpResponse(simplejson.dumps(comments),mimetype='application/json')
</snippet></ROW><ROW><id>1877367</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>1877720</id><snippet>class MyException(Exception):
    pass
</snippet></ROW><ROW><id>1877720</id><snippet>try:
    raise MyException()
except MyException:
    print "Doing something with MyException"
except:
    print "Some other error occurred... handling it differently"
</snippet></ROW><ROW><id>1877720</id><snippet>__str__</snippet></ROW><ROW><id>1877720</id><snippet>__unicode__</snippet></ROW><ROW><id>1877720</id><snippet>class MyException(Exception):

    def __init__(self, msg):
        self.msg = msg

    def __str__(self):
        return "MyException with %s" % self.msg
</snippet></ROW><ROW><id>1877720</id><snippet>expr</snippet></ROW><ROW><id>1877720</id><snippet>msg</snippet></ROW><ROW><id>1877720</id><snippet>def do_something(expr):
    if 'foo' in expr:
        raise InvalidProgramStateException(expr, "We don't allow foos here")
    return 5

user_input = 'foo bar'
try:
    do_something(user_input)
except InvalidProgramStateException, e:
    print "%s (using expression %s)" % (e.msg, e.expr)
</snippet></ROW><ROW><id>1877776</id><snippet>def sim_distance(prefs, person1, person2): 
  # Get the list of shared_items
  p1, p2 = prefs[person1], prefs[person2]
  si = set(p1).intersection(set(p2))

  # Add up the squares of all the differences 
  matches = (p1[item] - p2[item] for item in si)
  return sum(a * a for a in matches)
</snippet></ROW><ROW><id>1877776</id><snippet>prefs[person1]</snippet></ROW><ROW><id>1877776</id><snippet>prefs[person2]</snippet></ROW><ROW><id>1877776</id><snippet>def sim_distance(prefs, person1, person2):
    p1, p2 = prefs[person1], prefs[person2]
    s, t = set(p1), set(p2)
    return len(s.intersection(t)) / len(s.union(t))
</snippet></ROW><ROW><id>1877901</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>1877901</id><snippet>import collections

def make_constants(variables):
    n = collections.namedtuple('Constants', variables.keys())
    return n(**variables)

c = make_constants({"a": 2, "b": 76})
print c
# the output is:
# Constants(a=2, b=76)
</snippet></ROW><ROW><id>1878013</id><snippet>lines = file.readlines()
lines = lines[:-1]
</snippet></ROW><ROW><id>1878135</id><snippet>TEMPLATE_DEBUG</snippet></ROW><ROW><id>1878135</id><snippet>settings.py</snippet></ROW><ROW><id>1878135</id><snippet>$ python manage.py shell
&gt;&gt;&gt; from myapp_that_causes_problems import views
</snippet></ROW><ROW><id>1878488</id><snippet>result = [(x+dx, y+dy) for x,y in points for dx,dy in offsets]
</snippet></ROW><ROW><id>1878803</id><snippet>b = lambda:0
</snippet></ROW><ROW><id>1878803</id><snippet>lambda:0</snippet></ROW><ROW><id>1878803</id><snippet>object()</snippet></ROW><ROW><id>1878871</id><snippet>cursor.next</snippet></ROW><ROW><id>1878871</id><snippet>cursor.execute</snippet></ROW><ROW><id>1878871</id><snippet>try:
  ...whatever...
except Exception, e:
  print "caught an exception defined in module", e.__class__.__module__
</snippet></ROW><ROW><id>1878871</id><snippet>exceptions</snippet></ROW><ROW><id>1878871</id><snippet>sys.modules</snippet></ROW><ROW><id>1879101</id><snippet>thelines = ['hello:3.1 GB', 'world:1.2 MB', 'foo:956.2 KB']

mult = dict(KB=2**10, MB=2**20, GB=2**30)

def getsize(aline):
  fn, size = aline.split(':', 1)
  value, unit = size.split(' ')
  multiplier = mult[unit]
  return float(value) * multiplier

thelines.sort(key=getsize)
print thelines
</snippet></ROW><ROW><id>1879101</id><snippet>['foo:956.2 KB', 'world:1.2 MB', 'hello:3.1 GB']</snippet></ROW><ROW><id>1879101</id><snippet>mult</snippet></ROW><ROW><id>1879934</id><snippet>before_insert()</snippet></ROW><ROW><id>1879934</id><snippet>default</snippet></ROW><ROW><id>1879934</id><snippet>context</snippet></ROW><ROW><id>1879934</id><snippet>context.compiled_parameters[0]['CategoryUniqueName']</snippet></ROW><ROW><id>1879934</id><snippet>context.connection</snippet></ROW><ROW><id>1879934</id><snippet>FetchedValue()</snippet></ROW><ROW><id>1879934</id><snippet>server_default</snippet></ROW><ROW><id>1879934</id><snippet>CategoryID</snippet></ROW><ROW><id>1879934</id><snippet>CategoryUniqueName</snippet></ROW><ROW><id>1880132</id><snippet>-x</snippet></ROW><ROW><id>1880132</id><snippet>QMainWindow</snippet></ROW><ROW><id>1880132</id><snippet># Store this code in the file MyMainWindow.py
from PyQt4.QtGui import *

class MyMainWindow(QMainWindow):
    def __init__(self, ui_layout):
        QMainWindow.__init__(self)

        self.ui = ui_layout
        ui_layout.setupUi(self)
</snippet></ROW><ROW><id>1880132</id><snippet>from PyQt4.QtGui import *
from MyMainWindow import *
from Form1 import *             # replace Form1 the name of your generated file
import sys

app = QApplication(sys.argv)

window = MyMainWindow(Ui_Form1())
window.show()

sys.exit(app.exec_())
</snippet></ROW><ROW><id>1880234</id><snippet>#!/bin/bash
if (($# != 1)) || ! [[ -d "$1" ]]; then
    echo "Usage: $0 /path/to/directory"
    exit 1
fi

is_hash() {
 md5=${1##*.} # strip prefix
 [[ "$md5" == *[^[:xdigit:]]* || ${#md5} -lt 32 ]] &amp;&amp; echo "$1" || echo "${1%.*}"
}

while IFS= read -r -d $'\0' file; do
    read hash junk &lt; &lt;(md5sum "$file")
    basename="${file##*/}"
    dirname="${file%/*}"
    pre_ext="${basename%.*}"
    ext="${basename:${#pre_ext}}"

    # File already hashed?
    pre_ext=$(is_hash "$pre_ext")
    ext=$(is_hash "$ext")

    mv "$file" "${dirname}/${pre_ext}.${hash}${ext}" 2&gt; /dev/null

done &lt; &lt;(find "$1" -path "*/.*" -prune -o \( -type f -print0 \))
</snippet></ROW><ROW><id>1880432</id><snippet>difflib</snippet></ROW><ROW><id>1880563</id><snippet>fields = struct.unpack('!BBI4H20sIB', data)
</snippet></ROW><ROW><id>1880563</id><snippet>fields[0]
</snippet></ROW><ROW><id>1880642</id><snippet>import ConfigParser
from optparse import OptionParser

CONFIG_FILENAME = 'defaults.cfg'

def main():
    config = ConfigParser.ConfigParser()
    config.read(CONFIG_FILENAME)

    parser = OptionParser()
    parser.add_option("-l",
                      "--language",
                      dest="language",
                      help="The UI language",
                      default=config.get("Localization", "language"))
    parser.add_option("-f",
                      "--flag",
                      dest="flag",
                      help="The country flag",
                      default=config.get("Localization", "flag"))

    print parser.parse_args()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>1880642</id><snippet>(&lt;Values at 0x2182c88: {'flag': 'japan.png', 'language': 'Japanese'}&gt;, [])
</snippet></ROW><ROW><id>1880642</id><snippet>parser.py --language=French</snippet></ROW><ROW><id>1880642</id><snippet>(&lt;Values at 0x2215c60: {'flag': 'japan.png', 'language': 'French'}&gt;, [])
</snippet></ROW><ROW><id>1880642</id><snippet>parser.py --help</snippet></ROW><ROW><id>1880642</id><snippet>Usage: parser.py [options]

Options:
  -h, --help            show this help message and exit
  -l LANGUAGE, --language=LANGUAGE
                        The UI language
  -f FLAG, --flag=FLAG  The country flag
</snippet></ROW><ROW><id>1880642</id><snippet>[Localization]
language=Japanese
flag=japan.png
</snippet></ROW><ROW><id>1880706</id><snippet>tuples = [(1,2), (3,4), (5,6)]
[item for t in tuples for item in t]
</snippet></ROW><ROW><id>1880706</id><snippet>[1, 2, 3, 4, 5, 6]
</snippet></ROW><ROW><id>1880706</id><snippet>sum(tuples, ())
</snippet></ROW><ROW><id>1880815</id><snippet>ipdb&gt; x = 1
ipdb&gt; p x
1
ipdb&gt; p x==True
True
ipdb&gt; p x==1
True
</snippet></ROW><ROW><id>1880815</id><snippet>ipdb&gt; p p
</snippet></ROW><ROW><id>1880945</id><snippet>importText</snippet></ROW><ROW><id>1881313</id><snippet>file = tkFileDialog.askopenfile(parent=root,mode='rb',filetypes=[('Subrip Subtitle File','*.srt')],title='Choose a subtitle file')
abs_path = os.path.abspath(file.name)
</snippet></ROW><ROW><id>1881796</id><snippet>mod_python</snippet></ROW><ROW><id>1881796</id><snippet>mod_wsgi</snippet></ROW><ROW><id>1881806</id><snippet>os.system('scp myfile othermachine.jack.com:/transfers')
</snippet></ROW><ROW><id>1882362</id><snippet>import Tkinter
t = Tkinter.Tk()
t.configure(cursor=('@/usr/include/X11/bitmaps/star', '/usr/include/X11/bitmaps/starMask', 'black', 'white'))
t.mainloop()
</snippet></ROW><ROW><id>1882533</id><snippet>"http://www.graychase.com/aabbas","Gray &amp; Chase LLP","Amr A","Abbas","The George Washington University Law School","2005"
"http://www.graychase.com/kadam","Gray &amp; Chase LLP","Karin","Adam","Ernst Moritz Arndt University Greifswald","2004"
</snippet></ROW><ROW><id>1882533</id><snippet>from django.db import models

class School(models.Model):    
    name = models.CharField(max_length=300, unique=True)

    def __unicode__(self):
        return self.name

class Lawyer(models.Model):
    firm_url = models.URLField('Bio', max_length=200, unique=True)
    firm_name = models.CharField('Firm', max_length=100)
    first = models.CharField('First Name', max_length=50)
    last = models.CharField('Last Name', max_length=50)
    year_graduated = models.IntegerField('Year graduated')
    school = models.ForeignKey(School)

    def __unicode__(self):
        return self.first
</snippet></ROW><ROW><id>1882533</id><snippet>sw2</snippet></ROW><ROW><id>1882533</id><snippet>wkw2</snippet></ROW><ROW><id>1882533</id><snippet>############ All you need to modify is below ############
# Full path and name to your csv file
csv_filepathname="C:/Users/A/Documents/Projects/Django/sw2/wkw2/fixtures/data.csv"
# Full path to the directory immediately above your django project directory
your_djangoproject_home="C:.../Documents/PROJECTS/Django/"
############ All you need to modify is above ############

import sys,os
sys.path.append(your_djangoproject_home)
os.environ['DJANGO_SETTINGS_MODULE'] ='sw2.settings'

from sw2.wkw2.models import School, Lawyer

import csv
dataReader = csv.reader(open(csv_filepathname), delimiter=',', quotechar='"')

old_school = None
for row in dataReader:
    if old_school != row[4]:
        old_school = row[4]
        school = School()
        school.name = old_school
        school.save()

dataReader = csv.reader(open(csv_filepathname), delimiter=',', quotechar='"')

for row in dataReader:
    lawyer=Lawyer()
    lawyer.firm_url=row[0]
    lawyer.firm_name=row[1]
    lawyer.first=row[2]
    lawyer.last=row[3]

    lawyer_school=School.objects.get(name=row[4])
    lawyer.school=lawyer_school

    lawyer.year_graduated=row[5]
    lawyer.save()
</snippet></ROW><ROW><id>1883251</id><snippet>import sys

if hasattr(sys, 'real_prefix'):
    #...
</snippet></ROW><ROW><id>1883673</id><snippet>import gzip
fp = gzip.open('foo.gz')
contents = fp.read() # contents now has the uncompressed bytes of foo.gz
fp.close()
u_str = contents.decode('utf-8') # u_str is now a unicode string
</snippet></ROW><ROW><id>1883781</id><snippet>W:  1:spam: Dangerous default value [] as argument
</snippet></ROW><ROW><id>1884151</id><snippet>def findnth(haystack, needle, n):
    parts= haystack.split(needle, n+1)
    if len(parts)&lt;=n+1:
        return -1
    return len(haystack)-len(parts[-1])-len(needle)
</snippet></ROW><ROW><id>1884151</id><snippet>'foo bar bar bar'.replace('bar', 'XXX', 1).find('bar')
</snippet></ROW><ROW><id>1884369</id><snippet>PyArg_ParseTupleAndKeywords</snippet></ROW><ROW><id>1884369</id><snippet>def foo(bar, baz="something or other"):
    print bar, baz
</snippet></ROW><ROW><id>1884369</id><snippet>#include "Python.h"

static PyObject *
themodule_foo(PyObject *self, PyObject *args, PyObject *keywds)
{
    char *bar;
    char *baz = "something or other";

    static char *kwlist[] = {"bar", "baz", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, keywds, "s|s", kwlist,
                                     &amp;bar, &amp;baz))
        return NULL;

    printf("%s %s\n", bar, baz);

    Py_INCREF(Py_None);
    return Py_None;
}

static PyMethodDef themodule_methods[] = {
    {"foo", (PyCFunction)themodule_foo, METH_VARARGS | METH_KEYWORDS,
     "Print some greeting to standard output."},
    {NULL, NULL, 0, NULL}   /* sentinel */
};

void
initthemodule(void)
{
  Py_InitModule("themodule", themodule_methods);
}
</snippet></ROW><ROW><id>1884377</id><snippet>tuple(x for sublist in base_lists for x in sublist)
</snippet></ROW><ROW><id>1884377</id><snippet>base_lists</snippet></ROW><ROW><id>1884377</id><snippet>tu.py</snippet></ROW><ROW><id>1884377</id><snippet>base_lists = [[a, b] for a in range(1, 3) for b in range(1, 6)]

def genexp():
  return tuple(x for sublist in base_lists for x in sublist)

def listcomp():
  return tuple([x for sublist in base_lists for x in sublist])

def withsum():
  return tuple(sum(base_lists,[]))

import itertools as it

def withit():
  return tuple(it.chain(*base_lists))
</snippet></ROW><ROW><id>1884377</id><snippet>$ python -mtimeit -s'import tu' 'tu.genexp()'
100000 loops, best of 3: 7.86 usec per loop
$ python -mtimeit -s'import tu' 'tu.withsum()'
100000 loops, best of 3: 5.79 usec per loop
$ python -mtimeit -s'import tu' 'tu.withit()'
100000 loops, best of 3: 5.17 usec per loop
$ python -mtimeit -s'import tu' 'tu.listcomp()'
100000 loops, best of 3: 5.33 usec per loop
</snippet></ROW><ROW><id>1884377</id><snippet>100 *</snippet></ROW><ROW><id>1884377</id><snippet>base_lists</snippet></ROW><ROW><id>1884377</id><snippet>$ python -mtimeit -s'import tu' 'tu.genexp()'
1000 loops, best of 3: 408 usec per loop
$ python -mtimeit -s'import tu' 'tu.withsum()'
100 loops, best of 3: 5.07 msec per loop
$ python -mtimeit -s'import tu' 'tu.withit()'
10000 loops, best of 3: 148 usec per loop
$ python -mtimeit -s'import tu' 'tu.listcomp()'
1000 loops, best of 3: 278 usec per loop
</snippet></ROW><ROW><id>1884377</id><snippet>withsum</snippet></ROW><ROW><id>1884377</id><snippet>itertools</snippet></ROW><ROW><id>1884377</id><snippet>1000 *</snippet></ROW><ROW><id>1884377</id><snippet>100 *</snippet></ROW><ROW><id>1884377</id><snippet>O(N squared)</snippet></ROW><ROW><id>1884455</id><snippet>for</snippet></ROW><ROW><id>1884455</id><snippet>out = [dict(zip(keys, property)) for property in reader]
</snippet></ROW><ROW><id>1884455</id><snippet>print out</snippet></ROW><ROW><id>1884455</id><snippet>print json.dumps(out)</snippet></ROW><ROW><id>1884455</id><snippet>import json</snippet></ROW><ROW><id>1884518</id><snippet>import codecs
from django.utils.encoding
f = codecs.open('filename', 'r', 'utf-16')
zz = fo.readlines()
</snippet></ROW><ROW><id>1884518</id><snippet>import codecs from django.utils.encoding
fo = codecs.open('filename', 'r', 'utf-16')
zz = fo.readlines()
</snippet></ROW><ROW><id>1884714</id><snippet>fun0(map(lambda x:fun1(fun2(fun3(x))), [arg1,arg2,arg3,arg4])
</snippet></ROW><ROW><id>1884714</id><snippet>fun0(map(apply, itertools.product([fun1,fun2,fun3],[arg1,arg2,arg3,arg4])))
</snippet></ROW><ROW><id>1884731</id><snippet>theentity.theproperty = somevalue</snippet></ROW><ROW><id>1884752</id><snippet>goto</snippet></ROW><ROW><id>1884752</id><snippet>errorexit</snippet></ROW><ROW><id>1884752</id><snippet>errorexit:</snippet></ROW><ROW><id>1884752</id><snippet>return NULL</snippet></ROW><ROW><id>1885002</id><snippet>from Queue import Queue
import time
import socket

#wraps system ping command
def ping(i, q):
    """Pings address"""
    while True:
        subnet = q.get()
        # each IP addresse in subnet 
        for ip in (subnet=str(x) for x in range(1,254)):
            #print "Thread %s: Pinging %s" % (i, ip)
            result = subprocess.call("ping -n 1 %s" % ip, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
            #Avoid flooding the network with ping requests
            time.sleep(3)
            if result == 0:

                try:
                    hostname=socket.gethostbyaddr(ip)
                    print "%s (%s): alive" % (ip,hostname[0]  
                except:
                    print "%s: alive"%ip
                break
        q.task_done()

num_threads = 100
queue = Queue()

#Put all possible subnets on wireless network into a queue
for i in range(1,255):
    queue.put('128.119.%s.'%i)

#Spawn thread pool
for i in range(num_threads):
    worker = Thread(target=ping, args=(i, queue))
    worker.setDaemon(True)
    worker.start()

#Wait until worker threads are done to exit    
queue.join()
</snippet></ROW><ROW><id>1885026</id><snippet>PR_SET_DEATHSIG</snippet></ROW><ROW><id>1885026</id><snippet>fork</snippet></ROW><ROW><id>1885026</id><snippet>gnuchess</snippet></ROW><ROW><id>1885026</id><snippet>select</snippet></ROW><ROW><id>1885026</id><snippet>nohup</snippet></ROW><ROW><id>1885124</id><snippet> [
  {
    "model": "myapp.person",
    "pk": 1,
    "fields": {
      "first_name": "John",
      "last_name": "Lennon"
    }
  },
  {
    "model": "myapp.person",
    "pk": 2,
    "fields": {
      "first_name": "Paul",
      "last_name": "McCartney"
    }
  }
]
</snippet></ROW><ROW><id>1885188</id><snippet># current directory containing cgi-bin directory with scripts in
# subclass CGIHTTPRequestHandler and override cgi_directories to change this
#
os.chdir('/path/to/htdocs')

BaseHTTPServer.HTTPServer(('',80), CGIHTTPServer.CGIHTTPRequestHandler).serve_forever()
</snippet></ROW><ROW><id>1885188</id><snippet>200 OK</snippet></ROW><ROW><id>1885197</id><snippet>&gt;&gt;&gt; print '"Hello,\\nworld!"'.decode('string_escape')
"Hello,
world!"
</snippet></ROW><ROW><id>1885262</id><snippet># pylint: disable-msg=C0103
</snippet></ROW><ROW><id>1885310</id><snippet>zip</snippet></ROW><ROW><id>1885310</id><snippet>l1 = [1, 2, 3]
l2 = [4, 5, 6]
&gt;&gt;&gt; zip(l1, l2)
[(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>1885310</id><snippet>&gt;&gt;&gt; print zip([1, 2, 3],[4, 5, 6, 7])
[(1, 4), (2, 5), (3, 6)]
</snippet></ROW><ROW><id>1885310</id><snippet>&gt;&gt;&gt; zip([1, 2, 3], [4, 5, 6], [7, 8, 9])
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
</snippet></ROW><ROW><id>1885310</id><snippet>zip</snippet></ROW><ROW><id>1885310</id><snippet>&gt;&gt;&gt; l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
&gt;&gt;&gt; zip(*l)
[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
</snippet></ROW><ROW><id>1885333</id><snippet>from django.shortcuts import get_object_or_404
artist = get_object_or_404(Artist, id=id)
</snippet></ROW><ROW><id>1885333</id><snippet>artist</snippet></ROW><ROW><id>1885353</id><snippet>dict</snippet></ROW><ROW><id>1885353</id><snippet>csv.DictReader</snippet></ROW><ROW><id>1885353</id><snippet>.fieldnames</snippet></ROW><ROW><id>1885353</id><snippet>for rowdict in myReader:
  print ['%s:%s' % (f, rowdict[f]) for f in myReader.fieldnames]
</snippet></ROW><ROW><id>1885353</id><snippet>.fieldnames</snippet></ROW><ROW><id>1885353</id><snippet>dict</snippet></ROW><ROW><id>1885353</id><snippet>a.csv</snippet></ROW><ROW><id>1885353</id><snippet>b.csv</snippet></ROW><ROW><id>1885353</id><snippet>import csv

a = open('a.csv', 'r')
b = open('b.csv', 'w')
ra = csv.DictReader(a)
wb = csv.DictWriter(b, None)

for d in ra:

  if wb.fieldnames is None:
    # initialize and write b's headers
    dh = dict((h, h) for h in ra.fieldnames)
    wb.fieldnames = ra.fieldnames
    wb.writerow(dh)

  wb.writerow(d)

b.close()
a.close()
</snippet></ROW><ROW><id>1885353</id><snippet>a.csv</snippet></ROW><ROW><id>1885353</id><snippet>b.csv</snippet></ROW><ROW><id>1885417</id><snippet>from myapp.models import MyModel
import urllib2

with open("sourceListOfURLs.txt", "r" ) as source:
    for aLine in source:
        for this, the, the_other in someGenerator( aLine ):
            object= MyModel.objects.create( field1=this, field2=that, field3=the_other )
            object.save()

def someGenerator( url ):
    # open the URL with urllib2
    # parse the data with BeautifulSoup
    yield this, that, the_other
</snippet></ROW><ROW><id>1885447</id><snippet>class ListParser:

 def __init__(self, s):
  self.str = s.split("\n")
  print self.str
  self.answer = []

 def parse(self):
  self.nextLine()
  self.topList()
  return

 def topList(self):
  while(len(self.str) &gt; 0):
   self.topListItem()

 def topListItem(self):
  l = self.nextLine()
  print "TOP: " + l
  l = self.nextLine()
  if l != '':
   raise Exception("expected blank line but found '%s'" % l)
  sub = self.sublist()

 def nextLine(self):
  return self.str.pop(0)

 def sublist(self):
  while True:
   l = self.nextLine()
   if l == '':
    return # end of sublist marked by blank line
   else:
    print "SUB: " + l

parser = ListParser(s)
parser.parse() 
print "done"
</snippet></ROW><ROW><id>1885447</id><snippet>TOP: 1 List name
SUB: 1 item
SUB: 2 item
SUB: 3 item
TOP: 2 List name
SUB: 1 item
SUB: 2 item
SUB: 3 item
TOP: 3 List name
SUB: 1 item
SUB: 2 item
SUB: 3 item
done
</snippet></ROW><ROW><id>1885778</id><snippet>import subprocess
foo = subprocess.Popen('test.exe',stdout=subprocess.PIPE,stderr=subprocess.PIPE)
</snippet></ROW><ROW><id>1886035</id><snippet>L = list # 'list' is a poor variable name, use something else
result = min((n.foo(args) for n in L),
             key=lambda x: ClassFred.objects.get(arg1=x))
# if you don't have to use arg1 as a named parameter:
result = min((n.foo(args) for n in L), key=ClassFred.objects.get)
</snippet></ROW><ROW><id>1886035</id><snippet>&gt;&gt;&gt; L = [-2, -1, 3]
&gt;&gt;&gt; min(L)
-2
&gt;&gt;&gt; min(L, key=abs)
-1
</snippet></ROW><ROW><id>1886035</id><snippet>&gt;&gt;&gt; def identity(x):
...   return x
&gt;&gt;&gt; min(L, key=identity)
-2
</snippet></ROW><ROW><id>1886035</id><snippet>&gt;&gt;&gt; min("0000", "11", "222", "3")
"0000" # lexicographical minimum
&gt;&gt;&gt; min("0000", "11", "222", "3", key=len)
"3"
</snippet></ROW><ROW><id>1886035</id><snippet>item.foo(args)</snippet></ROW><ROW><id>1886035</id><snippet>ClassFred.objects.get(arg1=..)</snippet></ROW><ROW><id>1886035</id><snippet>values = (n.foo(args) for n in L) # this is a generator expression
# it is similar to a list comprehension, but doesn't compute or store
# everything immediately

def keyfunc(x):
  return ClassFred.objects.get(arg1=x)

result = min(values, key=keyfunc)
</snippet></ROW><ROW><id>1886176</id><snippet>.put</snippet></ROW><ROW><id>1886176</id><snippet>.get</snippet></ROW><ROW><id>1886176</id><snippet>.get_nowait</snippet></ROW><ROW><id>1886486</id><snippet>sample.ini</snippet></ROW><ROW><id>1886486</id><snippet>development.ini</snippet></ROW><ROW><id>1886662</id><snippet>import urllib

x = "http://query.yahooapis.com/v1/public/yql?q=select%20owner%2Curls%20from%20flickr.photos.info%20where%20photo_id%3D'%s'&amp;format=json"
tmp = urllib.unquote(x)
tmp2 = tmp % (foo, bar)
x = urllib.quote(tmp2)
</snippet></ROW><ROW><id>1886836</id><snippet>HttpResponse</snippet></ROW><ROW><id>1886836</id><snippet>from django.http import HttpResponse
import xlwt

def my_view(request):
    response = HttpResponse(mimetype="application/ms-excel")
    response['Content-Disposition'] = 'attachment; filename="foo.xls"'
    wb = xlwt.Workbook()
    wb.save(response)
    return response
</snippet></ROW><ROW><id>1887169</id><snippet>f = open('fname')
header = [next(f) for _ in range(header_len)]
</snippet></ROW><ROW><id>1887169</id><snippet>open('new', 'w').writelines(header + list_of_lines)
</snippet></ROW><ROW><id>1887169</id><snippet>list_of_lines</snippet></ROW><ROW><id>1887169</id><snippet>list_of_lines = [next(f) for _ in range(chunk_len)]
</snippet></ROW><ROW><id>1887241</id><snippet>walk(dir)</snippet></ROW><ROW><id>1887241</id><snippet>dir</snippet></ROW><ROW><id>1887241</id><snippet>for dirpath, dirnames, filenames in os.walk(dir):
    for filename in filenames:
        path = os.path.join(dirpath, filename)
</snippet></ROW><ROW><id>1887367</id><snippet>pub_date</snippet></ROW><ROW><id>1887367</id><snippet>django.db.models.DateField</snippet></ROW><ROW><id>1887367</id><snippet>datetime.date</snippet></ROW><ROW><id>1887367</id><snippet>datetime.datetime</snippet></ROW><ROW><id>1887367</id><snippet>datetime.date</snippet></ROW><ROW><id>1887367</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>1887367</id><snippet>datetime.datetime.now()</snippet></ROW><ROW><id>1887367</id><snippet>pub_date</snippet></ROW><ROW><id>1887367</id><snippet>ds = datetime.date.today()</snippet></ROW><ROW><id>1887367</id><snippet>&gt;&gt;&gt; ds = datetime.date.today()
&gt;&gt;&gt; dd = datetime.date(2009, 12, 9)
&gt;&gt;&gt; ds - dd
datetime.timedelta(2) # 2 days ago
</snippet></ROW><ROW><id>1887418</id><snippet>i = int(sys.argv[1], 16)</snippet></ROW><ROW><id>1887534</id><snippet>print getattr(tc, 'foo')
</snippet></ROW><ROW><id>1887534</id><snippet>getattr(tc, 'methodname')(arg1, arg2)
</snippet></ROW><ROW><id>1887534</id><snippet>setattr(tc, 'foo', 'bar')
</snippet></ROW><ROW><id>1887534</id><snippet>hasattr(tc, 'foo')
</snippet></ROW><ROW><id>1887570</id><snippet>import struct
value = struct.unpack('B', data[0])[0]
</snippet></ROW><ROW><id>1887699</id><snippet>description: describe the command
user_options: a list of options
initialize_options(): called at startup
finalize_options(): called at the end
run(): called to run the command
</snippet></ROW><ROW><id>1887699</id><snippet> class MyCommand(Command):
     """setuptools Command"""
     description = "run my command"
     user_options = tuple()
     def initialize_options(self):
         """init options"""
         pass

     def finalize_options(self):
         """finalize options"""
         pass

     def run(self):
         """runner"""
         XXX DO THE JOB HERE
</snippet></ROW><ROW><id>1887699</id><snippet> setup(
     # ...
     entry_points = {
     "distutils.commands": [
     "my_command = mypackage.some_module:MyCommand"]}
</snippet></ROW><ROW><id>1887701</id><snippet>lst = ['one', 'two', 'three']
resp = { 'one': num1, 'two': num2, 'three': num3 }

for item in lst:
  print resp[item]
</snippet></ROW><ROW><id>1887701</id><snippet>lst</snippet></ROW><ROW><id>1887730</id><snippet>s[-2:] == "00"
</snippet></ROW><ROW><id>1887735</id><snippet>  ls &gt; dirlist 2&gt;&amp;1
</snippet></ROW><ROW><id>1887735</id><snippet> ls 2&gt;&amp;1 &gt; dirlist
</snippet></ROW><ROW><id>1887735</id><snippet>2&gt;&amp;1</snippet></ROW><ROW><id>1887735</id><snippet>stderr</snippet></ROW><ROW><id>1887735</id><snippet>stdout</snippet></ROW><ROW><id>1887735</id><snippet>cron</snippet></ROW><ROW><id>1887735</id><snippet>stdout</snippet></ROW><ROW><id>1887735</id><snippet>stdout</snippet></ROW><ROW><id>1887735</id><snippet>05 18 * * * ~/job.sh &gt;&gt;~/job.log 2&gt;&amp;1
</snippet></ROW><ROW><id>1887854</id><snippet>Multiplier.py</snippet></ROW><ROW><id>1887854</id><snippet>class Multiplier:

  def multiply(self, x, y):
    return x * y

x = Multiplier().multiply(5, 7)
</snippet></ROW><ROW><id>1887854</id><snippet>public static void main(String[] args) throws Exception {
    ScriptEngine engine = new ScriptEngineManager().getEngineByName("python");

    FileReader f = new FileReader("Multiplier.py");
    engine.eval(f);
    Object x = engine.get("x");
    System.out.println("x: " + x);
}
</snippet></ROW><ROW><id>1887854</id><snippet>x: 35
</snippet></ROW><ROW><id>1888133</id><snippet>int()</snippet></ROW><ROW><id>1888133</id><snippet>&gt;&gt;&gt; int('0x01010000',16)
16842752
</snippet></ROW><ROW><id>1888133</id><snippet>&amp;</snippet></ROW><ROW><id>1888133</id><snippet>|</snippet></ROW><ROW><id>1888133</id><snippet>&gt;&gt;&gt; value  = int('0x01010000',16)
&gt;&gt;&gt; apple  = 0x01000000
&gt;&gt;&gt; orange = 0x00010000
&gt;&gt;&gt; banana = 0x00000100
&gt;&gt;&gt; bool(value &amp; apple) # tests if apple is part of the value
True
&gt;&gt;&gt; value |= banana     # adds the banana flag to the value
&gt;&gt;&gt; value &amp;= ~orange    # removes the orange flag from the value
</snippet></ROW><ROW><id>1888133</id><snippet>&gt;&gt;&gt; hex(value)
'0x1000100'
</snippet></ROW><ROW><id>1888571</id><snippet>request</snippet></ROW><ROW><id>1888571</id><snippet>RequestContext</snippet></ROW><ROW><id>1888571</id><snippet>reverse</snippet></ROW><ROW><id>1888571</id><snippet>home</snippet></ROW><ROW><id>1889112</id><snippet>* n</snippet></ROW><ROW><id>1889441</id><snippet>self.rules[a] = [{b:{'f_expr': c, 'c_expr': d}}]
</snippet></ROW><ROW><id>1889441</id><snippet>self.rules</snippet></ROW><ROW><id>1889593</id><snippet>primaryjoin</snippet></ROW><ROW><id>1889593</id><snippet>secondaryjoin</snippet></ROW><ROW><id>1889593</id><snippet>mapper(
    User, t_users,
    properties={
        'followers': relation(
            User,
            secondary=t_follows,
            primaryjoin=(t_follows.c.followee_id==t_users.c.id),
            secondaryjoin=(t_follows.c.follower_id==t_users.c.id),
        ),
        'followees': relation(
            User,
            secondary=t_follows,
            primaryjoin=(t_follows.c.follower_id==t_users.c.id),
            secondaryjoin=(t_follows.c.followee_id==t_users.c.id),
        ),
    },
)
</snippet></ROW><ROW><id>1889593</id><snippet>primaryjoin</snippet></ROW><ROW><id>1889593</id><snippet>secondaryjoin</snippet></ROW><ROW><id>1889593</id><snippet>backref</snippet></ROW><ROW><id>1889593</id><snippet>id</snippet></ROW><ROW><id>1889593</id><snippet>follower_id</snippet></ROW><ROW><id>1889593</id><snippet>followee_id</snippet></ROW><ROW><id>1889627</id><snippet>imgarray = imgarray.astype('B')</snippet></ROW><ROW><id>1889627</id><snippet>imgarray.view('uint8')</snippet></ROW><ROW><id>1889627</id><snippet>uint8</snippet></ROW><ROW><id>1889627</id><snippet>imgarray.dtype</snippet></ROW><ROW><id>1889627</id><snippet>np.dot</snippet></ROW><ROW><id>1889627</id><snippet>uint32</snippet></ROW><ROW><id>1889627</id><snippet>np.dot</snippet></ROW><ROW><id>1889627</id><snippet>imgarray</snippet></ROW><ROW><id>1889627</id><snippet>uint32</snippet></ROW><ROW><id>1889627</id><snippet>view</snippet></ROW><ROW><id>1889627</id><snippet>imgarray.view('uint8')[:,::4]</snippet></ROW><ROW><id>1889627</id><snippet>In [37]: %timeit imgarray2 = imgarray.astype('B')
10000 loops, best of 3: 107 us per loop

In [39]: %timeit imgarray3 = imgarray.view('B')[:,::4]
100000 loops, best of 3: 3.64 us per loop
</snippet></ROW><ROW><id>1889686</id><snippet>shutil.rmtree</snippet></ROW><ROW><id>1889686</id><snippet>import os, stat, shutil

def remove_readonly(fn, path, excinfo):
    if fn is os.rmdir:
        os.chmod(path, stat.S_IWRITE)
        os.rmdir(path)
    elif fn is os.remove:
        os.chmod(path, stat.S_IWRITE)
        os.remove(path)

shutil.rmtree(top, onerror=remove_readonly)
</snippet></ROW><ROW><id>1890059</id><snippet>urlfetch.fetch()</snippet></ROW><ROW><id>1890059</id><snippet>headers</snippet></ROW><ROW><id>1890059</id><snippet>if result['Content-Type'] in ('text/html', 'application/xhtml+xml'):
    # assuming you want to do something with the content
    doSomethingWithXHTML(result.content)
else:
    # use content for something else
    doTheOtherThing(result.content)
</snippet></ROW><ROW><id>1890286</id><snippet>try:
    urllib2.urlopen(req)
except urllib2.HTTPError, e:
    print "Response code",e.code # prints 404
    print "Response body",e.read() # prints the body of the response...
                                   # ie: your XML
    print "Headers",e.headers.headers
</snippet></ROW><ROW><id>1890286</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("www.stackoverflow.com")
&gt;&gt;&gt; conn.request("GET", "/dlkfjadslkfjdslkfjd.html")
&gt;&gt;&gt; r = conn.getresponse()
&gt;&gt;&gt; r.status
301
&gt;&gt;&gt; r.reason
'Moved Permanently'
&gt;&gt;&gt; r.read()
'&lt;head&gt;&lt;title&gt;Document Moved&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;&lt;h1&gt;Object Moved&lt;/h1&gt;
 This document may be found   
 &lt;a HREF="http://stackoverflow.com/dlkfjadslkfjdslkfjd.html"&gt;here&lt;/a&gt;&lt;/body&gt;'
</snippet></ROW><ROW><id>1890286</id><snippet>r.getheaders()</snippet></ROW><ROW><id>1890738</id><snippet>foo = bar</snippet></ROW><ROW><id>1890738</id><snippet>foo</snippet></ROW><ROW><id>1890738</id><snippet>nonlocal</snippet></ROW><ROW><id>1890738</id><snippet>retval = [True]
def cb(widget):
    retval[0] = False
    gtk.main_quit()
...
return retval[0]
</snippet></ROW><ROW><id>1890835</id><snippet>from fdfgen import forge_fdf
fields = [('name','John Smith'),('telephone','555-1234')]
fdf = forge_fdf("",fields,[],[],[])
fdf_file = open("data.fdf","w")
fdf_file.write(fdf)
fdf_file.close()
</snippet></ROW><ROW><id>1890835</id><snippet>pdftk form.pdf fill_form data.fdf output output.pdf flatten
</snippet></ROW><ROW><id>1891205</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>1891205</id><snippet>settings.py</snippet></ROW><ROW><id>1891205</id><snippet># in code/models.py

class Questions(models.Model):
    histories = models.ManyToManyField('history.MyHistoryModel')
</snippet></ROW><ROW><id>1891615</id><snippet>raise</snippet></ROW><ROW><id>1891615</id><snippet>Traceback (most recent call last):
  File "./exc.py", line 11, in &lt;module&gt;
    b()
  File "./exc.py", line 7, in b
    a()
  File "./exc.py", line 4, in a
    return UNBOUND
NameError: global name 'UNBOUND' is not defined
</snippet></ROW><ROW><id>1891615</id><snippet>e</snippet></ROW><ROW><id>1891615</id><snippet>raise</snippet></ROW><ROW><id>1891615</id><snippet>e.args = ("hi!",)
raise
</snippet></ROW><ROW><id>1891905</id><snippet>static</snippet></ROW><ROW><id>1891905</id><snippet>urls.py</snippet></ROW><ROW><id>1891905</id><snippet>(r'^static/(?P&lt;path&gt;.*)$', 'django.views.static.serve', {'document_root': settings.MEDIA_ROOT}),
</snippet></ROW><ROW><id>1891905</id><snippet>settings.py</snippet></ROW><ROW><id>1891905</id><snippet>MEDIA_ROOT = os.path.join(os.path.dirname(__file__), 'static').replace('\\', '/')
ADMIN_MEDIA_ROOT = os.path.join(os.path.dirname(__file__), 'static/admin').replace('\\', '/')
</snippet></ROW><ROW><id>1892227</id><snippet>  while 1:
     l = sys.stdin.readline()
</snippet></ROW><ROW><id>1892281</id><snippet>def __init__(self, numberOfInputs, numberOfHiddenNeurons, numberOfOutputs):
    NeuralNetworkBase.__init__(self, numberOfInputers, numberOfHiddenNeurons, numberOfOutputs)
    self.outputLayerDeltas = numpy.zeros(shape = (numberOfOutputs))
    self.hiddenLayerDeltas = numpy.zeros(shape = (numberOfHiddenNeurons))
</snippet></ROW><ROW><id>1892281</id><snippet>super</snippet></ROW><ROW><id>1892614</id><snippet>lambda</snippet></ROW><ROW><id>1892614</id><snippet>map</snippet></ROW><ROW><id>1892614</id><snippet>filter</snippet></ROW><ROW><id>1892614</id><snippet>reduce</snippet></ROW><ROW><id>1892614</id><snippet>lambda</snippet></ROW><ROW><id>1892614</id><snippet>def</snippet></ROW><ROW><id>1892614</id><snippet>def</snippet></ROW><ROW><id>1892614</id><snippet>inc = lambda x: x + 1
</snippet></ROW><ROW><id>1892614</id><snippet>inc</snippet></ROW><ROW><id>1892614</id><snippet>inc.__name__</snippet></ROW><ROW><id>1892614</id><snippet>'&lt;lambda&gt;'</snippet></ROW><ROW><id>1892614</id><snippet>def inc(x): return x + 1
</snippet></ROW><ROW><id>1892614</id><snippet>inc.__name__</snippet></ROW><ROW><id>1892614</id><snippet>'inc'</snippet></ROW><ROW><id>1892614</id><snippet>def</snippet></ROW><ROW><id>1892614</id><snippet>print</snippet></ROW><ROW><id>1892614</id><snippet>raise</snippet></ROW><ROW><id>1892614</id><snippet>lambda</snippet></ROW><ROW><id>1892614</id><snippet>def</snippet></ROW><ROW><id>1892614</id><snippet>lambda</snippet></ROW><ROW><id>1892614</id><snippet>reduce</snippet></ROW><ROW><id>1892614</id><snippet>reduce</snippet></ROW><ROW><id>1892614</id><snippet>$ python -mtimeit -s'L=range(12,52)' 'reduce(lambda x,y: x*y, L, 1)'
100000 loops, best of 3: 18.3 usec per loop
$ python -mtimeit -s'L=range(12,52)' 'p=1' 'for x in L: p*=x'
100000 loops, best of 3: 10.5 usec per loop
</snippet></ROW><ROW><id>1892614</id><snippet>$ python -mtimeit -s'import operator; L=range(12,52)' 'reduce(operator.mul, L, 1)'
100000 loops, best of 3: 10.7 usec per loop
</snippet></ROW><ROW><id>1892614</id><snippet>lambda</snippet></ROW><ROW><id>1892614</id><snippet>reduce</snippet></ROW><ROW><id>1892614</id><snippet>map</snippet></ROW><ROW><id>1892614</id><snippet>filter</snippet></ROW><ROW><id>1892614</id><snippet>thelist.sort(key=lambda s: len(s))
</snippet></ROW><ROW><id>1892614</id><snippet>thelist.sort(key=len)
</snippet></ROW><ROW><id>1892614</id><snippet>lambda</snippet></ROW><ROW><id>1892614</id><snippet>lambda</snippet></ROW><ROW><id>1892614</id><snippet>map</snippet></ROW><ROW><id>1892614</id><snippet>filter</snippet></ROW><ROW><id>1892614</id><snippet>if</snippet></ROW><ROW><id>1892614</id><snippet>map</snippet></ROW><ROW><id>1892614</id><snippet>itertools</snippet></ROW><ROW><id>1892614</id><snippet>itertools</snippet></ROW><ROW><id>1892614</id><snippet>imap</snippet></ROW><ROW><id>1892614</id><snippet>ifilter</snippet></ROW><ROW><id>1892614</id><snippet>map</snippet></ROW><ROW><id>1892614</id><snippet>filter</snippet></ROW><ROW><id>1892614</id><snippet>itertools</snippet></ROW><ROW><id>1892614</id><snippet>lambda</snippet></ROW><ROW><id>1892614</id><snippet>map</snippet></ROW><ROW><id>1892614</id><snippet>filter</snippet></ROW><ROW><id>1892614</id><snippet>def</snippet></ROW><ROW><id>1892614</id><snippet>itertools</snippet></ROW><ROW><id>1892614</id><snippet>reduce</snippet></ROW><ROW><id>1893104</id><snippet>decimal</snippet></ROW><ROW><id>1893104</id><snippet>&gt;&gt;&gt; print '%.2f' % (0.1+0.1+0.1-0.3,)
0.00
</snippet></ROW><ROW><id>1893622</id><snippet>setup.py develop</snippet></ROW><ROW><id>1893696</id><snippet>from win32con import PAGE_READWRITE, MEM_COMMIT, MEM_RESERVE, MEM_RELEASE,\
    PROCESS_ALL_ACCESS
from commctrl import LVM_GETITEMTEXT, LVM_GETITEMCOUNT

import struct
import ctypes
import win32api
import win32gui

GetWindowThreadProcessId = ctypes.windll.user32.GetWindowThreadProcessId
VirtualAllocEx = ctypes.windll.kernel32.VirtualAllocEx
VirtualFreeEx = ctypes.windll.kernel32.VirtualFreeEx
OpenProcess = ctypes.windll.kernel32.OpenProcess
WriteProcessMemory = ctypes.windll.kernel32.WriteProcessMemory
ReadProcessMemory = ctypes.windll.kernel32.ReadProcessMemory
memcpy = ctypes.cdll.msvcrt.memcpy


def readListViewItems(hwnd, column_index=0):

    # Allocate virtual memory inside target process
    pid = ctypes.create_string_buffer(4)
    p_pid = ctypes.addressof(pid)
    GetWindowThreadProcessId(hwnd, p_pid) # process owning the given hwnd
    hProcHnd = OpenProcess(PROCESS_ALL_ACCESS, False, struct.unpack("i",pid)[0])
    pLVI = VirtualAllocEx(hProcHnd, 0, 4096, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE)
    pBuffer = VirtualAllocEx(hProcHnd, 0, 4096, MEM_RESERVE|MEM_COMMIT, PAGE_READWRITE)

    # Prepare an LVITEM record and write it to target process memory
    lvitem_str = struct.pack('iiiiiiiii', *[0,0,column_index,0,0,pBuffer,4096,0,0])
    lvitem_buffer = ctypes.create_string_buffer(lvitem_str)
    copied = ctypes.create_string_buffer(4)
    p_copied = ctypes.addressof(copied)
    WriteProcessMemory(hProcHnd, pLVI, ctypes.addressof(lvitem_buffer), ctypes.sizeof(lvitem_buffer), p_copied)

    # iterate items in the SysListView32 control
    num_items = win32gui.SendMessage(hwnd, LVM_GETITEMCOUNT)
    item_texts = []
    for item_index in range(num_items):
        win32gui.SendMessage(hwnd, LVM_GETITEMTEXT, item_index, pLVI)
        target_buff = ctypes.create_string_buffer(4096)
        ReadProcessMemory(hProcHnd, pBuffer, ctypes.addressof(target_buff), 4096, p_copied)
        item_texts.append(target_buff.value)

    VirtualFreeEx(hProcHnd, pBuffer, 0, MEM_RELEASE)
    VirtualFreeEx(hProcHnd, pLVI, 0, MEM_RELEASE)
    win32api.CloseHandle(hProcHnd)
    return item_texts
</snippet></ROW><ROW><id>1893741</id><snippet>&gt;&gt;&gt; def unpack(seq, count):
...   return seq[:count] + [seq[count:]]
&gt;&gt;&gt; a, b = unpack([1, 2, 3], 1)
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
[2, 3]
&gt;&gt;&gt; a, b = unpack([1, 2], 1)
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
[2]
&gt;&gt;&gt; a, b = unpack([1], 1)
&gt;&gt;&gt; a
1
&gt;&gt;&gt; b
[]
&gt;&gt;&gt; a, b = unpack([], 1)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: need more than 1 value to unpack
&gt;&gt;&gt; a, b, c, d = unpack(range(10), 3)
&gt;&gt;&gt; a
0
&gt;&gt;&gt; b
1
&gt;&gt;&gt; c
2
&gt;&gt;&gt; d
[3, 4, 5, 6, 7, 8, 9]
</snippet></ROW><ROW><id>1893877</id><snippet>randomInts = [random.randrange(2000) for _ in range(100)]
</snippet></ROW><ROW><id>1893877</id><snippet>randomStrings = [str(x) for x in randomInts]
</snippet></ROW><ROW><id>1894125</id><snippet>+</snippet></ROW><ROW><id>1894125</id><snippet>os.path.join()</snippet></ROW><ROW><id>1894125</id><snippet>in_file = input_file_name
out_file = in_file + '.json'
</snippet></ROW><ROW><id>1894296</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; x = u'[ "A","B","C" , " D"]'
&gt;&gt;&gt; x = ast.literal_eval(x)
&gt;&gt;&gt; x
['A', 'B', 'C', ' D']
&gt;&gt;&gt; x = [n.strip() for n in x]
&gt;&gt;&gt; x
['A', 'B', 'C', 'D']
</snippet></ROW><ROW><id>1894345</id><snippet>import subprocess

s = """/usr/local/sbin/kamctl fifo profile_get_size myprofile | awk -F ':: ' '{print $2}'"""

p = subprocess.Popen(s, shell=True, stdout=subprocess.PIPE)

out, err = p.communicate()

print 'out: %r' % out
print 'err: %r' % err
print 'status: %r' % p.returncode
</snippet></ROW><ROW><id>1894643</id><snippet>makedict(name)</snippet></ROW><ROW><id>1894643</id><snippet>name</snippet></ROW><ROW><id>1894643</id><snippet>makedict</snippet></ROW><ROW><id>1894643</id><snippet>23</snippet></ROW><ROW><id>1894643</id><snippet>23</snippet></ROW><ROW><id>1894643</id><snippet>name</snippet></ROW><ROW><id>1894643</id><snippet>foo</snippet></ROW><ROW><id>1894643</id><snippet>baz</snippet></ROW><ROW><id>1894643</id><snippet>makedict('name type', locals())</snippet></ROW><ROW><id>1894643</id><snippet>locals()</snippet></ROW><ROW><id>1894643</id><snippet>makedict</snippet></ROW><ROW><id>1894643</id><snippet>def makedict(names, *namespaces):
  d = {}
  for n in names.split():
    for ns in namespaces:
      if n in ns:
        d[n] = ns[n]
        break
    else:
      d[n] = None  # or, raise an exception
</snippet></ROW><ROW><id>1894643</id><snippet>inspect</snippet></ROW><ROW><id>1894643</id><snippet>def item_blah(self, item):
    dispatch("blah", item)
</snippet></ROW><ROW><id>1894643</id><snippet>class Item(object): pass

def _makedispcall(n):
  def item_whatever(self, item):
    dispatch(n, item)
  item_whatever.__name__ = 'item_' + n
  return item_whatever

for n in 'create delete blah but wait theres more'.split():
  setattr(Item, 'item_' + n, _makedispcall(n))
</snippet></ROW><ROW><id>1894756</id><snippet>lxml</snippet></ROW><ROW><id>1894761</id><snippet>html = '''&lt;tr&gt;&lt;td valign="top"&gt;&lt;img src="/icons/unknown.gif" alt="[   ]"&gt;software_0.1-0.log&lt;/td&gt;&lt;td align="right"&gt;17-Nov-2009 13:46  &lt;/td&gt;&lt;td align="right"&gt;186K&lt;/td&gt;&lt;/tr&gt;'''

import BeautifulSoup
soup = BeautifulSoup.BeautifulSoup(html)
print soup.td.next.next
print soup.td.nextSibling.next
</snippet></ROW><ROW><id>1894761</id><snippet>software_0.1-0.log
17-Nov-2009 13:46
</snippet></ROW><ROW><id>1894914</id><snippet>class Node(object):
  def __init__(self, value, left=None, right=None):
    self.value = value
    self.left = left
    self.right = right

def traverse(rootnode):
  thislevel = [rootnode]
  while thislevel:
    nextlevel = list()
    for n in thislevel:
      print n.value,
      if n.left: nextlevel.append(n.left)
      if n.right: nextlevel.append(n.right)
    print
    thislevel = nextlevel

t = Node(1, Node(2, Node(4, Node(7))), Node(3, Node(5), Node(6)))

traverse(t)
</snippet></ROW><ROW><id>1894914</id><snippet>collection.deque</snippet></ROW><ROW><id>1894914</id><snippet>list</snippet></ROW><ROW><id>1894914</id><snippet>popleft</snippet></ROW><ROW><id>1894914</id><snippet>push_back</snippet></ROW><ROW><id>1894914</id><snippet>.reverse</snippet></ROW><ROW><id>1894914</id><snippet>.pop</snippet></ROW><ROW><id>1894914</id><snippet>deque</snippet></ROW><ROW><id>1894914</id><snippet>pop</snippet></ROW><ROW><id>1894914</id><snippet>pop_back</snippet></ROW><ROW><id>1895053</id><snippet>r'[a-zA-Z0-9]+_[^_]+_[a-zA-Z0-9]+\.[a-zA-Z0-9]+'
</snippet></ROW><ROW><id>1895111</id><snippet>1. Run startup code
2. Run request function
3. Wait for new request, then goto step 2.
</snippet></ROW><ROW><id>1895111</id><snippet>1. Start PHP Engine
2. Run script
3. Wait for new request, then goto step 2.
</snippet></ROW><ROW><id>1895511</id><snippet>assert isinstance(swarm, ParticleSwarmOptimization)
</snippet></ROW><ROW><id>1895573</id><snippet>for year in yearList</snippet></ROW><ROW><id>1895573</id><snippet>for year in yearList:
    os.chdir(year)
    ...
    os.chdir('..')
</snippet></ROW><ROW><id>1895588</id><snippet>PATH</snippet></ROW><ROW><id>1895588</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>1895588</id><snippet>.bash_profile</snippet></ROW><ROW><id>1895588</id><snippet>PATH</snippet></ROW><ROW><id>1895588</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>1895588</id><snippet>PATH</snippet></ROW><ROW><id>1895588</id><snippet>python</snippet></ROW><ROW><id>1895588</id><snippet>/usr/bin/env python</snippet></ROW><ROW><id>1895588</id><snippet>/opt/local/bin/python2.6</snippet></ROW><ROW><id>1895588</id><snippet>Carbon Emacs.app</snippet></ROW><ROW><id>1895588</id><snippet>LSEnvironment</snippet></ROW><ROW><id>1895588</id><snippet>PATH</snippet></ROW><ROW><id>1895588</id><snippet>PATH</snippet></ROW><ROW><id>1895588</id><snippet>~/.MacOSX/environment.plist</snippet></ROW><ROW><id>1895588</id><snippet>easy_install</snippet></ROW><ROW><id>1895588</id><snippet>easy_install</snippet></ROW><ROW><id>1895588</id><snippet>/usr/bin</snippet></ROW><ROW><id>1895588</id><snippet>$ sudo port install py26-setuptools
$ /opt/local/bin/easy_install-2.6 &lt;package&gt;
</snippet></ROW><ROW><id>1895619</id><snippet>randomSample = [(random() - 0.5, random() - 0.5) for _ in range(count)]
</snippet></ROW><ROW><id>1895619</id><snippet>count=10</snippet></ROW><ROW><id>1895619</id><snippet>random()</snippet></ROW><ROW><id>1895619</id><snippet>[(-0.07, -0.40), (0.39, 0.18), (0.13, 0.29), (-0.11, -0.15),\
(-0.49, 0.42), (-0.20, 0.21), (-0.44, 0.36), (0.22, -0.08),\
(0.21, 0.31), (0.33, 0.02)]
</snippet></ROW><ROW><id>1895619</id><snippet>lambda</snippet></ROW><ROW><id>1895619</id><snippet>f = lambda count: [(random() - 0.5, random() - 0.5) for _ in range(count)]
</snippet></ROW><ROW><id>1895619</id><snippet>&gt;&gt;&gt; f(1)
f(1)
[(0.03, -0.09)]
&gt;&gt;&gt; f(2)
f(2)
[(-0.13, 0.38), (0.10, -0.04)]
&gt;&gt;&gt; f(5)
f(5)
[(-0.38, -0.14), (0.31, -0.16), (-0.34, -0.46), (-0.45, 0.28), (-0.01, -0.18)]
&gt;&gt;&gt; f(10)
f(10)
[(0.01, -0.24), (0.39, -0.11), (-0.06, 0.09), (0.42, -0.26), (0.24, -0.44) , (-0.29, -0.30), (-0.27, 0.45), (0.10, -0.41), (0.36, -0.07), (0.00, -0.42)]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1895674</id><snippet>{% regroup %}</snippet></ROW><ROW><id>1895674</id><snippet>tags</snippet></ROW><ROW><id>1895674</id><snippet>{% regroup tags|dictsort:"count" by count as sorted_tags %}
...
{% for count in sorted_tags %}
...
    {% for tag in count %}
    ...
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>1895705</id><snippet>str(tuple(array))</snippet></ROW><ROW><id>1895705</id><snippet>str(tuple(...))</snippet></ROW><ROW><id>1895705</id><snippet>repr</snippet></ROW><ROW><id>1895705</id><snippet>str</snippet></ROW><ROW><id>1895705</id><snippet>print</snippet></ROW><ROW><id>1895705</id><snippet>'1, 2'</snippet></ROW><ROW><id>1895705</id><snippet>1</snippet></ROW><ROW><id>1895705</id><snippet>2</snippet></ROW><ROW><id>1895705</id><snippet>&gt;&gt;&gt; array = [0.1, 0.2]
&gt;&gt;&gt; print str(tuple(array))
(0.10000000000000001, 0.20000000000000001)
</snippet></ROW><ROW><id>1895705</id><snippet>repr</snippet></ROW><ROW><id>1895705</id><snippet>str</snippet></ROW><ROW><id>1895705</id><snippet>float</snippet></ROW><ROW><id>1895705</id><snippet>int</snippet></ROW><ROW><id>1895705</id><snippet>&gt;&gt;&gt; print '(%s)' % (', '.join(str(x) for x in array))
(0.1, 0.2)
</snippet></ROW><ROW><id>1895705</id><snippet>list</snippet></ROW><ROW><id>1895962</id><snippet>x= time.time(); urllib2.urlopen("http://www.google.com").read(); print time.time()-x
0.166881084442

x= time.time(); urllib2.urlopen("http://www.google.com").geturl(); print time.time()-x
0.0772399902344
</snippet></ROW><ROW><id>1896129</id><snippet>...
if profile:
    import cProfile
    import lsprofcalltree

    profileFileName = 'Profiles/pythonray_' + time.strftime('%Y%m%d_%H%M%S') + '.profile'

    profile = cProfile.Profile()
    profile.run('pilImage = camera.render(scene, samplePattern)')

    kProfile = lsprofcalltree.KCacheGrind(profile)

    kFile = open (profileFileName, 'w+')
    kProfile.output(kFile)
    kFile.close()

    profile.print_stats()    
else:            
    pilImage = camera.render(scene, samplePattern)
...
</snippet></ROW><ROW><id>1896218</id><snippet>python testfile.py</snippet></ROW><ROW><id>1896218</id><snippet>settings.py</snippet></ROW><ROW><id>1896268</id><snippet>if isinstance(x, basestring):
   # a string
else:
   try: it = iter(x)
   except TypeError:
       # not an iterable
   else:
       # iterable (tuple, list, etc)
</snippet></ROW><ROW><id>1896343</id><snippet>@classmethod</snippet></ROW><ROW><id>1896343</id><snippet>@staticmethod</snippet></ROW><ROW><id>1896343</id><snippet>@classmethod
def create(cls, *args, **kwargs):
    obj = cls(*args, **kwargs)
    obj.set_defaults()
    return obj
</snippet></ROW><ROW><id>1896464</id><snippet>:</snippet></ROW><ROW><id>1896687</id><snippet>import time
import numpy as np
import csv

start = time.time()
def elapsed():
    return time.time() - start

# count data rows, to preallocate array
f = open('links.csv', 'rb')
def count(f):
    while 1:
        block = f.read(65536)
        if not block:
             break
        yield block.count(',')

linecount = sum(count(f))
print '\n%.3fs: file has %s rows' % (elapsed(), linecount)

# pre-allocate array and load data into array
m = np.zeros(linecount, dtype=[('a', np.uint32), ('b', np.uint32)])
f.seek(0)
f = csv.reader(open('links.csv', 'rb'))
for i, row in enumerate(f):
    m[i] = int(row[0]), int(row[1])

print '%.3fs: loaded' % elapsed()
# sort in-place
m.sort(order='b')

print '%.3fs: sorted' % elapsed()
</snippet></ROW><ROW><id>1896687</id><snippet>6.139s: file has 33253213 lines
238.130s: read into memory
517.669s: sorted
</snippet></ROW><ROW><id>1896687</id><snippet>kind="mergesort"</snippet></ROW><ROW><id>1896687</id><snippet>kind="heapsort"</snippet></ROW><ROW><id>1896741</id><snippet>round()</snippet></ROW><ROW><id>1896741</id><snippet>round(x[, n])
</snippet></ROW><ROW><id>1897273</id><snippet>p = re.compile(r'([a-zA-Z0-9\-\+\.]+)\ ([0-9][0-9a-zA-Z\:\.\-]+)')
iterator = p.finditer("amd64 build of dvdrip software 1:0.98.10-0.2svn20090909 in archive")
for match in iterator:
    print match.group()
# Prints: software 1:0.98.10-0.2svn20090909
</snippet></ROW><ROW><id>1897967</id><snippet>dir</snippet></ROW><ROW><id>1897967</id><snippet>&gt;&gt;&gt; dir(l1)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__delslice__', '__doc__', '__eq__',
'__ge__', '__getattribute__', '__getitem__', '__getslice__', '__gt__', '__hash__', '__iadd__', '__imul__',
'__init__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__',
'__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__setslice__',
'__str__', 'append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
</snippet></ROW><ROW><id>1897967</id><snippet>&gt;&gt;&gt; mydir = lambda a:[x for x in dir(a) if not x.startswith('_')]
&gt;&gt;&gt; mydir([])
['append', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
</snippet></ROW><ROW><id>1898053</id><snippet>&gt;&gt;&gt; from lxml import objectify
&gt;&gt;&gt; import StringIO
&gt;&gt;&gt; tree = objectify.parse(StringIO.StringIO('&lt;parent&gt;&lt;child&gt;Billy&lt;/child&gt;&lt;child&gt;Bob&lt;/child&gt;&lt;/parent&gt;'))
&gt;&gt;&gt; root = tree.getroot()
&gt;&gt;&gt; root.tag
'parent'
&gt;&gt;&gt; [(foo.tag, foo.text) for foo in root.getchildren()]
[('child', 'Billy'), ('child', 'Bob')]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1898053</id><snippet>deleg = getattr(self,'elem_' + str(root.tag))
deleg(tree)
</snippet></ROW><ROW><id>1898188</id><snippet>application = service.Application("chatserver")
internet.TCPServer(1025, factory).setServiceParent(application)
</snippet></ROW><ROW><id>1898188</id><snippet>from twisted.internet import reactor
reactor.listenTCP(1025, factory)
reactor.run()
</snippet></ROW><ROW><id>1898188</id><snippet>if __name__ == '__main__':
    from twisted.internet import reactor
    reactor.listenTCP(1025, factory)
    reactor.run()
else:
    application = service.Application("chatserver")
    internet.TCPServer(1025, factory).setServiceParent(application)
</snippet></ROW><ROW><id>1898324</id><snippet>import csv

reader = csv.reader(open('workers.csv', newline=''), delimiter=',', quotechar='"')
workers = [ageName(row[0], row[1]) for row in reader]
</snippet></ROW><ROW><id>1898324</id><snippet>&gt;&gt;&gt; workers[0].name
'jon'
</snippet></ROW><ROW><id>1898324</id><snippet>class Student:
    sports = []
    def __init__(self, row):
       self.lname, self.fname, self.ID, self.sport = row
       self.sports.append(self.sport)
    def get(self):
       return (self.lname, self.fname, self.ID, self.sport)

reader = csv.reader(open('copy-john.csv'), delimiter=',', quotechar='"')
print "%-14s|%-10s|%-5s|%-11s" % tuple(reader.next()) # read header line from csv
print "-" * 45
students = list(map(Student, reader)) # read all remaining lines
for student in students:
    print "%-14s|%-10s|%-5s|%3s" % student.get()

# Printing all sports that are specified by students
for s in set(Student.sports): # class attribute
    print s, Student.sports.count(s)

# Printing sports that are not picked 
allsports = ['Basketball','Football','Other','Baseball','Handball','Soccer','Volleyball','I do not like sport']
for s in set(allsports) - set(Student.sports):
    print s, 0
</snippet></ROW><ROW><id>1898324</id><snippet>allsports = ['Basketball','Football','Other','Baseball','Handball',
             'Soccer','Volleyball','I do not like sport']
sports = []
reader = csv.reader(open('copy-john.csv'))
for row in reader:
    if reader.line_num: sports.append(s[3])
    print "%-14s|%-10s|%-5s|%-11s" % tuple(s)
for s in allsports: print s, sports.count(s)
</snippet></ROW><ROW><id>1898333</id><snippet>nb_int</snippet></ROW><ROW><id>1898333</id><snippet>nb_int</snippet></ROW><ROW><id>1898333</id><snippet>nb_int</snippet></ROW><ROW><id>1898485</id><snippet>Hello, World
</snippet></ROW><ROW><id>1898485</id><snippet>Hello, World\r
</snippet></ROW><ROW><id>1898485</id><snippet>class MyChat(basic.LineReceiver):
    def __init__(self):
        self.delimiter = "\n"

    def connectionMade(self):
        print "Got new client!"
        self.factory.clients.append(self)

    def connectionLost(self, reason):
        print "Lost a client!"
        self.factory.clients.remove(self)

    def lineReceived(self, line):
        print "received", repr(line)
        for c in self.factory.clients:
            c.message(line)

    def message(self, message):
        self.transport.write(message + '\n')

factory = protocol.ServerFactory()
factory.protocol = MyChat
factory.clients = []

if __name__ == "__main__":
    print "Building reactor...."
    reactor.listenTCP(50000, factory)
    print "Running ractor...."
    reactor.run()
else:
    application = service.Application("chatserver")
    internet.TCPServer(50000, factory).setServiceParent(application)
</snippet></ROW><ROW><id>1898692</id><snippet>thread.comment_set.all</snippet></ROW><ROW><id>1898692</id><snippet>limit</snippet></ROW><ROW><id>1898692</id><snippet>views.py</snippet></ROW><ROW><id>1898692</id><snippet># take first three sorted descending
comments = thread.comment_set.order_by('-something')[:3]

context = Context({'comments':comments})
return HttpResponse(tmplt.render(context))
</snippet></ROW><ROW><id>1898692</id><snippet>slice</snippet></ROW><ROW><id>1898692</id><snippet>comments = list(thread.comment_set.all())
context = Context('comments':comments)
</snippet></ROW><ROW><id>1898692</id><snippet>{% for comment in comments|slice:"-3:" %}
</snippet></ROW><ROW><id>1898835</id><snippet>str.split</snippet></ROW><ROW><id>1898835</id><snippet>&gt;&gt;&gt; ' '.join("Please \n don't \t hurt \x0b me.".split())
"Please don't hurt me."
</snippet></ROW><ROW><id>1899112</id><snippet>import pexpect
c=pexpect.spawn('your_command')
c.expect("expected_output_regular_expression", timeout=10)
</snippet></ROW><ROW><id>1899417</id><snippet>import re
re.findall("\?read\.php=(\d+)",data)
</snippet></ROW><ROW><id>1899745</id><snippet>self.btn.Bind(wx.EVT_BUTTON, self._onBtnClick)
</snippet></ROW><ROW><id>1899745</id><snippet>import wx

app = wx.PySimpleApp()
frame = wx.Frame(None)
btn = wx.Button(frame, -1, "anurag")
btn.Bind(wx.EVT_BUTTON, lambda e:wx.MessageBox("Wow it works"))
frame.Show()
app.SetTopWindow(frame)
app.MainLoop()
</snippet></ROW><ROW><id>1900050</id><snippet>class Visitor {
    Stack&lt;Node&gt; stack = new Stack&lt;Node&gt;();

//    . . .

    void visitPlus(PlusExp pe) {
        pe.left.accept(this);
        pe.right.accept(this);
        Node b = stack.pop();
        Node a = stack.pop();
        stack.push(new BinOp(BinOp.PLUS, a, b));
    }
</snippet></ROW><ROW><id>1900222</id><snippet>&gt;&gt;&gt; os.path.basename(r'C:\abc.txt')
'abc.txt'
</snippet></ROW><ROW><id>1900222</id><snippet>&gt;&gt;&gt; base, ext = os.path.splitext(os.path.basename(r'C:\abc.txt'))
&gt;&gt;&gt; base
'abc'
</snippet></ROW><ROW><id>1900333</id><snippet>from __future__ import absolute_import
# Import uncertainties.math
from . import math as local_math
import math as sys_math
</snippet></ROW><ROW><id>1900489</id><snippet>&amp;</snippet></ROW><ROW><id>1900489</id><snippet>to_proc</snippet></ROW><ROW><id>1900489</id><snippet>given_code = 'n % 2 == 1'
pred = eval "lambda { |n| #{given_code} }"
p all = (1..10).select(&amp;pred)
</snippet></ROW><ROW><id>1900767</id><snippet>{% ifequal id "something"%}selected='selected'{% endifequal %}
</snippet></ROW><ROW><id>1901016</id><snippet>repr</snippet></ROW><ROW><id>1901016</id><snippet>&gt;&gt;&gt; dict = {'one': 1, 'two': 2}
&gt;&gt;&gt; repr(dict)
"{'two': 2, 'one': 1}"
</snippet></ROW><ROW><id>1901016</id><snippet>f = open( 'file.py', 'w' )
f.write( 'dict = ' + repr(dict) + '\n' )
f.close()
</snippet></ROW><ROW><id>1901422</id><snippet>SELECT * FROM customers WHERE name IN ('john', 'mary', 'jane');
</snippet></ROW><ROW><id>1901463</id><snippet>from twisted.internet import task

for i, row in enumerate(instruments):
    task.coiterate(self.table.SetValue(i, j, v) for j, v in enumerate(row))
</snippet></ROW><ROW><id>1901463</id><snippet>i</snippet></ROW><ROW><id>1901463</id><snippet>row</snippet></ROW><ROW><id>1901463</id><snippet>(lambda i=i, row=row: ...)()</snippet></ROW><ROW><id>1901463</id><snippet>task.coiterate()</snippet></ROW><ROW><id>1901463</id><snippet>self.table = instruments</snippet></ROW><ROW><id>1901481</id><snippet>inspect.getouterframes()</snippet></ROW><ROW><id>1901481</id><snippet>inspect.stack()</snippet></ROW><ROW><id>1901654</id><snippet>screenWidth = 10
screenHeight = 10

buf = [False] * screenWidth * screenHeight
def draw3dpoint(x,y,z):
    pt = int((((y / z) + (screenHeight/2)) * screenWidth) + (x / z) + (screenWidth/2))
    buf[pt] = True

draw3dpoint(3,0,5)
draw3dpoint(0,4,2)
draw3dpoint(-3,-4,3)

for y in range(screenHeight):
    for x in range(screenWidth):
        print(('#' if buf[y * screenWidth + x] else ' '), end='')
    print()
</snippet></ROW><ROW><id>1901654</id><snippet>for y in range(screenHeight):
    for x in range(screenWidth):
        print (buf[y * screenWidth + x] and '#' or ' '),
    print ''
</snippet></ROW><ROW><id>1901669</id><snippet># returns a surface with the circle drawn onto it
def render_transparent_circle(color, radius, width=0):
    size = radius * 2
    temp_surf = pygame.Surface((size, size), SRCALPHA)
    temp_surf.fill(Color(0, 0, 0, 0))
    pygame.draw.circle(temp_surf, color, (radius, radius), radius, width)
    return temp_surf

# draw a half-opaque blue circle of radius 30 to the display at point (50, 100)
def test():
    transp_blue = Color(0, 0, 255, 128)
    screen = pygame.display.get_surface()
    circle = render_transparent_circle(transp_blue, 30)
    screen.blit(circle, (50, 100))
</snippet></ROW><ROW><id>1901690</id><snippet>setuptools</snippet></ROW><ROW><id>1901690</id><snippet>easy_install</snippet></ROW><ROW><id>1901690</id><snippet>setuptools</snippet></ROW><ROW><id>1901690</id><snippet>parse_version</snippet></ROW><ROW><id>1901690</id><snippet>("4", "5", "6", "7")</snippet></ROW><ROW><id>1901690</id><snippet>x.y.z-dev</snippet></ROW><ROW><id>1901690</id><snippet>x.y.z</snippet></ROW><ROW><id>1901720</id><snippet>locals()</snippet></ROW><ROW><id>1901720</id><snippet>locals()</snippet></ROW><ROW><id>1901720</id><snippet>locals()</snippet></ROW><ROW><id>1901720</id><snippet>locals()</snippet></ROW><ROW><id>1901720</id><snippet>locals()</snippet></ROW><ROW><id>1901720</id><snippet>locals()</snippet></ROW><ROW><id>1901720</id><snippet>locals()</snippet></ROW><ROW><id>1901720</id><snippet>locals()</snippet></ROW><ROW><id>1902220</id><snippet>import pdb
def main():
  list = [1,2,3]
  pdb.set_trace()
  list = [2,3,4]

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>1902220</id><snippet>:!python %</snippet></ROW><ROW><id>1902304</id><snippet>Paragraphs</snippet></ROW><ROW><id>1902304</id><snippet>Paragraphs</snippet></ROW><ROW><id>1902304</id><snippet>KeepTogether</snippet></ROW><ROW><id>1902304</id><snippet>reportDocContent.append(KeepTogether(Paragraph(commentParagraph, style=commentParagraphStyle)))
</snippet></ROW><ROW><id>1902378</id><snippet>on</snippet></ROW><ROW><id>1902378</id><snippet>off</snippet></ROW><ROW><id>1902378</id><snippet>ioff()
</snippet></ROW><ROW><id>1902378</id><snippet>show()</snippet></ROW><ROW><id>1902658</id><snippet>digest = get_object_or_404(Digest, id=id)
if digest.user == request.user:
  digest.feeds.clear()
  #do your processing
</snippet></ROW><ROW><id>1902658</id><snippet>digest = get_object_or_404(Digest, id=id)
if digest.user == request.user:
  feed=digest.feeds.get(id=2)#get an instance of the feed to remove
  digest.feeds.remove(feed)#remove the instance
</snippet></ROW><ROW><id>1902737</id><snippet>import *</snippet></ROW><ROW><id>1902737</id><snippet>__all__</snippet></ROW><ROW><id>1902737</id><snippet>import *</snippet></ROW><ROW><id>1902737</id><snippet>template_module</snippet></ROW><ROW><id>1902737</id><snippet>import template_module as tm</snippet></ROW><ROW><id>1902737</id><snippet>tm.this</snippet></ROW><ROW><id>1902737</id><snippet>tm.that</snippet></ROW><ROW><id>1902844</id><snippet>[hooks]
precommit.runtests = python manage.py test
</snippet></ROW><ROW><id>1902845</id><snippet>new_log = ActivityLog.objects.create(user=self.user, activity=activity)
</snippet></ROW><ROW><id>1903002</id><snippet>import nltk.corpus
dir(nltk.corpus)
</snippet></ROW><ROW><id>1903002</id><snippet>__LazyModule__...</snippet></ROW><ROW><id>1903002</id><snippet>dir(nltk.corpus)</snippet></ROW><ROW><id>1903078</id><snippet>   def make_action(quality):
        return lambda modeladmin, req, qset: qset.update(quality=quality)

   for q in models.Quality.objects.all():
       action = make_action(q)
       name = "mark_%s" % (q,)
       yield (name, (action, name, "Mark selected as %s quality" % (q,)))
</snippet></ROW><ROW><id>1903078</id><snippet>yield</snippet></ROW><ROW><id>1903078</id><snippet>def make_action(quality):
    name = 'mark_%s' % quality
    action = lambda modeladmin, req, qset: qset.update(quality=quality)
    return (name, (action, name, "Mark selected as %s quality" % quality))

def get_actions(self, request):
    return dict([make_action for q in models.Quality.objects.all()])
</snippet></ROW><ROW><id>1903579</id><snippet>b[a.argsort()]</snippet></ROW><ROW><id>1903579</id><snippet>argsort</snippet></ROW><ROW><id>1903579</id><snippet>&gt;&gt;&gt; a = numpy.array([2, 3, 1])
&gt;&gt;&gt; p = a.argsort()
&gt;&gt;&gt; p
[2, 0, 1]
</snippet></ROW><ROW><id>1903579</id><snippet>&gt;&gt;&gt; a[p]
array([1, 2, 3])
</snippet></ROW><ROW><id>1903579</id><snippet>&gt;&gt;&gt; b = numpy.array([4, 6, 2])
&gt;&gt;&gt; b[p]
array([2, 4, 6])
</snippet></ROW><ROW><id>1903754</id><snippet>copyfileobj</snippet></ROW><ROW><id>1904747</id><snippet>def setdefaultattr(obj, name, value):
    if not hasattr(obj, name):
        setattr(obj, name, value)
    return getattr(obj, name)
</snippet></ROW><ROW><id>1904750</id><snippet>dll_excludes=['w9xpopen.exe']</snippet></ROW><ROW><id>1904900</id><snippet>pip install hg+http://bitbucket.org/carljm/django-markitup/
</snippet></ROW><ROW><id>1905423</id><snippet>milliseconds = (c.days * 24 * 60 * 60 + c.seconds) * 1000 + c.microseconds / 1000.0
</snippet></ROW><ROW><id>1905468</id><snippet>&gt;&gt;&gt; import Image
&gt;&gt;&gt; im=Image.open("test.bmp")
&gt;&gt;&gt; im.size
(364, 471)
&gt;&gt;&gt; im.getbbox()
(64, 89, 278, 267)
&gt;&gt;&gt; im2=im.crop(im.getbbox())
&gt;&gt;&gt; im2.size
(214, 178)
&gt;&gt;&gt; im2.save("test2.bmp")
</snippet></ROW><ROW><id>1905482</id><snippet>{% templatetag %}</snippet></ROW><ROW><id>1905482</id><snippet>{% templatetag openvariable %}Image.jpg|title{% templatetag closevariable %}
</snippet></ROW><ROW><id>1905587</id><snippet>rMyIcon = QtGui.QPixmap("printer.tif");
self.printButton.setIcon(QtGui.QIcon(rMyIcon))
</snippet></ROW><ROW><id>1905809</id><snippet>from pyparsing import *
Parameter = Literal('SPEED_X') | Literal('SPEED_Y') | Literal('SPEED_Z')
UndParam = Suppress('_') + Parameter
Identifier = SkipTo(UndParam)
Value = Word(nums)
Entry = Identifier + UndParam + Value
</snippet></ROW><ROW><id>1905809</id><snippet>&gt;&gt;&gt; Entry.parseString('ABC_123_SPEED_X 123')
(['ABC_123', 'SPEED_X', '123'], {})
</snippet></ROW><ROW><id>1905809</id><snippet>SkipTo</snippet></ROW><ROW><id>1905809</id><snippet>Identifier</snippet></ROW><ROW><id>1905809</id><snippet>alphanums</snippet></ROW><ROW><id>1905809</id><snippet>Identifier</snippet></ROW><ROW><id>1905809</id><snippet>Identifier = Combine(Word(alphanums) +
        ZeroOrMore('_' + ~Parameter + Word(alphanums)))
</snippet></ROW><ROW><id>1905809</id><snippet>Combine</snippet></ROW><ROW><id>1905809</id><snippet>Word(alphanums)</snippet></ROW><ROW><id>1905809</id><snippet>'ABC'</snippet></ROW><ROW><id>1905809</id><snippet>'ABC_123_SPEED_X 123'</snippet></ROW><ROW><id>1905809</id><snippet>'_123'</snippet></ROW><ROW><id>1905809</id><snippet>'_SPEED_X'</snippet></ROW><ROW><id>1905809</id><snippet>ZeroOrMore</snippet></ROW><ROW><id>1905809</id><snippet>Literal</snippet></ROW><ROW><id>1905809</id><snippet>'_'</snippet></ROW><ROW><id>1905809</id><snippet>'_123'</snippet></ROW><ROW><id>1905809</id><snippet>Word(alphanums)</snippet></ROW><ROW><id>1905809</id><snippet>'_123_SPEED_X'</snippet></ROW><ROW><id>1905809</id><snippet>Parameter</snippet></ROW><ROW><id>1905809</id><snippet>Identifier</snippet></ROW><ROW><id>1905809</id><snippet>'_' + ~Parameter + Word(alphanums)</snippet></ROW><ROW><id>1905809</id><snippet>ZeroOrMore</snippet></ROW><ROW><id>1905809</id><snippet>OneOrMore</snippet></ROW><ROW><id>1905809</id><snippet>Combine</snippet></ROW><ROW><id>1905809</id><snippet>'ABC _123_SPEED_X'</snippet></ROW><ROW><id>1905809</id><snippet>'ABC_123_SPEED_X'</snippet></ROW><ROW><id>1905809</id><snippet>Keyword</snippet></ROW><ROW><id>1905809</id><snippet>Literal</snippet></ROW><ROW><id>1905809</id><snippet>Keyword</snippet></ROW><ROW><id>1906201</id><snippet>close()</snippet></ROW><ROW><id>1906201</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("www.python.org")
&gt;&gt;&gt; conn.request("GET", "/index.html")
&gt;&gt;&gt; r1 = conn.getresponse()
&gt;&gt;&gt; print r1.status, r1.reason
200 OK
&gt;&gt;&gt; data1 = r1.read()
&gt;&gt;&gt; conn.request("GET", "/parrot.spam")
&gt;&gt;&gt; r2 = conn.getresponse()
&gt;&gt;&gt; print r2.status, r2.reason
404 Not Found
&gt;&gt;&gt; data2 = r2.read()
&gt;&gt;&gt; conn.close()
</snippet></ROW><ROW><id>1906279</id><snippet>@register.filter(name='getkey')
def getkey(value, arg):
    return value[arg]
</snippet></ROW><ROW><id>1906279</id><snippet>{{test|getkey:'this works'}}
</snippet></ROW><ROW><id>1906716</id><snippet>[[ $(svnversion .) =~ ([0-9]+):*([0-9]*)([A-Z]*) ]]
tuple[0]=${BASH_REMATCH[1]}
tuple[1]=${BASH_REMATCH[2]:-${tuple[0]}}
tuple[2]=${BASH_REMATCH[3]:-''}
</snippet></ROW><ROW><id>1906716</id><snippet>ksh</snippet></ROW><ROW><id>1906716</id><snippet>.sh.match</snippet></ROW><ROW><id>1906716</id><snippet>${.sh.match[1]}</snippet></ROW><ROW><id>1906716</id><snippet>zsh</snippet></ROW><ROW><id>1906716</id><snippet>match</snippet></ROW><ROW><id>1906716</id><snippet>${match[1]}</snippet></ROW><ROW><id>1906716</id><snippet>setopt bashrematch ksharrays
</snippet></ROW><ROW><id>1906727</id><snippet>&gt;&gt;&gt; [int(i) for i in str(12345)]

[1, 2, 3, 4, 5]
</snippet></ROW><ROW><id>1906972</id><snippet>{% gen_table somemodel %}
</snippet></ROW><ROW><id>1907247</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; d = datetime.datetime.now() 
# =&gt; datetime.datetime(2009, 12, 15, 13, 50, 35, 833175)

# check if weekday is 1..5
&gt;&gt;&gt; d.isoweekday() in range(1, 6)
True

# check if hour is 10..15
&gt;&gt;&gt; d.hour in range(10, 15)
True

# check if minute is 30
&gt;&gt;&gt; d.minute==30
False
</snippet></ROW><ROW><id>1907309</id><snippet>D</snippet></ROW><ROW><id>1907309</id><snippet>D</snippet></ROW><ROW><id>1907309</id><snippet>B</snippet></ROW><ROW><id>1907309</id><snippet>B</snippet></ROW><ROW><id>1907309</id><snippet>D</snippet></ROW><ROW><id>1907309</id><snippet>self</snippet></ROW><ROW><id>1907309</id><snippet>id()</snippet></ROW><ROW><id>1907309</id><snippet>&gt;&gt;&gt; class B(object):
...     def virtual_fn(self):
...         print 'in B.virtual_fn() for', id(self)
...     def other_virtual_fn(self):
...         print 'in B.other_virtual_fn() for', id(self)
...     def call_virtual(self):
...         print 'in B.call_virtual() for', id(self)
... 
&gt;&gt;&gt; class D(B):
...     def virtual_fn(self):
...         print 'in D.virtual_fn() for', id(self)
... 
&gt;&gt;&gt; b_obj = B()
&gt;&gt;&gt; d_obj = D()
&gt;&gt;&gt; id(b_obj)
1
&gt;&gt;&gt; id(d_obj)
2
&gt;&gt;&gt;
&gt;&gt;&gt; b_obj.virtual_fn()
in B.virtual_fn() for 1
&gt;&gt;&gt; d_obj.virtual_fn()
in D.virtual_fn() for 2
&gt;&gt;&gt; d_obj.other_virtual_fn()
in B.other_virtual_fn() for 2
&gt;&gt;&gt;
&gt;&gt;&gt; B.virtual_fn(d_obj)
in B.virtual_fn() for 2
&gt;&gt;&gt;
&gt;&gt;&gt; d_obj.call_virtual()
in B.call_virtual() for 2
in D.virtual_fn() for 2
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1907309</id><snippet>d_obj.virtual_fn()</snippet></ROW><ROW><id>1907309</id><snippet>D.virtual_fn(d_obj)</snippet></ROW><ROW><id>1907309</id><snippet>B.virtual_fn(d_obj)</snippet></ROW><ROW><id>1907309</id><snippet>call_virtual</snippet></ROW><ROW><id>1907567</id><snippet>s = '12345'

chars = [c for c in s]

for i in range(len(s) - 1):
    print '%d:' % i,
    for el in chars[:i] + [chars[i] + chars[i + 1]] + chars[i + 2:]:
        print el,
    print
</snippet></ROW><ROW><id>1907585</id><snippet>((n % M) + M) % M</snippet></ROW><ROW><id>1907585</id><snippet>((-1 % 10) + 10) % 10</snippet></ROW><ROW><id>1907585</id><snippet>((17 % 10) + 10) % 10 == 17 % 10</snippet></ROW><ROW><id>1907752</id><snippet>x == 'STOP'</snippet></ROW><ROW><id>1907752</id><snippet>break</snippet></ROW><ROW><id>1907752</id><snippet>search_function</snippet></ROW><ROW><id>1907752</id><snippet>while True:
    x = raw_input("Enter a number to print specific table, or STOP to quit: ")
    if x == 'STOP':
        break
    search_function(int(x))
</snippet></ROW><ROW><id>1907987</id><snippet>re</snippet></ROW><ROW><id>1907987</id><snippet>import re

info_lines = [
    "Me",
    "now",
    "STABLE",
    "FIX: some bug fixed",
    "FIX: 10, 24, 3355",
    "FIX: error 1024 was fixed",
    "FIX: 15 (dupe of BUG:25) fixed crash on x = 250."
]
linkText = r'&lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=\1"&gt;\1&lt;/a&gt;'
bugSearch = re.compile(r'(?:BUG|FIX):(?:[ ,]*(\d+))+')
bugMatch = re.compile(r'(\d+)')

for k, ln in enumerate(info_lines[3:]):
    while True:
        m = bugSearch.search(ln)
        if m:
            ln = ln[:m.start()] + bugMatch.sub(linkText, m.group()) + ln[m.end():]
        else:
            break
    info_lines[k+3] = ln

for ln in info_lines:
    print ln
</snippet></ROW><ROW><id>1907987</id><snippet>Me
now
STABLE
FIX: some bug fixed
FIX: &lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=10"&gt;10&lt;/a&gt;, &lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=24"&gt;24&lt;/a&gt;, &lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=3355"&gt;3355&lt;/a&gt;
FIX: error 1024 was fixed
FIX: &lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=15"&gt;15&lt;/a&gt; (dupe of BUG:&lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=25"&gt;25&lt;/a&gt;) fixed crash on x = 250.
</snippet></ROW><ROW><id>1907987</id><snippet>linkText = r'\1&lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=\2"&gt;\2&lt;/a&gt;'
bugSearch = re.compile(r'((?:BUG|FIX):(?: )?)(\d+)')

info_lines[3:] = [bugSearch.sub(linkText, ln) for ln in info_lines[3:]]

for ln in info_lines:
    print ln
</snippet></ROW><ROW><id>1907987</id><snippet>Me
now
STABLE
FIX: some bug fixed
FIX: &lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=10"&gt;10&lt;/a&gt;, 24, 3355
FIX: error 1024 was fixed
FIX: &lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=15"&gt;15&lt;/a&gt; (dupe of BUG:&lt;a href="http://bugzilla.mycompany.com/show_bug.cgi?id=25"&gt;25&lt;/a&gt;) fixed crash on x = 250.
</snippet></ROW><ROW><id>1908068</id><snippet>shell&gt; ARCHFLAGS="-arch x86_64" python setup.py build
shell&gt; sudo python setup.py install
</snippet></ROW><ROW><id>1908096</id><snippet>db((db.mytable.create_date&gt;=query_dict['create_date1'])&amp;(db.mytable.create_date&lt;=query_dict['create_date2'])).select()</snippet></ROW><ROW><id>1908114</id><snippet>base64.b64encode("Hi, %s! Your code is %s" % (data[0].decode('utf8').encode('latin1'), data[0]))
</snippet></ROW><ROW><id>1908320</id><snippet>validated_string = etree.tostring(tree)
domDocument = minidom.parseString(validated_string)
</snippet></ROW><ROW><id>1908320</id><snippet>getElementById</snippet></ROW><ROW><id>1908320</id><snippet>etree.XMLDTDID</snippet></ROW><ROW><id>1908320</id><snippet>etree.parseid</snippet></ROW><ROW><id>1908601</id><snippet>ffmpeg -i video.avi image%d.jpg
</snippet></ROW><ROW><id>1908695</id><snippet>&lt;doc&gt;
&lt;id name="X"&gt;
  &lt;type name="A"&gt;
    &lt;min val="100" id="80"/&gt;
    &lt;max val="200" id="90"/&gt;
   &lt;/type&gt;
  &lt;type name="B"&gt;
    &lt;min val="100" id="20"/&gt;
    &lt;max val="20" id="90"/&gt;
  &lt;/type&gt;
&lt;/id&gt;
&lt;/doc&gt;
</snippet></ROW><ROW><id>1908695</id><snippet>from xml.dom import minidom
data={}
doc=minidom.parse("xml.txt")
for n in doc.childNodes[0].childNodes:
    if n.localName=="id":
    	id_name = n.attributes.item(0).nodeValue
    	data[id_name] = {}
    	for j in n.childNodes:
    		if j.localName=="type":
    			type_name = j.attributes.item(0).nodeValue
    			data[id_name][type_name] = [(),()]
    			for k in j.childNodes:
    				if k.localName=="min":
    					data[id_name][type_name][0] = \
    						(k.attributes.item(1).nodeValue, \
    						 k.attributes.item(0).nodeValue)
    				if k.localName=="max":
    					data[id_name][type_name][1] = \
    						(k.attributes.item(1).nodeValue, \
    						 k.attributes.item(0).nodeValue)
print (data)
</snippet></ROW><ROW><id>1908695</id><snippet>{'X': {'A': [('100', '80'), ('200', '90')], 'B': [('100', '20'), ('20', '90')]}}
</snippet></ROW><ROW><id>1908812</id><snippet>datetime</snippet></ROW><ROW><id>1908967</id><snippet>{}</snippet></ROW><ROW><id>1908967</id><snippet>def store_birthinfo(self, user, birthday):
    data = {}
    for key in 'date', 'place', 'country':
        data[key] = birthday.get(key, '')
    BirthInfo(user=user, **data).put()
</snippet></ROW><ROW><id>1908967</id><snippet>BirthInfo</snippet></ROW><ROW><id>1909091</id><snippet>extra_args</snippet></ROW><ROW><id>1909091</id><snippet>buildbot.steps.source.SVN</snippet></ROW><ROW><id>1909277</id><snippet>Article.objects.values('pub_date').annotate(article_count=Count('title'))
</snippet></ROW><ROW><id>1909277</id><snippet>group by</snippet></ROW><ROW><id>1909277</id><snippet>extract</snippet></ROW><ROW><id>1909277</id><snippet>class Article(models.Model):
    title = models.CharField(max_length=150, verbose_name=_("title"))
    # ... more 
    pub_date = models.DateTimeField(verbose_name=_('publishing date'))
    pub_year = models.IntegerField()
    pub_month = models.IntegerField()
</snippet></ROW><ROW><id>1909277</id><snippet>Article.objects.values('pub_year', 'pub_month').annotate(article_count=Count('title'))
</snippet></ROW><ROW><id>1909277</id><snippet>pub_year</snippet></ROW><ROW><id>1909277</id><snippet>pub_month</snippet></ROW><ROW><id>1909277</id><snippet>save()</snippet></ROW><ROW><id>1909277</id><snippet>pub_date</snippet></ROW><ROW><id>1909277</id><snippet>models.Issue.objects.extra(select={'year': "EXTRACT(year FROM pub_date)", 'month': "EXTRACT(month from pub_date)"}).values('year', 'month').annotate(Count('title'))
</snippet></ROW><ROW><id>1909277</id><snippet>extra</snippet></ROW><ROW><id>1909277</id><snippet>year(pub_date)</snippet></ROW><ROW><id>1909277</id><snippet>extract(year from pub_date)</snippet></ROW><ROW><id>1909355</id><snippet>nc</snippet></ROW><ROW><id>1909355</id><snippet>import socket

def netcat(hostname, port, content):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((hostname, port))
    s.sendall(content)
    s.shutdown(socket.SHUT_WR)
    while 1:
        data = s.recv(1024)
        if data == "":
            break
        print "Received:", repr(data)
    print "Connection closed."
    s.close()
</snippet></ROW><ROW><id>1909355</id><snippet>shutdown</snippet></ROW><ROW><id>1909373</id><snippet>{{ datetime|smartdate:"h:i A" }} = '12:30 AM'
{{ datetime|smartdate:"h:i Ac" }} = '12:30 A.M.'
{{ datetime|smartdate:"h:i a" }} = '12:30 a.m.'
{{ datetime|smartdate:"h:i ac" }} = '12:30 am'
</snippet></ROW><ROW><id>1909373</id><snippet>import re
from django.template.defaultfilters import date as date_filter

# --------------------------------------------------------------------------------
#   |smartdate:"date format" -- new arg 'c' (change) alteras the AM/pm appearance
# --------------------------------------------------------------------------------
@register.filter
def smartdate(value, arg):
    rendered = date_filter(value, arg)
    if 'c' in arg:
        rendered = re.sub('(a|p)\.m\.c', lambda m: '%sm' % m.group(1), rendered)
        rendered = re.sub('(A|P)Mc', lambda m: '%s.M.' % m.group(1), rendered)
    return rendered
</snippet></ROW><ROW><id>1909389</id><snippet>myFunction</snippet></ROW><ROW><id>1909389</id><snippet>def myFunction():
    print abc
    abc = 123
</snippet></ROW><ROW><id>1909389</id><snippet>def myFunction():
    print "123"

abc = myFunction
</snippet></ROW><ROW><id>1909389</id><snippet>abc</snippet></ROW><ROW><id>1909389</id><snippet># Style 1
abc = lambda: myFunction()

# Style 2
def abc():
    return myFunction()

def myFunction():
    print "123"
</snippet></ROW><ROW><id>1909611</id><snippet>/usr/bin</snippet></ROW><ROW><id>1909611</id><snippet>/System/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>1909611</id><snippet>/Library/Python</snippet></ROW><ROW><id>1909611</id><snippet>/Library/Frameworks/Python.framework</snippet></ROW><ROW><id>1909611</id><snippet>/usr/local</snippet></ROW><ROW><id>1909611</id><snippet>virtualenv</snippet></ROW><ROW><id>1909611</id><snippet>$ sudo port selfupdate
$ sudo port install py26-mysql 
</snippet></ROW><ROW><id>1909611</id><snippet>/opt/local/bin</snippet></ROW><ROW><id>1909611</id><snippet>$ sudo port install py26-virtualenv
</snippet></ROW><ROW><id>1909669</id><snippet>table[hashes] = numpy.arange(len(hashes), dtype=numpy.uint32)
</snippet></ROW><ROW><id>1909669</id><snippet>table[hashes] = xrange(len(hashes))
</snippet></ROW><ROW><id>1909669</id><snippet>numpy.insert</snippet></ROW><ROW><id>1909827</id><snippet>from appscript import *

folder = '/path/to/folder'

ps = app('Adobe Photoshop CS4')

for f in app('Finder').items[mactypes.Alias(folder)].files.get(resulttype=k.alias):
    ps.open(f)
    # do stuff here...
</snippet></ROW><ROW><id>1910132</id><snippet>colprint([(name, version[0].summary or '')
      for (name, version) in sorted(versions.iteritems())])
</snippet></ROW><ROW><id>1910132</id><snippet>colprint(sorted([(name, version[0].summary or '')
             for (name, version) in versions.iteritems()]))
</snippet></ROW><ROW><id>1910132</id><snippet>[]</snippet></ROW><ROW><id>1910196</id><snippet>contentypes</snippet></ROW><ROW><id>1910394</id><snippet>PyList_Append</snippet></ROW><ROW><id>1910394</id><snippet>.append</snippet></ROW><ROW><id>1910401</id><snippet>my_array.resize((1600, 1000))</snippet></ROW><ROW><id>1910401</id><snippet>numpy.resize(my_array, (1600, 1000))</snippet></ROW><ROW><id>1910401</id><snippet>hstack</snippet></ROW><ROW><id>1910401</id><snippet>vstack</snippet></ROW><ROW><id>1910401</id><snippet>numpy.concatenate()</snippet></ROW><ROW><id>1910993</id><snippet>==products==
id[int]
number[varchar]: unique, ie. #50-334 
category_id[int]: has-one relation to category.id

==categories==
// What you call branches in your drawing.
id[int]
parent_id[int]: tree structure
title[varchar]
description[text]
image[varchar]

==attributes==
id[int]
attribute_type_id[int]: has-one relation to attribute_types.id
is_universal[bool]: is this attribute used for _all_ products?
name[varchar]
value[varchar]

==attribute_types==
id[int]
codetag[varchar]: name to identify the attribute type from the code. Each type haves different validation. Some types will maybe be validated using data from helper tables.
title[varchar]
description[text]

==products_has_attributes==
// "Join table" with many-to-many relationship between products and attributes.
id[int]: Optional
product_id[int]: has-one relation to products.id
attribute_id[int]: has-one relation to category.id

==categories_has_attributes==
// "Join table" with many-to-many relationship between categories and attributes.
id[int]: Optional
category_id[int]: has-one relation to products.id
attribute_id[int]: has-one relation to category.id
</snippet></ROW><ROW><id>1911001</id><snippet>tags_for_object</snippet></ROW><ROW><id>1911001</id><snippet>tags_for_object:</snippet></ROW><ROW><id>1911001</id><snippet>Tag</snippet></ROW><ROW><id>1911001</id><snippet>{% tags_for_object [object] as [varname] %}
</snippet></ROW><ROW><id>1911001</id><snippet>{% tags_for_object foo_object as tag_list %}
</snippet></ROW><ROW><id>1911001</id><snippet>tag_list</snippet></ROW><ROW><id>1911001</id><snippet>{% tags_for_object foo_object as tag_list %}

&lt;ul&gt;
{% for tag in tag_list %}
  &lt;li&gt;{{ tag }}&lt;/li&gt;
{% endfor %}
&lt;/ul&gt;
</snippet></ROW><ROW><id>1911001</id><snippet>object</snippet></ROW><ROW><id>1911001</id><snippet>objects</snippet></ROW><ROW><id>1911001</id><snippet>object_list</snippet></ROW><ROW><id>1911001</id><snippet>inlines/default.html</snippet></ROW><ROW><id>1911027</id><snippet>for k,v in mydict.items():
  print(k, '=', v)
</snippet></ROW><ROW><id>1911027</id><snippet>for k,v in mydict.iteritems():
  print k, '=', v
</snippet></ROW><ROW><id>1911027</id><snippet>def log_wrap(mydict):
    mystr = '\n'.join(['%s = %s' % (k,v) for k,v in mydict.iteritems()])
    write_to_log(mydict)

log_wrap(mydict)
</snippet></ROW><ROW><id>1911287</id><snippet>&gt;&gt;&gt; from optparse import OptionParser
&gt;&gt;&gt; import inspect
&gt;&gt;&gt; inspect.getmembers(OptionParser, predicate=inspect.ismethod)
[([('__init__', &lt;unbound method OptionParser.__init__&gt;),
...
 ('add_option', &lt;unbound method OptionParser.add_option&gt;),
 ('add_option_group', &lt;unbound method OptionParser.add_option_group&gt;),
 ('add_options', &lt;unbound method OptionParser.add_options&gt;),
 ('check_values', &lt;unbound method OptionParser.check_values&gt;),
 ('destroy', &lt;unbound method OptionParser.destroy&gt;),
 ('disable_interspersed_args',
  &lt;unbound method OptionParser.disable_interspersed_args&gt;),
 ('enable_interspersed_args',
  &lt;unbound method OptionParser.enable_interspersed_args&gt;),
 ('error', &lt;unbound method OptionParser.error&gt;),
 ('exit', &lt;unbound method OptionParser.exit&gt;),
 ('expand_prog_name', &lt;unbound method OptionParser.expand_prog_name&gt;),
 ...
 ]
</snippet></ROW><ROW><id>1911287</id><snippet>getmembers</snippet></ROW><ROW><id>1911287</id><snippet>getmembers</snippet></ROW><ROW><id>1911287</id><snippet>&gt;&gt;&gt; parser = OptionParser()
&gt;&gt;&gt; inspect.getmembers(parser, predicate=inspect.ismethod)
...
</snippet></ROW><ROW><id>1911463</id><snippet>read()</snippet></ROW><ROW><id>1911463</id><snippet>import urllib2

n = 123

try:
    url = 'http://localhost/%d.jpg' % n
    urllib2.urlopen(url)
except urllib2.HTTPError, e:
    if e.code == 404:
        print '%d.jpg was not found' % n
    else:
        raise  # if the issue wasn't a 404, then re-raise the exception
</snippet></ROW><ROW><id>1911493</id><snippet>commit=False</snippet></ROW><ROW><id>1911493</id><snippet>form=TestPostForm(data=request.POST)
if form.is_valid():
  object=form.save(commit=False)
  object.ip_address=request.META['REMOTE_ADDR']
  object.save()
</snippet></ROW><ROW><id>1911493</id><snippet>blank=True</snippet></ROW><ROW><id>1911493</id><snippet>required=False</snippet></ROW><ROW><id>1911575</id><snippet>"ILLEGAL".decode("utf8","ignore")</snippet></ROW><ROW><id>1911575</id><snippet>&gt;&gt;&gt; "ILLEGA\xa0L".decode("utf8")
...
UnicodeDecodeError: 'utf8' codec can't decode byte 0xa0 in position 6: unexpected code byte

&gt;&gt;&gt; "ILLEGA\xa0L".decode("utf8","ignore")
u'ILLEGAL'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1911706</id><snippet>class Setting(models.Model):
    name = models.CharField(max_length=50)
    value = models.TextField()

# ...

# Get the current slot setting
current_slot = Setting.objects.get(name='current_slot').value

# ...

# Or wrap it in a helper method
def get_setting(name, default_value):
    try:
        return Setting.objects.get(name=name).value
    except:
        return default_value

current_slot = get_setting('current_slot', 0)
</snippet></ROW><ROW><id>1911722</id><snippet>diffkeys = [k for k in dict1 if dict1[k] != dict2[k]]
for k in diffkeys:
  print k, ':', dict1[k], '-&gt;', dict2[k]
</snippet></ROW><ROW><id>1911757</id><snippet>Overlap = (M * T.transpose() &gt; 0)  # track T overlaps mask M  
Connected = (Overlap * Overlap.tranpose() &gt; 0) # Connected masks
Density[mask_idx] = numpy.take(T, nonzero(Overlap[mask_idx, :])[0], axis=0).sum(axis=0)
</snippet></ROW><ROW><id>1911757</id><snippet>from numpy import *
from scipy.sparse import csc_matrix

nvox = 1000000
ntracks = 300000
nmask = 100

# create about 100 entries per track
tcoords = random.uniform(0, ntracks, ntracks * 100).astype(int)
vcoords = random.uniform(0, nvox, ntracks * 100).astype(int)
d = ones(ntracks * 100)
T = csc_matrix((d,  vstack((tcoords, vcoords))), shape=(ntracks, nvox), dtype=bool)

# create around 10000 entries per mask
mcoords = random.uniform(0, nmask, nmask * 10000).astype(int)
vcoords = random.uniform(0, nvox, nmask * 10000).astype(int)
d = ones(nmask * 10000)
M = csc_matrix((d, vstack((mcoords, vcoords))), shape=(nmask, nvox), dtype=bool)

Overlap = (M * T.transpose()).astype(bool) # mask M overlaps track T
Connected = (Overlap * Overlap.transpose()).astype(bool) # mask M1 and M2 are connected
Density = Overlap * T.astype(float) # number of tracks overlapping mask M summed across voxels
</snippet></ROW><ROW><id>1912002</id><snippet>max(a,...)</snippet></ROW><ROW><id>1912002</id><snippet>a</snippet></ROW><ROW><id>1912002</id><snippet>w</snippet></ROW><ROW><id>1912002</id><snippet>a</snippet></ROW><ROW><id>1912002</id><snippet>b[w]</snippet></ROW><ROW><id>1912002</id><snippet>w</snippet></ROW><ROW><id>1912002</id><snippet>max(a,key=lambda w: b[w])</snippet></ROW><ROW><id>1912252</id><snippet>class M(object):
</snippet></ROW><ROW><id>1912353</id><snippet>import datetime
import sqlite3 

class GpsCache(object):
    db_path = 'gps_cache.db'
    def __init__(self):
        self.con = sqlite3.connect(self.db_path)
        self.cur = self.con.cursor()

    def _get_period(self, dt=None):
        '''normalize time to 15 minute periods'''
        if dt.minute &lt; 15:
           minute_period = 0
        elif 15 &lt;= dt.minute &lt; 30:
           minute_period = 15
        elif 30 &lt;= dt_minute &lt; 45: 
           minute_period = 30
        elif 45 &lt;= dt_minute:
           minute_period = 25
        period_dt = datetime.datetime(year=dt.year, month=dt.month, day=dt.day, hour=dt.hour, minute=minute_period)
        return period_dt

    def get_cache(dt=None):
        period_dt = self._get_period(dt)
        select_sql = 'SELECT * FROM GPS_CACHE WHERE date_time = "%s";' % period_dt.strftime('%Y-%m-%d %H:%M')
        self.cur.execut(select_sql)
        result = self.cur.fetchone()[0]
        return result


    def put_cache(dt=None, data=None):
        period_dt = self._get_period(dt)
        insert_sql = 'INSERT ....'  # edit to your table structure
        try:
            self.cur.execute(insert_sql)
            self.con.commit()
        except sqlite3.OperationalError:
            # assume db is being updated by another process with the current resutls and ignore
            pass
</snippet></ROW><ROW><id>1912353</id><snippet>from gps_cacher import GpsCache

def remote_get_gps_data():
    # your function here
    return data

def get_gps_data():
    data = None
    gps_cache = GpsCache()
    current_dt = datetime.datetime.now()
    cached_data = gps_cache.get_cache(current_dt)    
    if cached_data:
        data = cached_data
    else:
        data = remote_get_gps_data()
        gps_cache.put_cache(current_dt, data)
    return data
</snippet></ROW><ROW><id>1912355</id><snippet>definitions = soup('ul')[0].findAll(text=True)
</snippet></ROW><ROW><id>1912370</id><snippet>from myapp.utils import my_cool_func

dev view_coolness(request):
    data = my_cool_func(request)
    return render_to_response("xxx.html")
</snippet></ROW><ROW><id>1912396</id><snippet>class A(db.Model):
  b = db.ReferenceProperty()

class B(db.Model):
  a = db.ReferenceProperty(A)
</snippet></ROW><ROW><id>1912483</id><snippet>e</snippet></ROW><ROW><id>1912483</id><snippet>for atype in e.findall('type')
  print(atype.get('foobar'))
</snippet></ROW><ROW><id>1912523</id><snippet>import math
def spc(x):
  math.sin(x) + math.cos(x)
</snippet></ROW><ROW><id>1912523</id><snippet>&gt;&gt;&gt; spc(decimal.Decimal('1.9'))
0.62301052082391117
</snippet></ROW><ROW><id>1912523</id><snippet>.lower</snippet></ROW><ROW><id>1912523</id><snippet>len</snippet></ROW><ROW><id>1912614</id><snippet>import pickle
import md5
try:
    l = pickle.load(open("db"))
except IOError:
    l = []
db = dict(l)
path = "/etc/hosts"
checksum = md5.md5(open(path).read())
if db.get(path, None) != checksum:
    print "file changed"
    db[path] = checksum
pickle.dump(db.items(), open("db", "w")
</snippet></ROW><ROW><id>1912840</id><snippet>os.system('python "test.py" "a" "b" "c"')</snippet></ROW><ROW><id>1912840</id><snippet>os.system('"test.py" "a" "b" "c"')</snippet></ROW><ROW><id>1912840</id><snippet>os.system('test.py "a" "b" "c"')</snippet></ROW><ROW><id>1912878</id><snippet>total = sum([project.projectTotal for project in dict.values()])
success = sum([project.projectSuccess for project in dict.values()])
failed = sum([project.projectFailed for project in dict.values()])
</snippet></ROW><ROW><id>1912878</id><snippet>(total,success,failed) = reduce (lambda x,y:(x[0]+y[0],x[1]+y[1],x[2]+y[2]), [(project.projectTotal,project.projectSuccess,project.projectFailed) for project in dict.values()])
</snippet></ROW><ROW><id>1913008</id><snippet>def calculate_broker_fee(trade):
    fee = 0.043 # default value
    if trade.exchange in ["SWX", "EURONEXT"] and \
        trade.instrument.instrument_type == "Bond":
        fee = trade.quantity*0.00234
    return fee
</snippet></ROW><ROW><id>1913666</id><snippet>&lt;title&gt;</snippet></ROW><ROW><id>1913666</id><snippet>from xml.dom.minidom import *

resp = "&lt;title&gt; This is a test! &lt;/title&gt;"

rssDoc = parseString(resp)

titles = rssDoc.getElementsByTagName('title')

moo = ""

for t in titles:
    for child in t.childNodes:
        if child.nodeType == child.TEXT_NODE:
            moo += child.data
        else:
            moo += "not text "

print moo
</snippet></ROW><ROW><id>1913811</id><snippet>&lt;a href="http://docs.python.org/library/datetime.html#datetime.date.strftime" rel="nofollow"&gt;datetime.date.strftime()&lt;/a&gt;</snippet></ROW><ROW><id>1914329</id><snippet>sudo port selfupdate
sudo port install python26
</snippet></ROW><ROW><id>1914329</id><snippet>To fully complete your installation and make python 2.6 the default, please run

sudo port install python_select  
sudo python_select python26
</snippet></ROW><ROW><id>1914329</id><snippet>sudo port install mysql5
...
---&gt;  Installing mysql5 @5.1.41_0
The MySQL client has been installed.
If you also want a MySQL server, install the mysql5-server port.
</snippet></ROW><ROW><id>1914329</id><snippet>sudo port install mysql5-server
</snippet></ROW><ROW><id>1914329</id><snippet>******************************************************
* In order to setup the database, you might want to run
* sudo -u _mysql mysql_install_db5
* if this is a new install
******************************************************
</snippet></ROW><ROW><id>1914329</id><snippet>Installing MySQL system tables...
OK
Filling help tables...
OK

To start mysqld at boot time you have to copy
support-files/mysql.server to the right place for your system

PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
To do so, start the server, then issue the following commands:

/opt/local/lib/mysql5/bin/mysqladmin -u root password 'new-password'
/opt/local/lib/mysql5/bin/mysqladmin -u root -h iMac.local password 'new-password'

Alternatively you can run:
/opt/local/lib/mysql5/bin/mysql_secure_installation

which will also give you the option of removing the test
databases and anonymous user created by default.  This is
strongly recommended for production servers.

See the manual for more instructions.

You can start the MySQL daemon with:
cd /opt/local ; /opt/local/lib/mysql5/bin/mysqld_safe &amp;

You can test the MySQL daemon with mysql-test-run.pl
cd /opt/local/mysql-test ; perl mysql-test-run.pl

Please report any problems with the /opt/local/lib/mysql5/bin/mysqlbug script!

The latest information about MySQL is available at http://www.mysql.com/
Support MySQL by buying support/licenses from http://shop.mysql.com/
</snippet></ROW><ROW><id>1914329</id><snippet>sudo port install py26-mysql
</snippet></ROW><ROW><id>1914329</id><snippet>iMac:~ drhoden$ python
Python 2.6.4 (r264:75706, Dec 15 2009, 18:00:14) 
[GCC 4.2.1 (Apple Inc. build 5646) (dot 1)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import MySQLdb
/opt/local/Library/Frameworks/Python.framework/Versions/2.6/lib/python2.6/site-packages/MySQLdb/__init__.py:34: DeprecationWarning: the sets module is deprecated from sets import ImmutableSet
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>1914329</id><snippet>sudo port install py26-django
</snippet></ROW><ROW><id>1914798</id><snippet>class PickleableStaticMethod(object):
    def __init__(self, fn, cls=None):
        self.cls = cls
        self.fn = fn
    def __call__(self, *args, **kwargs):
        return self.fn(*args, **kwargs)
    def __get__(self, obj, cls):
        return PickleableStaticMethod(self.fn, cls)
    def __getstate__(self):
        return (self.cls, self.fn.__name__)
    def __setstate__(self, state):
        self.cls, name = state
        self.fn = getattr(self.cls, name).fn
</snippet></ROW><ROW><id>1914798</id><snippet>.__parentclass__</snippet></ROW><ROW><id>1914798</id><snippet>Pickler</snippet></ROW><ROW><id>1914798</id><snippet>.dispatch</snippet></ROW><ROW><id>1914798</id><snippet>Pickler.dispatch</snippet></ROW><ROW><id>1914908</id><snippet>num = int(''.join(''.join(l) for l in lists))
</snippet></ROW><ROW><id>1914908</id><snippet>def flatten( nested ):
    for inner in nested:
        for x in inner:
            yield x

num = ''.join(flatten(lists))
</snippet></ROW><ROW><id>1915307</id><snippet>from itertools import islice

def split_every(n, iterable):
    i = iter(iterable)
    piece = list(islice(i, n))
    while piece:
        yield piece
        piece = list(islice(i, n))
</snippet></ROW><ROW><id>1915307</id><snippet>&gt;&gt;&gt; list(split_every(5, range(9)))
[[0, 1, 2, 3, 4], [5, 6, 7, 8]]

&gt;&gt;&gt; list(split_every(3, (x**2 for x in range(20))))
[[0, 1, 4], [9, 16, 25], [36, 49, 64], [81, 100, 121], [144, 169, 196], [225, 256, 289], [324, 361]]

&gt;&gt;&gt; [''.join(s) for s in split_every(6, 'Hello world')]
['Hello ', 'world']

&gt;&gt;&gt; list(split_every(100, []))
[]
</snippet></ROW><ROW><id>1915386</id><snippet>'</snippet></ROW><ROW><id>1915386</id><snippet>"</snippet></ROW><ROW><id>1915386</id><snippet>`
</snippet></ROW><ROW><id>1915386</id><snippet>″</snippet></ROW><ROW><id>1915386</id><snippet>”</snippet></ROW><ROW><id>1915386</id><snippet>“</snippet></ROW><ROW><id>1915418</id><snippet>sorted</snippet></ROW><ROW><id>1915418</id><snippet>sort</snippet></ROW><ROW><id>1915547</id><snippet>commands</snippet></ROW><ROW><id>1915547</id><snippet>list</snippet></ROW><ROW><id>1915547</id><snippet>file</snippet></ROW><ROW><id>1915547</id><snippet>commands</snippet></ROW><ROW><id>1915547</id><snippet>mycommands</snippet></ROW><ROW><id>1915631</id><snippet>sorted(adict, key=adict.get, reverse=True)
</snippet></ROW><ROW><id>1915631</id><snippet>adict.get</snippet></ROW><ROW><id>1915631</id><snippet>[(k, adict[k]) for k in sorted(adict, key=adict.get, reverse=True)]
</snippet></ROW><ROW><id>1915631</id><snippet>$ python -mtimeit -s'adict=dict((x,x**2) for x in range(-5,6))' '[(k, adict[k]) for k in sorted(adict, key=adict.get, reverse=True)]'
100000 loops, best of 3: 10.8 usec per loop
$ python -mtimeit -s'adict=dict((x,x**2) for x in range(-5,6)); from operator import itemgetter' 'sorted(adict.iteritems(), key=itemgetter(1), reverse=True)'
100000 loops, best of 3: 9.66 usec per loop
$ python -mtimeit -s'adict=dict((x,x**2) for x in range(-5,6))' 'sorted(adict.iteritems(), key=lambda (k,v): v, reverse=True)'
100000 loops, best of 3: 11.5 usec per loop
</snippet></ROW><ROW><id>1915631</id><snippet>.get</snippet></ROW><ROW><id>1915631</id><snippet>items</snippet></ROW><ROW><id>1915631</id><snippet>itemgetter</snippet></ROW><ROW><id>1915631</id><snippet>lambda</snippet></ROW><ROW><id>1915631</id><snippet>get</snippet></ROW><ROW><id>1915712</id><snippet>self</snippet></ROW><ROW><id>1915712</id><snippet>class Desc(object):
    default_value = 10
    def __init__(self, name):
        self.name = name

    def __get__(self,obj,objtype):
        return obj.__dict__.get(self.name, self.default_value)
        # alternatively the following; but won't work with shadowing:
        #return getattr(obj, self.name, self.default_value)

    def __set__(self,obj,val):
        obj.__dict__[self.name] = val
        # alternatively the following; but won't work with shadowing:
        #setattr(obj, self.name, val)

    def __delete__(self,obj):
        pass


class MyClass(object):
    desc = Desc('varx')
</snippet></ROW><ROW><id>1915712</id><snippet>obj</snippet></ROW><ROW><id>1915712</id><snippet>__dict__</snippet></ROW><ROW><id>1915712</id><snippet>class MyClass(object):
    varx = Desc('varx')
</snippet></ROW><ROW><id>1915712</id><snippet>MyClass().varx
</snippet></ROW><ROW><id>1915712</id><snippet>MyClass().__dict__['varx']
</snippet></ROW><ROW><id>1915951</id><snippet>for i in [1, 2, 3]:</snippet></ROW><ROW><id>1915951</id><snippet>for i in (1, 2, 3):</snippet></ROW><ROW><id>1915951</id><snippet>for x in whatever():
    anobj.amethod(x)
</snippet></ROW><ROW><id>1915951</id><snippet>f = anobj.amethod
for x in whatever():
    f(x)
</snippet></ROW><ROW><id>1915951</id><snippet>anobj.amethod</snippet></ROW><ROW><id>1915951</id><snippet>anobj</snippet></ROW><ROW><id>1915951</id><snippet>timeit</snippet></ROW><ROW><id>1915951</id><snippet>$ python -mtimeit 'for x in (1, 2, 3): pass'
1000000 loops, best of 3: 0.219 usec per loop
$ python -mtimeit 'for x in [1, 2, 3]: pass'
1000000 loops, best of 3: 0.512 usec per loop
</snippet></ROW><ROW><id>1915951</id><snippet>$ python -mtimeit -s'Xs=[1,2,3]' 'for x in Xs: pass'
1000000 loops, best of 3: 0.236 usec per loop
$ python -mtimeit -s'Xs=(1,2,3)' 'for x in Xs: pass'
1000000 loops, best of 3: 0.213 usec per loop
</snippet></ROW><ROW><id>1915951</id><snippet>-s</snippet></ROW><ROW><id>1915951</id><snippet>timeit</snippet></ROW><ROW><id>1915951</id><snippet>* Function calls
* Class instantiation
* Arithmetic
* 'Heavier' math operations such as sqrt()
</snippet></ROW><ROW><id>1915951</id><snippet>$ python -mtimeit -s'def f(): pass' 'f()'
10000000 loops, best of 3: 0.192 usec per loop
$ python -mtimeit -s'class o: pass' 'o()'
1000000 loops, best of 3: 0.315 usec per loop
$ python -mtimeit -s'class n(object): pass' 'n()'
10000000 loops, best of 3: 0.18 usec per loop
</snippet></ROW><ROW><id>1915951</id><snippet>$ python -mtimeit -s'from math import sqrt' 'sqrt(1.2)'
1000000 loops, best of 3: 0.22 usec per loop
$ python -mtimeit '1.2**0.5'
10000000 loops, best of 3: 0.0363 usec per loop
$ python -mtimeit '1.2*0.5'
10000000 loops, best of 3: 0.0407 usec per loop
</snippet></ROW><ROW><id>1915951</id><snippet>sqrt</snippet></ROW><ROW><id>1915951</id><snippet>**</snippet></ROW><ROW><id>1915951</id><snippet>$ python -mtimeit '1.2*0.5'
10000000 loops, best of 3: 0.0407 usec per loop
$ python -mtimeit -s'a=1.2; b=0.5' 'a*b'
10000000 loops, best of 3: 0.0965 usec per loop
$ python -mtimeit -s'a=1.2; b=0.5' 'a*0.5'
10000000 loops, best of 3: 0.0957 usec per loop
$ python -mtimeit -s'a=1.2; b=0.5' '1.2*b'
10000000 loops, best of 3: 0.0932 usec per loop
</snippet></ROW><ROW><id>1915951</id><snippet>$ python -mtimeit -s'a=1.2; b=0.5' 'a'
10000000 loops, best of 3: 0.039 usec per loop
</snippet></ROW><ROW><id>1915951</id><snippet>$ python -mtimeit -s'a=1.2; b=0.5' '1.2'
10000000 loops, best of 3: 0.0225 usec per loop
</snippet></ROW><ROW><id>1915987</id><snippet>Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import __future__
&gt;&gt;&gt; dir(__future__)
['CO_FUTURE_ABSOLUTE_IMPORT', 'CO_FUTURE_DIVISION', 'CO_FUTURE_WITH_STATEMENT', 'CO_GENERATOR_ALLOWED', 'CO_NESTED', '_Feature', '__all__', '__builtins__',
__doc__', '__file__', '__name__', 'absolute_import', 'all_feature_names', 'division', 'generators', 'nested_scopes', 'with_statement']
&gt;&gt;&gt; __future__.with_statement
_Feature((2, 5, 0, 'alpha', 1), (2, 6, 0, 'alpha', 0), 32768)
&gt;&gt;&gt;
</snippet></ROW><ROW><id>1916561</id><snippet>hex</snippet></ROW><ROW><id>1916561</id><snippet>&gt;&gt;&gt; a = 123
&gt;&gt;&gt; hex(a)
'0x7b'
</snippet></ROW><ROW><id>1916594</id><snippet>SERVER_SOFTWARE</snippet></ROW><ROW><id>1916594</id><snippet>Development/X.Y</snippet></ROW><ROW><id>1916594</id><snippet>X.Y</snippet></ROW><ROW><id>1916594</id><snippet>Google App Engine/X.Y.Z</snippet></ROW><ROW><id>1916781</id><snippet>import sys
from PyQt4.QtCore import *
from PyQt4.QtGui import *


class ImageLabel(QLabel):
    def __init__(self, image, parent=None):
        super(ImageLabel, self).__init__(parent)
        self.setPixmap(image)

    def mousePressEvent(self, event):
        print 'I was pressed'    


class AppForm(QMainWindow):
    def __init__(self, parent=None):
        QMainWindow.__init__(self, parent)

        self.create_main_frame()       

    def create_main_frame(self):
        name_label = QLabel("Here's a clickable image:")
        img_label = ImageLabel(QPixmap('image.png'))

        vbox = QVBoxLayout()
        vbox.addWidget(name_label)
        vbox.addWidget(img_label)

        main_frame = QWidget()
        main_frame.setLayout(vbox)
        self.setCentralWidget(main_frame)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    form = AppForm()
    form.show()
    app.exec_()
</snippet></ROW><ROW><id>1916781</id><snippet>image.png</snippet></ROW><ROW><id>1916877</id><snippet>ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
ssh.connect('first.com', username='luser', password='secret')

chan = ssh.invoke_shell()

# Ssh and wait for the password prompt.
chan.send('ssh second.com\n')
buff = ''
while not buff.endswith('\'s password: '):
    resp = chan.recv(9999)
    buff += resp

# Send the password and wait for a prompt.
chan.send('secret\n')
buff = ''
while not buff.endswith('some-prompt$ '):
    resp = chan.recv(9999)
    buff += resp

# Execute whatever command and wait for a prompt again.
chan.send('ls\n')
buff = ''
while not buff.endswith('some-prompt$ '):
    resp = chan.recv(9999)
    buff += resp

# Now buff has the data I need.
print 'buff', buff

ssh.close()
</snippet></ROW><ROW><id>1916877</id><snippet>t = ssh.get_transport()
chan = t.open_session()
chan.get_pty()
</snippet></ROW><ROW><id>1916877</id><snippet>chan = ssh.invoke_shell()
</snippet></ROW><ROW><id>1916910</id><snippet>my_build_directory = '.'

echo_cmd = Command('always.echo', [],  "echo %s" % (Dir('.').abspath))
Alias('echo', echo_cmd)
</snippet></ROW><ROW><id>1916910</id><snippet># =&gt; cd test-scons
# =&gt; ls 
#    build/  SConstruct  subdir/
# =&gt; scons echo 
#    scons: Building targets ...
#    echo HOME/test-scons/build/subdir
#    HOME/test-scons/build/subdir
#    scons: done building targets.
</snippet></ROW><ROW><id>1917041</id><snippet>function sharedStart(array){
    var A= array.slice(0).sort(), 
    word1= A[0], word2= A[A.length-1], 
    i= 0;
    while(word1.charAt(i)== word2.charAt(i))++i;
    return word1.substring(0, i);
}
</snippet></ROW><ROW><id>1917041</id><snippet>var A= ['interspecies', 'interstelar', 'interstate'];
alert(sharedStart(A));

// String value: inters
</snippet></ROW><ROW><id>1917068</id><snippet>def get_models_within_25 (self):
    from django.db import connection, transaction
    cursor = connection.cursor()

    cursor.execute("SELECT id, ( 
        3959 * acos( cos( radians(37) ) * cos( radians( lat ) ) * 
        cos( radians( lng ) - radians(-122) ) + sin( radians(37) ) * 
        sin( radians( lat ) ) ) )
        AS distance FROM stores HAVING distance &lt; 25
        ORDER BY distance LIMIT 0 , 20;")
    ids = [row[0] for row in cursor.fetchall()]

    return MyModel.filter(id__in=ids)
</snippet></ROW><ROW><id>1917347</id><snippet>readline</snippet></ROW><ROW><id>1917347</id><snippet>easy_install</snippet></ROW><ROW><id>1917347</id><snippet>fabric</snippet></ROW><ROW><id>1917347</id><snippet>readline</snippet></ROW><ROW><id>1917389</id><snippet>after</snippet></ROW><ROW><id>1917389</id><snippet>destroy</snippet></ROW><ROW><id>1917389</id><snippet>from Tkinter import Label, Tk
root = Tk()
prompt = 'hello'
label1 = Label(root, text=prompt, width=len(prompt))
label1.pack()

def close_after_2s():
    root.destroy()

root.after(2000, close_after_2s)
root.mainloop()
</snippet></ROW><ROW><id>1917389</id><snippet>Call function once after given time.
MS specifies the time in milliseconds. 
FUNC gives the function which shall be called. 
Additional parameters are given as parameters to the function call.
Return identifier to cancel scheduling with after_cancel.
</snippet></ROW><ROW><id>1917588</id><snippet>from ??? import RequestFactory
from doctest import testmod, DocTestFailure
from django.test import TestCase

from myapp import views

class MyAppTest(TestCase):

    fixtures = ['test_data.json']

    def test_doctests(self):                
        try:
            testmod(views, extraglobs={
                'REQUEST': RequestFactory()
            }, raise_on_error=True)
        except DocTestFailure, e:
            self.fail(e)
</snippet></ROW><ROW><id>1917588</id><snippet>def index(request):  
    """
    returns the top 10 most clicked products

    &gt;&gt;&gt; response = index(REQUEST)
    &gt;&gt;&gt; [test response content here]

    """     
    products = Product.objects.all()[:10]  
    products = match_pictures_with_products( products, 10)  .  
    return render_to_response('products/product_list.html', {'products': products})
</snippet></ROW><ROW><id>1917759</id><snippet>for site in sites:
  for line in files:
     url = site + line
</snippet></ROW><ROW><id>1917874</id><snippet>mysql&gt; select 1000/ 20990933630;
+-------------------+
| 1000/ 20990933630 |
+-------------------+
|            0.0000 | 
+-------------------+
1 row in set (0.00 sec)

mysql&gt; set local div_precision_increment = 30;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; select 1000/ 20990933630;
+----------------------------------+
| 1000/ 20990933630                |
+----------------------------------+
| 0.000000047639615160843133969739 | 
+----------------------------------+
1 row in set (0.00 sec)

mysql&gt;
</snippet></ROW><ROW><id>1918115</id><snippet>from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
   ....

class w_HttpThread(threading.Thread):
    def __init__(self, win):

       ...
</snippet></ROW><ROW><id>1918117</id><snippet>osascript</snippet></ROW><ROW><id>1918117</id><snippet>display dialog</snippet></ROW><ROW><id>1918117</id><snippet>easy_install</snippet></ROW><ROW><id>1918117</id><snippet>#!/usr/bin/env python
from osax import *
import py2app

def doit():
    sa = OSAX()
    sa.display_dialog("Python says hello!",
            buttons=["Hi!", "Howdy!", "Duuuude!"],
            default_button=3)

if __name__ == '__main__':
    doit()
</snippet></ROW><ROW><id>1918132</id><snippet>$facebook-&gt;require_login()</snippet></ROW><ROW><id>1918132</id><snippet>auth_token</snippet></ROW><ROW><id>1918211</id><snippet>import a.b.c.d
</snippet></ROW><ROW><id>1918211</id><snippet>a.something
a.b.something
a.b.c.something
</snippet></ROW><ROW><id>1918211</id><snippet>c.something
b.something
</snippet></ROW><ROW><id>1918211</id><snippet>from a.b.c.d import name1, name2, name3
</snippet></ROW><ROW><id>1918581</id><snippet>start.py</snippet></ROW><ROW><id>1918581</id><snippet>__init__.py</snippet></ROW><ROW><id>1918581</id><snippet>parent.py</snippet></ROW><ROW><id>1918581</id><snippet>./start.py

./pkg/__init__.py
./pkg/parent.py
./pkg/sub/__init__.py
./pkg/sub/relative.py
</snippet></ROW><ROW><id>1918581</id><snippet>start.py</snippet></ROW><ROW><id>1918581</id><snippet>import pkg.sub.relative
</snippet></ROW><ROW><id>1918581</id><snippet>import parent</snippet></ROW><ROW><id>1918581</id><snippet>start.py</snippet></ROW><ROW><id>1918581</id><snippet>start.py</snippet></ROW><ROW><id>1918581</id><snippet>parent.py</snippet></ROW><ROW><id>1918581</id><snippet>__init__.py</snippet></ROW><ROW><id>1918870</id><snippet>dict((row[0], {"b": row[1], "c": row[2]}) for row in rows)
</snippet></ROW><ROW><id>1918870</id><snippet>&gt;&gt;&gt; rows = [[1, 2, 3], [4, 5, 6]]
&gt;&gt;&gt; dict((row[0], {"b": row[1], "c": row[2]}) for row in rows)
{1: {'c': 3, 'b': 2}, 4: {'c': 6, 'b': 5}}
</snippet></ROW><ROW><id>1918870</id><snippet>dict((a, {"b": b, "c": c}) for a, b, c in rows)
</snippet></ROW><ROW><id>1918937</id><snippet>    
    import sys
    sys.path += ['%s/stuff' % (Dir('#').abspath)]

    import configuration
</snippet></ROW><ROW><id>1918980</id><snippet>root.overridedirect(1)</snippet></ROW><ROW><id>1918980</id><snippet>root.wm_attributes("-topmost", 1)
</snippet></ROW><ROW><id>1919055</id><snippet>for lat, long in zip(Latitudes, Longitudes):
    print lat, long
</snippet></ROW><ROW><id>1919072</id><snippet>&gt;&gt;&gt; x = {0: {'count': 1000}, 1: {'count': 2000}}
&gt;&gt;&gt; sum(v['count'] for v in x.values()) 
3000
</snippet></ROW><ROW><id>1919112</id><snippet>mydict = {"&amp;y":"\033[0;30m",
          "&amp;c":"\033[0;31m",
          "&amp;b":"\033[0;32m",
          "&amp;Y":"\033[0;33m",
          "&amp;u":"\033[0;34m"}
mystr = "The &amp;yquick &amp;cbrown &amp;bfox &amp;Yjumps over the &amp;ulazy dog"

for k, v in mydict.iteritems():
    mystr = mystr.replace(k, v)

print mystr
The ←[0;30mquick ←[0;31mbrown ←[0;32mfox ←[0;33mjumps over the ←[0;34mlazy dog
</snippet></ROW><ROW><id>1919112</id><snippet>mydict = dict([('&amp;' + chr(i), str(i)) for i in list(range(65, 91)) + list(range(97, 123))])

# random inserts between keys
from random import randint
rawstr = ''.join(mydict.keys())
mystr = ''
for i in range(0, len(rawstr), 2):
    mystr += chr(randint(65,91)) * randint(0,20) # insert between 0 and 20 chars

from time import time

# How many times to run each solution
rep = 10000

print 'Running %d times with string length %d and ' \
      'random inserts of lengths 0-20' % (rep, len(mystr))

# My solution
t = time()
for x in range(rep):
    for k, v in mydict.items():
        mystr.replace(k, v)
    #print(mystr)
print '%-30s' % 'Tor fixed &amp; variable dict', time()-t

from re import sub, compile, escape

# Peter Hansen
t = time()
for x in range(rep):
    sub(r'(&amp;[a-zA-Z])', r'%(\1)s', mystr) % mydict
print '%-30s' % 'Peter fixed &amp; variable dict', time()-t

# Claudiu
def multiple_replace(dict, text): 
    # Create a regular expression  from the dictionary keys
    regex = compile("(%s)" % "|".join(map(escape, dict.keys())))

    # For each match, look-up corresponding value in dictionary
    return regex.sub(lambda mo: dict[mo.string[mo.start():mo.end()]], text)

t = time()
for x in range(rep):
    multiple_replace(mydict, mystr)
print '%-30s' % 'Claudio variable dict', time()-t

# Claudiu - Precompiled
regex = compile("(%s)" % "|".join(map(escape, mydict.keys())))

t = time()
for x in range(rep):
    regex.sub(lambda mo: mydict[mo.string[mo.start():mo.end()]], mystr)
print '%-30s' % 'Claudio fixed dict', time()-t

# Andrew Y - variable dict
def mysubst(somestr, somedict):
  subs = somestr.split("&amp;")
  return subs[0] + "".join(map(lambda arg: somedict["&amp;" + arg[0:1]] + arg[1:], subs[1:]))

t = time()
for x in range(rep):
    mysubst(mystr, mydict)
print '%-30s' % 'Andrew Y variable dict', time()-t

# Andrew Y - fixed
def repl(s):
  return mydict["&amp;"+s[0:1]] + s[1:]

t = time()
for x in range(rep):
    subs = mystr.split("&amp;")
    res = subs[0] + "".join(map(repl, subs[1:]))
print '%-30s' % 'Andrew Y fixed dict', time()-t
</snippet></ROW><ROW><id>1919112</id><snippet>Running 10000 times with string length 490 and random inserts of lengths 0-20
Tor fixed &amp; variable dict      1.04699993134
Peter fixed &amp; variable dict    0.218999862671
Claudio variable dict          2.48400020599
Claudio fixed dict             0.0940001010895
Andrew Y variable dict         0.0309998989105
Andrew Y fixed dict            0.0310001373291
</snippet></ROW><ROW><id>1919112</id><snippet>mydict = dict([('&amp;' + chr(i), str(i)) for i in range(39,1024)])

# random inserts between keys
from random import randint
rawstr = ''.join(mydict.keys())
mystr = ''
for i in range(0, len(rawstr), 2):
    mystr += chr(randint(65,91)) * randint(0,20) # insert between 0 and 20 chars

from time import time

# How many times to run each solution
rep = 10000

print('Running %d times with string length %d and ' \
      'random inserts of lengths 0-20' % (rep, len(mystr)))

# Tor Valamo - too long
#t = time()
#for x in range(rep):
#    for k, v in mydict.items():
#        mystr.replace(k, v)
#print('%-30s' % 'Tor fixed &amp; variable dict', time()-t)

from re import sub, compile, escape

# Peter Hansen
t = time()
for x in range(rep):
    sub(r'(&amp;[a-zA-Z])', r'%(\1)s', mystr) % mydict
print('%-30s' % 'Peter fixed &amp; variable dict', time()-t)

# Peter 2
def dictsub(m):
    return mydict[m.group()]

t = time()
for x in range(rep):
    sub(r'(&amp;[a-zA-Z])', dictsub, mystr)
print('%-30s' % 'Peter fixed dict', time()-t)

# Claudiu - too long
#def multiple_replace(dict, text): 
#    # Create a regular expression  from the dictionary keys
#    regex = compile("(%s)" % "|".join(map(escape, dict.keys())))
#
#    # For each match, look-up corresponding value in dictionary
#    return regex.sub(lambda mo: dict[mo.string[mo.start():mo.end()]], text)
#
#t = time()
#for x in range(rep):
#    multiple_replace(mydict, mystr)
#print('%-30s' % 'Claudio variable dict', time()-t)

# Claudiu - Precompiled
regex = compile("(%s)" % "|".join(map(escape, mydict.keys())))

t = time()
for x in range(rep):
    regex.sub(lambda mo: mydict[mo.string[mo.start():mo.end()]], mystr)
print('%-30s' % 'Claudio fixed dict', time()-t)

# Separate setup for Andrew and gnibbler optimized dict
mydict = dict((k[1], v) for k, v in mydict.items())

# Andrew Y - variable dict
def mysubst(somestr, somedict):
  subs = somestr.split("&amp;")
  return subs[0] + "".join(map(lambda arg: somedict[arg[0:1]] + arg[1:], subs[1:]))

def mysubst2(somestr, somedict):
  subs = somestr.split("&amp;")
  return subs[0].join(map(lambda arg: somedict[arg[0:1]] + arg[1:], subs[1:]))

t = time()
for x in range(rep):
    mysubst(mystr, mydict)
print('%-30s' % 'Andrew Y variable dict', time()-t)
t = time()
for x in range(rep):
    mysubst2(mystr, mydict)
print('%-30s' % 'Andrew Y variable dict 2', time()-t)

# Andrew Y - fixed
def repl(s):
  return mydict[s[0:1]] + s[1:]

t = time()
for x in range(rep):
    subs = mystr.split("&amp;")
    res = subs[0] + "".join(map(repl, subs[1:]))
print('%-30s' % 'Andrew Y fixed dict', time()-t)

# gnibbler
t = time()
for x in range(rep):
    myparts = mystr.split("&amp;")
    myparts[1:]=[mydict[x[0]]+x[1:] for x in myparts[1:]]
    "".join(myparts)
print('%-30s' % 'gnibbler fixed &amp; variable dict', time()-t)
</snippet></ROW><ROW><id>1919112</id><snippet>Running 10000 times with string length 9491 and random inserts of lengths 0-20
Tor fixed &amp; variable dict      0.0 # disqualified 329 secs
Peter fixed &amp; variable dict    2.07799983025
Peter fixed dict               1.53100013733 
Claudio variable dict          0.0 # disqualified, 37 secs
Claudio fixed dict             1.5
Andrew Y variable dict         0.578000068665
Andrew Y variable dict 2       0.56299996376
Andrew Y fixed dict            0.56200003624
gnibbler fixed &amp; variable dict 0.530999898911
</snippet></ROW><ROW><id>1919681</id><snippet>def generate_png_from_markup_filename(filename):
    def grab_markup_from_filename():
        ... 
    ... # code that calls grab_markup_from_filename() to make the image
    return image
</snippet></ROW><ROW><id>1919681</id><snippet>def verify_admin(function_to_call):
    def call_on_verify_admin(*args, **kwargs):
        if is_admin(global.session.user):
            return function_to_call(*args, **kwargs)
        else:
           throw Exception("Not Admin")
    return call_on_verify_admin  # the return value of verify_admin()
</snippet></ROW><ROW><id>1919681</id><snippet> def update_price(item, price):
     database.lookup(item).set_field('price', price)
 update_price = verify_admin(update_price)
</snippet></ROW><ROW><id>1919681</id><snippet> @verify_admin
 def update_price(item, price):
     database.lookup(item).set_field('price', price)
</snippet></ROW><ROW><id>1920370</id><snippet>class myclass(object):
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def __repr__(self):
        return "(a=%s, b=%s, c=%s)" % (self.a, self.b, self.c)

&gt;&gt;&gt; obj1 = myclass(1, 2, 3)
&gt;&gt;&gt; obj2 = myclass(1, 2, 4)
&gt;&gt;&gt; obj3 = myclass(2, 5, 1)
&gt;&gt;&gt; obj4 = myclass(3, 1, 1)

&gt;&gt;&gt; print sorted([obj1, obj2, obj3, obj4], key=lambda o: o.a)
[(a=1, b=2, c=3), (a=1, b=2, c=4), (a=2, b=5, c=1), (a=3, b=1, c=1)]
</snippet></ROW><ROW><id>1920536</id><snippet>mkisofs</snippet></ROW><ROW><id>1921019</id><snippet>C:\Users\vaibhav\Code\myscript.py</snippet></ROW><ROW><id>1921019</id><snippet>dir Users\vaibhav\Code</snippet></ROW><ROW><id>1921019</id><snippet>python myscript.py</snippet></ROW><ROW><id>1921019</id><snippet>cd /cygdrive/c/Users/vaibhav/Code</snippet></ROW><ROW><id>1921019</id><snippet>python myscript.py</snippet></ROW><ROW><id>1921146</id><snippet>monty = { 
    ('parrot','spam','cheese_shop'): 'sketch', 
    ('Cleese', 'Gilliam', 'Palin') : 'actors',
}
</snippet></ROW><ROW><id>1921146</id><snippet>working_monty = {}
for k, v in monty.items():
    for key in k:
        working_monty[key] = v
</snippet></ROW><ROW><id>1921146</id><snippet>{'Gilliam': 'actors', 'Cleese': 'actors', 'parrot': 'sketch', 'spam': 'sketch', 'Palin': 'actors', 'cheese_shop': 'sketch'}
</snippet></ROW><ROW><id>1921146</id><snippet>working_monty</snippet></ROW><ROW><id>1921739</id><snippet>  for root, directories, files in os.walk("c:\\"):
    doSomething
</snippet></ROW><ROW><id>1921739</id><snippet>  directories = os.walk("c:\\").next()[1]
</snippet></ROW><ROW><id>1921739</id><snippet>  filter(lambda x: os.path.isdir("c:\\"+ x), os.listdir("c:\\"))
</snippet></ROW><ROW><id>1921795</id><snippet>&gt;&gt;&gt; y = compile("m*x+b","","eval")
&gt;&gt;&gt; m = 100
&gt;&gt;&gt; x = 5
&gt;&gt;&gt; b = 1
&gt;&gt;&gt; eval(y)
501
</snippet></ROW><ROW><id>1922505</id><snippet># file messages.py
messages = dict(
    struct1=[
        dict(field="name", type="string", ignore=False),
        dict(field="id", type="int", enums={0: "val1", 1: "val2"}),
        ],
    struct2=[
        dict(field="object", type="struct1"),
        ]
    )
</snippet></ROW><ROW><id>1922505</id><snippet># in your program
from messages import messages
print messages['struct1'][0]["type"]
print messages['struct1'][1]['type']
print messages['struct1'][1]['enums'][0]
print messages['struct2'][0]['type']
</snippet></ROW><ROW><id>1922505</id><snippet>messages = dict(
    ...
    strange_msg=[dict(field="field_%d" % i) for i in range(1000)],
    ...
    )
</snippet></ROW><ROW><id>1922505</id><snippet>execfile</snippet></ROW><ROW><id>1922505</id><snippet>import</snippet></ROW><ROW><id>1922505</id><snippet># file mainprogram.py

def read_messages_from_file(filename):
    module_dict = {}
    execfile(filename, module_dict)
    return module_dict['messages']

if __name__ == "__main__":
    from pprint import pprint
    import sys

    for arg in sys.argv[1:]:
        messages = read_messages_from_file(arg)
        pprint(messages)
</snippet></ROW><ROW><id>1922505</id><snippet>$ python mainprogram.py messages1 messages2 messages3
</snippet></ROW><ROW><id>1922871</id><snippet>struct</snippet></ROW><ROW><id>1922871</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; x = 173.125
&gt;&gt;&gt; s = struct.pack('&gt;f', x)
&gt;&gt;&gt; ''.join('%2.2x' % ord(c) for c in s)
'432d2000'
</snippet></ROW><ROW><id>1922871</id><snippet>&gt;&gt;&gt; i = struct.unpack('&gt;l', s)[0]
&gt;&gt;&gt; print hex(i)
0x432d2000
</snippet></ROW><ROW><id>1922871</id><snippet>int</snippet></ROW><ROW><id>1922871</id><snippet>float</snippet></ROW><ROW><id>1923076</id><snippet>chr(ord(ch)+2)</snippet></ROW><ROW><id>1923358</id><snippet>os.fork()</snippet></ROW><ROW><id>1923358</id><snippet>pty.fork()</snippet></ROW><ROW><id>1923358</id><snippet>pty.fork()</snippet></ROW><ROW><id>1923843</id><snippet>class _BaseA(object):
    _intern = object.__dict__.keys()

class A(_BaseA):
    myattribute = 1

print filter(lambda x: x not in A._intern+['__module__'], A.__dict__.keys())
</snippet></ROW><ROW><id>1923843</id><snippet>'name convention'</snippet></ROW><ROW><id>1923843</id><snippet>__len__</snippet></ROW><ROW><id>1924035</id><snippet>try:
    new_accountadmin_form.save()
except IntegrityError:
    new_accountadmin_form._errors["account"] = ["some message"]
    new_accountadmin_form._errors["is_master"] = ["some message"]

    del new_accountadmin_form.cleaned_data["account"]
    del new_accountadmin_form.cleaned_data["is_master"]
</snippet></ROW><ROW><id>1924035</id><snippet>forms.ValidationError</snippet></ROW><ROW><id>1924035</id><snippet>class YouForm(forms.Form):
    # Everything as before.
    ...

    def clean(self):
       """ This is the form's clean method, not a particular field's clean method """
       cleaned_data = self.cleaned_data

       account = cleaned_data.get("account")
       is_master = cleaned_data.get("is_master")
       username = cleaned_data.get("username")

       if AccountAdmin.objects.filter(account=account, is_master=is_master).count() &gt; 0:
           del cleaned_data["account"]
           del cleaned_data["is_master"]
           raise forms.ValidationError("Account and is_master combination already exists.")

       if AccountAdmin.objects.filter(account=account, username=username).count() &gt; 0:
           del cleaned_data["account"]
           del cleaned_data["username"]
           raise forms.ValidationError("Account and username combination already exists.")

    # Always return the full collection of cleaned data.
    return cleaned_data
</snippet></ROW><ROW><id>1924275</id><snippet>f()</snippet></ROW><ROW><id>1924275</id><snippet>x</snippet></ROW><ROW><id>1924275</id><snippet>x</snippet></ROW><ROW><id>1924275</id><snippet>funcs = []
for x in range(10):
funcs.append(lambda x=x: x)
print [f() for f in funcs]
</snippet></ROW><ROW><id>1924275</id><snippet>lambda x = x</snippet></ROW><ROW><id>1924275</id><snippet>x</snippet></ROW><ROW><id>1924559</id><snippet>if __name__ == '__main__':</snippet></ROW><ROW><id>1924597</id><snippet>class ResponseDTO(object): # New style classes are just better, use them.

    def __init__(self):
        self.success = True # That's the idiomatic way to define an instance member.
        self.errors = [] # Empty list literal, equivalent to list() and more idiomatic.

    def append_error(self, code, message, exception):
        self.success = False
        self.errors.append(ErrorDefinition(code, message, exception))
</snippet></ROW><ROW><id>1924655</id><snippet>filename='plot%03d.png'%i
</snippet></ROW><ROW><id>1924655</id><snippet>%03d</snippet></ROW><ROW><id>1924655</id><snippet>i</snippet></ROW><ROW><id>1924655</id><snippet>filename='plot{0:03d}.png'.format(i)
</snippet></ROW><ROW><id>1924655</id><snippet>marker='*'</snippet></ROW><ROW><id>1924655</id><snippet>linestyle='none'</snippet></ROW><ROW><id>1924655</id><snippet>plt.plot()</snippet></ROW><ROW><id>1924655</id><snippet>plt.axis(...)</snippet></ROW><ROW><id>1924655</id><snippet>plt.plot()</snippet></ROW><ROW><id>1924655</id><snippet>#!/usr/bin/env python
import matplotlib
import matplotlib.pyplot as plt

matplotlib.use('Agg')   # This can also be set in ~/.matplotlib/matplotlibrc
for i in range(0,3):
    print 'Plotting',i
    # Reading a single column data file
    plt.plotfile('gen%s'%i,linestyle='none', marker='*')

    plt.xlabel('Population')
    plt.ylabel('Function Value')
    plt.title('Generation%s'%i)
    plt.axis([0,500,0,180])
    # This (old-style string formatting) also works, especial for Python versions &lt;2.6:
    # filename='plot%03d.png'%i
    filename='plot{0:03d}.png'.format(i)
    print(filename)
    plt.savefig(filename)
    # plt.clf()  # clear current figure
</snippet></ROW><ROW><id>1924824</id><snippet>/* C */
#include &lt;sys/resource.h&gt;
int proc_prio = getpriority(PRIO_PROCESS, getpid()),
    pgrp_prio = getpriority(PRIO_PGRP, getpgrp()),
    user_prio = getpriority(PRIO_USER, getuid());
setpriority(PRIO_PROCESS, getpid(),
    proc_prio &lt; pgrp_prio ? pgrp_prio &lt; user_prio ? user_prio
                                                  : pgrp_prio
                          : proc_prio &lt; user_prio ? user_prio
                                                  : proc_prio);

# Python
import ctypes
import os
PRIO_PROCESS, PRIO_PGRP, PRIO_USER = 0, 1, 2
libc = ctypes.CDLL('libc.so.6')
libc.setpriority(PRIO_PROCESS, os.getpid(),
    max(libc.getpriority(PRIO_PROCESS, os.getpid()),
        libc.getpriority(PRIO_PGRP, os.getpgrp()),
        libc.getpriority(PRIO_USER, os.getuid())))
</snippet></ROW><ROW><id>1924916</id><snippet>import re

def type_and_size(s):
    return re.split('[][]', s+'[1]', 2)[:2]

type_and_size('char')
['char', '1']

type_and_size('char[5]')
['char', '5']
</snippet></ROW><ROW><id>1924916</id><snippet>type, size = type_and_size('char[5]')
</snippet></ROW><ROW><id>1924984</id><snippet>block.device</snippet></ROW><ROW><id>1925061</id><snippet>WindowStaysOnTopHint</snippet></ROW><ROW><id>1925061</id><snippet>import sys
from PyQt4 import QtGui, QtCore

class mymainwindow(QtGui.QMainWindow):
    def __init__(self):
        QtGui.QMainWindow.__init__(self, None, QtCore.Qt.WindowStaysOnTopHint)

app = QtGui.QApplication(sys.argv)
mywindow = mymainwindow()
mywindow.show()
app.exec_()
</snippet></ROW><ROW><id>1925072</id><snippet>form.fields['template'].choices = templates_as_choices(request)

def templates_as_choices(request):
    templates = []
    default = []
    user = []
    for template in Template.objects.filter(default=1).order_by('name'):
        default.append([template.id, template.name])

    for template in Template.objects.filter(user=request.user).order_by('name'):
        user.append([template.id, template.name])

    templates.append(['Default Templates', default])
    templates.append(['User Templates', user])

    return templates
</snippet></ROW><ROW><id>1925533</id><snippet>switch</snippet></ROW><ROW><id>1925664</id><snippet>def safer( func ):
    def safer(*args,**kwargs):
        try:
            return func(*args,**kwargs)
        except Exception,e:
            print "Couldn't call", func
            # do_stuff( e )
    return safer


thread = threading.Thread(target=safer(foo),args=(1,2,3))
</snippet></ROW><ROW><id>1925706</id><snippet>datetime.datetime.strptime()</snippet></ROW><ROW><id>1925706</id><snippet>datetime.datetime.strftime()</snippet></ROW><ROW><id>1925706</id><snippet>'%d-%b-%Y'</snippet></ROW><ROW><id>1925706</id><snippet>time</snippet></ROW><ROW><id>1925836</id><snippet>logging</snippet></ROW><ROW><id>1925836</id><snippet>Logger.addHandler()</snippet></ROW><ROW><id>1925836</id><snippet>class Event(object):
    pass

class Observable(object):
    def __init__(self):
        self.callbacks = []
    def subscribe(self, callback):
        self.callbacks.append(callback)
    def fire(self, **attrs):
        e = Event()
        e.source = self
        for k, v in attrs.iteritems():
            setattr(e, k, v)
        for fn in self.callbacks:
            fn(e)
</snippet></ROW><ROW><id>1925836</id><snippet>Observable</snippet></ROW><ROW><id>1925836</id><snippet>self.fire(type="progress", percent=50)</snippet></ROW><ROW><id>1925868</id><snippet>print</snippet></ROW><ROW><id>1925868</id><snippet>print()</snippet></ROW><ROW><id>1925868</id><snippet>print("Hello, World!")</snippet></ROW><ROW><id>1925926</id><snippet>NUL = '\x00'
def lines_without_nulls(path):
    with open(path, 'Urb') as f:
        for line in f:
            yield line.replace(NUL, '').replace('\n', '\r')
</snippet></ROW><ROW><id>1926029</id><snippet>multis = '%s, '*23
multis = multis[:-2]
</snippet></ROW><ROW><id>1926029</id><snippet>multis = ', '.join(['%s'] * 23)
</snippet></ROW><ROW><id>1926029</id><snippet>ziplist</snippet></ROW><ROW><id>1926029</id><snippet>            (row[0], row[1], row[2], row[3], row[4], row[5], row[6],
            row[7], row[8], row[9], row[10], row[11], row[12],
            row[13], row[14], row[15], row[16], row[17], row[18],
            row[19], row[20], row[21], row[22])
</snippet></ROW><ROW><id>1926029</id><snippet>tuple(row)</snippet></ROW><ROW><id>1926029</id><snippet>row</snippet></ROW><ROW><id>1926029</id><snippet>INSERT</snippet></ROW><ROW><id>1926029</id><snippet>for row in csvReader:
  c.execute(sql_statement, row)
</snippet></ROW><ROW><id>1926029</id><snippet>c.executemany(sql_statement, csvReader)
</snippet></ROW><ROW><id>1926757</id><snippet>&gt;&gt;&gt; import ast
&gt;&gt;&gt; mylist = ast.literal_eval("['foo', ['cat', ['ant', 'bee'], 'dog'], 'bar', 'baz']")
&gt;&gt;&gt; mylist
['foo', ['cat', ['ant', 'bee'], 'dog'], 'bar', 'baz']
</snippet></ROW><ROW><id>1926787</id><snippet>data="""Spec 2 Included : TRUE
Spec 2 Label: 19-Flat2-HS3
Spec 3 Included : FALSE
Spec 3 Label: 4-1-Bead1-HS3"""

#data=open("data.txt").read()

import re

data=dict(re.findall('(Spec \d+ (?:Included|Label))\s*:\s*(\S+)',data))
</snippet></ROW><ROW><id>1926787</id><snippet>data</snippet></ROW><ROW><id>1926787</id><snippet>{'Spec 3 Included': 'FALSE', 'Spec 2 Included': 'TRUE', 'Spec 3 Label': '4-1-Bead1-HS3', 'Spec 2 Label': '19-Flat2-HS3'}
</snippet></ROW><ROW><id>1926787</id><snippet>from xml.dom import minidom

dom = minidom.parseString(xml_text)
params=dom.getElementsByTagName("Parameter")
for param in params:
    name=param.getAttribute("name")
    if name in data:
        for item in param.getElementsByTagName("*"): # You may change to "Result" or "Value" only
            item.firstChild.replaceWholeText(data[name])

print dom.toxml()

#write to file
open("output.xml","wb").write(dom.toxml())
</snippet></ROW><ROW><id>1926787</id><snippet>&lt;?xml version="1.0" ?&gt;&lt;ParameterData&gt;
  &lt;CreationInfo date="10/28/2009 03:05:14 PM" user="manoj"/&gt;
  &lt;ParameterList count="85"&gt;
    &lt;Parameter mode="both" name="Spec 2 Included" type="boolean"&gt;
      &lt;Value&gt;TRUE&lt;/Value&gt;
      &lt;Result&gt;TRUE&lt;/Result&gt;
    &lt;/Parameter&gt;
    &lt;Parameter mode="both" name="Spec 2 Label" type="string"&gt;
      &lt;Value&gt;19-Flat2-HS3&lt;/Value&gt;
      &lt;Result&gt;19-Flat2-HS3&lt;/Result&gt;
    &lt;/Parameter&gt;
    &lt;Parameter mode="both" name="Spec 3 Included" type="boolean"&gt;
      &lt;Value&gt;FALSE&lt;/Value&gt;
      &lt;Result&gt;FALSE&lt;/Result&gt;
    &lt;/Parameter&gt;
    &lt;Parameter mode="both" name="Spec 3 Label" type="string"&gt;
      &lt;Value&gt;4-1-Bead1-HS3&lt;/Value&gt;
      &lt;Result&gt;4-1-Bead1-HS3&lt;/Result&gt;
    &lt;/Parameter&gt;
  &lt;/ParameterList&gt;
&lt;/ParameterData&gt;
</snippet></ROW><ROW><id>1927313</id><snippet>errptr = file(errFile, "r")
</snippet></ROW><ROW><id>1927313</id><snippet>if os.path.exists(errFile):
  errptr = file(errFile, "r")
  errData = errptr.read()
  errptr.close()
  raise Exception("Error executing command: " + repr(errData))
</snippet></ROW><ROW><id>1927313</id><snippet>/usr/bin/si</snippet></ROW><ROW><id>1927313</id><snippet>si</snippet></ROW><ROW><id>1927317</id><snippet>httplib.HTTP</snippet></ROW><ROW><id>1927317</id><snippet>getresponse()</snippet></ROW><ROW><id>1927444</id><snippet>call</snippet></ROW><ROW><id>1927444</id><snippet>subprocess.call</snippet></ROW><ROW><id>1927444</id><snippet>/usr/bin/si createsandbox</snippet></ROW><ROW><id>1927444</id><snippet>which si</snippet></ROW><ROW><id>1927444</id><snippet>"si createsandbox" + "--no ..."</snippet></ROW><ROW><id>1927444</id><snippet>["/usr/bin/si","createsandbox --no ..."]</snippet></ROW><ROW><id>1927444</id><snippet>sys</snippet></ROW><ROW><id>1927444</id><snippet>sandbox</snippet></ROW><ROW><id>1927444</id><snippet>self.sandbox</snippet></ROW><ROW><id>1927444</id><snippet>def mks_create_sandbox():</snippet></ROW><ROW><id>1927444</id><snippet>def mks_create_sandbox(self):</snippet></ROW><ROW><id>1927472</id><snippet>xmlrpclib</snippet></ROW><ROW><id>1927472</id><snippet>xmlrpclib</snippet></ROW><ROW><id>1927575</id><snippet>seq= something.get()
root.copy( seq[0] )
foo( seq[0] )
for member in seq[1:]:
    somewhereElse.copy(member)
    foo( member )
</snippet></ROW><ROW><id>1927575</id><snippet>seq_iter= iter( something.get() )
head = seq_iter.next()
root.copy( head )
foo( head )
for member in seq_iter:
    somewhereElse.copy( member )
    foo( member )
</snippet></ROW><ROW><id>1927681</id><snippet>h1 = Image.open("image1").histogram()
h2 = Image.open("image2").histogram()

rms = math.sqrt(reduce(operator.add,
    map(lambda a,b: (a-b)**2, h1, h2))/len(h1))
</snippet></ROW><ROW><id>1927729</id><snippet>s = 'a.pdf'
print s.replace('pdf', 'jpg')
</snippet></ROW><ROW><id>1928836</id><snippet>return</snippet></ROW><ROW><id>1928836</id><snippet>from mksfunction import mks_create_sandbox  
import os.path

if not os.path.exists('home/build/test/new_sandbox/project.pj'):
    mks_create_sandbox()
</snippet></ROW><ROW><id>1928867</id><snippet>class Class1(object):
    def method( self, theA, params ):
        theA.methA( params )

class Class2(object):
    def method( self, theA, params ):
        theA.methB( params )

class Class3(object):
    def method( self, theA, params ):
        theA.methC( params )

class A(object):
    def methA(parm1, parm2)
        ...

    def methB(parm1, parm2)
        ...

    def methC(parm1, parm2)
        ...

    def manager(parm1, method, params)
        ...
        param1.method( self, params )
</snippet></ROW><ROW><id>1929161</id><snippet>ndx</snippet></ROW><ROW><id>1929161</id><snippet>{{ test.0.bar }}
</snippet></ROW><ROW><id>1929161</id><snippet>{{ foo.bar }}</snippet></ROW><ROW><id>1929161</id><snippet>foo[bar]</snippet></ROW><ROW><id>1929161</id><snippet>foo['bar']</snippet></ROW><ROW><id>1929304</id><snippet>dict()</snippet></ROW><ROW><id>1929304</id><snippet> i = int("1")
</snippet></ROW><ROW><id>1929304</id><snippet>dict()</snippet></ROW><ROW><id>1929304</id><snippet>&gt;&gt;&gt; from timeit import Timer
&gt;&gt;&gt; Timer("mydict = {'a' : 1, 'b' : 2, 'c' : 'three'}").timeit()
0.91826782454194589
&gt;&gt;&gt; Timer("mydict = dict(a=1, b=2, c='three')").timeit()
1.9494664824719337
</snippet></ROW><ROW><id>1929321</id><snippet>-Wl,-search_paths_first</snippet></ROW><ROW><id>1929715</id><snippet>zipped = urllib.urlopen('www.abc.com/xyz.zip')
buf = cStringIO.StringIO(zipped.read())
zipped.close()
unzipped = zipfile.ZipFile(buf, 'r')
for f_info in unzipped.infolist():
   logfile = unzipped.open(f_info)
   # Here's where we buffer:
   logbuffer = cStringIO.StringIO(logfile.read())
   logfile.close()

   for handler in [handler1, handler2]:
      handler(logbuffer)
      # StringIO objects support seek():
      logbuffer.seek(0)

   unzipped.extract(f_info)
</snippet></ROW><ROW><id>1930578</id><snippet>(?:[\d]*[\,\.\ \-]+)*
</snippet></ROW><ROW><id>1930578</id><snippet>(?:[\d,. \-]*[,. \-])?
</snippet></ROW><ROW><id>1930578</id><snippet>[' Aug  6 20:43:20 2003', ' Mar 14 06:02:55 1973', ' March 14 06:02:55 AM 1973', ' Jun 16 20:18:03 1981']
['2003-08-06', '2003-08-07', '2003-07-23', '1973-01-18', '3/14/1973', '16/6/1981', '16/6/1981', '16/6/1981', '16/6/1981', '08/08/2003']
</snippet></ROW><ROW><id>1930869</id><snippet>class LockableDict(dict):
    def __init__(self, *args, **kwargs):
        from threading import Lock
        self.lock = Lock()
        dict.__init__(self, *args, **kwargs)

    @property
    def locked(self):
        return self.lock.locked()

    def lock(self):
        self.lock.acquire()

    def unlock(self):
        self.lock.release()

# and then
my_dict = LockableDict({1:2, 3:4})
my_dict.lock()
# do modifications
my_dict.unlock()
</snippet></ROW><ROW><id>1930870</id><snippet>a=b</snippet></ROW><ROW><id>1930870</id><snippet>operator=</snippet></ROW><ROW><id>1930870</id><snippet>operator=</snippet></ROW><ROW><id>1930870</id><snippet>foo2 = Foo(foo1)</snippet></ROW><ROW><id>1931065</id><snippet>get_next_by_foo</snippet></ROW><ROW><id>1931065</id><snippet>get_previous_by_foo</snippet></ROW><ROW><id>1931065</id><snippet>DateField</snippet></ROW><ROW><id>1931065</id><snippet>DateTimeField</snippet></ROW><ROW><id>1931065</id><snippet>null=True</snippet></ROW><ROW><id>1931065</id><snippet>&gt;&gt;&gt; from foo.models import Request
&gt;&gt;&gt; r = Request.objects.get(id=1)
&gt;&gt;&gt; r.get_next_by_created()
&lt;Request: xyz246&gt;
</snippet></ROW><ROW><id>1931065</id><snippet>DoesNotExist</snippet></ROW><ROW><id>1931065</id><snippet>&gt;&gt;&gt; r2 = r.get_next_by_created()
&gt;&gt;&gt; r2.get_next_by_created()
...
DoesNotExist: Request matching query does not exist.
</snippet></ROW><ROW><id>1931299</id><snippet>from sqlalchemy import *
from sqlalchemy.orm import *

engine = create_engine('sqlite:///:memory:', echo='debug')

m = MetaData()

parent = Table('parent', m, 
                Column('id', Integer, primary_key=True)
)

child = Table('child', m, 
                Column('id', Integer, primary_key=True),
                Column('parent_id', Integer, ForeignKey('parent.id')),
                Column('sortkey', Integer)
                )

m.create_all(engine)

class Parent(object):
    def __init__(self, children):
        self.all_c = children

class Child(object):
    def __init__(self, sortkey):
        self.sortkey = sortkey

latest_c = select([func.max(child.c.sortkey)]).\
                where(child.c.parent_id==parent.c.id).\
                correlate(parent).\
                as_scalar()

mapper(Parent, parent, properties={
    'all_c':relation(Child),
    'latest_c':relation(Child, 
                            primaryjoin=and_(
                                child.c.sortkey==latest_c, 
                                child.c.parent_id==parent.c.id
                            ),
                            uselist=False
    )
})

mapper(Child, child)

session = sessionmaker(engine)()

p1, p2, p3 = Parent([Child('a'), Child('b'), Child('c')]), \
                Parent([Child('b'), Child('c')]),\
                Parent([Child('f'), Child('g'), Child('c')])

session.add_all([p1, p2, p3])
session.commit()

assert p1.latest_c.sortkey == 'c'
assert p2.latest_c.sortkey == 'c'
assert p3.latest_c.sortkey == 'g'
</snippet></ROW><ROW><id>1931299</id><snippet>latest_c = select([child.c.id]).\
                where(child.c.parent_id==parent.c.id).\
                order_by(child.c.sortkey.desc()).\
                limit(1).\
                correlate(parent).\
                as_scalar()

mapper(Parent, parent, properties={
    'all_c':relation(Child),
    'latest_c':relation(Child, 
                            primaryjoin=and_(
                                child.c.id==latest_c, 
                                child.c.parent_id==parent.c.id
                            ),
                            uselist=False
    )
})
</snippet></ROW><ROW><id>1931428</id><snippet># Answer to question 1 - just use the built-in functionality of lists.
#
# There is no need to use variables when lists let you do so much more
#   in a quick and organised fashion.
lines = []
for line in open_file:
   lines.append(line)
</snippet></ROW><ROW><id>1931471</id><snippet>class Node(models.Model):
    #other class attributes
</snippet></ROW><ROW><id>1931471</id><snippet>class Thingy(Node):
    name       = models.CharField(max_length=100)
    otherstuff = models.CharField(max_length=255)
</snippet></ROW><ROW><id>1931531</id><snippet>&gt;&gt;&gt; import yaml
&gt;&gt;&gt; s = '{value: "82363549923gnyh49c9djl239pjm01223", id: 17893}'
&gt;&gt;&gt; yaml.load(s)
{'id': 17893, 'value': '82363549923gnyh49c9djl239pjm01223'}
</snippet></ROW><ROW><id>1931552</id><snippet>[line.strip().split() for line in z if not line.startswith(('a', 'b'))]
</snippet></ROW><ROW><id>1931552</id><snippet>[
    line.strip().split()
    for line in z if line.endswith('c') and not line.startswith(('a', 'b'))
]
</snippet></ROW><ROW><id>1931603</id><snippet>x = collections.deque(5*[0], 5)
</snippet></ROW><ROW><id>1931603</id><snippet>collections.deque</snippet></ROW><ROW><id>1931603</id><snippet>push</snippet></ROW><ROW><id>1931603</id><snippet>appendleft</snippet></ROW><ROW><id>1931603</id><snippet>maxlen</snippet></ROW><ROW><id>1931723</id><snippet>date_list</snippet></ROW><ROW><id>1931723</id><snippet>pub_date</snippet></ROW><ROW><id>1931723</id><snippet>archive_year</snippet></ROW><ROW><id>1931723</id><snippet>extra_context</snippet></ROW><ROW><id>1931723</id><snippet>date_list</snippet></ROW><ROW><id>1931723</id><snippet>{% for month in date_list %}
    &lt;li&gt;
        &lt;a href="/blog/{{ year }}/{{ month|date:"b" }}/"&gt;{{ month|date:"F" }}&lt;/a&gt;
    &lt;/li&gt;
{% endfor %}
</snippet></ROW><ROW><id>1931851</id><snippet>def linetype(line):
    if line.startswith("a"):
        return 1
    if line.startswith("b"):
        return 2
    try:
        parts = [int(x) for x in line.split()]
        if len(parts) &gt;=3 and parts[-1] == 0:
            return 3
    except:
        pass
    raise Exception("Unknown Line Type")

maxtype = 0

for line in open("filename","r"):  #iterate over each line in the file
    line = line.strip() # strip any whitespace
    if line == "":      # if we're left with a blank line
        continue        # continue to the next iteration

    lt = linetype(line) # get the line type of the line
                        # or raise an exception if unknown type
    if lt &gt;= maxtype:   # as long as our type is increasing
        maxtype = lt    # note the current type
    else:               # otherwise line type decreased
        raise Exception("Out of Order")  # so raise exception

print "Validates"  # if we made it here, we validated
</snippet></ROW><ROW><id>1931993</id><snippet>Table</snippet></ROW><ROW><id>1931993</id><snippet>Table</snippet></ROW><ROW><id>1931993</id><snippet>[x for x in coords if x['agent'] == 1]
</snippet></ROW><ROW><id>1931993</id><snippet>[x["agent"] for x in coords if x['agent'] == 1]
</snippet></ROW><ROW><id>1931993</id><snippet>[x[:] for x in coords if x['agent'] == 1]
</snippet></ROW><ROW><id>1931993</id><snippet>[x.fetch_all_fields() for x in coords if x['agent'] == 1]
</snippet></ROW><ROW><id>1932358</id><snippet>source</snippet></ROW><ROW><id>1932358</id><snippet>create database test;
</snippet></ROW><ROW><id>1932358</id><snippet>sql=open("test.sql").read()
</snippet></ROW><ROW><id>1932358</id><snippet>cursor.execute(sql);
</snippet></ROW><ROW><id>1933219</id><snippet>str.encode</snippet></ROW><ROW><id>1933219</id><snippet>str.encode([encoding[, errors]])
</snippet></ROW><ROW><id>1933219</id><snippet>codecs.register_error</snippet></ROW><ROW><id>1933219</id><snippet>register_error</snippet></ROW><ROW><id>1933357</id><snippet>mod_proxy</snippet></ROW><ROW><id>1933357</id><snippet>mod_rewrite</snippet></ROW><ROW><id>1933357</id><snippet>RequestMap</snippet></ROW><ROW><id>1933357</id><snippet>external_acl_type</snippet></ROW><ROW><id>1933436</id><snippet>sys</snippet></ROW><ROW><id>1933436</id><snippet>import sys

#Functions
def a(filename): pass
def b(filename): pass
def c(filename): pass

#Function chooser
func_arg = {"-a": a, "-b": b, "-c": c}

#Do it
if __name__ == "__main__":
    func_arg[sys.argv[1]](sys.argv[2])
</snippet></ROW><ROW><id>1933436</id><snippet>a(filename)</snippet></ROW><ROW><id>1933436</id><snippet>python file.py -a filename</snippet></ROW><ROW><id>1933481</id><snippet>for key, val in values:
    fieldName = valueToFieldName[key]
    fieldType = fieldNameToType[fieldName]
    if fieldType is int:
        s = 'object.%s = int(%s)' % (fieldName, fieldType) 
    #Many clauses like this...

exec(s)
</snippet></ROW><ROW><id>1933811</id><snippet>def c():
    class Clone(object):
        pass

    return Clone

c1 = c()
c2 = c()
print id(c1)
print id(c2)
</snippet></ROW><ROW><id>1933811</id><snippet>4303713312
4303831072
</snippet></ROW><ROW><id>1933932</id><snippet>&gt;&gt;&gt; import bisect
&gt;&gt;&gt; grid = [0, 5, 10, 15, 20]
&gt;&gt;&gt; value = 8
&gt;&gt;&gt; bisect.bisect(grid, value)
2
</snippet></ROW><ROW><id>1933953</id><snippet>random.py</snippet></ROW><ROW><id>1933953</id><snippet>tempfile</snippet></ROW><ROW><id>1933953</id><snippet>random</snippet></ROW><ROW><id>1933953</id><snippet>random</snippet></ROW><ROW><id>1934350</id><snippet>li</snippet></ROW><ROW><id>1934350</id><snippet>li = {}
for j in range(10):
    li[j] = []
</snippet></ROW><ROW><id>1934364</id><snippet>POST / HTTP/1.1
User-Agent: curl/7.19.4 (universal-apple-darwin10.0) libcurl/7.19.4 OpenSSL/0.9.8k zlib/1.2.3
Host: 127.0.0.1 
Accept: */*
Content-Length: 188
Expect: 100-continue

bwckschd.p_disp_dyn_sched&amp;p_term=201010
</snippet></ROW><ROW><id>1934364</id><snippet>POST / HTTP/1.1
Accept-Encoding: identity
Content-Length: 60
Host: 127.0.0.1
Content-Type: application/x-www-form-urlencoded
Connection: close
User-Agent: Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)

p_calling_proc%3Dbwckschd.p_disp_dyn_sched%26p_term%3D201010
</snippet></ROW><ROW><id>1934649</id><snippet>return</snippet></ROW><ROW><id>1934649</id><snippet>GetFileContents</snippet></ROW><ROW><id>1934649</id><snippet>return bytearray(fileContents)
</snippet></ROW><ROW><id>1934649</id><snippet>bytearray</snippet></ROW><ROW><id>1934649</id><snippet>bytes</snippet></ROW><ROW><id>1934821</id><snippet>someval = mlab.set(h,'XData')</snippet></ROW><ROW><id>1934821</id><snippet>mlab.set(h,'XData',[0,0,0],nout=0)</snippet></ROW><ROW><id>1935084</id><snippet>BOOST_PYTHON_MODULE(MyLib)
{
    PyEval_InitThreads();
    class_ stuff
</snippet></ROW><ROW><id>1935323</id><snippet>/Library/Python/2.5/site-packages/</snippet></ROW><ROW><id>1935560</id><snippet>from weakref import ref
from time import sleep

class Person4:
    '''Represents a person'''
    population = 0

    def __init__(self, name):
        '''Initialize the person's data'''
        self.name = name
        print 'Initializing %s'% self.name

        #When the person is created they increase the population
        Person4.population += 1

        self._wr = ref(self, lambda wr, name=self.name: Person4_finalizer(name))

def Person4_finalizer(name):
        '''I am dying'''
        print '%s says bye' % name

        Person4.population -= 1

        if Person4.population == 0:
            print 'I am the last one'
        else:
            print 'There are still %d left' % Person4.population

p1 = Person4("one")
p2 = Person4("two")
p3 = Person4("three")

del p2
del p3
sleep(5)
</snippet></ROW><ROW><id>1935560</id><snippet>Initializing one
Initializing two
Initializing three
two says bye
There are still 2 left
three says bye
There are still 1 left
one says bye
I am the last one
</snippet></ROW></DATA>