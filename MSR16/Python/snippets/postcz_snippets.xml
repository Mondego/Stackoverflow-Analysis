<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>16949606</id><snippet>a</snippet></ROW><ROW><id>16949819</id><snippet>self.label = ttk.Label(self, ...)
# ...
self.combo = ttk.Combobox(self.master, ...)
</snippet></ROW><ROW><id>16949819</id><snippet>self</snippet></ROW><ROW><id>16949819</id><snippet>self.combo = ttk.Combobox(self, ...)
</snippet></ROW><ROW><id>16949828</id><snippet>def main_func():
    final_d = {}
    for _ in range(10):
        for key, val in part_func().items():
            final_d.setdefault(key, []).append(val)
    return final_d
</snippet></ROW><ROW><id>16949832</id><snippet>class myList(list):
    pass
</snippet></ROW><ROW><id>16949832</id><snippet>class myList(list):
    def sort(self):
        pass
</snippet></ROW><ROW><id>16949832</id><snippet>class myList(list)
    def sort(self):
        if whatever_the_condition_is:
            print('You wish...')
        else:
            super().sort()
</snippet></ROW><ROW><id>16949832</id><snippet>whatever_the_condition_is</snippet></ROW><ROW><id>16949832</id><snippet>is_sorted_backward</snippet></ROW><ROW><id>16949832</id><snippet>self</snippet></ROW><ROW><id>16950266</id><snippet>temp_ID.append((re.search(r'exon_number\s""(\d)""',k).group(1)))
</snippet></ROW><ROW><id>16950266</id><snippet>temp_ID.append((re.search(r'exon_number\s""(\d+)""',k).group(1)))
</snippet></ROW><ROW><id>16950266</id><snippet>\d+</snippet></ROW><ROW><id>16950364</id><snippet>__all__</snippet></ROW><ROW><id>16950364</id><snippet>._implementation</snippet></ROW><ROW><id>16950364</id><snippet>__all__</snippet></ROW><ROW><id>16950364</id><snippet>from ._implementation import *
from ._implementation import __all__
</snippet></ROW><ROW><id>16950364</id><snippet>__all__</snippet></ROW><ROW><id>16950364</id><snippet>__all__</snippet></ROW><ROW><id>16950471</id><snippet>class MyClass:

    def myMethod(self):
        ...
</snippet></ROW><ROW><id>16950471</id><snippet>self</snippet></ROW><ROW><id>16950471</id><snippet>s</snippet></ROW><ROW><id>16950471</id><snippet>.</snippet></ROW><ROW><id>16950471</id><snippet>s</snippet></ROW><ROW><id>16950471</id><snippet>s = Segment(p1, p2)</snippet></ROW><ROW><id>16950471</id><snippet>Segment</snippet></ROW><ROW><id>16950471</id><snippet>s</snippet></ROW><ROW><id>16950471</id><snippet>self</snippet></ROW><ROW><id>16950471</id><snippet>__init__()</snippet></ROW><ROW><id>16950471</id><snippet>Point(3, 4)</snippet></ROW><ROW><id>16950471</id><snippet>Segment(p1, p2)</snippet></ROW><ROW><id>16950471</id><snippet>s.p1</snippet></ROW><ROW><id>16950471</id><snippet>Segment</snippet></ROW><ROW><id>16950471</id><snippet>s</snippet></ROW><ROW><id>16950471</id><snippet>s</snippet></ROW><ROW><id>16950471</id><snippet>self</snippet></ROW><ROW><id>16950471</id><snippet>self.p1</snippet></ROW><ROW><id>16950471</id><snippet>p1</snippet></ROW><ROW><id>16950471</id><snippet>Segment</snippet></ROW><ROW><id>16950471</id><snippet>Point</snippet></ROW><ROW><id>16950508</id><snippet>call                 ::=  primary "(" [argument_list [","]
                          | expression genexpr_for] ")"
argument_list        ::=  positional_arguments ["," keyword_arguments]
                            ["," "*" expression] ["," keyword_arguments]
                            ["," "**" expression]
                          | keyword_arguments ["," "*" expression]
                            ["," "**" expression]
                          | "*" expression ["," "*" expression] ["," "**" expression]
                          | "**" expression
positional_arguments ::=  expression ("," expression)*
keyword_arguments    ::=  keyword_item ("," keyword_item)*
keyword_item         ::=  identifier "=" expression
</snippet></ROW><ROW><id>16950508</id><snippet>call                 ::=  primary "(" [argument_list [","]] ")"
argument_list        ::=  positional_arguments ["," keyword_arguments]
                            ["," "*" expression] ["," keyword_arguments]
                            ["," "**" expression]
positional_arguments ::=  expression ("," expression)*
keyword_arguments    ::=  keyword_item ("," keyword_item)*
keyword_item         ::=  identifier "=" expression
</snippet></ROW><ROW><id>16950508</id><snippet>,</snippet></ROW><ROW><id>16950508</id><snippet>f(1, *(2,3,4), )</snippet></ROW><ROW><id>16950508</id><snippet>arglist: (argument ',')* ( argument [',']
                         | '*' test (',' argument)* [',' '**' test] 
                         | '**' test
                         )
</snippet></ROW><ROW><id>16950508</id><snippet>f(*(1,2,3), *(4,5,6))</snippet></ROW><ROW><id>16950508</id><snippet>f(*(1,2,3), *(4,5,6), *(7,8,9))</snippet></ROW><ROW><id>16950508</id><snippet>f(x=1, *(2,3))</snippet></ROW><ROW><id>16950508</id><snippet>f(x=1, 2, 3)</snippet></ROW><ROW><id>16950508</id><snippet>*args</snippet></ROW><ROW><id>16950508</id><snippet>**kwargs</snippet></ROW><ROW><id>16950623</id><snippet>str</snippet></ROW><ROW><id>16950623</id><snippet>len(self)</snippet></ROW><ROW><id>16950623</id><snippet>__add__</snippet></ROW><ROW><id>16950623</id><snippet>+</snippet></ROW><ROW><id>16950623</id><snippet>class myStr(str):
    def __add__(self, other):
        return len(self) + len(other)
</snippet></ROW><ROW><id>16950623</id><snippet>&gt;&gt;&gt; class myStr(str):
...     def __add__(self, other):
...         return len(self) + len(other)
... 
&gt;&gt;&gt; foo = myStr('foo')
&gt;&gt;&gt; foo
'foo'
&gt;&gt;&gt; foo + 'bar'
6
</snippet></ROW><ROW><id>16950729</id><snippet>lines1 = [i.split() for i in open('tmp.txt').readlines()]
values,keys = zip(*lines1)
dict1 = dict( zip(keys,values) )
lines2 = [i.split() for i in open('tmp2.txt').readlines()]
values,keys = zip(*lines2)
dict2 = dict( zip(keys,values) )
dict3 = {}
for k1,v1 in dict1.items():
    v2 = dict2.get(k1)
    if v2:
        dict3[k1] = str(float(v1)/float(v2))
    else:
        dict3[k1] = v1
for k2,v2 in dict2.items():
    if not dict3.get(k2):
        dict3[k2] = v2
out = open('output.txt','w')
out.writelines(['%s\t%s\n' %\
    (k[0],dict3[k[0]]) for k in sorted(dict3.items(), key=lambda x:x[1])])
out.close()
</snippet></ROW><ROW><id>16951539</id><snippet>class Checkbook:

    def __init__(self):
        self.transactions = []    # Checkbook is just a wrapper around a list

    def __getitem__(self, index): # implementing [x]
        return self.transactions[index]

    def __setitem__(self, index, transaction): #implementing [x] = i
        self.transactions[index] = transaction

    def append(self, transaction): # implementing .append(x)
        self.transactions.append(transaction)

    def extend(self, transaction_list): # implementing .extend([x,y,z])
        self.transactions.extend(transaction_list)

    # and so on for every method which you want to support
</snippet></ROW><ROW><id>16951539</id><snippet>list</snippet></ROW><ROW><id>16951539</id><snippet>list</snippet></ROW><ROW><id>16951539</id><snippet>std::vector</snippet></ROW><ROW><id>16951539</id><snippet>malloc()</snippet></ROW><ROW><id>16951539</id><snippet>std::map</snippet></ROW><ROW><id>16951717</id><snippet>current_team = dict((k,v) for k,v in list(team.items()) for player in v[‘player’] if player['year'] == 2013)
</snippet></ROW><ROW><id>16951717</id><snippet>current_players = (dict((k,v)
    for k,v in list(team.items())
        for player in v['player']
            if player['year'] == 2013))
</snippet></ROW><ROW><id>16951717</id><snippet>current_players = (dict((k,v)            # dict comprehension:

    for k,v in list(team.items())        #   let’s filter the team member dict...
        for player in v['player']        #   for players...
            if player['year'] == 2013))  #   who are playing this year
</snippet></ROW><ROW><id>16951753</id><snippet>__import__</snippet></ROW><ROW><id>16951753</id><snippet>a = __import__("a")
a.A()
</snippet></ROW><ROW><id>16951790</id><snippet>Redis</snippet></ROW><ROW><id>16951790</id><snippet>Redis</snippet></ROW><ROW><id>16951790</id><snippet># redis
import redis
pwd = 'l33t'
r = redis.StrictRedis(host='localhost', port=6379, db=1, password=pwd)  

# set id's
r.sadd('user_ids', unique_id) # this is a set, with no duplicates

# check for existing id's
r.sismember('user_ids', unique_id) # returns 1 or 0
</snippet></ROW><ROW><id>16951790</id><snippet>Redis</snippet></ROW><ROW><id>16951790</id><snippet>redis-py</snippet></ROW><ROW><id>16951951</id><snippet>exec</snippet></ROW><ROW><id>16951951</id><snippet>eval</snippet></ROW><ROW><id>16951951</id><snippet>&gt;&gt;&gt; s = "x = 2"
&gt;&gt;&gt; exec s
&gt;&gt;&gt; x
2
</snippet></ROW><ROW><id>16951951</id><snippet>exec</snippet></ROW><ROW><id>16951991</id><snippet>heapq</snippet></ROW><ROW><id>16951991</id><snippet>heapq</snippet></ROW><ROW><id>16951991</id><snippet>peek</snippet></ROW><ROW><id>16951991</id><snippet>heap[0]</snippet></ROW><ROW><id>16951991</id><snippet>heap.peek(0)</snippet></ROW><ROW><id>16951991</id><snippet>blist</snippet></ROW><ROW><id>16951991</id><snippet>bintrees</snippet></ROW><ROW><id>16951991</id><snippet>while q.peek().timestamp &lt;= now():
    process(q.pop())
</snippet></ROW><ROW><id>16951991</id><snippet>(timestamp, id)</snippet></ROW><ROW><id>16951991</id><snippet>multiprocessing.Array</snippet></ROW><ROW><id>16951991</id><snippet>list</snippet></ROW><ROW><id>16951991</id><snippet>Lock</snippet></ROW><ROW><id>16951991</id><snippet>Condition</snippet></ROW><ROW><id>16951991</id><snippet>def schedule_job(timestamp, job):
    job_id = add_job_to_shared_dict(job) # see below
    with scheduler_condition:
        scheduler_heap.push((timestamp, job))
        scheduler_condition.notify_all()

def scheduler_worker_run_once():
    with scheduler_condition:
        while True:
            top = scheduler_heap.peek()
            if top is not None:
                delay = top[0] - now()
                if delay &lt;= 0:
                    break
                scheduler_condition.wait(delay)
            else:
                scheduler_condition.wait()
        top = scheduler_heap.pop()
        if top is not None:
            job = pop_job_from_shared_dict(top[1])
            process_job(job)
</snippet></ROW><ROW><id>16951991</id><snippet>dbm</snippet></ROW><ROW><id>16951991</id><snippet>shelve</snippet></ROW><ROW><id>16951991</id><snippet>dict</snippet></ROW><ROW><id>16951991</id><snippet>Lock</snippet></ROW><ROW><id>16951991</id><snippet>Array</snippet></ROW><ROW><id>16951991</id><snippet>Value</snippet></ROW><ROW><id>16951991</id><snippet>Lock</snippet></ROW><ROW><id>16951991</id><snippet>next_id += 1</snippet></ROW><ROW><id>16951991</id><snippet>with lock:
    next_id += 1
    if next_id == size: next_id = 0
    if arr[next_id] is None:
        arr[next_id] = job
        return next_id
</snippet></ROW><ROW><id>16951991</id><snippet>Queue</snippet></ROW><ROW><id>16952110</id><snippet>len(number) - len(number.rstrip('0'))
</snippet></ROW><ROW><id>16952110</id><snippet>itertools.takewhile</snippet></ROW><ROW><id>16952110</id><snippet>sum(1 for _ in itertools.takewhile(lambda x: x=='0',reversed(string))
</snippet></ROW><ROW><id>16952110</id><snippet>rstrip</snippet></ROW><ROW><id>16952163</id><snippet>date</snippet></ROW><ROW><id>16952163</id><snippet>data[ data[:,0]==date, 1: ]
</snippet></ROW><ROW><id>16952163</id><snippet>[ [ date, data[ data[:,0]==date, 1: ] ] for date in np.unique(data[:,0]) ]
</snippet></ROW><ROW><id>16952357</id><snippet>import stumpff</snippet></ROW><ROW><id>16952357</id><snippet>if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16952357</id><snippet>#!/usr/bin/env ipython
#  This program plots the Stumpff functions C(z) and S(z)

import numpy as np
import pylab
from matplotlib.ticker import MaxNLocator


def C(z):
    if z &gt; 0:
        return (1 - np.cos(z ** 0.5)) / z
    elif z &lt; 0:
        return (np.cosh(np.sqrt(-z)) - 1) / -z
    return 0.5


def S(z):
    if z &gt; 0:
        return (np.sqrt(z) - np.sin(z ** 0.5)) / np.sqrt(z) ** 3
    elif z &lt; 0:
        return (np.sinh(np.sqrt(-z)) - np.sqrt(-z)) / np.sqrt(-z) ** 3
    return 1.0 / 6.0


if __name__ == '__main__':
    vC = np.vectorize(C)
    vS = np.vectorize(S)

    z = np.linspace(-50.0, 500.0, 100000.0)
    y = vC(z)
    y2 = vS(z)

    fig = pylab.figure()
    ax = fig.add_subplot(111)
    ax.plot(z, y, 'r')
    ax.plot(z, y2, 'b')
    pylab.legend(('$C(z)$', '$S(z)$'), loc = 0)
    pylab.xlim((-50, 0))
    pylab.ylim((0, 12))
    pylab.xlabel('$z$')
    pylab.gca().xaxis.set_major_locator(MaxNLocator(prune = 'lower'))
    pylab.savefig('stumpffneg50to0.eps', format = 'eps')


    fig2 = pylab.figure()
    ax2 = fig2.add_subplot(111)
    ax2.plot(z, y, 'r')
    ax2.plot(z, y2, 'b')
    pylab.legend(('$C(z)$', '$S(z)$'), loc = 1)
    pylab.xlim((0, 30))
    pylab.ylim((0, 0.5))
    pylab.xlabel('$z$')
    pylab.gca().xaxis.set_major_locator(MaxNLocator(prune = 'lower'))
    pylab.savefig('stumpff0to30.eps', format = 'eps')


    fig3 = pylab.figure()
    ax3 = fig3.add_subplot(111)
    ax3.plot(z, y, 'r')
    ax3.plot(z, y2, 'b')
    pylab.legend(('$C(z)$', '$S(z)$'), loc = 0)
    pylab.xlim((0, 500))
    pylab.ylim((0, 0.05))
    pylab.xlabel('$z$')
    pylab.gca().xaxis.set_major_locator(MaxNLocator(prune = 'lower'))
    pylab.savefig('stumpff0to500.eps', format = 'eps')
    pylab.show()
</snippet></ROW><ROW><id>16952357</id><snippet>import stumpff</snippet></ROW><ROW><id>16952357</id><snippet>stumpff.C(z)</snippet></ROW><ROW><id>16952357</id><snippet>stumpff.S(z)</snippet></ROW><ROW><id>16952357</id><snippet>stumpff</snippet></ROW><ROW><id>16952357</id><snippet>from stumpff import *</snippet></ROW><ROW><id>16952357</id><snippet>from stumpff import C, S</snippet></ROW><ROW><id>16952417</id><snippet>tarfile</snippet></ROW><ROW><id>16952488</id><snippet>for line in self.data:
    yield {
        "Number": line[0:9],
        "FullName": line[9:27].rstrip(),
        "LastName": line[27:63].rstrip(),
        "Area": line[63:65].rstrip(),
        "City": line[65:90].rstrip(),
        "Status": line[91],
        "Status2": line[92],
        "Status3": line[93]
    }
</snippet></ROW><ROW><id>16952488</id><snippet>list()</snippet></ROW><ROW><id>16952488</id><snippet>output_list = list(self.getDataElements())
</snippet></ROW><ROW><id>16952488</id><snippet>people = []

for line in self.data:
    people.append({
        "Number": line[0:9],
        "FullName": line[9:27].rstrip(),
        "LastName": line[27:63].rstrip(),
        "Area": line[63:65].rstrip(),
        "City": line[65:90].rstrip(),
        "Status": line[91],
        "Status2": line[92],
        "Status3": line[93]
    })

return people
</snippet></ROW><ROW><id>16952510</id><snippet>def num_rushes(slope_height, rush_height_gain, back_sliding):
    if rush_height_gain &lt; slope_height and rush_height_gain - back_sliding &lt; 1:
        raise Exception("this is not going to work very well")
    current_height = rushes = 0
    while current_height &lt; slope_height:
        rushes += 1
        current_height += rush_height_gain
        if current_height &gt;= slope_height:
            break
        current_height -= back_sliding
    return rushes
</snippet></ROW><ROW><id>16952651</id><snippet>import pandas as pd
import os

trainFile = "F:/Projects/Python/coursera/intro-to-data-science/kaggle/data/train.csv"

pwd = os.getcwd()
os.chdir(os.path.dirname(trainFile))
trainData = pd.read_csv(os.path.basename(trainFile))
os.chdir(pwd)
</snippet></ROW><ROW><id>16952653</id><snippet>Request</snippet></ROW><ROW><id>16952653</id><snippet>Request.__init__</snippet></ROW><ROW><id>16952653</id><snippet>def __init__(self, channel, queued):
    """                                                                                                                                     
    @param channel: the channel we're connected to.                                                                                         
    @param queued: are we in the request queue, or can we start writing to                                                                  
        the transport?                                                                                                                      
    """
    self.notifications = []
    self.channel = channel
    self.queued = queued
    ...
</snippet></ROW><ROW><id>16952653</id><snippet>self.channel = channel</snippet></ROW><ROW><id>16952683</id><snippet>p,ier = leastsq(residuals, k_abn, args=(ph, tp, hl_obs), maxfev=2000000)
</snippet></ROW><ROW><id>16952683</id><snippet>[  1.65096852e+02   1.23712405e-03   2.14392540e+00]
</snippet></ROW><ROW><id>16952837</id><snippet>l = [['45.1'], ['21.1'],['42.1']]
my_list = [float(i[0]) for i in l]
&gt;&gt;&gt; my_list
[45.1,21.1,42.1]
</snippet></ROW><ROW><id>16952853</id><snippet>&gt;&gt;&gt; 'hello world'.encode('hex')
'68656c6c6f20776f726c64'
&gt;&gt;&gt; '68656c6c6f20776f726c64'.decode('hex')
'hello world'
</snippet></ROW><ROW><id>16953075</id><snippet>install_name_tool -change @executable_path/../Python $HOME/Library/Enthought/Canopy_64bit/User/Python $HOME/Library/Enthought/Canopy_64bit/User/lib/python2.7/site-packages/cv2.so
</snippet></ROW><ROW><id>16953308</id><snippet>save_path</snippet></ROW><ROW><id>16953308</id><snippet>if os.name == 'nt':
    return remove_chars(name, '/\\?%*:|"&lt;&gt;')
else:
    return remove_chars(name, '/\\"')
</snippet></ROW><ROW><id>16953308</id><snippet>/</snippet></ROW><ROW><id>16953308</id><snippet>../../../etc/passwd</snippet></ROW><ROW><id>16953311</id><snippet>decode</snippet></ROW><ROW><id>16953311</id><snippet>decode</snippet></ROW><ROW><id>16953311</id><snippet>text = data.decode('ascii')
</snippet></ROW><ROW><id>16953311</id><snippet>b''</snippet></ROW><ROW><id>16953311</id><snippet>bytes</snippet></ROW><ROW><id>16953538</id><snippet>start_time</snippet></ROW><ROW><id>16953538</id><snippet>self.state = 2</snippet></ROW><ROW><id>16953538</id><snippet>self.time_passed &gt; 10:</snippet></ROW><ROW><id>16953538</id><snippet>if self.time_passed &gt; (start_time + 10):</snippet></ROW><ROW><id>16953538</id><snippet>10</snippet></ROW><ROW><id>16953566</id><snippet>BaseCommentAbstractModel</snippet></ROW><ROW><id>16953566</id><snippet>ForeignKey</snippet></ROW><ROW><id>16953566</id><snippet>ContentType</snippet></ROW><ROW><id>16953566</id><snippet>pk</snippet></ROW><ROW><id>16953566</id><snippet>GenericForeignKey</snippet></ROW><ROW><id>16953566</id><snippet>GenericForeignKey</snippet></ROW><ROW><id>16953566</id><snippet>get_query_set</snippet></ROW><ROW><id>16953566</id><snippet>BaseCommentNode</snippet></ROW><ROW><id>16953566</id><snippet>def get_query_set(self, context):
    ctype, object_pk = self.get_target_ctype_pk(context)
    if not object_pk:
        return self.comment_model.objects.none()

    qs = self.comment_model.objects.filter(
        content_type = ctype,
        object_pk    = smart_text(object_pk),
        site__pk     = settings.SITE_ID,
    )
</snippet></ROW><ROW><id>16953666</id><snippet>reactor.spawnProcess</snippet></ROW><ROW><id>16953710</id><snippet>compiled = re.compile('(?:(([A-Z][a-z0-9]{2,})\s*){2,})')
for line in data:
    match = compiled.search(line)
    if match:
       print match.group()
    else:
       print None
</snippet></ROW><ROW><id>16953710</id><snippet>None
Surya Soft
Ery Wulandari
Link Building Partner 
</snippet></ROW><ROW><id>16953777</id><snippet>import datetime
import openpyxl
from openpyxl import load_workbook

# Source workbook - wb

wb = load_workbook(filename = r'C:\data\TEST.xlsx' , use_iterators = True)
ws = wb.get_sheet_by_name(name ='QuoteFile ')

# Quick explanation:
# If it's a number, return it. Otherwise, take the difference between the datetime
# and 1899-12-31 00:00:00. The way the datetimes work is they're internally a float,
# being the number of days since the start of 1900. We get the number of seconds in
# the delta (done through subtraction) and divide that by 86400 (the number of seconds
# in a day).
forcefloat = lambda val : val if type(val) in (int,float) else (
                         (val - datetime.datetime(1899,12,31,0,0,0)).total_seconds() / 86400)

for row in ws.iter_rows():
        print(row[0].internal_value ,forcefloat(row[3].internal_value) ,row[4].internal_value         ,row[5].internal_value)


print('Done')
</snippet></ROW><ROW><id>16954140</id><snippet>strftime</snippet></ROW><ROW><id>16954140</id><snippet>clean</snippet></ROW><ROW><id>16954149</id><snippet>import os
from os.path import join, getsize

def size_list(mypath):
    with open("PathTest.txt","w") as of:
        for root, dirs, files in os.walk(mypath):
            for f in files:
                fo.write("\nPath: " +  os.path.join(root, f))
                fo.write("\tSize: " +  str(getsize(os.path.join(root, f))) + " bytes")

size_list("path/to/dir")
</snippet></ROW><ROW><id>16954149</id><snippet>def size_list(mypath):
    my_list = []
    with open("PathTest.txt","w") as of:
        for root, dirs, files in os.walk(mypath):
            for f in files:
                my_file = os.path.join(root, f)
                file_size = getsize(my_file)
                my_list.append((my_file, file_size))
                fo.write("\nPath: " +  my_file)
                fo.write("\tSize: " +  str(file_size) + " bytes")
</snippet></ROW><ROW><id>16954500</id><snippet>import bisect
def func(times, start, end):
    bucket = [start, end]
    out = [x for x in times if bisect.bisect(bucket, x) is 1 or x in bucket]
    return out, (times.index(out[0]), times.index(out[-1]))
</snippet></ROW><ROW><id>16954696</id><snippet>images</snippet></ROW><ROW><id>16954696</id><snippet>Blog</snippet></ROW><ROW><id>16954696</id><snippet>ForeignKey</snippet></ROW><ROW><id>16954696</id><snippet>Image</snippet></ROW><ROW><id>16954696</id><snippet>ManyToMany</snippet></ROW><ROW><id>16954696</id><snippet>{% with blog.images_set.all ... %}</snippet></ROW><ROW><id>16954696</id><snippet>images</snippet></ROW><ROW><id>16954696</id><snippet>images = models.ForeignKey('myapp.Image')
</snippet></ROW><ROW><id>16954696</id><snippet>images = models.ManyToManyField('myapp.Image')
</snippet></ROW><ROW><id>16954696</id><snippet>{% with blog.images.all ... %}
</snippet></ROW><ROW><id>16954696</id><snippet>Image</snippet></ROW><ROW><id>16954696</id><snippet>class Image(models.Model):
     ...
     blog = models.ForeignKey(Blog)
</snippet></ROW><ROW><id>16954696</id><snippet> {% with blog.image_set.all ... %}
</snippet></ROW><ROW><id>16954711</id><snippet>groupdict()</snippet></ROW><ROW><id>16954711</id><snippet>{'digits':'11547', 'letters':'QSD'}</snippet></ROW><ROW><id>16954711</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; checks = [
    re.compile(r'^(?P&lt;digits&gt;\d+)(?P&lt;letters&gt;\D+)$'),
    re.compile(r'^(?P&lt;letters&gt;\D+)(?P&lt;digits&gt;\d+)$'),
]
&gt;&gt;&gt; inputs = ['11547QSD', 'ABC98765', '111ABC111']
&gt;&gt;&gt; for item in inputs:
    for check in checks:
        if check.match(item):
            print('Digits are {digits}, letters are {letters}'.format(
                **check.search(item).groupdict()
            ))
            break
    else:
        print('%s is incorrect' % (item,))


Digits are 11547, letters are QSD
Digits are 98765, letters are ABC
111ABC111 is incorrect
</snippet></ROW><ROW><id>16954711</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; {item: check.search(item).groupdict()
     for (item, check) in product(inputs, checks) if check.match(item)}
{'ABC98765': {'digits': '98765', 'letters': 'ABC'},
'11547QSD': {'digits': '11547', 'letters': 'QSD'}}
</snippet></ROW><ROW><id>16954711</id><snippet>\d</snippet></ROW><ROW><id>16954711</id><snippet>\D</snippet></ROW><ROW><id>16954765</id><snippet>areatable</snippet></ROW><ROW><id>16954765</id><snippet>None</snippet></ROW><ROW><id>16954765</id><snippet>areatable = soup.find('table',{'id':'codes'})
#areatable = soup.find('table', id='codes')  # Also works

if areatable is None:
    print 'Something happened'
    # Exit out
</snippet></ROW><ROW><id>16954765</id><snippet>find_all</snippet></ROW><ROW><id>16954765</id><snippet>findAll</snippet></ROW><ROW><id>16954765</id><snippet>get_text()</snippet></ROW><ROW><id>16954765</id><snippet>text</snippet></ROW><ROW><id>16955076</id><snippet>sorted()</snippet></ROW><ROW><id>16955076</id><snippet>__iter__</snippet></ROW><ROW><id>16955076</id><snippet>iter(self._data)</snippet></ROW><ROW><id>16955076</id><snippet>sort()</snippet></ROW><ROW><id>16955076</id><snippet>yourobj.sort()</snippet></ROW><ROW><id>16955076</id><snippet>.sort()</snippet></ROW><ROW><id>16955076</id><snippet>key</snippet></ROW><ROW><id>16955141</id><snippet>sorted(obj, key=lambda x: (x.name[0], int(x.name[1:])))
</snippet></ROW><ROW><id>16955428</id><snippet>for node in Tree.getiterator():
    print node.tag, node.attrib, node.text
</snippet></ROW><ROW><id>16955514</id><snippet>LockMech</snippet></ROW><ROW><id>16955514</id><snippet>LockMech</snippet></ROW><ROW><id>16955514</id><snippet>while</snippet></ROW><ROW><id>16955514</id><snippet>for</snippet></ROW><ROW><id>16955514</id><snippet>with open("pass.txt",  "r+") as my_pass:
    passcode = my_pass.read()
</snippet></ROW><ROW><id>16955514</id><snippet>PasswordLock</snippet></ROW><ROW><id>16955514</id><snippet>def PasswordLock():
    with open("pass.txt",  "r+") as my_pass:
        passcode = my_pass.read()

    for attempts_remaining in (2, 1, 0):
        x = input("Password: ")
        if x == passcode:
            print("Passcode was correct. Opening secure files...")
            return True
        if attempts_remaining:
            print("Passcode was not corrent, please try again.")
            print("Attempts Left: {}".format(attempts_remaining)

    print("You are out of attempts, access restricted.")
    return False
</snippet></ROW><ROW><id>16955514</id><snippet>Close()</snippet></ROW><ROW><id>16955514</id><snippet>return False</snippet></ROW><ROW><id>16956600</id><snippet>_recognizer = win32com.client.Dispatch("SAPI.SpSharedRecognizer")
</snippet></ROW><ROW><id>16956600</id><snippet>_recognizer = win32com.client.Dispatch("SAPI.SpInprocRecognizer")
</snippet></ROW><ROW><id>16956744</id><snippet>defaultdict</snippet></ROW><ROW><id>16956744</id><snippet>import csv
from collections import defaultdict

emails = defaultdict(list)

with open('email.tsv','r') as f:
   reader = csv.reader(f, delimiter='\t')
   for row in reader:
      if row:
         if '@' in row[0]:
           emails[row[1].strip()].append(row[0].strip()+'\n')

for key,values in emails.items():
   with open('output-{}.csv'.format(key), 'w') as f:
       f.writelines(values)
</snippet></ROW><ROW><id>16956744</id><snippet>emails</snippet></ROW><ROW><id>16956744</id><snippet>writelines</snippet></ROW><ROW><id>16957106</id><snippet>**{...}</snippet></ROW><ROW><id>16957106</id><snippet>**kw</snippet></ROW><ROW><id>16957106</id><snippet>keyword_arguments</snippet></ROW><ROW><id>16957106</id><snippet>**expression</snippet></ROW><ROW><id>16957106</id><snippet>expression</snippet></ROW><ROW><id>16957106</id><snippet>**expression</snippet></ROW><ROW><id>16957106</id><snippet>&gt;&gt;&gt; def f(*args, **kw): print args, kw
... 
&gt;&gt;&gt; f(**{1: 2})
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: f() keywords must be strings
</snippet></ROW><ROW><id>16957106</id><snippet>/* Speed hack: do raw pointer compares. As names are
   normally interned this should almost always hit. */
</snippet></ROW><ROW><id>16957218</id><snippet>all_td</snippet></ROW><ROW><id>16957218</id><snippet>chunks</snippet></ROW><ROW><id>16957218</id><snippet>lambda</snippet></ROW><ROW><id>16957218</id><snippet>&lt;td&gt;stuff&lt;/td&gt;</snippet></ROW><ROW><id>16957218</id><snippet>&gt;&gt;&gt; all_td = filter(lambda x: x.attrs == {}, all_td)
# all_td now contains [&lt;td&gt;Buenos Aires&lt;/td&gt;, &lt;td&gt;11&lt;/td&gt;, &lt;td&gt;La Rioja&lt;/td&gt;, &lt;td&gt;380&lt;/td&gt;, &lt;td&gt;Salta&lt;/td&gt;, &lt;td&gt;387&lt;/td&gt;, &lt;td&gt;Bahia Blanca&lt;/td&gt;, &lt;td&gt;291&lt;/td&gt;, &lt;td&gt;Mar del Plata&lt;/td&gt;, &lt;td&gt;223&lt;/td&gt;, &lt;td&gt;San Juan&lt;/td&gt;, &lt;td&gt;264&lt;/td&gt;, &lt;td&gt;Catamarca&lt;br/&gt;&lt;/td&gt;, &lt;td&gt;383&lt;/td&gt;, &lt;td&gt;Mendoza&lt;/td&gt;, &lt;td&gt;261&lt;/td&gt;, &lt;td&gt;San Luis&lt;/td&gt;, &lt;td&gt;266&lt;/td&gt;, &lt;td&gt;Comodoro Rivadavia&lt;/td&gt;, &lt;td&gt;297&lt;/td&gt;, &lt;td&gt;Mercedes/Prov. B.A.&lt;/td&gt;, &lt;td&gt;2324&lt;/td&gt;, &lt;td&gt;San Nicolas&lt;/td&gt;, &lt;td&gt;336&lt;/td&gt;, &lt;td&gt;Concordia&lt;/td&gt;, &lt;td&gt;345&lt;/td&gt;, &lt;td&gt;Neuquen&lt;/td&gt;, &lt;td&gt;299&lt;/td&gt;, &lt;td&gt;San Rafael&lt;/td&gt;, &lt;td&gt;260&lt;/td&gt;, &lt;td&gt;Cordoba&lt;/td&gt;, &lt;td&gt;351&lt;/td&gt;, &lt;td&gt;Parana&lt;/td&gt;, &lt;td&gt;343&lt;/td&gt;, &lt;td&gt;Santa Fe&lt;/td&gt;, &lt;td&gt;342&lt;/td&gt;, &lt;td&gt;Corrientes&lt;/td&gt;, &lt;td&gt;379&lt;/td&gt;, &lt;td&gt;Posadas&lt;/td&gt;, &lt;td&gt;376&lt;/td&gt;, &lt;td&gt;Santiago del Estero&lt;/td&gt;, &lt;td&gt;385&lt;/td&gt;, &lt;td&gt;Formosa&lt;/td&gt;, &lt;td&gt;370&lt;/td&gt;, &lt;td&gt;Resistencia&lt;/td&gt;, &lt;td&gt;362&lt;/td&gt;, &lt;td&gt;Santo Tome&lt;/td&gt;, &lt;td&gt;3756&lt;/td&gt;, &lt;td&gt;Jesus Maria&lt;/td&gt;, &lt;td&gt;3525&lt;/td&gt;, &lt;td&gt;Rio Cuarto&lt;/td&gt;, &lt;td&gt;358&lt;/td&gt;, &lt;td&gt;Tandil&lt;/td&gt;, &lt;td&gt;249&lt;/td&gt;, &lt;td&gt;La Plata&lt;/td&gt;, &lt;td&gt;221&lt;/td&gt;, &lt;td&gt;Rosario&lt;/td&gt;, &lt;td&gt;341&lt;/td&gt;, &lt;td&gt;Trelew&lt;/td&gt;, &lt;td&gt;280&lt;/td&gt;]
</snippet></ROW><ROW><id>16957218</id><snippet>lambda</snippet></ROW><ROW><id>16957218</id><snippet>True</snippet></ROW><ROW><id>16957218</id><snippet>filter()</snippet></ROW><ROW><id>16957218</id><snippet>all_td</snippet></ROW><ROW><id>16957218</id><snippet>False</snippet></ROW><ROW><id>16957257</id><snippet>&gt;&gt;&gt; items =  [u'a', u'b', u'c']
&gt;&gt;&gt; [x.encode('utf-8') for x in items]
['a', 'b', 'c']
</snippet></ROW><ROW><id>16957370</id><snippet>json.dump()</snippet></ROW><ROW><id>16957370</id><snippet>json.dumps()</snippet></ROW><ROW><id>16957370</id><snippet>default</snippet></ROW><ROW><id>16957370</id><snippet>def decimal_default(obj):
    if isinstance(obj, decimal.Decimal):
        return float(obj)
    raise TypeError

json.dumps({'x': decimal.Decimal('5.5')}, default=decimal_default)
</snippet></ROW><ROW><id>16957370</id><snippet>&gt;&gt;&gt; def decimal_default(obj):
...     if isinstance(obj, decimal.Decimal):
...         return str(obj)
...     raise TypeError
... 
&gt;&gt;&gt; json.dumps({'x': decimal.Decimal('5.5')}, default=decimal_default)
'{"x": 5.5}'
</snippet></ROW><ROW><id>16957606</id><snippet>Requests</snippet></ROW><ROW><id>16957606</id><snippet>GRequests</snippet></ROW><ROW><id>16957625</id><snippet>class Foo(object):
    def __init__(self, m):
        self._m = m
    @property
    def m(self):
        print 'accessed attribute'
        return self._m
    @m.setter
    def m(self, m):
        print 'setting attribute'
        self._m = m


&gt;&gt;&gt; f = Foo(m=5)
&gt;&gt;&gt; f.m = 6
setting attribute
&gt;&gt;&gt; f.m
accessed attribute
6
</snippet></ROW><ROW><id>16957920</id><snippet>with open(originalpath) as f:
    mat = f.read()
while condition :
    run += 1
    write_mat_run(mat, run)
    mat = func(mat)
</snippet></ROW><ROW><id>16958558</id><snippet>CREATE TABLE test1 (
  a text,
  b text,
  PRIMARY KEY (a, b)
)
</snippet></ROW><ROW><id>16958558</id><snippet>cqlsh:ks1&gt; select * from test1;

 a | b
---+---
 a | a
 a | b
 a | c
 a | d
 a | e
 a | f
 a | g
 a | h
 a | i
 a | j
 a | k
 a | l
</snippet></ROW><ROW><id>16958558</id><snippet>import cql
con = cql.connect('localhost', keyspace='ks1', cql_version='3.0.0')
cursor = con.cursor()
last = ""
while last != None:
    cursor.execute("select * from test1 where a=:a and b&gt;:b limit 5", {"a": "a", "b": last})
    last = None
    for row in cursor:
        print row
        last = row[1]
</snippet></ROW><ROW><id>16958558</id><snippet>[u'a', u'a']
[u'a', u'b']
[u'a', u'c']
[u'a', u'd']
[u'a', u'e']
[u'a', u'f']
[u'a', u'g']
[u'a', u'h']
[u'a', u'i']
[u'a', u'j']
[u'a', u'k']
[u'a', u'l']
</snippet></ROW><ROW><id>16958857</id><snippet>{% csrf_token %}</snippet></ROW><ROW><id>16958857</id><snippet>POST</snippet></ROW><ROW><id>16958857</id><snippet>results.html</snippet></ROW><ROW><id>16958862</id><snippet>freetype-devel</snippet></ROW><ROW><id>16958862</id><snippet>sudo yum install freetype-devel</snippet></ROW><ROW><id>16958896</id><snippet>head</snippet></ROW><ROW><id>16958896</id><snippet>display.max_columns</snippet></ROW><ROW><id>16958896</id><snippet>display.width</snippet></ROW><ROW><id>16958896</id><snippet>pd.options.display.max_columns = 50
</snippet></ROW><ROW><id>16958896</id><snippet>df.head(5)[df.columns[0:4]]
# alternatively
df.iloc[:5, :4]
</snippet></ROW><ROW><id>16958937</id><snippet>python-mode.el</snippet></ROW><ROW><id>16959194</id><snippet>parameters.ini</snippet></ROW><ROW><id>16959616</id><snippet>def parse(it):
    result = []
    while True:
        try:
            tk = next(it)
        except StopIteration:
            break

        if tk == '}':
            break
        val = next(it)
        if val == '{':
            result.append((tk,parse(it)))
        else:
            result.append((tk, val))

    return result
</snippet></ROW><ROW><id>16959616</id><snippet>import pprint       

data = """
Continent
{
Name    Europe
Country
{
Name    UK
Dog
{
Name    Fiffi
Colour  Gray
}
Dog
{
Name    Smut
Colour  Black
}
}
}
"""

r = parse(iter(data.split()))
pprint.pprint(r)
</snippet></ROW><ROW><id>16959616</id><snippet>[('Continent',
  [('Name', 'Europe'),
   ('Country',
    [('Name', 'UK'),
     ('Dog', [('Name', 'Fiffi'), ('Colour', 'Gray')]),
     ('Dog', [('Name', 'Smut'), ('Colour', 'Black')])])])]
</snippet></ROW><ROW><id>16959616</id><snippet>}</snippet></ROW><ROW><id>16959616</id><snippet>pyparsing</snippet></ROW><ROW><id>16959616</id><snippet>import pprint
from pyparsing import Word, Literal, Forward, Group, ZeroOrMore, alphas

def syntax():
    lbr = Literal( '{' ).suppress()
    rbr = Literal( '}' ).suppress()
    key = Word( alphas )
    atom = Word ( alphas )
    expr = Forward()
    pair = atom | (lbr + ZeroOrMore( expr ) + rbr)
    expr &lt;&lt; Group ( key + pair )

    return expr

expr = syntax()
result = expr.parseString(data).asList()
pprint.pprint(result)
</snippet></ROW><ROW><id>16959616</id><snippet>[['Continent',
  ['Name', 'Europe'],
  ['Country',
   ['Name', 'UK'],
   ['Dog', ['Name', 'Fiffi'], ['Colour', 'Gray']],
   ['Dog', ['Name', 'Smut'], ['Colour', 'Black']]]]]
</snippet></ROW><ROW><id>16959725</id><snippet>output = zip(name, id, created_at)
</snippet></ROW><ROW><id>16959725</id><snippet>for item in output:
    === Have to do mysql insert operation ===
</snippet></ROW><ROW><id>16959844</id><snippet>Simple.render_GET</snippet></ROW><ROW><id>16959844</id><snippet>response</snippet></ROW><ROW><id>16959844</id><snippet>response</snippet></ROW><ROW><id>16959962</id><snippet>enumerate</snippet></ROW><ROW><id>16959962</id><snippet>    for i, item in enumerate(exampleList):
        if remap != item:
                exampleList[i] = item + 1

        remap = remap + 1
</snippet></ROW><ROW><id>16960216</id><snippet>&gt;&gt;&gt; a[:,0] = b
&gt;&gt;&gt; a
array([[ 1.,  0.],
       [ 2.,  0.],
       [ 3.,  0.]])
</snippet></ROW><ROW><id>16960216</id><snippet>np.column_stack</snippet></ROW><ROW><id>16960216</id><snippet>&gt;&gt;&gt; np.column_stack((b, c))
array([[1, 4],
       [2, 5],
       [3, 6]])
</snippet></ROW><ROW><id>16960216</id><snippet>&gt;&gt;&gt; a[:] = np.column_stack((b, c))
&gt;&gt;&gt; a
array([[ 1.,  4.],
       [ 2.,  5.],
       [ 3.,  6.]])
</snippet></ROW><ROW><id>16960424</id><snippet>In [11]: df1
Out[11]:
           col1  col4
col2 col3
0    0       10   100
     1       20   200
1    0       30   300
     1       40   400

In [12]: d = {'col3': 1, 'col2': 0}
</snippet></ROW><ROW><id>16960424</id><snippet>In [13]: t = tuple(map(d.get, df1.index.names))

In [14]: t
Out[14]: (0, 1)

In [15]: df1.loc[t]
Out[15]:
col1     20
col4    200
Name: (0, 1), dtype: int64
</snippet></ROW><ROW><id>16960424</id><snippet>def reduce_kv(df, kv):
    try:
        return df.xs(kv[1], level=kv[0])
    except (AttributeError,):
        if df.index.name == kv[0]:
            return df.loc[kv[1]]
        else:
            raise AttributeError("Level %s not found" % kv[0])

In [17]: reduce(reduce_kv, d.items(), df1)
Out[17]:
col1     20
col4    200
Name: 1, dtype: int64
</snippet></ROW><ROW><id>16960500</id><snippet>import pickle
import marshal
import types

class Foo():
    def __init__(self, fun):
        self.fun = fun

    def call_fun(self, arg):
        self.fun(arg)

    def save(self, f):
        saved = self.fun
        self.fun = marshal.dumps(self.fun.func_code)
        pickle.dump(self, f)
        self.fun = saved

    @staticmethod
    def load(f):
        foo = pickle.load(f)
        foo.fun = types.FunctionType(marshal.loads(foo.fun), globals())
        return foo

def sample_function(arg):
    arg.effect(4)

class Arg():
    def effect(self, value):
        print "ok: " + str(value)
</snippet></ROW><ROW><id>16960500</id><snippet>foo = Foo(sample_function)

f = open('foo', 'w')
foo.save(f)
f.close()
</snippet></ROW><ROW><id>16960500</id><snippet>f = open('foo', 'r')
foo = Foo.load(f)
f.close()
</snippet></ROW><ROW><id>16960503</id><snippet>is None</snippet></ROW><ROW><id>16960503</id><snippet>0</snippet></ROW><ROW><id>16960503</id><snippet>""</snippet></ROW><ROW><id>16960503</id><snippet>def foo(bar, baz=None):
    baz = baz if baz is not None else blar()
</snippet></ROW><ROW><id>16960503</id><snippet>def foo(bar, baz=None):
    if baz is None:
        baz = blar()
</snippet></ROW><ROW><id>16960610</id><snippet>$virtualenv2.7 --distribute env
New python executable in env/bin/python
Installing distribute....done.
Installing pip................done.
</snippet></ROW><ROW><id>16960610</id><snippet>$source env/bin/activate
</snippet></ROW><ROW><id>16960610</id><snippet>(env)$pip install fabric
Downloading/unpacking fabric
  Downloading Fabric-1.6.1.tar.gz (216Kb): 216Kb downloaded
  Running setup.py egg_info for package fabric   
...

Successfully installed fabric paramiko pycrypto
Cleaning up...
</snippet></ROW><ROW><id>16960610</id><snippet>pip freeze</snippet></ROW><ROW><id>16960610</id><snippet>(env)$pip freeze
Fabric==1.6.1
distribute==0.6.27
paramiko==1.10.1
pycrypto==2.6
wsgiref==0.1.2
</snippet></ROW><ROW><id>16960610</id><snippet>which pip</snippet></ROW><ROW><id>16960666</id><snippet>re.findall("(?!^.*This is message 12345\. Ignore\..*$).*", data)
</snippet></ROW><ROW><id>16960666</id><snippet>m</snippet></ROW><ROW><id>16960666</id><snippet>^</snippet></ROW><ROW><id>16960666</id><snippet>$</snippet></ROW><ROW><id>16960714</id><snippet>f = open('data.txt')
data = []

pattern = "\d+|[IVX]+"
regex = re.compile(pattern)

for line in f:
    matches = re.findall(regex, line)
    data.append(matches)

f.close()

print data
transposed_data = zip(*data)
print transposed_data

for atuple in transposed_data:
    val = atuple[0]

    if all([num==val for num in atuple]): 
        next
    else:
        print atuple
        break
</snippet></ROW><ROW><id>16960714</id><snippet>Fooband 41 - Live - 1. Foo Title
Fooband 41 - Live - 2. Foo Title
Fooband 41 - Live - 3. Foo Title
Fooband 41 - Live - 11. Another Foo Title
</snippet></ROW><ROW><id>16960714</id><snippet>[['41', '1'], ['41', '2'], ['41', '3'], ['41', '11']]
[('41', '41', '41', '41'), ('1', '2', '3', '11')]
('1', '2', '3', '11')
</snippet></ROW><ROW><id>16960714</id><snippet>01. Barband - Foo Title with a 4 in it
05. Barband - Another Foo Title
03. Barband - Bar Title
17. Barband - Yet another Foo Title
</snippet></ROW><ROW><id>16960714</id><snippet>[['01', '4'], ['05'], ['03'], ['17']]
[('01', '05', '03', '17')]
('01', '05', '03', '17')
</snippet></ROW><ROW><id>16960714</id><snippet>01 Barband - Foo Title with a (I) in it
01 Barband - Another Foo (II) Title
01. Barband - Bar Title (IV)
01. Barband - Yet another (XII) Foo Title
</snippet></ROW><ROW><id>16960714</id><snippet>[['01', 'I'], ['01', 'II'], ['01', 'IV'], ['01', 'XII']]
[('01', '01', '01', '01'), ('I', 'II', 'IV', 'XII')]
('I', 'II', 'IV', 'XII')
</snippet></ROW><ROW><id>16961012</id><snippet>request.user.pk</snippet></ROW><ROW><id>16961012</id><snippet>data = {"url": "http://test.com/unsub/%d" % request.user.pk}
</snippet></ROW><ROW><id>16961715</id><snippet>import win32com.client 
wmi = win32com.client.GetObject("winmgmts:") 
for port in wmi.InstancesOf("Win32_SerialPort"): 
    print port.DeviceID, port.Name
</snippet></ROW><ROW><id>16961869</id><snippet>cursor.rowcount</snippet></ROW><ROW><id>16962044</id><snippet>month_1.mdb</snippet></ROW><ROW><id>16962044</id><snippet>month_2.mdb</snippet></ROW><ROW><id>16962044</id><snippet>C:\access</snippet></ROW><ROW><id>16962044</id><snippet># Set up each connection, must have a way to access each file's name
connect_string = "Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=C:\\access\\month_{}.mdb;"
# Assuming that you'll get the same data from each database
sql = "SELECT column_1, column_2 FROM table"
# Connect to each file
connections = [pyodbc.connect(connect_string.format(n)) for n in range(1, 12 + 1)]
# Create a cursor for each file
cursors = [conn.cursor() for conn in connections]
# Query each file and save the data
data = []
for cur in cursors:
  cur.execute(sql)
  data.extend(cur.fetchall())
</snippet></ROW><ROW><id>16962044</id><snippet>sqlite3</snippet></ROW><ROW><id>16962044</id><snippet>import sqlite3
# Create your temporary database
connection = sqlite3.connect(":memory:")
cursor = connection.cursor()
# Set up a place to hold the data fetched previously
_ = cur.execute("CREATE TABLE t(x INTEGER, y INTEGER)")
# Dump all the data into the database
for column_1, column_2 in data:
  _ = cursor.execute("INSERT INTO t VALUES (?, ?)", [column_1, column_2])
# Now you can run queries against the new view of your data
sql = "SELECT t.column_1, t.count(*) FROM t GROUP BY t.column_1"
</snippet></ROW><ROW><id>16962547</id><snippet>str</snippet></ROW><ROW><id>16962547</id><snippet>__str__(self)</snippet></ROW><ROW><id>16962617</id><snippet>print 'Number is: %.8f' % (float(a[0]/a[1]))
</snippet></ROW><ROW><id>16962617</id><snippet>format</snippet></ROW><ROW><id>16963121</id><snippet>from itertools import ifilter
next(ifilter(my_criteria, e))
</snippet></ROW><ROW><id>16963121</id><snippet>blah = (my_function(e) for e in whatever)
next(blah) # possibly use a default value
</snippet></ROW><ROW><id>16963121</id><snippet>next</snippet></ROW><ROW><id>16963121</id><snippet>from itertools import islice
val, = islice(blah, 1)
</snippet></ROW><ROW><id>16963121</id><snippet>ValueError</snippet></ROW><ROW><id>16963264</id><snippet>from   fabric.api                                        import output

FAB_SHOW_RUNNING  = True   # Show the command that fabric runs
FAB_SHOW_STDOUT   = False  # Show the stdout of the command run
FAB_SHOW_STDERR   = False  # Show the stderr of the command run
FAB_SHOW_DEBUG    = True   # Increase logging detail for messages
FAB_SHOW_USER     = True
FAB_SHOW_STATUS   = False  # Prevent fabric from using print in some situations (at least in disconnect_all)
FAB_SHOW_WARNINGS = False  # Avoid fabric from showing messages about failed commands

output['running']  = FAB_SHOW_RUNNING
output['stdout']   = FAB_SHOW_STDOUT
output['stderr']   = FAB_SHOW_STDERR
output['debug']    = FAB_SHOW_DEBUG
output['user']     = FAB_SHOW_USER
output['status']   = FAB_SHOW_STATUS
output['warnings'] = FAB_SHOW_WARNINGS
</snippet></ROW><ROW><id>16963264</id><snippet>/bin/sh</snippet></ROW><ROW><id>16963264</id><snippet>shell=True</snippet></ROW><ROW><id>16963264</id><snippet>executable='/bin/bash'</snippet></ROW><ROW><id>16963430</id><snippet>C</snippet></ROW><ROW><id>16963430</id><snippet>int</snippet></ROW><ROW><id>16963430</id><snippet>0</snippet></ROW><ROW><id>16963430</id><snippet>2**31-1</snippet></ROW><ROW><id>16963430</id><snippet>MemoryError</snippet></ROW><ROW><id>16963430</id><snippet>xrange</snippet></ROW><ROW><id>16963430</id><snippet>&gt;&gt;&gt; random.sample(xrange(2**31 - 1), random.randrange(1, 100))
[248934843, 2102394624, 1637327281, 352636013, 2045080621, 1235828868, 951394286, 69276138, 2116665801, 312166638, 563309004, 546628308, 1890125579, 699765051, 1567057622, 656971854, 827087462, 1306546407, 1071615348, 601863879, 410052433, 1932949412, 1562548682, 1772850083, 1960078129, 742789541, 175226686, 1513744635, 512485864, 2074307325, 798261810, 1957338925, 1414849089, 1375678508, 1387543446, 1394012809, 951027358, 1169817473, 983989994, 1340435411, 823577680, 1078179464, 2051607389, 180372351, 552409811, 1830127563, 1007051104, 2112306498, 1936077584, 2133304389, 1853748484, 437846528, 636724713, 802267101, 1398481637, 15781631, 2139969958, 126055150, 1997111252, 1666405929, 1368202177, 1957578568, 997110500, 1195347356, 1595947705, 2138216956, 768776647, 128275761, 781344096, 941120866, 1195352770, 1244713418, 930603490, 2147048666, 2029878314, 2030267692, 1471665936, 1763093479, 218699995, 1140089127, 583812185, 1405032224, 851203055, 1454295991, 1105558477, 2118065369, 1864334655, 1792789380, 386976269, 1213322292, 663210178, 1402712466, 1564065247]
</snippet></ROW><ROW><id>16963430</id><snippet>xrange</snippet></ROW><ROW><id>16963430</id><snippet>range</snippet></ROW><ROW><id>16963430</id><snippet>range</snippet></ROW><ROW><id>16963430</id><snippet>random.sample</snippet></ROW><ROW><id>16963430</id><snippet>k</snippet></ROW><ROW><id>16963430</id><snippet>2**31-1</snippet></ROW><ROW><id>16963430</id><snippet>sys.maxint</snippet></ROW><ROW><id>16963430</id><snippet>xrange</snippet></ROW><ROW><id>16963430</id><snippet>int</snippet></ROW><ROW><id>16963430</id><snippet>3</snippet></ROW><ROW><id>16963430</id><snippet>range</snippet></ROW><ROW><id>16963430</id><snippet>&gt;&gt;&gt; random.sample(xrange(2**31), random.randrange(1, 100))

Traceback (most recent call last):
  File "&lt;pyshell#16&gt;", line 1, in &lt;module&gt;
    random.sample(xrange(2**31), random.randrange(1, 100))
OverflowError: Python int too large to convert to C long
</snippet></ROW><ROW><id>16963835</id><snippet>enumerate</snippet></ROW><ROW><id>16963835</id><snippet>with open('predictions2.txt') as f:
     tot_sum = 0
     for i,x in enumerate(f, 1):
         val = float(x)
         #do something with val
         tot_sum += val           #add val to tot_sum 
     print tot_sum/i              #print average

#prints -0.32322842
</snippet></ROW><ROW><id>16964006</id><snippet>float</snippet></ROW><ROW><id>16964006</id><snippet>double</snippet></ROW><ROW><id>16964006</id><snippet>numpy.float</snippet></ROW><ROW><id>16964006</id><snippet>numpy.float64</snippet></ROW><ROW><id>16964022</id><snippet> zset = set(z)
 if len(zset.intersection(x)) &gt; len(zset.intersection(y)):
     ...
</snippet></ROW><ROW><id>16964022</id><snippet>iterable = (x,y)
</snippet></ROW><ROW><id>16964022</id><snippet>def cmp_key(lst):
    itersect_size = len(zset.intersection(lst))
    return intersect_size,-len(lst)

list_with_biggest_intersection = max(iterable,key = cmp_key)
</snippet></ROW><ROW><id>16964072</id><snippet>os.path.isfile</snippet></ROW><ROW><id>16964072</id><snippet>open</snippet></ROW><ROW><id>16964072</id><snippet>In [475]: %timeit open('test_test.txt')
10000 loops, best of 3: 47.9 us per loop

In [476]: %timeit os.path.isfile('test_test.txt')
100000 loops, best of 3: 6.21 us per loop
</snippet></ROW><ROW><id>16964370</id><snippet>user_id</snippet></ROW><ROW><id>16964370</id><snippet>#outside of the run loop
number_output = 0

#in the run lop
for row in xmlload1['rows'][number_output:]:
    number_output += 1
    cell = row["cell"]
</snippet></ROW><ROW><id>16964370</id><snippet>set</snippet></ROW><ROW><id>16964370</id><snippet>my_set.update(username)
</snippet></ROW><ROW><id>16964370</id><snippet>if username in my_set:
    ...
</snippet></ROW><ROW><id>16965137</id><snippet>def target():
    self.p = sp.Popen(self.cmd, stdin=sp.PIPE, stdout=sp.PIPE, stderr=sp.STDOUT)
</snippet></ROW><ROW><id>16965151</id><snippet>except</snippet></ROW><ROW><id>16965151</id><snippet>get_by_id</snippet></ROW><ROW><id>16965151</id><snippet>int</snippet></ROW><ROW><id>16965151</id><snippet>ValueError</snippet></ROW><ROW><id>16965151</id><snippet>get_by_id</snippet></ROW><ROW><id>16965304</id><snippet>import re

text = """1,000 barrels
5 Megawatts hours (MWh)
80 Megawatt hours (MWh) (...)"""

r_unit = re.compile("\((\w+)\)")
r_value = re.compile("([\d,]+)")

for line in text.splitlines():
    unit = r_unit.search(line)
    if unit:
        unit = unit.groups()[0]
    else:
        unit = ""
    value = r_value.search(line)
    if value:
        value = value.groups()[0]
    else:
        value = ""
    print value, unit
</snippet></ROW><ROW><id>16965304</id><snippet>r = re.compile("(([\d,]+).*\(?(\w+)?\)?)")
for line, value, unit in r.findall(text):
    print value, unit
</snippet></ROW><ROW><id>16965304</id><snippet>(      &lt;- LINE GROUP
 (     &lt;- VALUE GROUP
  [    &lt;- character grouping (i.e. read char is one of the following characters)
   \d  &lt;- any digit
   ,   &lt;- a comma
  ]
  +    &lt;- one or more of the previous expression
 )
 .     &lt;- any character
 *     &lt;- zero or more of the previous expression
 \(    &lt;- a real parenthesis
 ?     &lt;- zero or one of the previous expression
 (     &lt;- UNIT GROUP
  [
   \w  &lt;- any alphabetic/in-word character
   +   &lt;- one or more of the previous expression
  ]
 )
 ?     &lt;- zero or one of the previous expression
 \)    &lt;- a real ending parenthesis
 ?     &lt;- zero or one of the previous expression
 )
)
</snippet></ROW><ROW><id>16965404</id><snippet>viewportsize</snippet></ROW><ROW><id>16965419</id><snippet>A</snippet></ROW><ROW><id>16965419</id><snippet>A = [2,3,6,8,11]
</snippet></ROW><ROW><id>16965419</id><snippet>M[i]</snippet></ROW><ROW><id>16965419</id><snippet>i</snippet></ROW><ROW><id>16965419</id><snippet>M[0] = 1</snippet></ROW><ROW><id>16965419</id><snippet>M = [1,0,0,...]
</snippet></ROW><ROW><id>16965419</id><snippet>A</snippet></ROW><ROW><id>16965419</id><snippet>Suppose a is the new item
for each j:
    if M[j] != 0:
        M_next[j+a] = M[j+a] + M[j]
</snippet></ROW><ROW><id>16965419</id><snippet>M[j]</snippet></ROW><ROW><id>16965419</id><snippet>M</snippet></ROW><ROW><id>16965419</id><snippet>A = [2,3,6,8,11]
t = sum(A)
M = [0]*(t+1)
M[0] = 1

print 'init M :',M

for a in A:
    for j in range(len(M)-1,-1,-1):
        if M[j] != 0:
            M[j+a] += M[j]
    print 'use',a,':',M
</snippet></ROW><ROW><id>16965419</id><snippet>init M : [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
use 2 : [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
use 3 : [1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
use 6 : [1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
use 8 : [1, 0, 1, 1, 0, 1, 1, 0, 2, 1, 1, 2, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
use 11 : [1, 0, 1, 1, 0, 1, 1, 0, 2, 1, 1, 3, 0, 2, 2, 0, 2, 2, 0, 3, 1, 1, 2, 0, 1, 1, 0, 1, 1, 0, 1]
</snippet></ROW><ROW><id>16965419</id><snippet>M[11] = 3</snippet></ROW><ROW><id>16965419</id><snippet>{2,3,6},{3,8},{11}</snippet></ROW><ROW><id>16965825</id><snippet>d = {k:v for k,v in locals().items() if v is not None and not k.startswith('__')}
</snippet></ROW><ROW><id>16965825</id><snippet>&gt;&gt;&gt; x = 1
&gt;&gt;&gt; y = 3
&gt;&gt;&gt; z = None
&gt;&gt;&gt; d = {k:v for k,v in locals().items() if v is not None and not k.startswith('__')}
&gt;&gt;&gt; d
{'y': 3, 'x': 1}
</snippet></ROW><ROW><id>16965927</id><snippet>float(47)/100
47.0/100
</snippet></ROW><ROW><id>16966248</id><snippet>control1</snippet></ROW><ROW><id>16966248</id><snippet>job</snippet></ROW><ROW><id>16966248</id><snippet>control2</snippet></ROW><ROW><id>16966248</id><snippet>job</snippet></ROW><ROW><id>16966248</id><snippet>control2</snippet></ROW><ROW><id>16966248</id><snippet>job.py</snippet></ROW><ROW><id>16966248</id><snippet>#!/usr/bin/env python2.7

job = 'hi'
execfile('control1', globals(), globals())
</snippet></ROW><ROW><id>16966248</id><snippet>control2</snippet></ROW><ROW><id>16966248</id><snippet>def run():
    print job
</snippet></ROW><ROW><id>16966248</id><snippet>control1</snippet></ROW><ROW><id>16966248</id><snippet>import imp, os
a = 'control2'
control2 = imp.load_source('control2', a)
control2.job = job
control2.run()
</snippet></ROW><ROW><id>16966248</id><snippet>job.py</snippet></ROW><ROW><id>16966248</id><snippet>control2</snippet></ROW><ROW><id>16966248</id><snippet>hi</snippet></ROW><ROW><id>16966402</id><snippet>task = subprocess.Popen(["python", "test2.py"], stdout=subprocess.PIPE)
print task.communicate()
</snippet></ROW><ROW><id>16966741</id><snippet>ipython qtconsole --existing kernel-0300435c-3d07-4bb6-abda-8952e663ddb7.json
</snippet></ROW><ROW><id>16966831</id><snippet>''.join(str(x) for x in strlist)
</snippet></ROW><ROW><id>16966985</id><snippet>null:</snippet></ROW><ROW><id>16967111</id><snippet>not any(search in s for s in myList)
</snippet></ROW><ROW><id>16967111</id><snippet>all(search not in s for s in myList)
</snippet></ROW><ROW><id>16967111</id><snippet>&gt;&gt;&gt; myList = ['qwer', 'tyu', 'iop12', '3456789']
&gt;&gt;&gt; not any('wer' in s for s in myList)
False
&gt;&gt;&gt; not any('123' in s for s in myList)
True
</snippet></ROW><ROW><id>16967140</id><snippet>max</snippet></ROW><ROW><id>16967140</id><snippet>min</snippet></ROW><ROW><id>16967140</id><snippet>a, b, c = 3, 1, 8

x = min(a, b, c)  # Smallest of the three
z = max(a, b, c)  # Largest of the three
y = (a + b + c) - (x + z)  # Since you have two of the three, you can solve for
                           # the third

print(a, b, c)
print(x, y, z)
</snippet></ROW><ROW><id>16967140</id><snippet>numbers = [1, 8, 9, 6, 2, 3, 1, 4, 5]
output = []

while numbers:
    smallest = min(numbers)
    index = numbers.index(smallest)
    output.append(numbers.pop(index))

print(output)
</snippet></ROW><ROW><id>16967158</id><snippet>from operator import attrgetter

print sorted(your_objects, key=attrgetter('the name of your int'))
</snippet></ROW><ROW><id>16967158</id><snippet>your_list.sort(key=attrgetter('the name of your int'))
</snippet></ROW><ROW><id>16967158</id><snippet>lambda</snippet></ROW><ROW><id>16967158</id><snippet>operator.attrgetter</snippet></ROW><ROW><id>16967158</id><snippet>your_list.sort(key=lambda L: L.your_int)
</snippet></ROW><ROW><id>16967180</id><snippet>inspect</snippet></ROW><ROW><id>16967180</id><snippet>inspect.getsourcelines()</snippet></ROW><ROW><id>16967180</id><snippet>inspect.getsourcefile()</snippet></ROW><ROW><id>16967324</id><snippet>In [6]: tweet_sample = [{'contributers': None, 'truncated': False, 'text': 'foo'}, {'contributers': None, 'truncated': True, 'text': 'bar'}]

In [7]: df = pd.DataFrame(tweet_sample)

In [8]: df
Out[8]:
  contributers text truncated
0         None  foo     False
1         None  bar      True
</snippet></ROW><ROW><id>16967324</id><snippet>json.load</snippet></ROW><ROW><id>16967324</id><snippet>import json
with open('&lt;MyFilePath&gt;\usTweets0.json', 'r') as f:
    tweet_sample = json.load(f)
</snippet></ROW><ROW><id>16967324</id><snippet>from_json</snippet></ROW><ROW><id>16967363</id><snippet>#edit_task.html
{% block content %}
&lt;form action="/edit_task/{{task.id}}" method="post"&gt;{% csrf_token %}
    {{ form.as_p }}
    &lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
{% endblock content %}
</snippet></ROW><ROW><id>16967363</id><snippet>{{task.id}}</snippet></ROW><ROW><id>16967363</id><snippet>&lt;form action="/edit_task/{{task.id}}" method="post"&gt;</snippet></ROW><ROW><id>16967363</id><snippet>{{task.id}}</snippet></ROW><ROW><id>16967363</id><snippet>edit_task/</snippet></ROW><ROW><id>16967363</id><snippet>task_id</snippet></ROW><ROW><id>16967363</id><snippet>url(r'^edit_task/(?P&lt;task_id&gt;\w+)/$', 'todo.views.edit_task')
</snippet></ROW><ROW><id>16967363</id><snippet>edit_task</snippet></ROW><ROW><id>16967363</id><snippet>def edit_task(request, id):
    task_to_edit = Task.objects.get(pk=id)
    if request.method == 'POST':
        form = TaskForm(request.POST, instance=task_to_edit)
        form.save()
        if form.is_valid():
            task_to_edit = form.save()
        return HttpResponseRedirect('/')
else:
    form = TaskForm(instance=task_to_edit)
# you don't pass any task variable to the view so the form view
# won't know which task to edit, you'll have to handle that
return render(request, 'todo/edit_task.html', {'form': form, 'task':task_to_edit})
</snippet></ROW><ROW><id>16967363</id><snippet>task_to_edit</snippet></ROW><ROW><id>16967363</id><snippet>GET</snippet></ROW><ROW><id>16967363</id><snippet>http://www.example.com/edit_task/2</snippet></ROW><ROW><id>16967363</id><snippet>http://www.example.com/edit_task</snippet></ROW><ROW><id>16967466</id><snippet>In [11]: year_hour_means = df1.groupby(lambda x: (x.year, x.hour)).mean()

In [12]: year_hour_means
Out[12]:
           Value
(2010, 0)     60
(2010, 1)     50
(2010, 2)     52
(2010, 3)     49
</snippet></ROW><ROW><id>16967466</id><snippet>In [13]: year_hour_means.index = pd.MultiIndex.from_tuples(year_hour_means.index,
                                                           names=['year', 'hour'])

In [14]: year_hour_means
Out[14]:
           Value
year hour
2010 0        60
     1        50
     2        52
     3        49
</snippet></ROW><ROW><id>16967466</id><snippet>set_index</snippet></ROW><ROW><id>16967466</id><snippet>df1 = df.set_index('Date/Time')
</snippet></ROW><ROW><id>16967622</id><snippet>url: "/DoubleMumbers",
</snippet></ROW><ROW><id>16967622</id><snippet>"/DoubleNumbers"</snippet></ROW><ROW><id>16968039</id><snippet>xrange(len(data))</snippet></ROW><ROW><id>16968039</id><snippet>data</snippet></ROW><ROW><id>16968039</id><snippet>data.items()</snippet></ROW><ROW><id>16968039</id><snippet>values()</snippet></ROW><ROW><id>16968039</id><snippet>for elem in data:
    for val in elem.itervalues():
        for item in val['data']:
</snippet></ROW><ROW><id>16968408</id><snippet>reindex</snippet></ROW><ROW><id>16968408</id><snippet>In [11]: b.reindex(a.index, method='ffill')
Out[11]: 
               0     1     2     3
2012-03-16  -926  -625   736   457
2012-03-19 -1024   742   732 -1020
2012-03-20 -1024   742   732 -1020
2012-03-21  1090 -1163  1652   -94
</snippet></ROW><ROW><id>16968491</id><snippet>arr['retlog'] = log(arr['close'].astype('float64')/arr['close'].astype('float64').shift(1))
</snippet></ROW><ROW><id>16968491</id><snippet>In [15]: np.log(Series([1,2,3,4], dtype='object'))
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-15-25deca6462b7&gt; in &lt;module&gt;()
----&gt; 1 np.log(Series([1,2,3,4], dtype='object'))

AttributeError: log

In [16]: np.log(Series([1,2,3,4], dtype='float64'))
Out[16]: 
0    0.000000
1    0.693147
2    1.098612
3    1.386294
dtype: float64
</snippet></ROW><ROW><id>16968491</id><snippet>math.log</snippet></ROW><ROW><id>16968716</id><snippet># example
json.dump([1,2,3], fp)
json.dump({"name": "abc"}, fp)
json.dump(33, fp)
# content of file
# [1, 2, 3]{"name": "abc"}33
</snippet></ROW><ROW><id>16968716</id><snippet>fp.write(json.dumps(review_object) + "\n")
</snippet></ROW><ROW><id>16968766</id><snippet>from Tkinter import *
import ttk

root = Tk()
root.minsize(500,300)
root.maxsize(550,310)

class MyListbox:
    def __init__(self, parent, title):
        self.parent = parent
        self.parent.title(title)
        self.parent.protocol("WM_DELETE_WINDOW", self.closes)

        self.myData= (
            ["1", "Jhon Doe", "Madrid", "0341-672541", "6 SD"],
            ["2", "Mike Grant", "Barcelona", "0341-435271", "7 SD"],
            ["3", "Steven Mc Fly", "Rome", "0341-123456", "8 SD"],
            ["4", "Joao Pontes", "Rio", "0341-234567", "9 SD"],
            ["5", "Kenji S.", "Tokyo", "0341-213212", "10 SD"])

        self.establishment()

    def combobox_handler(self, event):
        current = self.combobox.current()
        self.entNumber.delete(0, END)
        self.entName.delete(0, END)
        self.entCity.delete(0, END)
        self.entTel.delete(0, END)
        self.entAddress.delete(0, END)

        self.entNumber.insert(END, self.myData[current][0])
        self.entName.insert(END, self.myData[current][1])
        self.entCity.insert(END, self.myData[current][2])
        self.entTel.insert(END, self.myData[current][3])
        self.entAddress.insert(END, self.myData[current][4])

    def establishment(self):
        mainFrame = Frame(self.parent)
        mainFrame.pack(fill=BOTH, expand=YES)

        self.statusBar = Label(mainFrame, text="App",relief=SUNKEN, bd=1)
        self.statusBar.pack(side=BOTTOM, fill=X)

        fr_left = Frame(mainFrame, bd=10)
        fr_left.pack(fill=BOTH, expand=YES, side=LEFT)

        names = [person[1] for person in self.myData]
        self.combobox = ttk.Combobox(fr_left, values=names)
        self.combobox.bind('&lt;&lt;ComboboxSelected&gt;&gt;', self.combobox_handler)
        self.combobox.pack()

        fr_right = Frame(mainFrame, bd=10)
        fr_right.pack(fill=BOTH, expand=YES, side=RIGHT)

        fr_up = Frame(fr_right)
        fr_up.pack(side=TOP, expand=YES)

        Label(fr_up, text='List Number').grid(row=0, column=0, sticky=W)
        self.entNumber = Entry(fr_up)
        self.entNumber.grid(row=0, column=1)

        Label(fr_up, text='Name').grid(row=1, column=0, sticky=W)
        self.entName = Entry(fr_up)
        self.entName.grid(row=1, column=1)

        Label(fr_up, text='City').grid(row=2, column=0, sticky=W)
        self.entCity = Entry(fr_up)
        self.entCity.grid(row=2, column=1)

        Label(fr_up, text='No. Tel').grid(row=3, column=0, sticky=W)
        self.entTel = Entry(fr_up)
        self.entTel.grid(row=3, column=1)

        Label(fr_up, text='Address').grid(row=4, column=0, sticky=W)
        self.entAddress = Entry(fr_up)
        self.entAddress.grid(row=4, column=1)

    def closes(self, event=None):
        self.parent.destroy()

if __name__ == '__main__':
    app = MyListbox(root, "Main Window")
    root.mainloop()
</snippet></ROW><ROW><id>16968834</id><snippet>E = len(Q)
</snippet></ROW><ROW><id>16968834</id><snippet>E</snippet></ROW><ROW><id>16968834</id><snippet>R = Q[E[2]]
</snippet></ROW><ROW><id>16968834</id><snippet>integer</snippet></ROW><ROW><id>16968834</id><snippet>E</snippet></ROW><ROW><id>16968834</id><snippet>E</snippet></ROW><ROW><id>16968834</id><snippet>TypeError: 'int' object is not subscriptable</snippet></ROW><ROW><id>16968834</id><snippet>E = = len(Q)</snippet></ROW><ROW><id>16969030</id><snippet>lambda</snippet></ROW><ROW><id>16969030</id><snippet>def filter_plus_print(row):
    result = not row[0].startswith('#') and str(row[0]).isdigit()
    print("Keeping:" if result else "Removing:", row)
    return result
</snippet></ROW><ROW><id>16969030</id><snippet>affy_reader = csv.DictReader(filter(filter_plus_print, file_pointer), 
                             delimiter='\t',
                             fieldnames=affy_column_headers)
</snippet></ROW><ROW><id>16969186</id><snippet>&lt;FORM action="{{ upload_file_url }}"
      enctype="multipart/form-data"
      method="POST"&gt;
  Description: &lt;INPUT type="text" name="description" value="upload test"&gt;&lt;BR&gt;
  File to upload: &lt;INPUT type="file" name="filename"&gt;&lt;BR&gt;
  &lt;INPUT type="submit" value="Send"&gt;
&lt;/FORM&gt;
</snippet></ROW><ROW><id>16969186</id><snippet>multipart/form-data</snippet></ROW><ROW><id>16969186</id><snippet>requests</snippet></ROW><ROW><id>16969186</id><snippet>import requests

response = requests.post(upload_file_url,
                         files={'filename': open(uploadfile,'rb'),
                                'description': 'upload test'})
print response.content
</snippet></ROW><ROW><id>16969186</id><snippet>urllib2</snippet></ROW><ROW><id>16969186</id><snippet>poster</snippet></ROW><ROW><id>16969186</id><snippet>import urllib2

import poster.encode
import poster.streaminghttp

opener = poster.streaminghttp.register_openers()

params = {'filename': open(uploadfile,'rb'), 'description': 'upload test'}
datagen, headers = poster.encode.multipart_encode(params)
response = opener.open(urllib2.Request(upload_file_url, datagen, headers))
print response.read()
</snippet></ROW><ROW><id>16969448</id><snippet>wordlist = words.split()
for i in xrange(0, len(wordlist), 4):
    print ' '.join(wordlist[i:i+4])
</snippet></ROW><ROW><id>16969448</id><snippet>from itertools import groupby, izip
words = (''.join(g) for k, g in groupby(words, ' '.__ne__) if k)
for g in izip(*[iter(words)] * 4):
    print ' '.join(g)
</snippet></ROW><ROW><id>16969570</id><snippet>col = tclass.end_time + case([(tclass.end_time&lt;tclass.start_time, 86400000)], else_=0 )
q = session.query(col).order_by(col)
print q
</snippet></ROW><ROW><id>16969570</id><snippet>class TName(Base):
    end_time = Column(Integer)
    start_time = Column(Integer)
    calc_column = end_time + case([(end_time&lt;start_time, 86400000)], else_=0 )

q2 = session.query(TName.calc_column).order_by(TName.calc_column)
</snippet></ROW><ROW><id>16969614</id><snippet>conn = pypyodbc.connect("DRIVER={SQL Server};server='sqldev\\master',Database='risk',TrustedConnection=yes")
cur = conn.cursor()
</snippet></ROW><ROW><id>16969764</id><snippet>In [11]: int((100000000000000000000000000000000000**2) ** 0.5)
Out[11]: 99999999999999996863366107917975552L

In [12]: int(math.sqrt(100000000000000000000000000000000000**2))
Out[12]: 99999999999999996863366107917975552L
</snippet></ROW><ROW><id>16969764</id><snippet>0.000000001</snippet></ROW><ROW><id>16969764</id><snippet>In [21]: from decimal import Decimal

In [22]: x = Decimal('100000000000000000000000000000000000')

In [23]: (x ** 2).sqrt() == x
Out[23]: True
</snippet></ROW><ROW><id>16969764</id><snippet>10**999999999</snippet></ROW><ROW><id>16970147</id><snippet>f.write("\t".join(["\ningredient: ", ingredient, quant, unit]))
</snippet></ROW><ROW><id>16970147</id><snippet>quant</snippet></ROW><ROW><id>16970147</id><snippet>lines = file2.readlines()
for line in lines[1:]: # To skip the first empty line in the file
    line = line.split("\t")
    line[2] = str(float(line[2]) * int(serve))
    file3.write("\t".join(line))
</snippet></ROW><ROW><id>16970212</id><snippet>request.user</snippet></ROW><ROW><id>16970212</id><snippet>if not request.user == user_list.user:
    response = http.HttpResponse()
    response.status_code = 403
    return response
</snippet></ROW><ROW><id>16970438</id><snippet>NS</snippet></ROW><ROW><id>16970470</id><snippet>pygame.event.get()</snippet></ROW><ROW><id>16970470</id><snippet>Attack()</snippet></ROW><ROW><id>16970470</id><snippet>pygame.event.get()</snippet></ROW><ROW><id>16970470</id><snippet>pygame.event.get()</snippet></ROW><ROW><id>16970470</id><snippet>pygame.event.get()</snippet></ROW><ROW><id>16970470</id><snippet>Attack()</snippet></ROW><ROW><id>16970470</id><snippet>while True:
    for event in pygame.event.get():
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN:
                if event.key == K_SPACE:
                    var.Attack()
</snippet></ROW><ROW><id>16970470</id><snippet>BLUE</snippet></ROW><ROW><id>16970470</id><snippet>pygame.draw.circle(surface, BLUE, amntTuple, 20, 300)</snippet></ROW><ROW><id>16970470</id><snippet>BLUE</snippet></ROW><ROW><id>16970470</id><snippet>pygame.Color(0,0,255)</snippet></ROW><ROW><id>16970470</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>16970470</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>16970470</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>16970470</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>16970470</id><snippet>pygame.event.get()</snippet></ROW><ROW><id>16970470</id><snippet>pygame.display.update()</snippet></ROW><ROW><id>16970470</id><snippet>pygame.draw.circle.</snippet></ROW><ROW><id>16970470</id><snippet>pygame.draw.circle(surface, pygame.Color(0,0,255), amntTuple, 20, 2)</snippet></ROW><ROW><id>16970470</id><snippet>man = pygame.image.load("/images/man.png")
surface.blit (man, (0,0))
</snippet></ROW><ROW><id>16970470</id><snippet>self.space</snippet></ROW><ROW><id>16970470</id><snippet>self.spaceRect</snippet></ROW><ROW><id>16970470</id><snippet>import math
import pygame, sys, time 
from pygame.locals import *

pygame.init()
WINDOW_WIDTH = 1000
WINDOW_HEIGHT = 600
surface = pygame.display.set_mode((WINDOW_WIDTH, WINDOW_HEIGHT),0,32)
pygame.display.set_caption('follow mouse')
surface.fill((255,255,255))

class Hero():
    def Attack(self):
        surface.fill ((255,255,255))
        amntTuple = pygame.mouse.get_pos()
        #Use pygame.Color to make a color.
        #The last parameter is linewidth, and can be set to 0 for filled circles.
        pygame.draw.circle(surface, pygame.Color(0,0,255), amntTuple, 20, 2)
        #The blit was deleted because it did nothing and the broke code.

var = Hero()
while True:
    for event in pygame.event.get():
            #Add a quit event so you can close your game normally.
            if event.type == QUIT:
                pygame.quit()
                sys.exit()
            if event.type == KEYDOWN:
                if event.key == K_SPACE:
                    var.Attack()

    #Update once at the end of each gameloop.
    pygame.display.update()
</snippet></ROW><ROW><id>16970630</id><snippet>source = """This is a sentence... This is a second sentence.
         Is this a sentence? Sure it is!!!"""

stop = ('...', '.', '?', '!', '!!!')

i = 0
M = max(len(s) for s in stop)
L = len(source)

while i &lt;= L:
    m = M
    while m &gt; 0:
        chunk = source[i:i + m]
        if chunk in stop:
            print("end of sentence with: %s" % chunk)
            break
        m -= 1
    else:
        m = 1
    i += m
</snippet></ROW><ROW><id>16970630</id><snippet>end of sentence with: ...
end of sentence with: .
end of sentence with: ?
end of sentence with: !!!
</snippet></ROW><ROW><id>16970630</id><snippet>def read(source):
    had_blank = False
    for char in source:
        if char == ' ':
            had_blank = True
        else:
            if had_blank and not char in '.?!':
                yield ' '
                yield char
                had_blank = False
            else:
                yield char
</snippet></ROW><ROW><id>16970630</id><snippet>&gt;&gt;&gt; source = "Sentence1  .. . word1    word2.    . .  word other_word  . .   ."
&gt;&gt;&gt; ''.join(c for c in read(source))
'Sentence1... word1 word2... word other_word...'
</snippet></ROW><ROW><id>16970717</id><snippet>resource</snippet></ROW><ROW><id>16970902</id><snippet>exposed</snippet></ROW><ROW><id>16970902</id><snippet>expose</snippet></ROW><ROW><id>16970902</id><snippet>connect(...)</snippet></ROW><ROW><id>16970902</id><snippet>exposed</snippet></ROW><ROW><id>16970940</id><snippet>bufsize=0</snippet></ROW><ROW><id>16970940</id><snippet>import sys
from functools import partial
from subprocess import Popen, PIPE

p = Popen([sys.executable, "test.py"], stdout=PIPE, bufsize=0)
for b in iter(partial(p.stdout.read, 1), b""):
    print b # it should print as soon as `sys.stdout.flush()` is called
            # in the test.py
p.stdout.close()
p.wait()
</snippet></ROW><ROW><id>16970940</id><snippet>pexpect</snippet></ROW><ROW><id>16970940</id><snippet>pty</snippet></ROW><ROW><id>16970940</id><snippet>unbuffer</snippet></ROW><ROW><id>16970940</id><snippet>stdbuf</snippet></ROW><ROW><id>16970940</id><snippet>script</snippet></ROW><ROW><id>16970940</id><snippet>-u</snippet></ROW><ROW><id>16971097</id><snippet>$'\t'</snippet></ROW><ROW><id>16971097</id><snippet>subprocess.Popen(["sort", "-t\t", "-k1,2", "input", "-o", "output"]).wait()
</snippet></ROW><ROW><id>16971170</id><snippet>import glob
import os
def simple(input)
    os.chdir(input)
    for file in glob.glob("*.fa"):
        with open(file, 'r+') as f:
            print f.readlines() #or do whatever
</snippet></ROW><ROW><id>16971379</id><snippet>class FooSpider(BaseSpider):
    def __init__(self, *args, **kwargs):
        super(FooSpider, self).__init__(*args, **kwargs)
        dispatcher.connect(self.dont_close_me, signals.spider_idle)

    def dont_close_me(self, spider):
        if spider != self:
            return

        self.crawler.engine.crawl(self.create_request(), spider)

        raise DontCloseSpider("..I prefer live spiders.")
</snippet></ROW><ROW><id>16971558</id><snippet>(' '.join(value) for key, value in simpleDict.items() if 'DDL' in key)
</snippet></ROW><ROW><id>16971558</id><snippet>&gt;&gt;&gt; simpleDict= {'DDL_TABLE1':['create table bla', ' columns bla bla'], 'DML_TABLE1': ['insert into bla', ' values bla']}
&gt;&gt;&gt; list(' '.join(value) for key, value in simpleDict.items() if 'DDL' in key)
['create table bla  columns bla bla']
</snippet></ROW><ROW><id>16971558</id><snippet>&gt;&gt;&gt; [value for key, value in simpleDict.items() if 'DDL' in key]
[['create table bla', ' columns bla bla']]
</snippet></ROW><ROW><id>16971558</id><snippet>&gt;&gt;&gt; ' '.join([value for key, value in simpleDict.items() if 'DDL' in key])
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: sequence item 0: expected string, list found
</snippet></ROW><ROW><id>16971558</id><snippet>&gt;&gt;&gt; ' '.join([' '.join(value) for key, value in simpleDict.items() if 'DDL' in key])
</snippet></ROW><ROW><id>16971558</id><snippet>&gt;&gt;&gt; [' '.join(value) for key, value in simpleDict.items() if 'DDL' in key][0]
'create table bla  columns bla bla'
</snippet></ROW><ROW><id>16971558</id><snippet>for s in [' '.join(value) for key, value in simpleDict.items() if 'DDL' in key]:
   # s multiple times
</snippet></ROW><ROW><id>16971782</id><snippet>find_elements_by_partial_link_text</snippet></ROW><ROW><id>16971782</id><snippet>elements</snippet></ROW><ROW><id>16971782</id><snippet>element</snippet></ROW><ROW><id>16971782</id><snippet>my_elem = driver.find_elements_by_partial_link_text('sometext')[-1]
</snippet></ROW><ROW><id>16971782</id><snippet>elems = driver.find_elements_by_partial_link_text('sometext')
if elems:
    my_elem = elems[-1]
</snippet></ROW><ROW><id>16971876</id><snippet>df.save(file_name)
</snippet></ROW><ROW><id>16971931</id><snippet>Cell</snippet></ROW><ROW><id>16971931</id><snippet>value</snippet></ROW><ROW><id>16971931</id><snippet># i.e., 
cmp(dates[1].value, dates[2].value)
</snippet></ROW><ROW><id>16971945</id><snippet>tweepy</snippet></ROW><ROW><id>16971945</id><snippet>tweepy</snippet></ROW><ROW><id>16971945</id><snippet>tweepy</snippet></ROW><ROW><id>16971945</id><snippet>git clone https://github.com/tweepy/tweepy.git
cd tweepy
python setup.py install
</snippet></ROW><ROW><id>16972326</id><snippet>ElementTree</snippet></ROW><ROW><id>16972326</id><snippet>numpy.genfromtxt()</snippet></ROW><ROW><id>16972326</id><snippet>from xml.etree import ElementTree as ET

tree = ET.parse('yourxmlfilename.xml')
species = tree.find(".//species[@name='MyHeterotrophEPS']")
names = species.attrib['header']
array = numpy.genfromtxt((line.rstrip(';') for line in species.text.splitlines()), 
    delimiter=',', names=names)
</snippet></ROW><ROW><id>16972326</id><snippet>str.splitlines()</snippet></ROW><ROW><id>16972326</id><snippet>.genfromtxt()</snippet></ROW><ROW><id>16972326</id><snippet>;</snippet></ROW><ROW><id>16972326</id><snippet>.</snippet></ROW><ROW><id>16972326</id><snippet>array([ (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 77.0645361927206, -0.1001871531330136, -0.0013358287084401814, 4.523853439106942, 234.14575280979898, 123.92820420047076, 0.0, 0.6259920275663835),
       (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 108.5705297969604, -0.1411462759900182, -0.001881950346533576, 1.0429122163754276, 144.1066875513379, 72.24884428367467, 0.0, 0.7017581019907897)], 
      dtype=[('family', '&lt;f8'), ('genealogy', '&lt;f8'), ('generation', '&lt;f8'), ('birthday', '&lt;f8'), ('biomass', '&lt;f8'), ('inert', '&lt;f8'), ('capsule', '&lt;f8'), ('growthRate', '&lt;f8'), ('volumeRate', '&lt;f8'), ('locationX', '&lt;f8'), ('locationY', '&lt;f8'), ('locationZ', '&lt;f8'), ('radius', '&lt;f8'), ('totalRadius', '&lt;f8')])
</snippet></ROW><ROW><id>16972367</id><snippet>itertools</snippet></ROW><ROW><id>16972367</id><snippet>import itertools

perms = itertools.permutations([1,2,3])

for perm in perms:
    print perm

&gt;&gt;&gt;(1, 2, 3)
&gt;&gt;&gt;(1, 3, 2)
&gt;&gt;&gt;(2, 1, 3)
&gt;&gt;&gt;(2, 3, 1)
&gt;&gt;&gt;(3, 1, 2)
&gt;&gt;&gt;(3, 2, 1)
</snippet></ROW><ROW><id>16972466</id><snippet>scripts/__init__.py</snippet></ROW><ROW><id>16972466</id><snippet>__all__</snippet></ROW><ROW><id>16972466</id><snippet>from domains import topspin, tiles, hanoi, grid
</snippet></ROW><ROW><id>16972466</id><snippet>from scripts import *
</snippet></ROW><ROW><id>16972466</id><snippet>from scripts import topspin, tiles, hanoi, grid, filepaths, Run
</snippet></ROW><ROW><id>16972466</id><snippet>from scripts import *
</snippet></ROW><ROW><id>16972466</id><snippet>hanoi</snippet></ROW><ROW><id>16972466</id><snippet>*</snippet></ROW><ROW><id>16972466</id><snippet>scripts</snippet></ROW><ROW><id>16972519</id><snippet>&gt;&gt;&gt; True != 2 in [2,3,5]
True
&gt;&gt;&gt; (True != 2) in [2,3,5]
False
&gt;&gt;&gt; True != (2 in [2,3,5])
False
</snippet></ROW><ROW><id>16972519</id><snippet>&gt;&gt;&gt; ast.dump(ast.parse("True != 2 in [2,3,5]"))
"Module(body=[Expr(value=
Compare(left=Name(id='True', ctx=Load()), ops=[NotEq(), In()], comparators=[Num(n=2), List(elts=[Num(n=2), Num(n=3), Num(n=5)], ctx=Load())])
)])"
</snippet></ROW><ROW><id>16972519</id><snippet>&gt;&gt;&gt; ast.dump(ast.parse("1 &lt; 2 &lt;= 3"))
'Module(body=[Expr(value=
Compare(left=Num(n=1), ops=[Lt(), LtE()], comparators=[Num(n=2), Num(n=3)])
)])'
</snippet></ROW><ROW><id>16972519</id><snippet>True != 2 in [2,3,5]</snippet></ROW><ROW><id>16972519</id><snippet>1 &lt; 2 &lt;= 3</snippet></ROW><ROW><id>16972519</id><snippet>litheor(l) != l in sieve(100)
</snippet></ROW><ROW><id>16972519</id><snippet>litheor(l) != l and l in sieve(100)
</snippet></ROW><ROW><id>16972519</id><snippet>True</snippet></ROW><ROW><id>16972554</id><snippet>cat(paste(system("./f.py", intern=TRUE), collapse=""))
</snippet></ROW><ROW><id>16972587</id><snippet>bin/__init__.py</snippet></ROW><ROW><id>16972587</id><snippet>bin</snippet></ROW><ROW><id>16972587</id><snippet>from bin import functions
</snippet></ROW><ROW><id>16972587</id><snippet>from bin.functions import *</snippet></ROW><ROW><id>16972587</id><snippet>__init__.py</snippet></ROW><ROW><id>16972587</id><snippet># __init__.py
__all__ = ["fun1", "fun2"]
# doing import * will load those 2
</snippet></ROW><ROW><id>16972612</id><snippet>dtype</snippet></ROW><ROW><id>16972612</id><snippet>ndarray</snippet></ROW><ROW><id>16972612</id><snippet>nbytes</snippet></ROW><ROW><id>16972612</id><snippet>print np.dtype(float).itemsize
print np.dtype(np.float32).itemsize
print np.dtype('|S10').itemsize
</snippet></ROW><ROW><id>16972612</id><snippet>itemsize</snippet></ROW><ROW><id>16972612</id><snippet>nbytes</snippet></ROW><ROW><id>16972612</id><snippet>nbytes</snippet></ROW><ROW><id>16972612</id><snippet>x.itemsize * x.size</snippet></ROW><ROW><id>16972612</id><snippet>In [16]: print np.arange(100).itemsize
8

In [17]: print np.arange(100).nbytes
800
</snippet></ROW><ROW><id>16972621</id><snippet>import math

def five_digits(number):
    ndigits = int(math.log10(number))+1
    try:
        return number//int(10**(ndigits-5))
    except ZeroDivisionError:
        return number

print five_digits(10000000)
print five_digits(12345678)
print five_digits(12345)
print five_digits(1234)  #don't know what you want to do with this one...
</snippet></ROW><ROW><id>16972718</id><snippet>nth</snippet></ROW><ROW><id>16972718</id><snippet>In [15]: group.nth(9)
Out[15]: 
                A         B         C         D
2012 1   0.259695  0.670270  0.467452  0.796057
     2   0.744701  0.633857  0.530602  0.978068
     3   0.901194  0.684747  0.091563  0.582004
     4   0.728239  0.421065  0.044452  0.750780
     5   0.792513  0.016461  0.646832  0.858187
     6   0.662756  0.753480  0.030328  0.105000
     7   0.630161  0.473097  0.504618  0.156850
     8   0.143587  0.955368  0.939281  0.632951
     9   0.115629  0.310003  0.170585  0.166392
     10  0.458202  0.293087  0.171136  0.106911
     11  0.098920  0.275812  0.057490  0.683633
     12  0.601598  0.663051  0.094602  0.500480
</snippet></ROW><ROW><id>16972718</id><snippet>('A', 1)</snippet></ROW><ROW><id>16972718</id><snippet>df1.unstack().squeeze()</snippet></ROW><ROW><id>16972718</id><snippet>squeeze</snippet></ROW><ROW><id>16972842</id><snippet>save</snippet></ROW><ROW><id>16972842</id><snippet>put</snippet></ROW><ROW><id>16972842</id><snippet>save = put
</snippet></ROW><ROW><id>16972842</id><snippet>save</snippet></ROW><ROW><id>16972868</id><snippet>ImportError: dynamic module does not define init function (initsetflags)
</snippet></ROW><ROW><id>16972868</id><snippet>PyMODINIT_FUNC init_setflags(void)
</snippet></ROW><ROW><id>16972868</id><snippet>init_setflags</snippet></ROW><ROW><id>16972868</id><snippet>initsetflags</snippet></ROW><ROW><id>16972868</id><snippet>initname()</snippet></ROW><ROW><id>16972868</id><snippet>name</snippet></ROW><ROW><id>16972868</id><snippet>init</snippet></ROW><ROW><id>16972868</id><snippet>init_foo</snippet></ROW><ROW><id>16972868</id><snippet>_foo.so</snippet></ROW><ROW><id>16972868</id><snippet>foo.py</snippet></ROW><ROW><id>16973084</id><snippet>max()</snippet></ROW><ROW><id>16973084</id><snippet>key</snippet></ROW><ROW><id>16973084</id><snippet>%c</snippet></ROW><ROW><id>16973084</id><snippet>a</snippet></ROW><ROW><id>16973084</id><snippet>b</snippet></ROW><ROW><id>16973084</id><snippet>b</snippet></ROW><ROW><id>16973084</id><snippet>&gt;&gt;&gt; max({'a': 100, 'b': 0, '%c': 50})
'b'
&gt;&gt;&gt; min({'a': 100, 'b': 0, '%c': 50})
'%c'
</snippet></ROW><ROW><id>16973084</id><snippet>max(mdict, key=mdict.get)
</snippet></ROW><ROW><id>16973084</id><snippet>&gt;&gt;&gt; mdict = {'a' : 1, 'b' : 2, '%c' : 4}
&gt;&gt;&gt; max(mdict, key=mdict.get)
'%c'
</snippet></ROW><ROW><id>16973086</id><snippet>@decorate
def my_function(*args):
    pass
</snippet></ROW><ROW><id>16973086</id><snippet>my_function = decorate(my_function)
</snippet></ROW><ROW><id>16973086</id><snippet>wrapped_function</snippet></ROW><ROW><id>16973086</id><snippet>my_function</snippet></ROW><ROW><id>16973086</id><snippet>my_function("a")
</snippet></ROW><ROW><id>16973086</id><snippet>wrapped_function("a")
</snippet></ROW><ROW><id>16973086</id><snippet>wrapped_function</snippet></ROW><ROW><id>16973086</id><snippet>__name__</snippet></ROW><ROW><id>16973086</id><snippet>&gt;&gt;&gt; my_function.__name__
'wrapped_function'
</snippet></ROW><ROW><id>16973086</id><snippet>__name__</snippet></ROW><ROW><id>16973086</id><snippet>my_function.</snippet></ROW><ROW><id>16973168</id><snippet>os.getpid()</snippet></ROW><ROW><id>16973168</id><snippet>threading.RLock</snippet></ROW><ROW><id>16973168</id><snippet>logging</snippet></ROW><ROW><id>16973168</id><snippet>multiprocessing.RLock</snippet></ROW><ROW><id>16973168</id><snippet>createLock</snippet></ROW><ROW><id>16973168</id><snippet>acquire</snippet></ROW><ROW><id>16973168</id><snippet>release</snippet></ROW><ROW><id>16973168</id><snippet>class CrossProcessFileHandler(logging.FileHandler):
    def createLock(self):
        self.lock = multiprocessing.RLock()
    def acquire(self):
        self.lock.acquire()
    def release(self):
        self.lock.release()
</snippet></ROW><ROW><id>16973168</id><snippet>FileHandler</snippet></ROW><ROW><id>16973168</id><snippet>gunicorn</snippet></ROW><ROW><id>16973168</id><snippet>FileHandler</snippet></ROW><ROW><id>16973168</id><snippet>acquire</snippet></ROW><ROW><id>16973168</id><snippet>release</snippet></ROW><ROW><id>16973168</id><snippet>if self.lock:
    self.lock.acquire()
</snippet></ROW><ROW><id>16973168</id><snippet>createLock</snippet></ROW><ROW><id>16973452</id><snippet>'\\'</snippet></ROW><ROW><id>16973452</id><snippet>'\n'</snippet></ROW><ROW><id>16973452</id><snippet>'\s'</snippet></ROW><ROW><id>16973452</id><snippet>'s'</snippet></ROW><ROW><id>16973452</id><snippet>'\\\n'</snippet></ROW><ROW><id>16973452</id><snippet>'\\s'</snippet></ROW><ROW><id>16973452</id><snippet>"abc\\sdef"</snippet></ROW><ROW><id>16973452</id><snippet>r"abc\sdef"</snippet></ROW><ROW><id>16973452</id><snippet>"abc\sdef"</snippet></ROW><ROW><id>16973510</id><snippet>void</snippet></ROW><ROW><id>16973510</id><snippet>a = np.array([[1, 1, 1, 0, 0, 0],
              [0, 1, 1, 1, 0, 0],
              [0, 1, 1, 1, 0, 0],
              [1, 1, 1, 0, 0, 0],
              [1, 1, 1, 1, 1, 0]])

b = np.ascontiguousarray(a).view(np.dtype((np.void, a.dtype.itemsize * a.shape[1])))
_, idx = np.unique(b, return_index=True)

unique_a = a[idx]

&gt;&gt;&gt; unique_a
array([[0, 1, 1, 1, 0, 0],
       [1, 1, 1, 0, 0, 0],
       [1, 1, 1, 1, 1, 0]])
</snippet></ROW><ROW><id>16973510</id><snippet>np.ascontiguousarray</snippet></ROW><ROW><id>16973510</id><snippet>unique_a = np.unique(b).view(a.dtype).reshape(-1, a.shape[1])
</snippet></ROW><ROW><id>16973510</id><snippet>a = np.random.randint(2, size=(10000, 6))

%timeit np.unique(a.view(np.dtype((np.void, a.dtype.itemsize*a.shape[1])))).view(a.dtype).reshape(-1, a.shape[1])
100 loops, best of 3: 3.17 ms per loop

%timeit ind = np.lexsort(a.T); a[np.concatenate(([True],np.any(a[ind[1:]]!=a[ind[:-1]],axis=1)))]
100 loops, best of 3: 5.93 ms per loop

a = np.random.randint(2, size=(10000, 100))

%timeit np.unique(a.view(np.dtype((np.void, a.dtype.itemsize*a.shape[1])))).view(a.dtype).reshape(-1, a.shape[1])
10 loops, best of 3: 29.9 ms per loop

%timeit ind = np.lexsort(a.T); a[np.concatenate(([True],np.any(a[ind[1:]]!=a[ind[:-1]],axis=1)))]
10 loops, best of 3: 116 ms per loop
</snippet></ROW><ROW><id>16973545</id><snippet>.capitalize()</snippet></ROW><ROW><id>16973545</id><snippet>&gt;&gt;&gt; 'this is a sentence.'.capitalize()
'This is a sentence.'
</snippet></ROW><ROW><id>16973545</id><snippet>&gt;&gt;&gt; 'this is a sentence. this is another.'.capitalize()
'This is a sentence. this is another.'
</snippet></ROW><ROW><id>16973545</id><snippet>&gt;&gt;&gt; ' test'.capitalize()
' test'
&gt;&gt;&gt; 'test'.capitalize()
'Test'
</snippet></ROW><ROW><id>16973545</id><snippet>&gt;&gt;&gt; '. '.join([s.strip().capitalize() for s in 'this is a sentence. this is another.'.split('.')]).strip()
'This is a sentence. This is another.'
</snippet></ROW><ROW><id>16973545</id><snippet>import re

def capitalizer(match):
    return match.group(0).upper()

sentence = 'this is a sentence. isn\'t it a nice sentence? i think it is'
print re.sub(r'(?:^\s*|[.?]\s+)(\w)', capitalizer, sentence)
</snippet></ROW><ROW><id>16973545</id><snippet>This is a sentence. Isn't it a nice sentence? I think it is
</snippet></ROW><ROW><id>16973697</id><snippet>def CreateSubNode(top, *args, **kwargs):
    root = e.Element(top)
    for key, val in kwargs.items():
        if type(val) == dict:
            c = CreateSubNode(key, **val)
        else:
            c = e.Element(key)
            c.text = str(val)
        root.append(c)
    return root
</snippet></ROW><ROW><id>16973713</id><snippet>enumerate()</snippet></ROW><ROW><id>16973713</id><snippet>for count, (key, value) in enumerate(my_dict.iteritems(), 1):
    print key, value, count
</snippet></ROW><ROW><id>16973713</id><snippet>enumerate()</snippet></ROW><ROW><id>16973713</id><snippet>enumerate()</snippet></ROW><ROW><id>16973713</id><snippet>1</snippet></ROW><ROW><id>16973713</id><snippet>&gt;&gt;&gt; somedict = {'foo': 'bar', 42: 'Life, the Universe and Everything', 'monty': 'python'}
&gt;&gt;&gt; for count, (key, value) in enumerate(somedict.iteritems(), 1):
...     print key, value, count
... 
42 Life, the Universe and Everything 1
foo bar 2
monty python 3
</snippet></ROW><ROW><id>16973799</id><snippet>root</snippet></ROW><ROW><id>16973799</id><snippet>tkgen.gengui.TkJson</snippet></ROW><ROW><id>16973799</id><snippet>root.button("name1", callback)
root.button("name2", callback)
...
</snippet></ROW><ROW><id>16973799</id><snippet>lambda</snippet></ROW><ROW><id>16973799</id><snippet>root.button("name1", lambda:callback("name1"))
root.button("name2", lambda:callback("name2"))
...
</snippet></ROW><ROW><id>16973799</id><snippet>def callback(name):
    if name == "name1":
        # Do something in here
    elif name == "name2":
        # Do something else in here
    ...
</snippet></ROW><ROW><id>16973799</id><snippet>def cb_button(i):
    print i

buttons = [('btn'+str(i), i) for i in range(10)]
for (b, i) in buttons:
    root.button(b, lambda x=i: cb_button(x))
</snippet></ROW><ROW><id>16973830</id><snippet>&gt; program2 | program1
</snippet></ROW><ROW><id>16974032</id><snippet>startxwin</snippet></ROW><ROW><id>16974032</id><snippet>backend = agg</snippet></ROW><ROW><id>16974032</id><snippet>backend = tkagg</snippet></ROW><ROW><id>16974032</id><snippet>tcaswell</snippet></ROW><ROW><id>16974032</id><snippet>EdChum</snippet></ROW><ROW><id>16974153</id><snippet>lsoda</snippet></ROW><ROW><id>16974153</id><snippet>scipy.integrate.odeint</snippet></ROW><ROW><id>16974153</id><snippet>SIR = spi.odeint(eq_system, PopIn, t_interval,mxstep=5000000)
</snippet></ROW><ROW><id>16974153</id><snippet>scipy.integrate.ode</snippet></ROW><ROW><id>16974153</id><snippet>import numpy as np
from pylab import *
import scipy.integrate as spi

def run():
    #Parameter Values
    S0 = 99.
    I0 = 1.
    R0 = 0.
    PopIn= (S0, I0, R0)
    beta= 0.50     
    gamma=1/10.  
    mu = 1/25550.
    t_end = 15000.
    t_start = 1.
    t_step = 1.
    t_interval = np.arange(t_start, t_end, t_step)

    #Solving the differential equation. Solves over t for initial conditions PopIn
    def eq_system(t,PopIn):
        '''Defining SIR System of Equations'''
        #Creating an array of equations
        Eqs= np.zeros((3))
        Eqs[0]= -beta * (PopIn[0]*PopIn[1]/(PopIn[0]+PopIn[1]+PopIn[2])) - mu*PopIn[0] + mu*(PopIn[0]+PopIn[1]+PopIn[2])
        Eqs[1]= (beta * (PopIn[0]*PopIn[1]/(PopIn[0]+PopIn[1]+PopIn[2])) - gamma*PopIn[1] - mu*PopIn[1])
        Eqs[2]= gamma*PopIn[1] - mu*PopIn[2]
        return Eqs

    ode =  spi.ode(eq_system)

    # BDF method suited to stiff systems of ODEs
    ode.set_integrator('vode',nsteps=500,method='bdf')
    ode.set_initial_value(PopIn,t_start)

    ts = []
    ys = []

    while ode.successful() and ode.t &lt; t_end:
        ode.integrate(ode.t + t_step)
        ts.append(ode.t)
        ys.append(ode.y)

    t = np.vstack(ts)
    s,i,r = np.vstack(ys).T

    fig,ax = subplots(1,1)
    ax.hold(True)
    ax.plot(t,s,label='Susceptible')
    ax.plot(t,i,label='Infected')
    ax.plot(t,r,label='Recovered')
    ax.set_xlim(t_start,t_end)
    ax.set_ylim(0,100)
    ax.set_xlabel('Time')
    ax.set_ylabel('Percent')
    ax.legend(loc=0,fancybox=True)

    return t,s,i,r,fig,ax
</snippet></ROW><ROW><id>16974752</id><snippet>class Window:
    def __init__(self, x, y):
        global app
        app = self
    def event(self, func):
        self.what_todo = func
    def run(self):
        self.what_todo()

&gt;&gt;&gt; game_window = Window(800, 600)
&gt;&gt;&gt;
&gt;&gt;&gt; @game_window.event
... def on_draw():
...     print("I am drawing!")
...
&gt;&gt;&gt; app.run()
I am drawing!
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16974808</id><snippet>class C(object):
    def __init__(self):
        self._actuals = []

    @property
    def actuals(self):
        return self._actuals

    @actuals.setter
    def actuals(self, value):
        self._actuals = value
        self._actuals[:] = [int(s) for s in self._actuals]


bactuals = ["1", "2", "3"]
c = C()
c.actuals = bactuals
</snippet></ROW><ROW><id>16974808</id><snippet>bactuals[1:]</snippet></ROW><ROW><id>16974808</id><snippet>bactuals</snippet></ROW><ROW><id>16974808</id><snippet>bactuals[:]</snippet></ROW><ROW><id>16974851</id><snippet>O(min(len(s1), len(s2))</snippet></ROW><ROW><id>16974851</id><snippet>&gt;&gt;&gt; s1 = range(10)
&gt;&gt;&gt; s2 = range(5,20)
&gt;&gt;&gt; set(s1) &amp; set(s2)  #set intersection returns the common keys
set([8, 9, 5, 6, 7])   # order not preserved 
</snippet></ROW><ROW><id>16974903</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>16974903</id><snippet>print "blah",</snippet></ROW><ROW><id>16974912</id><snippet>None</snippet></ROW><ROW><id>16974912</id><snippet>&gt;&gt;&gt; def func():pass
&gt;&gt;&gt; print func()     #print or print() prints the return Value
None
&gt;&gt;&gt; func()           #remove print and the returned value is not printed. 
&gt;&gt;&gt;
</snippet></ROW><ROW><id>16974912</id><snippet>letter_grade(score) #remove the print</snippet></ROW><ROW><id>16974912</id><snippet>return</snippet></ROW><ROW><id>16974912</id><snippet>def letter_grade(score):
    if 90 &lt;= score &lt;= 100:
        return "A"
    elif 80 &lt;= score &lt;= 89:
        return "B"
    elif 70 &lt;= score &lt;= 79:
        return  "C"
    elif 60 &lt;= score &lt;= 69:
        return "D"
    elif score &lt; 60:
        return "F"
    else:
        #This is returned if all other conditions aren't satisfied
        return "Invalid Marks"
</snippet></ROW><ROW><id>16974912</id><snippet>print()</snippet></ROW><ROW><id>16974912</id><snippet>&gt;&gt;&gt; print(letter_grade(91))
A
&gt;&gt;&gt; print(letter_grade(45))
F
&gt;&gt;&gt; print(letter_grade(75))
C
&gt;&gt;&gt; print letter_grade(1000)
Invalid Marks
</snippet></ROW><ROW><id>16974923</id><snippet>resultquery = (Q(field1='val11') | Q(field1='val12')) &amp; ...
result = SomeModel.objects.filter(resultquery)
</snippet></ROW><ROW><id>16974923</id><snippet>in</snippet></ROW><ROW><id>16974952</id><snippet>#!/usr/bin/python

import os

# traverse root directory, and list directories as dirs and files as files
for root, dirs, files in os.walk("."):
    path = root.split('/')
    print (len(path) - 1) *'---' , os.path.basename(root)       
    for file in files:
        print len(path)*'---', file
</snippet></ROW><ROW><id>16974956</id><snippet>L[index] == L[start] + (index - start)</snippet></ROW><ROW><id>16974956</id><snippet>L[index] == L[end] - (end - index)</snippet></ROW><ROW><id>16974956</id><snippet># python 3.3 and up, in older versions, replace "yield from" with yield loop

def missing_elements(L, start, end):
    if end - start &lt;= 1: 
        if L[end] - L[start] &gt; 1:
            yield from range(L[start] + 1, L[end])
        return

    index = start + (end - start) // 2

    # is the lower half consecutive?
    consecutive_low =  L[index] == L[start] + (index - start)
    if not consecutive_low:
        yield from missing_elements(L, start, index)

    # is the upper part consecutive?
    consecutive_high =  L[index] == L[end] - (end - index)
    if not consecutive_high:
        yield from missing_elements(L, index, end)

def main():
    L = [10,11,13,14,15,16,17,18,20]
    print(list(missing_elements(L,0,len(L)-1)))
    L = range(10, 21)
    print(list(missing_elements(L,0,len(L)-1)))

main()
</snippet></ROW><ROW><id>16975010</id><snippet>askopenfilenames</snippet></ROW><ROW><id>16975010</id><snippet>tk.splitlist</snippet></ROW><ROW><id>16975010</id><snippet>tk=Tk()
tk.withdraw()

def fileupload():
    while True:
        uploadedfilenames = askopenfilenames(multiple=True)
        if uploadedfilenames == '':
            tkMessageBox.showinfo(message="File Upload has been cancelled program will stop")
            return
        uploadedfiles = tk.splitlist(uploadedfilenames)
        if len(uploadedfiles)!=2:
           tkMessageBox.showinfo(message="2 files have not been selected!")
        else:
            return uploadedfiles

print fileupload()
</snippet></ROW><ROW><id>16975091</id><snippet>left</snippet></ROW><ROW><id>16975091</id><snippet>value</snippet></ROW><ROW><id>16975091</id><snippet>x.value = 3.
y.value = 1.
for c in [c1, c2, c3]:
    constraint_text = '%s %s %s' % (c.left.value, c.type, c.right)
    print '%s becomes %s which is %s' % (c, constraint_text, eval(constraint_text))
</snippet></ROW><ROW><id>16975091</id><snippet>x &gt;= 1.0 becomes 3.0 &gt;= 1.0 which is True 
y &gt;= 1.0 becomes 1.0 &gt;= 1.0 which is True
x + y &lt;= -4.0 becomes 4.0 &lt;= -4.0 which is False
</snippet></ROW><ROW><id>16975122</id><snippet>grid</snippet></ROW><ROW><id>16975122</id><snippet>self.scale = ttk.Scale(self, ...)
self.scale.grid(...)
# Same for self.spinbox
</snippet></ROW><ROW><id>16975122</id><snippet>spinval = StringVar()
self.scale = ttk.Scale(self, variable=spinval, ...)
# ...
self.spinbox = Spinbox(self, textvariable = spinval, ...)
</snippet></ROW><ROW><id>16975122</id><snippet>command</snippet></ROW><ROW><id>16975122</id><snippet>update</snippet></ROW><ROW><id>16975143</id><snippet>line.split()[-1]</snippet></ROW><ROW><id>16975143</id><snippet>&gt;&gt;&gt; lis = [1, 2, 3, 4, 5]
&gt;&gt;&gt; n = 1
&gt;&gt;&gt; lis[-n]
5
&gt;&gt;&gt; lis[len(lis) - n] # equivalent to lis[-n] 
5
</snippet></ROW><ROW><id>16975143</id><snippet>import sys
with open(sys.argv[1]) as f, open('out.txt', 'w') as out:
     for line in f:
         out.write(line.split()[-1]+'\n')
</snippet></ROW><ROW><id>16975214</id><snippet>if string_name.startswith(multi[0]):
    print 'test'
</snippet></ROW><ROW><id>16975214</id><snippet>if string_name.startswith(multi[:3]):
    print 'test'
</snippet></ROW><ROW><id>16975245</id><snippet>echo -n "b" | ...
</snippet></ROW><ROW><id>16975245</id><snippet>&gt;&gt;&gt; 'b\n'.encode('base64')
'Ygo=\n'
</snippet></ROW><ROW><id>16975306</id><snippet>string = f.read()
finder = re.compile('\n')
stats = finder.split(string)
</snippet></ROW><ROW><id>16975306</id><snippet>stats = f.readlines()
</snippet></ROW><ROW><id>16975306</id><snippet>f.read().splitlines()
</snippet></ROW><ROW><id>16975306</id><snippet>with</snippet></ROW><ROW><id>16975306</id><snippet>with open(stg) as f:
    stats = f.readlines()
</snippet></ROW><ROW><id>16975306</id><snippet>health = int(stats[0])
</snippet></ROW><ROW><id>16975306</id><snippet>health</snippet></ROW><ROW><id>16975306</id><snippet>None</snippet></ROW><ROW><id>16975306</id><snippet>Character.health</snippet></ROW><ROW><id>16975306</id><snippet>self.health</snippet></ROW><ROW><id>16975306</id><snippet>adj*</snippet></ROW><ROW><id>16975602</id><snippet>GroupBy</snippet></ROW><ROW><id>16975602</id><snippet>(grouping_value, df_subgroup)</snippet></ROW><ROW><id>16975602</id><snippet>grouped = DF.groupby("category")
aggregate = list((k, v["arraydata"].sum()) for k, v in grouped)
new_df = pd.DataFrame(aggregate, columns=["category", "arraydata"]).set_index("category")
</snippet></ROW><ROW><id>16975602</id><snippet>ndarray</snippet></ROW><ROW><id>16975602</id><snippet>_aggregate_named</snippet></ROW><ROW><id>16975602</id><snippet>def _aggregate_named(self, func, *args, **kwargs):
    result = {}

    for name, group in self:
        group.name = name
        output = func(group, *args, **kwargs)
        if isinstance(output, np.ndarray):
            raise Exception('Must produce aggregated value')
        result[name] = self._try_cast(output, group)

    return result
</snippet></ROW><ROW><id>16975602</id><snippet>groupby</snippet></ROW><ROW><id>16975602</id><snippet>Panel</snippet></ROW><ROW><id>16975602</id><snippet>DF.groupby("category").agg({"arraydata": lambda x: list(x.sum())})
</snippet></ROW><ROW><id>16975602</id><snippet>np.array</snippet></ROW><ROW><id>16975602</id><snippet>result = DF.groupby("category").agg({"arraydata": lambda x: list(x.sum())})
result["arraydata"] = result["arraydata"].apply(np.array)
</snippet></ROW><ROW><id>16975602</id><snippet>ndarray</snippet></ROW><ROW><id>16975602</id><snippet>GroupBy</snippet></ROW><ROW><id>16975645</id><snippet>new_line = re.sub(r'\d{4}\+\d{2}', FeetFramesToTimecode(found.group()), line)
</snippet></ROW><ROW><id>16975793</id><snippet>[[0]]*n
</snippet></ROW><ROW><id>16975793</id><snippet>[[[ [0,0,0,0] for _ in range(4)] for _ in range(15)] for _ in range(5)]
</snippet></ROW><ROW><id>16975829</id><snippet>class Animal(object):
    ...
    def sleep(self, ...):
        ...

my_cow  = Animal()
function = getattr(my_cow, "sleep")
function (  ) 
# and of course, the two preceeding lines can be in a single expression:
getattr(a, "sleep")()
</snippet></ROW><ROW><id>16975829</id><snippet>initializeSleep()</snippet></ROW><ROW><id>16975829</id><snippet>initializeSleep()</snippet></ROW><ROW><id>16975829</id><snippet>self.</snippet></ROW><ROW><id>16975829</id><snippet>def initializeAnimal(self):
    self.actions['SLEEP'] = self.initializeSleep()  # add sleep function 
</snippet></ROW><ROW><id>16975829</id><snippet>self</snippet></ROW><ROW><id>16975829</id><snippet>def initializeSleep(self):
    RESTORED_HEALTH = 20
    # other constants

    def sleep():
        self.health = RESTORED_HEALTH
        # utilize other constants

    return sleep
</snippet></ROW><ROW><id>16976103</id><snippet>pyttsx.py</snippet></ROW><ROW><id>16976103</id><snippet>import</snippet></ROW><ROW><id>16976130</id><snippet>alist = ['ROOT', ['S', ['NP', ['PRP', 'We']], ['VP', ['VBP', 'have'], ['VP', ['VBN', 'received'], ['NP', ['NN', 'information']],
        ['PP', ['IN', 'from'], ['NP', ['NP', ['DT', 'a'], ['NN', 'source']], ['VP', ['VBN', 'entitled'], ['PP', ['TO', 'to'],
        ['NP', ['NN', 'belief']]], [',', ','], ['SBAR', ['IN', 'that'], ['S', ['NP', ['NNP', 'Lincoln']], ['VP', ['VP', ['VBZ', 'has'],
        ['VP', ['VBN', 'paid'], ['NP', ['DT', 'a'], ['JJ', 'hurried'], ['NN', 'visit']], ['PP', ['TO', 'to'],
        ['NP', ['NP', ['DT', 'the'], ['NNP', 'Army']], ['PP', ['IN', 'of'], ['NP', ['DT', 'the'], ['NNP', 'Potomac']]]]],
        [',', ','], ['PRN', ['-LRB-', '-LRB-'], ['ADVP', ['RB', 'now']], ['ADJP', ['JJ', 'burrowing'], ['PP', ['IN', 'on'],
        ['NP', ['NP', ['DT', 'the'], ['NN', 'north'], ['NN', 'bank']], ['PP', ['IN', 'of'], ['NP', ['DT', 'the'], ['NNP', 'James']]],
        [',', ',']]]], ['-RRB-', '-RRB-']]]], ['CC', 'and'], ['VP', ['VBD', 'satisfied'], ['NP', ['PRP', 'himself']],
        [',', ','], ['PP', ['IN', 'by'], ['NP', ['JJ', 'personal'], ['NN', 'observation']]], [',', ','],
        ['PP', ['IN', 'in'], ['NP', ['NN', 'regard']]], ['PP', ['TO', 'to'], ['NP', ['NP', ['DT', 'the'], ['JJ', 'true'], ['NN', 'situation']],
        ['PP', ['IN', 'of'], ['NP', ['NNS', 'affairs']]]]]]]]]]]]]], ['.', '.']]]

def PullNP(NNP, NPLists):
    if NNP in NPLists:
        print "Pulling relevant NP"
        print NNP
        yield NNP
    for thing in NPLists:
        if NNP in thing:
            for nnp in PullNP(thing, NPLists):
                yield nnp
        else:
            for s in thing:
                if isinstance(s, list) and NNP in s:
                    for nnp in PullNP(s, NPLists):
                        yield nnp


def RecurseNNP(alist, pastlists=None, count=None):
    if pastlists is None: pastlists = []
    if count is None: count = 0
    if 'NNP' in alist[0]:
        NNPs = PullNP(alist, pastlists)
        print NNPs
        for np in NNPs:
            print np
    else:
        if str(type(alist)) == "&lt;type 'list'&gt;":
            if alist[0] == 'NP':
                pastlists.append(alist)
            for x in alist[1:]:
                RecurseNNP(x, pastlists, count)

RecurseNNP(alist)
</snippet></ROW><ROW><id>16976198</id><snippet>n</snippet></ROW><ROW><id>16976198</id><snippet>concat</snippet></ROW><ROW><id>16976198</id><snippet>group = df.groupby([lambda x: x.year, lambda x: x.month])
dataframes = []
for n in range(23):
    frame = group.nth(n).describe().T
    frame.index = [(inner, n, outer) for outer, inner in frame.index]
    dataframes.append(frame)
final_df = pd.concat(dataframes)
</snippet></ROW><ROW><id>16976248</id><snippet>import urllib2

class RedirectHandler(urllib2.HTTPRedirectHandler):
    def http_error_302(self, req, fp, code, msg, headers):
        result = urllib2.HTTPError(req.get_full_url(), code, msg, headers, fp)
        result.status = code
        return result
    http_error_301 = http_error_303 = http_error_307 = http_error_302

opener = urllib2.build_opener(RedirectHandler())
webpage = opener.open('http://www.example.com/product1/456')
...
</snippet></ROW><ROW><id>16976319</id><snippet>import os

def splitext(path):
    for ext in ['.tar.gz', '.tar.bz2']:
        if path.endswith(ext):
            return path[:-len(ext)], path[-len(ext):]
    return os.path.splitext(path)

assert splitext('20090209.02s1.1_sequence.txt')[1] == '.txt'
assert splitext('SRR002321.fastq.bz2')[1] == '.bz2'
assert splitext('hello.tar.gz')[1] == '.tar.gz'
assert splitext('ok.txt')[1] == '.txt'
</snippet></ROW><ROW><id>16976319</id><snippet>import os

def splitext(path):
    for ext in ['.tar.gz', '.tar.bz2']:
        if path.endswith(ext):
            path, ext = path[:-len(ext)], path[-len(ext):]
            break
    else:
        path, ext = os.path.splitext(path)
    return path, ext[1:]

assert splitext('20090209.02s1.1_sequence.txt')[1] == 'txt'
assert splitext('SRR002321.fastq.bz2')[1] == 'bz2'
assert splitext('hello.tar.gz')[1] == 'tar.gz'
assert splitext('ok.txt')[1] == 'txt'
</snippet></ROW><ROW><id>16976500</id><snippet>import mock

class AnyStringWith(str):
    def __eq__(self, other):
        return self in other

...
result = database.Query('complicated sql with an id: %s' % id)
database.Query.assert_called_once_with(AnyStringWith(id))
...
</snippet></ROW><ROW><id>16976500</id><snippet>def arg_should_contain(x):
    def wrapper(arg):
        assert str(x) in arg, "'%s' does not contain '%s'" % (arg, x)
    return wrapper

...
database.Query = arg_should_contain(id)
result = database.Query('complicated sql with an id: %s' % id)
</snippet></ROW><ROW><id>16976595</id><snippet>import sys 

fileTemps = 'temps'

with open(fileTemps, 'rw') as fd:
    temps = fd.readlines()

if temps.__len__() &gt;= 15:
    temps.pop(0)

temps.append(' '.join(sys.argv[1:]) + '\n')

with open(fileTemps, 'w') as fd:
    for l in temps:
        fd.write(l)
</snippet></ROW><ROW><id>16976740</id><snippet>import numpy as np
import cv2

img = cv2.imread('cross.jpg')    
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)    
ret, thresh = cv2.threshold(gray,127,255,cv2.THRESH_BINARY_INV)
thresh2 = cv2.bitwise_not(thresh)

contours,hierarchy = cv2.findContours(thresh, cv2.RETR_EXTERNAL, 1)

max_area = -1

# find contours with maximum area
for cnt in contours:
    approx = cv2.approxPolyDP(cnt, 0.02*cv2.arcLength(cnt,True), True)
    if len(approx) == 4:
        if cv2.contourArea(cnt) &gt; max_area:
            max_area = cv2.contourArea(cnt)
            max_cnt = cnt
            max_approx = approx

# cut the crossword region, and resize it to a standard size of 130x130
x,y,w,h = cv2.boundingRect(max_cnt)
cross_rect = thresh2[y:y+h, x:x+w]
cross_rect = cv2.resize(cross_rect,(130,130))

# you need to uncomment these lines if your image is rotated
#new_pts = np.float32([[0,0], [0,129],[129,129],[129,0]])
#old_pts = max_approx.reshape(4,2).astype('float32')
#M = cv2.getPerspectiveTransform(old_pts,new_pts)
#cross_rect = cv2.warpPerspective(thresh2,M,(130,130))

cross = np.zeros((13,13))

# select each box, if number of white pixels is more than 50, it is white box
for i in xrange(13):
    for j in xrange(13):
        box = cross_rect[i*10:(i+1)*10, j*10:(j+1)*10]
        if cv2.countNonZero(box) &gt; 50:
            cross.itemset((i,j),1)

print cross
</snippet></ROW><ROW><id>16976740</id><snippet>[[ 0.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.]
 [ 1.  0.  1.  0.  1.  0.  1.  0.  0.  0.  1.  0.  1.]
 [ 1.  1.  1.  1.  1.  1.  1.  1.  0.  1.  1.  1.  1.]
 [ 1.  0.  1.  0.  1.  0.  1.  0.  1.  0.  1.  0.  1.]
 [ 1.  1.  1.  1.  1.  0.  1.  1.  1.  1.  1.  1.  1.]
 [ 1.  0.  0.  0.  1.  0.  1.  0.  1.  0.  1.  0.  1.]
 [ 1.  1.  1.  1.  0.  0.  0.  0.  0.  1.  1.  1.  1.]
 [ 1.  0.  1.  0.  1.  0.  1.  0.  1.  0.  0.  0.  1.]
 [ 1.  1.  1.  1.  1.  1.  1.  0.  1.  1.  1.  1.  1.]
 [ 1.  0.  1.  0.  1.  0.  1.  0.  1.  0.  1.  0.  1.]
 [ 1.  1.  1.  1.  0.  1.  1.  1.  1.  1.  1.  1.  1.]
 [ 1.  0.  1.  0.  0.  0.  1.  0.  1.  0.  1.  0.  1.]
 [ 1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  1.  0.]]
</snippet></ROW><ROW><id>16976809</id><snippet>open</snippet></ROW><ROW><id>16976809</id><snippet>with open(filename,'wb') as output:
</snippet></ROW><ROW><id>16976809</id><snippet>__enter__</snippet></ROW><ROW><id>16976809</id><snippet>__exit__</snippet></ROW><ROW><id>16976809</id><snippet>AttributeError</snippet></ROW><ROW><id>16976809</id><snippet>(filename,'wb')</snippet></ROW><ROW><id>16976984</id><snippet>along = normalize(target-source)
</snippet></ROW><ROW><id>16977003</id><snippet>for line in GFF_in:
    if not line:  # ignore empty lines
        break
    list_without_meaningful_name = line.split('\t')
    ...
</snippet></ROW><ROW><id>16977003</id><snippet>for line in GFF_in:
    if not line:  # ignore empty lines
        break
    list_without_meaningful_name = line.split('\t')
    if len(list_without_meaningful_name) &lt; 6:
        # uh oh
    ...
</snippet></ROW><ROW><id>16977045</id><snippet>lst</snippet></ROW><ROW><id>16977045</id><snippet>lst[:] = ['lst%s' % item for item in lst]
</snippet></ROW><ROW><id>16977045</id><snippet>lst[:] = ['lst{}'.format(item) for item in lst]
</snippet></ROW><ROW><id>16977202</id><snippet>def create_widgets(self):
    """my widgets"""
    spinval = IntVar()

    self.scale = ttk.Scale(self, orient=HORIZONTAL,
                                length=200,
                                from_=1, to=100,
                                variable=spinval,
                                command=self.accept_whole_number_only)
    self.scale.grid(row=3, column=1, sticky=W)


    self.spinbox = Spinbox(self, from_=1, to=100,
                                textvariable=spinval,
                                command=self.update,
                                width=10)
    self.spinbox.grid(row=3,column=3, sticky=W)

def accept_whole_number_only(self, e=None):
    value = self.scale.get()
    if int(value) != value:
        self.scale.set(round(value))

def update(self, e=None):
    """Updates the scale and spinbox"""
    self.scale.set(self.spinbox.get())
</snippet></ROW><ROW><id>16977337</id><snippet>res = mlab.run_func('../file.m')
</snippet></ROW><ROW><id>16977347</id><snippet>class Point(object):
    __cache = {}
    def __new__(cls, x, y):
        if (x, y) in Point.__cache:
            return Point.__cache[(x, y)]
        else:
            o = object.__new__(cls)
            o.x = x
            o.y = y
            Point.__cache[(x, y)] = o
            return o


&gt;&gt;&gt; Point(1, 2)
&lt;__main__.Point object at 0xb6f5d24c&gt;
&gt;&gt;&gt; id(Point(1, 2)) == id(Point(1,2))
True
</snippet></ROW><ROW><id>16977347</id><snippet>Point</snippet></ROW><ROW><id>16977347</id><snippet>collections.namedtuple</snippet></ROW><ROW><id>16977347</id><snippet>from collections import namedtuple
def Point(x, y, _Point=namedtuple('Point', 'x y'), _cache={}):
    return _cache.setdefault((x, y), _Point(x, y))

&gt;&gt;&gt; Point(1, 2)
Point(x=1, y=2)
&gt;&gt;&gt; id(Point(1, 2)) == id(Point(1, 2))
True
</snippet></ROW><ROW><id>16977347</id><snippet>namedtuple</snippet></ROW><ROW><id>16977347</id><snippet>class Point(namedtuple('Point', 'x y')):
    __cache = {}
    def __new__(cls, x, y):
        return Point.__cache.setdefault((x, y), 
                                         super(cls, Point).__new__(cls, x, y))
</snippet></ROW><ROW><id>16977347</id><snippet>weakref.WeakValueDictionary</snippet></ROW><ROW><id>16977347</id><snippet>namedtuple</snippet></ROW><ROW><id>16977466</id><snippet>dic.keys</snippet></ROW><ROW><id>16977466</id><snippet>def ix(self, dic, n): #don't use dict as  a variable name
   try:
       return list(dic)[n] # or sorted(dic)[n] if you want the keys to be sorted
   except IndexError:
       print 'not enough keys'
</snippet></ROW><ROW><id>16977666</id><snippet>cur.execute(""" INSERT INTO rented_users (username,login,password) VALUES (%s,%s,%s);""", (a,b,c)
</snippet></ROW><ROW><id>16977666</id><snippet>)</snippet></ROW><ROW><id>16977821</id><snippet>python manage.py clearsessions</snippet></ROW><ROW><id>16977952</id><snippet>seconds</snippet></ROW><ROW><id>16977952</id><snippet>microseconds</snippet></ROW><ROW><id>16977952</id><snippet>timedelta</snippet></ROW><ROW><id>16977952</id><snippet>def to_relativedelta(tdelta):
    return relativedelta(seconds=int(tdelta.total_seconds()),
                         microseconds=tdelta.microseconds)

&gt;&gt;&gt; to_relativedelta(timedelta(seconds=0.3))
relativedelta(microseconds=+300000)
&gt;&gt;&gt; to_relativedelta(timedelta(seconds=3))
relativedelta(seconds=+3)
&gt;&gt;&gt; to_relativedelta(timedelta(seconds=300))
relativedelta(minutes=+5)
&gt;&gt;&gt; to_relativedelta(timedelta(seconds=3000000))
relativedelta(days=+34, hours=+17, minutes=+20)
</snippet></ROW><ROW><id>16978405</id><snippet>.in-addr.arpa.</snippet></ROW><ROW><id>16978405</id><snippet>addy = '.'.join(reversed(ip)) + ".in-addr.arpa.'
</snippet></ROW><ROW><id>16978405</id><snippet>import IPy
i = IP('.'.join(ip))
addy = i.reverseNames()
</snippet></ROW><ROW><id>16978571</id><snippet>partition_size</snippet></ROW><ROW><id>16978571</id><snippet>os.path.join(settings.DATA_PATH, str(user.pk // partition_size), str(user.pk))
</snippet></ROW><ROW><id>16978571</id><snippet>partition_size=200</snippet></ROW><ROW><id>16978571</id><snippet>&gt;&gt;&gt; fn(101)
'\\data\\users\\0\\101'
&gt;&gt;&gt; fn(201)
'\\data\\users\\1\\201'
</snippet></ROW><ROW><id>16978600</id><snippet>canvas</snippet></ROW><ROW><id>16978600</id><snippet>rgb</snippet></ROW><ROW><id>16978600</id><snippet>kivy/uix/rst.py</snippet></ROW><ROW><id>16978600</id><snippet>RstDocument</snippet></ROW><ROW><id>16978600</id><snippet>DictProperty</snippet></ROW><ROW><id>16978600</id><snippet>rst.py</snippet></ROW><ROW><id>16978600</id><snippet>canvas</snippet></ROW><ROW><id>16978600</id><snippet>rgba</snippet></ROW><ROW><id>16978749</id><snippet>Point2 test(Point2 k)
    __attribute__((callee_pop_aggregate_return(0)));
</snippet></ROW><ROW><id>16978784</id><snippet>for x in results.successes + results.failures + results.errors:
    print x
    #print x.get_description(), x.outcome
</snippet></ROW><ROW><id>16978854</id><snippet>A += 1</snippet></ROW><ROW><id>16978854</id><snippet>A = A + 1</snippet></ROW><ROW><id>16978854</id><snippet>A += A = a</snippet></ROW><ROW><id>16978854</id><snippet>A = A + A = a</snippet></ROW><ROW><id>16978872</id><snippet>setTimeout</snippet></ROW><ROW><id>16978872</id><snippet>function sendEmail() {
  email.send(to, headers, body);
  setTimeout(sendEmail, 10*1000);
}
setTimeout(sendEmail, 10*1000);
</snippet></ROW><ROW><id>16978872</id><snippet>setInterval</snippet></ROW><ROW><id>16978872</id><snippet>function sendEmail() {
   email.send(to, headers, body);
}
setInterval(sendEmail, 10*1000);
</snippet></ROW><ROW><id>16979033</id><snippet>$ curl -s http://archive.scrapy.org/ubuntu/archive.key | sudo apt-key add -
$ echo "deb http://archive.scrapy.org/ubuntu precise main" &gt;&gt; /etc/apt/sources.list
$ apt-get update
$ apt-get install scrapyd-0.14
</snippet></ROW><ROW><id>16979317</id><snippet>source</snippet></ROW><ROW><id>16979317</id><snippet>TemplateSyntaxError</snippet></ROW><ROW><id>16979317</id><snippet>TemplateDoesNotExist</snippet></ROW><ROW><id>16979810</id><snippet>%</snippet></ROW><ROW><id>16979810</id><snippet>//</snippet></ROW><ROW><id>16979810</id><snippet>76</snippet></ROW><ROW><id>16979810</id><snippet>76 % 25</snippet></ROW><ROW><id>16979810</id><snippet>1</snippet></ROW><ROW><id>16979810</id><snippet>76 // 25</snippet></ROW><ROW><id>16979810</id><snippet>3</snippet></ROW><ROW><id>16979810</id><snippet>if</snippet></ROW><ROW><id>16979810</id><snippet>elif</snippet></ROW><ROW><id>16979810</id><snippet>divmod</snippet></ROW><ROW><id>16979810</id><snippet>tuple</snippet></ROW><ROW><id>16979810</id><snippet>def coins_given(amount):
    coins = [(25, 'quarter'), (10, 'dime'), (5, 'nickel'), (1, 'penny')]
    answer = {}
    for coin_value, coin_name in coins:
        if amount &gt;= coin_value:
            number_coin, amount = divmod(amount, coin_value)
            answer[coin_name] = number_coin
    return answer

print coins_given(76)
# {'quarter': 3, 'penny': 1}
</snippet></ROW><ROW><id>16980092</id><snippet>from myro import *
from math import *

def main():
    z = 3
    a = 2
    b = 2
    x = 3
    y = 3

    lim = 25

    c = (a**x + b**y)**(1.0/z)

    #while int(c) != c:
    while z &lt;= lim:
        while a &lt;= lim:
            while b &lt;= lim:
                while x &lt;= lim:
                    while y &lt;= lim:
                        c = (a**x + b**y)**(1.0/z)
                        print a, b, c, x, y, z
                        if int(c) == c:
                            print str(a) + "^" + str(x) + " + " + str(b) + "^" + str(y) + " = " + str(c) + "^" + str(z)
                            return
                        y = y + 1

                    y = 3
                    print a, b, c, x, y, z
                    x = x + 1

                x = 3
                print a, b, c, x, y, z
                b = b + 1

            b = 3
            print a, b, c, x, y, z
            a = a + 1

        a = 3
        print a, b, c, x, y, z
        z = z + 1

    print "code cycle complete. no numbers meet criteria"

main()
</snippet></ROW><ROW><id>16980192</id><snippet>textwrap.fill()</snippet></ROW><ROW><id>16980192</id><snippet>print(item.name, ":", textwrap.fill(item.description), "\n\nValue :", item.value)
</snippet></ROW><ROW><id>16980192</id><snippet>textwrap.wrap()</snippet></ROW><ROW><id>16980330</id><snippet>TA-lib wrapper</snippet></ROW><ROW><id>16980330</id><snippet>Python 2.7.X</snippet></ROW><ROW><id>16980330</id><snippet>disutils</snippet></ROW><ROW><id>16980330</id><snippet>C:\Python27\Lib\distutils\distutils.cfg</snippet></ROW><ROW><id>16980330</id><snippet>[build]
compiler = mingw32
</snippet></ROW><ROW><id>16980330</id><snippet>-mno-cygwin</snippet></ROW><ROW><id>16980330</id><snippet>C:\Python27\Lib\distutils\cygwinccompiler.py</snippet></ROW><ROW><id>16980330</id><snippet># self.set_executables(compiler='gcc -mno-cygwin -O -Wall',
                     # compiler_so='gcc -mno-cygwin -mdll -O -Wall',
                     # compiler_cxx='g++ -mno-cygwin -O -Wall',
                     # linker_exe='gcc -mno-cygwin',
                     # linker_so='%s -mno-cygwin %s %s'
                                # % (self.linker_dll, shared_option,
                                   # entry_point))
# becomes :

self.set_executables(compiler='gcc -O -Wall',
                     compiler_so='gcc -mdll -O -Wall',
                     compiler_cxx='g++ -O -Wall',
                     linker_exe='gcc',
                     linker_so='%s %s %s'
                                % (self.linker_dll, shared_option,
                                   entry_point))

# Just because `-mno-cygwin` has just been removed from early versions of gcc.
</snippet></ROW><ROW><id>16980330</id><snippet>$ python setup.py install</snippet></ROW><ROW><id>16980330</id><snippet>PATH</snippet></ROW><ROW><id>16980330</id><snippet>SET PYTHONPATH=%PYTHONPATH%;../../../DEPENDENCIES/Cython-0.19.1
SET PATH=%PATH%;../../../DEPENDENCIES/Cython-0.19.1/bin
</snippet></ROW><ROW><id>16980531</id><snippet>from scrapy.spider import BaseSpider
from scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor
from scrapy.selector import HtmlXPathSelector
from scrapy.item import Item, Field

class Torrent(Item):
    name = Field()

class MySpiderSpider(BaseSpider):
    name = 'MySpider'
    allowed_domains = ['http://sfbay.craigslist.org']
    start_urls = ['http://sfbay.craigslist.org/search/apa?bedrooms=1&amp;srchType=A&amp;s=%d' %n for n in xrange(0, 2500, 100)]

    def parse(self, response):
        x = HtmlXPathSelector(response)
        torrent = Torrent()
        torrent['name'] = x.select("id('toc_rows')/p[2]/span[1]/a/text()").extract()
        return torrent
</snippet></ROW><ROW><id>16980846</id><snippet>class</snippet></ROW><ROW><id>16980846</id><snippet>foo</snippet></ROW><ROW><id>16980846</id><snippet>self.foo</snippet></ROW><ROW><id>16980846</id><snippet>class A():
    foo = 1 
    def __init__(self):
        print self.foo 
</snippet></ROW><ROW><id>16980846</id><snippet>A</snippet></ROW><ROW><id>16980846</id><snippet>type(self)</snippet></ROW><ROW><id>16980846</id><snippet>def __init__(self):
    print A.foo 
</snippet></ROW><ROW><id>16980846</id><snippet>def __init__(self):
    print type(self).foo 
</snippet></ROW><ROW><id>16980998</id><snippet>def myfunc(p1, p2, p3):
    """myfunc does something interesting.

    some more detail. See :meth:`my_other_func` for more information.

    :param p1: The first parameter.
    :type p1: string
    :param p2: The second parameter.
    :param p3: The third parameter.
    :returns: True if successful, False if not.
    """

    my_code(p1)
    more_code(p2)
    return third_part(p1,p2,p3)
</snippet></ROW><ROW><id>16981284</id><snippet>''.join(x)</snippet></ROW><ROW><id>16981284</id><snippet>word</snippet></ROW><ROW><id>16981284</id><snippet>def join_strings(x):
    word = ''
    for i in x:
        word += i
    return word
</snippet></ROW><ROW><id>16981284</id><snippet>word=''</snippet></ROW><ROW><id>16981284</id><snippet>sum</snippet></ROW><ROW><id>16981284</id><snippet>def sum(iterable, s=0):
    acc = s
    for t in iterable:
        acc += s
    return acc
</snippet></ROW><ROW><id>16981284</id><snippet>''.join(x)</snippet></ROW><ROW><id>16981284</id><snippet>sum</snippet></ROW><ROW><id>16981284</id><snippet>+=</snippet></ROW><ROW><id>16981284</id><snippet>from operator import add
def reduce(iterable, s=0, op=add):
    acc = s
    for t in iterable:
        acc = op(w, s)
    return acc
</snippet></ROW><ROW><id>16981688</id><snippet>argparse</snippet></ROW><ROW><id>16981688</id><snippet>title</snippet></ROW><ROW><id>16981688</id><snippet>parser._optionals</snippet></ROW><ROW><id>16981688</id><snippet>parser._optionals.title = "my mandatory arguments, they are actually optionals, but I'll check for their presence"
</snippet></ROW><ROW><id>16981698</id><snippet>scipy.mean</snippet></ROW><ROW><id>16981698</id><snippet>scipy.std</snippet></ROW><ROW><id>16981698</id><snippet>scipy</snippet></ROW><ROW><id>16981698</id><snippet>float64</snippet></ROW><ROW><id>16981867</id><snippet>SMTP.starttls</snippet></ROW><ROW><id>16981976</id><snippet>import matplotlib.patches as patches
from matplotlib.nxutils import points_inside_poly
import matplotlib.pyplot as plt
import numpy as np

# generate some data
X, Y = np.meshgrid(np.arange(-3.0, 3.0, 0.025), np.arange(-3.0, 3.0, 0.025))
Z1 = mlab.bivariate_normal(X, Y, 1.0, 1.0, 0.0, 0.0)
Z2 = mlab.bivariate_normal(X, Y, 1.5, 0.5, 1, 1)
# difference of Gaussians
Z = 10.0 * (Z2 - Z1)

fig, axs = plt.subplots(1,2, figsize=(12,6), subplot_kw={'xticks': [], 'yticks': [], 'frameon': False})

# create a normal contour plot
axs[0].set_title('Standard contour plot')
im = axs[0].imshow(Z, cmap=plt.cm.Greys_r)
cs = axs[0].contour(Z, np.arange(-3, 4, .5), linewidths=2, colors='red', linestyles='solid')

# get the path from 1 of the contour lines
verts = cs.collections[7].get_paths()[0]

# highlight the selected contour with yellow
axs[0].add_patch(patches.PathPatch(verts, facecolor='none', ec='yellow', lw=2, zorder=50))

# make a mask from it with the dimensions of Z
mask = verts.contains_points(list(np.ndindex(Z.shape)))
mask = mask.reshape(Z.shape).T

axs[1].set_title('Mask of everything within one contour line')
axs[1].imshow(mask, cmap=plt.cm.Greys_r, interpolation='none')

# get the sum of everything within the contour
# the mask is inverted because everything within the contour should not be masked
print np.ma.MaskedArray(Z, mask=~mask).sum()
</snippet></ROW><ROW><id>16982031</id><snippet>&gt;&gt;&gt; from selenium import webdriver
&gt;&gt;&gt; from random import randint

&gt;&gt;&gt; driver = webdriver.Firefox()
&gt;&gt;&gt; driver.get('http://www.python.org')

&gt;&gt;&gt; links = driver.find_elements_by_partial_link_text('')
&gt;&gt;&gt; l = links[randint(0, len(links)-1)]
&gt;&gt;&gt; l.click()
</snippet></ROW><ROW><id>16982185</id><snippet>print(textwrap.fill('{}: {}'.format(item.name, item.description)))
</snippet></ROW><ROW><id>16982185</id><snippet>str.format()</snippet></ROW><ROW><id>16982185</id><snippet>.name</snippet></ROW><ROW><id>16982185</id><snippet>.description</snippet></ROW><ROW><id>16982318</id><snippet>xls</snippet></ROW><ROW><id>16982318</id><snippet>xlsx</snippet></ROW><ROW><id>16982318</id><snippet>xlwt</snippet></ROW><ROW><id>16982318</id><snippet>import xlwt  
from bs4 import BeautifulSoup
from urllib2 import urlopen

html = urlopen("http://www.chicagoreader.com").read()
soup = BeautifulSoup(html, "lxml")

workbook = xlwt.Workbook()
sheet = workbook.add_sheet('test')

sheet.write(0, 0, soup.title.text)

workbook.save('output.xls')
</snippet></ROW><ROW><id>16982611</id><snippet>from bs4 import BeautifulSoup as soup, Tag


input = """&lt;td class="name"&gt;David&lt;span class="flag away"&lt;/span&gt;
&lt;/td&gt;
    &lt;td class="team"&gt;b&lt;span class="team b"&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;td class="time"&gt;99'&lt;/td&gt;

&lt;td class="name"&gt;James&lt;span class="flag home"&lt;/span&gt;"""

web_soup = soup(input)
for t in web_soup.findAll(text='David'):
    for item in t.parent.next_siblings:
        if isinstance(item, Tag):
            if 'class' in item.attrs and 'name' in item.attrs['class']:
                break
            print item
</snippet></ROW><ROW><id>16982611</id><snippet>&lt;td class="team"&gt;b&lt;span class="team b"&gt;&lt;/span&gt;&lt;/td&gt;
&lt;td class="time"&gt;99'&lt;/td&gt;
</snippet></ROW><ROW><id>16982668</id><snippet>keyPressEvent</snippet></ROW><ROW><id>16982668</id><snippet>def keyPressEvent(self, event):
    if event.key() == core.Qt.Key_Escape:
        self.close()
    if event.key() == core.Qt.Key_Enter:
        print self.text()
        self.close()
    else:
        super(SearchBox, self).keyPressEvent(event)
</snippet></ROW><ROW><id>16982901</id><snippet>concat</snippet></ROW><ROW><id>16982901</id><snippet>pd.concat([A, B], axis=1)
</snippet></ROW><ROW><id>16982901</id><snippet>A.reset_index(inplace=True)
</snippet></ROW><ROW><id>16982901</id><snippet>B.index = A.index
</snippet></ROW><ROW><id>16982952</id><snippet>request</snippet></ROW><ROW><id>16982952</id><snippet>obj_get_list</snippet></ROW><ROW><id>16982952</id><snippet>def obj_get_list(self, bundle, **kwargs):

    param =  bundle.request.GET['param']
    #fetch objects based on param
    return objects
</snippet></ROW><ROW><id>16982999</id><snippet>np.all( a[0] == a[0,:] )
#True
</snippet></ROW><ROW><id>16982999</id><snippet>a[0]==1</snippet></ROW><ROW><id>16982999</id><snippet>b = a[0]==1
#array([True, True, False, False, True], dtype=bool)
</snippet></ROW><ROW><id>16982999</id><snippet>True</snippet></ROW><ROW><id>16982999</id><snippet>b</snippet></ROW><ROW><id>16982999</id><snippet>c = a[ b ]
</snippet></ROW><ROW><id>16982999</id><snippet>[0,1,4]</snippet></ROW><ROW><id>16982999</id><snippet>c = a[ [0,1,4] ]</snippet></ROW><ROW><id>16983100</id><snippet>import datetime, time, threading, os


def clock():
    now = datetime.datetime.now()
    print now.strftime('%H:%M')

def set_alarm():    
    alarm_time = raw_input('Set Alarm (XX:XX) : ')    
    alarm_hour = alarm_time[:alarm_time.find(':')]
    alarm_minute = alarm_time[alarm_time.find(':')+1:]
    alarm_thread = threading.Thread(target=alert_thread, args=(alarm_time, alarm_hour, alarm_minute))
    alarm_thread.start()

def alert_thread(alarm_time, alarm_hour, alarm_minute):
    print "Ringing at {}:{}".format(alarm_hour, alarm_minute)
    while True:
        now = datetime.datetime.now()
        if str(now.hour) == str(alarm_hour) and str(now.minute) == str(alarm_minute):
            print ("Ring.. Ring..")
            break


#program start here
while True:
    now = datetime.datetime.now()
    print '1) Clock'
    print '2) Alarm'
    print '3) Quit'
    choice = input('Choose (1-6) : ')

    if(choice==1):
        clock()
    elif(choice==2):
        set_alarm()
    elif(choice==3):
        break
</snippet></ROW><ROW><id>16983182</id><snippet>awk</snippet></ROW><ROW><id>16983182</id><snippet>$ awk 'FNR==NR{a[$5]=$2;next}$3 in a{$3=a[$3]}1' file2 file1
1111 1111 rs58108140 G G
1112 1112 rs58108140 G G
1113 1113 rs58108140 G G
1114 1114 rs58108140 G G
1115 1115 rs58108140 G G
</snippet></ROW><ROW><id>16983292</id><snippet>x = d.get(i, '?')
</snippet></ROW><ROW><id>16983419</id><snippet>dispatch</snippet></ROW><ROW><id>16983419</id><snippet>class LoginView(generic.edit.FormView):
    def dispatch(self, request, *args, **kwargs):
        if request.user.is_authenticated():
            return HttpRedirect('/whatever/')
        else:
            return super(LoginView, self).dispatch(request, *args, **kwargs)
</snippet></ROW><ROW><id>16983496</id><snippet>urlparse</snippet></ROW><ROW><id>16983496</id><snippet>import urlparse
import re

def check_and_add_http(url):
    # checks if 'http://' is present at the start of the URL and adds it if not.
    http_regex = re.compile(r'^http[s]?://')
    if http_regex.match(url):
        # 'http://' or 'https://' is present
        return url
    else:
        # add 'http://' for urlparse to work.
        return 'http://' + url

for url in url_list:
    url = check_and_add_http(url)
    print(urlparse.urlsplit(url)[1])
</snippet></ROW><ROW><id>16983496</id><snippet>urlsplit()</snippet></ROW><ROW><id>16983674</id><snippet>from itertools import permutations

def getPass():
    chars = '4$5%6^7&amp;'
    for comb in permutations(chars):
       yield ''.join(comb)     

for i in getPass():
    print(i)
    input('\ncontinue?')
</snippet></ROW><ROW><id>16983674</id><snippet>from itertools import permutations

def getPass():
    return (''.join(p) for p in permutations('4$5%6^7&amp;'))

for i in getPass():
    print(i)
    input('\ncontinue?')
</snippet></ROW><ROW><id>16984025</id><snippet>print ' '.join(['%-2s' % (i,) for i in l])
</snippet></ROW><ROW><id>16984025</id><snippet>print ('%-2s ' * len(l))[:-1] % tuple(l)
</snippet></ROW><ROW><id>16984025</id><snippet>[:-1]</snippet></ROW><ROW><id>16984025</id><snippet>.rstrip()</snippet></ROW><ROW><id>16984025</id><snippet>&gt;&gt;&gt; print ' '.join(['%-2s' % (i,) for i in l])
AA BB CC DD
&gt;&gt;&gt; print ' '.join(['%-2s' % (i,) for i in (l + l)])
AA BB CC DD AA BB CC DD
&gt;&gt;&gt; print ('%-2s ' * len(l))[:-1] % tuple(l)
AA BB CC DD
&gt;&gt;&gt; print ('%-2s ' * len(l))[:-1] % tuple(l + l)
AA BB CC DD AA BB CC DD
</snippet></ROW><ROW><id>16984025</id><snippet>&gt;&gt;&gt; def joined_snippets(l):
...     ' '.join(['%-2s' % (i,) for i in l])
... 
&gt;&gt;&gt; def joined_template(l):
...     ' '.join(['%-2s' for i in l])%tuple(l)
... 
&gt;&gt;&gt; def multiplied_template(l):
...     ('%-2s ' * len(l))[:-1] % tuple(l)
... 
&gt;&gt;&gt; from timeit import timeit
&gt;&gt;&gt; l = ["AA","BB","CC","DD"]
&gt;&gt;&gt; timeit('f(l)', 'from __main__ import l, joined_snippets as f')
1.3180170059204102
&gt;&gt;&gt; timeit('f(l)', 'from __main__ import l, joined_template as f')
1.080280065536499
&gt;&gt;&gt; timeit('f(l)', 'from __main__ import l, multiplied_template as f')
0.7333378791809082
&gt;&gt;&gt; l *= 10
&gt;&gt;&gt; timeit('f(l)', 'from __main__ import l, joined_snippets as f')
10.041708946228027
&gt;&gt;&gt; timeit('f(l)', 'from __main__ import l, joined_template as f')
5.52706503868103
&gt;&gt;&gt; timeit('f(l)', 'from __main__ import l, multiplied_template as f')
2.8013129234313965
</snippet></ROW><ROW><id>16984081</id><snippet>scipy.ndimage.zoom</snippet></ROW><ROW><id>16984081</id><snippet>scipy.ndimage.map_coordinates</snippet></ROW><ROW><id>16984081</id><snippet>scipy.ndimage.zoom</snippet></ROW><ROW><id>16984081</id><snippet>order=1</snippet></ROW><ROW><id>16984081</id><snippet>order=0</snippet></ROW><ROW><id>16984081</id><snippet>import numpy as np
import scipy.ndimage as ndimage

data = np.arange(9).reshape(3,3)

print 'Original:\n', data
print 'Zoomed by 2x:\n', ndimage.zoom(data, 2)
</snippet></ROW><ROW><id>16984081</id><snippet>Original:
[[0 1 2]
 [3 4 5]
 [6 7 8]]
Zoomed by 2x:
[[0 0 1 1 2 2]
 [1 1 1 2 2 3]
 [2 2 3 3 4 4]
 [4 4 5 5 6 6]
 [5 6 6 7 7 7]
 [6 6 7 7 8 8]]
</snippet></ROW><ROW><id>16984081</id><snippet>data = np.arange(27).reshape(3,3,3)
print 'Original:\n', data
print 'Zoomed by 2x gives an array of shape:', ndimage.zoom(data, 2).shape
</snippet></ROW><ROW><id>16984081</id><snippet>Original:
[[[ 0  1  2]
  [ 3  4  5]
  [ 6  7  8]]

 [[ 9 10 11]
  [12 13 14]
  [15 16 17]]

 [[18 19 20]
  [21 22 23]
  [24 25 26]]]
Zoomed by 2x gives an array of shape: (6, 6, 6)
</snippet></ROW><ROW><id>16984081</id><snippet>print 'Zoomed by 2x along the last two axes:'
print ndimage.zoom(data, (1, 2, 2))
</snippet></ROW><ROW><id>16984081</id><snippet>Zoomed by 2x along the last two axes:
[[[ 0  0  1  1  2  2]
  [ 1  1  1  2  2  3]
  [ 2  2  3  3  4  4]
  [ 4  4  5  5  6  6]
  [ 5  6  6  7  7  7]
  [ 6  6  7  7  8  8]]

 [[ 9  9 10 10 11 11]
  [10 10 10 11 11 12]
  [11 11 12 12 13 13]
  [13 13 14 14 15 15]
  [14 15 15 16 16 16]
  [15 15 16 16 17 17]]

 [[18 18 19 19 20 20]
  [19 19 19 20 20 21]
  [20 20 21 21 22 22]
  [22 22 23 23 24 24]
  [23 24 24 25 25 25]
  [24 24 25 25 26 26]]]
</snippet></ROW><ROW><id>16984081</id><snippet>map_coordinates</snippet></ROW><ROW><id>16984081</id><snippet>map_coordinates</snippet></ROW><ROW><id>16984081</id><snippet>import numpy as np
import scipy.ndimage as ndimage

data = np.arange(27).reshape(3,3,3)

print 'Original:\n', data
print 'Sampled at 1.2, 0.3, 1.4:'
print ndimage.map_coordinates(data, [[1.2], [0.3], [1.4]])
</snippet></ROW><ROW><id>16984081</id><snippet>Original:
[[[ 0  1  2]
  [ 3  4  5]
  [ 6  7  8]]

 [[ 9 10 11]
  [12 13 14]
  [15 16 17]]

 [[18 19 20]
  [21 22 23]
  [24 25 26]]]
Sampled at 1.2, 0.3, 1.4:
[14]
</snippet></ROW><ROW><id>16984081</id><snippet>order</snippet></ROW><ROW><id>16984081</id><snippet>scipy.ndimage</snippet></ROW><ROW><id>16984081</id><snippet>In [74]: ndimage.map_coordinates(data.astype(float), [[1.2], [0.3], [1.4]])
Out[74]: array([ 13.5965])
</snippet></ROW><ROW><id>16984081</id><snippet>xi = np.linspace(0, 2, 10)
yi = 0.8 * xi
zi = 1.2 * xi
print ndimage.map_coordinates(data, [zi, yi, xi])
</snippet></ROW><ROW><id>16984081</id><snippet>[ 0  1  4  8 12 17 21 24  0  0]
</snippet></ROW><ROW><id>16984081</id><snippet>0</snippet></ROW><ROW><id>16984081</id><snippet>zi</snippet></ROW><ROW><id>16984081</id><snippet>-999</snippet></ROW><ROW><id>16984081</id><snippet>nan</snippet></ROW><ROW><id>16984081</id><snippet>nan</snippet></ROW><ROW><id>16984081</id><snippet>In [75]: ndimage.map_coordinates(data, [zi, yi, xi], cval=-999)
Out[75]: array([   0,    1,    4,    8,   12,   17,   21,   24, -999, -999])
</snippet></ROW><ROW><id>16984081</id><snippet>In [76]: ndimage.map_coordinates(data, [zi, yi, xi], mode='nearest')
Out[76]: array([ 0,  1,  4,  8, 12, 17, 21, 24, 25, 25])
</snippet></ROW><ROW><id>16984081</id><snippet>"reflect"</snippet></ROW><ROW><id>16984081</id><snippet>"wrap"</snippet></ROW><ROW><id>16984081</id><snippet>"nearest"</snippet></ROW><ROW><id>16984081</id><snippet>"constant"</snippet></ROW><ROW><id>16984081</id><snippet>xi = np.linspace(0, 5, 10)
yi, zi = np.zeros_like(xi), np.zeros_like(xi)
</snippet></ROW><ROW><id>16984081</id><snippet>In [77]: ndimage.map_coordinates(data, [zi, yi, xi])
Out[77]: array([0, 0, 1, 2, 0, 0, 0, 0, 0, 0])
</snippet></ROW><ROW><id>16984081</id><snippet>In [78]: ndimage.map_coordinates(data, [zi, yi, xi], mode='reflect')
Out[78]: array([0, 0, 1, 2, 2, 1, 2, 1, 0, 0])

In [78]: ndimage.map_coordinates(data, [zi, yi, xi], mode='wrap')
Out[78]: array([0, 0, 1, 2, 0, 1, 1, 2, 0, 1])
</snippet></ROW><ROW><id>16984085</id><snippet>nargs</snippet></ROW><ROW><id>16984085</id><snippet>parser.add_argument('--template', metavar='FILE', required=True)
</snippet></ROW><ROW><id>16984085</id><snippet>nargs</snippet></ROW><ROW><id>16984085</id><snippet>nargs=1</snippet></ROW><ROW><id>16984094</id><snippet>split()</snippet></ROW><ROW><id>16984094</id><snippet>split()</snippet></ROW><ROW><id>16984094</id><snippet>import re

urls = [
    'https://www.facebook.com/facebook/posts/10151927580276729',
    'https://www.facebook.com/photo.php?fbid=10151496277356729&amp;set=a.10150629589136729.412063.20531316728&amp;type=1',
    ]

for u in urls:
    try:
        print re.search(r'fbid=([0-9]+)', u).group(1)
    except:
        print u.split('/')[-1]
</snippet></ROW><ROW><id>16984094</id><snippet>10151927580276729
10151496277356729
</snippet></ROW><ROW><id>16985066</id><snippet>main.py
mypackage/
    __init__.py
    mymodule.py
    myothermodule.py
</snippet></ROW><ROW><id>16985066</id><snippet>mymodule.py</snippet></ROW><ROW><id>16985066</id><snippet>#!/usr/bin/env python3

# Exported function
def as_int(a):
    return int(a)

# Test function for module  
def _test():
    assert as_int('1') == 1

if __name__ == '__main__':
    _test()
</snippet></ROW><ROW><id>16985066</id><snippet>myothermodule.py</snippet></ROW><ROW><id>16985066</id><snippet>#!/usr/bin/env python3

from .mymodule import as_int

# Exported function
def add(a, b):
    return as_int(a) + as_int(b)

# Test function for module  
def _test():
    assert add('1', '1') == 2

if __name__ == '__main__':
    _test()
</snippet></ROW><ROW><id>16985066</id><snippet>main.py</snippet></ROW><ROW><id>16985066</id><snippet>#!/usr/bin/env python3

from mypackage.myothermodule import add

def main():
    print(add('1', '1'))

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16985066</id><snippet>main.py</snippet></ROW><ROW><id>16985066</id><snippet>mypackage/mymodule.py</snippet></ROW><ROW><id>16985066</id><snippet>mypackage/myothermodule.py</snippet></ROW><ROW><id>16985066</id><snippet>from .mymodule import as_int
</snippet></ROW><ROW><id>16985066</id><snippet>python3 -m mypackage.myothermodule
</snippet></ROW><ROW><id>16985066</id><snippet>#!/usr/bin/env python3</snippet></ROW><ROW><id>16985066</id><snippet>mymodule</snippet></ROW><ROW><id>16985066</id><snippet>from mymodule import as_int
</snippet></ROW><ROW><id>16985066</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16985066</id><snippet>from mypackage.mymodule import as_int
</snippet></ROW><ROW><id>16985066</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>16985066</id><snippet>import sys
import os

PACKAGE_PARENT = '..'
SCRIPT_DIR = os.path.dirname(os.path.realpath(os.path.join(os.getcwd(), os.path.expanduser(__file__))))
sys.path.append(os.path.normpath(os.path.join(SCRIPT_DIR, PACKAGE_PARENT)))

from mypackage.mymodule import as_int
</snippet></ROW><ROW><id>16985066</id><snippet>__main__</snippet></ROW><ROW><id>16985066</id><snippet>wx.Frame</snippet></ROW><ROW><id>16985582</id><snippet>@event.listens_for(Client.name, 'set')
def update_mcodes(target, value, oldvalue, initiator):
    target.recalculate_mcodes(value)
</snippet></ROW><ROW><id>16985582</id><snippet>event</snippet></ROW><ROW><id>16985651</id><snippet>self.something</snippet></ROW><ROW><id>16985651</id><snippet>self</snippet></ROW><ROW><id>16985651</id><snippet>post</snippet></ROW><ROW><id>16985651</id><snippet>self.msg</snippet></ROW><ROW><id>16985790</id><snippet>.fetchall()</snippet></ROW><ROW><id>16985790</id><snippet>tuple</snippet></ROW><ROW><id>16985790</id><snippet>list</snippet></ROW><ROW><id>16985790</id><snippet>fields = [tup[0] for tup in querycurs.description]
dict_agriculture = [dict(zip(fields, row)) for row in querycurs]
</snippet></ROW><ROW><id>16986029</id><snippet>urlencode</snippet></ROW><ROW><id>16986029</id><snippet>&gt;&gt;&gt; from urllib.parse import urlencode
&gt;&gt;&gt; params = 'Aserejé'
&gt;&gt;&gt; urlencode({'params': params})
'params=Aserej%C3%A9'
</snippet></ROW><ROW><id>16986029</id><snippet>conn.request(httpMethod, '/?' + urlencode({'params': params}))
</snippet></ROW><ROW><id>16986288</id><snippet>myapp</snippet></ROW><ROW><id>16986288</id><snippet>from myapp import mymodule
</snippet></ROW><ROW><id>16986288</id><snippet>from .. import mymodule
</snippet></ROW><ROW><id>16986368</id><snippet>.text</snippet></ROW><ROW><id>16986368</id><snippet>.string</snippet></ROW><ROW><id>16986368</id><snippet>&gt;&gt;&gt;&gt; soup.td.a.text.strip()
u'android'
</snippet></ROW><ROW><id>16986368</id><snippet>strip</snippet></ROW><ROW><id>16986368</id><snippet>a</snippet></ROW><ROW><id>16986368</id><snippet>a</snippet></ROW><ROW><id>16986714</id><snippet>def product_Image(self):
    """Method to return store image for admin panel"""

    images = ''
    for image_path in self.image_paths:
        images += '&lt;img src="/images/%s" height="150" width="150"/&gt;' % image_path            
    return images
product_Image.allow_tags = True
</snippet></ROW><ROW><id>16986714</id><snippet>product_Image.allow_tags = True</snippet></ROW><ROW><id>16986775</id><snippet>R = np.einsum('ij,kj',A,A)
</snippet></ROW><ROW><id>16986775</id><snippet>In [7]: A = np.random.random(size=(500,400))

In [8]: %timeit R = (A[:,np.newaxis,:] * A[np.newaxis,:,:]).sum(2)
1 loops, best of 3: 1.21 s per loop

In [9]: %timeit R = np.einsum('ij,kj',A,A)
10 loops, best of 3: 54 ms per loop
</snippet></ROW><ROW><id>16986775</id><snippet>A</snippet></ROW><ROW><id>16986775</id><snippet>(500,4000)</snippet></ROW><ROW><id>16986775</id><snippet>np.einsum</snippet></ROW><ROW><id>16986775</id><snippet>np.dot(A,A.T)</snippet></ROW><ROW><id>16986775</id><snippet>np.einsum</snippet></ROW><ROW><id>16986905</id><snippet>map</snippet></ROW><ROW><id>16986918</id><snippet>@signals.user_confirmed.connect_via(app)
def user_confirmed_sighandler(app, user):
    user.api_key = generate_key()
    return
</snippet></ROW><ROW><id>16986918</id><snippet>@signals.user_registered.connect_via(app)</snippet></ROW><ROW><id>16986985</id><snippet>[round(x) if x &gt; 0.5 else x for x in lst] 
</snippet></ROW><ROW><id>16986985</id><snippet>&gt;&gt;&gt; [round(x) if x &gt; 0.5 else x for x in lst] 
[54.0, 86.0, 0.3, 1.0, 1.0, 14.0, 0.2]
</snippet></ROW><ROW><id>16986985</id><snippet>int</snippet></ROW><ROW><id>16986985</id><snippet>round</snippet></ROW><ROW><id>16986985</id><snippet>&gt;&gt;&gt; [int(round(x)) if x &gt; 0.5 else x for x in lst] 
[54, 86, 0.3, 1, 1, 14, 0.2]
</snippet></ROW><ROW><id>16987069</id><snippet>global</snippet></ROW><ROW><id>16987069</id><snippet>column</snippet></ROW><ROW><id>16987069</id><snippet>global</snippet></ROW><ROW><id>16987069</id><snippet>column</snippet></ROW><ROW><id>16987069</id><snippet>column = []
</snippet></ROW><ROW><id>16987069</id><snippet>NameError</snippet></ROW><ROW><id>16987069</id><snippet>column</snippet></ROW><ROW><id>16987069</id><snippet>global</snippet></ROW><ROW><id>16987069</id><snippet>column</snippet></ROW><ROW><id>16987069</id><snippet>def somefunction():
    global column
    column = [1, 2, 3]
</snippet></ROW><ROW><id>16987069</id><snippet>global</snippet></ROW><ROW><id>16987069</id><snippet>column</snippet></ROW><ROW><id>16987069</id><snippet>&gt;&gt;&gt; foo = 1
&gt;&gt;&gt; def set_foo():
...     foo = 2
...
&gt;&gt;&gt; set_foo()
&gt;&gt;&gt; foo
1
</snippet></ROW><ROW><id>16987069</id><snippet>&gt;&gt;&gt; foo = 1
&gt;&gt;&gt; def set_foo():
...     global foo
...     foo = 2
...
&gt;&gt;&gt; set_foo()
&gt;&gt;&gt; foo
2
</snippet></ROW><ROW><id>16987449</id><snippet>urlpatterns = patterns('mini_url.views',
    url(r'^new_link/$', 'new_link'),
    url(r'^home/$', 'home'),
    url(r'^(?P&lt;short&gt;\w+)/$', 'target'),
)
</snippet></ROW><ROW><id>16987449</id><snippet>\w+</snippet></ROW><ROW><id>16987449</id><snippet>/home</snippet></ROW><ROW><id>16987449</id><snippet>/new_link</snippet></ROW><ROW><id>16987449</id><snippet>url(r'^(?P&lt;short&gt;\w+)/$', 'target'),</snippet></ROW><ROW><id>16987449</id><snippet>target</snippet></ROW><ROW><id>16987449</id><snippet>new_link</snippet></ROW><ROW><id>16987449</id><snippet>home</snippet></ROW><ROW><id>16987711</id><snippet>selectedLights = cmds.textScrollList ("lgtList", query = True, 
                                      selectItem = True) or [] 
</snippet></ROW><ROW><id>16987724</id><snippet>try:
    # some code
except Exception as e:
    print e
</snippet></ROW><ROW><id>16987837</id><snippet>closed='left'</snippet></ROW><ROW><id>16987837</id><snippet>cum_sum</snippet></ROW><ROW><id>16987837</id><snippet>sum_sum</snippet></ROW><ROW><id>16987837</id><snippet>(Pdb) df.groupby(TimeGrouper('20M',closed='left')).apply(f)
                    Buyer                Date  Quantity  cum_sum
Date                                                            
2013-09-01 13:00:00  Carl 2013-09-01 13:00:00         1       29
2013-09-01 13:05:00  Mark 2013-09-01 13:05:00         3       29
2013-10-01 20:00:00  Carl 2013-10-01 20:00:00         5       29
2013-10-03 10:00:00   Joe 2013-10-03 10:00:00         8       29
2013-12-02 12:00:00   Joe 2013-12-02 12:00:00         9       29
2013-12-02 14:00:00  Carl 2013-12-02 14:00:00         3       29
</snippet></ROW><ROW><id>16987970</id><snippet>In [38]: df.set_index('Date').groupby(pd.TimeGrouper('6M')).apply(lambda x: x.groupby('Branch').sum())
Out[38]: 
                   Quantity
           Branch          
2013-01-31 A              4
2014-01-31 A             22
           B              3
</snippet></ROW><ROW><id>16987970</id><snippet>In [55]: def testf(df):
   ....:     if (df['Buyer'] == 'Mark').sum() &gt; 0:
   ....:         return Series(dict(quantity = df['Quantity'].sum(), buyer = 'mark'))
   ....:     return Series(dict(quantity = df['Quantity'].sum()*100, buyer = 'other'))
   ....: 

In [56]: df.set_index('Date').groupby(pd.TimeGrouper('6M')).apply(lambda x: x.groupby('Branch').apply(testf))
Out[56]: 
                   buyer quantity
           Branch                
2013-01-31 A        mark        4
2014-01-31 A       other     2200
           B       other      300
</snippet></ROW><ROW><id>16988531</id><snippet>x0 = 1
def fun2(f1, x):
    return f1(x)
</snippet></ROW><ROW><id>16988531</id><snippet>#### #0 -- function attributes
def fun1(x):
    return x + fun1.c

fun1.c = 1;  y = fun2(fun1, x0);   print(y)   # --&gt; 2
fun1.c = 2;  y = fun2(fun1, x0);   print(y)   # --&gt; 3

#### #1 -- closure
def fun1(c):
    def wrapper(x):
        return x + c
    return wrapper

y = fun2(fun1(c=1), x0);   print(y)   # --&gt; 2
y = fun2(fun1(c=2), x0);   print(y)   # --&gt; 3

#### #2 -- functools.partial object
from functools import partial

def fun1(x, c):
    return x + c

y = fun2(partial(fun1, c=1), x0);   print(y)   # --&gt; 2
y = fun2(partial(fun1, c=2), x0);   print(y)   # --&gt; 3

#### #3 -- function object (functor)
class Fun1(object):
    def __init__(self, c):
        self.c = c
    def __call__(self, x):
        return x + self.c

y = fun2(Fun1(c=1), x0);   print(y)   # --&gt; 2
y = fun2(Fun1(c=2), x0);   print(y)   # --&gt; 3

#### #4 -- function decorator
def fun1(x, c):
    return x + c

def decorate(c):
    def wrapper(f):
        def wrapped(x):
            return f(x, c)
        return wrapped
    return wrapper

y = fun2(decorate(c=1)(fun1), x0);   print(y)   # --&gt; 2
y = fun2(decorate(c=2)(fun1), x0);   print(y)   # --&gt; 3
</snippet></ROW><ROW><id>16988531</id><snippet>c=</snippet></ROW><ROW><id>16988608</id><snippet>values</snippet></ROW><ROW><id>16988608</id><snippet>import sqlite3
c = sqlite3.connect(':memory:')
c.execute("create table mytable (_id integer primary key, a, b)")
c.execute("insert into mytable (a,b) values  (?, ?)", (2,3))
c.execute('select * from mytable').fetchall()
# [(1,2,3)]
</snippet></ROW><ROW><id>16988624</id><snippet>str</snippet></ROW><ROW><id>16988624</id><snippet>np.str</snippet></ROW><ROW><id>16988624</id><snippet>object</snippet></ROW><ROW><id>16988624</id><snippet>In [11]: pd.read_csv('a', dtype=object, index_col=0)
Out[11]:
                      A                     B
1A  0.35633069074776547     0.745585398803751
1B  0.20037376323337375  0.013921830784260236
</snippet></ROW><ROW><id>16988624</id><snippet>In [12]: pd.read_csv('a', index_col=0)
Out[12]:
           A         B
1A  0.356331  0.745585
1B  0.200374  0.013922
</snippet></ROW><ROW><id>16988768</id><snippet>names = ['my _id', 'some a', 'some b']
sanitized_names = "({})".format(", ".join(x.replace(' ','') for x in names))

# =&gt; (my_id, somea, someb)
</snippet></ROW><ROW><id>16988768</id><snippet>dr1</snippet></ROW><ROW><id>16988768</id><snippet>dr1.fieldnames</snippet></ROW><ROW><id>16988768</id><snippet>[tuple(a[x] for x in dr1.fieldnames) for a in dr1]</snippet></ROW><ROW><id>16988863</id><snippet>callback()</snippet></ROW><ROW><id>16988863</id><snippet>intProgress</snippet></ROW><ROW><id>16988863</id><snippet>global</snippet></ROW><ROW><id>16988863</id><snippet>def callback(p):
    global intProgress
    intProgress = intProgress + 1024
    ##sys.stdout.write(str(intProgress))
    sys.stdout.write("-")
</snippet></ROW><ROW><id>16988863</id><snippet>intProgress</snippet></ROW><ROW><id>16988887</id><snippet>if req.path_info.startswith('wikitest'):
    # Do something useful.
</snippet></ROW><ROW><id>16988887</id><snippet>if req.method == 'GET':
    # Handle the request
    if reg.args.get('name'):
        name = req.args['name']
        self.log.debug('Got request for name=%s' % name)
</snippet></ROW><ROW><id>16989019</id><snippet>df = pd.read_csv(file_name, sep=',\s+', header=None)
</snippet></ROW><ROW><id>16989019</id><snippet>df.index = pd.date_range('2012-01-01', freq='D', periods=len(df))
from pandas.tseries.offsets import Hour
df.columns = [Hour(7+t) for t in df.columns]

In [5]: df
Out[5]:
            &lt;7 Hours&gt;  &lt;8 Hours&gt;  &lt;9 Hours&gt;  &lt;10 Hours&gt;  &lt;11 Hours&gt;   &lt;12 Hours&gt;  &lt;13 Hours&gt;  &lt;14 Hours&gt;  &lt;15 Hours&gt;  &lt;16 Hours&gt;
2012-01-01   1.695119   0.575612   0.314374    0.354588    0.158412   0.282396   -0.181809    1.347614   -1.505908    1.292466
2012-01-02  -1.667647   0.148810   1.038322   -0.352292    1.357059  -1.567471   -0.367839   -0.576369    0.985439    1.630311
2012-01-03   0.877638   0.607572   0.649083   -0.683577    0.334998  -0.085571    1.718556   -0.612351   -0.325201    1.541626
</snippet></ROW><ROW><id>16989019</id><snippet>s = df.stack()
s.index = [x[0]+x[1] for x in s.index]

In [8]: s
Out[8]:
2012-01-01 07:00:00    1.695119
2012-01-01 08:00:00    0.575612
2012-01-01 09:00:00    0.314374
2012-01-01 10:00:00    0.354588
2012-01-01 11:00:00    0.158412
2012-01-01 12:00:00    0.282396
2012-01-01 13:00:00   -0.181809
2012-01-01 14:00:00    1.347614
2012-01-01 15:00:00   -1.505908
2012-01-01 16:00:00    1.292466
2012-01-02 07:00:00   -1.667647
2012-01-02 08:00:00    0.148810
...
</snippet></ROW><ROW><id>16989019</id><snippet>Minute</snippet></ROW><ROW><id>16989019</id><snippet>Second</snippet></ROW><ROW><id>16989302</id><snippet>if monshp==0:
</snippet></ROW><ROW><id>16989508</id><snippet>import matplotlib.pyplot as plt

xdata = [5, 10, 15, 20, 25, 30, 35, 40]
ydata = [1, 3, 5, 7, 9, 11, 13, 15]
yerr_dat = 0.5

plt.figure()

dens = plt.plot(xdata, ydata, 'go--', zorder=1)

plt.errorbar(xdata, ydata, yerr = yerr_dat, zorder=2, fmt='ko')

plt.legend(dens, ['Density Profile'])

plt.show()
</snippet></ROW><ROW><id>16989508</id><snippet>label='_nolegend_'</snippet></ROW><ROW><id>16989508</id><snippet>errorbar</snippet></ROW><ROW><id>16989508</id><snippet>import matplotlib.pyplot as plt

xdata = [5, 10, 15, 20, 25, 30, 35, 40]
ydata = [1, 3, 5, 7, 9, 11, 13, 15]
yerr_dat = 0.5

plt.figure()

# Note the comma! We're unpacking the tuple that `plot` returns...
dens, = plt.plot(xdata, ydata, 'go--', zorder=1)
hline = plt.axhline(5)

plt.errorbar(xdata, ydata, yerr = yerr_dat, zorder=2, fmt='ko')

plt.legend([dens, hline], ['Density Profile', 'Ceiling'], loc='upper left')

plt.show()
</snippet></ROW><ROW><id>16989634</id><snippet>imshow</snippet></ROW><ROW><id>16989634</id><snippet>imshow</snippet></ROW><ROW><id>16989634</id><snippet>contour</snippet></ROW><ROW><id>16989634</id><snippet>aspect='auto'</snippet></ROW><ROW><id>16989634</id><snippet>ax.imshow(z, cmap=cm.jet)
</snippet></ROW><ROW><id>16989634</id><snippet>ax.matshow</snippet></ROW><ROW><id>16989634</id><snippet>imshow</snippet></ROW><ROW><id>16989634</id><snippet>matshow</snippet></ROW><ROW><id>16989634</id><snippet>imshow</snippet></ROW><ROW><id>16989634</id><snippet>aspect='auto'</snippet></ROW><ROW><id>16989740</id><snippet>import sys

def foo(x):
    print('foo(%r)' % x)
    if not (0 &lt;= x &lt;= 100):
        raise ValueError

def main():
    try:
        foo(-1)
    except ValueError:
        tb = sys.exc_info()[2]
    while tb.tb_next is not None:
        tb = tb.tb_next
    funcname = tb.tb_frame.f_code.co_name
    func = globals()[funcname]
    func(50)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16989740</id><snippet>foo(-1)
foo(50)
</snippet></ROW><ROW><id>16989801</id><snippet>func_defaults</snippet></ROW><ROW><id>16989801</id><snippet>__defaults__</snippet></ROW><ROW><id>16989801</id><snippet>&gt;&gt;&gt; def foo(a=True):
...     print a
... 
&gt;&gt;&gt; foo()
True
&gt;&gt;&gt; foo.func_defaults
(True,)
&gt;&gt;&gt; foo.func_defaults = (False,)
&gt;&gt;&gt; foo()
False
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16989801</id><snippet>import two
def main(argv):
    opts, _ = getopt.getopt(argv, 'hs', ['--strict='])
    for opt, _ in opts:
        if opt in ('-s', '--strict'):
            config.strict = True

    two.foo(s=config.strict)     
</snippet></ROW><ROW><id>16989869</id><snippet>read</snippet></ROW><ROW><id>16989869</id><snippet>read</snippet></ROW><ROW><id>16989869</id><snippet>rm ~/out.txt
for ((i=0; i&lt;10; i++)); do
  read j
  if [ $? != 0 ]; then
    break
  fi
  echo "read: '$j'" &gt;&gt; ~/out.txt
done
</snippet></ROW><ROW><id>16989890</id><snippet>import re

r = re.compile(r'^IN\s+PTR\s+([\d]{1,3}\.[\d]{1,3}\.[\d]{1,3}\.([\d]{1,3})\.)\s*$')

with open("my.zone", "rt") as file:
    for line in file:
        m = r.match(line)
        if m:
            print("{1} IN PTR {0}".format(*m.groups()))
</snippet></ROW><ROW><id>16989890</id><snippet>sh$ cat my.zone
IN    PTR   10.102.36.38.
IN    PTR   .
IN    PTR   192.168.100.11.
IN    PTR   192.168.100.12.
</snippet></ROW><ROW><id>16989890</id><snippet>38 IN PTR 10.102.36.38.
11 IN PTR 192.168.100.11.
12 IN PTR 192.168.100.12.
</snippet></ROW><ROW><id>16990092</id><snippet>{% macro input(name, value='', type='text', size=20) -%}
    &lt;input type="{{ type }}" name="{{ name }}" value="{{
        value|e }}" size="{{ size }}"&gt;
{%- endmacro %}
</snippet></ROW><ROW><id>16990092</id><snippet>&lt;p&gt;{{ input('username') }}&lt;/p&gt;
&lt;p&gt;{{ input('password', type='password') }}&lt;/p&gt;
</snippet></ROW><ROW><id>16990109</id><snippet>average</snippet></ROW><ROW><id>16990109</id><snippet>str()</snippet></ROW><ROW><id>16990109</id><snippet>outFile.write(str(average)) 
</snippet></ROW><ROW><id>16990109</id><snippet>file.write</snippet></ROW><ROW><id>16990109</id><snippet>&gt;&gt;&gt; print file.write.__doc__
write(str) -&gt; None.  Write string str to file.  #expects a string

Note that due to buffering, flush() or close() may be needed before
the file on disk reflects the data written.
</snippet></ROW><ROW><id>16990109</id><snippet>outFile_name = "svm_light/{0}/predictions-average.txt".format(hashtag)
in_file_name = 'svm_light/{0}/predictions-{1}'.format(hashtag,segMent)
with open(in_file_name) as f, open(outFile_name, 'w') as outFile:
    tot_sum = 0
    for i,x in enumerate(f, 1):
        val = float(x)
        tot_sum += val            
        average = tot_sum/i
        outFile.write(average + '\n') # '\n' adds a new-line  
</snippet></ROW><ROW><id>16990134</id><snippet>from lxml import etree

root = etree.parse('xml.xml')
rows = root.findall('row')

all_data = []

for row in rows:
    field_dict = {}
    fields = row.findall('field')

    for field in fields:
        field_dict[field.get('name')] = field.text

    print(field_dict)

    all_data.append(field_dict)

print(all_data)


--output:--
{'item 3': 'Accepted', 'item 2': 'Accepted', 'item 1': 'bar 1', 'id': '1', 'name': 'foo 1'}
{'item 3': 'Accepted', 'item 2': 'Declined', 'item 1': 'bar 2', 'id': '2', 'name': 'foo 2'}
{'item 3': 'Declined', 'item 2': 'Accepted', 'item 1': 'bar 3', 'id': '3', 'name': 'foo 3'}


[{'item 3': 'Accepted', 'item 2': 'Accepted', 'item 1': 'bar 1', 'id': '1', 'name': 'foo 1'}, {'item 3': 'Accepted', 'item 2': 'Declined', 'item 1': 'bar 2', 'id': '2', 'name': 'foo 2'}, {'item 3': 'Declined', 'item 2': 'Accepted', 'item 1': 'bar 3', 'id': '3', 'name': 'foo 3'}]
</snippet></ROW><ROW><id>16990134</id><snippet>from lxml import etree

root = etree.parse('xml.xml')
rows = root.findall('row')

#Create a set:
allowed_names = {
    'id',
    'name',
    'item 1',
    'item 2',
    'item 3'
}

all_data = []


for row in rows:
    field_dict = {}
    fields = row.findall('field')

    for field in fields:
        name_val = field.get('name')

        if name_val in allowed_names:
            field_dict[name_val] = field.text

    print(field_dict)

    all_data.append(field_dict)

print(all_data)
</snippet></ROW><ROW><id>16990147</id><snippet>count</snippet></ROW><ROW><id>16990147</id><snippet>header = np.fromfile(fobj, dtype=dt, count=1)[0]
</snippet></ROW><ROW><id>16990147</id><snippet>repr</snippet></ROW><ROW><id>16990147</id><snippet>import numpy as np

headerfmt='20i,20f,a80'
dt = np.dtype(headerfmt)

# Note the 0-index!
x = np.zeros(1, dtype=dt)[0]

print x['f0'], x['f1'], x['f2']
ints, floats, chars = x
</snippet></ROW><ROW><id>16990171</id><snippet>np.zeros_like(data)</snippet></ROW><ROW><id>16990171</id><snippet>data</snippet></ROW><ROW><id>16990171</id><snippet>data</snippet></ROW><ROW><id>16990171</id><snippet>NameError</snippet></ROW><ROW><id>16990171</id><snippet>data</snippet></ROW><ROW><id>16990171</id><snippet>zdata</snippet></ROW><ROW><id>16990171</id><snippet>zdata</snippet></ROW><ROW><id>16990171</id><snippet>np.zeros_like(data) + 1. / data.size
</snippet></ROW><ROW><id>16990171</id><snippet>np.ones_like(data) / data.size
</snippet></ROW><ROW><id>16990235</id><snippet>import re
print re.findall(r'\.(x\d{2}y\d{2})\.', "name.x00y00.whatever")
# Prints ['x00y00']
</snippet></ROW><ROW><id>16990235</id><snippet>name</snippet></ROW><ROW><id>16990235</id><snippet>whatever</snippet></ROW><ROW><id>16990235</id><snippet>x00y00</snippet></ROW><ROW><id>16990235</id><snippet>\.</snippet></ROW><ROW><id>16990235</id><snippet>\d{2}</snippet></ROW><ROW><id>16990235</id><snippet>findall</snippet></ROW><ROW><id>16990318</id><snippet>re.MatchObject</snippet></ROW><ROW><id>16990318</id><snippet>help</snippet></ROW><ROW><id>16990318</id><snippet>python</snippet></ROW><ROW><id>16990318</id><snippet>python.exe</snippet></ROW><ROW><id>16990318</id><snippet>&gt;&gt;&gt; m = re.match('a','a')  #example match command
&gt;&gt;&gt; help(m)
</snippet></ROW><ROW><id>16990406</id><snippet>Paid.objects.get(expire='expire')
</snippet></ROW><ROW><id>16990406</id><snippet>Paid.objects.get(user=request.user).expire &gt;= d.strptime("%Y-%m-%d"):
</snippet></ROW><ROW><id>16990406</id><snippet>&gt;&gt;&gt; datetime.datetime.now().date() + datetime.timedelta(days=29)
datetime.date(2013, 7, 6)
&gt;&gt;&gt; str(datetime.datetime.now().date() + datetime.timedelta(days=29))
'2013-07-06'
</snippet></ROW><ROW><id>16990429</id><snippet>command = ["somecommand", test]
subprocess.Popen(command, stdout=subprocess.PIPE)
</snippet></ROW><ROW><id>16990429</id><snippet>test</snippet></ROW><ROW><id>16990429</id><snippet>subprocess.Popen()</snippet></ROW><ROW><id>16990733</id><snippet>import os.path
with open('idfile') as fin:
     header = next(fin) #read the `#ID` comment header line.  Don't use it.
     for line in fin:
         fname = 'datafileID{0}.csv'.format(line.strip())
         if not os.path.exists(fname):
             print fname
</snippet></ROW><ROW><id>16990953</id><snippet>update</snippet></ROW><ROW><id>16990953</id><snippet>pygame.Rect</snippet></ROW><ROW><id>16990953</id><snippet>self.rect</snippet></ROW><ROW><id>16990953</id><snippet>map</snippet></ROW><ROW><id>16990953</id><snippet>pygame.Rect</snippet></ROW><ROW><id>16990953</id><snippet>list</snippet></ROW><ROW><id>16990953</id><snippet>alg.w_avg</snippet></ROW><ROW><id>16990953</id><snippet>alg.w_avg</snippet></ROW><ROW><id>16990953</id><snippet>Rect</snippet></ROW><ROW><id>16990953</id><snippet>self.rect = Rect(map(alg.w_avg, zip(self.rect, self.dest_vector))) 
</snippet></ROW><ROW><id>16990953</id><snippet>w_avg</snippet></ROW><ROW><id>16990953</id><snippet>self.rect.topleft = map(alg.w_avg, zip(self.rect, self.dest_vector))
</snippet></ROW><ROW><id>16990953</id><snippet>center</snippet></ROW><ROW><id>16990953</id><snippet>self.rect</snippet></ROW><ROW><id>16990960</id><snippet>([^#]+)</snippet></ROW><ROW><id>16990960</id><snippet>([^#]*[^#\s])\s*</snippet></ROW><ROW><id>16990960</id><snippet>import re

strings = ['Green Lantern #21', 
    'Green Lantern #21 (Variant Cover Edition)', 
    'Dejah Thoris &amp; Green Men Of Mars #4 (of 8)', 
    'Dejah Thoris &amp; Green Men Of Mars #4 (of 8) (Variant Cover Edition)', 
    'Macabre One Shot', 
    'Detective Comics #21 Combo Pack']

for s in strings:
    print re.match(r'([^#]*[^#\s])\s*(?:#(\d+)\s*)?(?:\(of (\d+)\)\s*)?(.+)?', s).groups()
</snippet></ROW><ROW><id>16990960</id><snippet>('Green Lantern', '21', None, None)
('Green Lantern', '21', None, '(Variant Cover Edition)')
('Dejah Thoris &amp; Green Men Of Mars', '4', '8', None)
('Dejah Thoris &amp; Green Men Of Mars', '4', '8', '(Variant Cover Edition)')
('Macabre One Shot', None, None, None)
('Detective Comics', '21', None, 'Combo Pack')
</snippet></ROW><ROW><id>16991175</id><snippet>N</snippet></ROW><ROW><id>16991175</id><snippet>i &lt; N</snippet></ROW><ROW><id>16991175</id><snippet>N = 5000</snippet></ROW><ROW><id>16991175</id><snippet>N = np.array(5000, dtype=np.int)</snippet></ROW><ROW><id>16991175</id><snippet>C</snippet></ROW><ROW><id>16991175</id><snippet>return_val</snippet></ROW><ROW><id>16991175</id><snippet>return_val = C;</snippet></ROW><ROW><id>16991175</id><snippet>don't know how to convert ‘blitz::Array&lt;double, 2&gt;’ to ‘const py::object&amp;’</snippet></ROW><ROW><id>16991175</id><snippet>weave.inline</snippet></ROW><ROW><id>16991175</id><snippet>None</snippet></ROW><ROW><id>16991175</id><snippet>C = weave.inline(...</snippet></ROW><ROW><id>16991175</id><snippet>C</snippet></ROW><ROW><id>16991175</id><snippet>benchmark</snippet></ROW><ROW><id>16991175</id><snippet>import time
import numpy as np
from scipy import weave
from scipy.weave import converters


def benchmark():
    N = 5000

    A = np.random.rand(N, N)
    B = np.random.rand(N, N)
    C = np.zeros([N, N], dtype=float)

    t = time.clock()
    weave_inline_loop(A, B, C, N)
    print time.clock() - t


def weave_inline_loop(A, B, C, N):
    code = """
           int i, j;
           for (i = 0; i &lt; N; ++i)
           {
               for (j = 0; j &lt; N; ++j)
               {
                   C(i, j) = A(i, j) * B(i, j);
               }
           }
           """
    weave.inline(code, ['A', 'B', 'C', 'N'], type_converters=converters.blitz, compiler='gcc')
</snippet></ROW><ROW><id>16991380</id><snippet>l = [(1,2),(2,3),(3,4),(4,5)]  # replace with whatever your full list is
import itertools
for perm in itertools.permutations(l,len(l) / 2):
    pair_list = []
    for pair in perm:
        if pair[0] in itertools.chain(*(i for i in pair_list)) \
        or pair[1] in itertools.chain(*(i for i in pair_list)):
            break
        pair_list.append(pair)
    if len(pair_list) == len(l) / 2:
        unused = []
        for n in itertools.chain(*(i for i in l)):
            if n not in itertools.chain(*(i for i in pair_list)) and n not in unused:
                unused.append(n)
        print pair_list,'unused:',unused
</snippet></ROW><ROW><id>16991380</id><snippet>itertools.permutations</snippet></ROW><ROW><id>16991380</id><snippet>itertools.combinations</snippet></ROW><ROW><id>16991380</id><snippet>itertools.permutations</snippet></ROW><ROW><id>16991380</id><snippet>[(1, 2), (3, 4)] unused: [5]
[(1, 2), (4, 5)] unused: [3]
[(2, 3), (4, 5)] unused: [1]
[(3, 4), (1, 2)] unused: [5]
[(4, 5), (1, 2)] unused: [3]
[(4, 5), (2, 3)] unused: [1]
</snippet></ROW><ROW><id>16991380</id><snippet>itertools.combinations</snippet></ROW><ROW><id>16991380</id><snippet>[(1, 2), (3, 4)] unused: [5]
[(1, 2), (4, 5)] unused: [3]
[(2, 3), (4, 5)] unused: [1]
</snippet></ROW><ROW><id>16991380</id><snippet>itertools.product</snippet></ROW><ROW><id>16991380</id><snippet>l = [(1,2),(2,3),(3,4),(4,5),(7,8),(8,9)]
import itertools,math

## Create sublists for each set of adjacent pairs
l.sort(lambda x,y:cmp(x[0],y[0]))
newl = []
subl = []
for i in range(len(l)):
    if subl == []:
        subl.append(l[i])
    else:
        if l[i][0] == subl[-1][1]:
            subl.append(l[i])
        else:
            newl.append(subl)
            subl = [l[i]]
newl.append(subl)
pair_lists = []

## Find all combinations for each sublist
for subl in newl:
    cur_pair_list = []
    for perm in itertools.combinations(subl,int(math.ceil(len(subl) / 2.0))):
        pair_list = []
        for pair in perm:
            if pair[0] in itertools.chain(*pair_list) \
            or pair[1] in itertools.chain(*pair_list):
                break
            pair_list.append(pair)
        if len(pair_list) == int(math.ceil(len(subl) / 2.0)):
            cur_pair_list.append(pair_list)
    pair_lists.append(cur_pair_list)

## Combine combinations for each sublist and determine unused for each combination
final_list = list(list(itertools.chain(*i)) for i in itertools.product(*pair_lists))
for subl in final_list:
    unused = []
    for n in itertools.chain(*l):
        if n not in itertools.chain(*subl) and n not in unused:
            unused.append(n)
    print subl,'unused:',unused
</snippet></ROW><ROW><id>16991380</id><snippet>[(1, 2), (3, 4), (7, 8)] unused: [5, 9]
[(1, 2), (3, 4), (8, 9)] unused: [5, 7]
[(1, 2), (4, 5), (7, 8)] unused: [3, 9]
[(1, 2), (4, 5), (8, 9)] unused: [3, 7]
[(2, 3), (4, 5), (7, 8)] unused: [1, 9]
[(2, 3), (4, 5), (8, 9)] unused: [1, 7]
</snippet></ROW><ROW><id>16991380</id><snippet>## Find all combinations for each sublist</snippet></ROW><ROW><id>16991380</id><snippet>l = [(427, 3434), (614, 2445), (840, 614), (910, 3939), (1065, 4314), (1347, 2616), (2445, 427), (2616, 3901), (2749, 1065), (3403, 910), (3434, 1347), (3659, 1411), (3901, 3684), (3939, 2638), (4203, 3403), (4314, 840)]
import itertools,math


def sort(l):
    l = list(l)
    newl = []
    subl = []
    i = l[0]
    while len(l) &gt; 0:
        subl.append(i)
        l.remove(i)
        k = None
        for j in l:
            if j[0] == i[1]:
                    k = j
                    break
        if k:
            i = k
        else:
            newl.append(subl)
            subl = []
            if len(l) &gt; 0:
                i = l[0]
    i = 0
    while i &lt; len(newl):
        j = 0
        while j &lt; len(newl):
            if newl[j][-1][1] == newl[i][0][0]:
                for k in newl[j][::-1]:
                    newl[i].insert(0,k)
                newl.pop(j)
                continue
            j += 1
        i += 1

    return newl

pair_lists = []
newl = sort(l)
</snippet></ROW><ROW><id>16991380</id><snippet>[(2749, 1065), (4314, 840), (614, 2445), (427, 3434), (1347, 2616), (3901, 3684), (4203, 3403), (910, 3939), (3659, 1411)] unused: [2638]
[(2749, 1065), (4314, 840), (614, 2445), (427, 3434), (1347, 2616), (3901, 3684), (4203, 3403), (3939, 2638), (3659, 1411)] unused: [910]
[(2749, 1065), (4314, 840), (614, 2445), (427, 3434), (1347, 2616), (3901, 3684), (3403, 910), (3939, 2638), (3659, 1411)] unused: [4203]
</snippet></ROW><ROW><id>16991485</id><snippet>try:  
    fileHandle = open(file, 'r')  
except IOError:  
    print "Error: failed to open file %s" % (file, )  
    raise
</snippet></ROW><ROW><id>16991593</id><snippet>multiprocessing</snippet></ROW><ROW><id>16991593</id><snippet>number_of_workers = number_of_cpus - 1</snippet></ROW><ROW><id>16991662</id><snippet>cmd.exe</snippet></ROW><ROW><id>16991662</id><snippet>cmd.exe</snippet></ROW><ROW><id>16991662</id><snippet>encode('utf-8')</snippet></ROW><ROW><id>16991662</id><snippet>print whatever_string.encode('utf-8')
</snippet></ROW><ROW><id>16991662</id><snippet>&gt; chcp 65001
&gt; python your_script.py
</snippet></ROW><ROW><id>16991662</id><snippet>u'\xc6blevangen'.encode('utf-8')
&gt;&gt;&gt;'\xc3\x86blevangen'
</snippet></ROW><ROW><id>16991738</id><snippet>StringIO</snippet></ROW><ROW><id>16991738</id><snippet>output = StringIO.StringIO(r.content)
</snippet></ROW><ROW><id>16991738</id><snippet>output</snippet></ROW><ROW><id>16991738</id><snippet>Image.open</snippet></ROW><ROW><id>16991845</id><snippet>action_function()
</snippet></ROW><ROW><id>16991845</id><snippet>action_function()</snippet></ROW><ROW><id>16991845</id><snippet>def action_function():</snippet></ROW><ROW><id>16991845</id><snippet>action_function()</snippet></ROW><ROW><id>16991845</id><snippet>name_x</snippet></ROW><ROW><id>16991845</id><snippet>fish = ["Mackarel", "Cod", "Salmon", "Herring", "Tuna"]
</snippet></ROW><ROW><id>16991845</id><snippet>gold</snippet></ROW><ROW><id>16991845</id><snippet>gold = gold + 5
</snippet></ROW><ROW><id>16991845</id><snippet>gold += 5
</snippet></ROW><ROW><id>16991845</id><snippet>.index(1)</snippet></ROW><ROW><id>16991845</id><snippet>1</snippet></ROW><ROW><id>16991845</id><snippet>if inventory[0] == something:
</snippet></ROW><ROW><id>16991845</id><snippet>if inventory[0] in fish:
    sold = inventory.pop(0)
    gold += 5
    print "You have sold a", sold, "for 5 gold coins!"
</snippet></ROW><ROW><id>16991845</id><snippet>if</snippet></ROW><ROW><id>16991845</id><snippet>while True:
    # print, get input, do actions
    # when done, use `break` to stop the loop.
</snippet></ROW><ROW><id>16991985</id><snippet>isinstance(variable, datetime.datetime)</snippet></ROW><ROW><id>16991985</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; now = datetime.datetime.now()
&gt;&gt;&gt; isinstance(now, datetime.datetime)
True
</snippet></ROW><ROW><id>16992014</id><snippet>unittest.TestCase.setUp()</snippet></ROW><ROW><id>16992014</id><snippet>unittest.TestCase.setUp</snippet></ROW><ROW><id>16992014</id><snippet>test_*</snippet></ROW><ROW><id>16992078</id><snippet>\w</snippet></ROW><ROW><id>16992078</id><snippet>print re.search(r'name\s""([-\w]+)""',k).group(1)
</snippet></ROW><ROW><id>16992365</id><snippet>for item in xrange(len(x)):
      x[x.keys()[item]] = re.findall(r'123[A-Z\.]{7}', ''.join(y[item]))
</snippet></ROW><ROW><id>16992365</id><snippet>x = ['123A......', '123AA......', '123AB......'] 
y = ['123AC.....', '123ABB....', '123ABC....']

dict(zip(x,y))
</snippet></ROW><ROW><id>16992365</id><snippet>{'123AB......': '123ABC....', '123A......': '123AC.....', '123AA......': '123ABB....'}</snippet></ROW><ROW><id>16992365</id><snippet>dict(zip(listA,listB))</snippet></ROW><ROW><id>16992374</id><snippet>import requests

url_t = "http://localhost:8000/records/%i"

def process_id(id):
    """process a single ID"""
    # fetch the data
    r = requests.get(url_t % id)
    # parse the JSON reply
    data = r.json()
    # and update some data with PUT
    requests.put(url_t % id, data=data)
    return data
</snippet></ROW><ROW><id>16992374</id><snippet>def process_range(id_range, store=None):
    """process a number of ids, storing the results in a dict"""
    if store is None:
        store = {}
    for id in id_range:
        store[id] = process_id(id)
    return store
</snippet></ROW><ROW><id>16992374</id><snippet>from threading import Thread

def threaded_process_range(nthreads, id_range):
    """process the id range in a specified number of threads"""
    store = {}
    threads = []
    # create the threads
    for i in range(nthreads):
        ids = id_range[i::nthreads]
        t = Thread(target=process_range, args=(ids,store))
        threads.append(t)

    # start the threads
    [ t.start() for t in threads ]
    # wait for the threads to finish
    [ t.join() for t in threads ]
    return store
</snippet></ROW><ROW><id>16992510</id><snippet>np.fft.fft</snippet></ROW><ROW><id>16992510</id><snippet>import numpy as np
import matplotlib.pyplot as plt

y = np.sin(np.linspace(0, 2*np.pi, 32, endpoint=False))

f = np.fft.fft(y)
n = len(f)
f_ = np.concatenate((f[0:(n+1)//2],
                     np.zeros(n//2),
                     [] if n%2 != 0 else f[(n+1)//2:(n+3)//2],
                     np.zeros(n//2),
                     f[(n+3)//2:]))
y_ = np.fft.ifft(f_)
plt.plot(y, 'ro')
plt.plot(y_, 'bo')
plt.show()
</snippet></ROW><ROW><id>16992526</id><snippet>c_layer_points = models.layer_points.objects.filter(location_id=c_location.pk, season_id=c_season.pk, line_path_id=c_line_path.pk,radar_id=c_radar.pk, layer_id__in=c_layer_pks, gps_time__gte=start_gps, gps_time__lte=stop_gps).values_list('gps_time', 'twtt')
</snippet></ROW><ROW><id>16992526</id><snippet>split_lst = zip(*c_layer_points)    
dict(gps_time=list(split_lst[0]), twtt=list(split_lst[1]))
</snippet></ROW><ROW><id>16992612</id><snippet>&gt;&gt;&gt; sum(generate() for i in range(1000000))
599042
&gt;&gt;&gt; sum(generate() for i in range(1000000))
599670
&gt;&gt;&gt; sum(generate() for i in range(1000000))
600011
&gt;&gt;&gt; sum(generate() for i in range(1000000))
599960
&gt;&gt;&gt; sum(generate() for i in range(1000000))
600544
</snippet></ROW><ROW><id>16992612</id><snippet>p = 0.40

def generate():
    return random.random() &gt;= p
</snippet></ROW><ROW><id>16992612</id><snippet>1</snippet></ROW><ROW><id>16992612</id><snippet>0</snippet></ROW><ROW><id>16992612</id><snippet>True</snippet></ROW><ROW><id>16992612</id><snippet>False</snippet></ROW><ROW><id>16992612</id><snippet>int(random.random() &gt;= p)</snippet></ROW><ROW><id>16992627</id><snippet>manager</snippet></ROW><ROW><id>16992627</id><snippet>multiprocessing</snippet></ROW><ROW><id>16992627</id><snippet>from multiprocessing import Process, Manager

def f(d):
    for i in range(10000):
        d['blah'] += 1

if __name__ == '__main__':
    manager = Manager()

    d = manager.dict()
    d['blah'] = 0
    procs = [ Process(target=f, args=(d,)) for _ in range(10) ]
    for p in procs:
        p.start()
    for p in procs:
        p.join()

    print d
</snippet></ROW><ROW><id>16992783</id><snippet>np.vectorize</snippet></ROW><ROW><id>16992783</id><snippet>.get</snippet></ROW><ROW><id>16992783</id><snippet>&gt;&gt;&gt; a = np.array([[1,2,3],
              [3,2,4]])
&gt;&gt;&gt; my_dict = {1:23, 2:34, 3:36, 4:45}
&gt;&gt;&gt; np.vectorize(my_dict.get)(a)
array([[23, 34, 36],
       [36, 34, 45]])
</snippet></ROW><ROW><id>16992878</id><snippet>soup = BeautifulSoup(webContent)
a = soup.find('a', href=True, text=re.compile("Next"))
if a:
    link = a["href"]
</snippet></ROW><ROW><id>16993019</id><snippet>    (let ((process
           (apply 'start-process "pymacs" buffer
                  (let ((python (getenv "PYMACS_PYTHON")))
                    (if (or (null python) (equal python ""))
                        pymacs-python-command
                      python))
                  "-c" (concat "import sys;"
                               " from Pymacs import main;"
                               " main(*sys.argv[1:])")
                  (append
                   (and (&gt;= emacs-major-version 24) '("-f"))
                   (mapcar 'expand-file-name pymacs-load-path)))))
</snippet></ROW><ROW><id>16993019</id><snippet>*Pymacs*</snippet></ROW><ROW><id>16993019</id><snippet>$PYMACS_PYTHON</snippet></ROW><ROW><id>16993019</id><snippet>pymacs-python-command</snippet></ROW><ROW><id>16993019</id><snippet>"python"</snippet></ROW><ROW><id>16993019</id><snippet>$ python -c 'import sys; from Pymacs import main; main(*sys.argv[1:])'
</snippet></ROW><ROW><id>16993019</id><snippet>-f</snippet></ROW><ROW><id>16993019</id><snippet>pymacs-load-path</snippet></ROW><ROW><id>16993019</id><snippet>nil</snippet></ROW><ROW><id>16993019</id><snippet>(version "0.25")
</snippet></ROW><ROW><id>16993019</id><snippet>python</snippet></ROW><ROW><id>16993019</id><snippet>$PYMACS_PYHON</snippet></ROW><ROW><id>16993019</id><snippet>pymacs-python-command</snippet></ROW><ROW><id>16993041</id><snippet># these are all of your j values
inds = np.arange(0,SRpixels)

# these are the j values you don't want to skip
sel = np.invert((abs(SR_pointCloud[inds,0]) &gt; SR_xMax) | (SR_pointCloud[inds,2] &gt; SR_zMax) | (SR_pointCloud[inds,2] &lt; 0))

RIGrid1_Location[sel,0] = np.floor(((SR_pointCloud[sel,0] + xPosition + 5) - xGrid1Center) / gridSize)
RIGrid1_Location[sel,1] = np.floor(((SR_pointCloud[sel,2] + yPosition) - yGrid1LowerBound) / gridSize)
RIGrid2_Location[sel,0] = np.floor(((SR_pointCloud[sel,0] + xPosition + 5) - xGrid2Center) / gridSize)
RIGrid2_Location[sel,1] = np.floor(((SR_pointCloud[sel,2] + yPosition) - yGrid2LowerBound) / gridSize)
</snippet></ROW><ROW><id>16993153</id><snippet>numpy.corrcoeff()</snippet></ROW><ROW><id>16993153</id><snippet>numpy.cov()</snippet></ROW><ROW><id>16993153</id><snippet>numpy.cov()</snippet></ROW><ROW><id>16993153</id><snippet>numpy.dot()</snippet></ROW><ROW><id>16993254</id><snippet>Employee()</snippet></ROW><ROW><id>16993254</id><snippet>_id = request.matchdict['employeeid']
employee = DBSession.query(Employee).get(_id)
form     = Form(request, EmployeeSchema(), obj=employee)

if form.validate():
    form.bind(employee)
    return HTTPFound(location = request.route_url('employees'))
</snippet></ROW><ROW><id>16993412</id><snippet>stdout</snippet></ROW><ROW><id>16993412</id><snippet>import sys

count = 0
while 1:
    print count
    sys.stdout.flush()
    count += 1
</snippet></ROW><ROW><id>16993412</id><snippet>-u</snippet></ROW><ROW><id>16993412</id><snippet>nohup python -u count.py &gt;&gt; test.log &amp;
</snippet></ROW><ROW><id>16993412</id><snippet>PYTHONUNBUFFERED</snippet></ROW><ROW><id>16993412</id><snippet>PYTHONUNBUFFERED=1 nohup python count.py &gt;&gt; test.log &amp;
</snippet></ROW><ROW><id>16993412</id><snippet>stdout</snippet></ROW><ROW><id>16993412</id><snippet>import os
import sys

sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
</snippet></ROW><ROW><id>16993412</id><snippet>print()</snippet></ROW><ROW><id>16993412</id><snippet>print(count, flush=True)
</snippet></ROW><ROW><id>16993487</id><snippet>import hashlib
from base64 import b64decode

def build_id(pub_key_pem):
    pub_key_der = b64decode(pub_key_pem)
    sha = hashlib.sha256(pub_key_der).hexdigest()
    prefix = sha[:32]

    reencoded = ""
    ord_a = ord('a')
    for old_char in prefix:
        code = int(old_char, 16)
        new_char = chr(ord_a + code)

        reencoded += new_char

    return reencoded

def main():
    pub_key = 'MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCjvF5pjuK8gRaw/2LoRYi37QqRd48B/FeO9yFtT6ueY84z/u0NrJ/xbPFc9OCGBi8RKIblVvcbY0ySGqdmp0QsUr/oXN0b06GL4iB8rMhlO082HhMzrClV8OKRJ+eJNhNBl8viwmtJs3MN0x9ljA4HQLaAPBA9a14IUKLjP0pWuwIDAQAB'

    id_ = build_id(pub_key)
    print(id_)

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>16993504</id><snippet>plt.imshow(grid_resid[:,:], aspect="auto")
plt.xticks(np.arange(grid_resid.shape[1]),xp)
plt.show()
</snippet></ROW><ROW><id>16993522</id><snippet>&gt;&gt;&gt; d = {'a':1,'b':2,'c':3}
&gt;&gt;&gt; a, c = (d[key] for key in ['a', 'c'])
&gt;&gt;&gt; a
1
&gt;&gt;&gt; c
3
</snippet></ROW><ROW><id>16993522</id><snippet>&gt;&gt;&gt; def multiget(mapping, *keys):
...     return (d[key] for key in keys)
&gt;&gt;&gt; a, c = multiget(d, 'a', 'c')
</snippet></ROW><ROW><id>16993522</id><snippet>multiget</snippet></ROW><ROW><id>16993522</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>16993522</id><snippet>&gt;&gt;&gt; a, c = operator.itemgetter('a', 'c')(d)
</snippet></ROW><ROW><id>16993625</id><snippet>isinstance()</snippet></ROW><ROW><id>16993625</id><snippet>for a in arr:
    if isinstance(a, (list, tuple)):
</snippet></ROW><ROW><id>16993625</id><snippet>flatten()</snippet></ROW><ROW><id>16993625</id><snippet>*</snippet></ROW><ROW><id>16993625</id><snippet>for sub in flatten(*a):
    yield sub
</snippet></ROW><ROW><id>16993625</id><snippet>&gt;&gt;&gt; def flatten(*arr):
...     for a in arr:
...         if isinstance(a, (list, tuple)):
...             for sub in flatten(*a):
...                 yield sub
...         else:
...              yield a
... 
&gt;&gt;&gt; print list(flatten(['hi there','how are you'],'well there','what?',[1, 23423,33]))
['hi there', 'how are you', 'well there', 'what?', 1, 23423, 33]
</snippet></ROW><ROW><id>16993660</id><snippet>pivot</snippet></ROW><ROW><id>16993660</id><snippet>In [11]: df
Out[11]:
  child  Time  grandchild
0  blah  1200         100
1  blah  1300          30
2   abc  1200           2
3   abc  1300           4
4   abc  1400           2

In [12]: df.pivot('Time', 'child', 'grandchild')
Out[12]:
child  abc  blah
Time
1200     2   100
1300     4    30
1400     2   NaN
</snippet></ROW><ROW><id>16993660</id><snippet>from lxml import etree
root = etree.parse(file_name)

parents = root.getchildren()[0].getchildren()

In [21]: elems = [(p.attrib['name'], int(c.attrib['Time']), int(gc.text))
                      for p in parents
                      for c in p
                      for gc in c]

In [22]: elems
Out[22]:
[('blah', 1200, 100),
 ('blah', 1300, 30),
 ('blah', 1400, 70),
 ('abc', 1200, 2),
 ('abc', 1300, 4),
 ('abc', 1400, 2)]
</snippet></ROW><ROW><id>16993660</id><snippet>files</snippet></ROW><ROW><id>16993660</id><snippet>elems = [(p.attrib['name'], int(c.attrib['Time']), int(gc.text))
            for f in files
            for p in etree.parse(f).getchildren()[0].getchildren()
            for c in p
            for gc in c]
</snippet></ROW><ROW><id>16993660</id><snippet>In [23]: pd.DataFrame(elems, columns=['child', 'Time', 'grandchild'])
Out[23]:
  child  Time grandchild
0  blah  1200        100
1  blah  1300         30
2  blah  1400         70
3   abc  1200          2
4   abc  1300          4
5   abc  1400          2
</snippet></ROW><ROW><id>16993823</id><snippet>data = np.zeros(shape=(n,6))
# some routine that partially populates the table
index = np.lexsort((data[:,1],data[:,0]))
data = data[index] # sort
</snippet></ROW><ROW><id>16993845</id><snippet>if set(short_tuple).issubset(longer_tuple):
    # all elements of short_tuple are in longer_tuple
</snippet></ROW><ROW><id>16993845</id><snippet>short_tuple</snippet></ROW><ROW><id>16993845</id><snippet>for short_tuple in mylist:
    short_tuple_set = set(short_tuple)

    for combo in itertools.combinations((range(1, 50)), 5):
        if short_tuple_set.issubset(combo):
            # matched!
</snippet></ROW><ROW><id>16993845</id><snippet>for short_tuple in mylist:
    short_tuple_set = set(short_tuple)

    remainder = (i for i in range(1, 50) if i not in short_tuple_set)
    for combo in itertools.combinations(remainder, 5 - len(short_tuple)):
        combo = sorted(combo + short_tuple)
</snippet></ROW><ROW><id>16993845</id><snippet>combo</snippet></ROW><ROW><id>16993845</id><snippet>short_tuple</snippet></ROW><ROW><id>16993845</id><snippet>sorted()</snippet></ROW><ROW><id>16993845</id><snippet>&gt;&gt;&gt; def set_test(mylist):
...     for short_tuple in mylist:
...         short_tuple_set = set(short_tuple)
...         for combo in itertools.combinations((range(1, 50)), 5):
...             if short_tuple_set.issubset(combo):
...                 yield combo
... 
&gt;&gt;&gt; def create_combos(mylist):
...     for short_tuple in mylist:
...         short_tuple_set = set(short_tuple)
...         remainder = (i for i in range(1, 50) if i not in short_tuple_set)
...         for combo in itertools.combinations(remainder, 5 - len(short_tuple)):
...             combo = sorted(combo + short_tuple)
...             yield combo
... 
&gt;&gt;&gt; all(a == tuple(b) for a, b in itertools.izip_longest(set_test(mylist), create_combos(mylist)))
True
</snippet></ROW><ROW><id>16993845</id><snippet>&gt;&gt;&gt; timeit('list(f(mylist))', 'from __main__ import set_test as f, mylist', number=10)
14.483195066452026
&gt;&gt;&gt; timeit('list(f(mylist))', 'from __main__ import create_combos as f, mylist', number=10)
0.019912004470825195
</snippet></ROW><ROW><id>16993898</id><snippet>locs = np.arange(grid_resid.shape[1],step=100) # locations
plt.xticks( locs, xp_int[locs], rotation="vertical" )
</snippet></ROW><ROW><id>16993953</id><snippet>doSmth() # simply creates generator without advancing it
</snippet></ROW><ROW><id>16993953</id><snippet>for x in doSmth()</snippet></ROW><ROW><id>16994093</id><snippet>argsort()</snippet></ROW><ROW><id>16994093</id><snippet>unravel_index()</snippet></ROW><ROW><id>16994093</id><snippet>result[np.diag_indices_from(result)] = 0.0
idx = np.argsort(result, axis=None)[-10:]
midx = np.unravel_index(idx, result.shape)
print midx
print result[midx]
</snippet></ROW><ROW><id>16994181</id><snippet>root = tree.getroot()
testsets = root.findall('testset')

for testset in sorted(testsets, key=lambda ts: int(ts.attrib['order'])):
    # test sets are looped over in the order specified in the `order` attributes
    testcases = testset.findall('testcase')
    for testcase in sorted(testcases, key=lambda ts: int(ts.attrib['order'])):
        # test cases are looped over in the order specified
</snippet></ROW><ROW><id>16994354</id><snippet>'module' object has no attribute 'detail'
</snippet></ROW><ROW><id>16994354</id><snippet>url(r'^(?P&lt;poll_id&gt;\d+)/$', views.detail, name='detail')
</snippet></ROW><ROW><id>16994354</id><snippet>views</snippet></ROW><ROW><id>16994354</id><snippet>views.py</snippet></ROW><ROW><id>16994354</id><snippet>detail</snippet></ROW><ROW><id>16994354</id><snippet>views.py</snippet></ROW><ROW><id>16994354</id><snippet>detail</snippet></ROW><ROW><id>16994369</id><snippet>==</snippet></ROW><ROW><id>16994369</id><snippet>or</snippet></ROW><ROW><id>16994369</id><snippet>if s[i] == 1 or s[i] == 2 or s[i] == 3 ...:
</snippet></ROW><ROW><id>16994369</id><snippet>in</snippet></ROW><ROW><id>16994369</id><snippet>if s[i] in (1, 2, 3, 4, ...):
</snippet></ROW><ROW><id>16994369</id><snippet>if int(s[i]) in (1, 2, 3, 4, ...):
</snippet></ROW><ROW><id>16994369</id><snippet>if s[i] in '1234567890':
</snippet></ROW><ROW><id>16994369</id><snippet>'1234567890'</snippet></ROW><ROW><id>16994369</id><snippet>for char in s:
    if char in '1234567890':
</snippet></ROW><ROW><id>16994369</id><snippet>while</snippet></ROW><ROW><id>16994369</id><snippet>string</snippet></ROW><ROW><id>16994369</id><snippet>ascii_letters</snippet></ROW><ROW><id>16994369</id><snippet>digits</snippet></ROW><ROW><id>16994369</id><snippet>import string

for char in s:
    if char in string.ascii_letters + string.digits:
</snippet></ROW><ROW><id>16994369</id><snippet>if 'a' &lt;= char &lt;= 'z' or 'A' &lt;= char &lt;= 'Z' or '0' &lt;= char &lt;= '9':
</snippet></ROW><ROW><id>16994369</id><snippet>True</snippet></ROW><ROW><id>16994369</id><snippet>True</snippet></ROW><ROW><id>16994369</id><snippet>for char in s:
    if char not in string.ascii_letters + string.digits:
        return False

return True
</snippet></ROW><ROW><id>16994369</id><snippet>False</snippet></ROW><ROW><id>16994369</id><snippet>True</snippet></ROW><ROW><id>16994414</id><snippet>cimport</snippet></ROW><ROW><id>16994414</id><snippet>.pxd</snippet></ROW><ROW><id>16994414</id><snippet>.pyx</snippet></ROW><ROW><id>16994414</id><snippet>myext</snippet></ROW><ROW><id>16994414</id><snippet>libexternlib.so</snippet></ROW><ROW><id>16994414</id><snippet># setup.py file
import sys
import os
import shutil

from distutils.core import setup
from distutils.extension import Extension
from Cython.Distutils import build_ext

# clean previous build
for root, dirs, files in os.walk(".", topdown=False):
    for name in files:
        if (name.startswith("myext") and not(name.endswith(".pyx") or name.endswith(".pxd"))):
            os.remove(os.path.join(root, name))
    for name in dirs:
        if (name == "build"):
            shutil.rmtree(name)

# build "myext.so" python extension to be added to "PYTHONPATH" afterwards...
setup(
    cmdclass = {'build_ext': build_ext},
    ext_modules = [
    Extension("myext", 
              sources=["myext.pyx", \
                       "SomeAdditionalCppClass1.cpp", \
                       "SomeAdditionalCppClass2.cpp"
                       ],
              libraries=["externlib"],          # refers to "libexternlib.so"
              language="c++",                   # remove this if C and not C++
              extra_compile_args=["-fopenmp", "-O3"],
              extra_link_args=["-DSOME_DEFINE_OPT", "-L./some/extra/dependency/dir/"]
              )
    ]
)           
</snippet></ROW><ROW><id>16994414</id><snippet>.so</snippet></ROW><ROW><id>16994414</id><snippet>libraries</snippet></ROW><ROW><id>16994414</id><snippet>libraries=["externlib"]   # Without the 'lib' prefix and the '.so' extension...
</snippet></ROW><ROW><id>16994414</id><snippet>sources</snippet></ROW><ROW><id>16994414</id><snippet>myext.pxd</snippet></ROW><ROW><id>16994414</id><snippet>.pyd</snippet></ROW><ROW><id>16994414</id><snippet>myext.pyx</snippet></ROW><ROW><id>16994414</id><snippet>myext.pxd</snippet></ROW><ROW><id>16994414</id><snippet>myext.pyx</snippet></ROW><ROW><id>16994414</id><snippet>setup.py</snippet></ROW><ROW><id>16994414</id><snippet># setup.sh
# Make the "myext" Python Module ("myext.so")
CC="gcc"   \
CXX="g++"   \
CFLAGS="-I./some/path/to/includes/ -I../../../DEPENDENCIES/python2.7/inc -I../../../DEPENDENCIES/gsl-1.15"   \
LDFLAGS="-L./some/path/to/externlib/"   \
    python setup.py build_ext --inplace
</snippet></ROW><ROW><id>16994414</id><snippet>libexternlib.so</snippet></ROW><ROW><id>16994414</id><snippet>./some/path/to/externlib/</snippet></ROW><ROW><id>16994414</id><snippet>yourheader.h</snippet></ROW><ROW><id>16994414</id><snippet>./some/path/to/includes/</snippet></ROW><ROW><id>16994414</id><snippet>CFLAGS</snippet></ROW><ROW><id>16994414</id><snippet>extra_compile_args</snippet></ROW><ROW><id>16994414</id><snippet>extra_compile_args=["-I./some/path/to/includes/", "-fopenmp", "-O3"]
</snippet></ROW><ROW><id>16994414</id><snippet>LDFLAGS</snippet></ROW><ROW><id>16994414</id><snippet>extra_link_args</snippet></ROW><ROW><id>16994414</id><snippet>extra_compile_args=["-L./some/path/to/externlib/", "-DSOME_DEFINE_OPT", "-L./some/extra/dependency/dir/"]
</snippet></ROW><ROW><id>16994414</id><snippet>myext.cpp</snippet></ROW><ROW><id>16994414</id><snippet>myext.h</snippet></ROW><ROW><id>16994414</id><snippet>myext.so</snippet></ROW><ROW><id>16994414</id><snippet>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./some/path/to/externlib/
export PYTHONPATH=$PYTHONPATH:./some/path/to/myext/

# Run some script requiring "myext.so"
python somescript.py
</snippet></ROW><ROW><id>16994414</id><snippet># somescript.py
import myext
from myext import PySomeFeature
...
</snippet></ROW><ROW><id>16994414</id><snippet>-O2</snippet></ROW><ROW><id>16994414</id><snippet>-O3</snippet></ROW><ROW><id>16994414</id><snippet>PYTHONPATH=$PYTHONPATH:../../../DEPENDENCIES/Cython-0.18 export PYTHONPATH;
PATH=$PATH:../../../DEPENDENCIES/Cython-0.18/bin; export PATH;
</snippet></ROW><ROW><id>16994568</id><snippet>.seek(0)</snippet></ROW><ROW><id>16994623</id><snippet>transfer_details = TransferDetail.objects.filter(
    user=request.user).select_related('method', 'user')
</snippet></ROW><ROW><id>16994623</id><snippet>method</snippet></ROW><ROW><id>16994623</id><snippet>print transfer_details.filter(method__name='PayPal')</snippet></ROW><ROW><id>16994623</id><snippet>print</snippet></ROW><ROW><id>16994623</id><snippet>TansferDetail</snippet></ROW><ROW><id>16994623</id><snippet>__unicode__</snippet></ROW><ROW><id>16994623</id><snippet>User</snippet></ROW><ROW><id>16994623</id><snippet>list</snippet></ROW><ROW><id>16994623</id><snippet>request.user</snippet></ROW><ROW><id>16994664</id><snippet>buf=pow(-(alpha*[D/Ds]),beta)
</snippet></ROW><ROW><id>16994664</id><snippet>buf=pow(-(alpha*(D/Ds)),beta)
</snippet></ROW><ROW><id>16994664</id><snippet>[D/Ds]
</snippet></ROW><ROW><id>16994664</id><snippet>alpha * (D/Ds)
</snippet></ROW><ROW><id>16994664</id><snippet>alpha</snippet></ROW><ROW><id>16994664</id><snippet>&gt;&gt;&gt; [1] * 4
[1, 1, 1, 1]
</snippet></ROW><ROW><id>16994664</id><snippet>[1] * 4.0
TypeError: can't multiply sequence by non-int of type 'float'
</snippet></ROW><ROW><id>16994664</id><snippet>&gt;&gt;&gt; (1 + 2) * 4
12
</snippet></ROW><ROW><id>16994689</id><snippet>e = d.xpath('./a:r/a:t/text()', namespaces=NAMESPACES)
</snippet></ROW><ROW><id>16994689</id><snippet>xpath</snippet></ROW><ROW><id>16994689</id><snippet>list</snippet></ROW><ROW><id>16994689</id><snippet>repr</snippet></ROW><ROW><id>16994689</id><snippet>['38%']</snippet></ROW><ROW><id>16994689</id><snippet>[' ']</snippet></ROW><ROW><id>16994689</id><snippet>print</snippet></ROW><ROW><id>16994689</id><snippet>e</snippet></ROW><ROW><id>16994689</id><snippet>print</snippet></ROW><ROW><id>16994689</id><snippet>path1 = file.xpath('/p:sld/p:cSld/p:spTree/p:sp/p:txBody/a:p', namespaces=NAMESPACES)    
for a in path1:
    b = a.xpath('./a:r/a:rPr[@sz="3600" and @dirty="0"]',namespaces=NAMESPACES)
    for c in b:
        d = c.getparent().getparent()
        e = d.xpath('./a:r/a:t/text()', namespaces=NAMESPACES)
        print e
</snippet></ROW><ROW><id>16994689</id><snippet>e = …</snippet></ROW><ROW><id>16994689</id><snippet>print e</snippet></ROW><ROW><id>16994689</id><snippet>a</snippet></ROW><ROW><id>16994689</id><snippet>b</snippet></ROW><ROW><id>16994689</id><snippet>b</snippet></ROW><ROW><id>16994689</id><snippet>print</snippet></ROW><ROW><id>16994689</id><snippet>path1 = file.xpath('/p:sld/p:cSld/p:spTree/p:sp/p:txBody/a:p', namespaces=NAMESPACES)    
for a in path1:
    b = a.xpath('./a:r/a:rPr[@sz="3600" and @dirty="0"]',namespaces=NAMESPACES)
    for c in b:
        d = c.getparent().getparent()
        e = d.xpath('./a:r/a:t/text()', namespaces=NAMESPACES)
        print e
        return
</snippet></ROW><ROW><id>16994689</id><snippet>path1 = file.xpath('/p:sld/p:cSld/p:spTree/p:sp/p:txBody/a:p', namespaces=NAMESPACES)
print path1
for a in path1:
    b = a.xpath('./a:r/a:rPr[@sz="3600" and @dirty="0"]',namespaces=NAMESPACES)
    print ' ', b
    for c in b:
        d = c.getparent().getparent()
        e = d.xpath('./a:r/a:t/text()', namespaces=NAMESPACES)
        print e
</snippet></ROW><ROW><id>16994713</id><snippet>time.strftime()</snippet></ROW><ROW><id>16994713</id><snippet>time.gmtime()</snippet></ROW><ROW><id>16994713</id><snippet>time.localtime()</snippet></ROW><ROW><id>16994713</id><snippet>time.strftime('%m/%d/%Y', time.gmtime(os.path.getmtime(file)))
</snippet></ROW><ROW><id>16994779</id><snippet>driver.find_element_by_css_selector("div.goog-inline-block.goog-custom-button-inner-box").click()
</snippet></ROW><ROW><id>16994809</id><snippet>tempList = list(haystack)
</snippet></ROW><ROW><id>16994809</id><snippet>tempList = haystack[:]
</snippet></ROW><ROW><id>16994809</id><snippet>.extend()</snippet></ROW><ROW><id>16994809</id><snippet>haystack = [1,'Two',3]   
tempList = haystack  # points to same list
haystack = haystack + list(iterable)  # creates a *new* list object
</snippet></ROW><ROW><id>16994809</id><snippet>haystack</snippet></ROW><ROW><id>16994809</id><snippet>tempList</snippet></ROW><ROW><id>16994810</id><snippet>gap</snippet></ROW><ROW><id>16994810</id><snippet>str</snippet></ROW><ROW><id>16994810</id><snippet>tokenString</snippet></ROW><ROW><id>16994810</id><snippet>unicode</snippet></ROW><ROW><id>16994810</id><snippet>if gap not in tokenString:
</snippet></ROW><ROW><id>16994810</id><snippet>gap</snippet></ROW><ROW><id>16994810</id><snippet>unicode</snippet></ROW><ROW><id>16994810</id><snippet>gap</snippet></ROW><ROW><id>16994810</id><snippet>&gt;&gt;&gt; if 'é' in u'a':
...    print 'Yes'
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>16994810</id><snippet>gap</snippet></ROW><ROW><id>16994810</id><snippet>unicode</snippet></ROW><ROW><id>16994810</id><snippet>tokenString</snippet></ROW><ROW><id>16994810</id><snippet>str</snippet></ROW><ROW><id>16994810</id><snippet>&gt;&gt;&gt; if u'a' in 'é':
...     print 'Yes'
UnicodeDecodeError: 'ascii' codec can't decode byte 0xc3 in position 0: ordinal not in range(128)
</snippet></ROW><ROW><id>16994810</id><snippet>u'a'.find('é')</snippet></ROW><ROW><id>16994810</id><snippet>in</snippet></ROW><ROW><id>16994810</id><snippet>&gt;&gt;&gt; if 'é'.decode('utf-8') in u'a':
...     print 'Yes'
</snippet></ROW><ROW><id>16994810</id><snippet>unicode</snippet></ROW><ROW><id>16994810</id><snippet>decode</snippet></ROW><ROW><id>16994810</id><snippet>encode</snippet></ROW><ROW><id>16994810</id><snippet>codecs.open</snippet></ROW><ROW><id>16994810</id><snippet>TypeError</snippet></ROW><ROW><id>16994828</id><snippet>from itertools import chain
from glob import glob

lines = list(chain.from_iterable(open(f, 'r') for f in glob('./files/*.??')))
lines.sort()

with open('listTogether.txt', 'w') as out:
    out.writelines(lines)
</snippet></ROW><ROW><id>16994828</id><snippet>\r\n</snippet></ROW><ROW><id>16994828</id><snippet>'rU'</snippet></ROW><ROW><id>16994828</id><snippet>\n</snippet></ROW><ROW><id>16994828</id><snippet>lines = list(chain.from_iterable(open(f, 'rU') for f in glob('./files/*.??')))
lines.sort()

with open('listTogether.txt', 'w') as out:
    out.writelines(lines)
</snippet></ROW><ROW><id>16994828</id><snippet>U</snippet></ROW><ROW><id>16994828</id><snippet>open()</snippet></ROW><ROW><id>16994828</id><snippet>sorted()</snippet></ROW><ROW><id>16994828</id><snippet>lines = set(chain.from_iterable(open(f, 'rU') for f in glob('./files/*.??')))

with open('listTogether.txt', 'w') as out:
    out.writelines(sorted(lines))
</snippet></ROW><ROW><id>16994910</id><snippet>itertools.product</snippet></ROW><ROW><id>16994910</id><snippet>MultiIndex</snippet></ROW><ROW><id>16994910</id><snippet>reindex</snippet></ROW><ROW><id>16994910</id><snippet>In [10]: from itertools import product

In [11]: df
Out[11]:
   combo   fruit      veg
0  tasty   apple   carrot
1  yucky  banana   carrot
2  tasty  banana  lettuce
3  yucky   lemon  lettuce
</snippet></ROW><ROW><id>16994910</id><snippet>In [12]: fruit_x_veg = list(product(np.unique(df['fruit']), np.unique(df['veg'])))

In [13]: fruit_x_veg = pd.MultiIndex.from_tuples(fruit_x_veg,
                                                 names=['fruit', 'veg'])
</snippet></ROW><ROW><id>16994910</id><snippet>In [14]: df1 = df.set_index(['fruit', 'veg'])

In [15]: df1
Out[15]:
                combo
fruit  veg
apple  carrot   tasty
banana carrot   yucky
       lettuce  tasty
lemon  lettuce  yucky

In [16]: df1.reindex(fruit_x_veg, fill_value='UNKNOWN')
Out[16]:
                  combo
fruit  veg
apple  carrot     tasty
       lettuce  UNKNOWN
banana carrot     yucky
       lettuce    tasty
lemon  carrot   UNKNOWN
       lettuce    yucky
</snippet></ROW><ROW><id>16994910</id><snippet>itertools.product</snippet></ROW><ROW><id>16994987</id><snippet>*.pyc</snippet></ROW><ROW><id>16994987</id><snippet>datetime</snippet></ROW><ROW><id>16994987</id><snippet>datetime</snippet></ROW><ROW><id>16994987</id><snippet>from datetime import datetime
</snippet></ROW><ROW><id>16994987</id><snippet>datetime</snippet></ROW><ROW><id>16994987</id><snippet>datetime</snippet></ROW><ROW><id>16995086</id><snippet>collections.defaultdict()</snippet></ROW><ROW><id>16995086</id><snippet>from collections import defaultdict

urls = defaultdict(int)

for url in url_source:
    print '{}: {}'.format(url, urls[url])

    # process

    urls[url] += 1
</snippet></ROW><ROW><id>16995252</id><snippet>date</snippet></ROW><ROW><id>16995252</id><snippet>datetime</snippet></ROW><ROW><id>16995252</id><snippet>datetime</snippet></ROW><ROW><id>16995252</id><snippet>&gt;&gt;&gt; from datetime import datetime
&gt;&gt;&gt; datetime.fromtimestamp(1339119900000/1e3).strftime('%Y-%m-%d %H:%M')
'2012-06-08 02:45'
&gt;&gt;&gt; datetime.fromtimestamp(1339120800000/1e3).strftime('%Y-%m-%d %H:%M')
'2012-06-08 03:00'
</snippet></ROW><ROW><id>16995405</id><snippet>&gt;&gt;&gt; np.array([1, 2, 3]).shape
(3,)
</snippet></ROW><ROW><id>16995405</id><snippet>&gt;&gt;&gt; np.array([[1, 2, 3]]).shape
(1, 3)
</snippet></ROW><ROW><id>16995405</id><snippet>&gt;&gt;&gt; np.array([[1, 2, 3]]).T.shape
(3, 1)
</snippet></ROW><ROW><id>16995405</id><snippet>&gt;&gt;&gt; np.array([[1, 2, 3]]).T
array([[1],
       [2],
       [3]])
</snippet></ROW><ROW><id>16995405</id><snippet>&gt;&gt;&gt; a = np.array([[1, 2, 3]])
&gt;&gt;&gt; b = np.array([[1, 2, 3]]).T
&gt;&gt;&gt; a
array([[1, 2, 3]])
&gt;&gt;&gt; b
array([[1],
       [2],
       [3]])
</snippet></ROW><ROW><id>16995405</id><snippet>&gt;&gt;&gt; a * b
array([[1, 2, 3],
       [2, 4, 6],
       [3, 6, 9]])
</snippet></ROW><ROW><id>16995405</id><snippet>&gt;&gt;&gt; a + b
array([[2, 3, 4],
       [3, 4, 5],
       [4, 5, 6]]) 
</snippet></ROW><ROW><id>16995442</id><snippet>groupby</snippet></ROW><ROW><id>16995442</id><snippet>itertools</snippet></ROW><ROW><id>16995442</id><snippet>from itertools import groupby

def ranger(values, range_size):
    def keyfunc(n):
        key = n/(range_size+1) + 1
        print '{} in {}'.format(n, key)
        return key

    return [len(list(g)) for k, g in groupby(values, key=keyfunc)]

myset = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
print ranger(myset, 10)
print ranger(myset, 15)
</snippet></ROW><ROW><id>16995498</id><snippet>def calculator(n1,op,n2):
    if op == '+':
        return n1 + n2
    elif op == '-':
        return n1 - n2
    elif op == '*':
        return n1 * n2
    elif op == '/':
        return n1 / n2
    elif op == '%':
        return n1 % n2
    elif op == '**':
        return n1 ** n2
    else:
        raise ValueError('invalid operator')
</snippet></ROW><ROW><id>16995498</id><snippet>&gt;&gt;&gt; calculator(1,'+',2)     # note result is int
3
&gt;&gt;&gt; calculator(1,'/',2)     # Python 3.x returns float result for division
0.5
&gt;&gt;&gt; calculator(2,'*',2.5)   # float result when mixed.
5.0
&gt;&gt;&gt; calculator(2,'x',2.5)
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
  File "C:\Users\metolone\Desktop\x.py", line 15, in calculator
    raise ValueError('invalid operator')
ValueError: invalid operator
</snippet></ROW><ROW><id>16995498</id><snippet>from operator import mul,add as plus,truediv as div,sub as minus,pow,mod

def calculator(n1,op,n2):
    return op(n1,n2)
</snippet></ROW><ROW><id>16995498</id><snippet>&gt;&gt;&gt; calculator(2,plus,4)
6
&gt;&gt;&gt; calculator(2,div,4)
0.5
</snippet></ROW><ROW><id>16995999</id><snippet>s[start: stop : step]
</snippet></ROW><ROW><id>16995999</id><snippet>s</snippet></ROW><ROW><id>16995999</id><snippet>s</snippet></ROW><ROW><id>16995999</id><snippet>start</snippet></ROW><ROW><id>16995999</id><snippet>min(6,len(s)-1)</snippet></ROW><ROW><id>16995999</id><snippet>stop</snippet></ROW><ROW><id>16995999</id><snippet>None</snippet></ROW><ROW><id>16995999</id><snippet>&gt;&gt;&gt; s = "HELLO"
&gt;&gt;&gt; s[6:-6:-1]
'OLLEH'
&gt;&gt;&gt; s[ min(6,len(s)-1) : -6 :-1]
'OLLEH'
&gt;&gt;&gt; s[ min(6,len(s)-1) : None :-1] #None also works fine
'OLLEH'
&gt;&gt;&gt; s[6:-6:-1]
'OLLEH'
</snippet></ROW><ROW><id>16995999</id><snippet>&gt;&gt;&gt; s = "HELLO, World"
#now you can't set the stop value as `None` as -6 is a valid index for this string.
&gt;&gt;&gt; s[ min(9,len(s)-1) : -6 :-1]
'roW'
&gt;&gt;&gt; s[ min(9,len(s)-1) : None :-1]  #can't use None this time
'roW ,OLLEH'
&gt;&gt;&gt; s[9:-6:-1]
'roW'
</snippet></ROW><ROW><id>16996017</id><snippet>table = 'abcdefghijkl'
i = 0
while i &lt; 4:
    print("| {} | {} | {} |".format(table[i], table[i+4], table[i+8]))
    i += 1
</snippet></ROW><ROW><id>16996097</id><snippet>$:categoriesPython
</snippet></ROW><ROW><id>16996431</id><snippet>df -h
</snippet></ROW><ROW><id>16996431</id><snippet>Filesystem      Size  Used Avail Use% Mounted on
/dev/sda5        28G   15G   12G  58% /
</snippet></ROW><ROW><id>16996439</id><snippet>def primes(n):
    primfac = []
    d = 2
    while d*d &lt;= n:
        while (n % d) == 0:
            primfac.append(d)  # supposing you want multiple factors repeated
            n /= d
        d += 1
    if n &gt; 1:
       primfac.append(n)
    return primfac
</snippet></ROW><ROW><id>16996439</id><snippet>O(sqrt(n))</snippet></ROW><ROW><id>16996439</id><snippet>d</snippet></ROW><ROW><id>16996475</id><snippet>import tkinter as tk

root = tk.Tk()
root.geometry("300x200")

def func(event):
    print("You hit return.")
root.bind('&lt;Return&gt;', func)

def onclick():
    print("You clicked the button")

button = tk.Button(root, text="click me", command=onclick)
button.pack()

root.mainloop()
</snippet></ROW><ROW><id>16996475</id><snippet>import tkinter as tk

root = tk.Tk()
root.geometry("300x200")

def func(event):
    print("You hit return.")

def onclick(event=None):
    print("You clicked the button")

root.bind('&lt;Return&gt;', onclick)

button = tk.Button(root, text="click me", command=onclick)
button.pack()

root.mainloop()
</snippet></ROW><ROW><id>16996475</id><snippet>import tkinter as tk

root = tk.Tk()
root.geometry("300x200")

def func(event):
    print("You hit return.")

def onclick(event):
    print("You clicked the button")

root.bind('&lt;Return&gt;', onclick)

button = tk.Button(root, text="click me")
button.bind('&lt;Button-1&gt;', onclick)
button.pack()

root.mainloop()
</snippet></ROW><ROW><id>16996475</id><snippet>import tkinter as tk

class Application(tk.Frame):
    def __init__(self):
        self.root = tk.Tk()
        self.root.geometry("300x200")

        tk.Frame.__init__(self, self.root)
        self.create_widgets()

    def create_widgets(self):
        self.root.bind('&lt;Return&gt;', self.parse)
        self.grid()

        self.submit = tk.Button(self, text="Submit")
        self.submit.bind('&lt;Button-1&gt;', self.parse)
        self.submit.grid()

    def parse(self, event):
        print("You clicked?")

    def start(self):
        self.root.mainloop()


Application().start()
</snippet></ROW><ROW><id>16996560</id><snippet>numpy</snippet></ROW><ROW><id>16996560</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; a = np.array([ 8.08970226,  np.NAN,  np.NAN,  8.30043545,  np.NAN,  np.NAN,   np.NAN,  np.NAN])
&gt;&gt;&gt; np.ma.fix_invalid(a)
masked_array(data = [8.08970226 -- -- 8.30043545 -- -- -- --],
             mask = [False  True  True False  True  True  True  True],
       fill_value = 1e+20)

&gt;&gt;&gt; print _
[8.08970226 -- -- 8.30043545 -- -- -- --]
</snippet></ROW><ROW><id>16996560</id><snippet>&gt;&gt;&gt; np.ma.fix_invalid(a).astype('|S10').tolist(fill_value='--')
['8.08970226', '--', '--', '8.30043545', '--', '--', '--', '--']
</snippet></ROW><ROW><id>16997010</id><snippet>tornado.ioloop.PeriodicCallback</snippet></ROW><ROW><id>16997010</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os

import tornado.httpserver
import tornado.ioloop
import tornado.options
import tornado.web

from tornado.options import define, options
define("port", default=8000, help="run on the given port", type=int)

videos = {}

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.render('index.html', my_videos=videos)

class Application(tornado.web.Application):
    def __init__(self):
        handlers = [
            (r"/", MainHandler),
        ]
        settings = dict(
            template_path=os.path.join(os.path.dirname(__file__), "templates"),
            static_path=os.path.join(os.path.dirname(__file__), "static"),
            debug=True,
        )
        tornado.web.Application.__init__(self, handlers, **settings)

    def update_categories(self): 
        videos.clear()
        for path, subdirs, files in os.walk(self.settings['static_path'] + '/videos/'):
            category_name = os.path.basename(path)
            videos[category_name] = []
            for name in files:
                videos[category_name].append(name)

if __name__ == "__main__":
    tornado.options.parse_command_line()
    app = Application()
    http_server = tornado.httpserver.HTTPServer(app)
    http_server.listen(options.port)
    tornado.ioloop.PeriodicCallback(app.update_categories, 1000).start() # run every second
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>16997010</id><snippet> $ tree 
 .
 ├── static
 │   └── videos
 │       ├── cat1
 │       │   ├── vid1.avi
 │       │   └── vid2.avi
 │       ├── cat2
 │       │   ├── vid3.avi
 │       └── Empty category
 ├── templates
 │   ├── index.html
 └── test.py
</snippet></ROW><ROW><id>16997010</id><snippet>&lt;!-- index.html --&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Test&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
    {% for category in my_videos %}
        &lt;h1&gt;{{category}}&lt;/h1&gt;
        {% for video in my_videos[category] %}
            &lt;p&gt;{{video}} -&gt; {{static_url("videos/")}}{{category}}/{{video}}&lt;/p&gt;
        {% end %}
    {% end %}
&lt;/body&gt;
&lt;/html&gt;
</snippet></ROW><ROW><id>16997494</id><snippet>Resolver</snippet></ROW><ROW><id>16997494</id><snippet>/etc/resolv.conf</snippet></ROW><ROW><id>16997494</id><snippet>configure=False</snippet></ROW><ROW><id>16997494</id><snippet>Resolver</snippet></ROW><ROW><id>16997494</id><snippet>nameservers</snippet></ROW><ROW><id>16997714</id><snippet>info</snippet></ROW><ROW><id>16997714</id><snippet>class Customers(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    cust_name = db.Column(db.String(64), info={'name': 'Customer name'})
    cust_area = db.Column(db.String(64), info={'name': 'Customer area'})
    cat_id = db.Column(db.Integer(8), index=True)
</snippet></ROW><ROW><id>16997714</id><snippet>customer = Customers.query.filter_by(cat_id=page).first()
data = dict((c.info.get('name', c.name), getattr(customer, c.name))
            for c in customer.__table__.c)
# Or using dict comprehension syntax (Python 2.7+).
data = {c.info.get('name', c.name): getattr(customer, c.name)
        for c in customer.__table__.c}
</snippet></ROW><ROW><id>16997823</id><snippet>__repr__</snippet></ROW><ROW><id>16997823</id><snippet>print</snippet></ROW><ROW><id>16997823</id><snippet>__str__</snippet></ROW><ROW><id>16997823</id><snippet>import decimal
mynum = decimal.Decimal('12')
print mynum # 12
print [mynum] # [Decimal('12')
</snippet></ROW><ROW><id>16997823</id><snippet>print repr</snippet></ROW><ROW><id>16997823</id><snippet>if cur:
    print repr(row[1]) # will be Decimal...
    print row[1] # looks like a number
</snippet></ROW><ROW><id>16997823</id><snippet>Decimal</snippet></ROW><ROW><id>16997823</id><snippet>repr</snippet></ROW><ROW><id>16997823</id><snippet>str</snippet></ROW><ROW><id>16997823</id><snippet>str</snippet></ROW><ROW><id>16997823</id><snippet>repr</snippet></ROW><ROW><id>16997823</id><snippet>eval(repr(obj)) == obj</snippet></ROW><ROW><id>16997892</id><snippet>import lib</snippet></ROW><ROW><id>16997892</id><snippet>myapp</snippet></ROW><ROW><id>16997892</id><snippet>lib.py</snippet></ROW><ROW><id>16997892</id><snippet>import lib</snippet></ROW><ROW><id>16997892</id><snippet>__init__.py</snippet></ROW><ROW><id>16997892</id><snippet>from myapp import lib</snippet></ROW><ROW><id>16997892</id><snippet>lib</snippet></ROW><ROW><id>16997892</id><snippet>lib.py</snippet></ROW><ROW><id>16997892</id><snippet>import lib</snippet></ROW><ROW><id>16997892</id><snippet>from myapp import lib</snippet></ROW><ROW><id>16997904</id><snippet>zeros</snippet></ROW><ROW><id>16997904</id><snippet>a.shape</snippet></ROW><ROW><id>16997904</id><snippet>len(a.shape)</snippet></ROW><ROW><id>16997904</id><snippet>len(b.shape)</snippet></ROW><ROW><id>16997904</id><snippet>ndim</snippet></ROW><ROW><id>16997904</id><snippet>reshape</snippet></ROW><ROW><id>16997904</id><snippet>&gt;&gt;&gt; a = arange(15).reshape(3, 5)
&gt;&gt;&gt; a
array([[ 0,  1,  2,  3,  4],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14]])
&gt;&gt;&gt; a.shape
(3, 5)
&gt;&gt;&gt; a.ndim
2
</snippet></ROW><ROW><id>16997904</id><snippet>reshape</snippet></ROW><ROW><id>16997904</id><snippet>a.shape</snippet></ROW><ROW><id>16997904</id><snippet>&gt;&gt;&gt; a = np.arange(30).reshape(3, 5, 2)
&gt;&gt;&gt; a.ndim
3
</snippet></ROW><ROW><id>16997904</id><snippet>ndim</snippet></ROW><ROW><id>16997939</id><snippet>self._queue.put(None)</snippet></ROW><ROW><id>16998023</id><snippet>cursor = QTextCursor(doc.findBlockByLineNumber(0))
cursor.select(QTextCursor.BlockUnderCursor)
cursor.deleteChar()
cursor.deleteChar()
</snippet></ROW><ROW><id>16998059</id><snippet>QGraphicsScene::addItem(QGraphicsItem *item)</snippet></ROW><ROW><id>16998059</id><snippet>void</snippet></ROW><ROW><id>16998059</id><snippet>gfxPixItem</snippet></ROW><ROW><id>16998059</id><snippet>view.fitInView(None)</snippet></ROW><ROW><id>16998059</id><snippet>pixmap = QtGui.QPixmap("image.png")
pixItem = QtGui.QGraphicsPixmapItem(pixmap)
scn.addItem(pixItem)
view.fitInView(pixItem)
</snippet></ROW><ROW><id>16998195</id><snippet>raw_input</snippet></ROW><ROW><id>16998195</id><snippet>while 1:
    c = input()
    exec(c)
</snippet></ROW><ROW><id>16998195</id><snippet>try</snippet></ROW><ROW><id>16998195</id><snippet>except</snippet></ROW><ROW><id>16998195</id><snippet>Exception</snippet></ROW><ROW><id>16998195</id><snippet>import traceback
while 1:
    try: 
        c = input()
        exec(c)
    except:
        print(traceback.format_exc())
</snippet></ROW><ROW><id>16998259</id><snippet>if len(buffer) &gt;= 4:
    expected_length = int(buffer[:4])
    buffer = buffer[4:]
</snippet></ROW><ROW><id>16998259</id><snippet>expected_length</snippet></ROW><ROW><id>16998259</id><snippet>len(buffer) &gt;= expected_length</snippet></ROW><ROW><id>16998363</id><snippet>PIL</snippet></ROW><ROW><id>16998363</id><snippet>pip</snippet></ROW><ROW><id>16998363</id><snippet>pypm</snippet></ROW><ROW><id>16998363</id><snippet>pillow</snippet></ROW><ROW><id>16998374</id><snippet>glob()</snippet></ROW><ROW><id>16998374</id><snippet>iglob()</snippet></ROW><ROW><id>16998374</id><snippet>glob</snippet></ROW><ROW><id>16998374</id><snippet>Counter</snippet></ROW><ROW><id>16998374</id><snippet>update()</snippet></ROW><ROW><id>16998374</id><snippet>*.txt</snippet></ROW><ROW><id>16998374</id><snippet>from collections import Counter
from glob import iglob
import re
import os

def removegarbage(text):
    # Replace one or more non-word (non-alphanumeric) chars with a space
    text = re.sub(r'\W+', ' ', text)
    text = text.lower()
    return text

topwords = 100
folderpath = 'path/to/directory'
counter = Counter()
for filepath in iglob(os.path.join(folderpath, '*.txt')):
    with open(filepath) as filehandle:
        counter.update( removegarbage(filehandle.read()).split() )

for word, count in counter.most_common(topwords):
    print '{}: {}'.format(count, word)
</snippet></ROW><ROW><id>16998391</id><snippet>&gt;&gt;&gt; mylist = [1,2,3,4,5,6]
&gt;&gt;&gt; mylist[::3]
[1, 4]
&gt;&gt;&gt; mylist[1::3]
[2, 5]
&gt;&gt;&gt; mylist[2::3]
[3, 6]

&gt;&gt;&gt; lis = range(1,21)
&gt;&gt;&gt; new1, new2, new3 = [lis[i::3] for i in xrange(3)]
&gt;&gt;&gt; new1
[1, 4, 7, 10, 13, 16, 19]
&gt;&gt;&gt; new2
[2, 5, 8, 11, 14, 17, 20]
&gt;&gt;&gt; new3
[3, 6, 9, 12, 15, 18]
</snippet></ROW><ROW><id>16998533</id><snippet>.</snippet></ROW><ROW><id>16998533</id><snippet>identifier ::=  (letter|"_") (letter | digit | "_")*
letter     ::=  lowercase | uppercase
lowercase  ::=  "a"..."z"
uppercase  ::=  "A"..."Z"
digit      ::=  "0"..."9"
</snippet></ROW><ROW><id>16998533</id><snippet>do</snippet></ROW><ROW><id>16998533</id><snippet>system</snippet></ROW><ROW><id>16998533</id><snippet>class system:
    @staticmethod
    def do():
        pass
print system.do()
</snippet></ROW><ROW><id>16998687</id><snippet>memoryview</snippet></ROW><ROW><id>16998687</id><snippet>Py_buffer</snippet></ROW><ROW><id>16998687</id><snippet>PyMemoryView_FromMemory</snippet></ROW><ROW><id>16998687</id><snippet>%typemap(out) std::vector&lt;uint8_t&gt;&amp;, const std::vector&lt;uint8_t&gt;&amp; {
  Py_buffer *buf=(Py_buffer*)malloc(sizeof *buf);
  const bool ro = info&lt;$1_type&gt;::is_readonly();
  if (PyBuffer_FillInfo(buf, NULL,  &amp;((*$1)[0]), (*$1).size(), ro, PyBUF_ND)) {
    // error, handle
  }
  $result = PyMemoryView_FromBuffer(buf);
}
</snippet></ROW><ROW><id>16998687</id><snippet>Py_buffer</snippet></ROW><ROW><id>16998687</id><snippet>memoryview</snippet></ROW><ROW><id>16998687</id><snippet>free()</snippet></ROW><ROW><id>16998687</id><snippet>malloc()</snippet></ROW><ROW><id>16998687</id><snippet>Py_buffer</snippet></ROW><ROW><id>16998687</id><snippet>Py_Object</snippet></ROW><ROW><id>16998687</id><snippet>PyBuffer_FillInfo</snippet></ROW><ROW><id>16998687</id><snippet>void*</snippet></ROW><ROW><id>16998687</id><snippet>$n_type</snippet></ROW><ROW><id>16998687</id><snippet>%module test

%{
#include "test.hh" 

namespace {
  template &lt;typename T&gt;
  struct info {
    static bool is_readonly() {
      return false;
    }
  };

  template &lt;typename T&gt;
  struct info&lt;const T&amp;&gt; {
    static bool is_readonly() {
      return true;
    }
  };
}
%}

%typemap(out) std::vector&lt;uint8_t&gt;&amp;, const std::vector&lt;uint8_t&gt;&amp; {
  Py_buffer *buf=(Py_buffer*)malloc(sizeof *buf);
  const bool ro = info&lt;$1_type&gt;::is_readonly();
  if (PyBuffer_FillInfo(buf, NULL,  &amp;((*$1)[0]), (*$1).size(), ro, PyBUF_ND)) {
    // error, handle
  }
  $result = PyMemoryView_FromBuffer(buf);
}

%include "test.hh"
</snippet></ROW><ROW><id>16998687</id><snippet>import test

print test.vec()
print len(test.vec())
print test.vec()[0]
print test.vec().readonly
test.vec()[0]='z'
print test.vec()[0]

print "This should fail:"
test.cvec()[0] = 0
</snippet></ROW><ROW><id>16998687</id><snippet>PyBuffer_FillInfo</snippet></ROW><ROW><id>16998797</id><snippet>partial</snippet></ROW><ROW><id>16998797</id><snippet>anyButton</snippet></ROW><ROW><id>16998797</id><snippet>self.anyButton("One")</snippet></ROW><ROW><id>16999005</id><snippet>4 Gb / 10000001 = 430 bytes per node</snippet></ROW><ROW><id>16999086</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>16999086</id><snippet>web.py</snippet></ROW><ROW><id>16999185</id><snippet>delete</snippet></ROW><ROW><id>16999185</id><snippet>entry.delete(0, 'end')
# print new serial data
</snippet></ROW><ROW><id>16999185</id><snippet>text.delete(1.0, 'end')
# print new serial data
</snippet></ROW><ROW><id>16999303</id><snippet>def get_dice_size():
    dice_size = input('Enter the number of sides on the dice: ')
    while dice_size not in ['4','6','12']:
       print 'Sorry, please enter one of 4, 6 or 12:'
       dice_size = input('Enter the number of sides on the dice: ')
    return int(dice_size)

def main():
   dice_size = get_dice_size()
   repeat = True

   while repeat:
       print('Rolling the dice...')
       user_score = random.randint(1,dice_size)
       print("{0} sided dice thrown, score {1}".format(dice_size,user_score))
       roll_again = input("Do you want to roll the dice again? ")
       if roll_again.lower() == 'yes':
           dice_size = get_dice_size()
       else:
           repeat = False

   print('Thank you for playing!')
</snippet></ROW><ROW><id>16999310</id><snippet>data_file = [('Div', 'Date', 'HomeTeam', 'AwayTeam', 'FTHG', 'FTAG'), 
('E0', '18/08/12', 'Arsenal', 'Sunderland', '0', '0'),
('E0', '18/08/12', 'Arsenal', 'Sunderland', '4', '0'),
('E0', '18/08/12', 'Arsenal', 'Sunderland', '2', '0'),
('E0', '18/08/12', 'Fulham', 'Norwich', '5', '0') ]

def CalcAverageHome(team, column, data_file):
    total = 0
    n=0         # the number of times the team you are looking for is in the data
    for row in data_file:
        if  row[2] == team:
            total += int(row[column])
            n+=1
    try:
        average = float(total) / n  # if u r using python 2.7.Else if 3.2+  just total/n
    except ZeroDivisionError:       # to prevent zerodevisionerror if t team had n games
        average = 'Not played'
    return average
</snippet></ROW><ROW><id>16999564</id><snippet>def idle_showwarning(message, category, filename, lineno,
                     file=None, line=None):
    if file is None:
        file = sys.stderr #warning_stream
    try:
        file.write(warnings.formatwarning(message, category, filename,
                                          lineno, line=line))
</snippet></ROW><ROW><id>16999564</id><snippet>sys.stderr</snippet></ROW><ROW><id>16999564</id><snippet>warning_stream</snippet></ROW><ROW><id>16999564</id><snippet>sys.__stderr__</snippet></ROW><ROW><id>16999564</id><snippet>sys.__stderr__</snippet></ROW><ROW><id>16999564</id><snippet>warnings.formatwarning</snippet></ROW><ROW><id>16999564</id><snippet>file</snippet></ROW><ROW><id>16999564</id><snippet>&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; np.uint(1) - np.uint(2)

Warning (from warnings module):
  File "C:\Programs\Python32\Lib\idlelib\idle.pyw", line 1
    try:
RuntimeWarning: overflow encountered in ulong_scalars
&gt;&gt;&gt; 4294967295
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>16999564</id><snippet>file</snippet></ROW><ROW><id>16999564</id><snippet>sys.__stderr__ is None</snippet></ROW><ROW><id>16999761</id><snippet>include_dirs = ['/usr/local/include'],
libraries = ['opencv_core', 'opencv_highgui'],
library_dirs = ['/usr/local/lib'],&lt;/pre&gt;

&lt;p&gt;2) C++ module &lt;/p&gt;

&lt;p&gt;&lt;code&gt;#include &lt;opencv/cv.h&gt;</snippet></ROW><ROW><id>17000008</id><snippet>.read()</snippet></ROW><ROW><id>17000008</id><snippet>json.loads()</snippet></ROW><ROW><id>17000008</id><snippet>json.load()</snippet></ROW><ROW><id>17000033</id><snippet>week_day</snippet></ROW><ROW><id>17000033</id><snippet>SilverPrice.objects.filter(date__week_day__range=(2,6))
</snippet></ROW><ROW><id>17000033</id><snippet>SilverPrice.objects.exclude(date__week_day=1).exclude(date__week_day=7)
</snippet></ROW><ROW><id>17000191</id><snippet>plt.close()</snippet></ROW><ROW><id>17000191</id><snippet>cla()</snippet></ROW><ROW><id>17000191</id><snippet>clf()</snippet></ROW><ROW><id>17000191</id><snippet>close()</snippet></ROW><ROW><id>17000331</id><snippet>def func(input, deepcopy=false):
    if deepcopy:
        // deep copy the input as to_process
    else:
        // just point to_process to the input
    // process with the to_process        
</snippet></ROW><ROW><id>17000529</id><snippet>ap=argparse.ArgumentParser()

ap.add_argument('-c', required=False)
ap.add_argument('a', nargs='?')
ap.add_argument('b', nargs='?')

args = ap.parse_args()

if (args.c is not None):
    # process c
elif (args.a is not None and args.b is not None):
    # process a and b
else:
    # validation errors
</snippet></ROW><ROW><id>17000529</id><snippet>a</snippet></ROW><ROW><id>17000529</id><snippet>b</snippet></ROW><ROW><id>17000529</id><snippet>ap=argparse.ArgumentParser()

g = ap.add_mutually_exclusive_group(required=True)
g.add_argument('-ab', nargs=2, required=False)
g.add_argument('-c', required=False)

args = ap.parse_args()

print('args={}'.format(repr(args)))

if (args.c is not None):
    # process c
elif (args.ab is not None):
    a, b = args.ab
    # process a and b
else:
    raise Exception("should never get here")
</snippet></ROW><ROW><id>17000677</id><snippet>strip</snippet></ROW><ROW><id>17000677</id><snippet>&gt;&gt;&gt; [s.strip() for s in [u'\n                    A mano libera\n                  ']]
[u'A mano libera']
</snippet></ROW><ROW><id>17000677</id><snippet>&gt;&gt;&gt; [u'\n                    A mano libera\n                  '][0].strip()
u'A mano libera'
</snippet></ROW><ROW><id>17000770</id><snippet>sys</snippet></ROW><ROW><id>17000770</id><snippet>sys.float_info</snippet></ROW><ROW><id>17000770</id><snippet>sys.float_info.max</snippet></ROW><ROW><id>17000770</id><snippet>sys.int_info</snippet></ROW><ROW><id>17000770</id><snippet>sys.maxsize</snippet></ROW><ROW><id>17000770</id><snippet>long</snippet></ROW><ROW><id>17000770</id><snippet>sys.maxsize + 1</snippet></ROW><ROW><id>17000770</id><snippet>long</snippet></ROW><ROW><id>17000770</id><snippet>-sys.maxsize - 2</snippet></ROW><ROW><id>17000770</id><snippet>&gt;&gt;&gt; type(1j)
&lt;type 'complex'&gt;
&gt;&gt;&gt; type(1j.real)
&lt;type 'float'&gt;
&gt;&gt;&gt; type(1j.imag)
&lt;type 'float'&gt;
</snippet></ROW><ROW><id>17000781</id><snippet>settings.py</snippet></ROW><ROW><id>17000781</id><snippet>LOG_LEVEL = 'INFO'
</snippet></ROW><ROW><id>17000828</id><snippet>name = "Joel"
print('hello ' + name)
print('hello {0}'.format(name))
</snippet></ROW><ROW><id>17000828</id><snippet>print('description', customer, '&lt;MPID={0}&gt;'.format(mpid))
print('description {0} &lt;MPID={1}&gt;'.format(customer, mpid))
</snippet></ROW><ROW><id>17000916</id><snippet>pygame.draw.circle(Surface, color, pos, radius, width=0)</snippet></ROW><ROW><id>17001241</id><snippet>utf-8</snippet></ROW><ROW><id>17001241</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; s = "12345"
&gt;&gt;&gt; s2 = base64.b64encode(s)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File ". . . /lib/python3.3/base64.py", line 58, in b64encode
    raise TypeError("expected bytes, not %s" % s.__class__.__name__)
TypeError: expected bytes, not str
&gt;&gt;&gt; s2 = base64.b64encode(s.encode('ascii'))
&gt;&gt;&gt; print(s2)
b'MTIzNDU='
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17001400</id><snippet>string</snippet></ROW><ROW><id>17001400</id><snippet>alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
key =   "XPMGTDHLYONZBWEARKJUFSCIQV"
enc = str.maketrans(alpha, key)
usrInput = 'HELLO'
print(usrInput.translate(enc))
</snippet></ROW><ROW><id>17001400</id><snippet>import string
alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
key =   "XPMGTDHLYONZBWEARKJUFSCIQV"
enc = string.maketrans(alpha, key)
inp = 'HELLO'
print string.translate(inp, enc)
</snippet></ROW><ROW><id>17001400</id><snippet>LTZZE
</snippet></ROW><ROW><id>17001474</id><snippet>how</snippet></ROW><ROW><id>17001474</id><snippet>how</snippet></ROW><ROW><id>17001513</id><snippet>import boto.utils
md = boto.utils.get_instance_metadata(timeout=.1, num_retries=0)
</snippet></ROW><ROW><id>17001513</id><snippet>timeout</snippet></ROW><ROW><id>17001513</id><snippet>num_retries</snippet></ROW><ROW><id>17001804</id><snippet>plot()</snippet></ROW><ROW><id>17001804</id><snippet>import matplotlib.pyplot as plt
def plot_something(x, y, **kwargs):
    title  = kwargs.pop( 'title'  )
    xlabel = kwargs.pop( 'xlabel' )
    ylabel = kwargs.pop( 'ylabel' )
    plt.figure()
    plt.plot(x, y, **kwargs)
    fig = plt.gcf()
    for axis in fig.axes:
        axis.set_title( title )
        axis.xaxis.set_label( xlabel )
        axis.yaxis.set_label( ylabel )
    return axis


plot_conf = {'title': 'Blabla', 'xlabel':'Time (s)', 'ylabel': 'Speed (m/s)'}
x = [1.,2.,3.]
y = [1.,4.,9.]
axis = plot_something(x=x,y=y, **plot_conf)
</snippet></ROW><ROW><id>17002034</id><snippet>def transpose(*args, **kwargs):
    header = kwargs.pop('header', None)
    if kwargs:
        raise TypeError('unexpected keyword args to transpose()')
    print 'transpose: args:', args
    print 'transpose: header:', header
</snippet></ROW><ROW><id>17002109</id><snippet>import itertools

def process(lst):
    # Guard clause against empty lists
    if len(lst) &lt; 1:
        return lst

    # use a dictionary here to work around closure limitations
    state = { 'prev': lst[0], 'n': 0 }

    def grouper(x):
        if x &lt; state['prev']:
            state['n'] += 1

        state['prev'] = x
        return state['n']

    return [ list(g) for k, g in itertools.groupby(lst, grouper) ]
</snippet></ROW><ROW><id>17002109</id><snippet>&gt;&gt;&gt; data = [45,78,120,47,58,50,32,34]
&gt;&gt;&gt; print (list(process(data)))
[[45, 78, 120], [47, 58], [50], [32, 34]]
</snippet></ROW><ROW><id>17002109</id><snippet>itertools.groupby</snippet></ROW><ROW><id>17002109</id><snippet>class process:
    def __call__(self, lst):
        if len(lst) &lt; 1:
            return lst

        self.prev = lst[0]
        self.n = 0

        return [ list(g) for k, g in itertools.groupby(lst, self._grouper) ]

    def _grouper(self, x):
        if x &lt; self.prev:
            self.n += 1

        self.prev = x
        return self.n



data = [45,78,120,47,58,50,32,34]
print (list(process()(data)))
</snippet></ROW><ROW><id>17002109</id><snippet>import itertools

def process(lst):
    # Guard clause against empty lists
    if len(lst) &lt; 1:
        return lst

    # use an object here to work around closure limitations
    state = type('State', (object,), dict(prev=lst[0], n=0))

    def grouper(x):
        if x &lt; state.prev:
            state.n += 1

        state.prev = x
        return state.n

    return [ list(g) for k, g in itertools.groupby(lst, grouper) ]

data = [45,78,120,47,58,50,32,34]
print (list(process(data)))
</snippet></ROW><ROW><id>17002159</id><snippet>functools.partial()</snippet></ROW><ROW><id>17002159</id><snippet>from functools import partial

self.FunctionBuffer["stack"].append(partial(self.ApplyFunction, arg1, arg2, arg3))
</snippet></ROW><ROW><id>17002159</id><snippet>functools.partial</snippet></ROW><ROW><id>17002159</id><snippet>&gt;&gt;&gt; from functools import partial
&gt;&gt;&gt; def foo(bar, baz): print (bar, baz)
... 
&gt;&gt;&gt; p = partial(foo, 1, 2)
&gt;&gt;&gt; p()
(1, 2)
&gt;&gt;&gt; p = partial(foo, 1)
&gt;&gt;&gt; p(2)
(1, 2)
</snippet></ROW><ROW><id>17002159</id><snippet>self.FunctionBuffer["stack"].append(lambda: self.ApplyFunction(arg1, arg2, arg3))
</snippet></ROW><ROW><id>17002159</id><snippet>partial()</snippet></ROW><ROW><id>17002402</id><snippet>def task():
    init()
    execute(main_job)

def init():
    # do some initialization

    # set host
    env.host = ['192.168.5.11', '192.168.5.12']

@parallel
def main_job():
    # main job code...
</snippet></ROW><ROW><id>17002494</id><snippet>dflist = [df1, df2, df3, df4, df5, df6, df7, df8]
</snippet></ROW><ROW><id>17002494</id><snippet>frame = {}
for idx, df in enumerate(dflist):
    n = idx+1  # Since lists are 0-indexed
    name = "df{0:d}.Close".format(n)
    close = df["Close"]
    frame[name] = close
</snippet></ROW><ROW><id>17002494</id><snippet>{"df{0:d}.Close".format(idx+1): df["Close"] for idx, df in enumerate(dflist)}
</snippet></ROW><ROW><id>17002587</id><snippet>SELECT u.chromosome, u.gene_name ,u.strand, s.transcript_affected, 
s.ensembl_gene_id, s.gene_name FROM utr_file u INNER JOIN ssm_file s ON u.chromosome=
s.chromosome AND u.strand = s.chromosome_strand
WHERE s.chromosome_start BETWEEN u.start AND u.end ORDER BY u.chromosome;
</snippet></ROW><ROW><id>17002596</id><snippet>SITE_ROOT = os.path.dirname(__file__)
THUMBNAIL_DEBUG = True
MEDIA_ROOT = os.path.join(SITE_ROOT, 'media')
MEDIA_URL = '/media/'
</snippet></ROW><ROW><id>17002596</id><snippet>from django.conf import settings
media_root = getattr(settings, 'MEDIA_ROOT', '/media')    

urlpatterns += patterns('', 
url(r'^media/(?P&lt;path&gt;.*)$','django.views.static.serve',
    {'document_root': media_root})
)
</snippet></ROW><ROW><id>17002704</id><snippet>lol(a)</snippet></ROW><ROW><id>17002704</id><snippet>a=[]</snippet></ROW><ROW><id>17002704</id><snippet>a</snippet></ROW><ROW><id>17002704</id><snippet>a</snippet></ROW><ROW><id>17002704</id><snippet>k</snippet></ROW><ROW><id>17002704</id><snippet>k</snippet></ROW><ROW><id>17002704</id><snippet>[1]</snippet></ROW><ROW><id>17002704</id><snippet>def lol(a):
    a[:] = [1]
    return a

k = [2, 3]
lol(k) # now k is equal to [1]
</snippet></ROW><ROW><id>17002710</id><snippet>body = Message.Body

if body.startswith('!'):
    parts = body.split()    # ['!ping', 'google.com']
    command = parts[0][1:]  # 'ping'

    result = commands[command](*parts[1:]) # Calls `ping` with 'google.com'
    Message.Chat.SendMessage(result)  # Prints out the resulting string
</snippet></ROW><ROW><id>17002710</id><snippet>def ping(url):
    if os.system("ping " + url) == 0:
        return 'Online!'
    else:
        return 'Offline!'
</snippet></ROW><ROW><id>17002710</id><snippet>commands = {
    'ping': ping
}
</snippet></ROW><ROW><id>17002710</id><snippet>os.system()</snippet></ROW><ROW><id>17002710</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>17002752</id><snippet>import os, multiprocessing
p = os.popen("ps aux|awk 'NR &gt; 0 { s +=$3 }; END {print s}'").read().rstrip("\n")
print "Cores:", multiprocessing.cpu_count(), '\nCPU Load:', p, "%"
</snippet></ROW><ROW><id>17002752</id><snippet>Cores: 4
CPU Load: 5.1 %
</snippet></ROW><ROW><id>17002772</id><snippet>def front_back(a, b):
    hlena, hlenb = (len(a) + 1)/2, (len(b) + 1)/2
    return a[:hlena] + b[:hlenb] + a[hlena:] + b[hlenb:]
</snippet></ROW><ROW><id>17002772</id><snippet>if</snippet></ROW><ROW><id>17002872</id><snippet>fulltaxa</snippet></ROW><ROW><id>17002872</id><snippet>filltaxlist</snippet></ROW><ROW><id>17002872</id><snippet>fulltaxa</snippet></ROW><ROW><id>17002872</id><snippet>fulltaxa</snippet></ROW><ROW><id>17002872</id><snippet>from collections import defaultdict
filltaxlist = open("file with query number.txt", "rw")
fulltaxa = open("output file with hit line match", "rw")

possibles = {}
for i, line in enumerate(filltaxalist):
    line = line.strip()
    taxid = re.split("\t", line)
    lookup = taxid[5] # this value is a number and I need the exact match only so I covert it to an integer
    int1 = int(lookup)
    possibles[int1] = i

output_lines = defaultdict(list)
for line in open("File to search.txt", "r"):
    data = re.split(',', line)
    hit = int(data[0]) # every value in this file is a number separated by a ,
    if hit in possibles:
        output_lines[possibles[hit]].append(line)

fulltaxa.writelines(line for lines in output_lines.values() for line in lines)
</snippet></ROW><ROW><id>17002872</id><snippet>data = re.split(',', line)
</snippet></ROW><ROW><id>17002872</id><snippet>data = line.split(',')
</snippet></ROW><ROW><id>17002967</id><snippet>&gt;&gt;&gt; import networkx as nx
&gt;&gt;&gt; import matplotlib.pyplot as plt
&gt;&gt;&gt; G = nx.read_graphml('test.graphml')
&gt;&gt;&gt; nx.draw(G)
&gt;&gt;&gt; plt.show()
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17002967</id><snippet>for node in G.nodes(data=True):
    print node
</snippet></ROW><ROW><id>17002967</id><snippet>('n8', {'y': '178.1328125', 'x': '268.0', 'label': '8'})
('n9', {'y': '158.1328125', 'x': '0.0', 'label': '9'})
('n0', {'y': '243.1328125', 'x': '160.0', 'label': '0'})
('n1', {'y': '303.1328125', 'x': '78.0', 'label': '1'})
('n2', {'y': '82.1328125', 'x': '221.0', 'label': '2'})
('n3', {'y': '18.1328125', 'x': '114.0', 'label': '3'})
('n4', {'y': '151.1328125', 'x': '170.0', 'label': '4'})
('n5', {'y': '122.1328125', 'x': '85.0', 'label': '5'})
('n6', {'y': '344.1328125', 'x': '231.0', 'label': '6'})
('n7', {'y': '55.1328125', 'x': '290.0', 'label': '7'})
</snippet></ROW><ROW><id>17002967</id><snippet>n5</snippet></ROW><ROW><id>17002967</id><snippet>&gt;&gt;&gt; print G['n5']['x']
</snippet></ROW><ROW><id>17002967</id><snippet>85.0</snippet></ROW><ROW><id>17003005</id><snippet>@</snippet></ROW><ROW><id>17003005</id><snippet>,@</snippet></ROW><ROW><id>17003005</id><snippet>@</snippet></ROW><ROW><id>17003005</id><snippet>&gt;&gt;&gt; print ',x'.split(',')
['', 'x']
</snippet></ROW><ROW><id>17003005</id><snippet>@</snippet></ROW><ROW><id>17003005</id><snippet>for item in fq_record[1:]</snippet></ROW><ROW><id>17003116</id><snippet>context.write(anonymized(key), value);</snippet></ROW><ROW><id>17003122</id><snippet>a.__dict__</snippet></ROW><ROW><id>17003122</id><snippet>vars(a)</snippet></ROW><ROW><id>17003122</id><snippet>a</snippet></ROW><ROW><id>17003122</id><snippet>a</snippet></ROW><ROW><id>17003122</id><snippet>a.b = 123</snippet></ROW><ROW><id>17003122</id><snippet>__dict__</snippet></ROW><ROW><id>17003122</id><snippet>a</snippet></ROW><ROW><id>17003122</id><snippet>C.__dict__</snippet></ROW><ROW><id>17003122</id><snippet>print a.a</snippet></ROW><ROW><id>17003122</id><snippet>a</snippet></ROW><ROW><id>17003122</id><snippet>C</snippet></ROW><ROW><id>17003122</id><snippet>a</snippet></ROW><ROW><id>17003229</id><snippet>setattr</snippet></ROW><ROW><id>17003229</id><snippet>for da in range(10):
    setattr(self, 'var_li_{}'.format(da), da)
</snippet></ROW><ROW><id>17003567</id><snippet>crosstab</snippet></ROW><ROW><id>17003567</id><snippet>pivot_table</snippet></ROW><ROW><id>17003567</id><snippet>from itertools import product
ct = pd.crosstab(a, [b, c], rownames=['a'], colnames=['b', 'c'])
a_x_b = list(product(np.unique(b), np.unique(c)))
a_x_b = pd.MultiIndex.from_tuples(a_x_b)

In [15]: ct.reindex_axis(a_x_b, axis=1).fillna(0)
Out[15]:
      one          two
     dull  shiny  dull  shiny
a
bar     1      0     1      0
foo     2      0     1      2
</snippet></ROW><ROW><id>17003567</id><snippet>product</snippet></ROW><ROW><id>17003580</id><snippet>import sys

t=raw_input()
try:
    t=int(t)
except:
    sys.exit(1)

while(t&gt;0):
    pa=raw_input()
    try:
        pa=float(pa)
    except:
        break
    if(pa&gt;0.500000):
        ans=10000*pa*(3-(2*pa))
        print '%0.6f' % ans
    if(pa&lt;=0.500000):
        pa=1-pa;
        ans=10000*pa*(3-(2*pa))
        print '%0.6f' % ans
    t=t-1
</snippet></ROW><ROW><id>17003636</id><snippet>for i in range(len(self.OBJECTS)):
    #img = Texture(see op)
    img = self.OBJECTS[i].IMAGE
    print(img)
    e = None
    if self.OBJECTS[i].zOrder == 4: # is isometric image
        # tx and ty are translated positions for screen2iso. See Below
        if ((self.tx &gt;= 0 and self.tx &lt; self.SETTING['MAP_WIDTH']) and (self.ty &gt;= 0 and self.ty &lt; self.SETTING['MAP_HEIGHT'])):
            # map_x and map_y are starting points for the map its self.
            ix, iy = self.screen2iso(
                (x - (self.map_x + (self.SETTING['TILE_WIDTH'] / 2))),
                (y - (self.map_y))
            )
            imgx, imgy = self.screen2iso(
                (img.x - (self.map_x + (self.SETTING['TILE_WIDTH'] / 2))),
                (img.y - (self.map_y))
            )
            if (imgx+2) == ix:
                if (imgy+1) == iy:
                    e = self.OBJECTS[i]
                else:
                    continue
            else:
                continue
    else: # Not an isometric image
        if x &gt; img.x and x &lt; (img.x + img.rect[2]):
            if y &gt; img.y and y &lt; (img.y + img.rect[3]):
                #is click inside of visual area of image?
                if self.getCordInImage(x, y, self.OBJECTS[i].IMAGE):
                    if self.getAlphaOfPixel(self.OBJECTS[i]) != 0:
                        e = self.OBJECTS[i]
                else:
                    continue
            else:
                continue
        else:
            continue
    if e != None:
        if self.CLICKED['zOrder'] &lt; e.getZ():
            self.CLICKED['zOrder'] = e.getZ()
            self.CLICKED['e'] = e
        else:
            continue
    else:
        continue
</snippet></ROW><ROW><id>17003636</id><snippet>def getCordInImage(self, x, y, t):
    return [x - t.x, y - t.y]
</snippet></ROW><ROW><id>17003636</id><snippet>def getAlphaOfPixel(self, t):
    mx,my = pygame.mouse.get_pos()
    x,y = self.getCordInImage(mx,my,t.IMAGE)
    #mask = pygame.mask.from_surface(t.IMAGE.image)
    return t.IMAGE.image.get_at([x,y])[3]
</snippet></ROW><ROW><id>17003636</id><snippet>def screen2iso(self, x, y):
    x = x / 2
    xx = (y + x) / (self.SETTING['TILE_WIDTH'] / 2)
    yy = (y - x) / (self.SETTING['TILE_WIDTH'] / 2)
    return xx, yy
</snippet></ROW><ROW><id>17003636</id><snippet>def iso2screen(self, x, y):
    xx = (x - y) * (self.SETTING['TILE_WIDTH'] / 2)
    yy = (x + y) * (self.SETTING['TILE_HEIGHT'] / 2)
    return xx, yy
</snippet></ROW><ROW><id>17003743</id><snippet>conn == self.conn
</snippet></ROW><ROW><id>17003743</id><snippet>x</snippet></ROW><ROW><id>17003743</id><snippet>x.conn.send(something)
</snippet></ROW><ROW><id>17003743</id><snippet>for x in User_List:
    x.conn.send(x.username.encode())
</snippet></ROW><ROW><id>17003743</id><snippet>for x in User_List:
    for y in User_List:
        x.conn.send(y.username.encode())
</snippet></ROW><ROW><id>17003912</id><snippet>from rpy2.robjects.packages import importr

# do the following _only the first time_, to install the package seqLogo
base = importr('base')
base.source("http://www.bioconductor.org/biocLite.R")
biocinstaller = importr("BiocInstaller")
biocinstaller.biocLite("seqLogo")

# load the installed package "seqLogo"
seqlogo = importr("seqLogo")
</snippet></ROW><ROW><id>17003946</id><snippet>temp</snippet></ROW><ROW><id>17003946</id><snippet>itertools.permutations</snippet></ROW><ROW><id>17003946</id><snippet>import itertools
f = open("temp","r")
lines = [line.split(' ')[-1].strip() for line in f] #1
pairs = list(itertools.permutations(lines, 2)) #2
r = open('result', 'w') #3
r.write("\n".join([" ".join(p) for p in pairs])) #4
r.close() #5
</snippet></ROW><ROW><id>17003946</id><snippet>[line.split(' ')[-1].strip() for line in f]</snippet></ROW><ROW><id>17003946</id><snippet>-1</snippet></ROW><ROW><id>17003946</id><snippet>\n</snippet></ROW><ROW><id>17003946</id><snippet>\n</snippet></ROW><ROW><id>17003946</id><snippet>result</snippet></ROW><ROW><id>17003946</id><snippet>" "</snippet></ROW><ROW><id>17003946</id><snippet>\n</snippet></ROW><ROW><id>17004503</id><snippet>is_dup = sum(1 for l in list1 if len(set(l)) &lt; len(l))
if is_dup &gt; 0:
  print ("repeat found")
else:
  print ("no repeat found")
</snippet></ROW><ROW><id>17004503</id><snippet>any</snippet></ROW><ROW><id>17004503</id><snippet>any(len(set(l)) &lt; len(l) for l in list1)
</snippet></ROW><ROW><id>17004503</id><snippet>flattened = sum(list1, [])
if len(flattened) &gt; len(set(flattened)):
  print ("dups")
else:
  print ("no dups")
</snippet></ROW><ROW><id>17004503</id><snippet>itertools.chain</snippet></ROW><ROW><id>17004503</id><snippet>flattened = list(itertools.chain(*list1))
</snippet></ROW><ROW><id>17004503</id><snippet>sum</snippet></ROW><ROW><id>17004509</id><snippet>true</snippet></ROW><ROW><id>17004509</id><snippet>True</snippet></ROW><ROW><id>17004509</id><snippet>height</snippet></ROW><ROW><id>17004509</id><snippet>y -= mouse_c.get_height()/2 
</snippet></ROW><ROW><id>17004537</id><snippet>CR/LF</snippet></ROW><ROW><id>17004537</id><snippet>git</snippet></ROW><ROW><id>17004717</id><snippet>DEBUG = True</snippet></ROW><ROW><id>17004717</id><snippet>STATIC_URL</snippet></ROW><ROW><id>17004717</id><snippet>/static/</snippet></ROW><ROW><id>17004717</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>17004717</id><snippet>STATIC_URL</snippet></ROW><ROW><id>17004717</id><snippet>yourdomain.com/static/foo</snippet></ROW><ROW><id>17004717</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>17004717</id><snippet>foo</snippet></ROW><ROW><id>17004717</id><snippet>./manage.py collectstatic</snippet></ROW><ROW><id>17004717</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>17004717</id><snippet>STATIC_ROOT</snippet></ROW><ROW><id>17004717</id><snippet>collectstatic</snippet></ROW><ROW><id>17004717</id><snippet>admin</snippet></ROW><ROW><id>17004717</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>17004817</id><snippet>copy</snippet></ROW><ROW><id>17004817</id><snippet>frmEnv = __import__(conf)
frmEnv.SCHEMA='abc'

toEnv = copy.deepcopy(frmEnv) # or copy.copy() depending on what are the members of frmEnv...
toEnv.SCHEMA='def'

print(frmEnv.SCHEMA, toEnv.SCHEMA)

Output:

('abc', 'def')
</snippet></ROW><ROW><id>17004817</id><snippet>imp</snippet></ROW><ROW><id>17004889</id><snippet>...
function myFunction()
{
    {% for value in entries %}
        localStorage.setItem(localStorage-{{ forloop.counter0 }}, {{ value }});
    {% endfor %}
}
....
</snippet></ROW><ROW><id>17004889</id><snippet>....
function myFunction()
{
    localStorage.setItem(localStorage-0, 'string_version_of_entry_0');
    localStorage.setItem(localStorage-1, 'string_version_of_entry_1');
    localStorage.setItem(localStorage-2, 'string_version_of_entry_2');
    ...
}
....
</snippet></ROW><ROW><id>17004889</id><snippet>Entry</snippet></ROW><ROW><id>17004889</id><snippet>def __unicode__(self)</snippet></ROW><ROW><id>17004889</id><snippet>Entry</snippet></ROW><ROW><id>17004941</id><snippet>from django import forms
class MyForm(forms.Form):
    check = forms.BooleanField(required = True)
    # your other form fields
</snippet></ROW><ROW><id>17004941</id><snippet>required = True</snippet></ROW><ROW><id>17005116</id><snippet>import csv

in_1_name = "/home/julien/input.csv"
in_2_name = "/home/julien/excel/output.csv"
out_name = "/home/julien/excel/merged.csv"

with open(in_1_name) as in_1, open(in_2_name) as in_2, open(out_name, 'w') as out:
    reader1 = csv.reader(in_1, delimiter=";")
    reader2 = csv.reader(in_2, delimiter=";")
    writer = csv.writer(out, delimiter=";")
    for row1, row2 in zip(reader1, reader2):
        if row1[0] and row2[0]:
            writer.writerow([row1[0], row2[0]])
</snippet></ROW><ROW><id>17005116</id><snippet>            row.append(result)
            writer.writerow(row)
</snippet></ROW><ROW><id>17005116</id><snippet>            row.append(result)
        writer.writerow(row)
</snippet></ROW><ROW><id>17005171</id><snippet>str.startswith</snippet></ROW><ROW><id>17005171</id><snippet>test_tuple=tuple(test_list)
for data in data_list:
    if data.startswith(test_tuple):
        ...
</snippet></ROW><ROW><id>17005171</id><snippet>matching_strings = [ x for x in data_list if x.startswith(test_tuple) ]
</snippet></ROW><ROW><id>17005171</id><snippet>filter</snippet></ROW><ROW><id>17005171</id><snippet>import operator
f = operator.methodcaller( 'startswith', tuple(test_list) )
matching_strings = filter( f, test_list )
</snippet></ROW><ROW><id>17005204</id><snippet>_fields</snippet></ROW><ROW><id>17005204</id><snippet>In [11]: pd.Series(a, a._fields)
Out[11]:
ticker            GE
date      2010-01-01
price             30
dtype: object
</snippet></ROW><ROW><id>17005204</id><snippet>In [12]: df = pd.DataFrame(l, columns=l[0]._fields)

In [13]: df
Out[13]:
  ticker        date  price
0     GE  2010-01-01     30
1     GE  2010-01-02     31
</snippet></ROW><ROW><id>17005204</id><snippet>set_index</snippet></ROW><ROW><id>17005204</id><snippet>inplace</snippet></ROW><ROW><id>17005204</id><snippet>In [14]: df.set_index(['ticker', 'date'], inplace=True)

In [15]: df
Out[15]:
                   price
ticker date
GE     2010-01-01     30
       2010-01-02     31
</snippet></ROW><ROW><id>17005347</id><snippet>added = int(input("How many points would you like to assign?")
</snippet></ROW><ROW><id>17005543</id><snippet>In [2]: list1 = [1,2,3,4,5,6]

In [3]: [x+170 for x in list1]
Out[3]: [171, 172, 173, 174, 175, 176]
</snippet></ROW><ROW><id>17005543</id><snippet>map</snippet></ROW><ROW><id>17005543</id><snippet>In [5]: map(lambda x: x+170, list1)
Out[5]: [171, 172, 173, 174, 175, 176]
</snippet></ROW><ROW><id>17005543</id><snippet>$ python -m timeit 'list1=[1,2,3,4,5,6]' '[x+170 for x in list1]'
1000000 loops, best of 3: 0.793 usec per loop
$ python -m timeit 'list1=[1,2,3,4,5,6]' 'map(lambda x: x+170, list1)'
1000000 loops, best of 3: 1.74 usec per loop
</snippet></ROW><ROW><id>17005583</id><snippet>pyropes</snippet></ROW><ROW><id>17005642</id><snippet>class StoreNames(db.Expando):
  index = db.FloatProperty()

name = "unknown"

value = "something"

store = StoreNames()

setattr(db, name, value)
</snippet></ROW><ROW><id>17005888</id><snippet>palette</snippet></ROW><ROW><id>17005888</id><snippet>image[0]</snippet></ROW><ROW><id>17005888</id><snippet>palette</snippet></ROW><ROW><id>17005888</id><snippet>image[1]</snippet></ROW><ROW><id>17005888</id><snippet>&gt;&gt;&gt; palette = array( [ [0,0,0],                # black
...                    [255,0,0],              # red
...                    [0,255,0],              # green
...                    [0,0,255],              # blue
...                    [255,255,255] ] )       # white
&gt;&gt;&gt; image = array( [ [ 0, 1, 2, 0 ],           # each value corresponds to a color in the palette
...                  [ 0, 3, 4, 0 ]  ] )
&gt;&gt;&gt; palette[image]                            # the (2,4,3) color image
array([[[  0,   0,   0], # row at index 0 of palete
        [255,   0,   0], # index 1
        [  0, 255,   0], # index 2
        [  0,   0,   0]], # index 0
       [[  0,   0,   0], # index 0
        [  0,   0, 255], # index 3
        [255, 255, 255], # index 4
        [  0,   0,   0]]]) # index 0
</snippet></ROW><ROW><id>17005889</id><snippet>for i in range(3,x):</snippet></ROW><ROW><id>17005889</id><snippet>32 % 3 != 0</snippet></ROW><ROW><id>17005889</id><snippet>True</snippet></ROW><ROW><id>17005889</id><snippet>return True</snippet></ROW><ROW><id>17005889</id><snippet>for i in range(3,x): #Ignore sqrt(x) improvement
    if x % i == 0:
        return False
return True
</snippet></ROW><ROW><id>17005889</id><snippet>False</snippet></ROW><ROW><id>17005889</id><snippet>True</snippet></ROW><ROW><id>17005889</id><snippet>xrange()</snippet></ROW><ROW><id>17006031</id><snippet>try / except</snippet></ROW><ROW><id>17006031</id><snippet>try:
    page = urllib.request.urlopen(args).read()
    # ...
except urllib.error.HTTPError as e:
    # we don't care about no stinking errors
    # ... but if we did, e.code would have the http status code...
    # ... and e.reason would have an explanation of the error (hopefully)
    pass
</snippet></ROW><ROW><id>17006031</id><snippet>find</snippet></ROW><ROW><id>17006031</id><snippet>find_all</snippet></ROW><ROW><id>17006031</id><snippet>text</snippet></ROW><ROW><id>17006031</id><snippet>find</snippet></ROW><ROW><id>17006031</id><snippet>if soup.find(text=re.compile('my search string')):
    # do something
</snippet></ROW><ROW><id>17006031</id><snippet>text</snippet></ROW><ROW><id>17006048</id><snippet>./manage.py dbshell
</snippet></ROW><ROW><id>17006139</id><snippet>INT</snippet></ROW><ROW><id>17006139</id><snippet>CAST</snippet></ROW><ROW><id>17006139</id><snippet>SELECT kind, CAST(SUM(n) AS SIGNED) n 
  FROM table1 
 GROUP BY kind
</snippet></ROW><ROW><id>17006149</id><snippet>break</snippet></ROW><ROW><id>17006149</id><snippet>tries = 0
while tries &lt; 3:
    x = raw_input("Enter password Alpha or Alphanumeric! No spaces! ")
    if x.isalnum():
        print "Saved"
        break
    print "Try again"
    tries += 1
</snippet></ROW><ROW><id>17006149</id><snippet>Enter password Alpha or Alphanumeric! No spaces! Hi!@#
Try again
Enter password Alpha or Alphanumeric! No spaces! !@#!@#
Try again
Enter password Alpha or Alphanumeric! No spaces! @@@@
Try again
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17006149</id><snippet>Enter password Alpha or Alphanumeric! No spaces! No!
Try again
Enter password Alpha or Alphanumeric! No spaces! Okay
Saved
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17006193</id><snippet>userset.update(userid_delimiter_results)
</snippet></ROW><ROW><id>17006193</id><snippet>userset.add(userid_delimiter_results)
</snippet></ROW><ROW><id>17006193</id><snippet>userset</snippet></ROW><ROW><id>17006268</id><snippet>class Test:

    def __init__(self):
        self.a = 10
        self.b = 20
        self.c = 30

    def _read_vars(self):
        return self.a, self.b, self.c

    def dosomething(self):
        a, b, c = self._read_vars()
        return a + b * c

    def dosomethingelse(self):
        a, b, c = self._read_vars()
        return a - b * c
</snippet></ROW><ROW><id>17006268</id><snippet>self.inst_var = value</snippet></ROW><ROW><id>17006268</id><snippet>self</snippet></ROW><ROW><id>17006268</id><snippet>def updatesomethings(s):
    s.a, s.b, s.c = s.a + s.c, s.b - s.a, s.c * s.b
</snippet></ROW><ROW><id>17006268</id><snippet>class Test:

    def __init__(self, a, b, c, d, e, f, g, h, i):
        self._vars = [a, b, c, d, e, f, g, h, i]

    def fancy_stuff(self):
        a, b, c, d, e, f, g, h, i = self._vars
        a += d * h - g
        b -= e * f - c
        g = a + b - i
        self._vars[:] = a, b, c, d, e, f, g, h, i
</snippet></ROW><ROW><id>17006268</id><snippet>def updatesomethings(self):
    a = 100
    b = 200
    c = 300
    vars(self).update(locals())
    del self.self
</snippet></ROW><ROW><id>17006334</id><snippet>NameLengthEvaluator</snippet></ROW><ROW><id>17006334</id><snippet>10</snippet></ROW><ROW><id>17006334</id><snippet>NameLengthEvaluator</snippet></ROW><ROW><id>17006334</id><snippet>4</snippet></ROW><ROW><id>17006334</id><snippet>Mary</snippet></ROW><ROW><id>17006334</id><snippet>name_length_opinion</snippet></ROW><ROW><id>17006334</id><snippet>My names is long</snippet></ROW><ROW><id>17006334</id><snippet>My names is short</snippet></ROW><ROW><id>17006381</id><snippet>def simplify(l):
    i = 0
    while i &lt; len(l):
        s = set(map(abs,l[i]))
        for x in xrange(len(l)):
            if x == i: continue
            if s &lt;= set(map(abs,l[x])):
                l.pop(i)
                i -= 1
                break
        i += 1
</snippet></ROW><ROW><id>17006451</id><snippet>game_data</snippet></ROW><ROW><id>17006451</id><snippet>if card3 in game_data.values()</snippet></ROW><ROW><id>17006451</id><snippet>in</snippet></ROW><ROW><id>17006451</id><snippet>or</snippet></ROW><ROW><id>17006451</id><snippet>or</snippet></ROW><ROW><id>17006608</id><snippet>free</snippet></ROW><ROW><id>17006608</id><snippet>import os
import re
def meminfo():

    with os.popen('free -m') as f:
        output = f.read()

    fields = re.search(r'Mem\:\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)',
            output,re.M).group
    return dict(total=fields(1),used=fields(2),free=fields(3),
            shared=fields(4),buffers=fields(5),cached=fields(6))

print meminfo()
</snippet></ROW><ROW><id>17006608</id><snippet>{'used': '3292', 'buffers': '105', 'cached': '2063', 'shared': '0', 'total': '3550', 'free': '257'}
</snippet></ROW><ROW><id>17006608</id><snippet>-m</snippet></ROW><ROW><id>17006608</id><snippet>-k</snippet></ROW><ROW><id>17006608</id><snippet>-g</snippet></ROW><ROW><id>17006608</id><snippet>free</snippet></ROW><ROW><id>17006608</id><snippet>free</snippet></ROW><ROW><id>17006608</id><snippet>used/total
</snippet></ROW><ROW><id>17006608</id><snippet>(total-free)/total
</snippet></ROW><ROW><id>17006608</id><snippet>(used-cached)/total
</snippet></ROW><ROW><id>17006608</id><snippet>(total-free-cached)/total
</snippet></ROW><ROW><id>17006674</id><snippet>combine_it</snippet></ROW><ROW><id>17006674</id><snippet>date</snippet></ROW><ROW><id>17006674</id><snippet>name</snippet></ROW><ROW><id>17006674</id><snippet>grouped = data.groupby(['date', 'name'])
</snippet></ROW><ROW><id>17006674</id><snippet>result = grouped.agg(combine_it)
</snippet></ROW><ROW><id>17006674</id><snippet>agg</snippet></ROW><ROW><id>17006716</id><snippet>line.lower()</snippet></ROW><ROW><id>17006716</id><snippet>lines = [line.lower() for line in lines]
with open('listTogether.txt', 'w') as out:
    out.writelines(sorted(lines))
</snippet></ROW><ROW><id>17006736</id><snippet>if</snippet></ROW><ROW><id>17006736</id><snippet>(x,y)</snippet></ROW><ROW><id>17006736</id><snippet>&gt;&gt;&gt; [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
</snippet></ROW><ROW><id>17006736</id><snippet>&gt;&gt;&gt; combs = []
&gt;&gt;&gt; for x in [1,2,3]:
...     for y in [3,1,4]:
...         if x != y:
...             combs.append((x, y))
...
&gt;&gt;&gt; combs
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]
</snippet></ROW><ROW><id>17006736</id><snippet>[[ch for ch in word] for word in ("apple", "banana", "pear", "the", "hello")]
</snippet></ROW><ROW><id>17006793</id><snippet>ast.literal_eval()</snippet></ROW><ROW><id>17006793</id><snippet>import ast
with open('foo.txt', 'r') as myfile:
    fileoutput = myfile.read() # Assuming the whole file is just the list

original = ast.literal_eval(fileoutput)
for i in original:
    print i
</snippet></ROW><ROW><id>17006793</id><snippet>(0, 0)
(1, 2)
(4, 4)
(9, 6)
(16, 8)
(25, 10)
(36, 12)
(49, 14)
(64, 16)
(81, 18)
</snippet></ROW><ROW><id>17006892</id><snippet>ImageTk.PhotoImage</snippet></ROW><ROW><id>17006892</id><snippet>#outside of functions
images = list()

#inside function
global images
with open(images[i]) as f:
    img = ImageTk.PhotoImage(file=f)
    images.append(img)
</snippet></ROW><ROW><id>17006933</id><snippet>python web2py.py
</snippet></ROW><ROW><id>17006977</id><snippet>cursorclass=MySQLdb.cursors.SSCursor</snippet></ROW><ROW><id>17007463</id><snippet>os.system('/path/to/script.sh &amp;')
</snippet></ROW><ROW><id>17007463</id><snippet>subprocess.call('/path/to/script.sh &amp;', shell=True)
</snippet></ROW><ROW><id>17007511</id><snippet>raw_input()</snippet></ROW><ROW><id>17007511</id><snippet>int()</snippet></ROW><ROW><id>17007511</id><snippet>number2 = int(raw_input("Pick a number"))
</snippet></ROW><ROW><id>17007559</id><snippet>&gt;&gt;&gt; t = '\x80'
&gt;&gt;&gt; print t
&gt;&gt;&gt; '\x80'
</snippet></ROW><ROW><id>17007559</id><snippet>\x80</snippet></ROW><ROW><id>17007559</id><snippet>with open('file') as f:
    t = f.read()
print t
</snippet></ROW><ROW><id>17007559</id><snippet>'\\x80'
</snippet></ROW><ROW><id>17007559</id><snippet>result = bz2.decompress(eval('"'+parsedString'"'))
</snippet></ROW><ROW><id>17007682</id><snippet>StringIO</snippet></ROW><ROW><id>17007682</id><snippet>import StringIO
import csv
import requests

r = requests.get('http://www.twilio.com/resources/rates/international-sms-rates.csv')
reader = csv.DictReader(StringIO.StringIO(r.text))
row = next(reader) # get the next row
print(row)
</snippet></ROW><ROW><id>17007682</id><snippet>{'Country': '', ' Rate': '0.010', ' Name': 'UNITED STATES Inbound SMS - Other'}
</snippet></ROW><ROW><id>17007682</id><snippet>for row in reader:
    print(row)
    # do whatever with row
</snippet></ROW><ROW><id>17007682</id><snippet>reader = csv.DictReader(StringIO.StringIO(r.text))
list_of_dicts = list(reader)
</snippet></ROW><ROW><id>17007718</id><snippet>fusermount -V</snippet></ROW><ROW><id>17007718</id><snippet>with os.popen('fusermount -V') as p:
    versiontext = p.read()
#do something with version text
</snippet></ROW><ROW><id>17007928</id><snippet>@properties</snippet></ROW><ROW><id>17007928</id><snippet>class A(object):
   @property
   def a(self):
      return 2

b = A()
b.a
=&gt; 2
</snippet></ROW><ROW><id>17007928</id><snippet>classproperty</snippet></ROW><ROW><id>17007928</id><snippet>classproperty</snippet></ROW><ROW><id>17007928</id><snippet>class classproperty(object):
    def __init__(self, f):
        self.f = classmethod(f)
    def __get__(self, *a):
        return self.f.__get__(*a)()
</snippet></ROW><ROW><id>17007928</id><snippet>class A(object):
   @classproperty
   def a(self):
      return 2

A.a
=&gt; 2
</snippet></ROW><ROW><id>17007987</id><snippet>getattr</snippet></ROW><ROW><id>17007987</id><snippet>getattr(data,col1)
</snippet></ROW><ROW><id>17008050</id><snippet>y</snippet></ROW><ROW><id>17008050</id><snippet>list.extend()</snippet></ROW><ROW><id>17008050</id><snippet>words = []
while True:
   y = input()
   if y == "###":
     break
   y = y.lower()
   y = y.split()
   words.extend(y)
</snippet></ROW><ROW><id>17008050</id><snippet>words</snippet></ROW><ROW><id>17008050</id><snippet>&gt;&gt;&gt; words = []
&gt;&gt;&gt; while True:
...    y = input()
...    if y == "###":
...      break
...    y = y.lower()
...    y = y.split()
...    words.extend(y)
... 
Here is a line like sparkling wine
Line up now behind the cow
###
&gt;&gt;&gt; print(words)
['here', 'is', 'a', 'line', 'like', 'sparkling', 'wine', 'line', 'up', 'now', 'behind', 'the', 'cow']
</snippet></ROW><ROW><id>17008106</id><snippet>with open("/dev/sda",'rb') as f:
    with open("~/imagingtest.dd", "wb") as i:
        while True:
            if i.write(f.read(512)) == 0:
                break
</snippet></ROW><ROW><id>17008123</id><snippet>self.textbuffer.set_text("%r" % k.encrypt(text))
</snippet></ROW><ROW><id>17008123</id><snippet>import ast
text = ast.literal_eval(self.textbuffer.get_text(start, end))
</snippet></ROW><ROW><id>17008123</id><snippet>text</snippet></ROW><ROW><id>17008123</id><snippet>codecs</snippet></ROW><ROW><id>17008123</id><snippet>import codecs
self.text.buffer.set_text(codecs.encode(text, 'string-escape'))
...
text = codecs.decode(self.text.buffer.get_text(start, end), 'string-escape')
</snippet></ROW><ROW><id>17008154</id><snippet>description</snippet></ROW><ROW><id>17008154</id><snippet>&gt;&gt;&gt; print a['items'][0]['volumeInfo']['description']
Photo tutorials show stitching in action for 50+ free-motion quilting designs to create modern quilts with classic style! Popular blogger and designer, Natalia Bonner, illustrates her instructions with detailed photos that make it easier to get beautiful results on your home sewing machine. Learn how to quilt all-over, as filler, on borders, and on individual blocks...using loops and swirls, feathers and flames, flowers and vines, pebbles and more! Includes tips for choosing batting and thread, layering and basting, starting and stopping, and prepping your machine are included. After you've practiced, show off your new skills with six geometric quilt projects.
</snippet></ROW><ROW><id>17008154</id><snippet>get()</snippet></ROW><ROW><id>17008154</id><snippet>.items</snippet></ROW><ROW><id>17008154</id><snippet>.items()</snippet></ROW><ROW><id>17008309</id><snippet>   for x in line.split():
       u.append([int(x)])
       v.append([int(x)+1])
       w.append([int(x)+2])
       p.append([int(x)+3]) 
</snippet></ROW><ROW><id>17008309</id><snippet>   x = line.split()
   u.append([int(x[0])])
   v.append([int(x[1])])
   w.append([int(x[2])])
   p.append([int(x[3])])
</snippet></ROW><ROW><id>17008370</id><snippet>key</snippet></ROW><ROW><id>17008370</id><snippet>sorted</snippet></ROW><ROW><id>17008370</id><snippet>sorted(list_of_objects, key=lambda x: x.id)
</snippet></ROW><ROW><id>17008370</id><snippet>__cmp__</snippet></ROW><ROW><id>17008370</id><snippet>list</snippet></ROW><ROW><id>17008370</id><snippet>__cmp__</snippet></ROW><ROW><id>17008370</id><snippet>cmp</snippet></ROW><ROW><id>17008370</id><snippet>return cmp(self.id, other.id)
</snippet></ROW><ROW><id>17008370</id><snippet>a &lt;= b</snippet></ROW><ROW><id>17008370</id><snippet>b &gt;= a</snippet></ROW><ROW><id>17008370</id><snippet>==</snippet></ROW><ROW><id>17008370</id><snippet>!=</snippet></ROW><ROW><id>17008370</id><snippet>a == b</snippet></ROW><ROW><id>17008370</id><snippet>b == a</snippet></ROW><ROW><id>17008516</id><snippet>import email, email.utils, datetime, time    

def dtFormat(s):
  dt = email.utils.parsedate_tz(s)
  dt = email.utils.mktime_tz(dt)
  dt = datetime.datetime.fromtimestamp(dt)
  dt = dt.timetuple()
  return dt
</snippet></ROW><ROW><id>17008516</id><snippet>s = message.get("date")    # e.g. "Wed, 23 Jan 2011 12:03:11 -0700"
print(time.strftime("%Y-%m-%d-%H-%M-%S", dtFormat(s)))
</snippet></ROW><ROW><id>17008516</id><snippet>2011-01-23-21-03-11
</snippet></ROW><ROW><id>17008555</id><snippet>setEnabled(False)</snippet></ROW><ROW><id>17008555</id><snippet>setEnabled(True)</snippet></ROW><ROW><id>17008817</id><snippet>for tup in list:
    a,b,c,d,e = tup
</snippet></ROW><ROW><id>17009138</id><snippet>\r</snippet></ROW><ROW><id>17009138</id><snippet>]</snippet></ROW><ROW><id>17009138</id><snippet>[</snippet></ROW><ROW><id>17009138</id><snippet>OUTPUT = "[ \033[1m\x1b[32m" + DATE + "\x1b[0m ]\r"
</snippet></ROW><ROW><id>17009403</id><snippet>headwidth</snippet></ROW><ROW><id>17009403</id><snippet>frac</snippet></ROW><ROW><id>17009403</id><snippet>width</snippet></ROW><ROW><id>17009403</id><snippet>arrow0</snippet></ROW><ROW><id>17009403</id><snippet>polygons</snippet></ROW><ROW><id>17009403</id><snippet>(0,0)</snippet></ROW><ROW><id>17009403</id><snippet>import matplotlib.pyplot as plt
import matplotlib.patches as patches
from matplotlib import transforms
import numpy as np
from numpy import cos, sin
plt.close()
plt.plot([1,2],[0,4], 'w')
ax = plt.gcf().axes[0]

def patchesAB(styleA, styleB, orig, target,
                widthA, lengthA, widthB, lengthB,
                kwargsA, kwargsB, shrinkA=0., shrinkB=0.):
    '''
    Select 'styleA' and 'styleB' from the dictionary 'polygons'
    widthA, lengthA, widthB, lenghtB, shrinkA, shrinkB are defined in points
    kwargsA and kwargsB are dictionaries
    '''
    polygons = {\
        '|':np.array([[0,0],[0,1],[0.1,1],[0.1,-1],[0,-1],[0,0]], dtype=float),
        'arrow1':np.array([[0,0],[0,1],[-1,2],[3,0],[-1,-2],[0,-1],[0,0]], dtype=float),
        'arrow2':np.array([[0,0],[-1,1],[0,2],[3,0],[0,-2],[-1,-1],[0,0]], dtype=float),
               }
    xyA = polygons.get( styleA )
    xyB = polygons.get( styleB )
    #
    fig = plt.gcf()
    ax = fig.axes[0]
    trans = ax.transData
    pixPunit = trans.transform([(1,0),(0,1)])-ax.transData.transform((0,0))
    unitPpix = pixPunit
    unitPpix[0,0] = 1/unitPpix[0,0]
    unitPpix[1,1] = 1/unitPpix[1,1]
    #
    orig = np.array(orig)
    target = np.array(target)
    vec = target-orig
    angle = np.arctan2( vec[1], vec[0] )
    #
    lengthA *= unitPpix[0,0]
    lengthB *= unitPpix[0,0]
    widthA  *= unitPpix[1,1]
    widthB  *= unitPpix[1,1]
    orig   += (unitPpix[1,1]*sin(angle)+unitPpix[0,0]*cos(angle))*vec*shrinkA
    target -= (unitPpix[1,1]*sin(angle)+unitPpix[0,0]*cos(angle))*vec*shrinkB
    #TODO improve shrinking... another attempt:
    #orig   +=  unitPpix.dot(vec) * shrinkA
    #target -=  unitPpix.dot(vec) * shrinkB
    # polA
    if xyA != None:
        a = transforms.Affine2D()
        tA = a.rotate_around( orig[0], orig[1], angle+np.pi ) + trans
        xyA = np.float_(xyA)
        xyA[:,0] *= lengthA/(xyA[:,0].max()-xyA[:,0].min())
        xyA[:,1] *=  widthA/(xyA[:,1].max()-xyA[:,1].min())
        xyA += orig
        polA = patches.Polygon( xyA, **kwargsA )
        polA.set_transform( tA )
    else:
        polA = None
    # polB
    if xyB != None:
        a = transforms.Affine2D()
        tB = a.rotate_around( target[0], target[1], angle ) + trans
        xyB = np.float_(xyB)
        xyB[:,0] *= lengthB/(xyB[:,0].max()-xyB[:,0].min())
        xyB[:,1] *=  widthB/(xyB[:,1].max()-xyB[:,1].min())
        xyB += target
        polB = patches.Polygon( xyB, **kwargsB )
        polB.set_transform( tB )
    else:
        polB = None
    return polA, polB

# ARROW 0
plt.annotate('arrow0',xy=(2,1.5),xycoords='data',
             xytext=(1.1,1), textcoords='data',
             arrowprops=dict(frac=0.1,headwidth=10., width=2.))
#
kwargsA = dict( lw=1., ec='k', fc='gray' )
kwargsB = dict( lw=1., ec='k', fc='b' )
# ARROW 1
orig = (1.1,2.)
target = (2.,2.5)
shrinkA = 0.
shrinkB = 0.
polA, polB = patchesAB( '|', 'arrow1', orig, target, 20.,1.,60.,60.,
                        kwargsA, kwargsB, shrinkA, shrinkB )
ax.add_patch(polA)
ax.add_patch(polB)

ax.annotate('arrow1', xy=target, xycoords='data',
             xytext=orig, textcoords='data',
             arrowprops=dict(arrowstyle='-', patchA=polA, patchB=polB,
                 lw=1., shrinkA=shrinkA, shrinkB=shrinkB, relpos=(0.,0.),
                 mutation_scale=1.))
# ARROW 2
orig = (1.1,3.)
target = (2.,3.5)
polA, polB = patchesAB( '|', 'arrow2', orig, target, 20.,1.,60.,60.,
                        kwargsA, kwargsB, shrinkA, shrinkB )
ax.add_patch(polA)
ax.add_patch(polB)

ax.annotate('arrow2', xy=target, xycoords='data',
             xytext=orig, textcoords='data',
             arrowprops=dict(arrowstyle='-', patchA=polA, patchB=polB,
                 lw=1., shrinkA=shrinkA, shrinkB=shrinkB, relpos=(0.,0.),
                 mutation_scale=1.))
plt.autoscale()
plt.xlim(1.,2.2)
plt.ylim(0.5,4)
plt.show()
</snippet></ROW><ROW><id>17009496</id><snippet>PATH</snippet></ROW><ROW><id>17009496</id><snippet>C:\Python27\;C:\Python27\Scripts\;%PATH%</snippet></ROW><ROW><id>17009496</id><snippet>setuptools</snippet></ROW><ROW><id>17009496</id><snippet>cmd</snippet></ROW><ROW><id>17009496</id><snippet>easy_install django</snippet></ROW><ROW><id>17009496</id><snippet>mod_wsgi</snippet></ROW><ROW><id>17009496</id><snippet>mod_wsgi</snippet></ROW><ROW><id>17009901</id><snippet>hide()</snippet></ROW><ROW><id>17009901</id><snippet>app = QtGui.QApplication(sys.argv)
app.setQuitOnLastWindowClosed(False)
</snippet></ROW><ROW><id>17010123</id><snippet>QToolbar::addWidget</snippet></ROW><ROW><id>17010123</id><snippet>QToolbar::insertWidget</snippet></ROW><ROW><id>17010123</id><snippet>self.combo=QtGui.QComboBox()
toolBar.addWidget(self.combo)
self.combo.insertItems(1,["One","Two","Three"])
</snippet></ROW><ROW><id>17010123</id><snippet>=</snippet></ROW><ROW><id>17010123</id><snippet>.</snippet></ROW><ROW><id>17010289</id><snippet>:memory:</snippet></ROW><ROW><id>17010289</id><snippet>sqlite_vfs</snippet></ROW><ROW><id>17010289</id><snippet>mlock</snippet></ROW><ROW><id>17010323</id><snippet>import os
import collections
import random
import shutil

def get_identifier(path):
    with open(path) as fd:
        return fd.readline().strip()       #assuming you don't want the \n in the identifier

paths = ['/home/file1', '/home/file2', '/home/file3']
destination_dir = '/tmp'
identifiers = collections.defaultdict(list)
for path in paths:
    identifier = get_identifier(path)
    identifiers[identifier].append(path)

for identifier, paths in identifiers.items():
    sample = random.sample(paths, 500)
    for path in sample:
        file_name = os.path.basename(path)
        destination = os.path.join(destination_dir, file_name)
        shutil.copy(path, destination)
</snippet></ROW><ROW><id>17010422</id><snippet>In [1]: import BeautifulSoup
In [2]: from urllib import urlopen
In [3]: html = urlopen('http://www.gutenberg.org/files/82/82-h/82-h.htm').read()
In [4]: soup = BeautifulSoup.BeautifulSoup(html)
In [5]: len(soup('h2'))
Out [5]: 58
</snippet></ROW><ROW><id>17010504</id><snippet>wxPython</snippet></ROW><ROW><id>17010504</id><snippet>warnings</snippet></ROW><ROW><id>17010504</id><snippet>import warnings
warnings.filterwarnings('ignore', message='Not importing directory .*', module='wx.*')
</snippet></ROW><ROW><id>17010552</id><snippet>datetime.datetime.timedelta()</snippet></ROW><ROW><id>17010552</id><snippet>delta = end_financial_month - from_day
return delta.days
</snippet></ROW><ROW><id>17011179</id><snippet>L = [45, 42, 78, 120, 47, 2, 50, 32, 34]

cond = L[0]
res = [[cond]]
for item in L[1:]:
    if item &gt; cond:
        res[-1].append(item)
    else:
        cond = item
        res.append([cond])
</snippet></ROW><ROW><id>17011179</id><snippet>res</snippet></ROW><ROW><id>17011179</id><snippet>[[45], [42, 78, 120, 47], [2, 50, 32, 34]]
</snippet></ROW><ROW><id>17011179</id><snippet>0</snippet></ROW><ROW><id>17011179</id><snippet>&gt;&gt;&gt; cond = L[0]
&gt;&gt; cond
45
</snippet></ROW><ROW><id>17011179</id><snippet>res</snippet></ROW><ROW><id>17011179</id><snippet>45</snippet></ROW><ROW><id>17011179</id><snippet>res</snippet></ROW><ROW><id>17011179</id><snippet>&gt;&gt;&gt; res = [[cond]]
&gt;&gt;&gt; res
[[45]]
</snippet></ROW><ROW><id>17011179</id><snippet>L[1:]</snippet></ROW><ROW><id>17011179</id><snippet>&gt;&gt;&gt; L[1:]
[42, 78, 120, 47, 2, 50, 32, 34]
</snippet></ROW><ROW><id>17011179</id><snippet>res[-1]</snippet></ROW><ROW><id>17011179</id><snippet>item</snippet></ROW><ROW><id>17011179</id><snippet>cond</snippet></ROW><ROW><id>17011179</id><snippet>res.append([cond])</snippet></ROW><ROW><id>17011179</id><snippet>res</snippet></ROW><ROW><id>17011179</id><snippet>item &gt; cond</snippet></ROW><ROW><id>17011179</id><snippet>cond</snippet></ROW><ROW><id>17011179</id><snippet>L[1:]</snippet></ROW><ROW><id>17011179</id><snippet>L</snippet></ROW><ROW><id>17011179</id><snippet>L</snippet></ROW><ROW><id>17011179</id><snippet>L = iter([45,42,78,120,47,2,50,32,34])
cond = next(L)
res = [[cond]]
for item in L:
    if item &gt; cond:
        res[-1].append(item)
    else:
        cond = item
        res.append([cond])
</snippet></ROW><ROW><id>17011179</id><snippet>next(L)</snippet></ROW><ROW><id>17011179</id><snippet>next()</snippet></ROW><ROW><id>17011181</id><snippet>Counter</snippet></ROW><ROW><id>17011181</id><snippet>import collections

counts = collections.Counter()

while True:
    name = input('Enter a name: ')
    if not name:
        break
    counts[name] += 1

for name, count in counts.items():
    print('There is {} person named {}'.format(count, name))
</snippet></ROW><ROW><id>17011181</id><snippet>Counter</snippet></ROW><ROW><id>17011181</id><snippet>most_common</snippet></ROW><ROW><id>17011181</id><snippet>reversed</snippet></ROW><ROW><id>17011181</id><snippet>for name, count in reversed(counts.most_common()):
    print('There is {} person named {}'.format(count, name))
</snippet></ROW><ROW><id>17011181</id><snippet>for name, count in sorted(counts.items()):
    print('There is {} person named {}'.format(count, name))
</snippet></ROW><ROW><id>17011420</id><snippet>r.text</snippet></ROW><ROW><id>17011420</id><snippet>r.content</snippet></ROW><ROW><id>17011524</id><snippet>datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
</snippet></ROW><ROW><id>17011524</id><snippet>datetime.MINYEAR</snippet></ROW><ROW><id>17011524</id><snippet>1</snippet></ROW><ROW><id>17011524</id><snippet>1</snippet></ROW><ROW><id>17011524</id><snippet>datetime</snippet></ROW><ROW><id>17011524</id><snippet>Zero</snippet></ROW><ROW><id>17011524</id><snippet> time1 = datetime.now();
 time1 -= time1;
</snippet></ROW><ROW><id>17011524</id><snippet>time1</snippet></ROW><ROW><id>17011524</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>17011524</id><snippet>datetime.datetime</snippet></ROW><ROW><id>17011524</id><snippet>&gt;&gt;&gt; time1 = datetime.datetime.now();
&gt;&gt;&gt; time1
datetime.datetime(2013, 6, 9, 11, 13, 3, 57000)
&gt;&gt;&gt; type(time1)
&lt;class 'datetime.datetime'&gt;
&gt;&gt;&gt; time1 -= time1;
&gt;&gt;&gt; time1
datetime.timedelta(0)
&gt;&gt;&gt; type(time1)
&lt;class 'datetime.timedelta'&gt;
</snippet></ROW><ROW><id>17011524</id><snippet>zero = timedelta(0) 
</snippet></ROW><ROW><id>17011585</id><snippet>for i, value in enumerate(arr):
</snippet></ROW><ROW><id>17011585</id><snippet>for key, value in dic.items():
</snippet></ROW><ROW><id>17011779</id><snippet>soup.findAll(text=u'täkäen')
</snippet></ROW><ROW><id>17011779</id><snippet>&gt;&gt;&gt; from bs4 import BeautifulSoup
&gt;&gt;&gt; soup = BeautifulSoup('''\
...  &lt;td&gt;
...      &lt;a href="/gy/area/name/1208.html"&gt;täkäen&lt;/a&gt;
... ''')
&gt;&gt;&gt; soup
&lt;html&gt;&lt;body&gt;&lt;td&gt;
&lt;a href="/gy/area/name/1208.html"&gt;täkäen&lt;/a&gt;&lt;/td&gt;&lt;/body&gt;&lt;/html&gt;
&gt;&gt;&gt; soup.findAll(text=u'täkäen')
[u't\xe4k\xe4en']
</snippet></ROW><ROW><id>17011824</id><snippet>.replace('&lt;br&gt;','\r\n')</snippet></ROW><ROW><id>17011824</id><snippet>strip_tags(html)</snippet></ROW><ROW><id>17011824</id><snippet>from HTMLParser import HTMLParser

class MLStripper(HTMLParser):
    def __init__(self):
        self.reset()
        self.fed = []
    def handle_data(self, d):
        self.fed.append(d)
    def get_data(self):
        return ''.join(self.fed)

def strip_tags(html):
    s = MLStripper()
    s.feed(html)
    return s.get_data()
</snippet></ROW><ROW><id>17011897</id><snippet>RequestHandler</snippet></ROW><ROW><id>17011897</id><snippet>set_header</snippet></ROW><ROW><id>17011897</id><snippet>add_header</snippet></ROW><ROW><id>17011897</id><snippet>#!/usr/bin/python
# -*- coding: utf-8 -*-

import tornado.httpserver
import tornado.ioloop
import tornado.options
import tornado.web

from tornado.options import define, options
define("port", default=8000, help="run on the given port", type=int)

class IndexHandler(tornado.web.RequestHandler):
    def post(self):
        data = tornado.escape.json_decode(self.request.body)
        key = data.get('key', None)

        # result = fetch_data_for(key)        
        result = "ok\n"

        self.add_header('validation', 'value')
        self.write(result)      

if __name__ == "__main__":
    tornado.options.parse_command_line()
    app = tornado.web.Application(handlers=[(r"/", IndexHandler)])
    http_server = tornado.httpserver.HTTPServer(app)
    http_server.listen(options.port)
    tornado.ioloop.IOLoop.instance().start()
</snippet></ROW><ROW><id>17011897</id><snippet>$ curl -v "Accept: application/json" -H "Content-type: application/json" -X POST -d '{"key":"..."}'  http://localhost:8000
* getaddrinfo(3) failed for Accept:80
* Couldn't resolve host 'Accept'
* Closing connection #0
curl: (6) Couldn't resolve host 'Accept'
* About to connect() to localhost port 8000 (#0)
*   Trying 127.0.0.1... connected
&gt; POST / HTTP/1.1
&gt; User-Agent: curl/7.22.0 (i686-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3
&gt; Host: localhost:8000
&gt; Accept: */*
&gt; Content-type: application/json
&gt; Content-Length: 13
&gt; 
* upload completely sent off: 13out of 13 bytes
&lt; HTTP/1.1 200 OK
&lt; Date: Sun, 09 Jun 2013 16:49:40 GMT
&lt; Content-Length: 3
&lt; Validation: value
&lt; Content-Type: text/html; charset=UTF-8
&lt; Server: TornadoServer/3.0.1
&lt; 
ok
* Connection #0 to host localhost left intact
* Closing connection #0
</snippet></ROW><ROW><id>17012013</id><snippet>touch</snippet></ROW><ROW><id>17012013</id><snippet>.wsgi</snippet></ROW><ROW><id>17012013</id><snippet>$ touch path/to/your/app.wsgi
</snippet></ROW><ROW><id>17012122</id><snippet>from dateutil import parser

def reduce_string(string):
    i = len(string) - 1
    while string[i] &gt;= '0' and string[i] &lt; '9':
        i -= 1
    while string[i] &lt; '0' or string[i] &gt; '9':
        i -= 1
    return string[:i + 1]

def find_date(string):
    while string:
        try:
            dateString = parser.parse(string, fuzzy=True)
            year = dateString.year
            month = dateString.month
            day = dateString.day
            return (year, month, day)
        except ValueError:
            pass

        string = reduce_string(string)

    return None

date = find_date('2007-09-10_00005')
if date:
    print date
else:
    print "can't decode"
</snippet></ROW><ROW><id>17012437</id><snippet>malloc</snippet></ROW><ROW><id>17012437</id><snippet> /* bigarray.c */
int main(void) {
    int array[10000000];
    array[5000000] = 1;   /* Force linux to allocate memory.*/
    return 0;
}

$ gcc -O0 bigarray.c   #-O0 to prevent optimizations by the compiler
$ ./a.out 
Segmentation fault (core dumped)
</snippet></ROW><ROW><id>17012437</id><snippet>/* bigarray2.c */
#include &lt;stdlib.h&gt;

int main(void) {
    int *array;
    array = malloc(10000000 * sizeof(int));
    array[5000000] = 1;
    return 0;
}

$ gcc -O0 bigarray2.c
$ ./a.out 
$ echo $?
0
</snippet></ROW><ROW><id>17012626</id><snippet>Transfer-Encoding: chunked</snippet></ROW><ROW><id>17012626</id><snippet>from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler

class MyRequestHander(BaseHTTPRequestHandler):

    def do_GET(self):
        self.send_bogus_response()

    def do_POST(self):
        self.send_bogus_response()

    def send_bogus_response(self):
        self.send_response(200)
        self.send_header('Content-Type', 'text/plain')
        self.send_header('Connection', 'close')
        self.send_header('Transfer-Encoding', 'chunked')
        self.end_headers()

server = HTTPServer(('', 8000), MyRequestHander)
server.serve_forever()
</snippet></ROW><ROW><id>17012626</id><snippet>requests</snippet></ROW><ROW><id>17012626</id><snippet>&gt;&gt;&gt; import requests
&gt;&gt;&gt; requests.post('http://localhost:8000', data={'foo':'bar'})
...
httplib.IncompleteRead: IncompleteRead(0 bytes read)
</snippet></ROW><ROW><id>17012626</id><snippet>web.js</snippet></ROW><ROW><id>17012626</id><snippet>response.end()</snippet></ROW><ROW><id>17012626</id><snippet>request.on('end', ...)</snippet></ROW><ROW><id>17012626</id><snippet>request.on(...)</snippet></ROW><ROW><id>17012626</id><snippet>var server = http.createServer(function(request, response)
{
    if (request.method == 'POST')
    {
        var body = '';

        request.on('data', function(data)
        {
            body += data;
        });

        request.on('end', function()
        {
            //send data to clients.
            io.sockets.emit('data', parse(body));
            response.end();
        });
    }
});
</snippet></ROW><ROW><id>17012626</id><snippet>parse(...)</snippet></ROW><ROW><id>17012793</id><snippet>&lt;Return&gt;</snippet></ROW><ROW><id>17012793</id><snippet>inputfield.bind('&lt;Return&gt;', lambda _: program())
</snippet></ROW><ROW><id>17012793</id><snippet>bind</snippet></ROW><ROW><id>17012793</id><snippet>program</snippet></ROW><ROW><id>17012793</id><snippet>_</snippet></ROW><ROW><id>17012813</id><snippet>smtp.ehlo()</snippet></ROW><ROW><id>17012813</id><snippet>EHLO</snippet></ROW><ROW><id>17012813</id><snippet>STARTTLS</snippet></ROW><ROW><id>17012813</id><snippet>BLU0-SMTP&lt;somenumber&gt;phx.gbl</snippet></ROW><ROW><id>17012813</id><snippet>In [52]: s = smtplib.SMTP('smtp.live.com', port=587)

In [53]: s.ehlo()
Out[53]:
(250,
 'BLU0-SMTP17.phx.gbl Hello [188.134.8.114]\nTURN\nSIZE 41943040\nETRN\nPIPELINING\nDSN\nENHANCEDSTATUSCODES\n8bitmime\nBINARYMIME\nCHUNKING\nVRFY\nTLS\nSTARTTLS\nOK')

In [54]: s.starttls()
Out[54]: (220, '2.0.0 SMTP server ready')

In [55]: s.ehlo()
Out[55]:
(250,
 'BLU0-SMTP17.phx.gbl Hello [188.134.8.114]\nTURN\nSIZE 41943040\nETRN\nPIPELINING\nDSN\nENHANCEDSTATUSCODES\n8bitmime\nBINARYMIME\nCHUNKING\nVRFY\nAUTH LOGIN PLAIN\nOK')

In [56]: s.login(login, password)
Out[56]: (235, '2.7.0 Authentication succeeded')
</snippet></ROW><ROW><id>17012813</id><snippet>In [42]: s = smtplib.SMTP('smtp.live.com', port=587)

In [43]: s.ehlo()
Out[43]:
(250,
 'BLU0-SMTP116.phx.gbl Hello [188.134.8.114]\nTURN\nSIZE 41943040\nETRN\nPIPELINING\nDSN\nENHANCEDSTATUSCODES\n8bitmime\nBINARYMIME\nCHUNKING\nVRFY\nTLS\nSTARTTLS\nOK')

In [44]: s.starttls()
Out[44]: (220, '2.0.0 SMTP server ready')

In [45]: s.ehlo()
Out[45]:
(250,
 'BLU0-SMTP116.phx.gbl Hello [188.134.8.114]\nTURN\nSIZE 41943040\nETRN\nPIPELINING\nDSN\nENHANCEDSTATUSCODES\n8bitmime\nBINARYMIME\nCHUNKING\nVRFY\nAUTH LOGIN PLAIN\nOK')

In [46]: s.login(login, password)
---------------------------------------------------------------------------
SMTPServerDisconnected                    Traceback (most recent call last)
</snippet></ROW><ROW><id>17012899</id><snippet>combinations()</snippet></ROW><ROW><id>17012899</id><snippet>import os
import re
from collections import Counter

def pairs(text):
    ans = re.findall(r'[A-Za-z]+', text)
    return (tuple(ans[i:i+2]) for i in xrange(len(ans)-1))

mypairs = tuple([ tuple(line.split()[-2:]) for line in open('results.txt')])

c = Counter()
folderpath = 'path/to/directory'
for dirpath, dnames, fnames in os.walk(folderpath):
    for f in fnames:
        if not '.txt' in f: continue
        for line in open(os.path.join(dirpath, f)):
            c += Counter(p for p in pairs(line) if p in mypairs)

for item in c.most_common():
    print item
</snippet></ROW><ROW><id>17013007</id><snippet>str(result)</snippet></ROW><ROW><id>17013007</id><snippet>result.encode('utf-8')
</snippet></ROW><ROW><id>17013007</id><snippet>str(result)</snippet></ROW><ROW><id>17013007</id><snippet>result</snippet></ROW><ROW><id>17013007</id><snippet>ordinal not in range(128)</snippet></ROW><ROW><id>17013007</id><snippet>.encode()</snippet></ROW><ROW><id>17013173</id><snippet>pip install beautifulsoup4</snippet></ROW><ROW><id>17013173</id><snippet>from bs4 import BeautifulSoup

html = """
&lt;td&gt; &lt;a href="address.com" title=title"&gt;some title&lt;/a&gt; &lt;br /&gt; aaa&lt;br /&gt; bbb&lt;br /&gt; ccc&lt;/td&gt;
"""

soup = BeautifulSoup(html)

for td in soup.find_all('td'):
    print(td.get_text())
</snippet></ROW><ROW><id>17013173</id><snippet> some title  aaa bbb ccc
</snippet></ROW><ROW><id>17013261</id><snippet>SimpleHTTPServer</snippet></ROW><ROW><id>17013408</id><snippet>mysite.com/mysite</snippet></ROW><ROW><id>17013408</id><snippet>Mark Directory As -&gt; Source Root</snippet></ROW><ROW><id>17013408</id><snippet>from polls import views</snippet></ROW><ROW><id>17013411</id><snippet>serve_forever()</snippet></ROW><ROW><id>17013411</id><snippet>import threading
if __name__ == "__main__":
    server = GameServer(1300)
    server_thread = threading.Thread(target=lambda: server.start_server())
    server_thread.start()

    time.sleep(1) # Give it time to start up; not production quality code of course

    client = GameClient(1300, "localhost")
    client.register()
</snippet></ROW><ROW><id>17013411</id><snippet>socket.recv()</snippet></ROW><ROW><id>17013459</id><snippet>datetime</snippet></ROW><ROW><id>17013459</id><snippet>.weekday()</snippet></ROW><ROW><id>17013459</id><snippet>dateList = [(d, d.weekday()) for d in dateList]
</snippet></ROW><ROW><id>17013459</id><snippet>[(datetime.datetime(2013, 2, 16, 0, 0), 5), (datetime.datetime(2013, 2, 17, 0, 0), 6), (datetime.datetime(2013, 2, 18, 0, 0), 0), (datetime.datetime(2013, 2, 19, 0, 0), 1), (datetime.datetime(2013, 2, 20, 0, 0), 2), (datetime.datetime(2013, 2, 21, 0, 0), 3), (datetime.datetime(2013, 2, 22, 0, 0), 4), (datetime.datetime(2013, 2, 23, 0, 0), 5), (datetime.datetime(2013, 2, 24, 0, 0), 6), (datetime.datetime(2013, 2, 25, 0, 0), 0), (datetime.datetime(2013, 2, 26, 0, 0), 1), (datetime.datetime(2013, 2, 27, 0, 0), 2), (datetime.datetime(2013, 2, 28, 0, 0), 3), (datetime.datetime(2013, 3, 1, 0, 0), 4), (datetime.datetime(2013, 3, 2, 0, 0), 5), (datetime.datetime(2013, 3, 3, 0, 0), 6), (datetime.datetime(2013, 3, 4, 0, 0), 0), (datetime.datetime(2013, 3, 5, 0, 0), 1), (datetime.datetime(2013, 3, 6, 0, 0), 2), (datetime.datetime(2013, 3, 7, 0, 0), 3), (datetime.datetime(2013, 3, 8, 0, 0), 4), (datetime.datetime(2013, 3, 9, 0, 0), 5), (datetime.datetime(2013, 3, 10, 0, 0), 6), (datetime.datetime(2013, 3, 11, 0, 0), 0), (datetime.datetime(2013, 3, 12, 0, 0), 1), (datetime.datetime(2013, 3, 13, 0, 0), 2), (datetime.datetime(2013, 3, 14, 0, 0), 3), (datetime.datetime(2013, 3, 15, 0, 0), 4), (datetime.datetime(2013, 3, 16, 0, 0), 5), (datetime.datetime(2013, 3, 17, 0, 0), 6), (datetime.datetime(2013, 3, 18, 0, 0), 0), (datetime.datetime(2013, 3, 19, 0, 0), 1), (datetime.datetime(2013, 3, 20, 0, 0), 2), (datetime.datetime(2013, 3, 21, 0, 0), 3), (datetime.datetime(2013, 3, 22, 0, 0), 4), (datetime.datetime(2013, 3, 23, 0, 0), 5), (datetime.datetime(2013, 3, 24, 0, 0), 6), (datetime.datetime(2013, 3, 25, 0, 0), 0), (datetime.datetime(2013, 3, 26, 0, 0), 1), (datetime.datetime(2013, 3, 27, 0, 0), 2), (datetime.datetime(2013, 3, 28, 0, 0), 3), (datetime.datetime(2013, 3, 29, 0, 0), 4), (datetime.datetime(2013, 3, 30, 0, 0), 5), (datetime.datetime(2013, 3, 31, 0, 0), 6), (datetime.datetime(2013, 4, 1, 0, 0), 0), (datetime.datetime(2013, 4, 2, 0, 0), 1), (datetime.datetime(2013, 4, 3, 0, 0), 2), (datetime.datetime(2013, 4, 4, 0, 0), 3), (datetime.datetime(2013, 4, 5, 0, 0), 4), (datetime.datetime(2013, 4, 6, 0, 0), 5), (datetime.datetime(2013, 4, 7, 0, 0), 6), (datetime.datetime(2013, 4, 8, 0, 0), 0), (datetime.datetime(2013, 4, 9, 0, 0), 1), (datetime.datetime(2013, 4, 10, 0, 0), 2), (datetime.datetime(2013, 4, 11, 0, 0), 3), (datetime.datetime(2013, 4, 12, 0, 0), 4), (datetime.datetime(2013, 4, 13, 0, 0), 5), (datetime.datetime(2013, 4, 14, 0, 0), 6), (datetime.datetime(2013, 4, 15, 0, 0), 0), (datetime.datetime(2013, 4, 16, 0, 0), 1), (datetime.datetime(2013, 4, 17, 0, 0), 2), (datetime.datetime(2013, 4, 18, 0, 0), 3), (datetime.datetime(2013, 4, 19, 0, 0), 4), (datetime.datetime(2013, 4, 20, 0, 0), 5), (datetime.datetime(2013, 4, 21, 0, 0), 6), (datetime.datetime(2013, 4, 22, 0, 0), 0), (datetime.datetime(2013, 4, 23, 0, 0), 1), (datetime.datetime(2013, 4, 24, 0, 0), 2), (datetime.datetime(2013, 4, 25, 0, 0), 3), (datetime.datetime(2013, 4, 26, 0, 0), 4), (datetime.datetime(2013, 4, 27, 0, 0), 5), (datetime.datetime(2013, 4, 28, 0, 0), 6), (datetime.datetime(2013, 4, 29, 0, 0), 0), (datetime.datetime(2013, 4, 30, 0, 0), 1), (datetime.datetime(2013, 5, 1, 0, 0), 2), (datetime.datetime(2013, 5, 2, 0, 0), 3), (datetime.datetime(2013, 5, 3, 0, 0), 4), (datetime.datetime(2013, 5, 4, 0, 0), 5), (datetime.datetime(2013, 5, 5, 0, 0), 6), (datetime.datetime(2013, 5, 6, 0, 0), 0), (datetime.datetime(2013, 5, 7, 0, 0), 1), (datetime.datetime(2013, 5, 8, 0, 0), 2), (datetime.datetime(2013, 5, 9, 0, 0), 3), (datetime.datetime(2013, 5, 10, 0, 0), 4), (datetime.datetime(2013, 5, 11, 0, 0), 5), (datetime.datetime(2013, 5, 12, 0, 0), 6), (datetime.datetime(2013, 5, 13, 0, 0), 0), (datetime.datetime(2013, 5, 14, 0, 0), 1), (datetime.datetime(2013, 5, 15, 0, 0), 2), (datetime.datetime(2013, 5, 16, 0, 0), 3), (datetime.datetime(2013, 5, 17, 0, 0), 4), (datetime.datetime(2013, 5, 18, 0, 0), 5), (datetime.datetime(2013, 5, 19, 0, 0), 6), (datetime.datetime(2013, 5, 20, 0, 0), 0), (datetime.datetime(2013, 5, 21, 0, 0), 1), (datetime.datetime(2013, 5, 22, 0, 0), 2), (datetime.datetime(2013, 5, 23, 0, 0), 3), (datetime.datetime(2013, 5, 24, 0, 0), 4), (datetime.datetime(2013, 5, 25, 0, 0), 5), (datetime.datetime(2013, 5, 26, 0, 0), 6), (datetime.datetime(2013, 5, 27, 0, 0), 0), (datetime.datetime(2013, 5, 28, 0, 0), 1), (datetime.datetime(2013, 5, 29, 0, 0), 2), (datetime.datetime(2013, 5, 30, 0, 0), 3), (datetime.datetime(2013, 5, 31, 0, 0), 4), (datetime.datetime(2013, 6, 1, 0, 0), 5), (datetime.datetime(2013, 6, 2, 0, 0), 6), (datetime.datetime(2013, 6, 3, 0, 0), 0), (datetime.datetime(2013, 6, 4, 0, 0), 1), (datetime.datetime(2013, 6, 5, 0, 0), 2), (datetime.datetime(2013, 6, 6, 0, 0), 3), (datetime.datetime(2013, 6, 7, 0, 0), 4), (datetime.datetime(2013, 6, 8, 0, 0), 5), (datetime.datetime(2013, 6, 9, 0, 0), 6), (datetime.datetime(2013, 6, 10, 0, 0), 0), (datetime.datetime(2013, 6, 11, 0, 0), 1), (datetime.datetime(2013, 6, 12, 0, 0), 2), (datetime.datetime(2013, 6, 13, 0, 0), 3), (datetime.datetime(2013, 6, 14, 0, 0), 4), (datetime.datetime(2013, 6, 15, 0, 0), 5), (datetime.datetime(2013, 6, 16, 0, 0), 6), (datetime.datetime(2013, 6, 17, 0, 0), 0), (datetime.datetime(2013, 6, 18, 0, 0), 1), (datetime.datetime(2013, 6, 19, 0, 0), 2), (datetime.datetime(2013, 6, 20, 0, 0), 3), (datetime.datetime(2013, 6, 21, 0, 0), 4), (datetime.datetime(2013, 6, 22, 0, 0), 5), (datetime.datetime(2013, 6, 23, 0, 0), 6), (datetime.datetime(2013, 6, 24, 0, 0), 0), (datetime.datetime(2013, 6, 25, 0, 0), 1), (datetime.datetime(2013, 6, 26, 0, 0), 2), (datetime.datetime(2013, 6, 27, 0, 0), 3), (datetime.datetime(2013, 6, 28, 0, 0), 4), (datetime.datetime(2013, 6, 29, 0, 0), 5), (datetime.datetime(2013, 6, 30, 0, 0), 6), (datetime.datetime(2013, 7, 1, 0, 0), 0), (datetime.datetime(2013, 7, 2, 0, 0), 1), (datetime.datetime(2013, 7, 3, 0, 0), 2), (datetime.datetime(2013, 7, 4, 0, 0), 3), (datetime.datetime(2013, 7, 5, 0, 0), 4), (datetime.datetime(2013, 7, 6, 0, 0), 5), (datetime.datetime(2013, 7, 7, 0, 0), 6), (datetime.datetime(2013, 7, 8, 0, 0), 0), (datetime.datetime(2013, 7, 9, 0, 0), 1), (datetime.datetime(2013, 7, 10, 0, 0), 2), (datetime.datetime(2013, 7, 11, 0, 0), 3), (datetime.datetime(2013, 7, 12, 0, 0), 4), (datetime.datetime(2013, 7, 13, 0, 0), 5), (datetime.datetime(2013, 7, 14, 0, 0), 6), (datetime.datetime(2013, 7, 15, 0, 0), 0), (datetime.datetime(2013, 7, 16, 0, 0), 1), (datetime.datetime(2013, 7, 17, 0, 0), 2), (datetime.datetime(2013, 7, 18, 0, 0), 3), (datetime.datetime(2013, 7, 19, 0, 0), 4), (datetime.datetime(2013, 7, 20, 0, 0), 5), (datetime.datetime(2013, 7, 21, 0, 0), 6), (datetime.datetime(2013, 7, 22, 0, 0), 0), (datetime.datetime(2013, 7, 23, 0, 0), 1), (datetime.datetime(2013, 7, 24, 0, 0), 2), (datetime.datetime(2013, 7, 25, 0, 0), 3), (datetime.datetime(2013, 7, 26, 0, 0), 4), (datetime.datetime(2013, 7, 27, 0, 0), 5), (datetime.datetime(2013, 7, 28, 0, 0), 6), (datetime.datetime(2013, 7, 29, 0, 0), 0), (datetime.datetime(2013, 7, 30, 0, 0), 1), (datetime.datetime(2013, 7, 31, 0, 0), 2), (datetime.datetime(2013, 8, 1, 0, 0), 3), (datetime.datetime(2013, 8, 2, 0, 0), 4), (datetime.datetime(2013, 8, 3, 0, 0), 5), (datetime.datetime(2013, 8, 4, 0, 0), 6), (datetime.datetime(2013, 8, 5, 0, 0), 0), (datetime.datetime(2013, 8, 6, 0, 0), 1), (datetime.datetime(2013, 8, 7, 0, 0), 2), (datetime.datetime(2013, 8, 8, 0, 0), 3), (datetime.datetime(2013, 8, 9, 0, 0), 4), (datetime.datetime(2013, 8, 10, 0, 0), 5)]
</snippet></ROW><ROW><id>17013459</id><snippet>dateList = [(d, d.weekday()) for x in range(0,delta) for d in [base + timedelta(days=x)]]
</snippet></ROW><ROW><id>17013477</id><snippet>words = ['word', 'wor', 'words', 'wormhole', 'hole']
keepers = []

words.sort_by(&amp;:length).reverse.each do |word|
  keepers.push(word) if ! keepers.any?{|keeper| keeper.include?(word)}
end

keepers
# =&gt; ["wormhole", "words"]
</snippet></ROW><ROW><id>17013477</id><snippet>words &amp; keepers
# =&gt; ["words", "wormhole"]
</snippet></ROW><ROW><id>17013989</id><snippet>reordered_corpus = open('reordered_corpus.txt', 'w')
with open('corpus.txt', 'r') as corpus:
    for phrase in corpus:
        phrase = phrase.split()                 # split on whitespace
        vb_index = rp_index = -1                # variables for the indices
        for i, word_pos in enumerate(phrase):
            pos = word_pos.split('_')[1]        # POS at index 1 splitting on _
            if pos == 'VB' or pos == 'VBZ':     # can add more verb POS tags
                vb_index = i
            elif vb_index &gt;= 0 and pos == 'RP': # or more particle POS tags
                rp_index = i
                break                           # found both so can stop
        if vb_index &gt;= 0 and rp_index &gt;= 0:     # do any rearranging
            phrase = phrase[:vb_index+1] + [phrase[rp_index]] + \
                     phrase[vb_index+1:rp_index] + phrase[rp_index+1:]
        reordered_corpus.write(' '.join(word_pos for word_pos in phrase)+'\n')
reordered_corpus.close()
</snippet></ROW><ROW><id>17013989</id><snippet>corpus.txt</snippet></ROW><ROW><id>17013989</id><snippet>you_PRP mean_VBP we_PRP should_MD kick_VB them_PRP out_RP ._.
don_VB 't_NNP take_VB it_PRP off_RP until_IN I_PRP say_VBP so_RB ._.
please_VB help_VB the_DT man_NN out_RP ._.
shut_VBZ it_PRP down_RP !_.
</snippet></ROW><ROW><id>17013989</id><snippet>reordered_corpus.txt</snippet></ROW><ROW><id>17013989</id><snippet>you_PRP mean_VBP we_PRP should_MD kick_VB out_RP them_PRP ._.
don_VB 't_NNP take_VB off_RP it_PRP until_IN I_PRP say_VBP so_RB ._.
please_VB help_VB out_RP the_DT man_NN ._.
shut_VBZ down_RP it_PRP !_.
</snippet></ROW><ROW><id>17014203</id><snippet>x</snippet></ROW><ROW><id>17014203</id><snippet>def F_C(x):
    x = raw_input("Please Enter A Value")
    x = int(x)
    x = x - 32
    x = x * 0.55
    return x
</snippet></ROW><ROW><id>17014203</id><snippet>def F_C():
    x = raw_input("Please Enter A Value")
    return (int(x) - 32)*0.55
</snippet></ROW><ROW><id>17014415</id><snippet>u'text'</snippet></ROW><ROW><id>17014415</id><snippet>"text"</snippet></ROW><ROW><id>17014415</id><snippet>b"bytes"</snippet></ROW><ROW><id>17014415</id><snippet>def ensure_str(s):
    if isinstance(s, unicode):
        s = s.encode('utf-8')
    return s

s = ensure_str(raw_input("prompt &gt;"))
</snippet></ROW><ROW><id>17014493</id><snippet>isinstance(numpy.ndarray)</snippet></ROW><ROW><id>17014493</id><snippet>isinstance</snippet></ROW><ROW><id>17014493</id><snippet>r = client[-1].apply(calculemus, np.array(review, dtype=str)).get()
</snippet></ROW><ROW><id>17014493</id><snippet>r = client[-1].apply_sync(calculemus, np.array(review, dtype=str))
</snippet></ROW><ROW><id>17014505</id><snippet>Column</snippet></ROW><ROW><id>17014505</id><snippet>class Desc(object):
    def __get__(self, obj, type=None):
        print '__get__'
    def __set__(self, obj, value):
        print '__set__'

class A(object):
    desc = Desc()

a = A()
a.desc                  # prints '__get__'
a.desc = 2              # prints '__set__'
</snippet></ROW><ROW><id>17014505</id><snippet>a</snippet></ROW><ROW><id>17014505</id><snippet>'desc'</snippet></ROW><ROW><id>17014505</id><snippet>a.__dict__['desc'] = 0  # Does not print anything !
</snippet></ROW><ROW><id>17014505</id><snippet>'desc'</snippet></ROW><ROW><id>17014505</id><snippet>Desc.__set__</snippet></ROW><ROW><id>17014505</id><snippet>setattr</snippet></ROW><ROW><id>17014505</id><snippet>a.desc</snippet></ROW><ROW><id>17014505</id><snippet>setattr(a, 'desc', 1)   # Prints '__set__'
</snippet></ROW><ROW><id>17014523</id><snippet>configuration.py</snippet></ROW><ROW><id>17014523</id><snippet>MainApp</snippet></ROW><ROW><id>17014523</id><snippet>import os.path

package_dir = os.path.abspath(os.path.dirname(__file__))
database_path = os.path.join(package_dir, 'database.db')
</snippet></ROW><ROW><id>17014523</id><snippet>from MainApp import configuration</snippet></ROW><ROW><id>17014523</id><snippet>configuration.database_path</snippet></ROW><ROW><id>17014555</id><snippet>def callback(event):
    text = inputfield.get()
    if 'weather:' in text:
        weather()
    if 'open:' in text:
        program()

# ...
inputfield.bind('&lt;Return&gt;', callback)
</snippet></ROW><ROW><id>17014555</id><snippet>&lt;Return&gt;</snippet></ROW><ROW><id>17014555</id><snippet>"+"</snippet></ROW><ROW><id>17014585</id><snippet>confirm delivery</snippet></ROW><ROW><id>17014585</id><snippet>delivery_mode</snippet></ROW><ROW><id>17014585</id><snippet>durable</snippet></ROW><ROW><id>17014585</id><snippet>channel.queue_bind(exchange='amq.direct',
                   queue='hello')
</snippet></ROW><ROW><id>17014585</id><snippet>delay_channel.queue_declare(queue='hello_delay', durable=True,  arguments={
  'x-message-ttl' : 5000,
  'x-dead-letter-exchange' : 'amq.direct',
  'x-dead-letter-routing-key' : 'hello'
})
</snippet></ROW><ROW><id>17014585</id><snippet>delay_channel.basic_publish(exchange='',
                      routing_key='hello_delay',
                      body="test",
                      properties=pika.BasicProperties(delivery_mode=2))
</snippet></ROW><ROW><id>17014585</id><snippet>import pika

connection = pika.BlockingConnection(pika.ConnectionParameters(
               'localhost'))

# Create normal 'Hello World' type channel.
channel = connection.channel()
channel.confirm_delivery()
channel.queue_declare(queue='hello', durable=True)

# We need to bind this channel to an exchange, that will be used to transfer 
# messages from our delay queue.
channel.queue_bind(exchange='amq.direct',
                   queue='hello')

# Create our delay channel.
delay_channel = connection.channel()
delay_channel.confirm_delivery()

# This is where we declare the delay, and routing for our delay channel.
delay_channel.queue_declare(queue='hello_delay', durable=True,  arguments={
  'x-message-ttl' : 5000, # Delay until the message is transferred in milliseconds.
  'x-dead-letter-exchange' : 'amq.direct', # Exchange used to transfer the message from A to B.
  'x-dead-letter-routing-key' : 'hello' # Name of the queue we want the message transferred to.
})

delay_channel.basic_publish(exchange='',
                      routing_key='hello_delay',
                      body="test",
                      properties=pika.BasicProperties(delivery_mode=2))

print " [x] Sent"
</snippet></ROW><ROW><id>17014604</id><snippet>blank=True, null=True</snippet></ROW><ROW><id>17014690</id><snippet>nltk.help.brown_tagset()</snippet></ROW><ROW><id>17014690</id><snippet>.</snippet></ROW><ROW><id>17014690</id><snippet>.</snippet></ROW><ROW><id>17014690</id><snippet>?</snippet></ROW><ROW><id>17014690</id><snippet>!</snippet></ROW><ROW><id>17014690</id><snippet>*</snippet></ROW><ROW><id>17014690</id><snippet>not</snippet></ROW><ROW><id>17014690</id><snippet>n't</snippet></ROW><ROW><id>17014690</id><snippet>VB+PRO</snippet></ROW><ROW><id>17014921</id><snippet>TEMPLATE_DIRS</snippet></ROW><ROW><id>17014921</id><snippet>settings.py</snippet></ROW><ROW><id>17014921</id><snippet>TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    'full/path/to/your/templates/dir',
    )
</snippet></ROW><ROW><id>17014921</id><snippet>import os
settings_dir = os.path.dirname(__file__)
PROJECT_ROOT = os.path.abspath(os.path.dirname(settings_dir))

...

TEMPLATE_DIRS = (
    # Put strings here, like "/home/html/django_templates" or "C:/www/django/templates".
    # Always use forward slashes, even on Windows.
    # Don't forget to use absolute paths, not relative paths.
    os.path.join(PROJECT_ROOT, 'templates/'),
)
</snippet></ROW><ROW><id>17014937</id><snippet>False</snippet></ROW><ROW><id>17014937</id><snippet>True</snippet></ROW><ROW><id>17014937</id><snippet>#!/usr/bin/python

from datetime import date

def is_consecutive(datelist):
    for idx, my_date in enumerate(datelist[:-1]):
        if ((datelist[idx + 1].month - my_date.month == 1 and
             datelist[idx + 1].year == my_date.year) or
            (datelist[idx + 1].month == 1 and
             my_date.month == 12 and
             datelist[idx + 1].year - my_date.year == 1)):
            continue
        else:
            return False
    return True

print is_consecutive([date(2010, 10, 3),
                      date(2010, 11, 8),
                      date(2010, 12, 1),
                      date(2011, 1, 11)])

print is_consecutive([date(2010, 7, 6),
                      date(2010, 8, 24),
                      date(2010, 3, 5),
                      date(2010, 10, 25)])
</snippet></ROW><ROW><id>17014937</id><snippet>def is_consecutive(datelist):
    for idx, my_date in enumerate(datelist[:-1]):
        month_diff = datelist[idx + 1].month - my_date.month
        year_diff = datelist[idx + 1].year - my_date.year
        if ((month_diff == 1 and year_diff == 0) or
            (month_diff == -11 and year_diff == 1)):
            continue
        else:
            return False
    return True
</snippet></ROW><ROW><id>17014971</id><snippet>while</snippet></ROW><ROW><id>17014971</id><snippet>if</snippet></ROW><ROW><id>17015020</id><snippet>array</snippet></ROW><ROW><id>17015020</id><snippet>from cpython cimport array
</snippet></ROW><ROW><id>17015020</id><snippet>cdef array.array anorms2_arr = array.array('d', anorms2)
</snippet></ROW><ROW><id>17015020</id><snippet>return contr_hrr(.., anorms2_arr.data.as_doubles)
</snippet></ROW><ROW><id>17015020</id><snippet>array</snippet></ROW><ROW><id>17015020</id><snippet>arr.data.as_xxx</snippet></ROW><ROW><id>17015303</id><snippet>def __getattribute__(self, item):
    try:
        return object.__getattribute__(item)
    except AttributeError:
        pass  # fallback to dict
    try:
        return self.dict[item]
    except KeyError:
        raise AttributeError("The object doesn't have such attribute") from None
</snippet></ROW><ROW><id>17015303</id><snippet>has_key()</snippet></ROW><ROW><id>17015303</id><snippet>item in self.dict</snippet></ROW><ROW><id>17015376</id><snippet>exec</snippet></ROW><ROW><id>17015376</id><snippet>import os
file_list = range(1, 20)

f = {}
for x in file_list:
    f[x] = open(os.path.join(file_path, '{0}.txt'.format(x)), 'w')
</snippet></ROW><ROW><id>17015398</id><snippet>collections.Counter</snippet></ROW><ROW><id>17015398</id><snippet>itertools.chain.from_iterable</snippet></ROW><ROW><id>17015398</id><snippet>from itertools import chain
from collections import Counter

data = [['a', 'b', 'c'], ['a'], ['a', 'b']]

d = Counter(chain.from_iterable(data))
print([i for i, c in d.most_common()])
</snippet></ROW><ROW><id>17015398</id><snippet>['a', 'b', 'c']
</snippet></ROW><ROW><id>17015398</id><snippet>Counter</snippet></ROW><ROW><id>17015469</id><snippet> re.sub(r'[^=]+$', 'myreplacedstuff', ss)
</snippet></ROW><ROW><id>17015469</id><snippet>=</snippet></ROW><ROW><id>17015469</id><snippet>$</snippet></ROW><ROW><id>17015469</id><snippet>[^=]</snippet></ROW><ROW><id>17015469</id><snippet>=</snippet></ROW><ROW><id>17015469</id><snippet>[^=]+</snippet></ROW><ROW><id>17015469</id><snippet>$</snippet></ROW><ROW><id>17015469</id><snippet>=</snippet></ROW><ROW><id>17015706</id><snippet>function addImgMarkup(imgUrl){
    $('#idOfMarkupTextFormField').val($('#idOfMarkupTextFormField').val()
+ 'imageSyntax' + imgUrl); }
</snippet></ROW><ROW><id>17015706</id><snippet>{% for uplImg in UserPage.uploaded_image__set.all %}
&lt;a href="#" onclick="addImgMarkup({{uplImg.url}})"&gt;
    &lt;img src="{{uplImg.thumbUrl}}" alt="{{uplImg.name}}"&gt;&lt;/img&gt;
&lt;/a&gt;
{% endfor %}
</snippet></ROW><ROW><id>17015886</id><snippet>yield</snippet></ROW><ROW><id>17015886</id><snippet>parse</snippet></ROW><ROW><id>17015886</id><snippet>def parse(self, response):
    b_pages_links = getlinks(A)
    for link in b_pages_links:
        yield Request(link, callback = self.visit_b_page)

def visit_b_page(self, response):
    url_of_c_page = ...
    yield Request(url_of_c_page, callback = self.visit_c_page)

def visit_c_page(self, response):
    url_of_image = ...
    yield Request(url_of_image, callback = self.get_image)

def get_image(self, response):
    item = CustomItem()
    item['name'] = ... # get image name
    item['image'] = ... # get image data
    yield item
</snippet></ROW><ROW><id>17016050</id><snippet>class Data(db.Model):
  property = db.StringProperty()

data = Data(property = 'value')
data.put()

query = db.GqlQuery("SELECT * FROM Data")

myvar = 'property'

for line in query:
  getattr(line, myvar)
</snippet></ROW><ROW><id>17016113</id><snippet>while True:
    say = raw_input('say: ')
    if say == 'hello':
        print "hi!"
        break
    elif say == 'bye':
        print "bye!"
        break
</snippet></ROW><ROW><id>17016113</id><snippet>while True</snippet></ROW><ROW><id>17016113</id><snippet>break</snippet></ROW><ROW><id>17016113</id><snippet>say = ''
while say not in ['hello', 'bye']:
    say = raw_input('say: ')

if say == 'hello':
    print "hi"
elif say == 'bye':
    print 'goodbye!'
</snippet></ROW><ROW><id>17016122</id><snippet>test.py</snippet></ROW><ROW><id>17016122</id><snippet>class Character():
    """
    This is the main parents class for creation of
    characters, be they player, NPC or monsters they
    shall all share common traits
    """

    def __init__(self, name, health, defense):
        """Constructor for Character"""
        self.name = name
        self.health = health
        self.defense = defense


class Player(Character):
    """
    The player class is where heros are made
    They inherit common traits from the Character class
    """

    def __init__(self, name, health, defense, str, int):
        Character.__init__(self, name, health, defense)
        self.str = str
        self.int = int


hero = Player("Billy", 200, 10, 10, 2)
print hero.name
</snippet></ROW><ROW><id>17016122</id><snippet>python test.py
</snippet></ROW><ROW><id>17016122</id><snippet>Billy
</snippet></ROW><ROW><id>17016122</id><snippet>from character import *</snippet></ROW><ROW><id>17016122</id><snippet>Player</snippet></ROW><ROW><id>17016138</id><snippet>HashMap&lt;String, int&gt; wordCount;

int createProbabilityHash(words):
    int numWords = words.size();
    wordCount = new HashMap&lt;String, int&gt;();
    for (int i = 0;i &lt; numWords; ++i) {
        if wordCount.containsKey(words[i]) {
            wordCount.put(words[i], wordCount.get(words[i]) + 1);
        } else {
            wordCount.put(words[i], 1);
        }
    }
</snippet></ROW><ROW><id>17016290</id><snippet>#!/usr/bin/python

input_list = []

while True:
    input_str = raw_input("&gt;")
    if input_str == "." and input_list[-1] == "":
        break
    else:
        input_list.append(input_str)

for line in input_list:
    print line
</snippet></ROW><ROW><id>17016383</id><snippet>_ReverseReferenceProperty</snippet></ROW><ROW><id>17016383</id><snippet>db.ReferenceProperty</snippet></ROW><ROW><id>17016383</id><snippet>db.ReferenceProperty</snippet></ROW><ROW><id>17016383</id><snippet>collection_name</snippet></ROW><ROW><id>17016383</id><snippet>class Email(db.Model):
  user = db.ReferenceProperty(User, collection_name=email)
</snippet></ROW><ROW><id>17016383</id><snippet>db.ReferenceProperty(User, collection_name=...)</snippet></ROW><ROW><id>17016383</id><snippet>avatar = img)</snippet></ROW><ROW><id>17016429</id><snippet>from collections import OrderedDict
products = ['Apple', 'Apple', 'Apple', 'Orange', 'Banana', 'Banana', 'Peach', 'Pineapple', 'Pineapple']
prices = ['1.00', '2.00', '1.50', '3.00', '0.50', '1.50', '2.00', '1.00', '1.00']

min_prices = OrderedDict()
for prod, price in zip(products, prices):
    min_prices[prod] = min(float(price), min_prices.get(prod, float('inf')))

&gt;&gt;&gt; print min_prices.keys(), min_prices.values()
['Apple', 'Orange', 'Banana', 'Peach', 'Pineapple'] [1.0, 3.0, 0.5, 2.0, 1.0]
</snippet></ROW><ROW><id>17017035</id><snippet>enumerate()</snippet></ROW><ROW><id>17017035</id><snippet>for indx, ele in enumerate(a):
    if ele == 2:
        a[indx] = 10
print a
</snippet></ROW><ROW><id>17017035</id><snippet>[1, 10, 3, 10, 4, 10, 5]
</snippet></ROW><ROW><id>17017035</id><snippet>change = map(int, raw_input("What number do you want to change in the list? And what number should it be? Separate both numbers with a space ").split())
for indx, _ in enumerate(a):
    if change[0] == 2:
        a[indx] = change[1]
</snippet></ROW><ROW><id>17017035</id><snippet>change = map(int, raw_input("What number do you want to change in the list? And what number should it be? Separate both numbers with a space ").split())
[change[1] if x == change[0] else x for x in a]
</snippet></ROW><ROW><id>17017111</id><snippet>List1 = []
for a in range(2):
    b = raw_input("cmd :")
    List1.append(b)
    a += 1
print List1
</snippet></ROW><ROW><id>17017637</id><snippet>Result = [abs(Nums[0] - item) for item in Nums[1:]]
</snippet></ROW><ROW><id>17018144</id><snippet>class FooParser extends Parser;
</snippet></ROW><ROW><id>17018144</id><snippet>grammar FooParser;
</snippet></ROW><ROW><id>17018300</id><snippet>QDockWidget::show</snippet></ROW><ROW><id>17018300</id><snippet>QMainWindow::addDockWidget</snippet></ROW><ROW><id>17018300</id><snippet>def load_ui(ui_file, parent=None):
    loader = QUiLoader()
    file = QFile(ui_file)
    file.open(QFile.ReadOnly)
    myWidget = loader.load(file, None)
    file.close()
    return myWidget

main_window = load_ui("ui/main_window.ui")
dock_widget = load_ui("ui/console.ui", main_window)
main_window.show()
main_window.addDockWidget(Qt.LeftDockWidgetArea, dock_widget)
</snippet></ROW><ROW><id>17018607</id><snippet>0..1</snippet></ROW><ROW><id>17018607</id><snippet>100</snippet></ROW><ROW><id>17018607</id><snippet>100</snippet></ROW><ROW><id>17018607</id><snippet>0</snippet></ROW><ROW><id>17018607</id><snippet>1</snippet></ROW><ROW><id>17018652</id><snippet>h = httplib2.Http(proxy_info = httplib2.ProxyInfo PROXY DATA .....)
flow.step2_exchange(code, h)
</snippet></ROW><ROW><id>17018759</id><snippet>HashingVectorizer</snippet></ROW><ROW><id>17018759</id><snippet>partial_fit</snippet></ROW><ROW><id>17018759</id><snippet>SGDClassifier</snippet></ROW><ROW><id>17018759</id><snippet>PassiveAggressiveClassifier</snippet></ROW><ROW><id>17018759</id><snippet>coef_</snippet></ROW><ROW><id>17018759</id><snippet>intercept_</snippet></ROW><ROW><id>17018838</id><snippet>SECURE_SSL_REDIRECT = True
</snippet></ROW><ROW><id>17018970</id><snippet>Pickle</snippet></ROW><ROW><id>17018970</id><snippet>child_count=pickle.load( open("child_count.p", "rb"))
child_count-=counter
pickle.dump( child_count, open("child_count.p", "wb"))
</snippet></ROW><ROW><id>17018970</id><snippet>def reap():
    #Collect child processes
    while 1:
        try:
            result = os.waitpid(-1, os.WNOHANG)
            if not result[0]: break
        except:
            break
        print "Reaped child process %d" % result[0]

host = ''
port = 4200

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
s.bind((host, port))
s.listen(1)

print "Parent at %d listening for connections" % os.getpid()
while 1:



    try:
        clientsock, clientaddr = s.accept();clientsock.settimeout(90)
        print "Accepting connection"
    except KeyboardInterrupt:
        raise
    except:
        traceback.print_exc()
        continue

    reap()

    #Clone/fork
    try:
        pid = os.fork()
    except:
        print "SOMETHING BAD HAPPENED.. fork failed!"
        clientsock.close()
        continue

    if pid:
        clientsock.close()
        #Cleanup old children
        continue
    else:
        print "New child", os.getpid()
        s.close()

        #try:
        print "Got connection frommm: ", clientsock.getpeername()
        data = clientsock.recv(1024)

        &lt;ENTER your code for the process here&gt;
</snippet></ROW><ROW><id>17018982</id><snippet>str</snippet></ROW><ROW><id>17018982</id><snippet>bytes</snippet></ROW><ROW><id>17018982</id><snippet>bytearray</snippet></ROW><ROW><id>17018994</id><snippet>columns</snippet></ROW><ROW><id>17018994</id><snippet>&gt;&gt;&gt; import pandas
&gt;&gt;&gt; # create three rows of [0, 1, 2]
&gt;&gt;&gt; df = pandas.DataFrame([range(3), range(3), range(3)])
&gt;&gt;&gt; print df
   0  1  2
0  0  1  2
1  0  1  2
2  0  1  2
&gt;&gt;&gt; my_columns = ["a", "b", "c"]
&gt;&gt;&gt; df.columns = my_columns
&gt;&gt;&gt; print df
   a  b  c
0  0  1  2
1  0  1  2
2  0  1  2
</snippet></ROW><ROW><id>17018994</id><snippet>&gt;&gt;&gt; df.index = ["row1", "row2", "row3"]
&gt;&gt;&gt; print df
      a  b  c
row1  0  1  2
row2  0  1  2
row3  0  1  2
</snippet></ROW><ROW><id>17019484</id><snippet>def importedFunction():
    print "importedFunction"

    from main import mainFunction
    mainFunction()
</snippet></ROW><ROW><id>17019484</id><snippet>main</snippet></ROW><ROW><id>17019491</id><snippet>import sklearn</snippet></ROW><ROW><id>17019491</id><snippet>&gt;&gt;&gt; import sys; print(sys.__path__)
</snippet></ROW><ROW><id>17019491</id><snippet>&gt;&gt;&gt; import sklearn; print(sklearn.__version__); print(sklearn.__path__)
</snippet></ROW><ROW><id>17019491</id><snippet>&gt;&gt;&gt; import numpy; print(numpy.__version__); print(numpy.__path__)
</snippet></ROW><ROW><id>17019728</id><snippet>./script.py MyObject
</snippet></ROW><ROW><id>17019728</id><snippet>MyObject</snippet></ROW><ROW><id>17019728</id><snippet>import sys

class A(object):
    def __init__(self):
        print "A created"

class B(object):
    def __init__(self):
        print "B created"

cls = globals()[sys.argv[1]] # Get the class name from globals

instance = cls()
</snippet></ROW><ROW><id>17019728</id><snippet>classes = {
    'A': A,
    'B': B,
}

cls = classes[sys.argv[1]]

instance = cls()
</snippet></ROW><ROW><id>17019770</id><snippet>self.ui.listWidget.currentItemChanged.connect(self.showDetails)
</snippet></ROW><ROW><id>17019983</id><snippet>inspect</snippet></ROW><ROW><id>17019983</id><snippet>getmembers(X, predicate=lambda x: isfunction(x) or ismethod(x))
</snippet></ROW><ROW><id>17020025</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; from string import ascii_uppercase
&gt;&gt;&gt; triplets = map(''.join, product(ascii_uppercase, repeat=3))
&gt;&gt;&gt; triplets[4]
'AAE'
</snippet></ROW><ROW><id>17020163</id><snippet>__setattr__</snippet></ROW><ROW><id>17020163</id><snippet>class MyTest(object):

    def __init__(self, x):
        self.x = x

    def __setattr__(self, name, value):
        if name=="device":
            print "device test"
        else:
            super(MyTest, self).__setattr__(name, value)
</snippet></ROW><ROW><id>17020163</id><snippet>xml-rpc</snippet></ROW><ROW><id>17020163</id><snippet>_dispatch</snippet></ROW><ROW><id>17020163</id><snippet>class My(object):
    def __init__(self):
        self.device = self
</snippet></ROW><ROW><id>17020246</id><snippet>from AddSubject.AddForm import AddSubjectForm
</snippet></ROW><ROW><id>17020246</id><snippet>from AddFrom import AddSubjectForm
</snippet></ROW><ROW><id>17020246</id><snippet>from</snippet></ROW><ROW><id>17020246</id><snippet>AddSubject</snippet></ROW><ROW><id>17020246</id><snippet>AddSubject</snippet></ROW><ROW><id>17020287</id><snippet>for value in result['response']['docs']:
    Collection(**value).save()
</snippet></ROW><ROW><id>17020287</id><snippet>**kwargs</snippet></ROW><ROW><id>17020312</id><snippet>eventlet.tpool.execute</snippet></ROW><ROW><id>17020315</id><snippet>getdata</snippet></ROW><ROW><id>17020315</id><snippet>from pyfits import getdata
data = getdata(file_name)
</snippet></ROW><ROW><id>17020935</id><snippet>color_data.get(chosen)[1]</snippet></ROW><ROW><id>17020935</id><snippet>country_color</snippet></ROW><ROW><id>17020935</id><snippet>country_color</snippet></ROW><ROW><id>17020935</id><snippet>color_data</snippet></ROW><ROW><id>17020935</id><snippet>color_data = {'Country': ['col1', country_color] # Notice how it's not a string anymore
</snippet></ROW><ROW><id>17020955</id><snippet>&gt;&gt;&gt; from multiprocessing import Pool   
&gt;&gt;&gt; p = Pool(5)   

&gt;&gt;&gt; def f(x):   
...     return x*x  

&gt;&gt;&gt; p.map(f, [1,2,3])  
</snippet></ROW><ROW><id>17021455</id><snippet>web</snippet></ROW><ROW><id>17021485</id><snippet>import itertools

ifilter(lambda x: x==nMoments, moment_list_sum)
</snippet></ROW><ROW><id>17021958</id><snippet>ELLIPSIS</snippet></ROW><ROW><id>17021958</id><snippet>&gt;&gt;&gt; def checking():
...     """
...     &gt;&gt;&gt; checking()  #doctest: +ELLIPSIS
...     header
...     ...
...     test is passed
...     ...
...     footer
...     """
...     print("header\nrandom\nlines\ntest is passed\nother\nrandom lines\nfooter")
&gt;&gt;&gt; doctest.testmod(verbose=True)
Trying:
    checking()  #doctest: +ELLIPSIS
Expecting:
    header
    ...
    test is passed
    ...
    footer
ok
1 items had no tests:
    __main__
1 items passed all tests:
   1 tests in __main__.checking
1 tests in 2 items.
1 passed and 0 failed.
Test passed.
TestResults(failed=0, attempted=1)
</snippet></ROW><ROW><id>17021958</id><snippet>...</snippet></ROW><ROW><id>17021958</id><snippet>ELLIPSIS</snippet></ROW><ROW><id>17021958</id><snippet>optionflags</snippet></ROW><ROW><id>17021958</id><snippet>doctest</snippet></ROW><ROW><id>17021958</id><snippet>&gt;&gt;&gt; checking.__doc__ = ''.join(checking.__doc__.split('#doctest: +ELLIPSIS'))
&gt;&gt;&gt; print checking.__doc__

    &gt;&gt;&gt; checking()  
    header
    ...
    test is passed
    ...
    footer

&gt;&gt;&gt; doctest.testmod(optionflags=doctest.ELLIPSIS)
TestResults(failed=0, attempted=2)
</snippet></ROW><ROW><id>17022400</id><snippet>import subprocess, shlex
strs = subprocess.check_output(shlex.split('ip r l'))
gateway = strs.split('default via')[-1].split()[0]
ip  = strs.split('src')[-1].split()[0]
print gateway, ip
#10.64.64.64 106.205.92.100
</snippet></ROW><ROW><id>17022400</id><snippet>regex</snippet></ROW><ROW><id>17022400</id><snippet>import subprocess, shlex, re
strs =  subprocess.check_output(shlex.split('ip r l'))
match_string = r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})'
ip = re.search('src '+ match_string, strs).group(1)
gateway = re.search('default via ' + match_string, strs).group(1)
print gateway, ip
#10.64.64.64 106.205.92.100
</snippet></ROW><ROW><id>17022413</id><snippet>while li1&gt;0 and li2&gt;0:
    wynik=randint(li1,li2)
</snippet></ROW><ROW><id>17022413</id><snippet>l1</snippet></ROW><ROW><id>17022413</id><snippet>l2</snippet></ROW><ROW><id>17022413</id><snippet>wynik=randint(li1,li2)</snippet></ROW><ROW><id>17022413</id><snippet>l1</snippet></ROW><ROW><id>17022413</id><snippet>l2</snippet></ROW><ROW><id>17022413</id><snippet>break</snippet></ROW><ROW><id>17022413</id><snippet>if li1 &gt; 0 and li2 &gt; 0:
    wynik = randint(li1, li2)
</snippet></ROW><ROW><id>17022841</id><snippet>def reverseString(aStr, newStr = ''):
    if len(aStr) == 0:
        return newStr
    else:
        newStr = newStr + aStr[-1]  #-1 returns the last element from the string
        return reverseString(aStr[:-1], newStr) #slice the string up to second last char
print reverseString("foobar")     
#raboof
</snippet></ROW><ROW><id>17022841</id><snippet>newStr</snippet></ROW><ROW><id>17022841</id><snippet>''</snippet></ROW><ROW><id>17022841</id><snippet>newStr</snippet></ROW><ROW><id>17022841</id><snippet>def reverseString(aStr, newStr= ''): #define a default value for newStr

    if len(aStr) == 0:
        return newStr
    else:
        newStr = newStr + aStr[len(aStr)-1]  #better use aStr[-1]
        return reverseString(aStr[:len(aStr)-1], newStr) #pass the new value of newStr

print reverseString("foobar")# No value is passed for newStr. So, default is used . 
</snippet></ROW><ROW><id>17022936</id><snippet>os.walk()</snippet></ROW><ROW><id>17022936</id><snippet>os.listdir()</snippet></ROW><ROW><id>17022936</id><snippet>for subdir in dirnames</snippet></ROW><ROW><id>17022936</id><snippet>open()</snippet></ROW><ROW><id>17022936</id><snippet>try..except</snippet></ROW><ROW><id>17022936</id><snippet>os.walk()</snippet></ROW><ROW><id>17022936</id><snippet>dirnames[:] = []</snippet></ROW><ROW><id>17022936</id><snippet>dirnames = []</snippet></ROW><ROW><id>17022936</id><snippet>print("do something ...")</snippet></ROW><ROW><id>17022936</id><snippet>#!/usr/bin/env python

import errno
import os

f1 = "test1"
f2 = "test2"

path = "."
for dirpath, dirnames, _ in os.walk(path):
    for subdir in dirnames:
        filepath1, filepath2 = [os.path.join(dirpath, subdir, f + ".txt") for f in f1, f2]
        try:
            with open(filepath1, 'r') as fin1, open(filepath2, 'r') as fin2:
                print("do something with " + str(fin1) + " and " + str(fin2))
        except IOError as e:
            # ignore directiories that don't contain the 2 files
            if e.errno != errno.ENOENT:
                # reraise exception if different from "file or directory doesn't exist"
                raise

    # comment the next line out if you want to traverse all subsubdirectories
    dirnames[:] = []
</snippet></ROW><ROW><id>17022936</id><snippet>os.walk()</snippet></ROW><ROW><id>17022936</id><snippet>#!/usr/bin/env python

import fnmatch
import os

filter_pattern = "*.txt"

path = "."
for dirpath, dirnames, filenames in os.walk(path):
    # comment this out if you don't want to filter
    filenames = [fn for fn in filenames if fnmatch.fnmatch(fn, filter_pattern)]

    if len(filenames) == 2:
        # comment this out if you don't want the 2 filenames to be sorted
        filenames.sort(key=str.lower)

        filepath1, filepath2 = [os.path.join(dirpath, fn) for fn in filenames]
        with open(filepath1, 'r') as fin1, open(filepath2, 'r') as fin2:
            print("do something with " + str(fin1) + " and " + str(fin2))
</snippet></ROW><ROW><id>17022936</id><snippet>        filenames = [os.path.splitext(fn)[0] for fn in filenames]
</snippet></ROW><ROW><id>17022936</id><snippet>eval()</snippet></ROW><ROW><id>17022936</id><snippet>eval()</snippet></ROW><ROW><id>17022936</id><snippet>line.split(",")</snippet></ROW><ROW><id>17022936</id><snippet>[word.strip() for word in line.split(",")]</snippet></ROW><ROW><id>17022936</id><snippet>[int(num) for num in line.split(",")]</snippet></ROW><ROW><id>17023178</id><snippet>DailyLogFile</snippet></ROW><ROW><id>17023273</id><snippet>import sys
from itertools import islice

def p():
    numbers, div = map(int, next(sys.stdin).split())
    print sum(int(l) % div == 0 for l in islice(sys.stdin, numbers))    

p()
</snippet></ROW><ROW><id>17023273</id><snippet>True</snippet></ROW><ROW><id>17023273</id><snippet>False</snippet></ROW><ROW><id>17023273</id><snippet>import sys
from itertools import islice

def p():
    numbers, div = map(int, next(sys.stdin).split())
    print sum(1 for l in islice(sys.stdin, numbers) if int(l) % div == 0)    

p()
</snippet></ROW><ROW><id>17023273</id><snippet>if</snippet></ROW><ROW><id>17023440</id><snippet>f.seek(-1, os.SEEK_CURR)
f.write(";")
</snippet></ROW><ROW><id>17023959</id><snippet>&gt;&gt;&gt; i = 0
&gt;&gt;&gt; t = (i,)
&gt;&gt;&gt; t[0] is i  # both of them point to the same immutable object
True
&gt;&gt;&gt; i += 1  # We can't modify an immutable object, changing `i` simply 
            # makes it point to a new object 2.
            # All other references to the original object(0) are still intact.
&gt;&gt;&gt; i
1
&gt;&gt;&gt; t       # t still points to the same 0
(0,)
&gt;&gt;&gt; x = y = 1
&gt;&gt;&gt; id(x),id(y)
(137793280, 137793280)
&gt;&gt;&gt; x += 1
&gt;&gt;&gt; id(x),id(y)       #y still points to the same object
(137793296, 137793280)
</snippet></ROW><ROW><id>17023959</id><snippet>&gt;&gt;&gt; l = [0]
&gt;&gt;&gt; t = (l,)       
&gt;&gt;&gt; t[0] is l #both t[0] and l point to the same object [0]
True
&gt;&gt;&gt; l[0] += 1 # modify [0] in-place
&gt;&gt;&gt; t
([1],)
&gt;&gt;&gt; l
[1]
#another exmple
&gt;&gt;&gt; x = y =[]    # x, y point to the same object
&gt;&gt;&gt; x.append(1)  # list.append modifies the list in-place
&gt;&gt;&gt; x, y          
([1], [1]) 
&gt;&gt;&gt; x = x + [2]  # only changes x, x now points to a new object
&gt;&gt;&gt; x, y
([1, 2], [1])
</snippet></ROW><ROW><id>17024209</id><snippet>class Product(models.Model):
    currencies = models.ManyToManyField('Currency', through='Pricing', blank=True, null=True)

class Currency(models.Model):
    name = models.CharField()
    sign = models.CharField()

class Pricing(models.Model):
    product = models.ForeignKey(Product)
    currency = models.ForeignKey(Currency)
    price = models.FloatField()
</snippet></ROW><ROW><id>17024209</id><snippet>product = Product.objects.get(name='Cactus')
price = product.pricing_set.get(currency__name='USD')
</snippet></ROW><ROW><id>17024235</id><snippet>layout</snippet></ROW><ROW><id>17024235</id><snippet>plot</snippet></ROW><ROW><id>17024235</id><snippet>&gt;&gt;&gt; g = Graph.Ring(4, circular=False)
&gt;&gt;&gt; layout = [(0,0), (0,1), (1,1), (1,0)]
&gt;&gt;&gt; plot(g, layout=layout)
</snippet></ROW><ROW><id>17024235</id><snippet>&gt;&gt;&gt; plot(g, layout=layout, margin=0, bbox=(800,400))
</snippet></ROW><ROW><id>17024306</id><snippet>zip</snippet></ROW><ROW><id>17024306</id><snippet>def compare(s1, s2):
   if len(s1) != len(s2):
       return False
   else:
      for c1, c2 in zip(s1, s2):
         if c1 != c2:
             return False
         else:    
             return True

&gt;&gt;&gt; compare('foo', 'foo')
True
&gt;&gt;&gt; compare('foo', 'fof')
False
&gt;&gt;&gt; compare('foo', 'fooo')
False
</snippet></ROW><ROW><id>17024306</id><snippet>count</snippet></ROW><ROW><id>17024306</id><snippet>0</snippet></ROW><ROW><id>17024306</id><snippet>a = input('Please enter the first string to compare:')
b = input('Please enter the second string to compare: ')
if len(a) !=  len(b):            # match the length first
    print ('Strings don\'t match')
else:
    count = 0                    #declare it outside of while loop
    while count &lt; len(a):        #loop until count &lt; length of strings
        if a[count] != b[count]:
            print ('Strings don\'t match! ')
            break
        count = count + 1
    else:
       print ("string match")
</snippet></ROW><ROW><id>17024533</id><snippet>/usr/ports/www/py-scrapyd</snippet></ROW><ROW><id>17024533</id><snippet>$ sudo mkdir -p /usr/ports/www/py-scrapyd
</snippet></ROW><ROW><id>17024533</id><snippet>make install</snippet></ROW><ROW><id>17024533</id><snippet>make</snippet></ROW><ROW><id>17024595</id><snippet>&gt;&gt;&gt; import difflib
&gt;&gt;&gt; matcher = difflib.SequenceMatcher(None, 'foo', 'for')
&gt;&gt;&gt; sum(size for start, end, size in matcher.get_matching_blocks())
2
&gt;&gt;&gt; max(map(len, ('foo', 'for'))) - _
1
&gt;&gt;&gt;
&gt;&gt;&gt;
&gt;&gt;&gt; matcher = difflib.SequenceMatcher(None, 'foo', 'food')
&gt;&gt;&gt; sum(size for start, end, size in matcher.get_matching_blocks())
3
&gt;&gt;&gt; max(map(len, ('foo', 'food'))) - _
1
</snippet></ROW><ROW><id>17024654</id><snippet>==</snippet></ROW><ROW><id>17024654</id><snippet>is</snippet></ROW><ROW><id>17024654</id><snippet>String name1 = "John";
String name2 = "John";
if (name1 == name2) {
    System.out.println("They have the same name!");
}
</snippet></ROW><ROW><id>17024654</id><snippet>is</snippet></ROW><ROW><id>17025151</id><snippet>try:
   do_something()
except:   #BAD BAD BAD
   react_to_exception()
</snippet></ROW><ROW><id>17025151</id><snippet>try:
    do_something()
except ValueError as e:
    raise e
</snippet></ROW><ROW><id>17025337</id><snippet>class GameStatus(object):
    """Enum of possible Game statuses."""
    __init__ = None
    NotStarted, InProgress, Win, Lose = range(4)
</snippet></ROW><ROW><id>17025337</id><snippet>def getStatus(number):
return{
    0: "NotStarted",
    1: "InProgress",
    2: "Win",
    3: "Lose",
    }
</snippet></ROW><ROW><id>17025337</id><snippet>@staticmethod
def getStatus(number):
return{
    0: "NotStarted",
    1: "InProgress",
    2: "Win",
    3: "Lose",
    }[number]
</snippet></ROW><ROW><id>17025752</id><snippet>def f(path):
    if os.path.isdir(path):
        d = {}
        for name in os.listdir(path):
            d[name] = f(os.path.join(path, name))
    else:
        d = os.path.getsize(path)
    return d
</snippet></ROW><ROW><id>17025762</id><snippet>plt.figure(frameon=False)
plt.axes(frameon=0)
</snippet></ROW><ROW><id>17025762</id><snippet>plt.savefig('D:/latex.png', bbox_inches='tight')
</snippet></ROW><ROW><id>17025762</id><snippet>plt.close()
</snippet></ROW><ROW><id>17025762</id><snippet>import matplotlib.pyplot as plt

def convert(string):
    plt.figure(frameon=False)
    plt.axes(frameon=0)
    if string[0] != '$' and string[-1] != '$':
        string = '$' + string + '$'
    plt.text(0.01, 0.8, string, fontsize=50)
    plt.xticks(())
    plt.yticks(())
    plt.savefig('D:/latex.png', bbox_inches='tight')
    plt.close()
</snippet></ROW><ROW><id>17025762</id><snippet>convert('y=3333333333333333333333333333333x')</snippet></ROW><ROW><id>17025762</id><snippet>    convert('y=1x\ny=2x\ny=3x\ny=4x\ny=5x\ny=6x\ny=7x\ny=8x\n
               y=9x\ny=10y\ny=11x\ny=22x\ny=33x\ny=44x\ny=55x\ny=66x\ny=77x')
</snippet></ROW><ROW><id>17025792</id><snippet>for-loop</snippet></ROW><ROW><id>17025792</id><snippet>/n</snippet></ROW><ROW><id>17025792</id><snippet>\n</snippet></ROW><ROW><id>17025792</id><snippet>splitlines()</snippet></ROW><ROW><id>17025792</id><snippet>\r\n</snippet></ROW><ROW><id>17025792</id><snippet>\n</snippet></ROW><ROW><id>17025792</id><snippet>\r</snippet></ROW><ROW><id>17025985</id><snippet>&gt;&gt;&gt; content2 = [-0.112272999846, -0.0172778364044, 0, 0.0987861891257,
 0.143225416783,     0.0616318333661, 0.99985834, 0.362754457762, 0.103690909138,
 0.0767353098528, 0.0605534405723, 0.0, -0.105599793882, -0.0193182826135, 
0.040838960163]
&gt;&gt;&gt; [float(x) if x else None for x in content2]
[-0.112272999846, -0.0172778364044, None, 0.0987861891257, 0.143225416783, 0.0616318333661, 0.99985834, 0.362754457762, 0.103690909138, 0.0767353098528, 0.0605534405723, None, -0.105599793882, -0.0193182826135, 0.040838960163]
</snippet></ROW><ROW><id>17025985</id><snippet>content2</snippet></ROW><ROW><id>17025985</id><snippet>content2[:] = [float(x) if x else None for x in content2]
</snippet></ROW><ROW><id>17025985</id><snippet>range((content2)-1)
</snippet></ROW><ROW><id>17025985</id><snippet>1</snippet></ROW><ROW><id>17025985</id><snippet>list</snippet></ROW><ROW><id>17025985</id><snippet>range</snippet></ROW><ROW><id>17025985</id><snippet>- 1</snippet></ROW><ROW><id>17025985</id><snippet>1</snippet></ROW><ROW><id>17025985</id><snippet>range(len(content2))</snippet></ROW><ROW><id>17025985</id><snippet>for i in range(len(content2)):
    if content2[i] == 0.0:
        content2[i] = None
</snippet></ROW><ROW><id>17025985</id><snippet>int</snippet></ROW><ROW><id>17025985</id><snippet>0</snippet></ROW><ROW><id>17025985</id><snippet>for i in range(len(content2)):
    if not content2[i]:
        content2[i] = None
</snippet></ROW><ROW><id>17025985</id><snippet>if len(x) == 0</snippet></ROW><ROW><id>17025985</id><snippet>content2[:] = [float(x) if x else None for x in content2]
</snippet></ROW><ROW><id>17025985</id><snippet>res = []
for x in content2:
    if x: # x is not empty (0.0)
        res.append(float(x))
    else:
        res.append(None)
content2[:] = res # replaces items in content2 with those from res
</snippet></ROW><ROW><id>17026359</id><snippet>import os, os.path, EditHeader2

folder1 = 'editedheaders'
folder2 = 'editedheaders/1'

extensions = ('.txt', '.tfw', 'your extensions here ...')

for filename in os.listdir(folder1):
    infilename = os.path.join(folder1, filename)
    if not os.path.isfile(infilename): continue
    base, extension = os.path.splitext(filename)
    if os.path.splitext(filename)[1] in extensions:
        infile = open(infilename, 'r')
        outfile = open(os.path.join(folder2, '{}'.format(base, extension)), 'w')
        EditHeader2.edit(infile, outfile)
</snippet></ROW><ROW><id>17026497</id><snippet>Updates</snippet></ROW><ROW><id>17026497</id><snippet>a list of pairs</snippet></ROW><ROW><id>17026497</id><snippet>import theano as th
import theano.tensor as T
import numpy as np

x = T.dscalars('x')
z = th.shared(np.zeros(2))
updates = [(z, z+x)]

f1 = th.function(inputs=[x], updates=updates) 
f1(3)
print z.get_value()
</snippet></ROW><ROW><id>17027121</id><snippet>display_board(board)</snippet></ROW><ROW><id>17027121</id><snippet>board</snippet></ROW><ROW><id>17027121</id><snippet>display_board(board)</snippet></ROW><ROW><id>17027121</id><snippet>board</snippet></ROW><ROW><id>17027121</id><snippet>new_board</snippet></ROW><ROW><id>17027121</id><snippet>display_board</snippet></ROW><ROW><id>17027121</id><snippet>def display_board(variable):
    """Display game board on screen."""
    print("\n\t", variable[0], "|", variable[1], "|", variable[2])
    print("\t", "---------")
    print("\t", variable[3], "|", variable[4], "|", variable[5])
    print("\t", "---------")
    print("\t", variable[6], "|", variable[7], "|", variable[8], "\n")
</snippet></ROW><ROW><id>17027121</id><snippet>display_board</snippet></ROW><ROW><id>17027121</id><snippet>new_board</snippet></ROW><ROW><id>17027121</id><snippet>b = new_board()
display_board(b)
</snippet></ROW><ROW><id>17027121</id><snippet>board</snippet></ROW><ROW><id>17027121</id><snippet>variable</snippet></ROW><ROW><id>17027121</id><snippet>display_board</snippet></ROW><ROW><id>17027284</id><snippet>mail(["recipient1@email.com", "recipient2@email.com"],
   "Subject",
   "Message", 
   "attchachment")
</snippet></ROW><ROW><id>17027284</id><snippet>mail</snippet></ROW><ROW><id>17027563</id><snippet>Latin-1</snippet></ROW><ROW><id>17027563</id><snippet>Ã</snippet></ROW><ROW><id>17027563</id><snippet>0xC3</snippet></ROW><ROW><id>17027563</id><snippet>if 'var' in str(tag.string):</snippet></ROW><ROW><id>17027563</id><snippet>string</snippet></ROW><ROW><id>17027563</id><snippet>response = requests.get(url)
# decode the latin-1 bytes to unicode  
#soup = bs4.BeautifulSoup(response.text.decode('latin-1'))
#try this line instead
soup = bs4.BeautifulSoup(response.text, from_encoding=response.encoding)

for tag in soup.findAll('script'):
    # since now soup was made with unicode strings I supposed you can treat
    # its elements as so
    if u'var' in tag.string:    # This is the line throwing the exception
        # now if you want output in utf-8
        print(tag.string.encode('utf-8'))
</snippet></ROW><ROW><id>17027563</id><snippet>X</snippet></ROW><ROW><id>17027563</id><snippet>X</snippet></ROW><ROW><id>17027563</id><snippet>bytes.decode('X') and this returns a unicode byte sequence</snippet></ROW><ROW><id>17027563</id><snippet>Y</snippet></ROW><ROW><id>17027563</id><snippet>ubytes.encode('Y')</snippet></ROW><ROW><id>17027591</id><snippet>generate_xml(reader, args.outputfile)

...
def generate_xml(reader, outfile):
    ...
    tree.write(outfile)
</snippet></ROW><ROW><id>17027591</id><snippet>args.inputfile</snippet></ROW><ROW><id>17027591</id><snippet>reader = read_csv(args.inputfile)
...
def read_csv(inputfile):
    return list(csv.reader(inputfile))
</snippet></ROW><ROW><id>17027591</id><snippet>read_csv()
</snippet></ROW><ROW><id>17027613</id><snippet>def sequence(x, N):
    i = 0
    result = 1
    while i &lt; N:
        result *= (x + i)
        i += 1
        yield result

&gt;&gt;&gt; list(sequence(5, 10))
[5, 30, 210, 1680, 15120, 151200, 1663200, 19958400, 259459200, 3632428800L]
</snippet></ROW><ROW><id>17027613</id><snippet>np.multiply.accumulate(np.arange(x, x + N))
</snippet></ROW><ROW><id>17027711</id><snippet>print</snippet></ROW><ROW><id>17027711</id><snippet>print line , #&lt;--- trailing comma
</snippet></ROW><ROW><id>17027711</id><snippet>print</snippet></ROW><ROW><id>17027711</id><snippet>print(line,end='') #rather than the default `print(line,end='\n')`.
</snippet></ROW><ROW><id>17027711</id><snippet>print line.rstrip('\n') # There are other options, e.g. line[:-1], ... 
</snippet></ROW><ROW><id>17027846</id><snippet>import operator

def apply(f,a,b):
  return f(a,b)

print apply(operator.add,1,1)
</snippet></ROW><ROW><id>17027846</id><snippet>2
</snippet></ROW><ROW><id>17027846</id><snippet>def</snippet></ROW><ROW><id>17027846</id><snippet>print apply(lamba a,b: a+b, 1, 1)
</snippet></ROW><ROW><id>17027847</id><snippet>In [14]: df.groupby(['a', 'b', 'c']).size().reindex(index=mi).fillna(0)
Out[14]: 
foo  one  dull     1
          shiny    1
     two  dull     1
          shiny    2
bar  one  dull     1
          shiny    0
     two  dull     1
          shiny    0
dtype: float64
</snippet></ROW><ROW><id>17027910</id><snippet>def reverse(text):
    final_string = "" 
    count = len(text) # sets the counter variable to the length of the string variable
    while count &gt; 0: # starts a loop as long as our counter is higher than 0
        final_string += text[len(text)-1] #copies the last letter from text to final string
        text = text[0:len(text)-1] #removes the last letter from text
        count -= 1 #decrements the counter so we step backwards towards 0
    return final_string
</snippet></ROW><ROW><id>17027974</id><snippet>invalid_grant</snippet></ROW><ROW><id>17027974</id><snippet>Credentials</snippet></ROW><ROW><id>17027974</id><snippet>&gt;&gt;&gt; credentials.refresh_token is None
True
</snippet></ROW><ROW><id>17027974</id><snippet>Credentials</snippet></ROW><ROW><id>17027974</id><snippet>approval_prompt=force</snippet></ROW><ROW><id>17027974</id><snippet>OAuth2WebServerFlow</snippet></ROW><ROW><id>17027974</id><snippet>OAuth2Decorator</snippet></ROW><ROW><id>17028080</id><snippet>sys.stdout.close() 
sys.stdout = open("out.txt", "w") 
</snippet></ROW><ROW><id>17028433</id><snippet>0.11.1.dev-bbcafd8
Original DataFrame:
  Classification  Random        X
0  SA EQUITY CFD       1  correct
1            bbb       2    wrong
2      SA EQUITY       3  correct
3         SA SSF       4  correct
4            aaa       5    wrong
===================================
  Classification  Random      X
1            bbb       2  wrong
4            aaa       5  wrong
===================================
  Classification  Random        X
0  SA EQUITY CFD       1  correct
1            bbb       2      bbb
2      SA EQUITY       3  correct
3         SA SSF       4  correct
4            aaa       5      aaa
</snippet></ROW><ROW><id>17028572</id><snippet>lambda</snippet></ROW><ROW><id>17028572</id><snippet>map</snippet></ROW><ROW><id>17028572</id><snippet>&gt;&gt;&gt; fact = lambda x: x == 0 and 1 or x * fact(x - 1)
&gt;&gt;&gt; map(fact, range(4))
[1, 1, 2, 6]
</snippet></ROW><ROW><id>17028572</id><snippet>string</snippet></ROW><ROW><id>17028572</id><snippet>string</snippet></ROW><ROW><id>17028572</id><snippet>def fact(i):
    if i == 0:
        return 'x'
    else:
        return fact(i - 1) + '*(x+%d)' % i
</snippet></ROW><ROW><id>17028572</id><snippet>&gt;&gt;&gt; map(fact, range(4))
['x', 'x*(x+1)', 'x*(x+1)*(x+2)', 'x*(x+1)*(x+2)*(x+3)']
</snippet></ROW><ROW><id>17028572</id><snippet>sympy</snippet></ROW><ROW><id>17028572</id><snippet>import sympy

def fact(i):
    if i == 0:
        return sympy.Symbol('x')
    else:
        return sympy.Symbol('(x+%d)' % i) * fact(i - 1)
</snippet></ROW><ROW><id>17028572</id><snippet>&gt;&gt;&gt; map(fact, range(4))
[x, (x+1)*x, (x+1)*(x+2)*x, (x+1)*(x+2)*(x+3)*x]
</snippet></ROW><ROW><id>17028651</id><snippet>*_d.lib</snippet></ROW><ROW><id>17028910</id><snippet>data = np.array([[ 4057,     8,  1374],
                 [ 4057,     9,   759],
                 [ 4057,    11,    96],
                 [89205,    16,   146],
                 [89205,    17,   154],
                 [89205,    18,   244]])

rows, row_pos = np.unique(data[:, 0], return_inverse=True)
cols, col_pos = np.unique(data[:, 1], return_inverse=True)

pivot_table = np.zeros((len(rows), len(cols)), dtype=data.dtype)
pivot_table[row_pos, col_pos] = data[:, 2]

&gt;&gt;&gt; pivot_table
array([[1374,  759,   96,    0,    0,    0],
       [   0,    0,    0,  146,  154,  244]])
&gt;&gt;&gt; rows
array([ 4057, 89205])
&gt;&gt;&gt; cols
array([ 8,  9, 11, 16, 17, 18])
</snippet></ROW><ROW><id>17028910</id><snippet>data = np.array([[ 4057,     8,  1374],
                 [ 4057,     9,   759],
                 [ 4057,    11,    96],
                 [89205,    16,   146],
                 [89205,    17,   154],
                 [89205,    18,   244],
                 [ 4057,    11,     4]])

rows, row_pos = np.unique(data[:, 0], return_inverse=True)
cols, col_pos = np.unique(data[:, 1], return_inverse=True)

pivot_table = np.zeros((len(rows), len(cols)), dtype=data.dtype)
pivot_table[row_pos, col_pos] = data[:, 2]
&gt;&gt;&gt; pivot_table # the element at [0, 2] should be 100!!!
array([[1374,  759,    4,    0,    0,    0],
       [   0,    0,    0,  146,  154,  244]])

import scipy.sparse as sps
pivot_table = sps.coo_matrix((data[:, 2], (row_pos, col_pos)),
                             shape=(len(rows), len(cols))).A
&gt;&gt;&gt; pivot_table # now repeated elements are added together
array([[1374,  759,  100,    0,    0,    0],
       [   0,    0,    0,  146,  154,  244]])
</snippet></ROW><ROW><id>17029047</id><snippet>try:
    dog.quack()
except AttributeError:
    dog.woof()
</snippet></ROW><ROW><id>17029047</id><snippet>class Person:
    def help(self):
        print("Heeeelp!")

class Duck:
    def help(self):
        print("Quaaaaaack!")

class SomethingElse:
    pass

donald = Duck()
john = Person()
who = SomethingElse()

for thing in [donald, john, who]:
    try:
        InTheForest(thing)
    except AttributeError:
        print 'Meeowww!'
</snippet></ROW><ROW><id>17029047</id><snippet>Quaaaaaack!
Heeeelp!
Meeowww!
</snippet></ROW><ROW><id>17029243</id><snippet>cython_list_matmul</snippet></ROW><ROW><id>17029243</id><snippet>cython_array_matmul</snippet></ROW><ROW><id>17029243</id><snippet>C[i,k] += A[i,j] * B[j,k]
</snippet></ROW><ROW><id>17029243</id><snippet>A[i][j]</snippet></ROW><ROW><id>17029243</id><snippet>A[i,j]</snippet></ROW><ROW><id>17029243</id><snippet>np.empty</snippet></ROW><ROW><id>17029243</id><snippet>np.zeros</snippet></ROW><ROW><id>17029258</id><snippet>itertools.product</snippet></ROW><ROW><id>17029258</id><snippet>from itertools import product
alist = [Do_Class(x[0], x[1]) for x in product(range(4), range(15))]
</snippet></ROW><ROW><id>17029258</id><snippet>alist = map(lambda x: Do_Class(x[0], x[1]), product(range(4), range(15)))
</snippet></ROW><ROW><id>17029258</id><snippet>alist = map(Do_Class, sorted(range(4)*15), range(15)*4)
</snippet></ROW><ROW><id>17029258</id><snippet>itertools.starmap</snippet></ROW><ROW><id>17029258</id><snippet>from itertools import starmap
from itertools import product
alist = starmap(Do_Class, product(range(4), range(15)))
</snippet></ROW><ROW><id>17029431</id><snippet>return charge
</snippet></ROW><ROW><id>17029431</id><snippet>charge = service(x, y, z)
</snippet></ROW><ROW><id>17029431</id><snippet>x</snippet></ROW><ROW><id>17029431</id><snippet>y</snippet></ROW><ROW><id>17029431</id><snippet>z</snippet></ROW><ROW><id>17029431</id><snippet>charge</snippet></ROW><ROW><id>17029431</id><snippet>charge</snippet></ROW><ROW><id>17029431</id><snippet>return x, y
</snippet></ROW><ROW><id>17029431</id><snippet>x, y = service(x, y, z)
</snippet></ROW><ROW><id>17029433</id><snippet>child = Toplevel()</snippet></ROW><ROW><id>17029433</id><snippet>root = Tk()</snippet></ROW><ROW><id>17029433</id><snippet>mainloop</snippet></ROW><ROW><id>17029433</id><snippet>from tkinter import *
from tkinter import ttk

class Main_window(ttk.Frame):
    """A program"""
    def __init__(self, master):
        ttk.Frame.__init__(self, master)
        self.grid()
        self.create_widgets()

    def create_widgets(self):
        """Creates all the objects in the window"""


        self.min_lbl = ttk.Label(self, text = "1").grid(row = 0, column = 0,
                                                        sticky = W)
        self.max_lbl = ttk.Label(self, text = "100").grid(row = 0, column = 2,
                                                        sticky = W)

        spinval = IntVar()

        self.scale = ttk.Scale(self, orient = HORIZONTAL,
                                       length = 200,
                                       from_ = 1, to = 100,
                                       variable = spinval,
                                       command=self.accept_whole_number_only)
        self.scale.grid(row = 0,column = 1,sticky = W)


        self.spinbox = Spinbox(self, from_ = 1, to = 100,
                                       textvariable = spinval,
                                       command = self.update,
                                       width = 10)
        self.spinbox.grid(row = 0,column =3,sticky = W)


        self.go_bttn = ttk.Button(self, text = "Go",
                                  command = self.create_windows
                                  ).grid(row = 1, column = 1, sticky = W)


    def accept_whole_number_only(self, e=None):
        """Makes the numbers from the scale whole"""
        value = self.scale.get()
        if int(value) != value:
            self.scale.set(round(value))

    def update(self):
        """Updates the scale and spinbox"""
        self.scale.set(self.spinbox.get())


    def create_windows(self):
        """This function will create all the new windows"""
        value = self.scale.get()
        window_num = value
        negative_window_num = 1
        for n in range(int(window_num)):
            child = Toplevel()
            child.title("This is Window "+str(window_num)[:-2]+" of "+str(value)[:-2])
            child.geometry("350x200")
            app = Window_creator(child)


class Window_creator(ttk.Frame):
    """makes child windows"""
    def __init__(self, master):
        ttk.Frame.__init__(self, master)
        self.grid()
        self.create_widgets()

    def create_widgets(self):
        """creates all the widgets in the window"""


def main():
    """Loops the window"""
    root = Tk()
    root.title("Programm")
    root.geometry("350x200")
    app = Main_window(root)
    root.mainloop()

main()
</snippet></ROW><ROW><id>17029451</id><snippet>Django version
Request timer
A list of settings in settings.py
Common HTTP headers
GET/POST/cookie/session variable display
Templates and context used, and their template paths
SQL queries including time to execute and links to EXPLAIN each query
List of signals, their args and receivers
Logging output via Python's built-in logging, or via the logbook module
</snippet></ROW><ROW><id>17029451</id><snippet>debugsqlshell: Outputs the SQL that gets executed as you work in the Python interactive shell. (See example below)
</snippet></ROW><ROW><id>17029451</id><snippet>Note: The Debug Toolbar only works on Django 1.3 and newer.
</snippet></ROW><ROW><id>17029479</id><snippet>-o</snippet></ROW><ROW><id>17029479</id><snippet>apythonfile.py</snippet></ROW><ROW><id>17029792</id><snippet>    super(Request, self).__init__(*args, **kwargs)
</snippet></ROW><ROW><id>17029792</id><snippet>__init__</snippet></ROW><ROW><id>17029792</id><snippet>HttpRequest</snippet></ROW><ROW><id>17029792</id><snippet>Request</snippet></ROW><ROW><id>17029792</id><snippet>class Request(object):
    def __init__(self, request, *args, **kwargs):
        self._original_request = request

    def __getattr__(self, name):
        return getattr(self._original_request, name)

    def __setattr__(self, name, value):
        if name == '_original_request':
            super(Request, self).__setattr__(name, value)
        else:
            self._original_request.__setattr__(name, value)

    def __getitem__(self, key):
        return self._original_request[key]

    def __setitem__(self, key, value):
        self._original_request[key] = value
</snippet></ROW><ROW><id>17030247</id><snippet>import itertools

for x, y, z in itertools.product(range(1,10), range(1,10), range(1,10)):
    product = x * y * z
    if product == 36:
        print "factors : {0},{1},{2}".format(x,y,z)
</snippet></ROW><ROW><id>17030247</id><snippet>factors : 1,4,9
factors : 1,6,6
factors : 1,9,4
(...etc)
</snippet></ROW><ROW><id>17030247</id><snippet>for x, y, z in itertools.product(range(1,10), repeat=3):
</snippet></ROW><ROW><id>17030247</id><snippet>product =</snippet></ROW><ROW><id>17030247</id><snippet>reduce</snippet></ROW><ROW><id>17030247</id><snippet>for factors in itertools.product(range(1,3), repeat=10):
    product = reduce(lambda x, y: x*y, factors)
</snippet></ROW><ROW><id>17030247</id><snippet>join</snippet></ROW><ROW><id>17030247</id><snippet>if product == 512:
    #use `map` to turn the factors into strings, first
    print "factors: " + ",".join(map(str, factors))
</snippet></ROW><ROW><id>17030338</id><snippet>from datetime import timedelta, datetime

d = timedelta(days=41433.662413)
st = datetime(1899,12,31)
date = st + d
print(date)
</snippet></ROW><ROW><id>17030338</id><snippet>2013-06-09 15:53:52.483200</snippet></ROW><ROW><id>17030338</id><snippet>41420.25</snippet></ROW><ROW><id>17030477</id><snippet>&gt;&gt;&gt; from decimal import *
&gt;&gt;&gt; Decimal('1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623091229702')
Decimal('1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623091229702')
</snippet></ROW><ROW><id>17030477</id><snippet>float</snippet></ROW><ROW><id>17030477</id><snippet>str</snippet></ROW><ROW><id>17030477</id><snippet>&gt;&gt;&gt; 1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623091229702
1.4142135623730951
</snippet></ROW><ROW><id>17030477</id><snippet>decimal</snippet></ROW><ROW><id>17030613</id><snippet>row</snippet></ROW><ROW><id>17030613</id><snippet>row[col]</snippet></ROW><ROW><id>17030613</id><snippet>world[row][col]</snippet></ROW><ROW><id>17030686</id><snippet>CONCURRENT_REQUESTS_PER_DOMAIN</snippet></ROW><ROW><id>17030686</id><snippet>CONCURRENT_REQUESTS</snippet></ROW><ROW><id>17030686</id><snippet>LOG_ENABLED = False</snippet></ROW><ROW><id>17030686</id><snippet>yield</snippet></ROW><ROW><id>17030686</id><snippet>items</snippet></ROW><ROW><id>17030714</id><snippet>import sys
from testdbtableform import *
from PyQt4 import QtSql, QtGui, QtCore, QtSql

def createConnection():
    db = QtSql.QSqlDatabase.addDatabase('QSQLITE')
    db.setDatabaseName('demomap.db')
    if db.open():
        return True
    else:
        print db.lastError().text()
        return False

class MyForm(QtGui.QDialog):

    def __init__(self, parent=None):
        QtGui.QDialog.__init__(self, parent)
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)
        self.model = QtSql.QSqlTableModel(self)
        self.model.setTable("userlist")
        self.model.setEditStrategy(2)
        self.model.select()
        self.ui.tableView.setModel(self.model)
        self.ui.Submit.clicked.connect(self.dbinput)

    def dbinput(self):
        self.model.insertRow(-1)
        text = self.ui.lineEdit.text()
        if self.model.setData(self.model.index(-1, 0), text):
            self.model.submitAll()
        else:
            print "There was a problem setting the data."

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    if not createConnection():
        sys.exit(1)
    myapp = MyForm()
    myapp.show()
    sys.exit(app.exec_())
</snippet></ROW><ROW><id>17030740</id><snippet>ThesaurusBase</snippet></ROW><ROW><id>17030740</id><snippet>ThesaurusSingleton</snippet></ROW><ROW><id>17030740</id><snippet>class ThesaurusBase():
    def __init__(self, singleton=None):
        self.singleton = singleton

    def mymethod1(self):
        raise NotImplementedError

    def mymethod2(self):
        raise NotImplementedError

class ThesaurusSingleton(ThesaurusBase):
    def mymethod1(self):
        return "meaw!"

class Thesaurus(TheraususBase):
    def __init__(self, singleton=None):
        TheraususBase.__init__(self, singleton)

    def mymethod1(self):
        return "quack!"

    def mymethod2(self):
        return "\\_o&lt;"
</snippet></ROW><ROW><id>17030740</id><snippet>singleton = ThesaurusSingleton()
thesaurus = Thesaurus(singleton)
</snippet></ROW><ROW><id>17030740</id><snippet>ThesaurusSingleton</snippet></ROW><ROW><id>17030740</id><snippet>&gt;&gt;&gt; class ThesaurusBase:
...     @classmethod
...     def initClassWide(cls):
...         cls._shared = cls()
... 
&gt;&gt;&gt; class T(ThesaurusBase):
...     def foo(self):
...         print self._shared
... 
&gt;&gt;&gt; ThesaurusBase.initClassWide()
&gt;&gt;&gt; t = T()
&gt;&gt;&gt; t.foo()
&lt;__main__.ThesaurusBase instance at 0x7ff299a7def0&gt;
</snippet></ROW><ROW><id>17030740</id><snippet>initClassWide</snippet></ROW><ROW><id>17030773</id><snippet>ctypes</snippet></ROW><ROW><id>17030773</id><snippet>import ctypes

# Drive types
DRIVE_UNKNOWN     = 0  # The drive type cannot be determined.
DRIVE_NO_ROOT_DIR = 1  # The root path is invalid; for example, there is no volume mounted at the specified path.
DRIVE_REMOVABLE   = 2  # The drive has removable media; for example, a floppy drive, thumb drive, or flash card reader.
DRIVE_FIXED       = 3  # The drive has fixed media; for example, a hard disk drive or flash drive.
DRIVE_REMOTE      = 4  # The drive is a remote (network) drive.
DRIVE_CDROM       = 5  # The drive is a CD-ROM drive.
DRIVE_RAMDISK     = 6  # The drive is a RAM disk.

# Map drive types to strings
DRIVE_TYPE_MAP = { DRIVE_UNKNOWN     : 'DRIVE_UNKNOWN',
                   DRIVE_NO_ROOT_DIR : 'DRIVE_NO_ROOT_DIR',
                   DRIVE_REMOVABLE   : 'DRIVE_REMOVABLE',
                   DRIVE_FIXED       : 'DRIVE_FIXED',
                   DRIVE_REMOTE      : 'DRIVE_REMOTE',
                   DRIVE_CDROM       : 'DRIVE_CDROM',
                   DRIVE_RAMDISK     : 'DRIVE_RAMDISK'}


# Return list of tuples mapping drive letters to drive types
def get_drive_info():
    result = []
    bitmask = ctypes.windll.kernel32.GetLogicalDrives()
    for i in range(26):
        bit = 2 ** i
        if bit &amp; bitmask:
            drive_letter = '%s:' % chr(65 + i)
            drive_type = ctypes.windll.kernel32.GetDriveTypeA('%s\\' % drive_letter)
            result.append((drive_letter, drive_type))
    return result


# Test
if __name__ == '__main__':
    drive_info = get_drive_info()
    for drive_letter, drive_type in drive_info:
        print '%s = %s' % (drive_letter, DRIVE_TYPE_MAP[drive_type])
    removable_drives = [drive_letter for drive_letter, drive_type in drive_info if drive_type == DRIVE_REMOVABLE]
    print 'removable_drives = %r' % removable_drives
</snippet></ROW><ROW><id>17030773</id><snippet>C: = DRIVE_FIXED
D: = DRIVE_FIXED
E: = DRIVE_CDROM
removable_drives = []
</snippet></ROW><ROW><id>17030773</id><snippet>C: = DRIVE_FIXED
D: = DRIVE_FIXED
E: = DRIVE_CDROM
F: = DRIVE_REMOVABLE
removable_drives = ['F:']
</snippet></ROW><ROW><id>17030773</id><snippet>os.walk()</snippet></ROW><ROW><id>17030873</id><snippet>import re
from bs4 import BeautifulSoup

html = '''
&lt;div class="roundpic qrcode" data-height="80" data-text="bitcoin:1JL7kugm1vDLqyzrVPAPdcbjH3PTxcPcud?amount=0.0573" data-width="80" style="margin: auto"&gt;&lt;/div&gt;
&lt;div class="roundpic qrcode" data-height="160" data-text="bitcoin:1JL7kugm1vDLqyzrVPAPdcbjH3PTxcPcud?amount=0.0573" data-width="160" style="padding: 10px"&gt;&lt;/div&gt;
'''

soup = BeautifulSoup(html)

for div in soup.find_all('div', {'data-text': re.compile(r'^bitcoin:')}):
    address, amount = div.get('data-text').replace('bitcoin:', '').split('?amount=')
</snippet></ROW><ROW><id>17030873</id><snippet>soup.find_all('div', {'data-text': re.compile(r'^bitcoin:')})</snippet></ROW><ROW><id>17030873</id><snippet>&lt;div&gt;</snippet></ROW><ROW><id>17030873</id><snippet>data-text</snippet></ROW><ROW><id>17030873</id><snippet>bitcoin:</snippet></ROW><ROW><id>17030873</id><snippet>soup.find_all('div', {'data-text': lambda value: value.startswith('bitcoin:')})
</snippet></ROW><ROW><id>17030882</id><snippet>.text</snippet></ROW><ROW><id>17030882</id><snippet>&lt;div&gt;
    Hello
        &lt;div&gt;
            foobar
        &lt;/div&gt;
    world!
&lt;/div&gt;
</snippet></ROW><ROW><id>17030882</id><snippet>def extract_text(node):
    return ' '.join(t.strip() for t in node(text=True, recursive=False))
</snippet></ROW><ROW><id>17030882</id><snippet>In [27]: t = """
&lt;div&gt;
    Hello
        &lt;div&gt;
            foobar
        &lt;/div&gt;
    world!
&lt;/div&gt;"""

In [28]: soup = BeautifulSoup(t)

In [29]: map(extract_text, soup('div'))
Out[29]: [u'Hello world!', u'foobar']
</snippet></ROW><ROW><id>17030882</id><snippet>In [32]: t = """
&lt;div id = "div1"&gt;
 Text1
 &lt;div id="div2"&gt;
   Text2
   &lt;div id="div3"&gt;
    Text3
   &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;"""

In [33]: soup = BeautifulSoup(t)

In [34]: map(extract_text, soup('div'))
Out[34]: [u'Text1 ', u'Text2 ', u'Text3']
</snippet></ROW><ROW><id>17031214</id><snippet># import parser
import urllib.parse

manager = PoolManager()

# stringify your data
data = json.dumps(dict) #takes in a python dictionary of json

# base64 encode your data string
encdata = urllib.parse.urlencode(data)    

manager.request("POST", "https://myurlthattakesjson", encdata)
</snippet></ROW><ROW><id>17031590</id><snippet>alphaTest = soilModSplit 
</snippet></ROW><ROW><id>17031590</id><snippet>alphatest</snippet></ROW><ROW><id>17031590</id><snippet>soilModSplit</snippet></ROW><ROW><id>17031590</id><snippet>alphaTest = list(soilModSplit )
</snippet></ROW><ROW><id>17031665</id><snippet>blog_name</snippet></ROW><ROW><id>17031665</id><snippet>Http404</snippet></ROW><ROW><id>17031759</id><snippet>GoogleMaps.directions(origin, destination, **kwargs)</snippet></ROW><ROW><id>17031854</id><snippet>In [33]: int('4')
Out[33]: 4

In [34]: ord('\x34')
Out[34]: 52

In [35]: ord('4')
Out[35]: 52

In [36]: ord('\x10')
Out[36]: 16
</snippet></ROW><ROW><id>17031854</id><snippet>val = pack("i", 4)
print "%d" % ord(val[0]) # -&gt; 4
</snippet></ROW><ROW><id>17031854</id><snippet>print "%s" % hex(ord(val[0])) # -&gt; 0x4
</snippet></ROW><ROW><id>17032009</id><snippet>In [10]: text = '''ip=1.0.8.0 statistic=rtt.std_dev predictions=iad-mci:114.717204,ord-cgnt:30.107700,nyc-inap:32.537077,iad-cgnt:0.000000,hkg-pccw:98.157281,ord-tata:6.058292,sjc-l3:57.089664,nyc-cgnt:36.489616,pvg-cu2:1039.978803,bgl-rel:115.671650,nyc-bgp:94.454690,pvg-cu1:377.429628,las-level3:0.000000,nyc-tgl:119.197070,atl-inap:42.021698
ip=1.0.8.0 statistic=rtt.match_length predictions=iad-mci:13.000000,ord-cgnt:16.000000,nyc-inap:16.000000,iad-cgnt:20.000000,hkg-pccw:16.000000,ord-tata:16.000000,sjc-l3:16.000000,nyc-cgnt:16.000000,pvg-cu2:16.000000,bgl-rel:13.000000,nyc-bgp:16.000000,pvg-cu1:16.000000,las-level3:20.000000,nyc-tgl:16.000000,atl-inap:16.000000
ip=1.0.8.0 statistic=rtt.mean predictions=iad-mci:348.247084,ord-cgnt:319.301775,nyc-inap:328.353336,iad-cgnt:248.600000,hkg-pccw:452.789753,ord-tata:313.643350,sjc-l3:321.487964,nyc-cgnt:315.238098,pvg-cu2:312.502609,bgl-rel:352.945035,nyc-bgp:382.419130,pvg-cu1:332.139637,las-level3:177.400000,nyc-tgl:392.333887,atl-inap:325.668400
ip=1.0.8.0 statistic=rtt.age predictions=iad-mci:3066.160981,ord-cgnt:3366.161424,nyc-inap:4266.160056,iad-cgnt:49566.161227,hkg-pccw:5166.165995,ord-tata:3066.158230,sjc-l3:5466.160068,nyc-cgnt:3366.161192,pvg-cu2:5166.160410,bgl-rel:1566.160768,nyc-bgp:3666.159675,pvg-cu1:2766.160713,las-level3:251466.160789,nyc-tgl:3966.159966,atl-inap:4866.167164'''

In [13]: ip = '1.0.8.0'

In [14]: result = filter(lambda s: s.startswith('ip={0} statistic=rtt.mean predictions'.format(ip)), text.split('\n'))

In [15]: list(result)
Out[15]: ['ip=1.0.8.0 statistic=rtt.mean predictions=iad-mci:348.247084,ord-cgnt:319.301775,nyc-inap:328.353336,iad-cgnt:248.600000,hkg-pccw:452.789753,ord-tata:313.643350,sjc-l3:321.487964,nyc-cgnt:315.238098,pvg-cu2:312.502609,bgl-rel:352.945035,nyc-bgp:382.419130,pvg-cu1:332.139637,las-level3:177.400000,nyc-tgl:392.333887,atl-inap:325.668400']
</snippet></ROW><ROW><id>17032373</id><snippet>import Tkinter


class Values(Tkinter.Tk):
    """docstring for Values"""
    def __init__(self, parent):
        Tkinter.Tk.__init__(self,parent)
        self.parent = parent
        self.initialize()

    def initialize(self):
        self.grid()
        stepOne = Tkinter.LabelFrame(self, text=" 1. Enter Values ")
        stepOne.grid(row=0, columnspan=7, sticky='W',padx=5, pady=5, ipadx=5, ipady=5)
        self.Val1Lbl = Tkinter.Label(stepOne,text="Value 1")
        self.Val1Lbl.grid(row=0, column=0, sticky='E', padx=5, pady=2)
        self.Val1Txt = Tkinter.Entry(stepOne)
        self.Val1Txt.grid(row=0, column=1, columnspan=3, pady=2, sticky='WE')
        self.Val2Lbl = Tkinter.Label(stepOne,text="Value 2")
        self.Val2Lbl.grid(row=1, column=0, sticky='E', padx=5, pady=2)
        self.Val2Txt = Tkinter.Entry(stepOne)
        self.Val2Txt.grid(row=1, column=1, columnspan=3, pady=2, sticky='WE')

        self.val1 = None
        self.val2 = None

        SubmitBtn = Tkinter.Button(stepOne, text="Submit",command=self.submit)
        SubmitBtn.grid(row=4, column=3, sticky='W', padx=5, pady=2)

    def submit(self):
        self.val1=self.Val1Txt.get()
        if self.val1=="":
            Win2=Tkinter.Tk()
            Win2.withdraw()

        self.val2=self.Val2Txt.get()
        if self.val2=="":
            Win2=Tkinter.Tk()
            Win2.withdraw()

        self.quit()


if __name__ == '__main__':
    app = Values(None)
    app.title('Values')
    app.mainloop() #this will run until it closes
    #Print the stuff you want.
    print app.val1,app.val2
</snippet></ROW><ROW><id>17032525</id><snippet>list1.append((i for i in list2 if not i in list1).next())
</snippet></ROW><ROW><id>17032728</id><snippet># this is a generator (an iterable) which only outputs a 
# line containing "DNS" if it was requested in an iteration
# furthermore, the way i use a generator here is called "list comprehension"
dns_lines = ( line for line in open('/home/user/file','r') if "DNS" in line )

# the with-statement uses python's magic-methods to take care of 
# opening and closing the file
with open("output", 'w') as f:
    # enumerate works on generators
    # it enumerates each item that is iterated over
    # a tuple is returned (count, line)
    for count_line in enumerate(dns_lines):
        f.write("%d - %s" % (count_line))
</snippet></ROW><ROW><id>17032910</id><snippet>f = open('filename.exe', 'r+b') //'r+b' means read and write binary
</snippet></ROW><ROW><id>17033150</id><snippet>fus_d</snippet></ROW><ROW><id>17033150</id><snippet>fus_s</snippet></ROW><ROW><id>17033150</id><snippet>2013-01-01</snippet></ROW><ROW><id>17033150</id><snippet>2011</snippet></ROW><ROW><id>17033150</id><snippet>s = set(fus_d.keys())
s.update(fus_s.keys())
fu_list = [(k, fus_d.get(k), fus_s.get(k)) for k in s]
</snippet></ROW><ROW><id>17033164</id><snippet>IDs = [['TCONS_0040771', 1], ['TCONS_0040771', 2], ['TCONS_0040771', 3],
       ['TCONS_00040772', 1], ['TCONS_00040772', 2], ['TCONS_00040773', 1],
       ['TCONS_00040773', 2], ['TCONS_00040773', 3], ['TCONS_00040773', 4]]
sequences = ['AAA','AAB','AAAB','AAAA','BAA','BBA','BBB','CCC','DDD']
</snippet></ROW><ROW><id>17033164</id><snippet>last_id = IDs[0][0]
res = [sequences[0]]
for index, (id_, _) in enumerate(IDs[1:], 1):
    if id_ == last_id:
        res[-1] += sequences[index]
    else:
        res.append(sequences[index])
    last_id = id_
</snippet></ROW><ROW><id>17033164</id><snippet>res</snippet></ROW><ROW><id>17033164</id><snippet>['AAAAABAAAB', 'AAAABAA', 'BBABBBCCCDDD']
</snippet></ROW><ROW><id>17033196</id><snippet>while i &lt; whilevar</snippet></ROW><ROW><id>17033196</id><snippet>i</snippet></ROW><ROW><id>17033196</id><snippet>whilevar</snippet></ROW><ROW><id>17033196</id><snippet>raw_input</snippet></ROW><ROW><id>17033196</id><snippet>"int"</snippet></ROW><ROW><id>17033196</id><snippet>"str"</snippet></ROW><ROW><id>17033196</id><snippet>whilevar</snippet></ROW><ROW><id>17033196</id><snippet>int()</snippet></ROW><ROW><id>17033196</id><snippet>input()</snippet></ROW><ROW><id>17033196</id><snippet>to</snippet></ROW><ROW><id>17033293</id><snippet>try/except</snippet></ROW><ROW><id>17033293</id><snippet>try:
    @app.route('/oauth-authorized')
    @twitter.authorized_handler
    def oauth_authorized(resp):
        print 'foo-bar'
except WhateverError as e:
    print "twitter.authorized_handler raised an error", e
</snippet></ROW><ROW><id>17033293</id><snippet>oauth_authorized</snippet></ROW><ROW><id>17033293</id><snippet>except</snippet></ROW><ROW><id>17033293</id><snippet>@</snippet></ROW><ROW><id>17033293</id><snippet>authorized_handler</snippet></ROW><ROW><id>17033293</id><snippet>try/except</snippet></ROW><ROW><id>17033293</id><snippet>def oauth_authorized(resp):
    print 'foo-bar'
try:    # apply decorator
    oauth_authorized = twitter.authorized_handler(oauth_authorized)
except Exception as e:
    print "twitter.authorized_handler raised an error", e
else:   # no error decorating with authorized_handler, apply app.route
    oauth_authorized = app.route('/oauth-authorized')(oauth_authorized)
</snippet></ROW><ROW><id>17033293</id><snippet>authorized_handler</snippet></ROW><ROW><id>17033372</id><snippet>my_file = open("new.txt","r")
for myline in my_file:
    print(myline)
</snippet></ROW><ROW><id>17033372</id><snippet>my_file</snippet></ROW><ROW><id>17033372</id><snippet>line 1 = next(my_file)
</snippet></ROW><ROW><id>17033372</id><snippet>line 2 = next(my_file)
</snippet></ROW><ROW><id>17033372</id><snippet>for myline in my_file:
    # do something
</snippet></ROW><ROW><id>17033372</id><snippet> print(myline)
</snippet></ROW><ROW><id>17033372</id><snippet>print()</snippet></ROW><ROW><id>17033372</id><snippet>print(myline, end='')
</snippet></ROW><ROW><id>17033372</id><snippet>print myline,  # note the trailing comma.
</snippet></ROW><ROW><id>17033372</id><snippet>with</snippet></ROW><ROW><id>17033372</id><snippet>with open("new.txt", "r") as my_file:
    for myline in my_file:
        print(myline)
    # my_file is open here
# my_file is closed here
</snippet></ROW><ROW><id>17033372</id><snippet>with</snippet></ROW><ROW><id>17033465</id><snippet>$ tree
.
├── daemon.py
├── main.py
├── server.py
└──  __init__.py
</snippet></ROW><ROW><id>17033465</id><snippet>daemon.py</snippet></ROW><ROW><id>17033465</id><snippet>server.py</snippet></ROW><ROW><id>17033465</id><snippet>__init__.py</snippet></ROW><ROW><id>17033465</id><snippet>main.py</snippet></ROW><ROW><id>17033465</id><snippet>#!/usr/bin/env python

import sys, time, threading
from daemon import Daemon
from server import run_tornado, run_base_http_server

class ServerDaemon(Daemon):
    def run(self):
        threads = [
            threading.Thread(target=run_tornado),
            threading.Thread(target=run_base_http_server)
        ]

        for thread in threads:
            thread.start()
        for thread in threads:
            thread.join()

if __name__ == "__main__":
    daemon = ServerDaemon('/tmp/server-daemon.pid')

    if len(sys.argv) == 2:
        if 'start' == sys.argv[1]:
            daemon.start()          
        elif 'stop' == sys.argv[1]:
            daemon.stop()
        elif 'restart' == sys.argv[1]:
            daemon.restart()
        else:
            print "Unknown command"
            sys.exit(2)
        sys.exit(0)
    else:
        print "usage: %s start|stop|restart" % sys.argv[0]
        sys.exit(2)
</snippet></ROW><ROW><id>17033465</id><snippet>$ python main.py start
</snippet></ROW><ROW><id>17033465</id><snippet>
if __name__ == '__main__':</snippet></ROW><ROW><id>17033465</id><snippet>def myfun():</snippet></ROW><ROW><id>17033465</id><snippet>run()</snippet></ROW><ROW><id>17033465</id><snippet>Daemon</snippet></ROW><ROW><id>17033646</id><snippet>import numpy as np

r = 2 #matrix dimension
maxs = 5 #maximum sum of row/column

def generate(r, maxs):
    # We create an extra row and column for the starting "dummy" values. 
    # Filling in the matrix becomes much simpler when we do not have to treat cells with
    # one or two zero indices in special way. Thus, we start iteration from the
    # (1, 1) index. 

    m = np.zeros((r + 1, r + 1), dtype = np.int32)
    m[0] = m[:,0] = maxs + 1

    def go(n, i, j):
        # If we completely filled the matrix, yield a copy of the non-dummy parts.
        if (i, j) == (r, r):
            yield m[1:, 1:].copy()
            return

        # We compute the next indices in row major order (the choice is arbitrary).
        (i2, j2) = (i + 1, 1) if j == r else (i, j + 1)

        # Computing the maximum possible value for the current cell.
        max_val = min(
            maxs - m[i, 1:].sum(), 
            maxs - m[1:, j].sum(),
            m[i, j-1], 
            m[i-1, j])

        for n2 in xrange(max_val, -1, -1):
            m[i, j] = n2
            for matrix in go(n2, i2, j2):
                yield matrix

    return go(maxs, 1, 1) #note that this is a generator object

# testing 
for matrix in generate(r, maxs):
    print
    print matrix
</snippet></ROW><ROW><id>17033646</id><snippet>def generate(r, maxs):
    m = np.zeros((r + 1, r + 1), dtype = np.int32)
    rows = [0]*(r+1) # We avoid recomputing row/col sums on each cell.
    cols = [0]*(r+1)
    rows[0] = cols[0] = m[0, 0] = maxs

    def go(i, j):
        if (i, j) == (r, r):
            yield m[1:, 1:].copy()
            return

        (i2, j2) = (i + 1, 1) if j == r else (i, j + 1)

        max_val = min(rows[i-1] - rows[i], cols[j-1] - cols[j])

        if i == j: 
            max_val = min(max_val, m[i-1, j-1])
        if (i, j) != (1, 1):
            max_val = min(max_val, m[1, 1])

        for n in xrange(max_val, -1, -1):
            m[i, j] = n
            rows[i] += n
            cols[j] += n 
            for matrix in go(i2, j2):
                yield matrix
            rows[i] -= n
            cols[j] -= n 

    return go(1, 1) 
</snippet></ROW><ROW><id>17033659</id><snippet>L = ['iad-cgnt:248.600000,ord-cgnt:319.301775,iad-mci:331.185117,...pvg-cu1:38.750000']
{k: float(v) for k, v in (item.split(':') for item in L[0].split(','))}
</snippet></ROW><ROW><id>17033659</id><snippet>{'bgl-rel': 311.344224,
 'hkg-pccw': 452.789753,
 'iad-cgnt': 248.6,
 'iad-mci': 331.185117,
 'nyc-bgp': 382.41913,
 'nyc-cgnt': 332.477115,
 'nyc-inap': 316.122925,
 'ord-cgnt': 319.301775,
 'ord-tata': 243.0,
 'pvg-cu1': 38.75,
 'pvg-cu2': 40.912496,
 'sjc-l3': 321.487964}
</snippet></ROW><ROW><id>17033788</id><snippet>archive_id = vault.upload_archive("mybackup.tgz")
retrieve_job = vault.retrieve_archive(archive_id)

# if the job is in progress
job_id = retrieve_job.id
retrieve_job = vault.get_job(job_id)

if retrieve_job.completed:
    job.download_to_file("mybackup.tgz")
</snippet></ROW><ROW><id>17033788</id><snippet>notification_config = {'SNSTopic': 'my_notification_topic',
                       'Events': ['ArchiveRetrievalCompleted',
                                  'InventoryRetrievalCompleted']}
vault.set_vault_notifications(vault, notification_config)
</snippet></ROW><ROW><id>17033802</id><snippet>conditions = {}
if user filled search box 1:
     conditions['field1'] = seached_var
if user filled search box 2:
     conditions['field2'] = seached_var2

contents = contents.find(conditions)
</snippet></ROW><ROW><id>17033815</id><snippet>from django.db.models import Q

def related(self):
    'returns all related Fences'
    return FenceShip.objects.filter(fence_group=self)

def non_related(self):
    'returns all non-related Fences'
    return FenceShip.objects.filter(~Q(fence_group=self))

def fences(self):
    'returns a list of pairs: (fence, related) where related is True/False'
    return [(fence, bool(fence.fence_group==self)) for fence in FenceShip.objects.all()]
</snippet></ROW><ROW><id>17034147</id><snippet>open(config_path)
</snippet></ROW><ROW><id>17034147</id><snippet>open(config_path, encoding='utf-8')
</snippet></ROW><ROW><id>17034212</id><snippet>import urllib
import json

response = urllib.urlopen("http://sncf.mobi/infotrafic/iphoneapp/transilien/?gare=BEC")
if response.getcode() == 200:
    data = json.load(response)
    for train in data["D"]:
        print "Train number", train["numerotrain"], "code", train["codevoyageur"]
else:
    print "Failed to load data:", response.getcode()
</snippet></ROW><ROW><id>17034321</id><snippet>.sublime-settings</snippet></ROW><ROW><id>17034321</id><snippet>env</snippet></ROW><ROW><id>17034321</id><snippet>path</snippet></ROW><ROW><id>17034321</id><snippet>.sublime-build</snippet></ROW><ROW><id>17034419</id><snippet>getch</snippet></ROW><ROW><id>17034419</id><snippet># Do Something #</snippet></ROW><ROW><id>17034419</id><snippet>getch</snippet></ROW><ROW><id>17034419</id><snippet>select</snippet></ROW><ROW><id>17034419</id><snippet>TCSADRAIN</snippet></ROW><ROW><id>17034419</id><snippet>setraw</snippet></ROW><ROW><id>17034419</id><snippet>ICANON</snippet></ROW><ROW><id>17034419</id><snippet>import select
import sys
import termios
import time
import tty

def getch():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    new_settings = old_settings[:]
    new_settings[3] ~= ~termios.ICANON
    try:
        termios.tcsetattr(fd, termios.TCSANOW, new_settings)
        ch=sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSANOW, old_settings)
    return ch

while True:
    ch = getch()
    if ch == '\x03':
        break
    print "Queue: " + ch
    time.sleep(1)
</snippet></ROW><ROW><id>17034419</id><snippet>aQueue: a
bcdefgQueue: b
Queue: c
Queue: d
Queue: e
Queue: f
Queue: g
^CTraceback (most recent call last):
  File "getch.py", line 24, in &lt;module&gt;
    ch = getch()
  File "getch.py", line 16, in getch
    ch=sys.stdin.read(1)
KeyboardInterrupt
</snippet></ROW><ROW><id>17034419</id><snippet>termios</snippet></ROW><ROW><id>17034419</id><snippet>new_settings[-1][termios.VTIME] = 20
new_settings[-1][termios.VMIN] = 0
</snippet></ROW><ROW><id>17034419</id><snippet>aQueue: a
bcdQueue: b
Queue: c
Queue: d
Queue: 
Queue: 
^CTraceback (most recent call last):
  File "getch.py", line 30, in &lt;module&gt;
    time.sleep(1)
KeyboardInterrupt
</snippet></ROW><ROW><id>17034419</id><snippet>termios</snippet></ROW><ROW><id>17034419</id><snippet>setraw</snippet></ROW><ROW><id>17034419</id><snippet>import sys, termios, tty

fd = sys.stdin.fileno()
o = termios.tcgetattr(fd)
tty.setraw(fd)
n = termios.tcgetattr(fd)
tcsetattr(fd, termios.TCSANOW, o)

print('iflag : {:10x} {:10x}'.format(o[0], n[0]))
print('oflag : {:10x} {:10x}'.format(o[1], n[1]))
print('cflag : {:10x} {:10x}'.format(o[2], n[2]))
print('lflag : {:10x} {:10x}'.format(o[3], n[3]))
print('ispeed: {:10d} {:10d}'.format(o[4], n[4]))
print('ospeed: {:10d} {:10d}'.format(o[5], n[5]))
print('cc    :')
for i, (oo, nn) in enumerate(zip(o[6], n[6])):
    print('  {:4d}: {:&gt;10} {:&gt;10}'.format(i, oo, nn))
</snippet></ROW><ROW><id>17034419</id><snippet>termios</snippet></ROW><ROW><id>17034419</id><snippet>/usr/include/sys/termios.h</snippet></ROW><ROW><id>17034483</id><snippet>key == 'kv1'</snippet></ROW><ROW><id>17034483</id><snippet>kv</snippet></ROW><ROW><id>17034483</id><snippet>input</snippet></ROW><ROW><id>17034483</id><snippet>kv1</snippet></ROW><ROW><id>17034483</id><snippet>result</snippet></ROW><ROW><id>17034483</id><snippet>dict</snippet></ROW><ROW><id>17034483</id><snippet>result[key] += int(value)</snippet></ROW><ROW><id>17034483</id><snippet>result[key] = int(value)</snippet></ROW><ROW><id>17034483</id><snippet>input = 'num=123-456-7890&amp;kv1=1&amp;kv2=12&amp;kv3=0'
keys = {k: v for k, v in [i.split('=') for i in input.split('&amp;')]}

print keys # {'num': '123-456-7890', 'kv2': '12', 'kv1': '1', 'kv3': '0'}

result = {}
for key, value in keys.items():
    if key == 'kv1':

        # if you need to increase result['kv1']
        _value = result[key] + int(value) if key in result else int(value)
        result[key] = _value

        # if you need to set result['kv1']
        result[key] = int(value)

print result # {'kv1': 1}
</snippet></ROW><ROW><id>17034483</id><snippet>num=123-456-7890&amp;kv1=2&amp;kv2=12&amp;kv3=0
num=123-456-7891&amp;kv1=1&amp;kv2=12&amp;kv3=0
num=123-456-7892&amp;kv1=4&amp;kv2=12&amp;kv3=0
</snippet></ROW><ROW><id>17034483</id><snippet>def get_key(data, key):
    keys = {k: v for k, v in [i.split('=') for i in data.split('&amp;')]}
    for k, v in keys.items():
        if k == key: return int(v)
    return None

results = []

for line in [line.strip() for line in open('filename', 'r')]:
    value = get_key(line, 'kv1')
    if value:
        results.append({'kv1': value})

print results # could be [{'kv1': 2}, {'kv1': 1}, {'kv1': 4}] 
</snippet></ROW><ROW><id>17034483</id><snippet>string</snippet></ROW><ROW><id>17034483</id><snippet>with open('filename', 'r') as f: data = f.read()

keys = {k: v for k, v in [i.split('=') for i in data.split('&amp;')]}

result = {}
for key, value in keys.items():
    if key == 'kv1':
        result[key] = int(value)
</snippet></ROW><ROW><id>17034483</id><snippet>c:\nathan\python\bnutils&gt;python
Python 2.7.5 (default, May 15 2013, 22:44:16) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def get_key(data, key):
...     keys = {k: v for k, v in [i.split('=') for i in data.split('&amp;')]}
...     for k, v in keys.items():
...         if k == key: return int(v)
...     return None
...
&gt;&gt;&gt; results = []
&gt;&gt;&gt; for line in [line.strip() for line in open('test.txt', 'r')]:
...     value = get_key(line, 'kv1')
...     if value:
...         results.append({'kv1': value})
...
&gt;&gt;&gt; print results
[{'kv1': 2}, {'kv1': 1}, {'kv1': 4}]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>17034483</id><snippet>num=123-456-7890&amp;kv1=2&amp;kv2=12&amp;kv3=0
num=123-456-7891&amp;kv1=1&amp;kv2=12&amp;kv3=0
num=123-456-7892&amp;kv1=4&amp;kv2=12&amp;kv3=0
</snippet></ROW><ROW><id>17034665</id><snippet>import json, string

def to_json(file):
    data = {}
    for line in open(file):
        fields = map(string.strip, line.split(','))
        categories = data.get(fields[1], {})
        tags = categories.get(fields[2], [])
        tags.append(fields[0])
        categories[fields[2]] = tags
        data[fields[1]] = categories
    return json.dumps(data)

print to_json('data.csv')
</snippet></ROW><ROW><id>17034665</id><snippet>{"Markets": {"Stores": ["Ex5"]}, "Education": {"Schools": ["Ex3"], "Books": ["Ex1", "Ex4"]}, "Transportation": {"Bus": ["Ex2"]}}
</snippet></ROW><ROW><id>17034837</id><snippet>Q = om.MQuaternion(1.0,2.0,3.0,4.0)
print Q.x, Q.y, Q.z, Q.w
Q.conjugateIt()
print Q.x, Q.y, Q.z, Q.w
print "----"
P = om.MQuaternion(6,6,6,6)
print P.x, P.y, P.z, P.w

# 1.0 2.0 3.0 4.0
# -1.0 -2.0 -3.0 4.0
# ----
# 6.0 6.0 6.0 6.0
</snippet></ROW><ROW><id>17034987</id><snippet>sys.excepthook</snippet></ROW><ROW><id>17034987</id><snippet>code</snippet></ROW><ROW><id>17035039</id><snippet>try:
  wait.until(lambda driver: driver.find_element_by_partial_link_text('Ticket Request'))
except: 
  print "Did not find the element, I can now do what I want"
  #break #if you really want to break out of something
</snippet></ROW><ROW><id>17035075</id><snippet>data = [[.25 for numData in range(4)] for numSecs in range(86400)]
length_line=0

def write_line(f, sec, data):
    line="{:6d}".format(sec) + " " +" ".join(
            ["{:.2f}".format(dd) for dd in data])+"\n"
    f.write(line)
    return len(line)

with open('output', 'w') as of:
    for i,d in enumerate(data):
        length_line=write_line(of, i, d)

with open('output', 'rb+') as of:
    # modify the 2nd line:
    n = 2
    of.seek(n*length_line)
    write_line(of, n, [0.10,0.10,0.10,0.10])
    # modify the 10th line:
    n = 10
    of.seek(n*length_line)
    write_line(of, n, [0.10,0.10,0.10,0.10])
</snippet></ROW><ROW><id>17035137</id><snippet>for k in t:
    try:
        return k, dic[k]
    except KeyError:
        pass
</snippet></ROW><ROW><id>17035137</id><snippet>None</snippet></ROW><ROW><id>17035137</id><snippet>for k in t:
    res = dic.get(k)
    if res is not None:
        return k, res
</snippet></ROW><ROW><id>17035166</id><snippet>enctype</snippet></ROW><ROW><id>17035166</id><snippet>multipart/form-data</snippet></ROW><ROW><id>17035166</id><snippet>&lt;form action="profiles.py" method="post" enctype="multipart/form-data"&gt;
</snippet></ROW><ROW><id>17035395</id><snippet>aminoacidos</snippet></ROW><ROW><id>17035395</id><snippet>ucuuuc</snippet></ROW><ROW><id>17035395</id><snippet>ucu</snippet></ROW><ROW><id>17035395</id><snippet>Suuc</snippet></ROW><ROW><id>17035395</id><snippet>cuu</snippet></ROW><ROW><id>17035395</id><snippet>uLuc</snippet></ROW><ROW><id>17035395</id><snippet># I'd choose a better variable name
dicionario = {'uuu':'F', 'uuc':'F','uua':'L', 'uug':'L', 'cuu':'L', 'cuc':'L', 'cua':'L', 'cug':'L', 'auu':'I', 'auc':'I', 'aua':'I', 'aug':'M', 'guu':'V', 'guc':'V', 'gua':'V', 'gug':'V', 'ucu':'S', 'ucc':'S', 'uca':'S', 'ucg':'S', 'ccu':'P', 'ccc':'P', 'cca':'P', 'ccg':'P', 'acu':'T', 'acc':'T', 'aca':'T', 'acg':'T', 'gcu':'A', 'gcu':'A', 'gcc':'A', 'gca':'A', 'gcg':'A', 'uau':'T', 'uac':'T', 'uaa':'*', 'uag':'*', 'cau':'H', 'cac':'H', 'caa':'G', 'cag':'G', 'aau':'N', 'aac':'N', 'aaa':'K', 'aag':'K', 'gau':'D', 'gac':'D', 'gaa':'E', 'gag':'E', 'ugu':'C', 'ugc':'C', 'uga':'*', 'ugg':'W', 'cgu':'R', 'cgc':'R', 'cga':'R', 'cgg':'R', 'agu':'S', 'agc':'S', 'aga':'R', 'agg':'R', 'ggu':'G', 'ggc':'G', 'gga':'G', 'ggg':'G'}

def converteRNAmParaAminoacidos(rna):
    aminoacidos = ''

    for i in range(0, len(rna), 3):
        aminoacidos += dicionario[rna[i:i + 3]]

    return aminoacidos
</snippet></ROW><ROW><id>17035395</id><snippet>def converteRNAmParaAminoacidos(rna):
    return ''.join([dicionario[rna[i:i + 3]] for i in range(0, len(rna), 3])
</snippet></ROW><ROW><id>17035566</id><snippet>@view_config(route_name='home', permission=pyramid.security.NO_PERMISSION_REQUIRED)
def open_view(request):
    # ...
</snippet></ROW><ROW><id>17035727</id><snippet>socket.sendto(bytes(number), client_address)
</snippet></ROW><ROW><id>17035727</id><snippet>socket.sendto(str(number).encode('utf-8'), client_address)
</snippet></ROW><ROW><id>17035727</id><snippet>&gt;&gt;&gt; bytes(3)
b'\x00\x00\x00'
&gt;&gt;&gt; str(3)
'3'
&gt;&gt;&gt; str(3).encode('utf')
b'3'
</snippet></ROW><ROW><id>17035727</id><snippet>&gt;&gt;&gt; int(bytes(3))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ValueError: invalid literal for int() with base 10: ''
</snippet></ROW><ROW><id>17035741</id><snippet>[1, 2, 3, 4]</snippet></ROW><ROW><id>17035741</id><snippet>[3, 4, 5, 6]</snippet></ROW><ROW><id>17035741</id><snippet>[3, 4, 7, 8]</snippet></ROW><ROW><id>17035741</id><snippet>[1, 2]</snippet></ROW><ROW><id>17035741</id><snippet>[5, 6]</snippet></ROW><ROW><id>17035741</id><snippet>[7, 8]</snippet></ROW><ROW><id>17035741</id><snippet>from itertools import chain

A_1 = [1, 2, 3, 4]
A_2 = [3, 4, 5, 6]
A_3 = [3, 4, 7, 8]

# Collect the input lists for use with chain below
all_lists = [A_1, A_2, A_3]

for A in (A_1, A_2, A_3):
  # Combine all the lists into one
  super_list = list(chain(*all_lists))
  # Remove the items from the list under consideration
  for x in A:
    super_list.remove(x)
  # Get the unique items remaining in the combined list
  super_set = set(super_list)
  # Compute the unique items in this list and print them
  uniques = set(A) - super_set
  print(sorted(uniques))
</snippet></ROW><ROW><id>17035836</id><snippet>articletext = hxs.select("//span[@id='articleText']/p[position()&gt;2]")
</snippet></ROW><ROW><id>17035836</id><snippet>&lt;p&gt;</snippet></ROW><ROW><id>17035836</id><snippet>&lt;p&gt;&lt;span class="articleLocation"&gt;NEW YORK&lt;/span&gt; (Reuters) - Ba
track of finances, shopping and searching for jobs are the mai
et users around the globe, according to a new international 
survey.&lt;/p&gt;

&lt;p&gt;Nearly 60 percent of people in 24 countries used the web to
account and other financial assets in the past 90 days, making
ar use of the Internet.&lt;/p&gt;

&lt;p&gt;Shopping was not far behind at 48 percent, the Ipsos poll fo
 and 41 percent went online in search of a job.&lt;/p&gt;
&lt;p&gt;"It is easy. You can do it any time of the day and most of t
on't have fees," said Keren Gottfried, research manager for Ips
Affairs, about banking online.&lt;/p&gt;
</snippet></ROW><ROW><id>17035929</id><snippet>subprocess.call(["matlab", "-nosplash", "-nodesktop", "-r", "command1;command2;"], shell=True, stdin=subprocess.PIPE, stout=subprocess.PIPE)
</snippet></ROW><ROW><id>17036037</id><snippet>var[i]['text'] = var[i]['text'].replace('\n', '')
</snippet></ROW><ROW><id>17036156</id><snippet>number=int(raw_input("enter the number:"))
power=2
root=0

for power in range(6):
    while root**power &lt; abs(number):
        root=root+1
        if root**power == abs(number):
            if number &lt; 0:
                if power % 2 == 1:  # Note a change here, 
                                    # you won't get negative number with even power
                    root = -root
                    print 'root=',root
                    print 'power=',power
                    break
            else:
                print 'root=',root
                print 'power=',power
                break
    if root**power == number:  # Make sure we break "for" too
        break
else:
    print "No such number"
</snippet></ROW><ROW><id>17036323</id><snippet>django-admin.py startproject mysite</snippet></ROW><ROW><id>17036355</id><snippet>enumerate()</snippet></ROW><ROW><id>17036355</id><snippet>def GiveAsciiChart5():
    vals = [(value, chr(value)) for value in range(32, 127)]
    for i, (v, c) in enumerate(vals):
        print " |ASCII Value|: ", "|", v, "|", " |Character|: ", "|", c, "|",
        if not i % 4:
            print "\n",
</snippet></ROW><ROW><id>17036355</id><snippet>enumerate()</snippet></ROW><ROW><id>17036358</id><snippet>e=0

def a():
   global e
   e=1

def b():
   global e
   e=2

def c():
   global e
   e=3

l=[a,b,c]

l[2]()
print e
l[0]()
print e
</snippet></ROW><ROW><id>17036358</id><snippet>&gt;&gt;&gt; 
3
1
</snippet></ROW><ROW><id>17036484</id><snippet>img</snippet></ROW><ROW><id>17036484</id><snippet>a</snippet></ROW><ROW><id>17036484</id><snippet>driver.find_element_by_xpath("//img[contains(@src, 'arrow-orange-right.png')]/parent::a")  
</snippet></ROW><ROW><id>17036484</id><snippet>//img[contains(@src, 'arrow-orange-right.png')]/parent::a
//img[contains(@src, 'arrow-orange-right.png')]/..
</snippet></ROW><ROW><id>17036484</id><snippet>/assets/images/icons/arrow-orange-right.png</snippet></ROW><ROW><id>17036484</id><snippet>//img[@src='/assets/images/icons/arrow-orange-right.png']/..
</snippet></ROW><ROW><id>17036523</id><snippet>class File</snippet></ROW><ROW><id>17036523</id><snippet>ForeignKeyField</snippet></ROW><ROW><id>17036523</id><snippet>CharField</snippet></ROW><ROW><id>17036523</id><snippet>File(**value)</snippet></ROW><ROW><id>17036523</id><snippet>for value in collectionFiles:
    identifier = value['identifier']
    name = value['name']
    collection_entity = Collection.objects.filter(identifier=identifier).get()
    File(identifier=collection_entity, name=name).save()
</snippet></ROW><ROW><id>17036589</id><snippet>def print_dict(d, current_depth=1):
    for k, v in d.items():
        if isinstance(v, dict):
            print '-' * current_depth + str(k)
            print_dict(v, current_depth + 1)
        else:
            print '-' * current_depth + str(k) + ':' + str(v)
</snippet></ROW><ROW><id>17036589</id><snippet>&gt;&gt;&gt; print_dict(mdr)
-main
--lm
--l
--sm
---testm
----test1:test
----test2:test
</snippet></ROW><ROW><id>17036589</id><snippet>OrderedDict</snippet></ROW><ROW><id>17036589</id><snippet>dict</snippet></ROW><ROW><id>17036589</id><snippet>dict</snippet></ROW><ROW><id>17036589</id><snippet>isinstance(v, dict)</snippet></ROW><ROW><id>17036589</id><snippet>OrderedDict</snippet></ROW><ROW><id>17037077</id><snippet>collections.defaultdict</snippet></ROW><ROW><id>17037077</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; lis = [['Jan', 'Jim'], ['Feb', 'Maggie'], ['Jan', 'Chris'], ['Sept', 'Joey'],['key', 'value']]
&gt;&gt;&gt; dic = defaultdict(list)
&gt;&gt;&gt; for k, v in lis:
...     dic[k].append(v)

&gt;&gt;&gt; dic['Jan']
['Jim', 'Chris']
&gt;&gt;&gt; dic['Feb']
['Maggie']
&gt;&gt;&gt; dic['Sept']
['Joey']
</snippet></ROW><ROW><id>17037295</id><snippet>&gt;&gt;&gt; from datetime import datetime

&gt;&gt;&gt; time_string = "[15/Apr/2013:23:55:00 +0530]"

&gt;&gt;&gt; format = "[%d/%b/%Y:%H:%M:%S %z]"
&gt;&gt;&gt; dt = datetime.strptime(time_string, format)
&gt;&gt;&gt; dt
datetime.datetime(2013, 4, 15, 23, 55, tzinfo=datetime.timezone(datetime.timedelta(0, 19800)))

# Accessing the time as an object:
&gt;&gt;&gt; the_time = dt.time()
&gt;&gt;&gt; the_time
datetime.time(23, 55)

# Accessing the time as a string:
&gt;&gt;&gt; the_time.strftime("%H:%M:%S")
'23:55:00'
</snippet></ROW><ROW><id>17037295</id><snippet>&gt;&gt;&gt; time_string = "[15/Apr/2013:23:55:00 +0530]"
&gt;&gt;&gt; time_string[-15:-7]
'23:55:00'
</snippet></ROW><ROW><id>17037377</id><snippet>my_list = ['a', 'b', 'c', 'd', 'e']
for my_need in my_list:
   print my_need
</snippet></ROW><ROW><id>17037377</id><snippet>&gt;&gt;&gt; my_list = ['a', 'b', 'c', 'd', 'e']
&gt;&gt;&gt; my_need = []
&gt;&gt;&gt; for item in my_list:
...     my_need.append(item)
...     
&gt;&gt;&gt; my_need
['a', 'b', 'c', 'd', 'e']
</snippet></ROW><ROW><id>17037532</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>17037532</id><snippet>import collections

# I used variable "input" to hold the string from your example .tsv contents;
# you'd really want to read it in from a file.

D = collections.OrderedDict()
for line in input.splitlines():
    key, value = line.split('\t')
    if key not in D:
        D[key] = []
    D[key].append(value.strip())

for key, values in D.items():
    print(key, ','.join(values), sep='\t')
</snippet></ROW><ROW><id>17037532</id><snippet>Actrius 1990s drama films,Catalan language films,Spanish films,Barcelona in fiction,Films directed by Ventura Pons,1996 films
An_American_in_Paris    Compositions by George Gershwin,Symphonic poems,Grammy Hall of Fame Award recipients
</snippet></ROW><ROW><id>17037567</id><snippet>return [[ m[row][col] for col in range(0,width) ] for row in range(0,height) ]
</snippet></ROW><ROW><id>17037567</id><snippet>[[1,2,3],
[4,5,6],
[7,8,9]]
</snippet></ROW><ROW><id>17037567</id><snippet>[[1,4,7],
[2,5,8],
[3,6,9]]
</snippet></ROW><ROW><id>17037567</id><snippet>return [[ m[row][col] for row in range(0,height) ] for col in range(0,width) ]
</snippet></ROW><ROW><id>17037843</id><snippet>python setup.py install
</snippet></ROW><ROW><id>17037843</id><snippet>where python
</snippet></ROW><ROW><id>17037843</id><snippet>/full_path/python setup.py install
</snippet></ROW><ROW><id>17037876</id><snippet>&gt;&gt;&gt; [1,2,3][-1]   # working 
3
&gt;&gt;&gt; [1,2,3][-2]   # working 
2
&gt;&gt;&gt; [1,2,3][-3]   # working 
1
&gt;&gt;&gt; [1,2,3][-4]   # exception as in your code 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: list index out of range
</snippet></ROW><ROW><id>17037876</id><snippet>0</snippet></ROW><ROW><id>17037876</id><snippet>1</snippet></ROW><ROW><id>17037876</id><snippet>n-1</snippet></ROW><ROW><id>17037876</id><snippet>-n</snippet></ROW><ROW><id>17037876</id><snippet>-(n-1)</snippet></ROW><ROW><id>17037876</id><snippet>–1</snippet></ROW><ROW><id>17037876</id><snippet>import sys
# main()    
if __name__ == "__main__":
    print len(sys.argv)
    print sys.argv[-1], sys.argv[-2], sys.argv[-3]
    print sys.argv[0],  sys.argv[1], sys.argv[2]
</snippet></ROW><ROW><id>17037876</id><snippet>$ python main.py one two 
3
two one main.py
main.py one two
</snippet></ROW><ROW><id>17037876</id><snippet>argv[-1]</snippet></ROW><ROW><id>17037876</id><snippet>two</snippet></ROW><ROW><id>17037956</id><snippet>log1 = [line.replace(',', '').split() for line in open('test1.txt', 'r')][:]
log2 = [line.replace(',', '').split() for line in open('test2.txt', 'r')][1:]
log3 = [] # need for combining.
</snippet></ROW><ROW><id>17037956</id><snippet/></ROW><ROW><id>17037956</id><snippet># First, get the tests from the second log.
tests = {}
for line in log2:
    test = line[3] # test number
    if test not in tests:
        tests[test] = {'times': []}

    tests[test]['times'].append(line[5]) # test time
</snippet></ROW><ROW><id>17037956</id><snippet>for line in log1:
    test = line[4].split('-')[1] # changes test-#### to ####
    if test in tests:
        tests[test].update({
            'thread': line[1],
            'run':    line[3],
            'url':    line[6],
            'times':  ', '.join(tests[test]['times'])
        })
</snippet></ROW><ROW><id>17037956</id><snippet>dict</snippet></ROW><ROW><id>17037956</id><snippet>for key, test in tests.iteritems():

    line = '{thread} [ {run}, test-{key} ]: {url} = [{times}]\n'
    line = line.format(thread=test['thread'], run=test['run'], key=key,
        url=test['url'], times=test['times'])

    log3.append(line)

with open('log3.txt', 'a') as f:
    f.write(''.join(log3))
</snippet></ROW><ROW><id>17038181</id><snippet>&gt;&gt;&gt; import itertools
&gt;&gt;&gt; lst = [1,1,1]
&gt;&gt;&gt; for xs in itertools.product([1,-1], repeat=len(lst)):
...     print([a*b for a,b in zip(lst, xs)])
... 
[1, 1, 1]
[1, 1, -1]
[1, -1, 1]
[1, -1, -1]
[-1, 1, 1]
[-1, 1, -1]
[-1, -1, 1]
[-1, -1, -1]
</snippet></ROW><ROW><id>17038485</id><snippet>regex</snippet></ROW><ROW><id>17038485</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs = "foo\tbar\t\tspam"
&gt;&gt;&gt; re.split(r'\t+', strs)
['foo', 'bar', 'spam']
</snippet></ROW><ROW><id>17038485</id><snippet>str.rstrip</snippet></ROW><ROW><id>17038485</id><snippet>'\t'</snippet></ROW><ROW><id>17038485</id><snippet>&gt;&gt;&gt; yas = "yas\t\tbs\tcda\t\t"
&gt;&gt;&gt; re.split(r'\t+', yas.rstrip('\t'))
['yas', 'bs', 'cda']
</snippet></ROW><ROW><id>17038658</id><snippet>your_list.sort(key = lambda x : x.anniversary_score)
</snippet></ROW><ROW><id>17038658</id><snippet>import operator
your_list.sort(key=operator.attrgetter('anniversary_score'))
</snippet></ROW><ROW><id>17039049</id><snippet>sparse.kron</snippet></ROW><ROW><id>17039049</id><snippet>numpy.kron</snippet></ROW><ROW><id>17039484</id><snippet>str.split</snippet></ROW><ROW><id>17039484</id><snippet>list comprehension</snippet></ROW><ROW><id>17039484</id><snippet>with open('data.txt') as f:
   lis = [int(line.split()[0]) for line in f]
&gt;&gt;&gt; lis
[12, 13, 14, 15, 16, 17, 18]
</snippet></ROW><ROW><id>17039484</id><snippet>&gt;&gt;&gt; with open('abc') as f:
       lis = [line.split()[0] for line in f]
&gt;&gt;&gt; lis
['12', '13', '14', '15', '16', '17', '18']
</snippet></ROW><ROW><id>17039484</id><snippet>&gt;&gt;&gt; with open('abc') as f:     #Always use with statement for handling files
...     lis = []
...     for line in f:         # for loop on file object returns one line at a time
...         spl = line.split() # split the line at whitespaces, str.split returns a list
...         lis.append(spl[0]) # append the first item to the output list, use int() get an integer
...     print lis    
...     
['12', '13', '14', '15', '16', '17', '18']
</snippet></ROW><ROW><id>17039484</id><snippet>str.split</snippet></ROW><ROW><id>17039484</id><snippet>&gt;&gt;&gt; strs = "a b c d ef gh i"
&gt;&gt;&gt; strs.split() 
['a', 'b', 'c', 'd', 'ef', 'gh', 'i']
&gt;&gt;&gt; print str.split.__doc__
S.split([sep [,maxsplit]]) -&gt; list of strings

Return a list of the words in the string S, using sep as the
delimiter string.  If maxsplit is given, at most maxsplit
splits are done. If sep is not specified or is None, any
whitespace string is a separator and empty strings are removed
from the result.
</snippet></ROW><ROW><id>17039719</id><snippet>reader.fieldnames = "email", "name", "id",  "phone"
</snippet></ROW><ROW><id>17040022</id><snippet>plot_date</snippet></ROW><ROW><id>17040022</id><snippet>datetime</snippet></ROW><ROW><id>17040022</id><snippet>from datetime import datetime

for line in lines:
    p = line.split()
    xv.append(datetime.strptime(p[0], '%H:%M:%S'))

fig, ax = plt.subplots()
ax.plot_date(xv, yv)
</snippet></ROW><ROW><id>17040022</id><snippet>linestyle</snippet></ROW><ROW><id>17040022</id><snippet>ax.plot_date(xv, yv, linestyle='-')
</snippet></ROW><ROW><id>17040188</id><snippet>// kinda pseudo code, sorry
import regex
yourString = your_string_in_hindi
words = yourString.split(" ")
for word in words:
    if not regex.match(HINDI_WORD_REGEX, word):
        // whatever you want to do
</snippet></ROW><ROW><id>17040316</id><snippet>split</snippet></ROW><ROW><id>17040316</id><snippet>tuple</snippet></ROW><ROW><id>17040316</id><snippet>def is_recent(version):
    version_as_ints = (int(x) for x in version.split('.'))
    return tuple(version_as_ints) &gt; (1, 18, 10)
</snippet></ROW><ROW><id>17040316</id><snippet>is_recent("1.10.11")</snippet></ROW><ROW><id>17040316</id><snippet>is_recent("1.18.12")</snippet></ROW><ROW><id>17040579</id><snippet>django.core.management.call_command</snippet></ROW><ROW><id>17040738</id><snippet>Tree.up(trees[0]) = Tree.nil
</snippet></ROW><ROW><id>17040738</id><snippet>trees[0].up</snippet></ROW><ROW><id>17040738</id><snippet>nil</snippet></ROW><ROW><id>17040738</id><snippet>up(trees[0]) == nil</snippet></ROW><ROW><id>17040738</id><snippet>s = Solver()

s.add(
  Tree.up(trees[0]) == Tree.nil,
  Tree.left(trees[0]) == trees[1],
  Tree.right(trees[0]) == trees[2],
  Tree.up(trees[1]) == trees[0],
  Tree.up(trees[2]) == trees[0]
)

print s.check() # sat -&gt; your constraints are satisfiable
</snippet></ROW><ROW><id>17040738</id><snippet>trees[1].up.left != trees[1]</snippet></ROW><ROW><id>17040738</id><snippet>trees[1].up.left = trees[2]</snippet></ROW><ROW><id>17040738</id><snippet>trees[1] != trees[2]</snippet></ROW><ROW><id>17040738</id><snippet>s.add(
  trees[1] != trees[2],
  Tree.left(Tree.up(trees[1])) == trees[2]
)

print s.check() # unsat
</snippet></ROW><ROW><id>17040738</id><snippet>Tree</snippet></ROW><ROW><id>17040738</id><snippet>Tree.up(nil) == someTree</snippet></ROW><ROW><id>17040738</id><snippet>t1 != t2</snippet></ROW><ROW><id>17040738</id><snippet>left(t1) == right(t1) == nil</snippet></ROW><ROW><id>17040738</id><snippet>t2</snippet></ROW><ROW><id>17040738</id><snippet>up(nil) == t1</snippet></ROW><ROW><id>17040738</id><snippet>up(nil) == t2</snippet></ROW><ROW><id>17040784</id><snippet>&gt;&gt;&gt; dict1 = {"b":"1", "a":"2", "d":"", "c":"3"}
&gt;&gt;&gt; [v for k, v in sorted(dict1.items()) if v]
['2', '1', '3']
</snippet></ROW><ROW><id>17040784</id><snippet>&gt;&gt;&gt; [v for k, v in sorted(x for x in dict1.items() if x[1])]
['2', '1', '3']
</snippet></ROW><ROW><id>17041094</id><snippet>...
a = Label(root, text=time.strftime('%H:%M:%S'))
def update_time():
    a['text'] = time.strftime('%H:%M:%S')
    root.after(1000, update_time)
root.after(1000, update_time)
a.grid(row=3, column=1)
...
</snippet></ROW><ROW><id>17041221</id><snippet>db.adminCommand("listDatabases").databases.forEach( function (d) {
  if (d.name != "admin" &amp;&amp; d.name != "config")
     db.getSiblingDB(d.name).dropDatabase();
})
</snippet></ROW><ROW><id>17041502</id><snippet>commit/@revision</snippet></ROW><ROW><id>17041502</id><snippet>import os
import os.path
import sys
import lxml.etree

if len(sys.argv) == 2:
    in_filename = str(sys.argv[1])
    if os.path.isfile (in_filename):
        for ent in lxml.etree.parse (in_filename).iter ('entry'):
            get = ent.xpath
            if ent.get ("kind") == "file":
                log_filename = get ('string(name)')
                log_revision = get('string(commit/@revision)') # Fixed ;)
                log_date = get ('string(commit/date)')
                print('{0},{1},{2}'.format(log_revision,log_date[:10],log_filename))
</snippet></ROW><ROW><id>17041645</id><snippet>3.0.</snippet></ROW><ROW><id>17041766</id><snippet>from collections import OrderedDict

D = OrderedDict()

with open("fin.txt") as fin:
    for line in fin:
        if line.isspace():   # Guard against empty lines
            continue
        molecule, sep, activity = line.partition(" ")
        activity = float(activity)
        if molecule in D:
            if activity &gt; D[molecule]:
                D[molecule] = activity
                D.move_to_end(molecule)
        else:
            d[molecule] = activity
</snippet></ROW><ROW><id>17041960</id><snippet>os.walk</snippet></ROW><ROW><id>17041960</id><snippet>top="."
import os
for root, dirs, files in os.walk(top):
    for name in files:
        # do something with each file as 'name' (a)
        pass
    for name in dirs:
        # do something with each subdir as 'name' (b)
        pass
    # do something with root (dir path so far)
    # break at any point if necessary
</snippet></ROW><ROW><id>17042148</id><snippet>A = [1,2,3,4,5,6,7,8,9,10]
B = [11,12,13,14,15]
for a in A:
    results = []           # define new list for each item in A
    #loop over B and collect the result in a list(results)
    for b in B:
        result = a + b
        results.append(result)   #append the result to results
    #print results               # uncomment this line to see the content of results
    filename = '{}.txt'.format(a)      #generate file name, based on value of `a`
    #always open file using `with` statement as it automatically closes the file for you
    with open( filename , 'w') as f:
       #now loop over results and write them to the file
       for res in results:
          #we can only write a string to a file, so convert numbers to string using `str()`
          f.write(str(res)+'\n') #'\n' adds a new line
</snippet></ROW><ROW><id>17042148</id><snippet>zip()</snippet></ROW><ROW><id>17042148</id><snippet>zip</snippet></ROW><ROW><id>17042148</id><snippet>A = [1,2,3,4,5,6,7,8,9,10]
B = [11,12,13,14,15]
N = ['a','b','c','d','e','f','g','h','i','j']
for a,name in zip(A,N):
    results = []
    for b in B:
        result = a + b
        results.append(result)
    filename = '{}.txt'.format(name)
    with open( filename , 'w') as f:
       for res in results:
           f.write(str(res)+'\n') 
</snippet></ROW><ROW><id>17042148</id><snippet>zip</snippet></ROW><ROW><id>17042148</id><snippet>&gt;&gt;&gt; print zip.__doc__
zip(seq1 [, seq2 [...]]) -&gt; [(seq1[0], seq2[0] ...), (...)]

Return a list of tuples, where each tuple contains the i-th element
from each of the argument sequences.  The returned list is truncated
in length to the length of the shortest argument sequence.
</snippet></ROW><ROW><id>17042193</id><snippet>my_collection.ensure_index("mike", sparse = True)</snippet></ROW><ROW><id>17042605</id><snippet>hg update REV</snippet></ROW><ROW><id>17042724</id><snippet>codecs.open()</snippet></ROW><ROW><id>17042724</id><snippet>codecs.open()</snippet></ROW><ROW><id>17042724</id><snippet>codecs.open()</snippet></ROW><ROW><id>17042724</id><snippet>open()</snippet></ROW><ROW><id>17042724</id><snippet>unicode</snippet></ROW><ROW><id>17042724</id><snippet># -*- coding: utf-8 -*- 
import os
import codecs

dirpath = u"C:\\Users\\user\\path\\to\\textfiles"
filenames = os.listdir(dirpath)

with codecs.open(r'C:\Users\user\path\to\output.txt', 'w', encoding='utf8') as outfile:
    for fname in filenames:
        currentfile = os.path.join(dirpath, fname)
        with codecs.open(currentfile, encoding='utf8') as infile:
            outfile.write(fname + '\n\n')
            for line in infile:
                line = line.replace(u"´ı", u"i")
                line = line.replace(u"ï¬", u"fi")
                line = line.replace(u"ï¬‚", u"fl")
                outfile.write (line)
</snippet></ROW><ROW><id>17042724</id><snippet>u"´ı"</snippet></ROW><ROW><id>17042724</id><snippet>encoding</snippet></ROW><ROW><id>17042724</id><snippet>codec.open()</snippet></ROW><ROW><id>17042724</id><snippet>dirpath</snippet></ROW><ROW><id>17042724</id><snippet>os.listdir()</snippet></ROW><ROW><id>17043256</id><snippet>collections.Counter</snippet></ROW><ROW><id>17043256</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; d =Counter()
&gt;&gt;&gt; d.update({'key1':10,'key2':14,'key3':47})
&gt;&gt;&gt; d['key1'] += 20
&gt;&gt;&gt; d['key4'] += 50  # Also works for keys that are not present
&gt;&gt;&gt; d
Counter({'key4': 50, 'key3': 47, 'key1': 30, 'key2': 14})
</snippet></ROW><ROW><id>17043256</id><snippet>&gt;&gt;&gt; d1 = Counter({'key4': 50, 'key3': 4})
#You can add two counters
&gt;&gt;&gt; d.update(d1)
&gt;&gt;&gt; d
Counter({'key4': 100, 'key3': 51, 'key1': 30, 'key2': 14})
</snippet></ROW><ROW><id>17043256</id><snippet>most_common()</snippet></ROW><ROW><id>17043256</id><snippet>&gt;&gt;&gt; d.most_common()
[('key4', 100), ('key3', 51), ('key1', 30), ('key2', 14)]
</snippet></ROW><ROW><id>17043256</id><snippet>&gt;&gt;&gt; keys = [ random.randint(0,1000) for _ in xrange(10**4)]
&gt;&gt;&gt; def dd():                             
    d = defaultdict(int)
    for k in keys:
        d[k] += 10
...         
&gt;&gt;&gt; def count():                             
    d = Counter()
    for k in keys:
        d[k] += 10
...         
&gt;&gt;&gt; def simple_dict():
...     d = {}
...     for k in keys:
...         d[k] = d.get(k,0) + 10
...         
&gt;&gt;&gt; %timeit dd()
100 loops, best of 3: 3.47 ms per loop
&gt;&gt;&gt; %timeit count()
100 loops, best of 3: 10.1 ms per loop
&gt;&gt;&gt; %timeit simple_dict()
100 loops, best of 3: 5.01 ms per loop
</snippet></ROW><ROW><id>17043285</id><snippet>mydatatosend = str(distance0)+","+str(time0)+","+str(distance1).....)
print mydatatosend
text_file = open("sensor_file.inc","w+r")
text_file.write(mydatatosend)
text_file.close()
</snippet></ROW><ROW><id>17043340</id><snippet> u', '.join([unicode(x.decode('utf-8')) if type(x) == type(str()) else unicode(x) for x in a])
</snippet></ROW><ROW><id>17043340</id><snippet>decode('utf-8')</snippet></ROW><ROW><id>17043380</id><snippet>"...[t]he sender of the signal. Either a specific object or None."
</snippet></ROW><ROW><id>17043380</id><snippet>"The sender to which the receiver should respond. Must either be
 of type Signal, or None to receive events from any sender"
</snippet></ROW><ROW><id>17043380</id><snippet>sender=None</snippet></ROW><ROW><id>17043395</id><snippet>MyClass</snippet></ROW><ROW><id>17043395</id><snippet>initialize(self)</snippet></ROW><ROW><id>17043395</id><snippet>MyClass</snippet></ROW><ROW><id>17043395</id><snippet>__init__(self)</snippet></ROW><ROW><id>17043770</id><snippet>csv</snippet></ROW><ROW><id>17043770</id><snippet>import csv
with open('my_csv.csv') as csv_file:
   for row in csv.reader(csv_file):
       # do work
</snippet></ROW><ROW><id>17043770</id><snippet>csv.reader</snippet></ROW><ROW><id>17043770</id><snippet>for</snippet></ROW><ROW><id>17043770</id><snippet>row[0]</snippet></ROW><ROW><id>17043770</id><snippet>row[1]</snippet></ROW><ROW><id>17043770</id><snippet>csv.DictReader</snippet></ROW><ROW><id>17043770</id><snippet>row['id']</snippet></ROW><ROW><id>17043770</id><snippet>row['name']</snippet></ROW><ROW><id>17043770</id><snippet>import csv
with open('my_csv.csv') as csv_file:
   for row in csv.DictReader(csv_file):
       # do work
</snippet></ROW><ROW><id>17043770</id><snippet>json</snippet></ROW><ROW><id>17043770</id><snippet>json.dumps()</snippet></ROW><ROW><id>17043770</id><snippet>import json
my_data = {'id': 123, 'name': 'Test User', 'emails': ['test@example.com', 'test@hotmail.com']}
my_data_json = json.dumps(my_data)
</snippet></ROW><ROW><id>17043770</id><snippet>output = {'persons': []}
with open('my_csv.csv') as csv_file:
    for person in csv.DictReader(csv_file):
        output['persons'].append({
            'type': 'config.profile',
            'id': person['id'],
            # ...add other fields (email etc) here...
        })

        # ...do similar for config.pictures, config.status, etc...

output_json = json.dumps(output)
</snippet></ROW><ROW><id>17043770</id><snippet>output_json</snippet></ROW><ROW><id>17043770</id><snippet>config</snippet></ROW><ROW><id>17043770</id><snippet>persons</snippet></ROW><ROW><id>17043886</id><snippet>line in v</snippet></ROW><ROW><id>17043886</id><snippet>line == v</snippet></ROW><ROW><id>17043886</id><snippet>==</snippet></ROW><ROW><id>17043886</id><snippet>is</snippet></ROW><ROW><id>17043886</id><snippet>is</snippet></ROW><ROW><id>17043886</id><snippet>==</snippet></ROW><ROW><id>17043983</id><snippet>ID_Start</snippet></ROW><ROW><id>17043983</id><snippet>ID_Continue</snippet></ROW><ROW><id>17043983</id><snippet>ID_Start</snippet></ROW><ROW><id>17043983</id><snippet>ID_Start ID_Continue*</snippet></ROW><ROW><id>17043983</id><snippet>ID_Continue</snippet></ROW><ROW><id>17043983</id><snippet>ID_Start</snippet></ROW><ROW><id>17043983</id><snippet>XID_Continue</snippet></ROW><ROW><id>17043983</id><snippet>U+00B7</snippet></ROW><ROW><id>17043998</id><snippet>import wx


class myFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, parent=None)

        panel1 = wx.Panel(self)
        self.mainSizer = wx.BoxSizer(wx.VERTICAL)
        panel1.SetSizer(self.mainSizer)
        self.button1 = wx.Button(panel1, label='xxx')
        self.list1 = wx.ListCtrl(panel1, size=(300, -1),
                                 style=wx.LC_REPORT | wx.LC_VRULES)
        self.mainSizer.Add(self.button1, 0, wx.CENTER)
        self.mainSizer.Add(self.list1, 1, wx.ALL | wx.CENTER, 20)
        self.button1.Bind(wx.EVT_BUTTON, self.onButton)

    def onButton(self, pliki):
        self.list1.InsertColumn(0, 'col1')
        self.list1.InsertColumn(1, 'col2')
        self.list1.InsertColumn(2, 'col3')
        self.sizeColumns()

    def sizeColumns(self):
        self.list1.SetColumnWidth(0, 150)
        self.list1.SetColumnWidth(1, 150)
        size = (sum([self.list1.GetColumnWidth(i) for i in (0, 1, 2)]), -1)
        self.list1.SetSize(size)
        self.list1.SetMinSize(size)
        self.list1.PostSizeEventToParent()

x = wx.App()
y = myFrame().Show()
x.MainLoop()
</snippet></ROW><ROW><id>17044050</id><snippet>x,y=meshgrid(linspace(0,1),linspace(0,1))
fig=plt.figure()
a=fig.add_subplot(111,axisbg='gray')
z=ma.masked_array(x**2-y**2,mask=y&gt;-x+1)
a.contourf(z)
</snippet></ROW><ROW><id>17044091</id><snippet>b</snippet></ROW><ROW><id>17044091</id><snippet>b</snippet></ROW><ROW><id>17044091</id><snippet>multiprocessing.Manager</snippet></ROW><ROW><id>17044091</id><snippet>from multiprocessing import Process,Manager

def a(b):
    for i in range(10):
        b[i] = i

b = [0 for _ in range(10)]

#create a manager to manage access to `b`
manager = Manager()
b = manager.list(b)

p = Process(target=a, args=(b,))
p.start()
p.join()

print sum(b)
</snippet></ROW><ROW><id>17044392</id><snippet>SELECT * FROM information_schema.tables
WHERE table_name = 'YOUR TABLE'
</snippet></ROW><ROW><id>17044392</id><snippet>def checkTableExists(dbcon, tablename):
    dbcur = dbcon.cursor()
    dbcur.execute("""
        SELECT COUNT(*)
        FROM information_schema.tables
        WHERE table_name = '{0}'
        """.format(tablename.replace('\'', '\'\'')))
    if dbcur.fetchone()[0] == 1:
        dbcur.close()
        return True

    dbcur.close()
    return False
</snippet></ROW><ROW><id>17044495</id><snippet>x</snippet></ROW><ROW><id>17044495</id><snippet>GF4</snippet></ROW><ROW><id>17044495</id><snippet>def __add__(self, x):
    if isinstance(x, GF4):
        x = x.number
    return self.__addL__[self.number][x]
</snippet></ROW><ROW><id>17044495</id><snippet>int</snippet></ROW><ROW><id>17044495</id><snippet>GF4</snippet></ROW><ROW><id>17044495</id><snippet>GF4</snippet></ROW><ROW><id>17044495</id><snippet>__add__</snippet></ROW><ROW><id>17044495</id><snippet>def __add__(self, x):
    if isinstance(x, GF4):
        x = x.number
    return GF4(self.__addL__[self.number][x])
</snippet></ROW><ROW><id>17044495</id><snippet>float</snippet></ROW><ROW><id>17044495</id><snippet>GF4</snippet></ROW><ROW><id>17044798</id><snippet>SSL=off</snippet></ROW><ROW><id>17044798</id><snippet>postgresql.conf</snippet></ROW><ROW><id>17044798</id><snippet>pg_hba.conf</snippet></ROW><ROW><id>17044798</id><snippet>hostnossl</snippet></ROW><ROW><id>17044798</id><snippet>host</snippet></ROW><ROW><id>17044798</id><snippet>sslmode</snippet></ROW><ROW><id>17044798</id><snippet>PGSSLMODE</snippet></ROW><ROW><id>17044798</id><snippet>libpq</snippet></ROW><ROW><id>17044798</id><snippet>local</snippet></ROW><ROW><id>17044898</id><snippet>fmt</snippet></ROW><ROW><id>17044898</id><snippet>import numpy as np
a = np.array([[11,12,13,14],
              [21,22,23,24]])
</snippet></ROW><ROW><id>17044898</id><snippet>np.savetxt('tmp.txt',a, fmt='%1.3f')</snippet></ROW><ROW><id>17044898</id><snippet>11.000 12.000 13.000 14.000
21.000 22.000 23.000 24.000
</snippet></ROW><ROW><id>17044898</id><snippet>np.savetxt('tmp.txt',a, fmt='%04d')</snippet></ROW><ROW><id>17044898</id><snippet>0011 0012 0013 0014
0021 0022 0023 0024
</snippet></ROW><ROW><id>17044898</id><snippet>np.savetxt('tmp.txt',a, fmt='%1.1f + %1.1f / (%1.1f * %1.1f)')</snippet></ROW><ROW><id>17044898</id><snippet>11.0 + 12.0 / (13.0 * 14.0)
21.0 + 22.0 / (23.0 * 24.0)
</snippet></ROW><ROW><id>17044969</id><snippet>cmp</snippet></ROW><ROW><id>17044969</id><snippet>izip_longest</snippet></ROW><ROW><id>17044969</id><snippet>from itertools import izip_longest
[float(sum(col)) / sum(cmp(x,0) for x in col) for col in izip_longest(*B, fillvalue=0)]
</snippet></ROW><ROW><id>17045034</id><snippet>0</snippet></ROW><ROW><id>17045034</id><snippet>In [11]: df1['2010-7':'2010-10']
Out[11]:
Empty DataFrame
Columns: [value]
Index: []

In [12]: df1['2010-07':'2010-10']
Out[12]:
                     value
date
2010-08-31 12:36:53  30.37
2010-08-31 12:45:08  28.03
2010-08-31 12:55:09  25.16
2010-08-31 13:00:09  23.28
...
</snippet></ROW><ROW><id>17045201</id><snippet>&gt;&gt;&gt; from bitstring import Bits
&gt;&gt;&gt; a = [3,1,2,6,4,10]  # some unsigned integers to encode
&gt;&gt;&gt; p = 5               # number of bits of precision to use
</snippet></ROW><ROW><id>17045201</id><snippet>&gt;&gt;&gt; b = Bits().join(Bits(uint=x, length=p) for x in a)
&gt;&gt;&gt; b
Bits('0b000110001000001001100010001010')
</snippet></ROW><ROW><id>17045201</id><snippet>&gt;&gt;&gt; b.tobytes()
'\x18\x82b('    
</snippet></ROW><ROW><id>17045201</id><snippet>cut</snippet></ROW><ROW><id>17045201</id><snippet>&gt;&gt;&gt; [x.uint for x in b.cut(p)]
[3, 2, 1, 6, 4, 10]
</snippet></ROW><ROW><id>17045619</id><snippet>collections.Counter()</snippet></ROW><ROW><id>17045619</id><snippet>from collections import Counter

counts = Counter(lst)

for word, count in counts.most_common():
    print '{} occurs {} times'.format(word, count)
</snippet></ROW><ROW><id>17045619</id><snippet>.items()</snippet></ROW><ROW><id>17045619</id><snippet>import operator

for word, count in sorted(counts.items(), key=operator.itemgetter(1)):
</snippet></ROW><ROW><id>17045619</id><snippet>&gt;&gt;&gt; lst = ['herp' , 'derp', 'foo' , 'derp', 'foo', 'foo' , 'foo']
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; counts = Counter(lst)
&gt;&gt;&gt; for word, count in counts.most_common():
...     print '{} occurs {} times'.format(word, count)
... 
foo occurs 4 times
derp occurs 2 times
herp occurs 1 times
&gt;&gt;&gt; import operator
&gt;&gt;&gt; for word, count in sorted(counts.items(), key=operator.itemgetter(1)):
...     print '{} occurs {} times'.format(word, count)
... 
herp occurs 1 times
derp occurs 2 times
foo occurs 4 times
</snippet></ROW><ROW><id>17045698</id><snippet>csvfiles = glob.glob('/stats/*.stat')
for filename in csvfiles:
    reader = csv.reader(open(filename))
    counter = 0
    temp1 = []
    temp2 = []
    for row in reader:
            col0, col3, col4, col5, col23, col24, col25 = float(row[0]), float(row[3]), float(row[4]), float(row[5]), float(row[23]), float(row[24]), float(row[25])
            if ###YOUR CONDITION IS TRUE
                counter += 1
            else
                counter = 0
            if col4 &gt;= 9.00 and col5 &gt; 1.00 and counter &gt;= 3:
                if counter == 3
                    #PRINT TEMP1
                    #PRINT TEMP2
               print("   %.0f   " % col0,'|', "%.12f" % col4, "%.12f" % col5, "%.12f" % (col4/col5), "%.12f" % (100*col25), "%.12f" % col3, "%.12f" % col23, "%.12f" % col24)
            elif counter == 1
                #store in temp1
            elif counter == 2
                #store in temp2
</snippet></ROW><ROW><id>17045749</id><snippet>phrase</snippet></ROW><ROW><id>17045749</id><snippet>print("Here is a phrase: " + phrase.encode('some_codec'))
</snippet></ROW><ROW><id>17045749</id><snippet>str()</snippet></ROW><ROW><id>17045768</id><snippet>inspect.getmro()</snippet></ROW><ROW><id>17045768</id><snippet> mro(new_class) = [new_class] + mro(first_base) + mro(second_base) + ...
</snippet></ROW><ROW><id>17045768</id><snippet>[new_class]</snippet></ROW><ROW><id>17045768</id><snippet>mro(first_base)</snippet></ROW><ROW><id>17045768</id><snippet>mro(second_base)</snippet></ROW><ROW><id>17045881</id><snippet>traceroute</snippet></ROW><ROW><id>17045881</id><snippet>subprocess</snippet></ROW><ROW><id>17045881</id><snippet>traceroute</snippet></ROW><ROW><id>17045881</id><snippet>setuid</snippet></ROW><ROW><id>17045881</id><snippet>traceroute</snippet></ROW><ROW><id>17046591</id><snippet>create_image</snippet></ROW><ROW><id>17046591</id><snippet>create_text</snippet></ROW><ROW><id>17046728</id><snippet>&lt;form action="/out?%s"</snippet></ROW><ROW><id>17046728</id><snippet>action="/out"</snippet></ROW><ROW><id>17046728</id><snippet>Table</snippet></ROW><ROW><id>17046728</id><snippet>By kind: Table</snippet></ROW><ROW><id>17046728</id><snippet>    tables = Table.all()
    for table in tables:
        self.drawTable(table.row, table.col)
</snippet></ROW><ROW><id>17046728</id><snippet>    self.drawTable(newTable.row, newTable.col)
</snippet></ROW><ROW><id>17046766</id><snippet>def x(self, value1, value2=None):
    if value2 is None:
        self._x = [value1] * 4
    else:
        self._x[0] = value1
        self._x[3] = value2
</snippet></ROW><ROW><id>17046766</id><snippet>@x.setter
def x(self, value):
    if not isinstance(value, tuple):
        self._x = [value] * 4
    else:
        if len(value) == 2:
            # use indices 0 and 1, rest is discarded?
            self._x[0], self._x[3] = value[0], value[1]
        elif len(value) == 4
            self._x = value
        else:
            raise ValueError('Can only set x to a single value, or a tuple of length 2 or 4')
</snippet></ROW><ROW><id>17046816</id><snippet>opener</snippet></ROW><ROW><id>17046816</id><snippet>import urllib, urllib2, cookielib, os
import re # going to use this now!

username = 'somebody'
password = 'somepass'

cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
login_data = urllib.urlencode({'username' : username, 'j_password' : password})
resp = opener.open('http://www.some.site/index.php', login_data)
content = resp.read()
print content

match = re.search(
    r"&lt;a\s+href=\"(?P&lt;file_link&gt;http://www.some.site/excel_file.php?t=\d+)\"&gt;",
    content,
    re.IGNORECASE
)

assert match is not None, "Couldn't find the file link..."

file_link = match.group('file_link')
print "downloading {} with urllib2".format(file_link)
f = opener.open(file_link)
data = f.read()
with open("exceldoc.xls", "wb") as code:
    code.write(data)
</snippet></ROW><ROW><id>17047466</id><snippet>export CPLUS_INCLUDE_PATH=/path/to/desired/include/directory</snippet></ROW><ROW><id>17047666</id><snippet>["hearts","clubs","frogs"]
</snippet></ROW><ROW><id>17047666</id><snippet>choice</snippet></ROW><ROW><id>17047943</id><snippet>LOGIN_URL</snippet></ROW><ROW><id>17047943</id><snippet>LOGIN_URL = 'login'
</snippet></ROW><ROW><id>17047943</id><snippet>reverse_lazy</snippet></ROW><ROW><id>17047943</id><snippet>from django.core.urlresolvers import reverse_lazy 

LOGIN_URL = reverse_lazy('login')
</snippet></ROW><ROW><id>17048005</id><snippet>select</snippet></ROW><ROW><id>17048005</id><snippet>class Client(Frame):

    def __init__(self, **kwargs):
        self.client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.client.connect(("host", port))
        self.client.setblocking(0)
        Frame.__init__(self, Tk())
        self.pack()

        self.lb = Listbox(self, width=100, height=30)
        self.lb.pack()

        self.show_data = self.lb.after(1000, self.chat_handle)

        self.entry = Entry(self)
        self.entry.bind('&lt;Return&gt;', self.input_handle)
        self.entry.pack(side=BOTTOM, fill=X)

    def input_handle(self, event):
        msg = self.entry.get()
        self.entry.delete(0, 'end')
        new_msg = 'privmsg %s :' % self.channel + msg + '\r\n'
        self.client.sendall(new_msg)
        self.lb.insert(END, self.nick + ' | ' + msg)

    def chat_handle(self):
        socket_data = select.select([self.client], [], [], 0.3) # set timeout on last arg
        if socket_data[0]:
            try:
                self.data = self.client.recvfrom(1024)
            except socket.error:
                self.lb.insert(END, "Bad Connection!")
                return
            if self.data and len(self.data[0]) &gt; 0:
                self.lb.insert(END, self.data[0])
            elif self.data and len(self.data[0]) == 0:
                self.lb.insert(END, "Connection Dropped!")
                return
            self.show_data = self.lb.after(1000, self.chat_hand
</snippet></ROW><ROW><id>17048053</id><snippet>Function Set-WallPaper($Value)
{
 Set-ItemProperty -path 'HKCU:\Control Panel\Desktop\' -name wallpaper -value $value
 rundll32.exe user32.dll, UpdatePerUserSystemParameters
}
</snippet></ROW><ROW><id>17048053</id><snippet>import subprocess
subprocess.Popen([r'path/to/PowerShell/script.exe',
                         '-ExecutionPolicy',
                         'Unrestricted',
                         'path/to/background_image.png'], cwd=os.getcwd())
</snippet></ROW><ROW><id>17048352</id><snippet>PyObject *args = Py_BuildValue("(s)", "test");
PyObject *kwargs = PyBuildValue("{s:O}", "stdout", content);

PyObject_Call(executeFunc, args, kwargs);
</snippet></ROW><ROW><id>17048352</id><snippet>args = ("test",)
kwargs = {"stdout" : content}

call_command(*args,**kwargs)
</snippet></ROW><ROW><id>17048593</id><snippet>max_features</snippet></ROW><ROW><id>17048593</id><snippet>ExtraTreesRegressor</snippet></ROW><ROW><id>17048606</id><snippet>inp="""System MA
user id =  2084
username =  XYZ90
selection =  pnq
decimal =  6.000
Percentage =  19.1176470588 %

System NA
user id =  2086
username =  pron1
selection =  abc
decimal =  13.000
Percentage =  13.1147540984 %

System M
user id =  1664
username =  Chrisod
selection =  pleader
decimal =  15.000
Percentage =  16.091954023 %"""

inp=inp.split('\n\n')

rss_start="""&lt;?xml version="1.0" encoding="ISO-8859-1" ?&gt;
&lt;rss version="2.0"&gt;

&lt;channel&gt;
  &lt;title&gt;Your title&lt;/title&gt;
  &lt;link&gt;http://yoursite.com&lt;/link&gt;
  &lt;description&gt;Your discription&lt;/description&gt;
"""

rss_end="""&lt;/channel&gt;

&lt;/rss&gt; """

def description(item):
    return item

def title(item):
    return item.split('\n')[0]

def link(item):
    return 'http://mysite.com/' + item.split('\n')[0]

rss_items=[]
for counter, item in enumerate(inp):
    rss_items.append("""
  &lt;item&gt;
    &lt;title&gt;%s&lt;/title&gt;
    &lt;link&gt;%s&lt;/link&gt;
    &lt;description&gt;%s&lt;/description&gt;
    &lt;guid&gt;counter&lt;/guid&gt;
  &lt;/item&gt;""" % (title(item),description(item),link(item)))

rss_output=rss_start+''.join(rss_items)+rss_end
</snippet></ROW><ROW><id>17048606</id><snippet>&lt;pubDate&gt;</snippet></ROW><ROW><id>17048606</id><snippet>&lt;guid&gt;</snippet></ROW><ROW><id>17048916</id><snippet>\n</snippet></ROW><ROW><id>17048916</id><snippet>\t</snippet></ROW><ROW><id>17048916</id><snippet>os.path.normpath()</snippet></ROW><ROW><id>17049071</id><snippet>import os
import subprocess
PIPE = subprocess.PIPE

def content_generator(command):
    subprocess.Popen(command, stdout=PIPE, stderr=PIPE)
    content = None
    while content != '':
        content = os.read(process.stdout.fileno(), 1024)
        yield content
</snippet></ROW><ROW><id>17049071</id><snippet>from django.http import StreamingHttpResponse

def my_streaming_view(request):
    return StreamingHttpResponse(
         content_generator(['cat', '/tmp/some_large_file.txt'])
    )
</snippet></ROW><ROW><id>17049159</id><snippet>entity_list = []
for i in range(10000000):
   entity_list.append(Entity())
</snippet></ROW><ROW><id>17049245</id><snippet>"/opt/nessus/bin/nessus"</snippet></ROW><ROW><id>17049245</id><snippet>nessus</snippet></ROW><ROW><id>17049245</id><snippet>"/opt/nessus/bin/nessus"</snippet></ROW><ROW><id>17049480</id><snippet>for y, item in enumerate(store):
    setattr(sys.modules[__name__], 'v{0}'.format(y), item)
</snippet></ROW><ROW><id>17049480</id><snippet>setattr(sys.modules[__name__], ..)</snippet></ROW><ROW><id>17049480</id><snippet>globals()</snippet></ROW><ROW><id>17049480</id><snippet>def main(self, count):
    seq = "ABCDFGHJIKLMNOPQRSTUVWXYZ1234567890"

    for i in range(count):
        print('-'.join(''.join(random.choice(seq) for _ in range(5)) for _ in range(5)))

    print("\nCreated {} serial keys!".format(count))
</snippet></ROW><ROW><id>17049480</id><snippet>count</snippet></ROW><ROW><id>17049480</id><snippet>LWLGX-F6MNR-9YIZC-H23TK-TIGB9
YALYY-4ZARO-8H9BV-YMHVD-HFFGP
JNA5R-65GT1-TZ3BM-PNMZI-56NM3
39VCY-MLZ98-SU1PP-PYMX7-RZJQZ
76LGC-VF5MG-LK7C4-XPUSO-H0B97
</snippet></ROW><ROW><id>17049591</id><snippet>def solve(x):
    try:
        num = float(x)
        return str(int(round(num))) if num &gt; 0.50 else x
    except ValueError:
        return x
...     
#Using list comprehension
&gt;&gt;&gt; [solve(x) for x in  lis]
['58', '35', '0.39', '1', '35', '-']
#using map
&gt;&gt;&gt; map(solve, lis)
['58', '35', '0.39', '1', '35', '-']
</snippet></ROW><ROW><id>17049695</id><snippet>&gt;&gt;&gt; re.split(r'\[|\]', data2)
['A new string. ', 'with brackets', ' another line ', 'and a bracket', '']
</snippet></ROW><ROW><id>17049766</id><snippet>from __future__ import unicode_literals</snippet></ROW><ROW><id>17049835</id><snippet>inspect.ismodule</snippet></ROW><ROW><id>17049835</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; import os
&gt;&gt;&gt; os2 = object()
&gt;&gt;&gt; inspect.ismodule(os)
True
&gt;&gt;&gt; inspect.ismodule(os2)
False
</snippet></ROW><ROW><id>17049888</id><snippet>data = [['a','2'],['a','1'],['b','3'],['c','2'],['b','1'],['a','1'],['b','1'],['c','2'],['b','3'],['b','1']]
result = {}
for key, value in data:
    result.setdefault(key, []).append(value)
</snippet></ROW><ROW><id>17049888</id><snippet>&gt;&gt;&gt; result
{'a': ['2', '1', '1'], 'c': ['2', '2'], 'b': ['3', '1', '1', '3', '1']}
</snippet></ROW><ROW><id>17050110</id><snippet>http://www.w3.org/2006/03/wn/wn20/instances/synset-bank-noun-2</snippet></ROW><ROW><id>17050147</id><snippet>tab</snippet></ROW><ROW><id>17050147</id><snippet>1</snippet></ROW><ROW><id>17050147</id><snippet>nb.tab(1, state="normal")
</snippet></ROW><ROW><id>17050147</id><snippet>select</snippet></ROW><ROW><id>17050147</id><snippet>nb.select(1)
</snippet></ROW><ROW><id>17050212</id><snippet>from os import getcwd

filename = getcwd() + '//' + filename
</snippet></ROW><ROW><id>17050315</id><snippet>','</snippet></ROW><ROW><id>17050315</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17050315</id><snippet>&gt;&gt;&gt; strs = '(0,0) (0,1) (1,1) (1,0)'
&gt;&gt;&gt; from ast import literal_eval
&gt;&gt;&gt; literal_eval(strs.replace(' ',','))
((0, 0), (0, 1), (1, 1), (1, 0))
</snippet></ROW><ROW><id>17050315</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs = '(0, 0)  (0, 1) ( 1, 1)    ( 1,  0)'
&gt;&gt;&gt; literal_eval(re.sub('(\))(\s+)(\()','\g&lt;1&gt;,\g&lt;3&gt;',strs))
((0, 0), (0, 1), (1, 1), (1, 0))
</snippet></ROW><ROW><id>17050663</id><snippet>leaveOut</snippet></ROW><ROW><id>17050663</id><snippet>if [x for x in leaveOut.values() if x not in movieTitle]:
</snippet></ROW><ROW><id>17050663</id><snippet>0</snippet></ROW><ROW><id>17050663</id><snippet>1</snippet></ROW><ROW><id>17050721</id><snippet>from pandas.core.api import DataFrame
db = DAL([db connection string], pool_size=10, migrate_enabled=False)
rows = db.executesql(query)
data = DataFrame.from_records(rows, columns=[list, of, column, names])
</snippet></ROW><ROW><id>17050721</id><snippet>pool_size</snippet></ROW><ROW><id>17050721</id><snippet>DAL()</snippet></ROW><ROW><id>17050721</id><snippet>db.define_table('mytable',
    Field('field1', 'integer'),
    Field('field2', 'double'),
    Field('field3', 'boolean'))

rows = db.executesql(db(db.mytable.id &gt; 0)._select())
data = DataFrame.from_records(rows, columns=db.mytable.fields)
</snippet></ROW><ROW><id>17050721</id><snippet>._select()</snippet></ROW><ROW><id>17050721</id><snippet>.executesql()</snippet></ROW><ROW><id>17050721</id><snippet>processor</snippet></ROW><ROW><id>17050721</id><snippet>.select()</snippet></ROW><ROW><id>17050721</id><snippet>def pandas_processor(rows, fields, columns, cacheable):
    return DataFrame.from_records(rows, columns=columns)

data = db(db.mytable.id &gt; 0).select(processor=pandas_processor)
</snippet></ROW><ROW><id>17050759</id><snippet>handlers:
- url: /css
  static_dir: static/css
...
- url: /.*
  script: sorter.app
</snippet></ROW><ROW><id>17050759</id><snippet>/css/bootstrap.min.css</snippet></ROW><ROW><id>17050759</id><snippet>css/bootstrap.min.css</snippet></ROW><ROW><id>17050883</id><snippet>MEDIA_URL</snippet></ROW><ROW><id>17050966</id><snippet>numpy.array</snippet></ROW><ROW><id>17050966</id><snippet>a = numpyp.array([list1, list2, list3, ... , listn], dtype=object)
</snippet></ROW><ROW><id>17050966</id><snippet>__str__</snippet></ROW><ROW><id>17050966</id><snippet>[[ 1, 2, 3, 4],
 [ 5, 6, 7, 8]]
</snippet></ROW><ROW><id>17050966</id><snippet>a = ['aaa' for i in range(10)]
b = numpy.empty((5),dtype=object)
b.fill(a) 
</snippet></ROW><ROW><id>17050966</id><snippet>b</snippet></ROW><ROW><id>17050966</id><snippet>b.shape # (5,)
b.ndim  # 1
</snippet></ROW><ROW><id>17050966</id><snippet>print b</snippet></ROW><ROW><id>17050966</id><snippet>[['aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa']
 ['aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa']
 ['aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa']
 ['aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa']
 ['aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa']]
</snippet></ROW><ROW><id>17051317</id><snippet>os.open</snippet></ROW><ROW><id>17051428</id><snippet>setup.py</snippet></ROW><ROW><id>17051428</id><snippet>python setup.py install
</snippet></ROW><ROW><id>17051428</id><snippet>python2</snippet></ROW><ROW><id>17051428</id><snippet>python3</snippet></ROW><ROW><id>17051428</id><snippet>python</snippet></ROW><ROW><id>17051459</id><snippet>def recurse( x ):
  for k, v in x.items():
    if isinstance( v , dict ):
      recurse( v )
    else:
      print "key: {}, val: {}".format(k, v) 
</snippet></ROW><ROW><id>17051459</id><snippet>&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.getrecursionlimit()
1000
&gt;&gt;&gt; def f(i):
      f(i+1)
&gt;&gt;&gt; f(1)
...
File "&lt;stdin&gt;", line 3, in f
File "&lt;stdin&gt;", line 3, in f
File "&lt;stdin&gt;", line 3, in f
RuntimeError: maximum recursion depth exceeded
</snippet></ROW><ROW><id>17051508</id><snippet>data.split('\n')</snippet></ROW><ROW><id>17051508</id><snippet>In [11]: Series(pd.to_datetime(data.split('\n')))
Out[11]: 
0   2012-12-14 00:00:00
1   2013-02-03 00:00:00
2   2013-03-24 00:00:00
3   2012-01-08 00:00:00
4   2012-11-30 00:00:00
5   2012-04-10 00:00:00
6   2012-01-01 00:00:00
dtype: datetime64[ns]
</snippet></ROW><ROW><id>17051769</id><snippet>.*</snippet></ROW><ROW><id>17051769</id><snippet>^//network/path/folder/_.*?/[^/]*/([^/]*)
</snippet></ROW><ROW><id>17051769</id><snippet>[^/]*</snippet></ROW><ROW><id>17051769</id><snippet>^</snippet></ROW><ROW><id>17051848</id><snippet>x = [ x_1, x_2, ..., x_N ]</snippet></ROW><ROW><id>17051848</id><snippet>E = sum( abs(fft(x))[:len(x)/2]**2 ) / len(x)
</snippet></ROW><ROW><id>17051848</id><snippet>N = len(x)</snippet></ROW><ROW><id>17052015</id><snippet>def vector_length(x, y):
    return math.sqrt(x*x + y*y)

def normalize_vector(x, y):
    norm = vector_length(x, y)
    return x/norm, y/norm

target = normalize_vector(bpos[1] - mpos[1], bpos[0] - mpos[0])
</snippet></ROW><ROW><id>17052015</id><snippet>bullet.rect.x -= target[1] * BULLET_SPEED 
bullet.rect.y -= target[0] * BULLET_SPEED 
</snippet></ROW><ROW><id>17052015</id><snippet>dist = math.sqrt(((bpos[0] - mpos[0])**2) + ((bpos[1] - mpos[1])**2))
</snippet></ROW><ROW><id>17052015</id><snippet>bullet.rect.x -= target[1] / dist * BULLET_SPEED
bullet.rect.y -= target[0] / dist * BULLET_SPEED
</snippet></ROW><ROW><id>17052080</id><snippet>processing = zip(booleans, functions)

for i, action in enumerate([p for (b,p) in processing if b]):
    action([a[i] for a in myList])
</snippet></ROW><ROW><id>17052193</id><snippet>subprocess.call</snippet></ROW><ROW><id>17052193</id><snippet>wait_for</snippet></ROW><ROW><id>17052193</id><snippet>mongod</snippet></ROW><ROW><id>17052204</id><snippet>__future__</snippet></ROW><ROW><id>17052204</id><snippet>str</snippet></ROW><ROW><id>17052204</id><snippet>unicode</snippet></ROW><ROW><id>17052204</id><snippet>__future__</snippet></ROW><ROW><id>17052204</id><snippet>bytes</snippet></ROW><ROW><id>17052204</id><snippet>&gt;&gt;&gt; 'abc'
'abc'
&gt;&gt;&gt; from __future__ import unicode_literals
&gt;&gt;&gt; 'abc'
u'abc'
</snippet></ROW><ROW><id>17052204</id><snippet>str</snippet></ROW><ROW><id>17052204</id><snippet>unicode</snippet></ROW><ROW><id>17052204</id><snippet>str</snippet></ROW><ROW><id>17052204</id><snippet>str</snippet></ROW><ROW><id>17052204</id><snippet>unicode</snippet></ROW><ROW><id>17052204</id><snippet>project</snippet></ROW><ROW><id>17052204</id><snippet>unicode</snippet></ROW><ROW><id>17052204</id><snippet>def print_project(self, project):
    project_prefix = "Project: "
    print (project_prefix + unicode(project))
</snippet></ROW><ROW><id>17052204</id><snippet>__future__</snippet></ROW><ROW><id>17052204</id><snippet>project_prefix</snippet></ROW><ROW><id>17052204</id><snippet>unicode</snippet></ROW><ROW><id>17052204</id><snippet>str</snippet></ROW><ROW><id>17052204</id><snippet>__future__</snippet></ROW><ROW><id>17052204</id><snippet>def print_project(self, project):
    project_prefix = "Project: ".decode('utf-8')
    print (project_prefix + unicode(project))
</snippet></ROW><ROW><id>17052204</id><snippet>__future__</snippet></ROW><ROW><id>17052204</id><snippet>__future__</snippet></ROW><ROW><id>17052204</id><snippet># -*- coding: latin-1 -*-
from __future__ import unicode_literals
print repr('é')
</snippet></ROW><ROW><id>17052204</id><snippet>u'\xc3\xa9'</snippet></ROW><ROW><id>17052204</id><snippet>u'\xe9'</snippet></ROW><ROW><id>17052204</id><snippet>unicode_literals</snippet></ROW><ROW><id>17052304</id><snippet>while</snippet></ROW><ROW><id>17052304</id><snippet>query = "You come to a crossroads, left or right?" 
lor = raw_input(query).strip().lower()
while lor not in ("left", "right"):
    print "That's not a direction."
    lor = raw_input(query).strip().lower()

if lor == "left":
    print "You went left"
else:
    print "You went right"
</snippet></ROW><ROW><id>17052304</id><snippet>if</snippet></ROW><ROW><id>17052304</id><snippet>if name</snippet></ROW><ROW><id>17052304</id><snippet>name = raw_input("What is your name?")
if name:
    print "Hello %s, Let's be friends!" % name
else:
    print "Sorry, what was that?"
</snippet></ROW><ROW><id>17052305</id><snippet>animals = {'pets': {'George': 'cat', 'Fred': 'dog'}}
</snippet></ROW><ROW><id>17052305</id><snippet>animals</snippet></ROW><ROW><id>17052305</id><snippet>animals['pets']['George']</snippet></ROW><ROW><id>17052305</id><snippet>animals['pets']['Fred']</snippet></ROW><ROW><id>17052320</id><snippet>from numpy import array
frame_start_times=array(Frame.objects.all().values_list('start_time'))
frame_end_times=array(Frame.objects.all().values_list('end_time'))
frame_names=array(Frame.objects.all().values_list('frame_name'))
frame_names_for_times=[]
for time in gpstime:
    frame_inds=frame_start_times[(frame_start_times&lt;time) &amp; (frame_end_times&gt;time)]
    frame_names_for_times.append(frame_names[frame_inds].tostring())
</snippet></ROW><ROW><id>17052320</id><snippet>.searchsorted()</snippet></ROW><ROW><id>17052320</id><snippet>from numpy import array as a
gpstimes=a([151,152,153,190,649,652,920,996])
starts=a([100,600,900,1000])
ends=a([180,650,950,1000])
names=a(['a','b','c','d',])
names_for_times=[]

for time in gpstimes:
    start_pos=starts.searchsorted(time)
    end_pos=ends.searchsorted(time)
    if start_pos-1 == end_pos:
        print time, names[end_pos]
    else:
        print str(time) + ' was not within any frame'
</snippet></ROW><ROW><id>17052599</id><snippet>T</snippet></ROW><ROW><id>17052599</id><snippet>B</snippet></ROW><ROW><id>17052599</id><snippet>0</snippet></ROW><ROW><id>17052599</id><snippet>1</snippet></ROW><ROW><id>17052599</id><snippet>9</snippet></ROW><ROW><id>17052599</id><snippet>+</snippet></ROW><ROW><id>17052599</id><snippet>-</snippet></ROW><ROW><id>17052599</id><snippet>_</snippet></ROW><ROW><id>17052599</id><snippet>^T[\dB\._+-]+\.txt$
</snippet></ROW><ROW><id>17052599</id><snippet>^T13_B[\d\.+-]+\.txt$
</snippet></ROW><ROW><id>17052599</id><snippet>T13_B</snippet></ROW><ROW><id>17052599</id><snippet>.txt</snippet></ROW><ROW><id>17052606</id><snippet>num_instances</snippet></ROW><ROW><id>17052606</id><snippet>Layer</snippet></ROW><ROW><id>17052606</id><snippet>def forward(X, W, b):
    A = X.dot(W.T) + b # will be broadcasted
    Y = g(A)
    return Y

def backprop(dEdY, W, b, gd, Y, X):
    Deltas = gd(Y) * dEdY # element-wise multiplication
    dEdX = Deltas.dot(W)
    dEdW = Deltas.T.dot(X)
    dEdb = Deltas.sum(axis=0)
    return dEdX, dEdW, dEdb
</snippet></ROW><ROW><id>17052606</id><snippet>X</snippet></ROW><ROW><id>17052606</id><snippet>Y</snippet></ROW><ROW><id>17052606</id><snippet>X</snippet></ROW><ROW><id>17052606</id><snippet>dE/dY</snippet></ROW><ROW><id>17052606</id><snippet>Y-T</snippet></ROW><ROW><id>17052606</id><snippet>Y</snippet></ROW><ROW><id>17052606</id><snippet>T</snippet></ROW><ROW><id>17052606</id><snippet>dE/dX</snippet></ROW><ROW><id>17052606</id><snippet>dE/dY</snippet></ROW><ROW><id>17052606</id><snippet>dE/dW</snippet></ROW><ROW><id>17052606</id><snippet>dE/db</snippet></ROW><ROW><id>17052606</id><snippet>W</snippet></ROW><ROW><id>17052606</id><snippet>b</snippet></ROW><ROW><id>17052606</id><snippet>In [1]: import timeit

In [2]: setup = """import numpy
   ...: W = numpy.random.rand(10, 5000)
   ...: X = numpy.random.rand(1000, 5000)"""

In [3]: timeit.timeit('[W.dot(x) for x in X]', setup=setup, number=10)
Out[3]: 0.5420958995819092

In [4]: timeit.timeit('X.dot(W.T)', setup=setup, number=10)
Out[4]: 0.22001314163208008
</snippet></ROW><ROW><id>17052870</id><snippet>groupby</snippet></ROW><ROW><id>17052870</id><snippet>g = df.groupby(['person', 'classes', ..., 'varY', 'states'])

g.apply(lambda stateData: do_stuff(stateData))
</snippet></ROW><ROW><id>17053233</id><snippet>import datetime
now = datetime.datetime.now()

print (now.year)
</snippet></ROW><ROW><id>17053302</id><snippet>def f(map,n=0): 
        dictionary=beforeF(map) #function before i made
        for key in dictionary.keys():
            fullName = map + '\\' + key
            if path.isdir(fullName): 
                print(n*'\t'+key+':')

                f(fullName, n+1)
            else:
                print(n*'\t'+key + ' (' + str(dictionary[key])+ ')')
</snippet></ROW><ROW><id>17053360</id><snippet>pandas.DataFrame</snippet></ROW><ROW><id>17053360</id><snippet>numpy</snippet></ROW><ROW><id>17053360</id><snippet>pandas</snippet></ROW><ROW><id>17053360</id><snippet>pandas.read_excel</snippet></ROW><ROW><id>17053395</id><snippet>.find()</snippet></ROW><ROW><id>17053395</id><snippet>-1</snippet></ROW><ROW><id>17053395</id><snippet>any()</snippet></ROW><ROW><id>17053395</id><snippet>True</snippet></ROW><ROW><id>17053395</id><snippet> if any(leaveOut[c] in movieTitle for c in 'abcde'):
     # One of the words was in the title
</snippet></ROW><ROW><id>17053395</id><snippet> if all(leaveOut[c] not in movieTitle for c in 'abcde'):
     # None of the words were in the title
</snippet></ROW><ROW><id>17053395</id><snippet>leave_out = ['dog', 'cat', 'wolf']

...

if all(word not in movieTitle for word in leave_out):
     # None of the words were in the title
</snippet></ROW><ROW><id>17053461</id><snippet>with</snippet></ROW><ROW><id>17053461</id><snippet>try</snippet></ROW><ROW><id>17053461</id><snippet>except</snippet></ROW><ROW><id>17053461</id><snippet>with</snippet></ROW><ROW><id>17053461</id><snippet>try/finally</snippet></ROW><ROW><id>17053461</id><snippet>try</snippet></ROW><ROW><id>17053461</id><snippet>as</snippet></ROW><ROW><id>17053461</id><snippet>with</snippet></ROW><ROW><id>17053474</id><snippet>Pool</snippet></ROW><ROW><id>17053474</id><snippet>Process</snippet></ROW><ROW><id>17053592</id><snippet>flake8</snippet></ROW><ROW><id>17053592</id><snippet>pip</snippet></ROW><ROW><id>17053592</id><snippet>flake8</snippet></ROW><ROW><id>17053592</id><snippet>flake8</snippet></ROW><ROW><id>17053592</id><snippet>flake8</snippet></ROW><ROW><id>17053592</id><snippet>/tmp</snippet></ROW><ROW><id>17053592</id><snippet>flake8</snippet></ROW><ROW><id>17053592</id><snippet>${selected_resource_loc}</snippet></ROW><ROW><id>17053592</id><snippet>flake8</snippet></ROW><ROW><id>17053592</id><snippet>(?)</snippet></ROW><ROW><id>17053592</id><snippet>flake8</snippet></ROW><ROW><id>17053592</id><snippet>warning line</snippet></ROW><ROW><id>17053592</id><snippet>^(.*.py):([0-9]+):([0-9]+): .*</snippet></ROW><ROW><id>17053592</id><snippet>{1}</snippet></ROW><ROW><id>17053592</id><snippet>{2}</snippet></ROW><ROW><id>17053592</id><snippet>{3}</snippet></ROW><ROW><id>17053592</id><snippet>flake8</snippet></ROW><ROW><id>17053592</id><snippet>#</snippet></ROW><ROW><id>17053592</id><snippet>--show-pep8</snippet></ROW><ROW><id>17053592</id><snippet>flake8</snippet></ROW><ROW><id>17053705</id><snippet>"left".startswith("")</snippet></ROW><ROW><id>17053705</id><snippet>"left"</snippet></ROW><ROW><id>17053705</id><snippet>""</snippet></ROW><ROW><id>17053705</id><snippet>lor</snippet></ROW><ROW><id>17053705</id><snippet>""</snippet></ROW><ROW><id>17053705</id><snippet>else</snippet></ROW><ROW><id>17053705</id><snippet>lor</snippet></ROW><ROW><id>17053705</id><snippet>while lor == "" or (not "left".startswith(lor) and not "right".startswith(lor)):
</snippet></ROW><ROW><id>17053705</id><snippet>else</snippet></ROW><ROW><id>17053760</id><snippet>from collections import defaultdict
from itertools import permutations, combinations

d = defaultdict(list)
l = [('a', 'b'), ('c', 'd'), ('a', 'z'), ('a', 't'), ('c', 'z')]

for k,v in l:
    d[k].append(v)

new_list = []

for k,v in d.iteritems():
    new_list.extend([x for x in combinations(v, 2)]) # could also use permutations here

&gt;&gt;&gt; new_list
[('b', 'z'), ('b', 't'), ('z', 't'), ('d', 'z')]
</snippet></ROW><ROW><id>17054030</id><snippet>flight_speed = 1000   #km/h assumed
time_diff = 4000      #assumption seconds
secs_per_hour = 60*60
possible_distance_travelled = time_diff / secs_per_hour * flight_speed   # in km
if distance_between_ATMs &lt; possible_distance_travelled:
print "no malicious activity"
    else:
print "malicious activity detected"
</snippet></ROW><ROW><id>17054059</id><snippet># With positional arguments
args = (1, 2, 3)
f_1(*args)

# With keyword arguments
kwargs = {'first': 1, 'second': 2}
f_2(**kwargs)
</snippet></ROW><ROW><id>17054070</id><snippet>hold(False)</snippet></ROW><ROW><id>17054070</id><snippet>fig = plt.figure(1)
ax = fig.add_subplot(111, projection='3d')
ax.set_title("My Title")
ax.set_xlim3d([0, X_MAX])
ax.set_ylim3d([0, Y_MAX])
ax.set_zlim3d([0, Z_MAX])
ax.set_autoscale_on(False)
plt.ion()
plt.show()

a = 0
sct = None
while a &lt; 50:
  a += 1
  if sct is not None:
      sct.remove()
  sct = ax.scatter( a, a/2+1, 3, s=1 )

  plt.pause(0.001)
</snippet></ROW><ROW><id>17054154</id><snippet>result = [(a.split('-', 1)[0], b) for a, b in sorted_x]
</snippet></ROW><ROW><id>17054154</id><snippet>&gt;&gt;&gt; sorted_x = [('pvg-cu2', 50.349189), ('hkg-pccw', 135.14921), ('syd-ipc', 163.441705), ('sjc-inap', 165.722676)]
&gt;&gt;&gt; [(a.split('-', 1)[0], b) for a, b in sorted_x]
[('pvg', 50.349189000000003), ('hkg', 135.14921000000001), ('syd', 163.44170500000001), ('sjc', 165.72267600000001)]
</snippet></ROW><ROW><id>17054395</id><snippet>tree = QTreeWidget()

def delItem(e):
    if e.reason() == QContextMenuEvent.Mouse:
        itemClicked = tree.itemAt(e.pos())
        for topItem in range(0,tree.topLevelItemCount()):
            topItem = tree.topLevelItem(topItem)
            if topItem.isSelected():
                tree.takeTopLevelItem(tree.indexOfTopLevelItem(topItem))
            else:
                def checkChildren(item):
                    if item.childCount() &gt;= 0:
                        for childItem in range(0,item.childCount()):
                            childItem = item.child(childItem)
                            if childItem.isSelected():
                                item.removeChild(childItem)
                            else:
                                childItem.checkChildren()
                checkChildren(topItem)

tree.contextMenuEvent = delItem
</snippet></ROW><ROW><id>17054416</id><snippet>idmap = {}
idmap[id(x)] = y
</snippet></ROW><ROW><id>17054416</id><snippet>id</snippet></ROW><ROW><id>17054416</id><snippet>x</snippet></ROW><ROW><id>17054465</id><snippet>i</snippet></ROW><ROW><id>17054465</id><snippet>func_ea = [j for j in Functions() if name in GetFunctionName(j)]
</snippet></ROW><ROW><id>17054479</id><snippet>DOWNLOAD_DELAY</snippet></ROW><ROW><id>17054479</id><snippet>HTTPCACHE_ENABLED</snippet></ROW><ROW><id>17054479</id><snippet>BaseSpider</snippet></ROW><ROW><id>17054479</id><snippet>Request</snippet></ROW><ROW><id>17054479</id><snippet>parse</snippet></ROW><ROW><id>17054479</id><snippet>curl</snippet></ROW><ROW><id>17054479</id><snippet>wget</snippet></ROW><ROW><id>17054511</id><snippet>#!/usr/bin/env python
from multiprocessing import Process, Queue
from Queue import Empty
from PIL import Image
import cv2
import cv2.cv as cv
import numpy as np

def image_display(taskqueue):
   cv2.namedWindow ('image_display', cv2.CV_WINDOW_AUTOSIZE)
   while True:

      image = taskqueue.get()              # Added
      if image is None:  break             # Added
      cv2.imshow ('image_display', image)  # Added
      cv2.waitKey(10)                      # Added
      continue                             # Added

      if taskqueue.get()==None:
         continue
      else:
         image = taskqueue.get()
         im = Image.fromstring(image['mode'], image['size'], image['pixels'])
         num_im = np.asarray(im)
         cv2.imshow ('image_display', num_im)


if __name__ == '__main__':
   taskqueue = Queue()
   vidFile = cv2.VideoCapture('doppler.wmv')
   p = Process(target=image_display, args=(taskqueue,))
   p.start()
   while True:
      flag, image=vidFile.read()

      taskqueue.put(image)  # Added
      import time           # Added
      time.sleep(0.010)     # Added
      continue              # Added

      if flag == 0:
         break
      im = Image.fromarray(image)
      im_dict = {
      'pixels': im.tostring(),
      'size': im.size,
      'mode': im.mode,
      }
      taskqueue.put(im_dict)

taskqueue.put(None)
p.join()
cv.DestroyAllWindows()
</snippet></ROW><ROW><id>17054511</id><snippet># Added</snippet></ROW><ROW><id>17054511</id><snippet>imshow()</snippet></ROW><ROW><id>17054511</id><snippet>waitKey()</snippet></ROW><ROW><id>17054511</id><snippet>imshow()</snippet></ROW><ROW><id>17054511</id><snippet>None</snippet></ROW><ROW><id>17054543</id><snippet>Ctrl+Z</snippet></ROW><ROW><id>17054543</id><snippet>Ctrl+Z</snippet></ROW><ROW><id>17054543</id><snippet>bg</snippet></ROW><ROW><id>17054646</id><snippet>concat</snippet></ROW><ROW><id>17054646</id><snippet>set_value</snippet></ROW><ROW><id>17054646</id><snippet>In [10]: numbers = np.array(words[:words.index('***END')]).astype('int')

In [11]: columns = ['AA', 'BB', 'CC', 'DD']

In [12]: dd = DataFrame(numbers.reshape(-1, 4), columns=columns)

In [13]: dd
Out[13]: 
    AA    BB    CC  DD
0  302  1208  1208   0
1  179  1208  1208   0
2  904   233   233   0
</snippet></ROW><ROW><id>17054646</id><snippet>-1</snippet></ROW><ROW><id>17054663</id><snippet>$inc</snippet></ROW><ROW><id>17054663</id><snippet>mongo_db.campaign.update({'_id': str(campaign_id)}, {'$inc': {'item': 1}})
</snippet></ROW><ROW><id>17054885</id><snippet>if count &gt; 0:
  count += 0
else:
  mylist.append(i)
</snippet></ROW><ROW><id>17054885</id><snippet>else</snippet></ROW><ROW><id>17054885</id><snippet>if</snippet></ROW><ROW><id>17054932</id><snippet>MKL_NUM_THREADS</snippet></ROW><ROW><id>17054932</id><snippet>numpy</snippet></ROW><ROW><id>17054932</id><snippet>export MKL_NUM_THREADS=1</snippet></ROW><ROW><id>17055185</id><snippet>__name__ == '__main__'</snippet></ROW><ROW><id>17055185</id><snippet>print</snippet></ROW><ROW><id>17055287</id><snippet>filter</snippet></ROW><ROW><id>17055287</id><snippet>uuids = ProblemSet.objects.filter(problems__problem_type__name='MyProblemType')
    .values_list('uuid', flat=True)
</snippet></ROW><ROW><id>17055287</id><snippet>problem_type</snippet></ROW><ROW><id>17055287</id><snippet>ManyToManyField</snippet></ROW><ROW><id>17055287</id><snippet>problem_types</snippet></ROW><ROW><id>17055287</id><snippet>ManyToManyField</snippet></ROW><ROW><id>17055349</id><snippet>&gt;&gt;&gt; import uuid
&gt;&gt;&gt; str(uuid.uuid4())
  &gt; '3afc84bb-6d73-4482-806a-6b3a29e43bca'
</snippet></ROW><ROW><id>17055479</id><snippet>auth</snippet></ROW><ROW><id>17055479</id><snippet>Authorization</snippet></ROW><ROW><id>17055479</id><snippet>r = request.post(url, data=xml, headers={'Content-Type': 'application/xml'})
</snippet></ROW><ROW><id>17055479</id><snippet>xml=b"&lt;authCommand&gt;&lt;userID&gt;sdm@company.com&lt;/authCommand&gt;..."</snippet></ROW><ROW><id>17055699</id><snippet>from socket import *
import threading
import time

class PingerThread (threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)

    def run (self):
        for i in range(10):
          print 'start thread'
          cs = socket(AF_INET, SOCK_DGRAM)
          cs.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
          cs.setsockopt(SOL_SOCKET, SO_BROADCAST, 1)
          cs.sendto('This is a test', ('192.168.1.3', 4499))
          time.sleep(1)

a = PingerThread() 
a.start()


cs = socket(AF_INET, SOCK_DGRAM)
try:
    cs.bind(('192.168.1.3', 4499))
except:
    print 'failed to bind'
    cs.close()
    raise
    cs.blocking(0)
data = cs.recvfrom(1024) # &lt;-- waiting forever
print data
</snippet></ROW><ROW><id>17055723</id><snippet>data</snippet></ROW><ROW><id>17055723</id><snippet>files</snippet></ROW><ROW><id>17055723</id><snippet>def sendFileToWebService(filename, subpage):
    error = None
    try:
        response = requests.post(WEBSERVICE_IP + subpage,
                                 data=open(filename, 'rb'))
        data = json.load(response)
(...)
</snippet></ROW><ROW><id>17055723</id><snippet>files</snippet></ROW><ROW><id>17055723</id><snippet>multipart/form-data</snippet></ROW><ROW><id>17055937</id><snippet>&gt;&gt;&gt; data_block[0,:,:][:,ind_slice].shape
(480L, 300L)
</snippet></ROW><ROW><id>17055937</id><snippet>x[ind1,...,ind2,:]</snippet></ROW><ROW><id>17055937</id><snippet>x[ind1][...,ind2,:]</snippet></ROW><ROW><id>17055937</id><snippet>ind_slice</snippet></ROW><ROW><id>17056071</id><snippet>pic = makePicture(file)
</snippet></ROW><ROW><id>17056071</id><snippet>makePicture</snippet></ROW><ROW><id>17056071</id><snippet>file</snippet></ROW><ROW><id>17056071</id><snippet>pic</snippet></ROW><ROW><id>17056071</id><snippet>pic</snippet></ROW><ROW><id>17056071</id><snippet>show</snippet></ROW><ROW><id>17056071</id><snippet>pic</snippet></ROW><ROW><id>17056071</id><snippet>makePicture(file)</snippet></ROW><ROW><id>17056071</id><snippet>show</snippet></ROW><ROW><id>17056071</id><snippet>pic</snippet></ROW><ROW><id>17056071</id><snippet>pic</snippet></ROW><ROW><id>17056253</id><snippet>to_datetime</snippet></ROW><ROW><id>17056253</id><snippet>datetime_format = '%H:%M:%S.%f' # tweak depending on format of dates

df.index = pd.to_datetime(df.index, format=format_datetime)
</snippet></ROW><ROW><id>17056253</id><snippet>to_datetime</snippet></ROW><ROW><id>17056366</id><snippet>for line in input_list:

        # Create a MIME text message and populate its values
        msg = MIMEText(line)
</snippet></ROW><ROW><id>17056366</id><snippet>server.sendmail</snippet></ROW><ROW><id>17056405</id><snippet>from Tkinter import*

class MyOptionMenu(OptionMenu):
    def __init__(self, master, status, *options):
        self.var = StringVar(master)
        self.var.set(status)
        OptionMenu.__init__(self, master, self.var, *options)
        self.config(font=('calibri',(10)),bg='white',width=12)
        self['menu'].config(font=('calibri',(10)),bg='white')

root = Tk()
mymenu1 = MyOptionMenu(root, 'Select status', 'a','b','c')
mymenu2 = MyOptionMenu(root, 'Select another status', 'd','e','f')
mymenu1.pack()
mymenu2.pack()
root.mainloop()
</snippet></ROW><ROW><id>17056405</id><snippet>__init__</snippet></ROW><ROW><id>17056457</id><snippet>numpy.median</snippet></ROW><ROW><id>17056457</id><snippet>import numpy as np
foo_array = [38,26,14,55,31,0,15,8,0,0,0,18,40,27,3,19,0,49,29,21,5,38,29,17,16]
foo = np.array(foo_array)
# Compute the median of the non-zero elements
m = np.median(foo[foo &gt; 0])
# Assign the median to the zero elements 
foo[foo == 0] = m
</snippet></ROW><ROW><id>17056467</id><snippet>yield</snippet></ROW><ROW><id>17056467</id><snippet>f.read()</snippet></ROW><ROW><id>17056467</id><snippet>process_data()</snippet></ROW><ROW><id>17056467</id><snippet>f = open(file, 'rb') while True:
    piece = f.read(1024)  
    if not piece:
        break
    process_data(piece)
f.close()
</snippet></ROW><ROW><id>17056471</id><snippet>getattr</snippet></ROW><ROW><id>17056471</id><snippet>property_name = getattr(Game, dictname)
</snippet></ROW><ROW><id>17056513</id><snippet>cs.collections</snippet></ROW><ROW><id>17056513</id><snippet>cs.levels</snippet></ROW><ROW><id>17056513</id><snippet>lookup = dict(zip(cs.collections, cs.levels))
z = lookup[line_collection_artist]
</snippet></ROW><ROW><id>17056513</id><snippet>import numpy as np
import matplotlib.pyplot as plt

def main():
    fig, ax = plt.subplots()
    cs = ax.contour(np.random.random((10,10)))

    callback = ContourCallback(cs)
    plt.setp(cs.collections, picker=5)
    fig.canvas.mpl_connect('pick_event', callback)

    plt.show()

class ContourCallback(object):
    def __init__(self, cs):
        self.lookup = dict(zip(cs.collections, cs.levels))

    def __call__(self, event):
        print self.lookup[event.artist]

main()
</snippet></ROW><ROW><id>17056574</id><snippet>&lt;a href="{{ ''.join(['http://', entry.Url]) }}"&gt;{{ entry.Url }}&lt;/a&gt;

# entry.Url == www.google.com
# &lt;a href="http://www.google.com"&gt;www.google.com&lt;/a&gt;
</snippet></ROW><ROW><id>17056606</id><snippet>ForeignKey</snippet></ROW><ROW><id>17056606</id><snippet>class Contracts(models.Model):
  parentorg = models.ForeignKey(Parentorgs)
  ...
</snippet></ROW><ROW><id>17056606</id><snippet> Contracts.objects.create(parentorg = self.parentOrg, ...)
</snippet></ROW><ROW><id>17056606</id><snippet>parentorg_id</snippet></ROW><ROW><id>17056606</id><snippet>id</snippet></ROW><ROW><id>17056606</id><snippet>self.parentOrg</snippet></ROW><ROW><id>17056606</id><snippet>Contact</snippet></ROW><ROW><id>17056606</id><snippet>Contracts</snippet></ROW><ROW><id>17056606</id><snippet>parentorg_id</snippet></ROW><ROW><id>17056606</id><snippet>Parentorgs</snippet></ROW><ROW><id>17056611</id><snippet>import csv
with open ('data.txt', 'r') as f:
    first_column = [row[0] for row in csv.reader(f,delimiter='\t')]
    print (first_column[1:])
</snippet></ROW><ROW><id>17056849</id><snippet>return count</snippet></ROW><ROW><id>17056849</id><snippet>findDivisors()</snippet></ROW><ROW><id>17056849</id><snippet>findDivisors()</snippet></ROW><ROW><id>17056849</id><snippet>decrease=decrease-1</snippet></ROW><ROW><id>17056849</id><snippet>if</snippet></ROW><ROW><id>17056849</id><snippet>count</snippet></ROW><ROW><id>17056849</id><snippet>main()</snippet></ROW><ROW><id>17056849</id><snippet>main()</snippet></ROW><ROW><id>17056849</id><snippet>findDivisors()</snippet></ROW><ROW><id>17056849</id><snippet>print</snippet></ROW><ROW><id>17056849</id><snippet>print(findDivisors(number))</snippet></ROW><ROW><id>17057044</id><snippet>color = 'hsl(%d, %d%%, %d%%)' % (hue, saturation, luminance)
draw.point((x, y), fill=color)
</snippet></ROW><ROW><id>17057155</id><snippet>float()</snippet></ROW><ROW><id>17057155</id><snippet>import csv
with open ('data.txt', 'r') as f:
    col_one = [float(row[0]) for index, row in enumerate(csv.reader(f, delimiter= '\t')) if index != 0]
</snippet></ROW><ROW><id>17057293</id><snippet>import codecs
import csv

with codecs.open('eprime.txt', encoding='utf-16') as f, open('output.csv', 'w') as fout:
    writer = csv.writer(fout, delimiter='\t')
    writer.writerow(['Subject', 'itemID', 'bias1Answer'])
    for line in f:
        if ':' in line:
            value = line.split()[-1]

        if 'Subject:' in line:
            subject = value
        elif 'itemID:' in line:
            itemID = value
        elif 'bias1Answer:' in line:
            bias1Answer = value
            writer.writerow([subject, itemID, bias1Answer])
</snippet></ROW><ROW><id>17057368</id><snippet>&gt;&gt;&gt; def callsomething(x):
...     if x in (3,4,5,6): pass
... 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(callsomething)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               5 ((3, 4, 5, 6))
              6 COMPARE_OP               6 (in)
              9 POP_JUMP_IF_FALSE       15
             12 JUMP_FORWARD             0 (to 15)
        &gt;&gt;   15 LOAD_CONST               0 (None)
             18 RETURN_VALUE        
</snippet></ROW><ROW><id>17057368</id><snippet>x</snippet></ROW><ROW><id>17057368</id><snippet>set</snippet></ROW><ROW><id>17057368</id><snippet>&gt;&gt;&gt; def callsomething(x):
...     if x in {3,4,5,6}: pass
... 
&gt;&gt;&gt; dis.dis(callsomething)
  2           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (3)
              6 LOAD_CONST               2 (4)
              9 LOAD_CONST               3 (5)
             12 LOAD_CONST               4 (6)
             15 BUILD_SET                4
             18 COMPARE_OP               6 (in)
             21 POP_JUMP_IF_FALSE       27
             24 JUMP_FORWARD             0 (to 27)
        &gt;&gt;   27 LOAD_CONST               0 (None)
             30 RETURN_VALUE      
</snippet></ROW><ROW><id>17057368</id><snippet>Python 3.3.0 (default, Sep 29 2012, 17:17:45) 
[GCC 4.7.2] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def callsomething(x):
...     if x in {3,4,5,6}: pass
... 
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(callsomething)
  2           0 LOAD_FAST                0 (x) 
              3 LOAD_CONST               5 (frozenset({3, 4, 5, 6})) 
              6 COMPARE_OP               6 (in) 
              9 POP_JUMP_IF_FALSE       15 
             12 JUMP_FORWARD             0 (to 15) 
        &gt;&gt;   15 LOAD_CONST               0 (None) 
             18 RETURN_VALUE         
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17057538</id><snippet>timeit</snippet></ROW><ROW><id>17057538</id><snippet>dis</snippet></ROW><ROW><id>17057538</id><snippet>timeit</snippet></ROW><ROW><id>17057538</id><snippet>dis</snippet></ROW><ROW><id>17057578</id><snippet>$ python
Python 2.5.1 (r251:54863, May  5 2011, 18:37:34) 
[GCC 4.0.1 (Apple Inc. build 5465)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import subprocess
&gt;&gt;&gt; cmd = ['ls', 'fds']
&gt;&gt;&gt; proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE) 
&gt;&gt;&gt; stdout, stderr = proc.communicate()
&gt;&gt;&gt; stdout
''
&gt;&gt;&gt; stderr
'ls: fds: No such file or directory\n'
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17057603</id><snippet>split</snippet></ROW><ROW><id>17057603</id><snippet>&gt;&gt;&gt; '\\'.join(existGDBPath.split('\\')[0:-1])
'T:\\Data\\DBDesign'
</snippet></ROW><ROW><id>17057603</id><snippet>os.path.dirname</snippet></ROW><ROW><id>17057603</id><snippet>abspath</snippet></ROW><ROW><id>17057603</id><snippet>&gt;&gt;&gt; os.path.dirname(os.path.abspath(existGDBPath))
'T:\\Data\\DBDesign'
</snippet></ROW><ROW><id>17057603</id><snippet>os.path.split</snippet></ROW><ROW><id>17057603</id><snippet>&gt;&gt;&gt; os.path.split(os.path.abspath(existGDBPath))
('T:\\Data\\DBDesign', 'DBDesign_93_v141b.mdb')
</snippet></ROW><ROW><id>17057729</id><snippet>&gt;&gt;&gt; z = [x.split(',')[1].strip().strip(')') for x in s.split('),')]
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for i in z:
...    b = i.split('-')
...    d[b[1]].append(b[0])
...
&gt;&gt;&gt; ' '.join(' '.join(d[t]) for t in sorted(d.keys(), key=int))
'is This an example example'
</snippet></ROW><ROW><id>17057729</id><snippet>example</snippet></ROW><ROW><id>17057729</id><snippet>example</snippet></ROW><ROW><id>17057729</id><snippet>&gt;&gt;&gt; ' '.join(e for t in sorted(d.keys(), key=int) for e in set(d[t]))
'is This an example'
</snippet></ROW><ROW><id>17057737</id><snippet>import re

def salary_band(val):
    currency = 'EUR' if 'EUR' in val else 'GBP'
    numbers = re.findall("[0-9.\,]*", val) # this will have a bunch of empty entries and two numbers
    numbers = [i.replace(",","") for i in numbers if i] # filter out empty strings, remove commas
    numbers = map(float, numbers) # convert to floats
    annual = lambda p: int(p) if p &gt; 2000 else int( p * 1800) # your number here...
    return currency, map(annual, numbers)

print salary_band ( "gbp37.50 - gbp50.00")
print salary_band ( "EUR25,000 - EUR30,000")
&gt;&gt; ('GBP', [75000, 100000])
&gt;&gt; ('EUR', [25000, 30000])
</snippet></ROW><ROW><id>17058064</id><snippet>$ cd /dev/shm
$ unizp /path/to/my.apk
</snippet></ROW><ROW><id>17058082</id><snippet>csv</snippet></ROW><ROW><id>17058082</id><snippet>import csv

with open('data.txt') as f:
    reader = csv.DictReader(f, delimiter='\t')
    rows = list(reader)
</snippet></ROW><ROW><id>17058082</id><snippet>rows</snippet></ROW><ROW><id>17058082</id><snippet>names = [i['name'] for i in rows]
heights = [float(i['height']) if i['height'] else 0.0 for i in rows]
weights = [float(i['weight']) if i['weight'] else 0.0 for i in rows]
</snippet></ROW><ROW><id>17058107</id><snippet>pType == 1 or 2 
</snippet></ROW><ROW><id>17058107</id><snippet>if pType in (1, 2) 
</snippet></ROW><ROW><id>17058107</id><snippet>if pType == 1 or pType == 2. 
</snippet></ROW><ROW><id>17058107</id><snippet>if ((pType == 1) or (4))
</snippet></ROW><ROW><id>17058359</id><snippet> file = codecs.open(path, 'r',encoding='utf-8')
</snippet></ROW><ROW><id>17058388</id><snippet>i</snippet></ROW><ROW><id>17058388</id><snippet>str(i)</snippet></ROW><ROW><id>17058388</id><snippet>dummy = [ ('./name[@val="1"]/Output' + str(i) ) for i in xrange(0,5)]
</snippet></ROW><ROW><id>17058388</id><snippet>[ './name[@val="1"]/Output{0}'.format(i)  for i in xrange(0,5)]
</snippet></ROW><ROW><id>17058489</id><snippet>startActivity</snippet></ROW><ROW><id>17058489</id><snippet>device.startActivity( "", "android.settings.APPLICATION_DETAILS_SETTINGS", "&lt;package name&gt;" );
</snippet></ROW><ROW><id>17058536</id><snippet>text = ''
while True: # change this condition.
    text += input('''Enter the paragraph :''')+'\n' #UPDATED. Appended a \n character.
</snippet></ROW><ROW><id>17058536</id><snippet>text = ''
while True:
    dummy = input('''Enter the paragraph :''')+'\n'
    if dummy=='\n':
        break
    text += dummy
</snippet></ROW><ROW><id>17058579</id><snippet>handleResponsePart</snippet></ROW><ROW><id>17058579</id><snippet>handleResponseEnd</snippet></ROW><ROW><id>17058609</id><snippet>import logging
from logging.handlers import RotatingFileHandler
 import  blackboard

WEBAPP_CONSTANTS = {
'LOGFILE': '/home/ai/Desktop/home/ubuntu/LCF/GA-LCF/ga.log',
}
def getWebAppConstants(constant):
     return WEBAPP_CONSTANTS.get(constant, False)

LOGFILE = getWebAppConstants('LOGFILE')
log_handler = RotatingFileHandler(LOGFILE, maxBytes=1048576, backupCount=5)
log_handler.setFormatter(logging.Formatter( '%(asctime)s %(levelname)s: %(message)s ' '[in %(pathname)s:%(lineno)d]'))
applogger = logging.getLogger("GA")
applogger.setLevel(logging.DEBUG)
applogger.addHandler(log_handler)
applogger.debug("Starting of Genetic Algorithm")

from pyevolve import *

def eval_func(chromosome):
     some function here
</snippet></ROW><ROW><id>17058739</id><snippet>zip</snippet></ROW><ROW><id>17058739</id><snippet>numpy</snippet></ROW><ROW><id>17058739</id><snippet>.T</snippet></ROW><ROW><id>17058739</id><snippet>dot</snippet></ROW><ROW><id>17058739</id><snippet>b = b - np.dot(np.dot(linalg.inv(np.dot(J.T, J)), J.T), r(b))
</snippet></ROW><ROW><id>17059065</id><snippet>import dbf      
import os
from glob import glob

if __name__ == '__main__':
    # get interesting dbf file names
    ROfiles = set(glob(r"C:\Users\jcm\Desktop\RO\*(Wide)*.dbf"))

    merged_dbf = None

    # Read a database
    for dbf_filename in ROfiles:
        with dbf.Table(dbf_filename) as table:

            # create merged dbf if it hasn't been
            if merged_dbf is None:
                merged_dbf = table.new('merged')

            with merged_dbf:
                # merge in records
                for record in table:
                    merged_dbf.append(record)

                #Create a new csv from merged_dbf
                dbf.export(merged_dbf, 'catwomen')
</snippet></ROW><ROW><id>17059277</id><snippet>firstbyte &amp; 0b111111
</snippet></ROW><ROW><id>17059277</id><snippet>((firstbyte &amp; 0b111111) &lt;&lt; 8) + secondbyte
</snippet></ROW><ROW><id>17059394</id><snippet>collections.Counter</snippet></ROW><ROW><id>17059394</id><snippet>&gt;&gt;&gt; import datetime
&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; C = Counter()
&gt;&gt;&gt; L =     [{'campaign_id': 'cid2504649263',
...   'country': 'AU',
...   'count': 3000,            # &lt;== changed this to "count"
...   'region': 'Cairns',
...   'utcdt': datetime.datetime(2013, 6, 4, 6, 0)},
...  {'campaign_id': 'cid2504649263',
...   'country': 'AU',
...   'count': 3000,
...   'region': 'Cairns',
...   'utcdt': datetime.datetime(2013, 6, 4, 6, 0)},
...  {'campaign_id': 'cid2504649263',
...   'country': 'AU',
...   'count': 3000,
...   'region': 'Cairns',
...   'utcdt': datetime.datetime(2013, 6, 4, 7, 0)}]
&gt;&gt;&gt; for item in L:                        # The ... represents the rest of the key
...     C[item['campaign_id'], item['country'], ...,  item['utcdt']] += item['count']
...
C
Counter({('cid2504649263', 'AU', datetime.datetime(2013, 6, 4, 6, 0)): 6000, ('cid2504649263', 'AU', datetime.datetime(2013, 6, 4, 7, 0)): 3000})
</snippet></ROW><ROW><id>17059404</id><snippet>filename</snippet></ROW><ROW><id>17059404</id><snippet>'Test string.'</snippet></ROW><ROW><id>17059404</id><snippet>filename[-4]</snippet></ROW><ROW><id>17059404</id><snippet>'i'</snippet></ROW><ROW><id>17059404</id><snippet>False</snippet></ROW><ROW><id>17059580</id><snippet>def testChatChars(string):
   return re.match(r'[\x20-\x5A\x5C\x5E-\x7E]+$', string) is not None
</snippet></ROW><ROW><id>17059653</id><snippet>import numpy as np
for i in finalvalues.values():
    print np.percentile(map(int,i),95)
</snippet></ROW><ROW><id>17059923</id><snippet>product</snippet></ROW><ROW><id>17059923</id><snippet>&gt;&gt;&gt; from itertools import product
&gt;&gt;&gt; [''.join(i) for i in product('ABC',repeat=3)]
['AAA', 'AAB', 'AAC', 'ABA', 'ABB', 'ABC', 'ACA', 'ACB', 'ACC', 'BAA', 'BAB', 'B
AC', 'BBA', 'BBB', 'BBC', 'BCA', 'BCB', 'BCC', 'CAA', 'CAB', 'CAC', 'CBA', 'CBB'
, 'CBC', 'CCA', 'CCB', 'CCC']
</snippet></ROW><ROW><id>17060214</id><snippet>{process.pid: process.exe for process in psutil.process_iter() if process.pid}
</snippet></ROW><ROW><id>17060409</id><snippet>&gt;&gt;&gt; n = 2
&gt;&gt;&gt; groups = text.split('_')
&gt;&gt;&gt; '_'.join(groups[:n]), '_'.join(groups[n:])
('20_231', 'myString_234')
</snippet></ROW><ROW><id>17060438</id><snippet>.</snippet></ROW><ROW><id>17060438</id><snippet>pattern=re.compile(source_resource + '[&amp;\.]')
</snippet></ROW><ROW><id>17060714</id><snippet>[section name][item name]</snippet></ROW><ROW><id>17060714</id><snippet>import ConfigParser
from pprint import pprint
cfg = ConfigParser.ConfigParser()
cfg.read('config.cfg')
CONFIG_DATA = {}
for section_name in cfg.sections():
    CONFIG_DATA[section_name] = {}
    for item_name in cfg.items(section_name):
        CONFIG_DATA[section_name][item_name] = cfg.get(section_name, item_name)
pprint(CONFIG_DATA)
</snippet></ROW><ROW><id>17060796</id><snippet>def get_unique_index():
    env.DUP_LOCKER.acquire()
    result = env.UNIQUE_ID.value
    env.UNIQUE_ID.value = result + 1
    env.DUP_LOCKER.release()
    return result
</snippet></ROW><ROW><id>17060796</id><snippet>env.UNIQUE_ID.value = 0
env.DUP_LOCKER = Lock()
</snippet></ROW><ROW><id>17060826</id><snippet>from __future__ import division

import math
height = int(raw_input('Height: '))
weight = int(raw_input('Weight: '))
v = math.sqrt(2)*height*weight
mass = int(raw_input('mass: '))
K_E = 1/2*(mass*v**2)
print K_E
</snippet></ROW><ROW><id>17060826</id><snippet>1/2</snippet></ROW><ROW><id>17060826</id><snippet>0.5</snippet></ROW><ROW><id>17060826</id><snippet>0</snippet></ROW><ROW><id>17061273</id><snippet>return ' '.join(upsplit[:word-1] + 
                        [self._oun(upsplit[word-1], 1) or upsplit[word] +
                        '-' + upsplit[word] + '-']) + \
                        ' '.join(upsplit[(word+1):])
</snippet></ROW><ROW><id>17061318</id><snippet>A = (('parlament',) +
     (('queen/king',) if not country in ('england', 'sweden', …) else tuple()) +
     ('press', 'judges'))
</snippet></ROW><ROW><id>17061318</id><snippet>A = ('parlament',
     'queen/king' if not country in ('england', 'sweden', …) else 'default',
     'press', 'judges')
</snippet></ROW><ROW><id>17061370</id><snippet>r'(?:^|\s)([\w\d]+)=((?:[^\\\s=]+|\\.)+)(?=\s|$)'
                                ^     ^
</snippet></ROW><ROW><id>17061370</id><snippet>r'(?:^|\s)([\w\d]+)=((?:[^\\\s=]|\\.)+)(?=\s|$)'
</snippet></ROW><ROW><id>17061370</id><snippet>s = r'a=b c=d e=aaaaaaa\bbbbbbbb\ccccccccc=ddddddddd\eeeee'
</snippet></ROW><ROW><id>17061370</id><snippet>e=</snippet></ROW><ROW><id>17061415</id><snippet>print(soup.prettify().encode('utf-8'))
</snippet></ROW><ROW><id>17061417</id><snippet>atexit</snippet></ROW><ROW><id>17061432</id><snippet>import os
import Image
import pyexiv2

fp = '/home/klaus/workspace'
fn = 'img_2380.jpg'

full_path = os.path.join(fp, fn)
print full_path

im = Image.open(full_path)
size = 512, 512
im.thumbnail(size, Image.ANTIALIAS)
im.save('bla.jpg', 'JPEG')

oldmeta = pyexiv2.ImageMetadata(full_path)
oldmeta.read()
# read metadata of the original file

newmeta = pyexiv2.ImageMetadata('bla.jpg')
newmeta.read()
# read metadata of the new file
# yes, there aren't any, but this is crucial!
# you need this class as the target for copying!

oldmeta.copy(newmeta)

newmeta.write()
# don't forget to write the data to the new file
</snippet></ROW><ROW><id>17061438</id><snippet>import images
...
myimage1 = PhotoImage(data=images.image1)
myimage2 = PhotoImage(data=images.image2)
...
</snippet></ROW><ROW><id>17061438</id><snippet>image1 = 'encoded image data...'
image2 = 'encoded image data...'
</snippet></ROW><ROW><id>17061447</id><snippet>cvpartition</snippet></ROW><ROW><id>17061862</id><snippet>result = [sublist for sublist in 
        (lst[x:x+size] for x in range(len(lst) - size + 1))
        if item not in sublist
    ]
</snippet></ROW><ROW><id>17061862</id><snippet>result = []
start = 0
while start &lt; len(lst):
    try:
        end = lst.index(item, start + 1)
    except ValueError:
        end = len(lst)
    result.extend(lst[x+start:x+start+size] for x in range(end - start - size + 1))
    start = end + 1
</snippet></ROW><ROW><id>17061972</id><snippet>class A(object):
    # stuff for A goes here
class B(object):
    # stuff for B goes here
class C(A, B):
    # stuff for C should come from A and B.
</snippet></ROW><ROW><id>17062008</id><snippet>import os
import subprocess

path = '/tmp/mypipe'
if not os.path.exists(path):
    os.mkfifo(path)

with open(path, 'w') as f:
    subprocess.call(['cat'], stdout=f)
</snippet></ROW><ROW><id>17062287</id><snippet>url</snippet></ROW><ROW><id>17062287</id><snippet>response</snippet></ROW><ROW><id>17062287</id><snippet>&gt;&gt;&gt; response = requests.get('http://bit.ly/bllsht')
&gt;&gt;&gt; response.url
  &gt; u'http://www.thenews.org/sports/well-hey-there-murray-state-1-21-11-1.2436937'
</snippet></ROW><ROW><id>17062582</id><snippet>class Delish:
  # This is a class variable. 
  # All instances can refer to this as self.foo
  foo = 42 

  def __init__(self,array):
    self.ing = [] # This is an instance variable
    self.rmax = []
    self.rmin = []
    self.lmax = []
    self.lmin = []
    self.answer = 0
    self.ing = list(array)
    self.rightmax()
    self.rightmin()
    self.leftmax()
    self.leftmin()
    self.calculate()
</snippet></ROW><ROW><id>17062616</id><snippet>with open("enc.txt","r") as f:
    content = f.read()

import re

def unicodize(seg):
    if re.match(r'\\u[0-9a-f]{4}', seg):
        return seg.decode('unicode-escape')

    return seg.decode('utf-8')

replaced = (unicodize(seg) for seg in re.split(r'(\\u[0-9a-f]{4})',content))

print(''.join(replaced))
</snippet></ROW><ROW><id>17062616</id><snippet> * Cette m\u00e9thode permet d'appeller le service du module de
 * tourn\u00e9e
 * &lt;code&gt;rechercherTechnicien&lt;/code&gt; et retourne la liste
 * repr\u00e9sentant le num\u00e9ro 
 * de la tourn\u00e9e ainsi que le nom et le pr\u00e9nom du technicien
 * et la dur\u00e9e 
 * th\u00e9orique por se rendre au point d'intervention.
 * 
 * S'il le désire le technicien peut dormir à l'hôtel
</snippet></ROW><ROW><id>17062616</id><snippet> * Cette méthode permet d'appeller le service du module de
 * tournée
 * &lt;code&gt;rechercherTechnicien&lt;/code&gt; et retourne la liste
 * représentant le numéro 
 * de la tournée ainsi que le nom et le prénom du technicien
 * et la durée 
 * théorique por se rendre au point d'intervention.
 * 
 * S'il le désire le technicien peut dormir à l'hôtel
</snippet></ROW><ROW><id>17062619</id><snippet>str(object='')
str(object=b'', encoding='utf-8', errors='strict')
</snippet></ROW><ROW><id>17062619</id><snippet>encoding</snippet></ROW><ROW><id>17062619</id><snippet>errors</snippet></ROW><ROW><id>17062619</id><snippet>encoding</snippet></ROW><ROW><id>17062619</id><snippet>errors</snippet></ROW><ROW><id>17062619</id><snippet>object</snippet></ROW><ROW><id>17062619</id><snippet>bytes</snippet></ROW><ROW><id>17062619</id><snippet>bytes</snippet></ROW><ROW><id>17062619</id><snippet>bytearray</snippet></ROW><ROW><id>17062619</id><snippet>object</snippet></ROW><ROW><id>17062619</id><snippet>bytes</snippet></ROW><ROW><id>17062619</id><snippet>bytearray</snippet></ROW><ROW><id>17062619</id><snippet>str(bytes, encoding, errors)</snippet></ROW><ROW><id>17062619</id><snippet>bytes.decode(encoding, errors)</snippet></ROW><ROW><id>17062619</id><snippet>bytes</snippet></ROW><ROW><id>17062619</id><snippet>buffer</snippet></ROW><ROW><id>17062619</id><snippet>bytes.decode()</snippet></ROW><ROW><id>17063397</id><snippet>__init__()</snippet></ROW><ROW><id>17063445</id><snippet>from django.contrib import admin
from models import Publisher, Author, Book

admin.site.register(Publisher)
admin.site.register(Author)
admin.site.register(Book)
</snippet></ROW><ROW><id>17063614</id><snippet>KeyError</snippet></ROW><ROW><id>17063614</id><snippet>type</snippet></ROW><ROW><id>17063614</id><snippet>if line['type']</snippet></ROW><ROW><id>17063614</id><snippet>if line['types']</snippet></ROW><ROW><id>17063614</id><snippet>import csv

f = open('test.csv','rU')
reader = csv.DictReader(f,delimiter=',')

for line in reader:
    print line
    if line['types'] == 'Question':
        print 'The above line has type question'
</snippet></ROW><ROW><id>17063614</id><snippet>{'thread_id': '0', 'posters  ': 'Jan', None: ['Janet', 'Jack'], 'post_id': '1', 'post_content': 'NULL', 'time': '3/1/12 10:45', 'votes_down': '1', 'votes_up': '5', 'author_id': 'Jan', 'types': 'Question'}
The above line has type question
{'thread_id': '0', 'posters  ': 'Jan', None: ['Janet', 'Jack'], 'post_id': '2', 'post_content': 'NULL', 'time': '3/1/12 11:00', 'votes_down': '1', 'votes_up': '2', 'author_id': 'Janet', 'types': 'Answer'}
{'thread_id': '0', 'posters  ': 'Jan', None: ['Janet', 'Jack'], 'post_id': '3', 'post_content': 'NULL', 'time': '3/2/12 8:00', 'votes_down': '0', 'votes_up': '0', 'author_id': 'Jack', 'types': 'Comment'}
{'thread_id': '1', 'posters  ': 'Jason', None: ['Jan', 'Janet'], 'post_id': '4', 'post_content': 'NULL', 'time': '3/4/12 9:00', 'votes_down': '1', 'votes_up': '3', 'author_id': 'Jason', 'types': 'Question'}
The above line has type question
{'thread_id': '1', 'posters  ': 'Jason', None: ['Jan', 'Janet'], 'post_id': '5', 'post_content': 'NULL', 'time': '3/7/12 1:00', 'votes_down': '1', 'votes_up': '3', 'author_id': 'Jan', 'types': 'Answer'}
{'thread_id': '1', 'posters  ': 'Jason', None: ['Jan', 'Janet'], 'post_id': '6', 'post_content': 'NULL', 'time': '3/7/12 2:00', 'votes_down': '2', 'votes_up': '1', 'author_id': 'Janet', 'types': 'Answer'}
</snippet></ROW><ROW><id>17063614</id><snippet>None</snippet></ROW><ROW><id>17063614</id><snippet>attribute error</snippet></ROW><ROW><id>17063615</id><snippet>decode</snippet></ROW><ROW><id>17063615</id><snippet>bytes</snippet></ROW><ROW><id>17063615</id><snippet>decode</snippet></ROW><ROW><id>17063615</id><snippet>encode</snippet></ROW><ROW><id>17063615</id><snippet>str</snippet></ROW><ROW><id>17063615</id><snippet>decode</snippet></ROW><ROW><id>17063615</id><snippet>decode</snippet></ROW><ROW><id>17063615</id><snippet>&lt;unicode&gt;</snippet></ROW><ROW><id>17063615</id><snippet>bytes</snippet></ROW><ROW><id>17063653</id><snippet>ExcelFile</snippet></ROW><ROW><id>17063653</id><snippet>.parse</snippet></ROW><ROW><id>17063653</id><snippet>&gt;&gt;&gt; xl = pd.ExcelFile("dummydata.xlsx")
&gt;&gt;&gt; xl.sheet_names
[u'Sheet1', u'Sheet2', u'Sheet3']
&gt;&gt;&gt; df = xl.parse("Sheet1")
&gt;&gt;&gt; df.head()
                  Tid  dummy1    dummy2    dummy3    dummy4    dummy5  \
0 2006-09-01 00:00:00       0  5.894611  0.605211  3.842871  8.265307   
1 2006-09-01 01:00:00       0  5.712107  0.605211  3.416617  8.301360   
2 2006-09-01 02:00:00       0  5.105300  0.605211  3.090865  8.335395   
3 2006-09-01 03:00:00       0  4.098209  0.605211  3.198452  8.170187   
4 2006-09-01 04:00:00       0  3.338196  0.605211  2.970015  7.765058   

     dummy6  dummy7    dummy8    dummy9  
0  0.623354       0  2.579108  2.681728  
1  0.554211       0  7.210000  3.028614  
2  0.567841       0  6.940000  3.644147  
3  0.581470       0  6.630000  4.016155  
4  0.595100       0  6.350000  3.974442  
</snippet></ROW><ROW><id>17063653</id><snippet>&gt;&gt;&gt; parsed = pd.io.parsers.ExcelFile.parse(xl, "Sheet1")
&gt;&gt;&gt; parsed.columns
Index([u'Tid', u'dummy1', u'dummy2', u'dummy3', u'dummy4', u'dummy5', u'dummy6', u'dummy7', u'dummy8', u'dummy9'], dtype=object)
</snippet></ROW><ROW><id>17063791</id><snippet>In [1]: import networkx as nx

In [2]: G = nx.Graph()

In [3]: G.add_edge(1,2,weight=7)

In [4]: G.add_edge(2,3,weight=10)

In [5]: for u,v,a in G.edges(data=True):
    print u,v,a
   ...:     
1 2 {'weight': 7}
2 3 {'weight': 10}
</snippet></ROW><ROW><id>17063904</id><snippet>str.strip</snippet></ROW><ROW><id>17063904</id><snippet>str.rstrip()</snippet></ROW><ROW><id>17063904</id><snippet>\r</snippet></ROW><ROW><id>17063904</id><snippet>str.split</snippet></ROW><ROW><id>17063904</id><snippet>&gt;&gt;&gt; strs = 'bacarat,baccarat\r'
&gt;&gt;&gt; strs.strip().split(',')
['bacarat', 'baccarat']
</snippet></ROW><ROW><id>17063904</id><snippet>str.rstrip</snippet></ROW><ROW><id>17063904</id><snippet>'\r'</snippet></ROW><ROW><id>17063904</id><snippet>&gt;&gt;&gt; strs.rstrip('\r').split(',')
['bacarat', 'baccarat']
</snippet></ROW><ROW><id>17063904</id><snippet>str.strip</snippet></ROW><ROW><id>17063904</id><snippet>'\n'</snippet></ROW><ROW><id>17063904</id><snippet>'\r'</snippet></ROW><ROW><id>17063904</id><snippet>'\t'</snippet></ROW><ROW><id>17063904</id><snippet>str.replace</snippet></ROW><ROW><id>17063904</id><snippet>'\r'</snippet></ROW><ROW><id>17063904</id><snippet>&gt;&gt;&gt; strs = 'bacarat,baccarat\r'
&gt;&gt;&gt; strs.replace('\r','').split(',')
['bacarat', 'baccarat']
</snippet></ROW><ROW><id>17064124</id><snippet>class ExtendedCurl:
    invpycurl = {v:k for k, v in pycurl.__dict__.items()}
    def __init__(self):
        self._pycurl = pycurl.Curl()
        self._options = {}
    def setopt(self, opt, val):
        self._pycurl.setopt(self, opt, val)
        self._options[opt] = val
    def unsetopt(self, opt):
        self._pycurl.setopt(self, opt, val)
        del self._options[opt]
    def reset(self):
        self._pycurl.setopt(self, opt, val)
        self._options = dict()
    def getopts(self):
        for opt, val in self._options.iteritems():
            if opt in self.invpycurl.keys():
                print "{}: {}".formart(opt, val)
    def errstr(self):
        return self._pycurl.errstr()
    def perform(self):
        return self._pycurl.perform()
    def close(self):
        return self._pycurl.close()
</snippet></ROW><ROW><id>17064124</id><snippet>__enter__</snippet></ROW><ROW><id>17064124</id><snippet>__exit__</snippet></ROW><ROW><id>17064124</id><snippet>pycurl.URL</snippet></ROW><ROW><id>17064175</id><snippet>"sel.first"</snippet></ROW><ROW><id>17064175</id><snippet>"sel.last"</snippet></ROW><ROW><id>17064175</id><snippet>chars = the_text_widget.get("sel.first", "sel.last")
</snippet></ROW><ROW><id>17064175</id><snippet>index</snippet></ROW><ROW><id>17064175</id><snippet>s0 = the_text_widget.index("sel.first")
s1 = the_text_widget.indx("sel.last")
</snippet></ROW><ROW><id>17064175</id><snippet>SEL_FIRST</snippet></ROW><ROW><id>17064175</id><snippet>SEL_LAST</snippet></ROW><ROW><id>17064216</id><snippet>with open(src_path, "r") as in_f, open(dest_path, "w") as out_f:
    for line in in_f:
        if line == "&lt;/END&gt;":
            out_f.write("whatever you want")
        out_f.write(line)
        out_f.write('\n')
</snippet></ROW><ROW><id>17064216</id><snippet>last = 0
with open(src_path, "r+") as f:
    for line in f:
        if line == "&lt;/END&gt;":
            f.seek(last)
            f.write("whatever you want"
            f.write(line) # rewrite the line
            f.write('\n')
        last = f.tell() # This will give us the end of the last line
</snippet></ROW><ROW><id>17064533</id><snippet>li = [1,2,3,4000,5,6,7,8,9000,10,11,12,1300]
r = [[]]  # start with a list containing an empty sub-list
for i in li:
  if i &gt;= 2000:
    # start a new sub-list when we see a big value
    r.append([i])
  else: 
    # append to the last sub-list of r
    r[-1].append(i)
</snippet></ROW><ROW><id>17064625</id><snippet>itertools.product</snippet></ROW><ROW><id>17064625</id><snippet>&gt;&gt;&gt; from string import letters, digits
&gt;&gt;&gt; strs = letters + digits
&gt;&gt;&gt; from itertools import product
def pwd_checker(pwd):
    if 0 &lt;len(pwd) &lt;5:
       for i in xrange(1,5):
           for per in product(strs, repeat = i):
               if "".join(per) == pwd:
                  print 'your password is', "".join(per)
                  return
    else:
       print "Password's length must be between 1 to 4"
...             
&gt;&gt;&gt; pwd_checker('a')
your password is a
&gt;&gt;&gt; pwd_checker('ab12')
your password is ab12
&gt;&gt;&gt; pwd_checker('foo')
your password is foo
&gt;&gt;&gt; pwd_checker('Ab1c')
your password is Ab1c
&gt;&gt;&gt; pwd_checker('aaaa')
your password is aaaa
&gt;&gt;&gt; pwd_checker('BaBa')
your password is BaBa
</snippet></ROW><ROW><id>17064821</id><snippet>QMenu.clear (self)</snippet></ROW><ROW><id>17064821</id><snippet>mymenu = QtGui.QMenu("Menu")

mymenu.clear()
</snippet></ROW><ROW><id>17064998</id><snippet>print('the words in this synset are ' + word[0] + ',' + word[1])
</snippet></ROW><ROW><id>17064998</id><snippet>print ("the words in this synset are {0}".format(", ".join(word)))
</snippet></ROW><ROW><id>17065485</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument("-r", type=int, default=1, metavar='ROWS')
parser.add_argument("-c", type=int, default=2, metavar='COLUMNS')
args = parser.parse_args()
</snippet></ROW><ROW><id>17065485</id><snippet>python test.py -h</snippet></ROW><ROW><id>17065485</id><snippet>usage: test.py [-h] [-r ROWS] [-c COLUMNS]

optional arguments:
  -h, --help  show this help message and exit
  -r ROWS
  -c COLUMNS
</snippet></ROW><ROW><id>17065634</id><snippet>stack = inspect.stack()
the_class = stack[1][0].f_locals["self"].__class__
the_method = stack[1][0].f_code.co_name

print("I was called by {}.{}()".format(str(calling_class), calling_code_name))
# =&gt; I was called by A.a()
</snippet></ROW><ROW><id>17065634</id><snippet>➤ python test.py
A.a()
B.b()
  I was called by __main__.A.a()
</snippet></ROW><ROW><id>17065634</id><snippet>test.py</snippet></ROW><ROW><id>17065634</id><snippet>import inspect

class A:
  def a(self):
    print("A.a()")
    B().b()

class B:
  def b(self):
    print("B.b()")
    stack = inspect.stack()
    the_class = stack[1][0].f_locals["self"].__class__
    the_method = stack[1][0].f_code.co_name
    print("  I was called by {}.{}()".format(str(the_class), the_method))

A().a()
</snippet></ROW><ROW><id>17065706</id><snippet>PATH</snippet></ROW><ROW><id>17065706</id><snippet>/Library/Frameworks/Python.framework/Versions/3.3/bin</snippet></ROW><ROW><id>17065706</id><snippet>/Library/Frameworks/Python.framework/Versions/2.7/bin</snippet></ROW><ROW><id>17065706</id><snippet>~/.bash_profile</snippet></ROW><ROW><id>17065917</id><snippet>obj_create</snippet></ROW><ROW><id>17065946</id><snippet>for</snippet></ROW><ROW><id>17065946</id><snippet>def create_grid(grid):
    table = ''

    for y in range(0, LENGTH * WIDTH, WIDTH):
        table += '|'.join(grid[y:y+WIDTH]) + '\n'

    return table
</snippet></ROW><ROW><id>17065946</id><snippet>while</snippet></ROW><ROW><id>17065946</id><snippet>def create_grid(grid):
    y = 0
    size = LENGTH * WIDTH
    table = ''
    while y &lt; size:
        table += '|'.join(grid[y:y+WIDTH]) + '\n'
        y += WIDTH

    return table
</snippet></ROW><ROW><id>17065946</id><snippet>WIDTH</snippet></ROW><ROW><id>17065946</id><snippet>'|'.join()</snippet></ROW><ROW><id>17065946</id><snippet>def create_grid(grid):
    y = 0
    size = LENGTH * WIDTH
    table = ''
    while y &lt; size:
        x = 0
        while x &lt; WIDTH:
            if x:
                table += '|'
            table += grid[y + x]
            x += 1
        table += '\n'
        y += WIDTH

    return table
</snippet></ROW><ROW><id>17065946</id><snippet>def create_grid(grid):
    y = 0
    size = LENGTH * WIDTH
    table = ''
    while y &lt; LENGTH:
        x = 0
        while x &lt; size:
            if x:
                table += '|'
            table += grid[y + x]
            x += LENGTH
        table += '\n'
        y += 1

    return table
</snippet></ROW><ROW><id>17066014</id><snippet>tempArray = [list(reversed(x)) for x in reversed(self.topArea)]
</snippet></ROW><ROW><id>17066014</id><snippet>tempArray = [x[::-1] for x in reversed(self.topArea)]
</snippet></ROW><ROW><id>17066863</id><snippet>&gt;&gt;&gt; d = {
...     "first":{"a":[{"b":[{"c":"AAA"}]}],"d":111},
...     "second":{"a":[{"b":[{"c":"BBB"},{"c":"CCC"}]}],"d":222}
... }
&gt;&gt;&gt; d['first']['d']
111
&gt;&gt;&gt; import itertools
&gt;&gt;&gt; list(itertools.chain.from_iterable(x.values() for x in d['first']['a'][0]['b']))
['AAA']
&gt;&gt;&gt; list(itertools.chain.from_iterable(x.values() for x in d['second']['a'][0]['b']))
['BBB', 'CCC']
</snippet></ROW><ROW><id>17066863</id><snippet>from itertools import chain
import json

s = '''{
    "first":{"a":[{"b":[{"c":"AAA"}]}],"d":111},
    "second":{"a":[{"b":[{"c":"BBB"},{"c":"CCC"}]}],"d":222}
}'''

from collections import OrderedDict
d = json.loads(s,object_pairs_hook=OrderedDict)  #Keep order of dictionaries

for subdict in d.values():
    print subdict['d']
    chained = chain.from_iterable(x.values() for x in subdict['a'][0]['b'])
    for item in chained:
        print '\t',item
</snippet></ROW><ROW><id>17066992</id><snippet>class TestFilewise():
    def setup(self):
        import os
        self.fixture_dir = os.path.abspath(os.path.dirname(__file__)) \
              + "/fixtures/"
        assert os.access( self.fixture_dir, os.F_OK ), \
            "Oops! the fixture dir should be here " + self.fixture_dir
        assert os.access( self.fixture_dir+"profiles-source1.csv", os.F_OK )
</snippet></ROW><ROW><id>17066992</id><snippet>os.path.join</snippet></ROW><ROW><id>17066992</id><snippet>class TestFilewise():
    def setup(self):
        import os
        self.fixture_dir = os.path.join(os.path.abspath(os.path.dirname(__file__)),
                "/fixtures/")
        assert os.access( self.fixture_dir, os.F_OK ), \
            "Oops! the fixture dir should be here: '%s'" % self.fixture_dir
        assert os.access(os.path.join(self.fixture_dir, 
                    "profiles-source1.csv"), os.F_OK )
</snippet></ROW><ROW><id>17067048</id><snippet>""""Outputs the emails by cc and names the file."""
for key, value in emails.items():
    # Key is 'cc' and value is 'email'
    # File is named by "today's date-original file's name-cc"
    with open('{0:%Y%m%d}-{1}-{2}.csv'.format(datetime.datetime.now(), filename[0], key), 'w') as f:
        f.writelines(value)

    # The file is closed (de-indented from the with), but we're still in the for loop
    # Use the format() method of a string to print in the form `cc: number of emails`
    print(`{}: {}`.format(key, len(value)))
</snippet></ROW><ROW><id>17067048</id><snippet>format()</snippet></ROW><ROW><id>17067048</id><snippet>gb: 30000</snippet></ROW><ROW><id>17067371</id><snippet>ax = df.A.tail(1).plot(style='rD', markersize=20,legend=False)
if not reverse_order: df.plot(legend=False, ax=ax)
</snippet></ROW><ROW><id>17067371</id><snippet>ax=ax</snippet></ROW><ROW><id>17067449</id><snippet>\b</snippet></ROW><ROW><id>17067449</id><snippet>re.findall(r'\b\d{3}\b', inputtext)
</snippet></ROW><ROW><id>17067449</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; inputtext = '09824747 18 n 02 archer 0 bowman 0 003 @ 09640897 n 0000'
&gt;&gt;&gt; re.findall(r'\b\d{3}\b', inputtext)
['003']
&gt;&gt;&gt; inputtext = 'exact: 444, short: 12, long: 1234, at the end of the line: 456'
&gt;&gt;&gt; re.findall(r'\b\d{3}\b', inputtext)
['444', '456']
</snippet></ROW><ROW><id>17067767</id><snippet>fileinput</snippet></ROW><ROW><id>17067767</id><snippet>import fileinput
for line in fileinput.input('example.txt', inplace = True):
    if line.startswith('rx_b_phase'):
        #if line starts with rx_b_phase then do something here
        print "rx_b_phase = foo"
    elif line.startswith('sample_gain_hi'):
        #if line starts with sample_gain_hi then do something here
        print "sample_gain_hi = bar"
    else:
        print line.strip()
</snippet></ROW><ROW><id>17067799</id><snippet>import StringIO
import sys

# somewhere to store output
out = StringIO.StringIO()

# save a reference to real stdout so we can restore later
oldstdout = sys.stdout

# set stdout to our StringIO instance
sys.stdout = out

# print something (nothing will print)
print 'herp derp'

# restore stdout so we can really print
sys.stdout = oldstdout

# print the stored value from previous print
print out.getvalue()
</snippet></ROW><ROW><id>17067910</id><snippet>response.url</snippet></ROW><ROW><id>17067910</id><snippet>import os
test = 'buy-women-fashion-accessories.html?p=1'
parts = os.path.splitext(test)
# ('buy-women-fashion-accessories', '.html?p=1')
parts[0].split('-')[1:]
# ['women', 'fashion', 'accessories']
</snippet></ROW><ROW><id>17067962</id><snippet>unsigned = ord(character)
signed = unsigned - 256 if unsigned &gt; 127 else unsigned
</snippet></ROW><ROW><id>17067962</id><snippet>struct</snippet></ROW><ROW><id>17067962</id><snippet>from struct import pack, unpack
signed = unpack('B', pack('b', unsigned))[0]
</snippet></ROW><ROW><id>17067962</id><snippet>signed = unpack('B', character)[0]
</snippet></ROW><ROW><id>17068120</id><snippet> thread = threading.Thread(target=self.main, args=(number,))
</snippet></ROW><ROW><id>17068120</id><snippet>args=number</snippet></ROW><ROW><id>17068276</id><snippet>product = {}
for col in range(sheet.ncols):
    values = []
    for row in range(1, sheet.nrows):
        values.append(sheet.cell(row, col).value)
    product[sheet.cell(0, col)] = values
</snippet></ROW><ROW><id>17068276</id><snippet>&gt; print product['B']
&gt; [1, 4, 2, 6, 7]
</snippet></ROW><ROW><id>17068310</id><snippet>b''.join()</snippet></ROW><ROW><id>17068310</id><snippet>&gt;&gt;&gt; b''.join([b'line 1\n', b'line 2\n'])
b'line 1\nline 2\n'
</snippet></ROW><ROW><id>17068439</id><snippet>In [39]: df = DataFrame(randn(5,1),columns=['value'])

In [40]: df
Out[40]: 
      value
0  0.092232
1 -0.472784
2 -1.857964
3 -0.014385
4  0.301531

In [41]: df.loc[df['value']&lt;0,'value'] = 0

In [42]: df
Out[42]: 
      value
0  0.092232
1  0.000000
2  0.000000
3  0.000000
4  0.301531
</snippet></ROW><ROW><id>17068688</id><snippet>fnmatch</snippet></ROW><ROW><id>17068688</id><snippet>fnmatch</snippet></ROW><ROW><id>17068688</id><snippet>lower()</snippet></ROW><ROW><id>17068688</id><snippet>&gt;&gt;&gt; import fnmatch

&gt;&gt;&gt; pattern_list = ['abandon*', 'abuse*', 'abusi*', 'aching', 'advers*', 'afraid', 'aggress*']
&gt;&gt;&gt; string_input = "People who have been abandoned or abused will often be afraid of adversarial, abusive, or aggressive behavior. They are aching to abandon the abuse and aggression."


&gt;&gt;&gt; for pattern in pattern_list:
...     l = fnmatch.filter(string_input.split(), pattern)
...     if l:
...             print pattern, "match", l
</snippet></ROW><ROW><id>17068688</id><snippet>abandon* match ['abandoned', 'abandon']
abuse* match ['abused', 'abuse']
abusi* match ['abusive,']
aching match ['aching']
advers* match ['adversarial,']
afraid match ['afraid']
aggress* match ['aggressive', 'aggression.']
</snippet></ROW><ROW><id>17068880</id><snippet>ansi</snippet></ROW><ROW><id>17068880</id><snippet>xterm</snippet></ROW><ROW><id>17068880</id><snippet>$ infocmp ansi | grep cud
        cr=^M, cub=\E[%p1%dD, cub1=\E[D, cud=\E[%p1%dB, cud1=\E[B,
        kcud1=\E[B, kcuf1=\E[C, kcuu1=\E[A, khome=\E[H, kich1=\E[L,

$ infocmp xterm | grep cud
        cud=\E[%p1%dB, cud1=^J, cuf=\E[%p1%dC, cuf1=\E[C,
        kcub1=\EOD, kcud1=\EOB, kcuf1=\EOC, kcuu1=\EOA,
</snippet></ROW><ROW><id>17068880</id><snippet>'\033OB'</snippet></ROW><ROW><id>17068880</id><snippet>xterm</snippet></ROW><ROW><id>17068880</id><snippet>import subprocess
import os
import time

# Set TERM=xterm in case it isn't already
os.environ['TERM'] = 'xterm'

# Spawn aptitude
p = subprocess.Popen('aptitude', stdin=subprocess.PIPE)

# Wait for a bit to let it load from cache
time.sleep(5)

# Control it using xterm control codes
p.stdin.write('\033OB') # arrow down
time.sleep(1)
p.stdin.write('\033OB') # arrow down
time.sleep(1)
p.stdin.write('\033OA') # arrow up
time.sleep(1)
p.stdin.write('\033OA') # arrow up
time.sleep(1)
p.stdin.write('q')      # quit
time.sleep(1)
p.stdin.write('y')      # confirm
</snippet></ROW><ROW><id>17068880</id><snippet>$ stty sane
</snippet></ROW><ROW><id>17068880</id><snippet>vi</snippet></ROW><ROW><id>17068880</id><snippet>CTRL-V</snippet></ROW><ROW><id>17068880</id><snippet>Down Arrow: ^[OB

Page Up: ^[[5~
</snippet></ROW><ROW><id>17068880</id><snippet>^[</snippet></ROW><ROW><id>17068880</id><snippet>CTRL-[</snippet></ROW><ROW><id>17068880</id><snippet>'\033'</snippet></ROW><ROW><id>17068918</id><snippet>if args.outputfile is None:
    args.outputfile = os.path.splitext(args.inputfile)[0] + '.xml'
</snippet></ROW><ROW><id>17068918</id><snippet>parser.add_argument('-v', '--verbose', action='store_true',
    help='Increases messages being printed to stdout')
</snippet></ROW><ROW><id>17068918</id><snippet>import os
import sys
import argparse
import csv
import indent
from xml.etree.ElementTree import ElementTree, Element, SubElement, Comment, tostring

def get_args(args):
    parser=argparse.ArgumentParser(description='Convert wordlist text files to various formats.', prog='Text Converter')
    parser.add_argument('-v','--verbose',action='store_true',dest='verbose',help='Increases messages being printed to stdout')
    parser.add_argument('-c','--csv',action='store_true',dest='readcsv',help='Reads CSV file and converts to XML file with same name')
    parser.add_argument('-x','--xml',action='store_true',dest='toxml',help='Convert CSV to XML with different name')
    #parser.add_argument('-i','--inputfile',type=str,help='Name of file to be imported',required=True)
    #parser.add_argument('-o','--outputfile',help='Output file name')
    parser.add_argument('inputfile',type=str,help='Name of file to be imported')
    parser.add_argument('outputfile',help='(optional) Output file name',nargs='?')
    args = parser.parse_args()
    if not (args.toxml or args.readcsv):
        parser.error('No action requested')
        return None
    if args.outputfile is None:
        args.outputfile = os.path.splitext(args.inputfile)[0] + '.xml'
    return args

def main(argv):
    args = get_args(argv[1:])
    if args is None:
        return 1
    inputfile = open(args.inputfile, 'r')
    outputfile = open(args.outputfile, 'w')
    reader = read_csv(inputfile)
    if args.verbose:
        print ('Verbose Selected')
    if args.toxml:
        if args.verbose:
            print ('Convert to XML Selected')
        generate_xml(reader, outputfile)
    if args.readcsv:
        if args.verbose:
            print ('Reading CSV file')
    return 1 # you probably want to return 0 on success

def read_csv(inputfile):
      return list(csv.reader(inputfile))

def generate_xml(reader,outfile):
    root = Element('Solution')
    root.set('version','1.0')
    tree = ElementTree(root)

    head = SubElement(root, 'DrillHoles')
    head.set('total_holes', '238')

    description = SubElement(head,'description')
    current_group = None
    i = 0
    for row in reader:
        if i &gt; 0:
            x1,y1,z1,x2,y2,z2,cost = row
            if current_group is None or i != current_group.text:
                current_group = SubElement(description, 'hole',{'hole_id':"%s"%i})

                collar = SubElement (current_group, 'collar',{'':', '.join((x1,y1,z1))}),
                toe = SubElement (current_group, 'toe',{'':', '.join((x2,y2,z2))})
                cost = SubElement(current_group, 'cost',{'':cost})
        i+=1
    indent.indent(root)
    tree.write(outfile)

if (__name__ == "__main__"):
    sys.exit(main(sys.argv))
</snippet></ROW><ROW><id>17069005</id><snippet>output = first + second + third</snippet></ROW><ROW><id>17069005</id><snippet>np.sum([first, second, third], axis=0)</snippet></ROW><ROW><id>17069346</id><snippet> self.walkAndList(os.path.join(dirname, dirs)
</snippet></ROW><ROW><id>17069346</id><snippet>if ( __name__ == "__main__") {
    a = Toodles()
    a.walkAndList('.')
}
</snippet></ROW><ROW><id>17069346</id><snippet>if __name__ == "__main__":
    a = Toodles()
    a.walkAndList('.')
</snippet></ROW><ROW><id>17069346</id><snippet>for</snippet></ROW><ROW><id>17069346</id><snippet>for (line in input):
</snippet></ROW><ROW><id>17069346</id><snippet>for line in input:
</snippet></ROW><ROW><id>17069346</id><snippet>self</snippet></ROW><ROW><id>17069346</id><snippet>def walkAndList(directory):
</snippet></ROW><ROW><id>17069346</id><snippet>def listOccurrencesOfToDoInFile(aFileName):
</snippet></ROW><ROW><id>17069346</id><snippet>self</snippet></ROW><ROW><id>17069346</id><snippet>def walkAndList(self, directory):
# ...
def listOccurrencesOfToDoInFile(self, aFileName):
</snippet></ROW><ROW><id>17069346</id><snippet>Toodles.isSourceFile()</snippet></ROW><ROW><id>17069346</id><snippet>Toodles.listOccurrencesOfToDoInFile()</snippet></ROW><ROW><id>17069346</id><snippet>self.</snippet></ROW><ROW><id>17069346</id><snippet>if(isSourceFile(filename)):
    listOccurrencesOfToDoInFile(filename)
</snippet></ROW><ROW><id>17069346</id><snippet>if self.isSourceFile(filename):
    self.listOccurrencesOfToDoInFile(filename)
</snippet></ROW><ROW><id>17069346</id><snippet>filename</snippet></ROW><ROW><id>17069346</id><snippet>workingFilename</snippet></ROW><ROW><id>17069346</id><snippet>self.listOccurrencesOfToDoInFile(workingFilename)
</snippet></ROW><ROW><id>17069346</id><snippet>.endswith()</snippet></ROW><ROW><id>17069346</id><snippet>.csh</snippet></ROW><ROW><id>17069346</id><snippet>.h</snippet></ROW><ROW><id>17069346</id><snippet>if</snippet></ROW><ROW><id>17069346</id><snippet>True</snippet></ROW><ROW><id>17069346</id><snippet>True</snippet></ROW><ROW><id>17069346</id><snippet>False</snippet></ROW><ROW><id>17069346</id><snippet>def isSourceFile(self, name):
    return name.endswith(('.m', '.c', '.h'))
</snippet></ROW><ROW><id>17069346</id><snippet>enumerate()</snippet></ROW><ROW><id>17069346</id><snippet>for currentLine, line in enumerate(input, 1):
    line = line.lower()
</snippet></ROW><ROW><id>17069346</id><snippet>os.walk()</snippet></ROW><ROW><id>17069346</id><snippet>for dirs in dirnames:
    self.walkAndList(os.path.join(dirname, dirs))
</snippet></ROW><ROW><id>17069346</id><snippet>with</snippet></ROW><ROW><id>17069346</id><snippet>needle</snippet></ROW><ROW><id>17069346</id><snippet>import os
import sys


class Toodles(object):
    def walkAndList(self, directory):
        for dirname, dirnames, filenames in os.walk(directory):
            for filename in filenames:
                if self.isSourceFile(filename):
                    workingFilename = os.path.join(dirname, filename)
                    self.listOccurrencesOfToDoInFile(workingFilename)

            # Advanced usage:
            # editing the 'dirnames' list will stop os.walk() from recursing into there.
            if '.git' in dirnames:
                # don't go into any .git directories.
                dirnames.remove('.git')

    #   Find occurences of "todo" and "fixme" in a file
    #   If we find such an occurence, print the filename,
    #   the line number, and the line itself.
    def listOccurrencesOfToDoInFile(self, aFileName):
        needle = "todo"
        with open(aFileName) as input:
            for currentLine, line in enumerate(input, 1):
                if needle in line.lower():
                    sys.stdout.write('{}: ({}){}'.format(aFileName, currentLine, line))

    #Todo: add a comment
    def isSourceFile(self, name):
        return name.endswith(('.m', '.c', '.h'))


if __name__ == "__main__":
    a = Toodles()
    a.walkAndList('.')
</snippet></ROW><ROW><id>17069533</id><snippet>import xlwt
from tempfile import TemporaryFile
book = xlwt.Workbook()
sheet1 = book.add_sheet('sheet1')


a=[1,2,3,4,5]
b=[6,7,8,9,10]
c=[2,3,4,5,6]

data = [a,b,c]

for row, array in enumerate(data):
    for col, value in enumerate(array):
        sheet1.write(row, col, value):

name = "this.xls"
book.save(name)
book.save(TemporaryFile())
</snippet></ROW><ROW><id>17069703</id><snippet>edgelist</snippet></ROW><ROW><id>17069703</id><snippet>edgelist.append()</snippet></ROW><ROW><id>17069703</id><snippet>edgelist.append([source, line['author_id'], line['time']])
</snippet></ROW><ROW><id>17069703</id><snippet>writer.writerows()</snippet></ROW><ROW><id>17069772</id><snippet>{
  "access_token" : "ya29.AHES6ZTtm7SuokEB-RGtbBty9IIlNiP9-eNMMQKtXdMP3sfjL1Fc",
  "token_type" : "Bearer",
  "expires_in" : 3600,
  "refresh_token" : "1/HKSmLFXzqP0leUihZp2xUt3-5wkU7Gmu2Os_eBnzw74"
}
</snippet></ROW><ROW><id>17069772</id><snippet>POST /o/oauth2/token HTTP/1.1
Host: accounts.google.com
Content-Type: application/x-www-form-urlencoded

client_id=21302922996.apps.googleusercontent.com&amp;
client_secret=XTHhXh1SlUNgvyWGwDk1EjXB&amp;
refresh_token=1/HKSmLFXzqP0leUihZp2xUt3-5wkU7Gmu2Os_eBnzw74
grant_type=refresh_token
</snippet></ROW><ROW><id>17069943</id><snippet>pdb</snippet></ROW><ROW><id>17069966</id><snippet>'current'</snippet></ROW><ROW><id>17069966</id><snippet>'past'</snippet></ROW><ROW><id>17069966</id><snippet>total['current'].items()</snippet></ROW><ROW><id>17069966</id><snippet>total['past'].items()</snippet></ROW><ROW><id>17069966</id><snippet>from itertools import chain
d1 = {'current':    [[1369713600, 29], [1369756800, 47], [1369800000, 34]],
      'curr_total': 110,
      'past':       [[1368417600, 2], [1368460800, 70], [1368504000, 10]],
      'past_total': 82}

d2 = {'current':    [(1369713601, 23), (1369756800, 87), (1369800000, 7)],
      'curr_total': 117,
      'past':       [(1368417600, 100), (1368460800, 7), (1368504000, 9)],
      'past_total': 116}

total  = {}
for k,v in chain(d1.iteritems() ,d2.iteritems()):
    if isinstance(v, list):
        for k1, v1 in v:
            dic = total.setdefault(k,{})
            dic[k1] = dic.get(k1,0) + v1
    else:
        total[k] = total.get(k,0) + v

#convert the dicts to list
for k in total:
    if isinstance(total[k], dict):
        total[k] = total[k].items()
print total        
</snippet></ROW><ROW><id>17069966</id><snippet>{'current': [(1369713600, 29), (1369756800, 134), (1369800000, 41), (1369713601, 23)],
 'past': [(1368417600, 102), (1368460800, 77), (1368504000, 19)],
 'curr_total': 227,
 'past_total': 198
}
</snippet></ROW><ROW><id>17070033</id><snippet>double</snippet></ROW><ROW><id>17070033</id><snippet>double</snippet></ROW><ROW><id>17070033</id><snippet>ulp(-x) == ulp(x)</snippet></ROW><ROW><id>17070216</id><snippet>node = self.productDoc.xpath("/product[name/value[text() = \"{0}\"]]".format(self.Title))
</snippet></ROW><ROW><id>17070221</id><snippet>@</snippet></ROW><ROW><id>17070221</id><snippet>before_at, after_at = line.split('@')
K = int(after_at.split()[0])
</snippet></ROW><ROW><id>17070221</id><snippet>@</snippet></ROW><ROW><id>17070221</id><snippet>after_at.split(None, 1)</snippet></ROW><ROW><id>17070221</id><snippet>@</snippet></ROW><ROW><id>17070382</id><snippet>experimental_cpp_class_def</snippet></ROW><ROW><id>17070382</id><snippet>Observer</snippet></ROW><ROW><id>17070382</id><snippet>from cpython.ref cimport PyObject, Py_INCREF, Py_DECREF

cdef cppclass ObserverImpl(_Observer):
    PyObject* callback

    __init__(object callback):  # constructor. "this" argument is implicit.
        Py_INCREF(callback)
        this.callback = &lt;PyObject*&gt;callback

    __dealloc__():  # destructor
        Py_DECREF(&lt;object&gt;this.callback)

    void onEvent():
        (&lt;object&gt;this.callback)()  # exceptions will be ignored
</snippet></ROW><ROW><id>17070382</id><snippet>def registerObserver(self, callback not None):  # user passes any Python callable
    self._this.registerObserver(new ObserverImpl(callback))
</snippet></ROW><ROW><id>17070382</id><snippet>object</snippet></ROW><ROW><id>17070382</id><snippet>PyObject*</snippet></ROW><ROW><id>17070382</id><snippet>onEvent()</snippet></ROW><ROW><id>17070382</id><snippet>callback</snippet></ROW><ROW><id>17070382</id><snippet>(&lt;object&gt;this.callback).onEvent()</snippet></ROW><ROW><id>17070382</id><snippet>ObserverImpl</snippet></ROW><ROW><id>17070382</id><snippet>Py_INCREF</snippet></ROW><ROW><id>17070382</id><snippet>Py_DECREF</snippet></ROW><ROW><id>17070382</id><snippet>PyObject_Call</snippet></ROW><ROW><id>17070382</id><snippet>PyObject_CallMethod</snippet></ROW><ROW><id>17070811</id><snippet>dirname</snippet></ROW><ROW><id>17070811</id><snippet>alias ccd 'cd `dirname \!:1`'
</snippet></ROW><ROW><id>17070811</id><snippet>dirname \!:1</snippet></ROW><ROW><id>17070811</id><snippet>dirname</snippet></ROW><ROW><id>17070811</id><snippet>cd</snippet></ROW><ROW><id>17071218</id><snippet>int()</snippet></ROW><ROW><id>17071218</id><snippet>if</snippet></ROW><ROW><id>17071218</id><snippet>input = raw_input("Give me the number of the city that you think is the capital of " + randcountry + " ")

if input == "exit":
    print "Now exiting game!"
    sys.exit()

elif  randlist[int(input) - 1] == ccdict[randcountry]:
    print "Correct"
</snippet></ROW><ROW><id>17071218</id><snippet>input</snippet></ROW><ROW><id>17071519</id><snippet>import</snippet></ROW><ROW><id>17071519</id><snippet>sys</snippet></ROW><ROW><id>17071519</id><snippet>os</snippet></ROW><ROW><id>17071519</id><snippet>&gt;&gt;&gt; import code
&gt;&gt;&gt; def start_shell():
...     import sys, os
...     code.interact(local=locals())
...
&gt;&gt;&gt; start_shell()
Python 2.7.4 (default, Apr 19 2013, 18:28:01)
[GCC 4.7.3] on linux2
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
&gt;&gt;&gt; dir()
['__builtins__', 'os', 'sys']
</snippet></ROW><ROW><id>17071519</id><snippet>sys</snippet></ROW><ROW><id>17071519</id><snippet>os</snippet></ROW><ROW><id>17071519</id><snippet>code</snippet></ROW><ROW><id>17071911</id><snippet>%s</snippet></ROW><ROW><id>17071911</id><snippet>MySQLdb</snippet></ROW><ROW><id>17071911</id><snippet>params = [jobTitle,
          jobHref,
          salaryLow,
          salaryHigh,
          company,
          jobPostedAdjusted,
          salaryCurrency]
cur.execute("INSERT INTO jobs VALUES(DEFAULT, %s, %s, %s, %s, %s, %s, %s)", params)
</snippet></ROW><ROW><id>17071911</id><snippet>print(cur.fetchall())</snippet></ROW><ROW><id>17071911</id><snippet>cur.execute....</snippet></ROW><ROW><id>17071911</id><snippet>()</snippet></ROW><ROW><id>17071911</id><snippet>INSERT</snippet></ROW><ROW><id>17071911</id><snippet>cur.fetchall()</snippet></ROW><ROW><id>17071911</id><snippet>conn = MySQLdb.connect(...)
cur = conn.cursor()
cur.execute("INSERT ...")
conn.commit()
</snippet></ROW><ROW><id>17071911</id><snippet>INSERT</snippet></ROW><ROW><id>17071911</id><snippet>conn = MySQLdb.connect(...)
cur = conn.cursor()
for i in range(100):
    cur.execute("INSERT ...")
conn.commit()
</snippet></ROW><ROW><id>17071911</id><snippet>conn.commit()</snippet></ROW><ROW><id>17071911</id><snippet>commit;</snippet></ROW><ROW><id>17071911</id><snippet>commit</snippet></ROW><ROW><id>17071911</id><snippet>MySQLdb</snippet></ROW><ROW><id>17071911</id><snippet>conn.commit()</snippet></ROW><ROW><id>17072180</id><snippet>import Tkinter as tk
import ttk

root = tk.Tk()
notebook = ttk.Notebook(root)
notebook.pack(fill="both", expand=True)

tab1 = tk.Frame(notebook, background="red")
tab2 = tk.Frame(notebook, background="green")

notebook.add(tab1, text="Tab 1")
notebook.add(tab2, text="Tab 2")

root.mainloop()
</snippet></ROW><ROW><id>17072180</id><snippet>def tab1(parent):
    frame = tk.Frame(parent, background="pink")

    return frame
</snippet></ROW><ROW><id>17072180</id><snippet>import Tkinter as tk
import ttk

&lt;put your definition of tab1 here...&gt;

root = tk.Tk()
notebook = ttk.Notebook(root)
notebook.pack(fill="both", expand=True)

tab1 = tab1(notebook)
tab2 = tk.Frame(notebook, background="green")

notebook.add(tab1, text="Tab 1")
notebook.add(tab2, text="Tab 2")

root.mainloop()
</snippet></ROW><ROW><id>17072180</id><snippet>tab1</snippet></ROW><ROW><id>17072180</id><snippet>tk.Frame</snippet></ROW><ROW><id>17072276</id><snippet>parameters</snippet></ROW><ROW><id>17072276</id><snippet>MySQLdb</snippet></ROW><ROW><id>17072276</id><snippet>select_query = "SELECT DISTINCT name FROM people WHERE name in (%s)"
parameters = "'"+"','".join(['\\','--','where'])+"'"
cursor.execute(select_query % parameters)
print str(cursor._executed)
</snippet></ROW><ROW><id>17072276</id><snippet>SELECT DISTINCT name FROM people WHERE name in ('\','--','where')
</snippet></ROW><ROW><id>17072276</id><snippet>parameters = ['\\','--','where']
placeholders = ','.join(['%s'] * len(parameters))
select_query = "SELECT DISTINCT name FROM people WHERE name in (%s)" % placeholders
cursor.execute(select_query, parameters)
print str(cursor._executed)
</snippet></ROW><ROW><id>17072276</id><snippet>SELECT DISTINCT name FROM people WHERE name in ('\\','--','where')
</snippet></ROW><ROW><id>17072276</id><snippet>MySQLdb</snippet></ROW><ROW><id>17072276</id><snippet>Connection.escape_string()</snippet></ROW><ROW><id>17072276</id><snippet>_mysql</snippet></ROW><ROW><id>17072276</id><snippet>escape_string()</snippet></ROW><ROW><id>17072276</id><snippet>&gt;&gt;&gt; import _mysql
&gt;&gt;&gt; select_query = "SELECT DISTINCT name FROM people WHERE name in (%s)"
&gt;&gt;&gt; parameters = "'"+"','".join(map(_mysql.escape_string, ['\\','--','where']))+"'"
&gt;&gt;&gt; print select_query % parameters
SELECT DISTINCT name FROM people WHERE name in ('\\','--','where')
</snippet></ROW><ROW><id>17072276</id><snippet>Connection.escape_string()</snippet></ROW><ROW><id>17072295</id><snippet>iterparse</snippet></ROW><ROW><id>17072295</id><snippet>f.tell()</snippet></ROW><ROW><id>17072295</id><snippet>import lxml.etree as ET
import os

filename = 'data.xml'
total_size = os.path.getsize(filename)
with open(filename, 'r') as f:
    context = ET.iterparse(f, events=('end', ), tag='Record')
    for event, elem in context:
        print(event, elem, float(f.tell())/total_size)
</snippet></ROW><ROW><id>17072295</id><snippet>(u'end', &lt;Element Record at 0xb743e2d4&gt;, 0.09652665470688218)
(u'end', &lt;Element Record at 0xb743e2fc&gt;, 0.09652665470688218)
(u'end', &lt;Element Record at 0xb743e324&gt;, 0.09652665470688218)
...
(u'end', &lt;Element Record at 0xb744739c&gt;, 1.0)
(u'end', &lt;Element Record at 0xb74473c4&gt;, 1.0)
(u'end', &lt;Element Record at 0xb74473ec&gt;, 1.0)
</snippet></ROW><ROW><id>17072551</id><snippet>&gt;&gt;&gt; tolerance = 1e-15
&gt;&gt;&gt; def clean_complex(c):
...   real,imag = c.real, c.imag
...   if -tolerance &lt; real &lt; tolerance:
...     real = 0
...   if -tolerance &lt; imag &lt; tolerance:
...     imag = 0
...   return complex(real,imag)
... 
&gt;&gt;&gt; clean_complex( cmath.exp(cmath.log(-1)) )
(-1+0j)
</snippet></ROW><ROW><id>17072658</id><snippet>NotImplemented</snippet></ROW><ROW><id>17072754</id><snippet>args</snippet></ROW><ROW><id>17072754</id><snippet>options</snippet></ROW><ROW><id>17072754</id><snippet>long_options</snippet></ROW><ROW><id>17072754</id><snippet>args</snippet></ROW><ROW><id>17072754</id><snippet>options</snippet></ROW><ROW><id>17072754</id><snippet>long_options</snippet></ROW><ROW><id>17072754</id><snippet>myprogram --foo=bar
</snippet></ROW><ROW><id>17072754</id><snippet>long_options</snippet></ROW><ROW><id>17072754</id><snippet>['--foo=']</snippet></ROW><ROW><id>17072754</id><snippet>myprogram -f bar
</snippet></ROW><ROW><id>17072754</id><snippet>options</snippet></ROW><ROW><id>17072754</id><snippet>'f:'</snippet></ROW><ROW><id>17072754</id><snippet>getopt</snippet></ROW><ROW><id>17072754</id><snippet>optparse</snippet></ROW><ROW><id>17072754</id><snippet>argparse</snippet></ROW><ROW><id>17072754</id><snippet>getopt</snippet></ROW><ROW><id>17072965</id><snippet>urlFile = "path/to/file"
urls = open(urlFile).readLines()

for url in urls:
  doAction(url)
</snippet></ROW><ROW><id>17072965</id><snippet>with open(urlFile) as f:
  for line in f:
    doAction(line)
</snippet></ROW><ROW><id>17073010</id><snippet>zip(*)</snippet></ROW><ROW><id>17073010</id><snippet>data1</snippet></ROW><ROW><id>17073010</id><snippet>data2</snippet></ROW><ROW><id>17073010</id><snippet>data3</snippet></ROW><ROW><id>17073010</id><snippet>def ret_float(x):
    try:
        return float(x)
    except ValueError:
        return x

with open('data.txt') as f:
    next(f) #skip the header
    lis = [ map(ret_float,line.split()) for line in f]
    #[['A', 15.5, 55.7], ['B', 18.9, 51.6], ['C', 17.4, 67.3], ['D', 11.4, 34.5], ['E', 23.4, 92.1]]
    #unzip the list
    data1, data2, data3 = zip(*lis)

    #if you want data1,data2,data3 to be lists then use:
    #data1, data2, data3 = [list(x) for x in  zip(*lis)]
...     
&gt;&gt;&gt; data1
('A', 'B', 'C', 'D', 'E')
&gt;&gt;&gt; data2
(15.5, 18.9, 17.4, 11.4, 23.4)
&gt;&gt;&gt; data3
(55.7, 51.6, 67.3, 34.5, 92.1)
</snippet></ROW><ROW><id>17073010</id><snippet>with open('data.txt', 'r') as f:
    col2 = [line.split()[1] for line in f]
    data2 = list(map(float, col2 [1:]))   # apply float to each item using `map`
                                          # as `map` returns a `map` object in py3.x
                                          # you have to pass it to list() 
with open('data.txt', 'r') as f: 
    col3 = [line.split()[2] for line in f]
    data3 = list(map(float, col3 [1:]))
    print (data3)
</snippet></ROW><ROW><id>17073010</id><snippet>map</snippet></ROW><ROW><id>17073010</id><snippet>&gt;&gt;&gt; print(map.__doc__)
map(func, *iterables) --&gt; map object

Make an iterator that computes the function using arguments from
each of the iterables.  Stops when the shortest iterable is exhausted.
</snippet></ROW><ROW><id>17073161</id><snippet>class COURSE_NAME_VALIDATOR:
    def __init__(self, error_message='Unknown course name. Please see your instructor.'):
        self.e = error_message

    def __call__(self, value):
        if db(db.courses.course_name == value).select():
            return (db(db.courses.course_name == value).select()[0].id, None)
        return (value, self.e)
</snippet></ROW><ROW><id>17073462</id><snippet>process.terminate()</snippet></ROW><ROW><id>17073462</id><snippet>process.join()</snippet></ROW><ROW><id>17073462</id><snippet>quit_(root, process)</snippet></ROW><ROW><id>17073664</id><snippet>get</snippet></ROW><ROW><id>17073664</id><snippet>for k in n:
    print(DICT.get(k, 'Not Available'))
</snippet></ROW><ROW><id>17073667</id><snippet>import matplotlib.pyplot as plt
import numpy as np
from matplotlib import cm
from numpy.random import randn

from mpl_toolkits.axes_grid1.axes_divider import HBoxDivider
import mpl_toolkits.axes_grid1.axes_size as Size


def make_heights_equal(fig, rect, ax1, ax2, ax3, pad):
    # pad in inches

    h1, v1 = Size.AxesX(ax1), Size.AxesY(ax1)
    h2, v2 = Size.AxesX(ax2, 0.1), Size.AxesY(ax2)
    h3, v3 = Size.AxesX(ax3), Size.AxesY(ax3)

    pad_v = Size.Scaled(1)
    pad_h = Size.Fixed(pad)

    my_divider = HBoxDivider(fig, rect,
                             horizontal=[h1, pad_h, h2, pad_h, h3],
                             vertical=[v1, pad_v, v2, pad_v, v3])


    ax1.set_axes_locator(my_divider.new_locator(0))
    ax2.set_axes_locator(my_divider.new_locator(2))
    ax3.set_axes_locator(my_divider.new_locator(4))


# Make plot with vertical (default) colorbar
fig = plt.figure()
img_ax = fig.add_subplot(131)
bar_ax = fig.add_subplot(132)
ann_ax = fig.add_subplot(133)

data = np.clip(randn(250, 250), -1, 1)

im = img_ax.imshow(data, interpolation='nearest', cmap=cm.coolwarm)

# Add colorbar, make sure to specify tick locations to match desired ticklabels
cbar = fig.colorbar(im, cax=bar_ax, ticks=[-1, 0, 1])
cbar.ax.set_yticklabels(['&lt; -1', '0', '&gt; 1'])# vertically oriented colorbar

ann_ax.axis('off')

ann_ax.annotate("Hello, I'm an annotation", (0.5, 0.5),
                 xycoords="axes fraction", va="center", ha="center",
                 bbox=dict(boxstyle="round, pad=1", fc="w")) 

make_heights_equal(fig, 111, img_ax, bar_ax, ann_ax, 0.2)

plt.savefig("try.png")
</snippet></ROW><ROW><id>17073981</id><snippet>import</snippet></ROW><ROW><id>17073981</id><snippet>__file__</snippet></ROW><ROW><id>17073981</id><snippet>import</snippet></ROW><ROW><id>17073981</id><snippet>getwd</snippet></ROW><ROW><id>17073981</id><snippet>import os
def getwd():
    return os.path.dirname(__file__) if '__file__' in globals() else os.getcwd()
</snippet></ROW><ROW><id>17073981</id><snippet>import</snippet></ROW><ROW><id>17073981</id><snippet>getwd</snippet></ROW><ROW><id>17073981</id><snippet>__file__</snippet></ROW><ROW><id>17073981</id><snippet>getwd</snippet></ROW><ROW><id>17074121</id><snippet>print repr(json_data['vowel'])
</snippet></ROW><ROW><id>17074121</id><snippet>print u"\xe4"
</snippet></ROW><ROW><id>17074121</id><snippet>UnicodeEncodeError</snippet></ROW><ROW><id>17074121</id><snippet>PYTHONIOENCODING=utf-8</snippet></ROW><ROW><id>17074121</id><snippet>import json

with open("expr.json", "rb") as file:
    json_data = json.load(file)
</snippet></ROW><ROW><id>17074123</id><snippet>activated</snippet></ROW><ROW><id>17074123</id><snippet>currentIndexChanged</snippet></ROW><ROW><id>17074123</id><snippet>index</snippet></ROW><ROW><id>17074123</id><snippet>def comboBoxIndexChanged(index):
  #Do something based on the index
  if somethingBasedOnTheIndex:
    self.line_edit_widget.setEnabled(true)
  else:
    self.line_edit_widget.setEnabled(false)
</snippet></ROW><ROW><id>17074123</id><snippet>activated</snippet></ROW><ROW><id>17074123</id><snippet>QComboBox</snippet></ROW><ROW><id>17074123</id><snippet>true</snippet></ROW><ROW><id>17074123</id><snippet>false</snippet></ROW><ROW><id>17074123</id><snippet>0</snippet></ROW><ROW><id>17074123</id><snippet>false</snippet></ROW><ROW><id>17074123</id><snippet>QLineEdit</snippet></ROW><ROW><id>17074123</id><snippet>true</snippet></ROW><ROW><id>17074215</id><snippet>python test01.py A a1 -v 61
</snippet></ROW><ROW><id>17074215</id><snippet>-v</snippet></ROW><ROW><id>17074215</id><snippet>argparse</snippet></ROW><ROW><id>17074215</id><snippet>-t</snippet></ROW><ROW><id>17074215</id><snippet>import argparse

parser = argparse.ArgumentParser()
subparsers = parser.add_subparsers(help='types of A')
parser.add_argument("-v", ...)

a_parser = subparsers.add_parser("A")
b_parser = subparsers.add_parser("B")

a_parser.add_argument("something", choices=['a1', 'a2'])
</snippet></ROW><ROW><id>17074215</id><snippet>-v</snippet></ROW><ROW><id>17074264</id><snippet>dict</snippet></ROW><ROW><id>17074264</id><snippet>dict</snippet></ROW><ROW><id>17074264</id><snippet>str.split</snippet></ROW><ROW><id>17074264</id><snippet>dict</snippet></ROW><ROW><id>17074264</id><snippet>with open('abc') as f:
    dic = dict(line.split()[1:] for line in f)

&gt;&gt;&gt; print(dic)
{'NAME': '0', 'MOREOFTHESAME': '1'}
</snippet></ROW><ROW><id>17074264</id><snippet>str.split</snippet></ROW><ROW><id>17074264</id><snippet>&gt;&gt;&gt; strs = "#define MOREOFTHESAME 1"
&gt;&gt;&gt; strs.split()
['#define', 'MOREOFTHESAME', '1']
&gt;&gt;&gt; strs.split()[1:]
['MOREOFTHESAME', '1']
</snippet></ROW><ROW><id>17074264</id><snippet>with open('abc') as f:
    dic = {k:v for k,v in (line.split()[1:] for line in f)}
...     
&gt;&gt;&gt; dic
{'NAME': '0', 'MOREOFTHESAME': '1'}
</snippet></ROW><ROW><id>17074542</id><snippet>wait</snippet></ROW><ROW><id>17074542</id><snippet>browser.page_source</snippet></ROW><ROW><id>17074643</id><snippet>Xr = [[0]*m]*n
</snippet></ROW><ROW><id>17074643</id><snippet>m = 2
n = 2
Xr = [[0]*m]*n
print Xr
# [[0, 0], [0, 0]]
Xr[0][0] = 1
print Xr
# [[1, 0], [1, 0]]
</snippet></ROW><ROW><id>17074647</id><snippet>MyClass</snippet></ROW><ROW><id>17074647</id><snippet>MyObject</snippet></ROW><ROW><id>17074647</id><snippet>def MyObject():
  import sys
  if sys.platform == 'darwin':
    return MyDarwinObject()
  else:
    return MyDefaultObject()

my_object = MyObject()
print my_object.get_home_directory()
</snippet></ROW><ROW><id>17074854</id><snippet>twistd</snippet></ROW><ROW><id>17074854</id><snippet>flo.emit</snippet></ROW><ROW><id>17074854</id><snippet>twistd</snippet></ROW><ROW><id>17074854</id><snippet>application</snippet></ROW><ROW><id>17074854</id><snippet>tac</snippet></ROW><ROW><id>17074854</id><snippet>logfile</snippet></ROW><ROW><id>17074854</id><snippet>tac</snippet></ROW><ROW><id>17074854</id><snippet>twistd</snippet></ROW><ROW><id>17074854</id><snippet>application</snippet></ROW><ROW><id>17074854</id><snippet>ILogObserver</snippet></ROW><ROW><id>17074854</id><snippet>startLogging</snippet></ROW><ROW><id>17074854</id><snippet>logfile</snippet></ROW><ROW><id>17074854</id><snippet>startLogging</snippet></ROW><ROW><id>17074854</id><snippet>application</snippet></ROW><ROW><id>17074854</id><snippet>tac</snippet></ROW><ROW><id>17074854</id><snippet>twistd</snippet></ROW><ROW><id>17074854</id><snippet>datetime.strftime</snippet></ROW><ROW><id>17074854</id><snippet>time.strftime</snippet></ROW><ROW><id>17074854</id><snippet>formatTime</snippet></ROW><ROW><id>17074854</id><snippet>FileLogObserver</snippet></ROW><ROW><id>17074854</id><snippet>datetime.strftime</snippet></ROW><ROW><id>17074855</id><snippet>Use

In [10]: list1 = [1,3,4,5,12,6,2,35,74,6,2]

In [11]: " ".join(map(str, list1))
Out[11]: '1 3 4 5 12 6 2 35 74 6 2'
</snippet></ROW><ROW><id>17074855</id><snippet>f.write('Text' + ' ' + " ".join(map(str, list1)))
</snippet></ROW><ROW><id>17074866</id><snippet>a.my_class_object</snippet></ROW><ROW><id>17074866</id><snippet>&gt;&gt;&gt; class Foo(object):
...     x = []
...
&gt;&gt;&gt; i1 = Foo()
&gt;&gt;&gt; i2 = Foo()
&gt;&gt;&gt;
&gt;&gt;&gt; i1.x = 5
&gt;&gt;&gt;
&gt;&gt;&gt; print(i2.x)
[]
</snippet></ROW><ROW><id>17074866</id><snippet>i1.x</snippet></ROW><ROW><id>17074866</id><snippet>i1.__dict__</snippet></ROW><ROW><id>17074866</id><snippet>__dict__</snippet></ROW><ROW><id>17074866</id><snippet>AttributeError</snippet></ROW><ROW><id>17074866</id><snippet>i1</snippet></ROW><ROW><id>17074866</id><snippet>i1.x</snippet></ROW><ROW><id>17074866</id><snippet>i1.x</snippet></ROW><ROW><id>17074866</id><snippet>&gt;&gt;&gt; class Foo(object):
...     x = 2
...
&gt;&gt;&gt; i1 = Foo()
&gt;&gt;&gt;
&gt;&gt;&gt; Foo.x = 5
&gt;&gt;&gt;
&gt;&gt;&gt; print(i1.x)
5
</snippet></ROW><ROW><id>17074918</id><snippet>[]</snippet></ROW><ROW><id>17074918</id><snippet>GamePlayer</snippet></ROW><ROW><id>17074918</id><snippet>p['fromX']</snippet></ROW><ROW><id>17074918</id><snippet>p.get_variable("fromX")</snippet></ROW><ROW><id>17074918</id><snippet>p.fromX</snippet></ROW><ROW><id>17074918</id><snippet>get_variable</snippet></ROW><ROW><id>17074918</id><snippet>set_variable</snippet></ROW><ROW><id>17074926</id><snippet>twisted/python/threadable.py</snippet></ROW><ROW><id>17074926</id><snippet>__dict__</snippet></ROW><ROW><id>17074926</id><snippet>dir()</snippet></ROW><ROW><id>17074926</id><snippet>inspect.getmembers()</snippet></ROW><ROW><id>17074926</id><snippet>write</snippet></ROW><ROW><id>17074979</id><snippet>y = [sum(x[:i+1]) for i in range(len(x))]
</snippet></ROW><ROW><id>17075376</id><snippet>args</snippet></ROW><ROW><id>17075376</id><snippet>import argparse

class TwoOrSeven(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if len(values) not in (2,7):
            raise argparse.ArgumentTypeError('Not a valid number of args (2 or 7)')
        try:
            values = values[2], values[5]
        except IndexError:
            values = values[0]
        setattr(namespace, self.dest, values)
parser = argparse.ArgumentParser()
parser.add_argument('args', metavar='arg', action=TwoOrSeven, nargs='+',
    help='Must be supplied 2 or 7 arguments')

args = parser.parse_args('1 2 3 4 5 6 7'.split())
print(args)
# Namespace(args=('3', '6'))
args = parser.parse_args('1 2'.split())
print(args)
# Namespace(args='1')
args = parser.parse_args('1 2 3 4 5 6'.split())
# argparse.ArgumentTypeError: Not a valid number of args (2 or 7)
</snippet></ROW><ROW><id>17075400</id><snippet>xticks</snippet></ROW><ROW><id>17075400</id><snippet>import matplotlib.pyplot as plt
import numpy as np
x_values = [0.1, 0.3, 0.4, 0.2]
y_values = ["word 1", "word 2", "word 3", "word 4"]
y_axis = np.arange(1, 5, 1)

plt.barh(y_axis, x_values, align='center')
plt.yticks(y_axis, y_values)
plt.show()
</snippet></ROW><ROW><id>17075400</id><snippet>import matplotlib.pyplot as plt
import numpy as np
y_values = [0.1, 0.3, 0.4, 0.2]
text_values = ["word 1", "word 2", "word 3", "word 4"]
x_values = np.arange(1, len(text_values) + 1, 1)

plt.bar(x_values, y_values, align='center')
# Decide which ticks to replace.
new_ticks = ["word for " + str(y) if y != 0.3 else str(y) for y in y_values]
plt.yticks(y_values, new_ticks)
plt.xticks(x_values, text_values)
plt.show()
</snippet></ROW><ROW><id>17075432</id><snippet>&amp;</snippet></ROW><ROW><id>17075432</id><snippet>|</snippet></ROW><ROW><id>17075432</id><snippet>^</snippet></ROW><ROW><id>17075432</id><snippet>&gt;&gt;&gt; arr = np.array([1, 2, 1, 2, 3, 6, 9])
&gt;&gt;&gt; (2 &lt; arr) &amp; (arr &lt; 6)
array([False, False, False, False,  True, False, False], dtype=bool)
&gt;&gt;&gt; (2 &lt; arr) | (arr &lt; 6)
array([ True,  True,  True,  True,  True,  True,  True], dtype=bool)
&gt;&gt;&gt; (2 &lt; arr) ^ (arr &lt; 6)
array([ True,  True,  True,  True, False,  True,  True], dtype=bool)
</snippet></ROW><ROW><id>17075432</id><snippet>a &lt; b &lt; c</snippet></ROW><ROW><id>17075691</id><snippet>QUALIFIER="$(echo $BUILD_ID | sed "s/[-_]//g" | cut -c1-12)"
export QUALIFIER
python my_script.py
</snippet></ROW><ROW><id>17075691</id><snippet>import os
qualifier = os.environ['QUALIFIER']
</snippet></ROW><ROW><id>17075691</id><snippet>import os
import re
qualifier = re.sub(r'[-_]+', '', os.environ['BUILD_ID'])[0:12]
</snippet></ROW><ROW><id>17075703</id><snippet>iframe = driver.find_elements_by_tag_name('iframe')[0] 
driver.switch_to_frame(iframe)
</snippet></ROW><ROW><id>17075703</id><snippet>driver.switch_to_default_content()
</snippet></ROW><ROW><id>17075711</id><snippet>reduce</snippet></ROW><ROW><id>17075711</id><snippet>&gt;&gt;&gt; reduce(lambda x, y: x * (y + 1), [1, 2, 3])
12
</snippet></ROW><ROW><id>17075711</id><snippet>&gt;&gt;&gt; (1 * (2 + 1)) * (3 + 1)
12
</snippet></ROW><ROW><id>17075711</id><snippet>&gt;&gt;&gt; reduce(lambda x, y: x * (y + 1), [1, 2, 3], 10)
240

&gt;&gt;&gt; (((10 * (1 + 1)) * (2 + 1)) * (3 + 1))
240
</snippet></ROW><ROW><id>17075711</id><snippet>&gt;&gt;&gt; reduce(lambda x, y: x * (y + 1), [1, 2, 3], 1) # initializer is 1
</snippet></ROW><ROW><id>17075711</id><snippet>&gt;&gt;&gt; from operator import mul
&gt;&gt;&gt; reduce(mul, (v + 1 for v in d.values()))
</snippet></ROW><ROW><id>17075711</id><snippet>In [10]: from operator import mul

In [11]: d = {'a' : 1, 'b' : 2, 'c' : 3}

In [12]: %timeit reduce(lambda x, y: x * (y + 1), d.values(), 1)
1000000 loops, best of 3: 1 us per loop

In [13]: %timeit reduce(mul, (v + 1 for v in d.values()))
1000000 loops, best of 3: 1.23 us per loop
</snippet></ROW><ROW><id>17075766</id><snippet>&gt;&gt;&gt; def StartDance(*args):
        return "%d, %d, %d, %d!" % tuple(args)

&gt;&gt;&gt; StartDance(5, 6, 7, 8)
'5, 6, 7, 8!'
</snippet></ROW><ROW><id>17075766</id><snippet>&gt;&gt;&gt; def StartDance(*args):
        return (", ".join(["%d"] * len(args))+"!") % tuple(args)
&gt;&gt;&gt; StartDance(5, 6, 7, 8)
'5, 6, 7, 8!'
&gt;&gt;&gt; StartDance(5, 6, 7, 8, 9, 10)
'5, 6, 7, 8, 9, 10!'
&gt;&gt;&gt; StartDance(1)
'1!'
</snippet></ROW><ROW><id>17075766</id><snippet>&gt;&gt;&gt; StartDance(*range(5,9))
'5, 6, 7, 8!'
</snippet></ROW><ROW><id>17075800</id><snippet>heroku run python manage.py syncdb --app officialheroku
</snippet></ROW><ROW><id>17075800</id><snippet>heroku COMMAND [--app APP] [command-specific-options]
</snippet></ROW><ROW><id>17075855</id><snippet>write("""&lt;html&gt;&lt;head&gt;
    &lt;script&gt;
    var x = %d, y = %d;
    &lt;/script&gt;
    &lt;/head&gt;""" % (x, y))
</snippet></ROW><ROW><id>17075855</id><snippet>x</snippet></ROW><ROW><id>17075855</id><snippet>y</snippet></ROW><ROW><id>17075962</id><snippet>salt</snippet></ROW><ROW><id>17075962</id><snippet>salt = r'D(A\3*w/lo6Coo\Mc,H!0!2Z3d@O&amp;R'
</snippet></ROW><ROW><id>17075962</id><snippet>salt = 'D(A\\3*w/lo6Coo\\Mc,H!0!2Z3d@O&amp;R'
</snippet></ROW><ROW><id>17075962</id><snippet>\3</snippet></ROW><ROW><id>17075962</id><snippet>3</snippet></ROW><ROW><id>17075962</id><snippet>md5</snippet></ROW><ROW><id>17075962</id><snippet>def md5(text):
    return hashlib.md5(text).hexdigest()

hash = md5(md5(plaintext) + salt)
</snippet></ROW><ROW><id>17076060</id><snippet>b = open(a, 'r+')
for line in b:
    if line.startswith("E PRAM") and "OOPS: 1" in line:
        next_line = next(b)
        # do whatever you need
</snippet></ROW><ROW><id>17076060</id><snippet>for</snippet></ROW><ROW><id>17076060</id><snippet>next</snippet></ROW><ROW><id>17076136</id><snippet>as</snippet></ROW><ROW><id>17076136</id><snippet>__enter__</snippet></ROW><ROW><id>17076136</id><snippet>with</snippet></ROW><ROW><id>17076136</id><snippet>class T(object):
    def __enter__(self):
        print('entering')
        return self
    def __exit__(self, exc_t, exc_v, trace):
        print('exiting')

with T():
    pass

&gt;&gt;&gt; entering
&gt;&gt;&gt; exiting
</snippet></ROW><ROW><id>17076136</id><snippet>with T() as t:
    print(t)

&gt;&gt;&gt; entering
&gt;&gt;&gt; &lt;__main__.T object at 0x00B34810&gt;
&gt;&gt;&gt; exiting
</snippet></ROW><ROW><id>17076136</id><snippet>__exit__</snippet></ROW><ROW><id>17076136</id><snippet>__enter__</snippet></ROW><ROW><id>17076136</id><snippet>__exit__</snippet></ROW><ROW><id>17076307</id><snippet>common</snippet></ROW><ROW><id>17076307</id><snippet>common</snippet></ROW><ROW><id>17076307</id><snippet>classinst1.common = 99
</snippet></ROW><ROW><id>17076307</id><snippet>classinst1</snippet></ROW><ROW><id>17076307</id><snippet>MyClass.common</snippet></ROW><ROW><id>17076307</id><snippet>classinst1.common</snippet></ROW><ROW><id>17076307</id><snippet>classinst2.common</snippet></ROW><ROW><id>17076307</id><snippet>MyClass.common</snippet></ROW><ROW><id>17076307</id><snippet>common</snippet></ROW><ROW><id>17076307</id><snippet>classinst2</snippet></ROW><ROW><id>17076307</id><snippet>MyClass.common = 7000
</snippet></ROW><ROW><id>17076307</id><snippet>MyClass.common</snippet></ROW><ROW><id>17076307</id><snippet>classinst1.common</snippet></ROW><ROW><id>17076307</id><snippet>classinst1.common</snippet></ROW><ROW><id>17076307</id><snippet>classinst2.common</snippet></ROW><ROW><id>17076307</id><snippet>classinst1</snippet></ROW><ROW><id>17076307</id><snippet>common</snippet></ROW><ROW><id>17076307</id><snippet>MyClass.common</snippet></ROW><ROW><id>17076382</id><snippet>def square(x):
    runningtotal = 0
    for counter in range(x):
        runningtotal = runningtotal + x
&lt;tab&gt;return runningtotal
</snippet></ROW><ROW><id>17076421</id><snippet>import itertools

myList = [[1,2,3],[4,5],[6],[7,8,9]]

itr = itertools.chain.from_iterator(myList)
</snippet></ROW><ROW><id>17076421</id><snippet>xrange(10)</snippet></ROW><ROW><id>17076482</id><snippet>yyyy</snippet></ROW><ROW><id>17076482</id><snippet>YYYY</snippet></ROW><ROW><id>17076482</id><snippet>dd</snippet></ROW><ROW><id>17076482</id><snippet>DD</snippet></ROW><ROW><id>17076482</id><snippet>Z</snippet></ROW><ROW><id>17076482</id><snippet>SimpleDateFormat</snippet></ROW><ROW><id>17076482</id><snippet>yyyy-MM-dd'T'HH:mm:ss.ssZ
 |   |  |  | |  |  |  | |
 |   |  |  | |  |  |  | -----timezone (RFC 822 time zone, ex: -0800)
 |   |  |  | |  |  |  -------seconds again (maybe you wanted SS for milliseconds)
 |   |  |  | |  |  ----------seconds (0-59)
 |   |  |  | |  -------------minutes (0-59)
 |   |  |  | ----------------hours (0-23)
 |   |  |  ------------------the character T
 |   |  ---------------------day in month 
 |   ------------------------month in year
 ----------------------------year
</snippet></ROW><ROW><id>17076482</id><snippet>"2013-03-01T11:22:18.01Z"</snippet></ROW><ROW><id>17076482</id><snippet>Z</snippet></ROW><ROW><id>17076482</id><snippet>yyyy-MM-dd'T'HH:mm:ss.ss'Z'
</snippet></ROW><ROW><id>17076482</id><snippet>T</snippet></ROW><ROW><id>17076510</id><snippet>&gt;&gt;&gt; int((3710402416420168191 + 3710402416420167681) / 2)
3710402416420167680
&gt;&gt;&gt; (3710402416420168191 + 3710402416420167681) // 2
3710402416420167936
</snippet></ROW><ROW><id>17076510</id><snippet>//</snippet></ROW><ROW><id>17076510</id><snippet>math.floor</snippet></ROW><ROW><id>17076552</id><snippet>Python</snippet></ROW><ROW><id>17076552</id><snippet>import json
ds = json.loads(json_data_string) #this contains the json
unique_stuff = { each['obj_id'] : each for each in ds }.values()
</snippet></ROW><ROW><id>17076552</id><snippet>all_ids = [ each['obj_id'] for each in ds ] # get 'ds' from above snippet
unique_stuff = [ ds[ all_ids.index(id) ] for id in set(ids) ]
</snippet></ROW><ROW><id>17076662</id><snippet>B</snippet></ROW><ROW><id>17076662</id><snippet>A</snippet></ROW><ROW><id>17076662</id><snippet>class B(object):

    def __init__(self):
        self.__a = the_lib.lib_function()

    def __getattr__(self, name):
        return getattr(self.__a, name)

    # maybe define __setattr__ too, and other __magic__ methods

    def my_method(self):
        # ...
</snippet></ROW><ROW><id>17076662</id><snippet>B</snippet></ROW><ROW><id>17076662</id><snippet>A</snippet></ROW><ROW><id>17076662</id><snippet>__magic__</snippet></ROW><ROW><id>17076730</id><snippet>print ("my name is [%s]"
       ", I like [%s] "
       "and I ask question on [%s]"
       % ("xxx", "python", "stackoverflow"))
</snippet></ROW><ROW><id>17076730</id><snippet>"foo" 'bar'</snippet></ROW><ROW><id>17076730</id><snippet>'foobar'</snippet></ROW><ROW><id>17076741</id><snippet>import re
# open the files
outputLineNumbers = open('OutputLineNumbers', 'w')
inputFile = open('Corpus.txt','r')

# read the corpus first
corpusLines = inputFile.readlines()

# loop through each line in corpus
for line_i in range(len(corpusLines)):
    line = corpusLines[line_i]

    # check if we have a regex match with "phrase" variable
    # if so, write it the output file
    if re.match( phrase, line ):
        outputLineNumbers.write( str(line_i+1) + "\n" )

# close the file handles
outputLineNumbers.close()
inputFile.close()
</snippet></ROW><ROW><id>17076764</id><snippet>T</snippet></ROW><ROW><id>17076764</id><snippet>In [11]: df
Out[11]:
         10  20  30  70
data1:  2.3   5   6   7

In [12]: df.T
Out[12]:
    data1:
10     2.3
20     5.0
30     6.0
70     7.0
</snippet></ROW><ROW><id>17076826</id><snippet>numpy.iinfo(numpy.int64).max
</snippet></ROW><ROW><id>17076826</id><snippet>9223372036854775807L
</snippet></ROW><ROW><id>17076826</id><snippet>numpy.finfo(numpy.float64).max
</snippet></ROW><ROW><id>17076826</id><snippet>1.7976931348623157e+308
</snippet></ROW><ROW><id>17076948</id><snippet>LoadData</snippet></ROW><ROW><id>17076948</id><snippet>SaveData</snippet></ROW><ROW><id>17076948</id><snippet>import pickle
import random

def load_data():
    try:
        with open("bin.dat") as f:
            x, y = pickle.load(f)
    except:
        x, y = [], []
    return x, y

def save_data(data):
    with open("bin.dat", "wb") as f:
        pickle.dump(data, f)

if __name__ == "__main__":
    x, y = load_data()
    print x, y
    x.append(random.randint(1, 10))
    y.append(random.randint(1, 10))
    save_data([x, y])
</snippet></ROW><ROW><id>17076948</id><snippet>[] []
[9] [9]
[9, 10] [9, 9]
[9, 10, 2] [9, 9, 4]
[9, 10, 2, 5] [9, 9, 4, 1]
[9, 10, 2, 5, 6] [9, 9, 4, 1, 9]
[9, 10, 2, 5, 6, 10] [9, 9, 4, 1, 9, 1]
</snippet></ROW><ROW><id>17077039</id><snippet>    def next_gamer(gamer):
        count = 0
        while count &lt; len(GAMERS):
            if gamer == GAMERS[count]:
                return GAMERS[count + 1]
            count = count + 1
        return GAMERS[0]
</snippet></ROW><ROW><id>17077185</id><snippet>def name_to_number(name):
    assert name, 'Name must exist!'

    skipped = sum(HEAD_BASE * TAIL_BASE ** i for i in range(len(name) - 1))
    val = reduce(
        lambda a,b: a * TAIL_BASE + TAIL_CHAR.index(b), 
        name[1:], 
        HEAD_CHAR.index(name[0]))
    return val + skipped
</snippet></ROW><ROW><id>17077195</id><snippet>for i in xrange(3):
    for j in xrange(2):
        print 'i={0} j={1}'.format(i,j)
</snippet></ROW><ROW><id>17077195</id><snippet>i=0 j=0    
i=0 j=1
i=1 j=0    &lt;-- inner loop restarts
i=1 j=1
i=2 j=0    &lt;-- inner loop restarts
i=2 j=1
</snippet></ROW><ROW><id>17077195</id><snippet>for</snippet></ROW><ROW><id>17077195</id><snippet>for</snippet></ROW><ROW><id>17077195</id><snippet>def foo(r):
    for i in r:
        do_something()

for x in xrange(20):
    foo( xrange(x) )
</snippet></ROW><ROW><id>17077196</id><snippet>In [58]: import datetime as DT

In [59]: eventdate = DT.datetime(2013, 6, 18, 2, 50)
In [60]: print(eventdate)
2013-06-18 02:50:00

In [61]: import dateutil.parser as parser
In [62]: parser.parse(eventdate)
AttributeError: 'datetime.datetime' object has no attribute 'read'
</snippet></ROW><ROW><id>17077196</id><snippet>eventdate</snippet></ROW><ROW><id>17077196</id><snippet>datetime.datetime</snippet></ROW><ROW><id>17077196</id><snippet>date_iso = dateutil.parser.parse(eventdate)
</snippet></ROW><ROW><id>17077196</id><snippet>string</snippet></ROW><ROW><id>17077196</id><snippet>In [66]: eventdate.isoformat()
Out[66]: '2013-06-18T02:50:00'
</snippet></ROW><ROW><id>17077239</id><snippet>AUTHENTICATION_BACKENDS</snippet></ROW><ROW><id>17077239</id><snippet>settings.py</snippet></ROW><ROW><id>17077239</id><snippet>settings.py</snippet></ROW><ROW><id>17077239</id><snippet>AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'django_openid_auth.auth.OpenIDBackend',
    )
</snippet></ROW><ROW><id>17077239</id><snippet>django.contrib.auth.backends.ModelBackend</snippet></ROW><ROW><id>17077239</id><snippet>django_openid_auth.auth.OpenIDBackend</snippet></ROW><ROW><id>17077239</id><snippet>django_openid_auth</snippet></ROW><ROW><id>17077239</id><snippet>INSTALLED_APPS</snippet></ROW><ROW><id>17077262</id><snippet>c = str(c)</snippet></ROW><ROW><id>17077262</id><snippet>str</snippet></ROW><ROW><id>17077262</id><snippet>str([1,2,3])</snippet></ROW><ROW><id>17077262</id><snippet>'[1, 2, 3]'</snippet></ROW><ROW><id>17077262</id><snippet>str.join()</snippet></ROW><ROW><id>17077262</id><snippet>s</snippet></ROW><ROW><id>17077262</id><snippet>a</snippet></ROW><ROW><id>17077262</id><snippet>s.join(a)</snippet></ROW><ROW><id>17077262</id><snippet>a</snippet></ROW><ROW><id>17077262</id><snippet>s</snippet></ROW><ROW><id>17077262</id><snippet>a = ['h','e','l','l','o']
print( ''.join(a) ) # Prints: hello
</snippet></ROW><ROW><id>17077262</id><snippet>a = ['Hello', 'and', 'welcome']
print( ' '.join(a) ) # Prints: Hello and welcome
</snippet></ROW><ROW><id>17077262</id><snippet>a = ['555','414','2799']
print( '-'.join(a) ) # Prints: 555-414-2799
</snippet></ROW><ROW><id>17077272</id><snippet>''.join([chr(x) for x in [1, 2, 3, 4]])</snippet></ROW><ROW><id>17077418</id><snippet>&gt;&gt;&gt; l = np.array([-3, -2, -1, 0, 1, 2, 3, 4, 3, 2, 1, 0, -1, -2, -3, 4, -3, -2, -1, 0, 1, 2])
&gt;&gt;&gt; epsilon = 1
&gt;&gt;&gt; inds = np.argwhere(np.abs(l) &lt; epsilon) # indices of “almost zero” items
&gt;&gt;&gt; left = inds[0] # index of the first “almost zero” value
&gt;&gt;&gt; right = inds[-1] # -//- last
&gt;&gt;&gt; l[:left + 1] = 0 # zero out everything to the left and including the first “almost zero”
&gt;&gt;&gt; l[right:] = 0 # -//- last
&gt;&gt;&gt; l
  &gt;
array([ 0,  0,  0,  0,  1,  2,  3,  4,  3,  2,  1,  0, -1, -2, -3,  4, -3,
   -2, -1,  0,  0,  0])
</snippet></ROW><ROW><id>17077617</id><snippet>ctypes</snippet></ROW><ROW><id>17077617</id><snippet>zipimport</snippet></ROW><ROW><id>17077617</id><snippet>virtualenv</snippet></ROW><ROW><id>17077950</id><snippet>def IdSet(self, value):
    if not isinstance(value, basestring):
        raise TypeError('ID must be a string.')
    self.caseful_id = value
    self.UpdateFromKey(ndb.Key(self.__class__, value.lower()))
</snippet></ROW><ROW><id>17077950</id><snippet>self.caseful_id = value
</snippet></ROW><ROW><id>17077950</id><snippet>UpdateFromKey</snippet></ROW><ROW><id>17077950</id><snippet>caseful_id</snippet></ROW><ROW><id>17077950</id><snippet>UpdateFromKey</snippet></ROW><ROW><id>17077950</id><snippet>from_datastore</snippet></ROW><ROW><id>17077950</id><snippet>True</snippet></ROW><ROW><id>17077950</id><snippet>caseful_id</snippet></ROW><ROW><id>17077950</id><snippet>UpdateFromKey</snippet></ROW><ROW><id>17077950</id><snippet>'GET'</snippet></ROW><ROW><id>17077950</id><snippet>def IdSet(self, value):
    if not isinstance(value, basestring):
        raise TypeError('ID must be a string.')
    self.UpdateFromKey(ndb.Key(self.__class__, value.lower()))
    if self.caseful_id is None:
        self.caseful_id = value
</snippet></ROW><ROW><id>17078045</id><snippet>my_array = [] # Create an empty list
for &lt;some loop&gt;:
    my_array.append(some_value)


# At this point, my_array is a list containing some_value for each loop iteration
print(my_array)
</snippet></ROW><ROW><id>17078045</id><snippet>#...
arraym = []
arrayna = []

for row in xmlload1['rows']:
    #...
    if strikeratecalc2 &gt; 50 and strikeratecalc2 &lt; 100):
        arraym.append("System M")
        arraym.append("user id = %s" % userid_delimiter_results)
        arraym.append("percantage = %s%%" % strikeratecalc2)
        arraym.append("")
    if strikeratecalc2 &gt; 0 and strikeratecalc2 &lt; 50):
        arrayna.append("System NA")
        arrayna.append("user id = %s" % userid_delimiter_results)
        arrayna.append("percantage = %s%%" % strikeratecalc2)
        arrayna.append("")
#...
</snippet></ROW><ROW><id>17078161</id><snippet>if question == "y" or "yes":
</snippet></ROW><ROW><id>17078161</id><snippet>"yes"</snippet></ROW><ROW><id>17078161</id><snippet>True</snippet></ROW><ROW><id>17078161</id><snippet>if question == "y" or question == "yes":
</snippet></ROW><ROW><id>17078179</id><snippet>    from collections import defaultdict
    from datetime import date

    month_aggregate = defaultdict (list)
    for [d,v] in A:
        month, day, year = map(int, d.split('/'))
        date = date (year, month, 1)
        month_aggregate [date].append (v)
</snippet></ROW><ROW><id>17078179</id><snippet>    from collections import defaultdict

    month_aggregate = defaultdict (list)
    for [d,v] in A:
        month, day, year = d.split('/')
        month_aggregate [month + "/" + year[2:]].append (v)
</snippet></ROW><ROW><id>17078404</id><snippet>Manager</snippet></ROW><ROW><id>17078404</id><snippet>Manager</snippet></ROW><ROW><id>17078404</id><snippet>manager.Queue</snippet></ROW><ROW><id>17078404</id><snippet>Queue</snippet></ROW><ROW><id>17078489</id><snippet>import time
import webbrowser

import requests
import lxml.html


session = requests.session()
url = "http://www.ncbi.nlm.nih.gov/Structure/cdd/wrpsb.cgi"
form_data = {'seqinput': '......'}

try_count = 0
while True:
    try_count += 1

    print 'Request....'
    r = session.post(url, form_data)
    with open('{}.html'.format(try_count), 'wb') as f:
        f.write(r.content)

    root = lxml.html.fromstring(r.content)

    form_data = {input_.get('name'): input_.get('value') for input_ in root.cssselect('#_refresh input')}
    if not form_data:
        break
    form_data['tick'] = '10000'

    print 'Wait for 10 seconds.'
    time.sleep(10)


print 'Done'
rid = root.cssselect('#div_search_info table.searchdata tr:nth-child(1) td:nth-child(2) strong')[0].tail.strip()
webbrowser.open('http://www.ncbi.nlm.nih.gov/Structure/cdd/wrpsb.cgi?RID=' + rid)
</snippet></ROW><ROW><id>17078990</id><snippet>from django.conf.urls import patterns, include, url

# Uncomment the next two lines to enable the admin:
from django.conf.urls.static import static
from django.contrib import admin

admin.autodiscover()

urlpatterns = patterns('',
    # Examples:
    url(r'^admin/', include(admin.site.urls)),
)
</snippet></ROW><ROW><id>17079022</id><snippet>import random
import pprint

class Graph:
    nodes = []
    edges = []
    removed_edges = []
    def remove_edge(self,x,y):
        e = (x,y)
        try:
            self.edges.remove(e)
            print("Removed edge %s" % str(e))
            self.removed_edges.append(e)
        except:
            print("Attempted to remove edge %s, but it wasn't there" % str(e))

    def Nodes(self):
        return self.nodes

    # Sample data
    def __init__(self):
        self.nodes = [1,2,3,4,5]
        self.edges = [
            (1,2),
            (1,3),
            (1,4),
            (1,5),
            (2,4),
            (3,4),
            (3,5),
            (4,5),
        ]

G = Graph()
N = G.Nodes()
for  x in N:
   for y in N:
      for z in N:
         #print("(%d,%d,%d)" % (x,y,z))
         if (x,y) != (y,z) and (x,y) != (x,z):
            if (x,y) in G.edges and (y,z) in G.edges:
                G.remove_edge(x,z)

print("Removed edges:")
pprint.pprint(G.removed_edges)
print("Remaining edges:")
pprint.pprint(G.edges)
</snippet></ROW><ROW><id>17079022</id><snippet>Removed edge (1, 4)
Attempted to remove edge (1, 4), but it wasn't there
Removed edge (1, 5)
Attempted to remove edge (2, 5), but it wasn't there
Removed edge (3, 5)
Removed edges:
[(1, 4), (1, 5), (3, 5)]
Remaining edges:
[(1, 2), (1, 3), (2, 4), (3, 4), (4, 5)]
</snippet></ROW><ROW><id>17079312</id><snippet>&gt;&gt;&gt; from collections import defaultdict
&gt;&gt;&gt; a=['car', 'house', 'wagon', 'rat', 'mouse', 'cart']
&gt;&gt;&gt; b=['carro', 'casa', 'carro', 'raton', 'raton', 'carro']
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for k, v in zip(b, a):
        d[k].append(v)
</snippet></ROW><ROW><id>17079312</id><snippet>d</snippet></ROW><ROW><id>17079312</id><snippet>&gt;&gt;&gt; d
defaultdict(&lt;type 'list'&gt;, {'casa': ['house'], 'carro': ['car', 'wagon', 'cart'], 'raton': ['rat', 'mouse']})
</snippet></ROW><ROW><id>17079312</id><snippet>&gt;&gt;&gt; ['{0}: {1}'.format(', '.join(v), k) for k, v in d.items()]
['house: casa', 'car, wagon, cart: carro', 'rat, mouse: raton']
</snippet></ROW><ROW><id>17079312</id><snippet>&gt;&gt;&gt; d = OrderedDict()
&gt;&gt;&gt; for k, v in zip(b, a):
        d.setdefault(k, []).append(v)


&gt;&gt;&gt; ['{0}: {1}'.format(', '.join(v), k) for k, v in d.items()]
['car, wagon, cart: carro', 'house: casa', 'rat, mouse: raton']
</snippet></ROW><ROW><id>17079362</id><snippet>try:
    f = int(f)
    f=convUnixTime(f)
except ValueError:
    pass
else:
    if f &lt;= 0:
      total_expired_users += 1
      expr_list[ filed[0] ] = f
    elif f &lt;= min_days:
      total_expring_users += 1
      expr_list[ filed[0] ] = f
</snippet></ROW><ROW><id>17079362</id><snippet>expr_list[filed[0]]</snippet></ROW><ROW><id>17079362</id><snippet>if f &lt;= min_days:
    expr_list[filed[0]] = f

    if f &lt;= 0:
        total_expired_users += 1
    else:
        total_expiring_users += 1
</snippet></ROW><ROW><id>17079434</id><snippet>networkx</snippet></ROW><ROW><id>17079437</id><snippet>shape</snippet></ROW><ROW><id>17079437</id><snippet>a</snippet></ROW><ROW><id>17079437</id><snippet>a[0,0]</snippet></ROW><ROW><id>17079437</id><snippet>a[4,5]</snippet></ROW><ROW><id>17079437</id><snippet>.sum(axis=n)</snippet></ROW><ROW><id>17079437</id><snippet>n</snippet></ROW><ROW><id>17079437</id><snippet>b</snippet></ROW><ROW><id>17079437</id><snippet>(5,6,7,8)</snippet></ROW><ROW><id>17079437</id><snippet>c = b.sum(axis=2)</snippet></ROW><ROW><id>17079437</id><snippet>(5,6,8)</snippet></ROW><ROW><id>17079437</id><snippet>c[x,y,z]</snippet></ROW><ROW><id>17079437</id><snippet>c[x,y,:,z]</snippet></ROW><ROW><id>17079825</id><snippet>exit</snippet></ROW><ROW><id>17079825</id><snippet>sys.exit</snippet></ROW><ROW><id>17079825</id><snippet>#!/usr/bin/env python

import subprocess
import sys

if len(sys.argv) == 8:
    # assume this was passed to git; we can of course do
    # some parsing to check if we got valid git style args
    args = [sys.argv[2], sys.argv[5]]
elif len(sys.argv) == 3:
    args = sys.argv[1:]
else:
    print "Not a valid number of args (2 or 7) to this diff program"
    sys.exit(1)
print "Files: ", args
for filename in args:
    filetype = subprocess.check_output(['file', filename])
    if filetype.find('text') == -1:
        args.insert(0, 'diff')
        print "A binary file was found: " + filename + ", deferring to diff"
        #sys.stdout.flush()
        subprocess.call(args)
        sys.exit(0)
</snippet></ROW><ROW><id>17079825</id><snippet>git</snippet></ROW><ROW><id>17079825</id><snippet>diff</snippet></ROW><ROW><id>17079825</id><snippet>diff</snippet></ROW><ROW><id>17079825</id><snippet>print</snippet></ROW><ROW><id>17080120</id><snippet>delta</snippet></ROW><ROW><id>17080120</id><snippet>def delta(a, b):
    return a - b
</snippet></ROW><ROW><id>17080120</id><snippet>def delta(a, b):
    return abs(a - b)
</snippet></ROW><ROW><id>17080120</id><snippet>import unittest

from module_you_fixed import delta

class TestDelta(unittest.TestCase):
    def test_delta(self):
        self.assertEqual(delta(9, 7), 2)
        self.assertEqual(delta(2, 5), 3)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>17080277</id><snippet>with open('some_file.txt', 'w') as f:
   for k in sorted(your_dic):
      f.write("{}:{}\n".format(k, your_dic[k]))
</snippet></ROW><ROW><id>17080599</id><snippet>glob</snippet></ROW><ROW><id>17080599</id><snippet>import glob
your_list = glob.glob('*.xyz')
</snippet></ROW><ROW><id>17080599</id><snippet>glob.glob</snippet></ROW><ROW><id>17080599</id><snippet>&gt;&gt;&gt; print glob.glob.__doc__
Return a list of paths matching a pathname pattern.

    The pattern may contain simple shell-style wildcards a la
    fnmatch. However, unlike fnmatch, filenames starting with a
    dot are special cases that are not matched by '*' and '?'
    patterns.
</snippet></ROW><ROW><id>17081022</id><snippet>def yield_sentences(node):
    if node.is_leaf():
        yield node.word
    else:
        for child in node.children:
            for sentence in yield_sentences(child):
                yield '{} {}'.format(node.word, sentence)
</snippet></ROW><ROW><id>17081022</id><snippet>&gt;&gt;&gt; class Node(object):
...     def __init__(self, word, *children):
...             self.word = word
...             self.children = children
...     def is_leaf(self):
...             return not self.children
... 
&gt;&gt;&gt; tree = Node('I', Node('have', Node('a', Node('dog'), Node('shotgun'))), Node("don't", Node('like', Node('Elvis'))))
&gt;&gt;&gt; #tree is now your example tree
&gt;&gt;&gt; list(yield_sentences(tree))
['I have a dog', 'I have a shotgun', "I don't like Elvis"]
</snippet></ROW><ROW><id>17081091</id><snippet>Exception</snippet></ROW><ROW><id>17081091</id><snippet>RuntimeError</snippet></ROW><ROW><id>17081198</id><snippet>class my_array:
    def __init__(self, lis):
        self.array = lis
    def sum(self):
        sm = 0
        for a in self.array :
            sm += a
        return sm              #or simply use the built-in function `sum()`
...     
&gt;&gt;&gt; x = my_array([3,5,6])
&gt;&gt;&gt; x.sum()
14
</snippet></ROW><ROW><id>17081316</id><snippet>bin</snippet></ROW><ROW><id>17081316</id><snippet>oct</snippet></ROW><ROW><id>17081316</id><snippet>hex</snippet></ROW><ROW><id>17081316</id><snippet>&gt;&gt;&gt; print(hex(se[0]))
0x68
&gt;&gt;&gt; print(hex(se[1]))
0x69
</snippet></ROW><ROW><id>17081316</id><snippet>for a_byte in se:
    print (bin(a_byte))
</snippet></ROW><ROW><id>17081327</id><snippet>&gt;&gt;&gt; s = 'ab'
&gt;&gt;&gt; s = s[:1]
&gt;&gt;&gt; s
'a'
</snippet></ROW><ROW><id>17081327</id><snippet>&gt;&gt;&gt; s = 'ab'
&gt;&gt;&gt; s = (s,)
&gt;&gt;&gt; s[0]
'ab'

&gt;&gt;&gt; s = 'ab'
&gt;&gt;&gt; s = [s]
&gt;&gt;&gt; s[0]
'ab'
</snippet></ROW><ROW><id>17081460</id><snippet>print(i, new_xp - old_xp)
</snippet></ROW><ROW><id>17081460</id><snippet>import math</snippet></ROW><ROW><id>17081460</id><snippet>from math import log, exp
</snippet></ROW><ROW><id>17081487</id><snippet>self.request.GET.getlist('pax')</snippet></ROW><ROW><id>17081644</id><snippet>_display.blit(_active_surface, (h,w))
</snippet></ROW><ROW><id>17081858</id><snippet>repr</snippet></ROW><ROW><id>17081858</id><snippet>str</snippet></ROW><ROW><id>17081858</id><snippet>&gt;&gt;&gt; num = .2 + .1
&gt;&gt;&gt; 'Float: %f. Repr: %r Str: %s' % (num, num, num)
'Float: 0.300000. Repr: 0.30000000000000004 Str: 0.3'
</snippet></ROW><ROW><id>17081858</id><snippet>%r</snippet></ROW><ROW><id>17081858</id><snippet>&gt;&gt;&gt; 'Repr:%r Str:%s' % ('foo','foo')
"Repr:'foo' Str:foo"
</snippet></ROW><ROW><id>17081858</id><snippet>%f</snippet></ROW><ROW><id>17081858</id><snippet>%d</snippet></ROW><ROW><id>17081898</id><snippet>find_all</snippet></ROW><ROW><id>17081898</id><snippet>weather_res = weather.findAll('th')
</snippet></ROW><ROW><id>17082113</id><snippet>In [1]: text = 'perchè'

In [2]: text
Out[2]: 'perch\xc3\xa8'

In [3]: print text
perchè
</snippet></ROW><ROW><id>17082113</id><snippet>repr</snippet></ROW><ROW><id>17082113</id><snippet>repr</snippet></ROW><ROW><id>17083205</id><snippet>&gt; typeof foo == 'undefined'
true
&gt; typeof 1 == 'number'
true
</snippet></ROW><ROW><id>17083205</id><snippet>if( typeof obj === 'undefined' || obj === null)
</snippet></ROW><ROW><id>17083205</id><snippet>typeof</snippet></ROW><ROW><id>17083280</id><snippet>&gt;&gt;&gt; c = {('1d','f1'):1.5,('1w','f1'):1.2,('1d','f2'):1.4}
&gt;&gt;&gt; {k: v for k, v in c.iteritems() if '1d' not in k}
{('1w', 'f1'): 1.2}
</snippet></ROW><ROW><id>17083280</id><snippet>c.iteritems()</snippet></ROW><ROW><id>17083280</id><snippet>c.items()</snippet></ROW><ROW><id>17083280</id><snippet>c.items()</snippet></ROW><ROW><id>17083574</id><snippet>&lt;a class="title" href="/"&gt;Dotan Cohen&lt;/a&gt;
</snippet></ROW><ROW><id>17083574</id><snippet>a</snippet></ROW><ROW><id>17083574</id><snippet>title</snippet></ROW><ROW><id>17083574</id><snippet>href</snippet></ROW><ROW><id>17083574</id><snippet>Dotan Cohen</snippet></ROW><ROW><id>17083574</id><snippet>name: a</snippet></ROW><ROW><id>17083574</id><snippet>attrs: {'href': '/', 'class': ['title']}</snippet></ROW><ROW><id>17083574</id><snippet>contents: ['Dotan Cohen']</snippet></ROW><ROW><id>17083574</id><snippet>contents</snippet></ROW><ROW><id>17083574</id><snippet>NavigableString</snippet></ROW><ROW><id>17083574</id><snippet>vars()</snippet></ROW><ROW><id>17083574</id><snippet>pprint()</snippet></ROW><ROW><id>17083574</id><snippet>.items()</snippet></ROW><ROW><id>17083574</id><snippet>pprint(vars(a))</snippet></ROW><ROW><id>17083574</id><snippet>pprint()</snippet></ROW><ROW><id>17083574</id><snippet>&gt;&gt;&gt; pprint(vars(a))
{'attrs': {'class': ['title'], 'href': '/'},
 'can_be_empty_element': False,
 'contents': [u'Dotan Cohen'],
 'hidden': False,
 'name': 'a',
 'namespace': None,
 'next_element': u'Dotan Cohen',
 'next_sibling': None,
 'parent': &lt;h1&gt;&lt;a class="title" href="/"&gt;Dotan Cohen&lt;/a&gt;&lt;/h1&gt;,
 'parser_class': &lt;class 'bs4.BeautifulSoup'&gt;,
 'prefix': None,
 'previous_element': &lt;h1&gt;&lt;a class="title" href="/"&gt;Dotan Cohen&lt;/a&gt;&lt;/h1&gt;,
 'previous_sibling': None}
</snippet></ROW><ROW><id>17083574</id><snippet>.__repr__()</snippet></ROW><ROW><id>17083574</id><snippet>&gt;&gt;&gt; a.__repr__()
'&lt;a class="title" href="/"&gt;Dotan Cohen&lt;/a&gt;'
</snippet></ROW><ROW><id>17083574</id><snippet>repr()</snippet></ROW><ROW><id>17083574</id><snippet>&gt;&gt;&gt; repr(a)
'&lt;a class="title" href="/"&gt;Dotan Cohen&lt;/a&gt;'
</snippet></ROW><ROW><id>17083739</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>17083739</id><snippet>python -c "import sys, pprint; pprint.pprint(sys.path)"
</snippet></ROW><ROW><id>17083739</id><snippet>/host/Python27/Lib/site-packages</snippet></ROW><ROW><id>17083739</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>17083739</id><snippet>export PYTHONPATH=$PYTHONPATH:/host/Python27/Lib/site-packages
</snippet></ROW><ROW><id>17083739</id><snippet>virtualenv</snippet></ROW><ROW><id>17083739</id><snippet>pip</snippet></ROW><ROW><id>17083739</id><snippet>virtualenv</snippet></ROW><ROW><id>17083739</id><snippet>pip install</snippet></ROW><ROW><id>17083739</id><snippet>pip install numpy</snippet></ROW><ROW><id>17083739</id><snippet>pip</snippet></ROW><ROW><id>17083739</id><snippet>apt-get install</snippet></ROW><ROW><id>17083739</id><snippet>apt-get</snippet></ROW><ROW><id>17083739</id><snippet>pip</snippet></ROW><ROW><id>17083739</id><snippet>chmod +x my_python_script.py</snippet></ROW><ROW><id>17083739</id><snippet>#!/usr/bin/env python</snippet></ROW><ROW><id>17083739</id><snippet>#!/usr/bin/python</snippet></ROW><ROW><id>17083739</id><snippet>./my_python_script.py</snippet></ROW><ROW><id>17084158</id><snippet>setup(
   ...
   options={
      'py2app':{
          'packages': [ 'requests' ]
       }
   }
)
</snippet></ROW><ROW><id>17084301</id><snippet>@periodic_task(run_every=crontab(minute='5'),
               queue='celery_periodic',
               options={'queue': 'celery_periodic'})
def recalc_last_hour():
    dt = datetime.utcnow()
    prev_hour = datetime(dt.year, dt.month, dt.day, dt.hour) \
                - timedelta(hours=1)
    log.debug('Generating task for hour %s', str(prev_hour))
    recalc_hour.delay(prev_hour)
</snippet></ROW><ROW><id>17084318</id><snippet>strs.splitlines</snippet></ROW><ROW><id>17084318</id><snippet>&gt;&gt;&gt; data="""? (192.168.30.4) at 00:10:60:0a:70:26 [ether]  on vlan20                        
... ? (192.168.30.1) at 70:ca:9b:99:6a:82 [ether]  on vlan20"""
&gt;&gt;&gt; [line.split() for line in data.splitlines()]
[['?', '(192.168.30.4)', 'at', '00:10:60:0a:70:26', '[ether]', 'on', 'vlan20'],
 ['?', '(192.168.30.1)', 'at', '70:ca:9b:99:6a:82', '[ether]', 'on', 'vlan20']
]
</snippet></ROW><ROW><id>17084318</id><snippet>data="""? (192.168.30.4) at 00:10:60:0a:70:26 [ether]  on vlan20                        
? (192.168.30.1) at 70:ca:9b:99:6a:82 [ether]  on vlan20"""

print "#Protocol  Address          Age (min)   Hardware Addr   Type   Interface"  
for line in data.splitlines():
    _,ip,_,har_ad,_,_,interface = line.split()
    ip = ip.strip('()')
    it = iter(har_ad.split(':'))
    har_ad = ".".join([x+y for x,y in zip(it,it)])
    print "#Internet  {} {:&gt;11s} {:&gt;18s} {:&gt;5s} {:&gt;8s}".format(ip,'-', har_ad,'ARPA' ,interface)        
</snippet></ROW><ROW><id>17084318</id><snippet>#Protocol  Address          Age (min)   Hardware Addr   Type   Interface
#Internet  192.168.30.4           -     0010.600a.7026  ARPA   vlan20
#Internet  192.168.30.1           -     70ca.9b99.6a82  ARPA   vlan20
</snippet></ROW><ROW><id>17084571</id><snippet>&gt;&gt;&gt; from itertools import combinations
&gt;&gt;&gt; nums = [[0,25], [1,54], [2,76], [3,13], [4,79]]
&gt;&gt;&gt; list(combinations(nums, r=2))
[([0, 25], [1, 54]), ([0, 25], [2, 76]), ([0, 25], [3, 13]), ([0, 25], [4, 79]), ([1, 54], [2, 76]), ([1, 54], [3, 13]), ([1, 54], [4, 79]), ([2, 76], [3, 13]), ([2, 76], [4, 79]), ([3, 13], [4, 79])]
</snippet></ROW><ROW><id>17084571</id><snippet>itertools.combinations</snippet></ROW><ROW><id>17084571</id><snippet>list(...)</snippet></ROW><ROW><id>17084571</id><snippet>for a, b in combinations(nums, r=2):
    pass
</snippet></ROW><ROW><id>17084785</id><snippet>import logging
logger = logging.getLogger('sql')
logger.addHandler(logging.StreamHandler('sql.log'))
logger.setLevel(logging.INFO)

def before_cursor_execute(conn, cursor, statement, parameters, context, executemany):
    logger.info(statement)
event.listen(engine, "before_cursor_execute", before_cursor_execute)
</snippet></ROW><ROW><id>17084848</id><snippet>L[4:4 + 2 * int(L[3]):2]</snippet></ROW><ROW><id>17084848</id><snippet>L[3]</snippet></ROW><ROW><id>17084848</id><snippet>L</snippet></ROW><ROW><id>17084848</id><snippet>int(L[3])</snippet></ROW><ROW><id>17084848</id><snippet>int</snippet></ROW><ROW><id>17084848</id><snippet>L[3]</snippet></ROW><ROW><id>17084848</id><snippet>4 + 2 * int(L[3])</snippet></ROW><ROW><id>17084848</id><snippet>int</snippet></ROW><ROW><id>17084848</id><snippet>L[4:8:2]</snippet></ROW><ROW><id>17084848</id><snippet>L[4]</snippet></ROW><ROW><id>17084848</id><snippet>L[7]</snippet></ROW><ROW><id>17084848</id><snippet>[L[4], L[6]]</snippet></ROW><ROW><id>17084848</id><snippet>L[start:stop:skip]</snippet></ROW><ROW><id>17084848</id><snippet>L[start]</snippet></ROW><ROW><id>17084848</id><snippet>L[stop]</snippet></ROW><ROW><id>17084848</id><snippet>[start, stop)</snippet></ROW><ROW><id>17084848</id><snippet>skip</snippet></ROW><ROW><id>17085211</id><snippet>\n</snippet></ROW><ROW><id>17085211</id><snippet>.strip()</snippet></ROW><ROW><id>17085320</id><snippet>if</snippet></ROW><ROW><id>17085320</id><snippet>elif</snippet></ROW><ROW><id>17085320</id><snippet>if-elif-else</snippet></ROW><ROW><id>17085320</id><snippet>if a &lt; min</snippet></ROW><ROW><id>17085320</id><snippet>True</snippet></ROW><ROW><id>17085320</id><snippet>min = 5
max = 10
b = 0
a = -2
if a &lt; min:
  min = a
if a &gt; max:
  max = a
else:            &lt;-- this is executed only if: `a &gt; max`: is `False`
  b += 1
print b, max, min
#1 10 -2
</snippet></ROW><ROW><id>17085444</id><snippet>chardet</snippet></ROW><ROW><id>17085444</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>17085444</id><snippet>if response.encoding is None:
   soup = bs4.BeautifulSoup(response.content)
</snippet></ROW><ROW><id>17085444</id><snippet>.text</snippet></ROW><ROW><id>17085444</id><snippet>else:
   soup = bs4.BeautifulSoup(response.text)
</snippet></ROW><ROW><id>17085639</id><snippet>[plt.plot(data[0],data[x]) for x in range(1,len(data[:,0]))]
</snippet></ROW><ROW><id>17085722</id><snippet>dd/mm/yyy</snippet></ROW><ROW><id>17085722</id><snippet>import xlwt
import datetime

workbook = xlwt.Workbook()
worksheet = workbook.add_sheet('Sheet1')

date_format = xlwt.XFStyle()
date_format.num_format_str = 'dd/mm/yyyy'

worksheet.write(0, 0, datetime.datetime.now(), date_format)

workbook.save('date_format.xls')
</snippet></ROW><ROW><id>17085722</id><snippet>d/mm/yyy</snippet></ROW><ROW><id>17085777</id><snippet>from collections import defaultdict

with open('1.txt') as fin:
    frame_rects = defaultdict(list)
    for row in (map(int, line.split()) for line in fin):
        id, frame, rect = row[0], row[2], row[3:7]
        frame_rects[frame].append((id, rect))
        # print '{} {} {}'.format(frame, id, rect) # (if you want to sample)

for key, value in frame_rects.items():
    print key, ' '.join([' '.join([str(i) for i in v]) for v in value])
</snippet></ROW><ROW><id>17085777</id><snippet>1 2 [561, 1, 20, 28] 5 [553, 197, 20, 20] 6 [113, 393, 36, 36]
2 2 [557, 1, 24, 32] 5 [552, 197, 23, 21] 6 [113, 391, 39, 39]
</snippet></ROW><ROW><id>17086109</id><snippet>Job.objects.filter(column1=..).filter(column2=..).filter(column3=..)
</snippet></ROW><ROW><id>17086129</id><snippet>for line in f:
    dict_st=dict()
    for item in line.split():
        k, v = map(int, item.split('-'))
        dict_st.setdefault(k, set()).add(v)
</snippet></ROW><ROW><id>17086129</id><snippet>dict_st={}
for line in f:
    for item in line.split():
        k, v = map(int, item.split('-'))
        dict_st.setdefault(k, set()).add(v)
</snippet></ROW><ROW><id>17086129</id><snippet>set</snippet></ROW><ROW><id>17086129</id><snippet>list</snippet></ROW><ROW><id>17086129</id><snippet>dict_st={}
for line in f:
    for item in line.split():
        k, v = map(int, item.split('-'))
        dict_st.setdefault(k, []).append(v)
</snippet></ROW><ROW><id>17086129</id><snippet>readlines()</snippet></ROW><ROW><id>17086274</id><snippet>zlib.decompress</snippet></ROW><ROW><id>17086327</id><snippet>.split()</snippet></ROW><ROW><id>17086327</id><snippet>None</snippet></ROW><ROW><id>17086327</id><snippet>.split('|')</snippet></ROW><ROW><id>17086327</id><snippet>L2 = line.strip().split('|')
</snippet></ROW><ROW><id>17086327</id><snippet>gloss = L2[1].strip()
</snippet></ROW><ROW><id>17086327</id><snippet>.strip()</snippet></ROW><ROW><id>17086327</id><snippet>gloss = L2[1].rstrip('\n')
</snippet></ROW><ROW><id>17086340</id><snippet>import os
path = "c:\\Python27\\test"

for name in os.listdir(path):
    if name.endswith('.txt'):
        fpath = os.path.join(path, name)
        with open(fpath) as fin:
            print fpath, 'opened'
</snippet></ROW><ROW><id>17086340</id><snippet>import glob
path = "c:\\Python27\\test"

for fpath in glob.glob(os.path.join(path, '*.txt')):
    with open(fpath) as fin:
        print fpath, 'opened'
</snippet></ROW><ROW><id>17086340</id><snippet>open()</snippet></ROW><ROW><id>17086340</id><snippet>*</snippet></ROW><ROW><id>17086471</id><snippet>items()</snippet></ROW><ROW><id>17086471</id><snippet>&gt;&gt;&gt; a = {1: {'alfa': '1', 'beta': '2', 'etc': '3'},
         2: {'alfa': '5', 'beta': '9', 'etc': '1'},
         3: {'alfa': '7', 'beta': '3', 'etc': '3'}, 
         4: {'alfa': '3', 'beta': 'a', 'etc': '2'}}
&gt;&gt;&gt; for k,v in sorted(a.items(), key=lambda x: x[1]['alfa']):
        print (k, v)
(1, {'etc': '3', 'beta': '2', 'alfa': '1'})
(4, {'etc': '2', 'beta': 'a', 'alfa': '3'})
(2, {'etc': '1', 'beta': '9', 'alfa': '5'})
(3, {'etc': '3', 'beta': '3', 'alfa': '7'})
</snippet></ROW><ROW><id>17086789</id><snippet>MyHTMLParser</snippet></ROW><ROW><id>17086789</id><snippet>handle_data()</snippet></ROW><ROW><id>17086789</id><snippet>HTMLParser</snippet></ROW><ROW><id>17086789</id><snippet>.feed()</snippet></ROW><ROW><id>17086789</id><snippet>MyHTMLParser</snippet></ROW><ROW><id>17086789</id><snippet>html.parser</snippet></ROW><ROW><id>17086789</id><snippet>html.parser</snippet></ROW><ROW><id>17086789</id><snippet>global y</snippet></ROW><ROW><id>17086789</id><snippet>y</snippet></ROW><ROW><id>17086789</id><snippet>global y</snippet></ROW><ROW><id>17086789</id><snippet>y</snippet></ROW><ROW><id>17086789</id><snippet>handle_data()</snippet></ROW><ROW><id>17086789</id><snippet>self.y</snippet></ROW><ROW><id>17086789</id><snippet>class MyHTMLParser(HTMLParser):
    y = None

    def handle_data(self, data):
        if '\\' not in data:
            if data == str1:
                print("Name of professor:", data)
                print("Name of course:", self.y) 
            self.y = x
</snippet></ROW><ROW><id>17086789</id><snippet>self.y</snippet></ROW><ROW><id>17086789</id><snippet>str1</snippet></ROW><ROW><id>17086957</id><snippet>register_namespace()</snippet></ROW><ROW><id>17086957</id><snippet>import sys
import xml.etree.ElementTree as etree

xsi =  "http://www.w3.org/2001/XMLSchema-instance"
xsd =  "http://www.w3.org/2001/XMLSchema"
ns = {"xmlns:xsi": xsi, "xmlns:xsd": xsd}
for attr, uri in ns.items():
    etree.register_namespace(attr.split(":")[1], uri)

foo = etree.Element("foo",
    dict(thing1="this", thing2="that")) # put `**ns))` if xsi, xsd are unused
somedata = etree.SubElement(foo, "somedata", dict(bar="1"))
etree.SubElement(somedata, "moredata",
    {"whatsit": "42", etree.QName(xsi, "type"): etree.QName(xsd, "string")})

etree.ElementTree(foo).write(sys.stdout, xml_declaration=True)
</snippet></ROW><ROW><id>17086957</id><snippet>ns</snippet></ROW><ROW><id>17087303</id><snippet>ast.literal_eval</snippet></ROW><ROW><id>17087303</id><snippet>--foo=bar</snippet></ROW><ROW><id>17087303</id><snippet>--foo bar</snippet></ROW><ROW><id>17087303</id><snippet>import argparse
import ast

parser = argparse.ArgumentParser() #allow the creation of known arguments ...

namespace,unparsed = parser.parse_known_args()

def parse_arg(arg):
    k,v = arg.split('=',1)
    try:
        v = ast.literal_eval(v) #evaluate the string as if it was a python literal
    except ValueError:          #if we fail, then we keep it as a string
        pass

    return k.lstrip('-'),v

d = dict(parse_arg(arg) for arg in unparsed)
print(d)
</snippet></ROW><ROW><id>17087303</id><snippet>globals().update(d)</snippet></ROW><ROW><id>17087342</id><snippet>f = open('file.asm', 'rU')
</snippet></ROW><ROW><id>17087342</id><snippet>\x1a</snippet></ROW><ROW><id>17087427</id><snippet>import datetime
d = "2013-W26"
r = datetime.datetime.strptime(d + '-0', "%Y-W%W-%w")
print(r)
</snippet></ROW><ROW><id>17087427</id><snippet>-0</snippet></ROW><ROW><id>17087427</id><snippet>-%w</snippet></ROW><ROW><id>17087427</id><snippet>2013-07-07 00:00:00
</snippet></ROW><ROW><id>17087427</id><snippet>%W</snippet></ROW><ROW><id>17087427</id><snippet>-1</snippet></ROW><ROW><id>17087427</id><snippet>strftime()</snippet></ROW><ROW><id>17087427</id><snippet>strptime()</snippet></ROW><ROW><id>17087427</id><snippet>strptime()</snippet></ROW><ROW><id>17087427</id><snippet>%U</snippet></ROW><ROW><id>17087427</id><snippet>%W</snippet></ROW><ROW><id>17087580</id><snippet>copystat</snippet></ROW><ROW><id>17087580</id><snippet>copystat</snippet></ROW><ROW><id>17087580</id><snippet>os.stat</snippet></ROW><ROW><id>17087580</id><snippet>os.utime</snippet></ROW><ROW><id>17087580</id><snippet>os.lstat</snippet></ROW><ROW><id>17087580</id><snippet>os.utime</snippet></ROW><ROW><id>17087580</id><snippet>print</snippet></ROW><ROW><id>17087580</id><snippet>str(f)</snippet></ROW><ROW><id>17087580</id><snippet>print f</snippet></ROW><ROW><id>17087580</id><snippet>print repr(f)</snippet></ROW><ROW><id>17087849</id><snippet>storm</snippet></ROW><ROW><id>17087849</id><snippet>java</snippet></ROW><ROW><id>17087849</id><snippet>get_classpath(extrajars)</snippet></ROW><ROW><id>17087849</id><snippet>$CLASSPATH</snippet></ROW><ROW><id>17087849</id><snippet>lib/</snippet></ROW><ROW><id>17087849</id><snippet>~/.storm</snippet></ROW><ROW><id>17087849</id><snippet>$CLASSPATH</snippet></ROW><ROW><id>17087849</id><snippet>lib/</snippet></ROW><ROW><id>17088151</id><snippet>json</snippet></ROW><ROW><id>17088151</id><snippet>def requireAuthentication(json=False):
    def decorator(fn):
        def wrapper(**kwargs):
            # Is user logged on?
            if "user" in request.session:
                return fn(**kwargs)

            # No, return error
            if json:
                return {
                    "exception": "NotAuthorized",
                    "error" : "You are not authorized, please log on"
                }
            redirect('/login?url={0}{1}'.format(request.path, ("?" + request.query_string if request.query_string else '')))
        return wrapper
    return decorator
</snippet></ROW><ROW><id>17088151</id><snippet>requireAuthentication</snippet></ROW><ROW><id>17088151</id><snippet>decorator</snippet></ROW><ROW><id>17088151</id><snippet>fn</snippet></ROW><ROW><id>17088151</id><snippet>decorator</snippet></ROW><ROW><id>17088151</id><snippet>wrapper</snippet></ROW><ROW><id>17088151</id><snippet>@</snippet></ROW><ROW><id>17088151</id><snippet>@helpers.requireAuthentication()</snippet></ROW><ROW><id>17088151</id><snippet>requireAuthentication</snippet></ROW><ROW><id>17088151</id><snippet>@</snippet></ROW><ROW><id>17088322</id><snippet>quietCraps()</snippet></ROW><ROW><id>17088322</id><snippet>game=quietCraps()
for x in range(n):    
    game
</snippet></ROW><ROW><id>17088322</id><snippet>game</snippet></ROW><ROW><id>17088322</id><snippet>quietCraps()</snippet></ROW><ROW><id>17088322</id><snippet>for x in range(n):    
    game=quietCraps()
</snippet></ROW><ROW><id>17088391</id><snippet>def search_query(query, pages):
    valid_pages = 0
    for p in pages:
        i = 0
        for q in query:
            j = p.find(q, i)
            if j &lt; 0:
                break
            i = j + 1
        else:
            valid_pages += 1
    return valid_pages 
</snippet></ROW><ROW><id>17088682</id><snippet>_virtual_init</snippet></ROW><ROW><id>17088682</id><snippet>__init__</snippet></ROW><ROW><id>17088682</id><snippet>AbstractSmth</snippet></ROW><ROW><id>17088682</id><snippet>NotImplementedError</snippet></ROW><ROW><id>17088682</id><snippet>__init__</snippet></ROW><ROW><id>17088682</id><snippet>abc</snippet></ROW><ROW><id>17088682</id><snippet>NotImplementedError</snippet></ROW><ROW><id>17088865</id><snippet>sudo apt-get install python3-dev</snippet></ROW><ROW><id>17089058</id><snippet>[^&lt;&gt;]+(?!--&gt;)</snippet></ROW><ROW><id>17089058</id><snippet>This is a comment--</snippet></ROW><ROW><id>17089058</id><snippet>--&gt;</snippet></ROW><ROW><id>17089058</id><snippet>(?:(?!--&gt;).)*
</snippet></ROW><ROW><id>17089058</id><snippet>(?:(?!--&gt;)[^&lt;&gt;])*
</snippet></ROW><ROW><id>17089058</id><snippet>--&gt;</snippet></ROW><ROW><id>17089248</id><snippet>&gt;&gt;&gt; a='   Hello world'
&gt;&gt;&gt; len(a) - len(a.lstrip())
3
</snippet></ROW><ROW><id>17089248</id><snippet>&gt;&gt;&gt; sum(1 for _ in itertools.takewhile(str.isspace,a))
3
</snippet></ROW><ROW><id>17089248</id><snippet>len(a)</snippet></ROW><ROW><id>17089248</id><snippet>&gt;&gt;&gt; a = "foobar"
&gt;&gt;&gt; a[len(a)]
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
IndexError: string index out of range
</snippet></ROW><ROW><id>17089455</id><snippet>matplotlib</snippet></ROW><ROW><id>17089455</id><snippet>def plot(..., ax=None, **kwargs):
    if ax is None:
        ax = gca()
    ax.plot(..., **kwargs)
</snippet></ROW><ROW><id>17089509</id><snippet>from foo import bar</snippet></ROW><ROW><id>17089734</id><snippet>import random
import bisect
import collections

def downsample(freq, n):
    cumsums = []
    total = 0
    choices, weights = zip(*freq.items())
    for weight in weights:
        total += weight
        cumsums.append(total)
    assert 0 &lt;= n &lt;= total
    result = collections.Counter()
    for _ in range(n):
        rnd = random.uniform(0, total)
        i = bisect.bisect(cumsums, rnd)
        result[choices[i]] += 1
        cumsums = [c if idx&lt;i else c-1 for idx, c in enumerate(cumsums)]
        total -= 1
    return result

freq = {'a': 5, 'c': 3, 'b': 2, 'd': 1}
print(downsample(freq, 5))
</snippet></ROW><ROW><id>17089734</id><snippet>Counter({'c': 2, 'a': 1, 'b': 1, 'd': 1})
</snippet></ROW><ROW><id>17090025</id><snippet>impoprt lxml.html

root = lxml.html.fromstring(response_content_string)
for a in root.cssselect('a[href]'):
    print(a)
</snippet></ROW><ROW><id>17090025</id><snippet>impoprt lxml.html

root = lxml.html.fromstring(response_content_string)
for el, attr, url, _ in root.iterlinks():
    print(url)
</snippet></ROW><ROW><id>17090038</id><snippet>vtk</snippet></ROW><ROW><id>17090038</id><snippet>brew update</snippet></ROW><ROW><id>17090038</id><snippet>brew rm vtk</snippet></ROW><ROW><id>17090038</id><snippet>brew install vtk --with-qt</snippet></ROW><ROW><id>17090038</id><snippet>PATH</snippet></ROW><ROW><id>17090038</id><snippet>/usr/local/bin</snippet></ROW><ROW><id>17090038</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>17090038</id><snippet>brew link python</snippet></ROW><ROW><id>17090038</id><snippet>brew reinstall python</snippet></ROW><ROW><id>17090205</id><snippet>re.search</snippet></ROW><ROW><id>17090205</id><snippet>re.match</snippet></ROW><ROW><id>17090205</id><snippet>re.match</snippet></ROW><ROW><id>17090205</id><snippet>'Not Ok'</snippet></ROW><ROW><id>17090205</id><snippet>\b</snippet></ROW><ROW><id>17090205</id><snippet>'Not Ok'</snippet></ROW><ROW><id>17090205</id><snippet>if 'Not Ok' in string</snippet></ROW><ROW><id>17090205</id><snippet>&gt;&gt;&gt; strs = 'Test result 1: Not Ok -31.08'
&gt;&gt;&gt; re.search(r'\bNot Ok\b',strs).group(0)
'Not Ok'
&gt;&gt;&gt; match = re.search(r'\bNot Ok\b',strs)
&gt;&gt;&gt; if match:
...     print "Found"
... else:
...     print "Not Found"
...     
Found
</snippet></ROW><ROW><id>17090242</id><snippet>StringIO</snippet></ROW><ROW><id>17090242</id><snippet>class ContextualStringIO(StringIO):
    def __enter__(self):
        return self
    def __exit__(self, *args):
        self.close() # icecrime does it, so I guess I should, too
        return False # Indicate that we haven't handled the exception, if received


test_lines = ContextualStringIO(...)
</snippet></ROW><ROW><id>17090242</id><snippet>StringIO</snippet></ROW><ROW><id>17090242</id><snippet>file</snippet></ROW><ROW><id>17090242</id><snippet>class ContextualStringIO(StringIO, file):
    pass
</snippet></ROW><ROW><id>17090242</id><snippet>ContextualStringIO</snippet></ROW><ROW><id>17090242</id><snippet>StringIO</snippet></ROW><ROW><id>17090242</id><snippet>file</snippet></ROW><ROW><id>17090277</id><snippet>%extend</snippet></ROW><ROW><id>17090277</id><snippet>$self</snippet></ROW><ROW><id>17090277</id><snippet>this</snippet></ROW><ROW><id>17090327</id><snippet>@member_perm</snippet></ROW><ROW><id>17090327</id><snippet>@app.route</snippet></ROW><ROW><id>17090327</id><snippet>@app.route('/profil/', methods=['GET', 'POST'])
@member_perm.require(http_exception=401)
def profil():
    # code ...
</snippet></ROW><ROW><id>17090370</id><snippet>x=Symbol('x', real=True)
v = sqrt(1-x).subs(x, 9).evalf()

if not v.is_real:
    raise ValueError, "math domain error"
</snippet></ROW><ROW><id>17090370</id><snippet>def assert_real(v):
    if not v.is_real:
        raise ValueError, "math domain error"
    return v
</snippet></ROW><ROW><id>17090370</id><snippet>x = Symbol('x', real=True)
v = assert_real(sqrt(1-x).subs(x, 9).evalf())
</snippet></ROW><ROW><id>17090841</id><snippet>==== settings.py ====
INSTALLED_APPS = INSTALLED_APPS + ('django_nose',)
TEST_RUNNER = 'django_nose.NoseTestSuiteRunner'
NOSE_ARGS = ['--with-doctest']
</snippet></ROW><ROW><id>17090916</id><snippet>front_space = lambda x:x[0]==" "
trailing_space = lambda x:x[-1]==" "
" "*front_space(text)+' '.join(text.split())+" "*trailing_space(text)
</snippet></ROW><ROW><id>17090989</id><snippet>code</snippet></ROW><ROW><id>17090989</id><snippet>Integer.__init__</snippet></ROW><ROW><id>17090989</id><snippet>code</snippet></ROW><ROW><id>17090989</id><snippet>class Random_Integer(object):
    """Welcome to the guessing game! You have unlimited attempts
    to guess the 3 random numbers, thats pretty much it.
    """
    def __init__(self):
        self.code = "%d%d%d" % (randint(1,9), randint(1,9), randint(1,9))
</snippet></ROW><ROW><id>17090989</id><snippet>class Runner(object):
    def __init__(self, start):
        self.start = start
        print start.__doc__
        print start.code
</snippet></ROW><ROW><id>17091103</id><snippet>gprmc, hdop, altitude, state, ad, baseid, csq, journey = information.split('|')[:8]
data = gprmc.split(',')
ptime, gpsindicator, lttd, ns, lgtd, ew, speed, course, pdate, dd = data[:10] 
checksum = data[-1] 
</snippet></ROW><ROW><id>17091103</id><snippet>gprmc, hdop, altitude, state, ad, baseid, csq, journey, *_ = information.split('|')
(ptime, gpsindicator, lttd, ns, lgtd, 
 ew, speed, course, pdate, dd, *_, checksum) = gprmc.split(',')
</snippet></ROW><ROW><id>17091290</id><snippet>MyClass()</snippet></ROW><ROW><id>17091290</id><snippet>MyClass</snippet></ROW><ROW><id>17091290</id><snippet>MyClass().__dict__</snippet></ROW><ROW><id>17091290</id><snippet>__dict__</snippet></ROW><ROW><id>17091290</id><snippet>sys.getsizeof(MyClass().__dict__)</snippet></ROW><ROW><id>17091290</id><snippet>keys</snippet></ROW><ROW><id>17091290</id><snippet>values</snippet></ROW><ROW><id>17091290</id><snippet>In [11]: class A():
   ....:     def __init__(self, **kwargs):
   ....:         for k,a in kwargs.items():
   ....:             self.__dict__[k]=a
   ....:
   ....:

In [14]: a1 = A(a=2)

In [15]: a2 = A(a=2,b=3,c='aaaa')

In [16]: import sys

In [17]: sys.getsizeof(a1.__dict__)
Out[17]: 140

In [18]: sys.getsizeof(a2.__dict__)
Out[18]: 140

In [19]: sys.getsizeof(a1.__dict__.keys())
Out[19]: 40

In [20]: sys.getsizeof(a2.__dict__.keys())
Out[20]: 48

In [21]: sys.getsizeof(a2.__dict__.keys()+a2.__dict__.values())
Out[21]: 60

In [22]: sys.getsizeof(a1.__dict__.keys()+a2.__dict__.values())
Out[22]: 52
</snippet></ROW><ROW><id>17091429</id><snippet>x.T</snippet></ROW><ROW><id>17091429</id><snippet>+=</snippet></ROW><ROW><id>17091429</id><snippet>x</snippet></ROW><ROW><id>17091429</id><snippet>x.T</snippet></ROW><ROW><id>17091429</id><snippet>(3,4)</snippet></ROW><ROW><id>17091429</id><snippet>x[3,4] = x[3,4] + x[4,3]
</snippet></ROW><ROW><id>17091429</id><snippet>(4,3)</snippet></ROW><ROW><id>17091429</id><snippet>x[4,3] = x[4,3] + x[3,4]
</snippet></ROW><ROW><id>17091429</id><snippet>x[3,4]</snippet></ROW><ROW><id>17091429</id><snippet>x</snippet></ROW><ROW><id>17091429</id><snippet>y[3,4] = x[3,4] + x[4,3]
</snippet></ROW><ROW><id>17091429</id><snippet>y[4,3] = x[4,3] + x[3,4]
</snippet></ROW><ROW><id>17091429</id><snippet>y</snippet></ROW><ROW><id>17091594</id><snippet>addressbook = {}
for a in range(1):
    name = raw_input ('Enter Name: ')
    address = raw_input ('Enter Adress: ')
    addressbook[name] = address
print addressbook
</snippet></ROW><ROW><id>17091594</id><snippet>names = []
addresses = []
for a in range(1):
    name = raw_input ('Enter Name: ')
    address = raw_input ('Enter Adress: ')
    names.append(name)
    addresses.append(address)
print dict(zip(names, addresses))
</snippet></ROW><ROW><id>17091611</id><snippet>json.encoder</snippet></ROW><ROW><id>17091611</id><snippet>encode_basestring</snippet></ROW><ROW><id>17091611</id><snippet>encode_basestring_ascii</snippet></ROW><ROW><id>17091611</id><snippet>int</snippet></ROW><ROW><id>17091611</id><snippet>int</snippet></ROW><ROW><id>17091611</id><snippet>import json

class IntDate(int):
    def __str__(self):
        return r'"\/Date(%s)\/"' % super(IntDate, self).__str__()

print(json.dumps({'date': IntDate(1371071409)}))
</snippet></ROW><ROW><id>17091682</id><snippet>n = 2</snippet></ROW><ROW><id>17091682</id><snippet>x</snippet></ROW><ROW><id>17091682</id><snippet>range(2, 2)</snippet></ROW><ROW><id>17091682</id><snippet>else</snippet></ROW><ROW><id>17092033</id><snippet>raise ... from None</snippet></ROW><ROW><id>17092033</id><snippet>try:
   import someProprietaryModule
except ImportError:
   raise ImportError('It appears that &lt;someProprietaryModule&gt; is not installed...') from None
</snippet></ROW><ROW><id>17092113</id><snippet>df['y']</snippet></ROW><ROW><id>17092113</id><snippet>.loc</snippet></ROW><ROW><id>17092113</id><snippet>.ix</snippet></ROW><ROW><id>17092113</id><snippet>y</snippet></ROW><ROW><id>17092113</id><snippet>In [7]: df = pandas.DataFrame(columns=['a','b','c','d'], index=['x','y','z'])

In [8]: df.loc['y'] = pandas.Series({'a':1, 'b':5, 'c':2, 'd':3})

In [9]: df
Out[9]: 
     a    b    c    d
x  NaN  NaN  NaN  NaN
y    1    5    2    3
z  NaN  NaN  NaN  NaN
</snippet></ROW><ROW><id>17092115</id><snippet>fooListFiltered = [foo for foo in fooList if not fooChecker(foo)]
</snippet></ROW><ROW><id>17092115</id><snippet>filter()</snippet></ROW><ROW><id>17092115</id><snippet>filter()</snippet></ROW><ROW><id>17092115</id><snippet>itertools.ifilter()</snippet></ROW><ROW><id>17092115</id><snippet>fooList[:] = fooListFiltered
</snippet></ROW><ROW><id>17092197</id><snippet>mytup = [('a',2),('a',6),('b',4),('a',4),('b',10),('c',4),('c',6),('c',8),('d',12),('d',10)]
d = {}

for key, value in mytup:
    if d.get(key) &lt; value:  # d.get(key) returns None if the key doesn't exist
        d[key] = value      # None &lt; float('-inf'), so it'll work

result = d.items()
</snippet></ROW><ROW><id>17092291</id><snippet>replacement = "test" 
original_string = "(cats &amp;&amp; dogs) || (cows &amp;&amp; chickens)"
new_string = re.sub(r'[a-z]+', replacement, original_string)
</snippet></ROW><ROW><id>17092291</id><snippet>[a-z]+</snippet></ROW><ROW><id>17092291</id><snippet>replacement = "test" 
original_string = "(cats &amp;&amp; dogs) || (cows &amp;&amp; chickens)"
new_string = re.sub(r'[^()|&amp; ]+', replacement, original_string)
</snippet></ROW><ROW><id>17092291</id><snippet>^</snippet></ROW><ROW><id>17092338</id><snippet>.Guess()</snippet></ROW><ROW><id>17092338</id><snippet>def Guess(self):
    guess_code = raw_input(self.prompt)
</snippet></ROW><ROW><id>17092338</id><snippet>return</snippet></ROW><ROW><id>17092338</id><snippet>def Guess(self):
    guess_code = raw_input(self.prompt)
    return guess_code
</snippet></ROW><ROW><id>17092338</id><snippet>None</snippet></ROW><ROW><id>17092338</id><snippet>next_guess = next_guess.Guess()
</snippet></ROW><ROW><id>17092338</id><snippet>next_guess</snippet></ROW><ROW><id>17092338</id><snippet>None</snippet></ROW><ROW><id>17092338</id><snippet>.Guess()</snippet></ROW><ROW><id>17092338</id><snippet>raw_input()</snippet></ROW><ROW><id>17092338</id><snippet>next_guess</snippet></ROW><ROW><id>17092338</id><snippet>.Guess()</snippet></ROW><ROW><id>17092338</id><snippet>Integer</snippet></ROW><ROW><id>17092338</id><snippet>Runner()</snippet></ROW><ROW><id>17092338</id><snippet>self.start</snippet></ROW><ROW><id>17092338</id><snippet>self.start</snippet></ROW><ROW><id>17092338</id><snippet>class Runner(object):
    def __init__(self, start):
        self.start = start
        print start.__doc__
        print start.code

    def play(self):        
        while True:
            next_guess = self.start.Guess()

            if next_guess == self.start.code:
                print "Good!"
                exit(0)

            else:
                print "Try again!"
</snippet></ROW><ROW><id>17092338</id><snippet>Integer</snippet></ROW><ROW><id>17092338</id><snippet>self.start</snippet></ROW><ROW><id>17092338</id><snippet>next_guess</snippet></ROW><ROW><id>17092338</id><snippet>self.start.Guess()</snippet></ROW><ROW><id>17092545</id><snippet>def make_me_unicode(s):
    if isinstance(s, str):
        return s.decode('utf-8')
    elif isinstance(s, unicode):
        return s
    else:
        return None
</snippet></ROW><ROW><id>17092699</id><snippet>import Tkinter
import sys
import tkMessageBox


class GUI(Tkinter.Tk):
    """docstring for Values"""
    def __init__(self, parent):
        Tkinter.Tk.__init__(self,parent)
        self.parent = parent

        ###if user hits close button
        def callback():
            if tkMessageBox.askokcancel("Quit", "Do you really wish to quit?"):
                self.destroy()
                sys.exit()

        self.protocol("WM_DELETE_WINDOW", callback)
        self.initialize()

    def initialize(self):
        self.grid()
        stepOne = Tkinter.LabelFrame(self, text=" 1. Enter Values ")
        stepOne.grid(row=0, columnspan=7, sticky='W',padx=5, pady=5, ipadx=5, ipady=5)
        self.Val1Lbl = Tkinter.Label(stepOne,text="Value 1")
        self.Val1Lbl.grid(row=0, column=0, sticky='E', padx=5, pady=2)
        self.Val1Txt = Tkinter.Entry(stepOne)
        self.Val1Txt.grid(row=0, column=1, columnspan=3, pady=2, sticky='WE')
        self.Val2Lbl = Tkinter.Label(stepOne,text="Value 2")
        self.Val2Lbl.grid(row=1, column=0, sticky='E', padx=5, pady=2)
        self.Val2Txt = Tkinter.Entry(stepOne)
        self.Val2Txt.grid(row=1, column=1, columnspan=3, pady=2, sticky='WE')

        self.val1 = None
        self.val2 = None

        self.SubmitBtn = Tkinter.Button(stepOne, text="Submit",command=self.submit)
        self.SubmitBtn.grid(row=4, column=3, sticky='W', padx=5, pady=2)

    def submit(self):
        self.val1 = self.Val1Txt.get()
        if self.val1 == "":
             tkMessageBox.showinfo(message="Value 1 has no values entered")
             return

        self.val2 = self.Val2Txt.get()
        if self.val2 == "":
             tkMessageBox.showinfo(message="Value 2 has no values entered")
             return

        ###Close GUI if Val1 and Val2 have values
        if self.val1 and self.val2:
             self.destroy()


app = GUI(None)
app.title('Values')
app.mainloop()
#calculate values of Val1 and Val2
a=float(app.val1)
b=float(app.val2)
c=a+b
print c
</snippet></ROW><ROW><id>17092708</id><snippet>clean()</snippet></ROW><ROW><id>17092708</id><snippet>clean</snippet></ROW><ROW><id>17092708</id><snippet>from django.core.validators import validate_ipv46_address, RegexValidator

validate_hostname = RegexValidator(regex=r'[a-zA-Z0-9-_]*\.[a-zA-Z]{2,6}')

def clean(self):  
    cleaned_data = super(CacheCheck, self).clean()
    record = cleaned_data.get("record")
    hostname = cleaned_data.get(hostname, "")

    if record == "PTR":
        validate_ipv46_address(hostname)
    elif record == "A":
        validate_hostname(hostname)
        # todo: check length of hostname as well

    return cleaned_data
</snippet></ROW><ROW><id>17092708</id><snippet>CacheCheck</snippet></ROW><ROW><id>17092708</id><snippet>forms.Form</snippet></ROW><ROW><id>17092905</id><snippet>application: myappid
version: 1
runtime: python27
api_version: 1
threadsafe: false

handlers:
- url: /favicon\.ico
  static_files: favicon.ico
  upload: favicon\.ico

- url: /_ah/mail/contact@myappid.appsportmail.com
  script: mailmain.app
  login: admin

- url: /.*
  script: mailmain.app

inbound_services:
- mail
</snippet></ROW><ROW><id>17092941</id><snippet>data</snippet></ROW><ROW><id>17092941</id><snippet>bytes</snippet></ROW><ROW><id>17092941</id><snippet>new</snippet></ROW><ROW><id>17092941</id><snippet>file.write(new)</snippet></ROW><ROW><id>17092941</id><snippet>file.write(bytes(new))</snippet></ROW><ROW><id>17092941</id><snippet>with open(filename+'.bmp', 'rb') as in_file:
    data = in_file.read()

new_data = bytes(byte//2*2 for byte in data)

with open(filename+'.bmp', 'wb') as out_file:
    out_file.write(new_data)
</snippet></ROW><ROW><id>17092949</id><snippet>optionflags</snippet></ROW><ROW><id>17092949</id><snippet>testmod</snippet></ROW><ROW><id>17092949</id><snippet>doctest</snippet></ROW><ROW><id>17092949</id><snippet>def foo():
    """
    &gt;&gt;&gt; foo()
    hello ...
    """
    print("hello world")

if __name__ == "__main__":
    import doctest
    doctest.testmod(verbose=True, optionflags=doctest.ELLIPSIS)
</snippet></ROW><ROW><id>17092949</id><snippet>$ python foo.py
Trying:
    foo()
Expecting:
    hello ...
ok
1 items had no tests:
    __main__
1 items passed all tests:
   1 tests in __main__.foo
1 tests in 2 items.
1 passed and 0 failed.
Test passed.
</snippet></ROW><ROW><id>17093080</id><snippet>(command=...)</snippet></ROW><ROW><id>17093080</id><snippet>def callback(event=None):
    ...
</snippet></ROW><ROW><id>17093246</id><snippet>screen -L -m -d -S some_name_to_reference_it my_program
</snippet></ROW><ROW><id>17093337</id><snippet>np.where(fs &gt;= 0.75)[0].size
</snippet></ROW><ROW><id>17093337</id><snippet>np.count_nonzero(fs &gt;= 0.75)
</snippet></ROW><ROW><id>17093337</id><snippet>fs &gt;= 0.75</snippet></ROW><ROW><id>17093337</id><snippet>fs</snippet></ROW><ROW><id>17093337</id><snippet>True</snippet></ROW><ROW><id>17093337</id><snippet>False</snippet></ROW><ROW><id>17093337</id><snippet>1</snippet></ROW><ROW><id>17093337</id><snippet>0</snippet></ROW><ROW><id>17093337</id><snippet>np.count_nonzero</snippet></ROW><ROW><id>17093337</id><snippet>fs</snippet></ROW><ROW><id>17093337</id><snippet>np.count_nonzero(fs[0:a] &gt;= 0.75)
</snippet></ROW><ROW><id>17093480</id><snippet>request</snippet></ROW><ROW><id>17093480</id><snippet>http://www.example.com/myapplication
</snippet></ROW><ROW><id>17093480</id><snippet>http://www.example.com/myapplication/page.html?x=y
</snippet></ROW><ROW><id>17093480</id><snippet>path          /page.html
script_root   /myapplication
base_url      http://www.example.com/myapplication/page.html
url           http://www.example.com/myapplication/page.html?x=y
url_root      http://www.example.com/myapplication/
</snippet></ROW><ROW><id>17093480</id><snippet>urlparse</snippet></ROW><ROW><id>17093480</id><snippet> &gt;&gt;&gt; from urlparse import urlparse
 &gt;&gt;&gt; urlparse(request.url).query
 'x=y'
</snippet></ROW><ROW><id>17093520</id><snippet>for i in iob:
    print i.colour
    for obj_name in i.name.all()
        print obj_name.name
</snippet></ROW><ROW><id>17093522</id><snippet>MySQLdb</snippet></ROW><ROW><id>17093522</id><snippet>literal()</snippet></ROW><ROW><id>17093522</id><snippet>sql = """
   select userid
      from usertab
    where name like %s
""" % cursor.connection.literal(search)
</snippet></ROW><ROW><id>17093563</id><snippet>import socket
import sys
with open('list', 'r') as f:# file is a global class

    # per default it reads the file line by line, 
    # readlines() loads the whole file in memory at once, using more memory
    # and you don't need the list.
    for i in f:
        i=i.replace('\n','')
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.settimeout(10)
        try:
            s.connect((i, 22))
            s.shutdown(2)
            s.close()
            print (i+' SSH ')
        except:
            try:
                s.connect((i, 23))
                s.shutdown(2)
                s.close()
                print (i+' Telnet')
            except:
                print (i + 'disable')
                pass
</snippet></ROW><ROW><id>17093728</id><snippet>ImageSet</snippet></ROW><ROW><id>17093728</id><snippet>images = my_imageset.image_set.all()
</snippet></ROW><ROW><id>17093728</id><snippet>{% for imageset in imagesets %}
    {{ imageset.title }}
    {% for image in imageset.image_set.all  %}
        &lt;img src="{{image.image_file.url}}" alt=""&gt;
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>17093737</id><snippet>fd = open(CONFIG.SERVICES_PATH + sname+'/'+url,'rb')
</snippet></ROW><ROW><id>17093885</id><snippet>/</snippet></ROW><ROW><id>17093885</id><snippet>4/3 = 1</snippet></ROW><ROW><id>17093885</id><snippet>/</snippet></ROW><ROW><id>17093885</id><snippet>4/3 = 1.3333..</snippet></ROW><ROW><id>17093885</id><snippet>//</snippet></ROW><ROW><id>17093885</id><snippet>from __future__ import division</snippet></ROW><ROW><id>17093885</id><snippet>&gt;&gt;&gt; 4/3
1
&gt;&gt;&gt; 4//3
1
&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 4/3
1.3333333333333333
&gt;&gt;&gt; 4//3
1
</snippet></ROW><ROW><id>17093947</id><snippet>__init__.py</snippet></ROW><ROW><id>17093947</id><snippet>-test_dir/
    __init__.py
    one.py
    two.py
</snippet></ROW><ROW><id>17093947</id><snippet>__init__.py</snippet></ROW><ROW><id>17093947</id><snippet>from one import A, B, C
from two import D, E, F
</snippet></ROW><ROW><id>17093947</id><snippet>test_dir</snippet></ROW><ROW><id>17094021</id><snippet>get_key</snippet></ROW><ROW><id>17094021</id><snippet>class MyApiKeyAuthentication(ApiKeyAuthentication):
    def get_key(self, user, api_key):
        """
        Attempts to find the API key for the user. Uses ``ApiKey`` by default
        but can be overridden.
        """
        from tastypie.models import ApiKey

        try:
            api_key = ApiKey.objects.get(user=user, key=api_key)
            current_time = datetime.utcnow()
            current_time = current_time.replace(tzinfo=pytz.utc)

            week = timedelta(7)

            if not (current_time - api_key.created) &lt; week:
                api_key.delete()
                return self._unauthorized()
            else:
                api_key.created = current_time
                api_key.save()

        except ApiKey.DoesNotExist:
            return self._unauthorized()

        return True
</snippet></ROW><ROW><id>17094116</id><snippet>class A(object):
    def __init__(self):
        print "A created"

class B(A):
    def __init__(self):
        super(B, self).__init__() # Q1: How to get "A created" from parent class?

b = B()


--output:--
A created
</snippet></ROW><ROW><id>17094116</id><snippet>class A(object):
    def __init__(self, name):
        self.name = name

class B(A):
    def __init__(self, anA, age):
        super(B, self).__init__(anA.name)
        self.age = age



existingA = {}
a = A("Sally")
existingA["Sally"] = a
a = A("George")
existingA["George"] = a


x = "Sally"
if x in existingA:
    b = B(existingA[x], 30) 
    print b.name, b.age


--output:--
Sally 30
</snippet></ROW><ROW><id>17094449</id><snippet>&gt;&gt;&gt; [x*10**pow for pow in range(6) for x in range(3,10,3)]
[3, 6, 9, 30, 60, 90, 300, 600, 900, 3000, 6000, 9000, 30000, 60000, 90000, 300000, 600000, 900000]
</snippet></ROW><ROW><id>17094449</id><snippet>xrange</snippet></ROW><ROW><id>17094449</id><snippet>&gt;&gt;&gt; [x*10**pow for pow in xrange(6) for x in xrange(3,10,3)]
[3, 6, 9, 30, 60, 90, 300, 600, 900, 3000, 6000, 9000, 30000, 60000, 90000, 300000, 600000, 900000]
</snippet></ROW><ROW><id>17094485</id><snippet># Required Blender information.
bl_info = {
           "name": "My Exporter",
           "author": "",
           "version": (1, 0),
           "blender": (2, 65, 0),
           "location": "File &gt; Export &gt; Test (.tst)",
           "description": "",
           "warning": "",
           "wiki_url": "",
           "tracker_url": "",
           "category": "Import-Export"
          }

# Import the Blender required namespaces.
import sys, getopt

import bpy
from bpy_extras.io_utils import ExportHelper



# The main exporter class.
class MyExporter(bpy.types.Operator, ExportHelper):
   bl_idname       = "export_scene.my_exporter";
   bl_label        = "My Exporter";
   bl_options      = {'PRESET'};

   filename_ext    = ".tst";

   object_count    = 0;

   def __init__(self):
      pass

   def execute(self, context):
      print("Execute was called.");

      self.parse_command_line_options();

      if (self.filepath == ""):
         print("No sutable filename was provided to save to.");
         return {'FINISHED'};

      # Get all the mesh objects in the scene.
      objList = [object for object in bpy.context.scene.objects if object.type == 'MESH'];

      # Now process all the objects that we found.
      for gameObject in objList:
         self.export_object(gameObject);

      # Parse all the objects in the scene.
      return {'FINISHED'};


   def export_object(self, gameObject):
      if (gameObject.type != "MESH"):
         print("Object was not of type mesh.");
      else:
         self.object_count += 1;

      return;


   def parse_command_line_options(self):
      modelFile = "";
      myArgs = [];
      argsStartPos = 0;

      if (("--" in sys.argv) == False):
         return;

      argsStartPos = sys.argv.index("--");
      argsStartPos += 1;
      myArgs = sys.argv[argsStartPos:];

      try:
         opts, args = getopt.getopt(myArgs, 'hm:', ["help", "model-file="]);
      except getOpt.GetoptError:
         print("Opt Error.");
         return;

      for opt, arg in opts:
         if (opt in ("-h", "--help")):
            print("Run this as the following blender command.");
            print("\tblender &lt;blend file&gt; --background --python &lt;script file&gt; -- -m &lt;output file&gt;");
         elif (opt in ("-m", "--model-file")):
            modelFile = arg;

      if (modelFile != ""):
         self.filepath = modelFile;



# Define a function to create the menu option for exporting.
def create_menu(self, context):
   self.layout.operator(MyExporter.bl_idname,text="test (.tst)");

# Define the Blender required registration functions.
def register():
   """
   Handles the registration of the Blender Addon.
   """
   bpy.utils.register_module(__name__);
   bpy.types.INFO_MT_file_export.append(create_menu);

def unregister():
   """
   Handles the unregistering of this Blender Addon.
   """
   bpy.utils.unregister_module(__name__);
   bpy.types.INFO_MT_file_export.remove(create_menu);


# Handle running the script from Blender's text editor.
if (__name__ == "__main__"):
   print("Registering.");
   register();

   print("Executing.");
   bpy.ops.export_scene.my_exporter();
</snippet></ROW><ROW><id>17094488</id><snippet>subprocess</snippet></ROW><ROW><id>17094488</id><snippet>os.system</snippet></ROW><ROW><id>17094488</id><snippet>os.system</snippet></ROW><ROW><id>17094682</id><snippet>Tools -&gt; Command Palette...</snippet></ROW><ROW><id>17094682</id><snippet>Tools</snippet></ROW><ROW><id>17094814</id><snippet>class foo(HTMLCalendar):
    def formatday(self, day, weekday, data=''):
        if day==0: # note error here in original code
            return '&lt;td class="noday"&gt; &lt;/td&gt;'
        else:
            return '&lt;td class="%s"&gt;%d %s&lt;/td&gt;' % (self.cssclasses[weekday], day, data)

a = foo()
a.formatmonth(1, 2)
</snippet></ROW><ROW><id>17094814</id><snippet>self.data</snippet></ROW><ROW><id>17094814</id><snippet>a.data = ...</snippet></ROW><ROW><id>17094868</id><snippet>In [1]: import cPickle
In [2]:
In [3]: f = cPickle.load(open('mnist.pkl', 'rb'))

In [4]: type(f)
Out[4]: tuple

In [5]: len(f)
Out[5]: 3

In [6]: type(f[0])
Out[6]: tuple

In [7]: len(f[0])
Out[7]: 2

In [8]: type(f[0][0])
Out[8]: numpy.ndarray

In [9]: len(f[0][0])
Out[9]: 50000

In [10]: f[0][0].shape
Out[10]: (50000, 784)
</snippet></ROW><ROW><id>17094935</id><snippet>def _accumulate_stress(betweenness,S,P,sigma,s):
    delta = dict.fromkeys(S,0)
    while S:
        w = S.pop()
        for v in P[w]:
            delta[v] += (1.0+delta[w])
        if w != s:
            betweenness[w] += sigma[w]*delta[w]
    return betweenness
</snippet></ROW><ROW><id>17094941</id><snippet>SYSTEM</snippet></ROW><ROW><id>17094941</id><snippet>EXECUTE_COMMAND_LINE</snippet></ROW><ROW><id>17094941</id><snippet>EXECUTE_COMMAND_LINE</snippet></ROW><ROW><id>17095233</id><snippet>for k,v in your_dic.items():
    if v == 'DNC':
       del your_dic[k]
</snippet></ROW><ROW><id>17095233</id><snippet>your_dic = {k:v for k,v in your_dic.items() if v != 'DNC'}
</snippet></ROW><ROW><id>17095233</id><snippet>iteritems()</snippet></ROW><ROW><id>17095233</id><snippet>iterkeys()</snippet></ROW><ROW><id>17095233</id><snippet>itervalues()</snippet></ROW><ROW><id>17095233</id><snippet>iteritems()</snippet></ROW><ROW><id>17095233</id><snippet>iterkeys()</snippet></ROW><ROW><id>17095233</id><snippet>itervalues()</snippet></ROW><ROW><id>17095233</id><snippet>RuntimeError</snippet></ROW><ROW><id>17095233</id><snippet>for key in dic:</snippet></ROW><ROW><id>17095233</id><snippet>dict.keys()</snippet></ROW><ROW><id>17095233</id><snippet>dict.values()</snippet></ROW><ROW><id>17095233</id><snippet>dict.items()</snippet></ROW><ROW><id>17095479</id><snippet>foo_objects = Foo.objects.select_related('bar').extra(select={'is_ok':'IF(bar.is_ok,"Yes","No")'})
</snippet></ROW><ROW><id>17095479</id><snippet>select_related()</snippet></ROW><ROW><id>17095479</id><snippet>extra()</snippet></ROW><ROW><id>17095479</id><snippet>ValuesQuerySet</snippet></ROW><ROW><id>17095479</id><snippet>select_related()</snippet></ROW><ROW><id>17095479</id><snippet>extra()</snippet></ROW><ROW><id>17095479</id><snippet>foo_objects = Foo.objects.extra(tables=('bar',),
                                where=('foo.bar_id=bar.id',),
                                select={'is_ok':'IF(bar.is_ok,"Yes","No")'}).values()
</snippet></ROW><ROW><id>17095479</id><snippet>foo_objects = Foo.objects.values('bar__is_ok')
</snippet></ROW><ROW><id>17095492</id><snippet>path = 'C:\Users\me\Documents\Extract'
destination_path = 'C:\Users\me\Documents\Test'
i = 0
for folder in os.listdir(path):
    path_to_zip_file = os.path.join(path, folder)

    zfile = zipfile.ZipFile(path_to_zip_file)
    for name in zfile.namelist():
        if name.endswith('.xls'):
            new_name = str(i)+'_'+name
            new_path = os.path.join(destination_path, new_name)
            # This is obviously going to fail because we just opened it
            shutil.move(path_to_zip_file, new_path)
    i += 1
    zfile.close()
</snippet></ROW><ROW><id>17095492</id><snippet>.xls</snippet></ROW><ROW><id>17095527</id><snippet>print (lambda x,y: bin(int(x,2)+int(y,2))[2:])(raw_input(),raw_input())
</snippet></ROW><ROW><id>17095527</id><snippet>a="Enter Number";ri=raw_input;print "Sum: "+(lambda x,y: bin(int(x,2)+int(y,2))[2:])(ri(a+' 1: '),ri(a+' 2: '))
</snippet></ROW><ROW><id>17095527</id><snippet>print "Sum: "+(lambda q: "".join(reversed([ (lambda n: n[0+(None!=q.__setitem__(0,n[1]))])
((lambda x,y,z: (lambda v: (str(v%2),str(v/2)))
((ord(x)-48)+(ord(y)-48)+(ord(z)-48)))(x,y,q[0])) 
for x,y in reversed(zip(raw_input("Enter Number 1: ").zfill(16),
raw_input("Enter Number 2: ").zfill(16)))])))(['0'])
</snippet></ROW><ROW><id>17095610</id><snippet>&gt;&gt;&gt; from perfmon import session
&gt;&gt;&gt; test = session.USB()
</snippet></ROW><ROW><id>17095610</id><snippet>from perfmon import session
class USB(Session):
    def __init__(self):   
        pass #I have changed this part as It has two errors in your example
</snippet></ROW><ROW><id>17095620</id><snippet>In [21]: ne = (df1 != df2).any(1)

In [22]: ne
Out[22]:
0    False
1     True
2     True
dtype: bool
</snippet></ROW><ROW><id>17095620</id><snippet>In [23]: ne_stacked = (df1 != df2).stack()

In [24]: changed = ne_stacked[ne_stacked]

In [25]: changed.index.names = ['id', 'col']

In [26]: changed
Out[26]:
id  col
1   score         True
2   isEnrolled    True
    Comment       True
dtype: bool
</snippet></ROW><ROW><id>17095620</id><snippet>In [27]: difference_locations = np.where(df1 != df2)

In [28]: changed_from = df1.values[difference_locations]

In [29]: changed_to = df2.values[difference_locations]

In [30]: pd.DataFrame({'from': changed_from, 'to': changed_to}, index=changed.index)
Out[30]:
               from           to
id col
1  score       1.11         1.21
2  isEnrolled  True        False
   Comment     None  On vacation
</snippet></ROW><ROW><id>17095620</id><snippet>df1</snippet></ROW><ROW><id>17095620</id><snippet>df2</snippet></ROW><ROW><id>17095620</id><snippet>df1.index &amp; df2.index</snippet></ROW><ROW><id>17095852</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; original_string = "(black &amp;&amp; green) || (red &amp;&amp; blue)"
&gt;&gt;&gt; re.findall(r'\w+', original_string)
['black', 'green', 'red', 'blue']
</snippet></ROW><ROW><id>17096091</id><snippet>Tools</snippet></ROW><ROW><id>17096108</id><snippet>for x in matriztiempo:
</snippet></ROW><ROW><id>17096108</id><snippet>x</snippet></ROW><ROW><id>17096108</id><snippet>enumerate()</snippet></ROW><ROW><id>17096108</id><snippet>for i, x in enumerate(matriztiempo):
</snippet></ROW><ROW><id>17096108</id><snippet>x</snippet></ROW><ROW><id>17096108</id><snippet>i</snippet></ROW><ROW><id>17096108</id><snippet>for x in xrange(matriztiempo.shape[0]):
    for y in xrange(matriztiempo.shape[1]):
        if matrizvelocidades[x,y] != 0:
            matriztiempo[x,y] /= matrizvelocidades[x,y]
        else:
            matriztiempo[x,y] = 0
</snippet></ROW><ROW><id>17096108</id><snippet>zip()</snippet></ROW><ROW><id>17096108</id><snippet>itertools.izip()</snippet></ROW><ROW><id>17096108</id><snippet>matriztiempo[x,y]</snippet></ROW><ROW><id>17096108</id><snippet>try:</snippet></ROW><ROW><id>17096108</id><snippet>except</snippet></ROW><ROW><id>17096108</id><snippet>matrizvelocidades</snippet></ROW><ROW><id>17096108</id><snippet>matriztiempo /= matrizvelocidades
</snippet></ROW><ROW><id>17096108</id><snippet>good_mask = (matrizvelocidades != 0)
bad_mask = numpy.logical_not(good_mask)

matriztiempo[good_mask] /= matrizvelocidades[good_mask]
matriztiempo[bad_mask] = 0.0
</snippet></ROW><ROW><id>17096108</id><snippet>for</snippet></ROW><ROW><id>17096108</id><snippet>bad_mask</snippet></ROW><ROW><id>17096108</id><snippet>bad_mask = (matrizvelocidades == 0)
</snippet></ROW><ROW><id>17096108</id><snippet>numpy.logical_not()</snippet></ROW><ROW><id>17096108</id><snippet>bad_mask</snippet></ROW><ROW><id>17096108</id><snippet>good_mask</snippet></ROW><ROW><id>17096108</id><snippet>good_mask</snippet></ROW><ROW><id>17096108</id><snippet>numpy.logical_not()</snippet></ROW><ROW><id>17096108</id><snippet>matrizvelocidades</snippet></ROW><ROW><id>17096347</id><snippet>[:]</snippet></ROW><ROW><id>17096347</id><snippet>a = [[1]]</snippet></ROW><ROW><id>17096347</id><snippet>b = a[:] # is the same as:
b = [x for x in a]

&gt;&gt;&gt; a[0] is b[0]
True
</snippet></ROW><ROW><id>17096347</id><snippet>[:][:]</snippet></ROW><ROW><id>17096347</id><snippet>b = a[:][:] # is the same as:
b = [y for y in [x for x in a]]

&gt;&gt;&gt; a[0] is b[0]
True
</snippet></ROW><ROW><id>17096347</id><snippet>b</snippet></ROW><ROW><id>17096347</id><snippet>a</snippet></ROW><ROW><id>17096347</id><snippet>b</snippet></ROW><ROW><id>17096347</id><snippet>a</snippet></ROW><ROW><id>17096347</id><snippet>b=[x[:] for x in a]</snippet></ROW><ROW><id>17096596</id><snippet>while &lt;ANYTHING_evaluating_to_boolean&gt;:
    #do something
</snippet></ROW><ROW><id>17096596</id><snippet>&lt;ANYTHING_evaluating_to_boolean&gt;</snippet></ROW><ROW><id>17096755</id><snippet>listObjects()</snippet></ROW><ROW><id>17096755</id><snippet>delimiter</snippet></ROW><ROW><id>17096755</id><snippet>/</snippet></ROW><ROW><id>17096770</id><snippet>* */n * * * python /home/pi/Desktop/myProg.py
</snippet></ROW><ROW><id>17096770</id><snippet>sudo crontab -e</snippet></ROW><ROW><id>17096770</id><snippet>2</snippet></ROW><ROW><id>17096770</id><snippet>* */n * * *</snippet></ROW><ROW><id>17096770</id><snippet>n</snippet></ROW><ROW><id>17096770</id><snippet>&gt;&gt; /home/pi/Desktop/myLog.log</snippet></ROW><ROW><id>17096770</id><snippet>* */2 * * * python /home/pi/Desktop/myProg.py &gt;&gt; /home/pi/Desktop/myLog.log
</snippet></ROW><ROW><id>17096770</id><snippet>import sys
sys.stdout = open("myLog.log","w")    
sys.stderr = open("myLogErr.log","w")   
print "stdout test"
</snippet></ROW><ROW><id>17097285</id><snippet>&gt;&gt;&gt; name = u'Jazmín Fernández'
&gt;&gt;&gt; urllib.urlencode({'name': name.encode('utf8')})
'name=Jazm%C3%ADn+Fern%C3%A1ndez'
</snippet></ROW><ROW><id>17097317</id><snippet>re.sub</snippet></ROW><ROW><id>17097317</id><snippet>import re
with open('myfile.txt', 'r') as file:
    content = file.read()
with open('myfile.txt', 'w') as file:
    file.write(re.sub(r'\d+[\dO]+|[\dO]+\d+', lambda m: m.group().replace('O', '0'), content))
</snippet></ROW><ROW><id>17097397</id><snippet>df.replace('-', None)
TypeError: If "to_replace" and "value" are both None then regex must be a mapping
</snippet></ROW><ROW><id>17097397</id><snippet>In [11]: df.replace('-', df.replace(['-'], [None]) # or .replace('-', {0: None})
Out[11]:
      0
0  None
1     3
2     2
3     5
4     1
5    -5
6    -1
7  None
8     9
</snippet></ROW><ROW><id>17097397</id><snippet>In [12]: df.replace('-', np.nan)
Out[12]:
     0
0  NaN
1    3
2    2
3    5
4    1
5   -5
6   -1
7  NaN
8    9
</snippet></ROW><ROW><id>17097626</id><snippet>zip_file = zipfile.ZipFile('toto.zip')
target_path = 'C:\test\object'

for i, filename in enumerate(zip_file.namelist()):
    target = os.path.join(target_path, "%05d_%s" % (i, filename))
    file_obj = open(target, 'wb')
    try:
        shutil.copyfileobj(zip_file.open(filename, 'r'), file_obj)
    finally:
        file_obj.close()
</snippet></ROW><ROW><id>17097656</id><snippet>customer</snippet></ROW><ROW><id>17097656</id><snippet>account_phone</snippet></ROW><ROW><id>17097656</id><snippet>display_phone</snippet></ROW><ROW><id>17097656</id><snippet>form.instance.account_phone</snippet></ROW><ROW><id>17097656</id><snippet>__init__</snippet></ROW><ROW><id>17097656</id><snippet>instance</snippet></ROW><ROW><id>17097656</id><snippet>kwargs</snippet></ROW><ROW><id>17097656</id><snippet>def __init__(self, *args, **kwargs)
    super(CustomerForm, self).__init__(*args, **kwargs)
    if 'instance' in kwargs:
        self.assigned_numbers = (instance.account_phone, instance.display_phone)
</snippet></ROW><ROW><id>17097777</id><snippet>~df["col"].str.contains(word)
</snippet></ROW><ROW><id>17097785</id><snippet>entrez_eq.get(v)</snippet></ROW><ROW><id>17097785</id><snippet>v</snippet></ROW><ROW><id>17097785</id><snippet>v</snippet></ROW><ROW><id>17097785</id><snippet>list</snippet></ROW><ROW><id>17097785</id><snippet>dbrefs</snippet></ROW><ROW><id>17097785</id><snippet>dbrefs</snippet></ROW><ROW><id>17097785</id><snippet>['MGI:1920949']</snippet></ROW><ROW><id>17097785</id><snippet>['73699']</snippet></ROW><ROW><id>17097785</id><snippet>sp_eq[row.get('name')] = entrez_eq.get(v)
</snippet></ROW><ROW><id>17097785</id><snippet>key = row.get('name')
value = entrez_eq.get(v)
sp_eq[key] = value
</snippet></ROW><ROW><id>17097964</id><snippet>%%writefile filename.py
</snippet></ROW><ROW><id>17097964</id><snippet>filename.py</snippet></ROW><ROW><id>17098006</id><snippet>setWindowTitle(title)</snippet></ROW><ROW><id>17098006</id><snippet>QtDesigner</snippet></ROW><ROW><id>17098048</id><snippet>:</snippet></ROW><ROW><id>17098048</id><snippet>for</snippet></ROW><ROW><id>17098048</id><snippet>for element in text:
    print element['number']
</snippet></ROW><ROW><id>17098048</id><snippet>for number in [element['number'] for element in text]:
    print number
</snippet></ROW><ROW><id>17098174</id><snippet>    arrayna = [arrayna1, arrayna2, arrayna3, arrayna4]

    arraym1 = "user id = ",userid_delimiter_results
</snippet></ROW><ROW><id>17098174</id><snippet>my_array = [] # Create an empty list

print(my_array)
</snippet></ROW><ROW><id>17098178</id><snippet>echo</snippet></ROW><ROW><id>17098178</id><snippet>(...)</snippet></ROW><ROW><id>17098178</id><snippet>echo -e "Line One\nLine Two\nLine Three" |  python &lt;(cat &lt;&lt;HERE
import sys
print "stdout hi"
for line in sys.stdin:
  print line.rstrip()
print "stdout hi"
HERE
)
</snippet></ROW><ROW><id>17098178</id><snippet>stdout hi
Line One
Line Two
Line Three
stdout hi
</snippet></ROW><ROW><id>17098178</id><snippet>/dev/fd/&lt;filehandle&gt;</snippet></ROW><ROW><id>17098178</id><snippet>stdin</snippet></ROW><ROW><id>17098178</id><snippet>echo</snippet></ROW><ROW><id>17098178</id><snippet>fdopen(3)</snippet></ROW><ROW><id>17098178</id><snippet>exec 10&lt; &lt;(echo -e "Line One\nLine Two\nLine Three")

perl &lt;&lt;'XXX'
print "stdout hi\n";
open($hin, "&lt;&amp;=", 10) or die;
while (&lt;$hin&gt;) { print $_; }
print "stdout hi\n";
XXX
</snippet></ROW><ROW><id>17098178</id><snippet>echo</snippet></ROW><ROW><id>17098178</id><snippet>echo</snippet></ROW><ROW><id>17098178</id><snippet>fork</snippet></ROW><ROW><id>17098178</id><snippet>exec 10&lt;&lt;XXX
Line One
Line Two
Line Three
XXX
</snippet></ROW><ROW><id>17098178</id><snippet>-c</snippet></ROW><ROW><id>17098178</id><snippet>echo -e "Line One\nLine Two\nLine Three"|python -c 'import sys
print "Stdout hi"
for line in sys.stdin:
  print line.rstrip()
print "Stdout hi"'
</snippet></ROW><ROW><id>17098258</id><snippet>a</snippet></ROW><ROW><id>17098258</id><snippet>b</snippet></ROW><ROW><id>17098258</id><snippet>c</snippet></ROW><ROW><id>17098258</id><snippet>dict</snippet></ROW><ROW><id>17098258</id><snippet>int</snippet></ROW><ROW><id>17098258</id><snippet>str</snippet></ROW><ROW><id>17098258</id><snippet>dict</snippet></ROW><ROW><id>17098258</id><snippet>int</snippet></ROW><ROW><id>17098258</id><snippet>a = {'jane': [1, 120], 'bob': [3, 35], 'joe': [5, 70]}
b = {'bob': [1, 12], 'jane': [2, 240], 'joe': [1, 100]}
c = {'joe': [2, 30], 'jane': [5, 45], 'bob': [0, 0]}
</snippet></ROW><ROW><id>17098258</id><snippet>result = {}
for d in a, b, c:
    for k, v in d.items():
        if not k in result:
            result[k] = [0, 0]
        result[k][0] += v[0]
        result[k][1] += v[1]
</snippet></ROW><ROW><id>17098258</id><snippet>{'bob': [4, 47], 'jane': [8, 405], 'joe': [8, 200]}
</snippet></ROW><ROW><id>17098258</id><snippet>defaultdict</snippet></ROW><ROW><id>17098258</id><snippet>if not k in result:</snippet></ROW><ROW><id>17098258</id><snippet>def convert(list_of_lists):
    result = {}
    for element in list_of_lists:
        key = element[0]
        values = []
        for value in element[1:]
            values.append(int(value))
        result[key] = values
    return result
</snippet></ROW><ROW><id>17098258</id><snippet>values = []… for value in … values.append(…)</snippet></ROW><ROW><id>17098258</id><snippet>[int(value) for value in element[1:]]</snippet></ROW><ROW><id>17098258</id><snippet>return {element[0]: [int(value) for value in element[1:]] for element in list_of_lists}
</snippet></ROW><ROW><id>17098258</id><snippet>def unconvert(dict_of_lists):
    result = []
    for key, values in dict_of_lists.items():
        element = [key] + [str(value) for value in values]
        result.append(element)
    return result
</snippet></ROW><ROW><id>17098310</id><snippet>exists = Map.all().count(limit=1)
if exists: # it's not empty!
</snippet></ROW><ROW><id>17098338</id><snippet>globals()</snippet></ROW><ROW><id>17098338</id><snippet>&gt;&gt;&gt; my_list = ['c1','c2','c3']
&gt;&gt;&gt; for x in my_list:
...     globals()[x] = []
...     
&gt;&gt;&gt; c1
[]
&gt;&gt;&gt; c2
[]
&gt;&gt;&gt; c3
[]
</snippet></ROW><ROW><id>17098338</id><snippet>&gt;&gt;&gt; dic = {item : []  for item in my_list}
&gt;&gt;&gt; dic
{'c2': [], 'c3': [], 'c1': []}
</snippet></ROW><ROW><id>17098427</id><snippet>import unicodedata
a = u"STRING GOES HERE" # using an actual string would break stackoverflow's code formatting.
u"".join( x for x in a if not unicodedata.category(x).startswith("M") )
</snippet></ROW><ROW><id>17098430</id><snippet>pip install werkzeug==0.8.3
pip install flask==0.9
pip install Flask-Login==0.1.3
</snippet></ROW><ROW><id>17098454</id><snippet>{% for day, rooms in mydict.items %}
  {% for room, dates_and_flags in rooms.items %}
    {% for date, time_and_flags in dates_and_flags %}
        {{ date }}:{{ time_and_flags }}
    {% endfor %}
  {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>17098454</id><snippet>time_and_flags</snippet></ROW><ROW><id>17098454</id><snippet>time_and_flags.0</snippet></ROW><ROW><id>17098454</id><snippet>time_and_flags.1</snippet></ROW><ROW><id>17098619</id><snippet>sum</snippet></ROW><ROW><id>17098619</id><snippet>&gt;&gt;&gt; import __builtin__
def sum(seq, start = 0):
    if all(isinstance(x,str) for x in seq):
        return "".join(seq)
    else:
        return __builtin__.sum(seq, start)
...     
&gt;&gt;&gt; sum([4,5,6,7])
22
&gt;&gt;&gt; sum(['s','t','a','c','k'])
'stack'
</snippet></ROW><ROW><id>17098736</id><snippet>save</snippet></ROW><ROW><id>17098736</id><snippet>df.save(file_name)  # where to save it, usually as a .pkl
</snippet></ROW><ROW><id>17098736</id><snippet>df = pd.load(file_name)
</snippet></ROW><ROW><id>17098736</id><snippet>to_pickle</snippet></ROW><ROW><id>17098736</id><snippet>read_pickle</snippet></ROW><ROW><id>17098736</id><snippet>store = HDFStore('store.h5')

store['df'] = df  # save it
store['df']  # load it
</snippet></ROW><ROW><id>17098925</id><snippet>entries</snippet></ROW><ROW><id>17098925</id><snippet>@app.route('/order', methods=['POST'])
def order_entry():
    # the following line creates a 'cursor' which you need to retrieve data
    # from the database
    cur = g.db.execute('select title, text from entries order by id desc')

    # the following line uses that cursor ("cur"), fetches the data, 
    # turns it into a (unsorted) list of dictionaries 
    entries = [dict(title=row[0], text=row[1]) for row in cur.fetchall()]

    # let's sort the list by the 'title' attribute now
    entries = sorted(entries, key=lambda d: d['title'])
    # or if you prefer, you could say: "entries.sort(key=lambda d:d['title']"

    # return the template with the sorted entries in
    return render_template('show_entries.html', entries=entries)
</snippet></ROW><ROW><id>17098925</id><snippet>gist</snippet></ROW><ROW><id>17099087</id><snippet>manage.py</snippet></ROW><ROW><id>17099087</id><snippet>PATH</snippet></ROW><ROW><id>17099087</id><snippet>python manage.py runserver</snippet></ROW><ROW><id>17099096</id><snippet>from collections import OrderedDict
with open('abc') as f:
    dic = OrderedDict()
    seen = set()
    for line in f:
        spl = line.split() + [""]
        key ,v = spl[:2]
        if v in dic and dic[v] == [""]:
            del dic[v]
        for k1,v1 in dic.items():
            if key in v1:
               dic[k1].append(v)
               break
        else:
             dic[key] = [v]

with open('ouput.txt', 'w') as f:
    for k,v  in dic.items():
        f.write("{} {}\n".format(k," ".join(v)))
</snippet></ROW><ROW><id>17099096</id><snippet>344670 
332807 353314 353311
338169 334478 
</snippet></ROW><ROW><id>17099140</id><snippet>a</snippet></ROW><ROW><id>17099140</id><snippet>{% for i in a %}

    {% if i == 1 %}

        {{ a.1 }}

    {% endif %}

{% endfor %}
</snippet></ROW><ROW><id>17099145</id><snippet>[[0.0] * 10] * 10</snippet></ROW><ROW><id>17099145</id><snippet>&gt;&gt;&gt; test = [[0.0] * 10] * 10
&gt;&gt;&gt; [id(x) for x in test]     #see all IDs are same
[3065020524L, 3065020524L, 3065020524L, 3065020524L, 3065020524L, 3065020524L, 3065020524L, 3065020524L, 3065020524L, 3065020524L]
</snippet></ROW><ROW><id>17099145</id><snippet>&gt;&gt;&gt; test = [[0.0]*10 for _ in xrange(10)]
&gt;&gt;&gt; test[0][0] = 1.0
&gt;&gt;&gt; test
[[1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
</snippet></ROW><ROW><id>17099145</id><snippet>&gt;&gt;&gt; x = y = []
&gt;&gt;&gt; x is y       # Both point to the same object
True 
&gt;&gt;&gt; x.append(1)  # list.extend modifies a list in-place
&gt;&gt;&gt; x,y          # both references to [] can see the modification
([1], [1])
&gt;&gt;&gt; x = y = 1
&gt;&gt;&gt; x is y      #both points to the same object
True
&gt;&gt;&gt; x+=1        # only x gets modified, it now points to a new object 2
&gt;&gt;&gt; x,y         # y still points to the same object 1
(2, 1)
</snippet></ROW><ROW><id>17099293</id><snippet>import inspect

def func2():
    cframe = inspect.currentframe()
    func = inspect.getframeinfo(cframe.f_back).function
    print 'called from ' + func

def func1():
    func2()

func2()
func1()
</snippet></ROW><ROW><id>17099293</id><snippet>called from &lt;module&gt;
called from func1
</snippet></ROW><ROW><id>17099550</id><snippet>null,A,B,C
A,0,2,3
B,3,4,2
C,1,2,4
</snippet></ROW><ROW><id>17099550</id><snippet>csv = open("mat.csv")

columns = csv.readline().strip().split(',')[1:]
for line in csv:
    tokens = line.strip().split(',')
    row = tokens[0]
    for column, cell in zip(columns,tokens[1:]):
        print '{},{},{}'.format(row,column,cell)
</snippet></ROW><ROW><id>17099550</id><snippet>A,A,0
A,B,2
A,C,3
B,A,3
B,B,4
B,C,2
C,A,1
C,B,2
C,C,4
</snippet></ROW><ROW><id>17099550</id><snippet>csv = open("mat.csv")

columns = csv.readline().strip().split(',')[1:]
for i, line in enumerate(csv):
    tokens = line.strip().split(',')
    row = tokens[0]
    for column, cell in zip(columns[i:],tokens[i+1:]):
        print '{},{},{}'.format(row,column,cell)
</snippet></ROW><ROW><id>17099550</id><snippet>A,A,0
A,B,2
A,C,3
B,B,4
B,C,2
C,C,4
</snippet></ROW><ROW><id>17099566</id><snippet>object
    {}
    { members } 
members
    pair
    pair , members
pair
    string : value  # Keys *must* be strings.
</snippet></ROW><ROW><id>17099625</id><snippet>&lt;form action="/control" method="POST"&gt;
    &lt;input type="text" name="filePath"&gt;
    &lt;input type="submit" name="dropboxSubmit" value="Submit"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>17099722</id><snippet>Create_Widgets()</snippet></ROW><ROW><id>17099722</id><snippet>Authen</snippet></ROW><ROW><id>17099722</id><snippet>self.Username = Entry(self)</snippet></ROW><ROW><id>17099722</id><snippet>Username</snippet></ROW><ROW><id>17099722</id><snippet>passcheck</snippet></ROW><ROW><id>17099722</id><snippet>Username_mine = passcheck.Username.get()
</snippet></ROW><ROW><id>17099854</id><snippet>for row in table.findAll('tr', attrs = {'class':'odd'}) + table.findAll('tr', attrs = {'class':'even'}):
    for cell in row.findAll('td'):
        print cell
</snippet></ROW><ROW><id>17099998</id><snippet>def get_notes(self, pcb_serial_no, note_type=None):
    ''' Get notes recorded against a PCB unit, optionally 
        filtered by note_type. '''
    q = sql.select([
            pcb_notes_view.pcb_serial_no, 
            pcb_notes_view.note_type, 
            pcb_notes_view.description, 
            pcb_notes_view.username, 
            pcb_notes_view.note_time
        ]).where(
            pcb_notes_view.pcb_serial_no==pcb_serial_no
        )
    if note_type is not None:
        q = q.where(pcb_notes_view.note_type==note_type)
    rows = q.execute().fetch_all()
    return len(rows) &gt; 0 and rows
</snippet></ROW><ROW><id>17100088</id><snippet>lst =  ['1234', 'hello', '6787']
[x for x in lst if x.isalpha()]
=&gt;  ['hello']
</snippet></ROW><ROW><id>17100088</id><snippet>filter(lambda x: x.isalpha(), lst)
=&gt;  ['hello']
</snippet></ROW><ROW><id>17100088</id><snippet>for</snippet></ROW><ROW><id>17100088</id><snippet>filter()</snippet></ROW><ROW><id>17100247</id><snippet>virtualenv</snippet></ROW><ROW><id>17100247</id><snippet>python</snippet></ROW><ROW><id>17100247</id><snippet>easy_install</snippet></ROW><ROW><id>17100247</id><snippet>pip</snippet></ROW><ROW><id>17100247</id><snippet>make</snippet></ROW><ROW><id>17100247</id><snippet>which make
</snippet></ROW><ROW><id>17100247</id><snippet>python configure-ng.py
</snippet></ROW><ROW><id>17100467</id><snippet>Date#getTime</snippet></ROW><ROW><id>17100467</id><snippet>if request.method == "POST":
    try:
        # Remember, *never* trust user input
        # This is most likely a number but you are not guaranteed that
        data_id = int(request["id"])
    except ValueError:
        abort(400)
    # If we got here, we have a valid int
    # Insert data into MongoDB
</snippet></ROW><ROW><id>17100500</id><snippet>select()</snippet></ROW><ROW><id>17100500</id><snippet>select()</snippet></ROW><ROW><id>17100727</id><snippet>ctypes</snippet></ROW><ROW><id>17100727</id><snippet>c_short</snippet></ROW><ROW><id>17100727</id><snippet>POINTER</snippet></ROW><ROW><id>17100727</id><snippet>short **</snippet></ROW><ROW><id>17100727</id><snippet>def c_short_2darr(numpy_arr):
  c_short_p = POINTER(c_short)
  arr = (c_short_p * len(numpy_arr) ) ()
  for i in range(len(numpy_arr)):
    arr[i] = (c_short * len(numpy_arr[i]))()
    for j in range(len(numpy_arr[i])):
      arr[i][j] = numpy_arr[i][j]
  return arr
</snippet></ROW><ROW><id>17100727</id><snippet>func_py</snippet></ROW><ROW><id>17100727</id><snippet>CPPClass::func</snippet></ROW><ROW><id>17100727</id><snippet>CPPClass::func</snippet></ROW><ROW><id>17100727</id><snippet>// ...
void CPPClass::func(unsigned short **array, size_t w, size_t h)
{
    for(size_t i = 0; i &lt; w; ++i)
    {
      for(size_t j = 0; j &lt; h; ++j)
          cout &lt;&lt; array[i][j] &lt;&lt; ", ";
      cout &lt;&lt; '\n';
    }
}
// ...
void func_py(CPPClass *myClass,
             unsigned short **array, 
             size_t w, size_t h)
{
    myClass-&gt;func(array, w, h);
}
</snippet></ROW><ROW><id>17100727</id><snippet>&gt;&gt;&gt; arr = numpy.array([ [1,2,3], [4,5,6] ])
&gt;&gt;&gt; arr
array([[1, 2, 3],
       [4, 5, 6]])
&gt;&gt;&gt; cpplib.func_py(cppobj, c_short_2darr(arr), 2, 3)
1, 2, 3,
4, 5, 6,
0
</snippet></ROW><ROW><id>17100813</id><snippet>django.core.context_processors.request</snippet></ROW><ROW><id>17100813</id><snippet>TEMPLATE_CONTEXT_PROCESSORS</snippet></ROW><ROW><id>17100813</id><snippet>pjax_ubase.html</snippet></ROW><ROW><id>17100982</id><snippet>Builder.load_string("""
#:import ListItemButton kivy.uix.listview.ListItemButton
#:import ListAdapter kivy.adapters.listadapter.ListAdapter

&lt;ListViewModal&gt;:
    size_hint: None, None
    size: 400, 400
    ListView:
        size_hint: .8, .8
        adapter:
            ListAdapter(data=["Item #{0}".format(i) for i in range(100)], cls = ListItemButton)
""")
</snippet></ROW><ROW><id>17100982</id><snippet>size_hint</snippet></ROW><ROW><id>17100982</id><snippet>Builder.load_string("""
#:import ListItemButton kivy.uix.listview.ListItemButton
#:import ListAdapter kivy.adapters.listadapter.ListAdapter

&lt;ListViewModal&gt;:
    ListView:
        size_hint: .8, .8
        adapter:
            ListAdapter(data=["Item #{0}".format(i) for i in range(100)], cls = ListItemButton)
""")
</snippet></ROW><ROW><id>17100984</id><snippet>for (i, j), (k, v) in zip(d.items(), c.items()):
   print i, j, k, v
</snippet></ROW><ROW><id>17100984</id><snippet>OrderedDict</snippet></ROW><ROW><id>17100984</id><snippet>dict.items</snippet></ROW><ROW><id>17100984</id><snippet>zip</snippet></ROW><ROW><id>17100984</id><snippet>from itertools import izip
for (i, j), (k, v) in izip(d.iteritems(), c.iteritems()):
   print i, j, k, v
</snippet></ROW><ROW><id>17100984</id><snippet>zip</snippet></ROW><ROW><id>17100984</id><snippet>izip</snippet></ROW><ROW><id>17100984</id><snippet>dict.items</snippet></ROW><ROW><id>17100984</id><snippet>dict.iteritems</snippet></ROW><ROW><id>17101198</id><snippet>subprocess</snippet></ROW><ROW><id>17101198</id><snippet>subprocess</snippet></ROW><ROW><id>17101198</id><snippet>os.spawn*()</snippet></ROW><ROW><id>17101198</id><snippet>os.system()</snippet></ROW><ROW><id>17101198</id><snippet>import subprocess
subprocess.Popen(["ds9"])
</snippet></ROW><ROW><id>17101364</id><snippet>class AlarmBox</snippet></ROW><ROW><id>17101364</id><snippet>c = AlarmBox()
c.print1()
</snippet></ROW><ROW><id>17101364</id><snippet>XXXXXX</snippet></ROW><ROW><id>17101711</id><snippet>pkgutil.simplegeneric()</snippet></ROW><ROW><id>17101711</id><snippet>get_items()</snippet></ROW><ROW><id>17101711</id><snippet>import json
import sys
from pkgutil import simplegeneric

@simplegeneric
def get_items(obj):
    while False: # no items, a scalar object
        yield None

@get_items.register(dict)
def _(obj):
    return obj.iteritems() # json object

@get_items.register(list)
def _(obj):
    return enumerate(obj) # json array

def strip_whitespace(json_data):
    for key, value in get_items(json_data):
        if hasattr(value, 'strip'): # json string
            json_data[key] = value.strip()
        else:
            strip_whitespace(value) # recursive call


data = json.load(sys.stdin) # read json data from standard input
strip_whitespace(data)
json.dump(data, sys.stdout, indent=2)
</snippet></ROW><ROW><id>17101711</id><snippet>functools.singledispatch()</snippet></ROW><ROW><id>17101711</id><snippet>collections</snippet></ROW><ROW><id>17101711</id><snippet>MutableMapping/MutableSequence</snippet></ROW><ROW><id>17101711</id><snippet>dict/list</snippet></ROW><ROW><id>17101711</id><snippet>{
  "anotherName": [
    {
      "anArray": [
        {
          "anotherKey": "value", 
          "key": "value"
        }, 
        {
          "anotherKey": "value", 
          "key": "value"
        }
      ]
    }
  ], 
  "name": [
    {
      "someKey": "some Value"
    }, 
    {
      "someKey": "another value"
    }
  ]
}
</snippet></ROW><ROW><id>17101798</id><snippet>trace</snippet></ROW><ROW><id>17101798</id><snippet>StringVar</snippet></ROW><ROW><id>17101798</id><snippet>val = StringVar()
val.trace('w', callback)
</snippet></ROW><ROW><id>17101798</id><snippet>def callback(*args):
    if val.get() == target:
        print 'it worked!'
</snippet></ROW><ROW><id>17101798</id><snippet>'w'</snippet></ROW><ROW><id>17102017</id><snippet>real</snippet></ROW><ROW><id>17102017</id><snippet>double</snippet></ROW><ROW><id>17102017</id><snippet>.f2py_f2cmap</snippet></ROW><ROW><id>17102017</id><snippet>{'real':{'':'double'},'integer':{'':'long'},'real*8':{'':'double'}}</snippet></ROW><ROW><id>17102186</id><snippet>import ctypes
from random import randint

class STRUCT_2(ctypes.Structure):
    #_pack_=2
    _fields_ = [('field_1', ctypes.c_short),
                ('field_2', ctypes.c_short),
                ('field_3', ctypes.c_short),
                ('field_4', ctypes.c_short),
                ('field_5', ctypes.c_short),
                ('field_6', ctypes.c_short),
                ('field_7', ctypes.c_short),
                ('field_8', ctypes.c_short)]

class STRUCT_1(ctypes.Structure):
    #_pack_=2
    _fields_ = [('elements', ctypes.c_short),
                #an array of pointers
                ('STRUCT_ARRAY', ctypes.POINTER(ctypes.POINTER(STRUCT_2)))]

    def __init__(self,num_of_structs):
        elems = (ctypes.POINTER(STRUCT_2) * num_of_structs)()
        self.STRUCT_ARRAY = ctypes.cast(elems,ctypes.POINTER(ctypes.POINTER(STRUCT_2)))
        self.elements = num_of_structs

        for num in range(0,num_of_structs):
            self.STRUCT_ARRAY[num].field_1 = 1
            self.STRUCT_ARRAY[num].field_2 = 2
            self.STRUCT_ARRAY[num].field_3 = 3

for num in range(0,100):
    test = STRUCT_1(num)
    print("%i done" % num)
</snippet></ROW><ROW><id>17102186</id><snippet>import ctypes
from random import randint

class STRUCT_2(ctypes.Structure):
    #_pack_=2
    _fields_ = [('field_1', ctypes.c_short),
                ('field_2', ctypes.c_short),
                ('field_3', ctypes.c_short),
                ('field_4', ctypes.c_short),
                ('field_5', ctypes.c_short),
                ('field_6', ctypes.c_short),
                ('field_7', ctypes.c_short),
                ('field_8', ctypes.c_short)]

class STRUCT_1(ctypes.Structure):
    #_pack_=2
    _fields_ = [('elements', ctypes.c_short),
                #an array of structs
                ('STRUCT_ARRAY', ctypes.POINTER(STRUCT_2))]

    def __init__(self,num_of_structs):
        elems = (STRUCT_2 * num_of_structs)()
        self.STRUCT_ARRAY = ctypes.cast(elems,ctypes.POINTER(STRUCT_2))
        self.elements = num_of_structs

        for num in range(0,num_of_structs):
            self.STRUCT_ARRAY[num].field_1 = 1
            self.STRUCT_ARRAY[num].field_2 = 2
            self.STRUCT_ARRAY[num].field_3 = 3
            self.STRUCT_ARRAY[num].field_4 = 4

for num in range(0,100):
    test = STRUCT_1(num)
    print("%i done" % num)
</snippet></ROW><ROW><id>17102218</id><snippet>mapping = {
    'hi':       'dog',
    'friend':   'crazy',
}

# Add to mapping dog-&gt;hi and friend-&gt;crazy automatically.
mapping.update({v:k for k, v in mapping.items()})

# Convert using mapping.
print(' '.join([mapping.get(w, w) for w in raw_input().split()]))
</snippet></ROW><ROW><id>17102218</id><snippet>% python sol.py 
hello crazy friend
hello friend crazy

% python sol.py
crazy dog
friend hi
</snippet></ROW><ROW><id>17102426</id><snippet>.</snippet></ROW><ROW><id>17102426</id><snippet>self.b = b
</snippet></ROW><ROW><id>17102426</id><snippet>obj = Clazz([0], [[1], [2]], [0])  #   self, b = [[1], [2]]
</snippet></ROW><ROW><id>17102426</id><snippet>[1]</snippet></ROW><ROW><id>17102426</id><snippet>[2]</snippet></ROW><ROW><id>17102426</id><snippet>self.c</snippet></ROW><ROW><id>17102426</id><snippet>AttributeError: 'list' object has no attribute 'c' 
</snippet></ROW><ROW><id>17102426</id><snippet>obj = Clazz([0], [1], [0])</snippet></ROW><ROW><id>17102426</id><snippet>self, b</snippet></ROW><ROW><id>17102426</id><snippet>[1]</snippet></ROW><ROW><id>17102426</id><snippet>ValueError: need more than 1 value to unpack
</snippet></ROW><ROW><id>17102895</id><snippet>import struct
print struct.unpack('i', struct.pack('I', 0xA867Df55))[0]
</snippet></ROW><ROW><id>17102895</id><snippet>-1469587627
</snippet></ROW><ROW><id>17102895</id><snippet>import ctypes
print ctypes.c_int(0xA867DF55 ^ 0).value
</snippet></ROW><ROW><id>17102895</id><snippet>-1469587627
</snippet></ROW><ROW><id>17103091</id><snippet>import matplotlib
matplotlib.use('pdf')
</snippet></ROW><ROW><id>17103091</id><snippet>pylab</snippet></ROW><ROW><id>17103141</id><snippet>d[key] = [(x, y[0]) for x,y in d[key]]
</snippet></ROW><ROW><id>17103141</id><snippet>new_val = []
for x, y in d[key]:
   #In each iteraion x is assigned to VALs and `y` is assigned to (Flag1, Flag2)
   #now append a new value, a tuple containg x and y[0](first item from that tuple) 
   new_val.append((x, y[0]))
d[key] = new_val  #reassign the new list to d[key]
</snippet></ROW><ROW><id>17103141</id><snippet>dic = { k: [(x, y[0]) for x,y in v]  for k,v in dic.items()}
</snippet></ROW><ROW><id>17103141</id><snippet>dic.iteritems</snippet></ROW><ROW><id>17103141</id><snippet>dic.items()</snippet></ROW><ROW><id>17103374</id><snippet>application: practice
version: 1
runtime: python27
api_version: 1
threadsafe: true

libraries:
- name: webapp2
  version: latest
- name: jinja2
  version: latest

handlers:
- url: /.*
  script: practice.application
</snippet></ROW><ROW><id>17103374</id><snippet>import jinja2
import os
import webapp2

loader = jinja2.FileSystemLoader(os.path.dirname(__file__))
env = jinja2.Environment(loader=loader)

class MainPage(webapp2.RequestHandler):
    def get(self):
        template = env.get_template('index.html')
        self.response.write(template.render())

application = webapp2.WSGIApplication([
 ('/', MainPage),
 ], debug=True)
</snippet></ROW><ROW><id>17103472</id><snippet>attrs</snippet></ROW><ROW><id>17103472</id><snippet>from django.forms import TextInput


class CategoriesForm(ModelForm):
    class Meta:
        model = Categories
        widgets = {
            'category_name': TextInput(attrs={'placeholder': 'PLACEHOLDER TEXT HERE'})
        }
</snippet></ROW><ROW><id>17103743</id><snippet>from app.forms import my_form1, my_form2, my_form3 
</snippet></ROW><ROW><id>17103743</id><snippet>render(request,
              'my_page.html',
              {'my_form': my_form1})
</snippet></ROW><ROW><id>17103769</id><snippet>b</snippet></ROW><ROW><id>17103769</id><snippet>s</snippet></ROW><ROW><id>17103769</id><snippet>a</snippet></ROW><ROW><id>17103769</id><snippet>a</snippet></ROW><ROW><id>17103769</id><snippet>s</snippet></ROW><ROW><id>17103769</id><snippet>tot_items_b = sum(1 for x in b for y in x) #total items in b
</snippet></ROW><ROW><id>17103769</id><snippet>O(1)</snippet></ROW><ROW><id>17103769</id><snippet>O(max(len(a), tot_items_b))</snippet></ROW><ROW><id>17103769</id><snippet>def func(a, b):
   #sets can't contain mutable items, so convert lists to tuple while storing

   s = set(tuple(y) for x in b for y in x)
   #s is set([(41, 2, 34), (98, 23, 56), (42, 25, 64),...])

   return any(tuple(item) in s for item in a)
</snippet></ROW><ROW><id>17103769</id><snippet>&gt;&gt;&gt; a = [[1, 2, 3], [4, 5, 6], [4, 2, 3]]
&gt;&gt;&gt; b = [[[11, 22, 3], [12, 34, 6], [41, 2, 34], [198, 213, 536], [1198, 1123, 1156]], [[11, 22, 3], [42, 25, 64], [43, 45, 23]], [[3, 532, 23], [4, 5, 6], [98, 23, 56], [918, 231, 526]]]
&gt;&gt;&gt; func(a,b)
True
</snippet></ROW><ROW><id>17103769</id><snippet>any</snippet></ROW><ROW><id>17103769</id><snippet>&gt;&gt;&gt; print any.__doc__
any(iterable) -&gt; bool

Return True if bool(x) is True for any x in the iterable.
If the iterable is empty, return False.
</snippet></ROW><ROW><id>17103769</id><snippet>&gt;&gt;&gt; s_b = set(tuple(y) for x in b for y in x)
&gt;&gt;&gt; s_a = set(tuple(x) for x in a)
&gt;&gt;&gt; s_a &amp; s_b
set([(4, 5, 6)])
</snippet></ROW><ROW><id>17103820</id><snippet>def myfunc(group):

    # only modify cost if there are nan's
    if len(group) != group.cost.count():

        # set all cost values to the mean
        group['cost'] = group.cost.sum() / len(group)

        # multiply by 1.5 if the duration equals 1
        group['cost'][group.duration == 1] = group['cost'] * 1.5

    return group


df.groupby('channel').apply(myfunc)

   duration  cost channel
0         2    60     TV1
1         1   120     TV2
2         2   100     TV3
3         1    90     TV1
4         2    80     TV2
5         2   100     TV3
6         2    60     TV1
7         1   120     TV2
8         1   150     TV3
</snippet></ROW><ROW><id>17103954</id><snippet>page_source</snippet></ROW><ROW><id>17104112</id><snippet>(gui.py:9127): Gtk-CRITICAL **: gtk_widget_grab_default: assertion 'gtk_widget_get_can_default (widget)' failed</snippet></ROW><ROW><id>17104112</id><snippet>can default</snippet></ROW><ROW><id>17104112</id><snippet>Common Properties</snippet></ROW><ROW><id>17104112</id><snippet>Yes</snippet></ROW><ROW><id>17104112</id><snippet>(gui.py:9127): Gtk-CRITICAL **: _gtk_file_chooser_embed_initial_focus: assertion 'GTK_IS_FILE_CHOOSER_EMBED (chooser_embed)' failed</snippet></ROW><ROW><id>17104112</id><snippet>filechooser.destroy()</snippet></ROW><ROW><id>17104112</id><snippet>filechooser.hide()</snippet></ROW><ROW><id>17104189</id><snippet>str</snippet></ROW><ROW><id>17104189</id><snippet>for (i = 0; i &lt; 3; ++i) ...</snippet></ROW><ROW><id>17104685</id><snippet>self.table.setEditTriggers(QtGui.QAbstractItemView.NoEditTriggers)
</snippet></ROW><ROW><id>17104945</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; a = collections.OrderedDict()
&gt;&gt;&gt; a['w'] = {}
&gt;&gt;&gt; a['a'] = {}
&gt;&gt;&gt; a['s'] = {}
&gt;&gt;&gt; a
OrderedDict([('w', {}), ('a', {}), ('s', {})])
&gt;&gt;&gt; dict(a)
{'a': {}, 's': {}, 'w': {}}
</snippet></ROW><ROW><id>17105018</id><snippet>Desktop.ini</snippet></ROW><ROW><id>17105018</id><snippet>def get_all_files_from(my_path):
    """return all filename in a folder, without their path"""
    file_list_without_path = [ f for f in listdir(my_path) if isfile(join(my_path,f)) and 'Desktop.ini' not in f ]
    return file_list_without_path
</snippet></ROW><ROW><id>17105018</id><snippet>Desktop.ini</snippet></ROW><ROW><id>17105092</id><snippet>re.findall</snippet></ROW><ROW><id>17105092</id><snippet>&gt;&gt;&gt; re.findall(r"\d+", content)
['28', '1']
</snippet></ROW><ROW><id>17105092</id><snippet>r"&lt;span.*?&gt;.*?(\d+).*?&lt;/span&gt;"</snippet></ROW><ROW><id>17105119</id><snippet>s = 'Fuzzy wuzzy was a bear'
L = s.split()
# L == ['Fuzzy', 'wuzzy', 'was', 'a', 'bear']
</snippet></ROW><ROW><id>17105119</id><snippet>[-1]</snippet></ROW><ROW><id>17105119</id><snippet>m = L[-1]
# m == 'bear'
</snippet></ROW><ROW><id>17105119</id><snippet>[:2]</snippet></ROW><ROW><id>17105119</id><snippet>u = m[:2]
# u == 'be'
</snippet></ROW><ROW><id>17105259</id><snippet>import gtk 
import gobject
import pango
import os
from subprocess import Popen, PIPE
import fcntl

wnd = gtk.Window()
wnd.set_default_size(400, 400)
wnd.connect("destroy", gtk.main_quit)
textview = gtk.TextView()
fontdesc = pango.FontDescription("monospace")
textview.modify_font(fontdesc)
scroll = gtk.ScrolledWindow()
scroll.add(textview)
exp = gtk.Expander("Details")
exp.add(scroll)
wnd.add(exp)
wnd.show_all()
sub_proc = Popen("ping -c 10 localhost", stdout=PIPE, shell=True)
sub_outp = ""


def non_block_read(output):
    fd = output.fileno()
    fl = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)
    try:
        return output.read()
    except:
        return ''


def update_terminal():
    textview.get_buffer().insert_at_cursor(non_block_read(sub_proc.stdout))
    return sub_proc.poll() is None

gobject.timeout_add(100, update_terminal)
gtk.main()
</snippet></ROW><ROW><id>17105259</id><snippet>import gtk 
import gobject
import os
from subprocess import Popen, PIPE
import fcntl

wnd = gtk.Window()
wnd.set_default_size(400, 400)
wnd.connect("destroy", gtk.main_quit)
label = gtk.Label()
label.set_alignment(0, 0)
wnd.add(label)
wnd.show_all()
sub_proc = Popen("ping -c 10 localhost", stdout=PIPE, shell=True)
sub_outp = ""


def non_block_read(output):
    ''' even in a thread, a normal read with block until the buffer is full '''
    fd = output.fileno()
    fl = fcntl.fcntl(fd, fcntl.F_GETFL)
    fcntl.fcntl(fd, fcntl.F_SETFL, fl | os.O_NONBLOCK)
    try:
        return output.read()
    except:
        return ''


def update_terminal():
    label.set_text(label.get_text() + non_block_read(sub_proc.stdout))
    return sub_proc.poll() is None

gobject.timeout_add(100, update_terminal)
gtk.main()
</snippet></ROW><ROW><id>17105263</id><snippet>def get_ref(ref_attr):
    item = f
    for attr in ref_attr.split('.'):
        item = getattr(item, attr)
        print item
</snippet></ROW><ROW><id>17105327</id><snippet>from StringIO import StringIO
from lxml import etree

xml = """&lt;root&gt;
&lt;note&gt;
&lt;id&gt;51&lt;/id&gt;
&lt;Name&gt;Jani&lt;/Name&gt;
&lt;city&gt;Frankfurt&lt;/city&gt;
&lt;IQ&gt;Intelligent&lt;/IQ&gt;
&lt;/note&gt;

&lt;note&gt;
&lt;id&gt;71&lt;/id&gt;
&lt;Name&gt;Peter&lt;/Name&gt;
&lt;city&gt;Paris&lt;/city&gt;
&lt;IQ&gt;Average&lt;/IQ&gt;
&lt;/note&gt;

&lt;note&gt;
&lt;id&gt;81&lt;/id&gt;
&lt;Name&gt;Asho&lt;/Name&gt;
&lt;city&gt;Paris&lt;/city&gt;
&lt;IQ&gt;Intelligent&lt;/IQ&gt;
&lt;/note&gt;

&lt;/root&gt;"""

tree = etree.parse(StringIO.StringIO(xml))
for note in tree.xpath("//note[IQ='Intelligent']"):
    print note.getchildren()[1].tag + "=" + note.getchildren()[1].text
</snippet></ROW><ROW><id>17105327</id><snippet>Name=Jani
Name=Asho
</snippet></ROW><ROW><id>17105580</id><snippet>import csv

fi = open("filein.txt", "rb")
reader = csv.reader(fi,delimiter=' ')

dict = {}
for row in reader:
    if row[0] in dict:
        if float(dict[row[0]][-1]) &lt; float(row[-1]):
            dict[row[0]] = row[1:]
    else:
        dict[row[0]] = row[1:]
print dict
</snippet></ROW><ROW><id>17105580</id><snippet>{'name2': ['12', '18', '0.5331', '0.0876', '0.6206'], 'name3': ['17', '29', '0.5441', '0.0657', '0.6098'], 'name1': ['14022', '0', '0.5557', '0.0990', '0.6547']}
</snippet></ROW><ROW><id>17105653</id><snippet>def load_sections(filename):
    with open(filename, 'r') as infile:
        line = ''
        while True:
            while not line.startswith('****'): 
                line = next(infile)  # raises StopIteration, ending the generator
                continue  # find next entry

            entry = {}
            for line in infile:
                line = line.strip()
                if not line: break

                key, value = map(str.strip, line.split(':', 1))
                entry[key] = value

            yield entry
</snippet></ROW><ROW><id>17105653</id><snippet>while</snippet></ROW><ROW><id>17105653</id><snippet>for</snippet></ROW><ROW><id>17105653</id><snippet>****</snippet></ROW><ROW><id>17105653</id><snippet>for section in load_sections(filename):
    print section
</snippet></ROW><ROW><id>17105653</id><snippet>&gt;&gt;&gt; for section in load_sections('/tmp/test.txt'):
...     print section
... 
{'Data4': '715', 'Data1': '0.1834869385E-002', 'ID': '01', 'Data3': '-0.1091356549E+001', 'Data2': '10.9598489301'}
{'Data4': '715', 'Data1': '0.1834869385E-002', 'ID': '01', 'Data3': '-0.1091356549E+001', 'Data2': '10.9598489301'}
{'Data4': '715', 'Data1': '0.1834869385E-002', 'ID': '01', 'Data3': '-0.1091356549E+001', 'Data2': '10.9598489301'}
</snippet></ROW><ROW><id>17105653</id><snippet>converters = {'ID': int, 'Data1': float, 'Data2': float, 'Data3': float, 'Data4': int}
</snippet></ROW><ROW><id>17105653</id><snippet>entry[key] = value</snippet></ROW><ROW><id>17105653</id><snippet>entry[key] = converters.get(key, lambda v: v)(value)</snippet></ROW><ROW><id>17105734</id><snippet>A</snippet></ROW><ROW><id>17105734</id><snippet>B</snippet></ROW><ROW><id>17105734</id><snippet>issubclass</snippet></ROW><ROW><id>17105734</id><snippet>issubclass(A, B)
</snippet></ROW><ROW><id>17105734</id><snippet>Myclass == MyClass</snippet></ROW><ROW><id>17105734</id><snippet>MyClass is MyClass</snippet></ROW><ROW><id>17106018</id><snippet>commands</snippet></ROW><ROW><id>17106018</id><snippet>commands</snippet></ROW><ROW><id>17106018</id><snippet>subprocess</snippet></ROW><ROW><id>17106018</id><snippet>subprocess</snippet></ROW><ROW><id>17106018</id><snippet>import subprocess

print(subprocess.check_output(['ls', '-l']))
</snippet></ROW><ROW><id>17106700</id><snippet>class ZipArchive(zipfile.ZipFile):
    def __init__(self, *args, **kwargs):
        """
        Constructor with some extra params:

        * verbose: be verbose about what we do. Defaults to True.

        For other params see: zipfile.ZipFile
        """
        self.verbose = kwargs.pop('verbose', True)

        # zipfile.ZipFile is an old-style class, cannot use super() here:
        zipfile.ZipFile.__init__(self, *args, **kwargs)
</snippet></ROW><ROW><id>17106700</id><snippet>*args</snippet></ROW><ROW><id>17106700</id><snippet>**kwargs</snippet></ROW><ROW><id>17106700</id><snippet>kwargs</snippet></ROW><ROW><id>17106700</id><snippet>dict.pop()</snippet></ROW><ROW><id>17106700</id><snippet>verbose</snippet></ROW><ROW><id>17106700</id><snippet>kwargs.get('verbose', True)</snippet></ROW><ROW><id>17106720</id><snippet>W, V, A</snippet></ROW><ROW><id>17106720</id><snippet>if</snippet></ROW><ROW><id>17106720</id><snippet>True</snippet></ROW><ROW><id>17106720</id><snippet>def USBprocess(line):
    W, V, A = '0', '0', '0'
    if line.startswith('#d'):
        # etc.
</snippet></ROW><ROW><id>17106842</id><snippet>dict[keyword]</snippet></ROW><ROW><id>17106842</id><snippet>O(N)</snippet></ROW><ROW><id>17106842</id><snippet>&gt;&gt;&gt; my_dict = {'name': 'Klauss', 'age': 26, 'Date of birth': '15th july'}
&gt;&gt;&gt; next(v for k,v in my_dict.items() if 'Date' in k)
'15th july'
</snippet></ROW><ROW><id>17106842</id><snippet>&gt;&gt;&gt; [ v for k,v in my_dict.items() if 'Date' in k]
['15th july']
</snippet></ROW><ROW><id>17106842</id><snippet>str.startswith</snippet></ROW><ROW><id>17106842</id><snippet>&gt;&gt;&gt; next( v for k,v in my_dict.items() if k.startswith('Date'))
'15th july'
&gt;&gt;&gt; [ v for k,v in my_dict.items() if k.startswith('Date')]
['15th july']
</snippet></ROW><ROW><id>17107099</id><snippet>    for x in range(self.length):                                  
        self.random_sequence.append((x ** 2) % m) 
</snippet></ROW><ROW><id>17107099</id><snippet>[(x ** 2) % m for x in range(self.length)]</snippet></ROW><ROW><id>17107457</id><snippet>json</snippet></ROW><ROW><id>17107457</id><snippet>json.load()</snippet></ROW><ROW><id>17107457</id><snippet>json.loads()</snippet></ROW><ROW><id>17107457</id><snippet>json</snippet></ROW><ROW><id>17107568</id><snippet>plt.gcf().clear()</snippet></ROW><ROW><id>17107568</id><snippet>plt.show()</snippet></ROW><ROW><id>17107615</id><snippet>or</snippet></ROW><ROW><id>17107615</id><snippet>if need == "pythagoras" or need == 'Pythagoras'</snippet></ROW><ROW><id>17107615</id><snippet>eval()</snippet></ROW><ROW><id>17107615</id><snippet>str(k1) + str(k2)
</snippet></ROW><ROW><id>17107615</id><snippet>raw_input()</snippet></ROW><ROW><id>17107615</id><snippet>int()</snippet></ROW><ROW><id>17107615</id><snippet>k1 = int(raw_input("Known Side 1"))
k2 = int(raw_input("Known Side 2"))
</snippet></ROW><ROW><id>17107615</id><snippet>if need.lower() == 'pythagoras'</snippet></ROW><ROW><id>17107615</id><snippet>if pythagoras.lower() == 'hypotenuse'</snippet></ROW><ROW><id>17108152</id><snippet>def refresh(self):
    if (self.nbfig &gt; 0): #meaning the c++ app already plotted a figure
        plt.ioff()
        plt.close()
</snippet></ROW><ROW><id>17108173</id><snippet>pep8</snippet></ROW><ROW><id>17108173</id><snippet>E124 closing bracket does not match visual indentation</snippet></ROW><ROW><id>17108173</id><snippet>urlpatterns = patterns(
    '',
    (r'', include(v1_api.urls)),
    url(
        r"^ajax/photos/upload/(?P&lt;slug&gt;[-_\w]+)/$",
        "medicms.views.upload_photos",
        name="upload_photos"
    ),
    url(
        r"^ajax/photos/recent/$",
        "medicms.views.recent_photos",
        name="recent_photos"
    ),
)
</snippet></ROW><ROW><id>17108173</id><snippet>pep8</snippet></ROW><ROW><id>17108383</id><snippet>from functools import wraps

def makeObserver(system, originalObserver):
    @wraps(originalObserver)
    def observe(event):
        if event.get("system", None) == system:
            originalObserver(event)
</snippet></ROW><ROW><id>17108383</id><snippet>from twisted.python.log import FileLogObserver, addObserver

fileObs = FileLogObserver(file("myownflag.log", "at"))
addObserver(makeObserver("myownflag", fileObs.emit)
</snippet></ROW><ROW><id>17108463</id><snippet>import pyqtgraph as pg
import numpy as np
app = pg.mkQApp()
data = np.random.normal(size=(120,20000), scale=0.2) + \
       np.arange(120)[:,np.newaxis]
view = pg.GraphicsLayoutWidget()
view.show()
w1 = view.addPlot()
now = pg.ptime.time()
for n in data:
    w1.plot(n)
print "Plot time: %0.2f sec" % (pg.ptime.time()-now)
app.exec_()
</snippet></ROW><ROW><id>17108463</id><snippet>Plot time: 6.10 sec
</snippet></ROW><ROW><id>17108463</id><snippet>$ python -m cProfile -s cumulative speed_test.py
. . .
     ncalls  tottime  percall  cumtime  percall filename:lineno(function)
          1    0.001    0.001   11.705   11.705 speed_test.py:1(&lt;module&gt;)
        120    0.002    0.000    8.973    0.075 PlotItem.py:614(plot)
        120    0.011    0.000    8.521    0.071 PlotItem.py:500(addItem) 
    363/362    0.030    0.000    7.982    0.022 ViewBox.py:559(updateAutoRange)
. . .
</snippet></ROW><ROW><id>17108463</id><snippet>import pyqtgraph as pg
import numpy as np
app = pg.mkQApp()
data = np.random.normal(size=(120,20000), scale=0.2) + \
       np.arange(120)[:,np.newaxis]
view = pg.GraphicsLayoutWidget()
view.show()
w1 = view.addPlot()
w1.disableAutoRange()
now = pg.ptime.time()
for n in data:
    w1.plot(n)
w1.autoRange() # only after plots are added
print "Plot time: %0.2f sec" % (pg.ptime.time()-now)
app.exec_()
</snippet></ROW><ROW><id>17108463</id><snippet>Plot time: 0.68 sec
</snippet></ROW><ROW><id>17108463</id><snippet>   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
        1    0.034    0.034   16.627   16.627 speed_test.py:1(&lt;module&gt;)
        1    1.575    1.575   11.627   11.627 {built-in method exec_}
       20    0.000    0.000    7.426    0.371 GraphicsView.py:147(paintEvent)
       20    0.124    0.006    7.425    0.371 {paintEvent}
     2145    0.076    0.000    6.996    0.003 PlotCurveItem.py:369(paint)
</snippet></ROW><ROW><id>17108463</id><snippet>import pyqtgraph as pg
import numpy as np
app = pg.mkQApp()

y = np.random.normal(size=(120,20000), scale=0.2) + np.arange(120)[:,np.newaxis]
x = np.empty((120,20000))
x[:] = np.arange(20000)[np.newaxis,:]
view = pg.GraphicsLayoutWidget()
view.show()
w1 = view.addPlot()

class MultiLine(pg.QtGui.QGraphicsPathItem):
    def __init__(self, x, y):
        """x and y are 2D arrays of shape (Nplots, Nsamples)"""
        connect = np.ones(x.shape, dtype=bool)
        connect[:,-1] = 0 # don't draw the segment between each trace
        self.path = pg.arrayToQPath(x.flatten(), y.flatten(), connect.flatten())
        pg.QtGui.QGraphicsPathItem.__init__(self, self.path)
        self.setPen(pg.mkPen('w'))
    def shape(self): # override because QGraphicsPathItem.shape is too expensive.
        return pg.QtGui.QGraphicsItem.shape(self)
    def boundingRect(self):
        return self.path.boundingRect()

now = pg.ptime.time()
lines = MultiLine(x, y)
w1.addItem(lines)
print "Plot time: %0.2f sec" % (pg.ptime.time()-now)

app.exec_()
</snippet></ROW><ROW><id>17108914</id><snippet>def multiply_cost(value):
    return value*100

register.filter('multiply_cost', multiply_cost)
</snippet></ROW><ROW><id>17108914</id><snippet>({{ "Micro"|unit_cost:100|multiply_cost }}p per message)
</snippet></ROW><ROW><id>17108974</id><snippet>&gt;&gt;&gt; "asdf".isalpha()
True
&gt;&gt;&gt; "as df".isalpha()
False
&gt;&gt;&gt; "as. df:".isalpha()
False
</snippet></ROW><ROW><id>17108974</id><snippet>.isalpha()</snippet></ROW><ROW><id>17108974</id><snippet>my_str.isupper()</snippet></ROW><ROW><id>17109026</id><snippet>password</snippet></ROW><ROW><id>17109026</id><snippet>import re
# Check if contains at least one digit
if re.search(r'\d', password):
    print "Has a digit"
# Check if contains at least one uppercase letter
if re.search(r'[A-Z]', password):
    print "Has uppercase letter"
# Check if contains at least one lowercase letter
if re.search(r'[a-z]', password):
    print "Has lowercase letter"
</snippet></ROW><ROW><id>17109026</id><snippet>.isupper()</snippet></ROW><ROW><id>17109026</id><snippet>.islower()</snippet></ROW><ROW><id>17109026</id><snippet>if p.isupper and p.islower:
    print "Your Password is of medium strength, try adding some numbers"
</snippet></ROW><ROW><id>17109026</id><snippet>if p.isupper() and p.islower():</snippet></ROW><ROW><id>17109026</id><snippet>False</snippet></ROW><ROW><id>17109026</id><snippet>if re.search(r'[a-z]', password) and re.search(r'[A-Z]', password):
</snippet></ROW><ROW><id>17109026</id><snippet>re</snippet></ROW><ROW><id>17109026</id><snippet>import string
if any(letter in string.ascii_lowercase for letter in password) and \
  any(letter in string.ascii_uppercase for letter in password):
</snippet></ROW><ROW><id>17109026</id><snippet>if any(letter.islower() for letter in password) and \
  any(letter.isupper() for letter in password):
</snippet></ROW><ROW><id>17109026</id><snippet>re</snippet></ROW><ROW><id>17109187</id><snippet>read_csv</snippet></ROW><ROW><id>17109187</id><snippet>collections.deque</snippet></ROW><ROW><id>17109187</id><snippet>from collections import deque
from StringIO import StringIO

with open(fname, 'r') as f:
    q = deque(f, 2)  # replace 2 with n (lines read at the end)

In [12]: q
Out[12]: deque(['7,8,9\n', '10,11,12'], maxlen=2)
         # these are the last two lines of my csv

In [13]: pd.read_csv(StringIO(''.join(q)), header=None)
</snippet></ROW><ROW><id>17109187</id><snippet>read_csv</snippet></ROW><ROW><id>17109192</id><snippet>f</snippet></ROW><ROW><id>17109192</id><snippet>f2</snippet></ROW><ROW><id>17109192</id><snippet>f</snippet></ROW><ROW><id>17109192</id><snippet>f2</snippet></ROW><ROW><id>17109192</id><snippet>vec</snippet></ROW><ROW><id>17109192</id><snippet>aux</snippet></ROW><ROW><id>17109192</id><snippet>i</snippet></ROW><ROW><id>17109192</id><snippet>def f(double[:] vec):
    n = len(vec)
    cdef double aux = 0
    cdef int i
    for i in range(n):
        aux = aux + (1- aux)*vec[i]
    return aux
</snippet></ROW><ROW><id>17109192</id><snippet>%load_ext cythonmagic</snippet></ROW><ROW><id>17109192</id><snippet>%%cython</snippet></ROW><ROW><id>17109192</id><snippet>%timeit</snippet></ROW><ROW><id>17109192</id><snippet>import numpypy</snippet></ROW><ROW><id>17109192</id><snippet>import numpy</snippet></ROW><ROW><id>17109326</id><snippet>import numpy as np
import matplotlib.pyplot as plt
data = np.genfromtxt('peak.txt', dtype = float)

fig = plt.figure(figsize=(6,8))
ax = fig.add_subplot(111)

for i in range(1, data.shape[1]):
    y = data[..., i] + 0.1*i 
    ax.plot(data[..., 0], y)

plt.show()
</snippet></ROW><ROW><id>17109326</id><snippet>data[..., 0]</snippet></ROW><ROW><id>17109326</id><snippet>np.array(a)</snippet></ROW><ROW><id>17109326</id><snippet>data[..., 1]</snippet></ROW><ROW><id>17109326</id><snippet>np.array(b)</snippet></ROW><ROW><id>17109326</id><snippet>a</snippet></ROW><ROW><id>17109326</id><snippet>b</snippet></ROW><ROW><id>17109483</id><snippet>dropna</snippet></ROW><ROW><id>17109483</id><snippet>missing='drop'</snippet></ROW><ROW><id>17109483</id><snippet>np.linalg.matrix_rank(data[train_cols].values)</snippet></ROW><ROW><id>17109706</id><snippet>import numpy.distutils.system_info as sysinfo
sysinfo.show_all()
</snippet></ROW><ROW><id>17109830</id><snippet>plt.figure(figsize=(3,4))
</snippet></ROW><ROW><id>17110575</id><snippet>sorted(table_data, key=lambda x: int(x[0][4:]))
</snippet></ROW><ROW><id>17110859</id><snippet>&gt;&gt;&gt; class FromJSON():
...     def __init__(self, string):
...         self.string = string
...     def decode(self):
...         return json.loads(self.string)
...    
&gt;&gt;&gt; dict_parser.add_argument('--dict',type=FromJSON)
&gt;&gt;&gt; arg2 = dict_parser.parse_args(['--dict', '{"name":"man", "address": "kac", "tags":"don"}'])
</snippet></ROW><ROW><id>17110859</id><snippet>&gt;&gt;&gt; parser.add_argument('--dict', nargs='*', type=str, default = [])
&gt;&gt;&gt; args = parser.parse_args(['--dict', 'name:man', 'address:kac', 'tags:don'])
&gt;&gt;&gt; args.dict = dict([arg.split(':') for arg in args.dict])
&gt;&gt;&gt; print args.dict
{'tags': 'don', 'name': 'man', 'address': 'kac'}
</snippet></ROW><ROW><id>17110859</id><snippet>python my.py --ls tomato jug andes  --dict {'name':'man', 'address': 'kac', 'tags':'don'}
</snippet></ROW><ROW><id>17110859</id><snippet>&gt;&gt;&gt; parser = argparse.ArgumentParser()
&gt;&gt;&gt; parser.add_argument('--dict', type=FromJSON, default=FromJSON("{}"))
&gt;&gt;&gt; parser.add_argument('--ls', nargs='*', type=str, default = [])
&gt;&gt;&gt; args = parser.parse_args(['--ls', 'tomato', 'jug', 'andes', '--dict', '{"name":"man", "address": "kac", "tags":"don"}'])
&gt;&gt;&gt; args.ls
['tomato', 'jug', 'andes']
&gt;&gt;&gt; args.dict
&lt;__main__.FromJSON instance at 0x7f932dd20c20&gt;
&gt;&gt;&gt; args.dict.decode()
{u'tags': u'don', u'name': u'man', u'address': u'kac'}
</snippet></ROW><ROW><id>17110859</id><snippet>FromJSON()</snippet></ROW><ROW><id>17110859</id><snippet>class JsonToDict():
    def __call__(self, string):
        return json.loads(string)
</snippet></ROW><ROW><id>17110859</id><snippet>dict_parser.add_argument('--dict',type=JsonToDict())
</snippet></ROW><ROW><id>17110927</id><snippet>print "Internet\t{}\t{:&gt;18s}\t{:&gt;7s}\t{:&gt;8s}".format(ip, mac,'ARPA' ,interface)
</snippet></ROW><ROW><id>17110972</id><snippet>In [64]: df[df.groupby(level=0).bar.transform(lambda x: len(x) &gt;= 2).astype('bool')]
Out[64]: 
              bar       foo
two   A  0.944908  0.701687
      B -0.204075  0.713141
      C  0.730844 -0.022302
three A  1.263489 -1.382653
      B  0.124444  0.907667
      C -2.407691 -0.773040
</snippet></ROW><ROW><id>17110972</id><snippet>filter</snippet></ROW><ROW><id>17110972</id><snippet>In [65]: df.groupby(level=0).filter(lambda x: len(x['bar']) &gt;= 2)
Out[65]: 
              bar       foo
three A  1.263489 -1.382653
      B  0.124444  0.907667
      C -2.407691 -0.773040
two   A  0.944908  0.701687
      B -0.204075  0.713141
      C  0.730844 -0.022302
</snippet></ROW><ROW><id>17110979</id><snippet>POST</snippet></ROW><ROW><id>17110979</id><snippet>post_dict = request.POST.copy()
</snippet></ROW><ROW><id>17110979</id><snippet>request.POST</snippet></ROW><ROW><id>17110979</id><snippet>post_dict.update('loginfailed', False)
</snippet></ROW><ROW><id>17110979</id><snippet>post_dict</snippet></ROW><ROW><id>17110979</id><snippet>{% if post_dict.login_failed %}
</snippet></ROW><ROW><id>17110979</id><snippet>{'login_failed': False}</snippet></ROW><ROW><id>17110979</id><snippet>{% if login_failed %}
  {# do this #}
{% else %}
  {# do that #}
{% endif %}
</snippet></ROW><ROW><id>17111034</id><snippet>data_structure = [{'Name':'John','Age':'20'},{'Name':'John','Age':'22'},{'Name':'John','Age':'23'},{'Name':'Marie','Age':'20'}]
d={}
for x in data_structure:
    d[x['Name']] = x

d.values()
&gt;&gt;&gt; [{'Age': '23', 'Name': 'John'}, {'Age': '20', 'Name': 'Marie'}]
</snippet></ROW><ROW><id>17111034</id><snippet>data_structure = [{'Name':'John','Age':'20'},{'Name':'John','Age':'22'},{'Name':'John','Age':'23'},{'Name':'Marie','Age':'20'}]

while 1:
    name = raw_input("Enter Name: ")
    if not len(name): break
    age = int(raw_input("Enter Age: "))
    flag=1
    while flag:
        for idx, d in enumerate(data_structure):
            if 'Name' in d and \
                'Age' in d and \
                int(d['Age']) != age and \
                d['Name'] == name:
                data_structure.pop(idx)
                flag=2
                break
        flag-=1
</snippet></ROW><ROW><id>17111091</id><snippet>{{old_query}}</snippet></ROW><ROW><id>17111091</id><snippet>&lt;input type="text" class="searchbox" name="s" value="{{old_query}}" /&gt;
</snippet></ROW><ROW><id>17111249</id><snippet> 10.113. 12. 40 -&gt; 00001010.01110001.00001100.00101000
255.255.255.248 -&gt; 11111111.11111111.11111111.11111000
                                                   ^^^--- 3 bits for your network
</snippet></ROW><ROW><id>17111249</id><snippet>10.113.12.40</snippet></ROW><ROW><id>17111249</id><snippet>10.113.12.47</snippet></ROW><ROW><id>17111249</id><snippet>1</snippet></ROW><ROW><id>17111249</id><snippet>0</snippet></ROW><ROW><id>17111249</id><snippet>10.113.12.40 NOR 255.255.255.248 = 10.113.12.47
               ^^^^^^^^^^^^^^^---invert the mask and OR it with the network address.
</snippet></ROW><ROW><id>17111576</id><snippet>target(args)</snippet></ROW><ROW><id>17111576</id><snippet>CallThreads</snippet></ROW><ROW><id>17111576</id><snippet>CallThreads.__init__()</snippet></ROW><ROW><id>17111576</id><snippet>thread_handler = CallThreads(someFunction, phrase, num)
</snippet></ROW><ROW><id>17111576</id><snippet>class CallThreads(threading.Thread):

    def __init__(self, *args):
        self._args   = args
        threading.Thread.__init__(self)

    def run(self):
        someFunction(*self._args)
</snippet></ROW><ROW><id>17111717</id><snippet>&gt;&gt;&gt; from xml.etree import ElementTree as ET
&gt;&gt;&gt; elem = ET.fromstring('''&lt;Atom3d ID="18" Mapping="43" Parent="2" Name="C7"
... XYZ="0.0148299997672439,0.283699989318848,1.0291999578476" Connections="33,39"
... TemperatureType="Isotropic" IsotropicTemperature="0.0677"
... AnisotropicTemperature="0,0,0,0,0,0,0,0,0" Occupancy="0.708" Components="C"/&gt;
... ''')
</snippet></ROW><ROW><id>17111717</id><snippet>&gt;&gt;&gt; elem.get('XYZ')
'0.0148299997672439,0.283699989318848,1.0291999578476'
</snippet></ROW><ROW><id>17111717</id><snippet>&gt;&gt;&gt; elem.get('XYZ').split(',')
['0.0148299997672439', '0.283699989318848', '1.0291999578476']
</snippet></ROW><ROW><id>17111897</id><snippet>__FILE__</snippet></ROW><ROW><id>17111897</id><snippet>__LINE__</snippet></ROW><ROW><id>17111897</id><snippet>#include &lt;stdexcept&gt;

class Error : public std::runtime_error
{
  public:
    Error (const std::string &amp;message)
      : std::runtime_error(message)
    {}

};

int value()
{
    std::stringstream ss;
    ss &lt;&lt; "Issues at " &lt;&lt; __FILE__ &lt;&lt; " on line " &lt;&lt; __LINE__;
    throw Error(ss.str());
}
</snippet></ROW><ROW><id>17111897</id><snippet>Error</snippet></ROW><ROW><id>17111897</id><snippet>std::runtime_error</snippet></ROW><ROW><id>17111897</id><snippet>set_terminate</snippet></ROW><ROW><id>17112464</id><snippet>elif score &lt;= 80 and score &lt; 90:
</snippet></ROW><ROW><id>17112464</id><snippet>elif 80 &lt;= score &lt; 90:
</snippet></ROW><ROW><id>17112467</id><snippet>add 6+6</snippet></ROW><ROW><id>17112467</id><snippet>6+6 add</snippet></ROW><ROW><id>17112467</id><snippet>add &lt;some_text&gt; 6+6</snippet></ROW><ROW><id>17112467</id><snippet>   string = input()
    if 'add' in string:
        string = string.split('+')
        no1 = int(string[0].split()[-1])
        no2 = int(string[1].split()[0])
        print(no1 + no2)
</snippet></ROW><ROW><id>17112537</id><snippet>for i in table_data:
     interface,mac,ip = i
     print '{:&lt;20s}{:&lt;20s}{:&lt;20s}{s}'.format(ip, mac,'ARPA' ,interface)
</snippet></ROW><ROW><id>17112723</id><snippet>re.sub</snippet></ROW><ROW><id>17112723</id><snippet>count</snippet></ROW><ROW><id>17112723</id><snippet>&gt;&gt;&gt; strs = '85033ba6c'
&gt;&gt;&gt; re.sub(r'[A-Za-z]',lambda m:m.group(0).upper(),strs,1)
'85033Ba6c'
</snippet></ROW><ROW><id>17112833</id><snippet>for i in range(11):
    box = locals().get('box' + str(i))
    if box is not None:
        boxes.append(box)
</snippet></ROW><ROW><id>17112833</id><snippet>box1</snippet></ROW><ROW><id>17112833</id><snippet>box2</snippet></ROW><ROW><id>17112833</id><snippet>box_dict['box1'] = [1, 2]</snippet></ROW><ROW><id>17113100</id><snippet>new_string = re.sub(r'\w[\w\t ]*\w|\w', "replace", original_string)
</snippet></ROW><ROW><id>17113100</id><snippet>\w</snippet></ROW><ROW><id>17113100</id><snippet>[a-zA-Z0-9_]</snippet></ROW><ROW><id>17113100</id><snippet>[\w\t ]</snippet></ROW><ROW><id>17113653</id><snippet>__dict__</snippet></ROW><ROW><id>17113653</id><snippet>PyModule_New</snippet></ROW><ROW><id>17113653</id><snippet>__dict__</snippet></ROW><ROW><id>17113653</id><snippet>exec 'import sys' in mymod.__dict__</snippet></ROW><ROW><id>17113653</id><snippet>sys</snippet></ROW><ROW><id>17113653</id><snippet>sys.modules</snippet></ROW><ROW><id>17113653</id><snippet>PyRun_SimpleString("import types,sys");

//create the new module in python 
PyRun_SimpleString("mymod = types.ModuleType(\"mymod\")");

//add it to the sys modules so that it can be imported by other modules
PyRun_SimpleString("sys.modules[\"mymod\"] = mymod");

//import sys so that path will be available in mymod so that other/newly created modules can be imported
PyRun_SimpleString("exec 'import sys' in mymod.__dict__");

//import it to the current python interpreter
pNewMod=PyImport_Import(PyString_FromString("mymod"));

//get the dict of the new module
pLocal = PyModule_GetDict(pNewMod);

//run the code that you want to be available in the newly created module.
//python_script has the code that must be injected into the new module.
//all your imports will work fine from now on. 
//Provided that you have created them before importing sys in to the new module 
PyRun_String(python_script, Py_file_input, pGlobal, pLocal);
</snippet></ROW><ROW><id>17113907</id><snippet>import argparse
parser = argparse.ArgumentParser()
parser.add_argument('-x')
</snippet></ROW><ROW><id>17113907</id><snippet>parser.parse_args(['-x','filename'])
</snippet></ROW><ROW><id>17113907</id><snippet>Namespace(x='filename')</snippet></ROW><ROW><id>17113907</id><snippet>-x</snippet></ROW><ROW><id>17113907</id><snippet>Namespace(x=None)</snippet></ROW><ROW><id>17113911</id><snippet>from datetime import datetime
from dateutil.relativedelta import relativedelta

date = '3/4/2013'

dt = datetime.strptime(date,'%m/%d/%Y')
r = relativedelta(datetime.now(), dt)
months = r.years * 12 + r.months + r.days/30.
print months
&gt;&gt;&gt;&gt; 3.33333333333
</snippet></ROW><ROW><id>17114063</id><snippet>topo = {
  'm0' : {
    'm1' : {},
    'm2' : {},
    'm3' : {},
  },
}
</snippet></ROW><ROW><id>17114063</id><snippet>topo['m0']['m2']['ABC'] = {}
</snippet></ROW><ROW><id>17114063</id><snippet>def verbose_to_compact(verbose):
    return { item['name']: verbose_to_compact(item['children']) for item in verbose }

def compact_to_verbose(compact):
    return [{'name':key, 'children':compact_to_verbose(value)} for key, value in compact]
</snippet></ROW><ROW><id>17114063</id><snippet>compact_topo = verbose_to_compact([topo]) # function expects list; make one-item list
verbose_topo = compact_to_verbose(compact_topo)[0] # function returns list; extract the single item
</snippet></ROW><ROW><id>17114211</id><snippet>def sort(sortlist, sortby):
    sortlist.sort(key = lambda x: getattr(x, sortby))
</snippet></ROW><ROW><id>17114557</id><snippet>import Tkinter as tk

import module1 as md1


main_sizex = 1280
main_sizey = 750
main_posx = 1
main_posy = 1
main_title = "Hello! This is a test"
main_titlesize = 22
root = tk.Tk()
window = md1.Drag_Window(root, main_sizex, main_sizey, main_posx, main_posy, main_title, main_titlesize)
window.button.config(bg='green')
root.mainloop() 
</snippet></ROW><ROW><id>17114557</id><snippet>import Tkinter as tk

class Drag_Window:
    def __init__(self, name, sizex, sizey, posx, posy, title, titlesize):
        self.name = name
        name.overrideredirect(True)
        name.config(relief='solid', bd=1, bg='white')
        name.wm_geometry("%dx%d+%d+%d" % (sizex,  sizey,  posx,  posy))
        frame = tk.Frame(name, width=sizex, height=80, relief='solid', bd=1, bg='black')
        frame.place(x=0, y=0)
        frame.bind("&lt;ButtonPress-1&gt;", self.StartMove)
        frame.bind("&lt;ButtonRelease-1&gt;", self.StopMove)
        frame.bind("&lt;B1-Motion&gt;", self.OnMotion)
        label = tk.Label(frame, text=title, font=('calibri', titlesize), bg='black', fg='white')
        label.place(x=10, y=15)
        self.button = tk.Button(frame, text='EXIT', font=('calibri', 13), bg='red', relief='flat', bd=1, width=8, pady=3, command=name.destroy)
        self.button.place(x=1170, y=20)
        frame2 = tk.Frame(name, width=sizex, height=20, relief='solid', bd=1, bg='black')
        frame2.place(x=0, y=sizey-20)

    def StartMove(self, event):
        self.x = event.x
        self.y = event.y

    def StopMove(self, event):
        self.x = None
        self.y = None

    def OnMotion(self, event):
        x1 = self.x
        y1 = self.y
        x2 = event.x
        y2 = event.y
        deltax = x2 - x1
        deltay = y2 - y1
        a = self.name.winfo_x() + deltax
        b = self.name.winfo_y() + deltay
        self.name.geometry("+%s+%s" % (a, b))
</snippet></ROW><ROW><id>17114557</id><snippet>def Drag_Window(root, ....):
    global button
    ....
    button = Button(....)
</snippet></ROW><ROW><id>17114565</id><snippet>itertools.chain</snippet></ROW><ROW><id>17114565</id><snippet>population = list(itertools.chain(fhd, fhet, fhr))
</snippet></ROW><ROW><id>17114565</id><snippet>itertools.repeat</snippet></ROW><ROW><id>17114565</id><snippet>[hd] * k</snippet></ROW><ROW><id>17114565</id><snippet>pops = (20, 30, 44)
alleles = (('A', 'A'), ('A', 'a'), ('a', 'a'))

population = [a for n, a in zip(pops, alleles) for _ in range(n)]
</snippet></ROW><ROW><id>17114565</id><snippet>allele_freqs = ((20, ('A', 'A')),
                (30, ('A', 'a')),
                (44, ('a', 'a')))

population = [a for n, a in allele_freqs for _ in range(n)]
</snippet></ROW><ROW><id>17114662</id><snippet>lastOutput = 0; # an arbitrary starting value: the last output value 
                # needs to be shared between loop cycles, so its 
                # scope must be outside the while loop

startingValue = # whatever you start at for input
finished = False # flag for tracking whether desired value has been reached
while (!finished):
    # body of loop:
    # here, you need to take lastOutput, run it through the 
    # function again, and check if the new output value is the
    # same as the input that created it. If so, you are done,
    # so set the flag to True, and note that the correct value is now stored in lastOutput
    # If not, set the new output as lastOutput, and go again!

# ...and now finish up with whatever you want to do now that you've 
# found the value (print it, etc.)!
</snippet></ROW><ROW><id>17114967</id><snippet>    print "ERROR: " + dept
</snippet></ROW><ROW><id>17114967</id><snippet>    print "ERROR: ", dept
</snippet></ROW><ROW><id>17114967</id><snippet>    print "ERROR: " + str(dept)
</snippet></ROW><ROW><id>17114967</id><snippet>deptElement</snippet></ROW><ROW><id>17114967</id><snippet>deptElement</snippet></ROW><ROW><id>17114967</id><snippet>allDepts.append(deptElement)</snippet></ROW><ROW><id>17114967</id><snippet>&gt;&gt;&gt; from xml.etree import ElementTree as ET
&gt;&gt;&gt; allDepts = ET.Element('depts')
&gt;&gt;&gt; ET.SubElement(allDepts, ET.Element('a'))
&lt;Element &lt;Element a at b727b96c&gt; at b727b22c&gt;
&gt;&gt;&gt; with open('a', 'wb') as f:
...     tree = ET.ElementTree(allDepts)
...     tree.write(f)
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 3, in &lt;module&gt;
  File "/home/falsetru/t/Python-2.6/Lib/xml/etree/ElementTree.py", line 663, in write
    self._write(file, self._root, encoding, {})
  File "/home/falsetru/t/Python-2.6/Lib/xml/etree/ElementTree.py", line 707, in _write
    self._write(file, n, encoding, namespaces)
  File "/home/falsetru/t/Python-2.6/Lib/xml/etree/ElementTree.py", line 681, in _write
    file.write("&lt;" + _encode(tag, encoding))
TypeError: cannot concatenate 'str' and 'instance' objects
</snippet></ROW><ROW><id>17114967</id><snippet>&gt;&gt;&gt; from xml.etree import ElementTree as ET
&gt;&gt;&gt; allDepts = ET.Element('depts')
&gt;&gt;&gt; ET.SubElement(allDepts, ET.Element('a'))
&lt;Element &lt;Element 'a' at 0xb745a8ec&gt; at 0xb74601ac&gt;
&gt;&gt;&gt; with open('a', 'wb') as f:
...     tree = ET.ElementTree(allDepts)
...     tree.write(f)
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 3, in &lt;module&gt;
  File "/usr/lib/python2.7/xml/etree/ElementTree.py", line 817, in write
    self._root, encoding, default_namespace
  File "/usr/lib/python2.7/xml/etree/ElementTree.py", line 886, in _namespaces
    _raise_serialization_error(tag)
  File "/usr/lib/python2.7/xml/etree/ElementTree.py", line 1052, in _raise_serialization_error
    "cannot serialize %r (type %s)" % (text, type(text).__name__)
TypeError: cannot serialize &lt;Element 'a' at 0xb745a8ec&gt; (type Element)
</snippet></ROW><ROW><id>17115129</id><snippet>InsertIntostacks(lst1)</snippet></ROW><ROW><id>17115129</id><snippet>InsertIntostacks(lst1)</snippet></ROW><ROW><id>17115129</id><snippet>for</snippet></ROW><ROW><id>17115129</id><snippet>lst</snippet></ROW><ROW><id>17115229</id><snippet>DataFrame.replace</snippet></ROW><ROW><id>17115229</id><snippet>In [9]: mapping = {'set': 1, 'test': 2}

In [10]: df.replace({'set': mapping, 'tesst': mapping})
Out[10]: 
   Unnamed: 0 respondent  brand engine  country  aware  aware_2  aware_3  age  \
0           0          a  volvo      p      swe      1        0        1   23   
1           1          b  volvo   None      swe      0        0        1   45   
2           2          c    bmw      p       us      0        0        1   56   
3           3          d    bmw      p       us      0        1        1   43   
4           4          e    bmw      d  germany      1        0        1   34   
5           5          f   audi      d  germany      1        0        1   59   
6           6          g  volvo      d      swe      1        0        0   65   
7           7          h   audi      d      swe      1        0        0   78   
8           8          i  volvo      d       us      1        1        1   32   

  tesst set  
0     2   1  
1     1   2  
2     2   1  
3     1   2  
4     2   1  
5     1   2  
6     2   1  
7     1   2  
8     2   1  
</snippet></ROW><ROW><id>17115229</id><snippet>.convert_objects()</snippet></ROW><ROW><id>17115229</id><snippet>int64</snippet></ROW><ROW><id>17115351</id><snippet>jobLocationUnclean</snippet></ROW><ROW><id>17115351</id><snippet>jobLocationClean</snippet></ROW><ROW><id>17115351</id><snippet>jobLocation = jobLocationUnclean
for c in "!@#%&amp;*()[]{}/?&lt;&gt;,.":
    jobLocation = jobLocation.replace(c, "")

params.append(jobLocation)
print(jobLocation)
</snippet></ROW><ROW><id>17115351</id><snippet>jobLocation</snippet></ROW><ROW><id>17115351</id><snippet>jobLocationClean</snippet></ROW><ROW><id>17115351</id><snippet>string.replace(jobLocation, c, "")</snippet></ROW><ROW><id>17115351</id><snippet>jobLocation.replace(c, "")</snippet></ROW><ROW><id>17115479</id><snippet>\d+\.\d*</snippet></ROW><ROW><id>17115479</id><snippet>BloomPrice = str(re.search(re.compile (r"\d+\.\d*"),str(brent.contents)).group())
</snippet></ROW><ROW><id>17115479</id><snippet>brent</snippet></ROW><ROW><id>17115529</id><snippet>ProxyHandler</snippet></ROW><ROW><id>17115529</id><snippet>proxy = urllib2.ProxyHandler({'http': '127.0.0.1'})
opener = urllib2.build_opener(proxy)
urllib2.install_opener(opener)
urllib2.urlopen('http://www.google.com')
</snippet></ROW><ROW><id>17115529</id><snippet>urlopen</snippet></ROW><ROW><id>17115651</id><snippet>&lt;div id="KittyChow"&gt;
    &lt;h4 class="noteText"&gt;foodAmount&lt;/h4&gt;
    &lt;span&gt;&lt; 1 tsp&lt;/span&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>17115651</id><snippet>&lt;div id="KittyChow"&gt;
    &lt;h4 class="noteText"&gt;foodAmount&lt;/h4&gt;
    &lt;span&gt;&lt; 1 tsp&lt;/span&gt;
&lt;/div&gt;
</snippet></ROW><ROW><id>17115651</id><snippet>BeautifulSoup("&lt;div&gt; &lt; 20 &lt;/div&gt;", "html5lib")
</snippet></ROW><ROW><id>17115651</id><snippet>&lt;</snippet></ROW><ROW><id>17115673</id><snippet>sediment_transport</snippet></ROW><ROW><id>17115673</id><snippet>elevation_change</snippet></ROW><ROW><id>17115673</id><snippet>for [i, j], flow in np.ndenumerate(flow_direction_np):
    try:
        if flow == 32:
            ...
        elif ...
            ...
    except IndexError:
        elevation_change[i, j] = 0
</snippet></ROW><ROW><id>17115673</id><snippet>sediment_transport</snippet></ROW><ROW><id>17115673</id><snippet>numpy.pad</snippet></ROW><ROW><id>17115673</id><snippet>padded_transport = np.zeros((rows + 2, cols + 2), float)
padded_transport[1:-1, 1:-1] = sediment_transport  
# The two lines above could be replaced with:
#padded_transport = np.pad(sediment_transport, 1, mode='constant')

for [i, j], flow in np.ndenumerate(flow_direction):
    # Need to take into account the offset in the "padded_transport"
    r, c = i + 1, j + 1

    if flow == 32:
        elevation_change[i, j] = padded_transport[r - 1, c - 1]
    elif flow == 16:
        elevation_change[i, j] = padded_transport[r, c - 1]
    elif flow == 8:
        elevation_change[i, j] = padded_transport[r + 1, c - 1]
    elif flow == 4:
        elevation_change[i, j] = padded_transport[r + 1, c]
    elif flow == 64:
        elevation_change[i, j] = padded_transport[r - 1, c]
    elif flow == 128:
        elevation_change[i, j] = padded_transport[r - 1, c + 1]
    elif flow == 1:
        elevation_change[i, j] = padded_transport[r, c + 1]
    elif flow == 2:
        elevation_change[i, j] = padded_transport[r + 1, c + 1]
</snippet></ROW><ROW><id>17115673</id><snippet>dict</snippet></ROW><ROW><id>17115673</id><snippet>elevation_change = np.zeros_like(sediment_transport)
nrows, ncols = flow_direction.shape
lookup = {32: (-1, -1),
          16:  (0, -1), 
          8:   (1, -1),
          4:   (1,  0),
          64: (-1,  0),
          128:(-1,  1),
          1:   (0,  1),
          2:   (1,  1)}

padded_transport = np.zeros((nrows + 2, ncols + 2), float)
padded_transport[1:-1, 1:-1] = sediment_transport  

for [i, j], flow in np.ndenumerate(flow_direction):
    # Need to take into account the offset in the "padded_transport"
    r, c = i + 1, j + 1
    # This also allows for flow_direction values not listed above...
    dr, dc = lookup.get(flow, (0,0))
    elevation_change[i,j] = padded_transport[r + dr, c + dc]
</snippet></ROW><ROW><id>17115673</id><snippet>numpy.pad</snippet></ROW><ROW><id>17115673</id><snippet>elevation_change = np.zeros_like(sediment_transport)
nrows, ncols = flow_direction.shape
lookup = {32: (-1, -1),
          16:  (0, -1), 
          8:   (1, -1),
          4:   (1,  0),
          64: (-1,  0),
          128:(-1,  1),
          1:   (0,  1),
          2:   (1,  1)}

for [i, j], flow in np.ndenumerate(flow_direction):
    dr, dc = lookup.get(flow, (0,0))
    r, c = i + dr, j + dc
    if not ((0 &lt;= r &lt; nrows) &amp; (0 &lt;= c &lt; ncols)):
        elevation_change[i,j] = 0
    else:
        elevation_change[i,j] = sediment_transport[r, c]
</snippet></ROW><ROW><id>17115673</id><snippet>numpy.roll</snippet></ROW><ROW><id>17115673</id><snippet>elevation_change = np.zeros_like(sediment_transport)
nrows, ncols = flow_direction.shape
lookup = {32: (-1, -1),
          16:  (0, -1), 
          8:   (1, -1),
          4:   (1,  0),
          64: (-1,  0),
          128:(-1,  1),
          1:   (0,  1),
          2:   (1,  1)}

for value, (row, col) in lookup.iteritems():
    mask = flow_direction == value
    shifted = np.roll(mask, row, 0)
    shifted = np.roll(shifted, col, 1)
    elevation_change[mask] = sediment_transport[shifted]

return elevation_change
</snippet></ROW><ROW><id>17115673</id><snippet>In [1]: import numpy as np

In [2]: x = np.arange(9).reshape(3,3)

In [3]: x
Out[3]: 
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])

In [4]: mask = np.array([[False, False, True],
...                      [True, False, False],
...                      [True, False, False]])


In [5]: x[mask]
Out[5]: array([2, 3, 6])
</snippet></ROW><ROW><id>17115673</id><snippet>numpy.roll</snippet></ROW><ROW><id>17115673</id><snippet>In [1]: import numpy as np

In [2]: np.array([[0,0,0],[0,1,0],[0,0,0]])
Out[2]: 
array([[0, 0, 0],
       [0, 1, 0],
       [0, 0, 0]])

In [3]: x = _

In [4]: np.roll(x, 1, axis=0)
Out[4]: 
array([[0, 0, 0],
       [0, 0, 0],
       [0, 1, 0]])

In [5]: np.roll(x, 1, axis=1)
Out[5]: 
array([[0, 0, 0],
       [0, 0, 1],
       [0, 0, 0]])
</snippet></ROW><ROW><id>17115673</id><snippet>numpy.pad</snippet></ROW><ROW><id>17115673</id><snippet>def vectorized(flow_direction, sediment_transport):
    elevation_change = np.zeros_like(sediment_transport)
    nrows, ncols = flow_direction.shape
    lookup = {32: (-1, -1),
              16:  (0, -1), 
              8:   (1, -1),
              4:   (1,  0),
              64: (-1,  0),
              128:(-1,  1),
              1:   (0,  1),
              2:   (1,  1)}

    # Initialize an array for the "shifted" mask
    shifted = np.zeros((nrows+2, ncols+2), dtype=bool)

    # Pad "sediment_transport" with zeros
    # Again, `np.pad` would be better and more flexible here, as it would
    # easily allow lots of different boundary conditions...
    tmp = np.zeros((nrows+2, ncols+2), sediment_transport.dtype)
    tmp[1:-1, 1:-1] = sediment_transport
    sediment_transport = tmp

    for value, (row, col) in lookup.iteritems():
        mask = flow_direction == value

        # Reset the "shifted" mask
        shifted.fill(False)
        shifted[1:-1, 1:-1] = mask

        # Shift the mask by the right amount for the given value
        shifted = np.roll(shifted, row, 0)
        shifted = np.roll(shifted, col, 1)

        # Set the values in elevation change to the offset value in sed_trans
        elevation_change[mask] = sediment_transport[shifted]

    return elevation_change
</snippet></ROW><ROW><id>17115673</id><snippet>In [79]: %timeit vectorized(flow_direction, sediment_transport)
10 loops, best of 3: 170 ms per loop

In [80]: %timeit iterate(flow_direction, sediment_transport)
1 loops, best of 3: 5.36 s per loop

In [81]: %timeit lookup(flow_direction, sediment_transport)
1 loops, best of 3: 3.4 s per loop
</snippet></ROW><ROW><id>17115673</id><snippet>import numpy as np

def main():
    # Generate some random flow_direction and sediment_transport data...
    nrows, ncols = 1000, 1000
    flow_direction = 2 ** np.random.randint(0, 8, (nrows, ncols))
    sediment_transport = np.random.random((nrows, ncols))

    # Make sure all of the results return the same thing...
    test1 = vectorized(flow_direction, sediment_transport)
    test2 = iterate(flow_direction, sediment_transport)
    test3 = lookup(flow_direction, sediment_transport)
    assert np.allclose(test1, test2)
    assert np.allclose(test2, test3)


def vectorized(flow_direction, sediment_transport):
    elevation_change = np.zeros_like(sediment_transport)
    sediment_transport = np.pad(sediment_transport, 1, mode='constant')
    lookup = {32: (-1, -1),
              16:  (0, -1), 
              8:   (1, -1),
              4:   (1,  0),
              64: (-1,  0),
              128:(-1,  1),
              1:   (0,  1),
              2:   (1,  1)}

    for value, (row, col) in lookup.iteritems():
        mask = flow_direction == value
        shifted = np.pad(mask, 1, mode='constant')
        shifted = np.roll(shifted, row, 0)
        shifted = np.roll(shifted, col, 1)
        elevation_change[mask] = sediment_transport[shifted]

    return elevation_change

def iterate(flow_direction, sediment_transport):
    elevation_change = np.zeros_like(sediment_transport)
    padded_transport = np.pad(sediment_transport, 1, mode='constant')  

    for [i, j], flow in np.ndenumerate(flow_direction):
        r, c = i + 1, j + 1
        if flow == 32:
            elevation_change[i, j] = padded_transport[r - 1, c - 1]
        elif flow == 16:
            elevation_change[i, j] = padded_transport[r, c - 1]
        elif flow == 8:
            elevation_change[i, j] = padded_transport[r + 1, c - 1]
        elif flow == 4:
            elevation_change[i, j] = padded_transport[r + 1, c]
        elif flow == 64:
            elevation_change[i, j] = padded_transport[r - 1, c]
        elif flow == 128:
            elevation_change[i, j] = padded_transport[r - 1, c + 1]
        elif flow == 1:
            elevation_change[i, j] = padded_transport[r, c + 1]
        elif flow == 2:
            elevation_change[i, j] = padded_transport[r + 1, c + 1]
    return elevation_change

def lookup(flow_direction, sediment_transport):
    elevation_change = np.zeros_like(sediment_transport)
    nrows, ncols = flow_direction.shape
    lookup = {32: (-1, -1),
              16:  (0, -1), 
              8:   (1, -1),
              4:   (1,  0),
              64: (-1,  0),
              128:(-1,  1),
              1:   (0,  1),
              2:   (1,  1)}

    for [i, j], flow in np.ndenumerate(flow_direction):
        dr, dc = lookup.get(flow, (0,0))
        r, c = i + dr, j + dc
        if not ((0 &lt;= r &lt; nrows) &amp; (0 &lt;= c &lt; ncols)):
            elevation_change[i,j] = 0
        else:
            elevation_change[i,j] = sediment_transport[r, c]

    return elevation_change

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17115689</id><snippet>db.students.find({'classes': 'science'})
</snippet></ROW><ROW><id>17115778</id><snippet>job = Job(field1=value1, field2=value2)
job.save()
</snippet></ROW><ROW><id>17115957</id><snippet>from matplotlib.figure import Figure
from matplotlib.backends.backend_gtkagg import\
    FigureCanvasGTKAgg as FigureCanvas
from matplotlib.backends.backend_gtkagg import\
    NavigationToolbar2GTKAgg as NavigationToolbar
</snippet></ROW><ROW><id>17115957</id><snippet>self.vsm_fig = Figure()
self.vsm_fig.subplots_adjust(bottom=0.20)
...
    plot = self.vsm_fig.add_subplot()
    plot.bar(*zip(*zip(count(), results_tfidf.values())))
    plot.set_title("TF IDF Chart")
    plot.set_xticks(*zip(*zip(count(), results_tfidf.keys())),rotation='vertical')
    plot.set_xlabel("Word")
    plot.set_ylabel("TF*IDF")
    self.vsm_canvas.show_now()
</snippet></ROW><ROW><id>17116187</id><snippet>$</snippet></ROW><ROW><id>17116187</id><snippet>[[</snippet></ROW><ROW><id>17116187</id><snippet>foo$bar</snippet></ROW><ROW><id>17116187</id><snippet>foo[["bar"]]</snippet></ROW><ROW><id>17116187</id><snippet>foo.rx2('bar')</snippet></ROW><ROW><id>17116187</id><snippet>foo[foo.index('bar')]</snippet></ROW><ROW><id>17116292</id><snippet>exec</snippet></ROW><ROW><id>17116292</id><snippet>Foo</snippet></ROW><ROW><id>17116292</id><snippet>    try:
        Foo = None
        exec("import Programs."+app+".main as Foo")
        Foo.init()
</snippet></ROW><ROW><id>17116292</id><snippet>exec</snippet></ROW><ROW><id>17116292</id><snippet>Foo = __import__("Programs."+app+".main")
</snippet></ROW><ROW><id>17116440</id><snippet>httplib2</snippet></ROW><ROW><id>17116440</id><snippet>python3</snippet></ROW><ROW><id>17116440</id><snippet>$ sudo apt-get install python3-httplib2
</snippet></ROW><ROW><id>17116440</id><snippet>python-???</snippet></ROW><ROW><id>17116440</id><snippet>python3-???</snippet></ROW><ROW><id>17116440</id><snippet>python-django</snippet></ROW><ROW><id>17116651</id><snippet>api = twitter.Api(consumer_key='consumer_key',
                  consumer_secret='consumer_secret',  
                  access_token_key='access_token',   
                  access_token_secret='access_token_secret')
</snippet></ROW><ROW><id>17116682</id><snippet>Salary.basic</snippet></ROW><ROW><id>17116682</id><snippet>Salary.basic()</snippet></ROW><ROW><id>17116682</id><snippet>self.basic</snippet></ROW><ROW><id>17116682</id><snippet>self.RemainingAmount</snippet></ROW><ROW><id>17116682</id><snippet>self.grossPay - basic</snippet></ROW><ROW><id>17116685</id><snippet>responses = {}

def cache_response(self, key, response):
    self.responses[key] = {}
    self.responses[key]['response'] = response
    self.responses[key]['time'] = dt.datetime.now()

def get_cached_url(self, path):
    if path not in self.responses.keys():
        self.http_client.fetch(self.get_url(path), self.stop)
        self.cache_response(path, self.wait(timeout=30))
    return self.responses[path]
</snippet></ROW><ROW><id>17116791</id><snippet>ipconfig</snippet></ROW><ROW><id>17116920</id><snippet>[8-bit-clean][1]</snippet></ROW><ROW><id>17116920</id><snippet>   &gt;&gt;&gt; import locale
   &gt;&gt;&gt; lang_code, encoding = locale.getdefaultlocale()
</snippet></ROW><ROW><id>17116920</id><snippet>   &gt;&gt;&gt; encoding = 'UTF8'
   &gt;&gt;&gt; workbook = xlwt.Workbook(encoding=encoding)
</snippet></ROW><ROW><id>17116966</id><snippet>import requests

# set username and password here
username = &lt;username&gt;
password = &lt;password&gt;
s = requests.session()
r = s.post('https://myaccount.adlkerala.com/login.php', data={'username': username, 'pass': password})
</snippet></ROW><ROW><id>17116966</id><snippet>s</snippet></ROW><ROW><id>17116976</id><snippet>In [43]: df
Out[43]: 
   CustNum     CustomerName  ItemQty Item                 Seatblocks  ItemExt
0    32363  McCartney, Paul        3  F04               2:218:10:4,6       60
1    31316     Lennon, John       25  F01  1:13:36:1,12 1:13:37:1,13      300

In [44]: s = df['Seatblocks'].apply(lambda x: Series(x.split(' '))).stack()

In [45]: s.index = s.index.droplevel(-1) # to line up with df's index

In [46]: s.name = 'Seatblocks' # needs a name to join

In [47]: s
Out[47]: 
0    2:218:10:4,6
1    1:13:36:1,12
1    1:13:37:1,13
Name: Seatblocks, dtype: object

In [48]: del df['Seatblocks']

In [49]: df.join(s)
Out[49]: 
   CustNum     CustomerName  ItemQty Item  ItemExt    Seatblocks
0    32363  McCartney, Paul        3  F04       60  2:218:10:4,6
1    31316     Lennon, John       25  F01      300  1:13:36:1,12
1    31316     Lennon, John       25  F01      300  1:13:37:1,13
</snippet></ROW><ROW><id>17116976</id><snippet>In [50]: df.join(s.apply(lambda x: Series(x.split(':'))))
Out[50]: 
   CustNum     CustomerName  ItemQty Item  ItemExt  0    1   2     3
0    32363  McCartney, Paul        3  F04       60  2  218  10   4,6
1    31316     Lennon, John       25  F01      300  1   13  36  1,12
1    31316     Lennon, John       25  F01      300  1   13  37  1,13
</snippet></ROW><ROW><id>17117016</id><snippet>pdb.set_trace = lambda : 0
</snippet></ROW><ROW><id>17117016</id><snippet>vikasdhi@redpanda:~$ cat ~/tmp/test.py
for i in range(1000):
    import pdb
    pdb.set_trace()
vikasdhi@redpanda:~$ python ~/tmp/test.py
&gt; /home/vikasdhi/tmp/test.py(1)&lt;module&gt;()
-&gt; for i in range(1000):
</snippet></ROW><ROW><id>17117016</id><snippet>(Pdb) c
&gt; /home/vikasdhi/tmp/test.py(1)&lt;module&gt;()
-&gt; for i in range(1000):
(Pdb) c
&gt; /home/vikasdhi/tmp/test.py(1)&lt;module&gt;()
-&gt; for i in range(1000):
</snippet></ROW><ROW><id>17117016</id><snippet>(Pdb) pdb.set_trace = lambda : 0
(Pdb) c
vikasdhi@redpanda:~$ 
</snippet></ROW><ROW><id>17117148</id><snippet>eval(raw_input())
</snippet></ROW><ROW><id>17117148</id><snippet>input()
</snippet></ROW><ROW><id>17117148</id><snippet>&gt;&gt;&gt; exp = input()
2, 3
&gt;&gt;&gt; math.pow(*exp)
8.0
</snippet></ROW><ROW><id>17117469</id><snippet>FieldEntry</snippet></ROW><ROW><id>17117469</id><snippet>class Meta:
    unique_together = ("form", "field")
</snippet></ROW><ROW><id>17117529</id><snippet>searchResult</snippet></ROW><ROW><id>17117529</id><snippet>re.match(r'\d+', searchResult)</snippet></ROW><ROW><id>17117529</id><snippet>None</snippet></ROW><ROW><id>17117529</id><snippet>None</snippet></ROW><ROW><id>17117529</id><snippet>if not(searchResult == None):</snippet></ROW><ROW><id>17117529</id><snippet>if searchResult:</snippet></ROW><ROW><id>17117529</id><snippet>searchResultNum = 696969
if searchResult:
    m = re.match(r'\d+', searchResult)
    if m:
        searchResultNum = int(m.group())
</snippet></ROW><ROW><id>17117544</id><snippet>'10'</snippet></ROW><ROW><id>17117544</id><snippet>for p in pontok[zhszam]:
    p = p.strip()
    # ...
</snippet></ROW><ROW><id>17117758</id><snippet>friends_timeline</snippet></ROW><ROW><id>17117758</id><snippet>home_timeline</snippet></ROW><ROW><id>17117758</id><snippet>user_timeline</snippet></ROW><ROW><id>17117758</id><snippet>t.statuses.home_timeline(user_id="gvanrossum")
</snippet></ROW><ROW><id>17117829</id><snippet>mytmpobject.relationobject =  aManagedRelationObject
</snippet></ROW><ROW><id>17117829</id><snippet>mytmpobject.relationobject_id = aManagedRelationObject.id
</snippet></ROW><ROW><id>17118161</id><snippet>&gt;&gt;&gt; "{0:0&gt;3}".format(1)
'001'
&gt;&gt;&gt; "{0:0&gt;3}".format(10)
'010'
&gt;&gt;&gt; "{0:0&gt;3}".format(100)
'100'
</snippet></ROW><ROW><id>17118161</id><snippet>{0 : 0 &gt; 3}
 │   │ │ │
 │   │ │ └─ Width of 3
 │   │ └─ Align Right
 │   └─ Fill with '0'
 └─ Element index
</snippet></ROW><ROW><id>17118321</id><snippet>self.opts.local_fields</snippet></ROW><ROW><id>17118321</id><snippet>class SummaryInline(admin.TabularInline):
    model = ParserError.summaries.through
    readonly_fields = ('myclasssummary',)
</snippet></ROW><ROW><id>17118357</id><snippet>Accept-Language</snippet></ROW><ROW><id>17118357</id><snippet>&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; opener = urllib2.build_opener()
&gt;&gt;&gt; r = urllib2.Request('http://about.me/&lt;username&gt;')
&gt;&gt;&gt; r.add_header('Accept-Language', 'en')
&gt;&gt;&gt; opener.open(r)
  &gt; &lt;addinfourl at 320988516504 whose fp = &lt;socket._fileobject object at 0x4abc6073d0&gt;&gt;
</snippet></ROW><ROW><id>17118450</id><snippet>rank</snippet></ROW><ROW><id>17118450</id><snippet>rankName</snippet></ROW><ROW><id>17118450</id><snippet>suit</snippet></ROW><ROW><id>17118450</id><snippet>suitName</snippet></ROW><ROW><id>17118450</id><snippet>suitName = ("hearts", "diamonds", "spades", "clubs")
rankName = ("Ace", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Jack", "Queen", "King")

def translate():
    cardNum = 0

    for x in rankName:
        rank = x

        for y in suitName:
            suit = y

            cards = ""
            cards += rank
            cards += " of "
            cards += suit
            i += 1

            print cardNum
            print "    "
            print cards
</snippet></ROW><ROW><id>17118450</id><snippet>rank = x</snippet></ROW><ROW><id>17118450</id><snippet>suit = y</snippet></ROW><ROW><id>17118450</id><snippet>for rank in rankName:</snippet></ROW><ROW><id>17118450</id><snippet>for suit in suitName</snippet></ROW><ROW><id>17118526</id><snippet>def do_curl(self, *args):
    "Sets up a download"
    curlProcess = CurlProcessProtocol()
    args = tuple([os.getcwd()+'\curl.exe'])+args
    reactor.spawnProcess(curlProcess, os.getcwd()+'\curl.exe', args)
</snippet></ROW><ROW><id>17118529</id><snippet>None</snippet></ROW><ROW><id>17118763</id><snippet>forum</snippet></ROW><ROW><id>17118763</id><snippet>Forum</snippet></ROW><ROW><id>17118763</id><snippet>Post</snippet></ROW><ROW><id>17118763</id><snippet>/view_forum/</snippet></ROW><ROW><id>17118763</id><snippet>/view_thread/</snippet></ROW><ROW><id>17118763</id><snippet>users</snippet></ROW><ROW><id>17118763</id><snippet>admin.py</snippet></ROW><ROW><id>17118763</id><snippet>djangobb_forum</snippet></ROW><ROW><id>17118763</id><snippet>Profile</snippet></ROW><ROW><id>17118763</id><snippet>auth.User</snippet></ROW><ROW><id>17118763</id><snippet>OneToOneField</snippet></ROW><ROW><id>17118870</id><snippet>fork()</snippet></ROW><ROW><id>17118870</id><snippet>__main__</snippet></ROW><ROW><id>17119072</id><snippet>.get(1.0, 'end')</snippet></ROW><ROW><id>17119072</id><snippet>text.get('1.0', 'end -1 chars')
</snippet></ROW><ROW><id>17119072</id><snippet>text.get('1.0', '1.end')
</snippet></ROW><ROW><id>17119118</id><snippet>sys.argv</snippet></ROW><ROW><id>17119118</id><snippet>parse_args</snippet></ROW><ROW><id>17119118</id><snippet>option = parser.parse_args()
</snippet></ROW><ROW><id>17119118</id><snippet>sys.argv</snippet></ROW><ROW><id>17119118</id><snippet>parse_args</snippet></ROW><ROW><id>17119118</id><snippet>sys.argv</snippet></ROW><ROW><id>17119118</id><snippet>option.filename</snippet></ROW><ROW><id>17119118</id><snippet>hehe</snippet></ROW><ROW><id>17119118</id><snippet>sys.argv</snippet></ROW><ROW><id>17119118</id><snippet>parse_args</snippet></ROW><ROW><id>17119118</id><snippet>sys.argv</snippet></ROW><ROW><id>17119185</id><snippet>&gt;&gt;&gt; from decimal import Decimal
&gt;&gt;&gt; d = Decimal('1.23')
&gt;&gt;&gt; d
Decimal('1.23')
&gt;&gt;&gt; f = d
&gt;&gt;&gt; f
Decimal('1.23')
&gt;&gt;&gt; d._exp = 1
&gt;&gt;&gt; f
Decimal('1.23E+3')
</snippet></ROW><ROW><id>17119185</id><snippet>&gt;&gt;&gt; d += 100
&gt;&gt;&gt; f
Decimal('1.23E+3')
&gt;&gt;&gt; d
Decimal('1330')
</snippet></ROW><ROW><id>17119185</id><snippet>__i[op]__</snippet></ROW><ROW><id>17119185</id><snippet>d += 100</snippet></ROW><ROW><id>17119185</id><snippet>d = d.__add__(100)</snippet></ROW><ROW><id>17119261</id><snippet>def logged(*setting_args, **setting_kwargs):
    no_args = False
    if len(setting_args) == 1 \
        and not setting_kwargs \
        and callable(setting_args[0]):
        # We were called without args
        func = setting_args[0]
        no_args = True

    def outer(func):
        @wraps(func)
        def with_logging(*args, **kwargs):
            print "{} was called".format(func.__name__)
            print "Setting args are: {}".format(setting_args)
            print "Setting keyword args are: {}".format(setting_kwargs)
            return func(*args, **kwargs)
        return with_logging

    if no_args:
        return outer(func)
    else:
        return outer
</snippet></ROW><ROW><id>17119261</id><snippet># No arguments
@logged
def some_function(x):
    pass

# One or more arguments
@logged(1, 2, 3)
def some_function(x):
    pass

# One or more keyword arguments
@logged(key=1, another_key=2)
def some_function(x):
    pass

# A mix of the two
@logged(1, 2, key=3)
def some_function(x):
    pass
</snippet></ROW><ROW><id>17119261</id><snippet># This will break.
@logged(lambda: "Just for fun")
def some_function(x):
    pass
</snippet></ROW><ROW><id>17119261</id><snippet># This gets around the above limitation
@logged(lambda: "Just for fun", ignored=True)
def some_function(x):
    pass
</snippet></ROW><ROW><id>17119267</id><snippet>import numpy as np

def find_nearest_above(my_array, target):
    diff = my_array - target
    mask = np.ma.less_equal(diff, 0)
    # We need to mask the negative differences and zero
    # since we are looking for values above
    if np.all(mask):
        return None # returns None if target is greater than any value
    masked_diff = np.ma.masked_array(diff, mask)
    return masked_diff.argmin()
</snippet></ROW><ROW><id>17119267</id><snippet>&gt;&gt;&gt; find_nearest_above(np.array([0.,1.,1.4,2.]), 1.5)
3
&gt;&gt;&gt; find_nearest_above(np.array([0.,1.,1.4,-2.]), -1.5)
0
&gt;&gt;&gt; find_nearest_above(np.array([0., 1, 1.4, 2]), 3)
&gt;&gt;&gt; 
</snippet></ROW><ROW><id>17119304</id><snippet>source ~/.bashrc
</snippet></ROW><ROW><id>17119358</id><snippet>def gcd(a, b):
    if b == 0:
        return a
    else:
        return gcd(b, a % b)
</snippet></ROW><ROW><id>17119358</id><snippet>def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def gcd(a, b):
    while a != b:
        if a &gt; b:
            a -= b
        else:
            b -= a
    return a
</snippet></ROW><ROW><id>17119455</id><snippet>re.sub(r'\s*(&lt;!--(?:[^-]+|-(?!-&gt;))*--&gt;)\s*', '\\n\\n\\1\\n\\n', yourstring)
</snippet></ROW><ROW><id>17119587</id><snippet>web_request</snippet></ROW><ROW><id>17119587</id><snippet># open:                    1                           2      3
web_request=urllib2.urlopen("http://" + ip + ":" + list(islice(port, 1))
# close:                                                              12
</snippet></ROW><ROW><id>17119587</id><snippet>server</snippet></ROW><ROW><id>17119618</id><snippet>collision_immune</snippet></ROW><ROW><id>17119618</id><snippet>True</snippet></ROW><ROW><id>17119618</id><snippet>collision_time</snippet></ROW><ROW><id>17119618</id><snippet>pygame.time.get_ticks()</snippet></ROW><ROW><id>17119618</id><snippet>collision_immune</snippet></ROW><ROW><id>17119618</id><snippet>if collision == True:
    ship_game = ship_destroyed
    lifes -= 1;
    collision_immune = True
    collision_time = pygame.time.get_ticks()
</snippet></ROW><ROW><id>17119618</id><snippet>if pygame.time.get_ticks() - collision_time &gt; 3000:    # The time is in ms.
    collision_immune = False
</snippet></ROW><ROW><id>17119618</id><snippet>collision_immune</snippet></ROW><ROW><id>17119668</id><snippet>list1 = list2 = []
</snippet></ROW><ROW><id>17119668</id><snippet>list1</snippet></ROW><ROW><id>17119668</id><snippet>list2</snippet></ROW><ROW><id>17119668</id><snippet>list1 = []
list2 = []
</snippet></ROW><ROW><id>17119927</id><snippet>title, author, news_id
hi   ,    max,       1
hello,    max,       1
world,     me,       1
sup  ,     me,       2
</snippet></ROW><ROW><id>17120097</id><snippet>./pdb_fasta.pl abc.txt | ./count_aa.py
</snippet></ROW><ROW><id>17120097</id><snippet>count_aa.py</snippet></ROW><ROW><id>17120097</id><snippet>import sys

n = 0
for line in sys.stdin:
    n += 1
print(n)
</snippet></ROW><ROW><id>17120128</id><snippet>SELECT RANDOM_FIELD, RANDOM_FIELD2, ..., REPLACE(JSON_FIELD,'\n','NEWLINE') FROM DATABASE ....
</snippet></ROW><ROW><id>17120471</id><snippet>cherrypy.quickstart(cherrypy.Application(Root()), '/', {})
</snippet></ROW><ROW><id>17120471</id><snippet>api</snippet></ROW><ROW><id>17120471</id><snippet>http://127.0.0.1:8080/api/person/Blake/Williams/27
</snippet></ROW><ROW><id>17120487</id><snippet>from easygui import fileopenbox

def word_count(filename):
    if not filename.endswith(('.txt', '.py', '.java')):
        print('Are you trying to annoy me? How about giving me a TEXT or SOURCE CODE file, genius?')
        return

    with open(filename) as f:
        n_lines = 0
        n_words = 0
        for line in f:
            n_lines += 1
            n_words += len(line.split())
    print('Your file has {} lines, and {} words'.format(n_lines, n_words))

filename = fileopenbox()
word_count(filename)
</snippet></ROW><ROW><id>17120637</id><snippet>import os
import pty

def wall(host, pw):
    pid, fd = pty.fork()
    if pid == 0: # Child
        os.execvp('ssh', ['ssh', host, 'ls', '/usr/bin/wall'])
        os._exit(1) # fail to execv

    # read '..... password:', write password
    os.read(fd, 1024)
    os.write(fd, pw + '\n')

    result = []
    while True:
        try:
            data = os.read(fd, 1024)
        except OSError:
            break
        if not data:
            break
        result.append(data)
    pid, status = os.waitpid(pid, 0)
    return status, ''.join(result)

status, output = wall('localhost', "secret")
print status
print output
</snippet></ROW><ROW><id>17120964</id><snippet>imp.load_source()</snippet></ROW><ROW><id>17120964</id><snippet>import imp
module = imp.load_source( 'mymodule', module_full_path )
</snippet></ROW><ROW><id>17120964</id><snippet>module = imp.load_source( 'file1', '.\parsers\file1.py') &lt;-- check this path
methodToCall = getattr( module, 'filemethod' )
methodToCall( data )
</snippet></ROW><ROW><id>17121246</id><snippet>sys.exit</snippet></ROW><ROW><id>17121246</id><snippet>return</snippet></ROW><ROW><id>17121246</id><snippet>import sys

...
print math.sqrt(int(h1)**2 + int(h2)**2)
sys.exit()
</snippet></ROW><ROW><id>17121279</id><snippet>importlib</snippet></ROW><ROW><id>17121279</id><snippet>types</snippet></ROW><ROW><id>17121279</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; import types
&gt;&gt;&gt; import importlib
&gt;&gt;&gt; strs = '/path/to/myfle.py'
&gt;&gt;&gt; path, _ = os.path.splitext(strs)               #now path is '/path/to/myfile'
&gt;&gt;&gt; file_name = path.split('/')[-1]                # returns myfile
&gt;&gt;&gt; mod = importlib.import_module(file_name, path)
&gt;&gt;&gt; funcs = [x for x in dir(mod) if isinstance(getattr(mod,x), types.FunctionType)]
&gt;&gt;&gt; funcs
['foo', 'func']  #name of functions
</snippet></ROW><ROW><id>17121301</id><snippet>from ctypes import *

class Info1(Structure):
    _fields_ = [("req_no", c_uint16),
                ("status", c_uint16),
                ("value_len", c_uint32),
                ("value", c_uint64)]

data = (
    '\x01\x00'
    '\x02\x00'
    '\x03\x00\x00\x00'
    '\x04\x00\x00\x00\x00\x00\x00\x00'
)
# Assumed data was received. I assumed both server, clients are little-endian.
# else, use socket.ntoh{s|l}, socket.hton{s|l} ....

header = Info1()
memmove(addressof(header), data, sizeof(header))
assert header.req_no == 1
assert header.status == 2
assert header.value_len == 3
assert header.value == 4
</snippet></ROW><ROW><id>17121301</id><snippet>import struct
data = '....' # same as above
struct.unpack('HHLQ', data) == (1, 2, 3, 4) # '&gt;HHLQ' if data is htonl/htons-ed in sencding part.
</snippet></ROW><ROW><id>17121321</id><snippet>curses</snippet></ROW><ROW><id>17121321</id><snippet>import curses
curses.initscr()
curses.noecho()    # don't echo the keys on the screen
curses.cbreak()    # don't wait enter for input

window = curses.newwin(10, 10, 0, 0)  # create a 10x10 window
window.box()       # Draw the box outside the window
cur_x = 1
cur_y = 1
while True:
    window.addch(cur_y, cur_x, '@')
    window.refresh()
    inchar = window.getch()
    window.addch(cur_y, cur_x, ' ')
    # W,A,S,D used to move around the @
    if inchar == ord('w'):
        cur_y -= 1
    elif inchar == ord('a'):
        cur_x -= 1
    elif inchar == ord('d'):
        cur_x += 1
    elif inchar == ord('s'):
        cur_y += 1
    elif inchar == ord('q'):
        # stop the program when Q is entered.
        break
curses.endwin()
</snippet></ROW><ROW><id>17121321</id><snippet>test_curses.py</snippet></ROW><ROW><id>17121321</id><snippet>python test_curses.py
</snippet></ROW><ROW><id>17121321</id><snippet>@</snippet></ROW><ROW><id>17121355</id><snippet>print</snippet></ROW><ROW><id>17121355</id><snippet>sys.stdout.flush()</snippet></ROW><ROW><id>17121579</id><snippet>range(1, 10000)
</snippet></ROW><ROW><id>17121579</id><snippet>my_list</snippet></ROW><ROW><id>17121579</id><snippet>my_list = range(1, 10000)
</snippet></ROW><ROW><id>17121579</id><snippet>my_list = None
</snippet></ROW><ROW><id>17121579</id><snippet>my_list = range(1, 10000)
del my_list[:]
</snippet></ROW><ROW><id>17121579</id><snippet>&gt;&gt;&gt; import gc
&gt;&gt;&gt; gc.isenabled()
True
</snippet></ROW><ROW><id>17121579</id><snippet>__del__</snippet></ROW><ROW><id>17121691</id><snippet>mkproject [-t template] [virtualenv_options] ENVNAME
</snippet></ROW><ROW><id>17121691</id><snippet>setvirtualenvproject [virtualenv_path project_path]
</snippet></ROW><ROW><id>17121719</id><snippet>&gt;&gt;&gt; strs = " ".join(str(x) for x in xrange(10**5))
&gt;&gt;&gt; %timeit [int(x) for x in strs.split()]
1 loops, best of 3: 111 ms per loop
&gt;&gt;&gt; %timeit map(int, strs.split())
1 loops, best of 3: 105 ms per loop
</snippet></ROW><ROW><id>17121719</id><snippet>&gt;&gt;&gt; def func(x):
...     return int(x)

&gt;&gt;&gt; %timeit map(func, strs.split())
1 loops, best of 3: 129 ms per loop
&gt;&gt;&gt; %timeit [func(x) for x in strs.split()]
1 loops, best of 3: 128 ms per loop
</snippet></ROW><ROW><id>17121719</id><snippet>&gt;&gt;&gt; strs = " ".join([str(x) for x in range(10**5)])
&gt;&gt;&gt; %timeit list(map(int, strs.split()))
10 loops, best of 3: 59 ms per loop
&gt;&gt;&gt; %timeit [int(x) for x in strs.split()]
10 loops, best of 3: 79.2 ms per loop

&gt;&gt;&gt; def func(x):                         
    return int(x)
... 
&gt;&gt;&gt; %timeit list(map(func, strs.split()))
10 loops, best of 3: 94.6 ms per loop
&gt;&gt;&gt; %timeit [func(x) for x in strs.split()]
1 loops, best of 3: 92 ms per loop
</snippet></ROW><ROW><id>17121975</id><snippet>N</snippet></ROW><ROW><id>17121975</id><snippet>N</snippet></ROW><ROW><id>17121975</id><snippet>from scipy.sparse import lil_matrix

result = lil_matrix((N, N))  # In order to save memory, one may add: dtype=bool, or dtype=numpy.int8

with open('matrix.csv') as input_file:
    for line in input_file:
        x, y = map(int, line.split(',', 1))
        result[x, y] = 1
</snippet></ROW><ROW><id>17121975</id><snippet>result.__setitem__(map(int, line.split(',', 1)), 1)</snippet></ROW><ROW><id>17121975</id><snippet>1</snippet></ROW><ROW><id>17121975</id><snippet>split()</snippet></ROW><ROW><id>17121975</id><snippet>result = numpy.array(…)</snippet></ROW><ROW><id>17121991</id><snippet>','</snippet></ROW><ROW><id>17121991</id><snippet>''</snippet></ROW><ROW><id>17121991</id><snippet>regex</snippet></ROW><ROW><id>17121991</id><snippet>&gt;&gt;&gt; r = re.compile("\$(\d+.\d+)")

&gt;&gt;&gt; r.search(strs.replace(',','')).group(1)
'12000.50'

&gt;&gt;&gt; strs = '$3.50'
&gt;&gt;&gt; r.search(strs.replace(',','')).group(1)
'3.50'

&gt;&gt;&gt; strs = 'From $3.50 to $12,000.50'
&gt;&gt;&gt; r.search(strs.replace(',','')).group(1)
'3.50'
</snippet></ROW><ROW><id>17122130</id><snippet>class Enemy(pygame.sprite.Sprite):
    def __init__(self,image_file):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.image.load(image_file)
        self.image = self.image.convert()
        self.image.set_colorkey((0,0,0))
        self.rect = self.image.get_rect()
        self.vel = -2

    def update(self,ground):
        self.rect.x += self.vel
</snippet></ROW><ROW><id>17122130</id><snippet>...

if monster collides with ground:
    monster.vel *= -1

...
</snippet></ROW><ROW><id>17122377</id><snippet>BeautifulSoup</snippet></ROW><ROW><id>17122377</id><snippet>import requests
from bs4 import BeautifulSoup as BS
r = requests.get('https://www.example.com', verify=True)
soup = BS(r.text)
print(soup.find('title').text)
</snippet></ROW><ROW><id>17122377</id><snippet>Some title here
</snippet></ROW><ROW><id>17122379</id><snippet>endpoint</snippet></ROW><ROW><id>17122379</id><snippet>route</snippet></ROW><ROW><id>17122379</id><snippet>static</snippet></ROW><ROW><id>17122379</id><snippet>endpoint='mystatic'</snippet></ROW><ROW><id>17122379</id><snippet>route</snippet></ROW><ROW><id>17122501</id><snippet>sys.stdout</snippet></ROW><ROW><id>17122501</id><snippet>write()</snippet></ROW><ROW><id>17122544</id><snippet>import sys
import curses


curses.initscr()

if not curses.has_colors():
    curses.endwin()
    print "no colors"
    sys.exit()
else:
    curses.start_color()

curses.noecho()    # don't echo the keys on the screen
curses.cbreak()    # don't wait enter for input
curses.curs_set(0) # don't show cursor.

RED_TEXT = 1
curses.init_pair(RED_TEXT, curses.COLOR_RED, curses.COLOR_BLACK)

window = curses.newwin(20, 20, 0, 0)
window.box()
staticwin = curses.newwin(5, 10, 1, 1)
staticwin.box()

staticwin.addstr(1, 1, "test", curses.color_pair(RED_TEXT))

cur_x = 10
cur_y = 10
while True:
    window.addch(cur_y, cur_x, '@')
    window.refresh()
    staticwin.box()
    staticwin.refresh()
    inchar = window.getch()
    window.addch(cur_y, cur_x, ' ')
    # W,A,S,D used to move around the @
    if inchar == ord('w'):
        cur_y -= 1
    elif inchar == ord('a'):
        cur_x -= 1
    elif inchar == ord('d'):
        cur_x += 1
    elif inchar == ord('s'):
        cur_y += 1
    elif inchar == ord('q'):
        break
curses.endwin()
</snippet></ROW><ROW><id>17122544</id><snippet>refresh()</snippet></ROW><ROW><id>17122544</id><snippet>staticwin.clear()   #clean the window
staticwin.addstr(1, 1, "insert-text-here", curses.color_pair(RED_TEXT))
staticwin.box()     #re-draw the box
staticwin.refresh()
</snippet></ROW><ROW><id>17122544</id><snippet>1, 1</snippet></ROW><ROW><id>17122544</id><snippet>0</snippet></ROW><ROW><id>17122946</id><snippet>sys.stdout</snippet></ROW><ROW><id>17123114</id><snippet>self.txtBuffer.insert(...)</snippet></ROW><ROW><id>17123114</id><snippet>gobject.idle_add(lambda: self.txtBuffer.insert(...))</snippet></ROW><ROW><id>17123114</id><snippet>gtk.main()</snippet></ROW><ROW><id>17123114</id><snippet>textBuffer.insert</snippet></ROW><ROW><id>17123324</id><snippet>filename</snippet></ROW><ROW><id>17123324</id><snippet>tkFileDialog</snippet></ROW><ROW><id>17123324</id><snippet>filename = ''</snippet></ROW><ROW><id>17123324</id><snippet>import unittest

class TestFileDialog(unittest.TestCase):

    def test_dialog_closed(self):
        filename = ''
        # ...

    def test_incorrect_extension(self):
        filename = '/path/to/another/filetype'
        # ...

    def test_csv_extension(self):
        filename = '/path/to/correct/file.csv'
        # ...
</snippet></ROW><ROW><id>17123458</id><snippet>shareVars</snippet></ROW><ROW><id>17123458</id><snippet>shareVars</snippet></ROW><ROW><id>17123458</id><snippet>a, b, c = shareVars['a'], shareVars['b'], shareVars['c']
</snippet></ROW><ROW><id>17123493</id><snippet>def rfftfreq(n, d=1.0):
    """
Return the Discrete Fourier Transform sample frequencies
(for usage with rfft, irfft).

The returned float array `f` contains the frequency bin centers in cycles
per unit of the sample spacing (with zero at the start). For instance, if
the sample spacing is in seconds, then the frequency unit is cycles/second.

Given a window length `n` and a sample spacing `d`::

f = [0, 1, ..., n/2-1, n/2] / (d*n) if n is even
f = [0, 1, ..., (n-1)/2-1, (n-1)/2] / (d*n) if n is odd

Unlike `fftfreq` (but like `scipy.fftpack.rfftfreq`)
the Nyquist frequency component is considered to be positive.

Parameters
----------
n : int
Window length.
d : scalar, optional
Sample spacing (inverse of the sampling rate). Defaults to 1.

Returns
-------
f : ndarray
Array of length ``n//2 + 1`` containing the sample frequencies.

Examples
--------
&gt;&gt;&gt; signal = np.array([-2, 8, 6, 4, 1, 0, 3, 5, -3, 4], dtype=float)
&gt;&gt;&gt; fourier = np.fft.rfft(signal)
&gt;&gt;&gt; n = signal.size
&gt;&gt;&gt; sample_rate = 100
&gt;&gt;&gt; freq = np.fft.fftfreq(n, d=1./sample_rate)
&gt;&gt;&gt; freq
array([ 0., 10., 20., 30., 40., -50., -40., -30., -20., -10.])
&gt;&gt;&gt; freq = np.fft.rfftfreq(n, d=1./sample_rate)
&gt;&gt;&gt; freq
array([ 0., 10., 20., 30., 40., 50.])

"""
    if not (isinstance(n,int) or isinstance(n, integer)):
        raise ValueError("n should be an integer")
    val = 1.0/(n*d)
    N = n//2 + 1
    results = arange(0, N, dtype=int)
    return results * val
</snippet></ROW><ROW><id>17123641</id><snippet>&gt;&gt;&gt; dic = {}
for k, v in mydict.items():
    d = dic.setdefault(v[0], [v[1], 0, 0])
    d[2] += v[-1]
    d[1] += 1
...     
&gt;&gt;&gt; dic
{'OV': ['2012-06-14', 1, 4],
 'JN': ['2012-06-13', 2, 7],
 'AM': ['2012-06-13', 1, 3]}
</snippet></ROW><ROW><id>17123641</id><snippet>&gt;&gt;&gt; for k,v in dic.items():
    print k +',',", ".join([str(x) for x in v])
...     
OV, 2012-06-14, 1, 4
JN, 2012-06-13, 2, 7
AM, 2012-06-13, 1, 3
</snippet></ROW><ROW><id>17123641</id><snippet>collections.OrderedDict</snippet></ROW><ROW><id>17123641</id><snippet>&gt;&gt;&gt; from collections import OrderedDict
&gt;&gt;&gt; dic = OrderedDict()
&gt;&gt;&gt; for k, v in mydict.items():
         d = dic.setdefault(v[0], [v[1], 0, 0])
         d[2] += v[-1]
         d[1] += 1

&gt;&gt;&gt; for k,v in dic.items():
...         print k +',',", ".join([str(x) for x in v])
...     
JN, 2012-06-13, 2, 7
AM, 2012-06-13, 1, 3
OV, 2012-06-14, 1, 4
</snippet></ROW><ROW><id>17123748</id><snippet>importlib</snippet></ROW><ROW><id>17123748</id><snippet>import</snippet></ROW><ROW><id>17123748</id><snippet>import importlib
xcombined=[]
for i in range (1,20):
    mod = importlib.import_module('files_'+str(i))
    x = mod.x  # fetch `x` from the imported module
    del mod    # now delete module, so this is equivalent to: `from mod import x`
    for j in range(0,len(x)):
        xcombined.append(x[j])
</snippet></ROW><ROW><id>17123748</id><snippet>importlib</snippet></ROW><ROW><id>17123748</id><snippet>__import__</snippet></ROW><ROW><id>17123748</id><snippet>__import__</snippet></ROW><ROW><id>17123748</id><snippet>&gt;&gt;&gt; print __import__.__doc__
__import__(name, globals={}, locals={}, fromlist=[], level=-1) -&gt; module

Import a module. Because this function is meant for use by the Python
interpreter and not for general use it is better to use
importlib.import_module() to programmatically import a module.
...
</snippet></ROW><ROW><id>17124217</id><snippet>st = os.stat(dest_file)
os.chmod(dest_file, st.st_mode &amp; ~stat.S_IWUSR)
</snippet></ROW><ROW><id>17124217</id><snippet>~</snippet></ROW><ROW><id>17124217</id><snippet>~stat.S_IWUSR</snippet></ROW><ROW><id>17124217</id><snippet>st.st_mode</snippet></ROW><ROW><id>17124217</id><snippet>stat.S_IWUSR                    00001000
~stat.S_IWUSR                   11110111
s.st_mode                       00101001
s.st_mode &amp; ~stat.S_IWUSR       00100001 
</snippet></ROW><ROW><id>17124293</id><snippet>QuerySet</snippet></ROW><ROW><id>17124293</id><snippet>modules._result_cache</snippet></ROW><ROW><id>17124293</id><snippet>def modified_module():
   for i, module in enumerate(modules):
      if [...] :
          try:
              yield Module.objects.get( [...] )
          except:
              yield module
      else:
          yield module
 # and iterate on modified_module() in template
</snippet></ROW><ROW><id>17124293</id><snippet>modules = list(modules)
# do modifications
</snippet></ROW><ROW><id>17124323</id><snippet>class A(models.Model):
    any attr_A
    ....

class B(A):
    any attr_B
    ....


class C(models.Model):
     a = models.ManyToManyField(B)
</snippet></ROW><ROW><id>17124323</id><snippet>class A(models.Model):
    any attr_A
    ....

class B(models.Model):
    a = models.ForeignKey(A)
    any attr_B
    ....


class C(models.Model):
     a = models.ManyToManyField(A)
</snippet></ROW><ROW><id>17124323</id><snippet>a[0].b.attr_B
</snippet></ROW><ROW><id>17124332</id><snippet>    class rectangle:
def __init__(self,pos,size):
    self.pos=pos
    self.size=size
def topLeft(self):
    return self.pos
def topRight(self):
    return (self.pos[0]+self.size[0],self.pos[1])
def bottomLeft(self):
    return (self.pos[0],self.pos[1]+self.size[1])
def bottomRight(self):
    return (self.pos[0]+self.size[0],self.pos[1]+self.size[1])
def ares(self):
    return self.size[0]*self.size[1]
</snippet></ROW><ROW><id>17124414</id><snippet>lift</snippet></ROW><ROW><id>17124414</id><snippet>lower</snippet></ROW><ROW><id>17124414</id><snippet>lift</snippet></ROW><ROW><id>17124414</id><snippet>frame.lift(canvas)
</snippet></ROW><ROW><id>17124414</id><snippet>lift</snippet></ROW><ROW><id>17124446</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; text = "Lorem ipsum, dolor sit amet. consectetur adipisicing elit; sed do eiusmod tempor. incididunt ut labore: et dolore magna aliqua. Ut enim ad. minim veniam."
&gt;&gt;&gt; ' '.join(re.split(r'(?&lt;=[.:;])\s', text)[:4])
'Lorem ipsum, dolor sit amet. consectetur adipisicing elit; sed do eiusmod tempor. incididunt ut labore:'
</snippet></ROW><ROW><id>17124446</id><snippet>4</snippet></ROW><ROW><id>17124446</id><snippet>&gt;&gt;&gt; re.match(r'(?:[^.:;]+[.:;]){4}', text).group()
'Lorem ipsum, dolor sit amet. consectetur adipisicing elit; sed do eiusmod tempor. incididunt ut labore:'
</snippet></ROW><ROW><id>17124746</id><snippet>cursor.execute()</snippet></ROW><ROW><id>17124746</id><snippet>== 1</snippet></ROW><ROW><id>17124746</id><snippet>True</snippet></ROW><ROW><id>17124746</id><snippet>None</snippet></ROW><ROW><id>17124746</id><snippet>cursor.execute('update submission set status="Assessing..." where sid=%s', (record[0],))
if cursor.rowcount == 1:
</snippet></ROW><ROW><id>17125014</id><snippet>import  wx
import  wx.grid as  gridlib

#---------------------------------------------------------------------------

class NewEnterHandlingGrid(gridlib.Grid):
    def __init__(self, parent, log):
        gridlib.Grid.__init__(self, parent, -1)
        self.log = log

        self.CreateGrid(20, 6)

        self.SetCellValue(0, 0, "Enter moves to the right")
        self.SetCellValue(0, 5, "Enter wraps to next row")
        self.SetColSize(0, 150)
        self.SetColSize(5, 150)

        self.Bind(wx.EVT_KEY_DOWN, self.OnKeyDown)


    def OnKeyDown(self, evt):
        if evt.GetKeyCode() != wx.WXK_RETURN:
            evt.Skip()
            return

        if evt.ControlDown():   # the edit control needs this key
            evt.Skip()
            return

        self.DisableCellEditControl()
        success = self.MoveCursorRight(evt.ShiftDown())

        if not success:
            newRow = self.GetGridCursorRow() + 1

            if newRow &lt; self.GetTable().GetNumberRows():
                self.SetGridCursor(newRow, 0)
                self.MakeCellVisible(newRow, 0)
            else:
                # this would be a good place to add a new row if your app
                # needs to do that
                pass


#---------------------------------------------------------------------------

class TestFrame(wx.Frame):
    def __init__(self, parent, log):
        wx.Frame.__init__(self, parent, -1, "Simple Grid Demo", size=(640,480))
        grid = NewEnterHandlingGrid(self, log)



#---------------------------------------------------------------------------

if __name__ == '__main__':
    import sys
    app = wx.App()
    frame = TestFrame(None, sys.stdout)
    frame.Show(True)
    app.MainLoop()


#---------------------------------------------------------------------------
</snippet></ROW><ROW><id>17125113</id><snippet>cv2.LUT</snippet></ROW><ROW><id>17125135</id><snippet>&gt;&gt;&gt; s = re.search(r".*\/(app.*)", "/home/python/app/index.html")
&gt;&gt;&gt; s.groups()[0]
'app/index.html'
</snippet></ROW><ROW><id>17125220</id><snippet>&gt;&gt;&gt; import random, pprint
&gt;&gt;&gt; all_lists = [[4, [14, 13, 12, 11, 10]],
...              [4, [13, 12, 11, 10, 9]],
...              [4, [5, 4, 3, 2, 1]],
...              [3, [14, 14, 14, 13, 1]],
...              [3, [14, 14, 14, 12, 11]],
...              [2, [14, 14, 13, 13, 12]],
...              [1, [14, 14, 13, 12, 11]],
...              [0, [14, 13, 12, 11, 9]]]
&gt;&gt;&gt; random.shuffle(all_lists)
&gt;&gt;&gt; pprint.pprint(all_lists)
[[2, [14, 14, 13, 13, 12]],
 [4, [5, 4, 3, 2, 1]],
 [4, [13, 12, 11, 10, 9]],
 [3, [14, 14, 14, 12, 11]],
 [1, [14, 14, 13, 12, 11]],
 [4, [14, 13, 12, 11, 10]],
 [3, [14, 14, 14, 13, 1]],
 [0, [14, 13, 12, 11, 9]]]
&gt;&gt;&gt; all_lists.sort(reverse=True)
&gt;&gt;&gt; pprint.pprint(all_lists)
[[4, [14, 13, 12, 11, 10]],
 [4, [13, 12, 11, 10, 9]],
 [4, [5, 4, 3, 2, 1]],
 [3, [14, 14, 14, 13, 1]],
 [3, [14, 14, 14, 12, 11]],
 [2, [14, 14, 13, 13, 12]],
 [1, [14, 14, 13, 12, 11]],
 [0, [14, 13, 12, 11, 9]]]
</snippet></ROW><ROW><id>17125220</id><snippet>all_lists[0]</snippet></ROW><ROW><id>17125220</id><snippet>my_dict = {1: [2, [14, 14, 13, 13, 12]],
           2: [4, [5, 4, 3, 2, 1]],
           3: [4, [13, 12, 11, 10, 9]],
           4: [3, [14, 14, 14, 12, 11]],
           5: [1, [14, 14, 13, 12, 11]],
           6: [4, [14, 13, 12, 11, 10]],
           7: [3, [14, 14, 14, 13, 1]],
           8: [0, [14, 13, 12, 11, 9]]}

key = max(my_dict.iteritems(), key=lambda x: x[1])[0]
print 'The largest list has key: %r' % key
</snippet></ROW><ROW><id>17125220</id><snippet>The largest list has key: 6
</snippet></ROW><ROW><id>17125251</id><snippet>randrange()</snippet></ROW><ROW><id>17125251</id><snippet>a = random.randrange(1 &lt;&lt; 127, 1 &lt;&lt; 128)
</snippet></ROW><ROW><id>17125251</id><snippet>1 &lt;&lt; 127</snippet></ROW><ROW><id>17125251</id><snippet>a = random.getrandbits(127) + (1 &lt;&lt; 127)
</snippet></ROW><ROW><id>17125251</id><snippet>getrandbits()</snippet></ROW><ROW><id>17125251</id><snippet>format()</snippet></ROW><ROW><id>17125251</id><snippet>&gt;&gt;&gt; format(random.getrandbits(8), '08b')
'00011110'
&gt;&gt;&gt; format(random.getrandbits(8), '08b')
'01000010'
&gt;&gt;&gt; format(random.getrandbits(8), '08b')
'00110010'
&gt;&gt;&gt; format(random.getrandbits(8), '08b')
'10101010'
&gt;&gt;&gt; format(random.getrandbits(8), '08b')
'10000110'
</snippet></ROW><ROW><id>17125251</id><snippet>0</snippet></ROW><ROW><id>17125251</id><snippet>&gt;&gt;&gt; format(random.getrandbits(7) + (1 &lt;&lt; 8), '08b')
'100010110'
&gt;&gt;&gt; format(random.getrandbits(7) + (1 &lt;&lt; 8), '08b')
'101111101'
&gt;&gt;&gt; format(random.getrandbits(7) + (1 &lt;&lt; 8), '08b')
'101000111'
&gt;&gt;&gt; format(random.getrandbits(7) + (1 &lt;&lt; 8), '08b')
'101011111'
</snippet></ROW><ROW><id>17125558</id><snippet>{% include "entry_table/cell.html" with data_items = data_fields class="entry_table_title" only%}
</snippet></ROW><ROW><id>17125558</id><snippet>{% include "entry_table/cell.html" with data_items=data_fields class="entry_table_title" only%}
</snippet></ROW><ROW><id>17125715</id><snippet>LOAD DATA INFILE '/tmp/data/stuff.csv' INTO TABLE YOUR_TABLE_HERE
</snippet></ROW><ROW><id>17125760</id><snippet>list</snippet></ROW><ROW><id>17125760</id><snippet>list(df1["tweet"])
</snippet></ROW><ROW><id>17125818</id><snippet>__init__.py</snippet></ROW><ROW><id>17125828</id><snippet>getInStockItems()</snippet></ROW><ROW><id>17125828</id><snippet>yield</snippet></ROW><ROW><id>17125828</id><snippet>yield</snippet></ROW><ROW><id>17125828</id><snippet>expression_list</snippet></ROW><ROW><id>17125828</id><snippet>dataset = getInStockItems(c)</snippet></ROW><ROW><id>17125828</id><snippet>insertNewDataInDatabase()</snippet></ROW><ROW><id>17125828</id><snippet>for</snippet></ROW><ROW><id>17125828</id><snippet>generator.next()</snippet></ROW><ROW><id>17125828</id><snippet>for each in items:</snippet></ROW><ROW><id>17125828</id><snippet>getInStockItems()</snippet></ROW><ROW><id>17125828</id><snippet>.next()</snippet></ROW><ROW><id>17125828</id><snippet>yield</snippet></ROW><ROW><id>17125828</id><snippet>i[0]</snippet></ROW><ROW><id>17125828</id><snippet>for</snippet></ROW><ROW><id>17125900</id><snippet>''.join()</snippet></ROW><ROW><id>17125900</id><snippet>.lower()</snippet></ROW><ROW><id>17125900</id><snippet>with open('/Users/kyle/Documents/english words.txt') as word_file:
    english_words = set(word.strip().lower() for word in word_file)

for p1 in itertools.combinations('abcdefghijklmnopqrstuvwxyz', 4):
    word = ''.join(p1)
    print '{} is {}'.format(word, word in english_words)
</snippet></ROW><ROW><id>17125900</id><snippet>with open('/Users/kyle/Documents/english words.txt') as word_file:
    english_words = set(word.strip().lower() for word in word_file if len(word.strip()) == 4)
</snippet></ROW><ROW><id>17125929</id><snippet>obj=stack()
</snippet></ROW><ROW><id>17125929</id><snippet>obj.push(3)
"""adds number 3 to your stack"""

obj.pop()
"""returns last item from your stack that was inserted into it and deletes it from the stack (in this case 3)"""

obj.length()
"""returns length of your stack, now it is 0 but if we didn't perform obj.pop() that would be 1"""
</snippet></ROW><ROW><id>17126015</id><snippet>self.labelText = 'change the value'
</snippet></ROW><ROW><id>17126015</id><snippet>self.depositLabel['text'] = 'change the value'
</snippet></ROW><ROW><id>17126015</id><snippet>self.depositLabel.config(text='change the value')
</snippet></ROW><ROW><id>17126038</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>17126038</id><snippet>from operator import itemgetter
array = range(1, 12)
indices = itemgetter(0, 3, 10)
print indices(array)
# (1, 4, 11)
</snippet></ROW><ROW><id>17126038</id><snippet>print ' '.join(map(str, indices(array)))
# 1 4 11
</snippet></ROW><ROW><id>17126073</id><snippet>argdict = {args[i + 1]: args[i] for i in xrange(0, len(args), 2)}
</snippet></ROW><ROW><id>17126073</id><snippet>argparse</snippet></ROW><ROW><id>17126137</id><snippet>def deleteContent(pfile):
    pfile.seek(0)
    pfile.truncate()
</snippet></ROW><ROW><id>17126137</id><snippet>def deleteContent(fd):
    os.ftruncate(fd, 0)
    os.lseek(fd, 0, os.SEEK_SET)
</snippet></ROW><ROW><id>17126137</id><snippet>def deleteContent(fName):
    with open(fName, "w"):
        pass
</snippet></ROW><ROW><id>17126336</id><snippet>install: /usr/local/include/geos/algorithm/locate/IndexedPointInAreaLocator.h: Permission denied</snippet></ROW><ROW><id>17126336</id><snippet>/usr/local</snippet></ROW><ROW><id>17126336</id><snippet>sudo</snippet></ROW><ROW><id>17126336</id><snippet>sudo make install
</snippet></ROW><ROW><id>17126535</id><snippet>In [11]: g = df.groupby('merge_key')

In [12]: min_dists = g.distance.apply(lambda x: x.abs().idxmin())

In [13]: min_dists
Out[13]:
merge_key
0            0
1            4
2            8
dtype: int64

In [14]: df.iloc[min_dists]
Out[14]:
                  date  merge_key              jd  var2                index  distance
0  2010-01-01 00:00:00          0  2455197.500000     0  2010-01-01 00:00:00         0
4  2010-01-01 00:24:00          1  2455197.517361     1  2010-01-01 00:25:00        60
8  2010-01-01 00:48:00          2  2455197.534722     2  2010-01-01 00:50:00       120
</snippet></ROW><ROW><id>17126654</id><snippet>SDK_PATH ?= $(shell python -c '$(DETECT_SDK)')
</snippet></ROW><ROW><id>17126654</id><snippet>else</snippet></ROW><ROW><id>17126654</id><snippet>break</snippet></ROW><ROW><id>17126654</id><snippet>else</snippet></ROW><ROW><id>17126654</id><snippet>break</snippet></ROW><ROW><id>17126654</id><snippet>print</snippet></ROW><ROW><id>17126654</id><snippet>SDK_PATH_LIST = ../google/appengine /usr/local/google_appengine ../.locally/google_appengine
SDK_PATH ?= $(firstword $(wildcard $(SDK_PATH_LIST:%=%/.)) .)
</snippet></ROW><ROW><id>17126749</id><snippet>$&gt; easy_install pip
$&gt; pip install BeautifulSoup
$&gt; python
&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup as BS
&gt;&gt;&gt; import urllib2
&gt;&gt;&gt; html = urllib2.urlopen(your_site_here)
&gt;&gt;&gt; soup = BS(html)
&gt;&gt;&gt; elem = soup.findAll('a', {'title': 'title here'})
&gt;&gt;&gt; elem[0].text
</snippet></ROW><ROW><id>17126946</id><snippet>VS110COMNTOOLS</snippet></ROW><ROW><id>17126946</id><snippet>[...]Microsoft Visual Studio 11.0\Common7\Tools\</snippet></ROW><ROW><id>17126946</id><snippet>[...]Microsoft Visual Studio 11.0\Common7\Tools\</snippet></ROW><ROW><id>17126946</id><snippet>[...]Microsoft Visual Studio 11.0\VC\</snippet></ROW><ROW><id>17126946</id><snippet>VS110</snippet></ROW><ROW><id>17126946</id><snippet>VS100</snippet></ROW><ROW><id>17126946</id><snippet>VS90</snippet></ROW><ROW><id>17126946</id><snippet>VS110</snippet></ROW><ROW><id>17127249</id><snippet>@app.before_request
def f():
    g.db = connect_db()
</snippet></ROW><ROW><id>17127249</id><snippet>app.before_request</snippet></ROW><ROW><id>17127249</id><snippet>def f():
    g.db = connect_db()

f = app.before_request(f)
</snippet></ROW><ROW><id>17127249</id><snippet>app.before_request</snippet></ROW><ROW><id>17127249</id><snippet>f</snippet></ROW><ROW><id>17127249</id><snippet>app.before_request</snippet></ROW><ROW><id>17127249</id><snippet>app.before_request</snippet></ROW><ROW><id>17127249</id><snippet>f</snippet></ROW><ROW><id>17127249</id><snippet>app.before_request</snippet></ROW><ROW><id>17127249</id><snippet>f</snippet></ROW><ROW><id>17127249</id><snippet>def f():
    g.db = connect_db()

app.before_request(f)
</snippet></ROW><ROW><id>17127411</id><snippet>def countup(n):
    if n &gt;= 0:
        countup(n - 1)
        print(n)
</snippet></ROW><ROW><id>17127411</id><snippet>print</snippet></ROW><ROW><id>17127411</id><snippet>n &lt; 0</snippet></ROW><ROW><id>17127411</id><snippet>None</snippet></ROW><ROW><id>17127411</id><snippet>@tail_call_optimized
def countup(N, n=0):
    print(n)
    if n &lt; N:
        countup(N, n + 1)
</snippet></ROW><ROW><id>17127411</id><snippet>countup(5)
=&gt; 0
   1
   2
   3
   4
   5
</snippet></ROW><ROW><id>17127452</id><snippet>command</snippet></ROW><ROW><id>17127452</id><snippet>easygui</snippet></ROW><ROW><id>17127452</id><snippet>filedialog.askopenfilename</snippet></ROW><ROW><id>17127452</id><snippet>from tkinter import *
from tkinter.filedialog import askopenfilename
from tkinter.messagebox import showwarning, showinfo


class App(Frame):
    def __init__(self, master):
        Frame.__init__(self, master)
        self.filename = None
        button1 = Button(self, text="Browse for a file", command=self.askfilename)
        button2 = Button(self, text ="Count the file", command=self.word_count)
        button3 = Button(self, text="Exit", command=master.destroy)
        button1.grid()
        button2.grid()
        button3.grid()
        self.grid()
    def askfilename(self):
        filename = askopenfilename()
        if not filename.endswith(('.txt', '.py', '.java')):
            showwarning('Are you trying to annoy me?', 'How about giving me a TEXT or SOURCE CODE file, genius?')
        else:
            self.filename = filename
    def word_count(self):
        if self.filename:
            with open(self.filename) as f:
                n_lines = 0
                n_words = 0
                for line in f:
                    n_lines += 1
                    n_words += len(line.split())
            showinfo('Result', 'Your file has {} lines, and {} words'.format(n_lines, n_words))
        else:
            showwarning('No file selected', 'Select a file first')


root = Tk()
root.title("Word Counter")
root.geometry("500x500")
app = App(root)
root.mainloop()
</snippet></ROW><ROW><id>17127598</id><snippet>or</snippet></ROW><ROW><id>17127598</id><snippet>if tag.tag_value_id.tag == u"SNPFlag" or tag.tag_value_id.tag == u"PlanType":
</snippet></ROW><ROW><id>17127598</id><snippet>in</snippet></ROW><ROW><id>17127598</id><snippet>if tag.tag_value_id.tag in {u"SNPFlag", u"PlanType"}:
</snippet></ROW><ROW><id>17127598</id><snippet>|</snippet></ROW><ROW><id>17127598</id><snippet>&gt;&gt;&gt; 10 | 1
11
</snippet></ROW><ROW><id>17127598</id><snippet>&gt;&gt;&gt; {1, 2} | {2, 3}
set([1, 2, 3])
</snippet></ROW><ROW><id>17127598</id><snippet>__or__</snippet></ROW><ROW><id>17127598</id><snippet>.filter()</snippet></ROW><ROW><id>17127636</id><snippet>"C:/folder/temp.shp"</snippet></ROW><ROW><id>17127636</id><snippet>file.path</snippet></ROW><ROW><id>17127636</id><snippet>file.path('c:','folder','temp.shp')</snippet></ROW><ROW><id>17127636</id><snippet>paste</snippet></ROW><ROW><id>17127636</id><snippet>.Rprofile</snippet></ROW><ROW><id>17127636</id><snippet>file.path</snippet></ROW><ROW><id>17127636</id><snippet>.db &lt;- "C:/Dropbox"</snippet></ROW><ROW><id>17127636</id><snippet>.db &lt;- "/home/foo/Dropbox"</snippet></ROW><ROW><id>17127636</id><snippet>mypath &lt;- file.path( .db, "folder", "temp.shp" )
</snippet></ROW><ROW><id>17127834</id><snippet>X</snippet></ROW><ROW><id>17127834</id><snippet>X</snippet></ROW><ROW><id>17127834</id><snippet>.b</snippet></ROW><ROW><id>17127834</id><snippet>a.c</snippet></ROW><ROW><id>17127834</id><snippet>a</snippet></ROW><ROW><id>17127834</id><snippet>__init__.py</snippet></ROW><ROW><id>17127874</id><snippet>file</snippet></ROW><ROW><id>17127874</id><snippet>+</snippet></ROW><ROW><id>17127874</id><snippet>w+</snippet></ROW><ROW><id>17127874</id><snippet>r+</snippet></ROW><ROW><id>17127907</id><snippet>dp</snippet></ROW><ROW><id>17127907</id><snippet>method</snippet></ROW><ROW><id>17127907</id><snippet>circles = cv2.HoughCircles(gray, 1, cv2.cv.CV_HOUGH_GRADIENT, 100)
</snippet></ROW><ROW><id>17127907</id><snippet>circles = cv2.HoughCircles(gray, cv2.cv.CV_HOUGH_GRADIENT, 1, 100)
</snippet></ROW><ROW><id>17128168</id><snippet>/myapp/app.yaml
/myapp/main.py
/myapp/requests/packages/
/myapp/requests/__init__.py
/myapp/requests/adapters.py
etc...
</snippet></ROW><ROW><id>17128168</id><snippet>import webapp2
import requests

class MainHandler(webapp2.RequestHandler):
    def get(self):
        g = requests.get('http://www.google.com')
        self.response.write(g.text)

app = webapp2.WSGIApplication([
    ('/', MainHandler)
], debug=True)
</snippet></ROW><ROW><id>17128216</id><snippet>SpanSelector</snippet></ROW><ROW><id>17128216</id><snippet>def fun_with_spanselector_inside():
    # set useblit True on gtkagg for enhanced performance
    span = SpanSelector(ax, onselect, 'horizontal', useblit=True,
                        rectprops=dict(alpha=0.5, facecolor='red') )
    return span

span = fun_with_spanselector_inside()
</snippet></ROW><ROW><id>17128216</id><snippet>SpanSelector(ax, onselect, 'horizontal', useblit=True,
             rectprops=dict(alpha=0.5, facecolor='red'))
</snippet></ROW><ROW><id>17128344</id><snippet>id = models.AutoField(primary_key=True)</snippet></ROW><ROW><id>17128356</id><snippet>df.ix[df.type==7, ['var1001', 'var1002']] = 0
</snippet></ROW><ROW><id>17128356</id><snippet>df.ix[df.type==7] = 0</snippet></ROW><ROW><id>17128356</id><snippet>columnsToReplace = ['var1001', 'var1002', ...]
df.ix[df.type==8, columnsToReplace] = 0
</snippet></ROW><ROW><id>17128431</id><snippet>select</snippet></ROW><ROW><id>17128431</id><snippet>class View():
    def __init__(self, master, controller):
        self.canvas = Canvas(root)
        self.canvas.pack()
        self.canvas.bind("&lt;Button-1&gt;", controller.select)

class Controller():
    def __init__(self, master):
        self.model = model.Model()
        self.view = view.View(master, self)
    def select(self, event):
        canvas = event.widget
        # ...
</snippet></ROW><ROW><id>17128431</id><snippet>&lt;Button-1&gt;</snippet></ROW><ROW><id>17128431</id><snippet>self.canvas</snippet></ROW><ROW><id>17128758</id><snippet>github3</snippet></ROW><ROW><id>17128758</id><snippet>import github3

for user in github3.iter_all_users():
    user.refresh()
    print user.location
</snippet></ROW><ROW><id>17128758</id><snippet>github3.iter_all_users()</snippet></ROW><ROW><id>17128758</id><snippet>User</snippet></ROW><ROW><id>17128758</id><snippet>.refresh()</snippet></ROW><ROW><id>17128758</id><snippet>/users</snippet></ROW><ROW><id>17128758</id><snippet>github3</snippet></ROW><ROW><id>17128758</id><snippet>for user in github3.iter_all_users(per_page=100):
    user.refresh()
    print user.location
</snippet></ROW><ROW><id>17128893</id><snippet>ip</snippet></ROW><ROW><id>17128893</id><snippet>i</snippet></ROW><ROW><id>17128893</id><snippet>result = connection.connect_ex((ip, i))
</snippet></ROW><ROW><id>17128893</id><snippet>##Print port menu
print "-"*60
print "Specify ports"
print "-"*60
print """
1)Use default list
2)Specify your own port list\n"""
print"-"*60
menu2=raw_input("Please choose an option\n")
##Define default port list
default_list="21, 22,23, 24, 25, 80, 110, 135, 139, 443, 445, 553, 3306, 3389, 8080"

##Set port list to default if option "1" is chosen
if menu2 == "1":
    port_list = default_list

##Request user port list if option "2" is chosen
if menu2 == "2":
    port_list = raw_input("Please enter the ports you would like scanned.\neg. 22, 23\n")

print "Ok, here we go"

port_list = [int(port.strip()) for port in port_list.split(',')]

for port in port_list:
    connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    results = connection.connect_ex((ip, port))
</snippet></ROW><ROW><id>17128920</id><snippet>rtp</snippet></ROW><ROW><id>17128920</id><snippet>plugin</snippet></ROW><ROW><id>17128920</id><snippet>:set rtp+=/tmp/foo</snippet></ROW><ROW><id>17128920</id><snippet>/tmp/foo/plugin/bar.vim</snippet></ROW><ROW><id>17128920</id><snippet>/tmp/foo/plugins/bar.vim</snippet></ROW><ROW><id>17128920</id><snippet>/tmp/foo/bar.vim</snippet></ROW><ROW><id>17128929</id><snippet>collection.Counter()</snippet></ROW><ROW><id>17128929</id><snippet>from collections import Counter

result = Counter()
for d in dicts:
    result |= Counter(d)
</snippet></ROW><ROW><id>17128929</id><snippet>from collections import Counter
from operator import or_

result = reduce(or_, map(Counter, dicts), Counter())
</snippet></ROW><ROW><id>17128929</id><snippet>Counter</snippet></ROW><ROW><id>17128929</id><snippet>|</snippet></ROW><ROW><id>17128929</id><snippet>&amp;</snippet></ROW><ROW><id>17128929</id><snippet>&gt;&gt;&gt; result = Counter()
&gt;&gt;&gt; for d in dicts:
...     result |= Counter(d)
... 
&gt;&gt;&gt; result
Counter({'a': 11, 'c': 10, 'b': 7})
</snippet></ROW><ROW><id>17128929</id><snippet>reduce()</snippet></ROW><ROW><id>17128929</id><snippet>&gt;&gt;&gt; reduce(or_, map(Counter, dicts), Counter())
Counter({'a': 11, 'c': 10, 'b': 7})
</snippet></ROW><ROW><id>17128998</id><snippet>assignCard</snippet></ROW><ROW><id>17128998</id><snippet>global cardLoc</snippet></ROW><ROW><id>17128998</id><snippet>for i in range(NUMCARDS-1):
    if cardLoc[i] == str:
</snippet></ROW><ROW><id>17128998</id><snippet>i</snippet></ROW><ROW><id>17129171</id><snippet>Counter</snippet></ROW><ROW><id>17129171</id><snippet>Counter</snippet></ROW><ROW><id>17129171</id><snippet>__iadd__</snippet></ROW><ROW><id>17129171</id><snippet>__isub__</snippet></ROW><ROW><id>17129171</id><snippet>c = Counter()
for other in list_of_counters:
    c += other
</snippet></ROW><ROW><id>17129233</id><snippet> tcpdump -i eth0 "dst 127.0.0.1 and dst port 8080"
</snippet></ROW><ROW><id>17129249</id><snippet>def flip_vert(picture):
    width = getWidth(picture)
    height = getHeight(picture)

    for y in range(0, height/2):
        for x in range(0, width):
            sourcePixel = getPixel(picture, x, y)
            targetPixel = getPixel(picture, x, height - y - 1)
            color = getColor(sourcePixel)
            setColor(sourcePixel, getColor(targetPixel))
            setColor(targetPixel, color)

    return picture 


def flip_horiz(picture):
    width = getWidth(picture)
    height = getHeight(picture)

    for y in range(0, height):
        for x in range(0, width/2):
            sourcePixel = getPixel(picture, x, y)
            targetPixel = getPixel(picture, width - x - 1, y)
            color = getColor(sourcePixel)
            setColor(sourcePixel, getColor(targetPixel))
            setColor(targetPixel, color)

    return picture 
</snippet></ROW><ROW><id>17129376</id><snippet>def everythird(l):
    i = 0
    ret = []
    while i &lt; len(l):
        ret.append(l[i])
        i += 3
    return ret
</snippet></ROW><ROW><id>17129376</id><snippet>def everythird(l):
    return l[0::3]
</snippet></ROW><ROW><id>17129376</id><snippet>for</snippet></ROW><ROW><id>17129376</id><snippet>def everythird(l):
    ret = []
    for i in range(0, len(l), 3):
        ret.append(l[i])
    return ret
</snippet></ROW><ROW><id>17129376</id><snippet>def everythird(l):
    return [l[i] for i in range(0, len(l), 3)]
</snippet></ROW><ROW><id>17129474</id><snippet>std::vector</snippet></ROW><ROW><id>17129474</id><snippet>std::initializer_list</snippet></ROW><ROW><id>17129474</id><snippet>sameTwoVectors</snippet></ROW><ROW><id>17129474</id><snippet>const</snippet></ROW><ROW><id>17129474</id><snippet>namespace Util
{
    bool sameTwoVectors(
        const std::vector&lt;int&gt;&amp; result,
        const std::vector&lt;int&gt;&amp; expected)
        {
            return result == expected;
        }
}


int main()
{
    std::vector&lt;int&gt; result;

    EXPECT_TRUE(Util::sameTwoVectors(result, {5,2,3,15}));
}
</snippet></ROW><ROW><id>17129474</id><snippet>sameTwoVectors</snippet></ROW><ROW><id>17129474</id><snippet>EXPECT_TRUE</snippet></ROW><ROW><id>17129474</id><snippet>std::vector&lt;int&gt;</snippet></ROW><ROW><id>17129474</id><snippet>EXPECT_TRUE(result == std::vector&lt;int&gt;({5,2,3,15}));
</snippet></ROW><ROW><id>17129517</id><snippet>&gt;&gt;&gt; def everythird(l):
        return l[0::3]

&gt;&gt;&gt; x = [[1], [2], [3]]
&gt;&gt;&gt; y = everythird(x)
&gt;&gt;&gt; y[0].append(1)
&gt;&gt;&gt; x
[[1, 1], [2], [3]]
</snippet></ROW><ROW><id>17129517</id><snippet>copy.deepcopy</snippet></ROW><ROW><id>17129517</id><snippet>list</snippet></ROW><ROW><id>17129517</id><snippet>.append</snippet></ROW><ROW><id>17129517</id><snippet>list.copy</snippet></ROW><ROW><id>17129517</id><snippet>seq[:]</snippet></ROW><ROW><id>17129517</id><snippet>list(seq)</snippet></ROW><ROW><id>17129605</id><snippet>app.route('/')(api.view_home())</snippet></ROW><ROW><id>17129605</id><snippet>app.add_url_rule()</snippet></ROW><ROW><id>17129605</id><snippet>@app.route()</snippet></ROW><ROW><id>17129605</id><snippet>def route(self, rule, **options):
    def decorator(f):
        endpoint = options.pop('endpoint', None)
        self.add_url_rule(rule, endpoint, f, **options)
        return f
    return decorator
</snippet></ROW><ROW><id>17129605</id><snippet>## urls.py

from application import app, views

app.add_url_rule('/', 'home', view_func=views.home)
app.add_url_rule('/user/&lt;username&gt;', 'user', view_func=views.user)
</snippet></ROW><ROW><id>17129605</id><snippet>## views.py

from flask import request, render_template, flash, url_for, redirect

def home():
    render_template('home.html')

def user(username):
    return render_template('user.html', username=username)
</snippet></ROW><ROW><id>17129605</id><snippet>urls</snippet></ROW><ROW><id>17129605</id><snippet>import urls</snippet></ROW><ROW><id>17129605</id><snippet>__init__.py</snippet></ROW><ROW><id>17129605</id><snippet>app.run()</snippet></ROW><ROW><id>17129605</id><snippet>|-- app/
|-- __init__.py (where app/application is created and ran)
|-- api/
|   |-- urls.py
|   `-- views.py
</snippet></ROW><ROW><id>17129605</id><snippet>from application import app

import api.views

app.add_url_rule('/call/&lt;call&gt;', 'call', view_func=api.views.call)
</snippet></ROW><ROW><id>17129605</id><snippet>from flask import render_template

def call(call):
    # do api call code.
</snippet></ROW><ROW><id>17129611</id><snippet>tree</snippet></ROW><ROW><id>17129611</id><snippet>logical_devid</snippet></ROW><ROW><id>17129611</id><snippet>d</snippet></ROW><ROW><id>17129611</id><snippet>logical_devid</snippet></ROW><ROW><id>17129611</id><snippet>old_devid</snippet></ROW><ROW><id>17129611</id><snippet>new_devid = d.get(old_devid)
</snippet></ROW><ROW><id>17129611</id><snippet>new_devid is null</snippet></ROW><ROW><id>17129611</id><snippet>new_devid</snippet></ROW><ROW><id>17129611</id><snippet>logical_devid</snippet></ROW><ROW><id>17129854</id><snippet>if</snippet></ROW><ROW><id>17129854</id><snippet> if repeat == "y" or "yes":
    print "OK.\n"
    PygLatin()
</snippet></ROW><ROW><id>17129854</id><snippet>True</snippet></ROW><ROW><id>17129854</id><snippet>repeat</snippet></ROW><ROW><id>17129854</id><snippet>"Yes"</snippet></ROW><ROW><id>17129854</id><snippet>True</snippet></ROW><ROW><id>17129854</id><snippet>or</snippet></ROW><ROW><id>17129854</id><snippet>True</snippet></ROW><ROW><id>17129854</id><snippet>if repeat == "y" or repeat == "yes":
    print "OK.\n"
    PygLatin()
</snippet></ROW><ROW><id>17129854</id><snippet>if repeat in ("y","yes"):
    print "OK.\n"
    PygLatin()
</snippet></ROW><ROW><id>17129854</id><snippet>else</snippet></ROW><ROW><id>17129978</id><snippet>t</snippet></ROW><ROW><id>17129978</id><snippet>t = t + " " + s[i+1]</snippet></ROW><ROW><id>17129978</id><snippet>t</snippet></ROW><ROW><id>17129978</id><snippet>s</snippet></ROW><ROW><id>17129978</id><snippet>t</snippet></ROW><ROW><id>17129978</id><snippet>s[i + 1] + " "</snippet></ROW><ROW><id>17129978</id><snippet>s[i+1] + " "</snippet></ROW><ROW><id>17129978</id><snippet>s</snippet></ROW><ROW><id>17129978</id><snippet>s[i+1] += " "</snippet></ROW><ROW><id>17129978</id><snippet>def spaced_words(s):
    result = s[0]           # start with the first letter of the string
    for c in s[1:]:         # iterate over the rest of the string
        result += " " + c   # add a space and the next character to the result
    return result           # when the loop is done, return the result string
</snippet></ROW><ROW><id>17129978</id><snippet>+=</snippet></ROW><ROW><id>17129978</id><snippet>result = result + otherstuff</snippet></ROW><ROW><id>17129978</id><snippet>result</snippet></ROW><ROW><id>17129978</id><snippet>str.join</snippet></ROW><ROW><id>17129978</id><snippet>def spaced_word(s):
    return " ".join(s)
</snippet></ROW><ROW><id>17130042</id><snippet>&gt;&gt;&gt; hxs.select('//*[@id="league-table-data"]/table/tr/td/a/text()').extract() 
[u'Manchester Utd', u'Manchester City', u'Chelsea', u'Arsenal', u'Tottenham', u'Everton', u'Liverpool', u'West Bromwich', u'Swansea City', u'West Ham Utd', u'Norwich City', u'Fulham', u'Stoke City', u'Southampton', u'Aston Villa', u'Newcastle Utd', u'Sunderland', u'Wigan Athletic', u'Reading', u'QP Rangers']
</snippet></ROW><ROW><id>17130089</id><snippet>is</snippet></ROW><ROW><id>17130203</id><snippet>ax.set_xticks(positions)</snippet></ROW><ROW><id>17130203</id><snippet>ax.set_yticks(positions)</snippet></ROW><ROW><id>17130203</id><snippet>import matplotlib.pyplot as plt

fig, ax = plt.subplots()
ax.set_xticks([0.15, 0.68, 0.97])
ax.set_yticks([0.2, 0.55, 0.76])
plt.show()
</snippet></ROW><ROW><id>17130447</id><snippet>s = 'Lecture/NNP/B-NP/O delivered/VBD/B-VP/O at/IN/B-PP/B-PNP the/DT/B-NP/I-PNP UNESCO/NNP/I-NP/I-PNP House/NNP/I-NP/I-PNP in/IN/B-PP/B-PNP Paris/NNP-LOC/B-NP/I-PNP'

re.findall(r'(\S+)/NNP/', s)
=&gt; ['Lecture', 'UNESCO', 'House']
</snippet></ROW><ROW><id>17130460</id><snippet>result = [a_func(elem) for elem in a_list]</snippet></ROW><ROW><id>17130460</id><snippet>result = []
for elem in a_list:
    result.append(a_func(elem))
</snippet></ROW><ROW><id>17130460</id><snippet>result = []
for line in content:
    result.append(line.replace("\n",""))
</snippet></ROW><ROW><id>17130732</id><snippet>raw_input</snippet></ROW><ROW><id>17130732</id><snippet>float()</snippet></ROW><ROW><id>17130732</id><snippet>float(raw_input("Current Weight (lb): "))
</snippet></ROW><ROW><id>17130747</id><snippet>import matplotlib.pyplot as plt
def add_lines(ax=None):
    ax = ax or plt.gca()
    return ax.plot([1, 2], [1, 2])
</snippet></ROW><ROW><id>17130750</id><snippet>__import__(name)</snippet></ROW><ROW><id>17130750</id><snippet>$ python manage.py shell

 Python ... blah blah
 ...

&gt; import polls.urls
</snippet></ROW><ROW><id>17131147</id><snippet>.find_next_sibling()</snippet></ROW><ROW><id>17131147</id><snippet>H2</snippet></ROW><ROW><id>17131147</id><snippet>h2_details = soup.find('h2', text='Case details')

table = h2_details.find_next_sibling('table')

details = {}
for row in table.find_all('tr'):
    cells = row.find_all('td', limit=2)
    details[cells[0].string] = cells[1].string
</snippet></ROW><ROW><id>17131147</id><snippet>.string</snippet></ROW><ROW><id>17131147</id><snippet>''.join(cells[0].stripped_strings)</snippet></ROW><ROW><id>17131147</id><snippet>''.join(cells[1].stripped_strings)</snippet></ROW><ROW><id>17131252</id><snippet>function cmp_key($set, $list) {
  return count(array_intersect($set, $list));
}

// This iterates over all lists and compares them with some
// original list, here named $set for consistency with the other example.
$largest = NULL;
foreach ($lists as $list) {
  if (!isset($largest)) {
    $largest = array('list' =&gt; $list, 'count' =&gt; cmp_key($set, $list));
  }
  else {
    $count = cmp_key($set, $list);
    if ($count &gt; $largest['count']) {
      $largest = array('list' =&gt; $list, 'count' =&gt; $count);
    }
  }
}
$list_with_biggest_intersection = $largest['list'];
</snippet></ROW><ROW><id>17131542</id><snippet>def initialize_one(seq, n):
    if not seq:
        seq[:] = [1] * n
</snippet></ROW><ROW><id>17131750</id><snippet>__str__</snippet></ROW><ROW><id>17131750</id><snippet>import numpy as np

def bmatrix(a):
    """Returns a LaTeX bmatrix

    :a: numpy array
    :returns: LaTeX bmatrix as a string
    """
    if len(a.shape) &gt; 2:
        raise ValueError('bmatrix can at most display two dimensions')
    lines = str(a).replace('[', '').replace(']', '').splitlines()
    rv = [r'\begin{bmatrix}']
    rv += ['  ' + ' &amp; '.join(l.split()) + r'\\' for l in lines]
    rv +=  [r'\end{bmatrix}']
    return '\n'.join(rv)

A = np.array([[12, 5, 2], [20, 4, 8], [ 2, 4, 3], [ 7, 1, 10]])
print bmatrix(A) + '\n'

B = np.array([[1.2], [3.7], [0.2]])
print bmatrix(B) + '\n'

C = np.array([1.2, 9.3, 0.6, -2.1])
print bmatrix(C) + '\n'
</snippet></ROW><ROW><id>17131750</id><snippet>\begin{bmatrix}
  12 &amp; 5 &amp; 2\\
  20 &amp; 4 &amp; 8\\
  2 &amp; 4 &amp; 3\\
  7 &amp; 1 &amp; 10\\
\end{bmatrix}

\begin{bmatrix}
  1.2\\
  3.7\\
  0.2\\
\end{bmatrix}

\begin{bmatrix}
  1.2 &amp; 9.3 &amp; 0.6 &amp; -2.1\\
\end{bmatrix}
</snippet></ROW><ROW><id>17131803</id><snippet>read_csv</snippet></ROW><ROW><id>17131803</id><snippet>In [11]: pd.read_csv(file_name, sep='\[\'|\'\"\]|[ \'\"]*', header=None)
Out[11]:
    0     1      2       3        4          5        6   7
0 NaN  NAME  RA_I1  DEC_I1  Mean_I1  Median_I1  Mode_I1 NaN
</snippet></ROW><ROW><id>17131803</id><snippet>sep = ('\[\'  # each line startswith ['  (the | means or)
       '|\'\"\]'  # endswith '"] (at least the one I had)
       '|[ \'\"]+')  # this is the actual delimiter, the + means at least one, so it's a string of ", ' and space in any order.
</snippet></ROW><ROW><id>17131803</id><snippet>to_csv</snippet></ROW><ROW><id>17131965</id><snippet>list.index</snippet></ROW><ROW><id>17131965</id><snippet>enumerate()</snippet></ROW><ROW><id>17131965</id><snippet>&gt;&gt;&gt; l = [[0,0,0],[0,1,1],[1,0,0]]
for i, x in enumerate(l):
    for j, y in enumerate(x):
        print i,j,'--&gt;',y
...         
0 0 --&gt; 0
0 1 --&gt; 0
0 2 --&gt; 0
1 0 --&gt; 0
1 1 --&gt; 1
1 2 --&gt; 1
2 0 --&gt; 1
2 1 --&gt; 0
2 2 --&gt; 0
</snippet></ROW><ROW><id>17131965</id><snippet>enumerate</snippet></ROW><ROW><id>17131965</id><snippet>&gt;&gt;&gt; print enumerate.__doc__
enumerate(iterable[, start]) -&gt; iterator for index, value of iterable

Return an enumerate object.  iterable must be another object that supports
iteration.  The enumerate object yields pairs containing a count (from
start, which defaults to zero) and a value yielded by the iterable argument.
enumerate is useful for obtaining an indexed list:
    (0, seq[0]), (1, seq[1]), (2, seq[2]), ...
</snippet></ROW><ROW><id>17132012</id><snippet>QApplication::processEvents()</snippet></ROW><ROW><id>17132012</id><snippet>from PySide import QtGui, QtCore
import time

class MyWidget(QtGui.QWidget):
  def __init__(self):
    QtGui.QWidget.__init__(self)
    layout = QtGui.QVBoxLayout(self)
    self.label = QtGui.QLabel()
    self.button_start = QtGui.QPushButton("Start")
    self.button_stop = QtGui.QPushButton("Stop")
    self.button_stop.setEnabled(False)
    self.button_pause = QtGui.QPushButton("Pause")
    self.button_pause.setEnabled(False)
    layout.addWidget(self.label)
    layout.addWidget(self.button_start)
    layout.addWidget(self.button_stop)
    layout.addWidget(self.button_pause)
    self.button_start.clicked.connect(self.processing)
    self.button_pause.clicked.connect(self.pause)
    self.button_stop.clicked.connect(self.stop)

  def processing(self):
    self.button_start.setEnabled(False)
    self.button_stop.setEnabled(True)
    self.button_pause.setEnabled(True)
    self.stop_requested = False
    self.paused = False
    i = 0
    while not self.stop_requested:
      QtGui.QApplication.processEvents()
      if self.paused:
        time.sleep(0.1)
      else:
        i += 1
        self.label.setText(unicode(i))
    self.button_start.setEnabled(True)
    self.button_stop.setEnabled(False)
    self.button_pause.setEnabled(False)

  def pause(self):
    self.paused = not self.paused

  def stop(self):
    self.stop_requested = True

if __name__ == '__main__':
    import sys
    app = QtGui.QApplication(sys.argv)
    widget = MyWidget()
    widget.show()
    sys.exit(app.exec_())  
</snippet></ROW><ROW><id>17132191</id><snippet>import re

s = "Lowercase Words WITH UPPERCASE CONTAINING 2 AND ALSO ', AND MANY MORE CHARACTERS"
match = re.match(r"(([^\s]*[a-z]+[^\s]*\s+)+)([^a-z]+)", s)
if match:
    lowercase = match.group(1)
    uppercase = match.group(3)
</snippet></ROW><ROW><id>17132191</id><snippet>a-z</snippet></ROW><ROW><id>17132191</id><snippet>"LowerCase"</snippet></ROW><ROW><id>17132191</id><snippet>[a-z]+</snippet></ROW><ROW><id>17132191</id><snippet>[^\s]</snippet></ROW><ROW><id>17132191</id><snippet>[^\s]*[a-z]+[^\s]*</snippet></ROW><ROW><id>17132191</id><snippet>([^\s]*[a-z]+[^\s]*\s+)+</snippet></ROW><ROW><id>17132191</id><snippet>[^a-z]+</snippet></ROW><ROW><id>17132191</id><snippet>(([^\s]*[a-z]+[^\s]*\s+)+)</snippet></ROW><ROW><id>17132191</id><snippet>([^a-z]+)</snippet></ROW><ROW><id>17132370</id><snippet>str.replace</snippet></ROW><ROW><id>17132370</id><snippet>doc = doc.replace("&gt;&gt;&gt; ","")      # assign the new string back to `doc`
doc = doc.replace("...     ","")
</snippet></ROW><ROW><id>17132370</id><snippet>str.replace</snippet></ROW><ROW><id>17132370</id><snippet>&gt;&gt;&gt; print str.replace.__doc__
S.replace(old, new[, count]) -&gt; string
</snippet></ROW><ROW><id>17132409</id><snippet>             o------------o
             |            |  DT.datetime.utcfromtimestamp (*)
             |            |&lt;-----------------------------------o
             |            |                                    |
             |  datetime  |                                    |
             |            |  DT.datetime.fromtimestamp         |
             |            |&lt;----------------------------o      |
             |            |                             |      |
             o------------o                             |      |
                |   ^                                   |      |
     .timetuple |   |                                   |      |
  .utctimetuple |   | DT.datetime(*tup[:6])             |      |
                v   |                                   |      |
             o------------o                          o------------o
             |            |-- calendar.timegm (*) --&gt;|            |
             |            |                          |            |
             |            |---------- time.mktime --&gt;|            |
             |  timetuple |                          |  timestamp |
             |            |&lt;-- time.localtime -------|            |
             |            |                          |            |
             |            |&lt;-- time.gmtime (*)-------|            |
             o------------o                          o------------o

(*) Interprets its input as being in UTC and returns output in UTC
</snippet></ROW><ROW><id>17132409</id><snippet>utc_now</snippet></ROW><ROW><id>17132409</id><snippet>seconds = calendar.timegm(utc_date.utctimetuple())
</snippet></ROW><ROW><id>17132409</id><snippet>DT.datetime.utcfromtimestamp(seconds)
</snippet></ROW><ROW><id>17132409</id><snippet>import datetime as DT
import pytz
import calendar
eastern = pytz.timezone("US/Eastern")
utc = pytz.utc
now = DT.datetime(2013, 6, 16, 10, 0, 0)
local_now = eastern.localize(now)
utc_now = local_now.astimezone(utc)
seconds = calendar.timegm(utc_now.utctimetuple())

print(seconds)
# 1371391200

utc_then = utc.localize(DT.datetime.utcfromtimestamp(seconds))
local_then = utc_then.astimezone(eastern)

print utc_now, utc_then
# 2013-06-16 14:00:00+00:00 2013-06-16 14:00:00+00:00
print local_now, local_then
# 2013-06-16 10:00:00-04:00 2013-06-16 10:00:00-04:00
</snippet></ROW><ROW><id>17132409</id><snippet>timetuple()</snippet></ROW><ROW><id>17132409</id><snippet>utctimetuple()</snippet></ROW><ROW><id>17132481</id><snippet>labels = dialog_info.get_children()[0].get_children()[0].get_children()[1].get_children()</snippet></ROW><ROW><id>17132481</id><snippet>#!/usr/bin/env python3

from gi.repository import Gtk

class Handler:
    def __init__(self, builder):
        self.builder = builder
        self.window = builder.get_object('window1')

    def run(self):
        self.window.show_all()
        Gtk.main()

    def on_app_exit(self, widget, event=None):
        Gtk.main_quit()

    def on_button_show_clicked(self, btn):
        dialog_info = self.builder.get_object('messagedialog_info')
        entry = self.builder.get_object('entry1')
        labels = dialog_info.get_children()[0].get_children()[0].get_children()[1].get_children()
        print(labels)
        # labels[0] is the primary label.
        # labels[1] is the seconary label.
        labels[0].set_text(entry.get_text())

        response = dialog_info.run()
        print('response: ', response)
        dialog_info.hide()


def main():
    builder = Gtk.Builder()
    builder.add_from_file('example.glade')
    handler = Handler(builder)
    builder.connect_signals(handler)
    handler.run()

if __name__ == '__main__':
    main()
</snippet></ROW><ROW><id>17132481</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;interface&gt;
  &lt;!-- interface-requires gtk+ 3.0 --&gt;
  &lt;object class="GtkMessageDialog" id="messagedialog_info"&gt;
    &lt;property name="can_focus"&gt;False&lt;/property&gt;
    &lt;property name="border_width"&gt;5&lt;/property&gt;
    &lt;property name="type_hint"&gt;dialog&lt;/property&gt;
    &lt;property name="skip_taskbar_hint"&gt;True&lt;/property&gt;
    &lt;property name="buttons"&gt;close&lt;/property&gt;
    &lt;property name="text" translatable="yes"&gt;hello text&lt;/property&gt;
    &lt;property name="secondary_text" translatable="yes"&gt;hello secondary text.&lt;/property&gt;
    &lt;child internal-child="vbox"&gt;
      &lt;object class="GtkBox" id="messagedialog-vbox"&gt;
        &lt;property name="can_focus"&gt;False&lt;/property&gt;
        &lt;property name="orientation"&gt;vertical&lt;/property&gt;
        &lt;property name="spacing"&gt;2&lt;/property&gt;
        &lt;child internal-child="action_area"&gt;
          &lt;object class="GtkButtonBox" id="messagedialog-action_area"&gt;
            &lt;property name="can_focus"&gt;False&lt;/property&gt;
            &lt;property name="layout_style"&gt;end&lt;/property&gt;
            &lt;child&gt;
              &lt;placeholder/&gt;
            &lt;/child&gt;
            &lt;child&gt;
              &lt;placeholder/&gt;
            &lt;/child&gt;
          &lt;/object&gt;
          &lt;packing&gt;
            &lt;property name="expand"&gt;False&lt;/property&gt;
            &lt;property name="fill"&gt;True&lt;/property&gt;
            &lt;property name="pack_type"&gt;end&lt;/property&gt;
            &lt;property name="position"&gt;0&lt;/property&gt;
          &lt;/packing&gt;
        &lt;/child&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
  &lt;object class="GtkWindow" id="window1"&gt;
    &lt;property name="can_focus"&gt;False&lt;/property&gt;
    &lt;property name="border_width"&gt;5&lt;/property&gt;
    &lt;signal name="delete-event" handler="on_app_exit" swapped="no"/&gt;
    &lt;child&gt;
      &lt;object class="GtkBox" id="box1"&gt;
        &lt;property name="visible"&gt;True&lt;/property&gt;
        &lt;property name="can_focus"&gt;False&lt;/property&gt;
        &lt;property name="valign"&gt;center&lt;/property&gt;
        &lt;property name="spacing"&gt;5&lt;/property&gt;
        &lt;child&gt;
          &lt;object class="GtkEntry" id="entry1"&gt;
            &lt;property name="visible"&gt;True&lt;/property&gt;
            &lt;property name="can_focus"&gt;True&lt;/property&gt;
            &lt;property name="invisible_char"&gt;●&lt;/property&gt;
          &lt;/object&gt;
          &lt;packing&gt;
            &lt;property name="expand"&gt;True&lt;/property&gt;
            &lt;property name="fill"&gt;True&lt;/property&gt;
            &lt;property name="position"&gt;0&lt;/property&gt;
          &lt;/packing&gt;
        &lt;/child&gt;
        &lt;child&gt;
          &lt;object class="GtkButton" id="button_show"&gt;
            &lt;property name="label" translatable="yes"&gt;_Show&lt;/property&gt;
            &lt;property name="use_action_appearance"&gt;False&lt;/property&gt;
            &lt;property name="visible"&gt;True&lt;/property&gt;
            &lt;property name="can_focus"&gt;True&lt;/property&gt;
            &lt;property name="receives_default"&gt;True&lt;/property&gt;
            &lt;property name="use_action_appearance"&gt;False&lt;/property&gt;
            &lt;property name="use_underline"&gt;True&lt;/property&gt;
            &lt;signal name="clicked" handler="on_button_show_clicked" swapped="no"/&gt;
          &lt;/object&gt;
          &lt;packing&gt;
            &lt;property name="expand"&gt;False&lt;/property&gt;
            &lt;property name="fill"&gt;True&lt;/property&gt;
            &lt;property name="position"&gt;1&lt;/property&gt;
          &lt;/packing&gt;
        &lt;/child&gt;
      &lt;/object&gt;
    &lt;/child&gt;
  &lt;/object&gt;
&lt;/interface&gt;
</snippet></ROW><ROW><id>17132522</id><snippet>import logging.handlers as sh
syslog_hdlr = sh.SysLogHandler(address='/dev/log', facility=sh.SysLogHandler.LOG_DAEMON)
</snippet></ROW><ROW><id>17132522</id><snippet>root_logger.setLevel(logging.DEBUG)
</snippet></ROW><ROW><id>17132522</id><snippet>config</snippet></ROW><ROW><id>17132522</id><snippet>DEBUG</snippet></ROW><ROW><id>17132522</id><snippet>INFO</snippet></ROW><ROW><id>17132522</id><snippet>syslog</snippet></ROW><ROW><id>17132522</id><snippet>import syslog
syslog.syslog(syslog.LOG_ERR, "MY MESSAGE")
</snippet></ROW><ROW><id>17132702</id><snippet>try:
    my_image.save(filepath + ".png")
except KeyError: # cannot save as PNG, save as JPEG then
    my_image.save(filepath + ".jpg")
</snippet></ROW><ROW><id>17132702</id><snippet>&gt;&gt;&gt; import Image
&gt;&gt;&gt; Image.init()
&gt;&gt;&gt; Image.SAVE.keys() # output from my system
['PCX', 'HDF5', 'TIFF', 'BUFR', 'SPIDER', 'JPEG', 'MSP', 'XBM', 'GIF', 'BMP', 'TGA', 'IM', 'GRIB', 'PPM', 'FITS', 'PDF', 'PALM', 'EPS', 'WMF', 'PNG']
</snippet></ROW><ROW><id>17132766</id><snippet>print</snippet></ROW><ROW><id>17132766</id><snippet>print()</snippet></ROW><ROW><id>17132766</id><snippet>print</snippet></ROW><ROW><id>17132766</id><snippet>print "Hello world!"
</snippet></ROW><ROW><id>17132766</id><snippet>print("Hello world!")
</snippet></ROW><ROW><id>17132766</id><snippet>print()</snippet></ROW><ROW><id>17132766</id><snippet>from __future__ import print_function</snippet></ROW><ROW><id>17132766</id><snippet>if o1 =="T"</snippet></ROW><ROW><id>17133049</id><snippet> s.bind('&lt;Button-1&gt;', lambda event: puteventqueue(spinval.get()))
</snippet></ROW><ROW><id>17133196</id><snippet>dict.items()</snippet></ROW><ROW><id>17133196</id><snippet>[(1, [1,2,3,4]), (2, [5,6,7])]
</snippet></ROW><ROW><id>17133196</id><snippet>len(dict.items()[0])</snippet></ROW><ROW><id>17133196</id><snippet>2</snippet></ROW><ROW><id>17133196</id><snippet>len(dict[key])
</snippet></ROW><ROW><id>17133196</id><snippet>str</snippet></ROW><ROW><id>17133196</id><snippet>dict</snippet></ROW><ROW><id>17133196</id><snippet>set</snippet></ROW><ROW><id>17133561</id><snippet>stringvar1</snippet></ROW><ROW><id>17133561</id><snippet>stringvar1 = window2.stringvar1 = tk.StringVar(value='asdf')
</snippet></ROW><ROW><id>17133949</id><snippet>python myapp.py file.txt
</snippet></ROW><ROW><id>17133949</id><snippet>import sys

if __name__ == '__main__':
    filename = sys.argv[1]
    f = open(filename)
</snippet></ROW><ROW><id>17134050</id><snippet>bool</snippet></ROW><ROW><id>17134050</id><snippet>True</snippet></ROW><ROW><id>17134050</id><snippet>print bool("False") # True
print bool("0") # True
</snippet></ROW><ROW><id>17134050</id><snippet>list</snippet></ROW><ROW><id>17134050</id><snippet>set</snippet></ROW><ROW><id>17134050</id><snippet>dict</snippet></ROW><ROW><id>17134050</id><snippet>True</snippet></ROW><ROW><id>17134050</id><snippet>str</snippet></ROW><ROW><id>17134050</id><snippet>s</snippet></ROW><ROW><id>17134050</id><snippet>if s:
  # do something with non-empty string s.
</snippet></ROW><ROW><id>17134050</id><snippet>eval</snippet></ROW><ROW><id>17134050</id><snippet>print eval("False") # False
print eval("0") # 0
print bool(eval("0")) # False
</snippet></ROW><ROW><id>17134129</id><snippet>    def f(x0,x1,x2):
       return x0*x1*x2

    f(x0,x1,x2)
</snippet></ROW><ROW><id>17134162</id><snippet>B</snippet></ROW><ROW><id>17134162</id><snippet>chars = {}
with open("B") as lookupfile:
    for number,line in enumerate(lookupfile):
        chars[line.strip()] = number
</snippet></ROW><ROW><id>17134162</id><snippet>chars</snippet></ROW><ROW><id>17134162</id><snippet>&gt;&gt;&gt; chars
{'t': 1, 'a': 4, 'i': 3, 'h': 0, 's': 2}
</snippet></ROW><ROW><id>17134162</id><snippet>with open("A") as textfile:
    text = textfile.read()
</snippet></ROW><ROW><id>17134162</id><snippet>for char in text:
    if char in chars:
        print("Character {0} found in row {1}".format(char, chars[char]))
</snippet></ROW><ROW><id>17134162</id><snippet>for char in text:
    found = chars.get(char):    # returns None if char isn't a key in chars
    if found:
        print("Character {0} found in row {1}".format(char, found))
</snippet></ROW><ROW><id>17134162</id><snippet>for char in text:
    try:
        print("Character {0} found in row {1}".format(char, chars[char]))
    except KeyError:
        pass
</snippet></ROW><ROW><id>17134191</id><snippet>content = content.encode("utf-8") # translates utf-8 in binary
</snippet></ROW><ROW><id>17134272</id><snippet>regex</snippet></ROW><ROW><id>17134272</id><snippet>str.split</snippet></ROW><ROW><id>17134272</id><snippet>str.join</snippet></ROW><ROW><id>17134272</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; strs = "Hello (Test1 test2) (Hello1 hello2) other_stuff"
&gt;&gt;&gt; [", ".join(x.split()) for x in re.split(r'[()]',strs) if x.strip()]
['Hello', 'Test1, test2', 'Hello1, hello2', 'other_stuff']
</snippet></ROW><ROW><id>17134353</id><snippet>def complex_array_to_rgb(X, theme='dark', rmax=None):
    '''Takes an array of complex number and converts it to an array of [r, g, b],
    where phase gives hue and saturaton/value are given by the absolute value.
    Especially for use with imshow for complex plots.'''
    absmax = rmax or np.abs(X).max()
    Y = np.zeros(X.shape + (3,), dtype='float')
    Y[..., 0] = np.angle(X) / (2 * pi) % 1
    if theme == 'light':
        Y[..., 1] = np.clip(np.abs(X) / absmax, 0, 1)
        Y[..., 2] = 1
    elif theme == 'dark':
        Y[..., 1] = 1
        Y[..., 2] = np.clip(np.abs(X) / absmax, 0, 1)
    Y = matplotlib.colors.hsv_to_rgb(Y)
    return Y
</snippet></ROW><ROW><id>17134663</id><snippet>parentorg = Parentorgs.objects.values_list("pk", flat=True)
contracts = Contracts.objects.filter(parentorg_id__in=parentorg)
</snippet></ROW><ROW><id>17134663</id><snippet>__in</snippet></ROW><ROW><id>17134663</id><snippet>Contracts.objects.all()
</snippet></ROW><ROW><id>17134663</id><snippet>parentorg</snippet></ROW><ROW><id>17134709</id><snippet>self</snippet></ROW><ROW><id>17134709</id><snippet>self</snippet></ROW><ROW><id>17134709</id><snippet>self</snippet></ROW><ROW><id>17134709</id><snippet>Inst</snippet></ROW><ROW><id>17134709</id><snippet>introduce()</snippet></ROW><ROW><id>17134709</id><snippet>class Inst:

    def __init__(self, name):
        self.name = name

    def introduce(self):
        print("Hello, I am %s, and my name is " %(self, self.name))
</snippet></ROW><ROW><id>17134709</id><snippet>introduce()</snippet></ROW><ROW><id>17134709</id><snippet>self</snippet></ROW><ROW><id>17134709</id><snippet>myinst = Inst("Test Instance")
otherinst = Inst("An other instance")
myinst.introduce()
# outputs: Hello, I am &lt;Inst object at x&gt;, and my name is Test Instance
otherinst.introduce()
# outputs: Hello, I am &lt;Inst object at y&gt;, and my name is An other instance
</snippet></ROW><ROW><id>17134709</id><snippet>self</snippet></ROW><ROW><id>17134709</id><snippet>Inst</snippet></ROW><ROW><id>17134709</id><snippet>introduce</snippet></ROW><ROW><id>17134709</id><snippet>myinst</snippet></ROW><ROW><id>17134709</id><snippet>otherinst</snippet></ROW><ROW><id>17134709</id><snippet>Inst.introduce(myinst)</snippet></ROW><ROW><id>17134709</id><snippet>class Cls:

    @classmethod
    def introduce(cls):
        print("Hello, I am %s!" %cls)
</snippet></ROW><ROW><id>17134709</id><snippet> Cls.introduce() # same as Cls.introduce(Cls)
 # outputs: Hello, I am &lt;class 'Cls'&gt;
</snippet></ROW><ROW><id>17134709</id><snippet>Cls</snippet></ROW><ROW><id>17134709</id><snippet>Cls.introduce(Inst)</snippet></ROW><ROW><id>17134709</id><snippet>"Hello, I am &lt;class 'Inst'&gt;</snippet></ROW><ROW><id>17134709</id><snippet>Cls</snippet></ROW><ROW><id>17134709</id><snippet>class SubCls(Cls):
    pass

SubCls.introduce()
# outputs: Hello, I am &lt;class 'SubCls'&gt;
</snippet></ROW><ROW><id>17134750</id><snippet>to_datetime</snippet></ROW><ROW><id>17134750</id><snippet>df['col'] = pd.to_datetime(df['col'])
</snippet></ROW><ROW><id>17134750</id><snippet>dayfirst</snippet></ROW><ROW><id>17134750</id><snippet>In [7]: pd.to_datetime(pd.Series(['05/23/2005']))
Out[7]:
0   2005-05-23 00:00:00
dtype: datetime64[ns]
</snippet></ROW><ROW><id>17134879</id><snippet>f.write("Artist: ", toart + "\n")</snippet></ROW><ROW><id>17134879</id><snippet>f.write("Artist: " + toart + "\n")</snippet></ROW><ROW><id>17135156</id><snippet>lat_prague, long_prague = 50.0833, 14.4667
lat_brno, long_brno = 49.2000, 16.6333
expected_km = 184.21
</snippet></ROW><ROW><id>17135156</id><snippet>&gt;&gt;&gt; def calc(lat1,lon1, lat2,lon2):
# ... your code ...

&gt;&gt;&gt; calc(lat_prague,long_prague,lat_brno,long_brno)
184.34019283649852
&gt;&gt;&gt; calc(lat_prague,long_prague,lat_brno,long_brno) / expected_km
1.0007067631317437
</snippet></ROW><ROW><id>17135156</id><snippet>&gt;&gt;&gt; calc(long_prague,lat_prague,long_brno,lat_brno)
258.8286271447481
&gt;&gt;&gt; calc(long_prague,lat_prague,long_brno,lat_brno) / expected_km
1.405073704710646
</snippet></ROW><ROW><id>17135169</id><snippet>&lt;!DOCTYPE&gt;
</snippet></ROW><ROW><id>17135169</id><snippet>&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
</snippet></ROW><ROW><id>17135169</id><snippet>File "/usr/lib/python3/dist-packages/bs4/element.py", line 720, in for_name_and_ids
return Doctype(value)
</snippet></ROW><ROW><id>17135250</id><snippet>line</snippet></ROW><ROW><id>17135250</id><snippet>.</snippet></ROW><ROW><id>17135250</id><snippet>In [3]: re.findall('.', '\n')
Out[3]: []
</snippet></ROW><ROW><id>17135250</id><snippet>strip()</snippet></ROW><ROW><id>17135250</id><snippet>re.DOTALL</snippet></ROW><ROW><id>17135250</id><snippet>In [4]: re.findall('.', '\n', re.DOTALL)
Out[4]: ['\n']
</snippet></ROW><ROW><id>17135250</id><snippet>.*</snippet></ROW><ROW><id>17135250</id><snippet>.*?</snippet></ROW><ROW><id>17135271</id><snippet>import sys

print("idlelib" in sys.modules)
</snippet></ROW><ROW><id>17135271</id><snippet>True</snippet></ROW><ROW><id>17135271</id><snippet>False</snippet></ROW><ROW><id>17135600</id><snippet>range(6395674, 1000000, -1)</snippet></ROW><ROW><id>17135600</id><snippet>xrange(6395674, 1000000, -1)</snippet></ROW><ROW><id>17135638</id><snippet>&gt;&gt;&gt; s = "2 dogs. 4 cats. horses. 7 goats"
&gt;&gt;&gt; import re
&gt;&gt;&gt; re.findall(r'\d+\s(\w+)', s)
['dogs', 'cats', 'goats']
</snippet></ROW><ROW><id>17135847</id><snippet>d = {'\x00F\x00a\x00c\x00e\x00b\x00o\x00o\x00k\x00 \x00/\x00 \x00T\x00w\x00i\x00t\x00t\x00e\x00r\x00':
 '\x00F\x00a\x00c\x00e\x00b\x00o\x00o\x00k\x00 \x00/\x00 \x00T\x00w\x00i\x00t\x00t\x00e\x00r\x00'}

for key, value in d.items():
    print (key+" : "+value).decode('utf-8')
</snippet></ROW><ROW><id>17135891</id><snippet>regex</snippet></ROW><ROW><id>17135891</id><snippet>my_list = [2,3,4,"5cm", 6,"2.5km"]

def get_digits(s):
    return ''.join(ele for ele in s if not ele.isalpha())


def convert_to_nums(my_list):
    result = []
    for ele in my_list:
        if isinstance(ele, (int, float)):
            result.append(ele)
        else:
            ele = get_digits(ele)
            try:
                result.append(int(ele))
            except ValueError:
                result.append(float(ele))
    return result
</snippet></ROW><ROW><id>17135891</id><snippet>&gt;&gt;&gt; convert_to_nums(my_list)
[2, 3, 4, 5, 6, 2.5]
</snippet></ROW><ROW><id>17135910</id><snippet>product</snippet></ROW><ROW><id>17135910</id><snippet>combinations</snippet></ROW><ROW><id>17135910</id><snippet>import string

for letters in itertools.product(string.ascii_lowercase, repeat=4):
    word = ''.join(letters)

    if word in english_words:
        print word
</snippet></ROW><ROW><id>17135910</id><snippet>import string
from itertools import product
#http://www.puzzlers.org/pub/wordlists/engwords.txt

with open('/Users/kyle/Documents/english words.txt', 'r') as word_file:
    english_words = set(tuple(word.strip().lower()) for word in word_file if len(word.strip()) == 4)

words = english_words.intersection(product(string.ascii_lowercase, repeat=4))
</snippet></ROW><ROW><id>17135941</id><snippet>m = re.search(r'href="([\w:/.]+)"', s, re.I)
print m.expand(r"url: \1")
</snippet></ROW><ROW><id>17135941</id><snippet>url: http://google.com
</snippet></ROW><ROW><id>17135941</id><snippet>&lt;A</snippet></ROW><ROW><id>17135941</id><snippet>ID="test"&gt;blah&lt;/A&gt;</snippet></ROW><ROW><id>17135941</id><snippet>r = re.compile(r'href="([\w:/.]+)"', re.I)
ex = lambda st: r.search(st).expand(r"url: \1")
print ex('&lt;A HREF="http://www.google.com" ID="test"&gt;blah&lt;/A&gt;')
print ex('&lt;A HREF="http://www.yahoo.com" ID="test"&gt;blah&lt;/A&gt;')
# and so on.
</snippet></ROW><ROW><id>17135941</id><snippet>re.sub(r'(?&lt;=href=")([\w:/.]+)(?=")', "url: " + r'\1', s, flags=re.I)
# -&gt; '&lt;A HREF="url: http://www.google.com" ID="test"&gt;blah&lt;/A&gt;'
</snippet></ROW><ROW><id>17135941</id><snippet>re.sub(r'href="([\w:/.]+)"', r'href="url: \1"', s, flags=re.I)
# -&gt; '&lt;A href="url: http://www.google.com" ID="test"&gt;blah&lt;/A&gt;'
</snippet></ROW><ROW><id>17136071</id><snippet>ArgumentParser</snippet></ROW><ROW><id>17136071</id><snippet>_ActionsContainer</snippet></ROW><ROW><id>17136071</id><snippet>_SubParsersAction</snippet></ROW><ROW><id>17136071</id><snippet>__init__</snippet></ROW><ROW><id>17136071</id><snippet>_parser_class</snippet></ROW><ROW><id>17136071</id><snippet>class Foo(ArgumentParser): pass

parser = ArgumentParser()
parser._parser_class = Foo
subparser = parser.add_parser(...)
</snippet></ROW><ROW><id>17136092</id><snippet>file.write(str(x))
</snippet></ROW><ROW><id>17136092</id><snippet>__str__</snippet></ROW><ROW><id>17136092</id><snippet>__repr__</snippet></ROW><ROW><id>17136092</id><snippet>print</snippet></ROW><ROW><id>17136092</id><snippet>str</snippet></ROW><ROW><id>17136092</id><snippet>print</snippet></ROW><ROW><id>17136092</id><snippet>str()</snippet></ROW><ROW><id>17136092</id><snippet>x = str(x)+" "
</snippet></ROW><ROW><id>17136092</id><snippet>x</snippet></ROW><ROW><id>17136150</id><snippet>re.sub</snippet></ROW><ROW><id>17136150</id><snippet>def base64_encode(match):
    """
    This function takes a re 'match object' and performs
    The appropriate substitutions
    """

    group = match.group(1)
    ... #Code to encode as base 64
    return result

re.sub(...,base64_encode,s,flags=re.I)
</snippet></ROW><ROW><id>17136345</id><snippet>str.find()</snippet></ROW><ROW><id>17136345</id><snippet>int</snippet></ROW><ROW><id>17136345</id><snippet>str</snippet></ROW><ROW><id>17136345</id><snippet>cows = "111 cows 222 cows "
print cows.split(" cows ") # this prints ['111', '222', '']
</snippet></ROW><ROW><id>17136345</id><snippet>cows = "111 cows 222 cows "
cows_lst = [cow for cow in cows.split(" cows ") if cow]
print cows_lst # now it prints ['111', '222']
</snippet></ROW><ROW><id>17136392</id><snippet>Scipy</snippet></ROW><ROW><id>17136392</id><snippet>~/Enthought/Canopy_64bit/System/</snippet></ROW><ROW><id>17136392</id><snippet>~/Enthought/Canopy_64bit/User/bin/python</snippet></ROW><ROW><id>17136437</id><snippet>l</snippet></ROW><ROW><id>17136437</id><snippet>lst=json.loads(re.sub('([0-9]+-[0-9]+-[0-9]+)',r'"\1"','[%s]'%(l)))
</snippet></ROW><ROW><id>17136437</id><snippet>lst</snippet></ROW><ROW><id>17136437</id><snippet>[40.0070222, 116.2968604, u'2008-10-28', [[u'route'], [u'sublocality', u'political']]]
</snippet></ROW><ROW><id>17136437</id><snippet>import json
import re
</snippet></ROW><ROW><id>17136437</id><snippet>lst[3][0][0]
</snippet></ROW><ROW><id>17136437</id><snippet>lst[3][1][1]
</snippet></ROW><ROW><id>17136559</id><snippet>idelem = tree.find('./{http://www.w3.org/2005/Atom}entry/{http://www.w3.org/2005/Atom}id')
if idelem is not None:
    print idelem.get('{http://www.google.com/schemas/reader/atom/}original-id')
</snippet></ROW><ROW><id>17136559</id><snippet>findall</snippet></ROW><ROW><id>17136633</id><snippet>
HKEY_CURRENT_USER\Software\Microsoft\Command Processor
</snippet></ROW><ROW><id>17136633</id><snippet>
cd C:\
</snippet></ROW><ROW><id>17136755</id><snippet>text=True</snippet></ROW><ROW><id>17136755</id><snippet>.get_text()</snippet></ROW><ROW><id>17136755</id><snippet>td.find('td', text=True).get_text(strip=True)
</snippet></ROW><ROW><id>17136796</id><snippet>exec</snippet></ROW><ROW><id>17136796</id><snippet>exec 'import vfs_tests as v'
</snippet></ROW><ROW><id>17136796</id><snippet>eval</snippet></ROW><ROW><id>17136796</id><snippet>import</snippet></ROW><ROW><id>17136796</id><snippet>exec</snippet></ROW><ROW><id>17136796</id><snippet>exec('import vfs_tests as v')</snippet></ROW><ROW><id>17136796</id><snippet>importlib</snippet></ROW><ROW><id>17136796</id><snippet>import importlib
mod = importlib.import_module('vfs_tests')
</snippet></ROW><ROW><id>17136796</id><snippet>__import__</snippet></ROW><ROW><id>17136882</id><snippet>In [11]: import pandas as pd

In [12]: df = pd.DataFrame(a, columns=['value', 'city'])
</snippet></ROW><ROW><id>17136882</id><snippet>In [13]: df.city = df.city.replace({'Miami': 0, 'Boston': 1})

In [14]: df
Out[14]:
  value city
0   1.0    0
1   2.0    1
2   1.4    0
</snippet></ROW><ROW><id>17137039</id><snippet>__main__.py</snippet></ROW><ROW><id>17137224</id><snippet>+</snippet></ROW><ROW><id>17137224</id><snippet>+=</snippet></ROW><ROW><id>17137224</id><snippet>&gt;&gt;&gt; lis = []
&gt;&gt;&gt; lis = lis + [1]
&gt;&gt;&gt; lis
[1]
&gt;&gt;&gt; lis = lis + [2]
&gt;&gt;&gt; lis
[1, 2]
&gt;&gt;&gt; lis += [3]  # += acts like list.extend, i.e changes the list in-place
&gt;&gt;&gt; lis
[1, 2, 3]
</snippet></ROW><ROW><id>17137224</id><snippet>arr1</snippet></ROW><ROW><id>17137224</id><snippet>arr2</snippet></ROW><ROW><id>17137224</id><snippet>IndexError</snippet></ROW><ROW><id>17137224</id><snippet>for i in range(0, len(A)):
    if A[i] &lt; A[r]:
        arr1 = arr1  + [A[i]]

    elif A[i] &gt; A[r]:
        arr2 = arr2 + [A[i]]
</snippet></ROW><ROW><id>17137389</id><snippet>import urllib2
req = urllib2.Request('http://www.whoscored.com/Matches/615293/LiveStatistics/England-Premier-League-2012-2013-Arsenal-Wigan')
req.add_header('User-Agent', 'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.5) Gecko/20091102 Firefox')  # Add fake client
response = urllib2.urlopen(req)
print response.read()
</snippet></ROW><ROW><id>17137478</id><snippet>class dprVariable:
    ...
    val = []
</snippet></ROW><ROW><id>17137478</id><snippet>val</snippet></ROW><ROW><id>17137478</id><snippet>dprVariable</snippet></ROW><ROW><id>17137478</id><snippet>val</snippet></ROW><ROW><id>17137478</id><snippet>class dprVariable:
    def __init__(self, ...):
        self.val = []
</snippet></ROW><ROW><id>17137478</id><snippet>dprObject</snippet></ROW><ROW><id>17137567</id><snippet>self.weather</snippet></ROW><ROW><id>17137567</id><snippet>weather</snippet></ROW><ROW><id>17137567</id><snippet>def get_current_weather(self):
    print self.weather['January']  # or  Weather.weather['January']
</snippet></ROW><ROW><id>17137567</id><snippet>weather</snippet></ROW><ROW><id>17137567</id><snippet>Weather.weather</snippet></ROW><ROW><id>17137567</id><snippet>&gt;&gt;&gt; class A:
...     foo = 1
...     bar = 2
...     
&gt;&gt;&gt; A.foo
1
&gt;&gt;&gt; A.bar
2
</snippet></ROW><ROW><id>17137695</id><snippet>import csv
import sys
import urllib2

csvfile = list(csv.reader(open(sys.argv[1])))
for row in csvfile:
  sid = "http://myurl.com?sid="+row[13]
  urllib2.urlopen(sid)
</snippet></ROW><ROW><id>17137708</id><snippet>sets</snippet></ROW><ROW><id>17137708</id><snippet>for filepath in iglob(os.path.join(folderpath,'*.txt')):
    with open(filepath,'r') as filehandle:
        words = set(removegarbage(filehandle.read()).split()) 
        counter.update(words)
</snippet></ROW><ROW><id>17137708</id><snippet>set</snippet></ROW><ROW><id>17137708</id><snippet>&gt;&gt;&gt; strs = "foo bat foo"
&gt;&gt;&gt; set(strs.split())
set(['bat', 'foo'])
</snippet></ROW><ROW><id>17137708</id><snippet>collections.Counter</snippet></ROW><ROW><id>17137708</id><snippet>&gt;&gt;&gt; c = Counter()
&gt;&gt;&gt; strs = "foo bat foo"
&gt;&gt;&gt; c.update(set(strs.split()))
&gt;&gt;&gt; strs = "foo spam foo"
&gt;&gt;&gt; c.update(set(strs.split()))
&gt;&gt;&gt; c
Counter({'foo': 2, 'bat': 1, 'spam': 1})
</snippet></ROW><ROW><id>17137858</id><snippet>x = 0
for c in itertools.takewhile(lambda c: x &lt; 10, itertools.count()):
    x = int(raw_input())
    print x, c
</snippet></ROW><ROW><id>17137917</id><snippet>.communicate()</snippet></ROW><ROW><id>17137969</id><snippet>import paramiko
client=paramiko.SSHClient()
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
com="ls ~/desktop"
client.connect('MyIPAddress',MyPortNumber, username='username', password='password')
output=""
stdin, stdout, stderr = client.exec_command(com)

print "ssh succuessful. Closing connection"
stdout=stdout.readlines()
client.close()
print "Connection closed"

print stdout
print com
for line in stdout:
    output=output+line
if output!="":
    print output
else:
    print "There was no output for this command"
</snippet></ROW><ROW><id>17137986</id><snippet>playerPrefs()</snippet></ROW><ROW><id>17137986</id><snippet>self</snippet></ROW><ROW><id>17137986</id><snippet>p = playerPrefs()
p.createNew()
</snippet></ROW><ROW><id>17137986</id><snippet>createNew()</snippet></ROW><ROW><id>17137986</id><snippet>p = className.playerPrefs()
</snippet></ROW><ROW><id>17137986</id><snippet>playerPrefs</snippet></ROW><ROW><id>17137986</id><snippet>className</snippet></ROW><ROW><id>17138182</id><snippet>int</snippet></ROW><ROW><id>17138182</id><snippet>restype</snippet></ROW><ROW><id>17138182</id><snippet>func_py</snippet></ROW><ROW><id>17138182</id><snippet>import ctypes

func_py = cpplib.func_py
func_py.restype = ctypes.c_double
x = func_py(cppobj)
print 'x =', x
</snippet></ROW><ROW><id>17138182</id><snippet>CPPClass_py.restype</snippet></ROW><ROW><id>17138226</id><snippet>subprocess.call</snippet></ROW><ROW><id>17138226</id><snippet>shell=False</snippet></ROW><ROW><id>17138226</id><snippet>from subprocess import call
call('/Applications/BitRock InstallBuilder for Qt 8.5.2/bin/Builder.app/Contents/MacOS/installbuilder.sh')
</snippet></ROW><ROW><id>17138226</id><snippet>shell=False</snippet></ROW><ROW><id>17138226</id><snippet>from subprocess import call
call(['/Applications/BitRock InstallBuilder for Qt 8.5.2/bin/Builder.app/Contents/MacOS/installbuilder.sh'],
     shell=False)
</snippet></ROW><ROW><id>17138226</id><snippet>subprocess</snippet></ROW><ROW><id>17138226</id><snippet>from subprocess import call
call('/Applications/BitRock\\ InstallBuilder\\ for\\ Qt 8.5.2/bin/Builder.app/Contents/MacOS/installbuilder.sh',
     shell=True)
</snippet></ROW><ROW><id>17138226</id><snippet>from subprocess import call
call('"/Applications/BitRock InstallBuilder for Qt 8.5.2/bin/Builder.app/Contents/MacOS/installbuilder.sh"',
     shell=True)
</snippet></ROW><ROW><id>17138226</id><snippet>list</snippet></ROW><ROW><id>17138226</id><snippet>call(['/bin/echo', 'foo', 'bar'])
</snippet></ROW><ROW><id>17138226</id><snippet>call('/bin/echo foo bar', shell=True)
</snippet></ROW><ROW><id>17138226</id><snippet>foo bar\n</snippet></ROW><ROW><id>17138262</id><snippet>someinfo.message += ' World'
someinfo.save()
</snippet></ROW><ROW><id>17138335</id><snippet>print ' \n'.join(a)
</snippet></ROW><ROW><id>17138335</id><snippet>print ' \n'.join(a).upper()
</snippet></ROW><ROW><id>17138335</id><snippet>' \n'.join(a)</snippet></ROW><ROW><id>17138335</id><snippet>upper()</snippet></ROW><ROW><id>17138396</id><snippet>%20</snippet></ROW><ROW><id>17138504</id><snippet>die Katze
Value not in list
</snippet></ROW><ROW><id>17138724</id><snippet>Item</snippet></ROW><ROW><id>17138724</id><snippet>Item.objects.filter(attribute_name="a1").filter(attribute__name="a2")
</snippet></ROW><ROW><id>17138843</id><snippet>{
"callbackUrl": "https://mirrornotifications.appspot.com/forward?url=http://example.com/path/to/test.php",
"collection": "timeline",
"itemId": "your-item-id-here",
"operation": "UPDATE",
"userToken": "your-userToken-here",
"userActions": [
    {
        "type": "PIN"
    }
]
</snippet></ROW><ROW><id>17138959</id><snippet>str[::x]</snippet></ROW><ROW><id>17138959</id><snippet>myStr = 'AABBCCDDEEFF112233'
print ':'.join(myStr[i:i+2] for i in range(0, len(myStr), 2))
</snippet></ROW><ROW><id>17139044</id><snippet>reduce(np.multiply, np.ix_(*vs))
</snippet></ROW><ROW><id>17139044</id><snippet>np.ix_()</snippet></ROW><ROW><id>17139044</id><snippet>np.multiply</snippet></ROW><ROW><id>17139044</id><snippet>import numpy as np
vs = [np.r_[1,2,3.0],np.r_[4,5.0],np.r_[6,7,8.0]]
shape = map(len, vs)

 # specify the orientation of each vector
newshapes = np.diag(np.array(shape)-1)+1
reshaped = [x.reshape(y) for x,y in zip(vs, newshapes)]

# direct product
A = reduce(lambda a,b: a*b, reshaped, 1)
B = reduce(np.multiply, np.ix_(*vs))

np.all(A==B)
</snippet></ROW><ROW><id>17139044</id><snippet>True
</snippet></ROW><ROW><id>17139416</id><snippet>.emacs</snippet></ROW><ROW><id>17139416</id><snippet>(setq python-shell-interpreter "python3")
</snippet></ROW><ROW><id>17139416</id><snippet>find-function</snippet></ROW><ROW><id>17139416</id><snippet>run-python</snippet></ROW><ROW><id>17139466</id><snippet>el.text</snippet></ROW><ROW><id>17139466</id><snippet>u''</snippet></ROW><ROW><id>17139466</id><snippet># coding: utf-8</snippet></ROW><ROW><id>17139466</id><snippet>text.decode(text_encoding)</snippet></ROW><ROW><id>17139466</id><snippet>text_encoding</snippet></ROW><ROW><id>17139466</id><snippet>el.text</snippet></ROW><ROW><id>17139466</id><snippet>sys.getdefaultencoding()</snippet></ROW><ROW><id>17139466</id><snippet>tostring()</snippet></ROW><ROW><id>17139466</id><snippet>ElementTree.write()</snippet></ROW><ROW><id>17139535</id><snippet>cursor.execute("SELECT x from y where Name = ?", (namepar,))
</snippet></ROW><ROW><id>17139552</id><snippet>.reshape()</snippet></ROW><ROW><id>17139552</id><snippet>a = np.zeros(5,)
a.shape
&gt;&gt;&gt; (5,)

# explicitly reshape to (5,1)
a.reshape(5,1).shape
&gt;&gt;&gt; (5,1)

# or use -1 in the first dimension, so that its size in that dimension is 
# inferred from its total length
a.reshape(-1,1).shape
&gt;&gt;&gt; (5,1)
</snippet></ROW><ROW><id>17139552</id><snippet>np.newaxis</snippet></ROW><ROW><id>17139552</id><snippet>np.newaxis</snippet></ROW><ROW><id>17139552</id><snippet>.reshape()</snippet></ROW><ROW><id>17139552</id><snippet>.reshape(-1,...)</snippet></ROW><ROW><id>17139552</id><snippet>a = np.zeros((3,4,5))
a[np.newaxis,:,np.newaxis,...,np.newaxis].shape
&gt;&gt;&gt; (1, 3, 1, 4, 5, 1)
</snippet></ROW><ROW><id>17139634</id><snippet>zip()</snippet></ROW><ROW><id>17139634</id><snippet>list1, list2, list3, list4, list5 = zip(
    *(line.strip().split('|') for line in open('test.txt')))
</snippet></ROW><ROW><id>17139634</id><snippet>column_values = zip(*(line.strip().split('|') for line in open('test.txt')))
# column_values[0] is [a,a1,a3] ...
</snippet></ROW><ROW><id>17139634</id><snippet>zip()</snippet></ROW><ROW><id>17139634</id><snippet>list1, list2, list3, list4, list5 = zip(
    [0,1,2,3,4], [0,1,2,3,4], [0,1,2,3,4])
</snippet></ROW><ROW><id>17139634</id><snippet>list1 = [0,0,0]</snippet></ROW><ROW><id>17139634</id><snippet>zip()</snippet></ROW><ROW><id>17139634</id><snippet>zip(a,b,c)</snippet></ROW><ROW><id>17139634</id><snippet>[a,b,c]</snippet></ROW><ROW><id>17139634</id><snippet>*</snippet></ROW><ROW><id>17139634</id><snippet>zip(*L)</snippet></ROW><ROW><id>17139634</id><snippet>zip(L[0], L[1], ...)</snippet></ROW><ROW><id>17139634</id><snippet>(line.strip().split('|') for line in open('test.txt'))
</snippet></ROW><ROW><id>17139634</id><snippet>zip()</snippet></ROW><ROW><id>17139643</id><snippet>import java.math.BigInteger;
import java.security.Key;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class Blowfish1 {

    public static void main(String[] args) throws Exception {
        String s = "testings";
        Cipher cipher = Cipher.getInstance("Blowfish/ECB/PKCS5Padding");
        Key key = new SecretKeySpec("6#26FRL$ZWD".getBytes(), "Blowfish");
        cipher.init(Cipher.ENCRYPT_MODE, key);
        byte[] enc_bytes = cipher.doFinal(s.getBytes());
        System.out.printf("%x%n", new BigInteger(1, enc_bytes));
    }

}
</snippet></ROW><ROW><id>17139643</id><snippet>from Crypto.Cipher import Blowfish
import binascii

# See @falsetru answer for the following method
#
def PKCS5Padding(string):
    byteNum = len(string)
    packingLength = 8 - byteNum % 8
    appendage = chr(packingLength) * packingLength
    return string + appendage

def PandoraEncrypt(string):
    key = b'6#26FRL$ZWD'
    c1  = Blowfish.new(key, Blowfish.MODE_ECB)
    packedString = PKCS5Padding(string)
    return c1.encrypt(packedString)

if __name__ == '__main__':
    s = 'testings'
    c = PandoraEncrypt(s)
    print(binascii.hexlify(c))
</snippet></ROW><ROW><id>17139643</id><snippet>223950ff19fbea872fce0ee543692ba7</snippet></ROW><ROW><id>17139668</id><snippet>main.py</snippet></ROW><ROW><id>17139668</id><snippet>lib.common_lib</snippet></ROW><ROW><id>17139668</id><snippet>from lib.common_lib import Comments, Locations, ScreenData, ProgressSignal
</snippet></ROW><ROW><id>17139668</id><snippet>from lib import view</snippet></ROW><ROW><id>17139668</id><snippet>lib</snippet></ROW><ROW><id>17139830</id><snippet>from glob import glob # (instead of iglob)

...

filepaths = glob(os.path.join(folderpath,'*.txt'))

num_files = len(filepaths)

# Add all words to counter
for filepath in filepaths):
    with open(filepath,'r') as filehandle:
        lines = filehandle.read()
        words = removegarbage(lines).split()
        counter.update(words)

# Display most common
for word, count in counter.most_common():

    # Break out if the frequency is less than 0.1 * the number of files
    if count &lt; 0.1*num_files:
        break

    print('{}  {}'.format(word,count))
</snippet></ROW><ROW><id>17139830</id><snippet>Counter.iteritems()</snippet></ROW><ROW><id>17139830</id><snippet>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter()
&gt;&gt;&gt; c.update(['test', 'test', 'test2'])
&gt;&gt;&gt; c.iteritems()
&lt;dictionary-itemiterator object at 0x012F4750&gt;
&gt;&gt;&gt; for word, count in c.iteritems():
...     print word, count
...     
test 2
test2 1
</snippet></ROW><ROW><id>17139843</id><snippet>textvariable=...</snippet></ROW><ROW><id>17139843</id><snippet>variable=...</snippet></ROW><ROW><id>17139843</id><snippet>self.typeFrame.pack()</snippet></ROW><ROW><id>17139843</id><snippet>self.typeFrame.grid(..)</snippet></ROW><ROW><id>17139925</id><snippet>f_bin = File(open('D:\\bin.jpg', 'rb'))
</snippet></ROW><ROW><id>17139959</id><snippet>request.form</snippet></ROW><ROW><id>17139959</id><snippet>request.data</snippet></ROW><ROW><id>17140018</id><snippet>&gt;&gt;&gt; list = ['one' , 'two' , 'three']
&gt;&gt;&gt; newlist = list
&gt;&gt;&gt; list.append('four')
&gt;&gt;&gt; print newlist
['one', 'two', 'three', 'four']
</snippet></ROW><ROW><id>17140018</id><snippet>list = list + ['four']
</snippet></ROW><ROW><id>17140018</id><snippet>list + ['four']</snippet></ROW><ROW><id>17140018</id><snippet>other_list = list + ['four']</snippet></ROW><ROW><id>17140018</id><snippet>list + ['four']</snippet></ROW><ROW><id>17140018</id><snippet>list += ['four']
</snippet></ROW><ROW><id>17140068</id><snippet>from multiprocessing.dummy import Pool # use threads

def compute_y(i):
    np.add.reduce(no * np.sin(np.radians(impar * x[i])) / impar, out=y[i])

step = 10**8 // n 
Pool().map(compute_y, (slice(j, j + step) for j in range(0, len(x), step)))
</snippet></ROW><ROW><id>17140068</id><snippet>#!/usr/bin/env python
"""Square Wave approximation by Fourier Series."""
import math
from multiprocessing.dummy import Pool # use threads
from timeit import default_timer as timer

import matplotlib.pyplot as plt
import numpy as np

n = 100000 # compute first n terms in the series

# generate x's to calculate the points.
x = np.arange(0, 360, .1)

# generate odd numbers to add the sines terms
impar = np.c_[1:n+2:2]
no = 4 / math.pi # just for normalize the sequence to converge to 1 (not pi/4)

# calculate the points
start = timer()
# y = 4/pi*(sin(x) + sin(3x)/3 + sin(5x)/5 + ... n) terms
y = np.empty_like(x)

def compute_y(i):
    t = impar * x[i]
    np.radians(t, out=t)
    np.sin(t, out=t)
    t *= no
    t /= impar
    np.add.reduce(t, out=y[i])

step = 10**8 // n
Pool().map(compute_y, (slice(j, j + step) for j in range(0, len(x), step)))
print("y calc. takes us %.2f seconds" % (timer() - start,))

# plot
plt.plot(x, y, "-")
plt.title("%d terms" % n)
plt.grid()
# save a image(just in case)
plt.savefig("%dsqwv.png" % n)
# show the graph
plt.show()
</snippet></ROW><ROW><id>17140123</id><snippet>collections.Counter</snippet></ROW><ROW><id>17140123</id><snippet>from collections import Counter
with openFileObject as infile:
    print Counter(x.split()[0] for x in infile)
</snippet></ROW><ROW><id>17140123</id><snippet>Counter({'id1': 2, 'id4': 1, 'id3': 1})
</snippet></ROW><ROW><id>17140123</id><snippet>classDict = defaultdict(tempLine)
</snippet></ROW><ROW><id>17140123</id><snippet>classDict = defaultdict(list)
</snippet></ROW><ROW><id>17140129</id><snippet>import mechanize

browser = mechanize.Browser()
browser.set_handle_robots(False)
browser.open("https://www.linkedin.com/")
browser.select_form(name="login")

browser["session_key"] = "your_email"
browser["session_password"] = "your_password"
response = browser.submit()

print response.read()
</snippet></ROW><ROW><id>17140155</id><snippet>'median'</snippet></ROW><ROW><id>17140155</id><snippet>tranform</snippet></ROW><ROW><id>17140155</id><snippet>getattr</snippet></ROW></DATA>