<?xml version="1.0" encoding="UTF-8" standalone="no"?><DATA><ROW><id>342</id><snippet>for</snippet></ROW><ROW><id>342</id><snippet>expandNode()</snippet></ROW><ROW><id>1852</id><snippet>import msvcrt
answer=msvcrt.getch()
</snippet></ROW><ROW><id>1857</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; print os.name
posix
&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.system()
'Linux'
&gt;&gt;&gt; platform.release()
'2.6.22-15-generic'
</snippet></ROW><ROW><id>2982</id><snippet>&gt;&gt;&gt; def foo():
...     print "foo"
...
&gt;&gt;&gt; class A:
...     def bar( self ):
...         print "bar"
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; foo
&lt;function foo at 0x00A98D70&gt;
&gt;&gt;&gt; a.bar
&lt;bound method A.bar of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;
&gt;&gt;&gt;
</snippet></ROW><ROW><id>2982</id><snippet>&gt;&gt;&gt; def fooFighters( self ):
...     print "fooFighters"
...
&gt;&gt;&gt; A.fooFighters = fooFighters
&gt;&gt;&gt; a2 = A()
&gt;&gt;&gt; a2.fooFighters
&lt;bound method A.fooFighters of &lt;__main__.A instance at 0x00A9BEB8&gt;&gt;
&gt;&gt;&gt; a2.fooFighters()
fooFighters
</snippet></ROW><ROW><id>2982</id><snippet>&gt;&gt;&gt; a.fooFighters()
fooFighters
</snippet></ROW><ROW><id>2982</id><snippet>&gt;&gt;&gt; def barFighters( self ):
...     print "barFighters"
...
&gt;&gt;&gt; a.barFighters = barFighters
&gt;&gt;&gt; a.barFighters()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: barFighters() takes exactly 1 argument (0 given)
</snippet></ROW><ROW><id>2982</id><snippet>&gt;&gt;&gt; a.barFighters
&lt;function barFighters at 0x00A98EF0&gt;
</snippet></ROW><ROW><id>2982</id><snippet>&gt;&gt;&gt; import types
&gt;&gt;&gt; a.barFighters = types.MethodType( barFighters, a )
&gt;&gt;&gt; a.barFighters
&lt;bound method ?.barFighters of &lt;__main__.A instance at 0x00A9BC88&gt;&gt;
&gt;&gt;&gt; a.barFighters()
barFighters
</snippet></ROW><ROW><id>2982</id><snippet>&gt;&gt;&gt; a2.barFighters()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: A instance has no attribute 'barFighters'
</snippet></ROW><ROW><id>3071</id><snippet>foo</snippet></ROW><ROW><id>3071</id><snippet>bar</snippet></ROW><ROW><id>3071</id><snippet>import foo
methodToCall = getattr(foo, 'bar')
result = methodToCall()
</snippet></ROW><ROW><id>3071</id><snippet>result = getattr(foo, 'bar')()
</snippet></ROW><ROW><id>3071</id><snippet>getattr</snippet></ROW><ROW><id>5430</id><snippet>$ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \
    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \
    line = u"\u0411\n"; print type(line), len(line); \
    sys.stdout.write(line); print line'
  UTF-8
  &lt;type 'unicode'&gt; 2
  Б
  Б

  $ python -c 'import sys, codecs, locale; print sys.stdout.encoding; \
    sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout); \
    line = u"\u0411\n"; print type(line), len(line); \
    sys.stdout.write(line); print line' | cat
  None
  &lt;type 'unicode'&gt; 2
  Б
  Б
</snippet></ROW><ROW><id>5985</id><snippet>import urllib, os&lt;br&gt;link = "http://python.org"&lt;br&gt;print "opening url:", link&lt;br&gt;site = urllib.urlopen(link)&lt;br&gt;meta = site.info()&lt;br&gt;print "Content-Length:", meta.getheaders("Content-Length")[0]&lt;br&gt;&lt;br&gt;f = open("out.txt", "r")&lt;br&gt;print "File on disk:",len(f.read())&lt;br&gt;f.close()&lt;br&gt;&lt;br&gt;&lt;br&gt;f = open("out.txt", "w")&lt;br&gt;f.write(site.read())&lt;br&gt;site.close()&lt;br&gt;f.close()&lt;br&gt;&lt;br&gt;f = open("out.txt", "r")&lt;br&gt;print "File on disk after download:",len(f.read())&lt;br&gt;f.close()&lt;br&gt;&lt;br&gt;print "os.stat().st_size returns:", os.stat("out.txt").st_size&lt;br&gt;</snippet></ROW><ROW><id>5985</id><snippet>opening url: http://python.org&lt;br&gt;Content-Length: 16535&lt;br&gt;File on disk: 16535&lt;br&gt;File on disk after download: 16535&lt;br&gt;os.stat().st_size returns: 16861&lt;br&gt;</snippet></ROW><ROW><id>5985</id><snippet>import urllib, os&lt;br&gt;link = "http://python.org"&lt;br&gt;print "opening url:", link&lt;br&gt;site = urllib.urlopen(link)&lt;br&gt;meta = site.info()&lt;br&gt;print "Content-Length:", meta.getheaders("Content-Length")[0]&lt;br&gt;&lt;br&gt;f = open("out.txt", "rb")&lt;br&gt;print "File on disk:",len(f.read())&lt;br&gt;f.close()&lt;br&gt;&lt;br&gt;&lt;br&gt;f = open("out.txt", "wb")&lt;br&gt;f.write(site.read())&lt;br&gt;site.close()&lt;br&gt;f.close()&lt;br&gt;&lt;br&gt;f = open("out.txt", "rb")&lt;br&gt;print "File on disk after download:",len(f.read())&lt;br&gt;f.close()&lt;br&gt;&lt;br&gt;print "os.stat().st_size returns:", os.stat("out.txt").st_size&lt;br&gt;</snippet></ROW><ROW><id>5985</id><snippet>$ python test.py&lt;br&gt;opening url: http://python.org&lt;br&gt;Content-Length: 16535&lt;br&gt;File on disk: 16535&lt;br&gt;File on disk after download: 16535&lt;br&gt;os.stat().st_size returns: 16535&lt;br&gt;</snippet></ROW><ROW><id>5985</id><snippet>// open for binary write&lt;br&gt;open(filename, "wb")&lt;br&gt;// open for binary read&lt;br&gt;open(filename, "rb")&lt;br&gt;</snippet></ROW><ROW><id>7090</id><snippet>ps:alpha</snippet></ROW><ROW><id>7090</id><snippet>gs -q -dQUIET -dPARANOIDSAFER -dBATCH -dNOPAUSE -dNOPROMPT \
-dMaxBitmap=500000000 -dLastPage=1 -dAlignToPixels=0 -dGridFitTT=0 \
-sDEVICE=jpeg -dTextAlphaBits=4 -dGraphicsAlphaBits=4 -r72x72 \
-sOutputFile=$OUTPUT -f$INPUT
</snippet></ROW><ROW><id>7090</id><snippet>$OUTPUT</snippet></ROW><ROW><id>7090</id><snippet>$INPUT</snippet></ROW><ROW><id>7090</id><snippet>72x72</snippet></ROW><ROW><id>7090</id><snippet>-sDEVICE=jpeg</snippet></ROW><ROW><id>7090</id><snippet>-sDEVICE=png16m</snippet></ROW><ROW><id>7223</id><snippet>cherrypy.request.base
cherrypy.request.cookie
cherrypy.request.headers
</snippet></ROW><ROW><id>7223</id><snippet>request</snippet></ROW><ROW><id>7223</id><snippet>response</snippet></ROW><ROW><id>7223</id><snippet>cherrypy.response.cookie['cookieName'] = 'cookieValue'
cherrypy.response.cookie['cookieName']['expires'] = 3600
</snippet></ROW><ROW><id>7286</id><snippet>groups = []
uniquekeys = []
for k, g in groupby(data, keyfunc):
   groups.append(list(g))    # Store group iterator as a list
   uniquekeys.append(k)
</snippet></ROW><ROW><id>7286</id><snippet>from itertools import groupby

things = [("animal", "bear"), ("animal", "duck"), ("plant", "cactus"), ("vehicle", "speed boat"), ("vehicle", "school bus")]

for key, group in groupby(things, lambda x: x[0]):
    for thing in group:
        print "A %s is a %s." % (thing[1], key)
    print " "
</snippet></ROW><ROW><id>7286</id><snippet>for key, group in groupby(things, lambda x: x[0]):
    listOfThings = " and ".join(["%s" % thing[1] for thing in group])
    print key + "s:  " + listOfThings + "."
</snippet></ROW><ROW><id>10129</id><snippet>signum = status &amp; 0xff
exitstatus = (status &amp; 0xff00) &gt;&gt; 8
</snippet></ROW><ROW><id>10778</id><snippet>classobj</snippet></ROW><ROW><id>10778</id><snippet>classobj</snippet></ROW><ROW><id>10778</id><snippet>import new
myexc=new.classobj("ExcName",(Exception,),{})
i=myexc("This is the exc msg!")
raise i
</snippet></ROW><ROW><id>10778</id><snippet>Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
__main__.ExcName: This is the exc msg!
</snippet></ROW><ROW><id>10778</id><snippet>self.__class__.__name__
</snippet></ROW><ROW><id>10778</id><snippet>raise(self.__class__.__name__+"Exception")
</snippet></ROW><ROW><id>12609</id><snippet>   &gt;&gt;&gt; x
   Traceback (most recent call last):
     ...
   NameError: name 'x' is not defined
</snippet></ROW><ROW><id>13107</id><snippet>&gt;&gt;&gt; 0b101111
47
</snippet></ROW><ROW><id>13107</id><snippet>&gt;&gt;&gt; bin(173)
'0b10101101'
</snippet></ROW><ROW><id>13435</id><snippet>foreach</snippet></ROW><ROW><id>13435</id><snippet>for</snippet></ROW><ROW><id>13435</id><snippet>for(int i = 0; i &lt; intArray.Length; ++i)
{
    if(intArray[i] &gt; 3) ++intArray[i];
}
</snippet></ROW><ROW><id>13435</id><snippet>var newArray1 = from i in intArray select ((i &gt; 3) ? (i + 1) : (i));
var newArray2 = intArray.Select(i =&gt; (i &gt; 3) ? (i + 1) : (i));
</snippet></ROW><ROW><id>13435</id><snippet>where</snippet></ROW><ROW><id>13435</id><snippet>var intArray = new int[] { 10, 1, 20, 2 };
var newArray = from i in intArray where i &gt; 3 select i + 1;
// newArray == { 11, 21 }
</snippet></ROW><ROW><id>13435</id><snippet>ForEach</snippet></ROW><ROW><id>13435</id><snippet>foreach</snippet></ROW><ROW><id>13435</id><snippet>foreach</snippet></ROW><ROW><id>13435</id><snippet>intArray.ForEach(i =&gt; DoSomething(i));
</snippet></ROW><ROW><id>13943</id><snippet>string-escape</snippet></ROW><ROW><id>13943</id><snippet>&gt;&gt;&gt; mystring = r"This is \n a test \r"
&gt;&gt;&gt; mystring.decode('string-escape')
'This is \n a test \r'
&gt;&gt;&gt; print mystring.decode('string-escape')
This is 
 a test 
&gt;&gt;&gt;
</snippet></ROW><ROW><id>13949</id><snippet>import sys
sys.stdout.write('\a')
sys.stdout.flush()
</snippet></ROW><ROW><id>13949</id><snippet>print('\a')
</snippet></ROW><ROW><id>14320</id><snippet>#!/usr/bin/python

import zipfile
f = zipfile.ZipFile('myfile.zip')

for subfile in f.namelist():
    print subfile
    data = f.read(subfile)
    for line in data.split('\n'):
        print line
</snippet></ROW><ROW><id>15931</id><snippet>from StringIO import StringIO

from lxml import etree

dtd = etree.DTD(StringIO("""&lt;!ELEMENT foo EMPTY&gt;"""))
root = etree.XML("&lt;foo/&gt;")
print(dtd.validate(root))
# True

root = etree.XML("&lt;foo&gt;bar&lt;/foo&gt;")
print(dtd.validate(root))
# False
print(dtd.error_log.filter_from_errors())
# &lt;string&gt;:1:0:ERROR:VALID:DTD_NOT_EMPTY: Element foo was declared EMPTY this one has content
</snippet></ROW><ROW><id>17933</id><snippet>entry_points.console_scripts</snippet></ROW><ROW><id>17933</id><snippet>from setuptools import setup

setup(
    # other arguments here...
    entry_points = {
        'console_scripts': [
            'foo = package.module:func',
            'bar = othermodule:somefunc',
        ],
    }
)
</snippet></ROW><ROW><id>18435</id><snippet>filter</snippet></ROW><ROW><id>18435</id><snippet>names = filter(lambda name: name[-5:] != "Smith", names)</snippet></ROW><ROW><id>18435</id><snippet>names = [name for name in names if name[-5:] != "Smith"]</snippet></ROW><ROW><id>18435</id><snippet>True</snippet></ROW><ROW><id>19343</id><snippet>zip</snippet></ROW><ROW><id>19343</id><snippet>&gt;&gt;&gt; zip(*[('a', 1), ('b', 2), ('c', 3), ('d', 4)])
[('a', 'b', 'c', 'd'), (1, 2, 3, 4)]
</snippet></ROW><ROW><id>19343</id><snippet>zip</snippet></ROW><ROW><id>19343</id><snippet>zip(('a', 1), ('b', 2), ('c', 3), ('d', 4))
</snippet></ROW><ROW><id>19343</id><snippet>zip</snippet></ROW><ROW><id>21302</id><snippet>checker = {
  ...
  'required': ['file', 'list', 'for_required']
}
</snippet></ROW><ROW><id>21302</id><snippet>check_dict = {
  'delim'    : /\-/,
  'parts'    : [ 'Show Name', 'Episode Name', 'Episode Number' ],
  'patterns' : [/valid name/, /valid episode name/, /valid number/ ],
  'required' : ['list', 'of', 'files'],
  'ignored'  : ['.*', 'hidden.txt'],
  'start_dir': '/path/to/dir/to/test/'
}
</snippet></ROW><ROW><id>21302</id><snippet>parts</snippet></ROW><ROW><id>21302</id><snippet>patterns</snippet></ROW><ROW><id>21302</id><snippet>.</snippet></ROW><ROW><id>21302</id><snippet>..</snippet></ROW><ROW><id>21302</id><snippet>svn:ignore</snippet></ROW><ROW><id>21302</id><snippet>start_dir</snippet></ROW><ROW><id>21302</id><snippet>parts</snippet></ROW><ROW><id>22624</id><snippet>%</snippet></ROW><ROW><id>22624</id><snippet>"%02d:%02d:%02d" % (hours, minutes, seconds)
</snippet></ROW><ROW><id>22682</id><snippet>import urllib2
response = urllib2.urlopen('http://www.example.com/')
html = response.read()
</snippet></ROW><ROW><id>24377</id><snippet>__iter__()</snippet></ROW><ROW><id>24377</id><snippet>next()</snippet></ROW><ROW><id>24377</id><snippet>__iter__</snippet></ROW><ROW><id>24377</id><snippet>next()</snippet></ROW><ROW><id>24377</id><snippet>next()</snippet></ROW><ROW><id>24377</id><snippet>class Counter:
    def __init__(self, low, high):
        self.current = low
        self.high = high

    def __iter__(self):
        return self

    def next(self):
        if self.current &gt; self.high:
            raise StopIteration
        else:
            self.current += 1
            return self.current - 1


for c in Counter(3, 8):
    print c
</snippet></ROW><ROW><id>24377</id><snippet>3
4
5
6
7
8
</snippet></ROW><ROW><id>24377</id><snippet>def counter(low, high):
    current = low
    while current &lt;= high:
        yield current
        current += 1

for c in counter(3, 8):
    print c
</snippet></ROW><ROW><id>24949</id><snippet>python script_a.py | python script_b.py
</snippet></ROW><ROW><id>24949</id><snippet>import subprocess
# Of course you can open things other than python here :)
process = subprocess.Popen(["python", "main.py"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
x = process.stderr.readline()
y = process.stdout.readline()
process.wait()
</snippet></ROW><ROW><id>24949</id><snippet>import sys
x = sys.stderr.readline()
y = sys.stdin.readline()
</snippet></ROW><ROW><id>25180</id><snippet>StringIO</snippet></ROW><ROW><id>25180</id><snippet>cStringIO</snippet></ROW><ROW><id>25180</id><snippet>StringIO</snippet></ROW><ROW><id>25180</id><snippet>f.write(u"asdf")</snippet></ROW><ROW><id>25180</id><snippet>import zipfile
import StringIO

s = StringIO.StringIO()
z = zipfile.ZipFile(s, "w")
z.write("test.txt")
z.close()
f = file("x.zip", "w")
f.write(s.getvalue())
s.close()
f.close()
</snippet></ROW><ROW><id>25815</id><snippet>C.__bases__</snippet></ROW><ROW><id>25815</id><snippet>def magicGetSuperClasses(cls):
  return cls.__bases__
</snippet></ROW><ROW><id>25815</id><snippet>cls.__bases__</snippet></ROW><ROW><id>26611</id><snippet>is</snippet></ROW><ROW><id>26611</id><snippet>True</snippet></ROW><ROW><id>26611</id><snippet>==</snippet></ROW><ROW><id>26611</id><snippet>__eq__()</snippet></ROW><ROW><id>26611</id><snippet>
&gt;&gt;&gt; class foo(object):
       def __eq__(self, other):
           return True

&gt;&gt;&gt; f = foo()
&gt;&gt;&gt; f == None
True
&gt;&gt;&gt; f is None
False
</snippet></ROW><ROW><id>26910</id><snippet>optparse</snippet></ROW><ROW><id>26910</id><snippet>argparse</snippet></ROW><ROW><id>26910</id><snippet>optparse</snippet></ROW><ROW><id>26910</id><snippet>parser.add_option('-q', '--query',
            action="store", dest="query",
            help="query string", default="spam")
</snippet></ROW><ROW><id>26910</id><snippet>options, args = parser.parse_args()
</snippet></ROW><ROW><id>26910</id><snippet>parser = optparse.OptionParser()
</snippet></ROW><ROW><id>26910</id><snippet>import optparse

parser = optparse.OptionParser()

parser.add_option('-q', '--query',
    action="store", dest="query",
    help="query string", default="spam")

options, args = parser.parse_args()

print 'Query string:', options.query
</snippet></ROW><ROW><id>26910</id><snippet>python sample.py
</snippet></ROW><ROW><id>26910</id><snippet>python sample.py --query myquery
</snippet></ROW><ROW><id>26957</id><snippet>if os.path.exists(path):
    os.unlink(path)
</snippet></ROW><ROW><id>26957</id><snippet>try:
    os.stat(path)
except OSError, e:
    if e.errno == errno.ENOENT:
        print 'path %s does not exist or is a broken symlink' % path
    else:
        raise e
</snippet></ROW><ROW><id>26957</id><snippet>if not os.path.exists(os.readlink(path)):
    print 'path %s is a broken symlink' % path
</snippet></ROW><ROW><id>28247</id><snippet>function subst($str, $dict){
    return preg_replace(array_map(create_function('$a', 'return "/%\\($a\\)s/";'), array_keys($dict)), array_values($dict), $str);
 }
</snippet></ROW><ROW><id>28247</id><snippet>echo subst('The %(site)s site %(adj)s because it %(adj)s', array('site'=&gt;'Stackoverflow', 'adj'=&gt;'rocks'));
</snippet></ROW><ROW><id>28705</id><snippet>
"""
Create an G{n,m} random graph with n nodes and m edges
and report some properties.

This graph is sometimes called the Erd##[m~Qs-Rényi graph
but is different from G{n,p} or binomial_graph which is also
sometimes called the Erd##[m~Qs-Rényi graph.
"""
__author__ = """Aric Hagberg (hagberg@lanl.gov)"""
__credits__ = """"""
#    Copyright (C) 2004-2006 by 
#    Aric Hagberg 
#    Dan Schult 
#    Pieter Swart 
#    Distributed under the terms of the GNU Lesser General Public License
#    http://www.gnu.org/copyleft/lesser.html

from networkx import *
import sys

n=10 # 10 nodes
m=20 # 20 edges

G=gnm_random_graph(n,m)

# some properties
print "node degree clustering"
for v in nodes(G):
    print v,degree(G,v),clustering(G,v)

# print the adjacency list to terminal 
write_adjlist(G,sys.stdout)
</snippet></ROW><ROW><id>28714</id><snippet>while x=next():
    // do something here!
</snippet></ROW><ROW><id>28714</id><snippet>while 1:
    x = next()
    if x != END:
        // Blah
    else:
        break
</snippet></ROW><ROW><id>28714</id><snippet>class Pita( object ):
    __slots__ = ('pocket',)
    marker = object()
    def __init__(self, v=marker):
        if v is not self.marker:
            self.pocket = v
    def __call__(self, v=marker):
        if v is not self.marker:
            self.pocket = v
        return self.pocket
</snippet></ROW><ROW><id>28714</id><snippet>p = Pita()
while p( next() ) != END:
    // do stuff with p.pocket!
</snippet></ROW><ROW><id>28714</id><snippet>__call__</snippet></ROW><ROW><id>29255</id><snippet>node.noSuchAttr = 'bar'</snippet></ROW><ROW><id>29255</id><snippet>minidom</snippet></ROW><ROW><id>29255</id><snippet>ElementTree</snippet></ROW><ROW><id>29255</id><snippet>import sys
from xml.etree.cElementTree import Element, ElementTree

def make_xml():
    node = Element('foo')
    node.text = 'bar'
    doc = ElementTree(node)
    return doc

if __name__ == '__main__':
    make_xml().write(sys.stdout)
</snippet></ROW><ROW><id>29575</id><snippet>#!/usr/bin/python 

from distutils.core import setup 

setup (name = 'Initech Package 3', 
          description = "Services and libraries ABC, DEF", 
          author = "That Guy, Initech Ltd", 
          author_email = "that.guy@initech.com", 
          version = '1.0.5', 
          package_dir = {'Package3' : 'site-packages/Package3'}, 
          packages = ['Package3', 'Package3.Queries'], 
          data_files = [ 
                       ('/etc/Package3', ['etc/Package3/ExternalResources.conf']) 
          ])
</snippet></ROW><ROW><id>32028</id><snippet>&gt;&gt;&gt; names['f'] = open('foo', 'w+')
&gt;&gt;&gt; safe_eval.safe_eval("baz = type(f)('baz', 'w+')", names)
&gt;&gt;&gt; names['baz']
&lt;open file 'baz', mode 'w+' at 0x413da0&gt;
</snippet></ROW><ROW><id>32028</id><snippet>&gt;&gt;&gt; import compiler
&gt;&gt;&gt; ast = compiler.parse("print 'Hello world!'")
</snippet></ROW><ROW><id>32125</id><snippet>&lt;li&gt;</snippet></ROW><ROW><id>32125</id><snippet>&lt;/li&gt;</snippet></ROW><ROW><id>32440</id><snippet>import pythoncom
import win32serviceutil
import win32service
import win32event
import servicemanager
import socket


class AppServerSvc (win32serviceutil.ServiceFramework):
    _svc_name_ = "TestService"
    _svc_display_name_ = "Test Service"

    def __init__(self,args):
        win32serviceutil.ServiceFramework.__init__(self,args)
        self.hWaitStop = win32event.CreateEvent(None,0,0,None)
        socket.setdefaulttimeout(60)

    def SvcStop(self):
        self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
        win32event.SetEvent(self.hWaitStop)

    def SvcDoRun(self):
        servicemanager.LogMsg(servicemanager.EVENTLOG_INFORMATION_TYPE,
                              servicemanager.PYS_SERVICE_STARTED,
                              (self._svc_name_,''))
        self.main()

    def main(self):
        pass

if __name__ == '__main__':
    win32serviceutil.HandleCommandLine(AppServerSvc)
</snippet></ROW><ROW><id>32939</id><snippet>import unittest

l = [["foo", "a", "a",], ["bar", "a", "b"], ["lee", "b", "b"]]

class TestSequense(unittest.TestCase):
    pass

def test_generator(a, b):
    def test(self):
        self.assertEqual(a,b)
    return test

if __name__ == '__main__':
    for t in l:
        test_name = 'test_%s' % t[0]
        test = test_generator(t[1], t[2])
        setattr(TestSequense, test_name, test)
    unittest.main()
</snippet></ROW><ROW><id>33486</id><snippet>s = p.stderr.readline()
</snippet></ROW><ROW><id>33957</id><snippet>__call__</snippet></ROW><ROW><id>34452</id><snippet>[method for method in dir(object) if callable(getattr(object, method))]
</snippet></ROW><ROW><id>35635</id><snippet>a.equal? b</snippet></ROW><ROW><id>35823</id><snippet>B.name</snippet></ROW><ROW><id>35823</id><snippet>B.__dict__</snippet></ROW><ROW><id>35823</id><snippet>b = B(); b.__dict__</snippet></ROW><ROW><id>35823</id><snippet>b.name</snippet></ROW><ROW><id>35823</id><snippet>B.name</snippet></ROW><ROW><id>35857</id><snippet>def shellquote(s):
    return "'" + s.replace("'", "'\\''") + "'"
</snippet></ROW><ROW><id>36156</id><snippet>mylist = ["b", "C", "A"]
mylist.sort()
</snippet></ROW><ROW><id>36156</id><snippet>sorted()</snippet></ROW><ROW><id>36156</id><snippet>for x in sorted(mylist):
    print x
</snippet></ROW><ROW><id>36156</id><snippet>key</snippet></ROW><ROW><id>36156</id><snippet>cmp</snippet></ROW><ROW><id>36156</id><snippet>key</snippet></ROW><ROW><id>36156</id><snippet>cmp_to_key</snippet></ROW><ROW><id>36156</id><snippet>sorted(mylist, key=cmp_to_key(locale.strcoll))
</snippet></ROW><ROW><id>36156</id><snippet>import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8') # vary depending on your lang/locale
assert sorted((u'Ab', u'ad', u'aa'),
  key=cmp_to_key(locale.strcoll)) == [u'aa', u'Ab', u'ad']
</snippet></ROW><ROW><id>36156</id><snippet>lower()</snippet></ROW><ROW><id>36156</id><snippet># this is incorrect!
mylist.sort(key=lambda x: x.lower())
# alternative notation, a bit faster, but still wrong
mylist.sort(key=str.lower)
</snippet></ROW><ROW><id>36316</id><snippet>diff file1.py file2.py | mate
</snippet></ROW><ROW><id>36327</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>36327</id><snippet>"shell=True</snippet></ROW><ROW><id>36327</id><snippet>['svn', '--version']</snippet></ROW><ROW><id>36327</id><snippet>Popen</snippet></ROW><ROW><id>36648</id><snippet>unittest</snippet></ROW><ROW><id>36648</id><snippet>doctest</snippet></ROW><ROW><id>36648</id><snippet>nose</snippet></ROW><ROW><id>36648</id><snippet>unittest</snippet></ROW><ROW><id>36648</id><snippet>unittest</snippet></ROW><ROW><id>36648</id><snippet>doctest</snippet></ROW><ROW><id>36908</id><snippet>In [1]: def foo(*args):
   ...:     for a in args:
   ...:         print a
   ...:         
   ...:         

In [2]: foo(1)
1


In [4]: foo(1,2,3)
1
2
3
</snippet></ROW><ROW><id>36908</id><snippet>In [5]: def bar(**kwargs):
   ...:     for a in kwargs:
   ...:         print a, kwargs[a]
   ...:         
   ...:         

In [6]: bar(name="one", age=27)
age 27
name one
</snippet></ROW><ROW><id>36908</id><snippet>def foo(kind, *args, **kwargs):
   pass
</snippet></ROW><ROW><id>36908</id><snippet>In [9]: def foo(bar, lee):
   ...:     print bar, lee
   ...:     
   ...:     

In [10]: l = [1,2]

In [11]: foo(*l)
1 2
</snippet></ROW><ROW><id>36908</id><snippet>first, *rest = [1,2,3,4]
first, *l, last = [1,2,3,4]
</snippet></ROW><ROW><id>36935</id><snippet>from django.conf.urls.defaults import *
from django.views.generic.create_update import create_object

from my_products_app.models import Product

urlpatterns = patterns('',
    url(r'^admin/products/add/$', create_object, {'model': Product}))
</snippet></ROW><ROW><id>36935</id><snippet>&lt;form action="." method="POST"&gt;
  {{ form }}
  &lt;input type="submit" name="submit" value="add"&gt;
&lt;/form&gt;
</snippet></ROW><ROW><id>37009</id><snippet>Alias /</snippet></ROW><ROW><id>37512</id><snippet>import lxml.html
t = lxml.html.fromstring("...")
t.text_content()
</snippet></ROW><ROW><id>37571</id><snippet>bool</snippet></ROW><ROW><id>37571</id><snippet>def HTMLDecorator (obj):
    def html ():
        sep = cgi.escape (repr (obj))
        return sep.join (("&lt;H1&gt;", "&lt;/H1&gt;"))
    obj.html = html
    return obj
</snippet></ROW><ROW><id>37571</id><snippet>class HTMLDecorator(object):
    def __init__ (self, wrapped):
        self.__wrapped = wrapped

    def html (self):
        sep = cgi.escape (repr (self.__wrapped))
        return sep.join (("&lt;H1&gt;", "&lt;/H1&gt;"))

    def __getattr__ (self, name):
        return getattr (self.__wrapped, name)

    def __setattr__ (self, name, value):
        if not name.startswith ('_HTMLDecorator__'):
            setattr (self.__wrapped, name, value)
            return
        super (HTMLDecorator, self).__setattr__ (name, value)

    def __delattr__ (self, name):
        delattr (self.__wraped, name)
</snippet></ROW><ROW><id>38222</id><snippet>Popen</snippet></ROW><ROW><id>38222</id><snippet>Popen</snippet></ROW><ROW><id>38222</id><snippet>ProccesOpen</snippet></ROW><ROW><id>38230</id><snippet> &gt;&gt;&gt; import os.path
 &gt;&gt;&gt; os.path.exists("/proc/0")
 False
 &gt;&gt;&gt; os.path.exists("/proc/12")
 True
</snippet></ROW><ROW><id>38276</id><snippet>MyClass</snippet></ROW><ROW><id>38276</id><snippet>classmethod</snippet></ROW><ROW><id>38516</id><snippet>def f(in_str):
    out_str = in_str.upper()
    return True, out_str # Creates tuple automatically

succeeded, b = f("a") # Automatic tuple unpacking
</snippet></ROW><ROW><id>38718</id><snippet>TIMESTAMP WITH (LOCAL) TIME ZONE</snippet></ROW><ROW><id>38718</id><snippet>TIMESTAMP</snippet></ROW><ROW><id>38718</id><snippet>TO_CHAR</snippet></ROW><ROW><id>38718</id><snippet>TIMESTAMP</snippet></ROW><ROW><id>38718</id><snippet>TIMESTAMP WITH TIME ZONE</snippet></ROW><ROW><id>38718</id><snippet>TIMESTAMP</snippet></ROW><ROW><id>38718</id><snippet>TIMESTAMP WITH TIME ZONE</snippet></ROW><ROW><id>38718</id><snippet>TIMESTAMP</snippet></ROW><ROW><id>38916</id><snippet>from django import forms
from my_app.models import Product
from django.contrib.admin import widgets                                       


class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
    def __init__(self, *args, **kwargs):
        super(ProductForm, self).__init__(*args, **kwargs)
        self.fields['mydate'].widget = widgets.AdminDateWidget()
        self.fields['mytime'].widget = widgets.AdminTimeWidget()
        self.fields['mydatetime'].widget = widgets.AdminSplitDateTime()
</snippet></ROW><ROW><id>38916</id><snippet>&lt;script type="text/javascript" src="/my_admin/jsi18n/"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/media/admin/js/core.js"&gt;&lt;/script&gt;
</snippet></ROW><ROW><id>38916</id><snippet>&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/forms.css"/&gt;
&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/base.css"/&gt;
&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/global.css"/&gt;
&lt;link rel="stylesheet" type="text/css" href="/media/admin/css/widgets.css"/&gt;
</snippet></ROW><ROW><id>38916</id><snippet>(r'^my_admin/jsi18n', 'django.views.i18n.javascript_catalog'),
</snippet></ROW><ROW><id>38916</id><snippet>{% load adminmedia %} /* At the top of the template. */

/* In the head section of the template. */
&lt;script type="text/javascript"&gt;
window.__admin_media_prefix__ = "{% filter escapejs %}{% admin_media_prefix %}{% endfilter %}";
&lt;/script&gt;
</snippet></ROW><ROW><id>38990</id><snippet>z = dict(x.items() + y.items())
</snippet></ROW><ROW><id>38990</id><snippet>z</snippet></ROW><ROW><id>38990</id><snippet>b</snippet></ROW><ROW><id>38990</id><snippet>y</snippet></ROW><ROW><id>38990</id><snippet>&gt;&gt;&gt; x = {'a':1, 'b': 2}
&gt;&gt;&gt; y = {'b':10, 'c': 11}
&gt;&gt;&gt; z = dict(x.items() + y.items())
&gt;&gt;&gt; z
{'a': 1, 'c': 11, 'b': 10}
</snippet></ROW><ROW><id>38990</id><snippet>z</snippet></ROW><ROW><id>38990</id><snippet>&gt;&gt;&gt; z = dict(list(x.items()) + list(y.items()))
&gt;&gt;&gt; z
{'a': 1, 'c': 11, 'b': 10}
</snippet></ROW><ROW><id>39110</id><snippet>from tempfile import mkstemp
from shutil import move
from os import remove, close

def replace(file_path, pattern, subst):
    #Create temp file
    fh, abs_path = mkstemp()
    new_file = open(abs_path,'w')
    old_file = open(file_path)
    for line in old_file:
        new_file.write(line.replace(pattern, subst))
    #close temp file
    new_file.close()
    close(fh)
    old_file.close()
    #Remove original file
    remove(file_path)
    #Move new file
    move(abs_path, file_path)
</snippet></ROW><ROW><id>40173</id><snippet>window</snippet></ROW><ROW><id>40173</id><snippet>globals()</snippet></ROW><ROW><id>40173</id><snippet>globals()["foo"]
</snippet></ROW><ROW><id>40173</id><snippet>window["foo"]
</snippet></ROW><ROW><id>40593</id><snippet>try:
   cursor.execute("select 1 / 0 from dual")
except cx_Oracle.DatabaseError, exc:
   error, = exc
   print "Code:", error.code
   print "Message:", error.message
</snippet></ROW><ROW><id>40593</id><snippet>Code: 1476
Message: ORA-01476: divisor is equal to zero
</snippet></ROW><ROW><id>41707</id><snippet>job={}
job['jobid'], job['label'], job['username']=&lt;querycode&gt;
</snippet></ROW><ROW><id>42597</id><snippet>re.sub</snippet></ROW><ROW><id>42597</id><snippet>sub(pattern, repl, string[, count])
</snippet></ROW><ROW><id>42597</id><snippet>re.MULTILINE</snippet></ROW><ROW><id>42597</id><snippet>re.sub(re.compile('^//', re.MULTILINE), '', s)
</snippet></ROW><ROW><id>42597</id><snippet>flags</snippet></ROW><ROW><id>42597</id><snippet>re.sub(pattern, repl, string[, count, flags])
</snippet></ROW><ROW><id>42597</id><snippet>re.sub('^//', '', s, flags=re.MULTILINE)
</snippet></ROW><ROW><id>43172</id><snippet>def check_commit_msg(local, master, old_revno, old_revid, new_revno, new_revid):
    branch = local or master
    revision = branch.repository.get_revision(new_revid)
    print revision.message
</snippet></ROW><ROW><id>43312</id><snippet>reverse(viewname, urlconf=None, args=None, kwargs=None)
</snippet></ROW><ROW><id>43364</id><snippet>import os

def doc_to_text_catdoc(filename):
    (fi, fo, fe) = os.popen3('catdoc -w "%s"' % filename)
    fi.close()
    retval = fo.read()
    erroroutput = fe.read()
    fo.close()
    fe.close()
    if not erroroutput:
        return retval
    else:
        raise OSError("Executing the command caused an error: %s" % erroroutput)

# similar doc_to_text_antiword()
</snippet></ROW><ROW><id>43663</id><snippet>&gt;&gt;&gt; import calendar
&gt;&gt;&gt; calendar.monthrange(2002,1)
(1, 31)
&gt;&gt;&gt; calendar.monthrange(2008,2)
(4, 29)
&gt;&gt;&gt; calendar.monthrange(2100,2)
(0, 28)
</snippet></ROW><ROW><id>43663</id><snippet>calendar.monthrange(year, month)[1]
</snippet></ROW><ROW><id>43794</id><snippet>-2</snippet></ROW><ROW><id>44095</id><snippet>__init__.py</snippet></ROW><ROW><id>44381</id><snippet>import inspect

def get_subclasses(mod, cls):
    """Yield the classes in module ``mod`` that inherit from ``cls``"""
    for name, obj in inspect.getmembers(mod):
        if hasattr(obj, "__bases__") and cls in obj.__bases__:
            yield obj
</snippet></ROW><ROW><id>44781</id><snippet>myList = ['a','b','c','d']
myString = ",".join(myList )
</snippet></ROW><ROW><id>45126</id><snippet>from project import Project
</snippet></ROW><ROW><id>45126</id><snippet>controllers/__init__.py</snippet></ROW><ROW><id>45126</id><snippet>project</snippet></ROW><ROW><id>45126</id><snippet>from .project import Project
</snippet></ROW><ROW><id>46442</id><snippet>sqlalchemy.default.url = [connection string here]
sqlalchemy.pool_recycle = 1800
</snippet></ROW><ROW><id>46442</id><snippet>environment.py</snippet></ROW><ROW><id>46442</id><snippet>sqlalchemy.default</snippet></ROW><ROW><id>46442</id><snippet>pool_recycle</snippet></ROW><ROW><id>46442</id><snippet>sqlalchemy.default.pool_recycle = 1800
</snippet></ROW><ROW><id>47304</id><snippet>get_absolute_url</snippet></ROW><ROW><id>47304</id><snippet>(r'^manage/products/add/$', create_object, {'model': Product, 'post_save_redirect': ''}, "create-product"),
</snippet></ROW><ROW><id>47304</id><snippet>{% url create-product %}
</snippet></ROW><ROW><id>47826</id><snippet>def gen():
    return (something for something in get_some_stuff())

print gen()[:2]     # generators don't support indexing or slicing
print [5,6] + gen() # generators can't be added to lists
</snippet></ROW><ROW><id>48806</id><snippet>core.exceptions</snippet></ROW><ROW><id>48806</id><snippet>python setup.py install</snippet></ROW><ROW><id>49169</id><snippet>distutils</snippet></ROW><ROW><id>49169</id><snippet>setup.py</snippet></ROW><ROW><id>49169</id><snippet>python setup.py bdist_egg</snippet></ROW><ROW><id>49953</id><snippet>[line.replace("spam","eggs") for line in open("somefile.txt") if line.startswith("nee")]</snippet></ROW><ROW><id>49953</id><snippet>people.sort(key=lambda p: p.age)</snippet></ROW><ROW><id>49953</id><snippet>Array.sort</snippet></ROW><ROW><id>49953</id><snippet>Student(name="Eli", age=25)</snippet></ROW><ROW><id>49953</id><snippet>spam, eggs = nee()</snippet></ROW><ROW><id>49953</id><snippet>Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse("test.xml");</snippet></ROW><ROW><id>49953</id><snippet>doc = parse("test.xml")</snippet></ROW><ROW><id>50425</id><snippet>from google.appengine.ext import webapp

register = webapp.template.create_template_register()

def hash(h,key):
    if key in h:
        return h[key]
    else:
        return None

register.filter(hash)
</snippet></ROW><ROW><id>50425</id><snippet>webapp.template.register_template_library('django_hack')
</snippet></ROW><ROW><id>50425</id><snippet>{{ user|hash:item }}
</snippet></ROW><ROW><id>50507</id><snippet>svn:eol-style</snippet></ROW><ROW><id>50905</id><snippet>execfile("p2.py")
</snippet></ROW><ROW><id>50905</id><snippet>import inspect, os
print inspect.getfile(inspect.currentframe()) # script filename (usually with path)
print os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe()))) # script directory
</snippet></ROW><ROW><id>50929</id><snippet>&gt;&gt;&gt; import weakref
&gt;&gt;&gt; class Object:
...     pass
...
&gt;&gt;&gt; o = Object()
&gt;&gt;&gt; r = weakref.ref(o)
&gt;&gt;&gt; # if the reference is still active, r() will be o, otherwise None
&gt;&gt;&gt; do_something_with_o(r())
</snippet></ROW><ROW><id>50929</id><snippet>weakref.proxy</snippet></ROW><ROW><id>50929</id><snippet>ReferenceError</snippet></ROW><ROW><id>51029</id><snippet>t1, t2 = datetime.time(...), datetime.time(...)

t1_ms = (t1.hour*60*60 + t1.minute*60 + t1.second)*1000 + t1.microsecond
t2_ms = (t2.hour*60*60 + t2.minute*60 + t2.second)*1000 + t2.microsecond

delta_ms = max([t1_ms, t2_ms]) - min([t1_ms, t2_ms])
</snippet></ROW><ROW><id>51240</id><snippet>import lxml.html
t = lxml.html.parse(url)
print t.find(".//title").text
</snippet></ROW><ROW><id>51415</id><snippet>methodB("argvalue", **kwargs)
</snippet></ROW><ROW><id>51523</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.path.abspath("mydir/myfile.txt")
</snippet></ROW><ROW><id>52006</id><snippet>create materialized view mv_so_x 
build immediate 
refresh complete 
START WITH SYSDATE NEXT SYSDATE + 1/24/60
 as select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;
</snippet></ROW><ROW><id>52006</id><snippet>SQL&gt; select * from mv_so_x;

no rows selected

Elapsed: 00:00:00.00
</snippet></ROW><ROW><id>52006</id><snippet>SQL&gt; select count(*),avg(a),avg(b),avg(c),avg(d) from so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:05.74
SQL&gt; select * from mv_so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:00.00
SQL&gt;
</snippet></ROW><ROW><id>52006</id><snippet>SQL&gt; insert into so_x values (1,2,3,4,5);

1 row created.

Elapsed: 00:00:00.00
SQL&gt; commit;

Commit complete.

Elapsed: 00:00:00.00
SQL&gt; select * from mv_so_x;

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899459 7495.38839 22.2905454 5.00276131 2.13432836

Elapsed: 00:00:00.00
SQL&gt;
</snippet></ROW><ROW><id>52006</id><snippet>SQL&gt; /

  COUNT(*)     AVG(A)     AVG(B)     AVG(C)     AVG(D)
---------- ---------- ---------- ---------- ----------
   1899460 7495.35823 22.2905352 5.00276078 2.17647059

Elapsed: 00:00:00.00
SQL&gt;
</snippet></ROW><ROW><id>53180</id><snippet>a = dostuff(blahblah1, blahblah2, blahblah3, blahblah4, blahblah5, 
            blahblah6, blahblah7)
</snippet></ROW><ROW><id>53180</id><snippet>if a == True and \
   b == False
</snippet></ROW><ROW><id>53180</id><snippet>a = '1' + '2' + '3' + \
    '4' + '5'
</snippet></ROW><ROW><id>53180</id><snippet>a = ('1' + '2' + '3' +
    '4' + '5')
</snippet></ROW><ROW><id>53246</id><snippet>&gt;&gt;&gt; from BeautifulSoup import BeautifulSoup    
&gt;&gt;&gt; html = "&lt;html&gt;ÄÄRITALO!&lt;/html&gt;"
&gt;&gt;&gt; soup = BeautifulSoup(html, convertEntities=BeautifulSoup.HTML_ENTITIES)
&gt;&gt;&gt; print soup.contents[0].string
ÄÄRITALO!
</snippet></ROW><ROW><id>53246</id><snippet>"some_string".decode('html_entities')</snippet></ROW><ROW><id>53322</id><snippet>def isbound(method):
    return method.im_self is not None

def instance(bounded_method):
    return bounded_method.im_self
</snippet></ROW><ROW><id>53322</id><snippet>im_self</snippet></ROW><ROW><id>53322</id><snippet>None</snippet></ROW><ROW><id>53322</id><snippet>im_self</snippet></ROW><ROW><id>53322</id><snippet>im_class</snippet></ROW><ROW><id>53322</id><snippet>im_func</snippet></ROW><ROW><id>53322</id><snippet>im_self</snippet></ROW><ROW><id>53322</id><snippet>__self__</snippet></ROW><ROW><id>53322</id><snippet>im_func</snippet></ROW><ROW><id>53322</id><snippet>__func__</snippet></ROW><ROW><id>53522</id><snippet>if not a:
  print "List is empty"
</snippet></ROW><ROW><id>54873</id><snippet>x</snippet></ROW><ROW><id>54873</id><snippet>x.__class__</snippet></ROW><ROW><id>54873</id><snippet>x</snippet></ROW><ROW><id>54873</id><snippet>type(x)</snippet></ROW><ROW><id>54873</id><snippet>&lt;type 'instance'&gt;</snippet></ROW><ROW><id>54873</id><snippet>type(x)</snippet></ROW><ROW><id>54873</id><snippet>x.__class__</snippet></ROW><ROW><id>54873</id><snippet>object</snippet></ROW><ROW><id>54873</id><snippet>object</snippet></ROW><ROW><id>55385</id><snippet>class Whois(object):
    _whois_by_query_cache = {}

    def __init__(self, query):
        """Initializes the instance variables to defaults. See :meth:`lookup`
        for details on how to submit the query."""
        self.query = query
        self.domain = None
        # ... other fields.

    def lookup(self):
        """Submits the `whois` query and stores results internally."""
        # ... implementation
</snippet></ROW><ROW><id>55424</id><snippet>from BeautifulSoup import BeautifulSoup

#Or retrieve it from the web, etc. 
html_data = open('/yourwebsite/page.html','r').read()

#Create the soup object from the HTML data
soup = BeautifulSoup(html_data)
fooId = soup.find('input',name='fooId',type='hidden') #Find the proper tag
value = fooId.attrs[2][1] #The value of the third attribute of the desired tag 
                          #or index it directly via fooId['value']
</snippet></ROW><ROW><id>56190</id><snippet>LIGHT_MESSAGES = {
    'English': "There are %(number_of_lights)s lights.",
    'Pirate':  "Arr! Thar be %(number_of_lights)s lights."
}

def lights_message(language, number_of_lights):
    """Return a language-appropriate string reporting the light count."""
    return LIGHT_MESSAGES[language] % locals()

def is_pirate(message):
    """Return True if the given message sounds piratical."""
    return re.search(r"(?i)(arr|avast|yohoho)!", message) is not None
</snippet></ROW><ROW><id>56470</id><snippet>from xml.dom.minidom import parseString

doc = parseString("""&lt;html&gt;
    &lt;head&gt;
        &lt;script type="text/javascript"&gt;
            var a = 'I love &amp;aacute; letters'
        &lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;And I like the fact that 3 &gt; 1&lt;/h1&gt;
    &lt;/body&gt;
    &lt;/html&gt;""")

with open("foo.xhtml", "w") as f:
    f.write( doc.toxml() )
</snippet></ROW><ROW><id>56470</id><snippet>var a = '%(message)s'
</snippet></ROW><ROW><id>56470</id><snippet>&lt;/html&gt;""" % {"message": "I love &amp;aacute; letters"})
</snippet></ROW><ROW><id>56510</id><snippet>(gdb) thr 2
[Switching to thread 2 (process 6159 thread 0x3f1b)]
(gdb) backtrace
....
</snippet></ROW><ROW><id>56548</id><snippet>dev</snippet></ROW><ROW><id>56548</id><snippet>import math
from datetime import datetime, timedelta, date
from random import gauss

how_many_responses = 1000
start_date = date(2008, 5, 1)
end_date = date(2008, 6, 1)
num_days = (end_date - start_date).days + 1
timeline = [start_date + timedelta(i) for i in xrange(num_days)]

def weibull(x, k, l):
    return (k / l) * (x / l)**(k-1) * math.e**(-(x/l)**k)

dev = 0.1
samples = [i * 1.25/(num_days-1) for i in range(num_days)]
probs = [weibull(i, 2, 0.5) for i in samples]
noise = [gauss(0, dev) for i in samples]
simdata = [max(0., e + n) for (e, n) in zip(probs, noise)]
events = [int(p * (how_many_responses / sum(probs))) for p in simdata]

histogram = zip(timeline, events)

print '\n'.join((d.strftime('%Y-%m-%d ') + "*" * c) for d,c in histogram)
</snippet></ROW><ROW><id>56833</id><snippet>'%.1f' % round(n, 1) # gives you '5.6'
</snippet></ROW><ROW><id>57833</id><snippet>in</snippet></ROW><ROW><id>57833</id><snippet>foo = 12
foo in (obj.id for obj in bar)
</snippet></ROW><ROW><id>57833</id><snippet>obj.id == 12</snippet></ROW><ROW><id>57833</id><snippet>bar</snippet></ROW><ROW><id>57833</id><snippet>bar</snippet></ROW><ROW><id>57833</id><snippet>hasattr</snippet></ROW><ROW><id>57833</id><snippet>bar</snippet></ROW><ROW><id>57833</id><snippet>id</snippet></ROW><ROW><id>57833</id><snippet>foo = 12
foo in (obj.id for obj in bar if hasattr(obj, 'id'))
</snippet></ROW><ROW><id>58129</id><snippet>re.compile</snippet></ROW><ROW><id>58129</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.compile('he(lo')
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\Python25\lib\re.py", line 180, in compile
    return _compile(pattern, flags)
  File "C:\Python25\lib\re.py", line 233, in _compile
    raise error, v # invalid expression
sre_constants.error: unbalanced parenthesis
</snippet></ROW><ROW><id>58129</id><snippet>error</snippet></ROW><ROW><id>58701</id><snippet>"""@package docstring
Documentation for this module.

More details.
"""

def func():
    """Documentation for a function.

    More details.
    """
    pass
</snippet></ROW><ROW><id>58701</id><snippet>#</snippet></ROW><ROW><id>58701</id><snippet>## @package pyexample
#  Documentation for this module.
#
#  More details.

## Documentation for a function.
#
#  More details.
def func():
    pass
</snippet></ROW><ROW><id>58701</id><snippet>OPTMIZE_OUTPUT_JAVA</snippet></ROW><ROW><id>58701</id><snippet>YES</snippet></ROW><ROW><id>59778</id><snippet>from random import randint    

mcworks = []

for n in xrange(NUM_ITERATIONS):
    mctest = [randint(0, 100) for i in xrange(5)]
    if sum(mctest[:3])/3 == mcavg[2]:
        mcworks.append(mctest) # mcavg is real data
</snippet></ROW><ROW><id>59778</id><snippet>mctest</snippet></ROW><ROW><id>59778</id><snippet>random.randint</snippet></ROW><ROW><id>59778</id><snippet>sum</snippet></ROW><ROW><id>59778</id><snippet>mcworks</snippet></ROW><ROW><id>59841</id><snippet>for e in s:
    break
# e is now an element from s
</snippet></ROW><ROW><id>59841</id><snippet>e = iter(s).next() # was s.__iter__(s).next() 
                   # - thanks to J.F. Sebastian for better syntax!
</snippet></ROW><ROW><id>60211</id><snippet>def f(x):
    return {
        'a': 1,
        'b': 2,
    }[x]
</snippet></ROW><ROW><id>60506</id><snippet>__init__.py</snippet></ROW><ROW><id>60506</id><snippet>import</snippet></ROW><ROW><id>60506</id><snippet>__init__.py</snippet></ROW><ROW><id>60506</id><snippet>setup.py</snippet></ROW><ROW><id>60506</id><snippet>distutils.setup</snippet></ROW><ROW><id>60506</id><snippet>setup</snippet></ROW><ROW><id>60506</id><snippet>from distutils import setup
import os

for path in [my_package_directories]:
    filename = os.path.join(pagh, '__init__.py')
    if not os.path.exists(filename):
        init = open(filename, 'w')
        init.close()

setup(
...
)
</snippet></ROW><ROW><id>60506</id><snippet>__init__.py</snippet></ROW><ROW><id>60723</id><snippet>#!/usr/bin/env python

TEST1="""
#include "Foo.h"
#define bar foo\\
    x
#include "Bar.h"
"""

TEST2="""
#define bar foo
#define x 1 \\
    12 \\
    2 \\\\ 3
Foobar
"""

TEST3="""
#define foo(x) if(x) \\
doSomething(x)
"""

TEST4="""
#define foo(x) if(x) \\
doSomething(x)
normalCode();
"""

import re
matcher = re.compile(r"^[ \t]*#define(.*\\\n)+.*$",re.MULTILINE)

def extractDefines(s):
    mo = matcher.search(s)
    if not mo:
    	print mo
    	return
    print mo.group(0)

extractDefines(TEST1)
extractDefines(TEST2)
extractDefines(TEST3)
extractDefines(TEST4)
</snippet></ROW><ROW><id>60723</id><snippet>r"^[ \t]*#define(.*\\\n)+.*$"
</snippet></ROW><ROW><id>60753</id><snippet>from threading import Thread
from SocketServer import ThreadingMixIn
from BaseHTTPServer import HTTPServer, BaseHTTPRequestHandler

class Handler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.send_header("Content-type", "text/plain")
        self.end_headers()
        self.wfile.write("Hello World!")

class ThreadingHTTPServer(ThreadingMixIn, HTTPServer):
    pass

def serve_on_port(port):
    server = ThreadingHTTPServer(("localhost",port), Handler)
    server.serve_forever()

Thread(target=serve_on_port, args=[1111]).start()
serve_on_port(2222)
</snippet></ROW><ROW><id>60815</id><snippet>from  sqlalchemy.sql.expression import func, select

select.order_by(func.random()) # for PostgreSQL, SQLite

select.order_by(func.rand()) # for MySQL

select.order_by('dbms_random.value') # For Oracle
</snippet></ROW><ROW><id>60815</id><snippet>.limit()</snippet></ROW><ROW><id>60862</id><snippet>dict</snippet></ROW><ROW><id>60862</id><snippet>collections</snippet></ROW><ROW><id>61636</id><snippet>divmod()</snippet></ROW><ROW><id>61636</id><snippet>q, r = divmod(x, y) # ((x - x%y)/y, x%y) Invariant: div*y + mod == x
</snippet></ROW><ROW><id>61636</id><snippet>zip</snippet></ROW><ROW><id>61636</id><snippet>enumerate</snippet></ROW><ROW><id>61636</id><snippet>dict.items</snippet></ROW><ROW><id>61636</id><snippet>for i, e in enumerate([1, 3, 3]):
    print "index=%d, element=%s" % (i, e)

# reverse keys and values in a dictionary
d = dict((v, k) for k, v in adict.items()) # or 
d = dict(zip(adict.values(), adict.keys()))
</snippet></ROW><ROW><id>61636</id><snippet>(x, y)</snippet></ROW><ROW><id>61636</id><snippet>Point(x, y)</snippet></ROW><ROW><id>61636</id><snippet>&gt;&gt;&gt; import collections
&gt;&gt;&gt; Point = collections.namedtuple('Point', 'x y')
&gt;&gt;&gt; x, y = Point(0, 1)
&gt;&gt;&gt; p = Point(x, y)
&gt;&gt;&gt; x, y, p
(0, 1, Point(x=0, y=1))
&gt;&gt;&gt; p.x, p.y, p[0], p[1]
(0, 1, 0, 1)
&gt;&gt;&gt; for i in p:
...   print(i)
...
0
1
</snippet></ROW><ROW><id>62094</id><snippet>$ time script.php
HI!

real    0m3.218s
user    0m0.080s
sys     0m0.064s
</snippet></ROW><ROW><id>62680</id><snippet>class Foo(object):
...
</snippet></ROW><ROW><id>62680</id><snippet>__dict__</snippet></ROW><ROW><id>62680</id><snippet>__dict__</snippet></ROW><ROW><id>62680</id><snippet>&gt;&gt;&gt; class A(object):
...   def __init__(self):
...     self.b = 1
...     self.c = 2
...   def do_nothing(self):
...     pass
...
&gt;&gt;&gt; a = A()
&gt;&gt;&gt; a.__dict__
{'c': 2, 'b': 1}
</snippet></ROW><ROW><id>62680</id><snippet> class Foo(dict):
     def __init__(self):
         pass
     def __getattr__(self, attr):
         return self[attr]

     # etc...
</snippet></ROW><ROW><id>64163</id><snippet>class dog(object):
	def __init__(self, height, width, lenght):
		self.height = height
		self.width = width
		self.length = length

	def revert(self):
		self.height = 1
		self.width = 2
		self.length = 3

dog1 = dog(5, 6, 7)
dog2 = dog(2, 3, 4)

dog1.revert()
</snippet></ROW><ROW><id>64890</id><snippet>#! /usr/local/bin/python


SMTPserver = 'smtp.att.yahoo.com'
sender =     'me@my_email_domain.net'
destination = ['recipient@her_email_domain.com']

USERNAME = "USER_NAME_FOR_INTERNET_SERVICE_PROVIDER"
PASSWORD = "PASSWORD_INTERNET_SERVICE_PROVIDER"

# typical values for text_subtype are plain, html, xml
text_subtype = 'plain'


content="""\
Test message
"""

subject="Sent from Python"

import sys
import os
import re

from smtplib import SMTP_SSL as SMTP       # this invokes the secure SMTP protocol (port 465, uses SSL)
# from smtplib import SMTP                  # use this for standard SMTP protocol   (port 25, no encryption)
from email.MIMEText import MIMEText

try:
    msg = MIMEText(content, text_subtype)
    msg['Subject']=       subject
    msg['From']   = sender # some SMTP servers will do this automatically, not all

    conn = SMTP(SMTPserver)
    conn.set_debuglevel(False)
    conn.login(USERNAME, PASSWORD)
    try:
        conn.sendmail(sender, destination, msg.as_string())
    finally:
        conn.close()

except Exception, exc:
    sys.exit( "mail failed; %s" % str(exc) ) # give a error message
</snippet></ROW><ROW><id>65440</id><snippet>sre</snippet></ROW><ROW><id>65716</id><snippet>class Parent(object):
    def bar(self):
        print "bar"

class MetaFoo(type):
    def __new__(cls, name, bases, dict):
    	return type(name, (Parent,) + bases, dict)

class Foo(object):
    __metaclass__ = MetaFoo

if __name__ == "__main__":
    f = Foo()
    f.bar()
    print f.bar.func_name
</snippet></ROW><ROW><id>66547</id><snippet>from ctypes import *
libc = CDLL("libc.so.6")  // see link above for Win32 help
libc.strcasecmp("THIS", "this") // returns 0
libc.strcasecmp("THIS", "THAT") // returns 8
</snippet></ROW><ROW><id>66847</id><snippet>def convert_to_classmethod(method):
    return classmethod(method.im_func)

class bar(foo):
    meth1 = convert_to_classmethod(foo.meth1)
</snippet></ROW><ROW><id>67692</id><snippet>import imp

foo = imp.load_source('module.name', '/path/to/file.py')
foo.MyClass()
</snippet></ROW><ROW><id>67692</id><snippet>import importlib.machinery

loader = importlib.machinery.SourceFileLoader("module.name", "/path/to/file.py")
foo = loader.load_module("module.name")
foo.MyClass()
</snippet></ROW><ROW><id>67743</id><snippet>class MyGObjectClass(gobject.GObject):
    __gsignals__ = {
      "some-signal": (gobject.SIGNAL_RUN_FIRST, gobject.TYPE_NONE, (object, )),
    }
</snippet></ROW><ROW><id>67743</id><snippet>gobject.signal_new</snippet></ROW><ROW><id>68324</id><snippet>this.</snippet></ROW><ROW><id>68324</id><snippet>self.__class__</snippet></ROW><ROW><id>68324</id><snippet>self.__dict__</snippet></ROW><ROW><id>68365</id><snippet>import os
os.system("scp FILE USER@SERVER:PATH")
#e.g. os.system("scp foo.bar joe@srvr.net:/path/to/foo.bar")
</snippet></ROW><ROW><id>68524</id><snippet>from Tkinter import Tk, Button

def goodbye_world():
    print "Goodbye World!\nWait, I changed my mind!"
    button.configure(text = "Hello World!", command=hello_world)

def hello_world():
    print "Hello World!\nWait, I changed my mind!"
    button.configure(text = "Goodbye World!", command=goodbye_world)

root = Tk()
button = Button(root, text="Hello World!", command=hello_world)
button.pack()

root.mainloop()
</snippet></ROW><ROW><id>68524</id><snippet>command</snippet></ROW><ROW><id>68524</id><snippet>.configure</snippet></ROW><ROW><id>68524</id><snippet>name</snippet></ROW><ROW><id>68672</id><snippet>&gt;&gt;&gt; class MyClass:
...     i = 3
...
&gt;&gt;&gt; MyClass.i
3 
</snippet></ROW><ROW><id>68672</id><snippet>&gt;&gt;&gt; m = MyClass()
&gt;&gt;&gt; m.i = 4
&gt;&gt;&gt; MyClass.i, m.i
&gt;&gt;&gt; (3, 4)
</snippet></ROW><ROW><id>68672</id><snippet>class C:
    @staticmethod
    def f(arg1, arg2, ...): ...
</snippet></ROW><ROW><id>68796</id><snippet>import socket
sock = socket.socket()
sock.connect((address, port))
</snippet></ROW><ROW><id>68817</id><snippet>&gt;&gt;&gt; def a():
...     x=[1,2,3,4,5]
...     y=x[2]
...
&gt;&gt;&gt; def b():
...     x=(1,2,3,4,5)
...     y=x[2]
...
&gt;&gt;&gt; import dis
&gt;&gt;&gt; dis.dis(a)
  2           0 LOAD_CONST               1 (1)
              3 LOAD_CONST               2 (2)
              6 LOAD_CONST               3 (3)
              9 LOAD_CONST               4 (4)
             12 LOAD_CONST               5 (5)
             15 BUILD_LIST               5
             18 STORE_FAST               0 (x)

  3          21 LOAD_FAST                0 (x)
             24 LOAD_CONST               2 (2)
             27 BINARY_SUBSCR
             28 STORE_FAST               1 (y)
             31 LOAD_CONST               0 (None)
             34 RETURN_VALUE
&gt;&gt;&gt; dis.dis(b)
  2           0 LOAD_CONST               6 ((1, 2, 3, 4, 5))
              3 STORE_FAST               0 (x)

  3           6 LOAD_FAST                0 (x)
              9 LOAD_CONST               2 (2)
             12 BINARY_SUBSCR
             13 STORE_FAST               1 (y)
             16 LOAD_CONST               0 (None)
             19 RETURN_VALUE
</snippet></ROW><ROW><id>70271</id><snippet>import wsgiref.handlers

from google.appengine.ext import webapp
from myapp.views import *

application = webapp.WSGIApplication([
  ('/', IndexHandler),
  ('/foo', FooHandler)
], debug=True)

def main():
  wsgiref.handlers.CGIHandler().run(application)
</snippet></ROW><ROW><id>70271</id><snippet>import os
import datetime
import logging
import time

from google.appengine.api import urlfetch
from google.appengine.ext.webapp import template
from google.appengine.api import users
from google.appengine.ext import webapp
from models import *

class IndexHandler(webapp.RequestHandler):
  def get(self):
    date = "foo"
    # Do some processing		
    template_values = {'data': data }
    path = os.path.join(os.path.dirname(__file__) + '/../templates/', 'main.html')
    self.response.out.write(template.render(path, template_values))

class FooHandler(webapp.RequestHandler):
  def get(self):
    #logging.debug("start of handler")
</snippet></ROW><ROW><id>70271</id><snippet>from google.appengine.ext import db

class SampleModel(db.Model):
</snippet></ROW><ROW><id>70833</id><snippet>import sys
print sys.argv
</snippet></ROW><ROW><id>70900</id><snippet>&gt;&gt;&gt; class Foo(object):
...     def __init__(self):
...         self.__baz = 42
...     def foo(self):
...         print self.__baz
...     
&gt;&gt;&gt; class Bar(Foo):
...     def __init__(self):
...         super(Bar, self).__init__()
...         self.__baz = 21
...     def bar(self):
...         print self.__baz
...
&gt;&gt;&gt; x = Bar()
&gt;&gt;&gt; x.foo()
42
&gt;&gt;&gt; x.bar()
21
&gt;&gt;&gt; print x.__dict__
{'_Bar__baz': 21, '_Foo__baz': 42}
</snippet></ROW><ROW><id>70915</id><snippet>try:
    from hashlib import sha as hasher
except ImportError:
    # You could probably exclude the try/except bit,
    # but older Python distros dont have hashlib.
    try:
        import sha as hasher
    except ImportError:
        import md5 as hasher


def hash_password(password):
    """Returns the hashed version of a string
    """
    return hasher.new( str(password) ).hexdigest()

def load_auth_file(path):
    """Loads a comma-seperated file.
    Important: make sure the username
    doesn't contain any commas!
    """
    # Open the file, or return an empty auth list.
    try:
        f = open(path)
    except IOError:
        print "Warning: auth file not found"
        return {}

    ret = {}
    for line in f.readlines():
        split_line = line.split(",")
        if len(split_line) &gt; 2:
            print "Warning: Malformed line:"
            print split_line
            continue # skip it..
        else:
            username, password = split_line
            ret[username] = password
        #end if
    #end for
    return ret

def main():
    auth_file = "/home/blah/.myauth.txt"
    u = raw_input("Username:")
    p = raw_input("Password:") # getpass is probably better..
    if auth_file.has_key(u.strip()):
        if auth_file[u] == hash_password(p):
            # The hash matches the stored one
            print "Welcome, sir!"
</snippet></ROW><ROW><id>70915</id><snippet>~/.myauth.txt</snippet></ROW><ROW><id>71161</id><snippet>import HTMLParser
</snippet></ROW><ROW><id>71161</id><snippet>import html.parser
</snippet></ROW><ROW><id>71161</id><snippet>import HTMLParser
</snippet></ROW><ROW><id>72180</id><snippet>HttpResponse</snippet></ROW><ROW><id>72180</id><snippet>application/x-zip-compressed</snippet></ROW><ROW><id>72180</id><snippet>application/octet-stream</snippet></ROW><ROW><id>72180</id><snippet>content-disposition</snippet></ROW><ROW><id>72596</id><snippet>import new

def copyfunc(func):
    return new.function(func.func_code, func.func_globals, func.func_name,
                        func.func_defaults, func.func_closure)

class Metaclass(type):
    def __new__(meta, name, bases, attrs):
        for key in attrs.keys():
            if key[0] == '_':
                skey = key[1:]
                for base in bases:
                    original = getattr(base, skey, None)
                    if original is not None:
                        copy = copyfunc(original)
                        copy.__doc__ = attrs[key].__doc__
                        attrs[skey] = copy
                        break
        return type.__new__(meta, name, bases, attrs)

class Class(object):
    __metaclass__ = Metaclass
    def execute(self):
        '''original doc-string'''
        return self._execute()

class Subclass(Class):
    def _execute(self):
        '''sub-class doc-string'''
        pass
</snippet></ROW><ROW><id>72957</id><snippet>openssl ocsp -whatever
</snippet></ROW><ROW><id>73050</id><snippet>newlist = sorted(list_to_be_sorted, key=lambda k: k['name']) 
</snippet></ROW><ROW><id>73050</id><snippet>from operator import itemgetter
newlist = sorted(list_to_be_sorted, key=itemgetter('name')) 
</snippet></ROW><ROW><id>73281</id><snippet>&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.pack('f', 3.141592654)
'\xdb\x0fI@'
&gt;&gt;&gt; struct.unpack('f', '\xdb\x0fI@')
(3.1415927410125732,)
&gt;&gt;&gt; struct.pack('4f', 1.0, 2.0, 3.0, 4.0)
'\x00\x00\x80?\x00\x00\x00@\x00\x00@@\x00\x00\x80@'
</snippet></ROW><ROW><id>73673</id><snippet>import sys
sys.exit()
</snippet></ROW><ROW><id>73673</id><snippet>sys</snippet></ROW><ROW><id>73673</id><snippet>sys.&lt;strong&gt;exit&lt;/strong&gt;([&lt;em&gt;arg&lt;/em&gt;])</snippet></ROW><ROW><id>73673</id><snippet>SystemExit</snippet></ROW><ROW><id>73673</id><snippet>try</snippet></ROW><ROW><id>73673</id><snippet>stderr</snippet></ROW><ROW><id>73673</id><snippet>sys.exit("some error message")</snippet></ROW><ROW><id>73673</id><snippet>exit()</snippet></ROW><ROW><id>74084</id><snippet>/usr/sbin/sendmail</snippet></ROW><ROW><id>74084</id><snippet>from email.mime.text import MIMEText
from subprocess import Popen, PIPE

msg = MIMEText("Here is the body of my message")
msg["From"] = "me@example.com"
msg["To"] = "you@example.com"
msg["Subject"] = "This is the subject."
p = Popen(["/usr/sbin/sendmail", "-t"], stdin=PIPE)
p.communicate(msg.as_string())
</snippet></ROW><ROW><id>75427</id><snippet>&gt;&gt;&gt; import random
&gt;&gt;&gt; print random.__file__
</snippet></ROW><ROW><id>75467</id><snippet>In [1]: class test(object):
   ...:     pass
   ...: 

In [2]: test.__name__
Out[2]: 'test'
</snippet></ROW><ROW><id>75507</id><snippet>inspect.isroutine( obj )
</snippet></ROW><ROW><id>75507</id><snippet>def isroutine(object):
    """Return true if the object is any kind of function or method."""
    return (isbuiltin(object)
            or isfunction(object)
            or ismethod(object)
            or ismethoddescriptor(object))
</snippet></ROW><ROW><id>75923</id><snippet>def get_cleaned_or_initial(self, fieldname):
        if hasattr(self, 'cleaned_data'):
            return self.cleaned_data.get(fieldname)
        else:
            return self[fieldname].field.initial
</snippet></ROW><ROW><id>75923</id><snippet>if request.method == 'GET':
    form = MyForm()
else:
    form = MyForm(request.method.POST)
    form.is_valid()

do_query(form.get_cleaned_or_initial('start_date'), form.get_cleaned_or_initial('end_date'))
</snippet></ROW><ROW><id>77612</id><snippet>id()</snippet></ROW><ROW><id>77612</id><snippet>id</snippet></ROW><ROW><id>77612</id><snippet>__builtin__</snippet></ROW><ROW><id>77612</id><snippet>id(...)

    id(object) -&gt; integer

    Return the identity of an object.  This is guaranteed to be unique among
    simultaneously existing objects.  (Hint: it's the object's memory
    address.)
</snippet></ROW><ROW><id>77898</id><snippet>class User(models.Model):
    name = models.CharField(max_length=128)

class Event(models.Model):
    name = models.CharField(max_length=128)
    members = models.ManyToManyField(User, through='Role')

    def __unicode__(self):
        return self.name

class Role(models.Model):
    person = models.ForeignKey(User)
    group = models.ForeignKey(Event)
    date_joined = models.DateField()
    invite_reason = models.CharField(max_length=64)
</snippet></ROW><ROW><id>78482</id><snippet>import subprocess
import sys

file = sys.argv[1]
p1 = subprocess.Popen(['hg', 'cat', file], stdout=subprocess.PIPE)
p2 = subprocess.Popen([
    'gvimdiff',
    '/proc/self/fd/%s' % p1.stdout.fileno(),
    file])
p2.wait()
</snippet></ROW><ROW><id>78482</id><snippet>file = sys.argv[1]
p1 = subprocess.Popen(['hg', 'cat', file], stdout=subprocess.PIPE)
p2 = subprocess.Popen(['diff', '-', file], stdin=p1.stdout)
diff_text = p2.communicate()[0]
</snippet></ROW><ROW><id>78858</id><snippet>class Foo(object):
    class __metaclass__(type):
        ....
</snippet></ROW><ROW><id>78858</id><snippet>class Group(object):
    class cls1(object):
       ...

    class cls2(object):
       ...
</snippet></ROW><ROW><id>78990</id><snippet>libmudflap</snippet></ROW><ROW><id>78990</id><snippet>gcc -fmudflap -lmudflap</snippet></ROW><ROW><id>79670</id><snippet>$ dig google.com txt
...snip...
;; ANSWER SECTION:
google.com. 	300	IN	TXT	"v=spf1 include:_netblocks.google.com ~all"
</snippet></ROW><ROW><id>79833</id><snippet>unittest.main()
</snippet></ROW><ROW><id>79833</id><snippet>unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(Test))
</snippet></ROW><ROW><id>79913</id><snippet>time.strftime("%Y-%m-%d %H:%M:%S", 
              time.gmtime(time.mktime(time.strptime("2008-09-17 14:04:00", 
                                                    "%Y-%m-%d %H:%M:%S"))))
</snippet></ROW><ROW><id>79913</id><snippet>time</snippet></ROW><ROW><id>79913</id><snippet>calendar</snippet></ROW><ROW><id>79913</id><snippet>time.strptime</snippet></ROW><ROW><id>79913</id><snippet>time.mktime</snippet></ROW><ROW><id>79913</id><snippet>time.gmtime</snippet></ROW><ROW><id>79913</id><snippet>calendar.timegm</snippet></ROW><ROW><id>79913</id><snippet>time.localtime</snippet></ROW><ROW><id>79985</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; shlex.split('this is "a test"')
['this', 'is', 'a test']
</snippet></ROW><ROW><id>81087</id><snippet>atexit</snippet></ROW><ROW><id>81087</id><snippet>import sys
import atexit

def clear_atexit_excepthook(exctype, value, traceback):
    atexit._exithandlers[:] = []
    sys.__excepthook__(exctype, value, traceback)

def helloworld():
    print "Hello world!"

sys.excepthook = clear_atexit_excepthook
atexit.register(helloworld)

raise Exception("Good bye cruel world!")
</snippet></ROW><ROW><id>81087</id><snippet>atexit</snippet></ROW><ROW><id>81274</id><snippet>myobject.</snippet></ROW><ROW><id>81274</id><snippet>X().</snippet></ROW><ROW><id>81274</id><snippet>X</snippet></ROW><ROW><id>81274</id><snippet>dir</snippet></ROW><ROW><id>85134</id><snippet>Host</snippet></ROW><ROW><id>85237</id><snippet>try:
   with open('filename'):
       process()
except IOError:
   print 'Oh dear.'
</snippet></ROW><ROW><id>85237</id><snippet>os.path.exists()</snippet></ROW><ROW><id>87622</id><snippet>import libxml2

DOC = """&lt;elements&gt;
    &lt;parent name="CategoryA"&gt;
        &lt;child value="a1"/&gt;
        &lt;child value="a2"/&gt;
        &lt;child value="a3"/&gt;
    &lt;/parent&gt;
    &lt;parent name="CategoryB"&gt;
        &lt;child value="b1"/&gt;
        &lt;child value="b2"/&gt;
        &lt;child value="b3"/&gt;
    &lt;/parent&gt;
&lt;/elements&gt;"""

doc = libxml2.parseDoc(DOC)

def getValues(cat):
    return [attr.content for attr in doc.xpathEval("/elements/parent[@name='%s']/child/@value" % (cat))]

print getValues("CategoryA")
</snippet></ROW><ROW><id>87622</id><snippet>['a1', 'a2', 'a3']
</snippet></ROW><ROW><id>88209</id><snippet>$ cat &gt; eg.sh 
export FOO="bar";
^D
$ bash eg.sh 
$ echo $FOO; 

$
</snippet></ROW><ROW><id>88209</id><snippet>bash 1 -&gt; hg -&gt; bash 2 ( shell script ) 
             -&gt; bash 3 ( env call )
</snippet></ROW><ROW><id>88346</id><snippet>class MyClass:
    def __init__(self, foo):
        if foo != 1:
            raise ValueError("foo is not equal to 1!")

import unittest
class TestFoo(unittest.TestCase):
    def testInsufficientArgs(self):
        foo = 0
        self.failUnlessRaises(ValueError, MyClass, foo)

if __name__ == '__main__':
    unittest.main()
</snippet></ROW><ROW><id>88346</id><snippet>.
----------------------------------------------------------------------
Ran 1 test in 0.007s

OK
</snippet></ROW><ROW><id>88346</id><snippet>class TestFoo(unittest.TestCase):
    def failUnlessRaises(self, excClass, callableObj, *args, **kwargs):
        try:
            callableObj(*args, **kwargs)
        except excClass, excObj:
            return excObj # Actually return the exception object
        else:
            if hasattr(excClass,'__name__'): excName = excClass.__name__
            else: excName = str(excClass)
            raise self.failureException, "%s not raised" % excName

    def testInsufficientArgs(self):
        foo = 0
        excObj = self.failUnlessRaises(ValueError, MyClass, foo)
        self.failUnlessEqual(excObj[0], 'foo is not equal to 1!')
</snippet></ROW><ROW><id>89243</id><snippet>from subprocess import call
call(["ls", "-l"])
</snippet></ROW><ROW><id>89243</id><snippet>os.system</snippet></ROW><ROW><id>89919</id><snippet>import re

...

if re.match("^[A-Za-z0-9_-]*$", my_little_string):
    # do something here
</snippet></ROW><ROW><id>91301</id><snippet>bytes</snippet></ROW><ROW><id>91301</id><snippet>bytes</snippet></ROW><ROW><id>91301</id><snippet>string</snippet></ROW><ROW><id>91301</id><snippet>str</snippet></ROW><ROW><id>91301</id><snippet>unicode</snippet></ROW><ROW><id>91818</id><snippet>from pprint import pprint
a = [0, 1, ['a', 'b', 'c'], 2, 3, 4]
pprint(a)
</snippet></ROW><ROW><id>92891</id><snippet>python manage.py runfcgi</snippet></ROW><ROW><id>92891</id><snippet>touch your.fcgi</snippet></ROW><ROW><id>93029</id><snippet>import unicodedata, re

all_chars = (unichr(i) for i in xrange(0x110000))
control_chars = ''.join(c for c in all_chars if unicodedata.category(c) == 'Cc')
# or equivalently and much more efficiently
control_chars = ''.join(map(unichr, range(0,32) + range(127,160)))

control_char_re = re.compile('[%s]' % re.escape(control_chars))

def remove_control_chars(s):
    return control_char_re.sub('', s)
</snippet></ROW><ROW><id>93179</id><snippet>floatsleep()</snippet></ROW><ROW><id>93179</id><snippet>import time
from threading import Thread

class worker(Thread):
    def run(self):
    	for x in xrange(0,11):
    		print x
    		time.sleep(1)

class waiter(Thread):
    def run(self):
    	for x in xrange(100,103):
    		print x
    		time.sleep(5)

def run():
    worker().start()
    waiter().start()
</snippet></ROW><ROW><id>93179</id><snippet>&gt;&gt;&gt; thread_test.run()
0
100
&gt;&gt;&gt; 1
2
3
4
5
101
6
7
8
9
10
102
</snippet></ROW><ROW><id>94339</id><snippet>TemporaryFile</snippet></ROW><ROW><id>94339</id><snippet>NamedTemporaryFile</snippet></ROW><ROW><id>94339</id><snippet>mkstemp</snippet></ROW><ROW><id>94339</id><snippet>&gt;&gt;&gt; import tempfile, shutil, os
&gt;&gt;&gt; fd, path = tempfile.mkstemp()
&gt;&gt;&gt; os.write(fd, 'foo')
&gt;&gt;&gt; os.close(fd)
&gt;&gt;&gt; shutil.copy(path, 'bar.txt')
&gt;&gt;&gt; os.remove(path)
</snippet></ROW><ROW><id>94491</id><snippet>import urllib2, cStringIO, zipfile

try:
    remotezip = urllib2.urlopen(url)
    zipinmemory = cStringIO.StringIO(remotezip.read())
    zip = zipfile.ZipFile(zipinmemory)
    for fn in zip.namelist():
        if fn.endswith(".ranks"):
            ranks_data = zip.read(fn)
            for line in ranks_data.split("\n"):
                # do something with each line
except urllib2.HTTPError:
    # handle exception
</snippet></ROW><ROW><id>94962</id><snippet>range(1, 10000000)</snippet></ROW><ROW><id>94962</id><snippet>10000000</snippet></ROW><ROW><id>94962</id><snippet>xrange</snippet></ROW><ROW><id>97635</id><snippet>%(python) -i %f</snippet></ROW><ROW><id>98178</id><snippet>&gt;&gt;&gt; from django.template import Template, Context
&gt;&gt;&gt; from django.conf import settings
&gt;&gt;&gt; settings.configure()
&gt;&gt;&gt; t = Template('My name is {{ my_name }}.')
&gt;&gt;&gt; c = Context({'my_name': 'Daryl Spitzer'})
&gt;&gt;&gt; t.render(c)
u'My name is Daryl Spitzer.'
</snippet></ROW><ROW><id>100345</id><snippet>datetime</snippet></ROW><ROW><id>100345</id><snippet>timedelta</snippet></ROW><ROW><id>100345</id><snippet>time</snippet></ROW><ROW><id>100345</id><snippet>import datetime
a = datetime.datetime(100,1,1,11,34,59)
b = a + datetime.timedelta(0,3) # days, seconds, then other fields.
print a.time()
print b.time()
</snippet></ROW><ROW><id>100345</id><snippet>11:34:59
11:35:02
</snippet></ROW><ROW><id>100345</id><snippet>b = a + datetime.timedelta(seconds=3)
</snippet></ROW><ROW><id>100345</id><snippet>addSecs</snippet></ROW><ROW><id>100345</id><snippet>import datetime

def addSecs(tm, secs):
    fulldate = datetime.datetime(100, 1, 1, tm.hour, tm.minute, tm.second)
    fulldate = fulldate + datetime.timedelta(seconds=secs)
    return fulldate.time()

a = datetime.datetime.now().time()
b = addSecs(a, 300)
print a
print b
</snippet></ROW><ROW><id>100345</id><snippet> 09:11:55.775695
 09:16:55
</snippet></ROW><ROW><id>100762</id><snippet>bool</snippet></ROW><ROW><id>100762</id><snippet>__nonzero__</snippet></ROW><ROW><id>100762</id><snippet>int</snippet></ROW><ROW><id>100762</id><snippet>float</snippet></ROW><ROW><id>100762</id><snippet>bool</snippet></ROW><ROW><id>100762</id><snippet>int</snippet></ROW><ROW><id>100762</id><snippet>False</snippet></ROW><ROW><id>100762</id><snippet>__len__</snippet></ROW><ROW><id>100762</id><snippet>list</snippet></ROW><ROW><id>100762</id><snippet>dict</snippet></ROW><ROW><id>100762</id><snippet>set</snippet></ROW><ROW><id>100762</id><snippet>tuple</snippet></ROW><ROW><id>100762</id><snippet>False</snippet></ROW><ROW><id>100762</id><snippet>True</snippet></ROW><ROW><id>100762</id><snippet>None</snippet></ROW><ROW><id>100762</id><snippet>False</snippet></ROW><ROW><id>100762</id><snippet>None</snippet></ROW><ROW><id>100762</id><snippet>__eq__</snippet></ROW><ROW><id>100762</id><snippet>bool</snippet></ROW><ROW><id>100762</id><snippet>if</snippet></ROW><ROW><id>100762</id><snippet>__cmp__</snippet></ROW><ROW><id>100762</id><snippet>int</snippet></ROW><ROW><id>100762</id><snippet>-1</snippet></ROW><ROW><id>100762</id><snippet>self &lt; other</snippet></ROW><ROW><id>100762</id><snippet>0</snippet></ROW><ROW><id>100762</id><snippet>self == other</snippet></ROW><ROW><id>100762</id><snippet>+1</snippet></ROW><ROW><id>100762</id><snippet>self &gt; other</snippet></ROW><ROW><id>100762</id><snippet>is</snippet></ROW><ROW><id>100762</id><snippet>is</snippet></ROW><ROW><id>100762</id><snippet>None</snippet></ROW><ROW><id>100762</id><snippet>getattr</snippet></ROW><ROW><id>100762</id><snippet>__getitem__</snippet></ROW><ROW><id>100762</id><snippet>&gt;&gt;&gt; class A(object):
...    def __repr__(self):
...        return 'A()'
...    def __nonzero__(self):
...        return False

&gt;&gt;&gt; class B(object):
...    def __repr__(self):
...        return 'B()'
...    def __len__(self):
...        return 0

&gt;&gt;&gt; class C(object):
...    def __repr__(self):
...        return 'C()'
...    def __cmp__(self, other):
...        return 0

&gt;&gt;&gt; class D(object):
...    def __repr__(self):
...        return 'D()'
...    def __eq__(self, other):
...        return True

&gt;&gt;&gt; for obj in ['', (), [], {}, 0, 0., A(), B(), C(), D(), None]:
...     print '%4s: bool(obj) -&gt; %5s, obj == None -&gt; %5s, obj is None -&gt; %5s' % \
...         (repr(obj), bool(obj), obj == None, obj is None)
  '': bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
  (): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
  []: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
  {}: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
   0: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 0.0: bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 A(): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 B(): bool(obj) -&gt; False, obj == None -&gt; False, obj is None -&gt; False
 C(): bool(obj) -&gt;  True, obj == None -&gt;  True, obj is None -&gt; False
 D(): bool(obj) -&gt;  True, obj == None -&gt;  True, obj is None -&gt; False
None: bool(obj) -&gt; False, obj == None -&gt;  True, obj is None -&gt;  True
</snippet></ROW><ROW><id>100886</id><snippet>import Queue, thread, subprocess

results= Queue.Queue()
def process_waiter(popen, description, que):
    try: popen.wait()
    finally: que.put( (description, popen.returncode) )
process_count= 0

proc1= subprocess.Popen( ['python', 'mytest.py'] )
thread.start_new_thread(process_waiter,
    (proc1, "1 finished", results))
process_count+= 1

proc2= subprocess.Popen( ['python', 'mytest.py'] )
thread.start_new_thread(process_waiter,
    (proc2, "2 finished", results))
process_count+= 1

# etc

while process_count &gt; 0:
    description, rc= results.get()
    print "job", description, "ended with rc =", rc
    process_count-= 1
</snippet></ROW><ROW><id>101167</id><snippet>import win32clipboard

# set clipboard data
win32clipboard.OpenClipboard()
win32clipboard.SetClipboardText('testing 123')
win32clipboard.CloseClipboard()

# get clipboard data
win32clipboard.OpenClipboard()
data = win32clipboard.GetClipboardData()
win32clipboard.CloseClipboard()
print data
</snippet></ROW><ROW><id>101222</id><snippet>IEnumerable&lt;TResult&gt; Zip&lt;TResult,T1,T2&gt;
    (IEnumerable&lt;T1&gt; a,
     IEnumerable&lt;T2&gt; b,
     Func&lt;T1,T2,TResult&gt; combine)
{
    using (var f = a.GetEnumerator())
    using (var s = b.GetEnumerator())
    {
        while (f.MoveNext() &amp;&amp; s.MoveNext())
            yield return combine(f.Current, s.Current);
    }
}
</snippet></ROW><ROW><id>102443</id><snippet>def itersorted(d):
    for key in sorted(d):
        yield d[key]
</snippet></ROW><ROW><id>102572</id><snippet>path = os.path.join(os.path.dirname(__file__), '..', 'templates', 'myPage.html')
</snippet></ROW><ROW><id>102632</id><snippet>big_list = list(the_generator)
</snippet></ROW><ROW><id>103895</id><snippet>[ item for innerlist in outerlist for item in innerlist ]
</snippet></ROW><ROW><id>103895</id><snippet>','.join(str(item) for innerlist in outerlist for item in innerlist)
</snippet></ROW><ROW><id>103895</id><snippet>for innerlist in outerlist:
    for item in innerlist:
        ...
</snippet></ROW><ROW><id>104436</id><snippet>itertools.permutations</snippet></ROW><ROW><id>104436</id><snippet>def all_perms(elements):
    if len(elements) &lt;=1:
        yield elements
    else:
        for perm in all_perms(elements[1:]):
            for i in range(len(elements)):
                #nb elements[0:1] works in both string and list contexts
                yield perm[:i] + elements[0:1] + perm[i:]
</snippet></ROW><ROW><id>104436</id><snippet>itertools.permutations</snippet></ROW><ROW><id>104436</id><snippet>def permutations(iterable, r=None):
    # permutations('ABCD', 2) --&gt; AB AC AD BA BC BD CA CB CD DA DB DC
    # permutations(range(3)) --&gt; 012 021 102 120 201 210
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    if r &gt; n:
        return
    indices = range(n)
    cycles = range(n, n-r, -1)
    yield tuple(pool[i] for i in indices[:r])
    while n:
        for i in reversed(range(r)):
            cycles[i] -= 1
            if cycles[i] == 0:
                indices[i:] = indices[i+1:] + indices[i:i+1]
                cycles[i] = n - i
            else:
                j = cycles[i]
                indices[i], indices[-j] = indices[-j], indices[i]
                yield tuple(pool[i] for i in indices[:r])
                break
        else:
            return
</snippet></ROW><ROW><id>104436</id><snippet>itertools.product</snippet></ROW><ROW><id>104436</id><snippet>def permutations(iterable, r=None):
    pool = tuple(iterable)
    n = len(pool)
    r = n if r is None else r
    for indices in product(range(n), repeat=r):
        if len(set(indices)) == r:
            yield tuple(pool[i] for i in indices)
</snippet></ROW><ROW><id>105025</id><snippet>Thread</snippet></ROW><ROW><id>105025</id><snippet>Thread</snippet></ROW><ROW><id>105025</id><snippet>Thread</snippet></ROW><ROW><id>105025</id><snippet>threading.local</snippet></ROW><ROW><id>105025</id><snippet>threading.local</snippet></ROW><ROW><id>105025</id><snippet>_threading_local.py</snippet></ROW><ROW><id>105369</id><snippet>#!/usr/bin/env python
import threading

shared_balance = 0

class Deposit(threading.Thread):
    def run(self):
        for _ in xrange(1000000):
            global shared_balance
            balance = shared_balance
            balance += 100
            shared_balance = balance

class Withdraw(threading.Thread):
    def run(self):
        for _ in xrange(1000000):
            global shared_balance
            balance = shared_balance
            balance -= 100
            shared_balance = balance

threads = [Deposit(), Withdraw()]

for thread in threads:
    thread.start()

for thread in threads:
    thread.join()

print shared_balance
</snippet></ROW><ROW><id>105369</id><snippet>balance = shared_balance</snippet></ROW><ROW><id>105369</id><snippet>shared_balance = balance</snippet></ROW><ROW><id>106212</id><snippet>request.session['has_beta_access']</snippet></ROW><ROW><id>106212</id><snippet>True</snippet></ROW><ROW><id>106212</id><snippet>MIDDLEWARE_CLASSES</snippet></ROW><ROW><id>106709</id><snippet>unicode(r, 'utf-8')</snippet></ROW><ROW><id>106709</id><snippet>__str__()</snippet></ROW><ROW><id>106709</id><snippet>utf-8</snippet></ROW><ROW><id>106709</id><snippet>utf-8</snippet></ROW><ROW><id>106709</id><snippet>unicode()</snippet></ROW><ROW><id>106709</id><snippet>__unicode__()</snippet></ROW><ROW><id>106709</id><snippet>__str__()</snippet></ROW><ROW><id>107427</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("www.google.com")
&gt;&gt;&gt; conn.request("HEAD", "/index.html")
&gt;&gt;&gt; res = conn.getresponse()
&gt;&gt;&gt; print res.status, res.reason
200 OK
&gt;&gt;&gt; print res.getheaders()
[('content-length', '0'), ('expires', '-1'), ('server', 'gws'), ('cache-control', 'private, max-age=0'), ('date', 'Sat, 20 Sep 2008 06:43:36 GMT'), ('content-type', 'text/html; charset=ISO-8859-1')]
</snippet></ROW><ROW><id>107427</id><snippet>getheader(name)</snippet></ROW><ROW><id>107717</id><snippet>class Unbuffered:
   def __init__(self, stream):
       self.stream = stream
   def write(self, data):
       self.stream.write(data)
       self.stream.flush()
   def __getattr__(self, attr):
       return getattr(self.stream, attr)

import sys
sys.stdout=Unbuffered(sys.stdout)
print 'Hello'
</snippet></ROW><ROW><id>107836</id><snippet>from ssReader import Reader
from theCalcs import ACalc, AnotherCalc
from theDB import Loader

def main( sourceFileName ):
    rdr= Reader( sourceFileName )
    c1= ACalc( options )
    c2= AnotherCalc( options )
    ldr= Loader( parameters )
    for myObj in rdr.readAll():
        c1.thisOp( myObj )
        c2.thatOp( myObj )
        ldr.laod( myObj )
</snippet></ROW><ROW><id>107836</id><snippet>import</snippet></ROW><ROW><id>108404</id><snippet># Blogs who have either hockey or django tags.
from django.db.models import Q
Blog.objects.filter(
    Q(tags__name__iexact='hockey') | Q(tags__name__iexact='django')
)
</snippet></ROW><ROW><id>108404</id><snippet>def get_union_by_model(self, queryset_or_model, tags):
    """
    Create a ``QuerySet`` containing instances of the specified
    model associated with *any* of the given list of tags.
    """
    tags = get_tag_list(tags)
    tag_count = len(tags)
    queryset, model = get_queryset_and_model(queryset_or_model)

    if not tag_count:
        return model._default_manager.none()

    model_table = qn(model._meta.db_table)
    # This query selects the ids of all objects which have any of
    # the given tags.
    query = """
    SELECT %(model_pk)s
    FROM %(model)s, %(tagged_item)s
    WHERE %(tagged_item)s.content_type_id = %(content_type_id)s
      AND %(tagged_item)s.tag_id IN (%(tag_id_placeholders)s)
      AND %(model_pk)s = %(tagged_item)s.object_id
    GROUP BY %(model_pk)s""" % {
        'model_pk': '%s.%s' % (model_table, qn(model._meta.pk.column)),
        'model': model_table,
        'tagged_item': qn(self.model._meta.db_table),
        'content_type_id': ContentType.objects.get_for_model(model).pk,
        'tag_id_placeholders': ','.join(['%s'] * tag_count),
    }

    cursor = connection.cursor()
    cursor.execute(query, [tag.pk for tag in tags])
    object_ids = [row[0] for row in cursor.fetchall()]
    if len(object_ids) &gt; 0:
        return queryset.filter(pk__in=object_ids)
    else:
        return model._default_manager.none()
</snippet></ROW><ROW><id>108404</id><snippet>def get_intersection_by_model(self, queryset_or_model, tags):
    """
    Create a ``QuerySet`` containing instances of the specified
    model associated with *all* of the given list of tags.
    """
    tags = get_tag_list(tags)
    tag_count = len(tags)
    queryset, model = get_queryset_and_model(queryset_or_model)

    if not tag_count:
        return model._default_manager.none()

    model_table = qn(model._meta.db_table)
    # This query selects the ids of all objects which have all the
    # given tags.
    query = """
    SELECT %(model_pk)s
    FROM %(model)s, %(tagged_item)s
    WHERE %(tagged_item)s.content_type_id = %(content_type_id)s
      AND %(tagged_item)s.tag_id IN (%(tag_id_placeholders)s)
      AND %(model_pk)s = %(tagged_item)s.object_id
    GROUP BY %(model_pk)s
    HAVING COUNT(%(model_pk)s) = %(tag_count)s""" % {
        'model_pk': '%s.%s' % (model_table, qn(model._meta.pk.column)),
        'model': model_table,
        'tagged_item': qn(self.model._meta.db_table),
        'content_type_id': ContentType.objects.get_for_model(model).pk,
        'tag_id_placeholders': ','.join(['%s'] * tag_count),
        'tag_count': tag_count,
    }

    cursor = connection.cursor()
    cursor.execute(query, [tag.pk for tag in tags])
    object_ids = [row[0] for row in cursor.fetchall()]
    if len(object_ids) &gt; 0:
        return queryset.filter(pk__in=object_ids)
    else:
        return model._default_manager.none()
</snippet></ROW><ROW><id>108482</id><snippet>declaration</snippet></ROW><ROW><id>108482</id><snippet>def p_decl_body(self, p):
    """ decl_body : declaration_specifiers init_declarator_list_opt
    """
    # &lt;&lt;Handle the declaration here&gt;&gt;        

def p_declaration(self, p):
    """ declaration : decl_body SEMI 
    """
    p[0] = p[1]
</snippet></ROW><ROW><id>108482</id><snippet>decl_body</snippet></ROW><ROW><id>108606</id><snippet>#!/usr/bin/env python

def get_all(D, k):
    yield k
    for ii in D.get(k, []):
        for jj in get_all(D, ii):
            yield jj

A = { 'a' : dict(b=1, c=1),
    'c' : dict(d=1),
    'd' : dict(e=1,f=1,g=1),
    'h' : dict(j=1)
    }

for ii in get_all(A,'a'):
    print ii
</snippet></ROW><ROW><id>109106</id><snippet>__dict__</snippet></ROW><ROW><id>109106</id><snippet>&gt;&gt;&gt; hi_obj = hi()
&gt;&gt;&gt; hi_obj.__dict__.keys()
</snippet></ROW><ROW><id>109783</id><snippet>#!/usr/bin/python

from signal import *
from time import sleep
from sys import stdout

print_Qs = 0
print_Zs = 0

def write(text):
    stdout.write(text)
    stdout.flush()

def process_quit(signum, frame):
     global print_Qs
     print_Qs = 10

def process_tstp(signum, frame):
     global print_Zs
     print_Zs = 10

signal(SIGQUIT, process_quit)
signal(SIGTSTP, process_tstp)

while 1:
    if print_Zs:
        print_Zs -= 1
        c = 'Z'
    elif print_Qs:
        print_Qs -= 1
        c = 'Q'
    else:
        c = '.'
    write(c)
    sleep(0.5)
</snippet></ROW><ROW><id>109783</id><snippet>while 1:</snippet></ROW><ROW><id>109783</id><snippet>for i in range(60):</snippet></ROW><ROW><id>110414</id><snippet>long_desc</snippet></ROW><ROW><id>110414</id><snippet>#id_long_desc {
    width: 300px;
    height: 200px;
}
</snippet></ROW><ROW><id>110414</id><snippet>attrs</snippet></ROW><ROW><id>110414</id><snippet>class ProductForm(ModelForm):
    long_desc = forms.CharField(widget=forms.Textarea(attrs={'cols': 10, 'rows': 20})
    short_desc = forms.CharField(widget=forms.Textarea)
    class Meta:
        model = Product
</snippet></ROW><ROW><id>110414</id><snippet>class ProductForm(ModelForm):
    long_desc = forms.CharField(widget=forms.Textarea)
    short_desc = forms.CharField(widget=forms.Textarea)
    class Meta:
        model = Product

    # Edit by bryan
    def __init__(self, *args, **kwargs):
        super(ProductForm, self).__init__(*args, **kwargs) # Call to ModelForm constructor
        self.fields['long_desc'].widget.attrs['cols'] = 10
        self.fields['long_desc'].widget.attrs['rows'] = 20
</snippet></ROW><ROW><id>110547</id><snippet>&gt;&gt;&gt; import httplib
&gt;&gt;&gt; conn = httplib.HTTPConnection("www.bogosoft.com")
&gt;&gt;&gt; conn.request("GET", "")
&gt;&gt;&gt; r1 = conn.getresponse()
&gt;&gt;&gt; print r1.status, r1.reason
301 Moved Permanently
&gt;&gt;&gt; print r1.getheader('Location')
http://www.bogosoft.com/new/location
</snippet></ROW><ROW><id>110777</id><snippet>hicon = win32gui.CreateIconFromResource(win32api.LoadResource(None, win32con.RT_ICON, 1), True)
</snippet></ROW><ROW><id>110777</id><snippet>icon_res = win32api.LoadResource(None, win32con.RT_ICON, 1)
hicon = ctypes.windll.user32.CreateIconFromResourceEx(icon_res, len(icon_res), True,
    0x00030000, 16, 16, win32con.LR_DEFAULTCOLOR)
</snippet></ROW><ROW><id>110826</id><snippet>from guppy import hpy
h = hpy()
print h.heap()
</snippet></ROW><ROW><id>110826</id><snippet>Partition of a set of 132527 objects. Total size = 8301532 bytes.
Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
0  35144  27  2140412  26   2140412  26 str
1  38397  29  1309020  16   3449432  42 tuple
2    530   0   739856   9   4189288  50 dict (no owner)
</snippet></ROW><ROW><id>110829</id><snippet>sys.platform</snippet></ROW><ROW><id>110829</id><snippet>sys.platform</snippet></ROW><ROW><id>110829</id><snippet>os.name</snippet></ROW><ROW><id>110829</id><snippet>posix</snippet></ROW><ROW><id>111199</id><snippet>setUp</snippet></ROW><ROW><id>111199</id><snippet>StringIO</snippet></ROW><ROW><id>111199</id><snippet>open()</snippet></ROW><ROW><id>111199</id><snippet>os.open</snippet></ROW><ROW><id>111199</id><snippet>open</snippet></ROW><ROW><id>111199</id><snippet>os.open</snippet></ROW><ROW><id>111255</id><snippet>class Foo:
  def __call__(self):
    print 'called'

foo_instance = Foo()
foo_instance() #this is calling the __call__ method
</snippet></ROW><ROW><id>111966</id><snippet>ftp.nlst(dir)</snippet></ROW><ROW><id>111966</id><snippet>files = []

try:
    files = ftp.nlst()
except ftplib.error_perm, resp:
    if str(resp) == "550 No files found":
        print "No files in this directory"
    else:
        raise

for f in files:
    print f
</snippet></ROW><ROW><id>111974</id><snippet>bounds = self.canvas.bbox(myText)  # returns a tuple like (x1, y1, x2, y2)
width = bounds[2] - bounds[0]
height = bounds[3] - bounds[1]
</snippet></ROW><ROW><id>111988</id><snippet>import urllib2
opener = urllib2.build_opener(urllib2.HTTPHandler)
request = urllib2.Request('http://example.org', data='your_put_data')
request.add_header('Content-Type', 'your/contenttype')
request.get_method = lambda: 'PUT'
url = opener.open(request)
</snippet></ROW><ROW><id>112563</id><snippet>#!/bin/bash
echo -n "Enter a word: "
read input
grep "^$input" /usr/share/dict/words
</snippet></ROW><ROW><id>112713</id><snippet>--onefile</snippet></ROW><ROW><id>112819</id><snippet>import cookielib
import logging
import sys
import urllib
import urllib2

cookies = cookielib.LWPCookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookies))
urllib2.install_opener(opener)
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows; U; Windows NT 5.0; en-GB; rv:1.8.1.12) Gecko/20080201 Firefox/2.0.0.12',
    'Accept': 'text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5',
    'Accept-Language': 'en-gb,en;q=0.5',
    'Accept-Charset': 'ISO-8859-1,utf-8;q=0.7,*;q=0.7',
}

# Fetch the login page to set initial cookies
urllib2.urlopen(urllib2.Request('http://www.rllmukforum.com/index.php?act=Login&amp;CODE=00', None, headers))

# Login so we can access the Off Topic forum
login_headers = headers.copy()
login_headers.update({
    'Referer': 'http://www.rllmukforum.com/index.php?act=Login&amp;CODE=00',
    'Content-Type': 'application/x-www-form-urlencoded',
})
html = urllib2.urlopen(urllib2.Request('http://www.rllmukforum.com/index.php?act=Login&amp;CODE=01',
                                       urllib.urlencode({
                                           'referer': 'http://www.rllmukforum.com/index.php?',
                                           'UserName': RLLMUK_USERNAME,
                                           'PassWord': RLLMUK_PASSWORD,
                                       }),
                                       login_headers)).read()
if 'The following errors were found' in html:
    logging.error('RLLMUK login failed')
    logging.info(html)
    sys.exit(1)
</snippet></ROW><ROW><id>112860</id><snippet>genshi.builder.tag</snippet></ROW><ROW><id>112860</id><snippet>genshi.builder.tag</snippet></ROW><ROW><id>112860</id><snippet>genshi.builder</snippet></ROW><ROW><id>112860</id><snippet>builder.tag</snippet></ROW><ROW><id>112860</id><snippet>from itertools import chain
from genshi.core import DOCTYPE, Stream
from genshi.output import DocType
from genshi.builder import tag as t

# Build the page using `genshi.builder.tag`
page = t.html (t.head (t.title ("Hello world!")), t.body (t.div ("Body text")))

# Convert the page element into a stream
stream = page.generate ()

# Chain the page stream with a stream containing only an HTML4 doctype declaration
stream = Stream (chain ([(DOCTYPE, DocType.get ('html4'), None)], stream))

# Convert the stream to text using the "html" renderer (could also be xml, xhtml, text, etc)
text = stream.render ('html')
</snippet></ROW><ROW><id>112980</id><snippet>open()</snippet></ROW><ROW><id>112980</id><snippet>file()</snippet></ROW><ROW><id>113011</id><snippet>import win32evtlogutil
win32evtlogutil.ReportEvent(ApplicationName, EventID, EventCategory,
    		    EventType, Inserts, Data, SID)
</snippet></ROW><ROW><id>113219</id><snippet>import ctypes, signal
libc = ctypes.cdll.LoadLibrary("libc.so.6")
libc.sighold(signal.SIGKILL)
libc.sigrelse(signal.SIGKILL)
</snippet></ROW><ROW><id>113555</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.split(r"(\s+)", "This is the string I want to split")
['This', ' ', 'is', ' ', 'the', ' ', 'string', ' ', 'I', ' ', 'want', ' ', 'to', ' ', 'split']
</snippet></ROW><ROW><id>113662</id><snippet>&gt;&gt;&gt; list("Word to Split")
['W', 'o', 'r', 'd', ' ', 't', 'o', ' ', 'S', 'p', 'l', 'i', 't']
</snippet></ROW><ROW><id>114114</id><snippet>b= BasicInfoPage(...)
</snippet></ROW><ROW><id>114114</id><snippet>b.intelligence</snippet></ROW><ROW><id>114114</id><snippet>b</snippet></ROW><ROW><id>114114</id><snippet>BasicInfoPage</snippet></ROW><ROW><id>114114</id><snippet>class MOS( wx.wizard.PageSimple ):
    def __init__( self, parent, title, basicInfoPage ):
        &lt;snip&gt;
        self.basicInfo= basicInfoPage
</snippet></ROW><ROW><id>114114</id><snippet>self.basicInfo.intelligence</snippet></ROW><ROW><id>114114</id><snippet>someBasicInfoPage= BasicInfoPage( ... ) 
m= MOS( ..., someBasicInfoPage )
</snippet></ROW><ROW><id>114114</id><snippet>m</snippet></ROW><ROW><id>114114</id><snippet>someBasicInfoPage.intelligence</snippet></ROW><ROW><id>114267</id><snippet>method_one</snippet></ROW><ROW><id>114267</id><snippet>a_test.method_one()
</snippet></ROW><ROW><id>114267</id><snippet>Test.method_one(a_test)
</snippet></ROW><ROW><id>114267</id><snippet>method_two</snippet></ROW><ROW><id>114267</id><snippet>TypeError</snippet></ROW><ROW><id>114267</id><snippet>&gt;&gt;&gt; a_test = Test() 
&gt;&gt;&gt; a_test.method_two()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: method_two() takes no arguments (1 given)
</snippet></ROW><ROW><id>114267</id><snippet>class Test(object):
    def method_one(self):
        print "Called method_one"

    @staticmethod
    def method_two():
        print "Called method two"
</snippet></ROW><ROW><id>114267</id><snippet>type</snippet></ROW><ROW><id>114267</id><snippet>method_two</snippet></ROW><ROW><id>114267</id><snippet>&gt;&gt;&gt; a_test = Test()
&gt;&gt;&gt; a_test.method_one()
Called method_one
&gt;&gt;&gt; a_test.method_two()
Called method_two
&gt;&gt;&gt; Test.method_two()
Called method_two
</snippet></ROW><ROW><id>114831</id><snippet>&gt;&gt;&gt; a = {}
&gt;&gt;&gt; b = ['some', 'list']
&gt;&gt;&gt; hash(b)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: list objects are unhashable
&gt;&gt;&gt; a[b] = 'some'
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: list objects are unhashable
</snippet></ROW><ROW><id>115826</id><snippet>cherrypy.server.socket_host = 'www.machinename.com'
cherrypy.engine.start()
cherrypy.engine.block()
</snippet></ROW><ROW><id>116035</id><snippet>from os import fork, setsid, umask, dup2
from sys import stdin, stdout, stderr

if fork(): exit(0)
umask(0) 
setsid() 
if fork(): exit(0)

stdout.flush()
stderr.flush()
si = file('/dev/null', 'r')
so = file('/dev/null', 'a+')
se = file('/dev/null', 'a+', 0)
dup2(si.fileno(), stdin.fileno())
dup2(so.fileno(), stdout.fileno())
dup2(se.fileno(), stderr.fileno())
</snippet></ROW><ROW><id>116035</id><snippet>from os import getpid
outfile = open(pid_file, 'w')
outfile.write('%i' % getpid())
outfile.close()
</snippet></ROW><ROW><id>116035</id><snippet>from os import setuid, setgid, chdir
from pwd import getpwnam
from grp import getgrnam
setuid(getpwnam('someuser').pw_uid)
setgid(getgrnam('somegroup').gr_gid)
chdir('/')
</snippet></ROW><ROW><id>116622</id><snippet>x</snippet></ROW><ROW><id>116622</id><snippet>(?x)  (?: [ \t\r\f\v]*? \n ){2}  [ \t\r\f\v]*?</snippet></ROW><ROW><id>117201</id><snippet>import cgi
data = cgi.FieldStorage()
data['bob']
</snippet></ROW><ROW><id>117264</id><snippet>&gt;&gt;&gt; 4 / float(100)
0.04
&gt;&gt;&gt; 4 / 100.0
0.04
</snippet></ROW><ROW><id>117264</id><snippet>&gt;&gt;&gt; from __future__ import division
&gt;&gt;&gt; 4 / 100
0.04
</snippet></ROW><ROW><id>117264</id><snippet>-Qnew</snippet></ROW><ROW><id>117264</id><snippet>$ python -Qnew
&gt;&gt;&gt; 4 / 100
0.04
</snippet></ROW><ROW><id>117264</id><snippet>//</snippet></ROW><ROW><id>117264</id><snippet>-Qnew</snippet></ROW><ROW><id>117433</id><snippet>C1</snippet></ROW><ROW><id>117433</id><snippet>&gt;&gt;&gt; class C1(object):
&gt;&gt;&gt;    def eval(self, x):
&gt;&gt;&gt;        x()
&gt;&gt;&gt;
&gt;&gt;&gt; def f2(): print "go f2"
&gt;&gt;&gt; c = C1()
&gt;&gt;&gt; c.eval(f2)
go f2
</snippet></ROW><ROW><id>117433</id><snippet>## File 1
def f1():  print "go f1!"

class C1(object):
    def do_eval(self, x, e_globals = globals(), e_locals = locals()):
        eval(x, e_globals, e_locals)
</snippet></ROW><ROW><id>117433</id><snippet>&gt;&gt;&gt; def f2():
&gt;&gt;&gt;    print "go f2!"
&gt;&gt;&gt; from file1 import *    # 1
&gt;&gt;&gt; C1().do_eval("f2()")   # 2
NameError: name 'f2' is not defined

&gt;&gt;&gt; C1().do_eval("f2()", globals(), locals()) #3
go f2!
&gt;&gt;&gt; C1().do_eval("f1()", globals(), locals()) #4
go f1!
</snippet></ROW><ROW><id>117433</id><snippet>file1</snippet></ROW><ROW><id>117433</id><snippet>f2</snippet></ROW><ROW><id>117433</id><snippet>file1</snippet></ROW><ROW><id>117433</id><snippet>NameError</snippet></ROW><ROW><id>117433</id><snippet>f1</snippet></ROW><ROW><id>117433</id><snippet>eval</snippet></ROW><ROW><id>117994</id><snippet>class Record( object ):
    """Assuming rtda and pnl must exist."""
    def __init__( self ):
        self.da= 0
        self.rt= 0
        self.rtda= 0 # or whatever
        self.pnl= None # 
        self.sink = None # Not clear what this is
    def setPnl( self, node_prices ):
        # fill RT and DA prices from the hash retrieved above
        # calculate dependent values: RT-DA and PNL
</snippet></ROW><ROW><id>117994</id><snippet>calculate_pnl( records, node_prices )</snippet></ROW><ROW><id>117994</id><snippet>def calculate_pnl( records, node_prices ):
    for record in records:
        record.setPnl( node_prices )
</snippet></ROW><ROW><id>118142</id><snippet>from wsgiref.util import request_uri
import sys

def logging_middleware(application, stream=sys.stdout):
    def _logger(environ, start_response):
        stream.write('REQUEST\n')
        stream.write('%s %s\n' %(
            environ['REQUEST_METHOD'],
            request_uri(environ),
        ))

        for name, value in environ.items():
            if name.startswith('HTTP_'):
                stream.write('    %s: %s\n' %(
                    name[5:].title().replace('_', '-'),
                    value,
                ))
        stream.flush()
        def _start_response(code, headers):
            stream.write('RESPONSE\n')
            stream.write('%s\n' % code)
            for data in headers:
                stream.write('    %s: %s\n' % data)
            stream.flush()
            start_response(code, headers)
        return application(environ, _start_response)
    return _logger
</snippet></ROW><ROW><id>118142</id><snippet>def application(environ, start_response):
    start_response('200 OK', [
        ('Content-Type', 'text/html')
    ])
    return ['Hello World']

if __name__ == '__main__':
    logger = logging_middleware(application)
    from wsgiref.simple_server import make_server
    httpd = make_server('', 1234, logger)
    httpd.serve_forever()
</snippet></ROW><ROW><id>118163</id><snippet>&gt;&gt;&gt; re.match(r'(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)', '127.255.0.0').groups()
('127', '255', '0', '0')
</snippet></ROW><ROW><id>118163</id><snippet>r'regex_here'</snippet></ROW><ROW><id>118187</id><snippet>&gt;&gt;&gt; import shlex
&gt;&gt;&gt; my_splitter = shlex.shlex('''foo, bar, "one, two", three four''', posix=True)
&gt;&gt;&gt; my_splitter.whitespace += ','
&gt;&gt;&gt; my_splitter.whitespace_split = True
&gt;&gt;&gt; print list(my_splitter)
['foo', 'bar', 'one, two', 'three', 'four']
</snippet></ROW><ROW><id>118187</id><snippet>&gt;&gt;&gt; my_splitter = shlex.shlex('''"test, a",'foo,bar",baz',bar \xc3\xa4 baz''',
                              posix=True) 
&gt;&gt;&gt; my_splitter.whitespace = ',' ; my_splitter.whitespace_split = True 
&gt;&gt;&gt; print list(my_splitter)
['test, a', 'foo,bar",baz', 'bar \xc3\xa4 baz']
</snippet></ROW><ROW><id>118350</id><snippet>Queryable.Select(Queryable.Where(someInputSequence, somePredicate), someFuncThatReturnsTheSequenceElement)
</snippet></ROW><ROW><id>118395</id><snippet>&gt;&gt;&gt; class TestEllipsis(object):
...     def __getitem__(self, item):
...         if item is Ellipsis:
...             return "Returning all items"
...         else:
...             return "return %r items" % item
... 
&gt;&gt;&gt; x = TestEllipsis()
&gt;&gt;&gt; print x[2]
return 2 items
&gt;&gt;&gt; print x[...]
Returning all items
</snippet></ROW><ROW><id>118462</id><snippet>csv</snippet></ROW><ROW><id>118462</id><snippet>import csv
writer = csv.writer(open("some.csv", "wb"))
writer.writerow(the_list)
</snippet></ROW><ROW><id>118462</id><snippet>StringIO</snippet></ROW><ROW><id>118462</id><snippet>f = StringIO.StringIO()
writer = csv.writer(f)
writer.writerow(the_list)
print f.getvalue()
</snippet></ROW><ROW><id>118462</id><snippet>a,"one ""two"" three","foo, bar","both""'"</snippet></ROW><ROW><id>118462</id><snippet>csv</snippet></ROW><ROW><id>118462</id><snippet>dialect</snippet></ROW><ROW><id>118462</id><snippet>quotechar</snippet></ROW><ROW><id>118462</id><snippet>escapechar</snippet></ROW><ROW><id>118462</id><snippet>class SomeDialect(csv.excel):
    delimiter = ','
    quotechar = '"'
    escapechar = "\\"
    doublequote = False
    lineterminator = '\n'
    quoting = csv.QUOTE_MINIMAL

f = cStringIO.StringIO()
writer = csv.writer(f, dialect=SomeDialect)
writer.writerow(the_list)
print f.getvalue()
</snippet></ROW><ROW><id>118462</id><snippet>a,one \"two\" three,"foo, bar",both\"'</snippet></ROW><ROW><id>118744</id><snippet>pindent.py</snippet></ROW><ROW><id>118744</id><snippet>pindent -c myfile.py</snippet></ROW><ROW><id>118744</id><snippet>def foobar(a, b):
   if a == b:
       a = a+1
   elif a &lt; b:
       b = b-1
       if b &gt; a: a = a-1
       # end if
   else:
       print 'oops!'
   # end if
# end def foobar
</snippet></ROW><ROW><id>118744</id><snippet>myfile.py</snippet></ROW><ROW><id>118744</id><snippet>def foobar(a, b):
   if a == b:
       a = a+1
   elif a &lt; b:
       b = b-1
       if b &gt; a: a = a-1
   else:
       print 'oops!'
</snippet></ROW><ROW><id>118744</id><snippet>pindent.py -d</snippet></ROW><ROW><id>118817</id><snippet>import os
import shutil
from os import path
from os.path import join, getmtime
from time import time

archive = "bak"
current = "cur"

def archive_old_versions(days = 3):
    for root, dirs, files in os.walk(current):
        for name in files:
            fullname = join(root, name)
            if (getmtime(fullname) &lt; time() - days * 60 * 60 * 24):
                shutil.move(fullname, join(archive, name))
</snippet></ROW><ROW><id>118820</id><snippet>$ which python
/usr/bin/python
$ which python2.5
/opt/local/bin/python2.5
</snippet></ROW><ROW><id>118820</id><snippet>.profile</snippet></ROW><ROW><id>118820</id><snippet>export PATH=/opt/local/bin:/opt/local/sbin:$PATH
</snippet></ROW><ROW><id>119178</id><snippet>__init__.py</snippet></ROW><ROW><id>119178</id><snippet>./dir/__init__.py</snippet></ROW><ROW><id>119178</id><snippet>import something
</snippet></ROW><ROW><id>119178</id><snippet>./test.py</snippet></ROW><ROW><id>119178</id><snippet>import dir
# can now use dir.something
</snippet></ROW><ROW><id>119178</id><snippet>__init__.py</snippet></ROW><ROW><id>119178</id><snippet>__init__.py</snippet></ROW><ROW><id>119178</id><snippet>import something</snippet></ROW><ROW><id>119178</id><snippet>import datetime</snippet></ROW><ROW><id>119178</id><snippet>test.py</snippet></ROW><ROW><id>119178</id><snippet>import dir
print dir.datetime.datetime.now()
</snippet></ROW><ROW><id>119178</id><snippet>import dir.some_module_in_dir
print dir.datetime.datetime.now()
</snippet></ROW><ROW><id>119178</id><snippet>__init__.py</snippet></ROW><ROW><id>119616</id><snippet>// determines the duration, in seconds, of an MP3;
// assumes MPEG 1 (not 2 or 2.5) Audio Layer 3 (not 1 or 2)
// constant bit rate (not variable)

#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;cstdlib&gt;

using namespace std;

//Bitrates, assuming MPEG 1 Audio Layer 3
const int bitrates[16] = {
         0,  32000,  40000,  48000,  56000,  64000,  80000,   96000,
    112000, 128000, 160000, 192000, 224000, 256000, 320000,       0
  };


//Intel processors are little-endian;
//search Google or see: http://en.wikipedia.org/wiki/Endian
int reverse(int i)
{
    int toReturn = 0;
    toReturn |= ((i &amp; 0x000000FF) &lt;&lt; 24);
    toReturn |= ((i &amp; 0x0000FF00) &lt;&lt; 8);
    toReturn |= ((i &amp; 0x00FF0000) &gt;&gt; 8);
    toReturn |= ((i &amp; 0xFF000000) &gt;&gt; 24);
    return toReturn;
}

//In short, data in ID3v2 tags are stored as
//"syncsafe integers". This is so the tag info
//isn't mistaken for audio data, and attempted to
//be "played". For more info, have fun Googling it.
int syncsafe(int i)
{
 int toReturn = 0;
 toReturn |= ((i &amp; 0x7F000000) &gt;&gt; 24);
 toReturn |= ((i &amp; 0x007F0000) &gt;&gt;  9);
 toReturn |= ((i &amp; 0x00007F00) &lt;&lt;  6);
 toReturn |= ((i &amp; 0x0000007F) &lt;&lt; 21);
 return toReturn;     
}

//How much room does ID3 version 1 tag info
//take up at the end of this file (if any)?
int id3v1size(ifstream&amp; infile)
{
   streampos savePos = infile.tellg(); 

   //get to 128 bytes from file end
   infile.seekg(0, ios::end);
   streampos length = infile.tellg() - (streampos)128;
   infile.seekg(length);

   int size;
   char buffer[3] = {0};
   infile.read(buffer, 3);
   if( buffer[0] == 'T' &amp;&amp; buffer[1] == 'A' &amp;&amp; buffer[2] == 'G' )
     size = 128; //found tag data
   else
     size = 0; //nothing there

   infile.seekg(savePos);

   return size;

}

//how much room does ID3 version 2 tag info
//take up at the beginning of this file (if any)
int id3v2size(ifstream&amp; infile)
{
   streampos savePos = infile.tellg(); 
   infile.seekg(0, ios::beg);

   char buffer[6] = {0};
   infile.read(buffer, 6);
   if( buffer[0] != 'I' || buffer[1] != 'D' || buffer[2] != '3' )
   {   
       //no tag data
       infile.seekg(savePos);
       return 0;
   }

   int size = 0;
   infile.read(reinterpret_cast&lt;char*&gt;(&amp;size), sizeof(size));
   size = syncsafe(size);

   infile.seekg(savePos);
   //"size" doesn't include the 10 byte ID3v2 header
   return size + 10;
}

int main(int argCount, char* argValues[])
{
  //you'll have to change this
  ifstream infile("C:/Music/Bush - Comedown.mp3", ios::binary);

  if(!infile.is_open())
  {
   infile.close();
   cout &lt;&lt; "Error opening file" &lt;&lt; endl;
   system("PAUSE");
   return 0;
  }

  //determine beginning and end of primary frame data (not ID3 tags)
  infile.seekg(0, ios::end);
  streampos dataEnd = infile.tellg();

  infile.seekg(0, ios::beg);
  streampos dataBegin = 0;

  dataEnd -= id3v1size(infile);
  dataBegin += id3v2size(infile);

  infile.seekg(dataBegin,ios::beg);

  //determine bitrate based on header for first frame of audio data
  int headerBytes = 0;
  infile.read(reinterpret_cast&lt;char*&gt;(&amp;headerBytes),sizeof(headerBytes));

  headerBytes = reverse(headerBytes);
  int bitrate = bitrates[(int)((headerBytes &gt;&gt; 12) &amp; 0xF)];

  //calculate duration, in seconds
  int duration = (dataEnd - dataBegin)/(bitrate/8);

  infile.close();

  //print duration in minutes : seconds
  cout &lt;&lt; duration/60 &lt;&lt; ":" &lt;&lt; duration%60 &lt;&lt; endl;

  system("PAUSE");
  return 0;
}
</snippet></ROW><ROW><id>119718</id><snippet>@lcs = $tree-&gt;lcs;
@lcs = $tree-&gt;lcs($min_len, $max_len);
@lcs = $tree-&gt;longest_common_substrings;
</snippet></ROW><ROW><id>119983</id><snippet>foo.__dict__.update(bar)</snippet></ROW><ROW><id>120118</id><snippet>import urllib2
opener = urllib2.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
infile = opener.open('http://en.wikipedia.org/w/index.php?title=Albert_Einstein&amp;printable=yes')
page = infile.read()
</snippet></ROW><ROW><id>120291</id><snippet>from SimpleXMLRPCServer import SimpleXMLRPCServer

class Server(object):
    def __init__(self, hostport):
        self.server = SimpleXMLRPCServer(hostport)

    def register_function(self, function, name=None):
        def _function(args, kwargs):
            return function(*args, **kwargs)
        _function.__name__ = function.__name__
        self.server.register_function(_function, name)

    def serve_forever(self):
        self.server.serve_forever()

#example usage
server = Server(('localhost', 8000))
def test(arg1, arg2):
    print 'arg1: %s arg2: %s' % (arg1, arg2)
    return 0
server.register_function(test)
server.serve_forever()
</snippet></ROW><ROW><id>120291</id><snippet>import xmlrpclib

class ServerProxy(object):
    def __init__(self, url):
        self._xmlrpc_server_proxy = xmlrpclib.ServerProxy(url)
    def __getattr__(self, name):
        call_proxy = getattr(self._xmlrpc_server_proxy, name)
        def _call(*args, **kwargs):
            return call_proxy(args, kwargs)
        return _call

#example usage
server = ServerProxy('http://localhost:8000')
server.test(1, 2)
server.test(arg2=2, arg1=1)
server.test(1, arg2=2)
server.test(*[1,2])
server.test(**{'arg1':1, 'arg2':2})
</snippet></ROW><ROW><id>120701</id><snippet>import os

for dirname, dirnames, filenames in os.walk('.'):
    # print path to all subdirectories first.
    for subdirname in dirnames:
        print os.path.join(dirname, subdirname)

    # print path to all filenames.
    for filename in filenames:
        print os.path.join(dirname, filename)

    # Advanced usage:
    # editing the 'dirnames' list will stop os.walk() from recursing into there.
    if '.git' in dirnames:
        # don't go into any .git directories.
        dirnames.remove('.git')
</snippet></ROW><ROW><id>120706</id><snippet>subprocess.Popen(['command', 'argument1', 'argument2'], shell=False)
</snippet></ROW><ROW><id>120910</id><snippet>def flatten(iterables):
    return (elem for iterable in iterables for elem in iterable)
</snippet></ROW><ROW><id>120910</id><snippet>itertools.chain.from_iterable(iterables)
</snippet></ROW><ROW><id>121030</id><snippet>os.path.getmtime(filepath)
</snippet></ROW><ROW><id>121030</id><snippet>os.stat(filepath).st_mtime
</snippet></ROW><ROW><id>121474</id><snippet>import traceback
import sys

try:
	raise Exception("Message")
except:
	type, value, tb = sys.exc_info()
	print &gt;&gt; sys.stderr,  type.__name__, ":", value
	print &gt;&gt; sys.stderr, '\n'.join(traceback.format_tb(tb))
</snippet></ROW><ROW><id>121474</id><snippet>Exception : Message
  File "exception.py", line 5, in &lt;module&gt;
    raise Exception("Message")
</snippet></ROW><ROW><id>122116</id><snippet>a = (0..100).entries.sort_by {rand}.slice! 0, 5
</snippet></ROW><ROW><id>122116</id><snippet>Array(0..100).sample(5) 
</snippet></ROW><ROW><id>122785</id><snippet>def nest(d):
    rv = {}
    for key, value in d.iteritems():
        node = rv
        for part in key.split('/'):
            node = node.setdefault(part, {})
        node.update(value)
    return rv
</snippet></ROW><ROW><id>123212</id><snippet>copyfile(src, dst)
</snippet></ROW><ROW><id>123526</id><snippet>WSGIPassAuthorization On</snippet></ROW><ROW><id>123526</id><snippet>&lt;VirtualHost *&gt;
    &lt;Location /&gt;
        AuthType Digest
        AuthName "global"
        AuthDigestDomain /
        AuthUserFile /root/apache_users
        &lt;Limit GET&gt;
            Require valid-user
        &lt;/Limit&gt;
    &lt;/Location&gt;
    WSGIPassAuthorization On
    WSGIScriptAlias / /some/script.wsgi
    WSGIDaemonProcess mywsgi user=someuser group=somegroup processes=2 threads=25
    WSGIProcessGroup mywsgi
    ServerName some.example.org
&lt;/VirtualHost&gt;
</snippet></ROW><ROW><id>123526</id><snippet>environ['REMOTE_USER']</snippet></ROW><ROW><id>123526</id><snippet>def application(environ, start_response):
    start_response('200 OK', [
        ('Content-Type', 'text/plain'),
    ])
    return ['Hello %s' % environ['REMOTE_USER']]
</snippet></ROW><ROW><id>123985</id><snippet>os.getcwd()</snippet></ROW><ROW><id>123985</id><snippet>getcwd()</snippet></ROW><ROW><id>123985</id><snippet>pwd</snippet></ROW><ROW><id>123985</id><snippet>os.environ['PWD']</snippet></ROW><ROW><id>123985</id><snippet>getcwd</snippet></ROW><ROW><id>123985</id><snippet>import os
from subprocess import Popen, PIPE

class CwdKeeper(object):
    def __init__(self):
        self._cwd = os.environ.get("PWD")
        if self._cwd is None: # no environment. fall back to calling pwd on shell
           self._cwd = Popen('pwd', stdout=PIPE).communicate()[0].strip()
        self._os_getcwd = os.getcwd
        self._os_chdir = os.chdir

    def chdir(self, path):
        if not self._cwd:
            return self._os_chdir(path)
        p = os.path.normpath(os.path.join(self._cwd, path))
        result = self._os_chdir(p)
        self._cwd = p
        os.environ["PWD"] = p
        return result

    def getcwd(self):
        if not self._cwd:
            return self._os_getcwd()
        return self._cwd

cwd = CwdKeeper()
print cwd.getcwd()
# use only cwd.chdir and cwd.getcwd from now on.    
# monkeypatch os if you want:
os.chdir = cwd.chdir
os.getcwd = cwd.getcwd
# now you can use os.chdir and os.getcwd as normal.
</snippet></ROW><ROW><id>124785</id><snippet>[host 1]
lh_server=192.168.0.1
vh_hosts = PloneSite1:8080
lh_root = PloneSite1

[host 2]
lh_server=192.168.0.1
vh_hosts = PloneSite2:8080
lh_root = PloneSite2
</snippet></ROW><ROW><id>124785</id><snippet>&gt;&gt;&gt; cp = ConfigParser.ConfigParser()
&gt;&gt;&gt; cp.read('test1.ini')
['test1.ini']
&gt;&gt;&gt; cp.get('host 1', 'lh_server')
'192.168.0.1'
</snippet></ROW><ROW><id>124785</id><snippet>[DEFAULT]
lh_server=192.168.0.1

[host 1]
vh_root = PloneSite1
lh_root = PloneSite1

[host 2]
vh_root = PloneSite2
lh_root = PloneSite2
</snippet></ROW><ROW><id>124785</id><snippet>&gt;&gt;&gt; cp.read('test2.ini')
['test2.ini']
&gt;&gt;&gt; cp.get('host 1', 'lh_server')
'192.168.0.1'
</snippet></ROW><ROW><id>125061</id><snippet>@property</snippet></ROW><ROW><id>125061</id><snippet>&gt;&gt;&gt; class a(object):
...     def __init__(self, x):
...             self.x = x
...     @property
...     def xval(self):
...             return self.x
... 
&gt;&gt;&gt; b = a(5)
&gt;&gt;&gt; b.xval
5
&gt;&gt;&gt; b.xval = 6
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: can't set attribute
</snippet></ROW><ROW><id>125122</id><snippet>Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit (Intel)] on
win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; def makeSpecial(mystring, special_substr):
...     return mystring.replace(special_substr, '&lt;span class="special"&gt;%s&lt;/span&gt;
' % special_substr)
...
&gt;&gt;&gt; makeSpecial("I am the most foo h4ck3r ever!!", "foo")
'I am the most &lt;span class="special"&gt;foo&lt;/span&gt; h4ck3r ever!!'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>126533</id><snippet>&gt;&gt;&gt; a = [3,4,5,6]
&gt;&gt;&gt; for i, val in enumerate(a):
...     print i, val
...
0 3
1 4
2 5
3 6
&gt;&gt;&gt;
</snippet></ROW><ROW><id>126843</id><snippet>reload()</snippet></ROW><ROW><id>128023</id><snippet>&lt;root&gt;
  &lt;level1&gt;leaf1&lt;/level1&gt;
  &lt;level2&gt;leaf2&lt;/level2&gt;
&lt;/root&gt;
</snippet></ROW><ROW><id>128023</id><snippet>from BeautifulSoup import BeautifulStoneSoup, Tag, NavigableString

soup = BeautifulStoneSoup('config-template.xml') # get the parser for the xml file
soup.contents[0].name
# u'root'
</snippet></ROW><ROW><id>128023</id><snippet>soup.root.contents[0].name
# u'level1'
</snippet></ROW><ROW><id>128023</id><snippet>import re
tags_starting_with_level = soup.findAll(re.compile('^level'))
for tag in tags_starting_with_level: print tag.name
# level1
# level2
</snippet></ROW><ROW><id>128023</id><snippet># build and insert a new level with a new leaf
level3 = Tag(soup, 'level3')
level3.insert(0, NavigableString('leaf3')
soup.root.insert(2, level3)

print soup.prettify()
# &lt;root&gt;
#  &lt;level1&gt;
#   leaf1
#  &lt;/level1&gt;
#  &lt;level2&gt;
#   leaf2
#  &lt;/level2&gt;
#  &lt;level3&gt;
#   leaf3
#  &lt;/level3&gt;
# &lt;/root&gt;
</snippet></ROW><ROW><id>128577</id><snippet>__init__.py</snippet></ROW><ROW><id>128577</id><snippet>bzrlib</snippet></ROW><ROW><id>129177</id><snippet>with</snippet></ROW><ROW><id>129177</id><snippet>from __future__ import with_statement
import contextlib

@contextlib.contextmanager
def handler():
    try:
        yield
    except Exception, e:
        baz(e)
</snippet></ROW><ROW><id>129177</id><snippet>with handler():
    foo(a, b)
with handler():
    bar(c, d)
</snippet></ROW><ROW><id>129522</id><snippet>import mymod

class MyTestCase(unittest.TestCase):
    def test1(self):
        self.assertRaises(SomeCoolException, mymod.myfunc)
</snippet></ROW><ROW><id>130179</id><snippet>import sys
dir_name="/usr/lib/mydir"
sys.path.insert(0,dir_name)
</snippet></ROW><ROW><id>130309</id><snippet>filter</snippet></ROW><ROW><id>130309</id><snippet>map</snippet></ROW><ROW><id>130309</id><snippet>result = filter (None, map (expensive, mylist))
</snippet></ROW><ROW><id>130309</id><snippet>itertools.imap</snippet></ROW><ROW><id>130665</id><snippet>datetime.timedelta</snippet></ROW><ROW><id>130665</id><snippet>&gt;&gt;&gt; from datetime import datetime, timedelta
&gt;&gt;&gt; then = datetime.now () - timedelta (hours = 2)
&gt;&gt;&gt; now = datetime.now ()
&gt;&gt;&gt; (now - then) &gt; timedelta (days = 1)
False
&gt;&gt;&gt; (now - then) &gt; timedelta (hours = 1)
True
</snippet></ROW><ROW><id>130665</id><snippet>if (datetime.now() - self.timestamp) &gt; timedelta (seconds = 100)
</snippet></ROW><ROW><id>130665</id><snippet>if (datetime.now() - self.timestamp) &gt; timedelta (minutes = 100)
</snippet></ROW><ROW><id>133024</id><snippet>is</snippet></ROW><ROW><id>133024</id><snippet>True</snippet></ROW><ROW><id>133024</id><snippet>==</snippet></ROW><ROW><id>133024</id><snippet>&gt;&gt;&gt; a = [1, 2, 3]
&gt;&gt;&gt; b = a
&gt;&gt;&gt; b is a 
True
&gt;&gt;&gt; b == a
True
&gt;&gt;&gt; b = a[:]
&gt;&gt;&gt; b is a
False
&gt;&gt;&gt; b == a
True
</snippet></ROW><ROW><id>133024</id><snippet>&gt;&gt;&gt; 1000 is 10**3
False
&gt;&gt;&gt; 1000 == 10**3
True
</snippet></ROW><ROW><id>133024</id><snippet>&gt;&gt;&gt; "a" is "a"
True
&gt;&gt;&gt; "aa" is "a" * 2
True
&gt;&gt;&gt; x = "a"
&gt;&gt;&gt; "aa" is x * 2
False
&gt;&gt;&gt; "aa" is intern(x*2)
True
</snippet></ROW><ROW><id>133384</id><snippet>import code, traceback, signal

def debug(sig, frame):
    """Interrupt running process, and provide a python prompt for
    interactive debugging."""
    d={'_frame':frame}         # Allow access to frame object.
    d.update(frame.f_globals)  # Unless shadowed by global
    d.update(frame.f_locals)

    i = code.InteractiveConsole(d)
    message  = "Signal recieved : entering python shell.\nTraceback:\n"
    message += ''.join(traceback.format_stack(frame))
    i.interact(message)

def listen():
    signal.signal(signal.SIGUSR1, debug)  # Register handler
</snippet></ROW><ROW><id>133384</id><snippet>    os.kill(pid, signal.SIGUSR1)
</snippet></ROW><ROW><id>134023</id><snippet>lock = new Lock()</snippet></ROW><ROW><id>134638</id><snippet>lambda</snippet></ROW><ROW><id>134638</id><snippet>def</snippet></ROW><ROW><id>134638</id><snippet>def</snippet></ROW><ROW><id>134638</id><snippet>lambda</snippet></ROW><ROW><id>134638</id><snippet>map()</snippet></ROW><ROW><id>134638</id><snippet>filter()</snippet></ROW><ROW><id>134638</id><snippet>operator</snippet></ROW><ROW><id>134638</id><snippet>operator.add</snippet></ROW><ROW><id>134638</id><snippet>lambda x, y: x + y</snippet></ROW><ROW><id>134638</id><snippet>lambda</snippet></ROW><ROW><id>134638</id><snippet>def</snippet></ROW><ROW><id>134638</id><snippet>operator</snippet></ROW><ROW><id>134638</id><snippet>def</snippet></ROW><ROW><id>134638</id><snippet>lambda</snippet></ROW><ROW><id>134951</id><snippet>print "%02d" % (1,)
</snippet></ROW><ROW><id>135051</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>135114</id><snippet>RefactoringTool: Skipping implicit fixer: buffer
RefactoringTool: Skipping implicit fixer: idioms
RefactoringTool: Skipping implicit fixer: ws_comma
--- range_test.py (original)
+++ range_test.py (refactored)
@@ -1,7 +1,7 @@

 for x in range(20):
-    a=range(20)
+    a=list(range(20))
     b=list(range(20))
     c=[x for x in range(20)]
     d=(x for x in range(20))
-    e=xrange(20)
+    e=range(20)
</snippet></ROW><ROW><id>135311</id><snippet>0x0000000C</snippet></ROW><ROW><id>135311</id><snippet>0x0C000000</snippet></ROW><ROW><id>135318</id><snippet>A if C else B
</snippet></ROW><ROW><id>135318</id><snippet>stringValue = otherString or defaultString
</snippet></ROW><ROW><id>135720</id><snippet>r"""
This is an extension of the re module. It stores the last successful
match object and lets you access it's methods and attributes via
this module.

This module exports the following additional functions:
    expand  Return the string obtained by doing backslash substitution on a
            template string.
    group   Returns one or more subgroups of the match.
    groups  Return a tuple containing all the subgroups of the match.
    start   Return the indices of the start of the substring matched by
            group.
    end     Return the indices of the end of the substring matched by group.
    span    Returns a 2-tuple of (start(), end()) of the substring matched
            by group.

This module defines the following additional public attributes:
    pos         The value of pos which was passed to the search() or match()
                method.
    endpos      The value of endpos which was passed to the search() or
                match() method.
    lastindex   The integer index of the last matched capturing group.
    lastgroup   The name of the last matched capturing group.
    re          The regular expression object which as passed to search() or
                match().
    string      The string passed to match() or search().
"""

import re as re_

from re import *
from functools import wraps

__all__ = re_.__all__ + [ "expand", "group", "groups", "start", "end", "span",
        "last_match", "pos", "endpos", "lastindex", "lastgroup", "re", "string" ]

last_match = pos = endpos = lastindex = lastgroup = re = string = None

def _set_match(match=None):
    global last_match, pos, endpos, lastindex, lastgroup, re, string
    if match is not None:
        last_match = match
        pos = match.pos
        endpos = match.endpos
        lastindex = match.lastindex
        lastgroup = match.lastgroup
        re = match.re
        string = match.string
    return match

@wraps(re_.match)
def match(pattern, string, flags=0):
    return _set_match(re_.match(pattern, string, flags))


@wraps(re_.search)
def search(pattern, string, flags=0):
    return _set_match(re_.search(pattern, string, flags))

@wraps(re_.findall)
def findall(pattern, string, flags=0):
    matches = re_.findall(pattern, string, flags)
    if matches:
        _set_match(matches[-1])
    return matches

@wraps(re_.finditer)
def finditer(pattern, string, flags=0):
    for match in re_.finditer(pattern, string, flags):
        yield _set_match(match)

def expand(template):
    if last_match is None:
        raise TypeError, "No successful match yet."
    return last_match.expand(template)

def group(*indices):
    if last_match is None:
        raise TypeError, "No successful match yet."
    return last_match.group(*indices)

def groups(default=None):
    if last_match is None:
        raise TypeError, "No successful match yet."
    return last_match.groups(default)

def groupdict(default=None):
    if last_match is None:
        raise TypeError, "No successful match yet."
    return last_match.groupdict(default)

def start(group=0):
    if last_match is None:
        raise TypeError, "No successful match yet."
    return last_match.start(group)

def end(group=0):
    if last_match is None:
        raise TypeError, "No successful match yet."
    return last_match.end(group)

def span(group=0):
    if last_match is None:
        raise TypeError, "No successful match yet."
    return last_match.span(group)

del wraps  # Not needed past module compilation
</snippet></ROW><ROW><id>135720</id><snippet>if gre.match("foo(.+)", var):
  # do something with gre.group(1)
elif gre.match("bar(.+)", var):
  # do something with gre.group(1)
elif gre.match("baz(.+)", var):
  # do something with gre.group(1)
</snippet></ROW><ROW><id>136083</id><snippet>import asizeof

N = 1000000
print asizeof.asizeof(range(N)) / N
# -&gt; 20 (python 2.5, WinXP, 32-bit Linux)
# -&gt; 33 (64-bit Linux)
</snippet></ROW><ROW><id>136215</id><snippet>def num_groups(regex):
    pattern = re.compile(r"(?&lt;!\\)(?:\\\\)*(?:\[(?:\\.|[^\\\]])*\]|(\()(?!\?(?!P&lt;)))")
    return len([ 1 for x in re.finditer(pattern, regex) if x.group(1) ])
</snippet></ROW><ROW><id>136215</id><snippet>def num_groups(regex):
    return re.compile(regex).groups
</snippet></ROW><ROW><id>136780</id><snippet>import win32com.client as comclt
wsh= comclt.Dispatch("WScript.Shell")
wsh.AppActivate("Notepad") # select another application
wsh.SendKeys("a") # send the keys you want
</snippet></ROW><ROW><id>137320</id><snippet>cursor.execute("UPDATE people SET chats_count = chats_count + 1 WHERE id = '%s'" % person_id)
</snippet></ROW><ROW><id>137320</id><snippet>SELECT COUNT(*)</snippet></ROW><ROW><id>137320</id><snippet>SELECT COUNT(*) FROM whatever GROUP BY whatever</snippet></ROW><ROW><id>137320</id><snippet>cursor.execute( "INSERT INTO ... VALUES( %(x)s, %(y)s, %(z)s )", {'x':person_id, 'y':time_to_string(time), 'z':channel,} )
</snippet></ROW><ROW><id>137624</id><snippet>import mechanize

class HeadRequest(mechanize.Request):
    def get_method(self):
        return "HEAD"

request = HeadRequest("http://www.example.com/")
response = mechanize.urlopen(request)

print response.info()
</snippet></ROW><ROW><id>138079</id><snippet>public static class ReflectionExt
{
    public static object GetAttr(this object obj, string name)
    {
        Type type = obj.GetType();
        BindingFlags flags = BindingFlags.Instance | 
                                 BindingFlags.Public | 
                                 BindingFlags.GetProperty;

        return type.InvokeMember(name, flags, Type.DefaultBinder, obj, null);
    }
}
</snippet></ROW><ROW><id>138079</id><snippet>object value = ReflectionExt.GetAttr(obj, "PropertyName");
</snippet></ROW><ROW><id>138079</id><snippet>object value = obj.GetAttr("PropertyName");
</snippet></ROW><ROW><id>138260</id><snippet>import Image
im = Image.open("dead_parrot.jpg") #Can be many different formats.
pix = im.load()
print im.size #Get the width and hight of the image for iterating over
print pix[x,y] #Get the RGBA Value of the a pixel of an image
pix[x,y] = value # Set the RGBA Value of the image (tuple)
</snippet></ROW><ROW><id>138615</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; re.sub(r"x(?=[^']*'([^']|'[^']*')*$)", "P", "axbx'cxdxe'fxgh'ixj'k")
"axbx'cPdPe'fxgh'iPj'k"
</snippet></ROW><ROW><id>138709</id><snippet>./configure --enable-pythoninterp 
make
sudo make install
</snippet></ROW><ROW><id>138709</id><snippet>:version
</snippet></ROW><ROW><id>138709</id><snippet>:help python
</snippet></ROW><ROW><id>138709</id><snippet>:Call MyFunction()
</snippet></ROW><ROW><id>138709</id><snippet>:help user-functions
</snippet></ROW><ROW><id>139009</id><snippet>def addNewSkills(self, newSkillList):
    '''newSkillList is a list of skill names you want to add'''
    for skillName in newSkillList:
        newRadioButton = wx.RadioButton(self, -1, skillName)
        self.grid1.Add(newRadioButton) # appears in top-left corner of the panel
    self.Layout() # all newly added radio buttons appear where they should be
    self.Fit() # if you need to resize the panel to fit new items, this will help
</snippet></ROW><ROW><id>139009</id><snippet>self.grid1</snippet></ROW><ROW><id>139137</id><snippet>// change
old_name = settings.DATABASE_NAME
from django.db import connection
connection.creation.create_test_db(verbosity, autoclobber=not interactive)
result = unittest.TextTestRunner(verbosity=verbosity).run(suite)
connection.creation.destroy_test_db(old_name, verbosity)

// to:
result = unittest.TextTestRunner(verbosity=verbosity).run(suite)
</snippet></ROW><ROW><id>139137</id><snippet>TEST_RUNNER = 'myproject.test.test_runner.run_tests'
</snippet></ROW><ROW><id>139137</id><snippet>if settings.DATABASE_NAME != 'my_test_db': 
    sys.exit("You cannot run tests using the %s database. Please switch DATABASE_NAME to my_test_db in settings.py" % settings.DATABASE_NAME)
</snippet></ROW><ROW><id>139198</id><snippet>pydoc</snippet></ROW><ROW><id>139198</id><snippet>help()</snippet></ROW><ROW><id>139198</id><snippet>pydoc</snippet></ROW><ROW><id>139899</id><snippet>i</snippet></ROW><ROW><id>139899</id><snippet>f</snippet></ROW><ROW><id>139899</id><snippet>i</snippet></ROW><ROW><id>139899</id><snippet>t</snippet></ROW><ROW><id>139899</id><snippet>x = []
i = 1 # 1. from t
x.append(lambda: i)
i = -1 # 2. from t
x.append(lambda: i)
</snippet></ROW><ROW><id>139899</id><snippet>i</snippet></ROW><ROW><id>139899</id><snippet>i</snippet></ROW><ROW><id>139899</id><snippet>i</snippet></ROW><ROW><id>139899</id><snippet>f(*[lambda u=i: u for i in t])
</snippet></ROW><ROW><id>139899</id><snippet>i</snippet></ROW><ROW><id>140209</id><snippet>sub (replacement, string[, count = 0])
</snippet></ROW><ROW><id>140209</id><snippet>    p = re.compile( '(blue|white|red)')
    &gt;&gt;&gt; p.sub( 'colour', 'blue socks and red shoes')
    'colour socks and colour shoes'
    &gt;&gt;&gt; p.sub( 'colour', 'blue socks and red shoes', count=1)
    'colour socks and red shoes'
</snippet></ROW><ROW><id>140495</id><snippet>l.set_option(ldap.OPT_REFERRALS, 0)
</snippet></ROW><ROW><id>140818</id><snippet>&lt;pre&gt;
files = glob.glob('/usr/joe/*.gif')
&lt;/pre&gt;</snippet></ROW><ROW><id>140818</id><snippet>&lt;pre&gt;
import os
from os.path import join
for root, dirs, files in os.walk('/usr'):
   print "Current directory", root
   print "Sub directories", dirs
   print "Files", files
&lt;/pre&gt;</snippet></ROW><ROW><id>141327</id><snippet>&gt;&gt;&gt; [ name for name in os.listdir(thedir) if os.path.isdir(os.path.join(thedir, name)) ]
['ctypes', 'distutils', 'encodings', 'lib-tk', 'config', 'idlelib', 'xml', 'bsddb', 'hotshot', 'logging', 'doc', 'test', 'compiler', 'curses', 'site-packages', 'email', 'sqlite3', 'lib-dynload', 'wsgiref', 'plat-linux2', 'plat-mac']
</snippet></ROW><ROW><id>141426</id><snippet>def make_counter():
    i = 0
    def counter(): # counter() is a closure
        nonlocal i
        i += 1
        return i
    return counter

c1 = make_counter()
c2 = make_counter()

print (c1(), c1(), c2(), c2())
# -&gt; 1 2 1 2
</snippet></ROW><ROW><id>141451</id><snippet>&gt;&gt;&gt; from cStringIO import StringIO
&gt;&gt;&gt; f = StringIO('foo')
&gt;&gt;&gt; f.read()
'foo'
</snippet></ROW><ROW><id>141554</id><snippet>prepopulated_fields = {'slug':('title',),}
</snippet></ROW><ROW><id>141554</id><snippet>slugify</snippet></ROW><ROW><id>141554</id><snippet>|slugify</snippet></ROW><ROW><id>141710</id><snippet>&gt;&gt;&gt; def outer(x): 
...     def inner_reads():
...         # Will return outer's 'x'.
...         return x
...     def inner_writes(y):
...         # Will assign to a local 'x', not the outer 'x'
...         x = y
...     def inner_error(y):
...         # Will produce an error: 'x' is local because of the assignment,
...         # but we use it before it is assigned to.
...         tmp = x
...         x = y
...         return tmp
...     return inner_reads, inner_writes, inner_error
... 
&gt;&gt;&gt; inner_reads, inner_writes, inner_error = outer(5)
&gt;&gt;&gt; inner_reads()
5
&gt;&gt;&gt; inner_writes(10)
&gt;&gt;&gt; inner_reads()
5
&gt;&gt;&gt; inner_error(10)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "&lt;stdin&gt;", line 11, in inner_error
UnboundLocalError: local variable 'x' referenced before assignment
</snippet></ROW><ROW><id>141710</id><snippet>&gt;&gt;&gt; def outer(x):
...     x = [x]
...     def inner_reads():
...         # Will return outer's x's first (and only) element.
...         return x[0]
...     def inner_writes(y):
...         # Will look up outer's x, then mutate it.      
...         x[0] = y
...     def inner_error(y):
...         # Will now work, because 'x' is not assigned to, just referenced.
...         tmp = x[0]
...         x[0] = y
...         return tmp
...     return inner_reads, inner_writes, inner_error
... 
&gt;&gt;&gt; inner_reads, inner_writes, inner_error = outer(5)
&gt;&gt;&gt; inner_reads()
5
&gt;&gt;&gt; inner_writes(10)
&gt;&gt;&gt; inner_reads()
10
&gt;&gt;&gt; inner_error(15)
10
&gt;&gt;&gt; inner_reads()
15
</snippet></ROW><ROW><id>141777</id><snippet>&gt;&gt;&gt; class MyData:
...     def __init__(self, data):
...         "Initialize MyData from a sequence"
...         self.data = data
...     
...     @classmethod
...     def fromfilename(cls, filename):
...         "Initialize MyData from a file"
...         data = open(filename).readlines()
...         return cls(data)
...     
...     @classmethod
...     def fromdict(cls, datadict):
...         "Initialize MyData from a dict's items"
...         return cls(datadict.items())
... 
&gt;&gt;&gt; MyData([1, 2, 3]).data
[1, 2, 3]
&gt;&gt;&gt; MyData.fromfilename("/tmp/foobar").data
['foo\n', 'bar\n', 'baz\n']
&gt;&gt;&gt; MyData.fromdict({"spam": "ham"}).data
[('spam', 'ham')]
</snippet></ROW><ROW><id>141777</id><snippet>isinstance(x, basestring)</snippet></ROW><ROW><id>142162</id><snippet>MyApplicationAppDelegate</snippet></ROW><ROW><id>142162</id><snippet>statusItem.retain()</snippet></ROW><ROW><id>142566</id><snippet>__builtin__</snippet></ROW><ROW><id>142566</id><snippet>__builtin__</snippet></ROW><ROW><id>142566</id><snippet>print foo
</snippet></ROW><ROW><id>142566</id><snippet>import __builtin__
__builtin__.foo = 1
import a
</snippet></ROW><ROW><id>142566</id><snippet>__builtin__</snippet></ROW><ROW><id>142566</id><snippet>__builtins__</snippet></ROW><ROW><id>142566</id><snippet>__builtin__</snippet></ROW><ROW><id>142566</id><snippet>builtins</snippet></ROW><ROW><id>142770</id><snippet>./configure &amp;&amp; make &amp;&amp; sudo make install</snippet></ROW><ROW><id>142770</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>142770</id><snippet>/usr/bin/python2.5</snippet></ROW><ROW><id>142770</id><snippet>ln -s /usr/local/bin/python2.6 /usr/bin/python</snippet></ROW><ROW><id>142770</id><snippet> /usr/lib/python2.5/site-packages/</snippet></ROW><ROW><id>142770</id><snippet> /usr/local/lib/python2.5/site-packages/</snippet></ROW><ROW><id>142770</id><snippet>sudo easy_install &lt;name&gt;</snippet></ROW><ROW><id>142854</id><snippet>Windows Registry Editor Version 5.00

[HKEY_CLASSES_ROOT\Python.File\shellex\DropHandler]
@="{60254CA5-953B-11CF-8C96-00AA00B8708C}"
</snippet></ROW><ROW><id>142854</id><snippet>86C86720-42A0-1069-A2E8-08002B30309D</snippet></ROW><ROW><id>142854</id><snippet>.pyw</snippet></ROW><ROW><id>142854</id><snippet>.pyc</snippet></ROW><ROW><id>142854</id><snippet>Python.NoConFile</snippet></ROW><ROW><id>142854</id><snippet>Python.CompiledFile</snippet></ROW><ROW><id>145162</id><snippet>gtk.IconView</snippet></ROW><ROW><id>145610</id><snippet>b = Binding(url='/cgi-bin/simple-test', tracefile=fp)
b.cookies['foo'] = 'bar'
</snippet></ROW><ROW><id>146365</id><snippet>global</snippet></ROW><ROW><id>146365</id><snippet>def g(n):
    global c
    c = c + n
</snippet></ROW><ROW><id>146524</id><snippet>myproject.myapp.views</snippet></ROW><ROW><id>146524</id><snippet>myapp.views</snippet></ROW><ROW><id>146524</id><snippet>settings.py</snippet></ROW><ROW><id>146524</id><snippet>ROOT_URLCONF = `myproject.urls`
</snippet></ROW><ROW><id>146524</id><snippet>&gt;&gt;&gt; from django.core.urlresolvers import reverse
&gt;&gt;&gt; from myproject.myapp import views
&gt;&gt;&gt; reverse(views.myview)
'/myview/'
</snippet></ROW><ROW><id>146524</id><snippet>&gt;&gt;&gt; from django.core import urlresolvers
&gt;&gt;&gt; from myapp import myview
&gt;&gt;&gt; urlresolvers.get_resolver (None).reverse_dict
{None: ([(u'myview/', [])], 'myview/$'), &lt;function myview at 0x845d17c&gt;: ([(u'myview/', [])], 'myview/$')}
&gt;&gt;&gt; v1 = urlresolvers.get_resolver (None).reverse_dict.items ()[1][0]
&gt;&gt;&gt; reverse(v1)
'/myview/'
&gt;&gt;&gt; v1 is myview
False
&gt;&gt;&gt; v1.__module__
'testproject.myapp.views'
&gt;&gt;&gt; myview.__module__
'myapp.views'
</snippet></ROW><ROW><id>146524</id><snippet>r'^myview/$'</snippet></ROW><ROW><id>146524</id><snippet>reverse ('myapp.myview')</snippet></ROW><ROW><id>146524</id><snippet>urls.py</snippet></ROW><ROW><id>146524</id><snippet>myapp</snippet></ROW><ROW><id>146524</id><snippet>myproject/myapp/urls.py</snippet></ROW><ROW><id>146524</id><snippet>myproject/urls.py</snippet></ROW><ROW><id>146524</id><snippet>from django.conf.urls.defaults import patterns
urlpatterns = patterns ('',
    (r'^/', 'myapp.urls'),
)
</snippet></ROW><ROW><id>146671</id><snippet>MatchedQuotes = re.compile(r"(['\"])(.*)\1", re.LOCALE)
item = MatchedQuotes.sub(r'\2', item, 1)
</snippet></ROW><ROW><id>146671</id><snippet>VariableDefinition = re.compile(r'&lt;%(["\']?)(.*?)\1=(["\']?)(.*?)\3%&gt;', re.LOCALE)
VarRepl = re.compile(r'&lt;%(["\']?)(.*?)\1%&gt;', re.LOCALE)

def processVariables(item):
    vars = {}
    def findVars(m):
        vars[m.group(2).upper()] = m.group(4)
        return ""

    item = VariableDefinition.sub(findVars, item)
    return VarRepl.sub(lambda m: vars[m.group(2).upper()], item)

print processVariables('&lt;%"TITLE"="This Is A Test Variable"%&gt;The Web &lt;%"TITLE"%&gt;')
</snippet></ROW><ROW><id>146671</id><snippet>Original       : 13.637
Global regexes : 12.771
Single regex   :  9.095
Final version  :  1.846
</snippet></ROW><ROW><id>146833</id><snippet>@register.inclusion_tag('person/address.html')
def display_address(address):
    return {'address': address}
</snippet></ROW><ROW><id>146833</id><snippet>{% load %}</snippet></ROW><ROW><id>146833</id><snippet>{% display_address address %}
</snippet></ROW><ROW><id>146957</id><snippet>difflib</snippet></ROW><ROW><id>146957</id><snippet>def text_compare(text1, text2, isjunk=None):
    return difflib.SequenceMatcher(isjunk, text1, text2).ratio()
</snippet></ROW><ROW><id>147541</id><snippet>import *</snippet></ROW><ROW><id>147541</id><snippet>import *</snippet></ROW><ROW><id>147541</id><snippet>m = __import__ (S)
try:
    attrlist = m.__all__
except AttributeError:
    attrlist = dir (m)
for attr in attrlist:
    globals()[attr] = getattr (m, attr)
</snippet></ROW><ROW><id>147756</id><snippet>import codecs
f = codecs.open('unicode.rst', encoding='utf-8')
for line in f:
    print repr(line)
</snippet></ROW><ROW><id>147756</id><snippet>f = codecs.open('test', encoding='utf-8', mode='w+')
f.write(u'\u4500 blah blah blah\n')
f.seek(0)
print repr(f.readline()[:1])
f.close()
</snippet></ROW><ROW><id>147756</id><snippet>unicodedata</snippet></ROW><ROW><id>147756</id><snippet>normalize()</snippet></ROW><ROW><id>147756</id><snippet>string.encode()</snippet></ROW><ROW><id>147756</id><snippet>&gt;&gt;&gt; teststr
u'I don\xe2\x80\x98t like this'
&gt;&gt;&gt; unicodedata.normalize('NFKD', teststr).encode('ascii', 'ignore')
'I donat like this'
</snippet></ROW><ROW><id>147791</id><snippet>difflib.SequenceMatcher(lambda x: x in " \t\n", doc1, doc2).ratio()
</snippet></ROW><ROW><id>147793</id><snippet>class MyForm(forms.Form):
    my_field = forms.MultipleChoiceField(choices=SOME_CHOICES, widget=forms.CheckboxSelectMultiple())

    def clean_my_field(self):
        if len(self.cleaned_data['my_field']) &gt; 3:
            raise forms.ValidationError('Select no more than 3.')
        return self.cleaned_data['my_field']
</snippet></ROW><ROW><id>147878</id><snippet>$ easy_install decorator
</snippet></ROW><ROW><id>147878</id><snippet>args_as_ints()</snippet></ROW><ROW><id>147878</id><snippet>import decorator


@decorator.decorator
def args_as_ints(f, *args, **kwargs):
    args = [int(x) for x in args]
    kwargs = dict((k, int(v)) for k, v in kwargs.items())
    return f(*args, **kwargs)


@args_as_ints
def funny_function(x, y, z=3):
    """Computes x*y + 2*z"""
    return x*y + 2*z


print funny_function("3", 4.0, z="5")
# 22
help(funny_function)
# Help on function funny_function in module __main__:
# 
# funny_function(x, y, z=3)
#     Computes x*y + 2*z
</snippet></ROW><ROW><id>148048</id><snippet>if job in ("mechanic", "tech"):
    print "awesome"
elif job in ("tool", "rock"):
    print "dolt"
</snippet></ROW><ROW><id>148048</id><snippet>in</snippet></ROW><ROW><id>148048</id><snippet>in</snippet></ROW><ROW><id>148048</id><snippet>frozenset</snippet></ROW><ROW><id>148048</id><snippet>AwesomeJobs = frozenset(["mechanic", "tech", ... lots of others ])
def func():
    if job in AwesomeJobs:
        print "awesome"
</snippet></ROW><ROW><id>148048</id><snippet>frozenset</snippet></ROW><ROW><id>148048</id><snippet>set</snippet></ROW><ROW><id>149295</id><snippet>def save(self):
    from django.template.defaultfilters import slugify

    if not self.slug:
        self.slug = slugify(self.title)

    super(Your_Model_Name,self).save()
</snippet></ROW><ROW><id>149917</id><snippet>class cache(object):
    def __init__(self, fun):
        self.fun = fun
        self.cache = {}

    def __call__(self, *args, **kwargs):
        key  = str(args) + str(kwargs)
        try:
            return self.cache[key]
        except KeyError:
            self.cache[key] = rval = self.fun(*args, **kwargs)
            return rval
        except TypeError: # incase key isn't a valid key - don't cache
            return self.fun(*args, **kwargs)
</snippet></ROW><ROW><id>149917</id><snippet>@cache
def get_url_src(url):
    return urllib.urlopen(url).read()
</snippet></ROW><ROW><id>150309</id><snippet>__reduce__()</snippet></ROW><ROW><id>150309</id><snippet>__reduce__</snippet></ROW><ROW><id>150309</id><snippet>__reduce_ex__</snippet></ROW><ROW><id>150309</id><snippet>__reduce__</snippet></ROW><ROW><id>150309</id><snippet>__reduce_ex__</snippet></ROW><ROW><id>150309</id><snippet>__reduce__</snippet></ROW><ROW><id>150309</id><snippet>__reduce__</snippet></ROW><ROW><id>150309</id><snippet>__reduce_ex__</snippet></ROW><ROW><id>150376</id><snippet>import pdb; pdb.set_trace()
</snippet></ROW><ROW><id>150584</id><snippet>&gt;&gt;&gt; s = '\0\x02'
&gt;&gt;&gt; struct.unpack('&gt;H', s)
(2,)
</snippet></ROW><ROW><id>150584</id><snippet>&gt;&gt;&gt; a,b,c = struct.unpack('&gt;HHi', some_string)
</snippet></ROW><ROW><id>150584</id><snippet>ident, major, minor, flags, len = struct.unpack('&gt;3sBBBI', ten_byte_string)
</snippet></ROW><ROW><id>151211</id><snippet>from datetime import date

d0 = date(2008, 8, 18)
d1 = date(2008, 9, 26)
delta = d0 - d1
print delta.days
</snippet></ROW><ROW><id>152225</id><snippet>[^ \t\n]*
</snippet></ROW><ROW><id>152225</id><snippet>[a-zA-Z0-9&amp;;]*
</snippet></ROW><ROW><id>152225</id><snippet>(\w+|&amp;\w+;)*
</snippet></ROW><ROW><id>152454</id><snippet>import win32con
import win32gui

def isRealWindow(hWnd):
    '''Return True iff given window is a real Windows application window.'''
    if not win32gui.IsWindowVisible(hWnd):
        return False
    if win32gui.GetParent(hWnd) != 0:
        return False
    hasNoOwner = win32gui.GetWindow(hWnd, win32con.GW_OWNER) == 0
    lExStyle = win32gui.GetWindowLong(hWnd, win32con.GWL_EXSTYLE)
    if (((lExStyle &amp; win32con.WS_EX_TOOLWINDOW) == 0 and hasNoOwner)
      or ((lExStyle &amp; win32con.WS_EX_APPWINDOW != 0) and not hasNoOwner)):
        if win32gui.GetWindowText(hWnd):
            return True
    return False

def getWindowSizes():
    '''
    Return a list of tuples (handler, (width, height)) for each real window.
    '''
    def callback(hWnd, windows):
        if not isRealWindow(hWnd):
            return
        rect = win32gui.GetWindowRect(hWnd)
        windows.append((hWnd, (rect[2] - rect[0], rect[3] - rect[1])))
    windows = []
    win32gui.EnumWindows(callback, windows)
    return windows

for win in getWindowSizes():
    print win
</snippet></ROW><ROW><id>152454</id><snippet>GetWindowRect</snippet></ROW><ROW><id>152454</id><snippet>GetClientRect</snippet></ROW><ROW><id>152596</id><snippet>o</snippet></ROW><ROW><id>152596</id><snippet>str</snippet></ROW><ROW><id>152596</id><snippet>type(o) is str
</snippet></ROW><ROW><id>152596</id><snippet>o</snippet></ROW><ROW><id>152596</id><snippet>str</snippet></ROW><ROW><id>152596</id><snippet>str</snippet></ROW><ROW><id>152596</id><snippet>isinstance(o, str)
</snippet></ROW><ROW><id>152596</id><snippet>issubclass(type(o), str)
type(o) in ([str] + str.__subclasses__())
</snippet></ROW><ROW><id>152596</id><snippet>isinstance(o, basestring)
</snippet></ROW><ROW><id>152596</id><snippet>unicode</snippet></ROW><ROW><id>152596</id><snippet>str</snippet></ROW><ROW><id>152596</id><snippet>str</snippet></ROW><ROW><id>152596</id><snippet>unicode</snippet></ROW><ROW><id>152596</id><snippet>basestring</snippet></ROW><ROW><id>152596</id><snippet>isinstance</snippet></ROW><ROW><id>152596</id><snippet>isinstance(o, (str, unicode))
</snippet></ROW><ROW><id>153284</id><snippet>&gt;&gt;&gt; help(range)
Help on built-in function range in module __builtin__:

range(...)
    range([start,] stop[, step]) -&gt; list of integers

...
</snippet></ROW><ROW><id>154617</id><snippet>sys.dont_write_bytecode</snippet></ROW><ROW><id>154617</id><snippet>.pyc</snippet></ROW><ROW><id>154617</id><snippet>__pycache__</snippet></ROW><ROW><id>154660</id><snippet>class AppHTTPServer (SocketServer.ThreadingMixIn, BaseHTTPServer.HTTPServer):
    def serve_forever(self):
        self.stop_serving = False
        while not self.stop_serving:
            self.handle_request()

    def stop (self):
        self.stop_serving = True
</snippet></ROW><ROW><id>154660</id><snippet>def SvcStop(self):
    self.ReportServiceStatus(win32service.SERVICE_STOP_PENDING)
    self.httpd.stop()
</snippet></ROW><ROW><id>154660</id><snippet>exit(0)
</snippet></ROW><ROW><id>155127</id><snippet>$ perl -0777 -ne'print qq($1) if /__all__ = \[(.*?)\]/s' __init__.py | grep Error 

'BrowserStateError',
'ContentTooShortError',
'FormNotFoundError',
'GopherError',
'HTTPDefaultErrorHandler',
'HTTPError',
'HTTPErrorProcessor',
'LinkNotFoundError',
'LoadError',
'ParseError',
'RobotExclusionError',
'URLError',
</snippet></ROW><ROW><id>155127</id><snippet>&gt;&gt;&gt; import mechanize
&gt;&gt;&gt; filter(lambda s: "Error" in s, dir(mechanize))
['BrowserStateError', 'ContentTooShortError', 'FormNotFoundError', 'GopherError'
, 'HTTPDefaultErrorHandler', 'HTTPError', 'HTTPErrorProcessor', 'LinkNotFoundErr
or', 'LoadError', 'ParseError', 'RobotExclusionError', 'URLError']
</snippet></ROW><ROW><id>155172</id><snippet>from dateutil import rrule
from datetime import datetime, timedelta

now = datetime.now()
hundredDaysLater = now + timedelta(days=100)

for dt in rrule.rrule(rrule.MONTHLY, dtstart=now, until=hundredDaysLater):
    print dt
</snippet></ROW><ROW><id>155172</id><snippet>2008-09-30 23:29:54
2008-10-30 23:29:54
2008-11-30 23:29:54
2008-12-30 23:29:54
</snippet></ROW><ROW><id>156090</id><snippet>CanvasEntry</snippet></ROW><ROW><id>156090</id><snippet>gtk.Entry</snippet></ROW><ROW><id>156090</id><snippet>textClicked</snippet></ROW><ROW><id>156090</id><snippet>def textClicked(text, event, row):
    input = hippo.CanvasEntry()
    input.set_property('text', text.get_property('text'))
    entry = input.get_property("widget")
    def grabit(widget):
        entry.grab_focus()
    entry.connect("realize", grabit)
    parent = text.get_parent()
    parent.insert_after(input, text)
    parent.remove(text)
</snippet></ROW><ROW><id>156513</id><snippet>count = 0
for line in lines:
    if line.startswith ('"""'):
        count += 1
        if count &lt; 3:
            # Before or during end of the docstring
            continue
    # Line is after docstring
</snippet></ROW><ROW><id>156736</id><snippet>def queue_get_all(q):
    items = []
    maxItemsToRetreive = 10
    for numOfItemsRetrieved in range(0, maxItemsToRetreive)
        try:
            if numOfItemsRetrieved == maxItemsToRetreive:
                break
            items.append(q.get_nowait())
        except Empty, e:
            break
    return items
</snippet></ROW><ROW><id>156949</id><snippet>args = {}
for arg in shlex.split(cmdln_args):
    key, value = arg.split('=', 1)
    args[key] = value
</snippet></ROW><ROW><id>157023</id><snippet>if request.method == 'POST':
    PostEntries = len(request.POST)
    x = 1           
    while x &lt; PostEntries:
            p = Product.objects.get(pk=x)
            p.order = int(request.POST.get(str(x),''))
            print "Itr: " + str(x)
            x = x + 1
            p.save() # NOTE HERE &lt;- saving in loop instead of outside
    print "Product Order saved"             
    return HttpResponse("Saved")
</snippet></ROW><ROW><id>157141</id><snippet>twos, threes = countmatching(xrange(1,10),
                             lambda a: a % 2 == 0,
                             lambda a: a % 3 == 0)
</snippet></ROW><ROW><id>157141</id><snippet>def countmatching(iterable, *predicates):
    v = [0] * len(predicates)
    for e in iterable:
        for i,p in enumerate(predicates):
            if p(e):
                v[i] += 1
    return tuple(v)
</snippet></ROW><ROW><id>157141</id><snippet>def quantify(seq, pred=None):
    "Count how many times the predicate is true in the sequence"
    return sum(imap(pred, seq))
</snippet></ROW><ROW><id>157423</id><snippet>time</snippet></ROW><ROW><id>157423</id><snippet>time</snippet></ROW><ROW><id>157423</id><snippet>clock</snippet></ROW><ROW><id>157423</id><snippet>time</snippet></ROW><ROW><id>157423</id><snippet>clock</snippet></ROW><ROW><id>157423</id><snippet>clock</snippet></ROW><ROW><id>157423</id><snippet>clock</snippet></ROW><ROW><id>157423</id><snippet>clock</snippet></ROW><ROW><id>157423</id><snippet>Timer</snippet></ROW><ROW><id>157423</id><snippet>time.perf_counter()</snippet></ROW><ROW><id>157423</id><snippet>time.process_time()</snippet></ROW><ROW><id>157423</id><snippet>perf_counter</snippet></ROW><ROW><id>157423</id><snippet>timeit</snippet></ROW><ROW><id>157445</id><snippet>a = { 'key':1, 'another':2, 'key2':1 }

b= a.items()
b.sort( key=lambda a:(-a[1],a[0]) )
print b
</snippet></ROW><ROW><id>157445</id><snippet>def valueKeyCmp( a, b ):
    return cmp( (-a[1], a[0]), (-b[1], b[0] ) )

b.sort( cmp= valueKeyCmp )
print b
</snippet></ROW><ROW><id>157445</id><snippet>b.sort( key=lambda a:a[1], reverse=True )
b.sort( key=lambda a:a[0] )
print b
</snippet></ROW><ROW><id>157711</id><snippet>    class TimeStamper(object):
        def __init__(self):
            self.lock = threading.Lock()
            self.prev = None
            self.count = 0

         def getTimestamp(self):
             with self.lock:
                 ts = str(datetime.now())
                 if ts == self.prev:
                     ts +='.%04d' % self.count
                     self.count += 1
                 else:
                     self.prev = ts
                     self.count = 1
             return ts
</snippet></ROW><ROW><id>157975</id><snippet>&gt;&gt;&gt; import base64
&gt;&gt;&gt; print base64.b64encode("password")
cGFzc3dvcmQ=
&gt;&gt;&gt; print base64.b64decode("cGFzc3dvcmQ=")
password
</snippet></ROW><ROW><id>158403</id><snippet>CRoom</snippet></ROW><ROW><id>158403</id><snippet>person.py</snippet></ROW><ROW><id>158403</id><snippet>CRoom</snippet></ROW><ROW><id>158403</id><snippet>person.py</snippet></ROW><ROW><id>158403</id><snippet>from room import CRoom</snippet></ROW><ROW><id>158403</id><snippet>import room</snippet></ROW><ROW><id>158403</id><snippet>room.CRoom</snippet></ROW><ROW><id>158403</id><snippet>Self.NextId += 1</snippet></ROW><ROW><id>158403</id><snippet>NextId</snippet></ROW><ROW><id>158403</id><snippet>NextId</snippet></ROW><ROW><id>158403</id><snippet>CRoom.NextId += 1</snippet></ROW><ROW><id>158403</id><snippet>Self.__class__.NextId += 1</snippet></ROW><ROW><id>158753</id><snippet>import dictionary

dictionary.words[whatever]
</snippet></ROW><ROW><id>158753</id><snippet>words = {}

# read file and add to 'words'
</snippet></ROW><ROW><id>159195</id><snippet>from uuid import getnode as get_mac
mac = get_mac()
</snippet></ROW><ROW><id>159745</id><snippet>mixedCase</snippet></ROW><ROW><id>159745</id><snippet>lower_case</snippet></ROW><ROW><id>160031</id><snippet>import win32evtlogutil
def onEvent(record):
  # Do something with the event log record
win32evtlogutil.FeedEventLogRecords(onEvent)
</snippet></ROW><ROW><id>160227</id><snippet>class C
  puts "I am a #{self}"
  def instance_method
    puts 'instance_method'
  end
  def self.class_method
    puts 'class_method'
  end
end
</snippet></ROW><ROW><id>160227</id><snippet>c=C.new

c.instance_method
#=&gt; instance_method
C.class_method
#=&gt; class_method
</snippet></ROW><ROW><id>160375</id><snippet>import subprocess
ps = subprocess.Popen("ps -U 0", shell=True, stdout=subprocess.PIPE)
print ps.stdout.read()
ps.stdout.close()
ps.wait()
</snippet></ROW><ROW><id>160375</id><snippet>Python 2.5.2 (r252:60911, Feb 22 2008, 07:57:53) 
[GCC 4.0.1 (Apple Computer, Inc. build 5363)] on darwin
</snippet></ROW><ROW><id>160898</id><snippet>x</snippet></ROW><ROW><id>160898</id><snippet>x = 7</snippet></ROW><ROW><id>160898</id><snippet>def foo(x): 
   a = lambda: x 
   x = 7 
   b = lambda: x 
   return a,b
</snippet></ROW><ROW><id>160898</id><snippet>x = 7</snippet></ROW><ROW><id>160916</id><snippet>TechInline</snippet></ROW><ROW><id>160916</id><snippet>TechInLine</snippet></ROW><ROW><id>160916</id><snippet>python manage.py sqlreset &lt;myapp&gt;
</snippet></ROW><ROW><id>160916</id><snippet>projects_project_techs</snippet></ROW><ROW><id>161082</id><snippet>import itertools

cars = [
    {'car': 'X2', 'mods': [1,2]},
    {'car': 'Y2', 'mods': [2]},
    {'car': 'W2', 'mods': [1]},
    {'car': 'X1', 'mods': [1,2]},
    {'car': 'W1', 'mods': [1]},
    {'car': 'Y1', 'mods': [2]},
    {'car': 'Z1', 'mods': [1,2,3]},
    {'car': 'X3', 'mods': [1,2]},
]

cars.sort(key=lambda car: car['mods'])

cars_by_common_mods = {}
for k, g in itertools.groupby(cars, lambda car: car['mods']):
    cars_by_common_mods[frozenset(k)] = [car['car'] for car in g]

print cars_by_common_mods
</snippet></ROW><ROW><id>161082</id><snippet>import collections
import itertools
from operator import itemgetter

from django.db import connection

cursor = connection.cursor()
cursor.execute('SELECT car_id, mod_id FROM someapp_car_mod ORDER BY 1, 2')
cars = collections.defaultdict(list)
for row in cursor.fetchall():
    cars[row[0]].append(row[1])

# Here's one I prepared earlier, which emulates the sample data we've been working
# with so far, but using the car id instead of the previous string.
cars = {
    1: [1,2],
    2: [2],
    3: [1],
    4: [1,2],
    5: [1],
    6: [2],
    7: [1,2,3],
    8: [1,2],
}

sorted_cars = sorted(cars.iteritems(), key=itemgetter(1))
cars_by_common_mods = []
for k, g in itertools.groupby(sorted_cars, key=itemgetter(1)):
    cars_by_common_mods.append({'mods': k, 'cars': map(itemgetter(0), g)})

print cars_by_common_mods

# Which, for the sample data gives me (reformatted by hand for clarity)
[{'cars': [3, 5],    'mods': [1]},
 {'cars': [1, 4, 8], 'mods': [1, 2]},
 {'cars': [7],       'mods': [1, 2, 3]},
 {'cars': [2, 6],    'mods': [2]}]
</snippet></ROW><ROW><id>161082</id><snippet>dict</snippet></ROW><ROW><id>161146</id><snippet>#!/usr/bin/perl
use strict;
use warnings;
use WWW::Mechanize;

my $mech = WWW::Mechanize-&gt;new;

$mech-&gt;get("http://stackoverflow.com/");

$mech-&gt;success or die "Oh no! Couldn't fetch stackoverflow.com";

foreach my $link ($mech-&gt;links) {
    print "* [",$link-&gt;text, "] points to ", $link-&gt;url, "\n";
}
</snippet></ROW><ROW><id>161146</id><snippet>$link</snippet></ROW><ROW><id>161615</id><snippet>from threading import local

_thread_locals = local()
def get_current_user():
    return getattr(getattr(_thread_locals, 'user', None),'id',None)

class ThreadLocals(object):
    """Middleware that gets various objects from the
    request object and saves them in thread local storage."""
    def process_request(self, request):
        _thread_locals.user = getattr(request, 'user', None)
</snippet></ROW><ROW><id>161615</id><snippet>user = threadlocals.get_current_user
</snippet></ROW><ROW><id>162707</id><snippet>class RevisionView(object):
    def __init__(self, db, revid):
        self.db = db
        self.revid = revid
    def __getitem__(self, item):
        self.db.getrev(item, self.revid)
</snippet></ROW><ROW><id>162854</id><snippet>_ContainerThing__value</snippet></ROW><ROW><id>162854</id><snippet>__value</snippet></ROW><ROW><id>162854</id><snippet>value</snippet></ROW><ROW><id>162854</id><snippet>_value</snippet></ROW><ROW><id>163095</id><snippet>remotefile.info()['Content-Disposition']</snippet></ROW><ROW><id>163095</id><snippet>urlparse.urlsplit</snippet></ROW><ROW><id>163095</id><snippet>&gt;&gt;&gt; urlparse.urlsplit('http://example.com/somefile.zip')
('http', 'example.com', '/somefile.zip', '', '')
&gt;&gt;&gt; urlparse.urlsplit('http://example.com/somedir/somefile.zip')
('http', 'example.com', '/somedir/somefile.zip', '', '')
</snippet></ROW><ROW><id>163095</id><snippet>&gt;&gt;&gt; 'http://example.com/somefile.zip'.split('/')[-1]
'somefile.zip'
&gt;&gt;&gt; 'http://example.com/somedir/somefile.zip'.split('/')[-1]
'somefile.zip'
</snippet></ROW><ROW><id>163212</id><snippet>**</snippet></ROW><ROW><id>163212</id><snippet>def glob_to_regex(pat, dirsep=os.sep):
    dirsep = re.escape(dirsep)
    print re.escape(pat)
    regex = (re.escape(pat).replace("\\*\\*"+dirsep,".*")
                           .replace("\\*\\*",".*")
                           .replace("\\*","[^%s]*" % dirsep)
                           .replace("\\?","[^%s]" % dirsep))
    return re.compile(regex+"$")
</snippet></ROW><ROW><id>163212</id><snippet>[a-z]</snippet></ROW><ROW><id>163212</id><snippet>\*\*/</snippet></ROW><ROW><id>163212</id><snippet>\*\*/CVS</snippet></ROW><ROW><id>163212</id><snippet>./CVS</snippet></ROW><ROW><id>163212</id><snippet>\*\*</snippet></ROW><ROW><id>163212</id><snippet>**</snippet></ROW><ROW><id>163212</id><snippet>pat.split('/') -&gt; ['**','CVS','*']</snippet></ROW><ROW><id>163212</id><snippet>n levels deep -&gt; look at pat[n]</snippet></ROW><ROW><id>163212</id><snippet>pat[n] == '**'</snippet></ROW><ROW><id>163212</id><snippet>dirsep.join(pat[n:])</snippet></ROW><ROW><id>163212</id><snippet>glob\_to\_regex()</snippet></ROW><ROW><id>163212</id><snippet>os.walk</snippet></ROW><ROW><id>163212</id><snippet>"**"</snippet></ROW><ROW><id>163212</id><snippet>glob.glob(os.path.join(curpath,pat[n]))</snippet></ROW><ROW><id>163212</id><snippet>"**"</snippet></ROW><ROW><id>163212</id><snippet>pat[n]</snippet></ROW><ROW><id>163212</id><snippet>pat[n+1]</snippet></ROW><ROW><id>164631</id><snippet>class UserAdmin(admin.ModelAdmin):
    list_display = (..., 'get_reviews')

    def get_reviews(self, obj):
        return obj.book.author
    get_reviews.short_description = 'Author'        
</snippet></ROW><ROW><id>164769</id><snippet>SetEnv proxy-nokeepalive 1</snippet></ROW><ROW><id>164870</id><snippet>class Comment(db.Model):
    series = db.ReferenceProperty(reference_class=Series);

    def series_id(self):
        return Comment.series.get_value_for_datastore(self)
</snippet></ROW><ROW><id>164987</id><snippet>#</snippet></ROW><ROW><id>165662</id><snippet>Popen.communicate()</snippet></ROW><ROW><id>165662</id><snippet>    pipe = os.popen(cmd, 'w', bufsize)
    # ==&gt;
    pipe = Popen(cmd, shell=True, bufsize=bufsize, stdin=PIPE).stdin
</snippet></ROW><ROW><id>165662</id><snippet>from subprocess import Popen, PIPE, STDOUT

p = Popen(['grep', 'f'], stdout=PIPE, stdin=PIPE, stderr=STDOUT)

grep_stdout = p.communicate(input='one\ntwo\nthree\nfour\nfive\nsix\n')[0]
print(grep_stdout)
# -&gt; four
# -&gt; five
# -&gt;
</snippet></ROW><ROW><id>165911</id><snippet>&gt;&gt;&gt; class MyClass:
...     myAttribute = 0
... 
&gt;&gt;&gt; c = MyClass()
&gt;&gt;&gt; c.myAttribute 
0
&gt;&gt;&gt; c.myAttribute = 1
&gt;&gt;&gt; c.myAttribute
1
</snippet></ROW><ROW><id>166246</id><snippet>from __future__ import with_statement

class OutWrapper(object):
    def __init__(self, realOutput, logFileName):
        self._realOutput = realOutput
        self._logFileName = logFileName

    def _log(self, text):
        with open(self._logFileName, 'a') as logFile:
            logFile.write(text)

    def write(self, text):
        self._log(text)
        self._realOutput.write(text)
</snippet></ROW><ROW><id>166246</id><snippet>import sys    
sys.stdout = OutWrapper(sys.stdout, r'c:\temp\log.txt')
</snippet></ROW><ROW><id>166246</id><snippet>MainLoop</snippet></ROW><ROW><id>166246</id><snippet>raise</snippet></ROW><ROW><id>166246</id><snippet>try:
    app.MainLoop()
except:
    exc_info = sys.exc_info()
    saveExcInfo(exc_info) # this method you have to write yourself
    raise
</snippet></ROW><ROW><id>166441</id><snippet>del L[:]
</snippet></ROW><ROW><id>166520</id><snippet>import socket
socket.gethostbyname(socket.gethostname())
</snippet></ROW><ROW><id>166552</id><snippet>import urllib
ip = urllib.urlopen('http://automation.whatismyip.com/n09230945.asp').read()
</snippet></ROW><ROW><id>166552</id><snippet>&lt;?php echo $_SERVER['REMOTE_ADDR']; ?&gt;
</snippet></ROW><ROW><id>166552</id><snippet>&lt;%
Dim UserIPAddress
UserIPAddress = Request.ServerVariables("REMOTE_ADDR")
%&gt;
</snippet></ROW><ROW><id>167134</id><snippet>for key in exclusion:
     a.pop(key, None)
</snippet></ROW><ROW><id>167134</id><snippet>None</snippet></ROW><ROW><id>167134</id><snippet>key</snippet></ROW><ROW><id>167200</id><snippet>preg_replace('/[^a-zA-Z0-9]/', '', $str)
</snippet></ROW><ROW><id>168009</id><snippet>def rematcher(re_str, iterable):

    matcher= re.compile(re_str)
    in_match= 0
    for item in iterable:
        if matcher.match(item):
            if in_match == 0:
                yield item
            in_match+= 1
        else:
            if in_match &gt; 1:
                yield "%s repeats %d more times\n" % (re_str, in_match-1)
            in_match= 0
            yield item
    if in_match &gt; 1:
        yield "%s repeats %d more times\n" % (re_str, in_match-1)

import sys, re

for line in rematcher(".*Dog.*", sys.stdin):
    sys.stdout.write(line)
</snippet></ROW><ROW><id>168009</id><snippet>final_string= '\n'.join(rematcher(".*Dog.*", your_initial_string.split("\n")))
</snippet></ROW><ROW><id>168328</id><snippet>mods = ('Project','Links','Profile','Contact')

urlpatterns = patterns('',
   *(('^%s/$'%n, 'mysite.app.views.%s'%n.lower()) for n in mods)
)
</snippet></ROW><ROW><id>168584</id><snippet>os.write(tup[0], "foo\n")
</snippet></ROW><ROW><id>168584</id><snippet>f = os.fdopen(tup[0], "w")
f.write("foo")
</snippet></ROW><ROW><id>168996</id><snippet>import pyHook
import pythoncom

def onclick(event):
    print event.Position
    return True

hm = pyHook.HookManager()
hm.SubscribeMouseAllButtonsDown(onclick)
hm.HookMouse()
pythoncom.PumpMessages()
hm.UnhookMouse()
</snippet></ROW><ROW><id>169406</id><snippet>homework</snippet></ROW><ROW><id>169406</id><snippet>import smtplib
import zipfile
import tempfile
from email import encoders
from email.message import Message
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart    

def send_file_zipped(the_file, recipients, sender='you@you.com'):
    zf = tempfile.TemporaryFile(prefix='mail', suffix='.zip')
    zip = zipfile.ZipFile(zf, 'w')
    zip.write(the_file)
    zip.close()
    zf.seek(0)

    # Create the message
    themsg = MIMEMultipart()
    themsg['Subject'] = 'File %s' % the_file
    themsg['To'] = ', '.join(recipients)
    themsg['From'] = sender
    themsg.preamble = 'I am not using a MIME-aware mail reader.\n'
    msg = MIMEBase('application', 'zip')
    msg.set_payload(zf.read())
    encoders.encode_base64(msg)
    msg.add_header('Content-Disposition', 'attachment', 
                   filename=the_file + '.zip')
    themsg.attach(msg)
    themsg = themsg.as_string()

    # send the message
    smtp = smtplib.SMTP()
    smtp.connect()
    smtp.sendmail(sender, recipients, themsg)
    smtp.close()
</snippet></ROW><ROW><id>169406</id><snippet>send_file_zipped('result.txt', ['me@me.org'])
</snippet></ROW><ROW><id>169779</id><snippet># Find the storage class and call setup (first time only).
storage_class = storage_type.title() + 'Session'
storage_class = globals()[storage_class]
if not hasattr(cherrypy, "session"):
    if hasattr(storage_class, "setup"):
        storage_class.setup(**kwargs)

# Create cherrypy.session which will proxy to cherrypy.serving.session
if not hasattr(cherrypy, "session"):
    cherrypy.session = cherrypy._ThreadLocalProxy('session')
</snippet></ROW><ROW><id>169779</id><snippet>FileSession.setup(**kwargs)
cherrypy.session = cherrypy._ThreadLocalProxy('session')
</snippet></ROW><ROW><id>169913</id><snippet>python setup.py py2exe -p win32com -i twisted.web.resource
</snippet></ROW><ROW><id>170856</id><snippet>using System;
using System.Collections.Generic;
using HtmlAgilityPack;

namespace GovParsingTest
{
    class Program
    {
        static void Main(string[] args)
        {
            HtmlWeb hw = new HtmlWeb();
            string url = @"http://www.house.gov/house/House_Calendar.shtml";
            HtmlDocument doc = hw.Load(url);

            HtmlNode docNode = doc.DocumentNode;
            HtmlNode div = docNode.SelectSingleNode("//div[@id='primary']");
            HtmlNodeCollection tableRows = div.SelectNodes(".//tr");

            foreach (HtmlNode row in tableRows)
            {
                HtmlNodeCollection cells = row.SelectNodes(".//td");
                HtmlNode dateNode = cells[0];
                HtmlNode eventNode = cells[1];

                while (eventNode.HasChildNodes)
                {
                    eventNode = eventNode.FirstChild;
                }

                Console.WriteLine(dateNode.InnerText);
                Console.WriteLine(eventNode.InnerText);
                Console.WriteLine();
            }

            //Console.WriteLine(div.InnerHtml);
            Console.ReadKey();
        }
    }
}
</snippet></ROW><ROW><id>171294</id><snippet>(run/strings (find "." -name *.c -print))</snippet></ROW><ROW><id>171672</id><snippet>&gt;&gt;&gt; a = np.array([[[1,0,1],
...                [0,1,0]],
...               [[1,1,0],
...                [0,0,1]]])
&gt;&gt;&gt; b = np.packbits(a,axis=-1)
&gt;&gt;&gt; b
array([[[160],[64]],[[192],[32]]], dtype=uint8)
</snippet></ROW><ROW><id>171703</id><snippet>save</snippet></ROW><ROW><id>171703</id><snippet>pre_save</snippet></ROW><ROW><id>171703</id><snippet>pre_save</snippet></ROW><ROW><id>171703</id><snippet>pre_delete</snippet></ROW><ROW><id>171703</id><snippet>save</snippet></ROW><ROW><id>171703</id><snippet>delete</snippet></ROW><ROW><id>171780</id><snippet>C:\drm_music</snippet></ROW><ROW><id>171780</id><snippet>import os, shutil

def move_drm_files(music_folder):
    all_songs = []
    good_filetypes = ['mp3', 'm4a', 'ogg', 'flv', 'wma']
    for root, dirs, files in os.walk(music_folder):
        for name in files:
    	    full_name = os.path.join(root, name)
    	    all_songs.append(full_name)
    os.mkdir('/drm_music')
    for song in all_songs:
    	if song[-3:] not in good_filetypes:
    		shutil.move(song, '/drm_music')
</snippet></ROW><ROW><id>171780</id><snippet>python -i move_drm.py</snippet></ROW><ROW><id>171780</id><snippet>move_drm.py</snippet></ROW><ROW><id>171780</id><snippet>move_drm_files('/users/alienfluid/music')</snippet></ROW><ROW><id>171780</id><snippet>def sort_drm(drm_folder, all_songs=[]):
    os.mkdir('/drm_collection')
    known_types = []
    for root, dirs, files in os.walk(drm_folder):
    	for name in files:
    		full_name = os.path.join(root, name)
    		all_songs.append(full_name)
    for item in all_songs:
    	if item[-3:] not in known_types:
    		known_types.append(item[-3:])
    for item in known_types:
    	os.mkdir('/drm_collection/'+item)
    for item in all_songs:
    	shutil.copy2(item, '/drm_collection/'+item[-3:])
</snippet></ROW><ROW><id>171780</id><snippet>C:\drm_collection</snippet></ROW><ROW><id>171780</id><snippet>sort_drm('/drm_music')</snippet></ROW><ROW><id>171784</id><snippet>def divisorGen(n):
    factors = list(factorGenerator(n))
    nfactors = len(factors)
    f = [0] * nfactors
    while True:
        yield reduce(lambda x, y: x*y, [factors[x][0]**f[x] for x in range(nfactors)], 1)
        i = 0
        while True:
            f[i] += 1
            if f[i] &lt;= factors[i][1]:
                break
            f[i] = 0
            i += 1
            if i &gt;= nfactors:
                return
</snippet></ROW><ROW><id>171784</id><snippet>factors = prime1 ^ 0 * prime2 ^ 0 * ... primeN ^ 0;
          prime1 ^ 0 * prime2 ^ 0 * ... primeN ^ 1;
            ...          ...        ...   ...     ;
          prime2 ^ i * prime2 ^ j * ... primeN ^ k;
</snippet></ROW><ROW><id>171784</id><snippet>i</snippet></ROW><ROW><id>171784</id><snippet>j</snippet></ROW><ROW><id>171784</id><snippet>k</snippet></ROW><ROW><id>171784</id><snippet>n = 100</snippet></ROW><ROW><id>171784</id><snippet># Prime factors are 5, and 2 with a multiplicity of 2 for each

5 ^ 0 * 2 ^ 0 = 1
5 ^ 0 * 2 ^ 1 = 2
5 ^ 0 * 2 ^ 2 = 4
5 ^ 1 * 2 ^ 0 = 5
...
5 ^ 2 * 2 ^ 2 = 100
</snippet></ROW><ROW><id>172097</id><snippet>django.contrib.auth.models.User.get_profile</snippet></ROW><ROW><id>172097</id><snippet>AUTH_PROFILE_MODULE</snippet></ROW><ROW><id>172097</id><snippet>ForeignKey</snippet></ROW><ROW><id>172097</id><snippet>User</snippet></ROW><ROW><id>172097</id><snippet>get_profile</snippet></ROW><ROW><id>172097</id><snippet>ForeignKey</snippet></ROW><ROW><id>172097</id><snippet>User</snippet></ROW><ROW><id>172097</id><snippet>ForeignKey</snippet></ROW><ROW><id>172097</id><snippet>User</snippet></ROW><ROW><id>172097</id><snippet>null</snippet></ROW><ROW><id>172097</id><snippet>Photo</snippet></ROW><ROW><id>172097</id><snippet>User</snippet></ROW><ROW><id>172468</id><snippet>inputString.split('\n')  # --&gt; ['Line 1', 'Line 2', 'Line 3']
</snippet></ROW><ROW><id>172468</id><snippet>import string
string.split(inputString, '\n')  # --&gt; ['Line 1', 'Line 2', 'Line 3']
</snippet></ROW><ROW><id>172468</id><snippet>inputString.splitlines(True)  # --&gt; ['Line 1\n', 'Line 2\n', 'Line 3']
</snippet></ROW><ROW><id>173299</id><snippet>for i, tag in enumerate(tag):
    tagDict[tag] = i
</snippet></ROW><ROW><id>173323</id><snippet>  import os
  os._exit(1)
</snippet></ROW><ROW><id>173715</id><snippet>paster create</snippet></ROW><ROW><id>175038</id><snippet>import os
chidren = []
for job in jobs:
    child = os.fork()
    if child:
        children.append(child)
    else:
        pass  # really should exec the job
for child in children:
    os.waitpid(child, 0)
</snippet></ROW><ROW><id>175038</id><snippet>wait</snippet></ROW><ROW><id>175038</id><snippet>waitpid</snippet></ROW><ROW><id>175038</id><snippet>alarm</snippet></ROW><ROW><id>175038</id><snippet>SIGALRM</snippet></ROW><ROW><id>175101</id><snippet>def Comment(text=None):
    element = Element(Comment)
    element.text = text
    return element
</snippet></ROW><ROW><id>175101</id><snippet>_write</snippet></ROW><ROW><id>175101</id><snippet>if tag is Comment:
    file.write("&lt;!-- %s --&gt;" % _escape_cdata(node.text, encoding))
</snippet></ROW><ROW><id>175101</id><snippet>CDATA</snippet></ROW><ROW><id>175101</id><snippet>_write</snippet></ROW><ROW><id>175101</id><snippet>import elementtree.ElementTree as etree
#~ import cElementTree as etree

def CDATA(text=None):
    element = etree.Element(CDATA)
    element.text = text
    return element

class ElementTreeCDATA(etree.ElementTree):
    def _write(self, file, node, encoding, namespaces):
        if node.tag is CDATA:
            text = node.text.encode(encoding)
            file.write("\n&lt;![CDATA[%s]]&gt;\n" % text)
        else:
            etree.ElementTree._write(self, file, node, encoding, namespaces)

if __name__ == "__main__":
    import sys

    text = """
    &lt;?xml version='1.0' encoding='utf-8'?&gt;
    &lt;text&gt;
    This is just some sample text.
    &lt;/text&gt;
    """

    e = etree.Element("data")
    cdata = CDATA(text)
    e.append(cdata)
    et = ElementTreeCDATA(e)
    et.write(sys.stdout, "utf-8")
</snippet></ROW><ROW><id>175270</id><snippet>unicode</snippet></ROW><ROW><id>175270</id><snippet>&lt;a href="http://www.python.org/doc/2.5.2/lib/module-unicodedata.html" rel="nofollow"&gt;unicodedata &lt;/a&gt;</snippet></ROW><ROW><id>175270</id><snippet>&gt;&gt;&gt; title = u"Klüft skräms inför på fédéral électoral große"
</snippet></ROW><ROW><id>175270</id><snippet>Klft skrms infr p fdral lectoral groe
</snippet></ROW><ROW><id>175270</id><snippet>unicodedata</snippet></ROW><ROW><id>175270</id><snippet>&gt;&gt;&gt; import unicodedata
&gt;&gt;&gt; unicodedata.normalize('NFKD', title).encode('ascii','ignore')
'Kluft skrams infor pa federal electoral groe'
</snippet></ROW><ROW><id>176589</id><snippet>array.array</snippet></ROW><ROW><id>176589</id><snippet>sizeof(one object) * length</snippet></ROW><ROW><id>176589</id><snippet>ioctl</snippet></ROW><ROW><id>176589</id><snippet>fctnl</snippet></ROW><ROW><id>176589</id><snippet>array('B', bytes)</snippet></ROW><ROW><id>176589</id><snippet>array.array</snippet></ROW><ROW><id>176921</id><snippet>&gt;&gt;&gt; ["foo","bar","baz"].index('bar')
1
</snippet></ROW><ROW><id>177311</id><snippet>select max(abs(mycol)) from mytbl
</snippet></ROW><ROW><id>177311</id><snippet>select n+abs(mycol)
  from zzz
 where abs(mycol)=(select max(abs(mycol)) from mytbl);
</snippet></ROW><ROW><id>177312</id><snippet>import win32api

win32api.MessageBox(0, 'hello', 'title')
</snippet></ROW><ROW><id>177312</id><snippet>win32api.MessageBox(0, 'hello', 'title', 0x00001000) 
</snippet></ROW><ROW><id>177411</id><snippet>s</snippet></ROW><ROW><id>177411</id><snippet>socket.socket()</snippet></ROW><ROW><id>177411</id><snippet>.connect</snippet></ROW><ROW><id>177411</id><snippet>import socket
s = socket.socket()
address = '127.0.0.1'
port = 80 # port number is a number, not string
try:
    s.connect((address, port)) 
except Exception, e:
    alert('something\'s wrong with %s:%d. Exception type is %s' % (address, port, `e`))
</snippet></ROW><ROW><id>177411</id><snippet>except</snippet></ROW><ROW><id>177939</id><snippet>my_project</snippet></ROW><ROW><id>178213</id><snippet>shows = [
  {"id": 1, "name": "Sesaeme Street"},
  {"id": 2, "name": "Dora The Explorer"},
]
</snippet></ROW><ROW><id>179531</id><snippet>__import__</snippet></ROW><ROW><id>179531</id><snippet>class ImportWrapper(object):
    def __init__(self, real_import):
        self.real_import = real_import

    def wrapper(self, wantedModules):
        def inner(moduleName, *args, **kwargs):
            if moduleName in wantedModules:
                print "IMPORTING MODULE", moduleName
                self.real_import(*args, **kwargs)
            else:
                print "NOT IMPORTING MODULE", moduleName
        return inner

    def mock_import(self, moduleName, wantedModules):
        __builtins__.__import__ = self.wrapper(wantedModules)
        try:
            __import__(moduleName, globals(), locals(), [], -1)
        finally:
            __builtins__.__import__ = self.real_import
</snippet></ROW><ROW><id>179531</id><snippet>import myModule</snippet></ROW><ROW><id>179531</id><snippet>wrapper = ImportWrapper(__import__)
wrapper.mock_import('myModule', [])
</snippet></ROW><ROW><id>179531</id><snippet>mock_import</snippet></ROW><ROW><id>179608</id><snippet>import sys
sys.exit()
</snippet></ROW><ROW><id>179608</id><snippet>import sys
sys.exit(0)
</snippet></ROW><ROW><id>179608</id><snippet>import sys
sys.exit("aa! errors!")
</snippet></ROW><ROW><id>180009</id><snippet>class class1:
  def greet(self):
    print "hi"

class class2:
  def greet(self):
    print "hello"

maker = class1
obj1 = maker()

maker = class2
obj2 = maker()

obj1.greet() # prints "hi"
obj2.greet() # prints "hello"
</snippet></ROW><ROW><id>180152</id><snippet>try:
    # do something
except socket.error, e:
    # A socket error
except IOError, e:
    if e.errno == errno.EPIPE:
        # EPIPE error
    else:
        # Other error
</snippet></ROW><ROW><id>180615</id><snippet>&gt;&gt;&gt; L = [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100]
&gt;&gt;&gt; ''.join(chr(i) for i in L)
'hello, world'
</snippet></ROW><ROW><id>180816</id><snippet>save_as = True
</snippet></ROW><ROW><id>180993</id><snippet>re.match</snippet></ROW><ROW><id>180993</id><snippet>^</snippet></ROW><ROW><id>180993</id><snippet>MatchObject</snippet></ROW><ROW><id>180993</id><snippet>None</snippet></ROW><ROW><id>180993</id><snippet>search()</snippet></ROW><ROW><id>180993</id><snippet>re.search</snippet></ROW><ROW><id>180993</id><snippet>MatchObject</snippet></ROW><ROW><id>180993</id><snippet>None</snippet></ROW><ROW><id>180993</id><snippet>match</snippet></ROW><ROW><id>180993</id><snippet>search</snippet></ROW><ROW><id>180993</id><snippet>match</snippet></ROW><ROW><id>180993</id><snippet>search</snippet></ROW><ROW><id>180993</id><snippet>match</snippet></ROW><ROW><id>180993</id><snippet>search</snippet></ROW><ROW><id>180993</id><snippet>match</snippet></ROW><ROW><id>180993</id><snippet>search</snippet></ROW><ROW><id>180993</id><snippet>'^'</snippet></ROW><ROW><id>180993</id><snippet>'^'</snippet></ROW><ROW><id>180993</id><snippet>MULTILINE</snippet></ROW><ROW><id>180993</id><snippet>match</snippet></ROW><ROW><id>180993</id><snippet>pos</snippet></ROW><ROW><id>180993</id><snippet># example code:
string_with_newlines = """something
someotherthing"""

import re

print re.match('some', string_with_newlines) # matches
print re.match('someother', 
               string_with_newlines) # won't match
print re.match('^someother', string_with_newlines, 
               re.MULTILINE) # also won't match
print re.search('someother', 
                string_with_newlines) # finds something
print re.search('^someother', string_with_newlines, 
                re.MULTILINE) # also finds something

m = re.compile('thing$', re.MULTILINE)

print m.match(string_with_newlines) # no match
print m.match(string_with_newlines, pos=4) # matches
print m.search(string_with_newlines, 
               re.MULTILINE) # also matches
</snippet></ROW><ROW><id>181557</id><snippet>if (cond1 == 'val1' and cond2 == 'val2' and 
       cond3 == 'val3' and cond4 == 'val4'):
    do_something
</snippet></ROW><ROW><id>181557</id><snippet>if (   
       cond1 == 'val1' and cond2 == 'val2' and 
       cond3 == 'val3' and cond4 == 'val4'
   ):
    do_something
if    (cond1 == 'val1' and cond2 == 'val2' and 
       cond3 == 'val3' and cond4 == 'val4'):
    do_something
</snippet></ROW><ROW><id>181557</id><snippet>if cond1 == 'val1' and cond2 == 'val2' and \
   cond3 == 'val3' and cond4 == 'val4':
    do_something
</snippet></ROW><ROW><id>181557</id><snippet>if cond1 == 'val1' and cond2 == 'val2' and \
                       cond3 == 'val3' and \
                       cond4 == 'val4':
    do_something
</snippet></ROW><ROW><id>181557</id><snippet>if cond1 == 'val1' and \
   cond2 == 'val2' and \
   cond3 == 'val3' and \
   cond4 == 'val4':
    do_something
</snippet></ROW><ROW><id>181583</id><snippet>msvcr71.dll</snippet></ROW><ROW><id>181583</id><snippet>py2exe</snippet></ROW><ROW><id>181626</id><snippet>Notebook</snippet></ROW><ROW><id>181626</id><snippet>class Notebook(wx.Frame):
    def __init__(self, parent, id, title):
        wx.Frame.__init__(self, parent, id, title, size=(600, 600))
        menubar = wx.MenuBar()
        file = wx.Menu()
        file.Append(101, 'Quit', '' )
        menubar.Append(file, "&amp;File")
        self.SetMenuBar(menubar)
        wx.EVT_MENU(self, 101, self.OnQuit)
        nb = wx.Notebook(self, -1, style=wx.NB_BOTTOM)
        self.sheet1 = MySheet(nb)
        self.sheet2 = MySheet(nb)
        self.sheet3 = MySheet(nb)
        nb.AddPage(self.sheet1, "Sheet1")
        nb.AddPage(self.sheet2, "Sheet2")
        nb.AddPage(self.sheet3, "Sheet3")
        self.sheet1.SetFocus()
        self.StatusBar()
        # new code begins here:
        # add your text ctrl:
        self.text = wx.TextCtrl(self, -1, style = wx.TE_MULTILINE)
        # create a new sizer for both controls:
        sizer = wx.BoxSizer(wx.VERTICAL)
        # add notebook first, with size factor 2:
        sizer.Add(nb, 2)
        # then text, size factor 1, maximized
        sizer.Add(self.text, 1, wx.EXPAND)
        # assign the sizer to Frame:
        self.SetSizerAndFit(sizer)
</snippet></ROW><ROW><id>181626</id><snippet>__init__</snippet></ROW><ROW><id>181626</id><snippet>Add</snippet></ROW><ROW><id>181706</id><snippet>reduce</snippet></ROW><ROW><id>181706</id><snippet>total = reduce(lambda a, b: (0, a[1] + b[1]), items)[1]
</snippet></ROW><ROW><id>181706</id><snippet>def combine (a, b):
    return 0, a[1] + b[1]

total = reduce(combine, items)[1]
</snippet></ROW><ROW><id>181706</id><snippet>total = 0
for a, b in items:
    total += b
</snippet></ROW><ROW><id>181706</id><snippet>total = sum(b for a,b in items)
</snippet></ROW><ROW><id>182099</id><snippet>c="8eirwN1kTwCzgWA2HxTaRQ==".decode('base64')
</snippet></ROW><ROW><id>182345</id><snippet>import os
os.environ["DJANGO_SETTINGS_MODULE"] = "mysite.settings"

from mysite.polls.models import Poll, Choice
</snippet></ROW><ROW><id>182417</id><snippet>&gt;&gt;&gt; import ntpath
&gt;&gt;&gt; filepath = r"c:\ttemp\FILEPA~1.EXE"
&gt;&gt;&gt; print ntpath.basename(filepath)
FILEPA~1.EXE
&gt;&gt;&gt; print ntpath.splitdrive(filepath)
('c:', '\\ttemp\\FILEPA~1.EXE')
</snippet></ROW><ROW><id>183582</id><snippet>def unique_file(file_name):
    counter = 1
    file_name_parts = os.path.splitext(file_name) # returns ('/path/file', '.ext')
    while 1:
        try:
            fd = os.open(file_name, os.O_CREAT | os.O_EXCL | os.O_RDRW)
            return os.fdopen(fd), file_name
        except OSError:
            pass
        file_name = file_name_parts[0] + '_' + str(counter) + file_name_parts[1]
        counter += 1
</snippet></ROW><ROW><id>183582</id><snippet>def unique_file(file_name):
    dirname, filename = os.path.split(file_name)
    prefix, suffix = os.path.splitext(filename)

    fd, filename = tempfile.mkstemp(suffix, prefix+"_", dirname)
    return os.fdopen(fd), filename

&gt;&gt;&gt; f, filename=unique_file('/home/some_dir/foo.txt')
&gt;&gt;&gt; print filename
/home/some_dir/foo_z8f_2Z.txt
</snippet></ROW><ROW><id>183870</id><snippet>5 / 2</snippet></ROW><ROW><id>183870</id><snippet>2.5</snippet></ROW><ROW><id>183870</id><snippet>5 // 2</snippet></ROW><ROW><id>183870</id><snippet>2</snippet></ROW><ROW><id>183870</id><snippet>from __future__ import division</snippet></ROW><ROW><id>183870</id><snippet>5.0 // 2</snippet></ROW><ROW><id>183870</id><snippet>2.0</snippet></ROW><ROW><id>184344</id><snippet>PythonWin 2.5.1 (r251:54863, May  1 2007, 17:47:05) [MSC v.1310 32 bit (Intel)] on win32.
Portions Copyright 1994-2006 Mark Hammond - see 'Help/About PythonWin' for further copyright information.
&gt;&gt;&gt; import P4
&gt;&gt;&gt; p4 = P4.P4()
&gt;&gt;&gt; p4.connect() # connect to the default server, with the default clientspec
&gt;&gt;&gt; desc = {"Description": "My new changelist description",
...         "Change": "new"
...         }
&gt;&gt;&gt; p4.input = desc
&gt;&gt;&gt; p4.run("changelist", "-i")
['Change 2579505 created.']
&gt;&gt;&gt;
</snippet></ROW><ROW><id>184344</id><snippet>P:\&gt;p4 changelist -o 2579505
# A Perforce Change Specification.
#
#  Change:      The change number. 'new' on a new changelist.
#  Date:        The date this specification was last modified.
#  Client:      The client on which the changelist was created.  Read-only.
#  User:        The user who created the changelist.
#  Status:      Either 'pending' or 'submitted'. Read-only.
#  Description: Comments about the changelist.  Required.
#  Jobs:        What opened jobs are to be closed by this changelist.
#               You may delete jobs from this list.  (New changelists only.)
#  Files:       What opened files from the default changelist are to be added
#               to this changelist.  You may delete files from this list.
#               (New changelists only.)

Change: 2579505

Date:   2008/10/08 13:57:02

Client: MYCOMPUTER-DT

User:   myusername

Status: pending

Description:
        My new changelist description
</snippet></ROW><ROW><id>184660</id><snippet>lst2=lst1[:]
</snippet></ROW><ROW><id>184660</id><snippet>import copy
lst2=copy.deepcopy(lst1)
</snippet></ROW><ROW><id>185397</id><snippet>re.match(r'Run.*\.py$')
</snippet></ROW><ROW><id>185397</id><snippet>filename.startswith("Run") and filename.endswith(".py")
</snippet></ROW><ROW><id>185678</id><snippet>bsddb.dbtables.bsdTableDB([dbname],[folder], create=1)
</snippet></ROW><ROW><id>185941</id><snippet>import os 
folder = '/path/to/folder'
for the_file in os.listdir(folder):
    file_path = os.path.join(folder, the_file)
    try:
        if os.path.isfile(file_path):
            os.unlink(file_path)
    except Exception, e:
        print e
</snippet></ROW><ROW><id>186295</id><snippet>def unique_mapping(mappings):
    return dict((m['id'], m) for m in mappings).values()
</snippet></ROW><ROW><id>186295</id><snippet>def unique_mapping(mappings):
    addedIds = set()
    for m in mappings:
        mId = m['id']
        if mId not in addedIds:
            addedIds.add(mId)
            yield m
</snippet></ROW><ROW><id>186295</id><snippet>list(unique_mappings(mappings))</snippet></ROW><ROW><id>186464</id><snippet>portalocker.lock(file, flags)
</snippet></ROW><ROW><id>186813</id><snippet>import x,y,z</snippet></ROW><ROW><id>186813</id><snippet>remove</snippet></ROW><ROW><id>186813</id><snippet>os.remove</snippet></ROW><ROW><id>186813</id><snippet> from os import open
</snippet></ROW><ROW><id>186813</id><snippet>import module [as renamed_module]</snippet></ROW><ROW><id>186813</id><snippet>import config
config.dburl = 'sqlite:///test.db'
</snippet></ROW><ROW><id>186813</id><snippet>import module</snippet></ROW><ROW><id>186873</id><snippet>s= "Name1=Value1;Name2=Value2;Name3=Value3"
dict(item.split("=") for item in s.split(";"))
</snippet></ROW><ROW><id>186873</id><snippet>&gt;&gt;&gt; s = "Name1='Value=2';Name2=Value2;Name3=Value3"

&gt;&gt;&gt; dict(csv.reader([item], delimiter='=', quotechar="'").next() 
         for item in csv.reader([s], delimiter=';', quotechar="'").next())

{'Name2': 'Value2', 'Name3': 'Value3', 'Name1': 'Value1=2'}
</snippet></ROW><ROW><id>187463</id><snippet>len(myArray)
</snippet></ROW><ROW><id>187536</id><snippet>def _bin(x, width):
    return ''.join(str((x&gt;&gt;i)&amp;1) for i in xrange(width-1,-1,-1))
</snippet></ROW><ROW><id>187536</id><snippet>_conv_table = [_bin(x,8) for x in range(256)]
</snippet></ROW><ROW><id>187536</id><snippet>def bin(x):
    if x == 0: 
        return '0' #Special case: Don't strip leading zero if no other digits
    elif x &lt; 0:
        sign='-'
        x*=-1
    else:
        sign = ''
    l=[]
    while x:
        l.append(_conv_table[x &amp; 0xff])
        x &gt;&gt;= 8
    return sign + ''.join(reversed(l)).lstrip("0")
</snippet></ROW><ROW><id>187536</id><snippet>Num Bits:              8       16       32       64      128      256
---------------------------------------------------------------------
bin                0.544    0.586    0.744    1.942    1.854    3.357 
bin16              0.542    0.494    0.592    0.773    1.150    1.886
constantin_bin     2.238    3.803    7.794   17.869   34.636   94.799
num_bin            3.712    5.693   12.086   32.566   67.523  128.565
Python3's bin      0.079    0.045    0.062    0.069    0.212    0.201
</snippet></ROW><ROW><id>187563</id><snippet>target</snippet></ROW><ROW><id>187563</id><snippet>target = open(target_path, "wb")
</snippet></ROW><ROW><id>187628</id><snippet>[sections]</snippet></ROW><ROW><id>187628</id><snippet>key : value</snippet></ROW><ROW><id>187628</id><snippet>key = value</snippet></ROW><ROW><id>187628</id><snippet>file .* does not exist : file not found
user .* not found : authorization error
</snippet></ROW><ROW><id>187628</id><snippet>{ file .* does not exist: file not found,
  user .* not found: authorization error }
</snippet></ROW><ROW><id>187628</id><snippet>import yaml

errors = yaml.load(open('my.yaml'))
</snippet></ROW><ROW><id>187628</id><snippet>errors</snippet></ROW><ROW><id>187628</id><snippet>-
  - file .* does not exist 
  - file not found
-
  - user .* not found
  - authorization error
</snippet></ROW><ROW><id>187628</id><snippet>[ [file .* does not exist, file not found],
  [user .* not found, authorization error]]
</snippet></ROW><ROW><id>187628</id><snippet>yaml.load</snippet></ROW><ROW><id>187660</id><snippet>readline</snippet></ROW><ROW><id>187660</id><snippet>import readline

def completer(text, state):
    options = [i for i in commands if i.startswith(text)]
    if state &lt; len(options):
        return options[state]
    else:
        return None

readline.parse_and_bind("tab: complete")
readline.set_completer(completer)
</snippet></ROW><ROW><id>188427</id><snippet>import sqlalchemy.types as types

class UUID(types.TypeEngine):
    def get_col_spec(self):
        return "uuid"

    def bind_processor(self, dialect):
        def process(value):
            return value
        return process

    def result_processor(self, dialect):
        def process(value):
            return value
        return process

table = Table('foo', meta,
    Column('id', UUID(), primary_key=True),
)
</snippet></ROW><ROW><id>189165</id><snippet>def grid_objects(alist, blist):
    for i in range(len(alist)):
        for j in range(len(alist[i])):
            yield(alist[i][j], blist[i][j])
</snippet></ROW><ROW><id>189165</id><snippet>for (a, b) in grid_objects(alist, blist):
    if a.is_whatever():
        b.do_something()
</snippet></ROW><ROW><id>189452</id><snippet>ISession.openShell</snippet></ROW><ROW><id>189452</id><snippet>IConchUser</snippet></ROW><ROW><id>189452</id><snippet>ISession</snippet></ROW><ROW><id>189452</id><snippet>openShell</snippet></ROW><ROW><id>189452</id><snippet>ISession.openShell</snippet></ROW><ROW><id>189452</id><snippet>openShell</snippet></ROW><ROW><id>189452</id><snippet>IProcessProtocol</snippet></ROW><ROW><id>189452</id><snippet>makeConnection</snippet></ROW><ROW><id>189452</id><snippet>IProcessTransport</snippet></ROW><ROW><id>189452</id><snippet>IProcessProtocol</snippet></ROW><ROW><id>189452</id><snippet>writeToChild</snippet></ROW><ROW><id>189452</id><snippet>makeConnection</snippet></ROW><ROW><id>189452</id><snippet>childDataReceived</snippet></ROW><ROW><id>189452</id><snippet>IProcessProtocol</snippet></ROW><ROW><id>189452</id><snippet>IProcessProtocol</snippet></ROW><ROW><id>189580</id><snippet>import urllib, urllib2, cookielib

username = 'myuser'
password = 'mypassword'

cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
login_data = urllib.urlencode({'username' : username, 'j_password' : password})
opener.open('http://www.example.com/login.php', login_data)
resp = opener.open('http://www.example.com/hiddenpage.php')
print resp.read()
</snippet></ROW><ROW><id>189580</id><snippet>resp.read()</snippet></ROW><ROW><id>189580</id><snippet>opener</snippet></ROW><ROW><id>189685</id><snippet>return</snippet></ROW><ROW><id>189935</id><snippet>- url: /.*
  script: main.py
</snippet></ROW><ROW><id>189935</id><snippet>from google.appengine.ext import webapp
from google.appengine.ext.webapp.util import run_wsgi_app

class NotFoundPageHandler(webapp.RequestHandler):
    def get(self):
        self.error(404)
        self.response.out.write('&lt;Your 404 error html page&gt;')

application = webapp.WSGIApplication([('/.*', NotFoundPageHandler)],
                                     debug=True)

def main():
    run_wsgi_app(application)

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>189935</id><snippet>&lt;Your 404 error html page&gt;</snippet></ROW><ROW><id>190975</id><snippet>x.pattern
</snippet></ROW><ROW><id>191029</id><snippet>getattr</snippet></ROW><ROW><id>191029</id><snippet>__getattr__</snippet></ROW><ROW><id>191029</id><snippet>dir</snippet></ROW><ROW><id>191029</id><snippet>__dict__</snippet></ROW><ROW><id>191029</id><snippet>__getattr__</snippet></ROW><ROW><id>191029</id><snippet>inspect</snippet></ROW><ROW><id>191403</id><snippet>import codecs
BLOCKSIZE = 1048576 # or some other, desired size in bytes
with codecs.open(sourceFileName, "r", "your-source-encoding") as sourceFile:
    with codecs.open(targetFileName, "w", "utf-8") as targetFile:
        while True:
            contents = sourceFile.read(BLOCKSIZE)
            if not contents:
                break
            targetFile.write(contents)
</snippet></ROW><ROW><id>191403</id><snippet>BLOCKSIZE</snippet></ROW><ROW><id>191617</id><snippet>json</snippet></ROW><ROW><id>191899</id><snippet>#!/usr/bin/env python
import datetime

# http://www.feedparser.org/
import feedparser
# http://www.dalkescientific.com/Python/PyRSS2Gen.html
import PyRSS2Gen

# Get the data
parsed_feed = feedparser.parse('http://reddit.com/.rss')

# Modify the parsed_feed data here

items = [
    PyRSS2Gen.RSSItem(
        title = x.title,
        link = x.link,
        description = x.summary,
        guid = x.link,
        pubDate = datetime.datetime(
            x.modified_parsed[0],
            x.modified_parsed[1],
            x.modified_parsed[2],
            x.modified_parsed[3],
            x.modified_parsed[4],
            x.modified_parsed[5])
        )

    for x in parsed_feed.entries
]

# make the RSS2 object
# Try to grab the title, link, language etc from the orig feed

rss = PyRSS2Gen.RSS2(
    title = parsed_feed['feed'].get("title"),
    link = parsed_feed['feed'].get("link"),
    description = parsed_feed['feed'].get("description"),

    language = parsed_feed['feed'].get("language"),
    copyright = parsed_feed['feed'].get("copyright"),
    managingEditor = parsed_feed['feed'].get("managingEditor"),
    webMaster = parsed_feed['feed'].get("webMaster"),
    pubDate = parsed_feed['feed'].get("pubDate"),
    lastBuildDate = parsed_feed['feed'].get("lastBuildDate"),

    categories = parsed_feed['feed'].get("categories"),
    generator = parsed_feed['feed'].get("generator"),
    docs = parsed_feed['feed'].get("docs"),

    items = items
)


print rss.to_xml()
</snippet></ROW><ROW><id>192365</id><snippet>dir()</snippet></ROW><ROW><id>192365</id><snippet>inspect</snippet></ROW><ROW><id>192365</id><snippet>__builtins__</snippet></ROW><ROW><id>192365</id><snippet>&gt;&gt;&gt; l = dir(__builtins__)
&gt;&gt;&gt; d = __builtins__.__dict__
</snippet></ROW><ROW><id>192365</id><snippet>&gt;&gt;&gt; print l
['ArithmeticError', 'AssertionError', 'AttributeError',...
</snippet></ROW><ROW><id>192365</id><snippet>&gt;&gt;&gt; from pprint import pprint
&gt;&gt;&gt; pprint(l)
['ArithmeticError',
 'AssertionError',
 'AttributeError',
 'BaseException',
 'DeprecationWarning',
...

&gt;&gt;&gt; pprint(d, indent=2)
{ 'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,
  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,
  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,
...
  '_': [ 'ArithmeticError',
         'AssertionError',
         'AttributeError',
         'BaseException',
         'DeprecationWarning',
...
</snippet></ROW><ROW><id>192525</id><snippet>from django.db.models.signals import post_save

class Activity(models.Model):
    name = models.CharField(max_length=50, help_text='Some help.')
    entity = models.ForeignKey(CancellationEntity)

    @classmethod
    def cancellation_occurred (sender, instance, created, raw):
        # grab the current instance of Activity
        self = instance.activity_set.all()[0]
        # do something
    ...


class Cancellation(models.Model):
    activity = models.ForeignKey(Activity)
    date = models.DateField(default=datetime.now().date())
    description = models.CharField(max_length=250)
    ...

post_save.connect(Activity.cancellation_occurred, sender=Cancellation)</snippet></ROW><ROW><id>192703</id><snippet>class Foo:
  pass # dummy class

Foo.bar = lambda self: 42

x = Foo()
print x.bar()
</snippet></ROW><ROW><id>192703</id><snippet>class Foo:
  pass # dummy class

x = Foo()

Foo.bar = lambda self: 42

print x.bar()
</snippet></ROW><ROW><id>192703</id><snippet>int</snippet></ROW><ROW><id>192703</id><snippet>float</snippet></ROW><ROW><id>193153</id><snippet>logger.warning("something raised an exception: " + excep,exc_info=True)
</snippet></ROW><ROW><id>193181</id><snippet>/scripts</snippet></ROW><ROW><id>193181</id><snippet>/bin</snippet></ROW><ROW><id>193181</id><snippet>/tests</snippet></ROW><ROW><id>193181</id><snippet>/lib</snippet></ROW><ROW><id>193181</id><snippet>/doc</snippet></ROW><ROW><id>193181</id><snippet>/apidoc</snippet></ROW><ROW><id>193181</id><snippet>/src</snippet></ROW><ROW><id>193181</id><snippet>/src</snippet></ROW><ROW><id>193181</id><snippet>/lib</snippet></ROW><ROW><id>193181</id><snippet>/bin</snippet></ROW><ROW><id>193181</id><snippet>/src</snippet></ROW><ROW><id>193181</id><snippet>/foo</snippet></ROW><ROW><id>193181</id><snippet>/bar</snippet></ROW><ROW><id>193181</id><snippet>/baz</snippet></ROW><ROW><id>193181</id><snippet>quux</snippet></ROW><ROW><id>193181</id><snippet>/quux</snippet></ROW><ROW><id>193181</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>193181</id><snippet>/path/to/quux/foo</snippet></ROW><ROW><id>193181</id><snippet>QUUX.foo</snippet></ROW><ROW><id>193181</id><snippet>/quux</snippet></ROW><ROW><id>193931</id><snippet>"""
Registry related functionality.
"""
import wx
# ...
</snippet></ROW><ROW><id>193931</id><snippet>from RegistryController import RegistryController
from ui.windows.lists import ListCtrl, DynamicListCtrl
</snippet></ROW><ROW><id>193931</id><snippet>from main.core import Exceptions
# ...
raise Exceptions.FileNotFound()
</snippet></ROW><ROW><id>193931</id><snippet>import X as Y</snippet></ROW><ROW><id>193931</id><snippet>from Queue import Queue
from main.core.MessageQueue import Queue as MessageQueue
</snippet></ROW><ROW><id>194248</id><snippet>iterparse</snippet></ROW><ROW><id>194248</id><snippet>iterparse</snippet></ROW><ROW><id>194248</id><snippet>&lt;a&gt;This is &lt;b&gt;a&lt;/b&gt; test&lt;/a&gt;
</snippet></ROW><ROW><id>194248</id><snippet> test</snippet></ROW><ROW><id>194248</id><snippet>tail</snippet></ROW><ROW><id>194248</id><snippet>b</snippet></ROW><ROW><id>195144</id><snippet>nose</snippet></ROW><ROW><id>195144</id><snippet>pyUnit</snippet></ROW><ROW><id>195144</id><snippet>py.test</snippet></ROW><ROW><id>195144</id><snippet>doctest</snippet></ROW><ROW><id>195144</id><snippet>py.test</snippet></ROW><ROW><id>195144</id><snippet>doctest</snippet></ROW><ROW><id>195962</id><snippet># Create dict with a million items:
import shelve
d = shelve.open('path/to/my_persistant_dict')
d.update(('key%d' % x, x) for x in xrange(1000000))
d.close()
</snippet></ROW><ROW><id>195962</id><snippet>&gt;&gt;&gt; d = shelve.open('path/to/my_persistant_dict')
&gt;&gt;&gt; print d['key99999']
99999
</snippet></ROW><ROW><id>196392</id><snippet>def is_ascii(s):
    return all(ord(c) &lt; 128 for c in s)
</snippet></ROW><ROW><id>196851</id><snippet>&gt;&gt;&gt; from urllib import urlencode
&gt;&gt;&gt; params = urlencode({'q': 'python best practices', 'sort': 'relevance'})
&gt;&gt;&gt; params
'q=python+best+practices&amp;sort=relevance'
&gt;&gt;&gt; from urllib2 import urlopen
&gt;&gt;&gt; html = urlopen("http://stackoverflow.com/search?%s" % params).read()
&gt;&gt;&gt; import re
&gt;&gt;&gt; links = re.findall(r'&lt;h3&gt;&lt;a href="([^"]*)" class="answer-title"&gt;([^&lt;]*)&lt;/a&gt;&lt;/h3&gt;', html)
&gt;&gt;&gt; links
[('/questions/5119/what-are-the-best-rss-feeds-for-programmersdevelopers#5150', 'What are the best RSS feeds for programmers/developers?'), ('/questions/3088/best-ways-to-teach-a-beginner-to-program#13185', 'Best ways to teach a beginner to program?'), ('/questions/13678/textual-versus-graphical-programming-languages#13886', 'Textual versus Graphical Programming Languages'), ('/questions/58968/what-defines-pythonian-or-pythonic#59877', 'What defines “pythonian” or “pythonic”?'), ('/questions/592/cxoracle-how-do-i-access-oracle-from-python#62392', 'cx_Oracle - How do I access Oracle from Python? '), ('/questions/7170/recommendation-for-straight-forward-python-frameworks#83608', 'Recommendation for straight-forward python frameworks'), ('/questions/100732/why-is-if-not-someobj-better-than-if-someobj-none-in-python#100903', 'Why is if not someobj: better than if someobj == None: in Python?'), ('/questions/132734/presentations-on-switching-from-perl-to-python#134006', 'Presentations on switching from Perl to Python'), ('/questions/136977/after-c-python-or-java#138442', 'After C++ - Python or Java?')]
&gt;&gt;&gt; from urlparse import urljoin
&gt;&gt;&gt; links = [(urljoin('http://stackoverflow.com/', url), title) for url,title in links]
&gt;&gt;&gt; links
[('http://stackoverflow.com/questions/5119/what-are-the-best-rss-feeds-for-programmersdevelopers#5150', 'What are the best RSS feeds for programmers/developers?'), ('http://stackoverflow.com/questions/3088/best-ways-to-teach-a-beginner-to-program#13185', 'Best ways to teach a beginner to program?'), ('http://stackoverflow.com/questions/13678/textual-versus-graphical-programming-languages#13886', 'Textual versus Graphical Programming Languages'), ('http://stackoverflow.com/questions/58968/what-defines-pythonian-or-pythonic#59877', 'What defines “pythonian” or “pythonic”?'), ('http://stackoverflow.com/questions/592/cxoracle-how-do-i-access-oracle-from-python#62392', 'cx_Oracle - How do I access Oracle from Python? '), ('http://stackoverflow.com/questions/7170/recommendation-for-straight-forward-python-frameworks#83608', 'Recommendation for straight-forward python frameworks'), ('http://stackoverflow.com/questions/100732/why-is-if-not-someobj-better-than-if-someobj-none-in-python#100903', 'Why is if not someobj: better than if someobj == None: in Python?'), ('http://stackoverflow.com/questions/132734/presentations-on-switching-from-perl-to-python#134006', 'Presentations on switching from Perl to Python'), ('http://stackoverflow.com/questions/136977/after-c-python-or-java#138442', 'After C++ - Python or Java?')]
</snippet></ROW><ROW><id>196851</id><snippet>def get_stackoverflow(query):
    import urllib, urllib2, re, urlparse
    params = urllib.urlencode({'q': query, 'sort': 'relevance'})
    html = urllib2.urlopen("http://stackoverflow.com/search?%s" % params).read()
    links = re.findall(r'&lt;h3&gt;&lt;a href="([^"]*)" class="answer-title"&gt;([^&lt;]*)&lt;/a&gt;&lt;/h3&gt;', html)
    links = [(urlparse.urljoin('http://stackoverflow.com/', url), title) for url,title in links]

    return links
</snippet></ROW><ROW><id>196881</id><snippet>class Enumerate(object):
  def __init__(self, names):
    for number, name in enumerate(names.split()):
      setattr(self, name, number)
</snippet></ROW><ROW><id>196881</id><snippet> codes = Enumerate('FOO BAR BAZ')
</snippet></ROW><ROW><id>196881</id><snippet>codes.BAZ</snippet></ROW><ROW><id>196881</id><snippet> from __future__ import generators

 def enumerate(iterable):
   number = 0
   for name in iterable:
     yield number, name
     number += 1
</snippet></ROW><ROW><id>197053</id><snippet>&gt;&gt;&gt; import inspect
&gt;&gt;&gt; def func(a,b,c=42, *args, **kwargs): pass
&gt;&gt;&gt; inspect.getargspec(func)
(['a', 'b', 'c'], 'args', 'kwargs', (42,))
</snippet></ROW><ROW><id>197053</id><snippet>def getRequiredArgs(func):
    args, varargs, varkw, defaults = inspect.getargspec(func)
    if defaults:
        args = args[:-len(defaults)]
    return args   # *args and **kwargs are not required, so ignore them.
</snippet></ROW><ROW><id>197053</id><snippet>def missingArgs(func, argdict):
    return set(getRequiredArgs(func)).difference(argdict)
</snippet></ROW><ROW><id>197053</id><snippet>def invalidArgs(func, argdict):
    args, varargs, varkw, defaults = inspect.getargspec(func)
    if varkw: return set()  # All accepted
    return set(argdict) - set(args)
</snippet></ROW><ROW><id>197053</id><snippet>def isCallableWithArgs(func, argdict):
    return not missingArgs(func, argdict) and not invalidArgs(func, argdict)
</snippet></ROW><ROW><id>197499</id><snippet># module.py:
"""About the module.

module.data: contains the word "spam"

"""

data = "spam"
</snippet></ROW><ROW><id>197846</id><snippet>latin1 = "latin-1"
japanese = "Shift-JIS"

control_l = "\x0c"
control_j = "\n"

encodingMap = {
    control_l: latin1,
    control_j: japanese}

def funkyDecode(s, initialCodec=latin1):
    output = u""
    accum = ""
    currentCodec = initialCodec
    for ch in s:
        if ch in encodingMap:
            output += accum.decode(currentCodec)
            currentCodec = encodingMap[ch]
            accum = ""
        else:
            accum += ch
    output += accum.decode(currentCodec)
    return output
</snippet></ROW><ROW><id>198553</id><snippet>csv.writer</snippet></ROW><ROW><id>198553</id><snippet>w = csv.writer(fileobj, dialect, ...)
</snippet></ROW><ROW><id>198795</id><snippet> class Template

  def %(h)
    "Hi!  I'm #{h[:name]}s, and I'm #{h[:age]}d years old."


  end
end
</snippet></ROW><ROW><id>198795</id><snippet>t=Template.new
t%({:name =&gt; "Peter", :age =&gt; 18})
</snippet></ROW><ROW><id>199075</id><snippet>&gt;&gt;&gt; re.sub(r"(\w)([A-Z])", r"\1 \2", "WordWordWord")
'Word Word Word'
</snippet></ROW><ROW><id>199791</id><snippet>svn</snippet></ROW><ROW><id>199791</id><snippet>svn</snippet></ROW><ROW><id>199791</id><snippet>svn</snippet></ROW><ROW><id>199791</id><snippet>import os, errno

# ...

try:
  os.mkdir(dirName)
except OSError, e:
  if e.errno != errno.EEXIST: raise # some other error
  print 'Directory already exists.'
else:
  print 'Successfully created new directory.'
</snippet></ROW><ROW><id>200027</id><snippet>&gt;&gt;&gt; 5+5
10
&gt;&gt;&gt; _
10
&gt;&gt;&gt; _ + 5
15
&gt;&gt;&gt; _
15
</snippet></ROW><ROW><id>200148</id><snippet>&gt;&gt;&gt; import platform
&gt;&gt;&gt; platform.win32_ver()
('XP', '5.1.2600', 'SP2', 'Multiprocessor Free')
&gt;&gt;&gt; platform.system()
'Windows'
&gt;&gt;&gt; platform.version()
'5.1.2600'
&gt;&gt;&gt; platform.release()
'XP'
</snippet></ROW><ROW><id>200315</id><snippet>repr()</snippet></ROW><ROW><id>200315</id><snippet>&lt;?php

function py_escape($input) {
    $descriptorspec = array(
        0 =&gt; array("pipe", "r"),
        1 =&gt; array("pipe", "w")
        );
    $process = proc_open(
        "python -c 'import sys; sys.stdout.write(repr(sys.stdin.read()))'",
        $descriptorspec, $pipes);
    fwrite($pipes[0], $input);
    fclose($pipes[0]);
    $chunk_size = 8192;
    $escaped = fread($pipes[1], $chunk_size);
    if (strlen($escaped) == $chunk_size) {
        // This is important for security.
        die("That string's too big.\n");
    }
    proc_close($process);
    return $escaped;
}

// Example usage:
$x = "string \rfull \nof\t crappy stuff";
print py_escape($x);
</snippet></ROW><ROW><id>200315</id><snippet>chunk_size</snippet></ROW><ROW><id>200315</id><snippet>("hello " + ("." * chunk_size))</snippet></ROW><ROW><id>200315</id><snippet>'; os.system("do bad stuff")</snippet></ROW><ROW><id>200315</id><snippet>system()</snippet></ROW><ROW><id>200315</id><snippet>os.system(map(chr, ...))</snippet></ROW><ROW><id>201325</id><snippet>binascii</snippet></ROW><ROW><id>201325</id><snippet>&gt;&gt;&gt; import binascii
&gt;&gt;&gt; print binascii.hexlify("ABCZ")
'4142435a'
</snippet></ROW><ROW><id>201325</id><snippet>hashlib.md5</snippet></ROW><ROW><id>201325</id><snippet>hexdigest()</snippet></ROW><ROW><id>201420</id><snippet>myvar = 'test'

def myfunction(foo='test'):
    pass

class MyClass(object):
    pass
</snippet></ROW><ROW><id>201737</id><snippet>proxy_support = urllib2.ProxyHandler({})
opener = urllib2.build_opener(proxy_support)
print opener.open("http://127.0.0.1").read()

# Optional - makes this opener default for urlopen etc.
urllib2.install_opener(opener)
print urllib2.urlopen("http://127.0.0.1").read()
</snippet></ROW><ROW><id>201771</id><snippet>def r(a):
  i = a.find('0')
  ~i or exit(a)
  [m in[(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3)or a[j]for j in range(81)] or r(a[:i]+m+a[i+1:])for m in'%d'%5**18]
from sys import *
r(argv[1])
</snippet></ROW><ROW><id>201771</id><snippet>from sys import exit, argv
def r(a):
  i = a.find('0')
  if i == -1:
    exit(a)
  for m in '%d' % 5**18:
    m in[(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3) or a[j] for j in range(81)] or r(a[:i]+m+a[i+1:])

r(argv[1])
</snippet></ROW><ROW><id>201771</id><snippet>for m in'%d'%5**18</snippet></ROW><ROW><id>201771</id><snippet>'%d'%5**18</snippet></ROW><ROW><id>201771</id><snippet>'3814697265625'</snippet></ROW><ROW><id>201771</id><snippet>r(a[:i]+m+a[i+1:])</snippet></ROW><ROW><id>201771</id><snippet>m in [(i-j)%9*(i/9^j/9)*(i/27^j/27|i%9/3^j%9/3) or a[j] for j in range(81)]</snippet></ROW><ROW><id>201771</id><snippet>(i-j)%9</snippet></ROW><ROW><id>201771</id><snippet>(i/9^j/9)</snippet></ROW><ROW><id>201771</id><snippet>(i/27^j/27|i%9/3^j%9/3)</snippet></ROW><ROW><id>201771</id><snippet>i/27^j^27</snippet></ROW><ROW><id>201771</id><snippet>i%9/3^j%9/3</snippet></ROW><ROW><id>201771</id><snippet>from sys import exit, argv
def r(a):
  i = a.find('0')
  if i == -1:
    exit(a)
  for m in '3814697265625':
    okay = True
    for j in range(81):
      if (i-j)%9 == 0 or (i/9 == j/9) or (i/27 == j/27 and i%9/3 == j%9/3):
        if a[j] == m:
          okay = False
          break
    if okay:
      # At this point, m is not excluded by any row, column, or block, so let's place it and recurse
      r(a[:i]+m+a[i+1:])

r(argv[1])
</snippet></ROW><ROW><id>201771</id><snippet>$ time python sudoku.py 530070000600195000098000060800060003400803001700020006060000280000419005000080079
534678912672195348198342567859761423426853791713924856961537284287419635345286179

real    0m47.881s
user    0m47.223s
sys 0m0.137s
</snippet></ROW><ROW><id>201771</id><snippet>import sys

def same_row(i,j): return (i/9 == j/9)
def same_col(i,j): return (i-j) % 9 == 0
def same_block(i,j): return (i/27 == j/27 and i%9/3 == j%9/3)

def r(a):
  i = a.find('0')
  if i == -1:
    sys.exit(a)

  excluded_numbers = set()
  for j in range(81):
    if same_row(i,j) or same_col(i,j) or same_block(i,j):
      excluded_numbers.add(a[j])

  for m in '123456789':
    if m not in excluded_numbers:
      # At this point, m is not excluded by any row, column, or block, so let's place it and recurse
      r(a[:i]+m+a[i+1:])

if __name__ == '__main__':
  if len(sys.argv) == 2 and len(sys.argv[1]) == 81:
    r(sys.argv[1])
  else:
    print 'Usage: python sudoku.py puzzle'
    print '  where puzzle is an 81 character string representing the puzzle read left-to-right, top-to-bottom, and 0 is a blank'
</snippet></ROW><ROW><id>201891</id><snippet>~# cat getopt.py
print "HI"
~# python
Python 2.5.2 (r252:60911, Jul 31 2008, 17:28:52)
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; import getopt
HI

~# python
Python 2.5.2 (r252:60911, Jul 31 2008, 17:28:52)
[GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import sys
&gt;&gt;&gt; sys.path.remove('')
&gt;&gt;&gt; import getopt
&gt;&gt;&gt; dir(getopt)
['GetoptError', '__all__', '__builtins__', '__doc__', '__file__', '__name__', 'do_longs', 'do_shorts', 'error', 'getopt', 'gnu_getopt', 'long_has_args', 'os', 'short_has_arg']
</snippet></ROW><ROW><id>201891</id><snippet>import sys
sys.path.remove('')
from getopt import getopt
sys.path.insert(0,'')
opts, args = getopt(sys.argv[1:], "h:s")
for key,value in opts:
    print key, "=&gt;", value
</snippet></ROW><ROW><id>204049</id><snippet>subprocess.call</snippet></ROW><ROW><id>204049</id><snippet>import subprocess
subprocess.call(['C:\\Temp\\a b c\\Notepad.exe', 'C:\\test.txt'])
</snippet></ROW><ROW><id>204460</id><snippet>repr()</snippet></ROW><ROW><id>204523</id><snippet>try</snippet></ROW><ROW><id>204523</id><snippet>raise</snippet></ROW><ROW><id>204981</id><snippet>import re

r = re.compile("[ab]")
text = "abcdedfe falijbijie bbbb laifsjelifjl"

matches = []
replaced = []
pos = 0
for m in r.finditer(text):
    matches.append(m.group(0))
    replaced.append(text[pos:m.start()])
    pos = m.end()
replaced.append(text[pos:])

print matches
print ''.join(replaced)
</snippet></ROW><ROW><id>204981</id><snippet>['a', 'b', 'a', 'b', 'b', 'b', 'b', 'b', 'a']
cdedfe flijijie  lifsjelifjl
</snippet></ROW><ROW><id>206765</id><snippet>somedata</snippet></ROW><ROW><id>206765</id><snippet>somedata = {}
somedata['was_false_in_base'] = False
</snippet></ROW><ROW><id>206765</id><snippet>class</snippet></ROW><ROW><id>206765</id><snippet> import sys
 class Test(object):
     if sys.platform == "linux2":
         def hello(self):
              print "Hello Linux"
     else:
         def hello(self):
              print "Hello ~Linux"
</snippet></ROW><ROW><id>206765</id><snippet>Test().hello()</snippet></ROW><ROW><id>206765</id><snippet>Hello Linux</snippet></ROW><ROW><id>206765</id><snippet>__init__</snippet></ROW><ROW><id>206765</id><snippet>self</snippet></ROW><ROW><id>206765</id><snippet>class Test(object):
    def __init__(self):
        self.inst_var = [1, 2, 3]
</snippet></ROW><ROW><id>206765</id><snippet>class SomeClass(object):
    __instances__ = {}

    def __new__(cls, v1, v2, v3):
        try:
            return cls.__insts__[(v1, v2, v3)]
        except KeyError:
            return cls.__insts__.setdefault(
               (v1, v2, v3), 
               object.__new__(cls, v1, v2, v3))
</snippet></ROW><ROW><id>207018</id><snippet>if len(self.__value) &gt; 2:
    widgetName.delete(2,4)
    return "break" # add this line
</snippet></ROW><ROW><id>207018</id><snippet>    self.__aEntry.bind('&lt;Key&gt;', self.callback) # ※ here!
    self.__aEntry.pack(side=LEFT)

def callback(self, event):
    self.__value = event.widget.get()+event.char # ※ here!
    print self.__value
    if len(self.__value)&gt;2:
        event.widget.delete(2,4) # ※ here!
        return "break"
</snippet></ROW><ROW><id>207117</id><snippet>self.combo['selection']
</snippet></ROW><ROW><id>207117</id><snippet>self.combo['value']
</snippet></ROW><ROW><id>207128</id><snippet>&gt;&gt;&gt; class A: foo = []
&gt;&gt;&gt; a, b = A(), A()
&gt;&gt;&gt; a.foo.append(5)
&gt;&gt;&gt; b.foo
[5]
&gt;&gt;&gt; class A:
...  def __init__(self): self.foo = []
&gt;&gt;&gt; a, b = A(), A()
&gt;&gt;&gt; a.foo.append(5)
&gt;&gt;&gt; b.foo    
[]
</snippet></ROW><ROW><id>209303</id><snippet>print</snippet></ROW><ROW><id>209303</id><snippet>print</snippet></ROW><ROW><id>209363</id><snippet>xmlrpclib</snippet></ROW><ROW><id>209363</id><snippet>Binary</snippet></ROW><ROW><id>209363</id><snippet>binary_obj = xmlrpclib.Binary( open('foo.pdf').read() )
</snippet></ROW><ROW><id>209363</id><snippet>import xmlrpclib 
server = xmlrpclib.ServerProxy("http://athomas:password@localhost:8080/trunk/login/xmlrpc") 
server.wiki.putAttachment('WikiStart/t.py', xmlrpclib.Binary(open('t.py').read()))
</snippet></ROW><ROW><id>209488</id><snippet>sys.path</snippet></ROW><ROW><id>209488</id><snippet>from cherrypy.lib import static</snippet></ROW><ROW><id>209503</id><snippet>#!/usr/bin/env python

import readline

readline.clear_history()
readline.add_history('foo')
readline.add_history('bar')

while 1:
    print raw_input('&gt; ')
</snippet></ROW><ROW><id>209503</id><snippet>#!/usr/bin/env python

import readline

values = ['Paul Eden &lt;paul@domain.com&gt;', 
          'Eden Jones &lt;ejones@domain.com&gt;', 
          'Somebody Else &lt;somebody@domain.com&gt;']
completions = {}

def completer(text, state):
    try:
        matches = completions[text]
    except KeyError:
        matches = [value for value in values
                   if text.upper() in value.upper()]
        completions[text] = matches
    try:
        return matches[state]
    except IndexError:
        return None

readline.set_completer(completer)
readline.parse_and_bind('tab: menu-complete')

while 1:
    a = raw_input('&gt; ')
    print 'said:', a
</snippet></ROW><ROW><id>209550</id><snippet>x = int("deadbeef", 16)
</snippet></ROW><ROW><id>209550</id><snippet>&gt;&gt;&gt; print int("0xdeadbeef", 0)
3735928559
&gt;&gt;&gt; print int("10", 0)
10
</snippet></ROW><ROW><id>209562</id><snippet>shutil</snippet></ROW><ROW><id>209562</id><snippet>os</snippet></ROW><ROW><id>209562</id><snippet>(a | b; c ) | something &gt;result</snippet></ROW><ROW><id>209562</id><snippet>a</snippet></ROW><ROW><id>209562</id><snippet>b</snippet></ROW><ROW><id>209562</id><snippet>something</snippet></ROW><ROW><id>209562</id><snippet>result</snippet></ROW><ROW><id>209562</id><snippet>os.walk</snippet></ROW><ROW><id>209854</id><snippet>&gt;&gt;&gt; keys = ['a', 'b', 'c']
&gt;&gt;&gt; values = [1, 2, 3]
&gt;&gt;&gt; dictionary = dict(zip(keys, values))
&gt;&gt;&gt; print dictionary
{'a': 1, 'b': 2, 'c': 3}
</snippet></ROW><ROW><id>210158</id><snippet>FTP.dir</snippet></ROW><ROW><id>210158</id><snippet>import ftplib

class FTP(ftplib.FTP):

    def shim_dir(self, *args):
        '''List a directory in long form.
        By default list current directory to stdout.
        Optional last argument is callback function; all
        non-empty arguments before it are concatenated to the
        LIST command.  (This *should* only be used for a pathname.)'''
        cmd = 'dir'
        func = None
        if args[-1:] and type(args[-1]) != type(''):
            args, func = args[:-1], args[-1]
        for arg in args:
            if arg:
                cmd = cmd + (' ' + arg)
        print cmd
        self.retrlines(cmd, func)

if __name__ == '__main__':
    f = FTP('ftp.ncbi.nih.gov')
    f.login()
    f.shim_dir('"blast"')
</snippet></ROW><ROW><id>210417</id><snippet>met% pwd
/home/coventry/src/Python-3.0rc1
met% rgrep uft-8 .
./Lib/test/bad_coding.py:# -*- coding: uft-8 -*-
./py3k/Lib/test/bad_coding.py:# -*- coding: uft-8 -*-
</snippet></ROW><ROW><id>210417</id><snippet>help</snippet></ROW><ROW><id>210747</id><snippet>0xFFFFFFFF</snippet></ROW><ROW><id>210747</id><snippet>&gt;&gt;&gt; m = 0xFFFFFF00
&gt;&gt;&gt; allf = 0xFFFFFFFF
&gt;&gt;&gt; ~m &amp; allf
255L
</snippet></ROW><ROW><id>210982</id><snippet>#!/usr/bin/python
import sys
print sys.argv
</snippet></ROW><ROW><id>211101</id><snippet>__import__</snippet></ROW><ROW><id>211101</id><snippet>__import__( name[, globals[, locals[, fromlist[, level]]]])
</snippet></ROW><ROW><id>211101</id><snippet>def my_import(name):
    mod = __import__(name)
    components = name.split('.')
    for comp in components[1:]:
        mod = getattr(mod, comp)
    return mod
</snippet></ROW><ROW><id>211101</id><snippet>somepackage.somemodule</snippet></ROW><ROW><id>211101</id><snippet>__import__</snippet></ROW><ROW><id>211101</id><snippet>somepackage.__init__.py</snippet></ROW><ROW><id>211101</id><snippet>somemodule</snippet></ROW><ROW><id>211101</id><snippet>fromlist</snippet></ROW><ROW><id>211101</id><snippet>somemodule</snippet></ROW><ROW><id>211174</id><snippet>from numpy import matrix
from numpy import linalg
A = matrix( [[1,2,3],[11,12,13],[21,22,23]]) # Creates a matrix.
x = matrix( [[1],[2],[3]] )                  # Creates a matrix (like a column vector).
y = matrix( [[1,2,3]] )                      # Creates a matrix (like a row vector).
print A.T                                    # Transpose of A.
print A*x                                    # Matrix multiplication of A and x.
print A.I                                    # Inverse of A.
print linalg.solve(A, x)     # Solve the linear equation system.
</snippet></ROW><ROW><id>211304</id><snippet>from wx import EmptyIcon
icon = EmptyIcon()
icon.CopyFromBitmap(your_wxBitmap)
</snippet></ROW><ROW><id>211304</id><snippet>frame.SetIcon(icon)
</snippet></ROW><ROW><id>212299</id><snippet>class options(object):
    VERBOSE = True
    IGNORE_WARNINGS = True

if options.VERBOSE:
    # ...
</snippet></ROW><ROW><id>212299</id><snippet>options.py</snippet></ROW><ROW><id>212299</id><snippet>options.py</snippet></ROW><ROW><id>212299</id><snippet>VERBOSE = True
IGNORE_WARNINGS = True
</snippet></ROW><ROW><id>212299</id><snippet>main.py</snippet></ROW><ROW><id>212299</id><snippet>import options

if options.VERBOSE:
    # ...
</snippet></ROW><ROW><id>212975</id><snippet>Queue</snippet></ROW><ROW><id>212975</id><snippet>Condition</snippet></ROW><ROW><id>212975</id><snippet>threading</snippet></ROW><ROW><id>212975</id><snippet>Queue</snippet></ROW><ROW><id>212975</id><snippet>Queue</snippet></ROW><ROW><id>212975</id><snippet>def interruptable_get(self):
    while True:
        try:
            return self.get(timeout=1000)
        except Queue.Empty:
            pass
Queue.interruptable_get = interruptable_get
</snippet></ROW><ROW><id>212975</id><snippet>q.interruptable_get()
</snippet></ROW><ROW><id>212975</id><snippet>interruptable_get(q)
</snippet></ROW><ROW><id>213138</id><snippet>function(doc) {
  for (var tag in doc.tags) {
    emit([tag, doc.published], doc)
  }
};
</snippet></ROW><ROW><id>214162</id><snippet>mod_python</snippet></ROW><ROW><id>214162</id><snippet>mod_python</snippet></ROW><ROW><id>214186</id><snippet>--- ngrep.c     2006-11-28 05:38:43.000000000 -0800
+++ ngrep.c.new 2008-10-17 16:28:29.000000000 -0700
@@ -687,8 +687,7 @@
     }

     if (quiet &lt; 1) {
-        printf("#");
-        fflush(stdout);
+      fprintf (stderr, "#");
     }

     switch (ip_proto) {
</snippet></ROW><ROW><id>214186</id><snippet>while (&lt;CMD&gt;) {
  s/($keyword)/\e[93m$1\e[0m/g;
  print;
}
</snippet></ROW><ROW><id>214510</id><snippet>2to3</snippet></ROW><ROW><id>214510</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>214601</id><snippet>2to3</snippet></ROW><ROW><id>214601</id><snippet>/usr/bin/python</snippet></ROW><ROW><id>214601</id><snippet>3to2</snippet></ROW><ROW><id>214932</id><snippet>${...}</snippet></ROW><ROW><id>215090</id><snippet>PyArray_DescrConverter</snippet></ROW><ROW><id>215090</id><snippet>#include &lt;Python.h&gt;
#include &lt;stdio.h&gt;
#include &lt;numpy/arrayobject.h&gt;

int main(int argc, char *argv[])
{
     int dims[] = { 2, 3 };
     PyObject *op, *array;
     PyArray_Descr *descr;

     Py_Initialize();
     import_array();
     op = Py_BuildValue("[(s, s), (s, s)]", "a", "i4", "b", "U5");
     PyArray_DescrConverter(op, &amp;descr);
     Py_DECREF(op);
     array = PyArray_SimpleNewFromDescr(2, dims, descr);
     PyObject_Print(array, stdout, 0);
     printf("\n");
     Py_DECREF(array);
     return 0;
}
</snippet></ROW><ROW><id>215216</id><snippet>import wx

class Test(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        self.test = wx.ListCtrl(self, style = wx.LC_REPORT | wx.LC_NO_HEADER)

        for i in range(5):
            self.test.InsertColumn(i, 'Col %d' % (i + 1))
            self.test.SetColumnWidth(i, 200)


        for i in range(0, 100, 5):
            index = self.test.InsertStringItem(self.test.GetItemCount(), "")
            for j in range(5):
                self.test.SetStringItem(index, j, str(i+j)*30)

        self.Show()

app = wx.PySimpleApp()
app.TopWindow = Test()
app.MainLoop()
</snippet></ROW><ROW><id>215298</id><snippet>export PYTHON_EGG_CACHE=/tmp/python_eggs
</snippet></ROW><ROW><id>215313</id><snippet>import datetime, dateutil.parser

d = dateutil.parser.parse('2008-09-26T01:51:42.000Z')
print d.strftime('%m/%d/%Y') #==&gt; '09/26/2008'
</snippet></ROW><ROW><id>215488</id><snippet>from django.contrib.contenttypes.models import ContentType
from django.views.generic import create_update

def update_object_as_child(parent_model_class):
   """
   Given a base models.Model class, decorate a function to return  
   create_update.update_object, on the child class.

   e.g.
   @update_object(Animal)
   def update_object(request, object_id):
      pass

  kwargs should have an object_id defined.
  """

  def decorator(function):
      def wrapper(request, **kwargs):
          # may raise KeyError
          id = kwargs['object_id']

          parent_obj = parent_model_class.objects.get( pk=id )

          # following http://www.djangosnippets.org/snippets/1031/
          child_class = parent_obj.content_type.model_class()

          kwargs['model'] = child_class

          # rely on the generic code for testing/validation/404
          return create_update.update_object(request, **kwargs)
      return wrapper

  return decorator
</snippet></ROW><ROW><id>215488</id><snippet>from mysite.core.views.create_update import update_object_as_child

@update_object_as_child(Animal)
def edit_animal(request, object_id):
  pass
</snippet></ROW><ROW><id>215488</id><snippet>urlpatterns += patterns('animals.views',
  url(r'^edit/(?P&lt;object_id&gt;\d+)$', 'edit_animal', name="edit_animal"),
)
</snippet></ROW><ROW><id>215507</id><snippet>PyObject *PyString_Decode(const char *s,
    		  Py_ssize_t size,
    		  const char *encoding,
    		  const char *errors)
{
    PyObject *v, *str;

    str = PyString_FromStringAndSize(s, size);
    if (str == NULL)
    return NULL;
    v = PyString_AsDecodedString(str, encoding, errors);
    Py_DECREF(str);
    return v;
}
</snippet></ROW><ROW><id>215507</id><snippet>#include &lt;Python.h&gt;
#include &lt;stdio.h&gt;

int main(int argc, char *argv[])
{
     char c_string[] = { (char)0x93, 0 };
     PyObject *py_string, *py_unicode;

     Py_Initialize();

     py_string = PyString_FromStringAndSize(c_string, 1);
     if (!py_string) {
          PyErr_Print();
          return 1;
     }
     py_unicode = PyString_AsDecodedObject(py_string, "windows_1252", "replace");
     Py_DECREF(py_string);

     return 0;
}
</snippet></ROW><ROW><id>215874</id><snippet>return</snippet></ROW><ROW><id>215874</id><snippet>print</snippet></ROW><ROW><id>215874</id><snippet>MyModule.py</snippet></ROW><ROW><id>215874</id><snippet>import thirdparty

def MyFunc(some_arg):
    result = thirdparty.go()
    return result
</snippet></ROW><ROW><id>215874</id><snippet>#include &lt;Python.h&gt;

int
main(int argc, char *argv[])
{
    PyObject *pName, *pModule, *pFunc;
    PyObject *pArgs, *pArg, *pResult;
    int i;

    Py_Initialize();
    pName = PyString_FromString("MyModule.py");
    /* Error checking of pName left out as exercise */

    pModule = PyImport_Import(pName);
    Py_DECREF(pName);

    if (pModule != NULL) {
        pFunc = PyObject_GetAttrString(pModule, "MyFunc");
        /* pFunc is a new reference */

        if (pFunc) {
            pArgs = PyTuple_New(0);
            pArg = PyString_FromString("some parameter")
            /* pArg reference stolen here: */
            PyTuple_SetItem(pArgs, 0, pArg);
            pResult = PyObject_CallObject(pFunc, pArgs);
            Py_DECREF(pArgs);
            if (pResult != NULL) {
                printf("Result of call: %s\n", PyString_AsString(pResult));
                Py_DECREF(pResult);
            }
            else {
                Py_DECREF(pFunc);
                Py_DECREF(pModule);
                PyErr_Print();
                fprintf(stderr,"Call failed\n");
                return 1;
            }
        }
        else {
            if (PyErr_Occurred())
                PyErr_Print();
            fprintf(stderr, "Cannot find function");
        }
        Py_XDECREF(pFunc);
        Py_DECREF(pModule);
    }
    else {
        PyErr_Print();
        fprintf(stderr, "Failed to load module");
        return 1;
    }
    Py_Finalize();
    return 0;
}
</snippet></ROW><ROW><id>216136</id><snippet>mylist = [1, 2, 3, 4, 5]
backwards = lambda l: (backwards (l[1:]) + l[:1] if l else []) 
print backwards (mylist)
</snippet></ROW><ROW><id>216145</id><snippet>wader/
  cli/
  common/
  contrib/
  gtk/
    controllers/
    models/
    views/
  test/
  utils/
</snippet></ROW><ROW><id>216980</id><snippet>__getitem__()</snippet></ROW><ROW><id>217114</id><snippet>h[ [0,A[j]][j/9.. rest of boolean condition]</snippet></ROW><ROW><id>217114</id><snippet>0*A[j]</snippet></ROW><ROW><id>217114</id><snippet>1*A[j]</snippet></ROW><ROW><id>217114</id><snippet>A[j]</snippet></ROW><ROW><id>217114</id><snippet>9 or</snippet></ROW><ROW><id>217114</id><snippet>9or</snippet></ROW><ROW><id>217114</id><snippet>j not in h</snippet></ROW><ROW><id>217114</id><snippet>(j in h)-1</snippet></ROW><ROW><id>217114</id><snippet>r=range(81)
def R(A):
 z={} 
 for i in r:
  if 0==A[i]:h=dict((A[j]*(j/9==i/9or j%9==i%9or j/27==i/27and j%9/3==i%9/3),1)for j in r);z[9-len(h)]=h,i
 for l in sorted(z):
  h,i=z[l]
  for j in r[1:10]:
   if(j in h)-1:
    A[i]=j
    if R(A):return A
  A[i]=0;return[]
 return A
</snippet></ROW><ROW><id>218102</id><snippet>&gt;&gt;&gt; import fnmatch
&gt;&gt;&gt; fnmatch.fnmatch("fooabcdef", "*abcde?")
True
&gt;&gt;&gt; help(fnmatch.fnmatch)
Help on function fnmatch in module fnmatch:

fnmatch(name, pat)
    Test whether FILENAME matches PATTERN.

    Patterns are Unix shell style:

    *       matches everything
    ?       matches any single character
    [seq]   matches any character in seq
    [!seq]  matches any char not in seq

    An initial period in FILENAME is not special.
    Both FILENAME and PATTERN are first case-normalized
    if the operating system requires it.
    If you don't want this, use fnmatchcase(FILENAME, PATTERN).

&gt;&gt;&gt;
</snippet></ROW><ROW><id>218625</id><snippet>aMethod.func_code.co_argcount
</snippet></ROW><ROW><id>218625</id><snippet>aMethod.func_code.co_varnames
</snippet></ROW><ROW><id>218625</id><snippet>func(*args, **kwargs)</snippet></ROW><ROW><id>219048</id><snippet>p1 = Popen(["dmesg"], stdout=PIPE)
p2 = Popen(["grep", "hda"], stdin=p1.stdout, stdout=PIPE)
output = p2.communicate()[0]
</snippet></ROW><ROW><id>219048</id><snippet>from multiprocessing import Process, Pipe

def f(conn):
    conn.send([42, None, 'hello'])
    conn.close()

if __name__ == '__main__':
    parent_conn, child_conn = Pipe()
    p = Process(target=f, args=(child_conn,))
    p.start()
    print parent_conn.recv()   # prints "[42, None, 'hello']"
    p.join()
</snippet></ROW><ROW><id>219303</id><snippet>class State(object):
    def __init__(self, name):
        self.name = name

    def __repr__(self):
        return self.name

class Automaton(object):
    def __init__(self, instance, start):
        self._state = start
        self.transitions = instance.transitions()

    def get_state(self):
        return self._state

    def set_state(self, target):
        transition = self.transitions.get((self.state, target))
        if transition:
            action, condition = transition
            if condition:
                if condition():
                    if action:
                        action()
                    self._state = target
            else:
                self._state = target
        else:
            self._state = target

    state = property(get_state, set_state)

class Door(object):
    open = State('open')
    closed = State('closed')

    def __init__(self, blocked=False):
        self.blocked = blocked

    def close(self):
        print 'closing door'

    def do_open(self):
        print 'opening door'

    def not_blocked(self):
        return not self.blocked

    def transitions(self):
        return {
            (self.open, self.closed):(self.close, self.not_blocked),
            (self.closed, self.open):(self.do_open, self.not_blocked),
        }

if __name__ == '__main__':
    door = Door()
    automaton = Automaton(door, door.open)

    print 'door is', automaton.state
    automaton.state = door.closed
    print 'door is', automaton.state
    automaton.state = door.open
    print 'door is', automaton.state
    door.blocked = True
    automaton.state = door.closed
    print 'door is', automaton.state
</snippet></ROW><ROW><id>219303</id><snippet>door is open
closing door
door is closed
opening door
door is open
door is open
</snippet></ROW><ROW><id>219671</id><snippet>import thread, socket, Queue

connections = Queue.Queue()
num_threads = 10
backlog = 10

def request():
    while 1:
        conn = connections.get()
        data = ''
        while '\r\n\r\n' not in data:
            data += conn.recv(4048)
        conn.sendall('HTTP/1.1 200 OK\r\n\r\nHello World')
        conn.close()

if __name__ == '__main__':
    for _ in range(num_threads):
        thread.start_new_thread(request, ())

    acceptor = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    acceptor.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    acceptor.bind(('', 1234))
    acceptor.listen(backlog)
    while 1:
        conn, addr = acceptor.accept()
        connections.put(conn)
</snippet></ROW><ROW><id>219671</id><snippet>ab -n 10000 -c 10 http://127.0.0.1:1234/ --&gt; 8695.03 [#/sec]
ab -n 10000 -c 11 http://127.0.0.1:1234/ --&gt; 8529.41 [#/sec]
</snippet></ROW><ROW><id>220542</id><snippet>.pid</snippet></ROW><ROW><id>221113</id><snippet>from subprocess import Popen, PIPE
output = Popen(["mycmd", "myarg"], stdout=PIPE).communicate()[0]

#this is how I'd mangle the arguments together
output = Popen([
    self._ghostscriptPath, 
   'gswin32c',
   '-q',
   '-dNOPAUSE',
   '-dBATCH',
   '-sDEVICE=tiffg4',
   '-r196X204',
   '-sPAPERSIZE=a4',
   '-sOutputFile="%s %s"' % (tifDest, pdfSource),
], stdout=PIPE).communicate()[0]
</snippet></ROW><ROW><id>221113</id><snippet>os.popen(' '.join([
    self._ghostscriptPath, 
   'gswin32c',
   '-q',
   '-dNOPAUSE',
   '-dBATCH',
   '-sDEVICE=tiffg4',
   '-r196X204',
   '-sPAPERSIZE=a4',
   '-sOutputFile="%s %s"' % (tifDest, pdfSource),
]))
</snippet></ROW><ROW><id>221338</id><snippet>RELATEDCLASSNAME_set</snippet></ROW><ROW><id>221338</id><snippet>some_foo.bar_set.all()
</snippet></ROW><ROW><id>221338</id><snippet>related_name</snippet></ROW><ROW><id>221338</id><snippet>ForeignKey</snippet></ROW><ROW><id>221338</id><snippet>class Foo(models.Model):
     name = models.CharField()

class Bar(models.Model):
     title = models.CharField()
     foo = models.ForeignKey(Foo, related_name='bars')

...

some_foo.bars.all()
</snippet></ROW><ROW><id>221380</id><snippet>(c)</snippet></ROW><ROW><id>221380</id><snippet>Copyright</snippet></ROW><ROW><id>221832</id><snippet>from twisted.internet import task
from twisted.internet import reactor

datagramRecieved = False
timeout = 1.0 # One second

# UDP code here

def testTimeout():
    global datagramRecieved
    if not datagramRecieved:
        reactor.stop()
    datagramRecieved = False


l = task.LoopingCall(testTimeout)
l.start(timeout) # call every second

# l.stop() will stop the looping calls
reactor.run()
</snippet></ROW><ROW><id>221851</id><snippet>open("big.file").read()</snippet></ROW><ROW><id>221851</id><snippet>f = open("big.file", "rb")</snippet></ROW><ROW><id>221851</id><snippet>f.read(500)</snippet></ROW><ROW><id>221851</id><snippet>target_seq = "567"
input_file = "1234567890"

target_seq.read(5) # reads 12345, doesn't contain 567
target_seq.read(5) # reads 67890, doesn't contain 567
</snippet></ROW><ROW><id>221851</id><snippet>len(target_seq)</snippet></ROW><ROW><id>221851</id><snippet>while cur_data != "":
    seek_start = 0
    chunk_size = len(target_seq)

    input_file.seek(offset = seek_start, whence = 1) #whence=1 means seek from start of file (0 + offset)
    cur_data = input_file.read(chunk_size) # reads 123
    if target_seq == cur_data:
        # Found it!
        out_file.write("replacement_string")
    else:
        # not it, shove it in the new file
        out_file.write(cur_data)
    seek_start += 1
</snippet></ROW><ROW><id>222334</id><snippet> class_lookup = {'Class1' : Class1, ... }
 ...
 result = class_lookup[className](param).html
</snippet></ROW><ROW><id>222334</id><snippet>class Namespace(object):
    class Class1(object):
        ...
    class Class2(object):
        ...
...
result = getattr(Namespace, className)(param).html
</snippet></ROW><ROW><id>222334</id><snippet>def register_subclasses(base):
    d={}
    for cls in base.__subclasses__():
        d[cls.__name__] = cls
        d.update(register_subclasses(cls))
    return d


class_lookup = register_subclasses(MyBaseClass)
</snippet></ROW><ROW><id>222762</id><snippet>from operator import itemgetter

MY_SORTED_TUPLE = tuple(sorted(MY_TUPLE, key=itemgetter(1)))
</snippet></ROW><ROW><id>222762</id><snippet>itemgetter</snippet></ROW><ROW><id>222762</id><snippet>MY_SORTED_TUPLE = tuple(sorted(MY_TUPLE, key=lambda item: item[1]))
</snippet></ROW><ROW><id>222922</id><snippet>super()</snippet></ROW><ROW><id>222922</id><snippet>super()</snippet></ROW><ROW><id>222922</id><snippet>Child</snippet></ROW><ROW><id>223389</id><snippet>urlopen()</snippet></ROW><ROW><id>223389</id><snippet>data.read()</snippet></ROW><ROW><id>223389</id><snippet>.read()</snippet></ROW><ROW><id>223566</id><snippet>className = MyClass
newObject = className()
</snippet></ROW><ROW><id>223566</id><snippet>className</snippet></ROW><ROW><id>223566</id><snippet>MyClass</snippet></ROW><ROW><id>223566</id><snippet>MyClass</snippet></ROW><ROW><id>223566</id><snippet>className</snippet></ROW><ROW><id>223566</id><snippet>&gt;&gt;&gt; className = list
&gt;&gt;&gt; newObject = className()
&gt;&gt;&gt; newObject
[]
</snippet></ROW><ROW><id>223566</id><snippet>list</snippet></ROW><ROW><id>223566</id><snippet>list</snippet></ROW><ROW><id>223689</id><snippet>import sys, re

css = open( sys.argv[1] , 'r' ).read()

# remove comments - this will break a lot of hacks :-P
css = re.sub( r'\s*/\*\s*\*/', "$$HACK1$$", css ) # preserve IE&lt;6 comment hack
css = re.sub( r'/\*[\s\S]*?\*/', "", css )
css = css.replace( "$$HACK1$$", '/**/' ) # preserve IE&lt;6 comment hack

# url() doesn't need quotes
css = re.sub( r'url\((["\'])([^)]*)\1\)', r'url(\2)', css )

# spaces may be safely collapsed as generated content will collapse them anyway
css = re.sub( r'\s+', ' ', css )

# shorten collapsable colors: #aabbcc to #abc
css = re.sub( r'#([0-9a-f])\1([0-9a-f])\2([0-9a-f])\3(\s|;)', r'#\1\2\3\4', css )

# fragment values can loose zeros
css = re.sub( r':\s*0(\.\d+([cm]m|e[mx]|in|p[ctx]))\s*;', r':\1;', css )

for rule in re.findall( r'([^{]+){([^}]*)}', css ):

    # we don't need spaces around operators
    selectors = [re.sub( r'(?&lt;=[\[\(&gt;+=])\s+|\s+(?=[=~^$*|&gt;+\]\)])', r'', selector.strip() ) for selector in rule[0].split( ',' )]

    # order is important, but we still want to discard repetitions
    properties = {}
    porder = []
    for prop in re.findall( '(.*?):(.*?)(;|$)', rule[1] ):
        key = prop[0].strip().lower()
        if key not in porder: porder.append( key )
        properties[ key ] = prop[1].strip()

    # output rule if it contains any declarations
    if properties:
        print "%s{%s}" % ( ','.join( selectors ), ''.join(['%s:%s;' % (key, properties[key]) for key in porder])[:-1] ) 
</snippet></ROW><ROW><id>223886</id><snippet>&gt;&gt;&gt; import win32com.client
&gt;&gt;&gt; b = win32com.client.Dispatch('VisualStudio.DTE')
&gt;&gt;&gt; b
&lt;COMObject VisualStudio.DTE&gt;
&gt;&gt;&gt; b.name
u'Microsoft Visual Studio'
&gt;&gt;&gt; b.Version
u'8.0'
</snippet></ROW><ROW><id>224003</id><snippet>render_to_response</snippet></ROW><ROW><id>224003</id><snippet>{% for object in data.filtered_set %}</snippet></ROW><ROW><id>224187</id><snippet>((a,b,c) for a in [1,2,3] for b in [4,5,6,7,8,9] for c in [1,2])
</snippet></ROW><ROW><id>224187</id><snippet>def combinations(*seqs):
  if not seqs: return (item for item in ())
  first, rest = seqs[0], seqs[1:]
  if not rest: return ((item,) for item in first)
  return ((item,) + items for item in first for items in combinations(*rest))
</snippet></ROW><ROW><id>224187</id><snippet>&gt;&gt;&gt; for pair in combinations('abc', [1,2,3]):
...   print pair
... 
('a', 1)
('a', 2)
('a', 3)
('b', 1)
('b', 2)
('b', 3)
('c', 1)
('c', 2)
('c', 3)
</snippet></ROW><ROW><id>224722</id><snippet>class DictObj(object):
    def __getattr__(self, attr):
        return self.__dict__.get(attr)

&gt;&gt;&gt; d = DictObj()
&gt;&gt;&gt; d.something = 'one'
&gt;&gt;&gt; print d.something
one
&gt;&gt;&gt; print d.somethingelse
None
&gt;&gt;&gt;
</snippet></ROW><ROW><id>224800</id><snippet>import wx
import wx.lib.newevent


(PageChangeEvent, EVT_PAGE_CHANGE) = wx.lib.newevent.NewEvent()


class Data:
    foo = None
    bar = None


class Page1(wx.Panel):
    def __init__(self, parent, data):
        wx.Panel.__init__(self, parent)
        self.parent = parent
        self.data = data

        sizer = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(sizer)
        label = wx.StaticText(self, label="Page 1 - foo")
        self.foo = wx.TextCtrl(self)
        goto_page2 = wx.Button(self, label="Go to page 2")

        for c in (label, self.foo, goto_page2):
            sizer.Add(c, 0, wx.TOP, 5)

        goto_page2.Bind(wx.EVT_BUTTON, self.OnPage2)

    def OnPage2(self, event):
        self.data.foo = self.foo.Value
        wx.PostEvent(self.parent, PageChangeEvent(page=Page2))


class Page2(wx.Panel):
    def __init__(self, parent, data):
        wx.Panel.__init__(self, parent)
        self.parent = parent
        self.data = data

        sizer = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(sizer)
        label = wx.StaticText(self, label="Page 2 - bar")
        self.bar = wx.TextCtrl(self)
        goto_finish = wx.Button(self, label="Finish")

        for c in (label, self.bar, goto_finish):
            sizer.Add(c, 0, wx.TOP, 5)

        goto_finish.Bind(wx.EVT_BUTTON, self.OnFinish)

    def OnFinish(self, event):
        self.data.bar = self.bar.Value
        wx.PostEvent(self.parent, PageChangeEvent(page=finish))


def finish(parent, data):
    wx.MessageBox("foo = %s\nbar = %s" % (data.foo, data.bar))
    wx.GetApp().ExitMainLoop()


class Test(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        self.data = Data()
        self.current_page = None

        self.Bind(EVT_PAGE_CHANGE, self.OnPageChange)
        wx.PostEvent(self, PageChangeEvent(page=Page1))

    def OnPageChange(self, event):
        page = event.page(self, self.data)
        if page == None:
            return
        if self.current_page:
            self.current_page.Destroy()
        self.current_page = page
        page.Layout()
        page.Fit()
        page.Refresh()


app = wx.PySimpleApp()
app.TopWindow = Test()
app.TopWindow.Show()
app.MainLoop()
</snippet></ROW><ROW><id>225029</id><snippet>emailpath = str(self._emailpath + self._inboxfolder + "\\" + email + "_" + msg.getheader("Subject") + ".eml")
</snippet></ROW><ROW><id>225029</id><snippet>emailpath = os.path.join(self._emailpath + self._inboxfolder, email + "_" + msg.getheader("Subject") + ".eml")
</snippet></ROW><ROW><id>225029</id><snippet>try:
    import cStringIO as StringIO
except ImportError:
    import StringIO
</snippet></ROW><ROW><id>225029</id><snippet>emailpath = "".join([c for c in emailpath if c in (string.letters + string.digits + "_ ")])
</snippet></ROW><ROW><id>225106</id><snippet>from wsgiref.handlers import format_date_time
from datetime import datetime
from time import mktime

now = datetime.now()
stamp = mktime(now.timetuple())
print format_date_time(stamp) #--&gt; Wed, 22 Oct 2008 10:52:40 GMT
</snippet></ROW><ROW><id>225106</id><snippet>from email.utils import formatdate
from datetime import datetime
from time import mktime

now = datetime.now()
stamp = mktime(now.timetuple())
print formatdate(
    timeval     = stamp,
    localtime   = False,
    usegmt      = True
) #--&gt; Wed, 22 Oct 2008 10:55:46 GMT
</snippet></ROW><ROW><id>225106</id><snippet>import locale, datetime

locale.setlocale(locale.LC_TIME, 'en_US')
datetime.datetime.utcnow().strftime('%a, %d %b %Y %H:%M:%S GMT')
</snippet></ROW><ROW><id>225106</id><snippet>from datetime import datetime
from babel.dates import format_datetime

now = datetime.utcnow()
format = 'EEE, dd LLL yyyy hh:mm:ss'
print format_datetime(now, format, locale='en') + ' GMT'
</snippet></ROW><ROW><id>225106</id><snippet>def httpdate(dt):
    """Return a string representation of a date according to RFC 1123
    (HTTP/1.1).

    The supplied date must be in UTC.

    """
    weekday = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"][dt.weekday()]
    month = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep",
             "Oct", "Nov", "Dec"][dt.month - 1]
    return "%s, %02d %s %04d %02d:%02d:%02d GMT" % (weekday, dt.day, month,
        dt.year, dt.hour, dt.minute, dt.second)
</snippet></ROW><ROW><id>225382</id><snippet>*_parsed</snippet></ROW><ROW><id>225382</id><snippet>updated_parsed</snippet></ROW><ROW><id>225801</id><snippet>return self.display</snippet></ROW><ROW><id>225801</id><snippet>&gt;&gt;&gt; a = [1,2]
&gt;&gt;&gt; b = [a,a]
&gt;&gt;&gt; b
[[1, 2], [1, 2]]
&gt;&gt;&gt; a.append(3)
&gt;&gt;&gt; b
[[1, 2, 3], [1, 2, 3]]
</snippet></ROW><ROW><id>225801</id><snippet>return self.display[:]</snippet></ROW><ROW><id>226540</id><snippet>from django.conf.urls.defaults import *

urlpatterns = patterns('myproject.views',
    url(r'^$', 'index', name='index'),
)
</snippet></ROW><ROW><id>226540</id><snippet>&lt;a href="{% url index %}"&gt;...
</snippet></ROW><ROW><id>226568</id><snippet>def some_view(request):
    if request.method == 'POST':
        form1 = GeneralForm(request.POST, prefix='form1')
        form2 = GeneralForm(request.POST, prefix='form2')
        if all([form1.is_valid(), form2.is_valid()]):
            pass # Do stuff with the forms
    else:
        form1 = GeneralForm(prefix='form1')
        form2 = GeneralForm(prefix='form2')
    return render_to_response('some_template.html', {
        'form1': form1,
        'form2': form2,
    })
</snippet></ROW><ROW><id>227125</id><snippet>import glob, os

def rename(dir, pattern, titlePattern):
    for pathAndFilename in glob.iglob(os.path.join(dir, pattern)):
        title, ext = os.path.splitext(os.path.basename(pathAndFilename))
        os.rename(pathAndFilename, 
                  os.path.join(dir, titlePattern % title + ext))
</snippet></ROW><ROW><id>227125</id><snippet>rename(r'c:\temp\xx', r'*.doc', r'new(%s)')
</snippet></ROW><ROW><id>227125</id><snippet>*.doc</snippet></ROW><ROW><id>227125</id><snippet>c:\temp\xx</snippet></ROW><ROW><id>227125</id><snippet>new(%s).doc</snippet></ROW><ROW><id>227125</id><snippet>%s</snippet></ROW><ROW><id>227472</id><snippet>&gt;&gt;&gt; ord('a')
97
&gt;&gt;&gt; chr(97)
'a'
&gt;&gt;&gt; chr(ord('a') + 3)
'd'
&gt;&gt;&gt;
</snippet></ROW><ROW><id>227472</id><snippet>unichr</snippet></ROW><ROW><id>227472</id><snippet>unichr</snippet></ROW><ROW><id>227472</id><snippet>&gt;&gt;&gt; unichr(97)
u'a'
&gt;&gt;&gt; unichr(1234)
u'\u04d2'
</snippet></ROW><ROW><id>227855</id><snippet>def burninate(b):
    c = []
    b = list(b)
    for i in range(3):
        c.append(b.pop())
    return c
</snippet></ROW><ROW><id>227855</id><snippet>def burninante(b):
    return b[:-4:-1]   # return the last three elements in reverse order
</snippet></ROW><ROW><id>228708</id><snippet>&gt;&gt;&gt; print hex (-1 &amp; 0xffffffff)
0xffffffffL
</snippet></ROW><ROW><id>228708</id><snippet>&gt;&gt;&gt; def hex2(n):
...     return hex (n &amp; 0xffffffff)[:-1]
...
&gt;&gt;&gt; print hex2(-1)
0xffffffff
&gt;&gt;&gt; print hex2(17)
0x11
</snippet></ROW><ROW><id>228708</id><snippet>&gt;&gt;&gt; def hex3(n):
...     return "0x%s"%("00000000%s"%(hex(n&amp;0xffffffff)[2:-1]))[-8:]
...
&gt;&gt;&gt; print hex3(-1)
0xffffffff
&gt;&gt;&gt; print hex3(17)
0x00000011
</snippet></ROW><ROW><id>228708</id><snippet>def hex2(n):
    return "0x%x"%(n&amp;0xffffffff)

def hex3(n):
    return "0x%s"%("00000000%x"%(n&amp;0xffffffff))[-8:]
</snippet></ROW><ROW><id>228850</id><snippet>import string
allTheLetters = string.lowercase
</snippet></ROW><ROW><id>228850</id><snippet>def getAllTheLetters(begin='a', end='z'):
    beginNum = ord(begin)
    endNum = ord(end)
    for number in xrange(beginNum, endNum+1):
        yield chr(number)
</snippet></ROW><ROW><id>228850</id><snippet>True</snippet></ROW><ROW><id>228850</id><snippet>import string
print ''.join(getAllTheLetters()) == string.lowercase
</snippet></ROW><ROW><id>228850</id><snippet>from collections import defaultdict    
def letterOccurrances(string):
    frequencies = defaultdict(lambda: 0)
    for character in string:
        frequencies[character.lower()] += 1
    return frequencies
</snippet></ROW><ROW><id>228850</id><snippet>occs = letterOccurrances("Hello, world!")
print occs['l']
print occs['h']
</snippet></ROW><ROW><id>228850</id><snippet># -*- coding: utf-8 -*-
occs = letterOccurrances(u"héĺĺó, ẃóŕĺd!")
print occs[u'l']
print occs[u'ĺ']
</snippet></ROW><ROW><id>228850</id><snippet>def alphCount(text):
    for character, count in sorted(letterOccurrances(text).iteritems()):
        print "%s: %s" % (character, count)

alphCount("hello, world!")
</snippet></ROW><ROW><id>228981</id><snippet>Cursor.execute()</snippet></ROW><ROW><id>228981</id><snippet>self.cursor.execute("SELECT weight FROM Equipment WHERE name = ?", [item])
</snippet></ROW><ROW><id>229819</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>229819</id><snippet>/usr/lib/python2.5/site-packages</snippet></ROW><ROW><id>229819</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>229819</id><snippet>&gt;&gt;&gt; import scapy
&gt;&gt;&gt; dir(scapy)
</snippet></ROW><ROW><id>229819</id><snippet>&gt;&gt;&gt; import scapy
&gt;&gt;&gt; help(scapy)
</snippet></ROW><ROW><id>229819</id><snippet>import scapy</snippet></ROW><ROW><id>229819</id><snippet>from scapy import *</snippet></ROW><ROW><id>230416</id><snippet>import fileinput
for line in fileinput.input (filenameToProcess, inplace=1):
    process (line)
</snippet></ROW><ROW><id>230416</id><snippet>import fileinput

for line in fileinput.input ("b.txt",inplace=1):
    print "%d: %s" % (fileinput.lineno(),line),
</snippet></ROW><ROW><id>230774</id><snippet>import sys
sys.stdout.flush()
</snippet></ROW><ROW><id>231368</id><snippet>locals()</snippet></ROW><ROW><id>231368</id><snippet>&gt;&gt;&gt; name = 'foo'
&gt;&gt;&gt; zip = 123
&gt;&gt;&gt; unused = 'whoops!'
&gt;&gt;&gt; locals()
{'name': 'foo', 'zip': 123, ... 'unused': 'whoops!', ...}
&gt;&gt;&gt; '%(name)s %(zip)i' % locals()
'foo 123'
</snippet></ROW><ROW><id>231855</id><snippet>yield</snippet></ROW><ROW><id>231855</id><snippet>&gt;&gt;&gt; mylist = [1, 2, 3]
&gt;&gt;&gt; for i in mylist:
...    print(i)
1
2
3
</snippet></ROW><ROW><id>231855</id><snippet>&gt;&gt;&gt; mylist = [x*x for x in range(3)]
&gt;&gt;&gt; for i in mylist:
...    print(i)
0
1
4
</snippet></ROW><ROW><id>231855</id><snippet>&gt;&gt;&gt; mygenerator = (x*x for x in range(3))
&gt;&gt;&gt; for i in mygenerator:
...    print(i)
0
1
4
</snippet></ROW><ROW><id>231855</id><snippet>()</snippet></ROW><ROW><id>231855</id><snippet>[]</snippet></ROW><ROW><id>231855</id><snippet>for i in mygenerator</snippet></ROW><ROW><id>231855</id><snippet>Yield</snippet></ROW><ROW><id>231855</id><snippet>return</snippet></ROW><ROW><id>231855</id><snippet>&gt;&gt;&gt; def createGenerator():
...    mylist = range(3)
...    for i in mylist:
...        yield i*i
...
&gt;&gt;&gt; mygenerator = createGenerator() # create a generator
&gt;&gt;&gt; print(mygenerator) # mygenerator is an object!
&lt;generator object createGenerator at 0xb7555c34&gt;
&gt;&gt;&gt; for i in mygenerator:
...     print(i)
0
1
4
</snippet></ROW><ROW><id>231855</id><snippet>yield</snippet></ROW><ROW><id>231855</id><snippet>for</snippet></ROW><ROW><id>231855</id><snippet>for</snippet></ROW><ROW><id>231855</id><snippet>yield</snippet></ROW><ROW><id>231855</id><snippet># Here you create the method of the node object that will return the generator
def node._get_child_candidates(self, distance, min_dist, max_dist):

  # Here is the code that will be called each time you use the generator object:

  # If there is still a child of the node object on its left
  # AND if distance is ok, return the next child
  if self._leftchild and distance - max_dist &lt; self._median:
                yield self._leftchild

  # If there is still a child of the node object on its right
  # AND if distance is ok, return the next child
  if self._rightchild and distance + max_dist &gt;= self._median:
                yield self._rightchild

  # If the function arrives here, the generator will be considered empty
  # there is no more than two values: the left and the right children
</snippet></ROW><ROW><id>231855</id><snippet># Create an empty list and a list with the current object reference
result, candidates = list(), [self]

# Loop on candidates (they contain only one element at the beginning)
while candidates:

    # Get the last candidate and remove it from the list
    node = candidates.pop()

    # Get the distance between obj and the candidate
    distance = node._get_dist(obj)

    # If distance is ok, then you can fill the result
    if distance &lt;= max_dist and distance &gt;= min_dist:
        result.extend(node._values)

    # Add the children of the candidate in the candidates list
    # so the loop will keep running until it will have looked
    # at all the children of the children of the children, etc. of the candidate
    candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))

return result
</snippet></ROW><ROW><id>231855</id><snippet>candidates.extend(node._get_child_candidates(distance, min_dist, max_dist))</snippet></ROW><ROW><id>231855</id><snippet>while</snippet></ROW><ROW><id>231855</id><snippet>extend()</snippet></ROW><ROW><id>231855</id><snippet>&gt;&gt;&gt; a = [1, 2]
&gt;&gt;&gt; b = [3, 4]
&gt;&gt;&gt; a.extend(b)
&gt;&gt;&gt; print(a)
[1, 2, 3, 4]
</snippet></ROW><ROW><id>231855</id><snippet>&gt;&gt;&gt; class Bank(): # let's create a bank, building ATMs
...    crisis = False
...    def create_atm(self):
...        while not self.crisis:
...            yield "$100"
&gt;&gt;&gt; hsbc = Bank() # when everything's ok the ATM gives you as much as you want
&gt;&gt;&gt; corner_street_atm = hsbc.create_atm()
&gt;&gt;&gt; print(corner_street_atm.next())
$100
&gt;&gt;&gt; print(corner_street_atm.next())
$100
&gt;&gt;&gt; print([corner_street_atm.next() for cash in range(5)])
['$100', '$100', '$100', '$100', '$100']
&gt;&gt;&gt; hsbc.crisis = True # crisis is coming, no more money!
&gt;&gt;&gt; print(corner_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; wall_street_atm = hsbc.create_atm() # it's even true for new ATMs
&gt;&gt;&gt; print(wall_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; hsbc.crisis = False # trouble is, even post-crisis the ATM remains empty
&gt;&gt;&gt; print(corner_street_atm.next())
&lt;type 'exceptions.StopIteration'&gt;
&gt;&gt;&gt; brand_new_atm = hsbc.create_atm() # build a new one to get back in business
&gt;&gt;&gt; for cash in brand_new_atm:
...    print cash
$100
$100
$100
$100
$100
$100
$100
$100
$100
...
</snippet></ROW><ROW><id>231855</id><snippet>import itertools</snippet></ROW><ROW><id>231855</id><snippet>&gt;&gt;&gt; horses = [1, 2, 3, 4]
&gt;&gt;&gt; races = itertools.permutations(horses)
&gt;&gt;&gt; print(races)
&lt;itertools.permutations object at 0xb754f1dc&gt;
&gt;&gt;&gt; print(list(itertools.permutations(horses)))
[(1, 2, 3, 4),
 (1, 2, 4, 3),
 (1, 3, 2, 4),
 (1, 3, 4, 2),
 (1, 4, 2, 3),
 (1, 4, 3, 2),
 (2, 1, 3, 4),
 (2, 1, 4, 3),
 (2, 3, 1, 4),
 (2, 3, 4, 1),
 (2, 4, 1, 3),
 (2, 4, 3, 1),
 (3, 1, 2, 4),
 (3, 1, 4, 2),
 (3, 2, 1, 4),
 (3, 2, 4, 1),
 (3, 4, 1, 2),
 (3, 4, 2, 1),
 (4, 1, 2, 3),
 (4, 1, 3, 2),
 (4, 2, 1, 3),
 (4, 2, 3, 1),
 (4, 3, 1, 2),
 (4, 3, 2, 1)]
</snippet></ROW><ROW><id>231855</id><snippet>__iter__()</snippet></ROW><ROW><id>231855</id><snippet>__next__()</snippet></ROW><ROW><id>231871</id><snippet>&gt;&gt;&gt; class Foo( object ):
...     def foo( self ):
...     	print 'FOO!'
...     	
&gt;&gt;&gt; class Bar( Foo ):
...     def foo( self ):
...     	raise AttributeError( "'Bar' object has no attribute 'foo'" )
...     
&gt;&gt;&gt; b = Bar()
&gt;&gt;&gt; b.foo()
Traceback (most recent call last):
  File "&lt;interactive input&gt;", line 1, in &lt;module&gt;
  File "&lt;interactive input&gt;", line 3, in foo
AttributeError: 'Bar' object has no attribute 'foo'
</snippet></ROW><ROW><id>232565</id><snippet>#!/usr/local/bin/python2.4 
import smtplib 
import cherrypy

class InputExample:
   @cherrypy.expose
   def index(self):
       return "&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;a href="contactus"&gt;Contact Us&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;"


        @cherrypy.expose
        def contactus(self,message=''):
                return """
&lt;html&gt;
&lt;head&gt;&lt;title&gt;Contact Us&lt;/title&gt;
&lt;script type="text/javascript"&gt;

   function isNotEmpty(elem)
   {
      var str = elem.value;
      var re = /.+/;
      if (!str.match(re))
      {
         elem.focus();
         return false;
      }
      else
      {
         return true;
      }

   }

   function isEMailAddr(elem)
   {
      var str = elem.value;
      var re = /^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/;
      if (!str.match(re))
      {
         return false;
      }
      else
      {
         return true;
      }
   }

   function validateForm(form)
   {
      if (isNotEmpty(form.firstName) &amp;&amp; isNotEmpty(form.lastName))
      {
         if (isNotEmpty(form.email))
         {
         if (isEMailAddr(form.email))
         {
            if (isNotEmpty(form.captcha))
            {
               if ( form.captcha.value=='egnaro'.split("").reverse().join(""))
               {
                   if (isNotEmpty(form.subject))
                     {
                        alert("All required fields are found.  We will respond shortly.");
                        return true;
                     }
               }
               else
               {
                   alert("Please enter the word as displayed in the image.");
                   return false;
               }
            }//captcha empty
            }
         else
         {
            alert("Please enter a valid email address.");
            return false;
         } //email
         } //email
      } //first and last name
      alert("Please fill in all required fields.");
      return false;
   }

&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;%(message)s&lt;/p&gt;
&lt;form method='POST' action='contactUsSubmitted' onsubmit='return validateForm(this)'&gt;
   &lt;label for="firstName"&gt;First Name: &lt;/label&gt;
   &lt;input type="text" id="firstName" name="firstName" /&gt; (required)&lt;br/&gt;
   &lt;label for="lastName"&gt;Last Name: &lt;/label&gt;
   &lt;input type="text" id="lastName" name="lastName" /&gt; (required)&lt;br/&gt;
   &lt;label for="email"&gt;E-mail address: &lt;/label&gt;
   &lt;input type="text" id="email" name="email" /&gt; (required)&lt;br/&gt;
  &lt;label for="phone"&gt;Phone number: &lt;/label&gt;
   &lt;input type="text" id="phone" name="phone" /&gt; &lt;br/&gt;&lt;br/&gt;

   &lt;!--THIS NEEDS TO BE CHANGED TO MATCH YOUR OWN CAPTCHA SCHEME!! --&gt;
   &lt;label for="captcha"&gt;Enter the word&lt;br /&gt;&lt;img alt="rhymes with.." src="http://www.codinghorror.com/blog/images/word.png" width="99" height="26" border="0" /&gt;&lt;/label&gt;&lt;br /&gt;
(&lt;a href="http://www.codinghorror.com/blog/sounds/captcha-word-spoken.mp3"&gt;hear it spoken&lt;/a&gt;)&lt;br /&gt;
   &lt;input tabindex="3" id="captcha" name="captcha" /&gt;&lt;br /&gt;&lt;br /&gt;

   &lt;label for="subject"&gt;Subject: &lt;/label&gt;
   &lt;input type="text" id="subject" name="subject" /&gt; (required)&lt;br/&gt;
   &lt;label for="body"&gt;Details: &lt;/label&gt;
   &lt;textarea id="body" name="body"&gt;&lt;/textarea&gt;&lt;br/&gt;

&lt;input type='submit' value='Contact Us' /&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;
"""%{'message':message}


        @cherrypy.expose
        def contactUsSubmitted(self, firstName, lastName, email, phone, captcha, subject, body ):
                if captcha[::-1] != 'egnaro':
                        return self.contactus("Please reenter the word you see in the image." )
                self.sendEmail('mail2.example.com','mailbox_account','mailbox_pwd','me@example.com',email,
                     'Website Contact: '+subject, 'Sender Email: ' + email + '\r\n'
                     'Name: ' + firstName + ' ' + lastName + '\r\n' + 'Phone: ' + phone + '\r\n' + body)
                return self.index()

        def sendEmail(self,smtpServer, mailboxName, mailboxPassword, contactEmail,senderEmail,subject,body):
                server = smtplib.SMTP(smtpServer) #'smtp1.example.com')
                server.login(mailboxName, mailboxPassword)

                msg = "To: %(contactEmail)s\r\nFrom: %(senderEmail)s\r\nSubject: %(subject)s\r\nContent-type: text/plain\r\n\r\n%(body)s"
                msg = msg%{'contactEmail':contactEmail,'senderEmail':mailboxName + '@example.com','subject':subject,'body':body}

                server.sendmail(contactEmail, contactEmail, msg) #This is to send it from an internal account to another internal account.
                server.quit()


cherrypy.root = InputExample()
cherrypy.config.update ( file = 'development.conf' )
cherrypy.server.start()
</snippet></ROW><ROW><id>233835</id><snippet>flist = []

for i in xrange(3):
    def funcC(j):
        def func(x): return x * j
        return func
    flist.append(funcC(i))

for f in flist:
    print f(2)
</snippet></ROW><ROW><id>233865</id><snippet>ImportError: No module named _sqlite3
</snippet></ROW><ROW><id>233865</id><snippet>import sys
print sys.path
</snippet></ROW><ROW><id>233865</id><snippet>sys.path.append('/your/dir/here')
</snippet></ROW><ROW><id>233865</id><snippet>import sqlite3
</snippet></ROW><ROW><id>234329</id><snippet>walklevel</snippet></ROW><ROW><id>234329</id><snippet>import os

def walklevel(some_dir, level=1):
    some_dir = some_dir.rstrip(os.path.sep)
    assert os.path.isdir(some_dir)
    num_sep = some_dir.count(os.path.sep)
    for root, dirs, files in os.walk(some_dir):
        yield root, dirs, files
        num_sep_this = root.count(os.path.sep)
        if num_sep + level &lt;= num_sep_this:
            del dirs[:]
</snippet></ROW><ROW><id>234329</id><snippet>os.walk</snippet></ROW><ROW><id>234329</id><snippet>level</snippet></ROW><ROW><id>234995</id><snippet>&gt;&gt;&gt; url.match("test/").groupdict()
{'name': None}
</snippet></ROW><ROW><id>234995</id><snippet>view(request, *groups, **groupdict)
</snippet></ROW><ROW><id>234995</id><snippet>view(request, name = None)
</snippet></ROW><ROW><id>234995</id><snippet>urlpatterns = patterns('',
    (r'^test/(?P&lt;name&gt;.+)$','myview.displayName'), # note the '+' instead of the '*'
    (r'^test/$','myview.displayName'),
)
</snippet></ROW><ROW><id>235475</id><snippet>os</snippet></ROW><ROW><id>235475</id><snippet>os.environ</snippet></ROW><ROW><id>235475</id><snippet>posix</snippet></ROW><ROW><id>235475</id><snippet>.environ</snippet></ROW><ROW><id>237084</id><snippet>import os.path, time
print "last modified: %s" % time.ctime(os.path.getmtime(file))
print "created: %s" % time.ctime(os.path.getctime(file))
</snippet></ROW><ROW><id>237084</id><snippet>import os, time
(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)
print "last modified: %s" % time.ctime(mtime)
</snippet></ROW><ROW><id>237150</id><snippet>__len__()</snippet></ROW><ROW><id>237150</id><snippet>len()</snippet></ROW><ROW><id>237150</id><snippet>__iter__()</snippet></ROW><ROW><id>237150</id><snippet>iter()</snippet></ROW><ROW><id>237193</id><snippet>import Image

def estimate_color(c, bit, c_error):
    c_new= c -  c_error
    if c_new &gt; 127:
        c_bit= bit
        c_error= 255 - c_new
    else:
        c_bit= 0
        c_error= -c_new
    return c_bit, c_error

def image2cga(im):
    "Produce a sequence of CGA pixels from image im"
    im_width= im.size[0]
    for index, (r, g, b) in enumerate(im.getdata()):
        if index % im_width == 0: # start of a line
            r_error= g_error= 0
        r_bit, r_error= estimate_color(r, 1, r_error)
        g_bit, g_error= estimate_color(g, 2, g_error)
        yield r_bit|g_bit

def cvt2cga(imgfn):
    "Convert an RGB image to (K, R, G, Y) CGA image"
    inp_im= Image.open(imgfn) # assume it's RGB
    out_im= Image.new("P", inp_im.size, None)
    out_im.putpalette( (
        0, 0, 0,
        255, 0, 0,
        0, 255, 0,
        255, 255, 0,
    ) )
    out_im.putdata(list(image2cga(inp_im)))
    return out_im

if __name__ == "__main__":
    import sys, os

    for imgfn in sys.argv[1:]:
        im= cvt2cga(imgfn)
        dirname, filename= os.path.split(imgfn)
        name, ext= os.path.splitext(filename)
        newpathname= os.path.join(dirname, "cga-%s.png" % name)
        im.save(newpathname)
</snippet></ROW><ROW><id>237193</id><snippet>image2cga</snippet></ROW><ROW><id>237193</id><snippet>def cga_quantize(image):
    pal_image= Image.new("P", (1,1))
    pal_image.putpalette( (0,0,0, 0,255,0, 255,0,0, 255,255,0) + (0,0,0)*252)
    return image.convert("RGB").quantize(palette=pal_image)
</snippet></ROW><ROW><id>237193</id><snippet>import itertools as it

# setup: create a map with tuples [(0,0,0,0)‥(3,3,3,3)] as keys
# and values [chr(0)‥chr(255)], because PIL does not yet support
# 4 colour palette images

TUPLE2CHAR= {}

# Assume (b7, b6) are pixel0, (b5, b4) are pixel1…
# Call it "big endian"

KEY_BUILDER= [
    (0, 64, 128, 192), # pixel0 value used as index
    (0, 16, 32, 48), # pixel1
    (0, 4, 8, 12), # pixel2
    (0, 1, 2, 3), # pixel3
]
# For "little endian", uncomment the following line
## KEY_BUILDER.reverse()

# python2.6 has itertools.product, but for compatibility purposes
# let's do it verbosely:
for ix0, px0 in enumerate(KEY_BUILDER[0]):
    for ix1, px1 in enumerate(KEY_BUILDER[1]):
        for ix2, px2 in enumerate(KEY_BUILDER[2]):
            for ix3, px3 in enumerate(KEY_BUILDER[3]):
                TUPLE2CHAR[ix0,ix1,ix2,ix3]= chr(px0+px1+px2+px3)

# Another helper function, copied almost verbatim from itertools docs
def grouper(n, iterable, padvalue=None):
    "grouper(3, 'abcdefg', 'x') --&gt; ('a','b','c'), ('d','e','f'), ('g','x','x')"
    return it.izip(*[it.chain(iterable, it.repeat(padvalue, n-1))]*n)

# now the functions
def seq2str(seq):
    """Takes a sequence of [0..3] values and packs them into bytes
    using two bits per value"""
    return ''.join(
        TUPLE2CHAR[four_pixel]
        for four_pixel in grouper(4, seq, 0))

# and the image related function
# Note that the following function is correct,
# but is not useful for Windows 16 colour bitmaps,
# which start at the *bottom* row…
def image2str(img):
    return seq2str(img.getdata())
</snippet></ROW><ROW><id>237243</id><snippet>mark_safe</snippet></ROW><ROW><id>237243</id><snippet>from django.utils.safestring import mark_safe

t = loader.get_template("sometemplate")
c = Context({
   'foo': 'bar',
   'url': mark_safe('http://127.0.0.1/test?a=1&amp;b=2'),
})
print t.render(c)
</snippet></ROW><ROW><id>237243</id><snippet>autoescape</snippet></ROW><ROW><id>237243</id><snippet>Context</snippet></ROW><ROW><id>237243</id><snippet>c = Context({
   'foo': 'bar',
   'url': 'http://127.0.0.1/test?a=1&amp;b=2',
}, autoescape=False)
</snippet></ROW><ROW><id>237858</id><snippet>property()</snippet></ROW><ROW><id>237858</id><snippet>@classmethod</snippet></ROW><ROW><id>237858</id><snippet>property</snippet></ROW><ROW><id>237858</id><snippet>class Foo(object):
    @property
    def age(self):
        return 11

class Bar(Foo):
    @property
    def age(self):
        return 44
</snippet></ROW><ROW><id>237858</id><snippet>setter</snippet></ROW><ROW><id>237858</id><snippet>deleter</snippet></ROW><ROW><id>237858</id><snippet>class C(object):
    @property
    def x(self):
        return self._x

    @x.setter
    def x(self, value):
        self._x = value
</snippet></ROW><ROW><id>237858</id><snippet>class setter(object):
    def __init__(self, prop):
        self.prop = prop
    def __call__(self, setter):
        return property(
            fget=self.prop.fget,
            fset=setter,
            fdel=self.prop.fdel,
            doc=self.prop.__doc__)

class C(object):
    def __init__(self):
        self._age = None

    @property
    def age(self): 
        """My age"""
        return self._age

    @setter(age)
    def age(self, n):
        self._age = n
</snippet></ROW><ROW><id>238111</id><snippet>DEBUG = False</snippet></ROW><ROW><id>238111</id><snippet>ADMINS</snippet></ROW><ROW><id>238111</id><snippet>process_exception()</snippet></ROW><ROW><id>238111</id><snippet>process_exception()</snippet></ROW><ROW><id>238111</id><snippet>got_request_exception</snippet></ROW><ROW><id>238124</id><snippet>split_list = lambda lst: (lst[0], lst[1:])
head, rest = split_list(my_func())
</snippet></ROW><ROW><id>238124</id><snippet>head, *rest = my_func()
</snippet></ROW><ROW><id>238560</id><snippet>self</snippet></ROW><ROW><id>238602</id><snippet>fnmatch</snippet></ROW><ROW><id>238646</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; m = re.compile('(?u)[^\W0-9]\w*')
&gt;&gt;&gt; m.match('a')
&lt;_sre.SRE_Match object at 0xb7d75410&gt;
&gt;&gt;&gt; m.match('9')
&gt;&gt;&gt; m.match('ab')
&lt;_sre.SRE_Match object at 0xb7c258e0&gt;
&gt;&gt;&gt; m.match('a9')
&lt;_sre.SRE_Match object at 0xb7d75410&gt;
&gt;&gt;&gt; m.match('unicöde')
&lt;_sre.SRE_Match object at 0xb7c258e0&gt;
&gt;&gt;&gt; m.match('ödipus')
&lt;_sre.SRE_Match object at 0xb7d75410&gt;
</snippet></ROW><ROW><id>238906</id><snippet>[lib/postgresql83] &gt; variants postgresql83
 postgresql83 has the variants:
    universal
    python: add support for python
    krb5: add support for Kerberos 5 authentication
    perl: add Perl support
</snippet></ROW><ROW><id>238906</id><snippet>universal</snippet></ROW><ROW><id>238906</id><snippet>$ sudo port install postgresql83 +python postgresql-server +python
</snippet></ROW><ROW><id>239041</id><snippet>&gt;&gt;&gt; from ctypes import *
&gt;&gt;&gt; windll.user32.MessageBoxA(None, "Hello world", "ctypes", 0);
</snippet></ROW><ROW><id>239326</id><snippet>&gt;&gt;&gt; a = ['google.com', 'livejournal.com', 'livejournal.com', 'google.com', 'stackoverflow.com']
&gt;&gt;&gt; b = set(a)
&gt;&gt;&gt; b
set(['livejournal.com', 'google.com', 'stackoverflow.com'])
&gt;&gt;&gt;
</snippet></ROW><ROW><id>239326</id><snippet>unique_results</snippet></ROW><ROW><id>239326</id><snippet>unique_results = {}
&gt;&gt;&gt; for item in a:
    unique_results[item] = ''


&gt;&gt;&gt; unique_results
{'livejournal.com': '', 'google.com': '', 'stackoverflow.com': ''}
</snippet></ROW><ROW><id>239422</id><snippet>&gt;&gt;&gt; from xml.etree import ElementTree
&gt;&gt;&gt; help(ElementTree.ElementPath)
&gt;&gt;&gt; root = ElementTree.fromstring("""
&lt;root&gt;&lt;child&gt;One&lt;/child&gt;&lt;child&gt;Two&lt;/child&gt;&lt;child&gt;Three&lt;/child&gt;&lt;/root&gt;
""")
&gt;&gt;&gt; ElementTree.ElementPath.findall(root, "child")
[&lt;Element child at 2ac98c0&gt;, &lt;Element child at 2ac9638&gt;, &lt;Element child at 2ac9518&gt;]
&gt;&gt;&gt; elements = ElementTree.ElementPath.findall(root, "child")
&gt;&gt;&gt; two = [x for x in elements if x.text == "Two"]
&gt;&gt;&gt; two[0].text
'Two'
</snippet></ROW><ROW><id>239929</id><snippet>import StringIO
import sys


sys.stdout = StringIO.StringIO()
print "foo", "bar", "baz"
s = sys.stdout.getvalue()
</snippet></ROW><ROW><id>240205</id><snippet>[x]*3</snippet></ROW><ROW><id>240205</id><snippet>[x, x, x]</snippet></ROW><ROW><id>240205</id><snippet>x</snippet></ROW><ROW><id>240205</id><snippet>x</snippet></ROW><ROW><id>240205</id><snippet>[[1]*4 for n in range(3)]
</snippet></ROW><ROW><id>241430</id><snippet>post_save</snippet></ROW><ROW><id>241430</id><snippet>post_delete</snippet></ROW><ROW><id>241430</id><snippet>Article</snippet></ROW><ROW><id>241430</id><snippet>Question</snippet></ROW><ROW><id>241430</id><snippet>User</snippet></ROW><ROW><id>241430</id><snippet>Question</snippet></ROW><ROW><id>241430</id><snippet>from django.contrib.auth.models import User
from django.db import connection, models, transaction
from django.db.models.signals import post_delete, post_save

class Question(models.Model):
    # ...
    favourite_count = models.PositiveIntegerField(default=0)

class FavouriteQuestion(models.Model):
    question = models.ForeignKey(Question)
    user     = models.ForeignKey(User)

def update_question_favourite_count(instance, **kwargs):
    """
    Updates the favourite count for the Question related to the given
    FavouriteQuestion.
    """
    if kwargs.get('raw', False):
        return
    cursor = connection.cursor()
    cursor.execute(
        'UPDATE soclone_question SET favourite_count = ('
            'SELECT COUNT(*) from soclone_favouritequestion '
            'WHERE soclone_favouritequestion.question_id = soclone_question.id'
        ') '
        'WHERE id = %s', [instance.question_id])
    transaction.commit_unless_managed()

post_save.connect(update_question_favourite_count, sender=FavouriteQuestion)
post_delete.connect(update_question_favourite_count, sender=FavouriteQuestion)

# Very, very naughty
User.add_to_class('favourite_questions',
                  models.ManyToManyField(Question, through=FavouriteQuestion,
                                         related_name='favourited_by'))
</snippet></ROW><ROW><id>242141</id><snippet>def combinations(words, length):
    if length == 0:
        return []
    result = [[word] for word in words]
    while length &gt; 1:
        new_result = []
        for combo in result:
            new_result.extend(combo + [word] for word in words)
        result = new_result[:]
        length -= 1
    return result
</snippet></ROW><ROW><id>242141</id><snippet>number_to_list()</snippet></ROW><ROW><id>242141</id><snippet>def number_to_list(number, words):
    list_out = []
    while number:
        list_out = [number % len(words)] + list_out
        number = number // len(words)
    return [words[n] for n in list_out]
</snippet></ROW><ROW><id>242141</id><snippet>def combinations(words, length):
    numbers = xrange(len(words)**length)
    for number in numbers:
        combo = number_to_list(number, words)
        if len(combo) &lt; length:
            combo = [words[0]] * (length - len(combo)) + combo
        yield combo
</snippet></ROW><ROW><id>242141</id><snippet>&gt;&gt;&gt; list(combinations('01', 3))
[['0', '0', '0'], ['0', '0', '1'],
['0', '1', '0'], ['0', '1', '1'],
['1', '0', '0'], ['1', '0', '1'],
['1', '1', '0'], ['1', '1', '1']]
</snippet></ROW><ROW><id>242141</id><snippet>map(''.join, list(combinations('01', 3)))</snippet></ROW><ROW><id>242141</id><snippet>['000', '001', '010', '011', '100', '101', '110', '111']
</snippet></ROW><ROW><id>242141</id><snippet>fileout = open('filename.txt', 'w')
fileout.writelines(
    ''.join(combo) for combo in combinations('01', 3))
fileout.close()
</snippet></ROW><ROW><id>242226</id><snippet>sed</snippet></ROW><ROW><id>242226</id><snippet>import subprocess
from cStringIO import StringIO

input = StringIO(source_code) # source_code is a string with the source code.
output = StringIO()

process = subprocess.Popen(['sed', '/path/to/remccoms3.sed'],
    input=input, output=output)
return_code = process.wait()

stripped_code = output.getvalue()
</snippet></ROW><ROW><id>242226</id><snippet>source_code</snippet></ROW><ROW><id>242226</id><snippet>stripped_code</snippet></ROW><ROW><id>242226</id><snippet>input</snippet></ROW><ROW><id>242226</id><snippet>output</snippet></ROW><ROW><id>242226</id><snippet>input</snippet></ROW><ROW><id>242226</id><snippet>output</snippet></ROW><ROW><id>242226</id><snippet>remccoms3.sed</snippet></ROW><ROW><id>242226</id><snippet>sed</snippet></ROW><ROW><id>242254</id><snippet>&gt;&gt;&gt; import BeautifulSoup
&gt;&gt;&gt; import urllib2

# Fetch HTML data from url
&gt;&gt;&gt; connection = urllib2.urlopen('http://kuler.adobe.com/path/to/rss.xml')
&gt;&gt;&gt; html_data = connection.read()
&gt;&gt;&gt; connection.close()

# Create and search the soup
&gt;&gt;&gt; soup = BeautifulSoup.BeautifulSoup(html_data)
&gt;&gt;&gt; themes = soup.findAll('kuler:themeitem') # Note: all lower-case element names

# Get the ID of the first theme
&gt;&gt;&gt; themes[0].find('kuler:themeid').contents[0]
u'123456'

# Get an ordered list of the hex colors for the first theme
&gt;&gt;&gt; themeswatches = themes[0].find('kuler:themeswatches')
&gt;&gt;&gt; colors = [color.contents[0] for color in
... themeswatches.findAll('kuler:swatchhexcolor')]
&gt;&gt;&gt; colors
[u'FFFFFF', u'000000']
</snippet></ROW><ROW><id>242514</id><snippet>import pdb, traceback, sys

def bombs():
    a = []
    print a[0]

if __name__ == '__main__':
    try:
        bombs()
    except:
        type, value, tb = sys.exc_info()
        traceback.print_exc()
        pdb.post_mortem(tb)
</snippet></ROW><ROW><id>242514</id><snippet>import traceback, sys, code

def bombs():
    a = []
    print a[0]

if __name__ == '__main__':
    try:
        bombs()
    except:
        type, value, tb = sys.exc_info()
        traceback.print_exc()
        last_frame = lambda tb=tb: last_frame(tb.tb_next) if tb.tb_next else tb
        frame = last_frame().tb_frame
        ns = dict(frame.f_globals)
        ns.update(frame.f_locals)
        code.interact(local=ns)
</snippet></ROW><ROW><id>242515</id><snippet>svnversion</snippet></ROW><ROW><id>242774</id><snippet>import code
code.interact(local=locals())
</snippet></ROW><ROW><id>242774</id><snippet>import pdb
pdb.set_trace()
</snippet></ROW><ROW><id>242774</id><snippet>-i</snippet></ROW><ROW><id>242774</id><snippet>python -i script.py
</snippet></ROW><ROW><id>243239</id><snippet>.bashrc</snippet></ROW><ROW><id>243239</id><snippet>setenv</snippet></ROW><ROW><id>243239</id><snippet>.emacs</snippet></ROW><ROW><id>243239</id><snippet>(setenv "PYTHONPATH" "PATH_STRING_HERE")
</snippet></ROW><ROW><id>243239</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>243239</id><snippet>~/.MacOSX/environment.plist</snippet></ROW><ROW><id>243902</id><snippet>def imerge(a, b):
    for i, j in itertools.izip(a,b):
        yield i
        yield j
</snippet></ROW><ROW><id>244104</id><snippet># let (--) i j = 
    let rec aux n acc =
      if n &lt; i then acc else aux (n-1) (n :: acc)
    in aux j [] ;;
      val ( -- ) : int -&gt; int -&gt; int list = &lt;fun&gt;
# 1--2;;
- : int list = [1; 2]
# 1--5;;
- : int list = [1; 2; 3; 4; 5]
# 5--10;;
- : int list = [5; 6; 7; 8; 9; 10]
</snippet></ROW><ROW><id>244104</id><snippet>[i .. j]</snippet></ROW><ROW><id>244116</id><snippet> nobj.__dict__ = oobj.__dict__.copy()    # just a shallow copy
</snippet></ROW><ROW><id>244116</id><snippet>inspect.getmembers()</snippet></ROW><ROW><id>244551</id><snippet>def mapper(keys, values):
    n = len(keys)
    return [dict(zip(keys, values[i:i + n]))
            for i in range(0, len(values), n)]
</snippet></ROW><ROW><id>245072</id><snippet>unicodedata</snippet></ROW><ROW><id>245072</id><snippet>bisect</snippet></ROW><ROW><id>245072</id><snippet>struct</snippet></ROW><ROW><id>245072</id><snippet>def block(ch):
  '''
  Return the Unicode block name for ch, or None if ch has no block.

  &gt;&gt;&gt; block(u'a')
  'Basic Latin'
  &gt;&gt;&gt; block(unichr(0x0b80))
  'Tamil'
  &gt;&gt;&gt; block(unichr(0xe0080))

  '''

  assert isinstance(ch, unicode) and len(ch) == 1, repr(ch)
  cp = ord(ch)
  for start, end, name in _blocks:
    if start &lt;= cp &lt;= end:
      return name

def _initBlocks(text):
  global _blocks
  _blocks = []
  import re
  pattern = re.compile(r'([0-9A-F]+)\.\.([0-9A-F]+);\ (\S.*\S)')
  for line in text.splitlines():
    m = pattern.match(line)
    if m:
      start, end, name = m.groups()
      _blocks.append((int(start, 16), int(end, 16), name))

# retrieved from http://unicode.org/Public/UNIDATA/Blocks.txt
_initBlocks('''
# Blocks-5.1.0.txt
# Date: 2008-03-20, 17:41:00 PDT [KW]
#
# Unicode Character Database
# Copyright (c) 1991-2008 Unicode, Inc.
# For terms of use, see http://www.unicode.org/terms_of_use.html
# For documentation, see UCD.html
#
# Note:   The casing of block names is not normative.
#         For example, "Basic Latin" and "BASIC LATIN" are equivalent.
#
# Format:
# Start Code..End Code; Block Name

# ================================================

# Note:   When comparing block names, casing, whitespace, hyphens,
#         and underbars are ignored.
#         For example, "Latin Extended-A" and "latin extended a" are equivalent.
#         For more information on the comparison of property values, 
#            see UCD.html.
#
#  All code points not explicitly listed for Block
#  have the value No_Block.

# Property: Block
#
# @missing: 0000..10FFFF; No_Block

0000..007F; Basic Latin
0080..00FF; Latin-1 Supplement
0100..017F; Latin Extended-A
0180..024F; Latin Extended-B
0250..02AF; IPA Extensions
02B0..02FF; Spacing Modifier Letters
0300..036F; Combining Diacritical Marks
0370..03FF; Greek and Coptic
0400..04FF; Cyrillic
0500..052F; Cyrillic Supplement
0530..058F; Armenian
0590..05FF; Hebrew
0600..06FF; Arabic
0700..074F; Syriac
0750..077F; Arabic Supplement
0780..07BF; Thaana
07C0..07FF; NKo
0900..097F; Devanagari
0980..09FF; Bengali
0A00..0A7F; Gurmukhi
0A80..0AFF; Gujarati
0B00..0B7F; Oriya
0B80..0BFF; Tamil
0C00..0C7F; Telugu
0C80..0CFF; Kannada
0D00..0D7F; Malayalam
0D80..0DFF; Sinhala
0E00..0E7F; Thai
0E80..0EFF; Lao
0F00..0FFF; Tibetan
1000..109F; Myanmar
10A0..10FF; Georgian
1100..11FF; Hangul Jamo
1200..137F; Ethiopic
1380..139F; Ethiopic Supplement
13A0..13FF; Cherokee
1400..167F; Unified Canadian Aboriginal Syllabics
1680..169F; Ogham
16A0..16FF; Runic
1700..171F; Tagalog
1720..173F; Hanunoo
1740..175F; Buhid
1760..177F; Tagbanwa
1780..17FF; Khmer
1800..18AF; Mongolian
1900..194F; Limbu
1950..197F; Tai Le
1980..19DF; New Tai Lue
19E0..19FF; Khmer Symbols
1A00..1A1F; Buginese
1B00..1B7F; Balinese
1B80..1BBF; Sundanese
1C00..1C4F; Lepcha
1C50..1C7F; Ol Chiki
1D00..1D7F; Phonetic Extensions
1D80..1DBF; Phonetic Extensions Supplement
1DC0..1DFF; Combining Diacritical Marks Supplement
1E00..1EFF; Latin Extended Additional
1F00..1FFF; Greek Extended
2000..206F; General Punctuation
2070..209F; Superscripts and Subscripts
20A0..20CF; Currency Symbols
20D0..20FF; Combining Diacritical Marks for Symbols
2100..214F; Letterlike Symbols
2150..218F; Number Forms
2190..21FF; Arrows
2200..22FF; Mathematical Operators
2300..23FF; Miscellaneous Technical
2400..243F; Control Pictures
2440..245F; Optical Character Recognition
2460..24FF; Enclosed Alphanumerics
2500..257F; Box Drawing
2580..259F; Block Elements
25A0..25FF; Geometric Shapes
2600..26FF; Miscellaneous Symbols
2700..27BF; Dingbats
27C0..27EF; Miscellaneous Mathematical Symbols-A
27F0..27FF; Supplemental Arrows-A
2800..28FF; Braille Patterns
2900..297F; Supplemental Arrows-B
2980..29FF; Miscellaneous Mathematical Symbols-B
2A00..2AFF; Supplemental Mathematical Operators
2B00..2BFF; Miscellaneous Symbols and Arrows
2C00..2C5F; Glagolitic
2C60..2C7F; Latin Extended-C
2C80..2CFF; Coptic
2D00..2D2F; Georgian Supplement
2D30..2D7F; Tifinagh
2D80..2DDF; Ethiopic Extended
2DE0..2DFF; Cyrillic Extended-A
2E00..2E7F; Supplemental Punctuation
2E80..2EFF; CJK Radicals Supplement
2F00..2FDF; Kangxi Radicals
2FF0..2FFF; Ideographic Description Characters
3000..303F; CJK Symbols and Punctuation
3040..309F; Hiragana
30A0..30FF; Katakana
3100..312F; Bopomofo
3130..318F; Hangul Compatibility Jamo
3190..319F; Kanbun
31A0..31BF; Bopomofo Extended
31C0..31EF; CJK Strokes
31F0..31FF; Katakana Phonetic Extensions
3200..32FF; Enclosed CJK Letters and Months
3300..33FF; CJK Compatibility
3400..4DBF; CJK Unified Ideographs Extension A
4DC0..4DFF; Yijing Hexagram Symbols
4E00..9FFF; CJK Unified Ideographs
A000..A48F; Yi Syllables
A490..A4CF; Yi Radicals
A500..A63F; Vai
A640..A69F; Cyrillic Extended-B
A700..A71F; Modifier Tone Letters
A720..A7FF; Latin Extended-D
A800..A82F; Syloti Nagri
A840..A87F; Phags-pa
A880..A8DF; Saurashtra
A900..A92F; Kayah Li
A930..A95F; Rejang
AA00..AA5F; Cham
AC00..D7AF; Hangul Syllables
D800..DB7F; High Surrogates
DB80..DBFF; High Private Use Surrogates
DC00..DFFF; Low Surrogates
E000..F8FF; Private Use Area
F900..FAFF; CJK Compatibility Ideographs
FB00..FB4F; Alphabetic Presentation Forms
FB50..FDFF; Arabic Presentation Forms-A
FE00..FE0F; Variation Selectors
FE10..FE1F; Vertical Forms
FE20..FE2F; Combining Half Marks
FE30..FE4F; CJK Compatibility Forms
FE50..FE6F; Small Form Variants
FE70..FEFF; Arabic Presentation Forms-B
FF00..FFEF; Halfwidth and Fullwidth Forms
FFF0..FFFF; Specials
10000..1007F; Linear B Syllabary
10080..100FF; Linear B Ideograms
10100..1013F; Aegean Numbers
10140..1018F; Ancient Greek Numbers
10190..101CF; Ancient Symbols
101D0..101FF; Phaistos Disc
10280..1029F; Lycian
102A0..102DF; Carian
10300..1032F; Old Italic
10330..1034F; Gothic
10380..1039F; Ugaritic
103A0..103DF; Old Persian
10400..1044F; Deseret
10450..1047F; Shavian
10480..104AF; Osmanya
10800..1083F; Cypriot Syllabary
10900..1091F; Phoenician
10920..1093F; Lydian
10A00..10A5F; Kharoshthi
12000..123FF; Cuneiform
12400..1247F; Cuneiform Numbers and Punctuation
1D000..1D0FF; Byzantine Musical Symbols
1D100..1D1FF; Musical Symbols
1D200..1D24F; Ancient Greek Musical Notation
1D300..1D35F; Tai Xuan Jing Symbols
1D360..1D37F; Counting Rod Numerals
1D400..1D7FF; Mathematical Alphanumeric Symbols
1F000..1F02F; Mahjong Tiles
1F030..1F09F; Domino Tiles
20000..2A6DF; CJK Unified Ideographs Extension B
2F800..2FA1F; CJK Compatibility Ideographs Supplement
E0000..E007F; Tags
E0100..E01EF; Variation Selectors Supplement
F0000..FFFFF; Supplementary Private Use Area-A
100000..10FFFF; Supplementary Private Use Area-B

# EOF
''')
</snippet></ROW><ROW><id>245208</id><snippet>// f: function that takes a number and returns a number
// deltaX: small positive number
// returns a function that is an approximate derivative of f
function makeDerivative( f, deltaX )
{
    var deriv = function(x)
    { 
       return ( f(x + deltaX) - f(x) )/ deltaX;
    }
    return deriv;
}
var cos = makeDerivative( Math.sin, 0.000001);
// cos(0)     ~&gt; 1
// cos(pi/2)  ~&gt; 0
</snippet></ROW><ROW><id>245581</id><snippet>inspect</snippet></ROW><ROW><id>245581</id><snippet>self.id()</snippet></ROW><ROW><id>245660</id><snippet>.wsgi</snippet></ROW><ROW><id>245797</id><snippet>zip</snippet></ROW><ROW><id>245797</id><snippet>izip</snippet></ROW><ROW><id>245797</id><snippet>range</snippet></ROW><ROW><id>245797</id><snippet>xrange</snippet></ROW><ROW><id>245797</id><snippet>range</snippet></ROW><ROW><id>245797</id><snippet>xrange</snippet></ROW><ROW><id>245797</id><snippet>zip</snippet></ROW><ROW><id>245797</id><snippet>izip</snippet></ROW><ROW><id>245797</id><snippet>list(frob(x) for x in foo)</snippet></ROW><ROW><id>245821</id><snippet>request.FILES['file']</snippet></ROW><ROW><id>245892</id><snippet># Demo to add rotated text to an image using PIL

import Image
import ImageFont, ImageDraw, ImageOps

im=Image.open("stormy100.jpg")

f = ImageFont.load_default()
txt=Image.new('L', (500,50))
d = ImageDraw.Draw(txt)
d.text( (0, 0), "Someplace Near Boulder",  font=f, fill=255)
w=txt.rotate(17.5,  expand=1)

im.paste( ImageOps.colorize(w, (0,0,0), (255,255,84)), (242,60),  w)
</snippet></ROW><ROW><id>246628</id><snippet>A</snippet></ROW><ROW><id>246628</id><snippet>B</snippet></ROW><ROW><id>246628</id><snippet>C</snippet></ROW><ROW><id>246628</id><snippet>t</snippet></ROW><ROW><id>246628</id><snippet>P0 = A * t + (1 - t) * B
P1 = B * t + (1 - t) * C
</snippet></ROW><ROW><id>246628</id><snippet>Pfinal = P0 * t + (1 - t) * P1
</snippet></ROW><ROW><id>246628</id><snippet>dt</snippet></ROW><ROW><id>246628</id><snippet>0 &lt;= t &lt;= 1</snippet></ROW><ROW><id>248080</id><snippet>from win32com.client import Dispatch
xl = Dispatch('Excel.Application')
wb = xl.Workbooks.Open('C:\\Documents and Settings\\GradeBook.xls')
xl.Visible = True    # optional: if you want to see the spreadsheet
</snippet></ROW><ROW><id>248854</id><snippet>def getPermutations(string, prefix=""):
    if len(string) == 1:
        yield prefix + string
    else:
        for i in xrange(len(string)):
            for perm in getPermutations(string[:i] + string[i+1:], prefix+string[i]):
                yield perm
</snippet></ROW><ROW><id>248854</id><snippet>def getPermutations(string):
    if len(string) == 1:
        yield string
    else:
        for i in xrange(len(string)):
            for perm in getPermutations(string[:i] + string[i+1:]):
                yield string[i] + perm
</snippet></ROW><ROW><id>248862</id><snippet>import a_module
print a_module.__file__
</snippet></ROW><ROW><id>248862</id><snippet>import os
path = os.path.dirname(amodule.__file__)
</snippet></ROW><ROW><id>249279</id><snippet>os.rename()</snippet></ROW><ROW><id>249279</id><snippet>os.unlink()</snippet></ROW><ROW><id>249279</id><snippet>shutil</snippet></ROW><ROW><id>249524</id><snippet>urlpatterns = patterns('',
    url(r'^browse/(?P&lt;match&gt;.+)/$', 'app.views.view', name='model_browse'),
)

def view(request, match):
    pieces = match.split('/')
    # even indexed pieces are the names, odd are values
    ...
</snippet></ROW><ROW><id>249650</id><snippet>baselen = len(self.basePath)
return (path[baselen:].replace("/", "\\") for path in paths)
</snippet></ROW><ROW><id>249796</id><snippet>stat()</snippet></ROW><ROW><id>249796</id><snippet>st_dev</snippet></ROW><ROW><id>249796</id><snippet>os.stat</snippet></ROW><ROW><id>250303</id><snippet>import re
p = re.compile("[a-z]")
for m in p.finditer('a1b2c3d4'):
    print m.start(), m.group()
</snippet></ROW><ROW><id>250373</id><snippet>def smart_truncate(content, length=100, suffix='...'):
    if len(content) &lt;= length:
        return content
    else:
        return ' '.join(content[:length+1].split(' ')[0:-1]) + suffix
</snippet></ROW><ROW><id>250395</id><snippet># For each line in the input, add to the database
groups = []
for x in allLinks:
     newGroup = LinkGrouping()
     newGroup.reference = hash
     newGroup.link = x
     groups.append(newGroup)
db.put(groups)
</snippet></ROW><ROW><id>251077</id><snippet>class User(Base):
    __tablename__ = 'users'

    id = Column('id', Integer, primary_key=True)
    addresses = relation("Address", backref="user")

class Address(Base):
    __tablename__ = 'addresses'

    id = Column('id', Integer, primary_key=True)
    user_id = Column('user_id', Integer, ForeignKey('users.id'))
</snippet></ROW><ROW><id>251566</id><snippet>url = NSURL.fileURLWithPath(path)
finder = SBApplication.applicationWithBundleIdentifier("com.apple.Finder")
item = finder.items.objectAtLocation(url)
item.delete
</snippet></ROW><ROW><id>252087</id><snippet>@classmethod
def _product_list(cls):
    """
    return a list containing the one product_id contained in the request URL,
    or a query containing all valid product_ids if not id present in URL

    used to limit the choice of foreign key object to those related to the current product
    """
    id = threadlocals.get_current_product()
    if id is not None:
        return [id]
    else:
        return Product.objects.all().values('pk').query
</snippet></ROW><ROW><id>252087</id><snippet>product = models.ForeignKey(Product, limit_choices_to=dict(id__in=BaseModel._product_list))
</snippet></ROW><ROW><id>252100</id><snippet>import pexpect
child = pexpect.spawn ('sudo mod -p -c noresource -u dtt -Q')
child.expect ('First question:')
child.sendline ('Y')
child.expect ('Second question:')
child.sendline ('Yup')
</snippet></ROW><ROW><id>252473</id><snippet>import ctypes

# Load DLL into memory.

hllDll = ctypes.WinDLL ("c:\\PComm\\ehlapi32.dll")

# Set up prototype and parameters for the desired function call.
# HLLAPI

hllApiProto = ctypes.WINFUNCTYPE (ctypes.c_int,ctypes.c_void_p,
    ctypes.c_void_p, ctypes.c_void_p, ctypes.c_void_p)
hllApiParams = (1, "p1", 0), (1, "p2", 0), (1, "p3",0), (1, "p4",0),

# Actually map the call ("HLLAPI(...)") to a Python name.

hllApi = hllApiProto (("HLLAPI", hllDll), hllApiParams)

# This is how you can actually call the DLL function.
# Set up the variables and call the Python name with them.

p1 = ctypes.c_int (1)
p2 = ctypes.c_char_p (sessionVar)
p3 = ctypes.c_int (1)
p4 = ctypes.c_int (0)
hllApi (ctypes.byref (p1), p2, ctypes.byref (p3), ctypes.byref (p4))
</snippet></ROW><ROW><id>252473</id><snippet>ctypes</snippet></ROW><ROW><id>252473</id><snippet>int</snippet></ROW><ROW><id>252473</id><snippet>char</snippet></ROW><ROW><id>252473</id><snippet>short</snippet></ROW><ROW><id>252473</id><snippet>void*</snippet></ROW><ROW><id>252473</id><snippet>int</snippet></ROW><ROW><id>252473</id><snippet>int</snippet></ROW><ROW><id>252473</id><snippet>ctypes</snippet></ROW><ROW><id>252473</id><snippet>ctypes</snippet></ROW><ROW><id>252473</id><snippet>WINFUNCTYPE</snippet></ROW><ROW><id>252473</id><snippet>hllApiParams</snippet></ROW><ROW><id>252473</id><snippet>ctypes</snippet></ROW><ROW><id>252473</id><snippet>hllApi</snippet></ROW><ROW><id>252473</id><snippet>p1</snippet></ROW><ROW><id>252473</id><snippet>p4</snippet></ROW><ROW><id>252621</id><snippet>/</snippet></ROW><ROW><id>252621</id><snippet>urls.py</snippet></ROW><ROW><id>252621</id><snippet>(r'^admin/(.*)', admin.site.root),
</snippet></ROW><ROW><id>252621</id><snippet>urls.py</snippet></ROW><ROW><id>252711</id><snippet>x = [1, 2, 3]
x.append([4, 5])
print (x)
</snippet></ROW><ROW><id>252711</id><snippet>[1, 2, 3, [4, 5]]</snippet></ROW><ROW><id>252711</id><snippet>x = [1, 2, 3]
x.extend([4, 5])
print (x)
</snippet></ROW><ROW><id>252711</id><snippet>[1, 2, 3, 4, 5]</snippet></ROW><ROW><id>252996</id><snippet>void foo()
{}

void bar()
{
        foo();
}
</snippet></ROW><ROW><id>252996</id><snippet>gccxml a.cc -fxml=a.xml</snippet></ROW><ROW><id>254357</id><snippet>from __future__ import with_statement
with open(filename1) as f1:
   with open(filename2) as f2:
      if f1.read() == f2.read():
         ...
</snippet></ROW><ROW><id>254357</id><snippet>import filecmp
if filecmp.cmp(filename1, filename2, shallow=False):
   ...
</snippet></ROW><ROW><id>254948</id><snippet>from django.core.urlresolvers import reverse

def home_page_view(request):
    NUP={"HOMEPAGE": reverse('named-url-pattern-string-for-my-home-page-view')}    
    variables = RequestContext(request, {'NUP':NUP})
    return render_to_response('home_page.html', variables)
</snippet></ROW><ROW><id>254948</id><snippet>NUP.HOMEPAGE</snippet></ROW><ROW><id>255053</id><snippet>import time, datetime

d = datetime.datetime.now()
print time.mktime(d.timetuple())
</snippet></ROW><ROW><id>255154</id><snippet>sys.stdout.write('h')
sys.stdout.write('m')
</snippet></ROW><ROW><id>255297</id><snippet>my_function.__name__
</snippet></ROW><ROW><id>255297</id><snippet>__name__</snippet></ROW><ROW><id>255297</id><snippet>func_name</snippet></ROW><ROW><id>255297</id><snippet>&gt;&gt;&gt; import time
&gt;&gt;&gt; time.time.func_name
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in ?
AttributeError: 'builtin_function_or_method' object has no attribute 'func_name'
&gt;&gt;&gt; time.time.__name__ 
'time'
</snippet></ROW><ROW><id>255297</id><snippet>__name__</snippet></ROW><ROW><id>255344</id><snippet>[m.groupdict() for m in regex.finditer(search_string)]
</snippet></ROW><ROW><id>255438</id><snippet>dict.pop()</snippet></ROW><ROW><id>255438</id><snippet>&gt;&gt;&gt; {}.pop('test', d=None)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: pop() takes no keyword arguments
</snippet></ROW><ROW><id>255438</id><snippet>*args</snippet></ROW><ROW><id>255438</id><snippet>**kwargs</snippet></ROW><ROW><id>255438</id><snippet>def foo(first, *rest):
    if len(rest) &gt; 1:
        raise TypeError("foo() expected at most 2 arguments, got %d"
                        % (len(rest) + 1))
    print 'first =', first
    if rest:
        print 'second =', rest[0]
</snippet></ROW><ROW><id>255438</id><snippet>**kwargs</snippet></ROW><ROW><id>256260</id><snippet>def import_to_orm(name, save=False, recurse=False):
    if recurse and not save:
        raise ValueError("save must be True if recurse is True")
</snippet></ROW><ROW><id>256260</id><snippet>class BadValueError(ValueError):pass</snippet></ROW><ROW><id>256610</id><snippet>import sys
import pycurl

class Test:
   def __init__(self):
       self.contents = ''

   def body_callback(self, buf):
       self.contents = self.contents + buf

print &gt;&gt;sys.stderr, 'Testing', pycurl.version

t = Test()
c = pycurl.Curl()
c.setopt(c.URL, 'http://curl.haxx.se/dev/')
c.setopt(c.WRITEFUNCTION, t.body_callback)
c.perform()
c.close()

print t.contents
</snippet></ROW><ROW><id>256610</id><snippet>Test()</snippet></ROW><ROW><id>256610</id><snippet>c.setopt(c.WRITEFUNCTION, t.body_callback)</snippet></ROW><ROW><id>256610</id><snippet>buf</snippet></ROW><ROW><id>256610</id><snippet>print t.contents
</snippet></ROW><ROW><id>256614</id><snippet>require</snippet></ROW><ROW><id>256614</id><snippet>require</snippet></ROW><ROW><id>257582</id><snippet>class Model(object):
  ...
  def transaction_start(self):
    return Redland.librdf_model_transaction_start(self._model)
</snippet></ROW><ROW><id>257614</id><snippet>cursor.execute("INSERT INTO releases (date, cat, name) VALUES ('%s', '%s', '%s')" % (timestring, y[4], y[7]))
</snippet></ROW><ROW><id>257614</id><snippet>cursor.execute('INSERT INTO releases (date, cat, name) VALUES (%s, %s, %s)', (timestring, y[4], y[7]))
</snippet></ROW><ROW><id>258274</id><snippet>from types import MethodType

class PrePostCaller:
    def __init__(self, other):
        self.other = other

    def pre(self): print 'pre'
    def post(self): print 'post'

    def __getattr__(self, name):
        if hasattr(self.other, name):
            func = getattr(self.other, name)
            return lambda *args, **kwargs: self._wrap(func, args, kwargs)
        raise AttributeError(name)

    def _wrap(self, func, args, kwargs):
        self.pre()
        if type(func) == MethodType:
            result = func( *args, **kwargs)
        else:
            result = func(self.other, *args, **kwargs)
        self.post()
        return result

#Examples of use
class Foo:
    def stuff(self):
        print 'stuff'

a = PrePostCaller(Foo())
a.stuff()

a = PrePostCaller([1,2,3])
print a.count()
</snippet></ROW><ROW><id>258274</id><snippet>pre
stuff
post
pre
post
0
</snippet></ROW><ROW><id>258310</id><snippet>extra</snippet></ROW><ROW><id>258310</id><snippet>A.objects.extra(
    select={
        'b_count': 'SELECT COUNT(*) FROM yourapp_b WHERE yourapp_b.a_id = yourapp_a.id',
    },
    where=['b_count &lt; 2']
)
</snippet></ROW><ROW><id>258310</id><snippet>from django.db import connection, transaction
from django.db.models.signals import post_delete, post_save

def update_b_count(instance, **kwargs):
    """
    Updates the B count for the A related to the given B.
    """
    if not kwargs.get('created', True) or kwargs.get('raw', False):
        return
    cursor = connection.cursor()
    cursor.execute(
        'UPDATE yourapp_a SET b_count = ('
            'SELECT COUNT(*) FROM yourapp_b '
            'WHERE yourapp_b.a_id = yourapp_a.id'
        ') '
        'WHERE id = %s', [instance.a_id])
    transaction.commit_unless_managed()

post_save.connect(update_b_count, sender=B)
post_delete.connect(update_b_count, sender=B)
</snippet></ROW><ROW><id>258310</id><snippet>B.objects.create(a=some_a)
if some_a.hidden and some_a.b_set.count() &gt; 1:
    A.objects.filter(id=some_a.id).update(hidden=False)

...

some_a = b.a
some_b.delete()
if not some_a.hidden and some_a.b_set.count() &lt; 2:
    A.objects.filter(id=some_a.id).update(hidden=True)
</snippet></ROW><ROW><id>258415</id><snippet>list2= [line for line in file if 'CONTENT_ITEM_ID' in line]
</snippet></ROW><ROW><id>258511</id><snippet>"""
dumpimages.py
    Downloads all the images on the supplied URL, and saves them to the
    specified output file ("/test/" by default)

Usage:
    python dumpimages.py http://example.com/ [output]
"""

from BeautifulSoup import BeautifulSoup as bs
import urlparse
from urllib2 import urlopen
from urllib import urlretrieve
import os
import sys

def main(url, out_folder="/test/"):
    """Downloads all the images at 'url' to /test/"""
    soup = bs(urlopen(url))
    parsed = list(urlparse.urlparse(url))

    for image in soup.findAll("img"):
        print "Image: %(src)s" % image
        filename = image["src"].split("/")[-1]
        parsed[2] = image["src"]
        outpath = os.path.join(out_folder, filename)
        if image["src"].lower().startswith("http"):
            urlretrieve(image["src"], outpath)
        else:
            urlretrieve(urlparse.urlunparse(parsed), outpath)

def _usage():
    print "usage: python dumpimages.py http://example.com [outpath]"

if __name__ == "__main__":
    url = sys.argv[-1]
    out_folder = "/test/"
    if not url.lower().startswith("http"):
        out_folder = sys.argv[-1]
        url = sys.argv[-2]
        if not url.lower().startswith("http"):
            _usage()
            sys.exit(-1)
    main(url, out_folder)
</snippet></ROW><ROW><id>258930</id><snippet>try:
    raise "something failed", (42, "some other details")
except "something failed", args:
    errCode, msg = args
    print "something failed.  error code %d: %s" % (errCode, msg)
</snippet></ROW><ROW><id>258930</id><snippet>&gt;&gt;&gt; list(Exception("test"))
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: 'Exception' object is not iterable
</snippet></ROW><ROW><id>259077</id><snippet>class Entry(models.Model):
   id = models.AutoField(verbose_name="custom name")
   # and other fields...
</snippet></ROW><ROW><id>259159</id><snippet>import urlparse

def process_url(url, keep_params=('CONTENT_ITEM_ID=',)):
    parsed= urlparse.urlsplit(url)
    filtered_query= '&amp;'.join(
        qry_item
        for qry_item in parsed.query.split('&amp;')
        if qry_item.startswith(keep_params))
    return urlparse.urlunsplit(parsed[:3] + (filtered_query,) + parsed[4:])
</snippet></ROW><ROW><id>259159</id><snippet>&gt;&gt;&gt; process_url(a)
'http://www.domainname.com/page?CONTENT_ITEM_ID=1234'
</snippet></ROW><ROW><id>259159</id><snippet>&gt;&gt;&gt; url='http://www.domainname.com/page?other_value=xx&amp;param3&amp;CONTENT_ITEM_ID=1234&amp;param1'
&gt;&gt;&gt; process_url(url, ('CONTENT_ITEM_ID', 'other_value'))
'http://www.domainname.com/page?other_value=xx&amp;CONTENT_ITEM_ID=1234'
</snippet></ROW><ROW><id>259266</id><snippet>test = list('asdf')
[function(x) for x in test]
</snippet></ROW><ROW><id>259266</id><snippet>test = list('asdf')
map(function, test)
</snippet></ROW><ROW><id>259266</id><snippet>map</snippet></ROW><ROW><id>259404</id><snippet>web2py.exe -S yourappname -M
</snippet></ROW><ROW><id>259521</id><snippet>scipy</snippet></ROW><ROW><id>259521</id><snippet>numpy</snippet></ROW><ROW><id>259729</id><snippet>super(ConstParser, self).__init__(defaults)
</snippet></ROW><ROW><id>259729</id><snippet>SafeConfigParser.__init__(self, defaults)
</snippet></ROW><ROW><id>260352</id><snippet># Tail
from __future__ import with_statement

find_str = "FIREFOX"                    # String to find
fname = "g:/autoIt/ActiveWin.log_2"     # File to check

with open(fname, "r") as f:
    f.seek (0, 2)           # Seek @ EOF
    fsize = f.tell()        # Get Size
    f.seek (max (fsize-1024, 0), 0) # Set pos @ last n chars
    lines = f.readlines()       # Read to end

lines = lines[-10:]    # Get last 10 lines

# This returns True if any line is exactly find_str + "\n"
print find_str + "\n" in lines

# If you're searching for a substring
for line in lines:
    if find_str in line:
        print True
        break
</snippet></ROW><ROW><id>261191</id><snippet>__dict__</snippet></ROW><ROW><id>261665</id><snippet>l = [
('a', 1),
('a', 2),
('a', 3),
('b', 1),
('b', 2),
('c', 1),
]

d = {}
for x, y in l:
    d.setdefault(x, []).append(y)
print d
</snippet></ROW><ROW><id>261665</id><snippet>{'a': [1, 2, 3], 'c': [1], 'b': [1, 2]}
</snippet></ROW><ROW><id>263068</id><snippet>/bin/bash -i</snippet></ROW><ROW><id>263330</id><snippet>decode</snippet></ROW><ROW><id>263330</id><snippet>#!/usr/bin/env python
# -*- coding: utf-8 -*-
import wx

app = wx.PySimpleApp()
app.TopWindow = wx.Frame(None)
field = wx.TextCtrl(app.TopWindow)
field.Value += '°'.decode('ISO8859-1')
app.TopWindow.Show()
app.MainLoop()
</snippet></ROW><ROW><id>263465</id><snippet>[sum(a) for a in zip(*array)]
</snippet></ROW><ROW><id>263652</id><snippet>[1,2].zip([3,4]) =&gt; [[1,3],[2,4]]
</snippet></ROW><ROW><id>263652</id><snippet>a.zip(b).all? {|pair| pair[0] === pair[1]}
</snippet></ROW><ROW><id>263652</id><snippet>a.zip(b).all? {|a,b| a === b }
</snippet></ROW><ROW><id>263675</id><snippet>SCENARIO MyScenario
DELAY 1
COUNT 1 ADD 1
DIRECT_POWER 23, False, 150
WAIT 3
...
END_SCENARIO
</snippet></ROW><ROW><id>263675</id><snippet>scenario :: 'SCENARIO' label newline _cmds END_SCENARIO
cmds::  _delay or _count or _direct_power or...
delay:: 'DELAY' number
</snippet></ROW><ROW><id>263675</id><snippet>def scenario():
    match_word('SCENARIO')
    scenario_name = match_label()
    emit('var scenario = new Scenario();')
    cmds()
    match_word('END_SCENARIO')
    emit('byte[] ' + scenario_name + ' = scenario.Compile();')

def delay():
    match_word('DELAY')
    length = match_number()
    emit('scenario.Add(new DelayCommand('+ length +'))')

def cmds():
    word = peek_next_word()
    if word == 'DELAY':
       delay()
    elif ...
</snippet></ROW><ROW><id>263881</id><snippet>compileit.cmd
  call C:\Program Files\Microsoft Visual Studio 9.0\VC\vcvarsall.bat
  devenv $1.sln /rebuild Debug /Out last-build.txt
</snippet></ROW><ROW><id>264165</id><snippet>def foobar()
  return ExampleFoo.new().foo().bar()
end
</snippet></ROW><ROW><id>264303</id><snippet>write32u(self.fileobj, long(time.time()))
</snippet></ROW><ROW><id>264303</id><snippet>_write_gzip_header</snippet></ROW><ROW><id>264303</id><snippet>class FakeTime:
    def time(self):
        return 1225856967.109

import gzip
gzip.time = FakeTime()

# Now call gzip, it will think time doesn't change!
</snippet></ROW><ROW><id>264303</id><snippet>class GzipTimeFixingFile:
    def __init__(self, realfile):
        self.realfile = realfile
        self.pos = 0

    def write(self, bytes):
        if self.pos == 4 and len(bytes) == 4:
            self.realfile.write("XYZY")  # Fake time goes here.
        else:
            self.realfile.write(bytes)
        self.pos += len(bytes)
</snippet></ROW><ROW><id>264592</id><snippet>&gt;&gt;&gt; x_present = [4,5,6]
&gt;&gt;&gt;
&gt;&gt;&gt; x_past = x_present
&gt;&gt;&gt;
&gt;&gt;&gt; x_past
[4, 5, 6]
&gt;&gt;&gt;
&gt;&gt;&gt; x_present.append(7)
&gt;&gt;&gt;
&gt;&gt;&gt; x_past
[4, 5, 6, 7]
&gt;&gt;&gt;
</snippet></ROW><ROW><id>264592</id><snippet>&gt;&gt;&gt; x_past = x_present[:]
&gt;&gt;&gt; x_past
[4, 5, 6, 7]
&gt;&gt;&gt;
&gt;&gt;&gt; x_present.append(8)
&gt;&gt;&gt;
&gt;&gt;&gt; x_past
[4, 5, 6, 7]
</snippet></ROW><ROW><id>265741</id><snippet>import socket

timeout = 10
socket.setdefaulttimeout(timeout)
</snippet></ROW><ROW><id>266010</id><snippet>SERVER</snippet></ROW><ROW><id>266010</id><snippet>SERVERKEY</snippet></ROW><ROW><id>266010</id><snippet>COMMAND</snippet></ROW><ROW><id>266010</id><snippet>\S+</snippet></ROW><ROW><id>266010</id><snippet>FOLDERPATH</snippet></ROW><ROW><id>266010</id><snippet>/.*?</snippet></ROW><ROW><id>266010</id><snippet>RETENTION</snippet></ROW><ROW><id>266010</id><snippet>\d+</snippet></ROW><ROW><id>266010</id><snippet>TRANSFERMODE</snippet></ROW><ROW><id>266010</id><snippet>\S+</snippet></ROW><ROW><id>266010</id><snippet>OUTPUTPATH</snippet></ROW><ROW><id>266010</id><snippet>[A-Z]:\\.*?\\</snippet></ROW><ROW><id>266010</id><snippet>LOGTO</snippet></ROW><ROW><id>266010</id><snippet>NO</snippet></ROW><ROW><id>266010</id><snippet>[A-Z]:\\.*?</snippet></ROW><ROW><id>266010</id><snippet>MAXSIZE</snippet></ROW><ROW><id>266010</id><snippet>OFFSET</snippet></ROW><ROW><id>266010</id><snippet>\d+</snippet></ROW><ROW><id>266010</id><snippet>^\s*
(?P&lt;SERVER&gt;\S+)\s+
(?P&lt;SERVERKEY&gt;\S+)\s+
(?P&lt;COMMAND&gt;\S+)\s+
(?P&lt;FOLDERPATH&gt;/.*?)\s+   # Slash not that important, but should start with non-whitespace
(?P&lt;RETENTION&gt;\d+)\s+
(?P&lt;TRANSFERMODE&gt;\S+)\s+
(?P&lt;OUTPUTPATH&gt;[A-Z]:\\.*?\\)\s+   # Could also support network paths
(?P&lt;LOGTO&gt;NO|[A-Z]:\\.*?)
(?:
  \s+(?P&lt;MAXSIZE&gt;\d+)
  (?:
    \s+(?P&lt;OFFSET&gt;\d+)
  )?
)?
\s*$
</snippet></ROW><ROW><id>266010</id><snippet>^\s*(?P&lt;SERVER&gt;\S+)\s+(?P&lt;SERVERKEY&gt;\S+)\s+(?P&lt;COMMAND&gt;\S+)\s+(?P&lt;FOLDERPATH&gt;/.*?)\s+(?P&lt;RETENTION&gt;\d+)\s+(?P&lt;TRANSFERMODE&gt;\S+)\s+(?P&lt;OUTPUTPATH&gt;[A-Z]:\\.*?\\)\s+(?P&lt;LOGTO&gt;NO|[A-Z]:\\.*?)(?:\s+(?P&lt;MAXSIZE&gt;\d+)(?:\s+(?P&lt;OFFSET&gt;\d+))?)?\s*$
</snippet></ROW><ROW><id>266010</id><snippet>&gt;&gt;&gt; import re
&gt;&gt;&gt; p = re.compile(r'^(?P&lt;SERVER&gt;\S+)\s+(?P&lt;SERVERKEY&gt;\S+)\s+(?P&lt;COMMAND&gt;\S+)\s+(?P&lt;FOLDERPATH&gt;/.*?)\s+(?P&lt;RETENTION&gt;\d+)\s+(?P&lt;TRANSFERMODE&gt;\S+)\s+(?P&lt;OUTPUTPATH&gt;[A-Z]:\\.*?\\)\s+(?P&lt;LOGTO&gt;NO|[A-Z]:\\.*?)(?:\s+(?P&lt;MAXSIZE&gt;\d+)(?:\s+(?P&lt;OFFSET&gt;\d+))?)?\s*$',re.M)
&gt;&gt;&gt; data = r"""loveserver love copy /muffin* 20 bin C:\Puppies\ NO 256 300
... loveserver love copy /muffin* 20 bin C:\Puppies\ NO 256
... loveserver love copy /hats* 300 ascii C:\Puppies\no\ C:\log\love.log 256"""
&gt;&gt;&gt; import pprint
&gt;&gt;&gt; for match in p.finditer(data):
...   print pprint.pprint(match.groupdict())
...
{'COMMAND': 'copy',
 'FOLDERPATH': '/muffin*',
 'LOGTO': 'NO',
 'MAXSIZE': '256',
 'OFFSET': '300',
 'OUTPUTPATH': 'C:\\Puppies\\',
 'RETENTION': '20',
 'SERVER': 'loveserver',
 'SERVERKEY': 'love',
 'TRANSFERMODE': 'bin'}
{'COMMAND': 'copy',
 'FOLDERPATH': '/muffin*',
 'LOGTO': 'NO',
 'MAXSIZE': '256',
 'OFFSET': None,
 'OUTPUTPATH': 'C:\\Puppies\\',
 'RETENTION': '20',
 'SERVER': 'loveserver',
 'SERVERKEY': 'love',
 'TRANSFERMODE': 'bin'}
{'COMMAND': 'copy',
 'FOLDERPATH': '/hats*',
 'LOGTO': 'C:\\log\\love.log',
 'MAXSIZE': '256',
 'OFFSET': None,
 'OUTPUTPATH': 'C:\\Puppies\\no\\',
 'RETENTION': '300',
 'SERVER': 'loveserver',
 'SERVERKEY': 'love',
 'TRANSFERMODE': 'ascii'}
&gt;&gt;&gt;
</snippet></ROW><ROW><id>266162</id><snippet>exclude = set(string.punctuation)
s = ''.join(ch for ch in s if ch not in exclude)
</snippet></ROW><ROW><id>266162</id><snippet>import re, string, timeit

s = "string. With. Punctuation"
exclude = set(string.punctuation)
table = string.maketrans("","")
regex = re.compile('[%s]' % re.escape(string.punctuation))

def test_set(s):
    return ''.join(ch for ch in s if ch not in exclude)

def test_re(s):  # From Vinko's solution, with fix.
    return regex.sub('', s)

def test_trans(s):
    return s.translate(table, string.punctuation)

def test_repl(s):  # From S.Lott's solution
    for c in string.punctuation:
        s=s.replace(c,"")
    return s

print "sets      :",timeit.Timer('f(s)', 'from __main__ import s,test_set as f').timeit(1000000)
print "regex     :",timeit.Timer('f(s)', 'from __main__ import s,test_re as f').timeit(1000000)
print "translate :",timeit.Timer('f(s)', 'from __main__ import s,test_trans as f').timeit(1000000)
print "replace   :",timeit.Timer('f(s)', 'from __main__ import s,test_repl as f').timeit(1000000)
</snippet></ROW><ROW><id>266162</id><snippet>sets      : 19.8566138744
regex     : 6.86155414581
translate : 2.12455511093
replace   : 28.4436721802
</snippet></ROW><ROW><id>266731</id><snippet>Start Marker  | JFIF Marker | Header Length | Identifier
0xff, 0xd8    | 0xff, 0xe0  |    2-bytes    | "JFIF\0"
</snippet></ROW><ROW><id>266731</id><snippet>def is_jpg(filename):
    data = open(filename,'rb').read(11)
    if data[:4] != '\xff\xd8\xff\xe0': return False
    if data[6:] != 'JFIF\0': return False
    return True
</snippet></ROW><ROW><id>266731</id><snippet>from PIL import Image
def is_jpg(filename):
    try:
        i=Image.open(filename)
        return i.format =='JPEG'
    except IOError:
        return False
</snippet></ROW><ROW><id>267475</id><snippet>&gt;&gt;&gt; s = '\u003cfoo/\u003e'
&gt;&gt;&gt; s.decode( 'unicode-escape' )
u'&lt;foo/&gt;'
&gt;&gt;&gt; s.decode( 'unicode-escape' ).encode( 'ascii' )
'&lt;foo/&gt;'
</snippet></ROW><ROW><id>268101</id><snippet>$ unzip MySQL_python-1.2.2-py2.5-linux-i686.egg
</snippet></ROW><ROW><id>268285</id><snippet>operator.itemgetter</snippet></ROW><ROW><id>268285</id><snippet>import operator
stats = {'a':1000, 'b':3000, 'c': 100}
max(stats.iteritems(), key=operator.itemgetter(1))[0]
</snippet></ROW><ROW><id>268285</id><snippet>stats.iteritems()</snippet></ROW><ROW><id>268285</id><snippet>key</snippet></ROW><ROW><id>268285</id><snippet>max()</snippet></ROW><ROW><id>268660</id><snippet>def serve_forever(self):
    """Handle one request at a time until doomsday."""
    while 1:
        self.handle_request()
</snippet></ROW><ROW><id>268660</id><snippet>while 1</snippet></ROW><ROW><id>268660</id><snippet>while self.should_be_running</snippet></ROW><ROW><id>268660</id><snippet>def stop_serving_forever(self):
    """Stop handling requests"""
    self.should_be_running = 0
    # Make a fake request to the server, to really force it to stop.
    # Otherwise it will just stop on the next request.
    # (Exercise for the reader.)
    self.make_a_fake_request_to_myself()
</snippet></ROW><ROW><id>268660</id><snippet>class StoppableRPCServer(SimpleXMLRPCServer.SimpleXMLRPCServer):

    stopped = False
    allow_reuse_address = True

    def __init__(self, *args, **kw):
        SimpleXMLRPCServer.SimpleXMLRPCServer.__init__(self, *args, **kw)
        self.register_function(lambda: 'OK', 'ping')

    def serve_forever(self):
        while not self.stopped:
            self.handle_request()

    def force_stop(self):
        self.server_close()
        self.stopped = True
        self.create_dummy_request()

    def create_dummy_request(self):
        server = xmlrpclib.Server('http://%s:%s' % self.server_address)
        server.ping()
</snippet></ROW><ROW><id>269043</id><snippet>for arr in mydict.values():
    for i, s in enumerate(arr):
        if s == 'example':
            arr[i] = 'someotherword'
</snippet></ROW><ROW><id>269825</id><snippet>themodule.__file__</snippet></ROW><ROW><id>269825</id><snippet>datetime.__file__</snippet></ROW><ROW><id>269825</id><snippet>datetime.__file__</snippet></ROW><ROW><id>269825</id><snippet>Python-2.6/Modules/datetimemodule.c
</snippet></ROW><ROW><id>270143</id><snippet>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;
#include &lt;cctype&gt;

bool starts_with(const std::string &amp;s1, const std::string &amp;s2) {
    return (s1.length() &lt;= s2.length()) &amp;&amp; (s2.substr(0, s1.length()) == s1);
}

bool ends_with(const std::string &amp;s1, const std::string &amp;s2) {
    return (s1.length() &lt;= s2.length()) &amp;&amp; (s2.substr(s2.length() - s1.length()) == s1);
}

bool is_numeric(const std::string &amp;s) {
    for(std::string::const_iterator it = s.begin(); it != s.end(); ++it) {
        if(!std::isdigit(*it)) {
                return false;
        }
    }
    return true;
}

bool varies_in_single_number_field(std::string s1, std::string s2) {

    size_t index1 = 0;
    size_t index2 = s1.length() - 1;

    if(s1 == s2) {
        return false;
    }

    if((s1.empty() &amp;&amp; is_numeric(s2)) || (s2.empty() &amp;&amp; is_numeric(s1))) {
    	return true;
    }

    if(s1.length() &lt; s2.length()) {
    	s1.swap(s2);
    }

    while(index1 &lt; s1.length() &amp;&amp; starts_with(s1.substr(0, index1), s2)) { index1++; }
    while(ends_with(s1.substr(index2), s2)) { index2--; }

    return is_numeric(s1.substr(index1 - 1, (index2 + 1) - (index1 - 1)));

}

int main() {
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("foo7bar00", "foo123bar00") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("foo7bar00", "foo123bar01") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("foobar00", "foo123bar00") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("foobar00", "foobar00") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("7aaa", "aaa") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("aaa7", "aaa") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("aaa", "7aaa") &lt;&lt; std::endl;
    std::cout &lt;&lt; std::boolalpha &lt;&lt; varies_in_single_number_field("aaa", "aaa7") &lt;&lt; std::endl;
}
</snippet></ROW><ROW><id>270538</id><snippet>#!/usr/bin/python -u
import libxml2
import sys

# Memory debug specific
libxml2.debugMemory(1)

dtd="""&lt;!ELEMENT foo EMPTY&gt;"""
instance="""&lt;?xml version="1.0"?&gt;
&lt;foo&gt;&lt;/foo&gt;"""

dtd = libxml2.parseDTD(None, 'test.dtd')
ctxt = libxml2.newValidCtxt()
doc = libxml2.parseDoc(instance)
ret = doc.validateDtd(ctxt, dtd)
if ret != 1:
    print "error doing DTD validation"
    sys.exit(1)

doc.freeDoc()
dtd.freeDtd()
del dtd
del ctxt
</snippet></ROW><ROW><id>270670</id><snippet>import hashlib
from base64 import b64decode, b64encode

def utf16tobin(s):
  return s.encode('hex')[4:].decode('hex')

b64salt = "kDP0Py2QwEdJYtUX9cJABg=="
b64hash = "OJF6H4KdxFLgLu+oTDNFodCEfMA="
binsalt = b64decode(b64salt)
password_string = 'password'.encode("utf16")
password_string = utf16tobin(password_string)

m1 = hashlib.sha1()
# Pass in salt
m1.update(binsalt + password_string)
# Pass in password
# B64 encode the binary digest
if b64encode(m1.digest()) == b64hash:
    print "Logged in!"
else:
    print "Didn't match"
    print b64hash
    print b64encode(m1.digest())
</snippet></ROW><ROW><id>271023</id><snippet>urllib2</snippet></ROW><ROW><id>271023</id><snippet>opener</snippet></ROW><ROW><id>271023</id><snippet>opener</snippet></ROW><ROW><id>271023</id><snippet>&gt;&gt;&gt; no_proxy = urllib2.ProxyHandler({})
&gt;&gt;&gt; opener = urllib2.build_opener(no_proxy)
&gt;&gt;&gt; urllib2.install_opener(opener)
</snippet></ROW><ROW><id>271023</id><snippet>exclusion_list = ['http://www.google.com/', 'http://localhost/']

no_proxy = urllib2.ProxyHandler({})
no_proxy_opener = urllib2.build_opener(no_proxy)

default_proxy_opener = urllib2.build_opener()

url = 'http://www.example.com/'

if url in exclusion_list:
    opener = no_proxy_opener
else:
    opener = default_proxy_opener

page = opener.open(url)
print page
</snippet></ROW><ROW><id>271128</id><snippet>[ (Product_Type_1, ( product_1, product_2 )),
   (Product_Type_2, ( product_3, product_4 )) ]
</snippet></ROW><ROW><id>271128</id><snippet>{% for product_type, products in product_type_list %}
    {{ product_type }}
    {% for product in products %}
        {{ product }}
    {% endfor %}
{% endfor %}
</snippet></ROW><ROW><id>271642</id><snippet>char const* greet()
{
  return "hello, world";
}
</snippet></ROW><ROW><id>271642</id><snippet>#include &lt;boost/python.hpp&gt;

BOOST_PYTHON_MODULE(hello_ext)
{
  using namespace boost::python;
  def("greet", greet);
}
</snippet></ROW><ROW><id>271642</id><snippet>&gt;&gt;&gt; import hello_ext
&gt;&gt;&gt; print hello.greet()
hello, world
</snippet></ROW><ROW><id>271832</id><snippet>Content-Transfer-Encoding</snippet></ROW><ROW><id>271832</id><snippet>Content-Transfer-Encoding</snippet></ROW><ROW><id>271832</id><snippet>=?gb2312?B?uLGxvmhlbrixsb5nLnhscw==?=
</snippet></ROW><ROW><id>271832</id><snippet>email.header.decode_header</snippet></ROW><ROW><id>271832</id><snippet>import email.header
x= '=?gb2312?B?uLGxvmhlbrixsb5nLnhscw==?='
try:
    name= u''.join([
        unicode(b, e or 'ascii') for b, e in email.header.decode_header(x)
    ])
except email.Errors.HeaderParseError:
    pass # leave name as it was
</snippet></ROW><ROW><id>271832</id><snippet>Content-Type: application/vnd.ms-excel;
 name="=?gb2312?B?uLGxvmhlbrixsb5nLnhscw==?="
</snippet></ROW><ROW><id>271832</id><snippet>'=?'</snippet></ROW><ROW><id>271832</id><snippet>=?gb2312?B?uLGxvmhlbrixsb5nLnhscw==?=</snippet></ROW><ROW><id>271860</id><snippet>import urllib2
from BeautifulSoup import BeautifulSoup

page = urllib2.urlopen("http://www.icc-ccs.org/prc/piracyreport.php")
soup = BeautifulSoup(page)
for incident in soup('td', width="90%"):
    where, linebreak, what = incident.contents[:3]
    print where.strip()
    print what.strip()
    print
</snippet></ROW><ROW><id>272283</id><snippet>ipy '-X:ColorfulConsole'
</snippet></ROW><ROW><id>272283</id><snippet>ipy -X: ColorfulConsole
</snippet></ROW><ROW><id>272283</id><snippet>File -X: does not exist</snippet></ROW><ROW><id>273111</id><snippet>(gdb) print PyRun_SimpleString("import traceback; traceback.print_stack()")
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/var/tmp/foo.py", line 2, in &lt;module&gt;
    i**2
  File "&lt;string&gt;", line 1, in &lt;module&gt;
$1 = 0
</snippet></ROW><ROW><id>273111</id><snippet>pystack</snippet></ROW><ROW><id>273111</id><snippet>valgrind</snippet></ROW><ROW><id>273227</id><snippet>os.path.exists</snippet></ROW><ROW><id>273227</id><snippet>os.makedirs</snippet></ROW><ROW><id>273227</id><snippet>if not os.path.exists(directory):
    os.makedirs(directory)
</snippet></ROW><ROW><id>273227</id><snippet>os.path.exists</snippet></ROW><ROW><id>273227</id><snippet>os.makedirs</snippet></ROW><ROW><id>273227</id><snippet>os.makedirs</snippet></ROW><ROW><id>273227</id><snippet>OSError</snippet></ROW><ROW><id>273227</id><snippet>OSError</snippet></ROW><ROW><id>273227</id><snippet>OSError</snippet></ROW><ROW><id>273227</id><snippet>os.path.exists</snippet></ROW><ROW><id>273618</id><snippet>while True:
    func()
    answer = raw_input( "Loop again? " )
    if answer != 'y':
        break
</snippet></ROW><ROW><id>273631</id><snippet>def decode(s, encodings=('ascii', 'utf8', 'latin1')):
    for encoding in encodings:
    	try:
    		return s.decode(encoding)
    	except UnicodeDecodeError:
    		pass
    return s.decode('ascii', 'ignore')
</snippet></ROW><ROW><id>273872</id><snippet>errno</snippet></ROW><ROW><id>273872</id><snippet>WindowsError</snippet></ROW><ROW><id>273872</id><snippet>except OSError:</snippet></ROW><ROW><id>273872</id><snippet>.winerror</snippet></ROW><ROW><id>273872</id><snippet>.errno</snippet></ROW><ROW><id>273872</id><snippet>errno</snippet></ROW><ROW><id>273872</id><snippet>import os, errno
try:
    os.mkdir('test')
except OSError, e:
    if e.errno == errno.EEXIST:
        # Do something
</snippet></ROW><ROW><id>273872</id><snippet>errno.errorcode</snippet></ROW><ROW><id>273872</id><snippet>&gt;&gt;&gt; errno.errorcode[17]
'EEXIST'
</snippet></ROW><ROW><id>273962</id><snippet>min(maxwidth/width, maxheight/height)</snippet></ROW><ROW><id>273962</id><snippet>oldsize*ratio</snippet></ROW><ROW><id>273962</id><snippet>Image.thumbnail</snippet></ROW><ROW><id>273962</id><snippet>import os, sys
import Image

size = 128, 128

for infile in sys.argv[1:]:
    outfile = os.path.splitext(infile)[0] + ".thumbnail"
    if infile != outfile:
        try:
            im = Image.open(infile)
            im.thumbnail(size, Image.ANTIALIAS)
            im.save(outfile, "JPEG")
        except IOError:
            print "cannot create thumbnail for '%s'" % infile
</snippet></ROW><ROW><id>273992</id><snippet>system("mysql -uroot -p db_name &gt; `tty`");
</snippet></ROW><ROW><id>274160</id><snippet>self.bind(wx.EVT_MENU, subPanel(None, -1, 'TEST'),id=1)
</snippet></ROW><ROW><id>274160</id><snippet>self.bind(wx.EVT_MENU, &lt;event handler&gt;, &lt;id of menu item&gt;)
</snippet></ROW><ROW><id>274160</id><snippet>def OnMenuItem(self, evt): #don't forget the evt
    sp = SubPanel(self, wx.ID_ANY, 'TEST')
    #I assume you will add it to a sizer
    #if you aren't... you should
    test_sizer.Add(sp, 1, wx.EXPAND)
    #force the frame to refresh the sizers:
    self.Layout()
</snippet></ROW><ROW><id>274160</id><snippet>__init__</snippet></ROW><ROW><id>274160</id><snippet>subpanel.Hide()</snippet></ROW><ROW><id>274160</id><snippet>subpanel.Show()</snippet></ROW><ROW><id>274160</id><snippet>#!usr/bin/env python

import wx

class TestFrame(wx.Frame):
    def __init__(self, parent, *args, **kwargs):
        wx.Frame.__init__(self, parent, *args, **kwargs)
        framesizer = wx.BoxSizer(wx.VERTICAL)
        mainpanel = MainPanel(self, wx.ID_ANY)
        self.subpanel = SubPanel(self, wx.ID_ANY)
        self.subpanel.Hide()
        framesizer.Add(mainpanel, 1, wx.EXPAND)
        framesizer.Add(self.subpanel, 1, wx.EXPAND)
        self.SetSizerAndFit(framesizer)

class MainPanel(wx.Panel):
    def __init__(self, parent, *args, **kwargs):
        wx.Panel.__init__(self, parent, *args, **kwargs)
        panelsizer = wx.BoxSizer(wx.VERTICAL)
        but = wx.Button(self, wx.ID_ANY, "Add")
        self.Bind(wx.EVT_BUTTON, self.OnAdd, but)
        self.panel_shown = False
        panelsizer.Add(but, 0)
        self.SetSizer(panelsizer)

    def OnAdd(self, evt):
        if not self.panel_shown:
            self.GetParent().subpanel.Show()
            self.GetParent().Fit()
            self.GetParent().Layout()
            self.panel_shown = True
        else:
            self.GetParent().subpanel.Hide()
            self.GetParent().Fit()
            self.GetParent().Layout()
            self.panel_shown = False

class SubPanel(wx.Panel):
    def __init__(self, parent, *args, **kwargs):
        wx.Panel.__init__(self, parent, *args, **kwargs)
        spsizer = wx.BoxSizer(wx.VERTICAL)
        text = wx.StaticText(self, wx.ID_ANY, label='I am a subpanel')
        spsizer.Add(text, 1, wx.EXPAND)
        self.SetSizer(spsizer)

if __name__ == '__main__':
    app = wx.App()
    frame = TestFrame(None, wx.ID_ANY, "Test Frame")
    frame.Show()
    app.MainLoop()
</snippet></ROW><ROW><id>274403</id><snippet>&gt;&gt;&gt; a = '\222\222\223\225'
&gt;&gt;&gt; u = unicode(a,'latin-1')
&gt;&gt;&gt; u
u'\x92\x92\x93\x95'
&gt;&gt;&gt; print u.encode('utf-8')
ÂÂÂÂ
&gt;&gt;&gt; print u.encode('utf-16')
ÿþ
&gt;&gt;&gt; print u.encode('latin-1')

&gt;&gt;&gt; for c in u:
...   print chr(ord(c) - 3 - 0 -30)
...
q
q
r
t
&gt;&gt;&gt; for c in u:
...   print chr(ord(c) - 3 -200 -30)
...
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 2, in &lt;module&gt;
ValueError: chr() arg not in range(256)
</snippet></ROW><ROW><id>274497</id><snippet>copy_with_prog</snippet></ROW><ROW><id>274497</id><snippet>def copy_with_prog(src, dest, callback = None):
    while True:
        # copy loop stuff
        if callback:
            callback(pos, total)

prog = ProgressBar(...)
copy_with_prog(src, dest, lambda pos, total: prog.update(pos, total))
</snippet></ROW><ROW><id>274644</id><snippet>netifaces</snippet></ROW><ROW><id>274644</id><snippet>&gt;&gt;&gt; import netifaces
&gt;&gt;&gt; netifaces.interfaces()
['lo', 'eth0']
&gt;&gt;&gt; netifaces.ifaddresses('eth0')
{17: [{'broadcast': 'ff:ff:ff:ff:ff:ff', 'addr': '00:11:2f:32:63:45'}], 2: [{'broadcast': '10.0.0.255', 'netmask': '255.255.255.0', 'addr': '10.0.0.2'}], 10: [{'netmask': 'ffff:ffff:ffff:ffff::', 'addr': 'fe80::211:2fff:fe32:6345%eth0'}]}
&gt;&gt;&gt; for interface in netifaces.interfaces():
...   print netifaces.ifaddresses(interface)[netifaces.AF_INET]
...
[{'peer': '127.0.0.1', 'netmask': '255.0.0.0', 'addr': '127.0.0.1'}]
[{'broadcast': '10.0.0.255', 'netmask': '255.255.255.0', 'addr': '10.0.0.2'}]
&gt;&gt;&gt; for interface in netifaces.interfaces():
...   for link in netifaces.ifaddresses(interface)[netifaces.AF_INET]:
...     print link['addr']
...
127.0.0.1
10.0.0.2
</snippet></ROW><ROW><id>274644</id><snippet>from netifaces import interfaces, ifaddresses, AF_INET

def ip4_addresses():
    ip_list = []
    for interface in interfaces():
        for link in ifaddresses(interface)[AF_INET]:
            ip_list.append(link['addr'])
    return ip_list
</snippet></ROW><ROW><id>274644</id><snippet>AF_INET6</snippet></ROW><ROW><id>274644</id><snippet>AF_INET</snippet></ROW><ROW><id>274644</id><snippet>netifaces</snippet></ROW><ROW><id>275117</id><snippet>(r'^urlchecker/(?P&lt;url&gt;.+)$', 'mysite.main.views.urlchecker'),</snippet></ROW><ROW><id>275246</id><snippet>django.utils.html.escape</snippet></ROW><ROW><id>275246</id><snippet>def escape(html):
    """Returns the given HTML with ampersands, quotes and carets encoded."""
    return mark_safe(force_unicode(html).replace('&amp;', '&amp;').replace('&lt;', '&amp;l
t;').replace('&gt;', '&gt;').replace('"', '"').replace("'", '''))
</snippet></ROW><ROW><id>275246</id><snippet>def html_decode(s):
    """
    Returns the ASCII decoded version of the given HTML string. This does
    NOT remove normal HTML tags like &lt;p&gt;.
    """
    for code in htmlCodes = (
            ("'", '''),
            ('"', '"'),
            ('&gt;', '&gt;'),
            ('&lt;', '&lt;'),
            ('&amp;', '&amp;')
        ):
        s = s.replace(code[1], code[0])
    return s

unescaped = html_decode(my_string)
</snippet></ROW><ROW><id>275246</id><snippet>django.utils.html.escape</snippet></ROW><ROW><id>275246</id><snippet># Python 2.x:
import HTMLParser
html_parser = HTMLParser.HTMLParser()
unescaped = html_parser.unescape(my_string)

# Python 3.x:
import html.parser
html_parser = html.parser.HTMLParser()
unescaped = html_parser.unescape(my_string)
</snippet></ROW><ROW><id>275246</id><snippet>{{ context_var|safe }}
{% autoescape off %}
    {{ context_var }}
{% endautoescape %}
</snippet></ROW><ROW><id>275460</id><snippet>libc = CDLL('libc.so')

# Some constants
PROT_READ = 1
PROT_WRITE = 2
PROT_EXEC = 4

def executable_code(buffer):
    """Return a pointer to a page-aligned executable buffer filled in with the data of the string provided.
    The pointer should be freed with libc.free() when finished"""

    buf = c_char_p(buffer)
    size = len(buffer)
    # Need to align to a page boundary, so use valloc
    addr = libc.valloc(size)
    addr = c_void_p(addr)

    if 0 == addr:  
        raise Exception("Failed to allocate memory")

    memmove(addr, buf, size)
    if 0 != libc.mprotect(addr, len(buffer), PROT_READ | PROT_WRITE | PROT_EXEC):
        raise Exception("Failed to set protection on buffer")
    return addr

code_ptr = executable_code(buffer)
fptr = cast(code_ptr, CFUNCTYPE(c_long, c_long))
print fptr(1234)
libc.free(code_ptr)
</snippet></ROW><ROW><id>275774</id><snippet>import imdb

access = imdb.IMDb()
movie = access.get_movie(1132626)

print "title: %s year: %s" % (movie['title'], movie['year'])
print "Cover url: %s" % movie['cover url']
</snippet></ROW><ROW><id>275774</id><snippet>from BeautifulSoup import BeautifulSoup
import imdb

access = imdb.IMDb()
movie = access.get_movie(1132626)

page = urllib2.urlopen(access.get_imdbURL(movie))
soup = BeautifulSoup(page)
cover_div = soup.find(attrs={"class" : "photo"})
cover_url = (photo_div.find('img'))['src']
print "Cover url: %s" % cover_url
</snippet></ROW><ROW><id>276069</id><snippet>event_generate</snippet></ROW><ROW><id>276069</id><snippet>from Tkinter import *
def doFoo(*args):
    print "Hello, world"

root = Tk()
root.bind("&lt;&lt;Foo&gt;&gt;",doFoo)

# some time later, inject the "&lt;&lt;Foo&gt;&gt;" virtual event at the
# tail of the event queue
root.event_generate("&lt;&lt;Foo&gt;&gt;",when="tail")
</snippet></ROW><ROW><id>276069</id><snippet>class myClass:
    def __init__(self,root):
        print "root background is %s"%root.cget("background")

root = Tk()
newObj = myClass(root)
</snippet></ROW><ROW><id>276295</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.times()
(1.296875, 0.765625, 0.0, 0.0, 0.0)
&gt;&gt;&gt; print os.times.__doc__
times() -&gt; (utime, stime, cutime, cstime, elapsed_time)

Return a tuple of floating point numbers indicating process times.
</snippet></ROW><ROW><id>276326</id><snippet>   from django import http

   return http.HttpResponsePermanentRedirect('/yournewpage.html')
</snippet></ROW><ROW><id>276326</id><snippet>/yournewpage.html</snippet></ROW><ROW><id>276326</id><snippet>Browser             Python         HTTP
   -------------------&gt;            GET /youroldpage.html HTTP/1.1

   &lt;-------------------            HTTP/1.1 301 Moved Permanently
                                   Location: /yournewpage.html
   -------------------&gt;            GET /yournewpage.html HTTP/1.1
</snippet></ROW><ROW><id>276394</id><snippet>embed_list[len(embed_list):] = [foo]</snippet></ROW><ROW><id>276394</id><snippet>embed_list.append(foo)</snippet></ROW><ROW><id>277489</id><snippet>$ perl -e 'print "4"x4; print "\n"'
4444
</snippet></ROW><ROW><id>277489</id><snippet>qw/STRING/</snippet></ROW><ROW><id>277489</id><snippet>       print ’-’ x 80;             # print row of dashes

       print "\t" x ($tab/8), ’ ’ x ($tab%8);      # tab over

       @ones = (1) x 80;           # a list of 80 1’s
       @ones = (5) x @ones;        # set all elements to 5
</snippet></ROW><ROW><id>277687</id><snippet>%template(IntVector) vector&lt;int&gt;;
</snippet></ROW><ROW><id>277932</id><snippet>functools.partial</snippet></ROW><ROW><id>277932</id><snippet>import sys
import functools

print_hello = functools.partial(sys.stdout.write, "Hello world\n")

print_hello()
</snippet></ROW><ROW><id>277932</id><snippet>Hello world
</snippet></ROW><ROW><id>277932</id><snippet>lambda</snippet></ROW><ROW><id>277932</id><snippet>print_hello = lambda *a, **kw: sys.stdout.write("Hello world\n", *a, **kw)
</snippet></ROW><ROW><id>277972</id><snippet>class  MyHandler(object):
    def handle_extractTitle(self, dom):
        # do something

    def handle_extractMetaTags(self, dom):
        # do something

    def handle(self, type, dom):
        func = getattr(self, 'handle_%s' % type, None)
        if func is None:
            raise Exception("No handler for type %r" % type)
        return func(dom)
</snippet></ROW><ROW><id>277972</id><snippet> handler = MyHandler()
 handler.handle('extractTitle', dom)
</snippet></ROW><ROW><id>277972</id><snippet>def handle(self, type, *args, **kwargs):
    func = getattr(self, 'handle_%s' % type, None)
    if func is None:
        raise Exception("No handler for type %r" % type)
    return func(*args, **kwargs)
</snippet></ROW><ROW><id>278606</id><snippet>for c in session.query(Stuff).all():
    c.foo = c.foo+1
session.commit()
</snippet></ROW><ROW><id>278606</id><snippet>session.execute(update(stuff_table, values={stuff_table.c.foo: stuff_table.c.foo + 1}))
session.commit()
</snippet></ROW><ROW><id>278606</id><snippet>session.query(Stuff).update({Stuff.foo: Stuff.foo + 1})
session.commit()
</snippet></ROW><ROW><id>278710</id><snippet>mapper(Something, select([sometable], sometable.c.deleted == False))
</snippet></ROW><ROW><id>279586</id><snippet>def foo():
    foo.counter += 1
    print "Counter is %d" % foo.counter
foo.counter = 0
</snippet></ROW><ROW><id>279586</id><snippet>def static_var(varname, value):
    def decorate(func):
        setattr(func, varname, value)
        return func
    return decorate
</snippet></ROW><ROW><id>279586</id><snippet>@static_var("counter", 0)
def foo():
    foo.counter += 1
    print "Counter is %d" % foo.counter
</snippet></ROW><ROW><id>279586</id><snippet>foo.</snippet></ROW><ROW><id>279952</id><snippet>from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

class Food(models.Model):
     """Food, by name."""
     name = models.CharField(max_length=25)

# ConsumedFood has a foreign key to Food, and a "eaten_by" generic relation
class ConsumedFood(models.Model):
    food = models.ForeignKey(Food, related_name="eaters")
    content_type = models.ForeignKey(ContentType, null=True)
    object_id = models.PositiveIntegerField(null=True)
    eaten_by = generic.GenericForeignKey('content_type', 'object_id')

class Person(models.Model):
    first_name = models.CharField(max_length=50)
    last_name = models.CharField(max_length=50)
    birth_date = models.DateField()
    address = models.CharField(max_length=100)
    city = models.CharField(max_length=50)
    foods = generic.GenericRelation(ConsumedFood)

class Cat(models.Model):
    name = models.CharField(max_length=50)
    foods = generic.GenericRelation(ConsumedFood)    

class Cow(models.Model):
    farmer = models.ForeignKey(Person)
    foods = generic.GenericRelation(ConsumedFood)
</snippet></ROW><ROW><id>279952</id><snippet>"""
&gt;&gt;&gt; from models import *

Create some food records

&gt;&gt;&gt; weed = Food(name="weed")
&gt;&gt;&gt; weed.save()

&gt;&gt;&gt; burger = Food(name="burger")
&gt;&gt;&gt; burger.save()

&gt;&gt;&gt; pet_food = Food(name="Pet food")
&gt;&gt;&gt; pet_food.save()

John the farmer likes burgers

&gt;&gt;&gt; john = Person(first_name="John", last_name="Farmer", birth_date="1960-10-12")
&gt;&gt;&gt; john.save()
&gt;&gt;&gt; john.foods.create(food=burger)
&lt;ConsumedFood: ConsumedFood object&gt;

Wilma the cow eats weed

&gt;&gt;&gt; wilma = Cow(farmer=john)
&gt;&gt;&gt; wilma.save()
&gt;&gt;&gt; wilma.foods.create(food=weed)
&lt;ConsumedFood: ConsumedFood object&gt;

Felix the cat likes pet food

&gt;&gt;&gt; felix = Cat(name="felix")
&gt;&gt;&gt; felix.save()
&gt;&gt;&gt; pet_food.eaters.create(eaten_by=felix)
&lt;ConsumedFood: ConsumedFood object&gt;

What food john likes again ?
&gt;&gt;&gt; john.foods.all()[0].food.name
u'burger'

Who's getting pet food ?
&gt;&gt;&gt; living_thing = pet_food.eaters.all()[0].eaten_by
&gt;&gt;&gt; isinstance(living_thing,Cow)
False
&gt;&gt;&gt; isinstance(living_thing,Cat)
True

John's farm is in fire ! He looses his cow.
&gt;&gt;&gt; wilma.delete()

John is a lot poorer right now
&gt;&gt;&gt; john.foods.clear()
&gt;&gt;&gt; john.foods.create(food=pet_food)
&lt;ConsumedFood: ConsumedFood object&gt;

Who's eating pet food now ?
&gt;&gt;&gt; for consumed_food in pet_food.eaters.all():
...    consumed_food.eaten_by
&lt;Cat: Cat object&gt;
&lt;Person: Person object&gt;

Get the second pet food eater
&gt;&gt;&gt; living_thing = pet_food.eaters.all()[1].eaten_by

Try to find if it's a person and reveal his name
&gt;&gt;&gt; if isinstance(living_thing,Person): living_thing.first_name
u'John'

"""
</snippet></ROW><ROW><id>280238</id><snippet>self.currentEmailParsedInstance.get_payload()
</snippet></ROW><ROW><id>280238</id><snippet>&gt;&gt;&gt; parser = email.parser.Parser()
&gt;&gt;&gt; message = parser.parse(open('/home/vinko/jlm.txt','r'))
&gt;&gt;&gt; message.is_multipart()
True
&gt;&gt;&gt; parts = message.get_payload()
&gt;&gt;&gt; len(parts)
2
&gt;&gt;&gt; parts[0].get_content_type()
'text/plain'
&gt;&gt;&gt; parts[1].get_content_type()
'message/rfc822'
&gt;&gt;&gt; parts[0].get_payload()
'Message Text'
</snippet></ROW><ROW><id>280441</id><snippet>re.escape()</snippet></ROW><ROW><id>280441</id><snippet>re</snippet></ROW><ROW><id>280441</id><snippet>def simplistic_plural(word, text):
    word_or_plural = re.escape(word) + 's?'
    return re.match(word_or_plural, text)
</snippet></ROW><ROW><id>280561</id><snippet>self.attribute</snippet></ROW><ROW><id>280561</id><snippet>wx.Frame.__init__()</snippet></ROW><ROW><id>280561</id><snippet>self</snippet></ROW><ROW><id>280561</id><snippet>wx.Panel</snippet></ROW><ROW><id>280862</id><snippet>def poisson_probability(actual, mean):
    # naive:   math.exp(-mean) * mean**actual / factorial(actual)

    # iterative, to keep the components from getting too large or small:
    p = math.exp(-mean)
    for i in xrange(actual):
        p *= mean
        p /= i+1
    return p
</snippet></ROW><ROW><id>280865</id><snippet>&gt;&gt;&gt; l = [[[[[39]]]], [1, 2, 3], [4, [5, 3], 1], [[[[8, 9], 10], 11], 12]]
&gt;&gt;&gt; def asum(t): return sum(map(asum, t)) if hasattr(t, '__iter__') else t
...
&gt;&gt;&gt; sorted(l, key=asum)
[[1, 2, 3], [4, [5, 3], 1], [[[[39]]]], [[[[8, 9], 10], 11], 12]]
</snippet></ROW><ROW><id>281330</id><snippet>#include &lt;ApplicationServices/ApplicationServices.h&gt;

int to(int x, int y)
{
    CGPoint newloc;
    CGEventRef eventRef;
    newloc.x = x;
    newloc.y = y;

    eventRef = CGEventCreateMouseEvent(NULL, kCGEventMouseMoved, newloc,
                                        kCGMouseButtonCenter);
    //Apparently, a bug in xcode requires this next line
    CGEventSetType(eventRef, kCGEventMouseMoved);
    CGEventPost(kCGSessionEventTap, eventRef);
    CFRelease(eventRef);

    return 0;
}
</snippet></ROW><ROW><id>281911</id><snippet>import subprocess
subprocess.Popen(r'explorer /select,"C:\path\of\folder\file"')
</snippet></ROW><ROW><id>282399</id><snippet>decorator(original_function)()
</snippet></ROW><ROW><id>282399</id><snippet>original_function()
</snippet></ROW><ROW><id>282868</id><snippet>class VisitorDayTypeCounterManager(models.Manager):
    def get_query_set(self):
        qs = super(VisitorDayTypeCounterManager, self).get_query_set()

        from django.db import connection
        cursor = connection.cursor()

        pk_list = qs.values_list('id', flat=True)
        cursor.execute('UPDATE table_name SET counter = counter + 1 WHERE id IN %s', [pk_list])

        return qs

class VisitorDayTypeCounter(models.Model):
    ...

    objects = VisitorDayTypeCounterManager()
</snippet></ROW><ROW><id>283026</id><snippet>from BeautifulSoup import BeautifulSoup

original=file(r"C:\testheaders.htm").read()

soupOriginal=BeautifulSoup(original)
all_Rows=soupOriginal.findAll('tr')


header_Rows=[]
for each in range(len(all_Rows)):
    header_Rows.append(all_Rows[each])


header_Cells=[]
for each in header_Rows:
    header_Cells.append(each.findAll('td'))

temp_Header_Row=[]
header=[]
for row in range(len(header_Cells)):
    for column in range(len(header_Cells[row])):
	    x=int(header_Cells[row][column].get("colspan","1"))
	    if x==1:
		    temp_Header_Row.append( ' '.join(header_Cells[row][column]) )

	    else:
		    for item in range(x):

			    temp_Header_Row.append( ''.join(header_Cells[row][column]) )

    header.append(temp_Header_Row)
temp_Header_Row=[]
combined_Header=zip(*header)

for each in combined_Header:
    print each
</snippet></ROW><ROW><id>283026</id><snippet>  &lt;TABLE style="font-size: 10pt" cellspacing="0" border="0" cellpadding="0" width="100%"&gt;
  &lt;TR valign="bottom"&gt;
  &lt;TD width="40%"&gt; &lt;/TD&gt;
  &lt;TD width="5%"&gt; &lt;/TD&gt;
  &lt;TD width="3%"&gt; &lt;/TD&gt;
  &lt;TD width="3%"&gt; &lt;/TD&gt;
  &lt;TD width="1%"&gt; &lt;/TD&gt;

  &lt;TD width="5%"&gt; &lt;/TD&gt;
  &lt;TD width="3%"&gt; &lt;/TD&gt;
  &lt;TD width="3%"&gt; &lt;/TD&gt;
  &lt;TD width="1%"&gt; &lt;/TD&gt;

  &lt;TD width="5%"&gt; &lt;/TD&gt;
  &lt;TD width="3%"&gt; &lt;/TD&gt;
  &lt;TD width="1%"&gt; &lt;/TD&gt;
  &lt;TD width="1%"&gt; &lt;/TD&gt;

  &lt;TD width="5%"&gt; &lt;/TD&gt;
  &lt;TD width="3%"&gt; &lt;/TD&gt;
  &lt;TD width="1%"&gt; &lt;/TD&gt;
  &lt;TD width="1%"&gt; &lt;/TD&gt;

  &lt;TD width="5%"&gt; &lt;/TD&gt;
  &lt;TD width="3%"&gt; &lt;/TD&gt;
  &lt;TD width="3%"&gt; &lt;/TD&gt;
  &lt;TD width="1%"&gt; &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR style="font-size: 10pt" valign="bottom"&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt;FOODS WE LIKE&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR style="font-size: 10pt" valign="bottom"&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="CENTER" colspan="6"&gt;SILLY STUFF&lt;/TD&gt;

  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt;OTHER THAN&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="CENTER" colspan="6"&gt;FAVORITE PEOPLE&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR style="font-size: 10pt" valign="bottom"&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt;MONTY PYTHON&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt;CHERRYPY&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt;APPLE PIE&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt;MOTHERS&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt;FATHERS&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR style="font-size: 10pt" valign="bottom"&gt;
  &lt;TD nowrap align="left"&gt;Name&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt;SHOWS&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt;PROGRAMS&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt;BANANAS&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt;PERFUME&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;TD nowrap align="right" colspan="2"&gt;TOOLS&lt;/TD&gt;
  &lt;TD&gt; &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;/TABLE&gt;
</snippet></ROW><ROW><id>283545</id><snippet>subprocess.Popen([r'C:\Python2.5\python.exe', r'C:\path\to\foo.py'])
</snippet></ROW><ROW><id>283630</id><snippet>cons   = lambda el, lst: (el, lst)
mklist = lambda *args: reduce(lambda lst, el: cons(el, lst), reversed(args), None)
car = lambda lst: lst[0] if lst else lst
cdr = lambda lst: lst[1] if lst else lst
nth = lambda n, lst: nth(n-1, cdr(lst)) if n &gt; 0 else car(lst)
length  = lambda lst, count=0: length(cdr(lst), count+1) if lst else count
begin   = lambda *args: args[-1]
display = lambda lst: begin(w("%s " % car(lst)), display(cdr(lst))) if lst else w("nil\n")
</snippet></ROW><ROW><id>283630</id><snippet>w = sys.stdout.write</snippet></ROW><ROW><id>283630</id><snippet>class Node: 
  def __init__(self, cargo=None, next=None): 
    self.car = cargo 
    self.cdr = next    
  def __str__(self): 
    return str(self.car)


def display(lst):
  if lst:
    w("%s " % lst)
    display(lst.cdr)
  else:
    w("nil\n")
</snippet></ROW><ROW><id>283719</id><snippet>$ ls -la chardet-1.0.1.tgz
-rwxr-xr-x 1 vinko vinko 179218 2008-10-20 17:49 chardet-1.0.1.tgz
$ python
Python 2.5.1 (r251:54863, Jul 31 2008, 22:53:39)
[GCC 4.1.2 (Ubuntu 4.1.2-0ubuntu4)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; f = open('chardet-1.0.1.tgz','rb')
&gt;&gt;&gt; f.seek(0,2)
&gt;&gt;&gt; f.tell()
179218L
</snippet></ROW><ROW><id>283719</id><snippet>&gt;&gt;&gt; import os
&gt;&gt;&gt; os.fstat(f.fileno()).st_size
179218L
&gt;&gt;&gt;        
</snippet></ROW><ROW><id>283801</id><snippet>placeholder= '?' # For SQLite. See DBAPI paramstyle.
placeholders= ', '.join(placeholder for unused in l)
query= 'SELECT name FROM students WHERE id IN (%s)' % placeholders
cursor.execute(query, l)
</snippet></ROW><ROW><id>283802</id><snippet>char_file = open('pickle.char', 'rb')
</snippet></ROW><ROW><id>284695</id><snippet>import Tix

help(Tix.NoteBook)
</snippet></ROW><ROW><id>284695</id><snippet>import ttk

help(ttk.Notebook)
</snippet></ROW><ROW><id>285076</id><snippet>setattr(x, attr, 'magic')
</snippet></ROW><ROW><id>285076</id><snippet>&gt;&gt;&gt; help(setattr)
Help on built-in function setattr in module __builtin__:

setattr(...)
    setattr(object, name, value)

    Set a named attribute on an object; setattr(x, 'y', v) is equivalent to
    ``x.y = v''.
</snippet></ROW><ROW><id>285498</id><snippet>PyObject *m = PyImport_AddModule("__main__");
PyObject *v = PyObject_GetAttrString(m,"foobar");

int foobar = PyInt_AsLong(v);

Py_DECREF(v);
</snippet></ROW><ROW><id>285941</id><snippet>soup = BeautifulSoup.BeautifulSoup(urllib.urlopen(url).read())
</snippet></ROW><ROW><id>285941</id><snippet>import urlparse, urllib
from BeautifulSoup import BeautifulSoup

url = "http://www.example.com/index.html"
source = urllib.urlopen(url).read()

soup = BeautifulSoup(source)

for item in soup.fetchall('a'):
    try:
        link =  urlparse.urlparse(item['href'].lower())
    except:
        # Not a valid link
        pass
    else:
        print link
</snippet></ROW><ROW><id>285943</id><snippet>url_pattern.sub(getExpandedURL, text)</snippet></ROW><ROW><id>286064</id><snippet>EDIT:</snippet></ROW><ROW><id>286064</id><snippet>&gt;&gt;&gt; import decimal
&gt;&gt;&gt; print(decimal.Decimal("1.2") ** 2)
1.44
</snippet></ROW><ROW><id>286064</id><snippet>decimal.Decimal</snippet></ROW><ROW><id>286738</id><snippet>win32pipe</snippet></ROW><ROW><id>286738</id><snippet>r'\\.\pipe\mypipe'</snippet></ROW><ROW><id>286738</id><snippet>ovpipe</snippet></ROW><ROW><id>286738</id><snippet>win32event.WaitForMultipleObjects</snippet></ROW><ROW><id>286738</id><snippet>rc = win32event.WaitForMultipleObjects(
    eventlist,    # Objects to wait for.
    0,            # Wait for one object
    timeout)      # timeout in milli-seconds.
</snippet></ROW><ROW><id>286738</id><snippet>import win32event
import pywintypes
import win32file
import win32pipe

class ovpipe:
"Overlapped I/O named pipe class"
def __init__(self):
    self.over=pywintypes.OVERLAPPED()
    evt=win32event.CreateEvent(None,1,0,None)
    self.over.hEvent=evt
    self.pname='mypipe'
    self.hpipe = win32pipe.CreateNamedPipe(
        r'\\.\pipe\mypipe',             # pipe name 
        win32pipe.PIPE_ACCESS_DUPLEX|   # read/write access
        win32file.FILE_FLAG_OVERLAPPED,
        win32pipe.PIPE_TYPE_MESSAGE|    # message-type pipe 
        win32pipe.PIPE_WAIT,            # blocking mode 
        1,                              # number of instances 
        512,                            # output buffer size 
        512,                            # input buffer size 
        2000,                           # client time-out
        None)                           # no security attributes
    self.buffer = win32file.AllocateReadBuffer(512)
    self.state='noconnected'
    self.chstate()

def execmsg(self):
    "Translate the received message"
    pass

def chstate(self):
    "Change the state of the pipe depending on current state"
    if self.state=='noconnected':
        win32pipe.ConnectNamedPipe(self.hpipe,self.over)
        self.state='connectwait'
        return -6

    elif self.state=='connectwait':
        j,self.strbuf=win32file.ReadFile(self.hpipe,self.buffer,self.over)
        self.state='readwait'
        return -6

    elif self.state=='readwait':
        size=win32file.GetOverlappedResult(self.hpipe,self.over,1)
        self.msg=self.strbuf[:size]
        ret=self.execmsg()
        self.state = 'noconnected'
        win32pipe.DisconnectNamedPipe(self.hpipe)
        return ret
</snippet></ROW><ROW><id>286802</id><snippet>os.path</snippet></ROW><ROW><id>286802</id><snippet>__file__</snippet></ROW><ROW><id>286802</id><snippet>sys.executable</snippet></ROW><ROW><id>286802</id><snippet>os.path.join('path1', 'path2')</snippet></ROW><ROW><id>286802</id><snippet>os.path.expanduser('a_path')</snippet></ROW><ROW><id>286802</id><snippet>a_path</snippet></ROW><ROW><id>286802</id><snippet>os.path.abspath('a_path')</snippet></ROW><ROW><id>286802</id><snippet>os.path.dirname('a_path')</snippet></ROW><ROW><id>286802</id><snippet># script1.py
# Get the path to the script2.py in the same directory
import os
this_script_path = os.path.abspath(__file__)
this_dir_path = os.path.dirname(this_script_path)
script2_path = os.path.join(this_dir_path, 'script2.py')
print script2_path
</snippet></ROW><ROW><id>286802</id><snippet>ali@work:~/tmp$ python script1.py 
/home/ali/tmp/script2.py
</snippet></ROW><ROW><id>286802</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>287101</id><snippet>*args</snippet></ROW><ROW><id>287101</id><snippet>**kwargs</snippet></ROW><ROW><id>287101</id><snippet>def my_sum(*args):
    return sum(args)
</snippet></ROW><ROW><id>287101</id><snippet>args</snippet></ROW><ROW><id>287101</id><snippet>kwargs</snippet></ROW><ROW><id>287101</id><snippet>*</snippet></ROW><ROW><id>287101</id><snippet>**</snippet></ROW><ROW><id>287215</id><snippet>__name__</snippet></ROW><ROW><id>287215</id><snippet>'foo'</snippet></ROW><ROW><id>287215</id><snippet>__name__</snippet></ROW><ROW><id>287215</id><snippet>'__main__'</snippet></ROW><ROW><id>287215</id><snippet>if __name__ == '__main__':
    main program here
</snippet></ROW><ROW><id>287521</id><snippet>#define</snippet></ROW><ROW><id>287521</id><snippet>-D</snippet></ROW><ROW><id>287867</id><snippet>class Foo:

  def __init__(self):
    self.do_stuff = { "A": self.do_A, "B": self.do_B }

  def run(self):
    for x in ["A", "B"]:
      self.do_stuff[x]("hi")

  def do_A(self, x):
    pass

  def do_B(self, x):
    pass
</snippet></ROW><ROW><id>287942</id><snippet>[('spam', 'eggs'), ('spam', 'ham')]
</snippet></ROW><ROW><id>287942</id><snippet>parser.get('Some Section', 'spam')
</snippet></ROW><ROW><id>287942</id><snippet>[Some Section]
spam: eggs, ham
</snippet></ROW><ROW><id>287942</id><snippet>spam_values = [v.strip() for v in parser.get('Some Section', 'spam').split(',')]
</snippet></ROW><ROW><id>288650</id><snippet>ClientCreator(...).connectTCP(...)</snippet></ROW><ROW><id>288650</id><snippet>self.transport.loseConnection()</snippet></ROW><ROW><id>288807</id><snippet>readline</snippet></ROW><ROW><id>288807</id><snippet>readline</snippet></ROW><ROW><id>288989</id><snippet>(?&lt;NAME&gt;pattern)</snippet></ROW><ROW><id>288989</id><snippet>%+</snippet></ROW><ROW><id>288989</id><snippet>$variable =~ /(?&lt;count&gt;\d+)/;
print "Count is $+{count}";
</snippet></ROW><ROW><id>289046</id><snippet>while 1:
    data = conn.recv(1024)
    if not data: break
    conn.send(data)
conn.close()
</snippet></ROW><ROW><id>289167</id><snippet>&gt;&gt;&gt; from elementtidy.TidyHTMLTreeBuilder import TidyHTMLTreeBuilder as TB
&gt;&gt;&gt; tb = TB()
&gt;&gt;&gt; tb.feed("&lt;p&gt;Hello world")
&gt;&gt;&gt; e= tb.close()
&gt;&gt;&gt; e.find(".//{http://www.w3.org/1999/xhtml}p")
&lt;Element {http://www.w3.org/1999/xhtml}p at 264eb8&gt;
</snippet></ROW><ROW><id>289766</id><snippet>range(0,len(),3)</snippet></ROW><ROW><id>289766</id><snippet>def segment( n ):
   segList= []
   while len(n) &gt; 3:
       segList.insert( 0, n[-3:] )
       n= n[:-3]
   segList.insert( 0, n )
   return segList
</snippet></ROW><ROW><id>289766</id><snippet>if __name__ == "__main__"</snippet></ROW><ROW><id>289766</id><snippet>sys.argv</snippet></ROW><ROW><id>289766</id><snippet>if __name__ == "__main__":
    import sys
    for number in sys.argv[1:]:
        print number2string( number )
</snippet></ROW><ROW><id>289766</id><snippet>number2string</snippet></ROW><ROW><id>290440</id><snippet>
&gt;&gt;&gt; lst = [1, 2, 3, 4, 5]
&gt;&gt;&gt; filter(lambda x: x % 2 == 0, lst)
[2, 4]
</snippet></ROW><ROW><id>290440</id><snippet>
&gt;&gt;&gt; lst = [1, 2, 3, 4, 5]
&gt;&gt;&gt; [x for x in lst if x %2 == 0]
[2, 4]
</snippet></ROW><ROW><id>290440</id><snippet>
&gt;&gt;&gt; (x for x in lst if x % 2 == 0).next()
2
</snippet></ROW><ROW><id>290440</id><snippet>filter(lambda x: x % 2 == 0, lst)[0]
[x for x in lst if x %2 == 0][0]
</snippet></ROW><ROW><id>290440</id><snippet>filter(lambda x: x % 2 == 0, lst)[:1]
[x for x in lst if x %2 == 0][:1]
</snippet></ROW><ROW><id>290650</id><snippet>django-admin.py startproject</snippet></ROW><ROW><id>290650</id><snippet>import</snippet></ROW><ROW><id>290962</id><snippet>initial</snippet></ROW><ROW><id>291759</id><snippet>os.stat()</snippet></ROW><ROW><id>291759</id><snippet>file.readlines([sizehint])</snippet></ROW><ROW><id>291968</id><snippet>queryset</snippet></ROW><ROW><id>291968</id><snippet>form.rate.queryset = Rate.objects.filter(company_id=the_company.id)
</snippet></ROW><ROW><id>291968</id><snippet>form.fields["rate"].queryset = ...</snippet></ROW><ROW><id>292213</id><snippet>&lt;a\s*href=['|"](http:\/\/(.*?)\S['|"]&gt;
</snippet></ROW><ROW><id>292213</id><snippet>&lt;a .*?+href=['"](http:\/\/.*?)['"].*?&gt;
</snippet></ROW><ROW><id>292502</id><snippet>def</snippet></ROW><ROW><id>292502</id><snippet>lambda</snippet></ROW><ROW><id>292502</id><snippet>def</snippet></ROW><ROW><id>292502</id><snippet>lambda</snippet></ROW><ROW><id>292502</id><snippet>def</snippet></ROW><ROW><id>292502</id><snippet>open</snippet></ROW><ROW><id>292502</id><snippet>range</snippet></ROW><ROW><id>292502</id><snippet>SyntaxError</snippet></ROW><ROW><id>292502</id><snippet>code1
class Foo:
   code2
   def spam.....
      code3
      for code4..:
       code5
       x()
</snippet></ROW><ROW><id>293095</id><snippet>from google.appengine.ext import webapp
import os

class PrintEnvironmentHandler(webapp.RequestHandler):
  def get(self):
    for name in os.environ.keys():
      self.response.out.write("%s = %s&lt;br /&gt;\n" % (name, os.environ[name]))


  [1]: http://code.google.com/appengine/docs/python/theenvironment.html
</snippet></ROW><ROW><id>293350</id><snippet>wx.TextCtrl</snippet></ROW><ROW><id>293350</id><snippet>wx.TE_READONLY</snippet></ROW><ROW><id>293558</id><snippet>from BeautifulSoup import BeautifulSoup
html = "&lt;p&gt;&lt;ul&gt;&lt;li&gt;Foo"
soup = BeautifulSoup(html)
print soup.prettify()
</snippet></ROW><ROW><id>293558</id><snippet>&lt;p&gt;
 &lt;ul&gt;
  &lt;li&gt;
   Foo
  &lt;/li&gt;
 &lt;/ul&gt;
&lt;/p&gt;
</snippet></ROW><ROW><id>293558</id><snippet>import tidy
html = "&lt;p&gt;&lt;ul&gt;&lt;li&gt;Foo"
print tidy.parseString(html, show_body_only=True)
</snippet></ROW><ROW><id>293558</id><snippet>&lt;ul&gt;
&lt;li&gt;Foo&lt;/li&gt;
&lt;/ul&gt;
</snippet></ROW><ROW><id>293558</id><snippet>print tidy.parseString(html, show_body_only=True, drop_empty_paras=False)
</snippet></ROW><ROW><id>293558</id><snippet>&lt;p&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Foo&lt;/li&gt;
&lt;/ul&gt;
</snippet></ROW><ROW><id>293558</id><snippet>print tidy.parseString(html, show_body_only=True, indent=True)
</snippet></ROW><ROW><id>293558</id><snippet>&lt;ul&gt;
  &lt;li&gt;Foo
  &lt;/li&gt;
&lt;/ul&gt;
</snippet></ROW><ROW><id>294325</id><snippet>call_user_func_array()</snippet></ROW><ROW><id>294325</id><snippet>call_user_func_array("range", $args);</snippet></ROW><ROW><id>294480</id><snippet>import pwd
pw = pwd.getpwnam("nobody")
uid = pw.pw_uid
</snippet></ROW><ROW><id>294612</id><snippet>urls.py</snippet></ROW><ROW><id>294723</id><snippet>my_book = Book.objects.get(pk=1)
all_ingredients = Ingredient.objects.filter(recipe__book=my_book)
</snippet></ROW><ROW><id>295038</id><snippet>[head]
var: self.post.id
</snippet></ROW><ROW><id>295038</id><snippet>import ConfigParser

class Test:
  def __init__(self):
      self.post = TestPost(5)
  def getPost(self):
      config = ConfigParser.ConfigParser()
      config.read('/path/to/test.ini')
      newvar = config.get('head', 'var')
      print eval(newvar) 

class TestPost:
  def __init__(self, id):
      self.id = id

test = Test()
test.getPost()   # prints 5
</snippet></ROW><ROW><id>295064</id><snippet>eval()</snippet></ROW><ROW><id>295064</id><snippet>print eval('self.post.id') # prints value of self.post.id
</snippet></ROW><ROW><id>295276</id><snippet>:</snippet></ROW><ROW><id>295276</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>295276</id><snippet>PATH</snippet></ROW><ROW><id>295276</id><snippet>:</snippet></ROW><ROW><id>295377</id><snippet>@register.filter
def in_list(value,arg):
    return value in arg
</snippet></ROW><ROW><id>295377</id><snippet>The item is 
{% if item|in_list:list %} 
    in list 
{% else %} 
    not in list
{% endif %}
</snippet></ROW><ROW><id>295481</id><snippet>urlopen()</snippet></ROW><ROW><id>295481</id><snippet>import urllib

def some_function_that_uses_urllib():
    ...
    urllib.urlopen()
    ...
</snippet></ROW><ROW><id>295481</id><snippet>import mymodule

def dummy_urlopen(url):
    ...

mymodule.urllib.urlopen = dummy_urlopen
</snippet></ROW><ROW><id>295481</id><snippet>mymodule</snippet></ROW><ROW><id>295481</id><snippet>dummy_urlopen()</snippet></ROW><ROW><id>295481</id><snippet>urlopen()</snippet></ROW><ROW><id>295564</id><snippet>import subprocess

awk_sort = subprocess.Popen( ["-c", "awk -f script.awk | sort &gt; outfile.txt" ],
    stdin= subprocess.PIPE, shell=True )
awk_sort.communicate( "input data\n" )
awk_sort.wait()
</snippet></ROW><ROW><id>295564</id><snippet>awk &gt;file ; sort file</snippet></ROW><ROW><id>295564</id><snippet>awk | sort</snippet></ROW><ROW><id>295564</id><snippet>a | b</snippet></ROW><ROW><id>295564</id><snippet>a | b</snippet></ROW><ROW><id>295564</id><snippet>os.pipe()</snippet></ROW><ROW><id>295564</id><snippet>a</snippet></ROW><ROW><id>295564</id><snippet>b</snippet></ROW><ROW><id>295564</id><snippet>a | b | c</snippet></ROW><ROW><id>295564</id><snippet>a | (b | c)</snippet></ROW><ROW><id>295564</id><snippet>os.pipe()</snippet></ROW><ROW><id>295564</id><snippet>os.exec()</snippet></ROW><ROW><id>295564</id><snippet>os.fork()</snippet></ROW><ROW><id>295564</id><snippet>sys.stdin</snippet></ROW><ROW><id>295564</id><snippet>sys.stdout</snippet></ROW><ROW><id>295564</id><snippet>os.pipe()</snippet></ROW><ROW><id>295564</id><snippet>subprocess.Popen</snippet></ROW><ROW><id>295760</id><snippet>class A_part1:
    def m1(self):
        print "m1"

class A_part2:
    def m2(self):
        print "m2"

class A(A_part1, A_part2):
    pass

a = A()
a.m1()
a.m2()
</snippet></ROW><ROW><id>296062</id><snippet>import MyLib
import ReallyBigLib
</snippet></ROW><ROW><id>296184</id><snippet>import glob, os, shutil

files = glob.iglob(os.path.join(source_dir, "*.ext"))
for file in files:
    if os.path.isfile(file):
        shutil.copy2(file, dest_dir)
</snippet></ROW><ROW><id>296495</id><snippet>os.remove("path/to/file")</snippet></ROW><ROW><id>296495</id><snippet>.emacs</snippet></ROW><ROW><id>296495</id><snippet>os.remove(".emacs")
</snippet></ROW><ROW><id>296495</id><snippet>str</snippet></ROW><ROW><id>296722</id><snippet>#!/usr/bin/env python
from __future__ import with_statement
from contextlib import closing
from zipfile import ZipFile, ZIP_DEFLATED
import os

def zipdir(basedir, archivename):
    assert os.path.isdir(basedir)
    with closing(ZipFile(archivename, "w", ZIP_DEFLATED)) as z:
        for root, dirs, files in os.walk(basedir):
            #NOTE: ignore empty directories
            for fn in files:
                absfn = os.path.join(root, fn)
                zfn = absfn[len(basedir)+len(os.sep):] #XXX: relative path
                z.write(absfn, zfn)

if __name__ == '__main__':
    import sys
    basedir = sys.argv[1]
    archivename = sys.argv[2]
    zipdir(basedir, archivename)
</snippet></ROW><ROW><id>296722</id><snippet>C:\zipdir&gt; python -mzipdir c:\tmp\test test.zip
</snippet></ROW><ROW><id>296722</id><snippet>'C:\zipdir\test.zip'</snippet></ROW><ROW><id>296722</id><snippet>'c:\tmp\test'</snippet></ROW><ROW><id>297243</id><snippet>&gt;&gt;&gt; tree.getroot().xpath(
...     "//xhtml:img", 
...     namespaces={'xhtml':'http://www.w3.org/1999/xhtml'}
...     )
[&lt;Element {http://www.w3.org/1999/xhtml}img at 11a29e0&gt;]
</snippet></ROW><ROW><id>297478</id><snippet>def get_form(exclude_list):
    class myform(ModelForm):
        class Meta:
            model = Passenger
            exclude = exclude_list
    return myform

frm_class = get_form( ('field1', 'field2') )
form = frm_class()
</snippet></ROW><ROW><id>297478</id><snippet>def PassengerForm(exclude_list, *args, **kwargs):
    class MyPassengerForm(ModelForm):
        class Meta:
            model = Passenger
            exclude = exclude_list

        def __init__(self):
            super(MyPassengerForm, self).__init__(*args, **kwargs)

    return MyPassengerForm()

form = PassengerForm( ('field1', 'field2') )
</snippet></ROW><ROW><id>298030</id><snippet>import  javax.servlet.http.HttpServlet

import  cStringIO
import  gzip
import  string

def compressBuf(buf):
    zbuf = cStringIO.StringIO()
    zfile = gzip.GzipFile(mode = 'wb',  fileobj = zbuf, compresslevel = 6)
    zfile.write(buf)
    zfile.close()
    return zbuf.getvalue()
</snippet></ROW><ROW><id>298052</id><snippet>testupnpigd.py</snippet></ROW><ROW><id>298489</id><snippet>{{form}}</snippet></ROW><ROW><id>298793</id><snippet>{{variable}}</snippet></ROW><ROW><id>298793</id><snippet>&lt;script type="text/javascript"&gt; 
   var a = "{{someDjangoVariable}}"
&lt;/script&gt;
</snippet></ROW><ROW><id>298835</id><snippet>initial = [ list of { dictionaries }, one per form ]
</snippet></ROW><ROW><id>298835</id><snippet>values</snippet></ROW><ROW><id>299377</id><snippet>import os

if __name__ == "__main__":
   startingDir = os.getcwd() # save our current directory
   testDir = "\\test" # note that \ is windows specific, and we have to escape it
   os.chdir(testDir) # change to our test directory
   os.system("java -jar run_this.jar required_paramter.ext")
   os.chdir(startingDir) # change back to where we started
</snippet></ROW><ROW><id>299462</id><snippet>os.chdir(owd)
</snippet></ROW><ROW><id>299830</id><snippet>import zipfile, zlib, binascii, struct
class BufferedZipFile(zipfile.ZipFile):
    def writebuffered(self, zipinfo, buffer):
        zinfo = zipinfo

        zinfo.file_size = file_size = 0
        zinfo.flag_bits = 0x00
        zinfo.header_offset = self.fp.tell()

        self._writecheck(zinfo)
        self._didModify = True

        zinfo.CRC = CRC = 0
        zinfo.compress_size = compress_size = 0
        self.fp.write(zinfo.FileHeader())
        if zinfo.compress_type == zipfile.ZIP_DEFLATED:
            cmpr = zlib.compressobj(zlib.Z_DEFAULT_COMPRESSION, zlib.DEFLATED, -15)
        else:
            cmpr = None

        while True:
            buf = buffer.read(1024 * 8)
            if not buf:
                break

            file_size = file_size + len(buf)
            CRC = binascii.crc32(buf, CRC)
            if cmpr:
                buf = cmpr.compress(buf)
                compress_size = compress_size + len(buf)

            self.fp.write(buf)

        if cmpr:
            buf = cmpr.flush()
            compress_size = compress_size + len(buf)
            self.fp.write(buf)
            zinfo.compress_size = compress_size
        else:
            zinfo.compress_size = file_size

        zinfo.CRC = CRC
        zinfo.file_size = file_size

        position = self.fp.tell()
        self.fp.seek(zinfo.header_offset + 14, 0)
        self.fp.write(struct.pack("&lt;lLL", zinfo.CRC, zinfo.compress_size, zinfo.file_size))
        self.fp.seek(position, 0)
        self.filelist.append(zinfo)
        self.NameToInfo[zinfo.filename] = zinfo
</snippet></ROW><ROW><id>300045</id><snippet>EVT_MENU_OPEN(func)</snippet></ROW><ROW><id>300045</id><snippet>wxMenuEvent</snippet></ROW><ROW><id>300045</id><snippet>EVT_MENU_RANGE(id1, id2, func)</snippet></ROW><ROW><id>300045</id><snippet>wxCommandEvent</snippet></ROW><ROW><id>300045</id><snippet>id1</snippet></ROW><ROW><id>300045</id><snippet>id2</snippet></ROW><ROW><id>300533</id><snippet>&gt;&gt;&gt; urllib2.unquote("%0a")
'\n'
</snippet></ROW><ROW><id>300533</id><snippet>&gt;&gt;&gt; u"Tanım"
u'Tan\u0131m'
&gt;&gt;&gt; url = urllib.quote(u"Tanım".encode('utf8'))
&gt;&gt;&gt; urllib.unquote(url).decode('utf8')
u'Tan\u0131m'
</snippet></ROW><ROW><id>301075</id><snippet>&gt;&gt;&gt; foo = 'baz "\\"'
&gt;&gt;&gt; foo
'baz "\\"'
&gt;&gt;&gt; print foo
baz "\"
</snippet></ROW><ROW><id>301075</id><snippet>&gt;&gt;&gt; print r'baz "\"'
baz "\"
</snippet></ROW><ROW><id>301146</id><snippet>exec</snippet></ROW><ROW><id>301146</id><snippet>&gt;&gt;&gt; moduleNames = ['sys', 'os', 're', 'unittest'] 
&gt;&gt;&gt; moduleNames
['sys', 'os', 're', 'unittest']
&gt;&gt;&gt; modules = map(__import__, moduleNames)
</snippet></ROW><ROW><id>301437</id><snippet>Fuse.MethodProxy._add_class_type</snippet></ROW><ROW><id>301437</id><snippet>        def setter(self, xcls):

            setattr(self, type + '_class', xcls)

            for m in inits:
                self.mdic[m] = xcls

            for m in proxied:
                if hasattr(xcls, m):
                    self.mdic[m] = self.proxyclass(m)
</snippet></ROW><ROW><id>301437</id><snippet>self.file_class = self.get_file</snippet></ROW><ROW><id>301437</id><snippet>self.get_file</snippet></ROW><ROW><id>301437</id><snippet>mdic</snippet></ROW><ROW><id>301437</id><snippet>Dstorage</snippet></ROW><ROW><id>301437</id><snippet>file_class</snippet></ROW><ROW><id>301580</id><snippet>datetime</snippet></ROW><ROW><id>301580</id><snippet>from datetime import datetime
d = datetime.strptime('2007-07-18 10:03:19', '%Y-%m-%d %H:%M:%S')
day_string = d.strftime('%Y-%m-%d')
</snippet></ROW><ROW><id>301630</id><snippet>.ini</snippet></ROW><ROW><id>301630</id><snippet>.properties</snippet></ROW><ROW><id>301630</id><snippet>"""A particular XML parser.  Formats change, so sometimes this changes, too."""

import xml.etree.ElementTree as xml

class SSXML_Source( object ):
    ns0= "urn:schemas-microsoft-com:office:spreadsheet"
    ns1= "urn:schemas-microsoft-com:office:excel"
    def __init__( self, aFileName, *sheets ):
        """Initialize a XML source.
        XXX - Create better sheet filtering here, in the constructor.
        @param aFileName: the file name.
        """
        super( SSXML_Source, self ).__init__( aFileName )
        self.log= logging.getLogger( "source.PCIX_XLS" )
        self.dom= etree.parse( aFileName ).getroot()
    def sheets( self ):
        for wb in self.dom.getiterator("{%s}Workbook" % ( self.ns0, ) ):
            for ws in wb.getiterator( "{%s}Worksheet" % ( self.ns0, ) ):
                yield ws
    def rows( self ):
        for s in self.sheets():
            print s.attrib["{%s}Name" % ( self.ns0, ) ]
            for t in s.getiterator( "{%s}Table" % ( self.ns0, ) ):
                for r in t.getiterator( "{%s}Row" % ( self.ns0, ) ):
                    # The XML may not be really useful.
                    # In some cases, you may have to convert to something useful
                    yield r
</snippet></ROW><ROW><id>301630</id><snippet>"""This is your target object.  
It's part of the problem domain; it rarely changes.
"""
class MyTargetObject( object ):
    def __init__( self ):
        self.someAttr= ""
        self.anotherAttr= ""
        self.this= 0
        self.that= 3.14159
    def aMethod( self ):
        """etc."""
        pass
</snippet></ROW><ROW><id>301630</id><snippet>"""One of many builders.  This changes all the time to fit
specific needs and situations.  The goal is to keep this
short and to-the-point so that it has the mapping and nothing
but the mapping.
"""

import model

class MyTargetBuilder( object ):
    def makeFromXML( self, element ):
        result= model.MyTargetObject()
        result.someAttr= element.findtext( "Some" )
        result.anotherAttr= element.findtext( "Another" )
        result.this= int( element.findtext( "This" ) )
        result.that= float( element.findtext( "that" ) )
        return result
</snippet></ROW><ROW><id>301630</id><snippet>"""An application that maps from XML to the domain object
using a configurable "builder".
"""
import model
import source
import builder_1
import builder_2
import builder_today

# Configure this:  pick a builder is appropriate for the data:
b= builder_today.MyTargetBuilder()

s= source.SSXML_Source( sys.argv[1] )
for r in s.rows():
    data= b.makeFromXML( r )
    # ... persist data with a DB save or file write
</snippet></ROW><ROW><id>302099</id><snippet>urllib2</snippet></ROW><ROW><id>302099</id><snippet>httplib</snippet></ROW><ROW><id>302099</id><snippet>urllib2</snippet></ROW><ROW><id>302099</id><snippet>HTTPRedirectHandler</snippet></ROW><ROW><id>302099</id><snippet>HTTPRedirectHandler</snippet></ROW><ROW><id>302099</id><snippet>cookie_handler= urllib2.HTTPCookieProcessor( self.cookies )
redirect_handler= HTTPRedirectHandler()
opener = urllib2.build_opener(redirect_handler,cookie_handler)
</snippet></ROW><ROW><id>302099</id><snippet>opener</snippet></ROW><ROW><id>302099</id><snippet>HTTPHandler</snippet></ROW><ROW><id>302847</id><snippet>djangosettings.py</snippet></ROW><ROW><id>302847</id><snippet>DATABASE_ENGINE   = 'oracle'
DATABASE_HOST     = 'localhost'
DATABASE_NAME     = 'ORCL'
DATABASE_USER     = 'scott' 
DATABASE_PASSWORD = 'tiger'
</snippet></ROW><ROW><id>302847</id><snippet>import os
os.environ["DJANGO_SETTINGS_MODULE"] = "djangosettings"
</snippet></ROW><ROW><id>303086</id><snippet>def OnDelete(self, event):
    assert self.current, "invalid delete operation"
    try:
        os.remove(os.path.join(self.cwd, self.current))
</snippet></ROW><ROW><id>303225</id><snippet>import shutil

shutil.rmtree('/folder_name')
</snippet></ROW><ROW><id>303597</id><snippet>env=Environment(CPPPATH='/usr/include/glib-2.0/:/usr/lib/glib-2.0/include:include',
                CPPDEFINES=[],
                LIBS=['glib-2.0']) 

if ARGUMENTS.get('debug', 0):
    env.Append(CCFLAGS = ' -g')

env.Program('template', Glob('src/*.cc'))
</snippet></ROW><ROW><id>303697</id><snippet>error, = exc.args
</snippet></ROW><ROW><id>303697</id><snippet>[error] = exc.args
</snippet></ROW><ROW><id>303697</id><snippet>(foo,)</snippet></ROW><ROW><id>304220</id><snippet>etree.findall('.//*')
</snippet></ROW><ROW><id>304679</id><snippet>def f(n):
    return '&lt;' + str(num) + '&gt;'

class C(object):

    v = f(9)
    w = f(42)
</snippet></ROW><ROW><id>304679</id><snippet>&gt;&gt;&gt; f(4)
'&lt;4&gt;'
</snippet></ROW><ROW><id>304896</id><snippet>#!/usr/bin/env python
</snippet></ROW><ROW><id>304896</id><snippet>chmod +x myfile.py
</snippet></ROW><ROW><id>304896</id><snippet>./myfile.py
</snippet></ROW><ROW><id>305639</id><snippet>sqlite&gt; .tab
job         snmptarget  t1          t2          t3        
sqlite&gt; select name from sqlite_master where type = 'table';
job
t1
t2
snmptarget
t3

sqlite&gt; .schema job
CREATE TABLE job (
    id INTEGER PRIMARY KEY,
    data VARCHAR
);
sqlite&gt; select sql from sqlite_master where type = 'table' and name = 'job';
CREATE TABLE job (
    id INTEGER PRIMARY KEY,
    data VARCHAR
)
</snippet></ROW><ROW><id>305649</id><snippet>def OW60(sign=1):
    r1 = random.randint (1, 30)
    r2 = random.randint (1, 30)
    val = sign * (r1 + r2)

    islow  = (r1&lt;=5)  + (r2&lt;=5)
    ishigh = (r1&gt;=26) + (r2&gt;=26)

    if islow == 2 or ishigh == 2:
        return val + OW60(1)
    elif islow == 1 and ishigh == 1:
        return val + OW60(-1)
    else:
        return val
</snippet></ROW><ROW><id>305649</id><snippet>F(x) = the probability that OW60(1) returns a value ≤ x.
</snippet></ROW><ROW><id>305649</id><snippet>G(x) = the probability that OW60(-1) returns a value ≤ x.
</snippet></ROW><ROW><id>305649</id><snippet>F(x) = (1/900)(2+F(x-2) + 3+F(x-3) + ... + 59+F(x-59) + 60+F(x-60))
</snippet></ROW><ROW><id>305649</id><snippet>G(x) = (1/900)(-2+F(x-2) + (-3)+F(x-3) + ... + (-59)+F(x-59) + (-60)+F(x-60))
</snippet></ROW><ROW><id>305649</id><snippet>V(x) = [F(x-60) G(x-60) ... F(x-2) G(x-2) F(x-1) G(x-1) F(x) G(x)]
</snippet></ROW><ROW><id>305649</id><snippet>V(x) = A*V(x-1) + B
</snippet></ROW><ROW><id>305980</id><snippet>testFunc.im_class
</snippet></ROW><ROW><id>305980</id><snippet>im_class</snippet></ROW><ROW><id>305980</id><snippet>im_self</snippet></ROW><ROW><id>306277</id><snippet>self</snippet></ROW><ROW><id>306277</id><snippet>from functools import wraps  # use this to preserve function signatures and docstrings
def logger(func):
    @wraps(func)
    def with_logging(*args, **kwargs):
        print "Entering %s.%s" % (args[0].__class__.__name__, func.__name__)
        return func(*args, **kwargs)
    return with_logging

class C(object):
    @logger
    def f(self):
        pass

C().f()
</snippet></ROW><ROW><id>306277</id><snippet>class B(C):
    pass

b = B()
b.f()
</snippet></ROW><ROW><id>306277</id><snippet>Entering B.f</snippet></ROW><ROW><id>306277</id><snippet>Entering C.f</snippet></ROW><ROW><id>306353</id><snippet>&gt;&gt;&gt; a = 256
&gt;&gt;&gt; b = 256
&gt;&gt;&gt; id(a)
9987148
&gt;&gt;&gt; id(b)
9987148
&gt;&gt;&gt; a = 257
&gt;&gt;&gt; b = 257
&gt;&gt;&gt; id(a)
11662816
&gt;&gt;&gt; id(b)
11662828
</snippet></ROW><ROW><id>306417</id><snippet>foo = ['a', 'b', 'c', 'd', 'e']
from random import choice
print choice(foo)
</snippet></ROW><ROW><id>306936</id><snippet>if __name__ == "__main__":
    app = wx.App(redirect=False) #or 0
    app.MainLoop()
</snippet></ROW><ROW><id>307018</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; ctypes.windll.user32.RegisterRawInputDevices
&lt;_FuncPtr object at 0x01FCFDC8&gt;
</snippet></ROW><ROW><id>307099</id><snippet>def save(self, **kwargs):
    super(Publisher, self).save(**kwargs)

    for item in self.item_set.all():
        item.code = "%s - whatever" % item.code
</snippet></ROW><ROW><id>307099</id><snippet>Item</snippet></ROW><ROW><id>307099</id><snippet>Publisher</snippet></ROW><ROW><id>307501</id><snippet>s = Sound() 
s.read('sound.wav') 
s.play()
</snippet></ROW><ROW><id>307517</id><snippet>from distutils.core import setup
import py2exe

setup (name = "script2compile",
       console=['script2compile.pyw'],
       version = "1.4",
       author = "me",
       author_email="somemail@me.com",
       url="myurl.com",
       windows = [{
                    "script":"script2compile.pyw",
                    "icon_resources":[(1,"./ICONS/app.ico")]  # Icon file to use for display
                 }],
       # put packages/libraries to include in the "packages" list
       options = {"py2exe":{"packages": [   "pickle",
                                            "csv",
                                            "Tkconstants",
                                            "Tkinter",
                                            "tkFileDialog",
                                            "pyexpat",
                                            "xml.dom.minidom",
                                            "win32pdh",
                                            "win32pdhutil",
                                            "win32api",
                                            "win32con",
                                            "subprocess", 
                                        ]}} 

       )

import win32pdh
import win32pdhutil
import win32api
</snippet></ROW><ROW><id>308210</id><snippet>bin</snippet></ROW><ROW><id>308210</id><snippet>in</snippet></ROW><ROW><id>308210</id><snippet>from jarray import zeros
from java.io import BufferedInputStream, FileInputStream, FileOutputStream
from java.util.zip import ZipEntry, ZipOutputStream

def test(file):
    zos = ZipOutputStream(FileOutputStream(file + ".zip"))
    buf = zeros(1024, 'b')
    zipEntry = ZipEntry(file)
    fin = FileInputStream(file)
    bin = BufferedInputStream(fin)
    zos.putNextEntry(zipEntry)
    len = bin.read(buf)
    while len &gt;= 0:
        zos.write(buf, 0, len)
        len = bin.read(buf)
    bin.close()
    zos.closeEntry()
</snippet></ROW><ROW><id>308260</id><snippet>ls /usr/bin/ipython*
/usr/bin/ipython  /usr/bin/ipython2.4  /usr/bin/ipython2.5
</snippet></ROW><ROW><id>308984</id><snippet>def on_TestClass_destroy(self, widget):
    gtk.main_quit()
</snippet></ROW><ROW><id>309000</id><snippet>def logged(func):
    def with_logging(*args, **kwargs):
        print func.__name__ + " was called"
        return func(*args, **kwargs)
    return with_logging
</snippet></ROW><ROW><id>309000</id><snippet>@logged
def f(x):
   """does some math"""
   return x + x * x
</snippet></ROW><ROW><id>309000</id><snippet>def f(x):
    """does some math"""
    return x + x * x
f = logged(f)
</snippet></ROW><ROW><id>309000</id><snippet>print f.__name__
</snippet></ROW><ROW><id>309000</id><snippet>with_logging</snippet></ROW><ROW><id>309000</id><snippet>x</snippet></ROW><ROW><id>309000</id><snippet>*args</snippet></ROW><ROW><id>309000</id><snippet>**kwargs</snippet></ROW><ROW><id>309000</id><snippet>functools.wraps</snippet></ROW><ROW><id>309000</id><snippet>wraps</snippet></ROW><ROW><id>309000</id><snippet>from functools import wraps
def logged(func):
    @wraps(func)
    def with_logging(*args, **kwargs):
        print func.__name__ + " was called"
        return func(*args, **kwargs)
    return with_logging

@logged
def f(x):
   """does some math"""
   return x + x * x

print f.__name__  # prints 'f'
print f.__doc__   # prints 'does some math'
</snippet></ROW><ROW><id>309563</id><snippet>Exception</snippet></ROW><ROW><id>309563</id><snippet>dict</snippet></ROW><ROW><id>309563</id><snippet>&gt;&gt;&gt; class C(object): pass
...
&gt;&gt;&gt; '__module__' in C.__dict__
True
&gt;&gt;&gt; '__module__' in dict.__dict__
False
&gt;&gt;&gt; '__module__' in Exception.__dict__
False
</snippet></ROW><ROW><id>309563</id><snippet>Exception</snippet></ROW><ROW><id>309563</id><snippet>dict</snippet></ROW><ROW><id>309563</id><snippet>&gt;&gt;&gt; class foo(dict, Exception):
...     pass
... 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
TypeError: Error when calling the metaclass bases
    multiple bases have instance lay-out conflict
</snippet></ROW><ROW><id>310635</id><snippet>from cStringIO import StringIO

s = "My very long string I want to read like a file"
file_like_string = StringIO(s)
data = file_like_string.read(10)
</snippet></ROW><ROW><id>310785</id><snippet>kwargs = {
    '{0}__{1}'.format('name', 'startswith'): 'A',
    '{0}__{1}'.format('name', 'endswith'): 'Z'
}

Person.objects.filter(**kwargs)
</snippet></ROW><ROW><id>311214</id><snippet>^</snippet></ROW><ROW><id>311214</id><snippet>^b</snippet></ROW><ROW><id>311214</id><snippet>[]</snippet></ROW><ROW><id>311214</id><snippet>[ASDF]</snippet></ROW><ROW><id>311214</id><snippet>A</snippet></ROW><ROW><id>311214</id><snippet>S</snippet></ROW><ROW><id>311214</id><snippet>D</snippet></ROW><ROW><id>311214</id><snippet>F</snippet></ROW><ROW><id>311214</id><snippet>[0-9]</snippet></ROW><ROW><id>311214</id><snippet>sed</snippet></ROW><ROW><id>311214</id><snippet>awk</snippet></ROW><ROW><id>311214</id><snippet>[[:digit:]]</snippet></ROW><ROW><id>311214</id><snippet>\d</snippet></ROW><ROW><id>311214</id><snippet>^b\d</snippet></ROW><ROW><id>311214</id><snippet>\d\d\d</snippet></ROW><ROW><id>311214</id><snippet>{}</snippet></ROW><ROW><id>311214</id><snippet>{x,y}</snippet></ROW><ROW><id>311214</id><snippet>^b\d{3}</snippet></ROW><ROW><id>311214</id><snippet>^b\d{3}cv</snippet></ROW><ROW><id>311214</id><snippet>^b\d{3}cv\d{2}</snippet></ROW><ROW><id>311214</id><snippet>.</snippet></ROW><ROW><id>311214</id><snippet>^\d{3}cv\d{2}_release\.ext</snippet></ROW><ROW><id>311214</id><snippet>$</snippet></ROW><ROW><id>311214</id><snippet>^b\d{3}cv\d{2}_release\.ext$
</snippet></ROW><ROW><id>311236</id><snippet>NLST</snippet></ROW><ROW><id>311236</id><snippet>LIST</snippet></ROW><ROW><id>311236</id><snippet>LIST</snippet></ROW><ROW><id>311236</id><snippet>LIST</snippet></ROW><ROW><id>311236</id><snippet>MLST</snippet></ROW><ROW><id>311236</id><snippet>MLSD</snippet></ROW><ROW><id>311236</id><snippet>NLST</snippet></ROW><ROW><id>311236</id><snippet>NLST</snippet></ROW><ROW><id>311236</id><snippet>LIST</snippet></ROW><ROW><id>311236</id><snippet>LIST</snippet></ROW><ROW><id>311236</id><snippet>NLST</snippet></ROW><ROW><id>311304</id><snippet>clean_post_data</snippet></ROW><ROW><id>311304</id><snippet>clean</snippet></ROW><ROW><id>311344</id><snippet>class FileFacts( models.Model ):
    content_type = models.ForeignKey(ContentType)
    object_id = models.PositiveIntegerField()
    content_object = generic.GenericForeignKey()

class DownloadFile( models.Model ):
    facts = models.ForeignKey( FileFacts )
    file = models.FileField(upload_to='files/%Y/%m/%d')

class InlineImage( models.Model ):
    facts = models.ForeignKey( FileFacts )
    file = models.ImageField(upload_to='files/%Y/%m/%d')
</snippet></ROW><ROW><id>311604</id><snippet>[x.id for x
 in self.db.query(schema.allPostsUuid).execute(timeout=20)
 if x.type == 'post' 
    and x.deleted is not False
    and ...
    and ...]
</snippet></ROW><ROW><id>311604</id><snippet>transform = lambda x: x.id
results = self.db.query(schema.allPostsUuid).execute(timeout=20)
condition = lambda x: x.deleted is not False and ... and ...
[transform(x) for x in results if condition(x)]
</snippet></ROW><ROW><id>311646</id><snippet>os.system("dir")
</snippet></ROW><ROW><id>311655</id><snippet>for date in mylist :
    print str(date)
</snippet></ROW><ROW><id>311655</id><snippet>import datetime
mylist = []
today = datetime.date.today()
mylist.append(today)
print mylist[0] # print the date object, not the container ;-)
2008-11-22

# It's better to always use str() because :

print "This is a new day : ", mylist[0] # will work
This is a new day : 2008-11-22

print "This is a new day : " + mylist[0] # will crash
cannot concatenate 'str' and 'datetime.date' objects

print "This is a new day : " + str(mylist[0]) 
This is a new day : 2008-11-22
</snippet></ROW><ROW><id>311655</id><snippet>print today.strftime('We are the %d, %b %Y')
'We are the 22, Nov 2008'
</snippet></ROW><ROW><id>311778</id><snippet>&gt;&gt;&gt; line = "$GPRMC,199304.973,3248.7780,N,11355.7832,W,1,06,02.2,25722.5,M,,,*00"
&gt;&gt;&gt; line = line.split(",")
&gt;&gt;&gt; neededData = (float(line[2]), line[3], float(line[4]), line[5], float(line[9]))
&gt;&gt;&gt; print neededData
(3248.7779999999998, 'N', 11355.7832, 'W', 25722.5)
</snippet></ROW><ROW><id>311833</id><snippet>def doAppend( size=10000 ):
    result = []
    for i in range(size):
        message= "some unique object %d" % ( i, )
        result.append(message)
    return result

def doAllocate( size=10000 ):
    result=size*[None]
    for i in range(size):
        message= "some unique object %d" % ( i, )
        result[i]= message
    return result
</snippet></ROW><ROW><id>311833</id><snippet>simple append 0.0102
pre-allocate  0.0098
</snippet></ROW><ROW><id>311968</id><snippet>try:
    x = int(rowColumn[1][3].replace(',','').strip('$'))
except ValueError, e:
    x = None # rowColumn[1][3] was not an integer
</snippet></ROW><ROW><id>312270</id><snippet>def handle_quit():
  quit()

def handle_left():
    curpiece.shift(-1, 0)
    shadowpiece = curpiece.clone(); setupshadow(shadowpiece)

def handle_right():
    curpiece.shift(1, 0)
    shadowpiece = curpiece.clone(); setupshadow(shadowpiece)

def handle_pause():
    if not paused:
        paused = True

branch = {
  K_q: handle_quit
  K_e: handle_pause
  K_LEFT: handle_left
  K_RIGHT: handle_right
}

for event in pygame.event.get():
    if event.type == KEYDOWN:
        branch[event.key]()
</snippet></ROW><ROW><id>312317</id><snippet>imaplib.IMAP4_SSL</snippet></ROW><ROW><id>312317</id><snippet>email.message_from_string</snippet></ROW><ROW><id>312423</id><snippet>from psycopg2.extensions import adapt

print adapt("Hello World'; DROP DATABASE World;")
</snippet></ROW><ROW><id>312423</id><snippet>from psycopg2.extensions import register_adapter

register_adapter(mytype, myadapter)
</snippet></ROW><ROW><id>312464</id><snippet>def chunks(l, n):
    """ Yield successive n-sized chunks from l.
    """
    for i in xrange(0, len(l), n):
        yield l[i:i+n]
</snippet></ROW><ROW><id>312464</id><snippet>import pprint
pprint.pprint(list(chunks(range(10, 75), 10)))
[[10, 11, 12, 13, 14, 15, 16, 17, 18, 19],
 [20, 21, 22, 23, 24, 25, 26, 27, 28, 29],
 [30, 31, 32, 33, 34, 35, 36, 37, 38, 39],
 [40, 41, 42, 43, 44, 45, 46, 47, 48, 49],
 [50, 51, 52, 53, 54, 55, 56, 57, 58, 59],
 [60, 61, 62, 63, 64, 65, 66, 67, 68, 69],
 [70, 71, 72, 73, 74]]
</snippet></ROW><ROW><id>312677</id><snippet>$ python convert.py -i 'video_*'
</snippet></ROW><ROW><id>312677</id><snippet>-i</snippet></ROW><ROW><id>312677</id><snippet>python convert.py -i video_1 video_2 video_3 video_4 video_5 video_6</snippet></ROW><ROW><id>312677</id><snippet>-i</snippet></ROW><ROW><id>312677</id><snippet>args</snippet></ROW><ROW><id>312677</id><snippet>options.input</snippet></ROW><ROW><id>312727</id><snippet>class Computer(object):
    """Docstrings are used kind of like Javadoc to document classes and
    members.  They are the first thing inside a class or method.

    You probably want to extend object, to make it a "new-style" class.
    There are reasons for this that are a bit complex to explain."""

    # everything down here is a static variable, unlike in Java or C# where
    # declarations here are for what members a class has.  All instance
    # variables in Python are dynamic, unless you specifically tell Python
    # otherwise.
    defaultName = "belinda"
    defaultRes = (1024, 768)
    defaultIP = "192.168.5.307"

    def __init__(self, name=defaultName, resolution=defaultRes, ip=defaultIP):
        """Constructors in Python are called __init__.  Methods with names
        like __something__ often have special significance to the Python
        interpreter.

        The first argument to any class method is a reference to the current
        object, called "self" by convention.

        You can use default function arguments instead of function
        overloading."""
        self.name = name
        self.resolution = resolution
        self.ip = ip
        # and so on

    def printStats(self):
        """You could instead use a __str__(self, ...) function to return this
        string.  Then you could simply do "print(str(computer))" if you wanted
        to."""
        print "Computer Statistics: --------------------------------"
        print "Name:" + self.name
        print "IP:" + self.ip
        print "ScreenSize:" , self.resolution //cannot concatenate 'str' and 'tuple' objects
        print "-----------------------------------------------------"
</snippet></ROW><ROW><id>312741</id><snippet>(setq load-path
      (append (list nil
                    "~/.emacs.d/python-mode-1.0/"
            "~/.emacs.d/pymacs/"
            "~/.emacs.d/ropemacs-0.6"
                    )
              load-path))
(setq py-shell-name "ipython")

(defadvice py-execute-buffer (around python-keep-focus activate)
  "return focus to python code buffer"
  (save-excursion ad-do-it))

(setenv "PYMACS_PYTHON" "python2.5") 
(require 'pymacs)

(pymacs-load "ropemacs" "rope-")

(provide 'python-programming)
</snippet></ROW><ROW><id>314719</id><snippet>class Animal(models.Model):
    def __unicode__(self):
        if hasattr(self, 'dog'):
            return self.dog.__unicode__()
        elif hasattr(self, 'cat'):
            return self.cat.__unicode__()
        else:
            return 'Animal'
</snippet></ROW><ROW><id>314913</id><snippet>Window&gt;Preferences&gt;Pydev&gt;Interpreter-Python</snippet></ROW><ROW><id>314913</id><snippet>New</snippet></ROW><ROW><id>314913</id><snippet>sudo python setup.py develop</snippet></ROW><ROW><id>314913</id><snippet>Run&gt;Open Debug Dialog</snippet></ROW><ROW><id>314913</id><snippet>Main Module</snippet></ROW><ROW><id>314913</id><snippet>/usr/bin/paster</snippet></ROW><ROW><id>314913</id><snippet>Arguments</snippet></ROW><ROW><id>314913</id><snippet>Program arguments</snippet></ROW><ROW><id>314913</id><snippet>serve /locationOfYourProject/development.ini</snippet></ROW><ROW><id>314913</id><snippet>--reload</snippet></ROW><ROW><id>315430</id><snippet>import re
import os
r = re.compile(r'\d{2}.+gif$')
for root, dirs, files in os.walk('/home/vinko'):
  l = [os.path.join(root,x) for x in files if r.match(x)]
  if l: print l #Or append to a global list, whatever
</snippet></ROW><ROW><id>315684</id><snippet>",".join( map(str, record_ids) )
</snippet></ROW><ROW><id>315684</id><snippet> ",".join( list_of_strings ) </snippet></ROW><ROW><id>315684</id><snippet>map( str, list )</snippet></ROW><ROW><id>316253</id><snippet>"%.15g" % f
</snippet></ROW><ROW><id>316253</id><snippet>format(f, ".15g")
</snippet></ROW><ROW><id>316253</id><snippet>Decimal</snippet></ROW><ROW><id>316559</id><snippet>from twisted.internet import reactor, protocol, task

class MyProtocol(protocol.Protocol):
    def connectionMade(self):
        self.factory.clientConnectionMade(self)
    def connectionLost(self, reason):
        self.factory.clientConnectionLost(self)

class MyFactory(protocol.Factory):
    protocol = MyProtocol
    def __init__(self):
        self.clients = []
        self.lc = task.LoopingCall(self.announce)
        self.lc.start(10)

    def announce(self):
        for client in self.clients:
            client.transport.write("10 seconds has passed\n")

    def clientConnectionMade(self, client):
        self.clients.append(client)

    def clientConnectionLost(self, client):
        self.clients.remove(client)

myfactory = MyFactory()
reactor.listenTCP(9000, myfactory)
reactor.run()
</snippet></ROW><ROW><id>317385</id><snippet>%%</snippet></ROW><ROW><id>317385</id><snippet>%</snippet></ROW><ROW><id>317385</id><snippet>%sourcedest</snippet></ROW><ROW><id>317385</id><snippet>cursor.execute('INSERT INTO mastertickets (BLAH, FOO) VALUES (%s, %s)', (self.tkt.id, n))
</snippet></ROW><ROW><id>317421</id><snippet>name[0].firstChild.nodeValue
</snippet></ROW><ROW><id>317583</id><snippet>&gt;&gt;&gt; import socket
&gt;&gt;&gt; packed_n= socket.inet_aton("128.0.0.1")
&gt;&gt;&gt; import struct
&gt;&gt;&gt; struct.unpack( "!L", packed_n )
(2147483649L,)
&gt;&gt;&gt; hex(_[0])
'0x80000001L'
</snippet></ROW><ROW><id>318140</id><snippet>ctypes.cast</snippet></ROW><ROW><id>318140</id><snippet>&gt;&gt;&gt; import ctypes
&gt;&gt;&gt; p1= ctypes.c_char_p("hi mom")
&gt;&gt;&gt; ctypes.cast( p1, ctypes.c_void_p )
c_void_p(11133300)
</snippet></ROW><ROW><id>318419</id><snippet>which python</snippet></ROW><ROW><id>318419</id><snippet>/cygdrive/c/Python25/python.exe</snippet></ROW><ROW><id>318419</id><snippet>/usr/local/bin/python</snippet></ROW><ROW><id>318864</id><snippet>&gt;&gt;&gt; import pickle
&gt;&gt;&gt; d1 = {1:'one', 2:'two', 3:'three'}
&gt;&gt;&gt; d2 = {1:'eleven', 2:'twelve', 3:'thirteen'}
&gt;&gt;&gt; d3 = {1:'twenty-one', 2:'twenty-two', 3:'twenty-three'}
&gt;&gt;&gt; data = [d1, d2, d3]
&gt;&gt;&gt; out = open('data.pickle', 'wb')
&gt;&gt;&gt; pickle.dump(data, out)
&gt;&gt;&gt; out.close()
&gt;&gt;&gt; input = open('data.pickle')    
&gt;&gt;&gt; data2 = pickle.load(input)
&gt;&gt;&gt; data == data2
True
</snippet></ROW><ROW><id>318869</id><snippet>import numpy

my_ar = numpy.array((0,5,10))
print my_ar

transformed = numpy.array(map(lambda x:numpy.array((x,x*2,x*3)), my_ar))
print transformed

print transformed.shape
</snippet></ROW><ROW><id>319435</id><snippet>string1 = 'Hello'
string2 = 'hello'

if string1.lower() == string2.lower():
    print "The strings are the same (case insensitive)"
else:
    print "The strings are not the same (case insensitive)"
</snippet></ROW><ROW><id>319878</id><snippet>a/(sqrt(2)*inverseErf(P))
</snippet></ROW><ROW><id>319878</id><snippet>erfinv</snippet></ROW><ROW><id>319878</id><snippet>a/(math.sqrt(2)*erfinv(P))
</snippet></ROW><ROW><id>319943</id><snippet>&lt;form action="/submitpicture/" method="POST" enctype="multipart/form-data" &gt;
</snippet></ROW><ROW><id>320252</id><snippet>def children(self):
    stack = [self.entities]
    push = stack.append
    pop = stack.pop
    while stack: 
        for e in pop():
            yield e
            if e.entities:
                push(e.entities)
</snippet></ROW><ROW><id>320252</id><snippet>children     :  5.53942348004
children_bind:  4.77636131253
</snippet></ROW><ROW><id>320712</id><snippet>&gt;&gt;&gt; import atexit
&gt;&gt;&gt; import sys
&gt;&gt;&gt; import time
&gt;&gt;&gt; 
&gt;&gt;&gt; 
&gt;&gt;&gt;
&gt;&gt;&gt; def cleanup():
...     timeout_sec = 5
...     for p in all_processes: # list of your processes
...         p_sec = 0
...         for second in range(timeout_sec):
...             if p.poll() == None:
...                 time.sleep(1)
...                 p_sec += 1
...         if p_sec &gt;= timeout_sec:
...             p.kill() # supported from python 2.6
...     print 'cleaned up!'
...
&gt;&gt;&gt;
&gt;&gt;&gt; atexit.register(cleanup)
&gt;&gt;&gt;
&gt;&gt;&gt; sys.exit()
cleaned up!
</snippet></ROW><ROW><id>320712</id><snippet>    def win_kill(pid):
        '''kill a process by specified PID in windows'''
        import win32api
        import win32con

        hProc = None
        try:
            hProc = win32api.OpenProcess(win32con.PROCESS_TERMINATE, 0, pid)
            win32api.TerminateProcess(hProc, 0)
        except Exception:
            return False
        finally:
            if hProc != None:
                hProc.Close()

        return True
</snippet></ROW><ROW><id>320862</id><snippet>materials = 1 + (level * 1)
</snippet></ROW><ROW><id>320862</id><snippet>level= raw_input('blah')
try:
    level= int(level)
except ValueError:
    # user put something non-numeric in, tell them off
</snippet></ROW><ROW><id>320951</id><snippet>&gt;&gt;&gt; import locale
&gt;&gt;&gt; locale.setlocale( locale.LC_ALL, '' )
'English_United States.1252'
&gt;&gt;&gt; locale.currency( 188518982.18 )
'$188518982.18'
&gt;&gt;&gt; locale.currency( 188518982.18, grouping=True )
'$188,518,982.18'
</snippet></ROW><ROW><id>321134</id><snippet>if msg.is_multipart():
    for part in msg.get_payload():
          """ Process message, but do not recurse """
          filename = part.get_filename()
</snippet></ROW><ROW><id>321240</id><snippet>class NonOverridable(type):
    def __new__(self, name, bases, dct):
        if bases and "roo" in dct:
            raise SyntaxError, "Overriding roo is not allowed"
        return type.__new__(self, name, bases, dct)

class foo:
    __metaclass__=NonOverridable
    ...
</snippet></ROW><ROW><id>321322</id><snippet>page = urllib.urlopen("http://www.woarl.com/board/ucp.php?mode=login"[logindata])
</snippet></ROW><ROW><id>321322</id><snippet>page = urllib.urlopen("http://www.woarl.com/board/ucp.php?mode=login", [logindata])
</snippet></ROW><ROW><id>321322</id><snippet>page = urllib2.urlopen("http://www.woarl.com/board/ucp.php?mode=login", logindata)
</snippet></ROW><ROW><id>321893</id><snippet>    obj1 = objectify.fromstring(expect)
    expect = etree.tostring(obj1)        
    obj2 = objectify.fromstring(xml)
    result = etree.tostring(obj2)        
    self.assertEquals(expect, result)
</snippet></ROW><ROW><id>322059</id><snippet>/System/Library/Frameworks/Python.framework/Versions/2.5/bin/python2.5</snippet></ROW><ROW><id>323039</id><snippet>List&lt;Foo&gt; fooList = new List&lt;Foo&gt;();
IEnumerable&lt;Foo&gt; extract = from foo in fooList where foo.Bar &gt; 10 select Foo.Name.ToUpper();
</snippet></ROW><ROW><id>323733</id><snippet>newList = oldList</snippet></ROW><ROW><id>323733</id><snippet>oldList</snippet></ROW><ROW><id>323733</id><snippet>newList</snippet></ROW><ROW><id>323733</id><snippet>newList = oldList[:]</snippet></ROW><ROW><id>323733</id><snippet>[:]</snippet></ROW><ROW><id>323905</id><snippet>class Car(models.Model):
    manufacturer = models.ForeignKey('production.Manufacturer')
</snippet></ROW><ROW><id>324141</id><snippet>from os.path import basename, splitext

pathname = "/adda/adas/sdas/hello.txt"
name, extension = splitext(basename(pathname))
print name # --&gt; "hello"
</snippet></ROW><ROW><id>324653</id><snippet>from collections import defaultdict
myIndex = defaultdict(list)
myIndex[someId].append(someVal)
</snippet></ROW><ROW><id>324653</id><snippet>defaultdict</snippet></ROW><ROW><id>324653</id><snippet>&gt;&gt;&gt; s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)]
&gt;&gt;&gt; d = defaultdict(list)
&gt;&gt;&gt; for k, v in s:
        d[k].append(v)

&gt;&gt;&gt; d.items()
[('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]
</snippet></ROW><ROW><id>324989</id><snippet>enc = msg['Content-Transfer-Encoding']
</snippet></ROW><ROW><id>325038</id><snippet>readonly</snippet></ROW><ROW><id>325038</id><snippet>class ItemForm(ModelForm):
    def __init__(self, *args, **kwargs):
        super(ItemForm, self).__init__(*args, **kwargs)
        instance = getattr(self, 'instance', None)
        if instance and instance.pk:
            self.fields['sku'].widget.attrs['readonly'] = True

    def clean_sku(self):
        instance = getattr(self, 'instance', None)
        if instance and instance.pk:
            return instance.sku
        else:
            return self.cleaned_data['sku']
</snippet></ROW><ROW><id>325038</id><snippet>if instance and instance.pk</snippet></ROW><ROW><id>325038</id><snippet>disabled</snippet></ROW><ROW><id>325038</id><snippet>readonly</snippet></ROW><ROW><id>325038</id><snippet>POST</snippet></ROW><ROW><id>325066</id><snippet>save</snippet></ROW><ROW><id>325066</id><snippet>QuerySet</snippet></ROW><ROW><id>325066</id><snippet>update</snippet></ROW><ROW><id>325066</id><snippet>UPDATE</snippet></ROW><ROW><id>325066</id><snippet>Something.objects.filter(x__in=['a', 'b', 'c']).update(a='something')
</snippet></ROW><ROW><id>325149</id><snippet>import os
print os.popen('php YourScript.php').read()</snippet></ROW><ROW><id>325295</id><snippet>import django</snippet></ROW><ROW><id>325295</id><snippet>ActivePython 2.5.1.1 (ActiveState Software Inc.) based on
Python 2.5.1 (r251:54863, May  1 2007, 17:47:05) [MSC v.1310 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import django
&gt;&gt;&gt;
</snippet></ROW><ROW><id>325295</id><snippet>setuptools</snippet></ROW><ROW><id>325295</id><snippet>easy_install</snippet></ROW><ROW><id>325295</id><snippet>setup.py</snippet></ROW><ROW><id>325295</id><snippet>site-packages</snippet></ROW><ROW><id>325295</id><snippet>.pth</snippet></ROW><ROW><id>325295</id><snippet>easy-install.pth</snippet></ROW><ROW><id>325295</id><snippet>django.pth</snippet></ROW><ROW><id>325456</id><snippet>*** finding dlls needed ***
error: MSVCP90.dll: No such file or directory
</snippet></ROW><ROW><id>325474</id><snippet>import subprocess
process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
process.wait()
print process.returncode
</snippet></ROW><ROW><id>325528</id><snippet>import threading
import ctypes

class StoppableThread(threading.Thread):
    """Thread class with a stop() method. The thread itself has to check
    regularly for the stopped() condition."""

    def __init__(self):
        super(StoppableThread, self).__init__()
        self._stop = threading.Event()

    def stop(self):
        self._stop.set()

    def stopped(self):
        return self._stop.isSet()
</snippet></ROW><ROW><id>325528</id><snippet>def _async_raise(tid, exctype):
    '''Raises an exception in the threads with id tid'''
    if not inspect.isclass(exctype):
        raise TypeError("Only types can be raised (not instances)")
    res = ctypes.pythonapi.PyThreadState_SetAsyncExc(tid,
                                                  ctypes.py_object(exctype))
    if res == 0:
        raise ValueError("invalid thread id")
    elif res != 1:
        # "if it returns a number greater than one, you're in trouble,
        # and you should call it again with exc=NULL to revert the effect"
        ctypes.pythonapi.PyThreadState_SetAsyncExc(tid, 0)
        raise SystemError("PyThreadState_SetAsyncExc failed")

class ThreadWithExc(threading.Thread):
    '''A thread class that supports raising exception in the thread from
       another thread.
    '''
    def _get_my_tid(self):
        """determines this (self's) thread id

        CAREFUL : this function is executed in the context of the caller
        thread, to get the identity of the thread represented by this
        instance.
        """
        if not self.isAlive():
            raise threading.ThreadError("the thread is not active")

        # do we have it cached?
        if hasattr(self, "_thread_id"):
            return self._thread_id

        # no, look for it in the _active dict
        for tid, tobj in threading._active.items():
            if tobj is self:
                self._thread_id = tid
                return tid

        # TODO: in python 2.6, there's a simpler way to do : self.ident

        raise AssertionError("could not determine the thread's id")

    def raiseExc(self, exctype):
        """Raises the given exception type in the context of this thread.

        If the thread is busy in a system call (time.sleep(),
        socket.accept(), ...), the exception is simply ignored.

        If you are sure that your exception should terminate the thread,
        one way to ensure that it works is:

            t = ThreadWithExc( ... )
            ...
            t.raiseExc( SomeException )
            while t.isAlive():
                time.sleep( 0.1 )
                t.raiseExc( SomeException )

        If the exception is to be caught by the thread, you need a way to
        check that your thread has caught it.

        CAREFUL : this function is executed in the context of the
        caller thread, to raise an excpetion in the context of the
        thread represented by this instance.
        """
        _async_raise( self._get_my_tid(), exctype )
</snippet></ROW><ROW><id>326275</id><snippet>idol7stats</snippet></ROW><ROW><id>326275</id><snippet>__init__.py</snippet></ROW><ROW><id>326275</id><snippet>idol7stats.py</snippet></ROW><ROW><id>326275</id><snippet>idol7stats</snippet></ROW><ROW><id>326275</id><snippet>import idol7stats.idol7stats</snippet></ROW><ROW><id>326275</id><snippet>idol7stats.py</snippet></ROW><ROW><id>326275</id><snippet>idol7stats/__init__.py</snippet></ROW><ROW><id>326275</id><snippet>idol7stats/__init__.py</snippet></ROW><ROW><id>326275</id><snippet>from idol7stats.idol7stats import *
</snippet></ROW><ROW><id>326447</id><snippet>import sys
#import and init pygame
import pygame
pygame.init() 

#create the screen
window = pygame.display.set_mode((640, 480)) 

#draw a line - see http://www.pygame.org/docs/ref/draw.html for more 
pygame.draw.line(window, (255, 255, 255), (0, 0), (30, 50))

#draw it to the screen
pygame.display.flip() 

#input handling (somewhat boilerplate code):
while True: 
   for event in pygame.event.get(): 
      if event.type == pygame.QUIT: 
          sys.exit(0) 
      else: 
          print event 
</snippet></ROW><ROW><id>326594</id><snippet>py&gt; data = "0010011010011101"
py&gt; data = [data[8*i:8*(i+1)] for i in range(len(data)/8)]
py&gt; data
['00100110', '10011101']
py&gt; data = [int(i, 2) for i in data]
py&gt; data
[38, 157]
py&gt; data = ''.join(chr(i) for i in data)
py&gt; data
'&amp;\x9d'
</snippet></ROW><ROW><id>326789</id><snippet>import sys
getattr(sys.modules[__name__], 'A')
</snippet></ROW><ROW><id>327011</id><snippet>import time
import math

def timeit1():
    s = time.time()
    for i in xrange(750000):
        z=i**.5
    print "Took %f seconds" % (time.time() - s)

def timeit2(arg=math.sqrt):
    s = time.time()
    for i in xrange(750000):
        z=arg(i)
    print "Took %f seconds" % (time.time() - s)

timeit1()
timeit2()
</snippet></ROW><ROW><id>327011</id><snippet>math.sqrt</snippet></ROW><ROW><id>327011</id><snippet>timeit1</snippet></ROW><ROW><id>327011</id><snippet>__pow__</snippet></ROW><ROW><id>327011</id><snippet>math.sqrt</snippet></ROW><ROW><id>327011</id><snippet>math.sqrt</snippet></ROW><ROW><id>327011</id><snippet>| Interpreter    |  x**.5, |   sqrt, | sqrt faster, % |
|                | seconds | seconds |                |
|----------------+---------+---------+----------------|
| Python 3.2rc1+ |    0.32 |    0.27 |             19 |
| Python 3.1.2   |   0.136 |   0.088 |             55 |
| Python 3.0.1   |   0.155 |   0.102 |             52 |
| Python 2.7     |   0.132 |   0.079 |             67 |
| Python 2.6.6   |   0.121 |   0.075 |             61 |
| PyPy 1.4.1     |   0.083 |  0.0159 |            422 |
| Jython 2.5.1   |   0.132 |    0.22 |            -40 |
| Python 2.5.5   |   0.129 |   0.125 |              3 |
| Python 2.4.6   |   0.131 |   0.123 |              7 |
#+TBLFM: $4=100*($2-$3)/$3;%.0f
</snippet></ROW><ROW><id>327011</id><snippet>$ uname -vms
Linux #42-Ubuntu SMP Thu Dec 2 02:41:37 UTC 2010 x86_64
$ cat /proc/cpuinfo | grep 'model name' | head -1
model name      : Intel(R) Core(TM) i7 CPU         920  @ 2.67GHz
</snippet></ROW><ROW><id>327011</id><snippet>git clone git://gist.github.com/783011.git gist-783011</snippet></ROW><ROW><id>327011</id><snippet>tox</snippet></ROW><ROW><id>327011</id><snippet>pip install tox</snippet></ROW><ROW><id>327011</id><snippet>tox</snippet></ROW><ROW><id>327011</id><snippet>tox.ini</snippet></ROW><ROW><id>327210</id><snippet>for k in sorted(somedictionary.keys()):
    doSomething(k)
</snippet></ROW><ROW><id>327210</id><snippet>for k, v in sorted(somedictionary.iteritems()):
   doSomething(k, v)
</snippet></ROW><ROW><id>327292</id><snippet>py-readline</snippet></ROW><ROW><id>327292</id><snippet>py25-readline</snippet></ROW><ROW><id>327292</id><snippet>/opt/local</snippet></ROW><ROW><id>327295</id><snippet>295760     S. Lott's answer
237984     S. Lott's with keys interned before passing in
203172 [*] d[(a,b,c)] = int(freq)
203156     d[a][b][c] = int(freq)
189132     keys.append((a,b,c)); freqs.append(int(freq))
146132     d[intern(a),intern(b)][intern(c)] = int(freq)
145408     d[intern(a)][intern(b)][intern(c)] = int(freq)
 83888 [*] d[a+' '+b+' '+c] = int(freq)
 82776 [*] d[(intern(a),intern(b),intern(c))] = int(freq)
 68756     keys.append((intern(a),intern(b),intern(c))); freqs.append(int(freq))
 60320     keys.append(a+' '+b+' '+c); freqs.append(int(freq))
 50556     pair array
 48320     squeezed pair array
 33024     squeezed single array
</snippet></ROW><ROW><id>327295</id><snippet>import collections

def build(file):
    pairs = collections.defaultdict(list)
    for line in file:  # N.B. file assumed to be already sorted
        a, b, c, freq = line.split()
        key = ' '.join((a, b))
        pairs[key].append(c + ':' + freq if freq != '1' else c)
    out = open('squeezedsinglearrayfile', 'w')
    for key in sorted(pairs.keys()):
        out.write('%s|%s\n' % (key, ' '.join(pairs[key])))

def load():
    return open('squeezedsinglearrayfile').readlines()

if __name__ == '__main__':
    build(open('freqs'))
</snippet></ROW><ROW><id>327488</id><snippet>data.fn = staticmethod(myFunction)
</snippet></ROW><ROW><id>327548</id><snippet>d[t].append(c)
</snippet></ROW><ROW><id>327548</id><snippet>d[t]</snippet></ROW><ROW><id>327548</id><snippet>d = {}
t = 0
d[t]
</snippet></ROW><ROW><id>327548</id><snippet>d</snippet></ROW><ROW><id>327548</id><snippet>t</snippet></ROW><ROW><id>327548</id><snippet>d[t] = []
d[t]
</snippet></ROW><ROW><id>327548</id><snippet>d</snippet></ROW><ROW><id>327548</id><snippet>t</snippet></ROW><ROW><id>327548</id><snippet>setdefault</snippet></ROW><ROW><id>327548</id><snippet>d.setdefault(t,[]).append(c)</snippet></ROW><ROW><id>327548</id><snippet>defaultdict(list)</snippet></ROW><ROW><id>327548</id><snippet>{}</snippet></ROW><ROW><id>327548</id><snippet>d= collections.defaultdict(list)
for ts, x, y in someFileOrListOrQueryOrWhatever:
    d[ts].append( (x,y) )
</snippet></ROW><ROW><id>327548</id><snippet>d= {}
</snippet></ROW><ROW><id>327548</id><snippet>if t not in d:
    d[t] = list()
d[t].append( c )
</snippet></ROW><ROW><id>327548</id><snippet>d= {}
</snippet></ROW><ROW><id>327548</id><snippet>d.setdefault(t,list()).append( c )
</snippet></ROW><ROW><id>327548</id><snippet>setdefault</snippet></ROW><ROW><id>327548</id><snippet>import collections
d = collections.defaultdict(list)
</snippet></ROW><ROW><id>327548</id><snippet>d[t].append( c )
</snippet></ROW><ROW><id>327548</id><snippet>defaultdict</snippet></ROW><ROW><id>327548</id><snippet>list</snippet></ROW><ROW><id>327741</id><snippet>def action1():
    pass # put a function here

def action2():
    pass # blah blah

def action3():
    pass # and so on

def no_such_action():
    pass # print a message indicating there's no such action

def main():
    actions = {"foo": action1, "bar": action2, "baz": action3}
    while True:
        print_menu()
        selection = raw_input("Your selection: ")
        if "quit" == selection:
            return
        toDo = actions.get(selection, no_such_action)
        toDo()

if __name__ == "__main__":
    main()
</snippet></ROW><ROW><id>327741</id><snippet>cmd</snippet></ROW><ROW><id>327987</id><snippet>query_set = Item.objects.extra(select={'count': 'count(1)'}, 
                               order_by=['-count']).values('count', 'category')
query_set.query.group_by = ['category_id']
</snippet></ROW><ROW><id>328002</id><snippet># load the image
image = pygame.image.load("some_image.png")

# draw a yellow line on the image
pygame.draw.line(image, (255, 255, 0), (0, 0), (100, 100))
</snippet></ROW><ROW><id>328002</id><snippet># initialize pygame and screen
import pygame
pygame.init()
screen = pygame.display.set_mode((720, 576))

# Draw the image to the screen
screen.blit(image, (0, 0))

# Draw a line on top of the image on the screen
pygame.draw.line(screen, (255, 255, 255), (0, 0), (50, 50))
</snippet></ROW><ROW><id>328067</id><snippet>image = pygame.Surface([640,480], pygame.SRCALPHA, 32)
image = image.convert_alpha()
</snippet></ROW><ROW><id>328068</id><snippet>List = open("filename.txt").readlines()
</snippet></ROW><ROW><id>328078</id><snippet>import wx, wx.grid

class GridData(wx.grid.PyGridTableBase):
    _cols = "a b c".split()
    _data = [
        "1 2 3".split(),
        "4 5 6".split(),
        "7 8 9".split()
    ]

    def GetColLabelValue(self, col):
        return self._cols[col]

    def GetNumberRows(self):
        return len(self._data)

    def GetNumberCols(self):
        return len(self._cols)

    def GetValue(self, row, col):
        return self._data[row][col]

    def SetValue(self, row, col, val):
        self._data[row][col] = val

class Test(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None)
        self.data = GridData()
        grid = wx.grid.Grid(self)
        grid.SetTable(self.data)
        self.Bind(wx.EVT_CLOSE, self.OnClose)
        self.Show()

    def OnClose(self, event):
        print self.data._data
        event.Skip()

app = wx.PySimpleApp()
app.TopWindow = Test()
app.MainLoop()
</snippet></ROW><ROW><id>328122</id><snippet>def isBetween(a, b, c):
    crossproduct = (c.y - a.y) * (b.x - a.x) - (c.x - a.x) * (b.y - a.y)
    if abs(crossproduct) &gt; epsilon : return False   # (or != 0 if using integers)

    dotproduct = (c.x - a.x) * (b.x - a.x) + (c.y - a.y)*(b.y - a.y)
    if dotproduct &lt; 0 : return False

    squaredlengthba = (b.x - a.x)*(b.x - a.x) + (b.y - a.y)*(b.y - a.y)
    if dotproduct &gt; squaredlengthba: return False

    return True
</snippet></ROW><ROW><id>328807</id><snippet>&gt;&gt;&gt; unicodedata.category(u'ą')[0] in 'LNPS'
True
</snippet></ROW><ROW><id>328882</id><snippet>import gc
for obj in gc.get_objects():
    if isinstance(obj, some_class):
        dome_something(obj)
</snippet></ROW><ROW><id>328882</id><snippet>from collections import defaultdict
import weakref

class KeepRefs(object):
    __refs__ = defaultdict(list)
    def __init__(self):
        self.__refs__[self.__class__].append(weakref.ref(self))

    @classmethod
    def get_instances(cls):
        for inst_ref in cls.__refs__[cls]:
            inst = inst_ref()
            if inst is not None:
                yield inst

class X(KeepRefs):
    def __init__(self, name):
        super(X, self).__init__()
        self.name = name

x = X("x")
y = X("y")
for r in X.get_instances():
    print r.name
del y
for r in X.get_instances():
    print r.name
</snippet></ROW><ROW><id>328882</id><snippet>__new__</snippet></ROW><ROW><id>328882</id><snippet>__new__</snippet></ROW><ROW><id>328882</id><snippet>for</snippet></ROW><ROW><id>328947</id><snippet>WM_SYSCOMMAND</snippet></ROW><ROW><id>328947</id><snippet>wParam</snippet></ROW><ROW><id>328947</id><snippet>SC_SCREENSAVE</snippet></ROW><ROW><id>328947</id><snippet>wParam</snippet></ROW><ROW><id>328947</id><snippet>SC_MONITORPOWER</snippet></ROW><ROW><id>328947</id><snippet>lParam</snippet></ROW><ROW><id>328947</id><snippet>DefWindowProc</snippet></ROW><ROW><id>328947</id><snippet>DefWindowProc</snippet></ROW><ROW><id>328947</id><snippet>RegisterPowerSettingNotification</snippet></ROW><ROW><id>328947</id><snippet>WM_POWERBROADCAST</snippet></ROW><ROW><id>328947</id><snippet>wParam</snippet></ROW><ROW><id>328947</id><snippet>PBT_POWERSETTINGCHANGE</snippet></ROW><ROW><id>328947</id><snippet>lParam</snippet></ROW><ROW><id>328947</id><snippet>POWERBROADCAST_SETTING</snippet></ROW><ROW><id>329510</id><snippet>try:
    import foobar
except:
    print 'No foobar module'
</snippet></ROW><ROW><id>329904</id><snippet>[ (i,j) for i in range(1,3) for j in range(1,5) ]
</snippet></ROW><ROW><id>330000</id><snippet>string_to_hash = user.stored_salt + entered_password
successful_login = (sha1(string_to_hash) == user.stored_password_hash)
</snippet></ROW><ROW><id>330463</id><snippet>from xml.parsers.expat import ParserCreate

open_elements = {}
result_dict = {}

def start_element(name, attrs):
    open_elements[name] = True

def end_element(name):
    del open_elements[name]

def char_data(data):
    for element in open_elements:
        cur = result_dict.setdefault(element, '')
        result_dict[element] = cur + data

if __name__ == '__main__':
    p = ParserCreate()

    p.StartElementHandler = start_element
    p.EndElementHandler = end_element
    p.CharacterDataHandler = char_data

    p.Parse(u'&lt;_133_3&gt;&lt;_135_3&gt;&lt;_116_2&gt;The other system worked for about 1 month&lt;/_116_2&gt; got some good images &lt;_137_3&gt;on it then it started doing the same thing as the first one&lt;/_137_3&gt; so then I quit using either camera now they are just sitting and collecting dust.&lt;/_135_3&gt;&lt;/_133_3&gt;', 1)

    print result_dict
</snippet></ROW><ROW><id>330466</id><snippet>import java
sdf = java.text.SimpleDateFormat

fmt_in = sdf('d MMM yyyy HH:mm:ss Z')
fmt_out = sdf('MM/dd/yyyy HH:mm:ssaa')

fmt_out.format(fmt_in.parse(time_str))
</snippet></ROW><ROW><id>330580</id><snippet>multiprocessing</snippet></ROW><ROW><id>330924</id><snippet>import csv

input = ['abc,"a string, with a comma","another, one"']
parser = csv.reader(input)

for fields in parser:
  for i,f in enumerate(fields):
    print i,f    # in Python 3 and up, print is a function; use: print(i,f)
</snippet></ROW><ROW><id>331776</id><snippet>if filecmp.cmp(local, config_file):
    shutil.copyfile(remote, config_file)
else:
    shutil.copyfile(local, config_file)
</snippet></ROW><ROW><id>331776</id><snippet>y if x else z</snippet></ROW><ROW><id>331846</id><snippet># startproj.sh
script_path=`dirname $0`
export PYTHONPATH=${script_path}/external;${PYTHONPATH}
exec ${script_path}/projstartup.py
</snippet></ROW><ROW><id>331890</id><snippet>urllib</snippet></ROW><ROW><id>331890</id><snippet>urllib2</snippet></ROW><ROW><id>331890</id><snippet>httplib</snippet></ROW><ROW><id>331890</id><snippet>import httplib

h = httplib.HTTPConnection('www.example.com')
h.request('HEAD', '/')
response = h.getresponse()

// Check for 30x status code
if 300 &lt;= response.status &lt; 400:
    // It's a redirect
    location = response.getheader('Location')
</snippet></ROW><ROW><id>333116</id><snippet>import struct

# Pack a Python long as if it was a C unsigned integer, little endian
bytes = struct.pack("&lt;I", 0x78FF00AA)
print [hex(ord(byte)) for byte in bytes]

['0xaa', '0x0', '0xff', '0x78']
</snippet></ROW><ROW><id>333621</id><snippet>Twisted</snippet></ROW><ROW><id>333621</id><snippet>Twisted-2.5</snippet></ROW><ROW><id>333621</id><snippet>Twisted/bin</snippet></ROW><ROW><id>333621</id><snippet>.py</snippet></ROW><ROW><id>333621</id><snippet>Twisted/twisted.py</snippet></ROW><ROW><id>333621</id><snippet>Twisted/twisted/</snippet></ROW><ROW><id>333621</id><snippet>Twisted/twisted/__init__.py</snippet></ROW><ROW><id>333621</id><snippet>Twisted/twisted/internet.py</snippet></ROW><ROW><id>333621</id><snippet>Twisted/twisted/test/</snippet></ROW><ROW><id>333621</id><snippet>Twisted/twisted/test/__init__.py</snippet></ROW><ROW><id>333621</id><snippet>Twisted/twisted/test/test_internet.py</snippet></ROW><ROW><id>333621</id><snippet>Twisted/README</snippet></ROW><ROW><id>333621</id><snippet>Twisted/setup.py</snippet></ROW><ROW><id>333621</id><snippet>src</snippet></ROW><ROW><id>333621</id><snippet>lib</snippet></ROW><ROW><id>333621</id><snippet>__init__.py</snippet></ROW><ROW><id>333621</id><snippet>__init__.py</snippet></ROW><ROW><id>333621</id><snippet>PYTHONPATH</snippet></ROW><ROW><id>333658</id><snippet>def redirect_to_login(*args, **kwargs):
    return args[0].redirect(users.create_login_url(args[0].request.path))

def admin_only(handler):
    def wrapped_handler(*args, **kwargs):    
        user = users.get_current_user()
        if user:
            if authorized(user):
                return handler(args[0])
            else:
                logging.warning('An unauthorized user has attempted '
                                'to enter an authorized page')
                return redirect_to_login(*args, **kwargs)
        else:
            return redirect_to_login(*args, **kwargs)

    return wrapped_handler
</snippet></ROW><ROW><id>333727</id><snippet>&gt;&gt;&gt; import string
&gt;&gt;&gt; help(string.split)
Help on function split in module string:

split(s, sep=None, maxsplit=-1)
    split(s [,sep [,maxsplit]]) -&gt; list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

&gt;&gt;&gt; help("".split)
Help on built-in function split:

split(...)
    S.split([sep [,maxsplit]]) -&gt; list of strings

    Return a list of the words in the string S, using sep as the
    delimiter string.  If maxsplit is given, at most maxsplit
    splits are done. If sep is not specified or is None, any
    whitespace string is a separator.
</snippet></ROW><ROW><id>334666</id><snippet>d = dict(p1=1, p2=2)
def f2(p1,p2):
    print p1, p2
f2(**d)
</snippet></ROW><ROW><id>335105</id><snippet>import os
for path, dirs, files in os.walk( root ):
    for f in files:
        print path, f, os.path.getsize( os.path.join( path, f ) )
</snippet></ROW><ROW><id>335159</id><snippet>myfunction = lambda x: x==2
</snippet></ROW><ROW><id>335159</id><snippet>&gt;&gt;&gt;from lamtest import myfunc
&gt;&gt;&gt;import inspect
&gt;&gt;&gt;inspect.getsource(myfunc)
</snippet></ROW><ROW><id>335159</id><snippet>'myfunc = lambda x: x==2\n'
</snippet></ROW><ROW><id>335299</id><snippet>os, os.path
</snippet></ROW><ROW><id>335299</id><snippet>sys
</snippet></ROW><ROW><id>335299</id><snippet>unittest
</snippet></ROW><ROW><id>335299</id><snippet>logging
</snippet></ROW><ROW><id>335299</id><snippet>datetime
</snippet></ROW><ROW><id>335299</id><snippet>ConfigParser
</snippet></ROW><ROW><id>335299</id><snippet>socket, urllib
</snippet></ROW><ROW><id>335312</id><snippet>from django.db import models

class Card(object):
    """The ``Card`` class you described."""
    ...

class CardField(models.PositiveIntegerField):
    __metaclass__ = models.SubfieldBase

    def get_db_prep_value(self, value):
        """Return the ``int`` equivalent of ``value``."""
        if value is None: return None
        try:
            int_value = value.as_number()
        except AttributeError:
            int_value = int(value)
        return int_value

    def to_python(self, value):
        """Return the ``Card`` equivalent of ``value``."""
        if value is None or isinstance(value, Card):
            return value
        return Card(int(value))
</snippet></ROW><ROW><id>335312</id><snippet>get_db_prep_value</snippet></ROW><ROW><id>335312</id><snippet>value</snippet></ROW><ROW><id>335312</id><snippet>int</snippet></ROW><ROW><id>335312</id><snippet>None</snippet></ROW><ROW><id>335312</id><snippet>to_python</snippet></ROW><ROW><id>335312</id><snippet>value</snippet></ROW><ROW><id>335312</id><snippet>Card</snippet></ROW><ROW><id>335312</id><snippet>None</snippet></ROW><ROW><id>335312</id><snippet>SubfieldBase</snippet></ROW><ROW><id>335312</id><snippet>to_python</snippet></ROW><ROW><id>335323</id><snippet>#!/usr/bin/env python

import os, os.path
from contactsheet import make_contact_sheet

def make_film_strip(fnames,
                   (photow,photoh),
                   (marl,mart,marr,marb),
                   padding):
    return make_contact_sheet(fnames,
                              (1, len(fnames)),
                              (photow,photoh),
                              (marl,mart,marr,marb),
                              padding)
</snippet></ROW><ROW><id>335323</id><snippet>contactsheet.py</snippet></ROW><ROW><id>335323</id><snippet>fstrip = filmstrip.make_film_strip(filmstrip.fnames, (120, 120), (0,0,0,0), 0)
fstrip.save('/path/to/file.format')
</snippet></ROW><ROW><id>335754</id><snippet>[Section 3]
barList=item1,item2
</snippet></ROW><ROW><id>336001</id><snippet>#!/usr/bin/env python
import Image

def makefilmstrip(images, mode='RGB', color='white'):
    """Return a combined (filmstripped, each on top of the other) image of the images.

    """
    width  = max(img.size[0] for img in images)
    height = sum(img.size[1] for img in images)

    image = Image.new(mode, (width, height), color) 

    left, upper = 0, 0
    for img in images:
        image.paste(img, (left, upper))
        upper += img.size[1]

    return image

if __name__=='__main__':
    # Here's how it could be used:
    from glob import glob
    from optparse import OptionParser

    # process command-line args
    parser = OptionParser()
    parser.add_option("-o", "--output", dest="file",
                      help="write combined image to OUTPUT")

    options, filepatterns = parser.parse_args()
    outfilename = options.file

    filenames = []
    for files in map(glob, filepatterns):
        if files:
            filenames += files

    # construct image
    images = map(Image.open, filenames)    
    img = makefilmstrip(images)
    img.save(outfilename)
</snippet></ROW><ROW><id>336001</id><snippet>$ python filmstrip.py -o output.jpg *.jpg
</snippet></ROW><ROW><id>336239</id><snippet>/Library/LaunchDaemons</snippet></ROW><ROW><id>336239</id><snippet>com.you.wiki.plist</snippet></ROW><ROW><id>336239</id><snippet>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;
&lt;plist version="1.0"&gt;
&lt;dict&gt;
    &lt;key&gt;Label&lt;/key&gt;
    &lt;string&gt;com.you.wiki&lt;/string&gt;
    &lt;key&gt;LowPriorityIO&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;KeepAlive&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;RunAtLoad&lt;/key&gt;
    &lt;true/&gt;
    &lt;key&gt;Nice&lt;/key&gt;
    &lt;integer&gt;1&lt;/integer&gt;
    &lt;key&gt;WorkingDirectory&lt;/key&gt;
    &lt;string&gt;/Users/stuartcw/Documents/Wiki/moin-1.7.2&lt;/string&gt; 
    &lt;key&gt;UserName&lt;/key&gt;
    &lt;string&gt;user to run this as&lt;/string&gt;
    &lt;key&gt;ProgramArguments&lt;/key&gt;
    &lt;array&gt;
        &lt;string&gt;/usr/bin/python&lt;/string&gt;
        &lt;string&gt;wikiserver.py&lt;/string&gt;
    &lt;/array&gt;
&lt;/dict&gt;
&lt;/plist&gt;
</snippet></ROW></DATA>